head	1.2;
access;
symbols
	OPENBSD_6_2_BASE:1.2
	PERL_5_24_2:1.1.1.14
	OPENBSD_6_1:1.2.0.4
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.1.13.0.10
	OPENBSD_6_0_BASE:1.1.1.13
	OPENBSD_5_9:1.1.1.13.0.4
	OPENBSD_5_9_BASE:1.1.1.13
	OPENBSD_5_8:1.1.1.13.0.6
	OPENBSD_5_8_BASE:1.1.1.13
	PERL_5_20_2:1.1.1.13
	OPENBSD_5_7:1.1.1.13.0.2
	OPENBSD_5_7_BASE:1.1.1.13
	PERL_5_20_1:1.1.1.13
	OPENBSD_5_6:1.1.1.12.0.4
	OPENBSD_5_6_BASE:1.1.1.12
	PERL_5_18_2:1.1.1.12
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.11.0.6
	OPENBSD_5_5_BASE:1.1.1.11
	OPENBSD_5_4:1.1.1.11.0.2
	OPENBSD_5_4_BASE:1.1.1.11
	PERL_5_16_3:1.1.1.11
	OPENBSD_5_3:1.1.1.10.0.10
	OPENBSD_5_3_BASE:1.1.1.10
	OPENBSD_5_2:1.1.1.10.0.8
	OPENBSD_5_2_BASE:1.1.1.10
	OPENBSD_5_1_BASE:1.1.1.10
	OPENBSD_5_1:1.1.1.10.0.6
	OPENBSD_5_0:1.1.1.10.0.4
	OPENBSD_5_0_BASE:1.1.1.10
	OPENBSD_4_9:1.1.1.10.0.2
	OPENBSD_4_9_BASE:1.1.1.10
	PERL_5_12_2:1.1.1.10
	OPENBSD_4_8:1.1.1.9.0.4
	OPENBSD_4_8_BASE:1.1.1.9
	OPENBSD_4_7:1.1.1.9.0.2
	OPENBSD_4_7_BASE:1.1.1.9
	PERL_5_10_1:1.1.1.9
	OPENBSD_4_6:1.1.1.8.0.6
	OPENBSD_4_6_BASE:1.1.1.8
	OPENBSD_4_5:1.1.1.8.0.2
	OPENBSD_4_5_BASE:1.1.1.8
	PERL_5_10_0:1.1.1.8
	OPENBSD_4_4:1.1.1.7.0.10
	OPENBSD_4_4_BASE:1.1.1.7
	OPENBSD_4_3:1.1.1.7.0.8
	OPENBSD_4_3_BASE:1.1.1.7
	OPENBSD_4_2:1.1.1.7.0.6
	OPENBSD_4_2_BASE:1.1.1.7
	OPENBSD_4_1:1.1.1.7.0.4
	OPENBSD_4_1_BASE:1.1.1.7
	OPENBSD_4_0:1.1.1.7.0.2
	OPENBSD_4_0_BASE:1.1.1.7
	PERL_5_8_8:1.1.1.7
	OPENBSD_3_9:1.1.1.6.0.6
	OPENBSD_3_9_BASE:1.1.1.6
	OPENBSD_3_8:1.1.1.6.0.4
	OPENBSD_3_8_BASE:1.1.1.6
	OPENBSD_3_7:1.1.1.6.0.2
	OPENBSD_3_7_BASE:1.1.1.6
	PERL_5_8_6:1.1.1.6
	OPENBSD_3_6:1.1.1.5.0.4
	OPENBSD_3_6_BASE:1.1.1.5
	PERL_5_8_5:1.1.1.5
	PERL_5_8_3:1.1.1.5
	OPENBSD_3_5:1.1.1.5.0.2
	OPENBSD_3_5_BASE:1.1.1.5
	PERL_5_8_2:1.1.1.5
	OPENBSD_3_4:1.1.1.4.0.4
	OPENBSD_3_4_BASE:1.1.1.4
	OPENBSD_3_3:1.1.1.4.0.2
	OPENBSD_3_3_BASE:1.1.1.4
	PERL_5_8_0:1.1.1.4
	OPENBSD_3_2:1.1.1.3.0.6
	OPENBSD_3_2_BASE:1.1.1.3
	OPENBSD_3_1:1.1.1.3.0.4
	OPENBSD_3_1_BASE:1.1.1.3
	OPENBSD_3_0:1.1.1.3.0.2
	OPENBSD_3_0_BASE:1.1.1.3
	PERL_5_6_1:1.1.1.3
	OPENBSD_2_9:1.1.1.2.0.6
	OPENBSD_2_9_BASE:1.1.1.2
	OPENBSD_2_8:1.1.1.2.0.4
	OPENBSD_2_8_BASE:1.1.1.2
	OPENBSD_2_7:1.1.1.2.0.2
	OPENBSD_2_7_BASE:1.1.1.2
	PERL_5_6_0:1.1.1.2
	OPENBSD_2_6:1.1.1.1.0.2
	OPENBSD_2_6_BASE:1.1.1.1
	PERL_500503:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2017.02.05.00.32.11;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	99.04.29.22.38.38;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.29.22.38.38;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2000.04.06.16.09.01;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2001.05.24.18.22.38;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2002.10.27.22.14.53;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2003.12.03.02.43.40;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2005.01.15.21.16.42;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2006.03.28.18.47.51;	author millert;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2008.09.29.17.18.13;	author millert;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2009.10.12.18.11.10;	author millert;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	2010.09.24.14.48.52;	author millert;	state Exp;
branches;
next	1.1.1.11;

1.1.1.11
date	2013.03.25.20.08.42;	author sthen;	state Exp;
branches;
next	1.1.1.12;

1.1.1.12
date	2014.03.24.14.59.01;	author afresh1;	state Exp;
branches;
next	1.1.1.13;

1.1.1.13
date	2014.11.17.20.53.05;	author afresh1;	state Exp;
branches;
next	1.1.1.14;
commitid	B31cAbBIXiCqnL97;

1.1.1.14
date	2017.08.14.13.46.10;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#      B.pm
#
#      Copyright (c) 1996, 1997, 1998 Malcolm Beattie
#
#      You may distribute under the terms of either the GNU General Public
#      License or the Artistic License, as specified in the README file.
#
package B;
use strict;

require Exporter;
@@B::ISA = qw(Exporter);

# walkoptree_slow comes from B.pm (you are there),
# walkoptree comes from B.xs

BEGIN {
    $B::VERSION = '1.62';
    @@B::EXPORT_OK = ();

    # Our BOOT code needs $VERSION set, and will append to @@EXPORT_OK.
    # Want our constants loaded before the compiler meets OPf_KIDS below, as
    # the combination of having the constant stay a Proxy Constant Subroutine
    # and its value being inlined saves a little over .5K

    require XSLoader;
    XSLoader::load();
}

push @@B::EXPORT_OK, (qw(minus_c ppname save_BEGINs
			class peekop cast_I32 cstring cchar hash threadsv_names
			main_root main_start main_cv svref_2object opnumber
			sub_generation amagic_generation perlstring
			walkoptree_slow walkoptree walkoptree_exec walksymtable
			parents comppadlist sv_undef compile_stats timing_info
			begin_av init_av check_av end_av regex_padav dowarn
			defstash curstash warnhook diehook inc_gv @@optype
			@@specialsv_name unitcheck_av safename));

@@B::SV::ISA = 'B::OBJECT';
@@B::NULL::ISA = 'B::SV';
@@B::PV::ISA = 'B::SV';
@@B::IV::ISA = 'B::SV';
@@B::NV::ISA = 'B::SV';
# RV is eliminated with 5.11.0, but effectively is a specialisation of IV now.
@@B::RV::ISA = $] >= 5.011 ? 'B::IV' : 'B::SV';
@@B::PVIV::ISA = qw(B::PV B::IV);
@@B::PVNV::ISA = qw(B::PVIV B::NV);
@@B::PVMG::ISA = 'B::PVNV';
@@B::REGEXP::ISA = 'B::PVMG' if $] >= 5.011;
@@B::INVLIST::ISA = 'B::PV'  if $] >= 5.019;
@@B::PVLV::ISA = 'B::GV';
@@B::BM::ISA = 'B::GV';
@@B::AV::ISA = 'B::PVMG';
@@B::GV::ISA = 'B::PVMG';
@@B::HV::ISA = 'B::PVMG';
@@B::CV::ISA = 'B::PVMG';
@@B::IO::ISA = 'B::PVMG';
@@B::FM::ISA = 'B::CV';

@@B::OP::ISA = 'B::OBJECT';
@@B::UNOP::ISA = 'B::OP';
@@B::UNOP_AUX::ISA = 'B::UNOP';
@@B::BINOP::ISA = 'B::UNOP';
@@B::LOGOP::ISA = 'B::UNOP';
@@B::LISTOP::ISA = 'B::BINOP';
@@B::SVOP::ISA = 'B::OP';
@@B::PADOP::ISA = 'B::OP';
@@B::PVOP::ISA = 'B::OP';
@@B::LOOP::ISA = 'B::LISTOP';
@@B::PMOP::ISA = 'B::LISTOP';
@@B::COP::ISA = 'B::OP';
@@B::METHOP::ISA = 'B::OP';

@@B::SPECIAL::ISA = 'B::OBJECT';

@@B::optype = qw(OP UNOP BINOP LOGOP LISTOP PMOP SVOP PADOP PVOP LOOP COP
                METHOP UNOP_AUX);
# bytecode.pl contained the following comment:
# Nullsv *must* come first in the following so that the condition
# ($$sv == 0) can continue to be used to test (sv == Nullsv).
@@B::specialsv_name = qw(Nullsv &PL_sv_undef &PL_sv_yes &PL_sv_no
			(SV*)pWARN_ALL (SV*)pWARN_NONE (SV*)pWARN_STD);

{
    # Stop "-w" from complaining about the lack of a real B::OBJECT class
    package B::OBJECT;
}

sub B::GV::SAFENAME {
  safename(shift()->NAME);
}

sub safename {
  my $name = shift;

  # The regex below corresponds to the isCONTROLVAR macro
  # from toke.c

  $name =~ s/^\c?/^?/
    or $name =~ s/^([\cA-\cZ\c\\c[\c]\c_\c^])/
                "^" .  chr( utf8::unicode_to_native( 64 ^ ord($1) ))/e;

  # When we say unicode_to_native we really mean ascii_to_native,
  # which matters iff this is a non-ASCII platform (EBCDIC).  '\c?' would
  # not have to be special cased, except for non-ASCII.

  return $name;
}

sub B::IV::int_value {
  my ($self) = @@_;
  return (($self->FLAGS() & SVf_IVisUV()) ? $self->UVX : $self->IV);
}

sub B::NULL::as_string() {""}
*B::IV::as_string = \*B::IV::int_value;
*B::PV::as_string = \*B::PV::PV;

#  The input typemap checking makes no distinction between different SV types,
#  so the XS body will generate the same C code, despite the different XS
#  "types". So there is no change in behaviour from doing "newXS" like this,
#  compared with the old approach of having a (near) duplicate XS body.
#  We should fix the typemap checking.
*B::IV::RV = \*B::PV::RV if $] > 5.012;

my $debug;
my $op_count = 0;
my @@parents = ();

sub debug {
    my ($class, $value) = @@_;
    $debug = $value;
    walkoptree_debug($value);
}

sub class {
    my $obj = shift;
    my $name = ref $obj;
    $name =~ s/^.*:://;
    return $name;
}

sub parents { \@@parents }

# For debugging
sub peekop {
    my $op = shift;
    return sprintf("%s (0x%x) %s", class($op), $$op, $op->name);
}

sub walkoptree_slow {
    my($op, $method, $level) = @@_;
    $op_count++; # just for statistics
    $level ||= 0;
    warn(sprintf("walkoptree: %d. %s\n", $level, peekop($op))) if $debug;
    $op->$method($level) if $op->can($method);
    if ($$op && ($op->flags & OPf_KIDS)) {
	my $kid;
	unshift(@@parents, $op);
	for ($kid = $op->first; $$kid; $kid = $kid->sibling) {
	    walkoptree_slow($kid, $method, $level + 1);
	}
	shift @@parents;
    }
    if (class($op) eq 'PMOP'
	&& ref($op->pmreplroot)
	&& ${$op->pmreplroot}
	&& $op->pmreplroot->isa( 'B::OP' ))
    {
	unshift(@@parents, $op);
	walkoptree_slow($op->pmreplroot, $method, $level + 1);
	shift @@parents;
    }
}

sub compile_stats {
    return "Total number of OPs processed: $op_count\n";
}

sub timing_info {
    my ($sec, $min, $hr) = localtime;
    my ($user, $sys) = times;
    sprintf("%02d:%02d:%02d user=$user sys=$sys",
	    $hr, $min, $sec, $user, $sys);
}

my %symtable;

sub clearsym {
    %symtable = ();
}

sub savesym {
    my ($obj, $value) = @@_;
#    warn(sprintf("savesym: sym_%x => %s\n", $$obj, $value)); # debug
    $symtable{sprintf("sym_%x", $$obj)} = $value;
}

sub objsym {
    my $obj = shift;
    return $symtable{sprintf("sym_%x", $$obj)};
}

sub walkoptree_exec {
    my ($op, $method, $level) = @@_;
    $level ||= 0;
    my ($sym, $ppname);
    my $prefix = "    " x $level;
    for (; $$op; $op = $op->next) {
	$sym = objsym($op);
	if (defined($sym)) {
	    print $prefix, "goto $sym\n";
	    return;
	}
	savesym($op, sprintf("%s (0x%lx)", class($op), $$op));
	$op->$method($level);
	$ppname = $op->name;
	if ($ppname =~
	    /^(d?or(assign)?|and(assign)?|mapwhile|grepwhile|entertry|range|cond_expr)$/)
	{
	    print $prefix, uc($1), " => {\n";
	    walkoptree_exec($op->other, $method, $level + 1);
	    print $prefix, "}\n";
	} elsif ($ppname eq "match" || $ppname eq "subst") {
	    my $pmreplstart = $op->pmreplstart;
	    if ($$pmreplstart) {
		print $prefix, "PMREPLSTART => {\n";
		walkoptree_exec($pmreplstart, $method, $level + 1);
		print $prefix, "}\n";
	    }
	} elsif ($ppname eq "substcont") {
	    print $prefix, "SUBSTCONT => {\n";
	    walkoptree_exec($op->other->pmreplstart, $method, $level + 1);
	    print $prefix, "}\n";
	    $op = $op->other;
	} elsif ($ppname eq "enterloop") {
	    print $prefix, "REDO => {\n";
	    walkoptree_exec($op->redoop, $method, $level + 1);
	    print $prefix, "}\n", $prefix, "NEXT => {\n";
	    walkoptree_exec($op->nextop, $method, $level + 1);
	    print $prefix, "}\n", $prefix, "LAST => {\n";
	    walkoptree_exec($op->lastop,  $method, $level + 1);
	    print $prefix, "}\n";
	} elsif ($ppname eq "subst") {
	    my $replstart = $op->pmreplstart;
	    if ($$replstart) {
		print $prefix, "SUBST => {\n";
		walkoptree_exec($replstart, $method, $level + 1);
		print $prefix, "}\n";
	    }
	}
    }
}

sub walksymtable {
    my ($symref, $method, $recurse, $prefix) = @@_;
    my $sym;
    my $ref;
    my $fullname;
    no strict 'refs';
    $prefix = '' unless defined $prefix;
    foreach my $sym ( sort keys %$symref ) {
        $ref= $symref->{$sym};
        $fullname = "*main::".$prefix.$sym;
	if ($sym =~ /::$/) {
	    $sym = $prefix . $sym;
	    if (svref_2object(\*$sym)->NAME ne "main::" && $sym ne "<none>::" && &$recurse($sym)) {
               walksymtable(\%$fullname, $method, $recurse, $sym);
	    }
	} else {
           svref_2object(\*$fullname)->$method();
	}
    }
}

1;

__END__

=head1 NAME

B - The Perl Compiler Backend

=head1 SYNOPSIS

	use B;

=head1 DESCRIPTION

The C<B> module supplies classes which allow a Perl program to delve
into its own innards.  It is the module used to implement the
"backends" of the Perl compiler.  Usage of the compiler does not
require knowledge of this module: see the F<O> module for the
user-visible part.  The C<B> module is of use to those who want to
write new compiler backends.  This documentation assumes that the
reader knows a fair amount about perl's internals including such
things as SVs, OPs and the internal symbol table and syntax tree
of a program.

=head1 OVERVIEW

The C<B> module contains a set of utility functions for querying the
current state of the Perl interpreter; typically these functions
return objects from the B::SV and B::OP classes, or their derived
classes.  These classes in turn define methods for querying the
resulting objects about their own internal state.

=head1 Utility Functions

The C<B> module exports a variety of functions: some are simple
utility functions, others provide a Perl program with a way to
get an initial "handle" on an internal object.

=head2 Functions Returning C<B::SV>, C<B::AV>, C<B::HV>, and C<B::CV> objects

For descriptions of the class hierarchy of these objects and the
methods that can be called on them, see below, L<"OVERVIEW OF
CLASSES"> and L<"SV-RELATED CLASSES">.

=over 4

=item sv_undef

Returns the SV object corresponding to the C variable C<sv_undef>.

=item sv_yes

Returns the SV object corresponding to the C variable C<sv_yes>.

=item sv_no

Returns the SV object corresponding to the C variable C<sv_no>.

=item svref_2object(SVREF)

Takes a reference to any Perl value, and turns the referred-to value
into an object in the appropriate B::OP-derived or B::SV-derived
class.  Apart from functions such as C<main_root>, this is the primary
way to get an initial "handle" on an internal perl data structure
which can then be followed with the other access methods.

The returned object will only be valid as long as the underlying OPs
and SVs continue to exist.  Do not attempt to use the object after the
underlying structures are freed.

=item amagic_generation

Returns the SV object corresponding to the C variable C<amagic_generation>.
As of Perl 5.18, this is just an alias to C<PL_na>, so its value is
meaningless.

=item init_av

Returns the AV object (i.e. in class B::AV) representing INIT blocks.

=item check_av

Returns the AV object (i.e. in class B::AV) representing CHECK blocks.

=item unitcheck_av

Returns the AV object (i.e. in class B::AV) representing UNITCHECK blocks.

=item begin_av

Returns the AV object (i.e. in class B::AV) representing BEGIN blocks.

=item end_av

Returns the AV object (i.e. in class B::AV) representing END blocks.

=item comppadlist

Returns the PADLIST object (i.e. in class B::PADLIST) of the global
comppadlist.  In Perl 5.16 and earlier it returns an AV object (class
B::AV).

=item regex_padav

Only when perl was compiled with ithreads.

=item main_cv

Return the (faked) CV corresponding to the main part of the Perl
program.

=back

=head2 Functions for Examining the Symbol Table

=over 4

=item walksymtable(SYMREF, METHOD, RECURSE, PREFIX)

Walk the symbol table starting at SYMREF and call METHOD on each
symbol (a B::GV object) visited.  When the walk reaches package
symbols (such as "Foo::") it invokes RECURSE, passing in the symbol
name, and only recurses into the package if that sub returns true.

PREFIX is the name of the SYMREF you're walking.

For example:

  # Walk CGI's symbol table calling print_subs on each symbol.
  # Recurse only into CGI::Util::
  walksymtable(\%CGI::, 'print_subs',
               sub { $_[0] eq 'CGI::Util::' }, 'CGI::');

print_subs() is a B::GV method you have declared.  Also see L<"B::GV
Methods">, below.

=back

=head2 Functions Returning C<B::OP> objects or for walking op trees

For descriptions of the class hierarchy of these objects and the
methods that can be called on them, see below, L<"OVERVIEW OF
CLASSES"> and L<"OP-RELATED CLASSES">.

=over 4

=item main_root

Returns the root op (i.e. an object in the appropriate B::OP-derived
class) of the main part of the Perl program.

=item main_start

Returns the starting op of the main part of the Perl program.

=item walkoptree(OP, METHOD)

Does a tree-walk of the syntax tree based at OP and calls METHOD on
each op it visits.  Each node is visited before its children.  If
C<walkoptree_debug> (see below) has been called to turn debugging on then
the method C<walkoptree_debug> is called on each op before METHOD is
called.

=item walkoptree_debug(DEBUG)

Returns the current debugging flag for C<walkoptree>.  If the optional
DEBUG argument is non-zero, it sets the debugging flag to that.  See
the description of C<walkoptree> above for what the debugging flag
does.

=back

=head2 Miscellaneous Utility Functions

=over 4

=item ppname(OPNUM)

Return the PP function name (e.g. "pp_add") of op number OPNUM.

=item hash(STR)

Returns a string in the form "0x..." representing the value of the
internal hash function used by perl on string STR.

=item cast_I32(I)

Casts I to the internal I32 type used by that perl.

=item minus_c

Does the equivalent of the C<-c> command-line option.  Obviously, this
is only useful in a BEGIN block or else the flag is set too late.

=item cstring(STR)

Returns a double-quote-surrounded escaped version of STR which can
be used as a string in C source code.

=item perlstring(STR)

Returns a double-quote-surrounded escaped version of STR which can
be used as a string in Perl source code.

=item safename(STR)

This function returns the string with the first character modified if it
is a control character.  It converts it to ^X format first, so that "\cG"
becomes "^G".  This is used internally by L<B::GV::SAFENAME|/SAFENAME>, but
you can call it directly.

=item class(OBJ)

Returns the class of an object without the part of the classname
preceding the first C<"::">.  This is used to turn C<"B::UNOP"> into
C<"UNOP"> for example.

=item threadsv_names

This used to provide support for the old 5.005 threading module. It now
does nothing.

=back

=head2 Exported utility variables

=over 4

=item @@optype

  my $op_type = $optype[$op_type_num];

A simple mapping of the op type number to its type (like 'COP' or 'BINOP').

=item @@specialsv_name

  my $sv_name = $specialsv_name[$sv_index];

Certain SV types are considered 'special'.  They're represented by
B::SPECIAL and are referred to by a number from the specialsv_list.
This array maps that number back to the name of the SV (like 'Nullsv'
or '&PL_sv_undef').

=back


=head1 OVERVIEW OF CLASSES

The C structures used by Perl's internals to hold SV and OP
information (PVIV, AV, HV, ..., OP, SVOP, UNOP, ...) are modelled on a
class hierarchy and the C<B> module gives access to them via a true
object hierarchy.  Structure fields which point to other objects
(whether types of SV or types of OP) are represented by the C<B>
module as Perl objects of the appropriate class.

The bulk of the C<B> module is the methods for accessing fields of
these structures.

Note that all access is read-only.  You cannot modify the internals by
using this module.  Also, note that the B::OP and B::SV objects created
by this module are only valid for as long as the underlying objects
exist; their creation doesn't increase the reference counts of the
underlying objects.  Trying to access the fields of a freed object will
give incomprehensible results, or worse.

=head2 SV-RELATED CLASSES

B::IV, B::NV, B::RV, B::PV, B::PVIV, B::PVNV, B::PVMG, B::BM (5.9.5 and
earlier), B::PVLV, B::AV, B::HV, B::CV, B::GV, B::FM, B::IO.  These classes
correspond in the obvious way to the underlying C structures of similar names.
The inheritance hierarchy mimics the underlying C "inheritance".  For the
5.10.x branch, (I<ie> 5.10.0, 5.10.1 I<etc>) this is:

                           B::SV
                             |
                +------------+------------+------------+
                |            |            |            |
              B::PV        B::IV        B::NV        B::RV
                  \         /           /
                   \       /           /
                    B::PVIV           /
                         \           /
                          \         /
                           \       /
                            B::PVNV
                               |
                               |
                            B::PVMG
                               |
                   +-----+-----+-----+-----+
                   |     |     |     |     |
                 B::AV B::GV B::HV B::CV B::IO
                         |           |
                         |           |
                      B::PVLV      B::FM

For 5.9.0 and earlier, PVLV is a direct subclass of PVMG, and BM is still
present as a distinct type, so the base of this diagram is


                               |
                               |
                            B::PVMG
                               |
            +------+-----+-----+-----+-----+-----+
            |      |     |     |     |     |     |
         B::PVLV B::BM B::AV B::GV B::HV B::CV B::IO
                                           |
                                           |
                                         B::FM

For 5.11.0 and later, B::RV is abolished, and IVs can be used to store
references, and a new type B::REGEXP is introduced, giving this structure:

                           B::SV
                             |
                +------------+------------+
                |            |            |
              B::PV        B::IV        B::NV
                  \         /           /
                   \       /           /
                    B::PVIV           /
                         \           /
                          \         /
                           \       /
                            B::PVNV
                               |
                               |
                            B::PVMG
                               |
           +-------+-------+---+---+-------+-------+
           |       |       |       |       |       |
         B::AV   B::GV   B::HV   B::CV   B::IO B::REGEXP
                   |               |
                   |               |
                B::PVLV          B::FM


Access methods correspond to the underlying C macros for field access,
usually with the leading "class indication" prefix removed (Sv, Av,
Hv, ...).  The leading prefix is only left in cases where its removal
would cause a clash in method name.  For example, C<GvREFCNT> stays
as-is since its abbreviation would clash with the "superclass" method
C<REFCNT> (corresponding to the C function C<SvREFCNT>).

=head2 B::SV Methods

=over 4

=item REFCNT

=item FLAGS

=item object_2svref

Returns a reference to the regular scalar corresponding to this
B::SV object.  In other words, this method is the inverse operation
to the svref_2object() subroutine.  This scalar and other data it points
at should be considered read-only: modifying them is neither safe nor
guaranteed to have a sensible effect.

=back

=head2 B::IV Methods

=over 4

=item IV

Returns the value of the IV, I<interpreted as
a signed integer>.  This will be misleading
if C<FLAGS & SVf_IVisUV>.  Perhaps you want the
C<int_value> method instead?

=item IVX

=item UVX

=item int_value

This method returns the value of the IV as an integer.
It differs from C<IV> in that it returns the correct
value regardless of whether it's stored signed or
unsigned.

=item needs64bits

=item packiv

=back

=head2 B::NV Methods

=over 4

=item NV

=item NVX

=item COP_SEQ_RANGE_LOW

=item COP_SEQ_RANGE_HIGH

These last two are only valid for pad name SVs.  They only existed in the
B::NV class before Perl 5.22.  In 5.22 they were moved to the B::PADNAME
class.

=back

=head2 B::RV Methods

=over 4

=item RV

=back

=head2 B::PV Methods

=over 4

=item PV

This method is the one you usually want.  It constructs a
string using the length and offset information in the struct:
for ordinary scalars it will return the string that you'd see
from Perl, even if it contains null characters.

=item RV

Same as B::RV::RV, except that it will die() if the PV isn't
a reference.

=item PVX

This method is less often useful.  It assumes that the string
stored in the struct is null-terminated, and disregards the
length information.

It is the appropriate method to use if you need to get the name
of a lexical variable from a padname array.  Lexical variable names
are always stored with a null terminator, and the length field
(CUR) is overloaded for other purposes and can't be relied on here.

=item CUR

This method returns the internal length field, which consists of the number
of internal bytes, not necessarily the number of logical characters.

=item LEN

This method returns the number of bytes allocated (via malloc) for storing
the string.  This is 0 if the scalar does not "own" the string.

=back

=head2 B::PVMG Methods

=over 4

=item MAGIC

=item SvSTASH

=back

=head2 B::MAGIC Methods

=over 4

=item MOREMAGIC

=item precomp

Only valid on r-magic, returns the string that generated the regexp.

=item PRIVATE

=item TYPE

=item FLAGS

=item OBJ

Will die() if called on r-magic.

=item PTR

=item REGEX

Only valid on r-magic, returns the integer value of the REGEX stored
in the MAGIC.

=back

=head2 B::PVLV Methods

=over 4

=item TARGOFF

=item TARGLEN

=item TYPE

=item TARG

=back

=head2 B::BM Methods

=over 4

=item USEFUL

=item PREVIOUS

=item RARE

=item TABLE

=back

=head2 B::REGEXP Methods

=over 4

=item REGEX

=item precomp

=item qr_anoncv

=item compflags

The last two were added in Perl 5.22.

=back

=head2 B::GV Methods

=over 4

=item is_empty

This method returns TRUE if the GP field of the GV is NULL.

=item NAME

=item SAFENAME

This method returns the name of the glob, but if the first
character of the name is a control character, then it converts
it to ^X first, so that *^G would return "^G" rather than "\cG".

It's useful if you want to print out the name of a variable.
If you restrict yourself to globs which exist at compile-time
then the result ought to be unambiguous, because code like
C<${"^G"} = 1> is compiled as two ops - a constant string and
a dereference (rv2gv) - so that the glob is created at runtime.

If you're working with globs at runtime, and need to disambiguate
*^G from *{"^G"}, then you should use the raw NAME method.

=item STASH

=item SV

=item IO

=item FORM

=item AV

=item HV

=item EGV

=item CV

=item CVGEN

=item LINE

=item FILE

=item FILEGV

=item GvREFCNT

=item FLAGS

=item GPFLAGS

This last one is present only in perl 5.22.0 and higher.

=back

=head2 B::IO Methods

B::IO objects derive from IO objects and you will get more information from
the IO object itself.

For example:

  $gvio = B::svref_2object(\*main::stdin)->IO;
  $IO = $gvio->object_2svref();
  $fd = $IO->fileno();

=over 4

=item LINES

=item PAGE

=item PAGE_LEN

=item LINES_LEFT

=item TOP_NAME

=item TOP_GV

=item FMT_NAME

=item FMT_GV

=item BOTTOM_NAME

=item BOTTOM_GV

=item SUBPROCESS

=item IoTYPE

A character symbolizing the type of IO Handle.

  -     STDIN/OUT
  I     STDIN/OUT/ERR
  <     read-only
  >     write-only
  a     append
  +     read and write
  s     socket
  |     pipe
  I     IMPLICIT
  #     NUMERIC
  space closed handle
  \0    closed internal handle

=item IoFLAGS

=item IsSTD

Takes one argument ( 'stdin' | 'stdout' | 'stderr' ) and returns true
if the IoIFP of the object is equal to the handle whose name was
passed as argument; i.e., $io->IsSTD('stderr') is true if
IoIFP($io) == PerlIO_stderr().

=back

=head2 B::AV Methods

=over 4

=item FILL

=item MAX

=item ARRAY

=item ARRAYelt

Like C<ARRAY>, but takes an index as an argument to get only one element,
rather than a list of all of them.

=item OFF

This method is deprecated if running under Perl 5.8, and is no longer present
if running under Perl 5.9

=item AvFLAGS

This method returns the AV specific
flags.  In Perl 5.9 these are now stored
in with the main SV flags, so this method is no longer present.

=back

=head2 B::CV Methods

=over 4

=item STASH

=item START

=item ROOT

=item GV

=item FILE

=item DEPTH

=item PADLIST

Returns a B::PADLIST object under Perl 5.18 or higher, or a B::AV in
earlier versions.

=item OUTSIDE

=item OUTSIDE_SEQ

=item XSUB

=item XSUBANY

For constant subroutines, returns the constant SV returned by the subroutine.

=item CvFLAGS

=item const_sv

=item NAME_HEK

Returns the name of a lexical sub, otherwise C<undef>.

=back

=head2 B::HV Methods

=over 4

=item FILL

=item MAX

=item KEYS

=item RITER

=item NAME

=item ARRAY

=item PMROOT

This method is not present if running under Perl 5.9, as the PMROOT
information is no longer stored directly in the hash.

=back

=head2 OP-RELATED CLASSES

C<B::OP>, C<B::UNOP>, C<B::UNOP_AUX>, C<B::BINOP>, C<B::LOGOP>,
C<B::LISTOP>, C<B::PMOP>, C<B::SVOP>, C<B::PADOP>, C<B::PVOP>, C<B::LOOP>,
C<B::COP>, C<B::METHOP>.

These classes correspond in the obvious way to the underlying C
structures of similar names.  The inheritance hierarchy mimics the
underlying C "inheritance":

                                 B::OP
                                   |
                   +----------+---------+--------+-------+---------+
                   |          |         |        |       |         |
                B::UNOP    B::SVOP  B::PADOP  B::COP  B::PVOP  B::METHOP
                   |
               +---+---+---------+
               |       |         |
           B::BINOP  B::LOGOP  B::UNOP_AUX
               |
               |
           B::LISTOP
               |
           +---+---+
           |       |
        B::LOOP   B::PMOP

Access methods correspond to the underlying C structure field names,
with the leading "class indication" prefix (C<"op_">) removed.

=head2 B::OP Methods

These methods get the values of similarly named fields within the OP
data structure.  See top of C<op.h> for more info.

=over 4

=item next

=item sibling

=item parent

Returns the OP's parent. If it has no parent, or if your perl wasn't built
with C<-DPERL_OP_PARENT>, returns NULL.

Note that the global variable C<$B::OP::does_parent> is undefined on older
perls that don't support the C<parent> method, is defined but false on
perls that support the method but were built without  C<-DPERL_OP_PARENT>,
and is true otherwise.

=item name

This returns the op name as a string (e.g. "add", "rv2av").

=item ppaddr

This returns the function name as a string (e.g. "PL_ppaddr[OP_ADD]",
"PL_ppaddr[OP_RV2AV]").

=item desc

This returns the op description from the global C PL_op_desc array
(e.g. "addition" "array deref").

=item targ

=item type

=item opt

=item flags

=item private

=item spare

=back

=head2 B::UNOP Method

=over 4

=item first

=back

=head2 B::UNOP_AUX Methods (since 5.22)

=over 4

=item aux_list(cv)

This returns a list of the elements of the op's aux data structure,
or a null list if there is no aux. What will be returned depends on the
object's type, but will typically be a collection of C<B::IV>, C<B::GV>,
etc. objects. C<cv> is the C<B::CV> object representing the sub that the
op is contained within.

=item string(cv)

This returns a textual representation of the object (likely to b useful
for deparsing and debugging), or an empty string if the op type doesn't
support this. C<cv> is the C<B::CV> object representing the sub that the
op is contained within.

=back

=head2 B::BINOP Method

=over 4

=item last

=back

=head2 B::LOGOP Method

=over 4

=item other

=back

=head2 B::LISTOP Method

=over 4

=item children

=back

=head2 B::PMOP Methods

=over 4

=item pmreplroot

=item pmreplstart

=item pmnext

Only up to Perl 5.9.4

=item pmflags

=item extflags

Since Perl 5.9.5

=item precomp

=item pmoffset

Only when perl was compiled with ithreads.

=item code_list

Since perl 5.17.1

=item pmregexp

Added in perl 5.22, this method returns the B::REGEXP associated with the
op.  While PMOPs do not actually have C<pmregexp> fields under threaded
builds, this method returns the regexp under threads nonetheless, for
convenience.

=back

=head2 B::SVOP Methods

=over 4

=item sv

=item gv

=back

=head2 B::PADOP Method

=over 4

=item padix

=back

=head2 B::PVOP Method

=over 4

=item pv

=back

=head2 B::LOOP Methods

=over 4

=item redoop

=item nextop

=item lastop

=back

=head2 B::COP Methods

The C<B::COP> class is used for "nextstate" and "dbstate" ops.  As of Perl
5.22, it is also used for "null" ops that started out as COPs.

=over 4

=item label

=item stash

=item stashpv

=item stashoff (threaded only)

=item file

=item cop_seq

=item arybase

=item line

=item warnings

=item io

=item hints

=item hints_hash

=back

=head2 B::METHOP Methods (Since Perl 5.22)

=over 4

=item first

=item meth_sv

=back

=head2 PAD-RELATED CLASSES

Perl 5.18 introduced a new class, B::PADLIST, returned by B::CV's
C<PADLIST> method.

Perl 5.22 introduced the B::PADNAMELIST and B::PADNAME classes.

=head2 B::PADLIST Methods

=over 4

=item MAX

=item ARRAY

A list of pads.  The first one contains the names.

The first one is a B::PADNAMELIST under Perl 5.22, and a B::AV under
earlier versions.  The rest are currently B::AV objects, but that could
change in future versions.

=item ARRAYelt

Like C<ARRAY>, but takes an index as an argument to get only one element,
rather than a list of all of them.

=item NAMES

This method, introduced in 5.22, returns the B::PADNAMELIST.  It is
equivalent to C<ARRAYelt> with a 0 argument.

=item REFCNT

=item id

This method, introduced in 5.22, returns an ID shared by clones of the same
padlist.

=item outid

This method, also added in 5.22, returns the ID of the outer padlist.

=back

=head2 B::PADNAMELIST Methods

=over 4

=item MAX

=item ARRAY

=item ARRAYelt

These two methods return the pad names, using B::SPECIAL objects for null
pointers and B::PADNAME objects otherwise.

=item REFCNT

=back

=head2 B::PADNAME Methods

=over 4

=item PV

=item PVX

=item LEN

=item REFCNT

=item FLAGS

For backward-compatibility, if the PADNAMEt_OUTER flag is set, the FLAGS
method adds the SVf_FAKE flag, too.

=item TYPE

A B::HV object representing the stash for a typed lexical.

=item SvSTASH

A backward-compatibility alias for TYPE.

=item OURSTASH

A B::HV object representing the stash for 'our' variables.

=item PROTOCV

The prototype CV for a 'my' sub.

=item COP_SEQ_RANGE_LOW

=item COP_SEQ_RANGE_HIGH

Sequence numbers representing the scope within which a lexical is visible.
Meaningless if PADNAMEt_OUTER is set.

=item PARENT_PAD_INDEX

Only meaningful if PADNAMEt_OUTER is set.

=item PARENT_FAKELEX_FLAGS

Only meaningful if PADNAMEt_OUTER is set.

=back

=head2 $B::overlay

Although the optree is read-only, there is an overlay facility that allows
you to override what values the various B::*OP methods return for a
particular op. C<$B::overlay> should be set to reference a two-deep hash:
indexed by OP address, then method name. Whenever a an op method is
called, the value in the hash is returned if it exists. This facility is
used by B::Deparse to "undo" some optimisations. For example:


    local $B::overlay = {};
    ...
    if ($op->name eq "foo") {
        $B::overlay->{$$op} = {
                name => 'bar',
                next => $op->next->next,
        };
    }
    ...
    $op->name # returns "bar"
    $op->next # returns the next op but one


=head1 AUTHOR

Malcolm Beattie, C<mbeattie@@sable.ox.ac.uk>

=cut
@


1.1
log
@Initial revision
@
text
@d9 2
a10 1
require DynaLoader;
d12 27
a38 6
@@ISA = qw(Exporter DynaLoader);
@@EXPORT_OK = qw(byteload_fh byteload_string minus_c ppname
		class peekop cast_I32 cstring cchar hash threadsv_names
		main_root main_start main_cv svref_2object
		walkoptree walkoptree_slow walkoptree_exec walksymtable
		parents comppadlist sv_undef compile_stats timing_info init_av);
a39 1
use strict;
d44 3
a46 2
@@B::NV::ISA = 'B::IV';
@@B::RV::ISA = 'B::SV';
d48 1
a48 1
@@B::PVNV::ISA = qw(B::PV B::NV);
d50 4
a53 2
@@B::PVLV::ISA = 'B::PVMG';
@@B::BM::ISA = 'B::PVMG';
d63 1
a65 1
@@B::CONDOP::ISA = 'B::UNOP';
d68 1
a68 1
@@B::GVOP::ISA = 'B::OP';
a69 1
@@B::CVOP::ISA = 'B::OP';
d73 1
d77 8
d90 37
a136 4
# sub OPf_KIDS;
# add to .xs for perl5.002
sub OPf_KIDS () { 4 }

d149 1
a149 1
    return sprintf("%s (0x%x) %s", class($op), $$op, $op->ppaddr);
d157 1
a157 1
    $op->$method($level);
d166 9
d189 5
d207 1
d218 4
a221 2
	$ppname = $op->ppaddr;
	if ($ppname =~ /^pp_(or|and|mapwhile|grepwhile|entertry)$/) {
d225 1
a225 1
	} elsif ($ppname eq "pp_match" || $ppname eq "pp_subst") {
d232 1
a232 1
	} elsif ($ppname eq "pp_substcont") {
d237 1
a237 14
	} elsif ($ppname eq "pp_cond_expr") {
	    # pp_cond_expr never returns op_next
	    print $prefix, "TRUE => {\n";
	    walkoptree_exec($op->true, $method, $level + 1);
	    print $prefix, "}\n";
	    $op = $op->false;
	    redo;
	} elsif ($ppname eq "pp_range") {
	    print $prefix, "TRUE => {\n";
	    walkoptree_exec($op->true, $method, $level + 1);
	    print $prefix, "}\n", $prefix, "FALSE => {\n";
	    walkoptree_exec($op->false, $method, $level + 1);
	    print $prefix, "}\n";
	} elsif ($ppname eq "pp_enterloop") {
d245 1
a245 1
	} elsif ($ppname eq "pp_subst") {
d259 7
a265 3
    no strict 'vars';
    local(*glob);
    while (($sym, *glob) = each %$symref) {
d268 2
a269 2
	    if ($sym ne "main::" && &$recurse($sym)) {
		walksymtable(\%glob, $method, $recurse, $sym);
d272 1
a272 67
	    svref_2object(\*glob)->EGV->$method();
	}
    }
}

{
    package B::Section;
    my $output_fh;
    my %sections;
    
    sub new {
	my ($class, $section, $symtable, $default) = @@_;
	$output_fh ||= FileHandle->new_tmpfile;
	my $obj = bless [-1, $section, $symtable, $default], $class;
	$sections{$section} = $obj;
	return $obj;
    }
    
    sub get {
	my ($class, $section) = @@_;
	return $sections{$section};
    }

    sub add {
	my $section = shift;
	while (defined($_ = shift)) {
	    print $output_fh "$section->[1]\t$_\n";
	    $section->[0]++;
	}
    }

    sub index {
	my $section = shift;
	return $section->[0];
    }

    sub name {
	my $section = shift;
	return $section->[1];
    }

    sub symtable {
	my $section = shift;
	return $section->[2];
    }
	
    sub default {
	my $section = shift;
	return $section->[3];
    }
	
    sub output {
	my ($section, $fh, $format) = @@_;
	my $name = $section->name;
	my $sym = $section->symtable || {};
	my $default = $section->default;

	seek($output_fh, 0, 0);
	while (<$output_fh>) {
	    chomp;
	    s/^(.*?)\t//;
	    if ($1 eq $name) {
		s{(s\\_[0-9a-f]+)} {
		    exists($sym->{$1}) ? $sym->{$1} : $default;
		}ge;
		printf $fh $format, $_;
	    }
a276 2
bootstrap B;

d283 1
a283 1
B - The Perl Compiler
d292 2
a293 2
into its own innards. It is the module used to implement the
"backends" of the Perl compiler. Usage of the compiler does not
d295 2
a296 2
user-visible part. The C<B> module is of use to those who want to
write new compiler backends. This documentation assumes that the
d301 222
d528 1
a528 1
object hierarchy. Structure fields which point to other objects
d530 11
a540 4
module as Perl objects of the appropriate class. The bulk of the C<B>
module is the methods for accessing fields of these structures. Note
that all access is read-only: you cannot modify the internals by
using this module.
d544 72
a615 5
B::IV, B::NV, B::RV, B::PV, B::PVIV, B::PVNV, B::PVMG, B::BM, B::PVLV,
B::AV, B::HV, B::CV, B::GV, B::FM, B::IO. These classes correspond in
the obvious way to the underlying C structures of similar names. The
inheritance hierarchy mimics the underlying C "inheritance". Access
methods correspond to the underlying C macros for field access,
d617 2
a618 2
Hv, ...). The leading prefix is only left in cases where its removal
would cause a clash in method name. For example, C<GvREFCNT> stays
d622 1
a622 1
=head2 B::SV METHODS
d630 8
d640 1
a640 1
=head2 B::IV METHODS
d646 5
d653 9
d668 1
a668 1
=head2 B::NV METHODS
d676 8
d686 1
a686 1
=head2 B::RV METHODS
d694 1
a694 1
=head2 B::PV METHODS
d700 31
d733 1
a733 1
=head2 B::PVMG METHODS
d743 1
a743 1
=head2 B::MAGIC METHODS
d749 4
d761 2
d765 5
d772 1
a772 1
=head2 B::PVLV METHODS
d786 1
a786 1
=head2 B::BM METHODS
d800 1
a800 1
=head2 B::GV METHODS
d804 20
d826 15
d861 2
d869 4
d875 10
a884 1
=head2 B::IO METHODS
d912 15
d929 7
d938 1
a938 1
=head2 B::AV METHODS
d946 7
d955 2
a956 1
=item ARRAY
d960 4
d966 1
a966 1
=head2 B::CV METHODS
d978 1
a978 1
=item FILEGV
d984 3
d989 2
d995 2
d999 6
d1007 1
a1007 1
=head2 B::HV METHODS
d1021 2
d1025 2
a1026 1
=item ARRAY
d1032 27
a1058 7
B::OP, B::UNOP, B::BINOP, B::LOGOP, B::CONDOP, B::LISTOP, B::PMOP,
B::SVOP, B::GVOP, B::PVOP, B::CVOP, B::LOOP, B::COP.
These classes correspond in
the obvious way to the underlying C structures of similar names. The
inheritance hierarchy mimics the underlying C "inheritance". Access
methods correspond to the underlying C structre field names, with the
leading "class indication" prefix removed (op_).
d1060 4
a1063 1
=head2 B::OP METHODS
d1071 14
d1087 2
a1088 1
This returns the function name as a string (e.g. pp_add, pp_rv2av).
d1099 1
a1099 1
=item seq
d1105 2
d1109 1
a1109 1
=head2 B::UNOP METHOD
d1117 1
a1117 1
=head2 B::BINOP METHOD
d1121 14
a1134 1
=item last
d1138 1
a1138 1
=head2 B::LOGOP METHOD
d1142 1
a1142 1
=item other
d1146 1
a1146 1
=head2 B::CONDOP METHODS
d1150 1
a1150 3
=item true

=item false
d1154 1
a1154 1
=head2 B::LISTOP METHOD
d1162 1
a1162 1
=head2 B::PMOP METHODS
d1172 1
a1172 1
=item pmregexp
d1176 3
a1178 1
=item pmpermflags
d1182 15
d1199 1
a1199 1
=head2 B::SVOP METHOD
d1205 2
d1209 1
a1209 1
=head2 B::GVOP METHOD
d1213 1
a1213 1
=item gv
d1217 1
a1217 1
=head2 B::PVOP METHOD
d1225 1
a1225 1
=head2 B::LOOP METHODS
d1237 4
a1240 1
=head2 B::COP METHODS
d1248 5
a1252 1
=item filegv
d1260 18
d1280 6
a1285 1
=head1 FUNCTIONS EXPORTED BY C<B>
d1287 1
a1287 3
The C<B> module exports a variety of functions: some are simple
utility functions, others provide a Perl program with a way to
get an initial "handle" on an internal object.
d1291 14
a1304 1
=item main_cv
d1306 1
a1306 2
Return the (faked) CV corresponding to the main part of the Perl
program.
d1308 2
a1309 1
=item init_av
d1311 1
a1311 1
Returns the AV object (i.e. in class B::AV) representing INIT blocks.
d1313 1
a1313 1
=item main_root
d1315 2
a1316 2
Returns the root op (i.e. an object in the appropriate B::OP-derived
class) of the main part of the Perl program.
d1318 1
a1318 1
=item main_start
d1320 1
a1320 1
Returns the starting op of the main part of the Perl program.
d1322 1
a1322 1
=item comppadlist
d1324 1
a1324 1
Returns the AV object (i.e. in class B::AV) of the global comppadlist.
d1326 1
a1326 1
=item sv_undef
d1328 1
a1328 1
Returns the SV object corresponding to the C variable C<sv_undef>.
d1330 1
a1330 1
=item sv_yes
d1332 1
a1332 1
Returns the SV object corresponding to the C variable C<sv_yes>.
d1334 2
a1335 1
=item sv_no
d1337 1
a1337 1
Returns the SV object corresponding to the C variable C<sv_no>.
d1339 1
a1339 1
=item walkoptree(OP, METHOD)
d1341 1
a1341 5
Does a tree-walk of the syntax tree based at OP and calls METHOD on
each op it visits. Each node is visited before its children. If
C<walkoptree_debug> (q.v.) has been called to turn debugging on then
the method C<walkoptree_debug> is called on each op before METHOD is
called.
d1343 1
a1343 1
=item walkoptree_debug(DEBUG)
d1345 1
a1345 4
Returns the current debugging flag for C<walkoptree>. If the optional
DEBUG argument is non-zero, it sets the debugging flag to that. See
the description of C<walkoptree> above for what the debugging flag
does.
d1347 1
a1347 1
=item walksymtable(SYMREF, METHOD, RECURSE)
d1349 1
a1349 12
Walk the symbol table starting at SYMREF and call METHOD on each
symbol visited. When the walk reached package symbols "Foo::" it
invokes RECURSE and only recurses into the package if that sub
returns true.

=item svref_2object(SV)

Takes any Perl variable and turns it into an object in the
appropriate B::OP-derived or B::SV-derived class. Apart from functions
such as C<main_root>, this is the primary way to get an initial
"handle" on a internal perl data structure which can then be followed
with the other access methods.
d1351 1
a1351 1
=item ppname(OPNUM)
d1353 1
a1353 1
Return the PP function name (e.g. "pp_add") of op number OPNUM.
d1355 2
a1356 1
=item hash(STR)
d1358 1
a1358 2
Returns a string in the form "0x..." representing the value of the
internal hash function used by perl on string STR.
d1360 1
a1360 1
=item cast_I32(I)
d1362 1
a1362 1
Casts I to the internal I32 type used by that perl.
d1364 1
d1366 1
a1366 1
=item minus_c
d1368 1
a1368 2
Does the equivalent of the C<-c> command-line option. Obviously, this
is only useful in a BEGIN block or else the flag is set too late.
d1370 1
d1372 1
a1372 1
=item cstring(STR)
d1374 1
a1374 2
Returns a double-quote-surrounded escaped version of STR which can
be used as a string in C source code.
d1376 1
a1376 1
=item class(OBJ)
d1378 2
a1379 3
Returns the class of an object without the part of the classname
preceding the first "::". This is used to turn "B::UNOP" into
"UNOP" for example.
d1381 1
a1381 1
=item threadsv_names
d1383 1
a1383 2
In a perl compiled for threads, this returns a list of the special
per-thread threadsv variables.
d1385 1
a1385 1
=item byteload_fh(FILEHANDLE)
d1387 1
a1387 2
Load the contents of FILEHANDLE as bytecode. See documentation for
the B<Bytecode> module in F<B::Backend> for how to generate bytecode.
d1390 23
@


1.1.1.1
log
@perl5.005_03
@
text
@@


1.1.1.2
log
@virgin perl 5.6.0
@
text
@d9 1
a9 1
use XSLoader ();
d11 2
a12 2
@@ISA = qw(Exporter);
@@EXPORT_OK = qw(minus_c ppname
d14 1
a14 1
		main_root main_start main_cv svref_2object opnumber amagic_generation
d17 1
a17 1
sub OPf_KIDS ();
d41 1
d44 1
a44 1
@@B::PADOP::ISA = 'B::OP';
d68 4
d84 1
a84 1
    return sprintf("%s (0x%x) %s", class($op), $$op, $op->name);
a114 5

sub clearsym {
    %symtable = ();
}

d138 2
a139 4
	$ppname = $op->name;
	if ($ppname =~
	    /^(or|and|mapwhile|grepwhile|entertry|range|cond_expr)$/)
	{
d143 1
a143 1
	} elsif ($ppname eq "match" || $ppname eq "subst") {
d150 1
a150 1
	} elsif ($ppname eq "substcont") {
d155 14
a168 1
	} elsif ($ppname eq "enterloop") {
d176 1
a176 1
	} elsif ($ppname eq "subst") {
a189 1
    my $ref;
d192 1
a192 3
    $prefix = '' unless defined $prefix;
    while (($sym, $ref) = each %$symref) {
	*glob = "*main::".$prefix.$sym;
d270 1
a270 1
XSLoader::load 'B';
a430 4
=item is_empty

This method returns TRUE if the GP field of the GV is NULL.

a452 2
=item FILE

d521 1
a521 1
=item FILE
d559 2
a560 2
B::OP, B::UNOP, B::BINOP, B::LOGOP, B::LISTOP, B::PMOP,
B::SVOP, B::PADOP, B::PVOP, B::CVOP, B::LOOP, B::COP.
a574 4
=item name

This returns the op name as a string (e.g. "add", "rv2av").

d577 1
a577 2
This returns the function name as a string (e.g. "PL_ppaddr[OP_ADD]",
"PL_ppaddr[OP_RV2AV]").
d620 10
a663 2
=item gv

d666 1
a666 1
=head2 B::PADOP METHOD
d670 1
a670 1
=item padix
d702 1
a702 1
=item file
a753 4
=item amagic_generation

Returns the SV object corresponding to the C variable C<amagic_generation>.

d819 5
@


1.1.1.3
log
@stock perl 5.6.1
@
text
@d12 1
a12 4

# walkoptree_slow comes from B.pm (you are there),
# walkoptree comes from B.xs
@@EXPORT_OK = qw(minus_c ppname save_BEGINs
d14 3
a16 6
		main_root main_start main_cv svref_2object opnumber
		amagic_generation
		walkoptree_slow walkoptree walkoptree_exec walksymtable
		parents comppadlist sv_undef compile_stats timing_info
		begin_av init_av end_av);

a56 15
sub B::GV::SAFENAME {
  my $name = (shift())->NAME;

  # The regex below corresponds to the isCONTROLVAR macro
  # from toke.c

  $name =~ s/^([\cA-\cZ\c\\c[\c]\c?\c_\c^])/"^".chr(64 ^ ord($1))/e;
  return $name;
}

sub B::IV::int_value {
  my ($self) = @@_;
  return (($self->FLAGS() & SVf_IVisUV()) ? $self->UVX : $self->IV);
}

a127 1
    $level ||= 0;
d187 1
a187 1
	    if ($sym ne "main::" && $sym ne "<none>::" && &$recurse($sym)) {
a328 5
Returns the value of the IV, I<interpreted as
a signed integer>. This will be misleading
if C<FLAGS & SVf_IVisUV>. Perhaps you want the
C<int_value> method instead?

a330 9
=item UVX

=item int_value

This method returns the value of the IV as an integer.
It differs from C<IV> in that it returns the correct
value regardless of whether it's stored signed or
unsigned.

a360 16
This method is the one you usually want. It constructs a
string using the length and offset information in the struct:
for ordinary scalars it will return the string that you'd see
from Perl, even if it contains null characters.

=item PVX

This method is less often useful. It assumes that the string
stored in the struct is null-terminated, and disregards the
length information.

It is the appropriate method to use if you need to get the name
of a lexical variable from a padname array. Lexical variable names
are always stored with a null terminator, and the length field
(SvCUR) is overloaded for other purposes and can't be relied on here.

a427 15

=item SAFENAME

This method returns the name of the glob, but if the first
character of the name is a control character, then it converts
it to ^X first, so that *^G would return "^G" rather than "\cG".

It's useful if you want to print out the name of a variable.
If you restrict yourself to globs which exist at compile-time
then the result ought to be unambiguous, because code like
C<${"^G"} = 1> is compiled as two ops - a constant string and
a dereference (rv2gv) - so that the glob is created at runtime.

If you're working with globs at runtime, and need to disambiguate
*^G from *{"^G"}, then you should use the raw NAME method.
@


1.1.1.4
log
@stock perl 5.8.0 from CPAN
@
text
@a8 3

our $VERSION = '1.01';

d18 1
a18 1
		amagic_generation perlstring
d21 1
a21 1
		begin_av init_av end_av regex_padav);
d69 1
a69 6
  $name =~ s/^([\cA-\cZ\c\\c[\c]\c?\c_\c^])/"^".
	chr( utf8::unicode_to_native( 64 ^ ord($1) ))/e;

  # When we say unicode_to_native we really mean ascii_to_native,
  # which matters iff this is a non-ASCII platform (EBCDIC).

a77 4
sub B::NULL::as_string() {""}
sub B::IV::as_string()   {goto &B::IV::int_value}
sub B::PV::as_string()   {goto &B::PV::PV}

a116 5
    if (class($op) eq 'PMOP' && $op->pmreplroot && ${$op->pmreplroot}) {
	unshift(@@parents, $op);
	walkoptree_slow($op->pmreplroot, $method, $level + 1);
	shift @@parents;
    }
d202 2
a203 2
    my $fullname;
    no strict 'refs';
d206 1
a206 1
        $fullname = "*main::".$prefix.$sym;
d210 1
a210 1
               walksymtable(\%$fullname, $method, $recurse, $sym);
d213 1
a213 1
           svref_2object(\*$fullname)->$method();
a401 5
=item RV

Same as B::RV::RV, except that it will die() if the PV isn't
a reference.

a430 4
=item precomp

Only valid on r-magic, returns the string that generated the regexp.

a438 2
Will die() if called on r-magic.

a440 5
=item REGEX

Only valid on r-magic, returns the integer value of the REGEX stored
in the MAGIC.

a555 7
=item IsSTD

Takes one arguments ( 'stdin' | 'stdout' | 'stderr' ) and returns true
if the IoIFP of the object is equal to the handle whose name was
passed as argument ( i.e. $io->IsSTD('stderr') is true if
IoIFP($io) == PerlIO_stdin() ).

a597 2
For constant subroutines, returns the constant SV returned by the subroutine.

a599 2
=item const_sv

a711 2
=item pmdynflags

a715 4
=item pmoffet

Only when perl was compiled with ithreads.

a790 8
=item begin_av

Returns the AV object (i.e. in class B::AV) representing BEGIN blocks.

=item end_av

Returns the AV object (i.e. in class B::AV) representing END blocks.

a803 4
=item regex_padav

Only when perl was compiled with ithreads.

d835 1
a835 1
=item walksymtable(SYMREF, METHOD, RECURSE, PREFIX)
d838 3
a840 15
symbol (a B::GV object) visited.  When the walk reaches package
symbols (such as "Foo::") it invokes RECURSE, passing in the symbol
name, and only recurses into the package if that sub returns true.

PREFIX is the name of the SYMREF you're walking.

For example...

  # Walk CGI's symbol table calling print_subs on each symbol.
  # Only recurse into CGI::Util::
  walksymtable(\%CGI::, 'print_subs', sub { $_[0] eq 'CGI::Util::' },
               'CGI::');

print_subs() is a B::GV method you have declared.

d847 1
a847 1
"handle" on an internal perl data structure which can then be followed
a873 5

=item perlstring(STR)

Returns a double-quote-surrounded escaped version of STR which can
be used as a string in Perl source code.
@


1.1.1.5
log
@perl 5.8.2 from CPAN
@
text
@d10 1
a10 1
our $VERSION = '1.02';
d24 1
a24 3
		begin_av init_av check_av end_av regex_padav dowarn
		defstash curstash warnhook diehook inc_gv
		);
d54 1
d179 1
a179 1
	    /^(or(assign)?|and(assign)?|mapwhile|grepwhile|entertry|range|cond_expr)$/)
d239 1
a239 1

d247 1
a247 1

d275 1
a275 1

d280 1
a280 1

a326 184
=head1 OVERVIEW

The C<B> module contains a set of utility functions for querying the
current state of the Perl interpreter; typically these functions
return objects from the B::SV and B::OP classes, or their derived
classes.  These classes in turn define methods for querying the
resulting objects about their own internal state.

=head1 Utility Functions

The C<B> module exports a variety of functions: some are simple
utility functions, others provide a Perl program with a way to
get an initial "handle" on an internal object.

=head2 Functions Returning C<B::SV>, C<B::AV>, C<B::HV>, and C<B::CV> objects

For descriptions of the class hierachy of these objects and the
methods that can be called on them, see below, L<"OVERVIEW OF
CLASSES"> and L<"SV-RELATED CLASSES">.

=over 4

=item sv_undef

Returns the SV object corresponding to the C variable C<sv_undef>.

=item sv_yes

Returns the SV object corresponding to the C variable C<sv_yes>.

=item sv_no

Returns the SV object corresponding to the C variable C<sv_no>.

=item svref_2object(SVREF)

Takes a reference to any Perl value, and turns the referred-to value
into an object in the appropriate B::OP-derived or B::SV-derived
class. Apart from functions such as C<main_root>, this is the primary
way to get an initial "handle" on an internal perl data structure
which can then be followed with the other access methods.

=item amagic_generation

Returns the SV object corresponding to the C variable C<amagic_generation>.

=item init_av

Returns the AV object (i.e. in class B::AV) representing INIT blocks.

=item check_av

Returns the AV object (i.e. in class B::AV) representing CHECK blocks.

=item begin_av

Returns the AV object (i.e. in class B::AV) representing BEGIN blocks.

=item end_av

Returns the AV object (i.e. in class B::AV) representing END blocks.

=item comppadlist

Returns the AV object (i.e. in class B::AV) of the global comppadlist.

=item regex_padav

Only when perl was compiled with ithreads.

=item main_cv

Return the (faked) CV corresponding to the main part of the Perl
program.

=back

=head2 Functions for Examining the Symbol Table

=over 4

=item walksymtable(SYMREF, METHOD, RECURSE, PREFIX)

Walk the symbol table starting at SYMREF and call METHOD on each
symbol (a B::GV object) visited.  When the walk reaches package
symbols (such as "Foo::") it invokes RECURSE, passing in the symbol
name, and only recurses into the package if that sub returns true.

PREFIX is the name of the SYMREF you're walking.

For example:

  # Walk CGI's symbol table calling print_subs on each symbol.
  # Recurse only into CGI::Util::
  walksymtable(\%CGI::, 'print_subs', sub { $_[0] eq 'CGI::Util::' },
               'CGI::');

print_subs() is a B::GV method you have declared. Also see L<"B::GV
Methods">, below.

=back

=head2 Functions Returning C<B::OP> objects or for walking op trees

For descriptions of the class hierachy of these objects and the
methods that can be called on them, see below, L<"OVERVIEW OF
CLASSES"> and L<"OP-RELATED CLASSES">.

=over 4

=item main_root

Returns the root op (i.e. an object in the appropriate B::OP-derived
class) of the main part of the Perl program.

=item main_start

Returns the starting op of the main part of the Perl program.

=item walkoptree(OP, METHOD)

Does a tree-walk of the syntax tree based at OP and calls METHOD on
each op it visits. Each node is visited before its children. If
C<walkoptree_debug> (see below) has been called to turn debugging on then
the method C<walkoptree_debug> is called on each op before METHOD is
called.

=item walkoptree_debug(DEBUG)

Returns the current debugging flag for C<walkoptree>. If the optional
DEBUG argument is non-zero, it sets the debugging flag to that. See
the description of C<walkoptree> above for what the debugging flag
does.

=back

=head2 Miscellaneous Utility Functions

=over 4

=item ppname(OPNUM)

Return the PP function name (e.g. "pp_add") of op number OPNUM.

=item hash(STR)

Returns a string in the form "0x..." representing the value of the
internal hash function used by perl on string STR.

=item cast_I32(I)

Casts I to the internal I32 type used by that perl.

=item minus_c

Does the equivalent of the C<-c> command-line option. Obviously, this
is only useful in a BEGIN block or else the flag is set too late.

=item cstring(STR)

Returns a double-quote-surrounded escaped version of STR which can
be used as a string in C source code.

=item perlstring(STR)

Returns a double-quote-surrounded escaped version of STR which can
be used as a string in Perl source code.

=item class(OBJ)

Returns the class of an object without the part of the classname
preceding the first C<"::">. This is used to turn C<"B::UNOP"> into
C<"UNOP"> for example.

=item threadsv_names

In a perl compiled for threads, this returns a list of the special
per-thread threadsv variables.

=back




d334 3
a336 6
module as Perl objects of the appropriate class.

The bulk of the C<B> module is the methods for accessing fields of
these structures.

Note that all access is read-only.  You cannot modify the internals by
d344 2
a345 27
inheritance hierarchy mimics the underlying C "inheritance":

                             B::SV
                               |
                +--------------+----------------------+
                |              |                      |
              B::PV          B::IV                  B::RV
                |  \        /     \
                |   \      /       \
                |   B::PVIV         B::NV
                 \                 /
                  \____         __/
                       \       /
                        B::PVNV
                           |
                           |
                        B::PVMG
                           |
         +------+-----+----+------+-----+-----+
         |      |     |    |      |     |     |
      B::PVLV B::BM B::AV B::GV B::HV B::CV B::IO
                                        |
                                        |
                                      B::FM


Access methods correspond to the underlying C macros for field access,
d352 1
a352 1
=head2 B::SV Methods
a359 8
=item object_2svref

Returns a reference to the regular scalar corresponding to this
B::SV object. In other words, this method is the inverse operation
to the svref_2object() subroutine. This scalar and other data it points
at should be considered read-only: modifying them is neither safe nor
guaranteed to have a sensible effect.

d362 1
a362 1
=head2 B::IV Methods
d390 1
a390 1
=head2 B::NV Methods
d400 1
a400 1
=head2 B::RV Methods
d408 1
a408 1
=head2 B::PV Methods
d437 1
a437 1
=head2 B::PVMG Methods
d447 1
a447 1
=head2 B::MAGIC Methods
d476 1
a476 1
=head2 B::PVLV Methods
d490 1
a490 1
=head2 B::BM Methods
d504 1
a504 1
=head2 B::GV Methods
d559 1
a559 1
=head2 B::IO Methods
d598 1
a598 1
=head2 B::AV Methods
a609 5
=item ARRAYelt

Like C<ARRAY>, but takes an index as an argument to get only one element,
rather than a list of all of them.

d614 1
a614 1
=head2 B::CV Methods
a633 2
=item OUTSIDE_SEQ

d646 1
a646 1
=head2 B::HV Methods
d668 7
a674 24
C<B::OP>, C<B::UNOP>, C<B::BINOP>, C<B::LOGOP>, C<B::LISTOP>, C<B::PMOP>,
C<B::SVOP>, C<B::PADOP>, C<B::PVOP>, C<B::LOOP>, C<B::COP>.

These classes correspond in the obvious way to the underlying C
structures of similar names. The inheritance hierarchy mimics the
underlying C "inheritance":

                                 B::OP
                                   |
                   +---------------+--------+--------+
                   |               |        |        |
                B::UNOP          B::SVOP B::PADOP  B::COP
                 ,'  `-.
                /       `--.
           B::BINOP     B::LOGOP
               |
               |
           B::LISTOP
             ,' `.
            /     \
        B::LOOP B::PMOP

Access methods correspond to the underlying C structre field names,
with the leading "class indication" prefix (C<"op_">) removed.
d676 1
a676 1
=head2 B::OP Methods
d742 1
a742 1
=head2 B::PMOP Methods
d762 1
a762 1
=item pmoffset
d794 1
a794 1
=head2 B::LOOP Methods
d806 1
a806 1
=head2 B::COP Methods
a813 2
=item stashpv

d822 9
a830 1
=item warnings
d832 132
a963 1
=item io
a965 1

@


1.1.1.6
log
@perl 5.8.6 from CPAN
@
text
@d10 1
a10 1
our $VERSION = '1.07';
d39 1
a39 2
# Change in the inheritance hierarchy post 5.8
@@B::PVLV::ISA = $] > 5.009 ? 'B::GV' : 'B::PVMG';
d180 1
a180 1
	    /^(d?or(assign)?|and(assign)?|mapwhile|grepwhile|entertry|range|cond_expr)$/)
d344 1
a344 1
For descriptions of the class hierarchy of these objects and the
d432 1
a432 1
For descriptions of the class hierarchy of these objects and the
d532 1
a532 2
inheritance hierarchy mimics the underlying C "inheritance". For 5.9 and
later this is:
a549 14
                +-----+----+------+-----+-----+
                |     |    |      |     |     |
              B::BM B::AV B::GV B::HV B::CV B::IO
                           |            |
                        B::PVLV         |
                                      B::FM


For 5.8 and earlier, PVLV is a direct subclass of PVMG, so the base of this
diagram is

                           |
                        B::PVMG
                           |
a922 3
These methods get the values of similarly named fields within the OP
data structure.  See top of C<op.h> for more info.

d947 1
a947 3
=item opt

=item static
a951 2

=item spare
@


1.1.1.7
log
@perl 5.8.8 import
@
text
@d10 1
a10 1
our $VERSION = '1.09_01';
d34 1
a34 1
@@B::NV::ISA = 'B::SV';
d37 1
a37 1
@@B::PVNV::ISA = qw(B::PVIV B::NV);
d39 1
a39 1
# Change in the inheritance hierarchy post 5.9.0
d131 1
a131 1
    if (class($op) eq 'PMOP' && ref($op->pmreplroot) && ${$op->pmreplroot}) {
a370 4
The returned object will only be valid as long as the underlying OPs
and SVs continue to exist. Do not attempt to use the object after the
underlying structures are freed.

d526 1
a526 5
using this module. Also, note that the B::OP and B::SV objects created
by this module are only valid for as long as the underlying objects
exist; their creation doesn't increase the reference counts of the
underlying objects. Trying to access the fields of a freed object will
give incomprehensible results, or worse.
d533 2
a534 2
inheritance hierarchy mimics the underlying C "inheritance". For 5.9.1
and later this is:
d538 20
a557 20
                +--------------+----------+------------+
                |              |          |            |
              B::PV          B::IV      B::NV        B::RV
                   \         /          /
                    \       /          /
                     B::PVIV          /
                         \           /
                          \         /
                           \       /
                            B::PVNV
                               |
                               |
                            B::PVMG
                               |
                    +-----+----+------+-----+-----+
                    |     |    |      |     |     |
                  B::BM B::AV B::GV B::HV B::CV B::IO
                               |            |
                            B::PVLV         |
                                          B::FM
d560 2
a561 2
For 5.9.0 and earlier, PVLV is a direct subclass of PVMG, so the base
of this diagram is
@


1.1.1.8
log
@import perl 5.10.0 from CPAN
@
text
@d10 1
a10 1
our $VERSION = '1.17';
d21 1
a21 1
		sub_generation amagic_generation perlstring
d24 2
a25 2
		begin_av init_av check_av end_av regex_padav dowarn defstash
		curstash warnhook diehook inc_gv @@optype @@specialsv_name
a26 1
push @@EXPORT_OK, qw(unitcheck_av) if $] > 5.009;
d41 1
a41 2
# BM is eliminated post 5.9.5, but effectively is a specialisation of GV now.
@@B::BM::ISA = $] > 5.009005 ? 'B::GV' : 'B::PVMG';
a62 7
@@B::optype = qw(OP UNOP BINOP LOGOP LISTOP PMOP SVOP PADOP PVOP LOOP COP);
# bytecode.pl contained the following comment:
# Nullsv *must* come first in the following so that the condition
# ($$sv == 0) can continue to be used to test (sv == Nullsv).
@@B::specialsv_name = qw(Nullsv &PL_sv_undef &PL_sv_yes &PL_sv_no
			(SV*)pWARN_ALL (SV*)pWARN_NONE (SV*)pWARN_STD);

d122 1
a122 1
    $op->$method($level) if $op->can($method);
d131 1
a131 5
    if (class($op) eq 'PMOP'
	&& ref($op->pmreplroot)
	&& ${$op->pmreplroot}
	&& $op->pmreplroot->isa( 'B::OP' ))
    {
a386 4
=item unitcheck_av

Returns the AV object (i.e. in class B::AV) representing UNITCHECK blocks.

a513 11
=head2 Exported utility variabiles

=over 4

=item @@optype

  my $op_type = $optype[$op_type_num];

A simple mapping of the op type number to its type (like 'COP' or 'BINOP').

=item @@specialsv_name
a514 8
  my $sv_name = $specialsv_name[$sv_index];

Certain SV types are considered 'special'.  They're represented by
B::SPECIAL and are referred to by a number from the specialsv_list.
This array maps that number back to the name of the SV (like 'Nullsv'
or '&PL_sv_undef').

=back
d538 4
a541 4
B::IV, B::NV, B::RV, B::PV, B::PVIV, B::PVNV, B::PVMG, B::BM (5.9.5 and
earlier), B::PVLV, B::AV, B::HV, B::CV, B::GV, B::FM, B::IO. These classes
correspond in the obvious way to the underlying C structures of similar names.
The inheritance hierarchy mimics the underlying C "inheritance". For 5.9.5
d544 8
a551 8
                           B::SV
                             |
                +------------+------------+------------+
                |            |            |            |
              B::PV        B::IV        B::NV        B::RV
                  \         /           /
                   \       /           /
                    B::PVIV           /
d560 20
a579 22
                   +-----+-----+-----+-----+
                   |     |     |     |     |
                 B::AV B::GV B::HV B::CV B::IO
                         |           |
                         |           |
                      B::PVLV      B::FM


For 5.9.0 and earlier, PVLV is a direct subclass of PVMG, and BM is still
present as a distinct type, so the base of this diagram is


                               |
                               |
                            B::PVMG
                               |
            +------+-----+-----+-----+-----+-----+
            |      |     |     |     |     |     |
         B::PVLV B::BM B::AV B::GV B::HV B::CV B::IO
                                           |
                                           |
                                         B::FM
d851 2
a859 5
=item OFF

This method is deprecated if running under Perl 5.8, and is no longer present
if running under Perl 5.9

a861 3
This method returns the AV specific flags. In Perl 5.9 these are now stored
in with the main SV flags, so this method is no longer present.

a911 2
=item ARRAY

d914 1
a914 2
This method is not present if running under Perl 5.9, as the PMROOT
information is no longer stored directly in the hash.
d929 3
a931 3
                   +---------------+--------+--------+-------+
                   |               |        |        |       |
                B::UNOP          B::SVOP B::PADOP  B::COP  B::PVOP
d976 2
d1032 3
a1034 1
=item extflags
a1102 4

=item hints

=item hints_hash
@


1.1.1.9
log
@import perl 5.10.1
@
text
@d10 1
a10 1
our $VERSION = '1.22';
d36 1
a36 2
# RV is eliminated with 5.11.0, but effectively is a specialisation of IV now.
@@B::RV::ISA = $] >= 5.011 ? 'B::IV' : 'B::SV';
a39 1
@@B::REGEXP::ISA = 'B::PVMG' if $] >= 5.011;
d241 1
a241 1
	    if (svref_2object(\*$sym)->NAME ne "main::" && $sym ne "<none>::" && &$recurse($sym)) {
d577 2
a578 2
The inheritance hierarchy mimics the underlying C "inheritance". For the
5.10.x branch, (I<ie> 5.10.0, 5.10.1 I<etc>) this is:
d603 1
a618 26
For 5.11.0 and later, B::RV is abolished, and IVs can be used to store
references, and a new type B::REGEXP is introduced, giving this structure:

                           B::SV
                             |
                +------------+------------+
                |            |            |
              B::PV        B::IV        B::NV
                  \         /           /
                   \       /           /
                    B::PVIV           /
                         \           /
                          \         /
                           \       /
                            B::PVNV
                               |
                               |
                            B::PVMG
                               |
           +-------+-------+---+---+-------+-------+
           |       |       |       |       |       |
         B::AV   B::GV   B::HV   B::CV   B::IO B::REGEXP
                   |               |
                   |               |
                B::PVLV          B::FM

a1072 2
Only up to Perl 5.9.4

a1077 2

Since Perl 5.9.5
@


1.1.1.10
log
@Perl 5.12.2 from CPAN
@
text
@d10 1
a10 1
our $VERSION = '1.23';
d326 1
a326 1
B - The Perl Compiler Backend
@


1.1.1.11
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@a8 1
use strict;
d10 3
d14 1
a14 1
@@B::ISA = qw(Exporter);
d18 10
d29 2
a30 24
BEGIN {
    $B::VERSION = '1.35';
    @@B::EXPORT_OK = ();

    # Our BOOT code needs $VERSION set, and will append to @@EXPORT_OK.
    # Want our constants loaded before the compiler meets OPf_KIDS below, as
    # the combination of having the constant stay a Proxy Constant Subroutine
    # and its value being inlined saves a little over .5K

    require XSLoader;
    XSLoader::load();
}

push @@B::EXPORT_OK, (qw(minus_c ppname save_BEGINs
			class peekop cast_I32 cstring cchar hash threadsv_names
			main_root main_start main_cv svref_2object opnumber
			sub_generation amagic_generation perlstring
			walkoptree_slow walkoptree walkoptree_exec walksymtable
			parents comppadlist sv_undef compile_stats timing_info
			begin_av init_av check_av end_av regex_padav dowarn
			defstash curstash warnhook diehook inc_gv @@optype
			@@specialsv_name
		      ), $] > 5.009 && 'unitcheck_av');

d100 2
a101 9
*B::IV::as_string = \*B::IV::int_value;
*B::PV::as_string = \*B::PV::PV;

#  The input typemap checking makes no distinction between different SV types,
#  so the XS body will generate the same C code, despite the different XS
#  "types". So there is no change in behaviour from doing "newXS" like this,
#  compared with the old approach of having a (near) duplicate XS body.
#  We should fix the typemap checking.
*B::IV::RV = \*B::PV::RV if $] > 5.012;
d318 2
d335 2
a336 2
into its own innards.  It is the module used to implement the
"backends" of the Perl compiler.  Usage of the compiler does not
d338 2
a339 2
user-visible part.  The C<B> module is of use to those who want to
write new compiler backends.  This documentation assumes that the
d382 1
a382 1
class.  Apart from functions such as C<main_root>, this is the primary
d387 1
a387 1
and SVs continue to exist.  Do not attempt to use the object after the
d446 2
a447 2
  walksymtable(\%CGI::, 'print_subs',
               sub { $_[0] eq 'CGI::Util::' }, 'CGI::');
d449 1
a449 1
print_subs() is a B::GV method you have declared.  Also see L<"B::GV
d474 1
a474 1
each op it visits.  Each node is visited before its children.  If
d481 2
a482 2
Returns the current debugging flag for C<walkoptree>.  If the optional
DEBUG argument is non-zero, it sets the debugging flag to that.  See
d507 1
a507 1
Does the equivalent of the C<-c> command-line option.  Obviously, this
d523 1
a523 1
preceding the first C<"::">.  This is used to turn C<"B::UNOP"> into
d533 1
a533 1
=head2 Exported utility variables
d560 1
a560 1
object hierarchy.  Structure fields which point to other objects
d568 1
a568 1
using this module.  Also, note that the B::OP and B::SV objects created
d571 1
a571 1
underlying objects.  Trying to access the fields of a freed object will
d577 1
a577 1
earlier), B::PVLV, B::AV, B::HV, B::CV, B::GV, B::FM, B::IO.  These classes
d579 1
a579 1
The inheritance hierarchy mimics the underlying C "inheritance".  For the
d649 2
a650 2
Hv, ...).  The leading prefix is only left in cases where its removal
would cause a clash in method name.  For example, C<GvREFCNT> stays
d665 2
a666 2
B::SV object.  In other words, this method is the inverse operation
to the svref_2object() subroutine.  This scalar and other data it points
d679 2
a680 2
a signed integer>.  This will be misleading
if C<FLAGS & SVf_IVisUV>.  Perhaps you want the
d724 1
a724 1
This method is the one you usually want.  It constructs a
d736 1
a736 1
This method is less often useful.  It assumes that the string
d741 1
a741 1
of a lexical variable from a padname array.  Lexical variable names
d743 1
a743 11
(CUR) is overloaded for other purposes and can't be relied on here.

=item CUR

This method returns the internal length field, which consists of the number
of internal bytes, not necessarily the number of logical characters.

=item LEN

This method returns the number of bytes allocated (via malloc) for storing
the string.  This is 0 if the scalar does not "own" the string.
a870 9
B::IO objects derive from IO objects and you will get more information from
the IO object itself.

For example:

  $gvio = B::svref_2object(\*main::stdin)->IO;
  $IO = $gvio->object_2svref();
  $fd = $IO->fileno();

a896 15
A character symbolizing the type of IO Handle.

  -     STDIN/OUT
  I     STDIN/OUT/ERR
  <     read-only
  >     write-only
  a     append
  +     read and write
  s     socket
  |     pipe
  I     IMPLICIT
  #     NUMERIC
  space closed handle
  \0    closed internal handle

d901 1
a901 1
Takes one argument ( 'stdin' | 'stdout' | 'stderr' ) and returns true
d903 2
a904 2
passed as argument; i.e., $io->IsSTD('stderr') is true if
IoIFP($io) == PerlIO_stderr().
d930 1
a930 2
This method returns the AV specific
flags.  In Perl 5.9 these are now stored
d998 1
a998 1
structures of similar names.  The inheritance hierarchy mimics the
d1102 2
a1164 2

=item stashlen
@


1.1.1.12
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d18 1
a18 1
    $B::VERSION = '1.42_02';
d38 2
a39 1
			@@specialsv_name unitcheck_av));
d52 4
a55 2
@@B::PVLV::ISA = 'B::GV';
@@B::BM::ISA = 'B::GV';
d256 1
a256 2
    foreach my $sym ( sort keys %$symref ) {
        $ref= $symref->{$sym};
a407 2
As of Perl 5.18, this is just an alias to C<PL_na>, so its value is
meaningless.
a1016 4
=item NAME_HEK

Returns the name of a lexical sub, otherwise C<undef>.

a1163 4
=item code_list

Since perl 5.17.1

d1214 1
a1214 1
=item stashoff (threaded only)
a1232 23


=head2 $B::overlay

Although the optree is read-only, there is an overlay facility that allows
you to override what values the various B::*OP methods return for a
particular op. C<$B::overlay> should be set to reference a two-deep hash:
indexed by OP address, then method name. Whenever a an op method is
called, the value in the hash is returned if it exists. This facility is
used by B::Deparse to "undo" some optimisations. For example:


    local $B::overlay = {};
    ...
    if ($op->name eq "foo") {
        $B::overlay->{$$op} = {
                name => 'bar',
                next => $op->next->next,
        };
    }
    ...
    $op->name # returns "bar"
    $op->next # returns the next op but one
@


1.1.1.13
log
@Import perl-5.20.1
@
text
@d18 1
a18 1
    $B::VERSION = '1.48';
a50 1
@@B::INVLIST::ISA = 'B::PV'  if $] >= 5.019;
d92 2
a93 3
  $name =~ s/^\c?/^?/
    or $name =~ s/^([\cA-\cZ\c\\c[\c]\c_\c^])/
                "^" .  chr( utf8::unicode_to_native( 64 ^ ord($1) ))/e;
d96 1
a96 2
  # which matters iff this is a non-ASCII platform (EBCDIC).  '\c?' would
  # not have to be special cased, except for non-ASCII.
d431 1
a431 3
Returns the PADLIST object (i.e. in class B::PADLIST) of the global
comppadlist.  In Perl 5.16 and earlier it returns an AV object (class
B::AV).
a1002 3
Returns a B::PADLIST object under Perl 5.18 or higher, or a B::AV in
earlier versions.

d1070 1
a1070 1
Access methods correspond to the underlying C structure field names,
a1241 24
=head2 OTHER CLASSES

Perl 5.18 introduces a new class, B::PADLIST, returned by B::CV's
C<PADLIST> method.

=head2 B::PADLIST Methods

=over 4

=item MAX

=item ARRAY

A list of pads.  The first one contains the names.  These are currently
B::AV objects, but that is likely to change in future versions.

=item ARRAYelt

Like C<ARRAY>, but takes an index as an argument to get only one element,
rather than a list of all of them.

=item REFCNT

=back
@


1.1.1.14
log
@Import perl-5.24.2
@
text
@d18 1
a18 1
    $B::VERSION = '1.62';
d38 1
a38 1
			@@specialsv_name unitcheck_av safename));
a62 1
@@B::UNOP_AUX::ISA = 'B::UNOP';
a71 1
@@B::METHOP::ISA = 'B::OP';
d75 1
a75 2
@@B::optype = qw(OP UNOP BINOP LOGOP LISTOP PMOP SVOP PADOP PVOP LOOP COP
                METHOP UNOP_AUX);
d88 1
a88 5
  safename(shift()->NAME);
}

sub safename {
  my $name = shift;
d270 66
a539 7
=item safename(STR)

This function returns the string with the first character modified if it
is a control character.  It converts it to ^X format first, so that "\cG"
becomes "^G".  This is used internally by L<B::GV::SAFENAME|/SAFENAME>, but
you can call it directly.

d548 2
a549 2
This used to provide support for the old 5.005 threading module. It now
does nothing.
a727 8
=item COP_SEQ_RANGE_LOW

=item COP_SEQ_RANGE_HIGH

These last two are only valid for pad name SVs.  They only existed in the
B::NV class before Perl 5.22.  In 5.22 they were moved to the B::PADNAME
class.

a843 16
=head2 B::REGEXP Methods

=over 4

=item REGEX

=item precomp

=item qr_anoncv

=item compflags

The last two were added in Perl 5.22.

=back

a896 4
=item GPFLAGS

This last one is present only in perl 5.22.0 and higher.

d1056 2
a1057 3
C<B::OP>, C<B::UNOP>, C<B::UNOP_AUX>, C<B::BINOP>, C<B::LOGOP>,
C<B::LISTOP>, C<B::PMOP>, C<B::SVOP>, C<B::PADOP>, C<B::PVOP>, C<B::LOOP>,
C<B::COP>, C<B::METHOP>.
d1065 6
a1070 7
                   +----------+---------+--------+-------+---------+
                   |          |         |        |       |         |
                B::UNOP    B::SVOP  B::PADOP  B::COP  B::PVOP  B::METHOP
                   |
               +---+---+---------+
               |       |         |
           B::BINOP  B::LOGOP  B::UNOP_AUX
d1074 3
a1076 4
               |
           +---+---+
           |       |
        B::LOOP   B::PMOP
a1091 10
=item parent

Returns the OP's parent. If it has no parent, or if your perl wasn't built
with C<-DPERL_OP_PARENT>, returns NULL.

Note that the global variable C<$B::OP::does_parent> is undefined on older
perls that don't support the C<parent> method, is defined but false on
perls that support the method but were built without  C<-DPERL_OP_PARENT>,
and is true otherwise.

d1120 1
a1120 1
=head2 B::UNOP Method
d1128 1
a1128 22
=head2 B::UNOP_AUX Methods (since 5.22)

=over 4

=item aux_list(cv)

This returns a list of the elements of the op's aux data structure,
or a null list if there is no aux. What will be returned depends on the
object's type, but will typically be a collection of C<B::IV>, C<B::GV>,
etc. objects. C<cv> is the C<B::CV> object representing the sub that the
op is contained within.

=item string(cv)

This returns a textual representation of the object (likely to b useful
for deparsing and debugging), or an empty string if the op type doesn't
support this. C<cv> is the C<B::CV> object representing the sub that the
op is contained within.

=back

=head2 B::BINOP Method
d1136 1
a1136 1
=head2 B::LOGOP Method
d1144 1
a1144 1
=head2 B::LISTOP Method
a1179 7
=item pmregexp

Added in perl 5.22, this method returns the B::REGEXP associated with the
op.  While PMOPs do not actually have C<pmregexp> fields under threaded
builds, this method returns the regexp under threads nonetheless, for
convenience.

d1182 1
a1182 1
=head2 B::SVOP Methods
d1192 1
a1192 1
=head2 B::PADOP Method
d1200 1
a1200 1
=head2 B::PVOP Method
a1221 3
The C<B::COP> class is used for "nextstate" and "dbstate" ops.  As of Perl
5.22, it is also used for "null" ops that started out as COPs.

d1250 1
a1250 1
=head2 B::METHOP Methods (Since Perl 5.22)
d1252 1
a1252 11
=over 4

=item first

=item meth_sv

=back

=head2 PAD-RELATED CLASSES

Perl 5.18 introduced a new class, B::PADLIST, returned by B::CV's
a1254 2
Perl 5.22 introduced the B::PADNAMELIST and B::PADNAME classes.

d1263 2
a1264 5
A list of pads.  The first one contains the names.

The first one is a B::PADNAMELIST under Perl 5.22, and a B::AV under
earlier versions.  The rest are currently B::AV objects, but that could
change in future versions.
a1270 45
=item NAMES

This method, introduced in 5.22, returns the B::PADNAMELIST.  It is
equivalent to C<ARRAYelt> with a 0 argument.

=item REFCNT

=item id

This method, introduced in 5.22, returns an ID shared by clones of the same
padlist.

=item outid

This method, also added in 5.22, returns the ID of the outer padlist.

=back

=head2 B::PADNAMELIST Methods

=over 4

=item MAX

=item ARRAY

=item ARRAYelt

These two methods return the pad names, using B::SPECIAL objects for null
pointers and B::PADNAME objects otherwise.

=item REFCNT

=back

=head2 B::PADNAME Methods

=over 4

=item PV

=item PVX

=item LEN

a1271 36

=item FLAGS

For backward-compatibility, if the PADNAMEt_OUTER flag is set, the FLAGS
method adds the SVf_FAKE flag, too.

=item TYPE

A B::HV object representing the stash for a typed lexical.

=item SvSTASH

A backward-compatibility alias for TYPE.

=item OURSTASH

A B::HV object representing the stash for 'our' variables.

=item PROTOCV

The prototype CV for a 'my' sub.

=item COP_SEQ_RANGE_LOW

=item COP_SEQ_RANGE_HIGH

Sequence numbers representing the scope within which a lexical is visible.
Meaningless if PADNAMEt_OUTER is set.

=item PARENT_PAD_INDEX

Only meaningful if PADNAMEt_OUTER is set.

=item PARENT_FAKELEX_FLAGS

Only meaningful if PADNAMEt_OUTER is set.
@


