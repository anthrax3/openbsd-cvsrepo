head	1.2;
access;
symbols
	OPENBSD_5_3:1.1.1.8.0.10
	OPENBSD_5_3_BASE:1.1.1.8
	OPENBSD_5_2:1.1.1.8.0.8
	OPENBSD_5_2_BASE:1.1.1.8
	OPENBSD_5_1_BASE:1.1.1.8
	OPENBSD_5_1:1.1.1.8.0.6
	OPENBSD_5_0:1.1.1.8.0.4
	OPENBSD_5_0_BASE:1.1.1.8
	OPENBSD_4_9:1.1.1.8.0.2
	OPENBSD_4_9_BASE:1.1.1.8
	PERL_5_12_2:1.1.1.8
	OPENBSD_4_8:1.1.1.7.0.4
	OPENBSD_4_8_BASE:1.1.1.7
	OPENBSD_4_7:1.1.1.7.0.2
	OPENBSD_4_7_BASE:1.1.1.7
	PERL_5_10_1:1.1.1.7
	OPENBSD_4_6:1.1.1.6.0.6
	OPENBSD_4_6_BASE:1.1.1.6
	OPENBSD_4_5:1.1.1.6.0.2
	OPENBSD_4_5_BASE:1.1.1.6
	PERL_5_10_0:1.1.1.6
	OPENBSD_4_4:1.1.1.5.0.16
	OPENBSD_4_4_BASE:1.1.1.5
	OPENBSD_4_3:1.1.1.5.0.14
	OPENBSD_4_3_BASE:1.1.1.5
	OPENBSD_4_2:1.1.1.5.0.12
	OPENBSD_4_2_BASE:1.1.1.5
	OPENBSD_4_1:1.1.1.5.0.10
	OPENBSD_4_1_BASE:1.1.1.5
	OPENBSD_4_0:1.1.1.5.0.8
	OPENBSD_4_0_BASE:1.1.1.5
	PERL_5_8_8:1.1.1.5
	OPENBSD_3_9:1.1.1.5.0.6
	OPENBSD_3_9_BASE:1.1.1.5
	OPENBSD_3_8:1.1.1.5.0.4
	OPENBSD_3_8_BASE:1.1.1.5
	OPENBSD_3_7:1.1.1.5.0.2
	OPENBSD_3_7_BASE:1.1.1.5
	PERL_5_8_6:1.1.1.5
	OPENBSD_3_6:1.1.1.4.0.4
	OPENBSD_3_6_BASE:1.1.1.4
	PERL_5_8_5:1.1.1.4
	PERL_5_8_3:1.1.1.4
	OPENBSD_3_5:1.1.1.4.0.2
	OPENBSD_3_5_BASE:1.1.1.4
	PERL_5_8_2:1.1.1.4
	OPENBSD_3_4:1.1.1.3.0.4
	OPENBSD_3_4_BASE:1.1.1.3
	OPENBSD_3_3:1.1.1.3.0.2
	OPENBSD_3_3_BASE:1.1.1.3
	PERL_5_8_0:1.1.1.3
	OPENBSD_3_2:1.1.1.2.0.6
	OPENBSD_3_2_BASE:1.1.1.2
	OPENBSD_3_1:1.1.1.2.0.4
	OPENBSD_3_1_BASE:1.1.1.2
	OPENBSD_3_0:1.1.1.2.0.2
	OPENBSD_3_0_BASE:1.1.1.2
	PERL_5_6_1:1.1.1.2
	OPENBSD_2_9:1.1.1.1.0.6
	OPENBSD_2_9_BASE:1.1.1.1
	OPENBSD_2_8:1.1.1.1.0.4
	OPENBSD_2_8_BASE:1.1.1.1
	OPENBSD_2_7:1.1.1.1.0.2
	OPENBSD_2_7_BASE:1.1.1.1
	PERL_5_6_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2013.03.25.20.40.53;	author sthen;	state dead;
branches;
next	1.1;

1.1
date	2000.04.06.16.09.01;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.04.06.16.09.01;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.05.24.18.22.38;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.10.27.22.14.53;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2003.12.03.02.43.40;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2005.01.15.21.16.42;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2008.09.29.17.18.13;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2009.10.12.18.11.11;	author millert;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2010.09.24.14.48.52;	author millert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@# Do not remove the following line; MakeMaker relies on it to identify
# this file as a template for defsubs.h
# Extracting defsubs.h (with variable substitutions)
#!perl
my ($out) = __FILE__ =~ /(^.*)\.PL/i;
$out =~ s/_h$/.h/;
open(OUT,">$out") || die "Cannot open $file:$!";
print "Extracting $out...\n";
foreach my $const (qw(AVf_REAL 
		      HEf_SVKEY
                      SVf_IOK SVf_IVisUV SVf_NOK SVf_POK 
		      SVf_ROK SVp_IOK SVp_POK ))
 {
  doconst($const);
 }
foreach my $file (qw(op.h cop.h))
 {
  open(OPH,"../../$file") || die "Cannot open ../../$file:$!";
  while (<OPH>)
   {  
    doconst($1) if (/#define\s+(\w+)\s+([\(\)\|\dx]+)\s*(?:$|\/\*)/);
   }  
  close(OPH);
 }
close(OUT);
               
sub doconst
{
 my $sym = shift;
 my $l = length($sym);
 print OUT <<"END";
 newCONSTSUB(stash,"$sym",newSViv($sym)); 
 av_push(export_ok,newSVpvn("$sym",$l));
END
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@virgin perl 5.6.0
@
text
@@


1.1.1.2
log
@stock perl 5.6.1
@
text
@d9 1
a9 2
foreach my $const (qw(
		      AVf_REAL 
a10 4
		      SVf_READONLY SVTYPEMASK
		      GVf_IMPORTED_AV GVf_IMPORTED_HV
		      GVf_IMPORTED_SV GVf_IMPORTED_CV
		      CVf_METHOD CVf_LOCKED CVf_LVALUE
d12 1
a12 2
		      SVf_ROK SVp_IOK SVp_POK SVp_NOK
		      ))
d18 1
a18 2
  my $path = $^O eq 'MacOS' ? ":::$file" : "../../$file";
  open(OPH,"$path") || die "Cannot open $path:$!";
@


1.1.1.3
log
@stock perl 5.8.0 from CPAN
@
text
@d15 2
a16 2
		      CVf_METHOD CVf_LOCKED CVf_LVALUE CVf_CONST
                      SVpad_OUR SVf_IOK SVf_IVisUV SVf_NOK SVf_POK 
@


1.1.1.4
log
@perl 5.8.2 from CPAN
@
text
@a8 6
print OUT <<"END";
/*
 !!! Don't modify this file - it's autogenerated from $0 !!!
 */
END

d10 1
a10 16
		      AVf_REAL
		      CVf_ANON
		      CVf_CLONE
		      CVf_CLONED
		      CVf_CONST
		      CVf_LOCKED
		      CVf_LVALUE
		      CVf_METHOD
		      CVf_NODEBUG
		      CVf_OLDSTYLE
		      CVf_UNIQUE
		      CVf_WEAKOUTSIDE
		      GVf_IMPORTED_AV
		      GVf_IMPORTED_CV
		      GVf_IMPORTED_HV
		      GVf_IMPORTED_SV
d12 6
a17 16
		      SVTYPEMASK
		      SVf_FAKE
		      SVf_IOK
		      SVf_IVisUV
		      SVf_NOK
		      SVf_POK
		      SVf_READONLY
		      SVf_ROK
		      SVp_IOK
		      SVp_NOK
		      SVp_POK
		      SVpad_OUR
		      SVs_RMG
		      SVs_SMG
		      SVt_PVGV
		      SVt_PVHV
@


1.1.1.5
log
@perl 5.8.6 from CPAN
@
text
@a17 1
		      CVf_ASSERTION
@


1.1.1.6
log
@import perl 5.10.0 from CPAN
@
text
@d4 1
a4 3
#!perl -w
use File::Spec;
my (undef, $headerpath) = @@ARGV;
a6 1
unlink $out if -l $out;
d16 1
d18 1
d26 1
a49 2
		      PAD_FAKELEX_ANON
		      PAD_FAKELEX_MULTI
d54 1
a54 16

if ($] < 5.009) {
    # This is only present in 5.10, but it's useful to B::Deparse to be able
    # to import a dummy value from B
    doconst(OPpPAD_STATE);
}

if ($] >= 5.009) {
    # Constant not present in 5.8.x
    doconst(CVf_ISXSUB);
} else {
    # Constant not present after 5.8.x
    doconst(AVf_REAL);
}  

foreach my $tuple (['op.h'],['cop.h'],['regexp.h','RXf_'])
d56 1
a56 3
  my $file = $tuple->[0];
  my $pfx = $tuple->[1] || '';
  my $path = File::Spec->catfile($headerpath, $file);
d60 1
a60 1
    doconst($1) if (/#define\s+($pfx\w+)\s+([\(\)\|\dx]+)\s*(?:$|\/\*)/);
@


1.1.1.7
log
@import perl 5.10.1
@
text
@a70 5
if ($] < 5.011) {
    # Constant not present after 5.10.x
    doconst(CVf_LOCKED);
}

@


1.1.1.8
log
@Perl 5.12.2 from CPAN
@
text
@d23 1
@


