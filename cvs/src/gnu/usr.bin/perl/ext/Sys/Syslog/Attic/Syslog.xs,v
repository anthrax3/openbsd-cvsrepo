head	1.3;
access;
symbols
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.1.1.4.0.2
	OPENBSD_4_5_BASE:1.1.1.4
	PERL_5_10_0:1.1.1.4
	OPENBSD_4_4:1.1.1.3.0.24
	OPENBSD_4_4_BASE:1.1.1.3
	OPENBSD_4_3:1.1.1.3.0.22
	OPENBSD_4_3_BASE:1.1.1.3
	OPENBSD_4_2:1.1.1.3.0.20
	OPENBSD_4_2_BASE:1.1.1.3
	OPENBSD_4_1:1.1.1.3.0.18
	OPENBSD_4_1_BASE:1.1.1.3
	OPENBSD_4_0:1.1.1.3.0.16
	OPENBSD_4_0_BASE:1.1.1.3
	PERL_5_8_8:1.1.1.3
	OPENBSD_3_9:1.1.1.3.0.14
	OPENBSD_3_9_BASE:1.1.1.3
	OPENBSD_3_8:1.1.1.3.0.12
	OPENBSD_3_8_BASE:1.1.1.3
	OPENBSD_3_7:1.1.1.3.0.10
	OPENBSD_3_7_BASE:1.1.1.3
	PERL_5_8_6:1.1.1.3
	OPENBSD_3_6:1.1.1.3.0.8
	OPENBSD_3_6_BASE:1.1.1.3
	PERL_5_8_5:1.1.1.3
	PERL_5_8_3:1.1.1.3
	OPENBSD_3_5:1.1.1.3.0.6
	OPENBSD_3_5_BASE:1.1.1.3
	PERL_5_8_2:1.1.1.3
	OPENBSD_3_4:1.1.1.3.0.4
	OPENBSD_3_4_BASE:1.1.1.3
	OPENBSD_3_3:1.1.1.3.0.2
	OPENBSD_3_3_BASE:1.1.1.3
	PERL_5_8_0:1.1.1.3
	OPENBSD_3_2:1.1.1.2.0.6
	OPENBSD_3_2_BASE:1.1.1.2
	OPENBSD_3_1:1.1.1.2.0.4
	OPENBSD_3_1_BASE:1.1.1.2
	OPENBSD_3_0:1.1.1.2.0.2
	OPENBSD_3_0_BASE:1.1.1.2
	PERL_5_6_1:1.1.1.2
	OPENBSD_2_9:1.1.1.1.0.6
	OPENBSD_2_9_BASE:1.1.1.1
	OPENBSD_2_8:1.1.1.1.0.4
	OPENBSD_2_8_BASE:1.1.1.1
	OPENBSD_2_7:1.1.1.1.0.2
	OPENBSD_2_7_BASE:1.1.1.1
	PERL_5_6_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2009.10.12.18.24.34;	author millert;	state dead;
branches;
next	1.2;

1.2
date	2009.05.13.15.19.59;	author simon;	state Exp;
branches;
next	1.1;

1.1
date	2000.04.06.16.09.24;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.04.06.16.09.24;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.05.24.18.23.00;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.10.27.22.14.56;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2008.09.29.17.18.24;	author millert;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Merge in perl 5.10.1
@
text
@#if defined(_WIN32)
#  include <windows.h>
#endif

#include "EXTERN.h"
#include "perl.h"
#include "XSUB.h"
#ifdef USE_PPPORT_H
#  include "ppport.h"
#endif

#ifndef HAVE_SYSLOG
#define HAVE_SYSLOG 1
#endif

#if defined(_WIN32) && !defined(__CYGWIN__)
#  undef HAVE_SYSLOG
#  include "fallback/syslog.h"
#else
#  if defined(I_SYSLOG) || PATCHLEVEL < 6
#    include <syslog.h>
#  endif
#endif

static SV *ident_svptr;

#include "const-c.inc"

MODULE = Sys::Syslog		PACKAGE = Sys::Syslog		

INCLUDE: const-xs.inc

int
LOG_FAC(p)
    INPUT:
	int		p
    CODE:
#ifdef LOG_FAC
	RETVAL = LOG_FAC(p);
#else
	croak("Your vendor has not defined the Sys::Syslog macro LOG_FAC");
	RETVAL = -1;
#endif
    OUTPUT:
	RETVAL

int
LOG_PRI(p)
    INPUT:
	int		p
    CODE:
#ifdef LOG_PRI
	RETVAL = LOG_PRI(p);
#else
	croak("Your vendor has not defined the Sys::Syslog macro LOG_PRI");
	RETVAL = -1;
#endif
    OUTPUT:
	RETVAL

int
LOG_MAKEPRI(fac,pri)
    INPUT:
	int		fac
	int		pri
    CODE:
#ifdef LOG_MAKEPRI
	RETVAL = LOG_MAKEPRI(fac,pri);
#else
	croak("Your vendor has not defined the Sys::Syslog macro LOG_MAKEPRI");
	RETVAL = -1;
#endif
    OUTPUT:
	RETVAL

int
LOG_MASK(pri)
    INPUT:
	int		pri
    CODE:
#ifdef LOG_MASK
	RETVAL = LOG_MASK(pri);
#else
	croak("Your vendor has not defined the Sys::Syslog macro LOG_MASK");
	RETVAL = -1;
#endif
    OUTPUT:
	RETVAL

int
LOG_UPTO(pri)
    INPUT:
	int		pri
    CODE:
#ifdef LOG_UPTO
	RETVAL = LOG_UPTO(pri);
#else
	croak("Your vendor has not defined the Sys::Syslog macro LOG_UPTO");
	RETVAL = -1;
#endif
    OUTPUT:
	RETVAL

#ifdef HAVE_SYSLOG

void
openlog_xs(ident, option, facility)
    INPUT:
        SV*   ident
        int   option
        int   facility
    PREINIT:
        STRLEN len;
        char*  ident_pv;
    CODE:
        ident_svptr = newSVsv(ident);
        ident_pv    = SvPV(ident_svptr, len);
        openlog(ident_pv, option, facility);

void
syslog_xs(priority, message)
    INPUT:
        int   priority
        const char * message
    CODE:
        syslog(priority, "%s", message);

int
setlogmask_xs(mask)
    INPUT:
        int mask
    CODE:
        RETVAL = setlogmask(mask);
    OUTPUT:
        RETVAL

void
closelog_xs()
    CODE:
        closelog();
        if (SvREFCNT(ident_svptr))
            SvREFCNT_dec(ident_svptr);

#else  /* HAVE_SYSLOG */

void
openlog_xs(ident, option, facility)
    INPUT:
        SV*   ident
        int   option
        int   facility
    CODE:

void
syslog_xs(priority, message)
    INPUT:
        int   priority
        const char * message
    CODE:

int
setlogmask_xs(mask)
    INPUT:
        int mask
    CODE:

void
closelog_xs()
    CODE:

#endif /* HAVE_SYSLOG */
@


1.2
log
@update Sys::Syslog to CPAN version 0.27

testing by sthen@@ and jasper@@, thanks!
ok millert@@, jasper@@
@
text
@@


1.1
log
@Initial revision
@
text
@d1 4
d8 3
d12 2
a13 2
#ifdef I_SYSLOG
#include <syslog.h>
d16 3
a18 8
static double
constant_LOG_NO(char *name, int len)
{
    switch (name[6 + 0]) {
    case 'T':
	if (strEQ(name + 6, "TICE")) {	/* LOG_NO removed */
#ifdef LOG_NOTICE
	    return LOG_NOTICE;
d20 3
a22 1
	    goto not_there;
a23 523
	}
    case 'W':
	if (strEQ(name + 6, "WAIT")) {	/* LOG_NO removed */
#ifdef LOG_NOWAIT
	    return LOG_NOWAIT;
#else
	    goto not_there;
#endif
	}
    }
    errno = EINVAL;
    return 0;

not_there:
    errno = ENOENT;
    return 0;
}

static double
constant_LOG_N(char *name, int len)
{
    switch (name[5 + 0]) {
    case 'D':
	if (strEQ(name + 5, "DELAY")) {	/* LOG_N removed */
#ifdef LOG_NDELAY
	    return LOG_NDELAY;
#else
	    goto not_there;
#endif
	}
    case 'E':
	if (strEQ(name + 5, "EWS")) {	/* LOG_N removed */
#ifdef LOG_NEWS
	    return LOG_NEWS;
#else
	    goto not_there;
#endif
	}
    case 'F':
	if (strEQ(name + 5, "FACILITIES")) {	/* LOG_N removed */
#ifdef LOG_NFACILITIES
	    return LOG_NFACILITIES;
#else
	    goto not_there;
#endif
	}
    case 'O':
	return constant_LOG_NO(name, len);
    }
    errno = EINVAL;
    return 0;

not_there:
    errno = ENOENT;
    return 0;
}

static double
constant_LOG_P(char *name, int len)
{
    switch (name[5 + 0]) {
    case 'I':
	if (strEQ(name + 5, "ID")) {	/* LOG_P removed */
#ifdef LOG_PID
	    return LOG_PID;
#else
	    goto not_there;
#endif
	}
    case 'R':
	if (strEQ(name + 5, "RIMASK")) {	/* LOG_P removed */
#ifdef LOG_PRIMASK
	    return LOG_PRIMASK;
#else
	    goto not_there;
#endif
	}
    }
    errno = EINVAL;
    return 0;

not_there:
    errno = ENOENT;
    return 0;
}

static double
constant_LOG_AU(char *name, int len)
{
    if (6 + 2 >= len ) {
	errno = EINVAL;
	return 0;
    }
    switch (name[6 + 2]) {
    case '\0':
	if (strEQ(name + 6, "TH")) {	/* LOG_AU removed */
#ifdef LOG_AUTH
	    return LOG_AUTH;
#else
	    goto not_there;
#endif
	}
    case 'P':
	if (strEQ(name + 6, "THPRIV")) {	/* LOG_AU removed */
#ifdef LOG_AUTHPRIV
	    return LOG_AUTHPRIV;
#else
	    goto not_there;
#endif
	}
    }
    errno = EINVAL;
    return 0;

not_there:
    errno = ENOENT;
    return 0;
}

static double
constant_LOG_A(char *name, int len)
{
    switch (name[5 + 0]) {
    case 'L':
	if (strEQ(name + 5, "LERT")) {	/* LOG_A removed */
#ifdef LOG_ALERT
	    return LOG_ALERT;
#else
	    goto not_there;
#endif
	}
    case 'U':
	return constant_LOG_AU(name, len);
    }
    errno = EINVAL;
    return 0;

not_there:
    errno = ENOENT;
    return 0;
}

static double
constant_LOG_CR(char *name, int len)
{
    switch (name[6 + 0]) {
    case 'I':
	if (strEQ(name + 6, "IT")) {	/* LOG_CR removed */
#ifdef LOG_CRIT
	    return LOG_CRIT;
#else
	    goto not_there;
#endif
	}
    case 'O':
	if (strEQ(name + 6, "ON")) {	/* LOG_CR removed */
#ifdef LOG_CRON
	    return LOG_CRON;
#else
	    goto not_there;
#endif
	}
    }
    errno = EINVAL;
    return 0;

not_there:
    errno = ENOENT;
    return 0;
}

static double
constant_LOG_C(char *name, int len)
{
    switch (name[5 + 0]) {
    case 'O':
	if (strEQ(name + 5, "ONS")) {	/* LOG_C removed */
#ifdef LOG_CONS
	    return LOG_CONS;
#else
	    goto not_there;
#endif
	}
    case 'R':
	return constant_LOG_CR(name, len);
    }
    errno = EINVAL;
    return 0;

not_there:
    errno = ENOENT;
    return 0;
}

static double
constant_LOG_D(char *name, int len)
{
    switch (name[5 + 0]) {
    case 'A':
	if (strEQ(name + 5, "AEMON")) {	/* LOG_D removed */
#ifdef LOG_DAEMON
	    return LOG_DAEMON;
#else
	    goto not_there;
#endif
	}
    case 'E':
	if (strEQ(name + 5, "EBUG")) {	/* LOG_D removed */
#ifdef LOG_DEBUG
	    return LOG_DEBUG;
#else
	    goto not_there;
#endif
	}
    }
    errno = EINVAL;
    return 0;

not_there:
    errno = ENOENT;
    return 0;
}

static double
constant_LOG_U(char *name, int len)
{
    switch (name[5 + 0]) {
    case 'S':
	if (strEQ(name + 5, "SER")) {	/* LOG_U removed */
#ifdef LOG_USER
	    return LOG_USER;
#else
	    goto not_there;
#endif
	}
    case 'U':
	if (strEQ(name + 5, "UCP")) {	/* LOG_U removed */
#ifdef LOG_UUCP
	    return LOG_UUCP;
#else
	    goto not_there;
#endif
	}
    }
    errno = EINVAL;
    return 0;

not_there:
    errno = ENOENT;
    return 0;
}

static double
constant_LOG_E(char *name, int len)
{
    switch (name[5 + 0]) {
    case 'M':
	if (strEQ(name + 5, "MERG")) {	/* LOG_E removed */
#ifdef LOG_EMERG
	    return LOG_EMERG;
#else
	    goto not_there;
#endif
	}
    case 'R':
	if (strEQ(name + 5, "RR")) {	/* LOG_E removed */
#ifdef LOG_ERR
	    return LOG_ERR;
#else
	    goto not_there;
#endif
	}
    }
    errno = EINVAL;
    return 0;

not_there:
    errno = ENOENT;
    return 0;
}

static double
constant_LOG_F(char *name, int len)
{
    switch (name[5 + 0]) {
    case 'A':
	if (strEQ(name + 5, "ACMASK")) {	/* LOG_F removed */
#ifdef LOG_FACMASK
	    return LOG_FACMASK;
#else
	    goto not_there;
#endif
	}
    case 'T':
	if (strEQ(name + 5, "TP")) {	/* LOG_F removed */
#ifdef LOG_FTP
	    return LOG_FTP;
#else
	    goto not_there;
#endif
	}
    }
    errno = EINVAL;
    return 0;

not_there:
    errno = ENOENT;
    return 0;
}

static double
constant_LOG_LO(char *name, int len)
{
    if (6 + 3 >= len ) {
	errno = EINVAL;
	return 0;
    }
    switch (name[6 + 3]) {
    case '0':
	if (strEQ(name + 6, "CAL0")) {	/* LOG_LO removed */
#ifdef LOG_LOCAL0
	    return LOG_LOCAL0;
#else
	    goto not_there;
#endif
	}
    case '1':
	if (strEQ(name + 6, "CAL1")) {	/* LOG_LO removed */
#ifdef LOG_LOCAL1
	    return LOG_LOCAL1;
#else
	    goto not_there;
#endif
	}
    case '2':
	if (strEQ(name + 6, "CAL2")) {	/* LOG_LO removed */
#ifdef LOG_LOCAL2
	    return LOG_LOCAL2;
#else
	    goto not_there;
#endif
	}
    case '3':
	if (strEQ(name + 6, "CAL3")) {	/* LOG_LO removed */
#ifdef LOG_LOCAL3
	    return LOG_LOCAL3;
#else
	    goto not_there;
#endif
	}
    case '4':
	if (strEQ(name + 6, "CAL4")) {	/* LOG_LO removed */
#ifdef LOG_LOCAL4
	    return LOG_LOCAL4;
#else
	    goto not_there;
#endif
	}
    case '5':
	if (strEQ(name + 6, "CAL5")) {	/* LOG_LO removed */
#ifdef LOG_LOCAL5
	    return LOG_LOCAL5;
#else
	    goto not_there;
#endif
	}
    case '6':
	if (strEQ(name + 6, "CAL6")) {	/* LOG_LO removed */
#ifdef LOG_LOCAL6
	    return LOG_LOCAL6;
#else
	    goto not_there;
#endif
	}
    case '7':
	if (strEQ(name + 6, "CAL7")) {	/* LOG_LO removed */
#ifdef LOG_LOCAL7
	    return LOG_LOCAL7;
#else
	    goto not_there;
#endif
	}
    }
    errno = EINVAL;
    return 0;

not_there:
    errno = ENOENT;
    return 0;
}

static double
constant_LOG_L(char *name, int len)
{
    switch (name[5 + 0]) {
    case 'F':
	if (strEQ(name + 5, "FMT")) {	/* LOG_L removed */
#ifdef LOG_LFMT
	    return LOG_LFMT;
#else
	    goto not_there;
#endif
	}
    case 'O':
	return constant_LOG_LO(name, len);
    case 'P':
	if (strEQ(name + 5, "PR")) {	/* LOG_L removed */
#ifdef LOG_LPR
	    return LOG_LPR;
#else
	    goto not_there;
#endif
	}
    }
    errno = EINVAL;
    return 0;

not_there:
    errno = ENOENT;
    return 0;
}

static double
constant(char *name, int len)
{
    errno = 0;
    if (0 + 4 >= len ) {
	errno = EINVAL;
	return 0;
    }
    switch (name[0 + 4]) {
    case 'A':
	if (!strnEQ(name + 0,"LOG_", 4))
	    break;
	return constant_LOG_A(name, len);
    case 'C':
	if (!strnEQ(name + 0,"LOG_", 4))
	    break;
	return constant_LOG_C(name, len);
    case 'D':
	if (!strnEQ(name + 0,"LOG_", 4))
	    break;
	return constant_LOG_D(name, len);
    case 'E':
	if (!strnEQ(name + 0,"LOG_", 4))
	    break;
	return constant_LOG_E(name, len);
    case 'F':
	if (!strnEQ(name + 0,"LOG_", 4))
	    break;
	return constant_LOG_F(name, len);
    case 'I':
	if (strEQ(name + 0, "LOG_INFO")) {	/*  removed */
#ifdef LOG_INFO
	    return LOG_INFO;
#else
	    goto not_there;
#endif
	}
    case 'K':
	if (strEQ(name + 0, "LOG_KERN")) {	/*  removed */
#ifdef LOG_KERN
	    return LOG_KERN;
#else
	    goto not_there;
#endif
	}
    case 'L':
	if (!strnEQ(name + 0,"LOG_", 4))
	    break;
	return constant_LOG_L(name, len);
    case 'M':
	if (strEQ(name + 0, "LOG_MAIL")) {	/*  removed */
#ifdef LOG_MAIL
	    return LOG_MAIL;
#else
	    goto not_there;
#endif
	}
    case 'N':
	if (!strnEQ(name + 0,"LOG_", 4))
	    break;
	return constant_LOG_N(name, len);
    case 'O':
	if (strEQ(name + 0, "LOG_ODELAY")) {	/*  removed */
#ifdef LOG_ODELAY
	    return LOG_ODELAY;
#else
	    goto not_there;
#endif
	}
    case 'P':
	if (!strnEQ(name + 0,"LOG_", 4))
	    break;
	return constant_LOG_P(name, len);
    case 'S':
	if (strEQ(name + 0, "LOG_SYSLOG")) {	/*  removed */
#ifdef LOG_SYSLOG
	    return LOG_SYSLOG;
#else
	    goto not_there;
#endif
	}
    case 'U':
	if (!strnEQ(name + 0,"LOG_", 4))
	    break;
	return constant_LOG_U(name, len);
    case 'W':
	if (strEQ(name + 0, "LOG_WARNING")) {	/*  removed */
#ifdef LOG_WARNING
	    return LOG_WARNING;
#else
	    goto not_there;
#endif
	}
    }
    errno = EINVAL;
    return 0;

not_there:
    errno = ENOENT;
    return 0;
}
d25 3
d31 1
a31 11
char *
_PATH_LOG()
    CODE:
#ifdef _PATH_LOG
	RETVAL = _PATH_LOG;
#else
	croak("Your vendor has not defined the Sys::Syslog macro _PATH_LOG");
	RETVAL = NULL;
#endif
    OUTPUT:
	RETVAL
d104 1
d106 6
a111 2
double
constant(sv)
d113 9
a121 1
	STRLEN		len;
d123 2
a124 2
	SV *		sv
	char *		s = SvPV(sv, len);
d126 8
a133 1
	RETVAL = constant(s,len);
d135 35
a169 1
	RETVAL
d171 1
@


1.1.1.1
log
@virgin perl 5.6.0
@
text
@@


1.1.1.2
log
@stock perl 5.6.1
@
text
@d553 2
a554 1
	RETVAL = "";
@


1.1.1.3
log
@stock perl 5.8.0 from CPAN
@
text
@d9 535
a543 1
#include "const-c.inc"
d547 10
a556 1
INCLUDE: const-xs.inc
d628 14
@


1.1.1.4
log
@import perl 5.10.0 from CPAN
@
text
@a3 7
#ifdef USE_PPPORT_H
#  include "ppport.h"
#endif

#ifndef HAVE_SYSLOG
#define HAVE_SYSLOG 1
#endif
d5 1
a5 1
#if defined(I_SYSLOG) || PATCHLEVEL < 6
a8 7
#if defined(_WIN32) && !defined(__CYGWIN__)
#undef HAVE_SYSLOG
#include "fallback/syslog.h"
#endif

static SV *ident_svptr;

a84 40

#ifdef HAVE_SYSLOG

void
openlog_xs(ident, option, facility)
    INPUT:
        SV*   ident
        int   option
        int   facility
    PREINIT:
        STRLEN len;
        char*  ident_pv;
    CODE:
        ident_svptr = newSVsv(ident);
        ident_pv    = SvPV(ident_svptr, len);
        openlog(ident_pv, option, facility);

void
syslog_xs(priority, message)
    INPUT:
        int   priority
        const char * message
    CODE:
        syslog(priority, "%s", message);

int
setlogmask_xs(mask)
    INPUT:
        int mask
    CODE:
        setlogmask(mask);

void
closelog_xs()
    CODE:
        closelog();
        if (SvREFCNT(ident_svptr))
            SvREFCNT_dec(ident_svptr);

#endif /* HAVE_SYSLOG */
@


