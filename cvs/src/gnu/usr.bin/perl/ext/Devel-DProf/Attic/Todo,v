head	1.2;
access;
symbols
	OPENBSD_5_3:1.1.1.1.0.14
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.12
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.10
	OPENBSD_5_0:1.1.1.1.0.8
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.6
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.4
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.2
	OPENBSD_4_7_BASE:1.1.1.1
	PERL_5_10_1:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2013.03.25.20.40.54;	author sthen;	state dead;
branches;
next	1.1;

1.1
date	2009.10.12.18.11.10;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.10.12.18.11.10;	author millert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@- work on test suite.
- localize the depth to guard against non-local exits.
Current overhead (with PERLDBf_NONAME) wrt non-debugging run (estimates):
	 8% extra call frame on DB::sub
	 7% output of subroutine data
	70% output of timing data (on OS/2, 35% with custom dprof_times())
(Additional 17% are spent to write the output, but they are counted
 and subtracted.)  

With compensation for DProf overhead all but some odd 12% are subtracted ?!

- Calculate overhead/count for XS calls and Perl calls separately.
- goto &XSUB in pp_ctl.c;
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@import perl 5.10.1
@
text
@@
