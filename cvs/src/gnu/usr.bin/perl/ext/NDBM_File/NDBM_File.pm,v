head	1.12;
access;
symbols
	OPENBSD_6_2:1.12.0.2
	OPENBSD_6_2_BASE:1.12
	PERL_5_24_2:1.1.1.11
	OPENBSD_6_1:1.12.0.4
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.11.0.16
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.11.0.10
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.11.0.12
	OPENBSD_5_8_BASE:1.11
	PERL_5_20_2:1.1.1.10
	OPENBSD_5_7:1.11.0.4
	OPENBSD_5_7_BASE:1.11
	PERL_5_20_1:1.1.1.10
	OPENBSD_5_6:1.11.0.8
	OPENBSD_5_6_BASE:1.11
	PERL_5_18_2:1.1.1.10
	PERL:1.1.1
	OPENBSD_5_5:1.11.0.6
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.11.0.2
	OPENBSD_5_4_BASE:1.11
	PERL_5_16_3:1.1.1.10
	OPENBSD_5_3:1.10.0.14
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.12
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.10
	OPENBSD_5_0:1.10.0.8
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.6
	OPENBSD_4_9_BASE:1.10
	PERL_5_12_2:1.1.1.9
	OPENBSD_4_8:1.10.0.4
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.2
	OPENBSD_4_7_BASE:1.10
	PERL_5_10_1:1.1.1.9
	OPENBSD_4_6:1.9.0.6
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.2
	OPENBSD_4_5_BASE:1.9
	PERL_5_10_0:1.1.1.8
	OPENBSD_4_4:1.8.0.10
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.8
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.6
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.4
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.2
	OPENBSD_4_0_BASE:1.8
	PERL_5_8_8:1.1.1.7
	OPENBSD_3_9:1.7.0.10
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.8
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.6
	OPENBSD_3_7_BASE:1.7
	PERL_5_8_6:1.1.1.6
	OPENBSD_3_6:1.7.0.4
	OPENBSD_3_6_BASE:1.7
	PERL_5_8_5:1.1.1.6
	PERL_5_8_3:1.1.1.6
	OPENBSD_3_5:1.7.0.2
	OPENBSD_3_5_BASE:1.7
	PERL_5_8_2:1.1.1.6
	OPENBSD_3_4:1.6.0.4
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.6.0.2
	OPENBSD_3_3_BASE:1.6
	PERL_5_8_0:1.1.1.5
	OPENBSD_3_2:1.5.0.6
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.4
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	PERL_5_6_1:1.1.1.4
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	PERL_5_6_0:1.1.1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	PERL_500503:1.1.1.2
	CPAN:1.1.1
	OPENBSD_2_5:1.2.0.6
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.4
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	perl5003:1.1.1.1
	lwall:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.12
date	2017.02.05.00.32.13;	author afresh1;	state Exp;
branches;
next	1.11;
commitid	cxJ08BvJA9Pt2PTM;

1.11
date	2013.03.25.20.40.54;	author sthen;	state Exp;
branches;
next	1.10;

1.10
date	2009.10.12.18.24.32;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2008.09.29.17.36.05;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2006.03.28.19.23.03;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2003.12.03.03.02.31;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.10.27.22.25.23;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.24.18.35.13;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.06.17.05.24;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	99.04.29.22.51.31;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.11.30.07.55.29;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.08.19.10.12.06;	author downsj;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.08.19.10.12.06;	author downsj;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.04.29.22.38.48;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2000.04.06.16.09.16;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2001.05.24.18.22.53;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2002.10.27.22.14.55;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2003.12.03.02.43.51;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2006.03.28.18.48.17;	author millert;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2008.09.29.17.18.23;	author millert;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2009.10.12.18.11.15;	author millert;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	2013.03.25.20.08.45;	author sthen;	state Exp;
branches;
next	1.1.1.11;

1.1.1.11
date	2017.08.14.13.46.11;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.12
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@package NDBM_File;

use strict;
use warnings;

require Tie::Hash;
require XSLoader;

our @@ISA = qw(Tie::Hash);
our $VERSION = "1.14";

XSLoader::load();

1;

__END__

=head1 NAME

NDBM_File - Tied access to ndbm files

=head1 SYNOPSIS

  use Fcntl;   # For O_RDWR, O_CREAT, etc.
  use NDBM_File;

  tie(%h, 'NDBM_File', 'filename', O_RDWR|O_CREAT, 0666)
    or die "Couldn't tie NDBM file 'filename': $!; aborting";

  # Now read and change the hash
  $h{newkey} = newvalue;
  print $h{oldkey};
  ...

  untie %h;

=head1 DESCRIPTION

C<NDBM_File> establishes a connection between a Perl hash variable and
a file in NDBM_File format;.  You can manipulate the data in the file
just as if it were in a Perl hash, but when your program exits, the
data will remain in the file, to be used the next time your program
runs.

Use C<NDBM_File> with the Perl built-in C<tie> function to establish
the connection between the variable and the file.  The arguments to
C<tie> should be:

=over 4

=item 1.

The hash variable you want to tie.

=item 2.

The string C<"NDBM_File">.  (Ths tells Perl to use the C<NDBM_File>
package to perform the functions of the hash.)

=item 3.

The name of the file you want to tie to the hash.

=item 4.

Flags.  Use one of:

=over 2

=item C<O_RDONLY>

Read-only access to the data in the file.

=item C<O_WRONLY>

Write-only access to the data in the file.

=item C<O_RDWR>

Both read and write access.

=back

If you want to create the file if it does not exist, add C<O_CREAT> to
any of these, as in the example.  If you omit C<O_CREAT> and the file
does not already exist, the C<tie> call will fail.

=item 5.

The default permissions to use if a new file is created.  The actual
permissions will be modified by the user's umask, so you should
probably use 0666 here. (See L<perlfunc/umask>.)

=back

=head1 DIAGNOSTICS

On failure, the C<tie> call returns an undefined value and probably
sets C<$!> to contain the reason the file could not be tied.

=head2 C<ndbm store returned -1, errno 22, key "..." at ...>

This warning is emitted when you try to store a key or a value that
is too long.  It means that the change was not recorded in the
database.  See BUGS AND WARNINGS below.

=head1 BUGS AND WARNINGS

There are a number of limits on the size of the data that you can
store in the NDBM file.  The most important is that the length of a
key, plus the length of its associated value, may not exceed 1008
bytes.

See L<perlfunc/tie>, L<perldbmfilter>, L<Fcntl>

=cut
@


1.11
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@d10 1
a10 1
our $VERSION = "1.12";
@


1.10
log
@Merge in perl 5.10.1
@
text
@d7 1
a7 1
use XSLoader ();
d10 1
a10 1
our $VERSION = "1.08";
d12 1
a12 1
XSLoader::load 'NDBM_File', $VERSION;
@


1.9
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@d10 1
a10 1
our $VERSION = "1.07";
@


1.8
log
@merge in perl 5.8.8
@
text
@d10 1
a10 1
our $VERSION = "1.06";
@


1.7
log
@Resolve conflicts for perl 5.8.2, remove old files, and add OpenBSD-specific scaffolding
@
text
@d10 1
a10 1
our $VERSION = "1.05";
d27 3
d32 1
a32 1
  print $h{oldkey}; 
d55 1
a55 1
=item 2. 
d60 1
a60 1
=item 3. 
d62 1
a62 1
The name of the file you want to tie to the hash.  
d103 1
a103 1
This warning is emmitted when you try to store a key or a value that
@


1.6
log
@Resolve conflicts, remove old files, merge local changes
@
text
@d10 1
a10 1
our $VERSION = "1.04";
@


1.5
log
@merge in perl 5.6.1 with our local changes
@
text
@d31 1
a31 1
 
d33 1
a33 1
 
d35 1
a35 1
 
@


1.4
log
@perl-5.6.0 + local changes
@
text
@d3 2
a4 5
BEGIN {
    if ($] >= 5.002) {
	use strict;
    }
}
d10 1
a10 1
our $VERSION = "1.03";
d24 2
a25 2
 use NDBM_File;
 use Fcntl;       # for O_ constants
d27 43
a69 1
 tie(%h, 'NDBM_File', 'Op.dbmx', O_RDWR|O_CREAT, 0640);
d71 1
a71 1
 untie %h;
d73 37
a109 1
=head1 DESCRIPTION
d111 1
a111 1
See L<perlfunc/tie>, L<perldbmfilter>
@


1.3
log
@perl5.005_03 (stock)
@
text
@a7 1
use vars qw($VERSION @@ISA); 
d10 1
a10 1
require DynaLoader;
d12 2
a13 1
@@ISA = qw(Tie::Hash DynaLoader);
d15 1
a15 3
$VERSION = "1.01";

bootstrap NDBM_File $VERSION;
d36 1
a36 1
See L<perlfunc/tie>
@


1.2
log
@perl 5.004_04
@
text
@d15 1
a15 1
$VERSION = "1.00";
d30 1
@


1.1
log
@Initial revision
@
text
@d31 1
a31 1
 tie(%h,NDBM_File,'Op.dbmx', O_RDWR|O_CREAT, 0640);
@


1.1.1.1
log
@Import of Perl 5.003 into the tree.  Makefile.bsd-wrapper and
config.sh.OpenBSD are the only local changes.
@
text
@@


1.1.1.2
log
@perl5.005_03
@
text
@d15 1
a15 1
$VERSION = "1.01";
a29 1
 use Fcntl;       # for O_ constants
d31 1
a31 1
 tie(%h, 'NDBM_File', 'Op.dbmx', O_RDWR|O_CREAT, 0640);
@


1.1.1.3
log
@virgin perl 5.6.0
@
text
@d8 1
d11 1
a11 1
use XSLoader ();
d13 1
a13 2
our @@ISA = qw(Tie::Hash);
our $VERSION = "1.03";
d15 3
a17 1
XSLoader::load 'NDBM_File', $VERSION;
d38 1
a38 1
See L<perlfunc/tie>, L<perldbmfilter>
@


1.1.1.4
log
@stock perl 5.6.1
@
text
@d3 5
a7 2
use strict;
use warnings;
d13 1
a13 1
our $VERSION = "1.04";
d27 2
a28 2
  use Fcntl;   # For O_RDWR, O_CREAT, etc.
  use NDBM_File;
d30 1
a30 14
  # Now read and change the hash
  $h{newkey} = newvalue;
  print $h{oldkey}; 
  ...
 
  untie %h;
 
=head1 DESCRIPTION
 
C<NDBM_File> establishes a connection between a Perl hash variable and
a file in NDBM_File format;.  You can manipulate the data in the file
just as if it were in a Perl hash, but when your program exits, the
data will remain in the file, to be used the next time your program
runs.
d32 1
a32 3
Use C<NDBM_File> with the Perl built-in C<tie> function to establish
the connection between the variable and the file.  The arguments to
C<tie> should be:
d34 1
a34 64
=over 4

=item 1.

The hash variable you want to tie.

=item 2. 

The string C<"NDBM_File">.  (Ths tells Perl to use the C<NDBM_File>
package to perform the functions of the hash.)

=item 3. 

The name of the file you want to tie to the hash.  

=item 4.

Flags.  Use one of:

=over 2

=item C<O_RDONLY>

Read-only access to the data in the file.

=item C<O_WRONLY>

Write-only access to the data in the file.

=item C<O_RDWR>

Both read and write access.

=back

If you want to create the file if it does not exist, add C<O_CREAT> to
any of these, as in the example.  If you omit C<O_CREAT> and the file
does not already exist, the C<tie> call will fail.

=item 5.

The default permissions to use if a new file is created.  The actual
permissions will be modified by the user's umask, so you should
probably use 0666 here. (See L<perlfunc/umask>.)

=back

=head1 DIAGNOSTICS

On failure, the C<tie> call returns an undefined value and probably
sets C<$!> to contain the reason the file could not be tied.

=head2 C<ndbm store returned -1, errno 22, key "..." at ...>

This warning is emmitted when you try to store a key or a value that
is too long.  It means that the change was not recorded in the
database.  See BUGS AND WARNINGS below.

=head1 BUGS AND WARNINGS

There are a number of limits on the size of the data that you can
store in the NDBM file.  The most important is that the length of a
key, plus the length of its associated value, may not exceed 1008
bytes.
d36 1
a36 1
See L<perlfunc/tie>, L<perldbmfilter>, L<Fcntl>
@


1.1.1.5
log
@stock perl 5.8.0 from CPAN
@
text
@d31 1
a31 1

d33 1
a33 1

d35 1
a35 1

@


1.1.1.6
log
@perl 5.8.2 from CPAN
@
text
@d10 1
a10 1
our $VERSION = "1.05";
@


1.1.1.7
log
@perl 5.8.8 import
@
text
@d10 1
a10 1
our $VERSION = "1.06";
a26 3
  tie(%h, 'NDBM_File', 'filename', O_RDWR|O_CREAT, 0666)
    or die "Couldn't tie NDBM file 'filename': $!; aborting";

d29 1
a29 1
  print $h{oldkey};
d52 1
a52 1
=item 2.
d57 1
a57 1
=item 3.
d59 1
a59 1
The name of the file you want to tie to the hash.
d100 1
a100 1
This warning is emitted when you try to store a key or a value that
@


1.1.1.8
log
@import perl 5.10.0 from CPAN
@
text
@d10 1
a10 1
our $VERSION = "1.07";
@


1.1.1.9
log
@import perl 5.10.1
@
text
@d10 1
a10 1
our $VERSION = "1.08";
@


1.1.1.10
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d7 1
a7 1
require XSLoader;
d10 1
a10 1
our $VERSION = "1.12";
d12 1
a12 1
XSLoader::load();
@


1.1.1.11
log
@Import perl-5.24.2
@
text
@d10 1
a10 1
our $VERSION = "1.14";
@


