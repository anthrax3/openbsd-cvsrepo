head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1_BASE:1.1.1.4
	OPENBSD_6_0:1.1.1.4.0.16
	OPENBSD_6_0_BASE:1.1.1.4
	OPENBSD_5_9:1.1.1.4.0.10
	OPENBSD_5_9_BASE:1.1.1.4
	OPENBSD_5_8:1.1.1.4.0.12
	OPENBSD_5_8_BASE:1.1.1.4
	PERL_5_20_2:1.1.1.4
	OPENBSD_5_7:1.1.1.4.0.4
	OPENBSD_5_7_BASE:1.1.1.4
	PERL_5_20_1:1.1.1.4
	OPENBSD_5_6:1.1.1.4.0.8
	OPENBSD_5_6_BASE:1.1.1.4
	PERL_5_18_2:1.1.1.4
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.4.0.6
	OPENBSD_5_5_BASE:1.1.1.4
	OPENBSD_5_4:1.1.1.4.0.2
	OPENBSD_5_4_BASE:1.1.1.4
	PERL_5_16_3:1.1.1.4
	OPENBSD_5_3:1.1.1.3.0.10
	OPENBSD_5_3_BASE:1.1.1.3
	OPENBSD_5_2:1.1.1.3.0.8
	OPENBSD_5_2_BASE:1.1.1.3
	OPENBSD_5_1_BASE:1.1.1.3
	OPENBSD_5_1:1.1.1.3.0.6
	OPENBSD_5_0:1.1.1.3.0.4
	OPENBSD_5_0_BASE:1.1.1.3
	OPENBSD_4_9:1.1.1.3.0.2
	OPENBSD_4_9_BASE:1.1.1.3
	PERL_5_12_2:1.1.1.3
	OPENBSD_4_8:1.1.1.2.0.28
	OPENBSD_4_8_BASE:1.1.1.2
	OPENBSD_4_7:1.1.1.2.0.24
	OPENBSD_4_7_BASE:1.1.1.2
	PERL_5_10_1:1.1.1.2
	OPENBSD_4_6:1.1.1.2.0.26
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.22
	OPENBSD_4_5_BASE:1.1.1.2
	PERL_5_10_0:1.1.1.2
	OPENBSD_4_4:1.1.1.2.0.20
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.18
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_2:1.1.1.2.0.16
	OPENBSD_4_2_BASE:1.1.1.2
	OPENBSD_4_1:1.1.1.2.0.14
	OPENBSD_4_1_BASE:1.1.1.2
	OPENBSD_4_0:1.1.1.2.0.12
	OPENBSD_4_0_BASE:1.1.1.2
	PERL_5_8_8:1.1.1.2
	OPENBSD_3_9:1.1.1.2.0.10
	OPENBSD_3_9_BASE:1.1.1.2
	OPENBSD_3_8:1.1.1.2.0.8
	OPENBSD_3_8_BASE:1.1.1.2
	OPENBSD_3_7:1.1.1.2.0.6
	OPENBSD_3_7_BASE:1.1.1.2
	PERL_5_8_6:1.1.1.2
	OPENBSD_3_6:1.1.1.2.0.4
	OPENBSD_3_6_BASE:1.1.1.2
	PERL_5_8_5:1.1.1.2
	PERL_5_8_3:1.1.1.2
	OPENBSD_3_5:1.1.1.2.0.2
	OPENBSD_3_5_BASE:1.1.1.2
	PERL_5_8_2:1.1.1.2
	OPENBSD_3_4:1.1.1.1.0.4
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.2
	OPENBSD_3_3_BASE:1.1.1.1
	PERL_5_8_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2002.10.27.22.14.55;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.10.27.22.14.55;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.12.03.02.43.52;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2010.09.24.14.48.52;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2013.03.25.20.08.46;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@BEGIN {
	chdir 't' if -d 't';
	unshift @@INC, '../lib';
}

BEGIN {
    use Config;
    unless ($Config{d_fork}) {
	print "1..0 # Skip: no fork\n";
	exit 0;
    }
    eval { use POSIX qw(sys_wait_h) };
    if ($@@) {
	print "1..0 # Skip: no POSIX sys_wait_h\n";
	exit 0;
    }
    eval { use Time::HiRes qw(time) };
    if ($@@) {
	print "1..0 # Skip: no Time::HiRes\n";
	exit 0;
    }
}

use warnings;
use strict;

$| = 1;

print "1..1\n";

sub NEG1_PROHIBITED () { 0x01 }
sub NEG1_REQUIRED   () { 0x02 }

my $count     = 0;
my $max_count = 9;
my $state     = NEG1_PROHIBITED;

my $child_pid = fork();

# Parent receives a nonzero child PID.

if ($child_pid) {
    my $ok = 1;

    while ($count++ < $max_count) {   
	my $begin_time = time();        
	my $ret = waitpid( -1, WNOHANG );          
	my $elapsed_time = time() - $begin_time;
	
	printf( "# waitpid(-1,WNOHANG) returned %d after %.2f seconds\n",
		$ret, $elapsed_time );
	if ($elapsed_time > 0.5) {
	    printf( "# %.2f seconds in non-blocking waitpid is too long!\n",
		    $elapsed_time );
	    $ok = 0;
	    last;
	}
	
	if ($state & NEG1_PROHIBITED) { 
	    if ($ret == -1) {
		print "# waitpid should not have returned -1 here!\n";
		$ok = 0;
		last;
	    }
	    elsif ($ret == $child_pid) {
		$state = NEG1_REQUIRED;
	    }
	}
	elsif ($state & NEG1_REQUIRED) {
	    unless ($ret == -1) {
		print "# waitpid should have returned -1 here\n";
		$ok = 0;
	    }
	    last;
	}
	
	sleep(1);
    }
    print $ok ? "ok 1\n" : "not ok 1\n";
    exit(0); # parent 
} else {
    # Child receives a zero PID and can request parent's PID with
    # getppid().
    sleep(3);
    exit(0);
}


@


1.1.1.1
log
@stock perl 5.8.0 from CPAN
@
text
@@


1.1.1.2
log
@perl 5.8.2 from CPAN
@
text
@d12 1
a12 1
    eval 'use POSIX qw(sys_wait_h)';
d17 1
a17 1
    eval 'use Time::HiRes qw(time)';
@


1.1.1.3
log
@Perl 5.12.2 from CPAN
@
text
@d2 5
@


1.1.1.4
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d24 1
a24 1
use Test::More tests => 3;
a33 1
fail("fork failed") unless defined $child_pid;
d38 1
a38 1
    my @@problems;
d48 3
a50 3
	    push @@problems,
		sprintf "%.2f seconds in non-blocking waitpid is too long!\n",
		    $elapsed_time;
d56 2
a57 1
		push @@problems, "waitpid should not have returned -1 here!\n";
a61 4
		is(WIFEXITED(${^CHILD_ERROR_NATIVE}), 1, 'child exited cleanly');
		is(WEXITSTATUS(${^CHILD_ERROR_NATIVE}), 0,
		   'child exited with 0 (the retun value of its sleep(3) call)');

d66 2
a67 1
		push @@problems, "waitpid should have returned -1 here!\n";
d74 2
a75 3
    is("@@problems", "", 'no problems');
    POSIX::exit(0); # parent
    fail("Should have exited");
d79 2
a80 1
    POSIX::_exit(POSIX::sleep(3));
d82 2
@


