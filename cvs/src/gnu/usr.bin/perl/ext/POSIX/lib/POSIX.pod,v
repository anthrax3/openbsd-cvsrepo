head	1.7;
access;
symbols
	OPENBSD_6_2:1.7.0.6
	OPENBSD_6_2_BASE:1.7
	PERL_5_24_2:1.1.1.4
	OPENBSD_6_1:1.7.0.4
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.6.0.8
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.2
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.4
	OPENBSD_5_8_BASE:1.6
	PERL_5_20_2:1.1.1.3
	OPENBSD_5_7:1.4.0.2
	OPENBSD_5_7_BASE:1.4
	PERL_5_20_1:1.1.1.3
	OPENBSD_5_6:1.2.0.4
	OPENBSD_5_6_BASE:1.2
	PERL_5_18_2:1.1.1.2
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.6
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.2
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.7
date	2017.02.05.00.32.13;	author afresh1;	state Exp;
branches;
next	1.6;
commitid	cxJ08BvJA9Pt2PTM;

1.6
date	2015.04.25.19.26.22;	author afresh1;	state Exp;
branches;
next	1.5;
commitid	3qGYFVvfrExB70FB;

1.5
date	2015.04.25.19.14.46;	author afresh1;	state Exp;
branches;
next	1.4;
commitid	XRK22kO4se3v2i2I;

1.4
date	2014.11.17.21.01.00;	author afresh1;	state Exp;
branches;
next	1.3;
commitid	LnErp1MFKSuew5Fr;

1.3
date	2014.11.17.20.57.06;	author afresh1;	state Exp;
branches;
next	1.2;
commitid	QP75iYx42Uo7mMxO;

1.2
date	2014.07.14.07.22.07;	author pelikan;	state Exp;
branches;
next	1.1;
commitid	2T7dYu6PlirmmPvO;

1.1
date	2013.03.25.20.08.46;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.03.25.20.08.46;	author sthen;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.03.24.14.59.02;	author afresh1;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.11.17.20.53.06;	author afresh1;	state Exp;
branches;
next	1.1.1.4;
commitid	B31cAbBIXiCqnL97;

1.1.1.4
date	2017.08.14.13.46.12;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.7
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@=head1 NAME

POSIX - Perl interface to IEEE Std 1003.1

=head1 SYNOPSIS

    use POSIX ();
    use POSIX qw(setsid);
    use POSIX qw(:errno_h :fcntl_h);

    printf "EINTR is %d\n", EINTR;

    $sess_id = POSIX::setsid();

    $fd = POSIX::open($path, O_CREAT|O_EXCL|O_WRONLY, 0644);
	# note: that's a filedescriptor, *NOT* a filehandle

=head1 DESCRIPTION

The POSIX module permits you to access all (or nearly all) the standard
POSIX 1003.1 identifiers.  Many of these identifiers have been given Perl-ish
interfaces.

This document gives a condensed list of the features available in the POSIX
module.  Consult your operating system's manpages for general information on
most features.  Consult L<perlfunc> for functions which are noted as being
identical to Perl's builtin functions.

The first section describes POSIX functions from the 1003.1 specification.
The second section describes some classes for signal objects, TTY objects,
and other miscellaneous objects.  The remaining sections list various
constants and macros in an organization which roughly follows IEEE Std
1003.1b-1993.

=head1 CAVEATS

I<Everything is exported by default> (with a handful of exceptions).
This is an unfortunate backwards compatibility feature and its use is
B<strongly L<discouraged|perlpolicy/discouraged>>.
You should either prevent the exporting (by saying S<C<use POSIX ();>>,
as usual) and then use fully qualified names (e.g. C<POSIX::SEEK_END>),
or give an explicit import list.
If you do neither and opt for the default (as in S<C<use POSIX;>>), you
will import I<hundreds and hundreds> of symbols into your namespace.

A few functions are not implemented because they are C specific.  If you
attempt to call these, they will print a message telling you that they
aren't implemented, and suggest using the Perl equivalent, should one
exist.  For example, trying to access the C<setjmp()> call will elicit the
message "C<setjmp() is C-specific: use eval {} instead>".

Furthermore, some evil vendors will claim 1003.1 compliance, but in fact
are not so: they will not pass the PCTS (POSIX Compliance Test Suites).
For example, one vendor may not define C<EDEADLK>, or the semantics of the
errno values set by C<open(2)> might not be quite right.  Perl does not
attempt to verify POSIX compliance.  That means you can currently
successfully say "use POSIX",  and then later in your program you find
that your vendor has been lax and there's no usable C<ICANON> macro after
all.  This could be construed to be a bug.

=head1 FUNCTIONS

=over 8

=item C<_exit>

This is identical to the C function C<_exit()>.  It exits the program
immediately which means among other things buffered I/O is B<not> flushed.

Note that when using threads and in Linux this is B<not> a good way to
exit a thread because in Linux processes and threads are kind of the
same thing (Note: while this is the situation in early 2003 there are
projects under way to have threads with more POSIXly semantics in Linux).
If you want not to return from a thread, detach the thread.

=item C<abort>

This is identical to the C function C<abort()>.  It terminates the
process with a C<SIGABRT> signal unless caught by a signal handler or
if the handler does not return normally (it e.g.  does a C<longjmp>).

=item C<abs>

This is identical to Perl's builtin C<abs()> function, returning
the absolute value of its numerical argument.

=item C<access>

Determines the accessibility of a file.

	if( POSIX::access( "/", &POSIX::R_OK ) ){
		print "have read permission\n";
	}

Returns C<undef> on failure.  Note: do not use C<access()> for
security purposes.  Between the C<access()> call and the operation
you are preparing for the permissions might change: a classic
I<race condition>.

=item C<acos>

This is identical to the C function C<acos()>, returning
the arcus cosine of its numerical argument.  See also L<Math::Trig>.

=item C<acosh>

This is identical to the C function C<acosh()>, returning the
hyperbolic arcus cosine of its numerical argument [C99].  See also
L<Math::Trig>.

=item C<alarm>

This is identical to Perl's builtin C<alarm()> function,
either for arming or disarming the C<SIGARLM> timer.

=item C<asctime>

This is identical to the C function C<asctime()>.  It returns
a string of the form

	"Fri Jun  2 18:22:13 2000\n\0"

and it is called thusly

	$asctime = asctime($sec, $min, $hour, $mday, $mon,
			   $year, $wday, $yday, $isdst);

The C<$mon> is zero-based: January equals C<0>.  The C<$year> is
1900-based: 2001 equals C<101>.  C<$wday> and C<$yday> default to zero
(and are usually ignored anyway), and C<$isdst> defaults to -1.

=item C<asin>

This is identical to the C function C<asin()>, returning
the arcus sine of its numerical argument.  See also L<Math::Trig>.

=item C<asinh>

This is identical to the C function C<asinh()>, returning the
hyperbolic arcus sine of its numerical argument [C99].  See also
L<Math::Trig>.

=item C<assert>

Unimplemented, but you can use L<perlfunc/die> and the L<Carp> module
to achieve similar things.

=item C<atan>

This is identical to the C function C<atan()>, returning the
arcus tangent of its numerical argument.  See also L<Math::Trig>.

=item C<atanh>

This is identical to the C function C<atanh()>, returning the
hyperbolic arcus tangent of its numerical argument [C99].  See also
L<Math::Trig>.

=item C<atan2>

This is identical to Perl's builtin C<atan2()> function, returning
the arcus tangent defined by its two numerical arguments, the I<y>
coordinate and the I<x> coordinate.  See also L<Math::Trig>.

=item C<atexit>

Not implemented.  C<atexit()> is C-specific: use C<END {}> instead, see L<perlmod>.

=item C<atof>

Not implemented.  C<atof()> is C-specific.  Perl converts strings to numbers transparently.
If you need to force a scalar to a number, add a zero to it.

=item C<atoi>

Not implemented.  C<atoi()> is C-specific.  Perl converts strings to numbers transparently.
If you need to force a scalar to a number, add a zero to it.
If you need to have just the integer part, see L<perlfunc/int>.

=item C<atol>

Not implemented.  C<atol()> is C-specific.  Perl converts strings to numbers transparently.
If you need to force a scalar to a number, add a zero to it.
If you need to have just the integer part, see L<perlfunc/int>.

=item C<bsearch>

C<bsearch()> not supplied.  For doing binary search on wordlists,
see L<Search::Dict>.

=item C<calloc>

Not implemented.  C<calloc()> is C-specific.  Perl does memory management transparently.

=item C<cbrt>

The cube root [C99].

=item C<ceil>

This is identical to the C function C<ceil()>, returning the smallest
integer value greater than or equal to the given numerical argument.

=item C<chdir>

This is identical to Perl's builtin C<chdir()> function, allowing
one to change the working (default) directory, see L<perlfunc/chdir>.

=item C<chmod>

This is identical to Perl's builtin C<chmod()> function, allowing
one to change file and directory permissions, see L<perlfunc/chmod>.

=item C<chown>

This is identical to Perl's builtin C<chown()> function, allowing one
to change file and directory owners and groups, see L<perlfunc/chown>.

=item C<clearerr>

Not implemented.  Use the method C<IO::Handle::clearerr()> instead, to reset the error
state (if any) and EOF state (if any) of the given stream.

=item C<clock>

This is identical to the C function C<clock()>, returning the
amount of spent processor time in microseconds.

=item C<close>

Close the file.  This uses file descriptors such as those obtained by calling
C<POSIX::open>.

	$fd = POSIX::open( "foo", &POSIX::O_RDONLY );
	POSIX::close( $fd );

Returns C<undef> on failure.

See also L<perlfunc/close>.

=item C<closedir>

This is identical to Perl's builtin C<closedir()> function for closing
a directory handle, see L<perlfunc/closedir>.

=item C<cos>

This is identical to Perl's builtin C<cos()> function, for returning
the cosine of its numerical argument, see L<perlfunc/cos>.
See also L<Math::Trig>.

=item C<cosh>

This is identical to the C function C<cosh()>, for returning
the hyperbolic cosine of its numeric argument.  See also L<Math::Trig>.

=item C<copysign>

Returns C<x> but with the sign of C<y> [C99].

 $x_with_sign_of_y = POSIX::copysign($x, $y);

See also L</signbit>.

=item C<creat>

Create a new file.  This returns a file descriptor like the ones returned by
C<POSIX::open>.  Use C<POSIX::close> to close the file.

	$fd = POSIX::creat( "foo", 0611 );
	POSIX::close( $fd );

See also L<perlfunc/sysopen> and its C<O_CREAT> flag.

=item C<ctermid>

Generates the path name for the controlling terminal.

	$path = POSIX::ctermid();

=item C<ctime>

This is identical to the C function C<ctime()> and equivalent
to C<asctime(localtime(...))>, see L</asctime> and L</localtime>.

=item C<cuserid>

Get the login name of the owner of the current process.

	$name = POSIX::cuserid();

=item C<difftime>

This is identical to the C function C<difftime()>, for returning
the time difference (in seconds) between two times (as returned
by C<time()>), see L</time>.

=item C<div>

Not implemented.  C<div()> is C-specific, use L<perlfunc/int> on the usual C</> division and
the modulus C<%>.

=item C<dup>

This is similar to the C function C<dup()>, for duplicating a file
descriptor.

This uses file descriptors such as those obtained by calling
C<POSIX::open>.

Returns C<undef> on failure.

=item C<dup2>

This is similar to the C function C<dup2()>, for duplicating a file
descriptor to an another known file descriptor.

This uses file descriptors such as those obtained by calling
C<POSIX::open>.

Returns C<undef> on failure.

=item C<erf>

The error function [C99].

=item C<erfc>

The complementary error function [C99].

=item C<errno>

Returns the value of errno.

	$errno = POSIX::errno();

This identical to the numerical values of the C<$!>, see L<perlvar/$ERRNO>.

=item C<execl>

Not implemented.  C<execl()> is C-specific, see L<perlfunc/exec>.

=item C<execle>

Not implemented.  C<execle()> is C-specific, see L<perlfunc/exec>.

=item C<execlp>

Not implemented.  C<execlp()> is C-specific, see L<perlfunc/exec>.

=item C<execv>

Not implemented.  C<execv()> is C-specific, see L<perlfunc/exec>.

=item C<execve>

Not implemented.  C<execve()> is C-specific, see L<perlfunc/exec>.

=item C<execvp>

Not implemented.  C<execvp()> is C-specific, see L<perlfunc/exec>.

=item C<exit>

This is identical to Perl's builtin C<exit()> function for exiting the
program, see L<perlfunc/exit>.

=item C<exp>

This is identical to Perl's builtin C<exp()> function for
returning the exponent (I<e>-based) of the numerical argument,
see L<perlfunc/exp>.

=item C<expm1>

Equivalent to C<exp(x) - 1>, but more precise for small argument values [C99].

See also L</log1p>.

=item C<fabs>

This is identical to Perl's builtin C<abs()> function for returning
the absolute value of the numerical argument, see L<perlfunc/abs>.

=item C<fclose>

Not implemented.  Use method C<IO::Handle::close()> instead, or see L<perlfunc/close>.

=item C<fcntl>

This is identical to Perl's builtin C<fcntl()> function,
see L<perlfunc/fcntl>.

=item C<fdopen>

Not implemented.  Use method C<IO::Handle::new_from_fd()> instead, or see L<perlfunc/open>.

=item C<feof>

Not implemented.  Use method C<IO::Handle::eof()> instead, or see L<perlfunc/eof>.

=item C<ferror>

Not implemented.  Use method C<IO::Handle::error()> instead.

=item C<fflush>

Not implemented.  Use method C<IO::Handle::flush()> instead.
See also C<L<perlvar/$OUTPUT_AUTOFLUSH>>.

=item C<fgetc>

Not implemented.  Use method C<IO::Handle::getc()> instead, or see L<perlfunc/read>.

=item C<fgetpos>

Not implemented.  Use method C<IO::Seekable::getpos()> instead, or see L<perlfunc/seek>.

=item C<fgets>

Not implemented.  Use method C<IO::Handle::gets()> instead.  Similar to E<lt>E<gt>, also known
as L<perlfunc/readline>.

=item C<fileno>

Not implemented.  Use method C<IO::Handle::fileno()> instead, or see L<perlfunc/fileno>.

=item C<floor>

This is identical to the C function C<floor()>, returning the largest
integer value less than or equal to the numerical argument.

=item C<fdim>

"Positive difference", S<C<x - y>> if S<C<x E<gt> y>>, zero otherwise [C99].

=item C<fegetround>

Returns the current floating point rounding mode, one of

  FE_TONEAREST FE_TOWARDZERO FE_UPWARD FE_UPWARD

C<FE_TONEAREST> is like L</round>, C<FE_TOWARDZERO> is like L</trunc> [C99].

=item C<fesetround>

Sets the floating point rounding mode, see L</fegetround> [C99].

=item C<fma>

"Fused multiply-add", S<C<x * y + z>>, possibly faster (and less lossy)
than the explicit two operations [C99].

 my $fused = POSIX::fma($x, $y, $z);

=item C<fmax>

Maximum of C<x> and C<y>, except when either is C<NaN>, returns the other [C99].

 my $min = POSIX::fmax($x, $y);

=item C<fmin>

Minimum of C<x> and C<y>, except when either is C<NaN>, returns the other [C99].

 my $min = POSIX::fmin($x, $y);

=item C<fmod>

This is identical to the C function C<fmod()>.

	$r = fmod($x, $y);

It returns the remainder S<C<$r = $x - $n*$y>>, where S<C<$n = trunc($x/$y)>>.
The C<$r> has the same sign as C<$x> and magnitude (absolute value)
less than the magnitude of C<$y>.

=item C<fopen>

Not implemented.  Use method C<IO::File::open()> instead, or see L<perlfunc/open>.

=item C<fork>

This is identical to Perl's builtin C<fork()> function
for duplicating the current process, see L<perlfunc/fork>
and L<perlfork> if you are in Windows.

=item C<fpathconf>

Retrieves the value of a configurable limit on a file or directory.  This
uses file descriptors such as those obtained by calling C<POSIX::open>.

The following will determine the maximum length of the longest allowable
pathname on the filesystem which holds F</var/foo>.

	$fd = POSIX::open( "/var/foo", &POSIX::O_RDONLY );
	$path_max = POSIX::fpathconf($fd, &POSIX::_PC_PATH_MAX);

Returns C<undef> on failure.

=item C<fpclassify>

Returns one of

  FP_NORMAL FP_ZERO FP_SUBNORMAL FP_INFINITE FP_NAN

telling the class of the argument [C99].  C<FP_INFINITE> is positive
or negative infinity, C<FP_NAN> is not-a-number.  C<FP_SUBNORMAL>
means subnormal numbers (also known as denormals), very small numbers
with low precision. C<FP_ZERO> is zero.  C<FP_NORMAL> is all the rest.

=item C<fprintf>

Not implemented.  C<fprintf()> is C-specific, see L<perlfunc/printf> instead.

=item C<fputc>

Not implemented.  C<fputc()> is C-specific, see L<perlfunc/print> instead.

=item C<fputs>

Not implemented.  C<fputs()> is C-specific, see L<perlfunc/print> instead.

=item C<fread>

Not implemented.  C<fread()> is C-specific, see L<perlfunc/read> instead.

=item C<free>

Not implemented.  C<free()> is C-specific.  Perl does memory management transparently.

=item C<freopen>

Not implemented.  C<freopen()> is C-specific, see L<perlfunc/open> instead.

=item C<frexp>

Return the mantissa and exponent of a floating-point number.

	($mantissa, $exponent) = POSIX::frexp( 1.234e56 );

=item C<fscanf>

Not implemented.  C<fscanf()> is C-specific, use E<lt>E<gt> and regular expressions instead.

=item C<fseek>

Not implemented.  Use method C<IO::Seekable::seek()> instead, or see L<perlfunc/seek>.

=item C<fsetpos>

Not implemented.  Use method C<IO::Seekable::setpos()> instead, or seek L<perlfunc/seek>.

=item C<fstat>

Get file status.  This uses file descriptors such as those obtained by
calling C<POSIX::open>.  The data returned is identical to the data from
Perl's builtin C<stat> function.

	$fd = POSIX::open( "foo", &POSIX::O_RDONLY );
	@@stats = POSIX::fstat( $fd );

=item C<fsync>

Not implemented.  Use method C<IO::Handle::sync()> instead.

=item C<ftell>

Not implemented.  Use method C<IO::Seekable::tell()> instead, or see L<perlfunc/tell>.

=item C<fwrite>

Not implemented.  C<fwrite()> is C-specific, see L<perlfunc/print> instead.

=item C<getc>

This is identical to Perl's builtin C<getc()> function,
see L<perlfunc/getc>.

=item C<getchar>

Returns one character from STDIN.  Identical to Perl's C<getc()>,
see L<perlfunc/getc>.

=item C<getcwd>

Returns the name of the current working directory.
See also L<Cwd>.

=item C<getegid>

Returns the effective group identifier.  Similar to Perl' s builtin
variable C<$(>, see L<perlvar/$EGID>.

=item C<getenv>

Returns the value of the specified environment variable.
The same information is available through the C<%ENV> array.

=item C<geteuid>

Returns the effective user identifier.  Identical to Perl's builtin C<$E<gt>>
variable, see L<perlvar/$EUID>.

=item C<getgid>

Returns the user's real group identifier.  Similar to Perl's builtin
variable C<$)>, see L<perlvar/$GID>.

=item C<getgrgid>

This is identical to Perl's builtin C<getgrgid()> function for
returning group entries by group identifiers, see
L<perlfunc/getgrgid>.

=item C<getgrnam>

This is identical to Perl's builtin C<getgrnam()> function for
returning group entries by group names, see L<perlfunc/getgrnam>.

=item C<getgroups>

Returns the ids of the user's supplementary groups.  Similar to Perl's
builtin variable C<$)>, see L<perlvar/$GID>.

=item C<getlogin>

This is identical to Perl's builtin C<getlogin()> function for
returning the user name associated with the current session, see
L<perlfunc/getlogin>.

=item C<getpayload>

	use POSIX ':nan_payload';
	getpayload($var)

Returns the C<NaN> payload.

Note the API instability warning in L</setpayload>.

See L</nan> for more discussion about C<NaN>.

=item C<getpgrp>

This is identical to Perl's builtin C<getpgrp()> function for
returning the process group identifier of the current process, see
L<perlfunc/getpgrp>.

=item C<getpid>

Returns the process identifier.  Identical to Perl's builtin
variable C<$$>, see L<perlvar/$PID>.

=item C<getppid>

This is identical to Perl's builtin C<getppid()> function for
returning the process identifier of the parent process of the current
process , see L<perlfunc/getppid>.

=item C<getpwnam>

This is identical to Perl's builtin C<getpwnam()> function for
returning user entries by user names, see L<perlfunc/getpwnam>.

=item C<getpwuid>

This is identical to Perl's builtin C<getpwuid()> function for
returning user entries by user identifiers, see L<perlfunc/getpwuid>.

=item C<gets>

Returns one line from C<STDIN>, similar to E<lt>E<gt>, also known
as the C<readline()> function, see L<perlfunc/readline>.

B<NOTE>: if you have C programs that still use C<gets()>, be very
afraid.  The C<gets()> function is a source of endless grief because
it has no buffer overrun checks.  It should B<never> be used.  The
C<fgets()> function should be preferred instead.

=item C<getuid>

Returns the user's identifier.  Identical to Perl's builtin C<$E<lt>> variable,
see L<perlvar/$UID>.

=item C<gmtime>

This is identical to Perl's builtin C<gmtime()> function for
converting seconds since the epoch to a date in Greenwich Mean Time,
see L<perlfunc/gmtime>.

=item C<hypot>

Equivalent to C<S<sqrt(x * x + y * y)>> except more stable on very large
or very small arguments [C99].

=item C<ilogb>

Integer binary logarithm [C99]

For example C<ilogb(20)> is 4, as an integer.

See also L</logb>.

=item C<Inf>

The infinity as a constant:

   use POSIX qw(Inf);
   my $pos_inf = +Inf;  # Or just Inf.
   my $neg_inf = -Inf;

See also L</isinf>, and L</fpclassify>.

=item C<isalnum>

This function has been removed as of v5.24.  It was very similar to
matching against S<C<qr/ ^ [[:alnum:]]+ $ /x>>, which you should convert
to use instead.  See L<perlrecharclass/POSIX Character Classes>.

=item C<isalpha>

This function has been removed as of v5.24.  It was very similar to
matching against S<C<qr/ ^ [[:alpha:]]+ $ /x>>, which you should convert
to use instead.  See L<perlrecharclass/POSIX Character Classes>.

=item C<isatty>

Returns a boolean indicating whether the specified filehandle is connected
to a tty.  Similar to the C<-t> operator, see L<perlfunc/-X>.

=item C<iscntrl>

This function has been removed as of v5.24.  It was very similar to
matching against S<C<qr/ ^ [[:cntrl:]]+ $ /x>>, which you should convert
to use instead.  See L<perlrecharclass/POSIX Character Classes>.

=item C<isdigit>

This function has been removed as of v5.24.  It was very similar to
matching against S<C<qr/ ^ [[:digit:]]+ $ /x>>, which you should convert
to use instead.  See L<perlrecharclass/POSIX Character Classes>.

=item C<isfinite>

Returns true if the argument is a finite number (that is, not an
infinity, or the not-a-number) [C99].

See also L</isinf>, L</isnan>, and L</fpclassify>.

=item C<isgraph>

This function has been removed as of v5.24.  It was very similar to
matching against S<C<qr/ ^ [[:graph:]]+ $ /x>>, which you should convert
to use instead.  See L<perlrecharclass/POSIX Character Classes>.

=item C<isgreater>

(Also C<isgreaterequal>, C<isless>, C<islessequal>, C<islessgreater>,
C<isunordered>)

Floating point comparisons which handle the C<NaN> [C99].

=item C<isinf>

Returns true if the argument is an infinity (positive or negative) [C99].

See also L</Inf>, L</isnan>, L</isfinite>, and L</fpclassify>.

=item C<islower>

This function has been removed as of v5.24.  It was very similar to
matching against S<C<qr/ ^ [[:lower:]]+ $ /x>>, which you should convert
to use instead.  See L<perlrecharclass/POSIX Character Classes>.

=item C<isnan>

Returns true if the argument is C<NaN> (not-a-number) [C99].

Note that you cannot test for "C<NaN>-ness" with

   $x == $x

since the C<NaN> is not equivalent to anything, B<including itself>.

See also L</nan>, L</NaN>, L</isinf>, and L</fpclassify>.

=item C<isnormal>

Returns true if the argument is normal (that is, not a subnormal/denormal,
and not an infinity, or a not-a-number) [C99].

See also L</isfinite>, and L</fpclassify>.

=item C<isprint>

This function has been removed as of v5.24.  It was very similar to
matching against S<C<qr/ ^ [[:print:]]+ $ /x>>, which you should convert
to use instead.  See L<perlrecharclass/POSIX Character Classes>.

=item C<ispunct>

This function has been removed as of v5.24.  It was very similar to
matching against S<C<qr/ ^ [[:punct:]]+ $ /x>>, which you should convert
to use instead.  See L<perlrecharclass/POSIX Character Classes>.

=item C<issignaling>

	use POSIX ':nan_payload';
	issignaling($var, $payload)

Return true if the argument is a I<signaling> NaN.

Note the API instability warning in L</setpayload>.

See L</nan> for more discussion about C<NaN>.

=item C<isspace>

This function has been removed as of v5.24.  It was very similar to
matching against S<C<qr/ ^ [[:space:]]+ $ /x>>, which you should convert
to use instead.  See L<perlrecharclass/POSIX Character Classes>.

=item C<isupper>

This function has been removed as of v5.24.  It was very similar to
matching against S<C<qr/ ^ [[:upper:]]+ $ /x>>, which you should convert
to use instead.  See L<perlrecharclass/POSIX Character Classes>.

=item C<isxdigit>

This function has been removed as of v5.24.  It was very similar to
matching against S<C<qr/ ^ [[:xdigit:]]+ $ /x>>, which you should
convert to use instead.  See L<perlrecharclass/POSIX Character Classes>.

=item C<j0>

=item C<j1>

=item C<jn>

=item C<y0>

=item C<y1>

=item C<yn>

The Bessel function of the first kind of the order zero.

=item C<kill>

This is identical to Perl's builtin C<kill()> function for sending
signals to processes (often to terminate them), see L<perlfunc/kill>.

=item C<labs>

Not implemented.  (For returning absolute values of long integers.)
C<labs()> is C-specific, see L<perlfunc/abs> instead.

=item C<lchown>

This is identical to the C function, except the order of arguments is
consistent with Perl's builtin C<chown()> with the added restriction
of only one path, not a list of paths.  Does the same thing as the
C<chown()> function but changes the owner of a symbolic link instead
of the file the symbolic link points to.

 POSIX::lchown($uid, $gid, $file_path);

=item C<ldexp>

This is identical to the C function C<ldexp()>
for multiplying floating point numbers with powers of two.

	$x_quadrupled = POSIX::ldexp($x, 2);

=item C<ldiv>

Not implemented.  (For computing dividends of long integers.)
C<ldiv()> is C-specific, use C</> and C<int()> instead.

=item C<lgamma>

The logarithm of the Gamma function [C99].

See also L</tgamma>.

=item C<log1p>

Equivalent to S<C<log(1 + x)>>, but more stable results for small argument
values [C99].

=item C<log2>

Logarithm base two [C99].

See also L</expm1>.

=item C<logb>

Integer binary logarithm [C99].

For example C<logb(20)> is 4, as a floating point number.

See also L</ilogb>.

=item C<link>

This is identical to Perl's builtin C<link()> function
for creating hard links into files, see L<perlfunc/link>.

=item C<localeconv>

Get numeric formatting information.  Returns a reference to a hash
containing the current underlying locale's formatting values.  Users of this function
should also read L<perllocale>, which provides a comprehensive
discussion of Perl locale handling, including
L<a section devoted to this function|perllocale/The localeconv function>.

Here is how to query the database for the B<de> (Deutsch or German) locale.

	my $loc = POSIX::setlocale( &POSIX::LC_ALL, "de" );
	print "Locale: \"$loc\"\n";
	my $lconv = POSIX::localeconv();
	foreach my $property (qw(
		decimal_point
		thousands_sep
		grouping
		int_curr_symbol
		currency_symbol
		mon_decimal_point
		mon_thousands_sep
		mon_grouping
		positive_sign
		negative_sign
		int_frac_digits
		frac_digits
		p_cs_precedes
		p_sep_by_space
		n_cs_precedes
		n_sep_by_space
		p_sign_posn
		n_sign_posn
		int_p_cs_precedes
		int_p_sep_by_space
		int_n_cs_precedes
		int_n_sep_by_space
		int_p_sign_posn
		int_n_sign_posn
	))
	{
		printf qq(%s: "%s",\n),
			$property, $lconv->{$property};
	}

The members whose names begin with C<int_p_> and C<int_n_> were added by
POSIX.1-2008 and are only available on systems that support them.

=item C<localtime>

This is identical to Perl's builtin C<localtime()> function for
converting seconds since the epoch to a date see L<perlfunc/localtime>.

=item C<log>

This is identical to Perl's builtin C<log()> function,
returning the natural (I<e>-based) logarithm of the numerical argument,
see L<perlfunc/log>.

=item C<log10>

This is identical to the C function C<log10()>,
returning the 10-base logarithm of the numerical argument.
You can also use

    sub log10 { log($_[0]) / log(10) }

or

    sub log10 { log($_[0]) / 2.30258509299405 }

or

    sub log10 { log($_[0]) * 0.434294481903252 }

=item C<longjmp>

Not implemented.  C<longjmp()> is C-specific: use L<perlfunc/die> instead.

=item C<lseek>

Move the file's read/write position.  This uses file descriptors such as
those obtained by calling C<POSIX::open>.

	$fd = POSIX::open( "foo", &POSIX::O_RDONLY );
	$off_t = POSIX::lseek( $fd, 0, &POSIX::SEEK_SET );

Returns C<undef> on failure.

=item C<lrint>

Depending on the current floating point rounding mode, rounds the
argument either toward nearest (like L</round>), toward zero (like
L</trunc>), downward (toward negative infinity), or upward (toward
positive infinity) [C99].

For the rounding mode, see L</fegetround>.

=item C<lround>

Like L</round>, but as integer, as opposed to floating point [C99].

See also L</ceil>, L</floor>, L</trunc>.

Owing to an oversight, this is not currently exported by default, or as part of
the C<:math_h_c99> export tag; importing it must therefore be done by explicit
name. This will be changed in Perl 5.26.

=item C<malloc>

Not implemented.  C<malloc()> is C-specific.  Perl does memory management transparently.

=item C<mblen>

This is identical to the C function C<mblen()>.

Core Perl does not have any support for the wide and multibyte
characters of the C standards, except under UTF-8 locales, so this might
be a rather useless function.

However, Perl supports Unicode, see L<perluniintro>.

=item C<mbstowcs>

This is identical to the C function C<mbstowcs()>.

See L</mblen>.

=item C<mbtowc>

This is identical to the C function C<mbtowc()>.

See L</mblen>.

=item C<memchr>

Not implemented.  C<memchr()> is C-specific, see L<perlfunc/index> instead.

=item C<memcmp>

Not implemented.  C<memcmp()> is C-specific, use C<eq> instead, see L<perlop>.

=item C<memcpy>

Not implemented.  C<memcpy()> is C-specific, use C<=>, see L<perlop>, or see L<perlfunc/substr>.

=item C<memmove>

Not implemented.  C<memmove()> is C-specific, use C<=>, see L<perlop>, or see L<perlfunc/substr>.

=item C<memset>

Not implemented.  C<memset()> is C-specific, use C<x> instead, see L<perlop>.

=item C<mkdir>

This is identical to Perl's builtin C<mkdir()> function
for creating directories, see L<perlfunc/mkdir>.

=item C<mkfifo>

This is similar to the C function C<mkfifo()> for creating
FIFO special files.

	if (mkfifo($path, $mode)) { ....

Returns C<undef> on failure.  The C<$mode> is similar to the
mode of C<mkdir()>, see L<perlfunc/mkdir>, though for C<mkfifo>
you B<must> specify the C<$mode>.

=item C<mktime>

Convert date/time info to a calendar time.

Synopsis:

	mktime(sec, min, hour, mday, mon, year, wday = 0,
	       yday = 0, isdst = -1)

The month (C<mon>), weekday (C<wday>), and yearday (C<yday>) begin at zero,
I<i.e.>, January is 0, not 1; Sunday is 0, not 1; January 1st is 0, not 1.  The
year (C<year>) is given in years since 1900; I<i.e.>, the year 1995 is 95; the
year 2001 is 101.  Consult your system's C<mktime()> manpage for details
about these and the other arguments.

Calendar time for December 12, 1995, at 10:30 am.

	$time_t = POSIX::mktime( 0, 30, 10, 12, 11, 95 );
	print "Date = ", POSIX::ctime($time_t);

Returns C<undef> on failure.

=item C<modf>

Return the integral and fractional parts of a floating-point number.

	($fractional, $integral) = POSIX::modf( 3.14 );

See also L</round>.

=item C<NaN>

The not-a-number as a constant:

   use POSIX qw(NaN);
   my $nan = NaN;

See also L</nan>, C</isnan>, and L</fpclassify>.

=item C<nan>

   my $nan = nan();

Returns C<NaN>, not-a-number [C99].

The returned NaN is always a I<quiet> NaN, as opposed to I<signaling>.

With an argument, can be used to generate a NaN with I<payload>.
The argument is first interpreted as a floating point number,
but then any fractional parts are truncated (towards zero),
and the value is interpreted as an unsigned integer.
The bits of this integer are stored in the unused bits of the NaN.

The result has a dual nature: it is a NaN, but it also carries
the integer inside it.  The integer can be retrieved with L</getpayload>.
Note, though, that the payload is not propagated, not even on copies,
and definitely not in arithmetic operations.

How many bits fit in the NaN depends on what kind of floating points
are being used, but on the most common platforms (64-bit IEEE 754,
or the x86 80-bit long doubles) there are 51 and 61 bits available,
respectively.  (There would be 52 and 62, but the quiet/signaling
bit of NaNs takes away one.)  However, because of the floating-point-to-
integer-and-back conversions, please test carefully whether you get back
what you put in.  If your integers are only 32 bits wide, you probably
should not rely on more than 32 bits of payload.

Whether a "signaling" NaN is in any way different from a "quiet" NaN,
depends on the platform.  Also note that the payload of the default
NaN (no argument to nan()) is not necessarily zero, use C<setpayload>
to explicitly set the payload.  On some platforms like the 32-bit x86,
(unless using the 80-bit long doubles) the signaling bit is not supported
at all.

See also L</isnan>, L</NaN>, L</setpayload> and L</issignaling>.

=item C<nearbyint>

Returns the nearest integer to the argument, according to the current
rounding mode (see L</fegetround>) [C99].

=item C<nextafter>

Returns the next representable floating point number after C<x> in the
direction of C<y> [C99].

 my $nextafter = POSIX::nextafter($x, $y);

Like L</nexttoward>, but potentially less accurate.

=item C<nexttoward>

Returns the next representable floating point number after C<x> in the
direction of C<y> [C99].

 my $nexttoward = POSIX::nexttoward($x, $y);

Like L</nextafter>, but potentially more accurate.

=item C<nice>

This is similar to the C function C<nice()>, for changing
the scheduling preference of the current process.  Positive
arguments mean a more polite process, negative values a more
needy process.  Normal (non-root) user processes can only change towards
being more polite.

Returns C<undef> on failure.

=item C<offsetof>

Not implemented.  C<offsetof()> is C-specific, you probably want to see L<perlfunc/pack> instead.

=item C<open>

Open a file for reading for writing.  This returns file descriptors, not
Perl filehandles.  Use C<POSIX::close> to close the file.

Open a file read-only with mode 0666.

	$fd = POSIX::open( "foo" );

Open a file for read and write.

	$fd = POSIX::open( "foo", &POSIX::O_RDWR );

Open a file for write, with truncation.

	$fd = POSIX::open(
		"foo", &POSIX::O_WRONLY | &POSIX::O_TRUNC
	);

Create a new file with mode 0640.  Set up the file for writing.

	$fd = POSIX::open(
		"foo", &POSIX::O_CREAT | &POSIX::O_WRONLY, 0640
	);

Returns C<undef> on failure.

See also L<perlfunc/sysopen>.

=item C<opendir>

Open a directory for reading.

	$dir = POSIX::opendir( "/var" );
	@@files = POSIX::readdir( $dir );
	POSIX::closedir( $dir );

Returns C<undef> on failure.

=item C<pathconf>

Retrieves the value of a configurable limit on a file or directory.

The following will determine the maximum length of the longest allowable
pathname on the filesystem which holds C</var>.

	$path_max = POSIX::pathconf( "/var",
				      &POSIX::_PC_PATH_MAX );

Returns C<undef> on failure.

=item C<pause>

This is similar to the C function C<pause()>, which suspends
the execution of the current process until a signal is received.

Returns C<undef> on failure.

=item C<perror>

This is identical to the C function C<perror()>, which outputs to the
standard error stream the specified message followed by C<": "> and the
current error string.  Use the C<warn()> function and the C<$!>
variable instead, see L<perlfunc/warn> and L<perlvar/$ERRNO>.

=item C<pipe>

Create an interprocess channel.  This returns file descriptors like those
returned by C<POSIX::open>.

	my ($read, $write) = POSIX::pipe();
	POSIX::write( $write, "hello", 5 );
	POSIX::read( $read, $buf, 5 );

See also L<perlfunc/pipe>.

=item C<pow>

Computes C<$x> raised to the power C<$exponent>.

	$ret = POSIX::pow( $x, $exponent );

You can also use the C<**> operator, see L<perlop>.

=item C<printf>

Formats and prints the specified arguments to C<STDOUT>.
See also L<perlfunc/printf>.

=item C<putc>

Not implemented.  C<putc()> is C-specific, see L<perlfunc/print> instead.

=item C<putchar>

Not implemented.  C<putchar()> is C-specific, see L<perlfunc/print> instead.

=item C<puts>

Not implemented.  C<puts()> is C-specific, see L<perlfunc/print> instead.

=item C<qsort>

Not implemented.  C<qsort()> is C-specific, see L<perlfunc/sort> instead.

=item C<raise>

Sends the specified signal to the current process.
See also L<perlfunc/kill> and the C<$$> in L<perlvar/$PID>.

=item C<rand>

Not implemented.  C<rand()> is non-portable, see L<perlfunc/rand> instead.

=item C<read>

Read from a file.  This uses file descriptors such as those obtained by
calling C<POSIX::open>.  If the buffer C<$buf> is not large enough for the
read then Perl will extend it to make room for the request.

	$fd = POSIX::open( "foo", &POSIX::O_RDONLY );
	$bytes = POSIX::read( $fd, $buf, 3 );

Returns C<undef> on failure.

See also L<perlfunc/sysread>.

=item C<readdir>

This is identical to Perl's builtin C<readdir()> function
for reading directory entries, see L<perlfunc/readdir>.

=item C<realloc>

Not implemented.  C<realloc()> is C-specific.  Perl does memory management transparently.

=item C<remainder>

Given C<x> and C<y>, returns the value S<C<x - n*y>>, where C<n> is the integer
closest to C<x>/C<y>. [C99]

 my $remainder = POSIX::remainder($x, $y)

See also L</remquo>.

=item C<remove>

This is identical to Perl's builtin C<unlink()> function
for removing files, see L<perlfunc/unlink>.

=item C<remquo>

Like L</remainder> but also returns the low-order bits of the quotient (n)
[C99]

(This is quite esoteric interface, mainly used to implement numerical
algorithms.)

=item C<rename>

This is identical to Perl's builtin C<rename()> function
for renaming files, see L<perlfunc/rename>.

=item C<rewind>

Seeks to the beginning of the file.

=item C<rewinddir>

This is identical to Perl's builtin C<rewinddir()> function for
rewinding directory entry streams, see L<perlfunc/rewinddir>.

=item C<rint>

Identical to L</lrint>.

=item C<rmdir>

This is identical to Perl's builtin C<rmdir()> function
for removing (empty) directories, see L<perlfunc/rmdir>.

=item C<round>

Returns the integer (but still as floating point) nearest to the
argument [C99].

See also L</ceil>, L</floor>, L</lround>, L</modf>, and L</trunc>.

=item C<scalbn>

Returns S<C<x * 2**y>> [C99].

See also L</frexp> and L</ldexp>.

=item C<scanf>

Not implemented.  C<scanf()> is C-specific, use E<lt>E<gt> and regular expressions instead,
see L<perlre>.

=item C<setgid>

Sets the real group identifier and the effective group identifier for
this process.  Similar to assigning a value to the Perl's builtin
C<$)> variable, see L<perlvar/$EGID>, except that the latter
will change only the real user identifier, and that the setgid()
uses only a single numeric argument, as opposed to a space-separated
list of numbers.

=item C<setjmp>

Not implemented.  C<setjmp()> is C-specific: use C<eval {}> instead,
see L<perlfunc/eval>.

=item C<setlocale>

WARNING!  Do NOT use this function in a L<thread|threads>.  The locale
will change in all other threads at the same time, and should your
thread get paused by the operating system, and another started, that
thread will not have the locale it is expecting.  On some platforms,
there can be a race leading to segfaults if two threads call this
function nearly simultaneously.

Modifies and queries the program's underlying locale.  Users of this
function should read L<perllocale>, whch provides a comprehensive
discussion of Perl locale handling, knowledge of which is necessary to
properly use this function.  It contains
L<a section devoted to this function|perllocale/The setlocale function>.
The discussion here is merely a summary reference for C<setlocale()>.
Note that Perl itself is almost entirely unaffected by the locale
except within the scope of S<C<"use locale">>.  (Exceptions are listed
in L<perllocale/Not within the scope of "use locale">.)

The following examples assume

	use POSIX qw(setlocale LC_ALL LC_CTYPE);

has been issued.

The following will set the traditional UNIX system locale behavior
(the second argument C<"C">).

	$loc = setlocale( LC_ALL, "C" );

The following will query the current C<LC_CTYPE> category.  (No second
argument means 'query'.)

	$loc = setlocale( LC_CTYPE );

The following will set the C<LC_CTYPE> behaviour according to the locale
environment variables (the second argument C<"">).
Please see your system's C<setlocale(3)> documentation for the locale
environment variables' meaning or consult L<perllocale>.

	$loc = setlocale( LC_CTYPE, "" );

The following will set the C<LC_COLLATE> behaviour to Argentinian
Spanish. B<NOTE>: The naming and availability of locales depends on
your operating system. Please consult L<perllocale> for how to find
out which locales are available in your system.

	$loc = setlocale( LC_COLLATE, "es_AR.ISO8859-1" );

=item C<setpayload>

	use POSIX ':nan_payload';
	setpayload($var, $payload);

Sets the C<NaN> payload of var.

NOTE: the NaN payload APIs are based on the latest (as of June 2015)
proposed ISO C interfaces, but they are not yet a standard.  Things
may change.

See L</nan> for more discussion about C<NaN>.

See also L</setpayloadsig>, L</isnan>, L</getpayload>, and L</issignaling>.

=item C<setpayloadsig>

	use POSIX ':nan_payload';
	setpayloadsig($var, $payload);

Like L</setpayload> but also makes the NaN I<signaling>.

Depending on the platform the NaN may or may not behave differently.

Note the API instability warning in L</setpayload>.

Note that because how the floating point formats work out, on the most
common platforms signaling payload of zero is best avoided,
since it might end up being identical to C<+Inf>.

See also L</nan>, L</isnan>, L</getpayload>, and L</issignaling>.

=item C<setpgid>

This is similar to the C function C<setpgid()> for
setting the process group identifier of the current process.

Returns C<undef> on failure.

=item C<setsid>

This is identical to the C function C<setsid()> for
setting the session identifier of the current process.

=item C<setuid>

Sets the real user identifier and the effective user identifier for
this process.  Similar to assigning a value to the Perl's builtin
C<$E<lt>> variable, see L<perlvar/$UID>, except that the latter
will change only the real user identifier.

=item C<sigaction>

Detailed signal management.  This uses C<POSIX::SigAction> objects for
the C<action> and C<oldaction> arguments (the oldaction can also be
just a hash reference).  Consult your system's C<sigaction> manpage
for details, see also C<POSIX::SigRt>.

Synopsis:

	sigaction(signal, action, oldaction = 0)

Returns C<undef> on failure.  The C<signal> must be a number (like
C<SIGHUP>), not a string (like C<"SIGHUP">), though Perl does try hard
to understand you.

If you use the C<SA_SIGINFO> flag, the signal handler will in addition to
the first argument, the signal name, also receive a second argument, a
hash reference, inside which are the following keys with the following
semantics, as defined by POSIX/SUSv3:

    signo       the signal number
    errno       the error number
    code        if this is zero or less, the signal was sent by
                a user process and the uid and pid make sense,
                otherwise the signal was sent by the kernel

The constants for specific C<code> values can be imported individually
or using the C<:signal_h_si_code> tag.

The following are also defined by POSIX/SUSv3, but unfortunately
not very widely implemented:

    pid         the process id generating the signal
    uid         the uid of the process id generating the signal
    status      exit value or signal for SIGCHLD
    band        band event for SIGPOLL
    addr        address of faulting instruction or memory
                reference for SIGILL, SIGFPE, SIGSEGV or SIGBUS

A third argument is also passed to the handler, which contains a copy
of the raw binary contents of the C<siginfo> structure: if a system has
some non-POSIX fields, this third argument is where to C<unpack()> them
from.

Note that not all C<siginfo> values make sense simultaneously (some are
valid only for certain signals, for example), and not all values make
sense from Perl perspective, you should to consult your system's
C<sigaction> and possibly also C<siginfo> documentation.

=item C<siglongjmp>

Not implemented.  C<siglongjmp()> is C-specific: use L<perlfunc/die> instead.

=item C<signbit>

Returns zero for positive arguments, non-zero for negative arguments [C99].

=item C<sigpending>

Examine signals that are blocked and pending.  This uses C<POSIX::SigSet>
objects for the C<sigset> argument.  Consult your system's C<sigpending>
manpage for details.

Synopsis:

	sigpending(sigset)

Returns C<undef> on failure.

=item C<sigprocmask>

Change and/or examine calling process's signal mask.  This uses
C<POSIX::SigSet> objects for the C<sigset> and C<oldsigset> arguments.
Consult your system's C<sigprocmask> manpage for details.

Synopsis:

	sigprocmask(how, sigset, oldsigset = 0)

Returns C<undef> on failure.

Note that you can't reliably block or unblock a signal from its own signal
handler if you're using safe signals. Other signals can be blocked or unblocked
reliably.

=item C<sigsetjmp>

Not implemented.  C<sigsetjmp()> is C-specific: use C<eval {}> instead,
see L<perlfunc/eval>.

=item C<sigsuspend>

Install a signal mask and suspend process until signal arrives.  This uses
C<POSIX::SigSet> objects for the C<signal_mask> argument.  Consult your
system's C<sigsuspend> manpage for details.

Synopsis:

	sigsuspend(signal_mask)

Returns C<undef> on failure.

=item C<sin>

This is identical to Perl's builtin C<sin()> function
for returning the sine of the numerical argument,
see L<perlfunc/sin>.  See also L<Math::Trig>.

=item C<sinh>

This is identical to the C function C<sinh()>
for returning the hyperbolic sine of the numerical argument.
See also L<Math::Trig>.

=item C<sleep>

This is functionally identical to Perl's builtin C<sleep()> function
for suspending the execution of the current for process for certain
number of seconds, see L<perlfunc/sleep>.  There is one significant
difference, however: C<POSIX::sleep()> returns the number of
B<unslept> seconds, while the C<CORE::sleep()> returns the
number of slept seconds.

=item C<sprintf>

This is similar to Perl's builtin C<sprintf()> function
for returning a string that has the arguments formatted as requested,
see L<perlfunc/sprintf>.

=item C<sqrt>

This is identical to Perl's builtin C<sqrt()> function.
for returning the square root of the numerical argument,
see L<perlfunc/sqrt>.

=item C<srand>

Give a seed the pseudorandom number generator, see L<perlfunc/srand>.

=item C<sscanf>

Not implemented.  C<sscanf()> is C-specific, use regular expressions instead,
see L<perlre>.

=item C<stat>

This is identical to Perl's builtin C<stat()> function
for returning information about files and directories.

=item C<strcat>

Not implemented.  C<strcat()> is C-specific, use C<.=> instead, see L<perlop>.

=item C<strchr>

Not implemented.  C<strchr()> is C-specific, see L<perlfunc/index> instead.

=item C<strcmp>

Not implemented.  C<strcmp()> is C-specific, use C<eq> or C<cmp> instead, see L<perlop>.

=item C<strcoll>

This is identical to the C function C<strcoll()>
for collating (comparing) strings transformed using
the C<strxfrm()> function.  Not really needed since
Perl can do this transparently, see L<perllocale>.

=item C<strcpy>

Not implemented.  C<strcpy()> is C-specific, use C<=> instead, see L<perlop>.

=item C<strcspn>

Not implemented.  C<strcspn()> is C-specific, use regular expressions instead,
see L<perlre>.

=item C<strerror>

Returns the error string for the specified errno.
Identical to the string form of C<$!>, see L<perlvar/$ERRNO>.

=item C<strftime>

Convert date and time information to string.  Returns the string.

Synopsis:

	strftime(fmt, sec, min, hour, mday, mon, year,
		 wday = -1, yday = -1, isdst = -1)

The month (C<mon>), weekday (C<wday>), and yearday (C<yday>) begin at zero,
I<i.e.>, January is 0, not 1; Sunday is 0, not 1; January 1st is 0, not 1.  The
year (C<year>) is given in years since 1900, I<i.e.>, the year 1995 is 95; the
year 2001 is 101.  Consult your system's C<strftime()> manpage for details
about these and the other arguments.

If you want your code to be portable, your format (C<fmt>) argument
should use only the conversion specifiers defined by the ANSI C
standard (C89, to play safe).  These are C<aAbBcdHIjmMpSUwWxXyYZ%>.
But even then, the B<results> of some of the conversion specifiers are
non-portable.  For example, the specifiers C<aAbBcpZ> change according
to the locale settings of the user, and both how to set locales (the
locale names) and what output to expect are non-standard.
The specifier C<c> changes according to the timezone settings of the
user and the timezone computation rules of the operating system.
The C<Z> specifier is notoriously unportable since the names of
timezones are non-standard. Sticking to the numeric specifiers is the
safest route.

The given arguments are made consistent as though by calling
C<mktime()> before calling your system's C<strftime()> function,
except that the C<isdst> value is not affected.

The string for Tuesday, December 12, 1995.

	$str = POSIX::strftime( "%A, %B %d, %Y",
				 0, 0, 0, 12, 11, 95, 2 );
	print "$str\n";

=item C<strlen>

Not implemented.  C<strlen()> is C-specific, use C<length()> instead, see L<perlfunc/length>.

=item C<strncat>

Not implemented.  C<strncat()> is C-specific, use C<.=> instead, see L<perlop>.

=item C<strncmp>

Not implemented.  C<strncmp()> is C-specific, use C<eq> instead, see L<perlop>.

=item C<strncpy>

Not implemented.  C<strncpy()> is C-specific, use C<=> instead, see L<perlop>.

=item C<strpbrk>

Not implemented.  C<strpbrk()> is C-specific, use regular expressions instead,
see L<perlre>.

=item C<strrchr>

Not implemented.  C<strrchr()> is C-specific, see L<perlfunc/rindex> instead.

=item C<strspn>

Not implemented.  C<strspn()> is C-specific, use regular expressions instead,
see L<perlre>.

=item C<strstr>

This is identical to Perl's builtin C<index()> function,
see L<perlfunc/index>.

=item C<strtod>

String to double translation. Returns the parsed number and the number
of characters in the unparsed portion of the string.  Truly
POSIX-compliant systems set C<$!> (C<$ERRNO>) to indicate a translation
error, so clear C<$!> before calling C<strtod>.  However, non-POSIX systems
may not check for overflow, and therefore will never set C<$!>.

C<strtod> respects any POSIX C<setlocale()> C<LC_TIME> settings,
regardless of whether or not it is called from Perl code that is within
the scope of S<C<use locale>>.

To parse a string C<$str> as a floating point number use

    $! = 0;
    ($num, $n_unparsed) = POSIX::strtod($str);

The second returned item and C<$!> can be used to check for valid input:

    if (($str eq '') || ($n_unparsed != 0) || $!) {
        die "Non-numeric input $str" . ($! ? ": $!\n" : "\n");
    }

When called in a scalar context C<strtod> returns the parsed number.

=item C<strtok>

Not implemented.  C<strtok()> is C-specific, use regular expressions instead, see
L<perlre>, or L<perlfunc/split>.

=item C<strtol>

String to (long) integer translation.  Returns the parsed number and
the number of characters in the unparsed portion of the string.  Truly
POSIX-compliant systems set C<$!> (C<$ERRNO>) to indicate a translation
error, so clear C<$!> before calling C<strtol>.  However, non-POSIX systems
may not check for overflow, and therefore will never set C<$!>.

C<strtol> should respect any POSIX I<setlocale()> settings.

To parse a string C<$str> as a number in some base C<$base> use

    $! = 0;
    ($num, $n_unparsed) = POSIX::strtol($str, $base);

The base should be zero or between 2 and 36, inclusive.  When the base
is zero or omitted C<strtol> will use the string itself to determine the
base: a leading "0x" or "0X" means hexadecimal; a leading "0" means
octal; any other leading characters mean decimal.  Thus, "1234" is
parsed as a decimal number, "01234" as an octal number, and "0x1234"
as a hexadecimal number.

The second returned item and C<$!> can be used to check for valid input:

    if (($str eq '') || ($n_unparsed != 0) || !$!) {
        die "Non-numeric input $str" . $! ? ": $!\n" : "\n";
    }

When called in a scalar context C<strtol> returns the parsed number.

=item C<strtold>

Like L</strtod> but for long doubles.  Defined only if the
system supports long doubles.

=item C<strtoul>

String to unsigned (long) integer translation.  C<strtoul()> is identical
to C<strtol()> except that C<strtoul()> only parses unsigned integers.  See
L</strtol> for details.

Note: Some vendors supply C<strtod()> and C<strtol()> but not C<strtoul()>.
Other vendors that do supply C<strtoul()> parse "-1" as a valid value.

=item C<strxfrm>

String transformation.  Returns the transformed string.

	$dst = POSIX::strxfrm( $src );

Used in conjunction with the C<strcoll()> function, see L</strcoll>.

Not really needed since Perl can do this transparently, see
L<perllocale>.

=item C<sysconf>

Retrieves values of system configurable variables.

The following will get the machine's clock speed.

	$clock_ticks = POSIX::sysconf( &POSIX::_SC_CLK_TCK );

Returns C<undef> on failure.

=item C<system>

This is identical to Perl's builtin C<system()> function, see
L<perlfunc/system>.

=item C<tan>

This is identical to the C function C<tan()>, returning the
tangent of the numerical argument.  See also L<Math::Trig>.

=item C<tanh>

This is identical to the C function C<tanh()>, returning the
hyperbolic tangent of the numerical argument.   See also L<Math::Trig>.

=item C<tcdrain>

This is similar to the C function C<tcdrain()> for draining
the output queue of its argument stream.

Returns C<undef> on failure.

=item C<tcflow>

This is similar to the C function C<tcflow()> for controlling
the flow of its argument stream.

Returns C<undef> on failure.

=item C<tcflush>

This is similar to the C function C<tcflush()> for flushing
the I/O buffers of its argument stream.

Returns C<undef> on failure.

=item C<tcgetpgrp>

This is identical to the C function C<tcgetpgrp()> for returning the
process group identifier of the foreground process group of the controlling
terminal.

=item C<tcsendbreak>

This is similar to the C function C<tcsendbreak()> for sending
a break on its argument stream.

Returns C<undef> on failure.

=item C<tcsetpgrp>

This is similar to the C function C<tcsetpgrp()> for setting the
process group identifier of the foreground process group of the controlling
terminal.

Returns C<undef> on failure.

=item C<tgamma>

The Gamma function [C99].

See also L</lgamma>.

=item C<time>

This is identical to Perl's builtin C<time()> function
for returning the number of seconds since the epoch
(whatever it is for the system), see L<perlfunc/time>.

=item C<times>

The C<times()> function returns elapsed realtime since some point in the past
(such as system startup), user and system times for this process, and user
and system times used by child processes.  All times are returned in clock
ticks.

    ($realtime, $user, $system, $cuser, $csystem)
	= POSIX::times();

Note: Perl's builtin C<times()> function returns four values, measured in
seconds.

=item C<tmpfile>

Not implemented.  Use method C<IO::File::new_tmpfile()> instead, or see L<File::Temp>.

=item C<tmpnam>

Returns a name for a temporary file.

	$tmpfile = POSIX::tmpnam();

For security reasons, which are probably detailed in your system's
documentation for the C library C<tmpnam()> function, this interface
should not be used; instead see L<File::Temp>.

=item C<tolower>

This is identical to the C function, except that it can apply to a single
character or to a whole string, and currently operates as if the locale
always is "C".  Consider using the C<lc()> function, see L<perlfunc/lc>,
see L<perlfunc/lc>, or the equivalent C<\L> operator inside doublequotish
strings.

=item C<toupper>

This is similar to the C function, except that it can apply to a single
character or to a whole string, and currently operates as if the locale
always is "C".  Consider using the C<uc()> function, see L<perlfunc/uc>,
or the equivalent C<\U> operator inside doublequotish strings.

=item C<trunc>

Returns the integer toward zero from the argument [C99].

See also L</ceil>, L</floor>, and L</round>.

=item C<ttyname>

This is identical to the C function C<ttyname()> for returning the
name of the current terminal.

=item C<tzname>

Retrieves the time conversion information from the C<tzname> variable.

	POSIX::tzset();
	($std, $dst) = POSIX::tzname();

=item C<tzset>

This is identical to the C function C<tzset()> for setting
the current timezone based on the environment variable C<TZ>,
to be used by C<ctime()>, C<localtime()>, C<mktime()>, and C<strftime()>
functions.

=item C<umask>

This is identical to Perl's builtin C<umask()> function
for setting (and querying) the file creation permission mask,
see L<perlfunc/umask>.

=item C<uname>

Get name of current operating system.

	($sysname, $nodename, $release, $version, $machine)
		= POSIX::uname();

Note that the actual meanings of the various fields are not
that well standardized, do not expect any great portability.
The C<$sysname> might be the name of the operating system,
the C<$nodename> might be the name of the host, the C<$release>
might be the (major) release number of the operating system,
the C<$version> might be the (minor) release number of the
operating system, and the C<$machine> might be a hardware identifier.
Maybe.

=item C<ungetc>

Not implemented.  Use method C<IO::Handle::ungetc()> instead.

=item C<unlink>

This is identical to Perl's builtin C<unlink()> function
for removing files, see L<perlfunc/unlink>.

=item C<utime>

This is identical to Perl's builtin C<utime()> function
for changing the time stamps of files and directories,
see L<perlfunc/utime>.

=item C<vfprintf>

Not implemented.  C<vfprintf()> is C-specific, see L<perlfunc/printf> instead.

=item C<vprintf>

Not implemented.  C<vprintf()> is C-specific, see L<perlfunc/printf> instead.

=item C<vsprintf>

Not implemented.  C<vsprintf()> is C-specific, see L<perlfunc/sprintf> instead.

=item C<wait>

This is identical to Perl's builtin C<wait()> function,
see L<perlfunc/wait>.

=item C<waitpid>

Wait for a child process to change state.  This is identical to Perl's
builtin C<waitpid()> function, see L<perlfunc/waitpid>.

	$pid = POSIX::waitpid( -1, POSIX::WNOHANG );
	print "status = ", ($? / 256), "\n";

=item C<wcstombs>

This is identical to the C function C<wcstombs()>.

See L</mblen>.

=item C<wctomb>

This is identical to the C function C<wctomb()>.

See L</mblen>.

=item C<write>

Write to a file.  This uses file descriptors such as those obtained by
calling C<POSIX::open>.

	$fd = POSIX::open( "foo", &POSIX::O_WRONLY );
	$buf = "hello";
	$bytes = POSIX::write( $fd, $buf, 5 );

Returns C<undef> on failure.

See also L<perlfunc/syswrite>.

=back

=head1 CLASSES

=head2 C<POSIX::SigAction>

=over 8

=item C<new>

Creates a new C<POSIX::SigAction> object which corresponds to the C
C<struct sigaction>.  This object will be destroyed automatically when
it is no longer needed.  The first parameter is the handler, a sub
reference.  The second parameter is a C<POSIX::SigSet> object, it
defaults to the empty set.  The third parameter contains the
C<sa_flags>, it defaults to 0.

	$sigset = POSIX::SigSet->new(SIGINT, SIGQUIT);
	$sigaction = POSIX::SigAction->new(
			\&handler, $sigset, &POSIX::SA_NOCLDSTOP
		     );

This C<POSIX::SigAction> object is intended for use with the C<POSIX::sigaction()>
function.

=back

=over 8

=item C<handler>

=item C<mask>

=item C<flags>

accessor functions to get/set the values of a SigAction object.

	$sigset = $sigaction->mask;
	$sigaction->flags(&POSIX::SA_RESTART);

=item C<safe>

accessor function for the "safe signals" flag of a SigAction object; see
L<perlipc> for general information on safe (a.k.a. "deferred") signals.  If
you wish to handle a signal safely, use this accessor to set the "safe" flag
in the C<POSIX::SigAction> object:

	$sigaction->safe(1);

You may also examine the "safe" flag on the output action object which is
filled in when given as the third parameter to C<POSIX::sigaction()>:

	sigaction(SIGINT, $new_action, $old_action);
	if ($old_action->safe) {
	    # previous SIGINT handler used safe signals
	}

=back

=head2 C<POSIX::SigRt>

=over 8

=item C<%SIGRT>

A hash of the POSIX realtime signal handlers.  It is an extension of
the standard C<%SIG>, the C<$POSIX::SIGRT{SIGRTMIN}> is roughly equivalent
to C<$SIG{SIGRTMIN}>, but the right POSIX moves (see below) are made with
the C<POSIX::SigSet> and C<POSIX::sigaction> instead of accessing the C<%SIG>.

You can set the C<%POSIX::SIGRT> elements to set the POSIX realtime
signal handlers, use C<delete> and C<exists> on the elements, and use
C<scalar> on the C<%POSIX::SIGRT> to find out how many POSIX realtime
signals there are available S<C<(SIGRTMAX - SIGRTMIN + 1>>, the C<SIGRTMAX> is
a valid POSIX realtime signal).

Setting the C<%SIGRT> elements is equivalent to calling this:

  sub new {
    my ($rtsig, $handler, $flags) = @@_;
    my $sigset = POSIX::SigSet($rtsig);
    my $sigact = POSIX::SigAction->new($handler,$sigset,$flags);
    sigaction($rtsig, $sigact);
  }

The flags default to zero, if you want something different you can
either use C<local> on C<$POSIX::SigRt::SIGACTION_FLAGS>, or you can
derive from POSIX::SigRt and define your own C<new()> (the tied hash
STORE method of the C<%SIGRT> calls C<new($rtsig, $handler, $SIGACTION_FLAGS)>,
where the C<$rtsig> ranges from zero to S<C<SIGRTMAX - SIGRTMIN + 1)>>.

Just as with any signal, you can use C<sigaction($rtsig, undef, $oa)> to
retrieve the installed signal handler (or, rather, the signal action).

B<NOTE:> whether POSIX realtime signals really work in your system, or
whether Perl has been compiled so that it works with them, is outside
of this discussion.

=item C<SIGRTMIN>

Return the minimum POSIX realtime signal number available, or C<undef>
if no POSIX realtime signals are available.

=item C<SIGRTMAX>

Return the maximum POSIX realtime signal number available, or C<undef>
if no POSIX realtime signals are available.

=back

=head2 C<POSIX::SigSet>

=over 8

=item C<new>

Create a new SigSet object.  This object will be destroyed automatically
when it is no longer needed.  Arguments may be supplied to initialize the
set.

Create an empty set.

	$sigset = POSIX::SigSet->new;

Create a set with C<SIGUSR1>.

	$sigset = POSIX::SigSet->new( &POSIX::SIGUSR1 );

=item C<addset>

Add a signal to a SigSet object.

	$sigset->addset( &POSIX::SIGUSR2 );

Returns C<undef> on failure.

=item C<delset>

Remove a signal from the SigSet object.

	$sigset->delset( &POSIX::SIGUSR2 );

Returns C<undef> on failure.

=item C<emptyset>

Initialize the SigSet object to be empty.

	$sigset->emptyset();

Returns C<undef> on failure.

=item C<fillset>

Initialize the SigSet object to include all signals.

	$sigset->fillset();

Returns C<undef> on failure.

=item C<ismember>

Tests the SigSet object to see if it contains a specific signal.

	if( $sigset->ismember( &POSIX::SIGUSR1 ) ){
		print "contains SIGUSR1\n";
	}

=back

=head2 C<POSIX::Termios>

=over 8

=item C<new>

Create a new Termios object.  This object will be destroyed automatically
when it is no longer needed.  A Termios object corresponds to the C<termios>
C struct.  C<new()> mallocs a new one, C<getattr()> fills it from a file descriptor,
and C<setattr()> sets a file descriptor's parameters to match Termios' contents.

	$termios = POSIX::Termios->new;

=item C<getattr>

Get terminal control attributes.

Obtain the attributes for C<stdin>.

	$termios->getattr( 0 ) # Recommended for clarity.
	$termios->getattr()

Obtain the attributes for stdout.

	$termios->getattr( 1 )

Returns C<undef> on failure.

=item C<getcc>

Retrieve a value from the C<c_cc> field of a C<termios> object.  The C<c_cc> field is
an array so an index must be specified.

	$c_cc[1] = $termios->getcc(1);

=item C<getcflag>

Retrieve the C<c_cflag> field of a C<termios> object.

	$c_cflag = $termios->getcflag;

=item C<getiflag>

Retrieve the C<c_iflag> field of a C<termios> object.

	$c_iflag = $termios->getiflag;

=item C<getispeed>

Retrieve the input baud rate.

	$ispeed = $termios->getispeed;

=item C<getlflag>

Retrieve the C<c_lflag> field of a C<termios> object.

	$c_lflag = $termios->getlflag;

=item C<getoflag>

Retrieve the C<c_oflag> field of a C<termios> object.

	$c_oflag = $termios->getoflag;

=item C<getospeed>

Retrieve the output baud rate.

	$ospeed = $termios->getospeed;

=item C<setattr>

Set terminal control attributes.

Set attributes immediately for stdout.

	$termios->setattr( 1, &POSIX::TCSANOW );

Returns C<undef> on failure.

=item C<setcc>

Set a value in the C<c_cc> field of a C<termios> object.  The C<c_cc> field is an
array so an index must be specified.

	$termios->setcc( &POSIX::VEOF, 1 );

=item C<setcflag>

Set the C<c_cflag> field of a C<termios> object.

	$termios->setcflag( $c_cflag | &POSIX::CLOCAL );

=item C<setiflag>

Set the C<c_iflag> field of a C<termios> object.

	$termios->setiflag( $c_iflag | &POSIX::BRKINT );

=item C<setispeed>

Set the input baud rate.

	$termios->setispeed( &POSIX::B9600 );

Returns C<undef> on failure.

=item C<setlflag>

Set the C<c_lflag> field of a C<termios> object.

	$termios->setlflag( $c_lflag | &POSIX::ECHO );

=item C<setoflag>

Set the C<c_oflag> field of a C<termios> object.

	$termios->setoflag( $c_oflag | &POSIX::OPOST );

=item C<setospeed>

Set the output baud rate.

	$termios->setospeed( &POSIX::B9600 );

Returns C<undef> on failure.

=item Baud rate values

C<B38400> C<B75> C<B200> C<B134> C<B300> C<B1800> C<B150> C<B0> C<B19200> C<B1200> C<B9600> C<B600> C<B4800> C<B50> C<B2400> C<B110>

=item Terminal interface values

C<TCSADRAIN> C<TCSANOW> C<TCOON> C<TCIOFLUSH> C<TCOFLUSH> C<TCION> C<TCIFLUSH> C<TCSAFLUSH> C<TCIOFF> C<TCOOFF>

=item C<c_cc> field values

C<VEOF> C<VEOL> C<VERASE> C<VINTR> C<VKILL> C<VQUIT> C<VSUSP> C<VSTART> C<VSTOP> C<VMIN> C<VTIME> C<NCCS>

=item C<c_cflag> field values

C<CLOCAL> C<CREAD> C<CSIZE> C<CS5> C<CS6> C<CS7> C<CS8> C<CSTOPB> C<HUPCL> C<PARENB> C<PARODD>

=item C<c_iflag> field values

C<BRKINT> C<ICRNL> C<IGNBRK> C<IGNCR> C<IGNPAR> C<INLCR> C<INPCK> C<ISTRIP> C<IXOFF> C<IXON> C<PARMRK>

=item C<c_lflag> field values

C<ECHO> C<ECHOE> C<ECHOK> C<ECHONL> C<ICANON> C<IEXTEN> C<ISIG> C<NOFLSH> C<TOSTOP>

=item C<c_oflag> field values

C<OPOST>

=back

=head1 PATHNAME CONSTANTS

=over 8

=item Constants

C<_PC_CHOWN_RESTRICTED> C<_PC_LINK_MAX> C<_PC_MAX_CANON> C<_PC_MAX_INPUT> C<_PC_NAME_MAX>
C<_PC_NO_TRUNC> C<_PC_PATH_MAX> C<_PC_PIPE_BUF> C<_PC_VDISABLE>

=back

=head1 POSIX CONSTANTS

=over 8

=item Constants

C<_POSIX_ARG_MAX> C<_POSIX_CHILD_MAX> C<_POSIX_CHOWN_RESTRICTED> C<_POSIX_JOB_CONTROL>
C<_POSIX_LINK_MAX> C<_POSIX_MAX_CANON> C<_POSIX_MAX_INPUT> C<_POSIX_NAME_MAX>
C<_POSIX_NGROUPS_MAX> C<_POSIX_NO_TRUNC> C<_POSIX_OPEN_MAX> C<_POSIX_PATH_MAX>
C<_POSIX_PIPE_BUF> C<_POSIX_SAVED_IDS> C<_POSIX_SSIZE_MAX> C<_POSIX_STREAM_MAX>
C<_POSIX_TZNAME_MAX> C<_POSIX_VDISABLE> C<_POSIX_VERSION>

=back

=head1 SYSTEM CONFIGURATION

=over 8

=item Constants

C<_SC_ARG_MAX> C<_SC_CHILD_MAX> C<_SC_CLK_TCK> C<_SC_JOB_CONTROL> C<_SC_NGROUPS_MAX>
C<_SC_OPEN_MAX> C<_SC_PAGESIZE> C<_SC_SAVED_IDS> C<_SC_STREAM_MAX> C<_SC_TZNAME_MAX>
C<_SC_VERSION>

=back

=head1 ERRNO

=over 8

=item Constants

C<E2BIG> C<EACCES> C<EADDRINUSE> C<EADDRNOTAVAIL> C<EAFNOSUPPORT> C<EAGAIN> C<EALREADY> C<EBADF> C<EBADMSG>
C<EBUSY> C<ECANCELED> C<ECHILD> C<ECONNABORTED> C<ECONNREFUSED> C<ECONNRESET> C<EDEADLK> C<EDESTADDRREQ>
C<EDOM> C<EDQUOT> C<EEXIST> C<EFAULT> C<EFBIG> C<EHOSTDOWN> C<EHOSTUNREACH> C<EIDRM> C<EILSEQ> C<EINPROGRESS>
C<EINTR> C<EINVAL> C<EIO> C<EISCONN> C<EISDIR> C<ELOOP> C<EMFILE> C<EMLINK> C<EMSGSIZE> C<ENAMETOOLONG>
C<ENETDOWN> C<ENETRESET> C<ENETUNREACH> C<ENFILE> C<ENOBUFS> C<ENODATA> C<ENODEV> C<ENOENT> C<ENOEXEC>
C<ENOLCK> C<ENOLINK> C<ENOMEM> C<ENOMSG> C<ENOPROTOOPT> C<ENOSPC> C<ENOSR> C<ENOSTR> C<ENOSYS> C<ENOTBLK>
C<ENOTCONN> C<ENOTDIR> C<ENOTEMPTY> C<ENOTRECOVERABLE> C<ENOTSOCK> C<ENOTSUP> C<ENOTTY> C<ENXIO>
C<EOPNOTSUPP> C<EOTHER> C<EOVERFLOW> C<EOWNERDEAD> C<EPERM> C<EPFNOSUPPORT> C<EPIPE> C<EPROCLIM> C<EPROTO>
C<EPROTONOSUPPORT> C<EPROTOTYPE> C<ERANGE> C<EREMOTE> C<ERESTART> C<EROFS> C<ESHUTDOWN>
C<ESOCKTNOSUPPORT> C<ESPIPE> C<ESRCH> C<ESTALE> C<ETIME> C<ETIMEDOUT> C<ETOOMANYREFS> C<ETXTBSY> C<EUSERS>
C<EWOULDBLOCK> C<EXDEV>

=back

=head1 FCNTL

=over 8

=item Constants

C<FD_CLOEXEC> C<F_DUPFD> C<F_GETFD> C<F_GETFL> C<F_GETLK> C<F_OK> C<F_RDLCK> C<F_SETFD> C<F_SETFL> C<F_SETLK>
C<F_SETLKW> C<F_UNLCK> C<F_WRLCK> C<O_ACCMODE> C<O_APPEND> C<O_CREAT> C<O_EXCL> C<O_NOCTTY> C<O_NONBLOCK>
C<O_RDONLY> C<O_RDWR> C<O_TRUNC> C<O_WRONLY>

=back

=head1 FLOAT

=over 8

=item Constants

C<DBL_DIG> C<DBL_EPSILON> C<DBL_MANT_DIG> C<DBL_MAX> C<DBL_MAX_10_EXP> C<DBL_MAX_EXP> C<DBL_MIN>
C<DBL_MIN_10_EXP> C<DBL_MIN_EXP> C<FLT_DIG> C<FLT_EPSILON> C<FLT_MANT_DIG> C<FLT_MAX>
C<FLT_MAX_10_EXP> C<FLT_MAX_EXP> C<FLT_MIN> C<FLT_MIN_10_EXP> C<FLT_MIN_EXP> C<FLT_RADIX>
C<FLT_ROUNDS> C<LDBL_DIG> C<LDBL_EPSILON> C<LDBL_MANT_DIG> C<LDBL_MAX> C<LDBL_MAX_10_EXP>
C<LDBL_MAX_EXP> C<LDBL_MIN> C<LDBL_MIN_10_EXP> C<LDBL_MIN_EXP>

=back

=head1 FLOATING-POINT ENVIRONMENT

=over 8

=item Constants

C<FE_DOWNWARD> C<FE_TONEAREST> C<FE_TOWARDZERO> C<FE_UPWARD>
on systems that support them.

=back

=head1 LIMITS

=over 8

=item Constants

C<ARG_MAX> C<CHAR_BIT> C<CHAR_MAX> C<CHAR_MIN> C<CHILD_MAX> C<INT_MAX> C<INT_MIN> C<LINK_MAX> C<LONG_MAX>
C<LONG_MIN> C<MAX_CANON> C<MAX_INPUT> C<MB_LEN_MAX> C<NAME_MAX> C<NGROUPS_MAX> C<OPEN_MAX> C<PATH_MAX>
C<PIPE_BUF> C<SCHAR_MAX> C<SCHAR_MIN> C<SHRT_MAX> C<SHRT_MIN> C<SSIZE_MAX> C<STREAM_MAX> C<TZNAME_MAX>
C<UCHAR_MAX> C<UINT_MAX> C<ULONG_MAX> C<USHRT_MAX>

=back

=head1 LOCALE

=over 8

=item Constants

C<LC_ALL> C<LC_COLLATE> C<LC_CTYPE> C<LC_MONETARY> C<LC_NUMERIC> C<LC_TIME> C<LC_MESSAGES>
on systems that support them.

=back

=head1 MATH

=over 8

=item Constants

C<HUGE_VAL>

C<FP_ILOGB0> C<FP_ILOGBNAN> C<FP_INFINITE> C<FP_NAN> C<FP_NORMAL> C<FP_SUBNORMAL> C<FP_ZERO>
C<INFINITY> C<NAN> C<Inf> C<NaN>
C<M_1_PI> C<M_2_PI> C<M_2_SQRTPI> C<M_E> C<M_LN10> C<M_LN2> C<M_LOG10E> C<M_LOG2E> C<M_PI>
C<M_PI_2> C<M_PI_4> C<M_SQRT1_2> C<M_SQRT2>
on systems with C99 support.

=back

=head1 SIGNAL

=over 8

=item Constants

C<SA_NOCLDSTOP> C<SA_NOCLDWAIT> C<SA_NODEFER> C<SA_ONSTACK> C<SA_RESETHAND> C<SA_RESTART>
C<SA_SIGINFO> C<SIGABRT> C<SIGALRM> C<SIGCHLD> C<SIGCONT> C<SIGFPE> C<SIGHUP> C<SIGILL> C<SIGINT>
C<SIGKILL> C<SIGPIPE> C<SIGQUIT> C<SIGSEGV> C<SIGSTOP> C<SIGTERM> C<SIGTSTP> C<SIGTTIN> C<SIGTTOU>
C<SIGUSR1> C<SIGUSR2> C<SIG_BLOCK> C<SIG_DFL> C<SIG_ERR> C<SIG_IGN> C<SIG_SETMASK>
C<SIG_UNBLOCK>
C<ILL_ILLOPC> C<ILL_ILLOPN> C<ILL_ILLADR> C<ILL_ILLTRP> C<ILL_PRVOPC> C<ILL_PRVREG> C<ILL_COPROC>
C<ILL_BADSTK> C<FPE_INTDIV> C<FPE_INTOVF> C<FPE_FLTDIV> C<FPE_FLTOVF> C<FPE_FLTUND> C<FPE_FLTRES>
C<FPE_FLTINV> C<FPE_FLTSUB> C<SEGV_MAPERR> C<SEGV_ACCERR> C<BUS_ADRALN> C<BUS_ADRERR>
C<BUS_OBJERR> C<TRAP_BRKPT> C<TRAP_TRACE> C<CLD_EXITED> C<CLD_KILLED> C<CLD_DUMPED> C<CLD_TRAPPED>
C<CLD_STOPPED> C<CLD_CONTINUED> C<POLL_IN> C<POLL_OUT> C<POLL_MSG> C<POLL_ERR> C<POLL_PRI>
C<POLL_HUP> C<SI_USER> C<SI_QUEUE> C<SI_TIMER> C<SI_ASYNCIO> C<SI_MESGQ>

=back

=head1 STAT

=over 8

=item Constants

C<S_IRGRP> C<S_IROTH> C<S_IRUSR> C<S_IRWXG> C<S_IRWXO> C<S_IRWXU> C<S_ISGID> C<S_ISUID> C<S_IWGRP> C<S_IWOTH>
C<S_IWUSR> C<S_IXGRP> C<S_IXOTH> C<S_IXUSR>

=item Macros

C<S_ISBLK> C<S_ISCHR> C<S_ISDIR> C<S_ISFIFO> C<S_ISREG>

=back

=head1 STDLIB

=over 8

=item Constants

C<EXIT_FAILURE> C<EXIT_SUCCESS> C<MB_CUR_MAX> C<RAND_MAX>

=back

=head1 STDIO

=over 8

=item Constants

C<BUFSIZ> C<EOF> C<FILENAME_MAX> C<L_ctermid> C<L_cuserid> C<L_tmpname> C<TMP_MAX>

=back

=head1 TIME

=over 8

=item Constants

C<CLK_TCK> C<CLOCKS_PER_SEC>

=back

=head1 UNISTD

=over 8

=item Constants

C<R_OK> C<SEEK_CUR> C<SEEK_END> C<SEEK_SET> C<STDIN_FILENO> C<STDOUT_FILENO> C<STDERR_FILENO> C<W_OK> C<X_OK>

=back

=head1 WAIT

=over 8

=item Constants

C<WNOHANG> C<WUNTRACED>

=over 16

=item C<WNOHANG>

Do not suspend the calling process until a child process
changes state but instead return immediately.

=item C<WUNTRACED>

Catch stopped child processes.

=back

=item Macros

C<WIFEXITED> C<WEXITSTATUS> C<WIFSIGNALED> C<WTERMSIG> C<WIFSTOPPED> C<WSTOPSIG>

=over 16

=item C<WIFEXITED>

C<WIFEXITED(${^CHILD_ERROR_NATIVE})> returns true if the child process
exited normally (C<exit()> or by falling off the end of C<main()>)

=item C<WEXITSTATUS>

C<WEXITSTATUS(${^CHILD_ERROR_NATIVE})> returns the normal exit status of
the child process (only meaningful if C<WIFEXITED(${^CHILD_ERROR_NATIVE})>
is true)

=item C<WIFSIGNALED>

C<WIFSIGNALED(${^CHILD_ERROR_NATIVE})> returns true if the child process
terminated because of a signal

=item C<WTERMSIG>

C<WTERMSIG(${^CHILD_ERROR_NATIVE})> returns the signal the child process
terminated for (only meaningful if
C<WIFSIGNALED(${^CHILD_ERROR_NATIVE})>
is true)

=item C<WIFSTOPPED>

C<WIFSTOPPED(${^CHILD_ERROR_NATIVE})> returns true if the child process is
currently stopped (can happen only if you specified the WUNTRACED flag
to C<waitpid()>)

=item C<WSTOPSIG>

C<WSTOPSIG(${^CHILD_ERROR_NATIVE})> returns the signal the child process
was stopped for (only meaningful if
C<WIFSTOPPED(${^CHILD_ERROR_NATIVE})>
is true)

=back

=back

=head1 WINSOCK

(Windows only.)

=over 8

=item Constants

C<WSAEINTR> C<WSAEBADF> C<WSAEACCES> C<WSAEFAULT> C<WSAEINVAL> C<WSAEMFILE> C<WSAEWOULDBLOCK>
C<WSAEINPROGRESS> C<WSAEALREADY> C<WSAENOTSOCK> C<WSAEDESTADDRREQ> C<WSAEMSGSIZE>
C<WSAEPROTOTYPE> C<WSAENOPROTOOPT> C<WSAEPROTONOSUPPORT> C<WSAESOCKTNOSUPPORT>
C<WSAEOPNOTSUPP> C<WSAEPFNOSUPPORT> C<WSAEAFNOSUPPORT> C<WSAEADDRINUSE>
C<WSAEADDRNOTAVAIL> C<WSAENETDOWN> C<WSAENETUNREACH> C<WSAENETRESET> C<WSAECONNABORTED>
C<WSAECONNRESET> C<WSAENOBUFS> C<WSAEISCONN> C<WSAENOTCONN> C<WSAESHUTDOWN>
C<WSAETOOMANYREFS> C<WSAETIMEDOUT> C<WSAECONNREFUSED> C<WSAELOOP> C<WSAENAMETOOLONG>
C<WSAEHOSTDOWN> C<WSAEHOSTUNREACH> C<WSAENOTEMPTY> C<WSAEPROCLIM> C<WSAEUSERS>
C<WSAEDQUOT> C<WSAESTALE> C<WSAEREMOTE> C<WSAEDISCON> C<WSAENOMORE> C<WSAECANCELLED>
C<WSAEINVALIDPROCTABLE> C<WSAEINVALIDPROVIDER> C<WSAEPROVIDERFAILEDINIT>
C<WSAEREFUSED>

=back

@


1.6
log
@Apply local patches, remove excess files - perl-5.20.2
@
text
@a23 9
I<Everything is exported by default> with the exception of any POSIX
functions with the same name as a built-in Perl function, such as
C<abs>, C<alarm>, C<rmdir>, C<write>, etc.., which will be exported
only if you ask for them explicitly.  This is an unfortunate backwards
compatibility feature.  You can stop the exporting by saying S<C<use
POSIX ()>> and then use the fully qualified names (I<e.g.>, C<POSIX::SEEK_END>),
or by giving an explicit import list.  If you do neither, and opt for the
default, S<C<use POSIX;>> has to import I<553 symbols>.

d37 9
d105 6
d137 6
d153 6
d167 1
a167 1
C<atexit()> is C-specific: use C<END {}> instead, see L<perlmod>.
d171 1
a171 1
C<atof()> is C-specific.  Perl converts strings to numbers transparently.
d176 1
a176 1
C<atoi()> is C-specific.  Perl converts strings to numbers transparently.
d182 1
a182 1
C<atol()> is C-specific.  Perl converts strings to numbers transparently.
d193 5
a197 1
C<calloc()> is C-specific.  Perl does memory management transparently.
d221 1
a221 1
Use the method C<IO::Handle::clearerr()> instead, to reset the error
d257 8
d300 1
a300 1
C<div()> is C-specific, use L<perlfunc/int> on the usual C</> division and
d323 8
d341 1
a341 1
C<execl()> is C-specific, see L<perlfunc/exec>.
d345 1
a345 1
C<execle()> is C-specific, see L<perlfunc/exec>.
d349 1
a349 1
C<execlp()> is C-specific, see L<perlfunc/exec>.
d353 1
a353 1
C<execv()> is C-specific, see L<perlfunc/exec>.
d357 1
a357 1
C<execve()> is C-specific, see L<perlfunc/exec>.
d361 1
a361 1
C<execvp()> is C-specific, see L<perlfunc/exec>.
d374 6
d387 1
a387 1
Use method C<IO::Handle::close()> instead, or see L<perlfunc/close>.
d396 1
a396 1
Use method C<IO::Handle::new_from_fd()> instead, or see L<perlfunc/open>.
d400 1
a400 1
Use method C<IO::Handle::eof()> instead, or see L<perlfunc/eof>.
d404 1
a404 1
Use method C<IO::Handle::error()> instead.
d408 1
a408 1
Use method C<IO::Handle::flush()> instead.
d413 1
a413 1
Use method C<IO::Handle::getc()> instead, or see L<perlfunc/read>.
d417 1
a417 1
Use method C<IO::Seekable::getpos()> instead, or see L<perlfunc/seek>.
d421 1
a421 1
Use method C<IO::Handle::gets()> instead.  Similar to E<lt>E<gt>, also known
d426 1
a426 1
Use method C<IO::Handle::fileno()> instead, or see L<perlfunc/fileno>.
d433 35
d474 1
a474 1
It returns the remainder C<$r = $x - $n*$y>, where C<$n = trunc($x/$y)>.
d480 1
a480 1
Use method C<IO::File::open()> instead, or see L<perlfunc/open>.
d501 11
d514 1
a514 1
C<fprintf()> is C-specific, see L<perlfunc/printf> instead.
d518 1
a518 1
C<fputc()> is C-specific, see L<perlfunc/print> instead.
d522 1
a522 1
C<fputs()> is C-specific, see L<perlfunc/print> instead.
d526 1
a526 1
C<fread()> is C-specific, see L<perlfunc/read> instead.
d530 1
a530 1
C<free()> is C-specific.  Perl does memory management transparently.
d534 1
a534 1
C<freopen()> is C-specific, see L<perlfunc/open> instead.
d544 1
a544 1
C<fscanf()> is C-specific, use E<lt>E<gt> and regular expressions instead.
d548 1
a548 1
Use method C<IO::Seekable::seek()> instead, or see L<perlfunc/seek>.
d552 1
a552 1
Use method C<IO::Seekable::setpos()> instead, or seek L<perlfunc/seek>.
d565 1
a565 1
Use method C<IO::Handle::sync()> instead.
d569 1
a569 1
Use method C<IO::Seekable::tell()> instead, or see L<perlfunc/tell>.
d573 1
a573 1
C<fwrite()> is C-specific, see L<perlfunc/print> instead.
d632 11
d691 20
a710 1
=item C<isalnum>
d712 1
a712 10
Deprecated function whose use raises a warning, and which is slated to
be removed in a future Perl version.  It is very similar to matching
against S<C<qr/ ^ [[:alnum:]]+ $ /x>>, which you should convert to use
instead.  The function is deprecated because 1) it doesn't handle UTF-8
encoded strings properly; and 2) it returns C<TRUE> even if the input is
the empty string.  The function return is always based on the current
locale, whereas using locale rules is optional with the regular
expression, based on pragmas in effect and pattern modifiers (see
L<perlre/Character set modifiers> and L<perlre/Which character set
modifier is in effect?>).
d714 1
a714 2
The function returns C<TRUE> if the input string is empty, or if the
corresponding C function returns C<TRUE> for every byte in the string.
d716 3
a718 2
You may want to use the C<L<E<sol>\wE<sol>|perlrecharclass/Word
characters>> construct instead.
d722 3
a724 13
Deprecated function whose use raises a warning, and which is slated to
be removed in a future Perl version.  It is very similar to matching
against S<C<qr/ ^ [[:alpha:]]+ $ /x>>, which you should convert to use
instead.  The function is deprecated because 1) it doesn't handle UTF-8
encoded strings properly; and 2) it returns C<TRUE> even if the input is
the empty string.  The function return is always based on the current
locale, whereas using locale rules is optional with the regular
expression, based on pragmas in effect and pattern modifiers (see
L<perlre/Character set modifiers> and L<perlre/Which character set
modifier is in effect?>).

The function returns C<TRUE> if the input string is empty, or if the
corresponding C function returns C<TRUE> for every byte in the string.
d733 3
a735 10
Deprecated function whose use raises a warning, and which is slated to
be removed in a future Perl version.  It is very similar to matching
against S<C<qr/ ^ [[:cntrl:]]+ $ /x>>, which you should convert to use
instead.  The function is deprecated because 1) it doesn't handle UTF-8
encoded strings properly; and 2) it returns C<TRUE> even if the input is
the empty string.  The function return is always based on the current
locale, whereas using locale rules is optional with the regular
expression, based on pragmas in effect and pattern modifiers (see
L<perlre/Character set modifiers> and L<perlre/Which character set
modifier is in effect?>).
d737 1
a737 2
The function returns C<TRUE> if the input string is empty, or if the
corresponding C function returns C<TRUE> for every byte in the string.
d739 3
a741 1
=item C<isdigit>
d743 1
a743 10
Deprecated function whose use raises a warning, and which is slated to
be removed in a future Perl version.  It is very similar to matching
against S<C<qr/ ^ [[:digit:]]+ $ /x>>, which you should convert to use
instead.  The function is deprecated because 1) it doesn't handle UTF-8
encoded strings properly; and 2) it returns C<TRUE> even if the input is
the empty string.  The function return is always based on the current
locale, whereas using locale rules is optional with the regular
expression, based on pragmas in effect and pattern modifiers (see
L<perlre/Character set modifiers> and L<perlre/Which character set
modifier is in effect?>).
d745 2
a746 2
The function returns C<TRUE> if the input string is empty, or if the
corresponding C function returns C<TRUE> for every byte in the string.
d748 1
a748 2
You may want to use the C<L<E<sol>\dE<sol>|perlrecharclass/Digits>>
construct instead.
d752 5
a756 10
Deprecated function whose use raises a warning, and which is slated to
be removed in a future Perl version.  It is very similar to matching
against S<C<qr/ ^ [[:graph:]]+ $ /x>>, which you should convert to use
instead.  The function is deprecated because 1) it doesn't handle UTF-8
encoded strings properly; and 2) it returns C<TRUE> even if the input is
the empty string.  The function return is always based on the current
locale, whereas using locale rules is optional with the regular
expression, based on pragmas in effect and pattern modifiers (see
L<perlre/Character set modifiers> and L<perlre/Which character set
modifier is in effect?>).
d758 10
a767 2
The function returns C<TRUE> if the input string is empty, or if the
corresponding C function returns C<TRUE> for every byte in the string.
d771 7
a777 10
Deprecated function whose use raises a warning, and which is slated to
be removed in a future Perl version.  It is very similar to matching
against S<C<qr/ ^ [[:lower:]]+ $ /x>>, which you should convert to use
instead.  The function is deprecated because 1) it doesn't handle UTF-8
encoded strings properly; and 2) it returns C<TRUE> even if the input is
the empty string.  The function return is always based on the current
locale, whereas using locale rules is optional with the regular
expression, based on pragmas in effect and pattern modifiers (see
L<perlre/Character set modifiers> and L<perlre/Which character set
modifier is in effect?>).
d779 1
a779 2
The function returns C<TRUE> if the input string is empty, or if the
corresponding C function returns C<TRUE> for every byte in the string.
d781 12
a792 1
Do B<not> use C</[a-z]/> unless you don't care about the current locale.
d796 11
a806 10
Deprecated function whose use raises a warning, and which is slated to
be removed in a future Perl version.  It is very similar to matching
against S<C<qr/ ^ [[:print:]]+ $ /x>>, which you should convert to use
instead.  The function is deprecated because 1) it doesn't handle UTF-8
encoded strings properly; and 2) it returns C<TRUE> even if the input is
the empty string.  The function return is always based on the current
locale, whereas using locale rules is optional with the regular
expression, based on pragmas in effect and pattern modifiers (see
L<perlre/Character set modifiers> and L<perlre/Which character set
modifier is in effect?>).
d808 2
a809 2
The function returns C<TRUE> if the input string is empty, or if the
corresponding C function returns C<TRUE> for every byte in the string.
d811 1
a811 1
=item C<ispunct>
d813 1
a813 10
Deprecated function whose use raises a warning, and which is slated to
be removed in a future Perl version.  It is very similar to matching
against S<C<qr/ ^ [[:punct:]]+ $ /x>>, which you should convert to use
instead.  The function is deprecated because 1) it doesn't handle UTF-8
encoded strings properly; and 2) it returns C<TRUE> even if the input is
the empty string.  The function return is always based on the current
locale, whereas using locale rules is optional with the regular
expression, based on pragmas in effect and pattern modifiers (see
L<perlre/Character set modifiers> and L<perlre/Which character set
modifier is in effect?>).
d815 1
a815 2
The function returns C<TRUE> if the input string is empty, or if the
corresponding C function returns C<TRUE> for every byte in the string.
d819 9
a827 10
Deprecated function whose use raises a warning, and which is slated to
be removed in a future Perl version.  It is very similar to matching
against S<C<qr/ ^ [[:space:]]+ $ /x>>, which you should convert to use
instead.  The function is deprecated because 1) it doesn't handle UTF-8
encoded strings properly; and 2) it returns C<TRUE> even if the input is
the empty string.  The function return is always based on the current
locale, whereas using locale rules is optional with the regular
expression, based on pragmas in effect and pattern modifiers (see
L<perlre/Character set modifiers> and L<perlre/Which character set
modifier is in effect?>).
d829 1
a829 2
The function returns C<TRUE> if the input string is empty, or if the
corresponding C function returns C<TRUE> for every byte in the string.
d831 3
a833 2
You may want to use the C<L<E<sol>\sE<sol>|perlrecharclass/Whitespace>>
construct instead.
d835 1
a835 1
=item C<isupper>
d837 1
a837 10
Deprecated function whose use raises a warning, and which is slated to
be removed in a future Perl version.  It is very similar to matching
against S<C<qr/ ^ [[:upper:]]+ $ /x>>, which you should convert to use
instead.  The function is deprecated because 1) it doesn't handle UTF-8
encoded strings properly; and 2) it returns C<TRUE> even if the input is
the empty string.  The function return is always based on the current
locale, whereas using locale rules is optional with the regular
expression, based on pragmas in effect and pattern modifiers (see
L<perlre/Character set modifiers> and L<perlre/Which character set
modifier is in effect?>).
d839 1
a839 2
The function returns C<TRUE> if the input string is empty, or if the
corresponding C function returns C<TRUE> for every byte in the string.
d841 1
a841 1
Do B<not> use C</[A-Z]/> unless you don't care about the current locale.
d843 1
a843 1
=item C<isxdigit>
d845 1
a845 10
Deprecated function whose use raises a warning, and which is slated to
be removed in a future Perl version.  It is very similar to matching
against S<C<qr/ ^ [[:xdigit:]]+ $ /x>>, which you should convert to use
instead.  The function is deprecated because 1) it doesn't handle UTF-8
encoded strings properly; and 2) it returns C<TRUE> even if the input is
the empty string.  The function return is always based on the current
locale, whereas using locale rules is optional with the regular
expression, based on pragmas in effect and pattern modifiers (see
L<perlre/Character set modifiers> and L<perlre/Which character set
modifier is in effect?>).
d847 1
a847 2
The function returns C<TRUE> if the input string is empty, or if the
corresponding C function returns C<TRUE> for every byte in the string.
d856 1
a856 1
(For returning absolute values of long integers.)
d863 2
a864 2
of only one path, not an list of paths.  Does the same thing as the 
C<chown()> function but changes the owner of a symbolic link instead 
d867 2
d878 1
a878 1
(For computing dividends of long integers.)
d881 25
d914 1
a914 1
containing the current locale formatting values.  Users of this function
d955 3
d987 1
a987 1
C<longjmp()> is C-specific: use L<perlfunc/die> instead.
d999 19
d1020 1
a1020 1
C<malloc()> is C-specific.  Perl does memory management transparently.
d1025 6
a1030 3
Perl does not have any support for the wide and multibyte
characters of the C standards, so this might be a rather
useless function.
d1035 2
a1036 3
Perl does not have any support for the wide and multibyte
characters of the C standards, so this might be a rather
useless function.
d1041 2
a1042 3
Perl does not have any support for the wide and multibyte
characters of the C standards, so this might be a rather
useless function.
d1046 1
a1046 1
C<memchr()> is C-specific, see L<perlfunc/index> instead.
d1050 1
a1050 1
C<memcmp()> is C-specific, use C<eq> instead, see L<perlop>.
d1054 1
a1054 1
C<memcpy()> is C-specific, use C<=>, see L<perlop>, or see L<perlfunc/substr>.
d1058 1
a1058 1
C<memmove()> is C-specific, use C<=>, see L<perlop>, or see L<perlfunc/substr>.
d1062 1
a1062 1
C<memset()> is C-specific, use C<x> instead, see L<perlop>.
d1089 3
a1091 3
The month (C<mon>), weekday (C<wday>), and yearday (C<yday>) begin at zero.
I.e. January is 0, not 1; Sunday is 0, not 1; January 1st is 0, not 1.  The
year (C<year>) is given in years since 1900.  I.e. The year 1995 is 95; the
d1108 71
d1183 3
a1185 2
arguments mean more polite process, negative values more
needy process.  Normal user processes can only be more polite.
d1191 1
a1191 1
C<offsetof()> is C-specific, you probably want to see L<perlfunc/pack> instead.
d1279 1
a1279 1
Formats and prints the specified arguments to STDOUT.
d1284 1
a1284 1
C<putc()> is C-specific, see L<perlfunc/print> instead.
d1288 1
a1288 1
C<putchar()> is C-specific, see L<perlfunc/print> instead.
d1292 1
a1292 1
C<puts()> is C-specific, see L<perlfunc/print> instead.
d1296 1
a1296 1
C<qsort()> is C-specific, see L<perlfunc/sort> instead.
d1305 1
a1305 1
C<rand()> is non-portable, see L<perlfunc/rand> instead.
d1327 10
a1336 1
C<realloc()> is C-specific.  Perl does memory management transparently.
d1343 8
d1365 4
d1374 13
d1389 1
a1389 1
C<scanf()> is C-specific, use E<lt>E<gt> and regular expressions instead,
d1403 1
a1403 1
C<setjmp()> is C-specific: use C<eval {}> instead,
d1408 7
d1423 1
a1423 1
in L<perllocale/Not within the scope of any "use locale" variant>.)
d1455 32
d1532 3
d1542 2
d1557 5
a1561 1
C<siglongjmp()> is C-specific: use L<perlfunc/die> instead.
d1593 1
a1593 1
C<sigsetjmp()> is C-specific: use C<eval {}> instead,
d1647 1
a1647 1
C<sscanf()> is C-specific, use regular expressions instead,
d1657 1
a1657 1
C<strcat()> is C-specific, use C<.=> instead, see L<perlop>.
d1661 1
a1661 1
C<strchr()> is C-specific, see L<perlfunc/index> instead.
d1665 1
a1665 1
C<strcmp()> is C-specific, use C<eq> or C<cmp> instead, see L<perlop>.
d1676 1
a1676 1
C<strcpy()> is C-specific, use C<=> instead, see L<perlop>.
d1680 1
a1680 1
C<strcspn()> is C-specific, use regular expressions instead,
d1686 1
a1686 1
Identical to the string form of the C<$!>, see L<perlvar/$ERRNO>.
d1697 3
a1699 3
The month (C<mon>), weekday (C<wday>), and yearday (C<yday>) begin at zero.
I.e. January is 0, not 1; Sunday is 0, not 1; January 1st is 0, not 1.  The
year (C<year>) is given in years since 1900.  I.e., the year 1995 is 95; the
d1728 1
a1728 1
C<strlen()> is C-specific, use C<length()> instead, see L<perlfunc/length>.
d1732 1
a1732 1
C<strncat()> is C-specific, use C<.=> instead, see L<perlop>.
d1736 1
a1736 1
C<strncmp()> is C-specific, use C<eq> instead, see L<perlop>.
d1740 1
a1740 1
C<strncpy()> is C-specific, use C<=> instead, see L<perlop>.
d1744 1
a1744 1
C<strpbrk()> is C-specific, use regular expressions instead,
d1749 1
a1749 1
C<strrchr()> is C-specific, see L<perlfunc/rindex> instead.
d1753 1
a1753 1
C<strspn()> is C-specific, use regular expressions instead,
d1766 1
a1766 1
error, so clear C<$!> before calling strtod.  However, non-POSIX systems
d1769 1
a1769 1
strtod respects any POSIX I<setlocale()> C<LC_TIME> settings,
d1784 1
a1784 1
When called in a scalar context strtod returns the parsed number.
d1788 1
a1788 1
C<strtok()> is C-specific, use regular expressions instead, see
d1807 1
a1807 1
is zero or omitted strtol will use the string itself to determine the
d1819 6
a1824 1
When called in a scalar context strtol returns the parsed number.
d1913 6
d1932 1
a1932 1
    ($realtime, $user, $system, $cuser, $csystem) 
d1940 1
a1940 1
Use method C<IO::File::new_tmpfile()> instead, or see L<File::Temp>.
d1955 2
a1956 1
character or to a whole string.  Consider using the C<lc()> function,
d1962 10
a1971 4
This is identical to the C function, except that it can apply to a single
character or to a whole string.  Consider using the C<uc()> function,
see L<perlfunc/uc>, or the equivalent C<\U> operator inside doublequotish
strings.
d2016 1
a2016 1
Use method C<IO::Handle::ungetc()> instead.
d2031 1
a2031 1
C<vfprintf()> is C-specific, see L<perlfunc/printf> instead.
d2035 1
a2035 1
C<vprintf()> is C-specific, see L<perlfunc/printf> instead.
d2039 1
a2039 1
C<vsprintf()> is C-specific, see L<perlfunc/sprintf> instead.
d2057 2
a2058 3
Perl does not have any support for the wide and multibyte
characters of the C standards, so this might be a rather
useless function.
d2063 2
a2064 3
Perl does not have any support for the wide and multibyte
characters of the C standards, so this might be a rather
useless function.
d2256 1
a2256 1
when it is no longer needed.  A Termios object corresponds to the termios
d2266 1
a2266 1
Obtain the attributes for stdin.
d2279 1
a2279 1
Retrieve a value from the c_cc field of a termios object.  The c_cc field is
d2286 1
a2286 1
Retrieve the c_cflag field of a termios object.
d2292 1
a2292 1
Retrieve the c_iflag field of a termios object.
d2304 1
a2304 1
Retrieve the c_lflag field of a termios object.
d2310 1
a2310 1
Retrieve the c_oflag field of a termios object.
d2332 1
a2332 1
Set a value in the c_cc field of a termios object.  The c_cc field is an
d2339 1
a2339 1
Set the c_cflag field of a termios object.
d2345 1
a2345 1
Set the c_iflag field of a termios object.
d2359 1
a2359 1
Set the c_lflag field of a termios object.
d2365 1
a2365 1
Set the c_oflag field of a termios object.
d2490 11
d2520 2
a2521 1
C<LC_ALL> C<LC_COLLATE> C<LC_CTYPE> C<LC_MONETARY> C<LC_NUMERIC> C<LC_TIME>
d2533 6
d2552 6
d2680 22
@


1.5
log
@Fix merge issues, remove excess files - match perl-5.20.2 dist
@
text
@d851 6
@


1.4
log
@Apply local patches to perl-5.20.1

ok deraadt@@ sthen@@ espie@@ miod@@
@
text
@a850 6
		int_p_cs_precedes
		int_p_sep_by_space
		int_n_cs_precedes
		int_n_sep_by_space
		int_p_sign_posn
		int_n_sign_posn
@


1.3
log
@Fix merge conflicts, remove extra files, match upstream perl-5.20.1

ok deraadt@@ sthen@@ espie@@ miod@@
@
text
@d851 6
@


1.2
log
@international currency locale rules as per POSIX.1-2008

required for libc++

ok guenther afresh1
@
text
@d28 2
a29 2
compatibility feature.  You can stop the exporting by saying C<use
POSIX ()> and then use the fully qualified names (ie. C<POSIX::SEEK_END>),
d31 1
a31 1
default, C<use POSIX;> has to import I<553 symbols>.
d48 3
a50 3
aren't implemented, and suggest using the Perl equivalent should one
exist.  For example, trying to access the setjmp() call will elicit the
message "setjmp() is C-specific: use eval {} instead".
d54 2
a55 2
For example, one vendor may not define EDEADLK, or the semantics of the
errno values set by open(2) might not be quite right.  Perl does not
d58 1
a58 1
that your vendor has been lax and there's no usable ICANON macro after
d65 1
a65 1
=item _exit
d76 1
a76 1
=item abort
d82 1
a82 1
=item abs
d87 1
a87 1
=item access
d100 1
a100 1
=item acos
d105 1
a105 1
=item alarm
d110 1
a110 1
=item asctime
d119 2
a120 2
	$asctime = asctime($sec, $min, $hour, $mday, $mon, $year,
			   $wday, $yday, $isdst);
d126 1
a126 1
=item asin
d131 1
a131 1
=item assert
d136 1
a136 1
=item atan
d141 1
a141 1
=item atan2
d147 1
a147 1
=item atexit
d149 1
a149 1
atexit() is C-specific: use C<END {}> instead, see L<perlsub>.
d151 1
a151 1
=item atof
d153 1
a153 1
atof() is C-specific.  Perl converts strings to numbers transparently.
d156 1
a156 1
=item atoi
d158 1
a158 1
atoi() is C-specific.  Perl converts strings to numbers transparently.
d162 1
a162 1
=item atol
d164 1
a164 1
atol() is C-specific.  Perl converts strings to numbers transparently.
d168 1
a168 1
=item bsearch
d170 1
a170 1
bsearch() not supplied.  For doing binary search on wordlists,
d173 1
a173 1
=item calloc
d175 1
a175 1
calloc() is C-specific.  Perl does memory management transparently.
d177 1
a177 1
=item ceil
d182 1
a182 1
=item chdir
d187 1
a187 1
=item chmod
d192 1
a192 1
=item chown
d197 1
a197 1
=item clearerr
d202 1
a202 1
=item clock
d207 1
a207 1
=item close
d219 1
a219 1
=item closedir
d224 1
a224 1
=item cos
d230 1
a230 1
=item cosh
d235 1
a235 1
=item creat
d245 1
a245 1
=item ctermid
d251 1
a251 1
=item ctime
d256 1
a256 1
=item cuserid
d262 1
a262 1
=item difftime
d268 1
a268 1
=item div
d270 1
a270 1
div() is C-specific, use L<perlfunc/int> on the usual C</> division and
d273 1
a273 1
=item dup
d283 1
a283 1
=item dup2
d293 1
a293 1
=item errno
d301 1
a301 1
=item execl
d303 1
a303 1
execl() is C-specific, see L<perlfunc/exec>.
d305 1
a305 1
=item execle
d307 1
a307 1
execle() is C-specific, see L<perlfunc/exec>.
d309 1
a309 1
=item execlp
d311 1
a311 1
execlp() is C-specific, see L<perlfunc/exec>.
d313 1
a313 1
=item execv
d315 1
a315 1
execv() is C-specific, see L<perlfunc/exec>.
d317 1
a317 1
=item execve
d319 1
a319 1
execve() is C-specific, see L<perlfunc/exec>.
d321 1
a321 1
=item execvp
d323 1
a323 1
execvp() is C-specific, see L<perlfunc/exec>.
d325 1
a325 1
=item exit
d330 1
a330 1
=item exp
d336 1
a336 1
=item fabs
d341 1
a341 1
=item fclose
d345 1
a345 1
=item fcntl
d350 1
a350 1
=item fdopen
d354 1
a354 1
=item feof
d358 1
a358 1
=item ferror
d362 1
a362 1
=item fflush
d365 1
a365 1
See also L<perlvar/$OUTPUT_AUTOFLUSH>.
d367 1
a367 1
=item fgetc
d371 1
a371 1
=item fgetpos
d375 1
a375 1
=item fgets
d380 1
a380 1
=item fileno
d384 1
a384 1
=item floor
d389 1
a389 1
=item fmod
d399 1
a399 1
=item fopen
d403 1
a403 1
=item fork
d409 1
a409 1
=item fpathconf
d418 1
a418 1
	$path_max = POSIX::fpathconf( $fd, &POSIX::_PC_PATH_MAX );
d422 1
a422 1
=item fprintf
d424 1
a424 1
fprintf() is C-specific, see L<perlfunc/printf> instead.
d426 1
a426 1
=item fputc
d428 1
a428 1
fputc() is C-specific, see L<perlfunc/print> instead.
d430 1
a430 1
=item fputs
d432 1
a432 1
fputs() is C-specific, see L<perlfunc/print> instead.
d434 1
a434 1
=item fread
d436 1
a436 1
fread() is C-specific, see L<perlfunc/read> instead.
d438 1
a438 1
=item free
d440 1
a440 1
free() is C-specific.  Perl does memory management transparently.
d442 1
a442 1
=item freopen
d444 1
a444 1
freopen() is C-specific, see L<perlfunc/open> instead.
d446 1
a446 1
=item frexp
d452 1
a452 1
=item fscanf
d454 1
a454 1
fscanf() is C-specific, use E<lt>E<gt> and regular expressions instead.
d456 1
a456 1
=item fseek
d460 1
a460 1
=item fsetpos
d464 1
a464 1
=item fstat
d473 1
a473 1
=item fsync
d477 1
a477 1
=item ftell
d481 1
a481 1
=item fwrite
d483 1
a483 1
fwrite() is C-specific, see L<perlfunc/print> instead.
d485 1
a485 1
=item getc
d490 1
a490 1
=item getchar
d495 1
a495 1
=item getcwd
d500 1
a500 1
=item getegid
d505 1
a505 1
=item getenv
d510 1
a510 1
=item geteuid
d515 1
a515 1
=item getgid
d520 1
a520 1
=item getgrgid
d526 1
a526 1
=item getgrnam
d531 1
a531 1
=item getgroups
d536 1
a536 1
=item getlogin
d542 1
a542 1
=item getpgrp
d548 1
a548 1
=item getpid
d553 1
a553 1
=item getppid
d559 1
a559 1
=item getpwnam
d564 1
a564 1
=item getpwuid
d569 1
a569 1
=item gets
d579 1
a579 1
=item getuid
d584 1
a584 1
=item gmtime
d590 1
a590 1
=item isalnum
d592 29
a620 14
This is identical to the C function, except that it can apply to a
single character or to a whole string.  Note that locale settings may
affect what characters are considered C<isalnum>.  Does not work on
Unicode characters code point 256 or higher.  Consider using regular
expressions and the C</[[:alnum:]]/> construct instead, or possibly
the C</\w/> construct.

=item isalpha

This is identical to the C function, except that it can apply to
a single character or to a whole string.  Note that locale settings
may affect what characters are considered C<isalpha>.  Does not work
on Unicode characters code point 256 or higher.  Consider using regular
expressions and the C</[[:alpha:]]/> construct instead.
d622 4
a625 1
=item isatty
d630 1
a630 69
=item iscntrl

This is identical to the C function, except that it can apply to
a single character or to a whole string.  Note that locale settings
may affect what characters are considered C<iscntrl>.  Does not work
on Unicode characters code point 256 or higher.  Consider using regular
expressions and the C</[[:cntrl:]]/> construct instead.

=item isdigit

This is identical to the C function, except that it can apply to
a single character or to a whole string.  Note that locale settings
may affect what characters are considered C<isdigit> (unlikely, but
still possible). Does not work on Unicode characters code point 256
or higher.  Consider using regular expressions and the C</[[:digit:]]/>
construct instead, or the C</\d/> construct.

=item isgraph

This is identical to the C function, except that it can apply to
a single character or to a whole string.  Note that locale settings
may affect what characters are considered C<isgraph>.  Does not work
on Unicode characters code point 256 or higher.  Consider using regular
expressions and the C</[[:graph:]]/> construct instead.

=item islower

This is identical to the C function, except that it can apply to
a single character or to a whole string.  Note that locale settings
may affect what characters are considered C<islower>.  Does not work
on Unicode characters code point 256 or higher.  Consider using regular
expressions and the C</[[:lower:]]/> construct instead.  Do B<not> use
C</[a-z]/>.

=item isprint

This is identical to the C function, except that it can apply to
a single character or to a whole string.  Note that locale settings
may affect what characters are considered C<isprint>.  Does not work
on Unicode characters code point 256 or higher.  Consider using regular
expressions and the C</[[:print:]]/> construct instead.

=item ispunct

This is identical to the C function, except that it can apply to
a single character or to a whole string.  Note that locale settings
may affect what characters are considered C<ispunct>.  Does not work
on Unicode characters code point 256 or higher.  Consider using regular
expressions and the C</[[:punct:]]/> construct instead.

=item isspace

This is identical to the C function, except that it can apply to
a single character or to a whole string.  Note that locale settings
may affect what characters are considered C<isspace>.  Does not work
on Unicode characters code point 256 or higher.  Consider using regular
expressions and the C</[[:space:]]/> construct instead, or the C</\s/>
construct.  (Note that C</\s/> and C</[[:space:]]/> are slightly
different in that C</[[:space:]]/> can normally match a vertical tab,
while C</\s/> does not.)

=item isupper

This is identical to the C function, except that it can apply to
a single character or to a whole string.  Note that locale settings
may affect what characters are considered C<isupper>.  Does not work
on Unicode characters code point 256 or higher.  Consider using regular
expressions and the C</[[:upper:]]/> construct instead.  Do B<not> use
C</[A-Z]/>.
d632 148
a779 1
=item isxdigit
d781 2
a782 6
This is identical to the C function, except that it can apply to a single
character or to a whole string.  Note that locale settings may affect what
characters are considered C<isxdigit> (unlikely, but still possible).
Does not work on Unicode characters code point 256 or higher.
Consider using regular expressions and the C</[[:xdigit:]]/>
construct instead, or simply C</[0-9a-f]/i>.
d784 1
a784 1
=item kill
d789 1
a789 1
=item labs
d792 1
a792 1
labs() is C-specific, see L<perlfunc/abs> instead.
d794 1
a794 1
=item lchown
d802 1
a802 1
=item ldexp
d809 1
a809 1
=item ldiv
d812 1
a812 1
ldiv() is C-specific, use C</> and C<int()> instead.
d814 1
a814 1
=item link
d819 1
a819 1
=item localeconv
d822 4
a825 1
containing the current locale formatting values.
a850 6
		int_p_cs_precedes
		int_p_sep_by_space
		int_n_cs_precedes
		int_n_sep_by_space
		int_p_sign_posn
		int_n_sign_posn
d853 2
a854 1
		printf qq(%s: "%s",\n), $property, $lconv->{$property};
d857 1
a857 1
=item localtime
d862 1
a862 1
=item log
d868 1
a868 1
=item log10
d884 1
a884 1
=item longjmp
d886 1
a886 1
longjmp() is C-specific: use L<perlfunc/die> instead.
d888 1
a888 1
=item lseek
d898 1
a898 1
=item malloc
d900 1
a900 1
malloc() is C-specific.  Perl does memory management transparently.
d902 1
a902 1
=item mblen
d909 1
a909 1
=item mbstowcs
d916 1
a916 1
=item mbtowc
d923 1
a923 1
=item memchr
d925 1
a925 1
memchr() is C-specific, see L<perlfunc/index> instead.
d927 1
a927 1
=item memcmp
d929 1
a929 1
memcmp() is C-specific, use C<eq> instead, see L<perlop>.
d931 1
a931 1
=item memcpy
d933 1
a933 1
memcpy() is C-specific, use C<=>, see L<perlop>, or see L<perlfunc/substr>.
d935 1
a935 1
=item memmove
d937 1
a937 1
memmove() is C-specific, use C<=>, see L<perlop>, or see L<perlfunc/substr>.
d939 1
a939 1
=item memset
d941 1
a941 1
memset() is C-specific, use C<x> instead, see L<perlop>.
d943 1
a943 1
=item mkdir
d948 1
a948 1
=item mkfifo
d959 1
a959 1
=item mktime
d965 2
a966 1
	mktime(sec, min, hour, mday, mon, year, wday = 0, yday = 0, isdst = -1)
d981 1
a981 1
=item modf
d987 1
a987 1
=item nice
d996 1
a996 1
=item offsetof
d998 1
a998 1
offsetof() is C-specific, you probably want to see L<perlfunc/pack> instead.
d1000 1
a1000 1
=item open
d1015 3
a1017 1
	$fd = POSIX::open( "foo", &POSIX::O_WRONLY | &POSIX::O_TRUNC );
d1021 3
a1023 1
	$fd = POSIX::open( "foo", &POSIX::O_CREAT | &POSIX::O_WRONLY, 0640 );
d1029 1
a1029 1
=item opendir
d1039 1
a1039 1
=item pathconf
d1046 2
a1047 1
	$path_max = POSIX::pathconf( "/var", &POSIX::_PC_PATH_MAX );
d1051 1
a1051 1
=item pause
d1058 1
a1058 1
=item perror
d1061 1
a1061 1
standard error stream the specified message followed by ": " and the
d1065 1
a1065 1
=item pipe
d1076 1
a1076 1
=item pow
d1084 1
a1084 1
=item printf
d1089 1
a1089 1
=item putc
d1091 1
a1091 1
putc() is C-specific, see L<perlfunc/print> instead.
d1093 1
a1093 1
=item putchar
d1095 1
a1095 1
putchar() is C-specific, see L<perlfunc/print> instead.
d1097 1
a1097 1
=item puts
d1099 1
a1099 1
puts() is C-specific, see L<perlfunc/print> instead.
d1101 1
a1101 1
=item qsort
d1103 1
a1103 1
qsort() is C-specific, see L<perlfunc/sort> instead.
d1105 1
a1105 1
=item raise
d1110 1
a1110 1
=item rand
d1114 1
a1114 1
=item read
d1127 1
a1127 1
=item readdir
d1132 1
a1132 1
=item realloc
d1134 1
a1134 1
realloc() is C-specific.  Perl does memory management transparently.
d1136 1
a1136 1
=item remove
d1141 1
a1141 1
=item rename
d1146 1
a1146 1
=item rewind
d1150 1
a1150 1
=item rewinddir
d1155 1
a1155 1
=item rmdir
d1160 1
a1160 1
=item scanf
d1162 1
a1162 1
scanf() is C-specific, use E<lt>E<gt> and regular expressions instead,
d1165 1
a1165 1
=item setgid
d1174 1
a1174 1
=item setjmp
d1179 1
a1179 1
=item setlocale
d1181 11
a1191 1
Modifies and queries program's locale.  The following examples assume
d1202 1
a1202 1
The following will query the current LC_CTYPE category.  (No second
d1207 1
a1207 1
The following will set the LC_CTYPE behaviour according to the locale
d1209 1
a1209 1
Please see your systems C<setlocale(3)> documentation for the locale
d1214 1
a1214 1
The following will set the LC_COLLATE behaviour to Argentinian
d1221 1
a1221 1
=item setpgid
d1228 1
a1228 1
=item setsid
d1233 1
a1233 1
=item setuid
d1240 1
a1240 1
=item sigaction
d1252 1
a1252 1
SIGHUP), not a string (like "SIGHUP"), though Perl does try hard
d1255 1
a1255 1
If you use the SA_SIGINFO flag, the signal handler will in addition to
d1275 2
a1276 2
of the raw binary contents of the siginfo structure: if a system has
some non-POSIX fields, this third argument is where to unpack() them
d1279 1
a1279 1
Note that not all siginfo values make sense simultaneously (some are
d1284 1
a1284 1
=item siglongjmp
d1286 1
a1286 1
siglongjmp() is C-specific: use L<perlfunc/die> instead.
d1288 1
a1288 1
=item sigpending
d1300 1
a1300 1
=item sigprocmask
d1316 1
a1316 1
=item sigsetjmp
d1321 1
a1321 1
=item sigsuspend
d1333 1
a1333 1
=item sin
d1339 1
a1339 1
=item sinh
d1345 1
a1345 1
=item sleep
d1354 1
a1354 1
=item sprintf
d1360 1
a1360 1
=item sqrt
d1366 1
a1366 1
=item srand
d1370 1
a1370 1
=item sscanf
d1372 1
a1372 1
sscanf() is C-specific, use regular expressions instead,
d1375 1
a1375 1
=item stat
d1380 1
a1380 1
=item strcat
d1382 1
a1382 1
strcat() is C-specific, use C<.=> instead, see L<perlop>.
d1384 1
a1384 1
=item strchr
d1386 1
a1386 1
strchr() is C-specific, see L<perlfunc/index> instead.
d1388 1
a1388 1
=item strcmp
d1390 1
a1390 1
strcmp() is C-specific, use C<eq> or C<cmp> instead, see L<perlop>.
d1392 1
a1392 1
=item strcoll
d1399 1
a1399 1
=item strcpy
d1401 1
a1401 1
strcpy() is C-specific, use C<=> instead, see L<perlop>.
d1403 1
a1403 1
=item strcspn
d1405 1
a1405 1
strcspn() is C-specific, use regular expressions instead,
d1408 1
a1408 1
=item strerror
d1413 1
a1413 1
=item strftime
d1419 2
a1420 1
	strftime(fmt, sec, min, hour, mday, mon, year, wday = -1, yday = -1, isdst = -1)
d1447 2
a1448 1
	$str = POSIX::strftime( "%A, %B %d, %Y", 0, 0, 0, 12, 11, 95, 2 );
d1451 1
a1451 1
=item strlen
d1453 1
a1453 1
strlen() is C-specific, use C<length()> instead, see L<perlfunc/length>.
d1455 1
a1455 1
=item strncat
d1457 1
a1457 1
strncat() is C-specific, use C<.=> instead, see L<perlop>.
d1459 1
a1459 1
=item strncmp
d1461 1
a1461 1
strncmp() is C-specific, use C<eq> instead, see L<perlop>.
d1463 1
a1463 1
=item strncpy
d1465 1
a1465 1
strncpy() is C-specific, use C<=> instead, see L<perlop>.
d1467 1
a1467 1
=item strpbrk
d1469 1
a1469 1
strpbrk() is C-specific, use regular expressions instead,
d1472 1
a1472 1
=item strrchr
d1474 1
a1474 1
strrchr() is C-specific, see L<perlfunc/rindex> instead.
d1476 1
a1476 1
=item strspn
d1478 1
a1478 1
strspn() is C-specific, use regular expressions instead,
d1481 1
a1481 1
=item strstr
d1486 1
a1486 1
=item strtod
d1490 7
a1496 5
POSIX-compliant systems set $! ($ERRNO) to indicate a translation
error, so clear $! before calling strtod.  However, non-POSIX systems
may not check for overflow, and therefore will never set $!.

strtod should respect any POSIX I<setlocale()> settings.
d1498 1
a1498 1
To parse a string $str as a floating point number use
d1503 1
a1503 1
The second returned item and $! can be used to check for valid input:
d1511 1
a1511 1
=item strtok
d1513 1
a1513 1
strtok() is C-specific, use regular expressions instead, see
d1516 1
a1516 1
=item strtol
d1520 3
a1522 3
POSIX-compliant systems set $! ($ERRNO) to indicate a translation
error, so clear $! before calling strtol.  However, non-POSIX systems
may not check for overflow, and therefore will never set $!.
d1524 1
a1524 1
strtol should respect any POSIX I<setlocale()> settings.
d1526 1
a1526 1
To parse a string $str as a number in some base $base use
d1538 1
a1538 1
The second returned item and $! can be used to check for valid input:
d1546 1
a1546 1
=item strtoul
d1548 2
a1549 2
String to unsigned (long) integer translation.  strtoul() is identical
to strtol() except that strtoul() only parses unsigned integers.  See
d1552 2
a1553 2
Note: Some vendors supply strtod() and strtol() but not strtoul().
Other vendors that do supply strtoul() parse "-1" as a valid value.
d1555 1
a1555 1
=item strxfrm
d1566 1
a1566 1
=item sysconf
d1576 1
a1576 1
=item system
d1581 1
a1581 1
=item tan
d1586 1
a1586 1
=item tanh
d1591 1
a1591 1
=item tcdrain
d1598 1
a1598 1
=item tcflow
d1605 1
a1605 1
=item tcflush
d1612 1
a1612 1
=item tcgetpgrp
d1618 1
a1618 1
=item tcsendbreak
d1625 1
a1625 1
=item tcsetpgrp
d1633 1
a1633 1
=item time
d1639 1
a1639 1
=item times
d1641 1
a1641 1
The times() function returns elapsed realtime since some point in the past
d1646 2
a1647 1
    ($realtime, $user, $system, $cuser, $csystem) = POSIX::times();
d1652 1
a1652 1
=item tmpfile
d1656 1
a1656 1
=item tmpnam
d1663 1
a1663 1
documentation for the C library tmpnam() function, this interface
d1666 1
a1666 1
=item tolower
d1673 1
a1673 1
=item toupper
d1680 1
a1680 1
=item ttyname
d1685 1
a1685 1
=item tzname
d1692 1
a1692 1
=item tzset
d1699 1
a1699 1
=item umask
d1705 1
a1705 1
=item uname
d1709 2
a1710 1
	($sysname, $nodename, $release, $version, $machine) = POSIX::uname();
d1721 1
a1721 1
=item ungetc
d1725 1
a1725 1
=item unlink
d1730 1
a1730 1
=item utime
d1736 1
a1736 1
=item vfprintf
d1738 1
a1738 1
vfprintf() is C-specific, see L<perlfunc/printf> instead.
d1740 1
a1740 1
=item vprintf
d1742 1
a1742 1
vprintf() is C-specific, see L<perlfunc/printf> instead.
d1744 1
a1744 1
=item vsprintf
d1746 1
a1746 1
vsprintf() is C-specific, see L<perlfunc/sprintf> instead.
d1748 1
a1748 1
=item wait
d1753 1
a1753 1
=item waitpid
d1761 1
a1761 1
=item wcstombs
d1768 1
a1768 1
=item wctomb
d1775 1
a1775 1
=item write
d1792 1
a1792 1
=head2 POSIX::SigAction
d1796 1
a1796 1
=item new
d1806 3
a1808 1
	$sigaction = POSIX::SigAction->new( \&handler, $sigset, &POSIX::SA_NOCLDSTOP );
d1817 1
a1817 1
=item handler
d1819 1
a1819 1
=item mask
d1821 1
a1821 1
=item flags
d1828 1
a1828 1
=item safe
d1847 1
a1847 1
=head2 POSIX::SigRt
d1851 1
a1851 1
=item %SIGRT
d1854 3
a1856 3
the standard %SIG, the $POSIX::SIGRT{SIGRTMIN} is roughly equivalent
to $SIG{SIGRTMIN}, but the right POSIX moves (see below) are made with
the POSIX::SigSet and POSIX::sigaction instead of accessing the %SIG.
d1858 1
a1858 1
You can set the %POSIX::SIGRT elements to set the POSIX realtime
d1861 1
a1861 1
signals there are available (SIGRTMAX - SIGRTMIN + 1, the SIGRTMAX is
d1864 1
a1864 1
Setting the %SIGRT elements is equivalent to calling this:
d1869 1
a1869 1
    my $sigact = POSIX::SigAction->new($handler, $sigset, $flags);
d1874 1
a1874 1
either use C<local> on $POSIX::SigRt::SIGACTION_FLAGS, or you can
d1876 2
a1877 2
STORE method of the %SIGRT calls C<new($rtsig, $handler, $SIGACTION_FLAGS)>,
where the $rtsig ranges from zero to SIGRTMAX - SIGRTMIN + 1).
d1879 1
a1879 1
Just as with any signal, you can use sigaction($rtsig, undef, $oa) to
d1886 1
a1886 1
=item SIGRTMIN
d1891 1
a1891 1
=item SIGRTMAX
d1898 1
a1898 1
=head2 POSIX::SigSet
d1902 1
a1902 1
=item new
d1912 1
a1912 1
Create a set with SIGUSR1.
d1916 1
a1916 1
=item addset
d1924 1
a1924 1
=item delset
d1932 1
a1932 1
=item emptyset
d1940 1
a1940 1
=item fillset
d1948 1
a1948 1
=item ismember
d1958 1
a1958 1
=head2 POSIX::Termios
d1962 1
a1962 1
=item new
d1966 2
a1967 2
C struct.  new() mallocs a new one, getattr() fills it from a file descriptor,
and setattr() sets a file descriptor's parameters to match Termios' contents.
d1971 1
a1971 1
=item getattr
d1986 1
a1986 1
=item getcc
d1993 1
a1993 1
=item getcflag
d1999 1
a1999 1
=item getiflag
d2005 1
a2005 1
=item getispeed
d2011 1
a2011 1
=item getlflag
d2017 1
a2017 1
=item getoflag
d2023 1
a2023 1
=item getospeed
d2029 1
a2029 1
=item setattr
d2039 1
a2039 1
=item setcc
d2046 1
a2046 1
=item setcflag
d2052 1
a2052 1
=item setiflag
d2058 1
a2058 1
=item setispeed
d2066 1
a2066 1
=item setlflag
d2072 1
a2072 1
=item setoflag
d2078 1
a2078 1
=item setospeed
d2088 1
a2088 1
B38400 B75 B200 B134 B300 B1800 B150 B0 B19200 B1200 B9600 B600 B4800 B50 B2400 B110
d2092 1
a2092 1
TCSADRAIN TCSANOW TCOON TCIOFLUSH TCOFLUSH TCION TCIFLUSH TCSAFLUSH TCIOFF TCOOFF
d2094 1
a2094 1
=item c_cc field values
d2096 1
a2096 1
VEOF VEOL VERASE VINTR VKILL VQUIT VSUSP VSTART VSTOP VMIN VTIME NCCS
d2098 1
a2098 1
=item c_cflag field values
d2100 1
a2100 1
CLOCAL CREAD CSIZE CS5 CS6 CS7 CS8 CSTOPB HUPCL PARENB PARODD
d2102 1
a2102 1
=item c_iflag field values
d2104 1
a2104 1
BRKINT ICRNL IGNBRK IGNCR IGNPAR INLCR INPCK ISTRIP IXOFF IXON PARMRK
d2106 1
a2106 1
=item c_lflag field values
d2108 1
a2108 1
ECHO ECHOE ECHOK ECHONL ICANON IEXTEN ISIG NOFLSH TOSTOP
d2110 1
a2110 1
=item c_oflag field values
d2112 1
a2112 1
OPOST
d2122 2
a2123 1
_PC_CHOWN_RESTRICTED _PC_LINK_MAX _PC_MAX_CANON _PC_MAX_INPUT _PC_NAME_MAX _PC_NO_TRUNC _PC_PATH_MAX _PC_PIPE_BUF _PC_VDISABLE
d2133 5
a2137 1
_POSIX_ARG_MAX _POSIX_CHILD_MAX _POSIX_CHOWN_RESTRICTED _POSIX_JOB_CONTROL _POSIX_LINK_MAX _POSIX_MAX_CANON _POSIX_MAX_INPUT _POSIX_NAME_MAX _POSIX_NGROUPS_MAX _POSIX_NO_TRUNC _POSIX_OPEN_MAX _POSIX_PATH_MAX _POSIX_PIPE_BUF _POSIX_SAVED_IDS _POSIX_SSIZE_MAX _POSIX_STREAM_MAX _POSIX_TZNAME_MAX _POSIX_VDISABLE _POSIX_VERSION
d2147 3
a2149 1
_SC_ARG_MAX _SC_CHILD_MAX _SC_CLK_TCK _SC_JOB_CONTROL _SC_NGROUPS_MAX _SC_OPEN_MAX _SC_PAGESIZE _SC_SAVED_IDS _SC_STREAM_MAX _SC_TZNAME_MAX _SC_VERSION
d2159 11
a2169 10
E2BIG EACCES EADDRINUSE EADDRNOTAVAIL EAFNOSUPPORT EAGAIN EALREADY EBADF
EBUSY ECHILD ECONNABORTED ECONNREFUSED ECONNRESET EDEADLK EDESTADDRREQ
EDOM EDQUOT EEXIST EFAULT EFBIG EHOSTDOWN EHOSTUNREACH EINPROGRESS EINTR
EINVAL EIO EISCONN EISDIR ELOOP EMFILE EMLINK EMSGSIZE ENAMETOOLONG
ENETDOWN ENETRESET ENETUNREACH ENFILE ENOBUFS ENODEV ENOENT ENOEXEC
ENOLCK ENOMEM ENOPROTOOPT ENOSPC ENOSYS ENOTBLK ENOTCONN ENOTDIR
ENOTEMPTY ENOTSOCK ENOTTY ENXIO EOPNOTSUPP EPERM EPFNOSUPPORT EPIPE
EPROCLIM EPROTONOSUPPORT EPROTOTYPE ERANGE EREMOTE ERESTART EROFS
ESHUTDOWN ESOCKTNOSUPPORT ESPIPE ESRCH ESTALE ETIMEDOUT ETOOMANYREFS
ETXTBSY EUSERS EWOULDBLOCK EXDEV
d2179 3
a2181 1
FD_CLOEXEC F_DUPFD F_GETFD F_GETFL F_GETLK F_OK F_RDLCK F_SETFD F_SETFL F_SETLK F_SETLKW F_UNLCK F_WRLCK O_ACCMODE O_APPEND O_CREAT O_EXCL O_NOCTTY O_NONBLOCK O_RDONLY O_RDWR O_TRUNC O_WRONLY
d2191 5
a2195 1
DBL_DIG DBL_EPSILON DBL_MANT_DIG DBL_MAX DBL_MAX_10_EXP DBL_MAX_EXP DBL_MIN DBL_MIN_10_EXP DBL_MIN_EXP FLT_DIG FLT_EPSILON FLT_MANT_DIG FLT_MAX FLT_MAX_10_EXP FLT_MAX_EXP FLT_MIN FLT_MIN_10_EXP FLT_MIN_EXP FLT_RADIX FLT_ROUNDS LDBL_DIG LDBL_EPSILON LDBL_MANT_DIG LDBL_MAX LDBL_MAX_10_EXP LDBL_MAX_EXP LDBL_MIN LDBL_MIN_10_EXP LDBL_MIN_EXP
d2205 4
a2208 1
ARG_MAX CHAR_BIT CHAR_MAX CHAR_MIN CHILD_MAX INT_MAX INT_MIN LINK_MAX LONG_MAX LONG_MIN MAX_CANON MAX_INPUT MB_LEN_MAX NAME_MAX NGROUPS_MAX OPEN_MAX PATH_MAX PIPE_BUF SCHAR_MAX SCHAR_MIN SHRT_MAX SHRT_MIN SSIZE_MAX STREAM_MAX TZNAME_MAX UCHAR_MAX UINT_MAX ULONG_MAX USHRT_MAX
d2218 1
a2218 1
LC_ALL LC_COLLATE LC_CTYPE LC_MONETARY LC_NUMERIC LC_TIME
d2228 1
a2228 1
HUGE_VAL
d2238 5
a2242 5
SA_NOCLDSTOP SA_NOCLDWAIT SA_NODEFER SA_ONSTACK SA_RESETHAND SA_RESTART
SA_SIGINFO SIGABRT SIGALRM SIGCHLD SIGCONT SIGFPE SIGHUP SIGILL SIGINT
SIGKILL SIGPIPE SIGQUIT SIGSEGV SIGSTOP SIGTERM SIGTSTP SIGTTIN SIGTTOU
SIGUSR1 SIGUSR2 SIG_BLOCK SIG_DFL SIG_ERR SIG_IGN SIG_SETMASK
SIG_UNBLOCK
d2252 2
a2253 1
S_IRGRP S_IROTH S_IRUSR S_IRWXG S_IRWXO S_IRWXU S_ISGID S_ISUID S_IWGRP S_IWOTH S_IWUSR S_IXGRP S_IXOTH S_IXUSR
d2257 1
a2257 1
S_ISBLK S_ISCHR S_ISDIR S_ISFIFO S_ISREG
d2267 1
a2267 1
EXIT_FAILURE EXIT_SUCCESS MB_CUR_MAX RAND_MAX
d2277 1
a2277 1
BUFSIZ EOF FILENAME_MAX L_ctermid L_cuserid L_tmpname TMP_MAX
d2287 1
a2287 1
CLK_TCK CLOCKS_PER_SEC
d2297 1
a2297 1
R_OK SEEK_CUR SEEK_END SEEK_SET STDIN_FILENO STDOUT_FILENO STDERR_FILENO W_OK X_OK
d2307 1
a2307 1
WNOHANG WUNTRACED
d2311 1
a2311 1
=item WNOHANG
d2316 1
a2316 1
=item WUNTRACED
d2324 1
a2324 1
WIFEXITED WEXITSTATUS WIFSIGNALED WTERMSIG WIFSTOPPED WSTOPSIG
d2328 1
a2328 1
=item WIFEXITED
d2330 1
a2330 1
WIFEXITED(${^CHILD_ERROR_NATIVE}) returns true if the child process
d2333 1
a2333 1
=item WEXITSTATUS
d2335 2
a2336 2
WEXITSTATUS(${^CHILD_ERROR_NATIVE}) returns the normal exit status of
the child process (only meaningful if WIFEXITED(${^CHILD_ERROR_NATIVE})
d2339 1
a2339 1
=item WIFSIGNALED
d2341 1
a2341 1
WIFSIGNALED(${^CHILD_ERROR_NATIVE}) returns true if the child process
d2344 1
a2344 1
=item WTERMSIG
d2346 3
a2348 2
WTERMSIG(${^CHILD_ERROR_NATIVE}) returns the signal the child process
terminated for (only meaningful if WIFSIGNALED(${^CHILD_ERROR_NATIVE})
d2351 1
a2351 1
=item WIFSTOPPED
d2353 1
a2353 1
WIFSTOPPED(${^CHILD_ERROR_NATIVE}) returns true if the child process is
d2355 1
a2355 1
to waitpid())
d2357 1
a2357 1
=item WSTOPSIG
d2359 3
a2361 2
WSTOPSIG(${^CHILD_ERROR_NATIVE}) returns the signal the child process
was stopped for (only meaningful if WIFSTOPPED(${^CHILD_ERROR_NATIVE})
@


1.1
log
@Initial revision
@
text
@d415 1
a415 1
pathname on the filesystem which holds C</var/foo>.
d733 32
a764 21
	$loc = POSIX::setlocale( &POSIX::LC_ALL, "de" );
	print "Locale = $loc\n";
	$lconv = POSIX::localeconv();
	print "decimal_point	= ", $lconv->{decimal_point},	"\n";
	print "thousands_sep	= ", $lconv->{thousands_sep},	"\n";
	print "grouping	= ", $lconv->{grouping},	"\n";
	print "int_curr_symbol	= ", $lconv->{int_curr_symbol},	"\n";
	print "currency_symbol	= ", $lconv->{currency_symbol},	"\n";
	print "mon_decimal_point = ", $lconv->{mon_decimal_point}, "\n";
	print "mon_thousands_sep = ", $lconv->{mon_thousands_sep}, "\n";
	print "mon_grouping	= ", $lconv->{mon_grouping},	"\n";
	print "positive_sign	= ", $lconv->{positive_sign},	"\n";
	print "negative_sign	= ", $lconv->{negative_sign},	"\n";
	print "int_frac_digits	= ", $lconv->{int_frac_digits},	"\n";
	print "frac_digits	= ", $lconv->{frac_digits},	"\n";
	print "p_cs_precedes	= ", $lconv->{p_cs_precedes},	"\n";
	print "p_sep_by_space	= ", $lconv->{p_sep_by_space},	"\n";
	print "n_cs_precedes	= ", $lconv->{n_cs_precedes},	"\n";
	print "n_sep_by_space	= ", $lconv->{n_sep_by_space},	"\n";
	print "p_sign_posn	= ", $lconv->{p_sign_posn},	"\n";
	print "n_sign_posn	= ", $lconv->{n_sign_posn},	"\n";
@


1.1.1.1
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@@


1.1.1.2
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d415 1
a415 1
pathname on the filesystem which holds F</var/foo>.
d733 21
a753 26
	my $loc = POSIX::setlocale( &POSIX::LC_ALL, "de" );
	print "Locale: \"$loc\"\n";
	my $lconv = POSIX::localeconv();
	foreach my $property (qw(
		decimal_point
		thousands_sep
		grouping
		int_curr_symbol
		currency_symbol
		mon_decimal_point
		mon_thousands_sep
		mon_grouping
		positive_sign
		negative_sign
		int_frac_digits
		frac_digits
		p_cs_precedes
		p_sep_by_space
		n_cs_precedes
		n_sep_by_space
		p_sign_posn
		n_sign_posn
	))
	{
		printf qq(%s: "%s",\n), $property, $lconv->{$property};
	}
@


1.1.1.3
log
@Import perl-5.20.1
@
text
@d28 2
a29 2
compatibility feature.  You can stop the exporting by saying S<C<use
POSIX ()>> and then use the fully qualified names (I<e.g.>, C<POSIX::SEEK_END>),
d31 1
a31 1
default, S<C<use POSIX;>> has to import I<553 symbols>.
d48 3
a50 3
aren't implemented, and suggest using the Perl equivalent, should one
exist.  For example, trying to access the C<setjmp()> call will elicit the
message "C<setjmp() is C-specific: use eval {} instead>".
d54 2
a55 2
For example, one vendor may not define C<EDEADLK>, or the semantics of the
errno values set by C<open(2)> might not be quite right.  Perl does not
d58 1
a58 1
that your vendor has been lax and there's no usable C<ICANON> macro after
d65 1
a65 1
=item C<_exit>
d76 1
a76 1
=item C<abort>
d82 1
a82 1
=item C<abs>
d87 1
a87 1
=item C<access>
d100 1
a100 1
=item C<acos>
d105 1
a105 1
=item C<alarm>
d110 1
a110 1
=item C<asctime>
d119 2
a120 2
	$asctime = asctime($sec, $min, $hour, $mday, $mon,
			   $year, $wday, $yday, $isdst);
d126 1
a126 1
=item C<asin>
d131 1
a131 1
=item C<assert>
d136 1
a136 1
=item C<atan>
d141 1
a141 1
=item C<atan2>
d147 1
a147 1
=item C<atexit>
d149 1
a149 1
C<atexit()> is C-specific: use C<END {}> instead, see L<perlmod>.
d151 1
a151 1
=item C<atof>
d153 1
a153 1
C<atof()> is C-specific.  Perl converts strings to numbers transparently.
d156 1
a156 1
=item C<atoi>
d158 1
a158 1
C<atoi()> is C-specific.  Perl converts strings to numbers transparently.
d162 1
a162 1
=item C<atol>
d164 1
a164 1
C<atol()> is C-specific.  Perl converts strings to numbers transparently.
d168 1
a168 1
=item C<bsearch>
d170 1
a170 1
C<bsearch()> not supplied.  For doing binary search on wordlists,
d173 1
a173 1
=item C<calloc>
d175 1
a175 1
C<calloc()> is C-specific.  Perl does memory management transparently.
d177 1
a177 1
=item C<ceil>
d182 1
a182 1
=item C<chdir>
d187 1
a187 1
=item C<chmod>
d192 1
a192 1
=item C<chown>
d197 1
a197 1
=item C<clearerr>
d202 1
a202 1
=item C<clock>
d207 1
a207 1
=item C<close>
d219 1
a219 1
=item C<closedir>
d224 1
a224 1
=item C<cos>
d230 1
a230 1
=item C<cosh>
d235 1
a235 1
=item C<creat>
d245 1
a245 1
=item C<ctermid>
d251 1
a251 1
=item C<ctime>
d256 1
a256 1
=item C<cuserid>
d262 1
a262 1
=item C<difftime>
d268 1
a268 1
=item C<div>
d270 1
a270 1
C<div()> is C-specific, use L<perlfunc/int> on the usual C</> division and
d273 1
a273 1
=item C<dup>
d283 1
a283 1
=item C<dup2>
d293 1
a293 1
=item C<errno>
d301 1
a301 1
=item C<execl>
d303 1
a303 1
C<execl()> is C-specific, see L<perlfunc/exec>.
d305 1
a305 1
=item C<execle>
d307 1
a307 1
C<execle()> is C-specific, see L<perlfunc/exec>.
d309 1
a309 1
=item C<execlp>
d311 1
a311 1
C<execlp()> is C-specific, see L<perlfunc/exec>.
d313 1
a313 1
=item C<execv>
d315 1
a315 1
C<execv()> is C-specific, see L<perlfunc/exec>.
d317 1
a317 1
=item C<execve>
d319 1
a319 1
C<execve()> is C-specific, see L<perlfunc/exec>.
d321 1
a321 1
=item C<execvp>
d323 1
a323 1
C<execvp()> is C-specific, see L<perlfunc/exec>.
d325 1
a325 1
=item C<exit>
d330 1
a330 1
=item C<exp>
d336 1
a336 1
=item C<fabs>
d341 1
a341 1
=item C<fclose>
d345 1
a345 1
=item C<fcntl>
d350 1
a350 1
=item C<fdopen>
d354 1
a354 1
=item C<feof>
d358 1
a358 1
=item C<ferror>
d362 1
a362 1
=item C<fflush>
d365 1
a365 1
See also C<L<perlvar/$OUTPUT_AUTOFLUSH>>.
d367 1
a367 1
=item C<fgetc>
d371 1
a371 1
=item C<fgetpos>
d375 1
a375 1
=item C<fgets>
d380 1
a380 1
=item C<fileno>
d384 1
a384 1
=item C<floor>
d389 1
a389 1
=item C<fmod>
d399 1
a399 1
=item C<fopen>
d403 1
a403 1
=item C<fork>
d409 1
a409 1
=item C<fpathconf>
d418 1
a418 1
	$path_max = POSIX::fpathconf($fd, &POSIX::_PC_PATH_MAX);
d422 1
a422 1
=item C<fprintf>
d424 1
a424 1
C<fprintf()> is C-specific, see L<perlfunc/printf> instead.
d426 1
a426 1
=item C<fputc>
d428 1
a428 1
C<fputc()> is C-specific, see L<perlfunc/print> instead.
d430 1
a430 1
=item C<fputs>
d432 1
a432 1
C<fputs()> is C-specific, see L<perlfunc/print> instead.
d434 1
a434 1
=item C<fread>
d436 1
a436 1
C<fread()> is C-specific, see L<perlfunc/read> instead.
d438 1
a438 1
=item C<free>
d440 1
a440 1
C<free()> is C-specific.  Perl does memory management transparently.
d442 1
a442 1
=item C<freopen>
d444 1
a444 1
C<freopen()> is C-specific, see L<perlfunc/open> instead.
d446 1
a446 1
=item C<frexp>
d452 1
a452 1
=item C<fscanf>
d454 1
a454 1
C<fscanf()> is C-specific, use E<lt>E<gt> and regular expressions instead.
d456 1
a456 1
=item C<fseek>
d460 1
a460 1
=item C<fsetpos>
d464 1
a464 1
=item C<fstat>
d473 1
a473 1
=item C<fsync>
d477 1
a477 1
=item C<ftell>
d481 1
a481 1
=item C<fwrite>
d483 1
a483 1
C<fwrite()> is C-specific, see L<perlfunc/print> instead.
d485 1
a485 1
=item C<getc>
d490 1
a490 1
=item C<getchar>
d495 1
a495 1
=item C<getcwd>
d500 1
a500 1
=item C<getegid>
d505 1
a505 1
=item C<getenv>
d510 1
a510 1
=item C<geteuid>
d515 1
a515 1
=item C<getgid>
d520 1
a520 1
=item C<getgrgid>
d526 1
a526 1
=item C<getgrnam>
d531 1
a531 1
=item C<getgroups>
d536 1
a536 1
=item C<getlogin>
d542 1
a542 1
=item C<getpgrp>
d548 1
a548 1
=item C<getpid>
d553 1
a553 1
=item C<getppid>
d559 1
a559 1
=item C<getpwnam>
d564 1
a564 1
=item C<getpwuid>
d569 1
a569 1
=item C<gets>
d579 1
a579 1
=item C<getuid>
d584 1
a584 1
=item C<gmtime>
d590 1
a590 1
=item C<isalnum>
d592 14
a605 29
Deprecated function whose use raises a warning, and which is slated to
be removed in a future Perl version.  It is very similar to matching
against S<C<qr/ ^ [[:alnum:]]+ $ /x>>, which you should convert to use
instead.  The function is deprecated because 1) it doesn't handle UTF-8
encoded strings properly; and 2) it returns C<TRUE> even if the input is
the empty string.  The function return is always based on the current
locale, whereas using locale rules is optional with the regular
expression, based on pragmas in effect and pattern modifiers (see
L<perlre/Character set modifiers> and L<perlre/Which character set
modifier is in effect?>).

The function returns C<TRUE> if the input string is empty, or if the
corresponding C function returns C<TRUE> for every byte in the string.

You may want to use the C<L<E<sol>\wE<sol>|perlrecharclass/Word
characters>> construct instead.

=item C<isalpha>

Deprecated function whose use raises a warning, and which is slated to
be removed in a future Perl version.  It is very similar to matching
against S<C<qr/ ^ [[:alpha:]]+ $ /x>>, which you should convert to use
instead.  The function is deprecated because 1) it doesn't handle UTF-8
encoded strings properly; and 2) it returns C<TRUE> even if the input is
the empty string.  The function return is always based on the current
locale, whereas using locale rules is optional with the regular
expression, based on pragmas in effect and pattern modifiers (see
L<perlre/Character set modifiers> and L<perlre/Which character set
modifier is in effect?>).
d607 1
a607 4
The function returns C<TRUE> if the input string is empty, or if the
corresponding C function returns C<TRUE> for every byte in the string.

=item C<isatty>
d612 69
a680 1
=item C<iscntrl>
d682 1
a682 148
Deprecated function whose use raises a warning, and which is slated to
be removed in a future Perl version.  It is very similar to matching
against S<C<qr/ ^ [[:cntrl:]]+ $ /x>>, which you should convert to use
instead.  The function is deprecated because 1) it doesn't handle UTF-8
encoded strings properly; and 2) it returns C<TRUE> even if the input is
the empty string.  The function return is always based on the current
locale, whereas using locale rules is optional with the regular
expression, based on pragmas in effect and pattern modifiers (see
L<perlre/Character set modifiers> and L<perlre/Which character set
modifier is in effect?>).

The function returns C<TRUE> if the input string is empty, or if the
corresponding C function returns C<TRUE> for every byte in the string.

=item C<isdigit>

Deprecated function whose use raises a warning, and which is slated to
be removed in a future Perl version.  It is very similar to matching
against S<C<qr/ ^ [[:digit:]]+ $ /x>>, which you should convert to use
instead.  The function is deprecated because 1) it doesn't handle UTF-8
encoded strings properly; and 2) it returns C<TRUE> even if the input is
the empty string.  The function return is always based on the current
locale, whereas using locale rules is optional with the regular
expression, based on pragmas in effect and pattern modifiers (see
L<perlre/Character set modifiers> and L<perlre/Which character set
modifier is in effect?>).

The function returns C<TRUE> if the input string is empty, or if the
corresponding C function returns C<TRUE> for every byte in the string.

You may want to use the C<L<E<sol>\dE<sol>|perlrecharclass/Digits>>
construct instead.

=item C<isgraph>

Deprecated function whose use raises a warning, and which is slated to
be removed in a future Perl version.  It is very similar to matching
against S<C<qr/ ^ [[:graph:]]+ $ /x>>, which you should convert to use
instead.  The function is deprecated because 1) it doesn't handle UTF-8
encoded strings properly; and 2) it returns C<TRUE> even if the input is
the empty string.  The function return is always based on the current
locale, whereas using locale rules is optional with the regular
expression, based on pragmas in effect and pattern modifiers (see
L<perlre/Character set modifiers> and L<perlre/Which character set
modifier is in effect?>).

The function returns C<TRUE> if the input string is empty, or if the
corresponding C function returns C<TRUE> for every byte in the string.

=item C<islower>

Deprecated function whose use raises a warning, and which is slated to
be removed in a future Perl version.  It is very similar to matching
against S<C<qr/ ^ [[:lower:]]+ $ /x>>, which you should convert to use
instead.  The function is deprecated because 1) it doesn't handle UTF-8
encoded strings properly; and 2) it returns C<TRUE> even if the input is
the empty string.  The function return is always based on the current
locale, whereas using locale rules is optional with the regular
expression, based on pragmas in effect and pattern modifiers (see
L<perlre/Character set modifiers> and L<perlre/Which character set
modifier is in effect?>).

The function returns C<TRUE> if the input string is empty, or if the
corresponding C function returns C<TRUE> for every byte in the string.

Do B<not> use C</[a-z]/> unless you don't care about the current locale.

=item C<isprint>

Deprecated function whose use raises a warning, and which is slated to
be removed in a future Perl version.  It is very similar to matching
against S<C<qr/ ^ [[:print:]]+ $ /x>>, which you should convert to use
instead.  The function is deprecated because 1) it doesn't handle UTF-8
encoded strings properly; and 2) it returns C<TRUE> even if the input is
the empty string.  The function return is always based on the current
locale, whereas using locale rules is optional with the regular
expression, based on pragmas in effect and pattern modifiers (see
L<perlre/Character set modifiers> and L<perlre/Which character set
modifier is in effect?>).

The function returns C<TRUE> if the input string is empty, or if the
corresponding C function returns C<TRUE> for every byte in the string.

=item C<ispunct>

Deprecated function whose use raises a warning, and which is slated to
be removed in a future Perl version.  It is very similar to matching
against S<C<qr/ ^ [[:punct:]]+ $ /x>>, which you should convert to use
instead.  The function is deprecated because 1) it doesn't handle UTF-8
encoded strings properly; and 2) it returns C<TRUE> even if the input is
the empty string.  The function return is always based on the current
locale, whereas using locale rules is optional with the regular
expression, based on pragmas in effect and pattern modifiers (see
L<perlre/Character set modifiers> and L<perlre/Which character set
modifier is in effect?>).

The function returns C<TRUE> if the input string is empty, or if the
corresponding C function returns C<TRUE> for every byte in the string.

=item C<isspace>

Deprecated function whose use raises a warning, and which is slated to
be removed in a future Perl version.  It is very similar to matching
against S<C<qr/ ^ [[:space:]]+ $ /x>>, which you should convert to use
instead.  The function is deprecated because 1) it doesn't handle UTF-8
encoded strings properly; and 2) it returns C<TRUE> even if the input is
the empty string.  The function return is always based on the current
locale, whereas using locale rules is optional with the regular
expression, based on pragmas in effect and pattern modifiers (see
L<perlre/Character set modifiers> and L<perlre/Which character set
modifier is in effect?>).

The function returns C<TRUE> if the input string is empty, or if the
corresponding C function returns C<TRUE> for every byte in the string.

You may want to use the C<L<E<sol>\sE<sol>|perlrecharclass/Whitespace>>
construct instead.

=item C<isupper>

Deprecated function whose use raises a warning, and which is slated to
be removed in a future Perl version.  It is very similar to matching
against S<C<qr/ ^ [[:upper:]]+ $ /x>>, which you should convert to use
instead.  The function is deprecated because 1) it doesn't handle UTF-8
encoded strings properly; and 2) it returns C<TRUE> even if the input is
the empty string.  The function return is always based on the current
locale, whereas using locale rules is optional with the regular
expression, based on pragmas in effect and pattern modifiers (see
L<perlre/Character set modifiers> and L<perlre/Which character set
modifier is in effect?>).

The function returns C<TRUE> if the input string is empty, or if the
corresponding C function returns C<TRUE> for every byte in the string.

Do B<not> use C</[A-Z]/> unless you don't care about the current locale.

=item C<isxdigit>

Deprecated function whose use raises a warning, and which is slated to
be removed in a future Perl version.  It is very similar to matching
against S<C<qr/ ^ [[:xdigit:]]+ $ /x>>, which you should convert to use
instead.  The function is deprecated because 1) it doesn't handle UTF-8
encoded strings properly; and 2) it returns C<TRUE> even if the input is
the empty string.  The function return is always based on the current
locale, whereas using locale rules is optional with the regular
expression, based on pragmas in effect and pattern modifiers (see
L<perlre/Character set modifiers> and L<perlre/Which character set
modifier is in effect?>).
d684 6
a689 2
The function returns C<TRUE> if the input string is empty, or if the
corresponding C function returns C<TRUE> for every byte in the string.
d691 1
a691 1
=item C<kill>
d696 1
a696 1
=item C<labs>
d699 1
a699 1
C<labs()> is C-specific, see L<perlfunc/abs> instead.
d701 1
a701 1
=item C<lchown>
d709 1
a709 1
=item C<ldexp>
d716 1
a716 1
=item C<ldiv>
d719 1
a719 1
C<ldiv()> is C-specific, use C</> and C<int()> instead.
d721 1
a721 1
=item C<link>
d726 1
a726 1
=item C<localeconv>
d729 1
a729 4
containing the current locale formatting values.  Users of this function
should also read L<perllocale>, which provides a comprehensive
discussion of Perl locale handling, including
L<a section devoted to this function|perllocale/The localeconv function>.
d757 1
a757 2
		printf qq(%s: "%s",\n),
			$property, $lconv->{$property};
d760 1
a760 1
=item C<localtime>
d765 1
a765 1
=item C<log>
d771 1
a771 1
=item C<log10>
d787 1
a787 1
=item C<longjmp>
d789 1
a789 1
C<longjmp()> is C-specific: use L<perlfunc/die> instead.
d791 1
a791 1
=item C<lseek>
d801 1
a801 1
=item C<malloc>
d803 1
a803 1
C<malloc()> is C-specific.  Perl does memory management transparently.
d805 1
a805 1
=item C<mblen>
d812 1
a812 1
=item C<mbstowcs>
d819 1
a819 1
=item C<mbtowc>
d826 1
a826 1
=item C<memchr>
d828 1
a828 1
C<memchr()> is C-specific, see L<perlfunc/index> instead.
d830 1
a830 1
=item C<memcmp>
d832 1
a832 1
C<memcmp()> is C-specific, use C<eq> instead, see L<perlop>.
d834 1
a834 1
=item C<memcpy>
d836 1
a836 1
C<memcpy()> is C-specific, use C<=>, see L<perlop>, or see L<perlfunc/substr>.
d838 1
a838 1
=item C<memmove>
d840 1
a840 1
C<memmove()> is C-specific, use C<=>, see L<perlop>, or see L<perlfunc/substr>.
d842 1
a842 1
=item C<memset>
d844 1
a844 1
C<memset()> is C-specific, use C<x> instead, see L<perlop>.
d846 1
a846 1
=item C<mkdir>
d851 1
a851 1
=item C<mkfifo>
d862 1
a862 1
=item C<mktime>
d868 1
a868 2
	mktime(sec, min, hour, mday, mon, year, wday = 0,
	       yday = 0, isdst = -1)
d883 1
a883 1
=item C<modf>
d889 1
a889 1
=item C<nice>
d898 1
a898 1
=item C<offsetof>
d900 1
a900 1
C<offsetof()> is C-specific, you probably want to see L<perlfunc/pack> instead.
d902 1
a902 1
=item C<open>
d917 1
a917 3
	$fd = POSIX::open(
		"foo", &POSIX::O_WRONLY | &POSIX::O_TRUNC
	);
d921 1
a921 3
	$fd = POSIX::open(
		"foo", &POSIX::O_CREAT | &POSIX::O_WRONLY, 0640
	);
d927 1
a927 1
=item C<opendir>
d937 1
a937 1
=item C<pathconf>
d944 1
a944 2
	$path_max = POSIX::pathconf( "/var",
				      &POSIX::_PC_PATH_MAX );
d948 1
a948 1
=item C<pause>
d955 1
a955 1
=item C<perror>
d958 1
a958 1
standard error stream the specified message followed by C<": "> and the
d962 1
a962 1
=item C<pipe>
d973 1
a973 1
=item C<pow>
d981 1
a981 1
=item C<printf>
d986 1
a986 1
=item C<putc>
d988 1
a988 1
C<putc()> is C-specific, see L<perlfunc/print> instead.
d990 1
a990 1
=item C<putchar>
d992 1
a992 1
C<putchar()> is C-specific, see L<perlfunc/print> instead.
d994 1
a994 1
=item C<puts>
d996 1
a996 1
C<puts()> is C-specific, see L<perlfunc/print> instead.
d998 1
a998 1
=item C<qsort>
d1000 1
a1000 1
C<qsort()> is C-specific, see L<perlfunc/sort> instead.
d1002 1
a1002 1
=item C<raise>
d1007 1
a1007 1
=item C<rand>
d1011 1
a1011 1
=item C<read>
d1024 1
a1024 1
=item C<readdir>
d1029 1
a1029 1
=item C<realloc>
d1031 1
a1031 1
C<realloc()> is C-specific.  Perl does memory management transparently.
d1033 1
a1033 1
=item C<remove>
d1038 1
a1038 1
=item C<rename>
d1043 1
a1043 1
=item C<rewind>
d1047 1
a1047 1
=item C<rewinddir>
d1052 1
a1052 1
=item C<rmdir>
d1057 1
a1057 1
=item C<scanf>
d1059 1
a1059 1
C<scanf()> is C-specific, use E<lt>E<gt> and regular expressions instead,
d1062 1
a1062 1
=item C<setgid>
d1071 1
a1071 1
=item C<setjmp>
d1076 1
a1076 1
=item C<setlocale>
d1078 1
a1078 11
Modifies and queries the program's underlying locale.  Users of this
function should read L<perllocale>, whch provides a comprehensive
discussion of Perl locale handling, knowledge of which is necessary to
properly use this function.  It contains
L<a section devoted to this function|perllocale/The setlocale function>.
The discussion here is merely a summary reference for C<setlocale()>.
Note that Perl itself is almost entirely unaffected by the locale
except within the scope of S<C<"use locale">>.  (Exceptions are listed
in L<perllocale/Not within the scope of any "use locale" variant>.)

The following examples assume
d1089 1
a1089 1
The following will query the current C<LC_CTYPE> category.  (No second
d1094 1
a1094 1
The following will set the C<LC_CTYPE> behaviour according to the locale
d1096 1
a1096 1
Please see your system's C<setlocale(3)> documentation for the locale
d1101 1
a1101 1
The following will set the C<LC_COLLATE> behaviour to Argentinian
d1108 1
a1108 1
=item C<setpgid>
d1115 1
a1115 1
=item C<setsid>
d1120 1
a1120 1
=item C<setuid>
d1127 1
a1127 1
=item C<sigaction>
d1139 1
a1139 1
C<SIGHUP>), not a string (like C<"SIGHUP">), though Perl does try hard
d1142 1
a1142 1
If you use the C<SA_SIGINFO> flag, the signal handler will in addition to
d1162 2
a1163 2
of the raw binary contents of the C<siginfo> structure: if a system has
some non-POSIX fields, this third argument is where to C<unpack()> them
d1166 1
a1166 1
Note that not all C<siginfo> values make sense simultaneously (some are
d1171 1
a1171 1
=item C<siglongjmp>
d1173 1
a1173 1
C<siglongjmp()> is C-specific: use L<perlfunc/die> instead.
d1175 1
a1175 1
=item C<sigpending>
d1187 1
a1187 1
=item C<sigprocmask>
d1203 1
a1203 1
=item C<sigsetjmp>
d1208 1
a1208 1
=item C<sigsuspend>
d1220 1
a1220 1
=item C<sin>
d1226 1
a1226 1
=item C<sinh>
d1232 1
a1232 1
=item C<sleep>
d1241 1
a1241 1
=item C<sprintf>
d1247 1
a1247 1
=item C<sqrt>
d1253 1
a1253 1
=item C<srand>
d1257 1
a1257 1
=item C<sscanf>
d1259 1
a1259 1
C<sscanf()> is C-specific, use regular expressions instead,
d1262 1
a1262 1
=item C<stat>
d1267 1
a1267 1
=item C<strcat>
d1269 1
a1269 1
C<strcat()> is C-specific, use C<.=> instead, see L<perlop>.
d1271 1
a1271 1
=item C<strchr>
d1273 1
a1273 1
C<strchr()> is C-specific, see L<perlfunc/index> instead.
d1275 1
a1275 1
=item C<strcmp>
d1277 1
a1277 1
C<strcmp()> is C-specific, use C<eq> or C<cmp> instead, see L<perlop>.
d1279 1
a1279 1
=item C<strcoll>
d1286 1
a1286 1
=item C<strcpy>
d1288 1
a1288 1
C<strcpy()> is C-specific, use C<=> instead, see L<perlop>.
d1290 1
a1290 1
=item C<strcspn>
d1292 1
a1292 1
C<strcspn()> is C-specific, use regular expressions instead,
d1295 1
a1295 1
=item C<strerror>
d1300 1
a1300 1
=item C<strftime>
d1306 1
a1306 2
	strftime(fmt, sec, min, hour, mday, mon, year,
		 wday = -1, yday = -1, isdst = -1)
d1333 1
a1333 2
	$str = POSIX::strftime( "%A, %B %d, %Y",
				 0, 0, 0, 12, 11, 95, 2 );
d1336 1
a1336 1
=item C<strlen>
d1338 1
a1338 1
C<strlen()> is C-specific, use C<length()> instead, see L<perlfunc/length>.
d1340 1
a1340 1
=item C<strncat>
d1342 1
a1342 1
C<strncat()> is C-specific, use C<.=> instead, see L<perlop>.
d1344 1
a1344 1
=item C<strncmp>
d1346 1
a1346 1
C<strncmp()> is C-specific, use C<eq> instead, see L<perlop>.
d1348 1
a1348 1
=item C<strncpy>
d1350 1
a1350 1
C<strncpy()> is C-specific, use C<=> instead, see L<perlop>.
d1352 1
a1352 1
=item C<strpbrk>
d1354 1
a1354 1
C<strpbrk()> is C-specific, use regular expressions instead,
d1357 1
a1357 1
=item C<strrchr>
d1359 1
a1359 1
C<strrchr()> is C-specific, see L<perlfunc/rindex> instead.
d1361 1
a1361 1
=item C<strspn>
d1363 1
a1363 1
C<strspn()> is C-specific, use regular expressions instead,
d1366 1
a1366 1
=item C<strstr>
d1371 1
a1371 1
=item C<strtod>
d1375 5
a1379 7
POSIX-compliant systems set C<$!> (C<$ERRNO>) to indicate a translation
error, so clear C<$!> before calling strtod.  However, non-POSIX systems
may not check for overflow, and therefore will never set C<$!>.

strtod respects any POSIX I<setlocale()> C<LC_TIME> settings,
regardless of whether or not it is called from Perl code that is within
the scope of S<C<use locale>>.
d1381 1
a1381 1
To parse a string C<$str> as a floating point number use
d1386 1
a1386 1
The second returned item and C<$!> can be used to check for valid input:
d1394 1
a1394 1
=item C<strtok>
d1396 1
a1396 1
C<strtok()> is C-specific, use regular expressions instead, see
d1399 1
a1399 1
=item C<strtol>
d1403 3
a1405 3
POSIX-compliant systems set C<$!> (C<$ERRNO>) to indicate a translation
error, so clear C<$!> before calling C<strtol>.  However, non-POSIX systems
may not check for overflow, and therefore will never set C<$!>.
d1407 1
a1407 1
C<strtol> should respect any POSIX I<setlocale()> settings.
d1409 1
a1409 1
To parse a string C<$str> as a number in some base C<$base> use
d1421 1
a1421 1
The second returned item and C<$!> can be used to check for valid input:
d1429 1
a1429 1
=item C<strtoul>
d1431 2
a1432 2
String to unsigned (long) integer translation.  C<strtoul()> is identical
to C<strtol()> except that C<strtoul()> only parses unsigned integers.  See
d1435 2
a1436 2
Note: Some vendors supply C<strtod()> and C<strtol()> but not C<strtoul()>.
Other vendors that do supply C<strtoul()> parse "-1" as a valid value.
d1438 1
a1438 1
=item C<strxfrm>
d1449 1
a1449 1
=item C<sysconf>
d1459 1
a1459 1
=item C<system>
d1464 1
a1464 1
=item C<tan>
d1469 1
a1469 1
=item C<tanh>
d1474 1
a1474 1
=item C<tcdrain>
d1481 1
a1481 1
=item C<tcflow>
d1488 1
a1488 1
=item C<tcflush>
d1495 1
a1495 1
=item C<tcgetpgrp>
d1501 1
a1501 1
=item C<tcsendbreak>
d1508 1
a1508 1
=item C<tcsetpgrp>
d1516 1
a1516 1
=item C<time>
d1522 1
a1522 1
=item C<times>
d1524 1
a1524 1
The C<times()> function returns elapsed realtime since some point in the past
d1529 1
a1529 2
    ($realtime, $user, $system, $cuser, $csystem) 
	= POSIX::times();
d1534 1
a1534 1
=item C<tmpfile>
d1538 1
a1538 1
=item C<tmpnam>
d1545 1
a1545 1
documentation for the C library C<tmpnam()> function, this interface
d1548 1
a1548 1
=item C<tolower>
d1555 1
a1555 1
=item C<toupper>
d1562 1
a1562 1
=item C<ttyname>
d1567 1
a1567 1
=item C<tzname>
d1574 1
a1574 1
=item C<tzset>
d1581 1
a1581 1
=item C<umask>
d1587 1
a1587 1
=item C<uname>
d1591 1
a1591 2
	($sysname, $nodename, $release, $version, $machine)
		= POSIX::uname();
d1602 1
a1602 1
=item C<ungetc>
d1606 1
a1606 1
=item C<unlink>
d1611 1
a1611 1
=item C<utime>
d1617 1
a1617 1
=item C<vfprintf>
d1619 1
a1619 1
C<vfprintf()> is C-specific, see L<perlfunc/printf> instead.
d1621 1
a1621 1
=item C<vprintf>
d1623 1
a1623 1
C<vprintf()> is C-specific, see L<perlfunc/printf> instead.
d1625 1
a1625 1
=item C<vsprintf>
d1627 1
a1627 1
C<vsprintf()> is C-specific, see L<perlfunc/sprintf> instead.
d1629 1
a1629 1
=item C<wait>
d1634 1
a1634 1
=item C<waitpid>
d1642 1
a1642 1
=item C<wcstombs>
d1649 1
a1649 1
=item C<wctomb>
d1656 1
a1656 1
=item C<write>
d1673 1
a1673 1
=head2 C<POSIX::SigAction>
d1677 1
a1677 1
=item C<new>
d1687 1
a1687 3
	$sigaction = POSIX::SigAction->new(
			\&handler, $sigset, &POSIX::SA_NOCLDSTOP
		     );
d1696 1
a1696 1
=item C<handler>
d1698 1
a1698 1
=item C<mask>
d1700 1
a1700 1
=item C<flags>
d1707 1
a1707 1
=item C<safe>
d1726 1
a1726 1
=head2 C<POSIX::SigRt>
d1730 1
a1730 1
=item C<%SIGRT>
d1733 3
a1735 3
the standard C<%SIG>, the C<$POSIX::SIGRT{SIGRTMIN}> is roughly equivalent
to C<$SIG{SIGRTMIN}>, but the right POSIX moves (see below) are made with
the C<POSIX::SigSet> and C<POSIX::sigaction> instead of accessing the C<%SIG>.
d1737 1
a1737 1
You can set the C<%POSIX::SIGRT> elements to set the POSIX realtime
d1740 1
a1740 1
signals there are available S<C<(SIGRTMAX - SIGRTMIN + 1>>, the C<SIGRTMAX> is
d1743 1
a1743 1
Setting the C<%SIGRT> elements is equivalent to calling this:
d1748 1
a1748 1
    my $sigact = POSIX::SigAction->new($handler,$sigset,$flags);
d1753 1
a1753 1
either use C<local> on C<$POSIX::SigRt::SIGACTION_FLAGS>, or you can
d1755 2
a1756 2
STORE method of the C<%SIGRT> calls C<new($rtsig, $handler, $SIGACTION_FLAGS)>,
where the C<$rtsig> ranges from zero to S<C<SIGRTMAX - SIGRTMIN + 1)>>.
d1758 1
a1758 1
Just as with any signal, you can use C<sigaction($rtsig, undef, $oa)> to
d1765 1
a1765 1
=item C<SIGRTMIN>
d1770 1
a1770 1
=item C<SIGRTMAX>
d1777 1
a1777 1
=head2 C<POSIX::SigSet>
d1781 1
a1781 1
=item C<new>
d1791 1
a1791 1
Create a set with C<SIGUSR1>.
d1795 1
a1795 1
=item C<addset>
d1803 1
a1803 1
=item C<delset>
d1811 1
a1811 1
=item C<emptyset>
d1819 1
a1819 1
=item C<fillset>
d1827 1
a1827 1
=item C<ismember>
d1837 1
a1837 1
=head2 C<POSIX::Termios>
d1841 1
a1841 1
=item C<new>
d1845 2
a1846 2
C struct.  C<new()> mallocs a new one, C<getattr()> fills it from a file descriptor,
and C<setattr()> sets a file descriptor's parameters to match Termios' contents.
d1850 1
a1850 1
=item C<getattr>
d1865 1
a1865 1
=item C<getcc>
d1872 1
a1872 1
=item C<getcflag>
d1878 1
a1878 1
=item C<getiflag>
d1884 1
a1884 1
=item C<getispeed>
d1890 1
a1890 1
=item C<getlflag>
d1896 1
a1896 1
=item C<getoflag>
d1902 1
a1902 1
=item C<getospeed>
d1908 1
a1908 1
=item C<setattr>
d1918 1
a1918 1
=item C<setcc>
d1925 1
a1925 1
=item C<setcflag>
d1931 1
a1931 1
=item C<setiflag>
d1937 1
a1937 1
=item C<setispeed>
d1945 1
a1945 1
=item C<setlflag>
d1951 1
a1951 1
=item C<setoflag>
d1957 1
a1957 1
=item C<setospeed>
d1967 1
a1967 1
C<B38400> C<B75> C<B200> C<B134> C<B300> C<B1800> C<B150> C<B0> C<B19200> C<B1200> C<B9600> C<B600> C<B4800> C<B50> C<B2400> C<B110>
d1971 1
a1971 1
C<TCSADRAIN> C<TCSANOW> C<TCOON> C<TCIOFLUSH> C<TCOFLUSH> C<TCION> C<TCIFLUSH> C<TCSAFLUSH> C<TCIOFF> C<TCOOFF>
d1973 1
a1973 1
=item C<c_cc> field values
d1975 1
a1975 1
C<VEOF> C<VEOL> C<VERASE> C<VINTR> C<VKILL> C<VQUIT> C<VSUSP> C<VSTART> C<VSTOP> C<VMIN> C<VTIME> C<NCCS>
d1977 1
a1977 1
=item C<c_cflag> field values
d1979 1
a1979 1
C<CLOCAL> C<CREAD> C<CSIZE> C<CS5> C<CS6> C<CS7> C<CS8> C<CSTOPB> C<HUPCL> C<PARENB> C<PARODD>
d1981 1
a1981 1
=item C<c_iflag> field values
d1983 1
a1983 1
C<BRKINT> C<ICRNL> C<IGNBRK> C<IGNCR> C<IGNPAR> C<INLCR> C<INPCK> C<ISTRIP> C<IXOFF> C<IXON> C<PARMRK>
d1985 1
a1985 1
=item C<c_lflag> field values
d1987 1
a1987 1
C<ECHO> C<ECHOE> C<ECHOK> C<ECHONL> C<ICANON> C<IEXTEN> C<ISIG> C<NOFLSH> C<TOSTOP>
d1989 1
a1989 1
=item C<c_oflag> field values
d1991 1
a1991 1
C<OPOST>
d2001 1
a2001 2
C<_PC_CHOWN_RESTRICTED> C<_PC_LINK_MAX> C<_PC_MAX_CANON> C<_PC_MAX_INPUT> C<_PC_NAME_MAX>
C<_PC_NO_TRUNC> C<_PC_PATH_MAX> C<_PC_PIPE_BUF> C<_PC_VDISABLE>
d2011 1
a2011 5
C<_POSIX_ARG_MAX> C<_POSIX_CHILD_MAX> C<_POSIX_CHOWN_RESTRICTED> C<_POSIX_JOB_CONTROL>
C<_POSIX_LINK_MAX> C<_POSIX_MAX_CANON> C<_POSIX_MAX_INPUT> C<_POSIX_NAME_MAX>
C<_POSIX_NGROUPS_MAX> C<_POSIX_NO_TRUNC> C<_POSIX_OPEN_MAX> C<_POSIX_PATH_MAX>
C<_POSIX_PIPE_BUF> C<_POSIX_SAVED_IDS> C<_POSIX_SSIZE_MAX> C<_POSIX_STREAM_MAX>
C<_POSIX_TZNAME_MAX> C<_POSIX_VDISABLE> C<_POSIX_VERSION>
d2021 1
a2021 3
C<_SC_ARG_MAX> C<_SC_CHILD_MAX> C<_SC_CLK_TCK> C<_SC_JOB_CONTROL> C<_SC_NGROUPS_MAX>
C<_SC_OPEN_MAX> C<_SC_PAGESIZE> C<_SC_SAVED_IDS> C<_SC_STREAM_MAX> C<_SC_TZNAME_MAX>
C<_SC_VERSION>
d2031 10
a2040 11
C<E2BIG> C<EACCES> C<EADDRINUSE> C<EADDRNOTAVAIL> C<EAFNOSUPPORT> C<EAGAIN> C<EALREADY> C<EBADF> C<EBADMSG>
C<EBUSY> C<ECANCELED> C<ECHILD> C<ECONNABORTED> C<ECONNREFUSED> C<ECONNRESET> C<EDEADLK> C<EDESTADDRREQ>
C<EDOM> C<EDQUOT> C<EEXIST> C<EFAULT> C<EFBIG> C<EHOSTDOWN> C<EHOSTUNREACH> C<EIDRM> C<EILSEQ> C<EINPROGRESS>
C<EINTR> C<EINVAL> C<EIO> C<EISCONN> C<EISDIR> C<ELOOP> C<EMFILE> C<EMLINK> C<EMSGSIZE> C<ENAMETOOLONG>
C<ENETDOWN> C<ENETRESET> C<ENETUNREACH> C<ENFILE> C<ENOBUFS> C<ENODATA> C<ENODEV> C<ENOENT> C<ENOEXEC>
C<ENOLCK> C<ENOLINK> C<ENOMEM> C<ENOMSG> C<ENOPROTOOPT> C<ENOSPC> C<ENOSR> C<ENOSTR> C<ENOSYS> C<ENOTBLK>
C<ENOTCONN> C<ENOTDIR> C<ENOTEMPTY> C<ENOTRECOVERABLE> C<ENOTSOCK> C<ENOTSUP> C<ENOTTY> C<ENXIO>
C<EOPNOTSUPP> C<EOTHER> C<EOVERFLOW> C<EOWNERDEAD> C<EPERM> C<EPFNOSUPPORT> C<EPIPE> C<EPROCLIM> C<EPROTO>
C<EPROTONOSUPPORT> C<EPROTOTYPE> C<ERANGE> C<EREMOTE> C<ERESTART> C<EROFS> C<ESHUTDOWN>
C<ESOCKTNOSUPPORT> C<ESPIPE> C<ESRCH> C<ESTALE> C<ETIME> C<ETIMEDOUT> C<ETOOMANYREFS> C<ETXTBSY> C<EUSERS>
C<EWOULDBLOCK> C<EXDEV>
d2050 1
a2050 3
C<FD_CLOEXEC> C<F_DUPFD> C<F_GETFD> C<F_GETFL> C<F_GETLK> C<F_OK> C<F_RDLCK> C<F_SETFD> C<F_SETFL> C<F_SETLK>
C<F_SETLKW> C<F_UNLCK> C<F_WRLCK> C<O_ACCMODE> C<O_APPEND> C<O_CREAT> C<O_EXCL> C<O_NOCTTY> C<O_NONBLOCK>
C<O_RDONLY> C<O_RDWR> C<O_TRUNC> C<O_WRONLY>
d2060 1
a2060 5
C<DBL_DIG> C<DBL_EPSILON> C<DBL_MANT_DIG> C<DBL_MAX> C<DBL_MAX_10_EXP> C<DBL_MAX_EXP> C<DBL_MIN>
C<DBL_MIN_10_EXP> C<DBL_MIN_EXP> C<FLT_DIG> C<FLT_EPSILON> C<FLT_MANT_DIG> C<FLT_MAX>
C<FLT_MAX_10_EXP> C<FLT_MAX_EXP> C<FLT_MIN> C<FLT_MIN_10_EXP> C<FLT_MIN_EXP> C<FLT_RADIX>
C<FLT_ROUNDS> C<LDBL_DIG> C<LDBL_EPSILON> C<LDBL_MANT_DIG> C<LDBL_MAX> C<LDBL_MAX_10_EXP>
C<LDBL_MAX_EXP> C<LDBL_MIN> C<LDBL_MIN_10_EXP> C<LDBL_MIN_EXP>
d2070 1
a2070 4
C<ARG_MAX> C<CHAR_BIT> C<CHAR_MAX> C<CHAR_MIN> C<CHILD_MAX> C<INT_MAX> C<INT_MIN> C<LINK_MAX> C<LONG_MAX>
C<LONG_MIN> C<MAX_CANON> C<MAX_INPUT> C<MB_LEN_MAX> C<NAME_MAX> C<NGROUPS_MAX> C<OPEN_MAX> C<PATH_MAX>
C<PIPE_BUF> C<SCHAR_MAX> C<SCHAR_MIN> C<SHRT_MAX> C<SHRT_MIN> C<SSIZE_MAX> C<STREAM_MAX> C<TZNAME_MAX>
C<UCHAR_MAX> C<UINT_MAX> C<ULONG_MAX> C<USHRT_MAX>
d2080 1
a2080 1
C<LC_ALL> C<LC_COLLATE> C<LC_CTYPE> C<LC_MONETARY> C<LC_NUMERIC> C<LC_TIME>
d2090 1
a2090 1
C<HUGE_VAL>
d2100 5
a2104 5
C<SA_NOCLDSTOP> C<SA_NOCLDWAIT> C<SA_NODEFER> C<SA_ONSTACK> C<SA_RESETHAND> C<SA_RESTART>
C<SA_SIGINFO> C<SIGABRT> C<SIGALRM> C<SIGCHLD> C<SIGCONT> C<SIGFPE> C<SIGHUP> C<SIGILL> C<SIGINT>
C<SIGKILL> C<SIGPIPE> C<SIGQUIT> C<SIGSEGV> C<SIGSTOP> C<SIGTERM> C<SIGTSTP> C<SIGTTIN> C<SIGTTOU>
C<SIGUSR1> C<SIGUSR2> C<SIG_BLOCK> C<SIG_DFL> C<SIG_ERR> C<SIG_IGN> C<SIG_SETMASK>
C<SIG_UNBLOCK>
d2114 1
a2114 2
C<S_IRGRP> C<S_IROTH> C<S_IRUSR> C<S_IRWXG> C<S_IRWXO> C<S_IRWXU> C<S_ISGID> C<S_ISUID> C<S_IWGRP> C<S_IWOTH>
C<S_IWUSR> C<S_IXGRP> C<S_IXOTH> C<S_IXUSR>
d2118 1
a2118 1
C<S_ISBLK> C<S_ISCHR> C<S_ISDIR> C<S_ISFIFO> C<S_ISREG>
d2128 1
a2128 1
C<EXIT_FAILURE> C<EXIT_SUCCESS> C<MB_CUR_MAX> C<RAND_MAX>
d2138 1
a2138 1
C<BUFSIZ> C<EOF> C<FILENAME_MAX> C<L_ctermid> C<L_cuserid> C<L_tmpname> C<TMP_MAX>
d2148 1
a2148 1
C<CLK_TCK> C<CLOCKS_PER_SEC>
d2158 1
a2158 1
C<R_OK> C<SEEK_CUR> C<SEEK_END> C<SEEK_SET> C<STDIN_FILENO> C<STDOUT_FILENO> C<STDERR_FILENO> C<W_OK> C<X_OK>
d2168 1
a2168 1
C<WNOHANG> C<WUNTRACED>
d2172 1
a2172 1
=item C<WNOHANG>
d2177 1
a2177 1
=item C<WUNTRACED>
d2185 1
a2185 1
C<WIFEXITED> C<WEXITSTATUS> C<WIFSIGNALED> C<WTERMSIG> C<WIFSTOPPED> C<WSTOPSIG>
d2189 1
a2189 1
=item C<WIFEXITED>
d2191 1
a2191 1
C<WIFEXITED(${^CHILD_ERROR_NATIVE})> returns true if the child process
d2194 1
a2194 1
=item C<WEXITSTATUS>
d2196 2
a2197 2
C<WEXITSTATUS(${^CHILD_ERROR_NATIVE})> returns the normal exit status of
the child process (only meaningful if C<WIFEXITED(${^CHILD_ERROR_NATIVE})>
d2200 1
a2200 1
=item C<WIFSIGNALED>
d2202 1
a2202 1
C<WIFSIGNALED(${^CHILD_ERROR_NATIVE})> returns true if the child process
d2205 1
a2205 1
=item C<WTERMSIG>
d2207 2
a2208 3
C<WTERMSIG(${^CHILD_ERROR_NATIVE})> returns the signal the child process
terminated for (only meaningful if
C<WIFSIGNALED(${^CHILD_ERROR_NATIVE})>
d2211 1
a2211 1
=item C<WIFSTOPPED>
d2213 1
a2213 1
C<WIFSTOPPED(${^CHILD_ERROR_NATIVE})> returns true if the child process is
d2215 1
a2215 1
to C<waitpid()>)
d2217 1
a2217 1
=item C<WSTOPSIG>
d2219 2
a2220 3
C<WSTOPSIG(${^CHILD_ERROR_NATIVE})> returns the signal the child process
was stopped for (only meaningful if
C<WIFSTOPPED(${^CHILD_ERROR_NATIVE})>
@


1.1.1.4
log
@Import perl-5.24.2
@
text
@d24 9
a45 9
I<Everything is exported by default> (with a handful of exceptions).
This is an unfortunate backwards compatibility feature and its use is
B<strongly L<discouraged|perlpolicy/discouraged>>.
You should either prevent the exporting (by saying S<C<use POSIX ();>>,
as usual) and then use fully qualified names (e.g. C<POSIX::SEEK_END>),
or give an explicit import list.
If you do neither and opt for the default (as in S<C<use POSIX;>>), you
will import I<hundreds and hundreds> of symbols into your namespace.

a104 6
=item C<acosh>

This is identical to the C function C<acosh()>, returning the
hyperbolic arcus cosine of its numerical argument [C99].  See also
L<Math::Trig>.

a130 6
=item C<asinh>

This is identical to the C function C<asinh()>, returning the
hyperbolic arcus sine of its numerical argument [C99].  See also
L<Math::Trig>.

a140 6
=item C<atanh>

This is identical to the C function C<atanh()>, returning the
hyperbolic arcus tangent of its numerical argument [C99].  See also
L<Math::Trig>.

d149 1
a149 1
Not implemented.  C<atexit()> is C-specific: use C<END {}> instead, see L<perlmod>.
d153 1
a153 1
Not implemented.  C<atof()> is C-specific.  Perl converts strings to numbers transparently.
d158 1
a158 1
Not implemented.  C<atoi()> is C-specific.  Perl converts strings to numbers transparently.
d164 1
a164 1
Not implemented.  C<atol()> is C-specific.  Perl converts strings to numbers transparently.
d175 1
a175 5
Not implemented.  C<calloc()> is C-specific.  Perl does memory management transparently.

=item C<cbrt>

The cube root [C99].
d199 1
a199 1
Not implemented.  Use the method C<IO::Handle::clearerr()> instead, to reset the error
a234 8
=item C<copysign>

Returns C<x> but with the sign of C<y> [C99].

 $x_with_sign_of_y = POSIX::copysign($x, $y);

See also L</signbit>.

d270 1
a270 1
Not implemented.  C<div()> is C-specific, use L<perlfunc/int> on the usual C</> division and
a292 8
=item C<erf>

The error function [C99].

=item C<erfc>

The complementary error function [C99].

d303 1
a303 1
Not implemented.  C<execl()> is C-specific, see L<perlfunc/exec>.
d307 1
a307 1
Not implemented.  C<execle()> is C-specific, see L<perlfunc/exec>.
d311 1
a311 1
Not implemented.  C<execlp()> is C-specific, see L<perlfunc/exec>.
d315 1
a315 1
Not implemented.  C<execv()> is C-specific, see L<perlfunc/exec>.
d319 1
a319 1
Not implemented.  C<execve()> is C-specific, see L<perlfunc/exec>.
d323 1
a323 1
Not implemented.  C<execvp()> is C-specific, see L<perlfunc/exec>.
a335 6
=item C<expm1>

Equivalent to C<exp(x) - 1>, but more precise for small argument values [C99].

See also L</log1p>.

d343 1
a343 1
Not implemented.  Use method C<IO::Handle::close()> instead, or see L<perlfunc/close>.
d352 1
a352 1
Not implemented.  Use method C<IO::Handle::new_from_fd()> instead, or see L<perlfunc/open>.
d356 1
a356 1
Not implemented.  Use method C<IO::Handle::eof()> instead, or see L<perlfunc/eof>.
d360 1
a360 1
Not implemented.  Use method C<IO::Handle::error()> instead.
d364 1
a364 1
Not implemented.  Use method C<IO::Handle::flush()> instead.
d369 1
a369 1
Not implemented.  Use method C<IO::Handle::getc()> instead, or see L<perlfunc/read>.
d373 1
a373 1
Not implemented.  Use method C<IO::Seekable::getpos()> instead, or see L<perlfunc/seek>.
d377 1
a377 1
Not implemented.  Use method C<IO::Handle::gets()> instead.  Similar to E<lt>E<gt>, also known
d382 1
a382 1
Not implemented.  Use method C<IO::Handle::fileno()> instead, or see L<perlfunc/fileno>.
a388 35
=item C<fdim>

"Positive difference", S<C<x - y>> if S<C<x E<gt> y>>, zero otherwise [C99].

=item C<fegetround>

Returns the current floating point rounding mode, one of

  FE_TONEAREST FE_TOWARDZERO FE_UPWARD FE_UPWARD

C<FE_TONEAREST> is like L</round>, C<FE_TOWARDZERO> is like L</trunc> [C99].

=item C<fesetround>

Sets the floating point rounding mode, see L</fegetround> [C99].

=item C<fma>

"Fused multiply-add", S<C<x * y + z>>, possibly faster (and less lossy)
than the explicit two operations [C99].

 my $fused = POSIX::fma($x, $y, $z);

=item C<fmax>

Maximum of C<x> and C<y>, except when either is C<NaN>, returns the other [C99].

 my $min = POSIX::fmax($x, $y);

=item C<fmin>

Minimum of C<x> and C<y>, except when either is C<NaN>, returns the other [C99].

 my $min = POSIX::fmin($x, $y);

d395 1
a395 1
It returns the remainder S<C<$r = $x - $n*$y>>, where S<C<$n = trunc($x/$y)>>.
d401 1
a401 1
Not implemented.  Use method C<IO::File::open()> instead, or see L<perlfunc/open>.
a421 11
=item C<fpclassify>

Returns one of

  FP_NORMAL FP_ZERO FP_SUBNORMAL FP_INFINITE FP_NAN

telling the class of the argument [C99].  C<FP_INFINITE> is positive
or negative infinity, C<FP_NAN> is not-a-number.  C<FP_SUBNORMAL>
means subnormal numbers (also known as denormals), very small numbers
with low precision. C<FP_ZERO> is zero.  C<FP_NORMAL> is all the rest.

d424 1
a424 1
Not implemented.  C<fprintf()> is C-specific, see L<perlfunc/printf> instead.
d428 1
a428 1
Not implemented.  C<fputc()> is C-specific, see L<perlfunc/print> instead.
d432 1
a432 1
Not implemented.  C<fputs()> is C-specific, see L<perlfunc/print> instead.
d436 1
a436 1
Not implemented.  C<fread()> is C-specific, see L<perlfunc/read> instead.
d440 1
a440 1
Not implemented.  C<free()> is C-specific.  Perl does memory management transparently.
d444 1
a444 1
Not implemented.  C<freopen()> is C-specific, see L<perlfunc/open> instead.
d454 1
a454 1
Not implemented.  C<fscanf()> is C-specific, use E<lt>E<gt> and regular expressions instead.
d458 1
a458 1
Not implemented.  Use method C<IO::Seekable::seek()> instead, or see L<perlfunc/seek>.
d462 1
a462 1
Not implemented.  Use method C<IO::Seekable::setpos()> instead, or seek L<perlfunc/seek>.
d475 1
a475 1
Not implemented.  Use method C<IO::Handle::sync()> instead.
d479 1
a479 1
Not implemented.  Use method C<IO::Seekable::tell()> instead, or see L<perlfunc/tell>.
d483 1
a483 1
Not implemented.  C<fwrite()> is C-specific, see L<perlfunc/print> instead.
a541 11
=item C<getpayload>

	use POSIX ':nan_payload';
	getpayload($var)

Returns the C<NaN> payload.

Note the API instability warning in L</setpayload>.

See L</nan> for more discussion about C<NaN>.

d590 1
a590 1
=item C<hypot>
d592 10
a601 2
Equivalent to C<S<sqrt(x * x + y * y)>> except more stable on very large
or very small arguments [C99].
d603 2
a604 1
=item C<ilogb>
d606 2
a607 1
Integer binary logarithm [C99]
d609 1
a609 1
For example C<ilogb(20)> is 4, as an integer.
d611 10
a620 1
See also L</logb>.
d622 2
a623 21
=item C<Inf>

The infinity as a constant:

   use POSIX qw(Inf);
   my $pos_inf = +Inf;  # Or just Inf.
   my $neg_inf = -Inf;

See also L</isinf>, and L</fpclassify>.

=item C<isalnum>

This function has been removed as of v5.24.  It was very similar to
matching against S<C<qr/ ^ [[:alnum:]]+ $ /x>>, which you should convert
to use instead.  See L<perlrecharclass/POSIX Character Classes>.

=item C<isalpha>

This function has been removed as of v5.24.  It was very similar to
matching against S<C<qr/ ^ [[:alpha:]]+ $ /x>>, which you should convert
to use instead.  See L<perlrecharclass/POSIX Character Classes>.
d632 13
a644 3
This function has been removed as of v5.24.  It was very similar to
matching against S<C<qr/ ^ [[:cntrl:]]+ $ /x>>, which you should convert
to use instead.  See L<perlrecharclass/POSIX Character Classes>.
d648 10
a657 5
This function has been removed as of v5.24.  It was very similar to
matching against S<C<qr/ ^ [[:digit:]]+ $ /x>>, which you should convert
to use instead.  See L<perlrecharclass/POSIX Character Classes>.

=item C<isfinite>
d659 2
a660 2
Returns true if the argument is a finite number (that is, not an
infinity, or the not-a-number) [C99].
d662 2
a663 1
See also L</isinf>, L</isnan>, and L</fpclassify>.
d667 10
a676 5
This function has been removed as of v5.24.  It was very similar to
matching against S<C<qr/ ^ [[:graph:]]+ $ /x>>, which you should convert
to use instead.  See L<perlrecharclass/POSIX Character Classes>.

=item C<isgreater>
d678 2
a679 10
(Also C<isgreaterequal>, C<isless>, C<islessequal>, C<islessgreater>,
C<isunordered>)

Floating point comparisons which handle the C<NaN> [C99].

=item C<isinf>

Returns true if the argument is an infinity (positive or negative) [C99].

See also L</Inf>, L</isnan>, L</isfinite>, and L</fpclassify>.
d683 10
a692 3
This function has been removed as of v5.24.  It was very similar to
matching against S<C<qr/ ^ [[:lower:]]+ $ /x>>, which you should convert
to use instead.  See L<perlrecharclass/POSIX Character Classes>.
d694 2
a695 1
=item C<isnan>
d697 1
a697 1
Returns true if the argument is C<NaN> (not-a-number) [C99].
d699 1
a699 3
Note that you cannot test for "C<NaN>-ness" with

   $x == $x
d701 10
a710 12
since the C<NaN> is not equivalent to anything, B<including itself>.

See also L</nan>, L</NaN>, L</isinf>, and L</fpclassify>.

=item C<isnormal>

Returns true if the argument is normal (that is, not a subnormal/denormal,
and not an infinity, or a not-a-number) [C99].

See also L</isfinite>, and L</fpclassify>.

=item C<isprint>
d712 2
a713 3
This function has been removed as of v5.24.  It was very similar to
matching against S<C<qr/ ^ [[:print:]]+ $ /x>>, which you should convert
to use instead.  See L<perlrecharclass/POSIX Character Classes>.
d717 10
a726 3
This function has been removed as of v5.24.  It was very similar to
matching against S<C<qr/ ^ [[:punct:]]+ $ /x>>, which you should convert
to use instead.  See L<perlrecharclass/POSIX Character Classes>.
d728 2
a729 1
=item C<issignaling>
d731 1
a731 2
	use POSIX ':nan_payload';
	issignaling($var, $payload)
d733 10
a742 1
Return true if the argument is a I<signaling> NaN.
d744 2
a745 1
Note the API instability warning in L</setpayload>.
d747 2
a748 1
See L</nan> for more discussion about C<NaN>.
d750 1
a750 1
=item C<isspace>
d752 10
a761 3
This function has been removed as of v5.24.  It was very similar to
matching against S<C<qr/ ^ [[:space:]]+ $ /x>>, which you should convert
to use instead.  See L<perlrecharclass/POSIX Character Classes>.
d763 2
a764 1
=item C<isupper>
d766 1
a766 3
This function has been removed as of v5.24.  It was very similar to
matching against S<C<qr/ ^ [[:upper:]]+ $ /x>>, which you should convert
to use instead.  See L<perlrecharclass/POSIX Character Classes>.
d770 10
a779 7
This function has been removed as of v5.24.  It was very similar to
matching against S<C<qr/ ^ [[:xdigit:]]+ $ /x>>, which you should
convert to use instead.  See L<perlrecharclass/POSIX Character Classes>.

=item C<j0>

=item C<j1>
d781 2
a782 9
=item C<jn>

=item C<y0>

=item C<y1>

=item C<yn>

The Bessel function of the first kind of the order zero.
d791 1
a791 1
Not implemented.  (For returning absolute values of long integers.)
d798 2
a799 2
of only one path, not a list of paths.  Does the same thing as the
C<chown()> function but changes the owner of a symbolic link instead
a801 2
 POSIX::lchown($uid, $gid, $file_path);

d811 1
a811 1
Not implemented.  (For computing dividends of long integers.)
a813 25
=item C<lgamma>

The logarithm of the Gamma function [C99].

See also L</tgamma>.

=item C<log1p>

Equivalent to S<C<log(1 + x)>>, but more stable results for small argument
values [C99].

=item C<log2>

Logarithm base two [C99].

See also L</expm1>.

=item C<logb>

Integer binary logarithm [C99].

For example C<logb(20)> is 4, as a floating point number.

See also L</ilogb>.

d822 1
a822 1
containing the current underlying locale's formatting values.  Users of this function
a850 6
		int_p_cs_precedes
		int_p_sep_by_space
		int_n_cs_precedes
		int_n_sep_by_space
		int_p_sign_posn
		int_n_sign_posn
a856 3
The members whose names begin with C<int_p_> and C<int_n_> were added by
POSIX.1-2008 and are only available on systems that support them.

d886 1
a886 1
Not implemented.  C<longjmp()> is C-specific: use L<perlfunc/die> instead.
a897 19
=item C<lrint>

Depending on the current floating point rounding mode, rounds the
argument either toward nearest (like L</round>), toward zero (like
L</trunc>), downward (toward negative infinity), or upward (toward
positive infinity) [C99].

For the rounding mode, see L</fegetround>.

=item C<lround>

Like L</round>, but as integer, as opposed to floating point [C99].

See also L</ceil>, L</floor>, L</trunc>.

Owing to an oversight, this is not currently exported by default, or as part of
the C<:math_h_c99> export tag; importing it must therefore be done by explicit
name. This will be changed in Perl 5.26.

d900 1
a900 1
Not implemented.  C<malloc()> is C-specific.  Perl does memory management transparently.
d905 3
a907 6

Core Perl does not have any support for the wide and multibyte
characters of the C standards, except under UTF-8 locales, so this might
be a rather useless function.

However, Perl supports Unicode, see L<perluniintro>.
d912 3
a914 2

See L</mblen>.
d919 3
a921 2

See L</mblen>.
d925 1
a925 1
Not implemented.  C<memchr()> is C-specific, see L<perlfunc/index> instead.
d929 1
a929 1
Not implemented.  C<memcmp()> is C-specific, use C<eq> instead, see L<perlop>.
d933 1
a933 1
Not implemented.  C<memcpy()> is C-specific, use C<=>, see L<perlop>, or see L<perlfunc/substr>.
d937 1
a937 1
Not implemented.  C<memmove()> is C-specific, use C<=>, see L<perlop>, or see L<perlfunc/substr>.
d941 1
a941 1
Not implemented.  C<memset()> is C-specific, use C<x> instead, see L<perlop>.
d968 3
a970 3
The month (C<mon>), weekday (C<wday>), and yearday (C<yday>) begin at zero,
I<i.e.>, January is 0, not 1; Sunday is 0, not 1; January 1st is 0, not 1.  The
year (C<year>) is given in years since 1900; I<i.e.>, the year 1995 is 95; the
a986 71
See also L</round>.

=item C<NaN>

The not-a-number as a constant:

   use POSIX qw(NaN);
   my $nan = NaN;

See also L</nan>, C</isnan>, and L</fpclassify>.

=item C<nan>

   my $nan = nan();

Returns C<NaN>, not-a-number [C99].

The returned NaN is always a I<quiet> NaN, as opposed to I<signaling>.

With an argument, can be used to generate a NaN with I<payload>.
The argument is first interpreted as a floating point number,
but then any fractional parts are truncated (towards zero),
and the value is interpreted as an unsigned integer.
The bits of this integer are stored in the unused bits of the NaN.

The result has a dual nature: it is a NaN, but it also carries
the integer inside it.  The integer can be retrieved with L</getpayload>.
Note, though, that the payload is not propagated, not even on copies,
and definitely not in arithmetic operations.

How many bits fit in the NaN depends on what kind of floating points
are being used, but on the most common platforms (64-bit IEEE 754,
or the x86 80-bit long doubles) there are 51 and 61 bits available,
respectively.  (There would be 52 and 62, but the quiet/signaling
bit of NaNs takes away one.)  However, because of the floating-point-to-
integer-and-back conversions, please test carefully whether you get back
what you put in.  If your integers are only 32 bits wide, you probably
should not rely on more than 32 bits of payload.

Whether a "signaling" NaN is in any way different from a "quiet" NaN,
depends on the platform.  Also note that the payload of the default
NaN (no argument to nan()) is not necessarily zero, use C<setpayload>
to explicitly set the payload.  On some platforms like the 32-bit x86,
(unless using the 80-bit long doubles) the signaling bit is not supported
at all.

See also L</isnan>, L</NaN>, L</setpayload> and L</issignaling>.

=item C<nearbyint>

Returns the nearest integer to the argument, according to the current
rounding mode (see L</fegetround>) [C99].

=item C<nextafter>

Returns the next representable floating point number after C<x> in the
direction of C<y> [C99].

 my $nextafter = POSIX::nextafter($x, $y);

Like L</nexttoward>, but potentially less accurate.

=item C<nexttoward>

Returns the next representable floating point number after C<x> in the
direction of C<y> [C99].

 my $nexttoward = POSIX::nexttoward($x, $y);

Like L</nextafter>, but potentially more accurate.

d991 2
a992 3
arguments mean a more polite process, negative values a more
needy process.  Normal (non-root) user processes can only change towards
being more polite.
d998 1
a998 1
Not implemented.  C<offsetof()> is C-specific, you probably want to see L<perlfunc/pack> instead.
d1086 1
a1086 1
Formats and prints the specified arguments to C<STDOUT>.
d1091 1
a1091 1
Not implemented.  C<putc()> is C-specific, see L<perlfunc/print> instead.
d1095 1
a1095 1
Not implemented.  C<putchar()> is C-specific, see L<perlfunc/print> instead.
d1099 1
a1099 1
Not implemented.  C<puts()> is C-specific, see L<perlfunc/print> instead.
d1103 1
a1103 1
Not implemented.  C<qsort()> is C-specific, see L<perlfunc/sort> instead.
d1112 1
a1112 1
Not implemented.  C<rand()> is non-portable, see L<perlfunc/rand> instead.
d1134 1
a1134 10
Not implemented.  C<realloc()> is C-specific.  Perl does memory management transparently.

=item C<remainder>

Given C<x> and C<y>, returns the value S<C<x - n*y>>, where C<n> is the integer
closest to C<x>/C<y>. [C99]

 my $remainder = POSIX::remainder($x, $y)

See also L</remquo>.
a1140 8
=item C<remquo>

Like L</remainder> but also returns the low-order bits of the quotient (n)
[C99]

(This is quite esoteric interface, mainly used to implement numerical
algorithms.)

a1154 4
=item C<rint>

Identical to L</lrint>.

a1159 13
=item C<round>

Returns the integer (but still as floating point) nearest to the
argument [C99].

See also L</ceil>, L</floor>, L</lround>, L</modf>, and L</trunc>.

=item C<scalbn>

Returns S<C<x * 2**y>> [C99].

See also L</frexp> and L</ldexp>.

d1162 1
a1162 1
Not implemented.  C<scanf()> is C-specific, use E<lt>E<gt> and regular expressions instead,
d1176 1
a1176 1
Not implemented.  C<setjmp()> is C-specific: use C<eval {}> instead,
a1180 7
WARNING!  Do NOT use this function in a L<thread|threads>.  The locale
will change in all other threads at the same time, and should your
thread get paused by the operating system, and another started, that
thread will not have the locale it is expecting.  On some platforms,
there can be a race leading to segfaults if two threads call this
function nearly simultaneously.

d1189 1
a1189 1
in L<perllocale/Not within the scope of "use locale">.)
a1220 32
=item C<setpayload>

	use POSIX ':nan_payload';
	setpayload($var, $payload);

Sets the C<NaN> payload of var.

NOTE: the NaN payload APIs are based on the latest (as of June 2015)
proposed ISO C interfaces, but they are not yet a standard.  Things
may change.

See L</nan> for more discussion about C<NaN>.

See also L</setpayloadsig>, L</isnan>, L</getpayload>, and L</issignaling>.

=item C<setpayloadsig>

	use POSIX ':nan_payload';
	setpayloadsig($var, $payload);

Like L</setpayload> but also makes the NaN I<signaling>.

Depending on the platform the NaN may or may not behave differently.

Note the API instability warning in L</setpayload>.

Note that because how the floating point formats work out, on the most
common platforms signaling payload of zero is best avoided,
since it might end up being identical to C<+Inf>.

See also L</nan>, L</isnan>, L</getpayload>, and L</issignaling>.

a1265 3
The constants for specific C<code> values can be imported individually
or using the C<:signal_h_si_code> tag.

a1272 2
    addr        address of faulting instruction or memory
                reference for SIGILL, SIGFPE, SIGSEGV or SIGBUS
d1286 1
a1286 5
Not implemented.  C<siglongjmp()> is C-specific: use L<perlfunc/die> instead.

=item C<signbit>

Returns zero for positive arguments, non-zero for negative arguments [C99].
d1318 1
a1318 1
Not implemented.  C<sigsetjmp()> is C-specific: use C<eval {}> instead,
d1372 1
a1372 1
Not implemented.  C<sscanf()> is C-specific, use regular expressions instead,
d1382 1
a1382 1
Not implemented.  C<strcat()> is C-specific, use C<.=> instead, see L<perlop>.
d1386 1
a1386 1
Not implemented.  C<strchr()> is C-specific, see L<perlfunc/index> instead.
d1390 1
a1390 1
Not implemented.  C<strcmp()> is C-specific, use C<eq> or C<cmp> instead, see L<perlop>.
d1401 1
a1401 1
Not implemented.  C<strcpy()> is C-specific, use C<=> instead, see L<perlop>.
d1405 1
a1405 1
Not implemented.  C<strcspn()> is C-specific, use regular expressions instead,
d1411 1
a1411 1
Identical to the string form of C<$!>, see L<perlvar/$ERRNO>.
d1422 3
a1424 3
The month (C<mon>), weekday (C<wday>), and yearday (C<yday>) begin at zero,
I<i.e.>, January is 0, not 1; Sunday is 0, not 1; January 1st is 0, not 1.  The
year (C<year>) is given in years since 1900, I<i.e.>, the year 1995 is 95; the
d1453 1
a1453 1
Not implemented.  C<strlen()> is C-specific, use C<length()> instead, see L<perlfunc/length>.
d1457 1
a1457 1
Not implemented.  C<strncat()> is C-specific, use C<.=> instead, see L<perlop>.
d1461 1
a1461 1
Not implemented.  C<strncmp()> is C-specific, use C<eq> instead, see L<perlop>.
d1465 1
a1465 1
Not implemented.  C<strncpy()> is C-specific, use C<=> instead, see L<perlop>.
d1469 1
a1469 1
Not implemented.  C<strpbrk()> is C-specific, use regular expressions instead,
d1474 1
a1474 1
Not implemented.  C<strrchr()> is C-specific, see L<perlfunc/rindex> instead.
d1478 1
a1478 1
Not implemented.  C<strspn()> is C-specific, use regular expressions instead,
d1491 1
a1491 1
error, so clear C<$!> before calling C<strtod>.  However, non-POSIX systems
d1494 1
a1494 1
C<strtod> respects any POSIX C<setlocale()> C<LC_TIME> settings,
d1509 1
a1509 1
When called in a scalar context C<strtod> returns the parsed number.
d1513 1
a1513 1
Not implemented.  C<strtok()> is C-specific, use regular expressions instead, see
d1532 1
a1532 1
is zero or omitted C<strtol> will use the string itself to determine the
d1544 1
a1544 6
When called in a scalar context C<strtol> returns the parsed number.

=item C<strtold>

Like L</strtod> but for long doubles.  Defined only if the
system supports long doubles.
a1632 6
=item C<tgamma>

The Gamma function [C99].

See also L</lgamma>.

d1646 1
a1646 1
    ($realtime, $user, $system, $cuser, $csystem)
d1654 1
a1654 1
Not implemented.  Use method C<IO::File::new_tmpfile()> instead, or see L<File::Temp>.
d1669 1
a1669 2
character or to a whole string, and currently operates as if the locale
always is "C".  Consider using the C<lc()> function, see L<perlfunc/lc>,
d1675 4
a1678 10
This is similar to the C function, except that it can apply to a single
character or to a whole string, and currently operates as if the locale
always is "C".  Consider using the C<uc()> function, see L<perlfunc/uc>,
or the equivalent C<\U> operator inside doublequotish strings.

=item C<trunc>

Returns the integer toward zero from the argument [C99].

See also L</ceil>, L</floor>, and L</round>.
d1723 1
a1723 1
Not implemented.  Use method C<IO::Handle::ungetc()> instead.
d1738 1
a1738 1
Not implemented.  C<vfprintf()> is C-specific, see L<perlfunc/printf> instead.
d1742 1
a1742 1
Not implemented.  C<vprintf()> is C-specific, see L<perlfunc/printf> instead.
d1746 1
a1746 1
Not implemented.  C<vsprintf()> is C-specific, see L<perlfunc/sprintf> instead.
d1764 3
a1766 2

See L</mblen>.
d1771 3
a1773 2

See L</mblen>.
d1965 1
a1965 1
when it is no longer needed.  A Termios object corresponds to the C<termios>
d1975 1
a1975 1
Obtain the attributes for C<stdin>.
d1988 1
a1988 1
Retrieve a value from the C<c_cc> field of a C<termios> object.  The C<c_cc> field is
d1995 1
a1995 1
Retrieve the C<c_cflag> field of a C<termios> object.
d2001 1
a2001 1
Retrieve the C<c_iflag> field of a C<termios> object.
d2013 1
a2013 1
Retrieve the C<c_lflag> field of a C<termios> object.
d2019 1
a2019 1
Retrieve the C<c_oflag> field of a C<termios> object.
d2041 1
a2041 1
Set a value in the C<c_cc> field of a C<termios> object.  The C<c_cc> field is an
d2048 1
a2048 1
Set the C<c_cflag> field of a C<termios> object.
d2054 1
a2054 1
Set the C<c_iflag> field of a C<termios> object.
d2068 1
a2068 1
Set the C<c_lflag> field of a C<termios> object.
d2074 1
a2074 1
Set the C<c_oflag> field of a C<termios> object.
a2198 11
=head1 FLOATING-POINT ENVIRONMENT

=over 8

=item Constants

C<FE_DOWNWARD> C<FE_TONEAREST> C<FE_TOWARDZERO> C<FE_UPWARD>
on systems that support them.

=back

d2218 1
a2218 2
C<LC_ALL> C<LC_COLLATE> C<LC_CTYPE> C<LC_MONETARY> C<LC_NUMERIC> C<LC_TIME> C<LC_MESSAGES>
on systems that support them.
a2229 6
C<FP_ILOGB0> C<FP_ILOGBNAN> C<FP_INFINITE> C<FP_NAN> C<FP_NORMAL> C<FP_SUBNORMAL> C<FP_ZERO>
C<INFINITY> C<NAN> C<Inf> C<NaN>
C<M_1_PI> C<M_2_PI> C<M_2_SQRTPI> C<M_E> C<M_LN10> C<M_LN2> C<M_LOG10E> C<M_LOG2E> C<M_PI>
C<M_PI_2> C<M_PI_4> C<M_SQRT1_2> C<M_SQRT2>
on systems with C99 support.

a2242 6
C<ILL_ILLOPC> C<ILL_ILLOPN> C<ILL_ILLADR> C<ILL_ILLTRP> C<ILL_PRVOPC> C<ILL_PRVREG> C<ILL_COPROC>
C<ILL_BADSTK> C<FPE_INTDIV> C<FPE_INTOVF> C<FPE_FLTDIV> C<FPE_FLTOVF> C<FPE_FLTUND> C<FPE_FLTRES>
C<FPE_FLTINV> C<FPE_FLTSUB> C<SEGV_MAPERR> C<SEGV_ACCERR> C<BUS_ADRALN> C<BUS_ADRERR>
C<BUS_OBJERR> C<TRAP_BRKPT> C<TRAP_TRACE> C<CLD_EXITED> C<CLD_KILLED> C<CLD_DUMPED> C<CLD_TRAPPED>
C<CLD_STOPPED> C<CLD_CONTINUED> C<POLL_IN> C<POLL_OUT> C<POLL_MSG> C<POLL_ERR> C<POLL_PRI>
C<POLL_HUP> C<SI_USER> C<SI_QUEUE> C<SI_TIMER> C<SI_ASYNCIO> C<SI_MESGQ>
a2364 22

=back

=head1 WINSOCK

(Windows only.)

=over 8

=item Constants

C<WSAEINTR> C<WSAEBADF> C<WSAEACCES> C<WSAEFAULT> C<WSAEINVAL> C<WSAEMFILE> C<WSAEWOULDBLOCK>
C<WSAEINPROGRESS> C<WSAEALREADY> C<WSAENOTSOCK> C<WSAEDESTADDRREQ> C<WSAEMSGSIZE>
C<WSAEPROTOTYPE> C<WSAENOPROTOOPT> C<WSAEPROTONOSUPPORT> C<WSAESOCKTNOSUPPORT>
C<WSAEOPNOTSUPP> C<WSAEPFNOSUPPORT> C<WSAEAFNOSUPPORT> C<WSAEADDRINUSE>
C<WSAEADDRNOTAVAIL> C<WSAENETDOWN> C<WSAENETUNREACH> C<WSAENETRESET> C<WSAECONNABORTED>
C<WSAECONNRESET> C<WSAENOBUFS> C<WSAEISCONN> C<WSAENOTCONN> C<WSAESHUTDOWN>
C<WSAETOOMANYREFS> C<WSAETIMEDOUT> C<WSAECONNREFUSED> C<WSAELOOP> C<WSAENAMETOOLONG>
C<WSAEHOSTDOWN> C<WSAEHOSTUNREACH> C<WSAENOTEMPTY> C<WSAEPROCLIM> C<WSAEUSERS>
C<WSAEDQUOT> C<WSAESTALE> C<WSAEREMOTE> C<WSAEDISCON> C<WSAENOMORE> C<WSAECANCELLED>
C<WSAEINVALIDPROCTABLE> C<WSAEINVALIDPROVIDER> C<WSAEPROVIDERFAILEDINIT>
C<WSAEREFUSED>
@


