head	1.2;
access;
symbols
	OPENBSD_6_1:1.2.0.4
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.1.3.0.10
	OPENBSD_6_0_BASE:1.1.1.3
	OPENBSD_5_9:1.1.1.3.0.4
	OPENBSD_5_9_BASE:1.1.1.3
	OPENBSD_5_8:1.1.1.3.0.6
	OPENBSD_5_8_BASE:1.1.1.3
	PERL_5_20_2:1.1.1.3
	OPENBSD_5_7:1.1.1.3.0.2
	OPENBSD_5_7_BASE:1.1.1.3
	PERL_5_20_1:1.1.1.3
	OPENBSD_5_6:1.1.1.2.0.4
	OPENBSD_5_6_BASE:1.1.1.2
	PERL_5_18_2:1.1.1.2
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.16
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.12
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2017.02.05.00.31.53;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	2010.09.24.14.48.34;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.48.34;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.03.24.14.58.47;	author afresh1;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.11.17.20.52.39;	author afresh1;	state Exp;
branches;
next	;
commitid	B31cAbBIXiCqnL97;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!/bin/sh

case $PERL_CONFIG_SH in
'')
    if test ! -f config.sh; then
	ln ../config.sh . || \
	ln ../../config.sh . || \
	ln ../../../config.sh . || \
	(echo "Can't find config.sh."; exit 1)
    fi 2>/dev/null
    . ./config.sh
    ;;
esac
case "$0" in
*/*) cd `expr X$0 : 'X\(.*\)/'` ;;
esac
echo "Extracting runtests (with variable substitutions)"
rm -f runtests

$spitshell >runtests <<!GROK!THIS!
$startsh -e
# runtests.SH
# 
!GROK!THIS!

## In the following, dollars and backticks do not need the extra backslash.
$spitshell >>runtests <<'!NO!SUBS!'

export PATH || (echo "OOPS, this isn't sh.  Desperation time.  I will feed myself to sh."; sh $0; kill $$)

# Avoid "warning: jobserver unavailable: using -j1." warnings under GNU make.
# When gmake -j N spawns a child, it passes
#    MAKEFLAGS=" --jobserver-fds=3,4 -j".
# in the environment.  Also, if make recognises that the child is another
# make (e.g. it's invoked as $(MAKE) or +command), it keeps open fd's 3
# and 4 to allow the child process to access the job server. Otherwise,
# those fd's aren't kept open.
# In the case where one does 'make -j 16 test_harness', this script is
# called with MAKEFLAGS set, but fd's 3 and 4 closed. Later when
# descendents of this script run cpan/ExtUtils-Constant/t/Constant.t
# which itelf invokes make, the warnings ensue.

unset MAKEFLAGS


case $# in
    0)
	echo "runtests tty_flag ..."
	exit 1
	;;
esac

case $1 in
    tty)
	tty=Y
	;;
    no-tty)
	tty=N
	;;
    choose)
	if (true </dev/tty) >/dev/null 2>&1; then
	    tty=Y
	else
	    tty=N
	fi
	;;
    *)
	echo "ttyflag should be one of tty, no-tty or choose"
	exit 1
	;;
esac

if test X"$TESTFILE" = X; then
    TESTFILE=TEST
fi

cd t

# If this is run under an old shell that doesn't automatically 
# update PWD, then we must update it.  Otherwise, t/io/fs.t gets 
# mixed up about what directory we are in.
case "$PWD" in
    '')  ;; # Do nothing if it isn't set at all.
    */t) ;; # Leave it alone if it's properly updated.
    *) PWD=${PWD}/t; export PWD ;;  # Otherwise, fix it.
esac

!NO!SUBS!

## In the following, dollars and backticks do need the extra backslash.
$spitshell >>runtests <<!GROK!THIS!
# The second branch is for testing without a tty or controlling terminal,
# see t/op/stat.t
if test \$tty = Y; then
    ./perl$_exe \$TESTFILE \$TEST_ARGS \$TEST_FILES </dev/tty
else
    PERL_SKIP_TTY_TEST=1 ./perl$_exe \$TESTFILE \$TEST_ARGS \$TEST_FILES
fi

echo "Ran tests" > rantests
!GROK!THIS!
$eunicefix runtests
chmod +x runtests
@


1.1
log
@Initial revision
@
text
@d1 2
d19 1
d24 20
a44 1
export PATH || (echo "OOPS, this isn't sh.  Desperation time.  I will feed myself to sh."; sh \$0; kill \$\$)
d46 1
a46 1
case \$# in
d53 1
a53 1
case \$1 in
d73 1
a73 1
if test X"\$TESTFILE" = X; then
d77 10
a86 4
if test X"\$PERL" = X; then
    PERL=./perl$_exe
    export PERL
fi
d88 1
a88 1
cd t
d90 2
d95 1
a95 1
    \$PERL \$TESTFILE \$TEST_ARGS \$TEST_FILES </dev/tty
d97 1
a97 1
    PERL_SKIP_TTY_TEST=1 \$PERL \$TESTFILE \$TEST_ARGS \$TEST_FILES
@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@


1.1.1.2
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@a0 2
#!/bin/sh

@


1.1.1.3
log
@Import perl-5.20.1
@
text
@a18 1

a22 4
!GROK!THIS!

## In the following, dollars and backticks do not need the extra backslash.
$spitshell >>runtests <<'!NO!SUBS!'
d24 1
a24 1
export PATH || (echo "OOPS, this isn't sh.  Desperation time.  I will feed myself to sh."; sh $0; kill $$)
d26 1
a26 1
case $# in
d33 1
a33 1
case $1 in
d53 1
a53 1
if test X"$TESTFILE" = X; then
d57 5
a63 13
# If this is run under an old shell that doesn't automatically 
# update PWD, then we must update it.  Otherwise, t/io/fs.t gets 
# mixed up about what directory we are in.
case "$PWD" in
    '')  ;; # Do nothing if it isn't set at all.
    */t) ;; # Leave it alone if it's properly updated.
    *) PWD=${PWD}/t; export PWD ;;  # Otherwise, fix it.
esac

!NO!SUBS!

## In the following, dollars and backticks do need the extra backslash.
$spitshell >>runtests <<!GROK!THIS!
d67 1
a67 1
    ./perl$_exe \$TESTFILE \$TEST_ARGS \$TEST_FILES </dev/tty
d69 1
a69 1
    PERL_SKIP_TTY_TEST=1 ./perl$_exe \$TESTFILE \$TEST_ARGS \$TEST_FILES
@


