head	1.3;
access;
symbols
	PERL_5_24_2:1.1.1.15
	OPENBSD_6_1:1.3.0.4
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.2.0.4
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.1.1.14.0.2
	OPENBSD_5_9_BASE:1.1.1.14
	OPENBSD_5_8:1.1.1.14.0.4
	OPENBSD_5_8_BASE:1.1.1.14
	PERL_5_20_2:1.1.1.14
	OPENBSD_5_7:1.1.1.13.0.2
	OPENBSD_5_7_BASE:1.1.1.13
	PERL_5_20_1:1.1.1.13
	OPENBSD_5_6:1.1.1.12.0.4
	OPENBSD_5_6_BASE:1.1.1.12
	PERL_5_18_2:1.1.1.12
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.11.0.6
	OPENBSD_5_5_BASE:1.1.1.11
	OPENBSD_5_4:1.1.1.11.0.2
	OPENBSD_5_4_BASE:1.1.1.11
	PERL_5_16_3:1.1.1.11
	OPENBSD_5_3:1.1.1.10.0.10
	OPENBSD_5_3_BASE:1.1.1.10
	OPENBSD_5_2:1.1.1.10.0.8
	OPENBSD_5_2_BASE:1.1.1.10
	OPENBSD_5_1_BASE:1.1.1.10
	OPENBSD_5_1:1.1.1.10.0.6
	OPENBSD_5_0:1.1.1.10.0.4
	OPENBSD_5_0_BASE:1.1.1.10
	OPENBSD_4_9:1.1.1.10.0.2
	OPENBSD_4_9_BASE:1.1.1.10
	PERL_5_12_2:1.1.1.10
	OPENBSD_4_8:1.1.1.9.0.4
	OPENBSD_4_8_BASE:1.1.1.9
	OPENBSD_4_7:1.1.1.9.0.2
	OPENBSD_4_7_BASE:1.1.1.9
	PERL_5_10_1:1.1.1.9
	OPENBSD_4_6:1.1.1.8.0.6
	OPENBSD_4_6_BASE:1.1.1.8
	OPENBSD_4_5:1.1.1.8.0.2
	OPENBSD_4_5_BASE:1.1.1.8
	PERL_5_10_0:1.1.1.8
	OPENBSD_4_4:1.1.1.7.0.10
	OPENBSD_4_4_BASE:1.1.1.7
	OPENBSD_4_3:1.1.1.7.0.8
	OPENBSD_4_3_BASE:1.1.1.7
	OPENBSD_4_2:1.1.1.7.0.6
	OPENBSD_4_2_BASE:1.1.1.7
	OPENBSD_4_1:1.1.1.7.0.4
	OPENBSD_4_1_BASE:1.1.1.7
	OPENBSD_4_0:1.1.1.7.0.2
	OPENBSD_4_0_BASE:1.1.1.7
	PERL_5_8_8:1.1.1.7
	OPENBSD_3_9:1.1.1.6.0.8
	OPENBSD_3_9_BASE:1.1.1.6
	OPENBSD_3_8:1.1.1.6.0.6
	OPENBSD_3_8_BASE:1.1.1.6
	OPENBSD_3_7:1.1.1.6.0.4
	OPENBSD_3_7_BASE:1.1.1.6
	PERL_5_8_6:1.1.1.6
	OPENBSD_3_6:1.1.1.6.0.2
	OPENBSD_3_6_BASE:1.1.1.6
	PERL_5_8_5:1.1.1.6
	PERL_5_8_3:1.1.1.5
	OPENBSD_3_5:1.1.1.5.0.2
	OPENBSD_3_5_BASE:1.1.1.5
	PERL_5_8_2:1.1.1.5
	OPENBSD_3_4:1.1.1.4.0.4
	OPENBSD_3_4_BASE:1.1.1.4
	OPENBSD_3_3:1.1.1.4.0.2
	OPENBSD_3_3_BASE:1.1.1.4
	PERL_5_8_0:1.1.1.4
	OPENBSD_3_2:1.1.1.3.0.6
	OPENBSD_3_2_BASE:1.1.1.3
	OPENBSD_3_1:1.1.1.3.0.4
	OPENBSD_3_1_BASE:1.1.1.3
	OPENBSD_3_0:1.1.1.3.0.2
	OPENBSD_3_0_BASE:1.1.1.3
	PERL_5_6_1:1.1.1.3
	OPENBSD_2_9:1.1.1.2.0.6
	OPENBSD_2_9_BASE:1.1.1.2
	OPENBSD_2_8:1.1.1.2.0.4
	OPENBSD_2_8_BASE:1.1.1.2
	OPENBSD_2_7:1.1.1.2.0.2
	OPENBSD_2_7_BASE:1.1.1.2
	PERL_5_6_0:1.1.1.2
	OPENBSD_2_6:1.1.1.1.0.2
	OPENBSD_2_6_BASE:1.1.1.1
	PERL_500503:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.3
date	2017.02.05.00.31.52;	author afresh1;	state Exp;
branches;
next	1.2;
commitid	cxJ08BvJA9Pt2PTM;

1.2
date	2016.07.03.01.07.48;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	GzHqjSTnBjdF7Wcw;

1.1
date	99.04.29.22.37.23;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.29.22.37.23;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2000.04.06.16.08.37;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2001.05.24.18.22.04;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2002.10.27.22.14.47;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2003.12.03.02.43.30;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2004.08.09.17.45.41;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2006.03.28.18.47.28;	author millert;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2008.09.29.17.18.06;	author millert;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2009.10.12.18.10.34;	author millert;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	2010.09.24.14.48.26;	author millert;	state Exp;
branches;
next	1.1.1.11;

1.1.1.11
date	2013.03.25.20.06.25;	author sthen;	state Exp;
branches;
next	1.1.1.12;

1.1.1.12
date	2014.03.24.14.58.44;	author afresh1;	state Exp;
branches;
next	1.1.1.13;

1.1.1.13
date	2014.11.17.20.52.36;	author afresh1;	state Exp;
branches;
next	1.1.1.14;
commitid	B31cAbBIXiCqnL97;

1.1.1.14
date	2015.04.25.19.10.09;	author afresh1;	state Exp;
branches;
next	1.1.1.15;
commitid	Wpcs5S8qILgEZC7F;

1.1.1.15
date	2017.08.14.13.45.26;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.3
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@/*   intrpvar.h 
 *
 *    Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,
 *    2006, 2007, 2008 by Larry Wall and others
 *
 *    You may distribute under the terms of either the GNU General Public
 *    License or the Artistic License, as specified in the README file.
 *
 */

#include "handy.h"

/*
=head1 Per-Interpreter Variables
*/

/* These variables are per-interpreter in threaded/multiplicity builds,
 * global otherwise.

 * Don't forget to re-run regen/embed.pl to propagate changes! */

/* New variables must be added to the very end for binary compatibility. */

/* Don't forget to add your variable also to perl_clone()! (in sv.c) */

/* The 'I' prefix is only needed for vars that need appropriate #defines
 * generated when built with or without MULTIPLICITY.  It is also used
 * to generate the appropriate export list for win32.  If the variable
 * needs to be initialized, use PERLVARI.
 *
 * When building without MULTIPLICITY, these variables will be truly global.
 *
 * Important ones in the first cache line (if alignment is done right) */

PERLVAR(I, stack_sp,	SV **)		/* top of the stack */
PERLVAR(I, op,		OP *)		/* currently executing op */
PERLVAR(I, curpad,	SV **)		/* active pad (lexicals+tmps) */

PERLVAR(I, stack_base,	SV **)
PERLVAR(I, stack_max,	SV **)

PERLVAR(I, savestack,	ANY *)		/* items that need to be restored when
					   LEAVEing scopes we've ENTERed */
PERLVAR(I, savestack_ix, I32)
PERLVAR(I, savestack_max, I32)

PERLVAR(I, scopestack,	I32 *)		/* scopes we've ENTERed */
PERLVAR(I, scopestack_ix, I32)
PERLVAR(I, scopestack_max, I32)

PERLVAR(I, tmps_stack,	SV **)		/* mortals we've made */
PERLVARI(I, tmps_ix,	SSize_t,	-1)
PERLVARI(I, tmps_floor,	SSize_t,	-1)
PERLVAR(I, tmps_max,	SSize_t)        /* first unalloced slot in tmps stack */

PERLVARI(I, sub_generation, U32, 1)	/* incr to invalidate method cache */

PERLVAR(I, markstack,	I32 *)		/* stack_sp locations we're
					   remembering */
PERLVAR(I, markstack_ptr, I32 *)
PERLVAR(I, markstack_max, I32 *)

#ifdef PERL_HASH_RANDOMIZE_KEYS
#ifdef USE_PERL_PERTURB_KEYS
PERLVARI(I, hash_rand_bits_enabled, U8, 1) /* used to randomize hash stuff 0 == no-random, 1 == random, 2 == determinsitic */
#endif
PERLVARI(I, hash_rand_bits, UV, 0)      /* used to randomize hash stuff */
#endif
PERLVAR(I, strtab,	HV *)		/* shared string table */
/* prog counter for the currently executing OP_MULTIDEREF Used to signal
 * to S_find_uninit_var() where we are */
PERLVAR(I, multideref_pc, UNOP_AUX_item *)

/* Fields used by magic variables such as $@@, $/ and so on */
PERLVAR(I, curpm,	PMOP *)		/* what to do \ interps in REs from */

PERLVAR(I, tainting,	bool)		/* doing taint checks */
PERLVARI(I, tainted,	bool, FALSE)	/* using variables controlled by $< */

/* PL_delaymagic is currently used for two purposes: to assure simultaneous
 * updates in ($<,$>) = ..., and to assure atomic update in push/unshift
 * @@ISA, It works like this: a few places such as pp_push set the DM_DELAY
 * flag; then various places such as av_store() skip mg_set(ary) if this
 * flag is set, and various magic vtable methods set flags like
 * DM_ARRAY_ISA if they've seen something of that ilk. Finally when
 * control returns to pp_push or whatever, it sees if any of those flags
 * have been set, and if so finally calls mg_set().
 *
 * NB: PL_delaymagic is automatically saved and restored by JUMPENV_PUSH
 * / POP. This removes the need to do ENTER/SAVEI16(PL_delaymagic)/LEAVE
 * in hot code like pp_push.
 */
PERLVAR(I, delaymagic,	U16)		/* ($<,$>) = ... */

PERLVAR(I, localizing,	U8)		/* are we processing a local() list? */
PERLVAR(I, in_eval,	U8)		/* trap "fatal" errors? */
PERLVAR(I, defgv,	GV *)           /* the *_ glob */
/*

=for apidoc mn|bool|PL_dowarn

The C variable which corresponds to Perl's C<$^W> warning variable.

=cut
*/

PERLVAR(I, dowarn,	U8)

#if defined (PERL_UTF8_CACHE_ASSERT) || defined (DEBUGGING)
#  define PERL___I -1
#else
#  define PERL___I 1
#endif
PERLVARI(I, utf8cache, I8, PERL___I)	/* Is the utf8 caching code enabled? */
#undef PERL___I


/* Stashes */
PERLVAR(I, defstash,	HV *)		/* main symbol table */
PERLVAR(I, curstash,	HV *)		/* symbol table for current package */

PERLVAR(I, curcop,	COP *)
PERLVAR(I, curstack,	AV *)		/* THE STACK */
PERLVAR(I, curstackinfo, PERL_SI *)	/* current stack + context */
PERLVAR(I, mainstack,	AV *)		/* the stack when nothing funny is
					   happening */

/* memory management */
PERLVAR(I, sv_count,	IV)		/* how many SV* are currently allocated */

PERLVAR(I, sv_root,	SV *)		/* storage for SVs belonging to interp */
PERLVAR(I, sv_arenaroot, SV *)		/* list of areas for garbage collection */

/* fake PMOP that PL_curpm points to while in (?{}) so $1 et al are visible */
PERLVARI(I, reg_curpm, PMOP*, NULL)

/* the currently active slab in a chain of slabs of regmatch states,
 * and the currently active state within that slab. This stack of states
 * is shared amongst re-entrant calls to the regex engine */

PERLVARI(I, regmatch_slab, regmatch_slab *,	NULL)
PERLVAR(I, regmatch_state, regmatch_state *)

PERLVAR(I, comppad,	PAD *)		/* storage for lexically scoped temporaries */

/*
=for apidoc Amn|SV|PL_sv_undef
This is the C<undef> SV.  Always refer to this as C<&PL_sv_undef>.

=for apidoc Amn|SV|PL_sv_no
This is the C<false> SV.  See C<L</PL_sv_yes>>.  Always refer to this as
C<&PL_sv_no>.

=for apidoc Amn|SV|PL_sv_yes
This is the C<true> SV.  See C<L</PL_sv_no>>.  Always refer to this as
C<&PL_sv_yes>.

=cut
*/

PERLVAR(I, sv_undef,	SV)
PERLVAR(I, sv_no,	SV)
PERLVAR(I, sv_yes,	SV)
PERLVAR(I, padname_undef,	PADNAME)
PERLVAR(I, padname_const,	PADNAME)
PERLVAR(I, Sv,		SV *)		/* used to hold temporary values */

PERLVAR(I, parser,	yy_parser *)	/* current parser state */

PERLVAR(I, stashcache,	HV *)		/* Cache to speed up S_method_common */


/*
=for apidoc Amn|STRLEN|PL_na

A convenience variable which is typically used with C<SvPV> when one
doesn't care about the length of the string.  It is usually more efficient
to either declare a local variable and use that instead or to use the
C<SvPV_nolen> macro.

=cut
*/

PERLVAR(I, na,		STRLEN)		/* for use in SvPV when length is
					   Not Applicable */

/* stat stuff */
PERLVAR(I, statbuf,	Stat_t)
PERLVAR(I, statcache,	Stat_t)		/* _ */
PERLVAR(I, statgv,	GV *)
PERLVARI(I, statname,	SV *,	NULL)

/*
=for apidoc mn|SV*|PL_rs

The input record separator - C<$/> in Perl space.

=for apidoc mn|GV*|PL_last_in_gv

The GV which was last used for a filehandle input operation.  (C<< <FH> >>)

=for apidoc mn|GV*|PL_ofsgv

The glob containing the output field separator - C<*,> in Perl space.

=cut
*/

PERLVAR(I, rs,		SV *)		/* input record separator $/ */
PERLVAR(I, last_in_gv,	GV *)		/* GV used in last <FH> */
PERLVAR(I, ofsgv,	GV *)		/* GV of output field separator *, */
PERLVAR(I, defoutgv,	GV *)		/* default FH for output */
PERLVARI(I, chopset,	const char *, " \n-")	/* $: */
PERLVAR(I, formtarget,	SV *)
PERLVAR(I, bodytarget,	SV *)
PERLVAR(I, toptarget,	SV *)


PERLVAR(I, restartop,	OP *)		/* propagating an error from croak? */
PERLVAR(I, restartjmpenv, JMPENV *)	/* target frame for longjmp in die */

PERLVAR(I, top_env,	JMPENV *)	/* ptr to current sigjmp environment */
PERLVAR(I, start_env,	JMPENV)		/* empty startup sigjmp environment */
PERLVARI(I, errors,	SV *,	NULL)	/* outstanding queued errors */

/* statics "owned" by various functions */
PERLVAR(I, hv_fetch_ent_mh, HE*)	/* owned by hv_fetch_ent() */

PERLVAR(I, lastgotoprobe, OP*)		/* from pp_ctl.c */

/* sort stuff */
PERLVAR(I, sortcop,	OP *)		/* user defined sort routine */
PERLVAR(I, sortstash,	HV *)		/* which is in some package or other */
PERLVAR(I, firstgv,	GV *)		/* $a */
PERLVAR(I, secondgv,	GV *)		/* $b */

/* float buffer */
PERLVAR(I, efloatbuf,	char *)
PERLVAR(I, efloatsize,	STRLEN)

PERLVARI(I, dumpindent,	U16,	4)	/* number of blanks per dump
					   indentation level */

PERLVAR(I, exit_flags,	U8)		/* was exit() unexpected, etc. */

PERLVAR(I, utf8locale,	bool)		/* utf8 locale detected */
PERLVAR(I, in_utf8_CTYPE_locale, bool)
#ifdef USE_LOCALE_CTYPE
    PERLVAR(I, warn_locale, SV *)
#endif

PERLVARA(I, colors,6,	char *)		/* values from PERL_RE_COLORS env var */

/*
=for apidoc Amn|peep_t|PL_peepp

Pointer to the per-subroutine peephole optimiser.  This is a function
that gets called at the end of compilation of a Perl subroutine (or
equivalently independent piece of Perl code) to perform fixups of
some ops and to perform small-scale optimisations.  The function is
called once for each subroutine that is compiled, and is passed, as sole
parameter, a pointer to the op that is the entry point to the subroutine.
It modifies the op tree in place.

The peephole optimiser should never be completely replaced.  Rather,
add code to it by wrapping the existing optimiser.  The basic way to do
this can be seen in L<perlguts/Compile pass 3: peephole optimization>.
If the new code wishes to operate on ops throughout the subroutine's
structure, rather than just at the top level, it is likely to be more
convenient to wrap the L</PL_rpeepp> hook.

=cut
*/

PERLVARI(I, peepp,	peep_t, Perl_peep)

/*
=for apidoc Amn|peep_t|PL_rpeepp

Pointer to the recursive peephole optimiser.  This is a function
that gets called at the end of compilation of a Perl subroutine (or
equivalently independent piece of Perl code) to perform fixups of some
ops and to perform small-scale optimisations.  The function is called
once for each chain of ops linked through their C<op_next> fields;
it is recursively called to handle each side chain.  It is passed, as
sole parameter, a pointer to the op that is at the head of the chain.
It modifies the op tree in place.

The peephole optimiser should never be completely replaced.  Rather,
add code to it by wrapping the existing optimiser.  The basic way to do
this can be seen in L<perlguts/Compile pass 3: peephole optimization>.
If the new code wishes to operate only on ops at a subroutine's top level,
rather than throughout the structure, it is likely to be more convenient
to wrap the L</PL_peepp> hook.

=cut
*/

PERLVARI(I, rpeepp,	peep_t, Perl_rpeep)

/*
=for apidoc Amn|Perl_ophook_t|PL_opfreehook

When non-C<NULL>, the function pointed by this variable will be called each time an OP is freed with the corresponding OP as the argument.
This allows extensions to free any extra attribute they have locally attached to an OP.
It is also assured to first fire for the parent OP and then for its kids.

When you replace this variable, it is considered a good practice to store the possibly previously installed hook and that you recall it inside your own.

=cut
*/

PERLVARI(I, opfreehook,	Perl_ophook_t, 0) /* op_free() hook */

PERLVARI(I, watchaddr,	char **, 0)
PERLVAR(I, watchok,	char *)

PERLVAR(I, perldb,	U32)

PERLVAR(I, signals,	U32)	/* Using which pre-5.8 signals */

PERLVAR(I, reentrant_retint, int)	/* Integer return value from reentrant functions */

/* pseudo environmental stuff */
PERLVAR(I, origargc,	int)
PERLVAR(I, origargv,	char **)
PERLVAR(I, envgv,	GV *)
PERLVAR(I, incgv,	GV *)
PERLVAR(I, hintgv,	GV *)
PERLVAR(I, origfilename, char *)
PERLVARI(I, xsubfilename, const char *, NULL)
PERLVAR(I, diehook,	SV *)
PERLVAR(I, warnhook,	SV *)

/* switches */
PERLVAR(I, patchlevel,	SV *)
PERLVAR(I, localpatches, const char * const *)
PERLVARI(I, splitstr,	const char *, " ")

PERLVAR(I, minus_c,	bool)
PERLVAR(I, minus_n,	bool)
PERLVAR(I, minus_p,	bool)
PERLVAR(I, minus_l,	bool)
PERLVAR(I, minus_a,	bool)
PERLVAR(I, minus_F,	bool)
PERLVAR(I, doswitches,	bool)
PERLVAR(I, minus_E,	bool)

PERLVAR(I, inplace,	char *)
PERLVAR(I, e_script,	SV *)

PERLVAR(I, basetime,	Time_t)		/* $^T */

PERLVARI(I, maxsysfd,	I32,	MAXSYSFD)
					/* top fd to pass to subprocesses */
PERLVAR(I, statusvalue,	I32)		/* $? */
#ifdef VMS
PERLVAR(I, statusvalue_vms, U32)
#else
PERLVAR(I, statusvalue_posix, I32)
#endif

PERLVARI(I, sig_pending, int, 0)	/* Number if highest signal pending */
PERLVAR(I, psig_pend, int *)		/* per-signal "count" of pending */

/* shortcuts to various I/O objects */
PERLVAR(I, stdingv,	GV *)		/*  *STDIN      */
PERLVAR(I, stderrgv,	GV *)		/*  *STDERR     */
PERLVAR(I, argvgv,	GV *)		/*  *ARGV       */
PERLVAR(I, argvoutgv,	GV *)		/*  *ARGVOUT    */
PERLVAR(I, argvout_stack, AV *)

/* shortcuts to regexp stuff */
PERLVAR(I, replgv,	GV *)		/*  *^R         */

/* shortcuts to misc objects */
PERLVAR(I, errgv,	GV *)		/*  *@@          */

/* shortcuts to debugging objects */
PERLVAR(I, DBgv,	GV *)		/*  *DB::DB     */
PERLVAR(I, DBline,	GV *)		/*  *DB::line   */

/*
=for apidoc mn|GV *|PL_DBsub
When Perl is run in debugging mode, with the B<-d> switch, this GV contains
the SV which holds the name of the sub being debugged.  This is the C
variable which corresponds to Perl's $DB::sub variable.  See
C<L</PL_DBsingle>>.

=for apidoc mn|SV *|PL_DBsingle
When Perl is run in debugging mode, with the B<-d> switch, this SV is a
boolean which indicates whether subs are being single-stepped.
Single-stepping is automatically turned on after every step.  This is the C
variable which corresponds to Perl's $DB::single variable.  See
C<L</PL_DBsub>>.

=for apidoc mn|SV *|PL_DBtrace
Trace variable used when Perl is run in debugging mode, with the B<-d>
switch.  This is the C variable which corresponds to Perl's $DB::trace
variable.  See C<L</PL_DBsingle>>.

=cut
*/

PERLVAR(I, DBsub,	GV *)		/*  *DB::sub    */
PERLVAR(I, DBsingle,	SV *)		/*  $DB::single */
PERLVAR(I, DBtrace,	SV *)		/*  $DB::trace  */
PERLVAR(I, DBsignal,	SV *)		/*  $DB::signal */
PERLVAR(I, dbargs,	AV *)		/* args to call listed by caller function */

PERLVARA(I, DBcontrol,    DBVARMG_COUNT, IV) /* IV versions of $DB::single, trace, signal */

/* symbol tables */
PERLVAR(I, debstash,	HV *)		/* symbol table for perldb package */
PERLVAR(I, globalstash,	HV *)		/* global keyword overrides imported here */
PERLVAR(I, curstname,	SV *)		/* name of current package */
PERLVAR(I, beginav,	AV *)		/* names of BEGIN subroutines */
PERLVAR(I, endav,	AV *)		/* names of END subroutines */
PERLVAR(I, unitcheckav,	AV *)		/* names of UNITCHECK subroutines */
PERLVAR(I, checkav,	AV *)		/* names of CHECK subroutines */
PERLVAR(I, initav,	AV *)		/* names of INIT subroutines */

/* subprocess state */
PERLVAR(I, fdpid,	AV *)		/* keep fd-to-pid mappings for my_popen */

/* internal state */
PERLVARI(I, op_mask,	char *,	NULL)	/* masked operations for safe evals */

/* current interpreter roots */
PERLVAR(I, main_cv,	CV *)
PERLVAR(I, main_root,	OP *)
PERLVAR(I, main_start,	OP *)
PERLVAR(I, eval_root,	OP *)
PERLVAR(I, eval_start,	OP *)

/* runtime control stuff */
PERLVARI(I, curcopdb,	COP *,	NULL)

PERLVAR(I, filemode,	int)		/* so nextargv() can preserve mode */
PERLVAR(I, lastfd,	int)		/* what to preserve mode on */
PERLVAR(I, oldname,	char *)		/* what to preserve mode on */
PERLVAR(I, Argv,	const char **)	/* stuff to free from do_aexec, vfork safe */
PERLVAR(I, Cmd,		char *)		/* stuff to free from do_aexec, vfork safe */
/* Elements in this array have ';' appended and are injected as a single line
   into the tokeniser. You can't put any (literal) newlines into any program
   you stuff in into this array, as the point where it's injected is expecting
   a single physical line. */
PERLVAR(I, preambleav,	AV *)
PERLVAR(I, mess_sv,	SV *)
PERLVAR(I, ors_sv,	SV *)		/* output record separator $\ */

/* funky return mechanisms */
PERLVAR(I, forkprocess,	int)		/* so do_open |- can return proc# */

/* statics moved here for shared library purposes */
PERLVARI(I, gensym,	I32,	0)	/* next symbol for getsym() to define */
PERLVARI(I, cv_has_eval, bool, FALSE)	/* PL_compcv includes an entereval or similar */
PERLVAR(I, taint_warn,	bool)		/* taint warns instead of dying */
PERLVARI(I, laststype,	U16,	OP_STAT)

PERLVARI(I, laststatval, int,	-1)

PERLVAR(I, modcount,	I32)		/* how much op_lvalue()ification in
					   assignment? */

/* interpreter atexit processing */
PERLVARI(I, exitlistlen, I32, 0)	/* length of same */
PERLVARI(I, exitlist,	PerlExitListEntry *, NULL)
					/* list of exit functions */

/*
=for apidoc Amn|HV*|PL_modglobal

C<PL_modglobal> is a general purpose, interpreter global HV for use by
extensions that need to keep information on a per-interpreter basis.
In a pinch, it can also be used as a symbol table for extensions
to share data among each other.  It is a good idea to use keys
prefixed by the package name of the extension that owns the data.

=cut
*/

PERLVAR(I, modglobal,	HV *)		/* per-interp module data */

/* these used to be in global before 5.004_68 */
PERLVARI(I, profiledata, U32 *,	NULL)	/* table of ops, counts */

PERLVAR(I, compiling,	COP)		/* compiling/done executing marker */

PERLVAR(I, compcv,	CV *)		/* currently compiling subroutine */
PERLVAR(I, comppad_name, PADNAMELIST *)	/* variable names for "my" variables */
PERLVAR(I, comppad_name_fill,	I32)	/* last "introduced" variable offset */
PERLVAR(I, comppad_name_floor,	I32)	/* start of vars in innermost block */

#ifdef HAVE_INTERP_INTERN
PERLVAR(I, sys_intern,	struct interp_intern)
					/* platform internals */
#endif

/* more statics moved here */
PERLVAR(I, DBcv,	CV *)		/* from perl.c */
PERLVARI(I, generation,	int,	100)	/* scan sequence# for OP_AASSIGN
                                           compile-time common elem detection */

PERLVAR(I, unicode, U32)	/* Unicode features: $ENV{PERL_UNICODE} or -C */

PERLVARI(I, in_clean_objs,bool,    FALSE)	/* from sv.c */
PERLVARI(I, in_clean_all, bool,    FALSE)	/* ptrs to freed SVs now legal */
PERLVAR(I, nomemok,	bool)		/* let malloc context handle nomem */
PERLVARI(I, savebegin,	bool,	FALSE)	/* save BEGINs for compiler	*/


PERLVAR(I, delaymagic_uid,	Uid_t)	/* current real user id, only for delaymagic */
PERLVAR(I, delaymagic_euid,	Uid_t)	/* current effective user id, only for delaymagic */
PERLVAR(I, delaymagic_gid,	Gid_t)	/* current real group id, only for delaymagic */
PERLVAR(I, delaymagic_egid,	Gid_t)	/* current effective group id, only for delaymagic */
PERLVARI(I, an,		U32,	0)	/* malloc sequence number */

/* Perl_Ibreakable_sub_generation_ptr was too long for VMS, hence "gen"  */
PERLVARI(I, breakable_sub_gen, U32, 0)

#ifdef DEBUGGING
    /* exercise wrap-around */
    #define PERL_COP_SEQMAX (U32_MAX-50)
#else
    #define PERL_COP_SEQMAX 0
#endif
PERLVARI(I, cop_seqmax,	U32,	PERL_COP_SEQMAX) /* statement sequence number */
#undef PERL_COP_SEQMAX

PERLVARI(I, evalseq,	U32,	0)	/* eval sequence number */
PERLVAR(I, origalen,	U32)
PERLVAR(I, origenviron,	char **)
#ifdef PERL_USES_PL_PIDSTATUS
PERLVAR(I, pidstatus,	HV *)		/* pid-to-status mappings for waitpid */
#endif
PERLVAR(I, osname,	char *)		/* operating system */

PERLVAR(I, sighandlerp,	Sighandler_t)

PERLVARA(I, body_roots,	PERL_ARENA_ROOTS_SIZE, void*) /* array of body roots */

PERLVAR(I, debug,	VOL U32)	/* flags given to -D switch */

PERLVARI(I, maxo,	int,	MAXO)	/* maximum number of ops */

PERLVARI(I, runops,	runops_proc_t, RUNOPS_DEFAULT)

PERLVAR(I, subname,	SV *)		/* name of current subroutine */

PERLVAR(I, subline,	I32)		/* line this subroutine began on */
PERLVAR(I, min_intro_pending, I32)	/* start of vars to introduce */

PERLVAR(I, max_intro_pending, I32)	/* end of vars to introduce */
PERLVAR(I, padix,	I32)		/* lowest unused index - 1
					   in current "register" pad */
PERLVAR(I, constpadix,	I32)		/* lowest unused for constants */

PERLVAR(I, padix_floor,	I32)		/* how low may inner block reset padix */

#ifdef USE_LOCALE_COLLATE
PERLVAR(I, collation_name, char *)	/* Name of current collation */
PERLVAR(I, collxfrm_base, Size_t)	/* Basic overhead in *xfrm() */
PERLVARI(I, collxfrm_mult,Size_t, 2)	/* Expansion factor in *xfrm() */
PERLVARI(I, collation_ix, U32,	0)	/* Collation generation index */
PERLVARI(I, collation_standard, bool, TRUE)
					/* Assume simple collation */
#endif /* USE_LOCALE_COLLATE */

#ifdef PERL_SAWAMPERSAND
PERLVAR(I, sawampersand, U8)		/* must save all match strings */
#endif

PERLVAR(I, unsafe,	bool)
PERLVAR(I, colorset,	bool)		/* PERL_RE_COLORS env var is in use */

/* current phase the interpreter is in
   for ordering this structure to remove holes, we're assuming that this is 4
   bytes.  */
PERLVARI(I, phase,	enum perl_phase, PERL_PHASE_CONSTRUCT)

PERLVARI(I, in_load_module, bool, FALSE)	/* to prevent recursions in PerlIO_find_layer */

/* This value may be set when embedding for full cleanup  */
/* 0=none, 1=full, 2=full with checks */
/* mod_perl is special, and also assigns a meaning -1 */
PERLVARI(I, perl_destruct_level, signed char,	0)

#ifdef USE_LOCALE_NUMERIC

PERLVARI(I, numeric_standard, int, TRUE)
					/* Assume simple numerics */
PERLVARI(I, numeric_local, bool, TRUE)
					/* Assume local numerics */
PERLVAR(I, numeric_name, char *)	/* Name of current numeric locale */
PERLVAR(I, numeric_radix_sv, SV *)	/* The radix separator if not '.' */

#endif /* !USE_LOCALE_NUMERIC */

/* Unicode inversion lists */
PERLVAR(I, Latin1,	SV *)
PERLVAR(I, UpperLatin1,	SV *)   /* Code points 128 - 255 */
PERLVAR(I, AboveLatin1,	SV *)
PERLVAR(I, InBitmap,	SV *)

PERLVAR(I, NonL1NonFinalFold,   SV *)
PERLVAR(I, HasMultiCharFold,   SV *)

/* utf8 character class swashes */
PERLVAR(I, utf8_mark,	SV *)
PERLVAR(I, utf8_toupper, SV *)
PERLVAR(I, utf8_totitle, SV *)
PERLVAR(I, utf8_tolower, SV *)
PERLVAR(I, utf8_tofold,	SV *)
PERLVAR(I, utf8_charname_begin, SV *)
PERLVAR(I, utf8_charname_continue, SV *)

PERLVARA(I, utf8_swash_ptrs, POSIX_SWASH_COUNT, SV *)
PERLVARA(I, Posix_ptrs, POSIX_CC_COUNT, SV *)
PERLVARA(I, XPosix_ptrs, POSIX_CC_COUNT, SV *)
PERLVAR(I, GCB_invlist, SV *)
PERLVAR(I, LB_invlist, SV *)
PERLVAR(I, SB_invlist, SV *)
PERLVAR(I, WB_invlist, SV *)

PERLVAR(I, last_swash_hv, HV *)
PERLVAR(I, last_swash_tmps, U8 *)
PERLVAR(I, last_swash_slen, STRLEN)
PERLVARA(I, last_swash_key,UTF8_MAXBYTES-1, U8)
PERLVAR(I, last_swash_klen, U8)		/* Only needs to store 0-12  */

#ifdef FCRYPT
PERLVARI(I, cryptseen,	bool,	FALSE)	/* has fast crypt() been initialized? */
#else
/* One byte hole in the interpreter structure.  */
#endif

PERLVAR(I, pad_reset_pending, bool)	/* reset pad on next attempted alloc */
PERLVAR(I, srand_called, bool)

/* Array of signal handlers, indexed by signal number, through which the C
   signal handler dispatches.  */
PERLVAR(I, psig_ptr,	SV **)
/* Array of names of signals, indexed by signal number, for (re)use as the first
   argument to a signal handler.   Only one block of memory is allocated for
   both psig_name and psig_ptr.  */
PERLVAR(I, psig_name,	SV **)

#if defined(PERL_IMPLICIT_SYS)
PERLVAR(I, Mem,		struct IPerlMem *)
PERLVAR(I, MemShared,	struct IPerlMem *)
PERLVAR(I, MemParse,	struct IPerlMem *)
PERLVAR(I, Env,		struct IPerlEnv *)
PERLVAR(I, StdIO,	struct IPerlStdIO *)
PERLVAR(I, LIO,		struct IPerlLIO *)
PERLVAR(I, Dir,		struct IPerlDir *)
PERLVAR(I, Sock,	struct IPerlSock *)
PERLVAR(I, Proc,	struct IPerlProc *)
#endif

PERLVAR(I, ptr_table,	PTR_TBL_t *)
PERLVARI(I, beginav_save, AV *, NULL)	/* save BEGIN{}s when compiling */

PERLVAR(I, body_arenas, void *)		/* pointer to list of body-arenas */


#if defined(USE_ITHREADS)
PERLVAR(I, regex_pad,     SV **)	/* Shortcut into the array of
					   regex_padav */
PERLVAR(I, regex_padav,   AV *)		/* All regex objects, indexed via the
					   values in op_pmoffset of pmop.
					   Entry 0 is an SV whose PV is a
					   "packed" list of IVs listing
					   the now-free slots in the array */
PERLVAR(I, stashpad,    HV **)		/* for CopSTASH */
PERLVARI(I, stashpadmax, PADOFFSET, 64)
PERLVARI(I, stashpadix, PADOFFSET, 0)
#endif

#ifdef USE_REENTRANT_API
PERLVAR(I, reentrant_buffer, REENTR *)	/* here we store the _r buffers */
#endif

PERLVAR(I, custom_op_names, HV *)	/* Names of user defined ops */
PERLVAR(I, custom_op_descs, HV *)	/* Descriptions of user defined ops */

#ifdef PERLIO_LAYERS
PERLVARI(I, perlio,	PerlIOl *, NULL)
PERLVARI(I, known_layers, PerlIO_list_t *, NULL)
PERLVARI(I, def_layerlist, PerlIO_list_t *, NULL)
#endif

PERLVARI(I, encoding,	SV *,	NULL)	/* $^ENCODING */
PERLVARI(I, lex_encoding, SV *,	NULL)	/* encoding pragma */

PERLVAR(I, utf8_idstart, SV *)
PERLVAR(I, utf8_idcont,	SV *)
PERLVAR(I, utf8_xidstart, SV *)
PERLVAR(I, utf8_perl_idstart, SV *)
PERLVAR(I, utf8_perl_idcont, SV *)
PERLVAR(I, utf8_xidcont, SV *)

PERLVAR(I, sort_RealCmp, SVCOMPARE_t)

PERLVARI(I, checkav_save, AV *, NULL)	/* save CHECK{}s when compiling */
PERLVARI(I, unitcheckav_save, AV *, NULL)
					/* save UNITCHECK{}s when compiling */

PERLVARI(I, clocktick,	long,	0)	/* this many times() ticks in a second */

/* Hooks to shared SVs and locks. */
PERLVARI(I, sharehook,	share_proc_t, Perl_sv_nosharing)
PERLVARI(I, lockhook,	share_proc_t, Perl_sv_nosharing)
#ifdef NO_MATHOMS
#  define PERL_UNLOCK_HOOK Perl_sv_nosharing
#else
/* This reference ensures that the mathoms are linked with perl */
#  define PERL_UNLOCK_HOOK Perl_sv_nounlocking
#endif
PERLVARI(I, unlockhook,	share_proc_t, PERL_UNLOCK_HOOK)

PERLVARI(I, threadhook,	thrhook_proc_t,	Perl_nothreadhook)

/* Can shared object be destroyed */
PERLVARI(I, destroyhook, destroyable_proc_t, Perl_sv_destroyable)

#ifndef PERL_MICRO
PERLVARI(I, signalhook,	despatch_signals_proc_t, Perl_despatch_signals)
#endif

PERLVARI(I, isarev, HV *, NULL)		/* Reverse map of @@ISA dependencies */

/* Register of known Method Resolution Orders.
   What this actually points to is an implementation detail (it may change to
   a structure incorporating a reference count - use mro_get_from_name to
   retrieve a C<struct mro_alg *>  */
PERLVAR(I, registered_mros, HV *)

/* Compile-time block start/end hooks */
PERLVAR(I, blockhooks,	AV *)

/* Everything that folds to a given character, for case insensitivity regex
 * matching */
PERLVARI(I, utf8_foldclosures, HV *, NULL)

/* List of characters that participate in folds (except marks, etc in
 * multi-char folds) */
PERLVARI(I, utf8_foldable, SV *, NULL)

PERLVAR(I, custom_ops,	HV *)		/* custom op registrations */

PERLVAR(I, Xpv,		XPV *)		/* (unused) held temporary value */

/* name of the scopes we've ENTERed. Only used with -DDEBUGGING, but needs to be
   present always, as -DDEBUGGING must be binary compatible with non.  */
PERLVARI(I, scopestack_name, const char * *, NULL)

PERLVAR(I, debug_pad,	struct perl_debug_pad)	/* always needed because of the re extension */

/* Hook for File::Glob */
PERLVARI(I, globhook,	globhook_t, NULL)

PERLVARI(I, padlist_generation, U32, 1)	/* id to identify padlist clones */

/* The last unconditional member of the interpreter structure when 5.18.0 was
   released. The offset of the end of this is baked into a global variable in 
   any shared perl library which will allow a sanity test in future perl
   releases.  */
#define PERL_LAST_5_18_0_INTERP_MEMBER	Iglobhook

#ifdef PERL_IMPLICIT_CONTEXT
PERLVARI(I, my_cxt_list, void **, NULL) /* per-module array of MY_CXT pointers */
PERLVARI(I, my_cxt_size, int,	0)	/* size of PL_my_cxt_list */
#  ifdef PERL_GLOBAL_STRUCT_PRIVATE
PERLVARI(I, my_cxt_keys, const char **, NULL) /* per-module array of pointers to MY_CXT_KEY constants */
#  endif
#endif

#if defined(PERL_IMPLICIT_CONTEXT) || defined(PERL_DEBUG_READONLY_COW)
/* For use with the memory debugging code in util.c. This is used only in
 * DEBUGGING builds (as long as the relevant structure is defined), but
 * defining it in non-debug builds too means that we retain binary
 * compatibility between otherwise-compatible plain and debug builds. */
PERLVAR(I, memory_debug_header, struct perl_memory_debug_header)
#endif

#ifdef DEBUG_LEAKING_SCALARS_FORK_DUMP
/* File descriptor to talk to the child which dumps scalars.  */
PERLVARI(I, dumper_fd,	int,	-1)
#endif


#ifdef DEBUG_LEAKING_SCALARS
PERLVARI(I, sv_serial,	U32,	0)	/* SV serial number, used in sv.c */
#endif

PERLVARA(I, sv_consts, SV_CONSTS_COUNT, SV*)	/* constant SVs with precomputed hash value */

#ifdef PERL_TRACE_OPS
PERLVARA(I, op_exec_cnt, OP_max+2, UV)	/* Counts of executed OPs of the given type.
                                           If PERL_TRACE_OPS is enabled, we'll dump
                                           a summary count of all ops executed in the
                                           program at perl_destruct time. For
                                           profiling/debugging only. Works only if
                                           DEBUGGING is enabled, too. */
#endif

PERLVAR(I, random_state, PL_RANDOM_STATE_TYPE)

PERLVARI(I, dump_re_max_len, STRLEN, 0)

/* If you are adding a U8 or U16, check to see if there are 'Space' comments
 * above on where there are gaps which currently will be structure padding.  */

/* Within a stable branch, new variables must be added to the very end, before
 * this comment, for binary compatibility (the offsets of the old members must
 *  not change).
 * (Don't forget to add your variable also to perl_clone()!)
 * XSUB.h provides wrapper functions via perlapi.h that make this
 * irrelevant, but not all code may be expected to #include XSUB.h.
 */
@


1.2
log
@Update to perl 5.20.3

OK bluhm@@
@
text
@d54 1
a54 1
PERLVAR(I, tmps_max,	SSize_t)
d70 3
d78 15
a92 1
PERLVAR(I, tainted,	bool)		/* using variables controlled by $< */
d94 1
d102 1
a102 1
The C variable which corresponds to Perl's $^W warning variable.
a129 3
PERLVAR(I, sv_objcount,	IV)		/* DEPRECATED AND UNMAINTAINED.
                                         * Will be removed in Perl 5.22.
                                         * Used to be: how many objects are currently allocated. */
d151 1
a151 1
This is the C<false> SV.  See C<PL_sv_yes>.  Always refer to this as
d155 1
a155 1
This is the C<true> SV.  See C<PL_sv_no>.  Always refer to this as
d164 2
a192 5
#ifdef HAS_TIMES
/* Will be removed soon after v5.21.0. See RT #121351 */
PERLVAR(I, timesbuf,	struct tms)
#endif

d248 3
d331 1
a336 1
PERLVAR(I, apiversion,	SV *)
d388 1
a388 1
C<PL_DBsingle>.
d395 1
a395 1
C<PL_DBsub>.
d400 1
a400 1
variable.  See C<PL_DBsingle>.
d411 2
d502 2
a503 1
PERLVARI(I, generation,	int,	100)	/* from op.c */
d555 3
a557 1
PERLVAR(I, padix,	I32)		/* max used index in current "register" pad */
d591 1
a591 1
PERLVARI(I, numeric_standard, bool, TRUE)
d604 1
a610 2
PERLVAR(I, utf8_X_regular_begin, SV *)
PERLVAR(I, utf8_X_extend, SV *)
d621 4
d693 2
a694 1
PERLVARI(I, encoding,	SV *,	NULL)	/* character encoding */
d763 3
a765 1
/* The last unconditional member of the interpreter structure when 5.20.3 was
d779 5
a783 2
#ifdef PERL_TRACK_MEMPOOL
/* For use with the memory debugging code in util.c  */
a791 5
#ifdef PERL_MAD
PERLVARI(I, madskills,	bool,	FALSE)	/* preserve all syntactic info */
					/* (MAD = Misc Attribute Decoration) */
PERLVARI(I, xmlfp,	PerlIO *, NULL)
#endif
d809 2
@


1.1
log
@Initial revision
@
text
@d1 18
a18 3
/***********************************************/
/* Global only to current interpreter instance */
/***********************************************/
d20 5
a24 1
/* Don't forget to re-run embed.pl to propagate changes! */
d28 2
a29 1
 * to generate the appropriate export list for win32.
d33 275
a307 2
 * Avoid build-specific #ifdefs here, like DEBUGGING.  That way,
 * we can keep binary compatibility of the curinterp structure */
d310 23
a332 31
PERLVAR(Iorigargc,	int)
PERLVAR(Iorigargv,	char **)
PERLVAR(Ienvgv,		GV *)
PERLVAR(Isiggv,		GV *)
PERLVAR(Iincgv,		GV *)
PERLVAR(Ihintgv,	GV *)
PERLVAR(Iorigfilename,	char *)
PERLVAR(Idiehook,	SV *)
PERLVAR(Iwarnhook,	SV *)
PERLVAR(Iparsehook,	SV *)
PERLVAR(Icddir,		char *)		/* switches */
PERLVAR(Iminus_c,	bool)
PERLVAR(Ipatchlevel[10],char)
PERLVAR(Ilocalpatches,	char **)
PERLVARI(Isplitstr,	char *,	" ")
PERLVAR(Ipreprocess,	bool)
PERLVAR(Iminus_n,	bool)
PERLVAR(Iminus_p,	bool)
PERLVAR(Iminus_l,	bool)
PERLVAR(Iminus_a,	bool)
PERLVAR(Iminus_F,	bool)
PERLVAR(Idoswitches,	bool)
PERLVAR(Idowarn,	bool)
PERLVAR(Idoextract,	bool)
PERLVAR(Isawampersand,	bool)		/* must save all match strings */
PERLVAR(Isawstudy,	bool)		/* do fbm_instr on all strings */
PERLVAR(Isawvec,	bool)
PERLVAR(Iunsafe,	bool)
PERLVAR(Iinplace,	char *)
PERLVAR(Ie_script,	SV *)
PERLVAR(Iperldb,	U32)
d334 2
a335 7
/* This value may be raised by extensions for testing purposes */
/* 0=none, 1=full, 2=full with checks */
PERLVARI(Iperl_destruct_level,	int,	0)

/* magical thingies */
PERLVAR(Ibasetime,	Time_t)		/* $^T */
PERLVAR(Iformfeed,	SV *)		/* $^L */
d337 1
d339 1
a339 1
PERLVARI(Imaxsysfd,	I32,	MAXSYSFD)
d341 1
a341 2
PERLVAR(Imultiline,	int)		/* $*--do strings hold >1 line? */
PERLVAR(Istatusvalue,	I32)		/* $? */
d343 3
a345 1
PERLVAR(Istatusvalue_vms,U32)
d348 3
d352 5
a356 4
PERLVAR(Istdingv,	GV *)
PERLVAR(Idefgv,		GV *)
PERLVAR(Iargvgv,	GV *)
PERLVAR(Iargvoutgv,	GV *)
d359 1
a359 8
/* XXX these three aren't used anywhere */
PERLVAR(Ileftgv,	GV *)
PERLVAR(Iampergv,	GV *)
PERLVAR(Irightgv,	GV *)

/* this one needs to be moved to thrdvar.h and accessed via
 * find_threadsv() when USE_THREADS */
PERLVAR(Ireplgv,	GV *)
d362 1
a362 1
PERLVAR(Ierrgv,		GV *)
d365 30
a394 8
PERLVAR(IDBgv,		GV *)
PERLVAR(IDBline,	GV *)
PERLVAR(IDBsub,		GV *)
PERLVAR(IDBsingle,	SV *)
PERLVAR(IDBtrace,	SV *)
PERLVAR(IDBsignal,	SV *)
PERLVAR(Ilineary,	AV *)		/* lines of script for debugger */
PERLVAR(Idbargs,	AV *)		/* args to call listed by caller function */
d397 8
a404 19
PERLVAR(Idebstash,	HV *)		/* symbol table for perldb package */
PERLVAR(Iglobalstash,	HV *)		/* global keyword overrides imported here */
PERLVAR(Icurstname,	SV *)		/* name of current package */
PERLVAR(Ibeginav,	AV *)		/* names of BEGIN subroutines */
PERLVAR(Iendav,		AV *)		/* names of END subroutines */
PERLVAR(Iinitav,	AV *)		/* names of INIT subroutines */
PERLVAR(Istrtab,	HV *)		/* shared string table */
PERLVARI(Isub_generation,U32,1)		/* incr to invalidate method cache */

/* memory management */
PERLVAR(Isv_count,	I32)		/* how many SV* are currently allocated */
PERLVAR(Isv_objcount,	I32)		/* how many objects are currently allocated */
PERLVAR(Isv_root,	SV*)		/* storage for SVs belonging to interp */
PERLVAR(Isv_arenaroot,	SV*)		/* list of areas for garbage collection */

/* funky return mechanisms */
PERLVAR(Ilastspbase,	I32)
PERLVAR(Ilastsize,	I32)
PERLVAR(Iforkprocess,	int)		/* so do_open |- can return proc# */
d407 1
a407 1
PERLVAR(Ifdpid,		AV *)		/* keep fd-to-pid mappings for my_popen */
d410 1
a410 9
PERLVAR(Itainting,	bool)		/* doing taint checks */
PERLVARI(Iop_mask,	char *,	NULL)	/* masked operations for safe evals */
PERLVAR(Ilast_proto, char *)		/* Prototype of last sub seen. */

/* trace state */
PERLVAR(Idlevel,	I32)
PERLVARI(Idlmax,	I32,	128)
PERLVAR(Idebname,	char *)
PERLVAR(Idebdelim,	char *)
d413 5
a417 5
PERLVAR(Imain_cv,	CV *)
PERLVAR(Imain_root,	OP *)
PERLVAR(Imain_start,	OP *)
PERLVAR(Ieval_root,	OP *)
PERLVAR(Ieval_start,	OP *)
d420 17
a436 2
PERLVARI(Icurcopdb,	COP *,	NULL)
PERLVARI(Icopline,	line_t,	NOLINE)
d439 9
a447 20
PERLVAR(Istrchop,	SV)		/* return value from chop */
PERLVAR(Ifilemode,	int)		/* so nextargv() can preserve mode */
PERLVAR(Ilastfd,	int)		/* what to preserve mode on */
PERLVAR(Ioldname,	char *)		/* what to preserve mode on */
PERLVAR(IArgv,		char **)	/* stuff to free from do_aexec, vfork safe */
PERLVAR(ICmd,		char *)		/* stuff to free from do_aexec, vfork safe */
PERLVAR(Imystrk,	SV *)		/* temp key string for do_each() */
PERLVAR(Idumplvl,	I32)		/* indentation level on syntax tree dump */
PERLVAR(Ioldlastpm,	PMOP *)		/* for saving regexp context in debugger */
PERLVAR(Igensym,	I32)		/* next symbol for getsym() to define */
PERLVAR(Ipreambled,	bool)
PERLVAR(Ipreambleav,	AV *)
PERLVARI(Ilaststatval,	int,	-1)
PERLVARI(Ilaststype,	I32,	OP_STAT)
PERLVAR(Imess_sv,	SV *)

/* XXX shouldn't these be per-thread? --GSAR */
PERLVAR(Iors,		char *)		/* output record separator $\ */
PERLVAR(Iorslen,	STRLEN)
PERLVAR(Iofmt,		char *)		/* output format for numbers $# */
d450 2
a451 1
PERLVARI(Iexitlist,	PerlExitListEntry *, NULL)
d453 14
a466 2
PERLVARI(Iexitlistlen,	I32, 0)		/* length of same */
PERLVAR(Imodglobal,	HV *)		/* per-interp module data */
d469 8
a476 11
PERLVARI(Iprofiledata,	U32 *,	NULL)	/* table of ops, counts */
PERLVARI(Irsfp,	PerlIO * VOL,	Nullfp) /* current source file pointer */
PERLVARI(Irsfp_filters,	AV *,	Nullav)	/* keeps active source filters */

PERLVAR(Icompiling,	COP)		/* compiling/done executing marker */

PERLVAR(Icompcv,	CV *)		/* currently compiling subroutine */
PERLVAR(Icomppad,	AV *)		/* storage for lexically scoped temporaries */
PERLVAR(Icomppad_name,	AV *)		/* variable names for "my" variables */
PERLVAR(Icomppad_name_fill,	I32)	/* last "introduced" variable offset */
PERLVAR(Icomppad_name_floor,	I32)	/* start of vars in innermost block */
d479 1
a479 1
PERLVAR(Isys_intern,	struct interp_intern)
d484 277
a760 31
PERLVARI(Igeneration,	int,	100)	/* from op.c */
PERLVAR(IDBcv,		CV *)		/* from perl.c */
PERLVAR(Iarchpat_auto,	char*)		/* from perl.c */

PERLVARI(Iin_clean_objs,bool,    FALSE)	/* from sv.c */
PERLVARI(Iin_clean_all,	bool,    FALSE)	/* from sv.c */

PERLVAR(Ilinestart,	char *)		/* beg. of most recently read line */
PERLVAR(Ipending_ident,	char)		/* pending identifier lookup */
PERLVAR(Isublex_info,	SUBLEXINFO)	/* from toke.c */

#ifdef USE_THREADS
PERLVAR(Ithrsv,		SV *)		/* struct perl_thread for main thread */
PERLVARI(Ithreadnum,	U32,	0)	/* incremented each thread creation */
PERLVAR(Istrtab_mutex,	perl_mutex)	/* Mutex for string table access */
#endif /* USE_THREADS */

PERLVARI(Ibytecode_iv_overflows,int,	0)	/* from bytecode.h */
PERLVAR(Ibytecode_sv,	SV *)
PERLVAR(Ibytecode_pv,	XPV)
PERLVAR(Ibytecode_obj_list,	void **)
PERLVARI(Ibytecode_obj_list_fill, I32,	-1)

#ifdef PERL_OBJECT
PERLVARI(piMem,		IPerlMem*,  NULL)
PERLVARI(piENV,		IPerlEnv*,  NULL)
PERLVARI(piStdIO,	IPerlStdIO*, NULL)
PERLVARI(piLIO,		IPerlLIO*,  NULL)
PERLVARI(piDir,		IPerlDir*,  NULL)
PERLVARI(piSock,	IPerlSock*, NULL)
PERLVARI(piProc,	IPerlProc*, NULL)
d762 34
@


1.1.1.1
log
@perl5.005_03
@
text
@@


1.1.1.2
log
@virgin perl 5.6.0
@
text
@d11 4
a14 1
 * When building without MULTIPLICITY, these variables will be truly global. */
d20 1
d26 2
a27 2

/* switches */
d29 1
a29 1
PERLVAR(Ipatchlevel,	SV *)
d39 1
a39 11

/*
=for apidoc Amn|bool|PL_dowarn

The C variable which corresponds to Perl's $^W warning variable.

=cut
*/

PERLVAR(Idowarn,	U8)
PERLVAR(Iwidesyscalls,	bool)		/* wide system calls */
d42 2
d49 1
a49 1
/* This value may be set when embedding for full cleanup  */
a61 1
PERLVAR(Iexit_flags,	U8)		/* was exit() unexpected, etc. */
a67 1
PERLVAR(Istderrgv,	GV *)
a70 1
PERLVAR(Iargvout_stack,	AV *)
d73 5
a87 23

/*
=for apidoc Amn|GV *|PL_DBsub
When Perl is run in debugging mode, with the B<-d> switch, this GV contains
the SV which holds the name of the sub being debugged.  This is the C
variable which corresponds to Perl's $DB::sub variable.  See
C<PL_DBsingle>.

=for apidoc Amn|SV *|PL_DBsingle
When Perl is run in debugging mode, with the B<-d> switch, this SV is a
boolean which indicates whether subs are being single-stepped. 
Single-stepping is automatically turned on after every step.  This is the C
variable which corresponds to Perl's $DB::single variable.  See
C<PL_DBsub>.

=for apidoc Amn|SV *|PL_DBtrace
Trace variable used when Perl is run in debugging mode, with the B<-d>
switch.  This is the C variable which corresponds to Perl's $DB::trace
variable.  See C<PL_DBsingle>.

=cut
*/

a100 1
PERLVAR(Icheckav,	AV *)		/* names of CHECK subroutines */
d112 2
d122 7
d142 1
d148 3
a166 13

/*
=for apidoc Amn|HV*|PL_modglobal

C<PL_modglobal> is a general purpose, interpreter global HV for use by 
extensions that need to keep information on a per-interpreter basis.
In a pinch, it can also be used as a symbol table for extensions 
to share data among each other.  It is a good idea to use keys 
prefixed by the package name of the extension that owns the data.

=cut
*/

d190 1
d205 14
a218 215
PERLVAR(Iuid,		Uid_t)		/* current real user id */
PERLVAR(Ieuid,		Uid_t)		/* current effective user id */
PERLVAR(Igid,		Gid_t)		/* current real group id */
PERLVAR(Iegid,		Gid_t)		/* current effective group id */
PERLVAR(Inomemok,	bool)		/* let malloc context handle nomem */
PERLVAR(Ian,		U32)		/* malloc sequence number */
PERLVAR(Icop_seqmax,	U32)		/* statement sequence number */
PERLVAR(Iop_seqmax,	U16)		/* op sequence number */
PERLVAR(Ievalseq,	U32)		/* eval sequence number */
PERLVAR(Iorigenviron,	char **)
PERLVAR(Iorigalen,	U32)
PERLVAR(Ipidstatus,	HV *)		/* pid-to-status mappings for waitpid */
PERLVARI(Imaxo,	int,	MAXO)		/* maximum number of ops */
PERLVAR(Iosname,	char *)		/* operating system */
PERLVARI(Ish_path,	char *,	SH_PATH)/* full path of shell */
PERLVAR(Isighandlerp,	Sighandler_t)

PERLVAR(Ixiv_arenaroot,	XPV*)		/* list of allocated xiv areas */
PERLVAR(Ixiv_root,	IV *)		/* free xiv list--shared by interpreters */
PERLVAR(Ixnv_root,	NV *)		/* free xnv list--shared by interpreters */
PERLVAR(Ixrv_root,	XRV *)		/* free xrv list--shared by interpreters */
PERLVAR(Ixpv_root,	XPV *)		/* free xpv list--shared by interpreters */
PERLVAR(Ixpviv_root,	XPVIV *)	/* free xpviv list--shared by interpreters */
PERLVAR(Ixpvnv_root,	XPVNV *)	/* free xpvnv list--shared by interpreters */
PERLVAR(Ixpvcv_root,	XPVCV *)	/* free xpvcv list--shared by interpreters */
PERLVAR(Ixpvav_root,	XPVAV *)	/* free xpvav list--shared by interpreters */
PERLVAR(Ixpvhv_root,	XPVHV *)	/* free xpvhv list--shared by interpreters */
PERLVAR(Ixpvmg_root,	XPVMG *)	/* free xpvmg list--shared by interpreters */
PERLVAR(Ixpvlv_root,	XPVLV *)	/* free xpvlv list--shared by interpreters */
PERLVAR(Ixpvbm_root,	XPVBM *)	/* free xpvbm list--shared by interpreters */
PERLVAR(Ihe_root,	HE *)		/* free he list--shared by interpreters */
PERLVAR(Inice_chunk,	char *)		/* a nice chunk of memory to reuse */
PERLVAR(Inice_chunk_size,	U32)	/* how nice the chunk of memory is */

PERLVARI(Irunops,	runops_proc_t,	MEMBER_TO_FPTR(RUNOPS_DEFAULT))

PERLVARA(Itokenbuf,256,	char)

/*
=for apidoc Amn|SV|PL_sv_undef
This is the C<undef> SV.  Always refer to this as C<&PL_sv_undef>.

=for apidoc Amn|SV|PL_sv_no
This is the C<false> SV.  See C<PL_sv_yes>.  Always refer to this as
C<&PL_sv_no>.

=for apidoc Amn|SV|PL_sv_yes
This is the C<true> SV.  See C<PL_sv_no>.  Always refer to this as
C<&PL_sv_yes>.

=cut
*/

PERLVAR(Isv_undef,	SV)
PERLVAR(Isv_no,		SV)
PERLVAR(Isv_yes,	SV)

#ifdef CSH
PERLVARI(Icshname,	char *,	CSH)
PERLVAR(Icshlen,	I32)
#endif

PERLVAR(Ilex_state,	U32)		/* next token is determined */
PERLVAR(Ilex_defer,	U32)		/* state after determined token */
PERLVAR(Ilex_expect,	int)		/* expect after determined token */
PERLVAR(Ilex_brackets,	I32)		/* bracket count */
PERLVAR(Ilex_formbrack,	I32)		/* bracket count at outer format level */
PERLVAR(Ilex_casemods,	I32)		/* casemod count */
PERLVAR(Ilex_dojoin,	I32)		/* doing an array interpolation */
PERLVAR(Ilex_starts,	I32)		/* how many interps done on level */
PERLVAR(Ilex_stuff,	SV *)		/* runtime pattern from m// or s/// */
PERLVAR(Ilex_repl,	SV *)		/* runtime replacement from s/// */
PERLVAR(Ilex_op,	OP *)		/* extra info to pass back on op */
PERLVAR(Ilex_inpat,	OP *)		/* in pattern $) and $| are special */
PERLVAR(Ilex_inwhat,	I32)		/* what kind of quoting are we in */
PERLVAR(Ilex_brackstack,char *)		/* what kind of brackets to pop */
PERLVAR(Ilex_casestack,	char *)		/* what kind of case mods in effect */

/* What we know when we're in LEX_KNOWNEXT state. */
PERLVARA(Inextval,5,	YYSTYPE)	/* value of next token, if any */
PERLVARA(Inexttype,5,	I32)		/* type of next token */
PERLVAR(Inexttoke,	I32)

PERLVAR(Ilinestr,	SV *)
PERLVAR(Ibufptr,	char *)
PERLVAR(Ioldbufptr,	char *)
PERLVAR(Ioldoldbufptr,	char *)
PERLVAR(Ibufend,	char *)
PERLVARI(Iexpect,int,	XSTATE)		/* how to interpret ambiguous tokens */

PERLVAR(Imulti_start,	I32)		/* 1st line of multi-line string */
PERLVAR(Imulti_end,	I32)		/* last line of multi-line string */
PERLVAR(Imulti_open,	I32)		/* delimiter of said string */
PERLVAR(Imulti_close,	I32)		/* delimiter of said string */

PERLVAR(Ierror_count,	I32)		/* how many errors so far, max 10 */
PERLVAR(Isubline,	I32)		/* line this subroutine began on */
PERLVAR(Isubname,	SV *)		/* name of current subroutine */

PERLVAR(Imin_intro_pending,	I32)	/* start of vars to introduce */
PERLVAR(Imax_intro_pending,	I32)	/* end of vars to introduce */
PERLVAR(Ipadix,		I32)		/* max used index in current "register" pad */
PERLVAR(Ipadix_floor,	I32)		/* how low may inner block reset padix */
PERLVAR(Ipad_reset_pending,	I32)	/* reset pad on next attempted alloc */

PERLVAR(Ilast_uni,	char *)		/* position of last named-unary op */
PERLVAR(Ilast_lop,	char *)		/* position of last list operator */
PERLVAR(Ilast_lop_op,	OPCODE)		/* last list operator */
PERLVAR(Iin_my,		I32)		/* we're compiling a "my" (or "our") declaration */
PERLVAR(Iin_my_stash,	HV *)		/* declared class of this "my" declaration */
#ifdef FCRYPT
PERLVAR(Icryptseen,	bool)		/* has fast crypt() been initialized? */
#endif

PERLVAR(Ihints,		U32)		/* pragma-tic compile-time flags */

PERLVAR(Idebug,		VOL U32)	/* flags given to -D switch */

PERLVAR(Iamagic_generation,	long)

#ifdef USE_LOCALE_COLLATE
PERLVAR(Icollation_ix,	U32)		/* Collation generation index */
PERLVAR(Icollation_name,char *)		/* Name of current collation */
PERLVARI(Icollation_standard, bool,	TRUE)
					/* Assume simple collation */
PERLVAR(Icollxfrm_base,	Size_t)		/* Basic overhead in *xfrm() */
PERLVARI(Icollxfrm_mult,Size_t,	2)	/* Expansion factor in *xfrm() */
#endif /* USE_LOCALE_COLLATE */

#ifdef USE_LOCALE_NUMERIC

PERLVAR(Inumeric_name,	char *)		/* Name of current numeric locale */
PERLVARI(Inumeric_standard,	bool,	TRUE)
					/* Assume simple numerics */
PERLVARI(Inumeric_local,	bool,	TRUE)
					/* Assume local numerics */
PERLVAR(Inumeric_radix,		char)
					/* The radix character if not '.' */

#endif /* !USE_LOCALE_NUMERIC */

/* utf8 character classes */
PERLVAR(Iutf8_alnum,	SV *)
PERLVAR(Iutf8_alnumc,	SV *)
PERLVAR(Iutf8_ascii,	SV *)
PERLVAR(Iutf8_alpha,	SV *)
PERLVAR(Iutf8_space,	SV *)
PERLVAR(Iutf8_cntrl,	SV *)
PERLVAR(Iutf8_graph,	SV *)
PERLVAR(Iutf8_digit,	SV *)
PERLVAR(Iutf8_upper,	SV *)
PERLVAR(Iutf8_lower,	SV *)
PERLVAR(Iutf8_print,	SV *)
PERLVAR(Iutf8_punct,	SV *)
PERLVAR(Iutf8_xdigit,	SV *)
PERLVAR(Iutf8_mark,	SV *)
PERLVAR(Iutf8_toupper,	SV *)
PERLVAR(Iutf8_totitle,	SV *)
PERLVAR(Iutf8_tolower,	SV *)
PERLVAR(Ilast_swash_hv,	HV *)
PERLVAR(Ilast_swash_klen,	U32)
PERLVARA(Ilast_swash_key,10,	U8)
PERLVAR(Ilast_swash_tmps,	U8 *)
PERLVAR(Ilast_swash_slen,	STRLEN)

/* perly.c globals */
PERLVAR(Iyydebug,	int)
PERLVAR(Iyynerrs,	int)
PERLVAR(Iyyerrflag,	int)
PERLVAR(Iyychar,	int)
PERLVAR(Iyyval,		YYSTYPE)
PERLVAR(Iyylval,	YYSTYPE)

PERLVAR(Iglob_index,	int)
PERLVAR(Isrand_called,	bool)
PERLVARA(Iuudmap,256,	char)
PERLVAR(Ibitcount,	char *)

#ifdef USE_THREADS
PERLVAR(Isv_mutex,	perl_mutex)	/* Mutex for allocating SVs in sv.c */
PERLVAR(Ieval_mutex,	perl_mutex)	/* Mutex for doeval */
PERLVAR(Ieval_cond,	perl_cond)	/* Condition variable for doeval */
PERLVAR(Ieval_owner,	struct perl_thread *)
					/* Owner thread for doeval */
PERLVAR(Inthreads,	int)		/* Number of threads currently */
PERLVAR(Ithreads_mutex,	perl_mutex)	/* Mutex for nthreads and thread list */
PERLVAR(Inthreads_cond,	perl_cond)	/* Condition variable for nthreads */
PERLVAR(Isvref_mutex,	perl_mutex)	/* Mutex for SvREFCNT_{inc,dec} */
PERLVARI(Ithreadsv_names,char *,	THREADSV_NAMES)
#ifdef FAKE_THREADS
PERLVAR(Icurthr,	struct perl_thread *)
					/* Currently executing (fake) thread */
#endif

PERLVAR(Icred_mutex,	perl_mutex)	/* altered credentials in effect */

#endif /* USE_THREADS */

PERLVAR(Ipsig_ptr, SV**)
PERLVAR(Ipsig_name, SV**)

#if defined(PERL_IMPLICIT_SYS)
PERLVAR(IMem,		struct IPerlMem*)
PERLVAR(IMemShared,	struct IPerlMem*)
PERLVAR(IMemParse,	struct IPerlMem*)
PERLVAR(IEnv,		struct IPerlEnv*)
PERLVAR(IStdIO,		struct IPerlStdIO*)
PERLVAR(ILIO,		struct IPerlLIO*)
PERLVAR(IDir,		struct IPerlDir*)
PERLVAR(ISock,		struct IPerlSock*)
PERLVAR(IProc,		struct IPerlProc*)
#endif

#if defined(USE_ITHREADS)
PERLVAR(Iptr_table,	PTR_TBL_t*)
@


1.1.1.3
log
@stock perl 5.6.1
@
text
@d37 1
a37 1
=for apidoc mn|bool|PL_dowarn
d92 1
a92 1
=for apidoc mn|GV *|PL_DBsub
d98 1
a98 1
=for apidoc mn|SV *|PL_DBsingle
d105 1
a105 1
=for apidoc mn|SV *|PL_DBtrace
d248 13
a260 13
PERLVAR(Ixiv_root,	IV *)		/* free xiv list */
PERLVAR(Ixnv_root,	NV *)		/* free xnv list */
PERLVAR(Ixrv_root,	XRV *)		/* free xrv list */
PERLVAR(Ixpv_root,	XPV *)		/* free xpv list */
PERLVAR(Ixpviv_root,	XPVIV *)	/* free xpviv list */
PERLVAR(Ixpvnv_root,	XPVNV *)	/* free xpvnv list */
PERLVAR(Ixpvcv_root,	XPVCV *)	/* free xpvcv list */
PERLVAR(Ixpvav_root,	XPVAV *)	/* free xpvav list */
PERLVAR(Ixpvhv_root,	XPVHV *)	/* free xpvhv list */
PERLVAR(Ixpvmg_root,	XPVMG *)	/* free xpvmg list */
PERLVAR(Ixpvlv_root,	XPVLV *)	/* free xpvlv list */
PERLVAR(Ixpvbm_root,	XPVBM *)	/* free xpvbm list */
PERLVAR(Ihe_root,	HE *)		/* free he list */
d366 2
a367 2
PERLVAR(Idummy1_bincompat,		char)
					/* Used to be numeric_radix */
a445 30
PERLVARI(Ibeginav_save, AV*, Nullav)	/* save BEGIN{}s when compiling */

#ifdef USE_THREADS
PERLVAR(Ifdpid_mutex,	perl_mutex)	/* mutex for fdpid array */
PERLVAR(Isv_lock_mutex,	perl_mutex)	/* mutex for SvLOCK macro */
#endif

PERLVAR(Inullstash,	HV *)		/* illegal symbols end up here */

PERLVAR(Ixnv_arenaroot,	XPV*)		/* list of allocated xnv areas */
PERLVAR(Ixrv_arenaroot,	XPV*)		/* list of allocated xrv areas */
PERLVAR(Ixpv_arenaroot,	XPV*)		/* list of allocated xpv areas */
PERLVAR(Ixpviv_arenaroot,XPVIV*)	/* list of allocated xpviv areas */
PERLVAR(Ixpvnv_arenaroot,XPVNV*)	/* list of allocated xpvnv areas */
PERLVAR(Ixpvcv_arenaroot,XPVCV*)	/* list of allocated xpvcv areas */
PERLVAR(Ixpvav_arenaroot,XPVAV*)	/* list of allocated xpvav areas */
PERLVAR(Ixpvhv_arenaroot,XPVHV*)	/* list of allocated xpvhv areas */
PERLVAR(Ixpvmg_arenaroot,XPVMG*)	/* list of allocated xpvmg areas */
PERLVAR(Ixpvlv_arenaroot,XPVLV*)	/* list of allocated xpvlv areas */
PERLVAR(Ixpvbm_arenaroot,XPVBM*)	/* list of allocated xpvbm areas */
PERLVAR(Ihe_arenaroot,	XPV*)		/* list of allocated he areas */

#ifdef USE_LOCALE_NUMERIC

PERLVAR(Inumeric_radix_sv,	SV *)	/* The radix separator if not '.' */
#endif

/* New variables must be added to the very end for binary compatibility.
 * XSUB.h provides wrapper functions via perlapi.h that make this
 * irrelevant, but not all code may be expected to #include XSUB.h. */
@


1.1.1.4
log
@stock perl 5.8.0 from CPAN
@
text
@a6 4
/* New variables must be added to the very end for binary compatibility.
 * XSUB.h provides wrapper functions via perlapi.h that make this
 * irrelevant, but not all code may be expected to #include XSUB.h. */

a36 2
=head1 Global Variables

d81 1
a81 1
 * find_threadsv() when USE_5005THREADS */
d100 1
a100 1
boolean which indicates whether subs are being single-stepped.
d172 2
a173 1
PERLVAR(Iors_sv,	SV *)		/* output record separator $\ */
d184 1
a184 1
C<PL_modglobal> is a general purpose, interpreter global HV for use by
d186 2
a187 2
In a pinch, it can also be used as a symbol table for extensions
to share data among each other.  It is a good idea to use keys
d224 1
a224 1
#ifdef USE_5005THREADS
d228 1
a228 1
#endif /* USE_5005THREADS */
d366 2
a368 2
PERLVAR(Inumeric_compat1,		char)
					/* Used to be numeric_radix */
a388 1
PERLVAR(Iutf8_tofold,	SV *)
d408 1
a408 1
#ifdef USE_5005THREADS
d426 1
a426 1
#endif /* USE_5005THREADS */
d448 1
a448 1
#ifdef USE_5005THREADS
a467 5
     /* 5.6.0 stopped here */

PERLVAR(Ipsig_pend, int *)		/* per-signal "count" of pending */
PERLVARI(Isig_pending, int,0)           /* Number if highest signal pending */

a470 1

a472 40
#if defined(USE_ITHREADS)
PERLVAR(Iregex_pad,     SV**)		/* All regex objects */
PERLVAR(Iregex_padav,   AV*)		/* All regex objects */

#ifdef USE_REENTRANT_API
PERLVAR(Ireentrant_buffer, REENTR*)	/* here we store the _r buffers */
#endif

#endif

PERLVAR(Isavebegin,     bool)	/* save BEGINs for compiler	*/

PERLVAR(Icustom_op_names, HV*)  /* Names of user defined ops */
PERLVAR(Icustom_op_descs, HV*)  /* Descriptions of user defined ops */

#ifdef PERLIO_LAYERS
PERLVARI(Iperlio, PerlIO *,NULL)
PERLVARI(Iknown_layers, PerlIO_list_t *,NULL)
PERLVARI(Idef_layerlist, PerlIO_list_t *,NULL)
#endif

PERLVARI(Iencoding,	SV*, Nullsv)		/* character encoding */

PERLVAR(Idebug_pad,	struct perl_debug_pad)	/* always needed because of the re extension */

PERLVAR(Itaint_warn, bool)      /* taint warns instead of dying */

#ifdef PL_OP_SLAB_ALLOC
PERLVAR(IOpPtr,I32 **)
PERLVARI(IOpSpace,I32,0)
PERLVAR(IOpSlab,I32 *)
#endif

PERLVAR(Iwantutf8, bool)	/* want utf8 as the default discipline */

PERLVAR(Iutf8_idstart,	SV *)
PERLVAR(Iutf8_idcont,	SV *)

PERLVAR(Isort_RealCmp,  SVCOMPARE_t)

a475 1

@


1.1.1.5
log
@perl 5.8.2 from CPAN
@
text
@a10 2
/* Don't forget to add your variable also to perl_clone()! */

d51 1
a51 1
PERLVAR(Iwidesyscalls,	bool)		/* unused since 5.8.1 */
d170 1
a170 1
PERLVARI(Igensym,	I32,	0)	/* next symbol for getsym() to define */
d208 1
a208 1
PERLVAR(IBINCOMPAT0,	AV *)		/* filler for binary compatibility */
d240 4
a243 4
PERLVARI(Ian,		U32,	0)	/* malloc sequence number */
PERLVARI(Icop_seqmax,	U32,	0)	/* statement sequence number */
PERLVARI(Iop_seqmax,	U16,	0)	/* op sequence number */
PERLVARI(Ievalseq,	U32,	0)	/* eval sequence number */
d249 1
a249 4

/* For binary compatibility with older versions only */
PERLVARI(Ish_path_compat,	char *,	SH_PATH)/* full path of shell */

d294 1
a294 1
PERLVARI(Icshlen,	I32,	0)
d346 1
a346 1
PERLVARI(Icryptseen,	bool,	FALSE)	/* has fast crypt() been initialized? */
d353 1
a353 1
PERLVARI(Iamagic_generation,	long,	0)
d356 1
a356 1
PERLVARI(Icollation_ix,	U32,	0)	/* Collation generation index */
d409 1
a409 1
PERLVARI(Iglob_index,	int,	0)
d495 1
a495 1
PERLVARI(Isavebegin,     bool,	FALSE)	/* save BEGINs for compiler	*/
d518 1
a518 1
PERLVAR(Iutf8locale,	bool)		/* utf8 locale detected */
d525 1
a525 40
PERLVARI(Icheckav_save, AV*, Nullav)	/* save CHECK{}s when compiling */

PERLVARI(Iclocktick, long, 0)	/* this many times() ticks in a second */

PERLVARI(Iin_load_module, int, 0)	/* to prevent recursions in PerlIO_find_layer */

PERLVAR(Iunicode, U32)	/* Unicode features: $ENV{PERL_UNICODE} or -C */

PERLVAR(Isignals, U32)	/* Using which pre-5.8 signals */

PERLVAR(Istashcache,	HV *)		/* Cache to speed up S_method_common */

PERLVAR(Ireentrant_retint, int)	/* Integer return value from reentrant functions */

/* Hooks to shared SVs and locks. */
PERLVARI(Isharehook,	share_proc_t,	MEMBER_TO_FPTR(Perl_sv_nosharing))
PERLVARI(Ilockhook,	share_proc_t,	MEMBER_TO_FPTR(Perl_sv_nolocking))
PERLVARI(Iunlockhook,	share_proc_t,	MEMBER_TO_FPTR(Perl_sv_nounlocking))
PERLVARI(Ithreadhook,	thrhook_proc_t,	MEMBER_TO_FPTR(Perl_nothreadhook))

/* Force inclusion of both runops options */
PERLVARI(Irunops_std,	runops_proc_t,	MEMBER_TO_FPTR(Perl_runops_standard))
PERLVARI(Irunops_dbg,	runops_proc_t,	MEMBER_TO_FPTR(Perl_runops_debug))

/* Stores the PPID */
#ifdef THREADS_HAVE_PIDS
PERLVARI(Ippid,		IV,		0)
#endif

PERLVARI(Ihash_seed, UV, 0)		/* Hash initializer */

PERLVARI(Ihash_seed_set, bool, FALSE)		/* Hash initialized? */

PERLVARI(Irehash_seed, UV, 0)		/* 582 hash initializer */

PERLVARI(Irehash_seed_set, bool, FALSE)	/* 582 hash initialized? */

/* New variables must be added to the very end, before this comment,
 * for binary compatibility (the offsets of the old members must not change).
 * (Don't forget to add your variable also to perl_clone()!)
d527 1
a527 2
 * irrelevant, but not all code may be expected to #include XSUB.h.
 */
@


1.1.1.6
log
@Import of stock perl 5.8.5
@
text
@d494 2
a497 2
#ifdef USE_REENTRANT_API
PERLVAR(Ireentrant_buffer, REENTR*)	/* here we store the _r buffers */
a566 5
/* These two variables are needed to preserve 5.8.x bincompat because we can't
   change function prototypes of two exported functions.  Probably should be
   taken out of blead soon, and relevant prototypes changed.  */
PERLVARI(Ifdscript, int, -1)	/* fd for script */
PERLVARI(Isuidscript, int, -1)	/* fd for suid script */
@


1.1.1.7
log
@perl 5.8.8 import
@
text
@d33 1
a33 1
PERLVARI(Isplitstr,	const char *, " ")
d253 1
a253 1
PERLVARI(Ish_path_compat,	const char *,	SH_PATH)/* full path of shell */
d298 1
a298 1
PERLVARI(Icshname,	const char *,	CSH)
a571 6

#if defined(USE_ITHREADS)
PERLVAR(Ipte_root,	struct ptr_tbl_ent *)	/* free ptr_tbl_ent list */
PERLVAR(Ipte_arenaroot,	XPV*)		/* list of allocated pte areas */
#endif

a578 4
#ifdef DEBUG_LEAKING_SCALARS_FORK_DUMP
/* File descriptor to talk to the child which dumps scalars.  */
PERLVARI(Idumper_fd, int, -1)
#endif
@


1.1.1.8
log
@import perl 5.10.0 from CPAN
@
text
@d1 3
a3 10
/*   intrpvar.h 
 *
 *    Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,
 *    2006, 2007
 *    by Larry Wall and others
 *
 *    You may distribute under the terms of either the GNU General Public
 *    License or the Artistic License, as specified in the README file.
 *
 */
d5 1
a5 8
/*
=head1 Per-Interpreter Variables
*/

/* These variables are per-interpreter in threaded/multiplicity builds,
 * global otherwise.

 * Don't forget to re-run embed.pl to propagate changes! */
d17 1
a17 170
 * When building without MULTIPLICITY, these variables will be truly global.
 *
 * Important ones in the first cache line (if alignment is done right) */

PERLVAR(Istack_sp,	SV **)		/* top of the stack */
#ifdef OP_IN_REGISTER
PERLVAR(Iopsave,	OP *)
#else
PERLVAR(Iop,		OP *)		/* currently executing op */
#endif
PERLVAR(Icurpad,	SV **)		/* active pad (lexicals+tmps) */

PERLVAR(Istack_base,	SV **)
PERLVAR(Istack_max,	SV **)

PERLVAR(Iscopestack,	I32 *)		/* scopes we've ENTERed */
PERLVAR(Iscopestack_ix,	I32)
PERLVAR(Iscopestack_max,I32)

PERLVAR(Isavestack,	ANY *)		/* items that need to be restored when
					   LEAVEing scopes we've ENTERed */
PERLVAR(Isavestack_ix,	I32)
PERLVAR(Isavestack_max,	I32)

PERLVAR(Itmps_stack,	SV **)		/* mortals we've made */
PERLVARI(Itmps_ix,	I32,	-1)
PERLVARI(Itmps_floor,	I32,	-1)
PERLVAR(Itmps_max,	I32)
PERLVAR(Imodcount,	I32)		/* how much mod()ification in
					   assignment? */

PERLVAR(Imarkstack,	I32 *)		/* stack_sp locations we're
					   remembering */
PERLVAR(Imarkstack_ptr,	I32 *)
PERLVAR(Imarkstack_max,	I32 *)

PERLVAR(ISv,		SV *)		/* used to hold temporary values */
PERLVAR(IXpv,		XPV *)		/* used to hold temporary values */

/*
=for apidoc Amn|STRLEN|PL_na

A convenience variable which is typically used with C<SvPV> when one
doesn't care about the length of the string.  It is usually more efficient
to either declare a local variable and use that instead or to use the
C<SvPV_nolen> macro.

=cut
*/

PERLVAR(Ina,		STRLEN)		/* for use in SvPV when length is
					   Not Applicable */

/* stat stuff */
PERLVAR(Istatbuf,	Stat_t)
PERLVAR(Istatcache,	Stat_t)		/* _ */
PERLVAR(Istatgv,	GV *)
PERLVARI(Istatname,	SV *,	NULL)

#ifdef HAS_TIMES
PERLVAR(Itimesbuf,	struct tms)
#endif

/* Fields used by magic variables such as $@@, $/ and so on */
PERLVAR(Icurpm,		PMOP *)		/* what to do \ interps in REs from */

/*
=for apidoc mn|SV*|PL_rs

The input record separator - C<$/> in Perl space.

=for apidoc mn|GV*|PL_last_in_gv

The GV which was last used for a filehandle input operation. (C<< <FH> >>)

=for apidoc mn|SV*|PL_ofs_sv

The output field separator - C<$,> in Perl space.

=cut
*/

PERLVAR(Irs,		SV *)		/* input record separator $/ */
PERLVAR(Ilast_in_gv,	GV *)		/* GV used in last <FH> */
PERLVAR(Iofs_sv,	SV *)		/* output field separator $, */
PERLVAR(Idefoutgv,	GV *)		/* default FH for output */
PERLVARI(Ichopset,	const char *, " \n-")	/* $: */
PERLVAR(Iformtarget,	SV *)
PERLVAR(Ibodytarget,	SV *)
PERLVAR(Itoptarget,	SV *)

/* Stashes */
PERLVAR(Idefstash,	HV *)		/* main symbol table */
PERLVAR(Icurstash,	HV *)		/* symbol table for current package */

PERLVAR(Irestartop,	OP *)		/* propagating an error from croak? */
PERLVAR(Icurcop,	COP * VOL)
PERLVAR(Icurstack,	AV *)		/* THE STACK */
PERLVAR(Icurstackinfo,	PERL_SI *)	/* current stack + context */
PERLVAR(Imainstack,	AV *)		/* the stack when nothing funny is
					   happening */

PERLVAR(Itop_env,	JMPENV *)	/* ptr to current sigjmp environment */
PERLVAR(Istart_env,	JMPENV)		/* empty startup sigjmp environment */
PERLVARI(Ierrors,	SV *,	NULL)	/* outstanding queued errors */

/* statics "owned" by various functions */
PERLVAR(Ihv_fetch_ent_mh, HE*)		/* owned by hv_fetch_ent() */

PERLVAR(Ilastgotoprobe,	OP*)		/* from pp_ctl.c */

/* sort stuff */
PERLVAR(Isortcop,	OP *)		/* user defined sort routine */
PERLVAR(Isortstash,	HV *)		/* which is in some package or other */
PERLVAR(Ifirstgv,	GV *)		/* $a */
PERLVAR(Isecondgv,	GV *)		/* $b */

/* float buffer */
PERLVAR(Iefloatbuf,	char *)
PERLVAR(Iefloatsize,	STRLEN)

/* regex stuff */

PERLVAR(Iscreamfirst,	I32 *)
PERLVAR(Iscreamnext,	I32 *)
PERLVAR(Ilastscream,	SV *)

PERLVAR(Ireg_state,	struct re_save_state)

PERLVAR(Iregdummy,	regnode)	/* from regcomp.c */

PERLVARI(Idumpindent,	U16,	4)	/* number of blanks per dump
					   indentation level */


PERLVAR(Iutf8locale,	bool)		/* utf8 locale detected */
PERLVARI(Irehash_seed_set, bool, FALSE)	/* 582 hash initialized? */

PERLVARA(Icolors,6,	char *)		/* from regcomp.c */

PERLVARI(Ipeepp,	peep_t, MEMBER_TO_FPTR(Perl_peep))
					/* Pointer to peephole optimizer */

PERLVARI(Imaxscream,	I32,	-1)
PERLVARI(Ireginterp_cnt,I32,	 0)	/* Whether "Regexp" was interpolated. */
PERLVARI(Iwatchaddr,	char **, 0)
PERLVAR(Iwatchok,	char *)

/* the currently active slab in a chain of slabs of regmatch states,
 * and the currently active state within that slab */

PERLVARI(Iregmatch_slab, regmatch_slab *,	NULL)
PERLVAR(Iregmatch_state, regmatch_state *)

/* Put anything new that is pointer aligned here. */

PERLVAR(Idelaymagic,	U16)		/* ($<,$>) = ... */
PERLVAR(Ilocalizing,	U8)		/* are we processing a local() list? */
PERLVAR(Icolorset,	bool)		/* from regcomp.c */
PERLVARI(Idirty,	bool, FALSE)	/* in the middle of tearing things
					   down? */
PERLVAR(Iin_eval,	VOL U8)		/* trap "fatal" errors? */
PERLVAR(Itainted,	bool)		/* using variables controlled by $< */

/* This value may be set when embedding for full cleanup  */
/* 0=none, 1=full, 2=full with checks */
/* mod_perl is special, and also assigns a meaning -1 */
PERLVARI(Iperl_destruct_level,	signed char,	0)

PERLVAR(Iperldb,	U32)
d30 1
d32 1
a32 1
PERLVAR(Ilocalpatches,	const char * const *)
a33 2

PERLVAR(Iminus_c,	bool)
a41 2
PERLVAR(Iminus_E,	bool)

d43 1
d53 1
a56 4
PERLVAR(Iexit_flags,	U8)		/* was exit() unexpected, etc. */
PERLVAR(Isrand_called,	bool)
/* Part of internal state, but makes the 16th 1 byte variable in a row.  */
PERLVAR(Itainting,	bool)		/* doing taint checks */
d59 5
d72 1
d74 1
a76 2
#else
PERLVAR(Istatusvalue_posix,I32)
a78 3
PERLVARI(Isig_pending, int,0)           /* Number if highest signal pending */
PERLVAR(Ipsig_pend, int *)		/* per-signal "count" of pending */

d88 2
d125 1
a133 1
PERLVAR(Iunitcheckav,	AV *)		/* names of UNITCHECK subroutines */
a138 3
/* funky return mechanisms */
PERLVAR(Iforkprocess,	int)		/* so do_open |- can return proc# */

d145 3
d152 1
d164 1
d166 1
d172 2
a173 4
/* Elements in this array have ';' appended and are injected as a single line
   into the tokeniser. You can't put any (literal) newlines into any program
   you stuff in into this array, as the point where it's injected is expecting
   a single physical line. */
d175 2
d178 2
d181 1
a181 6
/* statics moved here for shared library purposes */
PERLVARI(Igensym,	I32,	0)	/* next symbol for getsym() to define */
PERLVARI(Icv_has_eval, bool, FALSE) /* PL_compcv includes an entereval or similar */
PERLVAR(Itaint_warn,	bool)      /* taint warns instead of dying */
PERLVARI(Ilaststype,	U16,	OP_STAT)
PERLVARI(Ilaststatval,	int,	-1)
a183 1
PERLVARI(Iexitlistlen,	I32, 0)		/* length of same */
d186 1
d204 2
d210 1
a210 1
PERLVAR(Icomppad,	AV *)		/* storage for lexically scoped temporaries */
d221 1
a222 1
PERLVARI(Igeneration,	int,	100)	/* from op.c */
d226 10
a235 2
PERLVAR(Inomemok,	bool)		/* let malloc context handle nomem */
PERLVARI(Isavebegin,     bool,	FALSE)	/* save BEGINs for compiler	*/
d241 1
d244 1
d246 1
a247 2
PERLVAR(Iorigenviron,	char **)
#ifdef PERL_USES_PL_PIDSTATUS
d249 1
a249 1
#endif
d252 3
d257 14
a270 2
PERLVARA(Ibody_roots,	PERL_ARENA_ROOTS_SIZE, void*) /* array of body roots */

d274 1
a274 1
PERLVARI(Imaxo,	int,	MAXO)		/* maximum number of ops */
d276 1
a276 1
PERLVARI(Irunops,	runops_proc_t,	MEMBER_TO_FPTR(RUNOPS_DEFAULT))
d297 40
a338 1
PERLVAR(Isubline,	I32)		/* line this subroutine began on */
a339 1

a341 1

d345 9
d361 1
d363 2
a366 3
PERLVARI(Icollation_ix,	U32,	0)	/* Collation generation index */
PERLVARI(Icollation_standard, bool,	TRUE)
					/* Assume simple collation */
a368 10

#if defined (PERL_UTF8_CACHE_ASSERT) || defined (DEBUGGING)
#  define PERL___I -1
#else
#  define PERL___I 1
#endif
PERLVARI(Iutf8cache, I8, PERL___I)	/* Is the utf8 caching code enabled? */
#undef PERL___I


d371 1
d376 3
a378 1
PERLVAR(Inumeric_name,	char *)		/* Name of current numeric locale */
d401 2
a404 2
PERLVARA(Ilast_swash_key,10,	U8)
PERLVAR(Ilast_swash_klen,	U8)	/* Only needs to store 0-10  */
d406 7
a412 3
#ifdef FCRYPT
PERLVARI(Icryptseen,	bool,	FALSE)	/* has fast crypt() been initialized? */
#endif
d415 3
d419 15
d435 1
a435 1
PERLVAR(Iparser,	yy_parser *)	/* current parser state */
d437 1
a437 1
PERLVAR(Ibitcount,	char *)
d454 1
d456 2
a457 1
PERLVARI(Ibeginav_save, AV*, NULL)	/* save BEGIN{}s when compiling */
d459 19
a477 1
PERLVAR(Ibody_arenas, void*) /* pointer to list of body-arenas */
d479 4
d500 2
d511 1
a511 1
PERLVARI(Iencoding,	SV*, NULL)		/* character encoding */
d515 10
d530 1
a530 2
PERLVARI(Icheckav_save, AV*, NULL)	/* save CHECK{}s when compiling */
PERLVARI(Iunitcheckav_save, AV*, NULL)	/* save UNITCHECK{}s when compiling */
d540 2
a543 2
PERLVAR(Istashcache,	HV *)		/* Cache to speed up S_method_common */

d546 2
a547 9
PERLVARI(Ilockhook,	share_proc_t,	MEMBER_TO_FPTR(Perl_sv_nosharing))
#ifdef NO_MATHOMS
#  define PERL_UNLOCK_HOOK Perl_sv_nosharing
#else
/* This reference ensures that the mathoms are linked with perl */
#  define PERL_UNLOCK_HOOK Perl_sv_nounlocking
#endif
PERLVARI(Iunlockhook,	share_proc_t,	MEMBER_TO_FPTR(PERL_UNLOCK_HOOK))

d550 3
a552 29
PERLVARI(Ihash_seed, UV, 0)		/* Hash initializer */

PERLVARI(Irehash_seed, UV, 0)		/* 582 hash initializer */

PERLVARI(Iisarev, HV*, NULL) /* Reverse map of @@ISA dependencies */

/* The last unconditional member of the interpreter structure when 5.10.0 was
   released. The offset of the end of this is baked into a global variable in 
   any shared perl library which will allow a sanity test in future perl
   releases.  */
#define PERL_LAST_5_10_0_INTERP_MEMBER	Iisarev

#ifdef PERL_IMPLICIT_CONTEXT
PERLVARI(Imy_cxt_size, int, 0)		/* size of PL_my_cxt_list */
PERLVARI(Imy_cxt_list, void **, NULL) /* per-module array of MY_CXT pointers */
#  ifdef PERL_GLOBAL_STRUCT_PRIVATE
PERLVARI(Imy_cxt_keys, const char **, NULL) /* per-module array of pointers to MY_CXT_KEY constants */
#  endif
#endif

#ifdef PERL_TRACK_MEMPOOL
/* For use with the memory debugging code in util.c  */
PERLVAR(Imemory_debug_header, struct perl_memory_debug_header)
#endif

#ifdef DEBUG_LEAKING_SCALARS_FORK_DUMP
/* File descriptor to talk to the child which dumps scalars.  */
PERLVARI(Idumper_fd, int, -1)
#endif
d559 3
a561 5
#ifdef PERL_MAD
PERLVARI(Imadskills,	bool, FALSE)	/* preserve all syntactic info */
					/* (MAD = Misc Attribute Decoration) */
PERLVARI(Ixmlfp, PerlIO *,NULL)
#endif
d563 1
a563 5
#ifdef PL_OP_SLAB_ALLOC
PERLVAR(IOpPtr,I32 **)
PERLVARI(IOpSpace,I32,0)
PERLVAR(IOpSlab,I32 *)
#endif
d565 1
a565 4
#ifdef PERL_DEBUG_READONLY_OPS
PERLVARI(Islabs, I32**, NULL)	/* Array of slabs that have been allocated */
PERLVARI(Islab_count, U32, 0)	/* Size of the array */
#endif
d567 5
a571 2
/* Can shared object be destroyed */
PERLVARI(Idestroyhook, destroyable_proc_t, MEMBER_TO_FPTR(Perl_sv_destroyable))
d573 4
a576 2
/* If you are adding a U8 or U16, check to see if there are 'Space' comments
 * above on where there are gaps which currently will be structure padding.  */
d578 2
a579 3
/* Within a stable branch, new variables must be added to the very end, before
 * this comment, for binary compatibility (the offsets of the old members must
 *  not change).
d584 5
@


1.1.1.9
log
@import perl 5.10.1
@
text
@d4 2
a5 1
 *    2006, 2007, 2008 by Larry Wall and others
d351 1
a351 1
PERLVAR(IArgv,		const char **)	/* stuff to free from do_aexec, vfork safe */
a528 2
/* Space for a U8 */

a535 2
/* Array of signal handlers, indexed by signal number, through which the C
   signal handler dispatches.  */
d537 1
a537 3
/* Array of names of signals, indexed by signal number, for (re)use as the first
   argument to a signal handler.   */
PERLVAR(Ipsig_name, SV**)		
d564 3
a566 6
PERLVAR(Iregex_pad,     SV**)		/* Shortcut into the array of
					   regex_padav */
PERLVAR(Iregex_padav,   AV*)		/* All regex objects, indexed via the
					   values in op_pmoffset of pmop.
					   Entry 0 is an array of IVs listing
					   the now-free slots in the array */
a672 13

/* Perl_Ibreakable_sub_generation_ptr was too long for VMS, hence "gen"  */
PERLVARI(Ibreakable_sub_gen, U32, 0)

#ifdef DEBUG_LEAKING_SCALARS
PERLVARI(Isv_serial, U32, 0) /* SV serial number, used in sv.c */
#endif

/* Register of known Method Resolution Orders.
   What this actually points to is an implementation detail (it may change to
   a structure incorporating a reference count - use mro_get_from_name to
   retrieve a C<struct mro_alg *>  */
PERLVAR(Iregistered_mros, HV *)
@


1.1.1.10
log
@Perl 5.12.2 from CPAN
@
text
@a45 3
/* name of the scopes we've ENTERed. Only used with -DDEBUGGING, but needs to be
   present always, as -DDEUBGGING must be binary compatible with non.  */
PERLVARI(Iscopestack_name, const char * *, NULL)
d105 1
a105 1
=for apidoc mn|GV*|PL_ofsgv
d107 1
a107 1
The glob containing the output field separator - C<*,> in Perl space.
d114 1
a114 1
PERLVAR(Iofsgv,		GV *)		/* GV of output field separator *, */
d126 1
a126 1
PERLVAR(Icurcop,	COP *)
a172 14
/*
=for apidoc Amn|Perl_ophook_t|PL_opfreehook

When non-C<NULL>, the function pointed by this variable will be called each time an OP is freed with the corresponding OP as the argument.
This allows extensions to free any extra attribute they have locally attached to an OP.
It is also assured to first fire for the parent OP and then for its kids.

When you replace this variable, it is considered a good practice to store the possibly previously installed hook and that you recall it inside your own.

=cut
*/

PERLVARI(Iopfreehook,	Perl_ophook_t, 0) /* op_free() hook */

d191 1
a191 1
PERLVAR(Iin_eval,	U8)		/* trap "fatal" errors? */
d217 1
d224 1
a243 1
/* Space for a U8 */
d463 1
a468 3
/* Perl_Ibreakable_sub_generation_ptr was too long for VMS, hence "gen"  */
PERLVARI(Ibreakable_sub_gen, U32, 0)

d501 1
a504 3
PERLVAR(Iutf8_perl_space,	SV *)
PERLVAR(Iutf8_perl_word,	SV *)
PERLVAR(Iutf8_posix_digit,	SV *)
a513 10
PERLVAR(Iutf8_X_begin,	SV *)
PERLVAR(Iutf8_X_extend,	SV *)
PERLVAR(Iutf8_X_prepend,	SV *)
PERLVAR(Iutf8_X_non_hangul,	SV *)
PERLVAR(Iutf8_X_L,	SV *)
PERLVAR(Iutf8_X_LV,	SV *)
PERLVAR(Iutf8_X_LVT,	SV *)
PERLVAR(Iutf8_X_T,	SV *)
PERLVAR(Iutf8_X_V,	SV *)
PERLVAR(Iutf8_X_LV_LVT_V,	SV *)
d528 1
a528 1
PERLVAR(Ipad_reset_pending,	bool)	/* reset pad on next attempted alloc */
d535 2
d541 1
a541 2
   argument to a signal handler.   Only one block of memory is allocated for
   both psig_name and psig_ptr.  */
d573 1
a573 2
					   Entry 0 is an SV whose PV is a
					   "packed" list of IVs listing
d681 3
@


1.1.1.11
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d18 1
a18 1
 * Don't forget to re-run regen/embed.pl to propagate changes! */
d20 3
a22 1
/* New variables must be added to the very end for binary compatibility. */
d24 1
a24 1
/* Don't forget to add your variable also to perl_clone()! (in sv.c) */
d28 1
a28 2
 * to generate the appropriate export list for win32.  If the variable
 * needs to be initialized, use PERLVARI.
d34 1
a34 1
PERLVAR(I, stack_sp,	SV **)		/* top of the stack */
d36 1
a36 1
PERLVAR(I, opsave,	OP *)
d38 1
a38 1
PERLVAR(I, op,		OP *)		/* currently executing op */
d40 1
a40 1
PERLVAR(I, curpad,	SV **)		/* active pad (lexicals+tmps) */
d42 2
a43 2
PERLVAR(I, stack_base,	SV **)
PERLVAR(I, stack_max,	SV **)
d45 1
a45 1
PERLVAR(I, scopestack,	I32 *)		/* scopes we've ENTERed */
d48 3
a50 3
PERLVARI(I, scopestack_name, const char * *, NULL)
PERLVAR(I, scopestack_ix, I32)
PERLVAR(I, scopestack_max, I32)
d52 1
a52 1
PERLVAR(I, savestack,	ANY *)		/* items that need to be restored when
d54 2
a55 2
PERLVAR(I, savestack_ix, I32)
PERLVAR(I, savestack_max, I32)
d57 5
a61 5
PERLVAR(I, tmps_stack,	SV **)		/* mortals we've made */
PERLVARI(I, tmps_ix,	I32,	-1)
PERLVARI(I, tmps_floor,	I32,	-1)
PERLVAR(I, tmps_max,	I32)
PERLVAR(I, modcount,	I32)		/* how much op_lvalue()ification in
d64 1
a64 1
PERLVAR(I, markstack,	I32 *)		/* stack_sp locations we're
d66 2
a67 2
PERLVAR(I, markstack_ptr, I32 *)
PERLVAR(I, markstack_max, I32 *)
d69 2
a70 2
PERLVAR(I, Sv,		SV *)		/* used to hold temporary values */
PERLVAR(I, Xpv,		XPV *)		/* used to hold temporary values */
d83 1
a83 1
PERLVAR(I, na,		STRLEN)		/* for use in SvPV when length is
d87 4
a90 4
PERLVAR(I, statbuf,	Stat_t)
PERLVAR(I, statcache,	Stat_t)		/* _ */
PERLVAR(I, statgv,	GV *)
PERLVARI(I, statname,	SV *,	NULL)
d93 1
a93 1
PERLVAR(I, timesbuf,	struct tms)
d97 1
a97 1
PERLVAR(I, curpm,	PMOP *)		/* what to do \ interps in REs from */
d115 8
a122 8
PERLVAR(I, rs,		SV *)		/* input record separator $/ */
PERLVAR(I, last_in_gv,	GV *)		/* GV used in last <FH> */
PERLVAR(I, ofsgv,	GV *)		/* GV of output field separator *, */
PERLVAR(I, defoutgv,	GV *)		/* default FH for output */
PERLVARI(I, chopset,	const char *, " \n-")	/* $: */
PERLVAR(I, formtarget,	SV *)
PERLVAR(I, bodytarget,	SV *)
PERLVAR(I, toptarget,	SV *)
d125 2
a126 2
PERLVAR(I, defstash,	HV *)		/* main symbol table */
PERLVAR(I, curstash,	HV *)		/* symbol table for current package */
d128 5
a132 6
PERLVAR(I, restartop,	OP *)		/* propagating an error from croak? */
PERLVAR(I, restartjmpenv, JMPENV *)	/* target frame for longjmp in die */
PERLVAR(I, curcop,	COP *)
PERLVAR(I, curstack,	AV *)		/* THE STACK */
PERLVAR(I, curstackinfo, PERL_SI *)	/* current stack + context */
PERLVAR(I, mainstack,	AV *)		/* the stack when nothing funny is
d135 3
a137 3
PERLVAR(I, top_env,	JMPENV *)	/* ptr to current sigjmp environment */
PERLVAR(I, start_env,	JMPENV)		/* empty startup sigjmp environment */
PERLVARI(I, errors,	SV *,	NULL)	/* outstanding queued errors */
d140 1
a140 1
PERLVAR(I, hv_fetch_ent_mh, HE*)	/* owned by hv_fetch_ent() */
d142 1
a142 1
PERLVAR(I, lastgotoprobe, OP*)		/* from pp_ctl.c */
d145 4
a148 4
PERLVAR(I, sortcop,	OP *)		/* user defined sort routine */
PERLVAR(I, sortstash,	HV *)		/* which is in some package or other */
PERLVAR(I, firstgv,	GV *)		/* $a */
PERLVAR(I, secondgv,	GV *)		/* $b */
d151 2
a152 2
PERLVAR(I, efloatbuf,	char *)
PERLVAR(I, efloatsize,	STRLEN)
d156 3
a158 1
PERLVAR(I, reg_state,	struct re_save_state)
d160 1
a160 1
PERLVAR(I, regdummy,	regnode)	/* from regcomp.c */
d162 3
a164 1
PERLVARI(I, dumpindent,	U16,	4)	/* number of blanks per dump
d168 2
a169 22
PERLVAR(I, utf8locale,	bool)		/* utf8 locale detected */
PERLVARI(I, rehash_seed_set, bool, FALSE)	/* 582 hash initialized? */

PERLVARA(I, colors,6,	char *)		/* from regcomp.c */

/*
=for apidoc Amn|peep_t|PL_peepp

Pointer to the per-subroutine peephole optimiser.  This is a function
that gets called at the end of compilation of a Perl subroutine (or
equivalently independent piece of Perl code) to perform fixups of
some ops and to perform small-scale optimisations.  The function is
called once for each subroutine that is compiled, and is passed, as sole
parameter, a pointer to the op that is the entry point to the subroutine.
It modifies the op tree in place.

The peephole optimiser should never be completely replaced.  Rather,
add code to it by wrapping the existing optimiser.  The basic way to do
this can be seen in L<perlguts/Compile pass 3: peephole optimization>.
If the new code wishes to operate on ops throughout the subroutine's
structure, rather than just at the top level, it is likely to be more
convenient to wrap the L</PL_rpeepp> hook.
d171 1
a171 2
=cut
*/
d173 2
a174 25
PERLVARI(I, peepp,	peep_t, Perl_peep)

/*
=for apidoc Amn|peep_t|PL_rpeepp

Pointer to the recursive peephole optimiser.  This is a function
that gets called at the end of compilation of a Perl subroutine (or
equivalently independent piece of Perl code) to perform fixups of some
ops and to perform small-scale optimisations.  The function is called
once for each chain of ops linked through their C<op_next> fields;
it is recursively called to handle each side chain.  It is passed, as
sole parameter, a pointer to the op that is at the head of the chain.
It modifies the op tree in place.

The peephole optimiser should never be completely replaced.  Rather,
add code to it by wrapping the existing optimiser.  The basic way to do
this can be seen in L<perlguts/Compile pass 3: peephole optimization>.
If the new code wishes to operate only on ops at a subroutine's top level,
rather than throughout the structure, it is likely to be more convenient
to wrap the L</PL_peepp> hook.

=cut
*/

PERLVARI(I, rpeepp,	peep_t, Perl_rpeep)
d188 1
a188 1
PERLVARI(I, opfreehook,	Perl_ophook_t, 0) /* op_free() hook */
d190 4
a193 2
PERLVARI(I, watchaddr,	char **, 0)
PERLVAR(I, watchok,	char *)
d198 2
a199 2
PERLVARI(I, regmatch_slab, regmatch_slab *,	NULL)
PERLVAR(I, regmatch_state, regmatch_state *)
d203 7
a209 6
PERLVAR(I, delaymagic,	U16)		/* ($<,$>) = ... */
PERLVAR(I, localizing,	U8)		/* are we processing a local() list? */
PERLVAR(I, colorset,	bool)		/* from regcomp.c */
PERLVAR(I, in_eval,	U8)		/* trap "fatal" errors? */
PERLVAR(I, tainted,	bool)		/* using variables controlled by $< */
PERLVAR(I, tainting,	bool)		/* doing taint checks */
d214 1
a214 4
PERLVARI(I, perl_destruct_level, signed char,	0)

/* current phase the interpreter is in */
PERLVARI(I, phase,	enum perl_phase, PERL_PHASE_CONSTRUCT)
d216 1
a216 3
PERLVAR(I, perldb,	U32)

PERLVAR(I, signals,	U32)	/* Using which pre-5.8 signals */
d219 8
a226 8
PERLVAR(I, origargc,	int)
PERLVAR(I, origargv,	char **)
PERLVAR(I, envgv,	GV *)
PERLVAR(I, incgv,	GV *)
PERLVAR(I, hintgv,	GV *)
PERLVAR(I, origfilename, char *)
PERLVAR(I, diehook,	SV *)
PERLVAR(I, warnhook,	SV *)
d229 12
a240 13
PERLVAR(I, patchlevel,	SV *)
PERLVAR(I, apiversion,	SV *)
PERLVAR(I, localpatches, const char * const *)
PERLVARI(I, splitstr,	const char *, " ")

PERLVAR(I, minus_c,	bool)
PERLVAR(I, minus_n,	bool)
PERLVAR(I, minus_p,	bool)
PERLVAR(I, minus_l,	bool)
PERLVAR(I, minus_a,	bool)
PERLVAR(I, minus_F,	bool)
PERLVAR(I, doswitches,	bool)
PERLVAR(I, minus_E,	bool)
d251 11
a261 9
PERLVAR(I, dowarn,	U8)
PERLVAR(I, sawampersand, bool)		/* must save all match strings */
PERLVAR(I, unsafe,	bool)
PERLVAR(I, exit_flags,	U8)		/* was exit() unexpected, etc. */

PERLVARI(I, reginterp_cnt, I32,	 0)	/* Whether "Regexp" was interpolated. */

PERLVAR(I, inplace,	char *)
PERLVAR(I, e_script,	SV *)
d264 2
a265 2
PERLVAR(I, basetime,	Time_t)		/* $^T */
PERLVAR(I, formfeed,	SV *)		/* $^L */
d268 1
a268 1
PERLVARI(I, maxsysfd,	I32,	MAXSYSFD)
d270 1
a270 1
PERLVAR(I, statusvalue,	I32)		/* $? */
d272 1
a272 1
PERLVAR(I, statusvalue_vms, U32)
d274 1
a274 1
PERLVAR(I, statusvalue_posix, I32)
d277 2
a278 2
PERLVARI(I, sig_pending, int, 0)	/* Number if highest signal pending */
PERLVAR(I, psig_pend, int *)		/* per-signal "count" of pending */
d281 6
a286 6
PERLVAR(I, stdingv,	GV *)		/*  *STDIN      */
PERLVAR(I, stderrgv,	GV *)		/*  *STDERR     */
PERLVAR(I, defgv,	GV *)
PERLVAR(I, argvgv,	GV *)		/*  *ARGV       */
PERLVAR(I, argvoutgv,	GV *)		/*  *ARGVOUT    */
PERLVAR(I, argvout_stack, AV *)
d289 1
a289 1
PERLVAR(I, replgv,	GV *)		/*  *^R         */
d292 1
a292 1
PERLVAR(I, errgv,	GV *)		/*  *@@          */
d295 2
a296 2
PERLVAR(I, DBgv,	GV *)		/*  *DB::DB     */
PERLVAR(I, DBline,	GV *)		/*  *DB::line   */
d320 5
a324 5
PERLVAR(I, DBsub,	GV *)		/*  *DB::sub    */
PERLVAR(I, DBsingle,	SV *)		/*  $DB::single */
PERLVAR(I, DBtrace,	SV *)		/*  $DB::trace  */
PERLVAR(I, DBsignal,	SV *)		/*  $DB::signal */
PERLVAR(I, dbargs,	AV *)		/* args to call listed by caller function */
d327 10
a336 10
PERLVAR(I, debstash,	HV *)		/* symbol table for perldb package */
PERLVAR(I, globalstash,	HV *)		/* global keyword overrides imported here */
PERLVAR(I, curstname,	SV *)		/* name of current package */
PERLVAR(I, beginav,	AV *)		/* names of BEGIN subroutines */
PERLVAR(I, endav,	AV *)		/* names of END subroutines */
PERLVAR(I, unitcheckav,	AV *)		/* names of UNITCHECK subroutines */
PERLVAR(I, checkav,	AV *)		/* names of CHECK subroutines */
PERLVAR(I, initav,	AV *)		/* names of INIT subroutines */
PERLVAR(I, strtab,	HV *)		/* shared string table */
PERLVARI(I, sub_generation, U32, 1)	/* incr to invalidate method cache */
d339 1
a339 1
PERLVAR(I, forkprocess,	int)		/* so do_open |- can return proc# */
d342 4
a345 4
PERLVAR(I, sv_count,	I32)		/* how many SV* are currently allocated */
PERLVAR(I, sv_objcount,	I32)		/* how many objects are currently allocated */
PERLVAR(I, sv_root,	SV *)		/* storage for SVs belonging to interp */
PERLVAR(I, sv_arenaroot, SV *)		/* list of areas for garbage collection */
d348 1
a348 1
PERLVAR(I, fdpid,	AV *)		/* keep fd-to-pid mappings for my_popen */
d351 1
a351 1
PERLVARI(I, op_mask,	char *,	NULL)	/* masked operations for safe evals */
d354 5
a358 5
PERLVAR(I, main_cv,	CV *)
PERLVAR(I, main_root,	OP *)
PERLVAR(I, main_start,	OP *)
PERLVAR(I, eval_root,	OP *)
PERLVAR(I, eval_start,	OP *)
d361 1
a361 1
PERLVARI(I, curcopdb,	COP *,	NULL)
d363 5
a367 5
PERLVAR(I, filemode,	int)		/* so nextargv() can preserve mode */
PERLVAR(I, lastfd,	int)		/* what to preserve mode on */
PERLVAR(I, oldname,	char *)		/* what to preserve mode on */
PERLVAR(I, Argv,	const char **)	/* stuff to free from do_aexec, vfork safe */
PERLVAR(I, Cmd,		char *)		/* stuff to free from do_aexec, vfork safe */
d372 3
a374 3
PERLVAR(I, preambleav,	AV *)
PERLVAR(I, mess_sv,	SV *)
PERLVAR(I, ors_sv,	SV *)		/* output record separator $\ */
d376 5
a380 5
PERLVARI(I, gensym,	I32,	0)	/* next symbol for getsym() to define */
PERLVARI(I, cv_has_eval, bool, FALSE)	/* PL_compcv includes an entereval or similar */
PERLVAR(I, taint_warn,	bool)		/* taint warns instead of dying */
PERLVARI(I, laststype,	U16,	OP_STAT)
PERLVARI(I, laststatval, int,	-1)
d383 2
a384 2
PERLVARI(I, exitlistlen, I32, 0)	/* length of same */
PERLVARI(I, exitlist,	PerlExitListEntry *, NULL)
d399 1
a399 1
PERLVAR(I, modglobal,	HV *)		/* per-interp module data */
d402 1
a402 1
PERLVARI(I, profiledata, U32 *,	NULL)	/* table of ops, counts */
d404 1
a404 1
PERLVAR(I, compiling,	COP)		/* compiling/done executing marker */
d406 5
a410 5
PERLVAR(I, compcv,	CV *)		/* currently compiling subroutine */
PERLVAR(I, comppad,	AV *)		/* storage for lexically scoped temporaries */
PERLVAR(I, comppad_name, AV *)		/* variable names for "my" variables */
PERLVAR(I, comppad_name_fill,	I32)	/* last "introduced" variable offset */
PERLVAR(I, comppad_name_floor,	I32)	/* start of vars in innermost block */
d413 1
a413 1
PERLVAR(I, sys_intern,	struct interp_intern)
d418 2
a419 2
PERLVAR(I, DBcv,	CV *)		/* from perl.c */
PERLVARI(I, generation,	int,	100)	/* from op.c */
d421 14
a434 23
PERLVARI(I, in_clean_objs,bool,    FALSE)	/* from sv.c */
PERLVARI(I, in_clean_all, bool,    FALSE)	/* ptrs to freed SVs now legal */
PERLVAR(I, nomemok,	bool)		/* let malloc context handle nomem */
PERLVARI(I, savebegin,	bool,	FALSE)	/* save BEGINs for compiler	*/

PERLVAR(I, delaymagic_uid,	Uid_t)	/* current real user id, only for delaymagic */
PERLVAR(I, delaymagic_euid,	Uid_t)	/* current effective user id, only for delaymagic */
PERLVAR(I, delaymagic_gid,	Gid_t)	/* current real group id, only for delaymagic */
PERLVAR(I, delaymagic_egid,	Gid_t)	/* current effective group id, only for delaymagic */
PERLVARI(I, an,		U32,	0)	/* malloc sequence number */

#ifdef DEBUGGING
    /* exercise wrap-around */
    #define PERL_COP_SEQMAX (U32_MAX-50)
#else
    #define PERL_COP_SEQMAX 0
#endif
PERLVARI(I, cop_seqmax,	U32,	PERL_COP_SEQMAX) /* statement sequence number */
#undef PERL_COP_SEQMAX

PERLVARI(I, evalseq,	U32,	0)	/* eval sequence number */
PERLVAR(I, origalen,	U32)
PERLVAR(I, origenviron,	char **)
d436 1
a436 1
PERLVAR(I, pidstatus,	HV *)		/* pid-to-status mappings for waitpid */
d438 1
a438 1
PERLVAR(I, osname,	char *)		/* operating system */
d440 1
a440 1
PERLVAR(I, sighandlerp,	Sighandler_t)
d442 1
a442 1
PERLVARA(I, body_roots,	PERL_ARENA_ROOTS_SIZE, void*) /* array of body roots */
d444 2
a445 1
PERLVAR(I, unicode, U32)	/* Unicode features: $ENV{PERL_UNICODE} or -C */
d447 1
a447 1
PERLVARI(I, maxo,	int,	MAXO)	/* maximum number of ops */
d449 1
a449 1
PERLVARI(I, runops,	runops_proc_t, RUNOPS_DEFAULT)
d466 3
a468 3
PERLVAR(I, sv_undef,	SV)
PERLVAR(I, sv_no,	SV)
PERLVAR(I, sv_yes,	SV)
d470 1
a470 1
PERLVAR(I, subname,	SV *)		/* name of current subroutine */
d472 2
a473 2
PERLVAR(I, subline,	I32)		/* line this subroutine began on */
PERLVAR(I, min_intro_pending, I32)	/* start of vars to introduce */
d475 2
a476 2
PERLVAR(I, max_intro_pending, I32)	/* end of vars to introduce */
PERLVAR(I, padix,	I32)		/* max used index in current "register" pad */
d478 1
a478 1
PERLVAR(I, padix_floor,	I32)		/* how low may inner block reset padix */
d480 1
a480 1
PERLVAR(I, hints,	U32)		/* pragma-tic compile-time flags */
d482 1
a482 1
PERLVAR(I, debug,	VOL U32)	/* flags given to -D switch */
d485 1
a485 1
PERLVARI(I, breakable_sub_gen, U32, 0)
d487 1
a487 1
PERLVARI(I, amagic_generation, long, 0)
d490 5
a494 5
PERLVAR(I, collation_name, char *)	/* Name of current collation */
PERLVAR(I, collxfrm_base, Size_t)	/* Basic overhead in *xfrm() */
PERLVARI(I, collxfrm_mult,Size_t, 2)	/* Expansion factor in *xfrm() */
PERLVARI(I, collation_ix, U32,	0)	/* Collation generation index */
PERLVARI(I, collation_standard, bool, TRUE)
d504 1
a504 1
PERLVARI(I, utf8cache, I8, PERL___I)	/* Is the utf8 caching code enabled? */
d510 1
a510 1
PERLVARI(I, numeric_standard, bool, TRUE)
d512 1
a512 1
PERLVARI(I, numeric_local, bool, TRUE)
d514 1
a514 3
PERLVAR(I, numeric_name, char *)	/* Name of current numeric locale */
PERLVAR(I, numeric_radix_sv, SV *)	/* The radix separator if not '.' */

d517 36
a552 82
/* Unicode inversion lists */
PERLVAR(I, ASCII,	SV *)
PERLVAR(I, Latin1,	SV *)
PERLVAR(I, AboveLatin1,	SV *)

PERLVAR(I, PerlSpace,	SV *)
PERLVAR(I, XPerlSpace,	SV *)

PERLVAR(I, L1PosixAlnum,SV *)
PERLVAR(I, PosixAlnum,	SV *)

PERLVAR(I, L1PosixAlpha,SV *)
PERLVAR(I, PosixAlpha,	SV *)

PERLVAR(I, PosixBlank,	SV *)
PERLVAR(I, XPosixBlank,	SV *)

PERLVAR(I, L1Cased,	SV *)

PERLVAR(I, PosixCntrl,	SV *)
PERLVAR(I, XPosixCntrl,	SV *)

PERLVAR(I, PosixDigit,	SV *)

PERLVAR(I, L1PosixGraph,SV *)
PERLVAR(I, PosixGraph,	SV *)

PERLVAR(I, L1PosixLower,SV *)
PERLVAR(I, PosixLower,	SV *)

PERLVAR(I, L1PosixPrint,SV *)
PERLVAR(I, PosixPrint,	SV *)

PERLVAR(I, L1PosixPunct,SV *)
PERLVAR(I, PosixPunct,	SV *)

PERLVAR(I, PosixSpace,	SV *)
PERLVAR(I, XPosixSpace,	SV *)

PERLVAR(I, L1PosixUpper,SV *)
PERLVAR(I, PosixUpper,	SV *)

PERLVAR(I, L1PosixWord,	SV *)
PERLVAR(I, PosixWord,	SV *)

PERLVAR(I, PosixXDigit,	SV *)
PERLVAR(I, XPosixXDigit, SV *)

PERLVAR(I, VertSpace,   SV *)

/* utf8 character class swashes */
PERLVAR(I, utf8_alnum,	SV *)
PERLVAR(I, utf8_alpha,	SV *)
PERLVAR(I, utf8_space,	SV *)
PERLVAR(I, utf8_graph,	SV *)
PERLVAR(I, utf8_digit,	SV *)
PERLVAR(I, utf8_upper,	SV *)
PERLVAR(I, utf8_lower,	SV *)
PERLVAR(I, utf8_print,	SV *)
PERLVAR(I, utf8_punct,	SV *)
PERLVAR(I, utf8_xdigit,	SV *)
PERLVAR(I, utf8_mark,	SV *)
PERLVAR(I, utf8_X_begin, SV *)
PERLVAR(I, utf8_X_extend, SV *)
PERLVAR(I, utf8_X_prepend, SV *)
PERLVAR(I, utf8_X_non_hangul, SV *)
PERLVAR(I, utf8_X_L,	SV *)
PERLVAR(I, utf8_X_LV,	SV *)
PERLVAR(I, utf8_X_LVT,	SV *)
PERLVAR(I, utf8_X_T,	SV *)
PERLVAR(I, utf8_X_V,	SV *)
PERLVAR(I, utf8_X_LV_LVT_V, SV *)
PERLVAR(I, utf8_toupper, SV *)
PERLVAR(I, utf8_totitle, SV *)
PERLVAR(I, utf8_tolower, SV *)
PERLVAR(I, utf8_tofold,	SV *)
PERLVAR(I, utf8_quotemeta, SV *)
PERLVAR(I, last_swash_hv, HV *)
PERLVAR(I, last_swash_tmps, U8 *)
PERLVAR(I, last_swash_slen, STRLEN)
PERLVARA(I, last_swash_key,12, U8)
PERLVAR(I, last_swash_klen, U8)		/* Only needs to store 0-12  */
d555 1
a555 1
PERLVARI(I, cryptseen,	bool,	FALSE)	/* has fast crypt() been initialized? */
d558 1
a558 3
PERLVAR(I, pad_reset_pending, bool)	/* reset pad on next attempted alloc */
PERLVAR(I, srand_called, bool)
PERLVARI(I, in_load_module, bool, FALSE)	/* to prevent recursions in PerlIO_find_layer */
d560 4
a563 1
PERLVAR(I, parser,	yy_parser *)	/* current parser state */
d567 1
a567 1
PERLVAR(I, psig_ptr,	SV **)
d571 1
a571 1
PERLVAR(I, psig_name,	SV **)
d574 9
a582 9
PERLVAR(I, Mem,		struct IPerlMem *)
PERLVAR(I, MemShared,	struct IPerlMem *)
PERLVAR(I, MemParse,	struct IPerlMem *)
PERLVAR(I, Env,		struct IPerlEnv *)
PERLVAR(I, StdIO,	struct IPerlStdIO *)
PERLVAR(I, LIO,		struct IPerlLIO *)
PERLVAR(I, Dir,		struct IPerlDir *)
PERLVAR(I, Sock,	struct IPerlSock *)
PERLVAR(I, Proc,	struct IPerlProc *)
d585 2
a586 2
PERLVAR(I, ptr_table,	PTR_TBL_t *)
PERLVARI(I, beginav_save, AV *, NULL)	/* save BEGIN{}s when compiling */
d588 1
a588 1
PERLVAR(I, body_arenas, void *)		/* pointer to list of body-arenas */
d591 6
d598 1
a598 1
PERLVAR(I, regex_pad,     SV **)	/* Shortcut into the array of
d600 1
a600 1
PERLVAR(I, regex_padav,   AV *)		/* All regex objects, indexed via the
d608 1
a608 1
PERLVAR(I, reentrant_buffer, REENTR *)	/* here we store the _r buffers */
d611 2
a612 2
PERLVAR(I, custom_op_names, HV *)	/* Names of user defined ops */
PERLVAR(I, custom_op_descs, HV *)	/* Descriptions of user defined ops */
d615 3
a617 3
PERLVARI(I, perlio,	PerlIOl *, NULL)
PERLVARI(I, known_layers, PerlIO_list_t *, NULL)
PERLVARI(I, def_layerlist, PerlIO_list_t *, NULL)
d620 1
a620 1
PERLVARI(I, encoding,	SV *,	NULL)	/* character encoding */
d622 1
a622 1
PERLVAR(I, debug_pad,	struct perl_debug_pad)	/* always needed because of the re extension */
d624 2
a625 5
PERLVAR(I, utf8_idstart, SV *)
PERLVAR(I, utf8_idcont,	SV *)
PERLVAR(I, utf8_xidstart, SV *)
PERLVAR(I, utf8_perl_idstart, SV *)
PERLVAR(I, utf8_xidcont, SV *)
d627 1
a627 1
PERLVAR(I, sort_RealCmp, SVCOMPARE_t)
d629 2
a630 3
PERLVARI(I, checkav_save, AV *, NULL)	/* save CHECK{}s when compiling */
PERLVARI(I, unitcheckav_save, AV *, NULL)
					/* save UNITCHECK{}s when compiling */
d632 1
a632 1
PERLVARI(I, clocktick,	long,	0)	/* this many times() ticks in a second */
d634 9
a642 1
PERLVAR(I, stashcache,	HV *)		/* Cache to speed up S_method_common */
d645 2
a646 2
PERLVARI(I, sharehook,	share_proc_t, Perl_sv_nosharing)
PERLVARI(I, lockhook,	share_proc_t, Perl_sv_nosharing)
d653 1
a653 25
PERLVARI(I, unlockhook,	share_proc_t, PERL_UNLOCK_HOOK)

PERLVARI(I, threadhook,	thrhook_proc_t,	Perl_nothreadhook)

/* Can shared object be destroyed */
PERLVARI(I, destroyhook, destroyable_proc_t, Perl_sv_destroyable)

#ifndef PERL_MICRO
PERLVARI(I, signalhook,	despatch_signals_proc_t, Perl_despatch_signals)
#endif

PERLVARI(I, hash_seed,	UV,	0)	/* Hash initializer */

PERLVARI(I, rehash_seed, UV,	0)	/* 582 hash initializer */

PERLVARI(I, isarev, HV *, NULL)		/* Reverse map of @@ISA dependencies */

/* Register of known Method Resolution Orders.
   What this actually points to is an implementation detail (it may change to
   a structure incorporating a reference count - use mro_get_from_name to
   retrieve a C<struct mro_alg *>  */
PERLVAR(I, registered_mros, HV *)

/* Compile-time block start/end hooks */
PERLVAR(I, blockhooks,	AV *)
d655 1
a655 3
/* Everything that folds to a given character, for case insensitivity regex
 * matching */
PERLVARI(I, utf8_foldclosures, HV *, NULL)
d657 1
a657 3
/* List of characters that participate in folds (except marks, etc in
 * multi-char folds) */
PERLVARI(I, utf8_foldable, SV *, NULL)
d659 1
a659 1
PERLVAR(I, custom_ops,	HV *)		/* custom op registrations */
d661 1
a661 5
/* Hook for File::Glob */
PERLVARI(I, globhook,	globhook_t, NULL)

PERLVARI(I, glob_index,	int,	0)
PERLVAR(I, reentrant_retint, int)	/* Integer return value from reentrant functions */
d667 1
a667 1
#define PERL_LAST_5_16_0_INTERP_MEMBER	Ireentrant_retint
d670 2
a671 2
PERLVARI(I, my_cxt_list, void **, NULL) /* per-module array of MY_CXT pointers */
PERLVARI(I, my_cxt_size, int,	0)	/* size of PL_my_cxt_list */
d673 1
a673 1
PERLVARI(I, my_cxt_keys, const char **, NULL) /* per-module array of pointers to MY_CXT_KEY constants */
d679 1
a679 1
PERLVAR(I, memory_debug_header, struct perl_memory_debug_header)
d684 6
a689 1
PERLVARI(I, dumper_fd,	int,	-1)
d693 1
a693 1
PERLVARI(I, madskills,	bool,	FALSE)	/* preserve all syntactic info */
d695 1
a695 1
PERLVARI(I, xmlfp,	PerlIO *, NULL)
d699 3
a701 3
PERLVAR(I, OpPtr,	I32 **)
PERLVARI(I, OpSpace,	I32,	0)
PERLVAR(I, OpSlab,	I32 *)
d705 2
a706 2
PERLVARI(I, slabs,	I32**,	NULL)	/* Array of slabs that have been allocated */
PERLVARI(I, slab_count, U32,	0)	/* Size of the array */
d709 3
d713 1
a713 1
PERLVARI(I, sv_serial,	U32,	0)	/* SV serial number, used in sv.c */
d715 6
@


1.1.1.12
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@a10 2
#include "handy.h"

d44 7
a55 4
PERLVAR(I, scopestack,	I32 *)		/* scopes we've ENTERed */
PERLVAR(I, scopestack_ix, I32)
PERLVAR(I, scopestack_max, I32)

d60 2
a61 2

PERLVARI(I, sub_generation, U32, 1)	/* incr to invalidate method cache */
a67 83
#ifdef PERL_HASH_RANDOMIZE_KEYS
#ifdef USE_PERL_PERTURB_KEYS
PERLVARI(I, hash_rand_bits_enabled, U8, 1) /* used to randomize hash stuff 0 == no-random, 1 == random, 2 == determinsitic */
#endif
PERLVARI(I, hash_rand_bits, UV, 0)      /* used to randomize hash stuff */
#endif
PERLVAR(I, strtab,	HV *)		/* shared string table */

/* Fields used by magic variables such as $@@, $/ and so on */
PERLVAR(I, curpm,	PMOP *)		/* what to do \ interps in REs from */

PERLVAR(I, tainting,	bool)		/* doing taint checks */
PERLVAR(I, tainted,	bool)		/* using variables controlled by $< */
PERLVAR(I, delaymagic,	U16)		/* ($<,$>) = ... */
PERLVAR(I, localizing,	U8)		/* are we processing a local() list? */
PERLVAR(I, in_eval,	U8)		/* trap "fatal" errors? */
/*

=for apidoc mn|bool|PL_dowarn

The C variable which corresponds to Perl's $^W warning variable.

=cut
*/

PERLVAR(I, dowarn,	U8)

#if defined (PERL_UTF8_CACHE_ASSERT) || defined (DEBUGGING)
#  define PERL___I -1
#else
#  define PERL___I 1
#endif
PERLVARI(I, utf8cache, I8, PERL___I)	/* Is the utf8 caching code enabled? */
#undef PERL___I


/* Stashes */
PERLVAR(I, defstash,	HV *)		/* main symbol table */
PERLVAR(I, curstash,	HV *)		/* symbol table for current package */

PERLVAR(I, curcop,	COP *)
PERLVAR(I, curstack,	AV *)		/* THE STACK */
PERLVAR(I, curstackinfo, PERL_SI *)	/* current stack + context */
PERLVAR(I, mainstack,	AV *)		/* the stack when nothing funny is
					   happening */

/* memory management */
PERLVAR(I, sv_count,	IV)		/* how many SV* are currently allocated */
PERLVAR(I, sv_objcount,	IV)		/* DEPRECATED AND UNMAINTAINED.
                                         * Will be removed in Perl 5.20.
                                         * Used to be: how many objects are currently allocated. */

PERLVAR(I, sv_root,	SV *)		/* storage for SVs belonging to interp */
PERLVAR(I, sv_arenaroot, SV *)		/* list of areas for garbage collection */

PERLVAR(I, reg_state,	struct re_save_state)

/* the currently active slab in a chain of slabs of regmatch states,
 * and the currently active state within that slab */

PERLVARI(I, regmatch_slab, regmatch_slab *,	NULL)
PERLVAR(I, regmatch_state, regmatch_state *)

PERLVAR(I, comppad,	PAD *)		/* storage for lexically scoped temporaries */

/*
=for apidoc Amn|SV|PL_sv_undef
This is the C<undef> SV.  Always refer to this as C<&PL_sv_undef>.

=for apidoc Amn|SV|PL_sv_no
This is the C<false> SV.  See C<PL_sv_yes>.  Always refer to this as
C<&PL_sv_no>.

=for apidoc Amn|SV|PL_sv_yes
This is the C<true> SV.  See C<PL_sv_no>.  Always refer to this as
C<&PL_sv_yes>.

=cut
*/

PERLVAR(I, sv_undef,	SV)
PERLVAR(I, sv_no,	SV)
PERLVAR(I, sv_yes,	SV)
d69 1
a69 5

PERLVAR(I, parser,	yy_parser *)	/* current parser state */

PERLVAR(I, stashcache,	HV *)		/* Cache to speed up S_method_common */

d95 3
d123 3
d129 5
d154 4
a162 1
PERLVAR(I, exit_flags,	U8)		/* was exit() unexpected, etc. */
d165 1
d233 23
a259 2
PERLVAR(I, reentrant_retint, int)	/* Integer return value from reentrant functions */

d285 16
d304 1
d306 2
d376 11
a415 4

/* funky return mechanisms */
PERLVAR(I, forkprocess,	int)		/* so do_open |- can return proc# */

a420 1

a422 3
PERLVAR(I, modcount,	I32)		/* how much op_lvalue()ification in
					   assignment? */

d448 2
a449 1
PERLVAR(I, comppad_name, PADNAMELIST *)	/* variable names for "my" variables */
a461 2
PERLVAR(I, unicode, U32)	/* Unicode features: $ENV{PERL_UNICODE} or -C */

a466 1

a472 3
/* Perl_Ibreakable_sub_generation_ptr was too long for VMS, hence "gen"  */
PERLVARI(I, breakable_sub_gen, U32, 0)

d494 1
a494 1
PERLVAR(I, debug,	VOL U32)	/* flags given to -D switch */
d500 19
d531 7
d547 5
a551 2
#ifdef PERL_SAWAMPERSAND
PERLVAR(I, sawampersand, U8)		/* must save all match strings */
d553 2
a555 14
PERLVAR(I, unsafe,	bool)
PERLVAR(I, colorset,	bool)		/* from regcomp.c */

/* current phase the interpreter is in
   for ordering this structure to remove holes, we're assuming that this is 4
   bytes.  */
PERLVARI(I, phase,	enum perl_phase, PERL_PHASE_CONSTRUCT)

PERLVARI(I, in_load_module, bool, FALSE)	/* to prevent recursions in PerlIO_find_layer */

/* This value may be set when embedding for full cleanup  */
/* 0=none, 1=full, 2=full with checks */
/* mod_perl is special, and also assigns a meaning -1 */
PERLVARI(I, perl_destruct_level, signed char,	0)
d573 44
a616 2
PERLVAR(I, NonL1NonFinalFold,   SV *)
PERLVAR(I, HasMultiCharFold,   SV *)
d619 10
d630 1
a630 1
PERLVAR(I, utf8_X_regular_begin, SV *)
d632 8
d644 1
a644 8
PERLVAR(I, utf8_charname_begin, SV *)
PERLVAR(I, utf8_charname_continue, SV *)

PERLVARA(I, utf8_swash_ptrs, POSIX_SWASH_COUNT, SV *)
PERLVARA(I, Posix_ptrs, POSIX_CC_COUNT, SV *)
PERLVARA(I, L1Posix_ptrs, POSIX_CC_COUNT, SV *)
PERLVARA(I, XPosix_ptrs, POSIX_CC_COUNT, SV *)

d648 1
a648 1
PERLVARA(I, last_swash_key,UTF8_MAXBYTES-1, U8)
a652 2
#else
/* One byte hole in the interpreter structure.  */
d657 3
a694 3
PERLVAR(I, stashpad,    HV **)		/* for CopSTASH */
PERLVARI(I, stashpadmax, PADOFFSET, 64)
PERLVARI(I, stashpadix, PADOFFSET, 0)
d712 2
a717 1
PERLVAR(I, utf8_perl_idcont, SV *)
d728 2
d750 4
a774 8
PERLVAR(I, Xpv,		XPV *)		/* (unused) held temporary value */

/* name of the scopes we've ENTERed. Only used with -DDEBUGGING, but needs to be
   present always, as -DDEBUGGING must be binary compatible with non.  */
PERLVARI(I, scopestack_name, const char * *, NULL)

PERLVAR(I, debug_pad,	struct perl_debug_pad)	/* always needed because of the re extension */

d778 4
a781 1
/* The last unconditional member of the interpreter structure when 5.18.2 was
d785 1
a785 1
#define PERL_LAST_5_18_0_INTERP_MEMBER	Iglobhook
d809 11
@


1.1.1.13
log
@Import perl-5.20.1
@
text
@d36 3
d40 1
d56 3
a58 3
PERLVARI(I, tmps_ix,	SSize_t,	-1)
PERLVARI(I, tmps_floor,	SSize_t,	-1)
PERLVAR(I, tmps_max,	SSize_t)
a82 1
PERLVAR(I, defgv,	GV *)           /* the *_ glob */
d116 1
a116 1
                                         * Will be removed in Perl 5.22.
d122 1
a122 2
/* fake PMOP that PL_curpm points to while in (?{}) so $1 et al are visible */
PERLVARI(I, reg_curpm, PMOP*, NULL)
d125 1
a125 2
 * and the currently active state within that slab. This stack of states
 * is shared amongst re-entrant calls to the regex engine */
a177 1
/* Will be removed soon after v5.21.0. See RT #121351 */
d188 1
a188 1
The GV which was last used for a filehandle input operation.  (C<< <FH> >>)
d229 2
a236 1
PERLVAR(I, in_utf8_CTYPE_locale, bool)
d238 1
a238 1
PERLVARA(I, colors,6,	char *)		/* values from PERL_RE_COLORS env var */
d355 1
d543 2
d559 1
a559 1
PERLVAR(I, colorset,	bool)		/* PERL_RE_COLORS env var is in use */
d585 1
a586 1
PERLVAR(I, UpperLatin1,	SV *)   /* Code points 128 - 255 */
d605 1
d744 1
a744 1
/* The last unconditional member of the interpreter structure when 5.20.1 was
a776 13

PERLVARA(I, sv_consts, SV_CONSTS_COUNT, SV*)	/* constant SVs with precomputed hash value */

#ifdef PERL_TRACE_OPS
PERLVARA(I, op_exec_cnt, OP_max+2, UV)	/* Counts of executed OPs of the given type.
                                           If PERL_TRACE_OPS is enabled, we'll dump
                                           a summary count of all ops executed in the
                                           program at perl_destruct time. For
                                           profiling/debugging only. Works only if
                                           DEBUGGING is enabled, too. */
#endif

PERLVAR(I, random_state, PL_RANDOM_STATE_TYPE)
@


1.1.1.14
log
@Import perl-5.20.2
@
text
@d739 1
a739 1
/* The last unconditional member of the interpreter structure when 5.20.2 was
@


1.1.1.15
log
@Import perl-5.24.2
@
text
@d54 1
a54 1
PERLVAR(I, tmps_max,	SSize_t)        /* first unalloced slot in tmps stack */
a69 3
/* prog counter for the currently executing OP_MULTIDEREF Used to signal
 * to S_find_uninit_var() where we are */
PERLVAR(I, multideref_pc, UNOP_AUX_item *)
d75 1
a75 15
PERLVARI(I, tainted,	bool, FALSE)	/* using variables controlled by $< */

/* PL_delaymagic is currently used for two purposes: to assure simultaneous
 * updates in ($<,$>) = ..., and to assure atomic update in push/unshift
 * @@ISA, It works like this: a few places such as pp_push set the DM_DELAY
 * flag; then various places such as av_store() skip mg_set(ary) if this
 * flag is set, and various magic vtable methods set flags like
 * DM_ARRAY_ISA if they've seen something of that ilk. Finally when
 * control returns to pp_push or whatever, it sees if any of those flags
 * have been set, and if so finally calls mg_set().
 *
 * NB: PL_delaymagic is automatically saved and restored by JUMPENV_PUSH
 * / POP. This removes the need to do ENTER/SAVEI16(PL_delaymagic)/LEAVE
 * in hot code like pp_push.
 */
a76 1

d84 1
a84 1
The C variable which corresponds to Perl's C<$^W> warning variable.
d112 3
d136 1
a136 1
This is the C<false> SV.  See C<L</PL_sv_yes>>.  Always refer to this as
d140 1
a140 1
This is the C<true> SV.  See C<L</PL_sv_no>>.  Always refer to this as
a148 2
PERLVAR(I, padname_undef,	PADNAME)
PERLVAR(I, padname_const,	PADNAME)
d176 5
a235 3
#ifdef USE_LOCALE_CTYPE
    PERLVAR(I, warn_locale, SV *)
#endif
a315 1
PERLVARI(I, xsubfilename, const char *, NULL)
d321 1
d373 1
a373 1
C<L</PL_DBsingle>>.
d380 1
a380 1
C<L</PL_DBsub>>.
d385 1
a385 1
variable.  See C<L</PL_DBsingle>>.
a395 2
PERLVARA(I, DBcontrol,    DBVARMG_COUNT, IV) /* IV versions of $DB::single, trace, signal */

d485 1
a485 2
PERLVARI(I, generation,	int,	100)	/* scan sequence# for OP_AASSIGN
                                           compile-time common elem detection */
d537 1
a537 3
PERLVAR(I, padix,	I32)		/* lowest unused index - 1
					   in current "register" pad */
PERLVAR(I, constpadix,	I32)		/* lowest unused for constants */
d571 1
a571 1
PERLVARI(I, numeric_standard, int, TRUE)
a583 1
PERLVAR(I, InBitmap,	SV *)
d590 2
a601 4
PERLVAR(I, GCB_invlist, SV *)
PERLVAR(I, LB_invlist, SV *)
PERLVAR(I, SB_invlist, SV *)
PERLVAR(I, WB_invlist, SV *)
d670 1
a670 2
PERLVARI(I, encoding,	SV *,	NULL)	/* $^ENCODING */
PERLVARI(I, lex_encoding, SV *,	NULL)	/* encoding pragma */
d739 1
a739 3
PERLVARI(I, padlist_generation, U32, 1)	/* id to identify padlist clones */

/* The last unconditional member of the interpreter structure when 5.18.0 was
d753 2
a754 5
#if defined(PERL_IMPLICIT_CONTEXT) || defined(PERL_DEBUG_READONLY_COW)
/* For use with the memory debugging code in util.c. This is used only in
 * DEBUGGING builds (as long as the relevant structure is defined), but
 * defining it in non-debug builds too means that we retain binary
 * compatibility between otherwise-compatible plain and debug builds. */
d763 5
a784 2

PERLVARI(I, dump_re_max_len, STRLEN, 0)
@


