head	1.40;
access;
symbols
	OPENBSD_6_2:1.40.0.2
	OPENBSD_6_2_BASE:1.40
	PERL_5_24_2:1.1.1.18
	OPENBSD_6_1:1.36.0.4
	OPENBSD_6_1_BASE:1.36
	OPENBSD_6_0:1.34.0.4
	OPENBSD_6_0_BASE:1.34
	OPENBSD_5_9:1.33.0.2
	OPENBSD_5_9_BASE:1.33
	OPENBSD_5_8:1.33.0.4
	OPENBSD_5_8_BASE:1.33
	PERL_5_20_2:1.1.1.17
	OPENBSD_5_7:1.31.0.2
	OPENBSD_5_7_BASE:1.31
	PERL_5_20_1:1.1.1.16
	OPENBSD_5_6:1.28.0.4
	OPENBSD_5_6_BASE:1.28
	PERL_5_18_2:1.1.1.15
	PERL:1.1.1
	OPENBSD_5_5:1.26.0.6
	OPENBSD_5_5_BASE:1.26
	OPENBSD_5_4:1.26.0.2
	OPENBSD_5_4_BASE:1.26
	PERL_5_16_3:1.1.1.14
	OPENBSD_5_3:1.25.0.6
	OPENBSD_5_3_BASE:1.25
	OPENBSD_5_2:1.25.0.4
	OPENBSD_5_2_BASE:1.25
	OPENBSD_5_1_BASE:1.25
	OPENBSD_5_1:1.25.0.2
	OPENBSD_5_0:1.24.0.2
	OPENBSD_5_0_BASE:1.24
	OPENBSD_4_9:1.23.0.2
	OPENBSD_4_9_BASE:1.23
	PERL_5_12_2:1.1.1.13
	OPENBSD_4_8:1.22.0.4
	OPENBSD_4_8_BASE:1.22
	OPENBSD_4_7:1.22.0.2
	OPENBSD_4_7_BASE:1.22
	PERL_5_10_1:1.1.1.12
	OPENBSD_4_6:1.19.0.6
	OPENBSD_4_6_BASE:1.19
	OPENBSD_4_5:1.19.0.2
	OPENBSD_4_5_BASE:1.19
	PERL_5_10_0:1.1.1.11
	OPENBSD_4_4:1.18.0.10
	OPENBSD_4_4_BASE:1.18
	OPENBSD_4_3:1.18.0.8
	OPENBSD_4_3_BASE:1.18
	OPENBSD_4_2:1.18.0.6
	OPENBSD_4_2_BASE:1.18
	OPENBSD_4_1:1.18.0.4
	OPENBSD_4_1_BASE:1.18
	OPENBSD_4_0:1.18.0.2
	OPENBSD_4_0_BASE:1.18
	PERL_5_8_8:1.1.1.10
	OPENBSD_3_9:1.17.0.6
	OPENBSD_3_9_BASE:1.17
	OPENBSD_3_8:1.17.0.4
	OPENBSD_3_8_BASE:1.17
	OPENBSD_3_7:1.17.0.2
	OPENBSD_3_7_BASE:1.17
	PERL_5_8_6:1.1.1.9
	OPENBSD_3_6:1.16.0.2
	OPENBSD_3_6_BASE:1.16
	PERL_5_8_5:1.1.1.8
	PERL_5_8_3:1.1.1.7
	OPENBSD_3_5:1.12.0.2
	OPENBSD_3_5_BASE:1.12
	PERL_5_8_2:1.1.1.6
	OPENBSD_3_4:1.11.0.4
	OPENBSD_3_4_BASE:1.11
	OPENBSD_3_3:1.11.0.2
	OPENBSD_3_3_BASE:1.11
	PERL_5_8_0:1.1.1.5
	OPENBSD_3_2:1.10.0.2
	OPENBSD_3_2_BASE:1.10
	OPENBSD_3_1:1.9.0.2
	OPENBSD_3_1_BASE:1.9
	OPENBSD_3_0:1.8.0.2
	OPENBSD_3_0_BASE:1.8
	PERL_5_6_1:1.1.1.4
	OPENBSD_2_9:1.7.0.6
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_8:1.7.0.4
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.7.0.2
	OPENBSD_2_7_BASE:1.7
	PERL_5_6_0:1.1.1.3
	OPENBSD_2_6:1.6.0.2
	OPENBSD_2_6_BASE:1.6
	PERL_500503:1.1.1.2
	CPAN:1.1.1
	OPENBSD_2_5:1.4.0.6
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.4
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.2
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.3.0.2
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	perl5003:1.1.1.1
	lwall:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.40
date	2017.08.14.13.49.42;	author afresh1;	state Exp;
branches;
next	1.39;
commitid	AOpGtCFzbfdujI88;

1.39
date	2017.08.14.13.48.45;	author afresh1;	state Exp;
branches;
next	1.38;
commitid	CrMEpTqBUsxCMTjx;

1.38
date	2017.08.01.15.53.47;	author afresh1;	state Exp;
branches;
next	1.37;
commitid	XTyNZLu2C2i9ndzw;

1.37
date	2017.07.26.22.26.07;	author espie;	state Exp;
branches;
next	1.36;
commitid	dcCEkEn4E2qwXCNr;

1.36
date	2017.02.05.00.33.38;	author afresh1;	state Exp;
branches;
next	1.35;
commitid	7JLVNm1wwPgqSqTa;

1.35
date	2017.02.05.00.31.51;	author afresh1;	state Exp;
branches;
next	1.34;
commitid	cxJ08BvJA9Pt2PTM;

1.34
date	2016.07.03.01.07.47;	author afresh1;	state Exp;
branches;
next	1.33;
commitid	GzHqjSTnBjdF7Wcw;

1.33
date	2015.04.25.19.26.15;	author afresh1;	state Exp;
branches;
next	1.32;
commitid	3qGYFVvfrExB70FB;

1.32
date	2015.04.25.19.14.36;	author afresh1;	state Exp;
branches;
next	1.31;
commitid	XRK22kO4se3v2i2I;

1.31
date	2014.12.30.20.46.45;	author afresh1;	state Exp;
branches;
next	1.30;
commitid	ij0neLKXNMN90mY6;

1.30
date	2014.11.17.21.00.55;	author afresh1;	state Exp;
branches;
next	1.29;
commitid	LnErp1MFKSuew5Fr;

1.29
date	2014.11.17.20.56.47;	author afresh1;	state Exp;
branches;
next	1.28;
commitid	QP75iYx42Uo7mMxO;

1.28
date	2014.03.26.16.36.32;	author afresh1;	state Exp;
branches;
next	1.27;

1.27
date	2014.03.24.15.05.12;	author afresh1;	state Exp;
branches;
next	1.26;

1.26
date	2013.03.25.20.40.43;	author sthen;	state Exp;
branches;
next	1.25;

1.25
date	2012.01.09.16.15.22;	author millert;	state Exp;
branches;
next	1.24;

1.24
date	2011.08.02.17.39.48;	author deraadt;	state Exp;
branches;
next	1.23;

1.23
date	2010.09.24.15.06.38;	author millert;	state Exp;
branches;
next	1.22;

1.22
date	2010.01.04.15.53.31;	author millert;	state Exp;
branches;
next	1.21;

1.21
date	2009.10.14.19.08.07;	author millert;	state Exp;
branches;
next	1.20;

1.20
date	2009.10.12.18.24.20;	author millert;	state Exp;
branches;
next	1.19;

1.19
date	2008.09.29.17.35.55;	author millert;	state Exp;
branches;
next	1.18;

1.18
date	2006.03.28.19.22.54;	author millert;	state Exp;
branches;
next	1.17;

1.17
date	2005.01.15.21.30.16;	author millert;	state Exp;
branches;
next	1.16;

1.16
date	2004.08.15.20.57.29;	author millert;	state Exp;
branches;
next	1.15;

1.15
date	2004.08.14.00.12.22;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	2004.08.09.18.08.53;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	2004.04.07.21.32.58;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2003.12.03.03.02.18;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2002.10.27.22.25.16;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2002.09.11.19.41.36;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2002.04.05.17.33.58;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2001.05.24.18.34.43;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2000.04.06.17.03.31;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	99.04.29.22.55.58;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	99.04.29.22.50.50;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	97.11.30.07.47.54;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	97.09.08.10.23.23;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.09.06.01.33.53;	author dm;	state Exp;
branches;
next	1.1;

1.1
date	96.08.19.10.11.33;	author downsj;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.08.19.10.11.33;	author downsj;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.04.29.22.36.43;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2000.04.06.16.08.29;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2001.05.24.18.21.47;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2002.10.27.22.14.45;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2003.12.03.02.43.27;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2004.04.07.21.12.46;	author millert;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2004.08.09.17.45.25;	author millert;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2005.01.15.21.16.20;	author millert;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	2006.03.28.18.47.20;	author millert;	state Exp;
branches;
next	1.1.1.11;

1.1.1.11
date	2008.09.29.17.18.02;	author millert;	state Exp;
branches;
next	1.1.1.12;

1.1.1.12
date	2009.10.12.18.10.37;	author millert;	state Exp;
branches;
next	1.1.1.13;

1.1.1.13
date	2010.09.24.14.48.30;	author millert;	state Exp;
branches;
next	1.1.1.14;

1.1.1.14
date	2013.03.25.20.06.18;	author sthen;	state Exp;
branches;
next	1.1.1.15;

1.1.1.15
date	2014.03.24.14.58.44;	author afresh1;	state Exp;
branches;
next	1.1.1.16;

1.1.1.16
date	2014.11.17.20.52.35;	author afresh1;	state Exp;
branches;
next	1.1.1.17;
commitid	B31cAbBIXiCqnL97;

1.1.1.17
date	2015.04.25.19.10.08;	author afresh1;	state Exp;
branches;
next	1.1.1.18;
commitid	Wpcs5S8qILgEZC7F;

1.1.1.18
date	2017.08.14.13.45.24;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.40
log
@Apply local patches - perl-5.24.2

OK bluhm@@, Reads ok sthen@@
@
text
@#! /bin/sh
#
# If these # comments don't work, trim them. Don't worry about any other
# shell scripts, Configure will trim # comments from them for you.
#
# (If you are trying to port this package to a machine without sh,
# I would suggest you have a look at the prototypical config_h.SH file
# and edit it to reflect your system. Some packages may include samples
# of config.h for certain machines, so you might look for one of those.)
#
# Yes, you may rip this off to use in other distribution packages. This
# script belongs to the public domain and cannot be copyrighted.
#
# Note: this Configure script was generated automatically by the tool
# called "metaconfig". Rather than working with this copy of Configure,
# you may wish to get metaconfig. Perl uses a modified version of this
# tool, available in the "dist" folder in the checkout of the git repo
#    $ git clone git://perl5.git.perl.org/metaconfig.git metaconfig
# The original dist package (including metaconfig) is available via SVN:
#    $ svn co https://svn.code.sf.net/p/dist/code/trunk/dist
#
# Though this script was generated by metaconfig from metaunits, it is
# OK to send patches against Configure itself. It's up to the Configure
# pumpkin to backport the patch to the metaunits if it is accepted.
# For more information on patching Configure, see pod/perlhack.pod
#
# The metaunits are also available from the public git repository:
#     http://perl5.git.perl.org/metaconfig.git/ or
#     $ git clone git://perl5.git.perl.org/metaconfig.git metaconfig
#
# See Porting/pumpkin.pod for more information on metaconfig.

# Generated using [metaconfig 3.5 PL0]
# (with additional metaconfig patches by perlbug@@perl.org)

cat >c1$$ <<EOF
ARGGGHHHH!!!!!

SCO csh still thinks true is false.  Write to SCO today and tell them that next
year Configure ought to "rm /bin/csh" unless they fix their blasted shell. :-)

(Actually, Configure ought to just patch csh in place.  Hmm.  Hmmmmm.  All
we'd have to do is go in and swap the && and || tokens, wherever they are.)

[End of diatribe. We now return you to your regularly scheduled programming...]
EOF
cat >c2$$ <<EOF

OOPS!  You naughty creature!  You didn't run Configure with sh!
I will attempt to remedy the situation by running sh for you...
EOF

true || cat c1$$ c2$$
true || exec sh $0 $argv:q

(exit $?0) || cat c2$$
(exit $?0) || exec sh $0 $argv:q
rm -f c1$$ c2$$

if test -f /dev/cputype -a -f /dev/drivers -a -f /dev/osversion; then
	cat <<EOF
***
*** I'm sorry but this system looks like Plan 9 and Plan 9 doesn't do
*** Configure that well.  (Plan 9 is close to UNIX but not close enough.)
*** Please read the README.plan9 for further instructions.
*** Cannot continue, aborting.
***
EOF
	exit 1
fi

if test -f /sys/utilities/MultiView ; then
	# AmigaOS, test -c for /dev/null is not useful
	:
elif test ! -c /dev/null ; then
	cat <<EOF
***
*** I'm sorry, but /dev/null appears to be a file rather than a device.
*** Please consult your operating sytem's notes for making a device
*** in /dev.
*** Cannot continue, aborting.
***
EOF
	exit 1
fi

: compute my invocation name
me=$0
case "$0" in
*/*)
	me=`echo $0 | sed -e 's!.*/\(.*\)!\1!' 2>/dev/null`
	test "$me" || me=$0
	;;
esac

: Proper separator for the PATH environment variable
p_=:
: On OS/2 this directory should exist if this is not floppy only system ":-]"
if test -d c:/. || ( uname -a | grep -i 'os\(/\|\)2' 2>&1 ) 2>&1 >/dev/null ; then
	if test -n "$OS2_SHELL"; then
		p_=\;
		PATH=`cmd /c "echo %PATH%" | tr '\\\\' / `
		OS2_SHELL=`cmd /c "echo %OS2_SHELL%" | tr '\\\\' / | tr '[A-Z]' '[a-z]'`
		is_os2=yes
	elif test -n "$DJGPP"; then
		case "X${MACHTYPE:-nonesuchmach}" in
		*cygwin|*msys) ;;
		*) p_=\; ;;
		esac
	fi
fi

: Proper PATH setting
paths='/bin /usr/bin /usr/local/bin /usr/ucb /usr/local /usr/lbin'
paths="$paths /opt/bin /opt/local/bin /opt/local /opt/lbin"
paths="$paths /usr/5bin /etc /usr/gnu/bin /usr/new /usr/new/bin /usr/nbin"
paths="$paths /opt/gnu/bin /opt/new /opt/new/bin /opt/nbin"
paths="$paths /sys5.3/bin /sys5.3/usr/bin /bsd4.3/bin /bsd4.3/usr/ucb"
paths="$paths /bsd4.3/usr/bin /usr/bsd /bsd43/bin /opt/ansic/bin /usr/ccs/bin"
paths="$paths /etc /usr/lib /usr/ucblib /lib /usr/ccs/lib"
paths="$paths /sbin /usr/sbin /usr/libexec"
paths="$paths /system/gnu_library/bin"

for p in $paths
do
	case "$p_$PATH$p_" in
	*$p_$p$p_*) ;;
	*) test -d $p && PATH=$PATH$p_$p ;;
	esac
done

PATH=.$p_$PATH
export PATH

: shall we be using ksh?
inksh=''
needksh=''
avoidksh=''
newsh=/bin/ksh
changesh=''
if (PATH=.; alias -x) >/dev/null 2>&1; then
		inksh=true
fi
if test -f /hp-ux -a -f /bin/ksh; then
	needksh='to avoid sh bug in "here document" expansion'
fi
if test -d /usr/lpp -a -f /usr/bin/bsh -a -f /usr/bin/uname; then
	if test X`/usr/bin/uname -v` = X4; then
		avoidksh="to avoid AIX 4's /bin/sh"
		newsh=/usr/bin/bsh
	fi
fi
if test -f /osf_boot -a -f /usr/sbin/setld; then
	if test X`/usr/bin/uname -s` = XOSF1; then
		avoidksh="to avoid Digital UNIX' ksh"
		newsh=/bin/sh
		unset BIN_SH
	fi
fi
case "$inksh/$needksh" in
/[a-z]*)
		ENV=''
		changesh=true
		reason="$needksh"
	;;
esac
case "$inksh/$avoidksh" in
true/[a-z]*)
	changesh=true
	reason="$avoidksh"
	;;
esac
case "$inksh/$needksh-$avoidksh-" in
true/--)
		cat <<EOM
(I see you are using the Korn shell.  Some ksh's blow up on $me,
mainly on older exotic systems.  If yours does, try the Bourne shell instead.)
EOM
	;;
esac
case "$changesh" in
true)
	export newsh
	echo "(Feeding myself to $newsh $reason.)"
	case "$0" in
	Configure|*/Configure) exec $newsh $0 "$@@";;
	*) exec $newsh Configure "$@@";;
	esac
	;;
esac
test -x "${newsh}" || unset newsh

: if needed, set CDPATH to a harmless value that is not chatty
: avoid bash 2.02 problems with empty CDPATH.
case "$CDPATH" in
'')	;;
*)	case "$SHELL" in
	*bash*) CDPATH='.' ;;
	*) CDPATH='' ;;
	esac
	;;
esac

: Configure runs within the UU subdirectory
test -d UU || mkdir UU
cd UU && rm -f ./*

ccname=''
ccversion=''
ccsymbols=''
cppccsymbols=''
cppsymbols=''
from=''
hostgenerate=''
hostosname=''
hostperl=''
run=''
targetarch=''
targetdir=''
targetenv=''
targethost=''
targetmkdir=''
targetport=''
to=''
usecrosscompile=''
extern_C=''
mistrustnm=''
usedevel=''
perllibs=''
dynamic_ext=''
extensions=''
known_extensions=''
nonxs_ext=''
static_ext=''
useopcode=''
useposix=''
extras=''
d_bsd=''
d_eunice=''
d_xenix=''
eunicefix=''
ar=''
awk=''
bash=''
bison=''
byacc=''
cat=''
chgrp=''
chmod=''
chown=''
comm=''
compress=''
cp=''
cpio=''
cpp=''
csh=''
date=''
echo=''
egrep=''
emacs=''
expr=''
find=''
flex=''
gmake=''
grep=''
gzip=''
inews=''
ksh=''
less=''
line=''
lint=''
ln=''
lp=''
lpr=''
ls=''
mail=''
mailx=''
make=''
mkdir=''
more=''
mv=''
nm=''
nroff=''
perl=''
pg=''
pmake=''
pr=''
rm=''
rmail=''
sed=''
sendmail=''
shar=''
sleep=''
smail=''
sort=''
submit=''
tail=''
tar=''
tbl=''
tee=''
test=''
touch=''
tr=''
troff=''
uname=''
uniq=''
uuname=''
vi=''
zcat=''
zip=''
full_ar=''
full_sed=''
libswanted=''
hint=''
myuname=''
osname=''
osvers=''
Author=''
Date=''
Header=''
Id=''
Locker=''
Log=''
RCSfile=''
Revision=''
Source=''
State=''
sysroot=''
_a=''
_exe=''
_o=''
archobjs=''
exe_ext=''
firstmakefile=''
lib_ext=''
obj_ext=''
path_sep=''
rm_try=''
afs=''
afsroot=''
alignbytes=''
ansi2knr=''
archlib=''
archlibexp=''
d_archlib=''
installarchlib=''
archname=''
myarchname=''
useversionedarchname=''
d_atolf=''
d_atoll=''
baserev=''
bin=''
binexp=''
initialinstalllocation=''
installbin=''
userelocatableinc=''
byteorder=''
cc=''
ccflags=''
cppflags=''
ldflags=''
lkflags=''
locincpth=''
optimize=''
cf_email=''
cf_by=''
cf_time=''
charbits=''
charsize=''
contains=''
cpp_stuff=''
cpplast=''
cppminus=''
cpprun=''
cppstdin=''
d__fwalk=''
d_access=''
d_accessx=''
d_acosh=''
d_aintl=''
d_alarm=''
asctime_r_proto=''
d_asctime_r=''
d_asinh=''
d_atanh=''
d_attribute_deprecated=''
d_attribute_format=''
d_attribute_malloc=''
d_attribute_nonnull=''
d_attribute_noreturn=''
d_attribute_pure=''
d_attribute_unused=''
d_attribute_warn_unused_result=''
d_printf_format_null=''
d_backtrace=''
d_bcmp=''
d_bcopy=''
d_builtin_choose_expr=''
d_builtin_expect=''
d_bzero=''
d_c99_variadic_macros=''
d_casti32=''
castflags=''
d_castneg=''
d_cbrt=''
d_chown=''
d_chroot=''
d_chsize=''
d_class=''
d_clearenv=''
d_closedir=''
d_void_closedir=''
d_cmsghdr_s=''
d_const=''
d_copysign=''
d_copysignl=''
d_cplusplus=''
cryptlib=''
d_crypt=''
crypt_r_proto=''
d_crypt_r=''
d_csh=''
full_csh=''
d_ctermid=''
ctermid_r_proto=''
d_ctermid_r=''
ctime_r_proto=''
d_ctime_r=''
d_cuserid=''
d_dbl_dig=''
d_dbminitproto=''
d_difftime=''
d_dir_dd_fd=''
d_dirfd=''
d_dladdr=''
d_dlerror=''
d_dlopen=''
d_dlsymun=''
d_dosuid=''
d_suidsafe=''
d_drand48_r=''
drand48_r_proto=''
d_drand48proto=''
d_dup2=''
d_eaccess=''
d_endgrent=''
d_endgrent_r=''
endgrent_r_proto=''
d_endhent=''
d_endhostent_r=''
endhostent_r_proto=''
d_endnent=''
d_endnetent_r=''
endnetent_r_proto=''
d_endpent=''
d_endprotoent_r=''
endprotoent_r_proto=''
d_endpwent=''
d_endpwent_r=''
endpwent_r_proto=''
d_endsent=''
d_endservent_r=''
endservent_r_proto=''
d_erf=''
d_erfc=''
d_exp2=''
d_expm1=''
d_faststdio=''
d_fchdir=''
d_fchmod=''
d_fchown=''
d_fcntl=''
d_fcntl_can_lock=''
d_fd_macros=''
d_fd_set=''
d_fds_bits=''
d_fdclose=''
d_fdim=''
d_fegetround=''
d_fgetpos=''
d_finite=''
d_finitel=''
d_flexfnam=''
d_flock=''
d_flockproto=''
d_fma=''
d_fmax=''
d_fmin=''
d_fork=''
d_fp_class=''
d_fp_classl=''
d_fpclass=''
d_fp_classify=''
d_fpclassify=''
d_fpclassl=''
d_fpgetround=''
d_fpos64_t=''
d_frexpl=''
d_fs_data_s=''
d_fseeko=''
d_fsetpos=''
d_fstatfs=''
d_fsync=''
d_ftello=''
d_ftime=''
d_gettimeod=''
d_futimes=''
d_Gconvert=''
d_getaddrinfo=''
d_getcwd=''
d_getespwnam=''
d_getfsstat=''
d_getgrent=''
d_getgrent_r=''
getgrent_r_proto=''
d_getgrgid_r=''
getgrgid_r_proto=''
d_getgrnam_r=''
getgrnam_r_proto=''
d_getgrps=''
d_gethbyaddr=''
d_gethbyname=''
d_gethent=''
aphostname=''
d_gethname=''
d_phostname=''
d_uname=''
d_gethostbyaddr_r=''
gethostbyaddr_r_proto=''
d_gethostbyname_r=''
gethostbyname_r_proto=''
d_gethostent_r=''
gethostent_r_proto=''
d_gethostprotos=''
d_getitimer=''
d_getlogin=''
d_getlogin_r=''
getlogin_r_proto=''
d_getmnt=''
d_getmntent=''
d_getnameinfo=''
d_getnbyaddr=''
d_getnbyname=''
d_getnent=''
d_getnetbyaddr_r=''
getnetbyaddr_r_proto=''
d_getnetbyname_r=''
getnetbyname_r_proto=''
d_getnetent_r=''
getnetent_r_proto=''
d_getnetprotos=''
d_getpagsz=''
d_getpent=''
d_getpgid=''
d_getpgrp2=''
d_bsdgetpgrp=''
d_getpgrp=''
d_getppid=''
d_getprior=''
d_getpbyname=''
d_getpbynumber=''
d_getprotobyname_r=''
getprotobyname_r_proto=''
d_getprotobynumber_r=''
getprotobynumber_r_proto=''
d_getprotoent_r=''
getprotoent_r_proto=''
d_getprotoprotos=''
d_getprpwnam=''
d_getpwent=''
d_getpwent_r=''
getpwent_r_proto=''
d_getpwnam_r=''
getpwnam_r_proto=''
d_getpwuid_r=''
getpwuid_r_proto=''
d_getsent=''
d_getservbyname_r=''
getservbyname_r_proto=''
d_getservbyport_r=''
getservbyport_r_proto=''
d_getservent_r=''
getservent_r_proto=''
d_getservprotos=''
d_getspnam=''
d_getspnam_r=''
getspnam_r_proto=''
d_getsbyname=''
d_getsbyport=''
d_gmtime_r=''
gmtime_r_proto=''
d_gnulibc=''
gnulibc_version=''
d_hasmntopt=''
d_htonl=''
d_hypot=''
d_ilogb=''
d_ilogbl=''
d_inetaton=''
d_inetntop=''
d_inetpton=''
d_int64_t=''
d_isascii=''
d_isblank=''
d_isfinite=''
d_isfinitel=''
d_isinf=''
d_isinfl=''
d_isless=''
d_isnan=''
d_isnanl=''
d_isnormal=''
d_j0=''
d_j0l=''
d_killpg=''
d_lc_monetary_2008=''
d_lchown=''
d_ldbl_dig=''
d_lgamma=''
d_lgamma_r=''
d_libm_lib_version=''
d_link=''
d_llrint=''
d_llrintl=''
d_llround=''
d_llroundl=''
d_localtime_r=''
d_localtime_r_needs_tzset=''
localtime_r_proto=''
d_locconv=''
d_lockf=''
d_log1p=''
d_log2=''
d_logb=''
d_ldexpl=''
d_longdbl=''
longdblkind=''
longdblsize=''
d_longlong=''
longlongsize=''
d_lrint=''
d_lrintl=''
d_lround=''
d_lroundl=''
d_lseekproto=''
d_lstat=''
d_madvise=''
d_malloc_good_size=''
d_malloc_size=''
d_mblen=''
d_mbstowcs=''
d_mbtowc=''
d_memchr=''
d_memcmp=''
d_memcpy=''
d_memmem=''
d_memmove=''
d_memset=''
d_mkdir=''
d_mkdtemp=''
d_mkfifo=''
d_mkstemp=''
d_mkstemps=''
d_mktime=''
d_mmap=''
mmaptype=''
d_modfl=''
d_modflproto=''
d_mprotect=''
d_msg=''
d_msgctl=''
d_msgget=''
d_msghdr_s=''
d_msgrcv=''
d_msgsnd=''
d_msync=''
d_munmap=''
d_nan=''
d_nearbyint=''
d_duplocale=''
d_freelocale=''
d_newlocale=''
d_uselocale=''
i_xlocale=''
d_nextafter=''
d_nexttoward=''
d_nice=''
d_nl_langinfo=''
d_off64_t=''
d_open3=''
d_fpathconf=''
d_pathconf=''
d_pause=''
d_pipe=''
d_poll=''
d_portable=''
d_prctl=''
d_prctl_set_name=''
d_procselfexe=''
procselfexe=''
d_old_pthread_create_joinable=''
old_pthread_create_joinable=''
d_pthread_atfork=''
d_pthread_attr_setscope=''
d_pthread_yield=''
d_sched_yield=''
sched_yield=''
d_ptrdiff_t=''
d_qgcvt=''
d_random_r=''
random_r_proto=''
d_readdir64_r=''
readdir64_r_proto=''
d_readdir=''
d_rewinddir=''
d_seekdir=''
d_telldir=''
d_readdir_r=''
readdir_r_proto=''
d_readlink=''
d_readv=''
d_recvmsg=''
d_re_comp=''
d_regcmp=''
d_regcomp=''
d_remainder=''
d_remquo=''
d_rename=''
d_rint=''
d_rmdir=''
d_round=''
d_safebcpy=''
d_safemcpy=''
d_sanemcmp=''
d_sbrkproto=''
d_scalbn=''
d_scalbnl=''
d_select=''
d_sem=''
d_semctl=''
d_semget=''
d_semop=''
d_sendmsg=''
d_setegid=''
d_seteuid=''
d_setgrent=''
d_setgrent_r=''
setgrent_r_proto=''
d_setgrps=''
d_sethent=''
d_sethostent_r=''
sethostent_r_proto=''
d_setitimer=''
d_setlinebuf=''
d_setlocale=''
d_setlocale_r=''
setlocale_r_proto=''
d_setnent=''
d_setnetent_r=''
setnetent_r_proto=''
d_setpent=''
d_setpgid=''
d_setpgrp2=''
d_bsdsetpgrp=''
d_setpgrp=''
d_setprior=''
d_setproctitle=''
d_setprotoent_r=''
setprotoent_r_proto=''
d_setpwent=''
d_setpwent_r=''
setpwent_r_proto=''
d_setregid=''
d_setresgid=''
d_setresuid=''
d_setreuid=''
d_setrgid=''
d_setruid=''
d_setsent=''
d_setservent_r=''
setservent_r_proto=''
d_setsid=''
d_setvbuf=''
d_shm=''
d_shmat=''
d_shmatprototype=''
shmattype=''
d_shmctl=''
d_shmdt=''
d_shmget=''
d_sigaction=''
d_siginfo_si_addr=''
d_siginfo_si_band=''
d_siginfo_si_errno=''
d_siginfo_si_fd=''
d_siginfo_si_pid=''
d_siginfo_si_status=''
d_siginfo_si_uid=''
d_siginfo_si_value=''
d_signbit=''
d_sigprocmask=''
d_sigsetjmp=''
usesitecustomize=''
d_snprintf=''
d_vsnprintf=''
d_sockatmark=''
d_sockatmarkproto=''
d_ip_mreq=''
d_ip_mreq_source=''
d_ipv6_mreq=''
d_ipv6_mreq_source=''
d_msg_ctrunc=''
d_msg_dontroute=''
d_msg_oob=''
d_msg_peek=''
d_msg_proxy=''
d_oldsock=''
d_scm_rights=''
d_sin6_scope_id=''
d_sockaddr_in6=''
d_sockaddr_sa_len=''
d_socket=''
d_sockpair=''
sockethdr=''
socketlib=''
d_socklen_t=''
d_socks5_init=''
d_sprintf_returns_strlen=''
d_sqrtl=''
d_srand48_r=''
srand48_r_proto=''
d_srandom_r=''
srandom_r_proto=''
d_sresgproto=''
d_sresuproto=''
d_stat=''
d_statblks=''
d_statfs_f_flags=''
d_statfs_s=''
d_static_inline=''
perl_static_inline=''
d_fstatvfs=''
d_statvfs=''
d_stdio_cnt_lval=''
d_stdio_ptr_lval=''
d_stdio_ptr_lval_nochange_cnt=''
d_stdio_ptr_lval_sets_cnt=''
d_stdiobase=''
d_stdstdio=''
stdio_base=''
stdio_bufsiz=''
stdio_cnt=''
stdio_filbuf=''
stdio_ptr=''
d_index=''
d_strchr=''
d_strcoll=''
d_strctcpy=''
d_strerrm=''
d_strerror=''
d_sysernlst=''
d_syserrlst=''
d_strerror_r=''
strerror_r_proto=''
d_strftime=''
d_strlcat=''
d_strlcpy=''
d_strtod=''
d_strtol=''
d_strtold=''
d_strtoll=''
d_strtoq=''
d_strtoul=''
d_strtoull=''
d_strtouq=''
d_strxfrm=''
d_symlink=''
d_syscall=''
d_syscallproto=''
d_sysconf=''
d_system=''
d_tcgetpgrp=''
d_tcsetpgrp=''
d_telldirproto=''
d_tgamma=''
d_time=''
timetype=''
d_asctime64=''
d_ctime64=''
d_difftime64=''
d_gmtime64=''
d_localtime64=''
d_mktime64=''
d_timegm=''
clocktype=''
d_times=''
d_tmpnam_r=''
tmpnam_r_proto=''
d_trunc=''
d_truncate=''
d_truncl=''
d_ttyname_r=''
ttyname_r_proto=''
d_tzname=''
d_u32align=''
d_ualarm=''
d_umask=''
d_semctl_semid_ds=''
d_semctl_semun=''
d_union_semun=''
d_unordered=''
d_unsetenv=''
d_usleep=''
d_usleepproto=''
d_ustat=''
d_pseudofork=''
d_vfork=''
usevfork=''
d_voidsig=''
signal_t=''
d_volatile=''
d_charvspr=''
d_vprintf=''
d_wait4=''
d_waitpid=''
d_wcscmp=''
d_wcstombs=''
d_wcsxfrm=''
d_wctomb=''
d_writev=''
dlext=''
bin_ELF=''
cccdlflags=''
ccdlflags=''
dlsrc=''
ld=''
ld_can_script=''
lddlflags=''
usedl=''
doublesize=''
dtraceobject=''
ebcdic=''
fflushNULL=''
fflushall=''
fpossize=''
fpostype=''
gccansipedantic=''
gccosandvers=''
gccversion=''
gidformat=''
gidsign=''
gidsize=''
gidtype=''
groupstype=''
h_fcntl=''
h_sysfile=''
html1dir=''
html1direxp=''
installhtml1dir=''
html3dir=''
html3direxp=''
installhtml3dir=''
i_arpainet=''
i_assert=''
i_bfd=''
i_crypt=''
db_hashtype=''
db_prefixtype=''
db_version_major=''
db_version_minor=''
db_version_patch=''
i_db=''
i_dbm=''
i_rpcsvcdbm=''
d_dirnamlen=''
direntrytype=''
i_dirent=''
i_dlfcn=''
i_execinfo=''
i_fcntl=''
i_fenv=''
i_float=''
i_fp=''
i_fp_class=''
i_gdbm=''
d_grpasswd=''
i_grp=''
i_ieeefp=''
i_inttypes=''
i_langinfo=''
i_libutil=''
i_limits=''
i_locale=''
i_machcthr=''
i_malloc=''
i_mallocmalloc=''
i_math=''
i_memory=''
i_mntent=''
d_gdbm_ndbm_h_uses_prototypes=''
d_gdbmndbm_h_uses_prototypes=''
d_ndbm=''
d_ndbm_h_uses_prototypes=''
i_gdbm_ndbm=''
i_gdbmndbm=''
i_ndbm=''
i_netdb=''
i_neterrno=''
i_netinettcp=''
i_niin=''
i_sysin=''
i_poll=''
i_prot=''
i_pthread=''
d_pwage=''
d_pwchange=''
d_pwclass=''
d_pwcomment=''
d_pwexpire=''
d_pwgecos=''
d_pwpasswd=''
d_pwquota=''
i_pwd=''
i_quadmath=''
i_shadow=''
i_socks=''
i_stdbool=''
i_stddef=''
i_stdint=''
i_stdlib=''
i_string=''
strings=''
i_sunmath=''
i_sysaccess=''
i_sysdir=''
i_sysfile=''
d_voidtty=''
i_bsdioctl=''
i_sysfilio=''
i_sysioctl=''
i_syssockio=''
i_syslog=''
i_sysmman=''
i_sysmode=''
i_sysmount=''
i_sysndir=''
i_sysparam=''
i_syspoll=''
i_sysresrc=''
i_syssecrt=''
i_sysselct=''
i_sysstat=''
i_sysstatfs=''
i_sysstatvfs=''
i_systimes=''
i_systypes=''
i_sysuio=''
i_sysun=''
i_sysutsname=''
i_sysvfs=''
i_syswait=''
i_sgtty=''
i_termio=''
i_termios=''
d_tm_tm_gmtoff=''
d_tm_tm_zone=''
i_systime=''
i_systimek=''
i_time=''
timeincl=''
i_unistd=''
i_ustat=''
i_utime=''
i_values=''
i_stdarg=''
i_varargs=''
i_varhdr=''
i_vfork=''
d_inc_version_list=''
inc_version_list=''
inc_version_list_init=''
doubleinfbytes=''
doublenanbytes=''
longdblinfbytes=''
longdblnanbytes=''
installprefix=''
installprefixexp=''
installstyle=''
installusrbinperl=''
intsize=''
longsize=''
shortsize=''
issymlink=''
libc=''
ldlibpthname=''
libperl=''
shrpenv=''
useshrplib=''
glibpth=''
incpth=''
libpth=''
loclibpth=''
plibpth=''
xlibpth=''
ignore_versioned_solibs=''
libs=''
libsdirs=''
libsfiles=''
libsfound=''
libspath=''
lns=''
d_PRIEUldbl=''
d_PRIFUldbl=''
d_PRIGUldbl=''
d_PRIeldbl=''
d_PRIfldbl=''
d_PRIgldbl=''
d_SCNfldbl=''
doublekind=''
sPRIEUldbl=''
sPRIFUldbl=''
sPRIGUldbl=''
sPRIeldbl=''
sPRIfldbl=''
sPRIgldbl=''
sSCNfldbl=''
lseeksize=''
lseektype=''
make_set_make=''
d_mymalloc=''
freetype=''
mallocobj=''
mallocsrc=''
malloctype=''
usemallocwrap=''
usemymalloc=''
installman1dir=''
man1dir=''
man1direxp=''
man1ext=''
installman3dir=''
man3dir=''
man3direxp=''
man3ext=''
doublemantbits=''
longdblmantbits=''
nvmantbits=''
modetype=''
multiarch=''
mydomain=''
myhostname=''
phostname=''
c=''
n=''
d_eofnblk=''
eagain=''
o_nonblock=''
rd_nodata=''
need_va_copy=''
netdb_hlen_type=''
netdb_host_type=''
netdb_name_type=''
netdb_net_type=''
groupcat=''
hostcat=''
passcat=''
orderlib=''
ranlib=''
d_perl_otherlibdirs=''
otherlibdirs=''
package=''
spackage=''
pager=''
api_revision=''
api_subversion=''
api_version=''
api_versionstring=''
patchlevel=''
perl_patchlevel=''
revision=''
subversion=''
version=''
version_patchlevel_string=''
perl5=''
perladmin=''
perlpath=''
d_nv_preserves_uv=''
d_nv_zero_is_allbits_zero=''
i16size=''
i16type=''
i32size=''
i32type=''
i64size=''
i64type=''
i8size=''
i8type=''
ivsize=''
ivtype=''
nv_overflows_integers_at=''
nv_preserves_uv_bits=''
nvsize=''
nvtype=''
u16size=''
u16type=''
u32size=''
u32type=''
u64size=''
u64type=''
u8size=''
u8type=''
uvsize=''
uvtype=''
ivdformat=''
nvEUformat=''
nvFUformat=''
nvGUformat=''
nveformat=''
nvfformat=''
nvgformat=''
uvXUformat=''
uvoformat=''
uvuformat=''
uvxformat=''
pidtype=''
prefix=''
prefixexp=''
installprivlib=''
privlib=''
privlibexp=''
prototype=''
ptrsize=''
d_PRIXU64=''
d_PRId64=''
d_PRIi64=''
d_PRIo64=''
d_PRIu64=''
d_PRIx64=''
sPRIXU64=''
sPRId64=''
sPRIi64=''
sPRIo64=''
sPRIu64=''
sPRIx64=''
d_quad=''
quadkind=''
quadtype=''
uquadtype=''
drand01=''
randbits=''
randfunc=''
randseedtype=''
seedfunc=''
installscript=''
scriptdir=''
scriptdirexp=''
selectminbits=''
selecttype=''
sh=''
targetsh=''
sig_count=''
sig_name=''
sig_name_init=''
sig_num=''
sig_num_init=''
sig_size=''
d_sitearch=''
installsitearch=''
sitearch=''
sitearchexp=''
installsitebin=''
sitebin=''
sitebinexp=''
installsitehtml1dir=''
sitehtml1dir=''
sitehtml1direxp=''
installsitehtml3dir=''
sitehtml3dir=''
sitehtml3direxp=''
installsitelib=''
sitelib=''
sitelib_stem=''
sitelibexp=''
installsiteman1dir=''
siteman1dir=''
siteman1direxp=''
installsiteman3dir=''
siteman3dir=''
siteman3direxp=''
siteprefix=''
siteprefixexp=''
installsitescript=''
sitescript=''
sitescriptexp=''
sizesize=''
sizetype=''
d_libname_unique=''
so=''
socksizetype=''
sharpbang=''
shsharp=''
spitshell=''
src=''
ssizetype=''
st_ino_sign=''
st_ino_size=''
startperl=''
startsh=''
stdchar=''
d_stdio_stream_array=''
stdio_stream_array=''
sysman=''
sGMTIME_max=''
sGMTIME_min=''
sLOCALTIME_max=''
sLOCALTIME_min=''
trnl=''
uidformat=''
uidsign=''
uidsize=''
uidtype=''
archname64=''
use64bitall=''
use64bitint=''
usecbacktrace=''
dtrace=''
usedtrace=''
usefaststdio=''
usekernprocpathname=''
ccflags_uselargefiles=''
ldflags_uselargefiles=''
libswanted_uselargefiles=''
uselargefiles=''
uselongdouble=''
usemorebits=''
usemultiplicity=''
nm_opt=''
nm_so_opt=''
runnm=''
usenm=''
usensgetexecutablepath=''
useperlio=''
usequadmath=''
usesocks=''
d_oldpthreads=''
use5005threads=''
useithreads=''
usereentrant=''
usethreads=''
incpath=''
mips_type=''
usrinc=''
vaproto=''
d_vendorarch=''
installvendorarch=''
vendorarch=''
vendorarchexp=''
d_vendorbin=''
installvendorbin=''
vendorbin=''
vendorbinexp=''
installvendorhtml1dir=''
vendorhtml1dir=''
vendorhtml1direxp=''
installvendorhtml3dir=''
vendorhtml3dir=''
vendorhtml3direxp=''
d_vendorlib=''
installvendorlib=''
vendorlib=''
vendorlib_stem=''
vendorlibexp=''
installvendorman1dir=''
vendorman1dir=''
vendorman1direxp=''
installvendorman3dir=''
vendorman3dir=''
vendorman3direxp=''
usevendorprefix=''
vendorprefix=''
vendorprefixexp=''
d_vendorscript=''
installvendorscript=''
vendorscript=''
vendorscriptexp=''
versiononly=''
yacc=''
yaccflags=''
CONFIG=''

: Detect odd OSs
define='define'
undef='undef'
smallmach='pdp11 i8086 z8000 i80286 iAPX286'
rmlist=''

: We must find out about Eunice early
eunicefix=':'
if test -f /etc/unixtovms; then
	eunicefix=/etc/unixtovms
fi
if test -f /etc/unixtovms.exe; then
	eunicefix=/etc/unixtovms.exe
fi

: Set executable suffix now -- needed before hints available
if test -f "/libs/version.library"; then
: Amiga OS
    _exe=""
elif test -f "/system/gnu_library/bin/ar.pm"; then
: Stratus VOS
    _exe=".pm"
elif test -n "$DJGPP"; then
: DOS DJGPP
    _exe=".exe"
elif test -f /kern/cookiejar; then
: MiNT
    _exe=""
elif test -d c:/. -o -n "$is_os2" ; then
: OS/2 or cygwin
    _exe=".exe"
fi

groupstype=''
i_whoami=''
: Possible local include directories to search.
: Set locincpth to "" in a hint file to defeat local include searches.
locincpth="/usr/local/include /opt/local/include /usr/gnu/include"
locincpth="$locincpth /opt/gnu/include /usr/GNU/include /opt/GNU/include"
:
: no include file wanted by default
inclwanted=''

: Enable -DEBUGGING and -DDEBUGGING from the command line
EBUGGING=''
DEBUGGING=''

: Trailing extension.  Override this in a hint file, if needed.
: Extra object files, if any, needed on this platform.
archobjs=''
libnames=''
: change the next line if compiling for Xenix/286 on Xenix/386
xlibpth='/usr/lib/386 /lib/386'
: Possible local library directories to search.
loclibpth="/usr/local/lib /opt/local/lib /usr/gnu/lib"
loclibpth="$loclibpth /opt/gnu/lib /usr/GNU/lib /opt/GNU/lib"

: general looking path for locating libraries
glibpth="/lib /usr/lib $xlibpth"
glibpth="$glibpth /usr/ccs/lib /usr/ucblib /usr/local/lib"
test -f /usr/shlib/libc.so && glibpth="/usr/shlib $glibpth"
test -f /shlib/libc.so     && glibpth="/shlib $glibpth"
test -d /usr/lib64         && glibpth="$glibpth /lib64 /usr/lib64 /usr/local/lib64"

: Private path used by Configure to find libraries.  Its value
: is prepended to libpth. This variable takes care of special
: machines, like the mips.  Usually, it should be empty.
plibpth=''

: default library list
libswanted=''
: some systems want to use only the non-versioned libso:s
ignore_versioned_solibs=''
ccname=''
ccversion=''
perllibs=''
: set useposix=false in your hint file to disable the POSIX extension.
useposix=true
: set useopcode=false in your hint file to disable the Opcode extension.
useopcode=true
archname64=''
ccflags_uselargefiles=''
ldflags_uselargefiles=''
libswanted_uselargefiles=''
: set usemultiplicity on the Configure command line to enable multiplicity.
: set usesocks on the Configure command line to enable socks.
archname=''
: set usethreads on the Configure command line to enable threads.
usereentrant='undef'
: List of libraries we want.
: If anyone needs extra -lxxx, put those in a hint file.
libswanted="cl pthread socket bind inet nsl ndbm gdbm dbm db malloc dl ld"
libswanted="$libswanted sun m crypt sec util c cposix posix ucb bsd BSD"
: We probably want to search /usr/shlib before most other libraries.
: This is only used by the lib/ExtUtils/MakeMaker.pm routine extliblist.
glibpth=`echo " $glibpth " | sed -e 's! /usr/shlib ! !'`
glibpth="/usr/shlib $glibpth"
: Do not use vfork unless overridden by a hint file.
usevfork=false

: Find the basic shell for Bourne shell scripts
case "$sh" in
'')
	case "$SYSTYPE" in
	*bsd*|sys5*) xxx="/$SYSTYPE/bin/sh";;
	*) xxx='/bin/sh';;
	esac
	if test -f "$xxx"; then
		sh="$xxx"
	else
		: Build up a list and do a single loop so we can 'break' out.
		pth=`echo $PATH | sed -e "s/$p_/ /g"`
		for xxx in sh bash ksh pdksh ash; do
			for p in $pth; do
				try="$try ${p}/${xxx}"
			done
		done
		for xxx in $try; do
			if test -f "$xxx"; then
				sh="$xxx";
				break
			elif test "X$_exe" != X -a -f "$xxx$_exe"; then
				sh="$xxx";
				break
			elif test -f "$xxx.exe"; then
				sh="$xxx";
				break
			fi
		done
	fi
	;;
esac

case "$sh" in
'')	cat >&2 <<EOM
$me:  Fatal Error:  I can't find a Bourne Shell anywhere.

Usually it's in /bin/sh.  How did you even get this far?
Please contact me (Perl Maintainers) at perlbug@@perl.org and
we'll try to straighten this all out.
EOM
	exit 1
	;;
esac

: When cross-compiling we need to separate the sh-to-run-Configure-with from the sh-to-use-in-Perl
: default both to the same thing, cross-compilers can then set targetsh differently if they like
targetsh=$sh

: see if sh knows # comments
if `$sh -c '#' >/dev/null 2>&1`; then
	shsharp=true
	spitshell=cat
	xcat=/bin/cat
	test -f $xcat$_exe || xcat=/usr/bin/cat
	if test ! -f $xcat$_exe; then
		for p in `echo $PATH | sed -e "s/$p_/ /g"` $paths; do
			if test -f $p/cat$_exe; then
				xcat=$p/cat
				break
			fi
		done
		if test ! -f $xcat$_exe; then
			echo "Can't find cat anywhere!"
			exit 1
		fi
	fi
	echo "#!$xcat" >sharp
	$eunicefix sharp
	chmod +x sharp
	./sharp > today 2>/dev/null
	if test -s today; then
		sharpbang='#!'
	else
		echo "#! $xcat" > sharp
		$eunicefix sharp
		chmod +x sharp
		./sharp > today 2>/dev/null
		if test -s today; then
			sharpbang='#! '
		else
			sharpbang=': use '
		fi
	fi
else
	echo " "
	echo "Your $sh doesn't grok # comments--I will strip them later on."
	shsharp=false
	cd ..
	echo "exec grep -v '^[ 	]*#'" >spitshell
	chmod +x spitshell
	$eunicefix spitshell
	spitshell=`pwd`/spitshell
	cd UU
	echo "I presume that if # doesn't work, #! won't work either!"
	sharpbang=': use '
fi
rm -f sharp today

: figure out how to guarantee sh startup
case "$startsh" in
'') startsh=${sharpbang}${sh} ;;
*)
esac
cat >sharp <<EOSS
$startsh
set abc
test "$?abc" != 1
EOSS

chmod +x sharp
$eunicefix sharp
if ./sharp; then
	: echo "Yup, it does."
else
	echo "Hmm... '$startsh' does not guarantee sh startup..."
	echo "You may have to fix up the shell scripts to make sure $sh runs them."
fi
rm -f sharp

: Save command line options in file UU/cmdline.opt for later use in
: generating config.sh.
cat > cmdline.opt <<EOSH
: Configure command line arguments.
config_arg0='$0'
config_args='$*'
config_argc=$#
EOSH
argn=1
args_exp=''
args_sep=''
for arg in "$@@"; do
	cat >>cmdline.opt <<EOSH
config_arg$argn='$arg'
EOSH
	cat <<EOC | sed -e "s/'/'"'"'"'"'"'"'/g" > cmdl.opt
$arg
EOC
	arg_exp=`cat cmdl.opt`
	args_exp="$args_exp$args_sep'$arg_exp'"
	argn=`expr $argn + 1`
	args_sep=' '
done
rm -f cmdl.opt

: produce awk script to parse command line options
cat >options.awk <<'EOF'
BEGIN {
	optstr = "A:dD:eEf:hKOrsSU:V";	# getopt-style specification

	len = length(optstr);
	for (i = 1; i <= len; i++) {
		c = substr(optstr, i, 1);
		if (i < len) a = substr(optstr, i + 1, 1); else a = "";
		if (a == ":") {
			arg[c] = 1;
			i++;
		}
		opt[c] = 1;
	}
}
{
	expect = 0;
	str = $0;
	if (substr(str, 1, 1) != "-") {
		printf("'%s'\n", str);
		next;
	}
	len = length($0);
	for (i = 2; i <= len; i++) {
		c = substr(str, i, 1);
		if (!opt[c]) {
			printf("-%s\n", substr(str, i));
			next;
		}
		printf("-%s\n", c);
		if (arg[c]) {
			if (i < len)
				printf("'%s'\n", substr(str, i + 1));
			else
				expect = 1;
			next;
		}
	}
}
END {
	if (expect)
		print "?";
}
EOF

: process the command line options
set X `for arg in "$@@"; do echo "X$arg"; done |
	sed -e s/X// | awk -f options.awk`
eval "set $*"
shift
rm -f options.awk

: set up default values
fastread=''
reuseval=false
config_sh=''
alldone=''
error=''
silent=''
extractsh=''
knowitall=''
rm -f optdef.sh posthint.sh
cat >optdef.sh <<EOS
$startsh
EOS


: option parsing
while test $# -gt 0; do
	case "$1" in
	-d) shift; fastread=yes;;
	-e) shift; alldone=cont;;
	-f)
		shift
		cd ..
		if test -r "$1"; then
			config_sh="$1"
		else
			echo "$me: cannot read config file $1." >&2
			error=true
		fi
		cd UU
		shift;;
	--help|\
	-h) shift; error=true;;
	-r) shift; reuseval=true;;
	-s) shift; silent=true; realsilent=true;;
	-E) shift; alldone=exit;;
	-K) shift; knowitall=true;;
	-O) shift;;
	-S) shift; silent=true; extractsh=true;;
	-D)
		shift
		case "$1" in
		*=)
			echo "$me: use '-U symbol=', not '-D symbol='." >&2
			echo "$me: ignoring -D $1" >&2
			;;
		*=*) echo "$1" | \
				sed -e "s/'/'\"'\"'/g" -e "s/=\(.*\)/='\1'/" >> optdef.sh;;
		*) echo "$1='define'" >> optdef.sh;;
		esac
		shift
		;;
	-U)
		shift
		case "$1" in
		*=) echo "$1" >> optdef.sh;;
		*=*)
			echo "$me: use '-D symbol=val', not '-U symbol=val'." >&2
			echo "$me: ignoring -U $1" >&2
			;;
		*) echo "$1='undef'" >> optdef.sh;;
		esac
		shift
		;;
	-A)
	    shift
	    xxx=''
	    yyy="$1"
	    zzz=''
	    uuu=undef
	    case "$yyy" in
            *=*) zzz=`echo "$yyy"|sed 's!=.*!!'`
                 case "$zzz" in
                 *:*) zzz='' ;;
                 *)   xxx=append
                      zzz=" "`echo "$yyy"|sed 's!^[^=]*=!!'`
                      yyy=`echo "$yyy"|sed 's!=.*!!'` ;;
                 esac
                 ;;
            esac
            case "$xxx" in
            '')  case "$yyy" in
                 *:*) xxx=`echo "$yyy"|sed 's!:.*!!'`
                      yyy=`echo "$yyy"|sed 's!^[^:]*:!!'`
                      zzz=`echo "$yyy"|sed 's!^[^=]*=!!'`
                      yyy=`echo "$yyy"|sed 's!=.*!!'` ;;
                 *)   xxx=`echo "$yyy"|sed 's!:.*!!'`
                      yyy=`echo "$yyy"|sed 's!^[^:]*:!!'` ;;
                 esac
                 ;;
            esac
	    case "$xxx" in
	    append)
		echo "$yyy=\"\${$yyy}$zzz\""	>> posthint.sh ;;
	    clear)
		echo "$yyy=''"			>> posthint.sh ;;
	    define)
	        case "$zzz" in
		'') zzz=define ;;
		esac
		echo "$yyy='$zzz'"		>> posthint.sh ;;
	    eval)
		echo "eval \"$yyy=$zzz\""	>> posthint.sh ;;
	    prepend)
		echo "$yyy=\"$zzz\${$yyy}\""	>> posthint.sh ;;
	    undef)
	        case "$zzz" in
		'') zzz="$uuu" ;;
		esac
		echo "$yyy=$zzz"		>> posthint.sh ;;
            *)  echo "$me: unknown -A command '$xxx', ignoring -A $1" >&2 ;;
	    esac
	    shift
	    ;;
	-V) echo "$me generated by metaconfig 3.5 PL0." >&2
	    exit 0;;
	--) break;;
	-*) echo "$me: unknown option $1" >&2; shift; error=true;;
	*) break;;
	esac
done

case "$error" in
true)
	cat >&2 <<EOM
Usage: $me [-dehrsEKOSV] [-f config.sh] [-D symbol] [-D symbol=value]
                 [-U symbol] [-U symbol=] [-A command:symbol...]
  -d : use defaults for all answers.
  -e : go on without questioning past the production of config.sh.
  -f : specify an alternate default configuration file.
  -h : print this help message and exit (with an error status).
  -r : reuse C symbols value if possible (skips costly nm extraction).
  -s : silent mode, only echoes questions and essential information.
  -D : define symbol to have some value:
         -D symbol         symbol gets the value 'define'
         -D symbol=value   symbol gets the value 'value'
       common used examples (see INSTALL for more info):
         -Duse64bitint            use 64bit integers
         -Duse64bitall            use 64bit integers and pointers
         -Dusethreads             use thread support
         -Dinc_version_list=none  do not include older perl trees in @@INC
         -DEBUGGING=none          DEBUGGING options
         -Dcc=gcc                 choose your compiler
         -Dprefix=/opt/perl5      choose your destination
  -E : stop at the end of questions, after having produced config.sh.
  -K : do not use unless you know what you are doing.
  -O : ignored for backward compatibility
  -S : perform variable substitutions on all .SH files (can mix with -f)
  -U : undefine symbol:
         -U symbol    symbol gets the value 'undef'
         -U symbol=   symbol gets completely empty
       e.g.:  -Uversiononly
  -A : manipulate symbol after the platform specific hints have been applied:
         -A append:symbol=value   append value to symbol
         -A symbol=value          like append:, but with a separating space
         -A define:symbol=value   define symbol to have value
         -A clear:symbol          define symbol to be ''
         -A define:symbol         define symbol to be 'define'
         -A eval:symbol=value     define symbol to be eval of value
         -A prepend:symbol=value  prepend value to symbol
         -A undef:symbol          define symbol to be 'undef'
         -A undef:symbol=         define symbol to be ''
       e.g.:  -A prepend:libswanted='cl pthread '
              -A ccflags=-DSOME_MACRO
  -V : print version number and exit (with a zero status).
EOM
	exit 1
	;;
esac

: Sanity checks
case "$fastread$alldone" in
yescont|yesexit) ;;
*)
	case "$extractsh" in
	true) ;;
	*)
		if test ! -t 0; then
			echo "Say 'sh Configure', not 'sh <Configure'"
			exit 1
		fi
		;;
	esac
	;;
esac

exec 4>&1
case "$silent" in
true) exec 1>/dev/null;;
esac

: run the defines and the undefines, if any, but leave the file out there...
touch optdef.sh
grep '\\' optdef.sh >/dev/null 2>&1
if test $? = 0; then
    echo "Configure does not support \\ in -D arguments"
    exit 1
fi
. ./optdef.sh
: create the posthint manipulation script and leave the file out there...
touch posthint.sh

: set package name
package='perl5'
first=`echo $package | sed -e 's/^\(.\).*/\1/'`
last=`echo $package | sed -e 's/^.\(.*\)/\1/'`
case "`echo AbyZ | tr '[:lower:]' '[:upper:]' 2>/dev/null`"-"`echo AbyZ | tr '[:upper:]' '[:lower:]' 2>/dev/null`" in
ABYZ-abyz) spackage=`echo $first | tr '[:lower:]' '[:upper:]'`$last;;
*) spackage=`echo $first | tr '[a-z]' '[A-Z]'`$last;;
esac

: Some greps do not return status, grrr.
echo "grimblepritz" >grimble
if grep blurfldyick grimble >/dev/null 2>&1 ; then
	contains=contains
elif grep grimblepritz grimble >/dev/null 2>&1 ; then
	contains=grep
else
	contains=contains
fi
rm -f grimble
: the following should work in any shell
case "$contains" in
contains*)
	echo " "
	echo "AGH!  Grep doesn't return a status.  Attempting remedial action."
	cat >contains <<'EOSS'
grep "$1" "$2" >.greptmp && cat .greptmp && test -s .greptmp
EOSS
chmod +x contains
esac

: Find the path to the source tree
case "$src" in
'') case "$0" in
    */*) src=`echo $0 | sed -e 's%/[^/][^/]*$%%'`
         case "$src" in
	 /*)	;;
	 .)	;;
         *)	src=`cd ../$src && pwd` ;;
	 esac
         ;;
    *)   src='.';;
    esac;;
esac
case "$src" in
'')	src=/
	rsrc=/
	;;
/*)	rsrc="$src";;
*)	rsrc="../$src";;
esac
if test -f $rsrc/Configure && \
	$contains "^package='$package'\$" $rsrc/Configure >/dev/null 2>&1
then
   : found it, so we are ok.
else
	rsrc=''
	for src in . .. ../.. ../../.. ../../../..; do
		if test -f ../$src/Configure && \
			$contains "^package=$package$" ../$src/Configure >/dev/null 2>&1
		then
			rsrc=../$src
			break
		fi
	done
fi
case "$rsrc" in
'')
	cat <<EOM >&4

Sorry, I can't seem to locate the source dir for $package.  Please start
Configure with an explicit path -- i.e. /some/path/Configure.

EOM
	exit 1
	;;
../.)	rsrc='..';;
*)
	echo " "
	echo "Sources for $package found in \"$src\"." >&4
	;;
esac

: script used to extract .SH files with variable substitutions
cat >extract <<'EOS'
PERL_CONFIG_SH=true
echo "Doing variable substitutions on .SH files..."
if test -f MANIFEST; then
	set x `awk '{print $1}' < MANIFEST | grep '\.SH$'`
else
	echo "(Looking for .SH files under the source directory.)"
	set x `(cd "$src"; find . -name "*.SH" -print)`
fi
shift
case $# in
0) set x `(cd "$src"; echo *.SH)`; shift;;
esac
if test ! -f "$src/$1"; then
	shift
fi
mkdir_p='
name=$1;
create="";
while test $name; do
	if test ! -d "$name"; then
		create="$name $create";
		name=`echo $name | sed -e "s|^[^/]*$||"`;
		name=`echo $name | sed -e "s|\(.*\)/.*|\1|"`;
	else
		name="";
	fi;
done;
for file in $create; do
	mkdir $file;
done
'
for file in $*; do
	case "$src" in
	".")
		case "$file" in
		*/*)
			dir=`expr X$file : 'X\(.*\)/'`
			file=`expr X$file : 'X.*/\(.*\)'`
			(cd "$dir" && . ./$file)
			;;
		*)
			. ./$file
			;;
		esac
		;;
	*)
		case "$file" in
		*/*)
			dir=`expr X$file : 'X\(.*\)/'`
			file=`expr X$file : 'X.*/\(.*\)'`
			(set x $dir; shift; eval $mkdir_p)
			sh <"$src/$dir/$file"
			;;
		*)
			sh <"$src/$file"
			;;
		esac
		;;
	esac
done
if test -f "$src/config_h.SH"; then
	if test ! -f config.h; then
	: oops, they left it out of MANIFEST, probably, so do it anyway.
	. "$src/config_h.SH"
	fi
fi
EOS

: extract files and exit if asked to do so
case "$extractsh" in
true)
	case "$realsilent" in
	true) ;;
	*) exec 1>&4;;
	esac
	case "$config_sh" in
	'') config_sh='config.sh';;
	esac
	echo " "
	echo "Fetching answers from $config_sh..."
	cd ..
	. $config_sh
	. UU/optdef.sh
	echo " "
	. UU/extract
	rm -rf UU
	echo "Extraction done."
	exit 0
	;;
esac

: Eunice requires " " instead of "", can you believe it
echo " "
: Here we go...
echo "Beginning of configuration questions for $package."

trap 'echo " "; test -d ../UU && rm -rf X $rmlist; exit 1' 1 2 3 15

: first determine how to suppress newline on echo command
echo " "
echo "Checking echo to see how to suppress newlines..."
(echo "hi there\c" ; echo " ") >.echotmp
if $contains c .echotmp >/dev/null 2>&1 ; then
	echo "...using -n."
	n='-n'
	c=''
else
	cat <<'EOM'
...using \c
EOM
	n=''
	c='\c'
fi
echo $n "The star should be here-->$c"
echo '*'
rm -f .echotmp

: Now test for existence of everything in MANIFEST
echo " "
if test -f "$rsrc/MANIFEST"; then
	echo "First let's make sure your kit is complete.  Checking..." >&4
	awk '$1 !~ /PACK[A-Z]+/ {print $1}' "$rsrc/MANIFEST" | \
		(split -l 50 2>/dev/null || split -50)
	rm -f missing
	tmppwd=`pwd`
	for filelist in x??; do
		(cd "$rsrc"; ls `cat "$tmppwd/$filelist"` \
			>/dev/null 2>>"$tmppwd/missing")
	done
	if test -s missing; then
		cat missing >&4
		cat >&4 <<'EOM'

THIS PACKAGE SEEMS TO BE INCOMPLETE.

You have the option of continuing the configuration process, despite the
distinct possibility that your kit is damaged, by typing 'y'es.  If you
do, don't blame me if something goes wrong.  I advise you to type 'n'o
and contact the author (perlbug@@perl.org).

EOM
		echo $n "Continue? [n] $c" >&4
		read ans
		case "$ans" in
		y*)
			echo "Continuing..." >&4
			rm -f missing
			;;
		*)
			echo "ABORTING..." >&4
			kill $$
			;;
		esac
	else
		echo "Looks good..."
	fi
else
	echo "There is no MANIFEST file.  I hope your kit is complete !"
fi
rm -f missing x??

: Find the appropriate value for a newline for tr
if test -n "$DJGPP"; then
       trnl='\012'
fi
if test X"$trnl" = X; then
	case "`echo foo | tr '\n' x 2>/dev/null`" in
	foox) trnl='\n' ;;
	esac
fi
if test X"$trnl" = X; then
	case "`echo foo | tr '\012' x 2>/dev/null`" in
	foox) trnl='\012' ;;
	esac
fi
if test X"$trnl" = X; then
       case "`echo foo | tr '\r\n' xy 2>/dev/null`" in
       fooxy) trnl='\n\r' ;;
       esac
fi
if test X"$trnl" = X; then
	cat <<EOM >&2

$me: Fatal Error: cannot figure out how to translate newlines with 'tr'.

EOM
	exit 1
fi

: compute the number of columns on the terminal for proper question formatting
case "$COLUMNS" in
'') COLUMNS='80';;
esac

: set up the echo used in my read
myecho="case \"\$xxxm\" in
'') echo $n \"\$rp $c\" >&4;;
*) case \"\$rp\" in
	'') echo $n \"[\$xxxm] $c\";;
	*)
		if test \`echo \"\$rp [\$xxxm]  \" | wc -c\` -ge $COLUMNS; then
			echo \"\$rp\" >&4
			echo $n \"[\$xxxm] $c\" >&4
		else
			echo $n \"\$rp [\$xxxm] $c\" >&4
		fi
		;;
	esac;;
esac"

: now set up to do reads with possible shell escape and default assignment
cat <<EOSC >myread
$startsh
xxxm=\$dflt
$myecho
ans='!'
case "\$fastread" in
yes) case "\$dflt" in
	'') ;;
	*) ans='';
		case "\$silent-\$rp" in
		true-) ;;
		*) echo " " >&4;;
		esac;;
	esac;;
*) case "\$silent" in
	true) case "\$rp" in
		'') ans='';;
		esac;;
	esac;;
esac
while expr "X\$ans" : "X!" >/dev/null; do
	read answ
	set x \$xxxm
	shift
	aok=''; eval "ans=\\"\$answ\\"" && aok=y
	case  "\$answ" in
	"!")
		sh 1>&4
		echo " "
		$myecho
		;;
	!*)
		set x \`expr "X\$ans" : "X!\(.*\)\$"\`
		shift
		sh 1>&4 -c "\$*"
		echo " "
		$myecho
		;;
	"\$ans")
		case "\$ans" in
		\\&*)
			set x \`expr "X\$ans" : "X&\(.*\)\$"\`
			shift
			case "\$1" in
			-d)
				fastread=yes
				echo "(OK, I'll run with -d after this question.)" >&4
				;;
			-*)
				echo "*** Sorry, \$1 not supported yet." >&4
				;;
			esac
			$myecho
			ans=!
			;;
		esac;;
	*)
		case "\$aok" in
		y)
			echo "*** Substitution done -- please confirm."
			xxxm="\$ans"
			ans=\`echo $n "\$ans$c" | tr '$trnl' ' '\`
			xxxm="\$ans"
			ans=!
			;;
		*)
			echo "*** Error -- try again."
			ans=!
			;;
		esac
		$myecho
		;;
	esac
	case "\$ans\$xxxm\$nostick" in
	'')
		ans=!
		$myecho
		;;
	esac
done
case "\$ans" in
'') ans="\$xxxm";;
esac
EOSC

: create .config dir to save info across Configure sessions
test -d ../.config || mkdir ../.config
cat >../.config/README <<EOF
This directory created by Configure to save information that should
persist across sessions for $package.

You may safely delete it if you wish.
EOF

: See if we are using a devel version and want that
xversion=`awk '/define[ 	]+PERL_VERSION/ {print $3}' $rsrc/patchlevel.h`
case "$usedevel" in
$define|true|[yY]*)
    usedevel="$define" ;;
*) case "$xversion" in
   *[13579])
	cat >&4 <<EOH
*** WHOA THERE!!! ***

    This is an UNSTABLE DEVELOPMENT release.
    The version of this $package distribution is $xversion, that is, odd,
    (as opposed to even) and that signifies a development release.
    If you want a maintenance release, you want an even-numbered version.

    Do ***NOT*** install this into production use.
    Data corruption and crashes are possible.

    It is most seriously suggested that you do not continue any further
    unless you want to help in developing and debugging Perl.

    If you *still* want to build perl, you can answer 'y' now,
    or pass -Dusedevel to Configure.

EOH
	rp='Do you really want to continue?'
	dflt='n'
	. ./myread
	case "$ans" in
	[yY]) echo >&4 "Okay, continuing."
	      usedevel="$define" ;;
	*) echo >&4 "Okay, bye."
	   exit 1
	   ;;
	esac
	;;
    esac
    usedevel="$undef"
    ;;
esac
case "$usedevel" in
$define|true|[yY]*)
	case "$versiononly" in
	'') versiononly="$define" ;;
	esac
	case "$installusrbinperl" in
	'') installusrbinperl="$undef" ;;
	esac
	;;
esac

: general instructions
needman=true
firsttime=true
user=`(logname) 2>/dev/null`
case "$user" in
'') user=`whoami 2>&1`;;
esac
if $contains "^$user\$" ../.config/instruct >/dev/null 2>&1; then
	firsttime=false
	echo " "
	rp='Would you like to see the instructions?'
	dflt=n
	. ./myread
	case "$ans" in
	[yY]*) ;;
	*) needman=false;;
	esac
fi
if $needman; then
	cat <<EOH

This installation shell script will examine your system and ask you questions
to determine how the perl5 package should be installed. If you get
stuck on a question, you may use a ! shell escape to start a subshell or
execute a command.  Many of the questions will have default answers in square
brackets; typing carriage return will give you the default.

On some of the questions which ask for file or directory names you are allowed
to use the ~name construct to specify the login directory belonging to "name",
even if you don't have a shell which knows about that.  Questions where this is
allowed will be marked "(~name ok)".

EOH
	rp=''
	dflt='Type carriage return to continue'
	. ./myread
	cat <<'EOH'

The prompter used in this script allows you to use shell variables and
backticks in your answers.  You may use $1, $2, etc...  to refer to the words
in the default answer, as if the default line was a set of arguments given to a
script shell.  This means you may also use $* to repeat the whole default line,
so you do not have to re-type everything to add something to the default.

Every time there is a substitution, you will have to confirm.  If there is an
error (e.g. an unmatched backtick), the default answer will remain unchanged
and you will be prompted again.

If you are in a hurry, you may run 'Configure -d'.  This will bypass nearly all
the questions and use the computed defaults (or the previous answers if there
was already a config.sh file). Type 'Configure -h' for a list of options.
You may also start interactively and then answer '& -d' at any prompt to turn
on the non-interactive behaviour for the remainder of the execution.

EOH
	. ./myread
	cat <<EOH

Much effort has been expended to ensure that this shell script will run on any
Unix system.  If despite that it blows up on yours, your best bet is to edit
Configure and run it again.  If you can't run Configure for some reason,
you'll have to generate a config.sh file by hand.  Whatever problems you
have, let me (perlbug@@perl.org) know how I blew it.

This installation script affects things in two ways:

1) it may do direct variable substitutions on some of the files included
   in this kit.
2) it builds a config.h file for inclusion in C programs.  You may edit
   any of these files as the need arises after running this script.

If you make a mistake on a question, there is no easy way to back up to it
currently.  The easiest thing to do is to edit config.sh and rerun all the SH
files.  Configure will offer to let you do this before it runs the SH files.

EOH
	dflt='Type carriage return to continue'
	. ./myread
	case "$firsttime" in
	true) echo $user >>../.config/instruct;;
	esac
fi

: Set 'sysroot' to change the logical root directory to your headers and libraries see man gcc
: This is primarily meant for cross-compile environments, and may fail to be useful in other cases
if test "X$sysroot" = X; then
    sysroot=""
else
    case "$cc" in
	*gcc*|*g++*)
	    echo "Using $sysroot to find your headers and libraries, adding to ccflags"
	    # _sysroot is used in places where we need --sysroot=foo
	    # but using the rest of the flags could cause issues.
	    _sysroot="--sysroot=$sysroot";
	    case "$ccflags" in
		*sysroot*) ;;
		'undef'|*)
		ccflags="$ccflags $_sysroot"
	    esac
	    case "$ldflags" in
		*sysroot*) ;;
		'undef'|*)
		ldflags="$ldflags $_sysroot"
	    esac
	    case "$cppflags" in
		*sysroot*) ;;
		'undef'|*)
		cppflags="$cppflags $_sysroot"
	    esac
	    # lddlflags updated below in lddlflags section;
	    # same with cccdlflags
	    ;;
    esac

    # Adjust some defaults to also use $sysroot
    for var in xlibpth loclibpth locincpth glibpth; do
	eval xxx=\$$var
	eval $var=''
	for path in $xxx; do
	    eval $var=\"\$$var $sysroot$path\"
	done
    done

fi

: find out where common programs are
echo " "
echo "Locating common programs..." >&4
cat <<EOSC >loc
$startsh
case \$# in
0) exit 1;;
esac
thing=\$1
shift
dflt=\$1
shift
for dir in \$*; do
	case "\$thing" in
	.)
	if test -d \$dir/\$thing; then
		echo \$dir
		exit 0
	fi
	;;
	*)
	for thisthing in \$dir/\$thing; do
		: just loop through to pick last item
	done
	if test -f \$thisthing; then
		echo \$thisthing
		exit 0
	elif test "X$_exe" != X -a -f \$thisthing$_exe; then
		echo \$thisthing
		exit 0
	elif test -f \$dir/\$thing.exe; then
		if test -n "$DJGPP"; then
			echo \$dir/\$thing.exe
		elif test "$eunicefix" != ":"; then
			: on Eunice apparently
			echo \$dir/\$thing
		fi
		exit 0
	fi
	;;
	esac
done
echo \$dflt
exit 1
EOSC
chmod +x loc
$eunicefix loc
loclist="
awk
cat
chmod
comm
cp
echo
expr
grep
ls
mkdir
rm
sed
sort
touch
tr
uniq
"
trylist="
ar
bison
byacc
cpp
csh
date
egrep
gmake
gzip
less
ln
make
more
nm
nroff
perl
pg
test
uname
zip
"
pth=`echo $PATH | sed -e "s/$p_/ /g"`
pth="$pth $sysroot/lib $sysroot/usr/lib"
for file in $loclist; do
	eval xxx=\$$file
	case "$xxx" in
	/*|?:[\\/]*)
		if test -f "$xxx"; then
			: ok
		else
			echo "WARNING: no $xxx -- ignoring your setting for $file." >&4
			xxx=`./loc $file $file $pth`
		fi
		;;
	'') xxx=`./loc $file $file $pth`;;
	*) xxx=`./loc $xxx $xxx $pth`;;
	esac
	eval $file=$xxx$_exe
	eval _$file=$xxx
	case "$xxx" in
	/*)
		echo $file is in $xxx.
		;;
	?:[\\/]*)
		echo $file is in $xxx.
		;;
	*)
		echo "I don't know where '$file' is, and my life depends on it." >&4
		echo "Go find a public domain implementation or fix your PATH setting!" >&4
		exit 1
		;;
	esac
done
echo " "
echo "Don't worry if any of the following aren't found..."
say=offhand
for file in $trylist; do
	eval xxx=\$$file
	case "$xxx" in
	/*|?:[\\/]*)
		if test -f "$xxx"; then
			: ok
		else
			echo "WARNING: no $xxx -- ignoring your setting for $file." >&4
			xxx=`./loc $file $file $pth`
		fi
		;;
	'') xxx=`./loc $file $file $pth`;;
	*) xxx=`./loc $xxx $xxx $pth`;;
	esac
	eval $file=$xxx$_exe
	eval _$file=$xxx
	case "$xxx" in
	/*)
		echo $file is in $xxx.
		;;
	?:[\\/]*)
		echo $file is in $xxx.
		;;
	*)
		echo "I don't see $file out there, $say."
		say=either
		;;
	esac
done
case "$egrep" in
egrep)
	echo "Substituting grep for egrep."
	egrep=$grep
	_egrep=$grep
	;;
esac
case "$less" in
'')	;;
*)	if $less -R </dev/null >/dev/null 2>&1; then
	       echo "Substituting less -R for less."
	       less="$less -R"
	       _less=$less
	fi
	;;
esac
case "$ln" in
ln)
	echo "Substituting cp for ln."
	ln=$cp
	_ln=$cp
	;;
esac
case "$make" in
make)
	case "$gmake" in
	gmake)
	echo "I can't find make or gmake, and my life depends on it." >&4
	echo "Go find a public domain implementation or fix your PATH setting!" >&4
	exit 1
	;;
	esac
	;;
esac
case "$gmake" in
gmake)	;;
*)	# We can't have osname yet.
	if test -f "/system/gnu_library/bin/ar.pm"; then # Stratus VOS
		# Assume that gmake, if found, is definitely GNU make
		# and prefer it over the system make.
		echo "Substituting gmake for make."
		make=$gmake
		_make=$gmake
	fi
	;;
esac
case "$test" in
test)
	echo "Hopefully test is built into your sh."
	;;
*)
	if `sh -c "PATH= test true" >/dev/null 2>&1`; then
		echo "Using the test built into your sh."
		test=test
		_test=test
	fi
	;;
esac
case "$echo" in
echo)
	echo "Hopefully echo is built into your sh."
	;;
'') ;;
*)
	echo " "
echo "Checking compatibility between $echo and builtin echo (if any)..." >&4
	$echo $n "hi there$c" >foo1
	echo $n "hi there$c" >foo2
	if cmp foo1 foo2 >/dev/null 2>&1; then
		echo "They are compatible.  In fact, they may be identical."
	else
		case "$n" in
		'-n') n='' c='\c';;
		*) n='-n' c='';;
		esac
		cat <<FOO
They are not compatible!  You are probably running ksh on a non-USG system.
I'll have to use $echo instead of the builtin, since Bourne shell doesn't
have echo built in and we may have to run some Bourne shell scripts.  That
means I'll have to use '$n$c' to suppress newlines now.  Life is ridiculous.

FOO
		$echo $n "The star should be here-->$c"
		$echo "*"
	fi
	$rm -f foo1 foo2
	;;
esac

# This question was auctioned at YAPC::Europe-2007 in Vienna
# I never promised you could answer it. I only auctioned the question.
cat <<FOO
The following message is sponsored by

  Dresden.pm<--The stars should be here.

Dear Perl user, system administrator or package
maintainer, the Perl community sends greetings to
you. Do you (emblematical) greet back [Y/n]? n

FOO

: Check what type of C compiler we use
cat <<EOS >trygcc
$startsh
EOS
cat <<'EOSC' >>trygcc
case "$cc" in
'') ;;
*)  $rm -f try try.*
    $cat >try.c <<EOM
int main(int argc, char *argv[]) {
  return 0;
}
EOM
    if $cc -o try $ccflags $ldflags try.c; then
       :
    else
        echo "Uh-oh, the C compiler '$cc' doesn't seem to be working." >&4
        despair=yes
        trygcc=yes
        case "$cc" in
        *gcc*) trygcc=no ;;
        esac
	# Skip this test because it gives a false match on output like:
	#    ./trygcc: line 23: cc: command not found
        # case "`$cc -v -c try.c 2>&1`" in
        # *gcc*) trygcc=no ;;
        # esac
        if $test X"$trygcc" = Xyes; then
            if gcc -o try -c try.c; then
                echo " "
                echo "You seem to have a working gcc, though." >&4
		# Switching compilers may undo the work of hints files.
		# The most common problem is -D_REENTRANT for threads.
		# This heuristic catches that case, but gets false positives
		# if -Dusethreads was not actually specified.  Better to
		# bail out here with a useful message than fail
		# mysteriously later. Should we perhaps just try to
		# re-invoke Configure -Dcc=gcc config_args ?
		if $test -f usethreads.cbu; then
			$cat >&4 <<EOM

*** However, any setting of the C compiler flags (e.g. for thread support)
*** will be lost.  It may be necessary for you to restart Configure and
*** add -Dcc=gcc to your Configure command line.

EOM
			rp="Would you like to go ahead and try gcc anyway?"
			dflt=n
		else
			rp="Would you like to use it?"
			dflt=y
		fi
                if $test -f myread; then
                    . ./myread
                else
                    if $test -f UU/myread; then
                        . ./UU/myread
                    else
                        echo "Cannot find myread, sorry.  Aborting." >&2
                        exit 1
                    fi
                fi
                case "$ans" in
                [yY]*) cc=gcc; ccname=gcc; ccflags=''; despair=no;
                esac
            fi
        fi
    fi
    $rm -f try try.*
    ;;
esac
EOSC

cat <<EOS >checkcc
$startsh
EOS
cat <<'EOSC' >>checkcc
case "$cc" in
'') ;;
*)  $rm -f try try.*
    $cat >try.c <<EOM
int main(int argc, char *argv[]) {
  return 0;
}
EOM
    if $cc -o try $ccflags $ldflags try.c; then
       :
    else
        if $test X"$despair" = Xyes; then
           echo "Uh-oh, the C compiler '$cc' doesn't seem to be working." >&4
        fi
        $cat >&4 <<EOM
You need to find a working C compiler.
Either (purchase and) install the C compiler supplied by your OS vendor,
or for a free C compiler try http://gcc.gnu.org/
I cannot continue any further, aborting.
EOM
        exit 1
    fi
    $rm -f try try.*
    ;;
esac
EOSC

: determine whether symbolic links are supported
echo " "
$touch blurfl
if $ln -s blurfl sym > /dev/null 2>&1 ; then
	echo "Symbolic links are supported." >&4
	lns="$ln -s"
else
	echo "Symbolic links are NOT supported." >&4
	lns="$ln"
fi
$rm -f blurfl sym

: determine whether symbolic links are supported
echo " "
case "$lns" in
*"ln"*" -s")
	echo "Checking how to test for symbolic links..." >&4
	$lns blurfl sym
	if $test "X$issymlink" = X; then
		case "$newsh" in
		'') sh     -c "PATH= test -h sym" >/dev/null 2>&1 ;;
		*)  $newsh -c "PATH= test -h sym" >/dev/null 2>&1 ;;
		esac
		if test $? = 0; then
			issymlink="test -h"
		else
			echo "Your builtin 'test -h' may be broken." >&4
			case "$test" in
			/*)	;;
			*)	pth=`echo $PATH | sed -e "s/$p_/ /g"`
				for p in $pth
				do
					if test -f "$p/$test"; then
						test="$p/$test"
						break
					fi
				done
				;;
			esac
			case "$test" in
			/*)
				echo "Trying external '$test -h'." >&4
				issymlink="$test -h"
				if $test ! -h sym >/dev/null 2>&1; then
					echo "External '$test -h' is broken, too." >&4
					issymlink=''
				fi
				;;
			*)	issymlink='' ;;
			esac
		fi
	fi
	if $test "X$issymlink" = X; then
		if $test -L sym 2>/dev/null; then
			issymlink="$test -L"
			echo "The builtin '$test -L' worked." >&4
		fi
	fi
	if $test "X$issymlink" != X; then
		echo "You can test for symbolic links with '$issymlink'." >&4
	else
		echo "I do not know how you can test for symbolic links." >&4
	fi
	$rm -f blurfl sym
	;;
*)	echo "No symbolic links, so not testing for their testing..." >&4
	;;
esac
echo " "

: Make symlinks util
case "$mksymlinks" in
$define|true|[yY]*)
	case "$src" in
	''|'.')	echo "Cannot create symlinks in the original directory." >&4
		exit 1
		;;
	*)	case "$lns:$issymlink" in
		*"ln"*" -s:"*"test -"?)
			echo "Creating the symbolic links..." >&4
			cd ..
			awk '{print $1}' $src/MANIFEST | sed -e 's:/\([^/]*\)$: \1:' |
			awk 'NF == 1 {
				dir=".";
				file=$1 "";
			     }
			     NF == 2 {
				dir=$1 "";
				file=$2 "";
			     }
			     {
				 print "# dir = ", dir, "file = ", file
				 mf[dir] = mf[dir]" "source"/"dir"/"file;
			     } END {
				 for (d in mf) {
				     if (d != ".") { print("mkdir -p "d) }
				     print("ln -sf "mf[d]" "d);
				 }
			     }' source="$src" > UU/mksymlinks.$$
			sh UU/mksymlinks.$$
			rm UU/mksymlinks.$$
			# Sanity check 1.
			if test ! -d t/base; then
				echo "Failed to create the subdirectories.  Aborting." >&4
				exit 1
			fi
			# Sanity check 2.
			if test ! -f t/base/lex.t; then
				echo "Failed to create the symlinks (t/base/lex.t missing).  Aborting." >&4
				exit 1
			fi
			if test ! -f win32/win32.c; then
				echo "Failed to create the symlinks (win32/win32.c missing).  Aborting." >&4
				exit 1
			fi
			cd UU
			;;
		*)	echo "(I cannot figure out how to do symbolic links, ignoring mksymlinks)." >&4
			;;
		esac
		;;
	esac
	;;
esac

: Check for Cross-Compilation
if $test "X$targethost" = "X"; then
    targethost=""
fi
if $test "X$targetenv" = "X"; then
    targetenv=""
fi
case "$usecrosscompile" in
$define|true|[yY]*)
	$echo "Cross-compiling..."
	croak=''
	case "$cc" in
	*-gcc*|*-g++*) # A cross-compiling gcc, probably.
	    # arm-linux-androideabi-gcc  -> arm-linux-androideabi
	    # x86_64-w64-mingw32-gcc.exe -> x86_64-w64-mingw32
	    targetarch=`$echo $cc|$sed 's/-g[c\+][c\+].*$//'`
	    ar=`$echo $cc|$sed 's/-g[c\+][c\+]/-ar/'`
	    # leave out ld, choosing it is more complex
	    nm=`$echo $cc|$sed 's/-g[c\+][c\+]/-nm/'`
	    ranlib=`$echo $cc|$sed 's/-g[c\+][c\+]/-ranlib/'`
	    # We are in a weird spot. Just before us, some values
	    # were 'saved', to be restored after the hints are
	    # run.  This means that the changes we made to ar,
	    # nm and ranlib will get reverted.
	    # To avoid that, we hijack the saving mechanism and
	    # have it save our new values.
	    for file in ar nm ranlib; do
		eval xxx=\$$file
		eval $file=$xxx$_exe
		eval _$file=$xxx
	    done
	;;
	esac
	case "$targetarch" in
	'') echo "Targetarch not defined." >&4; croak=y ;;
	*)  echo "Using targetarch $targetarch." >&4 ;;
	esac
	case "$targethost" in
	'') echo "Targethost not defined." >&4; croak=y ;;
	*)  echo "Using targethost $targethost." >&4
	esac
	locincpth=' '
	loclibpth=' '
	case "$croak" in
	y) echo "Cannot continue, aborting." >&4; exit 1 ;;
	esac
    : compile a host miniperl and generate_uudmap, unless we got passed them
    if $test "X$hostperl" = X; then
      echo "Building host miniperl and generate_uudmap binaries" >&4
      before_host=`pwd`
      cd ..
      cd $src
      src=`pwd`
      rm -rf $src/host
      mkdir $src/host
      cd $src/host
      $src/Configure -des -Dusedevel -Dmksymlinks
      $make miniperl
      case "$hostgenerate" in
      '') $make generate_uudmap
          hostgenerate=$src/host/generate_uudmap
          ;;
       "$undef") hostgenerate=''
          ;;
      esac
      hostperl=$src/host/miniperl
      cd $before_host
    fi
    hostosname=`$hostperl -le 'print $^O'`
    ;;
*)
    usecrosscompile="$undef"
    ;;
esac

: Define -Dtargethost=somecomputer to run compiled tests on another machine
case "$targethost" in
    '') echo "Checking for cross-compile" >&4
    case "$usecrosscompile$multiarch" in
       *$define*) echo "Skipping the try tests in the rest of Configure as no targethost was defined when cross-compiling" >&4
         if [ -f Makefile ]; then
           echo " "
           echo "Now you must ensure config.sh, config.h and the generated headers exist and run a $make."
         else
           echo "Configure done."
         fi
       exit 0
       ;;
     *) echo "No targethost for running compiler tests against defined, running locally" >&4
        run=''
        to=:
        from=:
        ;;
    esac
    ;;
    *) echo "Using targethost $targethost." >&4
	case "$src" in
	/*) run=$src/Cross/run
	    targetmkdir=$src/Cross/mkdir
	    to=$src/Cross/to
	    from=$src/Cross/from
	    ;;
	*)  pwd=`$test -f ../Configure & cd ..; pwd`
	    run=$pwd/Cross/run
	    targetmkdir=$pwd/Cross/mkdir
	    to=$pwd/Cross/to
	    from=$pwd/Cross/from
	    ;;
	esac
	case "$targetrun" in
	'') targetrun=ssh ;;
	esac
	case "$targetto" in
	'') targetto=scp ;;
	esac
	case "$targetfrom" in
	'') targetfrom=scp ;;
	esac
	run=$run-$targetrun
	to=$to-$targetto
	from=$from-$targetfrom
	case "$targetdir" in
	'')  targetdir=/tmp
	     echo "Guessing targetdir $targetdir." >&4
	     ;;
	esac
	case "$targetuser" in
	'')  targetuser=root
	     echo "Guessing targetuser $targetuser." >&4
	     ;;
	esac
	case "$targetport" in
	'')  targetport=22
	     echo "Guessing targetport $targetport." >&4
	     ;;
	esac
	case "$targetfrom" in
	scp)	q=-q ;;
	*)	q='' ;;
	esac
	case "$targetrun" in
	ssh|rsh)
	    cat >$run <<EOF
#!/bin/sh
env=''
case "\$1" in
-cwd)
  shift
  cwd=\$1
  shift
  ;;
esac
case "\$1" in
-env)
  shift
  env=\$1
  shift
  ;;
esac
case "\$cwd" in
'') cwd=$targetdir ;;
esac
exe=\$1
shift
$to \$exe
$targetrun -p $targetport -l $targetuser $targethost "cd \$cwd && \$env \$exe \$@@"
EOF
	    ;;
	adb)
	    $touch $run
	    ;;
	*)  echo "Unknown targetrun '$targetrun'" >&4
	    exit 1
	    ;;
	esac
	case "$targetmkdir" in
	*/Cross/mkdir)
	    cat >$targetmkdir <<EOF
#!/bin/sh
$targetrun -p $targetport -l $targetuser $targethost "mkdir -p \$@@"
EOF
	    $chmod a+rx $targetmkdir
	    ;;
	*)  echo "Unknown targetmkdir '$targetmkdir'" >&4
	    exit 1
	    ;;
	esac
	case "$targetto" in
	scp|rcp)
	    cat >$to <<EOF
#!/bin/sh
for f in \$@@
do
  case "\$f" in
  /*)
    $targetmkdir \`dirname \$f\`
    $targetto -P $targetport -r $q \$f $targetuser@@$targethost:\$f           2>/dev/null  || exit 1
    ;;
  *)
    $targetmkdir $targetdir/\`dirname \$f\`
    $targetto -P $targetport -r $q \$f $targetuser@@$targethost:$targetdir/\$f 2>/dev/null || exit 1
    ;;
  esac
done
exit 0
EOF
	    ;;
	cp) cat >$to <<EOF
#!/bin/sh
for f in \$@@
do
  case "\$f" in
  /*)
    $mkdir -p $targetdir/\`dirname \$f\`
    $cp \$f $targetdir/\$f || exit 1
    ;;
  *)
    $targetmkdir $targetdir/\`dirname \$f\`
    $cp \$f $targetdir/\$f || exit 1
    ;;
  esac
done
exit 0
EOF
	    ;;
	*)  echo "Unknown targetto '$targetto'" >&4
	    exit 1
	    ;;
	esac
	case "$targetfrom" in
	scp|rcp)
	  cat >$from <<EOF
#!/bin/sh
for f in \$@@
do
  $rm -f \$f
  $targetfrom -P $targetport $q $targetuser@@$targethost:$targetdir/\$f . || exit 1
done
exit 0
EOF
	    ;;
	cp) cat >$from <<EOF
#!/bin/sh
for f in \$@@
do
  $rm -f \$f
  cp $targetdir/\$f . || exit 1
done
exit 0
EOF
	    ;;
	*)  echo "Unknown targetfrom '$targetfrom'" >&4
	    exit 1
	    ;;
	esac
	if $test ! -f $run; then
	    echo "Target 'run' script '$run' not found." >&4
	else
	    $chmod a+rx $run
	fi
	if $test ! -f $to; then
	    echo "Target 'to' script '$to' not found." >&4
	else
	    $chmod a+rx $to
	fi
	if $test ! -f $from; then
	    echo "Target 'from' script '$from' not found." >&4
	else
	    $chmod a+rx $from
	fi
	if $test ! -f $run -o ! -f $to -o ! -f $from; then
	    exit 1
	fi
	cat >&4 <<EOF
Using '$run' for remote execution,
and '$from' and '$to'
for remote file transfer.
EOF
	;;
*)	run=''
	to=:
	from=:
	usecrosscompile="$undef"
	targetarch=''
	;;
esac

: see whether [:lower:] and [:upper:] are supported character classes
echo " "
case "`echo AbyZ | $tr '[:lower:]' '[:upper:]' 2>/dev/null`"-"`echo AbyZ | $tr '[:upper:]' '[:lower:]' 2>/dev/null`" in
ABYZ-abyz)
	echo "Good, your tr supports [:lower:] and [:upper:] to convert case." >&4
	up='[:upper:]'
	low='[:lower:]'
	;;
*)	# There is a discontinuity in EBCDIC between 'R' and 'S'
	# (0xd9 and 0xe2), therefore that is a nice testing point.
	if test "X$up" = X -o "X$low" = X; then
	    case "`echo RS | $tr '[R-S]' '[r-s]' 2>/dev/null`" in
	    rs) up='[A-Z]'
		low='[a-z]'
		;;
	    esac
	fi
	if test "X$up" = X -o "X$low" = X; then
	    case "`echo RS | $tr R-S r-s 2>/dev/null`" in
	    rs) up='A-Z'
		low='a-z'
		;;
	    esac
	fi
	if test "X$up" = X -o "X$low" = X; then
	    case "`echo RS | od -x 2>/dev/null`" in
	    *D9E2*|*d9e2*)
		echo "Hey, this might be EBCDIC." >&4
		if test "X$up" = X -o "X$low" = X; then
		    case "`echo RS | $tr '[A-IJ-RS-Z]' '[a-ij-rs-z]' 2>/dev/null`" in
		    rs) up='[A-IJ-RS-Z]'
			low='[a-ij-rs-z]'
			;;
		    esac
		fi
		if test "X$up" = X -o "X$low" = X; then
		    case "`echo RS | $tr A-IJ-RS-Z a-ij-rs-z 2>/dev/null`" in
		    rs) up='A-IJ-RS-Z'
			low='a-ij-rs-z'
			;;
		    esac
		fi
		;;
	    esac
	fi
esac
case "`echo RS | $tr \"$up\" \"$low\" 2>/dev/null`" in
rs)
    echo "Using $up and $low to convert case." >&4
    ;;
*)
    echo "I don't know how to translate letters from upper to lower case." >&4
    echo "Your tr is not acting any way I know of." >&4
    exit 1
    ;;
esac
: set up the translation script tr, must be called with ./tr of course
cat >tr <<EOSC
$startsh
case "\$1\$2" in
'[A-Z][a-z]') exec $tr '$up' '$low';;
'[a-z][A-Z]') exec $tr '$low' '$up';;
esac
exec $tr "\$@@"
EOSC
chmod +x tr
$eunicefix tr

: Try to determine whether config.sh was made on this system
case "$config_sh" in
'')
myuname=`$uname -a 2>/dev/null`
$test -z "$myuname" && myuname=`hostname 2>/dev/null`
# Downcase everything to avoid ambiguity.
# Remove slashes and single quotes so we can use parts of this in
# directory and file names.
# Remove newlines so myuname is sane to use elsewhere.
# tr '[A-Z]' '[a-z]' would not work in EBCDIC
# because the A-Z/a-z are not consecutive.
myuname=`echo $myuname | $sed -e "s,['/],,g" | \
	./tr '[A-Z]' '[a-z]' | $tr $trnl ' '`
newmyuname="$myuname"
dflt=n
case "$knowitall" in
'')
	if test -f ../config.sh; then
		if $contains myuname= ../config.sh >/dev/null 2>&1; then
			eval "`grep myuname= ../config.sh`"
		fi
		if test "X$myuname" = "X$newmyuname"; then
			dflt=y
		fi
	fi
	;;
*) dflt=y;;
esac

: Get old answers from old config file if Configure was run on the
: same system, otherwise use the hints.
hint=default
cd ..
if test -f config.sh; then
	echo " "
	rp="I see a config.sh file.  Shall I use it to set the defaults?"
	. UU/myread
	case "$ans" in
	n*|N*) echo "OK, I'll ignore it."
		mv config.sh config.sh.old
		myuname="$newmyuname"
		;;
	*)  echo "Fetching default answers from your old config.sh file..." >&4
		tmp_n="$n"
		tmp_c="$c"
		tmp_sh="$sh"
		. ./config.sh
		cp config.sh UU
		n="$tmp_n"
		c="$tmp_c"
		: Older versions did not always set $sh.  Catch re-use of such
		: an old config.sh.
		case "$sh" in
		'') sh="$tmp_sh" ;;
		esac
		hint=previous
		;;
	esac
fi
. ./UU/checkcc
if test ! -f config.sh; then
	$cat <<EOM

First time through, eh?  I have some defaults handy for some systems
that need some extra help getting the Configure answers right:

EOM
	(cd $src/hints; ls -C *.sh) | $sed 's/\.sh/   /g' >&4
	dflt=''
	: Half the following guesses are probably wrong... If you have better
	: tests or hints, please send them to perlbug@@perl.org
	: The metaconfig authors would also appreciate a copy...
	$test -f /irix && osname=irix
	$test -f /xenix && osname=sco_xenix
	$test -f /dynix && osname=dynix
	$test -f /dnix && osname=dnix
	$test -f /lynx.os && osname=lynxos
	$test -f /unicos && osname=unicos && osvers=`$uname -r`
	$test -f /unicosmk && osname=unicosmk && osvers=`$uname -r`
	$test -f /unicosmk.ar && osname=unicosmk && osvers=`$uname -r`
	$test -f /bin/mips && /bin/mips && osname=mips
	$test -d /usr/apollo/bin && osname=apollo
	$test -f /etc/saf/_sactab && osname=svr4
	$test -d /usr/include/minix && osname=minix && osvers=`$uname -r`
	$test -f /system/gnu_library/bin/ar.pm && osname=vos
	$test -f /sys/utilities/MultiView && osname=amigaos
	if $test -d /MachTen -o -d /MachTen_Folder; then
		osname=machten
		if $test -x /sbin/version; then
			osvers=`/sbin/version | $awk '{print $2}' |
			$sed -e 's/[A-Za-z]$//'`
		elif $test -x /usr/etc/version; then
			osvers=`/usr/etc/version | $awk '{print $2}' |
			$sed -e 's/[A-Za-z]$//'`
		else
			osvers="$2.$3"
		fi
	fi

	$test -f /sys/posix.dll &&
		$test -f /usr/bin/what &&
		set X `/usr/bin/what /sys/posix.dll` &&
		$test "$3" = UWIN &&
		osname=uwin &&
		osvers="$5"

	if $test -f $uname; then
		set X $myuname
		shift

		case "$5" in
		fps*) osname=fps ;;
		mips*)
			case "$4" in
			umips) osname=umips ;;
			*) osname=mips ;;
			esac;;
		[23]100) osname=mips ;;
		i386*)
			tmp=`/bin/uname -X 2>/dev/null|awk '/3\.2v[45]/{ print $(NF) }'`
			if $test "$tmp" != "" -a "$3" = "3.2" -a -f '/etc/systemid'; then
				osname='sco'
				osvers=$tmp
			elif $test -f /etc/kconfig; then
				osname=isc
				if test "$lns" = "$ln -s"; then
					osvers=4
				elif $contains _SYSV3 /usr/include/stdio.h > /dev/null 2>&1 ; then
					osvers=3
				elif $contains _POSIX_SOURCE /usr/include/stdio.h > /dev/null 2>&1 ; then
					osvers=2
				fi
			fi
			tmp=''
			;;
		pc*)
			if test -n "$DJGPP"; then
				osname=dos
				osvers=djgpp
			fi
			;;
		esac

		case "$1" in
		aix) osname=aix
			tmp=`( (oslevel) 2>/dev/null || echo "not found") 2>&1`
			case "$tmp" in
			# oslevel can fail with:
			# oslevel: Unable to acquire lock.
			*not\ found) osvers="$4"."$3" ;;
			'<3240'|'<>3240') osvers=3.2.0 ;;
			'=3240'|'>3240'|'<3250'|'<>3250') osvers=3.2.4 ;;
			'=3250'|'>3250') osvers=3.2.5 ;;
			*) osvers=$tmp;;
			esac
			;;
		bitrig) osname=bitrig
			osvers="$3"
			;;
		bsd386) osname=bsd386
			osvers=`$uname -r`
			;;
		cygwin*) osname=cygwin
			osvers="$3"
			;;
		*dc.osx) osname=dcosx
			osvers="$3"
			;;
		dnix) osname=dnix
			osvers="$3"
			;;
		domainos) osname=apollo
			osvers="$3"
			;;
		dgux)	osname=dgux
			osvers="$3"
			;;
		dragonfly) osname=dragonfly
			osvers="$3"
			;;
		dynixptx*) osname=dynixptx
			osvers=`echo "$4"|sed 's/^v//'`
			;;
		freebsd) osname=freebsd
			osvers="$3" ;;
		genix)	osname=genix ;;
		gnu)	osname=gnu
			osvers="$3" ;;
		hp*)	osname=hpux
			osvers=`echo "$3" | $sed 's,.*\.\([0-9]*\.[0-9]*\),\1,'`
			;;
		irix*)	osname=irix
			case "$3" in
			4*) osvers=4 ;;
			5*) osvers=5 ;;
			*)	osvers="$3" ;;
			esac
			;;
		linux)	osname=linux
			case "$3" in
			*)	osvers="$3" ;;
			esac
			$test -f /system/lib/libandroid.so && osname=linux-android
			;;
		MiNT)	osname=mint
			;;
		netbsd*) osname=netbsd
			osvers="$3"
			;;
		news-os) osvers="$3"
			case "$3" in
			4*) osname=newsos4 ;;
			*) osname=newsos ;;
			esac
			;;
		nonstop-ux) osname=nonstopux ;;
		openbsd) osname=openbsd
                	osvers="$3"
                	;;
		os2)	osname=os2
			osvers="$4"
			;;
		POSIX-BC | posix-bc ) osname=posix-bc
			osvers="$3"
			;;
		powerux | power_ux | powermax_os | powermaxos | \
		powerunix | power_unix) osname=powerux
			osvers="$3"
			;;
		qnx) osname=qnx
			osvers="$4"
			;;
		solaris) osname=solaris
			case "$3" in
			5*) osvers=`echo $3 | $sed 's/^5/2/g'` ;;
			*)	osvers="$3" ;;
			esac
			;;
		sunos) osname=sunos
			case "$3" in
			5*) osname=solaris
				osvers=`echo $3 | $sed 's/^5/2/g'` ;;
			*)	osvers="$3" ;;
			esac
			;;
		titanos) osname=titanos
			case "$3" in
			1*) osvers=1 ;;
			2*) osvers=2 ;;
			3*) osvers=3 ;;
			4*) osvers=4 ;;
			*)	osvers="$3" ;;
			esac
			;;
		ultrix) osname=ultrix
			osvers="$3"
			;;
		osf1|mls+)	case "$5" in
				alpha)
					osname=dec_osf
					osvers=`sizer -v | awk -FUNIX '{print $2}' | awk '{print $1}' |  tr '[A-Z]' '[a-z]' | sed 's/^[xvt]//'`
					case "$osvers" in
					[1-9].[0-9]*) ;;
					*) osvers=`echo "$3" | sed 's/^[xvt]//'` ;;
					esac
					;;
			hp*)	osname=hp_osf1	;;
			mips)	osname=mips_osf1 ;;
			esac
			;;
		# UnixWare 7.1.2 is known as Open UNIX 8
		openunix|unixware) osname=svr5
			osvers="$4"
			;;
		uts)	osname=uts
			osvers="$3"
			;;
		vos) osvers="$3"
			;;
		$2) case "$osname" in
			*isc*) ;;
			*freebsd*) ;;
			svr*)
				: svr4.x or possibly later
				case "svr$3" in
				${osname}*)
					osname=svr$3
					osvers=$4
					;;
				esac
				case "$osname" in
				svr4.0)
					: Check for ESIX
					if test -f /stand/boot ; then
						eval `grep '^INITPROG=[a-z/0-9]*$' /stand/boot`
						if test -n "$INITPROG" -a -f "$INITPROG"; then
			isesix=`strings -a $INITPROG|grep 'ESIX SYSTEM V/386 Release 4.0'`
							if test -n "$isesix"; then
								osname=esix4
							fi
						fi
					fi
					;;
				esac
				;;
			*)	if test -f /etc/systemid; then
					osname=sco
					set `echo $3 | $sed 's/\./ /g'` $4
					if $test -f $src/hints/sco_$1_$2_$3.sh; then
						osvers=$1.$2.$3
					elif $test -f $src/hints/sco_$1_$2.sh; then
						osvers=$1.$2
					elif $test -f $src/hints/sco_$1.sh; then
						osvers=$1
					fi
				else
					case "$osname" in
					'') : Still unknown.  Probably a generic Sys V.
						osname="sysv"
						osvers="$3"
						;;
					esac
				fi
				;;
			esac
			;;
		*)	case "$osname" in
			'') : Still unknown.  Probably a generic BSD.
				osname="$1"
				osvers="$3"
				;;
			esac
			;;
		esac
	else
		if test -f /vmunix -a -f $src/hints/news_os.sh; then
			(what /vmunix | UU/tr '[A-Z]' '[a-z]') > UU/kernel.what 2>&1
			if $contains news-os UU/kernel.what >/dev/null 2>&1; then
				osname=news_os
			fi
			$rm -f UU/kernel.what
		elif test -d c:/. -o -n "$is_os2" ; then
			set X $myuname
			osname=os2
			osvers="$5"
		fi
	fi

        case "$targetarch" in
        '') ;;
        *)  hostarch=$osname
            case "$targetarch" in
                nto*|*-nto-*)
                    # Will load qnx.sh, which should change osname to nto
                    osname=qnx
                    osvers=''
                    ;;
                *linux-android*)
                    # Catch arm-linux-androideabi, mipsel-linux-android,
                    # and i686-linux-android
                    osname=linux-android
                    osvers=''
                    ;;
                *linux*)
                    # Something like arm-linux-gnueabihf is really just
                    # plain linux.
                    osname=linux
                    osvers=''
                    ;;
                *solaris*|*sunos*)
                    osname=solaris
                    # XXX perhaps we should just assume
                    # osvers to be 2, or maybe take the value
                    # from targetarch. Using $run before the
                    # hints are run is somewhat icky.
                    set X `$run $uname -a 2>/dev/null`
                    shift
                    case "$3" in
                        5*) osvers=`echo $3 | $sed 's/^5/2/g'` ;;
                        *)  osvers="$3" ;;
                    esac
                    ;;
                *)
		    osname=`echo $targetarch|sed 's,^[^-]*-,,'`
		    osvers=''
                ;;
            esac
            ;;
        esac

	: Now look for a hint file osname_osvers, unless one has been
	: specified already.
	case "$hintfile" in
	''|' ')
		file=`echo "${osname}_${osvers}" | $sed -e 's%\.%_%g' -e 's%_$%%'`
		: Also try without trailing minor version numbers.
		xfile=`echo $file | $sed -e 's%_[^_]*$%%'`
		xxfile=`echo $xfile | $sed -e 's%_[^_]*$%%'`
		xxxfile=`echo $xxfile | $sed -e 's%_[^_]*$%%'`
		xxxxfile=`echo $xxxfile | $sed -e 's%_[^_]*$%%'`
		case "$file" in
		'') dflt=none ;;
		*)  case "$osvers" in
			'') dflt=$file
				;;
			*)  if $test -f $src/hints/$file.sh ; then
					dflt=$file
				elif $test -f $src/hints/$xfile.sh ; then
					dflt=$xfile
				elif $test -f $src/hints/$xxfile.sh ; then
					dflt=$xxfile
				elif $test -f $src/hints/$xxxfile.sh ; then
					dflt=$xxxfile
				elif $test -f $src/hints/$xxxxfile.sh ; then
					dflt=$xxxxfile
				elif $test -f "$src/hints/${osname}.sh" ; then
					dflt="${osname}"
				else
					dflt=none
				fi
				;;
			esac
			;;
		esac
		if $test -f Policy.sh ; then
			case "$dflt" in
			*Policy*) ;;
			none) dflt="Policy" ;;
			*) dflt="Policy $dflt" ;;
			esac
		fi
		;;
	*)
		dflt=`echo $hintfile | $sed 's/\.sh$//'`
		;;
	esac

	if $test -f Policy.sh ; then
		$cat <<EOM

There's also a Policy hint file available, which should make the
site-specific (policy) questions easier to answer.
EOM

	fi

	$cat <<EOM

You may give one or more space-separated answers, or "none" if appropriate.
If you have a handcrafted Policy.sh file or a Policy.sh file generated by a
previous run of Configure, you may specify it as well as or instead of
OS-specific hints.  If hints are provided for your OS, you should use them:
although Perl can probably be built without hints on many platforms, using
hints often improve performance and may enable features that Configure can't
set up on its own. If there are no hints that match your OS, specify "none";
DO NOT give a wrong version or a wrong OS.

EOM

	rp="Which of these apply, if any?"
	. UU/myread
	tans=$ans
	for file in $tans; do
		if $test X$file = XPolicy -a -f Policy.sh; then
			. Policy.sh
			$cat Policy.sh >> UU/config.sh
		elif $test -f $src/hints/$file.sh; then
			. $src/hints/$file.sh
			$cat $src/hints/$file.sh >> UU/config.sh
		elif $test X"$tans" = X -o X"$tans" = Xnone ; then
			: nothing
		else
			: Give one chance to correct a possible typo.
			echo "$file.sh does not exist"
			dflt=$file
			rp="hint to use instead?"
			. UU/myread
			for file in $ans; do
				if $test -f "$src/hints/$file.sh"; then
					. $src/hints/$file.sh
					$cat $src/hints/$file.sh >> UU/config.sh
				elif $test X$ans = X -o X$ans = Xnone ; then
					: nothing
				else
					echo "$file.sh does not exist -- ignored."
				fi
			done
		fi
	done

	hint=recommended
	: Remember our hint file for later.
	if $test -f "$src/hints/$file.sh" ; then
		hintfile="$file"
	else
		hintfile=''
	fi
fi
cd UU
;;
*)
	echo " "
	echo "Fetching default answers from $config_sh..." >&4
	tmp_n="$n"
	tmp_c="$c"
	cd ..
	cp $config_sh config.sh 2>/dev/null
	chmod +w config.sh
	. ./config.sh
	cd UU
	cp ../config.sh .
	n="$tmp_n"
	c="$tmp_c"
	hint=previous
	;;
esac
. ./optdef.sh

: Restore computed paths
for file in $loclist $trylist; do
	eval $file="\$_$file"
done

cat << EOM

Configure uses the operating system name and version to set some defaults.
The default value is probably right if the name rings a bell. Otherwise,
since spelling matters for me, either accept the default or answer "none"
to leave it blank.

EOM
case "$osname" in
	''|' ')
		case "$hintfile" in
		''|' '|none) dflt=none ;;
		*)  dflt=`echo $hintfile | $sed -e 's/\.sh$//' -e 's/_.*$//'` ;;
		esac
		;;
	*) dflt="$osname" ;;
esac
rp="Operating system name?"
. ./myread
case "$ans" in
none)  osname='' ;;
*) osname=`echo "$ans" | $sed -e 's/[ 	][	]*/_/g' | ./tr '[A-Z]' '[a-z]'`;;
esac
echo " "
case "$osvers" in
	''|' ')
		case "$hintfile" in
		''|' '|none) dflt=none ;;
		*)	dflt=`echo $hintfile | $sed -e 's/\.sh$//' -e 's/^[^_]*//'`
			dflt=`echo $dflt | $sed -e 's/^_//' -e 's/_/./g'`
			case "$dflt" in
			''|' ') dflt=none ;;
			esac
			;;
		esac
		;;
	*) dflt="$osvers" ;;
esac
rp="Operating system version?"
. ./myread
case "$ans" in
none)  osvers='' ;;
*) osvers="$ans" ;;
esac


. ./posthint.sh

: who configured the system
cf_time=`LC_ALL=C; LANGUAGE=C; export LC_ALL; export LANGUAGE; $date 2>&1`
case "$cf_by" in
"")
	cf_by=`(logname) 2>/dev/null`
	case "$cf_by" in
	"")
		cf_by=`(whoami) 2>/dev/null`
		case "$cf_by" in
		"") cf_by=unknown ;;
		esac ;;
	esac ;;
esac

: decide how portable to be.  Allow command line overrides.
case "$d_portable" in
"$undef") ;;
*)	d_portable="$define" ;;
esac

: set up shell script to do ~ expansion
cat >filexp <<EOSS
$startsh
: expand filename
case "\$1" in
 \~/*|\~)
	echo \$1 | $sed "s|~|\${HOME-\$LOGDIR}|"
	;;
 \~*)
	if $test -f /bin/csh; then
		/bin/csh -f -c "glob \$1"
		failed=\$?
		echo ""
		exit \$failed
	else
		name=\`$expr x\$1 : '..\([^/]*\)'\`
		dir=\`$sed -n -e "/^\${name}:/{s/^[^:]*:[^:]*:[^:]*:[^:]*:[^:]*:\([^:]*\).*"'\$'"/\1/" -e p -e q -e '}' </etc/passwd\`
		if $test ! -d "\$dir"; then
			me=\`basename \$0\`
			echo "\$me: can't locate home directory for: \$name" >&2
			exit 1
		fi
		case "\$1" in
		*/*)
			echo \$dir/\`$expr x\$1 : '..[^/]*/\(.*\)'\`
			;;
		*)
			echo \$dir
			;;
		esac
	fi
	;;
*)
	echo \$1
	;;
esac
EOSS
chmod +x filexp
$eunicefix filexp

: now set up to get a file name
cat <<EOS >getfile
$startsh
EOS
cat <<'EOSC' >>getfile
tilde=''
fullpath=''
already=''
skip=''
none_ok=''
exp_file=''
nopath_ok=''
orig_rp="$rp"
orig_dflt="$dflt"
case "$gfpth" in
'') gfpth='.' ;;
esac

case "$fn" in
*\(*)
	: getfile will accept an answer from the comma-separated list
	: enclosed in parentheses even if it does not meet other criteria.
	expr "$fn" : '.*(\(.*\)).*' | $tr ',' $trnl >getfile.ok
	fn=`echo $fn | sed 's/(.*)//'`
	;;
esac

case "$fn" in
*:*)
	loc_file=`expr $fn : '.*:\(.*\)'`
	fn=`expr $fn : '\(.*\):.*'`
	;;
esac

case "$fn" in
*~*) tilde=true;;
esac
case "$fn" in
*/*) fullpath=true;;
esac
case "$fn" in
*+*) skip=true;;
esac
case "$fn" in
*n*) none_ok=true;;
esac
case "$fn" in
*e*) exp_file=true;;
esac
case "$fn" in
*p*) nopath_ok=true;;
esac

case "$fn" in
*f*) type='File';;
*d*) type='Directory';;
*l*) type='Locate';;
esac

what="$type"
case "$what" in
Locate) what='File';;
esac

case "$exp_file" in
'')
	case "$d_portable" in
	"$define") ;;
	*) exp_file=true;;
	esac
	;;
esac

cd ..
while test "$type"; do
	redo=''
	rp="$orig_rp"
	dflt="$orig_dflt"
	case "$tilde" in
	true) rp="$rp (~name ok)";;
	esac
	. UU/myread
	if test -f UU/getfile.ok && \
		$contains "^$ans\$" UU/getfile.ok >/dev/null 2>&1
	then
		value="$ans"
		ansexp="$ans"
		break
	fi
	case "$ans" in
	none)
		value=''
		ansexp=''
		case "$none_ok" in
		true) type='';;
		esac
		;;
	*)
		case "$tilde" in
		'') value="$ans"
			ansexp="$ans";;
		*)
			value=`UU/filexp $ans`
			case $? in
			0)
				if test "$ans" != "$value"; then
					echo "(That expands to $value on this system.)"
				fi
				;;
			*) value="$ans";;
			esac
			ansexp="$value"
			case "$exp_file" in
			'') value="$ans";;
			esac
			;;
		esac
		case "$fullpath" in
		true)
			case "$ansexp" in
			/*) value="$ansexp" ;;
			[a-zA-Z]:/*) value="$ansexp" ;;
			*)
				redo=true
				case "$already" in
				true)
				echo "I shall only accept a full path name, as in /bin/ls." >&4
				echo "Use a ! shell escape if you wish to check pathnames." >&4
					;;
				*)
				echo "Please give a full path name, starting with slash." >&4
					case "$tilde" in
					true)
				echo "Note that using ~name is ok provided it expands well." >&4
						already=true
						;;
					esac
				esac
				;;
			esac
			;;
		esac
		case "$redo" in
		'')
			case "$type" in
			File)
				for fp in $gfpth; do
					if test "X$fp" = X.; then
					    pf="$ansexp"
					else    
					    pf="$fp/$ansexp"
					fi
					if test -f "$pf"; then
						type=''
					elif test -r "$pf" || (test -h "$pf") >/dev/null 2>&1
					then
						echo "($value is not a plain file, but that's ok.)"
						type=''
					fi
					if test X"$type" = X; then
					    value="$pf"
					    break
					fi
				done
				;;
			Directory)
				for fp in $gfpth; do
					if test "X$fp" = X.; then
					    dir="$ans"
					    direxp="$ansexp"
					else    
					    dir="$fp/$ansexp"
					    direxp="$fp/$ansexp"
					fi
					if test -d "$direxp"; then
						type=''
						value="$dir"
						break
					fi
				done
				;;
			Locate)
				if test -d "$ansexp"; then
					echo "(Looking for $loc_file in directory $value.)"
					value="$value/$loc_file"
					ansexp="$ansexp/$loc_file"
				fi
				if test -f "$ansexp"; then
					type=''
				fi
				case "$nopath_ok" in
				true)	case "$value" in
					*/*) ;;
					*)	echo "Assuming $value will be in people's path."
						type=''
						;;
					esac
					;;
				esac
				;;
			esac

			case "$skip" in
			true) type='';
			esac

			case "$type" in
			'') ;;
			*)
				if test "$fastread" = yes; then
					dflt=y
				else
					dflt=n
				fi
				rp="$what $value doesn't exist.  Use that name anyway?"
				. UU/myread
				dflt=''
				case "$ans" in
				y*) type='';;
				*) echo " ";;
				esac
				;;
			esac
			;;
		esac
		;;
	esac
done
cd UU
ans="$value"
rp="$orig_rp"
dflt="$orig_dflt"
rm -f getfile.ok
test "X$gfpthkeep" != Xy && gfpth=""
EOSC

: determine root of directory hierarchy where package will be installed.
case "$prefix" in
'')
	dflt=`./loc . /usr/local /usr/local /local /opt /usr`
	;;
*?/)
	dflt=`echo "$prefix" | sed 's/.$//'`
	;;
*)
	dflt="$prefix"
	;;
esac
$cat <<EOM

By default, $package will be installed in $dflt/bin, manual pages
under $dflt/man, etc..., i.e. with $dflt as prefix for all
installation directories. Typically this is something like /usr/local.
If you wish to have binaries under /usr/bin but other parts of the
installation under /usr/local, that's ok: you will be prompted
separately for each of the installation directories, the prefix being
only used to set the defaults.

EOM
fn=d~
rp='Installation prefix to use?'
. ./getfile
oldprefix=''
case "$prefix" in
'') ;;
*)
	case "$ans" in
	"$prefix") ;;
	*) oldprefix="$prefix";;
	esac
	;;
esac
prefix="$ans"
prefixexp="$ansexp"

: allow them to override the AFS root
case "$afsroot" in
'')	afsroot=/afs ;;
*)	afsroot=$afsroot ;;
esac

: is AFS running?
echo " "
case "$afs" in
$define|true)	afs=true ;;
$undef|false)	afs=false ;;
*)	if $test -d $afsroot; then
		afs=true
	else
		afs=false
	fi
	;;
esac
if $afs; then
	echo "AFS may be running... I'll be extra cautious then..." >&4
else
	echo "AFS does not seem to be running..." >&4
fi

: determine installation prefix for where package is to be installed.
if $afs; then
$cat <<EOM

Since you are running AFS, I need to distinguish the directory in which
files will reside from the directory in which they are installed (and from
which they are presumably copied to the former directory by occult means).

EOM
	case "$installprefix" in
	'') dflt=`echo $prefix | sed 's#^/afs/#/afs/.#'`;;
	*) dflt="$installprefix";;
	esac
else
$cat <<EOM

In some special cases, particularly when building $package for distribution,
it is convenient to distinguish the directory in which files should be
installed from the directory ($prefix) in which they will
eventually reside.  For most users, these two directories are the same.

EOM
	case "$installprefix" in
	'') dflt=$prefix ;;
	*) dflt=$installprefix;;
	esac
fi
fn=d~
rp='What installation prefix should I use for installing files?'
. ./getfile
installprefix="$ans"
installprefixexp="$ansexp"

: Perform the prefixexp/installprefixexp correction if necessary
cat <<EOS >installprefix
$startsh
EOS
cat <<'EOSC' >>installprefix
: Change installation prefix, if necessary.
if $test X"$prefix" != X"$installprefix"; then
    eval "install${prefixvar}=\`echo \$${prefixvar}exp | sed \"s#^\$prefixexp#\$installprefixexp#\"\`"
else
    eval "install${prefixvar}=\"\$${prefixvar}exp\""
fi
EOSC
chmod +x installprefix
$eunicefix installprefix

: Set variables such as privlib and privlibexp from the output of ./getfile
: performing the prefixexp/installprefixexp correction if necessary.
cat <<EOS >setprefixvar
$startsh
EOS
cat <<'EOSC' >>setprefixvar
eval "${prefixvar}=\"\$ans\""
eval "${prefixvar}exp=\"\$ansexp\""
. ./installprefix
EOSC
chmod +x setprefixvar
$eunicefix setprefixvar

: set up the script used to warn in case of inconsistency
cat <<EOS >whoa
$startsh
EOS
cat <<'EOSC' >>whoa
dflt=y
case "$hint" in
    recommended)
	case "$hintfile" in
	'')	echo "The $hint value for \$$var on this machine was \"$was\"!" >&4
		;;
	*)	echo "Hmm.  Based on the hints in hints/$hintfile.sh, " >&4
		echo "the $hint value for \$$var on this machine was \"$was\"!" >&4
		;;
	esac
	;;
    *)	echo " "
	echo "*** WHOA THERE!!! ***" >&4
	echo "    The $hint value for \$$var on this machine was \"$was\"!" >&4
	;;
esac
rp="    Keep the $hint value?"
. ./myread
case "$ans" in
y) td=$was; tu=$was;;
esac
EOSC

: function used to set '$1' to '$val'
setvar='var=$1; eval "was=\$$1"; td=$define; tu=$undef;
case "$val$was" in
$define$undef) . ./whoa; eval "$var=\$td";;
$undef$define) . ./whoa; eval "$var=\$tu";;
*) eval "$var=$val";;
esac'

: get the patchlevel
echo " "
echo "Getting the current patchlevel..." >&4
if $test -r $rsrc/patchlevel.h;then
	revision=`awk '/define[ 	]+PERL_REVISION/ {print $3}' $rsrc/patchlevel.h`
	patchlevel=`awk '/define[ 	]+PERL_VERSION/ {print $3}' $rsrc/patchlevel.h`
	subversion=`awk '/define[ 	]+PERL_SUBVERSION/ {print $3}' $rsrc/patchlevel.h`
	api_revision=`awk '/define[ 	]+PERL_API_REVISION/ {print $3}' $rsrc/patchlevel.h`
	api_version=`awk '/define[ 	]+PERL_API_VERSION/ {print $3}' $rsrc/patchlevel.h`
	api_subversion=`awk '/define[ 	]+PERL_API_SUBVERSION/ {print $3}' $rsrc/patchlevel.h`
	perl_patchlevel=`egrep ',"(MAINT|SMOKE)[0-9][0-9]*"' $rsrc/patchlevel.h|tail -1|sed 's/[^0-9]//g'`
else
	revision=0
	patchlevel=0
	subversion=0
	api_revision=0
	api_version=0
	api_subversion=0
	perl_patchlevel=0
	$echo "(You do not have patchlevel.h.  Eek.)"
fi
: Define a handy string here to avoid duplication in myconfig.SH and configpm.
version_patchlevel_string="version $patchlevel subversion $subversion"
case "$perl_patchlevel" in
0|'') ;;
*)  perl_patchlevel=`echo $perl_patchlevel | sed 's/.* //'`
    version_patchlevel_string="$version_patchlevel_string patch $perl_patchlevel"
    ;;
esac

$echo "(You have $package $version_patchlevel_string.)"

case "$osname" in
dos|vms)
	: XXX Should be a Configure test for double-dots in filenames.
	version=`echo $revision $patchlevel $subversion | \
		 $awk '{ printf "%d_%d_%d", $1, $2, $3 }'`
	api_versionstring=`echo $api_revision $api_version $api_subversion | \
		 $awk '{ printf "%d_%d_%d", $1, $2, $3 }'`
	;;
*)
	version=`echo $revision $patchlevel $subversion | \
		 $awk '{ printf "%d.%d.%d", $1, $2, $3 }'`
	api_versionstring=`echo $api_revision $api_version $api_subversion | \
		 $awk '{ printf "%d.%d.%d", $1, $2, $3 }'`
	;;
esac
: Special case the 5.005_xx maintenance series, which used 5.005
: without any subversion label as a subdirectory in $sitelib
if test "${api_revision}${api_version}${api_subversion}" = "550"; then
	api_versionstring='5.005'
fi

: Do we want threads support and if so, what type
case "$usethreads" in
$define|true|[yY]*)     dflt='y';;
*)     # Catch case where user specified ithreads or 5005threads but
       # forgot -Dusethreads (A.D. 4/2002)
       case "$useithreads$use5005threads" in
       *$define*)	dflt='y';;
       *)		dflt='n';;
       esac
       ;;
esac
cat <<EOM

Perl can be built to offer a form of threading support on some systems
To do so, Configure can be run with -Dusethreads.

Note that Perl built with threading support runs slightly slower
and uses slightly more memory than plain Perl.

If this doesn't make any sense to you, just accept the default '$dflt'.
EOM
rp='Build a threading Perl?'
. ./myread
case "$ans" in
y|Y)    val="$define" ;;
*)      val="$undef" ;;
esac
set usethreads
eval $setvar

if $test $patchlevel -lt 9; then
    case "$usethreads" in
    $define)
	: Default to ithreads unless overridden on command line or with
	: old config.sh
	dflt='y'
	case "$use5005threads" in
		$define|true|[yY]*)
			echo "5.005 threads are no longer supported"
			exit 1
		;;
	esac
	case "$useithreads" in
		$undef|false|[nN]*) dflt='n';;
	esac
	rp='Use the newer interpreter-based ithreads?'
	. ./myread
	case "$ans" in
	y|Y)    val="$define" ;;
	*)      val="$undef" ;;
	esac
	set useithreads
	eval $setvar
	: Now set use5005threads to the opposite value.
	case "$useithreads" in
	$define) val="$undef" ;;
	*) val="$define" ;;
	esac
	set use5005threads
	eval $setvar
	;;
    *)
	useithreads="$undef"
	use5005threads="$undef"
	;;
    esac

    case "$useithreads$use5005threads" in
    "$define$define")
	$cat >&4 <<EOM

You cannot have both the ithreads and the 5.005 threads enabled
at the same time.  Disabling the 5.005 threads since they are
much less stable than the ithreads.

EOM
	use5005threads="$undef"
	;;
    esac

else
: perl-5.9.x and later

    if test X"$usethreads" = "X$define"; then
	case "$use5005threads" in
	    $define|true|[yY]*)
		$cat >&4 <<EOM

5.005 threads has been removed for 5.10.  Perl will be built using ithreads.

EOM
	    ;;
	esac
    fi

    use5005threads="$undef"
    useithreads="$usethreads"
fi

case "$d_oldpthreads" in
'')	: Configure tests would be welcome here.  For now, assume undef.
	val="$undef" ;;
*)	val="$d_oldpthreads" ;;
esac
set d_oldpthreads
eval $setvar


: Look for a hint-file generated 'call-back-unit'.  If the
: user has specified that a threading perl is to be built,
: we may need to set or change some other defaults.
if $test -f usethreads.cbu; then
    echo "Your platform has some specific hints regarding threaded builds, using them..."
    . ./usethreads.cbu
else
    case "$usethreads" in
	"$define"|true|[yY]*)
		$cat <<EOM
(Your platform does not have any specific hints for threaded builds.
 Assuming POSIX threads, then.)
EOM
	;;
    esac
fi

: Check if multiplicity is required
cat <<EOM

Perl can be built so that multiple Perl interpreters can coexist
within the same Perl executable.
EOM

case "$useithreads" in
$define)
	cat <<EOM
This multiple interpreter support is required for interpreter-based threads.
EOM
	val="$define"
	;;
*)	case "$usemultiplicity" in
	$define|true|[yY]*)	dflt='y';;
	*) dflt='n';;
	esac
	echo " "
	echo "If this doesn't make any sense to you, just accept the default '$dflt'."
	rp='Build Perl for multiplicity?'
	. ./myread
	case "$ans" in
	y|Y)	val="$define" ;;
	*)      val="$undef" ;;
	esac
	;;
esac
set usemultiplicity
eval $setvar

: Check if morebits is requested
case "$usemorebits" in
"$define"|true|[yY]*)
	use64bitint="$define"
	uselongdouble="$define"
	usemorebits="$define"
	;;
*)	usemorebits="$undef"
	;;
esac

: Determine the C compiler to be used
echo " "
case "$cc" in
'') dflt=cc;;
*) dflt="$cc";;
esac
rp="Use which C compiler?"
. ./myread
cc="$ans"

: See whether they have no cc but they do have gcc
. ./trygcc
if $test -f cc.cbu; then
    . ./cc.cbu
fi
. ./checkcc

: make some quick guesses about what we are up against
echo " "
$echo $n "Hmm...  $c"
echo exit 1 >bsd
echo exit 1 >usg
echo exit 1 >v7
echo exit 1 >osf1
echo exit 1 >eunice
echo exit 1 >xenix
echo exit 1 >venix
echo exit 1 >os2
d_bsd="$undef"
$cat $sysroot/usr/include/signal.h $sysroot/usr/include/sys/signal.h >foo 2>/dev/null
if test -f /osf_boot || $contains 'OSF/1' $sysroot/usr/include/ctype.h >/dev/null 2>&1
then
	echo "Looks kind of like an OSF/1 system, but we'll see..."
	echo exit 0 >osf1
elif test `echo abc | $tr a-z A-Z` = Abc ; then
	xxx=`./loc addbib blurfl $pth`
	if $test -f $xxx; then
	echo "Looks kind of like a USG system with BSD features, but we'll see..."
		echo exit 0 >bsd
		echo exit 0 >usg
	else
		if $contains SIGTSTP foo >/dev/null 2>&1 ; then
			echo "Looks kind of like an extended USG system, but we'll see..."
		else
			echo "Looks kind of like a USG system, but we'll see..."
		fi
		echo exit 0 >usg
	fi
elif $contains SIGTSTP foo >/dev/null 2>&1 ; then
	echo "Looks kind of like a BSD system, but we'll see..."
	d_bsd="$define"
	echo exit 0 >bsd
else
	echo "Looks kind of like a Version 7 system, but we'll see..."
	echo exit 0 >v7
fi
case "$eunicefix" in
*unixtovms*)
	$cat <<'EOI'
There is, however, a strange, musty smell in the air that reminds me of
something...hmm...yes...I've got it...there's a VMS nearby, or I'm a Blit.
EOI
	echo exit 0 >eunice
	d_eunice="$define"
: it so happens the Eunice I know will not run shell scripts in Unix format
	;;
*)
	echo " "
	echo "Congratulations.  You aren't running Eunice."
	d_eunice="$undef"
	;;
esac
: Detect OS2.  The p_ variable is set above in the Head.U unit.
: Note that this also -- wrongly -- detects e.g. dos-djgpp, which also uses
: semicolon as a patch separator
case "$p_" in
:) ;;
*)
	$cat <<'EOI'
I have the feeling something is not exactly right, however...don't tell me...
lemme think...does HAL ring a bell?...no, of course, you're only running OS/2!
(Or you may be running DOS with DJGPP.)
EOI
	echo exit 0 >os2
	;;
esac
if test -f /xenix; then
	echo "Actually, this looks more like a XENIX system..."
	echo exit 0 >xenix
	d_xenix="$define"
else
	echo " "
	echo "It's not Xenix..."
	d_xenix="$undef"
fi
chmod +x xenix
$eunicefix xenix
if test -f /venix; then
	echo "Actually, this looks more like a VENIX system..."
	echo exit 0 >venix
else
	echo " "
	if ./xenix; then
		: null
	else
		echo "Nor is it Venix..."
	fi
fi
chmod +x bsd usg v7 osf1 eunice xenix venix os2
$eunicefix bsd usg v7 osf1 eunice xenix venix os2
$rm -f foo

: Check if we are using GNU gcc and what its version is
echo " "
echo "Checking for GNU cc in disguise and/or its version number..." >&4
$cat >try.c <<EOM
#include <stdio.h>
int main() {
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
#ifdef __VERSION__
	printf("%s\n", __VERSION__);
#else
	printf("%s\n", "1");
#endif
#endif
	return(0);
}
EOM
if $cc -o try $ccflags $ldflags try.c; then
	gccversion=`$run ./try`
	case "$gccversion" in
	'') echo "You are not using GNU cc." ;;
	*)  echo "You are using GNU cc $gccversion."
	    ccname=gcc
	    ;;
	esac
else
	echo " "
	echo "*** WHOA THERE!!! ***" >&4
	echo "    Your C compiler \"$cc\" doesn't seem to be working!" >&4
	case "$knowitall" in
	'')
	echo "    You'd better start hunting for one and let me know about it." >&4
		exit 1
		;;
	esac
fi
$rm -f try try.*
case "$gccversion" in
1*) cpp=`./loc gcc-cpp $cpp $pth` ;;
esac
case "$gccversion" in
'') gccosandvers='' ;;
*) gccshortvers=`echo "$gccversion"|sed 's/ .*//'`
   gccosandvers=`$cc -v 2>&1|grep '/specs$'|sed "s!.*/[^-/]*-[^-/]*-\([^-/]*\)/$gccshortvers/specs!\1!"`
   gccshortvers=''
   case "$gccosandvers" in
   $osname) gccosandvers='' ;; # linux gccs seem to have no linux osvers, grr
   $osname$osvers) ;; # looking good
   $osname*) cat <<EOM >&4

*** WHOA THERE!!! ***

    Your gcc has not been compiled for the exact release of
    your operating system ($gccosandvers versus $osname$osvers).

    In general it is a good idea to keep gcc synchronized with
    the operating system because otherwise serious problems
    may ensue when trying to compile software, like Perl.

    I'm trying to be optimistic here, though, and will continue.
    If later during the configuration and build icky compilation
    problems appear (headerfile conflicts being the most common
    manifestation), I suggest reinstalling the gcc to match
    your operating system release.

EOM
      ;;
   *) gccosandvers='' ;; # failed to parse, better be silent
   esac
   ;;
esac
case "$ccname" in
'') ccname="$cc" ;;
esac

# gcc 3.* complain about adding -Idirectories that they already know about,
# so we will take those off from locincpth.
case "$gccversion" in
3*)
    echo "main(){}">try.c
    for incdir in $locincpth; do
       warn=`$cc $ccflags -I$incdir -c try.c 2>&1 | \
	     grep '^c[cp]p*[01]: warning: changing search order '`
       if test "X$warn" != X; then
	   locincpth=`echo " $locincpth " | sed "s! $incdir ! !"`
       fi
    done
    $rm -f try try.*
esac

# gcc 4.9 by default does some optimizations that break perl.
# see ticket 121505.
#
# The -fwrapv disables those optimizations (and probably others,) so
# for gcc 4.9 (and later, since the optimizations probably won't go
# away), add -fwrapv unless the user requests -fno-wrapv, which
# disables -fwrapv, or if the user requests -fsanitize=undefined,
# which turns the overflows -fwrapv ignores into runtime errors.
case "$gccversion" in
4.[3-9].*|4.[1-9][0-9]*|[5-9].*|[1-9][0-9]*)
    case "$ccflags" in
    *-fno-wrapv*|*-fsanitize=undefined*|*-fwrapv*) ;;
    *) ccflags="$ccflags -fwrapv" ;;
    esac
esac

: What should the include directory be ?
: Use sysroot if set, so findhdr looks in the right place.
echo " "
$echo $n "Hmm...  $c"
dflt="$sysroot/usr/include"
incpath=''
mips_type=''
if $test -f /bin/mips && /bin/mips; then
	echo "Looks like a MIPS system..."
	$cat >usr.c <<'EOCP'
#ifdef SYSTYPE_BSD43
/bsd43
#endif
EOCP
	if $cc $cppflags -E usr.c > usr.out && $contains / usr.out >/dev/null 2>&1; then
		dflt='/bsd43/usr/include'
		incpath='/bsd43'
		mips_type='BSD 4.3'
	else
		mips_type='System V'
	fi
	$rm -f usr.c usr.out
	echo "and you're compiling with the $mips_type compiler and libraries."
	xxx_prompt=y
	echo "exit 0" >mips
else
	echo "Doesn't look like a MIPS system."
	xxx_prompt=n
	echo "exit 1" >mips
fi
chmod +x mips
$eunicefix mips
case "$usrinc" in
'') ;;
*) dflt="$usrinc";;
esac
case "$xxx_prompt" in
y)	fn=d/
	echo " "
	rp='Where are the include files you want to use?'
	. ./getfile
	usrinc="$ans"
	;;
*)	usrinc="$dflt"
	;;
esac

: see how we invoke the C preprocessor
echo " "
echo "Now, how can we feed standard input to your C preprocessor..." >&4
cat <<'EOT' >testcpp.c
#define ABC abc
#define XYZ xyz
ABC.XYZ
EOT
cd ..
if test ! -f cppstdin; then
	if test "X$osname" = "Xaix" -a "X$gccversion" = X; then
		# AIX cc -E doesn't show the absolute headerfile
		# locations but we'll cheat by using the -M flag.
		echo 'cat >.$$.c; rm -f .$$.u; '"$cc"' ${1+"$@@"} -M -c .$$.c 2>/dev/null; test -s .$$.u && awk '"'"'$2 ~ /\.h$/ { print "# 0 \""$2"\"" }'"'"' .$$.u; rm -f .$$.o .$$.u; '"$cc"' -E ${1+"$@@"} .$$.c; rm .$$.c' > cppstdin
	else
		echo 'cat >.$$.c; '"$cc $cppflags"' -E ${1+"$@@"} .$$.c; rm .$$.c' >cppstdin
	fi
else
	echo "Keeping your $hint cppstdin wrapper."
fi
chmod 755 cppstdin
wrapper=`pwd`/cppstdin
ok='false'
cd UU

if $test "X$cppstdin" != "X" && \
	$cppstdin $cppminus <testcpp.c >testcpp.out 2>&1 && \
	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1
then
	echo "You used to use $cppstdin $cppminus so we'll use that again."
	case "$cpprun" in
	'') echo "But let's see if we can live without a wrapper..." ;;
	*)
		if $cpprun $cpplast <testcpp.c >testcpp.out 2>&1 && \
			$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1
		then
			echo "(And we'll use $cpprun $cpplast to preprocess directly.)"
			ok='true'
		else
			echo "(However, $cpprun $cpplast does not work, let's see...)"
		fi
		;;
	esac
else
	case "$cppstdin" in
	'') ;;
	*)
		echo "Good old $cppstdin $cppminus does not seem to be of any help..."
		;;
	esac
fi

if $ok; then
	: nothing
elif echo 'Maybe "'"$cc"' -E" will work...'; \
	$cc -E <testcpp.c >testcpp.out 2>&1; \
	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
	echo "Yup, it does."
	x_cpp="$cc $cppflags -E"
	x_minus='';
elif echo 'Nope...maybe "'"$cc"' -E -" will work...'; \
	$cc -E - <testcpp.c >testcpp.out 2>&1; \
	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
	echo "Yup, it does."
	x_cpp="$cc $cppflags -E"
	x_minus='-';
elif echo 'Nope...maybe "'"$cc"' -P" will work...'; \
	$cc -P <testcpp.c >testcpp.out 2>&1; \
	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
	echo "Yipee, that works!"
	x_cpp="$cc $cppflags -P"
	x_minus='';
elif echo 'Nope...maybe "'"$cc"' -P -" will work...'; \
	$cc -P - <testcpp.c >testcpp.out 2>&1; \
	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
	echo "At long last!"
	x_cpp="$cc $cppflags -P"
	x_minus='-';
elif echo 'No such luck, maybe "'$cpp'" will work...'; \
	$cpp <testcpp.c >testcpp.out 2>&1; \
	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
	echo "It works!"
	x_cpp="$cpp $cppflags"
	x_minus='';
elif echo 'Nixed again...maybe "'$cpp' -" will work...'; \
	$cpp - <testcpp.c >testcpp.out 2>&1; \
	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
	echo "Hooray, it works!  I was beginning to wonder."
	x_cpp="$cpp $cppflags"
	x_minus='-';
elif echo 'Uh-uh.  Time to get fancy.  Trying a wrapper...'; \
	$wrapper <testcpp.c >testcpp.out 2>&1; \
	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
	x_cpp="$wrapper"
	x_minus=''
	echo "Eureka!"
else
	dflt=''
	rp="No dice.  I can't find a C preprocessor.  Name one:"
	. ./myread
	x_cpp="$ans"
	x_minus=''
	$x_cpp <testcpp.c >testcpp.out 2>&1
	if $contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
		echo "OK, that will do." >&4
	else
echo "Sorry, I can't get that to work.  Go find one and rerun Configure." >&4
		exit 1
	fi
fi

case "$ok" in
false)
	cppstdin="$x_cpp"
	cppminus="$x_minus"
	cpprun="$x_cpp"
	cpplast="$x_minus"
	set X $x_cpp
	shift
	case "$1" in
	"$cpp")
		echo "Perhaps can we force $cc -E using a wrapper..."
		if $wrapper <testcpp.c >testcpp.out 2>&1; \
			$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1
		then
			echo "Yup, we can."
			cppstdin="$wrapper"
			cppminus='';
		else
			echo "Nope, we'll have to live without it..."
		fi
		;;
	esac
	case "$cpprun" in
	"$wrapper")
		cpprun=''
		cpplast=''
		;;
	esac
	;;
esac

case "$cppstdin" in
"$wrapper"|'cppstdin') ;;
*) $rm -f $wrapper;;
esac
$rm -f testcpp.c testcpp.out

: Adjust cppfilter for path component separator
case "$osname" in
vos) cppfilter="tr '\\\\>' '/' |" ;; # path component separator is >
os2) cppfilter="sed -e 's|\\\\\\\\|/|g' |" ;; # path component separator is \
*)   cppfilter='' ;;
esac

: Use gcc to determine libpth and incpth
# If using gcc or clang, we can get better values for libpth, incpth
# and usrinc directly from the compiler.
# Note that ccname for clang is also gcc.
case "$ccname" in
    gcc)
	$echo 'extern int foo;' > try.c
	set X `$cppstdin -v try.c 2>&1 | $awk '/^#include </,/^End of search /'|$cppfilter $grep '/include'`
	shift
	if $test $# -gt 0; then
	    incpth="$incpth $*"
	    incpth="`$echo $incpth|$sed 's/^ //'`"
	    for i in $*; do
		j="`$echo $i|$sed 's,/include$,/lib,'`"
		if $test -d $j; then
		    libpth="$libpth $j"
		fi
	    done
	    libpth="`$echo $libpth|$sed 's/^ //'`"
	    for xxx in $libpth $loclibpth $plibpth $glibpth; do
		if $test -d $xxx; then
		    case " $libpth " in
		    *" $xxx "*) ;;
		    *) libpth="$libpth $xxx";;
		    esac
		fi
	    done
	fi
	$rm -f try.c
	case "$usrinc" in
	'') for i in $incpth; do
		if $test -f $i/errno.h -a -f $i/stdio.h -a -f $i/time.h; then
		    usrinc="$i"
		    break
		fi
	    done
	    ;;
	esac

	case "$usecrosscompile" in
	$define|true|[yY]*)
	    case "$incpth" in
		'') echo "Incpth not defined." >&4; croak=y ;;
		*)  echo "Using incpth '$incpth'." >&4 ;;
	    esac
	    case "$libpth" in
		'') echo "Libpth not defined." >&4; croak=y ;;
		*)  echo "Using libpth '$libpth'." >&4 ;;
	    esac
	    case "$usrinc" in
		'') echo "Usrinc not defined." >&4; croak=y ;;
		*)  echo "Using usrinc $usrinc." >&4 ;;
	    esac
	    case "$croak" in
		y)
		if test "X$sysroot" = X; then
		    echo "Cannot continue, aborting." >&4; exit 1
		else
		    echo "Cross-compiling using sysroot $sysroot, failing to guess inc/lib paths is not fatal" >&4
		fi
		;;
	    esac
	    ;;
	esac
    ;;
esac

: Default value for incpth is just usrinc
case "$incpth" in
'') incpth="$usrinc";;
esac

: Set private lib path
case "$plibpth" in
'') if ./mips; then
	plibpth="$incpath/usr/lib $sysroot/usr/local/lib $sysroot/usr/ccs/lib"
    fi;;
esac
case "$libpth" in
' ') dlist='';;
'') dlist="$loclibpth $plibpth $glibpth";;
*) dlist="$libpth";;
esac

: Now check and see which directories actually exist, avoiding duplicates
for xxx in $dlist
do
    if $test -d $xxx; then
		case " $libpth " in
		*" $xxx "*) ;;
		*) libpth="$libpth $xxx";;
		esac
    fi
done
$cat <<'EOM'

Some systems have incompatible or broken versions of libraries.  Among
the directories listed in the question below, please remove any you
know not to be holding relevant libraries, and add any that are needed.
Say "none" for none.

EOM

if test "X$sysroot" != X; then
    $cat <<EOM
You have set sysroot to $sysroot, please supply the directories excluding sysroot

EOM
fi

case "$libpth" in
'') dflt='none';;
*)
	set X $libpth
	shift
	dflt=${1+"$@@"}
	;;
esac
rp="Directories to use for library searches?"
. ./myread
case "$ans" in
none) libpth=' ';;
*) libpth="$ans";;
esac

: compute shared library extension
case "$so" in
'')
	if xxx=`./loc libc.sl X $libpth`; $test -f "$xxx"; then
		dflt='sl'
	else
		dflt='so'
	fi
	;;
*) dflt="$so";;
esac
$cat <<EOM

On some systems, shared libraries may be available.  Answer 'none' if
you want to suppress searching of shared libraries for the remainder
of this configuration.

EOM
rp='What is the file extension used for shared libraries?'
. ./myread
so="$ans"

: Does target system insist that shared library basenames are unique
$cat << EOM

Some dynamic loaders assume that the *basename* of shared library filenames
are globally unique.  We'll default this to undef as we assume your system
is not this weird. Set to defined if you're on one of them.

EOM

dflt='n'
rp='Make shared library basenames unique?'
. ./myread
case "$ans" in
y|Y) val="$define" ;;
*)   val="$undef"  ;;
esac
set d_libname_unique
eval $setvar

: Define several unixisms.
: Hints files or command line option can be used to override them.
: The convoluted testing is in case hints files set either the old
: or the new name.
case "$_exe" in
'')	case "$exe_ext" in
	'')	;;
	*)	_exe="$exe_ext" ;;
	esac
	;;
esac
case "$_a" in
'')	case "$lib_ext" in
    '')	_a='.a';;
	*)	_a="$lib_ext" ;;
	esac
	;;
esac
case "$_o" in
'') case "$obj_ext" in
	'')	_o='.o';;
	*)	_o="$obj_ext";;
	esac
	;;
esac
case "$p_" in
'') case "$path_sep" in
	'')	p_=':';;
	*)	p_="$path_sep";;
	esac
	;;
esac
exe_ext=$_exe
lib_ext=$_a
obj_ext=$_o
path_sep=$p_

rm_try="$rm -f try try$_exe a.out .out try.[cho] try.$_o core core.try* try.core*"

: Which makefile gets called first.  This is used by make depend.
case "$firstmakefile" in
'') firstmakefile='makefile';;
esac

: Check is we will use socks
case "$usesocks" in
$define|true|[yY]*)	dflt='y';;
*) dflt='n';;
esac
cat <<EOM

Perl can be built to use the SOCKS proxy protocol library.  To do so,
Configure must be run with -Dusesocks.  If you use SOCKS you also need
to use the PerlIO abstraction layer, this will be implicitly selected.

If this doesn't make any sense to you, just accept the default '$dflt'.
EOM
rp='Build Perl for SOCKS?'
. ./myread
case "$ans" in
y|Y)	val="$define" ;;
*)      val="$undef" ;;
esac
set usesocks
eval $setvar

: Check for uselongdouble support
case "$ccflags" in
*-DUSE_LONG_DOUBLE*|*-DUSE_MORE_BITS*) uselongdouble="$define" ;;
esac

case "$uselongdouble" in
$define|true|[yY]*)	dflt='y';;
*) dflt='n';;
esac
cat <<EOM

Perl can be built to take advantage of long doubles which
(if available) may give more accuracy and range for floating point numbers.

If this doesn't make any sense to you, just accept the default '$dflt'.
EOM
rp='Try to use long doubles if available?'
. ./myread
case "$ans" in
y|Y) 	val="$define"	;;
*)      val="$undef"	;;
esac
set uselongdouble
eval $setvar

case "$uselongdouble" in
true|[yY]*) uselongdouble="$define" ;;
esac

: Look for a hint-file generated 'call-back-unit'.  If the
: user has specified that long doubles should be used,
: we may need to set or change some other defaults.
if $test -f uselongdouble.cbu; then
    echo "Your platform has some specific hints regarding long doubles, using them..."
    . ./uselongdouble.cbu
else
    case "$uselongdouble" in
	$define)
		$cat <<EOM
(Your platform does not have any specific hints for long doubles.)
EOM
	;;
    esac
fi

: Check if quadmath is requested
case "$usequadmath" in
"$define"|true|[yY]*) usequadmath="$define" ;;
*)                    usequadmath="$undef"  ;;
esac

: Looking for optional libraries
echo " "
echo "Checking for optional libraries..." >&4
case "$libs" in
' '|'') dflt='';;
*) dflt="$libs";;
esac
case "$libswanted" in
'') libswanted='c_s';;
esac
case "$usesocks" in
"$define") libswanted="$libswanted socks5 socks5_sh" ;;
esac
case "$usecbacktrace" in
"$define") libswanted="$libswanted bfd" ;;
esac
case "$usequadmath" in
"$define") libswanted="$libswanted quadmath" ;;
esac
libsfound=''
libsfiles=''
libsdirs=''
libspath=''
for thisdir in $libpth $xlibpth; do
  test -d $thisdir && libspath="$libspath $thisdir"
done
for thislib in $libswanted; do
	for thisdir in $libspath; do
	    xxx=''
	    if $test ! -f "$xxx" -a "X$ignore_versioned_solibs" = "X"; then
		xxx=`ls $thisdir/lib$thislib.$so.[0-9] 2>/dev/null|sed -n '$p'`
	        $test -f "$xxx" && eval $libscheck
		$test -f "$xxx" && libstyle=shared
		xxx=`ls $thisdir/lib$thislib.[0-9].$so 2>/dev/null|sed -n '$p'`
	        $test -f "$xxx" && eval $libscheck
		$test -f "$xxx" && libstyle=shared
	    fi
	    if test ! -f "$xxx"; then
		xxx=$thisdir/lib$thislib.$so
	        $test -f "$xxx" && eval $libscheck
		$test -f "$xxx" && libstyle=shared
	    fi
	    if test ! -f "$xxx"; then
		xxx=$thisdir/lib$thislib$_a
	        $test -f "$xxx" && eval $libscheck
		$test -f "$xxx" && libstyle=static
	    fi
	    if test ! -f "$xxx"; then
		xxx=$thisdir/$thislib$_a
	        $test -f "$xxx" && eval $libscheck
		$test -f "$xxx" && libstyle=static
	    fi
	    if test ! -f "$xxx"; then
		xxx=$thisdir/lib${thislib}_s$_a
	        $test -f "$xxx" && eval $libscheck
		$test -f "$xxx" && libstyle=static
		$test -f "$xxx" && thislib=${thislib}_s
	    fi
	    if test ! -f "$xxx"; then
		xxx=$thisdir/Slib$thislib$_a
	        $test -f "$xxx" && eval $libscheck
		$test -f "$xxx" && libstyle=static
	    fi
	    if $test -f "$xxx"; then
		case "$libstyle" in
		shared) echo "Found -l$thislib (shared)." ;;
		static) echo "Found -l$thislib." ;;
		*)      echo "Found -l$thislib ($libstyle)." ;;
		esac
		case " $dflt " in
		*"-l$thislib "*);;
		*) dflt="$dflt -l$thislib"
                   libsfound="$libsfound $xxx"
                   yyy=`basename $xxx`
                   libsfiles="$libsfiles $yyy"
                   yyy=`echo $xxx|$sed -e "s%/$yyy\\$%%"`
                   case " $libsdirs " in
                   *" $yyy "*) ;;
                   *) libsdirs="$libsdirs $yyy" ;;
                   esac
		   ;;
		esac
		break
	    fi
	done
	if $test ! -f "$xxx"; then
	    echo "No -l$thislib."
	fi
done
set X $dflt
shift
dflt="$*"
case "$libs" in
'') dflt="$dflt";;
*) dflt="$libs";;
esac
case "$dflt" in
' '|'') dflt='none';;
esac

$cat <<EOM

In order to compile $package on your machine, a number of libraries
are usually needed.  Include any other special libraries here as well.
Say "none" for none.  The default list is almost always right.
EOM

echo " "
rp="What libraries to use?"
. ./myread
case "$ans" in
none) libs=' ';;
*) libs="$ans";;
esac

: determine optimization, if desired, or use for debug flag also
case "$optimize" in
' '|$undef) dflt='none';;
'') dflt='-O';;
*) dflt="$optimize";;
esac
$cat <<EOH

By default, $package compiles with the -O flag to use the optimizer.
Alternately, you might want to use the symbolic debugger, which uses
the -g flag (on traditional Unix systems).  Either flag can be
specified here.  To use neither flag, specify the word "none".

EOH
rp="What optimizer/debugger flag should be used?"
. ./myread
optimize="$ans"
case "$optimize" in
'none') optimize=" ";;
esac

: Check what DEBUGGING is required from the command line
: -DEBUGGING      or -DDEBUGGING or
: -DEBUGGING=both			= -g + -DDEBUGGING
: -DEBUGGING=-g   or -Doptimize=-g	= -g
: -DEBUGGING=none or -UDEBUGGING	=
: -DEBUGGING=old  or -DEBUGGING=default	= ? $optimize
case "$EBUGGING" in
'')	;;
*)	DEBUGGING=$EBUGGING ;;
esac

case "$DEBUGGING" in
-g|both|$define)
    case "$optimize" in
	*-g*) ;;
	*)    optimize="$optimize -g" ;;
    esac ;;
none|$undef)
    case "$optimize" in
	*-g*)	set `echo "X $optimize " | sed 's/ -g / /'`
		shift
		optimize="$*"
		;;
    esac ;;
esac

dflt=''
case "$DEBUGGING" in
both|$define) dflt='-DDEBUGGING'
esac

: argument order is deliberate, as the flag will start with - which set could
: think is an option
checkccflag='check=$1; flag=$2; callback=$3;
echo " ";
echo "Checking if your compiler accepts $flag" 2>&1;
[ "X$sysroot" != "X" ] && echo "For sysroot = $sysroot";
echo "int main(void) { return 0; }" > gcctest.c;
if $cc $_sysroot -O2 $flag -o gcctest gcctest.c 2>gcctest.out && $run ./gcctest; then
    echo "Yes, it does." 2>&1;
    if $test -s gcctest.out ; then
        echo "But your platform does not like it:";
        cat gcctest.out;
    else
	case "$ccflags" in
	*$check*)
	    echo "Leaving current flags $ccflags alone." 2>&1
	    ;;
	*) dflt="$dflt $flag";
	    eval $callback
	    ;;
	esac
    fi
else
    echo "Nope, it does not, but that is ok." 2>&1;
fi
'

: We will not override a previous value, but we might want to
: augment a hint file
case "$hint" in
default|recommended)
	case "$gccversion" in
	1*) dflt="$dflt -fpcc-struct-return" ;;
	esac
	case "$optimize:$DEBUGGING" in
	*-g*:old) dflt="$dflt -DDEBUGGING";;
	esac
	case "$gccversion" in
	2*) if $test -d /etc/conf/kconfig.d &&
			$contains _POSIX_VERSION $usrinc/sys/unistd.h >/dev/null 2>&1
		then
			# Interactive Systems (ISC) POSIX mode.
			dflt="$dflt -posix"
		fi
		;;
	esac
	case "$gccversion" in
	1*) ;;
	2.[0-8]*) ;;
	?*)	set strict-aliasing -fno-strict-aliasing
		eval $checkccflag
		;;
	esac
	case "$gccversion" in
	1*) ;;
	2*) ;;
	?*) 	echo " "
		echo "Checking if your compiler accepts -fno-delete-null-pointer-checks" 2>&1
		echo 'int main(void) { return 0; }' > gcctest.c
		if $cc -O2 -Werror -fno-delete-null-pointer-checks -o gcctest gcctest.c; then
			echo "Yes, it does." 2>&1
			case "$ccflags" in
			*delete-null-pointer-checks*)
				echo "Leaving current flags $ccflags alone." 2>&1
				;;
			*) dflt="$dflt -fno-delete-null-pointer-checks" ;;
			esac
		else
			echo "Nope, it doesn't, but that's ok." 2>&1
		fi
		;;
	esac
	# For gcc, adding -pipe speeds up compilations for some, but apparently
	# some assemblers can't read from stdin.  (It also slows down compilations
	# in other cases, but those are apparently rarer these days.)  AD 5/2004.
	case "$gccversion" in
	?*)	set pipe -pipe
		eval $checkccflag
		;;
	esac

	# on x86_64 (at least) we require an extra library (libssp) in the
	# link command line. This library is not named, so I infer that it is
	# an implementation detail that may change. Hence the safest approach
	# is to add the flag to the flags passed to the compiler at link time,
	# as that way the compiler can do the right implementation dependant
	# thing. (NWC)
	case "$osname" in
	amigaos) ;; # -fstack-protector builds but doesn't work
	*)	case "$gccversion" in
		?*)	set stack-protector-strong -fstack-protector-strong
			eval $checkccflag
			case "$dflt" in
			*-fstack-protector-strong*) ;; # It got added.
			*) # Try the plain/older -fstack-protector.
			   set stack-protector -fstack-protector
			   eval $checkccflag
			   ;;
			esac
			;;
		esac
		;;
	esac
	;;
esac

case "$mips_type" in
*BSD*|'') inclwanted="$locincpth $usrinc";;
*) inclwanted="$locincpth $inclwanted $usrinc/bsd";;
esac
for thisincl in $inclwanted; do
	if $test -d $thisincl; then
		if $test x$thisincl != x$usrinc; then
			case "$dflt" in
			*" -I$thisincl "*);;
			*) dflt="$dflt -I$thisincl ";;
			esac
		fi
	fi
done

inctest='if $contains $2 $usrinc/$1 >/dev/null 2>&1; then
	xxx=true;
elif $contains $2 $usrinc/sys/$1 >/dev/null 2>&1; then
	xxx=true;
else
	xxx=false;
fi;
if $xxx; then
	case "$dflt" in
	*$2*);;
	*) dflt="$dflt -D$2";;
	esac;
fi'

set signal.h LANGUAGE_C; eval $inctest

case "$usesocks" in
$define)
	ccflags="$ccflags -DSOCKS"
	;;
esac

case "$hint" in
default|recommended) dflt="$ccflags $dflt" ;;
*) dflt="$ccflags";;
esac

case "$dflt" in
''|' ') dflt=none;;
esac

$cat <<EOH

Your C compiler may want other flags.  For this question you should include
-I/whatever and -DWHATEVER flags and any other flags used by the C compiler,
but you should NOT include libraries or ld flags like -lwhatever.  If you
want $package to honor its debug switch, you should include -DDEBUGGING here.
Your C compiler might also need additional flags, such as -D_POSIX_SOURCE.

To use no flags, specify the word "none".

EOH
set X $dflt
shift
dflt=${1+"$@@"}
rp="Any additional cc flags?"
. ./myread
case "$ans" in
none) ccflags='';;
*) ccflags="$ans";;
esac

: the following weeds options from ccflags that are of no interest to cpp
case "$cppflags" in
'') cppflags="$ccflags" ;;
*)  set X $ccflags; shift
    case " $cppflags " in
    *" $1 "*) ;;  # Try to avoid doubling the cppflags.
    *) cppflags="$cppflags $ccflags" ;;
    esac
    ;;
esac
case "$gccversion" in
1*) cppflags="$cppflags -D__GNUC__"
esac
case "$mips_type" in
'');;
*BSD*) cppflags="$cppflags -DSYSTYPE_BSD43";;
esac
case "$cppflags" in
'');;
*)
	echo " "
	echo "Let me guess what the preprocessor flags are..." >&4
	set X $cppflags
	shift
	cppflags=''
	$cat >cpp.c <<'EOM'
#define BLURFL foo

BLURFL xx LFRULB
EOM
	previous=''
	for flag in $*
	do
		case "$flag" in
		-*) ftry="$flag";;
		*) ftry="$previous $flag";;
		esac
		if $cppstdin -DLFRULB=bar $cppflags $ftry $cppminus <cpp.c \
			>cpp1.out 2>/dev/null && \
			$cpprun -DLFRULB=bar $cppflags $ftry $cpplast <cpp.c \
			>cpp2.out 2>/dev/null && \
			$contains 'foo.*xx.*bar' cpp1.out >/dev/null 2>&1 && \
			$contains 'foo.*xx.*bar' cpp2.out >/dev/null 2>&1
		then
			cppflags="$cppflags $ftry"
			previous=''
		else
			previous="$flag"
		fi
	done
	set X $cppflags
	shift
	cppflags=${1+"$@@"}
	case "$cppflags" in
	*-*)  echo "They appear to be: $cppflags";;
	esac
	$rm -f cpp.c cpp?.out
	;;
esac

: flags used in final linking phase
case "$ldflags" in
'') if ./venix; then
		dflt='-i -z'
	else
		dflt=''
	fi
	case "$ccflags" in
	*-posix*) dflt="$dflt -posix" ;;
	esac
	;;
*) dflt="$ldflags";;
esac
# See note above about -fstack-protector
case "$ccflags" in
*-fstack-protector-strong*)
	case "$dflt" in
	*-fstack-protector-strong*) ;; # Don't add it again
	*) dflt="$dflt -fstack-protector-strong" ;;
	esac
	;;
*-fstack-protector*)
	case "$dflt" in
	*-fstack-protector*) ;; # Don't add it again
	*) dflt="$dflt -fstack-protector" ;;
	esac
	;;
esac

: Try to guess additional flags to pick up local libraries.
for thislibdir in $libpth; do
	case " $loclibpth " in
	*" $thislibdir "*)
		case "$dflt " in
		*"-L$thislibdir "*) ;;
		*)  dflt="$dflt -L$thislibdir" ;;
		esac
		;;
	esac
done

case "$dflt" in
'') dflt='none' ;;
esac

$cat <<EOH

Your C linker may need flags.  For this question you should
include -L/whatever and any other flags used by the C linker, but you
should NOT include libraries like -lwhatever.

Make sure you include the appropriate -L/path flags if your C linker
does not normally search all of the directories you specified above,
namely
	$libpth
To use no flags, specify the word "none".

EOH

rp="Any additional ld flags (NOT including libraries)?"
. ./myread
case "$ans" in
none) ldflags='';;
*) ldflags="$ans";;
esac
rmlist="$rmlist pdp11"

: coherency check
echo " "
echo "Checking your choice of C compiler and flags for coherency..." >&4
$cat > try.c <<'EOF'
#include <stdio.h>
int main() { printf("Ok\n"); return(0); }
EOF
set X $cc -o try $optimize $ccflags $ldflags try.c $libs
shift
$cat >try.msg <<'EOM'
I've tried to compile and run the following simple program:

EOM
$cat try.c >> try.msg

$cat >> try.msg <<EOM

I used the command:

	$*
	$run ./try

and I got the following output:

EOM
dflt=y
if $sh -c "$cc -o try $optimize $ccflags $ldflags try.c $libs" >>try.msg 2>&1; then
	if $sh -c "$run ./try " >>try.msg 2>&1; then
		xxx=`$run ./try`
		case "$xxx" in
		"Ok") dflt=n ;;
		*)    echo 'The program compiled OK, but produced no output.' >> try.msg ;;
		esac
	else
		echo "The program compiled OK, but exited with status $?." >>try.msg
		rp="You have a problem.  Shall I abort Configure"
		dflt=y
	fi
else
	echo "I can't compile the test program." >>try.msg
	rp="You have a BIG problem.  Shall I abort Configure"
	dflt=y
fi
case "$dflt" in
y)
	$cat try.msg >&4
	case "$knowitall" in
	'')
		echo "(The supplied flags or libraries might be incorrect.)"
		;;
	*) dflt=n;;
	esac
	echo " "
	. ./myread
	case "$ans" in
	n*|N*) ;;
	*)	echo "Ok.  Stopping Configure." >&4
		exit 1
		;;
	esac
	;;
n) echo "OK, that should do.";;
esac
$rm_try gcctest gcctest.out

: define a shorthand compile call
compile='
mc_file=$1;
shift;
case "$usedevel" in $define|true|[yY]*) if $test ! -f "${mc_file}.c"; then
echo "Internal Configure script bug - compiler test file ${mc_file}.c is missing. Please report this to perlbug@@perl.org" >&4;
exit 1;
fi;
esac;
$cc -o ${mc_file} $optimize $ccflags $ldflags $* ${mc_file}.c $libs > /dev/null 2>&1;'
: define a shorthand compile call for compilations that should be ok.
compile_ok='
mc_file=$1;
shift;
$cc -o ${mc_file} $optimize $ccflags $ldflags $* ${mc_file}.c $libs;'

: determine filename position in cpp output
echo " "
echo "Computing filename position in cpp output for #include directives..." >&4
case "$osname" in
amigaos) fieldn=3 ;;  # Workaround for a bug in abc (pdksh).
esac
case "$fieldn" in
'')
case "$osname" in
vos) testaccess=-e ;;
*)   testaccess=-r ;;
esac
echo '#include <stdio.h>' > foo.c
$cat >fieldn <<EOF
$startsh
$cppstdin $cppflags $cppminus <foo.c 2>/dev/null | \
$grep '^[ 	]*#.*stdio\.h' | \
while read cline; do
	pos=1
	set \$cline
	while $test \$# -gt 0; do
		if $test $testaccess \`echo \$1 | $tr -d '"'\`; then
			echo "\$pos"
			exit 0
		fi
		shift
		pos=\`expr \$pos + 1\`
	done
done
EOF
chmod +x fieldn
fieldn=`./fieldn`
$rm -f foo.c fieldn
;;
esac
case $fieldn in
'') pos='???';;
1) pos=first;;
2) pos=second;;
3) pos=third;;
*) pos="${fieldn}th";;
esac
echo "Your cpp writes the filename in the $pos field of the line."

: locate header file
$cat >findhdr <<EOF
$startsh
wanted=\$1
name=''
for usrincdir in $incpth
do
	if test -f \$usrincdir/\$wanted; then
		echo "\$usrincdir/\$wanted"
		exit 0
	fi
done
awkprg='{ print \$$fieldn }'
echo "#include <\$wanted>" > foo\$\$.c
$cppstdin $cppminus $cppflags < foo\$\$.c 2>/dev/null | \
$cppfilter $grep "^[ 	]*#.*\$wanted" | \
while read cline; do
	name=\`echo \$cline | $awk "\$awkprg" | $tr -d '"'\`
	case "\$name" in
	*[/\\\\]\$wanted) echo "\$name"; exit 1;;
	*[\\\\/]\$wanted) echo "\$name"; exit 1;;
	*) exit 2;;
	esac;
done;
#
# status = 0: grep returned 0 lines, case statement not executed
# status = 1: headerfile found
# status = 2: while loop executed, no headerfile found
#
status=\$?
$rm -f foo\$\$.c;
if test \$status -eq 1; then
	exit 0;
fi
exit 1
EOF
chmod +x findhdr

: define an alternate in-header-list? function
inhdr='echo " "; td=$define; tu=$undef; yyy=$@@;
cont=true; xxf="echo \"<\$1> found.\" >&4";
case $# in 2) xxnf="echo \"<\$1> NOT found.\" >&4";;
*) xxnf="echo \"<\$1> NOT found, ...\" >&4";;
esac;
case $# in 4) instead=instead;; *) instead="at last";; esac;
while $test "$cont"; do
	xxx=`./findhdr $1`
	var=$2; eval "was=\$$2";
	if $test "$xxx" && $test -r "$xxx";
	then eval $xxf;
	eval "case \"\$$var\" in $undef) . ./whoa; esac"; eval "$var=\$td";
		cont="";
	else eval $xxnf;
	eval "case \"\$$var\" in $define) . ./whoa; esac"; eval "$var=\$tu"; fi;
	set $yyy; shift; shift; yyy=$@@;
	case $# in 0) cont="";;
	2) xxf="echo \"but I found <\$1> $instead.\" >&4";
		xxnf="echo \"and I did not find <\$1> either.\" >&4";;
	*) xxf="echo \"but I found <\$1\> instead.\" >&4";
		xxnf="echo \"there is no <\$1>, ...\" >&4";;
	esac;
done;
while $test "$yyy";
do set $yyy; var=$2; eval "was=\$$2";
	eval "case \"\$$var\" in $define) . ./whoa; esac"; eval "$var=\$tu";
	set $yyy; shift; shift; yyy=$@@;
done'

: see if stdlib is available
set stdlib.h i_stdlib
eval $inhdr

: check for lengths of integral types
echo " "
case "$intsize" in
'')
	echo "Checking to see how big your integers are..." >&4
	$cat >try.c <<EOCP
#include <stdio.h>
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
int main()
{
	printf("intsize=%d;\n", (int)sizeof(int));
	printf("longsize=%d;\n", (int)sizeof(long));
	printf("shortsize=%d;\n", (int)sizeof(short));
	exit(0);
}
EOCP
	set try
	if eval $compile_ok && $run ./try > /dev/null; then
		eval `$run ./try`
		echo "Your integers are $intsize bytes long."
		echo "Your long integers are $longsize bytes long."
		echo "Your short integers are $shortsize bytes long."
	else
		$cat >&4 <<EOM
!
Help! I can't compile and run the intsize test program: please enlighten me!
(This is probably a misconfiguration in your system or libraries, and
you really ought to fix it.  Still, I'll try anyway.)
!
EOM
		dflt=4
		rp="What is the size of an integer (in bytes)?"
		. ./myread
		intsize="$ans"
		dflt=$intsize
		rp="What is the size of a long integer (in bytes)?"
		. ./myread
		longsize="$ans"
		dflt=2
		rp="What is the size of a short integer (in bytes)?"
		. ./myread
		shortsize="$ans"
	fi
	;;
esac
$rm_try

: check for long long
echo " "
echo "Checking to see if you have long long..." >&4
echo 'int main() { long long x = 7; return 0; }' > try.c
set try
if eval $compile; then
	val="$define"
	echo "You have long long."
else
	val="$undef"
	echo "You do not have long long."
fi
$rm_try
set d_longlong
eval $setvar

: check for length of long long
case "${d_longlong}${longlongsize}" in
$define)
	echo " "
	echo "Checking to see how big your long longs are..." >&4
	$cat >try.c <<'EOCP'
#include <stdio.h>
int main()
{
    printf("%d\n", (int)sizeof(long long));
    return(0);
}
EOCP
	set try
	if eval $compile_ok; then
		longlongsize=`$run ./try`
		echo "Your long longs are $longlongsize bytes long."
	else
		dflt='8'
		echo " "
		echo "(I can't seem to compile the test program.  Guessing...)"
		rp="What is the size of a long long (in bytes)?"
		. ./myread
		longlongsize="$ans"
	fi
	if $test "X$longsize" = "X$longlongsize"; then
		echo "(That isn't any different from an ordinary long.)"
	fi
	;;
esac
$rm_try

: see if inttypes.h is available
: we want a real compile instead of Inhdr because some systems
: have an inttypes.h which includes non-existent headers
echo " "
$cat >try.c <<EOCP
#include <inttypes.h>
int main() {
	static int32_t foo32 = 0x12345678;
}
EOCP
set try
if eval $compile; then
	echo "<inttypes.h> found." >&4
	val="$define"
else
	echo "<inttypes.h> NOT found." >&4
	val="$undef"
fi
$rm_try
set i_inttypes
eval $setvar

: check for int64_t
echo " "
echo "Checking to see if you have int64_t..." >&4
$cat >try.c <<EOCP
#include <sys/types.h>
#$i_inttypes I_INTTYPES
#ifdef I_INTTYPES
#include <inttypes.h>
#endif
int main() { int64_t x = 7; }
EOCP
set try
if eval $compile; then
	val="$define"
	echo "You have int64_t."
else
	val="$undef"
	echo "You do not have int64_t."
fi
$rm_try
set d_int64_t
eval $setvar

: Check if 64bit ints have a quad type
echo " "
echo "Checking which 64-bit integer type we could use..." >&4

case "$intsize" in
8) val=int
   set quadtype
   eval $setvar
   val='"unsigned int"'
   set uquadtype
   eval $setvar
   quadkind=1
   ;;
*) case "$longsize" in
   8) val=long
      set quadtype
      eval $setvar
      val='"unsigned long"'
      set uquadtype
      eval $setvar
      quadkind=2
      ;;
   *) case "$d_longlong:$longlongsize" in
      define:8)
        val='"long long"'
        set quadtype
        eval $setvar
        val='"unsigned long long"'
        set uquadtype
        eval $setvar
        quadkind=3
        ;;
      *) case "$d_int64_t" in
         define)
           val=int64_t
           set quadtype
           eval $setvar
           val=uint64_t
           set uquadtype
           eval $setvar
           quadkind=4
           ;;
         esac
         ;;
      esac
      ;;
   esac
   ;;
esac

case "$quadtype" in
'')	echo "Alas, no 64-bit integer types in sight." >&4
	d_quad="$undef"
	;;
*)	echo "We could use '$quadtype' for 64-bit integers." >&4
	d_quad="$define"
	;;
esac

: Do we want 64bit support
case "$uselonglong" in
"$define"|true|[yY]*)
	cat <<EOM >&4

*** Configure -Duselonglong is deprecated, using -Duse64bitint instead.
EOM
	use64bitint="$define"
	;;
esac
case "$use64bits" in
"$define"|true|[yY]*)
	cat <<EOM >&4

*** Configure -Duse64bits is deprecated, using -Duse64bitint instead.
EOM
	use64bitint="$define"
	;;
esac
case "$use64bitints" in
"$define"|true|[yY]*)
	cat <<EOM >&4

*** There is no Configure -Duse64bitints, using -Duse64bitint instead.
EOM
	use64bitint="$define"
	;;
esac
case "$use64bitsint" in
"$define"|true|[yY]*)
	cat <<EOM >&4

*** There is no Configure -Duse64bitsint, using -Duse64bitint instead.
EOM
	use64bitint="$define"
	;;
esac
case "$uselonglongs" in
"$define"|true|[yY]*)
	cat <<EOM >&4

*** There is no Configure -Duselonglongs, using -Duse64bitint instead.
EOM
	use64bitint="$define"
	;;
esac
case "$use64bitsall" in
"$define"|true|[yY]*)
	cat <<EOM >&4

*** There is no Configure -Duse64bitsall, using -Duse64bitall instead.
EOM
	use64bitall="$define"
	;;
esac

case "$ccflags" in
*-DUSE_LONG_LONG*|*-DUSE_64_BIT_INT*|*-DUSE_64_BIT_ALL*) use64bitint="$define";;
esac
case "$use64bitall" in
"$define"|true|[yY]*) use64bitint="$define" ;;
esac

case "$longsize" in
8) cat <<EOM

You have natively 64-bit long integers.
EOM
   val="$define"
   ;;
*) case "$use64bitint" in
   "$define"|true|[yY]*) dflt='y';;
   *) dflt='n';;
   esac
   case "$d_quad" in
   "$define") ;;
   *) dflt='n' ;;
   esac
   cat <<EOM

Perl can be built to take advantage of 64-bit integer types
on some systems.  To do so, Configure can be run with -Duse64bitint.
Choosing this option will most probably introduce binary incompatibilities.

If this doesn't make any sense to you, just accept the default '$dflt'.
(The default has been chosen based on your configuration.)
EOM
   rp='Try to use 64-bit integers, if available?'
   . ./myread
   case "$ans" in
   [yY]*) val="$define" ;;
   *)     val="$undef"  ;;
   esac
   ;;
esac
set use64bitint
eval $setvar

case "$use64bitall" in
"$define"|true|[yY]*) dflt='y' ;;
*) case "$longsize" in
   8) dflt='y' ;;
   *) dflt='n' ;;
   esac
   ;;
esac
cat <<EOM

You may also choose to try maximal 64-bitness.  It means using as much
64-bitness as possible on the platform.  This in turn means even more
binary incompatibilities.  On the other hand, your platform may not
have any more 64-bitness available than what you already have chosen.

If this doesn't make any sense to you, just accept the default '$dflt'.
(The default has been chosen based on your configuration.)
EOM
rp='Try to use maximal 64-bit support, if available?'
. ./myread
case "$ans" in
[yY]*) val="$define" ;;
*)     val="$undef"  ;;
esac
set use64bitall
eval $setvar
case "$use64bitall" in
"$define")
	case "$use64bitint" in
	"$undef")
		cat <<EOM

Since you have chosen a maximally 64-bit build, I'm also turning on
the use of 64-bit integers.
EOM
		use64bitint="$define" ;;
	esac
	;;
esac

: Look for a hint-file generated 'call-back-unit'.  If the
: user has specified that a 64-bit perl is to be built,
: we may need to set or change some other defaults.
if $test -f use64bitint.cbu; then
	echo "Your platform has some specific hints regarding 64-bit integers, using them..."
	. ./use64bitint.cbu
fi
case "$use64bitint" in
"$define"|true|[yY]*)
	: This test was common to all the OpenBSD forks, and seems harmless for
	: other platforms:
	echo " "
	echo "Checking if your C library has broken 64-bit functions..." >&4
	cat >try.c <<EOCP
#include <stdio.h>
typedef $uquadtype myULL;
int main (void)
{
    struct {
	double d;
	myULL  u;
    } *p, test[] = {
	{4294967303.15, 4294967303ULL},
	{4294967294.2,  4294967294ULL},
	{4294967295.7,  4294967295ULL},
	{0.0, 0ULL}
    };
    for (p = test; p->u; p++) {
	myULL x = (myULL)p->d;
	if (x != p->u) {
	    printf("buggy\n");
	    return 0;
	}
    }
    printf("ok\n");
    return 0;
}
EOCP
	set try
	if eval $compile_ok; then
	    libcquad=`$run ./try`
	    echo "Your C library's 64-bit functions are $libcquad."
	else
	    echo "(I can't seem to compile the test program.)"
	    echo "Assuming that your C library's 64-bit functions are ok."
	    libcquad="ok"
	fi
	$rm_try

	case "$libcquad" in
	    buggy*)
		cat >&4 <<EOM

*** You have a C library with broken 64-bit functions.
*** 64-bit support does not work reliably in this configuration.
*** Please rerun Configure without -Duse64bitint and/or -Dusemorebits.
*** Cannot continue, aborting.

EOM
		exit 1
		;;
	esac
	case "$longsize" in
	4) case "$archname64" in
	   '') archname64=64int ;;
	   esac
	   ;;
	esac
	;;
esac

: Look for a hint-file generated 'call-back-unit'.  If the
: user has specified that a maximally 64-bit perl is to be built,
: we may need to set or change some other defaults.
if $test -f use64bitall.cbu; then
	echo "Your platform has some specific hints regarding 64-bit builds, using them..."
	. ./use64bitall.cbu
fi
case "$use64bitall" in
"$define"|true|[yY]*)
	case "$longsize" in
	4) case "$archname64" in
	   ''|64int) archname64=64all ;;
	   esac
	   ;;
	esac
	;;
esac

case "$d_quad:$use64bitint" in
$undef:$define)
	cat >&4 <<EOF

*** You have chosen to use 64-bit integers,
*** but none can be found.
*** Please rerun Configure without -Duse64bitint and/or -Dusemorebits.
*** Cannot continue, aborting.

EOF
	exit 1
	;;
esac

: Check if we are using the GNU C library
echo " "
echo "Checking for GNU C Library..." >&4
cat >try.c <<'EOCP'
/* Find out version of GNU C library.  __GLIBC__ and __GLIBC_MINOR__
   alone are insufficient to distinguish different versions, such as
   2.0.6 and 2.0.7.  The function gnu_get_libc_version() appeared in
   libc version 2.1.0.      A. Dougherty,  June 3, 2002.
*/
#include <stdio.h>
int main(void)
{
#ifdef __GLIBC__
#   ifdef __GLIBC_MINOR__
#       if __GLIBC__ >= 2 && __GLIBC_MINOR__ >= 1 && !defined(__cplusplus)
#           include <gnu/libc-version.h>
	    printf("%s\n",  gnu_get_libc_version());
#       else
	    printf("%d.%d\n",  __GLIBC__, __GLIBC_MINOR__);
#       endif
#   else
	printf("%d\n",  __GLIBC__);
#   endif
    return 0;
#else
    return 1;
#endif
}
EOCP
set try
if eval $compile_ok && $run ./try > glibc.ver; then
	val="$define"
	gnulibc_version=`$cat glibc.ver`
	echo "You are using the GNU C Library version $gnulibc_version"
else
	val="$undef"
	gnulibc_version=''
	echo "You are not using the GNU C Library"
fi
$rm_try glibc.ver
set d_gnulibc
eval $setvar

: see if nm is to be used to determine whether a symbol is defined or not
case "$usenm" in
'')
	dflt=''
	case "$d_gnulibc" in
	"$define")
		echo " "
		echo "nm probably won't work on the GNU C Library." >&4
		dflt=n
		;;
	esac
	case "$dflt" in
	'')
		if $test "$osname" = aix -a "X$PASE" != "Xdefine" -a ! -f /lib/syscalls.exp; then
			echo " "
			echo "Whoops!  This is an AIX system without /lib/syscalls.exp!" >&4
			echo "'nm' won't be sufficient on this system." >&4
			dflt=n
		fi
		;;
	esac
	case "$dflt" in
	'') dflt=`$egrep 'inlibc|csym' $rsrc/Configure | wc -l 2>/dev/null`
		if $test $dflt -gt 20; then
			dflt=y
		else
			dflt=n
		fi
		;;
	esac
	;;
*)
	case "$usenm" in
	true|$define) dflt=y;;
	*) dflt=n;;
	esac
	;;
esac
$cat <<EOM

I can use $nm to extract the symbols from your C libraries. This
is a time consuming task which may generate huge output on the disk (up
to 3 megabytes) but that should make the symbols extraction faster. The
alternative is to skip the 'nm' extraction part and to compile a small
test program instead to determine whether each symbol is present. If
you have a fast C compiler and/or if your 'nm' output cannot be parsed,
this may be the best solution.

You probably shouldn't let me use 'nm' if you are using the GNU C Library.

EOM
rp="Shall I use $nm to extract C symbols from the libraries?"
. ./myread
case "$ans" in
[Nn]*) usenm=false;;
*) usenm=true;;
esac

runnm=$usenm
case "$reuseval" in
true) runnm=false;;
esac

: nm options which may be necessary
case "$nm_opt" in
'') if $test -f /mach_boot; then
		nm_opt=''	# Mach
	elif $test -d /usr/ccs/lib; then
		nm_opt='-p'	# Solaris (and SunOS?)
	elif $test -f /dgux; then
		nm_opt='-p'	# DG-UX
	elif $test -f /lib64/rld; then
		nm_opt='-p'	# 64-bit Irix
	else
		nm_opt=''
	fi;;
esac

: nm options which may be necessary for shared libraries but illegal
: for archive libraries.  Thank you, Linux.
case "$nm_so_opt" in
'')	case "$myuname" in
	*linux*|gnu*)
		if $nm --help | $grep 'dynamic' > /dev/null 2>&1; then
			nm_so_opt='--dynamic'
		fi
		;;
	esac
	;;
esac

: Figure out where the libc is located
case "$runnm" in
true)
: get list of predefined functions in a handy place
echo " "
case "$libc" in
'') libc=unknown
	case "$libs" in
	*-lc_s*) libc=`./loc libc_s$_a $libc $libpth`
	esac
	;;
esac
case "$libs" in
'') ;;
*)  for thislib in $libs; do
	case "$thislib" in
	-lc|-lc_s)
		: Handle C library specially below.
		;;
	-l*)
		thislib=`echo $thislib | $sed -e 's/^-l//'`
		if try=`./loc lib$thislib.$so.'*' X $libpth`; $test -f "$try"; then
			:
		elif try=`./loc lib$thislib.$so X $libpth`; $test -f "$try"; then
			:
		elif try=`./loc lib$thislib$_a X $libpth`; $test -f "$try"; then
			:
		elif try=`./loc $thislib$_a X $libpth`; $test -f "$try"; then
			:
		elif try=`./loc lib$thislib X $libpth`; $test -f "$try"; then
			:
		elif try=`./loc $thislib X $libpth`; $test -f "$try"; then
			:
		elif try=`./loc Slib$thislib$_a X $xlibpth`; $test -f "$try"; then
			:
		else
			try=''
		fi
		libnames="$libnames $try"
		;;
	*) libnames="$libnames $thislib" ;;
	esac
	done
	;;
esac
xxx=normal
case "$libc" in
unknown)
	set /lib/libc.$so
	for xxx in $libpth; do
		$test -r $1 || set $xxx/libc.$so
		: The messy sed command sorts on library version numbers.
		$test -r $1 || \
			set `echo blurfl; echo $xxx/libc.$so.[0-9]* | \
			tr ' ' $trnl | egrep -v '\.[A-Za-z]*$' | $sed -e '
				h
				s/[0-9][0-9]*/0000&/g
				s/0*\([0-9][0-9][0-9][0-9][0-9]\)/\1/g
				G
				s/\n/ /' | \
			 $sort | $sed -e 's/^.* //'`
		eval set \$$#
	done
	$test -r $1 || set $sysroot/usr/ccs/lib/libc.$so
	$test -r $1 || set $sysroot/lib/libsys_s$_a
	;;
*)
	set blurfl
	;;
esac
if $test -r "$1"; then
	echo "Your (shared) C library seems to be in $1."
	libc="$1"
elif $test -r /lib/libc && $test -r /lib/clib; then
	echo "Your C library seems to be in both /lib/clib and /lib/libc."
	xxx=apollo
	libc='/lib/clib /lib/libc'
	if $test -r /lib/syslib; then
		echo "(Your math library is in /lib/syslib.)"
		libc="$libc /lib/syslib"
	fi
elif $test -r "$libc" || (test -h "$libc") >/dev/null 2>&1; then
	echo "Your C library seems to be in $libc, as you said before."
elif $test -r $incpath/usr/lib/libc$_a; then
	libc=$incpath/usr/lib/libc$_a;
	echo "Your C library seems to be in $libc.  That's fine."
elif $test -r /lib/libc$_a; then
	libc=/lib/libc$_a;
	echo "Your C library seems to be in $libc.  You're normal."
else
	if tans=`./loc libc$_a blurfl/dyick $libpth`; $test -r "$tans"; then
		:
	elif tans=`./loc libc blurfl/dyick $libpth`; $test -r "$tans"; then
		libnames="$libnames "`./loc clib blurfl/dyick $libpth`
	elif tans=`./loc clib blurfl/dyick $libpth`; $test -r "$tans"; then
		:
	elif tans=`./loc Slibc$_a blurfl/dyick $xlibpth`; $test -r "$tans"; then
		:
	elif tans=`./loc Mlibc$_a blurfl/dyick $xlibpth`; $test -r "$tans"; then
		:
	else
		tans=`./loc Llibc$_a blurfl/dyick $xlibpth`
	fi
	if $test -r "$tans"; then
		echo "Your C library seems to be in $tans, of all places."
		libc=$tans
	else
		libc='blurfl'
	fi
fi
if $test $xxx = apollo -o -r "$libc" || (test -h "$libc") >/dev/null 2>&1; then
	dflt="$libc"
	cat <<EOM

If the guess above is wrong (which it might be if you're using a strange
compiler, or your machine supports multiple models), you can override it here.

EOM
else
	dflt=''
	echo $libpth | $tr ' ' $trnl | $sort | $uniq > libpath
	cat >&4 <<EOM
I can't seem to find your C library.  I've looked in the following places:

EOM
	$sed 's/^/	/' libpath
	cat <<EOM

None of these seems to contain your C library. I need to get its name...

EOM
fi
fn=f
rp='Where is your C library?'
. ./getfile
libc="$ans"

echo " "
echo $libc $libnames | $tr ' ' $trnl | $sort | $uniq > libnames
set X `cat libnames`
shift
xxx=files
case $# in 1) xxx=file; esac
echo "Extracting names from the following $xxx for later perusal:" >&4
echo " "
$sed 's/^/	/' libnames >&4
echo " "
$echo $n "This may take a while...$c" >&4

for file in $*; do
	case $file in
	*$so*) $nm $nm_so_opt $nm_opt $file 2>/dev/null;;
	*) $nm $nm_opt $file 2>/dev/null;;
	esac
done >libc.tmp

$echo $n ".$c"
$grep fprintf libc.tmp > libc.ptf
xscan='eval "<libc.ptf $com >libc.list"; $echo $n ".$c" >&4'
xrun='eval "<libc.tmp $com >libc.list"; echo "done." >&4'
xxx='[ADTSIWi]'
if com="$sed -n -e 's/__IO//' -e 's/^.* $xxx  *//p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e 's/^__*//' -e 's/^\([a-zA-Z_0-9$]*\).*xtern.*/\1/p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e '/|UNDEF/d' -e '/FUNC..GL/s/^.*|__*//p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e 's/^.* D __*//p' -e 's/^.* D //p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e 's/^_//' -e 's/^\([a-zA-Z_0-9]*\).*xtern.*text.*/\1/p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e 's/^.*|FUNC |GLOB .*|//p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$grep '|' | $sed -n -e '/|COMMON/d' -e '/|DATA/d' \
				-e '/ file/d' -e 's/^\([^ 	]*\).*/\1/p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e 's/^.*|FUNC |GLOB .*|//p' -e 's/^.*|FUNC |WEAK .*|//p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e 's/^__//' -e '/|Undef/d' -e '/|Proc/s/ .*//p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e 's/^.*|Proc .*|Text *| *//p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e '/Def. Text/s/.* \([^ ]*\)\$/\1/p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e 's/^[-0-9a-f ]*_\(.*\)=.*/\1/p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e 's/.*\.text n\ \ \ \.//p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="sed -n -e 's/^__.*//' -e 's/[       ]*D[    ]*[0-9]*.*//p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
else
	$nm -p $* 2>/dev/null >libc.tmp
	$grep fprintf libc.tmp > libc.ptf
	if com="$sed -n -e 's/^.* [ADTSIW]  *_[_.]*//p' -e 's/^.* [ADTSIW] //p'";\
		eval $xscan; $contains '^fprintf$' libc.list >/dev/null 2>&1
	then
		nm_opt='-p'
		eval $xrun
	else
		echo " "
		echo "$nm didn't seem to work right. Trying $ar instead..." >&4
		com=''
		if $ar t $libc > libc.tmp && \
			$contains '^fprintf$' libc.tmp >/dev/null 2>&1
		then
			for thisname in $libnames $libc; do
				$ar t $thisname >>libc.tmp
			done
			$sed -e "s/\\$_o\$//" < libc.tmp > libc.list
			echo "Ok." >&4
		elif test "X$osname" = "Xos2" && $ar tv $libc > libc.tmp; then
			for thisname in $libnames $libc; do
				$ar tv $thisname >>libc.tmp
				emximp -o tmp.imp $thisname \
				    2>/dev/null && \
				    $sed -e 's/^\([_a-zA-Z0-9]*\) .*$/\1/p' \
				    < tmp.imp >>libc.tmp
				$rm -f tmp.imp
			done
			$sed -e "s/\\$_o\$//" -e 's/^ \+//' < libc.tmp > libc.list
			echo "Ok." >&4
		else
			echo "$ar didn't seem to work right." >&4
			echo "Maybe this is a Cray...trying bld instead..." >&4
			if  bld t $libc | \
				$sed -e 's/.*\///' -e "s/\\$_o:.*\$//" > libc.list &&
				$test -s libc.list
			then
				for thisname in $libnames; do
					bld t $libnames | \
					$sed -e 's/.*\///' -e "s/\\$_o:.*\$//" >>libc.list
					$ar t $thisname >>libc.tmp
				done
				echo "Ok." >&4
			else
				echo "That didn't work either.  Giving up." >&4
				exit 1
			fi
		fi
	fi
fi
nm_extract="$com"
case "$PASE" in
define)
    echo " "
    echo "Since you are compiling for PASE, extracting more symbols from libc.a ...">&4
    dump -Tv /lib/libc.a | awk '$7 == "/unix" {print $5 " " $8}' | grep "^SV" | awk '{print $2}' >> libc.list
    ;;
*)  if $test -f /lib/syscalls.exp; then
	echo " "
	echo "Also extracting names from /lib/syscalls.exp for good ole AIX..." >&4
	$sed -n 's/^\([^ 	]*\)[ 	]*syscall[0-9]*[ 	]*$/\1/p' \
		/lib/syscalls.exp >>libc.list
    fi
    ;;
esac
;;
esac
$rm -f libnames libpath

: Check if we are using C++
echo " "
echo "Checking for C++..." >&4
$cat >try.c <<'EOCP'
#include <stdio.h>
int main(void)
{
#ifdef __cplusplus
    return 0;
#else
    return 1;
#endif
}
EOCP
set try
if eval $compile_ok && $run ./try; then
	val="$define"
	echo "You are using a C++ compiler."
else
	val="$undef"
	echo "You are not using a C++ compiler."
fi
$rm_try cplusplus$$
set d_cplusplus
eval $setvar

: is a C symbol defined?
csym='tlook=$1;
case "$3" in
-v) tf=libc.tmp; tdc="";;
-a) tf=libc.tmp; tdc="[]";;
*) tlook="^$1\$"; tf=libc.list; tdc="()";;
esac;
case "$d_cplusplus" in
    $define)	extern_C="extern \"C\""	;;
    *)		extern_C="extern"	;;
esac;
tx=yes;
case "$reuseval-$4" in
true-) ;;
true-*) tx=no; eval "tval=\$$4"; case "$tval" in "") tx=yes;; esac;;
esac;
case "$tx" in
yes)
	tval=false;
	if $test "$runnm" = true; then
		if $contains $tlook $tf >/dev/null 2>&1; then
			tval=true;
		elif $test "$mistrustnm" = compile -o "$mistrustnm" = run; then
			echo "$extern_C void *$1$tdc; void *(*(p()))$tdc { return &$1; } int main() { if(p() && p() != (void *)main) return(0); else return(1); }"> try.c;
			$cc -o try $optimize $ccflags $ldflags try.c >/dev/null 2>&1 $libs && tval=true;
			$test "$mistrustnm" = run -a -x try && { $run ./try$_exe >/dev/null 2>&1 || tval=false; };
			$rm_try;
		fi;
	else
		echo "$extern_C void *$1$tdc; void *(*(p()))$tdc { return &$1; } int main() { if(p() && p() != (void *)main) return(0); else return(1); }"> try.c;
		$cc -o try $optimize $ccflags $ldflags try.c $libs >/dev/null 2>&1 && tval=true;
		$rm_try;
	fi;
	;;
*)
	case "$tval" in
	$define) tval=true;;
	*) tval=false;;
	esac;
	;;
esac;
eval "$2=$tval"'

: define an is-in-libc? function
inlibc='echo " "; td=$define; tu=$undef;
sym=$1; var=$2; eval "was=\$$2";
tx=yes;
case "$reuseval$was" in
true) ;;
true*) tx=no;;
esac;
case "$tx" in
yes)
	set $sym tres -f;
	eval $csym;
	case "$tres" in
	true)
		echo "$sym() found." >&4;
		case "$was" in $undef) . ./whoa; esac; eval "$var=\$td";;
	*)
		echo "$sym() NOT found." >&4;
		case "$was" in $define) . ./whoa; esac; eval "$var=\$tu";;
	esac;;
*)
	case "$was" in
	$define) echo "$sym() found." >&4;;
	*) echo "$sym() NOT found." >&4;;
	esac;;
esac'

: check for length of double
echo " "
case "$doublesize" in
'')
	echo "Checking to see how big your double precision numbers are..." >&4
	$cat >try.c <<EOCP
#include <stdio.h>
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
int main()
{
    printf("%d\n", (int)sizeof(double));
    exit(0);
}
EOCP
	set try
	if eval $compile_ok; then
		doublesize=`$run ./try`
		echo "Your double is $doublesize bytes long."
	else
		dflt='8'
		echo "(I can't seem to compile the test program.  Guessing...)"
		rp="What is the size of a double precision number (in bytes)?"
		. ./myread
		doublesize="$ans"
	fi
	;;
esac
$rm_try

: see if this is a float.h system
set float.h i_float
eval $inhdr

: check for long doubles
echo " "
echo "Checking to see if you have long double..." >&4
echo 'int main() { long double x = 7.0; }' > try.c
set try
if eval $compile; then
	val="$define"
	echo "You have long double."
else
	val="$undef"
	echo "You do not have long double."
fi
$rm_try
set d_longdbl
eval $setvar

: see if ldexpl exists
set ldexpl d_ldexpl
eval $inlibc

: check for length of long double
case "${d_longdbl}${longdblsize}" in
$define)
	echo " "
	echo "Checking to see how big your long doubles are..." >&4
	$cat >try.c <<'EOCP'
#include <stdio.h>
int main()
{
	printf("%d\n", sizeof(long double));
}
EOCP
	set try
	set try
	if eval $compile; then
		longdblsize=`$run ./try`
		echo "Your long doubles are $longdblsize bytes long."
	else
		dflt='8'
		echo " "
		echo "(I can't seem to compile the test program.  Guessing...)" >&4
		rp="What is the size of a long double (in bytes)?"
		. ./myread
		longdblsize="$ans"
	fi
	if $test "X$doublesize" = "X$longdblsize"; then
		echo "That isn't any different from an ordinary double."
		echo "I'll keep your setting anyway, but you may see some"
		echo "harmless compilation warnings."
	fi
	;;
esac
$rm_try

$echo "Checking the kind of long doubles you have..." >&4
case "$d_longdbl" in
define)
$cat <<EOP >try.c
#$i_float I_FLOAT
#$i_stdlib I_STDLIB
#define LONGDBLSIZE $longdblsize
#define DOUBLESIZE $doublesize
#ifdef I_FLOAT
#include <float.h>
#endif
#ifdef I_STDLIB
#include <stdlib.h>
#endif
#include <stdio.h>
static const long double d = -0.1L;
int main() {
  unsigned const char* b = (unsigned const char*)(&d);
#if DOUBLESIZE == LONGDBLSIZE
  printf("0\n"); /* if it floats like double */
  exit(0);
#endif
#if (LDBL_MANT_DIG == 113 || FLT128_MANT_DIG == 113) && LONGDBLSIZE == 16
  if (b[0] == 0x9A && b[1] == 0x99 && b[15] == 0xBF) {
    /* IEEE 754 128-bit little-endian */
    printf("1\n");
    exit(0);
  }
  if (b[0] == 0xBF && b[14] == 0x99 && b[15] == 0x9A) {
    /* IEEE 128-bit big-endian, e.g. solaris sparc */
    printf("2\n");
    exit(0);
  }
#endif
/* For alignment 32-bit platforms have the 80 bits in 12 bytes,
 * while 64-bits platforms have it in 16 bytes.  The trailing bytes
 * cannot be trusted. */
#if LDBL_MANT_DIG == 64 && (LONGDBLSIZE == 16 || LONGDBLSIZE == 12)
  if (b[0] == 0xCD && b[9] == 0xBF) {
    /* x86 80-bit little-endian, sizeof 12 (ILP32, Solaris x86)
     * or 16 (LP64, Linux and OS X), 4 or 6 bytes of padding.
     * Also known as "extended precision". */
    printf("3\n");
    exit(0);
  }
  if (b[0] == 0xBF && b[9] == 0xCD) {
    /* Is there ever big-endian 80-bit, really?
     *
     * The Motorola 68881 had another "extended precision" format:
     * sign:1 exp:15 zero:16 integer:1 mantissa:63
     * for total of 96 bits of bytes.  The zero bits were unused.
     * See "M68000 FAMILY PROGRAMMER’S REFERENCE MANUAL" for more details.
     * If it ever becomes relevant, this format should be allocated
     * a new doublekind code since it's quite different from the Intel x87.
     */
    printf("4\n");
    exit(0);
  }
#endif
#if (LDBL_MANT_DIG == 106 || LDBL_MANT_DIG == 107) && LONGDBLSIZE == 16
  /* software "double double", the 106 is 53+53.
   * but irix thinks it is 107. */
  if (b[0] == 0x9A && b[7] == 0x3C && b[8] == 0x9A && b[15] == 0xBF) {
    /* double double 128-bit fully little-endian,
     * little-endian doubles in little-endian order,
     * 9a 99 99 99 99 99 59 3c 9a 99 99 99 99 99 b9 bf */
    printf("5\n");
    exit(0);
  }
  if (b[0] == 0xBF && b[7] == 0x9A && b[8] == 0x3C && b[15] == 0x9A) {
    /* double double 128-bit fully big-endian,
     * big-endian doubles in big-endian order,
     * e.g. PPC/Power and MIPS:
     * bf b9 99 99 99 99 99 9a 3c 59 99 99 99 99 99 9a */
    printf("6\n");
    exit(0);
  }
  if (b[0] == 0x9A && b[7] == 0xBF && b[8] == 0x9A && b[15] == 0x3C) {
    /* double double 128-bit mixed endian.
     * little-endian doubles in big-endian order,
     * e.g. ppc64el,
     * 9a 99 99 99 99 99 b9 bf 9a 99 99 99 99 99 59 3c */
    printf("7\n");
    exit(0);
  }
  if (b[0] == 0x3C && b[7] == 0x9A && b[8] == 0xBF && b[15] == 0x9A) {
    /* double double 128-bit mixed endian,
     * big-endian doubles in little-endian order,
     * 3c 59 99 99 99 99 99 9a bf b9 99 99 99 99 99 9a */
    printf("8\n");
    exit(0);
  }
#endif
  printf("-1\n"); /* unknown */
  exit(0);
}
EOP
set try
if eval $compile; then
    longdblkind=`$run ./try`
else
    longdblkind=-1
fi
;;
*) longdblkind=0 ;;
esac
case "$longdblkind" in
0) echo "Your long doubles are doubles." >&4 ;;
1) echo "You have IEEE 754 128-bit little endian long doubles." >&4 ;;
2) echo "You have IEEE 754 128-bit big endian long doubles." >&4 ;;
3) echo "You have x86 80-bit little endian long doubles." >& 4 ;;
4) echo "You have x86 80-bit big endian long doubles." >& 4 ;;
5) echo "You have 128-bit fully little-endian double-double long doubles (64-bit LEs in LE)." >& 4 ;;
6) echo "You have 128-bit fully big-endian double-double long doubles (64-bit BEs in BE)." >& 4 ;;
7) echo "You have 128-bit mixed double-double long doubles (64-bit LEs in BE)." >& 4 ;;
8) echo "You have 128-bit mixed double-double long doubles (64-bit BEs in LE)." >& 4 ;;
*) echo "Cannot figure out your long double." >&4 ;;
esac
$rm_try

: determine the architecture name
echo " "
if xxx=`./loc arch blurfl $pth`; $test -f "$xxx"; then
	tarch=`arch`"-$osname"
elif xxx=`./loc uname blurfl $pth`; $test -f "$xxx" ; then
	if uname -m > tmparch 2>&1 ; then
		tarch=`$sed -e 's/ *$//' -e 's/ /_/g' \
			-e 's/$/'"-$osname/" tmparch`
	else
		tarch="$osname"
	fi
	$rm -f tmparch
else
	tarch="$osname"
fi
case "$myarchname" in
''|"$tarch") ;;
*)
	echo "(Your architecture name used to be $myarchname.)"
	archname=''
	;;
esac
case "$targetarch" in
'') ;;
*)  archname=`echo $targetarch|sed 's,^[^-]*-,,'` ;;
esac
myarchname="$tarch"
case "$archname" in
'') dflt="$tarch";;
*) dflt="$archname";;
esac
rp='What is your architecture name'
. ./myread
archname="$ans"

: optionally add API version to the architecture for versioned archlibs
case "$useversionedarchname" in
$define|true|[yY]*) dflt='y';;
*)                  dflt='n';;
esac
rp='Add the Perl API version to your archname?'
. ./myread
case "$ans" in
y|Y)	useversionedarchname="$define" ;;
*)      useversionedarchname="$undef" ;;
esac
case "$useversionedarchname" in
$define)
	case "$archname" in
	*-$api_versionstring)
		echo "...and architecture name already has -$api_versionstring" >&4
		;;
	*)
		archname="$archname-$api_versionstring"
		echo "...setting architecture name to $archname." >&4
		;;
	esac
	;;
esac

case "$usethreads" in
$define)
	echo "Threads selected." >&4
	case "$archname" in
	*-thread*) echo "...and architecture name already has -thread." >&4
		;;
	*)      archname="$archname-thread"
		echo "...setting architecture name to $archname." >&4
		;;
	esac
	;;
esac
case "$usemultiplicity" in
$define)
	echo "Multiplicity selected." >&4
	case "$archname" in
	*-multi*) echo "...and architecture name already has -multi." >&4
		;;
	*)      archname="$archname-multi"
		echo "...setting architecture name to $archname." >&4
		;;
	esac
	;;
esac
case "$use64bitint$use64bitall" in
*"$define"*)
	case "$archname64" in
	'')
		echo "This architecture is naturally 64-bit, not changing architecture name." >&4
		;;
	*)
		case "$use64bitint" in
		"$define") echo "64 bit integers selected." >&4 ;;
		esac
		case "$use64bitall" in
		"$define") echo "Maximal 64 bitness selected." >&4 ;;
		esac
		case "$archname" in
		*-$archname64*) echo "...and architecture name already has $archname64." >&4
			;;
		*)      archname="$archname-$archname64"
			echo "...setting architecture name to $archname." >&4
			;;
		esac
		;;
	esac
esac
case "$uselongdouble" in
$define)
	echo "Long doubles selected." >&4
	case "$longdblsize" in
	$doublesize)
		echo "...but long doubles are equal to doubles, not changing architecture name." >&4
		;;
	*)
		case "$archname" in
		*-ld*) echo "...and architecture name already has -ld." >&4
			;;
		*)      archname="$archname-ld"
			echo "...setting architecture name to $archname." >&4
			;;
		esac
		;;
	esac
	;;
esac
case "$usequadmath" in
$define)
	echo "quadmath selected." >&4
	case "$archname" in
	*-ld*) echo "...and architecture name already has -quadmath." >&4
		;;
	*)      archname="$archname-quadmath"
		echo "...setting architecture name to $archname." >&4
		;;
	esac
	;;
esac
if $test -f archname.cbu; then
	echo "Your platform has some specific hints for architecture name, using them..."
	. ./archname.cbu
fi

: set the prefixit variable, to compute a suitable default value
prefixit='case "$3" in
""|none)
	case "$oldprefix" in
	"") eval "$1=\"\$$2\"";;
	*)
		case "$3" in
		"") eval "$1=";;
		none)
			eval "tp=\"\$$2\"";
			case "$tp" in
			""|" ") eval "$1=\"\$$2\"";;
			*) eval "$1=";;
			esac;;
		esac;;
	esac;;
*)
	eval "tp=\"$oldprefix-\$$2-\""; eval "tp=\"$tp\"";
	case "$tp" in
	--|/*--|\~*--) eval "$1=\"$prefix/$3\"";;
	/*-$oldprefix/*|\~*-$oldprefix/*)
		eval "$1=\`echo \$$2 | sed \"s,^$oldprefix,$prefix,\"\`";;
	*) eval "$1=\"\$$2\"";;
	esac;;
esac'

: determine installation style
: For now, try to deduce it from prefix unless it is already set.
: Reproduce behavior of 5.005 and earlier, maybe drop that in 5.7.
case "$installstyle" in
'')	case "$prefix" in
		*perl*) dflt='lib';;
		*) dflt='lib/perl5' ;;
	esac
	;;
*)	dflt="$installstyle" ;;
esac
: Probably not worth prompting for this since we prompt for all
: the directories individually, and the prompt would be too long and
: confusing anyway.
installstyle=$dflt

: determine where public executables go
echo " "
set dflt bin bin
eval $prefixit
fn=d~
rp='Pathname where the public executables will reside?'
. ./getfile
if $test "X$ansexp" != "X$binexp"; then
	installbin=''
fi
prefixvar=bin
: XXX Bug? -- ignores Configure -Dinstallprefix setting.
: XXX If this is fixed, also fix the "start perl" hunk below, which relies on
:     this via initialinstalllocation
. ./setprefixvar

case "$userelocatableinc" in
$define|true|[yY]*)	dflt='y' ;;
*)			dflt='n' ;;
esac
cat <<EOM

Would you like to build Perl so that the installation is relocatable, so that
library paths in @@INC are determined relative to the path of the perl binary?
This is not advised for system Perl installs, or if you need to run setid
scripts or scripts under taint mode.

If this doesn't make any sense to you, just accept the default '$dflt'.
EOM
rp='Use relocatable @@INC?'
. ./myread
case "$ans" in
y|Y)	val="$define" ;;
*)	val="$undef"  ;;
esac
set userelocatableinc
eval $setvar

initialinstalllocation="$binexp"
: Default prefix is now "up one level from where the binaries are"
case "$userelocatableinc" in
$define|true|[yY]*)
    bin=".../"
    binexp=".../"
    prefix=".../.."
    prefixexp=".../.."
    installprefixexp=".../.."
    ;;
esac

: determine where private library files go
: Usual default is /usr/local/lib/perl5/$version.
: Also allow things like /opt/perl/lib/$version, since
: /opt/perl/lib/perl5... would be redundant.
: The default "style" setting is made in installstyle.U
case "$installstyle" in
*lib/perl5*) set dflt privlib lib/$package/$version ;;
*)	 set dflt privlib lib/$version ;;
esac
eval $prefixit
$cat <<EOM

There are some auxiliary files for $package that need to be put into a
private library directory that is accessible by everyone.

EOM
fn=$binexp
fn=d~+
rp='Pathname where the private library files will reside?'
. ./getfile
prefixvar=privlib
. ./setprefixvar

: set the prefixup variable, to restore leading tilda escape
prefixup='case "$prefixexp" in
"$prefix") ;;
*) eval "$1=\`echo \$$1 | sed \"s,^$prefixexp,$prefix,\"\`";;
esac'

: determine where public architecture dependent libraries go
set archlib archlib
eval $prefixit
: privlib default is /usr/local/lib/$package/$version
: archlib default is /usr/local/lib/$package/$version/$archname
: privlib may have an optional trailing /share.
tdflt=`echo $privlib | $sed 's,/share$,,'`
tdflt=$tdflt/$archname
case "$archlib" in
'')	dflt=$tdflt
	;;
*)	dflt="$archlib"
    ;;
esac
$cat <<EOM

$spackage contains architecture-dependent library files.  If you are
sharing libraries in a heterogeneous environment, you might store
these files in a separate location.  Otherwise, you can just include
them with the rest of the public library files.

EOM
fn=$binexp
fn=d+~
rp='Where do you want to put the public architecture-dependent libraries?'
. ./getfile
prefixvar=archlib
. ./setprefixvar
if $test X"$archlib" = X"$privlib"; then
	d_archlib="$undef"
else
	d_archlib="$define"
fi

: see if setuid scripts can be secure
$cat <<EOM

Some kernels have a bug that prevents setuid #! scripts from being
secure.  Some sites have disabled setuid #! scripts because of this.

First let's decide if your kernel supports secure setuid #! scripts.
(If setuid #! scripts would be secure but have been disabled anyway,
don't say that they are secure if asked.)

EOM

val="$undef"
if $test -d /dev/fd; then
	echo "#!$ls" >reflect
	chmod +x,u+s reflect
	./reflect >flect 2>&1
	if $contains "/dev/fd" flect >/dev/null; then
		echo "Congratulations, your kernel has secure setuid scripts!" >&4
		val="$define"
	else
		$cat <<EOM
If you are not sure if they are secure, I can check but I'll need a
username and password different from the one you are using right now.
If you don't have such a username or don't want me to test, simply
enter 'none'.

EOM
		rp='Other username to test security of setuid scripts with?'
		dflt='none'
		. ./myread
		case "$ans" in
		n|none)
			case "$d_suidsafe" in
			'')	echo "I'll assume setuid scripts are *not* secure." >&4
				dflt=n;;
			"$undef")
				echo "Well, the $hint value is *not* secure." >&4
				dflt=n;;
			*)	echo "Well, the $hint value *is* secure." >&4
				dflt=y;;
			esac
			;;
		*)
			$rm -f reflect flect
			echo "#!$ls" >reflect
			chmod +x,u+s reflect
			echo >flect
			chmod a+w flect
			echo '"su" will (probably) prompt you for '"$ans's password."
			su $ans -c './reflect >flect'
			if $contains "/dev/fd" flect >/dev/null; then
				echo "Okay, it looks like setuid scripts are secure." >&4
				dflt=y
			else
				echo "I don't think setuid scripts are secure." >&4
				dflt=n
			fi
			;;
		esac
		rp='Does your kernel have *secure* setuid scripts?'
		. ./myread
		case "$ans" in
		[yY]*)	val="$define";;
		*)	val="$undef";;
		esac
	fi
else
	echo "I don't think setuid scripts are secure (no /dev/fd directory)." >&4
	echo "(That's for file descriptors, not floppy disks.)"
	val="$undef"
fi
set d_suidsafe
eval $setvar

$rm -f reflect flect

: now see if they want to do setuid emulation
if $test $patchlevel -lt 11; then
echo " "
val="$undef"
case "$d_suidsafe" in
"$define")
	val="$undef"
	echo "No need to emulate SUID scripts since they are secure here." >&4
	;;
*)
	$cat <<EOM
Some systems have disabled setuid scripts, especially systems where
setuid scripts cannot be secure.  On systems where setuid scripts have
been disabled, the setuid/setgid bits on scripts are currently
useless.  It is possible for $package to detect those bits and emulate
setuid/setgid in a secure fashion.  This emulation will only work if
setuid scripts have been disabled in your kernel.

EOM
	case "$d_dosuid" in
	"$define") dflt=y ;;
	*) dflt=n ;;
	esac
	rp="Do you want to do setuid/setgid emulation?"
	. ./myread
	case "$ans" in
	[yY]*)	val="$define";;
	*)	val="$undef";;
	esac
	;;
esac
set d_dosuid
eval $setvar
else
    case "$d_dosuid" in
	"$define")
	cat >&4 <<EOH

SUID emulation has been removed for 5.12
Please re-run Configure without -Dd_dosuid

EOH
	exit 1;
	;;
    esac
    d_dosuid=undef
fi

: Find perl5.005 or later.
echo "Looking for a previously installed perl5.005 or later... "
case "$perl5" in
'')	for tdir in `echo "$binexp$path_sep$PATH" | $sed "s/$path_sep/ /g"`; do
		: Check if this perl is recent and can load a simple module
		if $test -x $tdir/perl$exe_ext && $tdir/perl -Mless -e 'use 5.005;' >/dev/null 2>&1; then
			perl5=$tdir/perl
			break;
		elif $test -x $tdir/perl5$exe_ext && $tdir/perl5 -Mless -e 'use 5.005;' >/dev/null 2>&1; then
			perl5=$tdir/perl5
			break;
		fi
	done
	;;
*)	perl5="$perl5"
	;;
esac
case "$perl5" in
'')	echo "None found.  That's ok.";;
*)	echo "Using $perl5." ;;
esac

: Set the siteprefix variables
$cat <<EOM

After $package is installed, you may wish to install various
add-on modules and utilities.  Typically, these add-ons will
be installed under $prefix with the rest
of this package.  However, you may wish to install such add-ons
elsewhere under a different prefix.

If you do not wish to put everything under a single prefix, that's
ok.  You will be prompted for the individual locations; this siteprefix
is only used to suggest the defaults.

The default should be fine for most people.

EOM
fn=d~+
rp='Installation prefix to use for add-on modules and utilities?'
: XXX Here might be another good place for an installstyle setting.
case "$siteprefix" in
'') dflt=$prefix ;;
*)  dflt=$siteprefix ;;
esac
. ./getfile
: XXX Prefixit unit does not yet support siteprefix and vendorprefix
oldsiteprefix=''
case "$siteprefix" in
'') ;;
*)	case "$ans" in
	"$prefix") ;;
	*) oldsiteprefix="$prefix";;
	esac
	;;
esac
siteprefix="$ans"
siteprefixexp="$ansexp"

: determine where site specific libraries go.
: Usual default is /usr/local/lib/perl5/site_perl/$version
: The default "style" setting is made in installstyle.U
: XXX No longer works with Prefixit stuff.
prog=`echo $package | $sed 's/-*[0-9.]*$//'`
case "$sitelib" in
'') case "$installstyle" in
	*lib/perl5*) dflt=$siteprefix/lib/$package/site_$prog/$version ;;
	*)	 dflt=$siteprefix/lib/site_$prog/$version ;;
	esac
	;;
*)	dflt="$sitelib"
	;;
esac
$cat <<EOM

The installation process will create a directory for
site-specific extensions and modules.  Most users find it convenient
to place all site-specific files in this directory rather than in the
main distribution directory.

EOM
fn=d~+
rp='Pathname for the site-specific library files?'
. ./getfile
prefixvar=sitelib
. ./setprefixvar
sitelib_stem=`echo "$sitelibexp" | sed "s,/$version$,,"`

: Determine list of previous versions to include in @@INC
$cat > getverlist <<EOPL
#!$perl5 -w
use File::Basename;
\$api_versionstring = "$api_versionstring";
\$version = "$version";
\$stem = "$sitelib_stem";
\$archname = "$archname";
EOPL
	$cat >> getverlist <<'EOPL'
# The list found is store twice for each entry: the original name, and
# the binary broken down version as pack "sss", so sorting is easy and
# unambiguous. This will work for all versions that have a maximum of
# three digit groups, separate by '.'s or '_'s. Names are extended with
# ".0.0" to ensure at least three elements for the pack.
#					-- H.Merijn Brand (m)'06 23-10-2006

# Can't have leading @@ because metaconfig interprets it as a command!
;@@inc_version_list=();
# XXX Redo to do opendir/readdir?
if (-d $stem) {
    chdir($stem);
    ;@@candidates = map {
	[ $_, pack "sss", split m/[._]/, "$_.0.0" ] } glob("5.*");
    ;@@candidates = sort { $a->[1] cmp $b->[1]} @@candidates;
}
else {
    ;@@candidates = ();
}

($pversion, $aversion, $vsn5005) = map {
    pack "sss", split m/[._]/, "$_.0.0" } $version, $api_versionstring, "5.005";
foreach $d (@@candidates) {
    if ($d->[1] lt $pversion) {
	if ($d->[1] ge $aversion) {
	    unshift(@@inc_version_list, grep { -d } $d->[0]."/$archname", $d->[0]);
	}
	elsif ($d->[1] ge $vsn5005) {
	    unshift(@@inc_version_list, grep { -d } $d->[0]);
	}
    }
    else {
	# Skip newer version.  I.e. don't look in
	# 5.7.0 if we're installing 5.6.1.
    }
}

if (@@inc_version_list) {
    print join(' ', @@inc_version_list);
}
else {
    # Blank space to preserve value for next Configure run.
    print " ";
}
EOPL
chmod +x getverlist
case "$inc_version_list" in
'')	if test -x "$perl5$exe_ext"; then
		dflt=`$perl5 getverlist`
	else
		dflt='none'
	fi
	;;
$undef) dflt='none' ;;
*)  eval dflt=\"$inc_version_list\" ;;
esac
case "$dflt" in
''|' ') dflt=none ;;
esac
case "$dflt" in
5.005) dflt=none ;;
esac
$cat <<EOM

In order to ease the process of upgrading, this version of perl
can be configured to use modules built and installed with earlier
versions of perl that were installed under $prefix.  Specify here
the list of earlier versions that this version of perl should check.
If Configure detected no earlier versions of perl installed under
$prefix, then the list will be empty.  Answer 'none' to tell perl
to not search earlier versions.

The default should almost always be sensible, so if you're not sure,
just accept the default.
EOM

rp='List of earlier versions to include in @@INC?'
. ./myread
case "$ans" in
[Nn]one|''|' '|$undef) inc_version_list=' ' ;;
*) inc_version_list="$ans" ;;
esac
case "$inc_version_list" in
''|' ')
	inc_version_list_init='0'
	d_inc_version_list="$undef"
	;;
*)	inc_version_list_init=`echo $inc_version_list |
		$sed -e 's/^/"/' -e 's/ /","/g' -e 's/$/",0/'`
	d_inc_version_list="$define"
	;;
esac
$rm -f getverlist

: see if malloc/malloc.h has to be included
set malloc/malloc.h i_mallocmalloc
eval $inhdr

: see if this is a malloc.h system
: we want a real compile instead of Inhdr because some systems have a
: malloc.h that just gives a compile error saying to use stdlib.h instead
echo " "
$cat >try.c <<EOCP
#include <stdlib.h>
#include <malloc.h>
#$i_mallocmalloc I_MALLOCMALLOC
#ifdef I_MALLOCMALLOC
# include <malloc/malloc.h>
#endif

int main () { return 0; }
EOCP
set try
if eval $compile; then
    echo "<malloc.h> found." >&4
    val="$define"
else
    echo "<malloc.h> NOT found." >&4
    val="$undef"
fi
$rm_try
set i_malloc
eval $setvar

: check for length of pointer
echo " "
case "$ptrsize" in
'')
	echo "Checking to see how big your pointers are..." >&4
	$cat >try.c <<EOCP
#include <stdio.h>
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
int main()
{
    printf("%d\n", (int)sizeof(void *));
    exit(0);
}
EOCP
	set try
	if eval $compile_ok; then
		ptrsize=`$run ./try`
		echo "Your pointers are $ptrsize bytes long."
	else
		dflt='4'
		echo "(I can't seem to compile the test program.  Guessing...)" >&4
		rp="What is the size of a pointer (in bytes)?"
		. ./myread
		ptrsize="$ans"
	fi
	;;
esac
$rm_try
case "$use64bitall" in
"$define"|true|[yY]*)
	case "$ptrsize" in
	4)	cat <<EOM >&4

*** You have chosen a maximally 64-bit build,
*** but your pointers are only 4 bytes wide.
*** Please rerun Configure without -Duse64bitall.
EOM
		case "$d_quad" in
		define)
			cat <<EOM >&4
*** Since you have quads, you could possibly try with -Duse64bitint.
EOM
			;;
		esac
		cat <<EOM >&4
*** Cannot continue, aborting.

EOM

		exit 1
		;;
	esac
	;;
esac


: determine whether to use malloc wrapping
echo " "
case "$usemallocwrap" in
[yY]*|true|$define)	dflt='y' ;;
[nN]*|false|$undef)	dflt='n' ;;
*)	case "$usedevel" in
	[yY]*|true|$define)	dflt='y' ;;
	*) dflt='n' ;;
	esac
	;;
esac
rp="Do you wish to wrap malloc calls to protect against potential overflows?"
. ./myread
usemallocwrap="$ans"
case "$ans" in
y*|true)
	usemallocwrap="$define" ;;
*)
	usemallocwrap="$undef" ;;
esac

: determine which malloc to compile in
echo " "
case "$usemymalloc" in
[yY]*|true|$define)	dflt='y' ;;
[nN]*|false|$undef)	dflt='n' ;;
*)	case "$ptrsize" in
	4) dflt='y' ;;
	*) dflt='n' ;;
	esac
	if test "$useithreads" = "$define"; then dflt='n'; fi
	;;
esac
rp="Do you wish to attempt to use the malloc that comes with $package?"
. ./myread
usemymalloc="$ans"
case "$ans" in
y*|true)
	usemymalloc='y'
	mallocsrc='malloc.c'
	mallocobj="malloc$_o"
	d_mymalloc="$define"
	case "$libs" in
	*-lmalloc*)
		: Remove malloc from list of libraries to use
		echo "Removing unneeded -lmalloc from library list" >&4
		set `echo X $libs | $sed -e 's/-lmalloc / /' -e 's/-lmalloc$//'`
		shift
		libs="$*"
		echo "libs = $libs" >&4
		;;
	esac
	;;
*)
	usemymalloc='n'
	mallocsrc=''
	mallocobj=''
	d_mymalloc="$undef"
	;;
esac

: compute the return types of malloc and free
echo " "
$cat >malloc.c <<END
#$i_malloc I_MALLOC
#$i_stdlib I_STDLIB
#include <stdio.h>
#include <sys/types.h>
#ifdef I_MALLOC
#include <malloc.h>
#endif
#ifdef I_STDLIB
#include <stdlib.h>
#endif
#ifdef TRY_MALLOC
void *malloc();
#endif
#ifdef TRY_FREE
void free();
#endif
END
case "$malloctype" in
'')
	if $cc $ccflags -c -DTRY_MALLOC malloc.c >/dev/null 2>&1; then
		malloctype='void *'
	else
		malloctype='char *'
	fi
	;;
esac
echo "Your system wants malloc to return '$malloctype', it would seem." >&4

case "$freetype" in
'')
	if $cc $ccflags -c -DTRY_FREE malloc.c >/dev/null 2>&1; then
		freetype='void'
	else
		freetype='int'
	fi
	;;
esac
echo "Your system uses $freetype free(), it would seem." >&4
$rm -f malloc.[co]
: determine where site specific architecture-dependent libraries go.
: sitelib  default is /usr/local/lib/perl5/site_perl/$version
: sitearch default is /usr/local/lib/perl5/site_perl/$version/$archname
: sitelib may have an optional trailing /share.
case "$sitearch" in
'')	dflt=`echo $sitelib | $sed 's,/share$,,'`
	dflt="$dflt/$archname"
	;;
*)	dflt="$sitearch"
	;;
esac
set sitearch sitearch none
eval $prefixit
$cat <<EOM

The installation process will also create a directory for
architecture-dependent site-specific extensions and modules.

EOM
fn=d~+
rp='Pathname for the site-specific architecture-dependent library files?'
. ./getfile
prefixvar=sitearch
. ./setprefixvar
if $test X"$sitearch" = X"$sitelib"; then
	d_sitearch="$undef"
else
	d_sitearch="$define"
fi

: Set the vendorprefix variables
$cat <<EOM

The installation process will also create a directory for
vendor-supplied add-ons.  Vendors who supply perl with their system
may find it convenient to place all vendor-supplied files in this
directory rather than in the main distribution directory.  This will
ease upgrades between binary-compatible maintenance versions of perl.

Of course you may also use these directories in whatever way you see
fit.  For example, you might use them to access modules shared over a
company-wide network.

The default answer should be fine for most people.
This causes further questions about vendor add-ons to be skipped
and no vendor-specific directories will be configured for perl.

EOM
rp='Do you want to configure vendor-specific add-on directories?'
case "$usevendorprefix" in
define|true|[yY]*) dflt=y ;;
*)	: User may have set vendorprefix directly on Configure command line.
	case "$vendorprefix" in
	''|' ') dflt=n ;;
	*)	dflt=y ;;
	esac
	;;
esac
. ./myread
case "$ans" in
[yY]*)	fn=d~+
	rp='Installation prefix to use for vendor-supplied add-ons?'
	case "$vendorprefix" in
	'') dflt="$prefix" ;;
	*)  dflt=$vendorprefix ;;
	esac
	. ./getfile
	: XXX Prefixit unit does not yet support siteprefix and vendorprefix
	oldvendorprefix=''
	case "$vendorprefix" in
	'') ;;
	*)	case "$ans" in
		"$prefix") ;;
		*) oldvendorprefix="$prefix";;
		esac
		;;
	esac
	usevendorprefix="$define"
	vendorprefix="$ans"
	vendorprefixexp="$ansexp"
	;;
*)	usevendorprefix="$undef"
	vendorprefix=''
	vendorprefixexp=''
	;;
esac

: Set the vendorlib variables
case "$vendorprefix" in
'')	d_vendorlib="$undef"
	vendorlib=''
	vendorlibexp=''
	;;
*)	d_vendorlib="$define"
	: determine where vendor-supplied modules go.
	: Usual default is /usr/local/lib/perl5/vendor_perl/$version
	case "$vendorlib" in
	'')
		prog=`echo $package | $sed 's/-*[0-9.]*$//'`
		case "$installstyle" in
		*lib/perl5*) dflt=$vendorprefix/lib/$package/vendor_$prog/$version ;;
		*)	     dflt=$vendorprefix/lib/vendor_$prog/$version ;;
		esac
		;;
	*)	dflt="$vendorlib"
		;;
	esac
	fn=d~+
	rp='Pathname for the vendor-supplied library files?'
	. ./getfile
	vendorlib="$ans"
	vendorlibexp="$ansexp"
	;;
esac
vendorlib_stem=`echo "$vendorlibexp" | sed "s,/$version$,,"`
prefixvar=vendorlib
. ./installprefix

: Set the vendorarch variables
case "$vendorprefix" in
'')	d_vendorarch="$undef"
	vendorarch=''
	vendorarchexp=''
	;;
*)	d_vendorarch="$define"
	: determine where vendor-supplied architecture-dependent libraries go.
	: vendorlib  default is /usr/local/lib/perl5/vendor_perl/$version
	: vendorarch default is /usr/local/lib/perl5/vendor_perl/$version/$archname
	: vendorlib may have an optional trailing /share.
	case "$vendorarch" in
	'')	dflt=`echo $vendorlib | $sed 's,/share$,,'`
		dflt="$dflt/$archname"
		;;
	*)	dflt="$vendorarch" ;;
	esac
	fn=d~+
	rp='Pathname for vendor-supplied architecture-dependent files?'
	. ./getfile
	vendorarch="$ans"
	vendorarchexp="$ansexp"
	;;
esac
prefixvar=vendorarch
. ./installprefix
if $test X"$vendorarch" = X"$vendorlib"; then
	d_vendorarch="$undef"
else
	d_vendorarch="$define"
fi

: Final catch-all directories to search
$cat <<EOM

Lastly, you can have perl look in other directories for extensions and
modules in addition to those already specified.
These directories will be searched after
	$sitearch
	$sitelib
EOM
test X"$vendorlib" != "X" && echo '	' $vendorlib
test X"$vendorarch" != "X" && echo '	' $vendorarch
echo ' '
case "$otherlibdirs" in
''|' ') dflt='none' ;;
*)	dflt="$otherlibdirs" ;;
esac
$cat <<EOM
Enter a colon-separated set of extra paths to include in perl's @@INC
search path, or enter 'none' for no extra paths.

EOM

rp='Colon-separated list of additional directories for perl to search?'
. ./myread
case "$ans" in
' '|''|none)	otherlibdirs=' ' ;;
*)	otherlibdirs="$ans" ;;
esac
case "$otherlibdirs" in
' ') val=$undef ;;
*)	val=$define ;;
esac
set d_perl_otherlibdirs
eval $setvar

: Cruising for prototypes
echo " "
echo "Checking out function prototypes..." >&4
$cat >prototype.c <<EOCP
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
int main(int argc, char *argv[]) {
	exit(0);}
EOCP
if $cc $ccflags -c prototype.c >prototype.out 2>&1 ; then
	echo "Your C compiler appears to support function prototypes."
	val="$define"
else
	echo "Your C compiler doesn't seem to understand function prototypes."
	val="$undef"
fi
set prototype
eval $setvar
$rm -f prototype*

: Check if ansi2knr is required
case "$prototype" in
"$define") ;;
*)	ansi2knr='ansi2knr'
	echo " "
	cat <<EOM >&4

$me:  FATAL ERROR:
This version of $package can only be compiled by a compiler that
understands function prototypes.  Unfortunately, your C compiler
	$cc $ccflags
doesn't seem to understand them.  Sorry about that.

If GNU cc is available for your system, perhaps you could try that instead.

Eventually, we hope to support building Perl with pre-ANSI compilers.
If you would like to help in that effort, please contact <perlbug@@perl.org>.

Aborting Configure now.
EOM
	exit 2
	;;
esac

: DTrace support
dflt_dtrace='/usr/sbin/dtrace'
$test -x /usr/bin/dtrace && dflt_dtrace='/usr/bin/dtrace'

cat <<EOM

Perl can be built to support DTrace on platforms that support it.
DTrace is a diagnosis and performance analysis tool from Sun.

If this doesn't make any sense to you, just accept the default.
EOM

while $test 1 ; do
	case "$usedtrace" in
	$define|true|[yY]*)
		dflt='y'
		;;
	?*)
		dflt='y'
		dflt_dtrace=$usedtrace
		;;
	*)
		dflt='n'
		;;
	esac

	rp='Support DTrace if available?'
	. ./myread
	case "$ans" in
	y|Y)	val="$define" ;;
	*)      val="$undef" ;;
	esac
	set usedtrace
	eval $setvar

	test "X$usedtrace" != "X$define" && break

	echo " "
	rp='Where is the dtrace executable?'
	dflt=$dflt_dtrace
	. ./getfile
	val="$ans"
	set dtrace
	eval $setvar

	if $test -f $dtrace
	then
		if $dtrace -h -s ../perldtrace.d \
			-o perldtrace.tmp >/dev/null 2>&1 \
			&& rm -f perldtrace.tmp
		then
			echo " "
			echo "Good: your $dtrace knows about the -h flag."
		else
			cat >&2 <<EOM

*** $me:  Fatal Error:  $dtrace doesn't support -h flag
***
*** Your installed dtrace doesn't support the -h switch to compile a D
*** program into a C header. Can't continue.

EOM
			exit 1
		fi
		break;
	fi

	case "$fastread" in
	yes)
		cat >&2 <<EOM

*** $me:  Fatal Error:  $dtrace not found.
*** Can't continue.

EOM
		exit 1
		;;
	*)
		echo "*** $dtrace was not found."
		echo " "
		;;
	esac
done

: See if we want extra modules installed
echo " "
case "$extras" in
'') dflt='n';;
*) dflt='y';;
esac
cat <<EOM
Perl can be built with extra modules or bundles of modules which
will be fetched from the CPAN and installed alongside Perl.

Notice that you will need access to the CPAN; either via the Internet,
or a local copy, for example a CD-ROM or a local CPAN mirror.  (You will
be asked later to configure the CPAN.pm module which will in turn do
the installation of the rest of the extra modules or bundles.)

Notice also that if the modules require any external software such as
libraries and headers (the libz library and the zlib.h header for the
Compress::Zlib module, for example) you MUST have any such software
already installed, this configuration process will NOT install such
things for you.

If this doesn't make any sense to you, just accept the default '$dflt'.
EOM
rp='Install any extra modules (y or n)?'
. ./myread
case "$ans" in
y|Y)
	cat <<EOM

Please list any extra modules or bundles to be installed from CPAN,
with spaces between the names.  The names can be in any format the
'install' command of CPAN.pm will understand.  (Answer 'none',
without the quotes, to install no extra modules or bundles.)
EOM
	rp='Extras?'
	dflt="$extras"
	. ./myread
	extras="$ans"
esac
case "$extras" in
''|'none')
	val=''
	$rm -f ../extras.lst
	;;
*)	echo "(Saving the list of extras for later...)"
	echo "$extras" > ../extras.lst
	val="'$extras'"
	;;
esac
set extras
eval $setvar
echo " "

: determine where html pages for programs go
set html1dir html1dir none
eval $prefixit
$cat <<EOM

If you wish to install html files for programs in $spackage, indicate
the appropriate directory here.  To skip installing html files,
answer "none".
EOM
case "$html1dir" in
''|none|$undef|' ') dflt=none ;;
*) dflt=$html1dir ;;
esac
fn=dn+~
rp="Directory for the main $spackage html pages?"
. ./getfile
prefixvar=html1dir
. ./setprefixvar
: Use ' ' for none so value is preserved next time through Configure
$test X"$html1dir" = "X" && html1dir=' '

: determine where html pages for libraries and modules go
set html3dir html3dir none
eval $prefixit
$cat <<EOM

If you wish to install html files for modules associated with $spackage,
indicate the appropriate directory here.  To skip installing html files,
answer "none".
EOM
: There is no obvious default.  If they have specified html1dir, then
: try to key off that, possibly changing .../html1 into .../html3.
case "$html3dir" in
'') html3dir=`echo "$html1dir" | $sed 's/1$/3$/'` ;;
*) dflt=$html3dir ;;
esac
fn=dn+~
rp="Directory for the $spackage module html pages?"
. ./getfile
prefixvar=html3dir
. ./setprefixvar
: Use ' ' for none so value is preserved next time through Configure
$test X"$html3dir" = "X" && html3dir=' '

: determine whether to install perl also as /usr/bin/perl

echo " "
if $test -d /usr/bin -a "X$installbin" != X/usr/bin; then
	$cat <<EOM
Many scripts expect perl to be installed as /usr/bin/perl.

If you want to, I can install the perl you are about to compile
as /usr/bin/perl (in addition to $bin/perl).
EOM
	if test -f /usr/bin/perl; then
	    $cat <<EOM

However, please note that because you already have a /usr/bin/perl,
overwriting that with a new Perl would very probably cause problems.
Therefore I'm assuming you don't want to do that (unless you insist).

EOM
	    case "$installusrbinperl" in
	    "$define"|[yY]*)	dflt='y';;
	    *)			dflt='n';;
	    esac
	else
	    $cat <<EOM

Since you don't have a /usr/bin/perl I'm assuming creating one is okay.

EOM
	    case "$installusrbinperl" in
	    "$undef"|[nN]*)	dflt='n';;
	    *)			dflt='y';;
	    esac
	fi
	rp="Do you want to install perl as /usr/bin/perl?"
	. ./myread
	case "$ans" in
	[yY]*)	val="$define";;
	*)	val="$undef" ;;
	esac
else
	val="$undef"
fi
set installusrbinperl
eval $setvar

: see if dlopen exists
xxx_runnm="$runnm"
xxx_ccflags="$ccflags"
runnm=false
: with g++ one needs -shared to get is-in-libc to work for dlopen
case "$gccversion" in
'')	;;
*Clang*)	;;
*)	case "$d_cplusplus" in
	"$define") ccflags="$ccflags -shared" ;;
	esac
	;;
esac
set dlopen d_dlopen
eval $inlibc
runnm="$xxx_runnm"
ccflags="$xxx_ccflags"

: see if this is a unistd.h system
set unistd.h i_unistd
eval $inhdr

: determine which dynamic loading, if any, to compile in
echo " "
dldir="ext/DynaLoader"
case "$usedl" in
    $define|y|true)
	dflt='y'
	usedl="$define"
	;;
    $undef|n|false)
	dflt='n'
	usedl="$undef"
	;;
    *)
	dflt='n'
	case "$d_dlopen" in
	    $define) dflt='y' ;;
	esac
	: Does a dl_xxx.xs file exist for this operating system
	$test -f $rsrc/$dldir/dl_${osname}.xs && dflt='y'
	;;
esac
rp="Do you wish to use dynamic loading?"
. ./myread
usedl="$ans"
bin_ELF="$undef"
case "$ans" in
    y*) usedl="$define"
	case "$dlsrc" in
	    '') if $test -f $rsrc/$dldir/dl_${osname}.xs ; then
		    dflt="$dldir/dl_${osname}.xs"
		elif $test "$d_dlopen" = "$define" ; then
		    dflt="$dldir/dl_dlopen.xs"
		else
		    dflt=''
		fi
		;;
	    *)  dflt="$dldir/$dlsrc"
		;;
	esac
	echo "The following dynamic loading files are available:"
	: Can not go over to $dldir because getfile has path hard-coded in.
	tdir=`pwd`; cd "$rsrc"; $ls -C $dldir/dl*.xs; cd "$tdir"
	rp="Source file to use for dynamic loading"
	fn="fne"
	gfpth="$src"
	. ./getfile
	usedl="$define"
	: emulate basename
	dlsrc=`echo $ans | $sed -e 's%.*/\([^/]*\)$%\1%'`

	$cat << EOM

Some systems may require passing special flags to $cc -c to
compile modules that will be used to create a shared library.
To use no flags, say "none".

EOM
	case "$cccdlflags" in
	    '') case "$gccversion" in
		'') case "$osname" in
			hpux)	dflt='+z' ;;
			irix*)	dflt='-KPIC' ;;
			svr4*|esix*|solaris|nonstopux) dflt='-KPIC' ;;
			sunos)	dflt='-pic' ;;
			*)	dflt='none' ;;
		    esac
		    ;;
		*)  case "$osname" in
			darwin) dflt='none' ;;
			*linux*|svr4*|esix*|solaris|nonstopux) dflt='-fPIC' ;;
			*)	dflt='-fpic' ;;
		    esac ;;
		esac ;;
	    ' ') dflt='none' ;;
	    *)   dflt="$cccdlflags" ;;
	esac

	case "$dflt" in
	    none) dflt='' ;;
	esac

	# If -Dsysroot was specified, now's the time to add it
	# to cccdlflags
	if test "X$sysroot" != X; then
	    case "$gccversion" in
		'') ;;
		*)  case "$dflt" in
			*sysroot*) ;;
			'undef'|*)
			    dflt="$dflt --sysroot=$sysroot" ;;
		    esac
		    ;;
	    esac
	fi

	case "$dflt" in
	    '') dflt='none';;
	esac

	rp="Any special flags to pass to $cc -c to compile shared library modules?"
	. ./myread
	case "$ans" in
	    none) cccdlflags=' ' ;;
	    *)    cccdlflags="$ans" ;;
	esac

	cat << EOM

Some systems use ld to create libraries that can be dynamically loaded,
while other systems (such as those using ELF) use $cc.

EOM

: Determine if this is ELF
	$cat >try.c <<EOM
/* Test for whether ELF binaries are produced */
#include <fcntl.h>
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
#$i_unistd I_UNISTD
#ifdef I_UNISTD
#include <unistd.h>
#endif
int main() {
    char b[4];
    int i = open("a.out",O_RDONLY);
    if(i == -1)
	exit(1); /* fail */
    if(read(i,b,4)==4 && b[0]==127 && b[1]=='E' && b[2]=='L' && b[3]=='F')
	exit(0); /* succeed (yes, it is ELF) */
    exit(1); /* fail */
}
EOM
	if $cc $ccflags $ldflags -o a.out try.c >/dev/null 2>&1 && $run ./a.out; then
	    bin_ELF="$define"
	fi
	$rm_try

	case "$ld" in
	    '') if $test $bin_ELF = "$define"; then
		    cat <<EOM
You appear to have ELF support.  I'll use $cc to build dynamic libraries.
EOM
		    dflt="$cc"
		else
		    echo "I'll use ld to build dynamic libraries."
		    dflt='ld'
		fi
		;;
	    *)  dflt="$ld"
		;;
	esac

	rp="What command should be used to create dynamic libraries?"
	. ./myread
	ld="$ans"

	cat << EOM

Some systems may require passing special flags to $ld to create a
library that can be dynamically loaded.  If your ld flags include
-L/other/path options to locate libraries outside your loader's normal
search path, you may need to specify those -L options here as well.  To
use no flags, say "none".

EOM
	case "$lddlflags" in
	    '') case "$osname" in
		    haiku) dflt='-shared' ;;
		    hpux) dflt='-b';
			  case "$gccversion" in
			      '') dflt="$dflt +vnocompatwarnings" ;;
			  esac
			  ;;
		    *linux*|irix*|gnu*)  dflt="-shared $optimize" ;;
		    solaris) # See [perl #66604].
			    # On Solaris 11, gcc -m64 on amd64
			    # appears not to understand -G.  gcc versions at
			    # least as old as 3.4.3 support -shared, so just
			    # use that with Solaris 11 and later, but keep
			    # the old behavior for older Solaris versions.
			    case "$gccversion" in
				'') dflt='-G' ;;
				*)  case "$osvers" in
					2.?|2.10) dflt='-G' ;;
					*) dflt='-shared' ;;
				    esac
				    ;;
			    esac
			    ;;
		    sunos) dflt='-assert nodefinitions' ;;
		    svr4*|esix*|nonstopux) dflt="-G $ldflags" ;;
		    *)     dflt='none' ;;
		esac
		;;
	    *) dflt="$lddlflags" ;;
	esac

	: Only do this for gcc, since, for example, qcc has no concept
	: of --sysroot.
	if $test "X$sysroot" != X; then
	    case "$gccversion" in
		'') ;;
		*)  dflt="$dflt --sysroot $sysroot" ;;
	    esac
	fi

	: Try to guess additional flags to pick up local libraries.
	: Be careful not to append to a plain 'none'
	case "$dflt" in
	    none) dflt='' ;;
	esac
	for thisflag in $ldflags; do
	    case "$thisflag" in
		-L*|-R*|-Wl,-R*)
		    case " $dflt " in
			*" $thisflag "*) ;;
			*) dflt="$dflt $thisflag" ;;
		    esac
		    ;;
	    esac
	done

	case "$dflt" in
	    ''|' ') dflt='none' ;;
	esac

	case "$ldflags" in
	    *-fstack-protector-strong*)
		case "$dflt" in
		    *-fstack-protector-strong*) ;; # Don't add it again
		    *) dflt="$dflt -fstack-protector-strong" ;;
		esac
		;;
	    *-fstack-protector*)
		case "$dflt" in
		    *-fstack-protector*) ;; # Don't add it again
		    *) dflt="$dflt -fstack-protector" ;;
		esac
		;;
	esac

	rp="Any special flags to pass to $ld to create a dynamically loaded library?"
	. ./myread
	case "$ans" in
	    none) lddlflags=' ' ;;
	    *) lddlflags="$ans" ;;
	esac

	cat <<EOM

Some systems may require passing special flags to $cc to indicate that
the resulting executable will use dynamic linking.  To use no flags,
say "none".

EOM
	case "$ccdlflags" in
	    '') case "$osname" in
		    *linux*|hpux|gnu*) dflt='-Wl,-E' ;;
		    sunos)             dflt='none'   ;;
		    *)                 dflt='none'   ;;
		esac ;;
	    ' ') dflt='none' ;;
	    *)   dflt="$ccdlflags" ;;
	esac
	rp="Any special flags to pass to $cc to use dynamic linking?"
	. ./myread
	case "$ans" in
	    none) ccdlflags=' ' ;;
	    *)    ccdlflags="$ans" ;;
	esac
	;;

    *)  usedl="$undef"
	ld='ld'
	dlsrc='dl_none.xs'
	lddlflags=''
	ccdlflags=''
	;;
esac

ld_can_script="$undef"
case "$bin_ELF$usedl" in
    $define$define)
	# Abuse try.h and a.out names for neat cleanup
	$cat >try.c <<EOM
void foo() {}
void bar() {}
EOM
	$cat >try.h <<EOM
LIBTEST_42 {
 global:
  foo;
 local: *;
 };
EOM
	if $cc $cccdlflags $ccdlflags $ccflags \
	       $ldflags $lddlflags -o a.out try.c \
	       -Wl,--version-script=try.h >/dev/null 2>&1 \
	   &&  $test -s a.out ; then
	    echo "ld supports scripting" >&4
	    ld_can_script="$define"
	else
	    echo "ld does not support scripting" >&4
	fi
	$rm_try
	;;
esac

: Do we want a shared libperl?
also=''
case "$usedl" in
$undef)
	# No dynamic loading being used, so don't bother even to prompt.
	useshrplib='false'
	;;
*)	case "$useshrplib" in
	'')	case "$osname" in
		svr4*|nonstopux|dgux|dynixptx|esix|powerux|haiku|cygwin*)
			dflt=y
			also='Building a shared libperl is required for dynamic loading to work on your system.'
			;;
		*)	dflt=n
			;;
		esac
		;;
	$define|true|[Yy]*)
		dflt=y
		;;
	*)	dflt=n
		;;
	esac
	$cat << EOM

The perl executable is normally obtained by linking perlmain.c with
libperl${_a}, any static extensions (usually just DynaLoader), and
any other libraries needed on this system (such as -lm, etc.).  Since
your system supports dynamic loading, it is probably possible to build
a shared libperl.$so.  If you will have more than one executable linked
to libperl.$so, this will significantly reduce the size of each
executable, but it may have a noticeable effect on performance.  The
default is probably sensible for your system.
$also

EOM
	rp="Build a shared libperl.$so (y/n)"
	. ./myread
	case "$ans" in
	true|$define|[Yy]*)
		useshrplib='true'  ;;
	*)	useshrplib='false' ;;
	esac
	;;
esac

case "$useshrplib" in
true)
	case "$userelocatableinc" in
	true|define)
		echo "Cannot build with both -Duserelocatableinc and -Duseshrplib" >&4
		echo "See INSTALL for an explanation why that won't work." >&4
		exit 4
		;;
	esac
	case "$libperl" in
	'')
		# Figure out a good name for libperl.so.  Since it gets stored in
		# a version-specific architecture-dependent library, the version
		# number isn't really that important, except for making cc/ld happy.
		#
		# A name such as libperl.so.10.1
		majmin="libperl.$so.$patchlevel.$subversion"
		# A name such as libperl.so.100
		majonly=`echo $patchlevel $subversion |
			$awk '{printf "%d%02d", $1, $2}'`
		majonly=libperl.$so.$majonly
		# I'd prefer to keep the os-specific stuff here to a minimum, and
		# rely on figuring it out from the naming of libc.
		case "${osname}${osvers}" in
		*linux*|gnu*)  # ld won't link with a bare -lperl otherwise.
			dflt=libperl.$so
			;;
		cygwin*) # ld links now against the dll directly
			majmin="cygperl5_${patchlevel}_${subversion}.${so}"
			majonly=`echo $patchlevel $subversion |
				$awk '{printf "%03d%03d", $1, $2}'`
			majonly=cygperl5.$majonly.$so
			dflt=$majmin
			;;
		*)	# Try to guess based on whether libc has major.minor.
			case "$libc" in
			*libc.$so.[0-9]*.[0-9]*) dflt=$majmin ;;
			*libc.$so.[0-9]*) dflt=$majonly ;;
			*)	dflt=libperl.$so ;;
			esac
			;;
		esac
		;;
	*)	dflt=$libperl
		;;
	esac
	cat << EOM

I need to select a good name for the shared libperl.  If your system uses
library names with major and minor numbers, then you might want something
like $majmin.  Alternatively, if your system uses a single version
number for shared libraries, then you might want to use $majonly.
Or, your system might be quite happy with a simple libperl.$so.

Since the shared libperl will get installed into a version-specific
architecture-dependent directory, the version number of the shared perl
library probably isn't important, so the default should be o.k.

EOM
	rp='What name do you want to give to the shared libperl?'
	. ./myread
	libperl=$ans
	echo "Ok, I'll use $libperl"
	;;
*)
	libperl="libperl${_a}"
	;;
esac

# Detect old use of shrpdir via undocumented Configure -Dshrpdir
case "$shrpdir" in
'') ;;
*)	$cat >&4 <<EOM
WARNING:  Use of the shrpdir variable for the installation location of
the shared $libperl is not supported.  It was never documented and
will not work in this version.  Let me (perlbug@@perl.org)
know of any problems this may cause.

EOM
	case "$shrpdir" in
	"$archlibexp/CORE")
		$cat >&4 <<EOM
But your current setting of $shrpdir is
the default anyway, so it's harmless.
EOM
		;;
	*)
		$cat >&4 <<EOM
Further, your current attempted setting of $shrpdir
conflicts with the value of $archlibexp/CORE
that installperl will use.
EOM
		;;
	esac
	;;
esac

# How will the perl executable find the installed shared $libperl?
# Add $xxx to ccdlflags.
# If we can't figure out a command-line option, use $shrpenv to
# set env LD_RUN_PATH.  The main perl makefile uses this.
shrpdir=$archlibexp/CORE
xxx=''
tmp_shrpenv=''
if "$useshrplib"; then
    case "$osname" in
	aix)
		# We'll set it in Makefile.SH...
		;;
	solaris)
		xxx="-R $shrpdir"
		;;
	freebsd|mirbsd|netbsd|openbsd|interix|dragonfly|bitrig)
		xxx="-Wl,-R$shrpdir"
		;;
	bsdos|linux|irix*|dec_osf|gnu*|haiku)
		xxx="-Wl,-rpath,$shrpdir"
		;;
	hpux*)
		# hpux doesn't like the default, either.
		tmp_shrpenv="env LDOPTS=\"+s +b${shrpdir}\""
		;;
	cygwin)
		# cygwin needs only ldlibpth
		;;
	*)
		tmp_shrpenv="env LD_RUN_PATH=$shrpdir"
		;;
	esac
	case "$xxx" in
	'') ;;
	*)
		# Only add $xxx if it isn't already in ccdlflags.
		case " $ccdlflags " in
		*" $xxx "*)	;;
		*)	ccdlflags="$ccdlflags $xxx"
			cat <<EOM >&4

Adding $xxx to the flags
passed to $ld so that the perl executable will find the
installed shared $libperl.

EOM
			;;
		esac
		;;
	esac
fi
# Fix ccdlflags in AIX for building external extensions.
# (For building Perl itself bare -bE:perl.exp is needed,
#  Makefile.SH takes care of this.)
case "$osname" in
aix) ccdlflags="$ccdlflags -bE:$installarchlib/CORE/perl.exp" ;;
esac
# Respect a hint or command-line value.
case "$shrpenv" in
'') shrpenv="$tmp_shrpenv" ;;
esac
case "$ldlibpthname" in
'')	ldlibpthname=LD_LIBRARY_PATH ;;
none)	ldlibpthname='' ;;
esac

: determine where manual pages are on this system
echo " "
case "$sysman" in
'')
	syspath='/usr/share/man/man1 /usr/man/man1'
	syspath="$syspath /usr/man/mann /usr/man/manl /usr/man/local/man1"
	syspath="$syspath /usr/man/u_man/man1"
	syspath="$syspath /usr/catman/u_man/man1 /usr/man/l_man/man1"
	syspath="$syspath /usr/local/man/u_man/man1 /usr/local/man/l_man/man1"
	syspath="$syspath /usr/man/man.L /local/man/man1 /usr/local/man/man1"
	sysman=`./loc . /usr/man/man1 $syspath`
	;;
esac
if $test -d "$sysman"; then
	echo "System manual is in $sysman." >&4
else
	echo "Could not find manual pages in source form." >&4
fi

: determine where manual pages go
set man1dir man1dir none
eval $prefixit
$cat <<EOM

$spackage has manual pages available in source form.
EOM
case "$nroff" in
nroff)
	echo "However, you don't have nroff, so they're probably useless to you."
	case "$man1dir" in
	'') man1dir="none";;
	esac;;
esac
echo "If you don't want the manual sources installed, answer 'none'."
case "$man1dir" in
' ') dflt=none
	;;
'')
	lookpath="$prefixexp/share/man/man1"
	lookpath="$lookpath $prefixexp/man/man1 $prefixexp/man/l_man/man1"
	lookpath="$lookpath $prefixexp/man/p_man/man1"
	lookpath="$lookpath $prefixexp/man/u_man/man1"
	lookpath="$lookpath $prefixexp/man/man.1"
	case "$sysman" in
	*/?_man*)	dflt=`./loc . $prefixexp/l_man/man1 $lookpath` ;;
	*)	dflt=`./loc . $prefixexp/man/man1 $lookpath` ;;
	esac
	set dflt
	eval $prefixup
	;;
*)  dflt="$man1dir"
	;;
esac
echo " "
fn=dn+~
rp="Where do the main $spackage manual pages (source) go?"
. ./getfile
if $test "X$man1direxp" != "X$ansexp"; then
	installman1dir=''
fi
prefixvar=man1dir
. ./setprefixvar

case "$man1dir" in
'')	man1dir=' '
	installman1dir='';;
esac

: What suffix to use on installed man pages

case "$man1dir" in
' ')
	man1ext='0'
	;;
*)
	rp="What suffix should be used for the main $spackage man pages?"
	case "$man1ext" in
	'')	case "$man1dir" in
		*1)  dflt=1 ;;
		*1p) dflt=1p ;;
		*1pm) dflt=1pm ;;
		*l) dflt=l;;
		*n) dflt=n;;
		*o) dflt=o;;
		*p) dflt=p;;
		*C) dflt=C;;
		*L) dflt=L;;
		*L1) dflt=L1;;
		*) dflt=1;;
		esac
		;;
	*)	dflt="$man1ext";;
	esac
	. ./myread
	man1ext="$ans"
	;;
esac

: see if we can have long filenames
echo " "
first=123456789abcdef
$rm -f $first
if (echo hi >$first) 2>/dev/null; then
	if $test -f 123456789abcde; then
		echo 'You cannot have filenames longer than 14 characters.  Sigh.' >&4
		val="$undef"
	else
 		echo 'You can have filenames longer than 14 characters.'>&4
 		val="$define"
	fi
else
	$cat <<'EOM'
You can't have filenames longer than 14 chars.
You can't even think about them!
EOM
	val="$undef"
fi
set d_flexfnam
eval $setvar
$rm -rf 123456789abcde*

: determine where library module manual pages go
set man3dir man3dir none
eval $prefixit
$cat <<EOM

$spackage has manual pages for many of the library modules.
EOM

case "$nroff" in
nroff)
	$cat <<'EOM'
However, you don't have nroff, so they're probably useless to you.
EOM
	case "$man3dir" in
	'') man3dir="none";;
	esac;;
esac

case "$d_flexfnam" in
undef)
	$cat <<'EOM'
However, your system can't handle the long file names like File::Basename.3.
EOM
	case "$man3dir" in
	'') man3dir="none";;
	esac;;
esac

echo "If you don't want the manual sources installed, answer 'none'."
prog=`echo $package | $sed 's/-*[0-9.]*$//'`
case "$man3dir" in
'')	dflt=`echo "$man1dir" | $sed -e 's/man1/man3/g' -e 's/man\.1/man\.3/g'`
	if $test -d "$privlib/man/man3"; then
		cat <<EOM >&4

WARNING:  Previous versions of perl installed man3 pages into
$privlib/man/man3.  This version will suggest a
new default of $dflt.
EOM
		tdflt=$dflt
		dflt='n'
		rp='Do you wish to preserve the old behavior?(y/n)'
		. ./myread
		case "$ans" in
		y*) dflt="$privlib/man/man3" ;;
		*)  dflt=$tdflt ;;
		esac
    fi
	;;
*)	dflt="$man3dir" ;;
esac
case "$dflt" in
' ') dflt=none ;;
esac
echo " "
fn=dn+~
rp="Where do the $package library man pages (source) go?"
. ./getfile
prefixvar=man3dir
. ./setprefixvar

case "$man3dir" in
'')	man3dir=' '
	installman3dir='';;
esac

: What suffix to use on installed man pages
case "$man3dir" in
' ')
	man3ext='0'
	;;
*)
	rp="What suffix should be used for the $package library man pages?"
	case "$man3ext" in
	'')	case "$man3dir" in
		*3)  dflt=3 ;;
		*3p) dflt=3p ;;
		*3pm) dflt=3pm ;;
		*l) dflt=l;;
		*n) dflt=n;;
		*o) dflt=o;;
		*p) dflt=p;;
		*C) dflt=C;;
		*L) dflt=L;;
		*L3) dflt=L3;;
		*) dflt=3;;
		esac
		;;
	*)	dflt="$man3ext";;
	esac
	. ./myread
	man3ext="$ans"
	;;
esac

: see if we have to deal with yellow pages, now NIS.
if $test -d /usr/etc/yp || $test -d /etc/yp || $test -d /usr/lib/yp; then
	case "$hostcat" in
	nidump*) ;;
	*)
		case "$hostcat" in
		*ypcat*) dflt=y;;
		'') if $contains '^\+' /etc/passwd >/dev/null 2>&1; then
				dflt=y
			else
				dflt=n
			fi;;
		*) dflt=n;;
		esac
		echo " "
		rp='Are you getting the hosts file via yellow pages?'
		. ./myread
		case "$ans" in
		y*) hostcat='ypcat hosts';;
		*) hostcat='cat /etc/hosts';;
		esac
		;;
	esac
fi
case "$hostcat" in
'') test -f /etc/hosts && hostcat='cat /etc/hosts';;
esac
case "$groupcat" in
'') test -f /etc/group && groupcat='cat /etc/group';;
esac
case "$passcat" in
'') test -f /etc/passwd && passcat='cat /etc/passwd';;
esac

: now get the host name
echo " "
echo "Figuring out host name..." >&4
case "$myhostname" in
'') cont=true
	echo 'Maybe "hostname" will work...'
	if tans=`sh -c hostname 2>&1` ; then
		myhostname=$tans
		phostname=hostname
		cont=''
	fi
	;;
*) cont='';;
esac
if $test "$cont"; then
	if ./xenix; then
		echo 'Oh, dear.  Maybe "/etc/systemid" is the key...'
		if tans=`cat /etc/systemid 2>&1` ; then
			myhostname=$tans
			phostname='cat /etc/systemid'
			echo "Whadyaknow.  Xenix always was a bit strange..."
			cont=''
		fi
	elif $test -r /etc/systemid; then
		echo "(What is a non-Xenix system doing with /etc/systemid?)"
	fi
fi
if $test "$cont"; then
	echo 'No, maybe "uuname -l" will work...'
	if tans=`sh -c 'uuname -l' 2>&1` ; then
		myhostname=$tans
		phostname='uuname -l'
	else
		echo 'Strange.  Maybe "uname -n" will work...'
		if tans=`sh -c 'uname -n' 2>&1` ; then
			myhostname=$tans
			phostname='uname -n'
		else
			echo 'Oh well, maybe I can mine it out of whoami.h...'
			if tans=`sh -c $contains' sysname $usrinc/whoami.h' 2>&1` ; then
				myhostname=`echo "$tans" | $sed 's/^.*"\(.*\)"/\1/'`
				phostname="sed -n -e '"'/sysname/s/^.*\"\\(.*\\)\"/\1/{'"' -e p -e q -e '}' <$usrinc/whoami.h"
			else
				case "$myhostname" in
				'') echo "Does this machine have an identity crisis or something?"
					phostname='';;
				*)
					echo "Well, you said $myhostname before..."
					phostname='echo $myhostname';;
				esac
			fi
		fi
	fi
fi
case "$myhostname" in
'') myhostname=noname ;;
esac
: you do not want to know about this
set $myhostname
myhostname=$1

: verify guess
if $test "$myhostname" ; then
	dflt=y
	rp='Your host name appears to be "'$myhostname'".'" Right?"
	. ./myread
	case "$ans" in
	y*) ;;
	*) myhostname='';;
	esac
fi

: bad guess or no guess
while $test "X$myhostname" = X ; do
	dflt=''
	rp="Please type the (one word) name of your host:"
	. ./myread
	myhostname="$ans"
done

: translate upper to lower if necessary
case "$myhostname" in
*[A-Z]*)
	echo "(Normalizing case in your host name)"
	myhostname=`echo $myhostname | ./tr '[A-Z]' '[a-z]'`
	;;
esac

case "$myhostname" in
*.*)
	dflt=`expr "X$myhostname" : "X[^.]*\(\..*\)"`
	myhostname=`expr "X$myhostname" : "X\([^.]*\)\."`
	echo "(Trimming domain name from host name--host name is now $myhostname)"
	;;
*) case "$mydomain" in
	'')
		{
			test "X$hostcat" = "Xypcat hosts" &&
			ypmatch "$myhostname" hosts 2>/dev/null |\
				$sed -e 's/[	 ]*#.*//; s/$/ /' > hosts && \
			$test -s hosts
		} || {
			test "X$hostcat" != "X" &&
		     	$hostcat | $sed -n -e "s/[	 ]*#.*//; s/\$/ /
					/[	 ]$myhostname[	. ]/p" > hosts
		}
		tmp_re="[	. ]"
		if $test -f hosts; then
			$test x`$awk "/[0-9].*[	 ]$myhostname$tmp_re/ { sum++ }
			     END { print sum }" hosts` = x1 || tmp_re="[	 ]"
			dflt=.`$awk "/[0-9].*[	 ]$myhostname$tmp_re/ {for(i=2; i<=NF;i++) print \\\$i}" \
				hosts | $sort | $uniq | \
				$sed -n -e "s/$myhostname\.\([-a-zA-Z0-9_.]\)/\1/p"`
			case `$echo X$dflt` in
			X*\ *)	echo "(Several hosts in the database matched hostname)"
				dflt=.
				;;
			X.) echo "(You do not have fully-qualified names in the hosts database)"
				;;
			esac
		else
			echo "(I cannot locate a hosts database anywhere)"
			dflt=.
		fi
		case "$dflt" in
		.)
			tans=`./loc resolv.conf X /etc /usr/etc`
			if $test -f "$tans"; then
				echo "(Attempting domain name extraction from $tans)"
				dflt=.`$sed -n -e 's/	/ /g' \
				  -e 's/^search  *\([^ ]*\).*/\1/p' $tans \
				  -e 1q 2>/dev/null`
				case "$dflt" in
				.) dflt=.`$sed -n -e 's/	/ /g' \
				     -e 's/^domain  *\([^ ]*\).*/\1/p' $tans \
				     -e 1q 2>/dev/null`
  					;;
				esac
			fi
			;;
		esac
		case "$dflt" in
		.) echo "(No help from resolv.conf either -- attempting clever guess)"
			dflt=.`sh -c domainname 2>/dev/null`
			case "$dflt" in
			'') dflt='.';;
			.nis.*|.yp.*|.main.*) dflt=`echo $dflt | $sed -e 's/^\.[^.]*//'`;;
			esac
			;;
		esac
		case "$dflt$osname" in
		.os390) echo "(Attempting domain name extraction from //'SYS1.TCPPARMS(TCPDATA)')"
			dflt=.`awk '/^DOMAINORIGIN/ {print $2}' "//'SYS1.TCPPARMS(TCPDATA)'" 2>/dev/null`
			;;
		esac
		case "$dflt" in
		.) echo "(Lost all hope -- silly guess then)"
			dflt='.nonet'
			;;
		esac
		$rm -f hosts
		;;
	*) dflt="$mydomain";;
	esac;;
esac
echo " "
rp="What is your domain name?"
. ./myread
tans="$ans"
case "$ans" in
'') ;;
.*) ;;
*) tans=".$tans";;
esac
mydomain="$tans"

: translate upper to lower if necessary
case "$mydomain" in
*[A-Z]*)
	echo "(Normalizing case in your domain name)"
	mydomain=`echo $mydomain | ./tr '[A-Z]' '[a-z]'`
	;;
esac

: a little sanity check here
case "$phostname" in
'') ;;
*)
	case `$phostname | ./tr '[A-Z]' '[a-z]'` in
	$myhostname$mydomain|$myhostname) ;;
	*)
		case "$phostname" in
		sed*)
			echo "(That doesn't agree with your whoami.h file, by the way.)"
			;;
		*)
			echo "(That doesn't agree with your $phostname command, by the way.)"
			;;
		esac
	;;
	esac
	;;
esac

: determine the e-mail address of the user who is running us
$cat <<EOM

I need to get your e-mail address in Internet format if possible, i.e.
something like user@@host.domain. Please answer accurately since I have
no easy means to double check it. The default value provided below
is most probably close to reality but may not be valid from outside
your organization...

EOM
cont=x
while test "$cont"; do
	case "$MAILDOMAIN" in
	'')
		if $test -s /etc/mailname; then
			maildomain=`$cat /etc/mailname`
		else
			maildomain="$myhostname$mydomain"
		fi
		;;
	*)  maildomain="$MAILDOMAIN";;
	esac
	case "$cf_email" in
	'') dflt="$cf_by@@$maildomain";;
	*)  dflt="$cf_email";;
	esac
	rp='What is your e-mail address?'
	. ./myread
	cf_email="$ans"
	case "$cf_email" in
	*@@*.*) cont='' ;;
	*)
		rp='Address does not look like an Internet one.  Use it anyway?'
		case "$fastread" in
		yes) dflt=y ;;
		*) dflt=n ;;
		esac
		. ./myread
		case "$ans" in
		y*) cont='' ;;
		*) echo " " ;;
		esac
		;;
	esac
done

: Ask e-mail of administrator
$cat <<EOM

If you or somebody else will be maintaining perl at your site, please
fill in the correct e-mail address here so that they may be contacted
if necessary. Currently, the "perlbug" program included with perl
will send mail to this address in addition to perlbug@@perl.org. You may
enter "none" for no administrator.

EOM
case "$perladmin" in
'') dflt="$cf_email";;
*) dflt="$perladmin";;
esac
rp='Perl administrator e-mail address'
. ./myread
perladmin="$ans"

: determine whether to only install version-specific parts.
echo " "
$cat <<EOM
Do you want to install only the version-specific parts of the perl
distribution?  Usually you do *not* want to do this.
EOM
case "$versiononly" in
"$define"|[Yy]*|true) dflt='y' ;;
*) dflt='n';
esac
rp="Do you want to install only the version-specific parts of perl?"
. ./myread
case "$ans" in
[yY]*)	val="$define";;
*)	val="$undef" ;;
esac
set versiononly
eval $setvar

case "$versiononly" in
"$define") inc_version_list=''
           inc_version_list_init=0
           ;;
esac

: figure out how to guarantee perl startup
: XXX Note that this currently takes advantage of the bug that binexp ignores
:     the Configure -Dinstallprefix setting, which in turn means that under
:     relocatable @@INC, initialinstalllocation is what binexp started as.
case "$startperl" in
'')
	case "$sharpbang" in
	*!)
		$cat <<EOH

I can use the #! construct to start perl on your system. This will
make startup of perl scripts faster, but may cause problems if you
want to share those scripts and perl is not in a standard place
($initialinstalllocation/perl) on all your platforms. The alternative
is to force a shell by starting the script with a single ':' character.

EOH
		case "$versiononly" in
		"$define")      dflt="$initialinstalllocation/perl$version";;
		*)              dflt="$initialinstalllocation/perl";;
		esac
		rp='What shall I put after the #! to start up perl ("none" to not use #!)?'
		. ./myread
		case "$ans" in
		none)	startperl=": # use perl";;
		*)	startperl="#!$ans"
			if $test 30 -lt `echo "$ans" | wc -c`; then
				$cat >&4 <<EOM

WARNING:  Some systems limit the #! command to 32 characters.
If you experience difficulty running Perl scripts with #!, try
installing Perl in a directory with a shorter pathname.

EOM
			fi ;;
		esac
		;;
	*) startperl=": # use perl"
		;;
	esac
	;;
esac
echo "I'll use $startperl to start perl scripts."

: figure best path for perl in scripts
case "$perlpath" in
'')
	case "$versiononly" in
	"$define")	perlpath="$initialinstalllocation/perl$version";;
	*)		perlpath="$initialinstalllocation/perl";;
	esac
	case "$startperl" in
	*!*) ;;
	*)
		$cat <<EOH

I will use the "eval 'exec'" idiom to start Perl on your system.
I can use the full path of your Perl binary for this purpose, but
doing so may cause problems if you want to share those scripts and
Perl is not always in a standard place ($initialinstalllocation/perl).

EOH
		dflt="$initialinstalllocation/perl"
		rp="What path shall I use in \"eval 'exec'\"?"
		. ./myread
		perlpath="$ans"
		;;
	esac
	;;
esac
case "$startperl" in
*!*)	;;
*)	echo "I'll use $perlpath in \"eval 'exec'\"" ;;
esac

: determine where public executable scripts go
set scriptdir scriptdir
eval $prefixit
case "$scriptdir" in
'')
	dflt="$bin"
	: guess some guesses
	$test -d /usr/share/scripts && dflt=/usr/share/scripts
	$test -d /usr/share/bin     && dflt=/usr/share/bin
	$test -d /usr/local/script  && dflt=/usr/local/script
	$test -d /usr/local/scripts && dflt=/usr/local/scripts
	$test -d $prefixexp/script  && dflt=$prefixexp/script
	set dflt
	eval $prefixup
	;;
*)  dflt="$scriptdir"
	;;
esac
$cat <<EOM

Some installations have a separate directory just for executable scripts so
that they can mount it across multiple architectures but keep the scripts in
one spot.  You might, for example, have a subdirectory of /usr/share for this.
Or you might just lump your scripts in with all your other executables.

EOM
fn=d~
rp='Where do you keep publicly executable scripts?'
. ./getfile
if $test "X$ansexp" != "X$scriptdirexp"; then
	installscript=''
fi
installscriptdir=''
prefixvar=scriptdir
. ./setprefixvar
: A little fix up for an irregularly named variable.
installscript="$installscriptdir"

: determine where add-on public executables go
case "$sitebin" in
'')	dflt=$siteprefix/bin ;;
*)	dflt=$sitebin ;;
esac
fn=d~
rp='Pathname where the add-on public executables should be installed?'
. ./getfile
prefixvar=sitebin
. ./setprefixvar

: determine where add-on html pages go
: There is no standard location, so try to copy the previously-selected
: directory structure for the core html pages.
case "$sitehtml1dir" in
'')    dflt=`echo "$html1dir" | $sed "s#^$prefix#$siteprefix#"` ;;
*)     dflt=$sitehtml1dir ;;
esac
case "$dflt" in
''|' ') dflt=none ;;
esac
fn=dn+~
rp='Pathname where the site-specific html pages should be installed?'
. ./getfile
prefixvar=sitehtml1dir
. ./setprefixvar

: determine where add-on library html pages go
: There is no standard location, so try to copy the previously-selected
: directory structure for the core html pages.
case "$sitehtml3dir" in
'')    dflt=`echo "$html3dir" | $sed "s#^$prefix#$siteprefix#"` ;;
*)     dflt=$sitehtml3dir ;;
esac
case "$dflt" in
''|' ') dflt=none ;;
esac
fn=dn+~
rp='Pathname where the site-specific library html pages should be installed?'
. ./getfile
prefixvar=sitehtml3dir
. ./setprefixvar

: determine where add-on manual pages go
case "$siteman1dir" in
'')	dflt=`echo $man1dir | $sed "s#^$prefix#$siteprefix#"` ;;
*)	dflt=$siteman1dir ;;
esac
case "$dflt" in
''|' ') dflt=none ;;
esac
fn=dn+~
rp='Pathname where the site-specific manual pages should be installed?'
. ./getfile
prefixvar=siteman1dir
. ./setprefixvar

: determine where add-on library man pages go
case "$siteman3dir" in
'')	dflt=`echo $man3dir | $sed "s#^$prefix#$siteprefix#"` ;;
*)	dflt=$siteman3dir ;;
esac
case "$dflt" in
''|' ') dflt=none ;;
esac
fn=dn+~
rp='Pathname where the site-specific library manual pages should be installed?'
. ./getfile
prefixvar=siteman3dir
. ./setprefixvar

: determine where add-on public executable scripts go
case "$sitescript" in
'')	dflt=$siteprefix/script
	$test -d $dflt || dflt=$sitebin ;;
*)  dflt="$sitescript" ;;
esac
fn=d~+
rp='Pathname where add-on public executable scripts should be installed?'
. ./getfile
prefixvar=sitescript
. ./setprefixvar

: see if backtrace exists
set backtrace d_backtrace
eval $inlibc

: add flags if using c backtrace
case "$usecbacktrace" in
  "") usecbacktrace=$undef ;;
  [yY]*|true|$define)
    case "$d_backtrace" in
      [yY]*|true|$define)
        case " $ccflags " in
	  *" -DUSE_C_BACKTRACE "*) ;; # Already there.
	  *) ccflags="$ccflags -DUSE_C_BACKTRACE -g" ;;
	  esac
        ;;
      *)
        echo "This system does not support backtrace" >&4
        usecbacktrace=$undef
        ;;
      esac
    ;;
  esac

: Check if faststdio is requested and available
case "$usefaststdio" in
$define|true|[yY]*|'')
	xversion=`awk '/define[ 	]+PERL_VERSION/ {print $3}' $rsrc/patchlevel.h`
	case "$xversion" in
	[68])	dflt='y' ;;
	*)	dflt='n' ;;
	esac
	;;
*) dflt='n';;
esac
cat <<EOM

Perl can be built to use 'fast stdio', which means using the stdio
library but also directly manipulating the stdio buffers to enable
faster I/O.  Using stdio is better for backward compatibility (especially
for Perl extensions), but on the other hand since Perl 5.8 the 'perlio'
interface has been preferred instead of stdio.

If this doesn't make any sense to you, just accept the default '$dflt'.
EOM
rp='Use the "fast stdio" if available?'
. ./myread
case "$ans" in
y|Y)	val="$define" ;;
*)      val="$undef" ;;
esac
set usefaststdio
eval $setvar


: define an is-a-typedef? function
typedef='type=$1; var=$2; def=$3; shift; shift; shift; inclist=$@@;
case "$inclist" in
"") inclist="sys/types.h";;
esac;
eval "varval=\$$var";
case "$varval" in
"")
	$rm -f temp.c;
	for inc in $inclist; do
		echo "#include <$inc>" >>temp.c;
	done;
	echo "#ifdef $type" >> temp.c;
	echo "printf(\"We have $type\");" >> temp.c;
	echo "#endif" >> temp.c;
	$cppstdin $cppflags $cppminus < temp.c >temp.E 2>/dev/null;
	if $contains $type temp.E >/dev/null 2>&1; then
		eval "$var=\$type";
	else
		eval "$var=\$def";
	fi;
	$rm -f temp.?;;
*) eval "$var=\$varval";;
esac'

: define an is-a-typedef? function that prompts if the type is not available.
typedef_ask='type=$1; var=$2; def=$3; shift; shift; shift; inclist=$@@;
case "$inclist" in
"") inclist="sys/types.h";;
esac;
eval "varval=\$$var";
case "$varval" in
"")
	$rm -f temp.c;
	for inc in $inclist; do
		echo "#include <$inc>" >>temp.c;
	done;
	echo "#ifdef $type" >> temp.c;
	echo "printf(\"We have $type\");" >> temp.c;
	echo "#endif" >> temp.c;
	$cppstdin $cppflags $cppminus < temp.c >temp.E 2>/dev/null;
	echo " " ;
	echo "$rp" | $sed -e "s/What is/Looking for/" -e "s/?/./";
	if $contains $type temp.E >/dev/null 2>&1; then
		echo "$type found." >&4;
		eval "$var=\$type";
	else
		echo "$type NOT found." >&4;
		dflt="$def";
		. ./myread ;
		eval "$var=\$ans";
	fi;
	$rm -f temp.?;;
*) eval "$var=\$varval";;
esac'

: see what type lseek is declared as in the kernel
rp="What is the type used for lseek's offset on this system?"
set off_t lseektype long stdio.h sys/types.h
eval $typedef_ask

echo " "
echo "Checking to see how big your file offsets are..." >&4
$cat >try.c <<EOCP
#include <sys/types.h>
#include <stdio.h>
int main()
{
    printf("%d\n", (int)sizeof($lseektype));
    return(0);
}
EOCP
set try
if eval $compile_ok; then
	lseeksize=`$run ./try`
	echo "Your file offsets are $lseeksize bytes long."
else
	dflt=$longsize
	echo " "
	echo "(I can't seem to compile the test program.  Guessing...)"
	rp="What is the size of your file offsets (in bytes)?"
	. ./myread
	lseeksize="$ans"
fi
$rm_try

: see what type file positions are declared as in the library
rp="What is the type for file position used by fsetpos()?"
set fpos_t fpostype long stdio.h sys/types.h
eval $typedef_ask

: Check size for Fpos_t
echo " "
case "$fpostype" in
*_t) zzz="$fpostype"	;;
*)   zzz="fpos_t"	;;
esac
echo "Checking the size of $zzz..." >&4
cat > try.c <<EOCP
#include <sys/types.h>
#include <stdio.h>
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
int main() {
    printf("%d\n", (int)sizeof($fpostype));
    exit(0);
}
EOCP
set try
if eval $compile_ok; then
	yyy=`$run ./try`
	case "$yyy" in
	'')	fpossize=4
		echo "(I can't execute the test program--guessing $fpossize.)" >&4
		;;
	*)	fpossize=$yyy
		echo "Your $zzz is $fpossize bytes long."
		;;
	esac
else
	dflt="$longsize"
	echo " " >&4
	echo "(I can't compile the test program.  Guessing...)" >&4
	rp="What is the size of your file positions (in bytes)?"
	. ./myread
	fpossize="$ans"
fi

: Check for large file support
# Backward compatibility (uselfs is deprecated).
case "$uselfs" in
"$define"|true|[yY]*)
	cat <<EOM >&4

*** Configure -Duselfs is deprecated, using -Duselargefiles instead.
EOM
	uselargefiles="$define"
	;;
esac

case "$lseeksize:$fpossize" in
8:8) cat <<EOM

You can have files larger than 2 gigabytes.
EOM
   val="$define" ;;
*)    case "$uselargefiles" in
   "$undef"|false|[nN]*) dflt='n' ;;
   *)	dflt='y' ;;
   esac
   cat <<EOM

Perl can be built to understand large files (files larger than 2 gigabytes)
on some systems.  To do so, Configure can be run with -Duselargefiles.

If this doesn't make any sense to you, just accept the default '$dflt'.
EOM
   rp='Try to understand large files, if available?'
   . ./myread
   case "$ans" in
   y|Y) 	val="$define" ;;
   *)   	val="$undef"  ;;
   esac
   ;;
esac
set uselargefiles
eval $setvar
: Look for a hint-file generated 'call-back-unit'.  If the
: user has specified that a large files perl is to be built,
: we may need to set or change some other defaults.
if $test -f uselargefiles.cbu; then
	echo "Your platform has some specific hints regarding large file builds, using them..."
	. ./uselargefiles.cbu
fi
case "$uselargefiles" in
"$define")
	if $test -f uselargefiles.cbu; then
		echo " "
		echo "Rechecking to see how big your file offsets are..." >&4
		$cat >try.c <<EOCP
#include <sys/types.h>
#include <stdio.h>
int main()
{
    printf("%d\n", (int)sizeof($lseektype));
    return(0);
}
EOCP
		set try
		if eval $compile_ok; then
			lseeksize=`$run ./try`
			$echo "Your file offsets are now $lseeksize bytes long."
		else
			dflt="$lseeksize"
			echo " "
			echo "(I can't seem to compile the test program.  Guessing...)"
			rp="What is the size of your file offsets (in bytes)?"
			. ./myread
			lseeksize="$ans"
		fi
		case "$fpostype" in
		*_t) zzz="$fpostype"	;;
		*)   zzz="fpos_t"	;;
		esac
		$echo $n "Rechecking the size of $zzz...$c" >&4
		$cat > try.c <<EOCP
#include <sys/types.h>
#include <stdio.h>
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
int main() {
    printf("%d\n", (int)sizeof($fpostype));
    return(0);
}
EOCP
		set try
		if eval $compile_ok; then
			yyy=`$run ./try`
			dflt="$lseeksize"
			case "$yyy" in
			'')	echo " "
				echo "(I can't execute the test program--guessing $fpossize.)" >&4
				;;
			*)	fpossize=$yyy
				echo " $fpossize bytes." >&4
				;;
			esac
		else
			dflt="$fpossize"
			echo " "
			echo "(I can't compile the test program.  Guessing...)" >&4
			rp="What is the size of your file positions (in bytes)?"
			. ./myread
			fpossize="$ans"
		fi
		$rm_try
	fi
	;;
esac

: Check if we want perlio
useperlio="$define"

: Set the vendorbin variables
case "$vendorprefix" in
'')	d_vendorbin="$undef"
	vendorbin=''
	vendorbinexp=''
	;;
*)	d_vendorbin="$define"
	: determine where vendor-supplied executables go.
	case "$vendorbin" in
	'') dflt=$vendorprefix/bin ;;
	*)	dflt="$vendorbin" ;;
	esac
	fn=d~+
	rp='Pathname for the vendor-supplied executables directory?'
	. ./getfile
	vendorbin="$ans"
	vendorbinexp="$ansexp"
	;;
esac
prefixvar=vendorbin
. ./installprefix

: Set the vendorhtml1dir variables
case "$vendorprefix" in
'')	vendorhtml1dir=''
	vendorhtml1direxp=''
	;;
*)	: determine where vendor-supplied html pages go.
	: There is no standard location, so try to copy the previously-selected
	: directory structure for the core html pages.
	: XXX Better default suggestions would be welcome.
	case "$vendorhtml1dir" in
	'')	dflt=`echo "$html1dir" | $sed "s#^$prefix#$vendorprefix#"` ;;
	*)	dflt=$vendorhtml1dir ;;
	esac
	case "$dflt" in
	''|' ') dflt=none ;;
	esac
	fn=dn+~
	rp='Pathname for the vendor-supplied html pages?'
	. ./getfile
	vendorhtml1dir="$ans"
	vendorhtml1direxp="$ansexp"
	;;
esac
: Use ' ' for none so value is preserved next time through Configure
$test X"$vendorhtml1dir" = "X" && vendorhtml1dir=' '
prefixvar=vendorhtml1dir
. ./installprefix

: Set the vendorhtml3dir variables
case "$vendorprefix" in
'')	vendorhtml3dir=''
	vendorhtml3direxp=''
	;;
*)	: determine where vendor-supplied module html pages go.
	: There is no standard location, so try to copy the previously-selected
	: directory structure for the core html pages.
	: XXX Better default suggestions would be welcome.
	case "$vendorhtml3dir" in
	'')	dflt=`echo "$html3dir" | $sed "s#^$prefix#$vendorprefix#"` ;;
	*)	dflt=$vendorhtml3dir ;;
	esac
	case "$dflt" in
	''|' ') dflt=none ;;
	esac
	fn=dn+~
	rp='Pathname for the vendor-supplied html pages?'
	. ./getfile
	vendorhtml3dir="$ans"
	vendorhtml3direxp="$ansexp"
	;;
esac
: Use ' ' for none so value is preserved next time through Configure
$test X"$vendorhtml3dir" = "X" && vendorhtml3dir=' '
prefixvar=vendorhtml3dir
. ./installprefix

: Set the vendorman1dir variables
case "$vendorprefix" in
'')	vendorman1dir=''
	vendorman1direxp=''
	;;
*)	: determine where vendor-supplied manual pages go.
	case "$vendorman1dir" in
	'') dflt=`echo "$man1dir" | $sed "s#^$prefix#$vendorprefix#"` ;;
	*)	dflt=$vendorman1dir ;;
	esac
	case "$dflt" in
	''|' ') dflt=none ;;
	esac
	fn=nd~+
	rp='Pathname for the vendor-supplied manual section 1 pages?'
	. ./getfile
	vendorman1dir="$ans"
	vendorman1direxp="$ansexp"
	;;
esac
: Use ' ' for none so value is preserved next time through Configure
$test X"$vendorman1dir" = "X" && vendorman1dir=' '
prefixvar=vendorman1dir
. ./installprefix

: Set the vendorman3dir variables
case "$vendorprefix" in
'')	vendorman3dir=''
	vendorman3direxp=''
	;;
*)	: determine where vendor-supplied module manual pages go.
	case "$vendorman3dir" in
	'') dflt=`echo "$man3dir" | $sed "s#^$prefix#$vendorprefix#"` ;;
	*)	dflt=$vendorman3dir ;;
	esac
	case "$dflt" in
	''|' ') dflt=none ;;
	esac
	fn=nd~+
	rp='Pathname for the vendor-supplied manual section 3 pages?'
	. ./getfile
	vendorman3dir="$ans"
	vendorman3direxp="$ansexp"
	;;
esac
: Use ' ' for none so value is preserved next time through Configure
$test X"$vendorman3dir" = "X" && vendorman3dir=' '
prefixvar=vendorman3dir
. ./installprefix

: Set the vendorscript variables
case "$vendorprefix" in
'')	d_vendorscript="$undef"
	vendorscript=''
	vendorscriptexp=''
	;;
*)	d_vendorscript="$define"
	: determine where vendor-supplied scripts go.
	case "$vendorscript" in
	'')	dflt=$vendorprefix/script
		$test -d $dflt || dflt=$vendorbin ;;
	*)  dflt="$vendorscript" ;;
	esac
	$cat <<EOM

The installation process will create a directory for
vendor-supplied scripts.

EOM
	fn=d~+
	rp='Pathname for the vendor-supplied scripts directory?'
	. ./getfile
	vendorscript="$ans"
	vendorscriptexp="$ansexp"
	;;
esac
prefixvar=vendorscript
. ./installprefix

: script used to emit important warnings
cat >warn <<EOS
$startsh
if test \$# -gt 0; then
	echo "\$@@" >msg
else
	cat >msg
fi
echo "*** WARNING:" >&4
sed -e 's/^/*** /' <msg >&4
echo "*** " >&4
cat msg >>config.msg
echo " " >>config.msg
rm -f msg
EOS
chmod +x warn
$eunicefix warn

: see which of string.h or strings.h is needed
echo " "
strings=`./findhdr string.h`
if $test "$strings" && $test -r "$strings"; then
	echo "Using <string.h> instead of <strings.h>." >&4
	val="$define"
else
	val="$undef"
	strings=`./findhdr strings.h`
	if $test "$strings" && $test -r "$strings"; then
		echo "Using <strings.h> instead of <string.h>." >&4
	else
		./warn "No string header found -- You'll surely have problems."
	fi
fi
set i_string
eval $setvar
case "$i_string" in
"$undef") strings=`./findhdr strings.h`;;
*)	  strings=`./findhdr string.h`;;
esac

: see if qgcvt exists
set qgcvt d_qgcvt
eval $inlibc

: Check what kind of doubles your system has
$echo "Checking the kind of doubles you have..." >&4
$cat >try.c <<EOP
#$i_stdlib I_STDLIB
#define DOUBLESIZE $doublesize
#ifdef I_STDLIB
#include <stdlib.h>
#endif
#include <stdio.h>
static const double d = -0.1;
int main() {
  unsigned const char* b = (unsigned const char*)(&d);
#if DOUBLESIZE == 4
  if (b[0] == 0xCD && b[3] == 0xBD) {
    /* IEEE 754 32-bit little-endian */
    printf("1\n");
    exit(0);
  }
  if (b[0] == 0xBD && b[3] == 0xCD) {
    /* IEEE 754 32-bit big-endian */
    printf("2\n");
    exit(0);
  }
#endif
#if DOUBLESIZE == 8
  if (b[0] == 0x9A && b[7] == 0xBF) {
    /* IEEE 754 64-bit little-endian */
    printf("3\n");
    exit(0);
  }
  if (b[0] == 0xBF && b[7] == 0x9A) {
    /* IEEE 754 64-bit big-endian */
    printf("4\n");
    exit(0);
  }
  if (b[0] == 0x99 && b[3] == 0xBF && b[4] == 0x9A && b[7] == 0x99) {
   /* ARM mixed endian: two little-endian 32-bit floats, in big endian order:
    * 4 5 6 7 0 1 2 3 (MSB = 7, LSB = 0)
    * 99 99 b9 bf 9a 99 99 99 */
    printf("7\n");
    exit(0);
  }
  if (b[0] == 0x99 && b[3] == 0x9A && b[4] == 0xBF && b[7] == 0x99) {
   /* The opposite of case 7, mixed endian: two big-endian 32-bit floats,
    * in little endian order: 3 2 1 0 7 6 5 4 (MSB = 7, LSB = 0)
    * 99 99 99 9a bf b9 99 99 */
    printf("8\n");
    exit(0);
  }
#endif
#if DOUBLESIZE == 16
  if (b[0] == 0x9A && b[15] == 0xBF) {
    /* IEEE 754 128-bit little-endian */
    printf("5\n");
    exit(0);
  }
  if (b[0] == 0xBF && b[15] == 0x9A) {
    /* IEEE 754 128-bit big-endian */
    printf("6\n");
    exit(0);
  }
#endif
  /* Then there are old mainframe/miniframe formats like VAX, IBM, and CRAY.
   * Whether those environments can still build Perl is debatable. */
  printf("-1\n"); /* unknown */
  exit(0);
}
EOP
set try
if eval $compile; then
    doublekind=`$run ./try`
else
    doublekind=-1
fi
case "$doublekind" in
1) echo "You have IEEE 754 32-bit little endian doubles." >&4 ;;
2) echo "You have IEEE 754 32-bit big endian doubles." >&4 ;;
3) echo "You have IEEE 754 64-bit little endian doubles." >&4 ;;
4) echo "You have IEEE 754 64-bit big endian doubles." >&4 ;;
5) echo "You have IEEE 754 128-bit little endian doubles." >&4 ;;
6) echo "You have IEEE 754 128-bit big endian doubles." >&4 ;;
7) echo "You have IEEE 754 64-bit mixed endian doubles (32-bit LEs in BE)." >&4 ;;
8) echo "You have IEEE 754 64-bit mixed endian doubles (32-bit BEs in LE)." >&4 ;;
*) echo "Cannot figure out your double.  You VAX, or something?" >&4 ;;
esac
$rm_try

: Check print/scan long double stuff
echo " "

if $test X"$d_longdbl" = X"$define"; then

echo "Checking how to print long doubles..." >&4

if $test X"$sPRIfldbl" = X -a X"$doublesize" = X"$longdblsize"; then
	$cat >try.c <<'EOCP'
#include <sys/types.h>
#include <stdio.h>
int main() {
  double d = 123.456;
  printf("%.3f\n", d);
}
EOCP
	set try
	if eval $compile; then
		yyy=`$run ./try`
		case "$yyy" in
		123.456)
			sPRIfldbl='"f"'; sPRIgldbl='"g"'; sPRIeldbl='"e"';
			sPRIFUldbl='"F"'; sPRIGUldbl='"G"'; sPRIEUldbl='"E"';
			echo "We will use %f."
			;;
		esac
	fi
fi

if $test X"$sPRIfldbl" = X; then
	$cat >try.c <<'EOCP'
#include <sys/types.h>
#include <stdio.h>
int main() {
  long double d = 123.456;
  printf("%.3Lf\n", d);
}
EOCP
	set try
	if eval $compile; then
		yyy=`$run ./try`
		case "$yyy" in
		123.456)
			sPRIfldbl='"Lf"'; sPRIgldbl='"Lg"'; sPRIeldbl='"Le"';
			sPRIFUldbl='"LF"'; sPRIGUldbl='"LG"'; sPRIEUldbl='"LE"';
			echo "We will use %Lf."
			;;
		esac
	fi
fi

if $test X"$sPRIfldbl" = X; then
	$cat >try.c <<'EOCP'
#include <sys/types.h>
#include <stdio.h>
int main() {
  long double d = 123.456;
  printf("%.3llf\n", d);
}
EOCP
	set try
	if eval $compile; then
		yyy=`$run ./try`
		case "$yyy" in
		123.456)
			sPRIfldbl='"llf"'; sPRIgldbl='"llg"'; sPRIeldbl='"lle"';
			sPRIFUldbl='"llF"'; sPRIGUldbl='"llG"'; sPRIEUldbl='"llE"';
			echo "We will use %llf."
			;;
		esac
	fi
fi

if $test X"$sPRIfldbl" = X; then
	$cat >try.c <<'EOCP'
#include <sys/types.h>
#include <stdio.h>
int main() {
  long double d = 123.456;
  printf("%.3lf\n", d);
}
EOCP
	set try
	if eval $compile; then
		yyy=`$run ./try`
		case "$yyy" in
		123.456)
			sPRIfldbl='"lf"'; sPRIgldbl='"lg"'; sPRIeldbl='"le"';
			sPRIFUldbl='"lF"'; sPRIGUldbl='"lG"'; sPRIEUldbl='"lE"';
			echo "We will use %lf."
			;;
		esac
	fi
fi

if $test X"$sPRIfldbl" = X; then
	echo "Cannot figure out how to print long doubles." >&4
else
	sSCNfldbl=$sPRIfldbl	# expect consistency
fi

$rm_try

fi # d_longdbl

case "$sPRIfldbl" in
'')	d_PRIfldbl="$undef"; d_PRIgldbl="$undef"; d_PRIeldbl="$undef";
	d_PRIFUldbl="$undef"; d_PRIGUldbl="$undef"; d_PRIEUldbl="$undef";
	d_SCNfldbl="$undef";
	;;
*)	d_PRIfldbl="$define"; d_PRIgldbl="$define"; d_PRIeldbl="$define";
	d_PRIFUldbl="$define"; d_PRIGUldbl="$define"; d_PRIEUldbl="$define";
	d_SCNfldbl="$define";
	;;
esac

: Before committing on uselongdouble, see whether that looks sane.
if $test "$uselongdouble" = "$define"; then
    message=""
    echo " "
    echo "Checking if your long double math functions work right..." >&4
    $cat > try.c <<EOF
#include <math.h>
#include <stdio.h>
int main() {
  printf("%"$sPRIgldbl"\n", sqrtl(logl(expl(cosl(sinl(0.0L))))+powl(2.0L, 3.0L)));
}
EOF
    case "$osname:$gccversion" in
    aix:)	saveccflags="$ccflags"
		ccflags="$ccflags -qlongdouble" ;; # to avoid core dump
    esac
    set try
    if eval $compile_ok; then
      yyy=`$run ./try`
    fi
    case "$yyy" in
    3) echo "Your long double math functions are working correctly." >&4 ;;
    *) echo "Your long double math functions are broken, not using long doubles." >&4
       uselongdouble=$undef
       ;;
    esac
    $rm_try
    case "$osname:$gccversion" in
    aix:)	ccflags="$saveccflags" ;; # restore
    esac
fi

: Check how to convert floats to strings.

if test "X$d_Gconvert" = X; then

echo " "
echo "Checking for an efficient way to convert floats to strings."
echo " " > try.c
case "$uselongdouble" in
"$define") echo "#define USE_LONG_DOUBLE" >>try.c ;;
esac
case "$d_longdbl" in
"$define") echo "#define HAS_LONG_DOUBLE" >>try.c ;;
esac
case "$d_PRIgldbl" in
"$define") echo "#define HAS_PRIgldbl"    >>try.c ;;
esac
$cat >>try.c <<EOP
#ifdef TRY_gconvert
#define Gconvert(x,n,t,b) gconvert((x),(n),(t),(b))
char *myname = "gconvert";
#endif
#ifdef TRY_gcvt
#define Gconvert(x,n,t,b) gcvt((x),(n),(b))
char *myname = "gcvt";
#endif
#ifdef TRY_qgcvt
#define Gconvert(x,n,t,b) qgcvt((x),(n),(b))
char *myname = "qgcvt";
#define DOUBLETYPE long double
#endif
#ifdef TRY_sprintf
#if defined(USE_LONG_DOUBLE) && defined(HAS_LONG_DOUBLE)
#ifdef HAS_PRIgldbl
#define Gconvert(x,n,t,b) sprintf((b),"%.*"$sPRIgldbl,(n),(x))
#else
#define Gconvert(x,n,t,b) sprintf((b),"%.*g",(n),(double)(x))
#endif
#else
#define Gconvert(x,n,t,b) sprintf((b),"%.*g",(n),(x))
#endif
char *myname = "sprintf";
#endif

#ifndef DOUBLETYPE
#if defined(USE_LONG_DOUBLE) && defined(HAS_LONG_DOUBLE)
#define DOUBLETYPE long double
#else
#define DOUBLETYPE double
#endif
#endif

#include <stdio.h>

#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
#$i_string I_STRING
#ifdef I_STRING
#  include <string.h>
#else
#  include <strings.h>
#endif

int checkit(char *expect, char *got)
{
    if (strcmp(expect, got)) {
		printf("%s oddity:  Expected %s, got %s\n",
			myname, expect, got);
		exit(1);
	}
}

int main()
{
	char buf[64];
	buf[63] = '\0';

	/* This must be 1st test on (which?) platform */
	/* Alan Burlison <AlanBurlsin@@unn.unisys.com> */
	Gconvert((DOUBLETYPE)0.1, 8, 0, buf);
	checkit("0.1", buf);

	Gconvert((DOUBLETYPE)0.01, 8, 0, buf);
	checkit("0.01", buf);

	Gconvert((DOUBLETYPE)0.001, 8, 0, buf);
	checkit("0.001", buf);

	Gconvert((DOUBLETYPE)0.0001, 8, 0, buf);
	checkit("0.0001", buf);

	Gconvert((DOUBLETYPE)0.00009, 8, 0, buf);
	if (strlen(buf) > 5)
	    checkit("9e-005", buf); /* for Microsoft ?? */
	else
	    checkit("9e-05", buf);

	Gconvert((DOUBLETYPE)1.0, 8, 0, buf);
	checkit("1", buf);

	Gconvert((DOUBLETYPE)1.1, 8, 0, buf);
	checkit("1.1", buf);

	Gconvert((DOUBLETYPE)1.01, 8, 0, buf);
	checkit("1.01", buf);

	Gconvert((DOUBLETYPE)1.001, 8, 0, buf);
	checkit("1.001", buf);

	Gconvert((DOUBLETYPE)1.0001, 8, 0, buf);
	checkit("1.0001", buf);

	Gconvert((DOUBLETYPE)1.00001, 8, 0, buf);
	checkit("1.00001", buf);

	Gconvert((DOUBLETYPE)1.000001, 8, 0, buf);
	checkit("1.000001", buf);

	Gconvert((DOUBLETYPE)0.0, 8, 0, buf);
	checkit("0", buf);

	Gconvert((DOUBLETYPE)-1.0, 8, 0, buf);
	checkit("-1", buf);

	/* Some Linux gcvt's give 1.e+5 here. */
	Gconvert((DOUBLETYPE)100000.0, 8, 0, buf);
	checkit("100000", buf);

	/* Some Linux gcvt's give -1.e+5 here. */
	Gconvert((DOUBLETYPE)-100000.0, 8, 0, buf);
	checkit("-100000", buf);

	Gconvert((DOUBLETYPE)123.456, 8, 0, buf);
	checkit("123.456", buf);

	/* Testing of 1e+129 in bigintpm.t must not get extra '.' here. */
	Gconvert((DOUBLETYPE)1e34, 8, 0, buf);
	/* 34 should be enough to scare even long double
	 * places into using the e notation. */
	if (strlen(buf) > 5)
	    checkit("1e+034", buf); /* for Microsoft */
	else
	    checkit("1e+34", buf);

	/* For Perl, if you add additional tests here, also add them to
	 * t/base/num.t for benefit of platforms not using Configure or
	 * overriding d_Gconvert */

	exit(0);
}
EOP
: first add preferred functions to our list
xxx_list=""
for xxx_convert in $gconvert_preference; do
    case $xxx_convert in
    gcvt|gconvert|sprintf) xxx_list="$xxx_list $xxx_convert" ;;
    *) echo "Discarding unrecognized gconvert_preference $xxx_convert" >&4 ;;
    esac
done
: then add any others
for xxx_convert in gconvert gcvt sprintf; do
    case "$xxx_list" in
    *$xxx_convert*) ;;
    *) xxx_list="$xxx_list $xxx_convert" ;;
    esac
done

case "$d_longdbl$uselongdouble" in
"$define$define")
    : again, add preferred functions to our list first
    xxx_ld_list=""
    for xxx_convert in $gconvert_ld_preference; do
        case $xxx_convert in
        qgcvt|gcvt|gconvert|sprintf) xxx_ld_list="$xxx_ld_list $xxx_convert" ;;
        *) echo "Discarding unrecognized gconvert_ld_preference $xxx_convert" ;;
        esac
    done
    : then add qgcvt, sprintf--then, in xxx_list order, gconvert and gcvt
    for xxx_convert in qgcvt sprintf $xxx_list; do
        case "$xxx_ld_list" in
        $xxx_convert*|*" $xxx_convert"*) ;;
        *) xxx_ld_list="$xxx_ld_list $xxx_convert" ;;
        esac
    done
    : if sprintf cannot do long doubles, move it to the end
    if test "$d_PRIgldbl" != "$define"; then
        xxx_ld_list="`echo $xxx_ld_list|sed s/sprintf//` sprintf"
    fi
    : if no qgcvt, remove it
    if test "$d_qgcvt" != "$define"; then
        xxx_ld_list="`echo $xxx_ld_list|sed s/qgcvt//`"
    fi
    : use the ld_list
    xxx_list="$xxx_ld_list"
    ;;
esac

for xxx_convert in $xxx_list; do
	echo "Trying $xxx_convert..."
	$rm -f try try$_o core
	set try -DTRY_$xxx_convert
	if eval $compile; then
		echo "$xxx_convert() found." >&4
		if $run ./try; then
			echo "I'll use $xxx_convert to convert floats into a string." >&4
			break;
		else
			echo "...But $xxx_convert didn't work as I expected."
			xxx_convert=''
		fi
	else
		echo "$xxx_convert NOT found." >&4
	fi
done

if test X$xxx_convert = X; then
    echo "*** WHOA THERE!!! ***" >&4
    echo "None of ($xxx_list)  seemed to work properly.  I'll use sprintf." >&4
    xxx_convert=sprintf
fi

case "$xxx_convert" in
gconvert) d_Gconvert='gconvert((x),(n),(t),(b))' ;;
gcvt) d_Gconvert='gcvt((x),(n),(b))' ;;
qgcvt) d_Gconvert='qgcvt((x),(n),(b))' ;;
*) case "$uselongdouble$d_longdbl$d_PRIgldbl" in
   "$define$define$define")
      d_Gconvert="sprintf((b),\"%.*\"$sPRIgldbl,(n),(x))" ;;
   "$define$define$undef")
      d_Gconvert='sprintf((b),"%.*g",(n),(double)(x))' ;;
   *) d_Gconvert='sprintf((b),"%.*g",(n),(x))' ;;
   esac
   ;;
esac

fi
$rm_try

: see if _fwalk exists
set fwalk d__fwalk
eval $inlibc

: Initialize h_fcntl
h_fcntl=false

: Initialize h_sysfile
h_sysfile=false

: access call always available on UNIX
set access d_access
eval $inlibc

: locate the flags for 'access()'
case "$d_access" in
"$define")
	echo " "
	$cat >access.c <<EOCP
#include <sys/types.h>
#ifdef I_FCNTL
#include <fcntl.h>
#endif
#ifdef I_SYS_FILE
#include <sys/file.h>
#endif
#ifdef I_UNISTD
#include <unistd.h>
#endif
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
int main() {
	exit(R_OK);
}
EOCP
	: check sys/file.h first, no particular reason here
	if $test `./findhdr sys/file.h` && \
		$cc -o access $cppflags -DI_SYS_FILE access.c >/dev/null 2>&1 ; then
		h_sysfile=true;
		echo "<sys/file.h> defines the *_OK access constants." >&4
	elif $test `./findhdr fcntl.h` && \
		$cc -o access $cppflags -DI_FCNTL access.c >/dev/null 2>&1 ; then
		h_fcntl=true;
		echo "<fcntl.h> defines the *_OK access constants." >&4
	elif $test `./findhdr unistd.h` && \
		$cc -o access $cppflags -DI_UNISTD access.c >/dev/null 2>&1 ; then
		echo "<unistd.h> defines the *_OK access constants." >&4
	else
		echo "I can't find the four *_OK access constants--I'll use mine." >&4
	fi
	;;
esac
$rm -f access*

: see if accessx exists
set accessx d_accessx
eval $inlibc

: see if acosh exists
set acosh d_acosh
eval $inlibc

: see if aintl exists
set aintl d_aintl
eval $inlibc

: see if alarm exists
set alarm d_alarm
eval $inlibc

: see if 64bit time functions exists

set ctime64 d_ctime64
eval $inlibc

set localtime64 d_localtime64
eval $inlibc

set gmtime64 d_gmtime64
eval $inlibc

set mktime64 d_mktime64
eval $inlibc

set difftime64 d_difftime64
eval $inlibc

set asctime64 d_asctime64
eval $inlibc

: see if POSIX threads are available
set pthread.h i_pthread
eval $inhdr

: define a function to check prototypes
$cat > protochk <<EOSH
$startsh
cc="$cc"
optimize="$optimize"
ccflags="$ccflags"
prototype="$prototype"
define="$define"
rm_try="$rm_try"
usethreads=$usethreads
i_pthread=$i_pthread
pthread_h_first=$pthread_h_first
EOSH

$cat >> protochk <<'EOSH'

$rm_try
foo="$1"
shift
while test $# -ge 2; do
	case "$1" in
		$define) echo "#include <$2>" >> try.c ;;
		literal) echo "$2" >> try.c ;;
	esac
    # Extra magic for the benefit of systems that need pthread.h
    # to be included early to correctly detect threadsafe functions.
    # Such functions must guarantee themselves, though, that the usethreads
    # and i_pthread have been defined, before calling protochk.
    if test "$usethreads" = "$define" -a "$i_pthread" = "$define" -a "$pthread_h_first" = "$define" -a "$pthread_h_done" = ""; then
	echo "#include <pthread.h>" >> try.c
	pthread_h_done=yes
    fi
    shift 2
done
test "$prototype" = "$define"  && echo '#define CAN_PROTOTYPE' >> try.c
cat >> try.c <<'EOCP'
#ifdef CAN_PROTOTYPE
#define	_(args) args
#else
#define	_(args) ()
#endif
EOCP
echo "$foo" >> try.c
echo 'int no_real_function_has_this_name _((void)) { return 0; }' >> try.c
$cc $optimize $ccflags -c try.c > /dev/null 2>&1
status=$?
$rm_try
exit $status
EOSH
chmod +x protochk
$eunicefix protochk

: Define hasproto macro for Configure internal use
hasproto='varname=$1; func=$2; shift; shift;
while $test $# -ge 2; do
	case "$1" in
	$define) echo "#include <$2>";;
	esac ;
    shift 2;
done > try.c;
$cppstdin $cppflags $cppminus < try.c > tryout.c 2>/dev/null;
if $contains "$func.*(" tryout.c >/dev/null 2>&1; then
	echo "$func() prototype found.";
	val="$define";
else
	echo "$func() prototype NOT found.";
	val="$undef";
fi;
set $varname;
eval $setvar;
$rm_try tryout.c'

: see if sys/types.h has to be included
set sys/types.h i_systypes
eval $inhdr

: see if sys/select.h has to be included
set sys/select.h i_sysselct
eval $inhdr

: Define hasfield macro for Configure internal use
hasfield='varname=$1; struct=$2; field=$3; shift; shift; shift;
while $test $# -ge 2; do
	case "$1" in
	$define) echo "#include <$2>";;
	esac ;
    shift 2;
done > try.c;
echo "int main () { struct $struct foo; char* bar; bar = (char*)foo.$field; }" >> try.c;
set try;
if eval $compile; then
	val="$define";
else
	val="$undef";
fi;
set $varname;
eval $setvar;
$rm_try'

: see if we should include time.h, sys/time.h, or both
echo " "
if test "X$timeincl" = X; then
	echo "Testing to see if we should include <time.h>, <sys/time.h> or both." >&4
	$echo $n "I'm now running the test program...$c"
	$cat >try.c <<EOCP
#include <sys/types.h>
#ifdef I_TIME
#include <time.h>
#endif
#ifdef I_SYSTIME
#ifdef SYSTIMEKERNEL
#define KERNEL
#endif
#include <sys/time.h>
#endif
#ifdef I_SYSSELECT
#include <sys/select.h>
#endif
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
int main()
{
	struct tm foo;
#ifdef S_TIMEVAL
	struct timeval bar;
#endif
#ifdef S_TIMEZONE
	struct timezone tzp;
#endif
	if (foo.tm_sec == foo.tm_sec)
		exit(0);
#ifdef S_TIMEVAL
	if (bar.tv_sec == bar.tv_sec)
		exit(0);
#endif
	exit(1);
}
EOCP
	flags=''
	for s_timezone in '-DS_TIMEZONE' ''; do
	sysselect=''
	for s_timeval in '-DS_TIMEVAL' ''; do
	for i_systimek in '' '-DSYSTIMEKERNEL'; do
	for i_time in '' '-DI_TIME'; do
	for i_systime in '-DI_SYSTIME' ''; do
		case "$flags" in
		'') $echo $n ".$c"
			set try $i_time $i_systime $i_systimek $sysselect $s_timeval $s_timezone
			if eval $compile; then
				set X $i_time $i_systime $i_systimek $sysselect $s_timeval
				shift
				flags="$*"
				echo " "
				$echo $n "Succeeded with $flags$c"
			fi
			;;
		esac
	done
	done
	done
	done
	done
	timeincl=''
	echo " "
	case "$flags" in
	*SYSTIMEKERNEL*) i_systimek="$define"
		timeincl=`./findhdr sys/time.h`
		echo "We'll include <sys/time.h> with KERNEL defined." >&4;;
	*) i_systimek="$undef";;
	esac
	case "$flags" in
	*I_TIME*) i_time="$define"
		timeincl=`./findhdr time.h`" $timeincl"
		echo "We'll include <time.h>." >&4;;
	*) i_time="$undef";;
	esac
	case "$flags" in
	*I_SYSTIME*) i_systime="$define"
		timeincl=`./findhdr sys/time.h`" $timeincl"
		echo "We'll include <sys/time.h>." >&4;;
	*) i_systime="$undef";;
	esac
	$rm_try
fi
: see if struct tm knows about tm_zone
case "$i_systime$i_time" in
*$define*)
        echo " "
        echo "Checking to see if your struct tm has tm_zone field..." >&4
        set d_tm_tm_zone tm tm_zone $i_systime sys/time.h $i_time time.h
        eval $hasfield
        ;;
*)      val="$undef"
        set d_tm_tm_zone
        eval $setvar
        ;;
esac
case "$d_tm_tm_zone" in
"$define")      echo "Yes, it does."   ;;
*)              echo "No, it doesn't." ;;
esac
: see if struct tm knows about tm_gmtoff
case "$i_systime$i_time" in
*$define*)
        echo " "
        echo "Checking to see if your struct tm has tm_gmtoff field..." >&4
        set d_tm_tm_gmtoff tm tm_gmtoff $i_systime sys/time.h $i_time time.h
        eval $hasfield
        ;;
*)      val="$undef"
        set d_tm_tm_gmtoff
        eval $setvar
        ;;
esac
case "$d_tm_tm_gmtoff" in
"$define")      echo "Yes, it does."   ;;
*)              echo "No, it doesn't." ;;
esac

: see if asctime_r exists
set asctime_r d_asctime_r
eval $inlibc
case "$d_asctime_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_time time.h $i_systime sys/time.h"
	case "$d_asctime_r_proto:$usethreads" in
	":define")	d_asctime_r_proto=define
		set d_asctime_r_proto asctime_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_asctime_r_proto" in
	define)
	case "$asctime_r_proto" in
	''|0) try='char* asctime_r(const struct tm*, char*);'
	./protochk "$extern_C $try" $hdrs && asctime_r_proto=B_SB ;;
	esac
	case "$asctime_r_proto" in
	''|0) try='char* asctime_r(const struct tm*, char*, int);'
	./protochk "$extern_C $try" $hdrs && asctime_r_proto=B_SBI ;;
	esac
	case "$asctime_r_proto" in
	''|0) try='int asctime_r(const struct tm*, char*);'
	./protochk "$extern_C $try" $hdrs && asctime_r_proto=I_SB ;;
	esac
	case "$asctime_r_proto" in
	''|0) try='int asctime_r(const struct tm*, char*, int);'
	./protochk "$extern_C $try" $hdrs && asctime_r_proto=I_SBI ;;
	esac
	case "$asctime_r_proto" in
	''|0)	d_asctime_r=undef
 	        asctime_r_proto=0
		echo "Disabling asctime_r, cannot determine prototype." >&4 ;;
	* )	case "$asctime_r_proto" in
		REENTRANT_PROTO*) ;;
		*) asctime_r_proto="REENTRANT_PROTO_$asctime_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "asctime_r has no prototype, not using it." >&4 ;;
		esac
		d_asctime_r=undef
		asctime_r_proto=0
		;;
	esac
	;;
*)	asctime_r_proto=0
	;;
esac

: see if asinh exists
set asinh d_asinh
eval $inlibc

: see if atanh exists
set atanh d_atanh
eval $inlibc

: see if atolf exists
set atolf d_atolf
eval $inlibc

: see if atoll exists
set atoll d_atoll
eval $inlibc

: Look for GCC-style attribute format
case "$d_attribute_format" in
'')
echo " "
echo "Checking whether your compiler can handle __attribute__((format)) ..." >&4
$cat >attrib.c <<'EOCP'
#include <stdio.h>
void my_special_printf(char* pat,...) __attribute__((__format__(__printf__,1,2)));
EOCP
if $cc $ccflags -c attrib.c >attrib.out 2>&1 ; then
	if $contains 'warning' attrib.out >/dev/null 2>&1; then
		echo "Your C compiler doesn't support __attribute__((format))."
		val="$undef"
	else
		echo "Your C compiler supports __attribute__((format))."
		val="$define"
	fi
else
	echo "Your C compiler doesn't seem to understand __attribute__ at all."
	val="$undef"
fi
;;
*) val="$d_attribute_format" ;;
esac
set d_attribute_format
eval $setvar
$rm -f attrib*

: Look for GCC-style attribute format with null format allowed
case "$d_printf_format_null" in
'') case "$d_attribute_format" in
    $define)
	echo " "
	echo "Checking whether your compiler allows __printf__ format to be null ..." >&4
$cat >attrib.c <<EOCP
#include <stdio.h>
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
int null_printf (char* pat,...) __attribute__((__format__(__printf__,1,2)));
int null_printf (char* pat,...) { return (int)pat; }
int main () { exit(null_printf(NULL)); }
EOCP
	if $cc $ccflags -o attrib attrib.c >attrib.out 2>&1 ; then
	    : run the executable in case it produces a run-time warning
	    if $run ./attrib >>attrib.out 2>&1; then
		if $contains 'warning' attrib.out >/dev/null 2>&1; then
		    echo "Your C compiler doesn't allow __printf__ format to be null."
		    val="$undef"
		else
		    echo "Your C compiler allows __printf__ format to be null."
		    val="$define"
		fi
	    else
	    echo "Your C compiler executable failed with __printf__ format null."
	    val="$undef"
	fi
    else
	echo "Your C compiler fails with __printf__ format null."
	val="$undef"
    fi
    ;;
    *)  val="$undef" ;;
    esac
;;
*)  val="$d_printf_format_null" ;;
esac
set d_printf_format_null
eval $setvar
$rm -f attrib*

: Look for GCC-style attribute malloc
case "$d_attribute_malloc" in
'')
echo " "
echo "Checking whether your compiler can handle __attribute__((malloc)) ..." >&4
$cat >attrib.c <<'EOCP'
#include <stdio.h>
char *go_get_some_memory( int how_many_bytes ) __attribute__((malloc));
EOCP
if $cc $ccflags -c attrib.c >attrib.out 2>&1 ; then
	if $contains 'warning' attrib.out >/dev/null 2>&1; then
		echo "Your C compiler doesn't support __attribute__((malloc))."
		val="$undef"
	else
		echo "Your C compiler supports __attribute__((malloc))."
		val="$define"
	fi
else
	echo "Your C compiler doesn't seem to understand __attribute__ at all."
	val="$undef"
fi
;;
*) val="$d_attribute_malloc" ;;
esac
set d_attribute_malloc
eval $setvar
$rm -f attrib*

: Look for GCC-style attribute nonnull
case "$d_attribute_nonnull" in
'')
echo " "
echo "Checking whether your compiler can handle __attribute__((nonnull(1))) ..." >&4
$cat >attrib.c <<'EOCP'
#include <stdio.h>
void do_something (char *some_pointer,...) __attribute__((nonnull(1)));
EOCP
if $cc $ccflags -c attrib.c >attrib.out 2>&1 ; then
	if $contains 'warning' attrib.out >/dev/null 2>&1; then
		echo "Your C compiler doesn't support __attribute__((nonnull))."
		val="$undef"
	else
		echo "Your C compiler supports __attribute__((nonnull))."
		val="$define"
	fi
else
	echo "Your C compiler doesn't seem to understand __attribute__ at all."
	val="$undef"
fi
;;
*) val="$d_attribute_nonnull" ;;
esac
set d_attribute_nonnull
eval $setvar
$rm -f attrib*

: Look for GCC-style attribute noreturn
case "$d_attribute_noreturn" in
'')
echo " "
echo "Checking whether your compiler can handle __attribute__((noreturn)) ..." >&4
$cat >attrib.c <<'EOCP'
#include <stdio.h>
void fall_over_dead( void ) __attribute__((noreturn));
EOCP
if $cc $ccflags -c attrib.c >attrib.out 2>&1 ; then
	if $contains 'warning' attrib.out >/dev/null 2>&1; then
		echo "Your C compiler doesn't support __attribute__((noreturn))."
		val="$undef"
	else
		echo "Your C compiler supports __attribute__((noreturn))."
		val="$define"
	fi
else
	echo "Your C compiler doesn't seem to understand __attribute__ at all."
	val="$undef"
fi
;;
*) val="$d_attribute_noreturn" ;;
esac
set d_attribute_noreturn
eval $setvar
$rm -f attrib*

: Look for GCC-style attribute pure
case "$d_attribute_pure" in
'')
echo " "
echo "Checking whether your compiler can handle __attribute__((pure)) ..." >&4
$cat >attrib.c <<'EOCP'
#include <stdio.h>
int square( int n ) __attribute__((pure));
EOCP
if $cc $ccflags -c attrib.c >attrib.out 2>&1 ; then
	if $contains 'warning' attrib.out >/dev/null 2>&1; then
		echo "Your C compiler doesn't support __attribute__((pure))."
		val="$undef"
	else
		echo "Your C compiler supports __attribute__((pure))."
		val="$define"
	fi
else
	echo "Your C compiler doesn't seem to understand __attribute__ at all."
	val="$undef"
fi
;;
*) val="$d_attribute_pure" ;;
esac
set d_attribute_pure
eval $setvar
$rm -f attrib*

: Look for GCC-style attribute unused
case "$d_attribute_unused" in
'')
echo " "
echo "Checking whether your compiler can handle __attribute__((unused)) ..." >&4
$cat >attrib.c <<'EOCP'
#include <stdio.h>
int do_something( int dummy __attribute__((unused)), int n );
EOCP
if $cc $ccflags -c attrib.c >attrib.out 2>&1 ; then
	if $contains 'warning' attrib.out >/dev/null 2>&1; then
		echo "Your C compiler doesn't support __attribute__((unused))."
		val="$undef"
	else
		echo "Your C compiler supports __attribute__((unused))."
		val="$define"
	fi
else
	echo "Your C compiler doesn't seem to understand __attribute__ at all."
	val="$undef"
fi
;;
*) val="$d_attribute_unused" ;;
esac
set d_attribute_unused
eval $setvar
$rm -f attrib*

: Look for GCC-style attribute deprecated
case "$d_attribute_deprecated" in
'')
echo " "
echo "Checking whether your compiler can handle __attribute__((deprecated)) ..." >&4
$cat >attrib.c <<'EOCP'
#include <stdio.h>
int I_am_deprecated(void) __attribute__((deprecated));
EOCP
if $cc $ccflags -c attrib.c >attrib.out 2>&1 ; then
	if $contains 'warning' attrib.out >/dev/null 2>&1; then
		echo "Your C compiler doesn't support __attribute__((deprecated))."
		val="$undef"
	else
		echo "Your C compiler supports __attribute__((deprecated))."
		val="$define"
	fi
else
	echo "Your C compiler doesn't seem to understand __attribute__ at all."
	val="$undef"
fi
;;
*) val="$d_attribute_deprecated" ;;
esac
set d_attribute_deprecated
eval $setvar
$rm -f attrib*

: Look for GCC-style attribute warn_unused_result
case "$d_attribute_warn_unused_result" in
'')
echo " "
echo "Checking whether your compiler can handle __attribute__((warn_unused_result)) ..." >&4
$cat >attrib.c <<'EOCP'
#include <stdio.h>
int I_will_not_be_ignored(void) __attribute__((warn_unused_result));
EOCP
if $cc $ccflags -c attrib.c >attrib.out 2>&1 ; then
	if $contains 'warning' attrib.out >/dev/null 2>&1; then
		echo "Your C compiler doesn't support __attribute__((warn_unused_result))."
		val="$undef"
	else
		echo "Your C compiler supports __attribute__((warn_unused_result))."
		val="$define"
	fi
else
	echo "Your C compiler doesn't seem to understand __attribute__ at all."
	val="$undef"
fi
;;
*) val="$d_attribute_warn_unused_result" ;;
esac
set d_attribute_warn_unused_result
eval $setvar
$rm -f attrib*

: see if bcmp exists
set bcmp d_bcmp
eval $inlibc

: see if bcopy exists
set bcopy d_bcopy
eval $inlibc

: see if getpgrp exists
set getpgrp d_getpgrp
eval $inlibc

case "$d_getpgrp" in
"$define")
	echo " "
	echo "Checking to see which flavor of getpgrp is in use..."
	$cat >try.c <<EOP
#$i_unistd I_UNISTD
#include <sys/types.h>
#ifdef I_UNISTD
#  include <unistd.h>
#endif
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
int main()
{
	if (getuid() == 0) {
		printf("(I see you are running Configure as super-user...)\n");
		setuid(1);
	}
#ifdef TRY_BSD_PGRP
	if (getpgrp(1) == 0)
		exit(0);
#else
	if (getpgrp() > 0)
		exit(0);
#endif
	exit(1);
}
EOP
	if $cc -o try -DTRY_BSD_PGRP $ccflags $ldflags try.c $libs >/dev/null 2>&1 && $run ./try; then
		echo "You have to use getpgrp(pid) instead of getpgrp()." >&4
		val="$define"
	elif $cc -o try $ccflags $ldflags try.c $libs >/dev/null 2>&1 && $run ./try; then
		echo "You have to use getpgrp() instead of getpgrp(pid)." >&4
		val="$undef"
	else
		echo "I can't seem to compile and run the test program."
		if ./usg; then
			xxx="a USG one, i.e. you use getpgrp()."
		else
			# SVR4 systems can appear rather BSD-ish.
			case "$i_unistd" in
			$undef)
				xxx="a BSD one, i.e. you use getpgrp(pid)."
				val="$define"
				;;
			$define)
				xxx="probably a USG one, i.e. you use getpgrp()."
				val="$undef"
				;;
			esac
		fi
		echo "Assuming your getpgrp is $xxx" >&4
	fi
	;;
*) val="$undef";;
esac
set d_bsdgetpgrp
eval $setvar
$rm_try

: see if setpgrp exists
set setpgrp d_setpgrp
eval $inlibc

case "$d_setpgrp" in
"$define")
	echo " "
	echo "Checking to see which flavor of setpgrp is in use..."
	$cat >try.c <<EOP
#$i_unistd I_UNISTD
#include <sys/types.h>
#ifdef I_UNISTD
#  include <unistd.h>
#endif
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
int main()
{
	if (getuid() == 0) {
		printf("(I see you are running Configure as super-user...)\n");
		setuid(1);
	}
#ifdef TRY_BSD_PGRP
	if (-1 == setpgrp(1, 1))
		exit(0);
#else
	if (setpgrp() != -1)
		exit(0);
#endif
	exit(1);
}
EOP
	if $cc -o try -DTRY_BSD_PGRP $ccflags $ldflags try.c $libs >/dev/null 2>&1 && $run ./try; then
		echo 'You have to use setpgrp(pid,pgrp) instead of setpgrp().' >&4
		val="$define"
	elif $cc -o try $ccflags $ldflags try.c $libs >/dev/null 2>&1 && $run ./try; then
		echo 'You have to use setpgrp() instead of setpgrp(pid,pgrp).' >&4
		val="$undef"
	else
		echo "(I can't seem to compile and run the test program.)"
		if ./usg; then
			xxx="a USG one, i.e. you use setpgrp()."
		else
			# SVR4 systems can appear rather BSD-ish.
			case "$i_unistd" in
			$undef)
				xxx="a BSD one, i.e. you use setpgrp(pid,pgrp)."
				val="$define"
				;;
			$define)
				xxx="probably a USG one, i.e. you use setpgrp()."
				val="$undef"
				;;
			esac
		fi
		echo "Assuming your setpgrp is $xxx" >&4
	fi
	;;
*) val="$undef";;
esac
set d_bsdsetpgrp
eval $setvar
$rm_try

: Look for GCC-style __builtin_choose_expr
case "$d_builtin_choose_expr" in
'')
    echo " "
    echo "Checking whether your compiler can handle __builtin_choose_expr ..." >&4
    $cat >try.c <<'EOCP'
#include <assert.h>
#include <stdlib.h>
#include <stdio.h>

#define SYRINX(x) __builtin_choose_expr( x, (1056*2), (103*50) )

int main(void) {
    assert( SYRINX(1) == 2112 );
    assert( SYRINX(1) != 5150 );
    assert( SYRINX(0) == 5150 );
    assert( SYRINX(0) != 2112 );
    puts( "All good!" );
    exit(0);
}

EOCP
    set try
    if eval $compile && $run ./try; then
	echo "Your C compiler supports __builtin_choose_expr."
	val="$define"
    else
	echo "Your C compiler doesn't seem to understand __builtin_choose_expr."
	val="$undef"
    fi
;;
*) val="$d_builtin_choose_expr" ;;
esac

set d_builtin_choose_expr
eval $setvar
$rm_try

: Look for GCC-style __builtin_expect
case "$d_builtin_expect" in
'')
    echo " "
    echo "Checking whether your compiler can handle __builtin_expect ..." >&4
    $cat >try.c <<'EOCP'
int main(void) {
    int n = 50;
    if ( __builtin_expect(n, 0) ) n = 1;
    /* Remember shell exit code truth is 0, C truth is non-zero */
    return !(n == 1);
}
EOCP
    set try
    if eval $compile && $run ./try; then
	echo "Your C compiler supports __builtin_expect."
	val="$define"
    else
	echo "Your C compiler doesn't seem to understand __builtin_expect."
	val="$undef"
    fi
    ;;
*) val="$d_builtin_expect" ;;
esac

set d_builtin_expect
eval $setvar
$rm_try

: see if bzero exists
set bzero d_bzero
eval $inlibc

: see if stdarg is available
echo " "
if $test `./findhdr stdarg.h`; then
	echo "<stdarg.h> found." >&4
	valstd="$define"
else
	echo "<stdarg.h> NOT found." >&4
	valstd="$undef"
fi

: see if varargs is available
echo " "
if $test `./findhdr varargs.h`; then
	echo "<varargs.h> found." >&4
else
	echo "<varargs.h> NOT found, but that's ok (I hope)." >&4
fi

: set up the varargs testing programs
$cat > varargs.c <<EOP
#ifdef I_STDARG
#include <stdarg.h>
#endif
#ifdef I_VARARGS
#include <varargs.h>
#endif

#ifdef I_STDARG
int f(char *p, ...)
#else
int f(va_alist)
va_dcl
#endif
{
	va_list ap;
#ifndef I_STDARG
	char *p;
#endif
#ifdef I_STDARG
	va_start(ap,p);
#else
	va_start(ap);
	p = va_arg(ap, char *);
#endif
	va_end(ap);
	return 0;
}
EOP
$cat > varargs <<EOP
$startsh
if $cc -c $ccflags -D\$1 varargs.c >/dev/null 2>&1; then
	echo "true"
else
	echo "false"
fi
$rm -f varargs$_o
EOP
chmod +x varargs

: now check which varargs header should be included
echo " "
i_varhdr=''
val=''
case "$valstd" in
"$define")
	if `./varargs I_STDARG`; then
		val='stdarg.h'
	elif `./varargs I_VARARGS`; then
		val='varargs.h'
	fi
	;;
*)
	if `./varargs I_VARARGS`; then
		val='varargs.h'
	fi
	;;
esac
case "$val" in
'')
	echo " "
	echo "*** WHOA THERE!!! ***" >&4
	echo "    Your C compiler \"$cc\" doesn't seem to support stdarg or varargs!" >&4
	case "$knowitall" in
	'')
	echo "    I'm giving up; maybe you can try again with a different compiler?" >&4
		exit 1
		;;
	esac
echo "I could not find the definition for va_dcl... You have problems..." >&4
	val="$undef"; set i_stdarg; eval $setvar
	val="$undef"; set i_varargs; eval $setvar
	;;
*)
	set i_varhdr
	eval $setvar
	case "$i_varhdr" in
	stdarg.h)
		val="$define"; set i_stdarg; eval $setvar
		val="$undef"; set i_varargs; eval $setvar
		;;
	varargs.h)
		val="$undef"; set i_stdarg; eval $setvar
		val="$define"; set i_varargs; eval $setvar
		;;
	esac
	echo "We'll include <$i_varhdr> to get va_dcl definition." >&4;;
esac
$rm -f varargs*

: see if the Compiler supports C99 variadic macros
case "$i_stdarg$i_stdlib" in
    "$define$define")
    echo "You have <stdarg.h> and <stdlib.h>, so checking for C99 variadic macros." >&4
    $cat >try.c <<EOCP
#include <stdio.h>
#include <stdarg.h>

#define foo(buffer, format, ...) sprintf(buffer, format, __VA_ARGS__)

int main() {
  char buf[20];
  foo(buf, "%d %g %.*s", 123, 456.0, (int)3, "789fail");
  puts(buf);
  return 0;
}
EOCP
    set try
    if eval $compile && $run ./try 2>&1 >/dev/null; then
	case "`$run ./try`" in
	    "123 456 789")
	    echo "You have C99 variadic macros." >&4
	    d_c99_variadic_macros="$define"
	    ;;
	    *)
	    echo "You don't have functional C99 variadic macros." >&4
	    d_c99_variadic_macros="$undef"
	    ;;
	esac
    else
	echo "I couldn't compile and run the test program, so I assume that you don't have functional C99 variadic macros." >&4
	d_c99_variadic_macros="$undef"
    fi
    $rm_try
    ;;
    *)
    echo "You don't have <stdarg.h> and <stdlib.h>, so not checking for C99 variadic macros." >&4
    d_c99_variadic_macros="$undef"
    ;;
esac

: see if signal is declared as pointer to function returning int or void
echo " "
xxx=`./findhdr signal.h`
$test "$xxx" && $cppstdin $cppminus $cppflags < $xxx >$$.tmp 2>/dev/null
if $contains 'int.*\*[ 	]*signal' $$.tmp >/dev/null 2>&1 ; then
	echo "You have int (*signal())() instead of void." >&4
	val="$undef"
elif $contains 'void.*\*[ 	]*signal' $$.tmp >/dev/null 2>&1 ; then
	echo "You have void (*signal())()." >&4
	val="$define"
elif $contains 'extern[ 	]*[(\*]*signal' $$.tmp >/dev/null 2>&1 ; then
	echo "You have int (*signal())() instead of void." >&4
	val="$undef"
elif $contains 'void.*\*.*sig' $$.tmp >/dev/null 2>&1 ; then
	echo "You have void (*signal())()." >&4
	val="$define"
else
	case "$d_voidsig" in
	'')
	echo "I can't determine whether signal handler returns void or int..." >&4
		dflt=void
		rp="What type does your signal handler return?"
		. ./myread
		case "$ans" in
		v*) val="$define";;
		*) val="$undef";;
		esac;;
	"$define")
		echo "As you already told me, signal handler returns void." >&4
		val="$define"
		;;
	*)	echo "As you already told me, signal handler returns int." >&4
		val="$undef"
		;;
	esac
fi
set d_voidsig
eval $setvar
case "$d_voidsig" in
"$define") signal_t="void";;
*) signal_t="int";;
esac
$rm -f $$.tmp

: check for ability to cast large floats to 32-bit ints.
echo " "
echo 'Checking whether your C compiler can cast large floats to int32.' >&4
if $test "$intsize" -ge 4; then
	xxx=int
else
	xxx=long
fi
$cat >try.c <<EOCP
#include <stdio.h>
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
#include <sys/types.h>
#include <signal.h>
$signal_t blech(int s) { exit(3); }
int main()
{
	$xxx i32;
	double f, g;
	int result = 0;
	char str[16];
	signal(SIGFPE, blech);

	/* Don't let compiler optimize the test away.  Store the number
	   in a writable string for gcc to pass to sscanf under HP-UX.
	*/
	sprintf(str, "2147483647");
	sscanf(str, "%lf", &f); /* f = (double) 0x7fffffff; */
	g = 10 * f;
	i32  = ($xxx) g;

	/* x86 processors will probably give 0x8000 0000, which is a
	   sign change.  We don't want that.  We want to mimic SPARC
	   behavior here, which is to preserve the sign and give
	   back 0x7fff ffff.
	*/
	if (i32 != ($xxx) f)
		result |= 1;
	exit(result);
}
EOCP
set try
if eval $compile_ok; then
	$run ./try 2>/dev/null
	yyy=$?
else
	echo "(I can't seem to compile the test program--assuming it can't)"
	yyy=1
fi
case "$yyy" in
0)	val="$define"
	echo "Yup, it can."
	;;
*)	val="$undef"
	echo "Nope, it can't."
	;;
esac
set d_casti32
eval $setvar
$rm_try

: check for ability to cast negative floats to unsigned
echo " "
echo 'Checking whether your C compiler can cast negative float to unsigned.' >&4
$cat >try.c <<EOCP
#include <stdio.h>
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
#include <sys/types.h>
#include <signal.h>
$signal_t blech(int s) { exit(7); }
$signal_t blech_in_list(int s) { exit(4); }
unsigned long dummy_long(unsigned long p) { return p; }
unsigned int dummy_int(unsigned int p) { return p; }
unsigned short dummy_short(unsigned short p) { return p; }
int main()
{
	double f;
	unsigned long along;
	unsigned int aint;
	unsigned short ashort;
	int result = 0;
	char str[16];

	/* Frustrate gcc-2.7.2's optimizer which failed this test with
	   a direct f = -123. assignment.  gcc-2.8.0 reportedly
	   optimized the whole file away
	*/
	/* Store the number in a writable string for gcc to pass to
	   sscanf under HP-UX.
	*/
	sprintf(str, "-123");
	sscanf(str, "%lf", &f);  /* f = -123.; */

	signal(SIGFPE, blech);
	along = (unsigned long)f;
	aint = (unsigned int)f;
	ashort = (unsigned short)f;
	if (along != (unsigned long)-123)
		result |= 1;
	if (aint != (unsigned int)-123)
		result |= 1;
	if (ashort != (unsigned short)-123)
		result |= 1;
	sprintf(str, "1073741824.");
	sscanf(str, "%lf", &f); /* f = (double)0x40000000; */
	f = f + f;
	along = 0;
	along = (unsigned long)f;
	if (along != 0x80000000)
		result |= 2;
	f -= 1.;
	along = 0;
	along = (unsigned long)f;
	if (along != 0x7fffffff)
		result |= 1;
	f += 2.;
	along = 0;
	along = (unsigned long)f;
	if (along != 0x80000001)
		result |= 2;
	if (result)
		exit(result);
	signal(SIGFPE, blech_in_list);
	sprintf(str, "123.");
	sscanf(str, "%lf", &f);  /* f = 123.; */
	along = dummy_long((unsigned long)f);
	aint = dummy_int((unsigned int)f);
	ashort = dummy_short((unsigned short)f);
	if (along != (unsigned long)123)
		result |= 4;
	if (aint != (unsigned int)123)
		result |= 4;
	if (ashort != (unsigned short)123)
		result |= 4;
	exit(result);

}
EOCP
set try
if eval $compile_ok; then
	$run ./try 2>/dev/null
	castflags=$?
else
	echo "(I can't seem to compile the test program--assuming it can't)"
	castflags=7
fi
case "$castflags" in
0)	val="$define"
	echo "Yup, it can."
	;;
*)	val="$undef"
	echo "Nope, it can't."
	;;
esac
set d_castneg
eval $setvar
$rm_try

: see if cbrt exists
set cbrt d_cbrt
eval $inlibc

: see if vprintf exists
echo " "
if set vprintf val -f d_vprintf; eval $csym; $val; then
	echo 'vprintf() found.' >&4
	val="$define"
	$cat >try.c <<EOF
#$i_stdarg I_STDARG  /* Only one of these can be defined by i_varhrd */
#$i_varargs I_VARARGS

#$i_stdlib I_STDLIB
#$i_unistd I_UNISTD

#ifdef I_STDARG
#  include <stdarg.h>
#else /* I_VARARGS */
#  include <varargs.h>
#endif

#ifdef I_UNISTD
#  include <unistd.h>
#endif

#ifdef I_STDLIB
#  include <stdlib.h>
#endif

#include <stdio.h> /* vsprintf prototype */

#ifdef I_STDARG
void xxx(int n, ...)
{
    va_list args;
    char buf[10];
    va_start(args, n);
    exit((unsigned long)vsprintf(buf,"%s",args) > 10L);
}
int main() { xxx(1, "foo"); }

#else /* I_VARARGS */

xxx(va_alist)
va_dcl
{
    va_list args;
    char buf[10];
    va_start(args);
    exit((unsigned long)vsprintf(buf,"%s",args) > 10L);
}
int main() { xxx("foo"); }

#endif

EOF
	set try
	if eval $compile_ok; then
		if $run ./try; then
			echo "Your vsprintf() returns (int)." >&4
			val2="$undef"
		else
			echo "Your vsprintf() returns (char*)." >&4
			val2="$define"
		fi
	else
		echo 'I am unable to compile the vsprintf() test program.' >&4
		# We shouldn't get here.  If we do, assume the standard signature,
		# not the old BSD one.
		echo 'Guessing that vsprintf() returns (int).' >&4
		val2="$undef"
	fi
else
	echo 'vprintf() NOT found.' >&4
	val="$undef"
	val2="$undef"
fi
$rm_try
set d_vprintf
eval $setvar
val=$val2
set d_charvspr
eval $setvar

: see if chown exists
set chown d_chown
eval $inlibc

: see if chroot exists
set chroot d_chroot
eval $inlibc

: see if chsize exists
set chsize d_chsize
eval $inlibc

: see if class exists
set class d_class
eval $inlibc

: see if clearenv exists
set clearenv d_clearenv
eval $inlibc

: Define hasstruct macro for Configure internal use
hasstruct='varname=$1; struct=$2; shift; shift;
while $test $# -ge 2; do
	case "$1" in
	$define) echo "#include <$2>";;
	esac ;
    shift 2;
done > try.c;
echo "int main () { struct $struct foo; }" >> try.c;
set try;
if eval $compile; then
	val="$define";
else
	val="$undef";
fi;
set $varname;
eval $setvar;
$rm_try'

: see whether socket exists
socketlib=''
sockethdr=''
echo " "
$echo $n "Hmm... $c" >&4
if set socket val -f d_socket; eval $csym; $val; then
    echo "Looks like you have Berkeley networking support." >&4
    d_socket="$define"
    if set setsockopt val -f; eval $csym; $val; then
	d_oldsock="$undef"
    else
	echo "...but it uses the old BSD 4.1c interface, rather than 4.2." >&4
	d_oldsock="$define"
    fi
else
    if $contains socklib libc.list >/dev/null 2>&1; then
	echo "Looks like you have Berkeley networking support." >&4
	d_socket="$define"
	: we will have to assume that it supports the 4.2 BSD interface
	d_oldsock="$undef"
    else
	echo "You don't have Berkeley networking in libc$_a..." >&4
	if test "X$d_socket" = "X$define"; then
	    echo "...but you seem to believe that you have sockets." >&4
	else
	    for net in net socket
	    do
		if test -f $sysroot/usr/lib/lib$net$_a; then
		    ( ($nm $nm_opt $sysroot/usr/lib/lib$net$_a | eval $nm_extract) ||  \
		    $ar t $sysroot/usr/lib/lib$net$_a) 2>/dev/null >> libc.list
		    if $contains socket libc.list >/dev/null 2>&1; then
			d_socket="$define"
			socketlib="-l$net"
			case "$net" in
			net)
			    echo "...but the Wollongong group seems to have hacked it in." >&4
			    sockethdr="-I$sysroot/usr/netinclude"
			    ;;
			esac
			echo "Found Berkeley sockets interface in lib$net." >&4
			if $contains setsockopt libc.list >/dev/null 2>&1; then
			    d_oldsock="$undef"
			else
			    echo "...using the old BSD 4.1c interface, rather than 4.2." >&4
			    d_oldsock="$define"
			fi
			break
		    fi
		fi
	    done
	    if test "X$d_socket" != "X$define"; then
	       echo "or anywhere else I see." >&4
	       d_socket="$undef"
	       d_oldsock="$undef"
	    fi
	fi
    fi
fi

: see if socketpair exists
set socketpair d_sockpair
eval $inlibc


echo " "
echo "Checking the availability sa_len in the sock struct ..." >&4
$cat >try.c <<EOF
#include <sys/types.h>
#include <sys/socket.h>
int main() {
struct sockaddr sa;
return (sa.sa_len);
}
EOF
val="$undef"
set try; if eval $compile; then
    val="$define"
fi
set d_sockaddr_sa_len; eval $setvar
$rm_try

echo " "
echo "Checking the availability struct sockaddr_in6 ..." >&4
$cat >try.c <<EOF
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
int main() {
struct sockaddr_in6 sin6;
return (sin6.sin6_family);
}
EOF
val="$undef"
set try; if eval $compile; then
    val="$define"
fi
set d_sockaddr_in6; eval $setvar
$rm_try

echo " "
echo "Checking the availability sin6_scope_id in struct sockaddr_in6 ..." >&4
$cat >try.c <<EOF
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
int main() {
struct sockaddr_in6 sin6;
return (sin6.sin6_scope_id);
}
EOF
val="$undef"
set try; if eval $compile; then
    val="$define"
fi
set d_sin6_scope_id; eval $setvar
$rm_try

echo " "
echo "Checking the availability struct ip_mreq ..." >&4
$cat >try.c <<EOF
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
int main() {
struct ip_mreq mreq;
return (mreq.imr_multiaddr.s_addr);
}
EOF
val="$undef"
set try; if eval $compile; then
       val="$define"
fi
set d_ip_mreq; eval $setvar
$rm_try

echo " "
echo "Checking the availability struct ip_mreq_source ..." >&4
$cat >try.c <<EOF
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
int main() {
struct ip_mreq_source mreq;
return (mreq.imr_multiaddr.s_addr);
}
EOF
val="$undef"
set try; if eval $compile; then
       val="$define"
fi
set d_ip_mreq_source; eval $setvar
$rm_try

echo " "
echo "Checking the availability struct ipv6_mreq ..." >&4
$cat >try.c <<EOF
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
int main() {
struct ipv6_mreq mreq;
return (mreq.ipv6mr_interface);
}
EOF
val="$undef"
set try; if eval $compile; then
    val="$define"
fi
set d_ipv6_mreq; eval $setvar
$rm_try

echo " "
echo "Checking the availability struct ipv6_mreq_source ..." >&4
$cat >try.c <<EOF
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
int main() {
struct ipv6_mreq_source mreq;
return (mreq.imr_multiaddr.s_addr);
}
EOF
val="$undef"
set try; if eval $compile; then
       val="$define"
fi
set d_ipv6_mreq_source; eval $setvar
$rm_try

echo " "
echo "Checking the availability of certain socket constants..." >&4
for ENUM in MSG_CTRUNC MSG_DONTROUTE MSG_OOB MSG_PEEK MSG_PROXY SCM_RIGHTS; do
    enum=`$echo $ENUM|./tr '[A-Z]' '[a-z]'`
    $cat >try.c <<EOF
#include <sys/types.h>
#include <sys/socket.h>
int main() {
    int i = $ENUM;
}
EOF
    val="$undef"
    set try; if eval $compile; then
	val="$define"
    fi
    set d_${enum}; eval $setvar
    $rm_try
done

: see if this is a sys/uio.h system
set sys/uio.h i_sysuio
eval $inhdr

: Check for cmsghdr support
echo " "
echo "Checking to see if your system supports struct cmsghdr..." >&4
set d_cmsghdr_s cmsghdr $i_systypes sys/types.h $d_socket sys/socket.h $i_sysuio sys/uio.h
eval $hasstruct
case "$d_cmsghdr_s" in
"$define")      echo "Yes, it does."   ;;
*)              echo "No, it doesn't." ;;
esac


: check for const keyword
echo " "
echo 'Checking to see if your C compiler knows about "const"...' >&4
$cat >const.c <<'EOCP'
typedef struct spug { int drokk; } spug;
int main()
{
	const char *foo;
	const spug y = { 0 };
}
EOCP
if $cc -c $ccflags const.c >/dev/null 2>&1 ; then
	val="$define"
	echo "Yup, it does."
else
	val="$undef"
	echo "Nope, it doesn't."
fi
set d_const
eval $setvar

: see if copysign exists
set copysign d_copysign
eval $inlibc

: see if copysignl exists
set copysignl d_copysignl
eval $inlibc

: see if crypt exists
echo " "
set crypt d_crypt
eval $inlibc
case "$d_crypt" in
$define) cryptlib='' ;;
*)	if set crypt val -f d_crypt; eval $csym; $val; then
		echo 'crypt() found.' >&4
		val="$define"
		cryptlib=''
	else
		cryptlib=`./loc Slibcrypt$_a "" $xlibpth`
		if $test -z "$cryptlib"; then
			cryptlib=`./loc Mlibcrypt$_a "" $xlibpth`
		else
			cryptlib=-lcrypt
		fi
		if $test -z "$cryptlib"; then
			cryptlib=`./loc Llibcrypt$_a "" $xlibpth`
		else
			cryptlib=-lcrypt
		fi
		if $test -z "$cryptlib"; then
			cryptlib=`./loc libcrypt$_a "" $libpth`
		else
			cryptlib=-lcrypt
		fi
		if $test -z "$cryptlib"; then
			echo 'crypt() NOT found.' >&4
			val="$undef"
		else
			val="$define"
		fi
	fi
	set d_crypt
	eval $setvar
	;;
esac

: see if this is a crypt.h system
set crypt.h i_crypt
eval $inhdr

: see if crypt_r exists
set crypt_r d_crypt_r
eval $inlibc
case "$d_crypt_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_crypt crypt.h"
	case "$d_crypt_r_proto:$usethreads" in
	":define")	d_crypt_r_proto=define
		set d_crypt_r_proto crypt_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_crypt_r_proto" in
	define)
	case "$crypt_r_proto" in
	''|0) try='char* crypt_r(const char*, const char*, struct crypt_data*);'
	./protochk "$extern_C $try" $hdrs && crypt_r_proto=B_CCS ;;
	esac
	case "$crypt_r_proto" in
	''|0) try='char* crypt_r(const char*, const char*, CRYPTD*);'
	./protochk "$extern_C $try" $hdrs && crypt_r_proto=B_CCD ;;
	esac
	case "$crypt_r_proto" in
	''|0)	d_crypt_r=undef
 	        crypt_r_proto=0
		echo "Disabling crypt_r, cannot determine prototype." >&4 ;;
	* )	case "$crypt_r_proto" in
		REENTRANT_PROTO*) ;;
		*) crypt_r_proto="REENTRANT_PROTO_$crypt_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "crypt_r has no prototype, not using it." >&4 ;;
		esac
		d_crypt_r=undef
		crypt_r_proto=0
		;;
	esac
	;;
*)	crypt_r_proto=0
	;;
esac

: get csh whereabouts
case "$csh" in
'csh') val="$undef" ;;
*) val="$define" ;;
esac
set d_csh
eval $setvar
: Respect a hint or command line value for full_csh.
case "$full_csh" in
'') full_csh=$csh ;;
esac

: see if ctermid exists
set ctermid d_ctermid
eval $inlibc

: see if ctermid_r exists
set ctermid_r d_ctermid_r
eval $inlibc
case "$d_ctermid_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h "
	case "$d_ctermid_r_proto:$usethreads" in
	":define")	d_ctermid_r_proto=define
		set d_ctermid_r_proto ctermid_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_ctermid_r_proto" in
	define)
	case "$ctermid_r_proto" in
	''|0) try='char* ctermid_r(char*);'
	./protochk "$extern_C $try" $hdrs && ctermid_r_proto=B_B ;;
	esac
	case "$ctermid_r_proto" in
	''|0)	d_ctermid_r=undef
 	        ctermid_r_proto=0
		echo "Disabling ctermid_r, cannot determine prototype." >&4 ;;
	* )	case "$ctermid_r_proto" in
		REENTRANT_PROTO*) ;;
		*) ctermid_r_proto="REENTRANT_PROTO_$ctermid_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "ctermid_r has no prototype, not using it." >&4 ;;
		esac
		d_ctermid_r=undef
		ctermid_r_proto=0
		;;
	esac
	;;
*)	ctermid_r_proto=0
	;;
esac

: see if ctime_r exists
set ctime_r d_ctime_r
eval $inlibc
case "$d_ctime_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_time time.h $i_systime sys/time.h"
	case "$d_ctime_r_proto:$usethreads" in
	":define")	d_ctime_r_proto=define
		set d_ctime_r_proto ctime_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_ctime_r_proto" in
	define)
	case "$ctime_r_proto" in
	''|0) try='char* ctime_r(const time_t*, char*);'
	./protochk "$extern_C $try" $hdrs && ctime_r_proto=B_SB ;;
	esac
	case "$ctime_r_proto" in
	''|0) try='char* ctime_r(const time_t*, char*, int);'
	./protochk "$extern_C $try" $hdrs && ctime_r_proto=B_SBI ;;
	esac
	case "$ctime_r_proto" in
	''|0) try='int ctime_r(const time_t*, char*);'
	./protochk "$extern_C $try" $hdrs && ctime_r_proto=I_SB ;;
	esac
	case "$ctime_r_proto" in
	''|0) try='int ctime_r(const time_t*, char*, int);'
	./protochk "$extern_C $try" $hdrs && ctime_r_proto=I_SBI ;;
	esac
	case "$ctime_r_proto" in
	''|0)	d_ctime_r=undef
 	        ctime_r_proto=0
		echo "Disabling ctime_r, cannot determine prototype." >&4 ;;
	* )	case "$ctime_r_proto" in
		REENTRANT_PROTO*) ;;
		*) ctime_r_proto="REENTRANT_PROTO_$ctime_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "ctime_r has no prototype, not using it." >&4 ;;
		esac
		d_ctime_r=undef
		ctime_r_proto=0
		;;
	esac
	;;
*)	ctime_r_proto=0
	;;
esac

: see if cuserid exists
set cuserid d_cuserid
eval $inlibc

: see if this is a limits.h system
set limits.h i_limits
eval $inhdr

: See if number of significant digits in a double precision number is known
echo " "
$cat >dbl_dig.c <<EOM
#$i_limits I_LIMITS
#$i_float I_FLOAT
#ifdef I_LIMITS
#include <limits.h>
#endif
#ifdef I_FLOAT
#include <float.h>
#endif
#ifdef DBL_DIG
printf("Contains DBL_DIG");
#endif
EOM
$cppstdin $cppflags $cppminus < dbl_dig.c >dbl_dig.E 2>/dev/null
if $contains 'DBL_DIG' dbl_dig.E >/dev/null 2>&1; then
	echo "DBL_DIG found." >&4
	val="$define"
else
	echo "DBL_DIG NOT found." >&4
	val="$undef"
fi
$rm -f dbl_dig.?
set d_dbl_dig
eval $setvar

: see if dbm.h is available
: see if dbmclose exists
set dbmclose d_dbmclose
eval $inlibc

case "$d_dbmclose" in
$define)
	set dbm.h i_dbm
	eval $inhdr
	case "$i_dbm" in
	$define)
		val="$undef"
		set i_rpcsvcdbm
		eval $setvar
		;;
	*)	set rpcsvc/dbm.h i_rpcsvcdbm
		eval $inhdr
		;;
	esac
	;;
*)	echo "We won't be including <dbm.h>"
	val="$undef"
	set i_dbm
	eval $setvar
	val="$undef"
	set i_rpcsvcdbm
	eval $setvar
	;;
esac

: see if prototype for dbminit is available
echo " "
set d_dbminitproto dbminit $i_dbm dbm.h
eval $hasproto

: see if difftime exists
set difftime d_difftime
eval $inlibc

: see if this is a dirent system
echo " "
if xinc=`./findhdr dirent.h`; $test "$xinc"; then
	val="$define"
	echo "<dirent.h> found." >&4
else
	val="$undef"
	if xinc=`./findhdr sys/dir.h`; $test "$xinc"; then
		echo "<sys/dir.h> found." >&4
		echo " "
	else
		xinc=`./findhdr sys/ndir.h`
	fi
	echo "<dirent.h> NOT found." >&4
fi
set i_dirent
eval $setvar

: Look for type of directory structure.
echo " "
$cppstdin $cppflags $cppminus < "$xinc" > try.c

case "$direntrytype" in
''|' ')
	case "$i_dirent" in
	$define) guess1='struct dirent' ;;
	*) guess1='struct direct'  ;;
	esac
	;;
*)	guess1="$direntrytype"
	;;
esac

case "$guess1" in
'struct dirent') guess2='struct direct' ;;
*) guess2='struct dirent' ;;
esac

if $contains "$guess1" try.c >/dev/null 2>&1; then
	direntrytype="$guess1"
	echo "Your directory entries are $direntrytype." >&4
elif $contains "$guess2" try.c >/dev/null 2>&1; then
	direntrytype="$guess2"
	echo "Your directory entries seem to be $direntrytype." >&4
else
	echo "I don't recognize your system's directory entries." >&4
	rp="What type is used for directory entries on this system?"
	dflt="$guess1"
	. ./myread
	direntrytype="$ans"
fi
$rm_try

: see if the directory entry stores field length
echo " "
$cppstdin $cppflags $cppminus < "$xinc" > try.c
if $contains 'd_namlen' try.c >/dev/null 2>&1; then
	echo "Good, your directory entry keeps length information in d_namlen." >&4
	val="$define"
else
	echo "Your directory entry does not know about the d_namlen field." >&4
	val="$undef"
fi
set d_dirnamlen
eval $setvar
$rm_try

: Look for DIR.dd_fd
case "$i_dirent" in
"$define")
    echo "Checking to see if DIR has a dd_fd member variable" >&4
    $cat >try.c <<EOCP
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
#include <dirent.h>

int main() {
    DIR dir;
    dir.dd_fd = 1;
    return 0;
}
EOCP
    val=$undef
    set try
    if eval $compile; then
        echo "Yes, it does."
        val="$define"
    else
        echo "No, it does not."
        val="$undef"
    fi
    ;;
*)
    echo "You don't have a <dirent.h>, so not checking for dd_fd." >&4
    val="$undef"
    ;;
esac
set d_dir_dd_fd
eval $setvar
$rm_try

: see if this is an sysdir system
set sys/dir.h i_sysdir
eval $inhdr

: see if this is an sysndir system
set sys/ndir.h i_sysndir
eval $inhdr

: Look for dirfd
echo " "
$cat >dirfd.c <<EOM
#include <stdio.h>
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
#$i_dirent I_DIRENT		/**/
#$i_sysdir I_SYS_DIR		/**/
#$i_sysndir I_SYS_NDIR		/**/
#$i_systypes I_SYS_TYPES	/**/
#if defined(I_SYS_TYPES)
#include <sys/types.h>
#endif
#if defined(I_DIRENT)
#include <dirent.h>
#else
#ifdef I_SYS_NDIR
#include <sys/ndir.h>
#else
#ifdef I_SYS_DIR
#ifdef hp9000s500
#include <ndir.h>	/* may be wrong in the future */
#else
#include <sys/dir.h>
#endif
#endif
#endif
#endif
int main() {
	DIR *dirp = opendir(".");
	if (dirfd(dirp) >= 0)
		exit(0);
	else
		exit(1);
}
EOM
val=$undef
set dirfd
if eval $compile; then
	val="$define"
fi
case "$val" in
$define)	echo "dirfd() found." >&4	;;
*)		echo "dirfd() NOT found." >&4	;;
esac
set d_dirfd
eval $setvar
$rm -f dirfd*

: see if dladdr exists
set dladdr d_dladdr
eval $inlibc

: see if dlerror exists
xxx_runnm="$runnm"
runnm=false
set dlerror d_dlerror
eval $inlibc
runnm="$xxx_runnm"

: see if dlfcn is available
set dlfcn.h i_dlfcn
eval $inhdr

: Check what extension to use for shared libs
case "$usedl" in
$define|y|true)
	$cat << EOM

On a few systems, the dynamically loaded modules that perl generates and uses
will need a different extension than shared libs. The default will probably
be appropriate.

EOM
	case "$dlext" in
	'')	dflt="$so" ;;
	*)	dflt="$dlext" ;;
	esac
	rp='What is the extension of dynamically loaded modules'
	. ./myread
	dlext="$ans"
	;;
*)
	dlext="none"
	;;
esac

: Check if dlsym need a leading underscore
echo " "
val="$undef"

case "$dlsrc" in
dl_dlopen.xs)
	echo "Checking whether your dlsym() needs a leading underscore ..." >&4
	$cat >dyna.c <<'EOM'
fred () { }
EOM

$cat >fred.c<<EOM

#include <stdio.h>
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
#$i_dlfcn I_DLFCN
#ifdef I_DLFCN
#include <dlfcn.h>      /* the dynamic linker include file for SunOS/Solaris */
#else
#include <sys/types.h>
#include <nlist.h>
#include <link.h>
#endif

extern int fred() ;

int main()
{
    void * handle ;
    void * symbol ;
#ifndef RTLD_LAZY
    int mode = 1 ;
#else
    int mode = RTLD_LAZY ;
#endif
    handle = dlopen("./dyna.$dlext", mode) ;
    if (handle == NULL) {
	printf ("1\n") ;
	fflush (stdout) ;
	exit(0);
    }
    symbol = dlsym(handle, "fred") ;
    if (symbol == NULL) {
	/* try putting a leading underscore */
	symbol = dlsym(handle, "_fred") ;
	if (symbol == NULL) {
	    printf ("2\n") ;
	    fflush (stdout) ;
	    exit(0);
	}
	printf ("3\n") ;
    }
    else
	printf ("4\n") ;
    fflush (stdout) ;
    exit(0);
}
EOM
	: Call the object file tmp-dyna.o in case dlext=o.
	if $cc $ccflags $cccdlflags -c dyna.c > /dev/null 2>&1 &&
		mv dyna${_o} tmp-dyna${_o} > /dev/null 2>&1 &&
		$ld -o dyna.$dlext $ldflags $lddlflags tmp-dyna${_o} > /dev/null 2>&1 &&
		$cc -o fred $ccflags $ldflags $cccdlflags $ccdlflags fred.c $libs > /dev/null 2>&1 && $to dyna.$dlext; then
		xxx=`$run ./fred`
		case $xxx in
		1)	echo "Test program failed using dlopen." >&4
			echo "Perhaps you should not use dynamic loading." >&4;;
		2)	echo "Test program failed using dlsym." >&4
			echo "Perhaps you should not use dynamic loading." >&4;;
		3)	echo "dlsym needs a leading underscore" >&4
			val="$define" ;;
		4)	echo "dlsym doesn't need a leading underscore." >&4;;
		esac
	else
		echo "I can't compile and run the test program." >&4
                echo "I'm guessing that dlsym doesn't need a leading underscore." >&4
	fi
	;;
esac

$rm -f fred fred.* dyna.$dlext dyna.* tmp-dyna.*

set d_dlsymun
eval $setvar

: see if drand48_r exists
set drand48_r d_drand48_r
eval $inlibc
case "$d_drand48_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_stdlib stdlib.h"
	case "$d_drand48_r_proto:$usethreads" in
	":define")	d_drand48_r_proto=define
		set d_drand48_r_proto drand48_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_drand48_r_proto" in
	define)
	case "$drand48_r_proto" in
	''|0) try='int drand48_r(struct drand48_data*, double*);'
	./protochk "$extern_C $try" $hdrs && drand48_r_proto=I_ST ;;
	esac
	case "$drand48_r_proto" in
	''|0)	d_drand48_r=undef
 	        drand48_r_proto=0
		echo "Disabling drand48_r, cannot determine prototype." >&4 ;;
	* )	case "$drand48_r_proto" in
		REENTRANT_PROTO*) ;;
		*) drand48_r_proto="REENTRANT_PROTO_$drand48_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "drand48_r has no prototype, not using it." >&4 ;;
		esac
		d_drand48_r=undef
		drand48_r_proto=0
		;;
	esac
	;;
*)	drand48_r_proto=0
	;;
esac

: see if prototype for drand48 is available
echo " "
set d_drand48proto drand48 $i_stdlib stdlib.h $i_unistd unistd.h
eval $hasproto

: see if dup2 exists
set dup2 d_dup2
eval $inlibc

: see if eaccess exists
set eaccess d_eaccess
eval $inlibc

: see if endgrent exists
set endgrent d_endgrent
eval $inlibc

: see if this is an grp system
set grp.h i_grp
eval $inhdr

case "$i_grp" in
$define)
	xxx=`./findhdr grp.h`
	$cppstdin $cppflags $cppminus < $xxx >$$.h

	if $contains 'gr_passwd' $$.h >/dev/null 2>&1; then
		val="$define"
	else
		val="$undef"
	fi
	set d_grpasswd
	eval $setvar

	$rm -f $$.h
	;;
*)
	val="$undef";
	set d_grpasswd; eval $setvar
	;;
esac

: see if endgrent_r exists
set endgrent_r d_endgrent_r
eval $inlibc
case "$d_endgrent_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_grp grp.h"
	case "$d_endgrent_r_proto:$usethreads" in
	":define")	d_endgrent_r_proto=define
		set d_endgrent_r_proto endgrent_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_endgrent_r_proto" in
	define)
	case "$endgrent_r_proto" in
	''|0) try='int endgrent_r(FILE**);'
	./protochk "$extern_C $try" $hdrs && endgrent_r_proto=I_H ;;
	esac
	case "$endgrent_r_proto" in
	''|0) try='void endgrent_r(FILE**);'
	./protochk "$extern_C $try" $hdrs && endgrent_r_proto=V_H ;;
	esac
	case "$endgrent_r_proto" in
	''|0)	d_endgrent_r=undef
 	        endgrent_r_proto=0
		echo "Disabling endgrent_r, cannot determine prototype." >&4 ;;
	* )	case "$endgrent_r_proto" in
		REENTRANT_PROTO*) ;;
		*) endgrent_r_proto="REENTRANT_PROTO_$endgrent_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "endgrent_r has no prototype, not using it." >&4 ;;
		esac
		d_endgrent_r=undef
		endgrent_r_proto=0
		;;
	esac
	;;
*)	endgrent_r_proto=0
	;;
esac

: see if endhostent exists
set endhostent d_endhent
eval $inlibc

: see if this is a netdb.h system
set netdb.h i_netdb
eval $inhdr

: see if endhostent_r exists
set endhostent_r d_endhostent_r
eval $inlibc
case "$d_endhostent_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_netdb netdb.h"
	case "$d_endhostent_r_proto:$usethreads" in
	":define")	d_endhostent_r_proto=define
		set d_endhostent_r_proto endhostent_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_endhostent_r_proto" in
	define)
	case "$endhostent_r_proto" in
	''|0) try='int endhostent_r(struct hostent_data*);'
	./protochk "$extern_C $try" $hdrs && endhostent_r_proto=I_D ;;
	esac
	case "$endhostent_r_proto" in
	''|0) try='void endhostent_r(struct hostent_data*);'
	./protochk "$extern_C $try" $hdrs && endhostent_r_proto=V_D ;;
	esac
	case "$endhostent_r_proto" in
	''|0)	d_endhostent_r=undef
 	        endhostent_r_proto=0
		echo "Disabling endhostent_r, cannot determine prototype." >&4 ;;
	* )	case "$endhostent_r_proto" in
		REENTRANT_PROTO*) ;;
		*) endhostent_r_proto="REENTRANT_PROTO_$endhostent_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "endhostent_r has no prototype, not using it." >&4 ;;
		esac
		d_endhostent_r=undef
		endhostent_r_proto=0
		;;
	esac
	;;
*)	endhostent_r_proto=0
	;;
esac

: see if endnetent exists
set endnetent d_endnent
eval $inlibc

: see if endnetent_r exists
set endnetent_r d_endnetent_r
eval $inlibc
case "$d_endnetent_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_netdb netdb.h"
	case "$d_endnetent_r_proto:$usethreads" in
	":define")	d_endnetent_r_proto=define
		set d_endnetent_r_proto endnetent_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_endnetent_r_proto" in
	define)
	case "$endnetent_r_proto" in
	''|0) try='int endnetent_r(struct netent_data*);'
	./protochk "$extern_C $try" $hdrs && endnetent_r_proto=I_D ;;
	esac
	case "$endnetent_r_proto" in
	''|0) try='void endnetent_r(struct netent_data*);'
	./protochk "$extern_C $try" $hdrs && endnetent_r_proto=V_D ;;
	esac
	case "$endnetent_r_proto" in
	''|0)	d_endnetent_r=undef
 	        endnetent_r_proto=0
		echo "Disabling endnetent_r, cannot determine prototype." >&4 ;;
	* )	case "$endnetent_r_proto" in
		REENTRANT_PROTO*) ;;
		*) endnetent_r_proto="REENTRANT_PROTO_$endnetent_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "endnetent_r has no prototype, not using it." >&4 ;;
		esac
		d_endnetent_r=undef
		endnetent_r_proto=0
		;;
	esac
	;;
*)	endnetent_r_proto=0
	;;
esac

: see if endprotoent exists
set endprotoent d_endpent
eval $inlibc

: see if endprotoent_r exists
set endprotoent_r d_endprotoent_r
eval $inlibc
case "$d_endprotoent_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_netdb netdb.h"
	case "$d_endprotoent_r_proto:$usethreads" in
	":define")	d_endprotoent_r_proto=define
		set d_endprotoent_r_proto endprotoent_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_endprotoent_r_proto" in
	define)
	case "$endprotoent_r_proto" in
	''|0) try='int endprotoent_r(struct protoent_data*);'
	./protochk "$extern_C $try" $hdrs && endprotoent_r_proto=I_D ;;
	esac
	case "$endprotoent_r_proto" in
	''|0) try='void endprotoent_r(struct protoent_data*);'
	./protochk "$extern_C $try" $hdrs && endprotoent_r_proto=V_D ;;
	esac
	case "$endprotoent_r_proto" in
	''|0)	d_endprotoent_r=undef
 	        endprotoent_r_proto=0
		echo "Disabling endprotoent_r, cannot determine prototype." >&4 ;;
	* )	case "$endprotoent_r_proto" in
		REENTRANT_PROTO*) ;;
		*) endprotoent_r_proto="REENTRANT_PROTO_$endprotoent_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "endprotoent_r has no prototype, not using it." >&4 ;;
		esac
		d_endprotoent_r=undef
		endprotoent_r_proto=0
		;;
	esac
	;;
*)	endprotoent_r_proto=0
	;;
esac

: see if endpwent exists
set endpwent d_endpwent
eval $inlibc

: see if this is a pwd.h system
set pwd.h i_pwd
eval $inhdr

case "$i_pwd" in
$define)
	xxx=`./findhdr pwd.h`
	$cppstdin $cppflags $cppminus < $xxx >$$.h

	if $contains 'pw_quota' $$.h >/dev/null 2>&1; then
		val="$define"
	else
		val="$undef"
	fi
	set d_pwquota
	eval $setvar

	if $contains 'pw_age' $$.h >/dev/null 2>&1; then
		val="$define"
	else
		val="$undef"
	fi
	set d_pwage
	eval $setvar

	if $contains 'pw_change' $$.h >/dev/null 2>&1; then
		val="$define"
	else
		val="$undef"
	fi
	set d_pwchange
	eval $setvar

	if $contains 'pw_class' $$.h >/dev/null 2>&1; then
		val="$define"
	else
		val="$undef"
	fi
	set d_pwclass
	eval $setvar

	if $contains 'pw_expire' $$.h >/dev/null 2>&1; then
		val="$define"
	else
		val="$undef"
	fi
	set d_pwexpire
	eval $setvar

	if $contains 'pw_comment' $$.h >/dev/null 2>&1; then
		val="$define"
	else
		val="$undef"
	fi
	set d_pwcomment
	eval $setvar

	if $contains 'pw_gecos' $$.h >/dev/null 2>&1; then
		val="$define"
	else
		val="$undef"
	fi
	set d_pwgecos
	eval $setvar

	if $contains 'pw_passwd' $$.h >/dev/null 2>&1; then
		val="$define"
	else
		val="$undef"
	fi
	set d_pwpasswd
	eval $setvar

	$rm -f $$.h
	;;
*)
	val="$undef";
	set d_pwquota; eval $setvar
	set d_pwage; eval $setvar
	set d_pwchange; eval $setvar
	set d_pwclass; eval $setvar
	set d_pwexpire; eval $setvar
	set d_pwcomment; eval $setvar
	set d_pwgecos; eval $setvar
	set d_pwpasswd; eval $setvar
	;;
esac

: see if endpwent_r exists
set endpwent_r d_endpwent_r
eval $inlibc
case "$d_endpwent_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_pwd pwd.h"
	case "$d_endpwent_r_proto:$usethreads" in
	":define")	d_endpwent_r_proto=define
		set d_endpwent_r_proto endpwent_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_endpwent_r_proto" in
	define)
	case "$endpwent_r_proto" in
	''|0) try='int endpwent_r(FILE**);'
	./protochk "$extern_C $try" $hdrs && endpwent_r_proto=I_H ;;
	esac
	case "$endpwent_r_proto" in
	''|0) try='void endpwent_r(FILE**);'
	./protochk "$extern_C $try" $hdrs && endpwent_r_proto=V_H ;;
	esac
	case "$endpwent_r_proto" in
	''|0)	d_endpwent_r=undef
 	        endpwent_r_proto=0
		echo "Disabling endpwent_r, cannot determine prototype." >&4 ;;
	* )	case "$endpwent_r_proto" in
		REENTRANT_PROTO*) ;;
		*) endpwent_r_proto="REENTRANT_PROTO_$endpwent_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "endpwent_r has no prototype, not using it." >&4 ;;
		esac
		d_endpwent_r=undef
		endpwent_r_proto=0
		;;
	esac
	;;
*)	endpwent_r_proto=0
	;;
esac

: see if endservent exists
set endservent d_endsent
eval $inlibc

: see if endservent_r exists
set endservent_r d_endservent_r
eval $inlibc
case "$d_endservent_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_netdb netdb.h"
	case "$d_endservent_r_proto:$usethreads" in
	":define")	d_endservent_r_proto=define
		set d_endservent_r_proto endservent_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_endservent_r_proto" in
	define)
	case "$endservent_r_proto" in
	''|0) try='int endservent_r(struct servent_data*);'
	./protochk "$extern_C $try" $hdrs && endservent_r_proto=I_D ;;
	esac
	case "$endservent_r_proto" in
	''|0) try='void endservent_r(struct servent_data*);'
	./protochk "$extern_C $try" $hdrs && endservent_r_proto=V_D ;;
	esac
	case "$endservent_r_proto" in
	''|0)	d_endservent_r=undef
 	        endservent_r_proto=0
		echo "Disabling endservent_r, cannot determine prototype." >&4 ;;
	* )	case "$endservent_r_proto" in
		REENTRANT_PROTO*) ;;
		*) endservent_r_proto="REENTRANT_PROTO_$endservent_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "endservent_r has no prototype, not using it." >&4 ;;
		esac
		d_endservent_r=undef
		endservent_r_proto=0
		;;
	esac
	;;
*)	endservent_r_proto=0
	;;
esac

: Locate the flags for 'open()'
echo " "
$cat >try.c <<EOCP
#include <sys/types.h>
#ifdef I_FCNTL
#include <fcntl.h>
#endif
#ifdef I_SYS_FILE
#include <sys/file.h>
#endif
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
int main() {
	if(O_RDONLY);
#ifdef O_TRUNC
	exit(0);
#else
	exit(1);
#endif
}
EOCP
: check sys/file.h first to get FREAD on Sun
if $test `./findhdr sys/file.h` && \
		set try -DI_SYS_FILE && eval $compile; then
	h_sysfile=true;
	echo "<sys/file.h> defines the O_* constants..." >&4
	if $run ./try; then
		echo "and you have the 3 argument form of open()." >&4
		val="$define"
	else
		echo "but not the 3 argument form of open().  Oh, well." >&4
		val="$undef"
	fi
elif $test `./findhdr fcntl.h` && \
		set try -DI_FCNTL && eval $compile; then
	h_fcntl=true;
	echo "<fcntl.h> defines the O_* constants..." >&4
	if $run ./try; then
		echo "and you have the 3 argument form of open()." >&4
		val="$define"
	else
		echo "but not the 3 argument form of open().  Oh, well." >&4
		val="$undef"
	fi
else
	val="$undef"
	echo "I can't find the O_* constant definitions!  You got problems." >&4
fi
set d_open3
eval $setvar
$rm_try

: see if this is a sys/file.h system
val=''
set sys/file.h val
eval $inhdr

: do we need to include sys/file.h ?
case "$val" in
"$define")
	echo " "
	if $h_sysfile; then
		val="$define"
		echo "We'll be including <sys/file.h>." >&4
	else
		val="$undef"
		echo "We won't be including <sys/file.h>." >&4
	fi
	;;
*)
	h_sysfile=false
	;;
esac
set i_sysfile
eval $setvar

: see if fcntl.h is there
val=''
set fcntl.h val
eval $inhdr

: see if we can include fcntl.h
case "$val" in
"$define")
	echo " "
	if $h_fcntl; then
		val="$define"
		echo "We'll be including <fcntl.h>." >&4
	else
		val="$undef"
		if $h_sysfile; then
	echo "We don't need to include <fcntl.h> if we include <sys/file.h>." >&4
		else
			echo "We won't be including <fcntl.h>." >&4
		fi
	fi
	;;
*)
	h_fcntl=false
	val="$undef"
	;;
esac
set i_fcntl
eval $setvar

: see if fork exists
set fork d_fork
eval $inlibc

: see if pipe exists
set pipe d_pipe
eval $inlibc

: check for non-blocking I/O stuff
case "$h_sysfile" in
true) echo "#include <sys/file.h>" > head.c;;
*)
       case "$h_fcntl" in
       true) echo "#include <fcntl.h>" > head.c;;
       *) echo "#include <sys/fcntl.h>" > head.c;;
       esac
       ;;
esac
echo " "
echo "Figuring out the flag used by open() for non-blocking I/O..." >&4
case "$o_nonblock" in
'')
	$cat head.c > try.c
	$cat >>try.c <<EOCP
#include <stdio.h>
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
#$i_fcntl I_FCNTL
#ifdef I_FCNTL
#include <fcntl.h>
#endif
int main() {
#ifdef O_NONBLOCK
	printf("O_NONBLOCK\n");
	exit(0);
#endif
#ifdef O_NDELAY
	printf("O_NDELAY\n");
	exit(0);
#endif
#ifdef FNDELAY
	printf("FNDELAY\n");
	exit(0);
#endif
	exit(0);
}
EOCP
	set try
	if eval $compile_ok; then
		o_nonblock=`$run ./try`
		case "$o_nonblock" in
		'') echo "I can't figure it out, assuming O_NONBLOCK will do.";;
		*) echo "Seems like we can use $o_nonblock.";;
		esac
	else
		echo "(I can't compile the test program; pray O_NONBLOCK is right!)"
	fi
	;;
*) echo "Using $hint value $o_nonblock.";;
esac
$rm_try

echo " "
echo "Let's see what value errno gets from read() on a $o_nonblock file..." >&4
case "$eagain" in
'')
	case "$d_fork:$d_pipe:$d_alarm" in
	define:define:define)
	$cat head.c > try.c
	$cat >>try.c <<EOCP
#include <errno.h>
#include <sys/types.h>
#include <signal.h>
#include <stdio.h>
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
#$i_fcntl I_FCNTL
#ifdef I_FCNTL
#include <fcntl.h>
#endif
#define MY_O_NONBLOCK $o_nonblock
#ifndef errno  /* XXX need better Configure test */
extern int errno;
#endif
#$i_unistd I_UNISTD
#ifdef I_UNISTD
#include <unistd.h>
#endif
#$i_string I_STRING
#ifdef I_STRING
#include <string.h>
#else
#include <strings.h>
#endif
$signal_t blech(int x) { exit(3); }
EOCP
	$cat >> try.c <<'EOCP'
int main()
{
	int pd[2];
	int pu[2];
	char buf[1];
	char string[100];
	int ret;

	ret = pipe(pd);	/* Down: child -> parent */
	if (ret != 0)
		exit(3);
	ret = pipe(pu);	/* Up: parent -> child */
	if (ret != 0)
		exit(3);
	if (0 != fork()) {
		close(pd[1]);	/* Parent reads from pd[0] */
		close(pu[0]);	/* Parent writes (blocking) to pu[1] */
#ifdef F_SETFL
		if (-1 == fcntl(pd[0], F_SETFL, MY_O_NONBLOCK))
			exit(1);
#else
		exit(4);
#endif
		signal(SIGALRM, blech);
		alarm(5);
		if ((ret = read(pd[0], buf, 1)) > 0)	/* Nothing to read! */
			exit(2);
		sprintf(string, "%d\n", ret);
		ret = write(2, string, strlen(string));
		if (ret != strlen(string))
			exit(3);
		alarm(0);
#ifdef EAGAIN
		if (errno == EAGAIN) {
			printf("EAGAIN\n");
			goto ok;
		}
#endif
#ifdef EWOULDBLOCK
		if (errno == EWOULDBLOCK)
			printf("EWOULDBLOCK\n");
#endif
	ok:
		ret = write(pu[1], buf, 1);	/* Unblocks child, tell it to close our pipe */
		if (ret != 1)
			exit(3);
		sleep(2);				/* Give it time to close our pipe */
		alarm(5);
		ret = read(pd[0], buf, 1);	/* Should read EOF */
		alarm(0);
		sprintf(string, "%d\n", ret);
		ret = write(4, string, strlen(string));
		if (ret != strlen(string))
			exit(3);
		exit(0);
	}

	close(pd[0]);			/* We write to pd[1] */
	close(pu[1]);			/* We read from pu[0] */
	ret = read(pu[0], buf, 1);	/* Wait for parent to signal us we may continue */
	if (ret != 1)
		exit(3);
	close(pd[1]);			/* Pipe pd is now fully closed! */
	exit(0);				/* Bye bye, thank you for playing! */
}
EOCP
	set try
	if eval $compile_ok; then
		echo "$startsh" >mtry
		echo "$run ./try >try.out 2>try.ret 4>try.err || exit 4" >>mtry
		chmod +x mtry
		$run ./mtry >/dev/null 2>&1
		case $? in
		0) eagain=`$cat try.out`;;
		1) echo "Could not perform non-blocking setting!";;
		2) echo "I did a successful read() for something that was not there!";;
		3) echo "Hmm... non-blocking I/O does not seem to be working!";;
		4) echo "Could not find F_SETFL!";;
		*) echo "Something terribly wrong happened during testing.";;
		esac
		rd_nodata=`$cat try.ret`
		echo "A read() system call with no data present returns $rd_nodata."
		case "$rd_nodata" in
		0|-1) ;;
		*)
			echo "(That's peculiar, fixing that to be -1.)"
			rd_nodata=-1
			;;
		esac
		case "$eagain" in
		'')
			echo "Forcing errno EAGAIN on read() with no data available."
			eagain=EAGAIN
			;;
		*)
			echo "Your read() sets errno to $eagain when no data is available."
			;;
		esac
		status=`$cat try.err`
		case "$status" in
		0) echo "And it correctly returns 0 to signal EOF.";;
		-1) echo "But it also returns -1 to signal EOF, so be careful!";;
		*) echo "However, your read() returns '$status' on EOF??";;
		esac
		val="$define"
		if test "$status" = "$rd_nodata"; then
			echo "WARNING: you can't distinguish between EOF and no data!"
			val="$undef"
		fi
	else
		echo "I can't compile the test program--assuming errno EAGAIN will do."
		eagain=EAGAIN
	fi
	;;
	*)	echo "Can't figure out how to test this--assuming errno EAGAIN will do."
		eagain=EAGAIN
		val="$define"
		;;
	esac
	set d_eofnblk
	eval $setvar
	;;
*)
	echo "Using $hint value $eagain."
	echo "Your read() returns $rd_nodata when no data is present."
	case "$d_eofnblk" in
	"$define") echo "And you can see EOF because read() returns 0.";;
	"$undef") echo "But you can't see EOF status from read() returned value.";;
	*)
		echo "(Assuming you can't see EOF status from read anyway.)"
		d_eofnblk=$undef
		;;
	esac
	;;
esac
$rm_try head.c mtry

: see if erf exists
set erf d_erf
eval $inlibc

: see if erfc exists
set erfc d_erfc
eval $inlibc

: see if exp2 exists
set exp2 d_exp2
eval $inlibc

: see if expm1 exists
set expm1 d_expm1
eval $inlibc

: see if _ptr and _cnt from stdio act std
echo " "

if $contains '_lbfsize' `./findhdr stdio.h` >/dev/null 2>&1 ; then
	echo "(Looks like you have stdio.h from BSD.)"
	case "$stdio_ptr" in
	'') stdio_ptr='((fp)->_p)'
		ptr_lval=$define
		;;
	*)	ptr_lval=$d_stdio_ptr_lval;;
	esac
	case "$stdio_cnt" in
	'') stdio_cnt='((fp)->_r)'
		cnt_lval=$define
		;;
	*)	cnt_lval=$d_stdio_cnt_lval;;
	esac
	case "$stdio_base" in
	'') stdio_base='((fp)->_ub._base ? (fp)->_ub._base : (fp)->_bf._base)';;
	esac
	case "$stdio_bufsiz" in
	'') stdio_bufsiz='((fp)->_ub._base ? (fp)->_ub._size : (fp)->_bf._size)';;
	esac
elif $contains '_IO_fpos_t' `./findhdr stdio.h` `./findhdr libio.h` >/dev/null 2>&1 ; then
	echo "(Looks like you have stdio.h from Linux.)"
	case "$stdio_ptr" in
	'') stdio_ptr='((fp)->_IO_read_ptr)'
		ptr_lval=$define
		;;
	*)	ptr_lval=$d_stdio_ptr_lval;;
	esac
	case "$stdio_cnt" in
	'') stdio_cnt='((fp)->_IO_read_end - (fp)->_IO_read_ptr)'
		cnt_lval=$undef
		;;
	*)	cnt_lval=$d_stdio_cnt_lval;;
	esac
	case "$stdio_base" in
	'') stdio_base='((fp)->_IO_read_base)';;
	esac
	case "$stdio_bufsiz" in
	'') stdio_bufsiz='((fp)->_IO_read_end - (fp)->_IO_read_base)';;
	esac
else
	case "$stdio_ptr" in
	'') stdio_ptr='((fp)->_ptr)'
		ptr_lval=$define
		;;
	*)	ptr_lval=$d_stdio_ptr_lval;;
	esac
	case "$stdio_cnt" in
	'') stdio_cnt='((fp)->_cnt)'
		cnt_lval=$define
		;;
	*)	cnt_lval=$d_stdio_cnt_lval;;
	esac
	case "$stdio_base" in
	'') stdio_base='((fp)->_base)';;
	esac
	case "$stdio_bufsiz" in
	'') stdio_bufsiz='((fp)->_cnt + (fp)->_ptr - (fp)->_base)';;
	esac
fi

: test whether _ptr and _cnt really work
echo "Checking how std your stdio is..." >&4
$cat >try.c <<EOP
#include <stdio.h>
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
#define FILE_ptr(fp)	$stdio_ptr
#define FILE_cnt(fp)	$stdio_cnt
int main() {
	FILE *fp = fopen("try.c", "r");
	char c = getc(fp);
	if (
		18 <= FILE_cnt(fp) &&
		strncmp(FILE_ptr(fp), "include <stdio.h>\n", 18) == 0
	)
		exit(0);
	exit(1);
}
EOP
val="$undef"
set try
if eval $compile && $to try.c; then
	if $run ./try; then
		echo "Your stdio acts pretty std."
		val="$define"
	else
		echo "Your stdio isn't very std."
	fi
else
	echo "Your stdio doesn't appear very std."
fi
$rm_try

# glibc 2.2.90 and above apparently change stdio streams so Perl's
# direct buffer manipulation no longer works.  The Configure tests
# should be changed to correctly detect this, but until then,
# the following check should at least let perl compile and run.
# (This quick fix should be updated before 5.8.1.)
# To be defensive, reject all unknown versions, and all versions  > 2.2.9.
# A. Dougherty, June 3, 2002.
case "$d_gnulibc" in
$define)
	case "$gnulibc_version" in
	2.[01]*)  ;;
	2.2) ;;
	2.2.[0-9]) ;;
	*)  echo "But I will not snoop inside glibc $gnulibc_version stdio buffers."
		val="$undef"
		;;
	esac
	;;
esac
set d_stdstdio
eval $setvar

: Can _ptr be used as an lvalue?
case "$d_stdstdio$ptr_lval" in
$define$define) val=$define ;;
*) val=$undef ;;
esac
set d_stdio_ptr_lval
eval $setvar

: Can _cnt be used as an lvalue?
case "$d_stdstdio$cnt_lval" in
$define$define) val=$define ;;
*) val=$undef ;;
esac
set d_stdio_cnt_lval
eval $setvar


: test whether setting _ptr sets _cnt as a side effect
d_stdio_ptr_lval_sets_cnt="$undef"
d_stdio_ptr_lval_nochange_cnt="$undef"
case "$d_stdio_ptr_lval$d_stdstdio" in
$define$define)
	echo "Checking to see what happens if we set the stdio ptr..." >&4
$cat >try.c <<EOP
#include <stdio.h>
/* Can we scream? */
/* Eat dust sed :-) */
/* In the buffer space, no one can hear you scream. */
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
#define FILE_ptr(fp)	$stdio_ptr
#define FILE_cnt(fp)	$stdio_cnt
#include <sys/types.h>
int main() {
	FILE *fp = fopen("try.c", "r");
	int c;
	char *ptr;
	size_t cnt;
	if (!fp) {
	    puts("Fail even to read");
	    exit(1);
	}
	c = getc(fp); /* Read away the first # */
	if (c == EOF) {
	    puts("Fail even to read");
	    exit(1);
	}
	if (!(
		18 <= FILE_cnt(fp) &&
		strncmp(FILE_ptr(fp), "include <stdio.h>\n", 18) == 0
	)) {
		puts("Fail even to read");
		exit (1);
	}
	ptr = (char*) FILE_ptr(fp);
	cnt = (size_t)FILE_cnt(fp);

	FILE_ptr(fp) += 42;

	if ((char*)FILE_ptr(fp) != (ptr + 42)) {
		printf("Fail ptr check %p != %p", FILE_ptr(fp), (ptr + 42));
		exit (1);
	}
	if (FILE_cnt(fp) <= 20) {
		printf ("Fail (<20 chars to test)");
		exit (1);
	}
	if (strncmp(FILE_ptr(fp), "Eat dust sed :-) */\n", 20) != 0) {
		puts("Fail compare");
		exit (1);
	}
	if (cnt == FILE_cnt(fp)) {
		puts("Pass_unchanged");
		exit (0);
	}
	if (FILE_cnt(fp) == (cnt - 42)) {
		puts("Pass_changed");
		exit (0);
	}
	printf("Fail count was %d now %d\n", cnt, FILE_cnt(fp));
	return 1;

}
EOP
	set try
	if eval $compile && $to try.c; then
 		case `$run ./try` in
		Pass_changed)
			echo "Increasing ptr in your stdio decreases cnt by the same amount.  Good." >&4
			d_stdio_ptr_lval_sets_cnt="$define" ;;
		Pass_unchanged)
			echo "Increasing ptr in your stdio leaves cnt unchanged.  Good." >&4
			d_stdio_ptr_lval_nochange_cnt="$define" ;;
		Fail*)
			echo "Increasing ptr in your stdio didn't do exactly what I expected.  We'll not be doing that then." >&4 ;;
		*)
			echo "It appears attempting to set ptr in your stdio is a bad plan." >&4 ;;
	esac
	else
		echo "It seems we can't set ptr in your stdio.  Nevermind." >&4
	fi
	$rm_try
	;;
esac

: see if _base is also standard
val="$undef"
case "$d_stdstdio" in
$define)
	$cat >try.c <<EOP
#include <stdio.h>
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
#define FILE_base(fp)	$stdio_base
#define FILE_bufsiz(fp)	$stdio_bufsiz
int main() {
	FILE *fp = fopen("try.c", "r");
	char c = getc(fp);
	if (
		19 <= FILE_bufsiz(fp) &&
		strncmp(FILE_base(fp), "#include <stdio.h>\n", 19) == 0
	)
		exit(0);
	exit(1);
}
EOP
	set try
	if eval $compile && $to try.c; then
		if $run ./try; then
			echo "And its _base field acts std."
			val="$define"
		else
			echo "But its _base field isn't std."
		fi
	else
		echo "However, it seems to be lacking the _base field."
	fi
	$rm_try
	;;
esac
set d_stdiobase
eval $setvar

: see if fast_stdio exists
val="$undef"
case "$d_stdstdio:$d_stdio_ptr_lval" in
"$define:$define")
	case "$d_stdio_cnt_lval$d_stdio_ptr_lval_sets_cnt" in
	*$define*)
		echo "You seem to have 'fast stdio' to directly manipulate the stdio buffers." >& 4
		val="$define"
		;;
	esac
	;;
esac
set d_faststdio
eval $setvar



: see if fchdir exists
set fchdir d_fchdir
eval $inlibc

: see if fchmod exists
set fchmod d_fchmod
eval $inlibc

: see if fchown exists
set fchown d_fchown
eval $inlibc

: see if this is an fcntl system
set fcntl d_fcntl
eval $inlibc

: See if fcntl-based locking works.
echo " "
$cat >try.c <<EOCP
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
#include <unistd.h>
#include <fcntl.h>
#include <signal.h>
$signal_t blech(int x) { exit(3); }
int main() {
#if defined(F_SETLK) && defined(F_SETLKW)
     struct flock flock;
     int retval, fd;
     fd = open("try.c", O_RDONLY);
     flock.l_type = F_RDLCK;
     flock.l_whence = SEEK_SET;
     flock.l_start = flock.l_len = 0;
     signal(SIGALRM, blech);
     alarm(10);
     retval = fcntl(fd, F_SETLK, &flock);
     close(fd);
     (retval < 0 ? exit(2) : exit(0));
#else
     exit(2);
#endif
}
EOCP
echo "Checking if fcntl-based file locking works... "
case "$d_fcntl" in
"$define")
	set try
	if eval $compile_ok; then
		if $run ./try; then
			echo "Yes, it seems to work."
			val="$define"
		else
			echo "Nope, it didn't work."
			val="$undef"
			case "$?" in
			3) $cat >&4 <<EOM
***
*** I had to forcibly timeout from fcntl(..., F_SETLK, ...).
*** This is (almost) impossible.
*** If your NFS lock daemons are not feeling well, something like
*** this may happen, please investigate.  Cannot continue, aborting.
***
EOM
				exit 1
				;;
			esac
		fi
	else
		echo "I'm unable to compile the test program, so I'll assume not."
		val="$undef"
	fi
	;;
*) val="$undef";
	echo "Nope, since you don't even have fcntl()."
	;;
esac
set d_fcntl_can_lock
eval $setvar
$rm_try

: check for fd_set items
$cat <<EOM

Checking to see how well your C compiler handles fd_set and friends ...
EOM
$cat >try.c <<EOCP
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
#$i_systime I_SYS_TIME
#$i_sysselct I_SYS_SELECT
#$d_socket HAS_SOCKET
#include <sys/types.h>
#ifdef HAS_SOCKET
#include <sys/socket.h> /* Might include <sys/bsdtypes.h> */
#endif
#ifdef I_SYS_TIME
#include <sys/time.h>
#endif
#ifdef I_SYS_SELECT
#include <sys/select.h>
#endif
int main() {
	fd_set fds;

#ifdef TRYBITS
	if(fds.fds_bits);
#endif

#if defined(FD_SET) && defined(FD_CLR) && defined(FD_ISSET) && defined(FD_ZERO)
	exit(0);
#else
	exit(1);
#endif
}
EOCP
set try -DTRYBITS
if eval $compile; then
	d_fds_bits="$define"
	d_fd_set="$define"
	echo "Well, your system knows about the normal fd_set typedef..." >&4
	if $run ./try; then
		echo "and you have the normal fd_set macros (just as I'd expect)." >&4
		d_fd_macros="$define"
	else
		$cat >&4 <<'EOM'
but not the normal fd_set macros!  Gaaack!  I'll have to cover for you.
EOM
		d_fd_macros="$undef"
	fi
else
	$cat <<'EOM'
Hmm, your compiler has some difficulty with fd_set.  Checking further...
EOM
	set try
	if eval $compile; then
		d_fds_bits="$undef"
		d_fd_set="$define"
		echo "Well, your system has some sort of fd_set available..." >&4
		if $run ./try; then
			echo "and you have the normal fd_set macros." >&4
			d_fd_macros="$define"
		else
			$cat <<'EOM'
but not the normal fd_set macros!  Gross!  More work for me...
EOM
			d_fd_macros="$undef"
		fi
	else
	echo "Well, you got zip.  That's OK, I can roll my own fd_set stuff." >&4
		d_fd_set="$undef"
		d_fds_bits="$undef"
		d_fd_macros="$undef"
	fi
fi
$rm_try

: see if fdclose exists
set fdclose d_fdclose
eval $inlibc

: see if fdim exists
set fdim d_fdim
eval $inlibc

: see if fegetround exists
set fegetround d_fegetround
eval $inlibc

: see if fgetpos exists
set fgetpos d_fgetpos
eval $inlibc

: see if finite exists
set finite d_finite
eval $inlibc

: see if finitel exists
set finitel d_finitel
eval $inlibc

: see if flock exists
set flock d_flock
eval $inlibc

: see if prototype for flock is available
echo " "
set d_flockproto flock $i_sysfile sys/file.h
eval $hasproto

: see if fma exists
set fma d_fma
eval $inlibc

: see if fmax exists
set fmax d_fmax
eval $inlibc

: see if fmin exists
set fmin d_fmin
eval $inlibc

: see if fp_class exists
set fp_class d_fp_class
eval $inlibc

: see if this is a math.h system
set math.h i_math
eval $inhdr

: check for fpclassify
echo "Checking to see if you have fpclassify..." >&4
$cat >try.c <<EOCP
#$i_math I_MATH
#ifdef I_MATH
#include <math.h>
#endif
int main() { return fpclassify(1.0) == FP_NORMAL ? 0 : 1; }
EOCP
set try
if eval $compile; then
	val="$define"
	echo "You have fpclassify."
else
	val="$undef"
	echo "You do not have fpclassify."
fi
$rm_try
set d_fpclassify
eval $setvar

: see if fp_classify exists
set fp_classify d_fp_classify
eval $inlibc

: see if fp_classl exists
set fp_classl d_fp_classl
eval $inlibc

: see if pathconf exists
set pathconf d_pathconf
eval $inlibc

: see if fpathconf exists
set fpathconf d_fpathconf
eval $inlibc

: see if fpclass exists
set fpclass d_fpclass
eval $inlibc

: see if fpclassl exists
set fpclassl d_fpclassl
eval $inlibc

: see if fpgetround exists
set fpgetround d_fpgetround
eval $inlibc

: check for fpos64_t
echo " "
echo "Checking to see if you have fpos64_t..." >&4
$cat >try.c <<EOCP
#include <stdio.h>
int main() { fpos64_t x = 7; }
EOCP
set try
if eval $compile; then
	val="$define"
	echo "You have fpos64_t."
else
	val="$undef"
	echo "You do not have fpos64_t."
	case "$fpossize" in
	8) echo "(Your fpos_t is 64 bits, so you could use that.)" ;;
	esac
fi
$rm_try
set d_fpos64_t
eval $setvar

: see if this is an xlocale.h system
set xlocale.h i_xlocale
eval $inhdr

: see if newlocale exists
set newlocale d_newlocale
eval $inlibc

: see if freelocale exists
set freelocale d_freelocale
eval $inlibc

: see if uselocale exists
set uselocale d_uselocale
eval $inlibc

: see if duplocale exists
set duplocale d_duplocale
eval $inlibc

: see if frexpl exists
set frexpl d_frexpl
eval $inlibc

: see if this is a sys/param system
set sys/param.h i_sysparam
eval $inhdr

: see if this is a sys/mount.h system
set sys/mount.h i_sysmount
eval $inhdr

: Check for fs_data_s
echo " "
echo "Checking to see if your system supports struct fs_data..." >&4
set d_fs_data_s fs_data $i_systypes sys/types.h $i_sysparam sys/param.h $i_sysmount sys/mount.h
eval $hasstruct
case "$d_fs_data_s" in
"$define")      echo "Yes, it does."   ;;
*)              echo "No, it doesn't." ;;
esac

: see if fseeko exists
set fseeko d_fseeko
eval $inlibc
case "$longsize" in
8) echo "(Your long is 64 bits, so you could use fseek.)" ;;
esac

: see if fsetpos exists
set fsetpos d_fsetpos
eval $inlibc

: see if fstatfs exists
set fstatfs d_fstatfs
eval $inlibc

: see if statvfs exists
set statvfs d_statvfs
eval $inlibc

: see if fstatvfs exists
set fstatvfs d_fstatvfs
eval $inlibc


: see if fsync exists
set fsync d_fsync
eval $inlibc

: see if ftello exists
set ftello d_ftello
eval $inlibc
case "$longsize" in
8) echo "(Your long is 64 bits, so you could use ftell.)" ;;
esac

: check for a working futimes
d_futimes="$undef"
echo " "
echo "Checking if you have a working futimes()" >&4
$cat >try.c <<EOCP
#include <stdio.h>
#include <sys/time.h>
#include <errno.h>
#include <fcntl.h>

int main ()
{
    int fd, rv;
    fd = open ("try.c", O_RDWR);
    if (-1 == fd) exit (1);
    rv = futimes (fd, NULL);
    exit (rv == -1 ? errno : 0);
}
EOCP
set try
if eval $compile; then
    `$run ./try`
    rc=$?
    case "$rc" in
	0)  echo "Yes, you have" >&4
	    d_futimes="$define"
	    ;;
	*)  echo "No, you have futimes, but it isn't working ($rc) (probably harmless)" >&4
	    ;;
    esac
else
    echo "No, it does not (probably harmless)" >&4
fi
$rm_try

: see if ndbm.h is available
set ndbm.h i_ndbm
eval $inhdr
: Compatibility location for RedHat 7.1
set gdbm/ndbm.h i_gdbmndbm
eval $inhdr
: Compatibility location for Debian 4.0
set gdbm-ndbm.h i_gdbm_ndbm
eval $inhdr

val="$undef"
if $test "$i_ndbm" = "$define" -o "$i_gdbmndbm" = "$define" -o "$i_gdbm_ndbm" = "$define"; then
	: see if dbm_open exists
	set dbm_open d_dbm_open
	eval $inlibc
	case "$d_dbm_open" in
	$undef)
		i_ndbm="$undef"
		i_gdbmndbm="$undef"
		i_gdbm_ndbm="$undef"
		echo "We won't be including <ndbm.h>"
		val="$undef"
		;;
	*) val="$define"
	   ;;
	esac
fi
set d_ndbm
eval $setvar

ndbm_hdr_protochk='name=$1; hdr=$2;
eval "ihdr=\$""i_$name";
val="$undef";
if $test "$ihdr" = "$define"; then
	$echo "Checking if your <$hdr> uses prototypes..." >&4;
	case "$d_cplusplus" in
	$define) ./protochk "$extern_C void dbm_close(DBM *);" literal "extern \"C\" {" $ihdr $hdr literal "}" && val="$define" ;;
	*) ./protochk "$extern_C void dbm_close(int, int);" $ihdr $hdr || val="$define" ;;
	esac;
	case "$val" in
	$define) $echo "Your <$hdr> seems to have prototypes";;
	*) $echo "Your <$hdr> does not seem to have prototypes";;
	esac;
fi;
set "d_${name}_h_uses_prototypes";
eval $setvar'

set ndbm ndbm.h
eval $ndbm_hdr_protochk
set gdbmndbm gdbm/ndbm.h
eval $ndbm_hdr_protochk
set gdbm_ndbm gdbm-ndbm.h
eval $ndbm_hdr_protochk

: see if getaddrinfo exists
set getaddrinfo d_getaddrinfo
eval $inlibc

: see if getcwd exists
set getcwd d_getcwd
eval $inlibc

: see if getespwnam exists
set getespwnam d_getespwnam
eval $inlibc

: see if getfsstat exists
set getfsstat d_getfsstat
eval $inlibc

: see if getgrent exists
set getgrent d_getgrent
eval $inlibc

: see if getgrent_r exists
set getgrent_r d_getgrent_r
eval $inlibc
case "$d_getgrent_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_grp grp.h"
	case "$d_getgrent_r_proto:$usethreads" in
	":define")	d_getgrent_r_proto=define
		set d_getgrent_r_proto getgrent_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_getgrent_r_proto" in
	define)
	case "$getgrent_r_proto" in
	''|0) try='int getgrent_r(struct group*, char*, size_t, struct group**);'
	./protochk "$extern_C $try" $hdrs && getgrent_r_proto=I_SBWR ;;
	esac
	case "$getgrent_r_proto" in
	''|0) try='int getgrent_r(struct group*, char*, int, struct group**);'
	./protochk "$extern_C $try" $hdrs && getgrent_r_proto=I_SBIR ;;
	esac
	case "$getgrent_r_proto" in
	''|0) try='struct group* getgrent_r(struct group*, char*, size_t);'
	./protochk "$extern_C $try" $hdrs && getgrent_r_proto=S_SBW ;;
	esac
	case "$getgrent_r_proto" in
	''|0) try='struct group* getgrent_r(struct group*, char*, int);'
	./protochk "$extern_C $try" $hdrs && getgrent_r_proto=S_SBI ;;
	esac
	case "$getgrent_r_proto" in
	''|0) try='int getgrent_r(struct group*, char*, int);'
	./protochk "$extern_C $try" $hdrs && getgrent_r_proto=I_SBI ;;
	esac
	case "$getgrent_r_proto" in
	''|0) try='int getgrent_r(struct group*, char*, int, FILE**);'
	./protochk "$extern_C $try" $hdrs && getgrent_r_proto=I_SBIH ;;
	esac
	case "$getgrent_r_proto" in
	''|0)	d_getgrent_r=undef
 	        getgrent_r_proto=0
		echo "Disabling getgrent_r, cannot determine prototype." >&4 ;;
	* )	case "$getgrent_r_proto" in
		REENTRANT_PROTO*) ;;
		*) getgrent_r_proto="REENTRANT_PROTO_$getgrent_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "getgrent_r has no prototype, not using it." >&4 ;;
		esac
		d_getgrent_r=undef
		getgrent_r_proto=0
		;;
	esac
	;;
*)	getgrent_r_proto=0
	;;
esac

: see if getgrgid_r exists
set getgrgid_r d_getgrgid_r
eval $inlibc
case "$d_getgrgid_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_grp grp.h"
	case "$d_getgrgid_r_proto:$usethreads" in
	":define")	d_getgrgid_r_proto=define
		set d_getgrgid_r_proto getgrgid_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_getgrgid_r_proto" in
	define)
	case "$getgrgid_r_proto" in
	''|0) try='int getgrgid_r(gid_t, struct group*, char*, size_t, struct group**);'
	./protochk "$extern_C $try" $hdrs && getgrgid_r_proto=I_TSBWR ;;
	esac
	case "$getgrgid_r_proto" in
	''|0) try='int getgrgid_r(gid_t, struct group*, char*, int, struct group**);'
	./protochk "$extern_C $try" $hdrs && getgrgid_r_proto=I_TSBIR ;;
	esac
	case "$getgrgid_r_proto" in
	''|0) try='int getgrgid_r(gid_t, struct group*, char*, int);'
	./protochk "$extern_C $try" $hdrs && getgrgid_r_proto=I_TSBI ;;
	esac
	case "$getgrgid_r_proto" in
	''|0) try='struct group* getgrgid_r(gid_t, struct group*, char*, int);'
	./protochk "$extern_C $try" $hdrs && getgrgid_r_proto=S_TSBI ;;
	esac
	case "$getgrgid_r_proto" in
	''|0)	d_getgrgid_r=undef
 	        getgrgid_r_proto=0
		echo "Disabling getgrgid_r, cannot determine prototype." >&4 ;;
	* )	case "$getgrgid_r_proto" in
		REENTRANT_PROTO*) ;;
		*) getgrgid_r_proto="REENTRANT_PROTO_$getgrgid_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "getgrgid_r has no prototype, not using it." >&4 ;;
		esac
		d_getgrgid_r=undef
		getgrgid_r_proto=0
		;;
	esac
	;;
*)	getgrgid_r_proto=0
	;;
esac

: see if getgrnam_r exists
set getgrnam_r d_getgrnam_r
eval $inlibc
case "$d_getgrnam_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_grp grp.h"
	case "$d_getgrnam_r_proto:$usethreads" in
	":define")	d_getgrnam_r_proto=define
		set d_getgrnam_r_proto getgrnam_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_getgrnam_r_proto" in
	define)
	case "$getgrnam_r_proto" in
	''|0) try='int getgrnam_r(const char*, struct group*, char*, size_t, struct group**);'
	./protochk "$extern_C $try" $hdrs && getgrnam_r_proto=I_CSBWR ;;
	esac
	case "$getgrnam_r_proto" in
	''|0) try='int getgrnam_r(const char*, struct group*, char*, int, struct group**);'
	./protochk "$extern_C $try" $hdrs && getgrnam_r_proto=I_CSBIR ;;
	esac
	case "$getgrnam_r_proto" in
	''|0) try='struct group* getgrnam_r(const char*, char*, int);'
	./protochk "$extern_C $try" $hdrs && getgrnam_r_proto=S_CBI ;;
	esac
	case "$getgrnam_r_proto" in
	''|0) try='int getgrnam_r(const char*, struct group*, char*, int);'
	./protochk "$extern_C $try" $hdrs && getgrnam_r_proto=I_CSBI ;;
	esac
	case "$getgrnam_r_proto" in
	''|0) try='struct group* getgrnam_r(const char*, struct group*, char*, int);'
	./protochk "$extern_C $try" $hdrs && getgrnam_r_proto=S_CSBI ;;
	esac
	case "$getgrnam_r_proto" in
	''|0)	d_getgrnam_r=undef
 	        getgrnam_r_proto=0
		echo "Disabling getgrnam_r, cannot determine prototype." >&4 ;;
	* )	case "$getgrnam_r_proto" in
		REENTRANT_PROTO*) ;;
		*) getgrnam_r_proto="REENTRANT_PROTO_$getgrnam_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "getgrnam_r has no prototype, not using it." >&4 ;;
		esac
		d_getgrnam_r=undef
		getgrnam_r_proto=0
		;;
	esac
	;;
*)	getgrnam_r_proto=0
	;;
esac

: see if gethostbyaddr exists
set gethostbyaddr d_gethbyaddr
eval $inlibc

: see if gethostbyname exists
set gethostbyname d_gethbyname
eval $inlibc

: see if gethostent exists
set gethostent d_gethent
eval $inlibc

: see how we will look up host name
echo " "
call=''
if set gethostname val -f d_gethname; eval $csym; $val; then
	echo 'gethostname() found.' >&4
	d_gethname="$define"
	call=gethostname
fi
if set uname val -f d_uname; eval $csym; $val; then
	if ./xenix; then
		$cat <<'EOM'
uname() was found, but you're running xenix, and older versions of xenix
have a broken uname(). If you don't really know whether your xenix is old
enough to have a broken system call, use the default answer.

EOM
		dflt=y
		case "$d_uname" in
		"$define") dflt=n;;
		esac
		rp='Is your uname() broken?'
		. ./myread
		case "$ans" in
		n*) d_uname="$define"; call=uname;;
		esac
	else
		echo 'uname() found.' >&4
		d_uname="$define"
		case "$call" in
		'') call=uname ;;
		esac
	fi
fi
case "$d_gethname" in
'') d_gethname="$undef";;
esac
case "$d_uname" in
'') d_uname="$undef";;
esac
case "$d_uname$d_gethname" in
*define*)
	dflt=n
	cat <<EOM

Every now and then someone has a $call() that lies about the hostname
but can't be fixed for political or economic reasons.  If you wish, I can
pretend $call() isn't there and maybe compute hostname at run-time
thanks to the '$phostname' command.

EOM
	rp="Shall I ignore $call() from now on?"
	. ./myread
	case "$ans" in
	y*) d_uname="$undef" d_gethname="$undef"; $echo $n "Okay...$c";;
	esac;;
esac
case "$phostname" in
'') aphostname='';;
*) case "$aphostname" in
	/*) ;;
	*) set X $phostname
		shift
		file=$1
		shift
		file=`./loc $file $file $pth`
		aphostname=`echo $file $*`
		;;
	esac
	;;
esac
case "$d_uname$d_gethname" in
*define*) ;;
*)
	case "$phostname" in
	'')
		echo "There will be no way for $package to get your hostname." >&4;;
	*)
	echo "I'll use 'popen("'"'$aphostname'", "r")'"' to get your hostname." >&4
		;;
	esac;;
esac
case "$d_phostname" in
'') d_phostname="$undef";;
esac

: see if gethostbyaddr_r exists
set gethostbyaddr_r d_gethostbyaddr_r
eval $inlibc
case "$d_gethostbyaddr_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_netdb netdb.h"
	case "$d_gethostbyaddr_r_proto:$usethreads" in
	":define")	d_gethostbyaddr_r_proto=define
		set d_gethostbyaddr_r_proto gethostbyaddr_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_gethostbyaddr_r_proto" in
	define)
	case "$gethostbyaddr_r_proto" in
	''|0) try='int gethostbyaddr_r(const char*, size_t, int, struct hostent*, char*, size_t, struct hostent**, int*);'
	./protochk "$extern_C $try" $hdrs && gethostbyaddr_r_proto=I_CWISBWRE ;;
	esac
	case "$gethostbyaddr_r_proto" in
	''|0) try='struct hostent* gethostbyaddr_r(const char*, size_t, int, struct hostent*, char*, size_t, int, int*);'
	./protochk "$extern_C $try" $hdrs && gethostbyaddr_r_proto=S_CWISBWIE ;;
	esac
	case "$gethostbyaddr_r_proto" in
	''|0) try='struct hostent* gethostbyaddr_r(const char*, size_t, int, struct hostent*, char*, int, int*);'
	./protochk "$extern_C $try" $hdrs && gethostbyaddr_r_proto=S_CWISBIE ;;
	esac
	case "$gethostbyaddr_r_proto" in
	''|0) try='struct hostent* gethostbyaddr_r(const void*, size_t, int, struct hostent*, char*, int, int*);'
	./protochk "$extern_C $try" $hdrs && gethostbyaddr_r_proto=S_TWISBIE ;;
	esac
	case "$gethostbyaddr_r_proto" in
	''|0) try='struct hostent* gethostbyaddr_r(const char*, int, int, struct hostent*, char*, int, int*);'
	./protochk "$extern_C $try" $hdrs && gethostbyaddr_r_proto=S_CIISBIE ;;
	esac
	case "$gethostbyaddr_r_proto" in
	''|0) try='struct hostent* gethostbyaddr_r(const char*, struct hostent*, char*, int, int*);'
	./protochk "$extern_C $try" $hdrs && gethostbyaddr_r_proto=S_CSBIE ;;
	esac
	case "$gethostbyaddr_r_proto" in
	''|0) try='struct hostent* gethostbyaddr_r(const void*, struct hostent*, char*, int, int*);'
	./protochk "$extern_C $try" $hdrs && gethostbyaddr_r_proto=S_TSBIE ;;
	esac
	case "$gethostbyaddr_r_proto" in
	''|0) try='int gethostbyaddr_r(const char*, size_t, int, struct hostent*, struct hostent_data*);'
	./protochk "$extern_C $try" $hdrs && gethostbyaddr_r_proto=I_CWISD ;;
	esac
	case "$gethostbyaddr_r_proto" in
	''|0) try='int gethostbyaddr_r(const char*, int, int, struct hostent*, struct hostent_data*);'
	./protochk "$extern_C $try" $hdrs && gethostbyaddr_r_proto=I_CIISD ;;
	esac
	case "$gethostbyaddr_r_proto" in
	''|0) try='int gethostbyaddr_r(const char*, int, int);'
	./protochk "$extern_C $try" $hdrs && gethostbyaddr_r_proto=I_CII ;;
	esac
	case "$gethostbyaddr_r_proto" in
	''|0) try='int gethostbyaddr_r(const void*, socklen_t, int, struct hostent*, char*, size_t, struct hostent**, int*);'
	./protochk "$extern_C $try" $hdrs && gethostbyaddr_r_proto=I_TsISBWRE ;;
	esac
	case "$gethostbyaddr_r_proto" in
	''|0)	d_gethostbyaddr_r=undef
 	        gethostbyaddr_r_proto=0
		echo "Disabling gethostbyaddr_r, cannot determine prototype." >&4 ;;
	* )	case "$gethostbyaddr_r_proto" in
		REENTRANT_PROTO*) ;;
		*) gethostbyaddr_r_proto="REENTRANT_PROTO_$gethostbyaddr_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "gethostbyaddr_r has no prototype, not using it." >&4 ;;
		esac
		d_gethostbyaddr_r=undef
		gethostbyaddr_r_proto=0
		;;
	esac
	;;
*)	gethostbyaddr_r_proto=0
	;;
esac

: see if gethostbyname_r exists
set gethostbyname_r d_gethostbyname_r
eval $inlibc
case "$d_gethostbyname_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_netdb netdb.h"
	case "$d_gethostbyname_r_proto:$usethreads" in
	":define")	d_gethostbyname_r_proto=define
		set d_gethostbyname_r_proto gethostbyname_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_gethostbyname_r_proto" in
	define)
	case "$gethostbyname_r_proto" in
	''|0) try='int gethostbyname_r(const char*, struct hostent*, char*, size_t, struct hostent**, int*);'
	./protochk "$extern_C $try" $hdrs && gethostbyname_r_proto=I_CSBWRE ;;
	esac
	case "$gethostbyname_r_proto" in
	''|0) try='struct hostent* gethostbyname_r(const char*, struct hostent*, char*, int, int*);'
	./protochk "$extern_C $try" $hdrs && gethostbyname_r_proto=S_CSBIE ;;
	esac
	case "$gethostbyname_r_proto" in
	''|0) try='int gethostbyname_r(const char*, struct hostent*, struct hostent_data*);'
	./protochk "$extern_C $try" $hdrs && gethostbyname_r_proto=I_CSD ;;
	esac
	case "$gethostbyname_r_proto" in
	''|0)	d_gethostbyname_r=undef
 	        gethostbyname_r_proto=0
		echo "Disabling gethostbyname_r, cannot determine prototype." >&4 ;;
	* )	case "$gethostbyname_r_proto" in
		REENTRANT_PROTO*) ;;
		*) gethostbyname_r_proto="REENTRANT_PROTO_$gethostbyname_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "gethostbyname_r has no prototype, not using it." >&4 ;;
		esac
		d_gethostbyname_r=undef
		gethostbyname_r_proto=0
		;;
	esac
	;;
*)	gethostbyname_r_proto=0
	;;
esac

: see if gethostent_r exists
set gethostent_r d_gethostent_r
eval $inlibc
case "$d_gethostent_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_netdb netdb.h"
	case "$d_gethostent_r_proto:$usethreads" in
	":define")	d_gethostent_r_proto=define
		set d_gethostent_r_proto gethostent_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_gethostent_r_proto" in
	define)
	case "$gethostent_r_proto" in
	''|0) try='int gethostent_r(struct hostent*, char*, size_t, struct hostent**, int*);'
	./protochk "$extern_C $try" $hdrs && gethostent_r_proto=I_SBWRE ;;
	esac
	case "$gethostent_r_proto" in
	''|0) try='int gethostent_r(struct hostent*, char*, int, int*);'
	./protochk "$extern_C $try" $hdrs && gethostent_r_proto=I_SBIE ;;
	esac
	case "$gethostent_r_proto" in
	''|0) try='struct hostent* gethostent_r(struct hostent*, char*, int, int*);'
	./protochk "$extern_C $try" $hdrs && gethostent_r_proto=S_SBIE ;;
	esac
	case "$gethostent_r_proto" in
	''|0) try='struct hostent* gethostent_r(struct hostent*, char*, int);'
	./protochk "$extern_C $try" $hdrs && gethostent_r_proto=S_SBI ;;
	esac
	case "$gethostent_r_proto" in
	''|0) try='int gethostent_r(struct hostent*, char*, int);'
	./protochk "$extern_C $try" $hdrs && gethostent_r_proto=I_SBI ;;
	esac
	case "$gethostent_r_proto" in
	''|0) try='int gethostent_r(struct hostent*, struct hostent_data*);'
	./protochk "$extern_C $try" $hdrs && gethostent_r_proto=I_SD ;;
	esac
	case "$gethostent_r_proto" in
	''|0)	d_gethostent_r=undef
 	        gethostent_r_proto=0
		echo "Disabling gethostent_r, cannot determine prototype." >&4 ;;
	* )	case "$gethostent_r_proto" in
		REENTRANT_PROTO*) ;;
		*) gethostent_r_proto="REENTRANT_PROTO_$gethostent_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "gethostent_r has no prototype, not using it." >&4 ;;
		esac
		d_gethostent_r=undef
		gethostent_r_proto=0
		;;
	esac
	;;
*)	gethostent_r_proto=0
	;;
esac

: see if prototypes for various gethostxxx netdb.h functions are available
echo " "
set d_gethostprotos gethostent $i_netdb netdb.h
eval $hasproto

: see if getitimer exists
set getitimer d_getitimer
eval $inlibc

: see if getlogin exists
set getlogin d_getlogin
eval $inlibc

: see if getlogin_r exists
set getlogin_r d_getlogin_r
eval $inlibc
case "$d_getlogin_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_unistd unistd.h"
	case "$d_getlogin_r_proto:$usethreads" in
	":define")	d_getlogin_r_proto=define
		set d_getlogin_r_proto getlogin_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_getlogin_r_proto" in
	define)
	case "$getlogin_r_proto" in
	''|0) try='int getlogin_r(char*, size_t);'
	./protochk "$extern_C $try" $hdrs && getlogin_r_proto=I_BW ;;
	esac
	case "$getlogin_r_proto" in
	''|0) try='int getlogin_r(char*, int);'
	./protochk "$extern_C $try" $hdrs && getlogin_r_proto=I_BI ;;
	esac
	case "$getlogin_r_proto" in
	''|0) try='char* getlogin_r(char*, size_t);'
	./protochk "$extern_C $try" $hdrs && getlogin_r_proto=B_BW ;;
	esac
	case "$getlogin_r_proto" in
	''|0) try='char* getlogin_r(char*, int);'
	./protochk "$extern_C $try" $hdrs && getlogin_r_proto=B_BI ;;
	esac
	case "$getlogin_r_proto" in
	''|0)	d_getlogin_r=undef
 	        getlogin_r_proto=0
		echo "Disabling getlogin_r, cannot determine prototype." >&4 ;;
	* )	case "$getlogin_r_proto" in
		REENTRANT_PROTO*) ;;
		*) getlogin_r_proto="REENTRANT_PROTO_$getlogin_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "getlogin_r has no prototype, not using it." >&4 ;;
		esac
		d_getlogin_r=undef
		getlogin_r_proto=0
		;;
	esac
	;;
*)	getlogin_r_proto=0
	;;
esac

: see if getmnt exists
set getmnt d_getmnt
eval $inlibc

: see if getmntent exists
set getmntent d_getmntent
eval $inlibc

: see if getnameinfo exists
set getnameinfo d_getnameinfo
eval $inlibc

: see if getnetbyaddr exists
set getnetbyaddr d_getnbyaddr
eval $inlibc

: see if getnetbyname exists
set getnetbyname d_getnbyname
eval $inlibc

: see if getnetent exists
set getnetent d_getnent
eval $inlibc

: see if getnetbyaddr_r exists
set getnetbyaddr_r d_getnetbyaddr_r
eval $inlibc
case "$d_getnetbyaddr_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_netdb netdb.h"
	case "$d_getnetbyaddr_r_proto:$usethreads" in
	":define")	d_getnetbyaddr_r_proto=define
		set d_getnetbyaddr_r_proto getnetbyaddr_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_getnetbyaddr_r_proto" in
	define)
	case "$getnetbyaddr_r_proto" in
	''|0) try='int getnetbyaddr_r(unsigned long, int, struct netent*, char*, size_t, struct netent**, int*);'
	./protochk "$extern_C $try" $hdrs && getnetbyaddr_r_proto=I_UISBWRE ;;
	esac
	case "$getnetbyaddr_r_proto" in
	''|0) try='int getnetbyaddr_r(long, int, struct netent*, char*, int);'
	./protochk "$extern_C $try" $hdrs && getnetbyaddr_r_proto=I_LISBI ;;
	esac
	case "$getnetbyaddr_r_proto" in
	''|0) try='struct netent* getnetbyaddr_r(in_addr_t, int, struct netent*, char*, int);'
	./protochk "$extern_C $try" $hdrs && getnetbyaddr_r_proto=S_TISBI ;;
	esac
	case "$getnetbyaddr_r_proto" in
	''|0) try='struct netent* getnetbyaddr_r(long, int, struct netent*, char*, int);'
	./protochk "$extern_C $try" $hdrs && getnetbyaddr_r_proto=S_LISBI ;;
	esac
	case "$getnetbyaddr_r_proto" in
	''|0) try='int getnetbyaddr_r(in_addr_t, int, struct netent*, struct netent_data*);'
	./protochk "$extern_C $try" $hdrs && getnetbyaddr_r_proto=I_TISD ;;
	esac
	case "$getnetbyaddr_r_proto" in
	''|0) try='int getnetbyaddr_r(long, int, struct netent*, struct netent_data*);'
	./protochk "$extern_C $try" $hdrs && getnetbyaddr_r_proto=I_LISD ;;
	esac
	case "$getnetbyaddr_r_proto" in
	''|0) try='int getnetbyaddr_r(int, int, struct netent*, struct netent_data*);'
	./protochk "$extern_C $try" $hdrs && getnetbyaddr_r_proto=I_IISD ;;
	esac
	case "$getnetbyaddr_r_proto" in
	''|0) try='int getnetbyaddr_r(uint32_t, int, struct netent*, char*, size_t, struct netent**, int*);'
	./protochk "$extern_C $try" $hdrs && getnetbyaddr_r_proto=I_uISBWRE ;;
	esac
	case "$getnetbyaddr_r_proto" in
	''|0)	d_getnetbyaddr_r=undef
 	        getnetbyaddr_r_proto=0
		echo "Disabling getnetbyaddr_r, cannot determine prototype." >&4 ;;
	* )	case "$getnetbyaddr_r_proto" in
		REENTRANT_PROTO*) ;;
		*) getnetbyaddr_r_proto="REENTRANT_PROTO_$getnetbyaddr_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "getnetbyaddr_r has no prototype, not using it." >&4 ;;
		esac
		d_getnetbyaddr_r=undef
		getnetbyaddr_r_proto=0
		;;
	esac
	;;
*)	getnetbyaddr_r_proto=0
	;;
esac

: see if getnetbyname_r exists
set getnetbyname_r d_getnetbyname_r
eval $inlibc
case "$d_getnetbyname_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_netdb netdb.h"
	case "$d_getnetbyname_r_proto:$usethreads" in
	":define")	d_getnetbyname_r_proto=define
		set d_getnetbyname_r_proto getnetbyname_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_getnetbyname_r_proto" in
	define)
	case "$getnetbyname_r_proto" in
	''|0) try='int getnetbyname_r(const char*, struct netent*, char*, size_t, struct netent**, int*);'
	./protochk "$extern_C $try" $hdrs && getnetbyname_r_proto=I_CSBWRE ;;
	esac
	case "$getnetbyname_r_proto" in
	''|0) try='int getnetbyname_r(const char*, struct netent*, char*, int);'
	./protochk "$extern_C $try" $hdrs && getnetbyname_r_proto=I_CSBI ;;
	esac
	case "$getnetbyname_r_proto" in
	''|0) try='struct netent* getnetbyname_r(const char*, struct netent*, char*, int);'
	./protochk "$extern_C $try" $hdrs && getnetbyname_r_proto=S_CSBI ;;
	esac
	case "$getnetbyname_r_proto" in
	''|0) try='int getnetbyname_r(const char*, struct netent*, struct netent_data*);'
	./protochk "$extern_C $try" $hdrs && getnetbyname_r_proto=I_CSD ;;
	esac
	case "$getnetbyname_r_proto" in
	''|0)	d_getnetbyname_r=undef
 	        getnetbyname_r_proto=0
		echo "Disabling getnetbyname_r, cannot determine prototype." >&4 ;;
	* )	case "$getnetbyname_r_proto" in
		REENTRANT_PROTO*) ;;
		*) getnetbyname_r_proto="REENTRANT_PROTO_$getnetbyname_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "getnetbyname_r has no prototype, not using it." >&4 ;;
		esac
		d_getnetbyname_r=undef
		getnetbyname_r_proto=0
		;;
	esac
	;;
*)	getnetbyname_r_proto=0
	;;
esac

: see if getnetent_r exists
set getnetent_r d_getnetent_r
eval $inlibc
case "$d_getnetent_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_netdb netdb.h"
	case "$d_getnetent_r_proto:$usethreads" in
	":define")	d_getnetent_r_proto=define
		set d_getnetent_r_proto getnetent_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_getnetent_r_proto" in
	define)
	case "$getnetent_r_proto" in
	''|0) try='int getnetent_r(struct netent*, char*, size_t, struct netent**, int*);'
	./protochk "$extern_C $try" $hdrs && getnetent_r_proto=I_SBWRE ;;
	esac
	case "$getnetent_r_proto" in
	''|0) try='int getnetent_r(struct netent*, char*, int, int*);'
	./protochk "$extern_C $try" $hdrs && getnetent_r_proto=I_SBIE ;;
	esac
	case "$getnetent_r_proto" in
	''|0) try='struct netent* getnetent_r(struct netent*, char*, int, int*);'
	./protochk "$extern_C $try" $hdrs && getnetent_r_proto=S_SBIE ;;
	esac
	case "$getnetent_r_proto" in
	''|0) try='struct netent* getnetent_r(struct netent*, char*, int);'
	./protochk "$extern_C $try" $hdrs && getnetent_r_proto=S_SBI ;;
	esac
	case "$getnetent_r_proto" in
	''|0) try='int getnetent_r(struct netent*, char*, int);'
	./protochk "$extern_C $try" $hdrs && getnetent_r_proto=I_SBI ;;
	esac
	case "$getnetent_r_proto" in
	''|0) try='int getnetent_r(struct netent*, struct netent_data*);'
	./protochk "$extern_C $try" $hdrs && getnetent_r_proto=I_SD ;;
	esac
	case "$getnetent_r_proto" in
	''|0)	d_getnetent_r=undef
 	        getnetent_r_proto=0
		echo "Disabling getnetent_r, cannot determine prototype." >&4 ;;
	* )	case "$getnetent_r_proto" in
		REENTRANT_PROTO*) ;;
		*) getnetent_r_proto="REENTRANT_PROTO_$getnetent_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "getnetent_r has no prototype, not using it." >&4 ;;
		esac
		d_getnetent_r=undef
		getnetent_r_proto=0
		;;
	esac
	;;
*)	getnetent_r_proto=0
	;;
esac

: see if prototypes for various getnetxxx netdb.h functions are available
echo " "
set d_getnetprotos getnetent $i_netdb netdb.h
eval $hasproto

: see if getpagesize exists
set getpagesize d_getpagsz
eval $inlibc

: Optional checks for getprotobyname and getprotobynumber

: see if getprotobyname exists
set getprotobyname d_getpbyname
eval $inlibc

: see if getprotobynumber exists
set getprotobynumber d_getpbynumber
eval $inlibc

: see if getprotoent exists
set getprotoent d_getpent
eval $inlibc

: see if getpgid exists
set getpgid d_getpgid
eval $inlibc

: see if getpgrp2 exists
set getpgrp2 d_getpgrp2
eval $inlibc

: see if getppid exists
set getppid d_getppid
eval $inlibc

: see if getpriority exists
set getpriority d_getprior
eval $inlibc

: see if getprotobyname_r exists
set getprotobyname_r d_getprotobyname_r
eval $inlibc
case "$d_getprotobyname_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_netdb netdb.h"
	case "$d_getprotobyname_r_proto:$usethreads" in
	":define")	d_getprotobyname_r_proto=define
		set d_getprotobyname_r_proto getprotobyname_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_getprotobyname_r_proto" in
	define)
	case "$getprotobyname_r_proto" in
	''|0) try='int getprotobyname_r(const char*, struct protoent*, char*, size_t, struct protoent**);'
	./protochk "$extern_C $try" $hdrs && getprotobyname_r_proto=I_CSBWR ;;
	esac
	case "$getprotobyname_r_proto" in
	''|0) try='struct protoent* getprotobyname_r(const char*, struct protoent*, char*, int);'
	./protochk "$extern_C $try" $hdrs && getprotobyname_r_proto=S_CSBI ;;
	esac
	case "$getprotobyname_r_proto" in
	''|0) try='int getprotobyname_r(const char*, struct protoent*, struct protoent_data*);'
	./protochk "$extern_C $try" $hdrs && getprotobyname_r_proto=I_CSD ;;
	esac
	case "$getprotobyname_r_proto" in
	''|0)	d_getprotobyname_r=undef
 	        getprotobyname_r_proto=0
		echo "Disabling getprotobyname_r, cannot determine prototype." >&4 ;;
	* )	case "$getprotobyname_r_proto" in
		REENTRANT_PROTO*) ;;
		*) getprotobyname_r_proto="REENTRANT_PROTO_$getprotobyname_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "getprotobyname_r has no prototype, not using it." >&4 ;;
		esac
		d_getprotobyname_r=undef
		getprotobyname_r_proto=0
		;;
	esac
	;;
*)	getprotobyname_r_proto=0
	;;
esac

: see if getprotobynumber_r exists
set getprotobynumber_r d_getprotobynumber_r
eval $inlibc
case "$d_getprotobynumber_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_netdb netdb.h"
	case "$d_getprotobynumber_r_proto:$usethreads" in
	":define")	d_getprotobynumber_r_proto=define
		set d_getprotobynumber_r_proto getprotobynumber_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_getprotobynumber_r_proto" in
	define)
	case "$getprotobynumber_r_proto" in
	''|0) try='int getprotobynumber_r(int, struct protoent*, char*, size_t, struct protoent**);'
	./protochk "$extern_C $try" $hdrs && getprotobynumber_r_proto=I_ISBWR ;;
	esac
	case "$getprotobynumber_r_proto" in
	''|0) try='struct protoent* getprotobynumber_r(int, struct protoent*, char*, int);'
	./protochk "$extern_C $try" $hdrs && getprotobynumber_r_proto=S_ISBI ;;
	esac
	case "$getprotobynumber_r_proto" in
	''|0) try='int getprotobynumber_r(int, struct protoent*, struct protoent_data*);'
	./protochk "$extern_C $try" $hdrs && getprotobynumber_r_proto=I_ISD ;;
	esac
	case "$getprotobynumber_r_proto" in
	''|0)	d_getprotobynumber_r=undef
 	        getprotobynumber_r_proto=0
		echo "Disabling getprotobynumber_r, cannot determine prototype." >&4 ;;
	* )	case "$getprotobynumber_r_proto" in
		REENTRANT_PROTO*) ;;
		*) getprotobynumber_r_proto="REENTRANT_PROTO_$getprotobynumber_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "getprotobynumber_r has no prototype, not using it." >&4 ;;
		esac
		d_getprotobynumber_r=undef
		getprotobynumber_r_proto=0
		;;
	esac
	;;
*)	getprotobynumber_r_proto=0
	;;
esac

: see if getprotoent_r exists
set getprotoent_r d_getprotoent_r
eval $inlibc
case "$d_getprotoent_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_netdb netdb.h"
	case "$d_getprotoent_r_proto:$usethreads" in
	":define")	d_getprotoent_r_proto=define
		set d_getprotoent_r_proto getprotoent_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_getprotoent_r_proto" in
	define)
	case "$getprotoent_r_proto" in
	''|0) try='int getprotoent_r(struct protoent*, char*, size_t, struct protoent**);'
	./protochk "$extern_C $try" $hdrs && getprotoent_r_proto=I_SBWR ;;
	esac
	case "$getprotoent_r_proto" in
	''|0) try='int getprotoent_r(struct protoent*, char*, int);'
	./protochk "$extern_C $try" $hdrs && getprotoent_r_proto=I_SBI ;;
	esac
	case "$getprotoent_r_proto" in
	''|0) try='struct protoent* getprotoent_r(struct protoent*, char*, int);'
	./protochk "$extern_C $try" $hdrs && getprotoent_r_proto=S_SBI ;;
	esac
	case "$getprotoent_r_proto" in
	''|0) try='int getprotoent_r(struct protoent*, struct protoent_data*);'
	./protochk "$extern_C $try" $hdrs && getprotoent_r_proto=I_SD ;;
	esac
	case "$getprotoent_r_proto" in
	''|0)	d_getprotoent_r=undef
 	        getprotoent_r_proto=0
		echo "Disabling getprotoent_r, cannot determine prototype." >&4 ;;
	* )	case "$getprotoent_r_proto" in
		REENTRANT_PROTO*) ;;
		*) getprotoent_r_proto="REENTRANT_PROTO_$getprotoent_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "getprotoent_r has no prototype, not using it." >&4 ;;
		esac
		d_getprotoent_r=undef
		getprotoent_r_proto=0
		;;
	esac
	;;
*)	getprotoent_r_proto=0
	;;
esac

: see if prototypes for various getprotoxxx netdb.h functions are available
echo " "
set d_getprotoprotos getprotoent $i_netdb netdb.h
eval $hasproto

: see if getprpwnam exists
set getprpwnam d_getprpwnam
eval $inlibc

: see if getpwent exists
set getpwent d_getpwent
eval $inlibc

: see if getpwent_r exists
set getpwent_r d_getpwent_r
eval $inlibc
case "$d_getpwent_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_pwd pwd.h"
	case "$d_getpwent_r_proto:$usethreads" in
	":define")	d_getpwent_r_proto=define
		set d_getpwent_r_proto getpwent_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_getpwent_r_proto" in
	define)
	case "$getpwent_r_proto" in
	''|0) try='int getpwent_r(struct passwd*, char*, size_t, struct passwd**);'
	./protochk "$extern_C $try" $hdrs && getpwent_r_proto=I_SBWR ;;
	esac
	case "$getpwent_r_proto" in
	''|0) try='int getpwent_r(struct passwd*, char*, int, struct passwd**);'
	./protochk "$extern_C $try" $hdrs && getpwent_r_proto=I_SBIR ;;
	esac
	case "$getpwent_r_proto" in
	''|0) try='struct passwd* getpwent_r(struct passwd*, char*, size_t);'
	./protochk "$extern_C $try" $hdrs && getpwent_r_proto=S_SBW ;;
	esac
	case "$getpwent_r_proto" in
	''|0) try='struct passwd* getpwent_r(struct passwd*, char*, int);'
	./protochk "$extern_C $try" $hdrs && getpwent_r_proto=S_SBI ;;
	esac
	case "$getpwent_r_proto" in
	''|0) try='int getpwent_r(struct passwd*, char*, int);'
	./protochk "$extern_C $try" $hdrs && getpwent_r_proto=I_SBI ;;
	esac
	case "$getpwent_r_proto" in
	''|0) try='int getpwent_r(struct passwd*, char*, int, FILE**);'
	./protochk "$extern_C $try" $hdrs && getpwent_r_proto=I_SBIH ;;
	esac
	case "$getpwent_r_proto" in
	''|0)	d_getpwent_r=undef
 	        getpwent_r_proto=0
		echo "Disabling getpwent_r, cannot determine prototype." >&4 ;;
	* )	case "$getpwent_r_proto" in
		REENTRANT_PROTO*) ;;
		*) getpwent_r_proto="REENTRANT_PROTO_$getpwent_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "getpwent_r has no prototype, not using it." >&4 ;;
		esac
		d_getpwent_r=undef
		getpwent_r_proto=0
		;;
	esac
	;;
*)	getpwent_r_proto=0
	;;
esac

: see if getpwnam_r exists
set getpwnam_r d_getpwnam_r
eval $inlibc
case "$d_getpwnam_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_pwd pwd.h"
	case "$d_getpwnam_r_proto:$usethreads" in
	":define")	d_getpwnam_r_proto=define
		set d_getpwnam_r_proto getpwnam_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_getpwnam_r_proto" in
	define)
	case "$getpwnam_r_proto" in
	''|0) try='int getpwnam_r(const char*, struct passwd*, char*, size_t, struct passwd**);'
	./protochk "$extern_C $try" $hdrs && getpwnam_r_proto=I_CSBWR ;;
	esac
	case "$getpwnam_r_proto" in
	''|0) try='int getpwnam_r(const char*, struct passwd*, char*, int, struct passwd**);'
	./protochk "$extern_C $try" $hdrs && getpwnam_r_proto=I_CSBIR ;;
	esac
	case "$getpwnam_r_proto" in
	''|0) try='struct passwd* getpwnam_r(const char*, struct passwd*, char*, int);'
	./protochk "$extern_C $try" $hdrs && getpwnam_r_proto=S_CSBI ;;
	esac
	case "$getpwnam_r_proto" in
	''|0) try='int getpwnam_r(const char*, struct passwd*, char*, int);'
	./protochk "$extern_C $try" $hdrs && getpwnam_r_proto=I_CSBI ;;
	esac
	case "$getpwnam_r_proto" in
	''|0)	d_getpwnam_r=undef
 	        getpwnam_r_proto=0
		echo "Disabling getpwnam_r, cannot determine prototype." >&4 ;;
	* )	case "$getpwnam_r_proto" in
		REENTRANT_PROTO*) ;;
		*) getpwnam_r_proto="REENTRANT_PROTO_$getpwnam_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "getpwnam_r has no prototype, not using it." >&4 ;;
		esac
		d_getpwnam_r=undef
		getpwnam_r_proto=0
		;;
	esac
	;;
*)	getpwnam_r_proto=0
	;;
esac

: see if getpwuid_r exists
set getpwuid_r d_getpwuid_r
eval $inlibc
case "$d_getpwuid_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_pwd pwd.h"
	case "$d_getpwuid_r_proto:$usethreads" in
	":define")	d_getpwuid_r_proto=define
		set d_getpwuid_r_proto getpwuid_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_getpwuid_r_proto" in
	define)
	case "$getpwuid_r_proto" in
	''|0) try='int getpwuid_r(uid_t, struct passwd*, char*, size_t, struct passwd**);'
	./protochk "$extern_C $try" $hdrs && getpwuid_r_proto=I_TSBWR ;;
	esac
	case "$getpwuid_r_proto" in
	''|0) try='int getpwuid_r(uid_t, struct passwd*, char*, int, struct passwd**);'
	./protochk "$extern_C $try" $hdrs && getpwuid_r_proto=I_TSBIR ;;
	esac
	case "$getpwuid_r_proto" in
	''|0) try='int getpwuid_r(uid_t, struct passwd*, char*, int);'
	./protochk "$extern_C $try" $hdrs && getpwuid_r_proto=I_TSBI ;;
	esac
	case "$getpwuid_r_proto" in
	''|0) try='struct passwd* getpwuid_r(uid_t, struct passwd*, char*, int);'
	./protochk "$extern_C $try" $hdrs && getpwuid_r_proto=S_TSBI ;;
	esac
	case "$getpwuid_r_proto" in
	''|0)	d_getpwuid_r=undef
 	        getpwuid_r_proto=0
		echo "Disabling getpwuid_r, cannot determine prototype." >&4 ;;
	* )	case "$getpwuid_r_proto" in
		REENTRANT_PROTO*) ;;
		*) getpwuid_r_proto="REENTRANT_PROTO_$getpwuid_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "getpwuid_r has no prototype, not using it." >&4 ;;
		esac
		d_getpwuid_r=undef
		getpwuid_r_proto=0
		;;
	esac
	;;
*)	getpwuid_r_proto=0
	;;
esac

: Optional checks for getsbyname and getsbyport

: see if getservbyname exists
set getservbyname d_getsbyname
eval $inlibc

: see if getservbyport exists
set getservbyport d_getsbyport
eval $inlibc

: see if getservent exists
set getservent d_getsent
eval $inlibc

: see if getservbyname_r exists
set getservbyname_r d_getservbyname_r
eval $inlibc
case "$d_getservbyname_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_netdb netdb.h"
	case "$d_getservbyname_r_proto:$usethreads" in
	":define")	d_getservbyname_r_proto=define
		set d_getservbyname_r_proto getservbyname_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_getservbyname_r_proto" in
	define)
	case "$getservbyname_r_proto" in
	''|0) try='int getservbyname_r(const char*, const char*, struct servent*, char*, size_t, struct servent**);'
	./protochk "$extern_C $try" $hdrs && getservbyname_r_proto=I_CCSBWR ;;
	esac
	case "$getservbyname_r_proto" in
	''|0) try='struct servent* getservbyname_r(const char*, const char*, struct servent*, char*, int);'
	./protochk "$extern_C $try" $hdrs && getservbyname_r_proto=S_CCSBI ;;
	esac
	case "$getservbyname_r_proto" in
	''|0) try='int getservbyname_r(const char*, const char*, struct servent*, struct servent_data*);'
	./protochk "$extern_C $try" $hdrs && getservbyname_r_proto=I_CCSD ;;
	esac
	case "$getservbyname_r_proto" in
	''|0)	d_getservbyname_r=undef
 	        getservbyname_r_proto=0
		echo "Disabling getservbyname_r, cannot determine prototype." >&4 ;;
	* )	case "$getservbyname_r_proto" in
		REENTRANT_PROTO*) ;;
		*) getservbyname_r_proto="REENTRANT_PROTO_$getservbyname_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "getservbyname_r has no prototype, not using it." >&4 ;;
		esac
		d_getservbyname_r=undef
		getservbyname_r_proto=0
		;;
	esac
	;;
*)	getservbyname_r_proto=0
	;;
esac

: see if getservbyport_r exists
set getservbyport_r d_getservbyport_r
eval $inlibc
case "$d_getservbyport_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_netdb netdb.h"
	case "$d_getservbyport_r_proto:$usethreads" in
	":define")	d_getservbyport_r_proto=define
		set d_getservbyport_r_proto getservbyport_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_getservbyport_r_proto" in
	define)
	case "$getservbyport_r_proto" in
	''|0) try='int getservbyport_r(int, const char*, struct servent*, char*, size_t, struct servent**);'
	./protochk "$extern_C $try" $hdrs && getservbyport_r_proto=I_ICSBWR ;;
	esac
	case "$getservbyport_r_proto" in
	''|0) try='struct servent* getservbyport_r(int, const char*, struct servent*, char*, int);'
	./protochk "$extern_C $try" $hdrs && getservbyport_r_proto=S_ICSBI ;;
	esac
	case "$getservbyport_r_proto" in
	''|0) try='int getservbyport_r(int, const char*, struct servent*, struct servent_data*);'
	./protochk "$extern_C $try" $hdrs && getservbyport_r_proto=I_ICSD ;;
	esac
	case "$getservbyport_r_proto" in
	''|0)	d_getservbyport_r=undef
 	        getservbyport_r_proto=0
		echo "Disabling getservbyport_r, cannot determine prototype." >&4 ;;
	* )	case "$getservbyport_r_proto" in
		REENTRANT_PROTO*) ;;
		*) getservbyport_r_proto="REENTRANT_PROTO_$getservbyport_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "getservbyport_r has no prototype, not using it." >&4 ;;
		esac
		d_getservbyport_r=undef
		getservbyport_r_proto=0
		;;
	esac
	;;
*)	getservbyport_r_proto=0
	;;
esac

: see if getservent_r exists
set getservent_r d_getservent_r
eval $inlibc
case "$d_getservent_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_netdb netdb.h"
	case "$d_getservent_r_proto:$usethreads" in
	":define")	d_getservent_r_proto=define
		set d_getservent_r_proto getservent_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_getservent_r_proto" in
	define)
	case "$getservent_r_proto" in
	''|0) try='int getservent_r(struct servent*, char*, size_t, struct servent**);'
	./protochk "$extern_C $try" $hdrs && getservent_r_proto=I_SBWR ;;
	esac
	case "$getservent_r_proto" in
	''|0) try='int getservent_r(struct servent*, char*, int);'
	./protochk "$extern_C $try" $hdrs && getservent_r_proto=I_SBI ;;
	esac
	case "$getservent_r_proto" in
	''|0) try='struct servent* getservent_r(struct servent*, char*, int);'
	./protochk "$extern_C $try" $hdrs && getservent_r_proto=S_SBI ;;
	esac
	case "$getservent_r_proto" in
	''|0) try='int getservent_r(struct servent*, struct servent_data*);'
	./protochk "$extern_C $try" $hdrs && getservent_r_proto=I_SD ;;
	esac
	case "$getservent_r_proto" in
	''|0)	d_getservent_r=undef
 	        getservent_r_proto=0
		echo "Disabling getservent_r, cannot determine prototype." >&4 ;;
	* )	case "$getservent_r_proto" in
		REENTRANT_PROTO*) ;;
		*) getservent_r_proto="REENTRANT_PROTO_$getservent_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "getservent_r has no prototype, not using it." >&4 ;;
		esac
		d_getservent_r=undef
		getservent_r_proto=0
		;;
	esac
	;;
*)	getservent_r_proto=0
	;;
esac

: see if prototypes for various getservxxx netdb.h functions are available
echo " "
set d_getservprotos getservent $i_netdb netdb.h
eval $hasproto

: see if getspnam exists
set getspnam d_getspnam
eval $inlibc

: see if this is a shadow.h system
set shadow.h i_shadow
eval $inhdr

: see if getspnam_r exists
set getspnam_r d_getspnam_r
eval $inlibc
case "$d_getspnam_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_shadow shadow.h"
	case "$d_getspnam_r_proto:$usethreads" in
	":define")	d_getspnam_r_proto=define
		set d_getspnam_r_proto getspnam_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_getspnam_r_proto" in
	define)
	case "$getspnam_r_proto" in
	''|0) try='int getspnam_r(const char*, struct spwd*, char*, size_t, struct spwd**);'
	./protochk "$extern_C $try" $hdrs && getspnam_r_proto=I_CSBWR ;;
	esac
	case "$getspnam_r_proto" in
	''|0) try='struct spwd* getspnam_r(const char*, struct spwd*, char*, int);'
	./protochk "$extern_C $try" $hdrs && getspnam_r_proto=S_CSBI ;;
	esac
	case "$getspnam_r_proto" in
	''|0)	d_getspnam_r=undef
 	        getspnam_r_proto=0
		echo "Disabling getspnam_r, cannot determine prototype." >&4 ;;
	* )	case "$getspnam_r_proto" in
		REENTRANT_PROTO*) ;;
		*) getspnam_r_proto="REENTRANT_PROTO_$getspnam_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "getspnam_r has no prototype, not using it." >&4 ;;
		esac
		d_getspnam_r=undef
		getspnam_r_proto=0
		;;
	esac
	;;
*)	getspnam_r_proto=0
	;;
esac

: see if gettimeofday or ftime exists
set gettimeofday d_gettimeod
eval $inlibc
case "$d_gettimeod" in
"$undef")
	set ftime d_ftime 
	eval $inlibc
	;;
*)
	val="$undef"; set d_ftime; eval $setvar
	;;
esac
case "$d_gettimeod$d_ftime" in
"$undef$undef")
	echo " "
	echo 'No ftime() nor gettimeofday() -- timing may be less accurate.' >&4
	;;
esac

: see if gmtime_r exists
set gmtime_r d_gmtime_r
eval $inlibc
case "$d_gmtime_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_time time.h $i_systime sys/time.h"
	case "$d_gmtime_r_proto:$usethreads" in
	":define")	d_gmtime_r_proto=define
		set d_gmtime_r_proto gmtime_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_gmtime_r_proto" in
	define)
	case "$gmtime_r_proto" in
	''|0) try='struct tm* gmtime_r(const time_t*, struct tm*);'
	./protochk "$extern_C $try" $hdrs && gmtime_r_proto=S_TS ;;
	esac
	case "$gmtime_r_proto" in
	''|0) try='int gmtime_r(const time_t*, struct tm*);'
	./protochk "$extern_C $try" $hdrs && gmtime_r_proto=I_TS ;;
	esac
	case "$gmtime_r_proto" in
	''|0)	d_gmtime_r=undef
 	        gmtime_r_proto=0
		echo "Disabling gmtime_r, cannot determine prototype." >&4 ;;
	* )	case "$gmtime_r_proto" in
		REENTRANT_PROTO*) ;;
		*) gmtime_r_proto="REENTRANT_PROTO_$gmtime_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "gmtime_r has no prototype, not using it." >&4 ;;
		esac
		d_gmtime_r=undef
		gmtime_r_proto=0
		;;
	esac
	;;
*)	gmtime_r_proto=0
	;;
esac

: see if hasmntopt exists
set hasmntopt d_hasmntopt
eval $inlibc

: see if this is a netinet/in.h or sys/in.h system
set netinet/in.h i_niin sys/in.h i_sysin
eval $inhdr

: see if arpa/inet.h has to be included
set arpa/inet.h i_arpainet
eval $inhdr

: see if htonl --and friends-- exists
val=''
set htonl val
eval $inlibc

: Maybe they are macros.
case "$val" in
$undef)
	$cat >htonl.c <<EOM
#include <stdio.h>
#include <sys/types.h>
#$i_niin I_NETINET_IN
#$i_sysin I_SYS_IN
#$i_arpainet I_ARPA_INET
#ifdef I_NETINET_IN
#include <netinet/in.h>
#endif
#ifdef I_SYS_IN
#include <sys/in.h>
#endif
#ifdef I_ARPA_INET
#include <arpa/inet.h>
#endif
#ifdef htonl
printf("Defined as a macro.");
#endif
EOM
	$cppstdin $cppflags $cppminus < htonl.c >htonl.E 2>/dev/null
	if $contains 'Defined as a macro' htonl.E >/dev/null 2>&1; then
		val="$define"
		echo "But it seems to be defined as a macro." >&4
	fi
	$rm -f htonl.?
	;;
esac
set d_htonl
eval $setvar

: see if hypot exists
set hypot d_hypot
eval $inlibc

: see if ilogb exists
set ilogb d_ilogb
eval $inlibc

: see if ilogbl exists
set ilogbl d_ilogbl
eval $inlibc

: index or strchr
echo " "
if set index val -f; eval $csym; $val; then
	if set strchr val -f d_strchr; eval $csym; $val; then
		if $contains strchr "$strings" >/dev/null 2>&1 ; then
			val="$define"
			vali="$undef"
			echo "strchr() found." >&4
		else
			val="$undef"
			vali="$define"
			echo "index() found." >&4
		fi
	else
		val="$undef"
		vali="$define"
		echo "index() found." >&4
	fi
else
	if set strchr val -f d_strchr; eval $csym; $val; then
		val="$define"
		vali="$undef"
		echo "strchr() found." >&4
	else
		echo "No index() or strchr() found!" >&4
		val="$undef"
		vali="$undef"
	fi
fi
set d_strchr; eval $setvar
val="$vali"
set d_index; eval $setvar

: check whether inet_aton exists
set inet_aton d_inetaton
eval $inlibc

: see if inet_ntop exists
set inet_ntop d_inetntop
eval $inlibc

: see if inet_pton exists
set inet_pton d_inetpton
eval $inlibc

: Look for isascii
echo " "
$cat >isascii.c <<EOCP
#include <stdio.h>
#include <ctype.h>
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
int main() {
	int c = 'A';
	if (isascii(c))
		exit(0);
	else
		exit(1);
}
EOCP
set isascii
if eval $compile; then
	echo "isascii() found." >&4
	val="$define"
else
	echo "isascii() NOT found." >&4
	val="$undef"
fi
set d_isascii
eval $setvar
$rm -f isascii*

: Look for isblank
echo " "
$cat >isblank.c <<'EOCP'
#include <stdio.h>
#include <ctype.h>
int main() {
	int c = ' ';
	if (isblank(c))
		return 0 ;
	else
		return 1 ;
}
EOCP
if $cc $ccflags $ldflags -o isblank isblank.c $libs >/dev/null 2>&1 ; then
	echo "isblank() found." >&4
	val="$define"
else
	echo "isblank() NOT found." >&4
	val="$undef"
fi
set d_isblank
eval $setvar
$rm -f isblank*

: check for isfinite
echo "Checking to see if you have isfinite..." >&4
$cat >try.c <<EOCP
#$i_math I_MATH
#ifdef I_MATH
#include <math.h>
#endif
int main() { return isfinite(0.0); }
EOCP
set try
if eval $compile; then
	val="$define"
	echo "You have isfinite."
else
	val="$undef"
	echo "You do not have isfinite."
fi
$rm_try
set d_isfinite
eval $setvar

: see if isfinitel exists
set isfinitel d_isfinitel
eval $inlibc

: check for isinf
echo "Checking to see if you have isinf..." >&4
$cat >try.c <<EOCP
#$i_math I_MATH
#ifdef I_MATH
#include <math.h>
#endif
int main() { return isinf(0.0); }
EOCP
set try
if eval $compile; then
	val="$define"
	echo "You have isinf."
else
	val="$undef"
	echo "You do not have isinf."
fi
$rm_try
set d_isinf
eval $setvar

: see if isinfl exists
set isinfl d_isinfl
eval $inlibc

: check for isless
echo "Checking to see if you have isless..." >&4
$cat >try.c <<EOCP
#$i_math I_MATH
#ifdef I_MATH
#include <math.h>
#endif
int main() { return isless(0.0); }
EOCP
set try
if eval $compile; then
	val="$define"
	echo "You have isless."
else
	val="$undef"
	echo "You do not have isless."
fi
$rm_try
set d_isless
eval $setvar

: check for isnan
echo "Checking to see if you have isnan..." >&4
$cat >try.c <<EOCP
#$i_math I_MATH
#ifdef I_MATH
#include <math.h>
#endif
int main() { return isnan(0.0); }
EOCP
set try
if eval $compile; then
	val="$define"
	echo "You have isnan."
else
	val="$undef"
	echo "You do not have isnan."
fi
$rm_try
set d_isnan
eval $setvar

: see if isnanl exists
set isnanl d_isnanl
eval $inlibc

: check for isnormal
echo "Checking to see if you have isnormal..." >&4
$cat >try.c <<EOCP
#$i_math I_MATH
#ifdef I_MATH
#include <math.h>
#endif
int main() { return isnormal(0.0); }
EOCP
set try
if eval $compile; then
	val="$define"
	echo "You have isnormal."
else
	val="$undef"
	echo "You do not have isnormal."
fi
$rm_try
set d_isnormal
eval $setvar

: see if j0 exists
set j0 d_j0
eval $inlibc

: see if j0l exists
set j0l d_j0l
eval $inlibc

: see if killpg exists
set killpg d_killpg
eval $inlibc

: see if localeconv exists
set localeconv d_locconv
eval $inlibc

: see if libc has the POSIX.1-2008 currency locale rules
case "$d_locconv:$d_lc_monetary_2008" in
$define:)
	$cat >try.c <<EOCP
#include <locale.h>
int main() {
	struct lconv *lc = localeconv();
	char int_p_cs_precedes = lc->int_p_cs_precedes;
	return 0;
}
EOCP
	set try
	if eval $compile; then
		d_lc_monetary_2008="$define"
	else
		d_lc_monetary_2008="$undef"
	fi;
	$rm_try
	;;
esac

: see if lchown exists
echo " "
$cat > try.c <<'EOCP'
/* System header to define __stub macros and hopefully few prototypes,
    which can conflict with char lchown(); below.  */
#include <assert.h>
/* Override any gcc2 internal prototype to avoid an error.  */
/* We use char because int might match the return type of a gcc2
   builtin and then its argument prototype would still apply.  */
char lchown();
int main() {
    /*  The GNU C library defines this for functions which it implements
        to always fail with ENOSYS.  Some functions are actually named
	something starting with __ and the normal name is an alias.  */
#if defined (__stub_lchown) || defined (__stub___lchown)
choke me
#else
lchown();
#endif
; return 0; }
EOCP
set try
if eval $compile; then
    $echo "lchown() found." >&4
    val="$define"
else
    $echo "lchown() NOT found." >&4
    val="$undef"
fi
set d_lchown
eval $setvar

: See if number of significant digits in a double precision number is known
echo " "
$cat >ldbl_dig.c <<EOM
#$i_limits I_LIMITS
#$i_float I_FLOAT
#ifdef I_LIMITS
#include <limits.h>
#endif
#ifdef I_FLOAT
#include <float.h>
#endif
#ifdef LDBL_DIG
printf("Contains LDBL_DIG");
#endif
EOM
$cppstdin $cppflags $cppminus < ldbl_dig.c >ldbl_dig.E 2>/dev/null
if $contains 'LDBL_DIG' ldbl_dig.E >/dev/null 2>&1; then
	echo "LDBL_DIG found." >&4
	val="$define"
else
	echo "LDBL_DIG NOT found." >&4
	val="$undef"
fi
$rm -f ldbl_dig.?
set d_ldbl_dig
eval $setvar

: see if lgamma exists
set lgamma d_lgamma
eval $inlibc

: see if lgamma_r exists
set lgamma_r d_lgamma_r
eval $inlibc

: check to see if math.h defines _LIB_VERSION
d_libm_lib_version="$undef"
case $i_math in
    $define)
	echo " "
	echo "Checking to see if your libm supports _LIB_VERSION..." >&4
	$cat >try.c <<EOCP
#include <unistd.h>
#include <math.h>
int main (int argc, char *argv[])
{
    printf ("%d\n", _LIB_VERSION);
    return (0);
    } /* main */
EOCP
	set try
	if eval $compile; then
	    foo=`$run ./try`
	    echo "Yes, it does ($foo)" >&4
	    d_libm_lib_version="$define"
	else
	    echo "No, it does not (probably harmless)" >&4
	    fi
	$rm_try
	;;

    esac

: see if link exists
set link d_link
eval $inlibc

: see if llrint exists
set llrint d_llrint
eval $inlibc

: see if llrintl exists
set llrintl d_llrintl
eval $inlibc

: see if llround exists
set llround d_llround
eval $inlibc

: see if llroundl exists
set llroundl d_llroundl
eval $inlibc

: see if localtime_r exists
set localtime_r d_localtime_r
eval $inlibc
case "$d_localtime_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_time time.h $i_systime sys/time.h"
	case "$d_localtime_r_proto:$usethreads" in
	":define")	d_localtime_r_proto=define
		set d_localtime_r_proto localtime_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_localtime_r_proto" in
	define)
	case "$localtime_r_proto" in
	''|0) try='struct tm* localtime_r(const time_t*, struct tm*);'
	./protochk "$extern_C $try" $hdrs && localtime_r_proto=S_TS ;;
	esac
	case "$localtime_r_proto" in
	''|0) try='int localtime_r(const time_t*, struct tm*);'
	./protochk "$extern_C $try" $hdrs && localtime_r_proto=I_TS ;;
	esac
	case "$localtime_r_proto" in
	''|0)	d_localtime_r=undef
 	        localtime_r_proto=0
		echo "Disabling localtime_r, cannot determine prototype." >&4 ;;
	* )	case "$localtime_r_proto" in
		REENTRANT_PROTO*) ;;
		*) localtime_r_proto="REENTRANT_PROTO_$localtime_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "localtime_r has no prototype, not using it." >&4 ;;
		esac
		d_localtime_r=undef
		localtime_r_proto=0
		;;
	esac
	;;
*)	localtime_r_proto=0
	;;
esac

: see if localtime_r calls tzset
case "$localtime_r_proto" in
REENTRANT_PROTO*)
	$cat >try.c <<EOCP
/*  Does our libc's localtime_r call tzset ?
 *  return 0 if so, 1 otherwise.
 */
#$i_systypes	I_SYS_TYPES
#$i_unistd	I_UNISTD
#$i_time	I_TIME
#$i_stdlib	I_STDLIB
#$i_string	I_STRING
#$i_malloc	I_MALLOC
#ifdef I_SYS_TYPES
#  include <sys/types.h>
#endif
#ifdef I_UNISTD
#  include <unistd.h>
#endif
#ifdef I_TIME
#  include <time.h>
#endif
#ifdef I_STDLIB
#include <stdlib.h>
#endif
#ifdef I_STRING
#  include <string.h>
#else
#  include <strings.h>
#endif
#ifdef I_MALLOC
#  include <malloc.h>
#endif
int main()
{
    time_t t = time(0L);
    char w_tz[]="TZ" "=GMT+5",
	 e_tz[]="TZ" "=GMT-5",
	*tz_e = (char*)malloc(16),
	*tz_w = (char*)malloc(16);
    struct tm tm_e, tm_w;
    memset(&tm_e,'\0',sizeof(struct tm));
    memset(&tm_w,'\0',sizeof(struct tm));
    strcpy(tz_e,e_tz);
    strcpy(tz_w,w_tz);

    putenv(tz_e);
    localtime_r(&t, &tm_e);

    putenv(tz_w);
    localtime_r(&t, &tm_w);

    if( memcmp(&tm_e, &tm_w, sizeof(struct tm)) == 0 )
	return 1;
    return 0;
}
EOCP
	set try
	if eval $compile; then
	    if $run ./try; then
		d_localtime_r_needs_tzset=undef;
	    else
		d_localtime_r_needs_tzset=define;
	    fi;
	else
	    d_localtime_r_needs_tzset=undef;
	fi;
     ;;
  *)
     d_localtime_r_needs_tzset=undef;
     ;;
esac
$rm_try

: see if lockf exists
set lockf d_lockf
eval $inlibc

: see if log1p exists
set log1p d_log1p
eval $inlibc

: see if log2 exists
set log2 d_log2
eval $inlibc

: see if logb exists
set logb d_logb
eval $inlibc

: see if lrint exists
set lrint d_lrint
eval $inlibc

: see if lrintl exists
set lrintl d_lrintl
eval $inlibc

: see if lround exists
set lround d_lround
eval $inlibc

: see if lroundl exists
set lroundl d_lroundl
eval $inlibc

: see if prototype for lseek is available
echo " "
set d_lseekproto lseek $i_systypes sys/types.h $i_unistd unistd.h
eval $hasproto

: see if lstat exists
set lstat d_lstat
eval $inlibc

: see if madvise exists
set madvise d_madvise
eval $inlibc

: see if malloc_size exists
set malloc_size d_malloc_size
eval $inlibc

: see if malloc_size_good exists
set malloc_good_size d_malloc_good_size
eval $inlibc

: see if mblen exists
set mblen d_mblen
eval $inlibc

: see if mbstowcs exists
set mbstowcs d_mbstowcs
eval $inlibc

: see if mbtowc exists
set mbtowc d_mbtowc
eval $inlibc

: see if memchr exists
set memchr d_memchr
eval $inlibc

: see if memcmp exists
set memcmp d_memcmp
eval $inlibc

: see if memcpy exists
set memcpy d_memcpy
eval $inlibc

: see if memmem exists
set memmem d_memmem
eval $inlibc

: see if memmove exists
set memmove d_memmove
eval $inlibc

: see if memset exists
set memset d_memset
eval $inlibc

: see if mkdir exists
set mkdir d_mkdir
eval $inlibc

: see if mkdtemp exists
set mkdtemp d_mkdtemp
eval $inlibc

: see if mkfifo exists
set mkfifo d_mkfifo
eval $inlibc

: see if mkstemp exists
set mkstemp d_mkstemp
eval $inlibc

: see if mkstemps exists
set mkstemps d_mkstemps
eval $inlibc

: see if mktime exists
set mktime d_mktime
eval $inlibc

: see if this is a sys/mman.h system
set sys/mman.h i_sysmman
eval $inhdr

: see if mmap exists
set mmap d_mmap
eval $inlibc
: see what shmat returns
: default to something harmless
mmaptype='void *'
case "$i_sysmman$d_mmap" in
"$define$define")
	$cat >mmap.c <<'END'
#include <sys/mman.h>
void *mmap();
END
	if $cc $ccflags -c mmap.c >/dev/null 2>&1; then
		mmaptype='void *'
	else
		mmaptype='caddr_t'
	fi
	echo "and it returns ($mmaptype)." >&4
	;;
esac



: see if sqrtl exists
set sqrtl d_sqrtl
eval $inlibc

: see if scalbnl exists
set scalbnl d_scalbnl
eval $inlibc

: see if truncl exists
set truncl d_truncl
eval $inlibc

: see if modfl exists
set modfl d_modfl
eval $inlibc

: see if prototype for modfl is available
echo " "
set d_modflproto modfl $i_math math.h
eval $hasproto

if $test "$uselongdouble" = "$define"; then
    message=""
    if $test "$d_sqrtl" != "$define"; then
	message="$message sqrtl"
    fi
    if $test "$d_modfl" != "$define"; then
	if $test "$d_truncl:$d_copysignl" = "$define:$define"; then
	    echo "You have both truncl and copysignl, so I can emulate modfl."
	else
	    if $test "$d_aintl:$d_copysignl" = "$define:$define"; then
		echo "You have both aintl and copysignl, so I can emulate modfl."
	    else
		message="$message modfl"
	    fi
	fi
    fi
    if $test "$d_frexpl" != "$define"; then
	if $test "$d_ilogbl:$d_scalbnl" = "$define:$define"; then
	    echo "You have both ilogbl and scalbnl, so I can emulate frexpl."
	else
	    message="$message frexpl"
	fi
    fi
    if $test "$d_ldexpl" != "$define"; then
	message="$message ldexpl"
    fi

    if $test "$message" != ""; then
	$cat <<EOM >&4

*** You requested the use of long doubles but you do not seem to have
*** the following mathematical functions needed for long double support:
***    $message
*** Please rerun Configure without -Duselongdouble and/or -Dusemorebits.
*** Cannot continue, aborting.

EOM

	exit 1
    fi
fi

: see if mprotect exists
set mprotect d_mprotect
eval $inlibc

: see if msgctl exists
set msgctl d_msgctl
eval $inlibc

: see if msgget exists
set msgget d_msgget
eval $inlibc

: see if msgsnd exists
set msgsnd d_msgsnd
eval $inlibc

: see if msgrcv exists
set msgrcv d_msgrcv
eval $inlibc

: see how much of the 'msg*(2)' library is present.
h_msg=true
echo " "
case "$d_msgctl$d_msgget$d_msgsnd$d_msgrcv" in
*"$undef"*) h_msg=false;;
esac
case "$osname" in
freebsd)
    case "`ipcs 2>&1`" in
    "SVID messages"*"not configured"*)
	echo "Your $osname does not have the msg*(2) configured." >&4
        h_msg=false
	val="$undef"
	set msgctl d_msgctl
	eval $setvar
	set msgget d_msgget
	eval $setvar
	set msgsnd d_msgsnd
	eval $setvar
	set msgrcv d_msgrcv
	eval $setvar
	;;
    esac
    ;;
esac
: we could also check for sys/ipc.h ...
if $h_msg && $test `./findhdr sys/msg.h`; then
	echo "You have the full msg*(2) library." >&4
	val="$define"
else
	echo "You don't have the full msg*(2) library." >&4
	val="$undef"
fi
set d_msg
eval $setvar

: Check for msghdr_s
echo " "
echo "Checking to see if your system supports struct msghdr..." >&4
set d_msghdr_s msghdr $i_systypes sys/types.h $d_socket sys/socket.h $i_sysuio sys/uio.h
eval $hasstruct
case "$d_msghdr_s" in
"$define")      echo "Yes, it does."   ;;
*)              echo "No, it doesn't." ;;
esac


: see if msync exists
set msync d_msync
eval $inlibc

: see if munmap exists
set munmap d_munmap
eval $inlibc

: see if nan exists
set nan d_nan
eval $inlibc

: see if nearbyint exists
set nearbyint d_nearbyint
eval $inlibc

: see if nextafter exists
set nextafter d_nextafter
eval $inlibc

: see if nexttoward exists
set nexttoward d_nexttoward
eval $inlibc

: see if nice exists
set nice d_nice
eval $inlibc

: see if this is a langinfo.h system
set langinfo.h i_langinfo
eval $inhdr

: see if nl_langinfo exists
set nl_langinfo d_nl_langinfo
eval $inlibc

: see if this is a quadmath.h system
set quadmath.h i_quadmath
eval $inhdr

: check for volatile keyword
echo " "
echo 'Checking to see if your C compiler knows about "volatile"...' >&4
$cat >try.c <<'EOCP'
int main()
{
	typedef struct _goo_struct goo_struct;
	goo_struct * volatile goo = ((goo_struct *)0);
	struct _goo_struct {
		long long_int;
		int reg_int;
		char char_var;
	};
	typedef unsigned short foo_t;
	char *volatile foo;
	volatile int bar;
	volatile foo_t blech;
	foo = foo;
}
EOCP
if $cc -c $ccflags try.c >/dev/null 2>&1 ; then
	val="$define"
	echo "Yup, it does."
else
	val="$undef"
	echo "Nope, it doesn't."
fi
set d_volatile
eval $setvar
$rm_try

: Check basic sizes
echo " "
$echo "Choosing the C types to be used for Perl's internal types..." >&4

case "$use64bitint:$d_quad:$quadtype" in
define:define:?*)
	ivtype="$quadtype"
	uvtype="$uquadtype"
	ivsize=8
	uvsize=8
	;;
*)	ivtype="long"
	uvtype="unsigned long"
	ivsize=$longsize
	uvsize=$longsize
	;;
esac

case "$uselongdouble:$d_longdbl" in
define:define)
	nvtype="long double"
	nvsize=$longdblsize
	;;
*)	nvtype=double
	nvsize=$doublesize
	;;
esac

case "$usequadmath:$i_quadmath" in
define:define)
  nvtype="__float128"
  nvsize=16
  case "$libs" in
  *quadmath*) ;;
  *) $cat <<EOM >&4

*** You requested the use of the quadmath library, but you
*** do not seem to have the quadmath library installed.
*** Cannot continue, aborting.
EOM
    exit 1
    ;;
  esac
  ;;
define:*) $cat <<EOM >&4

*** You requested the use of the quadmath library, but you
*** do not seem to have the required header, <quadmath.h>.
EOM
  case "$gccversion" in
  [23].*|4.[0-5]*)
   $cat <<EOM >&4
*** Your gcc looks a bit old:
*** $gccversion
EOM
    ;;
  '')
   $cat <<EOM >&4
*** You are not running a gcc.
EOM
    ;;
  esac
  $cat <<EOM >&4
*** For the quadmath library you need at least gcc 4.6.
*** Cannot continue, aborting.
EOM
  exit 1
  ;;
esac

$echo "(IV will be "$ivtype", $ivsize bytes)"
$echo "(UV will be "$uvtype", $uvsize bytes)"
$echo "(NV will be "$nvtype", $nvsize bytes)"

$cat >try.c <<EOCP
#$i_inttypes I_INTTYPES
#ifdef I_INTTYPES
#include <inttypes.h>
#endif
#include <stdio.h>
int main() {
#ifdef INT8
   int8_t i =  INT8_MAX;
  uint8_t u = UINT8_MAX;
  printf("int8_t\n");
#endif
#ifdef INT16
   int16_t i =  INT16_MAX;
  uint16_t u = UINT16_MAX;
  printf("int16_t\n");
#endif
#ifdef INT32
   int32_t i =  INT32_MAX;
  uint32_t u = UINT32_MAX;
  printf("int32_t\n");
#endif
}
EOCP

i8type="signed char"
u8type="unsigned char"
i8size=1
u8size=1

case "$i16type" in
'')	case "$shortsize" in
	2)	i16type=short
		u16type="unsigned short"
		i16size=$shortsize
		u16size=$shortsize
		;;
	esac
	;;
esac
case "$i16type" in
'')	set try -DINT16
	if eval $compile; then
		case "`$run ./try`" in
		int16_t)
			i16type=int16_t
			u16type=uint16_t
			i16size=2
			u16size=2
			;;
		esac
	fi
	;;
esac
case "$i16type" in
'')	if $test $shortsize -ge 2; then
		i16type=short
		u16type="unsigned short"
		i16size=$shortsize
		u16size=$shortsize
	fi
	;;
esac

case "$i32type" in
'')	case "$longsize" in
	4)	i32type=long
		u32type="unsigned long"
		i32size=$longsize
		u32size=$longsize
		;;
	*)	case "$intsize" in
		4)	i32type=int
			u32type="unsigned int"
			i32size=$intsize
			u32size=$intsize
			;;
		esac
		;;
	esac
	;;
esac
case "$i32type" in
'')	set try -DINT32
	if eval $compile; then
		case "`$run ./try`" in
		int32_t)
			i32type=int32_t
			u32type=uint32_t
			i32size=4
			u32size=4
			;;
		esac
	fi
	;;
esac
case "$i32type" in
'')	if $test $intsize -ge 4; then
		i32type=int
		u32type="unsigned int"
		i32size=$intsize
		u32size=$intsize
	fi
	;;
esac

case "$i64type" in
'')	case "$d_quad:$quadtype" in
	define:?*)
		i64type="$quadtype"
		u64type="$uquadtype"
		i64size=8
		u64size=8
		;;
	esac
	;;
esac

$echo "Checking how many bits of your UVs your NVs can preserve..." >&4
: volatile so that the compiler has to store it out to memory.
if test X"$d_volatile" = X"$define"; then
	volatile=volatile
fi
$cat <<EOP >try.c
#include <stdio.h>
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
#include <sys/types.h>
#include <signal.h>
#ifdef SIGFPE
$volatile int bletched = 0;
$signal_t blech(int s) { bletched = 1; }
#endif
int main() {
    $uvtype u = 0;
    $nvtype d;
    int     n = 8 * $uvsize;
    int     i;
#ifdef SIGFPE
    signal(SIGFPE, blech);
#endif

    for (i = 0; i < n; i++) {
      u = u << 1 | ($uvtype)1;
      d = ($nvtype)u;
      if (($uvtype)d != u)
        break;
      if (d <= 0)
	break;
      d = ($nvtype)(u - 1);
      if (($uvtype)d != (u - 1))
        break;
#ifdef SIGFPE
      if (bletched)
	break;
#endif
    }
    printf("%d\n", ((i == n) ? -n : i));
    exit(0);
}
EOP
set try

d_nv_preserves_uv="$undef"
if eval $compile; then
	nv_preserves_uv_bits="`$run ./try`"
fi
case "$nv_preserves_uv_bits" in
\-[1-9]*)
	nv_preserves_uv_bits=`expr 0 - $nv_preserves_uv_bits`
	$echo "Your NVs can preserve all $nv_preserves_uv_bits bits of your UVs."  2>&1
	d_nv_preserves_uv="$define"
	;;
[1-9]*)	$echo "Your NVs can preserve only $nv_preserves_uv_bits bits of your UVs."  2>&1
	d_nv_preserves_uv="$undef" ;;
*)	$echo "Can't figure out how many bits your NVs preserve." 2>&1
	nv_preserves_uv_bits="0" ;;
esac
$rm_try

$echo "Checking to find the largest integer value your NVs can hold..." >&4
: volatile so that the compiler has to store it out to memory.
if test X"$d_volatile" = X"$define"; then
	volatile=volatile
fi
$cat <<EOP >try.c
#include <stdio.h>

typedef $nvtype NV;

int
main() {
  NV value = 2;
  int count = 1;

  while(count < 256) {
    $volatile NV up = value + 1.0;
    $volatile NV negated = -value;
    $volatile NV down = negated - 1.0;
    $volatile NV got_up = up - value;
    int up_good = got_up == 1.0;
    int got_down = down - negated;
    int down_good = got_down == -1.0;

    if (down_good != up_good) {
      fprintf(stderr,
	      "Inconsistency - up %d %f; down %d %f; for 2**%d (%.20f)\n",
	      up_good, (double) got_up, down_good, (double) got_down,
	      count, (double) value);
      return 1;
    }
    if (!up_good) {
      while (1) {
	if (count > 8) {
	  count -= 8;
	  fputs("256.0", stdout);
	} else {
	  count--;
	  fputs("2.0", stdout);
	}
	if (!count) {
	  puts("");
	  return 0;
	}
	fputs("*", stdout);
      }
    }
    value *= 2;
    ++count;
  }
  fprintf(stderr, "Cannot overflow integer range, even at 2**%d (%.20f)\n",
	  count, (double) value);
  return 1;
}
EOP
set try

nv_overflows_integers_at='0'
if eval $compile; then
    xxx="`$run ./try`"
    case "$?" in
	0)
	    case "$xxx" in
		2*)  cat >&4 <<EOM
The largest integer your NVs can preserve is equal to $xxx
EOM
		    nv_overflows_integers_at="$xxx"
		    ;;
		*)  cat >&4 <<EOM
Cannot determine the largest integer value your NVs can hold, unexpected output
'$xxx'
EOM
		    ;;
	    esac
	    ;;
	*)  cat >&4 <<EOM
Cannot determine the largest integer value your NVs can hold
EOM
	    ;;
    esac
fi
$rm_try

$echo "Checking whether NV 0.0 is all bits zero in memory..." >&4
: volatile so that the compiler has to store it out to memory.
if test X"$d_volatile" = X"$define"; then
	volatile=volatile
fi
$cat <<EOP >try.c
#include <stdio.h>
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
#$i_string I_STRING
#ifdef I_STRING
#  include <string.h>
#else
#  include <strings.h>
#endif
#include <sys/types.h>
#include <signal.h>
#ifdef SIGFPE
$volatile int bletched = 0;
$signal_t blech(int s) { bletched = 1; }
#endif

int checkit($nvtype d, char *where) {
    unsigned char *p = (char *)&d;
    unsigned char *end = p + sizeof(d);
    int fail = 0;

    while (p < end)
	fail += *p++;

    if (!fail)
	return 0;

    p = (char *)&d;
    printf("No - %s: 0x", where);
    while (p < end)
	printf ("%02X", *p++);
    printf("\n");
    return 1;
}

int main(int argc, char **argv) {
    $nvtype d = 0.0;
    int fail = 0;
    fail += checkit(d, "0.0");

    /* The compiler shouldn't be assuming that bletched is 0  */
    d = bletched;

    fail += checkit(d, "bleched");

#ifdef SIGFPE
    signal(SIGFPE, blech);
#endif

    /* Paranoia - the compiler should have no way of knowing that ANSI says
       that argv[argc] will always be NULL.  Actually, if it did assume this it
       would be buggy, as this is C and main() can be called from elsewhere in
       the program.  */
    d = argv[argc] ? 1 : 0;

    if (d) {
	printf("Odd argv[argc]=%p, d=%g\n", argv[argc], d);
    }

    fail += checkit(d, "ternary");

    memset(&d, sizeof(d), argv[argc] ? 1 : 0);

    if (d != 0.0) {
	printf("No - memset doesn't give 0.0\n");
	/* This might just blow up:  */
	printf("(gives %g)\n", d);
	return 1;
    }

#ifdef SIGFPE
    if (bletched) {
	printf("No - something bleched\n");
	return 1;
    }
#endif
    if (fail) {
      printf("No - %d fail(s)\n", fail);
      return 1;
    }
    printf("Yes\n");
    return 0;
}
EOP
set try

d_nv_zero_is_allbits_zero="$undef"
if eval $compile; then
    xxx="`$run ./try`"
    case "$?" in
	0)
	    case "$xxx" in
		Yes)  cat >&4 <<EOM
0.0 is represented as all bits zero in memory
EOM
		    d_nv_zero_is_allbits_zero="$define"
		    ;;
		*)  cat >&4 <<EOM
0.0 is not represented as all bits zero in memory
EOM
		    d_nv_zero_is_allbits_zero="$undef"
		    ;;
	    esac
	    ;;
	*)  cat >&4 <<EOM
0.0 is not represented as all bits zero in memory
EOM
	    d_nv_zero_is_allbits_zero="$undef"
	    ;;
    esac
fi
$rm_try

: check for off64_t
echo " "
echo "Checking to see if you have off64_t..." >&4
$cat >try.c <<EOCP
#include <sys/types.h>
#include <unistd.h>
int main() { off64_t x = 7; }
EOCP
set try
if eval $compile; then
	val="$define"
	echo "You have off64_t."
else
	val="$undef"
	echo "You do not have off64_t."
	case "$lseeksize" in
	8) echo "(Your off_t is 64 bits, so you could use that.)" ;;
	esac
fi
$rm_try
set d_off64_t
eval $setvar

: how to create joinable pthreads
if test "X$usethreads" = "X$define" -a "X$i_pthread" = "X$define"; then
	echo " "
	echo "Checking what constant to use for creating joinable pthreads..." >&4
	$cat >try.c <<'EOCP'
#include <pthread.h>
int main() {
    int detachstate = JOINABLE;
}
EOCP
	set try -DJOINABLE=PTHREAD_CREATE_JOINABLE
	if eval $compile; then
		echo "You seem to use PTHREAD_CREATE_JOINABLE." >&4
		val="$undef" # Yes, undef.
		set d_old_pthread_create_joinable
		eval $setvar
		val=""
		set old_pthread_create_joinable
		eval $setvar
	else
		set try -DJOINABLE=PTHREAD_CREATE_UNDETACHED
		if eval $compile; then
			echo "You seem to use PTHREAD_CREATE_UNDETACHED." >&4
			val="$define"
			set d_old_pthread_create_joinable
			eval $setvar
			val=PTHREAD_CREATE_UNDETACHED
			set old_pthread_create_joinable
			eval $setvar
		else
			set try -DJOINABLE=__UNDETACHED
			if eval $compile; then
				echo "You seem to use __UNDETACHED." >&4
				val="$define"
				set d_old_pthread_create_joinable
				eval $setvar
				val=__UNDETACHED
				set old_pthread_create_joinable
				eval $setvar
			else
				echo "Egads, nothing obvious found.  Guessing that you use 0." >&4
				val="$define"
				set d_old_pthread_create_joinable
				eval $setvar
				val=0
				set old_pthread_create_joinable
				eval $setvar
			fi
		fi
	fi
	$rm_try
else
    d_old_pthread_create_joinable="$undef"
    old_pthread_create_joinable=""
fi

: see if pause exists
set pause d_pause
eval $inlibc

: see if poll exists
set poll d_poll
eval $inlibc

: see if prctl exists
set prctl d_prctl
eval $inlibc

: see if prctl supports PR_SET_NAME
d_prctl_set_name=$undef
case $d_prctl in
    $define)
	$cat >try.c <<EOM
#ifdef __ANDROID__
#include <unistd.h>
#endif
#include <sys/prctl.h>

int main (int argc, char *argv[])
{
    return (prctl (PR_SET_NAME, "Test"));
    } /* main */
EOM
	set try
	if eval $compile_ok && $run ./try; then
	    echo "Your prctl (PR_SET_NAME, ...) works"
	    d_prctl_set_name=$define
	    fi
	$rm_try
	;;
    esac

: see if readlink exists
set readlink d_readlink
eval $inlibc

: Check if there is a /proc symlink to the abs path of
: the executing program.  We will honor hints of d_procselfexe=$undef
: or procselfexe being non-empty, otherwise will try to determine both
: if we have readlink.
: AmigaOS will attempt to mount proc: aka /proc, if /proc/... is
: referenced, and AmigaOS does not have a proc filesystem anyway.
echo " "
val="$undef"
if $test "X$d_procselfexe" = Xundef; then
	procselfexe=''
elif $test "X$procselfexe" != X -a "X$procselfexe" != 'X '; then
	val="$define"
elif $test "X$d_readlink" = Xdefine; then
        : NetBSD first as /proc/self is a symlink to /proc/curproc,
        : and it feels more tidy to avoid an extra level of symlink
	set NetBSD /proc/curproc/exe Linux /proc/self/exe FreeBSD /proc/curproc/file Solaris /proc/self/path/a.out
	while test $# -gt 0; do
	    type=$1; try=$2
	    shift; shift
	    if $issymlink $try; then
		$ls -l $try > reflect
		if $contains /`basename $ls` reflect >/dev/null 2>&1; then
		    echo "You have $type-like $try."
		    procselfexe='"'$try'"'
		    val="$define"
		    : This will break out of the loop
		    set X; shift
		fi
	    fi
	done
fi
$rm -f reflect
set d_procselfexe
eval $setvar

: backward compatibility for d_hvfork
if test X$d_hvfork != X; then
	d_vfork="$d_hvfork"
	d_hvfork=''
fi
: see if there is a vfork
val=''
set vfork val
eval $inlibc

d_pseudofork=$undef

: Ok, but do we want to use it. vfork is reportedly unreliable in
: perl on Solaris 2.x, and probably elsewhere.
case "$val" in
$define)
	echo " "
	case "$usevfork" in
	false) dflt='n';;
	*) dflt='y';;
	esac
	cat <<'EOM'

Perl can only use a vfork() that doesn't suffer from strict
restrictions on calling functions or modifying global data in
the child.  For example, glibc-2.1 contains such a vfork()
that is unsuitable.  If your system provides a proper fork()
call, chances are that you do NOT want perl to use vfork().

EOM
	rp="Do you still want to use vfork()?"
	. ./myread
	case "$ans" in
	y|Y) ;;
	*)
		echo "Ok, we won't use vfork()."
		val="$undef"
		;;
	esac
	;;
esac
set d_vfork
eval $setvar
case "$d_vfork" in
$define) usevfork='true';;
*) usevfork='false';;
esac

: see whether the pthread_atfork exists
$cat >try.c <<EOP
#include <pthread.h>
#include <stdio.h>
int main() {
#ifdef  PTHREAD_ATFORK
        pthread_atfork(NULL,NULL,NULL);
#endif
}
EOP

: see if pthread_atfork exists
set try -DPTHREAD_ATFORK
if eval $compile; then
    val="$define"
else
    val="$undef"
fi
case "$usethreads" in
$define)
        case "$val" in
        $define) echo 'pthread_atfork found.' >&4        ;;
        *)       echo 'pthread_atfork NOT found.' >&4    ;;
        esac
esac
set d_pthread_atfork
eval $setvar

: see if pthread_attr_setscope exists
set pthread_attr_setscope d_pthread_attr_setscope
eval $inlibc

: see whether the various POSIXish _yields exist
$cat >try.c <<EOP
#include <pthread.h>
#include <stdio.h>
int main() {
#ifdef SCHED_YIELD
	sched_yield();
#else
#ifdef PTHREAD_YIELD
	pthread_yield();
#else
#ifdef PTHREAD_YIELD_NULL
	pthread_yield(NULL);
#endif
#endif
#endif
}
EOP
: see if sched_yield exists
set try -DSCHED_YIELD
if eval $compile; then
    val="$define"
    sched_yield='sched_yield()'
else
    val="$undef"
fi
case "$usethreads" in
$define)
	case "$val" in
	$define) echo 'sched_yield() found.' >&4	;;
	*)	 echo 'sched_yield() NOT found.' >&4	;;
	esac
esac
set d_sched_yield
eval $setvar

: see if pthread_yield exists
set try -DPTHREAD_YIELD
if eval $compile; then
    val="$define"
    case "$sched_yield" in
    '') sched_yield='pthread_yield()' ;;
    esac
else
    set try -DPTHREAD_YIELD_NULL
    if eval $compile; then
	val="$define"
	case "$sched_yield" in
	'') sched_yield='pthread_yield(NULL)' ;;
	esac
    else
	val="$undef"
    fi
fi
case "$usethreads" in
$define)
	case "$val" in
	$define) echo 'pthread_yield() found.' >&4	;;
	*)	 echo 'pthread_yield() NOT found.' >&4	;;
	esac
	;;
esac
set d_pthread_yield
eval $setvar
case "$sched_yield" in
'') sched_yield=undef ;;
esac
$rm_try

: check for ptrdiff_t
echo " "
echo "Checking to see if you have ptrdiff_t..." >&4
$cat >try.c <<EOCP
#include <stddef.h>
int main() { ptrdiff_t x = 7; }
EOCP
set try
if eval $compile; then
	val="$define"
	echo "You have ptrdiff_t."
else
	val="$undef"
	echo "You do not have ptrdiff_t."
fi
$rm_try
set d_ptrdiff_t
eval $setvar

: see if random_r exists
set random_r d_random_r
eval $inlibc
case "$d_random_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_stdlib stdlib.h"
	case "$d_random_r_proto:$usethreads" in
	":define")	d_random_r_proto=define
		set d_random_r_proto random_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_random_r_proto" in
	define)
	case "$random_r_proto" in
	''|0) try='int random_r(int*, struct random_data*);'
	./protochk "$extern_C $try" $hdrs && random_r_proto=I_iS ;;
	esac
	case "$random_r_proto" in
	''|0) try='int random_r(long*, struct random_data*);'
	./protochk "$extern_C $try" $hdrs && random_r_proto=I_lS ;;
	esac
	case "$random_r_proto" in
	''|0) try='int random_r(struct random_data*, int32_t*);'
	./protochk "$extern_C $try" $hdrs && random_r_proto=I_St ;;
	esac
	case "$random_r_proto" in
	''|0)	d_random_r=undef
 	        random_r_proto=0
		echo "Disabling random_r, cannot determine prototype." >&4 ;;
	* )	case "$random_r_proto" in
		REENTRANT_PROTO*) ;;
		*) random_r_proto="REENTRANT_PROTO_$random_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "random_r has no prototype, not using it." >&4 ;;
		esac
		d_random_r=undef
		random_r_proto=0
		;;
	esac
	;;
*)	random_r_proto=0
	;;
esac

: see if readdir and friends exist
set readdir d_readdir
eval $inlibc
set seekdir d_seekdir
eval $inlibc
set telldir d_telldir
eval $inlibc
set rewinddir d_rewinddir
eval $inlibc

: see if readdir64_r exists
set readdir64_r d_readdir64_r
eval $inlibc
case "$d_readdir64_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_dirent dirent.h"
	case "$d_readdir64_r_proto:$usethreads" in
	":define")	d_readdir64_r_proto=define
		set d_readdir64_r_proto readdir64_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_readdir64_r_proto" in
	define)
	case "$readdir64_r_proto" in
	''|0) try='int readdir64_r(DIR*, struct dirent64*, struct dirent64**);'
	./protochk "$extern_C $try" $hdrs && readdir64_r_proto=I_TSR ;;
	esac
	case "$readdir64_r_proto" in
	''|0) try='int readdir64_r(DIR*, struct dirent64*);'
	./protochk "$extern_C $try" $hdrs && readdir64_r_proto=I_TS ;;
	esac
	case "$readdir64_r_proto" in
	''|0)	d_readdir64_r=undef
 	        readdir64_r_proto=0
		echo "Disabling readdir64_r, cannot determine prototype." >&4 ;;
	* )	case "$readdir64_r_proto" in
		REENTRANT_PROTO*) ;;
		*) readdir64_r_proto="REENTRANT_PROTO_$readdir64_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "readdir64_r has no prototype, not using it." >&4 ;;
		esac
		d_readdir64_r=undef
		readdir64_r_proto=0
		;;
	esac
	;;
*)	readdir64_r_proto=0
	;;
esac

: see if readdir_r exists
set readdir_r d_readdir_r
eval $inlibc
case "$d_readdir_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_dirent dirent.h"
	case "$d_readdir_r_proto:$usethreads" in
	":define")	d_readdir_r_proto=define
		set d_readdir_r_proto readdir_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_readdir_r_proto" in
	define)
	case "$readdir_r_proto" in
	''|0) try='int readdir_r(DIR*, struct dirent*, struct dirent**);'
	./protochk "$extern_C $try" $hdrs && readdir_r_proto=I_TSR ;;
	esac
	case "$readdir_r_proto" in
	''|0) try='int readdir_r(DIR*, struct dirent*);'
	./protochk "$extern_C $try" $hdrs && readdir_r_proto=I_TS ;;
	esac
	case "$readdir_r_proto" in
	''|0)	d_readdir_r=undef
 	        readdir_r_proto=0
		echo "Disabling readdir_r, cannot determine prototype." >&4 ;;
	* )	case "$readdir_r_proto" in
		REENTRANT_PROTO*) ;;
		*) readdir_r_proto="REENTRANT_PROTO_$readdir_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "readdir_r has no prototype, not using it." >&4 ;;
		esac
		d_readdir_r=undef
		readdir_r_proto=0
		;;
	esac
	;;
*)	readdir_r_proto=0
	;;
esac

: see if readv exists
set readv d_readv
eval $inlibc

: see if recvmsg exists
set recvmsg d_recvmsg
eval $inlibc

: see if regcomp, regcmp, or re_comp exist, for regular pattern matching
echo " "
if set regcomp val -f d_regcomp; eval $csym; $val; then
	echo 'regcomp() found.' >&4
	d_regcomp="$define"
	d_regcmp="$undef"
	d_re_comp="$undef"
elif set regcmp val -f d_regcmp; eval $csym; $val; then
	echo 'regcmp() found.' >&4
	d_regcmp="$define"
	d_regcomp="$undef"
	d_re_comp="$undef"
elif set re_comp val -f d_re_comp; eval $csym; $val; then
	echo 're_comp() found, assuming re_exec() also exists.' >&4
	d_re_comp="$define"
	d_regcomp="$undef"
	d_regcmp="$undef"
else
	$cat >&4 <<EOM
No regcomp(), regcmp() nor re_comp() found !! No regular pattern matching.
EOM
	d_regcmp="$undef"
	d_re_comp="$undef"
	d_regcomp="$undef"
fi

: see if remainder exists
set remainder d_remainder
eval $inlibc

: see if remquo exists
set remquo d_remquo
eval $inlibc

: see if rename exists
set rename d_rename
eval $inlibc

: see if rint exists
set rint d_rint
eval $inlibc

: see if rmdir exists
set rmdir d_rmdir
eval $inlibc

: see if round exists
set round d_round
eval $inlibc

: see if memory.h is available.
val=''
set memory.h val
eval $inhdr

: See if it conflicts with string.h
case "$val" in
$define)
	case "$strings" in
	'') ;;
	*)
		$cppstdin $cppflags $cppminus < $strings > mem.h
		if $contains 'memcpy' mem.h >/dev/null 2>&1; then
			echo " "
			echo "We won't be including <memory.h>."
			val="$undef"
		fi
		$rm -f mem.h
		;;
	esac
esac
set i_memory
eval $setvar

: can bcopy handle overlapping blocks?
echo " "
val="$undef"
case "$d_memmove" in
"$define") echo "I'll use memmove() instead of bcopy() for overlapping copies." ;;
*)	case "$d_bcopy" in
	"$define")
		echo "Checking to see if bcopy() can do overlapping copies..." >&4
		$cat >try.c <<EOCP
#$i_memory I_MEMORY
#$i_stdlib I_STDLIB
#$i_string I_STRING
#$i_unistd I_UNISTD
EOCP
	$cat >>try.c <<'EOCP'
#include <stdio.h>
#ifdef I_MEMORY
#  include <memory.h>
#endif
#ifdef I_STDLIB
#  include <stdlib.h>
#endif
#ifdef I_STRING
#  include <string.h>
#else
#  include <strings.h>
#endif
#ifdef I_UNISTD
#  include <unistd.h>  /* Needed for NetBSD */
#endif
int main()
{
char buf[128], abc[128];
char *b;
int len;
int off;
int align;

/* Copy "abcde..." string to char abc[] so that gcc doesn't
   try to store the string in read-only memory. */
bcopy("abcdefghijklmnopqrstuvwxyz0123456789", abc, 36);

for (align = 7; align >= 0; align--) {
	for (len = 36; len; len--) {
		b = buf+align;
		bcopy(abc, b, len);
		for (off = 1; off <= len; off++) {
			bcopy(b, b+off, len);
			bcopy(b+off, b, len);
			if (bcmp(b, abc, len))
				exit(1);
		}
	}
}
exit(0);
}
EOCP
		set try
		if eval $compile_ok; then
			if $run ./try 2>/dev/null; then
				echo "Yes, it can."
				val="$define"
			else
				echo "It can't, sorry."
			fi
		else
			echo "(I can't compile the test program, so we'll assume not...)"
		fi
		;;
	esac
	$rm_try
	;;
esac
set d_safebcpy
eval $setvar

: can memcpy handle overlapping blocks?
echo " "
val="$undef"
case "$d_memmove" in
"$define") echo "I'll use memmove() instead of memcpy() for overlapping copies." ;;
*)	case "$d_memcpy" in
	"$define")
		echo "Checking to see if memcpy() can do overlapping copies..." >&4
		$cat >try.c <<EOCP
#$i_memory I_MEMORY
#$i_stdlib I_STDLIB
#$i_string I_STRING
#$i_unistd I_UNISTD
EOCP
	$cat >>try.c <<'EOCP'
#include <stdio.h>
#ifdef I_MEMORY
#  include <memory.h>
#endif
#ifdef I_STDLIB
#  include <stdlib.h>
#endif
#ifdef I_STRING
#  include <string.h>
#else
#  include <strings.h>
#endif
#ifdef I_UNISTD
#  include <unistd.h>  /* Needed for NetBSD */
#endif
int main()
{
char buf[128], abc[128];
char *b;
int len;
int off;
int align;

/* Copy "abcde..." string to char abc[] so that gcc doesn't
   try to store the string in read-only memory. */
memcpy(abc, "abcdefghijklmnopqrstuvwxyz0123456789", 36);

for (align = 7; align >= 0; align--) {
	for (len = 36; len; len--) {
		b = buf+align;
		memcpy(b, abc, len);
		for (off = 1; off <= len; off++) {
			memcpy(b+off, b, len);
			memcpy(b, b+off, len);
			if (memcmp(b, abc, len))
				exit(1);
		}
	}
}
exit(0);
}
EOCP
		set try
		if eval $compile_ok; then
			if $run ./try 2>/dev/null; then
				echo "Yes, it can."
				val="$define"
			else
				echo "It can't, sorry."
			fi
		else
			echo "(I can't compile the test program, so we'll assume not...)"
		fi
		;;
	esac
	$rm_try
	;;
esac
set d_safemcpy
eval $setvar

: can memcmp be trusted to compare relative magnitude?
val="$undef"
case "$d_memcmp" in
"$define")
	echo " "
	echo "Checking if your memcmp() can compare relative magnitude..." >&4
	$cat >try.c <<EOCP
#$i_memory I_MEMORY
#$i_stdlib I_STDLIB
#$i_string I_STRING
#$i_unistd I_UNISTD
EOCP
	$cat >>try.c <<'EOCP'
#include <stdio.h>
#ifdef I_MEMORY
#  include <memory.h>
#endif
#ifdef I_STDLIB
#  include <stdlib.h>
#endif
#ifdef I_STRING
#  include <string.h>
#else
#  include <strings.h>
#endif
#ifdef I_UNISTD
#  include <unistd.h>  /* Needed for NetBSD */
#endif
int main()
{
char a = -1;
char b = 0;
if ((a < b) && memcmp(&a, &b, 1) < 0)
	exit(1);
exit(0);
}
EOCP
	set try
	if eval $compile_ok; then
		if $run ./try 2>/dev/null; then
			echo "Yes, it can."
			val="$define"
		else
			echo "No, it can't (it uses signed chars)."
		fi
	else
		echo "(I can't compile the test program, so we'll assume not...)"
	fi
	;;
esac
$rm_try
set d_sanemcmp
eval $setvar

: see if prototype for sbrk is available
echo " "
set d_sbrkproto sbrk $i_unistd unistd.h
eval $hasproto

: see if scalbn exists
set scalbn d_scalbn
eval $inlibc

: see if select exists
set select d_select
eval $inlibc

: see if semctl exists
set semctl d_semctl
eval $inlibc

: see if semget exists
set semget d_semget
eval $inlibc

: see if semop exists
set semop d_semop
eval $inlibc

: see how much of the 'sem*(2)' library is present.
h_sem=true
echo " "
case "$d_semctl$d_semget$d_semop" in
*"$undef"*) h_sem=false;;
esac
case "$osname" in
freebsd)
    case "`ipcs 2>&1`" in
    "SVID messages"*"not configured"*)
	echo "Your $osname does not have the sem*(2) configured." >&4
        h_sem=false
	val="$undef"
	set semctl d_semctl
	eval $setvar
	set semget d_semget
	eval $setvar
	set semop d_semop
	eval $setvar
	;;
    esac
    ;;
esac
: we could also check for sys/ipc.h ...
if $h_sem && $test `./findhdr sys/sem.h`; then
	echo "You have the full sem*(2) library." >&4
	val="$define"
else
	echo "You don't have the full sem*(2) library." >&4
	val="$undef"
fi
set d_sem
eval $setvar

: see whether sys/sem.h defines union semun
echo " "
$cat > try.c <<'END'
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/sem.h>
int main () { union semun semun; semun.buf = 0; }
END
set try
if eval $compile; then
    echo "You have union semun in <sys/sem.h>." >&4
    val="$define"
else
    echo "You do not have union semun in <sys/sem.h>." >&4
    val="$undef"
fi
$rm_try
set d_union_semun
eval $setvar

: see how to do semctl IPC_STAT
case "$d_sem" in
$define)
    echo " "
    $cat > tryh.h <<END
#ifndef S_IRUSR
#   ifdef S_IREAD
#	define S_IRUSR S_IREAD
#	define S_IWUSR S_IWRITE
#	define S_IXUSR S_IEXEC
#   else
#	define S_IRUSR 0400
#	define S_IWUSR 0200
#	define S_IXUSR 0100
#   endif
#   define S_IRGRP (S_IRUSR>>3)
#   define S_IWGRP (S_IWUSR>>3)
#   define S_IXGRP (S_IXUSR>>3)
#   define S_IROTH (S_IRUSR>>6)
#   define S_IWOTH (S_IWUSR>>6)
#   define S_IXOTH (S_IXUSR>>6)
#endif
#ifndef S_IRWXU
#   define S_IRWXU (S_IRUSR|S_IWUSR|S_IXUSR)
#   define S_IRWXG (S_IRGRP|S_IWGRP|S_IXGRP)
#   define S_IRWXO (S_IROTH|S_IWOTH|S_IXOTH)
#endif
END
    : see whether semctl IPC_STAT can use union semun
    case "$d_semctl_semun" in
    '')
      val="$undef"
      $cat > try.c <<END
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/sem.h>
#include <sys/stat.h>
#include <stdio.h>
#include <errno.h>
#include "tryh.h"
#ifndef errno
extern int errno;
#endif
#$d_union_semun HAS_UNION_SEMUN
int main() {
    union semun
#ifndef HAS_UNION_SEMUN
    {
	int val;
	struct semid_ds *buf;
	unsigned short *array;
    }
#endif
    arg;
    int sem, st;

#if defined(IPC_PRIVATE) && defined(S_IRWXU) && defined(S_IRWXG) && defined(S_IRWXO) && defined(IPC_CREAT)
    sem = semget(IPC_PRIVATE, 1, S_IRWXU|S_IRWXG|S_IRWXO|IPC_CREAT);
    if (sem > -1) {
	struct semid_ds argbuf;
	arg.buf = &argbuf;
#	ifdef IPC_STAT
	st = semctl(sem, 0, IPC_STAT, arg);
	if (st == 0)
	    printf("semun\n");
	else
#	endif /* IPC_STAT */
	    printf("semctl IPC_STAT failed: errno = %d\n", errno);
#	ifdef IPC_RMID
	if (semctl(sem, 0, IPC_RMID, arg) != 0)
#	endif /* IPC_RMID */
	    printf("semctl IPC_RMID failed: errno = %d\n", errno);
    } else
#endif /* IPC_PRIVATE && ... */
	printf("semget failed: errno = %d\n", errno);
  return 0;
}
END
      set try
      if eval $compile; then
	  xxx=`$run ./try`
          case "$xxx" in
          semun) val="$define" ;;
          esac
      fi
      $rm_try
      set d_semctl_semun
      eval $setvar
      ;;
    esac
    case "$d_semctl_semun" in
    $define)
        echo "You can use union semun for semctl IPC_STAT." >&4
	also='also'
        ;;
    *)  echo "You cannot use union semun for semctl IPC_STAT." >&4
	also=''
        ;;
    esac

    : see whether semctl IPC_STAT can use struct semid_ds pointer
    case "$d_semctl_semid_ds" in
    '')
      val="$undef"
      $cat > try.c <<'END'
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/sem.h>
#include <sys/stat.h>
#include "tryh.h"
#include <stdio.h>
#include <errno.h>
#ifndef errno
extern int errno;
#endif
int main() {
    struct semid_ds arg;
    int sem, st;

#if defined(IPC_PRIVATE) && defined(S_IRWXU) && defined(S_IRWXG) &&  defined(S_IRWXO) && defined(IPC_CREAT)
    sem = semget(IPC_PRIVATE, 1, S_IRWXU|S_IRWXG|S_IRWXO|IPC_CREAT);
    if (sem > -1) {
#	ifdef IPC_STAT
	st = semctl(sem, 0, IPC_STAT, &arg);
	if (st == 0)
	    printf("semid_ds\n");
	else
#	endif /* IPC_STAT */
	    printf("semctl IPC_STAT failed: errno = %d\n", errno);
#	ifdef IPC_RMID
	if (semctl(sem, 0, IPC_RMID, &arg) != 0)
#	endif /* IPC_RMID */
	    printf("semctl IPC_RMID failed: errno = %d\n", errno);
    } else
#endif /* IPC_PRIVATE && ... */
	printf("semget failed: errno = %d\n", errno);

    return 0;
}
END
      set try
      if eval $compile; then
          xxx=`$run ./try`
          case "$xxx" in
          semid_ds) val="$define" ;;
          esac
      fi
      $rm_try
      set d_semctl_semid_ds
      eval $setvar
      ;;
    esac
    case "$d_semctl_semid_ds" in
    $define)
        echo "You can $also use struct semid_ds* for semctl IPC_STAT." >&4
        ;;
    *)  echo "You cannot use struct semid_ds* for semctl IPC_STAT." >&4
        ;;
    esac
    ;;
*)  val="$undef"

    # We do not have the full sem*(2) library, so assume we can not
    # use either.

    set d_semctl_semun
    eval $setvar

    set d_semctl_semid_ds
    eval $setvar
    ;;
esac
$rm_try tryh.h

: see if sendmsg exists
set sendmsg d_sendmsg
eval $inlibc

: see if setegid exists
set setegid d_setegid
eval $inlibc

: see if seteuid exists
set seteuid d_seteuid
eval $inlibc

: see if setgrent exists
set setgrent d_setgrent
eval $inlibc

: see if setgrent_r exists
set setgrent_r d_setgrent_r
eval $inlibc
case "$d_setgrent_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_grp grp.h"
	case "$d_setgrent_r_proto:$usethreads" in
	":define")	d_setgrent_r_proto=define
		set d_setgrent_r_proto setgrent_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_setgrent_r_proto" in
	define)
	case "$setgrent_r_proto" in
	''|0) try='int setgrent_r(FILE**);'
	./protochk "$extern_C $try" $hdrs && setgrent_r_proto=I_H ;;
	esac
	case "$setgrent_r_proto" in
	''|0) try='void setgrent_r(FILE**);'
	./protochk "$extern_C $try" $hdrs && setgrent_r_proto=V_H ;;
	esac
	case "$setgrent_r_proto" in
	''|0)	d_setgrent_r=undef
 	        setgrent_r_proto=0
		echo "Disabling setgrent_r, cannot determine prototype." >&4 ;;
	* )	case "$setgrent_r_proto" in
		REENTRANT_PROTO*) ;;
		*) setgrent_r_proto="REENTRANT_PROTO_$setgrent_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "setgrent_r has no prototype, not using it." >&4 ;;
		esac
		d_setgrent_r=undef
		setgrent_r_proto=0
		;;
	esac
	;;
*)	setgrent_r_proto=0
	;;
esac

: see if sethostent exists
set sethostent d_sethent
eval $inlibc

: see if sethostent_r exists
set sethostent_r d_sethostent_r
eval $inlibc
case "$d_sethostent_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_netdb netdb.h"
	case "$d_sethostent_r_proto:$usethreads" in
	":define")	d_sethostent_r_proto=define
		set d_sethostent_r_proto sethostent_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_sethostent_r_proto" in
	define)
	case "$sethostent_r_proto" in
	''|0) try='int sethostent_r(int, struct hostent_data*);'
	./protochk "$extern_C $try" $hdrs && sethostent_r_proto=I_ID ;;
	esac
	case "$sethostent_r_proto" in
	''|0) try='void sethostent_r(int, struct hostent_data*);'
	./protochk "$extern_C $try" $hdrs && sethostent_r_proto=V_ID ;;
	esac
	case "$sethostent_r_proto" in
	''|0)	d_sethostent_r=undef
 	        sethostent_r_proto=0
		echo "Disabling sethostent_r, cannot determine prototype." >&4 ;;
	* )	case "$sethostent_r_proto" in
		REENTRANT_PROTO*) ;;
		*) sethostent_r_proto="REENTRANT_PROTO_$sethostent_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "sethostent_r has no prototype, not using it." >&4 ;;
		esac
		d_sethostent_r=undef
		sethostent_r_proto=0
		;;
	esac
	;;
*)	sethostent_r_proto=0
	;;
esac

: see if setitimer exists
set setitimer d_setitimer
eval $inlibc

: see if setlinebuf exists
set setlinebuf d_setlinebuf
eval $inlibc

: see if setlocale exists
set setlocale d_setlocale
eval $inlibc

: see if locale.h is available
set locale.h i_locale
eval $inhdr

: see if setlocale_r exists
set setlocale_r d_setlocale_r
eval $inlibc
case "$d_setlocale_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_locale locale.h"
	case "$d_setlocale_r_proto:$usethreads" in
	":define")	d_setlocale_r_proto=define
		set d_setlocale_r_proto setlocale_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_setlocale_r_proto" in
	define)
	case "$setlocale_r_proto" in
	''|0) try='int setlocale_r(int, const char*, char*, int);'
	./protochk "$extern_C $try" $hdrs && setlocale_r_proto=I_ICBI ;;
	esac
	case "$setlocale_r_proto" in
	''|0)	d_setlocale_r=undef
 	        setlocale_r_proto=0
		echo "Disabling setlocale_r, cannot determine prototype." >&4 ;;
	* )	case "$setlocale_r_proto" in
		REENTRANT_PROTO*) ;;
		*) setlocale_r_proto="REENTRANT_PROTO_$setlocale_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "setlocale_r has no prototype, not using it." >&4 ;;
		esac
		d_setlocale_r=undef
		setlocale_r_proto=0
		;;
	esac
	;;
*)	setlocale_r_proto=0
	;;
esac

: see if setnetent exists
set setnetent d_setnent
eval $inlibc

: see if setnetent_r exists
set setnetent_r d_setnetent_r
eval $inlibc
case "$d_setnetent_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_netdb netdb.h"
	case "$d_setnetent_r_proto:$usethreads" in
	":define")	d_setnetent_r_proto=define
		set d_setnetent_r_proto setnetent_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_setnetent_r_proto" in
	define)
	case "$setnetent_r_proto" in
	''|0) try='int setnetent_r(int, struct netent_data*);'
	./protochk "$extern_C $try" $hdrs && setnetent_r_proto=I_ID ;;
	esac
	case "$setnetent_r_proto" in
	''|0) try='void setnetent_r(int, struct netent_data*);'
	./protochk "$extern_C $try" $hdrs && setnetent_r_proto=V_ID ;;
	esac
	case "$setnetent_r_proto" in
	''|0)	d_setnetent_r=undef
 	        setnetent_r_proto=0
		echo "Disabling setnetent_r, cannot determine prototype." >&4 ;;
	* )	case "$setnetent_r_proto" in
		REENTRANT_PROTO*) ;;
		*) setnetent_r_proto="REENTRANT_PROTO_$setnetent_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "setnetent_r has no prototype, not using it." >&4 ;;
		esac
		d_setnetent_r=undef
		setnetent_r_proto=0
		;;
	esac
	;;
*)	setnetent_r_proto=0
	;;
esac

: see if setprotoent exists
set setprotoent d_setpent
eval $inlibc

: see if setpgid exists
set setpgid d_setpgid
eval $inlibc

: see if setpgrp2 exists
set setpgrp2 d_setpgrp2
eval $inlibc

: see if setpriority exists
set setpriority d_setprior
eval $inlibc

: see if setproctitle exists
set setproctitle d_setproctitle
eval $inlibc

: see if setprotoent_r exists
set setprotoent_r d_setprotoent_r
eval $inlibc
case "$d_setprotoent_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_netdb netdb.h"
	case "$d_setprotoent_r_proto:$usethreads" in
	":define")	d_setprotoent_r_proto=define
		set d_setprotoent_r_proto setprotoent_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_setprotoent_r_proto" in
	define)
	case "$setprotoent_r_proto" in
	''|0) try='int setprotoent_r(int, struct protoent_data*);'
	./protochk "$extern_C $try" $hdrs && setprotoent_r_proto=I_ID ;;
	esac
	case "$setprotoent_r_proto" in
	''|0) try='void setprotoent_r(int, struct protoent_data*);'
	./protochk "$extern_C $try" $hdrs && setprotoent_r_proto=V_ID ;;
	esac
	case "$setprotoent_r_proto" in
	''|0)	d_setprotoent_r=undef
 	        setprotoent_r_proto=0
		echo "Disabling setprotoent_r, cannot determine prototype." >&4 ;;
	* )	case "$setprotoent_r_proto" in
		REENTRANT_PROTO*) ;;
		*) setprotoent_r_proto="REENTRANT_PROTO_$setprotoent_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "setprotoent_r has no prototype, not using it." >&4 ;;
		esac
		d_setprotoent_r=undef
		setprotoent_r_proto=0
		;;
	esac
	;;
*)	setprotoent_r_proto=0
	;;
esac

: see if setpwent exists
set setpwent d_setpwent
eval $inlibc

: see if setpwent_r exists
set setpwent_r d_setpwent_r
eval $inlibc
case "$d_setpwent_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_pwd pwd.h"
	case "$d_setpwent_r_proto:$usethreads" in
	":define")	d_setpwent_r_proto=define
		set d_setpwent_r_proto setpwent_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_setpwent_r_proto" in
	define)
	case "$setpwent_r_proto" in
	''|0) try='int setpwent_r(FILE**);'
	./protochk "$extern_C $try" $hdrs && setpwent_r_proto=I_H ;;
	esac
	case "$setpwent_r_proto" in
	''|0) try='void setpwent_r(FILE**);'
	./protochk "$extern_C $try" $hdrs && setpwent_r_proto=V_H ;;
	esac
	case "$setpwent_r_proto" in
	''|0)	d_setpwent_r=undef
 	        setpwent_r_proto=0
		echo "Disabling setpwent_r, cannot determine prototype." >&4 ;;
	* )	case "$setpwent_r_proto" in
		REENTRANT_PROTO*) ;;
		*) setpwent_r_proto="REENTRANT_PROTO_$setpwent_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "setpwent_r has no prototype, not using it." >&4 ;;
		esac
		d_setpwent_r=undef
		setpwent_r_proto=0
		;;
	esac
	;;
*)	setpwent_r_proto=0
	;;
esac

: see if setregid exists
set setregid d_setregid
eval $inlibc
set setresgid d_setresgid
eval $inlibc

: see if setreuid exists
set setreuid d_setreuid
eval $inlibc
set setresuid d_setresuid
eval $inlibc

: see if setrgid exists
set setrgid d_setrgid
eval $inlibc

: see if setruid exists
set setruid d_setruid
eval $inlibc

: see if setservent exists
set setservent d_setsent
eval $inlibc

: see if setservent_r exists
set setservent_r d_setservent_r
eval $inlibc
case "$d_setservent_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_netdb netdb.h"
	case "$d_setservent_r_proto:$usethreads" in
	":define")	d_setservent_r_proto=define
		set d_setservent_r_proto setservent_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_setservent_r_proto" in
	define)
	case "$setservent_r_proto" in
	''|0) try='int setservent_r(int, struct servent_data*);'
	./protochk "$extern_C $try" $hdrs && setservent_r_proto=I_ID ;;
	esac
	case "$setservent_r_proto" in
	''|0) try='void setservent_r(int, struct servent_data*);'
	./protochk "$extern_C $try" $hdrs && setservent_r_proto=V_ID ;;
	esac
	case "$setservent_r_proto" in
	''|0)	d_setservent_r=undef
 	        setservent_r_proto=0
		echo "Disabling setservent_r, cannot determine prototype." >&4 ;;
	* )	case "$setservent_r_proto" in
		REENTRANT_PROTO*) ;;
		*) setservent_r_proto="REENTRANT_PROTO_$setservent_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "setservent_r has no prototype, not using it." >&4 ;;
		esac
		d_setservent_r=undef
		setservent_r_proto=0
		;;
	esac
	;;
*)	setservent_r_proto=0
	;;
esac

: see if setsid exists
set setsid d_setsid
eval $inlibc

: see if setvbuf exists
set setvbuf d_setvbuf
eval $inlibc

: see if shmctl exists
set shmctl d_shmctl
eval $inlibc

: see if shmget exists
set shmget d_shmget
eval $inlibc

: see if shmat exists
set shmat d_shmat
eval $inlibc
: see what shmat returns
case "$d_shmat" in
"$define")
	$cat >shmat.c <<'END'
#include <sys/shm.h>
void *shmat();
END
	if $cc $ccflags -c shmat.c >/dev/null 2>&1; then
		shmattype='void *'
	else
		shmattype='char *'
	fi
	echo "and it returns ($shmattype)." >&4
	: see if a prototype for shmat is available
	xxx=`./findhdr sys/shm.h`
	$cppstdin $cppflags $cppminus < $xxx > shmat.c 2>/dev/null
	if $contains 'shmat.*(' shmat.c >/dev/null 2>&1; then
		val="$define"
	else
		val="$undef"
	fi
	$rm -f shmat.[co]
	;;
*)
	val="$undef"
	;;
esac
set d_shmatprototype
eval $setvar

: see if shmdt exists
set shmdt d_shmdt
eval $inlibc

: see how much of the 'shm*(2)' library is present.
h_shm=true
echo " "
case "$d_shmctl$d_shmget$d_shmat$d_shmdt" in
*"$undef"*) h_shm=false;;
esac
case "$osname" in
freebsd)
    case "`ipcs 2>&1`" in
    "SVID shared memory"*"not configured"*)
	echo "Your $osname does not have the shm*(2) configured." >&4
        h_shm=false
	val="$undef"
	set shmctl d_shmctl
	eval $setvar
	set shmget d_shmget
	eval $setvar
	set shmat d_shmat
	eval $setvar
	set shmdt d_shmdt
	eval $setvar
	;;
    esac
    ;;
esac
: we could also check for sys/ipc.h ...
if $h_shm && $test `./findhdr sys/shm.h`; then
	echo "You have the full shm*(2) library." >&4
	val="$define"
else
	echo "You don't have the full shm*(2) library." >&4
	val="$undef"
fi
set d_shm
eval $setvar

: see if we have sigaction
echo " "
if set sigaction val -f d_sigaction; eval $csym; $val; then
	echo 'sigaction() found.' >&4
	$cat > try.c <<EOP
#include <stdio.h>
#include <sys/types.h>
#include <signal.h>
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
int main()
{
    struct sigaction act, oact;
    act.sa_flags = 0;
    oact.sa_handler = 0;
    /* so that act and oact are used */
    exit(act.sa_flags == 0 &&  oact.sa_handler == 0);
}
EOP
	set try
	if eval $compile_ok; then
		val="$define"
	else
		echo "But you don't seem to have a usable struct sigaction." >&4
		val="$undef"
	fi
else
	echo 'sigaction NOT found.' >&4
	val="$undef"
fi
set d_sigaction; eval $setvar
$rm_try

: see what type pids are declared as in the kernel
rp="What is the type of process ids on this system?"
set pid_t pidtype int stdio.h sys/types.h
eval $typedef_ask

: see what type uids are declared as in the kernel
echo " "
echo "Looking for the type for user ids returned by getuid()."
set uid_t uidtype xxx stdio.h sys/types.h
eval $typedef
case "$uidtype" in
xxx)
	xxx=`./findhdr sys/user.h`
	set `grep '_ruid;' "$xxx" 2>/dev/null` unsigned short
	case $1 in
	unsigned) dflt="$1 $2" ;;
	*) dflt="$1" ;;
	esac
	;;
*) dflt="$uidtype";;
esac
case "$uidtype" in
uid_t)	echo "uid_t found." ;;
*)	rp="What is the type for user ids returned by getuid()?"
	. ./myread
	uidtype="$ans"
	;;
esac

: Define hasfield_t macro for Configure internal use
hasfield_t='varname=$1; struct=$2; type=$3; field=$4; shift; shift; shift; shift;
while $test $# -ge 2; do
    case "$1" in
	$define) echo "#include <$2>";;
    esac ;
    shift 2;
done > try.c;
echo "int main () { $struct foo; $type bar = foo.$field; }" >> try.c;
set try;
if eval $compile; then
	val="$define";
else
	val="$undef";
fi;
set $varname;
eval $setvar;
$rm_try'

: see what siginfo fields we have
case "$d_sigaction" in
"$define")
	echo "Checking if your siginfo_t has si_errno field...">&4
	set d_siginfo_si_errno siginfo_t int si_errno $d_sigaction signal.h
	eval $hasfield_t;

	echo "Checking if your siginfo_t has si_pid field...">&4
	set d_siginfo_si_pid siginfo_t $pidtype si_pid $d_sigaction signal.h
	eval $hasfield_t;

	echo "Checking if your siginfo_t has si_uid field...">&4
	set d_siginfo_si_uid siginfo_t $uidtype si_uid $d_sigaction signal.h
	eval $hasfield_t;

	echo "Checking if your siginfo_t has si_addr field...">&4
	set d_siginfo_si_addr siginfo_t "void *" si_addr $d_sigaction signal.h
	eval $hasfield_t;

	echo "Checking if your siginfo_t has si_status field...">&4
	set d_siginfo_si_status siginfo_t int si_status $d_sigaction signal.h
	eval $hasfield_t;

	echo "Checking if your siginfo_t has si_band field...">&4
	set d_siginfo_si_band siginfo_t long si_band $d_sigaction signal.h
	eval $hasfield_t;

	echo "Checking if your siginfo_t has si_value field...">&4
	set d_siginfo_si_value siginfo_t "union sigval" si_value $d_sigaction signal.h
	eval $hasfield_t;

	echo "Checking if your siginfo_t has si_fd field...">&4
	set d_siginfo_si_fd siginfo_t int si_fd $d_sigaction signal.h
	eval $hasfield_t;

	;;
*)
	d_siginfo_si_errno="$undef"
	d_siginfo_si_pid="$undef"
	d_siginfo_si_uid="$undef"
	d_siginfo_si_addr="$undef"
	d_siginfo_si_status="$undef"
	d_siginfo_si_band="$undef"
	d_siginfo_si_value="$undef"
	d_siginfo_si_fd="$undef"
	;;
esac

: see if this is a sunmath.h system
set sunmath.h i_sunmath
eval $inhdr

: see if signbit exists
$echo $n "Checking to see if you have signbit() available to work on $nvtype... $c" >&4
$cat >try.c <<EOCP
#$i_math I_MATH
#$i_sunmath I_SUNMATH
#ifdef I_MATH
#  include <math.h>
#endif
#ifdef I_SUNMATH  /* Solaris special math library */
#  include <sunmath.h>
#endif
#define NV $nvtype
int main(int argc, char **argv)
{
    NV x = 0.0;
    NV y = -0.0;
    if ((signbit(x) == 0) && (signbit(y) != 0))
	return 0;
    else
	return 1;
}
EOCP
val="$undef"
set try
if eval $compile; then
    if $run ./try; then
        $echo "Yes." >&4
	val="$define"
    else
        $echo "Signbit seems to be available, but doesn't work as I expected."
        $echo "I won't use it." >&4
	val="$undef"
    fi
else
    $echo "Nope." >&4
    dflt="$undef"
fi
set d_signbit
eval $setvar
$rm_try

: see if sigprocmask exists
set sigprocmask d_sigprocmask
eval $inlibc

: see if sigsetjmp exists
echo " "
case "$d_sigsetjmp" in
'')
	$cat >try.c <<EOP
#include <setjmp.h>
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
sigjmp_buf env;
int set = 1;
int main()
{
	if (sigsetjmp(env,1))
		exit(set);
	set = 0;
	siglongjmp(env, 1);
	exit(1);
}
EOP
	set try
	if eval $compile; then
		if $run ./try >/dev/null 2>&1; then
			echo "POSIX sigsetjmp found." >&4
			val="$define"
		else
			$cat >&4 <<EOM
Uh-Oh! You have POSIX sigsetjmp and siglongjmp, but they do not work properly!!
I'll ignore them.
EOM
			val="$undef"
		fi
	else
		echo "sigsetjmp not found." >&4
		val="$undef"
	fi
	;;
*) val="$d_sigsetjmp"
	case "$d_sigsetjmp" in
	$define) echo "POSIX sigsetjmp found." >&4;;
	$undef) echo "sigsetjmp not found." >&4;;
	esac
	;;
esac
set d_sigsetjmp
eval $setvar
$rm_try

: see if snprintf exists
set snprintf d_snprintf
eval $inlibc

: see if vsnprintf exists
set vsnprintf d_vsnprintf
eval $inlibc

case "$d_snprintf-$d_vsnprintf" in
"$define-$define")
    $cat <<EOM
Checking whether your snprintf() and vsnprintf() work okay...
EOM
    $cat >try.c <<'EOCP'
/* v?snprintf testing logic courtesy of Russ Allbery.
 * According to C99:
 * - if the buffer is too short it still must be \0-terminated
 * - if the buffer is too short the potentially required length
 *   must be returned and not -1
 * - if the buffer is NULL the potentially required length
 *   must be returned and not -1 or core dump
 */
#include <stdio.h>
#include <stdarg.h>

char buf[2];

int test (char *format, ...)
{
    va_list args;
    int count;

    va_start (args, format);
    count = vsnprintf (buf, sizeof buf, format, args);
    va_end (args);
    return count;
}

int main ()
{
    return ((test ("%s", "abcd") == 4 && buf[0] == 'a' && buf[1] == '\0'
             && snprintf (NULL, 0, "%s", "abcd") == 4) ? 0 : 1);
}
EOCP
    set try
    if eval $compile; then
	`$run ./try`
	case "$?" in
	0) echo "Your snprintf() and vsnprintf() seem to be working okay." ;;
	*) cat <<EOM >&4
Your snprintf() and snprintf() don't seem to be working okay.
EOM
	   d_snprintf="$undef"
	   d_vsnprintf="$undef"
	   ;;
	esac
    else
	echo "(I can't seem to compile the test program--assuming they don't)"
	d_snprintf="$undef"
	d_vsnprintf="$undef"
    fi
    $rm_try
    ;;
esac

: see if sockatmark exists
set sockatmark d_sockatmark
eval $inlibc

: see if prototype for sockatmark is available
echo " "
set d_sockatmarkproto sockatmark $d_socket sys/socket.h
eval $hasproto

: see if socks5_init exists
set socks5_init d_socks5_init
eval $inlibc

: see if sprintf returns the length of the string in the buffer as per ANSI
$echo "Checking whether sprintf returns the length of the string..." >&4
$cat <<EOP >try.c
#include <stdio.h>
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
#$i_string I_STRING
#ifdef I_STRING
#  include <string.h>
#else
#  include <strings.h>
#endif
#$i_math I_MATH
#ifdef I_MATH
#include <math.h>
#endif

char buffer[256];

int check (size_t expect, int test) {
  size_t got = strlen(buffer);
  if (expect == got)
    return 0;

  printf("expected %ld, got %ld in test %d '%s'\n", (long) expect, (long) got,
       test, buffer);
  exit (test);
}

int main(int argc, char **argv) {
  int test = 0;

  check(sprintf(buffer, ""), ++test);
  check(sprintf(buffer, "%s %s", "perl", "rules"), ++test);
  check(sprintf(buffer, "I like %g", atan2(0,-1)), ++test);

  return 0;
}
EOP
set try

if eval $compile; then
    xxx="`$run ./try`"
    case "$?" in
	0) cat >&4 <<EOM
sprintf returns the length of the string (as ANSI says it should)
EOM
	d_sprintf_returns_strlen="$define"
	;;
	*) cat >&4 <<EOM
sprintf does not return the length of the string (how old is this system?)
EOM
	d_sprintf_returns_strlen="$undef"
        ;;
    esac
else
    echo "(I can't seem to compile the test program--assuming it doesn't)" >&4
    d_sprintf_returns_strlen="$undef"
fi
$rm_try

: see if srand48_r exists
set srand48_r d_srand48_r
eval $inlibc
case "$d_srand48_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_stdlib stdlib.h"
	case "$d_srand48_r_proto:$usethreads" in
	":define")	d_srand48_r_proto=define
		set d_srand48_r_proto srand48_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_srand48_r_proto" in
	define)
	case "$srand48_r_proto" in
	''|0) try='int srand48_r(long, struct drand48_data*);'
	./protochk "$extern_C $try" $hdrs && srand48_r_proto=I_LS ;;
	esac
	case "$srand48_r_proto" in
	''|0)	d_srand48_r=undef
 	        srand48_r_proto=0
		echo "Disabling srand48_r, cannot determine prototype." >&4 ;;
	* )	case "$srand48_r_proto" in
		REENTRANT_PROTO*) ;;
		*) srand48_r_proto="REENTRANT_PROTO_$srand48_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "srand48_r has no prototype, not using it." >&4 ;;
		esac
		d_srand48_r=undef
		srand48_r_proto=0
		;;
	esac
	;;
*)	srand48_r_proto=0
	;;
esac

: see if srandom_r exists
set srandom_r d_srandom_r
eval $inlibc
case "$d_srandom_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_stdlib stdlib.h"
	case "$d_srandom_r_proto:$usethreads" in
	":define")	d_srandom_r_proto=define
		set d_srandom_r_proto srandom_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_srandom_r_proto" in
	define)
	case "$srandom_r_proto" in
	''|0) try='int srandom_r(unsigned int, struct random_data*);'
	./protochk "$extern_C $try" $hdrs && srandom_r_proto=I_TS ;;
	esac
	case "$srandom_r_proto" in
	''|0)	d_srandom_r=undef
 	        srandom_r_proto=0
		echo "Disabling srandom_r, cannot determine prototype." >&4 ;;
	* )	case "$srandom_r_proto" in
		REENTRANT_PROTO*) ;;
		*) srandom_r_proto="REENTRANT_PROTO_$srandom_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "srandom_r has no prototype, not using it." >&4 ;;
		esac
		d_srandom_r=undef
		srandom_r_proto=0
		;;
	esac
	;;
*)	srandom_r_proto=0
	;;
esac

: see if prototype for setresgid is available
echo " "
set d_sresgproto setresgid $i_unistd unistd.h
eval $hasproto

: see if prototype for setresuid is available
echo " "
set d_sresuproto setresuid $i_unistd unistd.h
eval $hasproto

: see if stat exists
set stat d_stat
eval $inlibc

: see if sys/stat.h is available
set sys/stat.h i_sysstat
eval $inhdr

: see if stat knows about block sizes
echo " "
echo "Checking to see if your struct stat has st_blocks field..." >&4
set d_statblks stat st_blocks $i_sysstat sys/stat.h
eval $hasfield

: see if this is a sys/vfs.h system
set sys/vfs.h i_sysvfs
eval $inhdr

: see if this is a sys/statfs.h system
set sys/statfs.h i_sysstatfs
eval $inhdr

: Check for statfs_s
echo " "
echo "Checking to see if your system supports struct statfs..." >&4
set d_statfs_s statfs $i_systypes sys/types.h $i_sysparam sys/param.h $i_sysmount sys/mount.h $i_sysvfs sys/vfs.h $i_sysstatfs sys/statfs.h
eval $hasstruct
case "$d_statfs_s" in
"$define")      echo "Yes, it does."   ;;
*)              echo "No, it doesn't." ;;
esac


: see if struct statfs knows about f_flags
case "$d_statfs_s" in
define)
	echo " "
	echo "Checking to see if your struct statfs has f_flags field..." >&4
	set d_statfs_f_flags statfs f_flags $i_systypes sys/types.h $i_sysparam sys/param.h $i_sysmount sys/mount.h $i_sysvfs sys/vfs.h $i_sysstatfs sys/statfs.h
	eval $hasfield
	;;
*)	val="$undef"
	set d_statfs_f_flags
	eval $setvar
	;;
esac
case "$d_statfs_f_flags" in
"$define")      echo "Yes, it does."   ;;
*)              echo "No, it doesn't." ;;
esac

: see what flavor, if any, of static inline is supported
echo " "
echo "Checking to see if your system supports static inline..."
$cat > try.c <<'EOCP'
#include <stdlib.h>
extern int f_via_a(int x);
extern int f_via_b(int x);
int main(int argc, char **argv)
{
    int y;

    y = f_via_a(0);
#ifdef USE_B
    y = f_via_b(0);
#endif
    if (y == 42) {
        return EXIT_SUCCESS;
    }
    else {
        return EXIT_FAILURE;
    }
}
EOCP
$cat > a.c <<'EOCP'
static INLINE int f(int x) {
    int y;
    y = x + 42;
    return y;
}

int f_via_a(int x)
{
    return f(x);
}
EOCP
$cat > b.c <<'EOCP'
extern int f(int x);

int f_via_b(int x)
{
    return f(x);
}
EOCP

# Respect a hint (or previous) value for perl_static_inline, if there is one.
case "$perl_static_inline" in
'')	# Check the various possibilities, and break out on success.
	# For gcc, prefer __inline__, which will still permit
	# cflags.SH to add in -ansi.
	case "$gccversion" in
		'') xxx="inline __inline__ __inline _inline";;
		*)  xxx="__inline__ inline __inline _inline";;
	esac
	for inline in $xxx; do
		set try -DINLINE=$inline a.c
		if eval $compile && $run ./try; then
			# Now make sure there is no external linkage of static
			# functions
			set try -DINLINE=$inline -DUSE_B a.c b.c
			if eval $compile && $run ./try; then
				$echo "Your compiler supports static $inline, " >&4
				$echo "but it also creates an external definition," >&4
				$echo "so I won't use it." >&4
				val=$undef
			else
				$echo "Your compiler supports static $inline." >&4
				val=$define
				perl_static_inline="static $inline";
				break;
			fi
		else
			$echo "Your compiler does NOT support static $inline." >&4
			val="$undef"
		fi
	done
	;;
*inline*) # Some variant of inline exists.
	echo "Keeping your $hint value of $perl_static_inline."
	val=$define
	;;
static)  # No inline capabilities
	echo "Keeping your $hint value of $perl_static_inline."
	val=$undef
	;;
*)  # Unrecognized previous value -- blindly trust the supplied
	# value and hope it makes sense.  Use old value for
	# d_static_inline, if there is one.
	echo "Keeping your $hint value of $perl_static_inline."
	case "$d_static_inline" in
		'') val=$define ;;
		*)  val=$d_static_inline ;;
	esac
	;;
esac
# Fallback to plain 'static' if nothing worked.
case "$perl_static_inline" in
'')
	perl_static_inline="static"
	val=$undef
	;;
esac
set d_static_inline
eval $setvar
$rm -f a.[co] b.[co]
$rm_try

: Check stream access
$cat >&4 <<EOM
Checking how to access stdio streams by file descriptor number...
EOM
case "$stdio_stream_array" in
'') 	$cat >try.c <<EOCP
#include <stdio.h>
int main() {
  if (&STDIO_STREAM_ARRAY[fileno(stdin)] == stdin)
    printf("yes\n");
}
EOCP
	for s in _iob __iob __sF
	do
	        set try -DSTDIO_STREAM_ARRAY=$s
		if eval $compile; then
		    	case "`$run ./try`" in
			yes)	stdio_stream_array=$s; break ;;
			esac
		fi
	done
	$rm_try
esac
case "$stdio_stream_array" in
'')	$cat >&4 <<EOM
I can't figure out how to access stdio streams by file descriptor number.
EOM
	d_stdio_stream_array="$undef"
	;;
*)	$cat >&4 <<EOM
You can access stdio streams by file descriptor number by the $stdio_stream_array array.
EOM
	d_stdio_stream_array="$define"
	;;
esac

: see if strcoll exists
set strcoll d_strcoll
eval $inlibc

: check for structure copying
echo " "
echo "Checking to see if your C compiler can copy structs..." >&4
$cat >try.c <<'EOCP'
int main()
{
	struct blurfl {
		int dyick;
	} foo, bar;

	foo = bar;
}
EOCP
if $cc -c try.c >/dev/null 2>&1 ; then
	val="$define"
	echo "Yup, it can."
else
	val="$undef"
	echo "Nope, it can't."
fi
set d_strctcpy
eval $setvar
$rm_try

: see if strerror and/or sys_errlist[] exist
echo " "
if test "X$d_strerror" = X -o "X$d_syserrlst" = X; then
    if set strerror val -f d_strerror; eval $csym; $val; then
		echo 'strerror() found.' >&4
		d_strerror="$define"
		d_strerrm='strerror(e)'
		if set sys_errlist val -a d_syserrlst; eval $csym; $val; then
			echo "(You also have sys_errlist[], so we could roll our own strerror.)"
			d_syserrlst="$define"
		else
			echo "(Since you don't have sys_errlist[], strerror() is welcome.)"
			d_syserrlst="$undef"
		fi
    elif xxx=`./findhdr string.h`; test "$xxx" || xxx=`./findhdr strings.h`; \
			$contains '#[ 	]*define.*strerror' "$xxx" >/dev/null 2>&1; then
		echo 'strerror() found in string header.' >&4
		d_strerror="$define"
		d_strerrm='strerror(e)'
		if set sys_errlist val -a d_syserrlst; eval $csym; $val; then
			echo "(Most probably, strerror() uses sys_errlist[] for descriptions.)"
				d_syserrlst="$define"
		else
			echo "(You don't appear to have any sys_errlist[], how can this be?)"
			d_syserrlst="$undef"
		fi
    elif set sys_errlist val -a d_syserrlst; eval $csym; $val; then
		echo "strerror() not found, but you have sys_errlist[] so we'll use that." >&4
		d_strerror="$undef"
		d_syserrlst="$define"
		d_strerrm='((e)<0||(e)>=sys_nerr?"unknown":sys_errlist[e])'
    else
		echo 'strerror() and sys_errlist[] NOT found.' >&4
		d_strerror="$undef"
		d_syserrlst="$undef"
		d_strerrm='"unknown"'
    fi
fi

: see if strerror_r exists
set strerror_r d_strerror_r
eval $inlibc
case "$d_strerror_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_string string.h"
	case "$d_strerror_r_proto:$usethreads" in
	":define")	d_strerror_r_proto=define
		set d_strerror_r_proto strerror_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_strerror_r_proto" in
	define)
	case "$strerror_r_proto" in
	''|0) try='int strerror_r(int, char*, size_t);'
	./protochk "$extern_C $try" $hdrs && strerror_r_proto=I_IBW ;;
	esac
	case "$strerror_r_proto" in
	''|0) try='int strerror_r(int, char*, int);'
	./protochk "$extern_C $try" $hdrs && strerror_r_proto=I_IBI ;;
	esac
	case "$strerror_r_proto" in
	''|0) try='char* strerror_r(int, char*, size_t);'
	./protochk "$extern_C $try" $hdrs && strerror_r_proto=B_IBW ;;
	esac
	case "$strerror_r_proto" in
	''|0)	d_strerror_r=undef
 	        strerror_r_proto=0
		echo "Disabling strerror_r, cannot determine prototype." >&4 ;;
	* )	case "$strerror_r_proto" in
		REENTRANT_PROTO*) ;;
		*) strerror_r_proto="REENTRANT_PROTO_$strerror_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "strerror_r has no prototype, not using it." >&4 ;;
		esac
		d_strerror_r=undef
		strerror_r_proto=0
		;;
	esac
	;;
*)	strerror_r_proto=0
	;;
esac

: see if strftime exists
set strftime d_strftime
eval $inlibc

: see if strlcat exists
set strlcat d_strlcat
eval $inlibc

: see if strlcpy exists
set strlcpy d_strlcpy
eval $inlibc

: see if strtod exists
set strtod d_strtod
eval $inlibc

: see if strtol exists
set strtol d_strtol
eval $inlibc

: see if strtold exists
set strtold d_strtold
eval $inlibc

: see if strtoll exists
set strtoll d_strtoll
eval $inlibc

case "$d_longlong-$d_strtoll" in
"$define-$define")
	$cat <<EOM
Checking whether your strtoll() works okay...
EOM
	$cat >try.c <<'EOCP'
#include <errno.h>
#ifdef __hpux
#define strtoll __strtoll
#endif
#ifdef __EMX__
#define strtoll _strtoll
#endif
#include <stdio.h>
extern long long int strtoll(char *s, char **, int);
static int bad = 0;
int check(char *s, long long ell, int een) {
	long long gll;
	errno = 0;
	gll = strtoll(s, 0, 10);
	if (!((gll == ell) && (errno == een)))
		bad++;
}
int main() {
	check(" 1",                                      1LL, 0);
	check(" 0",                                      0LL, 0);
	check("-1",                                     -1LL, 0);
	check("-9223372036854775808", -9223372036854775808LL, 0);
	check("-9223372036854775808", -9223372036854775808LL, 0);
	check(" 9223372036854775807",  9223372036854775807LL, 0);
	check("-9223372036854775808", -9223372036854775808LL, 0);
	check(" 9223372036854775808",  9223372036854775807LL, ERANGE);
	check("-9223372036854775809", -9223372036854775808LL, ERANGE);
	if (!bad)
		printf("ok\n");
}
EOCP
	set try
	if eval $compile; then
		yyy=`$run ./try`
		case "$yyy" in
		ok) echo "Your strtoll() seems to be working okay." ;;
		*) cat <<EOM >&4
Your strtoll() doesn't seem to be working okay.
EOM
		   d_strtoll="$undef"
		   ;;
		esac
	else
		echo "(I can't seem to compile the test program--assuming it doesn't)"
		d_strtoll="$undef"
	fi
	;;
esac

: see if strtoq exists
set strtoq d_strtoq
eval $inlibc

: see if strtoul exists
set strtoul d_strtoul
eval $inlibc

case "$d_strtoul" in
"$define")
	$cat <<EOM
Checking whether your strtoul() works okay...
EOM
	$cat >try.c <<'EOCP'
#include <errno.h>
#include <stdio.h>
extern unsigned long int strtoul(char *s, char **, int);
static int bad = 0;
void check(char *s, unsigned long eul, int een) {
	unsigned long gul;
	errno = 0;
	gul = strtoul(s, 0, 10);
	if (!((gul == eul) && (errno == een)))
		bad++;
}
int main() {
	check(" 1", 1L, 0);
	check(" 0", 0L, 0);
EOCP
	case "$longsize" in
	8)
	    $cat >>try.c <<'EOCP'
	check("18446744073709551615", 18446744073709551615UL, 0);
	check("18446744073709551616", 18446744073709551615UL, ERANGE);
#if 0 /* strtoul() for /^-/ strings is undefined. */
	check("-1", 18446744073709551615UL, 0);
	check("-18446744073709551614", 2, 0);
	check("-18446744073709551615", 1, 0);
       	check("-18446744073709551616", 18446744073709551615UL, ERANGE);
	check("-18446744073709551617", 18446744073709551615UL, ERANGE);
#endif
EOCP
		;;
	4)
		    $cat >>try.c <<'EOCP'
	check("4294967295", 4294967295UL, 0);
	check("4294967296", 4294967295UL, ERANGE);
#if 0 /* strtoul() for /^-/ strings is undefined. */
	check("-1", 4294967295UL, 0);
	check("-4294967294", 2, 0);
	check("-4294967295", 1, 0);
       	check("-4294967296", 4294967295UL, ERANGE);
	check("-4294967297", 4294967295UL, ERANGE);
#endif
EOCP
		;;
	*)
: Should we write these tests to be more portable by sprintf-ing
: ~0 and then manipulating that char string as input for strtol?
		;;
	esac
	$cat >>try.c <<'EOCP'
	if (!bad)
		printf("ok\n");
	return 0;
}
EOCP
	set try
	if eval $compile; then
		case "`$run ./try`" in
		ok) echo "Your strtoul() seems to be working okay." ;;
		*) cat <<EOM >&4
Your strtoul() doesn't seem to be working okay.
EOM
		   d_strtoul="$undef"
		   ;;
		esac
	else
		echo "(I can't seem to compile the test program--assuming it doesn't)"
		d_strtoul="$undef"
	fi
	;;
esac

: see if strtoull exists
set strtoull d_strtoull
eval $inlibc

case "$d_longlong-$d_strtoull" in
"$define-$define")
	$cat <<EOM
Checking whether your strtoull() works okay...
EOM
	$cat >try.c <<'EOCP'
#include <errno.h>
#ifdef __hpux
#define strtoull __strtoull
#endif
#include <stdio.h>
extern unsigned long long int strtoull(char *s, char **, int);
static int bad = 0;
int check(char *s, long long eull, int een) {
	long long gull;
	errno = 0;
	gull = strtoull(s, 0, 10);
	if (!((gull == eull) && (errno == een)))
		bad++;
}
int main() {
	check(" 1",                                        1LL, 0);
	check(" 0",                                        0LL, 0);
	check("18446744073709551615",  18446744073709551615ULL, 0);
	check("18446744073709551616",  18446744073709551615ULL, ERANGE);
#if 0 /* strtoull() for /^-/ strings is undefined. */
	check("-1",                    18446744073709551615ULL, 0);
	check("-18446744073709551614",                     2LL, 0);
	check("-18446744073709551615",                     1LL, 0);
       	check("-18446744073709551616", 18446744073709551615ULL, ERANGE);
	check("-18446744073709551617", 18446744073709551615ULL, ERANGE);
#endif
	if (!bad)
		printf("ok\n");
}
EOCP
	set try
	if eval $compile; then
		case "`$run ./try`" in
		ok) echo "Your strtoull() seems to be working okay." ;;
		*) cat <<EOM >&4
Your strtoull() doesn't seem to be working okay.
EOM
		   d_strtoull="$undef"
		   ;;
		esac
	else
		echo "(I can't seem to compile the test program--assuming it doesn't)"
		d_strtoull="$undef"
	fi
	;;
esac

: see if strtouq exists
set strtouq d_strtouq
eval $inlibc

case "$d_strtouq" in
"$define")
	$cat <<EOM
Checking whether your strtouq() works okay...
EOM
	$cat >try.c <<'EOCP'
#include <errno.h>
#include <stdio.h>
extern unsigned long long int strtouq(char *s, char **, int);
static int bad = 0;
void check(char *s, unsigned long long eull, int een) {
	unsigned long long gull;
	errno = 0;
	gull = strtouq(s, 0, 10);
	if (!((gull == eull) && (errno == een)))
		bad++;
}
int main() {
	check(" 1",                                        1LL, 0);
	check(" 0",                                        0LL, 0);
	check("18446744073709551615",  18446744073709551615ULL, 0);
	check("18446744073709551616",  18446744073709551615ULL, ERANGE);
#if 0 /* strtouq() for /^-/ strings is undefined. */
	check("-1",                    18446744073709551615ULL, 0);
	check("-18446744073709551614",                     2LL, 0);
	check("-18446744073709551615",                     1LL, 0);
       	check("-18446744073709551616", 18446744073709551615ULL, ERANGE);
	check("-18446744073709551617", 18446744073709551615ULL, ERANGE);
#endif
	if (!bad)
		printf("ok\n");
	return 0;
}
EOCP
	set try
	if eval $compile; then
		case "`$run ./try`" in
		ok) echo "Your strtouq() seems to be working okay." ;;
		*) cat <<EOM >&4
Your strtouq() doesn't seem to be working okay.
EOM
		   d_strtouq="$undef"
		   ;;
		esac
	else
		echo "(I can't seem to compile the test program--assuming it doesn't)"
		d_strtouq="$undef"
	fi
	;;
esac

: see if strxfrm exists
set strxfrm d_strxfrm
eval $inlibc

: see if symlink exists
set symlink d_symlink
eval $inlibc

: see if syscall exists
set syscall d_syscall
eval $inlibc

: see if prototype for syscall is available
echo " "
set d_syscallproto syscall $i_unistd unistd.h
eval $hasproto

: see if sysconf exists
set sysconf d_sysconf
eval $inlibc

: see if system exists
set system d_system
eval $inlibc

: see if tcgetpgrp exists
set tcgetpgrp d_tcgetpgrp
eval $inlibc

: see if tcsetpgrp exists
set tcsetpgrp d_tcsetpgrp
eval $inlibc

: see if prototype for telldir is available
echo " "
set d_telldirproto telldir $i_systypes sys/types.h $i_dirent dirent.h
eval $hasproto

: see if tgamma exists
set tgamma d_tgamma
eval $inlibc

: see if time exists
echo " "
if test "X$d_time" = X -o X"$timetype" = X; then
    if set time val -f d_time; eval $csym; $val; then
		echo 'time() found.' >&4
		val="$define"
		rp="What is the type returned by time() on this system?"
		set time_t timetype long stdio.h sys/types.h
		eval $typedef_ask
    else
		echo 'time() not found, hope that will do.' >&4
		val="$undef"
		timetype='int';
    fi
    set d_time
    eval $setvar
fi

: see if timegm exists
set timegm d_timegm
eval $inlibc

: see if this is a sys/times.h system
set sys/times.h i_systimes
eval $inhdr

: see if times exists
echo " "
if set times val -f d_times; eval $csym; $val; then
	echo 'times() found.' >&4
	d_times="$define"
	inc=''
	case "$i_systimes" in
	"$define") inc='sys/times.h';;
	esac
	rp="What is the type returned by times() on this system?"
	set clock_t clocktype long stdio.h sys/types.h $inc
	eval $typedef_ask
else
	echo 'times() NOT found, hope that will do.' >&4
	d_times="$undef"
	clocktype='int'
fi

: see if tmpnam_r exists
set tmpnam_r d_tmpnam_r
eval $inlibc
case "$d_tmpnam_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h "
	case "$d_tmpnam_r_proto:$usethreads" in
	":define")	d_tmpnam_r_proto=define
		set d_tmpnam_r_proto tmpnam_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_tmpnam_r_proto" in
	define)
	case "$tmpnam_r_proto" in
	''|0) try='char* tmpnam_r(char*);'
	./protochk "$extern_C $try" $hdrs && tmpnam_r_proto=B_B ;;
	esac
	case "$tmpnam_r_proto" in
	''|0)	d_tmpnam_r=undef
 	        tmpnam_r_proto=0
		echo "Disabling tmpnam_r, cannot determine prototype." >&4 ;;
	* )	case "$tmpnam_r_proto" in
		REENTRANT_PROTO*) ;;
		*) tmpnam_r_proto="REENTRANT_PROTO_$tmpnam_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "tmpnam_r has no prototype, not using it." >&4 ;;
		esac
		d_tmpnam_r=undef
		tmpnam_r_proto=0
		;;
	esac
	;;
*)	tmpnam_r_proto=0
	;;
esac

: see if trunc exists
set trunc d_trunc
eval $inlibc

: see if truncate exists
set truncate d_truncate
eval $inlibc

: see if ttyname_r exists
set ttyname_r d_ttyname_r
eval $inlibc
case "$d_ttyname_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_unistd unistd.h"
	case "$d_ttyname_r_proto:$usethreads" in
	":define")	d_ttyname_r_proto=define
		set d_ttyname_r_proto ttyname_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_ttyname_r_proto" in
	define)
	case "$ttyname_r_proto" in
	''|0) try='int ttyname_r(int, char*, size_t);'
	./protochk "$extern_C $try" $hdrs && ttyname_r_proto=I_IBW ;;
	esac
	case "$ttyname_r_proto" in
	''|0) try='int ttyname_r(int, char*, int);'
	./protochk "$extern_C $try" $hdrs && ttyname_r_proto=I_IBI ;;
	esac
	case "$ttyname_r_proto" in
	''|0) try='char* ttyname_r(int, char*, int);'
	./protochk "$extern_C $try" $hdrs && ttyname_r_proto=B_IBI ;;
	esac
	case "$ttyname_r_proto" in
	''|0)	d_ttyname_r=undef
 	        ttyname_r_proto=0
		echo "Disabling ttyname_r, cannot determine prototype." >&4 ;;
	* )	case "$ttyname_r_proto" in
		REENTRANT_PROTO*) ;;
		*) ttyname_r_proto="REENTRANT_PROTO_$ttyname_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "ttyname_r has no prototype, not using it." >&4 ;;
		esac
		d_ttyname_r=undef
		ttyname_r_proto=0
		;;
	esac
	;;
*)	ttyname_r_proto=0
	;;
esac

: see if tzname[] exists
echo " "
if set tzname val -a d_tzname; eval $csym; $val; then
	val="$define"
	echo 'tzname[] found.' >&4
else
	val="$undef"
	echo 'tzname[] NOT found.' >&4
fi
set d_tzname
eval $setvar

: Check if is a multiplatform env
case "$osname" in
darwin) multiarch="$define" ;;
esac
case "$multiarch" in
''|[nN]*) multiarch="$undef" ;;
esac

: check for ordering of bytes in a UV
echo " "
case "$multiarch" in
*$define*)
	$cat <<EOM
You seem to be doing a multiarchitecture build,
skipping the byteorder check.

EOM
	byteorder='ffff'
	;;
*)
	case "$byteorder" in
	'')
		$cat <<'EOM'
In the following, larger digits indicate more significance.  A big-endian
machine like a Pyramid or a Motorola 680?0 chip will come out to 4321. A
little-endian machine like a Vax or an Intel 80?86 chip would be 1234. Other
machines may have weird orders like 3412.  A Cray will report 87654321,
an Alpha will report 12345678. If the test program works the default is
probably right.
I'm now running the test program...
EOM
		$cat >try.c <<EOCP
#include <stdio.h>
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
#include <sys/types.h>
typedef $uvtype UV;
int main()
{
	int i;
	union {
		UV l;
		char c[$uvsize];
	} u;

	if ($uvsize > 4)
		u.l = (((UV)0x08070605) << 32) | (UV)0x04030201;
	else
		u.l = (UV)0x04030201;
	for (i = 0; i < $uvsize; i++)
		printf("%c", u.c[i]+'0');
	printf("\n");
	exit(0);
}
EOCP
		xxx_prompt=y
		set try
		if eval $compile && $run ./try > /dev/null; then
			dflt=`$run ./try`
			case "$dflt" in
			[1-4][1-4][1-4][1-4]|12345678|87654321)
				echo "(The test program ran ok.)"
				echo "byteorder=$dflt"
				xxx_prompt=n
			;;
			????|????????) echo "(The test program ran ok.)" ;;
			*) echo "(The test program didn't run right for some reason.)" ;;
			esac
		else
			dflt='4321'
			cat <<'EOM'
(I can't seem to compile the test program.  Guessing big-endian...)
EOM
		fi
		case "$xxx_prompt" in
		y)
			rp="What is the order of bytes in $uvtype?"
			. ./myread
			byteorder="$ans"
			;;
		*)	byteorder=$dflt
			;;
		esac
		;;
	esac
	$rm_try
	;;
esac

: Checking 32bit alignedness
$cat <<EOM

Checking to see whether you can access character data unalignedly...
EOM
case "$d_u32align" in
'')   $cat >try.c <<EOCP
#include <stdio.h>
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
#define U32 $u32type
#define BYTEORDER 0x$byteorder
#define U8 $u8type
#include <signal.h>
#ifdef SIGBUS
$signal_t bletch(int s) { exit(4); }
#endif
int main() {
#if BYTEORDER == 0x1234 || BYTEORDER == 0x4321
    volatile U8 buf[8];
    volatile U32 *up;
    int i;

    if (sizeof(U32) != 4) {
	printf("sizeof(U32) is not 4, but %d\n", sizeof(U32));
	exit(1);
    }

    fflush(stdout);

#ifdef SIGBUS
    signal(SIGBUS, bletch);
#endif

    buf[0] = 0;
    buf[1] = 0;
    buf[2] = 0;
    buf[3] = 1;
    buf[4] = 0;
    buf[5] = 0;
    buf[6] = 0;
    buf[7] = 1;

    for (i = 0; i < 4; i++) {
	up = (U32*)(buf + i);
	if (! ((*up == 1 << (8*i)) ||   /* big-endian */
	       (*up == 1 << (8*(3-i)))  /* little-endian */
	      )
	   )
	{
	    printf("read failed (%x)\n", *up);
	    exit(2);
	}
    }

    /* write test */
    for (i = 0; i < 4; i++) {
	up = (U32*)(buf + i);
	*up = 0xBeef;
	if (*up != 0xBeef) {
	    printf("write failed (%x)\n", *up);
	    exit(3);
	}
    }

    exit(0);
#else
    printf("1\n");
    exit(1);
#endif
    return 0;
}
EOCP
set try
if eval $compile_ok; then
	echo "(Testing for character data alignment may crash the test.  That's okay.)" >&4
	$run ./try 2>&1 >/dev/null
	case "$?" in
	0)	cat >&4 <<EOM
You can access character data pretty unalignedly.
EOM
		d_u32align="$undef"
		;;
	*)	cat >&4 <<EOM
It seems that you must access character data in an aligned manner.
EOM
		d_u32align="$define"
		;;
	esac
else
	rp='Can you access character data at unaligned addresses?'
	dflt='n'
	. ./myread
	case "$ans" in
	[yY]*)	d_u32align="$undef"  ;;
	*)	d_u32align="$define" ;;
	esac
fi
$rm_try
;;
esac

: see if ualarm exists
set ualarm d_ualarm
eval $inlibc

: see if umask exists
set umask d_umask
eval $inlibc

: see if unordered exists
set unordered d_unordered
eval $inlibc

: see if unsetenv exists
set unsetenv d_unsetenv
eval $inlibc

: see if usleep exists
set usleep d_usleep
eval $inlibc

: see if prototype for usleep is available
echo " "
set d_usleepproto usleep $i_unistd unistd.h
eval $hasproto

: see if ustat exists
set ustat d_ustat
eval $inlibc

: see if closedir exists
set closedir d_closedir
eval $inlibc

case "$d_closedir" in
"$define")
	echo " "
	echo "Checking whether closedir() returns a status..." >&4
	cat > try.c <<EOM
#$i_dirent I_DIRENT		/**/
#$i_sysdir I_SYS_DIR		/**/
#$i_sysndir I_SYS_NDIR		/**/
#$i_systypes I_SYS_TYPES	/**/

#if defined(I_SYS_TYPES)
#include <sys/types.h>
#endif
#if defined(I_DIRENT)
#include <dirent.h>
#else
#ifdef I_SYS_NDIR
#include <sys/ndir.h>
#else
#ifdef I_SYS_DIR
#ifdef hp9000s500
#include <ndir.h>	/* may be wrong in the future */
#else
#include <sys/dir.h>
#endif
#endif
#endif
#endif
int main() { return closedir(opendir(".")); }
EOM
	set try
	if eval $compile_ok; then
		if $run ./try > /dev/null 2>&1 ; then
			echo "Yes, it does."
			val="$undef"
		else
			echo "No, it doesn't."
			val="$define"
		fi
	else
		echo "(I can't seem to compile the test program--assuming it doesn't)"
		val="$define"
	fi
	;;
*)
	val="$undef";
	;;
esac
set d_void_closedir
eval $setvar
$rm_try

: see if there is a wait4
set wait4 d_wait4
eval $inlibc

: see if waitpid exists
set waitpid d_waitpid
eval $inlibc

: look for wcscmp
echo " "
$cat >try.c <<'EOCP'
#include <stdio.h>
#include <wchar.h>
int main ()
{
    wchar_t *s = L" ";
    return (wcscmp (s, s) ? 1 : 0);
    }
EOCP
set try
val="$undef"
if eval $compile; then
    `$run ./try`
    case "$?" in
	0)  echo "A working wcscmp() found." >&4
	    val="$define" ;;
	*)  echo "wcscmp() found, but it doesn't work" >&4
	    ;;
	esac
else
    echo "wcscmp() NOT found." >&4
    fi
set d_wcscmp
eval $setvar
$rm_try

: see if wcstombs exists
set wcstombs d_wcstombs
eval $inlibc

: look for wcsxfrm
echo " "
$cat >try.c <<'EOCP'
#include <errno.h>
#include <wchar.h>
int main ()
{
    wchar_t dst[4], *src = L" ";
    errno = 0;
    return (wcsxfrm (dst, src, 1) ? errno ? errno : 0 : 1);
    }
EOCP
set try
val="$undef"
if eval $compile; then
    `$run ./try`
    case "$?" in
	0)  echo "A working wcsxfrm() found." >&4
	    val="$define" ;;
	*)  echo "wcsxfrm() found, but it doesn't work" >&4
	    ;;
	esac
else
    echo "wcsxfrm() NOT found." >&4
    fi
set d_wcsxfrm
eval $setvar
$rm_try

: see if wctomb exists
set wctomb d_wctomb
eval $inlibc

: see if writev exists
set writev d_writev
eval $inlibc

: check for alignment requirements
echo " "
case "$alignbytes" in
    '') echo "Checking alignment constraints..." >&4
	$cat >try.c <<EOCP
#include <stdio.h>
struct foobar {
    char foo;
    $nvtype bar;
} try_algn;
int main()
{
    printf("%d\n", (int)((char *)&try_algn.bar - (char *)&try_algn.foo));
    return(0);
}
EOCP
	set try
	if eval $compile_ok; then
	    dflt=`$run ./try`
	else
	    dflt='8'
	    echo "(I can't seem to compile the test program...)"
	fi
	case "$multiarch" in
	    *$define*)
		: The usual safe value is 8, but Darwin with -Duselongdouble
		: needs 16.  Hence, we will take 8 as a minimum, but allow
		: Configure to pick a larger value if needed.
		if $test "$dflt" -lt 8; then
		    dflt='8'
		    echo "Setting alignment to 8 for multiarch support.">&4
		fi
		;;
	esac
	;;
    *) dflt="$alignbytes"
	;;
esac
rp="Doubles must be aligned on a how-many-byte boundary?"
. ./myread
alignbytes="$ans"
$rm_try

: set the base revision
baserev=5.0

: length of character in bytes. Is always 1, otherwise it is not C
: This used to be a test using sizeof
charsize=1

: Check for the number of bits in a character
case "$charbits" in
'')	echo "Checking how long a character is (in bits)..." >&4
	$cat >try.c <<EOCP
#include <stdio.h>
int main ()
{
    int n;
    unsigned char c;
    for (c = 1, n = 0; c; c <<= 1, n++) ;
    printf ("%d\n", n);
    return (0);
    }
EOCP
	set try
	if eval $compile_ok; then
		dflt=`$run ./try`
	else
		dflt='8'
		echo "(I can't seem to compile the test program.  Guessing...)"
	fi
	;;
*)
	dflt="$charbits"
	;;
esac
rp="What is the length of a character (in bits)?"
. ./myread
charbits="$ans"
$rm_try
case "$charbits" in
8)	;;
*)	cat >&4 << EOM
Your system has an unsigned character size of $charbits bits, which
is rather unusual (normally it is 8 bits).  Perl likely will not work
correctly on your system, with subtle bugs in various places.
EOM
	rp='Do you really want to continue?'
	dflt='n'
	. ./myread
	case "$ans" in
		[yY])	echo >&4 "Okay, continuing."	;;
		*)	exit 1				;;
	esac
esac

: how do we concatenate cpp tokens here?
echo " "
echo "Checking to see how your cpp does stuff like concatenate tokens..." >&4
$cat >cpp_stuff.c <<'EOCP'
#define RCAT(a,b)a/**/b
#define ACAT(a,b)a ## b
RCAT(Rei,ser)
ACAT(Cir,cus)
EOCP
$cppstdin $cppflags $cppminus <cpp_stuff.c >cpp_stuff.out 2>&1
if $contains 'Circus' cpp_stuff.out >/dev/null 2>&1; then
	echo "Oh!  Smells like ANSI's been here." >&4
	echo "We can catify or stringify, separately or together!"
	cpp_stuff=42
elif $contains 'Reiser' cpp_stuff.out >/dev/null 2>&1; then
	echo "Ah, yes!  The good old days!" >&4
	echo "However, in the good old days we don't know how to stringify and"
	echo "catify at the same time."
	cpp_stuff=1
else
	$cat >&4 <<EOM
Hmm, I don't seem to be able to concatenate tokens with your cpp.
You're going to have to edit the values of CAT[2-5] in config.h...
EOM
	cpp_stuff="/* Help! How do we handle cpp_stuff? */*/"
fi
$rm -f cpp_stuff.*

: see if this is a db.h system
set db.h i_db
eval $inhdr

case "$i_db" in
$define)
	: Check db version.
	echo " "
	echo "Checking Berkeley DB version ..." >&4
	$cat >try.c <<EOCP
#$d_const HASCONST
#ifndef HASCONST
#define const
#endif
#include <sys/types.h>
#include <stdio.h>
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
#include <db.h>
int main(int argc, char *argv[])
{
#ifdef DB_VERSION_MAJOR	/* DB version >= 2 */
    int Major, Minor, Patch ;
    unsigned long Version ;
    (void)db_version(&Major, &Minor, &Patch) ;
    if (argc == 2) {
        printf("%d %d %d %d %d %d\n",
               DB_VERSION_MAJOR, DB_VERSION_MINOR, DB_VERSION_PATCH,
               Major, Minor, Patch);
        exit(0);
    }
    printf("You have Berkeley DB Version 2 or greater.\n");

    printf("db.h is from Berkeley DB Version %d.%d.%d\n",
		DB_VERSION_MAJOR, DB_VERSION_MINOR, DB_VERSION_PATCH);
    printf("libdb is from Berkeley DB Version %d.%d.%d\n",
		Major, Minor, Patch) ;

    /* check that db.h & libdb are compatible */
    if (DB_VERSION_MAJOR != Major || DB_VERSION_MINOR != Minor || DB_VERSION_PATCH != Patch) {
	printf("db.h and libdb are incompatible.\n") ;
        exit(3);
    }

    printf("db.h and libdb are compatible.\n") ;

    Version = DB_VERSION_MAJOR * 1000000 + DB_VERSION_MINOR * 1000
		+ DB_VERSION_PATCH ;

    /* needs to be >= 2.3.4 */
    if (Version < 2003004) {
    /* if (DB_VERSION_MAJOR == 2 && DB_VERSION_MINOR == 0 && DB_VERSION_PATCH < 5) { */
	printf("Perl needs Berkeley DB 2.3.4 or greater.\n") ;
        exit(2);
    }

    exit(0);
#else
#if defined(_DB_H_) && defined(BTREEMAGIC) && defined(HASHMAGIC)
    if (argc == 2) {
        printf("1 0 0\n");
        exit(0);
    }
    printf("You have Berkeley DB Version 1.\n");
    exit(0);	/* DB version < 2: the coast is clear. */
#else
    exit(1);	/* <db.h> not Berkeley DB? */
#endif
#endif
}
EOCP
	set try
	if eval $compile_ok && $run ./try; then
		echo 'Looks OK.' >&4
		set `$run ./try 1`
		db_version_major=$1
		db_version_minor=$2
		db_version_patch=$3
	else
		echo "I can't use Berkeley DB with your <db.h>.  I'll disable Berkeley DB." >&4
		i_db=$undef
		case " $libs " in
		*"-ldb "*)
			: Remove db from list of libraries to use
			echo "Removing unusable -ldb from library list" >&4
			set `echo X $libs | $sed -e 's/-ldb / /' -e 's/-ldb$//'`
			shift
			libs="$*"
			echo "libs = $libs" >&4
			;;
		esac
	fi
	$rm_try
	;;
esac

case "$i_db" in
define)
	: Check the return type needed for hash
	echo " "
	echo "Checking return type needed for hash for Berkeley DB ..." >&4
	$cat >try.c <<EOCP
#$d_const HASCONST
#ifndef HASCONST
#define const
#endif
#include <sys/types.h>
#include <db.h>

#ifndef DB_VERSION_MAJOR
u_int32_t hash_cb (const void* ptr, size_t size)
{
}
HASHINFO info;
int main()
{
	info.hash = hash_cb;
}
#endif
EOCP
	if $cc $ccflags -c try.c >try.out 2>&1 ; then
		if $contains warning try.out >>/dev/null 2>&1 ; then
			db_hashtype='int'
		else
			db_hashtype='u_int32_t'
		fi
	else
		: XXX Maybe we should just give up here.
		db_hashtype=u_int32_t
		$cat try.out >&4
		echo "Help:  I can't seem to compile the db test program." >&4
		echo "Something's wrong, but I'll assume you use $db_hashtype." >&4
	fi
	$rm_try
	echo "Your version of Berkeley DB uses $db_hashtype for hash."
	;;
*)	db_hashtype=u_int32_t
	;;
esac
case "$i_db" in
define)
	: Check the return type needed for prefix
	echo " "
	echo "Checking return type needed for prefix for Berkeley DB ..." >&4
	cat >try.c <<EOCP
#$d_const HASCONST
#ifndef HASCONST
#define const
#endif
#include <sys/types.h>
#include <db.h>

#ifndef DB_VERSION_MAJOR
size_t prefix_cb (const DBT *key1, const DBT *key2)
{
}
BTREEINFO info;
int main()
{
	info.prefix = prefix_cb;
}
#endif
EOCP
	if $cc $ccflags -c try.c  >try.out 2>&1 ; then
		if $contains warning try.out >>/dev/null 2>&1 ; then
			db_prefixtype='int'
		else
			db_prefixtype='size_t'
		fi
	else
		db_prefixtype='size_t'
		: XXX Maybe we should just give up here.
		$cat try.out >&4
		echo "Help:  I can't seem to compile the db test program." >&4
		echo "Something's wrong, but I'll assume you use $db_prefixtype." >&4
	fi
	$rm_try
	echo "Your version of Berkeley DB uses $db_prefixtype for prefix."
	;;
*)	db_prefixtype='size_t'
	;;
esac

: Check what kind of inf/nan your system has
$echo "Checking the kind of infinities and nans you have..." >&4
$cat >try.c <<EOP
#define DOUBLESIZE $doublesize
#$d_longdbl HAS_LONG_DOUBLE
#ifdef HAS_LONG_DOUBLE
#define LONG_DOUBLESIZE $longdblsize
#define LONG_DOUBLEKIND $longdblkind
#endif
#$i_math I_MATH
#ifdef I_MATH
#include <math.h>
#endif
#include <stdio.h>
/* Note that whether the sign bit is on or off
 * for NaN depends on the CPU/FPU, and possibly
 * can be affected by the build toolchain.
 *
 * For example for older MIPS and HP-PA 2.0 the quiet NaN is:
 * 0x7f, 0xf7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
 * 0x7f, 0xf4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
 * (respectively) as opposed to the more usual
 * 0x7f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
 */
static void bytes(unsigned char *p, unsigned int n) {
  int i;
  for (i = 0; i < n; i++) {
    printf("0x%02x%s", p[i], i < n - 1 ? ", " : "\n");
  }
}
int main(int argc, char *argv[]) {
   /* We cannot use 1.0/0.0 and 0.0/0.0 (with L suffixes for long double)
    * because some compilers are 'smart' and not only warn but refuse to
    * compile such 'illegal' values. */
   double dinf = exp(1e9);
   double dnan = sqrt(-1.0);
#ifdef HAS_LONG_DOUBLE
   long double ldinf = (long double)exp(1e9);
   long double ldnan = (long double)sqrt(-1.0);
# if LONG_DOUBLEKIND == 3 || LONG_DOUBLEKIND == 4
/* the 80-bit long doubles might have garbage in their excess bytes */
    memset((char *)&ldinf + 10, '\0', LONG_DOUBLESIZE - 10);
    memset((char *)&ldnan + 10, '\0', LONG_DOUBLESIZE - 10);
# endif
  if (argc == 2) {
    switch (argv[1][0]) {
    case '1': bytes(&dinf, sizeof(dinf)); break;
    case '2': bytes(&dnan, sizeof(dnan)); break;
    case '3': bytes(&ldinf, sizeof(ldinf)); break;
    case '4': bytes(&ldnan, sizeof(ldnan)); break;
#endif
    }
  }
  return 0;
}
EOP
set try
if eval $compile; then
    doubleinfbytes=`$run ./try 1`
    doublenanbytes=`$run ./try 2`
    case "$d_longdbl" in
    $define)
      longdblinfbytes=`$run ./try 3`
      longdblnanbytes=`$run ./try 4`
      ;;
    esac
else
    # Defaults in case the above test program failed.
    case "$doublekind" in
    1) # IEEE 754 32-bit LE
       doubleinfbytes='0x00, 0x00, 0xf0, 0x7f'
       doublenanbytes='0x00, 0x00, 0xf8, 0x7f'
       ;;
    2) # IEEE 754 32-bit BE
       doubleinfbytes='0x7f, 0xf0, 0x00, 0x00'
       doublenanbytes='0x7f, 0xf8, 0x00, 0x00'
       ;;
    3) # IEEE 754 64-bit LE
       doubleinfbytes='0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x7f'
       doublenanbytes='0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x7f'
       ;;
    4) # IEEE 754 64-bit BE
       doubleinfbytes='0x7f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00'
       doublenanbytes='0x7f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00'
       ;;
    5) # IEEE 754 128-bit LE
       doubleinfbytes='0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x7f'
       doublenanbytes='0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x7f'
       ;;
    6) # IEEE 754 128-bit BE
       doubleinfbytes='0x7f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00'
       doublenanbytes='0x7f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00'
       ;;
    7) # IEEE 754 64-bit mixed: 32-bit LEs in BE
       doubleinfbytes='0x00, 0x00, 0xf0, 0x7f, 0x00, 0x00, 0x00, 0x00'
       doublenanbytes='0x00, 0x00, 0xf8, 0x7f, 0x00, 0x00, 0x00, 0x00'
       ;;
    8) # IEEE 754 64-bit mixed: 32-bit BEs in LE
       doubleinfbytes='0x00, 0x00, 0x00, 0x00, 0x7f, 0xf0, 0x00, 0x00'
       doublenanbytes='0x00, 0x00, 0x00, 0x00, 0x7f, 0xf8, 0x00, 0x00'
       ;;
    *) # No idea.
       doubleinfbytes=$undef
       doublenanbytes=$undef
       ;;
    esac
    case "$longdblkind" in
    1) # IEEE 754 128-bit LE
       longdblinfbytes='0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x7f'
       longdblnanbytes='0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0x7f'
       ;;
    2) # IEEE 754 128-bit BE
       longdblinfbytes='0x7f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00'
       longdblnanbytes='0x7f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00'
       ;;
    3) # IEEE 754 80-bit LE, 12 or 16 bytes (x86)
       case "$longdblsize" in
       12) # x86 32-bit (96 bits, or 4 x 32, or 12 x 8)
           longdblinfbytes='0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0x7f, 0x00, 0x00'
           longdblnanbytes='0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 0x7f, 0x00, 0x00'
           ;;
       16) # x86_64
           longdblinfbytes='0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00'
           longdblnanbytes='0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00'
           ;;
       *)  # No idea.
           longdblinfbytes=$undef
           longdblnanbytes=$undef
       ;;
       esac
       ;;
    4) # IEEE 754 80-bit BE, 12 or 16 bytes
       case "$longdblsize" in
       12) # 32-bit system
           longdblinfbytes='0x7f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00'
           longdblnanbytes='0x7f, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00'
           ;;
       16) # 64-bit system
           longdblinfbytes='0x7f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00'
           longdblnanbytes='0x7f, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00'
           ;;
       *)  # No idea.
           longdblinfbytes=$undef
           longdblnanbytes=$undef
       ;;
       esac
       ;;
    5) # 128-bit LE-LE "double double"
       longdblinfbytes='0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x7f'
       longdblnanbytes='0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x7f'
       ;;
    6) # 128-bit BE-BE "double double"
       longdblinfbytes='0x7f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00'
       longdblnanbytes='0x7f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00'
       ;;
    7) # 128-bit LE-BE "double double"
       longdblinfbytes='0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00'
       longdblnanbytes='0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00'
       ;;
    8) # 128-bit BE-LE "double double"
       longdblinfbytes='0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00'
       longdblnanbytes='0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00'
       ;;
    *) # No idea.
       longdblinfbytes=$undef
       longdblnanbytes=$undef
       ;;
    esac
fi
$rm_try

: Check the length of the double mantissa
$echo "Checking how many mantissa bits your doubles have..." >&4
$cat >try.c <<EOP
#$i_float I_FLOAT
#$i_sunmath I_SUNMATH
#ifdef I_FLOAT
# include <float.h>
#endif
#ifdef I_SUNMATH
# include <sunmath.h>
#endif
#ifdef DBL_MANT_DIG
# define BITS (DBL_MANT_DIG - 1) /* the implicit bit does not count */
#endif
#include <stdio.h>
int main(int argc, char *argv[]) {
#ifdef BITS
  printf("%d\n", BITS);
#endif
  return 0;
}
EOP
set try
if eval $compile; then
    doublemantbits=`$run ./try`
else
    doublemantbits="$undef"
fi
$rm_try

: Check the length of the longdouble mantissa
$echo "Checking how many mantissa bits your long doubles have..." >&4
$cat >try.c <<EOP
#$i_float I_FLOAT
#$i_sunmath I_SUNMATH
#ifdef I_FLOAT
# include <float.h>
#endif
#ifdef I_SUNMATH
# include <sunmath.h>
#endif
#$d_longdbl HAS_LONG_DOUBLE
#if defined(HAS_LONG_DOUBLE) && defined(LDBL_MANT_DIG)
# if ($longdblkind == 3) || ($longdblkind == 4) /* 80-bit extended precision */
/* This format has no implicit bit.  Beware, however, that for
 * this format the bare LDBL_MANT_DIG is misleading for inf/nan:
 * the top three bits are used for inf (100) / qnan (11x) / snan (101),
 * and the top bit must have been one since 387, zero is plain invalid.
 * For normal fp values, the LDBL_MANT_DIG is fine, though. */
#  define BITS LDBL_MANT_DIG
# elif ($longdblkind == 5 || $longdblkind == 6 || $longdblkind == 7 || $longdblkind == 8) /* double double */
/* LDBL_MANT_DIG of 106 (twice 53) would be logical, but for some
 * reason e.g. Irix thinks 107.  But in any case, we want only
 * the number of real bits, the implicit bits are of no interest.  */
#  define BITS 2 * (DBL_MANT_DIG - 1)
# else
#  define BITS (LDBL_MANT_DIG - 1) /* the implicit bit does not count */
# endif
#endif
#include <stdio.h>
int main(int argc, char *argv[]) {
#ifdef BITS
  printf("%d\n", BITS);
#endif
  return 0;
}
EOP
set try
if eval $compile; then
    longdblmantbits=`$run ./try`
else
    longdblmantbits="$undef"
fi
$rm_try

: Check the length of the NV mantissa
$echo "Checking how many mantissa bits your NVs have..." >&4
if test "X$usequadmath" = "X$define"; then
  nvmantbits=112 # 128-1-15
else
  if test "X$nvsize" = "X$doublesize"; then
    nvmantbits="$doublemantbits"
  else
     if test "X$nvsize" = "X$longdblsize"; then
       nvmantbits="$longdblmantbits"
     else
       nvmantbits="$undef"
     fi
  fi
fi

: How can we generate normalized random numbers ?
echo " "
echo "Using our internal random number implementation..." >&4

case "$ccflags" in
*-Dmy_rand=*|*-Dmy_srand=*)
	echo "Removing obsolete -Dmy_rand, -Dmy_srand, and -Drandbits from ccflags." >&4
	ccflags="`echo $ccflags | sed -e 's/-Dmy_rand=random/ /'`"
	ccflags="`echo $ccflags | sed -e 's/-Dmy_srand=srandom/ /'`"
	ccflags="`echo $ccflags | sed -e 's/-Drandbits=[0-9][0-9]*/ /'`"
	;;
esac

randfunc=drand48
drand01="drand48()"
seedfunc="srand48"
randbits=48
randseedtype=U32

: Probe whether dtrace builds an object, as newer Illumos requires an input
: object file that uses at least one of the probes defined in the .d file
case "$usedtrace" in
$define)
    case "$dtraceobject" in
    $define|true|[yY]*)
        dtraceobject=$define
        ;;
    ' '|'')
        $dtrace -h -s ../perldtrace.d -o perldtrace.h
        $cat >try.c <<EOM
#include "perldtrace.h"
int main(void) {
    PERL_LOADED_FILE("dummy");
    return 0;
}
EOM
        dtraceobject=$undef
        if $cc -c -o try.o $optimize $ccflags try.c \
                    && $dtrace -G -s ../perldtrace.d try.o >/dev/null 2>&1; then
                dtraceobject=$define
            echo "Your dtrace builds an object file"
        fi
        $rm -f try.c try.o perldtrace.o
        ;;
    *) dtraceobject=$undef ;;
    esac
esac

: Determine if this is an EBCDIC system
echo " "
echo "Determining whether or not we are on an EBCDIC system..." >&4
$cat >try.c <<'EOM'
int main()
{
  if ('M'==0xd4) return 0;
  return 1;
}
EOM

val=$undef
set try
if eval $compile_ok; then
	if $run ./try; then
		echo "You seem to speak EBCDIC." >&4
		val="$define"
	else
		echo "Nope, no EBCDIC, probably ASCII or some ISO Latin. Or UTF-8." >&4
	fi
else
	echo "I'm unable to compile the test program." >&4
	echo "I'll assume ASCII or some ISO Latin. Or UTF8." >&4
fi
$rm_try
set ebcdic
eval $setvar

: Check how to flush
echo " "
$cat >&4 <<EOM
Checking how to flush all pending stdio output...
EOM
# I only know how to find the first 32 possibly open files on SunOS.
# See also hints/sunos_4_1.sh and util.c  --AD
case "$osname" in
sunos) $echo '#define PERL_FFLUSH_ALL_FOPEN_MAX 32' > try.c ;;
esac
$cat >>try.c <<EOCP
#include <stdio.h>
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
#$i_unistd I_UNISTD
#ifdef I_UNISTD
# include <unistd.h>
#endif
#$d_sysconf HAS_SYSCONF
#$d_stdio_stream_array HAS_STDIO_STREAM_ARRAY
#ifdef HAS_STDIO_STREAM_ARRAY
# define STDIO_STREAM_ARRAY $stdio_stream_array
#endif
int main() {
  FILE* p;
  unlink("try.out");
  p = fopen("try.out", "w");
#ifdef TRY_FPUTC
  fputc('x', p);
#else
# ifdef TRY_FPRINTF
  fprintf(p, "x");
# endif
#endif
#ifdef TRY_FFLUSH_NULL
  fflush(NULL);
#endif
#ifdef TRY_FFLUSH_ALL
  {
    long open_max = -1;
# ifdef PERL_FFLUSH_ALL_FOPEN_MAX
    open_max = PERL_FFLUSH_ALL_FOPEN_MAX;
# else
#  if defined(HAS_SYSCONF) && defined(_SC_OPEN_MAX)
    open_max = sysconf(_SC_OPEN_MAX);
#  else
#   ifdef FOPEN_MAX
    open_max = FOPEN_MAX;
#   else
#    ifdef OPEN_MAX
    open_max = OPEN_MAX;
#    else
#     ifdef _NFILE
    open_max = _NFILE;
#     endif
#    endif
#   endif
#  endif
# endif
# ifdef HAS_STDIO_STREAM_ARRAY
    if (open_max > 0) {
      long i;
      for (i = 0; i < open_max; i++)
	    if (STDIO_STREAM_ARRAY[i]._file >= 0 &&
		STDIO_STREAM_ARRAY[i]._file < open_max &&
		STDIO_STREAM_ARRAY[i]._flag)
		fflush(&STDIO_STREAM_ARRAY[i]);
    }
  }
# endif
#endif
  _exit(42);
}
EOCP
: first we have to find out how _not_ to flush
$to try.c
if $test "X$fflushNULL" = X -o "X$fflushall" = X; then
    output=''
    set try -DTRY_FPUTC
    if eval $compile; then
	    $run ./try 2>/dev/null
	    code="$?"
	    $from try.out
	    if $test ! -s try.out -a "X$code" = X42; then
		output=-DTRY_FPUTC
	    fi
    fi
    case "$output" in
    '')
	    set try -DTRY_FPRINTF
	    if eval $compile; then
		    $run ./try 2>/dev/null
		    code="$?"
		    $from try.out
		    if $test ! -s try.out -a "X$code" = X42; then
			output=-DTRY_FPRINTF
		    fi
	    fi
	;;
    esac
fi
: check for fflush NULL behavior
case "$fflushNULL" in
'') 	set try -DTRY_FFLUSH_NULL $output
	if eval $compile; then
		$run ./try 2>/dev/null
		code="$?"
		$from try.out
		if $test -s try.out -a "X$code" = X42; then
			fflushNULL="`$cat try.out`"
		else
			if $test "X$code" != X42; then
				$cat >&4 <<EOM
(If this test failed, don't worry, we'll try another method shortly.)
EOM
			fi
		fi
	fi
	$rm -f core try.core core.try.*
	case "$fflushNULL" in
	x)	$cat >&4 <<EOM
Your fflush(NULL) works okay for output streams.
Let's see if it clobbers input pipes...
EOM
# As of mid-March 2000 all versions of Solaris appear to have a stdio
# bug that improperly flushes the input end of pipes.  So we avoid the
# autoflush on fork/system/exec support for now. :-(
$cat >tryp.c <<EOCP
#include <stdio.h>
int
main(int argc, char **argv)
{
    char buf[1024];
    int i;
    char *bp = buf;
    while (1) {
	while ((i = getc(stdin)) != -1
	       && (*bp++ = i) != '\n'
	       && bp < &buf[1024])
	/* DO NOTHING */ ;
	*bp = '\0';
	fprintf(stdout, "%s", buf);
	fflush(NULL);
	if (i == -1)
	    return 0;
	bp = buf;
    }
}
EOCP
		fflushNULL="$define"
		set tryp
		if eval $compile; then
		    $rm -f tryp.out
		    # Copy the .c file to the remote host ($to is an ssh-alike if targethost is set)
		    if $test "X$targethost" != X; then
			$to tryp.c
			$to tryp
			$run "cat tryp.c | ./tryp " 2>/dev/null > tryp.out
		    else
			$cat tryp.c | $run ./tryp   2>/dev/null > tryp.out
		    fi
		    if cmp tryp.c tryp.out >/dev/null 2>&1; then
		       $cat >&4 <<EOM
fflush(NULL) seems to behave okay with input streams.
EOM
			fflushNULL="$define"
		    else
			$cat >&4 <<EOM
Ouch, fflush(NULL) clobbers input pipes!  We will not use it.
EOM
			fflushNULL="$undef"
		    fi
		fi
		$rm -f core tryp.c tryp.core core.tryp.*
		;;
	'')	$cat >&4 <<EOM
Your fflush(NULL) isn't working (contrary to ANSI C).
EOM
		fflushNULL="$undef"
		;;
	*)	$cat >&4 <<EOM
Cannot figure out whether your fflush(NULL) works or not.
I'm assuming it doesn't (contrary to ANSI C).
EOM
		fflushNULL="$undef"
		;;
	esac
	;;
$define|true|[yY]*)
	fflushNULL="$define"
	;;
*)
	fflushNULL="$undef"
	;;
esac
: check explicit looping only if NULL did not work, and if the pipe
: bug does not show up on an explicit flush too
case "$fflushNULL" in
"$undef")
	$cat >tryp.c <<EOCP
#include <stdio.h>
int
main(int argc, char **argv)
{
    char buf[1024];
    int i;
    char *bp = buf;
    while (1) {
	while ((i = getc(stdin)) != -1
	       && (*bp++ = i) != '\n'
	       && bp < &buf[1024])
	/* DO NOTHING */ ;
	*bp = '\0';
	fprintf(stdout, "%s", buf);
	fflush(stdin);
	if (i == -1)
	    return 0;
	bp = buf;
    }
}
EOCP
	set tryp
	if eval $compile; then
	    $rm -f tryp.out
	    if $test "X$targethost" != X; then
		$to tryp.c
		$to tryp
		$run "cat tryp.c | ./tryp " 2>/dev/null > tryp.out
	    else
		$cat tryp.c | $run ./tryp   2>/dev/null > tryp.out
	    fi
	    if cmp tryp.c tryp.out >/dev/null 2>&1; then
	       $cat >&4 <<EOM
Good, at least fflush(stdin) seems to behave okay when stdin is a pipe.
EOM
		: now check for fflushall behaviour
		case "$fflushall" in
		'') 	set try -DTRY_FFLUSH_ALL $output
			if eval $compile; then
				$cat >&4 <<EOM
(Now testing the other method--but note that this also may fail.)
EOM
				$run ./try 2>/dev/null
				code=$?
				$from try.out
				if $test -s try.out -a "X$code" = X42; then
					fflushall="`$cat try.out`"
				fi
			fi
			$rm_try
			case "$fflushall" in
			x)	$cat >&4 <<EOM
Whew. Flushing explicitly all the stdio streams works.
EOM
				fflushall="$define"
				;;
			'')	$cat >&4 <<EOM
Sigh. Flushing explicitly all the stdio streams doesn't work.
EOM
				fflushall="$undef"
				;;
			*)	$cat >&4 <<EOM
Cannot figure out whether flushing stdio streams explicitly works or not.
I'm assuming it doesn't.
EOM
				fflushall="$undef"
				;;
			esac
			;;
		"$define"|true|[yY]*)
			fflushall="$define"
			;;
		*)
			fflushall="$undef"
			;;
		esac
	    else
		$cat >&4 <<EOM
All is futile.  Even fflush(stdin) clobbers input pipes!
EOM
		fflushall="$undef"
	    fi
	else
	    fflushall="$undef"
	fi
	$rm -f core tryp.c tryp.core core.tryp.*
	;;
*)	fflushall="$undef"
	;;
esac

case "$fflushNULL$fflushall" in
undefundef)
	$cat <<EOM
OK, I give up.  I cannot figure out how to flush pending stdio output.
We won't be flushing handles at all before fork/exec/popen.
EOM
	;;
esac
$rm_try tryp

: Store the full pathname to the ar program for use in the C program
: Respect a hint or command line value for full_ar.
case "$full_ar" in
'') full_ar=$ar ;;
esac

: Store the full pathname to the sed program for use in the C program
full_sed=$sed

: see what type gids are declared as in the kernel
echo " "
echo "Looking for the type for group ids returned by getgid()."
set gid_t gidtype xxx stdio.h sys/types.h
eval $typedef
case "$gidtype" in
xxx)
	xxx=`./findhdr sys/user.h`
	set `grep 'groups\[NGROUPS\];' "$xxx" 2>/dev/null` unsigned short
	case $1 in
	unsigned) dflt="$1 $2" ;;
	*) dflt="$1" ;;
	esac
	;;
*) dflt="$gidtype";;
esac
case "$gidtype" in
gid_t) echo "gid_t found." ;;
*)	rp="What is the type for group ids returned by getgid()?"
	. ./myread
	gidtype="$ans"
	;;
esac

: Check the size of GID
echo " "
case "$gidtype" in
*_t) zzz="$gidtype"	;;
*)   zzz="gid"		;;
esac
echo "Checking the size of $zzz..." >&4
cat > try.c <<EOCP
#include <sys/types.h>
#include <stdio.h>
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
int main() {
    printf("%d\n", (int)sizeof($gidtype));
    exit(0);
}
EOCP
set try
if eval $compile_ok; then
	yyy=`$run ./try`
	case "$yyy" in
	'')	gidsize=4
		echo "(I can't execute the test program--guessing $gidsize.)" >&4
		;;
	*)	gidsize=$yyy
		echo "Your $zzz is $gidsize bytes long."
		;;
	esac
else
	gidsize=4
	echo "(I can't compile the test program--guessing $gidsize.)" >&4
fi


: Check if GID is signed
echo " "
case "$gidtype" in
*_t) zzz="$gidtype"	;;
*)   zzz="gid"		;;
esac
echo "Checking the sign of $zzz..." >&4
cat > try.c <<EOCP
#include <sys/types.h>
#include <stdio.h>
int main() {
	$gidtype foo = -1;
	if (foo < 0)
		printf("-1\n");
	else
		printf("1\n");
}
EOCP
set try
if eval $compile; then
	yyy=`$run ./try`
	case "$yyy" in
	'')	gidsign=1
		echo "(I can't execute the test program--guessing unsigned.)" >&4
		;;
	*)	gidsign=$yyy
		case "$gidsign" in
		 1) echo "Your $zzz is unsigned." ;;
		-1) echo "Your $zzz is signed."   ;;
		esac
		;;
	esac
else
	gidsign=1
	echo "(I can't compile the test program--guessing unsigned.)" >&4
fi


: Check 64bit sizes
echo " "

if $test X"$quadtype" != X; then

echo "Checking how to print 64-bit integers..." >&4

if $test X"$sPRId64" = X -a X"$quadtype" = Xint; then
	$cat >try.c <<'EOCP'
#include <sys/types.h>
#include <stdio.h>
int main() {
  int q = 12345678901;
  printf("%ld\n", q);
}
EOCP
	set try
	if eval $compile; then
		yyy=`$run ./try`
		case "$yyy" in
		12345678901)
			sPRId64='"d"'; sPRIi64='"i"'; sPRIu64='"u"';
                	sPRIo64='"o"'; sPRIx64='"x"'; sPRIXU64='"X"';
			echo "We will use %d."
			;;
		esac
	fi
fi

if $test X"$sPRId64" = X -a X"$quadtype" = Xlong; then
	$cat >try.c <<'EOCP'
#include <sys/types.h>
#include <stdio.h>
int main() {
  long q = 12345678901;
  printf("%ld\n", q);
}
EOCP
	set try
	if eval $compile; then
		yyy=`$run ./try`
		case "$yyy" in
		12345678901)
			sPRId64='"ld"'; sPRIi64='"li"'; sPRIu64='"lu"';
                	sPRIo64='"lo"'; sPRIx64='"lx"'; sPRIXU64='"lX"';
			echo "We will use %ld."
			;;
		esac
	fi
fi

if $test X"$sPRId64" = X -a X"$i_inttypes" = X"$define" -a X"$quadtype" = Xint64_t; then
	$cat >try.c <<'EOCP'
#include <sys/types.h>
#include <inttypes.h>
#include <stdio.h>
int main() {
  int64_t q = 12345678901;
  printf("%" PRId64 "\n", q);
}
EOCP
	set try
	if eval $compile; then
		yyy=`$run ./try`
		case "$yyy" in
		12345678901)
			sPRId64=PRId64; sPRIi64=PRIi64; sPRIu64=PRIu64;
                	sPRIo64=PRIo64; sPRIx64=PRIx64; sPRIXU64=PRIXU64;
			echo "We will use the C9X style."
			;;
		esac
	fi
fi

if $test X"$sPRId64" = X -a X"$quadtype" != X; then
	$cat >try.c <<EOCP
#include <sys/types.h>
#include <stdio.h>
int main() {
  $quadtype q = 12345678901;
  printf("%Ld\n", q);
}
EOCP
	set try
	if eval $compile; then
		yyy=`$run ./try`
		case "$yyy" in
		12345678901)
			sPRId64='"Ld"'; sPRIi64='"Li"'; sPRIu64='"Lu"';
                	sPRIo64='"Lo"'; sPRIx64='"Lx"'; sPRIXU64='"LX"';
			echo "We will use %Ld."
			;;
		esac
	fi
fi

if $test X"$sPRId64" = X -a X"$quadtype" = X"long long"; then
	$cat >try.c <<'EOCP'
#include <sys/types.h>
#include <stdio.h>
int main() {
  long long q = 12345678901LL; /* AIX cc requires the LL suffix. */
  printf("%lld\n", q);
}
EOCP
	set try
	if eval $compile; then
		yyy=`$run ./try`
		case "$yyy" in
		12345678901)
			sPRId64='"lld"'; sPRIi64='"lli"'; sPRIu64='"llu"';
                	sPRIo64='"llo"'; sPRIx64='"llx"'; sPRIXU64='"llX"';
			echo "We will use the %lld style."
			;;
		esac
	fi
fi

if $test X"$sPRId64" = X -a X"$quadtype" != X; then
	$cat >try.c <<EOCP
#include <sys/types.h>
#include <stdio.h>
int main() {
  $quadtype q = 12345678901;
  printf("%qd\n", q);
}
EOCP
	set try
	if eval $compile; then
		yyy=`$run ./try`
		case "$yyy" in
		12345678901)
			sPRId64='"qd"'; sPRIi64='"qi"'; sPRIu64='"qu"';
                	sPRIo64='"qo"'; sPRIx64='"qx"'; sPRIXU64='"qX"';
			echo "We will use %qd."
			;;
		esac
	fi
fi

if $test X"$sPRId64" = X; then
	echo "Cannot figure out how to print 64-bit integers." >&4
fi
$rm_try

fi

case "$sPRId64" in
'')	d_PRId64="$undef"; d_PRIi64="$undef"; d_PRIu64="$undef";
	d_PRIo64="$undef"; d_PRIx64="$undef"; d_PRIXU64="$undef";
	;;
*)	d_PRId64="$define"; d_PRIi64="$define"; d_PRIu64="$define";
	d_PRIo64="$define"; d_PRIx64="$define"; d_PRIXU64="$define";
	;;
esac

: Check format strings for internal types
echo " "
$echo "Checking the format strings to be used for Perl's internal types..." >&4

if $test X"$ivsize" = X8; then
	ivdformat="$sPRId64"
	uvuformat="$sPRIu64"
	uvoformat="$sPRIo64"
	uvxformat="$sPRIx64"
	uvXUformat="$sPRIXU64"
else
	if $test X"$ivsize" = X"$longsize"; then
		ivdformat='"ld"'
		uvuformat='"lu"'
		uvoformat='"lo"'
		uvxformat='"lx"'
		uvXUformat='"lX"'
	else
		if $test X"$ivsize" = X"$intsize"; then
			ivdformat='"d"'
			uvuformat='"u"'
			uvoformat='"o"'
			uvxformat='"x"'
			uvXUformat='"X"'
		else
			: far out
			if $test X"$ivsize" = X"$shortsize"; then
				ivdformat='"hd"'
				uvuformat='"hu"'
				uvoformat='"ho"'
				uvxformat='"hx"'
				uvXUformat='"hX"'
			fi
		fi
	fi
fi

if $test X"$usequadmath" = X"$define"; then
    nveformat='"Qe"'
    nvfformat='"Qf"'
    nvgformat='"Qg"'
    nvEUformat='"QE"'
    nvFUformat='"QF"'
    nvGUformat='"QG"'
else
    if $test X"$uselongdouble" = X"$define" -a X"$d_longdbl" = X"$define" -a X"$d_PRIgldbl" = X"$define"; then
	nveformat="$sPRIeldbl"
	nvfformat="$sPRIfldbl"
	nvgformat="$sPRIgldbl"
	nvEUformat="$sPRIEUldbl"
	nvFUformat="$sPRIFUldbl"
	nvGUformat="$sPRIGUldbl"
    else
	nveformat='"e"'
	nvfformat='"f"'
	nvgformat='"g"'
	nvEUformat='"E"'
	nvFUformat='"F"'
	nvGUformat='"G"'
    fi
fi

case "$ivdformat" in
'') echo "$0: Fatal: failed to find format strings, cannot continue." >&4
    exit 1
    ;;
esac

: Check format string for GID

echo " "
$echo "Checking the format string to be used for gids..." >&4

case "$gidsign" in
-1)	if $test X"$gidsize" = X"$ivsize"; then
		gidformat="$ivdformat"
	else
		if $test X"$gidsize" = X"$longsize"; then
			gidformat='"ld"'
		else
			if $test X"$gidsize" = X"$intsize"; then
				gidformat='"d"'
			else
				if $test X"$gidsize" = X"$shortsize"; then
					gidformat='"hd"'
				fi
			fi
		fi
	fi
	;;
*)	if $test X"$gidsize" = X"$uvsize"; then
		gidformat="$uvuformat"
	else
		if $test X"$gidsize" = X"$longsize"; then
			gidformat='"lu"'
		else
			if $test X"$gidsize" = X"$intsize"; then
				gidformat='"u"'
			else
				if $test X"$gidsize" = X"$shortsize"; then
					gidformat='"hu"'
				fi
			fi
		fi
	fi
	;;
esac

: see if getgroups exists
set getgroups d_getgrps
eval $inlibc

: see if setgroups exists
set setgroups d_setgrps
eval $inlibc

: Find type of 2nd arg to 'getgroups()' and 'setgroups()'
echo " "
case "$d_getgrps$d_setgrps" in
*define*)
	case "$groupstype" in
	'') dflt="$gidtype" ;;
	*)  dflt="$groupstype" ;;
	esac
	$cat <<EOM
What type of pointer is the second argument to getgroups() and setgroups()?
Usually this is the same as group ids, $gidtype, but not always.

EOM
	rp='What type pointer is the second argument to getgroups() and setgroups()?'
	. ./myread
	groupstype="$ans"
	;;
*)  groupstype="$gidtype";;
esac

: check whether make sets MAKE
echo " "
echo "Checking if your $make program sets \$(MAKE)..." >&4
case "$make_set_make" in
'')
	$sed 's/^X //' > testmake.mak << 'EOF'
Xall:
X 	@@echo 'maketemp="$(MAKE)"'
EOF
	case "`$make -f testmake.mak 2>/dev/null`" in
	*maketemp=*) make_set_make='#' ;;
	*)	make_set_make="MAKE=$make" ;;
	esac
	$rm -f testmake.mak
	;;
esac
case "$make_set_make" in
'#') echo "Yup, it does.";;
*) echo "Nope, it doesn't.";;
esac

: see what type is used for mode_t
rp="What is the type used for file modes for system calls (e.g. fchmod())?"
set mode_t modetype int stdio.h sys/types.h
eval $typedef_ask

: see if we need va_copy
echo " "
case "$i_stdarg" in
"$define")
	$cat >try.c <<EOCP
#include <stdarg.h>
#include <stdio.h>
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
#include <signal.h>

int
ivfprintf(FILE *f, const char *fmt, va_list *valp)
{
  return vfprintf(f, fmt, *valp);
}

int
myvfprintf(FILE *f, const  char *fmt, va_list val)
{
  return ivfprintf(f, fmt, &val);
}

int
myprintf(char *fmt, ...)
{
  va_list val;
  va_start(val, fmt);
  return myvfprintf(stdout, fmt, val);
}

int
main(int ac, char **av)
{
  signal(SIGSEGV, exit);

  myprintf("%s%cs all right, then\n", "that", '\'');
  exit(0);
}
EOCP
	set try
	if eval $compile && $run ./try 2>&1 >/dev/null; then
		case "`$run ./try`" in
		"that's all right, then")
			okay=yes
			;;
		esac
	fi
	case "$okay" in
	yes)	echo "It seems that you don't need va_copy()." >&4
		need_va_copy="$undef"
		;;
	*)	echo "It seems that va_copy() or similar will be needed." >&4
		need_va_copy="$define"
		;;
	esac
	$rm_try
	;;
*)	echo "You don't have <stdarg.h>, not checking for va_copy()." >&4
	need_va_copy="$undef"
	;;
esac

: see what type is used for size_t
rp="What is the type used for the length parameter for string functions?"
set size_t sizetype 'unsigned int' stdio.h sys/types.h
eval $typedef_ask

: check for type of arguments to gethostbyaddr.
if test "X$netdb_host_type" = X -o "X$netdb_hlen_type" = X; then
	case "$d_gethbyaddr" in
	$define)
		$cat <<EOM

Checking to see what type of arguments are accepted by gethostbyaddr().
EOM
		hdrs="$define sys/types.h
			$d_socket sys/socket.h
			$i_niin netinet/in.h
			$i_netdb netdb.h
			$i_unistd unistd.h"
		: The first arg can 'char *' or 'void *'
		: The second arg is some of integral type
		for xxx in in_addr_t 'const void *' 'const char *' 'void *' 'char *'; do
			for yyy in size_t long int; do
				case "$netdb_host_type" in
				'')	try="$extern_C struct hostent *gethostbyaddr($xxx, $yyy, int);"
					if ./protochk "$try" $hdrs; then
						echo "Your system accepts $xxx for the first arg."
						echo "...and $yyy for the second arg."
						netdb_host_type="$xxx"
						netdb_hlen_type="$yyy"
					fi
					;;
				esac
			done
		done
		: In case none of those worked, prompt the user.
		case "$netdb_host_type" in
		'')	rp='What is the type for the 1st argument to gethostbyaddr?'
			dflt='char *'
			. ./myread
			netdb_host_type=$ans
			rp='What is the type for the 2nd argument to gethostbyaddr?'
			dflt="$sizetype"
			. ./myread
			netdb_hlen_type=$ans
			;;
		esac
		;;
	*)	: no gethostbyaddr, so pick harmless defaults
		netdb_host_type='char *'
		netdb_hlen_type="$sizetype"
		;;
	esac
	# Remove the "const" if needed. -- but then we'll have a
	# prototype clash!
	# netdb_host_type=`echo "$netdb_host_type" | sed 's/^const //'`
fi

: check for type of argument to gethostbyname.
if test "X$netdb_name_type" = X ; then
	case "$d_gethbyname" in
	$define)
		$cat <<EOM

Checking to see what type of argument is accepted by gethostbyname().
EOM
		hdrs="$define sys/types.h
			$d_socket sys/socket.h
			$i_niin netinet/in.h
			$i_netdb netdb.h
			$i_unistd unistd.h"
		for xxx in "const char *" "char *"; do
			case "$netdb_name_type" in
			'')	try="$extern_C struct hostent *gethostbyname($xxx);"
				if ./protochk "$try" $hdrs; then
					echo "Your system accepts $xxx."
					netdb_name_type="$xxx"
				fi
				;;
			esac
		done
		: In case none of those worked, prompt the user.
		case "$netdb_name_type" in
		'')	rp='What is the type for the 1st argument to gethostbyname?'
			dflt='char *'
			. ./myread
			netdb_name_type=$ans
			;;
		esac
		;;
	*)	: no gethostbyname, so pick harmless default
		netdb_name_type='char *'
		;;
	esac
fi

: check for type of 1st argument to getnetbyaddr.
if test "X$netdb_net_type" = X ; then
	case "$d_getnbyaddr" in
	$define)
		$cat <<EOM

Checking to see what type of 1st argument is accepted by getnetbyaddr().
EOM
		hdrs="$define sys/types.h
			$d_socket sys/socket.h
			$i_niin netinet/in.h
			$i_netdb netdb.h
			$i_unistd unistd.h"
		for xxx in in_addr_t "unsigned long" long "unsigned int" int; do
			case "$netdb_net_type" in
			'')	try="$extern_C struct netent *getnetbyaddr($xxx, int);"
				if ./protochk "$try" $hdrs; then
					echo "Your system accepts $xxx."
					netdb_net_type="$xxx"
				fi
				;;
			esac
		done
		: In case none of those worked, prompt the user.
		case "$netdb_net_type" in
		'')	rp='What is the type for the 1st argument to getnetbyaddr?'
			dflt='long'
			. ./myread
			netdb_net_type=$ans
			;;
		esac
		;;
	*)	: no getnetbyaddr, so pick harmless default
		netdb_net_type='long'
		;;
	esac
fi
: locate the preferred pager for this system
fn=f/
case "$pager" in
'')
	dflt=''
	case "$pg" in
	/*) dflt=$pg;;
	[a-zA-Z]:/*) dflt=$pg;;
	esac
	case "$more" in
	/*) dflt=$more;;
	[a-zA-Z]:/*) dflt=$more;;
	esac
	case "$less" in
	/*) dflt=$less;;
	[a-zA-Z]:/*) dflt=$less;;
	esac
	case "$dflt" in
	'') dflt=/usr/ucb/more;;
	esac
	;;
*)	dflt="$pager"
	;;
esac
fn="f/($dflt)"
echo " "
rp='What pager is used on your system?'
. ./getfile
pager="$ans"

: see if ar generates random libraries by itself
echo " "
echo "Checking how to generate random libraries on your machine..." >&4
echo 'int bar1() { return bar2(); }' > bar1.c
echo 'int bar2() { return 2; }' > bar2.c
$cat > foo.c <<EOP
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
int main() { printf("%d\n", bar1()); exit(0); }
EOP
$cc $ccflags -c bar1.c >/dev/null 2>&1
$cc $ccflags -c bar2.c >/dev/null 2>&1
$cc $ccflags -c foo.c >/dev/null 2>&1
$ar rc bar$_a bar2$_o bar1$_o >/dev/null 2>&1
if $cc -o foobar $ccflags $ldflags foo$_o bar$_a $libs > /dev/null 2>&1 &&
	$run ./foobar >/dev/null 2>&1; then
	echo "$ar appears to generate random libraries itself."
	orderlib=false
	if [ "X$ranlib" = "X" ]; then
	    ranlib=":"
	fi
elif $ar s bar$_a >/dev/null 2>&1 &&
	$cc -o foobar $ccflags $ldflags foo$_o bar$_a $libs > /dev/null 2>&1 &&
	$run ./foobar >/dev/null 2>&1; then
		echo "a table of contents needs to be added with '$ar s'."
		orderlib=false
		ranlib="$ar s"
elif $ar ts bar$_a >/dev/null 2>&1 &&
	$cc -o foobar $ccflags $ldflags foo$_o bar$_a $libs > /dev/null 2>&1 &&
	$run ./foobar >/dev/null 2>&1; then
		echo "a table of contents needs to be added with '$ar ts'."
		orderlib=false
		ranlib="$ar ts"
else
	case "$ranlib" in
	:) ranlib='';;
	'')
		ranlib=`./loc ranlib X /usr/bin /bin /usr/local/bin`
		$test -f $ranlib || ranlib=''
		;;
	esac
	if $test -n "$ranlib"; then
		echo "your system has '$ranlib'; we'll use that."
		orderlib=false
	else
		echo "your system doesn't seem to support random libraries"
		echo "so we'll use lorder and tsort to order the libraries."
		orderlib=true
		ranlib=":"
	fi
fi
$rm -f foo* bar*

: see if this is a values.h system
set values.h i_values
eval $inhdr

: Check the max offset that gmtime and localtime accept
echo "Checking max offsets that gmtime () accepts"

case $i_values in
    define) yyy="#include <values.h>" ;;
    *)      yyy="" ;;
    esac

case "$sGMTIME_min/$sGMTIME_max" in
    0/0|/)
	$cat >try.c <<EOCP
#include <sys/types.h>
#include <stdio.h>
#include <time.h>
$yyy

int i;
struct tm *tmp;
time_t pt;

void gm_check (time_t t, int min_year, int max_year)
{
    tmp = gmtime (&t);
    if ( tmp == NULL ||
	/* Check tm_year overflow */
	 tmp->tm_year < min_year || tmp->tm_year > max_year)
	tmp = NULL;
    else
	pt = t;
    } /* gm_check */

int check_max ()
{
    tmp = NULL;
    pt  = 0;
#ifdef MAXLONG
    gm_check (MAXLONG, 69, 0x7fffffff);
#endif
    if (tmp == NULL || tmp->tm_year < 0) {
	for (i = 63; i >= 0; i--) {
	    time_t x = pt | ((time_t)1 << i);
	    if (x < 0 || x < pt) continue;
	    gm_check (x, 69, 0x7fffffff);
	    }
	}
    printf ("sGMTIME_max=%ld\n", pt);
    return (0);
    } /* check_max */

int check_min ()
{
    tmp = NULL;
    pt  = 0;
#ifdef MINLONG
    gm_check (MINLONG, -1900, 70);
#endif
    if (tmp == NULL) {
	for (i = 36; i >= 0; i--) {
	    time_t x = pt - ((time_t)1 << i);
	    if (x > 0) continue;
	    gm_check (x, -1900, 70);
	    }
	}
    printf ("sGMTIME_min=%ld\n", pt);
    return (0);
    } /* check_min */

int main (int argc, char *argv[])
{
    /* fprintf (stderr, "Sizeof time_t = %ld\n", sizeof (time_t)); */
    check_max ();
    check_min ();
    return (0);
    } /* main */
EOCP
	set try
	if eval $compile; then
	    eval `$run ./try 2>/dev/null`
	else
	    echo "Cannot determine sGMTIME_max and sGMTIME_min." >&4
	    fi
	$rm_try
	;;
    esac

echo "Checking max offsets that localtime () accepts"

case "$sLOCALTIME_min/$sLOCALTIME_max" in
    0/0|/)
	$cat >try.c <<EOCP
#include <sys/types.h>
#include <stdio.h>
#include <time.h>
$yyy

int i;
struct tm *tmp;
time_t pt;

void local_check (time_t t, int min_year, int max_year)
{
    if (sizeof (time_t) > 4 && t > 0x7ffffffffffff000LL)
	tmp = NULL;
    else
	tmp = localtime (&t);
    if ( tmp == NULL ||
	/* Check tm_year overflow */
	 tmp->tm_year < min_year || tmp->tm_year > max_year)
	tmp = NULL;
    else
	pt = t;
    } /* local_check */

int check_max ()
{
    tmp = NULL;
    pt  = 0;
#ifdef MAXLONG
    local_check (MAXLONG, 69, 0x7fffffff);
#endif
    if (tmp == NULL || tmp->tm_year < 0) {
	for (i = 63; i >= 0; i--) {
	    time_t x = pt | ((time_t)1 << i);
	    if (x < 0 || x < pt) continue;
	    local_check (x, 69, 0x7fffffff);
	    }
	}
    printf ("sLOCALTIME_max=%ld\n", pt);
    return (0);
   } /* check_max */

int check_min ()
{
    tmp = NULL;
    pt  = 0;
#ifdef MINLONG
    local_check (MINLONG, -1900, 70);
#endif
    if (tmp == NULL) {
	for (i = 36; i >= 0; i--) {
	    time_t x = pt - ((time_t)1 << i);
	    if (x > 0) continue;
	    local_check (x, -1900, 70);
	    }
	}
    printf ("sLOCALTIME_min=%ld\n", pt);
    return (0);
    } /* check_min */

int main (int argc, char *argv[])
{
    check_max ();
    check_min ();
    return (0);
    } /* main */
EOCP
	set try
	if eval $compile; then
	    eval `$run ./try 2>/dev/null`
	else
	    echo "Cannot determine sLOCALTIME_max and sLOCALTIME_min." >&4
	    fi
	$rm_try
	;;
    esac

: check for type of arguments to select.
case "$selecttype" in
'') case "$d_select" in
	$define)
		echo " "
		$cat <<EOM
Checking to see what type of arguments are accepted by select().
EOM
		hdrs="$define sys/types.h
			$i_systime sys/time.h
			$i_sysselct sys/select.h
			$d_socket sys/socket.h"
		: The first arg can be int, unsigned, or size_t
		: The last arg may or may not be 'const'
		val=''
		: void pointer has been seen but using that
		: breaks the selectminbits test
		for xxx in 'fd_set *' 'int *'; do
			for nfd in 'int' 'size_t' 'unsigned long' 'unsigned' ; do
				for tmo in 'struct timeval *' 'const struct timeval *'; do
					case "$val" in
					'')	try="$extern_C select _(($nfd, $xxx, $xxx, $xxx, $tmo));"
						if ./protochk "$try" $hdrs; then
							echo "Your system accepts $xxx."
							val="$xxx"
						fi
						;;
					esac
				done
			done
		done
		case "$val" in
		'')	rp='What is the type for the 2nd, 3rd, and 4th arguments to select?'
			case "$d_fd_set" in
				$define) dflt="fd_set *" ;;
				*)		dflt="int *" ;;
			esac
			. ./myread
			val=$ans
			;;
		esac
		selecttype="$val"
		;;
	*)	: no select, so pick a harmless default
		selecttype='int *'
		;;
	esac
	;;
esac

: check for the select 'width'
case "$selectminbits" in
'') safebits=`expr $ptrsize \* 8`
    case "$d_select" in
	$define)
		$cat <<EOM

Checking to see on how many bits at a time your select() operates...
EOM
		$cat >try.c <<EOCP
#include <sys/types.h>
#$i_time I_TIME
#$i_systime I_SYS_TIME
#$i_systimek I_SYS_TIME_KERNEL
#ifdef I_TIME
#   include <time.h>
#endif
#ifdef I_SYS_TIME
#   ifdef I_SYS_TIME_KERNEL
#	define KERNEL
#   endif
#   include <sys/time.h>
#   ifdef I_SYS_TIME_KERNEL
#	undef KERNEL
#   endif
#endif
#$i_sysselct I_SYS_SELECT
#ifdef I_SYS_SELECT
#include <sys/select.h>
#endif
#$d_socket HAS_SOCKET
#ifdef HAS_SOCKET
#   include <sys/socket.h> /* Might include <sys/bsdtypes.h> */
#endif
#include <stdio.h>
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
$selecttype b;
#define S sizeof(*(b))
#define MINBITS	64
#define NBYTES (S * 8 > MINBITS ? S : MINBITS/8)
#define NBITS  (NBYTES * 8)
int main() {
    char *s = (char *)malloc(NBYTES);
    struct timeval t;
    int i;
    FILE* fp;
    int fd;

    if (!s)
	exit(1);
    fclose(stdin);
    fp = fopen("try.c", "r");
    if (fp == 0)
      exit(2);
    fd = fileno(fp);
    if (fd < 0)
      exit(3);
    b = ($selecttype)s;
    for (i = 0; i < NBITS; i++)
	FD_SET(i, b);
    t.tv_sec  = 0;
    t.tv_usec = 0;
    select(fd + 1, b, 0, 0, &t);
    for (i = NBITS - 1; i > fd && FD_ISSET(i, b); i--);
    free(s);
    printf("%d\n", i + 1);
    return 0;
}
EOCP
		set try
		if eval $compile_ok; then
			selectminbits=`$run ./try 2>/dev/null`
			case "$selectminbits" in
			'')	cat >&4 <<EOM
Cannot figure out on how many bits at a time your select() operates.
I'll play safe and guess it is $safebits bits.
EOM
				selectminbits=$safebits
				bits="$safebits bits"
				;;
			1)	bits="1 bit" ;;
			*)	bits="$selectminbits bits" ;;
			esac
			echo "Your select() operates on $bits at a time." >&4
		else
			rp='What is the minimum number of bits your select() operates on?'
			case "$byteorder" in
			12345678)	dflt=64 ;;
			1234)		dflt=32 ;;
			*)		dflt=1	;;
			esac
			. ./myread
			val=$ans
			selectminbits="$val"
		fi
		$rm_try
		;;
	*)	: no select, so pick a harmless default
		selectminbits=$safebits
		;;
	esac
	;;
esac

: Trace out the files included by signal.h, then look for SIGxxx names.
case "$sig_num_init" in
'')
if [ "X$fieldn" = X ]; then
	: Just make some guesses.  We check them later.
	xxx="$sysroot/usr/include/signal.h $sysroot/usr/include/sys/signal.h"
else
	xxx=`echo '#include <signal.h>' |
	$cppstdin $cppminus $cppflags 2>/dev/null |
	$grep '^[ 	]*#.*include' |
	$awk "{print \\$$fieldn}" | $sed 's!"!!g' |\
		$sed 's!\\\\\\\\!/!g' | $sort | $uniq`
fi
xxxfiles=''
for xx in $xxx /dev/null ; do
	$test -f "$xx" && xxxfiles="$xxxfiles $xx"
done
case "$xxxfiles" in
'')	xxxfiles=`./findhdr signal.h` ;;
esac
xxx=`awk '
$1 ~ /^#define$/ && $2 ~ /^SIG[A-Z0-9]*$/ && $2 !~ /SIGARRAYSIZE/ && $2 !~ /SIGSTKSIZE/ && $2 !~ /SIGSTKSZ/ && $3 !~ /void/ {
	print substr($2, 4, 20)
}
$1 == "#" && $2 ~ /^define$/ && $3 ~ /^SIG[A-Z0-9]*$/ && $3 !~ /SIGARRAYSIZE/ && $4 !~ /void/ {
	print substr($3, 4, 20)
}' $xxxfiles`
: Append some common names just in case the awk scan failed.
xxx="$xxx ABRT ALRM BUS CANCEL CHLD CLD CONT DIL EMT FPE"
xxx="$xxx FREEZE HUP ILL INT IO IOT KILL LOST LWP PHONE"
xxx="$xxx PIPE POLL PROF PWR QUIT RTMAX RTMIN SEGV STKFLT STOP"
xxx="$xxx SYS TERM THAW TRAP TSTP TTIN TTOU URG USR1 USR2"
xxx="$xxx USR3 USR4 VTALRM WAITING WINCH WIND WINDOW XCPU XFSZ"

: generate a few handy files for later
$cat > signal.c <<EOCP
#include <sys/types.h>
#include <signal.h>
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
#include <stdio.h>
int main() {

/* Strange style to avoid deeply-nested #if/#else/#endif */
#ifndef NSIG
#  ifdef _NSIG
#    define NSIG (_NSIG)
#  endif
#endif

#ifndef NSIG
#  ifdef SIGMAX
#    define NSIG (SIGMAX+1)
#  endif
#endif

#ifndef NSIG
#  ifdef SIG_MAX
#    define NSIG (SIG_MAX+1)
#  endif
#endif

#ifndef NSIG
#  ifdef _SIG_MAX
#    define NSIG (_SIG_MAX+1)
#  endif
#endif

#ifndef NSIG
#  ifdef MAXSIG
#    define NSIG (MAXSIG+1)
#  endif
#endif

#ifndef NSIG
#  ifdef MAX_SIG
#    define NSIG (MAX_SIG+1)
#  endif
#endif

#ifndef NSIG
#  ifdef SIGARRAYSIZE
#    define NSIG SIGARRAYSIZE /* Assume ary[SIGARRAYSIZE] */
#  endif
#endif

#ifndef NSIG
#  ifdef _sys_nsig
#    define NSIG (_sys_nsig) /* Solaris 2.5 */
#  endif
#endif

/* Default to some arbitrary number that's big enough to get most
   of the common signals.
*/
#ifndef NSIG
#    define NSIG 50
#endif

printf("NSIG %d\n", NSIG);

#ifndef JUST_NSIG

EOCP

echo $xxx | $tr ' ' $trnl | $sort | $uniq | $awk '
{
	printf "#ifdef SIG"; printf $1; printf "\n"
	printf "printf(\""; printf $1; printf " %%d\\n\",SIG";
	printf $1; printf ");\n"
	printf "#endif\n"
}
END {
	printf "#endif /* JUST_NSIG */\n";
	printf "exit(0);\n}\n";
}
' >>signal.c
$cat >signal.awk <<'EOP'
BEGIN { ndups = 0 }
$1 ~ /^NSIG$/ { nsig = $2 }
($1 !~ /^NSIG$/) && (NF == 2) && ($2 ~ /^[0-9][0-9]*$/) {
    if ($2 > maxsig) { maxsig = $2 }
    if (sig_name[$2]) {
	dup_name[ndups] = $1
	dup_num[ndups] = $2
	ndups++
    }
    else {
	sig_name[$2] = $1
	sig_num[$2] = $2
    }
}
END {
    if (nsig == 0) {
    	nsig = maxsig + 1
    }
    printf("NSIG %d\n", nsig);
    for (n = 1; n < nsig; n++) {
 	if (sig_name[n]) {
 	    printf("%s %d\n", sig_name[n], sig_num[n])
	}
 	else {
 	    printf("NUM%d %d\n", n, n)
 	}
    }
    for (n = 0; n < ndups; n++) {
 	printf("%s %d\n", dup_name[n], dup_num[n])
    }
}
EOP
$cat >signal_cmd <<EOS
$startsh
if $test -s signal.lst; then
    echo "Using your existing signal.lst file"
	exit 0
fi
xxx="$xxx"
EOS
$cat >>signal_cmd <<'EOS'

set signal
if eval $compile_ok; then
	$run ./signal$_exe | ($sort -n -k 2 2>/dev/null || $sort -n +1) |\
		$uniq | $awk -f signal.awk >signal.lst
else
	echo "(I can't seem be able to compile the whole test program)" >&4
	echo "(I'll try it in little pieces.)" >&4
	set signal -DJUST_NSIG
	if eval $compile_ok; then
		$run ./signal$_exe > signal.nsg
		$cat signal.nsg
	else
		echo "I can't seem to figure out how many signals you have." >&4
		echo "Guessing 50." >&4
		echo 'NSIG 50' > signal.nsg
	fi
	: Now look at all the signal names, one at a time.
	for xx in `echo $xxx | $tr ' ' $trnl | $sort | $uniq`; do
		$cat > signal.c <<EOCP
#include <sys/types.h>
#include <signal.h>
#include <stdio.h>
int main() {
printf("$xx %d\n", SIG${xx});
return 0;
}
EOCP
		set signal
		if eval $compile; then
			echo "SIG${xx} found."
			$run ./signal$_exe  >> signal.ls1
		else
			echo "SIG${xx} NOT found."
		fi
	done
	if $test -s signal.ls1; then
		$cat signal.nsg signal.ls1 |
			$sort -n | $uniq | $awk -f signal.awk >signal.lst
	fi

fi
if $test -s signal.lst; then
	:
else
	echo "(AAK! I can't compile the test programs -- Guessing)" >&4
	echo 'kill -l' >signal
	set X `csh -f <signal`
	$rm -f signal
	shift
	case $# in
	0) set HUP INT QUIT ILL TRAP ABRT EMT FPE KILL BUS SEGV SYS PIPE ALRM TERM;;
	esac
	echo $@@ | $tr ' ' $trnl | \
 	    $awk '{ printf "%s %d\n", $1, ++s; }
 		  END { printf "NSIG %d\n", ++s }' >signal.lst
fi
$rm -f signal.c signal$_exe signal$_o signal.nsg signal.ls1
EOS
chmod a+x signal_cmd
$eunicefix signal_cmd
;;
esac

: generate list of signal names
case "$sig_num_init" in
'')
echo " "
case "$sig_name_init" in
'') doinit=yes ;;
*)  case "$sig_num_init" in
    ''|*,*) doinit=yes ;;
    esac ;;
esac
case "$doinit" in
yes)
	echo "Generating a list of signal names and numbers..." >&4
	. ./signal_cmd
 	sig_count=`$awk '/^NSIG/ { printf "%d", $2 }' signal.lst`
 	sig_name=`$awk 'BEGIN { printf "ZERO " }
 			!/^NSIG/ { printf "%s ", $1 }' signal.lst`
 	sig_num=`$awk  'BEGIN { printf "0 " }
 			!/^NSIG/ { printf "%d ", $2 }' signal.lst`
 	sig_name_init=`$awk 'BEGIN	{ printf "\"ZERO\", " }
 			     !/^NSIG/	{ printf "\"%s\", ", $1 }
 			     END	{ printf "0\n" }' signal.lst`
 	sig_num_init=`$awk  'BEGIN	{ printf "0, " }
 			     !/^NSIG/	{ printf "%d, ", $2}
 			     END	{ printf "0\n"}' signal.lst`
	;;
esac
echo "The following $sig_count signals are available:"
echo " "
echo $sig_name | $awk \
'BEGIN { linelen = 0 }
{
	for (i = 1; i <= NF; i++) {
		name = "SIG" $i " "
		linelen = linelen + length(name)
		if (linelen > 70) {
			printf "\n"
			linelen = length(name)
		}
		printf "%s", name
	}
	printf "\n"
}'
sig_size=`echo $sig_name | awk '{print NF}'`
$rm -f signal signal.c signal.awk signal.lst signal_cmd
;;
esac

: Check size of size
echo " "
case "$sizetype" in
*_t) zzz="$sizetype"	;;
*)   zzz="filesize"	;;
esac
echo "Checking the size of $zzz..." >&4
cat > try.c <<EOCP
#include <sys/types.h>
#include <stdio.h>
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
int main() {
    printf("%d\n", (int)sizeof($sizetype));
    exit(0);
}
EOCP
set try
if eval $compile_ok; then
	yyy=`$run ./try`
	case "$yyy" in
	'')	sizesize=4
		echo "(I can't execute the test program--guessing $sizesize.)" >&4
		;;
	*)	sizesize=$yyy
		echo "Your $zzz size is $sizesize bytes."
		;;
	esac
else
	sizesize=4
	echo "(I can't compile the test program--guessing $sizesize.)" >&4
fi


: check for socklen_t
echo " "
echo "Checking to see if you have socklen_t..." >&4
$cat >try.c <<EOCP
#include <sys/types.h>
#$d_socket HAS_SOCKET
#ifdef HAS_SOCKET
#include <sys/socket.h>
#endif
int main() { socklen_t x = 16; }
EOCP
set try
if eval $compile; then
	val="$define"
	echo "You have socklen_t."
else
	val="$undef"
	echo "You do not have socklen_t."
	case "$sizetype" in
	size_t) echo "(You do have size_t, that might work. Some people are happy with just an int.)" ;;
	esac
fi
$rm_try
set d_socklen_t
eval $setvar

: see if this is a socks.h system
set socks.h i_socks
eval $inhdr

: check for type of the size argument to socket calls
case "$d_socket" in
"$define")
	$cat <<EOM

Checking to see what type is the last argument of accept().
EOM
	yyy=''
	case "$d_socklen_t" in
	"$define") yyy="$yyy socklen_t"
	esac
	yyy="$yyy $sizetype int long unsigned"
	for xxx in $yyy; do
		case "$socksizetype" in
		'')	try="$extern_C int accept(int, struct sockaddr *, $xxx *);"
			case "$usesocks" in
			"$define")
				if ./protochk "$try" $i_systypes sys/types.h $d_socket sys/socket.h literal '#define INCLUDE_PROTOTYPES' $i_socks socks.h.; then
					echo "Your system accepts '$xxx *' for the last argument of accept()."
					socksizetype="$xxx"
				fi
				;;
			*)	if ./protochk "$try"  $i_systypes sys/types.h $d_socket sys/socket.h; then
					echo "Your system accepts '$xxx *' for the last argument of accept()."
					socksizetype="$xxx"
				fi
				;;
			esac
			;;
		esac
	done
: In case none of those worked, prompt the user.
	case "$socksizetype" in
	'')	rp='What is the type for socket address structure sizes?'
		dflt='int'
		. ./myread
		socksizetype=$ans
		;;
	esac
	;;
*)	: no sockets, so pick relatively harmless default
	socksizetype='int'
	;;
esac

: see what type is used for signed size_t
set ssize_t ssizetype int stdio.h sys/types.h
eval $typedef
dflt="$ssizetype"
$cat > try.c <<EOM
#include <stdio.h>
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
#include <sys/types.h>
#define Size_t $sizetype
#define SSize_t $dflt
int main()
{
	if (sizeof(Size_t) == sizeof(SSize_t))
		printf("$dflt\n");
	else if (sizeof(Size_t) == sizeof(int))
		printf("int\n");
	else
		printf("long\n");
	exit(0);
}
EOM
echo " "
set try
if eval $compile_ok && $run ./try > /dev/null; then
	ssizetype=`$run ./try`
	echo "I'll be using $ssizetype for functions returning a byte count." >&4
else
	$cat >&4 <<EOM
Help! I can't compile and run the ssize_t test program: please enlighten me!
(This is probably a misconfiguration in your system or libraries, and
you really ought to fix it.  Still, I'll try anyway.)

I need a type that is the same size as $sizetype, but is guaranteed to
be signed.  Common values are ssize_t, int and long.

EOM
	rp="What signed type is the same size as $sizetype?"
	. ./myread
	ssizetype="$ans"
fi
$rm_try

: Check the size of st_ino
$echo " "
$echo "Checking the size of st_ino..." >&4
$cat > try.c <<EOCP
#include <sys/stat.h>
#include <stdio.h>
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
int main() {
    struct stat st;
    printf("%d\n", (int)sizeof(st.st_ino));
    exit(0);
}
EOCP
set try
if eval $compile_ok; then
	val=`$run ./try`
	case "$val" in
	'')	st_ino_size=4
		$echo "(I can't execute the test program--guessing $st_ino_size.)" >&4
		;;
	*)	st_ino_size=$val
		$echo "Your st_ino is $st_ino_size bytes long."
		;;
	esac
else
	st_ino_size=4
	$echo "(I can't compile the test program--guessing $st_ino_size.)" >&4
fi
$rm_try

: Check if st_ino is signed
$echo " "
$echo "Checking the sign of st_ino..." >&4
$cat > try.c <<EOCP
#include <sys/stat.h>
#include <stdio.h>
int main() {
	struct stat foo;
        foo.st_ino = -1;
	if (foo.st_ino < 0)
		printf("-1\n");
	else
		printf("1\n");
}
EOCP
set try
if eval $compile; then
	val=`$run ./try`
	case "$val" in
	'')	st_ino_sign=1
		$echo "(I can't execute the test program--guessing unsigned.)" >&4
		;;
	*)	st_ino_sign=$val
		case "$st_ino_sign" in
		 1) $echo "Your st_ino is unsigned." ;;
		-1) $echo "Your st_ino is signed."   ;;
		esac
		;;
	esac
else
	st_ino_sign=1
	$echo "(I can't compile the test program--guessing unsigned.)" >&4
fi
$rm_try

: see what type of char stdio uses.
echo " "
echo '#include <stdio.h>' | $cppstdin $cppminus > stdioh
if $contains 'unsigned.*char.*_ptr;' stdioh >/dev/null 2>&1 ; then
	echo "Your stdio uses unsigned chars." >&4
	stdchar="unsigned char"
else
	echo "Your stdio uses signed chars." >&4
	stdchar="char"
fi
$rm -f stdioh

: Check size of UID
echo " "
case "$uidtype" in
*_t) zzz="$uidtype"	;;
*)   zzz="uid"		;;
esac
echo "Checking the size of $zzz..." >&4
cat > try.c <<EOCP
#include <sys/types.h>
#include <stdio.h>
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
int main() {
    printf("%d\n", (int)sizeof($uidtype));
    exit(0);
}
EOCP
set try
if eval $compile_ok; then
	yyy=`$run ./try`
	case "$yyy" in
	'')	uidsize=4
		echo "(I can't execute the test program--guessing $uidsize.)" >&4
		;;
	*)	uidsize=$yyy
		echo "Your $zzz is $uidsize bytes long."
		;;
	esac
else
	uidsize=4
	echo "(I can't compile the test program--guessing $uidsize.)" >&4
fi

: Check if UID is signed
echo " "
case "$uidtype" in
*_t) zzz="$uidtype"	;;
*)   zzz="uid"		;;
esac
echo "Checking the sign of $zzz..." >&4
cat > try.c <<EOCP
#include <sys/types.h>
#include <stdio.h>
int main() {
	$uidtype foo = -1;
	if (foo < 0)
		printf("-1\n");
	else
		printf("1\n");
}
EOCP
set try
if eval $compile; then
	yyy=`$run ./try`
	case "$yyy" in
	'')	uidsign=1
		echo "(I can't execute the test program--guessing unsigned.)" >&4
		;;
	*)	uidsign=$yyy
		case "$uidsign" in
		 1) echo "Your $zzz is unsigned." ;;
		-1) echo "Your $zzz is signed."   ;;
		esac
		;;
	esac
else
	uidsign=1
	echo "(I can't compile the test program--guessing unsigned.)" >&4
fi


: Check format string for UID
echo " "
$echo "Checking the format string to be used for uids..." >&4

case "$uidsign" in
-1)	if $test X"$uidsize" = X"$ivsize"; then
		uidformat="$ivdformat"
	else
		if $test X"$uidsize" = X"$longsize"; then
			uidformat='"ld"'
		else
			if $test X"$uidsize" = X"$intsize"; then
				uidformat='"d"'
			else
				if $test X"$uidsize" = X"$shortsize"; then
					uidformat='"hd"'
				fi
			fi
		fi
	fi
	;;
*)	if $test X"$uidsize" = X"$uvsize"; then
		uidformat="$uvuformat"
	else
		if $test X"$uidsize" = X"$longsize"; then
			uidformat='"lu"'
		else
			if $test X"$uidsize" = X"$intsize"; then
				uidformat='"u"'
			else
				if $test X"$uidsize" = X"$shortsize"; then
					uidformat='"hu"'
				fi
			fi
		fi
	fi
	;;
esac

: Determine if we can use sysctl with KERN_PROC_PATHNAME to find executing program
echo " "
echo "Determining whether we can use sysctl with KERN_PROC_PATHNAME to find executing program..." >&4
$cat >try.c <<'EOM'
/* Intentionally a long probe as I'd like to sanity check that the exact
   approach is going to work, as thinking it will work, but only having it
   part working at runtime is worse than not having it.  */

#include <sys/types.h>
#include <sys/sysctl.h>
#include <sys/param.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>

int
main(int argc, char **argv) {
    char *buffer;
    char *argv_leaf = strrchr(argv[0], '/');
    char *buffer_leaf;
    size_t size = 0;
    int mib[4];

    mib[0] = CTL_KERN;
    mib[1] = KERN_PROC;
    mib[2] = KERN_PROC_PATHNAME;
    mib[3] = -1;

    if (!argv_leaf) {
	fprintf(stderr, "Can't locate / in '%s'\n", argv[0]);
	return 1;
    }

    if (sysctl(mib, 4, NULL, &size, NULL, 0)) {
	perror("sysctl");
	return 2;
    }

    if (size < strlen(argv_leaf) + 1) {
	fprintf(stderr, "size %lu is too short for a path\n",
		(unsigned long) size);
	return 3;
    }

    if (size > MAXPATHLEN * MAXPATHLEN) {
	fprintf(stderr, "size %lu is too long for a path\n",
		(unsigned long) size);
	return 4;
    }

    buffer = malloc(size);
    if (!buffer) {
	perror("malloc");
	return 5;
    }

    if (sysctl(mib, 4, buffer, &size, NULL, 0)) {
	perror("sysctl");
	return 6;
    }

    if (strlen(buffer) + 1 != size) {
	fprintf(stderr, "size != strlen(buffer) + 1 (%lu != %lu)\n",
		(unsigned long)size, (unsigned long)strlen(buffer) + 1);
        return 7;
    }


    if (*buffer != '/') {
	fprintf(stderr, "Not an absolute path: '%s'\n", buffer);
	return 8;
    }

    if (strstr(buffer, "/./")) {
	fprintf(stderr, "Contains /./: '%s'\n", buffer);
	return 9;
    }

    if (strstr(buffer, "/../")) {
	fprintf(stderr, "Contains /../: '%s'\n", buffer);
	return 10;
    }

    buffer_leaf = strrchr(buffer, '/');
    if (strcmp(buffer_leaf, argv_leaf) != 0) {
	fprintf(stderr, "Leafnames differ: '%s' vs '%s'\n", argv[0], buffer);
	return 11;
    }

    free(buffer);

    return 0;
}
EOM

val=$undef
set try
if eval $compile; then
	if $run ./try; then
		echo "You can use sysctl with KERN_PROC_PATHNAME to find the executing program." >&4
		val="$define"
	else
		echo "Nope, sysctl with KERN_PROC_PATHNAME doesn't work here." >&4
		val="$undef"
	fi
else
	echo "I'm unable to compile the test program." >&4
	echo "I'll assume no sysctl with KERN_PROC_PATHNAME here." >&4
	val="$undef"
fi
$rm_try
set usekernprocpathname
eval $setvar

: Determine if we can use _NSGetExecutablePath to find executing program
echo " "
echo "Determining whether we can use _NSGetExecutablePath to find executing program..." >&4
$cat >try.c <<'EOM'
/* Intentionally a long probe as I'd like to sanity check that the exact
   approach is going to work, as thinking it will work, but only having it
   part working at runtime is worse than not having it.  */
#include <mach-o/dyld.h>
#include <stdio.h>
#include <stdlib.h>
#include <sys/param.h>
#include <string.h>

int
main(int argc, char **argv) {
    char buf[1];
    uint32_t size = sizeof(buf);
    int result;
    char *buffer;
    char *tidied;
    char *argv_leaf = strrchr(argv[0], '/');
    char *tidied_leaf;

    if (!argv_leaf) {
	fprintf(stderr, "Can't locate / in '%s'\n", argv[0]);
	return 1;
    }

    _NSGetExecutablePath(buf, &size);
    if (size > MAXPATHLEN * MAXPATHLEN) {
	fprintf(stderr, "_NSGetExecutablePath size %u is too long for a path\n",
		(unsigned int) size);
	return 2;
    }

    buffer = malloc(size);
    if (!buffer) {
	perror("malloc");
	return 3;
    }

    result = _NSGetExecutablePath(buffer, &size);
    if (result != 0) {
	fprintf(stderr, "_NSGetExecutablePath returned %i for a size of %u\n",
		result, (unsigned int) size);
	return 4;
    }

    tidied = realpath(buffer, NULL);
    if (!tidied) {
	perror("realpath");
	return 5;
    }

    free(buffer);

    if (*tidied != '/') {
	fprintf(stderr, "Not an absolute path: '%s'\n", tidied);
	return 6;
    }

    if (strstr(tidied, "/./")) {
	fprintf(stderr, "Contains /./: '%s'\n", tidied);
	return 7;
    }

    if (strstr(tidied, "/../")) {
	fprintf(stderr, "Contains /../: '%s'\n", tidied);
	return 8;
    }

    tidied_leaf = strrchr(tidied, '/');
    if (strcmp(tidied_leaf, argv_leaf) != 0) {
	fprintf(stderr, "Leafnames differ: '%s' vs '%s'\n", argv[0], tidied);
	return 9;
    }

    free(tidied);

    return 0;
}
EOM

val=$undef
set try
if eval $compile; then
	if $run ./try; then
		echo "You can use _NSGetExecutablePath to find the executing program." >&4
		val="$define"
	else
		echo "Nope, _NSGetExecutablePath doesn't work here." >&4
	fi
else
	echo "I'm unable to compile the test program." >&4
	echo "I'll assume no _NSGetExecutablePath here." >&4
fi
$rm_try
set usensgetexecutablepath
eval $setvar

: Check if site customization support was requested
case "$usesitecustomize" in
    $define|true|[Yy]*)
	usesitecustomize="$define"
	;;
    *)
	usesitecustomize="$undef"
	;;
    esac

: see if prototypes support variable argument declarations
echo " "
case "$prototype$i_stdarg" in
$define$define)
	echo "It appears we'll be able to prototype varargs functions." >&4
	val="$define"
	;;
*)
	echo "Too bad... We won't be using prototyped varargs functions..." >&4
	val="$undef"
	;;
esac
set vaproto
eval $setvar

: determine compiler compiler
case "$yacc" in
'')
	dflt=yacc;;
*)
	dflt="$yacc";;
esac
echo " "
comp='yacc'
if $test -f "$byacc$_exe"; then
	dflt="$byacc"
	comp="byacc or $comp"
fi
if $test -f "$bison$_exe"; then
	comp="$comp or bison -y"
fi
rp="Which compiler compiler ($comp) shall I use?"
. ./myread
yacc="$ans"
case "$yacc" in
*bis*)
	case "$yacc" in
	*-y*) ;;
	*)
		yacc="$yacc -y"
		echo "(Adding -y option to bison to get yacc-compatible behavior.)"
		;;
	esac
	;;
esac

: see if this is a assert.h system
set assert.h i_assert
eval $inhdr

: see if this is a bfd.h system
set bfd.h i_bfd
eval $inhdr

: see if this is an execinfo.h system
set execinfo.h i_execinfo
eval $inhdr

: see if this is a fenv.h system
set fenv.h i_fenv
eval $inhdr

: see if this is a fp.h system
set fp.h i_fp
eval $inhdr

: see if this is a fp_class.h system
set fp_class.h i_fp_class
eval $inhdr

: see if gdbm.h is available
set gdbm.h t_gdbm
eval $inhdr
case "$t_gdbm" in
$define)
	: see if gdbm_open exists
	set gdbm_open d_gdbm_open
	eval $inlibc
	case "$d_gdbm_open" in
	$undef)
		t_gdbm="$undef"
		echo "We won't be including <gdbm.h>"
		;;
	esac
	;;
esac
val="$t_gdbm"
set i_gdbm
eval $setvar

: see if this is a ieeefp.h system
case "$i_ieeefp" in
'' ) set ieeefp.h i_ieeefp
     eval $inhdr
     ;;
esac

: see if this is a libutil.h system
set libutil.h i_libutil
eval $inhdr

: see if mach cthreads are available
if test "X$usethreads" = "X$define"; then
	set mach/cthreads.h i_machcthr
	eval $inhdr
else
	i_machcthr="$undef"
fi

: see if this is a mntent.h system
set mntent.h i_mntent
eval $inhdr

: see if net/errno.h is available
val=''
set net/errno.h val
eval $inhdr

: Unfortunately, it causes problems on some systems.  Arrgh.
case "$val" in
$define)
	cat > try.c <<'EOM'
#include <stdio.h>
#include <errno.h>
#include <net/errno.h>
int func()
{
	return ENOTSOCK;
}
EOM
	if $cc $ccflags -c try.c >/dev/null 2>&1; then
		echo "We'll be including <net/errno.h>." >&4
	else
		echo "We won't be including <net/errno.h>." >&4
		val="$undef"
	fi
	$rm_try
	;;
esac
set i_neterrno
eval $setvar

: see if netinet/tcp.h is available
set netinet/tcp.h i_netinettcp
eval $inhdr

: see if this is a poll.h system
set poll.h i_poll
eval $inhdr

: see if this is a prot.h system
set prot.h i_prot
eval $inhdr

: Preprocessor symbols
echo " "
$echo "Guessing which symbols your C compiler and preprocessor define..." >&4
$cat <<'EOSH' > Cppsym.know
a29k aarch64 ABI64 aegis AES_SOURCE AIX AIX32 AIX370 AIX41 AIX42
AIX43 aixpc AIX_SOURCE alliant ALL_SOURCE alpha AM29000 am29000
AMD64 amd64 amiga AMIGAOS AMIX ansi ANSI_C_SOURCE apollo arch_ppc
arch_pwr ardent ARM ARM32 atarist att386 att3b
BeOS BIG_ENDIAN BIT_MSF BSD bsd bsd43 bsd4_2 BSD4_3 bsd4_3 bsd4_4
BSDCOMPAT bsdi BSD_4_3 BSD_4_4 BSD_NET2 BSD_TIME BSD_TYPES bull
byteorder byte_order
c cadmus clang clipper CMU COFF COMPILER_VERSION concurrent
convex cpu CRAY cray CRAYMPP ctix CX_UX CYGWIN
DECC DGUX DGUX_SOURCE DJGPP dmert DOLPHIN DPX2 DSO Dynix DynixPTX
ELF encore EPI EXTENSIONS
FAVOR_BSD FILE_OFFSET_BITS FORTIFY_SOURCE FreeBSD
GCC_NEW_VARARGS gcos gcx gimpel GLIBC GLIBC_MINOR GNUC GNUC_MINOR
GNU_LIBRARY GNU_SOURCE GO32 gould GOULD_PN
H3050R H3050RX hbullx20 hcx host_mips hp200 hp300 HP700 hp700
hp800 hp9000 hp9000s200 hp9000s300 hp9000s400 hp9000s500
hp9000s700 hp9000s800 hp9k8 hppa hpux HPUX_SOURCE hp_osf
i186 i286 i386 i486 i586 i686 i8086 i80960 i860 I960 IA32 IA64
iAPX286 ibm ibm032 ibmesa IBMR2 ibmrt ILP32 ILP64
INLINE_INTRINSICS INT64 INTEL interdata INTRINSICS is68k itanium
ksr1
LANGUAGE_C LARGEFILE64_SOURCE LARGEFILE_SOURCE LARGE_FILE_API
LFS64_LARGEFILE LFS_LARGEFILE LIBCATAMOUNT Linux LITTLE_ENDIAN
LONG64 LONGDOUBLE LONGLONG LONG_DOUBLE LONG_LONG LP64 luna
luna88k Lynx
M68000 m68k m88100 m88k M88KBCS_TARGET MACH machine MachTen
MATH_HAS_NO_SIDE_EFFECTS mc300 mc500 mc68000 mc68010 mc68020
mc68030 mc68040 mc68060 mc68k mc68k32 mc700 mc88000 mc88100
merlin mert MiNT mips MIPSEB MIPSEL MIPS_FPSET MIPS_ISA MIPS_SIM
MIPS_SZINT MIPS_SZLONG MIPS_SZPTR MODERN_C motorola mpeix MSDOS
MTXINU MULTIMAX MVS mvs M_AMD64 M_ARM M_ARMT M_COFF M_I186 M_I286
M_I386 M_I8086 M_I86 M_I86SM M_IA64 M_IX86 M_PPC M_SYS3 M_SYS5
M_SYSIII M_SYSV M_UNIX M_X86 M_XENIX
n16 ncl_el ncl_mr NetBSD news1500 news1700 news1800 news1900
news3700 news700 news800 news900 NeXT NLS nonstopux ns16000
ns32000 ns32016 ns32332 ns32k nsc32000
OCS88 OEMVS OpenBSD os OS2 OS390 osf OSF1 OSF_SOURCE
PARAGON parisc pa_risc PA_RISC1_1 PA_RISC2_0 pc532 pdp11 PGC PIC
plexus PORTAR posix POSIX1B_SOURCE POSIX2_SOURCE POSIX4_SOURCE
POSIX_C_SOURCE POSIX_SOURCE POWER powerpc ppc PROTOTYPES PWB pyr
QK_USER QNX
R3000 REENTRANT RES Rhapsody RISC6000 riscix riscos RT
S390 S390x SA110 SCO scs sequent sgi SGI_SOURCE SH SH3 sinix
SIZE_INT SIZE_LONG SIZE_PTR SOCKETS_SOURCE SOCKET_SOURCE sony
sonyrisc sony_news sparc sparclite sparcv8 sparcv9 spectrum
stardent stdc STDC_EXT stratos sun sun3 sun386 Sun386i svr3 svr4
SVR4_2 SVR4_SOURCE svr5 SX system SYSTYPE_BSD SYSTYPE_BSD43
SYSTYPE_BSD44 SYSTYPE_SVR4 SYSTYPE_SVR5 SYSTYPE_SYSV SYSV SYSV3
SYSV4 SYSV5 sysV68 sysV88
Tek4132 Tek4300 thumb thw_370 thw_intel thw_rs6000 titan TM3200
TM5400 TM5600 tower tower32 tower32_200 tower32_600 tower32_700
tower32_800 tower32_850 tss
u370 u3b u3b2 u3b20 u3b200 u3b20d u3b5 ultrix UMAXV UnicomPBB
UnicomPBD UNICOS UNICOSMK unix UNIX95 UNIX99 unixpc unos USE_BSD
USE_FILE_OFFSET64 USE_GNU USE_ISOC9X USE_LARGEFILE
USE_LARGEFILE64 USE_MISC USE_POSIX USE_POSIX199309
USE_POSIX199506 USE_POSIX2 USE_REENTRANT USE_SVID USE_UNIX98
USE_XOPEN USE_XOPEN_EXTENDED USGr4 USGr4_2 UTek Utek UTS UWIN
uxpm uxps
vax venix VMESA vms
x86_64 xenix Xenix286 XOPEN_SOURCE XOPEN_SOURCE_EXTENDED XPG2
XPG2_EXTENDED XPG3 XPG3_EXTENDED XPG4 XPG4_EXTENDED
z8000 zarch
EOSH
# Maybe put other stuff here too.
./tr '-' '_' <<EOSH >>Cppsym.know
$osname
EOSH
./tr '[a-z]' '[A-Z]' < Cppsym.know > Cppsym.a
./tr '[A-Z]' '[a-z]' < Cppsym.know > Cppsym.b
$cat Cppsym.know > Cppsym.c
$cat Cppsym.a Cppsym.b Cppsym.c | $tr ' ' $trnl | $sort | $uniq > Cppsym.know
$rm -f Cppsym.a Cppsym.b Cppsym.c
cat <<EOSH > Cppsym
$startsh
if $test \$# -gt 0; then
    echo \$* | $tr " " "$trnl" | ./Cppsym.try > Cppsym.got
    if $test -s Cppsym.got; then
	$rm -f Cppsym.got
	exit 0
    fi
    $rm -f Cppsym.got
    exit 1
else
    $tr " " "$trnl" | ./Cppsym.try
    exit 0
fi
EOSH
chmod +x Cppsym
$eunicefix Cppsym
cat <<EOSH > Cppsym.try
$startsh
cat <<'EOCP' > try.c
#include <stdio.h>
#if cpp_stuff == 1
#define STRINGIFY(a)    "a"
#endif
#if cpp_stuff == 42
#define StGiFy(a)  #a
#define STRINGIFY(a)    StGiFy(a)
#endif
#if $cpp_stuff != 1 && $cpp_stuff != 42
#   include "Bletch: How does this C preprocessor stringify macros?"
#endif
int main() {
EOCP
$awk \\
EOSH
cat <<'EOSH' >> Cppsym.try
'length($1) > 0 {
    printf "#ifdef %s\nprintf(\"%s=%%s\\n\", STRINGIFY(%s));\n#endif\n", $1, $1, $1
    printf "#ifdef _%s\nprintf(\"_%s=%%s\\n\", STRINGIFY(_%s));\n#endif\n", $1, $1, $1
    printf "#ifdef __%s\nprintf(\"__%s=%%s\\n\", STRINGIFY(__%s));\n#endif\n", $1, $1, $1
    printf "#ifdef __%s__\nprintf(\"__%s__=%%s\\n\", STRINGIFY(__%s__));\n#endif\n", $1, $1, $1
}'	 >> try.c
echo 'return 0;}' >> try.c
EOSH
cat <<EOSH >> Cppsym.try
ccflags="$ccflags"
case "$osname-$gccversion" in
irix-) ccflags="\$ccflags -woff 1178" ;;
os2-*) ccflags="\$ccflags -Zlinker /PM:VIO" ;;
esac
$cc -o try -Dcpp_stuff=$cpp_stuff $optimize \$ccflags $ldflags try.c $libs 2>/dev/null && $run ./try | $sed 's/ /\\\\ /g'
EOSH
chmod +x Cppsym.try
$eunicefix Cppsym.try
./Cppsym < Cppsym.know | $sort | $uniq > Cppsym.true
: Add in any Linux cpp "predefined macros":
case "$osname::$gccversion" in
  *linux*::*.*|*gnukfreebsd*::*.*|gnu::*.*)
    tHdrH=_tmpHdr
    rm -f $tHdrH'.h' $tHdrH
    touch $tHdrH'.h'
    # Filter out macro arguments, such as Linux's __INT8_C(c)
    if $cpp -dM $tHdrH'.h' > $tHdrH'_cppsym.h' && [ -s $tHdrH'_cppsym.h' ]; then
       sed -e 's/#define[\ \  ]*//;s/[\ \     ].*$//' -e 's/(.*//' <$tHdrH'_cppsym.h' >$tHdrH'_cppsym.real'
       if [ -s $tHdrH'_cppsym.real' ]; then
	  cat $tHdrH'_cppsym.real' Cppsym.know | sort | uniq | ./Cppsym | sort | uniq > Cppsym.true
       fi
    fi
    rm -f $tHdrH'.h' $tHdrH'_cppsym.h' $tHdrH'_cppsym.real'
  ;;
esac
: now check the C compiler for additional symbols
postprocess_cc_v=''
case "$osname" in
aix) postprocess_cc_v="|$tr , ' '" ;;
esac
$cat >ccsym <<EOS
$startsh
$cat >tmp.c <<EOF
extern int foo;
EOF
for i in \`$cc -v -c tmp.c 2>&1 $postprocess_cc_v\`
do
	case "\$i" in
	-D*) echo "\$i" | $sed 's/^-D//';;
	-A*) $test "$gccversion" && echo "\$i" | $sed 's/^-A//' | $sed 's/\(.*\)(\(.*\))/\1=\2/';;
	esac
done
$rm_try
EOS
postprocess_cc_v=''
chmod +x ccsym
$eunicefix ccsym
./ccsym > ccsym1.raw
if $test -s ccsym1.raw; then
    $sort ccsym1.raw | $uniq >ccsym.raw
else
    mv ccsym1.raw ccsym.raw
fi

$awk '/\=/ { print $0; next }
	{ print $0"=1" }' ccsym.raw >ccsym.list
$comm -13 Cppsym.true ccsym.list >ccsym.own
$comm -12 Cppsym.true ccsym.list >ccsym.com
$comm -23 Cppsym.true ccsym.list >ccsym.cpp
also=''
if $test -z ccsym.raw; then
	echo "Your C compiler doesn't seem to define any symbols!" >&4
	echo " "
	echo "However, your C preprocessor defines the following symbols:"
	$cat Cppsym.true
	ccsymbols=''
	cppsymbols=`$cat Cppsym.true`
	cppsymbols=`echo $cppsymbols`
	cppccsymbols="$cppsymbols"
else
	if $test -s ccsym.com; then
		echo "Your C compiler and pre-processor define these symbols:"
		$sed -e 's/\(..*\)=.*/\1/' ccsym.com
		also='also '
		symbols='ones'
		cppccsymbols=`$cat ccsym.com`
		cppccsymbols=`echo $cppccsymbols`
		$test "$silent" || sleep 1
	fi
	if $test -s ccsym.cpp; then
		$test "$also" && echo " "
		echo "Your C pre-processor ${also}defines the following symbols:"
		$sed -e 's/\(..*\)=.*/\1/' ccsym.cpp
		also='further '
		cppsymbols=`$cat ccsym.cpp`
		cppsymbols=`echo $cppsymbols`
		$test "$silent" || sleep 1
	fi
	if $test -s ccsym.own; then
		$test "$also" && echo " "
		echo "Your C compiler ${also}defines the following cpp symbols:"
		$sed -e 's/\(..*\)=1/\1/' ccsym.own
		$sed -e 's/\(..*\)=.*/\1/' ccsym.own | $uniq >>Cppsym.true
		ccsymbols=`$cat ccsym.own`
		ccsymbols=`echo $ccsymbols`
		$test "$silent" || sleep 1
	fi
fi

: add -D_FORTIFY_SOURCE if feasible and not already there
case "$gccversion" in
[45].*)	case "$optimize$ccflags" in
	*-O*)	case "$ccflags$cppsymbols" in
		*_FORTIFY_SOURCE=*) # Don't add it again.
			echo "You seem to have -D_FORTIFY_SOURCE already, not adding it." >&4
			;;
		*)	echo "Adding -D_FORTIFY_SOURCE=2 to ccflags..." >&4
			ccflags="$ccflags -D_FORTIFY_SOURCE=2"
			;;
		esac
		;;
	*)	echo "You have gcc 4.* or later but not optimizing, not adding -D_FORTIFY_SOURCE." >&4
		;;
	esac
	;;
*)	echo "You seem not to have gcc 4.* or later, not adding -D_FORTIFY_SOURCE." >&4
	;;
esac

: see if this is a termio system
val="$undef"
val2="$undef"
val3="$undef"
if $test `./findhdr termios.h`; then
    set tcsetattr i_termios
    eval $inlibc
    val3="$i_termios"
fi
echo " "
case "$val3" in
    "$define") echo "You have POSIX termios.h... good!" >&4;;
    *)  if ./Cppsym pyr; then
	    case "`$run /bin/universe`" in
		ucb) if $test `./findhdr sgtty.h`; then
			val2="$define"
			echo "<sgtty.h> found." >&4
		    else
			echo "System is pyramid with BSD universe."
			./warn "<sgtty.h> not found--you could have problems."
		    fi;;
		*)  if $test `./findhdr termio.h`; then
			val="$define"
			echo "<termio.h> found." >&4
		    else
			echo "System is pyramid with USG universe."
			./warn "<termio.h> not found--you could have problems."
		    fi;;
	    esac
	elif ./usg; then
	    if $test `./findhdr termio.h`; then
		echo "<termio.h> found." >&4
		val="$define"
	    elif $test `./findhdr sgtty.h`; then
		echo "<sgtty.h> found." >&4
		val2="$define"
	    else
		./warn "Neither <termio.h> nor <sgtty.h> found--cross fingers!"
	    fi
	else
	    if $test `./findhdr sgtty.h`; then
		echo "<sgtty.h> found." >&4
		val2="$define"
	    elif $test `./findhdr termio.h`; then
		echo "<termio.h> found." >&4
		val="$define"
	    else
		./warn "Neither <sgtty.h> nor <termio.h> found--cross fingers!"
	    fi
	fi;;
esac
set i_termio; eval $setvar
val=$val2; set i_sgtty; eval $setvar
val=$val3; set i_termios; eval $setvar

: see if stdbool is available
: we want a real compile instead of Inhdr because some Solaris systems
: have stdbool.h, but it can only be used if the compiler indicates it
: is sufficiently c99-compliant.
echo " "
$cat >try.c <<EOCP
#include <stdio.h>
#include <stdbool.h>
int func(bool x)
{
    return x ? 1 : 0;
}
int main(int argc, char **argv)
{
    return func(0);
}
EOCP
set try
if eval $compile; then
	echo "<stdbool.h> found." >&4
	val="$define"
else
	echo "<stdbool.h> NOT found." >&4
	val="$undef"
fi
$rm_try
set i_stdbool
eval $setvar

: see if stddef is available
set stddef.h i_stddef
eval $inhdr

: see if stdint is available
set stdint.h i_stdint
eval $inhdr

: see if sys/access.h is available
set sys/access.h i_sysaccess
eval $inhdr

: see if ioctl defs are in sgtty, termio, sys/filio or sys/ioctl
set sys/filio.h i_sysfilio
eval $inhdr
echo " "
if $test `./findhdr sys/ioctl.h`; then
	val="$define"
	echo '<sys/ioctl.h> found.' >&4
else
	val="$undef"
	if $test $i_sysfilio = "$define"; then
	    echo '<sys/ioctl.h> NOT found.' >&4
	else
		$test $i_sgtty = "$define" && xxx="sgtty.h"
		$test $i_termio = "$define" && xxx="termio.h"
		$test $i_termios = "$define" && xxx="termios.h"
echo "No <sys/ioctl.h> found, assuming ioctl args are defined in <$xxx>." >&4
	fi
fi
set i_sysioctl
eval $setvar

: see if socket ioctl defs are in sys/sockio.h
echo " "
xxx=`./findhdr sys/sockio.h`
if $test "$xxx"; then
	if $contains SIOCATMARK $xxx >/dev/null 2>&1; then
		val="$define"
		echo "You have socket ioctls defined in <sys/sockio.h>." >&4
	else
		val="$undef"
		echo "No socket ioctls found in <sys/sockio.h>." >&4
	fi
else
	val="$undef"
	$cat <<EOM
<sys/sockio.h> not found, assuming socket ioctls are in <sys/ioctl.h>.
EOM
fi
set i_syssockio
eval $setvar

: see if this is a syslog.h system
set syslog.h i_syslog
eval $inhdr

: see if this is a sys/mode.h system
set sys/mode.h i_sysmode
eval $inhdr

: see if there is a sys/poll.h file
set sys/poll.h i_syspoll
eval $inhdr

: see if sys/resource.h has to be included
set sys/resource.h i_sysresrc
eval $inhdr

: see if sys/security.h is available
set sys/security.h i_syssecrt
eval $inhdr

: see if this is a sys/statvfs.h system
set sys/statvfs.h i_sysstatvfs
eval $inhdr

: see if this is a sys/un.h system
set sys/un.h i_sysun
eval $inhdr

: see if this is a sys/utsname.h system
set sys/utsname.h i_sysutsname
eval $inhdr

: see if this is a syswait system
set sys/wait.h i_syswait
eval $inhdr

: see if this is a ustat.h system
set ustat.h i_ustat
eval $inhdr

: see if this is an utime system
set utime.h i_utime
eval $inhdr

: see if this is a vfork system
case "$d_vfork" in
"$define")
	set vfork.h i_vfork
	eval $inhdr
	;;
*)
	i_vfork="$undef"
	;;
esac

: Check extensions
echo " "
echo "Looking for extensions..." >&4
: If we are using the old config.sh, nonxs_extensions and xs_extensions may
: contain old or inaccurate or duplicate values.
nonxs_extensions=''
xs_extensions=''
: We do not use find because it might not be available.
: We do not just use MANIFEST because the user may have dropped
: some additional extensions into the source tree and expect them
: to be built.

: Function to recursively find available extensions, ignoring DynaLoader
: NOTE: recursion limit of 10 to prevent runaway in case of symlink madness
: In 5.10.1 and later, extensions are stored in directories
: like File-Glob instead of the older File/Glob/.
find_extensions='
    for xxx in *; do
	case "$xxx" in
	    CVS) ;;
	    DynaLoader|dynaload) ;;
	    *)
	    this_ext=`echo "$xxx" | $sed -e s/-/\\\//g`;
	    case "$this_ext" in
		Scalar/List/Utils) this_ext="List/Util"	;;
		PathTools)         this_ext="Cwd"	;;
	    esac;
	    echo " $xs_extensions $nonxs_extensions" > "$tdir/$$.tmp";
	    if $contains " $this_ext " "$tdir/$$.tmp"; then
		echo >&4;
		echo "Duplicate directories detected for extension $xxx" >&4;
		echo "Configure cannot correctly recover from this - shall I abort?" >&4;
		case "$knowitall" in
		"") dflt=y;;
		*) dflt=n;;
		esac;
		. ../UU/myread;
		case "$ans" in
		n*|N*) ;;
		*) echo >&4;
		    echo "Ok.  Stopping Configure." >&4;
		    echo "Please remove the duplicate directory (e.g. using git clean) and then re-run Configure" >&4;
		    exit 1;;
		esac;
		echo "Ok.  You will need to correct config.sh before running make." >&4;
	    fi;
	    $ls -1 "$xxx" > "$tdir/$$.tmp";
	    if   $contains "\.xs$" "$tdir/$$.tmp" > /dev/null 2>&1; then
		xs_extensions="$xs_extensions $this_ext";
	    elif $contains "\.c$"  "$tdir/$$.tmp" > /dev/null 2>&1; then
		xs_extensions="$xs_extensions $this_ext";
	    elif $test -d "$xxx"; then
		nonxs_extensions="$nonxs_extensions $this_ext";
	    fi;
	    $rm -f "$tdir/$$.tmp";
	    ;;
	esac;
    done'
tdir=`pwd`
cd "$rsrc/cpan"
set X
shift
eval $find_extensions
cd "$rsrc/dist"
set X
shift
eval $find_extensions
cd "$rsrc/ext"
set X
shift
eval $find_extensions
set X $xs_extensions
shift
xs_extensions=`echo "$*" | tr ' ' $trnl | $sort | tr $trnl ' '`
set X $nonxs_extensions
shift
nonxs_extensions=`echo "$*" | tr ' ' $trnl | $sort | tr $trnl ' '`
cd "$tdir"
known_extensions=`echo $nonxs_extensions $xs_extensions  | tr ' ' $trnl | $sort | tr $trnl ' '`

: Now see which are supported on this system.
avail_ext=''
for xxx in $xs_extensions ; do
	case "$xxx" in
	Amiga*)
		case "$osname" in
		amigaos) avail_ext="$avail_ext $xxx" ;;
		esac
		;;
	DB_File|db_file)
		case "$i_db" in
		$define) avail_ext="$avail_ext $xxx" ;;
		esac
		;;
	GDBM_File|gdbm_fil)
		case "$i_gdbm" in
		$define) avail_ext="$avail_ext $xxx" ;;
		esac
		;;
	I18N/Langinfo|i18n_lan)
		case "$i_langinfo$d_nl_langinfo" in
		$define$define) avail_ext="$avail_ext $xxx" ;;
		esac
		;;
	IPC/SysV|ipc/sysv)
		: XXX Do we need a useipcsysv variable here
		case "${d_msg}${d_sem}${d_shm}" in
		*"${define}"*) avail_ext="$avail_ext $xxx" ;;
		esac
		;;
	NDBM_File|ndbm_fil)
		case "$d_ndbm" in
		$define)
		    case "$osname-$use64bitint" in
		    hpux-define)
			case "$libs" in
			*-lndbm*) avail_ext="$avail_ext $xxx" ;;
			esac
			;;
		    *) avail_ext="$avail_ext $xxx" ;;
		    esac
		    ;;
		esac
		;;
	ODBM_File|odbm_fil)
		case "${i_dbm}${i_rpcsvcdbm}" in
		*"${define}"*)
		    case "$d_cplusplus" in
		    define) ;; # delete as a function name will not work
		    *)  case "$osname-$use64bitint" in
			hpux-define)
			    case "$libs" in
			    *-ldbm*) avail_ext="$avail_ext $xxx" ;;
			    esac
			    ;;
			*) avail_ext="$avail_ext $xxx" ;;
			esac
			;;
		    esac
		    ;;
		esac
		;;
	Opcode|opcode)
		case "$useopcode" in
		true|define|y) avail_ext="$avail_ext $xxx" ;;
		esac
		;;
	POSIX|posix)
		case "$useposix" in
		true|define|y) avail_ext="$avail_ext $xxx" ;;
		esac
		;;
	Socket|socket)
		case "$d_socket" in
		true|$define|y) avail_ext="$avail_ext $xxx" ;;
		esac
		;;
	Sys/Syslog|sys/syslog)
		case $osname in
			amigaos) ;; # not really very useful on AmigaOS
			*)
			: XXX syslog requires socket
			case "$d_socket" in
			true|$define|y) avail_ext="$avail_ext $xxx" ;;
			esac
			;;
		esac
		;;
	Thread|thread)
                case "$usethreads" in
                true|$define|y)
                        case "$use5005threads" in
                        $define|true|[yY]*) avail_ext="$avail_ext $xxx" ;;
                        esac
		esac
		;;
	threads|threads/shared)
		# threads and threads::shared are special cases.
		# To stop people from asking "Perl 5.8.0 was supposed
		# to have this new fancy threads implementation but my
		# perl doesn't have it" and from people trying to
		# (re)install the threads module using CPAN.pm and
		# CPAN.pm then offering to reinstall Perl 5.8.0,
		# the threads.pm and threads/shared.pm will always be
		# there, croaking informatively ("you need to rebuild
		# all of Perl with threads, sorry") when threads haven't
		# been compiled in.
		# --jhi
		avail_ext="$avail_ext $xxx"
		;;
	VMS*)
		;;
	Win32*)
		case "$osname" in
		cygwin) avail_ext="$avail_ext $xxx" ;;
		esac
		;;
	XS/APItest|xs/apitest)
		# This is just for testing.  Skip it unless we have dynamic loading.

		case "$usedl" in
		$define) avail_ext="$avail_ext $xxx" ;;
		esac
		;;
	XS/Typemap|xs/typemap)
		# This is just for testing.  Skip it unless we have dynamic loading.
		case "$usedl" in
		$define) avail_ext="$avail_ext $xxx" ;;
		esac
		;;
	*)	avail_ext="$avail_ext $xxx"
		;;
	esac
done

set X $avail_ext
shift
avail_ext="$*"

case "$onlyextensions" in
'') ;;
*)  keepextensions=''
    echo "You have requested that only certain extensions be included..." >&4
    for i in $onlyextensions; do
        case " $avail_ext " in
        *" $i "*)
            echo "Keeping extension $i."
            keepextensions="$keepextensions $i"
            ;;
        *) echo "Ignoring extension $i." ;;
        esac
    done
    avail_ext="$keepextensions"
    ;;
esac

case "$noextensions" in
'') ;;
*)  keepextensions=''
    echo "You have requested that certain extensions be ignored..." >&4
    for i in $avail_ext; do
        case " $noextensions " in
        *" $i "*) echo "Ignoring extension $i." ;;
        *) echo "Keeping extension $i.";
           keepextensions="$keepextensions $i"
           ;;
        esac
    done
    avail_ext="$keepextensions"
    ;;
esac

: Now see which nonxs extensions are supported on this system.
: For now assume all are.
nonxs_ext=''
for xxx in $nonxs_extensions ; do
	case "$xxx" in
	CVS|RCS|SCCS|.svn)
		;;
	VMS*)
		;;
	*)	nonxs_ext="$nonxs_ext $xxx"
		;;
	esac
done

set X $nonxs_ext
shift
nonxs_ext="$*"

case $usedl in
$define)
	$cat <<EOM
A number of extensions are supplied with $package.  You may choose to
compile these extensions for dynamic loading (the default), compile
them into the $package executable (static loading), or not include
them at all.  Answer "none" to include no extensions.
Note that DynaLoader is always built and need not be mentioned here.

EOM
	case "$dynamic_ext" in
	'')
		: Exclude those listed in static_ext
		dflt=''
		for xxx in $avail_ext; do
			case " $static_ext " in
			*" $xxx "*) ;;
			*) dflt="$dflt $xxx" ;;
			esac
		done
		set X $dflt
		shift
		dflt="$*"
		;;
	*)	dflt="$dynamic_ext"
		# Perhaps we are reusing an old out-of-date config.sh.
		case "$hint" in
		previous)
			if test X"$dynamic_ext" != X"$avail_ext"; then
				$cat <<EOM
NOTICE:  Your previous config.sh list may be incorrect.
The extensions now available to you are
	${avail_ext}
but the default list from your previous config.sh is
	${dynamic_ext}

EOM
			fi
			;;
		esac
		;;
	esac
	case "$dflt" in
	'')	dflt=none;;
	esac
	rp="What extensions do you wish to load dynamically?"
	. ./myread
	case "$ans" in
	none) dynamic_ext=' ' ;;
	*) dynamic_ext="$ans" ;;
	esac

	case "$static_ext" in
	'')
		: Exclude those already listed in dynamic linking
		dflt=''
		for xxx in $avail_ext; do
			case " $dynamic_ext " in
			*" $xxx "*) ;;
			*) dflt="$dflt $xxx" ;;
			esac
		done
		set X $dflt
		shift
		dflt="$*"
		;;
	*)  dflt="$static_ext"
		;;
	esac

	case "$dflt" in
	'')	dflt=none;;
	esac
	rp="What extensions do you wish to load statically?"
	. ./myread
	case "$ans" in
	none) static_ext=' ' ;;
	*) static_ext="$ans" ;;
	esac
	;;
*)
	$cat <<EOM
A number of extensions are supplied with $package.  Answer "none"
to include no extensions.
Note that DynaLoader is always built and need not be mentioned here.

EOM
	case "$static_ext" in
	'') dflt="$avail_ext" ;;
	*)	dflt="$static_ext"
		# Perhaps we are reusing an old out-of-date config.sh.
		case "$hint" in
		previous)
			if test X"$static_ext" != X"$avail_ext"; then
				$cat <<EOM
NOTICE:  Your previous config.sh list may be incorrect.
The extensions now available to you are
	${avail_ext}
but the default list from your previous config.sh is
	${static_ext}

EOM
			fi
			;;
		esac
		;;
	esac
	: Exclude those that are not xs extensions
	case "$dflt" in
	'')	dflt=none;;
	esac
	rp="What extensions do you wish to include?"
	. ./myread
	case "$ans" in
	none) static_ext=' ' ;;
	*) static_ext="$ans" ;;
	esac
	;;
esac
#
# Encode is a special case.  If we are building Encode as a static
# extension, we need to explicitly list its subextensions as well.
# For other nested extensions, this is handled automatically by
# the appropriate Makefile.PL.
case " $static_ext " in
	*" Encode "*) # Add the subextensions of Encode
	cd "$rsrc/cpan"
	for xxx in `ls Encode/*/Makefile.PL|awk -F/ '{print $2}'`; do
		static_ext="$static_ext Encode/$xxx"
		known_extensions="$known_extensions Encode/$xxx"
	done
	cd "$tdir"
	;;
esac

set X $dynamic_ext $static_ext $nonxs_ext
shift
extensions="$*"

# Sanity check:  We require an extension suitable for use with
# AnyDBM_File, as well as Fcntl and IO.  (Failure to have these
# should show up as failures in the test suite, but it's helpful to
# catch them now.) The 'extensions' list is normally sorted
# alphabetically, so we need to accept either
#    DB_File ... Fcntl ... IO  ....
# or something like
#    Fcntl ... NDBM_File ... IO  ....
case " $extensions"  in
*"_File "*" Fcntl "*" IO "*) ;; # DB_File
*" Fcntl "*"_File "*" IO "*) ;; # GDBM_File
*" Fcntl "*" IO "*"_File "*) ;; # NDBM_File
*) echo "WARNING: Extensions DB_File or *DBM_File, Fcntl, and IO not configured." >&4
   echo "WARNING: The Perl you are building will be quite crippled." >& 4
   ;;
esac

: Remove libraries needed only for extensions
: The appropriate ext/Foo/Makefile.PL will add them back in, if necessary.
: The exception is SunOS 4.x, which needs them.
case "${osname}X${osvers}" in
sunos*X4*)
    perllibs="$libs"
    ;;
*) case "$usedl" in
    $define|true|[yY]*)
	    set X `echo " $libs " | sed -e 's@@ -lndbm @@ @@' -e 's@@ -lgdbm @@ @@' -e 's@@ -lgdbm_compat @@ @@' -e 's@@ -ldbm @@ @@' -e 's@@ -ldb @@ @@'`
	    shift
	    perllibs="$*"
	    ;;
    *)	perllibs="$libs"
	    ;;
    esac
    ;;
esac

: Remove build directory name from cppstdin so it can be used from
: either the present location or the final installed location.
echo " "
: Get out of the UU directory to get correct path name.
cd ..
case "$cppstdin" in
`pwd`/cppstdin)
	echo "Stripping down cppstdin path name"
	cppstdin=cppstdin
	;;
esac
cd UU

: end of configuration questions
echo " "
echo "End of configuration questions."
echo " "

: back to where it started
if test -d ../UU; then
	cd ..
fi

: configuration may be unconditionally patched via a 'config.arch' file
if $test -f config.arch; then
	echo "I see a config.arch file, loading it." >&4
	. ./config.arch
fi

: configuration may be patched via a 'config.over' file
if $test -f config.over; then
	echo " "
	dflt=y
	rp='I see a config.over file.  Do you wish to load it?'
	. UU/myread
	case "$ans" in
	n*) echo "OK, I'll ignore it.";;
	*)	. ./config.over
		echo "Configuration override changes have been loaded."
		;;
	esac
fi

: in case they want portability, strip down executable paths
case "$d_portable" in
"$define")
	echo " "
	echo "Stripping down executable paths..." >&4
	for file in $loclist $trylist; do
		eval temp=\$$file
		eval $file=`basename $temp`
	done
	;;
esac

: create config.sh file
echo " "
echo "Creating config.sh..." >&4
$spitshell <<EOT >config.sh
$startsh
#
# This file was produced by running the Configure script. It holds all the
# definitions figured out by Configure. Should you modify one of these values,
# do not forget to propagate your changes by running "Configure -der". You may
# instead choose to run each of the .SH files by yourself, or "Configure -S".
#

# Package name      : $package
# Source directory  : $src
# Configuration time: $cf_time
# Configured by     : $cf_by
# Target system     : $myuname

EOT
: Add in command line options if available
$test -f UU/cmdline.opt && $cat UU/cmdline.opt >> config.sh

$spitshell <<EOT >>config.sh

Author='$Author'
Date='$Date'
Header='$Header'
Id='$Id'
Locker='$Locker'
Log='$Log'
RCSfile='$RCSfile'
Revision='$Revision'
Source='$Source'
State='$State'
_a='$_a'
_exe='$_exe'
_o='$_o'
afs='$afs'
afsroot='$afsroot'
alignbytes='$alignbytes'
ansi2knr='$ansi2knr'
aphostname='$aphostname'
api_revision='$api_revision'
api_subversion='$api_subversion'
api_version='$api_version'
api_versionstring='$api_versionstring'
ar='$ar'
archlib='$archlib'
archlibexp='$archlibexp'
archname64='$archname64'
archname='$archname'
archobjs='$archobjs'
asctime_r_proto='$asctime_r_proto'
awk='$awk'
baserev='$baserev'
bash='$bash'
bin='$bin'
bin_ELF='$bin_ELF'
binexp='$binexp'
bison='$bison'
byacc='$byacc'
byteorder='$byteorder'
c='$c'
castflags='$castflags'
cat='$cat'
cc='$cc'
cccdlflags='$cccdlflags'
ccdlflags='$ccdlflags'
ccflags='$ccflags'
ccflags_uselargefiles='$ccflags_uselargefiles'
ccname='$ccname'
ccsymbols='$ccsymbols'
ccversion='$ccversion'
cf_by='$cf_by'
cf_email='$cf_email'
cf_time='$cf_time'
charbits='$charbits'
charsize='$charsize'
chgrp='$chgrp'
chmod='$chmod'
chown='$chown'
clocktype='$clocktype'
comm='$comm'
compress='$compress'
contains='$contains'
cp='$cp'
cpio='$cpio'
cpp='$cpp'
cpp_stuff='$cpp_stuff'
cppccsymbols='$cppccsymbols'
cppflags='$cppflags'
cpplast='$cpplast'
cppminus='$cppminus'
cpprun='$cpprun'
cppstdin='$cppstdin'
cppsymbols='$cppsymbols'
crypt_r_proto='$crypt_r_proto'
cryptlib='$cryptlib'
csh='$csh'
ctermid_r_proto='$ctermid_r_proto'
ctime_r_proto='$ctime_r_proto'
d_Gconvert='$d_Gconvert'
d_PRIEUldbl='$d_PRIEUldbl'
d_PRIFUldbl='$d_PRIFUldbl'
d_PRIGUldbl='$d_PRIGUldbl'
d_PRIXU64='$d_PRIXU64'
d_PRId64='$d_PRId64'
d_PRIeldbl='$d_PRIeldbl'
d_PRIfldbl='$d_PRIfldbl'
d_PRIgldbl='$d_PRIgldbl'
d_PRIi64='$d_PRIi64'
d_PRIo64='$d_PRIo64'
d_PRIu64='$d_PRIu64'
d_PRIx64='$d_PRIx64'
d_SCNfldbl='$d_SCNfldbl'
d__fwalk='$d__fwalk'
d_access='$d_access'
d_accessx='$d_accessx'
d_acosh='$d_acosh'
d_aintl='$d_aintl'
d_alarm='$d_alarm'
d_archlib='$d_archlib'
d_asctime64='$d_asctime64'
d_asctime_r='$d_asctime_r'
d_asinh='$d_asinh'
d_atanh='$d_atanh'
d_atolf='$d_atolf'
d_atoll='$d_atoll'
d_attribute_deprecated='$d_attribute_deprecated'
d_attribute_format='$d_attribute_format'
d_attribute_malloc='$d_attribute_malloc'
d_attribute_nonnull='$d_attribute_nonnull'
d_attribute_noreturn='$d_attribute_noreturn'
d_attribute_pure='$d_attribute_pure'
d_attribute_unused='$d_attribute_unused'
d_attribute_warn_unused_result='$d_attribute_warn_unused_result'
d_backtrace='$d_backtrace'
d_bcmp='$d_bcmp'
d_bcopy='$d_bcopy'
d_bsd='$d_bsd'
d_bsdgetpgrp='$d_bsdgetpgrp'
d_bsdsetpgrp='$d_bsdsetpgrp'
d_builtin_choose_expr='$d_builtin_choose_expr'
d_builtin_expect='$d_builtin_expect'
d_bzero='$d_bzero'
d_c99_variadic_macros='$d_c99_variadic_macros'
d_casti32='$d_casti32'
d_castneg='$d_castneg'
d_cbrt='$d_cbrt'
d_charvspr='$d_charvspr'
d_chown='$d_chown'
d_chroot='$d_chroot'
d_chsize='$d_chsize'
d_class='$d_class'
d_clearenv='$d_clearenv'
d_closedir='$d_closedir'
d_cmsghdr_s='$d_cmsghdr_s'
d_const='$d_const'
d_copysign='$d_copysign'
d_copysignl='$d_copysignl'
d_cplusplus='$d_cplusplus'
d_crypt='$d_crypt'
d_crypt_r='$d_crypt_r'
d_csh='$d_csh'
d_ctermid='$d_ctermid'
d_ctermid_r='$d_ctermid_r'
d_ctime64='$d_ctime64'
d_ctime_r='$d_ctime_r'
d_cuserid='$d_cuserid'
d_dbl_dig='$d_dbl_dig'
d_dbminitproto='$d_dbminitproto'
d_difftime64='$d_difftime64'
d_difftime='$d_difftime'
d_dir_dd_fd='$d_dir_dd_fd'
d_dirfd='$d_dirfd'
d_dirnamlen='$d_dirnamlen'
d_dladdr='$d_dladdr'
d_dlerror='$d_dlerror'
d_dlopen='$d_dlopen'
d_dlsymun='$d_dlsymun'
d_dosuid='$d_dosuid'
d_drand48_r='$d_drand48_r'
d_drand48proto='$d_drand48proto'
d_dup2='$d_dup2'
d_duplocale='$d_duplocale'
d_eaccess='$d_eaccess'
d_endgrent='$d_endgrent'
d_endgrent_r='$d_endgrent_r'
d_endhent='$d_endhent'
d_endhostent_r='$d_endhostent_r'
d_endnent='$d_endnent'
d_endnetent_r='$d_endnetent_r'
d_endpent='$d_endpent'
d_endprotoent_r='$d_endprotoent_r'
d_endpwent='$d_endpwent'
d_endpwent_r='$d_endpwent_r'
d_endsent='$d_endsent'
d_endservent_r='$d_endservent_r'
d_eofnblk='$d_eofnblk'
d_erf='$d_erf'
d_erfc='$d_erfc'
d_eunice='$d_eunice'
d_exp2='$d_exp2'
d_expm1='$d_expm1'
d_faststdio='$d_faststdio'
d_fchdir='$d_fchdir'
d_fchmod='$d_fchmod'
d_fchown='$d_fchown'
d_fcntl='$d_fcntl'
d_fcntl_can_lock='$d_fcntl_can_lock'
d_fd_macros='$d_fd_macros'
d_fd_set='$d_fd_set'
d_fdclose='$d_fdclose'
d_fdim='$d_fdim'
d_fds_bits='$d_fds_bits'
d_fegetround='$d_fegetround'
d_fgetpos='$d_fgetpos'
d_finite='$d_finite'
d_finitel='$d_finitel'
d_flexfnam='$d_flexfnam'
d_flock='$d_flock'
d_flockproto='$d_flockproto'
d_fma='$d_fma'
d_fmax='$d_fmax'
d_fmin='$d_fmin'
d_fork='$d_fork'
d_fp_class='$d_fp_class'
d_fp_classify='$d_fp_classify'
d_fp_classl='$d_fp_classl'
d_fpathconf='$d_fpathconf'
d_fpclass='$d_fpclass'
d_fpclassify='$d_fpclassify'
d_fpclassl='$d_fpclassl'
d_fpgetround='$d_fpgetround'
d_fpos64_t='$d_fpos64_t'
d_freelocale='$d_freelocale'
d_frexpl='$d_frexpl'
d_fs_data_s='$d_fs_data_s'
d_fseeko='$d_fseeko'
d_fsetpos='$d_fsetpos'
d_fstatfs='$d_fstatfs'
d_fstatvfs='$d_fstatvfs'
d_fsync='$d_fsync'
d_ftello='$d_ftello'
d_ftime='$d_ftime'
d_futimes='$d_futimes'
d_gdbm_ndbm_h_uses_prototypes='$d_gdbm_ndbm_h_uses_prototypes'
d_gdbmndbm_h_uses_prototypes='$d_gdbmndbm_h_uses_prototypes'
d_getaddrinfo='$d_getaddrinfo'
d_getcwd='$d_getcwd'
d_getespwnam='$d_getespwnam'
d_getfsstat='$d_getfsstat'
d_getgrent='$d_getgrent'
d_getgrent_r='$d_getgrent_r'
d_getgrgid_r='$d_getgrgid_r'
d_getgrnam_r='$d_getgrnam_r'
d_getgrps='$d_getgrps'
d_gethbyaddr='$d_gethbyaddr'
d_gethbyname='$d_gethbyname'
d_gethent='$d_gethent'
d_gethname='$d_gethname'
d_gethostbyaddr_r='$d_gethostbyaddr_r'
d_gethostbyname_r='$d_gethostbyname_r'
d_gethostent_r='$d_gethostent_r'
d_gethostprotos='$d_gethostprotos'
d_getitimer='$d_getitimer'
d_getlogin='$d_getlogin'
d_getlogin_r='$d_getlogin_r'
d_getmnt='$d_getmnt'
d_getmntent='$d_getmntent'
d_getnameinfo='$d_getnameinfo'
d_getnbyaddr='$d_getnbyaddr'
d_getnbyname='$d_getnbyname'
d_getnent='$d_getnent'
d_getnetbyaddr_r='$d_getnetbyaddr_r'
d_getnetbyname_r='$d_getnetbyname_r'
d_getnetent_r='$d_getnetent_r'
d_getnetprotos='$d_getnetprotos'
d_getpagsz='$d_getpagsz'
d_getpbyname='$d_getpbyname'
d_getpbynumber='$d_getpbynumber'
d_getpent='$d_getpent'
d_getpgid='$d_getpgid'
d_getpgrp2='$d_getpgrp2'
d_getpgrp='$d_getpgrp'
d_getppid='$d_getppid'
d_getprior='$d_getprior'
d_getprotobyname_r='$d_getprotobyname_r'
d_getprotobynumber_r='$d_getprotobynumber_r'
d_getprotoent_r='$d_getprotoent_r'
d_getprotoprotos='$d_getprotoprotos'
d_getprpwnam='$d_getprpwnam'
d_getpwent='$d_getpwent'
d_getpwent_r='$d_getpwent_r'
d_getpwnam_r='$d_getpwnam_r'
d_getpwuid_r='$d_getpwuid_r'
d_getsbyname='$d_getsbyname'
d_getsbyport='$d_getsbyport'
d_getsent='$d_getsent'
d_getservbyname_r='$d_getservbyname_r'
d_getservbyport_r='$d_getservbyport_r'
d_getservent_r='$d_getservent_r'
d_getservprotos='$d_getservprotos'
d_getspnam='$d_getspnam'
d_getspnam_r='$d_getspnam_r'
d_gettimeod='$d_gettimeod'
d_gmtime64='$d_gmtime64'
d_gmtime_r='$d_gmtime_r'
d_gnulibc='$d_gnulibc'
d_grpasswd='$d_grpasswd'
d_hasmntopt='$d_hasmntopt'
d_htonl='$d_htonl'
d_hypot='$d_hypot'
d_ilogb='$d_ilogb'
d_ilogbl='$d_ilogbl'
d_inc_version_list='$d_inc_version_list'
d_index='$d_index'
d_inetaton='$d_inetaton'
d_inetntop='$d_inetntop'
d_inetpton='$d_inetpton'
d_int64_t='$d_int64_t'
d_ip_mreq='$d_ip_mreq'
d_ip_mreq_source='$d_ip_mreq_source'
d_ipv6_mreq='$d_ipv6_mreq'
d_ipv6_mreq_source='$d_ipv6_mreq_source'
d_isascii='$d_isascii'
d_isblank='$d_isblank'
d_isfinite='$d_isfinite'
d_isfinitel='$d_isfinitel'
d_isinf='$d_isinf'
d_isinfl='$d_isinfl'
d_isless='$d_isless'
d_isnan='$d_isnan'
d_isnanl='$d_isnanl'
d_isnormal='$d_isnormal'
d_j0='$d_j0'
d_j0l='$d_j0l'
d_killpg='$d_killpg'
d_lc_monetary_2008='$d_lc_monetary_2008'
d_lchown='$d_lchown'
d_ldbl_dig='$d_ldbl_dig'
d_ldexpl='$d_ldexpl'
d_lgamma='$d_lgamma'
d_lgamma_r='$d_lgamma_r'
d_libm_lib_version='$d_libm_lib_version'
d_libname_unique='$d_libname_unique'
d_link='$d_link'
d_llrint='$d_llrint'
d_llrintl='$d_llrintl'
d_llround='$d_llround'
d_llroundl='$d_llroundl'
d_localtime64='$d_localtime64'
d_localtime_r='$d_localtime_r'
d_localtime_r_needs_tzset='$d_localtime_r_needs_tzset'
d_locconv='$d_locconv'
d_lockf='$d_lockf'
d_log1p='$d_log1p'
d_log2='$d_log2'
d_logb='$d_logb'
d_longdbl='$d_longdbl'
d_longlong='$d_longlong'
d_lrint='$d_lrint'
d_lrintl='$d_lrintl'
d_lround='$d_lround'
d_lroundl='$d_lroundl'
d_lseekproto='$d_lseekproto'
d_lstat='$d_lstat'
d_madvise='$d_madvise'
d_malloc_good_size='$d_malloc_good_size'
d_malloc_size='$d_malloc_size'
d_mblen='$d_mblen'
d_mbstowcs='$d_mbstowcs'
d_mbtowc='$d_mbtowc'
d_memchr='$d_memchr'
d_memcmp='$d_memcmp'
d_memcpy='$d_memcpy'
d_memmem='$d_memmem'
d_memmove='$d_memmove'
d_memset='$d_memset'
d_mkdir='$d_mkdir'
d_mkdtemp='$d_mkdtemp'
d_mkfifo='$d_mkfifo'
d_mkstemp='$d_mkstemp'
d_mkstemps='$d_mkstemps'
d_mktime64='$d_mktime64'
d_mktime='$d_mktime'
d_mmap='$d_mmap'
d_modfl='$d_modfl'
d_modflproto='$d_modflproto'
d_mprotect='$d_mprotect'
d_msg='$d_msg'
d_msg_ctrunc='$d_msg_ctrunc'
d_msg_dontroute='$d_msg_dontroute'
d_msg_oob='$d_msg_oob'
d_msg_peek='$d_msg_peek'
d_msg_proxy='$d_msg_proxy'
d_msgctl='$d_msgctl'
d_msgget='$d_msgget'
d_msghdr_s='$d_msghdr_s'
d_msgrcv='$d_msgrcv'
d_msgsnd='$d_msgsnd'
d_msync='$d_msync'
d_munmap='$d_munmap'
d_mymalloc='$d_mymalloc'
d_nan='$d_nan'
d_ndbm='$d_ndbm'
d_ndbm_h_uses_prototypes='$d_ndbm_h_uses_prototypes'
d_nearbyint='$d_nearbyint'
d_newlocale='$d_newlocale'
d_nextafter='$d_nextafter'
d_nexttoward='$d_nexttoward'
d_nice='$d_nice'
d_nl_langinfo='$d_nl_langinfo'
d_nv_preserves_uv='$d_nv_preserves_uv'
d_nv_zero_is_allbits_zero='$d_nv_zero_is_allbits_zero'
d_off64_t='$d_off64_t'
d_old_pthread_create_joinable='$d_old_pthread_create_joinable'
d_oldpthreads='$d_oldpthreads'
d_oldsock='$d_oldsock'
d_open3='$d_open3'
d_pathconf='$d_pathconf'
d_pause='$d_pause'
d_perl_otherlibdirs='$d_perl_otherlibdirs'
d_phostname='$d_phostname'
d_pipe='$d_pipe'
d_poll='$d_poll'
d_portable='$d_portable'
d_prctl='$d_prctl'
d_prctl_set_name='$d_prctl_set_name'
d_printf_format_null='$d_printf_format_null'
d_procselfexe='$d_procselfexe'
d_pseudofork='$d_pseudofork'
d_pthread_atfork='$d_pthread_atfork'
d_pthread_attr_setscope='$d_pthread_attr_setscope'
d_pthread_yield='$d_pthread_yield'
d_ptrdiff_t='$d_ptrdiff_t'
d_pwage='$d_pwage'
d_pwchange='$d_pwchange'
d_pwclass='$d_pwclass'
d_pwcomment='$d_pwcomment'
d_pwexpire='$d_pwexpire'
d_pwgecos='$d_pwgecos'
d_pwpasswd='$d_pwpasswd'
d_pwquota='$d_pwquota'
d_qgcvt='$d_qgcvt'
d_quad='$d_quad'
d_random_r='$d_random_r'
d_re_comp='$d_re_comp'
d_readdir64_r='$d_readdir64_r'
d_readdir='$d_readdir'
d_readdir_r='$d_readdir_r'
d_readlink='$d_readlink'
d_readv='$d_readv'
d_recvmsg='$d_recvmsg'
d_regcmp='$d_regcmp'
d_regcomp='$d_regcomp'
d_remainder='$d_remainder'
d_remquo='$d_remquo'
d_rename='$d_rename'
d_rewinddir='$d_rewinddir'
d_rint='$d_rint'
d_rmdir='$d_rmdir'
d_round='$d_round'
d_safebcpy='$d_safebcpy'
d_safemcpy='$d_safemcpy'
d_sanemcmp='$d_sanemcmp'
d_sbrkproto='$d_sbrkproto'
d_scalbn='$d_scalbn'
d_scalbnl='$d_scalbnl'
d_sched_yield='$d_sched_yield'
d_scm_rights='$d_scm_rights'
d_seekdir='$d_seekdir'
d_select='$d_select'
d_sem='$d_sem'
d_semctl='$d_semctl'
d_semctl_semid_ds='$d_semctl_semid_ds'
d_semctl_semun='$d_semctl_semun'
d_semget='$d_semget'
d_semop='$d_semop'
d_sendmsg='$d_sendmsg'
d_setegid='$d_setegid'
d_seteuid='$d_seteuid'
d_setgrent='$d_setgrent'
d_setgrent_r='$d_setgrent_r'
d_setgrps='$d_setgrps'
d_sethent='$d_sethent'
d_sethostent_r='$d_sethostent_r'
d_setitimer='$d_setitimer'
d_setlinebuf='$d_setlinebuf'
d_setlocale='$d_setlocale'
d_setlocale_r='$d_setlocale_r'
d_setnent='$d_setnent'
d_setnetent_r='$d_setnetent_r'
d_setpent='$d_setpent'
d_setpgid='$d_setpgid'
d_setpgrp2='$d_setpgrp2'
d_setpgrp='$d_setpgrp'
d_setprior='$d_setprior'
d_setproctitle='$d_setproctitle'
d_setprotoent_r='$d_setprotoent_r'
d_setpwent='$d_setpwent'
d_setpwent_r='$d_setpwent_r'
d_setregid='$d_setregid'
d_setresgid='$d_setresgid'
d_setresuid='$d_setresuid'
d_setreuid='$d_setreuid'
d_setrgid='$d_setrgid'
d_setruid='$d_setruid'
d_setsent='$d_setsent'
d_setservent_r='$d_setservent_r'
d_setsid='$d_setsid'
d_setvbuf='$d_setvbuf'
d_shm='$d_shm'
d_shmat='$d_shmat'
d_shmatprototype='$d_shmatprototype'
d_shmctl='$d_shmctl'
d_shmdt='$d_shmdt'
d_shmget='$d_shmget'
d_sigaction='$d_sigaction'
d_siginfo_si_addr='$d_siginfo_si_addr'
d_siginfo_si_band='$d_siginfo_si_band'
d_siginfo_si_errno='$d_siginfo_si_errno'
d_siginfo_si_fd='$d_siginfo_si_fd'
d_siginfo_si_pid='$d_siginfo_si_pid'
d_siginfo_si_status='$d_siginfo_si_status'
d_siginfo_si_uid='$d_siginfo_si_uid'
d_siginfo_si_value='$d_siginfo_si_value'
d_signbit='$d_signbit'
d_sigprocmask='$d_sigprocmask'
d_sigsetjmp='$d_sigsetjmp'
d_sin6_scope_id='$d_sin6_scope_id'
d_sitearch='$d_sitearch'
d_snprintf='$d_snprintf'
d_sockaddr_in6='$d_sockaddr_in6'
d_sockaddr_sa_len='$d_sockaddr_sa_len'
d_sockatmark='$d_sockatmark'
d_sockatmarkproto='$d_sockatmarkproto'
d_socket='$d_socket'
d_socklen_t='$d_socklen_t'
d_sockpair='$d_sockpair'
d_socks5_init='$d_socks5_init'
d_sprintf_returns_strlen='$d_sprintf_returns_strlen'
d_sqrtl='$d_sqrtl'
d_srand48_r='$d_srand48_r'
d_srandom_r='$d_srandom_r'
d_sresgproto='$d_sresgproto'
d_sresuproto='$d_sresuproto'
d_stat='$d_stat'
d_statblks='$d_statblks'
d_statfs_f_flags='$d_statfs_f_flags'
d_statfs_s='$d_statfs_s'
d_static_inline='$d_static_inline'
d_statvfs='$d_statvfs'
d_stdio_cnt_lval='$d_stdio_cnt_lval'
d_stdio_ptr_lval='$d_stdio_ptr_lval'
d_stdio_ptr_lval_nochange_cnt='$d_stdio_ptr_lval_nochange_cnt'
d_stdio_ptr_lval_sets_cnt='$d_stdio_ptr_lval_sets_cnt'
d_stdio_stream_array='$d_stdio_stream_array'
d_stdiobase='$d_stdiobase'
d_stdstdio='$d_stdstdio'
d_strchr='$d_strchr'
d_strcoll='$d_strcoll'
d_strctcpy='$d_strctcpy'
d_strerrm='$d_strerrm'
d_strerror='$d_strerror'
d_strerror_r='$d_strerror_r'
d_strftime='$d_strftime'
d_strlcat='$d_strlcat'
d_strlcpy='$d_strlcpy'
d_strtod='$d_strtod'
d_strtol='$d_strtol'
d_strtold='$d_strtold'
d_strtoll='$d_strtoll'
d_strtoq='$d_strtoq'
d_strtoul='$d_strtoul'
d_strtoull='$d_strtoull'
d_strtouq='$d_strtouq'
d_strxfrm='$d_strxfrm'
d_suidsafe='$d_suidsafe'
d_symlink='$d_symlink'
d_syscall='$d_syscall'
d_syscallproto='$d_syscallproto'
d_sysconf='$d_sysconf'
d_sysernlst='$d_sysernlst'
d_syserrlst='$d_syserrlst'
d_system='$d_system'
d_tcgetpgrp='$d_tcgetpgrp'
d_tcsetpgrp='$d_tcsetpgrp'
d_telldir='$d_telldir'
d_telldirproto='$d_telldirproto'
d_tgamma='$d_tgamma'
d_time='$d_time'
d_timegm='$d_timegm'
d_times='$d_times'
d_tm_tm_gmtoff='$d_tm_tm_gmtoff'
d_tm_tm_zone='$d_tm_tm_zone'
d_tmpnam_r='$d_tmpnam_r'
d_trunc='$d_trunc'
d_truncate='$d_truncate'
d_truncl='$d_truncl'
d_ttyname_r='$d_ttyname_r'
d_tzname='$d_tzname'
d_u32align='$d_u32align'
d_ualarm='$d_ualarm'
d_umask='$d_umask'
d_uname='$d_uname'
d_union_semun='$d_union_semun'
d_unordered='$d_unordered'
d_unsetenv='$d_unsetenv'
d_uselocale='$d_uselocale'
d_usleep='$d_usleep'
d_usleepproto='$d_usleepproto'
d_ustat='$d_ustat'
d_vendorarch='$d_vendorarch'
d_vendorbin='$d_vendorbin'
d_vendorlib='$d_vendorlib'
d_vendorscript='$d_vendorscript'
d_vfork='$d_vfork'
d_void_closedir='$d_void_closedir'
d_voidsig='$d_voidsig'
d_voidtty='$d_voidtty'
d_volatile='$d_volatile'
d_vprintf='$d_vprintf'
d_vsnprintf='$d_vsnprintf'
d_wait4='$d_wait4'
d_waitpid='$d_waitpid'
d_wcscmp='$d_wcscmp'
d_wcstombs='$d_wcstombs'
d_wcsxfrm='$d_wcsxfrm'
d_wctomb='$d_wctomb'
d_writev='$d_writev'
d_xenix='$d_xenix'
date='$date'
db_hashtype='$db_hashtype'
db_prefixtype='$db_prefixtype'
db_version_major='$db_version_major'
db_version_minor='$db_version_minor'
db_version_patch='$db_version_patch'
direntrytype='$direntrytype'
dlext='$dlext'
dlsrc='$dlsrc'
doubleinfbytes='$doubleinfbytes'
doublekind='$doublekind'
doublemantbits='$doublemantbits'
doublenanbytes='$doublenanbytes'
doublesize='$doublesize'
drand01='$drand01'
drand48_r_proto='$drand48_r_proto'
dtrace='$dtrace'
dtraceobject='$dtraceobject'
dynamic_ext='$dynamic_ext'
eagain='$eagain'
ebcdic='$ebcdic'
echo='$echo'
egrep='$egrep'
emacs='$emacs'
endgrent_r_proto='$endgrent_r_proto'
endhostent_r_proto='$endhostent_r_proto'
endnetent_r_proto='$endnetent_r_proto'
endprotoent_r_proto='$endprotoent_r_proto'
endpwent_r_proto='$endpwent_r_proto'
endservent_r_proto='$endservent_r_proto'
eunicefix='$eunicefix'
exe_ext='$exe_ext'
expr='$expr'
extensions='$extensions'
extern_C='$extern_C'
extras='$extras'
fflushNULL='$fflushNULL'
fflushall='$fflushall'
find='$find'
firstmakefile='$firstmakefile'
flex='$flex'
fpossize='$fpossize'
fpostype='$fpostype'
freetype='$freetype'
from='$from'
full_ar='$full_ar'
full_csh='$full_csh'
full_sed='$full_sed'
gccansipedantic='$gccansipedantic'
gccosandvers='$gccosandvers'
gccversion='$gccversion'
getgrent_r_proto='$getgrent_r_proto'
getgrgid_r_proto='$getgrgid_r_proto'
getgrnam_r_proto='$getgrnam_r_proto'
gethostbyaddr_r_proto='$gethostbyaddr_r_proto'
gethostbyname_r_proto='$gethostbyname_r_proto'
gethostent_r_proto='$gethostent_r_proto'
getlogin_r_proto='$getlogin_r_proto'
getnetbyaddr_r_proto='$getnetbyaddr_r_proto'
getnetbyname_r_proto='$getnetbyname_r_proto'
getnetent_r_proto='$getnetent_r_proto'
getprotobyname_r_proto='$getprotobyname_r_proto'
getprotobynumber_r_proto='$getprotobynumber_r_proto'
getprotoent_r_proto='$getprotoent_r_proto'
getpwent_r_proto='$getpwent_r_proto'
getpwnam_r_proto='$getpwnam_r_proto'
getpwuid_r_proto='$getpwuid_r_proto'
getservbyname_r_proto='$getservbyname_r_proto'
getservbyport_r_proto='$getservbyport_r_proto'
getservent_r_proto='$getservent_r_proto'
getspnam_r_proto='$getspnam_r_proto'
gidformat='$gidformat'
gidsign='$gidsign'
gidsize='$gidsize'
gidtype='$gidtype'
glibpth='$glibpth'
gmake='$gmake'
gmtime_r_proto='$gmtime_r_proto'
gnulibc_version='$gnulibc_version'
grep='$grep'
groupcat='$groupcat'
groupstype='$groupstype'
gzip='$gzip'
h_fcntl='$h_fcntl'
h_sysfile='$h_sysfile'
hint='$hint'
hostcat='$hostcat'
hostgenerate='$hostgenerate'
hostosname='$hostosname'
hostperl='$hostperl'
html1dir='$html1dir'
html1direxp='$html1direxp'
html3dir='$html3dir'
html3direxp='$html3direxp'
i16size='$i16size'
i16type='$i16type'
i32size='$i32size'
i32type='$i32type'
i64size='$i64size'
i64type='$i64type'
i8size='$i8size'
i8type='$i8type'
i_arpainet='$i_arpainet'
i_assert='$i_assert'
i_bfd='$i_bfd'
i_bsdioctl='$i_bsdioctl'
i_crypt='$i_crypt'
i_db='$i_db'
i_dbm='$i_dbm'
i_dirent='$i_dirent'
i_dlfcn='$i_dlfcn'
i_execinfo='$i_execinfo'
i_fcntl='$i_fcntl'
i_fenv='$i_fenv'
i_float='$i_float'
i_fp='$i_fp'
i_fp_class='$i_fp_class'
i_gdbm='$i_gdbm'
i_gdbm_ndbm='$i_gdbm_ndbm'
i_gdbmndbm='$i_gdbmndbm'
i_grp='$i_grp'
i_ieeefp='$i_ieeefp'
i_inttypes='$i_inttypes'
i_langinfo='$i_langinfo'
i_libutil='$i_libutil'
i_limits='$i_limits'
i_locale='$i_locale'
i_machcthr='$i_machcthr'
i_malloc='$i_malloc'
i_mallocmalloc='$i_mallocmalloc'
i_math='$i_math'
i_memory='$i_memory'
i_mntent='$i_mntent'
i_ndbm='$i_ndbm'
i_netdb='$i_netdb'
i_neterrno='$i_neterrno'
i_netinettcp='$i_netinettcp'
i_niin='$i_niin'
i_poll='$i_poll'
i_prot='$i_prot'
i_pthread='$i_pthread'
i_pwd='$i_pwd'
i_quadmath='$i_quadmath'
i_rpcsvcdbm='$i_rpcsvcdbm'
i_sgtty='$i_sgtty'
i_shadow='$i_shadow'
i_socks='$i_socks'
i_stdarg='$i_stdarg'
i_stdbool='$i_stdbool'
i_stddef='$i_stddef'
i_stdint='$i_stdint'
i_stdlib='$i_stdlib'
i_string='$i_string'
i_sunmath='$i_sunmath'
i_sysaccess='$i_sysaccess'
i_sysdir='$i_sysdir'
i_sysfile='$i_sysfile'
i_sysfilio='$i_sysfilio'
i_sysin='$i_sysin'
i_sysioctl='$i_sysioctl'
i_syslog='$i_syslog'
i_sysmman='$i_sysmman'
i_sysmode='$i_sysmode'
i_sysmount='$i_sysmount'
i_sysndir='$i_sysndir'
i_sysparam='$i_sysparam'
i_syspoll='$i_syspoll'
i_sysresrc='$i_sysresrc'
i_syssecrt='$i_syssecrt'
i_sysselct='$i_sysselct'
i_syssockio='$i_syssockio'
i_sysstat='$i_sysstat'
i_sysstatfs='$i_sysstatfs'
i_sysstatvfs='$i_sysstatvfs'
i_systime='$i_systime'
i_systimek='$i_systimek'
i_systimes='$i_systimes'
i_systypes='$i_systypes'
i_sysuio='$i_sysuio'
i_sysun='$i_sysun'
i_sysutsname='$i_sysutsname'
i_sysvfs='$i_sysvfs'
i_syswait='$i_syswait'
i_termio='$i_termio'
i_termios='$i_termios'
i_time='$i_time'
i_unistd='$i_unistd'
i_ustat='$i_ustat'
i_utime='$i_utime'
i_values='$i_values'
i_varargs='$i_varargs'
i_varhdr='$i_varhdr'
i_vfork='$i_vfork'
i_xlocale='$i_xlocale'
ignore_versioned_solibs='$ignore_versioned_solibs'
inc_version_list='$inc_version_list'
inc_version_list_init='$inc_version_list_init'
incpath='$incpath'
incpth='$incpth'
inews='$inews'
initialinstalllocation='$initialinstalllocation'
installarchlib='$installarchlib'
installbin='$installbin'
installhtml1dir='$installhtml1dir'
installhtml3dir='$installhtml3dir'
installman1dir='$installman1dir'
installman3dir='$installman3dir'
installprefix='$installprefix'
installprefixexp='$installprefixexp'
installprivlib='$installprivlib'
installscript='$installscript'
installsitearch='$installsitearch'
installsitebin='$installsitebin'
installsitehtml1dir='$installsitehtml1dir'
installsitehtml3dir='$installsitehtml3dir'
installsitelib='$installsitelib'
installsiteman1dir='$installsiteman1dir'
installsiteman3dir='$installsiteman3dir'
installsitescript='$installsitescript'
installstyle='$installstyle'
installusrbinperl='$installusrbinperl'
installvendorarch='$installvendorarch'
installvendorbin='$installvendorbin'
installvendorhtml1dir='$installvendorhtml1dir'
installvendorhtml3dir='$installvendorhtml3dir'
installvendorlib='$installvendorlib'
installvendorman1dir='$installvendorman1dir'
installvendorman3dir='$installvendorman3dir'
installvendorscript='$installvendorscript'
intsize='$intsize'
issymlink='$issymlink'
ivdformat='$ivdformat'
ivsize='$ivsize'
ivtype='$ivtype'
known_extensions='$known_extensions'
ksh='$ksh'
ld='$ld'
ld_can_script='$ld_can_script'
lddlflags='$lddlflags'
ldflags='$ldflags'
ldflags_uselargefiles='$ldflags_uselargefiles'
ldlibpthname='$ldlibpthname'
less='$less'
lib_ext='$lib_ext'
libc='$libc'
libperl='$libperl'
libpth='$libpth'
libs='$libs'
libsdirs='$libsdirs'
libsfiles='$libsfiles'
libsfound='$libsfound'
libspath='$libspath'
libswanted='$libswanted'
libswanted_uselargefiles='$libswanted_uselargefiles'
line='$line'
lint='$lint'
lkflags='$lkflags'
ln='$ln'
lns='$lns'
localtime_r_proto='$localtime_r_proto'
locincpth='$locincpth'
loclibpth='$loclibpth'
longdblinfbytes='$longdblinfbytes'
longdblkind='$longdblkind'
longdblmantbits='$longdblmantbits'
longdblnanbytes='$longdblnanbytes'
longdblsize='$longdblsize'
longlongsize='$longlongsize'
longsize='$longsize'
lp='$lp'
lpr='$lpr'
ls='$ls'
lseeksize='$lseeksize'
lseektype='$lseektype'
mail='$mail'
mailx='$mailx'
make='$make'
make_set_make='$make_set_make'
mallocobj='$mallocobj'
mallocsrc='$mallocsrc'
malloctype='$malloctype'
man1dir='$man1dir'
man1direxp='$man1direxp'
man1ext='$man1ext'
man3dir='$man3dir'
man3direxp='$man3direxp'
man3ext='$man3ext'
mips_type='$mips_type'
mistrustnm='$mistrustnm'
mkdir='$mkdir'
mmaptype='$mmaptype'
modetype='$modetype'
more='$more'
multiarch='$multiarch'
mv='$mv'
myarchname='$myarchname'
mydomain='$mydomain'
myhostname='$myhostname'
myuname='$myuname'
n='$n'
need_va_copy='$need_va_copy'
netdb_hlen_type='$netdb_hlen_type'
netdb_host_type='$netdb_host_type'
netdb_name_type='$netdb_name_type'
netdb_net_type='$netdb_net_type'
nm='$nm'
nm_opt='$nm_opt'
nm_so_opt='$nm_so_opt'
nonxs_ext='$nonxs_ext'
nroff='$nroff'
nvEUformat='$nvEUformat'
nvFUformat='$nvFUformat'
nvGUformat='$nvGUformat'
nv_overflows_integers_at='$nv_overflows_integers_at'
nv_preserves_uv_bits='$nv_preserves_uv_bits'
nveformat='$nveformat'
nvfformat='$nvfformat'
nvgformat='$nvgformat'
nvmantbits='$nvmantbits'
nvsize='$nvsize'
nvtype='$nvtype'
o_nonblock='$o_nonblock'
obj_ext='$obj_ext'
old_pthread_create_joinable='$old_pthread_create_joinable'
optimize='$optimize'
orderlib='$orderlib'
osname='$osname'
osvers='$osvers'
otherlibdirs='$otherlibdirs'
package='$package'
pager='$pager'
passcat='$passcat'
patchlevel='$patchlevel'
path_sep='$path_sep'
perl5='$perl5'
perl='$perl'
perl_patchlevel='$perl_patchlevel'
perl_static_inline='$perl_static_inline'
perladmin='$perladmin'
perllibs='$perllibs'
perlpath='$perlpath'
pg='$pg'
phostname='$phostname'
pidtype='$pidtype'
plibpth='$plibpth'
pmake='$pmake'
pr='$pr'
prefix='$prefix'
prefixexp='$prefixexp'
privlib='$privlib'
privlibexp='$privlibexp'
procselfexe='$procselfexe'
prototype='$prototype'
ptrsize='$ptrsize'
quadkind='$quadkind'
quadtype='$quadtype'
randbits='$randbits'
randfunc='$randfunc'
random_r_proto='$random_r_proto'
randseedtype='$randseedtype'
ranlib='$ranlib'
rd_nodata='$rd_nodata'
readdir64_r_proto='$readdir64_r_proto'
readdir_r_proto='$readdir_r_proto'
revision='$revision'
rm='$rm'
rm_try='$rm_try'
rmail='$rmail'
run='$run'
runnm='$runnm'
sGMTIME_max='$sGMTIME_max'
sGMTIME_min='$sGMTIME_min'
sLOCALTIME_max='$sLOCALTIME_max'
sLOCALTIME_min='$sLOCALTIME_min'
sPRIEUldbl='$sPRIEUldbl'
sPRIFUldbl='$sPRIFUldbl'
sPRIGUldbl='$sPRIGUldbl'
sPRIXU64='$sPRIXU64'
sPRId64='$sPRId64'
sPRIeldbl='$sPRIeldbl'
sPRIfldbl='$sPRIfldbl'
sPRIgldbl='$sPRIgldbl'
sPRIi64='$sPRIi64'
sPRIo64='$sPRIo64'
sPRIu64='$sPRIu64'
sPRIx64='$sPRIx64'
sSCNfldbl='$sSCNfldbl'
sched_yield='$sched_yield'
scriptdir='$scriptdir'
scriptdirexp='$scriptdirexp'
sed='$sed'
seedfunc='$seedfunc'
selectminbits='$selectminbits'
selecttype='$selecttype'
sendmail='$sendmail'
setgrent_r_proto='$setgrent_r_proto'
sethostent_r_proto='$sethostent_r_proto'
setlocale_r_proto='$setlocale_r_proto'
setnetent_r_proto='$setnetent_r_proto'
setprotoent_r_proto='$setprotoent_r_proto'
setpwent_r_proto='$setpwent_r_proto'
setservent_r_proto='$setservent_r_proto'
sh='$sh'
shar='$shar'
sharpbang='$sharpbang'
shmattype='$shmattype'
shortsize='$shortsize'
shrpenv='$shrpenv'
shsharp='$shsharp'
sig_count='$sig_count'
sig_name='$sig_name'
sig_name_init='$sig_name_init'
sig_num='$sig_num'
sig_num_init='$sig_num_init'
sig_size='$sig_size'
signal_t='$signal_t'
sitearch='$sitearch'
sitearchexp='$sitearchexp'
sitebin='$sitebin'
sitebinexp='$sitebinexp'
sitehtml1dir='$sitehtml1dir'
sitehtml1direxp='$sitehtml1direxp'
sitehtml3dir='$sitehtml3dir'
sitehtml3direxp='$sitehtml3direxp'
sitelib='$sitelib'
sitelib_stem='$sitelib_stem'
sitelibexp='$sitelibexp'
siteman1dir='$siteman1dir'
siteman1direxp='$siteman1direxp'
siteman3dir='$siteman3dir'
siteman3direxp='$siteman3direxp'
siteprefix='$siteprefix'
siteprefixexp='$siteprefixexp'
sitescript='$sitescript'
sitescriptexp='$sitescriptexp'
sizesize='$sizesize'
sizetype='$sizetype'
sleep='$sleep'
smail='$smail'
so='$so'
sockethdr='$sockethdr'
socketlib='$socketlib'
socksizetype='$socksizetype'
sort='$sort'
spackage='$spackage'
spitshell='$spitshell'
srand48_r_proto='$srand48_r_proto'
srandom_r_proto='$srandom_r_proto'
src='$src'
ssizetype='$ssizetype'
st_ino_sign='$st_ino_sign'
st_ino_size='$st_ino_size'
startperl='$startperl'
startsh='$startsh'
static_ext='$static_ext'
stdchar='$stdchar'
stdio_base='$stdio_base'
stdio_bufsiz='$stdio_bufsiz'
stdio_cnt='$stdio_cnt'
stdio_filbuf='$stdio_filbuf'
stdio_ptr='$stdio_ptr'
stdio_stream_array='$stdio_stream_array'
strerror_r_proto='$strerror_r_proto'
strings='$strings'
submit='$submit'
subversion='$subversion'
sysman='$sysman'
sysroot='$sysroot'
tail='$tail'
tar='$tar'
targetarch='$targetarch'
targetdir='$targetdir'
targetenv='$targetenv'
targethost='$targethost'
targetmkdir='$targetmkdir'
targetport='$targetport'
targetsh='$targetsh'
tbl='$tbl'
tee='$tee'
test='$test'
timeincl='$timeincl'
timetype='$timetype'
tmpnam_r_proto='$tmpnam_r_proto'
to='$to'
touch='$touch'
tr='$tr'
trnl='$trnl'
troff='$troff'
ttyname_r_proto='$ttyname_r_proto'
u16size='$u16size'
u16type='$u16type'
u32size='$u32size'
u32type='$u32type'
u64size='$u64size'
u64type='$u64type'
u8size='$u8size'
u8type='$u8type'
uidformat='$uidformat'
uidsign='$uidsign'
uidsize='$uidsize'
uidtype='$uidtype'
uname='$uname'
uniq='$uniq'
uquadtype='$uquadtype'
use5005threads='$use5005threads'
use64bitall='$use64bitall'
use64bitint='$use64bitint'
usecbacktrace='$usecbacktrace'
usecrosscompile='$usecrosscompile'
usedevel='$usedevel'
usedl='$usedl'
usedtrace='$usedtrace'
usefaststdio='$usefaststdio'
useithreads='$useithreads'
usekernprocpathname='$usekernprocpathname'
uselargefiles='$uselargefiles'
uselongdouble='$uselongdouble'
usemallocwrap='$usemallocwrap'
usemorebits='$usemorebits'
usemultiplicity='$usemultiplicity'
usemymalloc='$usemymalloc'
usenm='$usenm'
usensgetexecutablepath='$usensgetexecutablepath'
useopcode='$useopcode'
useperlio='$useperlio'
useposix='$useposix'
usequadmath='$usequadmath'
usereentrant='$usereentrant'
userelocatableinc='$userelocatableinc'
useshrplib='$useshrplib'
usesitecustomize='$usesitecustomize'
usesocks='$usesocks'
usethreads='$usethreads'
usevendorprefix='$usevendorprefix'
useversionedarchname='$useversionedarchname'
usevfork='$usevfork'
usrinc='$usrinc'
uuname='$uuname'
uvXUformat='$uvXUformat'
uvoformat='$uvoformat'
uvsize='$uvsize'
uvtype='$uvtype'
uvuformat='$uvuformat'
uvxformat='$uvxformat'
vaproto='$vaproto'
vendorarch='$vendorarch'
vendorarchexp='$vendorarchexp'
vendorbin='$vendorbin'
vendorbinexp='$vendorbinexp'
vendorhtml1dir='$vendorhtml1dir'
vendorhtml1direxp='$vendorhtml1direxp'
vendorhtml3dir='$vendorhtml3dir'
vendorhtml3direxp='$vendorhtml3direxp'
vendorlib='$vendorlib'
vendorlib_stem='$vendorlib_stem'
vendorlibexp='$vendorlibexp'
vendorman1dir='$vendorman1dir'
vendorman1direxp='$vendorman1direxp'
vendorman3dir='$vendorman3dir'
vendorman3direxp='$vendorman3direxp'
vendorprefix='$vendorprefix'
vendorprefixexp='$vendorprefixexp'
vendorscript='$vendorscript'
vendorscriptexp='$vendorscriptexp'
version='$version'
version_patchlevel_string='$version_patchlevel_string'
versiononly='$versiononly'
vi='$vi'
xlibpth='$xlibpth'
yacc='$yacc'
yaccflags='$yaccflags'
zcat='$zcat'
zip='$zip'
EOT

: add special variables
$test -f $src/patchlevel.h && \
awk '/^#define[ 	]+PERL_/ {printf "%s=%s\n",$2,$3}' $src/patchlevel.h >>config.sh
echo "PERL_PATCHLEVEL='$perl_patchlevel'" >>config.sh
echo "PERL_CONFIG_SH=true" >>config.sh

: propagate old symbols
if $test -f UU/config.sh; then
	<UU/config.sh $sort | $uniq >UU/oldconfig.sh
	$sed -n 's/^\([a-zA-Z_0-9]*\)=.*/\1/p' \
		config.sh config.sh UU/oldconfig.sh |\
		$sort | $uniq -u >UU/oldsyms
	set X `$cat UU/oldsyms`
	shift
	case $# in
	0) ;;
	*)
		$cat <<EOM
Hmm...You had some extra variables I don't know about...I'll try to keep 'em...
EOM
		echo ": Variables propagated from previous config.sh file." >>config.sh
		for sym in `$cat UU/oldsyms`; do
			echo "    Propagating $hint variable "'$'"$sym..."
			eval 'tmp="$'"${sym}"'"'
			echo "$tmp" | \
				sed -e "s/'/'\"'\"'/g" -e "s/^/$sym='/" -e "s/$/'/" >>config.sh
		done
		;;
	esac
fi

: preserve RCS keywords in files with variable substitution, grrr
Id='$Id'

: Finish up by extracting the .SH files
case "$alldone" in
exit)
	$rm -rf UU
	echo "Extraction done."
	exit 0
	;;
cont)
	;;
'')
	dflt=''
	nostick=true
	$cat <<EOM

If you'd like to make any changes to the config.sh file before I begin
to configure things, do it as a shell escape now (e.g. !vi config.sh).

EOM
	rp="Press return or use a shell escape to edit config.sh:"
	. UU/myread
	nostick=''
	case "$ans" in
	'') ;;
	*) : in case they cannot read
		sh 1>&4 -c "$ans";;
	esac
	;;
esac

: if this fails, just run all the .SH files by hand
. ./config.sh

echo " "
exec 1>&4
pwd=`pwd`
. ./UU/extract
cd "$pwd"

if $contains '^depend:' [Mm]akefile >/dev/null 2>&1; then
	dflt=y
	case "$silent" in
	true) ;;
	*)
		$cat <<EOM

Now you need to generate make dependencies by running "$make depend".
You might prefer to run it in background: "$make depend > makedepend.out &"
It can take a while, so you might not want to run it right now.

EOM
		;;
	esac
	rp="Run $make depend now?"
	. UU/myread
	case "$ans" in
	y*)
		$make depend && echo "Now you must run '$make'."
		;;
	*)
		echo "You must run '$make depend' then '$make'."
		;;
	esac
elif test -f [Mm]akefile; then
	echo " "
	echo "Now you must run a $make."
else
	echo "Configure done."
fi

if $test -f Policy.sh; then
    $cat <<EOM

If you compile $package on a different machine or from a different object
directory, copy the Policy.sh file from this object directory to the
new one before you run Configure -- this will help you with most of
the policy defaults.

EOM
fi
if $test -f config.msg; then
    echo "Hmm.  I also noted the following information while running:"
    echo " "
    $cat config.msg >&4
    $rm -f config.msg
fi
$rm -f kit*isdone ark*isdone
$rm -rf UU

: End of Configure

@


1.39
log
@Fix merge issues, remove excess files - match perl-5.24.2 dist

OK bluhm@@, Reads ok sthen@@
@
text
@d5462 19
d20493 2
a20494 2
#define LONGDBLSIZE $longdblsize
#define LONGDBLKIND $longdblkind
d20526 5
a20530 1
#endif
a20534 5
#ifdef HAS_LONG_DOUBLE
# if LONG_DOUBLEKIND == 3 || LONG_DOUBLEKIND == 4
/* the 80-bit long doubles might have garbage in their excess bytes */
    memset((char *)&ldinf + 10, '\0', LONG_DOUBLESIZE - 10);
# endif
d20762 3
a20764 3
randfunc=Perl_drand48
drand01="Perl_drand48()"
seedfunc="Perl_drand48_init"
d23615 1
d23853 2
@


1.38
log
@Zero out excess bytes in perl long doubles

From upstream commits by Niko Tyni <ntyni AT debian.org>
* dd6885360b15e763e0706dc28555eea328de432d
* 6b2c7479d6d33249c2385d8a36d8ee9e61e1a519

ok aja@@
@
text
@a5461 19
	case "$gccversion" in
	1*) ;;
	2*) ;;
	?*) 	echo " "
		echo "Checking if your compiler accepts -fno-delete-null-pointer-checks" 2>&1
		echo 'int main(void) { return 0; }' > gcctest.c
		if $cc -O2 -Werror -fno-delete-null-pointer-checks -o gcctest gcctest.c; then
			echo "Yes, it does." 2>&1
			case "$ccflags" in
			*delete-null-pointer-checks*)
				echo "Leaving current flags $ccflags alone." 2>&1
				;;
			*) dflt="$dflt -fno-delete-null-pointer-checks" ;;
			esac
		else
			echo "Nope, it doesn't, but that's ok." 2>&1
		fi
		;;
	esac
d20474 2
a20475 2
#define LONG_DOUBLESIZE $longdblsize
#define LONG_DOUBLEKIND $longdblkind
d20507 6
a20515 1
    memset((char *)&ldnan + 10, '\0', LONG_DOUBLESIZE - 10);
a20516 4
  if (argc == 2) {
    switch (argv[1][0]) {
    case '1': bytes(&dinf, sizeof(dinf)); break;
    case '2': bytes(&dnan, sizeof(dnan)); break;
d20744 3
a20746 3
randfunc=drand48
drand01="drand48()"
seedfunc="srand48"
a23596 1
	    CVS) ;;
a23833 2
	CVS|RCS|SCCS|.svn)
		;;
@


1.37
log
@get rid of flag clang doesn't grok (include -Werror in Configure, because
clang will not error out on unknown flags)

okay millert@@, deraadt@@
@
text
@d20493 2
a20494 2
#define LONGDBLSIZE $longdblsize
#define LONGDBLKIND $longdblkind
d20526 5
a20530 1
#endif
a20534 5
#ifdef HAS_LONG_DOUBLE
# if LONG_DOUBLEKIND == 3 || LONG_DOUBLEKIND == 4
/* the 80-bit long doubles might have garbage in their excess bytes */
    memset((char *)&ldinf + 10, '\0', LONG_DOUBLESIZE - 10);
# endif
@


1.36
log
@Apply local patches - perl-5.24.1
@
text
@d5468 1
a5468 1
		if $cc -O2 -fno-delete-null-pointer-checks -o gcctest gcctest.c; then
@


1.35
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@d5462 19
d20763 3
a20765 3
randfunc=Perl_drand48
drand01="Perl_drand48()"
seedfunc="Perl_drand48_init"
d23616 1
d23854 2
@


1.34
log
@Update to perl 5.20.3

OK bluhm@@
@
text
@d14 7
a20 4
# Note: this Configure script was generated automatically. Rather than
# working with this copy of Configure, you may wish to get metaconfig.
# The dist package (which contains metaconfig) is available via SVN:
#     svn co https://svn.code.sf.net/p/dist/code/trunk/dist
a31 1
#
d33 1
a33 1
# Generated on Wed Jun  4 08:58:13 CEST 2014 [metaconfig 3.5 PL0]
d72 4
a75 1
if test ! -c /dev/null ; then
d380 1
d385 2
d396 1
d406 1
d416 1
d436 1
d465 4
d478 3
d487 3
d492 1
d494 1
d497 1
d597 2
d607 1
d609 2
d613 3
d617 1
d620 2
d624 4
a631 1
d_lc_monetary_2008=''
d633 4
d638 1
d642 4
d657 1
a668 1
d_modfl_pow32_bug=''
d679 9
d709 1
d724 5
d730 1
d732 1
d737 1
d793 8
d837 1
d886 1
d900 1
d902 1
d927 1
d929 1
d942 1
a942 1
bootstrap_charset=''
d966 1
d980 1
d982 1
d1025 1
d1030 1
d1083 4
d1120 1
a1129 4
mad=''
madlyh=''
madlyobj=''
madlysrc=''
d1146 3
d1325 1
d1343 1
a1425 4
: Trailing extension.  Override this in a hint file, if needed.
: Extra object files, if any, needed on this platform.
archobjs=''
archname=''
d1438 3
a1463 2
: set usethreads on the Configure command line to enable threads.
usereentrant='undef'
d1477 3
d1482 1
a1482 1
libswanted="cl pthread socket bind inet nsl nm ndbm gdbm dbm db malloc dl ld"
a1696 1
override=''
d1726 1
a1726 1
	-O) shift; override=true;;
d1835 1
a1835 1
  -O : let -D and -U override definitions from loaded configuration file.
d1882 5
d1895 2
a1896 2
case "`echo AbyZ | tr '[:lower:]' '[:upper:]' 2>/dev/null`" in
ABYZ) spackage=`echo $first | tr '[:lower:]' '[:upper:]'`$last;;
d2057 1
a2057 1
	test "$override" && . ./optdef.sh
a2136 1
echo " "
d2141 1
a2141 1
	case "`echo foo|tr '\n' x 2>/dev/null`" in
d2146 1
a2146 1
	case "`echo foo|tr '\012' x 2>/dev/null`" in
d2151 1
a2151 1
       case "`echo foo|tr '\r\n' xy 2>/dev/null`" in
d2744 1
a2744 1
		# bail out here with a useful message than fail 
d2748 1
a2748 1
			$cat >&4 <<EOM 
d2770 1
a2770 1
                fi  
d2786 1
a2786 1
case "$cc" in        
d2788 1
a2788 1
*)  $rm -f try try.*              
d2800 1
a2800 1
        $cat >&4 <<EOM         
d2894 20
a2913 10
			awk -v src="$src" '{
				dir=$1;
				if (!sub(/\/[^\/]*$/, "", dir)) { dir = "." }
				mf[dir] = mf[dir]" "src"/"$1;
			} END {
				for (d in mf) {
					if (d != ".") { system("mkdir -p "d) }
					system("ln -sf "mf[d]" "d);
				}
			}' $src/MANIFEST
d2924 2
a2925 2
			if test ! -f x2p/walk.c; then
				echo "Failed to create the symlinks (x2p/walk.c missing).  Aborting." >&4
d3227 2
a3228 2
case "`echo AbyZ | $tr '[:lower:]' '[:upper:]' 2>/dev/null`" in
ABYZ)
a3373 2
	$test -d /NextApps && set X `hostinfo | grep 'NeXT Mach.*:' | \
		$sed -e 's/://' -e 's/\./_/'` && osname=next && osvers=$4
d3378 1
a3410 1
		next*) osname=next ;;
a3507 1
		next*) osname=next ;;
d3809 1
a3809 1
test "$override" && . ./optdef.sh
d4356 1
a4356 1
		 $awk '{ printf "%d_%d_%d\n", $1, $2, $3 }'`
d4358 1
a4358 1
		 $awk '{ printf "%d_%d_%d\n", $1, $2, $3 }'`
d4362 1
a4362 1
		 $awk '{ printf "%d.%d.%d\n", $1, $2, $3 }'`
d4364 1
a4364 1
		 $awk '{ printf "%d.%d.%d\n", $1, $2, $3 }'`
d5236 6
d5255 6
d5275 3
a5461 19
	case "$gccversion" in
	1*) ;;
	2*) ;;
	?*) 	echo " "
		echo "Checking if your compiler accepts -fno-delete-null-pointer-checks" 2>&1
		echo 'int main(void) { return 0; }' > gcctest.c
		if $cc -O2 -fno-delete-null-pointer-checks -o gcctest gcctest.c; then
			echo "Yes, it does." 2>&1
			case "$ccflags" in
			*delete-null-pointer-checks*)
				echo "Leaving current flags $ccflags alone." 2>&1
				;;
			*) dflt="$dflt -fno-delete-null-pointer-checks" ;;
			esac
		else
			echo "Nope, it doesn't, but that's ok." 2>&1
		fi
		;;
	esac
d5477 14
a5490 3
	case "$gccversion" in
	?*)	set stack-protector -fstack-protector
		eval $checkccflag
d5566 6
a5571 1
*)  cppflags="$cppflags $ccflags" ;;
d5638 6
d5775 5
d5804 2
d6330 1
a6330 1
: check for length of double
d6332 7
a6338 4
case "$doublesize" in
'')
	echo "Checking to see how big your double precision numbers are..." >&4
	$cat >try.c <<EOCP
d6340 16
a6355 3
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
a6356 4
int main()
{
    printf("%d\n", (int)sizeof(double));
    exit(0);
a6358 19
	set try
	if eval $compile_ok; then
		doublesize=`$run ./try`
		echo "Your double is $doublesize bytes long."
	else
		dflt='8'
		echo "(I can't seem to compile the test program.  Guessing...)"
		rp="What is the size of a double precision number (in bytes)?"
		. ./myread
		doublesize="$ans"
	fi
	;;
esac
$rm_try

: check for long doubles
echo " "
echo "Checking to see if you have long double..." >&4
echo 'int main() { long double x = 7.0; }' > try.c
d6360 1
a6360 1
if eval $compile; then
d6362 2
a6363 1
	echo "You have long double."
d6366 2
a6367 1
	echo "You do not have long double."
d6369 2
a6370 2
$rm_try
set d_longdbl
d6373 6
a6378 19
: check for length of long double
case "${d_longdbl}${longdblsize}" in
$define)
	echo " "
	echo "Checking to see how big your long doubles are..." >&4
	$cat >try.c <<'EOCP'
#include <stdio.h>
int main()
{
	printf("%d\n", sizeof(long double));
}
EOCP
	set try
	set try
	if eval $compile; then
		longdblsize=`$run ./try`
		echo "Your long doubles are $longdblsize bytes long."
	else
		dflt='8'
d6380 23
a6402 10
		echo "(I can't seem to compile the test program.  Guessing...)" >&4
		rp="What is the size of a long double (in bytes)?"
		. ./myread
		longdblsize="$ans"
	fi
	if $test "X$doublesize" = "X$longdblsize"; then
		echo "That isn't any different from an ordinary double."
		echo "I'll keep your setting anyway, but you may see some"
		echo "harmless compilation warnings."
	fi
a6403 20
esac
$rm_try

: determine the architecture name
echo " "
if xxx=`./loc arch blurfl $pth`; $test -f "$xxx"; then
	tarch=`arch`"-$osname"
elif xxx=`./loc uname blurfl $pth`; $test -f "$xxx" ; then
	if uname -m > tmparch 2>&1 ; then
		tarch=`$sed -e 's/ *$//' -e 's/ /_/g' \
			-e 's/$/'"-$osname/" tmparch`
	else
		tarch="$osname"
	fi
	$rm -f tmparch
else
	tarch="$osname"
fi
case "$myarchname" in
''|"$tarch") ;;
d6405 4
a6408 2
	echo "(Your architecture name used to be $myarchname.)"
	archname=''
d6411 11
a6421 12
case "$targetarch" in
'') ;;
*)  archname=`echo $targetarch|sed 's,^[^-]*-,,'` ;;
esac
myarchname="$tarch"
case "$archname" in
'') dflt="$tarch";;
*) dflt="$archname";;
esac
rp='What is your architecture name'
. ./myread
archname="$ans"
d6423 2
a6424 6
: optionally add API version to the architecture for versioned archlibs
case "$useversionedarchname" in
$define|true|[yY]*) dflt='y';;
*)                  dflt='n';;
esac
rp='Add the Perl API version to your archname?'
d6427 2
a6428 2
y|Y)	useversionedarchname="$define" ;;
*)      useversionedarchname="$undef" ;;
d6430 4
a6433 12
case "$useversionedarchname" in
$define)
        case "$archname" in
        *-$api_versionstring)
                echo "...and architecture name already has -$api_versionstring" >&4
                ;;
        *)
                archname="$archname-$api_versionstring"
                echo "...setting architecture name to $archname." >&4
                ;;
        esac
        ;;
d6436 13
a6448 11
case "$usethreads" in
$define)
	echo "Threads selected." >&4
	case "$archname" in
        *-thread*) echo "...and architecture name already has -thread." >&4
                ;;
        *)      archname="$archname-thread"
                echo "...setting architecture name to $archname." >&4
                ;;
        esac
	;;
d6450 11
a6460 10
case "$usemultiplicity" in
$define)
	echo "Multiplicity selected." >&4
	case "$archname" in
        *-multi*) echo "...and architecture name already has -multi." >&4
                ;;
        *)      archname="$archname-multi"
                echo "...setting architecture name to $archname." >&4
                ;;
        esac
d6463 10
a6472 21
case "$use64bitint$use64bitall" in
*"$define"*)
	case "$archname64" in
	'')
		echo "This architecture is naturally 64-bit, not changing architecture name." >&4
		;;
	*)
		case "$use64bitint" in
		"$define") echo "64 bit integers selected." >&4 ;;
		esac
		case "$use64bitall" in
		"$define") echo "Maximal 64 bitness selected." >&4 ;;
		esac
		case "$archname" in
	        *-$archname64*) echo "...and architecture name already has $archname64." >&4
	                ;;
	        *)      archname="$archname-$archname64"
	                echo "...setting architecture name to $archname." >&4
	                ;;
	        esac
		;;
d6474 1
d6476 6
a6481 6
case "$uselongdouble" in
$define)
	echo "Long doubles selected." >&4
	case "$longdblsize" in
	$doublesize)
		echo "...but long doubles are equal to doubles, not changing architecture name." >&4
d6483 20
a6502 8
	*)
		case "$archname" in
	        *-ld*) echo "...and architecture name already has -ld." >&4
	                ;;
	        *)      archname="$archname-ld"
	                echo "...setting architecture name to $archname." >&4
        	        ;;
	        esac
d6504 1
d6506 1
d6509 21
a6529 21
if $test -f archname.cbu; then
	echo "Your platform has some specific hints for architecture name, using them..."
	. ./archname.cbu
fi

: set the prefixit variable, to compute a suitable default value
prefixit='case "$3" in
""|none)
	case "$oldprefix" in
	"") eval "$1=\"\$$2\"";;
	*)
		case "$3" in
		"") eval "$1=";;
		none)
			eval "tp=\"\$$2\"";
			case "$tp" in
			""|" ") eval "$1=\"\$$2\"";;
			*) eval "$1=";;
			esac;;
		esac;;
	esac;;
d6531 1
a6531 17
	eval "tp=\"$oldprefix-\$$2-\""; eval "tp=\"$tp\"";
	case "$tp" in
	--|/*--|\~*--) eval "$1=\"$prefix/$3\"";;
	/*-$oldprefix/*|\~*-$oldprefix/*)
		eval "$1=\`echo \$$2 | sed \"s,^$oldprefix,$prefix,\"\`";;
	*) eval "$1=\"\$$2\"";;
	esac;;
esac'

: determine installation style
: For now, try to deduce it from prefix unless it is already set.
: Reproduce behavior of 5.005 and earlier, maybe drop that in 5.7.
case "$installstyle" in
'')	case "$prefix" in
		*perl*) dflt='lib';;
		*) dflt='lib/perl5' ;;
	esac
a6532 1
*)	dflt="$installstyle" ;;
d6534 39
a6572 14
: Probably not worth prompting for this since we prompt for all
: the directories individually, and the prompt would be too long and
: confusing anyway.
installstyle=$dflt

: determine where public executables go
echo " "
set dflt bin bin
eval $prefixit
fn=d~
rp='Pathname where the public executables will reside?'
. ./getfile
if $test "X$ansexp" != "X$binexp"; then
	installbin=''
d6574 3
a6576 5
prefixvar=bin
: XXX Bug? -- ignores Configure -Dinstallprefix setting.
: XXX If this is fixed, also fix the "start perl" hunk below, which relies on
:     this via initialinstalllocation
. ./setprefixvar
d6578 2
a6579 5
case "$userelocatableinc" in
$define|true|[yY]*)	dflt='y' ;;
*)			dflt='n' ;;
esac
cat <<EOM
d6581 6
a6586 4
Would you like to build Perl so that the installation is relocatable, so that
library paths in @@INC are determined relative to the path of the perl binary?
This is not advised for system Perl installs, or if you need to run setid
scripts or scripts under taint mode.
a6587 1
If this doesn't make any sense to you, just accept the default '$dflt'.
d6589 2
a6590 8
rp='Use relocatable @@INC?'
. ./myread
case "$ans" in
y|Y)	val="$define" ;;
*)	val="$undef"  ;;
esac
set userelocatableinc
eval $setvar
d6592 700
a7291 11
initialinstalllocation="$binexp"
: Default prefix is now "up one level from where the binaries are"
case "$userelocatableinc" in
$define|true|[yY]*)
    bin=".../"
    binexp=".../"
    prefix=".../.."
    prefixexp=".../.."
    installprefixexp=".../.."
    ;;
esac
d7708 1
a7708 1
	$cat >>try.c <<EOCP
d8037 11
a8047 283
rp='Colon-separated list of additional directories for perl to search?'
. ./myread
case "$ans" in
' '|''|none)	otherlibdirs=' ' ;;
*)	otherlibdirs="$ans" ;;
esac
case "$otherlibdirs" in
' ') val=$undef ;;
*)	val=$define ;;
esac
set d_perl_otherlibdirs
eval $setvar

: Cruising for prototypes
echo " "
echo "Checking out function prototypes..." >&4
$cat >prototype.c <<EOCP
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
int main(int argc, char *argv[]) {
	exit(0);}
EOCP
if $cc $ccflags -c prototype.c >prototype.out 2>&1 ; then
	echo "Your C compiler appears to support function prototypes."
	val="$define"
else
	echo "Your C compiler doesn't seem to understand function prototypes."
	val="$undef"
fi
set prototype
eval $setvar
$rm -f prototype*

: Check if ansi2knr is required
case "$prototype" in
"$define") ;;
*)	ansi2knr='ansi2knr'
	echo " "
	cat <<EOM >&4

$me:  FATAL ERROR:
This version of $package can only be compiled by a compiler that 
understands function prototypes.  Unfortunately, your C compiler 
	$cc $ccflags
doesn't seem to understand them.  Sorry about that.

If GNU cc is available for your system, perhaps you could try that instead.  

Eventually, we hope to support building Perl with pre-ANSI compilers.
If you would like to help in that effort, please contact <perlbug@@perl.org>.

Aborting Configure now.
EOM
	exit 2
	;;
esac

: DTrace support
dflt_dtrace='/usr/sbin/dtrace'
$test -x /usr/bin/dtrace && dflt_dtrace='/usr/bin/dtrace'

cat <<EOM

Perl can be built to support DTrace on platforms that support it.
DTrace is a diagnosis and performance analysis tool from Sun.

If this doesn't make any sense to you, just accept the default '$dflt'.
EOM

while $test 1 ; do
	case "$usedtrace" in
	$define|true|[yY]*)
		dflt='y'
		;;
	?*)
		dflt='y'
		dflt_dtrace=$usedtrace
		;;
	*)
		dflt='n'
		;;
	esac

	rp='Support DTrace if available?'
	. ./myread
	case "$ans" in
	y|Y)	val="$define" ;;
	*)      val="$undef" ;;
	esac
	set usedtrace
	eval $setvar

	test "X$usedtrace" != "X$define" && break

	echo " "
	rp='Where is the dtrace executable?'
	dflt=$dflt_dtrace
	. ./getfile
	val="$ans"
	set dtrace
	eval $setvar

	if $test -f $dtrace
	then
		if $dtrace -h -s ../perldtrace.d \
			-o perldtrace.tmp >/dev/null 2>&1 \
			&& rm -f perldtrace.tmp
		then
			echo " "
			echo "Good: your $dtrace knows about the -h flag."
		else
			cat >&2 <<EOM

*** $me:  Fatal Error:  $dtrace doesn't support -h flag
***
*** Your installed dtrace doesn't support the -h switch to compile a D
*** program into a C header. Can't continue.

EOM
			exit 1
		fi
		break;
	fi

	case "$fastread" in
	yes)
		cat >&2 <<EOM

*** $me:  Fatal Error:  $dtrace not found.
*** Can't continue.

EOM
		exit 1
		;;
	*)
		echo "*** $dtrace was not found."
		echo " "
		;;
	esac
done

: See if we want extra modules installed
echo " "
case "$extras" in
'') dflt='n';;
*) dflt='y';;
esac
cat <<EOM
Perl can be built with extra modules or bundles of modules which
will be fetched from the CPAN and installed alongside Perl.

Notice that you will need access to the CPAN; either via the Internet,
or a local copy, for example a CD-ROM or a local CPAN mirror.  (You will
be asked later to configure the CPAN.pm module which will in turn do
the installation of the rest of the extra modules or bundles.)

Notice also that if the modules require any external software such as
libraries and headers (the libz library and the zlib.h header for the
Compress::Zlib module, for example) you MUST have any such software
already installed, this configuration process will NOT install such
things for you.

If this doesn't make any sense to you, just accept the default '$dflt'.
EOM
rp='Install any extra modules (y or n)?'
. ./myread
case "$ans" in
y|Y)
	cat <<EOM

Please list any extra modules or bundles to be installed from CPAN,
with spaces between the names.  The names can be in any format the
'install' command of CPAN.pm will understand.  (Answer 'none',
without the quotes, to install no extra modules or bundles.)
EOM
	rp='Extras?'
	dflt="$extras"
	. ./myread
	extras="$ans"
esac
case "$extras" in
''|'none')
	val=''
	$rm -f ../extras.lst
	;;
*)	echo "(Saving the list of extras for later...)"
	echo "$extras" > ../extras.lst
	val="'$extras'"
	;;
esac
set extras
eval $setvar
echo " "

: determine where html pages for programs go
set html1dir html1dir none
eval $prefixit
$cat <<EOM

If you wish to install html files for programs in $spackage, indicate
the appropriate directory here.  To skip installing html files,
answer "none".
EOM
case "$html1dir" in
''|none|$undef|' ') dflt=none ;;
*) dflt=$html1dir ;;
esac
fn=dn+~
rp="Directory for the main $spackage html pages?"
. ./getfile
prefixvar=html1dir
. ./setprefixvar
: Use ' ' for none so value is preserved next time through Configure
$test X"$html1dir" = "X" && html1dir=' '

: determine where html pages for libraries and modules go
set html3dir html3dir none
eval $prefixit
$cat <<EOM

If you wish to install html files for modules associated with $spackage,
indicate the appropriate directory here.  To skip installing html files,
answer "none".
EOM
: There is no obvious default.  If they have specified html1dir, then
: try to key off that, possibly changing .../html1 into .../html3.
case "$html3dir" in
'') html3dir=`echo "$html1dir" | $sed 's/1$/3$/'` ;;
*) dflt=$html3dir ;;
esac
fn=dn+~
rp="Directory for the $spackage module html pages?"
. ./getfile
prefixvar=html3dir
. ./setprefixvar
: Use ' ' for none so value is preserved next time through Configure
$test X"$html3dir" = "X" && html3dir=' '

: determine whether to install perl also as /usr/bin/perl

echo " "
if $test -d /usr/bin -a "X$installbin" != X/usr/bin; then
	$cat <<EOM
Many scripts expect perl to be installed as /usr/bin/perl.

If you want to, I can install the perl you are about to compile
as /usr/bin/perl (in addition to $bin/perl).
EOM
	if test -f /usr/bin/perl; then
	    $cat <<EOM

However, please note that because you already have a /usr/bin/perl,
overwriting that with a new Perl would very probably cause problems.
Therefore I'm assuming you don't want to do that (unless you insist).

EOM
	    case "$installusrbinperl" in
	    "$define"|[yY]*)	dflt='y';;
	    *)			dflt='n';;
	    esac
	else
	    $cat <<EOM

Since you don't have a /usr/bin/perl I'm assuming creating one is okay.

EOM
	    case "$installusrbinperl" in
	    "$undef"|[nN]*)	dflt='n';;
	    *)			dflt='y';;
	    esac
	fi
	rp="Do you want to install perl as /usr/bin/perl?"
	. ./myread
	case "$ans" in
	[yY]*)	val="$define";;
	*)	val="$undef" ;;
	esac
else
	val="$undef"
fi
set installusrbinperl
d8050 1
a8050 1
: Check if we are using the GNU C library
d8052 5
a8056 24
echo "Checking for GNU C Library..." >&4
cat >try.c <<'EOCP'
/* Find out version of GNU C library.  __GLIBC__ and __GLIBC_MINOR__
   alone are insufficient to distinguish different versions, such as
   2.0.6 and 2.0.7.  The function gnu_get_libc_version() appeared in
   libc version 2.1.0.      A. Dougherty,  June 3, 2002.
*/
#include <stdio.h>
int main(void)
{
#ifdef __GLIBC__
#   ifdef __GLIBC_MINOR__
#       if __GLIBC__ >= 2 && __GLIBC_MINOR__ >= 1 && !defined(__cplusplus)
#           include <gnu/libc-version.h>
	    printf("%s\n",  gnu_get_libc_version());
#       else
	    printf("%d.%d\n",  __GLIBC__, __GLIBC_MINOR__);
#       endif
#   else
	printf("%d\n",  __GLIBC__);
#   endif
    return 0;
#else
    return 1;
d8058 2
a8059 1
}
d8061 2
a8062 2
set try
if eval $compile_ok && $run ./try > glibc.ver; then
a8063 2
	gnulibc_version=`$cat glibc.ver`
	echo "You are using the GNU C Library version $gnulibc_version"
d8065 1
a8066 2
	gnulibc_version=''
	echo "You are not using the GNU C Library"
d8068 1
a8068 2
$rm_try glibc.ver
set d_gnulibc
d8070 8
d8079 5
a8083 39
: see if nm is to be used to determine whether a symbol is defined or not
case "$usenm" in
'')
	dflt=''
	case "$d_gnulibc" in
	"$define")
		echo " "
		echo "nm probably won't work on the GNU C Library." >&4
		dflt=n
		;;
	esac
	case "$dflt" in
	'')
		if $test "$osname" = aix -a "X$PASE" != "Xdefine" -a ! -f /lib/syscalls.exp; then
			echo " "
			echo "Whoops!  This is an AIX system without /lib/syscalls.exp!" >&4
			echo "'nm' won't be sufficient on this system." >&4
			dflt=n
		fi
		;;
	esac
	case "$dflt" in
	'') dflt=`$egrep 'inlibc|csym' $rsrc/Configure | wc -l 2>/dev/null`
		if $test $dflt -gt 20; then
			dflt=y
		else
			dflt=n
		fi
		;;
	esac
	;;
*)
	case "$usenm" in
	true|$define) dflt=y;;
	*) dflt=n;;
	esac
	;;
esac
$cat <<EOM
d8085 1
a8085 7
I can use $nm to extract the symbols from your C libraries. This
is a time consuming task which may generate huge output on the disk (up
to 3 megabytes) but that should make the symbols extraction faster. The
alternative is to skip the 'nm' extraction part and to compile a small
test program instead to determine whether each symbol is present. If
you have a fast C compiler and/or if your 'nm' output cannot be parsed,
this may be the best solution.
d8087 2
a8088 1
You probably shouldn't let me use 'nm' if you are using the GNU C Library.
d8090 1
d8092 2
a8093 5
rp="Shall I use $nm to extract C symbols from the libraries?"
. ./myread
case "$ans" in
[Nn]*) usenm=false;;
*) usenm=true;;
d8096 8
a8103 4
runnm=$usenm
case "$reuseval" in
true) runnm=false;;
esac
d8105 2
a8106 14
: nm options which may be necessary
case "$nm_opt" in
'') if $test -f /mach_boot; then
		nm_opt=''	# Mach
	elif $test -d /usr/ccs/lib; then
		nm_opt='-p'	# Solaris (and SunOS?)
	elif $test -f /dgux; then
		nm_opt='-p'	# DG-UX
	elif $test -f /lib64/rld; then
		nm_opt='-p'	# 64-bit Irix
	else
		nm_opt=''
	fi;;
esac
d8108 11
a8118 8
: nm options which may be necessary for shared libraries but illegal
: for archive libraries.  Thank you, Linux.
case "$nm_so_opt" in
'')	case "$myuname" in
	*linux*|gnu*)
		if $nm --help | $grep 'dynamic' > /dev/null 2>&1; then
			nm_so_opt='--dynamic'
		fi
a8120 2
	;;
esac
d8122 5
a8126 9
: Figure out where the libc is located
case "$runnm" in
true)
: get list of predefined functions in a handy place
echo " "
case "$libc" in
'') libc=unknown
	case "$libs" in
	*-lc_s*) libc=`./loc libc_s$_a $libc $libpth`
d8128 21
a8148 25
	;;
esac
case "$libs" in
'') ;;
*)  for thislib in $libs; do
	case "$thislib" in
	-lc|-lc_s)
		: Handle C library specially below.
		;;
	-l*)
		thislib=`echo $thislib | $sed -e 's/^-l//'`
		if try=`./loc lib$thislib.$so.'*' X $libpth`; $test -f "$try"; then
			:
		elif try=`./loc lib$thislib.$so X $libpth`; $test -f "$try"; then
			:
		elif try=`./loc lib$thislib$_a X $libpth`; $test -f "$try"; then
			:
		elif try=`./loc $thislib$_a X $libpth`; $test -f "$try"; then
			:
		elif try=`./loc lib$thislib X $libpth`; $test -f "$try"; then
			:
		elif try=`./loc $thislib X $libpth`; $test -f "$try"; then
			:
		elif try=`./loc Slib$thislib$_a X $xlibpth`; $test -f "$try"; then
			:
d8150 9
a8158 1
			try=''
d8160 16
a8175 1
		libnames="$libnames $try"
a8176 1
	*) libnames="$libnames $thislib" ;;
d8178 7
a8184 2
	done
	;;
d8186 3
a8188 68
xxx=normal
case "$libc" in
unknown)
	set /lib/libc.$so
	for xxx in $libpth; do
		$test -r $1 || set $xxx/libc.$so
		: The messy sed command sorts on library version numbers.
		$test -r $1 || \
			set `echo blurfl; echo $xxx/libc.$so.[0-9]* | \
			tr ' ' $trnl | egrep -v '\.[A-Za-z]*$' | $sed -e '
				h
				s/[0-9][0-9]*/0000&/g
				s/0*\([0-9][0-9][0-9][0-9][0-9]\)/\1/g
				G
				s/\n/ /' | \
			 $sort | $sed -e 's/^.* //'`
		eval set \$$#
	done
	$test -r $1 || set $sysroot/usr/ccs/lib/libc.$so
	$test -r $1 || set $sysroot/lib/libsys_s$_a
	;;
*)
	set blurfl
	;;
esac
if $test -r "$1"; then
	echo "Your (shared) C library seems to be in $1."
	libc="$1"
elif $test -r /lib/libc && $test -r /lib/clib; then
	echo "Your C library seems to be in both /lib/clib and /lib/libc."
	xxx=apollo
	libc='/lib/clib /lib/libc'
	if $test -r /lib/syslib; then
		echo "(Your math library is in /lib/syslib.)"
		libc="$libc /lib/syslib"
	fi
elif $test -r "$libc" || (test -h "$libc") >/dev/null 2>&1; then
	echo "Your C library seems to be in $libc, as you said before."
elif $test -r $incpath/usr/lib/libc$_a; then
	libc=$incpath/usr/lib/libc$_a;
	echo "Your C library seems to be in $libc.  That's fine."
elif $test -r /lib/libc$_a; then
	libc=/lib/libc$_a;
	echo "Your C library seems to be in $libc.  You're normal."
else
	if tans=`./loc libc$_a blurfl/dyick $libpth`; $test -r "$tans"; then
		:
	elif tans=`./loc libc blurfl/dyick $libpth`; $test -r "$tans"; then
		libnames="$libnames "`./loc clib blurfl/dyick $libpth`
	elif tans=`./loc clib blurfl/dyick $libpth`; $test -r "$tans"; then
		:
	elif tans=`./loc Slibc$_a blurfl/dyick $xlibpth`; $test -r "$tans"; then
		:
	elif tans=`./loc Mlibc$_a blurfl/dyick $xlibpth`; $test -r "$tans"; then
		:
	else
		tans=`./loc Llibc$_a blurfl/dyick $xlibpth`
	fi
	if $test -r "$tans"; then
		echo "Your C library seems to be in $tans, of all places."
		libc=$tans
	else
		libc='blurfl'
	fi
fi
if $test $xxx = apollo -o -r "$libc" || (test -h "$libc") >/dev/null 2>&1; then
	dflt="$libc"
	cat <<EOM
d8190 4
a8193 2
If the guess above is wrong (which it might be if you're using a strange
compiler, or your machine supports multiple models), you can override it here.
d8195 5
a8199 6
EOM
else
	dflt=''
	echo $libpth | $tr ' ' $trnl | $sort | $uniq > libpath
	cat >&4 <<EOM
I can't seem to find your C library.  I've looked in the following places:
d8201 1
d8203 4
a8206 1
	$sed 's/^/	/' libpath
d8209 4
a8212 2
None of these seems to contain your C library. I need to get its name...

d8214 17
a8230 15
fi
fn=f
rp='Where is your C library?'
. ./getfile
libc="$ans"

echo " "
echo $libc $libnames | $tr ' ' $trnl | $sort | $uniq > libnames
set X `cat libnames`
shift
xxx=files
case $# in 1) xxx=file; esac
echo "Extracting names from the following $xxx for later perusal:" >&4
echo " "
$sed 's/^/	/' libnames >&4
a8231 1
$echo $n "This may take a while...$c" >&4
d8233 4
a8236 6
for file in $*; do
	case $file in
	*$so*) $nm $nm_so_opt $nm_opt $file 2>/dev/null;;
	*) $nm $nm_opt $file 2>/dev/null;;
	esac
done >libc.tmp
d8238 7
a8244 127
$echo $n ".$c"
$grep fprintf libc.tmp > libc.ptf
xscan='eval "<libc.ptf $com >libc.list"; $echo $n ".$c" >&4'
xrun='eval "<libc.tmp $com >libc.list"; echo "done." >&4'
xxx='[ADTSIWi]'
if com="$sed -n -e 's/__IO//' -e 's/^.* $xxx  *//p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e 's/^__*//' -e 's/^\([a-zA-Z_0-9$]*\).*xtern.*/\1/p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e '/|UNDEF/d' -e '/FUNC..GL/s/^.*|__*//p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e 's/^.* D __*//p' -e 's/^.* D //p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e 's/^_//' -e 's/^\([a-zA-Z_0-9]*\).*xtern.*text.*/\1/p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e 's/^.*|FUNC |GLOB .*|//p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$grep '|' | $sed -n -e '/|COMMON/d' -e '/|DATA/d' \
				-e '/ file/d' -e 's/^\([^ 	]*\).*/\1/p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e 's/^.*|FUNC |GLOB .*|//p' -e 's/^.*|FUNC |WEAK .*|//p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e 's/^__//' -e '/|Undef/d' -e '/|Proc/s/ .*//p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e 's/^.*|Proc .*|Text *| *//p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e '/Def. Text/s/.* \([^ ]*\)\$/\1/p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e 's/^[-0-9a-f ]*_\(.*\)=.*/\1/p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e 's/.*\.text n\ \ \ \.//p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="sed -n -e 's/^__.*//' -e 's/[       ]*D[    ]*[0-9]*.*//p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
else
	$nm -p $* 2>/dev/null >libc.tmp
	$grep fprintf libc.tmp > libc.ptf
	if com="$sed -n -e 's/^.* [ADTSIW]  *_[_.]*//p' -e 's/^.* [ADTSIW] //p'";\
		eval $xscan; $contains '^fprintf$' libc.list >/dev/null 2>&1
	then
		nm_opt='-p'
		eval $xrun
	else
		echo " "
		echo "$nm didn't seem to work right. Trying $ar instead..." >&4
		com=''
		if $ar t $libc > libc.tmp && \
			$contains '^fprintf$' libc.tmp >/dev/null 2>&1
		then
			for thisname in $libnames $libc; do
				$ar t $thisname >>libc.tmp
			done
			$sed -e "s/\\$_o\$//" < libc.tmp > libc.list
			echo "Ok." >&4
		elif test "X$osname" = "Xos2" && $ar tv $libc > libc.tmp; then
			for thisname in $libnames $libc; do
				$ar tv $thisname >>libc.tmp
				emximp -o tmp.imp $thisname \
				    2>/dev/null && \
				    $sed -e 's/^\([_a-zA-Z0-9]*\) .*$/\1/p' \
				    < tmp.imp >>libc.tmp
				$rm -f tmp.imp
			done
			$sed -e "s/\\$_o\$//" -e 's/^ \+//' < libc.tmp > libc.list
			echo "Ok." >&4
		else
			echo "$ar didn't seem to work right." >&4
			echo "Maybe this is a Cray...trying bld instead..." >&4
			if  bld t $libc | \
				$sed -e 's/.*\///' -e "s/\\$_o:.*\$//" > libc.list &&
				$test -s libc.list
			then
				for thisname in $libnames; do
					bld t $libnames | \
					$sed -e 's/.*\///' -e "s/\\$_o:.*\$//" >>libc.list
					$ar t $thisname >>libc.tmp
				done
				echo "Ok." >&4
			else
				echo "That didn't work either.  Giving up." >&4
				exit 1
			fi
		fi
	fi
fi
nm_extract="$com"
case "$PASE" in
define)
    echo " "
    echo "Since you are compiling for PASE, extracting more symbols from libc.a ...">&4
    dump -Tv /lib/libc.a | awk '$7 == "/unix" {print $5 " " $8}' | grep "^SV" | awk '{print $2}' >> libc.list
    ;;
*)  if $test -f /lib/syscalls.exp; then
	echo " "
	echo "Also extracting names from /lib/syscalls.exp for good ole AIX..." >&4
	$sed -n 's/^\([^ 	]*\)[ 	]*syscall[0-9]*[ 	]*$/\1/p' \
		/lib/syscalls.exp >>libc.list
    fi
    ;;
d8246 22
a8267 1
;;
d8269 9
a8277 1
$rm -f libnames libpath
a8278 1
: Check if we are using C++
d8280 36
a8315 16
echo "Checking for C++..." >&4
$cat >try.c <<'EOCP'
#include <stdio.h>
int main(void)
{
#ifdef __cplusplus
    return 0;
#else
    return 1;
#endif
}
EOCP
set try
if eval $compile_ok && $run ./try; then
	val="$define"
	echo "You are using a C++ compiler."
a8317 1
	echo "You are not using a C++ compiler."
d8319 1
a8319 2
$rm_try cplusplus$$
set d_cplusplus
a8321 70
: is a C symbol defined?
csym='tlook=$1;
case "$3" in
-v) tf=libc.tmp; tdc="";;
-a) tf=libc.tmp; tdc="[]";;
*) tlook="^$1\$"; tf=libc.list; tdc="()";;
esac;
case "$d_cplusplus" in
    $define)	extern_C="extern \"C\""	;;
    *)		extern_C="extern"	;;
esac;
tx=yes;
case "$reuseval-$4" in
true-) ;;
true-*) tx=no; eval "tval=\$$4"; case "$tval" in "") tx=yes;; esac;;
esac;
case "$tx" in
yes)
	tval=false;
	if $test "$runnm" = true; then
		if $contains $tlook $tf >/dev/null 2>&1; then
			tval=true;
		elif $test "$mistrustnm" = compile -o "$mistrustnm" = run; then
			echo "$extern_C void *$1$tdc; void *(*(p()))$tdc { return &$1; } int main() { if(p() && p() != (void *)main) return(0); else return(1); }"> try.c;
			$cc -o try $optimize $ccflags $ldflags try.c >/dev/null 2>&1 $libs && tval=true;
			$test "$mistrustnm" = run -a -x try && { $run ./try$_exe >/dev/null 2>&1 || tval=false; };
			$rm_try;
		fi;
	else
		echo "$extern_C void *$1$tdc; void *(*(p()))$tdc { return &$1; } int main() { if(p() && p() != (void *)main) return(0); else return(1); }"> try.c;
		$cc -o try $optimize $ccflags $ldflags try.c $libs >/dev/null 2>&1 && tval=true;
		$rm_try;
	fi;
	;;
*)
	case "$tval" in
	$define) tval=true;;
	*) tval=false;;
	esac;
	;;
esac;
eval "$2=$tval"'

: define an is-in-libc? function
inlibc='echo " "; td=$define; tu=$undef;
sym=$1; var=$2; eval "was=\$$2";
tx=yes;
case "$reuseval$was" in
true) ;;
true*) tx=no;;
esac;
case "$tx" in
yes)
	set $sym tres -f;
	eval $csym;
	case "$tres" in
	true)
		echo "$sym() found." >&4;
		case "$was" in $undef) . ./whoa; esac; eval "$var=\$td";;
	*)
		echo "$sym() NOT found." >&4;
		case "$was" in $define) . ./whoa; esac; eval "$var=\$tu";;
	esac;;
*)
	case "$was" in
	$define) echo "$sym() found." >&4;;
	*) echo "$sym() NOT found." >&4;;
	esac;;
esac'

d8329 1
a8404 1
			next)	dflt='none' ;;
d8479 1
a8479 1
	if $cc $ccflags $ldflags try.c >/dev/null 2>&1 && $run ./a.out; then
a8520 1
		    next)  dflt='none' ;;
d8574 6
d8605 2
a8606 2
		    next|sunos)      dflt='none'   ;;
		    *)               dflt='none'   ;;
a8667 9
		next*)
			case "$osvers" in
			4*)	dflt=y
				also='Building a shared libperl is needed for MAB support.'
				;;
			*)	dflt=n
				;;
			esac
			;;
a8724 4
		next4*)
			dflt=libperl.5.$so
			# XXX How handle the --version stuff for MAB?
			;;
a8818 3
	next)
		# next doesn't like the default...
		;;
a9081 20
	if $test -f /usr/etc/nibindd; then
		echo " "
		echo "I'm fairly confident you're on a NeXT."
		echo " "
		rp='Do you get the hosts file via NetInfo?'
		dflt=y
		case "$hostcat" in
		nidump*) ;;
		'') ;;
		*) dflt=n;;
		esac
		. ./myread
		case "$ans" in
		y*) hostcat='nidump hosts .';;
		*)	case "$hostcat" in
			nidump*) hostcat='';;
			esac
			;;
		esac
	fi
d9603 23
d10105 87
d10214 1
a10214 1
                	sPRIFUldbl='"F"'; sPRIGUldbl='"G"'; sPRIEUldbl='"E"';
d10236 1
a10236 1
                	sPRIFUldbl='"LF"'; sPRIGUldbl='"LG"'; sPRIEUldbl='"LE"';
d10258 1
a10258 1
                	sPRIFUldbl='"llF"'; sPRIGUldbl='"llG"'; sPRIEUldbl='"llE"';
d10280 1
a10280 1
                	sPRIFUldbl='"lF"'; sPRIGUldbl='"lG"'; sPRIEUldbl='"lE"';
d10308 32
d10639 4
d10949 8
d11683 1
a11683 1
	$run ./try
d11783 1
a11783 1
	$run ./try
d11801 4
d12169 4
a12382 4
: see if this is a float.h system
set float.h i_float
eval $inhdr

a12576 3
#if defined(NeXT) && defined(I_SYS_DIR) /* NeXT needs dirent + sys/dir.h */
#include <sys/dir.h>
#endif
d12611 4
d13377 2
a13378 2
	case "$d_fork:$d_pipe" in
	define:define)
d13416 1
d13418 6
a13423 2
	pipe(pd);	/* Down: child -> parent */
	pipe(pu);	/* Up: parent -> child */
a13424 1
		int ret;
d13438 3
a13440 1
		write(2, string, strlen(string));
d13453 3
a13455 1
		write(pu[1], buf, 1);	/* Unblocks child, tell it to close our pipe */
d13461 3
a13463 1
		write(4, string, strlen(string));
d13469 3
a13471 1
	read(pu[0], buf, 1);	/* Wait for parent to signal us we may continue */
d13547 16
d14008 12
d14041 12
d14057 33
d14102 2
a14103 2
: see if fpclassify exists
set fpclassify d_fpclassify
d14106 2
a14107 2
: see if fpclassl exists
set fpclassl d_fpclassl
d14132 20
d15757 8
d15867 23
a15889 2
: see if isfinite exists
set isfinite d_isfinite
d15892 23
a15914 2
: see if isinf exists
set isinf d_isinf
d15917 41
a15957 3
: see if isnan exists
set isnan d_isnan
eval $inlibc
d15963 29
d15996 25
d16080 7
a16086 3
: see if this is a math.h system
set math.h i_math
eval $inhdr
d16111 16
a16126 2
	$rm_try
	;;
d16128 3
a16130 1
    esac
d16132 2
a16133 2
: see if link exists
set link d_link
d16255 22
a16276 2
: see if localeconv exists
set localeconv d_locconv
d16279 3
a16281 20
: see if localtime_r calls tzset
case "$d_locconv:$d_lc_monetary_2008" in
define:)
	$cat >try.c <<EOCP
#include <locale.h>
int main() {
	struct lconv *lc = localeconv();
	char int_p_cs_precedes = lc->int_p_cs_precedes;
	return 0;
}
EOCP
	set try
	if eval $compile; then
		d_lc_monetary_2008="$define"
	else
		d_lc_monetary_2008="$undef"
	fi;
	$rm_try
	;;
esac
d16283 2
a16284 2
: see if lockf exists
set lockf d_lockf
d16332 4
d16403 4
a16415 63
d_modfl_pow32_bug="$undef"

case "$d_longdbl$d_modfl" in
$define$define)
	$cat <<EOM
Checking to see whether your modfl() is okay for large values...
EOM
$cat >try.c <<EOCP
#include <math.h>
#include <stdio.h>
EOCP
if $test "X$d_modflproto" != "X$define"; then
	$cat >>try.c <<EOCP
/* Sigh. many current glibcs provide the function, but do not prototype it. */
long double modfl (long double, long double *);
EOCP
fi
$cat >>try.c <<EOCP
int main() {
    long double nv = 4294967303.15;
    long double v, w;
    v = modfl(nv, &w);
#ifdef __GLIBC__
    printf("glibc");
#endif
    printf(" %"$sPRIfldbl" %"$sPRIfldbl" %"$sPRIfldbl"\n", nv, v, w);
    return 0;
}
EOCP
	case "$osname:$gccversion" in
	aix:)	saveccflags="$ccflags"
		ccflags="$ccflags -qlongdouble" ;; # to avoid core dump
	esac
	set try
	if eval $compile; then
		foo=`$run ./try`
		case "$foo" in
		*" 4294967303.150000 1.150000 4294967302.000000")
			echo >&4 "Your modfl() is broken for large values."
			d_modfl_pow32_bug="$define"
			case "$foo" in
			glibc)	echo >&4 "You should upgrade your glibc to at least 2.2.2 to get a fixed modfl()."
			;;
			esac
			;;
		*" 4294967303.150000 0.150000 4294967303.000000")
			echo >&4 "Your modfl() seems okay for large values."
			;;
		*)	echo >&4 "I don't understand your modfl() at all."
			d_modfl="$undef"
			;;
		esac
		$rm_try
	else
		echo "I cannot figure out whether your modfl() is okay, assuming it isn't."
		d_modfl="$undef"
	fi
	case "$osname:$gccversion" in
	aix:)	ccflags="$saveccflags" ;; # restore
	esac
	;;
esac

d16422 2
a16423 2
	if $test "$d_aintl:$d_copysignl" = "$define:$define"; then
	    echo "You have both aintl and copysignl, so I can emulate modfl."
d16425 5
a16429 1
	    message="$message modfl"
d16439 3
d16533 16
d16561 4
d16624 42
d17152 3
d17175 6
a17180 1
: Check if exe is symlink to abs path of executing program
a17181 1
procselfexe=''
d17183 7
a17189 4
case "$d_readlink" in
    "$define")
	: NetBSD first as /proc/self is a symlink to /proc/curproc, and it feels
	: more tidy to avoid an extra level of symlink
d17205 1
a17205 2
	;;
esac
d17359 19
d17535 34
d17573 4
d17581 4
d17820 4
d18591 96
d19018 4
d19644 4
d19733 4
d19804 1
a19804 1
next|darwin) multiarch="$define" ;;
a20044 3
#if defined(NeXT) && defined(I_SYS_DIR) /* NeXT needs dirent + sys/dir.h */
#include <sys/dir.h>
#endif
d20090 28
d20122 29
a20158 7
: preserve RCS keywords in files with variable substitution, grrr
Date='$Date'
Id='$Id'
Log='$Log'
RCSfile='$RCSfile'
Revision='$Revision'

d20163 1
a20163 10
	if $test "X$uselongdouble" = Xdefine -a "X$d_longdbl" = Xdefine; then
	    $cat >try.c <<'EOCP'
typedef long double NV;
EOCP
	else
	    $cat >try.c <<'EOCP'
typedef double NV;
EOCP
	fi
	$cat >>try.c <<'EOCP'
d20167 1
a20167 1
    NV bar;
a20204 33
: Determine if this is an EBCDIC system
echo " "
echo "Determining whether or not we are on an EBCDIC system..." >&4
$cat >try.c <<'EOM'
int main()
{
  if ('M'==0xd4) return 0;
  return 1;
}
EOM

case "$BOOTSTRAP_CHARSET" in
    Y|y|define) bootstrap_charset=$define	;;
    *)		bootstrap_charset=$undef	;;
esac

val=$undef
set try
if eval $compile_ok; then
	if $run ./try; then
		echo "You seem to speak EBCDIC." >&4
		val="$define"
	else
		echo "Nope, no EBCDIC, probably ASCII or some ISO Latin. Or UTF-8." >&4
	fi
else
	echo "I'm unable to compile the test program." >&4
	echo "I'll assume ASCII or some ISO Latin. Or UTF8." >&4
fi
$rm_try
set ebcdic
eval $setvar

d20395 1
a20395 3
u_int32_t hash_cb (ptr, size)
const void *ptr;
size_t size;
d20438 1
a20438 3
size_t prefix_cb (key1, key2)
const DBT *key1;
const DBT *key2;
d20468 263
d20744 3
a20746 3
randfunc=drand48
drand01="drand48()"
seedfunc="srand48"
d20750 57
d21410 9
a21418 1
if $test X"$uselongdouble" = X"$define" -a X"$d_longdbl" = X"$define" -a X"$d_PRIgldbl" = X"$define"; then
d21425 1
a21425 1
else
d21432 1
a21508 34
: MAD = Misc Attribute Definition

if $test $patchlevel -lt 9; then
: MAD is not available in 5.8.x or earlier.
    ans=n;
else
    case "$mad" in
    $define|true|[yY]*)	dflt='y' ;;
    *)			dflt='n' ;;
    esac
    cat <<EOM

Would you like to build with Misc Attribute Decoration? This is development
work leading to a Perl 5 to Perl 6 convertor, which imposes a space and speed
overhead on the interpreter.

If this doesn't make any sense to you, just accept the default '$dflt'.
EOM
    rp='Build Perl with MAD?'
    . ./myread
fi
case "$ans" in
y|Y)	val="$define"
	madlyh='madly.h madly.act madly.tab'
	madlysrc='madly.c'
	madlyobj="madly$_o" ;;
*)	val="$undef"
	madlyh=''
	madlysrc=''
	madlyobj='' ;;
esac
set mad
eval $setvar

d21605 1
a21605 1
: check for type of arguments to gethostbyaddr. 
d21614 2
a21615 2
			$d_socket sys/socket.h 
			$i_niin netinet/in.h 
d21652 1
a21652 1
	# Remove the "const" if needed. -- but then we'll have a 
d21657 1
a21657 1
: check for type of argument to gethostbyname. 
d21666 2
a21667 2
			$d_socket sys/socket.h 
			$i_niin netinet/in.h 
d21695 1
a21695 1
: check for type of 1st argument to getnetbyaddr. 
d21704 2
a21705 2
			$d_socket sys/socket.h 
			$i_niin netinet/in.h 
a21761 5
: see what type pids are declared as in the kernel
rp="What is the type of process ids on this system?"
set pid_t pidtype int stdio.h sys/types.h
eval $typedef_ask

d21898 1
a21898 1
	    eval `$run ./try`
d21979 1
a21979 1
	    eval `$run ./try`
d22111 1
a22111 1
			selectminbits=`$run ./try`
d22145 2
d22366 2
d22370 2
d22414 2
a22652 24
: see what type uids are declared as in the kernel
echo " "
echo "Looking for the type for user ids returned by getuid()."
set uid_t uidtype xxx stdio.h sys/types.h
eval $typedef
case "$uidtype" in
xxx)
	xxx=`./findhdr sys/user.h`
	set `grep '_ruid;' "$xxx" 2>/dev/null` unsigned short
	case $1 in
	unsigned) dflt="$1 $2" ;;
	*) dflt="$1" ;;
	esac
	;;
*) dflt="$uidtype";;
esac
case "$uidtype" in
uid_t)	echo "uid_t found." ;;
*)	rp="What is the type for user ids returned by getuid()?"
	. ./myread
	uidtype="$ans"
	;;
esac

d23040 12
d23148 36
a23183 36
a29k ABI64 aegis AES_SOURCE AIX AIX32 AIX370
AIX41 AIX42 AIX43 AIX_SOURCE aixpc ALL_SOURCE
alliant alpha am29000 AM29000 AMD64 amd64 amiga AMIGAOS AMIX
ansi ANSI_C_SOURCE apollo ardent ARM32 atarist att386 att3b
BeOS BIG_ENDIAN BIT_MSF bsd BSD bsd43 bsd4_2 bsd4_3 BSD4_3 bsd4_4
BSD_4_3 BSD_4_4 BSD_NET2 BSD_TIME BSD_TYPES BSDCOMPAT bsdi
bull c cadmus clipper CMU COFF COMPILER_VERSION
concurrent convex cpu cray CRAY CRAYMPP ctix CX_UX
CYGWIN DECC DGUX DGUX_SOURCE DJGPP dmert DOLPHIN DPX2 DSO
Dynix DynixPTX ELF encore EPI EXTENSIONS FAVOR_BSD
FILE_OFFSET_BITS FreeBSD GCC_NEW_VARARGS gcos gcx gimpel
GLIBC GLIBC_MINOR
GNU_SOURCE GNUC GNUC_MINOR GNU_LIBRARY GO32 gould GOULD_PN
H3050R H3050RX hbullx20 hcx host_mips
hp200 hp300 hp700 HP700 hp800 hp9000
hp9000s200 hp9000s300 hp9000s400 hp9000s500
hp9000s700 hp9000s800 hp9k8 hp_osf hppa hpux HPUX_SOURCE
i186 i286 i386 i486 i586 i686 i8086 i80960 i860 I960
IA64 iAPX286 ibm ibm032 ibmesa IBMR2 ibmrt ILP32 ILP64
INLINE_INTRINSICS INTRINSICS INT64 interdata is68k ksr1
LANGUAGE_C LARGE_FILE_API LARGEFILE64_SOURCE
LARGEFILE_SOURCE LFS64_LARGEFILE LFS_LARGEFILE
LIBCATAMOUNT Linux LITTLE_ENDIAN LONG64 LONG_DOUBLE LONG_LONG
LONGDOUBLE LONGLONG LP64 luna luna88k Lynx
M68000 m68k m88100 m88k M88KBCS_TARGET M_COFF
M_I186 M_I286 M_I386 M_I8086 M_I86 M_I86SM M_SYS3
M_SYS5 M_SYSIII M_SYSV M_UNIX M_XENIX MACH machine MachTen
MATH_HAS_NO_SIDE_EFFECTS
mc300 mc500 mc68000 mc68010 mc68020 mc68030 mc68040
mc68060 mc68k mc68k32 mc700 mc88000 mc88100 merlin
mert MiNT mips MIPS_FPSET MIPS_ISA MIPS_SIM MIPS_SZINT
MIPS_SZLONG MIPS_SZPTR MIPSEB MIPSEL MODERN_C motorola
mpeix MSDOS MTXINU MULTIMAX mvs MVS n16 ncl_el ncl_mr
NetBSD news1500 news1700 news1800 news1900 news3700
news700 news800 news900 NeXT NLS nonstopux ns16000 ns32000
ns32016 ns32332 ns32k nsc32000
d23185 14
a23198 15
pa_risc PA_RISC1_1 PA_RISC2_0 PARAGON parisc
pc532 pdp11 PGC PIC plexus PORTAR posix
POSIX1B_SOURCE POSIX2_SOURCE POSIX4_SOURCE
POSIX_C_SOURCE POSIX_SOURCE POWER
PROTOTYPES PWB pyr QNX QK_USER R3000 REENTRANT RES Rhapsody RISC6000
riscix riscos RT S390 SA110 scs SCO sequent sgi SGI_SOURCE SH3 sinix
SIZE_INT SIZE_LONG SIZE_PTR SOCKET_SOURCE SOCKETS_SOURCE
sony sony_news sonyrisc sparc sparclite spectrum
stardent stdc STDC_EXT stratos sun sun3 sun386
Sun386i svr3 svr4 SVR4_2 SVR4_SOURCE svr5
SX system SYSTYPE_BSD SYSTYPE_BSD43 SYSTYPE_BSD44
SYSTYPE_SVR4 SYSTYPE_SVR5 SYSTYPE_SYSV SYSV SYSV3 SYSV4 SYSV5
sysV68 sysV88 Tek4132 Tek4300 titan
TM3200 TM5400 TM5600
tower tower32 tower32_200 tower32_600 tower32_700
d23200 11
a23210 11
u370 u3b u3b2 u3b20 u3b200 u3b20d u3b5
ultrix UMAXV UnicomPBB UnicomPBD UNICOS UNICOSMK
unix UNIX95 UNIX99 unixpc unos
USE_BSD USE_FILE_OFFSET64 USE_GNU USE_ISOC9X USE_LARGEFILE USE_LARGEFILE64
USE_MISC USE_POSIX USE_POSIX199309 USE_POSIX199506 USE_POSIX2
USE_REENTRANT USE_SVID USE_UNIX98 USE_XOPEN USE_XOPEN_EXTENDED
USGr4 USGr4_2
Utek UTek UTS UWIN uxpm uxps vax venix VMESA vms x86_64 xenix Xenix286
XOPEN_SOURCE XOPEN_SOURCE_EXTENDED XPG2 XPG2_EXTENDED
XPG3 XPG3_EXTENDED XPG4 XPG4_EXTENDED
z8000
d23226 2
a23227 2
        $rm -f Cppsym.got
        exit 0
d23271 1
a23271 1
$cc -o try -Dcpp_stuff=$cpp_stuff $optimize \$ccflags $ldflags try.c $libs && $run ./try | $sed 's/ /\\\\ /g'
d23316 1
a23316 1
       $sort ccsym1.raw | $uniq >ccsym.raw
d23318 1
a23318 1
       mv ccsym1.raw ccsym.raw
d23332 1
a23332 1
    	ccsymbols=''
d23334 1
a23334 1
        cppsymbols=`echo $cppsymbols`
d23360 2
a23361 2
	        ccsymbols=`$cat ccsym.own`
	        ccsymbols=`echo $ccsymbols`
d23366 20
d23474 4
a23596 1
	    CVS) ;;
d23599 1
a23599 1
	    this_ext=`echo $xxx | $sed -e s/-/\\\//g`;
d23604 2
a23605 2
	    echo " $xs_extensions $nonxs_extensions" > $tdir/$$.tmp;
	    if $contains " $this_ext " $tdir/$$.tmp; then
d23623 2
a23624 2
	    $ls -1 $xxx > $tdir/$$.tmp;
	    if   $contains "\.xs$" $tdir/$$.tmp > /dev/null 2>&1; then
d23626 1
a23626 1
	    elif $contains "\.c$"  $tdir/$$.tmp > /dev/null 2>&1; then
d23628 1
a23628 1
	    elif $test -d $xxx; then
d23631 1
a23631 1
	    $rm -f $tdir/$$.tmp;
d23661 5
d23735 8
a23742 3
		: XXX syslog requires socket
		case "$d_socket" in
		true|$define|y) avail_ext="$avail_ext $xxx" ;;
a23833 2
	CVS|RCS|SCCS|.svn)
		;;
a24134 1
bootstrap_charset='$bootstrap_charset'
d24193 1
d24199 2
d24211 1
d24223 1
d24233 1
d24251 1
d24259 1
d24274 2
d24277 2
d24287 2
d24290 1
d24297 3
d24302 2
d24308 1
d24310 1
d24387 2
d24403 1
d24405 2
d24409 3
d24413 1
d24416 3
d24422 4
a24429 1
d_lc_monetary_2008='$d_lc_monetary_2008'
d24431 3
d24436 4
d24451 1
a24462 1
d_modfl_pow32_bug='$d_modfl_pow32_bug'
d24479 1
d24482 4
d24510 1
d24522 1
d24529 4
d24535 1
d24537 1
d24542 1
d24594 8
d24622 1
d24665 1
d24672 1
d24674 1
d24684 1
d24701 1
d24703 1
d24716 4
d24724 1
d24811 1
d24818 1
d24820 1
d24849 1
d24857 1
d24900 1
d24969 4
a24980 4
mad='$mad'
madlyh='$madlyh'
madlyobj='$madlyobj'
madlysrc='$madlysrc'
d25025 1
d25214 1
d25233 1
d25312 3
@


1.33
log
@Apply local patches, remove excess files - perl-5.20.2
@
text
@d1391 2
a1392 2
libswanted="socket bind inet nsl nm ndbm gdbm dbm db malloc dl ld sun"
libswanted="$libswanted m crypt sec util c cposix posix ucb bsd BSD"
d3274 1
a3274 1
	$test -d /usr/include/minix && osname=minix
d20739 1
a20739 1
    fprintf (stderr, "Sizeof time_t = %ld\n", sizeof (time_t));
@


1.32
log
@Fix merge issues, remove excess files - match perl-5.20.2 dist
@
text
@d592 1
a2798 1
			echo "(First creating the subdirectories...)" >&4
d2800 10
a2809 5
			awk '{print $1}' $src/MANIFEST | grep / | sed 's:/[^/]*$::' | sort -u | while true; do
				read directory
				test -z "$directory" && break
				mkdir -p $directory
			done
a2814 15
			echo "(Then creating the symlinks...)" >&4
			awk '{print $1}' $src/MANIFEST | while true; do
				read filename
				test -z "$filename" && break
				if test -f $filename; then
					if $issymlink $filename; then
						rm -f $filename
					fi
				fi
				if test -f $filename; then
					echo "$filename already exists, not symlinking."
				else
					ln -s $src/$filename $filename
				fi
			done
d2820 4
d5346 19
d15598 21
d19620 3
a19622 3
randfunc=Perl_drand48
drand01="Perl_drand48()"
seedfunc="Perl_drand48_init"
d22427 1
d22655 2
d23216 1
@


1.31
log
@Make perl use our (arc4random backed) drand48 when unseeded
uses srand48_deterministic if a seed is provided.

seems fine millert@@
@
text
@a591 1
d_lc_monetary_2008=''
d2798 1
d2800 5
a2804 10
			awk -v src="$src" '{
				dir=$1;
				if (!sub(/\/[^\/]*$/, "", dir)) { dir = "." }
				mf[dir] = mf[dir]" "src"/"$1;
			} END {
				for (d in mf) {
					if (d != ".") { system("mkdir -p "d) }
					system("ln -sf "mf[d]" "d);
				}
			}' $src/MANIFEST
d2810 15
a2829 4
			if test ! -f x2p/walk.c; then
				echo "Failed to create the symlinks (x2p/walk.c missing).  Aborting." >&4
				exit 1
			fi
a5351 19
	case "$gccversion" in
	1*) ;;
	2*) ;;
	?*) 	echo " "
		echo "Checking if your compiler accepts -fno-delete-null-pointer-checks" 2>&1
		echo 'int main(void) { return 0; }' > gcctest.c
		if $cc -O2 -fno-delete-null-pointer-checks -o gcctest gcctest.c; then
			echo "Yes, it does." 2>&1
			case "$ccflags" in
			*delete-null-pointer-checks*)
				echo "Leaving current flags $ccflags alone." 2>&1
				;;
			*) dflt="$dflt -fno-delete-null-pointer-checks" ;;
			esac
		else
			echo "Nope, it doesn't, but that's ok." 2>&1
		fi
		;;
	esac
d8545 1
a8545 1
	bsdos|linux|irix*|dec_osf|gnu*)
a8550 3
	haiku)
		# Haiku doesn't like the default, either.
		;;
a15584 21
: see if localtime_r calls tzset
case "$d_locconv:$d_lc_monetary_2008" in
define:)
	$cat >try.c <<EOCP
#include <locale.h>
int main() {
	struct lconv *lc = localeconv();
	char int_p_cs_precedes = lc->int_p_cs_precedes;
	return 0;
}
EOCP
	set try
	if eval $compile; then
		d_lc_monetary_2008="$define"
	else
		d_lc_monetary_2008="$undef"
	fi;
	$rm_try
	;;
esac

d19586 3
a19588 3
randfunc=drand48
drand01="drand48()"
seedfunc="srand48"
a22392 1
	    CVS) ;;
a22619 2
	CVS|RCS|SCCS|.svn)
		;;
a23178 1
d_lc_monetary_2008='$d_lc_monetary_2008'
@


1.30
log
@Apply local patches to perl-5.20.1

ok deraadt@@ sthen@@ espie@@ miod@@
@
text
@d19623 3
a19625 3
randfunc=Perl_drand48
drand01="Perl_drand48()"
seedfunc="Perl_drand48_init"
@


1.29
log
@Fix merge conflicts, remove extra files, match upstream perl-5.20.1

ok deraadt@@ sthen@@ espie@@ miod@@
@
text
@d592 1
a2798 1
			echo "(First creating the subdirectories...)" >&4
d2800 10
a2809 5
			awk '{print $1}' $src/MANIFEST | grep / | sed 's:/[^/]*$::' | sort -u | while true; do
				read directory
				test -z "$directory" && break
				mkdir -p $directory
			done
a2814 15
			echo "(Then creating the symlinks...)" >&4
			awk '{print $1}' $src/MANIFEST | while true; do
				read filename
				test -z "$filename" && break
				if test -f $filename; then
					if $issymlink $filename; then
						rm -f $filename
					fi
				fi
				if test -f $filename; then
					echo "$filename already exists, not symlinking."
				else
					ln -s $src/$filename $filename
				fi
			done
d2820 4
d5346 19
d15601 21
d22430 1
d22658 2
d23219 1
@


1.28
log
@Make perl build in a non-writable src tree

OK millert@@ deraadt@@
@
text
@d31 1
a31 1
# Generated on Wed May  8 15:28:09 CEST 2013 [metaconfig 3.5 PL0]
d94 1
a94 1
if test -d c:/. || ( uname -a | grep -i 'os\(/\|\)2' ) 2>&1 >/dev/null ; then
d102 1
a102 1
		*cygwin) ;;
d209 3
d214 5
d323 1
a717 2
d_sfio=''
usesfio=''
a896 1
i_dld=''
a940 1
i_sfio=''
d1011 1
d1170 1
d1207 1
a1294 2
defvoidused=''
voidflags=''
d1324 3
a1374 3
: full support for void wanted by default
defvoidused=15

d1390 1
a1390 1
libswanted="sfio socket bind inet nsl nm ndbm gdbm dbm db malloc dl dld ld sun"
d1444 4
d2319 42
d2449 1
a2449 1
pth="$pth /lib /usr/lib"
d2521 1
a2521 1
*)	if $less -R </dev/null >/dev/null; then
d2798 1
d2800 5
a2804 10
			awk -v src="$src" '{
				dir=$1;
				if (!sub(/\/[^\/]*$/, "", dir)) { dir = "." }
				mf[dir] = mf[dir]" "src"/"$1;
			} END {
				for (d in mf) {
					if (d != ".") { system("mkdir -p "d) }
					system("ln -sf "mf[d]" "d);
				}
			}' $src/MANIFEST
d2810 15
a2829 4
			if test ! -f x2p/walk.c; then
				echo "Failed to create the symlinks (x2p/walk.c missing).  Aborting." >&4
				exit 1
			fi
d2841 6
d2850 7
a2856 5
        croak=''
    	case "$cc" in
	*-*-gcc) # A cross-compiling gcc, probably.
	    targetarch=`$echo $cc|$sed 's/-gcc$//'`
	    ar=$targetarch-ar
d2858 14
a2871 20
	    nm=$targetarch-nm
	    ranlib=$targetarch-ranlib
	    $echo 'extern int foo;' > try.c
	    set X `$cc -v -E try.c 2>&1 | $awk '/^#include </,/^End of search /'|$grep '/include'`
	    shift
            if $test $# -gt 0; then
	        incpth="$incpth $*"
		incpth="`$echo $incpth|$sed 's/^ //'`"
                echo "Guessing incpth '$incpth'." >&4
                for i in $*; do
		    j="`$echo $i|$sed 's,/include$,/lib,'`"
		    if $test -d $j; then
			libpth="$libpth $j"
		    fi
                done   
		libpth="`$echo $libpth|$sed 's/^ //'`"
                echo "Guessing libpth '$libpth'." >&4
	    fi
	    $rm -f try.c
	    ;;
d2875 1
a2875 23
        *)  echo "Using targetarch $targetarch." >&4 ;;
	esac
	case "$incpth" in
	'') echo "Incpth not defined." >&4; croak=y ;;
        *)  echo "Using incpth '$incpth'." >&4 ;;
	esac
	case "$libpth" in
	'') echo "Libpth not defined." >&4; croak=y ;;
        *)  echo "Using libpth '$libpth'." >&4 ;;
	esac
	case "$usrinc" in
	'') for i in $incpth; do
	        if $test -f $i/errno.h -a -f $i/stdio.h -a -f $i/time.h; then
		    usrinc=$i
	            echo "Guessing usrinc $usrinc." >&4
		    break
		fi
	    done
	    case "$usrinc" in
	    '') echo "Usrinc not defined." >&4; croak=y ;;
	    esac
            ;;
        *)  echo "Using usrinc $usrinc." >&4 ;;
d2879 1
a2879 1
        *)  echo "Using targethost $targethost." >&4
d2886 50
d2958 3
a2960 3
    	run=$run-$targetrun
    	to=$to-$targetto
    	from=$from-$targetfrom
d2963 2
a2964 2
             echo "Guessing targetdir $targetdir." >&4
             ;;
d2968 7
a2974 2
             echo "Guessing targetuser $targetuser." >&4
             ;;
d2984 1
d2992 7
d3004 2
a3005 5
if $test ! -f \$exe.xok; then
  $to \$exe
  $touch \$exe.xok
fi
$targetrun -l $targetuser $targethost "cd \$cwd && ./\$exe \$@@"
d3008 3
d3019 1
a3019 1
$targetrun -l $targetuser $targethost "mkdir -p \$@@"
d3036 1
a3036 1
    $targetto $q \$f $targetuser@@$targethost:\$f            || exit 1
d3040 1
a3040 1
    $targetto $q \$f $targetuser@@$targethost:$targetdir/\$f || exit 1
d3076 1
a3076 1
  $targetfrom $q $targetuser@@$targethost:$targetdir/\$f . || exit 1
d3122 1
a3122 1
	usecrosscompile='undef'
d3353 3
d3399 1
d3549 36
a3584 2
            osname=`echo $targetarch|sed 's,^[^-]*-,,'`
            osvers=''
d4291 1
a4291 1
Perl can be built to take advantage of threads on some systems.
d4295 1
a4295 3
and uses more memory than plain Perl. The current implementation
is believed to be stable, but it is fairly new, and so should be
treated with caution.
a4310 11
	$cat <<EOM

Since release 5.6, Perl has had two different threading implementations,
the newer interpreter-based version (ithreads) with one interpreter per
thread, and the older 5.005 version (5005threads).
The 5005threads version is effectively unmaintained and will probably be
removed in Perl 5.10, so there should be no need to build a Perl using it
unless needed for backwards compatibility with some existing 5.005threads
code.

EOM
d4315 4
a4318 1
		$define|true|[yY]*) dflt='n';;
d4474 2
a4475 2
$cat /usr/include/signal.h /usr/include/sys/signal.h >foo 2>/dev/null
if test -f /osf_boot || $contains 'OSF/1' /usr/include/ctype.h >/dev/null 2>&1
d4646 16
d4663 1
d4666 1
a4666 1
dflt='/usr/include'
d4676 1
a4676 1
	if cc -E usr.c > usr.out && $contains / usr.out >/dev/null 2>&1; then
d4724 1
a4724 1
		echo 'cat >.$$.c; '"$cc"' -E ${1+"$@@"} .$$.c; rm .$$.c' >cppstdin
d4767 1
a4767 1
	x_cpp="$cc -E"
d4773 1
a4773 1
	x_cpp="$cc -E"
d4779 1
a4779 1
	x_cpp="$cc -P"
d4785 1
a4785 1
	x_cpp="$cc -P"
d4791 1
a4791 1
	x_cpp="$cpp"
d4797 1
a4797 1
	x_cpp="$cpp"
d4857 79
d4939 2
a4940 2
		plibpth="$incpath/usr/lib /usr/local/lib /usr/ccs/lib"
	fi;;
a4948 1
libpth=''
d4966 8
d5011 19
d5304 1
d5306 1
a5306 1
if $cc -O2 $flag -o gcctest gcctest.c 2>gcctest.out && ./gcctest; then
a5351 19
	case "$gccversion" in
	1*) ;;
	2*) ;;
	?*) 	echo " "
		echo "Checking if your compiler accepts -fno-delete-null-pointer-checks" 2>&1
		echo 'int main(void) { return 0; }' > gcctest.c
		if $cc -O2 -fno-delete-null-pointer-checks -o gcctest gcctest.c; then
			echo "Yes, it does." 2>&1
			case "$ccflags" in
			*delete-null-pointer-checks*)
				echo "Leaving current flags $ccflags alone." 2>&1
				;;
			*) dflt="$dflt -fno-delete-null-pointer-checks" ;;
			esac
		else
			echo "Nope, it doesn't, but that's ok." 2>&1
		fi
		;;
	esac
d5589 1
a5589 14
		*)	echo 'The program compiled OK, but produced no output.' >> try.msg
			case " $libs " in
			*" -lsfio "*)
				cat >> try.msg <<'EOQS'
If $libs contains -lsfio, and sfio is mis-configured, then it
sometimes (apparently) runs and exits with a 0 status, but with no
output!  It may have to do with sfio's use of _exit vs. exit.

EOQS
				rp="You have a big problem.  Shall I abort Configure"
				dflt=y
				;;
			esac
			;;
a5675 5
case "$osname" in
vos) cppfilter="tr '\\\\>' '/' |" ;; # path component separator is >
os2) cppfilter="sed -e 's|\\\\\\\\|/|g' |" ;; # path component separator is \
*)   cppfilter='' ;;
esac
d5681 1
a5681 1
for usrincdir in $usrinc
d6097 53
a6905 96
: check for void type
echo " "
echo "Checking to see how well your C compiler groks the void type..." >&4
case "$voidflags" in
'')
	$cat >try.c <<EOCP
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
#if TRY & 1
void sub() {
#else
sub() {
#endif
	extern void moo();	/* function returning void */
	void (*goo)();		/* ptr to func returning void */
#if TRY & 8
	void *hue;		/* generic ptr */
#endif
#if TRY & 2
	void (*foo[10])();
#endif

#if TRY & 4
	if(goo == moo) {
		exit(0);
	}
#endif
	exit(0);
}
int main() { sub(); }
EOCP
	if $cc $ccflags -c -DTRY=$defvoidused try.c >.out 2>&1 ; then
		voidflags=$defvoidused
	echo "Good.  It appears to support void to the level $package wants.">&4
		if $contains warning .out >/dev/null 2>&1; then
			echo "However, you might get some warnings that look like this:"
			$cat .out
		fi
	else
echo "Hmm, your compiler has some difficulty with void. Checking further..." >&4
		if $cc $ccflags -c -DTRY=1 try.c >/dev/null 2>&1; then
			echo "It supports 1..."
			if $cc $ccflags -c -DTRY=3 try.c >/dev/null 2>&1; then
				echo "It also supports 2..."
				if $cc $ccflags -c -DTRY=7 try.c >/dev/null 2>&1; then
					voidflags=7
					echo "And it supports 4 but not 8 definitely."
				else
					echo "It doesn't support 4..."
					if $cc $ccflags -c -DTRY=11 try.c >/dev/null 2>&1; then
						voidflags=11
						echo "But it supports 8."
					else
						voidflags=3
						echo "Neither does it support 8."
					fi
				fi
			else
				echo "It does not support 2..."
				if $cc $ccflags -c -DTRY=13 try.c >/dev/null 2>&1; then
					voidflags=13
					echo "But it supports 4 and 8."
				else
					if $cc $ccflags -c -DTRY=5 try.c >/dev/null 2>&1; then
						voidflags=5
						echo "And it supports 4 but has not heard about 8."
					else
						echo "However it supports 8 but not 4."
					fi
				fi
			fi
		else
			echo "There is no support at all for void."
			voidflags=0
		fi
	fi
esac
case "$voidflags" in
"$defvoidused") ;;
*)	$cat >&4 <<'EOM'
  Support flag bits are:
    1: basic void declarations.
    2: arrays of pointers to functions returning void.
    4: operations between pointers to and addresses of void functions.
    8: generic void pointers.
EOM
	dflt="$voidflags";
	rp="Your void support flags add up to what?"
	. ./myread
	voidflags="$ans"
	;;
esac
$rm_try

a6910 5
	if test "$voidflags" -gt 7; then
		echo '#define VOID_PTR char *' > try.c
	else
		echo '#define VOID_PTR void *' > try.c
	fi
d6919 1
a6919 1
    printf("%d\n", (int)sizeof(VOID_PTR));
d7131 1
a7131 1
	'') dflt='' ;;
d7722 2
a7723 2
	$test -r $1 || set /usr/ccs/lib/libc.$so
	$test -r $1 || set /lib/libsys_s$_a
a7946 4
: see if dld is available
set dld.h i_dld
eval $inhdr

d7996 1
a7996 1
			echo "$extern_C void *$1$tdc; void *(*(p()))$tdc { return &$1; } int main() { if(p()) return(0); else return(1); }"> try.c;
d8002 1
a8002 1
		echo "$extern_C void *$1$tdc; void *(*(p()))$tdc { return &$1; } int main() { if(p()) return(0); else return(1); }"> try.c;
d8068 1
a8068 1
$define|y|true)
d8072 1
a8072 1
$undef|n|false)
d8076 1
a8076 1
*)
a8080 3
	case "$i_dld" in
	    $define) dflt='y' ;;
	esac
d8090 1
a8090 1
y*) usedl="$define"
d8092 2
a8093 3
	'')
		if $test -f $rsrc/$dldir/dl_${osname}.xs ; then
			dflt="$dldir/dl_${osname}.xs"
d8095 1
a8095 3
			dflt="$dldir/dl_dlopen.xs"
		elif $test "$i_dld" = "$define" ; then
			dflt="$dldir/dl_dld.xs"
d8097 1
a8097 1
			dflt=''
d8100 1
a8100 1
	*)	dflt="$dldir/$dlsrc"
d8103 1
a8103 1
    echo "The following dynamic loading files are available:"
d8121 2
a8122 2
    case "$cccdlflags" in
    '')	case "$gccversion" in
d8131 1
a8131 1
			;;
d8133 2
a8134 2
	                darwin) dflt='none' ;;
			linux*|svr4*|esix*|solaris|nonstopux) dflt='-fPIC' ;;
d8137 33
a8169 10
	    esac ;;
	' ') dflt='none' ;;
    *)	dflt="$cccdlflags" ;;
    esac
    rp="Any special flags to pass to $cc -c to compile shared library modules?"
    . ./myread
    case "$ans" in
    none) cccdlflags=' ' ;;
    *) cccdlflags="$ans" ;;
    esac
d8171 1
a8171 1
    cat << EOM
d8191 7
a8197 8
	char b[4];
	int i = open("a.out",O_RDONLY);
	if(i == -1)
		exit(1); /* fail */
	if(read(i,b,4)==4 && b[0]==127 && b[1]=='E' && b[2]=='L' && b[3]=='F')
		exit(0); /* succeed (yes, it is ELF) */
	else
		exit(1); /* fail */
d8201 1
a8201 1
		bin_ELF="$define"
d8206 2
a8207 2
	'')	if $test $bin_ELF = "$define"; then
			cat <<EOM
d8210 1
a8210 1
			dflt="$cc"
d8212 2
a8213 2
			echo "I'll use ld to build dynamic libraries."
			dflt='ld'
d8216 1
a8216 1
	*)	dflt="$ld"
d8220 2
a8221 2
    rp="What command should be used to create dynamic libraries?"
    . ./myread
d8224 1
a8224 1
    cat << EOM
d8233 5
a8237 5
    case "$lddlflags" in
    '') case "$osname" in
  			haiku) dflt='-shared' ;;
			hpux) dflt='-b';
			      case "$gccversion" in
d8239 35
a8273 25
			      esac
			      ;;
			linux|irix*|gnu*)  dflt="-shared $optimize" ;;
			next)  dflt='none' ;;
			solaris) # See [perl #66604].  On Solaris 11, gcc -m64 on amd64
				# appears not to understand -G.  gcc versions at
				# least as old as 3.4.3 support -shared, so just
				# use that with Solaris 11 and later, but keep
				# the old behavior for older Solaris versions.
				case "$gccversion" in
					'') dflt='-G' ;;
					*)	case "$osvers" in
							2.?|2.10) dflt='-G' ;;
							*) dflt='-shared' ;;
						esac
						;;
				esac
				;;
			sunos) dflt='-assert nodefinitions' ;;
			svr4*|esix*|nonstopux) dflt="-G $ldflags" ;;
	        *)     dflt='none' ;;
			esac
			;;
    *) dflt="$lddlflags" ;;
    esac
d8278 1
a8278 1
	none) dflt='' ;;
d8281 1
a8281 1
		case "$thisflag" in
d8283 1
a8283 1
			case " $dflt " in
d8286 3
a8288 3
			esac
			;;
		esac
d8292 1
a8292 1
	''|' ') dflt='none' ;;
d8296 4
a8299 4
	*-fstack-protector*)
	    case "$dflt" in
			*-fstack-protector*) ;; # Don't add it again
			*) dflt="$dflt -fstack-protector" ;; 
d8304 6
a8309 7

    rp="Any special flags to pass to $ld to create a dynamically loaded library?"
    . ./myread
    case "$ans" in
    none) lddlflags=' ' ;;
    *) lddlflags="$ans" ;;
    esac
d8318 18
a8335 17
    case "$ccdlflags" in
    '') case "$osname" in
	    linux|hpux|gnu*)	dflt='-Wl,-E' ;;
	    next|sunos)	dflt='none' ;;
	    *)		dflt='none' ;;
	    esac ;;
    ' ')  dflt='none' ;;
    *)  dflt="$ccdlflags" ;;
    esac
    rp="Any special flags to pass to $cc to use dynamic linking?"
    . ./myread
    case "$ans" in
    none) ccdlflags=' ' ;;
    *) ccdlflags="$ans" ;;
    esac
    ;;
*)  usedl="$undef"
d8337 4
a8340 4
    dlsrc='dl_none.xs'
    lddlflags=''
    ccdlflags=''
    ;;
d8345 3
a8347 3
$define$define)
    # Abuse try.h and a.out names for neat cleanup
    $cat >try.c <<EOM
d8351 1
a8351 1
    $cat >try.h <<EOM
d8358 11
a8368 11
    if $cc $cccdlflags $ccdlflags $ccflags \
           $ldflags $lddlflags -o a.out try.c \
           -Wl,--version-script=try.h >/dev/null 2>&1 \
       &&  $test -s a.out ; then
	echo "ld supports scripting" >&4
	ld_can_script="$define"
    else
	echo "ld does not support scripting" >&4
    fi
    $rm_try
    ;;
d8454 1
a8454 1
		linux*|gnu*)  # ld won't link with a bare -lperl otherwise.
d8542 1
a8542 1
	freebsd|mirbsd|netbsd|openbsd|interix|dragonfly)
d11528 10
d11540 27
a11566 46
	if set setsockopt val -f; eval $csym; $val; then
		d_oldsock="$undef"
	else
		echo "...but it uses the old BSD 4.1c interface, rather than 4.2." >&4
		d_oldsock="$define"
	fi
else
	if $contains socklib libc.list >/dev/null 2>&1; then
		echo "Looks like you have Berkeley networking support." >&4
		d_socket="$define"
		: we will have to assume that it supports the 4.2 BSD interface
		d_oldsock="$undef"
	else
		echo "You don't have Berkeley networking in libc$_a..." >&4
		if test "X$d_socket" = "X$define"; then
		   echo "...but you seem to believe that you have sockets." >&4
		else
			for net in net socket
			do
				if test -f /usr/lib/lib$net$_a; then
					( ($nm $nm_opt /usr/lib/lib$net$_a | eval $nm_extract) ||  \
					$ar t /usr/lib/lib$net$_a) 2>/dev/null >> libc.list
					if $contains socket libc.list >/dev/null 2>&1; then
						d_socket="$define"
						socketlib="-l$net"
						case "$net" in
						net)
							echo "...but the Wollongong group seems to have hacked it in." >&4
							sockethdr="-I/usr/netinclude"
							;;
						esac
						echo "Found Berkeley sockets interface in lib$net." >&4
						if $contains setsockopt libc.list >/dev/null 2>&1; then
							d_oldsock="$undef"
						else
							echo "...using the old BSD 4.1c interface, rather than 4.2." >&4
							d_oldsock="$define"
						fi
						break
					fi
				fi
			done
			if test "X$d_socket" != "X$define"; then
			   echo "or anywhere else I see." >&4
			   d_socket="$undef"
			   d_oldsock="$undef"
d11568 2
d11571 6
d11578 1
d11598 1
a11598 1
	val="$define"
d11616 1
a11616 1
	val="$define"
d11634 1
a11634 1
	val="$define"
d11688 1
a11688 1
	val="$define"
d11714 2
a11715 2
	enum=`$echo $ENUM|./tr '[A-Z]' '[a-z]'`
	$cat >try.c <<EOF
d11722 6
a11727 6
	val="$undef"
	set try; if eval $compile; then
		val="$define"
	fi
	set d_${enum}; eval $setvar
	$rm_try
d13065 1
a13065 1
		./mtry >/dev/null 2>&1
d15975 1
a15975 1
  uint16_t i = UINT16_MAX;
a17691 65
: see if sfio.h is available
set sfio.h i_sfio
eval $inhdr

: see if sfio library is available
case "$i_sfio" in
$define)
	val=''
	set sfreserve val
	eval $inlibc
	;;
*)
	val="$undef"
	;;
esac
: Ok, but do we want to use it.
case "$val" in
$define)
	case "$usesfio" in
	true|$define|[yY]*) dflt='y';;
	*) dflt='n';;
	esac
	echo "$package can use the sfio library, but it is experimental."
	rp="You seem to have sfio available, do you want to try using it?"
	. ./myread
	case "$ans" in
	y|Y)	echo "Ok, turning on sfio then."
		val="$define"
		;;
	*)	echo "Ok, avoiding sfio this time.  I'll use stdio instead."
		val="$undef"
		;;
	esac
	;;
*)	case "$usesfio" in
	true|$define|[yY]*)
		echo "Sorry, cannot find sfio on this machine." >&4
		echo "Ignoring your setting of usesfio=$usesfio." >&4
		val="$undef"
		;;
	esac
	;;
esac
set d_sfio
eval $setvar
case "$d_sfio" in
$define) usesfio='true';;
*) usesfio='false';;
esac
case "$d_sfio" in
$define) ;;
*)	: Remove sfio from list of libraries to use
	case "$libs" in
	*-lsfio*)
		echo "Removing unneeded -lsfio from library list" >&4
		set `echo X $libs | $sed -e 's/-lsfio / /' -e 's/-lsfio$//'`
		shift
		libs="$*"
		echo "libs = $libs" >&4
		;;
	esac
;;
esac


d17751 1
a17751 1
	evat $setvar
d17753 1
a17753 1
	evat $setvar
d17755 1
a17755 1
	evat $setvar
d17757 1
a17757 1
	evat $setvar
d18921 1
a18921 1
case "$usecrosscompile$multiarch" in
d18924 1
a18924 1
You seem to be either cross-compiling or doing a multiarchitecture build,
d19223 4
a19226 15
case "$usecrosscompile" in
*$define*)
	$cat <<EOM
You seem to be cross-compiling.  Skipping the memory alignment check.

EOM
	case "$alignbytes" in
	'') alignbytes=8 ;;
	esac
	;;
*)
	case "$alignbytes" in
	'') echo "Checking alignment constraints..." >&4
		if $test "X$uselongdouble" = Xdefine -a "X$d_longdbl" = Xdefine; then
			$cat >try.c <<'EOCP'
d19229 2
a19230 2
		else
			$cat >try.c <<'EOCP'
d19233 2
a19234 2
		fi
		$cat >>try.c <<'EOCP'
d19237 2
a19238 2
	char foo;
	NV bar;
d19246 15
a19260 6
		set try
		if eval $compile_ok; then
			dflt=`$run ./try`
		else
			dflt='8'
			echo "(I can't seem to compile the test program...)"
a19261 13
		case "$multiarch" in
		*$define*)
			: The usual safe value is 8, but Darwin with -Duselongdouble
			: needs 16.  Hence, we will take 8 as a minimum, but allow
			: Configure to pick a larger value if needed.
			if $test "$dflt" -lt 8; then
			    dflt='8'
				echo "Setting alignment to 8 for multiarch support.">&4
			fi
			;;
		esac
		;;
	*) dflt="$alignbytes"
d19264 2
a19265 4
	rp="Doubles must be aligned on a how-many-byte boundary?"
	. ./myread
	alignbytes="$ans"
	$rm_try
d19268 4
a19271 1

d19578 1
a19578 20
echo "Looking for a random number function..." >&4
case "$randfunc" in
'')
	if set drand48 val -f; eval $csym; $val; then
		dflt="drand48"
		echo "Good, found drand48()." >&4
	elif set random val -f; eval $csym; $val; then
		dflt="random"
		echo "OK, found random()." >&4
	else
		dflt="rand"
		echo "Yuck, looks like I have to use rand()." >&4
	fi
	echo " "
	;;
*)
	dflt="$randfunc"
	;;
esac
cont=true
d19589 5
a19593 97
while $test "$cont"; do
	rp="Use which function to generate random numbers?"
	. ./myread
	if $test "$ans" = "$dflt"; then
		: null
	else
		randbits=''
	fi
	randfunc="$ans"
	if set $ans val -f; eval $csym; $val; then
		cont=''
	else
		dflt=y
		rp="I cannot find function $ans. Use that name anyway?"
		. ./myread
		dflt=rand
		case "$ans" in
			[yY]*) cont='';;
		esac
	fi
	case "$cont" in
	'')
		case "$randfunc" in
		drand48)
			drand01="drand48()"
			seedfunc="srand48"
			randbits=48
			randseedtype=long
			;;
		rand|random)
			case "$randbits" in
			'')
echo "Checking to see how many bits your $randfunc() function produces..." >&4
				$cat >try.c <<EOCP
#$i_unistd I_UNISTD
#$i_stdlib I_STDLIB
#include <stdio.h>
#ifdef I_UNISTD
#  include <unistd.h>
#endif
#ifdef I_STDLIB
#  include <stdlib.h>
#endif
int main()
{
	int i;
	unsigned long tmp;
	unsigned long max = 0L;

	for (i = 1000; i; i--) {
		tmp = (unsigned long) $randfunc();
		if (tmp > max) max = tmp;
	}
	for (i = 0; max; i++)
		max /= 2;
	printf("%d\n",i);
}
EOCP
				set try
				if eval $compile_ok; then
					dflt=`try`
				else
					dflt='?'
					echo "(I can't seem to compile the test program...)"
				fi
				;;
			*)
				dflt="$randbits"
				;;
			esac
			rp="How many bits does your $randfunc() function produce?"
			. ./myread
			randbits="$ans"
			$rm_try
			drand01="($randfunc() / (double) ((unsigned long)1 << $randbits))"
			seedfunc="s$randfunc"
			randseedtype=unsigned
			;;
		*)
			dflt="31"
			rp="How many bits does your $randfunc() function produce?"
			. ./myread
			randbits="$ans"
			seedfunc="s$randfunc"
			drand01="($randfunc() / (double) ((unsigned long)1 << $randbits))"
			if set $seedfunc val -f; eval $csym; $val; then
				echo "(Using $seedfunc() to seed random generator)"
			else
				echo "(Warning: no $seedfunc() to seed random generator)"
				seedfunc=rand
			fi
			randseedtype=unsigned
			;;
		esac
		;;
	esac
done
d19677 1
a19677 1
 	    $run ./try 2>/dev/null
d19688 1
a19688 1
 		    $run ./try 2>/dev/null
d19702 1
a19702 1
	    	$run ./try 2>/dev/null
d19733 8
a19740 8
        while ((i = getc(stdin)) != -1
               && (*bp++ = i) != '\n'
               && bp < &buf[1024])
    	/* DO NOTHING */ ;
        *bp = '\0';
        fprintf(stdout, "%s", buf);
        fflush(NULL);
        if (i == -1)
d19742 1
a19742 1
        bp = buf;
d19746 14
a19759 7
                fflushNULL="$define"
                set tryp
                if eval $compile; then
                    $rm -f tryp.out
                    $cat tryp.c | $run ./tryp 2>/dev/null > tryp.out
                    if cmp tryp.c tryp.out >/dev/null 2>&1; then
                       $cat >&4 <<EOM
d19763 1
a19763 1
                    else
d19767 4
a19770 4
                        fflushNULL="$undef"
                    fi
                fi
	        $rm -f core tryp.c tryp.core core.tryp.*
d19821 7
a19827 1
	    $cat tryp.c | $run ./tryp 2>/dev/null > tryp.out
d20965 1
a20965 1
	xxx='/usr/include/signal.h /usr/include/sys/signal.h'
d22036 1
a22036 1
cat <<EOSH >>Cppsym.know
d22194 3
a22196 3
	set tcsetattr i_termios
	eval $inlibc
	val3="$i_termios"
d22200 3
a22202 3
"$define") echo "You have POSIX termios.h... good!" >&4;;
*) if ./Cppsym pyr; then
		case "`/bin/universe`" in
a22203 20
				val2="$define"
				echo "<sgtty.h> found." >&4
			else
				echo "System is pyramid with BSD universe."
				./warn "<sgtty.h> not found--you could have problems."
			fi;;
		*) if $test `./findhdr termio.h`; then
				val="$define"
				echo "<termio.h> found." >&4
			else
				echo "System is pyramid with USG universe."
				./warn "<termio.h> not found--you could have problems."
			fi;;
		esac
	elif ./usg; then
		if $test `./findhdr termio.h`; then
			echo "<termio.h> found." >&4
			val="$define"
		elif $test `./findhdr sgtty.h`; then
			echo "<sgtty.h> found." >&4
a22204 5
		else
			./warn "Neither <termio.h> nor <sgtty.h> found--cross fingers!"
		fi
	else
		if $test `./findhdr sgtty.h`; then
d22206 6
a22211 2
			val2="$define"
		elif $test `./findhdr termio.h`; then
d22213 25
a22237 4
			val="$define"
		else
			./warn "Neither <sgtty.h> nor <termio.h> found--cross fingers!"
		fi
d22380 2
a22381 3
: If we are using the old config.sh, known_extensions may contain
: old or inaccurate or duplicate values.
known_extensions=''
d22383 1
a22395 1
	    CVS) ;;
d22399 32
a22430 45
	    leaf=`echo $xxx | $sed -e s/.*-//`;
	    if $test -d File; then
		if $test -f $xxx/$leaf.xs -o -f $xxx/$leaf.c; then
		    known_extensions="$known_extensions $1$this_ext";
		elif $test -f $xxx/Makefile.PL; then
		    nonxs_extensions="$nonxs_extensions $1$this_ext";
		else
		    if $test -d $xxx -a $# -lt 10; then
			set $1$xxx/ $*;
			cd "$xxx";
			eval $find_extensions;
			cd ..;
			shift;
		    fi;
		fi;
	    else
		echo " $known_extensions $nonxs_extensions" > $tdir/$$.tmp;
		if $contains " $this_ext " $tdir/$$.tmp; then
		    echo >&4;
		    echo "Duplicate directories detected for extension $xxx" >&4;
		    echo "Configure cannot correctly recover from this - shall I abort?" >&4;
		    case "$knowitall" in
		    "") dflt=y;;
		    *) dflt=n;;
		    esac;
		    . ../UU/myread;
		    case "$ans" in
		    n*|N*) ;;
		    *) echo >&4;
		       echo "Ok.  Stopping Configure." >&4;
		       echo "Please remove the duplicate directory (e.g. using git clean) and then re-run Configure" >&4;
			exit 1;;
		    esac;
		    echo "Ok.  You will need to correct config.sh before running make." >&4;
		fi;
		$ls -1 $xxx > $tdir/$$.tmp;
		if   $contains "\.xs$" $tdir/$$.tmp > /dev/null 2>&1; then
		    known_extensions="$known_extensions $this_ext";
		elif $contains "\.c$"  $tdir/$$.tmp > /dev/null 2>&1; then
		    known_extensions="$known_extensions $this_ext";
		elif $test -d $xxx; then
		    nonxs_extensions="$nonxs_extensions $this_ext";
		fi;
		$rm -f $tdir/$$.tmp;
	    fi
d22447 1
a22447 11
if $test -d File-Glob; then
    : All ext/ flattened
else
    # Special case:  Add in modules that nest beyond the first level.
    # Currently threads/shared and Hash/Util/FieldHash, since they are
    # not picked up by the recursive find above (and adding in general
    # recursive finding breaks SDBM_File/sdbm).
    # A.D. 20011025 (SDBM), ajgough 20071008 (FieldHash)
    known_extensions="$known_extensions threads/shared Hash/Util/FieldHash"
fi
set X $known_extensions
d22449 1
a22449 1
known_extensions=`echo "$*" | tr ' ' $trnl | $sort | tr $trnl ' '`
d22454 1
d22458 1
a22458 1
for xxx in $known_extensions ; do
d22623 1
a22623 1
	CVS|RCS|SCCS|.svn)
d22763 1
d23176 1
a23317 1
d_sfio='$d_sfio'
a23428 1
defvoidused='$defvoidused'
d23505 3
a23526 1
i_dld='$i_dld'
a23557 1
i_sfio='$i_sfio'
d23610 1
d23878 1
d23882 6
a23937 1
usesfio='$usesfio'
a23976 1
voidflags='$voidflags'
@


1.27
log
@Merge perl-5.18.2 plus local patches, remove old files

OK espie@@ sthen@@ deraadt@@
@
text
@d22403 2
a22404 2
		echo " $known_extensions $nonxs_extensions" > $$.tmp;
		if $contains " $this_ext " $$.tmp; then
d22422 2
a22423 2
		$ls -1 $xxx > $$.tmp;
		if   $contains "\.xs$" $$.tmp > /dev/null 2>&1; then
d22425 1
a22425 1
		elif $contains "\.c$"  $$.tmp > /dev/null 2>&1; then
d22430 1
a22430 1
		$rm -f $$.tmp;
@


1.26
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@d17 1
a17 1
#     svn co https://svn.sourceforge.net/svnroot/dist/trunk/dist
d31 1
a31 1
# Generated on Sun Apr  1 12:00:35 CEST 2012 [metaconfig 3.5 PL0]
d335 1
d727 2
d730 1
d854 1
d1428 1
a1428 1
$me:  Fatal Error:  I can't find a Bourne Shell anywhere.  
d1431 1
a1431 1
Please contact me (Perl Maintainers) at perlbug@@perl.org and 
d2716 1
a2716 1
		fi		
d3098 4
d3104 1
a3104 1
myuname=`echo $myuname | $sed -e 's/^[^=]*=//' -e "s,['/],,g" | \
d3989 1
a3989 1
if $afs; then 
d5278 1
a5278 1
*-fstack-protector*) 
d5281 1
a5281 1
	*) dflt="$dflt -fstack-protector" ;; 
d6038 26
d7055 3
a7057 3
These directories will be searched after 
	$sitearch 
	$sitelib 
d7075 1
a7075 1
' '|''|none)	otherlibdirs=' ' ;;     
d7412 1
a7412 1
	'') 
d7416 1
a7416 1
			echo "'nm' won't be sufficient on this sytem." >&4
a8054 1
  			beos) dflt='-nostart' ;;
d8063 14
a8076 1
			solaris) dflt='-G' ;;
d8190 1
a8190 1
		svr4*|nonstopux|dgux|dynixptx|esix|powerux|beos|haiku|cygwin*)
a8360 3
	beos)
		# beos doesn't like the default, either.
		;;
d8412 1
a8412 1
'') 
d8895 10
d8906 2
a8907 2
	'') dflt="$cf_by@@$myhostname$mydomain";;
	*) dflt="$cf_email";;
d10865 1
a10865 1
: see if varags is available
d10917 1
d10934 9
d11450 36
d11504 18
d11999 1
a11999 1
#endif 
d12502 1
a12502 1
	val="$undef"; 
d15144 1
a15144 1
		exit(0);
d15146 1
a15146 1
		exit(1);
d17673 1
a17673 1
		echo "But you don't seem to have a useable struct sigaction." >&4
d18108 1
a18108 1
	# For gcc, prefer __inline__, which will still permit 
d18238 2
a18239 2
		if set sys_errlist val -a d_syserrlst; eval $csym; $val; then	
			echo "(You also have sys_errlist[], so we could roll our own strerror.)" 
d18242 1
a18242 1
			echo "(Since you don't have sys_errlist[], sterror() is welcome.)"
d18250 1
a18250 1
		if set sys_errlist val -a d_syserrlst; eval $csym; $val; then	
d18788 1
a18788 1
next|rhapsody|darwin) multiarch="$define" ;;
d19098 1
a19098 1
case "$usecrosscompile$multiarch" in
d19101 1
a19101 2
You seem to be either cross-compiling or doing a multiarchitecture build,
skipping the memory alignment check.
d19139 11
d19165 34
a19198 1
: length of character in bytes. Is always 1, otherwise it isnt C
d19478 1
a19478 1
		echo "Yick, looks like I have to use rand()." >&4
d19542 3
a19544 3
	register int i;
	register unsigned long tmp;
	register unsigned long max = 0L;
a19594 28
: Determine if this is an EBCDIC system
echo " "
echo "Determining whether or not we are on an EBCDIC system..." >&4
$cat >try.c <<'EOM'
int main()
{
  if ('M'==0xd4) return 0;
  return 1;
}
EOM

val=$undef
set try
if eval $compile_ok; then
	if $run ./try; then
		echo "You seem to speak EBCDIC." >&4
		val="$define"
	else
		echo "Nope, no EBCDIC, probably ASCII or some ISO Latin. Or UTF-8." >&4
	fi
else
	echo "I'm unable to compile the test program." >&4
	echo "I'll assume ASCII or some ISO Latin. Or UTF8." >&4
fi
$rm_try
set ebcdic
eval $setvar

d19698 1
a19698 1
: check for fflush NULL behaviour
d20396 1
a20553 1
	fn="f/($pager)"
d20556 1
d21684 1
a21684 1
if eval $compile_ok; then
d21786 1
a21786 1
if eval $compile_ok; then
d21851 1
a21851 1
		echo "(Adding -y option to bison to get yacc-compatible behaviour.)"
d22085 2
a22086 2
./Cppsym < Cppsym.know > Cppsym.true
: Add in any linux cpp "predefined macros":
d22092 1
d22094 1
a22094 1
       sed 's/#define[\ \  ]*//;s/[\ \     ].*$//' <$tHdrH'_cppsym.h' >$tHdrH'_cppsym.real'
d22417 1
a22417 1
		       echo "Please remove the duplicate directory (eg using git clean) and then re-run Configure" >&4;
d22535 1
a22535 6
		true|$define|y)
		    case "$osname" in
		    beos) ;; # not unless BONE
		    *) avail_ext="$avail_ext $xxx" ;;
		    esac
		    ;;
d22808 1
a22808 1
	    set X `echo " $libs " | sed -e 's@@ -lndbm @@ @@' -e 's@@ -lgdbm @@ @@' -e 's@@ -lgdbm_compat @@ @@' -e 's@@ -ldbm @@ @@' -e 's@@ -ldb @@ @@'` 
d22933 1
d23171 2
d23174 1
d23945 1
@


1.25
log
@More efficient method of building the symlink tree that makes better
use of awk.  Slightly faster and works around an apparent namei or
buffer cache related bug on arm.  Requested and OK deraadt@@
@
text
@d31 1
a31 3
# $Id: Head.U 6 2006-08-25 22:21:46Z rmanfredi $
#
# Generated on Wed Jun 23 16:03:55 CEST 2010 [metaconfig 3.5 PL0]
d568 1
d630 2
d726 1
d734 3
d754 2
d846 1
d933 1
d1202 2
d1225 1
d1237 1
d1324 12
a1363 12
: Possible local include directories to search.
: Set locincpth to "" in a hint file to defeat local include searches.
locincpth="/usr/local/include /opt/local/include /usr/gnu/include"
locincpth="$locincpth /opt/gnu/include /usr/GNU/include /opt/GNU/include"
:
: no include file wanted by default
inclwanted=''

: Enable -DEBUGGING and -DDEBUGGING from the command line
EBUGGING=''
DEBUGGING=old

d2265 1
a2265 1
Everytime there is a substitution, you will have to confirm.  If there is an
d2385 1
a4075 71
: Check is we will use socks
case "$usesocks" in
$define|true|[yY]*)	dflt='y';;
*) dflt='n';;
esac
cat <<EOM

Perl can be built to use the SOCKS proxy protocol library.  To do so,
Configure must be run with -Dusesocks.  If you use SOCKS you also need
to use the PerlIO abstraction layer, this will be implicitly selected.

If this doesn't make any sense to you, just accept the default '$dflt'.
EOM
rp='Build Perl for SOCKS?'
. ./myread
case "$ans" in
y|Y)	val="$define" ;;
*)      val="$undef" ;;
esac
set usesocks
eval $setvar

case "$usesocks" in
$define|true|[yY]*) useperlio="$define";;
esac

: Check if we want perlio
case "$useperlio" in
$define|true|[yY]*|'')	dflt='y';;
*) dflt='n';;
esac
cat <<EOM

Previous version of $package used the standard IO mechanisms as
defined in <stdio.h>.  Versions 5.003_02 and later of $package allow
alternate IO mechanisms via the PerlIO abstraction layer, but the
stdio mechanism is still available if needed.  The abstraction layer
can use AT&T's sfio (if you already have sfio installed) or regular stdio.
Using PerlIO with sfio may cause problems with some extension modules.

If this doesn't make any sense to you, just accept the default '$dflt'.
EOM
rp='Use the PerlIO abstraction layer?'
. ./myread
case "$ans" in
y|Y)
	val="$define"
	;;
*)
	echo "Ok, doing things the stdio way."
	val="$undef"
	;;
esac
set useperlio
eval $setvar

case "$usesocks" in
$define|true|[yY]*)
	case "$useperlio" in
	$define|true|[yY]*) ;;
	*)	cat >&4 <<EOM

You are using the SOCKS proxy protocol library which means that you
should also use the PerlIO layer.  You may be headed for trouble.

EOM
		;;
	esac
	;;
esac

a4096 5
if $test -r $rsrc/.patch ; then
	if $test "X$perl_patchlevel" = "X" || $test "`cat $rsrc/.patch`" -gt "$perl_patchlevel" ; then
		perl_patchlevel=`cat $rsrc/.patch`
	fi
fi
d4135 2
a4136 7
       *$define*)
		case "$useperlio" in
		"$define")	dflt='y' ;;
		*)		dflt='n' ;;
		esac
		;;
       *)	dflt='n';;
a4237 10
if test X"$usethreads" = "X$define" -a "X$useperlio" = "Xundef"; then
	cat >&4 <<EOF
***
*** To build with ithreads you must also use the PerlIO layer.
*** Cannot continue, aborting.
***
EOF
	exit 1
fi

d4813 22
a6094 15
case "$useperlio" in
$define)
	echo "Perlio selected." >&4
	;;
*)
	echo "Perlio not selected, using stdio." >&4
	case "$archname" in
        *-stdio*) echo "...and architecture name already has -stdio." >&4
                ;;
        *)      archname="$archname-stdio"
                echo "...setting architecture name to $archname." >&4
                ;;
        esac
	;;
esac
d6792 1
d7616 1
a7616 1
xxx='[ADTSIW]'
d7961 3
a7963 2
	case "$ld" in
	'')	$cat >try.c <<EOM
d7980 1
a7980 1
		exit(0); /* succeed (yes, it's ELF) */
d7985 7
a7991 1
		if $cc $ccflags $ldflags try.c >/dev/null 2>&1 && $run ./a.out; then
a7995 1
			bin_ELF="$define"
a7999 1
		$rm_try
d8106 28
d8305 1
a8305 1
	freebsd|netbsd|openbsd|interix|dragonfly)
d9389 3
d9879 1
a9879 1
    : again, add prefered functions to our list first
d10040 1
a10040 1
: define a fucntion to check prototypes
d11333 71
d15018 24
d16126 25
d16160 9
a16168 3
"$define")
	if $issymlink /proc/self/exe ; then
		$ls -l /proc/self/exe > reflect
d16170 5
a16174 3
			echo "You have Linux-like /proc/self/exe."
			procselfexe='"/proc/self/exe"'
			val="$define"
d16176 2
a16177 9
	fi
	if $issymlink /proc/curproc/file ; then
		$ls -l /proc/curproc/file > reflect
		if $contains /`basename $ls` reflect >/dev/null 2>&1; then
			echo "You have BSD-like /proc/curproc/file."
			procselfexe='"/proc/curproc/file"'
			val="$define"
		fi
	fi
a17406 6
	case "$useperlio" in
	"$undef")
	    echo "For sfio also the PerlIO abstraction layer is needed."
	    echo "Earlier you said you wouldn't want that."
	    ;;
	esac
d17410 1
a17410 2
	y|Y)	echo "Ok, turning on both sfio and PerlIO, then."
		useperlio="$define"
d17943 106
d18759 1
a18759 1
: Checking 32bit aligndness
d19037 3
a19039 33
: check for length of character
echo " "
case "$charsize" in
'')
	echo "Checking to see how big your characters are (hey, you never know)..." >&4
	$cat >try.c <<EOCP
#include <stdio.h>
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
int main()
{
    printf("%d\n", (int)sizeof(char));
    exit(0);
}
EOCP
	set try
	if eval $compile_ok; then
		dflt=`$run ./try`
	else
		dflt='1'
		echo "(I can't seem to compile the test program.  Guessing...)"
	fi
	;;
*)
	dflt="$charsize"
	;;
esac
rp="What is the size of a character (in bytes)?"
. ./myread
charsize="$ans"
$rm_try
d21236 68
d21452 215
d22096 29
d22248 1
d22268 19
a22449 7
	XS/APItest/KeywordRPN|xs/apitest/keywordrpn)
		# This is just for testing.  Skip it unless we have dynamic loading.

		case "$usedl" in
		$define) avail_ext="$avail_ext $xxx" ;;
		esac
		;;
d22468 1
a22468 1
    echo "You have requested that only certains extensions be included..." >&4
d22640 1
a22640 1
	cd "$rsrc/ext"
d23040 1
d23042 1
d23116 2
d23203 1
d23206 2
d23223 1
d23437 1
d23523 1
d23622 1
d23735 2
d23791 1
d23799 1
d23864 1
a23864 1
	set X `cat UU/oldsyms`
d23869 1
a23869 1
		cat <<EOM
d23873 1
a23873 1
		for sym in `cat UU/oldsyms`; do
@


1.24
log
@After the MANIFEST-based symbolic link creation loop, there is a check
for a specific link to see if things worked out.  Add a check for the very
last file in the MANIFEST, as well, since we are trying to spot a very
odd bug where symbolic links are not being created.  Hopefully this will
help us diagnose it.
ok guenther millert
@
text
@a2726 1
			echo "(First creating the subdirectories...)" >&4
d2728 10
a2737 5
			awk '{print $1}' $src/MANIFEST | grep / | sed 's:/[^/]*$::' | sort -u | while true; do
				read directory
				test -z "$directory" && break
				mkdir -p $directory
			done
a2742 15
			echo "(Then creating the symlinks...)" >&4
			awk '{print $1}' $src/MANIFEST | while true; do
				read filename
				test -z "$filename" && break
				if test -f $filename; then
					if $issymlink $filename; then
						rm -f $filename
					fi
				fi
				if test -f $filename; then
					echo "$filename already exists, not symlinking."
				else
					ln -s $src/$filename $filename
				fi
			done
@


1.23
log
@merge in perl 5.12.2 plus local changes
@
text
@d2759 4
@


1.22
log
@Skip revision control dirs when looking for extensions.  Fixes building
in non-obj dir.
@
text
@d19 8
a27 3
# Though this script was generated by metaconfig, it is OK to send
# patches against it. It's up to the Configure pumpkin to backport
# the patch to the metaunits if it is accepted.
d31 1
a31 1
# $Id: Configure,v 1.21 2009/10/14 19:08:07 millert Exp $
d33 1
a33 1
# Generated on Tue Aug 18 19:22:01 CEST 2009 [metaconfig 3.5 PL0]
d61 1
a61 1
	cat >&4 <<EOF
d73 1
a73 1
	cat >&4 <<EOF
d356 2
d834 1
d1235 1
d2448 9
d7174 2
d7968 1
d8065 1
d8234 7
d11051 1
a11051 1
	   in a writable string for gcc to pass to sscanf under HP/UX.
d11118 1
a11118 1
	   sscanf under HP/UX.
d18600 2
a18601 2
    U8 buf[8];
    U32 *up;
d18857 80
d21244 15
d21521 1
a21521 1
  *linux*::*.*)
d21525 1
a21525 1
    if cpp -dM $tHdrH'.h' > $tHdrH'_cppsym.h' && [ -s $tHdrH'_cppsym.h' ]; then
d21781 2
d21790 1
a21790 11
	    if $test -d File-Glob; then
		$ls -1 $xxx > $$.tmp;
		if   $contains "\.xs$" $$.tmp > /dev/null 2>&1; then
		    known_extensions="$known_extensions $this_ext";
		elif $contains "\.c$"  $$.tmp > /dev/null 2>&1; then
		    known_extensions="$known_extensions $this_ext";
		elif $test -d $xxx; then
		    nonxs_extensions="$nonxs_extensions $this_ext";
		fi;
		$rm -f $$.tmp;
	    else
d21804 10
d21819 8
d21843 1
a21843 1
known_extensions="$*"
d21846 1
a21846 1
nonxs_extensions="$*"
d21968 7
d22325 1
d22344 2
d23330 1
@


1.21
log
@Better fix for treating IO-Compress as an extension that the one in 5.10.1,
http://perl5.git.perl.org/perl.git/commit/4cc80fc4cbbd82e20f7b14b6
Should fix static architectures like vax.
@
text
@d26 1
a26 1
# $Id: Configure,v 1.20 2009/10/12 18:24:20 millert Exp $
d21887 2
@


1.20
log
@Merge in perl 5.10.1
@
text
@d26 1
a26 1
# $Id: Head.U 6 2006-08-25 22:21:46Z rmanfredi $
a21656 4
: In 5.10.1 and later, extensions are stored in directories
: like File-Glob instead of the older File/Glob/.  In this scheme,
: IO-Compress does not appear to be an XS extension, but we want
: to install it as one.  A.D.  8/2009.
a21668 2
		    known_extensions="$known_extensions $this_ext";
		elif $test "$this_ext" = "IO/Compress"; then
@


1.19
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@d14 1
a14 1
# (Note: this Configure script was generated automatically. Rather than
d16 2
a17 3
# The dist-3.0 package (which contains metaconfig) was posted in
# comp.sources.misc and is available on CPAN under authors/id/RAM so
# you may fetch it yourself from your nearest archive site.)
d26 1
a26 1
# $Id: Head.U,v 3.0.1.9 1997/02/28 15:02:09 ram Exp $
d28 1
a28 1
# Generated on Mon Oct  8 10:22:27 CEST 2007 [metaconfig 3.0 PL70]
d90 1
a90 1
: On OS/2 this directory should exist if this is not floppy only system :-]
d92 1
a92 1
    if test -n "$OS2_SHELL"; then
d147 3
a149 3
	        avoidksh="to avoid Digital UNIX' ksh"
	        newsh=/bin/sh
	        unset BIN_SH # if this is 'xpg4' sh will start up ksh
d185 1
a185 1
: if needed set CDPATH to a harmless value that is not chatty
d190 2
a191 2
	*bash*)	CDPATH='.' ;;
	*)		CDPATH='' ;;
d195 1
d210 1
d212 1
a225 1
Mcc=''
d364 1
d470 1
d502 1
d559 2
d787 7
d856 1
d886 1
d890 6
d936 1
d1082 1
d1191 4
d1203 2
d1266 1
d1296 1
a1301 1
groupstype=''
a1324 3
siteman1dir=''
siteman3dir=''
sitescript=''
d1432 1
a1432 1
	./sharp > today
d1439 1
a1439 1
		./sharp > today
a1481 1

d1485 1
a1485 1
# Configure command line arguments.
a1496 1
	# Extreme backslashitis: replace each ' by '"'"'
a1504 2
# args_exp is good for restarting self: eval "set X $args_exp"; shift; $0 "$@@"
# used by ./hints/os2.sh
d1636 1
a1636 1
                      zzz=" "`echo "$yyy"|sed 's!^[^=]*=!!'` 
d1650 1
a1650 1
                 ;;       
d1675 1
a1675 1
	-V) echo "$me generated by metaconfig 3.0 PL70." >&2
d1759 1
a1759 1
package=perl5
d1805 2
a1806 2
/*) rsrc="$src";;
*) rsrc="../$src";;
d1809 1
a1809 1
	$contains "^package=$package$" $rsrc/Configure >/dev/null 2>&1
d1963 2
a1964 1
	awk '$1 !~ /PACK[A-Z]+/ {print $1}' "$rsrc/MANIFEST" | (split -l 50 2>/dev/null || split -50)
d1968 2
a1969 1
		(cd "$rsrc"; ls `cat "$tmppwd/$filelist"` >/dev/null 2>>"$tmppwd/missing")
d2003 1
a2004 1
: Find the appropriate value for a newline for tr
d2148 1
d2151 2
a2152 1
$define|true|[yY]*) ;;
d2185 1
d2311 1
a2311 1
        	exit 0
a2317 1
			exit 0
a2347 1
Mcc
d2447 1
a2447 1
make)	
d2456 1
a2456 1
esac	
d2525 1
d2699 1
a2699 1

d2751 1
a2751 1

d3620 1
a3620 1
 ~/*|~)
d3623 1
a3623 1
 ~*)
d3930 1
d3941 1
a3941 1
*)	if test -d $afsroot; then
d4043 1
a4043 1
: function used to set $1 to $val
d4051 1
d4067 1
a4067 1
y|Y)	val="$define" ;;     
d4077 1
d4096 1
a4096 1
y|Y) 
d4099 1
a4099 1
*)      
d4105 1
a4105 1
eval $setvar 
a4121 1
	
d4152 3
a4154 1
*) version_patchlevel_string="$version_patchlevel_string patch $perl_patchlevel" ;;
d4180 1
d4186 1
a4186 1
       *$define*)      
d4330 1
d4361 1
a4361 1

d4372 17
d4484 1
a4484 18
case "$cc" in
'') dflt=cc;;
*) dflt="$cc";;
esac
rp="Use which C compiler?"
. ./myread
cc="$ans"

: See if they have not cc but they do have gcc
. ./trygcc
: Look for a hint-file generated 'call-back-unit'.  Now that the
: user has specified the compiler, we may need to set or change some
: other defaults.
if $test -f cc.cbu; then
    . ./cc.cbu
fi
. ./checkcc

d4879 1
d4956 1
a4956 1
	    fi	
d4998 1
a4998 1
	    fi	
d5082 26
d5119 1
a5119 1
	2*) if test -d /etc/conf/kconfig.d &&
d5130 2
a5131 14
	?*) 	echo " "
		echo "Checking if your compiler accepts -fno-strict-aliasing" 2>&1
		echo 'int main(void) { return 0; }' > gcctest.c
		if $cc -O2 -fno-strict-aliasing -o gcctest gcctest.c; then
			echo "Yes, it does." 2>&1
			case "$ccflags" in
			*strict-aliasing*)
				echo "Leaving current flags $ccflags alone." 2>&1
				;;
			*) dflt="$dflt -fno-strict-aliasing" ;;
			esac
		else
			echo "Nope, it doesn't, but that's ok." 2>&1
		fi
d5157 14
a5170 14
	?*)	echo " "
		echo "Checking if your compiler accepts -pipe" 2>&1
		echo 'int main(void) { return 0; }' > gcctest.c
		if $cc -pipe -o gcctest gcctest.c; then
			echo "Yes, it does." 2>&1
			case "$ccflags" in
			*-pipe*)
				echo "Leaving current flags $ccflags alone." 2>&1
				;;
			*) dflt="$dflt -pipe" ;;
			esac
		else
			echo "Nope, it doesn't, but that's ok." 2>&1
		fi
d5311 9
d5386 1
a5386 1
	if $sh -c "$run ./try" >>try.msg 2>&1; then
d5435 1
a5435 1
$rm_try
d5441 5
d5710 1
a5710 1

d5769 1
a5769 1

d5778 1
a5778 1
esac                          
d5787 1
a5787 1
esac                          
d5796 1
a5796 1
esac                          
d5805 1
a5805 1
esac                          
d5814 1
a5814 1
esac                          
d5823 1
a5823 1
esac                          
d5874 1
a5874 1
esac	
d6392 1
d6424 14
d6461 1
d6551 1
d6631 4
d6642 5
d6953 1
d7010 1
d7041 1
d7067 5
d7130 1
d7154 83
d7378 1
d7512 1
d7742 3
a7744 1
		if $ar t $libc > libc.tmp && $contains '^fprintf$' libc.tmp >/dev/null 2>&1; then
a7750 1
			# Repeat libc to extract forwarders to DLL entries too
a7752 3
				# Revision 50 of EMX has bug in $ar.
				# it will not extract forwarders to DLL entries
				# Use emximp which will extract exactly them.
d7757 1
a7757 1
				$rm tmp.imp
d7764 3
a7766 1
			if bld t $libc | $sed -e 's/.*\///' -e "s/\\$_o:.*\$//" > libc.list
d7791 2
a7792 1
	$sed -n 's/^\([^ 	]*\)[ 	]*syscall[0-9]*[ 	]*$/\1/p' /lib/syscalls.exp >>libc.list
d7804 1
a7804 1

d7837 4
a7848 3
	case "$d_cplusplus" in
		$define) extern_C=\"C\";;
	esac;
d7853 1
a7853 1
			echo "extern $extern_C void *$1$tdc; void *(*(p()))$tdc { return &$1; } int main() { if(p()) return(0); else return(1); }"> try.c;
d7859 1
a7859 1
		echo "extern $extern_C void *$1$tdc; void *(*(p()))$tdc { return &$1; } int main() { if(p()) return(0); else return(1); }"> try.c;
d8070 1
d8107 10
d8155 1
d8164 1
a8164 1
		svr4*|nonstopux|dgux|dynixptx|esix|powerux|beos|cygwin*)
d8218 1
a8218 1
		# A name such as libperl.so.3.1
d8220 1
a8220 1
		# A name such as libperl.so.301
d8234 6
a8239 2
		cygwin*) # ld links against an importlib
			dflt=libperl$lib_ext
d8312 1
a8312 1
    case "$osname" in 
d8331 3
d8338 3
d8347 1
a8347 1
	*)	
d8355 1
a8355 1
passed to $ld so that the perl executable will find the 
d8495 1
a8495 1
fi 
d8780 1
a8780 1
				  | ./tr '[A-Z]' '[a-z]' 2>/dev/null`
d8784 1
a8784 1
				     | ./tr '[A-Z]' '[a-z]' 2>/dev/null`
d8853 1
d8889 1
d9128 1
d9152 1
a9152 1
y|Y)	val="$define" ;;     
d9250 1
d9256 1
a9256 1
echo "Checking the size of $zzz..." >&4 
d9289 1
d9403 1
d9425 1
d9453 1
d9481 1
d9506 1
d9531 1
d9560 40
d9604 1
d9773 1
a9773 1
#define I_STDLIB $i_stdlib
d9777 6
d9784 1
a9784 4
int
checkit(expect, got)
char *expect;
char *got;
d10027 20
d10103 1
d10131 1
d10288 1
a10288 1
	./protochk "extern $try" $hdrs && asctime_r_proto=B_SB ;;
d10292 1
a10292 1
	./protochk "extern $try" $hdrs && asctime_r_proto=B_SBI ;;
d10296 1
a10296 1
	./protochk "extern $try" $hdrs && asctime_r_proto=I_SB ;;
d10300 1
a10300 1
	./protochk "extern $try" $hdrs && asctime_r_proto=I_SBI ;;
d10545 28
d10764 1
a10764 1
    if eval $compile; then
d10784 1
a10784 1
    $cat >builtin.c <<'EOCP'
d10788 2
d10793 2
a10794 2
    if eval $compile; then
	echo "Your C compiler supports __builtin_choose_expr."
d10797 1
a10797 1
	echo "Your C compiler doesn't seem to understand __builtin_choose_expr."
d10894 1
a10894 1
*) 
d11260 1
d11279 1
a11281 1
: see whether socket exists
d11366 1
a11366 1

d11461 1
a11461 1
	./protochk "extern $try" $hdrs && crypt_r_proto=B_CCS ;;
d11465 1
a11465 1
	./protochk "extern $try" $hdrs && crypt_r_proto=B_CCD ;;
d11522 1
a11522 1
	./protochk "extern $try" $hdrs && ctermid_r_proto=B_B ;;
d11563 1
a11563 1
	./protochk "extern $try" $hdrs && ctime_r_proto=B_SB ;;
d11567 1
a11567 1
	./protochk "extern $try" $hdrs && ctime_r_proto=B_SBI ;;
d11571 1
a11571 1
	./protochk "extern $try" $hdrs && ctime_r_proto=I_SB ;;
d11575 1
a11575 1
	./protochk "extern $try" $hdrs && ctime_r_proto=I_SBI ;;
d11854 1
d11939 3
a11941 3
	if $cc $ccflags $cccdlflags -c dyna.c > /dev/null 2>&1 && 
		mv dyna${_o} tmp-dyna${_o} > /dev/null 2>&1 && 
		$ld -o dyna.$dlext $ldflags $lddlflags tmp-dyna${_o} > /dev/null 2>&1 && 
d11959 1
a11959 1
		
d11981 1
a11981 1
	./protochk "extern $try" $hdrs && drand48_r_proto=I_ST ;;
d12064 1
a12064 1
	./protochk "extern $try" $hdrs && endgrent_r_proto=I_H ;;
d12068 1
a12068 1
	./protochk "extern $try" $hdrs && endgrent_r_proto=V_H ;;
d12117 1
a12117 1
	./protochk "extern $try" $hdrs && endhostent_r_proto=I_D ;;
d12121 1
a12121 1
	./protochk "extern $try" $hdrs && endhostent_r_proto=V_D ;;
d12166 1
a12166 1
	./protochk "extern $try" $hdrs && endnetent_r_proto=I_D ;;
d12170 1
a12170 1
	./protochk "extern $try" $hdrs && endnetent_r_proto=V_D ;;
d12215 1
a12215 1
	./protochk "extern $try" $hdrs && endprotoent_r_proto=I_D ;;
d12219 1
a12219 1
	./protochk "extern $try" $hdrs && endprotoent_r_proto=V_D ;;
d12352 1
a12352 1
	./protochk "extern $try" $hdrs && endpwent_r_proto=I_H ;;
d12356 1
a12356 1
	./protochk "extern $try" $hdrs && endpwent_r_proto=V_H ;;
d12401 1
a12401 1
	./protochk "extern $try" $hdrs && endservent_r_proto=I_D ;;
d12405 1
a12405 1
	./protochk "extern $try" $hdrs && endservent_r_proto=V_D ;;
a12483 22
: see which of string.h or strings.h is needed
echo " "
strings=`./findhdr string.h`
if $test "$strings" && $test -r "$strings"; then
	echo "Using <string.h> instead of <strings.h>." >&4
	val="$define"
else
	val="$undef"
	strings=`./findhdr strings.h`
	if $test "$strings" && $test -r "$strings"; then
		echo "Using <strings.h> instead of <string.h>." >&4
	else
		echo "No string header found -- You'll surely have problems." >&4
	fi
fi
set i_string
eval $setvar
case "$i_string" in
"$undef") strings=`./findhdr strings.h`;;
*)	  strings=`./findhdr string.h`;;
esac

d13064 1
a13065 1
: See if fcntl-based locking works.
a13252 1

d13287 1
a13287 1

a13307 1

a13311 1

d13332 1
a13333 1
: check for a working futimes
d13367 58
a13432 1

d13457 1
a13457 1
	./protochk "extern $try" $hdrs && getgrent_r_proto=I_SBWR ;;
d13461 1
a13461 1
	./protochk "extern $try" $hdrs && getgrent_r_proto=I_SBIR ;;
d13465 1
a13465 1
	./protochk "extern $try" $hdrs && getgrent_r_proto=S_SBW ;;
d13469 1
a13469 1
	./protochk "extern $try" $hdrs && getgrent_r_proto=S_SBI ;;
d13473 1
a13473 1
	./protochk "extern $try" $hdrs && getgrent_r_proto=I_SBI ;;
d13477 1
a13477 1
	./protochk "extern $try" $hdrs && getgrent_r_proto=I_SBIH ;;
d13518 1
a13518 1
	./protochk "extern $try" $hdrs && getgrgid_r_proto=I_TSBWR ;;
d13522 1
a13522 1
	./protochk "extern $try" $hdrs && getgrgid_r_proto=I_TSBIR ;;
d13526 1
a13526 1
	./protochk "extern $try" $hdrs && getgrgid_r_proto=I_TSBI ;;
d13530 1
a13530 1
	./protochk "extern $try" $hdrs && getgrgid_r_proto=S_TSBI ;;
d13571 1
a13571 1
	./protochk "extern $try" $hdrs && getgrnam_r_proto=I_CSBWR ;;
d13575 1
a13575 1
	./protochk "extern $try" $hdrs && getgrnam_r_proto=I_CSBIR ;;
d13579 1
a13579 1
	./protochk "extern $try" $hdrs && getgrnam_r_proto=S_CBI ;;
d13583 1
a13583 1
	./protochk "extern $try" $hdrs && getgrnam_r_proto=I_CSBI ;;
d13587 1
a13587 1
	./protochk "extern $try" $hdrs && getgrnam_r_proto=S_CSBI ;;
d13667 1
a13667 1
 
d13725 1
a13725 1
	./protochk "extern $try" $hdrs && gethostbyaddr_r_proto=I_CWISBWRE ;;
d13729 1
a13729 1
	./protochk "extern $try" $hdrs && gethostbyaddr_r_proto=S_CWISBWIE ;;
d13733 1
a13733 1
	./protochk "extern $try" $hdrs && gethostbyaddr_r_proto=S_CWISBIE ;;
d13737 1
a13737 1
	./protochk "extern $try" $hdrs && gethostbyaddr_r_proto=S_TWISBIE ;;
d13741 1
a13741 1
	./protochk "extern $try" $hdrs && gethostbyaddr_r_proto=S_CIISBIE ;;
d13745 1
a13745 1
	./protochk "extern $try" $hdrs && gethostbyaddr_r_proto=S_CSBIE ;;
d13749 1
a13749 1
	./protochk "extern $try" $hdrs && gethostbyaddr_r_proto=S_TSBIE ;;
d13753 1
a13753 1
	./protochk "extern $try" $hdrs && gethostbyaddr_r_proto=I_CWISD ;;
d13757 1
a13757 1
	./protochk "extern $try" $hdrs && gethostbyaddr_r_proto=I_CIISD ;;
d13761 1
a13761 1
	./protochk "extern $try" $hdrs && gethostbyaddr_r_proto=I_CII ;;
d13765 1
a13765 1
	./protochk "extern $try" $hdrs && gethostbyaddr_r_proto=I_TsISBWRE ;;
d13806 1
a13806 1
	./protochk "extern $try" $hdrs && gethostbyname_r_proto=I_CSBWRE ;;
d13810 1
a13810 1
	./protochk "extern $try" $hdrs && gethostbyname_r_proto=S_CSBIE ;;
d13814 1
a13814 1
	./protochk "extern $try" $hdrs && gethostbyname_r_proto=I_CSD ;;
d13855 1
a13855 1
	./protochk "extern $try" $hdrs && gethostent_r_proto=I_SBWRE ;;
d13859 1
a13859 1
	./protochk "extern $try" $hdrs && gethostent_r_proto=I_SBIE ;;
d13863 1
a13863 1
	./protochk "extern $try" $hdrs && gethostent_r_proto=S_SBIE ;;
d13867 1
a13867 1
	./protochk "extern $try" $hdrs && gethostent_r_proto=S_SBI ;;
d13871 1
a13871 1
	./protochk "extern $try" $hdrs && gethostent_r_proto=I_SBI ;;
d13875 1
a13875 1
	./protochk "extern $try" $hdrs && gethostent_r_proto=I_SD ;;
d13929 1
a13929 1
	./protochk "extern $try" $hdrs && getlogin_r_proto=I_BW ;;
d13933 1
a13933 1
	./protochk "extern $try" $hdrs && getlogin_r_proto=I_BI ;;
d13937 1
a13937 1
	./protochk "extern $try" $hdrs && getlogin_r_proto=B_BW ;;
d13941 1
a13941 1
	./protochk "extern $try" $hdrs && getlogin_r_proto=B_BI ;;
d13974 4
d14006 1
a14006 1
	./protochk "extern $try" $hdrs && getnetbyaddr_r_proto=I_UISBWRE ;;
d14010 1
a14010 1
	./protochk "extern $try" $hdrs && getnetbyaddr_r_proto=I_LISBI ;;
d14014 1
a14014 1
	./protochk "extern $try" $hdrs && getnetbyaddr_r_proto=S_TISBI ;;
d14018 1
a14018 1
	./protochk "extern $try" $hdrs && getnetbyaddr_r_proto=S_LISBI ;;
d14022 1
a14022 1
	./protochk "extern $try" $hdrs && getnetbyaddr_r_proto=I_TISD ;;
d14026 1
a14026 1
	./protochk "extern $try" $hdrs && getnetbyaddr_r_proto=I_LISD ;;
d14030 1
a14030 1
	./protochk "extern $try" $hdrs && getnetbyaddr_r_proto=I_IISD ;;
d14034 1
a14034 1
	./protochk "extern $try" $hdrs && getnetbyaddr_r_proto=I_uISBWRE ;;
d14075 1
a14075 1
	./protochk "extern $try" $hdrs && getnetbyname_r_proto=I_CSBWRE ;;
d14079 1
a14079 1
	./protochk "extern $try" $hdrs && getnetbyname_r_proto=I_CSBI ;;
d14083 1
a14083 1
	./protochk "extern $try" $hdrs && getnetbyname_r_proto=S_CSBI ;;
d14087 1
a14087 1
	./protochk "extern $try" $hdrs && getnetbyname_r_proto=I_CSD ;;
d14128 1
a14128 1
	./protochk "extern $try" $hdrs && getnetent_r_proto=I_SBWRE ;;
d14132 1
a14132 1
	./protochk "extern $try" $hdrs && getnetent_r_proto=I_SBIE ;;
d14136 1
a14136 1
	./protochk "extern $try" $hdrs && getnetent_r_proto=S_SBIE ;;
d14140 1
a14140 1
	./protochk "extern $try" $hdrs && getnetent_r_proto=S_SBI ;;
d14144 1
a14144 1
	./protochk "extern $try" $hdrs && getnetent_r_proto=I_SBI ;;
d14148 1
a14148 1
	./protochk "extern $try" $hdrs && getnetent_r_proto=I_SD ;;
d14182 1
d14228 1
a14228 1
	./protochk "extern $try" $hdrs && getprotobyname_r_proto=I_CSBWR ;;
d14232 1
a14232 1
	./protochk "extern $try" $hdrs && getprotobyname_r_proto=S_CSBI ;;
d14236 1
a14236 1
	./protochk "extern $try" $hdrs && getprotobyname_r_proto=I_CSD ;;
d14277 1
a14277 1
	./protochk "extern $try" $hdrs && getprotobynumber_r_proto=I_ISBWR ;;
d14281 1
a14281 1
	./protochk "extern $try" $hdrs && getprotobynumber_r_proto=S_ISBI ;;
d14285 1
a14285 1
	./protochk "extern $try" $hdrs && getprotobynumber_r_proto=I_ISD ;;
d14326 1
a14326 1
	./protochk "extern $try" $hdrs && getprotoent_r_proto=I_SBWR ;;
d14330 1
a14330 1
	./protochk "extern $try" $hdrs && getprotoent_r_proto=I_SBI ;;
d14334 1
a14334 1
	./protochk "extern $try" $hdrs && getprotoent_r_proto=S_SBI ;;
d14338 1
a14338 1
	./protochk "extern $try" $hdrs && getprotoent_r_proto=I_SD ;;
d14392 1
a14392 1
	./protochk "extern $try" $hdrs && getpwent_r_proto=I_SBWR ;;
d14396 1
a14396 1
	./protochk "extern $try" $hdrs && getpwent_r_proto=I_SBIR ;;
d14400 1
a14400 1
	./protochk "extern $try" $hdrs && getpwent_r_proto=S_SBW ;;
d14404 1
a14404 1
	./protochk "extern $try" $hdrs && getpwent_r_proto=S_SBI ;;
d14408 1
a14408 1
	./protochk "extern $try" $hdrs && getpwent_r_proto=I_SBI ;;
d14412 1
a14412 1
	./protochk "extern $try" $hdrs && getpwent_r_proto=I_SBIH ;;
d14453 1
a14453 1
	./protochk "extern $try" $hdrs && getpwnam_r_proto=I_CSBWR ;;
d14457 1
a14457 1
	./protochk "extern $try" $hdrs && getpwnam_r_proto=I_CSBIR ;;
d14461 1
a14461 1
	./protochk "extern $try" $hdrs && getpwnam_r_proto=S_CSBI ;;
d14465 1
a14465 1
	./protochk "extern $try" $hdrs && getpwnam_r_proto=I_CSBI ;;
d14506 1
a14506 1
	./protochk "extern $try" $hdrs && getpwuid_r_proto=I_TSBWR ;;
d14510 1
a14510 1
	./protochk "extern $try" $hdrs && getpwuid_r_proto=I_TSBIR ;;
d14514 1
a14514 1
	./protochk "extern $try" $hdrs && getpwuid_r_proto=I_TSBI ;;
d14518 1
a14518 1
	./protochk "extern $try" $hdrs && getpwuid_r_proto=S_TSBI ;;
d14543 1
d14573 1
a14573 1
	./protochk "extern $try" $hdrs && getservbyname_r_proto=I_CCSBWR ;;
d14577 1
a14577 1
	./protochk "extern $try" $hdrs && getservbyname_r_proto=S_CCSBI ;;
d14581 1
a14581 1
	./protochk "extern $try" $hdrs && getservbyname_r_proto=I_CCSD ;;
d14622 1
a14622 1
	./protochk "extern $try" $hdrs && getservbyport_r_proto=I_ICSBWR ;;
d14626 1
a14626 1
	./protochk "extern $try" $hdrs && getservbyport_r_proto=S_ICSBI ;;
d14630 1
a14630 1
	./protochk "extern $try" $hdrs && getservbyport_r_proto=I_ICSD ;;
d14671 1
a14671 1
	./protochk "extern $try" $hdrs && getservent_r_proto=I_SBWR ;;
d14675 1
a14675 1
	./protochk "extern $try" $hdrs && getservent_r_proto=I_SBI ;;
d14679 1
a14679 1
	./protochk "extern $try" $hdrs && getservent_r_proto=S_SBI ;;
d14683 1
a14683 1
	./protochk "extern $try" $hdrs && getservent_r_proto=I_SD ;;
d14737 1
a14737 1
	./protochk "extern $try" $hdrs && getspnam_r_proto=I_CSBWR ;;
d14741 1
a14741 1
	./protochk "extern $try" $hdrs && getspnam_r_proto=S_CSBI ;;
d14801 1
a14801 1
	./protochk "extern $try" $hdrs && gmtime_r_proto=S_TS ;;
d14805 1
a14805 1
	./protochk "extern $try" $hdrs && gmtime_r_proto=I_TS ;;
d14921 8
d15041 1
a15044 1
	: check to see if math.h defines _LIB_VERSION
d15089 1
a15089 1
	./protochk "extern $try" $hdrs && localtime_r_proto=S_TS ;;
d15093 1
a15093 1
	./protochk "extern $try" $hdrs && localtime_r_proto=I_TS ;;
d15125 26
a15150 5
#include <sys/types.h>
#include <unistd.h>
#include <time.h>
#include <string.h>
#include <malloc.h>
d15475 1
a15475 1

d15537 1
a15537 1

d15594 1
a15594 1
i8type=char
d15751 83
d16046 1
a16153 1

d16239 1
a16239 1
	./protochk "extern $try" $hdrs && random_r_proto=I_iS ;;
d16243 1
a16243 1
	./protochk "extern $try" $hdrs && random_r_proto=I_lS ;;
d16247 1
a16247 1
	./protochk "extern $try" $hdrs && random_r_proto=I_St ;;
d16298 1
a16298 1
	./protochk "extern $try" $hdrs && readdir64_r_proto=I_TSR ;;
d16302 1
a16302 1
	./protochk "extern $try" $hdrs && readdir64_r_proto=I_TS ;;
d16343 1
a16343 1
	./protochk "extern $try" $hdrs && readdir_r_proto=I_TSR ;;
d16347 1
a16347 1
	./protochk "extern $try" $hdrs && readdir_r_proto=I_TS ;;
d16899 1
a16899 1
	./protochk "extern $try" $hdrs && setgrent_r_proto=I_H ;;
d16903 1
a16903 1
	./protochk "extern $try" $hdrs && setgrent_r_proto=V_H ;;
d16948 1
a16948 1
	./protochk "extern $try" $hdrs && sethostent_r_proto=I_ID ;;
d16952 1
a16952 1
	./protochk "extern $try" $hdrs && sethostent_r_proto=V_ID ;;
d17009 1
a17009 1
	./protochk "extern $try" $hdrs && setlocale_r_proto=I_ICBI ;;
d17054 1
a17054 1
	./protochk "extern $try" $hdrs && setnetent_r_proto=I_ID ;;
d17058 1
a17058 1
	./protochk "extern $try" $hdrs && setnetent_r_proto=V_ID ;;
d17119 1
a17119 1
	./protochk "extern $try" $hdrs && setprotoent_r_proto=I_ID ;;
d17123 1
a17123 1
	./protochk "extern $try" $hdrs && setprotoent_r_proto=V_ID ;;
d17168 1
a17168 1
	./protochk "extern $try" $hdrs && setpwent_r_proto=I_H ;;
d17172 1
a17172 1
	./protochk "extern $try" $hdrs && setpwent_r_proto=V_H ;;
d17237 1
a17237 1
	./protochk "extern $try" $hdrs && setservent_r_proto=I_ID ;;
d17241 1
a17241 1
	./protochk "extern $try" $hdrs && setservent_r_proto=V_ID ;;
a17277 1

d17427 1
a17428 1
: see if we have sigaction
a17680 1
d_sprintf_returns_strlen="$undef"
d17695 3
d17717 1
a17717 1
	./protochk "extern $try" $hdrs && srand48_r_proto=I_LS ;;
d17758 1
a17758 1
	./protochk "extern $try" $hdrs && srandom_r_proto=I_TS ;;
a17796 1

a17802 1

a17806 1

d17811 1
a17811 1

a17821 1

d17824 1
a17824 1
define)	
d17840 1
d17959 1
a17959 1
	./protochk "extern $try" $hdrs && strerror_r_proto=I_IBW ;;
d17963 1
a17963 1
	./protochk "extern $try" $hdrs && strerror_r_proto=I_IBI ;;
d17967 1
a17967 1
	./protochk "extern $try" $hdrs && strerror_r_proto=B_IBW ;;
d18034 1
a18034 1
extern long long int strtoll(char *s, char **, int); 
d18091 1
a18091 1
extern unsigned long int strtoul(char *s, char **, int); 
d18174 1
a18174 1
extern unsigned long long int strtoull(char *s, char **, int); 
d18228 1
a18228 1
extern unsigned long long int strtouq(char *s, char **, int); 
d18327 4
d18369 1
a18369 1
	./protochk "extern $try" $hdrs && tmpnam_r_proto=B_B ;;
d18414 1
a18414 1
	./protochk "extern $try" $hdrs && ttyname_r_proto=I_IBW ;;
d18418 1
a18418 1
	./protochk "extern $try" $hdrs && ttyname_r_proto=I_IBI ;;
d18422 1
a18422 1
	./protochk "extern $try" $hdrs && ttyname_r_proto=B_IBI ;;
d18459 1
d18550 1
d19175 1
d19203 1
d19323 1
a19323 1
	$rm_try
d19491 1
a19491 1
$rm_try
d19526 1
d19532 1
a19532 1
echo "Checking the size of $zzz..." >&4 
d19562 1
d19568 1
a19568 1
echo "Checking the sign of $zzz..." >&4 
d19600 1
d19756 1
a19756 1

d19815 1
a19862 1

d19883 1
d19917 1
d20030 1
a20030 1
				'')	try="extern struct hostent *gethostbyaddr($xxx, $yyy, int);"
d20079 1
a20079 1
			'')	try="extern struct hostent *gethostbyname($xxx);"
d20117 1
a20117 1
			'')	try="extern struct netent *getnetbyaddr($xxx, int);"
a20160 3
	: Instruct ./getfile to trust the hinted or previous pager value,
	: even if it does not begin with a slash.  For example, on os2,
	: pager might be cmd /c more.  See comments in UU/getfile.
d20229 171
a20399 1
: check for type of arguments to select. 
d20408 1
a20408 1
			$i_systime sys/time.h 
d20420 1
a20420 1
					'')	try="extern select _(($nfd, $xxx, $xxx, $xxx, $tmo));"
a20556 5
: Remove SIGARRAYSIZE used by HPUX.
: Remove SIGSTKSIZE used by Linux.
: Remove SIGSTKSZ used by Posix.
: Remove SIGTYP void lines used by OS2.
: Some cpps, like os390, dont give the file name anywhere
d20563 3
a20565 2
	$grep '^[ 	]*#.*include' | 
	$awk "{print \\$$fieldn}" | $sed 's!"!!g' | $sed 's!\\\\\\\\!/!g' | $sort | $uniq`
a20566 3
: Check this list of files to be sure we have parsed the cpp output ok.
: This will also avoid potentially non-existent files, such 
: as ../foo/bar.h
a20570 1
: If we have found no files, at least try signal.h
d20681 1
a20681 1
	ndups++ 
d20688 1
a20688 1
END { 
d20698 1
a20698 1
 	    printf("NUM%d %d\n", n, n) 
d20718 2
a20719 1
	$run ./signal$_exe | ($sort -n -k 2 2>/dev/null || $sort -n +1) | $uniq | $awk -f signal.awk >signal.lst
d20819 1
a20819 1
$rm -f signal signal.c signal.awk signal.lst signal_cmd 
d20821 1
d20827 1
a20827 1
echo "Checking the size of $zzz..." >&4 
d20901 1
a20901 1
		'')	try="extern int accept(int, struct sockaddr *, $xxx *);"
d20979 1
a20979 2
echo '#include <stdio.h>' > stdio.c
$cppstdin $cppminus < stdio.c > stdioh
d20987 1
a20987 1
$rm -f stdio.* stdioh
d21013 1
d21019 1
a21019 1
echo "Checking the size of $zzz..." >&4 
d21048 1
d21086 1
a21086 1

d21125 1
a21125 1

d21166 4
a21216 2


a21220 34
: see if ndbm.h is available
set ndbm.h t_ndbm
eval $inhdr

case "$t_ndbm" in
$undef)
    # Some Linux distributions such as RedHat 7.1 put the
    # ndbm.h header in /usr/include/gdbm/ndbm.h.
    if $test -f /usr/include/gdbm/ndbm.h; then
	echo '<gdbm/ndbm.h> found.'
        ccflags="$ccflags -I/usr/include/gdbm"
        cppflags="$cppflags -I/usr/include/gdbm"
        t_ndbm=$define
    fi
    ;;
esac

case "$t_ndbm" in
$define)
	: see if dbm_open exists
	set dbm_open d_dbm_open
	eval $inlibc
	case "$d_dbm_open" in
	$undef)
		t_ndbm="$undef"
		echo "We won't be including <ndbm.h>"
		;;
	esac
	;;
esac
val="$t_ndbm"
set i_ndbm
eval $setvar

d21262 1
d21503 1
a21503 1
				echo "<sgtty.h> not found--you could have problems." >&4
d21510 1
a21510 1
				echo "<termio.h> not found--you could have problems." >&4
d21521 1
a21521 1
echo "Neither <termio.h> nor <sgtty.h> found--you could have problems." >&4
d21531 1
a21531 1
echo "Neither <sgtty.h> nor <termio.h> found--you could have problems." >&4
a21587 1

a21591 1

d21596 4
a21615 1

a21631 4
: see if this is a values.h system
set values.h i_values
eval $inhdr

d21643 1
d21657 4
d21666 14
a21679 4
	    if $test -f $xxx/$xxx.xs -o -f $xxx/$xxx.c; then
		known_extensions="$known_extensions $1$xxx";
	    elif $test -f $xxx/Makefile.PL; then
		nonxs_extensions="$nonxs_extensions $1$xxx";
d21681 12
a21692 6
		if $test -d $xxx -a $# -lt 10; then
		    set $1$xxx/ $*;
		    cd "$xxx";
		    eval $find_extensions;
		    cd ..;
		    shift;
d21703 10
a21712 6
# Special case:  Add in modules that nest beyond the first level.
# Currently threads/shared and Hash/Util/FieldHash, since they are
# not picked up by the recursive find above (and adding in general
# recursive finding breaks SDBM_File/sdbm).
# A.D. 20011025 (SDBM), ajgough 20071008 (FieldHash)
known_extensions="$known_extensions threads/shared Hash/Util/FieldHash"
d21747 1
a21747 1
		case "$i_ndbm" in
d21826 2
d22066 1
a22066 1
	    set X `echo " $libs " | sed -e 's@@ -lndbm @@ @@' -e 's@@ -lgdbm @@ @@' -e 's@@ -ldbm @@ @@' -e 's@@ -ldb @@ @@'` 
d22099 1
a22099 1
: configuration may be patched via a 'config.arch' file
d22101 1
a22101 1
	echo "I see a config.arch file, loading it."
d22149 6
a22160 1
Mcc='$Mcc'
d22249 1
d22253 1
d22288 1
d22293 1
d22352 3
d22376 1
d22412 1
d22422 2
d22435 1
d22460 1
d22481 2
d22640 1
d22688 1
d22705 1
d22771 1
d22784 2
d22795 1
d22830 1
d22974 1
d23029 4
d23158 1
d23160 1
a23220 3
: Add in command line options if available
$test -f UU/cmdline.opt && $cat UU/cmdline.opt >> config.sh

d23224 1
a23224 1
echo "PERL_PATCHLEVEL=$perl_patchlevel" >>config.sh
d23230 3
a23232 2
	sed -n 's/^\([a-zA-Z_0-9]*\)=.*/\1/p' config.sh config.sh UU/oldconfig.sh |\
	$sort | $uniq -u >UU/oldsyms
d23241 1
a23241 1
		echo "# Variables propagated from previous config.sh file." >>config.sh
@


1.18
log
@merge in perl 5.8.8
@
text
@d27 1
a27 1
# $Id: Configure,v 1.17 2005/01/15 21:30:16 millert Exp $
d29 1
a29 1
# Generated on Sun Jan  1 11:31:40 CET 2006 [metaconfig 3.0 PL70]
d68 12
d184 1
d320 1
d336 1
d338 1
a349 1
charsize=''
d370 1
d373 2
d376 1
d390 1
d397 1
d406 1
d567 1
d704 1
d708 2
d800 1
d945 1
d989 4
d1125 1
a1266 7
ccname=''
ccversion=''
perllibs=''
: set useposix=false in your hint file to disable the POSIX extension.
useposix=true
: set useopcode=false in your hint file to disable the Opcode extension.
useopcode=true
a1270 8
: Possible local include directories to search.
: Set locincpth to "" in a hint file to defeat local include searches.
locincpth="/usr/local/include /opt/local/include /usr/gnu/include"
locincpth="$locincpth /opt/gnu/include /usr/GNU/include /opt/GNU/include"
:
: no include file wanted by default
inclwanted=''

d1284 1
d1298 24
a1327 5
: set usethreads on the Configure command line to enable threads.
usereentrant='undef'
: full support for void wanted by default
defvoidused=15

d1569 1
d1674 8
d1689 1
d1691 11
a1701 9
	 -A symbol=value		append " "value to symbol
	 -A append:symbol=value		append value to symbol
	 -A define:symbol=value		define symbol to have value
         -A clear:symbol		define symbol to be ''
	 -A define:symbol		define symbol to be 'define'
	 -A eval:symbol=value		define symbol to be eval of value
	 -A prepend:symbol=value	prepend value to symbol
	 -A undef:symbol		define symbol to be 'undef'
	 -A undef:symbol=		define symbol to be ''
d2486 13
d2520 5
a2524 3
        case "`$cc -v -c try.c 2>&1`" in
        *gcc*) trygcc=no ;;
        esac
d2529 21
a2549 2
                rp="Would you like to use it?"
                dflt=y
a2561 9
                       if $test -f usethreads.cbu; then
                           $cat >&4 <<EOM 

*** However, any setting of the C compiler flags (e.g. for thread support)
*** has been lost.  It may be necessary to pass -Dcc=gcc to Configure
*** (together with e.g. -Dusethreads).

EOM
                       fi;;
d3043 1
a3043 1
myuname=`echo $myuname | $sed -e 's/^[^=]*=//' -e 's/\///g' | \
d3205 4
a3208 1
		dgux)	osname=dgux 
d3214 1
a3214 1
		freebsd) osname=freebsd 
d3219 1
a3219 1
		hp*)	osname=hpux 
d3315 1
a3315 1
				case "svr$3" in	
d3378 1
a3378 1
	
d3446 7
a3452 2
A well-behaved OS will have no hints, so answering "none" or just "Policy"
is a good thing.  DO NOT give a wrong version or a wrong OS.
d3582 48
a3629 2
: set up the script used to warn in case of inconsistency
cat <<EOS >whoa
d3632 12
a3643 9
cat <<'EOSC' >>whoa
dflt=y
echo " "
echo "*** WHOA THERE!!! ***" >&4
echo "    The $hint value for \$$var on this machine was \"$was\"!" >&4
rp="    Keep the $hint value?"
. ./myread
case "$ans" in
y) td=$was; tu=$was;;
a3644 1
EOSC
d3646 8
a3653 7
: function used to set $1 to $val
setvar='var=$1; eval "was=\$$1"; td=$define; tu=$undef;
case "$val$was" in
$define$undef) . ./whoa; eval "$var=\$td";;
$undef$define) . ./whoa; eval "$var=\$tu";;
*) eval "$var=$val";;
esac'
d3655 5
a3659 3
case "$usesocks" in
$define|true|[yY]*)	dflt='y';;
*) dflt='n';;
a3660 1
cat <<EOM
d3662 14
a3675 11
Perl can be built to use the SOCKS proxy protocol library.  To do so,
Configure must be run with -Dusesocks.  If you use SOCKS you also need
to use the PerlIO abstraction layer, this will be implicitly selected.

If this doesn't make any sense to you, just accept the default '$dflt'.
EOM
rp='Build Perl for SOCKS?'
. ./myread
case "$ans" in
y|Y)	val="$define" ;;     
*)      val="$undef" ;;
d3677 2
a3678 5
set usesocks
eval $setvar

case "$usesocks" in
$define|true|[yY]*) useperlio="$define";;
d3681 4
a3684 3
case "$useperlio" in
$define|true|[yY]*|'')	dflt='y';;
*) dflt='n';;
a3685 1
cat <<EOM
d3687 3
a3689 19
Previous version of $package used the standard IO mechanisms as
defined in <stdio.h>.  Versions 5.003_02 and later of $package allow
alternate IO mechanisms via the PerlIO abstraction layer, but the
stdio mechanism is still available if needed.  The abstraction layer
can use AT&T's sfio (if you already have sfio installed) or regular stdio.
Using PerlIO with sfio may cause problems with some extension modules.

If this doesn't make any sense to you, just accept the default '$dflt'.
EOM
rp='Use the PerlIO abstraction layer?'
. ./myread
case "$ans" in
y|Y) 
	val="$define"
	;;
*)      
	echo "Ok, doing things the stdio way."
	val="$undef"
	;;
a3690 2
set useperlio
eval $setvar 
d3692 5
a3696 11
case "$usesocks" in
$define|true|[yY]*)
	case "$useperlio" in
	$define|true|[yY]*) ;;
	*)	cat >&4 <<EOM

You are using the SOCKS proxy protocol library which means that you
should also use the PerlIO layer.  You may be headed for trouble.

EOM
		;;
d3701 22
a3722 10
	
case "$usethreads" in
$define|true|[yY]*)     dflt='y';;
*)     # Catch case where user specified ithreads or 5005threads but
       # forgot -Dusethreads (A.D. 4/2002)
       case "$useithreads$use5005threads" in
       *$define*)      
		case "$useperlio" in
		"$define")	dflt='y' ;;
		*)		dflt='n' ;;
d3725 104
a3828 5
       *)	dflt='n';;
       esac
       ;;
esac
cat <<EOM
d3830 3
a3832 2
Perl can be built to take advantage of threads on some systems.
To do so, Configure can be run with -Dusethreads.
d3834 29
a3862 4
Note that Perl built with threading support runs slightly slower
and uses more memory than plain Perl. The current implementation
is believed to be stable, but it is fairly new, and so should be
treated with caution.
d3864 11
a3874 7
If this doesn't make any sense to you, just accept the default '$dflt'.
EOM
rp='Build a threading Perl?'
. ./myread
case "$ans" in
y|Y)    val="$define" ;;
*)      val="$undef" ;;
d3876 1
a3876 2
set usethreads
eval $setvar
d3878 7
a3884 11
case "$usethreads" in
$define)
	$cat <<EOM

Since release 5.6, Perl has had two different threading implementations,
the newer interpreter-based version (ithreads) with one interpreter per
thread, and the older 5.005 version (5005threads).
The 5005threads version is effectively unmaintained and will probably be
removed in Perl 5.10, so there should be no need to build a Perl using it
unless needed for backwards compatibility with some existing 5.005threads
code.
d3887 7
a3893 11
	: Default to ithreads unless overridden on command line or with
	: old config.sh
	dflt='y'
	case "$use5005threads" in
		$define|true|[yY]*) dflt='n';;
	esac
	case "$useithreads" in
		$undef|false|[nN]*) dflt='n';;
	esac
	rp='Use the newer interpreter-based ithreads?'
	. ./myread
d3895 2
a3896 9
	y|Y)    val="$define" ;;
	*)      val="$undef" ;;
	esac
	set useithreads
	eval $setvar
	: Now set use5005threads to the opposite value.
	case "$useithreads" in
	$define) val="$undef" ;;
	*) val="$define" ;;
a3897 6
	set use5005threads
	eval $setvar
	;;
*)
	useithreads="$undef"
	use5005threads="$undef"
d3900 2
d3903 3
a3905 11
case "$useithreads$use5005threads" in
"$define$define")
	$cat >&4 <<EOM

You cannot have both the ithreads and the 5.005 threads enabled
at the same time.  Disabling the 5.005 threads since they are
much less stable than the ithreads.

EOM
	use5005threads="$undef"
	;;
d3908 16
a3923 8
if test X"$usethreads" = "X$define" -a "X$useperlio" = "Xundef"; then
	cat >&4 <<EOF
***
*** To build with ithreads you must also use the PerlIO layer.
*** Cannot continue, aborting.
***
EOF
	exit 1
d3926 3
a3928 7
case "$d_oldpthreads" in
'')	: Configure tests would be welcome here.  For now, assume undef.
	val="$undef" ;;
*)	val="$d_oldpthreads" ;;
esac
set d_oldpthreads
eval $setvar
d3930 3
d3934 5
a3938 6
: Look for a hint-file generated 'call-back-unit'.  If the
: user has specified that a threading perl is to be built,
: we may need to set or change some other defaults.
if $test -f usethreads.cbu; then
    echo "Your platform has some specific hints regarding threaded builds, using them..."
    . ./usethreads.cbu
d3940 7
a3946 5
    case "$usethreads" in
	"$define"|true|[yY]*)
		$cat <<EOM
(Your platform does not have any specific hints for threaded builds.
 Assuming POSIX threads, then.)
d3948 58
d4007 15
a4021 2
    esac
fi
d4023 4
d4029 5
a4033 2
Perl can be built so that multiple Perl interpreters can coexist
within the same Perl executable.
d4035 25
d4061 1
a4061 4
case "$useithreads" in
$define)
	cat <<EOM
This multiple interpreter support is required for interpreter-based threads.
d4063 4
d4069 3
a4071 12
*)	case "$usemultiplicity" in
	$define|true|[yY]*)	dflt='y';;
	*) dflt='n';;
	esac
	echo " "
	echo "If this doesn't make any sense to you, just accept the default '$dflt'."
	rp='Build Perl for multiplicity?'
	. ./myread
	case "$ans" in
	y|Y)	val="$define" ;;
	*)      val="$undef" ;;
	esac
d4074 8
a4081 2
set usemultiplicity
eval $setvar
d4083 2
d4086 3
a4088 7
case "$usemorebits" in
"$define"|true|[yY]*)
	use64bitint="$define"
	uselongdouble="$define"
	usemorebits="$define"
	;;
*)	usemorebits="$undef"
d4092 2
a4093 1
: make some quick guesses about what we are up against
d4095 22
a4116 28
$echo $n "Hmm...  $c"
echo exit 1 >bsd
echo exit 1 >usg
echo exit 1 >v7
echo exit 1 >osf1
echo exit 1 >eunice
echo exit 1 >xenix
echo exit 1 >venix
echo exit 1 >os2
d_bsd="$undef"
$cat /usr/include/signal.h /usr/include/sys/signal.h >foo 2>/dev/null
if test -f /osf_boot || $contains 'OSF/1' /usr/include/ctype.h >/dev/null 2>&1
then
	echo "Looks kind of like an OSF/1 system, but we'll see..."
	echo exit 0 >osf1
elif test `echo abc | $tr a-z A-Z` = Abc ; then
	xxx=`./loc addbib blurfl $pth`
	if $test -f $xxx; then
	echo "Looks kind of like a USG system with BSD features, but we'll see..."
		echo exit 0 >bsd
		echo exit 0 >usg
	else
		if $contains SIGTSTP foo >/dev/null 2>&1 ; then
			echo "Looks kind of like an extended USG system, but we'll see..."
		else
			echo "Looks kind of like a USG system, but we'll see..."
		fi
		echo exit 0 >usg
d4118 259
a4376 7
elif $contains SIGTSTP foo >/dev/null 2>&1 ; then
	echo "Looks kind of like a BSD system, but we'll see..."
	d_bsd="$define"
	echo exit 0 >bsd
else
	echo "Looks kind of like a Version 7 system, but we'll see..."
	echo exit 0 >v7
d4457 1
a4457 1
#ifdef __GNUC__
d4515 9
a4523 276
EOM
      ;;
   *) gccosandvers='' ;; # failed to parse, better be silent
   esac
   ;;
esac
case "$ccname" in
'') ccname="$cc" ;;
esac

# gcc 3.* complain about adding -Idirectories that they already know about,
# so we will take those off from locincpth.
case "$gccversion" in
3*)
    echo "main(){}">try.c
    for incdir in $locincpth; do
       warn=`$cc $ccflags -I$incdir -c try.c 2>&1 | \
	     grep '^c[cp]p*[01]: warning: changing search order '`
       if test "X$warn" != X; then
	   locincpth=`echo " $locincpth " | sed "s! $incdir ! !"`
       fi
    done
    $rm -f try try.*
esac

: decide how portable to be.  Allow command line overrides.
case "$d_portable" in
"$undef") ;;
*)	d_portable="$define" ;;
esac

: set up shell script to do ~ expansion
cat >filexp <<EOSS
$startsh
: expand filename
case "\$1" in
 ~/*|~)
	echo \$1 | $sed "s|~|\${HOME-\$LOGDIR}|"
	;;
 ~*)
	if $test -f /bin/csh; then
		/bin/csh -f -c "glob \$1"
		failed=\$?
		echo ""
		exit \$failed
	else
		name=\`$expr x\$1 : '..\([^/]*\)'\`
		dir=\`$sed -n -e "/^\${name}:/{s/^[^:]*:[^:]*:[^:]*:[^:]*:[^:]*:\([^:]*\).*"'\$'"/\1/" -e p -e q -e '}' </etc/passwd\`
		if $test ! -d "\$dir"; then
			me=\`basename \$0\`
			echo "\$me: can't locate home directory for: \$name" >&2
			exit 1
		fi
		case "\$1" in
		*/*)
			echo \$dir/\`$expr x\$1 : '..[^/]*/\(.*\)'\`
			;;
		*)
			echo \$dir
			;;
		esac
	fi
	;;
*)
	echo \$1
	;;
esac
EOSS
chmod +x filexp
$eunicefix filexp

: now set up to get a file name
cat <<EOS >getfile
$startsh
EOS
cat <<'EOSC' >>getfile
tilde=''
fullpath=''
already=''
skip=''
none_ok=''
exp_file=''
nopath_ok=''
orig_rp="$rp"
orig_dflt="$dflt"
case "$gfpth" in
'') gfpth='.' ;;
esac

case "$fn" in
*\(*)
	: getfile will accept an answer from the comma-separated list
	: enclosed in parentheses even if it does not meet other criteria.
	expr "$fn" : '.*(\(.*\)).*' | $tr ',' $trnl >getfile.ok
	fn=`echo $fn | sed 's/(.*)//'`
	;;
esac

case "$fn" in
*:*)
	loc_file=`expr $fn : '.*:\(.*\)'`
	fn=`expr $fn : '\(.*\):.*'`
	;;
esac

case "$fn" in
*~*) tilde=true;;
esac
case "$fn" in
*/*) fullpath=true;;
esac
case "$fn" in
*+*) skip=true;;
esac
case "$fn" in
*n*) none_ok=true;;
esac
case "$fn" in
*e*) exp_file=true;;
esac
case "$fn" in
*p*) nopath_ok=true;;
esac

case "$fn" in
*f*) type='File';;
*d*) type='Directory';;
*l*) type='Locate';;
esac

what="$type"
case "$what" in
Locate) what='File';;
esac

case "$exp_file" in
'')
	case "$d_portable" in
	"$define") ;;
	*) exp_file=true;;
	esac
	;;
esac

cd ..
while test "$type"; do
	redo=''
	rp="$orig_rp"
	dflt="$orig_dflt"
	case "$tilde" in
	true) rp="$rp (~name ok)";;
	esac
	. UU/myread
	if test -f UU/getfile.ok && \
		$contains "^$ans\$" UU/getfile.ok >/dev/null 2>&1
	then
		value="$ans"
		ansexp="$ans"
		break
	fi
	case "$ans" in
	none)
		value=''
		ansexp=''
		case "$none_ok" in
		true) type='';;
		esac
		;;
	*)
		case "$tilde" in
		'') value="$ans"
			ansexp="$ans";;
		*)
			value=`UU/filexp $ans`
			case $? in
			0)
				if test "$ans" != "$value"; then
					echo "(That expands to $value on this system.)"
				fi
				;;
			*) value="$ans";;
			esac
			ansexp="$value"
			case "$exp_file" in
			'') value="$ans";;
			esac
			;;
		esac
		case "$fullpath" in
		true)
			case "$ansexp" in
			/*) value="$ansexp" ;;
			[a-zA-Z]:/*) value="$ansexp" ;;
			*)
				redo=true
				case "$already" in
				true)
				echo "I shall only accept a full path name, as in /bin/ls." >&4
				echo "Use a ! shell escape if you wish to check pathnames." >&4
					;;
				*)
				echo "Please give a full path name, starting with slash." >&4
					case "$tilde" in
					true)
				echo "Note that using ~name is ok provided it expands well." >&4
						already=true
						;;
					esac
				esac
				;;
			esac
			;;
		esac
		case "$redo" in
		'')
			case "$type" in
			File)
				for fp in $gfpth; do
					if test "X$fp" = X.; then
					    pf="$ansexp"
					else    
					    pf="$fp/$ansexp"
					fi
					if test -f "$pf"; then
						type=''
					elif test -r "$pf" || (test -h "$pf") >/dev/null 2>&1
					then
						echo "($value is not a plain file, but that's ok.)"
						type=''
					fi
					if test X"$type" = X; then
					    value="$pf"
					    break
					fi
				done
				;;
			Directory)
				for fp in $gfpth; do
					if test "X$fp" = X.; then
					    dir="$ans"
					    direxp="$ansexp"
					else    
					    dir="$fp/$ansexp"
					    direxp="$fp/$ansexp"
					fi
					if test -d "$direxp"; then
						type=''
						value="$dir"
						break
					fi
				done
				;;
			Locate)
				if test -d "$ansexp"; then
					echo "(Looking for $loc_file in directory $value.)"
					value="$value/$loc_file"
					ansexp="$ansexp/$loc_file"
				fi
				if test -f "$ansexp"; then
					type=''
				fi
				case "$nopath_ok" in
				true)	case "$value" in
					*/*) ;;
					*)	echo "Assuming $value will be in people's path."
						type=''
						;;
					esac
					;;
				esac
				;;
			esac

			case "$skip" in
			true) type='';
			esac
d4525 14
a4538 29
			case "$type" in
			'') ;;
			*)
				if test "$fastread" = yes; then
					dflt=y
				else
					dflt=n
				fi
				rp="$what $value doesn't exist.  Use that name anyway?"
				. UU/myread
				dflt=''
				case "$ans" in
				y*) type='';;
				*) echo " ";;
				esac
				;;
			esac
			;;
		esac
		;;
	esac
done
cd UU
ans="$value"
rp="$orig_rp"
dflt="$orig_dflt"
rm -f getfile.ok
test "X$gfpthkeep" != Xy && gfpth=""
EOSC
d4839 2
d5017 26
d5044 4
d5053 1
a5053 1
	1*) dflt='-fpcc-struct-return' ;;
d5055 2
a5056 2
	case "$optimize" in
	*-g*) dflt="$dflt -DDEBUGGING";;
a5122 14

		echo "Checking if your compiler accepts -Wdeclaration-after-statement" 2>&1
		echo 'int main(void) { return 0; }' > gcctest.c
		if $cc -Wdeclaration-after-statement -o gcctest gcctest.c; then
			echo "Yes, it does." 2>&1
			case "$ccflags" in
			*-Wdeclaration-after-statement*)
				echo "Leaving current flags $ccflags alone." 2>&1
				;;
			*) dflt="$dflt -Wdeclaration-after-statement" ;;
			esac
		else
			echo "Nope, it doesn't, but that's ok." 2>&1
		fi
d5378 1
a5378 1
$rm -f try try.* core
d5553 1
a5553 1
$rm -f try try.*
d5567 1
a5567 1
$rm try.*
d5598 1
a5598 1
	fi	
d5601 1
a5601 1
$rm -f try.* try
d5621 1
a5621 1
$rm -f try.c try
d5644 1
a5644 1
$rm -f try try.*
d5925 1
a5925 1
$rm -f try.c try
d5939 1
a5939 1
$rm try.*
d5972 1
a5972 1
	fi	
d5975 1
a5975 1
$rm -f try.* try
a6096 95
: determine root of directory hierarchy where package will be installed.
case "$prefix" in
'')
	dflt=`./loc . /usr/local /usr/local /local /opt /usr`
	;;
*?/)
	dflt=`echo "$prefix" | sed 's/.$//'`
	;;
*)
	dflt="$prefix"
	;;
esac
$cat <<EOM

By default, $package will be installed in $dflt/bin, manual pages
under $dflt/man, etc..., i.e. with $dflt as prefix for all
installation directories. Typically this is something like /usr/local.
If you wish to have binaries under /usr/bin but other parts of the
installation under /usr/local, that's ok: you will be prompted
separately for each of the installation directories, the prefix being
only used to set the defaults.

EOM
fn=d~
rp='Installation prefix to use?'
. ./getfile
oldprefix=''
case "$prefix" in
'') ;;
*)
	case "$ans" in
	"$prefix") ;;
	*) oldprefix="$prefix";;
	esac
	;;
esac
prefix="$ans"
prefixexp="$ansexp"

case "$afsroot" in
'')	afsroot=/afs ;;
*)	afsroot=$afsroot ;;
esac

: is AFS running?
echo " "
case "$afs" in
$define|true)	afs=true ;;
$undef|false)	afs=false ;;
*)	if test -d $afsroot; then
		afs=true
	else
		afs=false
	fi
	;;
esac
if test $afs = "true"; then
	echo "AFS may be running... I'll be extra cautious then..." >&4
else
	echo "AFS does not seem to be running..." >&4
fi

: determine installation prefix for where package is to be installed.
if $afs; then 
$cat <<EOM

Since you are running AFS, I need to distinguish the directory in which
files will reside from the directory in which they are installed (and from
which they are presumably copied to the former directory by occult means).

EOM
	case "$installprefix" in
	'') dflt=`echo $prefix | sed 's#^/afs/#/afs/.#'`;;
	*) dflt="$installprefix";;
	esac
else
$cat <<EOM

In some special cases, particularly when building $package for distribution,
it is convenient to distinguish the directory in which files should be
installed from the directory ($prefix) in which they will
eventually reside.  For most users, these two directories are the same.

EOM
	case "$installprefix" in
	'') dflt=$prefix ;;
	*) dflt=$installprefix;;
	esac
fi
fn=d~
rp='What installation prefix should I use for installing files?'
. ./getfile
installprefix="$ans"
installprefixexp="$ansexp"

d6123 17
a6139 1
: get the patchlevel
d6141 7
a6147 18
echo "Getting the current patchlevel..." >&4
if $test -r $rsrc/patchlevel.h;then
	revision=`awk '/define[ 	]+PERL_REVISION/ {print $3}' $rsrc/patchlevel.h`
	patchlevel=`awk '/define[ 	]+PERL_VERSION/ {print $3}' $rsrc/patchlevel.h`
	subversion=`awk '/define[ 	]+PERL_SUBVERSION/ {print $3}' $rsrc/patchlevel.h`
	api_revision=`awk '/define[ 	]+PERL_API_REVISION/ {print $3}' $rsrc/patchlevel.h`
	api_version=`awk '/define[ 	]+PERL_API_VERSION/ {print $3}' $rsrc/patchlevel.h`
	api_subversion=`awk '/define[ 	]+PERL_API_SUBVERSION/ {print $3}' $rsrc/patchlevel.h`
       perl_patchlevel=`grep ',"DEVEL[0-9][0-9]*"' $rsrc/patchlevel.h|sed 's/[^0-9]//g'`
else
	revision=0
	patchlevel=0
	subversion=0
	api_revision=0
	api_version=0
	api_subversion=0
	perl_patchlevel=0
	$echo "(You do not have patchlevel.h.  Eek.)"
d6149 9
a6157 10
if $test -r $rsrc/.patch ; then  
	if $test "`cat $rsrc/.patch`" -gt "$perl_patchlevel" ; then
		perl_patchlevel=`cat $rsrc/.patch`
	fi
fi
: Define a handy string here to avoid duplication in myconfig.SH and configpm.
version_patchlevel_string="version $patchlevel subversion $subversion"
case "$perl_patchlevel" in
0|'') ;;
*) version_patchlevel_string="$version_patchlevel_string patch $perl_patchlevel" ;;
d6159 1
d6161 4
a6164 1
$echo "(You have $package $version_patchlevel_string.)"
d6166 7
a6172 14
case "$osname" in
dos|vms)
	: XXX Should be a Configure test for double-dots in filenames.
	version=`echo $revision $patchlevel $subversion | \
		 $awk '{ printf "%d_%d_%d\n", $1, $2, $3 }'`
	api_versionstring=`echo $api_revision $api_version $api_subversion | \
		 $awk '{ printf "%d_%d_%d\n", $1, $2, $3 }'`
	;;
*)
	version=`echo $revision $patchlevel $subversion | \
		 $awk '{ printf "%d.%d.%d\n", $1, $2, $3 }'`
	api_versionstring=`echo $api_revision $api_version $api_subversion | \
		 $awk '{ printf "%d.%d.%d\n", $1, $2, $3 }'`
	;;
d6174 2
a6175 5
: Special case the 5.005_xx maintenance series, which used 5.005
: without any subversion label as a subdirectory in $sitelib
if test "${api_revision}${api_version}${api_subversion}" = "550"; then
	api_versionstring='5.005'
fi
d6177 10
a6186 10
: determine installation style
: For now, try to deduce it from prefix unless it is already set.
: Reproduce behavior of 5.005 and earlier, maybe drop that in 5.7.
case "$installstyle" in
'')	case "$prefix" in
		*perl*) dflt='lib';;
		*) dflt='lib/perl5' ;;
	esac
	;;
*)	dflt="$installstyle" ;;
a6187 4
: Probably not worth prompting for this since we prompt for all
: the directories individually, and the prompt would be too long and
: confusing anyway.
installstyle=$dflt
d6191 1
a6191 1
: Also allow things like /opt/perl/lib/$version, since 
d6205 1
d6209 2
a6210 8
privlib="$ans"
privlibexp="$ansexp"
: Change installation prefix, if necessary.
if $test X"$prefix" != X"$installprefix"; then
	installprivlib=`echo $privlibexp | sed "s#^$prefix#$installprefix#"`
else
	installprivlib="$privlibexp"
fi
d6240 1
d6244 2
a6245 2
archlib="$ans"
archlibexp="$ansexp"
a6250 6
: Change installation prefix, if necessary.
if $test X"$prefix" != X"$installprefix"; then
	installarchlib=`echo $archlibexp | sed "s#^$prefix#$installprefix#"`
else
	installarchlib="$archlibexp"
fi
d6362 190
d6569 1
a6569 1
$rm -f try.c try
d6667 1
a6667 1
$rm -f try.* .out
d6704 1
a6704 1
$rm -f try.c try
a6834 71
$cat <<EOM

After $package is installed, you may wish to install various
add-on modules and utilities.  Typically, these add-ons will
be installed under $prefix with the rest
of this package.  However, you may wish to install such add-ons
elsewhere under a different prefix.

If you do not wish to put everything under a single prefix, that's
ok.  You will be prompted for the individual locations; this siteprefix
is only used to suggest the defaults.

The default should be fine for most people.

EOM
fn=d~+
rp='Installation prefix to use for add-on modules and utilities?'
: XXX Here might be another good place for an installstyle setting.
case "$siteprefix" in
'') dflt=$prefix ;;
*)  dflt=$siteprefix ;;
esac
. ./getfile
: XXX Prefixit unit does not yet support siteprefix and vendorprefix
oldsiteprefix=''
case "$siteprefix" in
'') ;;
*)	case "$ans" in
	"$prefix") ;;
	*) oldsiteprefix="$prefix";;
	esac
	;;
esac
siteprefix="$ans"
siteprefixexp="$ansexp"

: determine where site specific libraries go.
: Usual default is /usr/local/lib/perl5/site_perl/$version
: The default "style" setting is made in installstyle.U
: XXX No longer works with Prefixit stuff.
prog=`echo $package | $sed 's/-*[0-9.]*$//'`
case "$sitelib" in
'') case "$installstyle" in
	*lib/perl5*) dflt=$siteprefix/lib/$package/site_$prog/$version ;;
	*)	 dflt=$siteprefix/lib/site_$prog/$version ;;
	esac
	;;
*)	dflt="$sitelib"
	;;
esac
$cat <<EOM

The installation process will create a directory for
site-specific extensions and modules.  Most users find it convenient
to place all site-specific files in this directory rather than in the
main distribution directory.

EOM
fn=d~+
rp='Pathname for the site-specific library files?'
. ./getfile
sitelib="$ans"
sitelibexp="$ansexp"
sitelib_stem=`echo "$sitelibexp" | sed "s,/$version$,,"`
: Change installation prefix, if necessary.
if $test X"$prefix" != X"$installprefix"; then
	installsitelib=`echo $sitelibexp | $sed "s#^$prefix#$installprefix#"`
else
	installsitelib="$sitelibexp"
fi

d6857 4
a6860 5
sitearch="$ans"
sitearchexp="$ansexp"
: Change installation prefix, if necessary.
if $test X"$prefix" != X"$installprefix"; then
	installsitearch=`echo $sitearchexp | sed "s#^$prefix#$installprefix#"`
d6862 1
a6862 1
	installsitearch="$sitearchexp"
d6948 2
a6949 6
: Change installation prefix, if necessary.
if $test X"$prefix" != X"$installprefix"; then
	installvendorlib=`echo $vendorlibexp | $sed "s#^$prefix#$installprefix#"`
else
	installvendorlib="$vendorlibexp"
fi
d6974 2
a6975 6
: Change installation prefix, if necessary.
if $test X"$prefix" != X"$installprefix"; then
	installvendorarch=`echo $vendorarchexp | sed "s#^$prefix#$installprefix#"`
else
	installvendorarch="$vendorarchexp"
fi
a7056 20
: determine where public executables go
echo " "
set dflt bin bin
eval $prefixit
fn=d~
rp='Pathname where the public executables will reside?'
. ./getfile
if $test "X$ansexp" != "X$binexp"; then
	installbin=''
fi
bin="$ans"
binexp="$ansexp"
: Change installation prefix, if necessary.
: XXX Bug? -- ignores Configure -Dinstallprefix setting.
if $test X"$prefix" != X"$installprefix"; then
	installbin=`echo $binexp | sed "s#^$prefix#$installprefix#"`
else
	installbin="$binexp"
fi

d7114 1
a7114 1
If you wish to install html files for programs in $spackage, indicate 
d7125 2
a7126 2
html1dir="$ans"
html1direxp="$ansexp"
a7128 6
: Change installation prefix, if necessary.
if $test X"$prefix" != X"$installprefix"; then
	installhtml1dir=`echo $html1direxp | sed "s#^$prefix#$installprefix#"`
else
	installhtml1dir="$html1direxp"
fi
d7148 2
a7149 2
html3dir="$ans"
html3direxp="$ansexp"
a7151 124
: Change installation prefix, if necessary.
if $test X"$prefix" != X"$installprefix"; then
	installhtml3dir=`echo $html3direxp | sed "s#^$prefix#$installprefix#"`
else
	installhtml3dir="$html3direxp"
fi

: Find perl5.005 or later.
echo "Looking for a previously installed perl5.005 or later... "
case "$perl5" in
'')	for tdir in `echo "$binexp$path_sep$PATH" | $sed "s/$path_sep/ /g"`; do
		: Check if this perl is recent and can load a simple module
		if $test -x $tdir/perl$exe_ext && $tdir/perl -Mless -e 'use 5.005;' >/dev/null 2>&1; then
			perl5=$tdir/perl
			break;
		elif $test -x $tdir/perl5$exe_ext && $tdir/perl5 -Mless -e 'use 5.005;' >/dev/null 2>&1; then
			perl5=$tdir/perl5
			break;
		fi
	done
	;;
*)	perl5="$perl5"
	;;
esac
case "$perl5" in
'')	echo "None found.  That's ok.";;
*)	echo "Using $perl5." ;;
esac

: Determine list of previous versions to include in @@INC
$cat > getverlist <<EOPL
#!$perl5 -w
use File::Basename;
\$api_versionstring = "$api_versionstring";
\$version = "$version";
\$stem = "$sitelib_stem";
\$archname = "$archname";
EOPL
	$cat >> getverlist <<'EOPL'
# Can't have leading @@ because metaconfig interprets it as a command!
;@@inc_version_list=();
# XXX Redo to do opendir/readdir? 
if (-d $stem) {
    chdir($stem);
    ;@@candidates = glob("5.*");
}
else {
    ;@@candidates = ();
}

# XXX ToDo:  These comparisons must be reworked when two-digit
# subversions come along, so that 5.7.10 compares as greater than
# 5.7.3!  By that time, hope that 5.6.x is sufficiently
# widespread that we can use the built-in version vectors rather
# than reinventing them here.  For 5.6.0, however, we must
# assume this script will likely be run by 5.005_0x.  --AD 1/2000.
foreach $d (@@candidates) {
    if ($d lt $version) {
	if ($d ge $api_versionstring) {
	    unshift(@@inc_version_list, grep { -d } "$d/$archname", $d);
	}
	elsif ($d ge "5.005") {
	    unshift(@@inc_version_list, grep { -d } $d);
	}
    }
    else {
	# Skip newer version.  I.e. don't look in
	# 5.7.0 if we're installing 5.6.1.
    }
}

if (@@inc_version_list) {
    print join(' ', @@inc_version_list);
}
else {
    # Blank space to preserve value for next Configure run.
    print " ";
}
EOPL
chmod +x getverlist
case "$inc_version_list" in
'')	if test -x "$perl5$exe_ext"; then
		dflt=`$perl5 getverlist`
	else
		dflt='none'
	fi
	;;
$undef) dflt='none' ;;
*)  eval dflt=\"$inc_version_list\" ;;
esac
case "$dflt" in
''|' ') dflt=none ;;
esac
case "$dflt" in
5.005) dflt=none ;;
esac
$cat <<EOM

In order to ease the process of upgrading, this version of perl 
can be configured to use modules built and installed with earlier 
versions of perl that were installed under $prefix.  Specify here
the list of earlier versions that this version of perl should check.
If Configure detected no earlier versions of perl installed under
$prefix, then the list will be empty.  Answer 'none' to tell perl
to not search earlier versions.

The default should almost always be sensible, so if you're not sure,
just accept the default.
EOM

rp='List of earlier versions to include in @@INC?'
. ./myread
case "$ans" in
[Nn]one|''|' '|$undef) inc_version_list=' ' ;;
*) inc_version_list="$ans" ;;
esac
case "$inc_version_list" in
''|' ') 
	inc_version_list_init='0';;
*)	inc_version_list_init=`echo $inc_version_list |
		$sed -e 's/^/"/' -e 's/ /","/g' -e 's/$/",0/'`
	;;
esac
$rm -f getverlist
d7211 1
a7211 1
#       if __GLIBC__ >= 2 && __GLIBC_MINOR__ >= 1
d7236 1
a7236 1
$rm -f try try.* glibc.ver
d7621 26
d7662 3
d7669 1
a7669 1
			echo "void *(*(p()))$tdc { extern void *$1$tdc; return &$1; } int main() { if(p()) return(0); else return(1); }"> try.c;
d7672 1
a7672 1
			$rm -f try$_exe try.c core core.* try.core;
d7675 1
a7675 1
		echo "void *(*(p()))$tdc { extern void *$1$tdc; return &$1; } int main() { if(p()) return(0); else return(1); }"> try.c;
d7677 1
a7677 1
		$rm -f try$_exe try.c;
d7718 1
d7720 8
d7731 5
d7749 1
a7749 1
*) 
d7812 1
a7812 1
			svr4*|esix*|solaris|nonstopux) dflt='-fPIC' ;;
d7840 4
d7847 1
a7847 1
	if(i == -1) 
d7864 1
a7864 1
		rm -f try.c a.out
d7890 2
a7891 2
			      ;;	
			linux|irix*|gnu*)	dflt='-shared' ;;
d8119 1
a8119 1
	freebsd|netbsd|openbsd|interix)
d8233 3
a8235 2
man1dir="$ans"
man1direxp="$ansexp"
a8240 7
: Change installation prefix, if necessary.
if $test X"$prefix" != X"$installprefix"; then
	installman1dir=`echo $man1direxp | $sed "s#^$prefix#$installprefix#"`
else
	installman1dir="$man1direxp"
fi

d8315 1
a8315 1
However, your system can't handle the long file names like File::Basename.3. 
d8330 2
a8331 2
$privlib/man/man3.  This version will suggest a 
new default of $dflt.  
d8352 3
a8354 2
man3dir="$ans"
man3direxp="$ansexp"
a8359 7
: Change installation prefix, if necessary.
if $test X"$prefix" != X"$installprefix"; then
	installman3dir=`echo $man3direxp | $sed "s#^$prefix#$installprefix#"`
else
	installman3dir="$man3direxp"
fi

d8725 3
d8737 2
a8738 2
($binexp/perl) on all your platforms. The alternative is to force
a shell by starting the script with a single ':' character.
d8742 2
a8743 2
		"$define")      dflt="$binexp/perl$version";;  
		*)              dflt="$binexp/perl";;
d8772 2
a8773 2
	"$define")	perlpath="$binexp/perl$version";;
	*)		perlpath="$binexp/perl";;
d8783 1
a8783 1
Perl is not always in a standard place ($binexp/perl).
d8786 1
a8786 1
		dflt="$binexp/perl"
d8818 1
a8818 1
 
d8823 1
a8823 1
 
d8831 5
a8835 8
scriptdir="$ans"
scriptdirexp="$ansexp"
: Change installation prefix, if necessary.
if $test X"$prefix" != X"$installprefix"; then
	installscript=`echo $scriptdirexp | sed "s#^$prefix#$installprefix#"`
else
	installscript="$scriptdirexp"
fi
d8845 2
a8846 8
sitebin="$ans"
sitebinexp="$ansexp"
: Change installation prefix, if necessary.
if $test X"$prefix" != X"$installprefix"; then
	installsitebin=`echo $sitebinexp | sed "s#^$prefix#$installprefix#"`
else
	installsitebin="$sitebinexp"
fi
d8861 2
a8862 8
sitehtml1dir="$ans"
sitehtml1direxp="$ansexp"
: Change installation prefix, if necessary.
if $test X"$prefix" != X"$installprefix"; then
	installsitehtml1dir=`echo $sitehtml1direxp | $sed "s#^$prefix#$installprefix#"`
else
	installsitehtml1dir="$sitehtml1direxp"
fi
d8877 2
a8878 8
sitehtml3dir="$ans"
sitehtml3direxp="$ansexp"
: Change installation prefix, if necessary.
if $test X"$prefix" != X"$installprefix"; then
	installsitehtml3dir=`echo $sitehtml3direxp | $sed "s#^$prefix#$installprefix#"`
else
	installsitehtml3dir="$sitehtml3direxp"
fi
d8883 1
a8883 1
*)  	dflt=$siteman1dir ;;
d8891 2
a8892 8
siteman1dir="$ans"
siteman1direxp="$ansexp"
: Change installation prefix, if necessary.
if $test X"$prefix" != X"$installprefix"; then
	installsiteman1dir=`echo $siteman1direxp | $sed "s#^$prefix#$installprefix#"`
else
	installsiteman1dir="$siteman1direxp"
fi
d8897 1
a8897 1
*)  	dflt=$siteman3dir ;;
d8905 2
a8906 8
siteman3dir="$ans"
siteman3direxp="$ansexp"
: Change installation prefix, if necessary.
if $test X"$prefix" != X"$installprefix"; then
	installsiteman3dir=`echo $siteman3direxp | $sed "s#^$prefix#$installprefix#"`
else
	installsiteman3dir="$siteman3direxp"
fi
d8917 2
a8918 8
sitescript="$ans"
sitescriptexp="$ansexp"
: Change installation prefix, if necessary.
if $test X"$prefix" != X"$installprefix"; then
	installsitescript=`echo $sitescriptexp | sed "s#^$prefix#$installprefix#"`
else
	installsitescript="$sitescriptexp"
fi
d9019 1
a9019 1
    return(0); 
d9034 1
a9034 1
$rm -f try.c try
d9088 1
a9088 1
esac                          
d9135 1
a9135 1
    return(0); 
d9154 1
a9154 1
		$echo $n "Rechecking the size of $zzz...$c" >&4 
d9187 1
a9187 1
		$rm -f try.c try
d9210 2
a9211 6
: Change installation prefix, if necessary.
if $test X"$prefix" != X"$installprefix"; then
	installvendorbin=`echo $vendorbinexp | $sed "s#^$prefix#$installprefix#"`
else
	installvendorbin="$vendorbinexp"
fi
d9237 2
a9238 6
: Change installation prefix, if necessary.
if $test X"$prefix" != X"$installprefix"; then
	installvendorhtml1dir=`echo $vendorhtml1direxp | $sed "s#^$prefix#$installprefix#"`
else
	installvendorhtml1dir="$vendorhtml1direxp"
fi
d9264 2
a9265 6
: Change installation prefix, if necessary.
if $test X"$prefix" != X"$installprefix"; then
	installvendorhtml3dir=`echo $vendorhtml3direxp | $sed "s#^$prefix#$installprefix#"`
else
	installvendorhtml3dir="$vendorhtml3direxp"
fi
d9288 2
a9289 6
: Change installation prefix, if necessary.
if $test X"$prefix" != X"$installprefix"; then
	installvendorman1dir=`echo "$vendorman1direxp" | $sed "s#^$prefix#$installprefix#"`
else
	installvendorman1dir="$vendorman1direxp"
fi
d9312 2
a9313 6
: Change installation prefix, if necessary.
if $test X"$prefix" != X"$installprefix"; then
	installvendorman3dir=`echo "$vendorman3direxp" | $sed "s#^$prefix#$installprefix#"`
else
	installvendorman3dir="$vendorman3direxp"
fi
d9329 1
a9329 1
The installation process will create a directory for 
d9340 2
a9341 6
: Change installation prefix, if necessary.
if $test X"$prefix" != X"$installprefix"; then
	installvendorscript=`echo $vendorscriptexp | $sed "s#^$prefix#$installprefix#"`
else
	installvendorscript="$vendorscriptexp"
fi
d9447 1
a9447 1
$rm -f try try.*
d9452 2
a9453 2
'')	d_PRIfldbl="$undef"; d_PRIgldbl="$undef"; d_PRIeldbl="$undef"; 
	d_PRIFUldbl="$undef"; d_PRIGUldbl="$undef"; d_PRIEUldbl="$undef"; 
d9456 2
a9457 2
*)	d_PRIfldbl="$define"; d_PRIgldbl="$define"; d_PRIeldbl="$define"; 
	d_PRIFUldbl="$define"; d_PRIGUldbl="$define"; d_PRIEUldbl="$define"; 
d9533 2
a9534 2
{ 
	char buf[64]; 
d9542 1
a9542 1
	Gconvert((DOUBLETYPE)0.01, 8, 0, buf); 
d9545 1
a9545 1
	Gconvert((DOUBLETYPE)0.001, 8, 0, buf); 
d9548 1
a9548 1
	Gconvert((DOUBLETYPE)0.0001, 8, 0, buf); 
d9557 1
a9557 1
	Gconvert((DOUBLETYPE)1.0, 8, 0, buf); 
d9560 1
a9560 1
	Gconvert((DOUBLETYPE)1.1, 8, 0, buf); 
d9563 1
a9563 1
	Gconvert((DOUBLETYPE)1.01, 8, 0, buf); 
d9566 1
a9566 1
	Gconvert((DOUBLETYPE)1.001, 8, 0, buf); 
d9569 1
a9569 1
	Gconvert((DOUBLETYPE)1.0001, 8, 0, buf); 
d9572 1
a9572 1
	Gconvert((DOUBLETYPE)1.00001, 8, 0, buf); 
d9575 1
a9575 1
	Gconvert((DOUBLETYPE)1.000001, 8, 0, buf); 
d9578 1
a9578 1
	Gconvert((DOUBLETYPE)0.0, 8, 0, buf); 
d9581 1
a9581 1
	Gconvert((DOUBLETYPE)-1.0, 8, 0, buf); 
d9585 1
a9585 1
	Gconvert((DOUBLETYPE)100000.0, 8, 0, buf); 
d9587 1
a9587 1
	
d9589 1
a9589 1
	Gconvert((DOUBLETYPE)-100000.0, 8, 0, buf); 
d9592 1
a9592 1
	Gconvert((DOUBLETYPE)123.456, 8, 0, buf); 
d9617 1
a9617 1
    esac 
d9624 1
a9624 1
    esac 
d9659 1
a9659 1
	$rm -f try try$_o
d9692 1
a9692 1
   ;;  
d9696 1
d9778 1
a9778 1
rm=$rm
d9786 1
a9786 1
$rm -f try.c
d9816 1
a9816 1
$rm -f try.[co]
d9839 1
a9839 1
$rm -f try.c tryout.c'
d9865 1
a9865 1
$rm -f try.c try.o'
d9952 1
a9952 1
	$rm -f try.c try
d9956 1
a9956 1
*$define*) 
d9973 1
a9973 1
*$define*) 
d10078 44
a10297 4
: see if this is a unistd.h system
set unistd.h i_unistd
eval $inhdr

d10362 1
a10362 1
$rm -f try try.*
d10428 67
a10494 1
$rm -f try try.*
d10499 140
d10699 1
a10699 1
$signal_t blech(s) int s; { exit(3); }
d10708 1
a10708 1
	/* Don't let compiler optimize the test away.  Store the number 
d10744 1
a10744 1
$rm -f try try.*
d10757 5
a10761 5
$signal_t blech(s) int s; { exit(7); }
$signal_t blech_in_list(s) int s; { exit(4); }
unsigned long dummy_long(p) unsigned long p; { return p; }
unsigned int dummy_int(p) unsigned int p; { return p; }
unsigned short dummy_short(p) unsigned short p; { return p; }
d10770 1
a10770 1
	
d10775 1
a10775 1
	/* Store the number in a writable string for gcc to pass to 
d10844 1
a10844 1
$rm -f try.*
d10852 3
a10854 1
#include <varargs.h>
d10856 12
d10869 1
a10869 1
#include <stdlib.h>
d10872 13
a10884 1
int main() { xxx("foo"); }
d10889 8
a10896 2
	va_list args;
	char buf[10];
a10897 3
	va_start(args);
	exit((unsigned long)vsprintf(buf,"%s",args) > 10L);
}
d10900 13
a10912 2
	if eval $compile && $run ./try; then
		echo "Your vsprintf() returns (int)." >&4
a10913 3
	else
		echo "Your vsprintf() returns (char*)." >&4
		val2="$define"
d10917 2
a10918 2
		val="$undef"
		val2="$undef"
d10920 1
a10920 1
$rm -f try try.*
d10963 1
a10963 1
$rm -f try.c try.o'
d11004 1
a11004 1
						echo "Found Berkeley sockets interface in lib$net." >&4 
d11045 1
a11045 1
	$rm -f try.c try
d11071 1
a11071 1
	const spug y;
d11188 4
d11401 1
a11401 1
		
d11415 1
a11415 2
$rm -f try.c

d11420 44
a11463 8
if $contains 'd_namlen' try.c >/dev/null 2>&1; then
	echo "Good, your directory entry keeps length information in d_namlen." >&4
	val="$define"
else
	echo "Your directory entry does not know about the d_namlen field." >&4
	val="$undef"
fi
set d_dirnamlen
d11465 1
a11465 1
$rm -f try.c
d12167 1
a12167 1
$rm -f try try.*
d12244 8
d12306 1
a12306 1
$rm -f try try.* .out core
d12312 2
d12319 1
a12319 1
#include <stdio.h> 
d12342 1
a12342 1
$signal_t blech(x) int x; { exit(3); }
d12446 6
d12468 1
a12468 1
$rm -f try try.* .out core head.c mtry
d12567 1
a12567 1
$rm -f try.c try
d12667 1
a12667 1
	}	
d12694 1
a12694 1
	$rm -f try.c try
d12732 1
a12732 1
	$rm -f try.c try
d12781 1
a12781 1
$signal_t blech(x) int x; { exit(3); }
d12835 1
a12835 2
$rm -f try*

d12913 1
a12913 1
$rm -f try try.*
a12935 4
: see if fork exists
set fork d_fork
eval $inlibc

d12979 1
a12979 1
$rm -f try.* try
d13045 1
a13045 1
echo "Checking for a working futimes()" >&4
d13066 1
a13066 1
	0)  echo "Yes, it does" >&4
d13069 1
a13069 1
	*)  echo "No, it has futimes, but it isn't working ($rc) (probably harmless)\n" >&4
d13073 1
a13073 1
    echo "No, it does not (probably harmless)\n" >&4
d13075 1
a13075 1
$rm -f try.* try core core.try.*
d14701 1
a14701 1
	    echo "No, it does not (probably harmless)\n" >&4
d14703 1
a14703 1
	$rm -f try.* try core core.try.*
d14757 53
d14947 1
a14947 1
#include <math.h> 
d14952 1
a14952 1
/* Sigh. many current glibcs provide the function, but do not prototype it.  */ 
d14960 1
a14960 1
    v = modfl(nv, &w);         
d14991 1
a14991 1
		$rm -f try.* try core core.try.*
a15123 34
: check for length of character
echo " "
case "$charsize" in
'')
	echo "Checking to see how big your characters are (hey, you never know)..." >&4
	$cat >try.c <<EOCP
#include <stdio.h>
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
int main()
{
    printf("%d\n", (int)sizeof(char));
    exit(0);
}
EOCP
	set try
	if eval $compile_ok; then
		dflt=`$run ./try`
	else
		dflt='1'
		echo "(I can't seem to compile the test program.  Guessing...)"
	fi
	;;
*)
	dflt="$charsize"
	;;
esac
rp="What is the size of a character (in bytes)?"
. ./myread
charsize="$ans"
$rm -f try.c try

d15153 1
a15153 1
$rm -f try.*
d15212 4
a15215 32
case "$i8type" in
'')	case "$charsize" in
	1)	i8type=char
		u8type="unsigned char"
		i8size=$charsize
		u8size=$charsize
		;;
	esac
	;;
esac
case "$i8type" in
'')	set try -DINT8
	if eval $compile; then
		case "`$run ./try`" in
		int8_t)	i8type=int8_t
			u8type=uint8_t
			i8size=1
			u8size=1
			;;
		esac
	fi
	;;
esac
case "$i8type" in
'')	if $test $charsize -ge 1; then
		i8type=char
		u8type="unsigned char"
		i8size=$charsize
		u8size=$charsize
	fi
	;;
esac
d15320 1
a15320 1
$signal_t blech(s) int s; { bletched = 1; }
d15342 1
a15342 1
      if (bletched) {
a15344 1
      }	
d15357 1
a15357 1
\-[1-9]*)	
d15365 1
a15365 1
	nv_preserves_uv_bits="$undef" ;;
d15367 1
a15367 2

$rm -f try.* try
d15390 1
a15390 1
$signal_t blech(s) int s; { bletched = 1; }
d15446 1
a15446 1
    
d15488 1
a15488 3

$rm -f try.* try

d15509 1
a15509 1
$rm -f try.* try
d15516 1
a15516 1
	echo "Checking what constant to use for creating joinable pthreads..." >&4 
d15542 1
a15542 1
		else		
d15563 1
a15563 1
	$rm -f try try.*
a15572 4
: see if pipe exists
set pipe d_pipe
eval $inlibc

d15608 48
a15752 1

d15756 1
a15756 2

$rm -f try try.*
d16006 1
a16006 1
			if ./try 2>/dev/null; then
d16017 1
a16017 1
	$rm -f try.* try core
d16082 1
a16082 1
			if ./try 2>/dev/null; then
d16093 1
a16093 1
	$rm -f try.* try core
d16149 1
a16149 1
$rm -f try.* try core
d16224 1
a16224 1
$rm -f try try.c
d16232 1
a16232 1
    $cat > try.h <<END
a16256 1
    val="$undef"
d16259 1
d16267 1
a16267 1
#include "try.h"
d16298 1
a16298 1
#   	endif /* IPC_RMID */
d16313 3
a16315 1
      $rm -f try try.c
a16317 2
    set d_semctl_semun
    eval $setvar
a16328 1
    val="$undef"
d16331 1
d16337 1
a16337 1
#include "try.h"
d16375 3
a16377 1
      $rm -f try try.c
a16379 2
    set d_semctl_semid_ds
    eval $setvar
a16386 1
    $rm -f try.h
d16400 1
d16996 46
a17041 1
$rm -f try try$_o try.c
d17094 66
a17159 1
$rm -f try.c try
d17233 1
a17233 2

$rm -f try.* try
d17398 1
a17398 1
	$rm -f try.* try$exe_ext
d17439 1
a17439 1
$rm -f try.*
d17689 3
d17746 3
d17801 3
d18050 1
a18050 1
		if eval $compile && ./try > /dev/null; then
d18078 1
a18078 1
	$rm -f try.c try
a18081 1

d18098 1
a18098 1
$signal_t bletch(s) int s; { exit(4); }
d18181 1
a18181 1
$rm -f core core.try.* try.core
a18213 46
: backward compatibility for d_hvfork
if test X$d_hvfork != X; then
	d_vfork="$d_hvfork"
	d_hvfork=''
fi
: see if there is a vfork
val=''
set vfork val
eval $inlibc

: Ok, but do we want to use it. vfork is reportedly unreliable in 
: perl on Solaris 2.x, and probably elsewhere.
case "$val" in
$define)
	echo " "
	case "$usevfork" in
	false) dflt='n';;
	*) dflt='y';;
	esac
	cat <<'EOM'
 
Perl can only use a vfork() that doesn't suffer from strict
restrictions on calling functions or modifying global data in
the child.  For example, glibc-2.1 contains such a vfork()
that is unsuitable.  If your system provides a proper fork()
call, chances are that you do NOT want perl to use vfork().

EOM
	rp="Do you still want to use vfork()?"
	. ./myread
	case "$ans" in
	y|Y) ;;
	*)
		echo "Ok, we won't use vfork()."
		val="$undef"
		;;
	esac
	;;
esac
set d_vfork
eval $setvar
case "$d_vfork" in
$define) usevfork='true';;
*) usevfork='false';;
esac

d18248 1
a18248 1
#endif 
d18271 2
a18272 1
$rm -f try try.*
d18351 1
a18351 1
	$rm -f try.c try
d18430 1
a18430 1
        exit(3);	
d18442 1
a18442 1
        exit(2);	
d18481 1
a18481 1
	$rm -f try.*
d18487 1
a18487 1
	: Check the return type needed for hash 
d18524 1
a18524 1
	$rm -f try.*
d18532 1
a18532 1
	: Check the return type needed for prefix 
d18569 1
a18569 1
	$rm -f try.*
a18575 1

d18681 1
a18681 1
			$rm -f try.c try
d18729 1
a18729 1
$rm -f try try.*
d18792 1
a18792 1
# endif 
d18801 1
a18801 1
    }	
d18852 1
a18852 1
	$rm -f core try.core core.try.*
d18970 1
a18970 1
			$rm -f core try.core core.try.*
d19020 1
a19020 1
$rm -f try.* try$exe_ext
d19269 1
a19269 2

$rm -f try try.*
d19274 2
a19275 2
'')	d_PRId64="$undef"; d_PRIi64="$undef"; d_PRIu64="$undef"; 
	d_PRIo64="$undef"; d_PRIx64="$undef"; d_PRIXU64="$undef"; 
d19277 2
a19278 2
*)	d_PRId64="$define"; d_PRIi64="$define"; d_PRIu64="$define"; 
	d_PRIo64="$define"; d_PRIx64="$define"; d_PRIXU64="$define"; 
d19409 33
a19466 98
: see if stdarg is available
echo " "
if $test `./findhdr stdarg.h`; then
	echo "<stdarg.h> found." >&4
	valstd="$define"
else
	echo "<stdarg.h> NOT found." >&4
	valstd="$undef"
fi

: see if varags is available
echo " "
if $test `./findhdr varargs.h`; then
	echo "<varargs.h> found." >&4
else
	echo "<varargs.h> NOT found, but that's ok (I hope)." >&4
fi

: set up the varargs testing programs
$cat > varargs.c <<EOP
#ifdef I_STDARG
#include <stdarg.h>
#endif
#ifdef I_VARARGS
#include <varargs.h>
#endif

#ifdef I_STDARG
int f(char *p, ...)
#else
int f(va_alist)
va_dcl
#endif
{
	va_list ap;
#ifndef I_STDARG
	char *p;
#endif
#ifdef I_STDARG
	va_start(ap,p);
#else
	va_start(ap);
	p = va_arg(ap, char *);
#endif
	va_end(ap);
}
EOP
$cat > varargs <<EOP
$startsh
if $cc -c $ccflags -D\$1 varargs.c >/dev/null 2>&1; then
	echo "true"
else
	echo "false"
fi
$rm -f varargs$_o
EOP
chmod +x varargs

: now check which varargs header should be included
echo " "
i_varhdr=''
case "$valstd" in
"$define")
	if `./varargs I_STDARG`; then
		val='stdarg.h'
	elif `./varargs I_VARARGS`; then
		val='varargs.h'
	fi
	;;
*)
	if `./varargs I_VARARGS`; then
		val='varargs.h'
	fi
	;;
esac
case "$val" in
'')
echo "I could not find the definition for va_dcl... You have problems..." >&4
	val="$undef"; set i_stdarg; eval $setvar
	val="$undef"; set i_varargs; eval $setvar
	;;
*) 
	set i_varhdr
	eval $setvar
	case "$i_varhdr" in
	stdarg.h)
		val="$define"; set i_stdarg; eval $setvar
		val="$undef"; set i_varargs; eval $setvar
		;;
	varargs.h)
		val="$undef"; set i_stdarg; eval $setvar
		val="$define"; set i_varargs; eval $setvar
		;;
	esac
	echo "We'll include <$i_varhdr> to get va_dcl definition." >&4;;
esac
$rm -f varargs*

d19485 2
a19486 2
 
int    
d19491 1
a19491 1
      
d19493 1
a19493 1
myprintf(char *fmt, ...) 
d19497 2
a19498 2
  return myvfprintf(stdout, fmt, val); 
}         
d19505 2
a19506 2
  myprintf("%s%cs all right, then\n", "that", '\'');                            
  exit(0);      
d19525 1
a19525 1
	$rm -f try.* core core.* *.core *.core.*
d19724 6
d19754 1
a19754 1
$rm -f foo* bar* 
d19851 1
a19851 1
    char *s = malloc(NBYTES);
d19904 1
a19904 1
		$rm -f try.* try
d19984 6
d20003 1
a20003 1
#    define NSIG (SIGARRAYSIZE+1) /* Not sure of the +1 */
d20242 1
a20242 1
$rm -f try try.*
d20314 1
a20314 1
	else 
d20338 1
a20338 1
$rm -f try try.*
d20536 20
d20638 1
a20638 1
	$rm -f try.* try
d20657 1
a20657 1
$echo "Guessing which symbols your C compiler and preprocessor define..." >&4 
d20681 1
a20681 1
Linux LITTLE_ENDIAN LONG64 LONG_DOUBLE LONG_LONG
d20700 1
a20700 1
PROTOTYPES PWB pyr QNX R3000 REENTRANT RES Rhapsody RISC6000
d20788 15
d20820 1
a20820 1
$rm -f try.c
a20935 4
: see if this is a sunmath.h system
set sunmath.h i_sunmath
eval $inhdr

a21038 20
: see if gdbm.h is available
set gdbm.h t_gdbm
eval $inhdr
case "$t_gdbm" in
$define)
	: see if gdbm_open exists
	set gdbm_open d_gdbm_open
	eval $inlibc
	case "$d_gdbm_open" in
	$undef)
		t_gdbm="$undef"
		echo "We won't be including <gdbm.h>"
		;;
	esac
	;;
esac
val="$t_gdbm"
set i_gdbm
eval $setvar

d21054 18
a21071 18
       case "$xxx" in
           DynaLoader|dynaload) ;;
           *)
           if $test -f $xxx/$xxx.xs; then
               known_extensions="$known_extensions $1$xxx";
           elif $test -f $xxx/Makefile.PL; then
               nonxs_extensions="$nonxs_extensions $1$xxx";
           else
               if $test -d $xxx -a $# -lt 10; then
                   set $1$xxx/ $*;
                   cd "$xxx";
                   eval $find_extensions;
                   cd ..;
                   shift;
               fi;
           fi
           ;;
       esac;
d21078 9
a21086 4
# Special case:  Add in threads/shared since it is not picked up by the
# recursive find above (and adding in general recursive finding breaks
# SDBM_File/sdbm).  A.D.  10/25/2001.
known_extensions="$known_extensions threads/shared"
a21089 3
set X $known_extensions
shift
known_extensions="$*"
d21102 1
a21102 1
		case "$i_gdbm" in 
d21107 1
a21107 1
		case "$i_langinfo$d_nl_langinfo" in 
d21111 6
d21131 1
a21131 1
	ODBM_File|odbm_fil) 
d21134 9
a21142 4
		    case "$osname-$use64bitint" in
		    hpux-define)
			case "$libs" in
			*-ldbm*) avail_ext="$avail_ext $xxx" ;;
a21144 1
		    *) avail_ext="$avail_ext $xxx" ;;
d21149 2
a21150 2
	POSIX|posix)
		case "$useposix" in
d21154 2
a21155 2
	Opcode|opcode)
		case "$useopcode" in
d21160 1
a21160 1
		case "$d_socket" in 
d21171 1
a21171 1
		case "$d_socket" in 
d21178 2
a21179 2
                        case "$useithreads" in
                        $undef|false|[nN]*) avail_ext="$avail_ext $xxx" ;;
a21182 13
	XS/APItest|xs/apitest)
		# This is just for testing.  Skip it unless we have dynamic loading.

		case "$usedl" in
		$define) avail_ext="$avail_ext $xxx" ;;
		esac
		;;
	XS/Typemap|xs/typemap)
		# This is just for testing.  Skip it unless we have dynamic loading.
		case "$usedl" in
		$define) avail_ext="$avail_ext $xxx" ;;
		esac
		;;
d21197 16
a21212 4
	IPC/SysV|ipc/sysv)
		: XXX Do we need a useipcsysv variable here
		case "${d_msg}${d_sem}${d_shm}" in 
		*"${define}"*) avail_ext="$avail_ext $xxx" ;;
d21301 2
a21302 2
NOTICE:  Your previous config.sh list may be incorrect. 
The extensions now available to you are 
d21305 1
a21305 1
	${dynamic_ext} 
d21337 1
a21337 1
	*)  dflt="$static_ext" 
d21353 2
a21354 2
A number of extensions are supplied with $package.  Answer "none" 
to include no extensions. 
d21366 2
a21367 2
NOTICE:  Your previous config.sh list may be incorrect. 
The extensions now available to you are 
d21370 1
a21370 1
	${static_ext} 
d21390 1
a21390 1
#        
a21569 1
charsize='$charsize'
d21628 2
d21631 1
d21644 1
d21648 1
d21655 1
d21774 1
d21789 1
d21848 1
d21850 1
d21930 1
d21933 2
d22016 1
d22203 1
d22272 4
d22365 1
d22508 1
@


1.17
log
@sync in-tree perl with 5.8.6
@
text
@d20 6
d27 1
a27 1
# $Id: Configure,v 1.16 2004/08/15 20:57:29 millert Exp $
d29 1
a29 1
# Generated on Fri Jul 16 12:49:13 METDST 2004 [metaconfig 3.0 PL70]
d348 7
a354 1
d_attribut=''
d365 1
d444 1
d542 1
d555 2
d683 1
d699 1
d734 2
d770 1
d1017 1
d4786 1
a4786 1
		if $cc -O2 -pipe -o gcctest gcctest.c; then
d4797 14
d7161 1
a7161 1
	*linux*)
d7683 1
a7683 1
			linux|irix*)	dflt='-shared' ;;
d7730 1
a7730 1
	    linux|hpux)	dflt='-Wl,-E' ;;
d7791 1
a7791 1
executable, but it may have a noticeable affect on performance.  The
d7827 1
a7827 1
		linux*)  # ld won't link with a bare -lperl otherwise.
d7911 1
a7911 1
	freebsd|netbsd|openbsd)
d7914 1
a7914 1
	bsdos|linux|irix*|dec_osf)
d9913 3
a9915 1
: Look for GNU-cc style attribute checking
d9917 1
a9917 1
echo "Checking whether your compiler can handle __attribute__ ..." >&4
d9920 1
a9920 1
void croak (char* pat,...) __attribute__((__format__(__printf__,1,2),noreturn));
d9924 1
a9924 1
		echo "Your C compiler doesn't fully support __attribute__."
d9927 1
a9927 1
		echo "Your C compiler supports __attribute__."
d9934 172
a10105 1
set d_attribut
d10523 4
d11057 1
d12572 35
d14206 32
d14308 8
d14413 1
a14413 1
set d_modflproto modfl math.h
d14910 122
d16565 62
d16925 8
d17581 4
d19217 3
a19219 1
	ranlib=":"
d19826 2
a19827 1
echo '#include <stdio.h>' | $cppstdin $cppminus > stdioh
d19835 1
a19835 3
$rm -f stdioh


d19971 10
a20040 4
: see if this is a math.h system
set math.h i_math
eval $inhdr

d20125 1
a20125 1
alliant alpha am29000 AM29000 AMD64 amiga AMIGAOS AMIX
d20131 1
a20131 1
CYGWIN DGUX DGUX_SOURCE DJGPP dmert DOLPHIN DPX2 DSO
d20183 1
a20183 1
Utek UTek UTS UWIN uxpm uxps vax venix VMESA vms xenix Xenix286
d20218 10
d20234 4
a20237 4
    printf "#ifdef %s\n#if %s+0\nprintf(\"%s=%%ld\\n\", (long)%s);\n#else\nprintf(\"%s\\n\");\n#endif\n#endif\n", $1, $1, $1, $1, $1
    printf "#ifdef _%s\n#if _%s+0\nprintf(\"_%s=%%ld\\n\", (long)_%s);\n#else\nprintf(\"_%s\\n\");\n#endif\n#endif\n", $1, $1, $1, $1, $1
    printf "#ifdef __%s\n#if __%s+0\nprintf(\"__%s=%%ld\\n\", (long)__%s);\n#else\nprintf(\"__%s\\n\");\n#endif\n#endif\n", $1, $1, $1, $1, $1
    printf "#ifdef __%s__\n#if __%s__+0\nprintf(\"__%s__=%%ld\\n\", (long)__%s__);\n#else\nprintf(\"__%s__\\n\");\n#endif\n#endif\n", $1, $1, $1, $1, $1
d20247 1
a20247 1
$cc -o try $optimize \$ccflags $ldflags try.c $libs && $run ./try
d20283 3
a20285 5
$awk '/\=/ { print $0; next }
	{ print $0"=1" }' Cppsym.true >ccsym.true
$comm -13 ccsym.true ccsym.list >ccsym.own
$comm -12 ccsym.true ccsym.list >ccsym.com
$comm -23 ccsym.true ccsym.list >ccsym.cpp
d21079 7
a21085 1
d_attribut='$d_attribut'
d21099 1
d21168 1
d21242 1
d21252 2
d21290 1
d21391 1
d21415 2
d21452 1
d21953 1
@


1.16
log
@Don't check for -fno-delete-null-pointer-checks on gcc 2; the resulting
message from gcc at Configure time confuses some people...
@
text
@d21 1
a21 1
# $Id: Configure,v 1.15 2004/08/14 00:12:22 millert Exp $
d23 1
a23 1
# Generated on Wed May 12 13:00:30 METDST 2004 [metaconfig 3.0 PL70]
d94 1
a94 1
paths="$paths /bsd4.3/usr/bin /usr/bsd /bsd43/bin /usr/ccs/bin"
d3083 3
a3085 1
			'not found') osvers="$4"."$3" ;;
@


1.15
log
@gcc 3.3.2 needs -fno-delete-null-pointer-checks in addition to
-fno-strict-aliasing.  Avoid the need for compiling some bits
with -O1 on arm (and others).  Problem debugged and OK miod@@
@
text
@d21 1
a21 1
# $Id: Configure,v 1.14 2004/08/09 18:08:53 millert Exp $
d4733 6
a4738 1
		echo " "
@


1.14
log
@merge 5.8.5 into HEAD
remove now-unused files
crank libperl shared library major number
update Makefile.bsd-wrapper
tweak openbsd hints file for arm and m68k
@
text
@d21 1
a21 1
# $Id: Configure,v 1.13 2004/04/07 21:32:58 millert Exp $
d4729 14
@


1.13
log
@merge local changes into perl-5.8.3
@
text
@d21 1
a21 1
# $Id: Configure,v 1.12 2003/12/03 03:02:18 millert Exp $
d23 1
a23 1
# Generated on Fri Dec  5 12:57:38 MET 2003 [metaconfig 3.0 PL70]
d945 1
a1176 2
pm_apiversion=''
xs_apiversion=''
d2878 6
a2883 6
*)	# There is a discontinuity in EBCDIC between 'I' and 'J'
        # (0xc9 and 0xd1), therefore that is a nice testing point.
        if test "X$up" = X -o "X$low" = X; then
	    case "`echo IJ | $tr '[I-J]' '[i-j]' 2>/dev/null`" in
	    ij) up='[A-Z]'
	        low='[a-z]'
d2886 1
a2886 1
        fi
d2888 2
a2889 2
	    case "`echo IJ | $tr I-J i-j 2>/dev/null`" in
	    ij) up='A-Z'
d2893 1
a2893 1
        fi
d2895 2
a2896 2
	    case "`echo IJ | od -x 2>/dev/null`" in
	    *C9D1*|*c9d1*)
d2899 3
a2901 3
		    case "`echo IJ | $tr '[A-IJ-RS-Z]' '[a-ij-rs-z]' 2>/dev/null`" in
		    ij) up='[A-IJ-RS-Z]'
		        low='[a-ij-rs-z]'
d2906 3
a2908 3
		    case "`echo IJ | $tr A-IJ-RS-Z a-ij-rs-z 2>/dev/null`" in
		    ij) up='A-IJ-RS-Z'
		        low='a-ij-rs-z'
d2916 2
a2917 2
case "`echo IJ | $tr \"$up\" \"$low\" 2>/dev/null`" in
ij)
d3105 1
a3105 1
		dgux) osname=dgux 
d3113 4
a3116 2
		genix) osname=genix ;;
		hp*) osname=hpux 
d3119 1
a3119 1
		irix*) osname=irix
d3126 1
a3126 1
		linux) osname=linux
d3131 1
a3131 1
		MiNT) osname=mint
a3461 1
cf_by=`(logname) 2>/dev/null`
d3464 1
a3464 1
	cf_by=`(whoami) 2>/dev/null`
d3466 5
a3470 1
	"") cf_by=unknown ;;
d4711 1
d4725 1
a4725 1
			*strict-aliasing*) 
d4735 20
d4766 2
a4767 2
                        *" -I$thisincl "*);;
                        *) dflt="$dflt -I$thisincl ";;
d4898 1
a4898 1
		case "$dflt " in 
d5478 1
a5478 1
	if $test -f use64bitint.cbu; then
d5480 2
a5481 2
		. ./use64bitint.cbu
	fi
d5496 1
a5496 1
	if $test -f use64bitall.cbu; then
d5498 2
a5499 2
		. ./use64bitall.cbu
	fi
d5516 1
a5516 1
*** but none cannot be found.
d6284 21
d6922 1
a6922 1
[Nn]one|''|' ') inc_version_list=' ' ;;
d7672 3
a7674 5
		hpux)	dflt='-Wl,-E' ;;
		linux)	dflt='-rdynamic' ;;
		next)	dflt='none' ;;
		sunos)	dflt='none' ;;
		*)	dflt='none' ;;
d10103 1
a10103 1
       sign change.  We don't want that.  We want to mimic SPARC
a18689 6
: Find earliest binary compatible site_perl subdirectory perl can use.
xs_apiversion=$version # The current site_perl version.
: Find earliest pure perl site_perl subdirectory perl can use.
: The versioned directories started at 5.005.
pm_apiversion='5.005'

a21249 1
pm_apiversion='$pm_apiversion'
d21404 1
a21451 1
xs_apiversion='$xs_apiversion'
@


1.12
log
@Resolve conflicts for perl 5.8.2, remove old files, and add OpenBSD-specific scaffolding
@
text
@d21 1
a21 1
# $Id: Head.U,v 3.0.1.9 1997/02/28 15:02:09 ram Exp $
d23 1
a23 1
# Generated on Thu Sep 18 09:10:02 EEST 2003 [metaconfig 3.0 PL70]
d1212 11
a1230 6
siteman1dir=''
siteman3dir=''
sitescript=''
: Trailing extension.  Override this in a hint file, if needed.
: Extra object files, if any, needed on this platform.
archobjs=''
d1254 3
a1256 10
: full support for void wanted by default
defvoidused=15

ccname=''
ccversion=''
perllibs=''
: set useposix=false in your hint file to disable the POSIX extension.
useposix=true
: set useopcode=false in your hint file to disable the Opcode extension.
useopcode=true
a1262 1
archname=''
d1265 3
a3675 2
case "$usethreads" in
"$define"|true|[yY]*)
d3679 6
a3684 4
	if $test -f usethreads.cbu; then
		echo "Your platform has some specific hints for threaded builds, using them..."
		. ./usethreads.cbu
	else
d3686 1
a3686 1
(Your platform doesn't have any specific hints for threaded builds.
a3688 1
	fi
d3690 2
a3691 1
esac
a4548 2
case "$uselongdouble" in
$define)
d4552 6
a4557 4
	if $test -f uselongdouble.cbu; then
		echo "Your platform has some specific hints for long doubles, using them..."
		. ./uselongdouble.cbu
	else
d4559 1
a4559 1
(Your platform doesn't have any specific hints for long doubles.)
a4560 1
	fi
d4562 2
a4563 1
esac
a5449 2
case "$use64bitint" in
"$define"|true|[yY]*)
d5454 1
a5454 1
		echo "Your platform has some specific hints for 64-bit integers, using them..."
d5457 2
a5467 2
case "$use64bitall" in
"$define"|true|[yY]*)
d5472 1
a5472 1
		echo "Your platform has some specific hints for 64-bit builds, using them..."
d5475 2
a8854 2
case "$uselargefiles" in
"$define")
d8858 6
a8864 2
		echo "Your platform has some specific hints for large file builds, using them..."
		. ./uselargefiles.cbu
d16958 1
d16961 1
a16961 2
    buf[7] = 0;
    buf[8] = 1;
@


1.11
log
@Resolve conflicts, remove old files, merge local changes
@
text
@d23 1
a23 1
# Generated on Fri Jul 19 01:54:37 EET DST 2002 [metaconfig 3.0 PL70]
d50 12
d74 1
a74 1
if test -d c:/. ; then
d79 1
a180 1

d191 1
d338 1
d357 1
d401 1
d517 1
d558 1
d583 1
d607 1
d777 1
d787 6
d1075 6
d1085 6
d1093 3
d1119 1
d1149 6
d1160 6
d1169 4
d1206 1
a1206 1
elif test -d c:/. ; then
a1211 11
ccname=''
ccversion=''
perllibs=''
: set useposix=false in your hint file to disable the POSIX extension.
useposix=true
: set useopcode=false in your hint file to disable the Opcode extension.
useopcode=true
: Trailing extension.  Override this in a hint file, if needed.
: Extra object files, if any, needed on this platform.
archobjs=''
archname=''
d1220 6
d1249 10
d1265 1
a1267 3
: full support for void wanted by default
defvoidused=15

d1269 3
a1271 5
: If anyone needs -lnet, put it in a hint file.
libswanted='sfio socket bind inet nsl nm ndbm gdbm dbm db malloc dl'
libswanted="$libswanted dld ld sun m c cposix posix"
libswanted="$libswanted ndir dir crypt sec"
libswanted="$libswanted ucb bsd BSD PW x util"
d2215 1
a2215 1
		else
d2218 1
d3146 3
d3187 1
a3187 1
					osvers=`sizer -v | awk '{print $3}' |  tr '[A-Z]' '[a-z]' | sed 's/^[xvt]//'`
d3197 2
a3198 1
		unixware) osname=svr5
d3268 1
a3268 1
		elif test -d c:/.; then
d3859 1
a3859 1
	exit(0);
d3867 1
a3867 1
	    ccname=gcc	
d3920 1
a3920 1
# gcc 3.1 complains about adding -Idirectories that it already knows about,
d3925 6
a3930 3
    for incdir in `$cc -v -c try.c 2>&1 | \
       sed '1,/^#include <\.\.\.>/d;/^End of search list/,$d;s/^ //'` ; do
       locincpth=`echo $locincpth | sed s!$incdir!!`
d4521 44
d4912 1
a4912 1
int main() { printf("Ok\n"); exit(0); }
a4995 94
: check for lengths of integral types
echo " "
case "$intsize" in
'')
	echo "Checking to see how big your integers are..." >&4
	$cat >try.c <<'EOCP'
#include <stdio.h>
int main()
{
	printf("intsize=%d;\n", (int)sizeof(int));
	printf("longsize=%d;\n", (int)sizeof(long));
	printf("shortsize=%d;\n", (int)sizeof(short));
	exit(0);
}
EOCP
	set try
	if eval $compile_ok && $run ./try > /dev/null; then
		eval `$run ./try`
		echo "Your integers are $intsize bytes long."
		echo "Your long integers are $longsize bytes long."
		echo "Your short integers are $shortsize bytes long."
	else
		$cat >&4 <<EOM
!
Help! I can't compile and run the intsize test program: please enlighten me!
(This is probably a misconfiguration in your system or libraries, and
you really ought to fix it.  Still, I'll try anyway.)
!
EOM
		dflt=4
		rp="What is the size of an integer (in bytes)?"
		. ./myread
		intsize="$ans"
		dflt=$intsize
		rp="What is the size of a long integer (in bytes)?"
		. ./myread
		longsize="$ans"
		dflt=2
		rp="What is the size of a short integer (in bytes)?"
		. ./myread
		shortsize="$ans"
	fi
	;;
esac
$rm -f try try.*

: check for long long
echo " "
echo "Checking to see if you have long long..." >&4
echo 'int main() { long long x = 7; return 0; }' > try.c
set try
if eval $compile; then
	val="$define"
	echo "You have long long."
else
	val="$undef"
	echo "You do not have long long."
fi
$rm try.*
set d_longlong
eval $setvar

: check for length of long long
case "${d_longlong}${longlongsize}" in
$define)
	echo " "
	echo "Checking to see how big your long longs are..." >&4
	$cat >try.c <<'EOCP'
#include <stdio.h>
int main()
{
    printf("%d\n", (int)sizeof(long long));
    return(0);
}
EOCP
	set try
	if eval $compile_ok; then
		longlongsize=`$run ./try`
		echo "Your long longs are $longlongsize bytes long."
	else
		dflt='8'
		echo " "
		echo "(I can't seem to compile the test program.  Guessing...)"
		rp="What is the size of a long long (in bytes)?"
		. ./myread
		longlongsize="$ans"
	fi
	if $test "X$longsize" = "X$longlongsize"; then
		echo "(That isn't any different from an ordinary long.)"
	fi	
	;;
esac
$rm -f try.* try

d5035 1
d5106 5
a5110 3
: see if inttypes.h is available
: we want a real compile instead of Inhdr because some systems
: have an inttypes.h which includes non-existent headers
d5112 15
a5126 4
$cat >try.c <<EOCP
#include <inttypes.h>
int main() {
	static int32_t foo32 = 0x12345678;
d5129 35
a5165 1
	echo "<inttypes.h> found." >&4
d5167 1
a5168 1
	echo "<inttypes.h> NOT found." >&4
d5170 1
d5172 56
a5227 2
$rm -f try.c try
set i_inttypes
d5486 15
d5502 4
a5505 7
echo "Checking for GNU C Library..." >&4
cat >try.c <<'EOCP'
/* Find out version of GNU C library.  __GLIBC__ and __GLIBC_MINOR__
   alone are insufficient to distinguish different versions, such as
   2.0.6 and 2.0.7.  The function gnu_get_libc_version() appeared in
   libc version 2.1.0.      A. Dougherty,  June 3, 2002.
*/
d5507 5
a5511 1
int main(void)
d5513 2
a5514 15
#ifdef __GLIBC__
#   ifdef __GLIBC_MINOR__
#       if __GLIBC__ >= 2 && __GLIBC_MINOR__ >= 1
#           include <gnu/libc-version.h>
	    printf("%s\n",  gnu_get_libc_version());
#       else
	    printf("%d.%d\n",  __GLIBC__, __GLIBC_MINOR__);
#       endif
#   else
	printf("%d\n",  __GLIBC__);
#   endif
    return 0;
#else
    return 1;
#endif
d5517 19
d5537 1
a5537 1
if eval $compile_ok && $run ./try > glibc.ver; then
d5539 1
a5539 2
	gnulibc_version=`$cat glibc.ver`
	echo "You are using the GNU C Library version $gnulibc_version"
d5542 1
a5542 2
	gnulibc_version=''
	echo "You are not using the GNU C Library"
d5544 2
a5545 2
$rm -f try try.* glibc.ver
set d_gnulibc
d5548 19
a5566 6
: see if nm is to be used to determine whether a symbol is defined or not
case "$usenm" in
'')
	dflt=''
	case "$d_gnulibc" in
	"$define")
d5568 10
a5577 23
		echo "nm probably won't work on the GNU C Library." >&4
		dflt=n
		;;
	esac
	case "$dflt" in
	'') 
		if $test "$osname" = aix -a ! -f /lib/syscalls.exp; then
			echo " "
			echo "Whoops!  This is an AIX system without /lib/syscalls.exp!" >&4
			echo "'nm' won't be sufficient on this sytem." >&4
			dflt=n
		fi
		;;
	esac
	case "$dflt" in
	'') dflt=`$egrep 'inlibc|csym' $rsrc/Configure | wc -l 2>/dev/null`
		if $test $dflt -gt 20; then
			dflt=y
		else
			dflt=n
		fi
		;;
	esac
d5579 20
d5600 2
a5601 4
	case "$usenm" in
	true|$define) dflt=y;;
	*) dflt=n;;
	esac
d5604 10
a5613 14
$cat <<EOM

I can use $nm to extract the symbols from your C libraries. This
is a time consuming task which may generate huge output on the disk (up
to 3 megabytes) but that should make the symbols extraction faster. The
alternative is to skip the 'nm' extraction part and to compile a small
test program instead to determine whether each symbol is present. If
you have a fast C compiler and/or if your 'nm' output cannot be parsed,
this may be the best solution.

You probably shouldn't let me use 'nm' if you are using the GNU C Library.

EOM
rp="Shall I use $nm to extract C symbols from the libraries?"
d5615 24
a5638 3
case "$ans" in
[Nn]*) usenm=false;;
*) usenm=true;;
d5640 22
a5661 4

runnm=$usenm
case "$reuseval" in
true) runnm=false;;
d5663 15
a5677 24

: nm options which may be necessary
case "$nm_opt" in
'') if $test -f /mach_boot; then
		nm_opt=''	# Mach
	elif $test -d /usr/ccs/lib; then
		nm_opt='-p'	# Solaris (and SunOS?)
	elif $test -f /dgux; then
		nm_opt='-p'	# DG-UX
	elif $test -f /lib64/rld; then
		nm_opt='-p'	# 64-bit Irix
	else
		nm_opt=''
	fi;;
esac

: nm options which may be necessary for shared libraries but illegal
: for archive libraries.  Thank you, Linux.
case "$nm_so_opt" in
'')	case "$myuname" in
	*linux*)
		if $nm --help | $grep 'dynamic' > /dev/null 2>&1; then
			nm_so_opt='--dynamic'
		fi
d5682 19
d5702 10
a5711 9
case "$runnm" in
true)
: get list of predefined functions in a handy place
echo " "
case "$libc" in
'') libc=unknown
	case "$libs" in
	*-lc_s*) libc=`./loc libc_s$_a $libc $libpth`
	esac
d5714 16
a5729 1
case "$libs" in
d5731 4
a5734 27
*)  for thislib in $libs; do
	case "$thislib" in
	-lc|-lc_s)
		: Handle C library specially below.
		;;
	-l*)
		thislib=`echo $thislib | $sed -e 's/^-l//'`
		if try=`./loc lib$thislib.$so.'*' X $libpth`; $test -f "$try"; then
			:
		elif try=`./loc lib$thislib.$so X $libpth`; $test -f "$try"; then
			:
		elif try=`./loc lib$thislib$_a X $libpth`; $test -f "$try"; then
			:
		elif try=`./loc $thislib$_a X $libpth`; $test -f "$try"; then
			:
		elif try=`./loc lib$thislib X $libpth`; $test -f "$try"; then
			:
		elif try=`./loc $thislib X $libpth`; $test -f "$try"; then
			:
		elif try=`./loc Slib$thislib$_a X $xlibpth`; $test -f "$try"; then
			:
		else
			try=''
		fi
		libnames="$libnames $try"
		;;
	*) libnames="$libnames $thislib" ;;
a5735 1
	done
d5738 18
a5755 23
xxx=normal
case "$libc" in
unknown)
	set /lib/libc.$so
	for xxx in $libpth; do
		$test -r $1 || set $xxx/libc.$so
		: The messy sed command sorts on library version numbers.
		$test -r $1 || \
			set `echo blurfl; echo $xxx/libc.$so.[0-9]* | \
			tr ' ' $trnl | egrep -v '\.[A-Za-z]*$' | $sed -e '
				h
				s/[0-9][0-9]*/0000&/g
				s/0*\([0-9][0-9][0-9][0-9][0-9]\)/\1/g
				G
				s/\n/ /' | \
			 $sort | $sed -e 's/^.* //'`
		eval set \$$#
	done
	$test -r $1 || set /usr/ccs/lib/libc.$so
	$test -r $1 || set /lib/libsys_s$_a
	;;
*)
	set blurfl
d5758 2
a5759 19
if $test -r "$1"; then
	echo "Your (shared) C library seems to be in $1."
	libc="$1"
elif $test -r /lib/libc && $test -r /lib/clib; then
	echo "Your C library seems to be in both /lib/clib and /lib/libc."
	xxx=apollo
	libc='/lib/clib /lib/libc'
	if $test -r /lib/syslib; then
		echo "(Your math library is in /lib/syslib.)"
		libc="$libc /lib/syslib"
	fi
elif $test -r "$libc" || (test -h "$libc") >/dev/null 2>&1; then
	echo "Your C library seems to be in $libc, as you said before."
elif $test -r $incpath/usr/lib/libc$_a; then
	libc=$incpath/usr/lib/libc$_a;
	echo "Your C library seems to be in $libc.  That's fine."
elif $test -r /lib/libc$_a; then
	libc=/lib/libc$_a;
	echo "Your C library seems to be in $libc.  You're normal."
d5761 1
a5761 19
	if tans=`./loc libc$_a blurfl/dyick $libpth`; $test -r "$tans"; then
		:
	elif tans=`./loc libc blurfl/dyick $libpth`; $test -r "$tans"; then
		libnames="$libnames "`./loc clib blurfl/dyick $libpth`
	elif tans=`./loc clib blurfl/dyick $libpth`; $test -r "$tans"; then
		:
	elif tans=`./loc Slibc$_a blurfl/dyick $xlibpth`; $test -r "$tans"; then
		:
	elif tans=`./loc Mlibc$_a blurfl/dyick $xlibpth`; $test -r "$tans"; then
		:
	else
		tans=`./loc Llibc$_a blurfl/dyick $xlibpth`
	fi
	if $test -r "$tans"; then
		echo "Your C library seems to be in $tans, of all places."
		libc=$tans
	else
		libc='blurfl'
	fi
a5762 3
if $test $xxx = apollo -o -r "$libc" || (test -h "$libc") >/dev/null 2>&1; then
	dflt="$libc"
	cat <<EOM
d5764 7
a5770 2
If the guess above is wrong (which it might be if you're using a strange
compiler, or your machine supports multiple models), you can override it here.
d5773 4
d5778 1
a5778 4
	dflt=''
	echo $libpth | $tr ' ' $trnl | $sort | $uniq > libpath
	cat >&4 <<EOM
I can't seem to find your C library.  I've looked in the following places:
d5780 4
a5783 5
EOM
	$sed 's/^/	/' libpath
	cat <<EOM

None of these seems to contain your C library. I need to get its name...
d5786 4
d5791 2
a5792 2
fn=f
rp='Where is your C library?'
d5794 28
a5821 1
libc="$ans"
d5823 1
d5825 9
a5833 80
echo $libc $libnames | $tr ' ' $trnl | $sort | $uniq > libnames
set X `cat libnames`
shift
xxx=files
case $# in 1) xxx=file; esac
echo "Extracting names from the following $xxx for later perusal:" >&4
echo " "
$sed 's/^/	/' libnames >&4
echo " "
$echo $n "This may take a while...$c" >&4

for file in $*; do
	case $file in
	*$so*) $nm $nm_so_opt $nm_opt $file 2>/dev/null;;
	*) $nm $nm_opt $file 2>/dev/null;;
	esac
done >libc.tmp

$echo $n ".$c"
$grep fprintf libc.tmp > libc.ptf
xscan='eval "<libc.ptf $com >libc.list"; $echo $n ".$c" >&4'
xrun='eval "<libc.tmp $com >libc.list"; echo "done." >&4'
xxx='[ADTSIW]'
if com="$sed -n -e 's/__IO//' -e 's/^.* $xxx  *_[_.]*//p' -e 's/^.* $xxx  *//p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e 's/^__*//' -e 's/^\([a-zA-Z_0-9$]*\).*xtern.*/\1/p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e '/|UNDEF/d' -e '/FUNC..GL/s/^.*|__*//p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e 's/^.* D __*//p' -e 's/^.* D //p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e 's/^_//' -e 's/^\([a-zA-Z_0-9]*\).*xtern.*text.*/\1/p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e 's/^.*|FUNC |GLOB .*|//p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$grep '|' | $sed -n -e '/|COMMON/d' -e '/|DATA/d' \
				-e '/ file/d' -e 's/^\([^ 	]*\).*/\1/p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e 's/^.*|FUNC |GLOB .*|//p' -e 's/^.*|FUNC |WEAK .*|//p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e 's/^__//' -e '/|Undef/d' -e '/|Proc/s/ .*//p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e 's/^.*|Proc .*|Text *| *//p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e '/Def. Text/s/.* \([^ ]*\)\$/\1/p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e 's/^[-0-9a-f ]*_\(.*\)=.*/\1/p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e 's/.*\.text n\ \ \ \.//p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="sed -n -e 's/^__.*//' -e 's/[       ]*D[    ]*[0-9]*.*//p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
d5835 12
a5846 48
	$nm -p $* 2>/dev/null >libc.tmp
	$grep fprintf libc.tmp > libc.ptf
	if com="$sed -n -e 's/^.* [ADTSIW]  *_[_.]*//p' -e 's/^.* [ADTSIW] //p'";\
		eval $xscan; $contains '^fprintf$' libc.list >/dev/null 2>&1
	then
		nm_opt='-p'
		eval $xrun
	else
		echo " "
		echo "$nm didn't seem to work right. Trying $ar instead..." >&4
		com=''
		if $ar t $libc > libc.tmp && $contains '^fprintf$' libc.tmp >/dev/null 2>&1; then
			for thisname in $libnames $libc; do
				$ar t $thisname >>libc.tmp
			done
			$sed -e "s/\\$_o\$//" < libc.tmp > libc.list
			echo "Ok." >&4
		elif test "X$osname" = "Xos2" && $ar tv $libc > libc.tmp; then
			# Repeat libc to extract forwarders to DLL entries too
			for thisname in $libnames $libc; do
				$ar tv $thisname >>libc.tmp
				# Revision 50 of EMX has bug in $ar.
				# it will not extract forwarders to DLL entries
				# Use emximp which will extract exactly them.
				emximp -o tmp.imp $thisname \
				    2>/dev/null && \
				    $sed -e 's/^\([_a-zA-Z0-9]*\) .*$/\1/p' \
				    < tmp.imp >>libc.tmp
				$rm tmp.imp
			done
			$sed -e "s/\\$_o\$//" -e 's/^ \+//' < libc.tmp > libc.list
			echo "Ok." >&4
		else
			echo "$ar didn't seem to work right." >&4
			echo "Maybe this is a Cray...trying bld instead..." >&4
			if bld t $libc | $sed -e 's/.*\///' -e "s/\\$_o:.*\$//" > libc.list
			then
				for thisname in $libnames; do
					bld t $libnames | \
					$sed -e 's/.*\///' -e "s/\\$_o:.*\$//" >>libc.list
					$ar t $thisname >>libc.tmp
				done
				echo "Ok." >&4
			else
				echo "That didn't work either.  Giving up." >&4
				exit 1
			fi
		fi
d5849 5
a5853 7
nm_extract="$com"
if $test -f /lib/syscalls.exp; then
	echo " "
	echo "Also extracting names from /lib/syscalls.exp for good ole AIX..." >&4
	$sed -n 's/^\([^ 	]*\)[ 	]*syscall[0-9]*[ 	]*$/\1/p' /lib/syscalls.exp >>libc.list
fi
;;
a5854 1
$rm -f libnames libpath
d5856 1
a5856 35
: is a C symbol defined?
csym='tlook=$1;
case "$3" in
-v) tf=libc.tmp; tc=""; tdc="";;
-a) tf=libc.tmp; tc="[0]"; tdc="[]";;
*) tlook="^$1\$"; tf=libc.list; tc="()"; tdc="()";;
esac;
tx=yes;
case "$reuseval-$4" in
true-) ;;
true-*) tx=no; eval "tval=\$$4"; case "$tval" in "") tx=yes;; esac;;
esac;
case "$tx" in
yes)
	case "$runnm" in
	true)
		if $contains $tlook $tf >/dev/null 2>&1;
		then tval=true;
		else tval=false;
		fi;;
	*)
		echo "int main() { extern short $1$tdc; printf(\"%hd\", $1$tc); }" > t.c;
		if $cc -o t $optimize $ccflags $ldflags t.c $libs >/dev/null 2>&1;
		then tval=true;
		else tval=false;
		fi;
		$rm -f t t.c;;
	esac;;
*)
	case "$tval" in
	$define) tval=true;;
	*) tval=false;;
	esac;;
esac;
eval "$2=$tval"'
d5858 8
a5865 20
: define an is-in-libc? function
inlibc='echo " "; td=$define; tu=$undef;
sym=$1; var=$2; eval "was=\$$2";
tx=yes;
case "$reuseval$was" in
true) ;;
true*) tx=no;;
esac;
case "$tx" in
yes)
	set $sym tres -f;
	eval $csym;
	case "$tres" in
	true)
		echo "$sym() found." >&4;
		case "$was" in $undef) . ./whoa; esac; eval "$var=\$td";;
	*)
		echo "$sym() NOT found." >&4;
		case "$was" in $define) . ./whoa; esac; eval "$var=\$tu";;
	esac;;
d5867 11
a5877 5
	case "$was" in
	$define) echo "$sym() found." >&4;;
	*) echo "$sym() NOT found." >&4;;
	esac;;
esac'
d5879 8
a5886 28
: see if sqrtl exists
set sqrtl d_sqrtl
eval $inlibc

: check for length of double
echo " "
case "$doublesize" in
'')
	echo "Checking to see how big your double precision numbers are..." >&4
	$cat >try.c <<'EOCP'
#include <stdio.h>
int main()
{
    printf("%d\n", (int)sizeof(double));
    exit(0);
}
EOCP
	set try
	if eval $compile_ok; then
		doublesize=`$run ./try`
		echo "Your double is $doublesize bytes long."
	else
		dflt='8'
		echo "(I can't seem to compile the test program.  Guessing...)"
		rp="What is the size of a double precision number (in bytes)?"
		. ./myread
		doublesize="$ans"
	fi
d5888 1
d5890 4
a5893 1
$rm -f try.c try
d5895 8
a5902 45
: check for long doubles
echo " "
echo "Checking to see if you have long double..." >&4
echo 'int main() { long double x = 7.0; }' > try.c
set try
if eval $compile; then
	val="$define"
	echo "You have long double."
else
	val="$undef"
	echo "You do not have long double."
fi
$rm try.*
set d_longdbl
eval $setvar

: check for length of long double
case "${d_longdbl}${longdblsize}" in
$define)
	echo " "
	echo "Checking to see how big your long doubles are..." >&4
	$cat >try.c <<'EOCP'
#include <stdio.h>
int main()
{
	printf("%d\n", sizeof(long double));
}
EOCP
	set try
	set try
	if eval $compile; then
		longdblsize=`$run ./try`
		echo "Your long doubles are $longdblsize bytes long."
	else
		dflt='8'
		echo " "
		echo "(I can't seem to compile the test program.  Guessing...)" >&4
		rp="What is the size of a long double (in bytes)?"
		. ./myread
		longdblsize="$ans"
	fi
	if $test "X$doublesize" = "X$longdblsize"; then
		echo "(That isn't any different from an ordinary double.)"
	fi	
	;;
d5904 2
a5905 1
$rm -f try.* try
d5907 2
a5908 1
echo " "
d5910 12
a5921 1
if $test X"$d_longdbl" = X"$define"; then
d5923 5
a5927 1
echo "Checking how to print long doubles..." >&4
d5929 15
a5943 21
if $test X"$sPRIfldbl" = X -a X"$doublesize" = X"$longdblsize"; then
	$cat >try.c <<'EOCP'
#include <sys/types.h>
#include <stdio.h>
int main() {
  double d = 123.456;
  printf("%.3f\n", d);
}
EOCP
	set try
	if eval $compile; then
		yyy=`$run ./try`
		case "$yyy" in
		123.456)
			sPRIfldbl='"f"'; sPRIgldbl='"g"'; sPRIeldbl='"e"';
                	sPRIFUldbl='"F"'; sPRIGUldbl='"G"'; sPRIEUldbl='"E"';
			echo "We will use %f."
			;;
		esac
	fi
fi
d5945 4
a5948 21
if $test X"$sPRIfldbl" = X; then
	$cat >try.c <<'EOCP'
#include <sys/types.h>
#include <stdio.h>
int main() {
  long double d = 123.456;
  printf("%.3Lf\n", d);
}
EOCP
	set try
	if eval $compile; then
		yyy=`$run ./try`
		case "$yyy" in
		123.456)
			sPRIfldbl='"Lf"'; sPRIgldbl='"Lg"'; sPRIeldbl='"Le"';
                	sPRIFUldbl='"LF"'; sPRIGUldbl='"LG"'; sPRIEUldbl='"LE"';
			echo "We will use %Lf."
			;;
		esac
	fi
fi
d5950 10
a5959 20
if $test X"$sPRIfldbl" = X; then
	$cat >try.c <<'EOCP'
#include <sys/types.h>
#include <stdio.h>
int main() {
  long double d = 123.456;
  printf("%.3llf\n", d);
}
EOCP
	set try
	if eval $compile; then
		yyy=`$run ./try`
		case "$yyy" in
		123.456)
			sPRIfldbl='"llf"'; sPRIgldbl='"llg"'; sPRIeldbl='"lle"';
                	sPRIFUldbl='"llF"'; sPRIGUldbl='"llG"'; sPRIEUldbl='"llE"';
			echo "We will use %llf."
			;;
		esac
	fi
d5961 3
a5963 25

if $test X"$sPRIfldbl" = X; then
	$cat >try.c <<'EOCP'
#include <sys/types.h>
#include <stdio.h>
int main() {
  long double d = 123.456;
  printf("%.3lf\n", d);
}
EOCP
	set try
	if eval $compile; then
		yyy=`$run ./try`
		case "$yyy" in
		123.456)
			sPRIfldbl='"lf"'; sPRIgldbl='"lg"'; sPRIeldbl='"le"';
                	sPRIFUldbl='"lF"'; sPRIGUldbl='"lG"'; sPRIEUldbl='"lE"';
			echo "We will use %lf."
			;;
		esac
	fi
fi

if $test X"$sPRIfldbl" = X; then
	echo "Cannot figure out how to print long doubles." >&4
d5965 1
a5965 1
	sSCNfldbl=$sPRIfldbl	# expect consistency
d5968 2
a5969 1
$rm -f try try.*
d5971 2
a5972 1
fi # d_longdbl
d5974 3
a5976 10
case "$sPRIfldbl" in
'')	d_PRIfldbl="$undef"; d_PRIgldbl="$undef"; d_PRIeldbl="$undef"; 
	d_PRIFUldbl="$undef"; d_PRIGUldbl="$undef"; d_PRIEUldbl="$undef"; 
	d_SCNfldbl="$undef";
	;;
*)	d_PRIfldbl="$define"; d_PRIgldbl="$define"; d_PRIeldbl="$define"; 
	d_PRIFUldbl="$define"; d_PRIGUldbl="$define"; d_PRIEUldbl="$define"; 
	d_SCNfldbl="$define";
	;;
esac
d5978 1
a5978 3
: see if modfl exists
set modfl d_modfl
eval $inlibc
d5980 14
a5993 1
d_modfl_pow32_bug="$undef"
a5994 4
case "$d_longdbl$d_modfl" in
$define$define)
	$cat <<EOM
Checking to see whether your modfl() is okay for large values...
d5996 13
a6008 28
$cat >try.c <<EOCP
#include <math.h> 
#include <stdio.h>
int main() {
    long double nv = 4294967303.15;
    long double v, w;
    v = modfl(nv, &w);         
#ifdef __GLIBC__
    printf("glibc");
#endif
    printf(" %"$sPRIfldbl" %"$sPRIfldbl" %"$sPRIfldbl"\n", nv, v, w);
    return 0;
}
EOCP
	case "$osname:$gccversion" in
	aix:)	saveccflags="$ccflags"
		ccflags="$ccflags -qlongdouble" ;; # to avoid core dump
	esac
	set try
	if eval $compile; then
		foo=`$run ./try`
		case "$foo" in
		*" 4294967303.150000 1.150000 4294967302.000000")
			echo >&4 "Your modfl() is broken for large values."
			d_modfl_pow32_bug="$define"
			case "$foo" in
			glibc)	echo >&4 "You should upgrade your glibc to at least 2.2.2 to get a fixed modfl()."
			;;
d6011 15
a6025 5
		*" 4294967303.150000 0.150000 4294967303.000000")
			echo >&4 "Your modfl() seems okay for large values."
			;;
		*)	echo >&4 "I don't understand your modfl() at all."
			d_modfl="$undef"
d6028 6
a6033 4
		$rm -f try.* try core core.try.*
	else
		echo "I cannot figure out whether your modfl() is okay, assuming it isn't."
		d_modfl="$undef"
d6035 7
a6041 5
	case "$osname:$gccversion" in
	aix:)	ccflags="$saveccflags" ;; # restore
	esac
	;;
esac
d6043 1
a6043 3
case "$ccflags" in
*-DUSE_LONG_DOUBLE*|*-DUSE_MORE_BITS*) uselongdouble="$define" ;;
esac
d6045 16
a6060 5
case "$uselongdouble" in
$define|true|[yY]*)	dflt='y';;
*) dflt='n';;
esac
cat <<EOM
a6061 4
Perl can be built to take advantage of long doubles which
(if available) may give more accuracy and range for floating point numbers.

If this doesn't make any sense to you, just accept the default '$dflt'.
d6063 11
a6073 5
rp='Try to use long doubles if available?'
. ./myread
case "$ans" in
y|Y) 	val="$define"	;;
*)      val="$undef"	;;
d6075 22
a6096 1
set uselongdouble
d6099 23
a6121 3
case "$uselongdouble" in
true|[yY]*) uselongdouble="$define" ;;
esac
d6123 16
a6138 8
case "$uselongdouble" in
$define)
: Look for a hint-file generated 'call-back-unit'.  If the
: user has specified that long doubles should be used,
: we may need to set or change some other defaults.
	if $test -f uselongdouble.cbu; then
		echo "Your platform has some specific hints for long doubles, using them..."
		. ./uselongdouble.cbu
d6140 36
a6175 3
		$cat <<EOM
(Your platform doesn't have any specific hints for long doubles.)
EOM
a6176 1
	;;
d6178 13
a6190 14

message=X
case "$uselongdouble:$d_sqrtl:$d_modfl" in
$define:$define:$define)
	: You have both
	;;
$define:$define:$undef)
	message="I could not find modfl"
	;;
$define:$undef:$define)
	message="I could not find sqrtl"
	;;
$define:$undef:$undef)
	message="I found neither sqrtl nor modfl"
d6193 1
d6195 1
a6195 14
if $test "$message" != X; then
	$cat <<EOM >&4

*** You requested the use of long doubles but you do not seem to have
*** the mathematic functions for long doubles.
*** ($message)
*** I'm disabling the use of long doubles.

EOM

	uselongdouble=$undef
fi

: determine the architecture name
d6197 24
a6220 6
if xxx=`./loc arch blurfl $pth`; $test -f "$xxx"; then
	tarch=`arch`"-$osname"
elif xxx=`./loc uname blurfl $pth`; $test -f "$xxx" ; then
	if uname -m > tmparch 2>&1 ; then
		tarch=`$sed -e 's/ *$//' -e 's/ /_/g' \
			-e 's/$/'"-$osname/" tmparch`
d6222 5
a6226 1
		tarch="$osname"
a6227 33
	$rm -f tmparch
else
	tarch="$osname"
fi
case "$myarchname" in
''|"$tarch") ;;
*)
	echo "(Your architecture name used to be $myarchname.)"
	archname=''
	;;
esac
case "$targetarch" in
'') ;;
*)  archname=`echo $targetarch|sed 's,^[^-]*-,,'` ;;
esac
myarchname="$tarch"
case "$archname" in
'') dflt="$tarch";;
*) dflt="$archname";;
esac
rp='What is your architecture name'
. ./myread
archname="$ans"
case "$usethreads" in
$define)
	echo "Threads selected." >&4
	case "$archname" in
        *-thread*) echo "...and architecture name already has -thread." >&4
                ;;
        *)      archname="$archname-thread"
                echo "...setting architecture name to $archname." >&4
                ;;
        esac
d6230 16
a6245 21
case "$usemultiplicity" in
$define)
	echo "Multiplicity selected." >&4
	case "$archname" in
        *-multi*) echo "...and architecture name already has -multi." >&4
                ;;
        *)      archname="$archname-multi"
                echo "...setting architecture name to $archname." >&4
                ;;
        esac
	;;
esac
case "$use64bitint$use64bitall" in
*"$define"*)
	case "$archname64" in
	'')
		echo "This architecture is naturally 64-bit, not changing architecture name." >&4
		;;
	*)
		case "$use64bitint" in
		"$define") echo "64 bit integers selected." >&4 ;;
d6247 6
a6252 10
		case "$use64bitall" in
		"$define") echo "Maximal 64 bitness selected." >&4 ;;
		esac
		case "$archname" in
	        *-$archname64*) echo "...and architecture name already has $archname64." >&4
	                ;;
	        *)      archname="$archname-$archname64"
	                echo "...setting architecture name to $archname." >&4
	                ;;
	        esac
d6255 1
d6257 10
a6266 16
case "$uselongdouble" in
$define)
	echo "Long doubles selected." >&4
	case "$longdblsize" in
	$doublesize)
		echo "...but long doubles are equal to doubles, not changing architecture name." >&4
		;;
	*)
		case "$archname" in
	        *-ld*) echo "...and architecture name already has -ld." >&4
	                ;;
	        *)      archname="$archname-ld"
	                echo "...setting architecture name to $archname." >&4
        	        ;;
	        esac
		;;
d6270 19
a6288 3
case "$useperlio" in
$define)
	echo "Perlio selected." >&4
d6291 4
a6294 8
	echo "Perlio not selected, using stdio." >&4
	case "$archname" in
        *-stdio*) echo "...and architecture name already has -stdio." >&4
                ;;
        *)      archname="$archname-stdio"
                echo "...setting architecture name to $archname." >&4
                ;;
        esac
d6298 21
a6318 2
: determine root of directory hierarchy where package will be installed.
case "$prefix" in
d6320 5
a6324 1
	dflt=`./loc . /usr/local /usr/local /local /opt /usr`
d6326 10
a6335 2
*)
	dflt="$prefix"
d6338 2
d6342 11
a6352 7
By default, $package will be installed in $dflt/bin, manual pages
under $dflt/man, etc..., i.e. with $dflt as prefix for all
installation directories. Typically this is something like /usr/local.
If you wish to have binaries under /usr/bin but other parts of the
installation under /usr/local, that's ok: you will be prompted
separately for each of the installation directories, the prefix being
only used to set the defaults.
d6355 7
a6361 2
fn=d~
rp='Installation prefix to use?'
d6363 3
a6365 2
oldprefix=''
case "$prefix" in
d6367 1
a6367 2
*)
	case "$ans" in
d6369 1
a6369 1
	*) oldprefix="$prefix";;
d6373 2
a6374 2
prefix="$ans"
prefixexp="$ansexp"
d6376 13
a6388 3
case "$afsroot" in
'')	afsroot=/afs ;;
*)	afsroot=$afsroot ;;
d6390 20
d6411 9
a6419 10
: is AFS running?
echo " "
case "$afs" in
$define|true)	afs=true ;;
$undef|false)	afs=false ;;
*)	if test -d $afsroot; then
		afs=true
	else
		afs=false
	fi
d6422 16
a6437 2
if test $afs = "true"; then
	echo "AFS may be running... I'll be extra cautious then..." >&4
d6439 1
a6439 1
	echo "AFS does not seem to be running..." >&4
a6441 2
: determine installation prefix for where package is to be installed.
if $afs; then 
d6444 5
a6448 3
Since you are running AFS, I need to distinguish the directory in which
files will reside from the directory in which they are installed (and from
which they are presumably copied to the former directory by occult means).
d6450 3
a6452 7
EOM
	case "$installprefix" in
	'') dflt=`echo $prefix | sed 's#^/afs/#/afs/.#'`;;
	*) dflt="$installprefix";;
	esac
else
$cat <<EOM
d6454 3
a6456 4
In some special cases, particularly when building $package for distribution,
it is convenient to distinguish between the directory in which files should 
be installed from the directory ($prefix) in which they 
will eventually reside.  For most users, these two directories are the same.
d6459 7
a6465 3
	case "$installprefix" in
	'') dflt=$prefix ;;
	*) dflt=$installprefix;;
d6467 1
a6467 64
fi
fn=d~
rp='What installation prefix should I use for installing files?'
. ./getfile
installprefix="$ans"
installprefixexp="$ansexp"

: set the prefixit variable, to compute a suitable default value
prefixit='case "$3" in
""|none)
	case "$oldprefix" in
	"") eval "$1=\"\$$2\"";;
	*)
		case "$3" in
		"") eval "$1=";;
		none)
			eval "tp=\"\$$2\"";
			case "$tp" in
			""|" ") eval "$1=\"\$$2\"";;
			*) eval "$1=";;
			esac;;
		esac;;
	esac;;
*)
	eval "tp=\"$oldprefix-\$$2-\""; eval "tp=\"$tp\"";
	case "$tp" in
	--|/*--|\~*--) eval "$1=\"$prefix/$3\"";;
	/*-$oldprefix/*|\~*-$oldprefix/*)
		eval "$1=\`echo \$$2 | sed \"s,^$oldprefix,$prefix,\"\`";;
	*) eval "$1=\"\$$2\"";;
	esac;;
esac'

: get the patchlevel
echo " "
echo "Getting the current patchlevel..." >&4
if $test -r $rsrc/patchlevel.h;then
	revision=`awk '/define[ 	]+PERL_REVISION/ {print $3}' $rsrc/patchlevel.h`
	patchlevel=`awk '/define[ 	]+PERL_VERSION/ {print $3}' $rsrc/patchlevel.h`
	subversion=`awk '/define[ 	]+PERL_SUBVERSION/ {print $3}' $rsrc/patchlevel.h`
	api_revision=`awk '/define[ 	]+PERL_API_REVISION/ {print $3}' $rsrc/patchlevel.h`
	api_version=`awk '/define[ 	]+PERL_API_VERSION/ {print $3}' $rsrc/patchlevel.h`
	api_subversion=`awk '/define[ 	]+PERL_API_SUBVERSION/ {print $3}' $rsrc/patchlevel.h`
       perl_patchlevel=`grep ',"DEVEL[0-9][0-9]*"' $rsrc/patchlevel.h|sed 's/[^0-9]//g'`
else
	revision=0
	patchlevel=0
	subversion=0
	api_revision=0
	api_version=0
	api_subversion=0
	perl_patchlevel=0
	$echo "(You do not have patchlevel.h.  Eek.)"
fi
if $test -r $rsrc/.patch ; then  
	if $test "`cat $rsrc/.patch`" -gt "$perl_patchlevel" ; then
		perl_patchlevel=`cat $rsrc/.patch`
	fi
fi
: Define a handy string here to avoid duplication in myconfig.SH and configpm.
version_patchlevel_string="version $patchlevel subversion $subversion"
case "$perl_patchlevel" in
0|'') ;;
*) version_patchlevel_string="$version_patchlevel_string patch $perl_patchlevel" ;;
d6469 22
a6490 10

$echo "(You have $package $version_patchlevel_string.)"

case "$osname" in
dos|vms)
	: XXX Should be a Configure test for double-dots in filenames.
	version=`echo $revision $patchlevel $subversion | \
		 $awk '{ printf "%d_%d_%d\n", $1, $2, $3 }'`
	api_versionstring=`echo $api_revision $api_version $api_subversion | \
		 $awk '{ printf "%d_%d_%d\n", $1, $2, $3 }'`
d6492 3
a6494 5
*)
	version=`echo $revision $patchlevel $subversion | \
		 $awk '{ printf "%d.%d.%d\n", $1, $2, $3 }'`
	api_versionstring=`echo $api_revision $api_version $api_subversion | \
		 $awk '{ printf "%d.%d.%d\n", $1, $2, $3 }'`
a6496 5
: Special case the 5.005_xx maintenance series, which used 5.005
: without any subversion label as a subdirectory in $sitelib
if test "${api_revision}${api_version}${api_subversion}" = "550"; then
	api_versionstring='5.005'
fi
d6498 18
a6515 7
: determine installation style
: For now, try to deduce it from prefix unless it is already set.
: Reproduce behavior of 5.005 and earlier, maybe drop that in 5.7.
case "$installstyle" in
'')	case "$prefix" in
		*perl*) dflt='lib';;
		*) dflt='lib/perl5' ;;
d6517 5
a6522 1
*)	dflt="$installstyle" ;;
d6524 1
a6524 26
: Probably not worth prompting for this since we prompt for all
: the directories individually, and the prompt would be too long and
: confusing anyway.
installstyle=$dflt

: determine where private library files go
: Usual default is /usr/local/lib/perl5/$version.
: Also allow things like /opt/perl/lib/$version, since 
: /opt/perl/lib/perl5... would be redundant.
: The default "style" setting is made in installstyle.U
case "$installstyle" in
*lib/perl5*) set dflt privlib lib/$package/$version ;;
*)	 set dflt privlib lib/$version ;;
esac
eval $prefixit
$cat <<EOM

There are some auxiliary files for $package that need to be put into a
private library directory that is accessible by everyone.

EOM
fn=d~+
rp='Pathname where the private library files will reside?'
. ./getfile
privlib="$ans"
privlibexp="$ansexp"
d6527 1
a6527 1
	installprivlib=`echo $privlibexp | sed "s#^$prefix#$installprefix#"`
d6529 1
a6529 1
	installprivlib="$privlibexp"
d6532 21
a6552 16
: set the prefixup variable, to restore leading tilda escape
prefixup='case "$prefixexp" in
"$prefix") ;;
*) eval "$1=\`echo \$$1 | sed \"s,^$prefixexp,$prefix,\"\`";;
esac'

: determine where public architecture dependent libraries go
set archlib archlib
eval $prefixit
: privlib default is /usr/local/lib/$package/$version
: archlib default is /usr/local/lib/$package/$version/$archname
: privlib may have an optional trailing /share.
tdflt=`echo $privlib | $sed 's,/share$,,'`
tdflt=$tdflt/$archname
case "$archlib" in
'')	dflt=$tdflt
a6553 2
*)	dflt="$archlib"
    ;;
a6554 18
$cat <<EOM

$spackage contains architecture-dependent library files.  If you are
sharing libraries in a heterogeneous environment, you might store
these files in a separate location.  Otherwise, you can just include
them with the rest of the public library files.

EOM
fn=d+~
rp='Where do you want to put the public architecture-dependent libraries?'
. ./getfile
archlib="$ans"
archlibexp="$ansexp"
if $test X"$archlib" = X"$privlib"; then
	d_archlib="$undef"
else
	d_archlib="$define"
fi
d6557 1
a6557 1
	installarchlib=`echo $archlibexp | sed "s#^$prefix#$installprefix#"`
d6559 1
a6559 1
	installarchlib="$archlibexp"
d6562 1
a6562 1
: see if setuid scripts can be secure
d6565 16
a6580 6
Some kernels have a bug that prevents setuid #! scripts from being
secure.  Some sites have disabled setuid #! scripts because of this.

First let's decide if your kernel supports secure setuid #! scripts.
(If setuid #! scripts would be secure but have been disabled anyway,
don't say that they are secure if asked.)
d6584 12
a6595 14
val="$undef"
if $test -d /dev/fd; then
	echo "#!$ls" >reflect
	chmod +x,u+s reflect
	./reflect >flect 2>&1
	if $contains "/dev/fd" flect >/dev/null; then
		echo "Congratulations, your kernel has secure setuid scripts!" >&4
		val="$define"
	else
		$cat <<EOM
If you are not sure if they are secure, I can check but I'll need a
username and password different from the one you are using right now.
If you don't have such a username or don't want me to test, simply
enter 'none'.
d6597 14
a6610 40
EOM
		rp='Other username to test security of setuid scripts with?'
		dflt='none'
		. ./myread
		case "$ans" in
		n|none)
			case "$d_suidsafe" in
			'')	echo "I'll assume setuid scripts are *not* secure." >&4
				dflt=n;;
			"$undef")
				echo "Well, the $hint value is *not* secure." >&4
				dflt=n;;
			*)	echo "Well, the $hint value *is* secure." >&4
				dflt=y;;
			esac
			;;
		*)
			$rm -f reflect flect
			echo "#!$ls" >reflect
			chmod +x,u+s reflect
			echo >flect
			chmod a+w flect
			echo '"su" will (probably) prompt you for '"$ans's password."
			su $ans -c './reflect >flect'
			if $contains "/dev/fd" flect >/dev/null; then
				echo "Okay, it looks like setuid scripts are secure." >&4
				dflt=y
			else
				echo "I don't think setuid scripts are secure." >&4
				dflt=n
			fi
			;;
		esac
		rp='Does your kernel have *secure* setuid scripts?'
		. ./myread
		case "$ans" in
		[yY]*)	val="$define";;
		*)	val="$undef";;
		esac
	fi
d6612 1
a6612 2
	echo "I don't think setuid scripts are secure (no /dev/fd directory)." >&4
	echo "(That's for file descriptors, not floppy disks.)"
d6615 1
a6615 1
set d_suidsafe
d6617 1
d6619 5
a6623 1
$rm -f reflect flect
d6625 5
a6629 16
: now see if they want to do setuid emulation
echo " "
val="$undef"
case "$d_suidsafe" in
"$define")
	val="$undef"
	echo "No need to emulate SUID scripts since they are secure here." >&4
	;;
*)
	$cat <<EOM
Some systems have disabled setuid scripts, especially systems where
setuid scripts cannot be secure.  On systems where setuid scripts have
been disabled, the setuid/setgid bits on scripts are currently
useless.  It is possible for $package to detect those bits and emulate
setuid/setgid in a secure fashion.  This emulation will only work if
setuid scripts have been disabled in your kernel.
d6631 1
a6631 15
EOM
	case "$d_dosuid" in
	"$define") dflt=y ;;
	*) dflt=n ;;
	esac
	rp="Do you want to do setuid/setgid emulation?"
	. ./myread
	case "$ans" in
	[yY]*)	val="$define";;
	*)	val="$undef";;
	esac
	;;
esac
set d_dosuid
eval $setvar
d6633 2
a6634 3
: see if this is a malloc.h system
set malloc.h i_malloc
eval $inhdr
d6636 1
a6636 87
: see if stdlib is available
set stdlib.h i_stdlib
eval $inhdr

: check for void type
echo " "
echo "Checking to see how well your C compiler groks the void type..." >&4
case "$voidflags" in
'')
	$cat >try.c <<'EOCP'
#if TRY & 1
void sub() {
#else
sub() {
#endif
	extern void moo();	/* function returning void */
	void (*goo)();		/* ptr to func returning void */
#if TRY & 8
	void *hue;		/* generic ptr */
#endif
#if TRY & 2
	void (*foo[10])();
#endif

#if TRY & 4
	if(goo == moo) {
		exit(0);
	}
#endif
	exit(0);
}
int main() { sub(); }
EOCP
	if $cc $ccflags -c -DTRY=$defvoidused try.c >.out 2>&1 ; then
		voidflags=$defvoidused
	echo "Good.  It appears to support void to the level $package wants.">&4
		if $contains warning .out >/dev/null 2>&1; then
			echo "However, you might get some warnings that look like this:"
			$cat .out
		fi
	else
echo "Hmm, your compiler has some difficulty with void. Checking further..." >&4
		if $cc $ccflags -c -DTRY=1 try.c >/dev/null 2>&1; then
			echo "It supports 1..."
			if $cc $ccflags -c -DTRY=3 try.c >/dev/null 2>&1; then
				echo "It also supports 2..."
				if $cc $ccflags -c -DTRY=7 try.c >/dev/null 2>&1; then
					voidflags=7
					echo "And it supports 4 but not 8 definitely."
				else
					echo "It doesn't support 4..."
					if $cc $ccflags -c -DTRY=11 try.c >/dev/null 2>&1; then
						voidflags=11
						echo "But it supports 8."
					else
						voidflags=3
						echo "Neither does it support 8."
					fi
				fi
			else
				echo "It does not support 2..."
				if $cc $ccflags -c -DTRY=13 try.c >/dev/null 2>&1; then
					voidflags=13
					echo "But it supports 4 and 8."
				else
					if $cc $ccflags -c -DTRY=5 try.c >/dev/null 2>&1; then
						voidflags=5
						echo "And it supports 4 but has not heard about 8."
					else
						echo "However it supports 8 but not 4."
					fi
				fi
			fi
		else
			echo "There is no support at all for void."
			voidflags=0
		fi
	fi
esac
case "$voidflags" in
"$defvoidused") ;;
*)	$cat >&4 <<'EOM'
  Support flag bits are:
    1: basic void declarations.
    2: arrays of pointers to functions returning void.
    4: operations between pointers to and addresses of void functions.
    8: generic void pointers.
d6638 1
a6638 4
	dflt="$voidflags";
	rp="Your void support flags add up to what?"
	. ./myread
	voidflags="$ans"
a6640 1
$rm -f try.* .out
d6642 20
a6661 1
: check for length of pointer
d6663 3
a6665 28
case "$ptrsize" in
'')
	echo "Checking to see how big your pointers are..." >&4
	if test "$voidflags" -gt 7; then
		echo '#define VOID_PTR char *' > try.c
	else
		echo '#define VOID_PTR void *' > try.c
	fi
	$cat >>try.c <<'EOCP'
#include <stdio.h>
int main()
{
    printf("%d\n", (int)sizeof(VOID_PTR));
    exit(0);
}
EOCP
	set try
	if eval $compile_ok; then
		ptrsize=`$run ./try`
		echo "Your pointers are $ptrsize bytes long."
	else
		dflt='4'
		echo "(I can't seem to compile the test program.  Guessing...)" >&4
		rp="What is the size of a pointer (in bytes)?"
		. ./myread
		ptrsize="$ans"
	fi
	;;
d6667 8
a6674 5
$rm -f try.c try
case "$use64bitall" in
"$define"|true|[yY]*)
	case "$ptrsize" in
	4)	cat <<EOM >&4
d6676 5
a6680 2
*** You have chosen a maximally 64-bit build, but your pointers
*** are only 4 bytes wide, disabling maximal 64-bitness.
d6682 1
d6684 5
a6688 6
		use64bitall="$undef"
		case "$use64bitint" in
		"$define"|true|[yY]*) ;;
		*)	cat <<EOM >&4

*** Downgrading from maximal 64-bitness to using 64-bit integers.
d6690 4
d6695 13
a6707 5
			use64bitint="$define"
			;;
		esac
		;;
	esac
d6710 35
d6746 23
d6770 15
a6784 9
: determine which malloc to compile in
echo " "
case "$usemymalloc" in
[yY]*|true|$define)	dflt='y' ;;
[nN]*|false|$undef)	dflt='n' ;;
*)	case "$ptrsize" in
	4) dflt='y' ;;
	*) dflt='n' ;;
	esac
d6787 59
a6845 52
rp="Do you wish to attempt to use the malloc that comes with $package?"
. ./myread
usemymalloc="$ans"
case "$ans" in
y*|true)
	usemymalloc='y'
	mallocsrc='malloc.c'
	mallocobj="malloc$_o"
	d_mymalloc="$define"
	case "$libs" in
	*-lmalloc*)
		: Remove malloc from list of libraries to use
		echo "Removing unneeded -lmalloc from library list" >&4
		set `echo X $libs | $sed -e 's/-lmalloc / /' -e 's/-lmalloc$//'`
		shift
		libs="$*"
		echo "libs = $libs" >&4
		;;
	esac
	;;
*)
	usemymalloc='n'
	mallocsrc=''
	mallocobj=''
	d_mymalloc="$undef"
	;;
esac

: compute the return types of malloc and free
echo " "
$cat >malloc.c <<END
#$i_malloc I_MALLOC
#$i_stdlib I_STDLIB
#include <stdio.h>
#include <sys/types.h>
#ifdef I_MALLOC
#include <malloc.h>
#endif
#ifdef I_STDLIB
#include <stdlib.h>
#endif
#ifdef TRY_MALLOC
void *malloc();
#endif
#ifdef TRY_FREE
void free();
#endif
END
case "$malloctype" in
'')
	if $cc $ccflags -c -DTRY_MALLOC malloc.c >/dev/null 2>&1; then
		malloctype='void *'
d6847 1
a6847 1
		malloctype='char *'
d6850 5
d6856 2
a6857 10
echo "Your system wants malloc to return '$malloctype', it would seem." >&4

case "$freetype" in
'')
	if $cc $ccflags -c -DTRY_FREE malloc.c >/dev/null 2>&1; then
		freetype='void'
	else
		freetype='int'
	fi
	;;
a6858 2
echo "Your system uses $freetype free(), it would seem." >&4
$rm -f malloc.[co]
d6861 7
a6867 5
After $package is installed, you may wish to install various
add-on modules and utilities.  Typically, these add-ons will
be installed under $prefix with the rest
of this package.  However, you may wish to install such add-ons
elsewhere under a different prefix.
d6869 3
a6871 3
If you do not wish to put everything under a single prefix, that's
ok.  You will be prompted for the individual locations; this siteprefix
is only used to suggest the defaults.
d6873 5
a6877 9
The default should be fine for most people.

EOM
fn=d~+
rp='Installation prefix to use for add-on modules and utilities?'
: XXX Here might be another good place for an installstyle setting.
case "$siteprefix" in
'') dflt=$prefix ;;
*)  dflt=$siteprefix ;;
d6879 5
a6883 9
. ./getfile
: XXX Prefixit unit does not yet support siteprefix and vendorprefix
oldsiteprefix=''
case "$siteprefix" in
'') ;;
*)	case "$ans" in
	"$prefix") ;;
	*) oldsiteprefix="$prefix";;
	esac
d6886 18
a6903 2
siteprefix="$ans"
siteprefixexp="$ansexp"
d6905 7
a6911 15
: determine where site specific libraries go.
: Usual default is /usr/local/lib/perl5/site_perl/$version
: The default "style" setting is made in installstyle.U
: XXX No longer works with Prefixit stuff.
prog=`echo $package | $sed 's/-*[0-9.]*$//'`
case "$sitelib" in
'') case "$installstyle" in
	*lib/perl5*) dflt=$siteprefix/lib/$package/site_$prog/$version ;;
	*)	 dflt=$siteprefix/lib/site_$prog/$version ;;
	esac
	;;
*)	dflt="$sitelib"
	;;
esac
$cat <<EOM
d6913 1
a6913 4
The installation process will create a directory for
site-specific extensions and modules.  Most users find it convenient
to place all site-specific files in this directory rather than in the
main distribution directory.
d6916 50
a6965 9
fn=d~+
rp='Pathname for the site-specific library files?'
. ./getfile
sitelib="$ans"
sitelibexp="$ansexp"
sitelib_stem=`echo "$sitelibexp" | sed "s,/$version$,,"`
: Change installation prefix, if necessary.
if $test X"$prefix" != X"$installprefix"; then
	installsitelib=`echo $sitelibexp | $sed "s#^$prefix#$installprefix#"`
d6967 3
a6969 1
	installsitelib="$sitelibexp"
d6971 3
d6975 30
a7004 7
: determine where site specific architecture-dependent libraries go.
: sitelib  default is /usr/local/lib/perl5/site_perl/$version
: sitearch default is /usr/local/lib/perl5/site_perl/$version/$archname
: sitelib may have an optional trailing /share.
case "$sitearch" in
'')	dflt=`echo $sitelib | $sed 's,/share$,,'`
	dflt="$dflt/$archname"
d7006 5
a7010 1
*)	dflt="$sitearch"
a7012 20
set sitearch sitearch none
eval $prefixit
$cat <<EOM

The installation process will also create a directory for
architecture-dependent site-specific extensions and modules.

EOM
fn=d~+
rp='Pathname for the site-specific architecture-dependent library files?'
. ./getfile
sitearch="$ans"
sitearchexp="$ansexp"
: Change installation prefix, if necessary.
if $test X"$prefix" != X"$installprefix"; then
	installsitearch=`echo $sitearchexp | sed "s#^$prefix#$installprefix#"`
else
	installsitearch="$sitearchexp"
fi

d7015 7
a7021 5
The installation process will also create a directory for
vendor-supplied add-ons.  Vendors who supply perl with their system
may find it convenient to place all vendor-supplied files in this
directory rather than in the main distribution directory.  This will
ease upgrades between binary-compatible maintenance versions of perl.
d7023 1
a7023 7
Of course you may also use these directories in whatever way you see
fit.  For example, you might use them to access modules shared over a
company-wide network.

The default answer should be fine for most people.
This causes further questions about vendor add-ons to be skipped
and no vendor-specific directories will be configured for perl.
d7026 1
a7026 10
rp='Do you want to configure vendor-specific add-on directories?'
case "$usevendorprefix" in
define|true|[yY]*) dflt=y ;;
*)	: User may have set vendorprefix directly on Configure command line.
	case "$vendorprefix" in
	''|' ') dflt=n ;;
	*)	dflt=y ;;
	esac
	;;
esac
d7029 32
a7060 15
[yY]*)	fn=d~+
	rp='Installation prefix to use for vendor-supplied add-ons?'
	case "$vendorprefix" in
	'') dflt='' ;;
	*)  dflt=$vendorprefix ;;
	esac
	. ./getfile
	: XXX Prefixit unit does not yet support siteprefix and vendorprefix
	oldvendorprefix=''
	case "$vendorprefix" in
	'') ;;
	*)	case "$ans" in
		"$prefix") ;;
		*) oldvendorprefix="$prefix";;
		esac
a7062 7
	usevendorprefix="$define"
	vendorprefix="$ans"
	vendorprefixexp="$ansexp"
	;;
*)	usevendorprefix="$undef"
	vendorprefix=''
	vendorprefixexp=''
d7066 9
a7074 4
case "$vendorprefix" in
'')	d_vendorlib="$undef"
	vendorlib=''
	vendorlibexp=''
d7076 7
a7082 10
*)	d_vendorlib="$define"
	: determine where vendor-supplied modules go.
	: Usual default is /usr/local/lib/perl5/vendor_perl/$version
	case "$vendorlib" in
	'')
		prog=`echo $package | $sed 's/-*[0-9.]*$//'`
		case "$installstyle" in
		*lib/perl5*) dflt=$vendorprefix/lib/$package/vendor_$prog/$version ;;
		*)	     dflt=$vendorprefix/lib/vendor_$prog/$version ;;
		esac
d7084 20
a7103 1
	*)	dflt="$vendorlib"
d7105 1
d7107 1
a7107 5
	fn=d~+
	rp='Pathname for the vendor-supplied library files?'
	. ./getfile
	vendorlib="$ans"
	vendorlibexp="$ansexp"
d7110 20
a7129 12
vendorlib_stem=`echo "$vendorlibexp" | sed "s,/$version$,,"`
: Change installation prefix, if necessary.
if $test X"$prefix" != X"$installprefix"; then
	installvendorlib=`echo $vendorlibexp | $sed "s#^$prefix#$installprefix#"`
else
	installvendorlib="$vendorlibexp"
fi

case "$vendorprefix" in
'')	d_vendorarch="$undef"
	vendorarch=''
	vendorarchexp=''
d7131 2
a7132 16
*)	d_vendorarch="$define"
	: determine where vendor-supplied architecture-dependent libraries go.
	: vendorlib  default is /usr/local/lib/perl5/vendor_perl/$version
	: vendorarch default is /usr/local/lib/perl5/vendor_perl/$version/$archname
	: vendorlib may have an optional trailing /share.
	case "$vendorarch" in
	'')	dflt=`echo $vendorlib | $sed 's,/share$,,'`
		dflt="$dflt/$archname"
		;;
	*)	dflt="$vendorarch" ;;
	esac
	fn=d~+
	rp='Pathname for vendor-supplied architecture-dependent files?'
	. ./getfile
	vendorarch="$ans"
	vendorarchexp="$ansexp"
d7135 19
a7153 52
: Change installation prefix, if necessary.
if $test X"$prefix" != X"$installprefix"; then
	installvendorarch=`echo $vendorarchexp | sed "s#^$prefix#$installprefix#"`
else
	installvendorarch="$vendorarchexp"
fi

: Final catch-all directories to search
$cat <<EOM

Lastly, you can have perl look in other directories for extensions and
modules in addition to those already specified.
These directories will be searched after 
	$sitearch 
	$sitelib 
EOM
test X"$vendorlib" != "X" && echo '	' $vendorlib
test X"$vendorarch" != "X" && echo '	' $vendorarch
echo ' '
case "$otherlibdirs" in
''|' ') dflt='none' ;;
*)	dflt="$otherlibdirs" ;;
esac
$cat <<EOM
Enter a colon-separated set of extra paths to include in perl's @@INC
search path, or enter 'none' for no extra paths.

EOM

rp='Colon-separated list of additional directories for perl to search?'
. ./myread
case "$ans" in
' '|''|none)	otherlibdirs=' ' ;;     
*)	otherlibdirs="$ans" ;;
esac
case "$otherlibdirs" in
' ') val=$undef ;;
*)	val=$define ;;
esac
set d_perl_otherlibdirs
eval $setvar

: Cruising for prototypes
echo " "
echo "Checking out function prototypes..." >&4
$cat >prototype.c <<'EOCP'
int main(int argc, char *argv[]) {
	exit(0);}
EOCP
if $cc $ccflags -c prototype.c >prototype.out 2>&1 ; then
	echo "Your C compiler appears to support function prototypes."
	val="$define"
d7155 19
a7173 2
	echo "Your C compiler doesn't seem to understand function prototypes."
	val="$undef"
d7175 3
a7177 3
set prototype
eval $setvar
$rm -f prototype*
d7179 2
a7180 5
case "$prototype" in
"$define") ;;
*)	ansi2knr='ansi2knr'
	echo " "
	cat <<EOM >&4
d7182 6
a7187 5
$me:  FATAL ERROR:
This version of $package can only be compiled by a compiler that 
understands function prototypes.  Unfortunately, your C compiler 
	$cc $ccflags
doesn't seem to understand them.  Sorry about that.
d7189 3
a7191 1
If GNU cc is available for your system, perhaps you could try that instead.  
d7193 1
a7193 2
Eventually, we hope to support building Perl with pre-ANSI compilers.
If you would like to help in that effort, please contact <perlbug@@perl.org>.
a7194 1
Aborting Configure now.
d7196 5
a7200 3
	exit 2
	;;
esac
a7201 1
: determine where public executables go
d7203 8
a7210 18
set dflt bin bin
eval $prefixit
fn=d~
rp='Pathname where the public executables will reside?'
. ./getfile
if $test "X$ansexp" != "X$binexp"; then
	installbin=''
fi
bin="$ans"
binexp="$ansexp"
: Change installation prefix, if necessary.
: XXX Bug? -- ignores Configure -Dinstallprefix setting.
if $test X"$prefix" != X"$installprefix"; then
	installbin=`echo $binexp | sed "s#^$prefix#$installprefix#"`
else
	installbin="$binexp"
fi

d7212 1
a7212 7
case "$extras" in
'') dflt='n';;
*) dflt='y';;
esac
cat <<EOM
Perl can be built with extra modules or bundles of modules which
will be fetched from the CPAN and installed alongside Perl.
d7214 6
a7219 4
Notice that you will need access to the CPAN; either via the Internet,
or a local copy, for example a CD-ROM or a local CPAN mirror.  (You will
be asked later to configure the CPAN.pm module which will in turn do
the installation of the rest of the extra modules or bundles.)
d7221 110
a7330 49
Notice also that if the modules require any external software such as
libraries and headers (the libz library and the zlib.h header for the
Compress::Zlib module, for example) you MUST have any such software
already installed, this configuration process will NOT install such
things for you.

If this doesn't make any sense to you, just accept the default '$dflt'.
EOM
rp='Install any extra modules (y or n)?'
. ./myread
case "$ans" in
y|Y)
	cat <<EOM

Please list any extra modules or bundles to be installed from CPAN,
with spaces between the names.  The names can be in any format the
'install' command of CPAN.pm will understand.  (Answer 'none',
without the quotes, to install no extra modules or bundles.)
EOM
	rp='Extras?'
	dflt="$extras"
	. ./myread
	extras="$ans"
esac
case "$extras" in
''|'none')
	val=''
	$rm -f ../extras.lst
	;;
*)	echo "(Saving the list of extras for later...)"
	echo "$extras" > ../extras.lst
	val="'$extras'"
	;;
esac
set extras
eval $setvar
echo " "

: Find perl5.005 or later.
echo "Looking for a previously installed perl5.005 or later... "
case "$perl5" in
'')	for tdir in `echo "$binexp$path_sep$PATH" | $sed "s/$path_sep/ /g"`; do
		: Check if this perl is recent and can load a simple module
		if $test -x $tdir/perl$exe_ext && $tdir/perl -Mless -e 'use 5.005;' >/dev/null 2>&1; then
			perl5=$tdir/perl
			break;
		elif $test -x $tdir/perl5$exe_ext && $tdir/perl5 -Mless -e 'use 5.005;' >/dev/null 2>&1; then
			perl5=$tdir/perl5
			break;
d7332 15
a7346 4
	done
	;;
*)	perl5="$perl5"
	;;
d7348 1
a7348 3
case "$perl5" in
'')	echo "None found.  That's ok.";;
*)	echo "Using $perl5." ;;
d7350 1
d7352 3
a7354 20
: Determine list of previous versions to include in @@INC
$cat > getverlist <<EOPL
#!$perl5 -w
use File::Basename;
\$api_versionstring = "$api_versionstring";
\$version = "$version";
\$stem = "$sitelib_stem";
\$archname = "$archname";
EOPL
	$cat >> getverlist <<'EOPL'
# Can't have leading @@ because metaconfig interprets it as a command!
;@@inc_version_list=();
# XXX Redo to do opendir/readdir? 
if (-d $stem) {
    chdir($stem);
    ;@@candidates = glob("5.*");
}
else {
    ;@@candidates = ();
}
d7356 24
a7379 33
# XXX ToDo:  These comparisons must be reworked when two-digit
# subversions come along, so that 5.7.10 compares as greater than
# 5.7.3!  By that time, hope that 5.6.x is sufficiently
# widespread that we can use the built-in version vectors rather
# than reinventing them here.  For 5.6.0, however, we must
# assume this script will likely be run by 5.005_0x.  --AD 1/2000.
foreach $d (@@candidates) {
    if ($d lt $version) {
	if ($d ge $api_versionstring) {
	    unshift(@@inc_version_list, grep { -d } "$d/$archname", $d);
	}
	elsif ($d ge "5.005") {
	    unshift(@@inc_version_list, grep { -d } $d);
	}
    }
    else {
	# Skip newer version.  I.e. don't look in
	# 5.7.0 if we're installing 5.6.1.
    }
}

if (@@inc_version_list) {
    print join(' ', @@inc_version_list);
}
else {
    # Blank space to preserve value for next Configure run.
    print " ";
}
EOPL
chmod +x getverlist
case "$inc_version_list" in
'')	if test -x "$perl5$exe_ext"; then
		dflt=`$perl5 getverlist`
d7381 4
a7384 2
		dflt='none'
	fi
d7386 5
a7390 34
$undef) dflt='none' ;;
*)  eval dflt=\"$inc_version_list\" ;;
esac
case "$dflt" in
''|' ') dflt=none ;;
esac
case "$dflt" in
5.005) dflt=none ;;
esac
$cat <<EOM

In order to ease the process of upgrading, this version of perl 
can be configured to use modules built and installed with earlier 
versions of perl that were installed under $prefix.  Specify here
the list of earlier versions that this version of perl should check.
If Configure detected no earlier versions of perl installed under
$prefix, then the list will be empty.  Answer 'none' to tell perl
to not search earlier versions.

The default should almost always be sensible, so if you're not sure,
just accept the default.
EOM

rp='List of earlier versions to include in @@INC?'
. ./myread
case "$ans" in
[Nn]one|''|' ') inc_version_list=' ' ;;
*) inc_version_list="$ans" ;;
esac
case "$inc_version_list" in
''|' ') 
	inc_version_list_init='0';;
*)	inc_version_list_init=`echo $inc_version_list |
		$sed -e 's/^/"/' -e 's/ /","/g' -e 's/$/",0/'`
d7392 2
a7393 2
esac
$rm -f getverlist
d7395 26
a7420 28
: determine whether to install perl also as /usr/bin/perl

echo " "
if $test -d /usr/bin -a "X$installbin" != X/usr/bin; then
	$cat <<EOM
Many scripts expect perl to be installed as /usr/bin/perl.
I can install the perl you are about to compile also as /usr/bin/perl
(in addition to $installbin/perl).
EOM
	case "$installusrbinperl" in
	"$undef"|[nN]*)	dflt='n';;
	*)		dflt='y';;
	esac
	rp="Do you want to install perl as /usr/bin/perl?"
	. ./myread
	case "$ans" in
	[yY]*)	val="$define";;
	*)	val="$undef" ;;
	esac
else
	val="$undef"
fi
set installusrbinperl
eval $setvar

: see if dld is available
set dld.h i_dld
eval $inhdr
d7525 1
a7525 1
	'')	$cat >try.c <<'EOM'
d7528 2
d7531 1
d8553 103
a8655 1
	installsitebin="$sitebinexp"
d8658 30
d8788 4
a8816 2


d8894 4
d8900 1
a8900 1
    exit(0);
d8953 150
d9107 115
d9475 1
a9475 1
	$cat >access.c <<'EOCP'
d9486 4
d9517 4
d9631 1
a9631 1
	$cat >try.c <<'EOCP'
d9645 4
d9814 1
a9814 1
void croak (char* pat,...) __attribute__((format(printf,1,2),noreturn));
d9858 4
d9924 4
d10033 4
d10091 4
d10191 1
a10191 1
	$cat >try.c <<'EOF'
d10193 4
d10383 4
d10739 4
d10834 5
a10838 1
#include <stdio.h>
d11199 255
a11453 1
	$cppstdin $cppflags $cppminus < $xxx >$$.h
d11455 5
a11459 1
	if $contains 'pw_quota' $$.h >/dev/null 2>&1; then
d11461 1
d11464 1
d11466 7
a11472 2
	set d_pwquota
	eval $setvar
d11474 4
a11477 7
	if $contains 'pw_age' $$.h >/dev/null 2>&1; then
		val="$define"
	else
		val="$undef"
	fi
	set d_pwage
	eval $setvar
d11479 5
a11483 1
	if $contains 'pw_change' $$.h >/dev/null 2>&1; then
d11485 1
d11488 5
d11494 8
a11501 2
	set d_pwchange
	eval $setvar
d11503 48
a11550 2
	if $contains 'pw_class' $$.h >/dev/null 2>&1; then
		val="$define"
d11552 1
a11552 1
		val="$undef"
d11554 4
a11557 2
	set d_pwclass
	eval $setvar
d11559 41
a11599 7
	if $contains 'pw_expire' $$.h >/dev/null 2>&1; then
		val="$define"
	else
		val="$undef"
	fi
	set d_pwexpire
	eval $setvar
d11601 39
a11639 7
	if $contains 'pw_comment' $$.h >/dev/null 2>&1; then
		val="$define"
	else
		val="$undef"
	fi
	set d_pwcomment
	eval $setvar
d11641 45
a11685 9
	if $contains 'pw_gecos' $$.h >/dev/null 2>&1; then
		val="$define"
	else
		val="$undef"
	fi
	set d_pwgecos
	eval $setvar

	if $contains 'pw_passwd' $$.h >/dev/null 2>&1; then
d11687 4
d11692 2
a11693 1
		val="$undef"
d11695 1
a11695 1
	set d_pwpasswd
a11696 2

	$rm -f $$.h
d11699 10
a11708 9
	val="$undef"; 
	set d_pwquota; eval $setvar
	set d_pwage; eval $setvar
	set d_pwchange; eval $setvar
	set d_pwclass; eval $setvar
	set d_pwexpire; eval $setvar
	set d_pwcomment; eval $setvar
	set d_pwgecos; eval $setvar
	set d_pwpasswd; eval $setvar
d11711 1
d11713 10
a11722 11
: see if endpwent_r exists
set endpwent_r d_endpwent_r
eval $inlibc
case "$d_endpwent_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_pwd pwd.h"
	case "$d_endpwent_r_proto:$usethreads" in
	":define")	d_endpwent_r_proto=define
		set d_endpwent_r_proto endpwent_r $hdrs
		eval $hasproto ;;
	*)	;;
d11724 5
a11728 5
	case "$d_endpwent_r_proto" in
	define)
	case "$endpwent_r_proto" in
	''|0) try='int endpwent_r(FILE**);'
	./protochk "extern $try" $hdrs && endpwent_r_proto=I_H ;;
d11730 2
a11731 3
	case "$endpwent_r_proto" in
	''|0) try='void endpwent_r(FILE**);'
	./protochk "extern $try" $hdrs && endpwent_r_proto=V_H ;;
d11733 2
a11734 9
	case "$endpwent_r_proto" in
	''|0)	d_endpwent_r=undef
 	        endpwent_r_proto=0
		echo "Disabling endpwent_r, cannot determine prototype." >&4 ;;
	* )	case "$endpwent_r_proto" in
		REENTRANT_PROTO*) ;;
		*) endpwent_r_proto="REENTRANT_PROTO_$endpwent_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
d11736 5
a11740 6
	;;
	*)	case "$usethreads" in
		define) echo "endpwent_r has no prototype, not using it." >&4 ;;
		esac
		d_endpwent_r=undef
		endpwent_r_proto=0
d11742 1
d11744 5
a11748 20
	;;
*)	endpwent_r_proto=0
	;;
esac

: see if endservent exists
set endservent d_endsent
eval $inlibc

: see if endservent_r exists
set endservent_r d_endservent_r
eval $inlibc
case "$d_endservent_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_netdb netdb.h"
	case "$d_endservent_r_proto:$usethreads" in
	":define")	d_endservent_r_proto=define
		set d_endservent_r_proto endservent_r $hdrs
		eval $hasproto ;;
	*)	;;
d11750 2
a11751 5
	case "$d_endservent_r_proto" in
	define)
	case "$endservent_r_proto" in
	''|0) try='int endservent_r(struct servent_data*);'
	./protochk "extern $try" $hdrs && endservent_r_proto=I_D ;;
d11753 2
a11754 3
	case "$endservent_r_proto" in
	''|0) try='void endservent_r(struct servent_data*);'
	./protochk "extern $try" $hdrs && endservent_r_proto=V_D ;;
d11756 6
a11761 9
	case "$endservent_r_proto" in
	''|0)	d_endservent_r=undef
 	        endservent_r_proto=0
		echo "Disabling endservent_r, cannot determine prototype." >&4 ;;
	* )	case "$endservent_r_proto" in
		REENTRANT_PROTO*) ;;
		*) endservent_r_proto="REENTRANT_PROTO_$endservent_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
d11763 3
a11765 6
	;;
	*)	case "$usethreads" in
		define) echo "endservent_r has no prototype, not using it." >&4 ;;
		esac
		d_endservent_r=undef
		endservent_r_proto=0
d11767 4
d11772 4
a11775 4
	;;
*)	endservent_r_proto=0
	;;
esac
d11777 7
a11783 9
: Locate the flags for 'open()'
echo " "
$cat >try.c <<'EOCP'
#include <sys/types.h>
#ifdef I_FCNTL
#include <fcntl.h>
#endif
#ifdef I_SYS_FILE
#include <sys/file.h>
d11785 2
d11788 7
a11794 4
	if(O_RDONLY);
#ifdef O_TRUNC
	exit(0);
#else
a11795 1
#endif
d11797 4
a11800 6
EOCP
: check sys/file.h first to get FREAD on Sun
if $test `./findhdr sys/file.h` && \
		set try -DI_SYS_FILE && eval $compile; then
	h_sysfile=true;
	echo "<sys/file.h> defines the O_* constants..." >&4
d11802 1
a11802 57
		echo "and you have the 3 argument form of open()." >&4
		val="$define"
	else
		echo "but not the 3 argument form of open().  Oh, well." >&4
		val="$undef"
	fi
elif $test `./findhdr fcntl.h` && \
		set try -DI_FCNTL && eval $compile; then
	h_fcntl=true;
	echo "<fcntl.h> defines the O_* constants..." >&4
	if $run ./try; then
		echo "and you have the 3 argument form of open()." >&4
		val="$define"
	else
		echo "but not the 3 argument form of open().  Oh, well." >&4
		val="$undef"
	fi
else
	val="$undef"
	echo "I can't find the O_* constant definitions!  You got problems." >&4
fi
set d_open3
eval $setvar
$rm -f try try.*

: see which of string.h or strings.h is needed
echo " "
strings=`./findhdr string.h`
if $test "$strings" && $test -r "$strings"; then
	echo "Using <string.h> instead of <strings.h>." >&4
	val="$define"
else
	val="$undef"
	strings=`./findhdr strings.h`
	if $test "$strings" && $test -r "$strings"; then
		echo "Using <strings.h> instead of <string.h>." >&4
	else
		echo "No string header found -- You'll surely have problems." >&4
	fi
fi
set i_string
eval $setvar
case "$i_string" in
"$undef") strings=`./findhdr strings.h`;;
*)	  strings=`./findhdr string.h`;;
esac

: see if this is a sys/file.h system
val=''
set sys/file.h val
eval $inhdr

: do we need to include sys/file.h ?
case "$val" in
"$define")
	echo " "
	if $h_sysfile; then
a11803 1
		echo "We'll be including <sys/file.h>." >&4
d11805 21
d11827 2
a11828 5
		echo "We won't be including <sys/file.h>." >&4
	fi
	;;
*)
	h_sysfile=false
d11831 1
a11831 1
set i_sysfile
d11834 7
a11840 4
: see if fcntl.h is there
val=''
set fcntl.h val
eval $inhdr
d11842 4
a11845 20
: see if we can include fcntl.h
case "$val" in
"$define")
	echo " "
	if $h_fcntl; then
		val="$define"
		echo "We'll be including <fcntl.h>." >&4
	else
		val="$undef"
		if $h_sysfile; then
	echo "We don't need to include <fcntl.h> if we include <sys/file.h>." >&4
		else
			echo "We won't be including <fcntl.h>." >&4
		fi
	fi
	;;
*)
	h_fcntl=false
	val="$undef"
	;;
d11847 1
a11847 1
set i_fcntl
d11850 8
a11857 16
: check for non-blocking I/O stuff
case "$h_sysfile" in
true) echo "#include <sys/file.h>" > head.c;;
*)
       case "$h_fcntl" in
       true) echo "#include <fcntl.h>" > head.c;;
       *) echo "#include <sys/fcntl.h>" > head.c;;
       esac
       ;;
esac
echo " "
echo "Figuring out the flag used by open() for non-blocking I/O..." >&4
case "$o_nonblock" in
'')
	$cat head.c > try.c
	$cat >>try.c <<EOCP
d11859 5
a11864 3
#$i_fcntl I_FCNTL
#ifdef I_FCNTL
#include <fcntl.h>
d11866 3
d11870 48
a11917 13
#ifdef O_NONBLOCK
	printf("O_NONBLOCK\n");
	exit(0);
#endif
#ifdef O_NDELAY
	printf("O_NDELAY\n");
	exit(0);
#endif
#ifdef FNDELAY
	printf("FNDELAY\n");
	exit(0);
#endif
	exit(0);
d11919 1
a11919 1
EOCP
d11921 13
a11933 6
	if eval $compile_ok; then
		o_nonblock=`$run ./try`
		case "$o_nonblock" in
		'') echo "I can't figure it out, assuming O_NONBLOCK will do.";;
		*) echo "Seems like we can use $o_nonblock.";;
		esac
d11935 1
a11935 1
		echo "(I can't compile the test program; pray O_NONBLOCK is right!)"
d11937 1
a11938 1
*) echo "Using $hint value $o_nonblock.";;
a11939 1
$rm -f try try.* .out core
d11941 9
a11949 63
echo " "
echo "Let's see what value errno gets from read() on a $o_nonblock file..." >&4
case "$eagain" in
'')
	$cat head.c > try.c
	$cat >>try.c <<EOCP
#include <errno.h>
#include <sys/types.h>
#include <signal.h>
#include <stdio.h> 
#include <stdlib.h> 
#$i_fcntl I_FCNTL
#ifdef I_FCNTL
#include <fcntl.h>
#endif
#define MY_O_NONBLOCK $o_nonblock
#ifndef errno  /* XXX need better Configure test */
extern int errno;
#endif
#$i_unistd I_UNISTD
#ifdef I_UNISTD
#include <unistd.h>
#endif
#$i_string I_STRING
#ifdef I_STRING
#include <string.h>
#else
#include <strings.h>
#endif
$signal_t blech(x) int x; { exit(3); }
EOCP
	$cat >> try.c <<'EOCP'
int main()
{
	int pd[2];
	int pu[2];
	char buf[1];
	char string[100];

	pipe(pd);	/* Down: child -> parent */
	pipe(pu);	/* Up: parent -> child */
	if (0 != fork()) {
		int ret;
		close(pd[1]);	/* Parent reads from pd[0] */
		close(pu[0]);	/* Parent writes (blocking) to pu[1] */
#ifdef F_SETFL
		if (-1 == fcntl(pd[0], F_SETFL, MY_O_NONBLOCK))
			exit(1);
#else
		exit(4);
#endif
		signal(SIGALRM, blech);
		alarm(5);
		if ((ret = read(pd[0], buf, 1)) > 0)	/* Nothing to read! */
			exit(2);
		sprintf(string, "%d\n", ret);
		write(2, string, strlen(string));
		alarm(0);
#ifdef EAGAIN
		if (errno == EAGAIN) {
			printf("EAGAIN\n");
			goto ok;
		}
d11951 9
a11959 12
#ifdef EWOULDBLOCK
		if (errno == EWOULDBLOCK)
			printf("EWOULDBLOCK\n");
#endif
	ok:
		write(pu[1], buf, 1);	/* Unblocks child, tell it to close our pipe */
		sleep(2);				/* Give it time to close our pipe */
		alarm(5);
		ret = read(pd[0], buf, 1);	/* Should read EOF */
		alarm(0);
		sprintf(string, "%d\n", ret);
		write(4, string, strlen(string));
d11961 1
a11961 7
	}

	close(pd[0]);			/* We write to pd[1] */
	close(pu[1]);			/* We read from pu[0] */
	read(pu[0], buf, 1);	/* Wait for parent to signal us we may continue */
	close(pd[1]);			/* Pipe pd is now fully closed! */
	exit(0);				/* Bye bye, thank you for playing! */
d11963 1
a11963 1
EOCP
d11965 6
a11970 41
	if eval $compile_ok; then
		echo "$startsh" >mtry
		echo "$run ./try >try.out 2>try.ret 4>try.err || exit 4" >>mtry
		chmod +x mtry
		./mtry >/dev/null 2>&1
		case $? in
		0) eagain=`$cat try.out`;;
		1) echo "Could not perform non-blocking setting!";;
		2) echo "I did a successful read() for something that was not there!";;
		3) echo "Hmm... non-blocking I/O does not seem to be working!";;
		4) echo "Could not find F_SETFL!";;
		*) echo "Something terribly wrong happened during testing.";;
		esac
		rd_nodata=`$cat try.ret`
		echo "A read() system call with no data present returns $rd_nodata."
		case "$rd_nodata" in
		0|-1) ;;
		*)
			echo "(That's peculiar, fixing that to be -1.)"
			rd_nodata=-1
			;;
		esac
		case "$eagain" in
		'')
			echo "Forcing errno EAGAIN on read() with no data available."
			eagain=EAGAIN
			;;
		*)
			echo "Your read() sets errno to $eagain when no data is available."
			;;
		esac
		status=`$cat try.err`
		case "$status" in
		0) echo "And it correctly returns 0 to signal EOF.";;
		-1) echo "But it also returns -1 to signal EOF, so be careful!";;
		*) echo "However, your read() returns '$status' on EOF??";;
		esac
		val="$define"
		if test "$status" = "$rd_nodata"; then
			echo "WARNING: you can't distinguish between EOF and no data!"
			val="$undef"
d11973 1
a11973 2
		echo "I can't compile the test program--assuming errno EAGAIN will do."
		eagain=EAGAIN
d11975 1
a11975 2
	set d_eofnblk
	eval $setvar
d11977 12
a11988 9
*)
	echo "Using $hint value $eagain."
	echo "Your read() returns $rd_nodata when no data is present."
	case "$d_eofnblk" in
	"$define") echo "And you can see EOF because read() returns 0.";;
	"$undef") echo "But you can't see EOF status from read() returned value.";;
	*)
		echo "(Assuming you can't see EOF status from read anyway.)"
		d_eofnblk=$undef
d11993 4
a11996 1
$rm -f try try.* .out core head.c mtry
d12017 2
d12020 1
d12087 4
d12630 4
d12895 4
d13740 4
d13783 1
a13783 1
$cat >isascii.c <<'EOCP'
d13786 4
d13980 132
a14111 53
set memcpy d_memcpy
eval $inlibc

: see if memmove exists
set memmove d_memmove
eval $inlibc

: see if memset exists
set memset d_memset
eval $inlibc

: see if mkdir exists
set mkdir d_mkdir
eval $inlibc

: see if mkdtemp exists
set mkdtemp d_mkdtemp
eval $inlibc

: see if mkfifo exists
set mkfifo d_mkfifo
eval $inlibc

: see if mkstemp exists
set mkstemp d_mkstemp
eval $inlibc

: see if mkstemps exists
set mkstemps d_mkstemps
eval $inlibc

: see if mktime exists
set mktime d_mktime
eval $inlibc

: see if this is a sys/mman.h system
set sys/mman.h i_sysmman
eval $inhdr

: see if mmap exists
set mmap d_mmap
eval $inlibc
: see what shmat returns
: default to something harmless
mmaptype='void *'
case "$i_sysmman$d_mmap" in
"$define$define")
	$cat >mmap.c <<'END'
#include <sys/mman.h>
void *mmap();
END
	if $cc $ccflags -c mmap.c >/dev/null 2>&1; then
		mmaptype='void *'
d14113 2
a14114 1
		mmaptype='caddr_t'
d14116 3
a14118 1
	echo "and it returns ($mmaptype)." >&4
d14122 30
d14153 3
d14249 1
a14249 1
	$cat >try.c <<'EOCP'
d14251 4
d14494 4
d14704 4
d14796 9
a14804 1
	./protochk "extern $try" $hdrs && random_r_proto=I_TS ;;
d15246 1
a15246 1
$rm -f try try.c try.h
a15252 1
    : see whether semctl IPC_STAT can use union semun
d15278 5
a15282 2

    $cat > try.c <<END
d15328 10
a15337 9
    val="$undef"
    set try
    if eval $compile; then
	xxx=`$run ./try`
        case "$xxx" in
        semun) val="$define" ;;
        esac
    fi
    $rm -f try try.c
d15351 4
a15354 1
    $cat > try.c <<'END'
d15390 10
a15399 9
    val="$undef"
    set try
    if eval $compile; then
        xxx=`$run ./try`
        case "$xxx" in
        semid_ds) val="$define" ;;
        esac
    fi
    $rm -f try try.c
d15989 1
a15989 1
	$cat > try.c <<'EOP'
d15993 4
d16028 1
a16028 1
	$cat >try.c <<'EOP'
d16030 4
d16190 3
a16192 155
: see if this is a sys/vfs.h system
set sys/vfs.h i_sysvfs
eval $inhdr


: see if this is a sys/statfs.h system
set sys/statfs.h i_sysstatfs
eval $inhdr


echo " "
echo "Checking to see if your system supports struct statfs..." >&4
set d_statfs_s statfs $i_systypes sys/types.h $i_sysparam sys/param.h $i_sysmount sys/mount.h $i_sysvfs sys/vfs.h $i_sysstatfs sys/statfs.h
eval $hasstruct
case "$d_statfs_s" in
"$define")      echo "Yes, it does."   ;;
*)              echo "No, it doesn't." ;;
esac



: see if struct statfs knows about f_flags
case "$d_statfs_s" in
define)	
	echo " "
	echo "Checking to see if your struct statfs has f_flags field..." >&4
	set d_statfs_f_flags statfs f_flags $i_systypes sys/types.h $i_sysparam sys/param.h $i_sysmount sys/mount.h $i_sysvfs sys/vfs.h $i_sysstatfs sys/statfs.h
	eval $hasfield
	;;
*)	val="$undef"
	set d_statfs_f_flags
	eval $setvar
	;;
esac
case "$d_statfs_f_flags" in
"$define")      echo "Yes, it does."   ;;
*)              echo "No, it doesn't." ;;
esac

: see if _ptr and _cnt from stdio act std
echo " "

if $contains '_lbfsize' `./findhdr stdio.h` >/dev/null 2>&1 ; then
	echo "(Looks like you have stdio.h from BSD.)"
	case "$stdio_ptr" in
	'') stdio_ptr='((fp)->_p)'
		ptr_lval=$define
		;;
	*)	ptr_lval=$d_stdio_ptr_lval;;
	esac
	case "$stdio_cnt" in
	'') stdio_cnt='((fp)->_r)'
		cnt_lval=$define
		;;
	*)	cnt_lval=$d_stdio_cnt_lval;;
	esac
	case "$stdio_base" in
	'') stdio_base='((fp)->_ub._base ? (fp)->_ub._base : (fp)->_bf._base)';;
	esac
	case "$stdio_bufsiz" in
	'') stdio_bufsiz='((fp)->_ub._base ? (fp)->_ub._size : (fp)->_bf._size)';;
	esac
elif $contains '_IO_fpos_t' `./findhdr stdio.h` `./findhdr libio.h` >/dev/null 2>&1 ; then
	echo "(Looks like you have stdio.h from Linux.)"
	case "$stdio_ptr" in
	'') stdio_ptr='((fp)->_IO_read_ptr)'
		ptr_lval=$define
		;;
	*)	ptr_lval=$d_stdio_ptr_lval;;
	esac
	case "$stdio_cnt" in
	'') stdio_cnt='((fp)->_IO_read_end - (fp)->_IO_read_ptr)'
		cnt_lval=$undef
		;;
	*)	cnt_lval=$d_stdio_cnt_lval;;
	esac
	case "$stdio_base" in
	'') stdio_base='((fp)->_IO_read_base)';;
	esac
	case "$stdio_bufsiz" in
	'') stdio_bufsiz='((fp)->_IO_read_end - (fp)->_IO_read_base)';;
	esac
else
	case "$stdio_ptr" in
	'') stdio_ptr='((fp)->_ptr)'
		ptr_lval=$define
		;;
	*)	ptr_lval=$d_stdio_ptr_lval;;
	esac
	case "$stdio_cnt" in
	'') stdio_cnt='((fp)->_cnt)'
		cnt_lval=$define
		;;
	*)	cnt_lval=$d_stdio_cnt_lval;;
	esac
	case "$stdio_base" in
	'') stdio_base='((fp)->_base)';;
	esac
	case "$stdio_bufsiz" in
	'') stdio_bufsiz='((fp)->_cnt + (fp)->_ptr - (fp)->_base)';;
	esac
fi

: test whether _ptr and _cnt really work
echo "Checking how std your stdio is..." >&4
$cat >try.c <<EOP
#include <stdio.h>
#define FILE_ptr(fp)	$stdio_ptr
#define FILE_cnt(fp)	$stdio_cnt
int main() {
	FILE *fp = fopen("try.c", "r");
	char c = getc(fp);
	if (
		18 <= FILE_cnt(fp) &&
		strncmp(FILE_ptr(fp), "include <stdio.h>\n", 18) == 0
	)
		exit(0);
	exit(1);
}
EOP
val="$undef"
set try
if eval $compile && $to try.c; then
	if $run ./try; then
		echo "Your stdio acts pretty std."
		val="$define"
	else
		echo "Your stdio isn't very std."
	fi
else
	echo "Your stdio doesn't appear very std."
fi
$rm -f try.c try

# glibc 2.2.90 and above apparently change stdio streams so Perl's
# direct buffer manipulation no longer works.  The Configure tests
# should be changed to correctly detect this, but until then,
# the following check should at least let perl compile and run.
# (This quick fix should be updated before 5.8.1.)
# To be defensive, reject all unknown versions, and all versions  > 2.2.9.
# A. Dougherty, June 3, 2002.
case "$d_gnulibc" in
$define)
	case "$gnulibc_version" in
	2.[01]*)  ;;
	2.2) ;;
	2.2.[0-9]) ;;
	*)  echo "But I will not snoop inside glibc $gnulibc_version stdio buffers."
		val="$undef"
		;;
	esac
	;;
esac
set d_stdstdio
eval $setvar
a16193 7
: Can _ptr be used as an lvalue?
case "$d_stdstdio$ptr_lval" in
$define$define) val=$define ;;
*) val=$undef ;;
esac
set d_stdio_ptr_lval
eval $setvar
d16195 3
a16197 7
: Can _cnt be used as an lvalue?
case "$d_stdstdio$cnt_lval" in
$define$define) val=$define ;;
*) val=$undef ;;
esac
set d_stdio_cnt_lval
eval $setvar
d16200 8
a16207 37
: test whether setting _ptr sets _cnt as a side effect
d_stdio_ptr_lval_sets_cnt="$undef"
d_stdio_ptr_lval_nochange_cnt="$undef"
case "$d_stdio_ptr_lval$d_stdstdio" in
$define$define)
	echo "Checking to see what happens if we set the stdio ptr..." >&4
$cat >try.c <<EOP
#include <stdio.h>
/* Can we scream? */
/* Eat dust sed :-) */
/* In the buffer space, no one can hear you scream. */
#define FILE_ptr(fp)	$stdio_ptr
#define FILE_cnt(fp)	$stdio_cnt
#include <sys/types.h>
int main() {
	FILE *fp = fopen("try.c", "r");
	int c;
	char *ptr;
	size_t cnt;
	if (!fp) {
	    puts("Fail even to read");
	    exit(1);
	}
	c = getc(fp); /* Read away the first # */
	if (c == EOF) {
	    puts("Fail even to read");
	    exit(1);
	}
	if (!(
		18 <= FILE_cnt(fp) &&
		strncmp(FILE_ptr(fp), "include <stdio.h>\n", 18) == 0
	)) {
		puts("Fail even to read");
		exit (1);
	}
	ptr = (char*) FILE_ptr(fp);
	cnt = (size_t)FILE_cnt(fp);
a16208 1
	FILE_ptr(fp) += 42;
a16209 22
	if ((char*)FILE_ptr(fp) != (ptr + 42)) {
		printf("Fail ptr check %p != %p", FILE_ptr(fp), (ptr + 42));
		exit (1);
	}
	if (FILE_cnt(fp) <= 20) {
		printf ("Fail (<20 chars to test)");
		exit (1);
	}
	if (strncmp(FILE_ptr(fp), "Eat dust sed :-) */\n", 20) != 0) {
		puts("Fail compare");
		exit (1);
	}
	if (cnt == FILE_cnt(fp)) {
		puts("Pass_unchanged");
		exit (0);
	}	
	if (FILE_cnt(fp) == (cnt - 42)) {
		puts("Pass_changed");
		exit (0);
	}
	printf("Fail count was %d now %d\n", cnt, FILE_cnt(fp));
	return 1;
d16211 11
a16221 20
}
EOP
	set try
	if eval $compile && $to try.c; then
 		case `$run ./try` in
		Pass_changed)
			echo "Increasing ptr in your stdio decreases cnt by the same amount.  Good." >&4
			d_stdio_ptr_lval_sets_cnt="$define" ;;
		Pass_unchanged)
			echo "Increasing ptr in your stdio leaves cnt unchanged.  Good." >&4
			d_stdio_ptr_lval_nochange_cnt="$define" ;;
		Fail*)
			echo "Increasing ptr in your stdio didn't do exactly what I expected.  We'll not be doing that then." >&4 ;;
		*)
			echo "It appears attempting to set ptr in your stdio is a bad plan." >&4 ;;
	esac
	else
		echo "It seems we can't set ptr in your stdio.  Nevermind." >&4
	fi
	$rm -f try.c try
d16224 3
a16226 33

: see if _base is also standard
val="$undef"
case "$d_stdstdio" in
$define)
	$cat >try.c <<EOP
#include <stdio.h>
#define FILE_base(fp)	$stdio_base
#define FILE_bufsiz(fp)	$stdio_bufsiz
int main() {
	FILE *fp = fopen("try.c", "r");
	char c = getc(fp);
	if (
		19 <= FILE_bufsiz(fp) &&
		strncmp(FILE_base(fp), "#include <stdio.h>\n", 19) == 0
	)
		exit(0);
	exit(1);
}
EOP
	set try
	if eval $compile && $to try.c; then
		if $run ./try; then
			echo "And its _base field acts std."
			val="$define"
		else
			echo "But its _base field isn't std."
		fi
	else
		echo "However, it seems to be lacking the _base field."
	fi
	$rm -f try.c try
	;;
a16227 2
set d_stdiobase
eval $setvar
d16858 4
d16924 4
d17235 1
a17235 1
: how do we catenate cpp tokens here?
d17237 1
a17237 1
echo "Checking to see how your cpp does stuff like catenate tokens..." >&4
d17256 2
a17257 2
Hmm, I don't seem to be able to catenate tokens with your cpp.  You're going
to have to edit the values of CAT[2-5] in config.h...
d17279 4
d17621 4
d17941 4
d18655 5
a18659 1
$cat > foo.c <<'EOP'
d18749 2
a18750 1
'') case "$d_select" in
d18782 4
d18792 1
a18792 1
    char s[NBYTES];
d18798 2
d18803 1
a18803 1
      exit(1);
d18806 1
a18806 1
      exit(2);
d18814 1
d18825 1
a18825 1
I'll play safe and guess it is 32 bits.
d18827 2
a18828 2
				selectminbits=32
				bits="32 bits"
d18837 2
a18838 1
			1234|12345678)	dflt=32 ;;
d18848 1
a18848 1
		selectminbits='32'
d18895 1
a18895 1
$cat > signal.c <<'EOCP'
d18898 4
d18976 1
a18976 1
($1 !~ /^NSIG$/) && (NF == 2) {
d19129 4
d19236 4
d19322 4
d20124 33
d20182 13
a20194 1
	'') dflt="$avail_ext" ;;
d20309 17
d20511 1
d20534 1
d20568 1
d20660 1
d20698 1
d20731 1
d20757 1
d20881 1
d20936 1
d20975 4
d21076 2
d21086 2
d21089 3
d21096 2
d21099 3
d21156 1
d21281 4
d21288 4
d21294 2
d21361 1
d21391 4
d21398 4
d21404 2
@


1.10
log
@Pass ld the -R flag to add directories to the list of places to
search for shared objects instead of using a LD_RUN_PATH hack.  We
use -R here since it works with both the old and new (binutils) ld
flavors.  The LD_RUN_PATH hack was using the wrong directory anyway
and so didn't even work.  Problem pointed out by H. Steuer.
@
text
@d21 1
a21 1
# $Id: Configure,v 1.9 2002/04/05 17:33:58 millert Exp $
d23 1
a23 1
# Generated on Tue Mar 13 05:21:04 EET 2001 [metaconfig 3.0 PL70]
d68 4
a71 1
		p_=\;
d84 1
d145 1
d168 1
d174 5
d187 1
d215 1
d289 1
a303 2
bincompat5005=''
d_bincompat5005=''
a321 1
crosscompile=''
d326 2
d338 1
d341 1
d345 2
d349 4
d355 1
d357 1
d363 2
d369 2
d372 2
d375 2
d378 2
d381 2
d384 3
d395 2
d399 1
d401 4
d420 6
d434 6
d441 1
d443 2
d450 6
d467 6
d476 6
d483 6
d491 2
d495 2
d498 1
a500 1
d_iconv=''
d504 2
d512 2
d540 1
d545 1
d551 1
d560 2
d564 1
d569 4
d577 2
d580 2
d593 1
d597 2
d601 3
d606 2
d609 2
d618 2
d621 2
d630 2
d644 1
d646 2
d662 6
d692 3
d699 1
d706 1
d716 2
d719 2
d722 2
d728 3
d743 1
d767 1
d770 3
d783 2
a787 1
i_iconv=''
d790 1
d855 2
d938 1
d958 1
d962 1
a966 1
d_nv_preserves_uv_bits=''
d977 1
d1041 1
d1093 1
d1137 15
a1160 1
_exe=''
d1173 1
d1202 1
d1211 1
a1211 1
libswanted="$libswanted ucb bsd BSD PW x iconv util"
d1240 3
d1253 1
a1253 1
'')	cat <<EOM >&2
d1269 17
a1285 5
	test -f $xcat || xcat=/usr/bin/cat
	echo "#!$xcat" >try
	$eunicefix try
	chmod +x try
	./try > today
d1289 4
a1292 4
		echo "#! $xcat" > try
		$eunicefix try
		chmod +x try
		./try > today
d1312 1
a1312 1
rm -f try today
d1319 1
a1319 1
cat >try <<EOSS
d1325 3
a1327 3
chmod +x try
$eunicefix try
if ./try; then
d1333 1
a1333 1
rm -f try
d1345 2
d1351 6
d1358 1
d1360 3
d1488 1
a1488 1
            *=*) zzz=`echo $yyy|sed 's!=.*!!'`
d1492 2
a1493 2
                      zzz=" "`echo $yyy|sed 's!^[^=]*=!!'` 
                      yyy=`echo $yyy|sed 's!=.*!!'` ;;
d1499 6
a1504 6
                 *:*) xxx=`echo $yyy|sed 's!:.*!!'`
                      yyy=`echo $yyy|sed 's!^[^:]*:!!'`
                      zzz=`echo $yyy|sed 's!^[^=]*=!!'`
                      yyy=`echo $yyy|sed 's!=.*!!'` ;;
                 *)   xxx=`echo $yyy|sed 's!:.*!!'`
                      yyy=`echo $yyy|sed 's!^[^:]*:!!'` ;;
d1687 1
a1687 1
CONFIGDOTSH=true
d1689 2
a1690 2
if test -f $src/MANIFEST; then
	set x `awk '{print $1}' <$src/MANIFEST | grep '\.SH$'`
d1693 1
a1693 1
	set x `(cd $src; find . -name "*.SH" -print)`
d1697 1
a1697 1
0) set x `(cd $src; echo *.SH)`; shift;;
d1699 1
a1699 1
if test ! -f $src/$1; then
d1725 1
a1725 1
			(cd $dir && . ./$file)
d1738 1
a1738 1
			sh <$src/$dir/$file
d1741 1
a1741 1
			sh <$src/$file
d1747 1
a1747 1
if test -f $src/config_h.SH; then
d1750 1
a1750 1
	. $src/config_h.SH
d1773 1
a1773 1
	echo "Done."
d1806 1
a1806 1
if test -f $rsrc/MANIFEST; then
d1808 1
a1808 1
	awk '$1 !~ /PACK[A-Z]+/ {print $1}' $rsrc/MANIFEST | split -50
d1812 1
a1812 1
		(cd $rsrc; ls `cat $tmppwd/$filelist` >/dev/null 2>>$tmppwd/missing)
d1862 5
d2018 2
a2019 1
	[yY]) echo >&4 "Okay, continuing." ;;
d2028 10
d2149 3
d2172 1
a2178 1
make
d2196 1
d2200 1
d2225 1
a2225 1
	eval $file=$xxx
d2258 1
a2258 1
	eval $file=$xxx
d2277 1
d2284 24
a2316 1
		echo "Using the test built into your sh."
d2353 1
a2353 1
cat <<EOS >checkcc
d2356 1
a2356 1
cat <<'EOSC' >>checkcc
d2365 1
a2365 1
    if $cc -o try $ccflags try.c; then
d2394 10
a2403 1
                [yY]*) cc=gcc; ccname=gcc; ccflags=''; despair=no ;;
d2407 21
d2429 3
a2431 1
	    $cat >&4 <<EOM
d2437 1
a2437 2
            exit 1
        fi
d2459 1
a2459 1
*"ln -s")
d2463 4
a2466 1
		sh -c "PATH= test -h sym" >/dev/null 2>&1
d2469 25
a2493 6
		fi		
	fi
	if $test "X$issymlink" = X; then
		if  $test -h >/dev/null 2>&1; then
			issymlink="$test -h"
			echo "Your builtin 'test -h' may be broken, I'm using external '$test -h'." >&4
d2499 1
d2522 1
a2522 1
		*"ln -s:"*"test -"?)
d2552 2
a2553 2
			if test ! -f t/base/cond.t; then
				echo "Failed to create the symlinks.  Aborting." >&4
d2566 244
d2960 1
d3083 2
a3084 2
			osvers="$3"
			;;
d3123 5
a3127 1
					osvers=`echo "$3" | sed 's/^[xvt]//'`
d3136 1
a3136 1
		uts) osname=uts
d3139 2
d3210 8
d3292 1
a3292 1
		elif $test X$tans = X -o X$tans = Xnone ; then
d3429 70
d3501 12
a3512 1
*) dflt='n';;
d3519 4
a3522 5
Note that threading is a highly experimental feature, and
some known race conditions still remain.  If you choose to try
it, be very sure to not actually deploy it for production
purposes.  README.threads has more details, and is required
reading if you enable threads.
d3539 8
a3546 9
As of 5.5.640, Perl has two different internal threading implementations,
the 5.005 version (5005threads) and an interpreter-based version
(ithreads) that has one interpreter per thread.  Both are very 
experimental.  This arrangement exists to help developers work out
which one is better.

If you're a casual user, you probably don't want interpreter-threads
at this time.  There doesn't yet exist a way to create threads from
within Perl in this model, i.e., "use Thread;" will NOT work.
d3557 1
a3557 1
	rp='Use interpreter-based ithreads?'
d3592 10
d3658 11
d3771 3
d3784 1
a3784 1
$cat >gccvers.c <<EOM
d3797 2
a3798 2
if $cc -o gccvers $ccflags $ldflags gccvers.c; then
	gccversion=`./gccvers`
d3816 1
a3816 1
$rm -f gccvers*
d3855 11
a3865 24
: see how we invoke the C preprocessor
echo " "
echo "Now, how can we feed standard input to your C preprocessor..." >&4
cat <<'EOT' >testcpp.c
#define ABC abc
#define XYZ xyz
ABC.XYZ
EOT
cd ..
if test ! -f cppstdin; then
	if test "X$osname" = "Xaix" -a "X$gccversion" = X; then
		# AIX cc -E doesn't show the absolute headerfile
		# locations but we'll cheat by using the -M flag.
		echo 'cat >.$$.c; rm -f .$$.u; '"$cc"' ${1+"$@@"} -M -c .$$.c 2>/dev/null; test -s .$$.u && awk '"'"'$2 ~ /\.h$/ { print "# 0 \""$2"\"" }'"'"' .$$.u; rm -f .$$.o .$$.u; '"$cc"' -E ${1+"$@@"} .$$.c; rm .$$.c' > cppstdin
	else
		echo 'cat >.$$.c; '"$cc"' -E ${1+"$@@"} .$$.c; rm .$$.c' >cppstdin
	fi
else
	echo "Keeping your $hint cppstdin wrapper."
fi
chmod 755 cppstdin
wrapper=`pwd`/cppstdin
ok='false'
cd UU
d3867 5
a3871 128
if $test "X$cppstdin" != "X" && \
	$cppstdin $cppminus <testcpp.c >testcpp.out 2>&1 && \
	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1
then
	echo "You used to use $cppstdin $cppminus so we'll use that again."
	case "$cpprun" in
	'') echo "But let's see if we can live without a wrapper..." ;;
	*)
		if $cpprun $cpplast <testcpp.c >testcpp.out 2>&1 && \
			$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1
		then
			echo "(And we'll use $cpprun $cpplast to preprocess directly.)"
			ok='true'
		else
			echo "(However, $cpprun $cpplast does not work, let's see...)"
		fi
		;;
	esac
else
	case "$cppstdin" in
	'') ;;
	*)
		echo "Good old $cppstdin $cppminus does not seem to be of any help..."
		;;
	esac
fi

if $ok; then
	: nothing
elif echo 'Maybe "'"$cc"' -E" will work...'; \
	$cc -E <testcpp.c >testcpp.out 2>&1; \
	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
	echo "Yup, it does."
	x_cpp="$cc -E"
	x_minus='';
elif echo 'Nope...maybe "'"$cc"' -E -" will work...'; \
	$cc -E - <testcpp.c >testcpp.out 2>&1; \
	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
	echo "Yup, it does."
	x_cpp="$cc -E"
	x_minus='-';
elif echo 'Nope...maybe "'"$cc"' -P" will work...'; \
	$cc -P <testcpp.c >testcpp.out 2>&1; \
	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
	echo "Yipee, that works!"
	x_cpp="$cc -P"
	x_minus='';
elif echo 'Nope...maybe "'"$cc"' -P -" will work...'; \
	$cc -P - <testcpp.c >testcpp.out 2>&1; \
	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
	echo "At long last!"
	x_cpp="$cc -P"
	x_minus='-';
elif echo 'No such luck, maybe "'$cpp'" will work...'; \
	$cpp <testcpp.c >testcpp.out 2>&1; \
	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
	echo "It works!"
	x_cpp="$cpp"
	x_minus='';
elif echo 'Nixed again...maybe "'$cpp' -" will work...'; \
	$cpp - <testcpp.c >testcpp.out 2>&1; \
	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
	echo "Hooray, it works!  I was beginning to wonder."
	x_cpp="$cpp"
	x_minus='-';
elif echo 'Uh-uh.  Time to get fancy.  Trying a wrapper...'; \
	$wrapper <testcpp.c >testcpp.out 2>&1; \
	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
	x_cpp="$wrapper"
	x_minus=''
	echo "Eureka!"
else
	dflt=''
	rp="No dice.  I can't find a C preprocessor.  Name one:"
	. ./myread
	x_cpp="$ans"
	x_minus=''
	$x_cpp <testcpp.c >testcpp.out 2>&1
	if $contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
		echo "OK, that will do." >&4
	else
echo "Sorry, I can't get that to work.  Go find one and rerun Configure." >&4
		exit 1
	fi
fi

case "$ok" in
false)
	cppstdin="$x_cpp"
	cppminus="$x_minus"
	cpprun="$x_cpp"
	cpplast="$x_minus"
	set X $x_cpp
	shift
	case "$1" in
	"$cpp")
		echo "Perhaps can we force $cc -E using a wrapper..."
		if $wrapper <testcpp.c >testcpp.out 2>&1; \
			$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1
		then
			echo "Yup, we can."
			cppstdin="$wrapper"
			cppminus='';
		else
			echo "Nope, we'll have to live without it..."
		fi
		;;
	esac
	case "$cpprun" in
	"$wrapper")
		cpprun=''
		cpplast=''
		;;
	esac
	;;
esac

case "$cppstdin" in
"$wrapper"|'cppstdin') ;;
*) $rm -f $wrapper;;
esac
$rm -f testcpp.c testcpp.out

: decide how portable to be.  Allow command line overrides.
case "$d_portable" in
"$undef") ;;
*)	d_portable="$define" ;;
esac
d3933 3
a3935 1
	expr $fn : '.*(\(.*\)).*' | $tr ',' $trnl >getfile.ok
d4195 14
a4208 51
: Set private lib path
case "$plibpth" in
'') if ./mips; then
		plibpth="$incpath/usr/lib /usr/local/lib /usr/ccs/lib"
	fi;;
esac
case "$libpth" in
' ') dlist='';;
'') dlist="$loclibpth $plibpth $glibpth";;
*) dlist="$libpth";;
esac

: Now check and see which directories actually exist, avoiding duplicates
libpth=''
for xxx in $dlist
do
    if $test -d $xxx; then
		case " $libpth " in
		*" $xxx "*) ;;
		*) libpth="$libpth $xxx";;
		esac
    fi
done
$cat <<'EOM'

Some systems have incompatible or broken versions of libraries.  Among
the directories listed in the question below, please remove any you
know not to be holding relevant libraries, and add any that are needed.
Say "none" for none.

EOM
case "$libpth" in
'') dflt='none';;
*)
	set X $libpth
	shift
	dflt=${1+"$@@"}
	;;
esac
rp="Directories to use for library searches?"
. ./myread
case "$ans" in
none) libpth=' ';;
*) libpth="$ans";;
esac

: compute shared library extension
case "$so" in
'')
	if xxx=`./loc libc.sl X $libpth`; $test -f "$xxx"; then
		dflt='sl'
d4210 1
a4210 1
		dflt='so'
d4212 7
a4218 4
	;;
*) dflt="$so";;
esac
$cat <<EOM
d4220 17
a4236 17
On some systems, shared libraries may be available.  Answer 'none' if
you want to suppress searching of shared libraries for the remainder
of this configuration.

EOM
rp='What is the file extension used for shared libraries?'
. ./myread
so="$ans"

: Define several unixisms.
: Hints files or command line option can be used to override them.
: The convoluted testing is in case hints files set either the old
: or the new name.
case "$_exe" in
'')	case "$exe_ext" in
    '')	;;
	*)	_exe="$exe_ext" ;;
d4238 188
a4425 6
	;;
esac
case "$_a" in
'')	case "$lib_ext" in
    '')	_a='.a';;
	*)	_a="$lib_ext" ;;
a4452 20
case "$usesocks" in
$define|true|[yY]*)	dflt='y';;
*) dflt='n';;
esac
cat <<EOM

Perl can be built to use the SOCKS proxy protocol library.  To do so,
Configure must be run with -Dusesocks.

If this doesn't make any sense to you, just accept the default '$dflt'.
EOM
rp='Build Perl for SOCKS?'
. ./myread
case "$ans" in
y|Y)	val="$define" ;;     
*)      val="$undef" ;;
esac
set usesocks
eval $setvar

d4477 1
a4477 1
		xxx=`ls $thisdir/lib$thislib.$so.[0-9] 2>/dev/null|tail -1`
d4689 4
a4692 1
cppflags="$ccflags"
d4815 1
a4815 1
	./try
d4822 2
a4823 2
	if $sh -c './try' >>try.msg 2>&1; then
		xxx=`./try`
a4872 56
: define an is-a-typedef? function
typedef='type=$1; var=$2; def=$3; shift; shift; shift; inclist=$@@;
case "$inclist" in
"") inclist="sys/types.h";;
esac;
eval "varval=\$$var";
case "$varval" in
"")
	$rm -f temp.c;
	for inc in $inclist; do
		echo "#include <$inc>" >>temp.c;
	done;
	echo "#ifdef $type" >> temp.c;
	echo "printf(\"We have $type\");" >> temp.c;
	echo "#endif" >> temp.c;
	$cppstdin $cppflags $cppminus < temp.c >temp.E 2>/dev/null;
	if $contains $type temp.E >/dev/null 2>&1; then
		eval "$var=\$type";
	else
		eval "$var=\$def";
	fi;
	$rm -f temp.?;;
*) eval "$var=\$varval";;
esac'

: define an is-a-typedef? function that prompts if the type is not available.
typedef_ask='type=$1; var=$2; def=$3; shift; shift; shift; inclist=$@@;
case "$inclist" in
"") inclist="sys/types.h";;
esac;
eval "varval=\$$var";
case "$varval" in
"")
	$rm -f temp.c;
	for inc in $inclist; do
		echo "#include <$inc>" >>temp.c;
	done;
	echo "#ifdef $type" >> temp.c;
	echo "printf(\"We have $type\");" >> temp.c;
	echo "#endif" >> temp.c;
	$cppstdin $cppflags $cppminus < temp.c >temp.E 2>/dev/null;
	echo " " ;
	echo "$rp" | $sed -e "s/What is/Looking for/" -e "s/?/./";
	if $contains $type temp.E >/dev/null 2>&1; then
		echo "$type found." >&4;
		eval "$var=\$type";
	else
		echo "$type NOT found." >&4;
		dflt="$def";
		. ./myread ;
		eval "$var=\$ans";
	fi;
	$rm -f temp.?;;
*) eval "$var=\$varval";;
esac'

d4889 1
a4889 1
	$cat >intsize.c <<'EOCP'
d4899 3
a4901 3
	set intsize
	if eval $compile_ok && ./intsize > /dev/null; then
		eval `./intsize`
d4928 1
a4928 1
$rm -f intsize intsize.*
d4930 15
a4944 4
: see what type lseek is declared as in the kernel
rp="What is the type used for lseek's offset on this system?"
set off_t lseektype long stdio.h sys/types.h
eval $typedef_ask
d4946 6
a4951 4
echo " "
echo "Checking to see how big your file offsets are..." >&4
$cat >try.c <<EOCP
#include <sys/types.h>
d4955 140
a5094 2
    printf("%d\n", (int)sizeof($lseektype));
    return(0); 
d5098 3
a5100 3
if eval $compile_ok; then
	lseeksize=`./try`
	echo "Your file offsets are $lseeksize bytes long."
d5102 2
a5103 6
	dflt=$longsize
	echo " "
	echo "(I can't seem to compile the test program.  Guessing...)"
	rp="What is the size of your file offsets (in bytes)?"
	. ./myread
	lseeksize="$ans"
d5106 2
d5109 1
a5109 5
: see what type file positions are declared as in the library
rp="What is the type for file position used by fsetpos()?"
set fpos_t fpostype long stdio.h sys/types.h
eval $typedef_ask

d5111 2
a5112 6
case "$fpostype" in
*_t) zzz="$fpostype"	;;
*)   zzz="fpos_t"	;;
esac
echo "Checking the size of $zzz..." >&4 
cat > try.c <<EOCP
d5114 5
a5118 5
#include <stdio.h>
int main() {
    printf("%d\n", (int)sizeof($fpostype));
    exit(0);
}
d5121 3
a5123 10
if eval $compile_ok; then
	yyy=`./try`
	case "$yyy" in
	'')	fpossize=4
		echo "(I can't execute the test program--guessing $fpossize.)" >&4
		;;
	*)	fpossize=$yyy
		echo "Your $zzz is $fpossize bytes long."
		;;
	esac
d5125 2
a5126 6
	dflt="$longsize"
	echo " " >&4
	echo "(I can't compile the test program.  Guessing...)" >&4
	rp="What is the size of your file positions (in bytes)?"
	. ./myread
	fpossize="$ans"
d5128 3
d5133 2
d5136 42
a5177 33
# Backward compatibility (uselfs is deprecated).
case "$uselfs" in
"$define"|true|[yY]*)
	cat <<EOM >&4

*** Configure -Duselfs is deprecated, using -Duselargefiles instead.
EOM
	uselargefiles="$define"
	;;
esac                          

case "$lseeksize:$fpossize" in
8:8) cat <<EOM

You can have files larger than 2 gigabytes.
EOM
   val="$define" ;;
*)    case "$uselargefiles" in
   "$undef"|false|[nN]*) dflt='n' ;;
   *)	dflt='y' ;;
   esac
   cat <<EOM

Perl can be built to understand large files (files larger than 2 gigabytes)
on some systems.  To do so, Configure can be run with -Duselargefiles.

If this doesn't make any sense to you, just accept the default '$dflt'.
EOM
   rp='Try to understand large files, if available?'
   . ./myread
   case "$ans" in
   y|Y) 	val="$define" ;;
   *)   	val="$undef"  ;;
a5180 70
set uselargefiles
eval $setvar
case "$uselargefiles" in
"$define")
: Look for a hint-file generated 'call-back-unit'.  If the
: user has specified that a large files perl is to be built,
: we may need to set or change some other defaults.
	if $test -f uselargefiles.cbu; then
		echo "Your platform has some specific hints for large file builds, using them..."
		. ./uselargefiles.cbu
		echo " "
		echo "Rechecking to see how big your file offsets are..." >&4
		$cat >try.c <<EOCP
#include <sys/types.h>
#include <stdio.h>
int main()
{
    printf("%d\n", (int)sizeof($lseektype));
    return(0); 
}
EOCP
		set try
		if eval $compile_ok; then
			lseeksize=`./try`
			$echo "Your file offsets are now $lseeksize bytes long."
		else
			dflt="$lseeksize"
			echo " "
			echo "(I can't seem to compile the test program.  Guessing...)"
			rp="What is the size of your file offsets (in bytes)?"
			. ./myread
			lseeksize="$ans"
		fi
		case "$fpostype" in
		*_t) zzz="$fpostype"	;;
		*)   zzz="fpos_t"	;;
		esac
		$echo $n "Rechecking the size of $zzz...$c" >&4 
		$cat > try.c <<EOCP
#include <sys/types.h>
#include <stdio.h>
int main() {
    printf("%d\n", (int)sizeof($fpostype));
    exit(0);
}
EOCP
		set try
		if eval $compile_ok; then
			yyy=`./try`
			dflt="$lseeksize"
			case "$yyy" in
			'')	echo " "
				echo "(I can't execute the test program--guessing $fpossize.)" >&4
				;;
			*)	fpossize=$yyy
				echo " $fpossize bytes." >&4
				;;
			esac
		else
			dflt="$fpossize"
			echo " "
			echo "(I can't compile the test program.  Guessing...)" >&4
			rp="What is the size of your file positions (in bytes)?"
			. ./myread
			fpossize="$ans"
		fi
		$rm -f try.c try
	fi
	;;
esac
d5182 3
a5184 6

case "$usemorebits" in
"$define"|true|[yY]*)
	use64bitint="$define"
	uselongdouble="$define"
	usemorebits="$define"
d5186 2
a5187 1
*)	usemorebits="$undef"
d5265 4
d5276 1
d5305 1
d5367 6
a5372 1
cat >gnulibc.c <<EOM
d5374 1
a5374 1
int main()
d5377 11
a5387 1
    exit(0);
d5389 1
a5389 1
    exit(1);
d5392 3
a5394 3
EOM
set gnulibc
if eval $compile_ok && ./gnulibc; then
d5396 2
a5397 1
	echo "You are using the GNU C Library"
d5400 1
d5403 1
a5403 1
$rm -f gnulibc*
a5508 1
libnames='';
d5656 1
a5656 1
xrun='eval "<libc.tmp $com >libc.list"; echo "done" >&4'
d5770 1
a5770 1
	$sed -n 's/^\([^ 	]*\)[ 	]*syscall[0-9]*$/\1/p' /lib/syscalls.exp >>libc.list
d5833 259
a6091 9
	case "$was" in
	$define) echo "$sym() found." >&4;;
	*) echo "$sym() NOT found." >&4;;
	esac;;
esac'

: see if sqrtl exists
set sqrtl d_sqrtl
eval $inlibc
d6137 18
a6154 3
case "$uselongdouble:$d_sqrtl" in
$define:$undef)
		$cat <<EOM >&4
d6157 3
a6159 2
*** the mathematic functions for long doubles.  I'm disabling the use
*** of long doubles.
d6162 1
a6163 42
	;;
esac

: check for length of double
echo " "
case "$doublesize" in
'')
	echo "Checking to see how big your double precision numbers are..." >&4
	$cat >try.c <<'EOCP'
#include <stdio.h>
int main()
{
    printf("%d\n", (int)sizeof(double));
    exit(0);
}
EOCP
	set try
	if eval $compile_ok; then
		doublesize=`./try`
		echo "Your double is $doublesize bytes long."
	else
		dflt='8'
		echo "(I can't seem to compile the test program.  Guessing...)"
		rp="What is the size of a double precision number (in bytes)?"
		. ./myread
		doublesize="$ans"
	fi
	;;
esac
$rm -f try.c try

: check for long doubles
echo " "
echo "Checking to see if you have long double..." >&4
echo 'int main() { long double x = 7.0; }' > try.c
set try
if eval $compile; then
	val="$define"
	echo "You have long double."
else
	val="$undef"
	echo "You do not have long double."
a6164 35
$rm try.*
set d_longdbl
eval $setvar

: check for length of long double
case "${d_longdbl}${longdblsize}" in
$define)
	echo " "
	echo "Checking to see how big your long doubles are..." >&4
	$cat >try.c <<'EOCP'
#include <stdio.h>
int main()
{
	printf("%d\n", sizeof(long double));
}
EOCP
	set try
	set try
	if eval $compile; then
		longdblsize=`./try$exe_ext`
		echo "Your long doubles are $longdblsize bytes long."
	else
		dflt='8'
		echo " "
		echo "(I can't seem to compile the test program.  Guessing...)" >&4
		rp="What is the size of a long double (in bytes)?"
		. ./myread
		longdblsize="$ans"
	fi
	if $test "X$doublesize" = "X$longdblsize"; then
		echo "(That isn't any different from an ordinary double.)"
	fi	
	;;
esac
$rm -f try.* try
d6188 4
d6252 1
a6252 1
		"...but long doubles are equal to doubles, not changing architecture name." >&4
d6269 3
d6273 1
a6273 1
        *-perlio*) echo "...and architecture name already has -perlio." >&4
d6275 1
a6275 1
        *)      archname="$archname-perlio"
d6318 5
d6328 1
a6328 1
*)	if test -d /afs; then
a6399 1

d6410 1
d6418 7
d6426 9
a6434 1
$echo "(You have $package version $patchlevel subversion $subversion.)"
a6544 39

: Binary compatibility with 5.005 is not possible for builds
: with advanced features
case "$usethreads$usemultiplicity" in
*define*)
	bincompat5005="$undef"
	d_bincompat5005="$undef"
	;;
*)	$cat <<EOM

This version of Perl can be compiled for binary compatibility with 5.005.
If you decide to do so, you will be able to continue using most of the
extensions that were compiled for Perl 5.005.

EOM
	case "$bincompat5005$d_bincompat5005" in
	*"$undef"*) dflt=n ;;
	*) dflt=y ;;
	esac
	rp='Binary compatibility with Perl 5.005?'
	. ./myread
	case "$ans" in
	y*) val="$define" ;;
	*)  val="$undef" ;;
	esac
	set d_bincompat5005
	eval $setvar
	case "$d_bincompat5005" in
	"$define")
		bincompat5005="$define"
		;;
	*)	bincompat5005="$undef"
		d_bincompat5005="$undef"
		;;
	esac
	;;
esac


d6628 1
a6628 1
	echo "No need to emulate SUID scripts since they are secure here." >& 4
d6649 135
a6783 1
	esac
d6786 5
a6790 2
set d_dosuid
eval $setvar
d6792 2
a6793 32
: determine filename position in cpp output
echo " "
echo "Computing filename position in cpp output for #include directives..." >&4
echo '#include <stdio.h>' > foo.c
$cat >fieldn <<EOF
$startsh
$cppstdin $cppflags $cppminus <foo.c 2>/dev/null | \
$grep '^[ 	]*#.*stdio\.h' | \
while read cline; do
	pos=1
	set \$cline
	while $test \$# -gt 0; do
		if $test -r \`echo \$1 | $tr -d '"'\`; then
			echo "\$pos"
			exit 0
		fi
		shift
		pos=\`expr \$pos + 1\`
	done
done
EOF
chmod +x fieldn
fieldn=`./fieldn`
$rm -f foo.c fieldn
case $fieldn in
'') pos='???';;
1) pos=first;;
2) pos=second;;
3) pos=third;;
*) pos="${fieldn}th";;
esac
echo "Your cpp writes the filename in the $pos field of the line."
d6795 5
a6799 37
: locate header file
$cat >findhdr <<EOF
$startsh
wanted=\$1
name=''
for usrincdir in $usrinc
do
	if test -f \$usrincdir/\$wanted; then
		echo "\$usrincdir/\$wanted"
		exit 0
	fi
done
awkprg='{ print \$$fieldn }'
echo "#include <\$wanted>" > foo\$\$.c
$cppstdin $cppminus $cppflags < foo\$\$.c 2>/dev/null | \
$grep "^[ 	]*#.*\$wanted" | \
while read cline; do
	name=\`echo \$cline | $awk "\$awkprg" | $tr -d '"'\`
	case "\$name" in
	*[/\\\\]\$wanted) echo "\$name"; exit 1;;
	*[\\\\/]\$wanted) echo "\$name"; exit 1;;
	*) exit 2;;
	esac;
done;
#
# status = 0: grep returned 0 lines, case statement not executed
# status = 1: headerfile found
# status = 2: while loop executed, no headerfile found
#
status=\$?
$rm -f foo\$\$.c;
if test \$status -eq 1; then
	exit 0;
fi
exit 1
EOF
chmod +x findhdr
d6801 1
a6801 29
: define an alternate in-header-list? function
inhdr='echo " "; td=$define; tu=$undef; yyy=$@@;
cont=true; xxf="echo \"<\$1> found.\" >&4";
case $# in 2) xxnf="echo \"<\$1> NOT found.\" >&4";;
*) xxnf="echo \"<\$1> NOT found, ...\" >&4";;
esac;
case $# in 4) instead=instead;; *) instead="at last";; esac;
while $test "$cont"; do
	xxx=`./findhdr $1`
	var=$2; eval "was=\$$2";
	if $test "$xxx" && $test -r "$xxx";
	then eval $xxf;
	eval "case \"\$$var\" in $undef) . ./whoa; esac"; eval "$var=\$td";
		cont="";
	else eval $xxnf;
	eval "case \"\$$var\" in $define) . ./whoa; esac"; eval "$var=\$tu"; fi;
	set $yyy; shift; shift; yyy=$@@;
	case $# in 0) cont="";;
	2) xxf="echo \"but I found <\$1> $instead.\" >&4";
		xxnf="echo \"and I did not find <\$1> either.\" >&4";;
	*) xxf="echo \"but I found <\$1\> instead.\" >&4";
		xxnf="echo \"there is no <\$1>, ...\" >&4";;
	esac;
done;
while $test "$yyy";
do set $yyy; var=$2; eval "was=\$$2";
	eval "case \"\$$var\" in $define) . ./whoa; esac"; eval "$var=\$tu";
	set $yyy; shift; shift; yyy=$@@;
done'
d6803 8
a6810 3
: see if this is a malloc.h system
set malloc.h i_malloc
eval $inhdr
a6811 3
: see if stdlib is available
set stdlib.h i_stdlib
eval $inhdr
d6816 7
a6822 2
''|[yY]*|true|$define)	dflt='y' ;;
*)	dflt='n' ;;
d7212 52
d7267 1
a7267 1
'')	for tdir in `echo "$binexp:$PATH" | $sed "s/$path_sep/ /g"`; do
d7269 1
a7269 1
		if $test -x $tdir/perl && $tdir/perl -Mless -e 'use 5.005;' >/dev/null 2>&1; then
d7272 2
a7273 2
		elif $test -x $tdir/perl5 && $tdir/perl5 -Mless -e 'use 5.005;' >/dev/null 2>&1; then
			perl5=$tdir/perl
d7338 1
a7338 1
'')	if test -x "$perl5"; then
d7345 1
a7345 1
*)  dflt="$inc_version_list" ;;
d7351 1
a7351 5
5.005) case "$bincompat5005" in
       $define|true|[yY]*) ;;
       *) dflt=none ;;
       esac
       ;;
d7353 1
a7353 1
$cat <<'EOM'
d7464 1
a7464 1
	tdir=`pwd`; cd $rsrc; $ls -C $dldir/dl*.xs; cd $tdir
d7492 1
d7529 1
a7529 1
		if $cc $ccflags try.c >/dev/null 2>&1 && ./a.out; then
d7583 1
a7583 1
		-L*|-R*)
d7714 2
a7715 2
		cygwin*) # include version
			dflt=`echo libperl$version | sed -e 's/\./_/g'`$lib_ext
d7792 1
a7792 1
	solaris|netbsd)
d7795 1
a7795 1
	freebsd|openbsd)
d7798 1
a7798 1
	linux|irix*|dec_osf)
d7853 3
a7855 2
	syspath='/usr/man/man1 /usr/man/mann /usr/man/manl /usr/man/local/man1'
	syspath="$syspath /usr/man/u_man/man1 /usr/share/man/man1"
d7887 2
a7888 1
	lookpath="$prefixexp/man/man1 $prefixexp/man/l_man/man1"
d8078 1
a8078 1
if $test -d /usr/etc/yp || $test -d /etc/yp; then
d8185 3
d8288 1
a8288 1
			dflt='.uucp'
d8406 6
d8456 4
a8459 1
	perlpath="$binexp/perl"
d8520 105
a8624 3
	installscript=`echo $scriptdirexp | sed "s#^$prefix#$installprefix#"`
else
	installscript="$scriptdirexp"
d8626 6
d8633 4
a8636 4
: determine where add-on public executables go
case "$sitebin" in
'')	dflt=$siteprefix/bin ;;
*)	dflt=$sitebin ;;
d8638 20
a8657 8
fn=d~
rp='Pathname where the add-on public executables should be installed?'
. ./getfile
sitebin="$ans"
sitebinexp="$ansexp"
: Change installation prefix, if necessary.
if $test X"$prefix" != X"$installprefix"; then
	installsitebin=`echo $sitebinexp | sed "s#^$prefix#$installprefix#"`
d8659 6
a8664 1
	installsitebin="$sitebinexp"
a8666 5
case "$useperlio" in
$define|true|[yY]*)	dflt='y';;
*) dflt='n';;
esac
cat <<EOM
d8668 26
a8693 7
Previous version of $package used the standard IO mechanisms as defined
in <stdio.h>.  Versions 5.003_02 and later of perl allow alternate IO
mechanisms via a "PerlIO" abstraction, but the stdio mechanism is still
the default.  This abstraction layer can use AT&T's sfio (if you already
have sfio installed) or regular stdio.  Using PerlIO with sfio may cause
problems with some extension modules.  Using PerlIO with stdio is safe,
but it is slower than plain stdio and therefore is not the default.
d8697 76
a8772 9
rp='Use the experimental PerlIO abstraction layer?'
. ./myread
case "$ans" in
y|Y) 
	val="$define"
	;;     
*)      
	echo "Ok, doing things the stdio way"
	val="$undef"
a8774 2
set useperlio
eval $setvar 
d8798 1
a8798 105
	installvendorbin="$vendorbinexp"
fi

: see if qgcvt exists
set qgcvt d_qgcvt
eval $inlibc

echo " "

if $test X"$d_longdbl" = X"$define"; then

echo "Checking how to print long doubles..." >&4

if $test X"$sPRIfldbl" = X -a X"$doublesize" = X"$longdblsize"; then
	$cat >try.c <<'EOCP'
#include <sys/types.h>
#include <stdio.h>
int main() {
  double d = 123.456;
  printf("%.3f\n", d);
}
EOCP
	set try
	if eval $compile; then
		yyy=`./try$exe_ext`
		case "$yyy" in
		123.456)
			sPRIfldbl='"f"'; sPRIgldbl='"g"'; sPRIeldbl='"e"';
                	sPRIFUldbl='"F"'; sPRIGUldbl='"G"'; sPRIEUldbl='"E"';
			echo "We will use %f."
			;;
		esac
	fi
fi

if $test X"$sPRIfldbl" = X; then
	$cat >try.c <<'EOCP'
#include <sys/types.h>
#include <stdio.h>
int main() {
  long double d = 123.456;
  printf("%.3llf\n", d);
}
EOCP
	set try
	if eval $compile; then
		yyy=`./try$exe_ext`
		case "$yyy" in
		123.456)
			sPRIfldbl='"llf"'; sPRIgldbl='"llg"'; sPRIeldbl='"lle"';
                	sPRIFUldbl='"llF"'; sPRIGUldbl='"llG"'; sPRIEUldbl='"llE"';
			echo "We will use %llf."
			;;
		esac
	fi
fi

if $test X"$sPRIfldbl" = X; then
	$cat >try.c <<'EOCP'
#include <sys/types.h>
#include <stdio.h>
int main() {
  long double d = 123.456;
  printf("%.3Lf\n", d);
}
EOCP
	set try
	if eval $compile; then
		yyy=`./try$exe_ext`
		case "$yyy" in
		123.456)
			sPRIfldbl='"Lf"'; sPRIgldbl='"Lg"'; sPRIeldbl='"Le"';
                	sPRIFUldbl='"LF"'; sPRIGUldbl='"LG"'; sPRIEUldbl='"LE"';
			echo "We will use %Lf."
			;;
		esac
	fi
fi

if $test X"$sPRIfldbl" = X; then
	$cat >try.c <<'EOCP'
#include <sys/types.h>
#include <stdio.h>
int main() {
  long double d = 123.456;
  printf("%.3lf\n", d);
}
EOCP
	set try
	if eval $compile; then
		yyy=`./try$exe_ext`
		case "$yyy" in
		123.456)
			sPRIfldbl='"lf"'; sPRIgldbl='"lg"'; sPRIeldbl='"le"';
                	sPRIFUldbl='"lF"'; sPRIGUldbl='"lG"'; sPRIEUldbl='"lE"';
			echo "We will use %lf."
			;;
		esac
	fi
fi

if $test X"$sPRIfldbl" = X; then
	echo "Cannot figure out how to print long doubles." >&4
else
	sSCNfldbl=$sPRIfldbl	# expect consistency
d8801 3
a8803 1
$rm -f try try.*
d8805 1
a8805 1
fi # d_longdbl
d8807 1
a8807 10
case "$sPRIfldbl" in
'')	d_PRIfldbl="$undef"; d_PRIgldbl="$undef"; d_PRIeldbl="$undef"; 
	d_PRIFUldbl="$undef"; d_PRIGUldbl="$undef"; d_PRIEUldbl="$undef"; 
	d_SCNfldbl="$undef";
	;;
*)	d_PRIfldbl="$define"; d_PRIgldbl="$define"; d_PRIeldbl="$define"; 
	d_PRIFUldbl="$define"; d_PRIGUldbl="$define"; d_PRIEUldbl="$define"; 
	d_SCNfldbl="$define";
	;;
esac
a8808 1
: Check how to convert floats to strings.
d8836 2
a8837 1
#if defined(USE_LONG_DOUBLE) && defined(HAS_LONG_DOUBLE) && defined(HAS_PRIgldbl)
d8840 3
d8885 15
d8938 13
d8954 15
a8968 6
case "$d_Gconvert" in
gconvert*) xxx_list='gconvert gcvt sprintf' ;;
gcvt*) xxx_list='gcvt gconvert sprintf' ;;
sprintf*) xxx_list='sprintf gconvert gcvt' ;;
*) xxx_list='gconvert gcvt sprintf' ;;
esac
d8970 27
a8996 8
case "$d_longdbl$uselongdouble$d_PRIgldbl" in
"$define$define$define")
    # for long doubles prefer first qgcvt, then sprintf
    xxx_list="`echo $xxx_list|sed s/sprintf//`" 
    xxx_list="sprintf $xxx_list"
    case "$d_qgcvt" in
    "$define") xxx_list="qgcvt $xxx_list" ;;
    esac
d9006 1
a9006 1
		if ./try; then
d9011 1
d9017 7
a9023 1
	
d9031 2
d9038 2
d9082 235
a9316 7
	elif $test `./findhdr unistd.h` && \
		$cc -o access $cppflags -DI_UNISTD access.c >/dev/null 2>&1 ; then
		echo "<unistd.h> defines the *_OK access constants." >&4
	else
		echo "I can't find the four *_OK access constants--I'll use mine." >&4
	fi
	;;
a9317 1
$rm -f access*
d9319 2
a9320 6
: see if accessx exists
set accessx d_accessx
eval $inlibc

: see if alarm exists
set alarm d_alarm
d9322 49
d9423 1
a9423 1
	$cat >set.c <<EOP
d9445 1
a9445 1
	if $cc -o set -DTRY_BSD_PGRP $ccflags $ldflags set.c $libs >/dev/null 2>&1 && ./set; then
d9448 1
a9448 1
	elif $cc -o set $ccflags $ldflags set.c $libs >/dev/null 2>&1 && ./set; then
d9475 1
a9475 1
$rm -f set set.c
d9485 1
a9485 1
	$cat >set.c <<EOP
d9507 1
a9507 1
	if $cc -o set -DTRY_BSD_PGRP $ccflags $ldflags set.c $libs >/dev/null 2>&1 && ./set; then
d9510 1
a9510 1
	elif $cc -o set $ccflags $ldflags set.c $libs >/dev/null 2>&1 && ./set; then
d9537 1
a9537 1
$rm -f set set.c
d9627 1
a9627 1
	./try
d9723 1
a9723 1
	./try
d9746 1
a9746 1
	$cat >vprintf.c <<'EOF'
d9761 2
a9762 2
	set vprintf
	if eval $compile && ./vprintf; then
d9774 1
d9793 120
d9936 8
a9943 8
if set crypt val -f d_crypt; eval $csym; $val; then
	echo 'crypt() found.' >&4
	val="$define"
	cryptlib=''
else
	cryptlib=`./loc Slibcrypt$_a "" $xlibpth`
	if $test -z "$cryptlib"; then
		cryptlib=`./loc Mlibcrypt$_a "" $xlibpth`
d9945 22
a9966 1
		cryptlib=-lcrypt
d9968 53
a10020 19
	if $test -z "$cryptlib"; then
		cryptlib=`./loc Llibcrypt$_a "" $xlibpth`
	else
		cryptlib=-lcrypt
	fi
	if $test -z "$cryptlib"; then
		cryptlib=`./loc libcrypt$_a "" $libpth`
	else
		cryptlib=-lcrypt
	fi
	if $test -z "$cryptlib"; then
		echo 'crypt() NOT found.' >&4
		val="$undef"
	else
		val="$define"
	fi
fi
set d_crypt
eval $setvar
d10034 94
d10167 35
d10274 57
d10380 1
a10380 1
#include <dlfcn.h>      /* the dynamic linker include file for Sunos/Solaris */
d10424 3
a10426 3
		$ld -o dyna.$dlext $lddlflags tmp-dyna${_o} > /dev/null 2>&1 && 
		$cc -o fred $ccflags $ldflags $cccdlflags $ccdlflags fred.c $libs > /dev/null 2>&1; then
		xxx=`./fred`
d10443 1
a10443 1
$rm -f fred fred.? dyna.$dlext dyna.? tmp-dyna.?
d10448 40
a10487 18
hasproto='varname=$1; func=$2; shift; shift;
while $test $# -ge 2; do
	case "$1" in
	$define) echo "#include <$2>";;
	esac ;
    shift 2;
done > try.c;
$cppstdin $cppflags $cppminus < try.c > tryout.c 2>/dev/null;
if $contains "$func.*(" tryout.c >/dev/null 2>&1; then
	echo "$func() prototype found.";
	val="$define";
else
	echo "$func() prototype NOT found.";
	val="$undef";
fi;
set $varname;
eval $setvar;
$rm -f try.c tryout.c'
d10506 297
a10802 3
: see if endhostent exists
set endhostent d_endhent
eval $inlibc
d10804 14
a10817 3
: see if endnetent exists
set endnetent d_endnent
eval $inlibc
d10819 2
a10820 2
: see if endprotoent exists
set endprotoent d_endpent
d10822 41
d10864 2
a10865 2
: see if endpwent exists
set endpwent d_endpwent
d10868 2
a10869 2
: see if endservent exists
set endservent d_endsent
d10871 41
d10915 1
a10915 1
$cat >open3.c <<'EOCP'
d10934 1
a10934 1
		set open3 -DI_SYS_FILE && eval $compile; then
d10937 1
a10937 1
	if ./open3; then
d10945 1
a10945 1
		set open3 -DI_FCNTL && eval $compile; then
d10948 1
a10948 1
	if ./open3; then
d10961 1
a10961 1
$rm -f open3*
d10985 53
d11042 5
a11046 5
	case "$h_fcntl" in
	true) echo "#include <fcntl.h>" > head.c;;
	*) echo "#include <sys/fcntl.h>" > head.c;;
	esac
	;;
d11053 1
a11053 1
	$cat >>try.c <<'EOCP'
d11055 5
d11078 1
a11078 1
		o_nonblock=`./try`
d11101 5
d11166 1
a11166 1
		write(3, string, strlen(string));
d11180 1
a11180 1
		echo "./try >try.out 2>try.ret 3>try.err || exit 4" >>mtry
d11242 4
d11260 1
a11260 1
$cat >try.c <<'EOCP'
d11264 2
d11274 2
d11284 37
a11320 214
echo "Checking if fcntl-based file locking works... "
case "$d_fcntl" in
"$define")
	set try
	if eval $compile_ok; then
		if ./try; then
			echo "Yes, it seems to work."
			val="$define"
		else
			echo "Nope, it didn't work."
			val="$undef"
		fi
	else
		echo "I'm unable to compile the test program, so I'll assume not."
		val="$undef"
	fi
	;;
*) val="$undef";
	echo "Nope, since you don't even have fcntl()."
	;;
esac
set d_fcntl_can_lock
eval $setvar
$rm -f try*


hasfield='varname=$1; struct=$2; field=$3; shift; shift; shift;
while $test $# -ge 2; do
	case "$1" in
	$define) echo "#include <$2>";;
	esac ;
    shift 2;
done > try.c;
echo "int main () { struct $struct foo; char* bar; bar = (char*)foo.$field; }" >> try.c;
set try;
if eval $compile; then
	val="$define";
else
	val="$undef";
fi;
set $varname;
eval $setvar;
$rm -f try.c try.o'

socketlib=''
sockethdr=''
: see whether socket exists
echo " "
$echo $n "Hmm... $c" >&4
if set socket val -f d_socket; eval $csym; $val; then
	echo "Looks like you have Berkeley networking support." >&4
	d_socket="$define"
	if set setsockopt val -f; eval $csym; $val; then
		d_oldsock="$undef"
	else
		echo "...but it uses the old BSD 4.1c interface, rather than 4.2." >&4
		d_oldsock="$define"
	fi
else
	if $contains socklib libc.list >/dev/null 2>&1; then
		echo "Looks like you have Berkeley networking support." >&4
		d_socket="$define"
		: we will have to assume that it supports the 4.2 BSD interface
		d_oldsock="$undef"
	else
		echo "You don't have Berkeley networking in libc$_a..." >&4
		if test "X$d_socket" = "X$define"; then
		   echo "...but you seem to believe that you have sockets." >&4
		else
			for net in net socket
			do
				if test -f /usr/lib/lib$net$_a; then
					( ($nm $nm_opt /usr/lib/lib$net$_a | eval $nm_extract) ||  \
					$ar t /usr/lib/lib$net$_a) 2>/dev/null >> libc.list
					if $contains socket libc.list >/dev/null 2>&1; then
						d_socket="$define"
						socketlib="-l$net"
						case "$net" in
						net)
							echo "...but the Wollongong group seems to have hacked it in." >&4
							sockethdr="-I/usr/netinclude"
							;;
						esac
						echo "Found Berkeley sockets interface in lib$net." >& 4 
						if $contains setsockopt libc.list >/dev/null 2>&1; then
							d_oldsock="$undef"
						else
							echo "...using the old BSD 4.1c interface, rather than 4.2." >&4
							d_oldsock="$define"
						fi
						break
					fi
				fi
			done
			if test "X$d_socket" != "X$define"; then
			   echo "or anywhere else I see." >&4
			   d_socket="$undef"
			   d_oldsock="$undef"
			fi
		fi
	fi
fi

: see if socketpair exists
set socketpair d_sockpair
eval $inlibc


echo " "
echo "Checking the availability of certain socket constants..." >& 4
for ENUM in MSG_CTRUNC MSG_DONTROUTE MSG_OOB MSG_PEEK MSG_PROXY SCM_RIGHTS; do
	enum=`$echo $ENUM|./tr '[A-Z]' '[a-z]'`
	$cat >try.c <<EOF
#include <sys/types.h>
#include <sys/socket.h>
int main() {
    int i = $ENUM;
}
EOF
	val="$undef"
	set try; if eval $compile; then
		val="$define"
	fi
	set d_${enum}; eval $setvar
	$rm -f try.c try
done

: see if sys/select.h has to be included
set sys/select.h i_sysselct
eval $inhdr

: see if we should include time.h, sys/time.h, or both
echo " "
if test "X$timeincl" = X; then
	echo "Testing to see if we should include <time.h>, <sys/time.h> or both." >&4
	$echo $n "I'm now running the test program...$c"
	$cat >try.c <<'EOCP'
#include <sys/types.h>
#ifdef I_TIME
#include <time.h>
#endif
#ifdef I_SYSTIME
#ifdef SYSTIMEKERNEL
#define KERNEL
#endif
#include <sys/time.h>
#endif
#ifdef I_SYSSELECT
#include <sys/select.h>
#endif
int main()
{
	struct tm foo;
#ifdef S_TIMEVAL
	struct timeval bar;
#endif
#ifdef S_TIMEZONE
	struct timezone tzp;
#endif
	if (foo.tm_sec == foo.tm_sec)
		exit(0);
#ifdef S_TIMEVAL
	if (bar.tv_sec == bar.tv_sec)
		exit(0);
#endif
	exit(1);
}
EOCP
	flags=''
	for s_timezone in '-DS_TIMEZONE' ''; do
	sysselect=''
	for s_timeval in '-DS_TIMEVAL' ''; do
	for i_systimek in '' '-DSYSTIMEKERNEL'; do
	for i_time in '' '-DI_TIME'; do
	for i_systime in '-DI_SYSTIME' ''; do
		case "$flags" in
		'') $echo $n ".$c"
			set try $i_time $i_systime $i_systimek $sysselect $s_timeval $s_timezone
			if eval $compile; then
				set X $i_time $i_systime $i_systimek $sysselect $s_timeval
				shift
				flags="$*"
				echo " "
				$echo $n "Succeeded with $flags$c"
			fi
			;;
		esac
	done
	done
	done
	done
	done
	timeincl=''
	echo " "
	case "$flags" in
	*SYSTIMEKERNEL*) i_systimek="$define"
		timeincl=`./findhdr sys/time.h`
		echo "We'll include <sys/time.h> with KERNEL defined." >&4;;
	*) i_systimek="$undef";;
	esac
	case "$flags" in
	*I_TIME*) i_time="$define"
		timeincl=`./findhdr time.h`" $timeincl"
		echo "We'll include <time.h>." >&4;;
	*) i_time="$undef";;
	esac
	case "$flags" in
	*I_SYSTIME*) i_systime="$define"
		timeincl=`./findhdr sys/time.h`" $timeincl"
		echo "We'll include <sys/time.h>." >&4;;
	*) i_systime="$undef";;
	esac
	$rm -f try.c try
fi
d11327 1
a11327 1
$cat >fd_set.c <<EOCP
d11355 1
a11355 1
set fd_set -DTRYBITS
d11360 1
a11360 1
	if ./fd_set; then
d11373 1
a11373 1
	set fd_set
d11378 1
a11378 1
		if ./fd_set; then
d11394 1
a11394 1
$rm -f fd_set*
d11400 8
d11412 5
d11421 4
d11433 12
a11471 18
hasstruct='varname=$1; struct=$2; shift; shift;
while $test $# -ge 2; do
	case "$1" in
	$define) echo "#include <$2>";;
	esac ;
    shift 2;
done > try.c;
echo "int main () { struct $struct foo; }" >> try.c;
set try;
if eval $compile; then
	val="$define";
else
	val="$undef";
fi;
set $varname;
eval $setvar;
$rm -f try.c try.o'

a11479 4
: see if sys/types.h has to be included
set sys/types.h i_systypes
eval $inhdr

d11544 171
d11783 148
a11930 10
case "$phostname" in
'') aphostname='';;
*) case "$aphostname" in
	/*) ;;
	*) set X $phostname
		shift
		file=$1
		shift
		file=`./loc $file $file $pth`
		aphostname=`echo $file $*`
d11934 2
d11937 55
a11991 8
case "$d_uname$d_gethname" in
*define*) ;;
*)
	case "$phostname" in
	'')
		echo "There will be no way for $package to get your hostname." >&4;;
	*)
	echo "I'll use 'popen("'"'$aphostname'", "r")'"' to get your hostname." >&4
d11993 4
a11996 1
	esac;;
a11997 7
case "$d_phostname" in
'') d_phostname="$undef";;
esac

: see if this is a netdb.h system
set netdb.h i_netdb
eval $inhdr
d12004 4
d12012 53
d12085 179
d12302 151
d12466 167
d12638 59
a12696 2
: see if getservbyport exists
set getservbyport d_getsbyport
d12698 45
d12744 2
a12745 2
: see if getservent exists
set getservent d_getsent
d12747 49
d12806 49
d12874 40
a12913 18
: see if this is an grp system
set grp.h i_grp
eval $inhdr

case "$i_grp" in
$define)
	xxx=`./findhdr grp.h`
	$cppstdin $cppflags $cppminus < $xxx >$$.h

	if $contains 'gr_passwd' $$.h >/dev/null 2>&1; then
		val="$define"
	else
		val="$undef"
	fi
	set d_grpasswd
	eval $setvar

	$rm -f $$.h
d12915 1
a12915 3
*)
	val="$undef";
	set d_grpasswd; eval $setvar
a12968 4
: see if iconv exists
set iconv d_iconv
eval $inlibc

a13005 45
: see if inttypes.h is available
: we want a real compile instead of Inhdr because some systems
: have an inttypes.h which includes non-existent headers
echo " "
$cat >try.c <<EOCP
#include <inttypes.h>
int main() {
	static int32_t foo32 = 0x12345678;
}
EOCP
set try
if eval $compile; then
	echo "<inttypes.h> found." >&4
	val="$define"
else
	echo "<inttypes.h> NOT found." >&4
	val="$undef"
fi
$rm -f try.c try
set i_inttypes
eval $setvar

: check for int64_t
echo " "
echo "Checking to see if you have int64_t..." >&4
$cat >try.c <<EOCP
#include <sys/types.h>
#$i_inttypes I_INTTYPES
#ifdef I_INTTYPES
#include <inttypes.h>
#endif
int main() { int64_t x = 7; }
EOCP
set try
if eval $compile; then
	val="$define"
	echo "You have int64_t."
else
	val="$undef"
	echo "You do not have int64_t."
fi
$rm -f try try.*
set d_int64_t
eval $setvar

d13031 8
d13114 45
a13166 48
: check for long long
echo " "
echo "Checking to see if you have long long..." >&4
echo 'int main() { long long x = 7; return 0; }' > try.c
set try
if eval $compile; then
	val="$define"
	echo "You have long long."
else
	val="$undef"
	echo "You do not have long long."
fi
$rm try.*
set d_longlong
eval $setvar

: check for length of long long
case "${d_longlong}${longlongsize}" in
$define)
	echo " "
	echo "Checking to see how big your long longs are..." >&4
	$cat >try.c <<'EOCP'
#include <stdio.h>
int main()
{
    printf("%d\n", (int)sizeof(long long));
    return(0);
}
EOCP
	set try
	if eval $compile_ok; then
		longlongsize=`./try$exe_ext`
		echo "Your long longs are $longlongsize bytes long."
	else
		dflt='8'
		echo " "
		echo "(I can't seem to compile the test program.  Guessing...)"
		rp="What is the size of a long long (in bytes)?"
		. ./myread
		longlongsize="$ans"
	fi
	if $test "X$longsize" = "X$longlongsize"; then
		echo "(That isn't any different from an ordinary long.)"
	fi	
	;;
esac
$rm -f try.* try

a13262 4
: see if modfl exists
set modfl d_modfl
eval $inlibc

d13308 11
a13318 72
: we could also check for sys/ipc.h ...
if $h_msg && $test `./findhdr sys/msg.h`; then
	echo "You have the full msg*(2) library." >&4
	val="$define"
else
	echo "You don't have the full msg*(2) library." >&4
	val="$undef"
fi
set d_msg
eval $setvar

: see if msync exists
set msync d_msync
eval $inlibc

: see if munmap exists
set munmap d_munmap
eval $inlibc

: see if nice exists
set nice d_nice
eval $inlibc


echo " "
echo "Checking which 64-bit integer type we could use..." >&4

case "$intsize" in
8) val=int
   set quadtype
   eval $setvar
   val='"unsigned int"'
   set uquadtype
   eval $setvar
   quadkind=1
   ;;
*) case "$longsize" in
   8) val=long
      set quadtype
      eval $setvar
      val='"unsigned long"'
      set uquadtype
      eval $setvar
      quadkind=2
      ;;
   *) case "$d_longlong:$longlongsize" in
      define:8)
        val='"long long"'
        set quadtype
        eval $setvar
        val='"unsigned long long"'
        set uquadtype
        eval $setvar
        quadkind=3
        ;;
      *) case "$d_int64_t" in
         define)
           val=int64_t
           set quadtype
           eval $setvar
           val=uint64_t
           set uquadtype
           eval $setvar
           quadkind=4
           ;;
         esac
         ;;
      esac
      ;;
   esac
   ;;
esac
d13320 7
a13326 12
case "$quadtype" in
'')	echo "Alas, no 64-bit integer types in sight." >&4
	d_quad="$undef"
	;;
*)	if test X"$use64bitint" = Xdefine -o X"$longsize" = X8; then
	    verb="will"
	else
	    verb="could"
	fi
	echo "We $verb use '$quadtype' for 64-bit integers." >&4
	d_quad="$define"
	;;
d13329 21
d13365 1
a13365 1
		dflt=`./try`
d13481 1
a13481 1
		case "`./try$exe_ext`" in
d13514 1
a13514 1
		case "`./try$exe_ext`" in
d13556 1
a13556 1
		case "`./try$exe_ext`" in
d13635 1
a13635 1
	d_nv_preserves_uv_bits="`./try$exe_ext`"
d13637 1
a13637 1
case "$d_nv_preserves_uv_bits" in
d13639 2
a13640 2
	d_nv_preserves_uv_bits=`expr 0 - $d_nv_preserves_uv_bits`
	$echo "Your NVs can preserve all $d_nv_preserves_uv_bits bits of your UVs."  2>&1
d13643 1
a13643 1
[1-9]*)	$echo "Your NVs can preserve only $d_nv_preserves_uv_bits bits of your UVs."  2>&1
d13646 1
a13646 1
	d_nv_preserves_uv_bits="$undef" ;;
a13674 7
: see if POSIX threads are available
set pthread.h i_pthread
eval $inhdr




d13743 59
d13874 36
a13909 74
: see if this is a pwd.h system
set pwd.h i_pwd
eval $inhdr

case "$i_pwd" in
$define)
	xxx=`./findhdr pwd.h`
	$cppstdin $cppflags $cppminus < $xxx >$$.h

	if $contains 'pw_quota' $$.h >/dev/null 2>&1; then
		val="$define"
	else
		val="$undef"
	fi
	set d_pwquota
	eval $setvar

	if $contains 'pw_age' $$.h >/dev/null 2>&1; then
		val="$define"
	else
		val="$undef"
	fi
	set d_pwage
	eval $setvar

	if $contains 'pw_change' $$.h >/dev/null 2>&1; then
		val="$define"
	else
		val="$undef"
	fi
	set d_pwchange
	eval $setvar

	if $contains 'pw_class' $$.h >/dev/null 2>&1; then
		val="$define"
	else
		val="$undef"
	fi
	set d_pwclass
	eval $setvar

	if $contains 'pw_expire' $$.h >/dev/null 2>&1; then
		val="$define"
	else
		val="$undef"
	fi
	set d_pwexpire
	eval $setvar

	if $contains 'pw_comment' $$.h >/dev/null 2>&1; then
		val="$define"
	else
		val="$undef"
	fi
	set d_pwcomment
	eval $setvar

	if $contains 'pw_gecos' $$.h >/dev/null 2>&1; then
		val="$define"
	else
		val="$undef"
	fi
	set d_pwgecos
	eval $setvar

	if $contains 'pw_passwd' $$.h >/dev/null 2>&1; then
		val="$define"
	else
		val="$undef"
	fi
	set d_pwpasswd
	eval $setvar

	$rm -f $$.h
d13911 1
a13911 10
*)
	val="$undef"; 
	set d_pwquota; eval $setvar
	set d_pwage; eval $setvar
	set d_pwchange; eval $setvar
	set d_pwclass; eval $setvar
	set d_pwexpire; eval $setvar
	set d_pwcomment; eval $setvar
	set d_pwgecos; eval $setvar
	set d_pwpasswd; eval $setvar
d13925 96
a14020 2
: see if readlink exists
set readlink d_readlink
d14056 1
d14058 6
a14063 5
case "$d_bcopy" in
"$define")
	echo " "
	echo "Checking to see if your bcopy() can do overlapping copies..." >&4
	$cat >try.c <<EOCP
d14093 2
d14112 8
a14119 5
	set try
	if eval $compile_ok; then
		if ./try 2>/dev/null; then
			echo "Yes, it can."
			val="$define"
d14121 1
a14121 4
			echo "It can't, sorry."
			case "$d_memmove" in
			"$define") echo "But that's Ok since you have memmove()." ;;
			esac
d14123 3
a14125 6
	else
		echo "(I can't compile the test program, so we'll assume not...)"
		case "$d_memmove" in
		"$define") echo "But that's Ok since you have memmove()." ;;
		esac
	fi
a14127 1
$rm -f try.* try core
d14132 1
d14134 6
a14139 5
case "$d_memcpy" in
"$define")
	echo " "
	echo "Checking to see if your memcpy() can do overlapping copies..." >&4
	$cat >try.c <<EOCP
d14188 8
a14195 5
	set try
	if eval $compile_ok; then
		if ./try 2>/dev/null; then
			echo "Yes, it can."
			val="$define"
d14197 1
a14197 4
			echo "It can't, sorry."
			case "$d_memmove" in
			"$define") echo "But that's Ok since you have memmove()." ;;
			esac
d14199 3
a14201 6
	else
		echo "(I can't compile the test program, so we'll assume not...)"
		case "$d_memmove" in
		"$define") echo "But that's Ok since you have memmove()." ;;
		esac
	fi
a14203 1
$rm -f try.* try core
d14246 1
a14246 1
		if ./try 2>/dev/null; then
d14415 1
a14415 1
	xxx=`./try`
d14473 1
a14473 1
        xxx=`./try`
d14503 4
d14519 45
d14568 49
d14625 45
d14674 45
d14739 45
d14788 45
d14857 45
d14970 9
a14978 4
	set `echo X $libs | $sed -e 's/-lsfio / /' -e 's/-lsfio$//'`
	shift
	libs="$*"
	echo "libs = $libs" >&4
d15095 4
d15118 1
a15118 1
		if ./try >/dev/null 2>&1; then
d15144 9
d15157 92
d15383 2
a15384 2
if eval $compile; then
	if ./try; then
d15394 20
d15500 2
a15501 2
	if eval $compile; then
 		case `./try$exe_ext` in
d15540 2
a15541 2
	if eval $compile; then
		if ./try; then
d15571 1
a15571 1
		    	case "`./try$exe_ext`" in
d15658 53
d15747 58
a15804 1
	if (!((gll == ell) && (errno == een)))
d15808 36
a15843 9
	check(" 1",                                      1LL, 0);
	check(" 0",                                      0LL, 0);
	check("-1",                                     -1LL, 0);
	check("-9223372036854775808", -9223372036854775808LL, 0);
	check("-9223372036854775808", -9223372036854775808LL, 0);
	check(" 9223372036854775807",  9223372036854775807LL, 0);
	check("-9223372036854775808", -9223372036854775808LL, 0);
	check(" 9223372036854775808",  9223372036854775807LL, ERANGE);
	check("-9223372036854775809", -9223372036854775808LL, ERANGE);
d15846 1
d15851 2
a15852 3
		yyy=`./try`
		case "$yyy" in
		ok) echo "Your strtoll() seems to be working okay." ;;
d15854 1
a15854 1
Your strtoll() doesn't seem to be working okay.
d15856 1
a15856 1
		   d_strtoll="$undef"
a15858 3
	else
		echo "(I can't seem to compile the test program--assuming it doesn't)"
		d_strtoll="$undef"
a15862 4
: see if strtoul exists
set strtoul d_strtoul
eval $inlibc

d15888 11
a15898 4
	check(" 1",                                       1LL, 0);
	check(" 0",                                       0LL, 0);
	check("18446744073709551615", 18446744073709551615ULL, 0);
	check("18446744073709551616", 18446744073709551615ULL, ERANGE);
d15905 1
a15905 1
		case "`./try`" in
d15921 48
d15979 280
a16258 1
eval $inlibc
d16260 4
a16263 3
: see if sysconf exists
set sysconf d_sysconf
eval $inlibc
d16265 1
a16265 3
: see if system exists
set system d_system
eval $inlibc
d16267 3
a16269 3
: see if tcgetpgrp exists
set tcgetpgrp d_tcgetpgrp
eval $inlibc
d16271 20
a16290 3
: see if tcsetpgrp exists
set tcsetpgrp d_tcsetpgrp
eval $inlibc
d16292 9
a16300 4
: see if prototype for telldir is available
echo " "
set d_telldirproto telldir $i_systypes sys/types.h $i_dirent dirent.h
eval $hasproto
d16302 23
a16324 12
: see if this is a sys/times.h system
set sys/times.h i_systimes
eval $inhdr

: see if times exists
echo " "
if set times val -f d_times; eval $csym; $val; then
	echo 'times() found.' >&4
	d_times="$define"
	inc=''
	case "$i_systimes" in
	"$define") inc='sys/times.h';;
a16325 3
	rp="What is the type returned by times() on this system?"
	set clock_t clocktype long stdio.h sys/types.h $inc
	eval $typedef_ask
d16327 7
a16333 3
	echo 'times() NOT found, hope that will do.' >&4
	d_times="$undef"
	clocktype='int'
d16335 3
d16339 2
a16340 2
: see if truncate exists
set truncate d_truncate
a16342 12
: see if tzname[] exists
echo " "
if set tzname val -a d_tzname; eval $csym; $val; then
	val="$define"
	echo 'tzname[] found.' >&4
else
	val="$undef"
	echo 'tzname[] NOT found.' >&4
fi
set d_tzname
eval $setvar

d16347 13
a16409 8
: see if this is an sysdir system
set sys/dir.h i_sysdir
eval $inhdr

: see if this is an sysndir system
set sys/ndir.h i_sysndir
eval $inhdr

d16418 1
a16418 1
	cat > closedir.c <<EOM
d16447 1
a16447 1
	set closedir
d16449 1
a16449 1
		if ./closedir > /dev/null 2>&1 ; then
d16467 1
a16467 1
$rm -f closedir*
d16484 4
a16494 11
case "$crosscompile" in
''|[nN]*) crosscompile="$undef" ;;
esac

case "$osname" in
next|rhapsody|darwin) multiarch="$define" ;;
esac
case "$multiarch" in
''|[nN]*) multiarch="$undef" ;;
esac

d16497 1
a16497 1
case "$crosscompile$multiarch" in
d16534 1
a16534 1
			dflt=`./try`
a16553 78
: check for ordering of bytes in a long
echo " "
case "$crosscompile$multiarch" in
*$define*)
	$cat <<EOM
You seem to be either cross-compiling or doing a multiarchitecture build,
skipping the byteorder check.

EOM
	byteorder='0xffff'
	;;
*)
	case "$byteorder" in
	'')
		$cat <<'EOM'
In the following, larger digits indicate more significance.  A big-endian
machine like a Pyramid or a Motorola 680?0 chip will come out to 4321. A
little-endian machine like a Vax or an Intel 80?86 chip would be 1234. Other
machines may have weird orders like 3412.  A Cray will report 87654321,
an Alpha will report 12345678. If the test program works the default is
probably right.
I'm now running the test program...
EOM
		$cat >try.c <<'EOCP'
#include <stdio.h>
int main()
{
	int i;
	union {
		unsigned long l;
		char c[sizeof(long)];
	} u;

	if (sizeof(long) > 4)
		u.l = (0x08070605L << 32) | 0x04030201L;
	else
		u.l = 0x04030201L;
	for (i = 0; i < sizeof(long); i++)
		printf("%c", u.c[i]+'0');
	printf("\n");
	exit(0);
}
EOCP
		xxx_prompt=y
		set try
		if eval $compile && ./try > /dev/null; then
			dflt=`./try`
			case "$dflt" in
			[1-4][1-4][1-4][1-4]|12345678|87654321)
				echo "(The test program ran ok.)"
				echo "byteorder=$dflt"
				xxx_prompt=n
			;;
			????|????????) echo "(The test program ran ok.)" ;;
			*) echo "(The test program didn't run right for some reason.)" ;;
			esac
		else
			dflt='4321'
			cat <<'EOM'
(I can't seem to compile the test program.  Guessing big-endian...)
EOM
		fi
		case "$xxx_prompt" in
		y)
			rp="What is the order of bytes in a long?"
			. ./myread
			byteorder="$ans"
			;;
		*)	byteorder=$dflt
			;;
		esac
		;;
	esac
	$rm -f try.c try
	;;
esac


d16599 1
a16599 1
int main()
d16605 7
a16611 1
    printf("You have Berkeley DB Version 2 or greater\n");
d16620 1
a16620 1
	printf("db.h and libdb are incompatible\n") ;
d16624 1
a16624 1
    printf("db.h and libdb are compatible\n") ;
d16632 1
a16632 1
	printf("but Perl needs Berkeley DB 2.3.4 or greater\n") ;
d16639 5
a16643 1
    printf("You have Berkeley DB Version 1\n");
d16652 1
a16652 1
	if eval $compile_ok && ./try; then
d16654 4
d16751 1
a16751 88
			db_prefixtype='size_t'
		fi
	else
		db_prefixtype='size_t'
		: XXX Maybe we should just give up here.
		$cat try.out >&4
		echo "Help:  I can't seem to compile the db test program." >&4
		echo "Something's wrong, but I'll assume you use $db_prefixtype." >&4
	fi
	$rm -f try.*
	echo "Your version of Berkeley DB uses $db_prefixtype for prefix."
	;;
*)	db_prefixtype='size_t'
	;;
esac

: check for void type
echo " "
echo "Checking to see how well your C compiler groks the void type..." >&4
case "$voidflags" in
'')
	$cat >try.c <<'EOCP'
#if TRY & 1
void sub() {
#else
sub() {
#endif
	extern void moo();	/* function returning void */
	void (*goo)();		/* ptr to func returning void */
#if TRY & 8
	void *hue;		/* generic ptr */
#endif
#if TRY & 2
	void (*foo[10])();
#endif

#if TRY & 4
	if(goo == moo) {
		exit(0);
	}
#endif
	exit(0);
}
int main() { sub(); }
EOCP
	if $cc $ccflags -c -DTRY=$defvoidused try.c >.out 2>&1 ; then
		voidflags=$defvoidused
	echo "Good.  It appears to support void to the level $package wants.">&4
		if $contains warning .out >/dev/null 2>&1; then
			echo "However, you might get some warnings that look like this:"
			$cat .out
		fi
	else
echo "Hmm, your compiler has some difficulty with void. Checking further..." >&4
		if $cc $ccflags -c -DTRY=1 try.c >/dev/null 2>&1; then
			echo "It supports 1..."
			if $cc $ccflags -c -DTRY=3 try.c >/dev/null 2>&1; then
				echo "It also supports 2..."
				if $cc $ccflags -c -DTRY=7 try.c >/dev/null 2>&1; then
					voidflags=7
					echo "And it supports 4 but not 8 definitely."
				else
					echo "It doesn't support 4..."
					if $cc $ccflags -c -DTRY=11 try.c >/dev/null 2>&1; then
						voidflags=11
						echo "But it supports 8."
					else
						voidflags=3
						echo "Neither does it support 8."
					fi
				fi
			else
				echo "It does not support 2..."
				if $cc $ccflags -c -DTRY=13 try.c >/dev/null 2>&1; then
					voidflags=13
					echo "But it supports 4 and 8."
				else
					if $cc $ccflags -c -DTRY=5 try.c >/dev/null 2>&1; then
						voidflags=5
						echo "And it supports 4 but has not heard about 8."
					else
						echo "However it supports 8 but not 4."
					fi
				fi
			fi
		else
			echo "There is no support at all for void."
			voidflags=0
d16753 6
d16760 4
a16763 14
esac
case "$voidflags" in
"$defvoidused") ;;
*)	$cat >&4 <<'EOM'
  Support flag bits are:
    1: basic void declarations.
    2: arrays of pointers to functions returning void.
    4: operations between pointers to and addresses of void functions.
    8: generic void pointers.
EOM
	dflt="$voidflags";
	rp="Your void support flags add up to what?"
	. ./myread
	voidflags="$ans"
a16765 1
$rm -f try.* .out
d16900 1
a16900 1
$cat >tebcdic.c <<'EOM'
d16909 1
a16909 1
set tebcdic
d16911 1
a16911 1
	if ./tebcdic; then
d16915 1
a16915 1
		echo "Nope, no EBCDIC, probably ASCII or some ISO Latin. Or UTF8." >&4
d16921 1
a16921 1
$rm -f tebcdic.c tebcdic
d16946 3
a16948 1
  FILE* p = fopen("try.out", "w");
d16997 1
d17002 4
a17005 3
	    $rm -f try.out
 	    ./try$exe_ext 2>/dev/null
	    if $test ! -s try.out -a "X$?" = X42; then
a17011 1
	    $rm -f try.out
d17013 4
a17016 3
		    $rm -f try.out
 		    ./try$exe_ext 2>/dev/null
		    if $test ! -s try.out -a "X$?" = X42; then
d17027 1
a17027 2
	        $rm -f try.out
	    	./try$exe_ext 2>/dev/null
d17029 1
d17075 1
a17075 1
                    $cat tryp.c | ./tryp$exe_ext 2>/dev/null > tryp.out
d17139 1
a17139 1
	    $cat tryp.c | ./tryp$exe_ext 2>/dev/null > tryp.out
d17151 4
a17154 3
				$rm -f try.out
				./try$exe_ext 2>/dev/null
				if $test -s try.out -a "X$?" = X42; then
d17259 1
a17259 1
	yyy=`./try`
d17293 1
a17293 1
	yyy=`./try`
d17328 1
a17328 1
		yyy=`./try$exe_ext`
d17350 1
a17350 1
		yyy=`./try$exe_ext`
d17373 1
a17373 1
		yyy=`./try$exe_ext`
d17384 2
a17385 2
if $test X"$sPRId64" = X -a X"$quadtype" = X"long long"; then
	$cat >try.c <<'EOCP'
d17389 2
a17390 2
  long long q = 12345678901LL; /* AIX cc requires the LL suffix. */
  printf("%lld\n", q);
d17395 1
a17395 1
		yyy=`./try$exe_ext`
d17398 3
a17400 3
			sPRId64='"lld"'; sPRIi64='"lli"'; sPRIu64='"llu"';
                	sPRIo64='"llo"'; sPRIx64='"llx"'; sPRIXU64='"llX"';
			echo "We will use the %lld style."
d17406 2
a17407 2
if $test X"$sPRId64" = X -a X"$quadtype" != X; then
	$cat >try.c <<EOCP
d17411 2
a17412 2
  $quadtype q = 12345678901;
  printf("%Ld\n", q);
d17417 1
a17417 1
		yyy=`./try$exe_ext`
d17420 3
a17422 3
			sPRId64='"Ld"'; sPRIi64='"Li"'; sPRIu64='"Lu"';
                	sPRIo64='"Lo"'; sPRIx64='"Lx"'; sPRIXU64='"LX"';
			echo "We will use %Ld."
d17439 1
a17439 1
		yyy=`./try$exe_ext`
d17521 1
a17521 1
'') echo "$0: Fatal: failed to find format strings, cannot continue." >& 4
d17619 48
a17666 2
: define a fucntion to check prototypes
$cat > protochk <<EOSH
d17668 8
a17675 7
cc="$cc"
optimize="$optimize"
ccflags="$ccflags"
prototype="$prototype"
define="$define"
rm=$rm
EOSH
d17677 39
a17715 1
$cat >> protochk <<'EOSH'
d17717 10
a17726 16
$rm -f try.c
foo="$1"
shift
while test $# -ge 2; do
	case "$1" in
		$define) echo "#include <$2>" >> try.c ;;
		literal) echo "$2" >> try.c ;;
	esac
    shift 2
done
test "$prototype" = "$define"  && echo '#define CAN_PROTOTYPE' >> try.c
cat >> try.c <<'EOCP'
#ifdef CAN_PROTOTYPE
#define	_(args) args
#else
#define	_(args) ()
d17728 30
d17759 21
a17779 9
echo "$foo" >> try.c
echo 'int no_real_function_has_this_name _((void)) { return 0; }' >> try.c
$cc $optimize $ccflags -c try.c > /dev/null 2>&1
status=$?
$rm -f try.[co]
exit $status
EOSH
chmod +x protochk
$eunicefix protochk
d17914 1
d17934 6
a17939 1
*) dflt="$pager";;
a17941 1
fn=f/
d17952 1
a17952 4
case "$bincompat5005" in
"$define") xs_apiversion='5.005' ;;
*) xs_apiversion=$version ;;   # The current site_perl version.
esac
a17956 33
: check for length of pointer
echo " "
case "$ptrsize" in
'')
	echo "Checking to see how big your pointers are..." >&4
	if test "$voidflags" -gt 7; then
		echo '#define VOID_PTR char *' > try.c
	else
		echo '#define VOID_PTR void *' > try.c
	fi
	$cat >>try.c <<'EOCP'
#include <stdio.h>
int main()
{
    printf("%d\n", (int)sizeof(VOID_PTR));
    exit(0);
}
EOCP
	set try
	if eval $compile_ok; then
		ptrsize=`./try`
		echo "Your pointers are $ptrsize bytes long."
	else
		dflt='4'
		echo "(I can't seem to compile the test program.  Guessing...)" >&4
		rp="What is the size of a pointer (in bytes)?"
		. ./myread
		ptrsize="$ans"
	fi
	;;
esac
$rm -f try.c try

d17970 1
a17970 1
	./foobar >/dev/null 2>&1; then
d17976 1
a17976 1
	./foobar >/dev/null 2>&1; then
d18116 1
a18116 1
			selectminbits=`./try`
d18161 1
a18161 1
	$awk "{print \\$$fieldn}" | $sed 's!"!!g' | $sort | $uniq`
d18308 1
a18308 1
	./signal$_exe | $sort -n +1 | $uniq | $awk -f signal.awk >signal.lst
d18314 1
a18314 1
		./signal$_exe > signal.nsg
d18335 1
a18335 1
			./signal$_exe  >> signal.ls1
d18342 1
a18342 1
			$sort -n +1 | $uniq | $awk -f signal.awk >signal.lst
d18407 1
d18426 1
a18426 1
	yyy=`./try`
d18520 1
a18520 1
$cat > ssize.c <<EOM
d18537 3
a18539 3
set ssize
if eval $compile_ok && ./ssize > /dev/null; then
	ssizetype=`./ssize`
d18555 1
a18555 1
$rm -f ssize ssize.*
d18563 1
a18563 1
else	
d18569 1
a18569 17
: see if time exists
echo " "
if test "X$d_time" = X -o X"$timetype" = X; then
    if set time val -f d_time; eval $csym; $val; then
		echo 'time() found.' >&4
		val="$define"
		rp="What is the type returned by time() on this system?"
		set time_t timetype long stdio.h sys/types.h
		eval $typedef_ask
    else
		echo 'time() not found, hope that will do.' >&4
		val="$undef"
		timetype='int';
    fi
    set d_time
    eval $setvar
fi
d18611 1
a18611 1
	yyy=`./try`
d18644 1
a18644 1
	yyy=`./try`
d18710 1
a18710 1
if $test -f "$byacc"; then
d18714 1
a18714 1
if $test -f "$bison"; then
d18732 2
a18733 57
: see if dbm.h is available
: see if dbmclose exists
set dbmclose d_dbmclose
eval $inlibc

case "$d_dbmclose" in
$define)
	set dbm.h i_dbm
	eval $inhdr
	case "$i_dbm" in
	$define)
		val="$undef"
		set i_rpcsvcdbm
		eval $setvar
		;;
	*)	set rpcsvc/dbm.h i_rpcsvcdbm
		eval $inhdr
		;;
	esac
	;;
*)	echo "We won't be including <dbm.h>"
	val="$undef"
	set i_dbm
	eval $setvar
	val="$undef"
	set i_rpcsvcdbm
	eval $setvar
	;;
esac

: see if this is a sys/file.h system
val=''
set sys/file.h val
eval $inhdr

: do we need to include sys/file.h ?
case "$val" in
"$define")
	echo " "
	if $h_sysfile; then
		val="$define"
		echo "We'll be including <sys/file.h>." >&4
	else
		val="$undef"
		echo "We won't be including <sys/file.h>." >&4
	fi
	;;
*)
	h_sysfile=false
	;;
esac
set i_sysfile
eval $setvar

: see if fcntl.h is there
val=''
set fcntl.h val
d18736 2
a18737 26
: see if we can include fcntl.h
case "$val" in
"$define")
	echo " "
	if $h_fcntl; then
		val="$define"
		echo "We'll be including <fcntl.h>." >&4
	else
		val="$undef"
		if $h_sysfile; then
	echo "We don't need to include <fcntl.h> if we include <sys/file.h>." >&4
		else
			echo "We won't be including <fcntl.h>." >&4
		fi
	fi
	;;
*)
	h_fcntl=false
	val="$undef"
	;;
esac
set i_fcntl
eval $setvar

: see if this is a iconv.h system
set iconv.h i_iconv
d18741 5
a18745 2
set ieeefp.h i_ieeefp
eval $inhdr
a18750 4
: see if locale.h is available
set locale.h i_locale
eval $inhdr

d18772 14
d18856 4
a18859 3
Dynix DynixPTX ELF encore EPI EXTENSIONS FILE_OFFSET_BITS
FreeBSD GCC_NEW_VARARGS gcos gcx gimpel
GNU_SOURCE GNUC GNUC_MINOR GO32 gould GOULD_PN
d18902 5
a18906 1
unix UNIX95 UNIX99 unixpc unos USGr4 USGr4_2
d18948 4
a18951 4
    printf "#ifdef %s\n#if %s+0\nprintf(\"%s=%%ld\\n\", %s);\n#else\nprintf(\"%s\\n\");\n#endif\n#endif\n", $1, $1, $1, $1, $1
    printf "#ifdef _%s\n#if _%s+0\nprintf(\"_%s=%%ld\\n\", _%s);\n#else\nprintf(\"_%s\\n\");\n#endif\n#endif\n", $1, $1, $1, $1, $1
    printf "#ifdef __%s\n#if __%s+0\nprintf(\"__%s=%%ld\\n\", __%s);\n#else\nprintf(\"__%s\\n\");\n#endif\n#endif\n", $1, $1, $1, $1, $1
    printf "#ifdef __%s__\n#if __%s__+0\nprintf(\"__%s__=%%ld\\n\", __%s__);\n#else\nprintf(\"__%s__\\n\");\n#endif\n#endif\n", $1, $1, $1, $1, $1
d18953 1
a18953 1
echo '}' >> try.c
d18961 1
a18961 1
$cc -o try $optimize \$ccflags $ldflags try.c $libs && ./try$exe_ext
d18980 1
a18980 1
	-A*) $test "$gccversion" && echo "\$i" | $sed 's/^-A\(.*\)(\(.*\))/\1=\2/';;
a19040 1
$rm -f ccsym* Cppsym.*
a19096 102
: see if this is a shadow.h system
set shadow.h i_shadow
eval $inhdr

: see if stdarg is available
echo " "
if $test `./findhdr stdarg.h`; then
	echo "<stdarg.h> found." >&4
	valstd="$define"
else
	echo "<stdarg.h> NOT found." >&4
	valstd="$undef"
fi

: see if varags is available
echo " "
if $test `./findhdr varargs.h`; then
	echo "<varargs.h> found." >&4
else
	echo "<varargs.h> NOT found, but that's ok (I hope)." >&4
fi

: set up the varargs testing programs
$cat > varargs.c <<EOP
#ifdef I_STDARG
#include <stdarg.h>
#endif
#ifdef I_VARARGS
#include <varargs.h>
#endif

#ifdef I_STDARG
int f(char *p, ...)
#else
int f(va_alist)
va_dcl
#endif
{
	va_list ap;
#ifndef I_STDARG
	char *p;
#endif
#ifdef I_STDARG
	va_start(ap,p);
#else
	va_start(ap);
	p = va_arg(ap, char *);
#endif
	va_end(ap);
}
EOP
$cat > varargs <<EOP
$startsh
if $cc -c $ccflags -D\$1 varargs.c >/dev/null 2>&1; then
	echo "true"
else
	echo "false"
fi
$rm -f varargs$_o
EOP
chmod +x varargs

: now check which varargs header should be included
echo " "
i_varhdr=''
case "$valstd" in
"$define")
	if `./varargs I_STDARG`; then
		val='stdarg.h'
	elif `./varargs I_VARARGS`; then
		val='varargs.h'
	fi
	;;
*)
	if `./varargs I_VARARGS`; then
		val='varargs.h'
	fi
	;;
esac
case "$val" in
'')
echo "I could not find the definition for va_dcl... You have problems..." >&4
	val="$undef"; set i_stdarg; eval $setvar
	val="$undef"; set i_varargs; eval $setvar
	;;
*) 
	set i_varhdr
	eval $setvar
	case "$i_varhdr" in
	stdarg.h)
		val="$define"; set i_stdarg; eval $setvar
		val="$undef"; set i_varargs; eval $setvar
		;;
	varargs.h)
		val="$undef"; set i_stdarg; eval $setvar
		val="$define"; set i_varargs; eval $setvar
		;;
	esac
	echo "We'll include <$i_varhdr> to get va_dcl definition." >&4;;
esac
$rm -f varargs*

d19130 20
a19171 4
: see if this is a sys/uio.h system
set sys/uio.h i_sysuio
eval $inhdr

d19253 1
a19253 1
                   cd $xxx;
d19263 1
a19263 1
cd $rsrc/ext
d19267 4
d19277 1
a19277 1
cd $tdir
d19293 5
d19338 6
a19343 1
		true|$define|y) avail_ext="$avail_ext $xxx" ;;
d19353 18
a19370 2
		case "$usethreads" in 
		true|$define|y) avail_ext="$avail_ext $xxx" ;;
d19373 14
d19523 14
d19584 6
d19649 1
d19663 1
a19667 1
bincompat5005='$bincompat5005'
d19705 1
a19705 1
crosscompile='$crosscompile'
d19708 2
d19729 1
a19734 1
d_bincompat5005='$d_bincompat5005'
d19745 1
d19747 1
d19750 1
d19752 2
d19756 1
d19758 1
d19764 1
d19769 1
d19771 1
d19773 1
d19775 1
d19777 1
d19779 1
d19782 1
d19791 2
d19795 1
d19797 1
d19799 3
d19816 3
d19824 3
d19828 1
d19830 1
d19836 3
d19849 3
d19855 3
d19861 3
d19866 1
d19868 1
a19872 1
d_iconv='$d_iconv'
d19877 2
d19885 1
d19909 1
d19919 1
d19926 1
a19927 1
d_nv_preserves_uv_bits='$d_nv_preserves_uv_bits'
d19940 2
d19953 2
d19956 1
d19958 2
d19977 1
d19981 1
d19984 2
d19988 1
d19990 1
d19997 1
d19999 1
d20007 1
d20018 1
d20020 2
d20027 4
d20047 2
d20053 1
d20061 1
d20072 3
d20076 1
d20078 2
d20083 3
d20100 1
d20105 3
d20114 1
d20121 6
d20131 1
d20140 1
d20146 20
d20171 3
d20192 1
d20200 2
a20203 1
i_iconv='$i_iconv'
d20206 1
d20322 1
d20358 1
d20371 1
d20392 1
d20407 1
d20414 1
d20418 2
d20423 1
d20446 7
d20465 1
d20487 2
d20501 1
d20508 1
d20514 2
d20520 1
d20539 1
d20551 1
d20576 1
d20594 2
a20595 1
echo "CONFIGDOTSH=true" >>config.sh
d20625 1
a20625 1
	echo "Done."
d20655 1
d20657 1
d20687 1
a20687 1
	echo "Done."
@


1.9
log
@If the first field of 'uname -a' output is openbsd, treat the OS as
OpenBSD regardless of anything else.  Fixes a bizarre problem where
if the hostname was set to "openbsd" the correct hint file was not found.
@
text
@d21 1
a21 1
# $Id: Configure,v 1.8 2001/05/24 18:34:43 millert Exp $
d6816 1
a6816 1
	freebsd)
@


1.8
log
@merge in perl 5.6.1 with our local changes
@
text
@d21 1
a21 1
# $Id: Head.U,v 3.0.1.9 1997/02/28 15:02:09 ram Exp $
d2536 3
@


1.7
log
@perl-5.6.0 + local changes
@
text
@d23 2
a24 2
# Generated on Wed Mar 22 19:13:31 EET 2000 [metaconfig 3.0 PL70]
# (with additional metaconfig patches by perlbug@@perl.com)
d26 1
a26 1
cat >/tmp/c1$$ <<EOF
d37 1
a37 1
cat >/tmp/c2$$ <<EOF
d43 1
a43 1
true || cat /tmp/c1$$ /tmp/c2$$
d46 1
a46 1
(exit $?0) || cat /tmp/c2$$
d48 1
a48 1
rm -f /tmp/c1$$ /tmp/c2$$
d163 2
d168 1
a293 1
gccversion=''
d311 1
a348 1
d_endspent=''
d352 1
d361 1
d366 1
d372 1
d391 1
d402 1
a405 1
d_getspent=''
d416 2
d447 1
d481 1
d501 1
a510 1
d_setspent=''
d535 1
d544 2
d611 2
d639 1
d654 1
d724 1
d742 3
a744 3
d_PRIEldbl=''
d_PRIFldbl=''
d_PRIGldbl=''
d748 4
a751 3
sPRIEldbl=''
sPRIFldbl=''
sPRIGldbl=''
d755 1
a772 6
huge=''
large=''
medium=''
models=''
small=''
split=''
d793 2
d810 1
d834 7
d852 1
a852 1
d_PRIX64=''
d858 1
a858 1
sPRIX64=''
d919 3
d955 1
d960 2
d979 3
d990 1
d1007 1
a1007 2
glibpth="/usr/lib/large /lib /usr/lib $xlibpth"
glibpth="$glibpth /lib/large /usr/lib/small /lib/small"
d1021 4
d1036 1
a1036 1
libswanted="$libswanted ucb bsd BSD PW x iconv"
d1079 1
a1079 1
Please contact me (Perl Maintainers) at perlbug@@perl.com and 
d1378 9
a1386 4
	if test ! -t 0; then
		echo "Say 'sh Configure', not 'sh <Configure'"
		exit 1
	fi
d1437 1
d1621 1
a1621 1
and contact the author (perlbug@@perl.com).
d1784 37
d1883 1
a1883 1
have, let me (perlbug@@perl.com) know how I blew it.
d1969 1
d2069 1
d2106 60
d2178 87
d2367 4
a2370 1
	n*|N*) echo "OK, I'll ignore it."; mv config.sh config.sh.old;;
d2388 1
d2399 1
a2399 1
	: tests or hints, please send them to perlbug@@perl.com
d2535 1
a2776 1
myuname="$newmyuname"
d2937 13
a3005 164
: determine where manual pages are on this system
echo " "
case "$sysman" in
'') 
	syspath='/usr/man/man1 /usr/man/mann /usr/man/manl /usr/man/local/man1'
	syspath="$syspath /usr/man/u_man/man1 /usr/share/man/man1"
	syspath="$syspath /usr/catman/u_man/man1 /usr/man/l_man/man1"
	syspath="$syspath /usr/local/man/u_man/man1 /usr/local/man/l_man/man1"
	syspath="$syspath /usr/man/man.L /local/man/man1 /usr/local/man/man1"
	sysman=`./loc . /usr/man/man1 $syspath`
	;;
esac
if $test -d "$sysman"; then
	echo "System manual is in $sysman." >&4
else
	echo "Could not find manual pages in source form." >&4
fi

: see what memory models we can support
case "$models" in
'')
	$cat >pdp11.c <<'EOP'
int main() {
#ifdef pdp11
	exit(0);
#else
	exit(1);
#endif
}
EOP
	( cc -o pdp11 pdp11.c ) >/dev/null 2>&1
	if $test -f pdp11 && ./pdp11 2>/dev/null; then
		dflt='unsplit split'
	else
		tans=`./loc . X /lib/small /lib/large /usr/lib/small /usr/lib/large /lib/medium /usr/lib/medium /lib/huge`
		case "$tans" in
		X) dflt='none';;
		*) if $test -d /lib/small || $test -d /usr/lib/small; then
				dflt='small'
			else
				dflt=''
			fi
			if $test -d /lib/medium || $test -d /usr/lib/medium; then
				dflt="$dflt medium"
			fi
			if $test -d /lib/large || $test -d /usr/lib/large; then
				dflt="$dflt large"
			fi
			if $test -d /lib/huge || $test -d /usr/lib/huge; then
				dflt="$dflt huge"
			fi
		esac
	fi;;
*) dflt="$models";;
esac
$cat <<EOM
 
Some systems have different model sizes.  On most systems they are called
small, medium, large, and huge.  On the PDP11 they are called unsplit and
split.  If your system doesn't support different memory models, say "none".
If you wish to force everything to one memory model, say "none" here and
put the appropriate flags later when it asks you for other cc and ld flags.
Venix systems may wish to put "none" and let the compiler figure things out.
(In the following question multiple model names should be space separated.)

The default for most systems is "none".

EOM
rp="Which memory models are supported?"
. ./myread
models="$ans"

case "$models" in
none)
	small=''
	medium=''
	large=''
	huge=''
	unsplit=''
	split=''
	;;
*split)
	case "$split" in
	'') if $contains '\-i' $sysman/ld.1 >/dev/null 2>&1 || \
			 $contains '\-i' $sysman/cc.1 >/dev/null 2>&1; then
			dflt='-i'
		else
			dflt='none'
		fi;;
	*) dflt="$split";;
	esac
	rp="What flag indicates separate I and D space?"
	. ./myread
	tans="$ans"
	case "$tans" in
	none) tans='';;
	esac
	split="$tans"
	unsplit='';;
*large*|*small*|*medium*|*huge*)
	case "$models" in
	*large*)
		case "$large" in
		'') dflt='-Ml';;
		*) dflt="$large";;
		esac
	rp="What flag indicates large model?"
	. ./myread
	tans="$ans"
	case "$tans" in
	none) tans='';
	esac
	large="$tans";;
	*) large='';;
	esac
	case "$models" in
	*huge*) case "$huge" in
		'') dflt='-Mh';;
		*) dflt="$huge";;
		esac
		rp="What flag indicates huge model?"
		. ./myread
		tans="$ans"
		case "$tans" in
		none) tans='';
		esac
		huge="$tans";;
	*) huge="$large";;
	esac
	case "$models" in
	*medium*) case "$medium" in
		'') dflt='-Mm';;
		*) dflt="$medium";;
		esac
		rp="What flag indicates medium model?"
		. ./myread
		tans="$ans"
		case "$tans" in
		none) tans='';
		esac
		medium="$tans";;
	*) medium="$large";;
	esac
	case "$models" in
	*small*) case "$small" in
		'') dflt='none';;
		*) dflt="$small";;
		esac
		rp="What flag indicates small model?"
		. ./myread
		tans="$ans"
		case "$tans" in
		none) tans='';
		esac
		small="$tans";;
	*) small='';;
	esac
	;;
*)
	echo "Unrecognized memory models--you may have to edit Makefile.SH" >&4
	;;
esac
$rm -f pdp11.* pdp11

d3023 1
a3023 1
elif test `echo abc | tr a-z A-Z` = Abc ; then
d3062 2
d3070 1
d3101 7
a3107 45
: see if we need a special compiler
echo " "
if ./usg; then
	case "$cc" in
	'') case "$Mcc" in
		/*) dflt='Mcc';;
		*) case "$large" in
			-M*) dflt='cc';;
			*)	if $contains '\-M' $sysman/cc.1 >/dev/null 2>&1 ; then
					if $contains '\-M' $sysman/cpp.1 >/dev/null 2>&1; then
						dflt='cc'
					else
						dflt='cc -M'
					fi
				else
					dflt='cc'
				fi;;
			esac;;
		esac;;
	*)  dflt="$cc";;
	esac
	case "$dflt" in
	*M*)	$cat <<'EOM'
On some older systems the default C compiler will not resolve multiple global
references that happen to have the same name.  On some such systems the "Mcc"
command may be used to force these to be resolved.  On other systems a "cc -M"
command is required.  (Note that the -M flag on other systems indicates a
memory model to use!) If you have the Gnu C compiler, you might wish to use
that instead.

EOM
	;;
	esac
	rp="Use which C compiler?"
	. ./myread
	cc="$ans"
else
	case "$cc" in
	'') dflt=cc;;
	*) dflt="$cc";;
	esac
	rp="Use which C compiler?"
	. ./myread
	cc="$ans"
fi
d3114 2
d3131 1
a3131 1
if $cc $ldflags -o gccvers gccvers.c; then
d3136 1
d3154 24
d3179 8
a3186 4
: decide how portable to be.  Allow command line overrides.
case "$d_portable" in
"$undef") ;;
*)	d_portable="$define" ;;
d3189 14
a3202 14
: set up shell script to do ~ expansion
cat >filexp <<EOSS
$startsh
: expand filename
case "\$1" in
 ~/*|~)
	echo \$1 | $sed "s|~|\${HOME-\$LOGDIR}|"
	;;
 ~*)
	if $test -f /bin/csh; then
		/bin/csh -f -c "glob \$1"
		failed=\$?
		echo ""
		exit \$failed
d3204 1
a3204 15
		name=\`$expr x\$1 : '..\([^/]*\)'\`
		dir=\`$sed -n -e "/^\${name}:/{s/^[^:]*:[^:]*:[^:]*:[^:]*:[^:]*:\([^:]*\).*"'\$'"/\1/" -e p -e q -e '}' </etc/passwd\`
		if $test ! -d "\$dir"; then
			me=\`basename \$0\`
			echo "\$me: can't locate home directory for: \$name" >&2
			exit 1
		fi
		case "\$1" in
		*/*)
			echo \$dir/\`$expr x\$1 : '..[^/]*/\(.*\)'\`
			;;
		*)
			echo \$dir
			;;
		esac
d3206 176
a3381 8
	;;
*)
	echo \$1
	;;
esac
EOSS
chmod +x filexp
$eunicefix filexp
d3403 1
a3403 1
	expr $fn : '.*(\(.*\)).*' | tr ',' $trnl >getfile.ok
d3502 1
d3630 1
a3630 1
	if $cc -E usr.c > usr.out && $contains / usr.out >/dev/null 2>&1; then
d3663 51
a3713 14
: see how we invoke the C preprocessor
echo " "
echo "Now, how can we feed standard input to your C preprocessor..." >&4
cat <<'EOT' >testcpp.c
#define ABC abc
#define XYZ xyz
ABC.XYZ
EOT
cd ..
if test ! -f cppstdin; then
	if test "X$osname" = "Xaix" -a "X$gccversion" = X; then
		# AIX cc -E doesn't show the absolute headerfile
		# locations but we'll cheat by using the -M flag.
		echo 'cat >.$$.c; rm -f .$$.u; '"$cc"' ${1+"$@@"} -M -c .$$.c 2>/dev/null; test -s .$$.u && awk '"'"'$2 ~ /\.h$/ { print "# 0 \""$2"\"" }'"'"' .$$.u; rm -f .$$.o .$$.u; '"$cc"' -E ${1+"$@@"} .$$.c; rm .$$.c' > cppstdin
d3715 1
a3715 1
		echo 'cat >.$$.c; '"$cc"' -E ${1+"$@@"} .$$.c; rm .$$.c' >cppstdin
d3717 13
a3729 7
else
	echo "Keeping your $hint cppstdin wrapper."
fi
chmod 755 cppstdin
wrapper=`pwd`/cppstdin
ok='false'
cd UU
d3731 14
a3744 205
if $test "X$cppstdin" != "X" && \
	$cppstdin $cppminus <testcpp.c >testcpp.out 2>&1 && \
	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1
then
	echo "You used to use $cppstdin $cppminus so we'll use that again."
	case "$cpprun" in
	'') echo "But let's see if we can live without a wrapper..." ;;
	*)
		if $cpprun $cpplast <testcpp.c >testcpp.out 2>&1 && \
			$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1
		then
			echo "(And we'll use $cpprun $cpplast to preprocess directly.)"
			ok='true'
		else
			echo "(However, $cpprun $cpplast does not work, let's see...)"
		fi
		;;
	esac
else
	case "$cppstdin" in
	'') ;;
	*)
		echo "Good old $cppstdin $cppminus does not seem to be of any help..."
		;;
	esac
fi

if $ok; then
	: nothing
elif echo 'Maybe "'"$cc"' -E" will work...'; \
	$cc -E <testcpp.c >testcpp.out 2>&1; \
	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
	echo "Yup, it does."
	x_cpp="$cc -E"
	x_minus='';
elif echo 'Nope...maybe "'"$cc"' -E -" will work...'; \
	$cc -E - <testcpp.c >testcpp.out 2>&1; \
	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
	echo "Yup, it does."
	x_cpp="$cc -E"
	x_minus='-';
elif echo 'Nope...maybe "'"$cc"' -P" will work...'; \
	$cc -P <testcpp.c >testcpp.out 2>&1; \
	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
	echo "Yipee, that works!"
	x_cpp="$cc -P"
	x_minus='';
elif echo 'Nope...maybe "'"$cc"' -P -" will work...'; \
	$cc -P - <testcpp.c >testcpp.out 2>&1; \
	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
	echo "At long last!"
	x_cpp="$cc -P"
	x_minus='-';
elif echo 'No such luck, maybe "'$cpp'" will work...'; \
	$cpp <testcpp.c >testcpp.out 2>&1; \
	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
	echo "It works!"
	x_cpp="$cpp"
	x_minus='';
elif echo 'Nixed again...maybe "'$cpp' -" will work...'; \
	$cpp - <testcpp.c >testcpp.out 2>&1; \
	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
	echo "Hooray, it works!  I was beginning to wonder."
	x_cpp="$cpp"
	x_minus='-';
elif echo 'Uh-uh.  Time to get fancy.  Trying a wrapper...'; \
	$wrapper <testcpp.c >testcpp.out 2>&1; \
	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
	x_cpp="$wrapper"
	x_minus=''
	echo "Eureka!"
else
	dflt=''
	rp="No dice.  I can't find a C preprocessor.  Name one:"
	. ./myread
	x_cpp="$ans"
	x_minus=''
	$x_cpp <testcpp.c >testcpp.out 2>&1
	if $contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
		echo "OK, that will do." >&4
	else
echo "Sorry, I can't get that to work.  Go find one and rerun Configure." >&4
		exit 1
	fi
fi

case "$ok" in
false)
	cppstdin="$x_cpp"
	cppminus="$x_minus"
	cpprun="$x_cpp"
	cpplast="$x_minus"
	set X $x_cpp
	shift
	case "$1" in
	"$cpp")
		echo "Perhaps can we force $cc -E using a wrapper..."
		if $wrapper <testcpp.c >testcpp.out 2>&1; \
			$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1
		then
			echo "Yup, we can."
			cppstdin="$wrapper"
			cppminus='';
		else
			echo "Nope, we'll have to live without it..."
		fi
		;;
	esac
	case "$cpprun" in
	"$wrapper")
		cpprun=''
		cpplast=''
		;;
	esac
	;;
esac

case "$cppstdin" in
"$wrapper"|'cppstdin') ;;
*) $rm -f $wrapper;;
esac
$rm -f testcpp.c testcpp.out

: Set private lib path
case "$plibpth" in
'') if ./mips; then
		plibpth="$incpath/usr/lib /usr/local/lib /usr/ccs/lib"
	fi;;
esac
case "$libpth" in
' ') dlist='';;
'') dlist="$loclibpth $plibpth $glibpth";;
*) dlist="$libpth";;
esac

: Now check and see which directories actually exist, avoiding duplicates
libpth=''
for xxx in $dlist
do
    if $test -d $xxx; then
		case " $libpth " in
		*" $xxx "*) ;;
		*) libpth="$libpth $xxx";;
		esac
    fi
done
$cat <<'EOM'

Some systems have incompatible or broken versions of libraries.  Among
the directories listed in the question below, please remove any you
know not to be holding relevant libraries, and add any that are needed.
Say "none" for none.

EOM
case "$libpth" in
'') dflt='none';;
*)
	set X $libpth
	shift
	dflt=${1+"$@@"}
	;;
esac
rp="Directories to use for library searches?"
. ./myread
case "$ans" in
none) libpth=' ';;
*) libpth="$ans";;
esac

: compute shared library extension
case "$so" in
'')
	if xxx=`./loc libc.sl X $libpth`; $test -f "$xxx"; then
		dflt='sl'
	else
		dflt='so'
	fi
	;;
*) dflt="$so";;
esac
$cat <<EOM

On some systems, shared libraries may be available.  Answer 'none' if
you want to suppress searching of shared libraries for the remainder
of this configuration.

EOM
rp='What is the file extension used for shared libraries?'
. ./myread
so="$ans"

: Define several unixisms.
: Hints files or command line option can be used to override them.
: The convoluted testing is in case hints files set either the old
: or the new name.
case "$_exe" in
'')	case "$exe_ext" in
    '')	;;
	*)	_exe="$exe_ext" ;;
	esac
	;;
esac
case "$_a" in
'')	case "$lib_ext" in
    '')	_a='.a';;
d3969 2
a3970 2
			*$thisincl*);;
			*) dflt="$dflt -I$thisincl";;
d4006 1
d4139 1
a4139 1
set X $cc $optimize $ccflags -o try $ldflags try.c $libs
d4158 2
a4159 2
if sh -c "$cc $optimize $ccflags -o try $ldflags try.c $libs" >>try.msg 2>&1; then
	if sh -c './try' >>try.msg 2>&1; then
d4270 1
a4270 1
$cc $optimize $ccflags $ldflags -o ${mc_file} $* ${mc_file}.c $libs > /dev/null 2>&1;'
d4275 1
a4275 1
$cc $optimize $ccflags $ldflags -o ${mc_file} $* ${mc_file}.c $libs;'
a4679 1
: determine the architecture name
d4681 16
a4696 10
if xxx=`./loc arch blurfl $pth`; $test -f "$xxx"; then
	tarch=`arch`"-$osname"
elif xxx=`./loc uname blurfl $pth`; $test -f "$xxx" ; then
	if uname -m > tmparch 2>&1 ; then
		tarch=`$sed -e 's/ *$//' -e 's/ /_/g' \
			-e 's/$/'"-$osname/" tmparch`
	else
		tarch="$osname"
	fi
	$rm -f tmparch
d4698 2
a4699 1
	tarch="$osname"
d4701 35
a4735 2
case "$myarchname" in
''|"$tarch") ;;
d4737 4
a4740 2
	echo "(Your architecture name used to be $myarchname.)"
	archname=''
d4743 18
a4760 4
myarchname="$tarch"
case "$archname" in
'') dflt="$tarch";;
*) dflt="$archname";;
d4762 4
a4765 14
rp='What is your architecture name'
. ./myread
archname="$ans"
case "$usethreads" in
$define)
	echo "Threads selected." >&4
	case "$archname" in
        *-thread*) echo "...and architecture name already has -thread." >&4
                ;;
        *)      archname="$archname-thread"
                echo "...setting architecture name to $archname." >&4
                ;;
        esac
	;;
d4767 14
a4780 11
case "$usemultiplicity" in
$define)
	echo "Multiplicity selected." >&4
	case "$archname" in
        *-multi*) echo "...and architecture name already has -multi." >&4
                ;;
        *)      archname="$archname-multi"
                echo "...setting architecture name to $archname." >&4
                ;;
        esac
	;;
d4782 9
a4790 13
case "$use64bitint" in
$define)
	case "$archname64" in
	'')
		;;
	*)
		case "$archname" in
	        *-$archname64*) echo "...and architecture name already has $archname64." >&4
	                ;;
	        *)      archname="$archname-$archname64"
	                echo "...setting architecture name to $archname." >&4
	                ;;
	        esac
d4793 1
d4796 9
a4804 7
: determine root of directory hierarchy where package will be installed.
case "$prefix" in
'')
	dflt=`./loc . /usr/local /usr/local /local /opt /usr`
	;;
*)
	dflt="$prefix"
d4807 2
a4808 16
$cat <<EOM

By default, $package will be installed in $dflt/bin, manual pages
under $dflt/man, etc..., i.e. with $dflt as prefix for all
installation directories. Typically this is something like /usr/local.
If you wish to have binaries under /usr/bin but other parts of the
installation under /usr/local, that's ok: you will be prompted
separately for each of the installation directories, the prefix being
only used to set the defaults.

EOM
fn=d~
rp='Installation prefix to use?'
. ./getfile
oldprefix=''
case "$prefix" in
d4810 27
a4836 4
*)
	case "$ans" in
	"$prefix") ;;
	*) oldprefix="$prefix";;
d4838 1
d4841 23
a4863 13
prefix="$ans"
prefixexp="$ansexp"

: is AFS running?
echo " "
case "$afs" in
$define|true)	afs=true ;;
$undef|false)	afs=false ;;
*)	if test -d /afs; then
		afs=true
	else
		afs=false
	fi
d4866 19
a4884 2
if test $afs = "true"; then
	echo "AFS may be running... I'll be extra cautious then..." >&4
d4886 550
a5435 1
	echo "AFS does not seem to be running..." >&4
d5516 1
a5516 4
$echo $n "(You have $package revision $revision" $c
$echo $n " patchlevel $patchlevel" $c
test 0 -eq "$subversion" || $echo $n " subversion $subversion" $c
echo ".)"
d5911 5
a5915 161
*)
	usemymalloc='n'
	mallocsrc=''
	mallocobj=''
	d_mymalloc="$undef"
	;;
esac

: compute the return types of malloc and free
echo " "
$cat >malloc.c <<END
#$i_malloc I_MALLOC
#$i_stdlib I_STDLIB
#include <stdio.h>
#include <sys/types.h>
#ifdef I_MALLOC
#include <malloc.h>
#endif
#ifdef I_STDLIB
#include <stdlib.h>
#endif
#ifdef TRY_MALLOC
void *malloc();
#endif
#ifdef TRY_FREE
void free();
#endif
END
case "$malloctype" in
'')
	if $cc $ccflags -c -DTRY_MALLOC malloc.c >/dev/null 2>&1; then
		malloctype='void *'
	else
		malloctype='char *'
	fi
	;;
esac
echo "Your system wants malloc to return '$malloctype', it would seem." >&4

case "$freetype" in
'')
	if $cc $ccflags -c -DTRY_FREE malloc.c >/dev/null 2>&1; then
		freetype='void'
	else
		freetype='int'
	fi
	;;
esac
echo "Your system uses $freetype free(), it would seem." >&4
$rm -f malloc.[co]
$cat <<EOM

The installation process will also create a directory for
vendor-supplied add-ons.  Vendors who supply perl with their system
may find it convenient to place all vendor-supplied files in this
directory rather than in the main distribution directory.  This will
ease upgrades between binary-compatible maintenance versions of perl.

Of course you may also use these directories in whatever way you see
fit.  For example, you might use them to access modules shared over a
company-wide network.

The default answer should be fine for most people.
This causes further questions about vendor add-ons to be skipped
and no vendor-specific directories will be configured for perl.

EOM
rp='Do you want to configure vendor-specific add-on directories?'
case "$usevendorprefix" in
define|true|[yY]*) dflt=y ;;
*)	: User may have set vendorprefix directly on Configure command line.
	case "$vendorprefix" in
	''|' ') dflt=n ;;
	*)	dflt=y ;;
	esac
	;;
esac
. ./myread
case "$ans" in
[yY]*)	fn=d~+
	rp='Installation prefix to use for vendor-supplied add-ons?'
	case "$vendorprefix" in
	'') dflt='' ;;
	*)  dflt=$vendorprefix ;;
	esac
	. ./getfile
	: XXX Prefixit unit does not yet support siteprefix and vendorprefix
	oldvendorprefix=''
	case "$vendorprefix" in
	'') ;;
	*)	case "$ans" in
		"$prefix") ;;
		*) oldvendorprefix="$prefix";;
		esac
		;;
	esac
	usevendorprefix="$define"
	vendorprefix="$ans"
	vendorprefixexp="$ansexp"
	;;
*)	usevendorprefix="$undef"
	vendorprefix=''
	vendorprefixexp=''
	;;
esac

case "$vendorprefix" in
'')	d_vendorlib="$undef"
	vendorlib=''
	vendorlibexp=''
	;;
*)	d_vendorlib="$define"
	: determine where vendor-supplied modules go.
	: Usual default is /usr/local/lib/perl5/vendor_perl/$version
	case "$vendorlib" in
	'')
		prog=`echo $package | $sed 's/-*[0-9.]*$//'`
		case "$installstyle" in
		*lib/perl5*) dflt=$vendorprefix/lib/$package/vendor_$prog/$version ;;
		*)	     dflt=$vendorprefix/lib/vendor_$prog/$version ;;
		esac
		;;
	*)	dflt="$vendorlib"
		;;
	esac
	fn=d~+
	rp='Pathname for the vendor-supplied library files?'
	. ./getfile
	vendorlib="$ans"
	vendorlibexp="$ansexp"
	;;
esac
vendorlib_stem=`echo "$vendorlibexp" | sed "s,/$version$,,"`
: Change installation prefix, if necessary.
if $test X"$prefix" != X"$installprefix"; then
	installvendorlib=`echo $vendorlibexp | $sed "s#^$prefix#$installprefix#"`
else
	installvendorlib="$vendorlibexp"
fi

case "$vendorprefix" in
'')	d_vendorarch="$undef"
	vendorarch=''
	vendorarchexp=''
	;;
*)	d_vendorarch="$define"
	: determine where vendor-supplied architecture-dependent libraries go.
	: vendorlib  default is /usr/local/lib/perl5/vendor_perl/$version
	: vendorarch default is /usr/local/lib/perl5/vendor_perl/$version/$archname
	: vendorlib may have an optional trailing /share.
	case "$vendorarch" in
	'')	dflt=`echo $vendorlib | $sed 's,/share$,,'`
		dflt="$dflt/$archname"
		;;
	*)	dflt="$vendorarch" ;;
	esac
	fn=d~+
	rp='Pathname for vendor-supplied architecture-dependent files?'
	. ./getfile
	vendorarch="$ans"
	vendorarchexp="$ansexp"
a5917 6
: Change installation prefix, if necessary.
if $test X"$prefix" != X"$installprefix"; then
	installvendorarch=`echo $vendorarchexp | sed "s#^$prefix#$installprefix#"`
else
	installvendorarch="$vendorarchexp"
fi
d5919 1
a5919 1
: Cruising for prototypes
d5921 25
a5945 36
echo "Checking out function prototypes..." >&4
$cat >prototype.c <<'EOCP'
int main(int argc, char *argv[]) {
	exit(0);}
EOCP
if $cc $ccflags -c prototype.c >prototype.out 2>&1 ; then
	echo "Your C compiler appears to support function prototypes."
	val="$define"
else
	echo "Your C compiler doesn't seem to understand function prototypes."
	val="$undef"
fi
set prototype
eval $setvar
$rm -f prototype*

case "$prototype" in
"$define") ;;
*)	ansi2knr='ansi2knr'
	echo " "
	cat <<EOM >&4

$me:  FATAL ERROR:
This version of $package can only be compiled by a compiler that 
understands function prototypes.  Unfortunately, your C compiler 
	$cc $ccflags
doesn't seem to understand them.  Sorry about that.

If GNU cc is available for your system, perhaps you could try that instead.  

Eventually, we hope to support building Perl with pre-ANSI compilers.
If you would like to help in that effort, please contact <perlbug@@perl.org>.

Aborting Configure now.
EOM
	exit 2
d5948 1
d5950 7
a5956 35
: determine where public executables go
echo " "
set dflt bin bin
eval $prefixit
fn=d~
rp='Pathname where the public executables will reside?'
. ./getfile
if $test "X$ansexp" != "X$binexp"; then
	installbin=''
fi
bin="$ans"
binexp="$ansexp"
: Change installation prefix, if necessary.
: XXX Bug? -- ignores Configure -Dinstallprefix setting.
if $test X"$prefix" != X"$installprefix"; then
	installbin=`echo $binexp | sed "s#^$prefix#$installprefix#"`
else
	installbin="$binexp"
fi

: Find perl5.005 or later.
echo "Looking for a previously installed perl5.005 or later... "
case "$perl5" in
'')	for tdir in `echo "$binexp:$PATH" | $sed "s/$path_sep/ /g"`; do
		: Check if this perl is recent and can load a simple module
		if $test -x $tdir/perl && $tdir/perl -Mless -e 'use 5.005;' >/dev/null 2>&1; then
			perl5=$tdir/perl
			break;
		elif $test -x $tdir/perl5 && $tdir/perl5 -Mless -e 'use 5.005;' >/dev/null 2>&1; then
			perl5=$tdir/perl
			break;
		fi
	done
	;;
*)	perl5="$perl5"
d5959 2
a5960 5
case "$perl5" in
'')	echo "None found.  That's ok.";;
*)	echo "Using $perl5." ;;
esac

d6011 1
a6011 87
$cat <<EOM

The installation process will create a directory for
site-specific extensions and modules.  Most users find it convenient
to place all site-specific files in this directory rather than in the
main distribution directory.

EOM
fn=d~+
rp='Pathname for the site-specific library files?'
. ./getfile
sitelib="$ans"
sitelibexp="$ansexp"
sitelib_stem=`echo "$sitelibexp" | sed "s,/$version$,,"`
: Change installation prefix, if necessary.
if $test X"$prefix" != X"$installprefix"; then
	installsitelib=`echo $sitelibexp | $sed "s#^$prefix#$installprefix#"`
else
	installsitelib="$sitelibexp"
fi

: Determine list of previous versions to include in @@INC
$cat > getverlist <<EOPL
#!$perl5 -w
use File::Basename;
\$api_versionstring = "$api_versionstring";
\$version = "$version";
\$sitelib = "$sitelib";
\$archname = "$archname";
EOPL
	$cat >> getverlist <<'EOPL'
# Can't have leading @@ because metaconfig interprets it as a command!
;@@inc_version_list=();
$stem=dirname($sitelib);
# XXX Redo to do opendir/readdir? 
if (-d $stem) {
    chdir($stem);
    ;@@candidates = glob("5.*");
}
else {
    ;@@candidates = ();
}

# XXX ToDo:  These comparisons must be reworked when two-digit
# subversions come along, so that 5.7.10 compares as greater than
# 5.7.3!  By that time, hope that 5.6.x is sufficiently
# widespread that we can use the built-in version vectors rather
# than reinventing them here.  For 5.6.0, however, we must
# assume this script will likely be run by 5.005_0x.  --AD 1/2000.
foreach $d (@@candidates) {
    if ($d lt $version) {
	if ($d ge $api_versionstring) {
	    unshift(@@inc_version_list, grep { -d } "$d/$archname", $d);
	}
	elsif ($d ge "5.005") {
	    unshift(@@inc_version_list, grep { -d } $d);
	}
    }
    else {
	# Skip newer version.  I.e. don't look in
	# 5.7.0 if we're installing 5.6.1.
    }
}

if (@@inc_version_list) {
    print join(' ', @@inc_version_list);
}
else {
    # Blank space to preserve value for next Configure run.
    print " ";
}
EOPL
chmod +x getverlist
case "$inc_version_list" in
'')	if test -x "$perl5"; then
		dflt=`$perl5 getverlist`
	else
		dflt='none'
	fi
	;;
$undef) dflt='none' ;;
*)  dflt="$inc_version_list" ;;
esac
case "$dflt" in
''|' ') dflt=none ;;
esac
$cat <<'EOM'
d6013 4
a6016 7
In order to ease the process of upgrading, this version of perl 
can be configured to use modules built and installed with earlier 
versions of perl that were installed under $prefix.  Specify here
the list of earlier versions that this version of perl should check.
If Configure detected no earlier versions of perl installed under
$prefix, then the list will be empty.  Answer 'none' to tell perl
to not search earlier versions.
a6017 2
The default should almost always be sensible, so if you're not sure,
just accept the default.
d6019 12
d6032 9
a6040 11
rp='List of earlier versions to include in @@INC?'
. ./myread
case "$ans" in
[Nn]one|''|' ') inc_version_list=' ' ;;
*) inc_version_list="$ans" ;;
esac
case "$inc_version_list" in
''|' ') 
	inc_version_list_init='0';;
*)	inc_version_list_init=`echo $inc_version_list |
		$sed -e 's/^/"/' -e 's/ /","/g' -e 's/$/",0/'`
d6043 3
a6045 1
$rm -f getverlist
d6047 2
a6048 1
: determine whether to install perl also as /usr/bin/perl
a6049 6
echo " "
if $test -d /usr/bin -a "X$installbin" != X/usr/bin; then
	$cat <<EOM
Many scripts expect perl to be installed as /usr/bin/perl.
I can install the perl you are about to compile also as /usr/bin/perl
(in addition to $installbin/perl).
d6051 8
a6058 10
	case "$installusrbinperl" in
	"$undef"|[nN]*)	dflt='n';;
	*)		dflt='y';;
	esac
	rp="Do you want to install perl as /usr/bin/perl?"
	. ./myread
	case "$ans" in
	[yY]*)	val="$define";;
	*)	val="$undef" ;;
	esac
d6060 1
a6060 1
	val="$undef"
a6061 2
set installusrbinperl
eval $setvar
d6063 16
a6078 12
echo " "
echo "Checking for GNU C Library..." >&4
cat >gnulibc.c <<EOM
#include <stdio.h>
int main()
{
#ifdef __GLIBC__
    exit(0);
#else
    exit(1);
#endif
}
d6080 27
a6106 21
set gnulibc
if eval $compile_ok && ./gnulibc; then
	val="$define"
	echo "You are using the GNU C Library"
else
	val="$undef"
	echo "You are not using the GNU C Library"
fi
$rm -f gnulibc*
set d_gnulibc
eval $setvar

: see if nm is to be used to determine whether a symbol is defined or not
case "$usenm" in
'')
	dflt=''
	case "$d_gnulibc" in
	"$define")
		echo " "
		echo "nm probably won't work on the GNU C Library." >&4
		dflt=n
d6109 25
a6133 8
	case "$dflt" in
	'') 
		if $test "$osname" = aix -a ! -f /lib/syscalls.exp; then
			echo " "
			echo "Whoops!  This is an AIX system without /lib/syscalls.exp!" >&4
			echo "'nm' won't be sufficient on this sytem." >&4
			dflt=n
		fi
d6135 1
a6135 8
	esac
	case "$dflt" in
	'') dflt=`$egrep 'inlibc|csym' $rsrc/Configure | wc -l 2>/dev/null`
		if $test $dflt -gt 20; then
			dflt=y
		else
			dflt=n
		fi
d6138 19
d6158 10
a6167 4
*)
	case "$usenm" in
	true|$define) dflt=y;;
	*) dflt=n;;
d6169 5
d6176 8
d6186 16
a6201 9
I can use $nm to extract the symbols from your C libraries. This
is a time consuming task which may generate huge output on the disk (up
to 3 megabytes) but that should make the symbols extraction faster. The
alternative is to skip the 'nm' extraction part and to compile a small
test program instead to determine whether each symbol is present. If
you have a fast C compiler and/or if your 'nm' output cannot be parsed,
this may be the best solution.

You probably shouldn't let me use 'nm' if you are using the GNU C Library.
d6204 2
a6205 1
rp="Shall I use $nm to extract C symbols from the libraries?"
d6208 6
a6213 2
[Nn]*) usenm=false;;
*) usenm=true;;
d6215 32
d6248 1
a6248 4
runnm=$usenm
case "$reuseval" in
true) runnm=false;;
esac
d6250 2
a6251 14
: nm options which may be necessary
case "$nm_opt" in
'') if $test -f /mach_boot; then
		nm_opt=''	# Mach
	elif $test -d /usr/ccs/lib; then
		nm_opt='-p'	# Solaris (and SunOS?)
	elif $test -f /dgux; then
		nm_opt='-p'	# DG-UX
	elif $test -f /lib64/rld; then
		nm_opt='-p'	# 64-bit Irix
	else
		nm_opt=''
	fi;;
esac
d6253 3
a6255 10
: nm options which may be necessary for shared libraries but illegal
: for archive libraries.  Thank you, Linux.
case "$nm_so_opt" in
'')	case "$myuname" in
	*linux*)
		if $nm --help | $grep 'dynamic' > /dev/null 2>&1; then
			nm_so_opt='--dynamic'
		fi
		;;
	esac
d6259 1
a6259 3
case "$runnm" in
true)
: get list of predefined functions in a handy place
d6261 29
a6289 33
case "$libc" in
'') libc=unknown
	case "$libs" in
	*-lc_s*) libc=`./loc libc_s$_a $libc $libpth`
	esac
	;;
esac
libnames='';
case "$libs" in
'') ;;
*)  for thislib in $libs; do
	case "$thislib" in
	-lc|-lc_s)
		: Handle C library specially below.
		;;
	-l*)
		thislib=`echo $thislib | $sed -e 's/^-l//'`
		if try=`./loc lib$thislib.$so.'*' X $libpth`; $test -f "$try"; then
			:
		elif try=`./loc lib$thislib.$so X $libpth`; $test -f "$try"; then
			:
		elif try=`./loc lib$thislib$_a X $libpth`; $test -f "$try"; then
			:
		elif try=`./loc $thislib$_a X $libpth`; $test -f "$try"; then
			:
		elif try=`./loc lib$thislib X $libpth`; $test -f "$try"; then
			:
		elif try=`./loc $thislib X $libpth`; $test -f "$try"; then
			:
		elif try=`./loc Slib$thislib$_a X $xlibpth`; $test -f "$try"; then
			:
		else
			try=''
a6290 4
		libnames="$libnames $try"
		;;
	*) libnames="$libnames $thislib" ;;
	esac
d6293 2
d6296 3
a6298 24
xxx=normal
case "$libc" in
unknown)
	set /lib/libc.$so
	for xxx in $libpth; do
		$test -r $1 || set $xxx/libc.$so
		: The messy sed command sorts on library version numbers.
		$test -r $1 || \
			set `echo blurfl; echo $xxx/libc.$so.[0-9]* | \
			tr ' ' $trnl | egrep -v '\.[A-Za-z]*$' | $sed -e '
				h
				s/[0-9][0-9]*/0000&/g
				s/0*\([0-9][0-9][0-9][0-9][0-9]\)/\1/g
				G
				s/\n/ /' | \
			 sort | $sed -e 's/^.* //'`
		eval set \$$#
	done
	$test -r $1 || set /usr/ccs/lib/libc.$so
	$test -r $1 || set /lib/libsys_s$_a
	;;
*)
	set blurfl
	;;
d6300 55
a6354 30
if $test -r "$1"; then
	echo "Your (shared) C library seems to be in $1."
	libc="$1"
elif $test -r /lib/libc && $test -r /lib/clib; then
	echo "Your C library seems to be in both /lib/clib and /lib/libc."
	xxx=apollo
	libc='/lib/clib /lib/libc'
	if $test -r /lib/syslib; then
		echo "(Your math library is in /lib/syslib.)"
		libc="$libc /lib/syslib"
	fi
elif $test -r "$libc" || (test -h "$libc") >/dev/null 2>&1; then
	echo "Your C library seems to be in $libc, as you said before."
elif $test -r $incpath/usr/lib/libc$_a; then
	libc=$incpath/usr/lib/libc$_a;
	echo "Your C library seems to be in $libc.  That's fine."
elif $test -r /lib/libc$_a; then
	libc=/lib/libc$_a;
	echo "Your C library seems to be in $libc.  You're normal."
else
	if tans=`./loc libc$_a blurfl/dyick $libpth`; $test -r "$tans"; then
		:
	elif tans=`./loc libc blurfl/dyick $libpth`; $test -r "$tans"; then
		libnames="$libnames "`./loc clib blurfl/dyick $libpth`
	elif tans=`./loc clib blurfl/dyick $libpth`; $test -r "$tans"; then
		:
	elif tans=`./loc Slibc$_a blurfl/dyick $xlibpth`; $test -r "$tans"; then
		:
	elif tans=`./loc Mlibc$_a blurfl/dyick $xlibpth`; $test -r "$tans"; then
		:
d6356 1
a6356 1
		tans=`./loc Llibc$_a blurfl/dyick $xlibpth`
d6358 15
a6372 10
	if $test -r "$tans"; then
		echo "Your C library seems to be in $tans, of all places."
		libc=$tans
	else
		libc='blurfl'
	fi
fi
if $test $xxx = apollo -o -r "$libc" || (test -h "$libc") >/dev/null 2>&1; then
	dflt="$libc"
	cat <<EOM
d6374 7
a6380 2
If the guess above is wrong (which it might be if you're using a strange
compiler, or your machine supports multiple models), you can override it here.
d6382 2
a6384 5
else
	dflt=''
	echo $libpth | tr ' ' $trnl | sort | uniq > libpath
	cat >&4 <<EOM
I can't seem to find your C library.  I've looked in the following places:
d6386 14
a6399 3
EOM
	$sed 's/^/	/' libpath
	cat <<EOM
d6401 1
a6401 1
None of these seems to contain your C library. I need to get its name...
d6403 6
d6410 9
a6418 22
fi
fn=f
rp='Where is your C library?'
. ./getfile
libc="$ans"

echo " "
echo $libc $libnames | tr ' ' $trnl | sort | uniq > libnames
set X `cat libnames`
shift
xxx=files
case $# in 1) xxx=file; esac
echo "Extracting names from the following $xxx for later perusal:" >&4
echo " "
$sed 's/^/	/' libnames >&4
echo " "
$echo $n "This may take a while...$c" >&4

for file in $*; do
	case $file in
	*$so*) $nm $nm_so_opt $nm_opt $file 2>/dev/null;;
	*) $nm $nm_opt $file 2>/dev/null;;
a6419 64
done >libc.tmp

$echo $n ".$c"
$grep fprintf libc.tmp > libc.ptf
xscan='eval "<libc.ptf $com >libc.list"; $echo $n ".$c" >&4'
xrun='eval "<libc.tmp $com >libc.list"; echo "done" >&4'
xxx='[ADTSIW]'
if com="$sed -n -e 's/__IO//' -e 's/^.* $xxx  *_[_.]*//p' -e 's/^.* $xxx  *//p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e 's/^__*//' -e 's/^\([a-zA-Z_0-9$]*\).*xtern.*/\1/p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e '/|UNDEF/d' -e '/FUNC..GL/s/^.*|__*//p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e 's/^.* D __*//p' -e 's/^.* D //p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e 's/^_//' -e 's/^\([a-zA-Z_0-9]*\).*xtern.*text.*/\1/p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e 's/^.*|FUNC |GLOB .*|//p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$grep '|' | $sed -n -e '/|COMMON/d' -e '/|DATA/d' \
				-e '/ file/d' -e 's/^\([^ 	]*\).*/\1/p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e 's/^.*|FUNC |GLOB .*|//p' -e 's/^.*|FUNC |WEAK .*|//p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e 's/^__//' -e '/|Undef/d' -e '/|Proc/s/ .*//p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e 's/^.*|Proc .*|Text *| *//p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e '/Def. Text/s/.* \([^ ]*\)\$/\1/p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e 's/^[-0-9a-f ]*_\(.*\)=.*/\1/p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e 's/.*\.text n\ \ \ \.//p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="sed -n -e 's/^__.*//' -e 's/[       ]*D[    ]*[0-9]*.*//p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
d6421 1
a6421 49
	$nm -p $* 2>/dev/null >libc.tmp
	$grep fprintf libc.tmp > libc.ptf
	if com="$sed -n -e 's/^.* [ADTSIW]  *_[_.]*//p' -e 's/^.* [ADTSIW] //p'";\
		eval $xscan; $contains '^fprintf$' libc.list >/dev/null 2>&1
	then
		nm_opt='-p'
		eval $xrun
	else
		echo " "
		echo "$nm didn't seem to work right. Trying $ar instead..." >&4
		com=''
		if $ar t $libc > libc.tmp && $contains '^fprintf$' libc.tmp >/dev/null 2>&1; then
			for thisname in $libnames $libc; do
				$ar t $thisname >>libc.tmp
			done
			$sed -e "s/\\$_o\$//" < libc.tmp > libc.list
			echo "Ok." >&4
		elif test "X$osname" = "Xos2" && $ar tv $libc > libc.tmp; then
			# Repeat libc to extract forwarders to DLL entries too
			for thisname in $libnames $libc; do
				$ar tv $thisname >>libc.tmp
				# Revision 50 of EMX has bug in $ar.
				# it will not extract forwarders to DLL entries
				# Use emximp which will extract exactly them.
				emximp -o tmp.imp $thisname \
				    2>/dev/null && \
				    $sed -e 's/^\([_a-zA-Z0-9]*\) .*$/\1/p' \
				    < tmp.imp >>libc.tmp
				$rm tmp.imp
			done
			$sed -e "s/\\$_o\$//" -e 's/^ \+//' < libc.tmp > libc.list
			echo "Ok." >&4
		else
			echo "$ar didn't seem to work right." >&4
			echo "Maybe this is a Cray...trying bld instead..." >&4
			if bld t $libc | $sed -e 's/.*\///' -e "s/\\$_o:.*\$//" > libc.list
			then
				for thisname in $libnames; do
					bld t $libnames | \
					$sed -e 's/.*\///' -e "s/\\$_o:.*\$//" >>libc.list
					$ar t $thisname >>libc.tmp
				done
				echo "Ok." >&4
			else
				echo "That didn't work either.  Giving up." >&4
				exit 1
			fi
		fi
	fi
d6423 2
a6424 9
nm_extract="$com"
if $test -f /lib/syscalls.exp; then
	echo " "
	echo "Also extracting names from /lib/syscalls.exp for good ole AIX..." >&4
	$sed -n 's/^\([^ 	]*\)[ 	]*syscall[0-9]*$/\1/p' /lib/syscalls.exp >>libc.list
fi
;;
esac
$rm -f libnames libpath
a6429 63
: is a C symbol defined?
csym='tlook=$1;
case "$3" in
-v) tf=libc.tmp; tc=""; tdc="";;
-a) tf=libc.tmp; tc="[0]"; tdc="[]";;
*) tlook="^$1\$"; tf=libc.list; tc="()"; tdc="()";;
esac;
tx=yes;
case "$reuseval-$4" in
true-) ;;
true-*) tx=no; eval "tval=\$$4"; case "$tval" in "") tx=yes;; esac;;
esac;
case "$tx" in
yes)
	case "$runnm" in
	true)
		if $contains $tlook $tf >/dev/null 2>&1;
		then tval=true;
		else tval=false;
		fi;;
	*)
		echo "int main() { extern short $1$tdc; printf(\"%hd\", $1$tc); }" > t.c;
		if $cc $optimize $ccflags $ldflags -o t t.c $libs >/dev/null 2>&1;
		then tval=true;
		else tval=false;
		fi;
		$rm -f t t.c;;
	esac;;
*)
	case "$tval" in
	$define) tval=true;;
	*) tval=false;;
	esac;;
esac;
eval "$2=$tval"'

: define an is-in-libc? function
inlibc='echo " "; td=$define; tu=$undef;
sym=$1; var=$2; eval "was=\$$2";
tx=yes;
case "$reuseval$was" in
true) ;;
true*) tx=no;;
esac;
case "$tx" in
yes)
	set $sym tres -f;
	eval $csym;
	case "$tres" in
	true)
		echo "$sym() found." >&4;
		case "$was" in $undef) . ./whoa; esac; eval "$var=\$td";;
	*)
		echo "$sym() NOT found." >&4;
		case "$was" in $define) . ./whoa; esac; eval "$var=\$tu";;
	esac;;
*)
	case "$was" in
	$define) echo "$sym() found." >&4;;
	*) echo "$sym() NOT found." >&4;;
	esac;;
esac'

d6505 1
a6505 1
			svr4*|esix*|solaris) dflt='-KPIC' ;;
d6511 1
a6511 1
			svr4*|esix*|solaris) dflt='-fPIC' ;;
d6587 1
a6587 1
			svr4*|esix*) dflt="-G $ldflags" ;;
d6601 1
a6601 1
		-L*)
d6662 1
a6662 1
		svr4*|dgux|dynixptx|esix|powerux|beos|cygwin*)
d6776 1
a6776 1
will not work in this version.  Let me (perlbug@@perl.com)
d6867 18
d7251 2
a7252 1
		$test x`$awk "/[0-9].*[	 ]$myhostname$tmp_re/ { sum++ }
d7254 12
a7265 5
		dflt=.`$awk "/[0-9].*[	 ]$myhostname$tmp_re/ {for(i=2; i<=NF;i++) print \\\$i}" \
			hosts | $sort | $uniq | \
			$sed -n -e "s/$myhostname\.\([-a-zA-Z0-9_.]\)/\1/p"`
		case `$echo X$dflt` in
		X*\ *)	echo "(Several hosts in /etc/hosts matched hostname)"
d7267 1
a7267 4
			;;
		X.) echo "(You do not have fully-qualified names in /etc/hosts)"
			;;
		esac
d7294 5
d7388 1
a7388 1
will send mail to this address in addition to perlbug@@perl.com. You may
d7400 19
d7433 4
a7436 1
		dflt="$binexp/perl"
a7528 31
: determine where site specific architecture-dependent libraries go.
: sitelib  default is /usr/local/lib/perl5/site_perl/$version
: sitearch default is /usr/local/lib/perl5/site_perl/$version/$archname
: sitelib may have an optional trailing /share.
case "$sitearch" in
'')	dflt=`echo $sitelib | $sed 's,/share$,,'`
	dflt="$dflt/$archname"
	;;
*)	dflt="$sitearch"
	;;
esac
set sitearch sitearch none
eval $prefixit
$cat <<EOM

The installation process will also create a directory for
architecture-dependent site-specific extensions and modules.

EOM
fn=d~+
rp='Pathname for the site-specific architecture-dependent library files?'
. ./getfile
sitearch="$ans"
sitearchexp="$ansexp"
: Change installation prefix, if necessary.
if $test X"$prefix" != X"$installprefix"; then
	installsitearch=`echo $sitearchexp | sed "s#^$prefix#$installprefix#"`
else
	installsitearch="$sitearchexp"
fi

a7545 61
: see if sqrtl exists
set sqrtl d_sqrtl
eval $inlibc

case "$ccflags" in
*-DUSE_LONG_DOUBLE*|*-DUSE_MORE_BITS*) uselongdouble="$define" ;;
esac

case "$uselongdouble" in
$define|true|[yY]*)	dflt='y';;
*) dflt='n';;
esac
cat <<EOM

Perl can be built to take advantage of long doubles which
(if available) may give more accuracy and range for floating point numbers.

If this doesn't make any sense to you, just accept the default '$dflt'.
EOM
rp='Try to use long doubles if available?'
. ./myread
case "$ans" in
y|Y) 	val="$define"	;;
*)      val="$undef"	;;
esac
set uselongdouble
eval $setvar

case "$uselongdouble" in
true|[yY]*) uselongdouble="$define" ;;
esac

case "$uselongdouble" in
$define)
: Look for a hint-file generated 'call-back-unit'.  If the
: user has specified that long doubles should be used,
: we may need to set or change some other defaults.
	if $test -f uselongdouble.cbu; then
		echo "Your platform has some specific hints for long doubles, using them..."
		. ./uselongdouble.cbu
	else
		$cat <<EOM
(Your platform doesn't have any specific hints for long doubles.)
EOM
	fi
	;;
esac

case "$uselongdouble:$d_sqrtl" in
$define:$undef)
		$cat <<EOM >&4

*** You requested the use of long doubles but you do not seem to have
*** the mathematic functions for long doubles.  I'm disabling the use
*** of long doubles.

EOM
	uselongdouble=$undef
	;;
esac

a7604 76
: check for length of double
echo " "
case "$doublesize" in
'')
	echo "Checking to see how big your double precision numbers are..." >&4
	$cat >try.c <<'EOCP'
#include <stdio.h>
int main()
{
    printf("%d\n", (int)sizeof(double));
    exit(0);
}
EOCP
	set try
	if eval $compile_ok; then
		doublesize=`./try`
		echo "Your double is $doublesize bytes long."
	else
		dflt='8'
		echo "(I can't seem to compile the test program.  Guessing...)"
		rp="What is the size of a double precision number (in bytes)?"
		. ./myread
		doublesize="$ans"
	fi
	;;
esac
$rm -f try.c try

: check for long doubles
echo " "
echo "Checking to see if you have long double..." >&4
echo 'int main() { long double x = 7.0; }' > try.c
set try
if eval $compile; then
	val="$define"
	echo "You have long double."
else
	val="$undef"
	echo "You do not have long double."
fi
$rm try.*
set d_longdbl
eval $setvar

: check for length of long double
case "${d_longdbl}${longdblsize}" in
$define)
	echo " "
	echo "Checking to see how big your long doubles are..." >&4
	$cat >try.c <<'EOCP'
#include <stdio.h>
int main()
{
	printf("%d\n", sizeof(long double));
}
EOCP
	set try
	set try
	if eval $compile; then
		longdblsize=`./try$exe_ext`
		echo "Your long doubles are $longdblsize bytes long."
	else
		dflt='8'
		echo " "
		echo "(I can't seem to compile the test program.  Guessing...)" >&4
		rp="What is the size of a long double (in bytes)?"
		. ./myread
		longdblsize="$ans"
	fi
	if $test "X$doublesize" = "X$longdblsize"; then
		echo "(That isn't any different from an ordinary double.)"
	fi	
	;;
esac
$rm -f try.* try

d7626 1
a7626 1
                	sPRIFldbl='"F"'; sPRIGldbl='"G"'; sPRIEldbl='"E"';
d7648 1
a7648 1
                	sPRIFldbl='"llF"'; sPRIGldbl='"llG"'; sPRIEldbl='"llE"';
d7670 1
a7670 1
                	sPRIFldbl='"LF"'; sPRIGldbl='"LG"'; sPRIEldbl='"LE"';
d7692 1
a7692 1
                	sPRIFldbl='"lF"'; sPRIGldbl='"lG"'; sPRIEldbl='"lE"';
d7701 2
d7711 2
a7712 1
	d_PRIFldbl="$undef"; d_PRIGldbl="$undef"; d_PRIEldbl="$undef"; 
d7715 2
a7716 1
	d_PRIFldbl="$define"; d_PRIGldbl="$define"; d_PRIEldbl="$define"; 
d7721 13
a7733 14
if test "X$d_Gconvert" = X; then
	echo " "
	echo "Checking for an efficient way to convert floats to strings."
	echo " " > try.c
	case "$uselongdouble" in
	"$define") echo "#define USE_LONG_DOUBLE" >>try.c ;;
	esac
	case "$d_longdbl" in
	"$define") echo "#define HAS_LONG_DOUBLE" >>try.c ;;
	esac
	case "$d_PRIgldbl" in
	"$define") echo "#define HAS_PRIgldbl"    >>try.c ;;
	esac
	$cat >>try.c <<EOP
d7828 3
d7834 6
a7839 6
	case "$d_Gconvert" in
	gconvert*) xxx_list='gconvert gcvt sprintf' ;;
	gcvt*) xxx_list='gcvt gconvert sprintf' ;;
	sprintf*) xxx_list='sprintf gconvert gcvt' ;;
	*) xxx_list='gconvert gcvt sprintf' ;;
	esac
d7841 10
a7850 3
        case "$d_longdbl$uselongdouble$d_qgcvt" in
        "$define$define$define") xxx_list="`echo $xxx_list|sed 's/gcvt/qgcvt gcvt/'`" ;;
	esac
d7852 9
a7860 12
	for xxx_convert in $xxx_list; do
		echo "Trying $xxx_convert..."
		$rm -f try try$_o
		set try -DTRY_$xxx_convert
		if eval $compile; then
			echo "$xxx_convert() found." >&4
			if ./try; then
				echo "I'll use $xxx_convert to convert floats into a string." >&4
				break;
			else
				echo "...But $xxx_convert didn't work as I expected."
			fi
d7862 1
a7862 1
			echo "$xxx_convert NOT found." >&4
d7864 20
a7883 14
	done
		
	case "$xxx_convert" in
	gconvert) d_Gconvert='gconvert((x),(n),(t),(b))' ;;
	gcvt) d_Gconvert='gcvt((x),(n),(b))' ;;
	qgcvt) d_Gconvert='qgcvt((x),(n),(b))' ;;
	*) case "$uselongdouble$d_longdbl$d_PRIgldbl" in
	   "$define$define$define")
	      d_Gconvert="sprintf((b),\"%.*$sPRIgldbl\",(n),(x))" ;;
	   *) d_Gconvert='sprintf((b),"%.*g",(n),(x))' ;;
	   esac
	   ;;  
	esac
fi
d7916 1
a7916 1
		$cc $cppflags -DI_SYS_FILE -o access access.c >/dev/null 2>&1 ; then
d7920 1
a7920 1
		$cc $cppflags -DI_FCNTL -o access access.c >/dev/null 2>&1 ; then
d7924 1
a7924 1
		$cc $cppflags -DI_UNISTD -o access access.c >/dev/null 2>&1 ; then
d8014 1
a8014 1
	if $cc -DTRY_BSD_PGRP $ccflags $ldflags -o set set.c $libs >/dev/null 2>&1 && ./set; then
d8017 1
a8017 1
	elif $cc $ccflags $ldflags -o set set.c $libs >/dev/null 2>&1 && ./set; then
d8076 1
a8076 1
	if $cc -DTRY_BSD_PGRP $ccflags $ldflags -o set set.c $libs >/dev/null 2>&1 && ./set; then
d8079 1
a8079 1
	elif $cc $ccflags $ldflags -o set set.c $libs >/dev/null 2>&1 && ./set; then
d8631 2
a8632 2
		$ld $lddlflags -o dyna.$dlext tmp-dyna${_o} > /dev/null 2>&1 && 
		$cc $ccflags -o fred $ldflags $cccdlflags $ccdlflags fred.c $libs > /dev/null 2>&1; then
a8710 4
: see if endspent exists
set endspent d_endspent
eval $inlibc

d8871 1
d8874 3
d8923 1
d8989 48
d9343 4
d9413 4
d9428 4
d9576 4
d9614 4
a9639 4
: see if getspent exists
set getspent d_getspent
eval $inlibc

d9849 8
d9939 1
a9939 1
	echo "You have have long long."
d10076 4
d10242 31
d10451 5
a10455 1
$echo "Checking whether your NVs can preserve your UVs..." >&4
d10458 6
d10465 1
a10465 1
    $uvtype k = ($uvtype)~0, l;
d10467 23
a10489 5
    l = k;
    d = ($nvtype)l;
    l = ($uvtype)d;
    if (l == k)
       printf("preserve\n");
d10494 2
d10497 12
a10508 9
	case "`./try$exe_ext`" in
	preserve) d_nv_preserves_uv="$define" ;;
	esac
fi	
case "$d_nv_preserves_uv" in
$define) $echo "Yes, they can."  2>&1 ;;
*)	 $echo "No, they can't." 2>&1
	 d_nv_preserves_uv="$undef"
	 ;;
d11026 5
d11312 4
a11347 4
: see if setspent exists
set setspent d_setspent
eval $inlibc

d11376 6
d11385 4
a11388 1
	y|Y) ;;
a11390 5
		: Remove sfio from list of libraries to use
		set `echo X $libs | $sed -e 's/-lsfio / /' -e 's/-lsfio$//'`
		shift
		libs="$*"
		echo "libs = $libs" >&4
d11396 3
a11398 2
		echo "Sorry, cannot find sfio on this machine" >&4
		echo "Ignoring your setting of usesfio=$usesfio" >&4
d11409 10
d11577 4
d11634 22
a11655 1
if $contains '_IO_fpos_t' `./findhdr stdio.h` `./findhdr libio.h` >/dev/null 2>&1 ; then
d11695 1
d11745 87
d11996 3
d12025 2
a12026 1
		case "`./try`" in
d12034 3
a12286 31
: check for volatile keyword
echo " "
echo 'Checking to see if your C compiler knows about "volatile"...' >&4
$cat >try.c <<'EOCP'
int main()
{
	typedef struct _goo_struct goo_struct;
	goo_struct * volatile goo = ((goo_struct *)0);
	struct _goo_struct {
		long long_int;
		int reg_int;
		char char_var;
	};
	typedef unsigned short foo_t;
	char *volatile foo;
	volatile int bar;
	volatile foo_t blech;
	foo = foo;
}
EOCP
if $cc -c $ccflags try.c >/dev/null 2>&1 ; then
	val="$define"
	echo "Yup, it does."
else
	val="$undef"
	echo "Nope, it doesn't."
fi
set d_volatile
eval $setvar
$rm -f try.*

d12894 1
a12894 1
		echo "You have EBCDIC." >&4
d12897 1
a12897 1
		echo "Nope, no EBCDIC, probably ASCII or some ISO Latin." >&4
d12901 1
a12901 1
	echo "I'll assume ASCII or some ISO Latin." >&4
d13309 1
a13309 1
                	sPRIo64='"o"'; sPRIx64='"x"'; sPRIX64='"X"';
d13331 1
a13331 1
                	sPRIo64='"lo"'; sPRIx64='"lx"'; sPRIX64='"lX"';
d13354 1
a13354 1
                	sPRIo64=PRIo64; sPRIx64=PRIx64; sPRIX64=PRIX64;
d13366 1
a13366 1
  long long q = 12345678901LL; /* AIX cc requires the LL prefix. */
d13376 1
a13376 1
                	sPRIo64='"llo"'; sPRIx64='"llx"'; sPRIX64='"llX"';
d13398 1
a13398 1
                	sPRIo64='"Lo"'; sPRIx64='"Lx"'; sPRIX64='"LX"';
d13420 1
a13420 1
                	sPRIo64='"qo"'; sPRIx64='"qx"'; sPRIX64='"qX"';
d13437 1
a13437 1
	d_PRIo64="$undef"; d_PRIx64="$undef"; d_PRIX64="$undef"; 
d13440 1
a13440 1
	d_PRIo64="$define"; d_PRIx64="$define"; d_PRIX64="$define"; 
d13453 1
d13460 1
d13467 1
d13475 1
d13481 16
d13775 1
d13779 1
d13783 1
d13856 1
a13856 1
if $cc $ccflags $ldflags -o foobar foo$_o bar$_a $libs > /dev/null 2>&1 &&
d13862 1
a13862 1
	$cc $ccflags $ldflags -o foobar foo$_o bar$_a $libs > /dev/null 2>&1 &&
d14353 4
a14363 1
	hdrs="$define sys/types.h $d_socket sys/socket.h" 
d14372 13
a14384 4
			if ./protochk "$try" $hdrs; then
				echo "Your system accepts '$xxx *' for the last argument of accept()."
				socksizetype="$xxx"
			fi
d14445 2
a14446 1
if $contains 'unsigned.*char.*_ptr;' `./findhdr stdio.h` >/dev/null 2>&1 ; then
d14449 1
a14449 1
else
d14453 1
d14603 31
d14725 4
d14808 4
d14817 3
a14819 3
alliant alpha am29000 AM29000 amiga AMIGAOS AMIX
ansi ANSI_C_SOURCE apollo ardent atarist att386 att3b BeOS
BIG_ENDIAN BIT_MSF bsd BSD bsd43 bsd4_2 bsd4_3 BSD4_3 bsd4_4
d14832 1
a14832 1
iAPX286 ibm ibm032 ibmesa IBMR2 ibmrt ILP32 ILP64
d14848 1
a14848 1
news700 news800 news900 NeXT NLS ns16000 ns32000
d14856 1
a14856 1
riscix riscos RT scs SCO sequent sgi SGI_SOURCE sinix
d14864 1
d14881 3
a14883 2
$cat Cppsym.a Cppsym.b | $tr ' ' $trnl | sort | uniq > Cppsym.know
$rm -f Cppsym.a Cppsym.b
d14922 1
d14924 1
a14924 1
$cc $optimize \$ccflags $ldflags -o try try.c $libs && ./try$exe_ext
d14978 1
a14978 1
		$sed -e 's/\(.*\)=.*/\1/' ccsym.com
d14988 1
a14988 1
		$sed -e 's/\(.*\)=.*/\1/' ccsym.cpp
d14997 2
a14998 2
		$sed -e 's/\(.*\)=1/\1/' ccsym.own
		$sed -e 's/\(.*\)=.*/\1/' ccsym.own | $uniq >>Cppsym.true
d15004 1
a15004 1
$rm -f ccsym*
a15064 4
: see if this is a socks.h system
set socks.h i_socks
eval $inhdr

d15382 6
d15534 19
d15664 2
d15667 1
d15694 4
a15697 4
d_PRIEldbl='$d_PRIEldbl'
d_PRIFldbl='$d_PRIFldbl'
d_PRIGldbl='$d_PRIGldbl'
d_PRIX64='$d_PRIX64'
d15706 2
a15748 1
d_endspent='$d_endspent'
d15754 1
d15764 1
d15770 1
d15774 1
d15790 1
d15800 1
a15805 1
d_getspent='$d_getspent'
d15817 2
d15845 1
d15862 1
d15870 1
d15894 1
d15918 1
a15927 1
d_setspent='$d_setspent'
d15941 1
d15949 2
d16030 1
a16044 1
huge='$huge'
d16067 1
d16081 1
d16154 1
a16159 1
large='$large'
d16163 1
d16176 1
a16204 1
medium='$medium'
a16207 1
models='$models'
d16226 6
d16241 1
d16250 1
d16276 4
a16279 4
sPRIEldbl='$sPRIEldbl'
sPRIFldbl='$sPRIFldbl'
sPRIGldbl='$sPRIGldbl'
sPRIX64='$sPRIX64'
d16288 1
a16322 1
small='$small'
a16329 1
split='$split'
d16394 1
d16410 1
d16415 2
d16431 1
a16431 1
	<UU/config.sh sort | uniq >UU/oldconfig.sh
d16433 1
a16433 1
	sort | uniq -u >UU/oldsyms
d16507 1
a16507 1
		$make depend && echo "Now you must run a $make."
@


1.6
log
@New configuration method, use a combination of hints and config.over.  Also add in OpenBSD-specific patches
@
text
@d21 1
a21 1
# $Id: Configure,v 1.5 1999/04/29 22:50:50 millert Exp $
d23 2
a24 2
# Generated on Tue Jul  7 10:10:21 EDT 1998 [metaconfig 3.0 PL70]
# (with additional metaconfig patches by jhi@@iki.fi)
d111 7
d163 3
a178 1
full_ar=''
d246 1
d281 2
d287 2
d301 1
d308 1
d310 1
d337 1
d339 2
d344 1
d346 1
d357 3
a360 1
i_sysmount=''
d362 1
a362 6
d_statfsflags=''
i_sysstatvfs=''
d_fstatvfs=''
i_mntent=''
d_getmntent=''
d_hasmntopt=''
d366 3
d379 2
d395 1
d398 2
d403 1
d405 1
d407 1
d411 1
d419 1
d421 1
d425 1
d431 1
d433 2
d436 3
d444 2
d447 1
d455 2
d459 2
a460 3
d_pthreads_created_joinable=''
i_pthread=''
i_machcthreads=''
d478 1
d490 1
d499 1
d512 5
d518 1
d523 2
d526 4
d549 2
d552 2
d561 1
d572 1
d591 1
d593 3
a595 1
doublesize=''
d597 3
d604 1
a606 1
i_arpainet=''
a618 3
d_setgrent=''
d_getgrent=''
d_endgrent=''
d620 3
d625 1
d629 1
d633 1
d636 2
a645 3
d_setpwent=''
d_getpwent=''
d_endpwent=''
d648 2
d654 2
d663 4
d670 1
d673 2
d677 1
d679 2
d690 1
d697 6
d707 1
d718 4
d723 13
d759 1
d781 4
a784 1
apiversion=''
d786 1
d789 1
d792 27
d827 17
d845 3
d854 1
d862 3
d867 1
d869 3
d874 1
d883 2
d887 3
d891 7
d903 1
d905 2
a908 1
mips=''
d911 16
d929 2
a937 6
installusrbinperl=''

ccsymbols=''
cppsymbols=''
cppccsymbols=''

d947 16
a962 64
: list of known cpp symbols, sorted alphabetically
al="AMIX BIT_MSF BSD BSD4_3 BSD_NET2 CMU CRAY DGUX DOLPHIN DPX2"
al="$al GO32 GOULD_PN HP700 I386 I80960 I960 Lynx M68000 M68K MACH"
al="$al MIPSEB MIPSEL MSDOS MTXINU MULTIMAX MVS"
al="$al M_COFF M_I186 M_I286 M_I386 M_I8086 M_I86 M_I86SM"
al="$al M_SYS3 M_SYS5 M_SYSIII M_SYSV M_UNIX M_XENIX"
al="$al NeXT OCS88 OSF1 PARISC PC532 PORTAR POSIX"
al="$al PWB R3000 RES RISC6000 RT Sun386i SVR3 SVR4"
al="$al SYSTYPE_BSD SYSTYPE_SVR4 SYSTYPE_SYSV Tek4132 Tek4300"
al="$al UMAXV USGr4 USGr4_2 UTEK UTS UTek UnicomPBB UnicomPBD Utek"
al="$al VMS Xenix286"
al="$al _AIX _AIX32 _AIX370 _AIX41 _AM29000 _COFF _CRAY _CX_UX _EPI _POWER"
al="$al _IBMESA _IBMR2 _M88K _M88KBCS_TARGET"
al="$al _MIPSEB _MIPSEL _M_COFF _M_I86 _M_I86SM _M_SYS3"
al="$al _M_SYS5 _M_SYSIII _M_SYSV _M_UNIX _M_XENIX _NLS _PGC_ _R3000"
al="$al _SYSTYPE_BSD _SYSTYPE_BSD43 _SYSTYPE_SVR4"
al="$al _SYSTYPE_SYSV _SYSV3 _U370 _UNICOS"
al="$al __386BSD__ __BIG_ENDIAN __BIG_ENDIAN__ __BSD_4_4__"
al="$al __DGUX__ __DPX2__ __H3050R __H3050RX"
al="$al __LITTLE_ENDIAN __LITTLE_ENDIAN__ __MACH__"
al="$al __MIPSEB __MIPSEB__ __MIPSEL __MIPSEL__"
al="$al __Next__ __OSF1__ __PARAGON__ __PGC__ __PWB __STDC__"
al="$al __SVR4_2__ __UMAXV__"
al="$al ____386BSD____ __alpha __alpha__ __amiga"
al="$al __bsd4_2 __bsd4_2__ __bsdi__ __convex__"
al="$al __host_mips__"
al="$al __hp9000s200 __hp9000s300 __hp9000s400 __hp9000s500"
al="$al __hp9000s500 __hp9000s700 __hp9000s800"
al="$al __hppa __hpux __hp_osf __i286 __i286__ __i386 __i386__"
al="$al __i486 __i486__ __i860 __i860__ __ibmesa __ksr1__ __linux__"
al="$al __m68k __m68k__ __m88100__ __m88k __m88k__"
al="$al __mc68000 __mc68000__ __mc68020 __mc68020__"
al="$al __mc68030 __mc68030__ __mc68040 __mc68040__"
al="$al __mc88100 __mc88100__ __mips __mips__"
al="$al __motorola__ __osf__ __pa_risc __sparc__ __stdc__"
al="$al __sun __sun__ __svr3__ __svr4__ __ultrix __ultrix__"
al="$al __unix __unix__ __uxpm__ __uxps__ __vax __vax__"
al="$al _host_mips _mips _unix"
al="$al a29k aegis aix aixpc alliant alpha am29000 amiga ansi ardent"
al="$al apollo ardent att386 att3b"
al="$al bsd bsd43 bsd4_2 bsd4_3 bsd4_4 bsdi bull"
al="$al cadmus clipper concurrent convex cray ctix"
al="$al dmert encore gcos gcx gimpel gould"
al="$al hbullx20 hcx host_mips hp200 hp300 hp700 hp800"
al="$al hp9000 hp9000s300 hp9000s400 hp9000s500"
al="$al hp9000s700 hp9000s800 hp9k8 hppa hpux"
al="$al i186 i286 i386 i486 i8086"
al="$al i80960 i860 iAPX286 ibm ibm032 ibmrt interdata is68k"
al="$al ksr1 linux luna luna88k m68k m88100 m88k"
al="$al mc300 mc500 mc68000 mc68010 mc68020 mc68030"
al="$al mc68040 mc68060 mc68k mc68k32 mc700"
al="$al mc88000 mc88100 merlin mert mips mvs n16"
al="$al ncl_el ncl_mr"
al="$al news1500 news1700 news1800 news1900 news3700"
al="$al news700 news800 news900 ns16000 ns32000"
al="$al ns32016 ns32332 ns32k nsc32000 os osf"
al="$al parisc pc532 pdp11 plexus posix pyr"
al="$al riscix riscos scs sequent sgi sinix sony sony_news"
al="$al sonyrisc sparc sparclite spectrum stardent stratos"
al="$al sun sun3 sun386 svr4 sysV68 sysV88"
al="$al titan tower tower32 tower32_200 tower32_600 tower32_700"
al="$al tower32_800 tower32_850 tss u370 u3b u3b2 u3b20 u3b200"
al="$al u3b20d u3b5 ultrix unix unixpc unos vax venix vms"
al="$al xenix z8000"
d964 1
a964 1
i_whoami=''
a966 1

d972 1
a972 2
glibpth="/shlib /usr/shlib /lib/pa1.1 /usr/lib/large"
glibpth="$glibpth /lib /usr/lib $xlibpth"
d975 2
d985 1
a985 1
: some systems want only to use the non-versioned libso:s
d987 3
a989 13
: Possible local include directories to search.
: Set locincpth to "" in a hint file to defeat local include searches.
locincpth="/usr/local/include /opt/local/include /usr/gnu/include"
locincpth="$locincpth /opt/gnu/include /usr/GNU/include /opt/GNU/include"
:
: no include file wanted by default
inclwanted=''

: Trailing extension.  Override this in a hint file, if needed.
_exe=''
: Extra object files, if any, needed on this platform.
archobjs=''
groupstype=''
a992 5
: set useposix=false in your hint file to disable the POSIX extension.
useposix=true
: set useopcode=false in your hint file to disable the Opcode extension.
useopcode=true
: set usethreads on the Configure command line to enable threads.
d995 4
a998 3
libswanted='sfio socket inet nsl nm ndbm gdbm dbm db malloc dl'
libswanted="$libswanted dld ld sun m c cposix posix ndir dir crypt"
libswanted="$libswanted ucb bsd BSD PW x"
d1041 2
a1042 1
Please contact perlbug@@perl.com and we'll try to straighten this all out.
d1127 1
a1127 1
	optstr = "dD:eEf:hKOrsSU:V";	# getopt-style specification
d1187 1
a1187 1
rm -f optdef.sh
d1241 50
d1292 1
a1292 1
		exit 0;;
d1303 1
a1303 1
                 [-U symbol] [-U symbol=]
d1320 10
d1355 2
d1391 6
a1396 1
    */*) src=`echo $0 | sed -e 's%/[^/][^/]*$%%'`;;
d1441 1
a1441 1
CONFIG=true
d1577 1
a1577 1
and then contact perlbug@@perl.com.
d1802 1
a1802 1
have, let perlbug@@perl.com know how I blew it.
a1873 1
find
a1894 1
line
a1898 1
perl
a1899 2
sendmail
tee
d2106 2
a2107 1
myuname=`( ($uname -a) 2>/dev/null || hostname) 2>&1`
d2173 1
d2193 1
d2200 1
d2221 1
a2221 1
				if test "$lns" = "ln -s"; then
d2229 1
a2229 1
			unset tmp
d2250 6
d2269 1
a2269 1
			osvers=`echo "$4" | $sed 's/^v//'`
d2300 3
a2302 2
		bsd386) osname=bsd386
			osvers=`$uname -r`
d2308 3
a2310 1
		next*) osname=next ;;
d2345 4
a2348 1
		uts) osname=uts 
a2350 3
		qnx) osname=qnx
			osvers="$4"
			;;
d2424 1
a2424 1
		file=`echo "${osname}_${osvers}" | $sed -e 's@@\.@@_@@g' -e 's@@_$@@@@'`
d2426 4
a2429 4
		xfile=`echo $file | $sed -e 's@@_[^_]*$@@@@'`
		xxfile=`echo $xfile | $sed -e 's@@_[^_]*$@@@@'`
		xxxfile=`echo $xxfile | $sed -e 's@@_[^_]*$@@@@'`
		xxxxfile=`echo $xxxfile | $sed -e 's@@_[^_]*$@@@@'`
d2480 1
a2480 1
is a good thing.  DO NOT give a wrong version.
d2594 3
d2598 1
a2598 1
cf_time=`LC_ALL=C; export LC_ALL; $date 2>&1`
d2632 4
d2638 2
a2639 2
Perl can be built to take advantage of threads, on some systems.
To do so, Configure must be run with -Dusethreads.
d2646 2
a2648 4
case "$usethreads" in
$define|true|[yY]*)     dflt='y';;
*) dflt='n';;
esac
d2652 1
a2652 1
y|Y)    val="$define" ;;     
d2656 46
a2701 1
eval $setvar 
d2718 1
d2720 5
d2726 8
a2733 8
	case "$osname" in
	aix|dec_osf|dos_djgpp|freebsd|hpux|irix|linux|next|openbsd|os2|solaris|vmesa)
		# Known thread-capable platforms.
		;;
	*)
	        cat >&4 <<EOM
$osname is not known to support threads.
Please let perlbug@@perl.com know how to do that.
d2735 4
a2738 1
Cannot continue, aborting.
d2740 1
a2740 1
		exit 1
d2742 12
a2753 24
    	esac # $osname
    ;;
esac # $usethreads

: determine the architecture name
echo " "
if xxx=`./loc arch blurfl $pth`; $test -f "$xxx"; then
	tarch=`arch`"-$osname"
elif xxx=`./loc uname blurfl $pth`; $test -f "$xxx" ; then
	if uname -m > tmparch 2>&1 ; then
		tarch=`$sed -e 's/ *$//' -e 's/ /_/g' \
			-e 's/$/'"-$osname/" tmparch`
	else
		tarch="$osname"
	fi
	$rm -f tmparch
else
	tarch="$osname"
fi
case "$myarchname" in
''|"$tarch") ;;
*)
	echo "(Your architecture name used to be $myarchname.)"
	archname=''
d2756 4
a2759 21
case "$archname" in
'') dflt="$tarch";;
*) dflt="$archname";;
esac
rp='What is your architecture name'
. ./myread
case "$usethreads" in
$define)  echo "Threads selected." >&4
          case "$ans" in
          *-thread) echo "...and architecture name already ends in -thread." >&4
                    archname="$ans"
                    ;;
          *)        archname="$ans-thread"
                    echo "...setting architecture name to $archname." >&4
                    ;;
          esac
          ;;
*)        archname="$ans" ;;
esac
myarchname="$tarch"
: is AFS running?
d2761 8
a2768 8
case "$afs" in
$define|true)	afs=true ;;
$undef|false)	afs=false ;;
*)	if test -d /afs; then
		afs=true
	else
		afs=false
	fi
d2771 2
a2772 2
if test $afs = "true"; then
	echo "AFS may be running... I'll be extra cautious then..." >&4
d2774 1
a2774 1
	echo "AFS does not seem to be running..." >&4
d2777 36
a2812 4
: decide how portable to be.  Allow command line overrides.
case "$d_portable" in
"$undef") ;;
*)	d_portable="$define" ;;
d2814 16
d2831 8
a2838 7
: set up shell script to do ~ expansion
cat >filexp <<EOSS
$startsh
: expand filename
case "\$1" in
 ~/*|~)
	echo \$1 | $sed "s|~|\${HOME-\$LOGDIR}|"
d2840 72
a2911 21
 ~*)
	if $test -f /bin/csh; then
		/bin/csh -f -c "glob \$1"
		failed=\$?
		echo ""
		exit \$failed
	else
		name=\`$expr x\$1 : '..\([^/]*\)'\`
		dir=\`$sed -n -e "/^\${name}:/{s/^[^:]*:[^:]*:[^:]*:[^:]*:[^:]*:\([^:]*\).*"'\$'"/\1/" -e p -e q -e '}' </etc/passwd\`
		if $test ! -d "\$dir"; then
			me=\`basename \$0\`
			echo "\$me: can't locate home directory for: \$name" >&2
			exit 1
		fi
		case "\$1" in
		*/*)
			echo \$dir/\`$expr x\$1 : '..[^/]*/\(.*\)'\`
			;;
		*)
			echo \$dir
			;;
d2913 3
a2915 1
	fi
d2918 1
a2918 1
	echo \$1
d2921 1
a2921 3
EOSS
chmod +x filexp
$eunicefix filexp
d2923 53
a2975 19
: now set up to get a file name
cat <<EOS >getfile
$startsh
EOS
cat <<'EOSC' >>getfile
tilde=''
fullpath=''
already=''
skip=''
none_ok=''
exp_file=''
nopath_ok=''
orig_rp="$rp"
orig_dflt="$dflt"

case "$fn" in
*\(*)
	expr $fn : '.*(\(.*\)).*' | tr ',' $trnl >getfile.ok
	fn=`echo $fn | sed 's/(.*)//'`
d2978 201
a3178 5

case "$fn" in
*:*)
	loc_file=`expr $fn : '.*:\(.*\)'`
	fn=`expr $fn : '\(.*\):.*'`
d3293 18
a3310 7
				if test -f "$ansexp"; then
					type=''
				elif test -r "$ansexp" || (test -h "$ansexp") >/dev/null 2>&1
				then
					echo "($value is not a plain file, but that's ok.)"
					type=''
				fi
d3313 14
a3326 3
				if test -d "$ansexp"; then
					type=''
				fi
d3380 1
d3383 41
a3423 4
: determine root of directory hierarchy where package will be installed.
case "$prefix" in
'')
	dflt=`./loc . /usr/local /usr/local /local /opt /usr`
d3425 1
a3425 2
*)
	dflt="$prefix"
a3427 1
$cat <<EOM
d3429 24
a3452 8
By default, $package will be installed in $dflt/bin, manual
pages under $dflt/man, etc..., i.e. with $dflt as prefix for
all installation directories. Typically set to /usr/local, but you
may choose /usr if you wish to install $package among your system
binaries. If you wish to have binaries under /bin but manual pages
under /usr/local/man, that's ok: you will be prompted separately
for each of the installation directories, the prefix being only used
to set the defaults.
d3454 24
a3477 11
EOM
fn=d~
rp='Installation prefix to use?'
. ./getfile
oldprefix=''
case "$prefix" in
'') ;;
*)
	case "$ans" in
	"$prefix") ;;
	*) oldprefix="$prefix";;
d3479 1
a3479 4
	;;
esac
prefix="$ans"
prefixexp="$ansexp"
d3481 44
a3524 35
: set the prefixit variable, to compute a suitable default value
prefixit='case "$3" in
""|none)
	case "$oldprefix" in
	"") eval "$1=\"\$$2\"";;
	*)
		case "$3" in
		"") eval "$1=";;
		none)
			eval "tp=\"\$$2\"";
			case "$tp" in
			""|" ") eval "$1=\"\$$2\"";;
			*) eval "$1=";;
			esac;;
		esac;;
	esac;;
*)
	eval "tp=\"$oldprefix-\$$2-\""; eval "tp=\"$tp\"";
	case "$tp" in
	--|/*--|\~*--) eval "$1=\"$prefix/$3\"";;
	/*-$oldprefix/*|\~*-$oldprefix/*)
		eval "$1=\`echo \$$2 | sed \"s,^$oldprefix,$prefix,\"\`";;
	*) eval "$1=\"\$$2\"";;
	esac;;
esac'

: set the base revision
baserev=5.0

: get the patchlevel
echo " "
echo "Getting the current patchlevel..." >&4
if $test -r $rsrc/patchlevel.h;then
	patchlevel=`awk '/define[ 	]+PATCHLEVEL/ {print $3}' $rsrc/patchlevel.h`
	subversion=`awk '/define[ 	]+SUBVERSION/ {print $3}' $rsrc/patchlevel.h`
d3526 12
a3537 2
	patchlevel=0
	subversion=0
d3539 30
a3568 4
$echo $n "(You have $package" $c
case "$package" in
"*$baserev")	;;
*)		$echo $n " $baserev" $c ;;
a3569 3
$echo $n " patchlevel $patchlevel" $c
test 0 -eq "$subversion" || $echo $n " subversion $subversion" $c
echo ".)"
d3571 5
a3575 17
if test 0 -eq "$subversion"; then
	version=`LC_ALL=C; export LC_ALL; \
		 echo $baserev $patchlevel | \
		 $awk '{ printf "%.3f\n", $1 + $2/1000.0 }'`
else
	version=`LC_ALL=C; export LC_ALL; \
		 echo $baserev $patchlevel $subversion | \
		 $awk '{ printf "%.5f\n", $1 + $2/1000.0 + $3/100000.0 }'`
fi
: Figure out perl API version.  Perhaps this should be in patchlevel.h
if test "$subversion" -lt 50; then
	apiversion=`LC_ALL=C; export LC_ALL; \
		 echo $baserev $patchlevel | \
		 $awk '{ printf "%.3f\n", $1 + $2/1000.0 }'`
else
	apiversion="$version"
fi
d3577 10
a3586 7
: determine where private library files go
: Usual default is /usr/local/lib/perl5/$version.
: Also allow things like /opt/perl/lib/$version, since 
: /opt/perl/lib/perl5... would be redundant.
case "$prefix" in
*perl*) set dflt privlib lib/$version ;;
*)	 set dflt privlib lib/$package/$version ;;
a3587 2
eval $prefixit
$cat <<EOM
d3589 12
a3600 2
There are some auxiliary files for $package that need to be put into a
private library directory that is accessible by everyone.
d3602 4
a3605 15
EOM
fn=d~+
rp='Pathname where the private library files will reside?'
. ./getfile
if $test "X$privlibexp" != "X$ansexp"; then
	installprivlib=''
fi
privlib="$ans"
privlibexp="$ansexp"
if $afs; then
	$cat <<EOM

Since you are running AFS, I need to distinguish the directory in which
private files reside from the directory in which they are installed (and from
which they are presumably copied to the former directory by occult means).
d3608 14
a3621 11
	case "$installprivlib" in
	'') dflt=`echo $privlibexp | sed 's#^/afs/#/afs/.#'`;;
	*) dflt="$installprivlib";;
	esac
	fn=de~
	rp='Where will private files be installed?'
	. ./getfile
	installprivlib="$ans"
else
	installprivlib="$privlibexp"
fi
d3623 8
a3630 16
: set the prefixup variable, to restore leading tilda escape
prefixup='case "$prefixexp" in
"$prefix") ;;
*) eval "$1=\`echo \$$1 | sed \"s,^$prefixexp,$prefix,\"\`";;
esac'

: determine where public architecture dependent libraries go
set archlib archlib
eval $prefixit
: privlib default is /usr/local/lib/$package/$version
: archlib default is /usr/local/lib/$package/$version/$archname
: privlib may have an optional trailing /share.
tdflt=`echo $privlib | $sed 's,/share$,,'`
tdflt=$tdflt/$archname
case "$archlib" in
'')	dflt=$tdflt
d3632 1
a3632 2
*)	dflt="$archlib"
    ;;
d3634 1
a3634 1
cat <<EOM
d3636 3
a3638 4
$spackage contains architecture-dependent library files.  If you are
sharing libraries in a heterogeneous environment, you might store
these files in a separate location.  Otherwise, you can just include
them with the rest of the public library files.
d3641 19
a3659 18
fn=d+~
rp='Where do you want to put the public architecture-dependent libraries?'
. ./getfile
archlib="$ans"
archlibexp="$ansexp"

if $afs; then
	$cat <<EOM

Since you are running AFS, I need to distinguish the directory in
which architecture-dependent library files reside from the directory
in which they are installed (and from which they are presumably copied
to the former directory by occult means).

EOM
	case "$installarchlib" in
	'') dflt=`echo $archlibexp | sed 's#^/afs/#/afs/.#'`;;
	*) dflt="$installarchlib";;
a3660 61
	fn=de~
	rp='Where will architecture-dependent library files be installed?'
	. ./getfile
	installarchlib="$ans"
else
	installarchlib="$archlibexp"
fi
if $test X"$archlib" = X"$privlib"; then
	d_archlib="$undef"
else
	d_archlib="$define"
fi

: make some quick guesses about what we are up against
echo " "
$echo $n "Hmm...  $c"
echo exit 1 >bsd
echo exit 1 >usg
echo exit 1 >v7
echo exit 1 >osf1
echo exit 1 >eunice
echo exit 1 >xenix
echo exit 1 >venix
echo exit 1 >os2
d_bsd="$undef"
$cat /usr/include/signal.h /usr/include/sys/signal.h >foo 2>/dev/null
if test -f /osf_boot || $contains 'OSF/1' /usr/include/ctype.h >/dev/null 2>&1
then
	echo "Looks kind of like an OSF/1 system, but we'll see..."
	echo exit 0 >osf1
elif test `echo abc | tr a-z A-Z` = Abc ; then
	xxx=`./loc addbib blurfl $pth`
	if $test -f $xxx; then
	echo "Looks kind of like a USG system with BSD features, but we'll see..."
		echo exit 0 >bsd
		echo exit 0 >usg
	else
		if $contains SIGTSTP foo >/dev/null 2>&1 ; then
			echo "Looks kind of like an extended USG system, but we'll see..."
		else
			echo "Looks kind of like a USG system, but we'll see..."
		fi
		echo exit 0 >usg
	fi
elif $contains SIGTSTP foo >/dev/null 2>&1 ; then
	echo "Looks kind of like a BSD system, but we'll see..."
	d_bsd="$define"
	echo exit 0 >bsd
else
	echo "Looks kind of like a Version 7 system, but we'll see..."
	echo exit 0 >v7
fi
case "$eunicefix" in
*unixtovms*)
	$cat <<'EOI'
There is, however, a strange, musty smell in the air that reminds me of
something...hmm...yes...I've got it...there's a VMS nearby, or I'm a Blit.
EOI
	echo exit 0 >eunice
	d_eunice="$define"
: it so happens the Eunice I know will not run shell scripts in Unix format
d3662 6
a3667 4
*)
	echo " "
	echo "Congratulations.  You aren't running Eunice."
	d_eunice="$undef"
a3669 1
: Detect OS2.  The p_ variable is set above in the Head.U unit.
d3671 4
a3674 7
:) ;;
*)
	$cat <<'EOI'
I have the feeling something is not exactly right, however...don't tell me...
lemme think...does HAL ring a bell?...no, of course, you're only running OS/2!
EOI
	echo exit 0 >os2
d3677 4
a3680 25
if test -f /xenix; then
	echo "Actually, this looks more like a XENIX system..."
	echo exit 0 >xenix
	d_xenix="$define"
else
	echo " "
	echo "It's not Xenix..."
	d_xenix="$undef"
fi
chmod +x xenix
$eunicefix xenix
if test -f /venix; then
	echo "Actually, this looks more like a VENIX system..."
	echo exit 0 >venix
else
	echo " "
	if ./xenix; then
		: null
	else
		echo "Nor is it Venix..."
	fi
fi
chmod +x bsd usg v7 osf1 eunice xenix venix os2
$eunicefix bsd usg v7 osf1 eunice xenix venix os2
$rm -f foo
d3682 4
a3685 2
: see if setuid scripts can be secure
$cat <<EOM
d3687 5
a3691 2
Some kernels have a bug that prevents setuid #! scripts from being
secure.  Some sites have disabled setuid #! scripts because of this.
d3693 2
a3694 3
First let's decide if your kernel supports secure setuid #! scripts.
(If setuid #! scripts would be secure but have been disabled anyway,
don't say that they are secure if asked.)
d3696 1
d3698 8
d3707 59
a3765 47
val="$undef"
if $test -d /dev/fd; then
	echo "#!$ls" >reflect
	chmod +x,u+s reflect
	./reflect >flect 2>&1
	if $contains "/dev/fd" flect >/dev/null; then
		echo "Congratulations, your kernel has secure setuid scripts!" >&4
		val="$define"
	else
		$cat <<EOM
If you are not sure if they are secure, I can check but I'll need a
username and password different from the one you are using right now.
If you don't have such a username or don't want me to test, simply
enter 'none'.

EOM
		rp='Other username to test security of setuid scripts with?'
		dflt='none'
		. ./myread
		case "$ans" in
		n|none)
			case "$d_suidsafe" in
			'')	echo "I'll assume setuid scripts are *not* secure." >&4
				dflt=n;;
			"$undef")
				echo "Well, the $hint value is *not* secure." >&4
				dflt=n;;
			*)	echo "Well, the $hint value *is* secure." >&4
				dflt=y;;
			esac
			;;
		*)
			$rm -f reflect flect
			echo "#!$ls" >reflect
			chmod +x,u+s reflect
			echo >flect
			chmod a+w flect
			echo '"su" will (probably) prompt you for '"$ans's password."
			su $ans -c './reflect >flect'
			if $contains "/dev/fd" flect >/dev/null; then
				echo "Okay, it looks like setuid scripts are secure." >&4
				dflt=y
			else
				echo "I don't think setuid scripts are secure." >&4
				dflt=n
			fi
			;;
d3767 12
a3778 5
		rp='Does your kernel have *secure* setuid scripts?'
		. ./myread
		case "$ans" in
		[yY]*)	val="$define";;
		*)	val="$undef";;
d3780 5
d3786 13
a3798 7
else
	echo "I don't think setuid scripts are secure (no /dev/fd directory)." >&4
	echo "(That's for file descriptors, not floppy disks.)"
	val="$undef"
fi
set d_suidsafe
eval $setvar
d3800 4
a3803 1
$rm -f reflect flect
a3804 1
: now see if they want to do setuid emulation
d3806 27
a3832 14
val="$undef"
case "$d_suidsafe" in
"$define")
	val="$undef"
	echo "No need to emulate SUID scripts since they are secure here." >& 4
	;;
*)
	$cat <<EOM
Some systems have disabled setuid scripts, especially systems where
setuid scripts cannot be secure.  On systems where setuid scripts have
been disabled, the setuid/setgid bits on scripts are currently
useless.  It is possible for $package to detect those bits and emulate
setuid/setgid in a secure fashion.  This emulation will only work if
setuid scripts have been disabled in your kernel.
d3834 18
a3851 4
EOM
	case "$d_dosuid" in
	"$define") dflt=y ;;
	*) dflt=n ;;
d3853 18
a3870 5
	rp="Do you want to do setuid/setgid emulation?"
	. ./myread
	case "$ans" in
	[yY]*)	val="$define";;
	*)	val="$undef";;
a3873 2
set d_dosuid
eval $setvar
d3875 34
a3908 10
: determine where manual pages are on this system
echo " "
case "$sysman" in
'') 
	syspath='/usr/man/man1 /usr/man/mann /usr/man/manl /usr/man/local/man1'
	syspath="$syspath /usr/man/u_man/man1 /usr/share/man/man1"
	syspath="$syspath /usr/catman/u_man/man1 /usr/man/l_man/man1"
	syspath="$syspath /usr/local/man/u_man/man1 /usr/local/man/l_man/man1"
	syspath="$syspath /usr/man/man.L /local/man/man1 /usr/local/man/man1"
	sysman=`./loc . /usr/man/man1 $syspath`
a3910 5
if $test -d "$sysman"; then
	echo "System manual is in $sysman." >&4
else
	echo "Could not find manual pages in source form." >&4
fi
d3912 7
a3918 36
: see what memory models we can support
case "$models" in
'')
	$cat >pdp11.c <<'EOP'
int main() {
#ifdef pdp11
	exit(0);
#else
	exit(1);
#endif
}
EOP
	( cc -o pdp11 pdp11.c ) >/dev/null 2>&1
	if $test -f pdp11 && ./pdp11 2>/dev/null; then
		dflt='unsplit split'
	else
		tans=`./loc . X /lib/small /lib/large /usr/lib/small /usr/lib/large /lib/medium /usr/lib/medium /lib/huge`
		case "$tans" in
		X) dflt='none';;
		*) if $test -d /lib/small || $test -d /usr/lib/small; then
				dflt='small'
			else
				dflt=''
			fi
			if $test -d /lib/medium || $test -d /usr/lib/medium; then
				dflt="$dflt medium"
			fi
			if $test -d /lib/large || $test -d /usr/lib/large; then
				dflt="$dflt large"
			fi
			if $test -d /lib/huge || $test -d /usr/lib/huge; then
				dflt="$dflt huge"
			fi
		esac
	fi;;
*) dflt="$models";;
d3920 7
a3926 9
$cat <<EOM
 
Some systems have different model sizes.  On most systems they are called
small, medium, large, and huge.  On the PDP11 they are called unsplit and
split.  If your system doesn't support different memory models, say "none".
If you wish to force everything to one memory model, say "none" here and
put the appropriate flags later when it asks you for other cc and ld flags.
Venix systems may wish to put "none" and let the compiler figure things out.
(In the following question multiple model names should be space separated.)
d3928 1
a3928 1
The default for most systems is "none".
d3930 5
a3934 2
EOM
rp="Which memory models are supported?"
d3936 24
a3959 1
models="$ans"
d3961 18
a3978 14
case "$models" in
none)
	small=''
	medium=''
	large=''
	huge=''
	unsplit=''
	split=''
	;;
*split)
	case "$split" in
	'') if $contains '\-i' $sysman/ld.1 >/dev/null 2>&1 || \
			 $contains '\-i' $sysman/cc.1 >/dev/null 2>&1; then
			dflt='-i'
d3980 8
a3987 3
			dflt='none'
		fi;;
	*) dflt="$split";;
d3989 13
a4001 5
	rp="What flag indicates separate I and D space?"
	. ./myread
	tans="$ans"
	case "$tans" in
	none) tans='';;
d4003 11
a4013 8
	split="$tans"
	unsplit='';;
*large*|*small*|*medium*|*huge*)
	case "$models" in
	*large*)
		case "$large" in
		'') dflt='-Ml';;
		*) dflt="$large";;
d4015 1
a4015 5
	rp="What flag indicates large model?"
	. ./myread
	tans="$ans"
	case "$tans" in
	none) tans='';
d4017 25
a4041 49
	large="$tans";;
	*) large='';;
	esac
	case "$models" in
	*huge*) case "$huge" in
		'') dflt='-Mh';;
		*) dflt="$huge";;
		esac
		rp="What flag indicates huge model?"
		. ./myread
		tans="$ans"
		case "$tans" in
		none) tans='';
		esac
		huge="$tans";;
	*) huge="$large";;
	esac
	case "$models" in
	*medium*) case "$medium" in
		'') dflt='-Mm';;
		*) dflt="$medium";;
		esac
		rp="What flag indicates medium model?"
		. ./myread
		tans="$ans"
		case "$tans" in
		none) tans='';
		esac
		medium="$tans";;
	*) medium="$large";;
	esac
	case "$models" in
	*small*) case "$small" in
		'') dflt='none';;
		*) dflt="$small";;
		esac
		rp="What flag indicates small model?"
		. ./myread
		tans="$ans"
		case "$tans" in
		none) tans='';
		esac
		small="$tans";;
	*) small='';;
	esac
	;;
*)
	echo "Unrecognized memory models--you may have to edit Makefile.SH" >&4
	;;
d4043 1
a4043 1
$rm -f pdp11.* pdp11
d4045 1
a4045 1
: see if we need a special compiler
d4047 21
a4067 27
if ./usg; then
	case "$cc" in
	'') case "$Mcc" in
		/*) dflt='Mcc';;
		*) case "$large" in
			-M*) dflt='cc';;
			*)	if $contains '\-M' $sysman/cc.1 >/dev/null 2>&1 ; then
					if $contains '\-M' $sysman/cpp.1 >/dev/null 2>&1; then
						dflt='cc'
					else
						dflt='cc -M'
					fi
				else
					dflt='cc'
				fi;;
			esac;;
		esac;;
	*)  dflt="$cc";;
	esac
	case "$dflt" in
	*M*)	$cat <<'EOM'
On some older systems the default C compiler will not resolve multiple global
references that happen to have the same name.  On some such systems the "Mcc"
command may be used to force these to be resolved.  On other systems a "cc -M"
command is required.  (Note that the -M flag on other systems indicates a
memory model to use!) If you have the Gnu C compiler, you might wish to use
that instead.
d4070 26
a4095 5
	;;
	esac
	rp="Use which C compiler?"
	. ./myread
	cc="$ans"
d4097 3
a4099 7
	case "$cc" in
	'') dflt=cc;;
	*) dflt="$cc";;
	esac
	rp="Use which C compiler?"
	. ./myread
	cc="$ans"
d4101 8
a4108 26
: Look for a hint-file generated 'call-back-unit'.  Now that the
: user has specified the compiler, we may need to set or change some
: other defaults.
if $test -f cc.cbu; then
    . ./cc.cbu
fi
echo " "
echo "Checking for GNU cc in disguise and/or its version number..." >&4
$cat >gccvers.c <<EOM
#include <stdio.h>
int main() {
#ifdef __GNUC__
#ifdef __VERSION__
	printf("%s\n", __VERSION__);
#else
	printf("%s\n", "1");
#endif
#endif
	exit(0);
}
EOM
if $cc -o gccvers gccvers.c >/dev/null 2>&1; then
	gccversion=`./gccvers`
	case "$gccversion" in
	'') echo "You are not using GNU cc." ;;
	*)  echo "You are using GNU cc $gccversion." ;;
a4109 1
else
d4111 4
a4114 5
	echo "*** WHOA THERE!!! ***" >&4
	echo "    Your C compiler \"$cc\" doesn't seem to be working!" >&4
	case "$knowitall" in
	'')
	echo "    You'd better start hunting for one and let me know about it." >&4
d4118 2
a4119 4
fi
$rm -f gccvers*
case "$gccversion" in
1*) cpp=`./loc gcc-cpp $cpp $pth` ;;
d4121 1
d4123 68
a4190 1
: What should the include directory be ?
d4192 12
a4203 10
$echo $n "Hmm...  $c"
dflt='/usr/include'
incpath=''
mips_type=''
if $test -f /bin/mips && /bin/mips; then
	echo "Looks like a MIPS system..."
	$cat >usr.c <<'EOCP'
#ifdef SYSTYPE_BSD43
/bsd43
#endif
d4205 6
a4210 4
	if $cc -E usr.c > usr.out && $contains / usr.out >/dev/null 2>&1; then
		dflt='/bsd43/usr/include'
		incpath='/bsd43'
		mips_type='BSD 4.3'
d4212 19
a4230 1
		mips_type='System V'
a4231 23
	$rm -f usr.c usr.out
	echo "and you're compiling with the $mips_type compiler and libraries."
	xxx_prompt=y
	echo "exit 0" >mips
else
	echo "Doesn't look like a MIPS system."
	xxx_prompt=n
	echo "exit 1" >mips
fi
chmod +x mips
$eunicefix mips
case "$usrinc" in
'') ;;
*) dflt="$usrinc";;
esac
case "$xxx_prompt" in
y)	fn=d/
	echo " "
	rp='Where are the include files you want to use?'
	. ./getfile
	usrinc="$ans"
	;;
*)	usrinc="$dflt"
d4234 6
a4240 1
: see how we invoke the C preprocessor
d4242 14
a4255 9
echo "Now, how can we feed standard input to your C preprocessor..." >&4
cat <<'EOT' >testcpp.c
#define ABC abc
#define XYZ xyz
ABC.XYZ
EOT
cd ..
if test ! -f cppstdin; then
echo 'cat >.$$.c; '"$cc"' -E ${1+"$@@"} .$$.c; rm .$$.c' >cppstdin
d4257 6
a4262 1
	echo "Keeping your $hint cppstdin wrapper."
d4264 6
a4269 4
chmod 755 cppstdin
wrapper=`pwd`/cppstdin
ok='false'
cd UU
d4271 20
a4290 16
if $test "X$cppstdin" != "X" && \
	$cppstdin $cppminus <testcpp.c >testcpp.out 2>&1 && \
	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1
then
	echo "You used to use $cppstdin $cppminus so we'll use that again."
	case "$cpprun" in
	'') echo "But let's see if we can live without a wrapper..." ;;
	*)
		if $cpprun $cpplast <testcpp.c >testcpp.out 2>&1 && \
			$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1
		then
			echo "(And we'll use $cpprun $cpplast to preprocess directly.)"
			ok='true'
		else
			echo "(However, $cpprun $cpplast does not work, let's see...)"
		fi
d4292 2
a4293 6
	esac
else
	case "$cppstdin" in
	'') ;;
	*)
		echo "Good old $cppstdin $cppminus does not seem to be of any help..."
a4295 46
fi

if $ok; then
	: nothing
elif echo 'Maybe "'"$cc"' -E" will work...'; \
	$cc -E <testcpp.c >testcpp.out 2>&1; \
	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
	echo "Yup, it does."
	x_cpp="$cc -E"
	x_minus='';
elif echo 'Nope...maybe "'"$cc"' -E -" will work...'; \
	$cc -E - <testcpp.c >testcpp.out 2>&1; \
	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
	echo "Yup, it does."
	x_cpp="$cc -E"
	x_minus='-';
elif echo 'Nope...maybe "'"$cc"' -P" will work...'; \
	$cc -P <testcpp.c >testcpp.out 2>&1; \
	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
	echo "Yipee, that works!"
	x_cpp="$cc -P"
	x_minus='';
elif echo 'Nope...maybe "'"$cc"' -P -" will work...'; \
	$cc -P - <testcpp.c >testcpp.out 2>&1; \
	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
	echo "At long last!"
	x_cpp="$cc -P"
	x_minus='-';
elif echo 'No such luck, maybe "'$cpp'" will work...'; \
	$cpp <testcpp.c >testcpp.out 2>&1; \
	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
	echo "It works!"
	x_cpp="$cpp"
	x_minus='';
elif echo 'Nixed again...maybe "'$cpp' -" will work...'; \
	$cpp - <testcpp.c >testcpp.out 2>&1; \
	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
	echo "Hooray, it works!  I was beginning to wonder."
	x_cpp="$cpp"
	x_minus='-';
elif echo 'Uh-uh.  Time to get fancy.  Trying a wrapper...'; \
	$wrapper <testcpp.c >testcpp.out 2>&1; \
	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
	x_cpp="$wrapper"
	x_minus=''
	echo "Eureka!"
d4297 4
a4300 2
	dflt=''
	rp="No dice.  I can't find a C preprocessor.  Name one:"
d4302 1
a4302 9
	x_cpp="$ans"
	x_minus=''
	$x_cpp <testcpp.c >testcpp.out 2>&1
	if $contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
		echo "OK, that will do." >&4
	else
echo "Sorry, I can't get that to work.  Go find one and rerun Configure." >&4
		exit 1
	fi
d4305 96
a4400 17
case "$ok" in
false)
	cppstdin="$x_cpp"
	cppminus="$x_minus"
	cpprun="$x_cpp"
	cpplast="$x_minus"
	set X $x_cpp
	shift
	case "$1" in
	"$cpp")
		echo "Perhaps can we force $cc -E using a wrapper..."
		if $wrapper <testcpp.c >testcpp.out 2>&1; \
			$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1
		then
			echo "Yup, we can."
			cppstdin="$wrapper"
			cppminus='';
d4402 6
a4407 1
			echo "Nope, we'll have to live without it..."
d4409 2
a4410 8
		;;
	esac
	case "$cpprun" in
	"$wrapper")
		cpprun=''
		cpplast=''
		;;
	esac
d4414 9
a4422 3
case "$cppstdin" in
"$wrapper"|'cppstdin') ;;
*) $rm -f $wrapper;;
a4423 1
$rm -f testcpp.c testcpp.out
a4424 11
: Set private lib path
case "$plibpth" in
'') if ./mips; then
		plibpth="$incpath/usr/lib /usr/local/lib /usr/ccs/lib"
	fi;;
esac
case "$libpth" in
' ') dlist='';;
'') dlist="$loclibpth $plibpth $glibpth";;
*) dlist="$libpth";;
esac
d4426 39
a4464 12
: Now check and see which directories actually exist, avoiding duplicates
libpth=''
for xxx in $dlist
do
    if $test -d $xxx; then
		case " $libpth " in
		*" $xxx "*) ;;
		*) libpth="$libpth $xxx";;
		esac
    fi
done
$cat <<'EOM'
d4466 8
a4473 4
Some systems have incompatible or broken versions of libraries.  Among
the directories listed in the question below, please remove any you
know not to be holding relevant libraries, and add any that are needed.
Say "none" for none.
d4475 1
d4477 1
a4477 6
case "$libpth" in
'') dflt='none';;
*)
	set X $libpth
	shift
	dflt=${1+"$@@"}
d4479 4
d4484 2
a4485 5
rp="Directories to use for library searches?"
. ./myread
case "$ans" in
none) libpth=' ';;
*) libpth="$ans";;
d4488 26
a4513 10
: compute shared library extension
case "$so" in
'')
	if xxx=`./loc libc.sl X $libpth`; $test -f "$xxx"; then
		dflt='sl'
	else
		dflt='so'
	fi
	;;
*) dflt="$so";;
d4515 12
a4526 1
$cat <<EOM
d4528 4
a4531 3
On some systems, shared libraries may be available.  Answer 'none' if
you want to suppress searching of shared libraries for the remaining
of this configuration.
d4533 1
d4535 1
a4535 1
rp='What is the file extension used for shared libraries?'
d4537 11
a4547 1
so="$ans"
d4549 4
a4552 8
: Define several unixisms.
: Hints files or command line option can be used to override them.
: The convoluted testing is in case hints files set either the old
: or the new name.
case "$_exe" in
'')	case "$exe_ext" in
    '')	;;
	*)	_exe="$exe_ext" ;;
d4556 15
a4570 4
case "$_a" in
'')	case "$lib_ext" in
    '')	_a='.a';;
	*)	_a="$lib_ext" ;;
d4574 15
a4588 4
case "$_o" in
'') case "$obj_ext" in
	'')	_o='.o';;
	*)	_o="$obj_ext";;
d4592 21
a4612 5
case "$p_" in
'') case "$path_sep" in
	'')	p_=':';;
	*)	p_="$path_sep";;
	esac
d4615 4
a4618 8
exe_ext=$_exe
lib_ext=$_a
obj_ext=$_o
path_sep=$p_

: Which makefile gets called first.  This is used by make depend.
case "$firstmakefile" in
'') firstmakefile='makefile';;
d4620 14
a4633 7

: Looking for optional libraries
echo " "
echo "Checking for optional libraries..." >&4
case "$libs" in
' '|'') dflt='';;
*) dflt="$libs";;
d4635 11
a4645 2
case "$libswanted" in
'') libswanted='c_s';;
d4647 60
a4706 39
for thislib in $libswanted; do
	
	if xxx=`./loc lib$thislib.$so.[0-9]'*' X $libpth`;
		$test -f "$xxx" -a "X$ignore_versioned_solibs" = "X"; then
		echo "Found -l$thislib (shared)."
		case " $dflt " in
		*"-l$thislib "*);;
		*) dflt="$dflt -l$thislib";;
		esac
	elif xxx=`./loc lib$thislib.$so X $libpth` ; $test -f "$xxx"; then
		echo "Found -l$thislib (shared)."
		case " $dflt " in
		*"-l$thislib "*);;
		*) dflt="$dflt -l$thislib";;
		esac
	elif xxx=`./loc lib$thislib$_a X $libpth`; $test -f "$xxx"; then
		echo "Found -l$thislib."
		case " $dflt " in
		*"-l$thislib "*);;
		*) dflt="$dflt -l$thislib";;
		esac
	elif xxx=`./loc $thislib$_a X $libpth`; $test -f "$xxx"; then
		echo "Found -l$thislib."
		case " $dflt " in
		*"-l$thislib "*);;
		*) dflt="$dflt -l$thislib";;
		esac
	elif xxx=`./loc lib${thislib}_s$_a X $libpth`; $test -f "$xxx"; then
		echo "Found -l${thislib}_s."
		case " $dflt " in
		*"-l$thislib "*);;
		*) dflt="$dflt -l${thislib}_s";;
		esac
	elif xxx=`./loc Slib$thislib$_a X $xlibpth`; $test -f "$xxx"; then
		echo "Found -l$thislib."
		case " $dflt " in
		*"-l$thislib "*);;
		*) dflt="$dflt -l$thislib";;
		esac
d4708 1
a4708 1
		echo "No -l$thislib."
d4710 1
a4710 10
done
set X $dflt
shift
dflt="$*"
case "$libs" in
'') dflt="$dflt";;
*) dflt="$libs";;
esac
case "$dflt" in
' '|'') dflt='none';;
d4712 5
d4718 2
a4720 3
 
Some versions of Unix support shared libraries, which make executables smaller
but make load time slightly longer.
d4722 4
a4725 6
On some systems, mostly System V Release 3's, the shared library is included
by putting the option "-lc_s" as the last thing on the cc command line when
linking.  Other systems use shared libraries by default.  There may be other
libraries needed to compile $package on your machine as well.  If your system
needs the "-lc_s" option, include it here.  Include any other special libraries
here as well.  Say "none" for none.
d4727 11
d4739 11
a4749 7
echo " "
rp="Any additional libraries?"
. ./myread
case "$ans" in
none) libs=' ';;
*) libs="$ans";;
esac
d4751 25
a4775 7
: determine optimize, if desired, or use for debug flag also
case "$optimize" in
' '|$undef) dflt='none';;
'') dflt='-O';;
*) dflt="$optimize";;
esac
$cat <<EOH
a4776 5
Some C compilers have problems with their optimizers.  By default, $package
compiles with the -O flag to use the optimizer.  Alternately, you might want
to use the symbolic debugger, which uses the -g flag (on traditional Unix
systems).  Either flag can be specified here.  To use neither flag, specify
the word "none".
d4778 36
a4813 6
EOH
rp="What optimizer/debugger flag should be used?"
. ./myread
optimize="$ans"
case "$optimize" in
'none') optimize=" ";;
d4815 5
d4821 7
a4827 18
dflt=''
: We will not override a previous value, but we might want to
: augment a hint file
case "$hint" in
none|recommended)
	case "$gccversion" in
	1*) dflt='-fpcc-struct-return' ;;
	esac
	case "$optimize" in
	*-g*) dflt="$dflt -DDEBUGGING";;
	esac
	case "$gccversion" in
	2*) if test -d /etc/conf/kconfig.d &&
			$contains _POSIX_VERSION $usrinc/sys/unistd.h >/dev/null 2>&1
		then
			dflt="$dflt -posix"
		fi
		;;
d4830 1
d4832 4
d4837 8
a4844 3
case "$mips_type" in
*BSD*|'') inclwanted="$locincpth $usrinc";;
*) inclwanted="$locincpth $inclwanted $usrinc/bsd";;
d4846 5
a4850 10
for thisincl in $inclwanted; do
	if $test -d $thisincl; then
		if $test x$thisincl != x$usrinc; then
			case "$dflt" in
			*$thisincl*);;
			*) dflt="$dflt -I$thisincl";;
			esac
		fi
	fi
done
d4852 9
a4860 4
inctest='if $contains $2 $usrinc/$1 >/dev/null 2>&1; then
	xxx=true;
elif $contains $2 $usrinc/sys/$1 >/dev/null 2>&1; then
	xxx=true;
d4862 2
a4863 8
	xxx=false;
fi;
if $xxx; then
	case "$dflt" in
	*$2*);;
	*) dflt="$dflt -D$2";;
	esac;
fi'
d4865 5
a4869 1
set signal.h LANGUAGE_C; eval $inctest
d4871 13
a4883 3
case "$hint" in
none|recommended) dflt="$ccflags $dflt" ;;
*) dflt="$ccflags";;
d4885 24
a4909 4
case "$dflt" in
''|' ') dflt=none;;
esac
$cat <<EOH
d4911 8
a4918 18
Your C compiler may want other flags.  For this question you should include
-I/whatever and -DWHATEVER flags and any other flags used by the C compiler,
but you should NOT include libraries or ld flags like -lwhatever.  If you
want $package to honor its debug switch, you should include -DDEBUGGING here.
Your C compiler might also need additional flags, such as -D_POSIX_SOURCE.

To use no flags, specify the word "none".

EOH
set X $dflt
shift
dflt=${1+"$@@"}
rp="Any additional cc flags?"
. ./myread
case "$ans" in
none) ccflags='';;
*) ccflags="$ans";;
esac
d4920 3
a4922 19
: the following weeds options from ccflags that are of no interest to cpp
cppflags="$ccflags"
case "$gccversion" in
1*) cppflags="$cppflags -D__GNUC__"
esac
case "$mips_type" in
'');;
*BSD*) cppflags="$cppflags -DSYSTYPE_BSD43";;
esac
case "$cppflags" in
'');;
*)
	echo " "
	echo "Let me guess what the preprocessor flags are..." >&4
	set X $cppflags
	shift
	cppflags=''
	$cat >cpp.c <<'EOM'
#define BLURFL foo
a4923 1
BLURFL xx LFRULB
d4925 3
a4927 25
	previous=''
	for flag in $*
	do
		case "$flag" in
		-*) ftry="$flag";;
		*) ftry="$previous $flag";;
		esac
		if $cppstdin -DLFRULB=bar $cppflags $ftry $cppminus <cpp.c \
			>cpp1.out 2>/dev/null && \
			$cpprun -DLFRULB=bar $cppflags $ftry $cpplast <cpp.c \
			>cpp2.out 2>/dev/null && \
			$contains 'foo.*xx.*bar' cpp1.out >/dev/null 2>&1 && \
			$contains 'foo.*xx.*bar' cpp2.out >/dev/null 2>&1
		then
			cppflags="$cppflags $ftry"
			previous=''
		else
			previous="$flag"
		fi
	done
	set X $cppflags
	shift
	cppflags=${1+"$@@"}
	case "$cppflags" in
	*-*)  echo "They appear to be: $cppflags";;
d4929 5
a4933 13
	$rm -f cpp.c cpp?.out
	;;
esac

: flags used in final linking phase
case "$ldflags" in
'') if ./venix; then
		dflt='-i -z'
	else
		dflt=''
	fi
	case "$ccflags" in
	*-posix*) dflt="$dflt -posix" ;;
d4935 8
a4942 12
	;;
*) dflt="$ldflags";;
esac

: Try to guess additional flags to pick up local libraries.
for thislibdir in $libpth; do
	case " $loclibpth " in
	*" $thislibdir "*)
		case "$dflt " in 
		*"-L$thislibdir "*) ;;
		*)  dflt="$dflt -L$thislibdir" ;;
		esac
d4945 1
a4945 4
done

case "$dflt" in
'') dflt='none' ;;
a4947 1
$cat <<EOH
d4949 2
a4950 3
Your C linker may need flags.  For this question you should
include -L/whatever and any other flags used by the C linker, but you
should NOT include libraries like -lwhatever.
d4952 2
a4953 5
Make sure you include the appropriate -L/path flags if your C linker
does not normally search all of the directories you specified above,
namely
	$libpth
To use no flags, specify the word "none".
d4955 3
a4957 21
EOH

rp="Any additional ld flags (NOT including libraries)?"
. ./myread
case "$ans" in
none) ldflags='';;
*) ldflags="$ans";;
esac
rmlist="$rmlist pdp11"

: coherency check
echo " "
echo "Checking your choice of C compiler and flags for coherency..." >&4
$cat > try.c <<'EOF'
#include <stdio.h>
int main() { printf("Ok\n"); exit(0); }
EOF
set X $cc $optimize $ccflags -o try $ldflags try.c $libs
shift
$cat >try.msg <<'EOM'
I've tried to compile and run the following simple program:
a4959 1
$cat try.c >> try.msg
d4961 14
a4974 8
$cat >> try.msg <<EOM

I used the command:

	$*
	./try

and I got the following output:
d4977 25
a5001 16
dflt=y
if sh -c "$cc $optimize $ccflags -o try $ldflags try.c $libs" >>try.msg 2>&1; then
	if sh -c './try' >>try.msg 2>&1; then
		xxx=`./try`
		case "$xxx" in
		"Ok") dflt=n ;;
		*)	echo 'The program compiled OK, but produced no output.' >> try.msg
			case " $libs " in
			*" -lsfio "*)
				cat >> try.msg <<'EOQS'
If $libs contains -lsfio, and sfio is mis-configured, then it
sometimes (apparently) runs and exits with a 0 status, but with no
output!  It may have to do with sfio's use of _exit vs. exit.

EOQS
				rp="You have a big problem.  Shall I abort Configure"
d5003 4
a5006 2
				;;
			esac
d5009 6
a5014 4
	else
		echo "The program compiled OK, but exited with status $?." >>try.msg
		rp="You have a problem.  Shall I abort Configure"
		dflt=y
d5017 3
a5019 3
	echo "I can't compile the test program." >>try.msg
	rp="You have a BIG problem.  Shall I abort Configure"
	dflt=y
d5021 4
a5024 21
case "$dflt" in
y)
	$cat try.msg >&4
	case "$knowitall" in
	'')
		echo "(The supplied flags or libraries might be incorrect.)"
		;;
	*) dflt=n;;
	esac
	echo " "
	. ./myread
	case "$ans" in
	n*|N*) ;;
	*)	echo "Ok.  Stopping Configure." >&4
		exit 1
		;;
	esac
	;;
n) echo "OK, that should do.";;
esac
$rm -f try try.* core
d5026 34
a5059 1
: determine filename position in cpp output
d5097 7
a5103 4
if test -f $usrinc/\$wanted; then
	echo "$usrinc/\$wanted"
	exit 0
fi
d5111 3
a5113 2
	*/\$wanted) echo "\$name"; exit 0;;
	*) name='';;
d5116 6
d5123 4
a5126 3
case "\$name" in
'') exit 1;;
esac
d5244 120
d5417 41
a5457 2
if $afs; then
	$cat <<EOM
d5459 1
a5459 3
Since you are running AFS, I need to distinguish the directory in which
executables reside from the directory in which they are installed (and from
which they are presumably copied to the former directory by occult means).
d5462 30
a5491 3
	case "$installbin" in
	'') dflt=`echo $binexp | sed 's#^/afs/#/afs/.#'`;;
	*) dflt="$installbin";;
d5493 21
a5513 4
	fn=de~
	rp='Where will public executables be installed?'
	. ./getfile
	installbin="$ans"
d5515 1
a5515 1
	installbin="$binexp"
d5518 96
d5615 1
a5615 1
if test -d /usr/bin -a "X$installbin" != X/usr/bin; then
d5617 1
a5617 1
Many scripts expect to perl to be installed as /usr/bin/perl.
a5636 11
: define a shorthand compile call
compile='
mc_file=$1;
shift;
$cc $optimize $ccflags $ldflags -o ${mc_file} $* ${mc_file}.c $libs > /dev/null 2>&1;'
: define a shorthand compile call for compilations that should be ok.
compile_ok='
mc_file=$1;
shift;
$cc $optimize $ccflags $ldflags -o ${mc_file} $* ${mc_file}.c $libs;'

d6155 1
a6155 2
	# XXX This getfile call will fail the existence check if you try 
	# building away from $src (this is not supported yet).
d6159 1
a6159 1
	dlsrc=`echo $ans | $sed -e 's@@.*/\([^/]*\)$@@\1@@'`
d6246 6
a6251 1
			hpux)  dflt='-b' ;;
a6254 1
  			beos) dflt='-nostart' ;;
d6308 1
a6308 1
    rp="Any special flags to pass to $cc to use dynamic loading?"
d6331 1
a6331 1
		svr4*|dgux|dynixptx|esix|powerux|beos)
d6371 1
a6371 9
		useshrplib='true'
		# Why does next4 have to be so different?
		case "${osname}${osvers}" in
		next4*)	xxx='DYLD_LIBRARY_PATH' ;;
		os2*)	xxx='' ;; # Nothing special needed.
		beos*)  xxx='' ;;
		*)		xxx='LD_LIBRARY_PATH' ;;
		esac
		;;
d6401 3
d6445 1
a6445 1
will not work in this version.  Let perlbug@@perl.com
d6494 4
d6521 6
d6531 4
d6579 1
a6579 1
'') man1dir=' '
a6581 6
if $afs; then
	$cat <<EOM

Since you are running AFS, I need to distinguish the directory in which
manual pages reside from the directory in which they are installed (and from
which they are presumably copied to the former directory by occult means).
d6583 3
a6585 9
EOM
	case "$installman1dir" in
	'') dflt=`echo $man1direxp | sed 's#^/afs/#/afs/.#'`;;
	*) dflt="$installman1dir";;
	esac
	fn=de~
	rp='Where will man pages be installed?'
	. ./getfile
	installman1dir="$ans"
a6621 2
rmlist="$rmlist /tmp/cf$$"
$test -d /tmp/cf$$ || mkdir /tmp/cf$$
d6623 1
a6623 2
second=/tmp/cf$$/$first
$rm -f $first $second
d6629 2
a6630 20
		if (echo hi >$second) 2>/dev/null; then
			if $test -f /tmp/cf$$/123456789abcde; then
				$cat <<'EOM'
That's peculiar... You can have filenames longer than 14 characters, but only
on some of the filesystems.  Maybe you are using NFS.  Anyway, to avoid problems
I shall consider your system cannot support long filenames at all.
EOM
				val="$undef"
			else
				echo 'You can have filenames longer than 14 characters.' >&4
				val="$define"
			fi
		else
			$cat <<'EOM'
How confusing! Some of your filesystems are sane enough to allow filenames
longer than 14 characters but some others like /tmp can't even think about them.
So, for now on, I shall assume your kernel does not allow them at all.
EOM
			val="$undef"
		fi
d6634 2
a6635 1
You can't have filenames longer than 14 chars.  You can't even think about them!
d6641 1
a6641 1
$rm -rf /tmp/cf$$ 123456789abcde*
d6674 17
a6690 5
'')	case "$prefix" in 
	*$prog*) dflt=`echo $man1dir | 
			$sed -e 's/man1/man3/g' -e 's/man\.1/man\.3/g'` ;;
	*)	dflt="$privlib/man/man3" ;;
	esac
a6691 1
' ') dflt=none;;
d6694 3
a6697 1

a6700 4
if test "X$man3direxp" != "X$ansexp"; then
	installman3dir=''
fi

d6704 1
a6704 1
'') man3dir=' '
a6706 2
if $afs; then
	$cat <<EOM
d6708 3
a6710 13
Since you are running AFS, I need to distinguish the directory in which
manual pages reside from the directory in which they are installed (and from
which they are presumably copied to the former directory by occult means).

EOM
	case "$installman3dir" in
	'') dflt=`echo $man3direxp | sed 's#^/afs/#/afs/.#'`;;
	*) dflt="$installman3dir";;
	esac
	fn=de~
	rp='Where will man pages be installed?'
	. ./getfile
	installman3dir="$ans"
a6715 1

d6789 1
a6789 1
'') hostcat='cat /etc/hosts';;
d6792 1
a6792 1
'') groupcat='cat /etc/group';;
d6795 1
a6795 1
'') passcat='cat /etc/passwd';;
d6897 1
d6994 1
a6994 1
is most probably close to the reality but may not be valid from outside
d7112 1037
a8148 25
	dflt="$bin"
	: guess some guesses
	$test -d /usr/share/scripts && dflt=/usr/share/scripts
	$test -d /usr/share/bin && dflt=/usr/share/bin
	$test -d /usr/local/script && dflt=/usr/local/script
	$test -d $prefixexp/script && dflt=$prefixexp/script
	set dflt
	eval $prefixup
	;;
*)  dflt="$scriptdir"
	;;
esac
$cat <<EOM
 
Some installations have a separate directory just for executable scripts so
that they can mount it across multiple architectures but keep the scripts in
one spot.  You might, for example, have a subdirectory of /usr/share for this.
Or you might just lump your scripts in with all your other executables.
 
EOM
fn=d~
rp='Where do you keep publicly executable scripts?'
. ./getfile
if $test "X$ansexp" != "X$scriptdirexp"; then
	installscript=''
d8150 2
a8151 4
scriptdir="$ans"
scriptdirexp="$ansexp"
if $afs; then
	$cat <<EOM
d8153 6
a8158 13
Since you are running AFS, I need to distinguish the directory in which
scripts reside from the directory in which they are installed (and from
which they are presumably copied to the former directory by occult means).

EOM
	case "$installscript" in
	'') dflt=`echo $scriptdirexp | sed 's#^/afs/#/afs/.#'`;;
	*) dflt="$installscript";;
	esac
	fn=de~
	rp='Where will public scripts be installed?'
	. ./getfile
	installscript="$ans"
d8160 22
a8181 1
	installscript="$scriptdirexp"
d8183 2
d8186 10
a8195 6
: determine where site specific libraries go.
: Usual default is /usr/local/lib/perl5/site_perl/$apiversion
prog=`echo $package | $sed 's/-*[0-9.]*$//'`
case "$prefix" in
*perl*) set dflt sitelib lib/site_$prog/$apiversion ;;
*)	 set dflt sitelib lib/$package/site_$prog/$apiversion ;;
a8196 2
eval $prefixit
$cat <<EOM
d8198 3
a8200 4
The installation process will also create a directory for
site-specific extensions and modules.  Some users find it convenient
to place all local files in this directory rather than in the main
distribution directory.
d8202 3
a8204 11
EOM
fn=d~+
rp='Pathname for the site-specific library files?'
. ./getfile
if $test "X$sitelibexp" != "X$ansexp"; then
	installsitelib=''
fi
sitelib="$ans"
sitelibexp="$ansexp"
if $afs; then
	$cat <<EOM
d8206 3
a8208 4
Since you are running AFS, I need to distinguish the directory in
which site-specific files reside from the directory in which they are
installed (and from which they are presumably copied to the former
directory by occult means).
d8210 14
d8225 4
a8228 8
	case "$installsitelib" in
	'') dflt=`echo $sitelibexp | sed 's#^/afs/#/afs/.#'`;;
	*) dflt="$installsitelib";;
	esac
	fn=de~
	rp='Where will site-specific files be installed?'
	. ./getfile
	installsitelib="$ans"
d8230 2
a8231 1
	installsitelib="$sitelibexp"
d8233 3
d8237 3
a8239 13
: determine where site specific architecture-dependent libraries go.
: sitelib  default is /usr/local/lib/perl5/site_perl/$apiversion
: sitearch default is /usr/local/lib/perl5/site_perl/$apiversion/$archname
: sitelib may have an optional trailing /share.
tdflt=`echo $sitelib | $sed 's,/share$,,'`
tdflt="$tdflt/$archname"
set sitearch sitearch none
eval $prefixit
case "$sitearch" in
'')	dflt="$tdflt" ;;
*)	dflt="$sitearch" ;;
esac
$cat <<EOM
d8241 14
a8254 9
The installation process will also create a directory for
architecture-dependent site-specific extensions and modules.

EOM
fn=nd~+
rp='Pathname for the site-specific architecture-dependent library files?'
. ./getfile
if $test "X$sitearchexp" != "X$ansexp"; then
	installsitearch=''
d8256 2
a8257 4
sitearch="$ans"
sitearchexp="$ansexp"
if $afs; then
	$cat <<EOM
d8259 3
a8261 4
Since you are running AFS, I need to distinguish the directory in
which site-specific architecture-dependent library files reside from
the directory in which they are installed (and from which they are
presumably copied to the former directory by occult means).
d8263 5
a8267 4
EOM
	case "$installsitearch" in
	'') dflt=`echo $sitearchexp | sed 's#^/afs/#/afs/.#'`;;
	*) dflt="$installsitearch";;
d8269 16
a8284 4
	fn=de~
	rp='Where will site-specific architecture-dependent files be installed?'
	. ./getfile
	installsitearch="$ans"
d8286 5
a8290 1
	installsitearch="$sitearchexp"
d8292 1
a8293 9
cat <<EOM

Previous version of $package used the standard IO mechanisms as defined
in <stdio.h>.  Versions 5.003_02 and later of perl allow alternate IO
mechanisms via a "PerlIO" abstraction, but the stdio mechanism is still
the default.  This abstraction layer can use AT&T's sfio (if you already
have sfio installed) or regular stdio.  Using PerlIO with sfio may cause
problems with some extension modules.  Using PerlIO with stdio is safe,
but it is slower than plain stdio and therefore is not the default.
d8295 5
a8299 10
If this doesn't make any sense to you, just accept the default 'n'.
EOM
case "$useperlio" in
$define|true|[yY]*)	dflt='y';;
*) dflt='n';;
esac
rp='Use the experimental PerlIO abstraction layer?'
. ./myread
case "$ans" in
y|Y) 
d8301 2
a8302 3
	;;     
*)      
	echo "Ok, doing things the stdio way"
d8304 11
a8314 4
	;;
esac
set useperlio
eval $setvar 
d8316 3
a8318 17
: Check how to convert floats to strings.
if test "X$d_Gconvert" = X; then
    echo " "
    echo "Checking for an efficient way to convert floats to strings."
    $cat >try.c <<'EOP'
#ifdef TRY_gconvert
#define Gconvert(x,n,t,b) gconvert((x),(n),(t),(b))
char *myname = "gconvert";
#endif
#ifdef TRY_gcvt
#define Gconvert(x,n,t,b) gcvt((x),(n),(b))
char *myname = "gcvt";
#endif
#ifdef TRY_sprintf
#define Gconvert(x,n,t,b) sprintf((b),"%.*g",(n),(x))
char *myname = "sprintf";
#endif
d8320 3
a8322 1
#include <stdio.h>
d8324 3
a8326 11
int
checkit(expect, got)
char *expect;
char *got;
{
    if (strcmp(expect, got)) {
		printf("%s oddity:  Expected %s, got %s\n",
			myname, expect, got);
		exit(1);
	}
}
d8328 13
a8340 4
int main()
{ 
	char buf[64]; 
	buf[63] = '\0';
d8342 3
a8344 4
	/* This must be 1st test on (which?) platform */
	/* Alan Burlison <AlanBurlsin@@unn.unisys.com> */
	Gconvert(0.1, 8, 0, buf);
	checkit("0.1", buf);
d8346 6
a8351 2
	Gconvert(1.0, 8, 0, buf); 
	checkit("1", buf);
d8353 1
a8353 2
	Gconvert(0.0, 8, 0, buf); 
	checkit("0", buf);
d8355 9
a8363 2
	Gconvert(-1.0, 8, 0, buf); 
	checkit("-1", buf);
d8365 1
a8365 7
	/* Some Linux gcvt's give 1.e+5 here. */
	Gconvert(100000.0, 8, 0, buf); 
	checkit("100000", buf);
	
	/* Some Linux gcvt's give -1.e+5 here. */
	Gconvert(-100000.0, 8, 0, buf); 
	checkit("-100000", buf);
d8367 13
d8381 16
d8398 16
a8413 20
EOP
    case "$d_Gconvert" in
    gconvert*) xxx_list='gconvert gcvt sprintf' ;;
    gcvt*) xxx_list='gcvt gconvert sprintf' ;;
    sprintf*) xxx_list='sprintf gconvert gcvt' ;;
    *) xxx_list='gconvert gcvt sprintf' ;;
    esac

    for xxx_convert in $xxx_list; do
	echo "Trying $xxx_convert"
	$rm -f try try$_o
	set try -DTRY_$xxx_convert
	if eval $compile; then
		echo "$xxx_convert" found. >&4
		if ./try; then
			echo "I'll use $xxx_convert to convert floats into a string." >&4
			break;
		else
			echo "...But $xxx_convert didn't work as I expected."
		fi
d8415 2
a8416 1
		echo "$xxx_convert NOT found." >&4
d8418 2
a8419 1
    done
d8421 4
a8424 6
    case "$xxx_convert" in
    gconvert) d_Gconvert='gconvert((x),(n),(t),(b))' ;;
    gcvt) d_Gconvert='gcvt((x),(n),(b))' ;;
    *) d_Gconvert='sprintf((b),"%.*g",(n),(x))' ;;
    esac
fi
d8426 18
a8443 2
: Initialize h_fcntl
h_fcntl=false
d8445 4
a8448 2
: Initialize h_sysfile
h_sysfile=false
d8450 2
a8451 2
: access call always available on UNIX
set access d_access
d8454 3
a8456 37
: locate the flags for 'access()'
case "$d_access" in
"$define")
	echo " "
	$cat >access.c <<'EOCP'
#include <sys/types.h>
#ifdef I_FCNTL
#include <fcntl.h>
#endif
#ifdef I_SYS_FILE
#include <sys/file.h>
#endif
#ifdef I_UNISTD
#include <unistd.h>
#endif
int main() {
	exit(R_OK);
}
EOCP
	: check sys/file.h first, no particular reason here
	if $test `./findhdr sys/file.h` && \
		$cc $cppflags -DI_SYS_FILE -o access access.c >/dev/null 2>&1 ; then
		h_sysfile=true;
		echo "<sys/file.h> defines the *_OK access constants." >&4
	elif $test `./findhdr fcntl.h` && \
		$cc $cppflags -DI_FCNTL -o access access.c >/dev/null 2>&1 ; then
		h_fcntl=true;
		echo "<fcntl.h> defines the *_OK access constants." >&4
	elif $test `./findhdr unistd.h` && \
		$cc $cppflags -DI_UNISTD -o access access.c >/dev/null 2>&1 ; then
		echo "<unistd.h> defines the *_OK access constants." >&4
	else
		echo "I can't find the four *_OK access constants--I'll use mine." >&4
	fi
	;;
esac
$rm -f access*
d8458 2
a8459 2
: see if alarm exists
set alarm d_alarm
d8462 3
a8464 22
: Look for GNU-cc style attribute checking
echo " "
echo "Checking whether your compiler can handle __attribute__ ..." >&4
$cat >attrib.c <<'EOCP'
#include <stdio.h>
void croak (char* pat,...) __attribute__((format(printf,1,2),noreturn));
EOCP
if $cc $ccflags -c attrib.c >attrib.out 2>&1 ; then
	if $contains 'warning' attrib.out >/dev/null 2>&1; then
		echo "Your C compiler doesn't fully support __attribute__."
		val="$undef"
	else
		echo "Your C compiler supports __attribute__."
		val="$define"
	fi
else
	echo "Your C compiler doesn't seem to understand __attribute__ at all."
	val="$undef"
fi
set d_attribut
eval $setvar
$rm -f attrib*
d8466 2
a8467 2
: see if bcmp exists
set bcmp d_bcmp
d8470 2
a8471 2
: see if bcopy exists
set bcopy d_bcopy
d8474 3
a8476 3
: see if this is a unistd.h system
set unistd.h i_unistd
eval $inhdr
d8478 2
a8479 2
: see if getpgrp exists
set getpgrp d_getpgrp
d8482 2
a8483 60
case "$d_getpgrp" in
"$define")
	echo " "
	echo "Checking to see which flavor of getpgrp is in use..."
	$cat >set.c <<EOP
#$i_unistd I_UNISTD
#include <sys/types.h>
#ifdef I_UNISTD
#  include <unistd.h>
#endif
int main()
{
	if (getuid() == 0) {
		printf("(I see you are running Configure as super-user...)\n");
		setuid(1);
	}
#ifdef TRY_BSD_PGRP
	if (getpgrp(1) == 0)
		exit(0);
#else
	if (getpgrp() > 0)
		exit(0);
#endif
	exit(1);
}
EOP
	if $cc -DTRY_BSD_PGRP $ccflags $ldflags -o set set.c $libs >/dev/null 2>&1 && ./set; then
		echo "You have to use getpgrp(pid) instead of getpgrp()." >&4
		val="$define"
	elif $cc $ccflags $ldflags -o set set.c $libs >/dev/null 2>&1 && ./set; then
		echo "You have to use getpgrp() instead of getpgrp(pid)." >&4
		val="$undef"
	else
		echo "I can't seem to compile and run the test program."
		if ./usg; then
			xxx="a USG one, i.e. you use getpgrp()."
		else
			# SVR4 systems can appear rather BSD-ish.
			case "$i_unistd" in
			$undef)
				xxx="a BSD one, i.e. you use getpgrp(pid)."
				val="$define"
				;;
			$define)
				xxx="probably a USG one, i.e. you use getpgrp()."
				val="$undef"
				;;
			esac
		fi
		echo "Assuming your getpgrp is $xxx" >&4
	fi
	;;
*) val="$undef";;
esac
set d_bsdgetpgrp
eval $setvar
$rm -f set set.c

: see if setpgrp exists
set setpgrp d_setpgrp
d8486 3
a8488 6
case "$d_setpgrp" in
"$define")
	echo " "
	echo "Checking to see which flavor of setpgrp is in use..."
	$cat >set.c <<EOP
#$i_unistd I_UNISTD
d8490 5
a8494 2
#ifdef I_UNISTD
#  include <unistd.h>
d8496 4
a8499 9
int main()
{
	if (getuid() == 0) {
		printf("(I see you are running Configure as super-user...)\n");
		setuid(1);
	}
#ifdef TRY_BSD_PGRP
	if (-1 == setpgrp(1, 1))
		exit(0);
d8501 1
a8501 2
	if (setpgrp() != -1)
		exit(0);
a8502 1
	exit(1);
d8504 8
a8511 3
EOP
	if $cc -DTRY_BSD_PGRP $ccflags $ldflags -o set set.c $libs >/dev/null 2>&1 && ./set; then
		echo 'You have to use setpgrp(pid,pgrp) instead of setpgrp().' >&4
d8513 2
a8514 2
	elif $cc $ccflags $ldflags -o set set.c $libs >/dev/null 2>&1 && ./set; then
		echo 'You have to use setpgrp() instead of setpgrp(pid,pgrp).' >&4
d8516 8
d8525 2
a8526 17
		echo "(I can't seem to compile and run the test program.)"
		if ./usg; then
			xxx="a USG one, i.e. you use setpgrp()."
		else
			# SVR4 systems can appear rather BSD-ish.
			case "$i_unistd" in
			$undef)
				xxx="a BSD one, i.e. you use setpgrp(pid,pgrp)."
				val="$define"
				;;
			$define)
				xxx="probably a USG one, i.e. you use setpgrp()."
				val="$undef"
				;;
			esac
		fi
		echo "Assuming your setpgrp is $xxx" >&4
d8528 5
a8532 4
	;;
*) val="$undef";;
esac
set d_bsdsetpgrp
d8534 1
a8534 4
$rm -f set set.c
: see if bzero exists
set bzero d_bzero
eval $inlibc
d8536 1
a8536 1
: check for lengths of integral types
d8538 9
a8546 19
case "$intsize" in
'')
	echo "Checking to see how big your integers are..." >&4
	$cat >intsize.c <<'EOCP'
#include <stdio.h>
int main()
{
	printf("intsize=%d;\n", sizeof(int));
	printf("longsize=%d;\n", sizeof(long));
	printf("shortsize=%d;\n", sizeof(short));
	exit(0);
}
EOCP
	set intsize
	if eval $compile_ok && ./intsize > /dev/null; then
		eval `./intsize`
		echo "Your integers are $intsize bytes long."
		echo "Your long integers are $longsize bytes long."
		echo "Your short integers are $shortsize bytes long."
d8548 1
a8548 19
		$cat >&4 <<EOM
!
Help! I can't compile and run the intsize test program: please enlighten me!
(This is probably a misconfiguration in your system or libraries, and
you really ought to fix it.  Still, I'll try anyway.)
!
EOM
		dflt=4
		rp="What is the size of an integer (in bytes)?"
		. ./myread
		intsize="$ans"
		dflt=$intsize
		rp="What is the size of a long integer (in bytes)?"
		. ./myread
		longsize="$ans"
		dflt=2
		rp="What is the size of a short integer (in bytes)?"
		. ./myread
		shortsize="$ans"
d8550 6
a8555 1
	;;
a8556 1
$rm -f intsize intsize.*
d8558 7
a8564 34
: see if signal is declared as pointer to function returning int or void
echo " "
xxx=`./findhdr signal.h`
$test "$xxx" && $cppstdin $cppminus $cppflags < $xxx >$$.tmp 2>/dev/null
if $contains 'int.*\*[ 	]*signal' $$.tmp >/dev/null 2>&1 ; then
	echo "You have int (*signal())() instead of void." >&4
	val="$undef"
elif $contains 'void.*\*[ 	]*signal' $$.tmp >/dev/null 2>&1 ; then
	echo "You have void (*signal())()." >&4
	val="$define"
elif $contains 'extern[ 	]*[(\*]*signal' $$.tmp >/dev/null 2>&1 ; then
	echo "You have int (*signal())() instead of void." >&4
	val="$undef"
elif $contains 'void.*\*.*sig' $$.tmp >/dev/null 2>&1 ; then
	echo "You have void (*signal())()." >&4
	val="$define"
else
	case "$d_voidsig" in
	'')
	echo "I can't determine whether signal handler returns void or int..." >&4
		dflt=void
		rp="What type does your signal handler return?"
		. ./myread
		case "$ans" in
		v*) val="$define";;
		*) val="$undef";;
		esac;;
	"$define")
		echo "As you already told me, signal handler returns void." >&4
		val="$define"
		;;
	*)	echo "As you already told me, signal handler returns int." >&4
		val="$undef"
		;;
d8566 1
a8566 6
fi
set d_voidsig
eval $setvar
case "$d_voidsig" in
"$define") signal_t="void";;
*) signal_t="int";;
a8567 3
$rm -f $$.tmp

: check for ability to cast large floats to 32-bit ints.
d8569 20
a8588 35
echo 'Checking whether your C compiler can cast large floats to int32.' >&4
if $test "$intsize" -ge 4; then
	xxx=int
else
	xxx=long
fi
$cat >try.c <<EOCP
#include <stdio.h>
#include <sys/types.h>
#include <signal.h>
$signal_t blech(s) int s; { exit(3); }
int main()
{
	$xxx i32;
	double f, g;
	int result = 0;
	char str[16];
	signal(SIGFPE, blech);

	/* Don't let compiler optimize the test away.  Store the number 
	   in a writable string for gcc to pass to sscanf under HP/UX.
	*/
	sprintf(str, "2147483647");
	sscanf(str, "%lf", &f); /* f = (double) 0x7fffffff; */
	g = 10 * f;
	i32  = ($xxx) g;

	/* x86 processors will probably give 0x8000 0000, which is a
       sign change.  We don't want that.  We want to mimic SPARC
	   behavior here, which is to preserve the sign and give
	   back 0x7fff ffff.
	*/
	if (i32 != ($xxx) f)
		result |= 1;
	exit(result);
d8591 10
a8600 14
set try
if eval $compile_ok; then
	./try
	yyy=$?
else
	echo "(I can't seem to compile the test program--assuming it can't)"
	yyy=1
fi
case "$yyy" in
0)	val="$define"
	echo "Yup, it can."
	;;
*)	val="$undef"
	echo "Nope, it can't."
d8602 1
d8604 1
a8604 3
set d_casti32
eval $setvar
$rm -f try try.*
a8605 1
: check for ability to cast negative floats to unsigned
d8607 6
a8612 3
echo 'Checking whether your C compiler can cast negative float to unsigned.' >&4
$cat >try.c <<EOCP
#include <stdio.h>
d8615 18
a8632 5
$signal_t blech(s) int s; { exit(7); }
$signal_t blech_in_list(s) int s; { exit(4); }
unsigned long dummy_long(p) unsigned long p; { return p; }
unsigned int dummy_int(p) unsigned int p; { return p; }
unsigned short dummy_short(p) unsigned short p; { return p; }
d8635 4
a8638 16
	double f;
	unsigned long along;
	unsigned int aint;
	unsigned short ashort;
	int result = 0;
	char str[16];
	
	/* Frustrate gcc-2.7.2's optimizer which failed this test with
	   a direct f = -123. assignment.  gcc-2.8.0 reportedly
	   optimized the whole file away
	*/
	/* Store the number in a writable string for gcc to pass to 
	   sscanf under HP/UX.
	*/
	sprintf(str, "-123");
	sscanf(str, "%lf", &f);  /* f = -123.; */
d8640 35
a8674 42
	signal(SIGFPE, blech);
	along = (unsigned long)f;
	aint = (unsigned int)f;
	ashort = (unsigned short)f;
	if (along != (unsigned long)-123)
		result |= 1;
	if (aint != (unsigned int)-123)
		result |= 1;
	if (ashort != (unsigned short)-123)
		result |= 1;
	sprintf(str, "1073741824.");
	sscanf(str, "%lf", &f); /* f = (double)0x40000000; */
	f = f + f;
	along = 0;
	along = (unsigned long)f;
	if (along != 0x80000000)
		result |= 2;
	f -= 1.;
	along = 0;
	along = (unsigned long)f;
	if (along != 0x7fffffff)
		result |= 1;
	f += 2.;
	along = 0;
	along = (unsigned long)f;
	if (along != 0x80000001)
		result |= 2;
	if (result)
		exit(result);
	signal(SIGFPE, blech_in_list);
	sprintf(str, "123.");
	sscanf(str, "%lf", &f);  /* f = 123.; */
	along = dummy_long((unsigned long)f);
	aint = dummy_int((unsigned int)f);
	ashort = dummy_short((unsigned short)f);
	if (along != (unsigned long)123)
		result |= 4;
	if (aint != (unsigned int)123)
		result |= 4;
	if (ashort != (unsigned short)123)
		result |= 4;
	exit(result);
d8676 5
d8683 60
a8742 14
set try
if eval $compile_ok; then
	./try
	castflags=$?
else
	echo "(I can't seem to compile the test program--assuming it can't)"
	castflags=7
fi
case "$castflags" in
0)	val="$define"
	echo "Yup, it can."
	;;
*)	val="$undef"
	echo "Nope, it can't."
d8745 1
a8745 3
set d_castneg
eval $setvar
$rm -f try.*
d8747 2
a8748 41
: see if vprintf exists
echo " "
if set vprintf val -f d_vprintf; eval $csym; $val; then
	echo 'vprintf() found.' >&4
	val="$define"
	$cat >vprintf.c <<'EOF'
#include <varargs.h>

int main() { xxx("foo"); }

xxx(va_alist)
va_dcl
{
	va_list args;
	char buf[10];

	va_start(args);
	exit((unsigned long)vsprintf(buf,"%s",args) > 10L);
}
EOF
	set vprintf
	if eval $compile && ./vprintf; then
		echo "Your vsprintf() returns (int)." >&4
		val2="$undef"
	else
		echo "Your vsprintf() returns (char*)." >&4
		val2="$define"
	fi
else
	echo 'vprintf() NOT found.' >&4
		val="$undef"
		val2="$undef"
fi
set d_vprintf
eval $setvar
val=$val2
set d_charvspr
eval $setvar

: see if chown exists
set chown d_chown
d8751 2
a8752 2
: see if chroot exists
set chroot d_chroot
d8755 2
a8756 2
: see if chsize exists
set chsize d_chsize
d8759 11
a8769 14
: check for const keyword
echo " "
echo 'Checking to see if your C compiler knows about "const"...' >&4
$cat >const.c <<'EOCP'
typedef struct spug { int drokk; } spug;
int main()
{
	const char *foo;
	const spug y;
}
EOCP
if $cc -c $ccflags const.c >/dev/null 2>&1 ; then
	val="$define"
	echo "Yup, it does."
d8771 5
a8775 5
	val="$undef"
	echo "Nope, it doesn't."
fi
set d_const
eval $setvar
d8777 3
a8779 1
: see if crypt exists
d8781 6
a8786 8
if set crypt val -f d_crypt; eval $csym; $val; then
	echo 'crypt() found.' >&4
	val="$define"
	cryptlib=''
else
	cryptlib=`./loc Slibcrypt$_a "" $xlibpth`
	if $test -z "$cryptlib"; then
		cryptlib=`./loc Mlibcrypt$_a "" $xlibpth`
d8788 2
a8789 11
		cryptlib=-lcrypt
	fi
	if $test -z "$cryptlib"; then
		cryptlib=`./loc Llibcrypt$_a "" $xlibpth`
	else
		cryptlib=-lcrypt
	fi
	if $test -z "$cryptlib"; then
		cryptlib=`./loc libcrypt$_a "" $libpth`
	else
		cryptlib=-lcrypt
a8790 41
	if $test -z "$cryptlib"; then
		echo 'crypt() NOT found.' >&4
		val="$undef"
	else
		val="$define"
	fi
fi
set d_crypt
eval $setvar

: see if cuserid exists
set cuserid d_cuserid
eval $inlibc

: see if this is a limits.h system
set limits.h i_limits
eval $inhdr

: see if this is a float.h system
set float.h i_float
eval $inhdr

: See if number of significant digits in a double precision number is known
echo " "
$cat >dbl_dig.c <<EOM
#$i_limits I_LIMITS
#$i_float I_FLOAT
#ifdef I_LIMITS
#include <limits.h>
#endif
#ifdef I_FLOAT
#include <float.h>
#endif
#ifdef DBL_DIG
printf("Contains DBL_DIG");
#endif
EOM
$cppstdin $cppflags $cppminus < dbl_dig.c >dbl_dig.E 2>/dev/null
if $contains 'DBL_DIG' dbl_dig.E >/dev/null 2>&1; then
	echo "DBL_DIG found." >&4
	val="$define"
d8792 5
a8796 25
	echo "DBL_DIG NOT found." >&4
	val="$undef"
fi
$rm -f dbl_dig.?
set d_dbl_dig
eval $setvar

: see if difftime exists
set difftime d_difftime
eval $inlibc

: see if sys/stat.h is available
set sys/stat.h i_sysstat
eval $inhdr

: see if this is a dirent system
echo " "
if xinc=`./findhdr dirent.h`; $test "$xinc"; then
	val="$define"
	echo "<dirent.h> found." >&4
else
	val="$undef"
	if xinc=`./findhdr sys/dir.h`; $test "$xinc"; then
		echo "<sys/dir.h> found." >&4
		echo " "
d8798 35
a8832 1
		xinc=`./findhdr sys/ndir.h`
a8833 50
	echo "<dirent.h> NOT found." >&4
fi
set i_dirent
eval $setvar

: Look for type of directory structure.
echo " "
$cppstdin $cppflags $cppminus < "$xinc" > try.c

case "$direntrytype" in
''|' ')
	case "$i_dirent" in
	$define) guess1='struct dirent' ;;
	*) guess1='struct direct'  ;;
	esac
	;;
*)	guess1="$direntrytype"
	;;
esac

case "$guess1" in
'struct dirent') guess2='struct direct' ;;
*) guess2='struct dirent' ;;
esac
		
if $contains "$guess1" try.c >/dev/null 2>&1; then
	direntrytype="$guess1"
	echo "Your directory entries are $direntrytype." >&4
elif $contains "$guess2" try.c >/dev/null 2>&1; then
	direntrytype="$guess2"
	echo "Your directory entries seem to be $direntrytype." >&4
else
	echo "I don't recognize your system's directory entries." >&4
	rp="What type is used for directory entries on this system?"
	dflt="$guess1"
	. ./myread
	direntrytype="$ans"
fi
$rm -f try.c


: see if the directory entry stores field length
echo " "
$cppstdin $cppflags $cppminus < "$xinc" > try.c
if $contains 'd_namlen' try.c >/dev/null 2>&1; then
	echo "Good, your directory entry keeps length information in d_namlen." >&4
	val="$define"
else
	echo "Your directory entry does not know about the d_namlen field." >&4
	val="$undef"
a8834 3
set d_dirnamlen
eval $setvar
$rm -f try.c
d8836 2
a8837 21
hasfield='varname=$1; struct=$2; field=$3; shift; shift; shift;
while $test $# -ge 2; do
	case "$1" in
	$define) echo "#include <$2>";;
	esac ;
    shift 2;
done > try.c;
echo "int main () { struct $struct foo; foo.$field = 0; }" >> try.c;
if eval $cc $optimize $ccflags -c try.c >/dev/null 2>&1; then
	val="$define";
else
	val="$undef";
fi;
set $varname;
eval $setvar;
$rm -f try.c try.o'

: see if dlerror exists
xxx_runnm="$runnm"
runnm=false
set dlerror d_dlerror
a8838 1
runnm="$xxx_runnm"
a8839 3
: see if dlfcn is available
set dlfcn.h i_dlfcn
eval $inhdr
d8841 18
a8858 3
case "$usedl" in
$define|y|true)
	$cat << EOM
d8860 3
a8862 3
On a few systems, the dynamically loaded modules that perl generates and uses
will need a different extension than shared libs. The default will probably
be appropriate.
d8864 80
a8943 4
EOM
	case "$dlext" in
	'')	dflt="$so" ;;
	*)	dflt="$dlext" ;;
d8945 2
a8946 8
	rp='What is the extension of dynamically loaded modules'
	. ./myread
	dlext="$ans"
	;;
*)
	dlext="none"
	;;
esac
d8948 2
a8949 3
: Check if dlsym need a leading underscore
echo " "
val="$undef"
d8951 1
a8951 5
case "$dlsrc" in
dl_dlopen.xs)
	echo "Checking whether your dlsym() needs a leading underscore ..." >&4
	$cat >dyna.c <<'EOM'
fred () { }
d8953 4
a8956 8

$cat >fred.c<<EOM

#include <stdio.h>
#$i_dlfcn I_DLFCN
#ifdef I_DLFCN
#include <dlfcn.h>      /* the dynamic linker include file for Sunos/Solaris */
#else
d8958 8
a8965 2
#include <nlist.h>
#include <link.h>
d8967 2
d8970 3
a8972 1
extern int fred() ;
d8974 2
a8975 6
int main()
{
    void * handle ;
    void * symbol ;
#ifndef RTLD_LAZY
    int mode = 1 ;
d8977 1
a8977 1
    int mode = RTLD_LAZY ;
a8978 21
    handle = dlopen("./dyna.$dlext", mode) ;
    if (handle == NULL) {
	printf ("1\n") ;
	fflush (stdout) ;
	exit(0);
    }
    symbol = dlsym(handle, "fred") ;
    if (symbol == NULL) {
	/* try putting a leading underscore */
	symbol = dlsym(handle, "_fred") ;
	if (symbol == NULL) {
	    printf ("2\n") ;
	    fflush (stdout) ;
	    exit(0);
	}
	printf ("3\n") ;
    }
    else
	printf ("4\n") ;
    fflush (stdout) ;
    exit(0);
d8980 30
d9011 2
a9012 15
	: Call the object file tmp-dyna.o in case dlext=o.
	if $cc $ccflags $cccdlflags -c dyna.c > /dev/null 2>&1 && 
		mv dyna${_o} tmp-dyna${_o} > /dev/null 2>&1 && 
		$ld $lddlflags -o dyna.$dlext tmp-dyna${_o} > /dev/null 2>&1 && 
		$cc $ccflags -o fred $ldflags $cccdlflags $ccdlflags fred.c $libs > /dev/null 2>&1; then
		xxx=`./fred`
		case $xxx in
		1)	echo "Test program failed using dlopen." >&4
			echo "Perhaps you should not use dynamic loading." >&4;;
		2)	echo "Test program failed using dlsym." >&4
			echo "Perhaps you should not use dynamic loading." >&4;;
		3)	echo "dlsym needs a leading underscore" >&4
			val="$define" ;;
		4)	echo "dlsym doesn't need a leading underscore." >&4;;
		esac
d9014 4
a9017 1
		echo "I can't compile and run the test program." >&4
d9019 2
a9020 4
	;;
esac
		
$rm -f fred fred.? dyna.$dlext dyna.? tmp-dyna.?
d9022 2
a9023 5
set d_dlsymun
eval $setvar

: see if dup2 exists
set dup2 d_dup2
d9026 2
a9027 2
: see if endhostent exists
set endhostent d_endhent
d9030 2
a9031 2
: see if endnetent exists
set endnetent d_endnent
d9034 2
a9035 2
: see if endprotoent exists
set endprotoent d_endpent
d9038 2
a9039 2
: see if endservent exists
set endservent d_endsent
d9042 2
a9043 1
: Locate the flags for 'open()'
d9045 4
a9048 16
$cat >open3.c <<'EOCP'
#include <sys/types.h>
#ifdef I_FCNTL
#include <fcntl.h>
#endif
#ifdef I_SYS_FILE
#include <sys/file.h>
#endif
int main() {
	if(O_RDONLY);
#ifdef O_TRUNC
	exit(0);
#else
	exit(1);
#endif
}
d9050 4
a9053 23
: check sys/file.h first to get FREAD on Sun
if $test `./findhdr sys/file.h` && \
		set open3 -DI_SYS_FILE && eval $compile; then
	h_sysfile=true;
	echo "<sys/file.h> defines the O_* constants..." >&4
	if ./open3; then
		echo "and you have the 3 argument form of open()." >&4
		val="$define"
	else
		echo "but not the 3 argument form of open().  Oh, well." >&4
		val="$undef"
	fi
elif $test `./findhdr fcntl.h` && \
		set open3 -DI_FCNTL && eval $compile; then
	h_fcntl=true;
	echo "<fcntl.h> defines the O_* constants..." >&4
	if ./open3; then
		echo "and you have the 3 argument form of open()." >&4
		val="$define"
	else
		echo "but not the 3 argument form of open().  Oh, well." >&4
		val="$undef"
	fi
d9056 4
a9059 1
	echo "I can't find the O_* constant definitions!  You got problems." >&4
d9061 2
a9062 1
set d_open3
a9063 1
$rm -f open3*
d9065 25
a9089 46
: check for non-blocking I/O stuff
case "$h_sysfile" in
true) echo "#include <sys/file.h>" > head.c;;
*)
	case "$h_fcntl" in
	true) echo "#include <fcntl.h>" > head.c;;
	*) echo "#include <sys/fcntl.h>" > head.c;;
	esac
	;;
esac
echo " "
echo "Figuring out the flag used by open() for non-blocking I/O..." >&4
case "$o_nonblock" in
'')
	$cat head.c > try.c
	$cat >>try.c <<'EOCP'
int main() {
#ifdef O_NONBLOCK
	printf("O_NONBLOCK\n");
	exit(0);
#endif
#ifdef O_NDELAY
	printf("O_NDELAY\n");
	exit(0);
#endif
#ifdef FNDELAY
	printf("FNDELAY\n");
	exit(0);
#endif
	exit(0);
}
EOCP
	set try
	if eval $compile_ok; then
		o_nonblock=`./try`
		case "$o_nonblock" in
		'') echo "I can't figure it out, assuming O_NONBLOCK will do.";;
		*) echo "Seems like we can use $o_nonblock.";;
		esac
	else
		echo "(I can't compile the test program; pray O_NONBLOCK is right!)"
	fi
	;;
*) echo "Using $hint value $o_nonblock.";;
esac
$rm -f try try.* .out core
d9091 3
a9093 22
echo " "
echo "Let's see what value errno gets from read() on a $o_nonblock file..." >&4
case "$eagain" in
'')
	$cat head.c > try.c
	$cat >>try.c <<EOCP
#include <errno.h>
#include <sys/types.h>
#include <signal.h>
#define MY_O_NONBLOCK $o_nonblock
#ifndef errno  /* XXX need better Configure test */
extern int errno;
#endif
$signal_t blech(x) int x; { exit(3); }
EOCP
	$cat >> try.c <<'EOCP'
int main()
{
	int pd[2];
	int pu[2];
	char buf[1];
	char string[100];
a9094 35
	pipe(pd);	/* Down: child -> parent */
	pipe(pu);	/* Up: parent -> child */
	if (0 != fork()) {
		int ret;
		close(pd[1]);	/* Parent reads from pd[0] */
		close(pu[0]);	/* Parent writes (blocking) to pu[1] */
		if (-1 == fcntl(pd[0], F_SETFL, MY_O_NONBLOCK))
			exit(1);
		signal(SIGALRM, blech);
		alarm(5);
		if ((ret = read(pd[0], buf, 1)) > 0)	/* Nothing to read! */
			exit(2);
		sprintf(string, "%d\n", ret);
		write(2, string, strlen(string));
		alarm(0);
#ifdef EAGAIN
		if (errno == EAGAIN) {
			printf("EAGAIN\n");
			goto ok;
		}
#endif
#ifdef EWOULDBLOCK
		if (errno == EWOULDBLOCK)
			printf("EWOULDBLOCK\n");
#endif
	ok:
		write(pu[1], buf, 1);	/* Unblocks child, tell it to close our pipe */
		sleep(2);				/* Give it time to close our pipe */
		alarm(5);
		ret = read(pd[0], buf, 1);	/* Should read EOF */
		alarm(0);
		sprintf(string, "%d\n", ret);
		write(3, string, strlen(string));
		exit(0);
	}
d9096 7
a9102 68
	close(pd[0]);			/* We write to pd[1] */
	close(pu[1]);			/* We read from pu[0] */
	read(pu[0], buf, 1);	/* Wait for parent to signal us we may continue */
	close(pd[1]);			/* Pipe pd is now fully closed! */
	exit(0);				/* Bye bye, thank you for playing! */
}
EOCP
	set try
	if eval $compile_ok; then
		echo "$startsh" >mtry
		echo "./try >try.out 2>try.ret 3>try.err || exit 4" >>mtry
		chmod +x mtry
		./mtry >/dev/null 2>&1
		case $? in
		0) eagain=`$cat try.out`;;
		1) echo "Could not perform non-blocking setting!";;
		2) echo "I did a successful read() for something that was not there!";;
		3) echo "Hmm... non-blocking I/O does not seem to be working!";;
		*) echo "Something terribly wrong happened during testing.";;
		esac
		rd_nodata=`$cat try.ret`
		echo "A read() system call with no data present returns $rd_nodata."
		case "$rd_nodata" in
		0|-1) ;;
		*)
			echo "(That's peculiar, fixing that to be -1.)"
			rd_nodata=-1
			;;
		esac
		case "$eagain" in
		'')
			echo "Forcing errno EAGAIN on read() with no data available."
			eagain=EAGAIN
			;;
		*)
			echo "Your read() sets errno to $eagain when no data is available."
			;;
		esac
		status=`$cat try.err`
		case "$status" in
		0) echo "And it correctly returns 0 to signal EOF.";;
		-1) echo "But it also returns -1 to signal EOF, so be careful!";;
		*) echo "However, your read() returns '$status' on EOF??";;
		esac
		val="$define"
		if test "$status" = "$rd_nodata"; then
			echo "WARNING: you can't distinguish between EOF and no data!"
			val="$undef"
		fi
	else
		echo "I can't compile the test program--assuming errno EAGAIN will do."
		eagain=EAGAIN
	fi
	set d_eofnblk
	eval $setvar
	;;
*)
	echo "Using $hint value $eagain."
	echo "Your read() returns $rd_nodata when no data is present."
	case "$d_eofnblk" in
	"$define") echo "And you can see EOF because read() returns 0.";;
	"$undef") echo "But you can't see EOF status from read() returned value.";;
	*)
		echo "(Assuming you can't see EOF status from read anyway.)"
		d_eofnblk=$undef
		;;
	esac
	;;
a9103 1
$rm -f try try.* .out core head.c mtry
d9105 2
a9106 2
: see if fchmod exists
set fchmod d_fchmod
d9108 3
d9112 2
a9113 2
: see if fchown exists
set fchown d_fchown
d9116 3
a9118 2
: see if this is an fcntl system
set fcntl d_fcntl
d9121 3
a9123 2
: see if fgetpos exists
set fgetpos d_fgetpos
d9126 2
a9127 2
: see if flock exists
set flock d_flock
d9130 3
a9132 2
: see if fork exists
set fork d_fork
d9134 3
d9138 2
a9139 2
: see if pathconf exists
set pathconf d_pathconf
d9142 3
a9144 2
: see if fpathconf exists
set fpathconf d_fpathconf
d9147 2
a9148 2
: see if fsetpos exists
set fsetpos d_fsetpos
d9159 2
a9160 10
: see if this is a sys/param system
set sys/param.h i_sysparam
eval $inhdr

: see if this is a sys/mount.h system
set sys/mount.h i_sysmount
eval $inhdr

: see if fstatfs exists
set fstatfs d_fstatfs
d9163 1
a9163 1
: see if statfs knows about mount flags
d9165 12
a9176 2
set d_statfsflags statfs f_flags $i_sysparam sys/param.h $i_sysmount sys/mount.h
eval $hasfield
d9178 33
a9210 3
: see if this is a sysstatvfs.h system
set sys/statvfs.h i_sysstatvfs
eval $inhdr
d9212 35
a9246 26
: see if fstatvfs exists
set fstatvfs d_fstatvfs
eval $inlibc

: see if gethostent exists
set gethostent d_gethent
eval $inlibc

hasproto='varname=$1; func=$2; shift; shift;
while $test $# -ge 2; do
	case "$1" in
	$define) echo "#include <$2>";;
	esac ;
    shift 2;
done > try.c;
$cppstdin $cppflags $cppminus < try.c > tryout.c 2>/dev/null;
if $contains "$func.*(" tryout.c >/dev/null 2>&1; then
	echo "$func() prototype found.";
	val="$define";
else
	echo "$func() prototype NOT found.";
	val="$undef";
fi;
set $varname;
eval $setvar;
$rm -f try.c tryout.c'
d9261 8
a9298 12
: see if this is a mntent.h system
set mntent.h i_mntent
eval $inhdr

: see if getmntent exists
set getmntent d_getmntent
eval $inlibc

: see if hasmntopt exists
set hasmntopt d_hasmntopt
eval $inlibc

d9320 5
d9342 8
d9369 29
d9444 3
a9446 21
: see which of string.h or strings.h is needed
echo " "
strings=`./findhdr string.h`
if $test "$strings" && $test -r "$strings"; then
	echo "Using <string.h> instead of <strings.h>." >&4
	val="$define"
else
	val="$undef"
	strings=`./findhdr strings.h`
	if $test "$strings" && $test -r "$strings"; then
		echo "Using <strings.h> instead of <string.h>." >&4
	else
		echo "No string header found -- You'll surely have problems." >&4
	fi
fi
set i_string
eval $setvar
case "$i_string" in
"$undef") strings=`./findhdr strings.h`;;
*)	  strings=`./findhdr string.h`;;
esac
d9485 45
d9575 29
a9603 2
#else
lchown();
d9605 5
a9609 6
; return 0; }
EOCP
set try
if eval $compile; then
    $echo "lchown() found." >&4
    val="$define"
d9611 2
a9612 2
    $echo "lchown() NOT found." >&4
    val="$undef"
d9614 2
a9615 1
set d_lchown
a9629 46
: check for long doubles
echo " "
echo $n "Checking to see if your system supports long doubles...$c" >&4
echo 'long double foo() { long double x; x = 7.0; return x; }' > try.c
if $cc $optimize $ccflags -c try.c >/dev/null 2>&1; then
	val="$define"
	echo " Yup, it does." >&4
else
	val="$undef"
	echo " Nope, it doesn't." >&4
fi
$rm try.*
set d_longdbl
eval $setvar

: check for length of long double
case "${d_longdbl}${longdblsize}" in
$define)
	echo " "
	$echo $n "Checking to see how big your long doubles are...$c" >&4
	$cat >try.c <<'EOCP'
#include <stdio.h>
int main()
{
	printf("%d\n", sizeof(long double));
}
EOCP
	set try
	if eval $compile; then
		longdblsize=`./try`
		$echo " $longdblsize bytes." >&4
	else
		dflt='8'
		echo " "
		echo "(I can't seem to compile the test program.  Guessing...)" >&4
		rp="What is the size of a long double (in bytes)?"
		. ./myread
		longdblsize="$ans"
	fi
	if $test "X$doublesize" = "X$longdblsize"; then
		echo "(That isn't any different from an ordinary double.)"
	fi	
	;;
esac
$rm -f try.c try

d9632 4
a9635 3
echo $n "Checking to see if your system supports long long...$c" >&4
echo 'long long foo() { long long x; x = 7; return x; }' > try.c
if $cc $optimize $ccflags -c try.c >/dev/null 2>&1; then
d9637 1
a9637 1
	echo " Yup, it does." >&4
d9640 1
a9640 1
	echo " Nope, it doesn't." >&4
d9650 1
a9650 1
	$echo $n "Checking to see how big your long longs are...$c" >&4
d9655 2
a9656 1
	printf("%d\n", sizeof(long long));
d9661 2
a9662 2
		longlongsize=`./try`
		$echo " $longlongsize bytes." >&4
d9676 6
a9681 1
$rm -f try.c try
d9687 4
d9703 4
d9727 4
d9735 8
d9747 31
d9828 401
a10228 5
eval $setvar

: see if nice exists
set nice d_nice
eval $inlibc
d10246 1
d10248 11
a10258 2
	YIELD();
	exit(0);
d10261 2
a10262 3
: see if pthread_yield exists within given cccmd,
: if we do not usethreads this may well end up undef.
set try -DYIELD=pthread_yield
d10265 1
a10265 1
    echo 'pthread_yield() found.' >&4
a10267 1
    echo 'pthread_yield() NOT found.' >&4
d10269 8
a10276 1
set d_pthread_yield
d10279 2
a10280 3
: see if sched_yield exists within given cccmd,
: if we do not usethreads this may well end up undef.
set try -DYIELD=sched_yield
d10283 3
a10285 1
    echo 'sched_yield() found.' >&4
d10287 9
a10295 2
    val="$undef"
    echo 'sched_yield() NOT found.' >&4
d10297 9
a10305 1
set d_sched_yield
a10306 1
$rm -f try try.*
d10308 3
a10310 3
: see if this is a pthread.h system
set pthread.h i_pthread
eval $inhdr
d10312 1
a10312 43
: see if this is a mach/cthreads.h system
set mach/cthreads.h i_machcthreads
eval $inhdr

: test whether pthreads are created in joinable -- aka undetached -- state
if test "X$usethreads" = "X$define" -a "X$i_pthread" = "X$define"; then
	echo $n "Checking whether pthreads are created joinable. $c" >&4 
	$cat >try.c <<EOCP
#include <pthread.h>
#include <stdio.h>
int main() {
    pthread_attr_t attr;
    int detachstate;
    printf("%s\n",
	pthread_attr_init(&attr) == 0 &&
        pthread_attr_getdetachstate(&attr, &detachstate) == 0 &&
        detachstate == PTHREAD_CREATE_DETACHED ?
        "detached" : "joinable");
    exit(0);
}
EOCP
	set try
	if eval $compile; then
		yyy=`./try`
		case "$yyy" in
			detached) echo "Nope, they aren't." >&4 ;;
			*) echo "Yup, they are." >&4 ;;
		esac
	else
		echo " "
		echo "(I can't execute the test program--assuming they are.)" >&4
		yyy=joinable
	fi
	$rm -f try try.*
	case "$yyy" in
		detached) val="$undef" ;;
		*) val="$define" ;;
	esac
	set d_pthreads_created_joinable
	eval $setvar
else
    d_pthreads_created_joinable="$undef"
fi
a10319 12
	: see if setpwent exists
	set setpwent d_setpwent
	eval $inlibc

	: see if getpwent exists
	set getpwent d_getpwent
	eval $inlibc

	: see if endpwent exists
	set endpwent d_endpwent
	eval $inlibc

d10389 1
a10389 1
*)	# Assume all is lost as far as the d_*pw* go.
a10390 3
	set d_setpwent; eval $setvar
	set d_getpwent; eval $setvar
	set d_endpwent; eval $setvar
d10722 1
a10722 1
$rm -f try try.c
d10763 1
d10816 1
a10816 1
	also='also '
d10829 1
a10831 1
#include "try.h"
d10873 1
a10873 1
        echo "You can ${also}use struct semid_ds* for semctl IPC_STAT." >&4
d10901 4
d10937 4
d10969 4
d11085 1
a11085 1
	echo "But your $osname does not have the shm*(2) configured." >&4
d11122 4
d11187 3
a11189 54
socketlib=''
sockethdr=''
: see whether socket exists
echo " "
$echo $n "Hmm... $c" >&4
if set socket val -f d_socket; eval $csym; $val; then
	echo "Looks like you have Berkeley networking support." >&4
	d_socket="$define"
	if set setsockopt val -f; eval $csym; $val; then
		d_oldsock="$undef"
	else
		echo "...but it uses the old 4.1c interface, rather than 4.2" >&4
		d_oldsock="$define"
	fi
else
	if $contains socklib libc.list >/dev/null 2>&1; then
		echo "Looks like you have Berkeley networking support." >&4
		d_socket="$define"
		: we will have to assume that it supports the 4.2 BSD interface
		d_oldsock="$undef"
	else
		echo "You don't have Berkeley networking in libc$_a..." >&4
		for net in net socket
		do
			if test -f /usr/lib/lib$net$_a; then
				( ($nm $nm_opt /usr/lib/lib$net$_a | eval $nm_extract) ||  \
				$ar t /usr/lib/lib$net$_a) 2>/dev/null >> libc.list
				if $contains socket libc.list >/dev/null 2>&1; then
					d_socket="$define"
					case "$net" in
					net)
						echo "...but the Wollongong group seems to have hacked it in." >&4
						socketlib="-lnet"
						sockethdr="-I/usr/netinclude"
						;;
					esac
					echo "Found Berkeley sockets interface in lib$net." >& 4 
					if $contains setsockopt libc.list >/dev/null 2>&1; then
						d_oldsock="$undef"
					else
						echo "...using the old 4.1c interface, rather than 4.2" >&4
						d_oldsock="$define"
					fi
					break
				fi
			fi
		done
		if test "X$d_socket" != "X$define"; then
			echo "or anywhere else I see." >&4
			d_socket="$undef"
			d_oldsock="$undef"
		fi
	fi
fi
a11190 3
: see if socketpair exists
set socketpair d_sockpair
eval $inlibc
d11194 1
d11198 40
d11240 1
a11240 1
if $contains '_IO_fpos_t' `./findhdr stdio.h` >/dev/null 2>&1 ; then
d11365 35
d11432 10
a11441 10
	echo 'strerror() found.' >&4
	d_strerror="$define"
	d_strerrm='strerror(e)'
	if set sys_errlist val -a d_syserrlst; eval $csym; $val; then	
	    echo "(You also have sys_errlist[], so we could roll our own strerror.)" 
	    d_syserrlst="$define"
	else
	    echo "(Since you don't have sys_errlist[], sterror() is welcome.)"
	    d_syserrlst="$undef"
	fi
d11443 11
a11453 11
	$contains '#[ 	]*define.*strerror' "$xxx" >/dev/null 2>&1; then
	echo 'strerror() found in string header.' >&4
	d_strerror="$define"
	d_strerrm='strerror(e)'
	if set sys_errlist val -a d_syserrlst; eval $csym; $val; then	
	echo "(Most probably, strerror() uses sys_errlist[] for descriptions.)"
	    d_syserrlst="$define"
	else
	    echo "(You don't appear to have any sys_errlist[], how can this be?)"
	d_syserrlst="$undef"
	fi
d11455 4
a11458 4
echo "strerror() not found, but you have sys_errlist[] so we'll use that." >&4
	d_strerror="$undef"
	d_syserrlst="$define"
	d_strerrm='((e)<0||(e)>=sys_nerr?"unknown":sys_errlist[e])'
d11460 4
a11463 4
	echo 'strerror() and sys_errlist[] NOT found.' >&4
	d_strerror="$undef"
	d_syserrlst="$undef"
	d_strerrm='"unknown"'
d11475 56
d11535 51
d11614 4
a11617 55
: define an is-a-typedef? function
typedef='type=$1; var=$2; def=$3; shift; shift; shift; inclist=$@@;
case "$inclist" in
"") inclist="sys/types.h";;
esac;
eval "varval=\$$var";
case "$varval" in
"")
	$rm -f temp.c;
	for inc in $inclist; do
		echo "#include <$inc>" >>temp.c;
	done;
	echo "#ifdef $type" >> temp.c;
	echo "printf(\"We have $type\");" >> temp.c;
	echo "#endif" >> temp.c;
	$cppstdin $cppflags $cppminus < temp.c >temp.E 2>/dev/null;
	if $contains $type temp.E >/dev/null 2>&1; then
		eval "$var=\$type";
	else
		eval "$var=\$def";
	fi;
	$rm -f temp.?;;
*) eval "$var=\$varval";;
esac'

: define an is-a-typedef? function that prompts if the type is not available.
typedef_ask='type=$1; var=$2; def=$3; shift; shift; shift; inclist=$@@;
case "$inclist" in
"") inclist="sys/types.h";;
esac;
eval "varval=\$$var";
case "$varval" in
"")
	$rm -f temp.c;
	for inc in $inclist; do
		echo "#include <$inc>" >>temp.c;
	done;
	echo "#ifdef $type" >> temp.c;
	echo "printf(\"We have $type\");" >> temp.c;
	echo "#endif" >> temp.c;
	$cppstdin $cppflags $cppminus < temp.c >temp.E 2>/dev/null;
	echo " " ;
	echo "$rp" | $sed -e "s/What is/Looking for/" -e "s/?/./";
	if $contains $type temp.E >/dev/null 2>&1; then
		echo "$type found." >&4;
		eval "$var=\$type";
	else
		echo "$type NOT found." >&4;
		dflt="$def";
		. ./myread ;
		eval "$var=\$ans";
	fi;
	$rm -f temp.?;;
*) eval "$var=\$varval";;
esac'
d11661 3
a11663 36
: see how we will look up host name
echo " "
if false; then
	: dummy stub to allow use of elif
elif set uname val -f d_uname; eval $csym; $val; then
	if ./xenix; then
		$cat <<'EOM'
uname() was found, but you're running xenix, and older versions of xenix
have a broken uname(). If you don't really know whether your xenix is old
enough to have a broken system call, use the default answer.

EOM
		dflt=y
		case "$d_uname" in
		"$define") dflt=n;;
		esac
		rp='Is your uname() broken?'
		. ./myread
		case "$ans" in
		n*) d_uname="$define"; call=uname;;
		esac
	else
		echo 'uname() found.' >&4
		d_uname="$define"
		call=uname
	fi
fi
case "$d_gethname" in
'') d_gethname="$undef";;
esac
case "$d_uname" in
'') d_uname="$undef";;
esac
case "$d_phostname" in
'') d_phostname="$undef";;
esac
a11718 4
: see if sys/types.h has to be included
set sys/types.h i_systypes
eval $inhdr

d11831 11
d11844 25
a11868 3
case "$alignbytes" in
'') echo "Checking alignment constraints..." >&4
	$cat >try.c <<'EOCP'
d11871 2
a11872 2
	double bar;
} try;
d11875 2
a11876 1
	printf("%d\n", (char *)&try.bar - (char *)&try.foo);
d11879 15
a11893 9
	set try
	if eval $compile_ok; then
		dflt=`./try`
	else
		dflt='8'
		echo "(I can't seem to compile the test program...)"
	fi
	;;
*) dflt="$alignbytes"
d11896 4
a11899 4
rp="Doubles must be aligned on a how-many-byte boundary?"
. ./myread
alignbytes="$ans"
$rm -f try.c try
d11902 14
a11915 4
case "$byteorder" in
'')
	$cat <<'EOM'
  
d11919 3
a11921 2
machines may have weird orders like 3412.  A Cray will report 87654321. If
the test program works the default is probably right.
d11924 1
a11924 1
	$cat >try.c <<'EOCP'
d11944 9
a11952 9
	xxx_prompt=y
	set try
	if eval $compile && ./try > /dev/null; then
		dflt=`./try`
		case "$dflt" in
		[1-4][1-4][1-4][1-4]|12345678|87654321)
			echo "(The test program ran ok.)"
			echo "byteorder=$dflt"
			xxx_prompt=n
d11954 6
a11959 6
		????|????????) echo "(The test program ran ok.)" ;;
		*) echo "(The test program didn't run right for some reason.)" ;;
		esac
	else
		dflt='4321'
		cat <<'EOM'
d11962 10
a11971 8
	fi
	case "$xxx_prompt" in
	y)
		rp="What is the order of bytes in a long?"
		. ./myread
		byteorder="$ans"
		;;
	*)	byteorder=$dflt
d11974 1
d11977 1
a11977 1
$rm -f try.c try
d12067 1
a12067 1
	if eval $compile && ./try; then
d12270 158
a12427 1
: check for length of double
d12429 185
a12613 4
case "$doublesize" in
'')
	$echo $n "Checking to see how big your double precision numbers are...$c" >&4
	$cat >try.c <<'EOCP'
d12615 2
a12616 1
int main()
d12618 15
a12632 1
	printf("%d\n", sizeof(double));
d12635 54
a12688 4
	set try
	if eval $compile_ok; then
		doublesize=`./try`
		$echo " $doublesize bytes." >&4
d12690 1
a12690 5
		dflt='8'
		echo "(I can't seem to compile the test program.  Guessing...)"
		rp="What is the size of a double precision number (in bytes)?"
		. ./myread
		doublesize="$ans"
d12692 3
a12696 1
$rm -f try.c try
d12698 5
a12702 8
echo " "
echo "Determining whether or not we are on an EBCDIC system..." >&4
$cat >tebcdic.c <<EOM
int main()
{
  if ('M'==0xd4) return 0;
  return 1;
}
d12704 1
a12704 32
val=$undef
set tebcdic
if eval $compile_ok; then
	if ./tebcdic; then
		echo "You have EBCDIC." >&4
		val="$define"
	else
		echo "Nope, no EBCDIC.  Assuming ASCII or some ISO Latin." >&4
	fi
else
	echo "I'm unable to compile the test program." >&4
	echo "I'll assume ASCII or some ISO Latin." >&4
fi
$rm -f tebcdic.c tebcdic
set ebcdic
eval $setvar

: see what type file positions are declared as in the library
rp="What is the type for file position used by fsetpos()?"
set fpos_t fpostype long stdio.h sys/types.h
eval $typedef_ask

: get csh whereabouts
case "$csh" in
'csh') val="$undef" ;;
*) val="$define" ;;
esac
set d_csh
eval $setvar
: Respect a hint or command line value for full_csh.
case "$full_csh" in
'') full_csh=$csh ;;
d12706 1
d12708 1
a12708 4
: Store the full pathname to the sed program for use in the C program
full_sed=$sed

: Store the full pathname to the ar program for use in the Makefile.SH
d12714 3
d12737 303
a13039 1
	gidtype="$ans"
a13071 5
: see what type lseek is declared as in the kernel
rp="What is the type used for lseek's offset on this system?"
set off_t lseektype long stdio.h sys/types.h
eval $typedef_ask

d13300 9
d13313 1
a13313 1
	$echo $n "Checking to see how big your pointers are...$c" >&4
d13323 2
a13324 2
	printf("%d\n", sizeof(VOID_PTR));
	exit(0);
d13330 1
a13330 1
		$echo " $ptrsize bytes." >&4
a13341 49
: check for size of random number generator
echo " "
case "$randbits" in
'')
	echo "Checking to see how many bits your rand function produces..." >&4
	$cat >try.c <<EOCP
#$i_unistd I_UNISTD
#$i_stdlib I_STDLIB
#include <stdio.h>
#ifdef I_UNISTD
#  include <unistd.h>
#endif
#ifdef I_STDLIB
#  include <stdlib.h>
#endif
EOCP
	$cat >>try.c <<'EOCP'
int main()
{
	register int i;
	register unsigned long tmp;
	register unsigned long max = 0L;

	for (i = 1000; i; i--) {
		tmp = (unsigned long)rand();
		if (tmp > max) max = tmp;
	}
	for (i = 0; max; i++)
		max /= 2;
	printf("%d\n",i);
}
EOCP
	set try
	if eval $compile_ok; then
		dflt=`./try$_exe`
	else
		dflt='?'
		echo "(I can't seem to compile the test program...)"
	fi
	;;
*)
	dflt="$randbits"
	;;
esac
rp='How many bits does your rand() function produce?'
. ./myread
randbits="$ans"
$rm -f try.* try

a13384 162
: see if sys/select.h has to be included
set sys/select.h i_sysselct
eval $inhdr

: see if we should include time.h, sys/time.h, or both
echo " "
if test "X$timeincl" = X; then
    echo "Testing to see if we should include <time.h>, <sys/time.h> or both." >&4
    $echo $n "I'm now running the test program...$c"
    $cat >try.c <<'EOCP'
#include <sys/types.h>
#ifdef I_TIME
#include <time.h>
#endif
#ifdef I_SYSTIME
#ifdef SYSTIMEKERNEL
#define KERNEL
#endif
#include <sys/time.h>
#endif
#ifdef I_SYSSELECT
#include <sys/select.h>
#endif
int main()
{
	struct tm foo;
#ifdef S_TIMEVAL
	struct timeval bar;
#endif
#ifdef S_TIMEZONE
	struct timezone tzp;
#endif
	if (foo.tm_sec == foo.tm_sec)
		exit(0);
#ifdef S_TIMEVAL
	if (bar.tv_sec == bar.tv_sec)
		exit(0);
#endif
	exit(1);
}
EOCP
    flags=''
    for s_timezone in '-DS_TIMEZONE' ''; do
    sysselect=''
    for s_timeval in '-DS_TIMEVAL' ''; do
    for i_systimek in '' '-DSYSTIMEKERNEL'; do
    for i_time in '' '-DI_TIME'; do
    for i_systime in '-DI_SYSTIME' ''; do
	case "$flags" in
	'') $echo $n ".$c"
		set try $i_time $i_systime $i_systimek $sysselect $s_timeval $s_timezone
		if eval $compile; then
				set X $i_time $i_systime $i_systimek $sysselect $s_timeval
			shift
			flags="$*"
			echo " "
			$echo $n "Succeeded with $flags$c"
		fi
		;;
	esac
    done
    done
    done
    done
    done
    timeincl=''
    echo " "
    case "$flags" in
    *SYSTIMEKERNEL*) i_systimek="$define"
	timeincl=`./findhdr sys/time.h`
	echo "We'll include <sys/time.h> with KERNEL defined." >&4;;
    *) i_systimek="$undef";;
    esac
    case "$flags" in
    *I_TIME*) i_time="$define"
	timeincl=`./findhdr time.h`" $timeincl"
	echo "We'll include <time.h>." >&4;;
    *) i_time="$undef";;
    esac
    case "$flags" in
    *I_SYSTIME*) i_systime="$define"
	timeincl=`./findhdr sys/time.h`" $timeincl"
	echo "We'll include <sys/time.h>." >&4;;
    *) i_systime="$undef";;
    esac
    $rm -f try.c try
fi

: check for fd_set items
$cat <<EOM

Checking to see how well your C compiler handles fd_set and friends ...
EOM
$cat >fd_set.c <<EOCP
#$i_systime I_SYS_TIME
#$i_sysselct I_SYS_SELECT
#$d_socket HAS_SOCKET
#include <sys/types.h>
#ifdef HAS_SOCKET
#include <sys/socket.h> /* Might include <sys/bsdtypes.h> */
#endif
#ifdef I_SYS_TIME
#include <sys/time.h>
#endif
#ifdef I_SYS_SELECT
#include <sys/select.h>
#endif
int main() {
	fd_set fds;

#ifdef TRYBITS
	if(fds.fds_bits);
#endif

#if defined(FD_SET) && defined(FD_CLR) && defined(FD_ISSET) && defined(FD_ZERO)
	exit(0);
#else
	exit(1);
#endif
}
EOCP
set fd_set -DTRYBITS
if eval $compile; then
	d_fds_bits="$define"
	d_fd_set="$define"
	echo "Well, your system knows about the normal fd_set typedef..." >&4
	if ./fd_set; then
		echo "and you have the normal fd_set macros (just as I'd expect)." >&4
		d_fd_macros="$define"
	else
		$cat >&4 <<'EOM'
but not the normal fd_set macros!  Gaaack!  I'll have to cover for you.
EOM
		d_fd_macros="$undef"
	fi
else
	$cat <<'EOM'
Hmm, your compiler has some difficulty with fd_set.  Checking further...
EOM
	set fd_set
	if eval $compile; then
		d_fds_bits="$undef"
		d_fd_set="$define"
		echo "Well, your system has some sort of fd_set available..." >&4
		if ./fd_set; then
			echo "and you have the normal fd_set macros." >&4
			d_fd_macros="$define"
		else
			$cat <<'EOM'
but not the normal fd_set macros!  Gross!  More work for me...
EOM
			d_fd_macros="$undef"
		fi
	else
	echo "Well, you got zip.  That's OK, I can roll my own fd_set stuff." >&4
		d_fd_set="$undef"
		d_fds_bits="$undef"
		d_fd_macros="$undef"
	fi
fi
$rm -f fd_set*

d13389 1
d13403 1
a13403 1
			for nfd in 'int' 'size_t' 'unsigned' 'unsigned long'; do
d13464 4
d13535 2
d13538 6
a13543 1
xxx=`echo '#include <signal.h>' |
d13547 1
d13560 1
a13560 1
$1 ~ /^#define$/ && $2 ~ /^SIG[A-Z0-9]*$/ && $2 !~ /SIGARRAYSIZE/ && $3 !~ /void/ {
d13567 6
a13572 4
xxx="$xxx ABRT ALRM BUS CHLD CLD CONT DIL EMT FPE HUP ILL INT IO IOT KILL"
xxx="$xxx LOST PHONE PIPE POLL PROF PWR QUIT SEGV STKFLT STOP SYS TERM TRAP"
xxx="$xxx TSTP TTIN TTOU URG USR1 USR2 USR3 USR4 VTALRM"
xxx="$xxx WINCH WIND WINDOW XCPU XFSZ"
d13645 1
a13645 1
	printf "}\n";
a13661 1

d13664 7
a13670 8
    if (nsig == 0) { nsig = maxsig + 1 }
	for (n = 1; n < nsig; n++) {
		if (sig_name[n]) {
			printf("%s %d\n", sig_name[n], sig_num[n])
		}
		else {
			printf("NUM%d %d\n", n, n) 
		}
d13672 4
d13677 1
a13677 1
		printf("%s %d\n", dup_name[n], dup_num[n])
d13740 105
a13844 1
	0) set HUP INT QUIT ILL TRAP ABRT EMT FPE KILL BUS SEGV SYS PIPE ALRM TERM;;
a13845 2
	echo $@@ | $tr ' ' $trnl | \
		$awk '{ printf $1; printf " %d\n", ++s; }' >signal.lst
d13847 8
a13854 4
$rm -f signal.c signal$_exe signal$_o signal.nsg signal.ls1
EOS
chmod a+x signal_cmd
$eunicefix signal_cmd
d13856 29
a13884 22
: generate list of signal names
echo " "
case "$sig_name_init" in
'') doinit=yes ;;
*)  case "$sig_num_init" in
    ''|*,*) doinit=yes ;;
    esac ;;
esac
case "$doinit" in
yes)
	echo "Generating a list of signal names and numbers..." >&4
	. ./signal_cmd
	sig_name=`$awk '{printf "%s ", $1}' signal.lst`
	sig_name="ZERO $sig_name"
	sig_name_init=`$awk 'BEGIN { printf "\"ZERO\", " }
						{ printf "\"%s\", ", $1 }
						END { printf "0\n" }' signal.lst`
	sig_num=`$awk '{printf "%d ", $2}' signal.lst`
	sig_num="0 $sig_num"
	sig_num_init=`$awk 'BEGIN { printf "0, " }
					{ printf "%d, ", $2}
					END { printf "0\n"}' signal.lst`
a13886 17
echo "The following signals are available:"
echo " "
echo $sig_name | $awk \
'BEGIN { linelen = 0 }
{
	for (i = 1; i <= NF; i++) {
		name = "SIG" $i " "
		linelen = linelen + length(name)
		if (linelen > 70) {
			printf "\n"
			linelen = length(name)
		}
		printf "%s", name
	}
	printf "\n"
}'
$rm -f signal signal.c signal.awk signal.lst signal_cmd 
d13943 5
a13947 5
	echo 'time() found.' >&4
	val="$define"
	rp="What is the type returned by time() on this system?"
	set time_t timetype long stdio.h sys/types.h
	eval $typedef_ask
d13949 3
a13951 3
	echo 'time() not found, hope that will do.' >&4
	val="$undef"
	timetype='int';
d13981 106
d14170 2
a14171 2
: see if this is an grp system
set grp.h i_grp
d14174 3
a14176 5
case "$i_grp" in
$define)
	: see if setgrent exists
	set setgrent d_setgrent
	eval $inlibc
d14178 3
a14180 3
	: see if getgrent exists
	set getgrent d_getgrent
	eval $inlibc
d14182 7
a14188 6
	: see if endgrent exists
	set endgrent d_endgrent
	eval $inlibc

	xxx=`./findhdr grp.h`
	$cppstdin $cppflags $cppminus < $xxx >$$.h
a14189 7
	if $contains 'gr_passwd' $$.h >/dev/null 2>&1; then
		val="$define"
	else
		val="$undef"
	fi
	set d_grpasswd
	eval $setvar
a14190 10
	$rm -f $$.h
	;;
*)	# Assume all is lost as far as the d_*gr* go.
	val="$undef"; 
	set d_setgrent; eval $setvar
	set d_getgrent; eval $setvar
	set d_endgrent; eval $setvar
	set d_grpasswd; eval $setvar
	;;
esac
d14192 2
a14193 2
: see if locale.h is available
set locale.h i_locale
d14196 2
a14197 2
: see if this is a math.h system
set math.h i_math
d14249 8
a14256 1
: get C preprocessor symbols handy
d14258 70
a14327 3
$echo $n "Hmm... $c"
echo $al | $tr ' ' $trnl >Cppsym.know
$cat <<EOSS >Cppsym
d14329 13
a14341 41
case "\$1" in
-l) list=true
	shift
	;;
esac
unknown=''
case "\$list\$#" in
1|2)
	for sym do
		if $contains "^\$1$" Cppsym.true >/dev/null 2>&1; then
			exit 0
		elif $contains "^\$1$" Cppsym.know >/dev/null 2>&1; then
			:
		else
			unknown="\$unknown \$sym"
		fi
	done
	set X \$unknown
	shift
	;;
esac
case \$# in
0) exit 1;;
esac
echo \$* | $tr ' ' '$trnl' | $sed -e 's/\(.*\)/\\
#ifdef \1\\
exit 0; _ _ _ _\1\\	 \1\\
#endif\\
/' >Cppsym\$\$
echo "exit 1; _ _ _" >>Cppsym\$\$
$cppstdin $cppminus <Cppsym\$\$ | $grep '^exit [01]; _ _'  >Cppsym2\$\$
case "\$list" in
true) $awk 'NF > 5 {print substr(\$6,2,100)}' <Cppsym2\$\$ ;;
*)
	sh Cppsym2\$\$
	status=\$?
	;;
esac
$rm -f Cppsym\$\$ Cppsym2\$\$
exit \$status
EOSS
d14344 27
a14370 2
./Cppsym -l $al | $sort | $grep -v '^$' >Cppsym.true

d14390 1
a14390 1
unset postprocess_cc_v
d14402 2
a14403 1
$awk '{ print $0"=1" }' Cppsym.true >ccsym.true
d14409 1
a14409 1
	echo "Your C compiler doesn't seem to define any symbol!" >&4
d14411 1
a14411 1
	echo "However, your C preprocessor defines the following ones:"
a14422 1
		$test "$silent" || sleep 1
d14425 1
a14431 1
		$test "$silent" || sleep 1
d14434 1
a14440 1
		$test "$silent" || sleep 1
d14443 1
d14503 8
d14613 8
d14642 10
d14656 12
d14672 5
d14681 4
a14725 2
tdir=`pwd`
cd $rsrc/ext
d14734 29
a14762 24
for xxx in * ; do
	case "$xxx" in
	DynaLoader|dynaload) ;;
	*)	if $test -f $xxx/$xxx.xs; then
			known_extensions="$known_extensions $xxx"
		elif $test -f $xxx/Makefile.PL; then
			nonxs_extensions="$nonxs_extensions $xxx"
		else
			if $test -d $xxx; then
				# Look for nested extensions, eg. Devel/Dprof.
				cd $xxx
				for yyy in * ; do
				if $test -f $yyy/$yyy.xs; then
					known_extensions="$known_extensions $xxx/$yyy"
				elif $test -f $yyy/Makefile.PL; then
					nonxs_extensions="$nonxs_extensions $xxx/$yyy"
				fi
				done
				cd ..
			fi
		fi 
		;;
	esac
done
d14787 10
a14796 1
		$define) avail_ext="$avail_ext $xxx" ;;
d14801 10
a14810 1
		*"${define}"*) avail_ext="$avail_ext $xxx" ;;
d15017 2
a15018 3
		if test X$file != Xln -a X$file != Xar -o X$osname != Xos2; then
			eval $file="\$file"
		fi
d15059 4
a15062 1
apiversion='$apiversion'
d15066 1
d15073 1
d15089 1
d15101 1
d15108 1
a15108 1
cppccsymbols='$cppccsymbols'
d15112 12
d15125 1
d15128 2
d15133 1
d15156 1
d15158 1
d15165 1
d15179 3
a15183 1
d_statfsflags='$d_statfsflags'
d15185 1
a15185 2
d_getmntent='$d_getmntent'
d_hasmntopt='$d_hasmntopt'
d15187 2
d15197 2
d15217 2
d15222 1
d15224 1
d15227 1
d15231 1
d15237 1
d15239 1
d15243 1
d15249 1
d15251 2
d15254 2
d15257 5
d15266 2
d15270 3
a15282 1
d_pthreads_created_joinable='$d_pthreads_created_joinable'
d15289 1
d15291 2
a15292 1
d_pwpasswd='$d_pwpasswd'
d15302 1
d15333 1
d15345 1
d15347 1
d15349 3
d15354 1
d15364 2
d15367 2
d15380 1
d15388 4
d15411 1
d15422 2
d15427 1
d15434 3
d15448 8
d15467 3
d15472 1
a15473 1
i_machcthreads='$i_machcthreads'
d15480 1
d15482 2
a15484 1
i_pthread='$i_pthread'
d15488 2
d15494 2
d15501 3
d15508 1
d15512 1
d15518 1
d15520 2
d15527 1
d15534 2
d15542 2
d15547 1
d15549 1
d15551 3
d15555 3
d15564 1
d15571 4
d15589 1
a15604 1
mips='$mips'
d15607 1
d15611 1
d15627 2
d15631 1
d15641 1
d15649 1
d15658 2
d15661 2
d15665 1
d15669 13
d15685 1
d15696 1
d15704 2
d15707 1
d15709 3
d15719 1
d15735 1
d15751 11
d15765 4
d15770 5
d15782 1
d15784 1
d15788 14
d15806 1
d15816 2
a15817 2
awk '/^#define/ {printf "%s=%s\n",$2,$3}' $src/patchlevel.h >>config.sh
echo "CONFIG=true" >>config.sh
d15886 2
a15887 2
Now you need to generate make dependencies by running "make depend".
You might prefer to run it in background: "make depend > makedepend.out &"
d15893 1
a15893 1
	rp="Run make depend now?"
d15897 1
a15897 1
		make depend && echo "Now you must run a make."
d15900 1
a15900 1
		echo "You must run 'make depend' then 'make'."
d15905 1
a15905 1
	echo "Now you must run a make."
@


1.5
log
@perl5.005_03 (stock)
@
text
@d21 1
a21 1
# $Id: Head.U,v 3.0.1.9 1997/02/28 15:02:09 ram Exp $
d2527 1
a2527 1
if $afs; then
@


1.4
log
@perl 5.004_04
@
text
@d17 2
a18 2
# comp.sources.misc so you may fetch it yourself from your nearest
# archive site. Check with Archie if you don't know where that can be.)
d21 1
a21 1
# $Id: Head.U,v 3.0.1.8 1995/07/25 13:40:02 ram Exp $
d23 2
a24 1
# Generated on Sat Feb  1 00:26:40 EST 1997 [metaconfig 3.0 PL60]
d59 1
a59 1
: Proper PATH separator
d62 8
a69 4
if test -d c:/. -a -n "$OS2_SHELL"; then
	p_=\;
	PATH=`cmd /c "echo %PATH%" | tr '\\\\' / `
	OS2_SHELL=`cmd /c "echo %OS2_SHELL%" | tr '\\\\' / | tr '[A-Z]' '[a-z]'`
d93 6
a98 14
: This should not matter in scripts, but apparently it does, sometimes
case "$CDPATH" in
'')	;;
*)	CDPATH='' ;;
esac

: Sanity checks
# WRONG: This makes it impossible to compile perl non-interactively
#if test ! -t 0; then
#	echo "Say 'sh $me', not 'sh <$me'"
#	exit 1
#fi

: Test and see if we are running under ksh, either blatantly or in disguise.
d100 9
a108 10
    : running under ksh.  Is this a good thing?
    if test -d /usr/lpp -a -f /usr/bin/bsh -a -f /usr/bin/uname ; then
        if test X`/usr/bin/uname -v` = X4 ; then
            : on AIX 4, /bin/sh is really ksh, and it causes us problems.
            : Avoid it
		cat <<'EOM'
(Feeding myself to /usr/bin/bsh to avoid AIX 4's /bin/sh.)
EOM
		unset ENV
            exec /usr/bin/bsh $0 "$@@"
d110 16
a125 3
    else
        if test ! -f /hp-ux ; then
	: Warn them if they use ksh on other systems
d128 1
a128 2
especially on older exotic systems.  If yours does, try the Bourne 
shell instead.)
d130 11
a140 14
		unset ENV
        fi
    fi
else
    : Not running under ksh.  Maybe we should be?
    : On HP-UX, large Configure scripts may exercise a bug in /bin/sh
    if test -f /hp-ux -a -f /bin/ksh; then
        cat <<'EOM'
(Feeding myself to ksh to avoid nasty sh bug in "here document" expansion.)
EOM
        unset ENV
        exec /bin/ksh $0 "$@@"
    fi
fi
d142 10
d159 1
d168 2
a190 1
gcc=''
d204 1
d208 1
d226 1
d253 3
a255 1
ar=''
d264 1
a274 2
bincompat3=''
d_bincompat3=''
d321 4
d336 8
d348 2
a349 1
d_setgrps=''
d355 1
d357 5
d368 7
d380 1
d384 4
d412 5
d434 2
d438 2
a441 1
d_bsdpgrp=''
d451 1
d453 1
d478 1
d505 3
d526 2
d535 1
d547 4
d558 1
d567 2
d570 3
d621 1
a624 1
make=''
d656 4
a662 3
d_oldarchlib=''
oldarchlib=''
oldarchlibexp=''
d668 1
d671 1
d674 1
d681 1
d686 1
d690 1
d692 1
d704 1
d710 1
d717 2
d732 6
d758 1
a758 1
al="$al _AIX _AIX32 _AIX370 _AM29000 _COFF _CRAY _CX_UX _EPI"
a811 1
groupstype=''
a812 18
: default library list
libswanted=''
: set useposix=false in your hint file to disable the POSIX extension.
useposix=true
: set useopcode=false in your hint file to disable the Opcode extension.
useopcode=true
: Define several unixisms.  These can be used in hint files.
exe_ext='' 
: Extra object files, if any, needed on this platform.
archobjs=''
: Possible local include directories to search.
: Set locincpth to "" in a hint file to defeat local include searches.
locincpth="/usr/local/include /opt/local/include /usr/gnu/include"
locincpth="$locincpth /opt/gnu/include /usr/GNU/include /opt/GNU/include"
:
: no include file wanted by default
inclwanted=''

d821 1
a821 1
glibpth="/shlib /usr/shlib /usr/lib/pa1.1 /usr/lib/large"
d831 17
d851 5
d857 2
a858 1
libswanted='sfio net socket inet nsl nm ndbm gdbm dbm db malloc dl'
a870 2
	: SYSTYPE is for some older MIPS systems. 
	: I do not know if it is still needed.
a887 1
				echo "Your Bourne shell appears to be in $sh."
a890 1
				echo "Hmm.  Your Bourne shell appears to be in $sh."
d901 1
d903 1
a903 2
Please contact me (Chip Salzenberg) at chip@@perl.com and 
we'll try to straigten this all out.
a912 1
	echo " "
a928 2
			echo "Okay, let's see if #! works on this system..."
			echo "It's just a comment."
d933 1
d963 2
a964 2
	echo "Hmm.  '$startsh' didn't work."
	echo "You may have to fix up the shell scripts to make sure sh runs them."
d968 15
a982 40
: script used to extract .SH files with variable substitutions
cat >extract <<EOS
$startsh
EOS
cat >>extract <<'EOS'
CONFIG=true
echo "Doing variable substitutions on .SH files..."
if test -f MANIFEST; then
	shlist=`awk '{print $1}' <MANIFEST | grep '\.SH'`
	: Pick up possible extension manifests.
	for dir in ext/* ; do
		if test -f $dir/MANIFEST; then
			xxx=`awk '{print $1}' < $dir/MANIFEST | 
				sed -n "/\.SH$/ s@@^@@$dir/@@p"`
			shlist="$shlist $xxx"
		fi
	done
	set x $shlist
else
	echo "(Looking for .SH files under the current directory.)"
	set x `find . -name "*.SH" -print`
fi
shift
case $# in
0) set x *.SH; shift;;
esac
if test ! -f $1; then
	shift
fi
for file in $*; do
	case "$file" in
	*/*)
		dir=`expr X$file : 'X\(.*\)/'`
		file=`expr X$file : 'X.*/\(.*\)'`
		(cd $dir && . ./$file)
		;;
	*)
		. ./$file
		;;
	esac
a983 7
if test -f config_h.SH; then
	if test ! -f config.h; then
	: oops, they left it out of MANIFEST, probably, so do it anyway.
	. ./config_h.SH
	fi
fi
EOS
a1047 1

d1053 1
d1072 1
a1072 1
	-s) shift; silent=true;;
d1076 1
a1076 1
	-S) shift; extractsh=true;;
d1102 1
a1102 1
	-V) echo "$me generated by metaconfig 3.0 PL60." >&2
d1137 11
a1156 20
case "$extractsh" in
true)
	case "$config_sh" in
	'') config_sh='config.sh'; config='./config.sh';;
	/*) config="$config_sh";;
	*) config="./$config_sh";;
	esac
	echo " "
	echo "Fetching answers from $config_sh..."
	cd ..
	. $config
	test "$override" && . ./optdef.sh
	echo " "
	. ./UU/extract
	rm -rf UU
	echo "Done."
	exit 0
	;;
esac

a1165 7
: Eunice requires " " instead of "", can you believe it
echo " "
: Here we go...
echo "Beginning of configuration questions for $package."

trap 'echo " "; test -d ../UU && rm -rf X $rmlist; exit 1' 1 2 3 15

d1187 146
d1354 1
a1354 1
if test -f ../MANIFEST; then
d1356 1
a1356 1
	awk '$1 !~ /PACK[A-Z]+/ {print $1}' ../MANIFEST | split -50
d1358 1
d1360 1
a1360 1
		(cd ..; ls `cat UU/$filelist` >/dev/null 2>>UU/missing)
d1371 1
a1371 1
and contact the author (chip@@perl.com).
d1387 1
a1387 1
		echo "Looks good..." >&4
d1394 24
d1464 1
a1464 1
	aok=''; eval ans="\\"\$answ\\"" && aok=y
d1466 12
a1494 12
		"!")
			sh 1>&4
			echo " "
			$myecho
			;;
		!*)
			set x \`expr "X\$ans" : "X!\(.*\)\$"\`
			shift
			sh 1>&4 -c "\$*"
			echo " "
			$myecho
			;;
d1501 1
a1501 1
			ans=\`echo $n "\$ans$c" | tr '\012' ' '\`
d1529 1
a1529 1
persist across sessions.
d1538 2
a1539 2
case "$user" in "")
	user=`whoami 2>&1` ;;
d1554 1
a1554 1
 
d1586 1
a1586 1
on the non-interactive behavior for the remainder of the execution.
d1596 1
a1596 1
have, let me (chip@@perl.com) know how I blew it.
d1645 6
a1650 2
		: on Eunice apparently
		echo \$dir/\$thing
d1671 1
d1682 1
d1693 1
d1698 1
d1706 13
a1718 1
	xxx=`./loc $file $file $pth`
d1739 13
a1751 1
	xxx=`./loc $file $file $pth`
a1835 2
up='[A-Z]'
low='[a-z]'
d1842 42
d1885 4
a1888 2
	echo "Your tr only supports [a-z] and [A-Z] to convert case." >&4
	;;
d1906 2
d1909 1
a1909 1
	./tr '[A-Z]' '[a-z]' | tr '\012' ' '`
d1956 2
a1957 1
First time through, eh?  I have some defaults handy for the following systems:
d1960 1
a1960 1
	cd hints; ls -C *.sh | $sed 's/\.sh/   /g' >&4
d1963 1
a1963 1
	: tests or hints, please send them to chip@@perl.com
d1978 2
a1979 2
	if $test -d /MachTen; then
		osname=machten 
d1981 1
a1981 1
			osvers=`/sbin/version | $awk '{print $2}' | 
d1984 1
a1984 1
			osvers=`/usr/etc/version | $awk '{print $2}' | 
d1990 6
d2010 5
a2014 1
			if $test -f /etc/kconfig; then
d2024 7
d2058 1
a2058 1
			osvers="$3"
d2064 1
a2064 6
			case "$3" in
			*.08.*) osvers=9 ;;
			*.09.*) osvers=9 ;;
			*.10.*) osvers=10 ;;
			*)	osvers="$3" ;;
			esac
d2078 3
a2080 1
		netbsd*) osname=netbsd 
d2125 1
a2125 1
					osvers=`echo "$3" | sed 's/^[vt]//'`
d2166 1
a2166 1
					if $test -f sco_$1_$2_$3.sh; then
d2168 1
a2168 1
					elif $test -f sco_$1_$2.sh; then
d2170 1
a2170 1
					elif $test -f sco_$1.sh; then
d2193 4
a2196 4
		if test -f /vmunix -a -f newsos4.sh; then
			(what /vmunix | ../UU/tr '[A-Z]' '[a-z]') > ../UU/kernel.what 2>&1
			if $contains news-os ../UU/kernel.what >/dev/null 2>&1; then
				osname=newsos4
d2198 1
a2198 1
			$rm -f ../UU/kernel.what
d2221 1
a2221 1
			*)  if $test -f $file.sh ; then
d2223 1
a2223 1
				elif $test -f $xfile.sh ; then
d2225 1
a2225 1
				elif $test -f $xxfile.sh ; then
d2227 1
a2227 1
				elif $test -f $xxxfile.sh ; then
d2229 1
a2229 1
				elif $test -f $xxxxfile.sh ; then
d2231 1
a2231 1
				elif $test -f "${osname}.sh" ; then
d2240 7
d2253 9
d2265 2
a2266 1
If your OS version has no hints, DO NOT give a wrong version -- say "none".
d2269 1
d2271 1
a2271 1
	. ../UU/myread
d2274 6
a2279 3
		if $test -f $file.sh; then
			. ./$file.sh
			$cat $file.sh >> ../UU/config.sh
d2287 1
a2287 1
			. ../UU/myread
d2289 3
a2291 3
				if $test -f "$file.sh"; then
					. ./$file.sh
					$cat $file.sh >> ../UU/config.sh
d2303 1
a2303 1
	if $test -f "$file.sh" ; then
a2307 2

	cd ..
a2379 2


d2383 2
a2384 1
case "$cf_by" in "")
d2386 2
a2387 2
	case "$cf_by" in "")
		cf_by=unknown ;;
d2391 82
d2501 13
a2513 1
archname="$ans"
a2514 1

d2527 1
a2527 1
if test $afs = "true"; then
d2596 1
a2596 1
	expr $fn : '.*(\(.*\)).*' | tr ',' '\012' >getfile.ok
d2849 40
d2890 3
a2892 2
: Usual default is /usr/local/lib/perl5.  Also allow things like 
: /opt/perl/lib, since /opt/perl/lib/perl5 would be redundant.
d2894 2
a2895 2
*perl*) set dflt privlib lib ;;
*)	 set dflt privlib lib/$package ;;
a2931 22
: set the base revision
baserev=5.0

: get the patchlevel
echo " "
echo "Getting the current patchlevel..." >&4
if $test -r ../patchlevel.h;then
	patchlevel=`awk '/PATCHLEVEL/ {print $3}' ../patchlevel.h`
	subversion=`awk '/SUBVERSION/ {print $3}' ../patchlevel.h`
else
	patchlevel=0
	subversion=0
fi
$echo $n "(You have $package" $c
case "$package" in
"*$baserev")	;;
*)		$echo $n " $baserev" $c ;;
esac
$echo $n " patchlevel $patchlevel" $c
test 0 -eq "$subversion" || $echo $n " subversion $subversion" $c
echo ".)"

d2941 5
d2947 1
a2947 16
'')
    case "$privlib" in
    '')	dflt=`./loc . "." $prefixexp/lib /usr/local/lib /usr/lib /lib`
	set dflt
	eval $prefixup
	;;
    *)	if test 0 -eq "$subversion"; then
	    version=`LC_ALL=C; export LC_ALL; \
		     echo $baserev $patchlevel | \
		     $awk '{ printf "%.3f\n", $1 + $2/1000.0 }'`
	else
	    version=`LC_ALL=C; export LC_ALL; \
		     echo $baserev $patchlevel $subversion | \
		     $awk '{ printf "%.5f\n", $1 + $2/1000.0 + $3/100000.0 }'`
	fi
	dflt="$privlib/$archname/$version"
d2949 1
a2949 4
    esac
    ;;
*)
    dflt="$archlib"
a2991 51
: set up the script used to warn in case of inconsistency
cat <<EOS >whoa
$startsh
EOS
cat <<'EOSC' >>whoa
dflt=y
echo " "
echo "*** WHOA THERE!!! ***" >&4
echo "    The $hint value for \$$var on this machine was \"$was\"!" >&4
rp="    Keep the $hint value?"
. ./myread
case "$ans" in
y) td=$was; tu=$was;;
esac
EOSC

: function used to set $1 to $val
setvar='var=$1; eval "was=\$$1"; td=$define; tu=$undef;
case "$val$was" in
$define$undef) . ./whoa; eval "$var=\$td";;
$undef$define) . ./whoa; eval "$var=\$tu";;
*) eval "$var=$val";;
esac'

$cat <<EOM

Perl 5.004 can be compiled for binary compatibility with 5.003.
If you decide to do so, you will be able to continue using any
extensions that were compiled for Perl 5.003.  However, binary
compatibility forces Perl to expose some of its internal symbols
in the same way that 5.003 did.  So you may have symbol conflicts
if you embed a binary-compatible Perl in other programs.

EOM
case "$d_bincompat3" in
"$undef") dflt=n ;;
*) dflt=y ;;
esac
rp='Binary compatibility with Perl 5.003?'
. ./myread
case "$ans" in
y*) val="$define" ;;
*)  val="$undef" ;;
esac
set d_bincompat3
eval $setvar
case "$d_bincompat3" in
"$define") bincompat3=y ;;
*) bincompat3=n ;;
esac

d3194 54
a3247 6
: determine where site specific libraries go.
set sitelib sitelib
eval $prefixit
case "$sitelib" in
'')	dflt="$privlib/site_perl" ;;
*)	dflt="$sitelib" ;;
d3250 8
d3259 1
a3259 4
The installation process will also create a directory for
site-specific extensions and modules.  Some users find it convenient
to place all local files in this directory rather than in the main
distribution directory.
d3262 3
a3264 10
fn=d~+
rp='Pathname for the site-specific library files?'
. ./getfile
if $test "X$sitelibexp" != "X$ansexp"; then
	installsitelib=''
fi
sitelib="$ans"
sitelibexp="$ansexp"
if $afs; then
	$cat <<EOM
d3266 5
a3270 213
Since you are running AFS, I need to distinguish the directory in
which site-specific files reside from the directory in which they are
installed (and from which they are presumably copied to the former
directory by occult means).

EOM
	case "$installsitelib" in
	'') dflt=`echo $sitelibexp | sed 's#^/afs/#/afs/.#'`;;
	*) dflt="$installsitelib";;
	esac
	fn=de~
	rp='Where will site-specific files be installed?'
	. ./getfile
	installsitelib="$ans"
else
	installsitelib="$sitelibexp"
fi

: determine where site specific architecture-dependent libraries go.
xxx=`echo $sitelib/$archname | sed 's!^$prefix!!'`
: xxx is usuually lib/site_perl/archname.
set sitearch sitearch none
eval $prefixit
case "$sitearch" in
'')	dflt="$sitelib/$archname" ;;
*)	dflt="$sitearch" ;;
esac
$cat <<EOM

The installation process will also create a directory for
architecture-dependent site-specific extensions and modules.

EOM
fn=nd~+
rp='Pathname for the site-specific architecture-dependent library files?'
. ./getfile
if $test "X$sitearchexp" != "X$ansexp"; then
	installsitearch=''
fi
sitearch="$ans"
sitearchexp="$ansexp"
if $afs; then
	$cat <<EOM

Since you are running AFS, I need to distinguish the directory in
which site-specific architecture-dependent library files reside from
the directory in which they are installed (and from which they are
presumably copied to the former directory by occult means).

EOM
	case "$installsitearch" in
	'') dflt=`echo $sitearchexp | sed 's#^/afs/#/afs/.#'`;;
	*) dflt="$installsitearch";;
	esac
	fn=de~
	rp='Where will site-specific architecture-dependent files be installed?'
	. ./getfile
	installsitearch="$ans"
else
	installsitearch="$sitearchexp"
fi

: determine where old public architecture dependent libraries might be
case "$oldarchlib" in
'')	case "$privlib" in
	'') ;;
	*)	dflt="$privlib/$archname"
		;;
	esac
	;;
*)	dflt="$oldarchlib" 
	;;
esac
if $test ! -d "$dflt/auto"; then
	dflt=none
fi
cat <<EOM

In 5.001, Perl stored architecture-dependent library files in a directory
with a name such as $privlib/$archname, 
and this directory contained files from the standard extensions and 
files from any additional extensions you might have added.  Starting 
with version 5.002, all the architecture-dependent standard extensions 
will go into a version-specific directory such as
$archlib, 
while locally-added extensions will go into
$sitearch.

If you wish Perl to continue to search the old architecture-dependent
library for your local extensions, give the path to that directory.
If you do not wish to use your old architecture-dependent library
files, answer 'none'.

EOM
fn=dn~
rp='Directory for your old 5.001 architecture-dependent libraries?'
. ./getfile
oldarchlib="$ans"
oldarchlibexp="$ansexp"
case "$oldarchlib" in
''|' ') val="$undef" ;;
*) val="$define" ;;
esac
set d_oldarchlib
eval $setvar

: determine where public executables go
echo " "
set dflt bin bin
eval $prefixit
fn=d~
rp='Pathname where the public executables will reside?'
. ./getfile
if $test "X$ansexp" != "X$binexp"; then
	installbin=''
fi
bin="$ans"
binexp="$ansexp"
if $afs; then
	$cat <<EOM

Since you are running AFS, I need to distinguish the directory in which
executables reside from the directory in which they are installed (and from
which they are presumably copied to the former directory by occult means).

EOM
	case "$installbin" in
	'') dflt=`echo $binexp | sed 's#^/afs/#/afs/.#'`;;
	*) dflt="$installbin";;
	esac
	fn=de~
	rp='Where will public executables be installed?'
	. ./getfile
	installbin="$ans"
else
	installbin="$binexp"
fi

: determine where manual pages are on this system
echo " "
case "$sysman" in
'') 
	syspath='/usr/man/man1 /usr/man/mann /usr/man/manl /usr/man/local/man1'
	syspath="$syspath /usr/man/u_man/man1 /usr/share/man/man1"
	syspath="$syspath /usr/catman/u_man/man1 /usr/man/l_man/man1"
	syspath="$syspath /usr/local/man/u_man/man1 /usr/local/man/l_man/man1"
	syspath="$syspath /usr/man/man.L /local/man/man1 /usr/local/man/man1"
	sysman=`./loc . /usr/man/man1 $syspath`
	;;
esac
if $test -d "$sysman"; then
	echo "System manual is in $sysman." >&4
else
	echo "Could not find manual pages in source form." >&4
fi

: see what memory models we can support
case "$models" in
'')
	$cat >pdp11.c <<'EOP'
main() {
#ifdef pdp11
	exit(0);
#else
	exit(1);
#endif
}
EOP
	(cc -o pdp11 pdp11.c) >/dev/null 2>&1
	if $test -f pdp11 && ./pdp11 2>/dev/null; then
		dflt='unsplit split'
	else
		tans=`./loc . X /lib/small /lib/large /usr/lib/small /usr/lib/large /lib/medium /usr/lib/medium /lib/huge`
		case "$tans" in
		X) dflt='none';;
		*) if $test -d /lib/small || $test -d /usr/lib/small; then
				dflt='small'
			else
				dflt=''
			fi
			if $test -d /lib/medium || $test -d /usr/lib/medium; then
				dflt="$dflt medium"
			fi
			if $test -d /lib/large || $test -d /usr/lib/large; then
				dflt="$dflt large"
			fi
			if $test -d /lib/huge || $test -d /usr/lib/huge; then
				dflt="$dflt huge"
			fi
		esac
	fi;;
*) dflt="$models";;
esac
$cat <<EOM
 
Some systems have different model sizes.  On most systems they are called
small, medium, large, and huge.  On the PDP11 they are called unsplit and
split.  If your system doesn't support different memory models, say "none".
If you wish to force everything to one memory model, say "none" here and
put the appropriate flags later when it asks you for other cc and ld flags.
Venix systems may wish to put "none" and let the compiler figure things out.
(In the following question multiple model names should be space separated.)

EOM
rp="Which memory models are supported?"
. ./myread
models="$ans"

case "$models" in
none)
	small=''
	medium=''
	large=''
d3356 1
d3379 3
a3381 2
	$cat <<'EOM'
On some systems the default C compiler will not resolve multiple global
d3389 3
a3391 1
	rp="What command will force resolution on this system?"
d3403 6
a3476 1
echo " "
d3483 1
d3492 18
a3509 11
: Set private lib path
case "$plibpth" in
'') if ./mips; then
		plibpth="$incpath/usr/lib /usr/local/lib /usr/ccs/lib"
	fi;;
esac
case "$libpth" in
' ') dlist='';;
'') dlist="$loclibpth $plibpth $glibpth";;
*) dlist="$libpth";;
esac
d3511 147
a3657 12
: Now check and see which directories actually exist, avoiding duplicates
libpth=''
for xxx in $dlist
do
    if $test -d $xxx; then
		case " $libpth " in
		*" $xxx "*) ;;
		*) libpth="$libpth $xxx";;
		esac
    fi
done
$cat <<'EOM'
a3679 19
: Define several unixisms. Hints files or command line options
: can be used to override them.
case "$ar" in
'') ar='ar';;
esac
case "$lib_ext" in
'') lib_ext='.a';;
esac
case "$obj_ext" in
'') obj_ext='.o';;
esac
case "$path_sep" in
'') path_sep=':';;
esac
: Which makefile gets called first.  This is used by make depend.
case "$firstmakefile" in
'') firstmakefile='makefile';;
esac

d3702 42
d3756 2
a3757 1
	if xxx=`./loc lib$thislib.$so.[0-9]'*' X $libpth`; $test -f "$xxx"; then
d3769 1
a3769 1
	elif xxx=`./loc lib$thislib$lib_ext X $libpth`; $test -f "$xxx"; then
d3775 1
a3775 1
	elif xxx=`./loc $thislib$lib_ext X $libpth`; $test -f "$xxx"; then
d3781 1
a3781 1
	elif xxx=`./loc lib${thislib}_s$lib_ext X $libpth`; $test -f "$xxx"; then
d3787 1
a3787 1
	elif xxx=`./loc Slib$thislib$lib_ext X $xlibpth`; $test -f "$xxx"; then
d3829 21
a3849 14
: see how we invoke the C preprocessor
echo " "
echo "Now, how can we feed standard input to your C preprocessor..." >&4
cat <<'EOT' >testcpp.c
#define ABC abc
#define XYZ xyz
ABC.XYZ
EOT
cd ..
echo 'cat >.$$.c; '"$cc"' -E ${1+"$@@"} .$$.c; rm .$$.c' >cppstdin
chmod 755 cppstdin
wrapper=`pwd`/cppstdin
ok='false'
cd UU
d3851 14
a3864 10
if $test "X$cppstdin" != "X" && \
	$cppstdin $cppminus <testcpp.c >testcpp.out 2>&1 && \
	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1
then
	echo "You used to use $cppstdin $cppminus so we'll use that again."
	case "$cpprun" in
	'') echo "But let's see if we can live without a wrapper..." ;;
	*)
		if $cpprun $cpplast <testcpp.c >testcpp.out 2>&1 && \
			$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1
d3866 1
a3866 4
			echo "(And we'll use $cpprun $cpplast to preprocess directly.)"
			ok='true'
		else
			echo "(However, $cpprun $cpplast does not work, let's see...)"
d3870 22
d3893 15
a3907 7
	case "$cppstdin" in
	'') ;;
	*)
		echo "Good old $cppstdin $cppminus does not seem to be of any help..."
		;;
	esac
fi
d3909 4
a3912 184
if $ok; then
	: nothing
elif echo 'Maybe "'"$cc"' -E" will work...'; \
	$cc -E <testcpp.c >testcpp.out 2>&1; \
	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
	echo "Yup, it does."
	x_cpp="$cc -E"
	x_minus='';
elif echo 'Nope...maybe "'"$cc"' -E -" will work...'; \
	$cc -E - <testcpp.c >testcpp.out 2>&1; \
	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
	echo "Yup, it does."
	x_cpp="$cc -E"
	x_minus='-';
elif echo 'Nope...maybe "'"$cc"' -P" will work...'; \
	$cc -P <testcpp.c >testcpp.out 2>&1; \
	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
	echo "Yipee, that works!"
	x_cpp="$cc -P"
	x_minus='';
elif echo 'Nope...maybe "'"$cc"' -P -" will work...'; \
	$cc -P - <testcpp.c >testcpp.out 2>&1; \
	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
	echo "At long last!"
	x_cpp="$cc -P"
	x_minus='-';
elif echo 'No such luck, maybe "'$cpp'" will work...'; \
	$cpp <testcpp.c >testcpp.out 2>&1; \
	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
	echo "It works!"
	x_cpp="$cpp"
	x_minus='';
elif echo 'Nixed again...maybe "'$cpp' -" will work...'; \
	$cpp - <testcpp.c >testcpp.out 2>&1; \
	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
	echo "Hooray, it works!  I was beginning to wonder."
	x_cpp="$cpp"
	x_minus='-';
elif echo 'Uh-uh.  Time to get fancy.  Trying a wrapper...'; \
	$wrapper <testcpp.c >testcpp.out 2>&1; \
	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
	x_cpp="$wrapper"
	x_minus=''
	echo "Eureka!"
else
	dflt=''
	rp="No dice.  I can't find a C preprocessor.  Name one:"
	. ./myread
	x_cpp="$ans"
	x_minus=''
	$x_cpp <testcpp.c >testcpp.out 2>&1
	if $contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
		echo "OK, that will do." >&4
	else
echo "Sorry, I can't get that to work.  Go find one and rerun Configure." >&4
		exit 1
	fi
fi

case "$ok" in
false)
	cppstdin="$x_cpp"
	cppminus="$x_minus"
	cpprun="$x_cpp"
	cpplast="$x_minus"
	set X $x_cpp
	shift
	case "$1" in
	"$cpp")
		echo "Perhaps can we force $cc -E using a wrapper..."
		if $wrapper <testcpp.c >testcpp.out 2>&1; \
			$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1
		then
			echo "Yup, we can."
			cppstdin="$wrapper"
			cppminus='';
		else
			echo "Nope, we'll have to live without it..."
		fi
		;;
	esac
	case "$cpprun" in
	"$wrapper")
		cpprun=''
		cpplast=''
		;;
	esac
	;;
esac

case "$cppstdin" in
"$wrapper") ;;
*) $rm -f $wrapper;;
esac
$rm -f testcpp.c testcpp.out

: determine optimize, if desired, or use for debug flag also
case "$optimize" in
' '|$undef) dflt='none';;
'') dflt='-O';;
*) dflt="$optimize";;
esac
$cat <<EOH

Some C compilers have problems with their optimizers.  By default, $package
compiles with the -O flag to use the optimizer.  Alternately, you might want
to use the symbolic debugger, which uses the -g flag (on traditional Unix
systems).  Either flag can be specified here.  To use neither flag, specify
the word "none".

EOH
rp="What optimizer/debugger flag should be used?"
. ./myread
optimize="$ans"
case "$optimize" in
'none') optimize=" ";;
esac

dflt=''
: We will not override a previous value, but we might want to
: augment a hint file
case "$hint" in
none|recommended)
	case "$gccversion" in
	1*) dflt='-fpcc-struct-return' ;;
	esac
	case "$optimize" in
	*-g*) dflt="$dflt -DDEBUGGING";;
	esac
	case "$gccversion" in
	2*) if test -d /etc/conf/kconfig.d &&
			$contains _POSIX_VERSION $usrinc/sys/unistd.h >/dev/null 2>&1
		then
			dflt="$dflt -posix"
		fi
		;;
	esac
	;;
esac

case "$mips_type" in
*BSD*|'') inclwanted="$locincpth $usrinc";;
*) inclwanted="$locincpth $inclwanted $usrinc/bsd";;
esac
for thisincl in $inclwanted; do
	if $test -d $thisincl; then
		if $test x$thisincl != x$usrinc; then
			case "$dflt" in
			*$thisincl*);;
			*) dflt="$dflt -I$thisincl";;
			esac
		fi
	fi
done

inctest='if $contains $2 $usrinc/$1 >/dev/null 2>&1; then
	xxx=true;
elif $contains $2 $usrinc/sys/$1 >/dev/null 2>&1; then
	xxx=true;
else
	xxx=false;
fi;
if $xxx; then
	case "$dflt" in
	*$2*);;
	*) dflt="$dflt -D$2";;
	esac;
fi'

if ./osf1; then
	set signal.h __LANGUAGE_C__; eval $inctest
else
	set signal.h LANGUAGE_C; eval $inctest
fi

case "$hint" in
none|recommended) dflt="$ccflags $dflt" ;;
*) dflt="$ccflags";;
esac

case "$dflt" in
''|' ') dflt=none;;
esac
$cat <<EOH
d3918 1
a3918 2
Your C compiler might also need additional flags, such as -D_POSIX_SOURCE,
-DHIDEMYMALLOC or -DCRIPPLED_CC.
d3964 1
a3964 1
			$cpprun -DLFRULB=bar $ftry $cpplast <cpp.c \
a3985 1

d4039 6
a4044 2
echo "Checking your choice of C compiler, libs, and flags for coherency..." >&4
set X $cc $optimize $ccflags $ldflags -o try try.c $libs
d4046 9
a4054 2
$cat >try.msg <<EOM
I've tried to compile and run a simple program with:
a4061 4
$cat > try.c <<'EOF'
#include <stdio.h>
main() { exit(0); }
EOF
d4063 1
a4063 1
if sh -c "$cc $optimize $ccflags -o try try.c $ldflags $libs" >>try.msg 2>&1; then
d4065 18
a4082 1
		dflt=n
d4085 1
a4085 1
		rp="You have a problem.  Shall I abort Configure (and explain the problem)"
d4090 1
a4090 1
	rp="You have a BIG problem.  Shall I abort Configure (and explain the problem)"
d4098 1
a4098 1
		echo "(The supplied flags might be incorrect with this C compiler.)"
d4105 273
a4377 4
	n*|N*) ;;
	*)	echo "Ok.  Stopping Configure." >&4
		exit 1
		;;
d4379 16
a4394 4
	;;
n) echo "OK, that should do.";;
esac
$rm -f try try.* core
d4399 2
a4400 2
int
main()
d4402 5
a4406 1
  return __libc_main();
d4409 2
a4410 2
if $cc $ccflags $ldflags -o gnulibc gnulibc.c $libs >/dev/null 2>&1 && \
    ./gnulibc | $contains '^GNU C Library' >/dev/null 2>&1; then
d4424 1
d4426 3
a4428 1
	$define)
d4431 13
a4443 2
	*)
		dflt=`egrep 'inlibc|csym' ../Configure | wc -l 2>/dev/null`
d4454 1
a4454 1
	true) dflt=y;;
d4461 9
a4469 7
I can use 'nm' to extract the symbols from your C libraries. This is a time
consuming task which may generate huge output on the disk (up to 3 megabytes)
but that should make the symbols extraction faster. The alternative is to skip
the 'nm' extraction part and to compile a small test program instead to
determine whether each symbol is present. If you have a fast C compiler and/or
if your 'nm' output cannot be parsed, this may be the best solution.
You shouldn't let me use 'nm' if you have the GNU C Library.
d4472 1
a4472 1
rp='Shall I use nm to extract C symbols from the libraries?'
d4475 1
a4475 1
n|N) usenm=false;;
d4504 1
a4504 1
		if nm --help | $grep 'dynamic' > /dev/null 2>&1; then
d4519 1
a4519 1
	*-lc_s*) libc=`./loc libc_s$lib_ext $libc $libpth`
d4537 1
a4537 1
		elif try=`./loc lib$thislib$lib_ext X $libpth`; $test -f "$try"; then
d4539 1
a4539 1
		elif try=`./loc $thislib$lib_ext X $libpth`; $test -f "$try"; then
d4545 1
a4545 1
		elif try=`./loc Slib$thislib$lib_ext X $xlibpth`; $test -f "$try"; then
d4566 1
a4566 1
				tr ' ' '\012' | egrep -v '\.[A-Za-z]*$' | $sed -e '
d4572 1
a4572 1
		 	sort | $sed -e 's/^.* //'`
d4576 2
a4577 2
  	$test -r $1 || set /lib/libsys_s$lib_ext
  	;;
d4595 2
a4596 2
elif $test -r $incpath/usr/lib/libc$lib_ext; then
	libc=$incpath/usr/lib/libc$lib_ext;
d4598 2
a4599 2
elif $test -r /lib/libc$lib_ext; then
	libc=/lib/libc$lib_ext;
d4602 1
a4602 1
	if tans=`./loc libc$lib_ext blurfl/dyick $libpth`; $test -r "$tans"; then
d4608 1
a4608 1
	elif tans=`./loc Slibc$lib_ext blurfl/dyick $xlibpth`; $test -r "$tans"; then
d4610 1
a4610 1
	elif tans=`./loc Mlibc$lib_ext blurfl/dyick $xlibpth`; $test -r "$tans"; then
d4613 1
a4613 1
		tans=`./loc Llibc$lib_ext blurfl/dyick $xlibpth`
d4632 1
a4632 1
	echo $libpth | tr ' ' '\012' | sort | uniq > libpath
d4650 1
a4650 1
echo $libc $libnames | tr ' ' '\012' | sort | uniq > libnames
d4661 4
a4664 7
: Linux may need the special Dynamic option to nm for shared libraries.
: In general, this is stored in the nm_so_opt variable.
: Unfortunately, that option may be fatal on non-shared libraries.
for nm_libs_ext in $*; do
    case $nm_libs_ext in
	*$so*)	nm $nm_so_opt $nm_opt $nm_libs_ext 2>/dev/null ;;
	*)		nm $nm_opt $nm_libs_ext 2>/dev/null ;;
d4666 1
a4666 1
done > libc.tmp
d4726 4
d4731 1
a4731 1
	nm -p $* 2>/dev/null >libc.tmp
d4740 1
a4740 1
		echo "nm didn't seem to work right. Trying ar instead..." >&4
d4742 18
a4759 3
		if ar t $libc > libc.tmp; then
			for thisname in $libnames; do
				ar t $thisname >>libc.tmp
d4761 1
a4761 1
			$sed -e 's/\.o$//' < libc.tmp > libc.list
d4764 1
a4764 1
			echo "ar didn't seem to work right." >&4
d4766 1
a4766 1
			if bld t $libc | $sed -e 's/.*\///' -e 's/\.o:.*$//' > libc.list
d4770 2
a4771 2
					$sed -e 's/.*\///' -e 's/\.o:.*$//' >>libc.list
					ar t $thisname >>libc.tmp
d4785 1
a4785 1
	$sed -n 's/^\([^ 	]*\)[ 	]*syscall$/\1/p' /lib/syscalls.exp >>libc.list
a4790 90
: determine filename position in cpp output
echo " "
echo "Computing filename position in cpp output for #include directives..." >&4
echo '#include <stdio.h>' > foo.c
$cat >fieldn <<EOF
$startsh
$cppstdin $cppflags $cppminus <foo.c 2>/dev/null | \
$grep '^[ 	]*#.*stdio\.h' | \
while read cline; do
	pos=1
	set \$cline
	while $test \$# -gt 0; do
		if $test -r \`echo \$1 | $tr -d '"'\`; then
			echo "\$pos"
			exit 0
		fi
		shift
		pos=\`expr \$pos + 1\`
	done
done
EOF
chmod +x fieldn
fieldn=`./fieldn`
$rm -f foo.c fieldn
case $fieldn in
'') pos='???';;
1) pos=first;;
2) pos=second;;
3) pos=third;;
*) pos="${fieldn}th";;
esac
echo "Your cpp writes the filename in the $pos field of the line."

: locate header file
$cat >findhdr <<EOF
$startsh
wanted=\$1
name=''
if test -f $usrinc/\$wanted; then
	echo "$usrinc/\$wanted"
	exit 0
fi
awkprg='{ print \$$fieldn }'
echo "#include <\$wanted>" > foo\$\$.c
$cppstdin $cppminus $cppflags < foo\$\$.c 2>/dev/null | \
$grep "^[ 	]*#.*\$wanted" | \
while read cline; do
	name=\`echo \$cline | $awk "\$awkprg" | $tr -d '"'\`
	case "\$name" in
	*/\$wanted) echo "\$name"; exit 0;;
	*) name='';;
	esac;
done;
$rm -f foo\$\$.c;
case "\$name" in
'') exit 1;;
esac
EOF
chmod +x findhdr

: define an alternate in-header-list? function
inhdr='echo " "; td=$define; tu=$undef; yyy=$@@;
cont=true; xxf="echo \"<\$1> found.\" >&4";
case $# in 2) xxnf="echo \"<\$1> NOT found.\" >&4";;
*) xxnf="echo \"<\$1> NOT found, ...\" >&4";;
esac;
case $# in 4) instead=instead;; *) instead="at last";; esac;
while $test "$cont"; do
	xxx=`./findhdr $1`
	var=$2; eval "was=\$$2";
	if $test "$xxx" && $test -r "$xxx";
	then eval $xxf;
	eval "case \"\$$var\" in $undef) . ./whoa; esac"; eval "$var=\$td";
		cont="";
	else eval $xxnf;
	eval "case \"\$$var\" in $define) . ./whoa; esac"; eval "$var=\$tu"; fi;
	set $yyy; shift; shift; yyy=$@@;
	case $# in 0) cont="";;
	2) xxf="echo \"but I found <\$1> $instead.\" >&4";
		xxnf="echo \"and I did not find <\$1> either.\" >&4";;
	*) xxf="echo \"but I found <\$1\> instead.\" >&4";
		xxnf="echo \"there is no <\$1>, ...\" >&4";;
	esac;
done;
while $test "$yyy";
do set $yyy; var=$2; eval "was=\$$2";
	eval "case \"\$$var\" in $define) . ./whoa; esac"; eval "$var=\$tu";
	set $yyy; shift; shift; yyy=$@@;
done'

d4816 2
a4817 2
		echo "main() { extern short $1$tdc; printf(\"%hd\", $1$tc); }" > t.c;
		if $cc $ccflags $ldflags -o t t.c $libs >/dev/null 2>&1;
d4886 1
a4886 1
	$test -f ../$dldir/dl_${osname}.xs && dflt='y'
d4896 1
a4896 1
		if $test -f ../$dldir/dl_${osname}.xs ; then
d4911 6
a4916 4
    cd ..; ls -C $dldir/dl*.xs; cd UU
    rp="Source file to use for dynamic loading"
    fn="fne"
    . ./getfile
d4921 1
a4921 1
    $cat << EOM
a4932 1
			svr4*|esix*)	dflt='-Kpic' ;;
d4934 1
a4934 4
			solaris) case "$ccflags" in
				*-DDEBUGGING*)	dflt='-KPIC' ;;
				*)		dflt='-Kpic' ;;
				esac ;;
d4937 5
a4941 4
		    esac ;;
		*)  case "$osname/$ccflags" in
			solaris/*-DDEBUGGING*)	dflt='-fPIC' ;;
			*)			dflt='-fpic' ;;
d4944 1
d4965 1
a4965 1
main() {
d5010 1
d5019 13
a5031 7
: Try to guess additional flags to pick up local libraries.
for thisflag in $ldflags; do
	case "$thisflag" in
	-L*)
		case " $dflt " in
		*" $thisflag "*) ;;
		*) dflt="$dflt $thisflag" ;;
d5033 4
a5036 1
		;;
a5037 5
done

case "$dflt" in
'') dflt='none' ;;
esac
d5061 1
d5087 1
a5087 1
		svr4*|dgux|dynixptx|esix|powerux)
a5099 4
		sunos)
			dflt=n
			also='Building a shared libperl will definitely not work on SunOS 4.'
			;;
d5113 1
a5113 1
libperl${lib_ext}, any static extensions (usually just DynaLoader), and
d5131 2
a5134 11
		$cat <<EOM >&4

To build perl, you must add the current working directory to your
$xxx environtment variable before running make.  You can do
this with
   $xxx=\`pwd\`; export $xxx
for Bourne-style shells, or
   setenv $xxx \`pwd\`
for Csh-style shells.  You *MUST* do this before running make.

EOM
d5196 1
a5196 1
	libperl="libperl${lib_ext}"
d5206 2
a5207 2
will not work in this version.  Let me (chip@@perl.com) know of any
problems this may cause.
d5252 3
a5305 8
	: If prefix contains 'perl' then we want to keep the man pages
	: under the prefix directory.  Otherwise, look in a variety of
	: other possible places.  This is debatable, but probably a
	: good compromise.  Well, apparently not.
	: Experience has shown people expect man1dir to be under prefix,
	: so we now always put it there.  Users who want other behavior
	: can answer interactively or use a command line option.
	: Does user have System V-style man paths.
a5433 1
You can use the supplied perldoc script instead.
a5443 1
You can use the supplied perldoc script instead.
d5451 1
a5451 5
: We dont use /usr/local/man/man3 because some man programs will
: only show the /usr/local/man/man3 contents, and not the system ones,
: thus man less will show the perl module less.pm, but not the system
: less command.  We might also conflict with TCL man pages.
: However, something like /opt/perl/man/man3 is fine.
d5454 1
a5454 1
	*perl*) dflt=`echo $man1dir | 
d5465 1
a5465 1
rp="Where do the $spackage library man pages (source) go?"
d5504 1
a5504 1
	rp="What suffix should be used for the $spackage library man pages?"
d5571 9
a5674 2
			: If we use NIS, try ypmatch.
			: Is there some reason why this was not done before?
a5679 2
			: Extract only the relevant hosts, reducing file size,
			: remove comments, insert trailing space for later use.
a5700 2
				: Why was there an Egrep here, when Sed works?
				: Look for either a search or a domain directive.
d5877 101
a5977 4
		rp="What path shall I use in \"eval 'exec'\"?"
		. ./myread
		perlpath="$ans"
		;;
d5979 7
a5985 6
	;;
esac
case "$startperl" in
*!*)	;;
*)	echo "I'll use $perlpath in \"eval 'exec'\"" ;;
esac
d5987 7
a5993 2
: determine where public executable scripts go
set scriptdir scriptdir
d5995 3
a5997 13
case "$scriptdir" in
'')
	dflt="$bin"
	: guess some guesses
	$test -d /usr/share/scripts && dflt=/usr/share/scripts
	$test -d /usr/share/bin && dflt=/usr/share/bin
	$test -d /usr/local/script && dflt=/usr/local/script
	$test -d $prefixexp/script && dflt=$prefixexp/script
	set dflt
	eval $prefixup
	;;
*)  dflt="$scriptdir"
	;;
d6000 4
a6003 6
 
Some installations have a separate directory just for executable scripts so
that they can mount it across multiple architectures but keep the scripts in
one spot.  You might, for example, have a subdirectory of /usr/share for this.
Or you might just lump your scripts in with all your other executables.
 
d6005 2
a6006 2
fn=d~
rp='Where do you keep publicly executable scripts?'
d6008 2
a6009 2
if $test "X$ansexp" != "X$scriptdirexp"; then
	installscript=''
d6011 2
a6012 2
scriptdir="$ans"
scriptdirexp="$ansexp"
d6016 4
a6019 3
Since you are running AFS, I need to distinguish the directory in which
scripts reside from the directory in which they are installed (and from
which they are presumably copied to the former directory by occult means).
d6022 3
a6024 3
	case "$installscript" in
	'') dflt=`echo $scriptdirexp | sed 's#^/afs/#/afs/.#'`;;
	*) dflt="$installscript";;
d6027 1
a6027 1
	rp='Where will public scripts be installed?'
d6029 1
a6029 1
	installscript="$ans"
d6031 1
a6031 1
	installscript="$scriptdirexp"
d6036 2
a6037 2
Previous version of $package used the standard IO mechanisms as defined in
<stdio.h>.  Versions 5.003_02 and later of perl allow alternate IO
d6039 4
a6042 4
the default and is the only supported mechanism.  This abstraction
layer can use AT&T's sfio (if you already have sfio installed) or
fall back on standard IO.  This PerlIO abstraction layer is
experimental and may cause problems with some extension modules.
d6065 4
a6068 3
echo " "
echo "Checking for an efficient way to convert floats to strings."
$cat >try.c <<'EOP'
d6096 1
a6096 2
int
main()
d6126 6
a6131 6
case "$d_Gconvert" in
gconvert*) xxx_list='gconvert gcvt sprintf' ;;
gcvt*) xxx_list='gcvt gconvert sprintf' ;;
sprintf*) xxx_list='sprintf gconvert gcvt' ;;
*) xxx_list='gconvert gcvt sprintf' ;;
esac
d6133 1
a6133 1
for xxx_convert in $xxx_list; do
d6135 3
a6137 3
	$rm -f try try.o
	if $cc $ccflags -DTRY_$xxx_convert $ldflags -o try \
		try.c $libs > /dev/null 2>&1 ; then
d6148 1
a6148 1
done
d6150 6
a6155 5
case "$xxx_convert" in
gconvert) d_Gconvert='gconvert((x),(n),(t),(b))' ;;
gcvt) d_Gconvert='gcvt((x),(n),(b))' ;;
*) d_Gconvert='sprintf((b),"%.*g",(n),(x))' ;;
esac
d6182 1
a6182 1
main() {
d6188 1
a6188 1
		$cc $cppflags -DI_SYS_FILE access.c -o access >/dev/null 2>&1 ; then
d6192 1
a6192 1
		$cc $cppflags -DI_FCNTL access.c -o access >/dev/null 2>&1 ; then
d6196 1
a6196 1
		$cc $cppflags -DI_UNISTD access.c -o access >/dev/null 2>&1 ; then
a6247 1
echo "Checking to see which flavor of getpgrp is in use . . . "
d6251 1
d6258 1
a6258 1
main()
a6309 1
echo "Checking to see which flavor of setpgrp is in use . . . "
d6313 1
d6320 1
a6320 1
main()
d6343 1
a6343 1
		echo "I can't seem to compile and run the test program."
a6365 1
d_bsdpgrp=$d_bsdsetpgrp
d6378 1
a6378 1
main()
a6382 1
	fflush(stdout);
d6386 3
a6388 8
#	If $libs contains -lsfio, and sfio is mis-configured, then it
#	sometimes (apparently) runs and exits with a 0 status, but with no
#	output!.  Thus we check with test -s whether we actually got any 
#	output.  I think it has to do with sfio's use of _exit vs. exit,
#	but I don't know for sure.  --Andy Dougherty  1/27/97.
	if $cc $optimize $ccflags $ldflags -o intsize intsize.c $libs >/dev/null 2>&1 && 
	./intsize > intsize.out 2>/dev/null && test -s intsize.out ; then
		eval `$cat intsize.out`
d6394 1
a6394 1

d6398 1
a6398 1

d6415 1
a6415 1
$rm -f intsize intsize.[co] intsize.out
d6425 1
a6425 1
	echo "You have void (*signal())() instead of int." >&4
d6430 3
d6445 6
a6450 3
		echo "As you already told me, signal handler returns void." >&4;;
	*)
		echo "As you already told me, signal handler returns int." >&4;;
d6464 1
a6464 1
if $test "$intsize" -eq 4; then
d6470 1
d6473 2
a6474 2
$signal_t blech() { exit(3); }
main()
d6477 1
a6477 1
	double f;
d6479 1
d6482 13
a6494 4
	f = (double) 0x7fffffff;
	f = 10 * f;
	i32  = ($xxx) f;

d6500 2
a6501 1
if $cc -o try $ccflags try.c >/dev/null 2>&1; then
d6524 1
d6527 2
a6528 2
$signal_t blech() { exit(7); }
$signal_t blech_in_list() { exit(4); }
d6532 1
a6532 1
main()
d6534 1
a6534 1
	double f = -123.;
d6539 11
d6561 2
a6562 1
	f = (double)0x40000000;
d6581 2
a6582 1
	f = 123.;
d6596 2
a6597 1
if $cc -o try $ccflags try.c >/dev/null 2>&1; then
d6624 1
a6624 1
main() { xxx("foo"); }
d6636 2
a6637 1
	if $cc $ccflags vprintf.c -o vprintf >/dev/null 2>&1 && ./vprintf; then
d6672 1
a6672 1
main()
d6695 1
a6695 1
	cryptlib=`./loc Slibcrypt$lib_ext "" $xlibpth`
d6697 1
a6697 1
		cryptlib=`./loc Mlibcrypt$lib_ext "" $xlibpth`
d6702 1
a6702 1
		cryptlib=`./loc Llibcrypt$lib_ext "" $xlibpth`
d6707 1
a6707 1
		cryptlib=`./loc libcrypt$lib_ext "" $libpth`
a6720 12
: get csh whereabouts
case "$csh" in
'csh')	val="$undef" ;;
*)	val="$define" ;;
esac
set d_csh
eval $setvar
: Respect a hint or command line value for full_csh.
case "$full_csh" in
'') full_csh=$csh ;;
esac

d6764 4
d6836 17
d6869 1
a6869 1
will need a different extension then shared libs. The default will probably
d6911 1
a6911 1
main()
d6945 3
a6947 3
		mv dyna${obj_ext} tmp-dyna${obj_ext} > /dev/null 2>&1 && 
		$ld $lddlflags -o dyna.$dlext tmp-dyna${obj_ext} > /dev/null 2>&1 && 
		$cc $ccflags $ldflags $cccdlflags $ccdlflags fred.c -o fred $libs > /dev/null 2>&1; then
d6973 16
d6999 1
a6999 1
main() {
d7010 1
a7010 1
        $cc $ccflags "-DI_SYS_FILE" -o open3 $ldflags open3.c $libs >/dev/null 2>&1 ; then
d7021 1
a7021 1
        $cc $ccflags "-DI_FCNTL" -o open3 $ldflags open3.c $libs >/dev/null 2>&1 ; then
d7055 1
a7055 1
main() {
d7071 2
a7072 1
	if $cc $ccflags $ldflags try.c -o try >/dev/null 2>&1; then
d7096 1
d7098 1
d7102 1
a7102 1
main()
d7152 2
a7153 1
	if $cc $ccflags $ldflags try.c -o try >/dev/null 2>&1; then
d7252 33
d7289 28
d7321 42
d7379 22
d7424 4
d7441 1
d7448 3
d7530 1
a7530 1
main() {
d7534 115
a7648 6
	else
		exit(1);
}
EOCP
if $cc $ccflags $ldflags -o isascii isascii.c $libs >/dev/null 2>&1 ; then
	echo "isascii() found." >&4
d7650 1
a7651 1
	echo "isascii() NOT found." >&4
d7653 1
d7655 2
a7656 1
set d_isascii
a7657 1
$rm -f isascii*
d7659 30
a7688 15
: see if killpg exists
set killpg d_killpg
eval $inlibc

: see if link exists
set link d_link
eval $inlibc

: see if localeconv exists
set localeconv d_locconv
eval $inlibc

: see if lockf exists
set lockf d_lockf
eval $inlibc
d7756 19
a7785 85
: see if this is a malloc.h system
set malloc.h i_malloc
eval $inhdr

: see if stdlib is available
set stdlib.h i_stdlib
eval $inhdr

: determine which malloc to compile in
echo " "
case "$usemymalloc" in
''|y*|true)	dflt='y' ;;
n*|false)	dflt='n' ;;
*)	dflt="$usemymalloc" ;;
esac
rp="Do you wish to attempt to use the malloc that comes with $package?"
. ./myread
usemymalloc="$ans"
case "$ans" in
y*|true)
	usemymalloc='y'
	mallocsrc='malloc.c'
	mallocobj='malloc.o'
	d_mymalloc="$define"
	case "$libs" in
	*-lmalloc*)
		: Remove malloc from list of libraries to use
		echo "Removing unneeded -lmalloc from library list" >&4
		set `echo X $libs | $sed -e 's/-lmalloc / /' -e 's/-lmalloc$//'`
		shift
		libs="$*"
		echo "libs = $libs" >&4
		;;
	esac
	;;
*)
	usemymalloc='n'
	mallocsrc=''
	mallocobj=''
	d_mymalloc="$undef"
	;;
esac

: compute the return types of malloc and free
echo " "
$cat >malloc.c <<END
#$i_malloc I_MALLOC
#$i_stdlib I_STDLIB
#include <stdio.h>
#include <sys/types.h>
#ifdef I_MALLOC
#include <malloc.h>
#endif
#ifdef I_STDLIB
#include <stdlib.h>
#endif
#ifdef TRY_MALLOC
void *malloc();
#endif
#ifdef TRY_FREE
void free();
#endif
END
case "$malloctype" in
'')
	if $cc $ccflags -c -DTRY_MALLOC malloc.c >/dev/null 2>&1; then
		malloctype='void *'
	else
		malloctype='char *'
	fi
	;;
esac
echo "Your system wants malloc to return '$malloctype', it would seem." >&4

case "$freetype" in
'')
	if $cc $ccflags -c -DTRY_FREE malloc.c >/dev/null 2>&1; then
		freetype='void'
	else
		freetype='int'
	fi
	;;
esac
echo "Your system uses $freetype free(), it would seem." >&4
$rm -f malloc.[co]
d7802 84
d7892 12
d7955 16
d7973 1
a7973 1
*)
d7975 3
d7984 2
d8041 1
a8041 1
	$cat >foo.c <<EOCP
d8047 1
a8047 1
	$cat >>foo.c <<'EOCP'
a8048 1

d8063 1
a8063 1
main()
a8070 2
/* Copy "abcde..." string to char abc[] so that gcc doesn't
   try to store the string in read-only memory.  */
d8088 3
a8090 3
	if $cc $optimize $ccflags $ldflags foo.c \
		    -o safebcpy $libs >/dev/null 2>&1; then
		if ./safebcpy 2>/dev/null; then
d8107 1
a8107 1
$rm -f foo.* safebcpy core
d8117 1
a8117 1
	$cat >foo.c <<EOCP
d8123 1
a8123 1
	$cat >>foo.c <<'EOCP'
a8124 1

d8139 1
a8139 1
main()
d8166 3
a8168 3
	if $cc $optimize $ccflags $ldflags foo.c \
		    -o safemcpy $libs >/dev/null 2>&1; then
		if ./safemcpy 2>/dev/null; then
d8185 1
a8185 1
$rm -f foo.* safemcpy core
d8194 2
a8195 2
	echo "Checking to see if your memcmp() can compare relative magnitude..." >&4
	$cat >foo.c <<EOCP
d8201 1
a8201 1
	$cat >>foo.c <<'EOCP'
a8202 1

d8217 1
a8217 1
main()
d8226 3
a8228 3
	if $cc $optimize $ccflags $ldflags foo.c \
		    -o sanemcmp $libs >/dev/null 2>&1; then
		if ./sanemcmp 2>/dev/null; then
d8239 1
a8239 1
$rm -f foo.* sanemcmp core
d8259 218
a8476 5
: see how much of the 'sem*(2)' library is present.
h_sem=true
echo " "
case "$d_semctl$d_semget$d_semop" in
*"$undef"*) h_sem=false;;
a8477 10
: we could also check for sys/ipc.h ...
if $h_sem && $test `./findhdr sys/sem.h`; then
	echo "You have the full sem*(2) library." >&4
	val="$define"
else
	echo "You don't have the full sem*(2) library." >&4
	val="$undef"
fi
set d_sem
eval $setvar
d8487 4
d8499 8
d8539 4
d8547 4
d8655 19
d8689 1
a8689 11
	val="$define"
else
	echo 'sigaction NOT found.' >&4
	val="$undef"
fi

$cat > set.c <<'EOP'
/* Solaris 2.5_x86 with SunWorks Pro C 3.0.1 doesn't have a complete
   sigaction structure if compiled with cc -Xc.  This compile test
   will fail then.  <doughera@@lafcol.lafayette.edu>
*/
d8693 1
a8693 1
main()
d8698 7
a8704 3

if $cc $ccflags $ldflags -o set set.c $libs >/dev/null 2>&1; then
	:
d8706 1
a8706 1
	echo "But you don't seem to have a useable struct sigaction." >&4
d8710 1
a8710 1
$rm -f set set.o set.c
d8716 1
a8716 1
	$cat >set.c <<'EOP'
d8720 1
a8720 1
main()
d8729 3
a8731 2
	if $cc $ccflags $ldflags -o set set.c $libs > /dev/null 2>&1 ; then
		if ./set >/dev/null 2>&1; then
d8755 1
a8755 1
$rm -f set.c set
d8778 23
a8800 14
		echo "You don't have Berkeley networking in libc$lib_ext..." >&4
		if test -f /usr/lib/libnet$lib_ext; then
			( (nm $nm_opt /usr/lib/libnet$lib_ext | eval $nm_extract) ||  \
			ar t /usr/lib/libnet$lib_ext) 2>/dev/null >> libc.list
			if $contains socket libc.list >/dev/null 2>&1; then
			echo "...but the Wollongong group seems to have hacked it in." >&4
				socketlib="-lnet"
				sockethdr="-I/usr/netinclude"
				d_socket="$define"
				if $contains setsockopt libc.list >/dev/null 2>&1; then
					d_oldsock="$undef"
				else
					echo "...using the old 4.1c interface, rather than 4.2" >&4
					d_oldsock="$define"
a8801 4
			else
				echo "or even in libnet$lib_ext, which is peculiar." >&4
				d_socket="$undef"
				d_oldsock="$undef"
d8803 2
a8804 1
		else
d8818 2
a8819 15
xxx=`./findhdr sys/stat.h`
if $contains 'st_blocks;' "$xxx" >/dev/null 2>&1 ; then
	if $contains 'st_blksize;' "$xxx" >/dev/null 2>&1 ; then
		echo "Your stat() knows about block sizes." >&4
		val="$define"
	else
		echo "Your stat() doesn't know about block sizes." >&4
		val="$undef"
	fi
else
	echo "Your stat() doesn't know about block sizes." >&4
	val="$undef"
fi
set d_statblks
eval $setvar
d8869 1
a8869 1
main() {
d8881 2
a8882 1
if $cc $ccflags $ldflags -o try try.c $libs >/dev/null 2>&1; then
a8911 1

d8920 1
a8920 1
main() {
d8931 2
a8932 1
	if $cc $ccflags $ldflags -o try try.c $libs > /dev/null 2>&1; then
d8956 1
a8956 1
main()
d8978 2
a8979 1
if set strerror val -f d_strerror; eval $csym; $val; then
d8984 2
a8985 2
		echo "(You also have sys_errlist[], so we could roll our own strerror.)" 
		d_syserrlst="$define"
d8987 2
a8988 2
	echo "(Since you don't have sys_errlist[], sterror() is welcome.)"
		d_syserrlst="$undef"
d8990 1
a8990 1
elif xxx=`./findhdr string.h`; test "$xxx" || xxx=`./findhdr strings.h`; \
d8996 2
a8997 2
		echo "(Most probably, strerror() uses sys_errlist[] for descriptions.)"
		d_syserrlst="$define"
d8999 2
a9000 2
		echo "(You don't appear to have any sys_errlist[], how can this be?)"
		d_syserrlst="$undef"
d9002 1
a9002 1
elif set sys_errlist val -a d_syserrlst; eval $csym; $val; then
d9007 1
a9007 1
else
d9012 1
d9067 3
d9080 31
d9124 1
d9126 1
a9126 6
	eval $typedef
	dflt="$clocktype"
	echo " "
	rp="What type is returned by times() on this system?"
	. ./myread
	clocktype="$ans"
d9209 10
a9218 1
	rp="Some systems have problems with vfork().  Do you want to use it?"
d9244 4
d9260 1
d9262 3
d9285 2
a9286 1
	if $cc $ccflags $ldflags -o closedir closedir.c $libs > /dev/null 2>&1; then
d9310 1
a9310 1
main()
d9369 1
a9369 1
main()
d9374 2
a9375 1
	if $cc $ccflags try.c -o try >/dev/null 2>&1; then
d9404 1
a9404 1
main()
d9423 2
a9424 1
	if $cc $ccflags try.c -o try >/dev/null 2>&1 && ./try > /dev/null; then
d9465 1
a9465 1
	echo "Oh!  Smells like ANSI's been here."
d9469 1
a9469 1
	echo "Ah, yes!  The good old days!"
d9488 1
a9488 1
	: Check db version.  We can not use version 2.
d9499 1
a9499 1
main()
d9501 30
a9530 5
#ifdef DB_VERSION_MAJOR	/* DB version >= 2: not yet. */
    printf("You have Berkeley DB Version %d.%d\n",
		DB_VERSION_MAJOR, DB_VERSION_MINOR);
    printf("Perl currently only supports up to version 1.86.\n");
    exit(2);
d9533 1
d9541 3
a9543 2
	if $cc $optimize $ccflags $ldflags -o try try.c $libs && ./try; then
		echo 'Looks OK.  (Perl supports up to version 1.86).' >&4
d9574 2
d9582 1
a9582 1
main()
d9586 1
d9597 1
a9606 1

d9619 2
d9627 1
a9627 1
main()
d9631 1
d9642 1
a9655 9
echo " "
$cat >&4 <<EOM
  Support flag bits are:
    1: basic void declarations.
    2: arrays of pointers to functions returning void.
    4: operations between pointers to and addresses of void functions.
    8: generic void pointers.
EOM
echo " "
d9680 1
a9680 1
main() { sub(); }
d9684 1
a9684 1
	echo "It appears to support void to the level $package wants ($defvoidused)."
a9727 1
: Only prompt user if support does not match the level we want
d9730 7
a9736 1
*)
d9745 53
d9799 1
d9801 13
a9813 6
eval $typedef
echo " "
dflt="$fpostype"
rp="What is the type for file position used by fsetpos()?"
. ./myread
fpostype="$ans"
d9818 6
d9825 2
d9840 7
a9846 4
echo " "
rp="What is the type for group ids returned by getgid()?"
. ./myread
gidtype="$ans"
d9856 1
d9866 1
a9866 1
What is the type of the second argument to getgroups() and setgroups()?
d9870 1
a9870 1
	rp='What type is the second argument to getgroups() and setgroups()?'
d9878 1
d9880 1
a9880 6
eval $typedef
echo " "
dflt="$lseektype"
rp="What type is lseek's offset on this system declared as?"
. ./myread
lseektype="$ans"
d9883 1
a9883 16
case "$make" in
'')
	make=`./loc make make $pth`
	case "$make" in
	/*)	echo make is in $make.  ;;
	?:[\\/]*)	echo make is in $make.  ;;
	*)	echo "I don't know where 'make' is, and my life depends on it." >&4
		echo "Go find a make program or fix your PATH setting!" >&4
		exit 1
		;;
	esac
	;;
*)	echo make is in $make. ;;
esac

$echo $n "Checking if your $make program sets \$(MAKE)... $c" >&4
d9888 1
a9888 1
X 	@@echo 'ac_maketemp="$(MAKE)"'
a9889 1
	: GNU make sometimes prints "make[1]: Entering...", which would confuse us.
d9891 1
a9891 1
	*ac_maketemp=*) make_set_make='#' ;;
d9896 184
a10079 15
esac
case "$make_set_make" in
'#')	echo "Yup, it does." >&4 ;;
*)	echo "Nope, it doesn't." >&4 ;;
esac

: see what type is used for mode_t
set mode_t modetype int stdio.h sys/types.h
eval $typedef
dflt="$modetype"
echo " "
rp="What type is used for file modes?"
. ./myread
modetype="$ans"

d10105 6
a10110 1
: Cruising for prototypes
d10112 15
a10126 4
echo "Checking out function prototypes..." >&4
$cat >prototype.c <<'EOCP'
main(int argc, char *argv[]) {
	exit(0);}
d10128 14
a10141 10
if $cc $ccflags -c prototype.c >prototype.out 2>&1 ; then
	echo "Your C compiler appears to support function prototypes."
	val="$define"
else
	echo "Your C compiler doesn't seem to understand function prototypes."
	val="$undef"
fi
set prototype
eval $setvar
$rm -f prototype*
d10160 1
a10160 1
main()
a10172 1
	fflush(stdout);
d10175 3
a10177 2
	if $cc $ccflags $ldflags -o try try.c $libs >/dev/null 2>&1 ; then
		dflt=`try`
d10190 1
a10190 1
$rm -f try.c try.o try
d10198 1
a10198 1
main() { printf("%d\n", bar1()); exit(0); }
d10203 2
a10204 2
ar rc bar$lib_ext bar2.o bar1.o >/dev/null 2>&1
if $cc $ccflags $ldflags -o foobar foo.o bar$lib_ext $libs > /dev/null 2>&1 &&
d10206 1
a10206 1
	echo "ar appears to generate random libraries itself."
d10209 2
a10210 2
elif ar ts bar$lib_ext >/dev/null 2>&1 &&
	$cc $ccflags $ldflags -o foobar foo.o bar$lib_ext $libs > /dev/null 2>&1 &&
d10212 1
a10212 1
		echo "a table of contents needs to be added with 'ar ts'."
d10214 1
a10214 1
		ranlib="ar ts"
d10241 4
a10244 3
echo "Testing to see if we should include <time.h>, <sys/time.h> or both." >&4
$echo $n "I'm now running the test program...$c"
$cat >try.c <<'EOCP'
d10258 1
a10258 1
main()
d10276 7
a10282 7
flags=''
for s_timezone in '-DS_TIMEZONE' ''; do
sysselect=''
for s_timeval in '-DS_TIMEVAL' ''; do
for i_systimek in '' '-DSYSTIMEKERNEL'; do
for i_time in '' '-DI_TIME'; do
for i_systime in '-DI_SYSTIME' ''; do
d10285 3
a10287 4
		if $cc $ccflags \
		$i_time $i_systime $i_systimek $sysselect $s_timeval $s_timezone \
		try.c -o try >/dev/null 2>&1 ; then
			set X $i_time $i_systime $i_systimek $sysselect $s_timeval
d10295 9
a10303 9
done
done
done
done
done
timeincl=''
echo " "
case "$flags" in
*SYSTIMEKERNEL*) i_systimek="$define"
d10306 4
a10309 4
*) i_systimek="$undef";;
esac
case "$flags" in
*I_TIME*) i_time="$define"
d10312 4
a10315 4
*) i_time="$undef";;
esac
case "$flags" in
*I_SYSTIME*) i_systime="$define"
d10318 4
a10321 3
*) i_systime="$undef";;
esac
$rm -f try.c try
d10342 1
a10342 1
main() {
d10356 2
a10357 1
if $cc $ccflags -DTRYBITS fd_set.c -o fd_set >fd_set.out 2>&1 ; then
d10374 2
a10375 1
	if $cc $ccflags fd_set.c -o fd_set >fd_set.out 2>&1 ; then
d10397 39
a10435 12

: check for type of arguments to select.  This will only really
: work if the system supports prototypes and provides one for
: select.
case "$d_select" in
$define)
	: Make initial guess
	case "$selecttype" in
	''|' ')
		case "$d_fd_set" in
		$define) xxx='fd_set *' ;;
		*) xxx='int *' ;;
d10437 1
d10439 2
a10440 1
	*) 	xxx="$selecttype" 
d10443 2
a10444 5
	: backup guess
	case "$xxx" in
	'fd_set *') yyy='int *' ;;
	'int *') yyy='fd_set *' ;;
	esac
d10446 5
a10450 1
	$cat <<EOM
d10452 1
a10452 1
Checking to see what type of arguments are expected by select().
d10454 3
a10456 1
	$cat >try.c <<EOCP
d10458 3
a10460 5
#$i_sysselct I_SYS_SELECT
#$d_socket HAS_SOCKET
#include <sys/types.h>
#ifdef HAS_SOCKET
#include <sys/socket.h> /* Might include <sys/bsdtypes.h> */
d10463 7
a10469 1
#include <sys/time.h>
d10471 1
d10475 29
a10503 9
main()
{
	int width;
	Select_fd_set_t readfds;
	Select_fd_set_t writefds;
	Select_fd_set_t exceptfds;
	struct timeval timeout;
	select(width, readfds, writefds, exceptfds, &timeout);
	exit(0);
d10506 31
a10536 15
	if $cc $ccflags -c -DSelect_fd_set_t="$xxx" try.c >/dev/null 2>&1 ; then
		selecttype="$xxx"
		echo "Your system uses $xxx for the arguments to select." >&4
	elif $cc $ccflags -c -DSelect_fd_set_t="$yyy" try.c >/dev/null 2>&1 ; then
		selecttype="$yyy"
		echo "Your system uses $yyy for the arguments to select." >&4
	else
		rp='What is the type for the 2nd, 3rd, and 4th arguments to select?'
		dflt="$xxx"
		. ./myread
		selecttype="$ans"
	fi
	$rm -f try.[co]
	;;
*)	selecttype='int *'
d10571 1
a10571 1
$cat > signal.c <<'EOP'
d10574 1
d10629 5
a10633 2
EOP
echo $xxx | $tr ' ' '\012' | $sort | $uniq | $awk '
d10641 1
d10678 50
a10727 3
$test -s signal.lst && exit 0
if $cc $ccflags $ldflags signal.c -o signal >/dev/null 2>&1; then
	./signal | $sort -n +1 | $uniq | $awk -f signal.awk >signal.lst
d10729 1
a10729 1
	echo "(I can't seem be able to compile the test program -- Guessing)"
d10731 1
a10731 1
	set X \`csh -f <signal\`
d10734 1
a10734 1
	case \$# in
d10737 2
a10738 2
	echo \$@@ | $tr ' ' '\012' | \
		$awk '{ printf \$1; printf " %d\n", ++s; }' >signal.lst
d10740 1
a10740 1
$rm -f signal.c signal signal.o
d10747 5
a10751 2
case "$sig_name" in
'')	sig_num='' ;;
d10753 2
a10754 5
case "$sig_num" in
'')	sig_name='' ;;
esac
case "$sig_name" in
'')
d10756 1
a10756 1
	./signal_cmd
d10759 3
d10764 3
a10786 9
: see what type is used for size_t
set size_t sizetype 'unsigned int' stdio.h sys/types.h
eval $typedef
dflt="$sizetype"
echo " "
rp="What type is used for the length parameter for string functions?"
. ./myread
sizetype="$ans"

d10796 1
a10796 1
main()
a10803 1
	fflush(stdout);
d10808 3
a10810 8
#	If $libs contains -lsfio, and sfio is mis-configured, then it
#	sometimes (apparently) runs and exits with a 0 status, but with no
#	output!.  Thus we check with test -s whether we actually got any 
#	output.  I think it has to do with sfio's use of _exit vs. exit,
#	but I don't know for sure.  --Andy Dougherty  1/27/97.
if $cc $optimize $ccflags $ldflags -o ssize ssize.c $libs > /dev/null 2>&1  &&
		./ssize > ssize.out 2>/dev/null && test -s ssize.out ; then
	ssizetype=`$cat ssize.out`
a10813 1

d10826 1
a10826 1
$rm -f ssize ssize.[co] ssize.out
d10840 2
a10841 1
if set time val -f d_time; eval $csym; $val; then
d10844 1
d10846 2
a10847 7
	eval $typedef
	dflt="$timetype"
	echo " "
	rp="What type is returned by time() on this system?"
	. ./myread
	timetype="$ans"
else
d10851 3
a10854 2
set d_time
eval $setvar
d10857 2
d10872 7
a10878 4
echo " "
rp="What is the type for user ids returned by getuid()?"
. ./myread
uidtype="$ans"
d10967 36
d11063 1
a11063 1
echo $al | $tr ' ' '\012' >Cppsym.know
d11090 1
a11090 1
echo \$* | $tr ' ' '\012' | $sed -e 's/\(.*\)/\\
d11112 4
d11121 1
a11121 1
for i in \`$cc -v -c tmp.c 2>&1\`
d11130 1
d11133 7
a11139 1
./ccsym | $sort | $uniq >ccsym.raw
a11146 1
symbols='symbols'
d11152 4
d11163 2
d11168 1
a11168 1
		echo "Your C pre-processor ${also}defines the following $symbols:"
d11172 2
d11177 1
a11177 1
		echo "Your C compiler ${also}defines the following cpp variables:"
d11181 2
d11296 1
a11296 1
$rm -f varargs.o
a11364 4
: see if this is a sys/param system
set sys/param.h i_sysparam
eval $inhdr

a11368 8
: see if sys/stat.h is available
set sys/stat.h i_sysstat
eval $inhdr

: see if sys/types.h has to be included
set sys/types.h i_systypes
eval $inhdr

d11418 2
a11419 1
cd ../ext
d11423 1
d11429 22
a11450 16
    case "$xxx" in
    DynaLoader) ;;
    *)	if $test -f $xxx/$xxx.xs; then
	    known_extensions="$known_extensions $xxx"
	else
	    if $test -d $xxx; then
		cd $xxx
		for yyy in * ; do
		    if $test -f $yyy/$yyy.xs; then
			known_extensions="$known_extensions $xxx/$yyy"
		    fi
		done
		cd ..
	    fi
	fi ;;
    esac
d11452 3
d11458 1
a11458 1
cd ../UU
d11463 50
a11512 32
    case "$xxx" in
    DB_File) case "$i_db" in 
	    $define) avail_ext="$avail_ext $xxx" ;;
	    esac
	    ;;
    GDBM_File) case "$i_gdbm" in 
	    $define) avail_ext="$avail_ext $xxx" ;;
	    esac
	    ;;
    NDBM_File) case "$i_ndbm" in 
	    $define) avail_ext="$avail_ext $xxx" ;;
	    esac
	    ;;
    ODBM_File) case "${i_dbm}${i_rpcsvcdbm}" in 
	    *"${define}"*) avail_ext="$avail_ext $xxx" ;;
	    esac
	    ;;
    POSIX) case "$useposix" in 
	    true|define|y) avail_ext="$avail_ext $xxx" ;;
	    esac
	    ;;
    Opcode) case "$useopcode" in 
	    true|define|y) avail_ext="$avail_ext $xxx" ;;
	    esac
	    ;;
    Socket) case "$d_socket" in 
	    $define) avail_ext="$avail_ext $xxx" ;;
	    esac
	    ;;
    *)      avail_ext="$avail_ext $xxx"
	    ;;
    esac
d11519 14
d11540 1
d11545 17
a11561 1
	*)	dflt="$dynamic_ext" ;;
d11605 1
d11610 17
a11626 1
	*)	dflt="$static_ext" ;;
d11628 1
a11628 1

d11641 1
a11641 1
set X $dynamic_ext $static_ext
d11688 3
a11690 1
		eval $file="\$file"
d11701 4
a11704 4
# This file was produced by running the Configure script.  It holds all
# the definitions figured out by Configure.  Should you modify any of
# these values, do not forget to propagate your changes by running
# "Configure -S"; or, equivalently, you may run each .SH file yourself.
d11707 2
d11710 2
a11711 2
# Configured by: $cf_by
# Target system: $myuname
d11724 3
d11729 1
d11731 1
a11740 1
bincompat3='$bincompat3'
d11752 1
d11772 2
a11782 1
d_bincompat3='$d_bincompat3'
a11784 1
d_bsdpgrp='$d_bsdpgrp'
d11806 6
d11826 5
d11832 1
d11834 2
a11835 1
d_setgrps='$d_setgrps'
d11838 1
d11840 7
d11852 6
d11860 1
d11866 1
d11870 2
d11890 1
a11890 1
d_oldarchlib='$d_oldarchlib'
d11899 2
d11906 1
d11908 1
d11917 1
d11922 2
d11928 3
d11933 2
d11939 1
d11946 1
d11948 1
d11990 1
d12009 1
d12012 1
d12025 1
a12027 1
gcc='$gcc'
d12040 1
d12054 1
d12057 1
d12059 1
d12063 1
d12076 1
d12083 1
d12099 1
d12110 1
d12132 2
d12165 5
d12172 1
a12175 2
oldarchlib='$oldarchlib'
oldarchlibexp='$oldarchlibexp'
d12190 1
d12199 1
d12209 1
d12220 1
d12222 1
d12239 1
d12248 1
d12257 1
d12263 1
d12276 1
d12280 1
d12288 3
d12292 2
a12293 2
$test -f patchlevel.h && \
awk '/^#define/ {printf "%s=%s\n",$2,$3}' patchlevel.h >>config.sh
d12387 16
@


1.3
log
@permit perl to build non-interactively. I hate making changes to stuff
like this, but the code as written is just plain wrong.  A few people
have been burned by this; klatte@@hrz.uni-kassel.de, pr#312
@
text
@d21 1
a21 1
# $Id: Configure,v 1.2 1996/09/06 01:33:53 dm Exp $
d23 1
a23 1
# Generated on Wed Feb 21 14:26:18 EST 1996 [metaconfig 3.0 PL60]
d61 1
a61 1
if test -d c:/.; then
d88 6
d101 7
a107 5
: On HP-UX, large Configure scripts may exercise a bug in /bin/sh
if test -f /hp-ux -a -f /bin/ksh; then
	if (PATH=.; alias -x) >/dev/null 2>&1; then
		: already under /bin/ksh
	else
d109 1
a109 1
(Feeding myself to ksh to avoid nasty sh bug in "here document" expansion.)
d112 1
a112 1
		exec /bin/ksh $0 "$@@"
d114 2
a115 1
else
a116 1
	(PATH=.; alias -x) >/dev/null 2>&1 && \
d119 12
a130 1
especially on exotic machines.  If yours does, try the Bourne shell instead.)
d132 3
d145 1
a146 1
usesafe=''
d175 1
a186 1
make=''
a198 1
sh=''
d216 1
d252 2
d311 2
d315 1
d322 1
d324 1
d328 1
d330 1
d369 1
d382 1
d392 2
d401 1
a402 4
d_sigaction=''
d_sigintrp=''
d_sigvec=''
d_sigvectr=''
d425 3
a455 1
d_shrplib=''
a458 1
shrpdir=''
d495 1
d509 1
d515 1
d525 1
d531 2
d534 3
d545 2
d589 1
d603 1
a620 1
subversion=''
d627 1
d721 2
a722 2
: set usesafe=false in your hint if you want to skip the Safe extension.
usesafe=true
d743 4
a746 3
glibpth="/lib/pa1.1 /usr/shlib /usr/lib/large /lib /usr/lib"
glibpth="$glibpth $xlibpth /lib/large /usr/lib/small /lib/small"
glibpth="$glibpth /usr/ccs/lib /usr/ucblib /usr/shlib"
d757 1
a757 1
libswanted='net socket inet nsl nm ndbm gdbm dbm db malloc dl'
d767 106
d874 4
a877 1
cat >extract <<'EOS'
d985 1
d987 3
d1050 1
a1050 1
Usage: $me [-dehrEKOSV] [-f config.sh] [-D symbol] [-D symbol=value]
d1177 1
a1177 1
and contact the author (doughera@@lafcol.lafayette.edu).
d1223 1
d1246 1
a1246 1
	aok=''; eval "ans=\"\$answ\"" && aok=y
d1319 4
a1322 1
user=`( (logname) 2>/dev/null || whoami) 2>&1`
d1368 1
a1368 1
on the non-interactive behaviour for the remaining of the execution.
d1378 1
a1378 1
have, let me (doughera@@lafcol.lafayette.edu) know how I blew it.
a1398 68
: see if sh knows # comments
echo " "
echo "Checking your sh to see if it knows about # comments..." >&4
if `sh -c '#' >/dev/null 2>&1`; then
	echo "Your sh handles # comments correctly."
	shsharp=true
	spitshell=cat
	echo " "
	echo "Okay, let's see if #! works on this system..."
	xcat=/bin/cat
	test -f $xcat || xcat=/usr/bin/cat
	echo "#!$xcat" >try
	$eunicefix try
	chmod +x try
	./try > today
	if test -s today; then
		echo "It does."
		sharpbang='#!'
	else
		echo "#! $xcat" > try
		$eunicefix try
		chmod +x try
		./try > today
		if test -s today; then
			echo "It does."
			sharpbang='#! '
		else
			echo "It's just a comment."
			sharpbang=': use '
		fi
	fi
else
	echo "Your sh doesn't grok # comments--I will strip them later on."
	shsharp=false
	cd ..
	echo "exec grep -v '^[ 	]*#'" >spitshell
	chmod +x spitshell
	$eunicefix spitshell
	spitshell=`pwd`/spitshell
	cd UU
	echo "I presume that if # doesn't work, #! won't work either!"
	sharpbang=': use '
fi
rm -f try today

: figure out how to guarantee sh startup
echo " "
echo "Checking out how to guarantee sh startup..." >&4
case "$SYSTYPE" in
*bsd*|sys5*) startsh=$sharpbang"/$SYSTYPE/bin/sh";;
*) startsh=$sharpbang'/bin/sh';;
esac
echo "Let's see if '$startsh' works..."
cat >try <<EOSS
$startsh
set abc
test "$?abc" != 1
EOSS

chmod +x try
$eunicefix try
if ./try; then
	echo "Yup, it does."
else
echo "Nope.  You may have to fix up the shell scripts to make sure sh runs them."
fi
rm -f try

a1447 1
ln
d1464 1
d1467 1
d1475 1
d1523 6
d1645 1
d1650 5
d1668 1
a1668 1
	: tests or hints, please send them to doughera@@lafcol.lafayette.edu
d1674 3
a1676 1
 	$test -f /unicos && osname=unicos && osvers=`$uname -r`
a1707 1
		news*) osname=news ;;
d1733 3
d1745 3
d1759 1
a1759 1
		irix) osname=irix
a1767 1
			1*) osvers=1 ;;
d1774 6
d1783 4
d1813 1
a1813 1
		osf1)	case "$5" in
d1825 3
d1831 1
a1831 1
 			svr*)
d1884 1
a1884 1
		if test -f /vmunix -a -f news_os.sh; then
d1887 1
a1887 1
				osname=news_os
d1990 1
d2030 24
d2055 8
a2062 6
cf_time=`$date 2>&1`
(logname > .temp) >/dev/null 2>&1
$test -s .temp || (whoami > .temp) >/dev/null 2>&1
$test -s .temp || echo unknown > .temp
cf_by=`$cat .temp`
$rm -f .temp
d2070 2
a2071 1
		tarch=`$sed -e 's/ /_/g' -e 's/$/'"-$osname/" tmparch`
d2095 6
a2100 5
if [ -z "$afs" ]; then
	: is AFS running?
	echo " "
	if test -d /afs; then
		echo "AFS may be running... I'll be extra cautious then..." >&4
d2103 1
a2103 2
		echo "AFS does not seem to be running..." >&4
	afs=false
d2105 6
d2160 4
a2163 1
cat <<'EOSC' >getfile
d2478 2
a2479 2
	patchlevel=`awk '/PATCHLEVEL/ {print $3}' < ../patchlevel.h`
	subversion=`awk '/SUBVERSION/ {print $3}' < ../patchlevel.h`
d2484 8
a2491 1
echo "(You have $package $baserev PL$patchlevel sub$subversion.)"
d2504 15
a2518 11
	case "$privlib" in
	'')
		dflt=`./loc . "." $prefixexp/lib /usr/local/lib /usr/lib /lib`
		set dflt
		eval $prefixup
		;;
	*)	version=`echo $baserev $patchlevel $subversion | \
		    $awk '{print $1 + $2/1000.0 + $3/100000.0}'`
		dflt="$privlib/$archname/$version"
		;;
	esac
d2520 5
a2524 1
*) dflt="$archlib";;
d2543 4
a2546 3
Since you are running AFS, I need to distinguish the directory in which
private files reside from the directory in which they are installed (and from
which they are presumably copied to the former directory by occult means).
d2567 4
a2570 1
cat <<'EOSC' >whoa
d2590 27
d2627 1
d2672 11
d2705 2
a2706 2
chmod +x bsd usg v7 osf1 eunice xenix venix
$eunicefix bsd usg v7 osf1 eunice xenix venix
d2778 1
d2845 4
a2848 3
Since you are running AFS, I need to distinguish the directory in which
private files reside from the directory in which they are installed (and from
which they are presumably copied to the former directory by occult means).
d2856 1
a2856 1
	rp='Where will private files be installed?'
d2889 4
a2892 3
Since you are running AFS, I need to distinguish the directory in which
private files reside from the directory in which they are installed (and from
which they are presumably copied to the former directory by occult means).
d2900 1
a2900 1
	rp='Where will private files be installed?'
d2923 1
a2923 1
In 5.001, Perl stored architecture-dependent library files in a library
d2928 2
a2929 1
will go into $archlib, 
d3001 2
a3002 18
: determine where manual pages go
set man1dir man1dir none
eval $prefixit
$cat <<EOM

$spackage has manual pages available in source form.
EOM
case "$nroff" in
nroff)
	echo "However, you don't have nroff, so they're probably useless to you."
	case "$man1dir" in
	'') man1dir="none";;
	esac;;
esac
echo "If you don't want the manual sources installed, answer 'none'."
case "$man1dir" in
' ') dflt=none
	;;
d3004 6
a3009 248
	lookpath="$prefixexp/man/man1 $prefixexp/man/l_man/man1"
	lookpath="$lookpath $prefixexp/man/p_man/man1"
	lookpath="$lookpath $prefixexp/man/u_man/man1"
	lookpath="$lookpath $prefixexp/man/man.1"
	: If prefix contains 'perl' then we want to keep the man pages
	: under the prefix directory.  Otherwise, look in a variety of
	: other possible places.  This is debatable, but probably a
	: good compromise.  Well, apparently not.
	: Experience has shown people expect man1dir to be under prefix,
	: so we now always put it there.  Users who want other behavior
	: can answer interactively or use a command line option.
	: Does user have System V-style man paths.
	case "$sysman" in
	*/?_man*)	dflt=`./loc . $prefixexp/l_man/man1 $lookpath` ;;
	*)	dflt=`./loc . $prefixexp/man/man1 $lookpath` ;;
	esac
	set dflt
	eval $prefixup
	;;
*)  dflt="$man1dir"
	;;
esac
echo " "
fn=dn+~
rp="Where do the main $spackage manual pages (source) go?"
. ./getfile
if $test "X$man1direxp" != "X$ansexp"; then
	installman1dir=''
fi
man1dir="$ans"
man1direxp="$ansexp"
case "$man1dir" in
'') man1dir=' '
	installman1dir='';;
esac
if $afs; then
	$cat <<EOM

Since you are running AFS, I need to distinguish the directory in which
manual pages reside from the directory in which they are installed (and from
which they are presumably copied to the former directory by occult means).

EOM
	case "$installman1dir" in
	'') dflt=`echo $man1direxp | sed 's#^/afs/#/afs/.#'`;;
	*) dflt="$installman1dir";;
	esac
	fn=de~
	rp='Where will man pages be installed?'
	. ./getfile
	installman1dir="$ans"
else
	installman1dir="$man1direxp"
fi

: What suffix to use on installed man pages

case "$man1dir" in
' ')
	man1ext='0'
	;;
*)
	rp="What suffix should be used for the main $spackage man pages?"
	case "$man1ext" in
	'')	case "$man1dir" in
		*1)  dflt=1 ;;
		*1p) dflt=1p ;;
		*1pm) dflt=1pm ;;
		*l) dflt=l;;
		*n) dflt=n;;
		*o) dflt=o;;
		*p) dflt=p;;
		*C) dflt=C;;
		*L) dflt=L;;
		*L1) dflt=L1;;
		*) dflt=1;;
		esac
		;;
	*)	dflt="$man1ext";;
	esac
	. ./myread
	man1ext="$ans"
	;;
esac

: see if we can have long filenames
echo " "
rmlist="$rmlist /tmp/cf$$"
$test -d /tmp/cf$$ || mkdir /tmp/cf$$
first=123456789abcdef
second=/tmp/cf$$/$first
$rm -f $first $second
if (echo hi >$first) 2>/dev/null; then
	if $test -f 123456789abcde; then
		echo 'You cannot have filenames longer than 14 characters.  Sigh.' >&4
		val="$undef"
	else
		if (echo hi >$second) 2>/dev/null; then
			if $test -f /tmp/cf$$/123456789abcde; then
				$cat <<'EOM'
That's peculiar... You can have filenames longer than 14 characters, but only
on some of the filesystems.  Maybe you are using NFS.  Anyway, to avoid problems
I shall consider your system cannot support long filenames at all.
EOM
				val="$undef"
			else
				echo 'You can have filenames longer than 14 characters.' >&4
				val="$define"
			fi
		else
			$cat <<'EOM'
How confusing! Some of your filesystems are sane enough to allow filenames
longer than 14 characters but some others like /tmp can't even think about them.
So, for now on, I shall assume your kernel does not allow them at all.
EOM
			val="$undef"
		fi
	fi
else
	$cat <<'EOM'
You can't have filenames longer than 14 chars.  You can't even think about them!
EOM
	val="$undef"
fi 
set d_flexfnam
eval $setvar
$rm -rf /tmp/cf$$ 123456789abcde*

: determine where library module manual pages go
set man3dir man3dir none
eval $prefixit
$cat <<EOM

$spackage has manual pages for many of the library modules.
EOM

case "$nroff" in
nroff)
	$cat <<'EOM'
However, you don't have nroff, so they're probably useless to you.
You can use the supplied perldoc script instead.
EOM
	case "$man3dir" in
	'') man3dir="none";;
	esac;;
esac

case "$d_flexfnam" in
undef)
	$cat <<'EOM'
However, your system can't handle the long file names like File::Basename.3. 
You can use the supplied perldoc script instead.
EOM
	case "$man3dir" in
	'') man3dir="none";;
	esac;;
esac

echo "If you don't want the manual sources installed, answer 'none'."
: We dont use /usr/local/man/man3 because some man programs will
: only show the /usr/local/man/man3 contents, and not the system ones,
: thus man less will show the perl module less.pm, but not the system
: less command.  We might also conflict with TCL man pages.
: However, something like /opt/perl/man/man3 is fine.
case "$man3dir" in
'')	case "$prefix" in 
	*perl*) dflt=`echo $man1dir | 
			$sed -e 's/man1/man3/g' -e 's/man\.1/man\.3/g'` ;;
	*)	dflt="$privlib/man/man3" ;;
	esac
	;;
' ') dflt=none;;
*)	dflt="$man3dir" ;;
esac
echo " "

fn=dn+~
rp="Where do the $spackage library man pages (source) go?"
. ./getfile
if test "X$man3direxp" != "X$ansexp"; then
	installman3dir=''
fi

man3dir="$ans"
man3direxp="$ansexp"
case "$man3dir" in
'') man3dir=' '
	installman3dir='';;
esac
if $afs; then
	$cat <<EOM

Since you are running AFS, I need to distinguish the directory in which
manual pages reside from the directory in which they are installed (and from
which they are presumably copied to the former directory by occult means).

EOM
	case "$installman3dir" in
	'') dflt=`echo $man3direxp | sed 's#^/afs/#/afs/.#'`;;
	*) dflt="$installman3dir";;
	esac
	fn=de~
	rp='Where will man pages be installed?'
	. ./getfile
	installman3dir="$ans"
else
	installman3dir="$man3direxp"
fi

: What suffix to use on installed man pages

case "$man3dir" in
' ')
	man3ext='0'
	;;
*)
	rp="What suffix should be used for the $spackage library man pages?"
	case "$man3ext" in
	'')	case "$man3dir" in
		*3)  dflt=3 ;;
		*3p) dflt=3p ;;
		*3pm) dflt=3pm ;;
		*l) dflt=l;;
		*n) dflt=n;;
		*o) dflt=o;;
		*p) dflt=p;;
		*C) dflt=C;;
		*L) dflt=L;;
		*L3) dflt=L3;;
		*) dflt=3;;
		esac
		;;
	*)	dflt="$man3ext";;
	esac
	. ./myread
	man3ext="$ans"
	;;
esac

: see what memory models we can support
case "$models" in
'')
	$cat >pdp11.c <<'EOP'
main() {
#ifdef pdp11
	exit(0);
#else
	exit(1);
d3013 2
a3014 2
	cc -o pdp11 pdp11.c >/dev/null 2>&1
	if ./pdp11 2>/dev/null; then
d3269 1260
a4528 12
: see if we have to deal with yellow pages, now NIS.
if $test -d /usr/etc/yp || $test -d /etc/yp; then
	if $test -f /usr/etc/nibindd; then
		echo " "
		echo "I'm fairly confident you're on a NeXT."
		echo " "
		rp='Do you get the hosts file via NetInfo?'
		dflt=y
		case "$hostcat" in
		nidump*) ;;
		'') ;;
		*) dflt=n;;
d4530 66
a4595 5
		. ./myread
		case "$ans" in
		y*) hostcat='nidump hosts .';;
		*)	case "$hostcat" in
			nidump*) hostcat='';;
d4598 6
d4605 5
a4609 20
	fi
	case "$hostcat" in
	nidump*) ;;
	*)
		case "$hostcat" in
		*ypcat*) dflt=y;;
		'') if $contains '^\+' /etc/passwd >/dev/null 2>&1; then
				dflt=y
			else
				dflt=n
			fi;;
		*) dflt=n;;
		esac
		echo " "
		rp='Are you getting the hosts file via yellow pages?'
		. ./myread
		case "$ans" in
		y*) hostcat='ypcat hosts';;
		*) hostcat='cat /etc/hosts';;
		esac
d4612 1
a4612 1
fi
d4614 9
a4622 57
: now get the host name
echo " "
echo "Figuring out host name..." >&4
case "$myhostname" in
'') cont=true
	echo 'Maybe "hostname" will work...'
	if tans=`sh -c hostname 2>&1` ; then
		myhostname=$tans
		phostname=hostname
		cont=''
	fi
	;;
*) cont='';;
esac
if $test "$cont"; then
	if ./xenix; then
		echo 'Oh, dear.  Maybe "/etc/systemid" is the key...'
		if tans=`cat /etc/systemid 2>&1` ; then
			myhostname=$tans
			phostname='cat /etc/systemid'
			echo "Whadyaknow.  Xenix always was a bit strange..."
			cont=''
		fi
	elif $test -r /etc/systemid; then
		echo "(What is a non-Xenix system doing with /etc/systemid?)"
	fi
fi
if $test "$cont"; then
	echo 'No, maybe "uuname -l" will work...'
	if tans=`sh -c 'uuname -l' 2>&1` ; then
		myhostname=$tans
		phostname='uuname -l'
	else
		echo 'Strange.  Maybe "uname -n" will work...'
		if tans=`sh -c 'uname -n' 2>&1` ; then
			myhostname=$tans
			phostname='uname -n'
		else
			echo 'Oh well, maybe I can mine it out of whoami.h...'
			if tans=`sh -c $contains' sysname $usrinc/whoami.h' 2>&1` ; then
				myhostname=`echo "$tans" | $sed 's/^.*"\(.*\)"/\1/'`
				phostname="sed -n -e '"'/sysname/s/^.*\"\\(.*\\)\"/\1/{'"' -e p -e q -e '}' <$usrinc/whoami.h"
			else
				case "$myhostname" in
				'') echo "Does this machine have an identity crisis or something?"
					phostname='';;
				*)
					echo "Well, you said $myhostname before..."
					phostname='echo $myhostname';;
				esac
			fi
		fi
	fi
fi
: you do not want to know about this
set $myhostname
myhostname=$1
d4624 2
a4625 4
: verify guess
if $test "$myhostname" ; then
	dflt=y
	rp='Your host name appears to be "'$myhostname'".'" Right?"
d4628 8
a4635 4
	y*) ;;
	*) myhostname='';;
	esac
fi
d4637 7
a4643 7
: bad guess or no guess
while $test "X$myhostname" = X ; do
	dflt=''
	rp="Please type the (one word) name of your host:"
	. ./myread
	myhostname="$ans"
done
d4645 4
a4648 5
: translate upper to lower if necessary
case "$myhostname" in
*[A-Z]*)
	echo "(Normalizing case in your host name)"
	myhostname=`echo $myhostname | ./tr '[A-Z]' '[a-z]'`
d4652 3
a4654 7
case "$myhostname" in
*.*)
	dflt=`expr "X$myhostname" : "X[^.]*\(\..*\)"`
	myhostname=`expr "X$myhostname" : "X\([^.]*\)\."`
	echo "(Trimming domain name from host name--host name is now $myhostname)"
	;;
*) case "$mydomain" in
d4656 25
a4680 43
		{
			: If we use NIS, try ypmatch.
			: Is there some reason why this was not done before?
			test "X$hostcat" = "Xypcat hosts" &&
			ypmatch "$myhostname" hosts 2>/dev/null |\
				$sed -e 's/[	 ]*#.*//; s/$/ /' > hosts && \
			$test -s hosts
		} || {
			: Extract only the relevant hosts, reducing file size,
			: remove comments, insert trailing space for later use.
		     	$hostcat | $sed -n -e "s/[	 ]*#.*//; s/\$/ /
					/[	 ]$myhostname[	. ]/p" > hosts
		}
		tmp_re="[	. ]"
		$test x`$awk "/[0-9].*[	 ]$myhostname$tmp_re/ { sum++ }
			     END { print sum }" hosts` = x1 || tmp_re="[	 ]"
		dflt=.`$awk "/[0-9].*[	 ]$myhostname$tmp_re/ {for(i=2; i<=NF;i++) print \\\$i}" \
			hosts | $sort | $uniq | \
			$sed -n -e "s/$myhostname\.\([-a-zA-Z0-9_.]\)/\1/p"`
		case `$echo X$dflt` in
		X*\ *)	echo "(Several hosts in /etc/hosts matched hostname)"
			dflt=.
			;;
		.) echo "(You do not have fully-qualified names in /etc/hosts)"
			;;
		esac
		case "$dflt" in
		.)
			tans=`./loc resolv.conf X /etc /usr/etc`
			if $test -f "$tans"; then
				echo "(Attempting domain name extraction from $tans)"
				: Why was there an Egrep here, when Sed works?
				dflt=.`$sed -n -e 's/^domain[ 	]*\(.*\)/\1/p' $tans \
					| ./tr '[A-Z]' '[a-z]' 2>/dev/null`
			fi
			;;
		esac
		case "$dflt" in
		.) echo "(No help from resolv.conf either -- attempting clever guess)"
			dflt=.`sh -c domainname 2>/dev/null`
			case "$dflt" in
			'') dflt='.';;
			.nis.*|.yp.*|.main.*) dflt=`echo $dflt | $sed -e 's/^\.[^.]*//'`;;
a4683 6
		case "$dflt" in
		.) echo "(Lost all hope -- silly guess then)"
			dflt='.uucp'
			;;
		esac
		$rm -f hosts
d4685 14
a4698 13
	*) dflt="$mydomain";;
	esac;;
esac
echo " "
rp="What is your domain name?"
. ./myread
tans="$ans"
case "$ans" in
'') ;;
.*) ;;
*) tans=".$tans";;
esac
mydomain="$tans"
d4700 8
a4707 5
: translate upper to lower if necessary
case "$mydomain" in
*[A-Z]*)
	echo "(Normalizing case in your domain name)"
	mydomain=`echo $mydomain | ./tr '[A-Z]' '[a-z]'`
d4711 2
a4712 2
: a little sanity check here
case "$phostname" in
d4714 14
a4727 3
*)
	case `$phostname | ./tr '[A-Z]' '[a-z]'` in
	$myhostname$mydomain|$myhostname) ;;
d4729 6
a4734 9
		case "$phostname" in
		sed*)
			echo "(That doesn't agree with your whoami.h file, by the way.)"
			;;
		*)
			echo "(That doesn't agree with your $phostname command, by the way.)"
			;;
		esac
	;;
d4739 36
a4774 1
$cat <<EOM
d4776 3
a4778 5
I need to get your e-mail address in Internet format if possible, i.e.
something like user@@host.domain. Please answer accurately since I have
no easy means to double check it. The default value provided below
is most probably close to the reality but may not be valid from outside
your organization...
d4781 1
a4781 21
cont=x
while test "$cont"; do
	case "$cf_email" in
	'') dflt="$cf_by@@$myhostname$mydomain";;
	*) dflt="$cf_email";;
	esac
	rp='What is your e-mail address?'
	. ./myread
	cf_email="$ans"
	case "$cf_email" in
	*@@*.*) cont='' ;;
	*)
		rp='Address does not look like an Internet one.  Use it anyway?'
		case "$fastread" in
		yes) dflt=y ;;
		*) dflt=n ;;
		esac
		. ./myread
		case "$ans" in
		y*) cont='' ;;
		*) echo " " ;;
d4785 5
a4789 1
done
d4791 3
d4796 1
a4796 6
If you or somebody else will be maintaining perl at your site, please
fill in the correct e-mail address here so that they may be contacted
if necessary. Currently, the "perlbug" program included with perl
will send mail to this address in addition to perlbug@@perl.com. You may
enter "none" for no administrator.

d4798 6
a4803 3
case "$perladmin" in
'') dflt="$cf_email";;
*) dflt="$perladmin";;
d4805 4
a4808 8
rp='Perl administrator e-mail address'
. ./myread
perladmin="$ans"

: determine where public executable scripts go
set scriptdir scriptdir
eval $prefixit
case "$scriptdir" in
d4810 16
a4825 6
	dflt="$bin"
	: guess some guesses
	$test -d /usr/share/scripts && dflt=/usr/share/scripts
	$test -d /usr/share/bin && dflt=/usr/share/bin
	$test -d /usr/local/script && dflt=/usr/local/script
	$test -d $prefixexp/script && dflt=$prefixexp/script
d4829 1
a4829 1
*)  dflt="$scriptdir"
d4832 3
a4834 10
$cat <<EOM
 
Some installations have a separate directory just for executable scripts so
that they can mount it across multiple architectures but keep the scripts in
one spot.  You might, for example, have a subdirectory of /usr/share for this.
Or you might just lump your scripts in with all your other executables.
 
EOM
fn=d~
rp='Where do you keep publicly executable scripts?'
d4836 2
a4837 2
if $test "X$ansexp" != "X$scriptdirexp"; then
	installscript=''
d4839 6
a4844 2
scriptdir="$ans"
scriptdirexp="$ansexp"
d4849 1
a4849 1
scripts reside from the directory in which they are installed (and from
d4853 3
a4855 3
	case "$installscript" in
	'') dflt=`echo $scriptdirexp | sed 's#^/afs/#/afs/.#'`;;
	*) dflt="$installscript";;
d4858 1
a4858 1
	rp='Where will public scripts be installed?'
d4860 1
a4860 125
	installscript="$ans"
else
	installscript="$scriptdirexp"
fi

: determine perl absolute location
case "$perlpath" in
'')	perlpath=$binexp/perl ;;
esac

: figure out how to guarantee perl startup
case "$startperl" in
'')
	case "$sharpbang" in
	*!)
		$cat <<EOH

I can use the #! construct to start perl on your system. This will
make startup of perl scripts faster, but may cause problems if you
want to share those scripts and perl is not in a standard place
($perlpath) on all your platforms. The alternative is to force
a shell by starting the script with a single ':' character.

EOH
		dflt=$perlpath
		rp='What shall I put after the #! to start up perl ("none" to not use #!)?'
		. ./myread
		case "$ans" in
		none) startperl=": # use perl";;
		*) startperl="#!$ans";;
		esac
		;;
	*) startperl=": # use perl"
		;;
	esac
	;;
esac
echo "I'll use $startperl to start perl scripts."

: see how we invoke the C preprocessor
echo " "
echo "Now, how can we feed standard input to your C preprocessor..." >&4
cat <<'EOT' >testcpp.c
#define ABC abc
#define XYZ xyz
ABC.XYZ
EOT
cd ..
echo 'cat >.$$.c; '"$cc"' -E ${1+"$@@"} .$$.c; rm .$$.c' >cppstdin
chmod 755 cppstdin
wrapper=`pwd`/cppstdin
ok='false'
cd UU

if $test "X$cppstdin" != "X" && \
	$cppstdin $cppminus <testcpp.c >testcpp.out 2>&1 && \
	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1
then
	echo "You used to use $cppstdin $cppminus so we'll use that again."
	case "$cpprun" in
	'') echo "But let's see if we can live without a wrapper..." ;;
	*)
		if $cpprun $cpplast <testcpp.c >testcpp.out 2>&1 && \
			$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1
		then
			echo "(And we'll use $cpprun $cpplast to preprocess directly.)"
			ok='true'
		else
			echo "(However, $cpprun $cpplast does not work, let's see...)"
		fi
		;;
	esac
else
	case "$cppstdin" in
	'') ;;
	*)
		echo "Good old $cppstdin $cppminus does not seem to be of any help..."
		;;
	esac
fi

if $ok; then
	: nothing
elif echo 'Maybe "'"$cc"' -E" will work...'; \
	$cc -E <testcpp.c >testcpp.out 2>&1; \
	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
	echo "Yup, it does."
	x_cpp="$cc -E"
	x_minus='';
elif echo 'Nope...maybe "'"$cc"' -E -" will work...'; \
	$cc -E - <testcpp.c >testcpp.out 2>&1; \
	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
	echo "Yup, it does."
	x_cpp="$cc -E"
	x_minus='-';
elif echo 'Nope...maybe "'"$cc"' -P" will work...'; \
	$cc -P <testcpp.c >testcpp.out 2>&1; \
	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
	echo "Yipee, that works!"
	x_cpp="$cc -P"
	x_minus='';
elif echo 'Nope...maybe "'"$cc"' -P -" will work...'; \
	$cc -P - <testcpp.c >testcpp.out 2>&1; \
	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
	echo "At long last!"
	x_cpp="$cc -P"
	x_minus='-';
elif echo 'No such luck, maybe "'$cpp'" will work...'; \
	$cpp <testcpp.c >testcpp.out 2>&1; \
	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
	echo "It works!"
	x_cpp="$cpp"
	x_minus='';
elif echo 'Nixed again...maybe "'$cpp' -" will work...'; \
	$cpp - <testcpp.c >testcpp.out 2>&1; \
	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
	echo "Hooray, it works!  I was beginning to wonder."
	x_cpp="$cpp"
	x_minus='-';
elif echo 'Uh-uh.  Time to get fancy.  Trying a wrapper...'; \
	$wrapper <testcpp.c >testcpp.out 2>&1; \
	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
	x_cpp="$wrapper"
	x_minus=''
	echo "Eureka!"
d4862 1
a4862 12
	dflt=''
	rp="No dice.  I can't find a C preprocessor.  Name one:"
	. ./myread
	x_cpp="$ans"
	x_minus=''
	$x_cpp <testcpp.c >testcpp.out 2>&1
	if $contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
		echo "OK, that will do." >&4
	else
echo "Sorry, I can't get that to work.  Go find one and rerun Configure." >&4
		exit 1
	fi
d4865 22
a4886 26
case "$ok" in
false)
	cppstdin="$x_cpp"
	cppminus="$x_minus"
	cpprun="$x_cpp"
	cpplast="$x_minus"
	set X $x_cpp
	shift
	case "$1" in
	"$cpp")
		echo "Perhaps can we force $cc -E using a wrapper..."
		if $wrapper <testcpp.c >testcpp.out 2>&1; \
			$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1
		then
			echo "Yup, we can."
			cppstdin="$wrapper"
			cppminus='';
		else
			echo "Nope, we'll have to live without it..."
		fi
		;;
	esac
	case "$cpprun" in
	"$wrapper")
		cpprun=''
		cpplast=''
d4888 1
d4890 2
d4895 42
a4936 5
case "$cppstdin" in
"$wrapper") ;;
*) $rm -f $wrapper;;
esac
$rm -f testcpp.c testcpp.out
d4938 4
a4941 11
: Set private lib path
case "$plibpth" in
'') if ./mips; then
		plibpth="$incpath/usr/lib /usr/local/lib /usr/ccs/lib"
	fi;;
esac
case "$libpth" in
' ') dlist='';;
'') dlist="$loclibpth $plibpth $glibpth";;
*) dlist="$libpth";;
esac
d4943 2
a4944 17
: Now check and see which directories actually exist, avoiding duplicates
libpth=''
for xxx in $dlist
do
    if $test -d $xxx; then
		case " $libpth " in
		*" $xxx "*) ;;
		*) libpth="$libpth $xxx";;
		esac
    fi
done
$cat <<'EOM'

Some systems have incompatible or broken versions of libraries.  Among
the directories listed in the question below, please remove any you
know not to be holding relevant libraries, and add any that are needed.
Say "none" for none.
d4946 5
d4952 3
a4954 13
case "$libpth" in
'') dflt='none';;
*)
	set X $libpth
	shift
	dflt=${1+"$@@"}
	;;
esac
rp="Directories to use for library searches?"
. ./myread
case "$ans" in
none) libpth=' ';;
*) libpth="$ans";;
d4957 9
a4965 5
: determine optimize, if desired, or use for debug flag also
case "$optimize" in
' ') dflt='none';;
'') dflt='-O';;
*) dflt="$optimize";;
a4966 1
$cat <<EOH
d4968 11
a4978 32
Some C compilers have problems with their optimizers, by default, $package
compiles with the -O flag to use the optimizer.  Alternately, you might want
to use the symbolic debugger, which uses the -g flag (on traditional Unix
systems).  Either flag can be specified here.  To use neither flag, specify
the word "none".

EOH
rp="What optimizer/debugger flag should be used?"
. ./myread
optimize="$ans"
case "$optimize" in
'none') optimize=" ";;
esac

dflt=''
: We will not override a previous value, but we might want to
: augment a hint file
case "$hint" in
none|recommended)
	case "$gccversion" in
	1*) dflt='-fpcc-struct-return' ;;
	esac
	case "$optimize" in
	*-g*) dflt="$dflt -DDEBUGGING";;
	esac
	case "$gccversion" in
	2*) if test -d /etc/conf/kconfig.d &&
			$contains _POSIX_VERSION $usrinc/sys/unistd.h >/dev/null 2>&1
		then
			dflt="$dflt -posix"
		fi
		;;
d4981 2
d4984 1
d4986 5
a4990 33
case "$mips_type" in
*BSD*|'') inclwanted="$locincpth $usrinc";;
*) inclwanted="$locincpth $inclwanted $usrinc/bsd";;
esac
for thisincl in $inclwanted; do
	if $test -d $thisincl; then
		if $test x$thisincl != x$usrinc; then
			case "$dflt" in
			*$thisincl*);;
			*) dflt="$dflt -I$thisincl";;
			esac
		fi
	fi
done

inctest='if $contains $2 $usrinc/$1 >/dev/null 2>&1; then
	xxx=true;
elif $contains $2 $usrinc/sys/$1 >/dev/null 2>&1; then
	xxx=true;
else
	xxx=false;
fi;
if $xxx; then
	case "$dflt" in
	*$2*);;
	*) dflt="$dflt -D$2";;
	esac;
fi'

if ./osf1; then
	set signal.h __LANGUAGE_C__; eval $inctest
else
	set signal.h LANGUAGE_C; eval $inctest
a4991 2
set signal.h NO_PROTOTYPE; eval $inctest
set signal.h _NO_PROTO; eval $inctest
d4993 5
a4997 3
case "$hint" in
none|recommended) dflt="$ccflags $dflt" ;;
*) dflt="$ccflags";;
d4999 2
d5002 3
a5004 4
case "$dflt" in
''|' ') dflt=none;;
esac
$cat <<EOH
d5006 12
a5017 6
Your C compiler may want other flags.  For this question you should include
-I/whatever and -DWHATEVER flags and any other flags used by the C compiler,
but you should NOT include libraries or ld flags like -lwhatever.  If you
want $package to honor its debug switch, you should include -DDEBUGGING here.
Your C compiler might also need additional flags, such as -D_POSIX_SOURCE,
-DHIDEMYMALLOC or -DCRIPPLED_CC.
d5019 1
a5019 1
To use no flags, specify the word "none".
d5021 26
a5046 9
EOH
set X $dflt
shift
dflt=${1+"$@@"}
rp="Any additional cc flags?"
. ./myread
case "$ans" in
none) ccflags='';;
*) ccflags="$ans";;
d5049 58
a5106 4
: the following weeds options from ccflags that are of no interest to cpp
cppflags="$ccflags"
case "$gccversion" in
1*) cppflags="$cppflags -D__GNUC__"
d5108 23
a5130 33
case "$mips_type" in
'');;
*BSD*) cppflags="$cppflags -DSYSTYPE_BSD43";;
esac
case "$cppflags" in
'');;
*)
	echo " "
	echo "Let me guess what the preprocessor flags are..." >&4
	set X $cppflags
	shift
	cppflags=''
	$cat >cpp.c <<'EOM'
#define BLURFL foo

BLURFL xx LFRULB
EOM
	previous=''
	for flag in $*
	do
		case "$flag" in
		-*) ftry="$flag";;
		*) ftry="$previous $flag";;
		esac
		if $cppstdin -DLFRULB=bar $ftry $cppminus <cpp.c \
			>cpp1.out 2>/dev/null && \
			$cpprun -DLFRULB=bar $ftry $cpplast <cpp.c \
			>cpp2.out 2>/dev/null && \
			$contains 'foo.*xx.*bar' cpp1.out >/dev/null 2>&1 && \
			$contains 'foo.*xx.*bar' cpp2.out >/dev/null 2>&1
		then
			cppflags="$cppflags $ftry"
			previous=''
d5132 13
a5144 1
			previous="$flag"
d5146 14
a5159 6
	done
	set X $cppflags
	shift
	cppflags=${1+"$@@"}
	case "$cppflags" in
	*-*)  echo "They appear to be: $cppflags";;
d5161 9
a5169 3
	$rm -f cpp.c cpp?.out
	;;
esac
d5171 5
a5175 11
: flags used in final linking phase

case "$ldflags" in
'') if ./venix; then
		dflt='-i -z'
	else
		dflt=''
	fi
	case "$ccflags" in
	*-posix*) dflt="$dflt -posix" ;;
	esac
a5176 1
*) dflt="$ldflags";;
d5179 66
a5244 7
: Try to guess additional flags to pick up local libraries.
for thislibdir in $libpth; do
	case " $loclibpth " in
	*" $thislibdir "*)
		case "$dflt " in 
		*"-L$thislibdir "*) ;;
		*)  dflt="$dflt -L$thislibdir" ;;
d5246 1
d5248 2
a5249 5
	esac
done

case "$dflt" in
'') dflt='none' ;;
d5251 2
a5252 16

$cat <<EOH

Your C linker may need flags.  For this question you should
include -L/whatever and any other flags used by the C linker, but you
should NOT include libraries like -lwhatever.

Make sure you include the appropriate -L/path flags if your C linker
does not normally search all of the directories you specified above,
namely
	$libpth
To use no flags, specify the word "none".

EOH

rp="Any additional ld flags (NOT including libraries)?"
d5254 1
d5256 3
a5258 2
none) ldflags='';;
*) ldflags="$ans";;
d5260 1
a5260 1
rmlist="$rmlist pdp11"
d5262 7
a5268 7
: coherency check
echo " "
echo "Checking your choice of C compiler and flags for coherency..." >&4
set X $cc $optimize $ccflags $ldflags try.c -o try
shift
$cat >try.msg <<EOM
I've tried to compile and run a simple program with:
d5270 16
a5285 40
	$*
	./try

and I got the following output:

EOM
$cat > try.c <<'EOF'
#include <stdio.h>
main() { exit(0); }
EOF
dflt=y
if sh -c "$cc $optimize $ccflags try.c -o try $ldflags" >>try.msg 2>&1; then
	if sh -c './try' >>try.msg 2>&1; then
		dflt=n
	else
		echo "The program compiled OK, but exited with status $?." >>try.msg
		rp="You have a problem.  Shall I abort Configure"
		dflt=y
	fi
else
	echo "I can't compile the test program." >>try.msg
	rp="You have a BIG problem.  Shall I abort Configure"
	dflt=y
fi
case "$dflt" in
y)
	$cat try.msg
	case "$knowitall" in
	'')
		echo "(The supplied flags might be incorrect with this C compiler.)"
		;;
	*) dflt=n;;
	esac
	echo " "
	. ./myread
	case "$ans" in
	n*|N*) ;;
	*)	echo "Ok.  Stopping Configure." >&4
		exit 1
		;;
a5287 1
n) echo "OK, that should do.";;
a5288 1
$rm -f try try.* core
a5289 11
: compute shared library extension
case "$so" in
'')
	if xxx=`./loc libc.sl X $libpth`; $test -f "$xxx"; then
		dflt='sl'
	else
		dflt='so'
	fi
	;;
*) dflt="$so";;
esac
d5292 5
a5296 3
On some systems, shared libraries may be available.  Answer 'none' if
you want to suppress searching of shared libraries for the remaining
of this configuration.
d5299 16
a5314 21
rp='What is the file extension used for shared libraries?'
. ./myread
so="$ans"

: Looking for optional libraries
echo " "
echo "Checking for optional libraries..." >&4
case "$libs" in
' '|'') dflt='';;
*) dflt="$libs";;
esac
case "$libswanted" in
'') libswanted='c_s';;
esac
for thislib in $libswanted; do
	
	if xxx=`./loc lib$thislib.$so.[0-9]'*' X $libpth`; $test -f "$xxx"; then
		echo "Found -l$thislib (shared)."
		case " $dflt " in
		*"-l$thislib "*);;
		*) dflt="$dflt -l$thislib";;
d5316 4
a5319 29
	elif xxx=`./loc lib$thislib.$so X $libpth` ; $test -f "$xxx"; then
		echo "Found -l$thislib (shared)."
		case " $dflt " in
		*"-l$thislib "*);;
		*) dflt="$dflt -l$thislib";;
		esac
	elif xxx=`./loc lib$thislib.a X $libpth`; $test -f "$xxx"; then
		echo "Found -l$thislib."
		case " $dflt " in
		*"-l$thislib "*);;
		*) dflt="$dflt -l$thislib";;
		esac
	elif xxx=`./loc $thislib.a X $libpth`; $test -f "$xxx"; then
		echo "Found -l$thislib."
		case " $dflt " in
		*"-l$thislib "*);;
		*) dflt="$dflt -l$thislib";;
		esac
	elif xxx=`./loc lib${thislib}_s.a X $libpth`; $test -f "$xxx"; then
		echo "Found -l${thislib}_s."
		case " $dflt " in
		*"-l$thislib "*);;
		*) dflt="$dflt -l${thislib}_s";;
		esac
	elif xxx=`./loc Slib$thislib.a X $xlibpth`; $test -f "$xxx"; then
		echo "Found -l$thislib."
		case " $dflt " in
		*"-l$thislib "*);;
		*) dflt="$dflt -l$thislib";;
d5321 2
a5322 3
	else
		echo "No -l$thislib."
	fi
a5323 10
set X $dflt
shift
dflt="$*"
case "$libs" in
'') dflt="$dflt";;
*) dflt="$libs";;
esac
case "$dflt" in
' '|'') dflt='none';;
esac
a5325 3
 
Some versions of Unix support shared libraries, which make executables smaller
but make load time slightly longer.
d5327 6
a5332 6
On some systems, mostly newer Unix System V's, the shared library is included
by putting the option "-lc_s" as the last thing on the cc command line when
linking.  Other systems use shared libraries by default.  There may be other
libraries needed to compile $package on your machine as well.  If your system
needs the "-lc_s" option, include it here.  Include any other special libraries
here as well.  Say "none" for none.
d5334 5
a5338 3

echo " "
rp="Any additional libraries?"
d5340 1
a5340 4
case "$ans" in
none) libs=' ';;
*) libs="$ans";;
esac
d5342 2
a5343 2
: see if nm is to be used to determine whether a symbol is defined or not
case "$usenm" in
d5345 19
a5363 15
	dflt=`egrep 'inlibc|csym' ../Configure | wc -l 2>/dev/null`
	if $test $dflt -gt 20; then
		dflt=y
	else
		dflt=n
	fi
	;;
*)
	case "$usenm" in
	true) dflt=y;;
	*) dflt=n;;
	esac
	;;
esac
$cat <<EOM
d5365 3
a5367 6
I can use 'nm' to extract the symbols from your C libraries. This is a time
consuming task which may generate huge output on the disk (up to 3 megabytes)
but that should make the symbols extraction faster. The alternative is to skip
the 'nm' extraction part and to compile a small test program instead to
determine whether each symbol is present. If you have a fast C compiler and/or
if your 'nm' output cannot be parsed, this may be the best solution.
d5370 7
a5376 5
rp='Shall I use nm to extract C symbols from the libraries?'
. ./myread
case "$ans" in
n|N) usenm=false;;
*) usenm=true;;
d5378 1
d5380 8
a5387 4
runnm=$usenm
case "$reuseval" in
true) runnm=false;;
esac
d5389 4
a5392 12
: nm options which may be necessary
case "$nm_opt" in
'') if $test -f /mach_boot; then
		nm_opt=''
	elif $test -d /usr/ccs/lib; then
		nm_opt='-p'
	elif $test -f /dgux; then
		nm_opt='-p'
	else
		nm_opt=''
	fi;;
esac
d5394 5
a5398 8
: nm options which may be necessary for shared libraries but illegal
: for archive libraries.  Thank you, Linux.
case "$nm_so_opt" in
'')	case "$myuname" in
	*linux*)
		if nm --help | $grep 'dynamic' > /dev/null 2>&1; then
			nm_so_opt='--dynamic'
		fi
d5403 4
d5408 13
a5420 9
case "$runnm" in
true)
: get list of predefined functions in a handy place
echo " "
case "$libc" in
'') libc=unknown
	case "$libs" in
	*-lc_s*) libc=`./loc libc_s.a $libc $libpth`
	esac
d5422 1
a5422 31
esac
libnames='';
case "$libs" in
'') ;;
*)  for thislib in $libs; do
	case "$thislib" in
	-lc|-lc_s)
		: Handle C library specially below.
		;;
	-l*)
		thislib=`echo $thislib | $sed -e 's/^-l//'`
		if try=`./loc lib$thislib.$so.'*' X $libpth`; $test -f "$try"; then
			:
		elif try=`./loc lib$thislib.$so X $libpth`; $test -f "$try"; then
			:
		elif try=`./loc lib$thislib.a X $libpth`; $test -f "$try"; then
			:
		elif try=`./loc lib$thislib X $libpth`; $test -f "$try"; then
			:
		elif try=`./loc $thislib X $libpth`; $test -f "$try"; then
			:
		elif try=`./loc Slib$thislib.a X $xlibpth`; $test -f "$try"; then
			:
		else
			try=''
		fi
		libnames="$libnames $try"
		;;
	*) libnames="$libnames $thislib" ;;
	esac
	done
d5425 7
a5431 85
xxx=normal
case "$libc" in
unknown)
	set /lib/libc.$so
	for xxx in $libpth; do
		$test -r $1 || set $xxx/libc.$so
		: The messy sed command sorts on library version numbers.
		$test -r $1 || \
			set `echo blurfl; echo $xxx/libc.$so.[0-9]* | \
				tr ' ' '\012' | egrep -v '\.[A-Za-z]*$' | $sed -e '
				h
				s/[0-9][0-9]*/0000&/g
				s/0*\([0-9][0-9][0-9][0-9][0-9]\)/\1/g
				G
				s/\n/ /' | \
		 	sort | $sed -e 's/^.* //'`
		eval set \$$#
	done
	$test -r $1 || set /usr/ccs/lib/libc.$so
  	$test -r $1 || set /lib/libsys_s.a
  	;;
*)
	set blurfl
	;;
esac
if $test -r "$1"; then
	echo "Your (shared) C library seems to be in $1."
	libc="$1"
elif $test -r /lib/libc && $test -r /lib/clib; then
	echo "Your C library seems to be in both /lib/clib and /lib/libc."
	xxx=apollo
	libc='/lib/clib /lib/libc'
	if $test -r /lib/syslib; then
		echo "(Your math library is in /lib/syslib.)"
		libc="$libc /lib/syslib"
	fi
elif $test -r "$libc" || (test -h "$libc") >/dev/null 2>&1; then
	echo "Your C library seems to be in $libc, as you said before."
elif $test -r $incpath/usr/lib/libc.a; then
	libc=$incpath/usr/lib/libc.a;
	echo "Your C library seems to be in $libc.  That's fine."
elif $test -r /lib/libc.a; then
	libc=/lib/libc.a;
	echo "Your C library seems to be in $libc.  You're normal."
else
	if tans=`./loc libc.a blurfl/dyick $libpth`; $test -r "$tans"; then
		:
	elif tans=`./loc libc blurfl/dyick $libpth`; $test -r "$tans"; then
		libnames="$libnames "`./loc clib blurfl/dyick $libpth`
	elif tans=`./loc clib blurfl/dyick $libpth`; $test -r "$tans"; then
		:
	elif tans=`./loc Slibc.a blurfl/dyick $xlibpth`; $test -r "$tans"; then
		:
	elif tans=`./loc Mlibc.a blurfl/dyick $xlibpth`; $test -r "$tans"; then
		:
	else
		tans=`./loc Llibc.a blurfl/dyick $xlibpth`
	fi
	if $test -r "$tans"; then
		echo "Your C library seems to be in $tans, of all places."
		libc=$tans
	else
		libc='blurfl'
	fi
fi
if $test $xxx = apollo -o -r "$libc" || (test -h "$libc") >/dev/null 2>&1; then
	dflt="$libc"
	cat <<EOM

If the guess above is wrong (which it might be if you're using a strange
compiler, or your machine supports multiple models), you can override it here.

EOM
else
	dflt=''
	echo $libpth | tr ' ' '\012' | sort | uniq > libpath
	cat >&4 <<EOM
I can't seem to find your C library.  I've looked in the following places:

EOM
	$sed 's/^/	/' libpath
	cat <<EOM

None of these seems to contain your C library. I need to get its name...

d5433 5
d5439 4
a5442 4
fn=f
rp='Where is your C library?'
. ./getfile
libc="$ans"
d5444 3
a5446 11
echo " "
echo $libc $libnames | tr ' ' '\012' | sort | uniq > libnames
set X `cat libnames`
shift
xxx=files
case $# in 1) xxx=file; esac
echo "Extracting names from the following $xxx for later perusal:" >&4
echo " "
$sed 's/^/	/' libnames >&4
echo " "
$echo $n "This may take a while...$c" >&4
d5448 4
a5451 7
: Linux may need the special Dynamic option to nm for shared libraries.
: In general, this is stored in the nm_so_opt variable.
: Unfortunately, that option may be fatal on non-shared libraries.
for nm_libs_ext in $*; do
    case $nm_libs_ext in
	*$so*)	nm $nm_so_opt $nm_opt $nm_libs_ext 2>/dev/null ;;
	*)		nm $nm_opt $nm_libs_ext 2>/dev/null ;;
d5453 4
a5456 52
done > libc.tmp

$echo $n ".$c"
$grep fprintf libc.tmp > libc.ptf
xscan='eval "<libc.ptf $com >libc.list"; $echo $n ".$c" >&4'
xrun='eval "<libc.tmp $com >libc.list"; echo "done" >&4'
xxx='[ADTSIW]'
if com="$sed -n -e 's/__IO//' -e 's/^.* $xxx  *_[_.]*//p' -e 's/^.* $xxx //p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e 's/^__*//' -e 's/^\([a-zA-Z_0-9$]*\).*xtern.*/\1/p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e '/|UNDEF/d' -e '/FUNC..GL/s/^.*|__*//p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e 's/^.* D __*//p' -e 's/^.* D //p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e 's/^_//' -e 's/^\([a-zA-Z_0-9]*\).*xtern.*text.*/\1/p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e 's/^.*|FUNC |GLOB .*|//p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$grep '|' | $sed -n -e '/|COMMON/d' -e '/|DATA/d' \
				-e '/ file/d' -e 's/^\([^ 	]*\).*/\1/p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e 's/^.*|FUNC |GLOB .*|//p' -e 's/^.*|FUNC |WEAK .*|//p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e 's/^__//' -e '/|Undef/d' -e '/|Proc/s/ .*//p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e '/Def. Text/s/.* \([^ ]*\)\$/\1/p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e 's/^[-0-9a-f ]*_\(.*\)=.*/\1/p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
d5458 1
a5458 40
	nm -p $* 2>/dev/null >libc.tmp
	$grep fprintf libc.tmp > libc.ptf
	if com="$sed -n -e 's/^.* [ADTSIW]  *_[_.]*//p' -e 's/^.* [ADTSIW] //p'";\
		eval $xscan; $contains '^fprintf$' libc.list >/dev/null 2>&1
	then
		nm_opt='-p'
		eval $xrun
	else
		echo " "
		echo "nm didn't seem to work right. Trying ar instead..." >&4
		com=''
		if ar t $libc > libc.tmp; then
			for thisname in $libnames; do
				ar t $thisname >>libc.tmp
			done
			$sed -e 's/\.o$//' < libc.tmp > libc.list
			echo "Ok." >&4
		else
			echo "ar didn't seem to work right." >&4
			echo "Maybe this is a Cray...trying bld instead..." >&4
			if bld t $libc | $sed -e 's/.*\///' -e 's/\.o:.*$//' > libc.list
			then
				for thisname in $libnames; do
					bld t $libnames | \
					$sed -e 's/.*\///' -e 's/\.o:.*$//' >>libc.list
					ar t $thisname >>libc.tmp
				done
				echo "Ok." >&4
			else
				echo "That didn't work either.  Giving up." >&4
				exit 1
			fi
		fi
	fi
fi
nm_extract="$com"
if $test -f /lib/syscalls.exp; then
	echo " "
	echo "Also extracting names from /lib/syscalls.exp for good ole AIX..." >&4
	$sed -n 's/^\([^ 	]*\)[ 	]*syscall$/\1/p' /lib/syscalls.exp >>libc.list
a5459 3
;;
esac
$rm -f libnames libpath
d5461 1
a5461 35
: is a C symbol defined?
csym='tlook=$1;
case "$3" in
-v) tf=libc.tmp; tc=""; tdc="";;
-a) tf=libc.tmp; tc="[0]"; tdc="[]";;
*) tlook="^$1\$"; tf=libc.list; tc="()"; tdc="()";;
esac;
tx=yes;
case "$reuseval-$4" in
true-) ;;
true-*) tx=no; eval "tval=\$$4"; case "$tval" in "") tx=yes;; esac;;
esac;
case "$tx" in
yes)
	case "$runnm" in
	true)
		if $contains $tlook $tf >/dev/null 2>&1;
		then tval=true;
		else tval=false;
		fi;;
	*)
		echo "main() { extern short $1$tdc; printf(\"%hd\", $1$tc); }" > t.c;
		if $cc $ccflags $ldflags -o t t.c $libs >/dev/null 2>&1;
		then tval=true;
		else tval=false;
		fi;
		$rm -f t t.c;;
	esac;;
*)
	case "$tval" in
	$define) tval=true;;
	*) tval=false;;
	esac;;
esac;
eval "$2=$tval"'
d5463 27
a5489 26
: define an is-in-libc? function
inlibc='echo " "; td=$define; tu=$undef;
sym=$1; var=$2; eval "was=\$$2";
tx=yes;
case "$reuseval$was" in
true) ;;
true*) tx=no;;
esac;
case "$tx" in
yes)
	set $sym tres -f;
	eval $csym;
	case "$tres" in
	true)
		echo "$sym() found." >&4;
		case "$was" in $undef) . ./whoa; esac; eval "$var=\$td";;
	*)
		echo "$sym() NOT found." >&4;
		case "$was" in $define) . ./whoa; esac; eval "$var=\$tu";;
	esac;;
*)
	case "$was" in
	$define) echo "$sym() found." >&4;;
	*) echo "$sym() NOT found." >&4;;
	esac;;
esac'
d5497 1
d5501 1
d5505 1
d5507 18
a5524 1
main() { 
d5526 7
d5534 2
a5535 2
	if (buf[0] != '1' || buf[1] != '\0')
		exit(1);
d5537 2
a5538 2
	if (buf[0] != '0' || buf[1] != '\0')
		exit(1);
d5540 10
a5549 2
	if (buf[0] != '-' || buf[1] != '1' || buf[2] != '\0')
		exit(1);
a5566 1
			echo "Good, $xxx_convert drops a trailing decimal point."
d5570 1
a5570 1
			echo "But $xxx_convert keeps a trailing decimal point".
d5583 5
a5587 65
: Initialize h_fcntl
h_fcntl=false

: Initialize h_sysfile
h_sysfile=false

: determine filename position in cpp output
echo " "
echo "Computing filename position in cpp output for #include directives..." >&4
echo '#include <stdio.h>' > foo.c
$cat >fieldn <<EOF
$startsh
$cppstdin $cppflags $cppminus <foo.c 2>/dev/null | \
$grep '^[ 	]*#.*stdio\.h' | \
while read cline; do
	pos=1
	set \$cline
	while $test \$# -gt 0; do
		if $test -r \`echo \$1 | $tr -d '"'\`; then
			echo "\$pos"
			exit 0
		fi
		shift
		pos=\`expr \$pos + 1\`
	done
done
EOF
chmod +x fieldn
fieldn=`./fieldn`
$rm -f foo.c fieldn
case $fieldn in
'') pos='???';;
1) pos=first;;
2) pos=second;;
3) pos=third;;
*) pos="${fieldn}th";;
esac
echo "Your cpp writes the filename in the $pos field of the line."

: locate header file
$cat >findhdr <<EOF
$startsh
wanted=\$1
name=''
if test -f $usrinc/\$wanted; then
	echo "$usrinc/\$wanted"
	exit 0
fi
awkprg='{ print \$$fieldn }'
echo "#include <\$wanted>" > foo\$\$.c
$cppstdin $cppminus $cppflags < foo\$\$.c 2>/dev/null | \
$grep "^[ 	]*#.*\$wanted" | \
while read cline; do
	name=\`echo \$cline | $awk "\$awkprg" | $tr -d '"'\`
	case "\$name" in
	*/\$wanted) echo "\$name"; exit 0;;
	*) name='';;
	esac;
done;
$rm -f foo\$\$.c;
case "\$name" in
'') exit 1;;
esac
EOF
chmod +x findhdr
d5666 66
d5736 1
a5736 1
: see which flavor of setpgrp is in use
d5741 5
d5752 1
d5754 6
a5759 2
		exit(1);
	exit(0);
d5762 6
a5767 8
	if $cc $ccflags $ldflags -o set set.c $libs >/dev/null 2>&1; then
		./set 2>/dev/null
		case $? in
		0) echo "You have to use setpgrp() instead of setpgrp(pid, pgrp)." >&4
			val="$undef";;
		*) echo "You have to use setpgrp(pid, pgrp) instead of setpgrp()." >&4
			val="$define";;
		esac
d5769 1
d5771 1
a5771 2
			xxx="USG one, i.e. you use setpgrp()."
			val="$undef"
d5773 11
a5783 2
			xxx="BSD one, i.e. you use setpgrp(pid, pgrp)."
			val="$define"
d5785 1
a5785 1
		echo "Assuming your setpgrp is a $xxx" >&4
d5790 1
a5790 1
set d_bsdpgrp
d5792 1
a5793 1

d5798 1
a5798 1
: check for length of integer
d5803 1
a5803 1
	$cat >try.c <<'EOCP'
d5807 4
a5810 1
	printf("%d\n", sizeof(int));
d5814 8
a5821 2
	if $cc $ccflags try.c -o try >/dev/null 2>&1 && ./try > /dev/null; then
		intsize=`./try`
d5823 2
d5826 8
a5833 2
		dflt='4'
		echo "(I can't seem to compile the test program.  Guessing...)"
d5837 8
d5848 1
a5848 1
$rm -f try.c try
d6044 3
a6046 149
	echo 'vprintf() NOT found.' >&4
		val="$undef"
		val2="$undef"
fi
set d_vprintf
eval $setvar
val=$val2
set d_charvspr
eval $setvar

: see if chown exists
set chown d_chown
eval $inlibc

: see if chroot exists
set chroot d_chroot
eval $inlibc

: see if chsize exists
set chsize d_chsize
eval $inlibc

: check for const keyword
echo " "
echo 'Checking to see if your C compiler knows about "const"...' >&4
$cat >const.c <<'EOCP'
typedef struct spug { int drokk; } spug;
main()
{
	const char *foo;
	const spug y;
}
EOCP
if $cc -c $ccflags const.c >/dev/null 2>&1 ; then
	val="$define"
	echo "Yup, it does."
else
	val="$undef"
	echo "Nope, it doesn't."
fi
set d_const
eval $setvar

: see if crypt exists
echo " "
if set crypt val -f d_crypt; eval $csym; $val; then
	echo 'crypt() found.' >&4
	val="$define"
	cryptlib=''
else
	cryptlib=`./loc Slibcrypt.a "" $xlibpth`
	if $test -z "$cryptlib"; then
		cryptlib=`./loc Mlibcrypt.a "" $xlibpth`
	else
		cryptlib=-lcrypt
	fi
	if $test -z "$cryptlib"; then
		cryptlib=`./loc Llibcrypt.a "" $xlibpth`
	else
		cryptlib=-lcrypt
	fi
	if $test -z "$cryptlib"; then
		cryptlib=`./loc libcrypt.a "" $libpth`
	else
		cryptlib=-lcrypt
	fi
	if $test -z "$cryptlib"; then
		echo 'crypt() NOT found.' >&4
		val="$undef"
	else
		val="$define"
	fi
fi
set d_crypt
eval $setvar

: get csh whereabouts
case "$csh" in
'csh') val="$undef" ;;
*) val="$define" ;;
esac
set d_csh
eval $setvar
full_csh=$csh

: see if cuserid exists
set cuserid d_cuserid
eval $inlibc

: define an alternate in-header-list? function
inhdr='echo " "; td=$define; tu=$undef; yyy=$@@;
cont=true; xxf="echo \"<\$1> found.\" >&4";
case $# in 2) xxnf="echo \"<\$1> NOT found.\" >&4";;
*) xxnf="echo \"<\$1> NOT found, ...\" >&4";;
esac;
case $# in 4) instead=instead;; *) instead="at last";; esac;
while $test "$cont"; do
	xxx=`./findhdr $1`
	var=$2; eval "was=\$$2";
	if $test "$xxx" && $test -r "$xxx";
	then eval $xxf;
	eval "case \"\$$var\" in $undef) . ./whoa; esac"; eval "$var=\$td";
		cont="";
	else eval $xxnf;
	eval "case \"\$$var\" in $define) . ./whoa; esac"; eval "$var=\$tu"; fi;
	set $yyy; shift; shift; yyy=$@@;
	case $# in 0) cont="";;
	2) xxf="echo \"but I found <\$1> $instead.\" >&4";
		xxnf="echo \"and I did not find <\$1> either.\" >&4";;
	*) xxf="echo \"but I found <\$1\> instead.\" >&4";
		xxnf="echo \"there is no <\$1>, ...\" >&4";;
	esac;
done;
while $test "$yyy";
do set $yyy; var=$2; eval "was=\$$2";
	eval "case \"\$$var\" in $define) . ./whoa; esac"; eval "$var=\$tu";
	set $yyy; shift; shift; yyy=$@@;
done'

: see if this is a limits.h system
set limits.h i_limits
eval $inhdr

: see if this is a float.h system
set float.h i_float
eval $inhdr

: See if number of significant digits in a double precision number is known
echo " "
$cat >dbl_dig.c <<EOM
#$i_limits I_LIMITS
#$i_float I_FLOAT
#ifdef I_LIMITS
#include <limits.h>
#endif
#ifdef I_FLOAT
#include <float.h>
#endif
#ifdef DBL_DIG
printf("Contains DBL_DIG");
#endif
EOM
$cppstdin $cppflags $cppminus < dbl_dig.c >dbl_dig.E 2>/dev/null
if $contains 'DBL_DIG' dbl_dig.E >/dev/null 2>&1; then
	echo "DBL_DIG found." >&4
	val="$define"
else
	echo "DBL_DIG NOT found." >&4
	val="$undef"
d6048 4
a6051 2
$rm -f dbl_dig.?
set d_dbl_dig
d6054 10
a6063 2
: see if difftime exists
set difftime d_difftime
d6066 1
a6066 1
: see if this is a dirent system
d6068 10
a6077 1
if xinc=`./findhdr dirent.h`; $test "$xinc"; then
d6079 1
a6079 1
	echo "<dirent.h> found." >&4
d6082 1
a6082 7
	if xinc=`./findhdr sys/dir.h`; $test "$xinc"; then
		echo "<sys/dir.h> found." >&4
		echo " "
	else
		xinc=`./findhdr sys/ndir.h`
	fi
	echo "<dirent.h> NOT found." >&4
d6084 1
a6084 1
set i_dirent
d6087 1
a6087 1
: Look for type of directory structure.
d6089 2
a6090 39
$cppstdin $cppflags $cppminus < "$xinc" > try.c

case "$direntrytype" in
''|' ')
	case "$i_dirent" in
	$define) guess1='struct dirent' ;;
	*) guess1='struct direct'  ;;
	esac
	;;
*)	guess1="$direntrytype"
	;;
esac

case "$guess1" in
'struct dirent') guess2='struct direct' ;;
*) guess2='struct dirent' ;;
esac
		
if $contains "$guess1" try.c >/dev/null 2>&1; then
	direntrytype="$guess1"
	echo "Your directory entries are $direntrytype." >&4
elif $contains "$guess2" try.c >/dev/null 2>&1; then
	direntrytype="$guess2"
	echo "Your directory entries seem to be $direntrytype." >&4
else
	echo "I don't recognize your system's directory entries." >&4
	rp="What type is used for directory entries on this system?"
	dflt="$guess1"
	. ./myread
	direntrytype="$ans"
fi
$rm -f try.c


: see if the directory entry stores field length
echo " "
$cppstdin $cppflags $cppminus < "$xinc" > try.c
if $contains 'd_namlen' try.c >/dev/null 2>&1; then
	echo "Good, your directory entry keeps length information in d_namlen." >&4
d6092 1
d6094 22
a6115 2
	echo "Your directory entry does not know about the d_namlen field." >&4
	val="$undef"
d6117 1
a6117 1
set d_dirnamlen
a6118 141
$rm -f try.c

: see if dlerror exists
xxx_runnm="$runnm"
runnm=false
set dlerror d_dlerror
eval $inlibc
runnm="$xxx_runnm"

: see if dld is available
set dld.h i_dld
eval $inhdr

: see if dlopen exists
xxx_runnm="$runnm"
runnm=false
set dlopen d_dlopen
eval $inlibc
runnm="$xxx_runnm"

: determine which dynamic loading, if any, to compile in
echo " "
dldir="ext/DynaLoader"
case "$usedl" in
$define|y|true)
	dflt='y'
	usedl="$define"
	;;
$undef|n|false)
	dflt='n'
	usedl="$undef"
	;;
*) 
	dflt='n'
	case "$d_dlopen" in
	    $define) dflt='y' ;;
	esac
	case "$i_dld" in
	    $define) dflt='y' ;;
	esac
	: Does a dl_xxx.xs file exist for this operating system
	$test -f ../$dldir/dl_${osname}.xs && dflt='y'
	;;
esac
rp="Do you wish to use dynamic loading?"
. ./myread
usedl="$ans"
case "$ans" in
y*) usedl="$define"
	case "$dlsrc" in
	'')
		if $test -f ../$dldir/dl_${osname}.xs ; then
			dflt="$dldir/dl_${osname}.xs"
		elif $test "$d_dlopen" = "$define" ; then
			dflt="$dldir/dl_dlopen.xs"
		elif $test "$i_dld" = "$define" ; then
			dflt="$dldir/dl_dld.xs"
		else
			dflt=''
		fi
		;;
	*)	dflt="$dldir/$dlsrc"
		;;
	esac
    echo "The following dynamic loading files are available:"
	: Can not go over to $dldir because getfile has path hard-coded in.
    cd ..; ls -C $dldir/dl*.xs; cd UU
    rp="Source file to use for dynamic loading"
    fn="fne"
    . ./getfile
	usedl="$define"
	: emulate basename
	dlsrc=`echo $ans | $sed -e 's@@.*/\([^/]*\)$@@\1@@'`

    $cat << EOM

Some systems may require passing special flags to $cc -c to
compile modules that will be used to create a shared library.
To use no flags, say "none".

EOM
    case "$cccdlflags" in
    '')	case "$gccversion" in
		'') case "$osname" in
			hpux)	dflt='+z' ;;
			next)	dflt='none' ;;
			solaris|svr4*|esix*) dflt='-Kpic' ;;
			sunos)	dflt='-pic' ;;
			*)	dflt='none' ;;
		    esac ;;
		*)	dflt='-fpic' ;;
	    esac ;;
    *)	dflt="$cccdlflags" ;;
    esac
    rp="Any special flags to pass to $cc -c to compile shared library modules?"
    . ./myread
    case "$ans" in
    none) cccdlflags=' ' ;;
    *) cccdlflags="$ans" ;;
    esac

    cat << EOM

Some systems use ld to create libraries that can be dynamically loaded,
while other systems (such as those using ELF) use $cc.

EOM
	case "$ld" in
	'')	$cat >try.c <<'EOM'
/* Test for whether ELF binaries are produced */
#include <fcntl.h>
#include <stdlib.h>
main() {
	char b[4];
	int i = open("a.out",O_RDONLY);
	if(i == -1) 
		exit(1); /* fail */
	if(read(i,b,4)==4 && b[0]==127 && b[1]=='E' && b[2]=='L' && b[3]=='F')
		exit(0); /* succeed (yes, it's ELF) */
	else
		exit(1); /* fail */
}
EOM
		if $cc $ccflags try.c >/dev/null 2>&1 && ./a.out; then
			cat <<EOM
You appear to have ELF support.  I'll use $cc to build dynamic libraries.
EOM
			dflt="$cc"
		else
			echo "I'll use ld to build dynamic libraries."
			dflt='ld'
		fi
		rm -f try.c a.out
		;;
	*)	dflt="$ld"
		;;
	esac

    rp="What command should be used to create dynamic libraries?"
    . ./myread
	ld="$ans"
d6120 10
a6129 37
    cat << EOM

Some systems may require passing special flags to $ld to create a
library that can be dynamically loaded.  If your ld flags include
-L/other/path options to locate libraries outside your loader's normal
search path, you may need to specify those -L options here as well.  To
use no flags, say "none".

EOM
    case "$lddlflags" in
    '') case "$osname" in
			hpux)  dflt='-b' ;;
			linux)	dflt='-shared' ;;
			next)  dflt='none' ;;
			solaris) dflt='-G' ;;
			sunos) dflt='-assert nodefinitions' ;;
			svr4*|esix*) dflt="-G $ldflags" ;;
	        *)     dflt='none' ;;
			esac
			;;
    *) dflt="$lddlflags" ;;
    esac

: Try to guess additional flags to pick up local libraries.
for thisflag in $ldflags; do
	case "$thisflag" in
	-L*)
		case " $dflt " in
		*" $thisflag "*) ;;
		*) dflt="$dflt $thisflag" ;;
		esac
		;;
	esac
done

case "$dflt" in
'') dflt='none' ;;
d6132 3
a6134 6
    rp="Any special flags to pass to $ld to create a dynamically loaded library?"
    . ./myread
    case "$ans" in
    none) lddlflags=' ' ;;
    *) lddlflags="$ans" ;;
    esac
d6136 3
a6138 1
	cat <<EOM
d6140 3
a6142 3
Some systems may require passing special flags to $cc to indicate that
the resulting executable will use dynamic linking.  To use no flags,
say "none".
d6144 14
d6159 11
a6169 24
    case "$ccdlflags" in
    '') case "$osname" in
		hpux)	dflt='-Wl,-E' ;;
		linux)	dflt='-rdynamic' ;;
		next)	dflt='none' ;;
		sunos)	dflt='none' ;;
		*)	dflt='none' ;;
	    esac ;;
    *)  dflt="$ccdlflags" ;;
    esac
    rp="Any special flags to pass to $cc to use dynamic loading?"
    . ./myread
    case "$ans" in
    none) ccdlflags=' ' ;;
    *) ccdlflags="$ans" ;;
    esac
    ;;
*)  usedl="$undef"
	ld='ld'
    dlsrc='dl_none.xs'
    lddlflags=''
    ccdlflags=''
    ;;
esac
d6171 3
a6173 6
val="$undef"
case "$osname" in
esix*|svr4*)
    case "$usedl" in
    $define)
	$cat <<EOM
d6175 3
a6177 4
System V Release 4 systems can support dynamic loading
only if libperl is created as a shared library.

EOM
d6179 13
a6191 7
	;;
    esac ;;
esac
set d_shrplib; eval $setvar
case "$d_shrplib" in
$define)
    cat <<EOM >&4
d6193 3
a6195 5
Be sure to add the perl source directory to the LD_LIBRARY_PATH
environment variable before running make:
    LD_LIBRARY_PATH=`cd ..;pwd`; export LD_LIBRARY_PATH
or
    setenv LD_LIBRARY_PATH `cd ..;pwd`
d6197 5
a6201 8
EOM
;;
esac
case "$d_shrplib" in
$define)
	case "$shrpdir" in
	"")	dflt="$archlib/CORE";;
	*)	dflt="$shrpdir";;
a6202 4
	rp="What directory should we install the shared libperl into?"
	fn="d~"
	. ./getfile
	shrpdir="$ans"
d6204 1
a6204 1
*)	shrpdir='none'
d6208 42
d6312 3
a6314 2
        printf ("1\n") ;
	    exit(0);
d6318 8
a6325 7
		/* try putting a leading underscore */
        symbol = dlsym(handle, "_fred") ;
        if (symbol == NULL) {
            printf ("2\n") ;
	    	exit(0);
		}
        printf ("3\n") ;
d6328 3
a6330 2
        printf ("4\n") ;
	exit(0);
d6333 1
d6335 2
a6336 1
		$ld $lddlflags -o dyna.$dlext dyna.o > /dev/null 2>&1 && 
d6354 1
a6354 1
$rm -f fred fred.? dyna.$dlext dyna.?
d6384 1
a6384 1
		$cc $cppflags "-DI_SYS_FILE" open3.c -o open3 >/dev/null 2>&1 ; then
d6395 1
a6395 1
		$cc "-DI_FCNTL" open3.c -o open3 >/dev/null 2>&1 ; then
d6560 1
a6560 1
		if test "$status" -eq "$rd_nodata"; then
d6630 2
a6631 2
: see if getpgrp exists
set getpgrp d_getpgrp
d6646 19
d6758 4
d7070 55
a7124 9
eval $inlibc

: can bcopy handle overlapping blocks?
val="$undef"
case "$d_bcopy" in
"$define")
	echo " "
	echo "Checking to see if your bcopy() can do overlapping copies..." >&4
	$cat >foo.c <<'EOCP'
d7133 2
d7152 2
a7153 1
	if $cc $ccflags $ldflags foo.c -o safebcpy $libs >/dev/null 2>&1; then
d7159 3
d7165 3
d7181 23
a7203 1
	$cat >foo.c <<'EOCP'
d7212 2
d7231 2
a7232 1
	if $cc $ccflags $ldflags foo.c -o safemcpy $libs >/dev/null 2>&1; then
d7238 3
d7244 3
d7254 55
d7394 53
a7508 1
: see if sigvector exists -- since sigvec will match the substring
d7510 7
a7516 14
if set sigvector val -f d_sigvectr; eval $csym; $val; then
	echo 'sigvector() found--you must be running HP-UX.' >&4
	val="$define"; set d_sigvectr; eval $setvar
	val="$define"; set d_sigvec; eval $setvar
else
: try the original name
	d_sigvectr="$undef"
	if set sigvec val -f d_sigvec; eval $csym; $val; then
		echo 'sigvec() found.' >&4
		val="$define"; set d_sigvec; eval $setvar
	else
		echo 'sigvec() not found--race conditions with signals may occur.' >&4
		val="$undef"; set d_sigvec; eval $setvar
	fi
d7519 13
a7531 3
: see if we have sigaction
set sigaction d_sigaction
eval $inlibc
d7533 8
d7546 1
a7546 1
	$cat >set.c <<EOP
d7559 1
a7559 1
	if $cc $ccflags $ldflags set.c -o set $libs >/dev/null 2>&1; then
d7564 1
a7564 1
			$cat <<EOM
d7566 1
d7571 1
a7571 1
		echo "Sigsetjmp not found." >&4
d7578 1
a7578 1
	$undef) echo "Sigsetjmp not found." >&4;;
d7607 4
a7610 4
		echo "You don't have Berkeley networking in libc.a..." >&4
		if test -f /usr/lib/libnet.a; then
			( (nm $nm_opt /usr/lib/libnet.a | eval $nm_extract) ||  \
			ar t /usr/lib/libnet.a) 2>/dev/null >> libc.list
d7623 1
a7623 1
				echo "or even in libnet.a, which is peculiar." >&4
d7705 1
a7705 1
main() { 
d7747 1
d7756 1
a7756 1
main() { 
d7769 1
a7769 1
			echo "Even its _base field acts std."
d7848 12
d8163 1
a8163 1
		echo"(I can't seem to compile the test program...)"
a8173 19
: Define several unixisms. Hints files or command line options
: can be used to override them.
case "$ar" in
'') ar='ar';;
esac
case "$lib_ext" in
'') lib_ext='.a';;
esac
case "$obj_ext" in
'') obj_ext='.o';;
esac
case "$path_sep" in
'') path_sep=':';;
esac
: Which makefile gets called first.  This is used by make depend.
case "$firstmakefile" in
'') firstmakefile='makefile';;
esac

d8270 49
d8348 4
a8351 2
		echo "I can't seem to compile the test program." >&4
		db_hashtype=int
d8356 1
a8356 1
*)	db_hashtype=int
d8390 4
a8393 2
		echo "I can't seem to compile the test program." >&4
		db_prefixtype='int'
d8398 1
a8398 1
*)	db_prefixtype='int'
d8418 1
a8418 1
void main() {
d8420 1
a8420 1
main() {
d8438 1
d8440 1
a8440 1
	if $cc -c -DTRY=$defvoidused try.c >.out 2>&1 ; then
d8449 1
a8449 1
		if $cc -c -DTRY=1 try.c >/dev/null 2>&1 ; then
d8451 1
a8451 1
			if $cc -c -DTRY=3 try.c >/dev/null 2>&1 ; then
d8453 1
a8453 1
				if $cc -c -DTRY=7 try.c >/dev/null 2>&1 ; then
d8458 1
a8458 1
					if $cc -c -DTRY=11 try.c >/dev/null 2>&1 ; then
d8468 1
a8468 1
				if $cc -c -DTRY=13 try.c >/dev/null 2>&1 ; then
d8472 1
a8472 1
					if $cc -c -DTRY=5 try.c >/dev/null 2>&1 ; then
d8533 5
a8537 1
: Find type of 2nd arg to getgroups
d8539 2
a8540 2
case "$d_getgrps" in
'define')
d8546 2
a8547 2
What is the type of the second argument to getgroups()?  Usually this
is the same as group ids, $gidtype, but not always.
d8550 1
a8550 1
	rp='What type is the second argument to getgroups()?'
d8566 36
d8659 3
a8661 1
	$cat >try.c <<'EOCP'
d8663 8
d8684 1
d8687 1
a8687 1
	if $cc try.c -o try >/dev/null 2>&1 ; then
d8701 1
a8701 1
$rm -f try.c try
d8714 2
a8715 2
ar rc bar.a bar2.o bar1.o >/dev/null 2>&1
if $cc $ccflags $ldflags -o foobar foo.o bar.a $libs > /dev/null 2>&1 &&
d8720 2
a8721 2
elif ar ts bar.a >/dev/null 2>&1 &&
	$cc $ccflags $ldflags -o foobar foo.o bar.a $libs > /dev/null 2>&1 &&
d8848 1
a8848 1
#else
a8851 1
#endif
d8942 1
a8942 1
#else
a8945 1
#endif
d9010 42
a9051 5
#ifdef NSIG
printf("NSIG %d\n", NSIG);
#else
#ifdef _NSIG
printf("NSIG %d\n", _NSIG);
d9053 6
d9060 3
d9109 1
a9109 1
if $cc $ccflags signal.c -o signal $ldflags >/dev/null 2>&1; then
d9121 1
a9121 1
		$awk '{ printf $1; printf " %d\n", ++s; }' >signal.lst
d9190 2
d9195 8
a9202 2
if $cc $ccflags $ldflags -o ssize ssize.c $libs > /dev/null 2>&1 ; then
	ssizetype=`./ssize`
d9205 5
a9209 2
	echo "(I can't compile the test program--please enlighten me!)"
	$cat <<EOM
d9212 1
a9212 1
be signed.  Common values are int and long.
d9219 1
a9219 1
$rm -f ssize ssize.[co]
a9364 24
: see if memory.h is available.
val=''
set memory.h val
eval $inhdr

: See if it conflicts with string.h
case "$val" in
$define)
	case "$strings" in
	'') ;;
	*)
		$cppstdin $cppflags $cppminus < $strings > mem.h
		if $contains 'memcpy' mem.h >/dev/null 2>&1; then
			echo " "
			echo "We won't be including <memory.h>."
			val="$undef"
		fi
		$rm -f mem.h
		;;
	esac
esac
set i_memory
eval $setvar

d9703 4
d9719 2
a9720 2
: see if this is a unistd.h system
set unistd.h i_unistd
d9727 4
d9773 16
a9788 13
	if $test -f $xxx/$xxx.xs; then
		known_extensions="$known_extensions $xxx"
	else
		if $test -d $xxx; then
			cd $xxx
			for yyy in * ; do
				if $test -f $yyy/$yyy.xs; then
					known_extensions="$known_extensions $xxx/$yyy"
				fi
			done
			cd ..
		fi
	fi
d9819 1
a9819 1
    SAFE) case "$usesafe" in 
d9968 4
a9971 4
# This file was produced by running the Configure script. It holds all the
# definitions figured out by Configure. Should you modify one of these values,
# do not forget to propagate your changes by running "Configure -der". You may
# instead choose to run each of the .SH files by yourself, or "Configure -S".
d10001 1
d10041 1
d10043 1
d10045 1
d10080 1
d10082 1
d10086 1
d10091 2
d10095 1
d10141 1
d10163 1
a10169 1
d_shrplib='$d_shrplib'
a10170 1
d_sigintrp='$d_sigintrp'
a10171 2
d_sigvec='$d_sigvec'
d_sigvectr='$d_sigvectr'
d10184 3
d10245 1
d10271 1
d10284 1
d10293 1
d10299 1
d10323 1
d10334 1
d10342 1
d10409 2
a10410 1
shrpdir='$shrpdir'
d10458 2
d10461 2
a10462 1
usesafe='$usesafe'
d10470 1
@


1.2
log
@Make it believe us when we say afs is not running.
@
text
@d21 1
a21 1
# $Id: Configure,v 1.1.1.1 1996/08/19 10:11:33 downsj Exp $
d89 5
a93 4
if test ! -t 0; then
	echo "Say 'sh $me', not 'sh <$me'"
	exit 1
fi
@


1.1
log
@Initial revision
@
text
@d21 1
a21 1
# $Id: Head.U,v 3.0.1.8 1995/07/25 13:40:02 ram Exp $
d1937 8
a1944 7
: is AFS running?
echo " "
if test -d /afs; then
	echo "AFS may be running... I'll be extra cautious then..." >&4
	afs=true
else
	echo "AFS does not seem to be running..." >&4
d1946 1
@


1.1.1.1
log
@Import of Perl 5.003 into the tree.  Makefile.bsd-wrapper and
config.sh.OpenBSD are the only local changes.
@
text
@@


1.1.1.2
log
@perl5.005_03
@
text
@d17 2
a18 2
# comp.sources.misc and is available on CPAN under authors/id/RAM so
# you may fetch it yourself from your nearest archive site.)
d21 1
a21 1
# $Id: Head.U,v 3.0.1.9 1997/02/28 15:02:09 ram Exp $
d23 1
a23 2
# Generated on Tue Jul  7 10:10:21 EDT 1998 [metaconfig 3.0 PL70]
# (with additional metaconfig patches by jhi@@iki.fi)
d58 1
a58 1
: Proper separator for the PATH environment variable
d61 4
a64 8
if test -d c:/. ; then
    if test -n "$OS2_SHELL"; then
		p_=\;
		PATH=`cmd /c "echo %PATH%" | tr '\\\\' / `
		OS2_SHELL=`cmd /c "echo %OS2_SHELL%" | tr '\\\\' / | tr '[A-Z]' '[a-z]'`
	elif test -n "$DJGPP"; then
		p_=\;
	fi
d88 4
a91 8
: shall we be using ksh?
inksh=''
needksh=''
avoidksh=''
newsh=/bin/ksh
changesh=''
if (PATH=.; alias -x) >/dev/null 2>&1; then
		inksh=true
d93 2
d96 8
a103 6
	needksh='to avoid sh bug in "here document" expansion'
fi
if test -d /usr/lpp -a -f /usr/bin/bsh -a -f /usr/bin/uname; then
	if test X`/usr/bin/uname -v` = X4; then
		avoidksh="to avoid AIX 4's /bin/sh"
		newsh=/usr/bin/bsh
d105 3
a107 16
fi
case "$inksh/$needksh" in
/[a-z]*)
		ENV=''
		changesh=true
		reason="$needksh"
	;;
esac
case "$inksh/$avoidksh" in
true/[a-z]*)
	changesh=true
	reason="$avoidksh"
	;;
esac
case "$inksh/$needksh-$avoidksh-" in
true/--)
d110 1
a110 1
mainly on older exotic systems.  If yours does, try the Bourne shell instead.)
d112 1
a112 11
	;;
esac
case "$changesh" in
true)
	echo "(Feeding myself to $newsh $reason.)"
	case "$0" in
	Configure|*/Configure) exec $newsh $0 "$@@";;
	*) exec $newsh Configure "$@@";;
	esac
	;;
esac
a113 10
: if needed set CDPATH to a harmless value that is not chatty
: avoid bash 2.02 problems with empty CDPATH.
case "$CDPATH" in
'')	;;
*)	case "$SHELL" in
	*bash*)	CDPATH='.' ;;
	*)		CDPATH='' ;;
	esac
	;;
esac
a120 1
nonxs_ext=''
a121 1
useopcode=''
d123 1
a128 2
ar=''
full_ar=''
d150 1
a151 1
gzip=''
a166 1
nm=''
d176 1
a184 1
tee=''
a193 1
zip=''
d210 1
a210 3
_a=''
_exe=''
_o=''
a218 1
ansi2knr=''
a274 4
d_endhent=''
d_endnent=''
d_endpent=''
d_endsent=''
a285 10
i_sysmount=''
d_fstatfs=''
d_statfsflags=''
i_sysstatvfs=''
d_fstatvfs=''
i_mntent=''
d_getmntent=''
d_hasmntopt=''
d_ftime=''
d_gettimeod=''
a287 2
d_gethbyaddr=''
d_gethbyname=''
a292 1
d_gethostprotos=''
a293 6
d_getnbyaddr=''
d_getnbyname=''
d_getnent=''
d_getnetprotos=''
d_getpent=''
d_getpgid=''
a294 1
d_bsdgetpgrp=''
a297 8
d_getpbyname=''
d_getpbynumber=''
d_getprotoprotos=''
d_getsent=''
d_getservprotos=''
d_getsbyname=''
d_getsbyport=''
d_gnulibc=''
a298 1
d_inetaton=''
a300 1
d_lchown=''
a303 4
d_longdbl=''
longdblsize=''
d_longlong=''
longlongsize=''
a327 5
d_pthread_yield=''
d_sched_yield=''
d_pthreads_created_joinable=''
i_pthread=''
i_machcthreads=''
a336 1
d_sanemcmp=''
a343 2
d_setgrps=''
d_sethent=''
a345 2
d_setnent=''
d_setpent=''
d348 1
a348 1
d_bsdsetpgrp=''
a356 1
d_setsent=''
a357 3
d_setvbuf=''
d_sfio=''
usesfio=''
d365 1
d367 3
a369 1
d_sigsetjmp=''
a382 1
stdio_filbuf=''
a391 3
d_strtod=''
d_strtol=''
d_strtoul=''
a405 3
d_semctl_semid_ds=''
d_semctl_semun=''
d_union_semun=''
d420 1
d424 1
a425 2
ebcdic=''
doublesize=''
a432 1
i_arpainet=''
a443 4
d_grpasswd=''
d_setgrent=''
d_getgrent=''
d_endgrent=''
a450 1
i_netdb=''
a458 2
d_pwgecos=''
d_pwpasswd=''
a459 3
d_setpwent=''
d_getpwent=''
d_endpwent=''
a460 1
i_sfio=''
a473 1
i_sysresrc=''
a478 1
i_syswait=''
a487 1
i_values=''
a492 2
longsize=''
shortsize=''
a493 3
libperl=''
shrpenv=''
useshrplib=''
a498 1
ignore_versioned_solibs=''
a501 1
make_set_make=''
a531 4
netdb_hlen_type=''
netdb_host_type=''
netdb_name_type=''
netdb_net_type=''
d535 3
a542 1
apiversion=''
a543 2
subversion=''
version=''
a545 1
pidtype=''
a551 1
ptrsize=''
a555 1
selectminbits=''
a556 1
sh=''
a557 1
sig_name_init=''
a558 1
sig_num_init=''
a569 1
src=''
d574 1
a575 1
trnl=''
a580 3
useperlio=''
d_oldpthreads=''
usethreads=''
a593 6
installusrbinperl=''

ccsymbols=''
cppsymbols=''
cppccsymbols=''

d614 1
a614 1
al="$al _AIX _AIX32 _AIX370 _AIX41 _AM29000 _COFF _CRAY _CX_UX _EPI _POWER"
d668 1
d670 18
d696 3
a698 4
glibpth="/shlib /usr/shlib /lib/pa1.1 /usr/lib/large"
glibpth="$glibpth /lib /usr/lib $xlibpth"
glibpth="$glibpth /lib/large /usr/lib/small /lib/small"
glibpth="$glibpth /usr/ccs/lib /usr/ucblib /usr/local/lib"
a704 17
: default library list
libswanted=''
: some systems want only to use the non-versioned libso:s
ignore_versioned_solibs=''
: Possible local include directories to search.
: Set locincpth to "" in a hint file to defeat local include searches.
locincpth="/usr/local/include /opt/local/include /usr/gnu/include"
locincpth="$locincpth /opt/gnu/include /usr/GNU/include /opt/GNU/include"
:
: no include file wanted by default
inclwanted=''

: Trailing extension.  Override this in a hint file, if needed.
_exe=''
: Extra object files, if any, needed on this platform.
archobjs=''
groupstype=''
a707 5
: set useposix=false in your hint file to disable the POSIX extension.
useposix=true
: set useopcode=false in your hint file to disable the Opcode extension.
useopcode=true
: set usethreads on the Configure command line to enable threads.
d709 1
a709 2
: If anyone needs -lnet, put it in a hint file.
libswanted='sfio socket inet nsl nm ndbm gdbm dbm db malloc dl'
d719 12
a730 62
: Find the basic shell for Bourne shell scripts
case "$sh" in
'')
	case "$SYSTYPE" in
	*bsd*|sys5*) xxx="/$SYSTYPE/bin/sh";;
	*) xxx='/bin/sh';;
	esac
	if test -f "$xxx"; then
		sh="$xxx"
	else
		: Build up a list and do a single loop so we can 'break' out.
		pth=`echo $PATH | sed -e "s/$p_/ /g"`
		for xxx in sh bash ksh pdksh ash; do
			for p in $pth; do
				try="$try ${p}/${xxx}"
			done
		done
		for xxx in $try; do
			if test -f "$xxx"; then
				sh="$xxx";
				break
			elif test -f "$xxx.exe"; then
				sh="$xxx";
				break
			fi
		done
	fi
	;;
esac

case "$sh" in
'')	cat <<EOM >&2
$me:  Fatal Error:  I can't find a Bourne Shell anywhere.  

Usually it's in /bin/sh.  How did you even get this far?
Please contact perlbug@@perl.com and we'll try to straighten this all out.
EOM
	exit 1
	;;
esac

: see if sh knows # comments
if `$sh -c '#' >/dev/null 2>&1`; then
	shsharp=true
	spitshell=cat
	xcat=/bin/cat
	test -f $xcat || xcat=/usr/bin/cat
	echo "#!$xcat" >try
	$eunicefix try
	chmod +x try
	./try > today
	if test -s today; then
		sharpbang='#!'
	else
		echo "#! $xcat" > try
		$eunicefix try
		chmod +x try
		./try > today
		if test -s today; then
			sharpbang='#! '
		else
			sharpbang=': use '
d732 2
a733 1
	fi
d735 2
a736 11
	echo " "
	echo "Your $sh doesn't grok # comments--I will strip them later on."
	shsharp=false
	cd ..
	echo "exec grep -v '^[ 	]*#'" >spitshell
	chmod +x spitshell
	$eunicefix spitshell
	spitshell=`pwd`/spitshell
	cd UU
	echo "I presume that if # doesn't work, #! won't work either!"
	sharpbang=': use '
d738 3
a740 6
rm -f try today

: figure out how to guarantee sh startup
case "$startsh" in
'') startsh=${sharpbang}${sh} ;;
*)
d742 2
a743 13
cat >try <<EOSS
$startsh
set abc
test "$?abc" != 1
EOSS

chmod +x try
$eunicefix try
if ./try; then
	: echo "Yup, it does."
else
	echo "Hmm... '$startsh' does not guarantee sh startup..."
	echo "You may have to fix up the shell scripts to make sure $sh runs them."
d745 11
a755 17
rm -f try


: Save command line options in file UU/cmdline.opt for later use in
: generating config.sh.
cat > cmdline.opt <<EOSH
# Configure command line arguments.
config_arg0='$0'
config_args='$*'
config_argc=$#
EOSH
argn=1
for arg in "$@@"; do
	cat >>cmdline.opt <<EOSH
config_arg$argn='$arg'
EOSH
	argn=`expr $argn + 1`
d757 7
a828 4
cat >optdef.sh <<EOS
$startsh
EOS

d848 1
a848 1
	-s) shift; silent=true; realsilent=true;;
d852 1
a852 1
	-S) shift; silent=true; extractsh=true;;
d878 1
a878 1
	-V) echo "$me generated by metaconfig 3.0 PL70." >&2
d889 1
a889 1
Usage: $me [-dehrsEKOSV] [-f config.sh] [-D symbol] [-D symbol=value]
a912 11
: Sanity checks
case "$fastread$alldone" in
yescont|yesexit) ;;
*)
	if test ! -t 0; then
		echo "Say 'sh Configure', not 'sh <Configure'"
		exit 1
	fi
	;;
esac

d922 20
d951 7
d979 8
a986 18
: Find the path to the source tree
case "$src" in
'') case "$0" in
    */*) src=`echo $0 | sed -e 's%/[^/][^/]*$%%'`;;
    *)   src='.';;
    esac;;
esac
case "$src" in
'')	src=/
	rsrc=/
	;;
/*) rsrc="$src";;
*) rsrc="../$src";;
esac
if test -f $rsrc/Configure && \
	$contains "^package=$package$" $rsrc/Configure >/dev/null 2>&1
then
   : found it, so we are ok.
d988 18
a1005 8
	rsrc=''
	for src in . .. ../.. ../../.. ../../../..; do
		if test -f ../$src/Configure && \
			$contains "^package=$package$" ../$src/Configure >/dev/null 2>&1
		then
			rsrc=../$src
			break
		fi
d1007 5
a1011 4
fi
case "$rsrc" in
'')
	cat <<EOM >&4
d1013 4
a1016 2
Sorry, I can't seem to locate the source dir for $package.  Please start
Configure with an explicit path -- i.e. /some/path/Configure.
d1019 6
a1024 50
	exit 1
	;;
../.)	rsrc='..';;
*)
	echo " "
	echo "Sources for $package found in \"$src\"." >&4
	;;
esac

: script used to extract .SH files with variable substitutions
cat >extract <<'EOS'
CONFIG=true
echo "Doing variable substitutions on .SH files..."
if test -f $src/MANIFEST; then
	set x `awk '{print $1}' <$src/MANIFEST | grep '\.SH$'`
else
	echo "(Looking for .SH files under the source directory.)"
	set x `(cd $src; find . -name "*.SH" -print)`
fi
shift
case $# in
0) set x `(cd $src; echo *.SH)`; shift;;
esac
if test ! -f $src/$1; then
	shift
fi
mkdir_p='
name=$1;
create="";
while test $name; do
	if test ! -d "$name"; then
		create="$name $create";
		name=`echo $name | sed -e "s|^[^/]*$||"`;
		name=`echo $name | sed -e "s|\(.*\)/.*|\1|"`;
	else
		name="";
	fi;
done;
for file in $create; do
	mkdir $file;
done
'
for file in $*; do
	case "$src" in
	".")
		case "$file" in
		*/*)
			dir=`expr X$file : 'X\(.*\)/'`
			file=`expr X$file : 'X.*/\(.*\)'`
			(cd $dir && . ./$file)
d1027 2
a1028 1
			. ./$file
d1031 9
a1039 140
		;;
	*)
		case "$file" in
		*/*)
			dir=`expr X$file : 'X\(.*\)/'`
			file=`expr X$file : 'X.*/\(.*\)'`
			(set x $dir; shift; eval $mkdir_p)
			sh <$src/$dir/$file
			;;
		*)
			sh <$src/$file
			;;
		esac
		;;
	esac
done
if test -f $src/config_h.SH; then
	if test ! -f config.h; then
	: oops, they left it out of MANIFEST, probably, so do it anyway.
	. $src/config_h.SH
	fi
fi
EOS

: extract files and exit if asked to do so
case "$extractsh" in
true)
	case "$realsilent" in
	true) ;;
	*) exec 1>&4;;
	esac
	case "$config_sh" in
	'') config_sh='config.sh';;
	esac
	echo " "
	echo "Fetching answers from $config_sh..."
	cd ..
	. $config_sh
	test "$override" && . ./optdef.sh
	echo " "
	. UU/extract
	rm -rf UU
	echo "Done."
	exit 0
	;;
esac

: Eunice requires " " instead of "", can you believe it
echo " "
: Here we go...
echo "Beginning of configuration questions for $package."

trap 'echo " "; test -d ../UU && rm -rf X $rmlist; exit 1' 1 2 3 15

: first determine how to suppress newline on echo command
echo " "
echo "Checking echo to see how to suppress newlines..."
(echo "hi there\c" ; echo " ") >.echotmp
if $contains c .echotmp >/dev/null 2>&1 ; then
	echo "...using -n."
	n='-n'
	c=''
else
	cat <<'EOM'
...using \c
EOM
	n=''
	c='\c'
fi
echo $n "The star should be here-->$c"
echo '*'
rm -f .echotmp

: Now test for existence of everything in MANIFEST
echo " "
if test -f $rsrc/MANIFEST; then
	echo "First let's make sure your kit is complete.  Checking..." >&4
	awk '$1 !~ /PACK[A-Z]+/ {print $1}' $rsrc/MANIFEST | split -50
	rm -f missing
	tmppwd=`pwd`
	for filelist in x??; do
		(cd $rsrc; ls `cat $tmppwd/$filelist` >/dev/null 2>>$tmppwd/missing)
	done
	if test -s missing; then
		cat missing >&4
		cat >&4 <<'EOM'

THIS PACKAGE SEEMS TO BE INCOMPLETE.

You have the option of continuing the configuration process, despite the
distinct possibility that your kit is damaged, by typing 'y'es.  If you
do, don't blame me if something goes wrong.  I advise you to type 'n'o
and then contact perlbug@@perl.com.

EOM
		echo $n "Continue? [n] $c" >&4
		read ans
		case "$ans" in
		y*)
			echo "Continuing..." >&4
			rm -f missing
			;;
		*)
			echo "ABORTING..." >&4
			kill $$
			;;
		esac
	else
		echo "Looks good..."
	fi
else
	echo "There is no MANIFEST file.  I hope your kit is complete !"
fi
rm -f missing x??

echo " "
: Find the appropriate value for a newline for tr
if test -n "$DJGPP"; then
       trnl='\012'
fi
if test X"$trnl" = X; then
	case "`echo foo|tr '\n' x 2>/dev/null`" in
	foox) trnl='\n' ;;
	esac
fi
if test X"$trnl" = X; then
	case "`echo foo|tr '\012' x 2>/dev/null`" in
	foox) trnl='\012' ;;
	esac
fi
if test X"$trnl" = X; then
	cat <<EOM >&2

$me: Fatal Error: cannot figure out how to translate newlines with 'tr'.

EOM
	exit 1
fi

: compute the number of columns on the terminal for proper question formatting
a1061 1
$startsh
d1084 1
a1084 1
	aok=''; eval "ans=\\"\$answ\\"" && aok=y
a1085 12
	"!")
		sh 1>&4
		echo " "
		$myecho
		;;
	!*)
		set x \`expr "X\$ans" : "X!\(.*\)\$"\`
		shift
		sh 1>&4 -c "\$*"
		echo " "
		$myecho
		;;
d1103 12
d1121 1
a1121 1
			ans=\`echo $n "\$ans$c" | tr '$trnl' ' '\`
d1149 1
a1149 1
persist across sessions for $package.
d1157 1
a1157 4
user=`(logname) 2>/dev/null`
case "$user" in
'') user=`whoami 2>&1`;;
esac
d1171 1
a1171 1

d1203 1
a1203 1
on the non-interactive behaviour for the remainder of the execution.
d1213 1
a1213 1
have, let perlbug@@perl.com know how I blew it.
d1234 68
d1330 2
a1331 6
		if test -n "$DJGPP"; then
			echo \$dir/\$thing.exe
		else
			: on Eunice apparently
			echo \$dir/\$thing
		fi
d1351 1
a1352 1
make
a1362 1
ar
a1367 1
gzip
a1369 1
ln
a1370 1
nm
a1374 1
tee
a1376 1
zip
d1381 1
a1381 13
	eval xxx=\$$file
	case "$xxx" in
	/*|?:[\\/]*)
		if test -f "$xxx"; then
			: ok
		else
			echo "WARNING: no $xxx -- ignoring your setting for $file." >&4
			xxx=`./loc $file $file $pth`
		fi
		;;
	'') xxx=`./loc $file $file $pth`;;
	*) xxx=`./loc $xxx $xxx $pth`;;
	esac
d1402 1
a1402 13
	eval xxx=\$$file
	case "$xxx" in
	/*|?:[\\/]*)
		if test -f "$xxx"; then
			: ok
		else
			echo "WARNING: no $xxx -- ignoring your setting for $file." >&4
			xxx=`./loc $file $file $pth`
		fi
		;;
	'') xxx=`./loc $file $file $pth`;;
	*) xxx=`./loc $xxx $xxx $pth`;;
	esac
a1423 6
case "$ln" in
ln)
	echo "Substituting cp for ln."
	ln=$cp
	;;
esac
d1481 2
a1488 42
*)	# There is a discontinuity in EBCDIC between 'I' and 'J'
        # (0xc9 and 0xd1), therefore that is a nice testing point.
        if test "X$up" = X -o "X$low" = X; then
	    case "`echo IJ | $tr '[I-J]' '[i-j]' 2>/dev/null`" in
	    ij) up='[A-Z]'
	        low='[a-z]'
		;;
	    esac
        fi
	if test "X$up" = X -o "X$low" = X; then
	    case "`echo IJ | $tr I-J i-j 2>/dev/null`" in
	    ij) up='A-Z'
		low='a-z'
		;;
	    esac
        fi
	if test "X$up" = X -o "X$low" = X; then
	    case "`echo IJ | od -x 2>/dev/null`" in
	    *C9D1*|*c9d1*)
		echo "Hey, this might be EBCDIC." >&4
		if test "X$up" = X -o "X$low" = X; then
		    case "`echo IJ | $tr '[A-IJ-RS-Z]' '[a-ij-rs-z]' 2>/dev/null`" in
		    ij) up='[A-IJ-RS-Z]'
		        low='[a-ij-rs-z]'
			;;
		    esac
		fi
		if test "X$up" = X -o "X$low" = X; then
		    case "`echo IJ | $tr A-IJ-RS-Z a-ij-rs-z 2>/dev/null`" in
		    ij) up='A-IJ-RS-Z'
		        low='a-ij-rs-z'
			;;
		    esac
		fi
		;;
	    esac
	fi
esac
case "`echo IJ | $tr \"$up\" \"$low\" 2>/dev/null`" in
ij)
    echo "Using $up and $low to convert case." >&4
    ;;
d1490 2
a1491 4
    echo "I don't know how to translate letters from upper to lower case." >&4
    echo "Your tr is not acting any way I know of." >&4
    exit 1
    ;;
a1508 2
# tr '[A-Z]' '[a-z]' would not work in EBCDIC
# because the A-Z/a-z are not consecutive.
d1510 1
a1510 1
	./tr '[A-Z]' '[a-z]' | $tr $trnl ' '`
a1539 1
		tmp_sh="$sh"
a1543 5
		: Older versions did not always set $sh.  Catch re-use of such
		: an old config.sh.
		case "$sh" in
		'') sh="$tmp_sh" ;;
		esac
d1551 1
a1551 2
First time through, eh?  I have some defaults handy for some systems
that need some extra help getting the Configure answers right:
d1554 1
a1554 1
	(cd $src/hints; ls -C *.sh) | $sed 's/\.sh/   /g' >&4
d1557 1
a1557 1
	: tests or hints, please send them to perlbug@@perl.com
d1563 1
a1563 3
	$test -f /lynx.os && osname=lynxos
	$test -f /unicos && osname=unicos && osvers=`$uname -r`
	$test -f /unicosmk.ar && osname=unicosmk && osvers=`$uname -r`
d1570 2
a1571 2
	if $test -d /MachTen -o -d /MachTen_Folder; then
		osname=machten
d1573 1
a1573 1
			osvers=`/sbin/version | $awk '{print $2}' |
d1576 1
a1576 1
			osvers=`/usr/etc/version | $awk '{print $2}' |
a1581 6
	$test -f /sys/posix.dll &&
		$test -f /usr/bin/what &&
		set X `/usr/bin/what /sys/posix.dll` &&
		$test "$3" = UWIN &&
		osname=uwin &&
		osvers="$5"
d1595 1
d1597 1
a1597 5
			tmp=`/bin/uname -X 2>/dev/null|awk '/3\.2v[45]/{ print $(NF) }'`
			if $test "$tmp" != "" -a "$3" = "3.2" -a -f '/etc/systemid'; then
				osname='sco'
				osvers=$tmp
			elif $test -f /etc/kconfig; then
a1606 7
			unset tmp
			;;
		pc*)
			if test -n "$DJGPP"; then
				osname=dos
				osvers=djgpp
			fi
a1620 3
		*dc.osx) osname=dcosx
			osvers="$3"
			;;
a1629 3
		dynixptx*) osname=dynixptx
			osvers=`echo "$4" | $sed 's/^v//'`
			;;
d1634 6
a1639 1
			osvers=`echo "$3" | $sed 's,.*\.\([0-9]*\.[0-9]*\),\1,'`
d1641 1
a1641 1
		irix*) osname=irix
d1650 1
d1654 1
a1654 3
		MiNT) osname=mint
			;;
		netbsd*) osname=netbsd
a1656 6
		news-os) osvers="$3"
			case "$3" in
			4*) osname=newsos4 ;;
			*) osname=newsos ;;
			esac
			;;
a1659 4
		powerux | power_ux | powermax_os | powermaxos | \
		powerunix | power_unix) osname=powerux
			osvers="$3"
			;;
d1686 1
a1686 1
		osf1|mls+)	case "$5" in
d1689 1
a1689 1
					osvers=`echo "$3" | sed 's/^[xvt]//'`
a1697 3
		qnx) osname=qnx
			osvers="$4"
			;;
d1701 1
a1701 1
			svr*)
d1727 1
a1727 1
					if $test -f $src/hints/sco_$1_$2_$3.sh; then
d1729 1
a1729 1
					elif $test -f $src/hints/sco_$1_$2.sh; then
d1731 1
a1731 1
					elif $test -f $src/hints/sco_$1.sh; then
d1754 3
a1756 3
		if test -f /vmunix -a -f $src/hints/news_os.sh; then
			(what /vmunix | UU/tr '[A-Z]' '[a-z]') > UU/kernel.what 2>&1
			if $contains news-os UU/kernel.what >/dev/null 2>&1; then
d1759 1
a1759 1
			$rm -f UU/kernel.what
d1782 1
a1782 1
			*)  if $test -f $src/hints/$file.sh ; then
d1784 1
a1784 1
				elif $test -f $src/hints/$xfile.sh ; then
d1786 1
a1786 1
				elif $test -f $src/hints/$xxfile.sh ; then
d1788 1
a1788 1
				elif $test -f $src/hints/$xxxfile.sh ; then
d1790 1
a1790 1
				elif $test -f $src/hints/$xxxxfile.sh ; then
d1792 1
a1792 1
				elif $test -f "$src/hints/${osname}.sh" ; then
a1800 7
		if $test -f Policy.sh ; then
			case "$dflt" in
			*Policy*) ;;
			none) dflt="Policy" ;;
			*) dflt="Policy $dflt" ;;
			esac
		fi
a1806 9
	if $test -f Policy.sh ; then
		$cat <<EOM

There's also a Policy hint file available, which should make the
site-specific (policy) questions easier to answer.
EOM

	fi

d1810 1
a1810 2
A well-behaved OS will have no hints, so answering "none" or just "Policy"
is a good thing.  DO NOT give a wrong version.
a1812 1

d1814 1
a1814 1
	. UU/myread
d1817 3
a1819 6
		if $test X$file = XPolicy -a -f Policy.sh; then
			. Policy.sh
			$cat Policy.sh >> UU/config.sh
		elif $test -f $src/hints/$file.sh; then
			. $src/hints/$file.sh
			$cat $src/hints/$file.sh >> UU/config.sh
d1827 1
a1827 1
			. UU/myread
d1829 3
a1831 3
				if $test -f "$src/hints/$file.sh"; then
					. $src/hints/$file.sh
					$cat $src/hints/$file.sh >> UU/config.sh
d1843 1
a1843 1
	if $test -f "$src/hints/$file.sh" ; then
d1848 2
a1859 1
	chmod +w config.sh
a1898 22
echo " "
case "$osvers" in
	''|' ')
		case "$hintfile" in
		''|' '|none) dflt=none ;;
		*)	dflt=`echo $hintfile | $sed -e 's/\.sh$//' -e 's/^[^_]*//'`
			dflt=`echo $dflt | $sed -e 's/^_//' -e 's/_/./g'`
			case "$dflt" in
			''|' ') dflt=none ;;
			esac
			;;
		esac
		;;
	*) dflt="$osvers" ;;
esac
rp="Operating system version?"
. ./myread
case "$ans" in
none)  osvers='' ;;
*) osvers="$ans" ;;
esac

d1900 6
a1905 91
cf_time=`LC_ALL=C; export LC_ALL; $date 2>&1`
cf_by=`(logname) 2>/dev/null`
case "$cf_by" in
"")
	cf_by=`(whoami) 2>/dev/null`
	case "$cf_by" in
	"") cf_by=unknown ;;
	esac ;;
esac

: set up the script used to warn in case of inconsistency
cat <<EOS >whoa
$startsh
EOS
cat <<'EOSC' >>whoa
dflt=y
echo " "
echo "*** WHOA THERE!!! ***" >&4
echo "    The $hint value for \$$var on this machine was \"$was\"!" >&4
rp="    Keep the $hint value?"
. ./myread
case "$ans" in
y) td=$was; tu=$was;;
esac
EOSC

: function used to set $1 to $val
setvar='var=$1; eval "was=\$$1"; td=$define; tu=$undef;
case "$val$was" in
$define$undef) . ./whoa; eval "$var=\$td";;
$undef$define) . ./whoa; eval "$var=\$tu";;
*) eval "$var=$val";;
esac'

cat <<EOM

Perl can be built to take advantage of threads, on some systems.
To do so, Configure must be run with -Dusethreads.

Note that threading is a highly experimental feature, and
some known race conditions still remain.  If you choose to try
it, be very sure to not actually deploy it for production
purposes.  README.threads has more details, and is required
reading if you enable threads.
EOM
case "$usethreads" in
$define|true|[yY]*)     dflt='y';;
*) dflt='n';;
esac
rp='Build a threading Perl?'
. ./myread
case "$ans" in
y|Y)    val="$define" ;;     
*)      val="$undef" ;;
esac
set usethreads
eval $setvar 

case "$d_oldpthreads" in
'')	: Configure tests would be welcome here.  For now, assume undef.
	val="$undef" ;;
*)	val="$d_oldpthreads" ;;
esac
set d_oldpthreads
eval $setvar


case "$usethreads" in
"$define"|true|[yY]*)
: Look for a hint-file generated 'call-back-unit'.  If the
: user has specified that a threading perl is to be built,
: we may need to set or change some other defaults.
	if $test -f usethreads.cbu; then
		. ./usethreads.cbu
	fi
	case "$osname" in
	aix|dec_osf|dos_djgpp|freebsd|hpux|irix|linux|next|openbsd|os2|solaris|vmesa)
		# Known thread-capable platforms.
		;;
	*)
	        cat >&4 <<EOM
$osname is not known to support threads.
Please let perlbug@@perl.com know how to do that.

Cannot continue, aborting.
EOM
		exit 1
	;;
    	esac # $osname
    ;;
esac # $usethreads
d1913 1
a1913 2
		tarch=`$sed -e 's/ *$//' -e 's/ /_/g' \
			-e 's/$/'"-$osname/" tmparch`
d1934 1
a1934 13
case "$usethreads" in
$define)  echo "Threads selected." >&4
          case "$ans" in
          *-thread) echo "...and architecture name already ends in -thread." >&4
                    archname="$ans"
                    ;;
          *)        archname="$ans-thread"
                    echo "...setting architecture name to $archname." >&4
                    ;;
          esac
          ;;
*)        archname="$ans" ;;
esac
d1936 1
d1939 1
a1939 11
case "$afs" in
$define|true)	afs=true ;;
$undef|false)	afs=false ;;
*)	if test -d /afs; then
		afs=true
	else
		afs=false
	fi
	;;
esac
if $afs; then
d1941 1
d1944 1
d1994 1
a1994 4
cat <<EOS >getfile
$startsh
EOS
cat <<'EOSC' >>getfile
d2007 1
a2007 1
	expr $fn : '.*(\(.*\)).*' | tr ',' $trnl >getfile.ok
a2259 40
: set the base revision
baserev=5.0

: get the patchlevel
echo " "
echo "Getting the current patchlevel..." >&4
if $test -r $rsrc/patchlevel.h;then
	patchlevel=`awk '/define[ 	]+PATCHLEVEL/ {print $3}' $rsrc/patchlevel.h`
	subversion=`awk '/define[ 	]+SUBVERSION/ {print $3}' $rsrc/patchlevel.h`
else
	patchlevel=0
	subversion=0
fi
$echo $n "(You have $package" $c
case "$package" in
"*$baserev")	;;
*)		$echo $n " $baserev" $c ;;
esac
$echo $n " patchlevel $patchlevel" $c
test 0 -eq "$subversion" || $echo $n " subversion $subversion" $c
echo ".)"

if test 0 -eq "$subversion"; then
	version=`LC_ALL=C; export LC_ALL; \
		 echo $baserev $patchlevel | \
		 $awk '{ printf "%.3f\n", $1 + $2/1000.0 }'`
else
	version=`LC_ALL=C; export LC_ALL; \
		 echo $baserev $patchlevel $subversion | \
		 $awk '{ printf "%.5f\n", $1 + $2/1000.0 + $3/100000.0 }'`
fi
: Figure out perl API version.  Perhaps this should be in patchlevel.h
if test "$subversion" -lt 50; then
	apiversion=`LC_ALL=C; export LC_ALL; \
		 echo $baserev $patchlevel | \
		 $awk '{ printf "%.3f\n", $1 + $2/1000.0 }'`
else
	apiversion="$version"
fi

d2261 2
a2262 3
: Usual default is /usr/local/lib/perl5/$version.
: Also allow things like /opt/perl/lib/$version, since 
: /opt/perl/lib/perl5... would be redundant.
d2264 2
a2265 2
*perl*) set dflt privlib lib/$version ;;
*)	 set dflt privlib lib/$package/$version ;;
d2302 15
a2325 5
: privlib default is /usr/local/lib/$package/$version
: archlib default is /usr/local/lib/$package/$version/$archname
: privlib may have an optional trailing /share.
tdflt=`echo $privlib | $sed 's,/share$,,'`
tdflt=$tdflt/$archname
d2327 12
a2338 1
'')	dflt=$tdflt
d2340 1
a2340 2
*)	dflt="$archlib"
    ;;
d2359 3
a2361 4
Since you are running AFS, I need to distinguish the directory in
which architecture-dependent library files reside from the directory
in which they are installed (and from which they are presumably copied
to the former directory by occult means).
d2381 21
a2411 1
echo exit 1 >os2
a2455 11
: Detect OS2.  The p_ variable is set above in the Head.U unit.
case "$p_" in
:) ;;
*)
	$cat <<'EOI'
I have the feeling something is not exactly right, however...don't tell me...
lemme think...does HAL ring a bell?...no, of course, you're only running OS/2!
EOI
	echo exit 0 >os2
	;;
esac
d2478 2
a2479 2
chmod +x bsd usg v7 osf1 eunice xenix venix os2
$eunicefix bsd usg v7 osf1 eunice xenix venix os2
a2550 1
	echo "(That's for file descriptors, not floppy disks.)"
d2591 161
d2770 258
d3032 1
a3032 1
int main() {
d3040 2
a3041 2
	( cc -o pdp11 pdp11.c ) >/dev/null 2>&1
	if $test -f pdp11 && ./pdp11 2>/dev/null; then
a3074 2
The default for most systems is "none".

a3169 1
$rm -f pdp11.* pdp11
d3192 2
a3193 3
	case "$dflt" in
	*M*)	$cat <<'EOM'
On some older systems the default C compiler will not resolve multiple global
d3201 1
a3201 3
	;;
	esac
	rp="Use which C compiler?"
a3212 6
: Look for a hint-file generated 'call-back-unit'.  Now that the
: user has specified the compiler, we may need to set or change some
: other defaults.
if $test -f cc.cbu; then
    . ./cc.cbu
fi
d3281 1
a3287 1
	echo " "
d3296 43
a3338 13
: see how we invoke the C preprocessor
echo " "
echo "Now, how can we feed standard input to your C preprocessor..." >&4
cat <<'EOT' >testcpp.c
#define ABC abc
#define XYZ xyz
ABC.XYZ
EOT
cd ..
if test ! -f cppstdin; then
echo 'cat >.$$.c; '"$cc"' -E ${1+"$@@"} .$$.c; rm .$$.c' >cppstdin
else
	echo "Keeping your $hint cppstdin wrapper."
a3339 4
chmod 755 cppstdin
wrapper=`pwd`/cppstdin
ok='false'
cd UU
d3341 22
a3362 15
if $test "X$cppstdin" != "X" && \
	$cppstdin $cppminus <testcpp.c >testcpp.out 2>&1 && \
	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1
then
	echo "You used to use $cppstdin $cppminus so we'll use that again."
	case "$cpprun" in
	'') echo "But let's see if we can live without a wrapper..." ;;
	*)
		if $cpprun $cpplast <testcpp.c >testcpp.out 2>&1 && \
			$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1
		then
			echo "(And we'll use $cpprun $cpplast to preprocess directly.)"
			ok='true'
		else
			echo "(However, $cpprun $cpplast does not work, let's see...)"
d3364 3
a3366 9
		;;
	esac
else
	case "$cppstdin" in
	'') ;;
	*)
		echo "Good old $cppstdin $cppminus does not seem to be of any help..."
		;;
	esac
d3368 5
a3372 54

if $ok; then
	: nothing
elif echo 'Maybe "'"$cc"' -E" will work...'; \
	$cc -E <testcpp.c >testcpp.out 2>&1; \
	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
	echo "Yup, it does."
	x_cpp="$cc -E"
	x_minus='';
elif echo 'Nope...maybe "'"$cc"' -E -" will work...'; \
	$cc -E - <testcpp.c >testcpp.out 2>&1; \
	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
	echo "Yup, it does."
	x_cpp="$cc -E"
	x_minus='-';
elif echo 'Nope...maybe "'"$cc"' -P" will work...'; \
	$cc -P <testcpp.c >testcpp.out 2>&1; \
	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
	echo "Yipee, that works!"
	x_cpp="$cc -P"
	x_minus='';
elif echo 'Nope...maybe "'"$cc"' -P -" will work...'; \
	$cc -P - <testcpp.c >testcpp.out 2>&1; \
	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
	echo "At long last!"
	x_cpp="$cc -P"
	x_minus='-';
elif echo 'No such luck, maybe "'$cpp'" will work...'; \
	$cpp <testcpp.c >testcpp.out 2>&1; \
	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
	echo "It works!"
	x_cpp="$cpp"
	x_minus='';
elif echo 'Nixed again...maybe "'$cpp' -" will work...'; \
	$cpp - <testcpp.c >testcpp.out 2>&1; \
	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
	echo "Hooray, it works!  I was beginning to wonder."
	x_cpp="$cpp"
	x_minus='-';
elif echo 'Uh-uh.  Time to get fancy.  Trying a wrapper...'; \
	$wrapper <testcpp.c >testcpp.out 2>&1; \
	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
	x_cpp="$wrapper"
	x_minus=''
	echo "Eureka!"
else
	dflt=''
	rp="No dice.  I can't find a C preprocessor.  Name one:"
	. ./myread
	x_cpp="$ans"
	x_minus=''
	$x_cpp <testcpp.c >testcpp.out 2>&1
	if $contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
		echo "OK, that will do." >&4
d3374 19
a3392 2
echo "Sorry, I can't get that to work.  Go find one and rerun Configure." >&4
		exit 1
d3395 3
d3399 8
a3406 21
case "$ok" in
false)
	cppstdin="$x_cpp"
	cppminus="$x_minus"
	cpprun="$x_cpp"
	cpplast="$x_minus"
	set X $x_cpp
	shift
	case "$1" in
	"$cpp")
		echo "Perhaps can we force $cc -E using a wrapper..."
		if $wrapper <testcpp.c >testcpp.out 2>&1; \
			$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1
		then
			echo "Yup, we can."
			cppstdin="$wrapper"
			cppminus='';
		else
			echo "Nope, we'll have to live without it..."
		fi
		;;
d3408 1
a3408 8
	case "$cpprun" in
	"$wrapper")
		cpprun=''
		cpplast=''
		;;
	esac
	;;
esac
d3410 6
a3415 28
case "$cppstdin" in
"$wrapper"|'cppstdin') ;;
*) $rm -f $wrapper;;
esac
$rm -f testcpp.c testcpp.out

: Set private lib path
case "$plibpth" in
'') if ./mips; then
		plibpth="$incpath/usr/lib /usr/local/lib /usr/ccs/lib"
	fi;;
esac
case "$libpth" in
' ') dlist='';;
'') dlist="$loclibpth $plibpth $glibpth";;
*) dlist="$libpth";;
esac

: Now check and see which directories actually exist, avoiding duplicates
libpth=''
for xxx in $dlist
do
    if $test -d $xxx; then
		case " $libpth " in
		*" $xxx "*) ;;
		*) libpth="$libpth $xxx";;
		esac
    fi
a3416 1
$cat <<'EOM'
d3418 5
a3422 12
Some systems have incompatible or broken versions of libraries.  Among
the directories listed in the question below, please remove any you
know not to be holding relevant libraries, and add any that are needed.
Say "none" for none.

EOM
case "$libpth" in
'') dflt='none';;
*)
	set X $libpth
	shift
	dflt=${1+"$@@"}
d3425 67
a3491 1
rp="Directories to use for library searches?"
d3493 1
d3495 3
a3497 2
none) libpth=' ';;
*) libpth="$ans";;
d3499 1
d3501 5
a3505 8
: compute shared library extension
case "$so" in
'')
	if xxx=`./loc libc.sl X $libpth`; $test -f "$xxx"; then
		dflt='sl'
	else
		dflt='so'
	fi
a3506 1
*) dflt="$so";;
a3507 1
$cat <<EOM
d3509 15
a3523 18
On some systems, shared libraries may be available.  Answer 'none' if
you want to suppress searching of shared libraries for the remaining
of this configuration.

EOM
rp='What is the file extension used for shared libraries?'
. ./myread
so="$ans"

: Define several unixisms.
: Hints files or command line option can be used to override them.
: The convoluted testing is in case hints files set either the old
: or the new name.
case "$_exe" in
'')	case "$exe_ext" in
    '')	;;
	*)	_exe="$exe_ext" ;;
	esac
a3524 5
esac
case "$_a" in
'')	case "$lib_ext" in
    '')	_a='.a';;
	*)	_a="$lib_ext" ;;
a3527 18
case "$_o" in
'') case "$obj_ext" in
	'')	_o='.o';;
	*)	_o="$obj_ext";;
	esac
	;;
esac
case "$p_" in
'') case "$path_sep" in
	'')	p_=':';;
	*)	p_="$path_sep";;
	esac
	;;
esac
exe_ext=$_exe
lib_ext=$_a
obj_ext=$_o
path_sep=$p_
d3529 7
a3535 4
: Which makefile gets called first.  This is used by make depend.
case "$firstmakefile" in
'') firstmakefile='makefile';;
esac
d3537 17
a3553 18
: Looking for optional libraries
echo " "
echo "Checking for optional libraries..." >&4
case "$libs" in
' '|'') dflt='';;
*) dflt="$libs";;
esac
case "$libswanted" in
'') libswanted='c_s';;
esac
for thislib in $libswanted; do
	
	if xxx=`./loc lib$thislib.$so.[0-9]'*' X $libpth`;
		$test -f "$xxx" -a "X$ignore_versioned_solibs" = "X"; then
		echo "Found -l$thislib (shared)."
		case " $dflt " in
		*"-l$thislib "*);;
		*) dflt="$dflt -l$thislib";;
d3555 4
a3558 5
	elif xxx=`./loc lib$thislib.$so X $libpth` ; $test -f "$xxx"; then
		echo "Found -l$thislib (shared)."
		case " $dflt " in
		*"-l$thislib "*);;
		*) dflt="$dflt -l$thislib";;
d3560 2
a3561 27
	elif xxx=`./loc lib$thislib$_a X $libpth`; $test -f "$xxx"; then
		echo "Found -l$thislib."
		case " $dflt " in
		*"-l$thislib "*);;
		*) dflt="$dflt -l$thislib";;
		esac
	elif xxx=`./loc $thislib$_a X $libpth`; $test -f "$xxx"; then
		echo "Found -l$thislib."
		case " $dflt " in
		*"-l$thislib "*);;
		*) dflt="$dflt -l$thislib";;
		esac
	elif xxx=`./loc lib${thislib}_s$_a X $libpth`; $test -f "$xxx"; then
		echo "Found -l${thislib}_s."
		case " $dflt " in
		*"-l$thislib "*);;
		*) dflt="$dflt -l${thislib}_s";;
		esac
	elif xxx=`./loc Slib$thislib$_a X $xlibpth`; $test -f "$xxx"; then
		echo "Found -l$thislib."
		case " $dflt " in
		*"-l$thislib "*);;
		*) dflt="$dflt -l$thislib";;
		esac
	else
		echo "No -l$thislib."
	fi
a3562 10
set X $dflt
shift
dflt="$*"
case "$libs" in
'') dflt="$dflt";;
*) dflt="$libs";;
esac
case "$dflt" in
' '|'') dflt='none';;
esac
a3564 3
 
Some versions of Unix support shared libraries, which make executables smaller
but make load time slightly longer.
d3566 6
a3571 6
On some systems, mostly System V Release 3's, the shared library is included
by putting the option "-lc_s" as the last thing on the cc command line when
linking.  Other systems use shared libraries by default.  There may be other
libraries needed to compile $package on your machine as well.  If your system
needs the "-lc_s" option, include it here.  Include any other special libraries
here as well.  Say "none" for none.
d3573 5
a3577 3

echo " "
rp="Any additional libraries?"
d3579 1
a3579 4
case "$ans" in
none) libs=' ';;
*) libs="$ans";;
esac
d3581 16
a3596 5
: determine optimize, if desired, or use for debug flag also
case "$optimize" in
' '|$undef) dflt='none';;
'') dflt='-O';;
*) dflt="$optimize";;
d3598 18
a3615 1
$cat <<EOH
d3617 3
a3619 5
Some C compilers have problems with their optimizers.  By default, $package
compiles with the -O flag to use the optimizer.  Alternately, you might want
to use the symbolic debugger, which uses the -g flag (on traditional Unix
systems).  Either flag can be specified here.  To use neither flag, specify
the word "none".
d3621 4
a3624 15
EOH
rp="What optimizer/debugger flag should be used?"
. ./myread
optimize="$ans"
case "$optimize" in
'none') optimize=" ";;
esac

dflt=''
: We will not override a previous value, but we might want to
: augment a hint file
case "$hint" in
none|recommended)
	case "$gccversion" in
	1*) dflt='-fpcc-struct-return' ;;
d3626 4
a3629 33
	case "$optimize" in
	*-g*) dflt="$dflt -DDEBUGGING";;
	esac
	case "$gccversion" in
	2*) if test -d /etc/conf/kconfig.d &&
			$contains _POSIX_VERSION $usrinc/sys/unistd.h >/dev/null 2>&1
		then
			dflt="$dflt -posix"
		fi
		;;
	esac
	;;
esac

case "$mips_type" in
*BSD*|'') inclwanted="$locincpth $usrinc";;
*) inclwanted="$locincpth $inclwanted $usrinc/bsd";;
esac
for thisincl in $inclwanted; do
	if $test -d $thisincl; then
		if $test x$thisincl != x$usrinc; then
			case "$dflt" in
			*$thisincl*);;
			*) dflt="$dflt -I$thisincl";;
			esac
		fi
	fi
done

inctest='if $contains $2 $usrinc/$1 >/dev/null 2>&1; then
	xxx=true;
elif $contains $2 $usrinc/sys/$1 >/dev/null 2>&1; then
	xxx=true;
d3631 2
a3632 8
	xxx=false;
fi;
if $xxx; then
	case "$dflt" in
	*$2*);;
	*) dflt="$dflt -D$2";;
	esac;
fi'
d3634 3
a3636 5
set signal.h LANGUAGE_C; eval $inctest

case "$hint" in
none|recommended) dflt="$ccflags $dflt" ;;
*) dflt="$ccflags";;
d3639 6
a3644 4
case "$dflt" in
''|' ') dflt=none;;
esac
$cat <<EOH
d3646 5
a3650 7
Your C compiler may want other flags.  For this question you should include
-I/whatever and -DWHATEVER flags and any other flags used by the C compiler,
but you should NOT include libraries or ld flags like -lwhatever.  If you
want $package to honor its debug switch, you should include -DDEBUGGING here.
Your C compiler might also need additional flags, such as -D_POSIX_SOURCE.

To use no flags, specify the word "none".
d3653 12
a3664 8
set X $dflt
shift
dflt=${1+"$@@"}
rp="Any additional cc flags?"
. ./myread
case "$ans" in
none) ccflags='';;
*) ccflags="$ans";;
d3666 1
d3668 14
a3681 19
: the following weeds options from ccflags that are of no interest to cpp
cppflags="$ccflags"
case "$gccversion" in
1*) cppflags="$cppflags -D__GNUC__"
esac
case "$mips_type" in
'');;
*BSD*) cppflags="$cppflags -DSYSTYPE_BSD43";;
esac
case "$cppflags" in
'');;
*)
	echo " "
	echo "Let me guess what the preprocessor flags are..." >&4
	set X $cppflags
	shift
	cppflags=''
	$cat >cpp.c <<'EOM'
#define BLURFL foo
d3683 10
a3692 15
BLURFL xx LFRULB
EOM
	previous=''
	for flag in $*
	do
		case "$flag" in
		-*) ftry="$flag";;
		*) ftry="$previous $flag";;
		esac
		if $cppstdin -DLFRULB=bar $cppflags $ftry $cppminus <cpp.c \
			>cpp1.out 2>/dev/null && \
			$cpprun -DLFRULB=bar $cppflags $ftry $cpplast <cpp.c \
			>cpp2.out 2>/dev/null && \
			$contains 'foo.*xx.*bar' cpp1.out >/dev/null 2>&1 && \
			$contains 'foo.*xx.*bar' cpp2.out >/dev/null 2>&1
d3694 2
a3695 2
			cppflags="$cppflags $ftry"
			previous=''
d3697 1
a3697 1
			previous="$flag"
d3699 1
a3699 6
	done
	set X $cppflags
	shift
	cppflags=${1+"$@@"}
	case "$cppflags" in
	*-*)  echo "They appear to be: $cppflags";;
d3701 5
a3705 26
	$rm -f cpp.c cpp?.out
	;;
esac

: flags used in final linking phase
case "$ldflags" in
'') if ./venix; then
		dflt='-i -z'
	else
		dflt=''
	fi
	case "$ccflags" in
	*-posix*) dflt="$dflt -posix" ;;
	esac
	;;
*) dflt="$ldflags";;
esac

: Try to guess additional flags to pick up local libraries.
for thislibdir in $libpth; do
	case " $loclibpth " in
	*" $thislibdir "*)
		case "$dflt " in 
		*"-L$thislibdir "*) ;;
		*)  dflt="$dflt -L$thislibdir" ;;
		esac
d3708 1
a3708 1
done
d3710 44
a3753 719
case "$dflt" in
'') dflt='none' ;;
esac

$cat <<EOH

Your C linker may need flags.  For this question you should
include -L/whatever and any other flags used by the C linker, but you
should NOT include libraries like -lwhatever.

Make sure you include the appropriate -L/path flags if your C linker
does not normally search all of the directories you specified above,
namely
	$libpth
To use no flags, specify the word "none".

EOH

rp="Any additional ld flags (NOT including libraries)?"
. ./myread
case "$ans" in
none) ldflags='';;
*) ldflags="$ans";;
esac
rmlist="$rmlist pdp11"

: coherency check
echo " "
echo "Checking your choice of C compiler and flags for coherency..." >&4
$cat > try.c <<'EOF'
#include <stdio.h>
int main() { printf("Ok\n"); exit(0); }
EOF
set X $cc $optimize $ccflags -o try $ldflags try.c $libs
shift
$cat >try.msg <<'EOM'
I've tried to compile and run the following simple program:

EOM
$cat try.c >> try.msg

$cat >> try.msg <<EOM

I used the command:

	$*
	./try

and I got the following output:

EOM
dflt=y
if sh -c "$cc $optimize $ccflags -o try $ldflags try.c $libs" >>try.msg 2>&1; then
	if sh -c './try' >>try.msg 2>&1; then
		xxx=`./try`
		case "$xxx" in
		"Ok") dflt=n ;;
		*)	echo 'The program compiled OK, but produced no output.' >> try.msg
			case " $libs " in
			*" -lsfio "*)
				cat >> try.msg <<'EOQS'
If $libs contains -lsfio, and sfio is mis-configured, then it
sometimes (apparently) runs and exits with a 0 status, but with no
output!  It may have to do with sfio's use of _exit vs. exit.

EOQS
				rp="You have a big problem.  Shall I abort Configure"
				dflt=y
				;;
			esac
			;;
		esac
	else
		echo "The program compiled OK, but exited with status $?." >>try.msg
		rp="You have a problem.  Shall I abort Configure"
		dflt=y
	fi
else
	echo "I can't compile the test program." >>try.msg
	rp="You have a BIG problem.  Shall I abort Configure"
	dflt=y
fi
case "$dflt" in
y)
	$cat try.msg >&4
	case "$knowitall" in
	'')
		echo "(The supplied flags or libraries might be incorrect.)"
		;;
	*) dflt=n;;
	esac
	echo " "
	. ./myread
	case "$ans" in
	n*|N*) ;;
	*)	echo "Ok.  Stopping Configure." >&4
		exit 1
		;;
	esac
	;;
n) echo "OK, that should do.";;
esac
$rm -f try try.* core

: determine filename position in cpp output
echo " "
echo "Computing filename position in cpp output for #include directives..." >&4
echo '#include <stdio.h>' > foo.c
$cat >fieldn <<EOF
$startsh
$cppstdin $cppflags $cppminus <foo.c 2>/dev/null | \
$grep '^[ 	]*#.*stdio\.h' | \
while read cline; do
	pos=1
	set \$cline
	while $test \$# -gt 0; do
		if $test -r \`echo \$1 | $tr -d '"'\`; then
			echo "\$pos"
			exit 0
		fi
		shift
		pos=\`expr \$pos + 1\`
	done
done
EOF
chmod +x fieldn
fieldn=`./fieldn`
$rm -f foo.c fieldn
case $fieldn in
'') pos='???';;
1) pos=first;;
2) pos=second;;
3) pos=third;;
*) pos="${fieldn}th";;
esac
echo "Your cpp writes the filename in the $pos field of the line."

: locate header file
$cat >findhdr <<EOF
$startsh
wanted=\$1
name=''
if test -f $usrinc/\$wanted; then
	echo "$usrinc/\$wanted"
	exit 0
fi
awkprg='{ print \$$fieldn }'
echo "#include <\$wanted>" > foo\$\$.c
$cppstdin $cppminus $cppflags < foo\$\$.c 2>/dev/null | \
$grep "^[ 	]*#.*\$wanted" | \
while read cline; do
	name=\`echo \$cline | $awk "\$awkprg" | $tr -d '"'\`
	case "\$name" in
	*/\$wanted) echo "\$name"; exit 0;;
	*) name='';;
	esac;
done;
$rm -f foo\$\$.c;
case "\$name" in
'') exit 1;;
esac
EOF
chmod +x findhdr

: define an alternate in-header-list? function
inhdr='echo " "; td=$define; tu=$undef; yyy=$@@;
cont=true; xxf="echo \"<\$1> found.\" >&4";
case $# in 2) xxnf="echo \"<\$1> NOT found.\" >&4";;
*) xxnf="echo \"<\$1> NOT found, ...\" >&4";;
esac;
case $# in 4) instead=instead;; *) instead="at last";; esac;
while $test "$cont"; do
	xxx=`./findhdr $1`
	var=$2; eval "was=\$$2";
	if $test "$xxx" && $test -r "$xxx";
	then eval $xxf;
	eval "case \"\$$var\" in $undef) . ./whoa; esac"; eval "$var=\$td";
		cont="";
	else eval $xxnf;
	eval "case \"\$$var\" in $define) . ./whoa; esac"; eval "$var=\$tu"; fi;
	set $yyy; shift; shift; yyy=$@@;
	case $# in 0) cont="";;
	2) xxf="echo \"but I found <\$1> $instead.\" >&4";
		xxnf="echo \"and I did not find <\$1> either.\" >&4";;
	*) xxf="echo \"but I found <\$1\> instead.\" >&4";
		xxnf="echo \"there is no <\$1>, ...\" >&4";;
	esac;
done;
while $test "$yyy";
do set $yyy; var=$2; eval "was=\$$2";
	eval "case \"\$$var\" in $define) . ./whoa; esac"; eval "$var=\$tu";
	set $yyy; shift; shift; yyy=$@@;
done'

: see if this is a malloc.h system
set malloc.h i_malloc
eval $inhdr

: see if stdlib is available
set stdlib.h i_stdlib
eval $inhdr

: determine which malloc to compile in
echo " "
case "$usemymalloc" in
''|[yY]*|true|$define)	dflt='y' ;;
*)	dflt='n' ;;
esac
rp="Do you wish to attempt to use the malloc that comes with $package?"
. ./myread
usemymalloc="$ans"
case "$ans" in
y*|true)
	usemymalloc='y'
	mallocsrc='malloc.c'
	mallocobj="malloc$_o"
	d_mymalloc="$define"
	case "$libs" in
	*-lmalloc*)
		: Remove malloc from list of libraries to use
		echo "Removing unneeded -lmalloc from library list" >&4
		set `echo X $libs | $sed -e 's/-lmalloc / /' -e 's/-lmalloc$//'`
		shift
		libs="$*"
		echo "libs = $libs" >&4
		;;
	esac
	;;
*)
	usemymalloc='n'
	mallocsrc=''
	mallocobj=''
	d_mymalloc="$undef"
	;;
esac

: compute the return types of malloc and free
echo " "
$cat >malloc.c <<END
#$i_malloc I_MALLOC
#$i_stdlib I_STDLIB
#include <stdio.h>
#include <sys/types.h>
#ifdef I_MALLOC
#include <malloc.h>
#endif
#ifdef I_STDLIB
#include <stdlib.h>
#endif
#ifdef TRY_MALLOC
void *malloc();
#endif
#ifdef TRY_FREE
void free();
#endif
END
case "$malloctype" in
'')
	if $cc $ccflags -c -DTRY_MALLOC malloc.c >/dev/null 2>&1; then
		malloctype='void *'
	else
		malloctype='char *'
	fi
	;;
esac
echo "Your system wants malloc to return '$malloctype', it would seem." >&4

case "$freetype" in
'')
	if $cc $ccflags -c -DTRY_FREE malloc.c >/dev/null 2>&1; then
		freetype='void'
	else
		freetype='int'
	fi
	;;
esac
echo "Your system uses $freetype free(), it would seem." >&4
$rm -f malloc.[co]
: Cruising for prototypes
echo " "
echo "Checking out function prototypes..." >&4
$cat >prototype.c <<'EOCP'
int main(int argc, char *argv[]) {
	exit(0);}
EOCP
if $cc $ccflags -c prototype.c >prototype.out 2>&1 ; then
	echo "Your C compiler appears to support function prototypes."
	val="$define"
else
	echo "Your C compiler doesn't seem to understand function prototypes."
	val="$undef"
fi
set prototype
eval $setvar
$rm -f prototype*

case "$prototype" in
"$define") ;;
*)	ansi2knr='ansi2knr'
	echo " "
	cat <<EOM >&4

$me:  FATAL ERROR:
This version of $package can only be compiled by a compiler that 
understands function prototypes.  Unfortunately, your C compiler 
	$cc $ccflags
doesn't seem to understand them.  Sorry about that.

If GNU cc is available for your system, perhaps you could try that instead.  

Eventually, we hope to support building Perl with pre-ANSI compilers.
If you would like to help in that effort, please contact <perlbug@@perl.org>.

Aborting Configure now.
EOM
	exit 2
	;;
esac

: determine where public executables go
echo " "
set dflt bin bin
eval $prefixit
fn=d~
rp='Pathname where the public executables will reside?'
. ./getfile
if $test "X$ansexp" != "X$binexp"; then
	installbin=''
fi
bin="$ans"
binexp="$ansexp"
if $afs; then
	$cat <<EOM

Since you are running AFS, I need to distinguish the directory in which
executables reside from the directory in which they are installed (and from
which they are presumably copied to the former directory by occult means).

EOM
	case "$installbin" in
	'') dflt=`echo $binexp | sed 's#^/afs/#/afs/.#'`;;
	*) dflt="$installbin";;
	esac
	fn=de~
	rp='Where will public executables be installed?'
	. ./getfile
	installbin="$ans"
else
	installbin="$binexp"
fi

echo " "
if test -d /usr/bin -a "X$installbin" != X/usr/bin; then
	$cat <<EOM
Many scripts expect to perl to be installed as /usr/bin/perl.
I can install the perl you are about to compile also as /usr/bin/perl
(in addition to $installbin/perl).
EOM
	case "$installusrbinperl" in
	"$undef"|[nN]*)	dflt='n';;
	*)		dflt='y';;
	esac
	rp="Do you want to install perl as /usr/bin/perl?"
	. ./myread
	case "$ans" in
	[yY]*)	val="$define";;
	*)	val="$undef" ;;
	esac
else
	val="$undef"
fi
set installusrbinperl
eval $setvar

: define a shorthand compile call
compile='
mc_file=$1;
shift;
$cc $optimize $ccflags $ldflags -o ${mc_file} $* ${mc_file}.c $libs > /dev/null 2>&1;'
: define a shorthand compile call for compilations that should be ok.
compile_ok='
mc_file=$1;
shift;
$cc $optimize $ccflags $ldflags -o ${mc_file} $* ${mc_file}.c $libs;'

echo " "
echo "Checking for GNU C Library..." >&4
cat >gnulibc.c <<EOM
#include <stdio.h>
int main()
{
#ifdef __GLIBC__
    exit(0);
#else
    exit(1);
#endif
}
EOM
set gnulibc
if eval $compile_ok && ./gnulibc; then
	val="$define"
	echo "You are using the GNU C Library"
else
	val="$undef"
	echo "You are not using the GNU C Library"
fi
$rm -f gnulibc*
set d_gnulibc
eval $setvar

: see if nm is to be used to determine whether a symbol is defined or not
case "$usenm" in
'')
	dflt=''
	case "$d_gnulibc" in
	"$define")
		echo " "
		echo "nm probably won't work on the GNU C Library." >&4
		dflt=n
		;;
	esac
	case "$dflt" in
	'') 
		if $test "$osname" = aix -a ! -f /lib/syscalls.exp; then
			echo " "
			echo "Whoops!  This is an AIX system without /lib/syscalls.exp!" >&4
			echo "'nm' won't be sufficient on this sytem." >&4
			dflt=n
		fi
		;;
	esac
	case "$dflt" in
	'') dflt=`$egrep 'inlibc|csym' $rsrc/Configure | wc -l 2>/dev/null`
		if $test $dflt -gt 20; then
			dflt=y
		else
			dflt=n
		fi
		;;
	esac
	;;
*)
	case "$usenm" in
	true|$define) dflt=y;;
	*) dflt=n;;
	esac
	;;
esac
$cat <<EOM

I can use $nm to extract the symbols from your C libraries. This
is a time consuming task which may generate huge output on the disk (up
to 3 megabytes) but that should make the symbols extraction faster. The
alternative is to skip the 'nm' extraction part and to compile a small
test program instead to determine whether each symbol is present. If
you have a fast C compiler and/or if your 'nm' output cannot be parsed,
this may be the best solution.

You probably shouldn't let me use 'nm' if you are using the GNU C Library.

EOM
rp="Shall I use $nm to extract C symbols from the libraries?"
. ./myread
case "$ans" in
[Nn]*) usenm=false;;
*) usenm=true;;
esac

runnm=$usenm
case "$reuseval" in
true) runnm=false;;
esac

: nm options which may be necessary
case "$nm_opt" in
'') if $test -f /mach_boot; then
		nm_opt=''	# Mach
	elif $test -d /usr/ccs/lib; then
		nm_opt='-p'	# Solaris (and SunOS?)
	elif $test -f /dgux; then
		nm_opt='-p'	# DG-UX
	elif $test -f /lib64/rld; then
		nm_opt='-p'	# 64-bit Irix
	else
		nm_opt=''
	fi;;
esac

: nm options which may be necessary for shared libraries but illegal
: for archive libraries.  Thank you, Linux.
case "$nm_so_opt" in
'')	case "$myuname" in
	*linux*)
		if $nm --help | $grep 'dynamic' > /dev/null 2>&1; then
			nm_so_opt='--dynamic'
		fi
		;;
	esac
	;;
esac

case "$runnm" in
true)
: get list of predefined functions in a handy place
echo " "
case "$libc" in
'') libc=unknown
	case "$libs" in
	*-lc_s*) libc=`./loc libc_s$_a $libc $libpth`
	esac
	;;
esac
libnames='';
case "$libs" in
'') ;;
*)  for thislib in $libs; do
	case "$thislib" in
	-lc|-lc_s)
		: Handle C library specially below.
		;;
	-l*)
		thislib=`echo $thislib | $sed -e 's/^-l//'`
		if try=`./loc lib$thislib.$so.'*' X $libpth`; $test -f "$try"; then
			:
		elif try=`./loc lib$thislib.$so X $libpth`; $test -f "$try"; then
			:
		elif try=`./loc lib$thislib$_a X $libpth`; $test -f "$try"; then
			:
		elif try=`./loc $thislib$_a X $libpth`; $test -f "$try"; then
			:
		elif try=`./loc lib$thislib X $libpth`; $test -f "$try"; then
			:
		elif try=`./loc $thislib X $libpth`; $test -f "$try"; then
			:
		elif try=`./loc Slib$thislib$_a X $xlibpth`; $test -f "$try"; then
			:
		else
			try=''
		fi
		libnames="$libnames $try"
		;;
	*) libnames="$libnames $thislib" ;;
	esac
	done
	;;
esac
xxx=normal
case "$libc" in
unknown)
	set /lib/libc.$so
	for xxx in $libpth; do
		$test -r $1 || set $xxx/libc.$so
		: The messy sed command sorts on library version numbers.
		$test -r $1 || \
			set `echo blurfl; echo $xxx/libc.$so.[0-9]* | \
			tr ' ' $trnl | egrep -v '\.[A-Za-z]*$' | $sed -e '
				h
				s/[0-9][0-9]*/0000&/g
				s/0*\([0-9][0-9][0-9][0-9][0-9]\)/\1/g
				G
				s/\n/ /' | \
			 sort | $sed -e 's/^.* //'`
		eval set \$$#
	done
	$test -r $1 || set /usr/ccs/lib/libc.$so
	$test -r $1 || set /lib/libsys_s$_a
	;;
*)
	set blurfl
	;;
esac
if $test -r "$1"; then
	echo "Your (shared) C library seems to be in $1."
	libc="$1"
elif $test -r /lib/libc && $test -r /lib/clib; then
	echo "Your C library seems to be in both /lib/clib and /lib/libc."
	xxx=apollo
	libc='/lib/clib /lib/libc'
	if $test -r /lib/syslib; then
		echo "(Your math library is in /lib/syslib.)"
		libc="$libc /lib/syslib"
	fi
elif $test -r "$libc" || (test -h "$libc") >/dev/null 2>&1; then
	echo "Your C library seems to be in $libc, as you said before."
elif $test -r $incpath/usr/lib/libc$_a; then
	libc=$incpath/usr/lib/libc$_a;
	echo "Your C library seems to be in $libc.  That's fine."
elif $test -r /lib/libc$_a; then
	libc=/lib/libc$_a;
	echo "Your C library seems to be in $libc.  You're normal."
else
	if tans=`./loc libc$_a blurfl/dyick $libpth`; $test -r "$tans"; then
		:
	elif tans=`./loc libc blurfl/dyick $libpth`; $test -r "$tans"; then
		libnames="$libnames "`./loc clib blurfl/dyick $libpth`
	elif tans=`./loc clib blurfl/dyick $libpth`; $test -r "$tans"; then
		:
	elif tans=`./loc Slibc$_a blurfl/dyick $xlibpth`; $test -r "$tans"; then
		:
	elif tans=`./loc Mlibc$_a blurfl/dyick $xlibpth`; $test -r "$tans"; then
		:
	else
		tans=`./loc Llibc$_a blurfl/dyick $xlibpth`
	fi
	if $test -r "$tans"; then
		echo "Your C library seems to be in $tans, of all places."
		libc=$tans
	else
		libc='blurfl'
	fi
fi
if $test $xxx = apollo -o -r "$libc" || (test -h "$libc") >/dev/null 2>&1; then
	dflt="$libc"
	cat <<EOM

If the guess above is wrong (which it might be if you're using a strange
compiler, or your machine supports multiple models), you can override it here.

EOM
else
	dflt=''
	echo $libpth | tr ' ' $trnl | sort | uniq > libpath
	cat >&4 <<EOM
I can't seem to find your C library.  I've looked in the following places:

EOM
	$sed 's/^/	/' libpath
	cat <<EOM

None of these seems to contain your C library. I need to get its name...

EOM
fi
fn=f
rp='Where is your C library?'
. ./getfile
libc="$ans"

echo " "
echo $libc $libnames | tr ' ' $trnl | sort | uniq > libnames
set X `cat libnames`
shift
xxx=files
case $# in 1) xxx=file; esac
echo "Extracting names from the following $xxx for later perusal:" >&4
echo " "
$sed 's/^/	/' libnames >&4
echo " "
$echo $n "This may take a while...$c" >&4

for file in $*; do
	case $file in
	*$so*) $nm $nm_so_opt $nm_opt $file 2>/dev/null;;
	*) $nm $nm_opt $file 2>/dev/null;;
	esac
done >libc.tmp

$echo $n ".$c"
$grep fprintf libc.tmp > libc.ptf
xscan='eval "<libc.ptf $com >libc.list"; $echo $n ".$c" >&4'
xrun='eval "<libc.tmp $com >libc.list"; echo "done" >&4'
xxx='[ADTSIW]'
if com="$sed -n -e 's/__IO//' -e 's/^.* $xxx  *_[_.]*//p' -e 's/^.* $xxx  *//p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e 's/^__*//' -e 's/^\([a-zA-Z_0-9$]*\).*xtern.*/\1/p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e '/|UNDEF/d' -e '/FUNC..GL/s/^.*|__*//p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e 's/^.* D __*//p' -e 's/^.* D //p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e 's/^_//' -e 's/^\([a-zA-Z_0-9]*\).*xtern.*text.*/\1/p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e 's/^.*|FUNC |GLOB .*|//p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$grep '|' | $sed -n -e '/|COMMON/d' -e '/|DATA/d' \
				-e '/ file/d' -e 's/^\([^ 	]*\).*/\1/p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e 's/^.*|FUNC |GLOB .*|//p' -e 's/^.*|FUNC |WEAK .*|//p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e 's/^__//' -e '/|Undef/d' -e '/|Proc/s/ .*//p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e 's/^.*|Proc .*|Text *| *//p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e '/Def. Text/s/.* \([^ ]*\)\$/\1/p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e 's/^[-0-9a-f ]*_\(.*\)=.*/\1/p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e 's/.*\.text n\ \ \ \.//p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="sed -n -e 's/^__.*//' -e 's/[       ]*D[    ]*[0-9]*.*//p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
d3755 8
a3762 7
	$nm -p $* 2>/dev/null >libc.tmp
	$grep fprintf libc.tmp > libc.ptf
	if com="$sed -n -e 's/^.* [ADTSIW]  *_[_.]*//p' -e 's/^.* [ADTSIW] //p'";\
		eval $xscan; $contains '^fprintf$' libc.list >/dev/null 2>&1
	then
		nm_opt='-p'
		eval $xrun
d3764 2
a3765 40
		echo " "
		echo "$nm didn't seem to work right. Trying $ar instead..." >&4
		com=''
		if $ar t $libc > libc.tmp && $contains '^fprintf$' libc.tmp >/dev/null 2>&1; then
			for thisname in $libnames $libc; do
				$ar t $thisname >>libc.tmp
			done
			$sed -e "s/\\$_o\$//" < libc.tmp > libc.list
			echo "Ok." >&4
		elif test "X$osname" = "Xos2" && $ar tv $libc > libc.tmp; then
			# Repeat libc to extract forwarders to DLL entries too
			for thisname in $libnames $libc; do
				$ar tv $thisname >>libc.tmp
				# Revision 50 of EMX has bug in $ar.
				# it will not extract forwarders to DLL entries
				# Use emximp which will extract exactly them.
				emximp -o tmp.imp $thisname \
				    2>/dev/null && \
				    $sed -e 's/^\([_a-zA-Z0-9]*\) .*$/\1/p' \
				    < tmp.imp >>libc.tmp
				$rm tmp.imp
			done
			$sed -e "s/\\$_o\$//" -e 's/^ \+//' < libc.tmp > libc.list
			echo "Ok." >&4
		else
			echo "$ar didn't seem to work right." >&4
			echo "Maybe this is a Cray...trying bld instead..." >&4
			if bld t $libc | $sed -e 's/.*\///' -e "s/\\$_o:.*\$//" > libc.list
			then
				for thisname in $libnames; do
					bld t $libnames | \
					$sed -e 's/.*\///' -e "s/\\$_o:.*\$//" >>libc.list
					$ar t $thisname >>libc.tmp
				done
				echo "Ok." >&4
			else
				echo "That didn't work either.  Giving up." >&4
				exit 1
			fi
		fi
a3767 9
nm_extract="$com"
if $test -f /lib/syscalls.exp; then
	echo " "
	echo "Also extracting names from /lib/syscalls.exp for good ole AIX..." >&4
	$sed -n 's/^\([^ 	]*\)[ 	]*syscall[0-9]*$/\1/p' /lib/syscalls.exp >>libc.list
fi
;;
esac
$rm -f libnames libpath
d3769 17
a3785 190
: see if dld is available
set dld.h i_dld
eval $inhdr

: is a C symbol defined?
csym='tlook=$1;
case "$3" in
-v) tf=libc.tmp; tc=""; tdc="";;
-a) tf=libc.tmp; tc="[0]"; tdc="[]";;
*) tlook="^$1\$"; tf=libc.list; tc="()"; tdc="()";;
esac;
tx=yes;
case "$reuseval-$4" in
true-) ;;
true-*) tx=no; eval "tval=\$$4"; case "$tval" in "") tx=yes;; esac;;
esac;
case "$tx" in
yes)
	case "$runnm" in
	true)
		if $contains $tlook $tf >/dev/null 2>&1;
		then tval=true;
		else tval=false;
		fi;;
	*)
		echo "int main() { extern short $1$tdc; printf(\"%hd\", $1$tc); }" > t.c;
		if $cc $optimize $ccflags $ldflags -o t t.c $libs >/dev/null 2>&1;
		then tval=true;
		else tval=false;
		fi;
		$rm -f t t.c;;
	esac;;
*)
	case "$tval" in
	$define) tval=true;;
	*) tval=false;;
	esac;;
esac;
eval "$2=$tval"'

: define an is-in-libc? function
inlibc='echo " "; td=$define; tu=$undef;
sym=$1; var=$2; eval "was=\$$2";
tx=yes;
case "$reuseval$was" in
true) ;;
true*) tx=no;;
esac;
case "$tx" in
yes)
	set $sym tres -f;
	eval $csym;
	case "$tres" in
	true)
		echo "$sym() found." >&4;
		case "$was" in $undef) . ./whoa; esac; eval "$var=\$td";;
	*)
		echo "$sym() NOT found." >&4;
		case "$was" in $define) . ./whoa; esac; eval "$var=\$tu";;
	esac;;
*)
	case "$was" in
	$define) echo "$sym() found." >&4;;
	*) echo "$sym() NOT found." >&4;;
	esac;;
esac'

: see if dlopen exists
xxx_runnm="$runnm"
runnm=false
set dlopen d_dlopen
eval $inlibc
runnm="$xxx_runnm"

: determine which dynamic loading, if any, to compile in
echo " "
dldir="ext/DynaLoader"
case "$usedl" in
$define|y|true)
	dflt='y'
	usedl="$define"
	;;
$undef|n|false)
	dflt='n'
	usedl="$undef"
	;;
*) 
	dflt='n'
	case "$d_dlopen" in
	    $define) dflt='y' ;;
	esac
	case "$i_dld" in
	    $define) dflt='y' ;;
	esac
	: Does a dl_xxx.xs file exist for this operating system
	$test -f $rsrc/$dldir/dl_${osname}.xs && dflt='y'
	;;
esac
rp="Do you wish to use dynamic loading?"
. ./myread
usedl="$ans"
case "$ans" in
y*) usedl="$define"
	case "$dlsrc" in
	'')
		if $test -f $rsrc/$dldir/dl_${osname}.xs ; then
			dflt="$dldir/dl_${osname}.xs"
		elif $test "$d_dlopen" = "$define" ; then
			dflt="$dldir/dl_dlopen.xs"
		elif $test "$i_dld" = "$define" ; then
			dflt="$dldir/dl_dld.xs"
		else
			dflt=''
		fi
		;;
	*)	dflt="$dldir/$dlsrc"
		;;
	esac
    echo "The following dynamic loading files are available:"
	: Can not go over to $dldir because getfile has path hard-coded in.
	tdir=`pwd`; cd $rsrc; $ls -C $dldir/dl*.xs; cd $tdir
	rp="Source file to use for dynamic loading"
	fn="fne"
	# XXX This getfile call will fail the existence check if you try 
	# building away from $src (this is not supported yet).
	. ./getfile
	usedl="$define"
	: emulate basename
	dlsrc=`echo $ans | $sed -e 's@@.*/\([^/]*\)$@@\1@@'`

	$cat << EOM

Some systems may require passing special flags to $cc -c to
compile modules that will be used to create a shared library.
To use no flags, say "none".

EOM
    case "$cccdlflags" in
    '')	case "$gccversion" in
		'') case "$osname" in
			hpux)	dflt='+z' ;;
			next)	dflt='none' ;;
			irix*)	dflt='-KPIC' ;;
			svr4*|esix*|solaris) dflt='-KPIC' ;;
			sunos)	dflt='-pic' ;;
			*)	dflt='none' ;;
		    esac
			;;
		*)  case "$osname" in
			svr4*|esix*|solaris) dflt='-fPIC' ;;
			*)	dflt='-fpic' ;;
		    esac ;;
	    esac ;;
	' ') dflt='none' ;;
    *)	dflt="$cccdlflags" ;;
    esac
    rp="Any special flags to pass to $cc -c to compile shared library modules?"
    . ./myread
    case "$ans" in
    none) cccdlflags=' ' ;;
    *) cccdlflags="$ans" ;;
    esac

    cat << EOM

Some systems use ld to create libraries that can be dynamically loaded,
while other systems (such as those using ELF) use $cc.

EOM
	case "$ld" in
	'')	$cat >try.c <<'EOM'
/* Test for whether ELF binaries are produced */
#include <fcntl.h>
#include <stdlib.h>
int main() {
	char b[4];
	int i = open("a.out",O_RDONLY);
	if(i == -1) 
		exit(1); /* fail */
	if(read(i,b,4)==4 && b[0]==127 && b[1]=='E' && b[2]=='L' && b[3]=='F')
		exit(0); /* succeed (yes, it's ELF) */
	else
		exit(1); /* fail */
}
EOM
		if $cc $ccflags try.c >/dev/null 2>&1 && ./a.out; then
			cat <<EOM
You appear to have ELF support.  I'll use $cc to build dynamic libraries.
EOM
			dflt="$cc"
d3787 1
a3787 2
			echo "I'll use ld to build dynamic libraries."
			dflt='ld'
a3788 1
		rm -f try.c a.out
d3790 5
a3794 1
	*)	dflt="$ld"
d3797 2
d3800 5
a3804 3
    rp="What command should be used to create dynamic libraries?"
    . ./myread
	ld="$ans"
d3806 11
a3816 1
    cat << EOM
d3818 8
a3825 35
Some systems may require passing special flags to $ld to create a
library that can be dynamically loaded.  If your ld flags include
-L/other/path options to locate libraries outside your loader's normal
search path, you may need to specify those -L options here as well.  To
use no flags, say "none".

EOM
    case "$lddlflags" in
    '') case "$osname" in
			hpux)  dflt='-b' ;;
			linux|irix*)	dflt='-shared' ;;
			next)  dflt='none' ;;
			solaris) dflt='-G' ;;
  			beos) dflt='-nostart' ;;
			sunos) dflt='-assert nodefinitions' ;;
			svr4*|esix*) dflt="-G $ldflags" ;;
	        *)     dflt='none' ;;
			esac
			;;
    *) dflt="$lddlflags" ;;
    esac

	: Try to guess additional flags to pick up local libraries.
	: Be careful not to append to a plain 'none'
	case "$dflt" in
	none) dflt='' ;;
	esac
	for thisflag in $ldflags; do
		case "$thisflag" in
		-L*)
			case " $dflt " in
			*" $thisflag "*) ;;
			*) dflt="$dflt $thisflag" ;;
			esac
			;;
d3827 3
a3829 1
	done
d3831 4
a3834 3
	case "$dflt" in
	''|' ') dflt='none' ;;
	esac
d3836 15
a3850 6
    rp="Any special flags to pass to $ld to create a dynamically loaded library?"
    . ./myread
    case "$ans" in
    none) lddlflags=' ' ;;
    *) lddlflags="$ans" ;;
    esac
d3852 7
a3858 1
	cat <<EOM
d3860 5
a3864 3
Some systems may require passing special flags to $cc to indicate that
the resulting executable will use dynamic linking.  To use no flags,
say "none".
d3866 6
a3871 25
EOM
    case "$ccdlflags" in
    '') case "$osname" in
		hpux)	dflt='-Wl,-E' ;;
		linux)	dflt='-rdynamic' ;;
		next)	dflt='none' ;;
		sunos)	dflt='none' ;;
		*)	dflt='none' ;;
	    esac ;;
    ' ')  dflt='none' ;;
    *)  dflt="$ccdlflags" ;;
    esac
    rp="Any special flags to pass to $cc to use dynamic loading?"
    . ./myread
    case "$ans" in
    none) ccdlflags=' ' ;;
    *) ccdlflags="$ans" ;;
    esac
    ;;
*)  usedl="$undef"
	ld='ld'
    dlsrc='dl_none.xs'
    lddlflags=''
    ccdlflags=''
    ;;
d3874 10
a3883 30
also=''
case "$usedl" in
$undef)
	# No dynamic loading being used, so don't bother even to prompt.
	useshrplib='false'
	;;
*)	case "$useshrplib" in
	'')	case "$osname" in
		svr4*|dgux|dynixptx|esix|powerux|beos)
			dflt=y
			also='Building a shared libperl is required for dynamic loading to work on your system.'
			;;
		next*)
			case "$osvers" in
			4*)	dflt=y
				also='Building a shared libperl is needed for MAB support.'
				;;
			*)	dflt=n
				;;
			esac
			;;
		*)	dflt=n
			;;
		esac
		;;
	$define|true|[Yy]*)
		dflt=y
		;;
	*)	dflt=n
		;;
d3885 6
a3890 25
	$cat << EOM

The perl executable is normally obtained by linking perlmain.c with
libperl${_a}, any static extensions (usually just DynaLoader), and
any other libraries needed on this system (such as -lm, etc.).  Since
your system supports dynamic loading, it is probably possible to build
a shared libperl.$so.  If you will have more than one executable linked
to libperl.$so, this will significantly reduce the size of each
executable, but it may have a noticeable affect on performance.  The
default is probably sensible for your system.
$also

EOM
	rp="Build a shared libperl.$so (y/n)"
	. ./myread
	case "$ans" in
	true|$define|[Yy]*)
		useshrplib='true'
		# Why does next4 have to be so different?
		case "${osname}${osvers}" in
		next4*)	xxx='DYLD_LIBRARY_PATH' ;;
		os2*)	xxx='' ;; # Nothing special needed.
		beos*)  xxx='' ;;
		*)		xxx='LD_LIBRARY_PATH' ;;
		esac
a3891 1
	*)	useshrplib='false' ;;
d3896 10
a3905 29
case "$useshrplib" in
true)
	case "$libperl" in
	'')
		# Figure out a good name for libperl.so.  Since it gets stored in
		# a version-specific architecture-dependent library, the version
		# number isn't really that important, except for making cc/ld happy.
		#
		# A name such as libperl.so.3.1
		majmin="libperl.$so.$patchlevel.$subversion"
		# A name such as libperl.so.301
		majonly=`echo $patchlevel $subversion |
			$awk '{printf "%d%02d", $1, $2}'`
		majonly=libperl.$so.$majonly
		# I'd prefer to keep the os-specific stuff here to a minimum, and
		# rely on figuring it out from the naming of libc.
		case "${osname}${osvers}" in
		next4*)
			dflt=libperl.5.$so
			# XXX How handle the --version stuff for MAB?
			;;
		linux*)  # ld won't link with a bare -lperl otherwise.
			dflt=libperl.$so
			;;
		*)	# Try to guess based on whether libc has major.minor.
			case "$libc" in
			*libc.$so.[0-9]*.[0-9]*) dflt=$majmin ;;
			*libc.$so.[0-9]*) dflt=$majonly ;;
			*)	dflt=libperl.$so ;;
d3907 17
a3923 7
			;;
		esac
		;;
	*)	dflt=$libperl
		;;
	esac
	cat << EOM
d3925 7
a3931 5
I need to select a good name for the shared libperl.  If your system uses
library names with major and minor numbers, then you might want something
like $majmin.  Alternatively, if your system uses a single version
number for shared libraries, then you might want to use $majonly.
Or, your system might be quite happy with a simple libperl.$so.
d3933 4
a3936 3
Since the shared libperl will get installed into a version-specific
architecture-dependent directory, the version number of the shared perl
library probably isn't important, so the default should be o.k.
d3938 2
a3939 9
EOM
	rp='What name do you want to give to the shared libperl?'
	. ./myread
	libperl=$ans
	echo "Ok, I'll use $libperl"
	;;
*)
	libperl="libperl${_a}"
	;;
d3941 8
d3950 1
a3950 8
# Detect old use of shrpdir via undocumented Configure -Dshrpdir
case "$shrpdir" in
'') ;;
*)	$cat >&4 <<EOM
WARNING:  Use of the shrpdir variable for the installation location of
the shared $libperl is not supported.  It was never documented and
will not work in this version.  Let perlbug@@perl.com
know of any problems this may cause.
d3952 9
a3960 17
EOM
	case "$shrpdir" in
	"$archlibexp/CORE")
		$cat >&4 <<EOM
But your current setting of $shrpdir is
the default anyway, so it's harmless.
EOM
		;;
	*)
		$cat >&4 <<EOM
Further, your current attempted setting of $shrpdir
conflicts with the value of $archlibexp/CORE
that installperl will use.
EOM
		;;
	esac
	;;
d3963 19
a3981 43
# How will the perl executable find the installed shared $libperl?
# Add $xxx to ccdlflags.
# If we can't figure out a command-line option, use $shrpenv to
# set env LD_RUN_PATH.  The main perl makefile uses this.
shrpdir=$archlibexp/CORE
xxx=''
tmp_shrpenv=''
if "$useshrplib"; then
    case "$osname" in 
	aix)
		# We'll set it in Makefile.SH...
		;;
	solaris|netbsd)
		xxx="-R $shrpdir"
		;;
	freebsd)
		xxx="-Wl,-R$shrpdir"
		;;
	linux|irix*|dec_osf)
		xxx="-Wl,-rpath,$shrpdir"
		;;
	next)
		# next doesn't like the default...
		;;
	beos)
		# beos doesn't like the default, either.
		;;
	*)
		tmp_shrpenv="env LD_RUN_PATH=$shrpdir"
		;;
	esac
	case "$xxx" in
	'') ;;
	*)	
		# Only add $xxx if it isn't already in ccdlflags.
		case " $ccdlflags " in
		*" $xxx "*)	;;
		*)	ccdlflags="$ccdlflags $xxx"
			cat <<EOM >&4

Adding $xxx to the flags
passed to $ld so that the perl executable will find the 
installed shared $libperl.
d3983 1
d3985 6
a3990 1
			;;
d3992 18
a4009 1
		;;
d4011 2
a4012 4
fi
# Respect a hint or command-line value.
case "$shrpenv" in
'') shrpenv="$tmp_shrpenv" ;;
d4015 1
a4015 4
: determine where manual pages go
set man1dir man1dir none
eval $prefixit
$cat <<EOM
d4017 8
a4024 21
$spackage has manual pages available in source form.
EOM
case "$nroff" in
nroff)
	echo "However, you don't have nroff, so they're probably useless to you."
	case "$man1dir" in
	'') man1dir="none";;
	esac;;
esac
echo "If you don't want the manual sources installed, answer 'none'."
case "$man1dir" in
' ') dflt=none
	;;
'')
	lookpath="$prefixexp/man/man1 $prefixexp/man/l_man/man1"
	lookpath="$lookpath $prefixexp/man/p_man/man1"
	lookpath="$lookpath $prefixexp/man/u_man/man1"
	lookpath="$lookpath $prefixexp/man/man.1"
	case "$sysman" in
	*/?_man*)	dflt=`./loc . $prefixexp/l_man/man1 $lookpath` ;;
	*)	dflt=`./loc . $prefixexp/man/man1 $lookpath` ;;
a4025 2
	set dflt
	eval $prefixup
d4027 1
a4027 15
*)  dflt="$man1dir"
	;;
esac
echo " "
fn=dn+~
rp="Where do the main $spackage manual pages (source) go?"
. ./getfile
if $test "X$man1direxp" != "X$ansexp"; then
	installman1dir=''
fi
man1dir="$ans"
man1direxp="$ansexp"
case "$man1dir" in
'') man1dir=' '
	installman1dir='';;
a4028 2
if $afs; then
	$cat <<EOM
d4030 7
a4036 38
Since you are running AFS, I need to distinguish the directory in which
manual pages reside from the directory in which they are installed (and from
which they are presumably copied to the former directory by occult means).

EOM
	case "$installman1dir" in
	'') dflt=`echo $man1direxp | sed 's#^/afs/#/afs/.#'`;;
	*) dflt="$installman1dir";;
	esac
	fn=de~
	rp='Where will man pages be installed?'
	. ./getfile
	installman1dir="$ans"
else
	installman1dir="$man1direxp"
fi

: What suffix to use on installed man pages

case "$man1dir" in
' ')
	man1ext='0'
	;;
*)
	rp="What suffix should be used for the main $spackage man pages?"
	case "$man1ext" in
	'')	case "$man1dir" in
		*1)  dflt=1 ;;
		*1p) dflt=1p ;;
		*1pm) dflt=1pm ;;
		*l) dflt=l;;
		*n) dflt=n;;
		*o) dflt=o;;
		*p) dflt=p;;
		*C) dflt=C;;
		*L) dflt=L;;
		*L1) dflt=L1;;
		*) dflt=1;;
a4038 1
	*)	dflt="$man1ext";;
d4040 4
a4043 3
	. ./myread
	man1ext="$ans"
	;;
d4046 1
a4046 42
: see if we can have long filenames
echo " "
rmlist="$rmlist /tmp/cf$$"
$test -d /tmp/cf$$ || mkdir /tmp/cf$$
first=123456789abcdef
second=/tmp/cf$$/$first
$rm -f $first $second
if (echo hi >$first) 2>/dev/null; then
	if $test -f 123456789abcde; then
		echo 'You cannot have filenames longer than 14 characters.  Sigh.' >&4
		val="$undef"
	else
		if (echo hi >$second) 2>/dev/null; then
			if $test -f /tmp/cf$$/123456789abcde; then
				$cat <<'EOM'
That's peculiar... You can have filenames longer than 14 characters, but only
on some of the filesystems.  Maybe you are using NFS.  Anyway, to avoid problems
I shall consider your system cannot support long filenames at all.
EOM
				val="$undef"
			else
				echo 'You can have filenames longer than 14 characters.' >&4
				val="$define"
			fi
		else
			$cat <<'EOM'
How confusing! Some of your filesystems are sane enough to allow filenames
longer than 14 characters but some others like /tmp can't even think about them.
So, for now on, I shall assume your kernel does not allow them at all.
EOM
			val="$undef"
		fi
	fi
else
	$cat <<'EOM'
You can't have filenames longer than 14 chars.  You can't even think about them!
EOM
	val="$undef"
fi 
set d_flexfnam
eval $setvar
$rm -rf /tmp/cf$$ 123456789abcde*
d4048 3
a4050 4
: determine where library module manual pages go
set man3dir man3dir none
eval $prefixit
$cat <<EOM
d4052 5
a4056 2
$spackage has manual pages for many of the library modules.
EOM
d4058 1
a4058 9
case "$nroff" in
nroff)
	$cat <<'EOM'
However, you don't have nroff, so they're probably useless to you.
EOM
	case "$man3dir" in
	'') man3dir="none";;
	esac;;
esac
d4060 5
a4064 21
case "$d_flexfnam" in
undef)
	$cat <<'EOM'
However, your system can't handle the long file names like File::Basename.3. 
EOM
	case "$man3dir" in
	'') man3dir="none";;
	esac;;
esac

echo "If you don't want the manual sources installed, answer 'none'."
prog=`echo $package | $sed 's/-*[0-9.]*$//'`
case "$man3dir" in
'')	case "$prefix" in 
	*$prog*) dflt=`echo $man1dir | 
			$sed -e 's/man1/man3/g' -e 's/man\.1/man\.3/g'` ;;
	*)	dflt="$privlib/man/man3" ;;
	esac
	;;
' ') dflt=none;;
*)	dflt="$man3dir" ;;
d4066 3
d4070 5
d4076 2
a4077 6
fn=dn+~
rp="Where do the $package library man pages (source) go?"
. ./getfile
if test "X$man3direxp" != "X$ansexp"; then
	installman3dir=''
fi
d4079 1
a4079 12
man3dir="$ans"
man3direxp="$ansexp"
case "$man3dir" in
'') man3dir=' '
	installman3dir='';;
esac
if $afs; then
	$cat <<EOM

Since you are running AFS, I need to distinguish the directory in which
manual pages reside from the directory in which they are installed (and from
which they are presumably copied to the former directory by occult means).
d4082 13
a4094 8
	case "$installman3dir" in
	'') dflt=`echo $man3direxp | sed 's#^/afs/#/afs/.#'`;;
	*) dflt="$installman3dir";;
	esac
	fn=de~
	rp='Where will man pages be installed?'
	. ./getfile
	installman3dir="$ans"
d4096 3
a4098 1
	installman3dir="$man3direxp"
d4100 6
a4105 23

: What suffix to use on installed man pages

case "$man3dir" in
' ')
	man3ext='0'
	;;
*)
	rp="What suffix should be used for the $package library man pages?"
	case "$man3ext" in
	'')	case "$man3dir" in
		*3)  dflt=3 ;;
		*3p) dflt=3p ;;
		*3pm) dflt=3pm ;;
		*l) dflt=l;;
		*n) dflt=n;;
		*o) dflt=o;;
		*p) dflt=p;;
		*C) dflt=C;;
		*L) dflt=L;;
		*L3) dflt=L3;;
		*) dflt=3;;
		esac
d4107 1
a4107 1
	*)	dflt="$man3ext";;
d4109 1
d4111 4
a4114 45
	man3ext="$ans"
	;;
esac

: see if we have to deal with yellow pages, now NIS.
if $test -d /usr/etc/yp || $test -d /etc/yp; then
	if $test -f /usr/etc/nibindd; then
		echo " "
		echo "I'm fairly confident you're on a NeXT."
		echo " "
		rp='Do you get the hosts file via NetInfo?'
		dflt=y
		case "$hostcat" in
		nidump*) ;;
		'') ;;
		*) dflt=n;;
		esac
		. ./myread
		case "$ans" in
		y*) hostcat='nidump hosts .';;
		*)	case "$hostcat" in
			nidump*) hostcat='';;
			esac
			;;
		esac
	fi
	case "$hostcat" in
	nidump*) ;;
	*)
		case "$hostcat" in
		*ypcat*) dflt=y;;
		'') if $contains '^\+' /etc/passwd >/dev/null 2>&1; then
				dflt=y
			else
				dflt=n
			fi;;
		*) dflt=n;;
		esac
		echo " "
		rp='Are you getting the hosts file via yellow pages?'
		. ./myread
		case "$ans" in
		y*) hostcat='ypcat hosts';;
		*) hostcat='cat /etc/hosts';;
		esac
d4117 2
a4118 9
fi
case "$hostcat" in
'') hostcat='cat /etc/hosts';;
esac
case "$groupcat" in
'') groupcat='cat /etc/group';;
esac
case "$passcat" in
'') passcat='cat /etc/passwd';;
d4120 1
d4122 7
a4128 10
: now get the host name
echo " "
echo "Figuring out host name..." >&4
case "$myhostname" in
'') cont=true
	echo 'Maybe "hostname" will work...'
	if tans=`sh -c hostname 2>&1` ; then
		myhostname=$tans
		phostname=hostname
		cont=''
d4131 1
a4131 1
*) cont='';;
d4133 1
a4133 43
if $test "$cont"; then
	if ./xenix; then
		echo 'Oh, dear.  Maybe "/etc/systemid" is the key...'
		if tans=`cat /etc/systemid 2>&1` ; then
			myhostname=$tans
			phostname='cat /etc/systemid'
			echo "Whadyaknow.  Xenix always was a bit strange..."
			cont=''
		fi
	elif $test -r /etc/systemid; then
		echo "(What is a non-Xenix system doing with /etc/systemid?)"
	fi
fi
if $test "$cont"; then
	echo 'No, maybe "uuname -l" will work...'
	if tans=`sh -c 'uuname -l' 2>&1` ; then
		myhostname=$tans
		phostname='uuname -l'
	else
		echo 'Strange.  Maybe "uname -n" will work...'
		if tans=`sh -c 'uname -n' 2>&1` ; then
			myhostname=$tans
			phostname='uname -n'
		else
			echo 'Oh well, maybe I can mine it out of whoami.h...'
			if tans=`sh -c $contains' sysname $usrinc/whoami.h' 2>&1` ; then
				myhostname=`echo "$tans" | $sed 's/^.*"\(.*\)"/\1/'`
				phostname="sed -n -e '"'/sysname/s/^.*\"\\(.*\\)\"/\1/{'"' -e p -e q -e '}' <$usrinc/whoami.h"
			else
				case "$myhostname" in
				'') echo "Does this machine have an identity crisis or something?"
					phostname='';;
				*)
					echo "Well, you said $myhostname before..."
					phostname='echo $myhostname';;
				esac
			fi
		fi
	fi
fi
: you do not want to know about this
set $myhostname
myhostname=$1
d4135 3
a4137 10
: verify guess
if $test "$myhostname" ; then
	dflt=y
	rp='Your host name appears to be "'$myhostname'".'" Right?"
	. ./myread
	case "$ans" in
	y*) ;;
	*) myhostname='';;
	esac
fi
d4139 4
a4142 7
: bad guess or no guess
while $test "X$myhostname" = X ; do
	dflt=''
	rp="Please type the (one word) name of your host:"
	. ./myread
	myhostname="$ans"
done
d4144 9
a4152 6
: translate upper to lower if necessary
case "$myhostname" in
*[A-Z]*)
	echo "(Normalizing case in your host name)"
	myhostname=`echo $myhostname | ./tr '[A-Z]' '[a-z]'`
	;;
d4154 19
a4172 30

case "$myhostname" in
*.*)
	dflt=`expr "X$myhostname" : "X[^.]*\(\..*\)"`
	myhostname=`expr "X$myhostname" : "X\([^.]*\)\."`
	echo "(Trimming domain name from host name--host name is now $myhostname)"
	;;
*) case "$mydomain" in
	'')
		{
			test "X$hostcat" = "Xypcat hosts" &&
			ypmatch "$myhostname" hosts 2>/dev/null |\
				$sed -e 's/[	 ]*#.*//; s/$/ /' > hosts && \
			$test -s hosts
		} || {
		     	$hostcat | $sed -n -e "s/[	 ]*#.*//; s/\$/ /
					/[	 ]$myhostname[	. ]/p" > hosts
		}
		tmp_re="[	. ]"
		$test x`$awk "/[0-9].*[	 ]$myhostname$tmp_re/ { sum++ }
			     END { print sum }" hosts` = x1 || tmp_re="[	 ]"
		dflt=.`$awk "/[0-9].*[	 ]$myhostname$tmp_re/ {for(i=2; i<=NF;i++) print \\\$i}" \
			hosts | $sort | $uniq | \
			$sed -n -e "s/$myhostname\.\([-a-zA-Z0-9_.]\)/\1/p"`
		case `$echo X$dflt` in
		X*\ *)	echo "(Several hosts in /etc/hosts matched hostname)"
			dflt=.
			;;
		X.) echo "(You do not have fully-qualified names in /etc/hosts)"
			;;
d4174 5
a4178 16
		case "$dflt" in
		.)
			tans=`./loc resolv.conf X /etc /usr/etc`
			if $test -f "$tans"; then
				echo "(Attempting domain name extraction from $tans)"
				dflt=.`$sed -n -e 's/	/ /g' \
				  -e 's/^search  *\([^ ]*\).*/\1/p' $tans \
				  | ./tr '[A-Z]' '[a-z]' 2>/dev/null`
				case "$dflt" in
				.) dflt=.`$sed -n -e 's/	/ /g' \
				     -e 's/^domain  *\([^ ]*\).*/\1/p' $tans \
				     | ./tr '[A-Z]' '[a-z]' 2>/dev/null`
  					;;
				esac
			fi
			;;
d4180 5
a4184 8
		case "$dflt" in
		.) echo "(No help from resolv.conf either -- attempting clever guess)"
			dflt=.`sh -c domainname 2>/dev/null`
			case "$dflt" in
			'') dflt='.';;
			.nis.*|.yp.*|.main.*) dflt=`echo $dflt | $sed -e 's/^\.[^.]*//'`;;
			esac
			;;
d4186 5
a4190 4
		case "$dflt" in
		.) echo "(Lost all hope -- silly guess then)"
			dflt='.uucp'
			;;
d4192 13
a4204 4
		$rm -f hosts
		;;
	*) dflt="$mydomain";;
	esac;;
d4206 14
d4221 1
a4221 1
rp="What is your domain name?"
a4222 1
tans="$ans"
d4224 2
a4225 3
'') ;;
.*) ;;
*) tans=".$tans";;
a4226 1
mydomain="$tans"
d4228 9
a4236 5
: translate upper to lower if necessary
case "$mydomain" in
*[A-Z]*)
	echo "(Normalizing case in your domain name)"
	mydomain=`echo $mydomain | ./tr '[A-Z]' '[a-z]'`
a4237 5
esac

: a little sanity check here
case "$phostname" in
'') ;;
d4239 3
a4241 12
	case `$phostname | ./tr '[A-Z]' '[a-z]'` in
	$myhostname$mydomain|$myhostname) ;;
	*)
		case "$phostname" in
		sed*)
			echo "(That doesn't agree with your whoami.h file, by the way.)"
			;;
		*)
			echo "(That doesn't agree with your $phostname command, by the way.)"
			;;
		esac
	;;
a4244 1

d4247 6
a4252 5
I need to get your e-mail address in Internet format if possible, i.e.
something like user@@host.domain. Please answer accurately since I have
no easy means to double check it. The default value provided below
is most probably close to the reality but may not be valid from outside
your organization...
d4255 6
a4260 25
cont=x
while test "$cont"; do
	case "$cf_email" in
	'') dflt="$cf_by@@$myhostname$mydomain";;
	*) dflt="$cf_email";;
	esac
	rp='What is your e-mail address?'
	. ./myread
	cf_email="$ans"
	case "$cf_email" in
	*@@*.*) cont='' ;;
	*)
		rp='Address does not look like an Internet one.  Use it anyway?'
		case "$fastread" in
		yes) dflt=y ;;
		*) dflt=n ;;
		esac
		. ./myread
		case "$ans" in
		y*) cont='' ;;
		*) echo " " ;;
		esac
		;;
	esac
done
d4262 4
a4265 1
$cat <<EOM
d4267 12
a4278 5
If you or somebody else will be maintaining perl at your site, please
fill in the correct e-mail address here so that they may be contacted
if necessary. Currently, the "perlbug" program included with perl
will send mail to this address in addition to perlbug@@perl.com. You may
enter "none" for no administrator.
d4280 11
a4290 4
EOM
case "$perladmin" in
'') dflt="$cf_email";;
*) dflt="$perladmin";;
a4291 3
rp='Perl administrator e-mail address'
. ./myread
perladmin="$ans"
d4293 37
a4329 32
: figure out how to guarantee perl startup
case "$startperl" in
'')
	case "$sharpbang" in
	*!)
		$cat <<EOH

I can use the #! construct to start perl on your system. This will
make startup of perl scripts faster, but may cause problems if you
want to share those scripts and perl is not in a standard place
($binexp/perl) on all your platforms. The alternative is to force
a shell by starting the script with a single ':' character.

EOH
		dflt="$binexp/perl"
		rp='What shall I put after the #! to start up perl ("none" to not use #!)?'
		. ./myread
		case "$ans" in
		none)	startperl=": # use perl";;
		*)	startperl="#!$ans"
			if $test 30 -lt `echo "$ans" | wc -c`; then
				$cat >&4 <<EOM

WARNING:  Some systems limit the #! command to 32 characters.
If you experience difficulty running Perl scripts with #!, try
installing Perl in a directory with a shorter pathname.

EOM
			fi ;;
		esac
		;;
	*) startperl=": # use perl"
d4331 1
d4333 1
d4336 23
a4358 23
echo "I'll use $startperl to start perl scripts."

: figure best path for perl in scripts
case "$perlpath" in
'')
	perlpath="$binexp/perl"
	case "$startperl" in
	*!*) ;;
	*)
		$cat <<EOH

I will use the "eval 'exec'" idiom to start Perl on your system.
I can use the full path of your Perl binary for this purpose, but
doing so may cause problems if you want to share those scripts and
Perl is not always in a standard place ($binexp/perl).

EOH
		dflt="$binexp/perl"
		rp="What path shall I use in \"eval 'exec'\"?"
		. ./myread
		perlpath="$ans"
		;;
	esac
d4361 39
a4399 35
case "$startperl" in
*!*)	;;
*)	echo "I'll use $perlpath in \"eval 'exec'\"" ;;
esac

: determine where public executable scripts go
set scriptdir scriptdir
eval $prefixit
case "$scriptdir" in
'')
	dflt="$bin"
	: guess some guesses
	$test -d /usr/share/scripts && dflt=/usr/share/scripts
	$test -d /usr/share/bin && dflt=/usr/share/bin
	$test -d /usr/local/script && dflt=/usr/local/script
	$test -d $prefixexp/script && dflt=$prefixexp/script
	set dflt
	eval $prefixup
	;;
*)  dflt="$scriptdir"
	;;
esac
$cat <<EOM
 
Some installations have a separate directory just for executable scripts so
that they can mount it across multiple architectures but keep the scripts in
one spot.  You might, for example, have a subdirectory of /usr/share for this.
Or you might just lump your scripts in with all your other executables.
 
EOM
fn=d~
rp='Where do you keep publicly executable scripts?'
. ./getfile
if $test "X$ansexp" != "X$scriptdirexp"; then
	installscript=''
d4401 3
a4403 4
scriptdir="$ans"
scriptdirexp="$ansexp"
if $afs; then
	$cat <<EOM
d4405 2
a4406 3
Since you are running AFS, I need to distinguish the directory in which
scripts reside from the directory in which they are installed (and from
which they are presumably copied to the former directory by occult means).
a4408 8
	case "$installscript" in
	'') dflt=`echo $scriptdirexp | sed 's#^/afs/#/afs/.#'`;;
	*) dflt="$installscript";;
	esac
	fn=de~
	rp='Where will public scripts be installed?'
	. ./getfile
	installscript="$ans"
d4410 4
a4413 2
	installscript="$scriptdirexp"
fi
d4415 3
a4417 9
: determine where site specific libraries go.
: Usual default is /usr/local/lib/perl5/site_perl/$apiversion
prog=`echo $package | $sed 's/-*[0-9.]*$//'`
case "$prefix" in
*perl*) set dflt sitelib lib/site_$prog/$apiversion ;;
*)	 set dflt sitelib lib/$package/site_$prog/$apiversion ;;
esac
eval $prefixit
$cat <<EOM
d4419 1
a4419 4
The installation process will also create a directory for
site-specific extensions and modules.  Some users find it convenient
to place all local files in this directory rather than in the main
distribution directory.
d4422 3
a4424 2
fn=d~+
rp='Pathname for the site-specific library files?'
d4426 1
a4426 7
if $test "X$sitelibexp" != "X$ansexp"; then
	installsitelib=''
fi
sitelib="$ans"
sitelibexp="$ansexp"
if $afs; then
	$cat <<EOM
d4428 11
a4438 4
Since you are running AFS, I need to distinguish the directory in
which site-specific files reside from the directory in which they are
installed (and from which they are presumably copied to the former
directory by occult means).
d4440 7
a4446 4
EOM
	case "$installsitelib" in
	'') dflt=`echo $sitelibexp | sed 's#^/afs/#/afs/.#'`;;
	*) dflt="$installsitelib";;
d4448 52
a4499 4
	fn=de~
	rp='Where will site-specific files be installed?'
	. ./getfile
	installsitelib="$ans"
d4501 34
a4534 26
	installsitelib="$sitelibexp"
fi

: determine where site specific architecture-dependent libraries go.
: sitelib  default is /usr/local/lib/perl5/site_perl/$apiversion
: sitearch default is /usr/local/lib/perl5/site_perl/$apiversion/$archname
: sitelib may have an optional trailing /share.
tdflt=`echo $sitelib | $sed 's,/share$,,'`
tdflt="$tdflt/$archname"
set sitearch sitearch none
eval $prefixit
case "$sitearch" in
'')	dflt="$tdflt" ;;
*)	dflt="$sitearch" ;;
esac
$cat <<EOM

The installation process will also create a directory for
architecture-dependent site-specific extensions and modules.

EOM
fn=nd~+
rp='Pathname for the site-specific architecture-dependent library files?'
. ./getfile
if $test "X$sitearchexp" != "X$ansexp"; then
	installsitearch=''
d4536 5
a4540 21
sitearch="$ans"
sitearchexp="$ansexp"
if $afs; then
	$cat <<EOM

Since you are running AFS, I need to distinguish the directory in
which site-specific architecture-dependent library files reside from
the directory in which they are installed (and from which they are
presumably copied to the former directory by occult means).

EOM
	case "$installsitearch" in
	'') dflt=`echo $sitearchexp | sed 's#^/afs/#/afs/.#'`;;
	*) dflt="$installsitearch";;
	esac
	fn=de~
	rp='Where will site-specific architecture-dependent files be installed?'
	. ./getfile
	installsitearch="$ans"
else
	installsitearch="$sitearchexp"
d4542 3
d4546 35
a4580 1
cat <<EOM
d4582 26
a4607 27
Previous version of $package used the standard IO mechanisms as defined
in <stdio.h>.  Versions 5.003_02 and later of perl allow alternate IO
mechanisms via a "PerlIO" abstraction, but the stdio mechanism is still
the default.  This abstraction layer can use AT&T's sfio (if you already
have sfio installed) or regular stdio.  Using PerlIO with sfio may cause
problems with some extension modules.  Using PerlIO with stdio is safe,
but it is slower than plain stdio and therefore is not the default.

If this doesn't make any sense to you, just accept the default 'n'.
EOM
case "$useperlio" in
$define|true|[yY]*)	dflt='y';;
*) dflt='n';;
esac
rp='Use the experimental PerlIO abstraction layer?'
. ./myread
case "$ans" in
y|Y) 
	val="$define"
	;;     
*)      
	echo "Ok, doing things the stdio way"
	val="$undef"
	;;
esac
set useperlio
eval $setvar 
d4610 3
a4612 4
if test "X$d_Gconvert" = X; then
    echo " "
    echo "Checking for an efficient way to convert floats to strings."
    $cat >try.c <<'EOP'
a4614 1
char *myname = "gconvert";
a4617 1
char *myname = "gcvt";
a4620 1
char *myname = "sprintf";
d4622 1
a4622 17

#include <stdio.h>

int
checkit(expect, got)
char *expect;
char *got;
{
    if (strcmp(expect, got)) {
		printf("%s oddity:  Expected %s, got %s\n",
			myname, expect, got);
		exit(1);
	}
}

int main()
{ 
a4623 7
	buf[63] = '\0';

	/* This must be 1st test on (which?) platform */
	/* Alan Burlison <AlanBurlsin@@unn.unisys.com> */
	Gconvert(0.1, 8, 0, buf);
	checkit("0.1", buf);

d4625 2
a4626 2
	checkit("1", buf);

d4628 2
a4629 2
	checkit("0", buf);

d4631 2
a4632 10
	checkit("-1", buf);

	/* Some Linux gcvt's give 1.e+5 here. */
	Gconvert(100000.0, 8, 0, buf); 
	checkit("100000", buf);
	
	/* Some Linux gcvt's give -1.e+5 here. */
	Gconvert(-100000.0, 8, 0, buf); 
	checkit("-100000", buf);

d4636 6
a4641 6
    case "$d_Gconvert" in
    gconvert*) xxx_list='gconvert gcvt sprintf' ;;
    gcvt*) xxx_list='gcvt gconvert sprintf' ;;
    sprintf*) xxx_list='sprintf gconvert gcvt' ;;
    *) xxx_list='gconvert gcvt sprintf' ;;
    esac
d4643 1
a4643 1
    for xxx_convert in $xxx_list; do
d4645 3
a4647 3
	$rm -f try try$_o
	set try -DTRY_$xxx_convert
	if eval $compile; then
d4650 1
d4654 1
a4654 1
			echo "...But $xxx_convert didn't work as I expected."
d4659 1
a4659 1
    done
d4661 5
a4665 6
    case "$xxx_convert" in
    gconvert) d_Gconvert='gconvert((x),(n),(t),(b))' ;;
    gcvt) d_Gconvert='gcvt((x),(n),(b))' ;;
    *) d_Gconvert='sprintf((b),"%.*g",(n),(x))' ;;
    esac
fi
d4673 60
d4752 1
a4752 1
int main() {
d4758 1
a4758 1
		$cc $cppflags -DI_SYS_FILE -o access access.c >/dev/null 2>&1 ; then
d4762 1
a4762 1
		$cc $cppflags -DI_FCNTL -o access access.c >/dev/null 2>&1 ; then
d4766 1
a4766 1
		$cc $cppflags -DI_UNISTD -o access access.c >/dev/null 2>&1 ; then
a4809 66
: see if this is a unistd.h system
set unistd.h i_unistd
eval $inhdr

: see if getpgrp exists
set getpgrp d_getpgrp
eval $inlibc

case "$d_getpgrp" in
"$define")
	echo " "
	echo "Checking to see which flavor of getpgrp is in use..."
	$cat >set.c <<EOP
#$i_unistd I_UNISTD
#include <sys/types.h>
#ifdef I_UNISTD
#  include <unistd.h>
#endif
int main()
{
	if (getuid() == 0) {
		printf("(I see you are running Configure as super-user...)\n");
		setuid(1);
	}
#ifdef TRY_BSD_PGRP
	if (getpgrp(1) == 0)
		exit(0);
#else
	if (getpgrp() > 0)
		exit(0);
#endif
	exit(1);
}
EOP
	if $cc -DTRY_BSD_PGRP $ccflags $ldflags -o set set.c $libs >/dev/null 2>&1 && ./set; then
		echo "You have to use getpgrp(pid) instead of getpgrp()." >&4
		val="$define"
	elif $cc $ccflags $ldflags -o set set.c $libs >/dev/null 2>&1 && ./set; then
		echo "You have to use getpgrp() instead of getpgrp(pid)." >&4
		val="$undef"
	else
		echo "I can't seem to compile and run the test program."
		if ./usg; then
			xxx="a USG one, i.e. you use getpgrp()."
		else
			# SVR4 systems can appear rather BSD-ish.
			case "$i_unistd" in
			$undef)
				xxx="a BSD one, i.e. you use getpgrp(pid)."
				val="$define"
				;;
			$define)
				xxx="probably a USG one, i.e. you use getpgrp()."
				val="$undef"
				;;
			esac
		fi
		echo "Assuming your getpgrp is $xxx" >&4
	fi
	;;
*) val="$undef";;
esac
set d_bsdgetpgrp
eval $setvar
$rm -f set set.c

d4814 1
a4817 1
	echo "Checking to see which flavor of setpgrp is in use..."
d4819 1
a4819 6
#$i_unistd I_UNISTD
#include <sys/types.h>
#ifdef I_UNISTD
#  include <unistd.h>
#endif
int main()
a4824 1
#ifdef TRY_BSD_PGRP
d4826 2
a4827 6
		exit(0);
#else
	if (setpgrp() != -1)
		exit(0);
#endif
	exit(1);
d4830 8
a4837 6
	if $cc -DTRY_BSD_PGRP $ccflags $ldflags -o set set.c $libs >/dev/null 2>&1 && ./set; then
		echo 'You have to use setpgrp(pid,pgrp) instead of setpgrp().' >&4
		val="$define"
	elif $cc $ccflags $ldflags -o set set.c $libs >/dev/null 2>&1 && ./set; then
		echo 'You have to use setpgrp() instead of setpgrp(pid,pgrp).' >&4
		val="$undef"
a4838 1
		echo "(I can't seem to compile and run the test program.)"
d4840 2
a4841 1
			xxx="a USG one, i.e. you use setpgrp()."
d4843 2
a4844 11
			# SVR4 systems can appear rather BSD-ish.
			case "$i_unistd" in
			$undef)
				xxx="a BSD one, i.e. you use setpgrp(pid,pgrp)."
				val="$define"
				;;
			$define)
				xxx="probably a USG one, i.e. you use setpgrp()."
				val="$undef"
				;;
			esac
d4846 1
a4846 1
		echo "Assuming your setpgrp is $xxx" >&4
d4851 1
a4851 1
set d_bsdsetpgrp
d4854 1
d4859 1
a4859 1
: check for lengths of integral types
d4864 1
a4864 1
	$cat >intsize.c <<'EOCP'
d4866 1
a4866 1
int main()
d4868 1
a4868 3
	printf("intsize=%d;\n", sizeof(int));
	printf("longsize=%d;\n", sizeof(long));
	printf("shortsize=%d;\n", sizeof(short));
d4872 2
a4873 3
	set intsize
	if eval $compile_ok && ./intsize > /dev/null; then
		eval `./intsize`
a4874 2
		echo "Your long integers are $longsize bytes long."
		echo "Your short integers are $shortsize bytes long."
d4876 2
a4877 8
		$cat >&4 <<EOM
!
Help! I can't compile and run the intsize test program: please enlighten me!
(This is probably a misconfiguration in your system or libraries, and
you really ought to fix it.  Still, I'll try anyway.)
!
EOM
		dflt=4
a4880 8
		dflt=$intsize
		rp="What is the size of a long integer (in bytes)?"
		. ./myread
		longsize="$ans"
		dflt=2
		rp="What is the size of a short integer (in bytes)?"
		. ./myread
		shortsize="$ans"
d4884 1
a4884 1
$rm -f intsize intsize.*
d4894 1
a4894 1
	echo "You have void (*signal())()." >&4
a4898 3
elif $contains 'void.*\*.*sig' $$.tmp >/dev/null 2>&1 ; then
	echo "You have void (*signal())()." >&4
	val="$define"
d4911 3
a4913 6
		echo "As you already told me, signal handler returns void." >&4
		val="$define"
		;;
	*)	echo "As you already told me, signal handler returns int." >&4
		val="$undef"
		;;
d4927 1
a4927 1
if $test "$intsize" -ge 4; then
a4932 1
#include <stdio.h>
d4935 2
a4936 2
$signal_t blech(s) int s; { exit(3); }
int main()
d4939 1
a4939 1
	double f, g;
a4940 1
	char str[16];
d4943 4
a4946 13
	/* Don't let compiler optimize the test away.  Store the number 
	   in a writable string for gcc to pass to sscanf under HP/UX.
	*/
	sprintf(str, "2147483647");
	sscanf(str, "%lf", &f); /* f = (double) 0x7fffffff; */
	g = 10 * f;
	i32  = ($xxx) g;

	/* x86 processors will probably give 0x8000 0000, which is a
       sign change.  We don't want that.  We want to mimic SPARC
	   behavior here, which is to preserve the sign and give
	   back 0x7fff ffff.
	*/
d4952 1
a4952 2
set try
if eval $compile_ok; then
a4974 1
#include <stdio.h>
d4977 2
a4978 2
$signal_t blech(s) int s; { exit(7); }
$signal_t blech_in_list(s) int s; { exit(4); }
d4982 1
a4982 1
int main()
d4984 1
a4984 1
	double f;
a4988 11
	char str[16];
	
	/* Frustrate gcc-2.7.2's optimizer which failed this test with
	   a direct f = -123. assignment.  gcc-2.8.0 reportedly
	   optimized the whole file away
	*/
	/* Store the number in a writable string for gcc to pass to 
	   sscanf under HP/UX.
	*/
	sprintf(str, "-123");
	sscanf(str, "%lf", &f);  /* f = -123.; */
d5000 1
a5000 2
	sprintf(str, "1073741824.");
	sscanf(str, "%lf", &f); /* f = (double)0x40000000; */
d5019 1
a5019 2
	sprintf(str, "123.");
	sscanf(str, "%lf", &f);  /* f = 123.; */
d5030 252
a5281 7

}
EOCP
set try
if eval $compile_ok; then
	./try
	castflags=$?
d5283 5
a5287 2
	echo "(I can't seem to compile the test program--assuming it can't)"
	castflags=7
d5289 2
a5290 11
case "$castflags" in
0)	val="$define"
	echo "Yup, it can."
	;;
*)	val="$undef"
	echo "Nope, it can't."
	;;
esac
set d_castneg
eval $setvar
$rm -f try.*
d5292 1
a5292 1
: see if vprintf exists
d5294 3
a5296 2
if set vprintf val -f d_vprintf; eval $csym; $val; then
	echo 'vprintf() found.' >&4
a5297 23
	$cat >vprintf.c <<'EOF'
#include <varargs.h>

int main() { xxx("foo"); }

xxx(va_alist)
va_dcl
{
	va_list args;
	char buf[10];

	va_start(args);
	exit((unsigned long)vsprintf(buf,"%s",args) > 10L);
}
EOF
	set vprintf
	if eval $compile && ./vprintf; then
		echo "Your vsprintf() returns (int)." >&4
		val2="$undef"
	else
		echo "Your vsprintf() returns (char*)." >&4
		val2="$define"
	fi
d5299 2
a5300 3
	echo 'vprintf() NOT found.' >&4
		val="$undef"
		val2="$undef"
d5302 1
a5302 4
set d_vprintf
eval $setvar
val=$val2
set d_charvspr
d5304 1
d5306 4
a5309 2
: see if chown exists
set chown d_chown
d5311 1
d5313 3
a5315 3
: see if chroot exists
set chroot d_chroot
eval $inlibc
d5317 4
a5320 2
: see if chsize exists
set chsize d_chsize
d5322 1
d5324 1
a5324 1
: check for const keyword
d5326 99
a5424 7
echo 'Checking to see if your C compiler knows about "const"...' >&4
$cat >const.c <<'EOCP'
typedef struct spug { int drokk; } spug;
int main()
{
	const char *foo;
	const spug y;
d5426 54
a5479 10
EOCP
if $cc -c $ccflags const.c >/dev/null 2>&1 ; then
	val="$define"
	echo "Yup, it does."
else
	val="$undef"
	echo "Nope, it doesn't."
fi
set d_const
eval $setvar
d5481 3
a5483 32
: see if crypt exists
echo " "
if set crypt val -f d_crypt; eval $csym; $val; then
	echo 'crypt() found.' >&4
	val="$define"
	cryptlib=''
else
	cryptlib=`./loc Slibcrypt$_a "" $xlibpth`
	if $test -z "$cryptlib"; then
		cryptlib=`./loc Mlibcrypt$_a "" $xlibpth`
	else
		cryptlib=-lcrypt
	fi
	if $test -z "$cryptlib"; then
		cryptlib=`./loc Llibcrypt$_a "" $xlibpth`
	else
		cryptlib=-lcrypt
	fi
	if $test -z "$cryptlib"; then
		cryptlib=`./loc libcrypt$_a "" $libpth`
	else
		cryptlib=-lcrypt
	fi
	if $test -z "$cryptlib"; then
		echo 'crypt() NOT found.' >&4
		val="$undef"
	else
		val="$define"
	fi
fi
set d_crypt
eval $setvar
d5485 6
a5490 3
: see if cuserid exists
set cuserid d_cuserid
eval $inlibc
d5492 1
a5492 3
: see if this is a limits.h system
set limits.h i_limits
eval $inhdr
d5494 3
a5496 3
: see if this is a float.h system
set float.h i_float
eval $inhdr
a5497 14
: See if number of significant digits in a double precision number is known
echo " "
$cat >dbl_dig.c <<EOM
#$i_limits I_LIMITS
#$i_float I_FLOAT
#ifdef I_LIMITS
#include <limits.h>
#endif
#ifdef I_FLOAT
#include <float.h>
#endif
#ifdef DBL_DIG
printf("Contains DBL_DIG");
#endif
d5499 24
a5522 11
$cppstdin $cppflags $cppminus < dbl_dig.c >dbl_dig.E 2>/dev/null
if $contains 'DBL_DIG' dbl_dig.E >/dev/null 2>&1; then
	echo "DBL_DIG found." >&4
	val="$define"
else
	echo "DBL_DIG NOT found." >&4
	val="$undef"
fi
$rm -f dbl_dig.?
set d_dbl_dig
eval $setvar
d5524 6
a5529 3
: see if difftime exists
set difftime d_difftime
eval $inlibc
d5531 2
a5532 3
: see if sys/stat.h is available
set sys/stat.h i_sysstat
eval $inhdr
d5534 1
a5534 3
: see if this is a dirent system
echo " "
if xinc=`./findhdr dirent.h`; $test "$xinc"; then
d5536 7
a5542 13
	echo "<dirent.h> found." >&4
else
	val="$undef"
	if xinc=`./findhdr sys/dir.h`; $test "$xinc"; then
		echo "<sys/dir.h> found." >&4
		echo " "
	else
		xinc=`./findhdr sys/ndir.h`
	fi
	echo "<dirent.h> NOT found." >&4
fi
set i_dirent
eval $setvar
d5544 5
a5548 3
: Look for type of directory structure.
echo " "
$cppstdin $cppflags $cppminus < "$xinc" > try.c
d5550 8
a5557 5
case "$direntrytype" in
''|' ')
	case "$i_dirent" in
	$define) guess1='struct dirent' ;;
	*) guess1='struct direct'  ;;
d5559 4
d5564 1
a5564 1
*)	guess1="$direntrytype"
a5567 59
case "$guess1" in
'struct dirent') guess2='struct direct' ;;
*) guess2='struct dirent' ;;
esac
		
if $contains "$guess1" try.c >/dev/null 2>&1; then
	direntrytype="$guess1"
	echo "Your directory entries are $direntrytype." >&4
elif $contains "$guess2" try.c >/dev/null 2>&1; then
	direntrytype="$guess2"
	echo "Your directory entries seem to be $direntrytype." >&4
else
	echo "I don't recognize your system's directory entries." >&4
	rp="What type is used for directory entries on this system?"
	dflt="$guess1"
	. ./myread
	direntrytype="$ans"
fi
$rm -f try.c


: see if the directory entry stores field length
echo " "
$cppstdin $cppflags $cppminus < "$xinc" > try.c
if $contains 'd_namlen' try.c >/dev/null 2>&1; then
	echo "Good, your directory entry keeps length information in d_namlen." >&4
	val="$define"
else
	echo "Your directory entry does not know about the d_namlen field." >&4
	val="$undef"
fi
set d_dirnamlen
eval $setvar
$rm -f try.c

hasfield='varname=$1; struct=$2; field=$3; shift; shift; shift;
while $test $# -ge 2; do
	case "$1" in
	$define) echo "#include <$2>";;
	esac ;
    shift 2;
done > try.c;
echo "int main () { struct $struct foo; foo.$field = 0; }" >> try.c;
if eval $cc $optimize $ccflags -c try.c >/dev/null 2>&1; then
	val="$define";
else
	val="$undef";
fi;
set $varname;
eval $setvar;
$rm -f try.c try.o'

: see if dlerror exists
xxx_runnm="$runnm"
runnm=false
set dlerror d_dlerror
eval $inlibc
runnm="$xxx_runnm"

d5577 1
a5577 1
will need a different extension than shared libs. The default will probably
d5619 1
a5619 1
int main()
d5630 2
a5631 3
	printf ("1\n") ;
	fflush (stdout) ;
	exit(0);
d5635 7
a5641 8
	/* try putting a leading underscore */
	symbol = dlsym(handle, "_fred") ;
	if (symbol == NULL) {
	    printf ("2\n") ;
	    fflush (stdout) ;
	    exit(0);
	}
	printf ("3\n") ;
d5644 2
a5645 3
	printf ("4\n") ;
    fflush (stdout) ;
    exit(0);
a5647 1
	: Call the object file tmp-dyna.o in case dlext=o.
d5649 2
a5650 3
		mv dyna${_o} tmp-dyna${_o} > /dev/null 2>&1 && 
		$ld $lddlflags -o dyna.$dlext tmp-dyna${_o} > /dev/null 2>&1 && 
		$cc $ccflags -o fred $ldflags $cccdlflags $ccdlflags fred.c $libs > /dev/null 2>&1; then
d5667 1
a5667 1
$rm -f fred fred.? dyna.$dlext dyna.? tmp-dyna.?
a5675 16
: see if endhostent exists
set endhostent d_endhent
eval $inlibc

: see if endnetent exists
set endnetent d_endnent
eval $inlibc

: see if endprotoent exists
set endprotoent d_endpent
eval $inlibc

: see if endservent exists
set endservent d_endsent
eval $inlibc

d5686 1
a5686 1
int main() {
d5697 1
a5697 1
		set open3 -DI_SYS_FILE && eval $compile; then
d5708 1
a5708 1
		set open3 -DI_FCNTL && eval $compile; then
d5742 1
a5742 1
int main() {
d5758 1
a5758 2
	set try
	if eval $compile_ok; then
a5781 1
#ifndef errno  /* XXX need better Configure test */
a5782 1
#endif
d5786 1
a5786 1
int main()
d5836 1
a5836 2
	set try
	if eval $compile_ok; then
d5873 1
a5873 1
		if test "$status" = "$rd_nodata"; then
d5899 3
a5901 100
: see if fchmod exists
set fchmod d_fchmod
eval $inlibc

: see if fchown exists
set fchown d_fchown
eval $inlibc

: see if this is an fcntl system
set fcntl d_fcntl
eval $inlibc

: see if fgetpos exists
set fgetpos d_fgetpos
eval $inlibc

: see if flock exists
set flock d_flock
eval $inlibc

: see if fork exists
set fork d_fork
eval $inlibc

: see if pathconf exists
set pathconf d_pathconf
eval $inlibc

: see if fpathconf exists
set fpathconf d_fpathconf
eval $inlibc

: see if fsetpos exists
set fsetpos d_fsetpos
eval $inlibc

: see if gethostbyaddr exists
set gethostbyaddr d_gethbyaddr
eval $inlibc

: see if gethostbyname exists
set gethostbyname d_gethbyname
eval $inlibc

: see if this is a sys/param system
set sys/param.h i_sysparam
eval $inhdr

: see if this is a sys/mount.h system
set sys/mount.h i_sysmount
eval $inhdr

: see if fstatfs exists
set fstatfs d_fstatfs
eval $inlibc

: see if statfs knows about mount flags
echo " "
set d_statfsflags statfs f_flags $i_sysparam sys/param.h $i_sysmount sys/mount.h
eval $hasfield

: see if this is a sysstatvfs.h system
set sys/statvfs.h i_sysstatvfs
eval $inhdr

: see if fstatvfs exists
set fstatvfs d_fstatvfs
eval $inlibc

: see if gethostent exists
set gethostent d_gethent
eval $inlibc

hasproto='varname=$1; func=$2; shift; shift;
while $test $# -ge 2; do
	case "$1" in
	$define) echo "#include <$2>";;
	esac ;
    shift 2;
done > try.c;
$cppstdin $cppflags $cppminus < try.c > tryout.c 2>/dev/null;
if $contains "$func.*(" tryout.c >/dev/null 2>&1; then
	echo "$func() prototype found.";
	val="$define";
else
	echo "$func() prototype NOT found.";
	val="$undef";
fi;
set $varname;
eval $setvar;
$rm -f try.c tryout.c'

: see if this is a netdb.h system
set netdb.h i_netdb
eval $inhdr

: see if prototypes for various gethostxxx netdb.h functions are available
echo " "
set d_gethostprotos gethostent $i_netdb netdb.h
eval $hasproto
d5903 2
a5904 2
: see if getlogin exists
set getlogin d_getlogin
d5907 2
a5908 2
: see if getnetbyaddr exists
set getnetbyaddr d_getnbyaddr
d5911 2
a5912 2
: see if getnetbyname exists
set getnetbyname d_getnbyname
d5915 2
a5916 2
: see if getnetent exists
set getnetent d_getnent
d5919 3
a5921 4
: see if prototypes for various getnetxxx netdb.h functions are available
echo " "
set d_getnetprotos getnetent $i_netdb netdb.h
eval $hasproto
d5923 2
a5924 3

: see if getprotobyname exists
set getprotobyname d_getpbyname
d5927 2
a5928 2
: see if getprotobynumber exists
set getprotobynumber d_getpbynumber
d5931 2
a5932 2
: see if getprotoent exists
set getprotoent d_getpent
d5935 2
a5936 6
: see if this is a mntent.h system
set mntent.h i_mntent
eval $inhdr

: see if getmntent exists
set getmntent d_getmntent
d5939 2
a5940 2
: see if hasmntopt exists
set hasmntopt d_hasmntopt
d5943 2
a5944 2
: see if getpgid exists
set getpgid d_getpgid
a5958 41
: see if prototypes for various getprotoxxx netdb.h functions are available
echo " "
set d_getprotoprotos getprotoent $i_netdb netdb.h
eval $hasproto

: see if getservbyname exists
set getservbyname d_getsbyname
eval $inlibc

: see if getservbyport exists
set getservbyport d_getsbyport
eval $inlibc

: see if getservent exists
set getservent d_getsent
eval $inlibc

: see if prototypes for various getservxxx netdb.h functions are available
echo " "
set d_getservprotos getservent $i_netdb netdb.h
eval $hasproto

: see if gettimeofday or ftime exists
set gettimeofday d_gettimeod
eval $inlibc
case "$d_gettimeod" in
"$undef")
	set ftime d_ftime 
	eval $inlibc
	;;
*)
	val="$undef"; set d_ftime; eval $setvar
	;;
esac
case "$d_gettimeod$d_ftime" in
"$undef$undef")
	echo " "
	echo 'No ftime() nor gettimeofday() -- timing may be less accurate.' >&4
	;;
esac

a5962 4
: see if arpa/inet.h has to be included
set arpa/inet.h i_arpainet
eval $inhdr

a5975 1
#$i_arpainet I_ARPA_INET
a5981 3
#ifdef I_ARPA_INET
#include <arpa/inet.h>
#endif
a6051 4
: check whether inet_aton exists
set inet_aton d_inetaton
eval $inlibc

d6057 1
a6057 1
int main() {
d6065 1
a6065 2
set isascii
if eval $compile; then
a6079 32
: see if lchown exists
echo " "
$cat > try.c <<'EOCP'
/* System header to define __stub macros and hopefully few prototypes,
    which can conflict with char lchown(); below.  */
#include <assert.h>
/* Override any gcc2 internal prototype to avoid an error.  */
/* We use char because int might match the return type of a gcc2
   builtin and then its argument prototype would still apply.  */
char lchown();
int main() {
    /*  The GNU C library defines this for functions which it implements
        to always fail with ENOSYS.  Some functions are actually named
	something starting with __ and the normal name is an alias.  */
#if defined (__stub_lchown) || defined (__stub___lchown)
choke me
#else
lchown();
#endif
; return 0; }
EOCP
set try
if eval $compile; then
    $echo "lchown() found." >&4
    val="$define"
else
    $echo "lchown() NOT found." >&4
    val="$undef"
fi
set d_lchown
eval $setvar

a6091 92
: check for long doubles
echo " "
echo $n "Checking to see if your system supports long doubles...$c" >&4
echo 'long double foo() { long double x; x = 7.0; return x; }' > try.c
if $cc $optimize $ccflags -c try.c >/dev/null 2>&1; then
	val="$define"
	echo " Yup, it does." >&4
else
	val="$undef"
	echo " Nope, it doesn't." >&4
fi
$rm try.*
set d_longdbl
eval $setvar

: check for length of long double
case "${d_longdbl}${longdblsize}" in
$define)
	echo " "
	$echo $n "Checking to see how big your long doubles are...$c" >&4
	$cat >try.c <<'EOCP'
#include <stdio.h>
int main()
{
	printf("%d\n", sizeof(long double));
}
EOCP
	set try
	if eval $compile; then
		longdblsize=`./try`
		$echo " $longdblsize bytes." >&4
	else
		dflt='8'
		echo " "
		echo "(I can't seem to compile the test program.  Guessing...)" >&4
		rp="What is the size of a long double (in bytes)?"
		. ./myread
		longdblsize="$ans"
	fi
	if $test "X$doublesize" = "X$longdblsize"; then
		echo "(That isn't any different from an ordinary double.)"
	fi	
	;;
esac
$rm -f try.c try

: check for long long
echo " "
echo $n "Checking to see if your system supports long long...$c" >&4
echo 'long long foo() { long long x; x = 7; return x; }' > try.c
if $cc $optimize $ccflags -c try.c >/dev/null 2>&1; then
	val="$define"
	echo " Yup, it does." >&4
else
	val="$undef"
	echo " Nope, it doesn't." >&4
fi
$rm try.*
set d_longlong
eval $setvar

: check for length of long long
case "${d_longlong}${longlongsize}" in
$define)
	echo " "
	$echo $n "Checking to see how big your long longs are...$c" >&4
	$cat >try.c <<'EOCP'
#include <stdio.h>
int main()
{
	printf("%d\n", sizeof(long long));
}
EOCP
	set try
	if eval $compile_ok; then
		longlongsize=`./try`
		$echo " $longlongsize bytes." >&4
	else
		dflt='8'
		echo " "
		echo "(I can't seem to compile the test program.  Guessing...)"
		rp="What is the size of a long long (in bytes)?"
		. ./myread
		longlongsize="$ans"
	fi
	if $test "X$longsize" = "X$longlongsize"; then
		echo "(That isn't any different from an ordinary long.)"
	fi	
	;;
esac
$rm -f try.c try

a6157 19
case "$osname" in
freebsd)
    case "`ipcs 2>&1`" in
    "SVID messages"*"not configured"*)
	echo "Your $osname does not have the msg*(2) configured." >&4
        h_msg=false
	val="$undef"
	set msgctl d_msgctl
	eval $setvar
	set msgget d_msgget
	eval $setvar
	set msgsnd d_msgsnd
	eval $setvar
	set msgrcv d_msgrcv
	eval $setvar
	;;
    esac
    ;;
esac
d6169 85
a6269 84

: see whether the various POSIXish _yields exist
$cat >try.c <<EOP
#include <pthread.h>
int main() {
	YIELD();
	exit(0);
}
EOP
: see if pthread_yield exists within given cccmd,
: if we do not usethreads this may well end up undef.
set try -DYIELD=pthread_yield
if eval $compile; then
    val="$define"
    echo 'pthread_yield() found.' >&4
else
    val="$undef"
    echo 'pthread_yield() NOT found.' >&4
fi
set d_pthread_yield
eval $setvar

: see if sched_yield exists within given cccmd,
: if we do not usethreads this may well end up undef.
set try -DYIELD=sched_yield
if eval $compile; then
    val="$define"
    echo 'sched_yield() found.' >&4
else
    val="$undef"
    echo 'sched_yield() NOT found.' >&4
fi
set d_sched_yield
eval $setvar
$rm -f try try.*

: see if this is a pthread.h system
set pthread.h i_pthread
eval $inhdr

: see if this is a mach/cthreads.h system
set mach/cthreads.h i_machcthreads
eval $inhdr

: test whether pthreads are created in joinable -- aka undetached -- state
if test "X$usethreads" = "X$define" -a "X$i_pthread" = "X$define"; then
	echo $n "Checking whether pthreads are created joinable. $c" >&4 
	$cat >try.c <<EOCP
#include <pthread.h>
#include <stdio.h>
int main() {
    pthread_attr_t attr;
    int detachstate;
    printf("%s\n",
	pthread_attr_init(&attr) == 0 &&
        pthread_attr_getdetachstate(&attr, &detachstate) == 0 &&
        detachstate == PTHREAD_CREATE_DETACHED ?
        "detached" : "joinable");
    exit(0);
}
EOCP
	set try
	if eval $compile; then
		yyy=`./try`
		case "$yyy" in
			detached) echo "Nope, they aren't." >&4 ;;
			*) echo "Yup, they are." >&4 ;;
		esac
	else
		echo " "
		echo "(I can't execute the test program--assuming they are.)" >&4
		yyy=joinable
	fi
	$rm -f try try.*
	case "$yyy" in
		detached) val="$undef" ;;
		*) val="$define" ;;
	esac
	set d_pthreads_created_joinable
	eval $setvar
else
    d_pthreads_created_joinable="$undef"
fi

a6275 12
	: see if setpwent exists
	set setpwent d_setpwent
	eval $inlibc

	: see if getpwent exists
	set getpwent d_getpwent
	eval $inlibc

	: see if endpwent exists
	set endpwent d_endpwent
	eval $inlibc

d6308 1
a6308 17
	set d_pwclass
	eval $setvar

	if $contains 'pw_expire' $$.h >/dev/null 2>&1; then
		val="$define"
	else
		val="$undef"
	fi
	set d_pwexpire
	eval $setvar

	if $contains 'pw_comment' $$.h >/dev/null 2>&1; then
		val="$define"
	else
		val="$undef"
	fi
	set d_pwcomment
d6311 1
a6311 1
	if $contains 'pw_gecos' $$.h >/dev/null 2>&1; then
d6316 1
a6316 1
	set d_pwgecos
d6319 1
a6319 1
	if $contains 'pw_passwd' $$.h >/dev/null 2>&1; then
d6324 1
a6324 1
	set d_pwpasswd
d6329 1
a6329 1
*)	# Assume all is lost as far as the d_*pw* go.
a6330 3
	set d_setpwent; eval $setvar
	set d_getpwent; eval $setvar
	set d_endpwent; eval $setvar
a6336 2
	set d_pwgecos; eval $setvar
	set d_pwpasswd; eval $setvar
a6361 24
: see if memory.h is available.
val=''
set memory.h val
eval $inhdr

: See if it conflicts with string.h
case "$val" in
$define)
	case "$strings" in
	'') ;;
	*)
		$cppstdin $cppflags $cppminus < $strings > mem.h
		if $contains 'memcpy' mem.h >/dev/null 2>&1; then
			echo " "
			echo "We won't be including <memory.h>."
			val="$undef"
		fi
		$rm -f mem.h
		;;
	esac
esac
set i_memory
eval $setvar

d6368 2
a6369 23
	$cat >try.c <<EOCP
#$i_memory I_MEMORY
#$i_stdlib I_STDLIB
#$i_string I_STRING
#$i_unistd I_UNISTD
EOCP
	$cat >>try.c <<'EOCP'
#include <stdio.h>
#ifdef I_MEMORY
#  include <memory.h>
#endif
#ifdef I_STDLIB
#  include <stdlib.h>
#endif
#ifdef I_STRING
#  include <string.h>
#else
#  include <strings.h>
#endif
#ifdef I_UNISTD
#  include <unistd.h>  /* Needed for NetBSD */
#endif
int main()
d6394 2
a6395 3
	set try
	if eval $compile_ok; then
		if ./try 2>/dev/null; then
a6399 3
			case "$d_memmove" in
			"$define") echo "But that's Ok since you have memmove()." ;;
			esac
a6402 3
		case "$d_memmove" in
		"$define") echo "But that's Ok since you have memmove()." ;;
		esac
d6406 1
a6406 1
$rm -f try.* try core
d6416 2
a6417 23
	$cat >try.c <<EOCP
#$i_memory I_MEMORY
#$i_stdlib I_STDLIB
#$i_string I_STRING
#$i_unistd I_UNISTD
EOCP
	$cat >>try.c <<'EOCP'
#include <stdio.h>
#ifdef I_MEMORY
#  include <memory.h>
#endif
#ifdef I_STDLIB
#  include <stdlib.h>
#endif
#ifdef I_STRING
#  include <string.h>
#else
#  include <strings.h>
#endif
#ifdef I_UNISTD
#  include <unistd.h>  /* Needed for NetBSD */
#endif
int main()
a6424 2
/* Copy "abcde..." string to char abc[] so that gcc doesn't
   try to store the string in read-only memory. */
d6442 2
a6443 3
	set try
	if eval $compile_ok; then
		if ./try 2>/dev/null; then
a6447 3
			case "$d_memmove" in
			"$define") echo "But that's Ok since you have memmove()." ;;
			esac
a6450 3
		case "$d_memmove" in
		"$define") echo "But that's Ok since you have memmove()." ;;
		esac
d6454 1
a6454 1
$rm -f try.* try core
a6457 54
: can memcmp be trusted to compare relative magnitude?
val="$undef"
case "$d_memcmp" in
"$define")
	echo " "
	echo "Checking if your memcmp() can compare relative magnitude..." >&4
	$cat >try.c <<EOCP
#$i_memory I_MEMORY
#$i_stdlib I_STDLIB
#$i_string I_STRING
#$i_unistd I_UNISTD
EOCP
	$cat >>try.c <<'EOCP'
#include <stdio.h>
#ifdef I_MEMORY
#  include <memory.h>
#endif
#ifdef I_STDLIB
#  include <stdlib.h>
#endif
#ifdef I_STRING
#  include <string.h>
#else
#  include <strings.h>
#endif
#ifdef I_UNISTD
#  include <unistd.h>  /* Needed for NetBSD */
#endif
int main()
{
char a = -1;
char b = 0;
if ((a < b) && memcmp(&a, &b, 1) < 0)
	exit(1);
exit(0);
}
EOCP
	set try
	if eval $compile_ok; then
		if ./try 2>/dev/null; then
			echo "Yes, it can."
			val="$define"
		else
			echo "No, it can't (it uses signed chars)."
		fi
	else
		echo "(I can't compile the test program, so we'll assume not...)"
	fi
	;;
esac
$rm -f try.* try core
set d_sanemcmp
eval $setvar

a6479 17
case "$osname" in
freebsd)
    case "`ipcs 2>&1`" in
    "SVID messages"*"not configured"*)
	echo "Your $osname does not have the sem*(2) configured." >&4
        h_sem=false
	val="$undef"
	set semctl d_semctl
	eval $setvar
	set semget d_semget
	eval $setvar
	set semop d_semop
	eval $setvar
	;;
    esac
    ;;
esac
a6490 186
: see whether sys/sem.h defines union semun
echo " "
$cat > try.c <<'END'
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/sem.h>
int main () { union semun semun; semun.buf = 0; }
END
set try
if eval $compile; then
    echo "You have union semun in <sys/sem.h>." >&4
    val="$define"
else
    echo "You do not have union semun in <sys/sem.h>." >&4
    val="$undef"
fi
$rm -f try try.c
set d_union_semun
eval $setvar

: see how to do semctl IPC_STAT
case "$d_sem" in
$define)
    : see whether semctl IPC_STAT can use union semun
    echo " "
    $cat > try.h <<END
#ifndef S_IRUSR
#   ifdef S_IREAD
#	define S_IRUSR S_IREAD
#	define S_IWUSR S_IWRITE
#	define S_IXUSR S_IEXEC
#   else
#	define S_IRUSR 0400
#	define S_IWUSR 0200
#	define S_IXUSR 0100
#   endif
#   define S_IRGRP (S_IRUSR>>3)
#   define S_IWGRP (S_IWUSR>>3)
#   define S_IXGRP (S_IXUSR>>3)
#   define S_IROTH (S_IRUSR>>6)
#   define S_IWOTH (S_IWUSR>>6)
#   define S_IXOTH (S_IXUSR>>6)
#endif
#ifndef S_IRWXU
#   define S_IRWXU (S_IRUSR|S_IWUSR|S_IXUSR)
#   define S_IRWXG (S_IRGRP|S_IWGRP|S_IXGRP)
#   define S_IRWXO (S_IROTH|S_IWOTH|S_IXOTH)
#endif
END

    $cat > try.c <<END
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/sem.h>
#include <sys/stat.h>
#include <stdio.h>
#include <errno.h>
#ifndef errno
extern int errno;
#endif
#$d_union_semun HAS_UNION_SEMUN
int main() {
    union semun
#ifndef HAS_UNION_SEMUN
    {
	int val;
	struct semid_ds *buf;
	unsigned short *array;
    }
#endif
    arg;
    int sem, st;

#if defined(IPC_PRIVATE) && defined(S_IRWXU) && defined(S_IRWXG) && defined(S_IRWXO) && defined(IPC_CREAT)
    sem = semget(IPC_PRIVATE, 1, S_IRWXU|S_IRWXG|S_IRWXO|IPC_CREAT);
    if (sem > -1) {
	struct semid_ds argbuf;
	arg.buf = &argbuf;
#	ifdef IPC_STAT
	st = semctl(sem, 0, IPC_STAT, arg);
	if (st == 0)
	    printf("semun\n");
	else
#	endif /* IPC_STAT */
	    printf("semctl IPC_STAT failed: errno = %d\n", errno);
#	ifdef IPC_RMID
	if (semctl(sem, 0, IPC_RMID, arg) != 0)
#   	endif /* IPC_RMID */
	    printf("semctl IPC_RMID failed: errno = %d\n", errno);
    } else
#endif /* IPC_PRIVATE && ... */
	printf("semget failed: errno = %d\n", errno);
  return 0;
}
END
    val="$undef"
    set try
    if eval $compile; then
	xxx=`./try`
        case "$xxx" in
        semun) val="$define" ;;
        esac
    fi
    $rm -f try try.c
    set d_semctl_semun
    eval $setvar
    case "$d_semctl_semun" in
    $define)
        echo "You can use union semun for semctl IPC_STAT." >&4
	also='also '
        ;;
    *)  echo "You cannot use union semun for semctl IPC_STAT." >&4
	also=''
        ;;
    esac

    : see whether semctl IPC_STAT can use struct semid_ds pointer
    $cat > try.c <<'END'
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/sem.h>
#include <sys/stat.h>
#include <stdio.h>
#include <errno.h>
#include "try.h"
#ifndef errno
extern int errno;
#endif
int main() {
    struct semid_ds arg;
    int sem, st;

#if defined(IPC_PRIVATE) && defined(S_IRWXU) && defined(S_IRWXG) &&  defined(S_IRWXO) && defined(IPC_CREAT)
    sem = semget(IPC_PRIVATE, 1, S_IRWXU|S_IRWXG|S_IRWXO|IPC_CREAT);
    if (sem > -1) {
#	ifdef IPC_STAT
	st = semctl(sem, 0, IPC_STAT, &arg);
	if (st == 0)
	    printf("semid_ds\n");
	else
#	endif /* IPC_STAT */
	    printf("semctl IPC_STAT failed: errno = %d\n", errno);
#	ifdef IPC_RMID
	if (semctl(sem, 0, IPC_RMID, &arg) != 0)
#	endif /* IPC_RMID */
	    printf("semctl IPC_RMID failed: errno = %d\n", errno);
    } else
#endif /* IPC_PRIVATE && ... */
	printf("semget failed: errno = %d\n", errno);

    return 0;
}
END
    val="$undef"
    set try
    if eval $compile; then
        xxx=`./try`
        case "$xxx" in
        semid_ds) val="$define" ;;
        esac
    fi
    $rm -f try try.c
    set d_semctl_semid_ds
    eval $setvar
    case "$d_semctl_semid_ds" in
    $define)
        echo "You can ${also}use struct semid_ds* for semctl IPC_STAT." >&4
        ;;
    *)  echo "You cannot use struct semid_ds* for semctl IPC_STAT." >&4
        ;;
    esac
    $rm -f try.h
    ;;
*)  val="$undef"

    # We do not have the full sem*(2) library, so assume we can not
    # use either.

    set d_semctl_semun
    eval $setvar

    set d_semctl_semid_ds
    eval $setvar
    ;;
esac

a6498 4
: see if sethostent exists
set sethostent d_sethent
eval $inlibc

a6506 8
: see if setnetent exists
set setnetent d_setnent
eval $inlibc

: see if setprotoent exists
set setprotoent d_setpent
eval $inlibc

a6538 4
: see if setservent exists
set setservent d_setsent
eval $inlibc

a6542 57
: see if setvbuf exists
set setvbuf d_setvbuf
eval $inlibc

: see if sfio.h is available
set sfio.h i_sfio
eval $inhdr


: see if sfio library is available
case "$i_sfio" in
$define)
	val=''
	set sfreserve val
	eval $inlibc
	;;
*)
	val="$undef"
	;;
esac
: Ok, but do we want to use it.
case "$val" in
$define)
	case "$usesfio" in
	true|$define|[yY]*) dflt='y';;
	*) dflt='n';;
	esac
	echo "$package can use the sfio library, but it is experimental."
	rp="You seem to have sfio available, do you want to try using it?"
	. ./myread
	case "$ans" in
	y|Y) ;;
	*)	echo "Ok, avoiding sfio this time.  I'll use stdio instead."
		val="$undef"
		: Remove sfio from list of libraries to use
		set `echo X $libs | $sed -e 's/-lsfio / /' -e 's/-lsfio$//'`
		shift
		libs="$*"
		echo "libs = $libs" >&4
		;;
	esac
	;;
*)	case "$usesfio" in
	true|$define|[yY]*)
		echo "Sorry, cannot find sfio on this machine" >&4
		echo "Ignoring your setting of usesfio=$usesfio" >&4
		;;
	esac
	;;
esac
set d_sfio
eval $setvar
case "$d_sfio" in
$define) usesfio='true';;
*) usesfio='false';;
esac

a6593 19
case "$osname" in
freebsd)
    case "`ipcs 2>&1`" in
    "SVID shared memory"*"not configured"*)
	echo "But your $osname does not have the shm*(2) configured." >&4
        h_shm=false
	val="$undef"
	set shmctl d_shmctl
	evat $setvar
	set shmget d_shmget
	evat $setvar
	set shmat d_shmat
	evat $setvar
	set shmdt d_shmdt
	evat $setvar
	;;
    esac
    ;;
esac
d6605 1
d6607 10
a6616 15
: see if we have sigaction
if set sigaction val -f d_sigaction; eval $csym; $val; then
	echo 'sigaction() found.' >&4
	$cat > try.c <<'EOP'
#include <stdio.h>
#include <sys/types.h>
#include <signal.h>
int main()
{
    struct sigaction act, oact;
}
EOP
	set try
	if eval $compile_ok; then
		val="$define"
d6618 2
a6619 2
		echo "But you don't seem to have a useable struct sigaction." >&4
		val="$undef"
a6620 3
else
	echo 'sigaction NOT found.' >&4
	val="$undef"
d6622 5
a6626 2
set d_sigaction; eval $setvar
$rm -f try try$_o try.c
d6632 1
a6632 1
	$cat >try.c <<'EOP'
d6636 1
a6636 1
int main()
d6645 2
a6646 3
	set try
	if eval $compile; then
		if ./try >/dev/null 2>&1; then
d6650 1
a6650 1
			$cat >&4 <<EOM
a6651 1
I'll ignore them.
d6656 1
a6656 1
		echo "sigsetjmp not found." >&4
d6663 1
a6663 1
	$undef) echo "sigsetjmp not found." >&4;;
d6669 1
a6669 1
$rm -f try.c try
d6692 14
a6705 23
		echo "You don't have Berkeley networking in libc$_a..." >&4
		for net in net socket
		do
			if test -f /usr/lib/lib$net$_a; then
				( ($nm $nm_opt /usr/lib/lib$net$_a | eval $nm_extract) ||  \
				$ar t /usr/lib/lib$net$_a) 2>/dev/null >> libc.list
				if $contains socket libc.list >/dev/null 2>&1; then
					d_socket="$define"
					case "$net" in
					net)
						echo "...but the Wollongong group seems to have hacked it in." >&4
						socketlib="-lnet"
						sockethdr="-I/usr/netinclude"
						;;
					esac
					echo "Found Berkeley sockets interface in lib$net." >& 4 
					if $contains setsockopt libc.list >/dev/null 2>&1; then
						d_oldsock="$undef"
					else
						echo "...using the old 4.1c interface, rather than 4.2" >&4
						d_oldsock="$define"
					fi
					break
d6707 4
d6712 1
a6712 2
		done
		if test "X$d_socket" != "X$define"; then
d6726 15
a6740 2
set d_statblks stat st_blocks $i_sysstat sys/stat.h
eval $hasfield
d6790 1
a6790 1
int main() {
d6802 1
a6802 2
set try
if eval $compile; then
d6840 1
a6840 1
int main() {
d6851 1
a6851 2
	set try
	if eval $compile; then
d6853 1
a6853 1
			echo "And its _base field acts std."
d6875 1
a6875 1
int main()
d6897 1
a6897 2
if test "X$d_strerror" = X -o "X$d_syserrlst" = X; then
    if set strerror val -f d_strerror; eval $csym; $val; then
d6902 2
a6903 2
	    echo "(You also have sys_errlist[], so we could roll our own strerror.)" 
	    d_syserrlst="$define"
d6905 2
a6906 2
	    echo "(Since you don't have sys_errlist[], sterror() is welcome.)"
	    d_syserrlst="$undef"
d6908 1
a6908 1
    elif xxx=`./findhdr string.h`; test "$xxx" || xxx=`./findhdr strings.h`; \
d6914 2
a6915 2
	echo "(Most probably, strerror() uses sys_errlist[] for descriptions.)"
	    d_syserrlst="$define"
d6917 2
a6918 2
	    echo "(You don't appear to have any sys_errlist[], how can this be?)"
	d_syserrlst="$undef"
d6920 1
a6920 1
    elif set sys_errlist val -a d_syserrlst; eval $csym; $val; then
d6925 1
a6925 1
    else
a6929 1
    fi
a6931 12
: see if strtod exists
set strtod d_strtod
eval $inlibc

: see if strtol exists
set strtol d_strtol
eval $inlibc

: see if strtoul exists
set strtoul d_strtoul
eval $inlibc

a6971 28
	echo "#ifdef $type" >> temp.c;
	echo "printf(\"We have $type\");" >> temp.c;
	echo "#endif" >> temp.c;
	$cppstdin $cppflags $cppminus < temp.c >temp.E 2>/dev/null;
	if $contains $type temp.E >/dev/null 2>&1; then
		eval "$var=\$type";
	else
		eval "$var=\$def";
	fi;
	$rm -f temp.?;;
*) eval "$var=\$varval";;
esac'

: define an is-a-typedef? function that prompts if the type is not available.
typedef_ask='type=$1; var=$2; def=$3; shift; shift; shift; inclist=$@@;
case "$inclist" in
"") inclist="sys/types.h";;
esac;
eval "varval=\$$var";
case "$varval" in
"")
	$rm -f temp.c;
	for inc in $inclist; do
		echo "#include <$inc>" >>temp.c;
	done;
	echo "#ifdef $type" >> temp.c;
	echo "printf(\"We have $type\");" >> temp.c;
	echo "#endif" >> temp.c;
a6972 2
	echo " " ;
	echo "$rp" | $sed -e "s/What is/Looking for/" -e "s/?/./";
a6973 1
		echo "$type found." >&4;
d6976 1
a6976 4
		echo "$type NOT found." >&4;
		dflt="$def";
		. ./myread ;
		eval "$var=\$ans";
a6994 1
	rp="What is the type returned by times() on this system?"
d6996 6
a7001 1
	eval $typedef_ask
d7084 1
a7084 10
	cat <<'EOM'
 
Perl can only use a vfork() that doesn't suffer from strict
restrictions on calling functions or modifying global data in
the child.  For example, glibc-2.1 contains such a vfork()
that is unsuitable.  If your system provides a proper fork()
call, chances are that you do NOT want perl to use vfork().

EOM
	rp="Do you still want to use vfork()?"
a7109 4
: see if sys/types.h has to be included
set sys/types.h i_systypes
eval $inhdr

a7121 1
#$i_systypes I_SYS_TYPES	/**/
a7122 3
#if defined(I_SYS_TYPES)
#include <sys/types.h>
#endif
d7143 1
a7143 2
	set closedir
	if eval $compile_ok; then
d7167 1
a7167 1
int main()
d7226 1
a7226 1
int main()
d7231 1
a7231 2
	set try
	if eval $compile_ok; then
d7235 1
a7235 1
		echo "(I can't seem to compile the test program...)"
d7246 19
d7279 1
a7279 1
int main()
d7298 1
a7298 2
	set try
	if eval $compile && ./try > /dev/null; then
d7339 1
a7339 1
	echo "Oh!  Smells like ANSI's been here." >&4
d7343 1
a7343 1
	echo "Ah, yes!  The good old days!" >&4
a7360 76
$define)
	: Check db version.
	echo " "
	echo "Checking Berkeley DB version ..." >&4
	$cat >try.c <<EOCP
#$d_const HASCONST
#ifndef HASCONST
#define const
#endif
#include <sys/types.h>
#include <stdio.h>
#include <db.h>
int main()
{
#ifdef DB_VERSION_MAJOR	/* DB version >= 2 */
    int Major, Minor, Patch ;
    unsigned long Version ;
    (void)db_version(&Major, &Minor, &Patch) ;
    printf("You have Berkeley DB Version 2 or greater\n");

    printf("db.h is from Berkeley DB Version %d.%d.%d\n",
		DB_VERSION_MAJOR, DB_VERSION_MINOR, DB_VERSION_PATCH);
    printf("libdb is from Berkeley DB Version %d.%d.%d\n",
		Major, Minor, Patch) ;

    /* check that db.h & libdb are compatible */
    if (DB_VERSION_MAJOR != Major || DB_VERSION_MINOR != Minor || DB_VERSION_PATCH != Patch) {
	printf("db.h and libdb are incompatible\n") ;
        exit(3);	
    }

    printf("db.h and libdb are compatible\n") ;

    Version = DB_VERSION_MAJOR * 1000000 + DB_VERSION_MINOR * 1000
		+ DB_VERSION_PATCH ;

    /* needs to be >= 2.3.4 */
    if (Version < 2003004) {
    /* if (DB_VERSION_MAJOR == 2 && DB_VERSION_MINOR == 0 && DB_VERSION_PATCH < 5) { */
	printf("but Perl needs Berkeley DB 2.3.4 or greater\n") ;
        exit(2);	
    }

    exit(0);
#else
#if defined(_DB_H_) && defined(BTREEMAGIC) && defined(HASHMAGIC)
    printf("You have Berkeley DB Version 1\n");
    exit(0);	/* DB version < 2: the coast is clear. */
#else
    exit(1);	/* <db.h> not Berkeley DB? */
#endif
#endif
}
EOCP
	set try
	if eval $compile && ./try; then
		echo 'Looks OK.' >&4
	else
		echo "I can't use Berkeley DB with your <db.h>.  I'll disable Berkeley DB." >&4
		i_db=$undef
		case " $libs " in
		*"-ldb "*)
			: Remove db from list of libraries to use
			echo "Removing unusable -ldb from library list" >&4
			set `echo X $libs | $sed -e 's/-ldb / /' -e 's/-ldb$//'`
			shift
			libs="$*"
			echo "libs = $libs" >&4
			;;
		esac
	fi
	$rm -f try.*
	;;
esac

case "$i_db" in
a7371 2

#ifndef DB_VERSION_MAJOR
d7378 1
a7378 1
int main()
a7381 1
#endif
d7390 2
a7391 5
		: XXX Maybe we should just give up here.
		db_hashtype=u_int32_t
		$cat try.out >&4
		echo "Help:  I can't seem to compile the db test program." >&4
		echo "Something's wrong, but I'll assume you use $db_hashtype." >&4
d7396 1
a7396 1
*)	db_hashtype=u_int32_t
d7399 1
a7411 2

#ifndef DB_VERSION_MAJOR
d7418 1
a7418 1
int main()
a7421 1
#endif
d7430 2
a7431 5
		db_prefixtype='size_t'
		: XXX Maybe we should just give up here.
		$cat try.out >&4
		echo "Help:  I can't seem to compile the db test program." >&4
		echo "Something's wrong, but I'll assume you use $db_prefixtype." >&4
d7436 1
a7436 1
*)	db_prefixtype='size_t'
d7443 9
d7456 1
a7456 1
void sub() {
d7458 1
a7458 1
sub() {
a7475 1
int main() { sub(); }
d7477 1
a7477 1
	if $cc $ccflags -c -DTRY=$defvoidused try.c >.out 2>&1 ; then
d7479 1
a7479 1
	echo "Good.  It appears to support void to the level $package wants.">&4
d7486 1
a7486 1
		if $cc $ccflags -c -DTRY=1 try.c >/dev/null 2>&1; then
d7488 1
a7488 1
			if $cc $ccflags -c -DTRY=3 try.c >/dev/null 2>&1; then
d7490 1
a7490 1
				if $cc $ccflags -c -DTRY=7 try.c >/dev/null 2>&1; then
d7495 1
a7495 1
					if $cc $ccflags -c -DTRY=11 try.c >/dev/null 2>&1; then
d7505 1
a7505 1
				if $cc $ccflags -c -DTRY=13 try.c >/dev/null 2>&1; then
d7509 1
a7509 1
					if $cc $ccflags -c -DTRY=5 try.c >/dev/null 2>&1; then
d7523 1
d7526 1
a7526 7
*)	$cat >&4 <<'EOM'
  Support flag bits are:
    1: basic void declarations.
    2: arrays of pointers to functions returning void.
    4: operations between pointers to and addresses of void functions.
    8: generic void pointers.
EOM
d7535 3
a7537 27
: check for length of double
echo " "
case "$doublesize" in
'')
	$echo $n "Checking to see how big your double precision numbers are...$c" >&4
	$cat >try.c <<'EOCP'
#include <stdio.h>
int main()
{
	printf("%d\n", sizeof(double));
}
EOCP
	set try
	if eval $compile_ok; then
		doublesize=`./try`
		$echo " $doublesize bytes." >&4
	else
		dflt='8'
		echo "(I can't seem to compile the test program.  Guessing...)"
		rp="What is the size of a double precision number (in bytes)?"
		. ./myread
		doublesize="$ans"
	fi
	;;
esac
$rm -f try.c try

d7539 1
a7539 26
echo "Determining whether or not we are on an EBCDIC system..." >&4
$cat >tebcdic.c <<EOM
int main()
{
  if ('M'==0xd4) return 0;
  return 1;
}
EOM
val=$undef
set tebcdic
if eval $compile_ok; then
	if ./tebcdic; then
		echo "You have EBCDIC." >&4
		val="$define"
	else
		echo "Nope, no EBCDIC.  Assuming ASCII or some ISO Latin." >&4
	fi
else
	echo "I'm unable to compile the test program." >&4
	echo "I'll assume ASCII or some ISO Latin." >&4
fi
$rm -f tebcdic.c tebcdic
set ebcdic
eval $setvar

: see what type file positions are declared as in the library
d7541 2
a7542 14
set fpos_t fpostype long stdio.h sys/types.h
eval $typedef_ask

: get csh whereabouts
case "$csh" in
'csh') val="$undef" ;;
*) val="$define" ;;
esac
set d_csh
eval $setvar
: Respect a hint or command line value for full_csh.
case "$full_csh" in
'') full_csh=$csh ;;
esac
a7546 6
: Store the full pathname to the ar program for use in the Makefile.SH
: Respect a hint or command line value for full_ar.
case "$full_ar" in
'') full_ar=$ar ;;
esac

a7547 2
echo " "
echo "Looking for the type for group ids returned by getgid()."
d7561 4
a7564 7
case "$gidtype" in
gid_t) echo "gid_t found." ;;
*)	rp="What is the type for group ids returned by getgid()?"
	. ./myread
	gidtype="$ans"
	;;
esac
d7570 1
a7570 6
: see if setgroups exists
set setgroups d_setgrps
eval $inlibc


: Find type of 2nd arg to 'getgroups()' and 'setgroups()'
d7572 2
a7573 2
case "$d_getgrps$d_setgrps" in
*define*)
d7579 2
a7580 2
What type of pointer is the second argument to getgroups() and setgroups()?
Usually this is the same as group ids, $gidtype, but not always.
d7583 1
a7583 1
	rp='What type pointer is the second argument to getgroups() and setgroups()?'
a7590 1
rp="What is the type used for lseek's offset on this system?"
d7592 1
a7592 2
eval $typedef_ask

d7594 4
a7597 18
echo "Checking if your $make program sets \$(MAKE)..." >&4
case "$make_set_make" in
'')
	$sed 's/^X //' > testmake.mak << 'EOF'
Xall:
X 	@@echo 'maketemp="$(MAKE)"'
EOF
	case "`$make -f testmake.mak 2>/dev/null`" in
	*maketemp=*) make_set_make='#' ;;
	*)	make_set_make="MAKE=$make" ;;
	esac
	$rm -f testmake.mak
	;;
esac
case "$make_set_make" in
'#') echo "Yup, it does.";;
*) echo "Nope, it doesn't.";;
esac
a7599 1
rp="What is the type used for file modes for system calls (e.g. fchmod())?"
d7601 6
a7606 143
eval $typedef_ask

: define a fucntion to check prototypes
$cat > protochk <<EOSH
$startsh
cc="$cc"
optimize="$optimize"
ccflags="$ccflags"
prototype="$prototype"
define="$define"
rm=$rm
EOSH

$cat >> protochk <<'EOSH'

$rm -f try.c
foo="$1"
shift
while test $# -ge 2; do
	case "$1" in
		$define) echo "#include <$2>" >> try.c ;;
		literal) echo "$2" >> try.c ;;
	esac
    shift 2
done
test "$prototype" = "$define"  && echo '#define CAN_PROTOTYPE' >> try.c
cat >> try.c <<'EOCP'
#ifdef CAN_PROTOTYPE
#define	_(args) args
#else
#define	_(args) ()
#endif
EOCP
echo "$foo" >> try.c
echo 'int no_real_function_has_this_name _((void)) { return 0; }' >> try.c
$cc $optimize $ccflags -c try.c > /dev/null 2>&1
status=$?
$rm -f try.[co]
exit $status
EOSH
chmod +x protochk
$eunicefix protochk

: see what type is used for size_t
rp="What is the type used for the length parameter for string functions?"
set size_t sizetype 'unsigned int' stdio.h sys/types.h
eval $typedef_ask

: check for type of arguments to gethostbyaddr. 
if test "X$netdb_host_type" = X -o "X$netdb_hlen_type" = X; then
	case "$d_gethbyaddr" in
	$define)
		$cat <<EOM

Checking to see what type of arguments are accepted by gethostbyaddr().
EOM
		hdrs="$define sys/types.h
			$d_socket sys/socket.h 
			$i_niin netinet/in.h 
			$i_netdb netdb.h
			$i_unistd unistd.h"
		: The first arg can 'char *' or 'void *'
		: The second arg is some of integral type
		for xxx in in_addr_t 'const void *' 'const char *' 'void *' 'char *'; do
			for yyy in size_t long int; do
				case "$netdb_host_type" in
				'')	try="extern struct hostent *gethostbyaddr($xxx, $yyy, int);"
					if ./protochk "$try" $hdrs; then
						echo "Your system accepts $xxx for the first arg."
						echo "...and $yyy for the second arg."
						netdb_host_type="$xxx"
						netdb_hlen_type="$yyy"
					fi
					;;
				esac
			done
		done
		: In case none of those worked, prompt the user.
		case "$netdb_host_type" in
		'')	rp='What is the type for the 1st argument to gethostbyaddr?'
			dflt='char *'
			. ./myread
			netdb_host_type=$ans
			rp='What is the type for the 2nd argument to gethostbyaddr?'
			dflt="$sizetype"
			. ./myread
			netdb_hlen_type=$ans
			;;
		esac
		;;
	*)	: no gethostbyaddr, so pick harmless defaults
		netdb_host_type='char *'
		netdb_hlen_type="$sizetype"
		;;
	esac
	# Remove the "const" if needed. -- but then we'll have a 
	# prototype clash!
	# netdb_host_type=`echo "$netdb_host_type" | sed 's/^const //'`
fi

: check for type of argument to gethostbyname. 
if test "X$netdb_name_type" = X ; then
	case "$d_gethbyname" in
	$define)
		$cat <<EOM

Checking to see what type of argument is accepted by gethostbyname().
EOM
		hdrs="$define sys/types.h
			$d_socket sys/socket.h 
			$i_niin netinet/in.h 
			$i_netdb netdb.h
			$i_unistd unistd.h"
		for xxx in "const char *" "char *"; do
			case "$netdb_name_type" in
			'')	try="extern struct hostent *gethostbyname($xxx);"
				if ./protochk "$try" $hdrs; then
					echo "Your system accepts $xxx."
					netdb_name_type="$xxx"
				fi
				;;
			esac
		done
		: In case none of those worked, prompt the user.
		case "$netdb_name_type" in
		'')	rp='What is the type for the 1st argument to gethostbyname?'
			dflt='char *'
			. ./myread
			netdb_name_type=$ans
			;;
		esac
		;;
	*)	: no gethostbyname, so pick harmless default
		netdb_name_type='char *'
		;;
	esac
fi

: check for type of 1st argument to getnetbyaddr. 
if test "X$netdb_net_type" = X ; then
	case "$d_getnbyaddr" in
	$define)
		$cat <<EOM
a7607 31
Checking to see what type of 1st argument is accepted by getnetbyaddr().
EOM
		hdrs="$define sys/types.h
			$d_socket sys/socket.h 
			$i_niin netinet/in.h 
			$i_netdb netdb.h
			$i_unistd unistd.h"
		for xxx in in_addr_t "unsigned long" long "unsigned int" int; do
			case "$netdb_net_type" in
			'')	try="extern struct netent *getnetbyaddr($xxx, int);"
				if ./protochk "$try" $hdrs; then
					echo "Your system accepts $xxx."
					netdb_net_type="$xxx"
				fi
				;;
			esac
		done
		: In case none of those worked, prompt the user.
		case "$netdb_net_type" in
		'')	rp='What is the type for the 1st argument to getnetbyaddr?'
			dflt='long'
			. ./myread
			netdb_net_type=$ans
			;;
		esac
		;;
	*)	: no getnetbyaddr, so pick harmless default
		netdb_net_type='long'
		;;
	esac
fi
d7633 1
a7633 6
: see what type pids are declared as in the kernel
rp="What is the type of process ids on this system?"
set pid_t pidtype int stdio.h sys/types.h
eval $typedef_ask

: check for length of pointer
d7635 4
a7638 15
case "$ptrsize" in
'')
	$echo $n "Checking to see how big your pointers are...$c" >&4
	if test "$voidflags" -gt 7; then
		echo '#define VOID_PTR char *' > try.c
	else
		echo '#define VOID_PTR void *' > try.c
	fi
	$cat >>try.c <<'EOCP'
#include <stdio.h>
int main()
{
	printf("%d\n", sizeof(VOID_PTR));
	exit(0);
}
d7640 10
a7649 14
	set try
	if eval $compile_ok; then
		ptrsize=`./try`
		$echo " $ptrsize bytes." >&4
	else
		dflt='4'
		echo "(I can't seem to compile the test program.  Guessing...)" >&4
		rp="What is the size of a pointer (in bytes)?"
		. ./myread
		ptrsize="$ans"
	fi
	;;
esac
$rm -f try.c try
d7656 1
a7656 3
	$cat >try.c <<EOCP
#$i_unistd I_UNISTD
#$i_stdlib I_STDLIB
d7658 1
a7658 9
#ifdef I_UNISTD
#  include <unistd.h>
#endif
#ifdef I_STDLIB
#  include <stdlib.h>
#endif
EOCP
	$cat >>try.c <<'EOCP'
int main()
d7673 2
a7674 3
	set try
	if eval $compile_ok; then
		dflt=`./try$_exe`
d7687 1
a7687 1
$rm -f try.* try
d7695 1
a7695 1
int main() { printf("%d\n", bar1()); exit(0); }
d7700 2
a7701 2
$ar rc bar$_a bar2$_o bar1$_o >/dev/null 2>&1
if $cc $ccflags $ldflags -o foobar foo$_o bar$_a $libs > /dev/null 2>&1 &&
d7703 1
a7703 1
	echo "$ar appears to generate random libraries itself."
d7706 2
a7707 2
elif $ar ts bar$_a >/dev/null 2>&1 &&
	$cc $ccflags $ldflags -o foobar foo$_o bar$_a $libs > /dev/null 2>&1 &&
d7709 1
a7709 1
		echo "a table of contents needs to be added with '$ar ts'."
d7711 1
a7711 1
		ranlib="$ar ts"
d7738 3
a7740 4
if test "X$timeincl" = X; then
    echo "Testing to see if we should include <time.h>, <sys/time.h> or both." >&4
    $echo $n "I'm now running the test program...$c"
    $cat >try.c <<'EOCP'
d7754 1
a7754 1
int main()
d7772 7
a7778 7
    flags=''
    for s_timezone in '-DS_TIMEZONE' ''; do
    sysselect=''
    for s_timeval in '-DS_TIMEVAL' ''; do
    for i_systimek in '' '-DSYSTIMEKERNEL'; do
    for i_time in '' '-DI_TIME'; do
    for i_systime in '-DI_SYSTIME' ''; do
d7781 4
a7784 3
		set try $i_time $i_systime $i_systimek $sysselect $s_timeval $s_timezone
		if eval $compile; then
				set X $i_time $i_systime $i_systimek $sysselect $s_timeval
d7792 9
a7800 9
    done
    done
    done
    done
    done
    timeincl=''
    echo " "
    case "$flags" in
    *SYSTIMEKERNEL*) i_systimek="$define"
d7803 4
a7806 4
    *) i_systimek="$undef";;
    esac
    case "$flags" in
    *I_TIME*) i_time="$define"
d7809 4
a7812 4
    *) i_time="$undef";;
    esac
    case "$flags" in
    *I_SYSTIME*) i_systime="$define"
d7814 4
a7817 5
	echo "We'll include <sys/time.h>." >&4;;
    *) i_systime="$undef";;
    esac
    $rm -f try.c try
fi
d7834 1
a7834 1
#endif
d7838 2
a7839 1
int main() {
d7853 1
a7853 2
set fd_set -DTRYBITS
if eval $compile; then
d7870 1
a7870 2
	set fd_set
	if eval $compile; then
d7892 12
a7903 39
: check for type of arguments to select. 
case "$selecttype" in
'') case "$d_select" in
	$define)
		$cat <<EOM
Checking to see what type of arguments are accepted by select().
EOM
		hdrs="$define sys/types.h
			$i_systime sys/time.h 
			$i_sysselct sys/select.h
			$d_socket sys/socket.h"
		: The first arg can be int, unsigned, or size_t
		: The last arg may or may not be 'const'
		val=''
		: void pointer has been seen but using that
		: breaks the selectminbits test
		for xxx in 'fd_set *' 'int *'; do
			for nfd in 'int' 'size_t' 'unsigned' 'unsigned long'; do
				for tmo in 'struct timeval *' 'const struct timeval *'; do
					case "$val" in
					'')	try="extern select _(($nfd, $xxx, $xxx, $xxx, $tmo));"
						if ./protochk "$try" $hdrs; then
							echo "Your system accepts $xxx."
							val="$xxx"
						fi
						;;
					esac
				done
			done
		done
		case "$val" in
		'')	rp='What is the type for the 2nd, 3rd, and 4th arguments to select?'
			case "$d_fd_set" in
				$define) dflt="fd_set *" ;;
				*)		dflt="int *" ;;
			esac
			. ./myread
			val=$ans
			;;
a7904 1
		selecttype="$val"
d7906 1
a7906 2
	*)	: no select, so pick a harmless default
		selecttype='int *'
d7909 5
a7913 2
	;;
esac
d7915 1
a7915 5
: check for the select 'width'
case "$selectminbits" in
'') case "$d_select" in
	$define)
		$cat <<EOM
d7917 1
a7917 1
Checking to see on how many bits at a time your select() operates...
d7919 4
a7922 1
		$cat >try.c <<EOCP
d7924 2
a7925 5
#$i_time I_TIME
#$i_systime I_SYS_TIME
#$i_systimek I_SYS_TIME_KERNEL
#ifdef I_TIME
#   include <time.h>
d7928 2
a7929 9
#   ifdef I_SYS_TIME_KERNEL
#	define KERNEL
#   endif
#   include <sys/time.h>
#   ifdef I_SYS_TIME_KERNEL
#	undef KERNEL
#   endif
#endif
#$i_sysselct I_SYS_SELECT
d7933 10
a7942 29
#include <stdio.h>
$selecttype b;
#define S sizeof(*(b))
#define MINBITS	64
#define NBYTES (S * 8 > MINBITS ? S : MINBITS/8)
#define NBITS  (NBYTES * 8)
int main() {
    char s[NBYTES];
    struct timeval t;
    int i;
    FILE* fp;
    int fd;

    fclose(stdin);
    fp = fopen("try.c", "r");
    if (fp == 0)
      exit(1);
    fd = fileno(fp);
    if (fd < 0)
      exit(2);
    b = ($selecttype)s;
    for (i = 0; i < NBITS; i++)
	FD_SET(i, b);
    t.tv_sec  = 0;
    t.tv_usec = 0;
    select(fd + 1, b, 0, 0, &t);
    for (i = NBITS - 1; i > fd && FD_ISSET(i, b); i--);
    printf("%d\n", i + 1);
    return 0;
d7945 15
a7959 31
		set try
		if eval $compile_ok; then
			selectminbits=`./try`
			case "$selectminbits" in
			'')	cat >&4 <<EOM
Cannot figure out on how many bits at a time your select() operates.
I'll play safe and guess it is 32 bits.
EOM
				selectminbits=32
				bits="32 bits"
				;;
			1)	bits="1 bit" ;;
			*)	bits="$selectminbits bits" ;;
			esac
			echo "Your select() operates on $bits at a time." >&4
		else
			rp='What is the minimum number of bits your select() operates on?'
			case "$byteorder" in
			1234|12345678)	dflt=32 ;;
			*)		dflt=1	;;
			esac
			. ./myread
			val=$ans
			selectminbits="$val"
		fi
		$rm -f try.* try
		;;
	*)	: no select, so pick a harmless default
		selectminbits='32'
		;;
	esac
d7994 1
a7994 1
$cat > signal.c <<'EOCP'
a7996 1
#include <stdio.h>
d7998 5
a8002 6

/* Strange style to avoid deeply-nested #if/#else/#endif */
#ifndef NSIG
#  ifdef _NSIG
#    define NSIG (_NSIG)
#  endif
a8003 5

#ifndef NSIG
#  ifdef SIGMAX
#    define NSIG (SIGMAX+1)
#  endif
d8005 2
a8006 45

#ifndef NSIG
#  ifdef SIG_MAX
#    define NSIG (SIG_MAX+1)
#  endif
#endif

#ifndef NSIG
#  ifdef MAXSIG
#    define NSIG (MAXSIG+1)
#  endif
#endif

#ifndef NSIG
#  ifdef MAX_SIG
#    define NSIG (MAX_SIG+1)
#  endif
#endif

#ifndef NSIG
#  ifdef SIGARRAYSIZE
#    define NSIG (SIGARRAYSIZE+1) /* Not sure of the +1 */
#  endif
#endif

#ifndef NSIG
#  ifdef _sys_nsig
#    define NSIG (_sys_nsig) /* Solaris 2.5 */
#  endif
#endif

/* Default to some arbitrary number that's big enough to get most
   of the common signals.
*/
#ifndef NSIG
#    define NSIG 50
#endif

printf("NSIG %d\n", NSIG);

#ifndef JUST_NSIG

EOCP

echo $xxx | $tr ' ' $trnl | $sort | $uniq | $awk '
a8013 1
	printf "#endif /* JUST_NSIG */\n";
d8050 3
a8052 50
if $test -s signal.lst; then
    echo "Using your existing signal.lst file"
	exit 0
fi
xxx="$xxx"
EOS
$cat >>signal_cmd <<'EOS'

set signal
if eval $compile_ok; then
	./signal$_exe | $sort -n +1 | $uniq | $awk -f signal.awk >signal.lst
else
	echo "(I can't seem be able to compile the whole test program)" >&4
	echo "(I'll try it in little pieces.)" >&4
	set signal -DJUST_NSIG
	if eval $compile_ok; then
		./signal$_exe > signal.nsg
		$cat signal.nsg
	else
		echo "I can't seem to figure out how many signals you have." >&4
		echo "Guessing 50." >&4
		echo 'NSIG 50' > signal.nsg
	fi
	: Now look at all the signal names, one at a time.
	for xx in `echo $xxx | $tr ' ' $trnl | $sort | $uniq`; do
		$cat > signal.c <<EOCP
#include <sys/types.h>
#include <signal.h>
#include <stdio.h>
int main() {
printf("$xx %d\n", SIG${xx});
return 0;
}
EOCP
		set signal
		if eval $compile; then
			echo "SIG${xx} found."
			./signal$_exe  >> signal.ls1
		else
			echo "SIG${xx} NOT found."
		fi
	done
	if $test -s signal.ls1; then
		$cat signal.nsg signal.ls1 |
			$sort -n +1 | $uniq | $awk -f signal.awk >signal.lst
	fi

fi
if $test -s signal.lst; then
	:
d8054 1
a8054 1
	echo "(AAK! I can't compile the test programs -- Guessing)" >&4
d8056 1
a8056 1
	set X `csh -f <signal`
d8059 1
a8059 1
	case $# in
d8062 1
a8062 1
	echo $@@ | $tr ' ' $trnl | \
d8065 1
a8065 1
$rm -f signal.c signal$_exe signal$_o signal.nsg signal.ls1
d8072 5
a8076 5
case "$sig_name_init" in
'') doinit=yes ;;
*)  case "$sig_num_init" in
    ''|*,*) doinit=yes ;;
    esac ;;
d8078 2
a8079 2
case "$doinit" in
yes)
d8081 1
a8081 1
	. ./signal_cmd
a8083 3
	sig_name_init=`$awk 'BEGIN { printf "\"ZERO\", " }
						{ printf "\"%s\", ", $1 }
						END { printf "0\n" }' signal.lst`
a8085 3
	sig_num_init=`$awk 'BEGIN { printf "0, " }
					{ printf "%d, ", $2}
					END { printf "0\n"}' signal.lst`
d8106 9
d8124 1
a8124 1
int main()
a8131 1
	exit(0);
d8135 1
a8135 2
set ssize
if eval $compile_ok && ./ssize > /dev/null; then
d8139 2
a8140 4
	$cat >&4 <<EOM
Help! I can't compile and run the ssize_t test program: please enlighten me!
(This is probably a misconfiguration in your system or libraries, and
you really ought to fix it.  Still, I'll try anyway.)
d8143 1
a8143 1
be signed.  Common values are ssize_t, int and long.
d8150 1
a8150 1
$rm -f ssize ssize.*
d8164 1
a8164 2
if test "X$d_time" = X -o X"$timetype" = X; then
    if set time val -f d_time; eval $csym; $val; then
a8166 1
	rp="What is the type returned by time() on this system?"
d8168 7
a8174 2
	eval $typedef_ask
    else
a8177 3
    fi
    set d_time
    eval $setvar
d8179 2
a8182 2
echo " "
echo "Looking for the type for user ids returned by getuid()."
d8196 4
a8199 7
case "$uidtype" in
uid_t)	echo "uid_t found." ;;
*)	rp="What is the type for user ids returned by getuid()?"
	. ./myread
	uidtype="$ans"
	;;
esac
a8287 36
case "$i_grp" in
$define)
	: see if setgrent exists
	set setgrent d_setgrent
	eval $inlibc

	: see if getgrent exists
	set getgrent d_getgrent
	eval $inlibc

	: see if endgrent exists
	set endgrent d_endgrent
	eval $inlibc

	xxx=`./findhdr grp.h`
	$cppstdin $cppflags $cppminus < $xxx >$$.h

	if $contains 'gr_passwd' $$.h >/dev/null 2>&1; then
		val="$define"
	else
		val="$undef"
	fi
	set d_grpasswd
	eval $setvar

	$rm -f $$.h
	;;
*)	# Assume all is lost as far as the d_*gr* go.
	val="$undef"; 
	set d_setgrent; eval $setvar
	set d_getgrent; eval $setvar
	set d_endgrent; eval $setvar
	set d_grpasswd; eval $setvar
	;;
esac

d8296 24
d8372 1
a8372 1
echo $al | $tr ' ' $trnl >Cppsym.know
d8399 1
a8399 1
echo \$* | $tr ' ' '$trnl' | $sed -e 's/\(.*\)/\\
a8420 4
postprocess_cc_v=''
case "$osname" in
aix) postprocess_cc_v="|$tr , ' '" ;;
esac
d8426 1
a8426 1
for i in \`$cc -v -c tmp.c 2>&1 $postprocess_cc_v\`
a8434 1
unset postprocess_cc_v
d8437 1
a8437 7
./ccsym > ccsym1.raw
if $test -s ccsym1.raw; then
       $sort ccsym1.raw | $uniq >ccsym.raw
else
       mv ccsym1.raw ccsym.raw
fi

d8445 1
a8450 4
    	ccsymbols=''
	cppsymbols=`$cat Cppsym.true`
        cppsymbols=`echo $cppsymbols`
	cppccsymbols="$cppsymbols"
a8457 2
		cppccsymbols=`$cat ccsym.com`
		cppccsymbols=`echo $cppccsymbols`
d8461 1
a8461 1
		echo "Your C pre-processor ${also}defines the following symbols:"
a8464 2
		cppsymbols=`$cat ccsym.cpp`
		cppsymbols=`echo $cppsymbols`
d8468 1
a8468 1
		echo "Your C compiler ${also}defines the following cpp symbols:"
a8471 2
	        ccsymbols=`$cat ccsym.own`
	        ccsymbols=`echo $ccsymbols`
d8585 1
a8585 1
$rm -f varargs$_o
d8654 10
a8663 2
: see if sys/resource.h has to be included
set sys/resource.h i_sysresrc
d8670 2
a8671 2
: see if this is a syswait system
set sys/wait.h i_syswait
a8677 4
: see if this is a values.h system
set values.h i_values
eval $inhdr

d8711 1
a8711 2
tdir=`pwd`
cd $rsrc/ext
a8714 1
nonxs_extensions=''
d8720 6
a8725 11
	case "$xxx" in
	DynaLoader|dynaload) ;;
	*)	if $test -f $xxx/$xxx.xs; then
			known_extensions="$known_extensions $xxx"
		elif $test -f $xxx/Makefile.PL; then
			nonxs_extensions="$nonxs_extensions $xxx"
		else
			if $test -d $xxx; then
				# Look for nested extensions, eg. Devel/Dprof.
				cd $xxx
				for yyy in * ; do
a8727 2
				elif $test -f $yyy/Makefile.PL; then
					nonxs_extensions="$nonxs_extensions $xxx/$yyy"
d8729 4
a8732 6
				done
				cd ..
			fi
		fi 
		;;
	esac
a8733 3
set X $nonxs_extensions
shift
nonxs_extensions="$*"
d8737 1
a8737 1
cd $tdir
d8742 32
a8773 50
	case "$xxx" in
	DB_File|db_file)
		case "$i_db" in
		$define) avail_ext="$avail_ext $xxx" ;;
		esac
		;;
	GDBM_File|gdbm_fil)
		case "$i_gdbm" in 
		$define) avail_ext="$avail_ext $xxx" ;;
		esac
		;;
	NDBM_File|ndbm_fil)
		case "$i_ndbm" in
		$define) avail_ext="$avail_ext $xxx" ;;
		esac
		;;
	ODBM_File|odbm_fil) 
		case "${i_dbm}${i_rpcsvcdbm}" in
		*"${define}"*) avail_ext="$avail_ext $xxx" ;;
		esac
		;;
	POSIX|posix)
		case "$useposix" in
		true|define|y) avail_ext="$avail_ext $xxx" ;;
		esac
		;;
	Opcode|opcode)
		case "$useopcode" in
		true|define|y) avail_ext="$avail_ext $xxx" ;;
		esac
		;;
	Socket|socket)
		case "$d_socket" in 
		true|$define|y) avail_ext="$avail_ext $xxx" ;;
		esac
		;;
	Thread|thread)
		case "$usethreads" in 
		true|$define|y) avail_ext="$avail_ext $xxx" ;;
		esac
		;;
	IPC/SysV|ipc/sysv)
		: XXX Do we need a useipcsysv variable here
		case "${d_msg}${d_sem}${d_shm}" in 
		*"${define}"*) avail_ext="$avail_ext $xxx" ;;
		esac
		;;
	*)	avail_ext="$avail_ext $xxx"
		;;
	esac
a8779 14
: Now see which nonxs extensions are supported on this system.
: For now assume all are.
nonxs_ext=''
for xxx in $nonxs_extensions ; do
	case "$xxx" in
	*)	nonxs_ext="$nonxs_ext $xxx"
		;;
	esac
done

set X $nonxs_ext
shift
nonxs_ext="$*"

a8786 1
Note that DynaLoader is always built and need not be mentioned here.
d8791 1
a8791 17
	*)	dflt="$dynamic_ext"
		# Perhaps we are reusing an old out-of-date config.sh.
		case "$hint" in
		previous)
			if test X"$dynamic_ext" != X"$avail_ext"; then
				$cat <<EOM
NOTICE:  Your previous config.sh list may be incorrect. 
The extensions now available to you are 
	${avail_ext}
but the default list from your previous config.sh is
	${dynamic_ext} 

EOM
			fi
			;;
		esac
		;;
a8834 1
Note that DynaLoader is always built and need not be mentioned here.
d8839 2
a8840 11
	*)	dflt="$static_ext"
		# Perhaps we are reusing an old out-of-date config.sh.
		case "$hint" in
		previous)
			if test X"$static_ext" != X"$avail_ext"; then
				$cat <<EOM
NOTICE:  Your previous config.sh list may be incorrect. 
The extensions now available to you are 
	${avail_ext}
but the default list from your previous config.sh is
	${static_ext} 
a8841 7
EOM
			fi
			;;
		esac
		;;
	esac
	: Exclude those that are not xs extensions
d8854 1
a8854 1
set X $dynamic_ext $static_ext $nonxs_ext
d8901 1
a8901 3
		if test X$file != Xln -a X$file != Xar -o X$osname != Xos2; then
			eval $file="\$file"
		fi
a8917 2
# Package name      : $package
# Source directory  : $src
d8919 2
a8920 2
# Configured by     : $cf_by
# Target system     : $myuname
a8932 3
_a='$_a'
_exe='$_exe'
_o='$_o'
a8934 1
ansi2knr='$ansi2knr'
a8935 1
apiversion='$apiversion'
a8955 1
ccsymbols='$ccsymbols'
a8974 2
cppsymbols='$cppsymbols'
cppccsymbols='$cppccsymbols'
d8985 1
a8985 2
d_bsdgetpgrp='$d_bsdgetpgrp'
d_bsdsetpgrp='$d_bsdsetpgrp'
a9005 6
d_endgrent='$d_endgrent'
d_endhent='$d_endhent'
d_endnent='$d_endnent'
d_endpent='$d_endpent'
d_endpwent='$d_endpwent'
d_endsent='$d_endsent'
a9019 7
d_fstatfs='$d_fstatfs'
d_statfsflags='$d_statfsflags'
d_fstatvfs='$d_fstatvfs'
d_getmntent='$d_getmntent'
d_hasmntopt='$d_hasmntopt'
d_ftime='$d_ftime'
d_getgrent='$d_getgrent'
a9020 2
d_gethbyaddr='$d_gethbyaddr'
d_gethbyname='$d_gethbyname'
a9022 1
d_gethostprotos='$d_gethostprotos'
a9023 8
d_getnbyaddr='$d_getnbyaddr'
d_getnbyname='$d_getnbyname'
d_getnent='$d_getnent'
d_getnetprotos='$d_getnetprotos'
d_getpbyname='$d_getpbyname'
d_getpbynumber='$d_getpbynumber'
d_getpent='$d_getpent'
d_getpgid='$d_getpgid'
a9027 9
d_getprotoprotos='$d_getprotoprotos'
d_getpwent='$d_getpwent'
d_getsbyname='$d_getsbyname'
d_getsbyport='$d_getsbyport'
d_getsent='$d_getsent'
d_getservprotos='$d_getservprotos'
d_gettimeod='$d_gettimeod'
d_gnulibc='$d_gnulibc'
d_grpasswd='$d_grpasswd'
a9029 1
d_inetaton='$d_inetaton'
a9031 1
d_lchown='$d_lchown'
a9034 2
d_longdbl='$d_longdbl'
d_longlong='$d_longlong'
d9053 1
a9053 1
d_oldpthreads='$d_oldpthreads'
a9061 2
d_pthread_yield='$d_pthread_yield'
d_pthreads_created_joinable='$d_pthreads_created_joinable'
a9066 1
d_pwgecos='$d_pwgecos'
a9067 1
d_pwpasswd='$d_pwpasswd'
a9074 2
d_sanemcmp='$d_sanemcmp'
d_sched_yield='$d_sched_yield'
a9078 2
d_semctl_semid_ds='$d_semctl_semid_ds'
d_semctl_semun='$d_semctl_semun'
a9082 3
d_setgrent='$d_setgrent'
d_setgrps='$d_setgrps'
d_sethent='$d_sethent'
a9084 2
d_setnent='$d_setnent'
d_setpent='$d_setpent'
a9088 1
d_setpwent='$d_setpwent'
a9094 1
d_setsent='$d_setsent'
a9095 2
d_setvbuf='$d_setvbuf'
d_sfio='$d_sfio'
d9102 1
d9104 1
d9106 2
a9119 3
d_strtod='$d_strtod'
d_strtol='$d_strtol'
d_strtoul='$d_strtoul'
a9136 1
d_union_semun='$d_union_semun'
a9154 1
doublesize='$doublesize'
a9156 1
ebcdic='$ebcdic'
a9168 1
full_ar='$full_ar'
d9171 1
a9177 1
gzip='$gzip'
a9182 1
i_arpainet='$i_arpainet'
a9195 1
i_machcthreads='$i_machcthreads'
a9197 1
i_mntent='$i_mntent'
a9198 1
i_netdb='$i_netdb'
a9201 1
i_pthread='$i_pthread'
a9202 1
i_sfio='$i_sfio'
a9212 1
i_sysmount='$i_sysmount'
a9214 1
i_sysresrc='$i_sysresrc'
a9217 1
i_sysstatvfs='$i_sysstatvfs'
a9222 1
i_syswait='$i_syswait'
a9227 1
i_values='$i_values'
a9230 1
ignore_versioned_solibs='$ignore_versioned_solibs'
a9240 1
installusrbinperl='$installusrbinperl'
a9250 1
libperl='$libperl'
a9260 3
longdblsize='$longdblsize'
longlongsize='$longlongsize'
longsize='$longsize'
a9267 1
make_set_make='$make_set_make'
a9289 5
netdb_hlen_type='$netdb_hlen_type'
netdb_host_type='$netdb_host_type'
netdb_name_type='$netdb_name_type'
netdb_net_type='$netdb_net_type'
nm='$nm'
a9291 1
nonxs_ext='$nonxs_ext'
d9295 2
a9310 1
pidtype='$pidtype'
a9318 1
ptrsize='$ptrsize'
a9327 1
selectminbits='$selectminbits'
d9334 1
a9334 2
shortsize='$shortsize'
shrpenv='$shrpenv'
a9336 1
sig_name_init='$sig_name_init'
a9337 1
sig_num_init='$sig_num_init'
a9353 1
src='$src'
a9361 1
stdio_filbuf='$stdio_filbuf'
a9369 1
tee='$tee'
a9374 1
trnl='$trnl'
a9381 2
useopcode='$useopcode'
useperlio='$useperlio'
d9383 1
a9383 3
usesfio='$usesfio'
useshrplib='$useshrplib'
usethreads='$usethreads'
a9386 1
version='$version'
a9390 1
zip='$zip'
a9392 3
: Add in command line options if available
$test -f UU/cmdline.opt && $cat UU/cmdline.opt >> config.sh

d9394 2
a9395 2
$test -f $src/patchlevel.h && \
awk '/^#define/ {printf "%s=%s\n",$2,$3}' $src/patchlevel.h >>config.sh
a9488 16
if $test -f Policy.sh; then
    $cat <<EOM

If you compile $package on a different machine or from a different object
directory, copy the Policy.sh file from this object directory to the
new one before you run Configure -- this will help you with most of
the policy defaults.

EOM
fi
if $test -f config.msg; then
    echo "Hmm.  I also noted the following information while running:"
    echo " "
    $cat config.msg >&4
    $rm -f config.msg
fi
@


1.1.1.3
log
@virgin perl 5.6.0
@
text
@d23 2
a24 2
# Generated on Wed Mar 22 19:13:31 EET 2000 [metaconfig 3.0 PL70]
# (with additional metaconfig patches by perlbug@@perl.com)
a110 7
if test -f /osf_boot -a -f /usr/sbin/setld; then
	if test X`/usr/bin/uname -s` = XOSF1; then
	        avoidksh="to avoid Digital UNIX' ksh"
	        newsh=/bin/sh
	        unset BIN_SH # if this is 'xpg4' sh will start up ksh
	fi
fi
a155 3
ccsymbols=''
cppccsymbols=''
cppsymbols=''
d169 1
a236 1
full_ar=''
a270 2
d_atolf=''
d_atoll=''
a274 2
bincompat5005=''
d_bincompat5005=''
a286 1
charsize=''
a292 1
crosscompile=''
a293 1
d_accessx=''
a319 1
d_drand48proto=''
a320 2
d_eaccess=''
d_endgrent=''
a323 1
d_endpwent=''
a324 1
d_endspent=''
a334 3
d_fpos64_t=''
d_fs_data_s=''
d_fseeko=''
d336 1
d338 6
a343 1
d_ftello=''
a346 3
d_getcwd=''
d_getfsstat=''
d_getgrent=''
a356 2
d_getmnt=''
d_getmntent=''
a370 1
d_getpwent=''
a372 2
d_getspent=''
d_getspnam=''
a375 1
d_hasmntopt=''
a376 1
d_iconv=''
a377 1
d_int64_t=''
a380 1
d_ldbl_dig=''
a387 1
d_lseekproto=''
a388 1
d_madvise=''
a391 1
d_memchr=''
a396 1
d_mkdtemp=''
a397 2
d_mkstemp=''
d_mkstemps=''
a398 3
d_mmap=''
mmaptype=''
d_mprotect=''
a403 2
d_msync=''
d_munmap=''
a404 1
d_off64_t=''
a411 2
d_old_pthread_create_joinable=''
old_pthread_create_joinable=''
d414 3
a416 2
sched_yield=''
d_qgcvt=''
a433 1
d_setgrent=''
a444 1
d_setpwent=''
a452 1
d_setspent=''
a464 5
d_msg_ctrunc=''
d_msg_dontroute=''
d_msg_oob=''
d_msg_peek=''
d_msg_proxy=''
a465 1
d_scm_rights=''
a469 2
d_socklen_t=''
d_sqrtl=''
a470 4
d_statfs_f_flags=''
d_statfs_s=''
d_fstatvfs=''
d_statvfs=''
a489 2
d_strtold=''
d_strtoll=''
a490 2
d_strtoull=''
d_strtouq=''
a497 1
d_telldirproto=''
a507 1
d_ustat=''
d526 1
a527 4
ebcdic=''
fflushNULL=''
fflushall=''
fpossize=''
a528 3
gidformat=''
gidsign=''
gidsize=''
a532 1
i_arpainet=''
d535 1
d548 3
a551 3
i_iconv=''
i_ieeefp=''
i_inttypes=''
a553 1
i_machcthr=''
a556 1
i_mntent=''
a559 1
i_netinettcp=''
a561 2
i_poll=''
i_pthread=''
d570 3
a574 2
i_shadow=''
i_socks=''
a578 2
i_sunmath=''
i_sysaccess=''
a585 4
i_syslog=''
i_sysmman=''
i_sysmode=''
i_sysmount=''
a588 1
i_syssecrt=''
a590 2
i_sysstatfs=''
i_sysstatvfs=''
a592 1
i_sysuio=''
a593 2
i_sysutsname=''
i_sysvfs=''
a602 1
i_ustat=''
a608 6
inc_version_list=''
inc_version_list_init=''
installprefix=''
installprefixexp=''
installstyle=''
installusrbinperl=''
a612 1
ldlibpthname=''
a622 4
libsdirs=''
libsfiles=''
libsfound=''
libspath=''
a623 13
d_PRIEldbl=''
d_PRIFldbl=''
d_PRIGldbl=''
d_PRIeldbl=''
d_PRIfldbl=''
d_PRIgldbl=''
sPRIEldbl=''
sPRIFldbl=''
sPRIGldbl=''
sPRIeldbl=''
sPRIfldbl=''
sPRIgldbl=''
lseeksize=''
a646 1
multiarch=''
d668 1
a668 4
api_revision=''
api_subversion=''
api_version=''
api_versionstring=''
a669 1
revision=''
a671 1
perl5=''
a673 27
d_nv_preserves_uv=''
i16size=''
i16type=''
i32size=''
i32type=''
i64size=''
i64type=''
i8size=''
i8type=''
ivsize=''
ivtype=''
nvsize=''
nvtype=''
u16size=''
u16type=''
u32size=''
u32type=''
u64size=''
u64type=''
u8size=''
u8type=''
uvsize=''
uvtype=''
ivdformat=''
uvoformat=''
uvuformat=''
uvxformat=''
a681 17
d_PRIX64=''
d_PRId64=''
d_PRIi64=''
d_PRIo64=''
d_PRIu64=''
d_PRIx64=''
sPRIX64=''
sPRId64=''
sPRIi64=''
sPRIo64=''
sPRIu64=''
sPRIx64=''
d_quad=''
quadkind=''
quadtype=''
uquadtype=''
drand01=''
a682 3
randfunc=''
randseedtype=''
seedfunc=''
a688 1
sig_count=''
a695 3
installsitebin=''
sitebin=''
sitebinexp=''
a697 1
sitelib_stem=''
a698 3
siteprefix=''
siteprefixexp=''
sizesize=''
a700 1
socksizetype=''
a708 2
d_stdio_stream_array=''
stdio_stream_array=''
a710 3
uidformat=''
uidsign=''
uidsize=''
a711 7
archname64=''
use64bitall=''
use64bitint=''
uselargefiles=''
uselongdouble=''
usemorebits=''
usemultiplicity=''
a716 1
usesocks=''
a717 2
use5005threads=''
useithreads=''
d720 1
a722 16
d_vendorarch=''
installvendorarch=''
vendorarch=''
vendorarchexp=''
d_vendorbin=''
installvendorbin=''
vendorbin=''
vendorbinexp=''
d_vendorlib=''
installvendorlib=''
vendorlib=''
vendorlib_stem=''
vendorlibexp=''
usevendorprefix=''
vendorprefix=''
vendorprefixexp=''
a724 2
pm_apiversion=''
xs_apiversion=''
d732 6
d747 65
a812 17
: set useposix=false in your hint file to disable the POSIX extension.
useposix=true
: set useopcode=false in your hint file to disable the Opcode extension.
useopcode=true
: Trailing extension.  Override this in a hint file, if needed.
_exe=''
: Extra object files, if any, needed on this platform.
archobjs=''
: Possible local include directories to search.
: Set locincpth to "" in a hint file to defeat local include searches.
locincpth="/usr/local/include /opt/local/include /usr/gnu/include"
locincpth="$locincpth /opt/gnu/include /usr/GNU/include /opt/GNU/include"
:
: no include file wanted by default
inclwanted=''

groupstype=''
d815 1
d821 2
a822 1
glibpth="/usr/lib/large /lib /usr/lib $xlibpth"
a824 2
test -f /usr/shlib/libc.so && glibpth="/usr/shlib $glibpth"
test -f /shlib/libc.so     && glibpth="/shlib $glibpth"
d833 1
a833 1
: some systems want to use only the non-versioned libso:s
d835 13
a847 3
: set usemultiplicity on the Configure command line to enable multiplicity.
: set usesocks on the Configure command line to enable socks.
: set usethreads on the Configure command line to enable threads.
d851 5
d858 3
a860 4
libswanted='sfio socket bind inet nsl nm ndbm gdbm dbm db malloc dl'
libswanted="$libswanted dld ld sun m c cposix posix"
libswanted="$libswanted ndir dir crypt sec"
libswanted="$libswanted ucb bsd BSD PW x iconv"
d903 1
a903 2
Please contact me (Perl Maintainers) at perlbug@@perl.com and 
we'll try to straighten this all out.
d988 1
a988 1
	optstr = "A:dD:eEf:hKOrsSU:V";	# getopt-style specification
d1048 1
a1048 1
rm -f optdef.sh posthint.sh
a1101 50
	-A)
	    shift
	    xxx=''
	    yyy="$1"
	    zzz=''
	    uuu=undef
	    case "$yyy" in
            *=*) zzz=`echo $yyy|sed 's!=.*!!'`
                 case "$zzz" in
                 *:*) zzz='' ;;
                 *)   xxx=append
                      zzz=" "`echo $yyy|sed 's!^[^=]*=!!'` 
                      yyy=`echo $yyy|sed 's!=.*!!'` ;;
                 esac
                 ;;
            esac
            case "$xxx" in
            '')  case "$yyy" in
                 *:*) xxx=`echo $yyy|sed 's!:.*!!'`
                      yyy=`echo $yyy|sed 's!^[^:]*:!!'`
                      zzz=`echo $yyy|sed 's!^[^=]*=!!'`
                      yyy=`echo $yyy|sed 's!=.*!!'` ;;
                 *)   xxx=`echo $yyy|sed 's!:.*!!'`
                      yyy=`echo $yyy|sed 's!^[^:]*:!!'` ;;
                 esac
                 ;;       
            esac
	    case "$xxx" in
	    append)
		echo "$yyy=\"\${$yyy}$zzz\""	>> posthint.sh ;;
	    clear)
		echo "$yyy=''"			>> posthint.sh ;;
	    define)
	        case "$zzz" in
		'') zzz=define ;;
		esac
		echo "$yyy='$zzz'"		>> posthint.sh ;;
	    eval)
		echo "eval \"$yyy=$zzz\""	>> posthint.sh ;;
	    prepend)
		echo "$yyy=\"$zzz\${$yyy}\""	>> posthint.sh ;;
	    undef)
	        case "$zzz" in
		'') zzz="$uuu" ;;
		esac
		echo "$yyy=$zzz"		>> posthint.sh ;;
            *)  echo "$me: unknown -A command '$xxx', ignoring -A $1" >&2 ;;
	    esac
	    shift
	    ;;
d1103 1
a1103 1
	    exit 0;;
d1114 1
a1114 1
                 [-U symbol] [-U symbol=] [-A command:symbol...]
a1130 10
  -A : manipulate symbol after the platform specific hints have been applied:
	 -A symbol=value		append " "value to symbol
	 -A append:symbol=value		append value to symbol
	 -A define:symbol=value		define symbol to have value
         -A clear:symbol		define symbol to be ''
	 -A define:symbol		define symbol to be 'define'
	 -A eval:symbol=value		define symbol to be eval of value
	 -A prepend:symbol=value	prepend value to symbol
	 -A undef:symbol		define symbol to be 'undef'
	 -A undef:symbol=		define symbol to be ''
a1155 2
: create the posthint manipulation script and leave the file out there...
touch posthint.sh
d1190 1
a1190 6
    */*) src=`echo $0 | sed -e 's%/[^/][^/]*$%%'`
         case "$src" in
	 /*)	;;
         *)	src=`cd ../$src && pwd` ;;
	 esac
         ;;
d1235 1
a1235 1
CONFIGDOTSH=true
d1371 1
a1371 1
and contact the author (perlbug@@perl.com).
d1596 1
a1596 1
have, let me (perlbug@@perl.com) know how I blew it.
d1668 1
d1690 1
d1695 1
d1697 2
d1905 1
a1905 2
myuname=`$uname -a 2>/dev/null`
$test -z "$myuname" && myuname=`hostname 2>/dev/null`
a1970 1
	$test -f /unicosmk && osname=unicosmk && osvers=`$uname -r`
a1989 1

a1995 1

d2016 1
a2016 1
				if test "$lns" = "$ln -s"; then
d2024 1
a2024 1
			tmp=''
a2044 6
		bsd386) osname=bsd386
			osvers=`$uname -r`
			;;
		cygwin*) osname=cygwin
			osvers="$3"
			;;
d2058 1
a2058 1
			osvers=`echo "$4"|sed 's/^v//'`
d2089 2
a2090 3
		next*) osname=next ;;
		POSIX-BC | posix-bc ) osname=posix-bc
			osvers="$3"
d2096 1
a2096 3
		qnx) osname=qnx
			osvers="$4"
			;;
d2131 4
a2134 1
		unixware) osname=svr5
a2136 3
		uts) osname=uts
			osvers="$3"
			;;
d2210 1
a2210 1
		file=`echo "${osname}_${osvers}" | $sed -e 's%\.%_%g' -e 's%_$%%'`
d2212 4
a2215 4
		xfile=`echo $file | $sed -e 's%_[^_]*$%%'`
		xxfile=`echo $xfile | $sed -e 's%_[^_]*$%%'`
		xxxfile=`echo $xxfile | $sed -e 's%_[^_]*$%%'`
		xxxxfile=`echo $xxxfile | $sed -e 's%_[^_]*$%%'`
d2266 1
a2266 1
is a good thing.  DO NOT give a wrong version or a wrong OS.
a2379 3

. ./posthint.sh

d2381 1
a2381 1
cf_time=`LC_ALL=C; LANGUAGE=C; export LC_ALL; export LANGUAGE; $date 2>&1`
a2414 4
case "$usethreads" in
$define|true|[yY]*)     dflt='y';;
*) dflt='n';;
esac
d2417 2
a2418 2
Perl can be built to take advantage of threads on some systems.
To do so, Configure can be run with -Dusethreads.
a2424 2

If this doesn't make any sense to you, just accept the default '$dflt'.
d2426 4
d2433 1
a2433 1
y|Y)    val="$define" ;;
d2437 1
a2437 46
eval $setvar

case "$usethreads" in
$define)
	$cat <<EOM

As of 5.5.640, Perl has two different internal threading implementations,
the 5.005 version (5005threads) and an interpreter-based version
(ithreads) that has one interpreter per thread.  Both are very 
experimental.  This arrangement exists to help developers work out
which one is better.

If you're a casual user, you probably don't want interpreter-threads
at this time.  There doesn't yet exist a way to create threads from
within Perl in this model, i.e., "use Thread;" will NOT work.
EOM
	: Default to ithreads unless overridden on command line or with
	: old config.sh
	dflt='y'
	case "$use5005threads" in
		$define|true|[yY]*) dflt='n';;
	esac
	case "$useithreads" in
		$undef|false|[nN]*) dflt='n';;
	esac
	rp='Use interpreter-based ithreads?'
	. ./myread
	case "$ans" in
	y|Y)    val="$define" ;;
	*)      val="$undef" ;;
	esac
	set useithreads
	eval $setvar
	: Now set use5005threads to the opposite value.
	case "$useithreads" in
	$define) val="$undef" ;;
	*) val="$define" ;;
	esac
	set use5005threads
	eval $setvar
	;;
*)
	useithreads="$undef"
	use5005threads="$undef"
	;;
esac
a2453 1
		echo "Your platform has some specific hints for threaded builds, using them..."
a2454 5
	else
		$cat <<EOM
(Your platform doesn't have any specific hints for threaded builds.
 Assuming POSIX threads, then.)
EOM
d2456 8
a2463 4
	;;
esac

cat <<EOM
d2465 1
a2465 2
Perl can be built so that multiple Perl interpreters can coexist
within the same Perl executable.
d2467 5
d2473 20
a2492 19
case "$useithreads" in
$define)
	cat <<EOM
This multiple interpreter support is required for interpreter-based threads.
EOM
	val="$define"
	;;
*)	case "$usemultiplicity" in
	$define|true|[yY]*)	dflt='y';;
	*) dflt='n';;
	esac
	echo " "
	echo "If this doesn't make any sense to you, just accept the default '$dflt'."
	rp='Build Perl for multiplicity?'
	. ./myread
	case "$ans" in
	y|Y)	val="$define" ;;
	*)      val="$undef" ;;
	esac
d2495 21
a2515 4
set usemultiplicity
eval $setvar

: determine where manual pages are on this system
d2517 8
a2524 8
case "$sysman" in
'') 
	syspath='/usr/man/man1 /usr/man/mann /usr/man/manl /usr/man/local/man1'
	syspath="$syspath /usr/man/u_man/man1 /usr/share/man/man1"
	syspath="$syspath /usr/catman/u_man/man1 /usr/man/l_man/man1"
	syspath="$syspath /usr/local/man/u_man/man1 /usr/local/man/l_man/man1"
	syspath="$syspath /usr/man/man.L /local/man/man1 /usr/local/man/man1"
	sysman=`./loc . /usr/man/man1 $syspath`
d2527 2
a2528 2
if $test -d "$sysman"; then
	echo "System manual is in $sysman." >&4
d2530 1
a2530 1
	echo "Could not find manual pages in source form." >&4
d2533 20
a2552 15
: see what memory models we can support
case "$models" in
'')
	$cat >pdp11.c <<'EOP'
int main() {
#ifdef pdp11
	exit(0);
#else
	exit(1);
#endif
}
EOP
	( cc -o pdp11 pdp11.c ) >/dev/null 2>&1
	if $test -f pdp11 && ./pdp11 2>/dev/null; then
		dflt='unsplit split'
d2554 7
a2560 339
		tans=`./loc . X /lib/small /lib/large /usr/lib/small /usr/lib/large /lib/medium /usr/lib/medium /lib/huge`
		case "$tans" in
		X) dflt='none';;
		*) if $test -d /lib/small || $test -d /usr/lib/small; then
				dflt='small'
			else
				dflt=''
			fi
			if $test -d /lib/medium || $test -d /usr/lib/medium; then
				dflt="$dflt medium"
			fi
			if $test -d /lib/large || $test -d /usr/lib/large; then
				dflt="$dflt large"
			fi
			if $test -d /lib/huge || $test -d /usr/lib/huge; then
				dflt="$dflt huge"
			fi
		esac
	fi;;
*) dflt="$models";;
esac
$cat <<EOM
 
Some systems have different model sizes.  On most systems they are called
small, medium, large, and huge.  On the PDP11 they are called unsplit and
split.  If your system doesn't support different memory models, say "none".
If you wish to force everything to one memory model, say "none" here and
put the appropriate flags later when it asks you for other cc and ld flags.
Venix systems may wish to put "none" and let the compiler figure things out.
(In the following question multiple model names should be space separated.)

The default for most systems is "none".

EOM
rp="Which memory models are supported?"
. ./myread
models="$ans"

case "$models" in
none)
	small=''
	medium=''
	large=''
	huge=''
	unsplit=''
	split=''
	;;
*split)
	case "$split" in
	'') if $contains '\-i' $sysman/ld.1 >/dev/null 2>&1 || \
			 $contains '\-i' $sysman/cc.1 >/dev/null 2>&1; then
			dflt='-i'
		else
			dflt='none'
		fi;;
	*) dflt="$split";;
	esac
	rp="What flag indicates separate I and D space?"
	. ./myread
	tans="$ans"
	case "$tans" in
	none) tans='';;
	esac
	split="$tans"
	unsplit='';;
*large*|*small*|*medium*|*huge*)
	case "$models" in
	*large*)
		case "$large" in
		'') dflt='-Ml';;
		*) dflt="$large";;
		esac
	rp="What flag indicates large model?"
	. ./myread
	tans="$ans"
	case "$tans" in
	none) tans='';
	esac
	large="$tans";;
	*) large='';;
	esac
	case "$models" in
	*huge*) case "$huge" in
		'') dflt='-Mh';;
		*) dflt="$huge";;
		esac
		rp="What flag indicates huge model?"
		. ./myread
		tans="$ans"
		case "$tans" in
		none) tans='';
		esac
		huge="$tans";;
	*) huge="$large";;
	esac
	case "$models" in
	*medium*) case "$medium" in
		'') dflt='-Mm';;
		*) dflt="$medium";;
		esac
		rp="What flag indicates medium model?"
		. ./myread
		tans="$ans"
		case "$tans" in
		none) tans='';
		esac
		medium="$tans";;
	*) medium="$large";;
	esac
	case "$models" in
	*small*) case "$small" in
		'') dflt='none';;
		*) dflt="$small";;
		esac
		rp="What flag indicates small model?"
		. ./myread
		tans="$ans"
		case "$tans" in
		none) tans='';
		esac
		small="$tans";;
	*) small='';;
	esac
	;;
*)
	echo "Unrecognized memory models--you may have to edit Makefile.SH" >&4
	;;
esac
$rm -f pdp11.* pdp11

: make some quick guesses about what we are up against
echo " "
$echo $n "Hmm...  $c"
echo exit 1 >bsd
echo exit 1 >usg
echo exit 1 >v7
echo exit 1 >osf1
echo exit 1 >eunice
echo exit 1 >xenix
echo exit 1 >venix
echo exit 1 >os2
d_bsd="$undef"
$cat /usr/include/signal.h /usr/include/sys/signal.h >foo 2>/dev/null
if test -f /osf_boot || $contains 'OSF/1' /usr/include/ctype.h >/dev/null 2>&1
then
	echo "Looks kind of like an OSF/1 system, but we'll see..."
	echo exit 0 >osf1
elif test `echo abc | tr a-z A-Z` = Abc ; then
	xxx=`./loc addbib blurfl $pth`
	if $test -f $xxx; then
	echo "Looks kind of like a USG system with BSD features, but we'll see..."
		echo exit 0 >bsd
		echo exit 0 >usg
	else
		if $contains SIGTSTP foo >/dev/null 2>&1 ; then
			echo "Looks kind of like an extended USG system, but we'll see..."
		else
			echo "Looks kind of like a USG system, but we'll see..."
		fi
		echo exit 0 >usg
	fi
elif $contains SIGTSTP foo >/dev/null 2>&1 ; then
	echo "Looks kind of like a BSD system, but we'll see..."
	d_bsd="$define"
	echo exit 0 >bsd
else
	echo "Looks kind of like a Version 7 system, but we'll see..."
	echo exit 0 >v7
fi
case "$eunicefix" in
*unixtovms*)
	$cat <<'EOI'
There is, however, a strange, musty smell in the air that reminds me of
something...hmm...yes...I've got it...there's a VMS nearby, or I'm a Blit.
EOI
	echo exit 0 >eunice
	d_eunice="$define"
: it so happens the Eunice I know will not run shell scripts in Unix format
	;;
*)
	echo " "
	echo "Congratulations.  You aren't running Eunice."
	d_eunice="$undef"
	;;
esac
: Detect OS2.  The p_ variable is set above in the Head.U unit.
case "$p_" in
:) ;;
*)
	$cat <<'EOI'
I have the feeling something is not exactly right, however...don't tell me...
lemme think...does HAL ring a bell?...no, of course, you're only running OS/2!
EOI
	echo exit 0 >os2
	;;
esac
if test -f /xenix; then
	echo "Actually, this looks more like a XENIX system..."
	echo exit 0 >xenix
	d_xenix="$define"
else
	echo " "
	echo "It's not Xenix..."
	d_xenix="$undef"
fi
chmod +x xenix
$eunicefix xenix
if test -f /venix; then
	echo "Actually, this looks more like a VENIX system..."
	echo exit 0 >venix
else
	echo " "
	if ./xenix; then
		: null
	else
		echo "Nor is it Venix..."
	fi
fi
chmod +x bsd usg v7 osf1 eunice xenix venix os2
$eunicefix bsd usg v7 osf1 eunice xenix venix os2
$rm -f foo

: see if we need a special compiler
echo " "
if ./usg; then
	case "$cc" in
	'') case "$Mcc" in
		/*) dflt='Mcc';;
		*) case "$large" in
			-M*) dflt='cc';;
			*)	if $contains '\-M' $sysman/cc.1 >/dev/null 2>&1 ; then
					if $contains '\-M' $sysman/cpp.1 >/dev/null 2>&1; then
						dflt='cc'
					else
						dflt='cc -M'
					fi
				else
					dflt='cc'
				fi;;
			esac;;
		esac;;
	*)  dflt="$cc";;
	esac
	case "$dflt" in
	*M*)	$cat <<'EOM'
On some older systems the default C compiler will not resolve multiple global
references that happen to have the same name.  On some such systems the "Mcc"
command may be used to force these to be resolved.  On other systems a "cc -M"
command is required.  (Note that the -M flag on other systems indicates a
memory model to use!) If you have the Gnu C compiler, you might wish to use
that instead.

EOM
	;;
	esac
	rp="Use which C compiler?"
	. ./myread
	cc="$ans"
else
	case "$cc" in
	'') dflt=cc;;
	*) dflt="$cc";;
	esac
	rp="Use which C compiler?"
	. ./myread
	cc="$ans"
fi
: Look for a hint-file generated 'call-back-unit'.  Now that the
: user has specified the compiler, we may need to set or change some
: other defaults.
if $test -f cc.cbu; then
    . ./cc.cbu
fi
echo " "
echo "Checking for GNU cc in disguise and/or its version number..." >&4
$cat >gccvers.c <<EOM
#include <stdio.h>
int main() {
#ifdef __GNUC__
#ifdef __VERSION__
	printf("%s\n", __VERSION__);
#else
	printf("%s\n", "1");
#endif
#endif
	exit(0);
}
EOM
if $cc $ldflags -o gccvers gccvers.c; then
	gccversion=`./gccvers`
	case "$gccversion" in
	'') echo "You are not using GNU cc." ;;
	*)  echo "You are using GNU cc $gccversion."
	    ;;
	esac
else
	echo " "
	echo "*** WHOA THERE!!! ***" >&4
	echo "    Your C compiler \"$cc\" doesn't seem to be working!" >&4
	case "$knowitall" in
	'')
	echo "    You'd better start hunting for one and let me know about it." >&4
		exit 1
		;;
	esac
fi
$rm -f gccvers*
case "$gccversion" in
1*) cpp=`./loc gcc-cpp $cpp $pth` ;;
esac

: decide how portable to be.  Allow command line overrides.
case "$d_portable" in
"$undef") ;;
*)	d_portable="$define" ;;
esac

: set up shell script to do ~ expansion
cat >filexp <<EOSS
$startsh
: expand filename
case "\$1" in
 ~/*|~)
	echo \$1 | $sed "s|~|\${HOME-\$LOGDIR}|"
	;;
 ~*)
	if $test -f /bin/csh; then
		/bin/csh -f -c "glob \$1"
		failed=\$?
		echo ""
		exit \$failed
	else
		name=\`$expr x\$1 : '..\([^/]*\)'\`
		dir=\`$sed -n -e "/^\${name}:/{s/^[^:]*:[^:]*:[^:]*:[^:]*:[^:]*:\([^:]*\).*"'\$'"/\1/" -e p -e q -e '}' </etc/passwd\`
		if $test ! -d "\$dir"; then
			me=\`basename \$0\`
			echo "\$me: can't locate home directory for: \$name" >&2
			exit 1
		fi
a2592 3
case "$gfpth" in
'') gfpth='.' ;;
esac
d2719 7
a2725 18
				for fp in $gfpth; do
					if test "X$fp" = X.; then
					    pf="$ansexp"
					else    
					    pf="$fp/$ansexp"
					fi
					if test -f "$pf"; then
						type=''
					elif test -r "$pf" || (test -h "$pf") >/dev/null 2>&1
					then
						echo "($value is not a plain file, but that's ok.)"
						type=''
					fi
					if test X"$type" = X; then
					    value="$pf"
					    break
					fi
				done
d2728 3
a2730 14
				for fp in $gfpth; do
					if test "X$fp" = X.; then
					    dir="$ans"
					    direxp="$ansexp"
					else    
					    dir="$fp/$ansexp"
					    direxp="$fp/$ansexp"
					fi
					if test -d "$direxp"; then
						type=''
						value="$dir"
						break
					fi
				done
a2783 1
test "X$gfpthkeep" != Xy && gfpth=""
d2786 4
a2789 41
: What should the include directory be ?
echo " "
$echo $n "Hmm...  $c"
dflt='/usr/include'
incpath=''
mips_type=''
if $test -f /bin/mips && /bin/mips; then
	echo "Looks like a MIPS system..."
	$cat >usr.c <<'EOCP'
#ifdef SYSTYPE_BSD43
/bsd43
#endif
EOCP
	if $cc -E usr.c > usr.out && $contains / usr.out >/dev/null 2>&1; then
		dflt='/bsd43/usr/include'
		incpath='/bsd43'
		mips_type='BSD 4.3'
	else
		mips_type='System V'
	fi
	$rm -f usr.c usr.out
	echo "and you're compiling with the $mips_type compiler and libraries."
	xxx_prompt=y
	echo "exit 0" >mips
else
	echo "Doesn't look like a MIPS system."
	xxx_prompt=n
	echo "exit 1" >mips
fi
chmod +x mips
$eunicefix mips
case "$usrinc" in
'') ;;
*) dflt="$usrinc";;
esac
case "$xxx_prompt" in
y)	fn=d/
	echo " "
	rp='Where are the include files you want to use?'
	. ./getfile
	usrinc="$ans"
d2791 2
a2792 1
*)	usrinc="$dflt"
d2795 1
d2797 8
a2804 177
: see how we invoke the C preprocessor
echo " "
echo "Now, how can we feed standard input to your C preprocessor..." >&4
cat <<'EOT' >testcpp.c
#define ABC abc
#define XYZ xyz
ABC.XYZ
EOT
cd ..
if test ! -f cppstdin; then
	if test "X$osname" = "Xaix" -a "X$gccversion" = X; then
		# AIX cc -E doesn't show the absolute headerfile
		# locations but we'll cheat by using the -M flag.
		echo 'cat >.$$.c; rm -f .$$.u; '"$cc"' ${1+"$@@"} -M -c .$$.c 2>/dev/null; test -s .$$.u && awk '"'"'$2 ~ /\.h$/ { print "# 0 \""$2"\"" }'"'"' .$$.u; rm -f .$$.o .$$.u; '"$cc"' -E ${1+"$@@"} .$$.c; rm .$$.c' > cppstdin
	else
		echo 'cat >.$$.c; '"$cc"' -E ${1+"$@@"} .$$.c; rm .$$.c' >cppstdin
	fi
else
	echo "Keeping your $hint cppstdin wrapper."
fi
chmod 755 cppstdin
wrapper=`pwd`/cppstdin
ok='false'
cd UU

if $test "X$cppstdin" != "X" && \
	$cppstdin $cppminus <testcpp.c >testcpp.out 2>&1 && \
	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1
then
	echo "You used to use $cppstdin $cppminus so we'll use that again."
	case "$cpprun" in
	'') echo "But let's see if we can live without a wrapper..." ;;
	*)
		if $cpprun $cpplast <testcpp.c >testcpp.out 2>&1 && \
			$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1
		then
			echo "(And we'll use $cpprun $cpplast to preprocess directly.)"
			ok='true'
		else
			echo "(However, $cpprun $cpplast does not work, let's see...)"
		fi
		;;
	esac
else
	case "$cppstdin" in
	'') ;;
	*)
		echo "Good old $cppstdin $cppminus does not seem to be of any help..."
		;;
	esac
fi

if $ok; then
	: nothing
elif echo 'Maybe "'"$cc"' -E" will work...'; \
	$cc -E <testcpp.c >testcpp.out 2>&1; \
	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
	echo "Yup, it does."
	x_cpp="$cc -E"
	x_minus='';
elif echo 'Nope...maybe "'"$cc"' -E -" will work...'; \
	$cc -E - <testcpp.c >testcpp.out 2>&1; \
	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
	echo "Yup, it does."
	x_cpp="$cc -E"
	x_minus='-';
elif echo 'Nope...maybe "'"$cc"' -P" will work...'; \
	$cc -P <testcpp.c >testcpp.out 2>&1; \
	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
	echo "Yipee, that works!"
	x_cpp="$cc -P"
	x_minus='';
elif echo 'Nope...maybe "'"$cc"' -P -" will work...'; \
	$cc -P - <testcpp.c >testcpp.out 2>&1; \
	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
	echo "At long last!"
	x_cpp="$cc -P"
	x_minus='-';
elif echo 'No such luck, maybe "'$cpp'" will work...'; \
	$cpp <testcpp.c >testcpp.out 2>&1; \
	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
	echo "It works!"
	x_cpp="$cpp"
	x_minus='';
elif echo 'Nixed again...maybe "'$cpp' -" will work...'; \
	$cpp - <testcpp.c >testcpp.out 2>&1; \
	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
	echo "Hooray, it works!  I was beginning to wonder."
	x_cpp="$cpp"
	x_minus='-';
elif echo 'Uh-uh.  Time to get fancy.  Trying a wrapper...'; \
	$wrapper <testcpp.c >testcpp.out 2>&1; \
	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
	x_cpp="$wrapper"
	x_minus=''
	echo "Eureka!"
else
	dflt=''
	rp="No dice.  I can't find a C preprocessor.  Name one:"
	. ./myread
	x_cpp="$ans"
	x_minus=''
	$x_cpp <testcpp.c >testcpp.out 2>&1
	if $contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
		echo "OK, that will do." >&4
	else
echo "Sorry, I can't get that to work.  Go find one and rerun Configure." >&4
		exit 1
	fi
fi

case "$ok" in
false)
	cppstdin="$x_cpp"
	cppminus="$x_minus"
	cpprun="$x_cpp"
	cpplast="$x_minus"
	set X $x_cpp
	shift
	case "$1" in
	"$cpp")
		echo "Perhaps can we force $cc -E using a wrapper..."
		if $wrapper <testcpp.c >testcpp.out 2>&1; \
			$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1
		then
			echo "Yup, we can."
			cppstdin="$wrapper"
			cppminus='';
		else
			echo "Nope, we'll have to live without it..."
		fi
		;;
	esac
	case "$cpprun" in
	"$wrapper")
		cpprun=''
		cpplast=''
		;;
	esac
	;;
esac

case "$cppstdin" in
"$wrapper"|'cppstdin') ;;
*) $rm -f $wrapper;;
esac
$rm -f testcpp.c testcpp.out

: Set private lib path
case "$plibpth" in
'') if ./mips; then
		plibpth="$incpath/usr/lib /usr/local/lib /usr/ccs/lib"
	fi;;
esac
case "$libpth" in
' ') dlist='';;
'') dlist="$loclibpth $plibpth $glibpth";;
*) dlist="$libpth";;
esac

: Now check and see which directories actually exist, avoiding duplicates
libpth=''
for xxx in $dlist
do
    if $test -d $xxx; then
		case " $libpth " in
		*" $xxx "*) ;;
		*) libpth="$libpth $xxx";;
		esac
    fi
done
$cat <<'EOM'

Some systems have incompatible or broken versions of libraries.  Among
the directories listed in the question below, please remove any you
know not to be holding relevant libraries, and add any that are needed.
Say "none" for none.
d2807 6
a2812 2
case "$libpth" in
'') dflt='none';;
d2814 4
a2817 3
	set X $libpth
	shift
	dflt=${1+"$@@"}
d2820 46
a2865 5
rp="Directories to use for library searches?"
. ./myread
case "$ans" in
none) libpth=' ';;
*) libpth="$ans";;
d2867 21
d2889 7
a2895 10
: compute shared library extension
case "$so" in
'')
	if xxx=`./loc libc.sl X $libpth`; $test -f "$xxx"; then
		dflt='sl'
	else
		dflt='so'
	fi
	;;
*) dflt="$so";;
d2897 1
d2900 2
a2901 3
On some systems, shared libraries may be available.  Answer 'none' if
you want to suppress searching of shared libraries for the remainder
of this configuration.
d2904 14
a2917 3
rp='What is the file extension used for shared libraries?'
. ./myread
so="$ans"
d2919 4
a2922 8
: Define several unixisms.
: Hints files or command line option can be used to override them.
: The convoluted testing is in case hints files set either the old
: or the new name.
case "$_exe" in
'')	case "$exe_ext" in
    '')	;;
	*)	_exe="$exe_ext" ;;
d2924 24
d2949 2
d2952 6
a2957 25
case "$_a" in
'')	case "$lib_ext" in
    '')	_a='.a';;
	*)	_a="$lib_ext" ;;
	esac
	;;
esac
case "$_o" in
'') case "$obj_ext" in
	'')	_o='.o';;
	*)	_o="$obj_ext";;
	esac
	;;
esac
case "$p_" in
'') case "$path_sep" in
	'')	p_=':';;
	*)	p_="$path_sep";;
	esac
	;;
esac
exe_ext=$_exe
lib_ext=$_a
obj_ext=$_o
path_sep=$p_
d2959 6
a2964 4
: Which makefile gets called first.  This is used by make depend.
case "$firstmakefile" in
'') firstmakefile='makefile';;
esac
d2966 2
a2967 5
case "$usesocks" in
$define|true|[yY]*)	dflt='y';;
*) dflt='n';;
esac
cat <<EOM
d2969 4
a2972 2
Perl can be built to use the SOCKS proxy protocol library.  To do so,
Configure must be run with -Dusesocks.
a2973 1
If this doesn't make any sense to you, just accept the default '$dflt'.
d2975 16
a2990 8
rp='Build Perl for SOCKS?'
. ./myread
case "$ans" in
y|Y)	val="$define" ;;     
*)      val="$undef" ;;
esac
set usesocks
eval $setvar
d2992 1
a2992 1
: Looking for optional libraries
d2994 52
a3045 4
echo "Checking for optional libraries..." >&4
case "$libs" in
' '|'') dflt='';;
*) dflt="$libs";;
d3047 10
a3056 2
case "$libswanted" in
'') libswanted='c_s';;
d3058 20
a3077 68
case "$usesocks" in
"$define") libswanted="$libswanted socks5 socks5_sh" ;;
esac
libsfound=''
libsfiles=''
libsdirs=''
libspath=''
for thisdir in $libpth $xlibpth; do
  test -d $thisdir && libspath="$libspath $thisdir"
done
for thislib in $libswanted; do
	for thisdir in $libspath; do
	    xxx=''
	    if $test ! -f "$xxx" -a "X$ignore_versioned_solibs" = "X"; then
		xxx=`ls $thisdir/lib$thislib.$so.[0-9] 2>/dev/null|tail -1`
	        $test -f "$xxx" && eval $libscheck
		$test -f "$xxx" && libstyle=shared
	    fi
	    if test ! -f "$xxx"; then
		xxx=$thisdir/lib$thislib.$so
	        $test -f "$xxx" && eval $libscheck
		$test -f "$xxx" && libstyle=shared
	    fi	
	    if test ! -f "$xxx"; then
		xxx=$thisdir/lib$thislib$_a
	        $test -f "$xxx" && eval $libscheck
		$test -f "$xxx" && libstyle=static
	    fi
	    if test ! -f "$xxx"; then
		xxx=$thisdir/$thislib$_a
	        $test -f "$xxx" && eval $libscheck
		$test -f "$xxx" && libstyle=static
	    fi
	    if test ! -f "$xxx"; then
		xxx=$thisdir/lib${thislib}_s$_a
	        $test -f "$xxx" && eval $libscheck
		$test -f "$xxx" && libstyle=static
		$test -f "$xxx" && thislib=${thislib}_s
	    fi
	    if test ! -f "$xxx"; then
		xxx=$thisdir/Slib$thislib$_a
	        $test -f "$xxx" && eval $libscheck
		$test -f "$xxx" && libstyle=static
	    fi
	    if $test -f "$xxx"; then
		case "$libstyle" in
		shared) echo "Found -l$thislib (shared)." ;;
		static) echo "Found -l$thislib." ;;
		*)      echo "Found -l$thislib ($libstyle)." ;;
		esac
		case " $dflt " in
		*"-l$thislib "*);;
		*) dflt="$dflt -l$thislib"
                   libsfound="$libsfound $xxx"
                   yyy=`basename $xxx`
                   libsfiles="$libsfiles $yyy"
                   yyy=`echo $xxx|$sed -e "s%/$yyy\\$%%"`
                   case " $libsdirs " in
                   *" $yyy "*) ;;
                   *) libsdirs="$libsdirs $yyy" ;;
                   esac
		   ;;
		esac
		break
	    fi	
	done
	if $test ! -f "$xxx"; then
	    echo "No -l$thislib."
d3079 4
a3082 11
done
set X $dflt
shift
dflt="$*"
case "$libs" in
'') dflt="$dflt";;
*) dflt="$libs";;
esac
case "$dflt" in
' '|'') dflt='none';;
esac
d3084 1
d3087 2
a3088 4
In order to compile $package on your machine, a number of libraries
are usually needed.  Include any other special libraries here as well.
Say "none" for none.  The default list is almost always right.
EOM
d3090 3
a3092 7
echo " "
rp="What libraries to use?"
. ./myread
case "$ans" in
none) libs=' ';;
*) libs="$ans";;
esac
d3094 1
a3094 7
: determine optimization, if desired, or use for debug flag also
case "$optimize" in
' '|$undef) dflt='none';;
'') dflt='-O';;
*) dflt="$optimize";;
esac
$cat <<EOH
d3096 14
a3109 4
By default, $package compiles with the -O flag to use the optimizer.
Alternately, you might want to use the symbolic debugger, which uses
the -g flag (on traditional Unix systems).  Either flag can be
specified here.  To use neither flag, specify the word "none".
d3111 14
a3124 40
EOH
rp="What optimizer/debugger flag should be used?"
. ./myread
optimize="$ans"
case "$optimize" in
'none') optimize=" ";;
esac

dflt=''
: We will not override a previous value, but we might want to
: augment a hint file
case "$hint" in
default|recommended)
	case "$gccversion" in
	1*) dflt='-fpcc-struct-return' ;;
	esac
	case "$optimize" in
	*-g*) dflt="$dflt -DDEBUGGING";;
	esac
	case "$gccversion" in
	2*) if test -d /etc/conf/kconfig.d &&
			$contains _POSIX_VERSION $usrinc/sys/unistd.h >/dev/null 2>&1
		then
			dflt="$dflt -posix"
		fi
		;;
	esac
	case "$gccversion" in
	1*) ;;
	2.[0-8]*) ;;
	?*) 	echo " "
		echo "Checking if your compiler accepts -fno-strict-aliasing" 2>&1
		echo 'int main(void) { return 0; }' > gcctest.c
		if $cc -O2 -fno-strict-aliasing -o gcctest gcctest.c; then
			echo "Yes, it does." 2>&1
			case "$ccflags" in
			*strict-aliasing*) 
				echo "Leaving current flags $ccflags alone." 2>&1
				;;
			*) dflt="$dflt -fno-strict-aliasing" ;;
d3126 24
a3149 20
		else
			echo "Nope, it doesn't, but that's ok." 2>&1
		fi
		;;
	esac
	;;
esac

case "$mips_type" in
*BSD*|'') inclwanted="$locincpth $usrinc";;
*) inclwanted="$locincpth $inclwanted $usrinc/bsd";;
esac
for thisincl in $inclwanted; do
	if $test -d $thisincl; then
		if $test x$thisincl != x$usrinc; then
			case "$dflt" in
			*$thisincl*);;
			*) dflt="$dflt -I$thisincl";;
			esac
		fi
a3150 6
done

inctest='if $contains $2 $usrinc/$1 >/dev/null 2>&1; then
	xxx=true;
elif $contains $2 $usrinc/sys/$1 >/dev/null 2>&1; then
	xxx=true;
d3152 6
a3157 8
	xxx=false;
fi;
if $xxx; then
	case "$dflt" in
	*$2*);;
	*) dflt="$dflt -D$2";;
	esac;
fi'
d3159 1
a3159 1
set signal.h LANGUAGE_C; eval $inctest
d3161 7
a3167 3
case "$usesocks" in
$define)
	ccflags="$ccflags -DSOCKS"
d3169 8
a3176 1
esac
d3178 12
a3189 27
case "$hint" in
default|recommended) dflt="$ccflags $dflt" ;;
*) dflt="$ccflags";;
esac

case "$dflt" in
''|' ') dflt=none;;
esac
$cat <<EOH

Your C compiler may want other flags.  For this question you should include
-I/whatever and -DWHATEVER flags and any other flags used by the C compiler,
but you should NOT include libraries or ld flags like -lwhatever.  If you
want $package to honor its debug switch, you should include -DDEBUGGING here.
Your C compiler might also need additional flags, such as -D_POSIX_SOURCE.

To use no flags, specify the word "none".

EOH
set X $dflt
shift
dflt=${1+"$@@"}
rp="Any additional cc flags?"
. ./myread
case "$ans" in
none) ccflags='';;
*) ccflags="$ans";;
d3191 2
d3194 11
a3204 4
: the following weeds options from ccflags that are of no interest to cpp
cppflags="$ccflags"
case "$gccversion" in
1*) cppflags="$cppflags -D__GNUC__"
d3206 42
a3247 3
case "$mips_type" in
'');;
*BSD*) cppflags="$cppflags -DSYSTYPE_BSD43";;
d3249 11
a3259 10
case "$cppflags" in
'');;
*)
	echo " "
	echo "Let me guess what the preprocessor flags are..." >&4
	set X $cppflags
	shift
	cppflags=''
	$cat >cpp.c <<'EOM'
#define BLURFL foo
a3260 1
BLURFL xx LFRULB
d3262 85
a3346 6
	previous=''
	for flag in $*
	do
		case "$flag" in
		-*) ftry="$flag";;
		*) ftry="$previous $flag";;
d3348 2
a3349 18
		if $cppstdin -DLFRULB=bar $cppflags $ftry $cppminus <cpp.c \
			>cpp1.out 2>/dev/null && \
			$cpprun -DLFRULB=bar $cppflags $ftry $cpplast <cpp.c \
			>cpp2.out 2>/dev/null && \
			$contains 'foo.*xx.*bar' cpp1.out >/dev/null 2>&1 && \
			$contains 'foo.*xx.*bar' cpp2.out >/dev/null 2>&1
		then
			cppflags="$cppflags $ftry"
			previous=''
		else
			previous="$flag"
		fi
	done
	set X $cppflags
	shift
	cppflags=${1+"$@@"}
	case "$cppflags" in
	*-*)  echo "They appear to be: $cppflags";;
d3351 3
a3353 1
	$rm -f cpp.c cpp?.out
d3356 1
d3358 20
a3377 9
: flags used in final linking phase
case "$ldflags" in
'') if ./venix; then
		dflt='-i -z'
	else
		dflt=''
	fi
	case "$ccflags" in
	*-posix*) dflt="$dflt -posix" ;;
d3379 10
a3389 12
*) dflt="$ldflags";;
esac

: Try to guess additional flags to pick up local libraries.
for thislibdir in $libpth; do
	case " $loclibpth " in
	*" $thislibdir "*)
		case "$dflt " in 
		*"-L$thislibdir "*) ;;
		*)  dflt="$dflt -L$thislibdir" ;;
		esac
		;;
d3391 18
a3408 29
done

case "$dflt" in
'') dflt='none' ;;
esac

$cat <<EOH

Your C linker may need flags.  For this question you should
include -L/whatever and any other flags used by the C linker, but you
should NOT include libraries like -lwhatever.

Make sure you include the appropriate -L/path flags if your C linker
does not normally search all of the directories you specified above,
namely
	$libpth
To use no flags, specify the word "none".

EOH

rp="Any additional ld flags (NOT including libraries)?"
. ./myread
case "$ans" in
none) ldflags='';;
*) ldflags="$ans";;
esac
rmlist="$rmlist pdp11"

: coherency check
d3410 2
a3411 2
echo "Checking your choice of C compiler and flags for coherency..." >&4
$cat > try.c <<'EOF'
d3413 10
a3422 7
int main() { printf("Ok\n"); exit(0); }
EOF
set X $cc $optimize $ccflags -o try $ldflags try.c $libs
shift
$cat >try.msg <<'EOM'
I've tried to compile and run the following simple program:

d3424 6
a3429 38
$cat try.c >> try.msg

$cat >> try.msg <<EOM

I used the command:

	$*
	./try

and I got the following output:

EOM
dflt=y
if sh -c "$cc $optimize $ccflags -o try $ldflags try.c $libs" >>try.msg 2>&1; then
	if sh -c './try' >>try.msg 2>&1; then
		xxx=`./try`
		case "$xxx" in
		"Ok") dflt=n ;;
		*)	echo 'The program compiled OK, but produced no output.' >> try.msg
			case " $libs " in
			*" -lsfio "*)
				cat >> try.msg <<'EOQS'
If $libs contains -lsfio, and sfio is mis-configured, then it
sometimes (apparently) runs and exits with a 0 status, but with no
output!  It may have to do with sfio's use of _exit vs. exit.

EOQS
				rp="You have a big problem.  Shall I abort Configure"
				dflt=y
				;;
			esac
			;;
		esac
	else
		echo "The program compiled OK, but exited with status $?." >>try.msg
		rp="You have a problem.  Shall I abort Configure"
		dflt=y
	fi
d3431 3
a3433 7
	echo "I can't compile the test program." >>try.msg
	rp="You have a BIG problem.  Shall I abort Configure"
	dflt=y
fi
case "$dflt" in
y)
	$cat try.msg >&4
d3436 1
a3436 9
		echo "(The supplied flags or libraries might be incorrect.)"
		;;
	*) dflt=n;;
	esac
	echo " "
	. ./myread
	case "$ans" in
	n*|N*) ;;
	*)	echo "Ok.  Stopping Configure." >&4
d3440 4
a3443 2
	;;
n) echo "OK, that should do.";;
a3444 1
$rm -f try try.* core
d3446 1
a3446 68
: define an is-a-typedef? function
typedef='type=$1; var=$2; def=$3; shift; shift; shift; inclist=$@@;
case "$inclist" in
"") inclist="sys/types.h";;
esac;
eval "varval=\$$var";
case "$varval" in
"")
	$rm -f temp.c;
	for inc in $inclist; do
		echo "#include <$inc>" >>temp.c;
	done;
	echo "#ifdef $type" >> temp.c;
	echo "printf(\"We have $type\");" >> temp.c;
	echo "#endif" >> temp.c;
	$cppstdin $cppflags $cppminus < temp.c >temp.E 2>/dev/null;
	if $contains $type temp.E >/dev/null 2>&1; then
		eval "$var=\$type";
	else
		eval "$var=\$def";
	fi;
	$rm -f temp.?;;
*) eval "$var=\$varval";;
esac'

: define an is-a-typedef? function that prompts if the type is not available.
typedef_ask='type=$1; var=$2; def=$3; shift; shift; shift; inclist=$@@;
case "$inclist" in
"") inclist="sys/types.h";;
esac;
eval "varval=\$$var";
case "$varval" in
"")
	$rm -f temp.c;
	for inc in $inclist; do
		echo "#include <$inc>" >>temp.c;
	done;
	echo "#ifdef $type" >> temp.c;
	echo "printf(\"We have $type\");" >> temp.c;
	echo "#endif" >> temp.c;
	$cppstdin $cppflags $cppminus < temp.c >temp.E 2>/dev/null;
	echo " " ;
	echo "$rp" | $sed -e "s/What is/Looking for/" -e "s/?/./";
	if $contains $type temp.E >/dev/null 2>&1; then
		echo "$type found." >&4;
		eval "$var=\$type";
	else
		echo "$type NOT found." >&4;
		dflt="$def";
		. ./myread ;
		eval "$var=\$ans";
	fi;
	$rm -f temp.?;;
*) eval "$var=\$varval";;
esac'

: define a shorthand compile call
compile='
mc_file=$1;
shift;
$cc $optimize $ccflags $ldflags -o ${mc_file} $* ${mc_file}.c $libs > /dev/null 2>&1;'
: define a shorthand compile call for compilations that should be ok.
compile_ok='
mc_file=$1;
shift;
$cc $optimize $ccflags $ldflags -o ${mc_file} $* ${mc_file}.c $libs;'

: check for lengths of integral types
d3448 10
a3457 12
case "$intsize" in
'')
	echo "Checking to see how big your integers are..." >&4
	$cat >intsize.c <<'EOCP'
#include <stdio.h>
int main()
{
	printf("intsize=%d;\n", (int)sizeof(int));
	printf("longsize=%d;\n", (int)sizeof(long));
	printf("shortsize=%d;\n", (int)sizeof(short));
	exit(0);
}
d3459 30
a3488 27
	set intsize
	if eval $compile_ok && ./intsize > /dev/null; then
		eval `./intsize`
		echo "Your integers are $intsize bytes long."
		echo "Your long integers are $longsize bytes long."
		echo "Your short integers are $shortsize bytes long."
	else
		$cat >&4 <<EOM
!
Help! I can't compile and run the intsize test program: please enlighten me!
(This is probably a misconfiguration in your system or libraries, and
you really ought to fix it.  Still, I'll try anyway.)
!
EOM
		dflt=4
		rp="What is the size of an integer (in bytes)?"
		. ./myread
		intsize="$ans"
		dflt=$intsize
		rp="What is the size of a long integer (in bytes)?"
		. ./myread
		longsize="$ans"
		dflt=2
		rp="What is the size of a short integer (in bytes)?"
		. ./myread
		shortsize="$ans"
	fi
a3490 6
$rm -f intsize intsize.*

: see what type lseek is declared as in the kernel
rp="What is the type used for lseek's offset on this system?"
set off_t lseektype long stdio.h sys/types.h
eval $typedef_ask
d3492 1
d3494 9
a3502 14
echo "Checking to see how big your file offsets are..." >&4
$cat >try.c <<EOCP
#include <sys/types.h>
#include <stdio.h>
int main()
{
    printf("%d\n", (int)sizeof($lseektype));
    return(0); 
}
EOCP
set try
if eval $compile_ok; then
	lseeksize=`./try`
	echo "Your file offsets are $lseeksize bytes long."
d3504 1
a3504 6
	dflt=$longsize
	echo " "
	echo "(I can't seem to compile the test program.  Guessing...)"
	rp="What is the size of your file offsets (in bytes)?"
	. ./myread
	lseeksize="$ans"
d3506 4
a3509 1
$rm -f try.c try
d3511 16
a3526 25
: see what type file positions are declared as in the library
rp="What is the type for file position used by fsetpos()?"
set fpos_t fpostype long stdio.h sys/types.h
eval $typedef_ask

echo " "
case "$fpostype" in
*_t) zzz="$fpostype"	;;
*)   zzz="fpos_t"	;;
esac
echo "Checking the size of $zzz..." >&4 
cat > try.c <<EOCP
#include <sys/types.h>
#include <stdio.h>
int main() {
    printf("%d\n", (int)sizeof($fpostype));
    exit(0);
}
EOCP
set try
if eval $compile_ok; then
	yyy=`./try`
	case "$yyy" in
	'')	fpossize=4
		echo "(I can't execute the test program--guessing $fpossize.)" >&4
d3528 6
a3533 2
	*)	fpossize=$yyy
		echo "Your $zzz is $fpossize bytes long."
d3536 46
d3583 2
a3584 4
	dflt="$longsize"
	echo " " >&4
	echo "(I can't compile the test program.  Guessing...)" >&4
	rp="What is the size of your file positions (in bytes)?"
d3586 9
a3594 1
	fpossize="$ans"
d3597 30
d3628 5
d3634 11
a3644 4
# Backward compatibility (uselfs is deprecated).
case "$uselfs" in
"$define"|true|[yY]*)
	cat <<EOM >&4
d3646 12
a3657 5
*** Configure -Duselfs is deprecated, using -Duselargefiles instead.
EOM
	uselargefiles="$define"
	;;
esac                          
d3659 4
a3662 2
case "$lseeksize:$fpossize" in
8:8) cat <<EOM
a3663 1
You can have files larger than 2 gigabytes.
d3665 6
a3670 88
   val="$define" ;;
*)    case "$uselargefiles" in
   "$undef"|false|[nN]*) dflt='n' ;;
   *)	dflt='y' ;;
   esac
   cat <<EOM

Perl can be built to understand large files (files larger than 2 gigabytes)
on some systems.  To do so, Configure can be run with -Duselargefiles.

If this doesn't make any sense to you, just accept the default '$dflt'.
EOM
   rp='Try to understand large files, if available?'
   . ./myread
   case "$ans" in
   y|Y) 	val="$define" ;;
   *)   	val="$undef"  ;;
   esac
   ;;
esac
set uselargefiles
eval $setvar
case "$uselargefiles" in
"$define")
: Look for a hint-file generated 'call-back-unit'.  If the
: user has specified that a large files perl is to be built,
: we may need to set or change some other defaults.
	if $test -f uselargefiles.cbu; then
		echo "Your platform has some specific hints for large file builds, using them..."
		. ./uselargefiles.cbu
		echo " "
		echo "Rechecking to see how big your file offsets are..." >&4
		$cat >try.c <<EOCP
#include <sys/types.h>
#include <stdio.h>
int main()
{
    printf("%d\n", (int)sizeof($lseektype));
    return(0); 
}
EOCP
		set try
		if eval $compile_ok; then
			lseeksize=`./try`
			$echo "Your file offsets are now $lseeksize bytes long."
		else
			dflt="$lseeksize"
			echo " "
			echo "(I can't seem to compile the test program.  Guessing...)"
			rp="What is the size of your file offsets (in bytes)?"
			. ./myread
			lseeksize="$ans"
		fi
		case "$fpostype" in
		*_t) zzz="$fpostype"	;;
		*)   zzz="fpos_t"	;;
		esac
		$echo $n "Rechecking the size of $zzz...$c" >&4 
		$cat > try.c <<EOCP
#include <sys/types.h>
#include <stdio.h>
int main() {
    printf("%d\n", (int)sizeof($fpostype));
    exit(0);
}
EOCP
		set try
		if eval $compile_ok; then
			yyy=`./try`
			dflt="$lseeksize"
			case "$yyy" in
			'')	echo " "
				echo "(I can't execute the test program--guessing $fpossize.)" >&4
				;;
			*)	fpossize=$yyy
				echo " $fpossize bytes." >&4
				;;
			esac
		else
			dflt="$fpossize"
			echo " "
			echo "(I can't compile the test program.  Guessing...)" >&4
			rp="What is the size of your file positions (in bytes)?"
			. ./myread
			fpossize="$ans"
		fi
		$rm -f try.c try
	fi
d3673 6
d3680 8
a3687 8

case "$usemorebits" in
"$define"|true|[yY]*)
	use64bitint="$define"
	uselongdouble="$define"
	usemorebits="$define"
	;;
*)	usemorebits="$undef"
d3689 1
d3691 1
d3693 3
a3696 5
case "$uselonglong" in
"$define"|true|[yY]*)
	cat <<EOM >&4

*** Configure -Duselonglong is deprecated, using -Duse64bitint instead.
d3698 3
a3700 6
	use64bitint="$define"
	;;
esac                          
case "$use64bits" in
"$define"|true|[yY]*)
	cat <<EOM >&4
d3702 9
a3710 3
*** Configure -Duse64bits is deprecated, using -Duse64bitint instead.
EOM
	use64bitint="$define"
d3712 6
a3717 8
esac                          
case "$use64bitints" in
"$define"|true|[yY]*)
	cat <<EOM >&4

*** There is no Configure -Duse64bitints, using -Duse64bitint instead.
EOM
	use64bitint="$define"
d3719 6
a3724 8
esac                          
case "$use64bitsint" in
"$define"|true|[yY]*)
	cat <<EOM >&4

*** There is no Configure -Duse64bitsint, using -Duse64bitint instead.
EOM
	use64bitint="$define"
d3726 6
a3731 8
esac                          
case "$uselonglongs" in
"$define"|true|[yY]*)
	cat <<EOM >&4

*** There is no Configure -Duselonglongs, using -Duse64bitint instead.
EOM
	use64bitint="$define"
d3733 5
a3737 4
esac                          
case "$use64bitsall" in
"$define"|true|[yY]*)
	cat <<EOM >&4
d3739 4
a3742 5
*** There is no Configure -Duse64bitsall, using -Duse64bitall instead.
EOM
	use64bitall="$define"
	;;
esac                          
d3744 59
a3802 2
case "$ccflags" in
*-DUSE_LONG_LONG*|*-DUSE_64_BIT_INT*|*-DUSE_64_BIT_ALL*) use64bitint="$define";;
d3804 2
a3805 2
case "$use64bitall" in
"$define"|true|[yY]*) use64bitint="$define" ;;
d3808 4
a3811 2
case "$longsize" in
8) cat <<EOM
d3813 6
a3818 1
You have natively 64-bit long integers.
a3819 7
   val="$define"
   ;;
*) case "$use64bitint" in
   "$define"|true|[yY]*) dflt='y';;
   *) dflt='n';;
   esac
   cat <<EOM
d3821 7
a3827 3
Perl can be built to take advantage of 64-bit integer types
on some systems.  To do so, Configure can be run with -Duse64bitint.
Choosing this option will most probably introduce binary incompatibilities.
d3829 5
a3833 9
If this doesn't make any sense to you, just accept the default '$dflt'.
EOM
   rp='Try to use 64-bit integers, if available?'
   . ./myread
   case "$ans" in
   [yY]*) val="$define" ;;
   *)     val="$undef"  ;;
   esac
   ;;
d3835 1
a3835 2
set use64bitint
eval $setvar
d3837 5
a3841 9
case "$use64bitall" in
"$define"|true|[yY]*) dflt='y' ;;
*) case "$longsize" in
   8) dflt='y' ;;
   *) dflt='n' ;;
   esac
   ;;
esac	
cat <<EOM
d3843 2
a3844 8
You may also choose to try maximal 64-bitness.  It means using as much
64-bitness as possible on the platform.  This in turn means even more
binary incompatibilities.  On the other hand, your platform may not
have any more 64-bitness available than what you already have chosen.

If this doesn't make any sense to you, just accept the default '$dflt'.
EOM
rp='Try to use maximal 64-bit support, if available?'
d3846 3
a3848 3
case "$ans" in
[yY]*) val="$define" ;;
*)     val="$undef"  ;;
a3849 7
set use64bitall
eval $setvar
case "$use64bitall" in
"$define")
	case "$use64bitint" in
	"$undef")
		cat <<EOM
d3851 18
a3868 4
Since you have chosen a maximally 64-bit build, I'm also turning on
the use of 64-bit integers.
EOM
		use64bitint="$define" ;;
d3873 12
a3884 8
case "$use64bitint" in
"$define"|true|[yY]*)
: Look for a hint-file generated 'call-back-unit'.  If the
: user has specified that a 64-bit perl is to be built,
: we may need to set or change some other defaults.
	if $test -f use64bitint.cbu; then
		echo "Your platform has some specific hints for 64-bit integers, using them..."
		. ./use64bitint.cbu
d3886 21
a3906 7
	case "$longsize" in
	4) case "$archname64" in
	   '') archname64=64int ;;
	   esac
	   ;;
	esac
	;;
d3909 2
a3910 16
case "$use64bitall" in
"$define"|true|[yY]*)
: Look for a hint-file generated 'call-back-unit'.  If the
: user has specified that a maximally 64-bit perl is to be built,
: we may need to set or change some other defaults.
	if $test -f use64bitall.cbu; then
		echo "Your platform has some specific hints for 64-bit builds, using them..."
		. ./use64bitall.cbu
	fi
	case "$longsize" in
	4) case "$archname64" in
	   ''|64int) archname64=64all ;;
	   esac
	   ;;
	esac
	;;
d3912 9
d3922 5
a3926 28
: determine the architecture name
echo " "
if xxx=`./loc arch blurfl $pth`; $test -f "$xxx"; then
	tarch=`arch`"-$osname"
elif xxx=`./loc uname blurfl $pth`; $test -f "$xxx" ; then
	if uname -m > tmparch 2>&1 ; then
		tarch=`$sed -e 's/ *$//' -e 's/ /_/g' \
			-e 's/$/'"-$osname/" tmparch`
	else
		tarch="$osname"
	fi
	$rm -f tmparch
else
	tarch="$osname"
fi
case "$myarchname" in
''|"$tarch") ;;
*)
	echo "(Your architecture name used to be $myarchname.)"
	archname=''
	;;
esac
myarchname="$tarch"
case "$archname" in
'') dflt="$tarch";;
*) dflt="$archname";;
esac
rp='What is your architecture name'
d3928 3
a3930 12
archname="$ans"
case "$usethreads" in
$define)
	echo "Threads selected." >&4
	case "$archname" in
        *-thread*) echo "...and architecture name already has -thread." >&4
                ;;
        *)      archname="$archname-thread"
                echo "...setting architecture name to $archname." >&4
                ;;
        esac
	;;
d3932 5
a3936 11
case "$usemultiplicity" in
$define)
	echo "Multiplicity selected." >&4
	case "$archname" in
        *-multi*) echo "...and architecture name already has -multi." >&4
                ;;
        *)      archname="$archname-multi"
                echo "...setting architecture name to $archname." >&4
                ;;
        esac
	;;
d3938 3
a3940 15
case "$use64bitint" in
$define)
	case "$archname64" in
	'')
		;;
	*)
		case "$archname" in
	        *-$archname64*) echo "...and architecture name already has $archname64." >&4
	                ;;
	        *)      archname="$archname-$archname64"
	                echo "...setting architecture name to $archname." >&4
	                ;;
	        esac
		;;
	esac
d3942 2
a3943 6

: determine root of directory hierarchy where package will be installed.
case "$prefix" in
'')
	dflt=`./loc . /usr/local /usr/local /local /opt /usr`
	;;
d3945 7
a3951 12
	dflt="$prefix"
	;;
esac
$cat <<EOM

By default, $package will be installed in $dflt/bin, manual pages
under $dflt/man, etc..., i.e. with $dflt as prefix for all
installation directories. Typically this is something like /usr/local.
If you wish to have binaries under /usr/bin but other parts of the
installation under /usr/local, that's ok: you will be prompted
separately for each of the installation directories, the prefix being
only used to set the defaults.
d3953 1
d3955 25
a3979 10
fn=d~
rp='Installation prefix to use?'
. ./getfile
oldprefix=''
case "$prefix" in
'') ;;
*)
	case "$ans" in
	"$prefix") ;;
	*) oldprefix="$prefix";;
d3981 1
a3983 2
prefix="$ans"
prefixexp="$ansexp"
d3985 4
a3988 7
: is AFS running?
echo " "
case "$afs" in
$define|true)	afs=true ;;
$undef|false)	afs=false ;;
*)	if test -d /afs; then
		afs=true
d3990 1
a3990 1
		afs=false
d3992 3
d3996 1
a3997 5
if $afs; then
	echo "AFS may be running... I'll be extra cautious then..." >&4
else
	echo "AFS does not seem to be running..." >&4
fi
d3999 9
a4007 12
: determine installation prefix for where package is to be installed.
if $afs; then 
$cat <<EOM

Since you are running AFS, I need to distinguish the directory in which
files will reside from the directory in which they are installed (and from
which they are presumably copied to the former directory by occult means).

EOM
	case "$installprefix" in
	'') dflt=`echo $prefix | sed 's#^/afs/#/afs/.#'`;;
	*) dflt="$installprefix";;
d4009 1
a4009 2
else
$cat <<EOM
d4011 2
a4012 80
In some special cases, particularly when building $package for distribution,
it is convenient to distinguish between the directory in which files should 
be installed from the directory ($prefix) in which they 
will eventually reside.  For most users, these two directories are the same.

EOM
	case "$installprefix" in
	'') dflt=$prefix ;;
	*) dflt=$installprefix;;
	esac
fi
fn=d~
rp='What installation prefix should I use for installing files?'
. ./getfile
installprefix="$ans"
installprefixexp="$ansexp"

: set the prefixit variable, to compute a suitable default value
prefixit='case "$3" in
""|none)
	case "$oldprefix" in
	"") eval "$1=\"\$$2\"";;
	*)
		case "$3" in
		"") eval "$1=";;
		none)
			eval "tp=\"\$$2\"";
			case "$tp" in
			""|" ") eval "$1=\"\$$2\"";;
			*) eval "$1=";;
			esac;;
		esac;;
	esac;;
*)
	eval "tp=\"$oldprefix-\$$2-\""; eval "tp=\"$tp\"";
	case "$tp" in
	--|/*--|\~*--) eval "$1=\"$prefix/$3\"";;
	/*-$oldprefix/*|\~*-$oldprefix/*)
		eval "$1=\`echo \$$2 | sed \"s,^$oldprefix,$prefix,\"\`";;
	*) eval "$1=\"\$$2\"";;
	esac;;
esac'


: get the patchlevel
echo " "
echo "Getting the current patchlevel..." >&4
if $test -r $rsrc/patchlevel.h;then
	revision=`awk '/define[ 	]+PERL_REVISION/ {print $3}' $rsrc/patchlevel.h`
	patchlevel=`awk '/define[ 	]+PERL_VERSION/ {print $3}' $rsrc/patchlevel.h`
	subversion=`awk '/define[ 	]+PERL_SUBVERSION/ {print $3}' $rsrc/patchlevel.h`
	api_revision=`awk '/define[ 	]+PERL_API_REVISION/ {print $3}' $rsrc/patchlevel.h`
	api_version=`awk '/define[ 	]+PERL_API_VERSION/ {print $3}' $rsrc/patchlevel.h`
	api_subversion=`awk '/define[ 	]+PERL_API_SUBVERSION/ {print $3}' $rsrc/patchlevel.h`
else
	revision=0
	patchlevel=0
	subversion=0
	api_revision=0
	api_version=0
	api_subversion=0
fi
$echo $n "(You have $package revision $revision" $c
$echo $n " patchlevel $patchlevel" $c
test 0 -eq "$subversion" || $echo $n " subversion $subversion" $c
echo ".)"
case "$osname" in
dos|vms)
	: XXX Should be a Configure test for double-dots in filenames.
	version=`echo $revision $patchlevel $subversion | \
		 $awk '{ printf "%d_%d_%d\n", $1, $2, $3 }'`
	api_versionstring=`echo $api_revision $api_version $api_subversion | \
		 $awk '{ printf "%d_%d_%d\n", $1, $2, $3 }'`
	;;
*)
	version=`echo $revision $patchlevel $subversion | \
		 $awk '{ printf "%d.%d.%d\n", $1, $2, $3 }'`
	api_versionstring=`echo $api_revision $api_version $api_subversion | \
		 $awk '{ printf "%d.%d.%d\n", $1, $2, $3 }'`
	;;
a4013 5
: Special case the 5.005_xx maintenance series, which used 5.005
: without any subversion label as a subdirectory in $sitelib
if test "${api_revision}${api_version}${api_subversion}" = "550"; then
	api_versionstring='5.005'
fi
d4015 1
a4015 15
: determine installation style
: For now, try to deduce it from prefix unless it is already set.
: Reproduce behavior of 5.005 and earlier, maybe drop that in 5.7.
case "$installstyle" in
'')	case "$prefix" in
		*perl*) dflt='lib';;
		*) dflt='lib/perl5' ;;
	esac
	;;
*)	dflt="$installstyle" ;;
esac
: Probably not worth prompting for this since we prompt for all
: the directories individually, and the prompt would be too long and
: confusing anyway.
installstyle=$dflt
d4017 3
a4019 11
: determine where private library files go
: Usual default is /usr/local/lib/perl5/$version.
: Also allow things like /opt/perl/lib/$version, since 
: /opt/perl/lib/perl5... would be redundant.
: The default "style" setting is made in installstyle.U
case "$installstyle" in
*lib/perl5*) set dflt privlib lib/$package/$version ;;
*)	 set dflt privlib lib/$version ;;
esac
eval $prefixit
$cat <<EOM
d4021 5
a4025 2
There are some auxiliary files for $package that need to be put into a
private library directory that is accessible by everyone.
d4027 1
a4027 12
EOM
fn=d~+
rp='Pathname where the private library files will reside?'
. ./getfile
privlib="$ans"
privlibexp="$ansexp"
: Change installation prefix, if necessary.
if $test X"$prefix" != X"$installprefix"; then
	installprivlib=`echo $privlibexp | sed "s#^$prefix#$installprefix#"`
else
	installprivlib="$privlibexp"
fi
d4029 5
a4033 19
: set the prefixup variable, to restore leading tilda escape
prefixup='case "$prefixexp" in
"$prefix") ;;
*) eval "$1=\`echo \$$1 | sed \"s,^$prefixexp,$prefix,\"\`";;
esac'

: determine where public architecture dependent libraries go
set archlib archlib
eval $prefixit
: privlib default is /usr/local/lib/$package/$version
: archlib default is /usr/local/lib/$package/$version/$archname
: privlib may have an optional trailing /share.
tdflt=`echo $privlib | $sed 's,/share$,,'`
tdflt=$tdflt/$archname
case "$archlib" in
'')	dflt=$tdflt
	;;
*)	dflt="$archlib"
    ;;
d4035 1
a4035 34
$cat <<EOM

$spackage contains architecture-dependent library files.  If you are
sharing libraries in a heterogeneous environment, you might store
these files in a separate location.  Otherwise, you can just include
them with the rest of the public library files.

EOM
fn=d+~
rp='Where do you want to put the public architecture-dependent libraries?'
. ./getfile
archlib="$ans"
archlibexp="$ansexp"
if $test X"$archlib" = X"$privlib"; then
	d_archlib="$undef"
else
	d_archlib="$define"
fi
: Change installation prefix, if necessary.
if $test X"$prefix" != X"$installprefix"; then
	installarchlib=`echo $archlibexp | sed "s#^$prefix#$installprefix#"`
else
	installarchlib="$archlibexp"
fi


: Binary compatibility with 5.005 is not possible for builds
: with advanced features
case "$usethreads$usemultiplicity" in
*define*)
	bincompat5005="$undef"
	d_bincompat5005="$undef"
	;;
*)	$cat <<EOM
d4037 11
a4047 3
This version of Perl can be compiled for binary compatibility with 5.005.
If you decide to do so, you will be able to continue using most of the
extensions that were compiled for Perl 5.005.
d4050 1
a4050 22
	case "$bincompat5005$d_bincompat5005" in
	*"$undef"*) dflt=n ;;
	*) dflt=y ;;
	esac
	rp='Binary compatibility with Perl 5.005?'
	. ./myread
	case "$ans" in
	y*) val="$define" ;;
	*)  val="$undef" ;;
	esac
	set d_bincompat5005
	eval $setvar
	case "$d_bincompat5005" in
	"$define")
		bincompat5005="$define"
		;;
	*)	bincompat5005="$undef"
		d_bincompat5005="$undef"
		;;
	esac
	;;
esac
d4052 1
d4054 1
a4054 2
: see if setuid scripts can be secure
$cat <<EOM
d4056 2
a4057 2
Some kernels have a bug that prevents setuid #! scripts from being
secure.  Some sites have disabled setuid #! scripts because of this.
d4059 1
a4059 3
First let's decide if your kernel supports secure setuid #! scripts.
(If setuid #! scripts would be secure but have been disabled anyway,
don't say that they are secure if asked.)
d4062 13
d4076 4
a4079 29
val="$undef"
if $test -d /dev/fd; then
	echo "#!$ls" >reflect
	chmod +x,u+s reflect
	./reflect >flect 2>&1
	if $contains "/dev/fd" flect >/dev/null; then
		echo "Congratulations, your kernel has secure setuid scripts!" >&4
		val="$define"
	else
		$cat <<EOM
If you are not sure if they are secure, I can check but I'll need a
username and password different from the one you are using right now.
If you don't have such a username or don't want me to test, simply
enter 'none'.

EOM
		rp='Other username to test security of setuid scripts with?'
		dflt='none'
		. ./myread
		case "$ans" in
		n|none)
			case "$d_suidsafe" in
			'')	echo "I'll assume setuid scripts are *not* secure." >&4
				dflt=n;;
			"$undef")
				echo "Well, the $hint value is *not* secure." >&4
				dflt=n;;
			*)	echo "Well, the $hint value *is* secure." >&4
				dflt=y;;
a4081 22
		*)
			$rm -f reflect flect
			echo "#!$ls" >reflect
			chmod +x,u+s reflect
			echo >flect
			chmod a+w flect
			echo '"su" will (probably) prompt you for '"$ans's password."
			su $ans -c './reflect >flect'
			if $contains "/dev/fd" flect >/dev/null; then
				echo "Okay, it looks like setuid scripts are secure." >&4
				dflt=y
			else
				echo "I don't think setuid scripts are secure." >&4
				dflt=n
			fi
			;;
		esac
		rp='Does your kernel have *secure* setuid scripts?'
		. ./myread
		case "$ans" in
		[yY]*)	val="$define";;
		*)	val="$undef";;
d4083 4
d4089 3
a4091 3
	echo "I don't think setuid scripts are secure (no /dev/fd directory)." >&4
	echo "(That's for file descriptors, not floppy disks.)"
	val="$undef"
d4093 8
a4100 26
set d_suidsafe
eval $setvar

$rm -f reflect flect

: now see if they want to do setuid emulation
echo " "
val="$undef"
case "$d_suidsafe" in
"$define")
	val="$undef"
	echo "No need to emulate SUID scripts since they are secure here." >& 4
	;;
*)
	$cat <<EOM
Some systems have disabled setuid scripts, especially systems where
setuid scripts cannot be secure.  On systems where setuid scripts have
been disabled, the setuid/setgid bits on scripts are currently
useless.  It is possible for $package to detect those bits and emulate
setuid/setgid in a secure fashion.  This emulation will only work if
setuid scripts have been disabled in your kernel.

EOM
	case "$d_dosuid" in
	"$define") dflt=y ;;
	*) dflt=n ;;
d4102 1
a4102 1
	rp="Do you want to do setuid/setgid emulation?"
d4105 4
a4108 2
	[yY]*)	val="$define";;
	*)	val="$undef";;
d4111 1
d4113 1
a4113 2
set d_dosuid
eval $setvar
d4153 4
a4156 7
for usrincdir in $usrinc
do
	if test -f \$usrincdir/\$wanted; then
		echo "\$usrincdir/\$wanted"
		exit 0
	fi
done
d4164 2
a4165 3
	*[/\\\\]\$wanted) echo "\$name"; exit 1;;
	*[\\\\/]\$wanted) echo "\$name"; exit 1;;
	*) exit 2;;
a4167 6
#
# status = 0: grep returned 0 lines, case statement not executed
# status = 1: headerfile found
# status = 2: while loop executed, no headerfile found
#
status=\$?
d4169 3
a4171 4
if test \$status -eq 1; then
	exit 0;
fi
exit 1
a4288 120
$cat <<EOM

The installation process will also create a directory for
vendor-supplied add-ons.  Vendors who supply perl with their system
may find it convenient to place all vendor-supplied files in this
directory rather than in the main distribution directory.  This will
ease upgrades between binary-compatible maintenance versions of perl.

Of course you may also use these directories in whatever way you see
fit.  For example, you might use them to access modules shared over a
company-wide network.

The default answer should be fine for most people.
This causes further questions about vendor add-ons to be skipped
and no vendor-specific directories will be configured for perl.

EOM
rp='Do you want to configure vendor-specific add-on directories?'
case "$usevendorprefix" in
define|true|[yY]*) dflt=y ;;
*)	: User may have set vendorprefix directly on Configure command line.
	case "$vendorprefix" in
	''|' ') dflt=n ;;
	*)	dflt=y ;;
	esac
	;;
esac
. ./myread
case "$ans" in
[yY]*)	fn=d~+
	rp='Installation prefix to use for vendor-supplied add-ons?'
	case "$vendorprefix" in
	'') dflt='' ;;
	*)  dflt=$vendorprefix ;;
	esac
	. ./getfile
	: XXX Prefixit unit does not yet support siteprefix and vendorprefix
	oldvendorprefix=''
	case "$vendorprefix" in
	'') ;;
	*)	case "$ans" in
		"$prefix") ;;
		*) oldvendorprefix="$prefix";;
		esac
		;;
	esac
	usevendorprefix="$define"
	vendorprefix="$ans"
	vendorprefixexp="$ansexp"
	;;
*)	usevendorprefix="$undef"
	vendorprefix=''
	vendorprefixexp=''
	;;
esac

case "$vendorprefix" in
'')	d_vendorlib="$undef"
	vendorlib=''
	vendorlibexp=''
	;;
*)	d_vendorlib="$define"
	: determine where vendor-supplied modules go.
	: Usual default is /usr/local/lib/perl5/vendor_perl/$version
	case "$vendorlib" in
	'')
		prog=`echo $package | $sed 's/-*[0-9.]*$//'`
		case "$installstyle" in
		*lib/perl5*) dflt=$vendorprefix/lib/$package/vendor_$prog/$version ;;
		*)	     dflt=$vendorprefix/lib/vendor_$prog/$version ;;
		esac
		;;
	*)	dflt="$vendorlib"
		;;
	esac
	fn=d~+
	rp='Pathname for the vendor-supplied library files?'
	. ./getfile
	vendorlib="$ans"
	vendorlibexp="$ansexp"
	;;
esac
vendorlib_stem=`echo "$vendorlibexp" | sed "s,/$version$,,"`
: Change installation prefix, if necessary.
if $test X"$prefix" != X"$installprefix"; then
	installvendorlib=`echo $vendorlibexp | $sed "s#^$prefix#$installprefix#"`
else
	installvendorlib="$vendorlibexp"
fi

case "$vendorprefix" in
'')	d_vendorarch="$undef"
	vendorarch=''
	vendorarchexp=''
	;;
*)	d_vendorarch="$define"
	: determine where vendor-supplied architecture-dependent libraries go.
	: vendorlib  default is /usr/local/lib/perl5/vendor_perl/$version
	: vendorarch default is /usr/local/lib/perl5/vendor_perl/$version/$archname
	: vendorlib may have an optional trailing /share.
	case "$vendorarch" in
	'')	dflt=`echo $vendorlib | $sed 's,/share$,,'`
		dflt="$dflt/$archname"
		;;
	*)	dflt="$vendorarch" ;;
	esac
	fn=d~+
	rp='Pathname for vendor-supplied architecture-dependent files?'
	. ./getfile
	vendorarch="$ans"
	vendorarchexp="$ansexp"
	;;
esac
: Change installation prefix, if necessary.
if $test X"$prefix" != X"$installprefix"; then
	installvendorarch=`echo $vendorarchexp | sed "s#^$prefix#$installprefix#"`
else
	installvendorarch="$vendorarchexp"
fi

d4330 6
a4335 102
: determine where public executables go
echo " "
set dflt bin bin
eval $prefixit
fn=d~
rp='Pathname where the public executables will reside?'
. ./getfile
if $test "X$ansexp" != "X$binexp"; then
	installbin=''
fi
bin="$ans"
binexp="$ansexp"
: Change installation prefix, if necessary.
: XXX Bug? -- ignores Configure -Dinstallprefix setting.
if $test X"$prefix" != X"$installprefix"; then
	installbin=`echo $binexp | sed "s#^$prefix#$installprefix#"`
else
	installbin="$binexp"
fi

: Find perl5.005 or later.
echo "Looking for a previously installed perl5.005 or later... "
case "$perl5" in
'')	for tdir in `echo "$binexp:$PATH" | $sed "s/$path_sep/ /g"`; do
		: Check if this perl is recent and can load a simple module
		if $test -x $tdir/perl && $tdir/perl -Mless -e 'use 5.005;' >/dev/null 2>&1; then
			perl5=$tdir/perl
			break;
		elif $test -x $tdir/perl5 && $tdir/perl5 -Mless -e 'use 5.005;' >/dev/null 2>&1; then
			perl5=$tdir/perl
			break;
		fi
	done
	;;
*)	perl5="$perl5"
	;;
esac
case "$perl5" in
'')	echo "None found.  That's ok.";;
*)	echo "Using $perl5." ;;
esac

$cat <<EOM

After $package is installed, you may wish to install various
add-on modules and utilities.  Typically, these add-ons will
be installed under $prefix with the rest
of this package.  However, you may wish to install such add-ons
elsewhere under a different prefix.

If you do not wish to put everything under a single prefix, that's
ok.  You will be prompted for the individual locations; this siteprefix
is only used to suggest the defaults.

The default should be fine for most people.

EOM
fn=d~+
rp='Installation prefix to use for add-on modules and utilities?'
: XXX Here might be another good place for an installstyle setting.
case "$siteprefix" in
'') dflt=$prefix ;;
*)  dflt=$siteprefix ;;
esac
. ./getfile
: XXX Prefixit unit does not yet support siteprefix and vendorprefix
oldsiteprefix=''
case "$siteprefix" in
'') ;;
*)	case "$ans" in
	"$prefix") ;;
	*) oldsiteprefix="$prefix";;
	esac
	;;
esac
siteprefix="$ans"
siteprefixexp="$ansexp"

: determine where site specific libraries go.
: Usual default is /usr/local/lib/perl5/site_perl/$version
: The default "style" setting is made in installstyle.U
: XXX No longer works with Prefixit stuff.
prog=`echo $package | $sed 's/-*[0-9.]*$//'`
case "$sitelib" in
'') case "$installstyle" in
	*lib/perl5*) dflt=$siteprefix/lib/$package/site_$prog/$version ;;
	*)	 dflt=$siteprefix/lib/site_$prog/$version ;;
	esac
	;;
*)	dflt="$sitelib"
	;;
esac
$cat <<EOM

The installation process will create a directory for
site-specific extensions and modules.  Most users find it convenient
to place all site-specific files in this directory rather than in the
main distribution directory.

EOM
fn=d~+
rp='Pathname for the site-specific library files?'
d4337 2
a4338 8
sitelib="$ans"
sitelibexp="$ansexp"
sitelib_stem=`echo "$sitelibexp" | sed "s,/$version$,,"`
: Change installation prefix, if necessary.
if $test X"$prefix" != X"$installprefix"; then
	installsitelib=`echo $sitelibexp | $sed "s#^$prefix#$installprefix#"`
else
	installsitelib="$sitelibexp"
d4340 4
d4345 3
a4347 66
: Determine list of previous versions to include in @@INC
$cat > getverlist <<EOPL
#!$perl5 -w
use File::Basename;
\$api_versionstring = "$api_versionstring";
\$version = "$version";
\$sitelib = "$sitelib";
\$archname = "$archname";
EOPL
	$cat >> getverlist <<'EOPL'
# Can't have leading @@ because metaconfig interprets it as a command!
;@@inc_version_list=();
$stem=dirname($sitelib);
# XXX Redo to do opendir/readdir? 
if (-d $stem) {
    chdir($stem);
    ;@@candidates = glob("5.*");
}
else {
    ;@@candidates = ();
}

# XXX ToDo:  These comparisons must be reworked when two-digit
# subversions come along, so that 5.7.10 compares as greater than
# 5.7.3!  By that time, hope that 5.6.x is sufficiently
# widespread that we can use the built-in version vectors rather
# than reinventing them here.  For 5.6.0, however, we must
# assume this script will likely be run by 5.005_0x.  --AD 1/2000.
foreach $d (@@candidates) {
    if ($d lt $version) {
	if ($d ge $api_versionstring) {
	    unshift(@@inc_version_list, grep { -d } "$d/$archname", $d);
	}
	elsif ($d ge "5.005") {
	    unshift(@@inc_version_list, grep { -d } $d);
	}
    }
    else {
	# Skip newer version.  I.e. don't look in
	# 5.7.0 if we're installing 5.6.1.
    }
}

if (@@inc_version_list) {
    print join(' ', @@inc_version_list);
}
else {
    # Blank space to preserve value for next Configure run.
    print " ";
}
EOPL
chmod +x getverlist
case "$inc_version_list" in
'')	if test -x "$perl5"; then
		dflt=`$perl5 getverlist`
	else
		dflt='none'
	fi
	;;
$undef) dflt='none' ;;
*)  dflt="$inc_version_list" ;;
esac
case "$dflt" in
''|' ') dflt=none ;;
esac
$cat <<'EOM'
a4348 10
In order to ease the process of upgrading, this version of perl 
can be configured to use modules built and installed with earlier 
versions of perl that were installed under $prefix.  Specify here
the list of earlier versions that this version of perl should check.
If Configure detected no earlier versions of perl installed under
$prefix, then the list will be empty.  Answer 'none' to tell perl
to not search earlier versions.

The default should almost always be sensible, so if you're not sure,
just accept the default.
d4350 11
a4360 17

rp='List of earlier versions to include in @@INC?'
. ./myread
case "$ans" in
[Nn]one|''|' ') inc_version_list=' ' ;;
*) inc_version_list="$ans" ;;
esac
case "$inc_version_list" in
''|' ') 
	inc_version_list_init='0';;
*)	inc_version_list_init=`echo $inc_version_list |
		$sed -e 's/^/"/' -e 's/ /","/g' -e 's/$/",0/'`
	;;
esac
$rm -f getverlist

: determine whether to install perl also as /usr/bin/perl
d4363 1
a4363 1
if $test -d /usr/bin -a "X$installbin" != X/usr/bin; then
d4365 1
a4365 1
Many scripts expect perl to be installed as /usr/bin/perl.
d4385 11
d4914 2
a4915 1
	gfpth="$src"
d4919 1
a4919 1
	dlsrc=`echo $ans | $sed -e 's%.*/\([^/]*\)$%\1%'`
d5006 1
a5006 6
  			beos) dflt='-nostart' ;;
			hpux) dflt='-b';
			      case "$gccversion" in
			      '') dflt="$dflt +vnocompatwarnings" ;;
			      esac
			      ;;	
d5010 1
d5064 1
a5064 1
    rp="Any special flags to pass to $cc to use dynamic linking?"
d5087 1
a5087 1
		svr4*|dgux|dynixptx|esix|powerux|beos|cygwin*)
d5127 9
a5135 1
		useshrplib='true'  ;;
a5164 3
		cygwin*) # include version
			dflt=`echo libperl$version | sed -e 's/\./_/g'`$lib_ext
			;;
d5206 1
a5206 1
will not work in this version.  Let me (perlbug@@perl.com)
a5254 4
	hpux*)
		# hpux doesn't like the default, either.
		tmp_shrpenv="env LDOPTS=\"+s +b${shrpdir}\""
		;;
a5277 6
# Fix ccdlflags in AIX for building external extensions.
# (For building Perl itself bare -bE:perl.exp is needed,
#  Makefile.SH takes care of this.)
case "$osname" in
aix) ccdlflags="$ccdlflags -bE:$installarchlib/CORE/perl.exp" ;;
esac
a5281 4
case "$ldlibpthname" in
'')	ldlibpthname=LD_LIBRARY_PATH ;;
none)	ldlibpthname='' ;;
esac
d5326 1
a5326 1
'')	man1dir=' '
d5329 2
d5332 13
a5344 3
: Change installation prefix, if necessary.
if $test X"$prefix" != X"$installprefix"; then
	installman1dir=`echo $man1direxp | $sed "s#^$prefix#$installprefix#"`
d5381 2
d5384 2
a5385 1
$rm -f $first
d5391 20
a5410 2
 		echo 'You can have filenames longer than 14 characters.'>&4
 		val="$define"
d5414 1
a5414 2
You can't have filenames longer than 14 chars.
You can't even think about them!
d5420 1
a5420 1
$rm -rf 123456789abcde*
d5453 5
a5457 17
'')	dflt=`echo "$man1dir" | $sed -e 's/man1/man3/g' -e 's/man\.1/man\.3/g'`
	if $test -d "$privlib/man/man3"; then
		cat <<EOM >&4

WARNING:  Previous versions of perl installed man3 pages into
$privlib/man/man3.  This version will suggest a 
new default of $dflt.  
EOM
		tdflt=$dflt
		dflt='n'
		rp='Do you wish to preserve the old behavior?(y/n)'
		. ./myread
		case "$ans" in
		y*) dflt="$privlib/man/man3" ;;
		*)  dflt=$tdflt ;;
		esac
    fi
d5459 1
a5461 3
case "$dflt" in
' ') dflt=none ;;
esac
d5463 1
d5467 4
d5474 1
a5474 1
'')	man3dir=' '
d5477 2
d5480 13
a5492 3
: Change installation prefix, if necessary.
if $test X"$prefix" != X"$installprefix"; then
	installman3dir=`echo $man3direxp | $sed "s#^$prefix#$installprefix#"`
d5498 1
d5572 1
a5572 1
'') test -f /etc/hosts && hostcat='cat /etc/hosts';;
d5575 1
a5575 1
'') test -f /etc/group && groupcat='cat /etc/group';;
d5578 1
a5578 1
'') test -f /etc/passwd && passcat='cat /etc/passwd';;
a5679 1
			test "X$hostcat" != "X" &&
d5776 1
a5776 1
is most probably close to reality but may not be valid from outside
d5897 3
a5899 4
	$test -d /usr/share/bin     && dflt=/usr/share/bin
	$test -d /usr/local/script  && dflt=/usr/local/script
	$test -d /usr/local/scripts && dflt=/usr/local/scripts
	$test -d $prefixexp/script  && dflt=$prefixexp/script
d5922 2
a5923 6
: Change installation prefix, if necessary.
if $test X"$prefix" != X"$installprefix"; then
	installscript=`echo $scriptdirexp | sed "s#^$prefix#$installprefix#"`
else
	installscript="$scriptdirexp"
fi
d5925 3
a5927 122
: determine where site specific architecture-dependent libraries go.
: sitelib  default is /usr/local/lib/perl5/site_perl/$version
: sitearch default is /usr/local/lib/perl5/site_perl/$version/$archname
: sitelib may have an optional trailing /share.
case "$sitearch" in
'')	dflt=`echo $sitelib | $sed 's,/share$,,'`
	dflt="$dflt/$archname"
	;;
*)	dflt="$sitearch"
	;;
esac
set sitearch sitearch none
eval $prefixit
$cat <<EOM

The installation process will also create a directory for
architecture-dependent site-specific extensions and modules.

EOM
fn=d~+
rp='Pathname for the site-specific architecture-dependent library files?'
. ./getfile
sitearch="$ans"
sitearchexp="$ansexp"
: Change installation prefix, if necessary.
if $test X"$prefix" != X"$installprefix"; then
	installsitearch=`echo $sitearchexp | sed "s#^$prefix#$installprefix#"`
else
	installsitearch="$sitearchexp"
fi

: determine where add-on public executables go
case "$sitebin" in
'')	dflt=$siteprefix/bin ;;
*)	dflt=$sitebin ;;
esac
fn=d~
rp='Pathname where the add-on public executables should be installed?'
. ./getfile
sitebin="$ans"
sitebinexp="$ansexp"
: Change installation prefix, if necessary.
if $test X"$prefix" != X"$installprefix"; then
	installsitebin=`echo $sitebinexp | sed "s#^$prefix#$installprefix#"`
else
	installsitebin="$sitebinexp"
fi

: see if sqrtl exists
set sqrtl d_sqrtl
eval $inlibc

case "$ccflags" in
*-DUSE_LONG_DOUBLE*|*-DUSE_MORE_BITS*) uselongdouble="$define" ;;
esac

case "$uselongdouble" in
$define|true|[yY]*)	dflt='y';;
*) dflt='n';;
esac
cat <<EOM

Perl can be built to take advantage of long doubles which
(if available) may give more accuracy and range for floating point numbers.

If this doesn't make any sense to you, just accept the default '$dflt'.
EOM
rp='Try to use long doubles if available?'
. ./myread
case "$ans" in
y|Y) 	val="$define"	;;
*)      val="$undef"	;;
esac
set uselongdouble
eval $setvar

case "$uselongdouble" in
true|[yY]*) uselongdouble="$define" ;;
esac

case "$uselongdouble" in
$define)
: Look for a hint-file generated 'call-back-unit'.  If the
: user has specified that long doubles should be used,
: we may need to set or change some other defaults.
	if $test -f uselongdouble.cbu; then
		echo "Your platform has some specific hints for long doubles, using them..."
		. ./uselongdouble.cbu
	else
		$cat <<EOM
(Your platform doesn't have any specific hints for long doubles.)
EOM
	fi
	;;
esac

case "$uselongdouble:$d_sqrtl" in
$define:$undef)
		$cat <<EOM >&4

*** You requested the use of long doubles but you do not seem to have
*** the mathematic functions for long doubles.  I'm disabling the use
*** of long doubles.

EOM
	uselongdouble=$undef
	;;
esac

case "$useperlio" in
$define|true|[yY]*)	dflt='y';;
*) dflt='n';;
esac
cat <<EOM

Previous version of $package used the standard IO mechanisms as defined
in <stdio.h>.  Versions 5.003_02 and later of perl allow alternate IO
mechanisms via a "PerlIO" abstraction, but the stdio mechanism is still
the default.  This abstraction layer can use AT&T's sfio (if you already
have sfio installed) or regular stdio.  Using PerlIO with sfio may cause
problems with some extension modules.  Using PerlIO with stdio is safe,
but it is slower than plain stdio and therefore is not the default.
a5928 1
If this doesn't make any sense to you, just accept the default '$dflt'.
d5930 3
a5932 24
rp='Use the experimental PerlIO abstraction layer?'
. ./myread
case "$ans" in
y|Y) 
	val="$define"
	;;     
*)      
	echo "Ok, doing things the stdio way"
	val="$undef"
	;;
esac
set useperlio
eval $setvar 

case "$vendorprefix" in
'')	d_vendorbin="$undef"
	vendorbin=''
	vendorbinexp=''
	;;
*)	d_vendorbin="$define"
	: determine where vendor-supplied executables go.
	case "$vendorbin" in
	'') dflt=$vendorprefix/bin ;;
	*)	dflt="$vendorbin" ;;
d5934 2
a5935 2
	fn=d~+
	rp='Pathname for the vendor-supplied executables directory?'
d5937 1
a5937 7
	vendorbin="$ans"
	vendorbinexp="$ansexp"
	;;
esac
: Change installation prefix, if necessary.
if $test X"$prefix" != X"$installprefix"; then
	installvendorbin=`echo $vendorbinexp | $sed "s#^$prefix#$installprefix#"`
d5939 1
a5939 1
	installvendorbin="$vendorbinexp"
d5942 6
a5947 77
: see if qgcvt exists
set qgcvt d_qgcvt
eval $inlibc

: check for length of double
echo " "
case "$doublesize" in
'')
	echo "Checking to see how big your double precision numbers are..." >&4
	$cat >try.c <<'EOCP'
#include <stdio.h>
int main()
{
    printf("%d\n", (int)sizeof(double));
    exit(0);
}
EOCP
	set try
	if eval $compile_ok; then
		doublesize=`./try`
		echo "Your double is $doublesize bytes long."
	else
		dflt='8'
		echo "(I can't seem to compile the test program.  Guessing...)"
		rp="What is the size of a double precision number (in bytes)?"
		. ./myread
		doublesize="$ans"
	fi
	;;
esac
$rm -f try.c try

: check for long doubles
echo " "
echo "Checking to see if you have long double..." >&4
echo 'int main() { long double x = 7.0; }' > try.c
set try
if eval $compile; then
	val="$define"
	echo "You have long double."
else
	val="$undef"
	echo "You do not have long double."
fi
$rm try.*
set d_longdbl
eval $setvar

: check for length of long double
case "${d_longdbl}${longdblsize}" in
$define)
	echo " "
	echo "Checking to see how big your long doubles are..." >&4
	$cat >try.c <<'EOCP'
#include <stdio.h>
int main()
{
	printf("%d\n", sizeof(long double));
}
EOCP
	set try
	set try
	if eval $compile; then
		longdblsize=`./try$exe_ext`
		echo "Your long doubles are $longdblsize bytes long."
	else
		dflt='8'
		echo " "
		echo "(I can't seem to compile the test program.  Guessing...)" >&4
		rp="What is the size of a long double (in bytes)?"
		. ./myread
		longdblsize="$ans"
	fi
	if $test "X$doublesize" = "X$longdblsize"; then
		echo "(That isn't any different from an ordinary double.)"
	fi	
	;;
d5949 2
a5950 1
$rm -f try.* try
d5952 4
a5955 1
echo " "
d5957 11
a5967 1
if $test X"$d_longdbl" = X"$define"; then
d5969 4
a5972 1
echo "Checking how to print long doubles..." >&4
d5974 11
a5984 20
if $test X"$sPRIfldbl" = X -a X"$doublesize" = X"$longdblsize"; then
	$cat >try.c <<'EOCP'
#include <sys/types.h>
#include <stdio.h>
int main() {
  double d = 123.456;
  printf("%.3f\n", d);
}
EOCP
	set try
	if eval $compile; then
		yyy=`./try$exe_ext`
		case "$yyy" in
		123.456)
			sPRIfldbl='"f"'; sPRIgldbl='"g"'; sPRIeldbl='"e"';
                	sPRIFldbl='"F"'; sPRIGldbl='"G"'; sPRIEldbl='"E"';
			echo "We will use %f."
			;;
		esac
	fi
d5987 16
a6002 21
if $test X"$sPRIfldbl" = X; then
	$cat >try.c <<'EOCP'
#include <sys/types.h>
#include <stdio.h>
int main() {
  long double d = 123.456;
  printf("%.3llf\n", d);
}
EOCP
	set try
	if eval $compile; then
		yyy=`./try$exe_ext`
		case "$yyy" in
		123.456)
			sPRIfldbl='"llf"'; sPRIgldbl='"llg"'; sPRIeldbl='"lle"';
                	sPRIFldbl='"llF"'; sPRIGldbl='"llG"'; sPRIEldbl='"llE"';
			echo "We will use %llf."
			;;
		esac
	fi
fi
d6004 6
a6009 20
if $test X"$sPRIfldbl" = X; then
	$cat >try.c <<'EOCP'
#include <sys/types.h>
#include <stdio.h>
int main() {
  long double d = 123.456;
  printf("%.3Lf\n", d);
}
EOCP
	set try
	if eval $compile; then
		yyy=`./try$exe_ext`
		case "$yyy" in
		123.456)
			sPRIfldbl='"Lf"'; sPRIgldbl='"Lg"'; sPRIeldbl='"Le"';
                	sPRIFldbl='"LF"'; sPRIGldbl='"LG"'; sPRIEldbl='"LE"';
			echo "We will use %Lf."
			;;
		esac
	fi
d6011 4
d6016 4
a6019 21
if $test X"$sPRIfldbl" = X; then
	$cat >try.c <<'EOCP'
#include <sys/types.h>
#include <stdio.h>
int main() {
  long double d = 123.456;
  printf("%.3lf\n", d);
}
EOCP
	set try
	if eval $compile; then
		yyy=`./try$exe_ext`
		case "$yyy" in
		123.456)
			sPRIfldbl='"lf"'; sPRIgldbl='"lg"'; sPRIeldbl='"le"';
                	sPRIFldbl='"lF"'; sPRIGldbl='"lG"'; sPRIEldbl='"lE"';
			echo "We will use %lf."
			;;
		esac
	fi
fi
d6021 11
a6031 2
if $test X"$sPRIfldbl" = X; then
	echo "Cannot figure out how to print long doubles." >&4
d6034 1
a6034 1
$rm -f try try.*
d6036 7
a6042 1
fi # d_longdbl
d6044 15
a6058 6
case "$sPRIfldbl" in
'')	d_PRIfldbl="$undef"; d_PRIgldbl="$undef"; d_PRIeldbl="$undef"; 
	d_PRIFldbl="$undef"; d_PRIGldbl="$undef"; d_PRIEldbl="$undef"; 
	;;
*)	d_PRIfldbl="$define"; d_PRIgldbl="$define"; d_PRIeldbl="$define"; 
	d_PRIFldbl="$define"; d_PRIGldbl="$define"; d_PRIEldbl="$define"; 
d6061 2
d6066 3
a6068 13
	echo " "
	echo "Checking for an efficient way to convert floats to strings."
	echo " " > try.c
	case "$uselongdouble" in
	"$define") echo "#define USE_LONG_DOUBLE" >>try.c ;;
	esac
	case "$d_longdbl" in
	"$define") echo "#define HAS_LONG_DOUBLE" >>try.c ;;
	esac
	case "$d_PRIgldbl" in
	"$define") echo "#define HAS_PRIgldbl"    >>try.c ;;
	esac
	$cat >>try.c <<EOP
a6076 5
#ifdef TRY_qgcvt
#define Gconvert(x,n,t,b) qgcvt((x),(n),(b))
char *myname = "qgcvt";
#define DOUBLETYPE long double
#endif
a6077 3
#if defined(USE_LONG_DOUBLE) && defined(HAS_LONG_DOUBLE) && defined(HAS_PRIgldbl)
#define Gconvert(x,n,t,b) sprintf((b),"%.*"$sPRIgldbl,(n),(x))
#else
a6078 1
#endif
a6081 8
#ifndef DOUBLETYPE
#if defined(USE_LONG_DOUBLE) && defined(HAS_LONG_DOUBLE)
#define DOUBLETYPE long double
#else
#define DOUBLETYPE double
#endif
#endif

a6083 5
#define I_STDLIB $i_stdlib
#ifdef I_STDLIB
#include <stdlib.h>
#endif

d6103 1
a6103 1
	Gconvert((DOUBLETYPE)0.1, 8, 0, buf);
d6106 1
a6106 1
	Gconvert((DOUBLETYPE)1.0, 8, 0, buf); 
d6109 1
a6109 19
	Gconvert((DOUBLETYPE)1.1, 8, 0, buf); 
	checkit("1.1", buf);

	Gconvert((DOUBLETYPE)1.01, 8, 0, buf); 
	checkit("1.01", buf);

	Gconvert((DOUBLETYPE)1.001, 8, 0, buf); 
	checkit("1.001", buf);

	Gconvert((DOUBLETYPE)1.0001, 8, 0, buf); 
	checkit("1.0001", buf);

	Gconvert((DOUBLETYPE)1.00001, 8, 0, buf); 
	checkit("1.00001", buf);

	Gconvert((DOUBLETYPE)1.000001, 8, 0, buf); 
	checkit("1.000001", buf);

	Gconvert((DOUBLETYPE)0.0, 8, 0, buf); 
d6112 1
a6112 1
	Gconvert((DOUBLETYPE)-1.0, 8, 0, buf); 
d6116 1
a6116 1
	Gconvert((DOUBLETYPE)100000.0, 8, 0, buf); 
d6120 1
a6120 1
	Gconvert((DOUBLETYPE)-100000.0, 8, 0, buf); 
d6126 6
a6131 6
	case "$d_Gconvert" in
	gconvert*) xxx_list='gconvert gcvt sprintf' ;;
	gcvt*) xxx_list='gcvt gconvert sprintf' ;;
	sprintf*) xxx_list='sprintf gconvert gcvt' ;;
	*) xxx_list='gconvert gcvt sprintf' ;;
	esac
d6133 9
a6141 16
        case "$d_longdbl$uselongdouble$d_qgcvt" in
        "$define$define$define") xxx_list="`echo $xxx_list|sed 's/gcvt/qgcvt gcvt/'`" ;;
	esac

	for xxx_convert in $xxx_list; do
		echo "Trying $xxx_convert..."
		$rm -f try try$_o
		set try -DTRY_$xxx_convert
		if eval $compile; then
			echo "$xxx_convert() found." >&4
			if ./try; then
				echo "I'll use $xxx_convert to convert floats into a string." >&4
				break;
			else
				echo "...But $xxx_convert didn't work as I expected."
			fi
d6143 1
a6143 1
			echo "$xxx_convert NOT found." >&4
d6145 4
a6148 1
	done
d6150 5
a6154 11
	case "$xxx_convert" in
	gconvert) d_Gconvert='gconvert((x),(n),(t),(b))' ;;
	gcvt) d_Gconvert='gcvt((x),(n),(b))' ;;
	qgcvt) d_Gconvert='qgcvt((x),(n),(b))' ;;
	*) case "$uselongdouble$d_longdbl$d_PRIgldbl" in
	   "$define$define$define")
	      d_Gconvert="sprintf((b),\"%.*$sPRIgldbl\",(n),(x))" ;;
	   *) d_Gconvert='sprintf((b),"%.*g",(n),(x))' ;;
	   esac
	   ;;  
	esac
a6204 4
: see if accessx exists
set accessx d_accessx
eval $inlibc

a6208 8
: see if atolf exists
set atolf d_atolf
eval $inlibc

: see if atoll exists
set atoll d_atoll
eval $inlibc

d6230 13
a6242 75
$rm -f attrib*

: see if bcmp exists
set bcmp d_bcmp
eval $inlibc

: see if bcopy exists
set bcopy d_bcopy
eval $inlibc

: see if this is a unistd.h system
set unistd.h i_unistd
eval $inhdr

: see if getpgrp exists
set getpgrp d_getpgrp
eval $inlibc

case "$d_getpgrp" in
"$define")
	echo " "
	echo "Checking to see which flavor of getpgrp is in use..."
	$cat >set.c <<EOP
#$i_unistd I_UNISTD
#include <sys/types.h>
#ifdef I_UNISTD
#  include <unistd.h>
#endif
int main()
{
	if (getuid() == 0) {
		printf("(I see you are running Configure as super-user...)\n");
		setuid(1);
	}
#ifdef TRY_BSD_PGRP
	if (getpgrp(1) == 0)
		exit(0);
#else
	if (getpgrp() > 0)
		exit(0);
#endif
	exit(1);
}
EOP
	if $cc -DTRY_BSD_PGRP $ccflags $ldflags -o set set.c $libs >/dev/null 2>&1 && ./set; then
		echo "You have to use getpgrp(pid) instead of getpgrp()." >&4
		val="$define"
	elif $cc $ccflags $ldflags -o set set.c $libs >/dev/null 2>&1 && ./set; then
		echo "You have to use getpgrp() instead of getpgrp(pid)." >&4
		val="$undef"
	else
		echo "I can't seem to compile and run the test program."
		if ./usg; then
			xxx="a USG one, i.e. you use getpgrp()."
		else
			# SVR4 systems can appear rather BSD-ish.
			case "$i_unistd" in
			$undef)
				xxx="a BSD one, i.e. you use getpgrp(pid)."
				val="$define"
				;;
			$define)
				xxx="probably a USG one, i.e. you use getpgrp()."
				val="$undef"
				;;
			esac
		fi
		echo "Assuming your getpgrp is $xxx" >&4
	fi
	;;
*) val="$undef";;
esac
set d_bsdgetpgrp
eval $setvar
$rm -f set set.c
d6244 2
a6245 2
: see if setpgrp exists
set setpgrp d_setpgrp
d6248 1
a6248 1
case "$d_setpgrp" in
d6251 1
a6251 1
	echo "Checking to see which flavor of setpgrp is in use..."
d6265 1
a6265 1
	if (-1 == setpgrp(1, 1))
d6268 1
a6268 1
	if (setpgrp() != -1)
d6275 1
a6275 1
		echo 'You have to use setpgrp(pid,pgrp) instead of setpgrp().' >&4
d6278 1
a6278 1
		echo 'You have to use setpgrp() instead of setpgrp(pid,pgrp).' >&4
d6281 1
a6281 1
		echo "(I can't seem to compile and run the test program.)"
d6283 1
a6283 1
			xxx="a USG one, i.e. you use setpgrp()."
d6288 1
a6288 1
				xxx="a BSD one, i.e. you use setpgrp(pid,pgrp)."
d6292 1
a6292 1
				xxx="probably a USG one, i.e. you use setpgrp()."
d6297 1
a6297 1
		echo "Assuming your setpgrp is $xxx" >&4
d6302 1
a6302 1
set d_bsdsetpgrp
d6305 3
a6307 2
: see if bzero exists
set bzero d_bzero
d6310 11
a6320 211
: see if signal is declared as pointer to function returning int or void
echo " "
xxx=`./findhdr signal.h`
$test "$xxx" && $cppstdin $cppminus $cppflags < $xxx >$$.tmp 2>/dev/null
if $contains 'int.*\*[ 	]*signal' $$.tmp >/dev/null 2>&1 ; then
	echo "You have int (*signal())() instead of void." >&4
	val="$undef"
elif $contains 'void.*\*[ 	]*signal' $$.tmp >/dev/null 2>&1 ; then
	echo "You have void (*signal())()." >&4
	val="$define"
elif $contains 'extern[ 	]*[(\*]*signal' $$.tmp >/dev/null 2>&1 ; then
	echo "You have int (*signal())() instead of void." >&4
	val="$undef"
elif $contains 'void.*\*.*sig' $$.tmp >/dev/null 2>&1 ; then
	echo "You have void (*signal())()." >&4
	val="$define"
else
	case "$d_voidsig" in
	'')
	echo "I can't determine whether signal handler returns void or int..." >&4
		dflt=void
		rp="What type does your signal handler return?"
		. ./myread
		case "$ans" in
		v*) val="$define";;
		*) val="$undef";;
		esac;;
	"$define")
		echo "As you already told me, signal handler returns void." >&4
		val="$define"
		;;
	*)	echo "As you already told me, signal handler returns int." >&4
		val="$undef"
		;;
	esac
fi
set d_voidsig
eval $setvar
case "$d_voidsig" in
"$define") signal_t="void";;
*) signal_t="int";;
esac
$rm -f $$.tmp

: check for ability to cast large floats to 32-bit ints.
echo " "
echo 'Checking whether your C compiler can cast large floats to int32.' >&4
if $test "$intsize" -ge 4; then
	xxx=int
else
	xxx=long
fi
$cat >try.c <<EOCP
#include <stdio.h>
#include <sys/types.h>
#include <signal.h>
$signal_t blech(s) int s; { exit(3); }
int main()
{
	$xxx i32;
	double f, g;
	int result = 0;
	char str[16];
	signal(SIGFPE, blech);

	/* Don't let compiler optimize the test away.  Store the number 
	   in a writable string for gcc to pass to sscanf under HP/UX.
	*/
	sprintf(str, "2147483647");
	sscanf(str, "%lf", &f); /* f = (double) 0x7fffffff; */
	g = 10 * f;
	i32  = ($xxx) g;

	/* x86 processors will probably give 0x8000 0000, which is a
       sign change.  We don't want that.  We want to mimic SPARC
	   behavior here, which is to preserve the sign and give
	   back 0x7fff ffff.
	*/
	if (i32 != ($xxx) f)
		result |= 1;
	exit(result);
}
EOCP
set try
if eval $compile_ok; then
	./try
	yyy=$?
else
	echo "(I can't seem to compile the test program--assuming it can't)"
	yyy=1
fi
case "$yyy" in
0)	val="$define"
	echo "Yup, it can."
	;;
*)	val="$undef"
	echo "Nope, it can't."
	;;
esac
set d_casti32
eval $setvar
$rm -f try try.*

: check for ability to cast negative floats to unsigned
echo " "
echo 'Checking whether your C compiler can cast negative float to unsigned.' >&4
$cat >try.c <<EOCP
#include <stdio.h>
#include <sys/types.h>
#include <signal.h>
$signal_t blech(s) int s; { exit(7); }
$signal_t blech_in_list(s) int s; { exit(4); }
unsigned long dummy_long(p) unsigned long p; { return p; }
unsigned int dummy_int(p) unsigned int p; { return p; }
unsigned short dummy_short(p) unsigned short p; { return p; }
int main()
{
	double f;
	unsigned long along;
	unsigned int aint;
	unsigned short ashort;
	int result = 0;
	char str[16];
	
	/* Frustrate gcc-2.7.2's optimizer which failed this test with
	   a direct f = -123. assignment.  gcc-2.8.0 reportedly
	   optimized the whole file away
	*/
	/* Store the number in a writable string for gcc to pass to 
	   sscanf under HP/UX.
	*/
	sprintf(str, "-123");
	sscanf(str, "%lf", &f);  /* f = -123.; */

	signal(SIGFPE, blech);
	along = (unsigned long)f;
	aint = (unsigned int)f;
	ashort = (unsigned short)f;
	if (along != (unsigned long)-123)
		result |= 1;
	if (aint != (unsigned int)-123)
		result |= 1;
	if (ashort != (unsigned short)-123)
		result |= 1;
	sprintf(str, "1073741824.");
	sscanf(str, "%lf", &f); /* f = (double)0x40000000; */
	f = f + f;
	along = 0;
	along = (unsigned long)f;
	if (along != 0x80000000)
		result |= 2;
	f -= 1.;
	along = 0;
	along = (unsigned long)f;
	if (along != 0x7fffffff)
		result |= 1;
	f += 2.;
	along = 0;
	along = (unsigned long)f;
	if (along != 0x80000001)
		result |= 2;
	if (result)
		exit(result);
	signal(SIGFPE, blech_in_list);
	sprintf(str, "123.");
	sscanf(str, "%lf", &f);  /* f = 123.; */
	along = dummy_long((unsigned long)f);
	aint = dummy_int((unsigned int)f);
	ashort = dummy_short((unsigned short)f);
	if (along != (unsigned long)123)
		result |= 4;
	if (aint != (unsigned int)123)
		result |= 4;
	if (ashort != (unsigned short)123)
		result |= 4;
	exit(result);

}
EOCP
set try
if eval $compile_ok; then
	./try
	castflags=$?
else
	echo "(I can't seem to compile the test program--assuming it can't)"
	castflags=7
fi
case "$castflags" in
0)	val="$define"
	echo "Yup, it can."
	;;
*)	val="$undef"
	echo "Nope, it can't."
	;;
esac
set d_castneg
eval $setvar
$rm -f try.*

: see if vprintf exists
echo " "
if set vprintf val -f d_vprintf; eval $csym; $val; then
	echo 'vprintf() found.' >&4
	val="$define"
	$cat >vprintf.c <<'EOF'
#include <varargs.h>

int main() { xxx("foo"); }

xxx(va_alist)
va_dcl
d6322 12
a6333 5
	va_list args;
	char buf[10];

	va_start(args);
	exit((unsigned long)vsprintf(buf,"%s",args) > 10L);
d6335 7
a6341 5
EOF
	set vprintf
	if eval $compile && ./vprintf; then
		echo "Your vsprintf() returns (int)." >&4
		val2="$undef"
d6343 17
a6359 2
		echo "Your vsprintf() returns (char*)." >&4
		val2="$define"
d6361 4
a6364 6
else
	echo 'vprintf() NOT found.' >&4
		val="$undef"
		val2="$undef"
fi
set d_vprintf
d6366 3
a6368 6
val=$val2
set d_charvspr
eval $setvar

: see if chown exists
set chown d_chown
d6371 1
a6371 9
: see if chroot exists
set chroot d_chroot
eval $inlibc

: see if chsize exists
set chsize d_chsize
eval $inlibc

: check for const keyword
d6373 5
a6377 3
echo 'Checking to see if your C compiler knows about "const"...' >&4
$cat >const.c <<'EOCP'
typedef struct spug { int drokk; } spug;
d6380 4
a6383 2
	const char *foo;
	const spug y;
d6386 6
a6391 20
if $cc -c $ccflags const.c >/dev/null 2>&1 ; then
	val="$define"
	echo "Yup, it does."
else
	val="$undef"
	echo "Nope, it doesn't."
fi
set d_const
eval $setvar

: see if crypt exists
echo " "
if set crypt val -f d_crypt; eval $csym; $val; then
	echo 'crypt() found.' >&4
	val="$define"
	cryptlib=''
else
	cryptlib=`./loc Slibcrypt$_a "" $xlibpth`
	if $test -z "$cryptlib"; then
		cryptlib=`./loc Mlibcrypt$_a "" $xlibpth`
d6393 19
a6411 1
		cryptlib=-lcrypt
d6413 1
a6413 30
	if $test -z "$cryptlib"; then
		cryptlib=`./loc Llibcrypt$_a "" $xlibpth`
	else
		cryptlib=-lcrypt
	fi
	if $test -z "$cryptlib"; then
		cryptlib=`./loc libcrypt$_a "" $libpth`
	else
		cryptlib=-lcrypt
	fi
	if $test -z "$cryptlib"; then
		echo 'crypt() NOT found.' >&4
		val="$undef"
	else
		val="$define"
	fi
fi
set d_crypt
eval $setvar

: get csh whereabouts
case "$csh" in
'csh') val="$undef" ;;
*) val="$define" ;;
esac
set d_csh
eval $setvar
: Respect a hint or command line value for full_csh.
case "$full_csh" in
'') full_csh=$csh ;;
d6415 1
d6417 1
a6417 13
: see if cuserid exists
set cuserid d_cuserid
eval $inlibc

: see if this is a limits.h system
set limits.h i_limits
eval $inhdr

: see if this is a float.h system
set float.h i_float
eval $inhdr

: See if number of significant digits in a double precision number is known
d6419 7
a6425 16
$cat >dbl_dig.c <<EOM
#$i_limits I_LIMITS
#$i_float I_FLOAT
#ifdef I_LIMITS
#include <limits.h>
#endif
#ifdef I_FLOAT
#include <float.h>
#endif
#ifdef DBL_DIG
printf("Contains DBL_DIG");
#endif
EOM
$cppstdin $cppflags $cppminus < dbl_dig.c >dbl_dig.E 2>/dev/null
if $contains 'DBL_DIG' dbl_dig.E >/dev/null 2>&1; then
	echo "DBL_DIG found." >&4
d6427 2
a6428 2
else
	echo "DBL_DIG NOT found." >&4
d6430 2
a6431 12
fi
$rm -f dbl_dig.?
set d_dbl_dig
eval $setvar

: see if difftime exists
set difftime d_difftime
eval $inlibc

: see if this is a dirent system
echo " "
if xinc=`./findhdr dirent.h`; $test "$xinc"; then
a6432 1
	echo "<dirent.h> found." >&4
d6434 18
a6451 8
	val="$undef"
	if xinc=`./findhdr sys/dir.h`; $test "$xinc"; then
		echo "<sys/dir.h> found." >&4
		echo " "
	else
		xinc=`./findhdr sys/ndir.h`
	fi
	echo "<dirent.h> NOT found." >&4
d6453 1
a6453 1
set i_dirent
d6455 5
d6461 1
a6461 1
: Look for type of directory structure.
d6463 3
a6465 24
$cppstdin $cppflags $cppminus < "$xinc" > try.c

case "$direntrytype" in
''|' ')
	case "$i_dirent" in
	$define) guess1='struct dirent' ;;
	*) guess1='struct direct'  ;;
	esac
	;;
*)	guess1="$direntrytype"
	;;
esac

case "$guess1" in
'struct dirent') guess2='struct direct' ;;
*) guess2='struct dirent' ;;
esac
		
if $contains "$guess1" try.c >/dev/null 2>&1; then
	direntrytype="$guess1"
	echo "Your directory entries are $direntrytype." >&4
elif $contains "$guess2" try.c >/dev/null 2>&1; then
	direntrytype="$guess2"
	echo "Your directory entries seem to be $direntrytype." >&4
d6467 1
a6467 5
	echo "I don't recognize your system's directory entries." >&4
	rp="What type is used for directory entries on this system?"
	dflt="$guess1"
	. ./myread
	direntrytype="$ans"
d6469 12
a6480 1
$rm -f try.c
d6482 7
d6490 14
a6503 6
: see if the directory entry stores field length
echo " "
$cppstdin $cppflags $cppminus < "$xinc" > try.c
if $contains 'd_namlen' try.c >/dev/null 2>&1; then
	echo "Good, your directory entry keeps length information in d_namlen." >&4
	val="$define"
d6505 2
a6506 2
	echo "Your directory entry does not know about the d_namlen field." >&4
	val="$undef"
d6508 3
a6510 31
set d_dirnamlen
eval $setvar
$rm -f try.c

: see if dlerror exists
xxx_runnm="$runnm"
runnm=false
set dlerror d_dlerror
eval $inlibc
runnm="$xxx_runnm"

: see if dlfcn is available
set dlfcn.h i_dlfcn
eval $inhdr

case "$usedl" in
$define|y|true)
	$cat << EOM

On a few systems, the dynamically loaded modules that perl generates and uses
will need a different extension than shared libs. The default will probably
be appropriate.

EOM
	case "$dlext" in
	'')	dflt="$so" ;;
	*)	dflt="$dlext" ;;
	esac
	rp='What is the extension of dynamically loaded modules'
	. ./myread
	dlext="$ans"
d6512 2
a6513 2
*)
	dlext="none"
d6516 3
d6520 1
a6520 1
: Check if dlsym need a leading underscore
d6522 2
a6523 11
val="$undef"

case "$dlsrc" in
dl_dlopen.xs)
	echo "Checking whether your dlsym() needs a leading underscore ..." >&4
	$cat >dyna.c <<'EOM'
fred () { }
EOM

$cat >fred.c<<EOM

a6524 4
#$i_dlfcn I_DLFCN
#ifdef I_DLFCN
#include <dlfcn.h>      /* the dynamic linker include file for Sunos/Solaris */
#else
d6526 24
a6549 3
#include <nlist.h>
#include <link.h>
#endif
d6551 42
a6592 1
extern int fred() ;
d6594 16
a6609 51
int main()
{
    void * handle ;
    void * symbol ;
#ifndef RTLD_LAZY
    int mode = 1 ;
#else
    int mode = RTLD_LAZY ;
#endif
    handle = dlopen("./dyna.$dlext", mode) ;
    if (handle == NULL) {
	printf ("1\n") ;
	fflush (stdout) ;
	exit(0);
    }
    symbol = dlsym(handle, "fred") ;
    if (symbol == NULL) {
	/* try putting a leading underscore */
	symbol = dlsym(handle, "_fred") ;
	if (symbol == NULL) {
	    printf ("2\n") ;
	    fflush (stdout) ;
	    exit(0);
	}
	printf ("3\n") ;
    }
    else
	printf ("4\n") ;
    fflush (stdout) ;
    exit(0);
}
EOM
	: Call the object file tmp-dyna.o in case dlext=o.
	if $cc $ccflags $cccdlflags -c dyna.c > /dev/null 2>&1 && 
		mv dyna${_o} tmp-dyna${_o} > /dev/null 2>&1 && 
		$ld $lddlflags -o dyna.$dlext tmp-dyna${_o} > /dev/null 2>&1 && 
		$cc $ccflags -o fred $ldflags $cccdlflags $ccdlflags fred.c $libs > /dev/null 2>&1; then
		xxx=`./fred`
		case $xxx in
		1)	echo "Test program failed using dlopen." >&4
			echo "Perhaps you should not use dynamic loading." >&4;;
		2)	echo "Test program failed using dlsym." >&4
			echo "Perhaps you should not use dynamic loading." >&4;;
		3)	echo "dlsym needs a leading underscore" >&4
			val="$define" ;;
		4)	echo "dlsym doesn't need a leading underscore." >&4;;
		esac
	else
		echo "I can't compile and run the test program." >&4
                echo "I'm guessing that dlsym doesn't need a leading underscore." >&4
	fi
d6612 1
a6612 4
		
$rm -f fred fred.? dyna.$dlext dyna.? tmp-dyna.?

set d_dlsymun
d6614 1
d6616 1
a6616 20
hasproto='varname=$1; func=$2; shift; shift;
while $test $# -ge 2; do
	case "$1" in
	$define) echo "#include <$2>";;
	esac ;
    shift 2;
done > try.c;
$cppstdin $cppflags $cppminus < try.c > tryout.c 2>/dev/null;
if $contains "$func.*(" tryout.c >/dev/null 2>&1; then
	echo "$func() prototype found.";
	val="$define";
else
	echo "$func() prototype NOT found.";
	val="$undef";
fi;
set $varname;
eval $setvar;
$rm -f try.c tryout.c'

: see if prototype for drand48 is available
d6618 5
a6622 2
set d_drand48proto drand48 $i_stdlib stdlib.h $i_unistd unistd.h
eval $hasproto
d6624 1
a6624 3
: see if dup2 exists
set dup2 d_dup2
eval $inlibc
d6626 5
a6630 3
: see if eaccess exists
set eaccess d_eaccess
eval $inlibc
d6632 22
a6653 3
: see if endgrent exists
set endgrent d_endgrent
eval $inlibc
d6655 2
a6656 2
: see if endhostent exists
set endhostent d_endhent
d6659 2
a6660 2
: see if endnetent exists
set endnetent d_endnent
d6663 2
a6664 2
: see if endprotoent exists
set endprotoent d_endpent
d6667 1
a6667 13
: see if endpwent exists
set endpwent d_endpwent
eval $inlibc

: see if endservent exists
set endservent d_endsent
eval $inlibc

: see if endspent exists
set endspent d_endspent
eval $inlibc

: Locate the flags for 'open()'
d6669 7
a6675 15
$cat >open3.c <<'EOCP'
#include <sys/types.h>
#ifdef I_FCNTL
#include <fcntl.h>
#endif
#ifdef I_SYS_FILE
#include <sys/file.h>
#endif
int main() {
	if(O_RDONLY);
#ifdef O_TRUNC
	exit(0);
#else
	exit(1);
#endif
d6678 3
a6680 23
: check sys/file.h first to get FREAD on Sun
if $test `./findhdr sys/file.h` && \
		set open3 -DI_SYS_FILE && eval $compile; then
	h_sysfile=true;
	echo "<sys/file.h> defines the O_* constants..." >&4
	if ./open3; then
		echo "and you have the 3 argument form of open()." >&4
		val="$define"
	else
		echo "but not the 3 argument form of open().  Oh, well." >&4
		val="$undef"
	fi
elif $test `./findhdr fcntl.h` && \
		set open3 -DI_FCNTL && eval $compile; then
	h_fcntl=true;
	echo "<fcntl.h> defines the O_* constants..." >&4
	if ./open3; then
		echo "and you have the 3 argument form of open()." >&4
		val="$define"
	else
		echo "but not the 3 argument form of open().  Oh, well." >&4
		val="$undef"
	fi
d6683 1
a6683 1
	echo "I can't find the O_* constant definitions!  You got problems." >&4
d6685 1
a6685 1
set d_open3
a6686 1
$rm -f open3*
d6688 1
a6688 1
: see which of string.h or strings.h is needed
d6690 2
a6691 3
strings=`./findhdr string.h`
if $test "$strings" && $test -r "$strings"; then
	echo "Using <string.h> instead of <strings.h>." >&4
d6693 1
d6695 19
a6713 4
	val="$undef"
	strings=`./findhdr strings.h`
	if $test "$strings" && $test -r "$strings"; then
		echo "Using <strings.h> instead of <string.h>." >&4
d6715 1
a6715 1
		echo "No string header found -- You'll surely have problems." >&4
d6718 1
a6718 1
set i_string
a6719 4
case "$i_string" in
"$undef") strings=`./findhdr strings.h`;;
*)	  strings=`./findhdr string.h`;;
esac
d6721 11
a6731 47
: check for non-blocking I/O stuff
case "$h_sysfile" in
true) echo "#include <sys/file.h>" > head.c;;
*)
	case "$h_fcntl" in
	true) echo "#include <fcntl.h>" > head.c;;
	*) echo "#include <sys/fcntl.h>" > head.c;;
	esac
	;;
esac
echo " "
echo "Figuring out the flag used by open() for non-blocking I/O..." >&4
case "$o_nonblock" in
'')
	$cat head.c > try.c
	$cat >>try.c <<'EOCP'
#include <stdio.h>
int main() {
#ifdef O_NONBLOCK
	printf("O_NONBLOCK\n");
	exit(0);
#endif
#ifdef O_NDELAY
	printf("O_NDELAY\n");
	exit(0);
#endif
#ifdef FNDELAY
	printf("FNDELAY\n");
	exit(0);
#endif
	exit(0);
}
EOCP
	set try
	if eval $compile_ok; then
		o_nonblock=`./try`
		case "$o_nonblock" in
		'') echo "I can't figure it out, assuming O_NONBLOCK will do.";;
		*) echo "Seems like we can use $o_nonblock.";;
		esac
	else
		echo "(I can't compile the test program; pray O_NONBLOCK is right!)"
	fi
	;;
*) echo "Using $hint value $o_nonblock.";;
esac
$rm -f try try.* .out core
d6733 1
d6735 5
a6739 12
echo "Let's see what value errno gets from read() on a $o_nonblock file..." >&4
case "$eagain" in
'')
	$cat head.c > try.c
	$cat >>try.c <<EOCP
#include <errno.h>
#include <sys/types.h>
#include <signal.h>
#include <stdio.h> 
#define MY_O_NONBLOCK $o_nonblock
#ifndef errno  /* XXX need better Configure test */
extern int errno;
d6741 2
a6742 3
#$i_unistd I_UNISTD
#ifdef I_UNISTD
#include <unistd.h>
d6744 2
a6745 5
#$i_string I_STRING
#ifdef I_STRING
#include <string.h>
#else
#include <strings.h>
d6747 16
a6762 9
$signal_t blech(x) int x; { exit(3); }
EOCP
	$cat >> try.c <<'EOCP'
int main()
{
	int pd[2];
	int pu[2];
	char buf[1];
	char string[100];
d6764 3
a6766 35
	pipe(pd);	/* Down: child -> parent */
	pipe(pu);	/* Up: parent -> child */
	if (0 != fork()) {
		int ret;
		close(pd[1]);	/* Parent reads from pd[0] */
		close(pu[0]);	/* Parent writes (blocking) to pu[1] */
		if (-1 == fcntl(pd[0], F_SETFL, MY_O_NONBLOCK))
			exit(1);
		signal(SIGALRM, blech);
		alarm(5);
		if ((ret = read(pd[0], buf, 1)) > 0)	/* Nothing to read! */
			exit(2);
		sprintf(string, "%d\n", ret);
		write(2, string, strlen(string));
		alarm(0);
#ifdef EAGAIN
		if (errno == EAGAIN) {
			printf("EAGAIN\n");
			goto ok;
		}
#endif
#ifdef EWOULDBLOCK
		if (errno == EWOULDBLOCK)
			printf("EWOULDBLOCK\n");
#endif
	ok:
		write(pu[1], buf, 1);	/* Unblocks child, tell it to close our pipe */
		sleep(2);				/* Give it time to close our pipe */
		alarm(5);
		ret = read(pd[0], buf, 1);	/* Should read EOF */
		alarm(0);
		sprintf(string, "%d\n", ret);
		write(3, string, strlen(string));
		exit(0);
	}
d6768 10
a6777 49
	close(pd[0]);			/* We write to pd[1] */
	close(pu[1]);			/* We read from pu[0] */
	read(pu[0], buf, 1);	/* Wait for parent to signal us we may continue */
	close(pd[1]);			/* Pipe pd is now fully closed! */
	exit(0);				/* Bye bye, thank you for playing! */
}
EOCP
	set try
	if eval $compile_ok; then
		echo "$startsh" >mtry
		echo "./try >try.out 2>try.ret 3>try.err || exit 4" >>mtry
		chmod +x mtry
		./mtry >/dev/null 2>&1
		case $? in
		0) eagain=`$cat try.out`;;
		1) echo "Could not perform non-blocking setting!";;
		2) echo "I did a successful read() for something that was not there!";;
		3) echo "Hmm... non-blocking I/O does not seem to be working!";;
		*) echo "Something terribly wrong happened during testing.";;
		esac
		rd_nodata=`$cat try.ret`
		echo "A read() system call with no data present returns $rd_nodata."
		case "$rd_nodata" in
		0|-1) ;;
		*)
			echo "(That's peculiar, fixing that to be -1.)"
			rd_nodata=-1
			;;
		esac
		case "$eagain" in
		'')
			echo "Forcing errno EAGAIN on read() with no data available."
			eagain=EAGAIN
			;;
		*)
			echo "Your read() sets errno to $eagain when no data is available."
			;;
		esac
		status=`$cat try.err`
		case "$status" in
		0) echo "And it correctly returns 0 to signal EOF.";;
		-1) echo "But it also returns -1 to signal EOF, so be careful!";;
		*) echo "However, your read() returns '$status' on EOF??";;
		esac
		val="$define"
		if test "$status" = "$rd_nodata"; then
			echo "WARNING: you can't distinguish between EOF and no data!"
			val="$undef"
		fi
d6779 1
a6779 2
		echo "I can't compile the test program--assuming errno EAGAIN will do."
		eagain=EAGAIN
d6781 15
a6795 2
	set d_eofnblk
	eval $setvar
d6797 1
a6797 11
*)
	echo "Using $hint value $eagain."
	echo "Your read() returns $rd_nodata when no data is present."
	case "$d_eofnblk" in
	"$define") echo "And you can see EOF because read() returns 0.";;
	"$undef") echo "But you can't see EOF status from read() returned value.";;
	*)
		echo "(Assuming you can't see EOF status from read anyway.)"
		d_eofnblk=$undef
		;;
	esac
a6799 1
$rm -f try try.* .out core head.c mtry
d6801 19
a6819 3
: see if fchmod exists
set fchmod d_fchmod
eval $inlibc
a6820 3
: see if fchown exists
set fchown d_fchown
eval $inlibc
d6822 13
a6834 3
: see if this is an fcntl system
set fcntl d_fcntl
eval $inlibc
d6843 2
a6844 3
echo "int main () { struct $struct foo; char* bar; bar = (char*)foo.$field; }" >> try.c;
set try;
if eval $compile; then
d6847 5
a6851 64
	val="$undef";
fi;
set $varname;
eval $setvar;
$rm -f try.c try.o'

socketlib=''
sockethdr=''
: see whether socket exists
echo " "
$echo $n "Hmm... $c" >&4
if set socket val -f d_socket; eval $csym; $val; then
	echo "Looks like you have Berkeley networking support." >&4
	d_socket="$define"
	if set setsockopt val -f; eval $csym; $val; then
		d_oldsock="$undef"
	else
		echo "...but it uses the old BSD 4.1c interface, rather than 4.2." >&4
		d_oldsock="$define"
	fi
else
	if $contains socklib libc.list >/dev/null 2>&1; then
		echo "Looks like you have Berkeley networking support." >&4
		d_socket="$define"
		: we will have to assume that it supports the 4.2 BSD interface
		d_oldsock="$undef"
	else
		echo "You don't have Berkeley networking in libc$_a..." >&4
		if test "X$d_socket" = "X$define"; then
		   echo "...but you seem to believe that you have sockets." >&4
		else
			for net in net socket
			do
				if test -f /usr/lib/lib$net$_a; then
					( ($nm $nm_opt /usr/lib/lib$net$_a | eval $nm_extract) ||  \
					$ar t /usr/lib/lib$net$_a) 2>/dev/null >> libc.list
					if $contains socket libc.list >/dev/null 2>&1; then
						d_socket="$define"
						socketlib="-l$net"
						case "$net" in
						net)
							echo "...but the Wollongong group seems to have hacked it in." >&4
							sockethdr="-I/usr/netinclude"
							;;
						esac
						echo "Found Berkeley sockets interface in lib$net." >& 4 
						if $contains setsockopt libc.list >/dev/null 2>&1; then
							d_oldsock="$undef"
						else
							echo "...using the old BSD 4.1c interface, rather than 4.2." >&4
							d_oldsock="$define"
						fi
						break
					fi
				fi
			done
			if test "X$d_socket" != "X$define"; then
			   echo "or anywhere else I see." >&4
			   d_socket="$undef"
			   d_oldsock="$undef"
			fi
		fi
	fi
fi
d6853 4
a6856 2
: see if socketpair exists
set socketpair d_sockpair
d6858 1
d6860 3
d6864 3
a6866 18
echo " "
echo "Checking the availability of certain socket constants..." >& 4
for ENUM in MSG_CTRUNC MSG_DONTROUTE MSG_OOB MSG_PEEK MSG_PROXY SCM_RIGHTS; do
	enum=`$echo $ENUM|./tr '[A-Z]' '[a-z]'`
	$cat >try.c <<EOF
#include <sys/types.h>
#include <sys/socket.h>
int main() {
    int i = $ENUM;
}
EOF
	val="$undef"
	set try; if eval $compile; then
		val="$define"
	fi
	set d_${enum}; eval $setvar
	$rm -f try.c try
done
d6868 3
a6870 3
: see if sys/select.h has to be included
set sys/select.h i_sysselct
eval $inhdr
d6872 4
a6875 68
: see if we should include time.h, sys/time.h, or both
echo " "
if test "X$timeincl" = X; then
	echo "Testing to see if we should include <time.h>, <sys/time.h> or both." >&4
	$echo $n "I'm now running the test program...$c"
	$cat >try.c <<'EOCP'
#include <sys/types.h>
#ifdef I_TIME
#include <time.h>
#endif
#ifdef I_SYSTIME
#ifdef SYSTIMEKERNEL
#define KERNEL
#endif
#include <sys/time.h>
#endif
#ifdef I_SYSSELECT
#include <sys/select.h>
#endif
int main()
{
	struct tm foo;
#ifdef S_TIMEVAL
	struct timeval bar;
#endif
#ifdef S_TIMEZONE
	struct timezone tzp;
#endif
	if (foo.tm_sec == foo.tm_sec)
		exit(0);
#ifdef S_TIMEVAL
	if (bar.tv_sec == bar.tv_sec)
		exit(0);
#endif
	exit(1);
}
EOCP
	flags=''
	for s_timezone in '-DS_TIMEZONE' ''; do
	sysselect=''
	for s_timeval in '-DS_TIMEVAL' ''; do
	for i_systimek in '' '-DSYSTIMEKERNEL'; do
	for i_time in '' '-DI_TIME'; do
	for i_systime in '-DI_SYSTIME' ''; do
		case "$flags" in
		'') $echo $n ".$c"
			set try $i_time $i_systime $i_systimek $sysselect $s_timeval $s_timezone
			if eval $compile; then
				set X $i_time $i_systime $i_systimek $sysselect $s_timeval
				shift
				flags="$*"
				echo " "
				$echo $n "Succeeded with $flags$c"
			fi
			;;
		esac
	done
	done
	done
	done
	done
	timeincl=''
	echo " "
	case "$flags" in
	*SYSTIMEKERNEL*) i_systimek="$define"
		timeincl=`./findhdr sys/time.h`
		echo "We'll include <sys/time.h> with KERNEL defined." >&4;;
	*) i_systimek="$undef";;
d6877 8
a6884 14
	case "$flags" in
	*I_TIME*) i_time="$define"
		timeincl=`./findhdr time.h`" $timeincl"
		echo "We'll include <time.h>." >&4;;
	*) i_time="$undef";;
	esac
	case "$flags" in
	*I_SYSTIME*) i_systime="$define"
		timeincl=`./findhdr sys/time.h`" $timeincl"
		echo "We'll include <sys/time.h>." >&4;;
	*) i_systime="$undef";;
	esac
	$rm -f try.c try
fi
d6886 3
a6888 2
: check for fd_set items
$cat <<EOM
d6890 5
a6894 1
Checking to see how well your C compiler handles fd_set and friends ...
d6896 8
a6903 4
$cat >fd_set.c <<EOCP
#$i_systime I_SYS_TIME
#$i_sysselct I_SYS_SELECT
#$d_socket HAS_SOCKET
d6905 2
a6906 8
#ifdef HAS_SOCKET
#include <sys/socket.h> /* Might include <sys/bsdtypes.h> */
#endif
#ifdef I_SYS_TIME
#include <sys/time.h>
#endif
#ifdef I_SYS_SELECT
#include <sys/select.h>
a6907 2
int main() {
	fd_set fds;
d6909 1
a6909 3
#ifdef TRYBITS
	if(fds.fds_bits);
#endif
d6911 6
a6916 2
#if defined(FD_SET) && defined(FD_CLR) && defined(FD_ISSET) && defined(FD_ZERO)
	exit(0);
d6918 1
a6918 1
	exit(1);
d6920 21
a6941 12
EOCP
set fd_set -DTRYBITS
if eval $compile; then
	d_fds_bits="$define"
	d_fd_set="$define"
	echo "Well, your system knows about the normal fd_set typedef..." >&4
	if ./fd_set; then
		echo "and you have the normal fd_set macros (just as I'd expect)." >&4
		d_fd_macros="$define"
	else
		$cat >&4 <<'EOM'
but not the normal fd_set macros!  Gaaack!  I'll have to cover for you.
d6943 15
a6957 20
		d_fd_macros="$undef"
	fi
else
	$cat <<'EOM'
Hmm, your compiler has some difficulty with fd_set.  Checking further...
EOM
	set fd_set
	if eval $compile; then
		d_fds_bits="$undef"
		d_fd_set="$define"
		echo "Well, your system has some sort of fd_set available..." >&4
		if ./fd_set; then
			echo "and you have the normal fd_set macros." >&4
			d_fd_macros="$define"
		else
			$cat <<'EOM'
but not the normal fd_set macros!  Gross!  More work for me...
EOM
			d_fd_macros="$undef"
		fi
d6959 1
a6959 4
	echo "Well, you got zip.  That's OK, I can roll my own fd_set stuff." >&4
		d_fd_set="$undef"
		d_fds_bits="$undef"
		d_fd_macros="$undef"
d6961 4
a6964 2
fi
$rm -f fd_set*
d6966 2
a6967 3
: see if fgetpos exists
set fgetpos d_fgetpos
eval $inlibc
d6969 2
a6970 2
: see if flock exists
set flock d_flock
d6973 2
a6974 2
: see if fork exists
set fork d_fork
d6977 2
a6978 2
: see if pathconf exists
set pathconf d_pathconf
d6981 2
a6982 2
: see if fpathconf exists
set fpathconf d_fpathconf
d6985 3
d6989 1
a6989 1
: check for fpos64_t
d6991 16
a7006 4
echo "Checking to see if you have fpos64_t..." >&4
$cat >try.c <<EOCP
#include <stdio.h>
int main() { fpos64_t x = 7; }
d7008 23
a7030 4
set try
if eval $compile; then
	val="$define"
	echo "You have fpos64_t."
d7033 1
a7033 4
	echo "You do not have fpos64_t."
	case "$fpossize" in
	8) echo "(Your fpos_t is 64 bits, so you could use that.)" ;;
	esac
d7035 1
a7035 2
$rm -f try.* try
set d_fpos64_t
d7037 1
d7039 46
a7084 17
hasstruct='varname=$1; struct=$2; shift; shift;
while $test $# -ge 2; do
	case "$1" in
	$define) echo "#include <$2>";;
	esac ;
    shift 2;
done > try.c;
echo "int main () { struct $struct foo; }" >> try.c;
set try;
if eval $compile; then
	val="$define";
else
	val="$undef";
fi;
set $varname;
eval $setvar;
$rm -f try.c try.o'
d7086 22
a7107 3
: see if this is a sys/param system
set sys/param.h i_sysparam
eval $inhdr
d7109 35
a7143 3
: see if this is a sys/mount.h system
set sys/mount.h i_sysmount
eval $inhdr
d7145 68
a7212 12
: see if sys/types.h has to be included
set sys/types.h i_systypes
eval $inhdr


echo " "
echo "Checking to see if your system supports struct fs_data..." >&4
set d_fs_data_s fs_data $i_systypes sys/types.h $i_sysparam sys/param.h $i_sysmount sys/mount.h
eval $hasstruct
case "$d_fs_data_s" in
"$define")      echo "Yes, it does."   ;;
*)              echo "No, it doesn't." ;;
d7214 1
d7216 2
a7217 2
: see if fseeko exists
set fseeko d_fseeko
a7218 3
case "$longsize" in
8) echo "(Your long is 64 bits, so you could use fseek.)" ;;
esac
d7220 2
a7221 2
: see if fsetpos exists
set fsetpos d_fsetpos
d7224 2
a7225 3

: see if fstatfs exists
set fstatfs d_fstatfs
d7228 2
a7229 3

: see if statvfs exists
set statvfs d_statvfs
d7232 2
a7233 2
: see if fstatvfs exists
set fstatvfs d_fstatvfs
d7236 2
a7237 3

: see if ftello exists
set ftello d_ftello
a7238 3
case "$longsize" in
8) echo "(Your long is 64 bits, so you could use ftell.)" ;;
esac
d7240 2
a7241 2
: see if getcwd exists
set getcwd d_getcwd
d7244 2
a7245 3

: see if getfsstat exists
set getfsstat d_getfsstat
d7248 2
a7249 2
: see if getgrent exists
set getgrent d_getgrent
d7260 10
a7269 2
: see if gethostent exists
set gethostent d_gethent
d7272 1
a7272 1
: see how we will look up host name
d7274 10
a7283 12
call=''
if set gethostname val -f d_gethname; eval $csym; $val; then
	echo 'gethostname() found.' >&4
	d_gethname="$define"
	call=gethostname
fi
if set uname val -f d_uname; eval $csym; $val; then
	if ./xenix; then
		$cat <<'EOM'
uname() was found, but you're running xenix, and older versions of xenix
have a broken uname(). If you don't really know whether your xenix is old
enough to have a broken system call, use the default answer.
d7285 3
a7287 33
EOM
		dflt=y
		case "$d_uname" in
		"$define") dflt=n;;
		esac
		rp='Is your uname() broken?'
		. ./myread
		case "$ans" in
		n*) d_uname="$define"; call=uname;;
		esac
	else
		echo 'uname() found.' >&4
		d_uname="$define"
		case "$call" in
		'') call=uname ;;
		esac
	fi
fi
case "$d_gethname" in
'') d_gethname="$undef";;
esac
case "$d_uname" in
'') d_uname="$undef";;
esac
case "$d_uname$d_gethname" in
*define*)
	dflt=n
	cat <<EOM
 
Every now and then someone has a $call() that lies about the hostname
but can't be fixed for political or economic reasons.  If you wish, I can
pretend $call() isn't there and maybe compute hostname at run-time
thanks to the '$phostname' command.
d7289 18
a7306 35
EOM
	rp="Shall I ignore $call() from now on?"
	. ./myread
	case "$ans" in
	y*) d_uname="$undef" d_gethname="$undef"; $echo $n "Okay...$c";;
	esac;;
esac
case "$phostname" in
'') aphostname='';;
*) case "$aphostname" in
	/*) ;;
	*) set X $phostname
		shift
		file=$1
		shift
		file=`./loc $file $file $pth`
		aphostname=`echo $file $*`
		;;
	esac
	;;
esac
case "$d_uname$d_gethname" in
*define*) ;;
*)
	case "$phostname" in
	'')
		echo "There will be no way for $package to get your hostname." >&4;;
	*)
	echo "I'll use 'popen("'"'$aphostname'", "r")'"' to get your hostname." >&4
		;;
	esac;;
esac
case "$d_phostname" in
'') d_phostname="$undef";;
esac
a7320 8
: see if getmnt exists
set getmnt d_getmnt
eval $inlibc

: see if getmntent exists
set getmntent d_getmntent
eval $inlibc

d7351 12
a7383 5
: see if getpwent exists
set getpwent d_getpwent
eval $inlibc


a7400 8
: see if getspent exists
set getspent d_getspent
eval $inlibc

: see if getspnam exists
set getspnam d_getspnam
eval $inlibc

a7419 29
: see if this is an grp system
set grp.h i_grp
eval $inhdr

case "$i_grp" in
$define)
	xxx=`./findhdr grp.h`
	$cppstdin $cppflags $cppminus < $xxx >$$.h

	if $contains 'gr_passwd' $$.h >/dev/null 2>&1; then
		val="$define"
	else
		val="$undef"
	fi
	set d_grpasswd
	eval $setvar

	$rm -f $$.h
	;;
*)
	val="$undef";
	set d_grpasswd; eval $setvar
	;;
esac

: see if hasmntopt exists
set hasmntopt d_hasmntopt
eval $inlibc

d7466 21
a7486 3
: see if iconv exists
set iconv d_iconv
eval $inlibc
a7524 45
: see if inttypes.h is available
: we want a real compile instead of Inhdr because some systems
: have an inttypes.h which includes non-existent headers
echo " "
$cat >try.c <<EOCP
#include <inttypes.h>
int main() {
	static int32_t foo32 = 0x12345678;
}
EOCP
set try
if eval $compile; then
	echo "<inttypes.h> found." >&4
	val="$define"
else
	echo "<inttypes.h> NOT found." >&4
	val="$undef"
fi
$rm -f try.c try
set i_inttypes
eval $setvar

: check for int64_t
echo " "
echo "Checking to see if you have int64_t..." >&4
$cat >try.c <<EOCP
#include <sys/types.h>
#$i_inttypes I_INTTYPES
#ifdef I_INTTYPES
#include <inttypes.h>
#endif
int main() { int64_t x = 7; }
EOCP
set try
if eval $compile; then
	val="$define"
	echo "You have int64_t."
else
	val="$undef"
	echo "You do not have int64_t."
fi
$rm -f try try.*
set d_int64_t
eval $setvar

d7573 6
a7578 32
; return 0; }
EOCP
set try
if eval $compile; then
    $echo "lchown() found." >&4
    val="$define"
else
    $echo "lchown() NOT found." >&4
    val="$undef"
fi
set d_lchown
eval $setvar

: See if number of significant digits in a double precision number is known
echo " "
$cat >ldbl_dig.c <<EOM
#$i_limits I_LIMITS
#$i_float I_FLOAT
#ifdef I_LIMITS
#include <limits.h>
#endif
#ifdef I_FLOAT
#include <float.h>
#endif
#ifdef LDBL_DIG
printf("Contains LDBL_DIG");
#endif
EOM
$cppstdin $cppflags $cppminus < ldbl_dig.c >ldbl_dig.E 2>/dev/null
if $contains 'LDBL_DIG' ldbl_dig.E >/dev/null 2>&1; then
	echo "LDBL_DIG found." >&4
	val="$define"
d7580 2
a7581 2
	echo "LDBL_DIG NOT found." >&4
	val="$undef"
d7583 1
a7583 2
$rm -f ldbl_dig.?
set d_ldbl_dig
d7598 46
d7646 3
a7648 4
echo "Checking to see if you have long long..." >&4
echo 'int main() { long long x = 7; return 0; }' > try.c
set try
if eval $compile; then
d7650 1
a7650 1
	echo "You have have long long."
d7653 1
a7653 1
	echo "You do not have long long."
d7663 1
a7663 1
	echo "Checking to see how big your long longs are..." >&4
d7668 1
a7668 2
    printf("%d\n", (int)sizeof(long long));
    return(0);
d7673 2
a7674 2
		longlongsize=`./try$exe_ext`
		echo "Your long longs are $longlongsize bytes long."
d7688 1
a7688 6
$rm -f try.* try

: see if prototype for lseek is available
echo " "
set d_lseekproto lseek $i_systypes sys/types.h $i_unistd unistd.h
eval $hasproto
a7693 4
: see if madvise exists
set madvise d_madvise
eval $inlibc

a7705 4
: see if memchr exists
set memchr d_memchr
eval $inlibc

a7725 4
: see if mkdtemp exists
set mkdtemp d_mkdtemp
eval $inlibc

a7729 8
: see if mkstemp exists
set mkstemp d_mkstemp
eval $inlibc

: see if mkstemps exists
set mkstemps d_mkstemps
eval $inlibc

a7733 31
: see if this is a sys/mman.h system
set sys/mman.h i_sysmman
eval $inhdr

: see if mmap exists
set mmap d_mmap
eval $inlibc
: see what shmat returns
: default to something harmless
mmaptype='void *'
case "$i_sysmman$d_mmap" in
"$define$define")
	$cat >mmap.c <<'END'
#include <sys/mman.h>
void *mmap();
END
	if $cc $ccflags -c mmap.c >/dev/null 2>&1; then
		mmaptype='void *'
	else
		mmaptype='caddr_t'
	fi
	echo "and it returns ($mmaptype)." >&4
	;;
esac



: see if mprotect exists
set mprotect d_mprotect
eval $inlibc

a7785 8
: see if msync exists
set msync d_msync
eval $inlibc

: see if munmap exists
set munmap d_munmap
eval $inlibc

a7789 388

echo " "
echo "Checking which 64-bit integer type we could use..." >&4

case "$intsize" in
8) val=int
   set quadtype
   eval $setvar
   val='"unsigned int"'
   set uquadtype
   eval $setvar
   quadkind=1
   ;;
*) case "$longsize" in
   8) val=long
      set quadtype
      eval $setvar
      val='"unsigned long"'
      set uquadtype
      eval $setvar
      quadkind=2
      ;;
   *) case "$d_longlong:$longlongsize" in
      define:8)
        val='"long long"'
        set quadtype
        eval $setvar
        val='"unsigned long long"'
        set uquadtype
        eval $setvar
        quadkind=3
        ;;
      *) case "$d_int64_t" in
         define)
           val=int64_t
           set quadtype
           eval $setvar
           val=uint64_t
           set uquadtype
           eval $setvar
           quadkind=4
           ;;
         esac
         ;;
      esac
      ;;
   esac
   ;;
esac

case "$quadtype" in
'')	echo "Alas, no 64-bit integer types in sight." >&4
	d_quad="$undef"
	;;
*)	if test X"$use64bitint" = Xdefine -o X"$longsize" = X8; then
	    verb="will"
	else
	    verb="could"
	fi
	echo "We $verb use '$quadtype' for 64-bit integers." >&4
	d_quad="$define"
	;;
esac

: check for length of character
echo " "
case "$charsize" in
'')
	echo "Checking to see how big your characters are (hey, you never know)..." >&4
	$cat >try.c <<'EOCP'
#include <stdio.h>
int main()
{
    printf("%d\n", (int)sizeof(char));
    exit(0);
}
EOCP
	set try
	if eval $compile_ok; then
		dflt=`./try`
	else
		dflt='1'
		echo "(I can't seem to compile the test program.  Guessing...)"
	fi
	;;
*)
	dflt="$charsize"
	;;
esac
rp="What is the size of a character (in bytes)?"
. ./myread
charsize="$ans"
$rm -f try.c try


echo " "
$echo "Choosing the C types to be used for Perl's internal types..." >&4

case "$use64bitint:$d_quad:$quadtype" in
define:define:?*)
	ivtype="$quadtype"
	uvtype="$uquadtype"
	ivsize=8
	uvsize=8
	;;
*)	ivtype="long"
	uvtype="unsigned long"
	ivsize=$longsize
	uvsize=$longsize
	;;
esac

case "$uselongdouble:$d_longdbl" in
define:define)
	nvtype="long double"
	nvsize=$longdblsize
	;;
*)	nvtype=double
	nvsize=$doublesize
	;;
esac

$echo "(IV will be "$ivtype", $ivsize bytes)"
$echo "(UV will be "$uvtype", $uvsize bytes)"
$echo "(NV will be "$nvtype", $nvsize bytes)"

$cat >try.c <<EOCP
#$i_inttypes I_INTTYPES
#ifdef I_INTTYPES
#include <inttypes.h>
#endif
#include <stdio.h>
int main() {
#ifdef INT8
   int8_t i =  INT8_MAX;
  uint8_t u = UINT8_MAX;
  printf("int8_t\n");
#endif
#ifdef INT16
   int16_t i =  INT16_MAX;
  uint16_t i = UINT16_MAX;
  printf("int16_t\n");
#endif
#ifdef INT32
   int32_t i =  INT32_MAX;
  uint32_t u = UINT32_MAX;
  printf("int32_t\n");
#endif
}
EOCP

case "$i8type" in
'')	case "$charsize" in
	1)	i8type=char
		u8type="unsigned char"
		i8size=$charsize
		u8size=$charsize
		;;
	esac
	;;
esac
case "$i8type" in
'')	set try -DINT8
	if eval $compile; then
		case "`./try$exe_ext`" in
		int8_t)	i8type=int8_t
			u8type=uint8_t
			i8size=1
			u8size=1
			;;
		esac
	fi
	;;
esac
case "$i8type" in
'')	if $test $charsize -ge 1; then
		i8type=char
		u8type="unsigned char"
		i8size=$charsize
		u8size=$charsize
	fi
	;;
esac

case "$i16type" in
'')	case "$shortsize" in
	2)	i16type=short
		u16type="unsigned short"
		i16size=$shortsize
		u16size=$shortsize
		;;
	esac
	;;
esac
case "$i16type" in
'')	set try -DINT16
	if eval $compile; then
		case "`./try$exe_ext`" in
		int16_t)
			i16type=int16_t
			u16type=uint16_t
			i16size=2
			u16size=2
			;;
		esac
	fi
	;;
esac
case "$i16type" in
'')	if $test $shortsize -ge 2; then
		i16type=short
		u16type="unsigned short"
		i16size=$shortsize
		u16size=$shortsize
	fi
	;;
esac

case "$i32type" in
'')	case "$longsize" in
	4)	i32type=long
		u32type="unsigned long"
		i32size=$longsize
		u32size=$longsize
		;;
	*)	case "$intsize" in
		4)	i32type=int
			u32type="unsigned int"
			i32size=$intsize
			u32size=$intsize
			;;
		esac
		;;
	esac
	;;
esac
case "$i32type" in
'')	set try -DINT32
	if eval $compile; then
		case "`./try$exe_ext`" in
		int32_t)
			i32type=int32_t
			u32type=uint32_t
			i32size=4
			u32size=4
			;;
		esac
	fi
	;;
esac
case "$i32type" in
'')	if $test $intsize -ge 4; then
		i32type=int
		u32type="unsigned int"
		i32size=$intsize
		u32size=$intsize
	fi
	;;
esac

case "$i64type" in
'')	case "$d_quad:$quadtype" in
	define:?*)
		i64type="$quadtype"
		u64type="$uquadtype"
		i64size=8
		u64size=8
		;;
	esac
	;;
esac

$echo "Checking whether your NVs can preserve your UVs..." >&4
$cat <<EOP >try.c
#include <stdio.h>
int main() {
    $uvtype k = ($uvtype)~0, l;
    $nvtype d;
    l = k;
    d = ($nvtype)l;
    l = ($uvtype)d;
    if (l == k)
       printf("preserve\n");
    exit(0);
}
EOP
set try
if eval $compile; then
	case "`./try$exe_ext`" in
	preserve) d_nv_preserves_uv="$define" ;;
	esac
fi	
case "$d_nv_preserves_uv" in
$define) $echo "Yes, they can."  2>&1 ;;
*)	 $echo "No, they can't." 2>&1
	 d_nv_preserves_uv="$undef"
	 ;;
esac

$rm -f try.* try


: check for off64_t
echo " "
echo "Checking to see if you have off64_t..." >&4
$cat >try.c <<EOCP
#include <sys/types.h>
#include <unistd.h>
int main() { off64_t x = 7; }
EOCP
set try
if eval $compile; then
	val="$define"
	echo "You have off64_t."
else
	val="$undef"
	echo "You do not have off64_t."
	case "$lseeksize" in
	8) echo "(Your off_t is 64 bits, so you could use that.)" ;;
	esac
fi
$rm -f try.* try
set d_off64_t
eval $setvar

: see if POSIX threads are available
set pthread.h i_pthread
eval $inhdr




: how to create joinable pthreads
if test "X$usethreads" = "X$define" -a "X$i_pthread" = "X$define"; then
	echo " "
	echo "Checking what constant to use for creating joinable pthreads..." >&4 
	$cat >try.c <<'EOCP'
#include <pthread.h>
int main() {
    int detachstate = JOINABLE;
}
EOCP
	set try -DJOINABLE=PTHREAD_CREATE_JOINABLE
	if eval $compile; then
		echo "You seem to use PTHREAD_CREATE_JOINABLE." >&4
		val="$undef" # Yes, undef.
		set d_old_pthread_create_joinable
		eval $setvar
		val=""
		set old_pthread_create_joinable
		eval $setvar
	else
		set try -DJOINABLE=PTHREAD_CREATE_UNDETACHED
		if eval $compile; then
			echo "You seem to use PTHREAD_CREATE_UNDETACHED." >&4
			val="$define"
			set d_old_pthread_create_joinable
			eval $setvar
			val=PTHREAD_CREATE_UNDETACHED
			set old_pthread_create_joinable
			eval $setvar
		else		
			set try -DJOINABLE=__UNDETACHED
			if eval $compile; then
				echo "You seem to use __UNDETACHED." >&4
				val="$define"
				set d_old_pthread_create_joinable
				eval $setvar
				val=__UNDETACHED
				set old_pthread_create_joinable
				eval $setvar
			else
				echo "Egads, nothing obvious found.  Guessing that you use 0." >&4
				val="$define"
				set d_old_pthread_create_joinable
				eval $setvar
				val=0
				set old_pthread_create_joinable
				eval $setvar
			fi
		fi
	fi
	$rm -f try try.*
else
    d_old_pthread_create_joinable="$undef"
    old_pthread_create_joinable=""
fi

a7805 1
#include <stdio.h>
d7807 2
a7808 11
#ifdef SCHED_YIELD
	sched_yield();
#else
#ifdef PTHREAD_YIELD
	pthread_yield();
#else
#ifdef PTHREAD_YIELD_NULL
	pthread_yield(NULL);
#endif
#endif
#endif
d7811 3
a7813 2
: see if sched_yield exists
set try -DSCHED_YIELD
d7816 1
a7816 1
    sched_yield='sched_yield()'
d7819 1
d7821 1
a7821 8
case "$usethreads" in
$define)
	case "$val" in
	$define) echo 'sched_yield() found.' >&4	;;
	*)	 echo 'sched_yield() NOT found.' >&4	;;
	esac
esac
set d_sched_yield
d7824 3
a7826 2
: see if pthread_yield exists
set try -DPTHREAD_YIELD
d7829 1
a7829 3
    case "$sched_yield" in
    '') sched_yield='pthread_yield()' ;;
    esac
d7831 2
a7832 9
    set try -DPTHREAD_YIELD_NULL
    if eval $compile; then
	val="$define"
	case "$sched_yield" in
	'') sched_yield='pthread_yield(NULL)' ;;
	esac
    else
	val="$undef"
    fi
d7834 1
a7834 9
case "$usethreads" in
$define)
	case "$val" in
	$define) echo 'pthread_yield() found.' >&4	;;
	*)	 echo 'pthread_yield() NOT found.' >&4	;;
	esac
	;;
esac
set d_pthread_yield
d7836 5
d7842 3
a7844 3
case "$sched_yield" in
'') sched_yield=undef ;;
esac
d7846 39
a7884 1
$rm -f try try.*
d7892 12
d7973 1
a7973 1
*)
d7975 3
d8309 1
a8309 1
$rm -f try try.c try.h
a8349 1
#include "try.h"
d8402 1
a8402 1
	also='also'
a8414 1
#include "try.h"
d8417 1
d8459 1
a8459 1
        echo "You can $also use struct semid_ds* for semctl IPC_STAT." >&4
a8486 4
: see if setgrent exists
set setgrent d_setgrent
eval $inlibc

a8518 4
: see if setpwent exists
set setpwent d_setpwent
eval $inlibc

a8546 4
: see if setspent exists
set setspent d_setspent
eval $inlibc

d8659 1
a8659 1
	echo "Your $osname does not have the shm*(2) configured." >&4
a8695 4
    act.sa_flags = 0;
    oact.sa_handler = 0;
    /* so that act and oact are used */
    exit(act.sa_flags == 0 &&  oact.sa_handler == 0);
d8757 54
a8810 3
: see if sys/stat.h is available
set sys/stat.h i_sysstat
eval $inhdr
d8812 3
a8817 1
echo "Checking to see if your struct stat has st_blocks field..." >&4
a8820 40

: see if this is a sys/vfs.h system
set sys/vfs.h i_sysvfs
eval $inhdr


: see if this is a sys/statfs.h system
set sys/statfs.h i_sysstatfs
eval $inhdr


echo " "
echo "Checking to see if your system supports struct statfs..." >&4
set d_statfs_s statfs $i_systypes sys/types.h $i_sysparam sys/param.h $i_sysmount sys/mount.h $i_sysvfs sys/vfs.h $i_sysstatfs sys/statfs.h
eval $hasstruct
case "$d_statfs_s" in
"$define")      echo "Yes, it does."   ;;
*)              echo "No, it doesn't." ;;
esac



: see if struct statfs knows about f_flags
case "$d_statfs_s" in
define)	
	echo " "
	echo "Checking to see if your struct statfs has f_flags field..." >&4
	set d_statfs_f_flags statfs f_flags $i_systypes sys/types.h $i_sysparam sys/param.h $i_sysmount sys/mount.h $i_sysvfs sys/vfs.h $i_sysstatfs sys/statfs.h
	eval $hasfield
	;;
*)	val="$undef"
	set d_statfs_f_flags
	eval $setvar
	;;
esac
case "$d_statfs_f_flags" in
"$define")      echo "Yes, it does."   ;;
*)              echo "No, it doesn't." ;;
esac

d8823 1
a8823 1
if $contains '_IO_fpos_t' `./findhdr stdio.h` `./findhdr libio.h` >/dev/null 2>&1 ; then
a8947 35
$cat >&4 <<EOM
Checking how to access stdio streams by file descriptor number...
EOM
case "$stdio_stream_array" in
'') 	$cat >try.c <<EOCP
#include <stdio.h>
int main() {
  if (&STDIO_STREAM_ARRAY[fileno(stdin)] == stdin)
    printf("yes\n");
}
EOCP
	for s in _iob __iob __sF
	do
	        set try -DSTDIO_STREAM_ARRAY=$s
		if eval $compile; then
		    	case "`./try$exe_ext`" in
			yes)	stdio_stream_array=$s; break ;;
			esac
		fi
	done
	$rm -f try.* try$exe_ext
esac
case "$stdio_stream_array" in
'')	$cat >&4 <<EOM
I can't figure out how to access stdio streams by file descriptor number.
EOM
	d_stdio_stream_array="$undef"
	;;
*)	$cat >&4 <<EOM
You can access stdio streams by file descriptor number by the $stdio_stream_array array.
EOM
	d_stdio_stream_array="$define"
	;;
esac

d8980 10
a8989 10
		echo 'strerror() found.' >&4
		d_strerror="$define"
		d_strerrm='strerror(e)'
		if set sys_errlist val -a d_syserrlst; eval $csym; $val; then	
			echo "(You also have sys_errlist[], so we could roll our own strerror.)" 
			d_syserrlst="$define"
		else
			echo "(Since you don't have sys_errlist[], sterror() is welcome.)"
			d_syserrlst="$undef"
		fi
d8991 11
a9001 11
			$contains '#[ 	]*define.*strerror' "$xxx" >/dev/null 2>&1; then
		echo 'strerror() found in string header.' >&4
		d_strerror="$define"
		d_strerrm='strerror(e)'
		if set sys_errlist val -a d_syserrlst; eval $csym; $val; then	
			echo "(Most probably, strerror() uses sys_errlist[] for descriptions.)"
				d_syserrlst="$define"
		else
			echo "(You don't appear to have any sys_errlist[], how can this be?)"
			d_syserrlst="$undef"
		fi
d9003 4
a9006 4
		echo "strerror() not found, but you have sys_errlist[] so we'll use that." >&4
		d_strerror="$undef"
		d_syserrlst="$define"
		d_strerrm='((e)<0||(e)>=sys_nerr?"unknown":sys_errlist[e])'
d9008 4
a9011 4
		echo 'strerror() and sys_errlist[] NOT found.' >&4
		d_strerror="$undef"
		d_syserrlst="$undef"
		d_strerrm='"unknown"'
a9022 56
: see if strtold exists
set strtold d_strtold
eval $inlibc

: see if strtoll exists
set strtoll d_strtoll
eval $inlibc

case "$d_longlong-$d_strtoll" in
"$define-$define")
	$cat <<EOM
Checking whether your strtoll() works okay...
EOM
	$cat >try.c <<'EOCP'
#include <errno.h>
#ifdef __hpux
#define strtoll __strtoll
#endif
#include <stdio.h>
extern long long int strtoll(char *s, char **, int); 
static int bad = 0;
int check(char *s, long long ell, int een) {
	long long gll;
	errno = 0;
	gll = strtoll(s, 0, 10);
	if (!((gll == ell) && (errno == een)))
		bad++;
}
int main() {
	check(" 1",                                      1LL, 0);
	check(" 0",                                      0LL, 0);
	check("-1",                                     -1LL, 0);
	check("-9223372036854775808", -9223372036854775808LL, 0);
	check("-9223372036854775808", -9223372036854775808LL, 0);
	check(" 9223372036854775807",  9223372036854775807LL, 0);
	check("-9223372036854775808", -9223372036854775808LL, 0);
	check(" 9223372036854775808",  9223372036854775807LL, ERANGE);
	check("-9223372036854775809", -9223372036854775808LL, ERANGE);
	if (!bad)
		printf("ok\n");
}
EOCP
	set try
	if eval $compile; then
		case "`./try`" in
		ok) echo "Your strtoll() seems to be working okay." ;;
		*) cat <<EOM >&4
Your strtoll() doesn't seem to be working okay.
EOM
		   d_strtoll="$undef"
		   ;;
		esac
	fi
	;;
esac

a9026 51
: see if strtoull exists
set strtoull d_strtoull
eval $inlibc

case "$d_longlong-$d_strtoull" in
"$define-$define")
	$cat <<EOM
Checking whether your strtoull() works okay...
EOM
	$cat >try.c <<'EOCP'
#include <errno.h>
#ifdef __hpux
#define strtoull __strtoull
#endif
#include <stdio.h>
extern unsigned long long int strtoull(char *s, char **, int); 
static int bad = 0;
int check(char *s, long long eull, int een) {
	long long gull;
	errno = 0;
	gull = strtoull(s, 0, 10);
	if (!((gull == eull) && (errno == een)))
		bad++;
}
int main() {
	check(" 1",                                       1LL, 0);
	check(" 0",                                       0LL, 0);
	check("18446744073709551615", 18446744073709551615ULL, 0);
	check("18446744073709551616", 18446744073709551615ULL, ERANGE);
	if (!bad)
		printf("ok\n");
}
EOCP
	set try
	if eval $compile; then
		case "`./try`" in
		ok) echo "Your strtoull() seems to be working okay." ;;
		*) cat <<EOM >&4
Your strtoull() doesn't seem to be working okay.
EOM
		   d_strtoull="$undef"
		   ;;
		esac
	fi
	;;
esac

: see if strtouq exists
set strtouq d_strtouq
eval $inlibc

d9047 64
a9110 13
: see if tcgetpgrp exists
set tcgetpgrp d_tcgetpgrp
eval $inlibc

: see if tcsetpgrp exists
set tcsetpgrp d_tcsetpgrp
eval $inlibc

: see if prototype for telldir is available
echo " "
set d_telldirproto telldir $i_systypes sys/types.h $i_dirent dirent.h
eval $hasproto

d9153 36
a9188 3
: see if ustat exists
set ustat d_ustat
eval $inlibc
d9244 4
a9359 11
case "$crosscompile" in
''|[nN]*) crosscompile="$undef" ;;
esac

case "$osname" in
next|rhapsody|darwin) multiarch="$define" ;;
esac
case "$multiarch" in
''|[nN]*) multiarch="$undef" ;;
esac

d9362 3
a9364 25
case "$crosscompile$multiarch" in
*$define*)
	$cat <<EOM
You seem to be either cross-compiling or doing a multiarchitecture build,
skipping the memory alignment check.

EOM
	case "$alignbytes" in
	'') alignbytes=8 ;;
	esac
	;;
*)
	case "$alignbytes" in
	'') echo "Checking alignment constraints..." >&4
		if $test "X$uselongdouble" = Xdefine -a "X$d_longdbl" = Xdefine; then
			$cat >try.c <<'EOCP'
typedef long double NV;
EOCP
		else
			$cat >try.c <<'EOCP'
typedef double NV;
EOCP
		fi
		$cat >>try.c <<'EOCP'
#include <stdio.h>
d9367 2
a9368 2
	NV bar;
} try_algn;
d9371 1
a9371 2
    printf("%d\n", (int)((char *)&try_algn.bar - (char *)&try_algn.foo));
    return(0);
d9374 9
a9382 15
		set try
		if eval $compile_ok; then
			dflt=`./try`
		else
			dflt='8'
			echo "(I can't seem to compile the test program...)"
		fi
		;;
	*) dflt="$alignbytes"
		;;
	esac
	rp="Doubles must be aligned on a how-many-byte boundary?"
	. ./myread
	alignbytes="$ans"
	$rm -f try.c try
d9385 4
a9388 4


: set the base revision
baserev=5.0
d9391 4
a9394 14
echo " "
case "$crosscompile$multiarch" in
*$define*)
	$cat <<EOM
You seem to be either cross-compiling or doing a multiarchitecture build,
skipping the byteorder check.

EOM
	byteorder='0xffff'
	;;
*)
	case "$byteorder" in
	'')
		$cat <<'EOM'
d9398 2
a9399 3
machines may have weird orders like 3412.  A Cray will report 87654321,
an Alpha will report 12345678. If the test program works the default is
probably right.
d9402 1
a9402 1
		$cat >try.c <<'EOCP'
d9422 9
a9430 9
		xxx_prompt=y
		set try
		if eval $compile && ./try > /dev/null; then
			dflt=`./try`
			case "$dflt" in
			[1-4][1-4][1-4][1-4]|12345678|87654321)
				echo "(The test program ran ok.)"
				echo "byteorder=$dflt"
				xxx_prompt=n
d9432 6
a9437 6
			????|????????) echo "(The test program ran ok.)" ;;
			*) echo "(The test program didn't run right for some reason.)" ;;
			esac
		else
			dflt='4321'
			cat <<'EOM'
d9440 8
a9447 10
		fi
		case "$xxx_prompt" in
		y)
			rp="What is the order of bytes in a long?"
			. ./myread
			byteorder="$ans"
			;;
		*)	byteorder=$dflt
			;;
		esac
a9449 1
	$rm -f try.c try
d9452 1
a9452 1

d9542 1
a9542 1
	if eval $compile_ok && ./try; then
d9745 1
a9745 2

: How can we generate normalized random numbers ?
d9747 1
a9747 2
echo "Looking for a random number function..." >&4
case "$randfunc" in
d9749 2
a9750 338
	if set drand48 val -f; eval $csym; $val; then
		dflt="drand48"
		echo "Good, found drand48()." >&4
	elif set random val -f; eval $csym; $val; then
		dflt="random"
		echo "OK, found random()." >&4
	else
		dflt="rand"
		echo "Yick, looks like I have to use rand()." >&4
	fi
	echo " "
	;;
*)
	dflt="$randfunc"
	;;
esac
cont=true

case "$ccflags" in
*-Dmy_rand=*|*-Dmy_srand=*)
	echo "Removing obsolete -Dmy_rand, -Dmy_srand, and -Drandbits from ccflags." >&4
	ccflags="`echo $ccflags | sed -e 's/-Dmy_rand=random/ /'`"
	ccflags="`echo $ccflags | sed -e 's/-Dmy_srand=srandom/ /'`"
	ccflags="`echo $ccflags | sed -e 's/-Drandbits=[0-9][0-9]*/ /'`"
	;;
esac

while $test "$cont"; do
	rp="Use which function to generate random numbers?"
	. ./myread
	if $test "$ans" = "$dflt"; then
		: null
	else
		randbits=''
	fi
	randfunc="$ans"
	if set $ans val -f; eval $csym; $val; then
		cont=''
	else
		dflt=y
		rp="I cannot find function $ans. Use that name anyway?"
		. ./myread
		dflt=rand
		case "$ans" in
			[yY]*) cont='';;
		esac
	fi
	case "$cont" in
	'')
		case "$randfunc" in
		drand48)
			drand01="drand48()"
			seedfunc="srand48"
			randbits=48
			randseedtype=long
			;;
		rand|random)
			case "$randbits" in
			'')
echo "Checking to see how many bits your $randfunc() function produces..." >&4
				$cat >try.c <<EOCP
#$i_unistd I_UNISTD
#$i_stdlib I_STDLIB
#include <stdio.h>
#ifdef I_UNISTD
#  include <unistd.h>
#endif
#ifdef I_STDLIB
#  include <stdlib.h>
#endif
int main()
{
	register int i;
	register unsigned long tmp;
	register unsigned long max = 0L;

	for (i = 1000; i; i--) {
		tmp = (unsigned long) $randfunc();
		if (tmp > max) max = tmp;
	}
	for (i = 0; max; i++)
		max /= 2;
	printf("%d\n",i);
}
EOCP
				set try
				if eval $compile_ok; then
					dflt=`try`
				else
					dflt='?'
					echo "(I can't seem to compile the test program...)"
				fi
				;;
			*)
				dflt="$randbits"
				;;
			esac
			rp="How many bits does your $randfunc() function produce?"
			. ./myread
			randbits="$ans"
			$rm -f try.c try
			drand01="($randfunc() / (double) ((unsigned long)1 << $randbits))"
			seedfunc="s$randfunc"
			randseedtype=unsigned
			;;
		*)
			dflt="31"
			rp="How many bits does your $randfunc() function produce?"
			. ./myread
			randbits="$ans"
			seedfunc="s$randfunc"
			drand01="($randfunc() / (double) ((unsigned long)1 << $randbits))"
			if set $seedfunc val -f; eval $csym; $val; then
				echo "(Using $seedfunc() to seed random generator)"
			else
				echo "(Warning: no $seedfunc() to seed random generator)"
				seedfunc=rand
			fi
			randseedtype=unsigned
			;;
		esac
		;;
	esac
done

echo " "
echo "Determining whether or not we are on an EBCDIC system..." >&4
$cat >tebcdic.c <<'EOM'
int main()
{
  if ('M'==0xd4) return 0;
  return 1;
}
EOM

val=$undef
set tebcdic
if eval $compile_ok; then
	if ./tebcdic; then
		echo "You have EBCDIC." >&4
		val="$define"
	else
		echo "Nope, no EBCDIC, probably ASCII or some ISO Latin." >&4
	fi
else
	echo "I'm unable to compile the test program." >&4
	echo "I'll assume ASCII or some ISO Latin." >&4
fi
$rm -f tebcdic.c tebcdic
set ebcdic
eval $setvar

echo " "
$cat >&4 <<EOM
Checking how to flush all pending stdio output...
EOM
# I only know how to find the first 32 possibly open files on SunOS.
# See also hints/sunos_4_1.sh and util.c  --AD
case "$osname" in
sunos) $echo '#define PERL_FFLUSH_ALL_FOPEN_MAX 32' > try.c ;;
esac
$cat >>try.c <<EOCP
#include <stdio.h>
#$i_unistd I_UNISTD
#ifdef I_UNISTD
# include <unistd.h>
#endif
#$d_sysconf HAS_SYSCONF
#$d_stdio_stream_array HAS_STDIO_STREAM_ARRAY
#ifdef HAS_STDIO_STREAM_ARRAY
# define STDIO_STREAM_ARRAY $stdio_stream_array
#endif
int main() {
  FILE* p = fopen("try.out", "w");
#ifdef TRY_FPUTC
  fputc('x', p);
#else
# ifdef TRY_FPRINTF
  fprintf(p, "x");
# endif
#endif
#ifdef TRY_FFLUSH_NULL
  fflush(NULL);
#endif
#ifdef TRY_FFLUSH_ALL
  {
    long open_max = -1;
# ifdef PERL_FFLUSH_ALL_FOPEN_MAX
    open_max = PERL_FFLUSH_ALL_FOPEN_MAX;
# else
#  if defined(HAS_SYSCONF) && defined(_SC_OPEN_MAX)
    open_max = sysconf(_SC_OPEN_MAX);
#  else
#   ifdef FOPEN_MAX
    open_max = FOPEN_MAX;
#   else
#    ifdef OPEN_MAX
    open_max = OPEN_MAX;
#    else
#     ifdef _NFILE
    open_max = _NFILE;
#     endif
#    endif
#   endif
#  endif
# endif 
# ifdef HAS_STDIO_STREAM_ARRAY
    if (open_max > 0) {
      long i;
      for (i = 0; i < open_max; i++)
	    if (STDIO_STREAM_ARRAY[i]._file >= 0 &&
		STDIO_STREAM_ARRAY[i]._file < open_max &&
		STDIO_STREAM_ARRAY[i]._flag)
		fflush(&STDIO_STREAM_ARRAY[i]);
    }	
  }
# endif
#endif
  _exit(42);
}
EOCP
: first we have to find out how _not_ to flush
if $test "X$fflushNULL" = X -o "X$fflushall" = X; then
    output=''
    set try -DTRY_FPUTC
    if eval $compile; then
	    $rm -f try.out
 	    ./try$exe_ext 2>/dev/null
	    if $test ! -s try.out -a "X$?" = X42; then
		output=-DTRY_FPUTC
	    fi
    fi
    case "$output" in
    '')
	    set try -DTRY_FPRINTF
	    $rm -f try.out
	    if eval $compile; then
		    $rm -f try.out
 		    ./try$exe_ext 2>/dev/null
		    if $test ! -s try.out -a "X$?" = X42; then
			output=-DTRY_FPRINTF
		    fi
	    fi
	;;
    esac
fi
: check for fflush NULL behaviour
case "$fflushNULL" in
'') 	set try -DTRY_FFLUSH_NULL $output
	if eval $compile; then
	        $rm -f try.out
	    	./try$exe_ext 2>/dev/null
		code="$?"
		if $test -s try.out -a "X$code" = X42; then
			fflushNULL="`$cat try.out`"
		else
			if $test "X$code" != X42; then
				$cat >&4 <<EOM
(If this test failed, don't worry, we'll try another method shortly.)
EOM
			fi
		fi
	fi
	$rm -f core try.core core.try.*
	case "$fflushNULL" in
	x)	$cat >&4 <<EOM
Your fflush(NULL) works okay for output streams.
Let's see if it clobbers input pipes...
EOM
# As of mid-March 2000 all versions of Solaris appear to have a stdio
# bug that improperly flushes the input end of pipes.  So we avoid the
# autoflush on fork/system/exec support for now. :-(
$cat >tryp.c <<EOCP
#include <stdio.h>
int
main(int argc, char **argv)
{
    char buf[1024];
    int i;
    char *bp = buf;
    while (1) {
        while ((i = getc(stdin)) != -1
               && (*bp++ = i) != '\n'
               && bp < &buf[1024])
    	/* DO NOTHING */ ;
        *bp = '\0';
        fprintf(stdout, "%s", buf);
        fflush(NULL);
        if (i == -1)
	    return 0;
        bp = buf;
    }
}
EOCP
                fflushNULL="$define"
                set tryp
                if eval $compile; then
                    $rm -f tryp.out
                    $cat tryp.c | ./tryp$exe_ext 2>/dev/null > tryp.out
                    if cmp tryp.c tryp.out >/dev/null 2>&1; then
                       $cat >&4 <<EOM
fflush(NULL) seems to behave okay with input streams.
EOM
			fflushNULL="$define"
                    else
			$cat >&4 <<EOM
Ouch, fflush(NULL) clobbers input pipes!  We will not use it.
EOM
                        fflushNULL="$undef"
                    fi
                fi
	        $rm -f core tryp.c tryp.core core.tryp.*
		;;
	'')	$cat >&4 <<EOM
Your fflush(NULL) isn't working (contrary to ANSI C).
EOM
		fflushNULL="$undef"
		;;
	*)	$cat >&4 <<EOM
Cannot figure out whether your fflush(NULL) works or not.
I'm assuming it doesn't (contrary to ANSI C).
EOM
		fflushNULL="$undef"
		;;
	esac
	;;
$define|true|[yY]*)
	fflushNULL="$define"
	;;
*)
	fflushNULL="$undef"
	;;
esac
: check explicit looping only if NULL did not work, and if the pipe
: bug does not show up on an explicit flush too
case "$fflushNULL" in
"$undef")
	$cat >tryp.c <<EOCP
d9752 1
a9752 2
int
main(int argc, char **argv)
d9754 1
a9754 15
    char buf[1024];
    int i;
    char *bp = buf;
    while (1) {
	while ((i = getc(stdin)) != -1
	       && (*bp++ = i) != '\n'
	       && bp < &buf[1024])
	/* DO NOTHING */ ;
	*bp = '\0';
	fprintf(stdout, "%s", buf);
	fflush(stdin);
	if (i == -1)
	    return 0;
	bp = buf;
    }
d9757 4
a9760 54
	set tryp
	if eval $compile; then
	    $rm -f tryp.out
	    $cat tryp.c | ./tryp$exe_ext 2>/dev/null > tryp.out
	    if cmp tryp.c tryp.out >/dev/null 2>&1; then
	       $cat >&4 <<EOM
Good, at least fflush(stdin) seems to behave okay when stdin is a pipe.
EOM
		: now check for fflushall behaviour
		case "$fflushall" in
		'') 	set try -DTRY_FFLUSH_ALL $output
			if eval $compile; then
				$cat >&4 <<EOM
(Now testing the other method--but note that this also may fail.)
EOM
				$rm -f try.out
				./try$exe_ext 2>/dev/null
				if $test -s try.out -a "X$?" = X42; then
					fflushall="`$cat try.out`"
				fi
			fi
			$rm -f core try.core core.try.*
			case "$fflushall" in
			x)	$cat >&4 <<EOM
Whew. Flushing explicitly all the stdio streams works.
EOM
				fflushall="$define"
				;;
			'')	$cat >&4 <<EOM
Sigh. Flushing explicitly all the stdio streams doesn't work.
EOM
				fflushall="$undef"
				;;
			*)	$cat >&4 <<EOM
Cannot figure out whether flushing stdio streams explicitly works or not.
I'm assuming it doesn't.
EOM
				fflushall="$undef"
				;;
			esac
			;;
		"$define"|true|[yY]*)
			fflushall="$define"
			;;
		*)
			fflushall="$undef"
			;;
		esac
	    else
		$cat >&4 <<EOM
All is futile.  Even fflush(stdin) clobbers input pipes!
EOM
		fflushall="$undef"
	    fi
d9762 5
a9766 1
	    fflushall="$undef"
a9767 3
	$rm -f core tryp.c tryp.core core.tryp.*
	;;
*)	fflushall="$undef"
d9770 1
d9772 8
a9779 5
case "$fflushNULL$fflushall" in
undefundef)
	$cat <<EOM
OK, I give up.  I cannot figure out how to flush pending stdio output.
We won't be flushing handles at all before fork/exec/popen.
d9781 32
a9812 1
	;;
a9813 1
$rm -f try.* try$exe_ext
d9815 4
a9818 1
: Store the full pathname to the ar program for use in the C program
a9823 3
: Store the full pathname to the sed program for use in the C program
full_sed=$sed

a9847 302
echo " "
case "$gidtype" in
*_t) zzz="$gidtype"	;;
*)   zzz="gid"		;;
esac
echo "Checking the size of $zzz..." >&4 
cat > try.c <<EOCP
#include <sys/types.h>
#include <stdio.h>
int main() {
    printf("%d\n", (int)sizeof($gidtype));
    exit(0);
}
EOCP
set try
if eval $compile_ok; then
	yyy=`./try`
	case "$yyy" in
	'')	gidsize=4
		echo "(I can't execute the test program--guessing $gidsize.)" >&4
		;;
	*)	gidsize=$yyy
		echo "Your $zzz is $gidsize bytes long."
		;;
	esac
else
	gidsize=4
	echo "(I can't compile the test program--guessing $gidsize.)" >&4
fi


echo " "
case "$gidtype" in
*_t) zzz="$gidtype"	;;
*)   zzz="gid"		;;
esac
echo "Checking the sign of $zzz..." >&4 
cat > try.c <<EOCP
#include <sys/types.h>
#include <stdio.h>
int main() {
	$gidtype foo = -1;
	if (foo < 0)
		printf("-1\n");
	else
		printf("1\n");
}
EOCP
set try
if eval $compile; then
	yyy=`./try`
	case "$yyy" in
	'')	gidsign=1
		echo "(I can't execute the test program--guessing unsigned.)" >&4
		;;
	*)	gidsign=$yyy
		case "$gidsign" in
		 1) echo "Your $zzz is unsigned." ;;
		-1) echo "Your $zzz is signed."   ;;
		esac
		;;
	esac
else
	gidsign=1
	echo "(I can't compile the test program--guessing unsigned.)" >&4
fi


echo " "

if $test X"$quadtype" != X; then

echo "Checking how to print 64-bit integers..." >&4

if $test X"$sPRId64" = X -a X"$quadtype" = Xint; then
	$cat >try.c <<'EOCP'
#include <sys/types.h>
#include <stdio.h>
int main() {
  int q = 12345678901;
  printf("%ld\n", q);
}
EOCP
	set try
	if eval $compile; then
		yyy=`./try$exe_ext`
		case "$yyy" in
		12345678901)
			sPRId64='"d"'; sPRIi64='"i"'; sPRIu64='"u"';
                	sPRIo64='"o"'; sPRIx64='"x"'; sPRIX64='"X"';
			echo "We will use %d."
			;;
		esac
	fi
fi

if $test X"$sPRId64" = X -a X"$quadtype" = Xlong; then
	$cat >try.c <<'EOCP'
#include <sys/types.h>
#include <stdio.h>
int main() {
  long q = 12345678901;
  printf("%ld\n", q);
}
EOCP
	set try
	if eval $compile; then
		yyy=`./try$exe_ext`
		case "$yyy" in
		12345678901)
			sPRId64='"ld"'; sPRIi64='"li"'; sPRIu64='"lu"';
                	sPRIo64='"lo"'; sPRIx64='"lx"'; sPRIX64='"lX"';
			echo "We will use %ld."
			;;
		esac
	fi
fi

if $test X"$sPRId64" = X -a X"$i_inttypes" = X"$define" -a X"$quadtype" = Xint64_t; then
	$cat >try.c <<'EOCP'
#include <sys/types.h>
#include <inttypes.h>
#include <stdio.h>
int main() {
  int64_t q = 12345678901;
  printf("%" PRId64 "\n", q);
}
EOCP
	set try
	if eval $compile; then
		yyy=`./try$exe_ext`
		case "$yyy" in
		12345678901)
			sPRId64=PRId64; sPRIi64=PRIi64; sPRIu64=PRIu64;
                	sPRIo64=PRIo64; sPRIx64=PRIx64; sPRIX64=PRIX64;
			echo "We will use the C9X style."
			;;
		esac
	fi
fi

if $test X"$sPRId64" = X -a X"$quadtype" = X"long long"; then
	$cat >try.c <<'EOCP'
#include <sys/types.h>
#include <stdio.h>
int main() {
  long long q = 12345678901LL; /* AIX cc requires the LL prefix. */
  printf("%lld\n", q);
}
EOCP
	set try
	if eval $compile; then
		yyy=`./try$exe_ext`
		case "$yyy" in
		12345678901)
			sPRId64='"lld"'; sPRIi64='"lli"'; sPRIu64='"llu"';
                	sPRIo64='"llo"'; sPRIx64='"llx"'; sPRIX64='"llX"';
			echo "We will use the %lld style."
			;;
		esac
	fi
fi

if $test X"$sPRId64" = X -a X"$quadtype" != X; then
	$cat >try.c <<EOCP
#include <sys/types.h>
#include <stdio.h>
int main() {
  $quadtype q = 12345678901;
  printf("%Ld\n", q);
}
EOCP
	set try
	if eval $compile; then
		yyy=`./try$exe_ext`
		case "$yyy" in
		12345678901)
			sPRId64='"Ld"'; sPRIi64='"Li"'; sPRIu64='"Lu"';
                	sPRIo64='"Lo"'; sPRIx64='"Lx"'; sPRIX64='"LX"';
			echo "We will use %Ld."
			;;
		esac
	fi
fi

if $test X"$sPRId64" = X -a X"$quadtype" != X; then
	$cat >try.c <<EOCP
#include <sys/types.h>
#include <stdio.h>
int main() {
  $quadtype q = 12345678901;
  printf("%qd\n", q);
}
EOCP
	set try
	if eval $compile; then
		yyy=`./try$exe_ext`
		case "$yyy" in
		12345678901)
			sPRId64='"qd"'; sPRIi64='"qi"'; sPRIu64='"qu"';
                	sPRIo64='"qo"'; sPRIx64='"qx"'; sPRIX64='"qX"';
			echo "We will use %qd."
			;;
		esac
	fi
fi

if $test X"$sPRId64" = X; then
	echo "Cannot figure out how to print 64-bit integers." >&4
fi

$rm -f try try.*

fi

case "$sPRId64" in
'')	d_PRId64="$undef"; d_PRIi64="$undef"; d_PRIu64="$undef"; 
	d_PRIo64="$undef"; d_PRIx64="$undef"; d_PRIX64="$undef"; 
	;;
*)	d_PRId64="$define"; d_PRIi64="$define"; d_PRIu64="$define"; 
	d_PRIo64="$define"; d_PRIx64="$define"; d_PRIX64="$define"; 
	;;
esac


echo " "
$echo "Checking the format strings to be used for Perl's internal types..." >&4

if $test X"$ivsize" = X8; then
	ivdformat="$sPRId64"
	uvuformat="$sPRIu64"
	uvoformat="$sPRIo64"
	uvxformat="$sPRIx64"
else
	if $test X"$ivsize" = X"$longsize"; then
		ivdformat='"ld"'
		uvuformat='"lu"'
		uvoformat='"lo"'
		uvxformat='"lx"'
	else
		if $test X"$ivsize" = X"$intsize"; then
			ivdformat='"d"'
			uvuformat='"u"'
			uvoformat='"o"'
			uvxformat='"x"'
		else
			: far out
			if $test X"$ivsize" = X"$shortsize"; then
				ivdformat='"hd"'
				uvuformat='"hu"'
				uvoformat='"ho"'
				uvxformat='"hx"'
			fi
		fi
	fi
fi

case "$ivdformat" in
'') echo "$0: Fatal: failed to find format strings, cannot continue." >& 4
    exit 1
    ;;
esac


echo " "
$echo "Checking the format string to be used for gids..." >&4

case "$gidsign" in
-1)	if $test X"$gidsize" = X"$ivsize"; then
		gidformat="$ivdformat"
	else
		if $test X"$gidsize" = X"$longsize"; then
			gidformat='"ld"'
		else
			if $test X"$gidsize" = X"$intsize"; then
				gidformat='"d"'
			else
				if $test X"$gidsize" = X"$shortsize"; then
					gidformat='"hd"'
				fi
			fi
		fi
	fi
	;;
*)	if $test X"$gidsize" = X"$uvsize"; then
		gidformat="$uvuformat"
	else
		if $test X"$gidsize" = X"$longsize"; then
			gidformat='"lu"'
		else
			if $test X"$gidsize" = X"$intsize"; then
				gidformat='"u"'
			else
				if $test X"$gidsize" = X"$shortsize"; then
					gidformat='"hu"'
				fi
			fi
		fi
	fi
	;;
esac

d9877 5
a10109 9
: Find earliest binary compatible site_perl subdirectory perl can use.
case "$bincompat5005" in
"$define") xs_apiversion='5.005' ;;
*) xs_apiversion=$version ;;   # The current site_perl version.
esac
: Find earliest pure perl site_perl subdirectory perl can use.
: The versioned directories started at 5.005.
pm_apiversion='5.005'

d10114 1
a10114 1
	echo "Checking to see how big your pointers are..." >&4
d10124 2
a10125 2
    printf("%d\n", (int)sizeof(VOID_PTR));
    exit(0);
d10131 1
a10131 1
		echo "Your pointers are $ptrsize bytes long."
d10143 49
d10235 162
a10400 1
		echo " "
d10414 1
a10414 1
			for nfd in 'int' 'size_t' 'unsigned long' 'unsigned' ; do
a10474 4
#$d_socket HAS_SOCKET
#ifdef HAS_SOCKET
#   include <sys/socket.h> /* Might include <sys/bsdtypes.h> */
#endif
a10541 2
: Remove SIGSTKSIZE used by Linux.
: Remove SIGSTKSZ used by Posix.
d10543 1
a10543 6
: Some cpps, like os390, dont give the file name anywhere
if [ "X$fieldn" = X ]; then
	: Just make some guesses.  We check them later.
	xxx='/usr/include/signal.h /usr/include/sys/signal.h'
else
	xxx=`echo '#include <signal.h>' |
a10546 1
fi
d10559 1
a10559 1
$1 ~ /^#define$/ && $2 ~ /^SIG[A-Z0-9]*$/ && $2 !~ /SIGARRAYSIZE/ && $2 !~ /SIGSTKSIZE/ && $2 !~ /SIGSTKSZ/ && $3 !~ /void/ {
d10566 4
a10569 6
xxx="$xxx ABRT ALRM BUS CANCEL CHLD CLD CONT DIL EMT FPE"
xxx="$xxx FREEZE HUP ILL INT IO IOT KILL LOST LWP PHONE"
xxx="$xxx PIPE POLL PROF PWR QUIT RTMAX RTMIN SEGV STKFLT STOP"
xxx="$xxx SYS TERM THAW TRAP TSTP TTIN TTOU URG USR1 USR2"
xxx="$xxx USR3 USR4 VTALRM WAITING WINCH WIND WINDOW XCPU XFSZ"

d10642 1
a10642 1
	printf "exit(0);\n}\n";
d10659 1
d10662 8
a10669 7
    if (nsig == 0) {
    	nsig = maxsig + 1
    }
    printf("NSIG %d\n", nsig);
    for (n = 1; n < nsig; n++) {
 	if (sig_name[n]) {
 	    printf("%s %d\n", sig_name[n], sig_num[n])
a10670 4
 	else {
 	    printf("NUM%d %d\n", n, n) 
 	}
    }
d10672 1
a10672 1
 	printf("%s %d\n", dup_name[n], dup_num[n])
d10737 2
a10738 104
	echo $@@ | $tr ' ' $trnl | \
 	    $awk '{ printf "%s %d\n", $1, ++s; }
 		  END { printf "NSIG %d\n", ++s }' >signal.lst
fi
$rm -f signal.c signal$_exe signal$_o signal.nsg signal.ls1
EOS
chmod a+x signal_cmd
$eunicefix signal_cmd

: generate list of signal names
echo " "
case "$sig_name_init" in
'') doinit=yes ;;
*)  case "$sig_num_init" in
    ''|*,*) doinit=yes ;;
    esac ;;
esac
case "$doinit" in
yes)
	echo "Generating a list of signal names and numbers..." >&4
	. ./signal_cmd
 	sig_count=`$awk '/^NSIG/ { printf "%d", $2 }' signal.lst`
 	sig_name=`$awk 'BEGIN { printf "ZERO " }
 			!/^NSIG/ { printf "%s ", $1 }' signal.lst`
 	sig_num=`$awk  'BEGIN { printf "0 " }
 			!/^NSIG/ { printf "%d ", $2 }' signal.lst`
 	sig_name_init=`$awk 'BEGIN	{ printf "\"ZERO\", " }
 			     !/^NSIG/	{ printf "\"%s\", ", $1 }
 			     END	{ printf "0\n" }' signal.lst`
 	sig_num_init=`$awk  'BEGIN	{ printf "0, " }
 			     !/^NSIG/	{ printf "%d, ", $2}
 			     END	{ printf "0\n"}' signal.lst`
	;;
esac
echo "The following $sig_count signals are available:"
echo " "
echo $sig_name | $awk \
'BEGIN { linelen = 0 }
{
	for (i = 1; i <= NF; i++) {
		name = "SIG" $i " "
		linelen = linelen + length(name)
		if (linelen > 70) {
			printf "\n"
			linelen = length(name)
		}
		printf "%s", name
	}
	printf "\n"
}'
$rm -f signal signal.c signal.awk signal.lst signal_cmd 

echo " "
case "$sizetype" in
*_t) zzz="$sizetype"	;;
*)   zzz="filesize"	;;
esac
echo "Checking the size of $zzz..." >&4 
cat > try.c <<EOCP
#include <sys/types.h>
#include <stdio.h>
int main() {
    printf("%d\n", (int)sizeof($sizetype));
    exit(0);
}
EOCP
set try
if eval $compile_ok; then
	yyy=`./try`
	case "$yyy" in
	'')	sizesize=4
		echo "(I can't execute the test program--guessing $sizesize.)" >&4
		;;
	*)	sizesize=$yyy
		echo "Your $zzz size is $sizesize bytes."
		;;
	esac
else
	sizesize=4
	echo "(I can't compile the test program--guessing $sizesize.)" >&4
fi


: check for socklen_t
echo " "
echo "Checking to see if you have socklen_t..." >&4
$cat >try.c <<EOCP
#include <sys/types.h>
#$d_socket HAS_SOCKET
#ifdef HAS_SOCKET
#include <sys/socket.h>
#endif
int main() { socklen_t x = 16; }
EOCP
set try
if eval $compile; then
	val="$define"
	echo "You have socklen_t."
else
	val="$undef"
	echo "You do not have socklen_t."
	case "$sizetype" in
	size_t) echo "(You do have size_t, that might work. Some people are happy with just an int.)" ;;
	esac
d10740 4
a10743 3
$rm -f try try.*
set d_socklen_t
eval $setvar
d10745 22
a10766 34
: check for type of the size argument to socket calls
case "$d_socket" in
"$define")
	$cat <<EOM

Checking to see what type is the last argument of accept().
EOM
	hdrs="$define sys/types.h $d_socket sys/socket.h" 
	yyy=''
	case "$d_socklen_t" in
	"$define") yyy="$yyy socklen_t"
	esac
	yyy="$yyy $sizetype int long unsigned"
	for xxx in $yyy; do
		case "$socksizetype" in
		'')	try="extern int accept(int, struct sockaddr *, $xxx *);"
			if ./protochk "$try" $hdrs; then
				echo "Your system accepts '$xxx *' for the last argument of accept()."
				socksizetype="$xxx"
			fi
			;;
		esac
	done
: In case none of those worked, prompt the user.
	case "$socksizetype" in
	'')	rp='What is the type for socket address structure sizes?'
		dflt='int'
		. ./myread
		socksizetype=$ans
		;;
	esac
	;;
*)	: no sockets, so pick relatively harmless default
	socksizetype='int'
d10769 17
d10842 5
a10846 5
		echo 'time() found.' >&4
		val="$define"
		rp="What is the type returned by time() on this system?"
		set time_t timetype long stdio.h sys/types.h
		eval $typedef_ask
d10848 3
a10850 3
		echo 'time() not found, hope that will do.' >&4
		val="$undef"
		timetype='int';
a10879 106
echo " "
case "$uidtype" in
*_t) zzz="$uidtype"	;;
*)   zzz="uid"		;;
esac
echo "Checking the size of $zzz..." >&4 
cat > try.c <<EOCP
#include <sys/types.h>
#include <stdio.h>
int main() {
    printf("%d\n", (int)sizeof($uidtype));
    exit(0);
}
EOCP
set try
if eval $compile_ok; then
	yyy=`./try`
	case "$yyy" in
	'')	uidsize=4
		echo "(I can't execute the test program--guessing $uidsize.)" >&4
		;;
	*)	uidsize=$yyy
		echo "Your $zzz is $uidsize bytes long."
		;;
	esac
else
	uidsize=4
	echo "(I can't compile the test program--guessing $uidsize.)" >&4
fi

echo " "
case "$uidtype" in
*_t) zzz="$uidtype"	;;
*)   zzz="uid"		;;
esac
echo "Checking the sign of $zzz..." >&4
cat > try.c <<EOCP
#include <sys/types.h>
#include <stdio.h>
int main() {
	$uidtype foo = -1;
	if (foo < 0)
		printf("-1\n");
	else
		printf("1\n");
}
EOCP
set try
if eval $compile; then
	yyy=`./try`
	case "$yyy" in
	'')	uidsign=1
		echo "(I can't execute the test program--guessing unsigned.)" >&4
		;;
	*)	uidsign=$yyy
		case "$uidsign" in
		 1) echo "Your $zzz is unsigned." ;;
		-1) echo "Your $zzz is signed."   ;;
		esac
		;;
	esac
else
	uidsign=1
	echo "(I can't compile the test program--guessing unsigned.)" >&4
fi



echo " "
$echo "Checking the format string to be used for uids..." >&4

case "$uidsign" in
-1)	if $test X"$uidsize" = X"$ivsize"; then
		uidformat="$ivdformat"
	else
		if $test X"$uidsize" = X"$longsize"; then
			uidformat='"ld"'
		else
			if $test X"$uidsize" = X"$intsize"; then
				uidformat='"d"'
			else
				if $test X"$uidsize" = X"$shortsize"; then
					uidformat='"hd"'
				fi
			fi
		fi
	fi
	;;
*)	if $test X"$uidsize" = X"$uvsize"; then
		uidformat="$uvuformat"
	else
		if $test X"$uidsize" = X"$longsize"; then
			uidformat='"lu"'
		else
			if $test X"$uidsize" = X"$intsize"; then
				uidformat='"u"'
			else
				if $test X"$uidsize" = X"$shortsize"; then
					uidformat='"hu"'
				fi
			fi
		fi
	fi
	;;
esac

d10963 2
a10964 2
: see if this is a iconv.h system
set iconv.h i_iconv
d10967 35
a11001 3
: see if this is a ieeefp.h system
set ieeefp.h i_ieeefp
eval $inhdr
a11006 10
: see if mach cthreads are available
if test "X$usethreads" = "X$define"; then
	set mach/cthreads.h i_machcthr
	eval $inhdr
else
	i_machcthr="$undef"
fi



a11010 4
: see if this is a mntent.h system
set mntent.h i_mntent
eval $inhdr

d11060 1
a11060 8
: see if netinet/tcp.h is available
set netinet/tcp.h i_netinettcp
eval $inhdr

: see if this is a poll.h system
set poll.h i_poll
eval $inhdr

d11062 3
a11064 70
$echo "Guessing which symbols your C compiler and preprocessor define..." >&4 
$cat <<'EOSH' > Cppsym.know
a29k ABI64 aegis AES_SOURCE AIX AIX32 AIX370
AIX41 AIX42 AIX43 AIX_SOURCE aixpc ALL_SOURCE
alliant alpha am29000 AM29000 amiga AMIGAOS AMIX
ansi ANSI_C_SOURCE apollo ardent atarist att386 att3b BeOS
BIG_ENDIAN BIT_MSF bsd BSD bsd43 bsd4_2 bsd4_3 BSD4_3 bsd4_4
BSD_4_3 BSD_4_4 BSD_NET2 BSD_TIME BSD_TYPES BSDCOMPAT bsdi
bull c cadmus clipper CMU COFF COMPILER_VERSION
concurrent convex cpu cray CRAY CRAYMPP ctix CX_UX
CYGWIN DGUX DGUX_SOURCE DJGPP dmert DOLPHIN DPX2 DSO
Dynix DynixPTX ELF encore EPI EXTENSIONS FILE_OFFSET_BITS
FreeBSD GCC_NEW_VARARGS gcos gcx gimpel
GNU_SOURCE GNUC GNUC_MINOR GO32 gould GOULD_PN
H3050R H3050RX hbullx20 hcx host_mips
hp200 hp300 hp700 HP700 hp800 hp9000
hp9000s200 hp9000s300 hp9000s400 hp9000s500
hp9000s700 hp9000s800 hp9k8 hp_osf hppa hpux HPUX_SOURCE
i186 i286 i386 i486 i586 i686 i8086 i80960 i860 I960
iAPX286 ibm ibm032 ibmesa IBMR2 ibmrt ILP32 ILP64
INLINE_INTRINSICS INTRINSICS INT64 interdata is68k ksr1
LANGUAGE_C LARGE_FILE_API LARGEFILE64_SOURCE
LARGEFILE_SOURCE LFS64_LARGEFILE LFS_LARGEFILE
Linux LITTLE_ENDIAN LONG64 LONG_DOUBLE LONG_LONG
LONGDOUBLE LONGLONG LP64 luna luna88k Lynx
M68000 m68k m88100 m88k M88KBCS_TARGET M_COFF
M_I186 M_I286 M_I386 M_I8086 M_I86 M_I86SM M_SYS3
M_SYS5 M_SYSIII M_SYSV M_UNIX M_XENIX MACH machine MachTen
MATH_HAS_NO_SIDE_EFFECTS
mc300 mc500 mc68000 mc68010 mc68020 mc68030 mc68040
mc68060 mc68k mc68k32 mc700 mc88000 mc88100 merlin
mert MiNT mips MIPS_FPSET MIPS_ISA MIPS_SIM MIPS_SZINT
MIPS_SZLONG MIPS_SZPTR MIPSEB MIPSEL MODERN_C motorola
mpeix MSDOS MTXINU MULTIMAX mvs MVS n16 ncl_el ncl_mr
NetBSD news1500 news1700 news1800 news1900 news3700
news700 news800 news900 NeXT NLS ns16000 ns32000
ns32016 ns32332 ns32k nsc32000
OCS88 OEMVS OpenBSD os OS2 OS390 osf OSF1 OSF_SOURCE
pa_risc PA_RISC1_1 PA_RISC2_0 PARAGON parisc
pc532 pdp11 PGC PIC plexus PORTAR posix
POSIX1B_SOURCE POSIX2_SOURCE POSIX4_SOURCE
POSIX_C_SOURCE POSIX_SOURCE POWER
PROTOTYPES PWB pyr QNX R3000 REENTRANT RES Rhapsody RISC6000
riscix riscos RT scs SCO sequent sgi SGI_SOURCE sinix
SIZE_INT SIZE_LONG SIZE_PTR SOCKET_SOURCE SOCKETS_SOURCE
sony sony_news sonyrisc sparc sparclite spectrum
stardent stdc STDC_EXT stratos sun sun3 sun386
Sun386i svr3 svr4 SVR4_2 SVR4_SOURCE svr5
SX system SYSTYPE_BSD SYSTYPE_BSD43 SYSTYPE_BSD44
SYSTYPE_SVR4 SYSTYPE_SVR5 SYSTYPE_SYSV SYSV SYSV3 SYSV4 SYSV5
sysV68 sysV88 Tek4132 Tek4300 titan
tower tower32 tower32_200 tower32_600 tower32_700
tower32_800 tower32_850 tss
u370 u3b u3b2 u3b20 u3b200 u3b20d u3b5
ultrix UMAXV UnicomPBB UnicomPBD UNICOS UNICOSMK
unix UNIX95 UNIX99 unixpc unos USGr4 USGr4_2
Utek UTek UTS UWIN uxpm uxps vax venix VMESA vms xenix Xenix286
XOPEN_SOURCE XOPEN_SOURCE_EXTENDED XPG2 XPG2_EXTENDED
XPG3 XPG3_EXTENDED XPG4 XPG4_EXTENDED
z8000
EOSH
# Maybe put other stuff here too.
cat <<EOSH >>Cppsym.know
$osname
EOSH
./tr '[a-z]' '[A-Z]' < Cppsym.know > Cppsym.a
./tr '[A-Z]' '[a-z]' < Cppsym.know > Cppsym.b
$cat Cppsym.a Cppsym.b | $tr ' ' $trnl | sort | uniq > Cppsym.know
$rm -f Cppsym.a Cppsym.b
cat <<EOSH > Cppsym
d11066 41
a11106 13
if $test \$# -gt 0; then
    echo \$* | $tr " " "$trnl" | ./Cppsym.try > Cppsym.got
    if $test -s Cppsym.got; then
        $rm -f Cppsym.got
        exit 0
    fi
    $rm -f Cppsym.got
    exit 1
else
    $tr " " "$trnl" | ./Cppsym.try
    exit 0
fi
EOSH
d11109 2
a11110 27
cat <<EOSH > Cppsym.try
$startsh
cat <<'EOCP' > try.c
#include <stdio.h>
int main() {
EOCP
$awk \\
EOSH
cat <<'EOSH' >> Cppsym.try
'length($1) > 0 {
    printf "#ifdef %s\n#if %s+0\nprintf(\"%s=%%ld\\n\", %s);\n#else\nprintf(\"%s\\n\");\n#endif\n#endif\n", $1, $1, $1, $1, $1
    printf "#ifdef _%s\n#if _%s+0\nprintf(\"_%s=%%ld\\n\", _%s);\n#else\nprintf(\"_%s\\n\");\n#endif\n#endif\n", $1, $1, $1, $1, $1
    printf "#ifdef __%s\n#if __%s+0\nprintf(\"__%s=%%ld\\n\", __%s);\n#else\nprintf(\"__%s\\n\");\n#endif\n#endif\n", $1, $1, $1, $1, $1
    printf "#ifdef __%s__\n#if __%s__+0\nprintf(\"__%s__=%%ld\\n\", __%s__);\n#else\nprintf(\"__%s__\\n\");\n#endif\n#endif\n", $1, $1, $1, $1, $1
}'	 >> try.c
echo '}' >> try.c
EOSH
cat <<EOSH >> Cppsym.try
ccflags="$ccflags"
case "$osname-$gccversion" in
irix-) ccflags="\$ccflags -woff 1178" ;;
esac
$cc $optimize \$ccflags $ldflags -o try try.c $libs && ./try$exe_ext
EOSH
chmod +x Cppsym.try
$eunicefix Cppsym.try
./Cppsym < Cppsym.know > Cppsym.true
d11130 1
a11130 1
postprocess_cc_v=''
d11142 1
a11142 2
$awk '/\=/ { print $0; next }
	{ print $0"=1" }' Cppsym.true >ccsym.true
d11148 1
a11148 1
	echo "Your C compiler doesn't seem to define any symbols!" >&4
d11150 1
a11150 1
	echo "However, your C preprocessor defines the following symbols:"
d11162 1
a11164 1
		$test "$silent" || sleep 1
d11171 1
a11173 1
		$test "$silent" || sleep 1
d11180 1
a11182 1
		$test "$silent" || sleep 1
a11241 8
: see if this is a shadow.h system
set shadow.h i_shadow
eval $inhdr

: see if this is a socks.h system
set socks.h i_socks
eval $inhdr

a11343 8
: see if this is a sunmath.h system
set sunmath.h i_sunmath
eval $inhdr

: see if sys/access.h is available
set sys/access.h i_sysaccess
eval $inhdr

a11364 10

: see if this is a syslog.h system
set syslog.h i_syslog
eval $inhdr


: see if this is a sys/mode.h system
set sys/mode.h i_sysmode
eval $inhdr

a11368 12
: see if sys/security.h is available
set sys/security.h i_syssecrt
eval $inhdr

: see if this is a sys/statvfs.h system
set sys/statvfs.h i_sysstatvfs
eval $inhdr

: see if this is a sys/uio.h system
set sys/uio.h i_sysuio
eval $inhdr

a11372 5

: see if this is a sys/utsname.h system
set sys/utsname.h i_sysutsname
eval $inhdr

a11376 4
: see if this is a ustat.h system
set ustat.h i_ustat
eval $inhdr

d11418 2
d11428 24
a11451 29

: Function to recursively find available extensions, ignoring DynaLoader
: NOTE: recursion limit of 10 to prevent runaway in case of symlink madness
find_extensions='
    for xxx in *; do
       case "$xxx" in
           DynaLoader|dynaload) ;;
           *)
           if $test -f $xxx/$xxx.xs; then
               known_extensions="$known_extensions $1$xxx";
           elif $test -f $xxx/Makefile.PL; then
               nonxs_extensions="$nonxs_extensions $1$xxx";
           else
               if $test -d $xxx -a $# -lt 10; then
                   set $1$xxx/ $*;
                   cd $xxx;
                   eval $find_extensions;
                   cd ..;
                   shift;
               fi;
           fi
           ;;
       esac;
    done'
tdir=`pwd`
cd $rsrc/ext
set X
shift
eval $find_extensions
d11476 1
a11476 10
		$define)
		    case "$osname-$use64bitint" in
		    hpux-define)
			case "$libs" in
			*-lndbm*) avail_ext="$avail_ext $xxx" ;;
			esac
			;;
		    *) avail_ext="$avail_ext $xxx" ;;
		    esac
		    ;;
d11481 1
a11481 10
		*"${define}"*)
		    case "$osname-$use64bitint" in
		    hpux-define)
			case "$libs" in
			*-ldbm*) avail_ext="$avail_ext $xxx" ;;
			esac
			;;
		    *) avail_ext="$avail_ext $xxx" ;;
		    esac
		    ;;
d11688 3
a11690 2
		eval temp=\$$file
		eval $file=`basename $temp`
d11731 1
a11731 4
api_revision='$api_revision'
api_subversion='$api_subversion'
api_version='$api_version'
api_versionstring='$api_versionstring'
a11734 1
archname64='$archname64'
a11740 1
bincompat5005='$bincompat5005'
a11755 1
charsize='$charsize'
a11766 1
cppccsymbols='$cppccsymbols'
d11773 1
a11773 1
crosscompile='$crosscompile'
a11776 12
d_PRIEldbl='$d_PRIEldbl'
d_PRIFldbl='$d_PRIFldbl'
d_PRIGldbl='$d_PRIGldbl'
d_PRIX64='$d_PRIX64'
d_PRId64='$d_PRId64'
d_PRIeldbl='$d_PRIeldbl'
d_PRIfldbl='$d_PRIfldbl'
d_PRIgldbl='$d_PRIgldbl'
d_PRIi64='$d_PRIi64'
d_PRIo64='$d_PRIo64'
d_PRIu64='$d_PRIu64'
d_PRIx64='$d_PRIx64'
a11777 1
d_accessx='$d_accessx'
a11779 2
d_atolf='$d_atolf'
d_atoll='$d_atoll'
a11782 1
d_bincompat5005='$d_bincompat5005'
a11804 1
d_drand48proto='$d_drand48proto'
a11805 1
d_eaccess='$d_eaccess'
a11811 1
d_endspent='$d_endspent'
a11824 3
d_fpos64_t='$d_fpos64_t'
d_fs_data_s='$d_fs_data_s'
d_fseeko='$d_fseeko'
d11827 1
d11829 2
a11830 1
d_ftello='$d_ftello'
a11831 2
d_getcwd='$d_getcwd'
d_getfsstat='$d_getfsstat'
a11839 2
d_getmnt='$d_getmnt'
d_getmntent='$d_getmntent'
a11857 2
d_getspent='$d_getspent'
d_getspnam='$d_getspnam'
a11860 1
d_hasmntopt='$d_hasmntopt'
a11861 1
d_iconv='$d_iconv'
a11863 1
d_int64_t='$d_int64_t'
a11866 1
d_ldbl_dig='$d_ldbl_dig'
a11871 1
d_lseekproto='$d_lseekproto'
a11872 1
d_madvise='$d_madvise'
a11875 1
d_memchr='$d_memchr'
a11880 1
d_mkdtemp='$d_mkdtemp'
a11881 2
d_mkstemp='$d_mkstemp'
d_mkstemps='$d_mkstemps'
a11882 2
d_mmap='$d_mmap'
d_mprotect='$d_mprotect'
a11883 5
d_msg_ctrunc='$d_msg_ctrunc'
d_msg_dontroute='$d_msg_dontroute'
d_msg_oob='$d_msg_oob'
d_msg_peek='$d_msg_peek'
d_msg_proxy='$d_msg_proxy'
a11887 2
d_msync='$d_msync'
d_munmap='$d_munmap'
a11889 3
d_nv_preserves_uv='$d_nv_preserves_uv'
d_off64_t='$d_off64_t'
d_old_pthread_create_joinable='$d_old_pthread_create_joinable'
d11900 1
d11907 1
a11908 3
d_pwquota='$d_pwquota'
d_qgcvt='$d_qgcvt'
d_quad='$d_quad'
a11917 1
d_scm_rights='$d_scm_rights'
a11947 1
d_setspent='$d_setspent'
a11958 1
d_socklen_t='$d_socklen_t'
a11959 1
d_sqrtl='$d_sqrtl'
a11960 3
d_statfs_f_flags='$d_statfs_f_flags'
d_statfs_s='$d_statfs_s'
d_statvfs='$d_statvfs'
a11962 1
d_stdio_stream_array='$d_stdio_stream_array'
a11971 2
d_strtold='$d_strtold'
d_strtoll='$d_strtoll'
a11972 2
d_strtoull='$d_strtoull'
d_strtouq='$d_strtouq'
a11983 1
d_telldirproto='$d_telldirproto'
a11990 4
d_ustat='$d_ustat'
d_vendorarch='$d_vendorarch'
d_vendorbin='$d_vendorbin'
d_vendorlib='$d_vendorlib'
a12009 1
drand01='$drand01'
a12019 2
fflushNULL='$fflushNULL'
fflushall='$fflushall'
a12022 1
fpossize='$fpossize'
a12028 3
gidformat='$gidformat'
gidsign='$gidsign'
gidsize='$gidsize'
a12039 8
i16size='$i16size'
i16type='$i16type'
i32size='$i32size'
i32type='$i32type'
i64size='$i64size'
i64type='$i64type'
i8size='$i8size'
i8type='$i8type'
a12050 3
i_iconv='$i_iconv'
i_ieeefp='$i_ieeefp'
i_inttypes='$i_inttypes'
a12052 1
i_machcthr='$i_machcthr'
d12054 1
a12060 1
i_netinettcp='$i_netinettcp'
d12062 1
a12062 1
i_poll='$i_poll'
a12063 1
i_pwd='$i_pwd'
a12066 2
i_shadow='$i_shadow'
i_socks='$i_socks'
a12070 2
i_sunmath='$i_sunmath'
i_sysaccess='$i_sysaccess'
a12075 3
i_syslog='$i_syslog'
i_sysmman='$i_sysmman'
i_sysmode='$i_sysmode'
a12079 1
i_syssecrt='$i_syssecrt'
a12082 1
i_sysstatfs='$i_sysstatfs'
a12087 1
i_sysuio='$i_sysuio'
a12088 2
i_sysutsname='$i_sysutsname'
i_sysvfs='$i_sysvfs'
a12093 1
i_ustat='$i_ustat'
a12099 2
inc_version_list='$inc_version_list'
inc_version_list_init='$inc_version_list_init'
a12105 2
installprefix='$installprefix'
installprefixexp='$installprefixexp'
a12108 1
installsitebin='$installsitebin'
a12109 1
installstyle='$installstyle'
a12110 3
installvendorarch='$installvendorarch'
installvendorbin='$installvendorbin'
installvendorlib='$installvendorlib'
a12111 3
ivdformat='$ivdformat'
ivsize='$ivsize'
ivtype='$ivtype'
a12117 1
ldlibpthname='$ldlibpthname'
a12123 4
libsdirs='$libsdirs'
libsfiles='$libsfiles'
libsfound='$libsfound'
libspath='$libspath'
a12137 1
lseeksize='$lseeksize'
d12153 1
a12155 1
mmaptype='$mmaptype'
a12158 1
multiarch='$multiarch'
a12173 2
nvsize='$nvsize'
nvtype='$nvtype'
a12175 1
old_pthread_create_joinable='$old_pthread_create_joinable'
a12184 1
perl5='$perl5'
a12191 1
pm_apiversion='$pm_apiversion'
a12199 2
quadkind='$quadkind'
quadtype='$quadtype'
a12200 2
randfunc='$randfunc'
randseedtype='$randseedtype'
a12202 1
revision='$revision'
a12205 13
sPRIEldbl='$sPRIEldbl'
sPRIFldbl='$sPRIFldbl'
sPRIGldbl='$sPRIGldbl'
sPRIX64='$sPRIX64'
sPRId64='$sPRId64'
sPRIeldbl='$sPRIeldbl'
sPRIfldbl='$sPRIfldbl'
sPRIgldbl='$sPRIgldbl'
sPRIi64='$sPRIi64'
sPRIo64='$sPRIo64'
sPRIu64='$sPRIu64'
sPRIx64='$sPRIx64'
sched_yield='$sched_yield'
a12208 1
seedfunc='$seedfunc'
a12218 1
sig_count='$sig_count'
a12225 2
sitebin='$sitebin'
sitebinexp='$sitebinexp'
a12226 1
sitelib_stem='$sitelib_stem'
a12227 3
siteprefix='$siteprefix'
siteprefixexp='$siteprefixexp'
sizesize='$sizesize'
a12234 1
socksizetype='$socksizetype'
a12249 1
stdio_stream_array='$stdio_stream_array'
a12264 11
u16size='$u16size'
u16type='$u16type'
u32size='$u32size'
u32type='$u32type'
u64size='$u64size'
u64type='$u64type'
u8size='$u8size'
u8type='$u8type'
uidformat='$uidformat'
uidsign='$uidsign'
uidsize='$uidsize'
a12267 4
uquadtype='$uquadtype'
use5005threads='$use5005threads'
use64bitall='$use64bitall'
use64bitint='$use64bitint'
a12268 5
useithreads='$useithreads'
uselargefiles='$uselargefiles'
uselongdouble='$uselongdouble'
usemorebits='$usemorebits'
usemultiplicity='$usemultiplicity'
a12275 1
usesocks='$usesocks'
a12276 1
usevendorprefix='$usevendorprefix'
a12279 14
uvoformat='$uvoformat'
uvsize='$uvsize'
uvtype='$uvtype'
uvuformat='$uvuformat'
uvxformat='$uvxformat'
vendorarch='$vendorarch'
vendorarchexp='$vendorarchexp'
vendorbin='$vendorbin'
vendorbinexp='$vendorbinexp'
vendorlib='$vendorlib'
vendorlib_stem='$vendorlib_stem'
vendorlibexp='$vendorlibexp'
vendorprefix='$vendorprefix'
vendorprefixexp='$vendorprefixexp'
a12283 1
xs_apiversion='$xs_apiversion'
d12293 2
a12294 2
awk '/^#define[ 	]+PERL_/ {printf "%s=%s\n",$2,$3}' $src/patchlevel.h >>config.sh
echo "CONFIGDOTSH=true" >>config.sh
d12363 2
a12364 2
Now you need to generate make dependencies by running "$make depend".
You might prefer to run it in background: "$make depend > makedepend.out &"
d12370 1
a12370 1
	rp="Run $make depend now?"
d12374 1
a12374 1
		$make depend && echo "Now you must run a $make."
d12377 1
a12377 1
		echo "You must run '$make depend' then '$make'."
d12382 1
a12382 1
	echo "Now you must run a $make."
@


1.1.1.4
log
@stock perl 5.6.1
@
text
@d23 2
a24 2
# Generated on Tue Mar 13 05:21:04 EET 2001 [metaconfig 3.0 PL70]
# (with additional metaconfig patches by perlbug@@perl.org)
d26 1
a26 1
cat >c1$$ <<EOF
d37 1
a37 1
cat >c2$$ <<EOF
d43 1
a43 1
true || cat c1$$ c2$$
d46 1
a46 1
(exit $?0) || cat c2$$
d48 1
a48 1
rm -f c1$$ c2$$
a162 2
ccname=''
ccversion=''
a165 1
perllibs=''
d291 1
a308 1
d__fwalk=''
d346 1
a349 1
d_fcntl_can_lock=''
a357 1
d_frexpl=''
a361 1
d_fsync=''
a366 1
d_getespwnam=''
a384 1
d_getpagsz=''
a394 1
d_getprpwnam=''
d398 1
a408 2
d_isnan=''
d_isnanl=''
a437 1
d_modfl=''
a470 1
d_sbrkproto=''
a489 1
d_setproctitle=''
d499 1
a523 1
d_socks5_init=''
a531 2
d_stdio_ptr_lval_nochange_cnt=''
d_stdio_ptr_lval_sets_cnt=''
a596 2
gccosandvers=''
gccversion=''
a622 1
i_libutil=''
a636 1
i_prot=''
a705 1
issymlink=''
d723 3
a725 3
d_PRIEUldbl=''
d_PRIFUldbl=''
d_PRIGUldbl=''
d729 3
a731 4
d_SCNfldbl=''
sPRIEUldbl=''
sPRIFUldbl=''
sPRIGUldbl=''
a734 1
sSCNfldbl=''
d752 6
a777 2
d_perl_otherlibdirs=''
otherlibdirs=''
a792 1
d_nv_preserves_uv_bits=''
a815 7
nvEUformat=''
nvFUformat=''
nvGUformat=''
nveformat=''
nvfformat=''
nvgformat=''
uvXUformat=''
d827 1
a827 1
d_PRIXU64=''
d833 1
a833 1
sPRIXU64=''
a893 3
ccflags_uselargefiles=''
ldflags_uselargefiles=''
libswanted_uselargefiles=''
a926 1
versiononly=''
a930 2
yacc=''
yaccflags=''
a947 3
ccname=''
ccversion=''
perllibs=''
a955 1
archname=''
d972 2
a973 1
glibpth="/lib /usr/lib $xlibpth"
a986 4
archname64=''
ccflags_uselargefiles=''
ldflags_uselargefiles=''
libswanted_uselargefiles=''
d998 1
a998 1
libswanted="$libswanted ucb bsd BSD PW x iconv util"
d1041 1
a1041 1
Please contact me (Perl Maintainers) at perlbug@@perl.org and 
d1340 4
a1343 9
	case "$extractsh" in
	true) ;;
	*)
		if test ! -t 0; then
			echo "Say 'sh Configure', not 'sh <Configure'"
			exit 1
		fi
		;;
	esac
a1393 1
	 .)	;;
d1577 1
a1577 1
and contact the author (perlbug@@perl.org).
a1739 37
xversion=`awk '/define[ 	]+PERL_VERSION/ {print $3}' $rsrc/patchlevel.h`
case "$usedevel" in
$define|true|[yY]*) ;;
*) case "$xversion" in
   *[13579])
	cat >&4 <<EOH
*** WHOA THERE!!! ***

    This is an UNSTABLE DEVELOPMENT release.
    The version of this $package distribution is $xversion, that is, odd,
    (as opposed to even) and that signifies a development release.
    If you want a maintenance release, you want an even-numbered version.

    Do ***NOT*** install this into production use.
    Data corruption and crashes are possible.

    It is most seriously suggested that you do not continue any further
    unless you want to help in developing and debugging Perl.

    If you *still* want to build perl, you can answer 'y' now,
    or pass -Dusedevel to Configure.

EOH
	rp='Do you really want to continue?'
	dflt='n'
	. ./myread
	case "$ans" in
	[yY]) echo >&4 "Okay, continuing." ;;
	*) echo >&4 "Okay, bye."
	   exit 1
	   ;;
	esac
	;;
    esac
    ;;
esac

d1802 1
a1802 1
have, let me (perlbug@@perl.org) know how I blew it.
a1887 1
bison
a1986 1
		echo "Using the test built into your sh."
a2022 60
cat <<EOS >checkcc
$startsh
EOS
cat <<'EOSC' >>checkcc
case "$cc" in
'') ;;
*)  $rm -f try try.*
    $cat >try.c <<EOM
int main(int argc, char *argv[]) {
  return 0;
}
EOM
    if $cc -o try $ccflags try.c; then
       :
    else
        echo "Uh-oh, the C compiler '$cc' doesn't seem to be working." >&4
        despair=yes
        trygcc=yes
        case "$cc" in
        *gcc*) trygcc=no ;;
        esac
        case "`$cc -v -c try.c 2>&1`" in
        *gcc*) trygcc=no ;;
        esac
        if $test X"$trygcc" = Xyes; then
            if gcc -o try -c try.c; then
                echo " "
                echo "You seem to have a working gcc, though." >&4
                rp="Would you like to use it?"
                dflt=y
                if $test -f myread; then
                    . ./myread
                else
                    if $test -f UU/myread; then
                        . ./UU/myread
                    else
                        echo "Cannot find myread, sorry.  Aborting." >&2
                        exit 1
                    fi
                fi  
                case "$ans" in
                [yY]*) cc=gcc; ccname=gcc; ccflags=''; despair=no ;;
                esac
            fi
        fi
        if $test X"$despair" = Xyes; then
	    $cat >&4 <<EOM
You need to find a working C compiler.
Either (purchase and) install the C compiler supplied by your OS vendor,
or for a free C compiler try http://gcc.gnu.org/
I cannot continue any further, aborting.
EOM
            exit 1
        fi
    fi
    $rm -f try try.*
    ;;
esac
EOSC

a2034 87
: determine whether symbolic links are supported
echo " "
case "$lns" in
*"ln -s")
	echo "Checking how to test for symbolic links..." >&4
	$lns blurfl sym
	if $test "X$issymlink" = X; then
		sh -c "PATH= test -h sym" >/dev/null 2>&1
		if test $? = 0; then
			issymlink="test -h"
		fi		
	fi
	if $test "X$issymlink" = X; then
		if  $test -h >/dev/null 2>&1; then
			issymlink="$test -h"
			echo "Your builtin 'test -h' may be broken, I'm using external '$test -h'." >&4
		fi		
	fi
	if $test "X$issymlink" = X; then
		if $test -L sym 2>/dev/null; then
			issymlink="$test -L"
		fi
	fi
	if $test "X$issymlink" != X; then
		echo "You can test for symbolic links with '$issymlink'." >&4
	else
		echo "I do not know how you can test for symbolic links." >&4
	fi
	$rm -f blurfl sym
	;;
*)	echo "No symbolic links, so not testing for their testing..." >&4
	;;
esac
echo " "


case "$mksymlinks" in
$define|true|[yY]*)
	case "$src" in
	''|'.')	echo "Cannot create symlinks in the original directory." >&4
		exit 1
		;;
	*)	case "$lns:$issymlink" in
		*"ln -s:"*"test -"?)
			echo "Creating the symbolic links..." >&4
			echo "(First creating the subdirectories...)" >&4
			cd ..
			awk '{print $1}' $src/MANIFEST | grep / | sed 's:/[^/]*$::' | sort -u | while true; do
				read directory
				test -z "$directory" && break
				mkdir -p $directory
			done
			# Sanity check 1.
			if test ! -d t/base; then
				echo "Failed to create the subdirectories.  Aborting." >&4
				exit 1
			fi
			echo "(Then creating the symlinks...)" >&4
			awk '{print $1}' $src/MANIFEST | while true; do
				read filename
				test -z "$filename" && break
				if test -f $filename; then
					if $issymlink $filename; then
						rm -f $filename
					fi
				fi
				if test -f $filename; then
					echo "$filename already exists, not symlinking."
				else
					ln -s $src/$filename $filename
				fi
			done
			# Sanity check 2.
			if test ! -f t/base/cond.t; then
				echo "Failed to create the symlinks.  Aborting." >&4
				exit 1
			fi
			cd UU
			;;
		*)	echo "(I cannot figure out how to do symbolic links, ignoring mksymlinks)." >&4
			;;
		esac
		;;
	esac
	;;
esac

d2137 1
a2137 4
	n*|N*) echo "OK, I'll ignore it."
		mv config.sh config.sh.old
		myuname="$newmyuname"
		;;
a2154 1
. ./UU/checkcc
d2165 1
a2165 1
	: tests or hints, please send them to perlbug@@perl.org
a2300 1
		nonstop-ux) osname=nonstopux ;;
d2542 1
a2702 13
case "$useithreads$use5005threads" in
"$define$define")
	$cat >&4 <<EOM

You cannot have both the ithreads and the 5.005 threads enabled
at the same time.  Disabling the 5.005 threads since they are
much less stable than the ithreads.

EOM
	use5005threads="$undef"
	;;
esac

d2759 164
d2940 1
a2940 1
elif test `echo abc | $tr a-z A-Z` = Abc ; then
a2978 2
: Note that this also -- wrongly -- detects e.g. dos-djgpp, which also uses
: semicolon as a patch separator
a2984 1
(Or you may be running DOS with DJGPP.)
d3015 45
a3059 7
case "$cc" in
'') dflt=cc;;
*) dflt="$cc";;
esac
rp="Use which C compiler?"
. ./myread
cc="$ans"
a3065 2
. ./checkcc

d3081 1
a3081 1
if $cc -o gccvers $ccflags $ldflags gccvers.c; then
a3085 1
	    ccname=gcc	
a3102 24
case "$gccversion" in
'') gccosandvers='' ;;
*) gccshortvers=`echo "$gccversion"|sed 's/ .*//'`
   gccosandvers=`$cc -v 2>&1|grep '/specs$'|sed "s!.*/[^-/]*-[^-/]*-\([^-/]*\)/$gccshortvers/specs!\1!"`
   gccshortvers=''
   case "$gccosandvers" in
   $osname) gccosandvers='' ;; # linux gccs seem to have no linux osvers, grr
   $osname$osvers) ;; # looking good
   $osname*) cat <<EOM >&4

*** WHOA THERE!!! ***

    Your gcc has not been compiled for the exact release of
    your operating system ($gccosandvers versus $osname$osvers).

    In general it is a good idea to keep gcc synchronized with
    the operating system because otherwise serious problems
    may ensue when trying to compile software, like Perl.

    I'm trying to be optimistic here, though, and will continue.
    If later during the configuration and build icky compilation
    problems appear (headerfile conflicts being the most common
    manifestation), I suggest reinstalling the gcc to match
    your operating system release.
d3104 4
a3107 8
EOM
      ;;
   *) gccosandvers='' ;; # failed to parse, better be silent
   esac
   ;;
esac
case "$ccname" in
'') ccname="$cc" ;;
d3110 14
a3123 14
: see how we invoke the C preprocessor
echo " "
echo "Now, how can we feed standard input to your C preprocessor..." >&4
cat <<'EOT' >testcpp.c
#define ABC abc
#define XYZ xyz
ABC.XYZ
EOT
cd ..
if test ! -f cppstdin; then
	if test "X$osname" = "Xaix" -a "X$gccversion" = X; then
		# AIX cc -E doesn't show the absolute headerfile
		# locations but we'll cheat by using the -M flag.
		echo 'cat >.$$.c; rm -f .$$.u; '"$cc"' ${1+"$@@"} -M -c .$$.c 2>/dev/null; test -s .$$.u && awk '"'"'$2 ~ /\.h$/ { print "# 0 \""$2"\"" }'"'"' .$$.u; rm -f .$$.o .$$.u; '"$cc"' -E ${1+"$@@"} .$$.c; rm .$$.c' > cppstdin
d3125 15
a3139 1
		echo 'cat >.$$.c; '"$cc"' -E ${1+"$@@"} .$$.c; rm .$$.c' >cppstdin
d3141 8
a3148 7
else
	echo "Keeping your $hint cppstdin wrapper."
fi
chmod 755 cppstdin
wrapper=`pwd`/cppstdin
ok='false'
cd UU
d3150 14
a3163 183
if $test "X$cppstdin" != "X" && \
	$cppstdin $cppminus <testcpp.c >testcpp.out 2>&1 && \
	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1
then
	echo "You used to use $cppstdin $cppminus so we'll use that again."
	case "$cpprun" in
	'') echo "But let's see if we can live without a wrapper..." ;;
	*)
		if $cpprun $cpplast <testcpp.c >testcpp.out 2>&1 && \
			$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1
		then
			echo "(And we'll use $cpprun $cpplast to preprocess directly.)"
			ok='true'
		else
			echo "(However, $cpprun $cpplast does not work, let's see...)"
		fi
		;;
	esac
else
	case "$cppstdin" in
	'') ;;
	*)
		echo "Good old $cppstdin $cppminus does not seem to be of any help..."
		;;
	esac
fi

if $ok; then
	: nothing
elif echo 'Maybe "'"$cc"' -E" will work...'; \
	$cc -E <testcpp.c >testcpp.out 2>&1; \
	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
	echo "Yup, it does."
	x_cpp="$cc -E"
	x_minus='';
elif echo 'Nope...maybe "'"$cc"' -E -" will work...'; \
	$cc -E - <testcpp.c >testcpp.out 2>&1; \
	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
	echo "Yup, it does."
	x_cpp="$cc -E"
	x_minus='-';
elif echo 'Nope...maybe "'"$cc"' -P" will work...'; \
	$cc -P <testcpp.c >testcpp.out 2>&1; \
	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
	echo "Yipee, that works!"
	x_cpp="$cc -P"
	x_minus='';
elif echo 'Nope...maybe "'"$cc"' -P -" will work...'; \
	$cc -P - <testcpp.c >testcpp.out 2>&1; \
	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
	echo "At long last!"
	x_cpp="$cc -P"
	x_minus='-';
elif echo 'No such luck, maybe "'$cpp'" will work...'; \
	$cpp <testcpp.c >testcpp.out 2>&1; \
	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
	echo "It works!"
	x_cpp="$cpp"
	x_minus='';
elif echo 'Nixed again...maybe "'$cpp' -" will work...'; \
	$cpp - <testcpp.c >testcpp.out 2>&1; \
	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
	echo "Hooray, it works!  I was beginning to wonder."
	x_cpp="$cpp"
	x_minus='-';
elif echo 'Uh-uh.  Time to get fancy.  Trying a wrapper...'; \
	$wrapper <testcpp.c >testcpp.out 2>&1; \
	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
	x_cpp="$wrapper"
	x_minus=''
	echo "Eureka!"
else
	dflt=''
	rp="No dice.  I can't find a C preprocessor.  Name one:"
	. ./myread
	x_cpp="$ans"
	x_minus=''
	$x_cpp <testcpp.c >testcpp.out 2>&1
	if $contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
		echo "OK, that will do." >&4
	else
echo "Sorry, I can't get that to work.  Go find one and rerun Configure." >&4
		exit 1
	fi
fi

case "$ok" in
false)
	cppstdin="$x_cpp"
	cppminus="$x_minus"
	cpprun="$x_cpp"
	cpplast="$x_minus"
	set X $x_cpp
	shift
	case "$1" in
	"$cpp")
		echo "Perhaps can we force $cc -E using a wrapper..."
		if $wrapper <testcpp.c >testcpp.out 2>&1; \
			$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1
		then
			echo "Yup, we can."
			cppstdin="$wrapper"
			cppminus='';
		else
			echo "Nope, we'll have to live without it..."
		fi
		;;
	esac
	case "$cpprun" in
	"$wrapper")
		cpprun=''
		cpplast=''
		;;
	esac
	;;
esac

case "$cppstdin" in
"$wrapper"|'cppstdin') ;;
*) $rm -f $wrapper;;
esac
$rm -f testcpp.c testcpp.out

: decide how portable to be.  Allow command line overrides.
case "$d_portable" in
"$undef") ;;
*)	d_portable="$define" ;;
esac

: set up shell script to do ~ expansion
cat >filexp <<EOSS
$startsh
: expand filename
case "\$1" in
 ~/*|~)
	echo \$1 | $sed "s|~|\${HOME-\$LOGDIR}|"
	;;
 ~*)
	if $test -f /bin/csh; then
		/bin/csh -f -c "glob \$1"
		failed=\$?
		echo ""
		exit \$failed
	else
		name=\`$expr x\$1 : '..\([^/]*\)'\`
		dir=\`$sed -n -e "/^\${name}:/{s/^[^:]*:[^:]*:[^:]*:[^:]*:[^:]*:\([^:]*\).*"'\$'"/\1/" -e p -e q -e '}' </etc/passwd\`
		if $test ! -d "\$dir"; then
			me=\`basename \$0\`
			echo "\$me: can't locate home directory for: \$name" >&2
			exit 1
		fi
		case "\$1" in
		*/*)
			echo \$dir/\`$expr x\$1 : '..[^/]*/\(.*\)'\`
			;;
		*)
			echo \$dir
			;;
		esac
	fi
	;;
*)
	echo \$1
	;;
esac
EOSS
chmod +x filexp
$eunicefix filexp

: now set up to get a file name
cat <<EOS >getfile
$startsh
EOS
cat <<'EOSC' >>getfile
tilde=''
fullpath=''
already=''
skip=''
none_ok=''
exp_file=''
nopath_ok=''
orig_rp="$rp"
orig_dflt="$dflt"
d3170 1
a3170 1
	expr $fn : '.*(\(.*\)).*' | $tr ',' $trnl >getfile.ok
a3268 1
			[a-zA-Z]:/*) value="$ansexp" ;;
d3396 1
a3396 1
	if cc -E usr.c > usr.out && $contains / usr.out >/dev/null 2>&1; then
d3429 24
a3452 11
: Set private lib path
case "$plibpth" in
'') if ./mips; then
		plibpth="$incpath/usr/lib /usr/local/lib /usr/ccs/lib"
	fi;;
esac
case "$libpth" in
' ') dlist='';;
'') dlist="$loclibpth $plibpth $glibpth";;
*) dlist="$libpth";;
esac
d3454 147
a3600 12
: Now check and see which directories actually exist, avoiding duplicates
libpth=''
for xxx in $dlist
do
    if $test -d $xxx; then
		case " $libpth " in
		*" $xxx "*) ;;
		*) libpth="$libpth $xxx";;
		esac
    fi
done
$cat <<'EOM'
d3883 2
a3884 2
                        *" -I$thisincl "*);;
                        *) dflt="$dflt -I$thisincl ";;
a3919 1

d4052 1
a4052 1
set X $cc -o try $optimize $ccflags $ldflags try.c $libs
d4071 2
a4072 2
if $sh -c "$cc -o try $optimize $ccflags $ldflags try.c $libs" >>try.msg 2>&1; then
	if $sh -c './try' >>try.msg 2>&1; then
d4183 1
a4183 1
$cc -o ${mc_file} $optimize $ccflags $ldflags $* ${mc_file}.c $libs > /dev/null 2>&1;'
d4188 1
a4188 1
$cc -o ${mc_file} $optimize $ccflags $ldflags $* ${mc_file}.c $libs;'
d4593 1
d4595 10
a4604 16
echo "Checking for GNU C Library..." >&4
cat >gnulibc.c <<EOM
#include <stdio.h>
int main()
{
#ifdef __GLIBC__
    exit(0);
#else
    exit(1);
#endif
}
EOM
set gnulibc
if eval $compile_ok && ./gnulibc; then
	val="$define"
	echo "You are using the GNU C Library"
d4606 1
a4606 2
	val="$undef"
	echo "You are not using the GNU C Library"
d4608 43
a4650 13
$rm -f gnulibc*
set d_gnulibc
eval $setvar

: see if nm is to be used to determine whether a symbol is defined or not
case "$usenm" in
'')
	dflt=''
	case "$d_gnulibc" in
	"$define")
		echo " "
		echo "nm probably won't work on the GNU C Library." >&4
		dflt=n
d4652 8
a4659 18
	esac
	case "$dflt" in
	'') 
		if $test "$osname" = aix -a ! -f /lib/syscalls.exp; then
			echo " "
			echo "Whoops!  This is an AIX system without /lib/syscalls.exp!" >&4
			echo "'nm' won't be sufficient on this sytem." >&4
			dflt=n
		fi
		;;
	esac
	case "$dflt" in
	'') dflt=`$egrep 'inlibc|csym' $rsrc/Configure | wc -l 2>/dev/null`
		if $test $dflt -gt 20; then
			dflt=y
		else
			dflt=n
		fi
d4662 6
d4670 1
a4670 4
	case "$usenm" in
	true|$define) dflt=y;;
	*) dflt=n;;
	esac
d4675 19
a4693 47
I can use $nm to extract the symbols from your C libraries. This
is a time consuming task which may generate huge output on the disk (up
to 3 megabytes) but that should make the symbols extraction faster. The
alternative is to skip the 'nm' extraction part and to compile a small
test program instead to determine whether each symbol is present. If
you have a fast C compiler and/or if your 'nm' output cannot be parsed,
this may be the best solution.

You probably shouldn't let me use 'nm' if you are using the GNU C Library.

EOM
rp="Shall I use $nm to extract C symbols from the libraries?"
. ./myread
case "$ans" in
[Nn]*) usenm=false;;
*) usenm=true;;
esac

runnm=$usenm
case "$reuseval" in
true) runnm=false;;
esac

: nm options which may be necessary
case "$nm_opt" in
'') if $test -f /mach_boot; then
		nm_opt=''	# Mach
	elif $test -d /usr/ccs/lib; then
		nm_opt='-p'	# Solaris (and SunOS?)
	elif $test -f /dgux; then
		nm_opt='-p'	# DG-UX
	elif $test -f /lib64/rld; then
		nm_opt='-p'	# 64-bit Irix
	else
		nm_opt=''
	fi;;
esac

: nm options which may be necessary for shared libraries but illegal
: for archive libraries.  Thank you, Linux.
case "$nm_so_opt" in
'')	case "$myuname" in
	*linux*)
		if $nm --help | $grep 'dynamic' > /dev/null 2>&1; then
			nm_so_opt='--dynamic'
		fi
		;;
d4697 2
d4700 1
a4700 3
case "$runnm" in
true)
: get list of predefined functions in a handy place
d4702 8
a4709 5
case "$libc" in
'') libc=unknown
	case "$libs" in
	*-lc_s*) libc=`./loc libc_s$_a $libc $libpth`
	esac
d4712 2
a4713 78
libnames='';
case "$libs" in
'') ;;
*)  for thislib in $libs; do
	case "$thislib" in
	-lc|-lc_s)
		: Handle C library specially below.
		;;
	-l*)
		thislib=`echo $thislib | $sed -e 's/^-l//'`
		if try=`./loc lib$thislib.$so.'*' X $libpth`; $test -f "$try"; then
			:
		elif try=`./loc lib$thislib.$so X $libpth`; $test -f "$try"; then
			:
		elif try=`./loc lib$thislib$_a X $libpth`; $test -f "$try"; then
			:
		elif try=`./loc $thislib$_a X $libpth`; $test -f "$try"; then
			:
		elif try=`./loc lib$thislib X $libpth`; $test -f "$try"; then
			:
		elif try=`./loc $thislib X $libpth`; $test -f "$try"; then
			:
		elif try=`./loc Slib$thislib$_a X $xlibpth`; $test -f "$try"; then
			:
		else
			try=''
		fi
		libnames="$libnames $try"
		;;
	*) libnames="$libnames $thislib" ;;
	esac
	done
	;;
esac
xxx=normal
case "$libc" in
unknown)
	set /lib/libc.$so
	for xxx in $libpth; do
		$test -r $1 || set $xxx/libc.$so
		: The messy sed command sorts on library version numbers.
		$test -r $1 || \
			set `echo blurfl; echo $xxx/libc.$so.[0-9]* | \
			tr ' ' $trnl | egrep -v '\.[A-Za-z]*$' | $sed -e '
				h
				s/[0-9][0-9]*/0000&/g
				s/0*\([0-9][0-9][0-9][0-9][0-9]\)/\1/g
				G
				s/\n/ /' | \
			 $sort | $sed -e 's/^.* //'`
		eval set \$$#
	done
	$test -r $1 || set /usr/ccs/lib/libc.$so
	$test -r $1 || set /lib/libsys_s$_a
	;;
*)
	set blurfl
	;;
esac
if $test -r "$1"; then
	echo "Your (shared) C library seems to be in $1."
	libc="$1"
elif $test -r /lib/libc && $test -r /lib/clib; then
	echo "Your C library seems to be in both /lib/clib and /lib/libc."
	xxx=apollo
	libc='/lib/clib /lib/libc'
	if $test -r /lib/syslib; then
		echo "(Your math library is in /lib/syslib.)"
		libc="$libc /lib/syslib"
	fi
elif $test -r "$libc" || (test -h "$libc") >/dev/null 2>&1; then
	echo "Your C library seems to be in $libc, as you said before."
elif $test -r $incpath/usr/lib/libc$_a; then
	libc=$incpath/usr/lib/libc$_a;
	echo "Your C library seems to be in $libc.  That's fine."
elif $test -r /lib/libc$_a; then
	libc=/lib/libc$_a;
	echo "Your C library seems to be in $libc.  You're normal."
d4715 1
a4715 19
	if tans=`./loc libc$_a blurfl/dyick $libpth`; $test -r "$tans"; then
		:
	elif tans=`./loc libc blurfl/dyick $libpth`; $test -r "$tans"; then
		libnames="$libnames "`./loc clib blurfl/dyick $libpth`
	elif tans=`./loc clib blurfl/dyick $libpth`; $test -r "$tans"; then
		:
	elif tans=`./loc Slibc$_a blurfl/dyick $xlibpth`; $test -r "$tans"; then
		:
	elif tans=`./loc Mlibc$_a blurfl/dyick $xlibpth`; $test -r "$tans"; then
		:
	else
		tans=`./loc Llibc$_a blurfl/dyick $xlibpth`
	fi
	if $test -r "$tans"; then
		echo "Your C library seems to be in $tans, of all places."
		libc=$tans
	else
		libc='blurfl'
	fi
a4716 3
if $test $xxx = apollo -o -r "$libc" || (test -h "$libc") >/dev/null 2>&1; then
	dflt="$libc"
	cat <<EOM
d4718 7
a4724 2
If the guess above is wrong (which it might be if you're using a strange
compiler, or your machine supports multiple models), you can override it here.
d4727 4
d4732 1
a4732 4
	dflt=''
	echo $libpth | $tr ' ' $trnl | $sort | $uniq > libpath
	cat >&4 <<EOM
I can't seem to find your C library.  I've looked in the following places:
d4734 4
a4737 5
EOM
	$sed 's/^/	/' libpath
	cat <<EOM

None of these seems to contain your C library. I need to get its name...
d4740 4
d4745 2
a4746 2
fn=f
rp='Where is your C library?'
d4748 2
a4749 1
libc="$ans"
d4751 25
a4775 11
echo " "
echo $libc $libnames | $tr ' ' $trnl | $sort | $uniq > libnames
set X `cat libnames`
shift
xxx=files
case $# in 1) xxx=file; esac
echo "Extracting names from the following $xxx for later perusal:" >&4
echo " "
$sed 's/^/	/' libnames >&4
echo " "
$echo $n "This may take a while...$c" >&4
a4776 6
for file in $*; do
	case $file in
	*$so*) $nm $nm_so_opt $nm_opt $file 2>/dev/null;;
	*) $nm $nm_opt $file 2>/dev/null;;
	esac
done >libc.tmp
d4778 10
a4787 62
$echo $n ".$c"
$grep fprintf libc.tmp > libc.ptf
xscan='eval "<libc.ptf $com >libc.list"; $echo $n ".$c" >&4'
xrun='eval "<libc.tmp $com >libc.list"; echo "done" >&4'
xxx='[ADTSIW]'
if com="$sed -n -e 's/__IO//' -e 's/^.* $xxx  *_[_.]*//p' -e 's/^.* $xxx  *//p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e 's/^__*//' -e 's/^\([a-zA-Z_0-9$]*\).*xtern.*/\1/p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e '/|UNDEF/d' -e '/FUNC..GL/s/^.*|__*//p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e 's/^.* D __*//p' -e 's/^.* D //p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e 's/^_//' -e 's/^\([a-zA-Z_0-9]*\).*xtern.*text.*/\1/p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e 's/^.*|FUNC |GLOB .*|//p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$grep '|' | $sed -n -e '/|COMMON/d' -e '/|DATA/d' \
				-e '/ file/d' -e 's/^\([^ 	]*\).*/\1/p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e 's/^.*|FUNC |GLOB .*|//p' -e 's/^.*|FUNC |WEAK .*|//p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e 's/^__//' -e '/|Undef/d' -e '/|Proc/s/ .*//p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e 's/^.*|Proc .*|Text *| *//p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e '/Def. Text/s/.* \([^ ]*\)\$/\1/p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e 's/^[-0-9a-f ]*_\(.*\)=.*/\1/p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e 's/.*\.text n\ \ \ \.//p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="sed -n -e 's/^__.*//' -e 's/[       ]*D[    ]*[0-9]*.*//p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
d4789 6
a4794 49
	$nm -p $* 2>/dev/null >libc.tmp
	$grep fprintf libc.tmp > libc.ptf
	if com="$sed -n -e 's/^.* [ADTSIW]  *_[_.]*//p' -e 's/^.* [ADTSIW] //p'";\
		eval $xscan; $contains '^fprintf$' libc.list >/dev/null 2>&1
	then
		nm_opt='-p'
		eval $xrun
	else
		echo " "
		echo "$nm didn't seem to work right. Trying $ar instead..." >&4
		com=''
		if $ar t $libc > libc.tmp && $contains '^fprintf$' libc.tmp >/dev/null 2>&1; then
			for thisname in $libnames $libc; do
				$ar t $thisname >>libc.tmp
			done
			$sed -e "s/\\$_o\$//" < libc.tmp > libc.list
			echo "Ok." >&4
		elif test "X$osname" = "Xos2" && $ar tv $libc > libc.tmp; then
			# Repeat libc to extract forwarders to DLL entries too
			for thisname in $libnames $libc; do
				$ar tv $thisname >>libc.tmp
				# Revision 50 of EMX has bug in $ar.
				# it will not extract forwarders to DLL entries
				# Use emximp which will extract exactly them.
				emximp -o tmp.imp $thisname \
				    2>/dev/null && \
				    $sed -e 's/^\([_a-zA-Z0-9]*\) .*$/\1/p' \
				    < tmp.imp >>libc.tmp
				$rm tmp.imp
			done
			$sed -e "s/\\$_o\$//" -e 's/^ \+//' < libc.tmp > libc.list
			echo "Ok." >&4
		else
			echo "$ar didn't seem to work right." >&4
			echo "Maybe this is a Cray...trying bld instead..." >&4
			if bld t $libc | $sed -e 's/.*\///' -e "s/\\$_o:.*\$//" > libc.list
			then
				for thisname in $libnames; do
					bld t $libnames | \
					$sed -e 's/.*\///' -e "s/\\$_o:.*\$//" >>libc.list
					$ar t $thisname >>libc.tmp
				done
				echo "Ok." >&4
			else
				echo "That didn't work either.  Giving up." >&4
				exit 1
			fi
		fi
	fi
d4796 23
a4818 5
nm_extract="$com"
if $test -f /lib/syscalls.exp; then
	echo " "
	echo "Also extracting names from /lib/syscalls.exp for good ole AIX..." >&4
	$sed -n 's/^\([^ 	]*\)[ 	]*syscall[0-9]*$/\1/p' /lib/syscalls.exp >>libc.list
a4819 3
;;
esac
$rm -f libnames libpath
d4821 10
a4830 69
: is a C symbol defined?
csym='tlook=$1;
case "$3" in
-v) tf=libc.tmp; tc=""; tdc="";;
-a) tf=libc.tmp; tc="[0]"; tdc="[]";;
*) tlook="^$1\$"; tf=libc.list; tc="()"; tdc="()";;
esac;
tx=yes;
case "$reuseval-$4" in
true-) ;;
true-*) tx=no; eval "tval=\$$4"; case "$tval" in "") tx=yes;; esac;;
esac;
case "$tx" in
yes)
	case "$runnm" in
	true)
		if $contains $tlook $tf >/dev/null 2>&1;
		then tval=true;
		else tval=false;
		fi;;
	*)
		echo "int main() { extern short $1$tdc; printf(\"%hd\", $1$tc); }" > t.c;
		if $cc -o t $optimize $ccflags $ldflags t.c $libs >/dev/null 2>&1;
		then tval=true;
		else tval=false;
		fi;
		$rm -f t t.c;;
	esac;;
*)
	case "$tval" in
	$define) tval=true;;
	*) tval=false;;
	esac;;
esac;
eval "$2=$tval"'

: define an is-in-libc? function
inlibc='echo " "; td=$define; tu=$undef;
sym=$1; var=$2; eval "was=\$$2";
tx=yes;
case "$reuseval$was" in
true) ;;
true*) tx=no;;
esac;
case "$tx" in
yes)
	set $sym tres -f;
	eval $csym;
	case "$tres" in
	true)
		echo "$sym() found." >&4;
		case "$was" in $undef) . ./whoa; esac; eval "$var=\$td";;
	*)
		echo "$sym() NOT found." >&4;
		case "$was" in $define) . ./whoa; esac; eval "$var=\$tu";;
	esac;;
*)
	case "$was" in
	$define) echo "$sym() found." >&4;;
	*) echo "$sym() NOT found." >&4;;
	esac;;
esac'

: see if sqrtl exists
set sqrtl d_sqrtl
eval $inlibc

case "$ccflags" in
*-DUSE_LONG_DOUBLE*|*-DUSE_MORE_BITS*) uselongdouble="$define" ;;
d4832 4
d4837 8
a4844 3
case "$uselongdouble" in
$define|true|[yY]*)	dflt='y';;
*) dflt='n';;
d4846 2
a4847 1
cat <<EOM
d4849 2
a4850 2
Perl can be built to take advantage of long doubles which
(if available) may give more accuracy and range for floating point numbers.
a4851 1
If this doesn't make any sense to you, just accept the default '$dflt'.
d4853 31
a4883 5
rp='Try to use long doubles if available?'
. ./myread
case "$ans" in
y|Y) 	val="$define"	;;
*)      val="$undef"	;;
d4885 34
a4918 2
set uselongdouble
eval $setvar
d4920 3
a4922 3
case "$uselongdouble" in
true|[yY]*) uselongdouble="$define" ;;
esac
a4923 11
case "$uselongdouble" in
$define)
: Look for a hint-file generated 'call-back-unit'.  If the
: user has specified that long doubles should be used,
: we may need to set or change some other defaults.
	if $test -f uselongdouble.cbu; then
		echo "Your platform has some specific hints for long doubles, using them..."
		. ./uselongdouble.cbu
	else
		$cat <<EOM
(Your platform doesn't have any specific hints for long doubles.)
d4925 20
a4944 1
	fi
a4947 3
case "$uselongdouble:$d_sqrtl" in
$define:$undef)
		$cat <<EOM >&4
d4949 9
a4957 3
*** You requested the use of long doubles but you do not seem to have
*** the mathematic functions for long doubles.  I'm disabling the use
*** of long doubles.
a4959 3
	uselongdouble=$undef
	;;
esac
d4961 8
a4968 17
: check for length of double
echo " "
case "$doublesize" in
'')
	echo "Checking to see how big your double precision numbers are..." >&4
	$cat >try.c <<'EOCP'
#include <stdio.h>
int main()
{
    printf("%d\n", (int)sizeof(double));
    exit(0);
}
EOCP
	set try
	if eval $compile_ok; then
		doublesize=`./try`
		echo "Your double is $doublesize bytes long."
d4970 40
a5009 3
		dflt='8'
		echo "(I can't seem to compile the test program.  Guessing...)"
		rp="What is the size of a double precision number (in bytes)?"
d5011 4
a5014 1
		doublesize="$ans"
a5015 12
	;;
esac
$rm -f try.c try

: check for long doubles
echo " "
echo "Checking to see if you have long double..." >&4
echo 'int main() { long double x = 7.0; }' > try.c
set try
if eval $compile; then
	val="$define"
	echo "You have long double."
d5017 2
a5019 1
	echo "You do not have long double."
d5021 1
a5021 2
$rm try.*
set d_longdbl
d5024 1
a5024 31
: check for length of long double
case "${d_longdbl}${longdblsize}" in
$define)
	echo " "
	echo "Checking to see how big your long doubles are..." >&4
	$cat >try.c <<'EOCP'
#include <stdio.h>
int main()
{
	printf("%d\n", sizeof(long double));
}
EOCP
	set try
	set try
	if eval $compile; then
		longdblsize=`./try$exe_ext`
		echo "Your long doubles are $longdblsize bytes long."
	else
		dflt='8'
		echo " "
		echo "(I can't seem to compile the test program.  Guessing...)" >&4
		rp="What is the size of a long double (in bytes)?"
		. ./myread
		longdblsize="$ans"
	fi
	if $test "X$doublesize" = "X$longdblsize"; then
		echo "(That isn't any different from an ordinary double.)"
	fi	
	;;
esac
$rm -f try.* try
d5026 1
a5026 1
: determine the architecture name
d5028 6
a5033 15
if xxx=`./loc arch blurfl $pth`; $test -f "$xxx"; then
	tarch=`arch`"-$osname"
elif xxx=`./loc uname blurfl $pth`; $test -f "$xxx" ; then
	if uname -m > tmparch 2>&1 ; then
		tarch=`$sed -e 's/ *$//' -e 's/ /_/g' \
			-e 's/$/'"-$osname/" tmparch`
	else
		tarch="$osname"
	fi
	$rm -f tmparch
else
	tarch="$osname"
fi
case "$myarchname" in
''|"$tarch") ;;
d5035 7
a5041 109
	echo "(Your architecture name used to be $myarchname.)"
	archname=''
	;;
esac
myarchname="$tarch"
case "$archname" in
'') dflt="$tarch";;
*) dflt="$archname";;
esac
rp='What is your architecture name'
. ./myread
archname="$ans"
case "$usethreads" in
$define)
	echo "Threads selected." >&4
	case "$archname" in
        *-thread*) echo "...and architecture name already has -thread." >&4
                ;;
        *)      archname="$archname-thread"
                echo "...setting architecture name to $archname." >&4
                ;;
        esac
	;;
esac
case "$usemultiplicity" in
$define)
	echo "Multiplicity selected." >&4
	case "$archname" in
        *-multi*) echo "...and architecture name already has -multi." >&4
                ;;
        *)      archname="$archname-multi"
                echo "...setting architecture name to $archname." >&4
                ;;
        esac
	;;
esac
case "$use64bitint$use64bitall" in
*"$define"*)
	case "$archname64" in
	'')
		echo "This architecture is naturally 64-bit, not changing architecture name." >&4
		;;
	*)
		case "$use64bitint" in
		"$define") echo "64 bit integers selected." >&4 ;;
		esac
		case "$use64bitall" in
		"$define") echo "Maximal 64 bitness selected." >&4 ;;
		esac
		case "$archname" in
	        *-$archname64*) echo "...and architecture name already has $archname64." >&4
	                ;;
	        *)      archname="$archname-$archname64"
	                echo "...setting architecture name to $archname." >&4
	                ;;
	        esac
		;;
	esac
esac
case "$uselongdouble" in
$define)
	echo "Long doubles selected." >&4
	case "$longdblsize" in
	$doublesize)
		"...but long doubles are equal to doubles, not changing architecture name." >&4
		;;
	*)
		case "$archname" in
	        *-ld*) echo "...and architecture name already has -ld." >&4
	                ;;
	        *)      archname="$archname-ld"
	                echo "...setting architecture name to $archname." >&4
        	        ;;
	        esac
		;;
	esac
	;;
esac
case "$useperlio" in
$define)
	echo "Perlio selected." >&4
	case "$archname" in
        *-perlio*) echo "...and architecture name already has -perlio." >&4
                ;;
        *)      archname="$archname-perlio"
                echo "...setting architecture name to $archname." >&4
                ;;
        esac
	;;
esac

: determine root of directory hierarchy where package will be installed.
case "$prefix" in
'')
	dflt=`./loc . /usr/local /usr/local /local /opt /usr`
	;;
*)
	dflt="$prefix"
	;;
esac
$cat <<EOM

By default, $package will be installed in $dflt/bin, manual pages
under $dflt/man, etc..., i.e. with $dflt as prefix for all
installation directories. Typically this is something like /usr/local.
If you wish to have binaries under /usr/bin but other parts of the
installation under /usr/local, that's ok: you will be prompted
separately for each of the installation directories, the prefix being
only used to set the defaults.
d5044 6
a5049 7
fn=d~
rp='Installation prefix to use?'
. ./getfile
oldprefix=''
case "$prefix" in
'') ;;
*)
d5051 2
a5052 2
	"$prefix") ;;
	*) oldprefix="$prefix";;
d5056 2
a5057 2
prefix="$ans"
prefixexp="$ansexp"
d5059 1
a5059 1
: is AFS running?
d5061 41
a5101 7
case "$afs" in
$define|true)	afs=true ;;
$undef|false)	afs=false ;;
*)	if test -d /afs; then
		afs=true
	else
		afs=false
d5103 22
a5124 6
	;;
esac
if $afs; then
	echo "AFS may be running... I'll be extra cautious then..." >&4
else
	echo "AFS does not seem to be running..." >&4
d5126 3
d5130 29
a5158 3
: determine installation prefix for where package is to be installed.
if $afs; then 
$cat <<EOM
d5160 3
a5162 3
Since you are running AFS, I need to distinguish the directory in which
files will reside from the directory in which they are installed (and from
which they are presumably copied to the former directory by occult means).
d5164 3
a5166 7
EOM
	case "$installprefix" in
	'') dflt=`echo $prefix | sed 's#^/afs/#/afs/.#'`;;
	*) dflt="$installprefix";;
	esac
else
$cat <<EOM
d5168 24
a5191 9
In some special cases, particularly when building $package for distribution,
it is convenient to distinguish between the directory in which files should 
be installed from the directory ($prefix) in which they 
will eventually reside.  For most users, these two directories are the same.

EOM
	case "$installprefix" in
	'') dflt=$prefix ;;
	*) dflt=$installprefix;;
a5192 60
fi
fn=d~
rp='What installation prefix should I use for installing files?'
. ./getfile
installprefix="$ans"
installprefixexp="$ansexp"

: set the prefixit variable, to compute a suitable default value
prefixit='case "$3" in
""|none)
	case "$oldprefix" in
	"") eval "$1=\"\$$2\"";;
	*)
		case "$3" in
		"") eval "$1=";;
		none)
			eval "tp=\"\$$2\"";
			case "$tp" in
			""|" ") eval "$1=\"\$$2\"";;
			*) eval "$1=";;
			esac;;
		esac;;
	esac;;
*)
	eval "tp=\"$oldprefix-\$$2-\""; eval "tp=\"$tp\"";
	case "$tp" in
	--|/*--|\~*--) eval "$1=\"$prefix/$3\"";;
	/*-$oldprefix/*|\~*-$oldprefix/*)
		eval "$1=\`echo \$$2 | sed \"s,^$oldprefix,$prefix,\"\`";;
	*) eval "$1=\"\$$2\"";;
	esac;;
esac'


: get the patchlevel
echo " "
echo "Getting the current patchlevel..." >&4
if $test -r $rsrc/patchlevel.h;then
	revision=`awk '/define[ 	]+PERL_REVISION/ {print $3}' $rsrc/patchlevel.h`
	patchlevel=`awk '/define[ 	]+PERL_VERSION/ {print $3}' $rsrc/patchlevel.h`
	subversion=`awk '/define[ 	]+PERL_SUBVERSION/ {print $3}' $rsrc/patchlevel.h`
	api_revision=`awk '/define[ 	]+PERL_API_REVISION/ {print $3}' $rsrc/patchlevel.h`
	api_version=`awk '/define[ 	]+PERL_API_VERSION/ {print $3}' $rsrc/patchlevel.h`
	api_subversion=`awk '/define[ 	]+PERL_API_SUBVERSION/ {print $3}' $rsrc/patchlevel.h`
else
	revision=0
	patchlevel=0
	subversion=0
	api_revision=0
	api_version=0
	api_subversion=0
fi
$echo "(You have $package version $patchlevel subversion $subversion.)"
case "$osname" in
dos|vms)
	: XXX Should be a Configure test for double-dots in filenames.
	version=`echo $revision $patchlevel $subversion | \
		 $awk '{ printf "%d_%d_%d\n", $1, $2, $3 }'`
	api_versionstring=`echo $api_revision $api_version $api_subversion | \
		 $awk '{ printf "%d_%d_%d\n", $1, $2, $3 }'`
d5195 4
a5198 4
	version=`echo $revision $patchlevel $subversion | \
		 $awk '{ printf "%d.%d.%d\n", $1, $2, $3 }'`
	api_versionstring=`echo $api_revision $api_version $api_subversion | \
		 $awk '{ printf "%d.%d.%d\n", $1, $2, $3 }'`
a5200 5
: Special case the 5.005_xx maintenance series, which used 5.005
: without any subversion label as a subdirectory in $sitelib
if test "${api_revision}${api_version}${api_subversion}" = "550"; then
	api_versionstring='5.005'
fi
d5202 27
a5228 8
: determine installation style
: For now, try to deduce it from prefix unless it is already set.
: Reproduce behavior of 5.005 and earlier, maybe drop that in 5.7.
case "$installstyle" in
'')	case "$prefix" in
		*perl*) dflt='lib';;
		*) dflt='lib/perl5' ;;
	esac
a5229 1
*)	dflt="$installstyle" ;;
d5231 1
a5231 4
: Probably not worth prompting for this since we prompt for all
: the directories individually, and the prompt would be too long and
: confusing anyway.
installstyle=$dflt
d5233 8
a5240 8
: determine where private library files go
: Usual default is /usr/local/lib/perl5/$version.
: Also allow things like /opt/perl/lib/$version, since 
: /opt/perl/lib/perl5... would be redundant.
: The default "style" setting is made in installstyle.U
case "$installstyle" in
*lib/perl5*) set dflt privlib lib/$package/$version ;;
*)	 set dflt privlib lib/$version ;;
d5242 2
a5243 1
eval $prefixit
d5246 5
a5250 2
There are some auxiliary files for $package that need to be put into a
private library directory that is accessible by everyone.
d5252 3
a5254 12
EOM
fn=d~+
rp='Pathname where the private library files will reside?'
. ./getfile
privlib="$ans"
privlibexp="$ansexp"
: Change installation prefix, if necessary.
if $test X"$prefix" != X"$installprefix"; then
	installprivlib=`echo $privlibexp | sed "s#^$prefix#$installprefix#"`
else
	installprivlib="$privlibexp"
fi
d5256 3
a5258 5
: set the prefixup variable, to restore leading tilda escape
prefixup='case "$prefixexp" in
"$prefix") ;;
*) eval "$1=\`echo \$$1 | sed \"s,^$prefixexp,$prefix,\"\`";;
esac'
d5260 37
a5296 10
: determine where public architecture dependent libraries go
set archlib archlib
eval $prefixit
: privlib default is /usr/local/lib/$package/$version
: archlib default is /usr/local/lib/$package/$version/$archname
: privlib may have an optional trailing /share.
tdflt=`echo $privlib | $sed 's,/share$,,'`
tdflt=$tdflt/$archname
case "$archlib" in
'')	dflt=$tdflt
a5297 2
*)	dflt="$archlib"
    ;;
a5298 1
$cat <<EOM
d5300 30
a5329 13
$spackage contains architecture-dependent library files.  If you are
sharing libraries in a heterogeneous environment, you might store
these files in a separate location.  Otherwise, you can just include
them with the rest of the public library files.

EOM
fn=d+~
rp='Where do you want to put the public architecture-dependent libraries?'
. ./getfile
archlib="$ans"
archlibexp="$ansexp"
if $test X"$archlib" = X"$privlib"; then
	d_archlib="$undef"
d5331 1
a5331 1
	d_archlib="$define"
d5333 24
d5359 15
a5373 1
	installarchlib=`echo $archlibexp | sed "s#^$prefix#$installprefix#"`
d5375 2
a5376 1
	installarchlib="$archlibexp"
d5378 3
d5382 11
d5394 1
a5394 8
: Binary compatibility with 5.005 is not possible for builds
: with advanced features
case "$usethreads$usemultiplicity" in
*define*)
	bincompat5005="$undef"
	d_bincompat5005="$undef"
	;;
*)	$cat <<EOM
d5396 2
a5397 3
This version of Perl can be compiled for binary compatibility with 5.005.
If you decide to do so, you will be able to continue using most of the
extensions that were compiled for Perl 5.005.
d5399 1
d5401 1
a5401 20
	case "$bincompat5005$d_bincompat5005" in
	*"$undef"*) dflt=n ;;
	*) dflt=y ;;
	esac
	rp='Binary compatibility with Perl 5.005?'
	. ./myread
	case "$ans" in
	y*) val="$define" ;;
	*)  val="$undef" ;;
	esac
	set d_bincompat5005
	eval $setvar
	case "$d_bincompat5005" in
	"$define")
		bincompat5005="$define"
		;;
	*)	bincompat5005="$undef"
		d_bincompat5005="$undef"
		;;
	esac
d5405 41
a5446 1
: see if setuid scripts can be secure
d5449 9
a5457 2
Some kernels have a bug that prevents setuid #! scripts from being
secure.  Some sites have disabled setuid #! scripts because of this.
d5459 1
a5459 3
First let's decide if your kernel supports secure setuid #! scripts.
(If setuid #! scripts would be secure but have been disabled anyway,
don't say that they are secure if asked.)
d5462 36
d5499 4
a5502 14
val="$undef"
if $test -d /dev/fd; then
	echo "#!$ls" >reflect
	chmod +x,u+s reflect
	./reflect >flect 2>&1
	if $contains "/dev/fd" flect >/dev/null; then
		echo "Congratulations, your kernel has secure setuid scripts!" >&4
		val="$define"
	else
		$cat <<EOM
If you are not sure if they are secure, I can check but I'll need a
username and password different from the one you are using right now.
If you don't have such a username or don't want me to test, simply
enter 'none'.
d5505 69
a5573 1
		rp='Other username to test security of setuid scripts with?'
a5574 36
		. ./myread
		case "$ans" in
		n|none)
			case "$d_suidsafe" in
			'')	echo "I'll assume setuid scripts are *not* secure." >&4
				dflt=n;;
			"$undef")
				echo "Well, the $hint value is *not* secure." >&4
				dflt=n;;
			*)	echo "Well, the $hint value *is* secure." >&4
				dflt=y;;
			esac
			;;
		*)
			$rm -f reflect flect
			echo "#!$ls" >reflect
			chmod +x,u+s reflect
			echo >flect
			chmod a+w flect
			echo '"su" will (probably) prompt you for '"$ans's password."
			su $ans -c './reflect >flect'
			if $contains "/dev/fd" flect >/dev/null; then
				echo "Okay, it looks like setuid scripts are secure." >&4
				dflt=y
			else
				echo "I don't think setuid scripts are secure." >&4
				dflt=n
			fi
			;;
		esac
		rp='Does your kernel have *secure* setuid scripts?'
		. ./myread
		case "$ans" in
		[yY]*)	val="$define";;
		*)	val="$undef";;
		esac
d5576 35
a5610 7
else
	echo "I don't think setuid scripts are secure (no /dev/fd directory)." >&4
	echo "(That's for file descriptors, not floppy disks.)"
	val="$undef"
fi
set d_suidsafe
eval $setvar
d5612 1
a5612 1
$rm -f reflect flect
a5613 1
: now see if they want to do setuid emulation
d5615 1
a5615 7
val="$undef"
case "$d_suidsafe" in
"$define")
	val="$undef"
	echo "No need to emulate SUID scripts since they are secure here." >& 4
	;;
*)
d5617 3
a5619 7
Some systems have disabled setuid scripts, especially systems where
setuid scripts cannot be secure.  On systems where setuid scripts have
been disabled, the setuid/setgid bits on scripts are currently
useless.  It is possible for $package to detect those bits and emulate
setuid/setgid in a secure fashion.  This emulation will only work if
setuid scripts have been disabled in your kernel.

d5621 3
a5623 3
	case "$d_dosuid" in
	"$define") dflt=y ;;
	*) dflt=n ;;
d5625 1
a5625 1
	rp="Do you want to do setuid/setgid emulation?"
d5629 1
a5629 1
	*)	val="$undef";;
d5631 4
a5634 3
	;;
esac
set d_dosuid
a5636 1
: determine filename position in cpp output
d5638 51
a5688 13
echo "Computing filename position in cpp output for #include directives..." >&4
echo '#include <stdio.h>' > foo.c
$cat >fieldn <<EOF
$startsh
$cppstdin $cppflags $cppminus <foo.c 2>/dev/null | \
$grep '^[ 	]*#.*stdio\.h' | \
while read cline; do
	pos=1
	set \$cline
	while $test \$# -gt 0; do
		if $test -r \`echo \$1 | $tr -d '"'\`; then
			echo "\$pos"
			exit 0
d5690 19
a5708 16
		shift
		pos=\`expr \$pos + 1\`
	done
done
EOF
chmod +x fieldn
fieldn=`./fieldn`
$rm -f foo.c fieldn
case $fieldn in
'') pos='???';;
1) pos=first;;
2) pos=second;;
3) pos=third;;
*) pos="${fieldn}th";;
esac
echo "Your cpp writes the filename in the $pos field of the line."
d5710 1
a5710 37
: locate header file
$cat >findhdr <<EOF
$startsh
wanted=\$1
name=''
for usrincdir in $usrinc
do
	if test -f \$usrincdir/\$wanted; then
		echo "\$usrincdir/\$wanted"
		exit 0
	fi
done
awkprg='{ print \$$fieldn }'
echo "#include <\$wanted>" > foo\$\$.c
$cppstdin $cppminus $cppflags < foo\$\$.c 2>/dev/null | \
$grep "^[ 	]*#.*\$wanted" | \
while read cline; do
	name=\`echo \$cline | $awk "\$awkprg" | $tr -d '"'\`
	case "\$name" in
	*[/\\\\]\$wanted) echo "\$name"; exit 1;;
	*[\\\\/]\$wanted) echo "\$name"; exit 1;;
	*) exit 2;;
	esac;
done;
#
# status = 0: grep returned 0 lines, case statement not executed
# status = 1: headerfile found
# status = 2: while loop executed, no headerfile found
#
status=\$?
$rm -f foo\$\$.c;
if test \$status -eq 1; then
	exit 0;
fi
exit 1
EOF
chmod +x findhdr
d5712 2
a5713 45
: define an alternate in-header-list? function
inhdr='echo " "; td=$define; tu=$undef; yyy=$@@;
cont=true; xxf="echo \"<\$1> found.\" >&4";
case $# in 2) xxnf="echo \"<\$1> NOT found.\" >&4";;
*) xxnf="echo \"<\$1> NOT found, ...\" >&4";;
esac;
case $# in 4) instead=instead;; *) instead="at last";; esac;
while $test "$cont"; do
	xxx=`./findhdr $1`
	var=$2; eval "was=\$$2";
	if $test "$xxx" && $test -r "$xxx";
	then eval $xxf;
	eval "case \"\$$var\" in $undef) . ./whoa; esac"; eval "$var=\$td";
		cont="";
	else eval $xxnf;
	eval "case \"\$$var\" in $define) . ./whoa; esac"; eval "$var=\$tu"; fi;
	set $yyy; shift; shift; yyy=$@@;
	case $# in 0) cont="";;
	2) xxf="echo \"but I found <\$1> $instead.\" >&4";
		xxnf="echo \"and I did not find <\$1> either.\" >&4";;
	*) xxf="echo \"but I found <\$1\> instead.\" >&4";
		xxnf="echo \"there is no <\$1>, ...\" >&4";;
	esac;
done;
while $test "$yyy";
do set $yyy; var=$2; eval "was=\$$2";
	eval "case \"\$$var\" in $define) . ./whoa; esac"; eval "$var=\$tu";
	set $yyy; shift; shift; yyy=$@@;
done'

: see if this is a malloc.h system
set malloc.h i_malloc
eval $inhdr

: see if stdlib is available
set stdlib.h i_stdlib
eval $inhdr

: determine which malloc to compile in
echo " "
case "$usemymalloc" in
''|[yY]*|true|$define)	dflt='y' ;;
*)	dflt='n' ;;
esac
rp="Do you wish to attempt to use the malloc that comes with $package?"
a5714 1
usemymalloc="$ans"
d5716 2
a5717 22
y*|true)
	usemymalloc='y'
	mallocsrc='malloc.c'
	mallocobj="malloc$_o"
	d_mymalloc="$define"
	case "$libs" in
	*-lmalloc*)
		: Remove malloc from list of libraries to use
		echo "Removing unneeded -lmalloc from library list" >&4
		set `echo X $libs | $sed -e 's/-lmalloc / /' -e 's/-lmalloc$//'`
		shift
		libs="$*"
		echo "libs = $libs" >&4
		;;
	esac
	;;
*)
	usemymalloc='n'
	mallocsrc=''
	mallocobj=''
	d_mymalloc="$undef"
	;;
d5720 3
a5722 28
: compute the return types of malloc and free
echo " "
$cat >malloc.c <<END
#$i_malloc I_MALLOC
#$i_stdlib I_STDLIB
#include <stdio.h>
#include <sys/types.h>
#ifdef I_MALLOC
#include <malloc.h>
#endif
#ifdef I_STDLIB
#include <stdlib.h>
#endif
#ifdef TRY_MALLOC
void *malloc();
#endif
#ifdef TRY_FREE
void free();
#endif
END
case "$malloctype" in
'')
	if $cc $ccflags -c -DTRY_MALLOC malloc.c >/dev/null 2>&1; then
		malloctype='void *'
	else
		malloctype='char *'
	fi
	;;
a5723 1
echo "Your system wants malloc to return '$malloctype', it would seem." >&4
d5725 10
a5734 4
case "$freetype" in
'')
	if $cc $ccflags -c -DTRY_FREE malloc.c >/dev/null 2>&1; then
		freetype='void'
d5736 2
a5737 3
		freetype='int'
	fi
	;;
a5738 3
echo "Your system uses $freetype free(), it would seem." >&4
$rm -f malloc.[co]
$cat <<EOM
d5740 9
a5748 28
After $package is installed, you may wish to install various
add-on modules and utilities.  Typically, these add-ons will
be installed under $prefix with the rest
of this package.  However, you may wish to install such add-ons
elsewhere under a different prefix.

If you do not wish to put everything under a single prefix, that's
ok.  You will be prompted for the individual locations; this siteprefix
is only used to suggest the defaults.

The default should be fine for most people.

EOM
fn=d~+
rp='Installation prefix to use for add-on modules and utilities?'
: XXX Here might be another good place for an installstyle setting.
case "$siteprefix" in
'') dflt=$prefix ;;
*)  dflt=$siteprefix ;;
esac
. ./getfile
: XXX Prefixit unit does not yet support siteprefix and vendorprefix
oldsiteprefix=''
case "$siteprefix" in
'') ;;
*)	case "$ans" in
	"$prefix") ;;
	*) oldsiteprefix="$prefix";;
a5751 2
siteprefix="$ans"
siteprefixexp="$ansexp"
d5753 8
a5760 9
: determine where site specific libraries go.
: Usual default is /usr/local/lib/perl5/site_perl/$version
: The default "style" setting is made in installstyle.U
: XXX No longer works with Prefixit stuff.
prog=`echo $package | $sed 's/-*[0-9.]*$//'`
case "$sitelib" in
'') case "$installstyle" in
	*lib/perl5*) dflt=$siteprefix/lib/$package/site_$prog/$version ;;
	*)	 dflt=$siteprefix/lib/site_$prog/$version ;;
a5762 2
*)	dflt="$sitelib"
	;;
d5764 28
a5791 96
$cat <<EOM

The installation process will create a directory for
site-specific extensions and modules.  Most users find it convenient
to place all site-specific files in this directory rather than in the
main distribution directory.

EOM
fn=d~+
rp='Pathname for the site-specific library files?'
. ./getfile
sitelib="$ans"
sitelibexp="$ansexp"
sitelib_stem=`echo "$sitelibexp" | sed "s,/$version$,,"`
: Change installation prefix, if necessary.
if $test X"$prefix" != X"$installprefix"; then
	installsitelib=`echo $sitelibexp | $sed "s#^$prefix#$installprefix#"`
else
	installsitelib="$sitelibexp"
fi

: determine where site specific architecture-dependent libraries go.
: sitelib  default is /usr/local/lib/perl5/site_perl/$version
: sitearch default is /usr/local/lib/perl5/site_perl/$version/$archname
: sitelib may have an optional trailing /share.
case "$sitearch" in
'')	dflt=`echo $sitelib | $sed 's,/share$,,'`
	dflt="$dflt/$archname"
	;;
*)	dflt="$sitearch"
	;;
esac
set sitearch sitearch none
eval $prefixit
$cat <<EOM

The installation process will also create a directory for
architecture-dependent site-specific extensions and modules.

EOM
fn=d~+
rp='Pathname for the site-specific architecture-dependent library files?'
. ./getfile
sitearch="$ans"
sitearchexp="$ansexp"
: Change installation prefix, if necessary.
if $test X"$prefix" != X"$installprefix"; then
	installsitearch=`echo $sitearchexp | sed "s#^$prefix#$installprefix#"`
else
	installsitearch="$sitearchexp"
fi

$cat <<EOM

The installation process will also create a directory for
vendor-supplied add-ons.  Vendors who supply perl with their system
may find it convenient to place all vendor-supplied files in this
directory rather than in the main distribution directory.  This will
ease upgrades between binary-compatible maintenance versions of perl.

Of course you may also use these directories in whatever way you see
fit.  For example, you might use them to access modules shared over a
company-wide network.

The default answer should be fine for most people.
This causes further questions about vendor add-ons to be skipped
and no vendor-specific directories will be configured for perl.

EOM
rp='Do you want to configure vendor-specific add-on directories?'
case "$usevendorprefix" in
define|true|[yY]*) dflt=y ;;
*)	: User may have set vendorprefix directly on Configure command line.
	case "$vendorprefix" in
	''|' ') dflt=n ;;
	*)	dflt=y ;;
	esac
	;;
esac
. ./myread
case "$ans" in
[yY]*)	fn=d~+
	rp='Installation prefix to use for vendor-supplied add-ons?'
	case "$vendorprefix" in
	'') dflt='' ;;
	*)  dflt=$vendorprefix ;;
	esac
	. ./getfile
	: XXX Prefixit unit does not yet support siteprefix and vendorprefix
	oldvendorprefix=''
	case "$vendorprefix" in
	'') ;;
	*)	case "$ans" in
		"$prefix") ;;
		*) oldvendorprefix="$prefix";;
		esac
d5793 1
d5795 1
a5795 7
	usevendorprefix="$define"
	vendorprefix="$ans"
	vendorprefixexp="$ansexp"
	;;
*)	usevendorprefix="$undef"
	vendorprefix=''
	vendorprefixexp=''
d5798 20
a5817 5

case "$vendorprefix" in
'')	d_vendorlib="$undef"
	vendorlib=''
	vendorlibexp=''
d5819 2
a5820 19
*)	d_vendorlib="$define"
	: determine where vendor-supplied modules go.
	: Usual default is /usr/local/lib/perl5/vendor_perl/$version
	case "$vendorlib" in
	'')
		prog=`echo $package | $sed 's/-*[0-9.]*$//'`
		case "$installstyle" in
		*lib/perl5*) dflt=$vendorprefix/lib/$package/vendor_$prog/$version ;;
		*)	     dflt=$vendorprefix/lib/vendor_$prog/$version ;;
		esac
		;;
	*)	dflt="$vendorlib"
		;;
	esac
	fn=d~+
	rp='Pathname for the vendor-supplied library files?'
	. ./getfile
	vendorlib="$ans"
	vendorlibexp="$ansexp"
d5823 19
a5841 4
vendorlib_stem=`echo "$vendorlibexp" | sed "s,/$version$,,"`
: Change installation prefix, if necessary.
if $test X"$prefix" != X"$installprefix"; then
	installvendorlib=`echo $vendorlibexp | $sed "s#^$prefix#$installprefix#"`
d5843 19
a5861 1
	installvendorlib="$vendorlibexp"
d5863 3
d5867 4
a5870 26
case "$vendorprefix" in
'')	d_vendorarch="$undef"
	vendorarch=''
	vendorarchexp=''
	;;
*)	d_vendorarch="$define"
	: determine where vendor-supplied architecture-dependent libraries go.
	: vendorlib  default is /usr/local/lib/perl5/vendor_perl/$version
	: vendorarch default is /usr/local/lib/perl5/vendor_perl/$version/$archname
	: vendorlib may have an optional trailing /share.
	case "$vendorarch" in
	'')	dflt=`echo $vendorlib | $sed 's,/share$,,'`
		dflt="$dflt/$archname"
		;;
	*)	dflt="$vendorarch" ;;
	esac
	fn=d~+
	rp='Pathname for vendor-supplied architecture-dependent files?'
	. ./getfile
	vendorarch="$ans"
	vendorarchexp="$ansexp"
	;;
esac
: Change installation prefix, if necessary.
if $test X"$prefix" != X"$installprefix"; then
	installvendorarch=`echo $vendorarchexp | sed "s#^$prefix#$installprefix#"`
d5872 4
a5875 2
	installvendorarch="$vendorarchexp"
fi
d5877 3
a5879 2
: Final catch-all directories to search
$cat <<EOM
d5881 1
a5881 16
Lastly, you can have perl look in other directories for extensions and
modules in addition to those already specified.
These directories will be searched after 
	$sitearch 
	$sitelib 
EOM
test X"$vendorlib" != "X" && echo '	' $vendorlib
test X"$vendorarch" != "X" && echo '	' $vendorarch
echo ' '
case "$otherlibdirs" in
''|' ') dflt='none' ;;
*)	dflt="$otherlibdirs" ;;
esac
$cat <<EOM
Enter a colon-separated set of extra paths to include in perl's @@INC
search path, or enter 'none' for no extra paths.
d5884 5
a5889 14
rp='Colon-separated list of additional directories for perl to search?'
. ./myread
case "$ans" in
' '|''|none)	otherlibdirs=' ' ;;     
*)	otherlibdirs="$ans" ;;
esac
case "$otherlibdirs" in
' ') val=$undef ;;
*)	val=$define ;;
esac
set d_perl_otherlibdirs
eval $setvar

: Cruising for prototypes
d5891 10
a5900 15
echo "Checking out function prototypes..." >&4
$cat >prototype.c <<'EOCP'
int main(int argc, char *argv[]) {
	exit(0);}
EOCP
if $cc $ccflags -c prototype.c >prototype.out 2>&1 ; then
	echo "Your C compiler appears to support function prototypes."
	val="$define"
else
	echo "Your C compiler doesn't seem to understand function prototypes."
	val="$undef"
fi
set prototype
eval $setvar
$rm -f prototype*
d5902 6
a5907 5
case "$prototype" in
"$define") ;;
*)	ansi2knr='ansi2knr'
	echo " "
	cat <<EOM >&4
d5909 62
a5970 33
$me:  FATAL ERROR:
This version of $package can only be compiled by a compiler that 
understands function prototypes.  Unfortunately, your C compiler 
	$cc $ccflags
doesn't seem to understand them.  Sorry about that.

If GNU cc is available for your system, perhaps you could try that instead.  

Eventually, we hope to support building Perl with pre-ANSI compilers.
If you would like to help in that effort, please contact <perlbug@@perl.org>.

Aborting Configure now.
EOM
	exit 2
	;;
esac

: determine where public executables go
echo " "
set dflt bin bin
eval $prefixit
fn=d~
rp='Pathname where the public executables will reside?'
. ./getfile
if $test "X$ansexp" != "X$binexp"; then
	installbin=''
fi
bin="$ans"
binexp="$ansexp"
: Change installation prefix, if necessary.
: XXX Bug? -- ignores Configure -Dinstallprefix setting.
if $test X"$prefix" != X"$installprefix"; then
	installbin=`echo $binexp | sed "s#^$prefix#$installprefix#"`
d5972 47
a6018 14
	installbin="$binexp"
fi

: Find perl5.005 or later.
echo "Looking for a previously installed perl5.005 or later... "
case "$perl5" in
'')	for tdir in `echo "$binexp:$PATH" | $sed "s/$path_sep/ /g"`; do
		: Check if this perl is recent and can load a simple module
		if $test -x $tdir/perl && $tdir/perl -Mless -e 'use 5.005;' >/dev/null 2>&1; then
			perl5=$tdir/perl
			break;
		elif $test -x $tdir/perl5 && $tdir/perl5 -Mless -e 'use 5.005;' >/dev/null 2>&1; then
			perl5=$tdir/perl
			break;
a6019 66
	done
	;;
*)	perl5="$perl5"
	;;
esac
case "$perl5" in
'')	echo "None found.  That's ok.";;
*)	echo "Using $perl5." ;;
esac

: Determine list of previous versions to include in @@INC
$cat > getverlist <<EOPL
#!$perl5 -w
use File::Basename;
\$api_versionstring = "$api_versionstring";
\$version = "$version";
\$stem = "$sitelib_stem";
\$archname = "$archname";
EOPL
	$cat >> getverlist <<'EOPL'
# Can't have leading @@ because metaconfig interprets it as a command!
;@@inc_version_list=();
# XXX Redo to do opendir/readdir? 
if (-d $stem) {
    chdir($stem);
    ;@@candidates = glob("5.*");
}
else {
    ;@@candidates = ();
}

# XXX ToDo:  These comparisons must be reworked when two-digit
# subversions come along, so that 5.7.10 compares as greater than
# 5.7.3!  By that time, hope that 5.6.x is sufficiently
# widespread that we can use the built-in version vectors rather
# than reinventing them here.  For 5.6.0, however, we must
# assume this script will likely be run by 5.005_0x.  --AD 1/2000.
foreach $d (@@candidates) {
    if ($d lt $version) {
	if ($d ge $api_versionstring) {
	    unshift(@@inc_version_list, grep { -d } "$d/$archname", $d);
	}
	elsif ($d ge "5.005") {
	    unshift(@@inc_version_list, grep { -d } $d);
	}
    }
    else {
	# Skip newer version.  I.e. don't look in
	# 5.7.0 if we're installing 5.6.1.
    }
}

if (@@inc_version_list) {
    print join(' ', @@inc_version_list);
}
else {
    # Blank space to preserve value for next Configure run.
    print " ";
}
EOPL
chmod +x getverlist
case "$inc_version_list" in
'')	if test -x "$perl5"; then
		dflt=`$perl5 getverlist`
	else
		dflt='none'
d6021 8
a6028 3
	;;
$undef) dflt='none' ;;
*)  dflt="$inc_version_list" ;;
d6030 1
a6030 11
case "$dflt" in
''|' ') dflt=none ;;
esac
case "$dflt" in
5.005) case "$bincompat5005" in
       $define|true|[yY]*) ;;
       *) dflt=none ;;
       esac
       ;;
esac
$cat <<'EOM'
d6032 3
a6034 7
In order to ease the process of upgrading, this version of perl 
can be configured to use modules built and installed with earlier 
versions of perl that were installed under $prefix.  Specify here
the list of earlier versions that this version of perl should check.
If Configure detected no earlier versions of perl installed under
$prefix, then the list will be empty.  Answer 'none' to tell perl
to not search earlier versions.
d6036 35
a6070 3
The default should almost always be sensible, so if you're not sure,
just accept the default.
EOM
d6072 26
a6097 43
rp='List of earlier versions to include in @@INC?'
. ./myread
case "$ans" in
[Nn]one|''|' ') inc_version_list=' ' ;;
*) inc_version_list="$ans" ;;
esac
case "$inc_version_list" in
''|' ') 
	inc_version_list_init='0';;
*)	inc_version_list_init=`echo $inc_version_list |
		$sed -e 's/^/"/' -e 's/ /","/g' -e 's/$/",0/'`
	;;
esac
$rm -f getverlist

: determine whether to install perl also as /usr/bin/perl

echo " "
if $test -d /usr/bin -a "X$installbin" != X/usr/bin; then
	$cat <<EOM
Many scripts expect perl to be installed as /usr/bin/perl.
I can install the perl you are about to compile also as /usr/bin/perl
(in addition to $installbin/perl).
EOM
	case "$installusrbinperl" in
	"$undef"|[nN]*)	dflt='n';;
	*)		dflt='y';;
	esac
	rp="Do you want to install perl as /usr/bin/perl?"
	. ./myread
	case "$ans" in
	[yY]*)	val="$define";;
	*)	val="$undef" ;;
	esac
else
	val="$undef"
fi
set installusrbinperl
eval $setvar

: see if dld is available
set dld.h i_dld
eval $inhdr
d6174 1
a6174 1
			svr4*|esix*|solaris|nonstopux) dflt='-KPIC' ;;
d6180 1
a6180 1
			svr4*|esix*|solaris|nonstopux) dflt='-fPIC' ;;
d6256 1
a6256 1
			svr4*|esix*|nonstopux) dflt="-G $ldflags" ;;
d6270 1
a6270 1
		-L*|-R*)
d6331 1
a6331 1
		svr4*|nonstopux|dgux|dynixptx|esix|powerux|beos|cygwin*)
d6445 1
a6445 1
will not work in this version.  Let me (perlbug@@perl.org)
a6535 18
: determine where manual pages are on this system
echo " "
case "$sysman" in
'') 
	syspath='/usr/man/man1 /usr/man/mann /usr/man/manl /usr/man/local/man1'
	syspath="$syspath /usr/man/u_man/man1 /usr/share/man/man1"
	syspath="$syspath /usr/catman/u_man/man1 /usr/man/l_man/man1"
	syspath="$syspath /usr/local/man/u_man/man1 /usr/local/man/l_man/man1"
	syspath="$syspath /usr/man/man.L /local/man/man1 /usr/local/man/man1"
	sysman=`./loc . /usr/man/man1 $syspath`
	;;
esac
if $test -d "$sysman"; then
	echo "System manual is in $sysman." >&4
else
	echo "Could not find manual pages in source form." >&4
fi

d6902 1
a6902 2
		if $test -f hosts; then
			$test x`$awk "/[0-9].*[	 ]$myhostname$tmp_re/ { sum++ }
d6904 5
a6908 12
			dflt=.`$awk "/[0-9].*[	 ]$myhostname$tmp_re/ {for(i=2; i<=NF;i++) print \\\$i}" \
				hosts | $sort | $uniq | \
				$sed -n -e "s/$myhostname\.\([-a-zA-Z0-9_.]\)/\1/p"`
			case `$echo X$dflt` in
			X*\ *)	echo "(Several hosts in the database matched hostname)"
				dflt=.
				;;
			X.) echo "(You do not have fully-qualified names in the hosts database)"
				;;
			esac
		else
			echo "(I cannot locate a hosts database anywhere)"
d6910 4
a6913 1
		fi
a6939 5
		case "$dflt$osname" in
		.os390) echo "(Attempting domain name extraction from //'SYS1.TCPPARMS(TCPDATA)')"
			dflt=.`awk '/^DOMAINORIGIN/ {print $2}' "//'SYS1.TCPPARMS(TCPDATA)'" 2>/dev/null`
			;;
		esac
d7029 1
a7029 1
will send mail to this address in addition to perlbug@@perl.org. You may
a7040 19
: determine whether to only install version-specific parts.
echo " "
$cat <<EOM
Do you want to install only the version-specific parts of the perl
distribution?  Usually you do *not* want to do this.
EOM
case "$versiononly" in
"$define"|[Yy]*|true) dflt='y' ;;
*) dflt='n';
esac
rp="Do you want to install only the version-specific parts of perl?"
. ./myread
case "$ans" in
[yY]*)	val="$define";;
*)	val="$undef" ;;
esac
set versiononly
eval $setvar

d7055 1
a7055 4
		case "$versiononly" in
		"$define")      dflt="$binexp/perl$version";;  
		*)              dflt="$binexp/perl";;
		esac
d7148 31
d7196 61
d7316 76
d7413 1
a7413 1
                	sPRIFUldbl='"F"'; sPRIGUldbl='"G"'; sPRIEUldbl='"E"';
d7435 1
a7435 1
                	sPRIFUldbl='"llF"'; sPRIGUldbl='"llG"'; sPRIEUldbl='"llE"';
d7457 1
a7457 1
                	sPRIFUldbl='"LF"'; sPRIGUldbl='"LG"'; sPRIEUldbl='"LE"';
d7479 1
a7479 1
                	sPRIFUldbl='"lF"'; sPRIGUldbl='"lG"'; sPRIEUldbl='"lE"';
a7487 2
else
	sSCNfldbl=$sPRIfldbl	# expect consistency
d7496 1
a7496 2
	d_PRIFUldbl="$undef"; d_PRIGUldbl="$undef"; d_PRIEUldbl="$undef"; 
	d_SCNfldbl="$undef";
d7499 1
a7499 2
	d_PRIFUldbl="$define"; d_PRIGUldbl="$define"; d_PRIEUldbl="$define"; 
	d_SCNfldbl="$define";
d7504 14
a7517 13
echo " "
echo "Checking for an efficient way to convert floats to strings."
echo " " > try.c
case "$uselongdouble" in
"$define") echo "#define USE_LONG_DOUBLE" >>try.c ;;
esac
case "$d_longdbl" in
"$define") echo "#define HAS_LONG_DOUBLE" >>try.c ;;
esac
case "$d_PRIgldbl" in
"$define") echo "#define HAS_PRIgldbl"    >>try.c ;;
esac
$cat >>try.c <<EOP
a7611 3
	Gconvert((DOUBLETYPE)123.456, 8, 0, buf); 
	checkit("123.456", buf);

d7615 6
a7620 6
case "$d_Gconvert" in
gconvert*) xxx_list='gconvert gcvt sprintf' ;;
gcvt*) xxx_list='gcvt gconvert sprintf' ;;
sprintf*) xxx_list='sprintf gconvert gcvt' ;;
*) xxx_list='gconvert gcvt sprintf' ;;
esac
d7622 3
a7624 10
case "$d_longdbl$uselongdouble$d_PRIgldbl" in
"$define$define$define")
    # for long doubles prefer first qgcvt, then sprintf
    xxx_list="`echo $xxx_list|sed s/sprintf//`" 
    xxx_list="sprintf $xxx_list"
    case "$d_qgcvt" in
    "$define") xxx_list="qgcvt $xxx_list" ;;
    esac
    ;;
esac
d7626 12
a7637 9
for xxx_convert in $xxx_list; do
	echo "Trying $xxx_convert..."
	$rm -f try try$_o
	set try -DTRY_$xxx_convert
	if eval $compile; then
		echo "$xxx_convert() found." >&4
		if ./try; then
			echo "I'll use $xxx_convert to convert floats into a string." >&4
			break;
d7639 1
a7639 1
			echo "...But $xxx_convert didn't work as I expected."
d7641 14
a7654 20
	else
		echo "$xxx_convert NOT found." >&4
	fi
done
	
case "$xxx_convert" in
gconvert) d_Gconvert='gconvert((x),(n),(t),(b))' ;;
gcvt) d_Gconvert='gcvt((x),(n),(b))' ;;
qgcvt) d_Gconvert='qgcvt((x),(n),(b))' ;;
*) case "$uselongdouble$d_longdbl$d_PRIgldbl" in
   "$define$define$define")
      d_Gconvert="sprintf((b),\"%.*\"$sPRIgldbl,(n),(x))" ;;
   *) d_Gconvert='sprintf((b),"%.*g",(n),(x))' ;;
   esac
   ;;  
esac

: see if _fwalk exists
set fwalk d__fwalk
eval $inlibc
d7687 1
a7687 1
		$cc -o access $cppflags -DI_SYS_FILE access.c >/dev/null 2>&1 ; then
d7691 1
a7691 1
		$cc -o access $cppflags -DI_FCNTL access.c >/dev/null 2>&1 ; then
d7695 1
a7695 1
		$cc -o access $cppflags -DI_UNISTD access.c >/dev/null 2>&1 ; then
d7785 1
a7785 1
	if $cc -o set -DTRY_BSD_PGRP $ccflags $ldflags set.c $libs >/dev/null 2>&1 && ./set; then
d7788 1
a7788 1
	elif $cc -o set $ccflags $ldflags set.c $libs >/dev/null 2>&1 && ./set; then
d7847 1
a7847 1
	if $cc -o set -DTRY_BSD_PGRP $ccflags $ldflags set.c $libs >/dev/null 2>&1 && ./set; then
d7850 1
a7850 1
	elif $cc -o set $ccflags $ldflags set.c $libs >/dev/null 2>&1 && ./set; then
d8402 2
a8403 2
		$ld -o dyna.$dlext $lddlflags tmp-dyna${_o} > /dev/null 2>&1 && 
		$cc -o fred $ccflags $ldflags $cccdlflags $ccdlflags fred.c $libs > /dev/null 2>&1; then
d8482 4
a8645 1
#ifdef F_SETFL
a8647 3
#else
		exit(4);
#endif
a8693 1
		4) echo "Could not find F_SETFL!";;
a8758 48
echo " "
: See if fcntl-based locking works.
$cat >try.c <<'EOCP'
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>
int main() {
#if defined(F_SETLK) && defined(F_SETLKW)
     struct flock flock;
     int retval, fd;
     fd = open("try.c", O_RDONLY);
     flock.l_type = F_RDLCK;
     flock.l_whence = SEEK_SET;
     flock.l_start = flock.l_len = 0;
     retval = fcntl(fd, F_SETLK, &flock);
     close(fd);
     (retval < 0 ? exit(2) : exit(0));
#else
     exit(2);
#endif
}
EOCP
echo "Checking if fcntl-based file locking works... "
case "$d_fcntl" in
"$define")
	set try
	if eval $compile_ok; then
		if ./try; then
			echo "Yes, it seems to work."
			val="$define"
		else
			echo "Nope, it didn't work."
			val="$undef"
		fi
	else
		echo "I'm unable to compile the test program, so I'll assume not."
		val="$undef"
	fi
	;;
*) val="$undef";
	echo "Nope, since you don't even have fcntl()."
	;;
esac
set d_fcntl_can_lock
eval $setvar
$rm -f try*


a9064 4
: see if frexpl exists
set frexpl d_frexpl
eval $inlibc

a9130 4
: see if fsync exists
set fsync d_fsync
eval $inlibc

a9141 4
: see if getespwnam exists
set getespwnam d_getespwnam
eval $inlibc

a9285 4
: see if getpagesize exists
set getpagesize d_getpagsz
eval $inlibc

a9319 4
: see if getprpwnam exists
set getprpwnam d_getprpwnam
eval $inlibc

d9342 4
a9554 8
: see if isnan exists
set isnan d_isnan
eval $inlibc

: see if isnanl exists
set isnanl d_isnanl
eval $inlibc

d9637 1
a9637 1
	echo "You have long long."
a9773 4
: see if modfl exists
set modfl d_modfl
eval $inlibc

a9935 31
: check for volatile keyword
echo " "
echo 'Checking to see if your C compiler knows about "volatile"...' >&4
$cat >try.c <<'EOCP'
int main()
{
	typedef struct _goo_struct goo_struct;
	goo_struct * volatile goo = ((goo_struct *)0);
	struct _goo_struct {
		long long_int;
		int reg_int;
		char char_var;
	};
	typedef unsigned short foo_t;
	char *volatile foo;
	volatile int bar;
	volatile foo_t blech;
	foo = foo;
}
EOCP
if $cc -c $ccflags try.c >/dev/null 2>&1 ; then
	val="$define"
	echo "Yup, it does."
else
	val="$undef"
	echo "Nope, it doesn't."
fi
set d_volatile
eval $setvar
$rm -f try.*

d10114 1
a10114 5
$echo "Checking how many bits of your UVs your NVs can preserve..." >&4
: volatile so that the compiler has to store it out to memory.
if test X"$d_volatile" = X"$define"; then
	volatile=volatile
fi
a10116 6
#include <sys/types.h>
#include <signal.h>
#ifdef SIGFPE
$volatile int bletched = 0;
$signal_t blech(s) int s; { bletched = 1; }
#endif
d10118 1
a10118 1
    $uvtype u = 0;
d10120 5
a10124 23
    int     n = 8 * $uvsize;
    int     i;
#ifdef SIGFPE
    signal(SIGFPE, blech);
#endif

    for (i = 0; i < n; i++) {
      u = u << 1 | ($uvtype)1;
      d = ($nvtype)u;
      if (($uvtype)d != u)
        break;
      if (d <= 0)
	break;
      d = ($nvtype)(u - 1);
      if (($uvtype)d != (u - 1))
        break;
#ifdef SIGFPE
      if (bletched) {
	break;
#endif
      }	
    }
    printf("%d\n", ((i == n) ? -n : i));
a10128 2

d_nv_preserves_uv="$undef"
d10130 9
a10138 12
	d_nv_preserves_uv_bits="`./try$exe_ext`"
fi
case "$d_nv_preserves_uv_bits" in
\-[1-9]*)	
	d_nv_preserves_uv_bits=`expr 0 - $d_nv_preserves_uv_bits`
	$echo "Your NVs can preserve all $d_nv_preserves_uv_bits bits of your UVs."  2>&1
	d_nv_preserves_uv="$define"
	;;
[1-9]*)	$echo "Your NVs can preserve only $d_nv_preserves_uv_bits bits of your UVs."  2>&1
	d_nv_preserves_uv="$undef" ;;
*)	$echo "Can't figure out how many bits your NVs preserve." 2>&1
	d_nv_preserves_uv_bits="$undef" ;;
a10655 5
: see if prototype for sbrk is available
echo " "
set d_sbrkproto sbrk $i_unistd unistd.h
eval $hasproto

a10936 4
: see if setproctitle exists
set setproctitle d_setproctitle
eval $inlibc

d10969 4
a11000 6
	case "$useperlio" in
	"$undef")
	    echo "For sfio also the PerlIO abstraction layer is needed."
	    echo "Earlier you said you wouldn't want that."
	    ;;
	esac
d11004 1
a11004 4
	y|Y)	echo "Ok, turning on both sfio and PerlIO, then."
		useperlio="$define"
		val="$define"
		;;
d11007 5
d11017 2
a11018 3
		echo "Sorry, cannot find sfio on this machine." >&4
		echo "Ignoring your setting of usesfio=$usesfio." >&4
		val="$undef"
a11028 10
case "$d_sfio" in
$define) ;;
*)	: Remove sfio from list of libraries to use
	set `echo X $libs | $sed -e 's/-lsfio / /' -e 's/-lsfio$//'`
	shift
	libs="$*"
	echo "libs = $libs" >&4
;;
esac

a11186 4
: see if socks5_init exists
set socks5_init d_socks5_init
eval $inlibc

d11240 1
a11240 22

if $contains '_lbfsize' `./findhdr stdio.h` >/dev/null 2>&1 ; then
	echo "(Looks like you have stdio.h from BSD.)"
	case "$stdio_ptr" in
	'') stdio_ptr='((fp)->_p)'
		ptr_lval=$define
		;;
	*)	ptr_lval=$d_stdio_ptr_lval;;
	esac
	case "$stdio_cnt" in
	'') stdio_cnt='((fp)->_r)'
		cnt_lval=$define
		;;
	*)	cnt_lval=$d_stdio_cnt_lval;;
	esac
	case "$stdio_base" in
	'') stdio_base='((fp)->_ub._base ? (fp)->_ub._base : (fp)->_bf._base)';;
	esac
	case "$stdio_bufsiz" in
	'') stdio_bufsiz='((fp)->_ub._base ? (fp)->_ub._size : (fp)->_bf._size)';;
	esac
elif $contains '_IO_fpos_t' `./findhdr stdio.h` `./findhdr libio.h` >/dev/null 2>&1 ; then
a11279 1

a11328 87

: test whether setting _ptr sets _cnt as a side effect
d_stdio_ptr_lval_sets_cnt="$undef"
d_stdio_ptr_lval_nochange_cnt="$undef"
case "$d_stdio_ptr_lval$d_stdstdio" in
$define$define)
	echo "Checking to see what happens if we set the stdio ptr..." >&4
$cat >try.c <<EOP
#include <stdio.h>
/* Can we scream? */
/* Eat dust sed :-) */
/* In the buffer space, no one can hear you scream. */
#define FILE_ptr(fp)	$stdio_ptr
#define FILE_cnt(fp)	$stdio_cnt
#include <sys/types.h>
int main() {
	FILE *fp = fopen("try.c", "r");
	int c;
	char *ptr;
	size_t cnt;
	if (!fp) {
	    puts("Fail even to read");
	    exit(1);
	}
	c = getc(fp); /* Read away the first # */
	if (c == EOF) {
	    puts("Fail even to read");
	    exit(1);
	}
	if (!(
		18 <= FILE_cnt(fp) &&
		strncmp(FILE_ptr(fp), "include <stdio.h>\n", 18) == 0
	)) {
		puts("Fail even to read");
		exit (1);
	}
	ptr = (char*) FILE_ptr(fp);
	cnt = (size_t)FILE_cnt(fp);

	FILE_ptr(fp) += 42;

	if ((char*)FILE_ptr(fp) != (ptr + 42)) {
		printf("Fail ptr check %p != %p", FILE_ptr(fp), (ptr + 42));
		exit (1);
	}
	if (FILE_cnt(fp) <= 20) {
		printf ("Fail (<20 chars to test)");
		exit (1);
	}
	if (strncmp(FILE_ptr(fp), "Eat dust sed :-) */\n", 20) != 0) {
		puts("Fail compare");
		exit (1);
	}
	if (cnt == FILE_cnt(fp)) {
		puts("Pass_unchanged");
		exit (0);
	}	
	if (FILE_cnt(fp) == (cnt - 42)) {
		puts("Pass_changed");
		exit (0);
	}
	printf("Fail count was %d now %d\n", cnt, FILE_cnt(fp));
	return 1;

}
EOP
	set try
	if eval $compile; then
 		case `./try$exe_ext` in
		Pass_changed)
			echo "Increasing ptr in your stdio decreases cnt by the same amount.  Good." >&4
			d_stdio_ptr_lval_sets_cnt="$define" ;;
		Pass_unchanged)
			echo "Increasing ptr in your stdio leaves cnt unchanged.  Good." >&4
			d_stdio_ptr_lval_nochange_cnt="$define" ;;
		Fail*)
			echo "Increasing ptr in your stdio didn't do exactly what I expected.  We'll not be doing that then." >&4 ;;
		*)
			echo "It appears attempting to set ptr in your stdio is a bad plan." >&4 ;;
	esac
	else
		echo "It seems we can't set ptr in your stdio.  Nevermind." >&4
	fi
	$rm -f try.c try
	;;
esac

a11492 3
#ifdef __EMX__
#define strtoll _strtoll
#endif
d11519 1
a11519 2
		yyy=`./try`
		case "$yyy" in
a11526 3
	else
		echo "(I can't seem to compile the test program--assuming it doesn't)"
		d_strtoll="$undef"
d11777 31
d12415 1
a12415 1
		echo "You seem to speak EBCDIC." >&4
d12418 1
a12418 1
		echo "Nope, no EBCDIC, probably ASCII or some ISO Latin. Or UTF8." >&4
d12422 1
a12422 1
	echo "I'll assume ASCII or some ISO Latin. Or UTF8." >&4
d12830 1
a12830 1
                	sPRIo64='"o"'; sPRIx64='"x"'; sPRIXU64='"X"';
d12852 1
a12852 1
                	sPRIo64='"lo"'; sPRIx64='"lx"'; sPRIXU64='"lX"';
d12875 1
a12875 1
                	sPRIo64=PRIo64; sPRIx64=PRIx64; sPRIXU64=PRIXU64;
d12887 1
a12887 1
  long long q = 12345678901LL; /* AIX cc requires the LL suffix. */
d12897 1
a12897 1
                	sPRIo64='"llo"'; sPRIx64='"llx"'; sPRIXU64='"llX"';
d12919 1
a12919 1
                	sPRIo64='"Lo"'; sPRIx64='"Lx"'; sPRIXU64='"LX"';
d12941 1
a12941 1
                	sPRIo64='"qo"'; sPRIx64='"qx"'; sPRIXU64='"qX"';
d12958 1
a12958 1
	d_PRIo64="$undef"; d_PRIx64="$undef"; d_PRIXU64="$undef"; 
d12961 1
a12961 1
	d_PRIo64="$define"; d_PRIx64="$define"; d_PRIXU64="$define"; 
a12973 1
	uvXUformat="$sPRIXU64"
a12979 1
		uvXUformat='"lX"'
a12985 1
			uvXUformat='"X"'
a12992 1
				uvXUformat='"hX"'
a12997 16
if $test X"$uselongdouble" = X"$define" -a X"$d_longdbl" = X"$define" -a X"$d_PRIgldbl" = X"$define"; then
	nveformat="$sPRIeldbl"
	nvfformat="$sPRIfldbl"
	nvgformat="$sPRIgldbl"
	nvEUformat="$sPRIEUldbl"
	nvFUformat="$sPRIFUldbl"
	nvGUformat="$sPRIGUldbl"
else
	nveformat='"e"'
	nvfformat='"f"'
	nvgformat='"g"'
	nvEUformat='"E"'
	nvFUformat='"F"'
	nvGUformat='"G"'
fi

a13275 1
	[a-zA-Z]:/*) dflt=$pg;;
a13278 1
	[a-zA-Z]:/*) dflt=$more;;
a13281 1
	[a-zA-Z]:/*) dflt=$less;;
d13354 1
a13354 1
if $cc -o foobar $ccflags $ldflags foo$_o bar$_a $libs > /dev/null 2>&1 &&
d13360 1
a13360 1
	$cc -o foobar $ccflags $ldflags foo$_o bar$_a $libs > /dev/null 2>&1 &&
a13850 4
: see if this is a socks.h system
set socks.h i_socks
eval $inhdr

d13858 1
d13867 4
a13870 13
			case "$usesocks" in
			"$define")
				if ./protochk "$try" $i_systypes sys/types.h $d_socket sys/socket.h literal '#define INCLUDE_PROTOTYPES' $i_socks socks.h.; then
					echo "Your system accepts '$xxx *' for the last argument of accept()."
					socksizetype="$xxx"
				fi
				;;
			*)	if ./protochk "$try"  $i_systypes sys/types.h $d_socket sys/socket.h; then
					echo "Your system accepts '$xxx *' for the last argument of accept()."
					socksizetype="$xxx"
				fi
				;;
			esac
d13931 1
a13931 2
echo '#include <stdio.h>' | $cppstdin $cppminus > stdioh
if $contains 'unsigned.*char.*_ptr;' stdioh >/dev/null 2>&1 ; then
d13934 1
a13934 1
else	
a13937 1
$rm -f stdioh
a14086 31
: determine compiler compiler
case "$yacc" in
'')
	dflt=yacc;;
*)
	dflt="$yacc";;
esac
echo " "
comp='yacc'
if $test -f "$byacc"; then
	dflt="$byacc"
	comp="byacc or $comp"
fi
if $test -f "$bison"; then
	comp="$comp or bison -y"
fi
rp="Which compiler compiler ($comp) shall I use?"
. ./myread
yacc="$ans"
case "$yacc" in
*bis*)
	case "$yacc" in
	*-y*) ;;
	*)
		yacc="$yacc -y"
		echo "(Adding -y option to bison to get yacc-compatible behaviour.)"
		;;
	esac
	;;
esac

a14177 4
: see if this is a libutil.h system
set libutil.h i_libutil
eval $inhdr

a14256 4
: see if this is a prot.h system
set prot.h i_prot
eval $inhdr

d14262 3
a14264 3
alliant alpha am29000 AM29000 AMD64 amiga AMIGAOS AMIX
ansi ANSI_C_SOURCE apollo ardent ARM32 atarist att386 att3b
BeOS BIG_ENDIAN BIT_MSF bsd BSD bsd43 bsd4_2 bsd4_3 BSD4_3 bsd4_4
d14277 1
a14277 1
IA64 iAPX286 ibm ibm032 ibmesa IBMR2 ibmrt ILP32 ILP64
d14293 1
a14293 1
news700 news800 news900 NeXT NLS nonstopux ns16000 ns32000
d14301 1
a14301 1
riscix riscos RT S390 SA110 scs SCO sequent sgi SGI_SOURCE SH3 sinix
a14308 1
TM3200 TM5400 TM5600
d14325 2
a14326 3
$cat Cppsym.know > Cppsym.c
$cat Cppsym.a Cppsym.b Cppsym.c | $tr ' ' $trnl | $sort | $uniq > Cppsym.know
$rm -f Cppsym.a Cppsym.b Cppsym.c
a14364 1
os2-*) ccflags="\$ccflags -Zlinker /PM:VIO" ;;
d14366 1
a14366 1
$cc -o try $optimize \$ccflags $ldflags try.c $libs && ./try$exe_ext
d14420 1
a14420 1
		$sed -e 's/\(..*\)=.*/\1/' ccsym.com
d14430 1
a14430 1
		$sed -e 's/\(..*\)=.*/\1/' ccsym.cpp
d14439 2
a14440 2
		$sed -e 's/\(..*\)=1/\1/' ccsym.own
		$sed -e 's/\(..*\)=.*/\1/' ccsym.own | $uniq >>Cppsym.true
d14446 1
a14446 1
$rm -f ccsym* Cppsym.*
d14507 4
a14827 6
	Sys/Syslog|sys/syslog)
		: XXX syslog requires socket
		case "$d_socket" in 
		true|$define|y) avail_ext="$avail_ext $xxx" ;;
		esac
		;;
a14973 19
: Remove libraries needed only for extensions
: The appropriate ext/Foo/Makefile.PL will add them back in, if necessary.
: The exception is SunOS 4.x, which needs them.
case "${osname}X${osvers}" in
sunos*X4*)
    perllibs="$libs"
    ;;
*) case "$usedl" in
    $define|true|[yY]*)
	    set X `echo " $libs " | sed -e 's@@ -lndbm @@ @@' -e 's@@ -lgdbm @@ @@' -e 's@@ -ldbm @@ @@' -e 's@@ -ldb @@ @@'` 
	    shift
	    perllibs="$*"
	    ;;
    *)	perllibs="$libs"
	    ;;
    esac
    ;;
esac

a15084 2
ccflags_uselargefiles='$ccflags_uselargefiles'
ccname='$ccname'
a15085 1
ccversion='$ccversion'
d15112 4
a15115 4
d_PRIEUldbl='$d_PRIEUldbl'
d_PRIFUldbl='$d_PRIFUldbl'
d_PRIGUldbl='$d_PRIGUldbl'
d_PRIXU64='$d_PRIXU64'
a15123 2
d_SCNfldbl='$d_SCNfldbl'
d__fwalk='$d__fwalk'
d15165 1
a15170 1
d_fcntl_can_lock='$d_fcntl_can_lock'
a15179 1
d_frexpl='$d_frexpl'
a15184 1
d_fsync='$d_fsync'
a15187 1
d_getespwnam='$d_getespwnam'
a15202 1
d_getpagsz='$d_getpagsz'
a15211 1
d_getprpwnam='$d_getprpwnam'
d15217 1
a15228 2
d_isnan='$d_isnan'
d_isnanl='$d_isnanl'
a15254 1
d_modfl='$d_modfl'
a15270 1
d_nv_preserves_uv_bits='$d_nv_preserves_uv_bits'
a15277 1
d_perl_otherlibdirs='$d_perl_otherlibdirs'
a15300 1
d_sbrkproto='$d_sbrkproto'
a15323 1
d_setproctitle='$d_setproctitle'
d15333 1
a15346 1
d_socks5_init='$d_socks5_init'
a15353 2
d_stdio_ptr_lval_nochange_cnt='$d_stdio_ptr_lval_nochange_cnt'
d_stdio_ptr_lval_sets_cnt='$d_stdio_ptr_lval_sets_cnt'
a15432 1
gccosandvers='$gccosandvers'
d15447 1
a15469 1
i_libutil='$i_libutil'
a15482 1
i_prot='$i_prot'
a15554 1
issymlink='$issymlink'
d15560 1
a15563 1
ldflags_uselargefiles='$ldflags_uselargefiles'
a15575 1
libswanted_uselargefiles='$libswanted_uselargefiles'
d15604 1
d15608 1
a15626 6
nvEUformat='$nvEUformat'
nvFUformat='$nvFUformat'
nvGUformat='$nvGUformat'
nveformat='$nveformat'
nvfformat='$nvfformat'
nvgformat='$nvgformat'
a15635 1
otherlibdirs='$otherlibdirs'
a15643 1
perllibs='$perllibs'
d15669 4
a15672 4
sPRIEUldbl='$sPRIEUldbl'
sPRIFUldbl='$sPRIFUldbl'
sPRIGUldbl='$sPRIGUldbl'
sPRIXU64='$sPRIXU64'
a15680 1
sSCNfldbl='$sSCNfldbl'
d15715 1
d15723 1
a15787 1
uvXUformat='$uvXUformat'
a15802 1
versiononly='$versiononly'
a15806 2
yacc='$yacc'
yaccflags='$yaccflags'
d15821 1
a15821 1
	<UU/config.sh $sort | $uniq >UU/oldconfig.sh
d15823 1
a15823 1
	$sort | $uniq -u >UU/oldsyms
d15897 1
a15897 1
		$make depend && echo "Now you must run '$make'."
@


1.1.1.5
log
@stock perl 5.8.0 from CPAN
@
text
@d23 1
a23 1
# Generated on Fri Jul 19 01:54:37 EET DST 2002 [metaconfig 3.0 PL70]
d68 1
a68 4
		case "X${MACHTYPE:-nonesuchmach}" in
		*cygwin) ;;
		*) p_=\; ;;
		esac
a80 1
paths="$paths /system/gnu_library/bin"
a140 1
	export newsh
a162 1

a167 5
from=''
run=''
targetarch=''
to=''
usecrosscompile=''
a175 1
extras=''
a202 1
gmake=''
a275 1
afsroot=''
d290 2
d310 1
a314 2
asctime_r_proto=''
d_asctime_r=''
a324 1
d_class=''
a326 1
d_cmsghdr_s=''
a329 2
crypt_r_proto=''
d_crypt_r=''
a331 4
ctermid_r_proto=''
d_ctermid_r=''
ctime_r_proto=''
d_ctime_r=''
a333 1
d_dbminitproto=''
a334 1
d_dirfd=''
a339 2
d_drand48_r=''
drand48_r_proto=''
a343 2
d_endgrent_r=''
endgrent_r_proto=''
a344 2
d_endhostent_r=''
endhostent_r_proto=''
a345 2
d_endnetent_r=''
endnetent_r_proto=''
a346 2
d_endprotoent_r=''
endprotoent_r_proto=''
a347 2
d_endpwent_r=''
endpwent_r_proto=''
a348 3
d_endservent_r=''
endservent_r_proto=''
d_fchdir=''
a356 2
d_finite=''
d_finitel=''
a358 1
d_flockproto=''
a359 4
d_fp_class=''
d_fpclass=''
d_fpclassify=''
d_fpclassl=''
a374 6
d_getgrent_r=''
getgrent_r_proto=''
d_getgrgid_r=''
getgrgid_r_proto=''
d_getgrnam_r=''
getgrnam_r_proto=''
a382 6
d_gethostbyaddr_r=''
gethostbyaddr_r_proto=''
d_gethostbyname_r=''
gethostbyname_r_proto=''
d_gethostent_r=''
gethostent_r_proto=''
a383 1
d_getitimer=''
a384 2
d_getlogin_r=''
getlogin_r_proto=''
a389 6
d_getnetbyaddr_r=''
getnetbyaddr_r_proto=''
d_getnetbyname_r=''
getnetbyname_r_proto=''
d_getnetent_r=''
getnetent_r_proto=''
a400 6
d_getprotobyname_r=''
getprotobyname_r_proto=''
d_getprotobynumber_r=''
getprotobynumber_r_proto=''
d_getprotoent_r=''
getprotoent_r_proto=''
a403 6
d_getpwent_r=''
getpwent_r_proto=''
d_getpwnam_r=''
getpwnam_r_proto=''
d_getpwuid_r=''
getpwuid_r_proto=''
a404 6
d_getservbyname_r=''
getservbyname_r_proto=''
d_getservbyport_r=''
getservbyport_r_proto=''
d_getservent_r=''
getservent_r_proto=''
a406 2
d_getspnam_r=''
getspnam_r_proto=''
a408 2
d_gmtime_r=''
gmtime_r_proto=''
a409 1
gnulibc_version=''
d412 1
a415 2
d_isfinite=''
d_isinf=''
a421 2
d_localtime_r=''
localtime_r_proto=''
a447 1
d_modfl_pow32_bug=''
a451 1
d_msghdr_s=''
a456 1
d_nl_langinfo=''
a464 2
d_procselfexe=''
procselfexe=''
a466 1
d_pthread_atfork=''
a470 4
d_random_r=''
random_r_proto=''
d_readdir64_r=''
readdir64_r_proto=''
a474 2
d_readdir_r=''
readdir_r_proto=''
a475 2
d_readv=''
d_recvmsg=''
a486 1
d_sendmsg=''
a489 2
d_setgrent_r=''
setgrent_r_proto=''
a491 3
d_sethostent_r=''
sethostent_r_proto=''
d_setitimer=''
a493 2
d_setlocale_r=''
setlocale_r_proto=''
a494 2
d_setnetent_r=''
setnetent_r_proto=''
a501 2
d_setprotoent_r=''
setprotoent_r_proto=''
a502 2
d_setpwent_r=''
setpwent_r_proto=''
a509 2
d_setservent_r=''
setservent_r_proto=''
a521 1
d_sigprocmask=''
a522 2
d_sockatmark=''
d_sockatmarkproto=''
a536 6
d_srand48_r=''
srand48_r_proto=''
d_srandom_r=''
srandom_r_proto=''
d_sresgproto=''
d_sresuproto=''
a560 3
d_strerror_r=''
strerror_r_proto=''
d_strftime=''
a564 1
d_strtoq=''
a570 1
d_syscallproto=''
a579 2
d_tmpnam_r=''
tmpnam_r_proto=''
a580 2
d_ttyname_r=''
ttyname_r_proto=''
a581 2
d_u32align=''
d_ualarm=''
a585 3
d_unordered=''
d_usleep=''
d_usleepproto=''
a597 1
d_writev=''
a620 1
i_crypt=''
a622 3
db_version_major=''
db_version_minor=''
db_version_patch=''
a632 2
i_fp=''
i_fp_class=''
d636 1
a638 1
i_langinfo=''
a702 2
d_tm_tm_gmtoff=''
d_tm_tm_zone=''
a783 1
need_va_copy=''
a802 1
perl_patchlevel=''
a805 1
version_patchlevel_string=''
d810 1
a820 1
nv_preserves_uv_bits=''
a883 1
sig_size=''
a934 1
usereentrant=''
a977 15
: Set executable suffix now -- needed before hints available
if test -f "/libs/version.library"; then
: Amiga OS
    _exe=""
elif test -f "/system/gnu_library/bin/ar.pm"; then
: Stratus VOS
    _exe=".pm"
elif test -n "$DJGPP"; then
: DOS DJGPP
    _exe=".exe"
elif test -d c:/. ; then
: OS/2 or cygwin
    _exe=".exe"
fi

d987 1
a999 1
libnames=''
a1027 1
usereentrant='undef'
d1036 1
a1036 1
libswanted="$libswanted ucb bsd BSD PW x util"
a1064 3
			elif test "X$_exe" != X -a -f "$xxx$_exe"; then
				sh="$xxx";
				break
d1075 1
a1075 1
'')	cat >&2 <<EOM
d1091 5
a1095 17
	test -f $xcat$_exe || xcat=/usr/bin/cat
	if test ! -f $xcat$_exe; then
		for p in `echo $PATH | sed -e "s/$p_/ /g"` $paths; do
			if test -f $p/cat$_exe; then
				xcat=$p/cat
				break
			fi
		done
		if test ! -f $xcat$_exe; then
			echo "Can't find cat anywhere!"
			exit 1
		fi
	fi
	echo "#!$xcat" >sharp
	$eunicefix sharp
	chmod +x sharp
	./sharp > today
d1099 4
a1102 4
		echo "#! $xcat" > sharp
		$eunicefix sharp
		chmod +x sharp
		./sharp > today
d1122 1
a1122 1
rm -f sharp today
d1129 1
a1129 1
cat >sharp <<EOSS
d1135 3
a1137 3
chmod +x sharp
$eunicefix sharp
if ./sharp; then
d1143 1
a1143 1
rm -f sharp
a1154 2
args_exp=''
args_sep=''
a1158 6
	# Extreme backslashitis: replace each ' by '"'"'
	cat <<EOC | sed -e "s/'/'"'"'"'"'"'"'/g" > cmdl.opt
$arg
EOC
	arg_exp=`cat cmdl.opt`
	args_exp="$args_exp$args_sep'$arg_exp'"
a1159 1
	args_sep=' '
a1160 3
# args_exp is good for restarting self: eval "set X $args_exp"; shift; $0 "$@@"
# used by ./hints/os2.sh
rm -f cmdl.opt
d1286 1
a1286 1
            *=*) zzz=`echo "$yyy"|sed 's!=.*!!'`
d1290 2
a1291 2
                      zzz=" "`echo "$yyy"|sed 's!^[^=]*=!!'` 
                      yyy=`echo "$yyy"|sed 's!=.*!!'` ;;
d1297 6
a1302 6
                 *:*) xxx=`echo "$yyy"|sed 's!:.*!!'`
                      yyy=`echo "$yyy"|sed 's!^[^:]*:!!'`
                      zzz=`echo "$yyy"|sed 's!^[^=]*=!!'`
                      yyy=`echo "$yyy"|sed 's!=.*!!'` ;;
                 *)   xxx=`echo "$yyy"|sed 's!:.*!!'`
                      yyy=`echo "$yyy"|sed 's!^[^:]*:!!'` ;;
d1485 1
a1485 1
PERL_CONFIG_SH=true
d1487 2
a1488 2
if test -f MANIFEST; then
	set x `awk '{print $1}' < MANIFEST | grep '\.SH$'`
d1491 1
a1491 1
	set x `(cd "$src"; find . -name "*.SH" -print)`
d1495 1
a1495 1
0) set x `(cd "$src"; echo *.SH)`; shift;;
d1497 1
a1497 1
if test ! -f "$src/$1"; then
d1523 1
a1523 1
			(cd "$dir" && . ./$file)
d1536 1
a1536 1
			sh <"$src/$dir/$file"
d1539 1
a1539 1
			sh <"$src/$file"
d1545 1
a1545 1
if test -f "$src/config_h.SH"; then
d1548 1
a1548 1
	. "$src/config_h.SH"
d1571 1
a1571 1
	echo "Extraction done."
d1604 1
a1604 1
if test -f "$rsrc/MANIFEST"; then
d1606 1
a1606 1
	awk '$1 !~ /PACK[A-Z]+/ {print $1}' "$rsrc/MANIFEST" | (split -l 50 2>/dev/null || split -50)
d1610 1
a1610 1
		(cd "$rsrc"; ls `cat "$tmppwd/$filelist"` >/dev/null 2>>"$tmppwd/missing")
a1659 5
       case "`echo foo|tr '\r\n' xy 2>/dev/null`" in
       fooxy) trnl='\n\r' ;;
       esac
fi
if test X"$trnl" = X; then
d1811 1
a1811 2
	[yY]) echo >&4 "Okay, continuing."
	      usedevel="$define" ;;
a1819 10
case "$usedevel" in
$define|true|[yY]*)
	case "$versiononly" in
	'') versiononly="$define" ;;
	esac
	case "$installusrbinperl" in
	'') installusrbinperl="$undef" ;;
	esac
	;;
esac
a1930 3
	elif test "X$_exe" != X -a -f \$thisthing$_exe; then
		echo \$thisthing
        	exit 0
a1950 1
chmod
d1957 1
a1974 1
gmake
a1977 1
make
d2002 1
a2002 1
	eval $file=$xxx$_exe
d2035 1
a2035 1
	eval $file=$xxx$_exe
a2053 1
	_egrep=$grep
a2059 24
	_ln=$cp
	;;
esac
case "$make" in
make)	
	case "$gmake" in
	gmake)
	echo "I can't find make or gmake, and my life depends on it." >&4
	echo "Go find a public domain implementation or fix your PATH setting!" >&4
	exit 1
	;;
	esac
	;;
esac	
case "$gmake" in
gmake)	;;
*)	# We can't have osname yet.
	if test -f "/system/gnu_library/bin/ar.pm"; then # Stratus VOS
		# Assume that gmake, if found, is definitely GNU make
		# and prefer it over the system make.
		echo "Substituting gmake for make."
		make=$gmake
		_make=$gmake
	fi
d2069 1
d2106 1
a2106 1
cat <<EOS >trygcc
d2109 1
a2109 1
cat <<'EOSC' >>trygcc
d2118 1
a2118 1
    if $cc -o try $ccflags $ldflags try.c; then
d2147 1
a2147 10
                [yY]*) cc=gcc; ccname=gcc; ccflags=''; despair=no;
                       if $test -f usethreads.cbu; then
                           $cat >&4 <<EOM 

*** However, any setting of the C compiler flags (e.g. for thread support)
*** has been lost.  It may be necessary to pass -Dcc=gcc to Configure
*** (together with e.g. -Dusethreads).

EOM
                       fi;;
a2150 21
    fi
    $rm -f try try.*
    ;;
esac
EOSC

cat <<EOS >checkcc
$startsh
EOS
cat <<'EOSC' >>checkcc
case "$cc" in        
'') ;;
*)  $rm -f try try.*              
    $cat >try.c <<EOM
int main(int argc, char *argv[]) {
  return 0;
}
EOM
    if $cc -o try $ccflags $ldflags try.c; then
       :
    else
d2152 1
a2152 3
           echo "Uh-oh, the C compiler '$cc' doesn't seem to be working." >&4
        fi
        $cat >&4 <<EOM         
d2158 2
a2159 1
        exit 1
d2181 1
a2181 1
*"ln"*" -s")
d2185 1
a2185 4
		case "$newsh" in
		'') sh     -c "PATH= test -h sym" >/dev/null 2>&1 ;;
		*)  $newsh -c "PATH= test -h sym" >/dev/null 2>&1 ;;
		esac
d2188 6
a2193 25
		else
			echo "Your builtin 'test -h' may be broken." >&4
			case "$test" in
			/*)	;;
			*)	pth=`echo $PATH | sed -e "s/$p_/ /g"`
				for p in $pth
				do
					if test -f "$p/$test"; then
						test="$p/$test"
						break
					fi
				done
				;;
			esac
			case "$test" in
			/*)
				echo "Trying external '$test -h'." >&4
				issymlink="$test -h"
				if $test ! -h sym >/dev/null 2>&1; then
					echo "External '$test -h' is broken, too." >&4
					issymlink=''
				fi
				;;
			*)	issymlink='' ;;
			esac
a2198 1
			echo "The builtin '$test -L' worked." >&4
d2221 1
a2221 1
		*"ln"*" -s:"*"test -"?)
d2251 2
a2252 2
			if test ! -f t/base/lex.t; then
				echo "Failed to create the symlinks (t/base/lex.t missing).  Aborting." >&4
a2264 244

case "$usecrosscompile" in
$define|true|[yY]*)
	$echo "Cross-compiling..."
        croak=''
    	case "$cc" in
	*-*-gcc) # A cross-compiling gcc, probably.
	    targetarch=`$echo $cc|$sed 's/-gcc$//'`
	    ar=$targetarch-ar
	    # leave out ld, choosing it is more complex
	    nm=$targetarch-nm
	    ranlib=$targetarch-ranlib
	    $echo 'extern int foo;' > try.c
	    set X `$cc -v -E try.c 2>&1 | $awk '/^#include </,/^End of search /'|$grep '/include'`
	    shift
            if $test $# -gt 0; then
	        incpth="$incpth $*"
		incpth="`$echo $incpth|$sed 's/^ //'`"
                echo "Guessing incpth '$incpth'." >&4
                for i in $*; do
		    j="`$echo $i|$sed 's,/include$,/lib,'`"
		    if $test -d $j; then
			libpth="$libpth $j"
		    fi
                done   
		libpth="`$echo $libpth|$sed 's/^ //'`"
                echo "Guessing libpth '$libpth'." >&4
	    fi
	    $rm -f try.c
	    ;;
	esac
	case "$targetarch" in
	'') echo "Targetarch not defined." >&4; croak=y ;;
        *)  echo "Using targetarch $targetarch." >&4 ;;
	esac
	case "$incpth" in
	'') echo "Incpth not defined." >&4; croak=y ;;
        *)  echo "Using incpth '$incpth'." >&4 ;;
	esac
	case "$libpth" in
	'') echo "Libpth not defined." >&4; croak=y ;;
        *)  echo "Using libpth '$libpth'." >&4 ;;
	esac
	case "$usrinc" in
	'') for i in $incpth; do
	        if $test -f $i/errno.h -a -f $i/stdio.h -a -f $i/time.h; then
		    usrinc=$i
	            echo "Guessing usrinc $usrinc." >&4
		    break
		fi
	    done
	    case "$usrinc" in
	    '') echo "Usrinc not defined." >&4; croak=y ;;
	    esac
            ;;
        *)  echo "Using usrinc $usrinc." >&4 ;;
	esac
	case "$targethost" in
	'') echo "Targethost not defined." >&4; croak=y ;;
        *)  echo "Using targethost $targethost." >&4
	esac
	locincpth=' '
	loclibpth=' '
	case "$croak" in
	y) echo "Cannot continue, aborting." >&4; exit 1 ;;
	esac
	case "$src" in
	/*) run=$src/Cross/run
	    targetmkdir=$src/Cross/mkdir
	    to=$src/Cross/to
	    from=$src/Cross/from
	    ;;
	*)  pwd=`$test -f ../Configure & cd ..; pwd`
	    run=$pwd/Cross/run
	    targetmkdir=$pwd/Cross/mkdir
	    to=$pwd/Cross/to
	    from=$pwd/Cross/from
	    ;;
	esac
	case "$targetrun" in
	'') targetrun=ssh ;;
	esac
	case "$targetto" in
	'') targetto=scp ;;
	esac
	case "$targetfrom" in
	'') targetfrom=scp ;;
	esac
    	run=$run-$targetrun
    	to=$to-$targetto
    	from=$from-$targetfrom
	case "$targetdir" in
	'')  targetdir=/tmp
             echo "Guessing targetdir $targetdir." >&4
             ;;
	esac
	case "$targetuser" in
	'')  targetuser=root
             echo "Guessing targetuser $targetuser." >&4
             ;;
	esac
	case "$targetfrom" in
	scp)	q=-q ;;
	*)	q='' ;;
	esac
	case "$targetrun" in
	ssh|rsh)
	    cat >$run <<EOF
#!/bin/sh
case "\$1" in
-cwd)
  shift
  cwd=\$1
  shift
  ;;
esac
case "\$cwd" in
'') cwd=$targetdir ;;
esac
exe=\$1
shift
if $test ! -f \$exe.xok; then
  $to \$exe
  $touch \$exe.xok
fi
$targetrun -l $targetuser $targethost "cd \$cwd && ./\$exe \$@@"
EOF
	    ;;
	*)  echo "Unknown targetrun '$targetrun'" >&4
	    exit 1
	    ;;
	esac
	case "$targetmkdir" in
	*/Cross/mkdir)
	    cat >$targetmkdir <<EOF
#!/bin/sh
$targetrun -l $targetuser $targethost "mkdir -p \$@@"
EOF
	    $chmod a+rx $targetmkdir
	    ;;
	*)  echo "Unknown targetmkdir '$targetmkdir'" >&4
	    exit 1
	    ;;
	esac
	case "$targetto" in
	scp|rcp)
	    cat >$to <<EOF
#!/bin/sh
for f in \$@@
do
  case "\$f" in
  /*)
    $targetmkdir \`dirname \$f\`
    $targetto $q \$f $targetuser@@$targethost:\$f            || exit 1
    ;;
  *)
    $targetmkdir $targetdir/\`dirname \$f\`
    $targetto $q \$f $targetuser@@$targethost:$targetdir/\$f || exit 1
    ;;
  esac
done
exit 0
EOF
	    ;;
	cp) cat >$to <<EOF
#!/bin/sh
for f in \$@@
do
  case "\$f" in
  /*)
    $mkdir -p $targetdir/\`dirname \$f\`
    $cp \$f $targetdir/\$f || exit 1
    ;;
  *)
    $targetmkdir $targetdir/\`dirname \$f\`
    $cp \$f $targetdir/\$f || exit 1
    ;;
  esac
done
exit 0
EOF
	    ;;
	*)  echo "Unknown targetto '$targetto'" >&4
	    exit 1
	    ;;
	esac
	case "$targetfrom" in
	scp|rcp)
	  cat >$from <<EOF
#!/bin/sh
for f in \$@@
do
  $rm -f \$f
  $targetfrom $q $targetuser@@$targethost:$targetdir/\$f . || exit 1
done
exit 0
EOF
	    ;;
	cp) cat >$from <<EOF
#!/bin/sh
for f in \$@@
do
  $rm -f \$f
  cp $targetdir/\$f . || exit 1
done
exit 0
EOF
	    ;;
	*)  echo "Unknown targetfrom '$targetfrom'" >&4
	    exit 1
	    ;;
	esac
	if $test ! -f $run; then
	    echo "Target 'run' script '$run' not found." >&4
	else
	    $chmod a+rx $run
	fi
	if $test ! -f $to; then
	    echo "Target 'to' script '$to' not found." >&4
	else
	    $chmod a+rx $to
	fi
	if $test ! -f $from; then
	    echo "Target 'from' script '$from' not found." >&4
	else
	    $chmod a+rx $from
	fi
	if $test ! -f $run -o ! -f $to -o ! -f $from; then
	    exit 1
	fi
	cat >&4 <<EOF
Using '$run' for remote execution,
and '$from' and '$to'
for remote file transfer.
EOF
	;;
*)	run=''
	to=:
	from=:
	usecrosscompile='undef'
	targetarch=''
	;;
esac

a2414 1
	$test -f /system/gnu_library/bin/ar.pm && osname=vos
a2535 3
		openbsd) osname=openbsd
                	osvers="$3"
                	;;
d2574 1
a2574 5
					osvers=`sizer -v | awk '{print $3}' |  tr '[A-Z]' '[a-z]' | sed 's/^[xvt]//'`
					case "$osvers" in
					[1-9].[0-9]*) ;;
					*) osvers=`echo "$3" | sed 's/^[xvt]//'` ;;
					esac
d2583 1
a2583 1
		uts)	osname=uts
a2585 2
		vos) osvers="$3"
			;;
a2654 8
        case "$targetarch" in
        '') ;;
        *)  hostarch=$osname
            osname=`echo $targetarch|sed 's,^[^-]*-,,'`
            osvers=''
            ;;
        esac

d2729 1
a2729 1
		elif $test X"$tans" = X -o X"$tans" = Xnone ; then
a2865 70
case "$usesocks" in
$define|true|[yY]*)	dflt='y';;
*) dflt='n';;
esac
cat <<EOM

Perl can be built to use the SOCKS proxy protocol library.  To do so,
Configure must be run with -Dusesocks.  If you use SOCKS you also need
to use the PerlIO abstraction layer, this will be implicitly selected.

If this doesn't make any sense to you, just accept the default '$dflt'.
EOM
rp='Build Perl for SOCKS?'
. ./myread
case "$ans" in
y|Y)	val="$define" ;;     
*)      val="$undef" ;;
esac
set usesocks
eval $setvar

case "$usesocks" in
$define|true|[yY]*) useperlio="$define";;
esac

case "$useperlio" in
$define|true|[yY]*|'')	dflt='y';;
*) dflt='n';;
esac
cat <<EOM

Previous version of $package used the standard IO mechanisms as
defined in <stdio.h>.  Versions 5.003_02 and later of $package allow
alternate IO mechanisms via the PerlIO abstraction layer, but the
stdio mechanism is still available if needed.  The abstraction layer
can use AT&T's sfio (if you already have sfio installed) or regular stdio.
Using PerlIO with sfio may cause problems with some extension modules.

If this doesn't make any sense to you, just accept the default '$dflt'.
EOM
rp='Use the PerlIO abstraction layer?'
. ./myread
case "$ans" in
y|Y) 
	val="$define"
	;;
*)      
	echo "Ok, doing things the stdio way."
	val="$undef"
	;;
esac
set useperlio
eval $setvar 

case "$usesocks" in
$define|true|[yY]*)
	case "$useperlio" in
	$define|true|[yY]*) ;;
	*)	cat >&4 <<EOM

You are using the SOCKS proxy protocol library which means that you
should also use the PerlIO layer.  You may be headed for trouble.

EOM
		;;
	esac
	;;
esac

	
d2868 1
a2868 12
*)     # Catch case where user specified ithreads or 5005threads but
       # forgot -Dusethreads (A.D. 4/2002)
       case "$useithreads$use5005threads" in
       *$define*)      
		case "$useperlio" in
		"$define")	dflt='y' ;;
		*)		dflt='n' ;;
		esac
		;;
       *)	dflt='n';;
       esac
       ;;
d2875 5
a2879 4
Note that Perl built with threading support runs slightly slower
and uses more memory than plain Perl. The current implementation
is believed to be stable, but it is fairly new, and so should be
treated with caution.
d2896 9
a2904 8
Since release 5.6, Perl has had two different threading implementations,
the newer interpreter-based version (ithreads) with one interpreter per
thread, and the older 5.005 version (5005threads).
The 5005threads version is effectively unmaintained and will probably be
removed in Perl 5.10, so there should be no need to build a Perl using it
unless needed for backwards compatibility with some existing 5.005threads
code.

d2915 1
a2915 1
	rp='Use the newer interpreter-based ithreads?'
a2949 10
if test X"$usethreads" = "X$define" -a "X$useperlio" = "Xundef"; then
	cat >&4 <<EOF
***
*** To build with ithreads you must also use the PerlIO layer.
*** Cannot continue, aborting.
***
EOF
	exit 1
fi

a3005 11

case "$usemorebits" in
"$define"|true|[yY]*)
	use64bitint="$define"
	uselongdouble="$define"
	usemorebits="$define"
	;;
*)	usemorebits="$undef"
	;;
esac

a3107 3

: See if they have not cc but they do have gcc
. ./trygcc
d3118 1
a3118 1
$cat >try.c <<EOM
d3131 2
a3132 2
if $cc -o try $ccflags $ldflags try.c; then
	gccversion=`$run ./try`
d3150 1
a3150 1
$rm -f try try.*
d3189 147
a3335 11
# gcc 3.1 complains about adding -Idirectories that it already knows about,
# so we will take those off from locincpth.
case "$gccversion" in
3*)
    echo "main(){}">try.c
    for incdir in `$cc -v -c try.c 2>&1 | \
       sed '1,/^#include <\.\.\.>/d;/^End of search list/,$d;s/^ //'` ; do
       locincpth=`echo $locincpth | sed s!$incdir!!`
    done
    $rm -f try try.*
esac
d3403 1
a3403 3
	: getfile will accept an answer from the comma-separated list
	: enclosed in parentheses even if it does not meet other criteria.
	expr "$fn" : '.*(\(.*\)).*' | $tr ',' $trnl >getfile.ok
d3663 51
a3713 14
: see how we invoke the C preprocessor
echo " "
echo "Now, how can we feed standard input to your C preprocessor..." >&4
cat <<'EOT' >testcpp.c
#define ABC abc
#define XYZ xyz
ABC.XYZ
EOT
cd ..
if test ! -f cppstdin; then
	if test "X$osname" = "Xaix" -a "X$gccversion" = X; then
		# AIX cc -E doesn't show the absolute headerfile
		# locations but we'll cheat by using the -M flag.
		echo 'cat >.$$.c; rm -f .$$.u; '"$cc"' ${1+"$@@"} -M -c .$$.c 2>/dev/null; test -s .$$.u && awk '"'"'$2 ~ /\.h$/ { print "# 0 \""$2"\"" }'"'"' .$$.u; rm -f .$$.o .$$.u; '"$cc"' -E ${1+"$@@"} .$$.c; rm .$$.c' > cppstdin
d3715 1
a3715 1
		echo 'cat >.$$.c; '"$cc"' -E ${1+"$@@"} .$$.c; rm .$$.c' >cppstdin
d3717 13
a3729 7
else
	echo "Keeping your $hint cppstdin wrapper."
fi
chmod 755 cppstdin
wrapper=`pwd`/cppstdin
ok='false'
cd UU
d3731 22
a3752 17
if $test "X$cppstdin" != "X" && \
	$cppstdin $cppminus <testcpp.c >testcpp.out 2>&1 && \
	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1
then
	echo "You used to use $cppstdin $cppminus so we'll use that again."
	case "$cpprun" in
	'') echo "But let's see if we can live without a wrapper..." ;;
	*)
		if $cpprun $cpplast <testcpp.c >testcpp.out 2>&1 && \
			$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1
		then
			echo "(And we'll use $cpprun $cpplast to preprocess directly.)"
			ok='true'
		else
			echo "(However, $cpprun $cpplast does not work, let's see...)"
		fi
		;;
d3754 6
a3759 6
else
	case "$cppstdin" in
	'') ;;
	*)
		echo "Good old $cppstdin $cppminus does not seem to be of any help..."
		;;
d3761 6
a3766 1
fi
d3768 3
a3770 88
if $ok; then
	: nothing
elif echo 'Maybe "'"$cc"' -E" will work...'; \
	$cc -E <testcpp.c >testcpp.out 2>&1; \
	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
	echo "Yup, it does."
	x_cpp="$cc -E"
	x_minus='';
elif echo 'Nope...maybe "'"$cc"' -E -" will work...'; \
	$cc -E - <testcpp.c >testcpp.out 2>&1; \
	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
	echo "Yup, it does."
	x_cpp="$cc -E"
	x_minus='-';
elif echo 'Nope...maybe "'"$cc"' -P" will work...'; \
	$cc -P <testcpp.c >testcpp.out 2>&1; \
	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
	echo "Yipee, that works!"
	x_cpp="$cc -P"
	x_minus='';
elif echo 'Nope...maybe "'"$cc"' -P -" will work...'; \
	$cc -P - <testcpp.c >testcpp.out 2>&1; \
	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
	echo "At long last!"
	x_cpp="$cc -P"
	x_minus='-';
elif echo 'No such luck, maybe "'$cpp'" will work...'; \
	$cpp <testcpp.c >testcpp.out 2>&1; \
	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
	echo "It works!"
	x_cpp="$cpp"
	x_minus='';
elif echo 'Nixed again...maybe "'$cpp' -" will work...'; \
	$cpp - <testcpp.c >testcpp.out 2>&1; \
	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
	echo "Hooray, it works!  I was beginning to wonder."
	x_cpp="$cpp"
	x_minus='-';
elif echo 'Uh-uh.  Time to get fancy.  Trying a wrapper...'; \
	$wrapper <testcpp.c >testcpp.out 2>&1; \
	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
	x_cpp="$wrapper"
	x_minus=''
	echo "Eureka!"
else
	dflt=''
	rp="No dice.  I can't find a C preprocessor.  Name one:"
	. ./myread
	x_cpp="$ans"
	x_minus=''
	$x_cpp <testcpp.c >testcpp.out 2>&1
	if $contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
		echo "OK, that will do." >&4
	else
echo "Sorry, I can't get that to work.  Go find one and rerun Configure." >&4
		exit 1
	fi
fi

case "$ok" in
false)
	cppstdin="$x_cpp"
	cppminus="$x_minus"
	cpprun="$x_cpp"
	cpplast="$x_minus"
	set X $x_cpp
	shift
	case "$1" in
	"$cpp")
		echo "Perhaps can we force $cc -E using a wrapper..."
		if $wrapper <testcpp.c >testcpp.out 2>&1; \
			$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1
		then
			echo "Yup, we can."
			cppstdin="$wrapper"
			cppminus='';
		else
			echo "Nope, we'll have to live without it..."
		fi
		;;
	esac
	case "$cpprun" in
	"$wrapper")
		cpprun=''
		cpplast=''
		;;
	esac
	;;
d3773 3
a3775 3
case "$cppstdin" in
"$wrapper"|'cppstdin') ;;
*) $rm -f $wrapper;;
d3777 1
a3777 1
$rm -f testcpp.c testcpp.out
d3779 2
a3780 29
: Set private lib path
case "$plibpth" in
'') if ./mips; then
		plibpth="$incpath/usr/lib /usr/local/lib /usr/ccs/lib"
	fi;;
esac
case "$libpth" in
' ') dlist='';;
'') dlist="$loclibpth $plibpth $glibpth";;
*) dlist="$libpth";;
esac

: Now check and see which directories actually exist, avoiding duplicates
libpth=''
for xxx in $dlist
do
    if $test -d $xxx; then
		case " $libpth " in
		*" $xxx "*) ;;
		*) libpth="$libpth $xxx";;
		esac
    fi
done
$cat <<'EOM'

Some systems have incompatible or broken versions of libraries.  Among
the directories listed in the question below, please remove any you
know not to be holding relevant libraries, and add any that are needed.
Say "none" for none.
d3782 1
d3784 1
a3784 9
case "$libpth" in
'') dflt='none';;
*)
	set X $libpth
	shift
	dflt=${1+"$@@"}
	;;
esac
rp="Directories to use for library searches?"
d3787 2
a3788 66
none) libpth=' ';;
*) libpth="$ans";;
esac

: compute shared library extension
case "$so" in
'')
	if xxx=`./loc libc.sl X $libpth`; $test -f "$xxx"; then
		dflt='sl'
	else
		dflt='so'
	fi
	;;
*) dflt="$so";;
esac
$cat <<EOM

On some systems, shared libraries may be available.  Answer 'none' if
you want to suppress searching of shared libraries for the remainder
of this configuration.

EOM
rp='What is the file extension used for shared libraries?'
. ./myread
so="$ans"

: Define several unixisms.
: Hints files or command line option can be used to override them.
: The convoluted testing is in case hints files set either the old
: or the new name.
case "$_exe" in
'')	case "$exe_ext" in
	'')	;;
	*)	_exe="$exe_ext" ;;
	esac
	;;
esac
case "$_a" in
'')	case "$lib_ext" in
    '')	_a='.a';;
	*)	_a="$lib_ext" ;;
	esac
	;;
esac
case "$_o" in
'') case "$obj_ext" in
	'')	_o='.o';;
	*)	_o="$obj_ext";;
	esac
	;;
esac
case "$p_" in
'') case "$path_sep" in
	'')	p_=':';;
	*)	p_="$path_sep";;
	esac
	;;
esac
exe_ext=$_exe
lib_ext=$_a
obj_ext=$_o
path_sep=$p_

: Which makefile gets called first.  This is used by make depend.
case "$firstmakefile" in
'') firstmakefile='makefile';;
d3790 2
d3817 1
a3817 1
		xxx=`ls $thisdir/lib$thislib.$so.[0-9] 2>/dev/null|sed -n '$p'`
d4029 1
a4029 4
case "$cppflags" in
'') cppflags="$ccflags" ;;
*)  cppflags="$cppflags $ccflags" ;;
esac
d4152 1
a4152 1
	$run ./try
d4159 2
a4160 2
	if $sh -c "$run ./try" >>try.msg 2>&1; then
		xxx=`$run ./try`
d4210 66
a4275 10
: define a shorthand compile call
compile='
mc_file=$1;
shift;
$cc -o ${mc_file} $optimize $ccflags $ldflags $* ${mc_file}.c $libs > /dev/null 2>&1;'
: define a shorthand compile call for compilations that should be ok.
compile_ok='
mc_file=$1;
shift;
$cc -o ${mc_file} $optimize $ccflags $ldflags $* ${mc_file}.c $libs;'
d4282 1
a4282 1
	$cat >try.c <<'EOCP'
d4292 3
a4294 3
	set try
	if eval $compile_ok && $run ./try > /dev/null; then
		eval `$run ./try`
d4321 6
a4326 1
$rm -f try try.*
a4327 1
: check for long long
d4329 3
a4331 20
echo "Checking to see if you have long long..." >&4
echo 'int main() { long long x = 7; return 0; }' > try.c
set try
if eval $compile; then
	val="$define"
	echo "You have long long."
else
	val="$undef"
	echo "You do not have long long."
fi
$rm try.*
set d_longlong
eval $setvar

: check for length of long long
case "${d_longlong}${longlongsize}" in
$define)
	echo " "
	echo "Checking to see how big your long longs are..." >&4
	$cat >try.c <<'EOCP'
d4335 2
a4336 2
    printf("%d\n", (int)sizeof(long long));
    return(0);
d4339 11
a4349 93
	set try
	if eval $compile_ok; then
		longlongsize=`$run ./try`
		echo "Your long longs are $longlongsize bytes long."
	else
		dflt='8'
		echo " "
		echo "(I can't seem to compile the test program.  Guessing...)"
		rp="What is the size of a long long (in bytes)?"
		. ./myread
		longlongsize="$ans"
	fi
	if $test "X$longsize" = "X$longlongsize"; then
		echo "(That isn't any different from an ordinary long.)"
	fi	
	;;
esac
$rm -f try.* try

: determine filename position in cpp output
echo " "
echo "Computing filename position in cpp output for #include directives..." >&4
case "$osname" in
vos) testaccess=-e ;;
*)   testaccess=-r ;;
esac
echo '#include <stdio.h>' > foo.c
$cat >fieldn <<EOF
$startsh
$cppstdin $cppflags $cppminus <foo.c 2>/dev/null | \
$grep '^[ 	]*#.*stdio\.h' | \
while read cline; do
	pos=1
	set \$cline
	while $test \$# -gt 0; do
		if $test $testaccess \`echo \$1 | $tr -d '"'\`; then
			echo "\$pos"
			exit 0
		fi
		shift
		pos=\`expr \$pos + 1\`
	done
done
EOF
chmod +x fieldn
fieldn=`./fieldn`
$rm -f foo.c fieldn
case $fieldn in
'') pos='???';;
1) pos=first;;
2) pos=second;;
3) pos=third;;
*) pos="${fieldn}th";;
esac
echo "Your cpp writes the filename in the $pos field of the line."

case "$osname" in
vos) cppfilter="tr '\\\\>' '/' |" ;; # path component separator is >
*)   cppfilter='' ;;
esac
: locate header file
$cat >findhdr <<EOF
$startsh
wanted=\$1
name=''
for usrincdir in $usrinc
do
	if test -f \$usrincdir/\$wanted; then
		echo "\$usrincdir/\$wanted"
		exit 0
	fi
done
awkprg='{ print \$$fieldn }'
echo "#include <\$wanted>" > foo\$\$.c
$cppstdin $cppminus $cppflags < foo\$\$.c 2>/dev/null | \
$cppfilter $grep "^[ 	]*#.*\$wanted" | \
while read cline; do
	name=\`echo \$cline | $awk "\$awkprg" | $tr -d '"'\`
	case "\$name" in
	*[/\\\\]\$wanted) echo "\$name"; exit 1;;
	*[\\\\/]\$wanted) echo "\$name"; exit 1;;
	*) exit 2;;
	esac;
done;
#
# status = 0: grep returned 0 lines, case statement not executed
# status = 1: headerfile found
# status = 2: while loop executed, no headerfile found
#
status=\$?
$rm -f foo\$\$.c;
if test \$status -eq 1; then
	exit 0;
d4351 1
a4351 3
exit 1
EOF
chmod +x findhdr
d4353 4
a4356 29
: define an alternate in-header-list? function
inhdr='echo " "; td=$define; tu=$undef; yyy=$@@;
cont=true; xxf="echo \"<\$1> found.\" >&4";
case $# in 2) xxnf="echo \"<\$1> NOT found.\" >&4";;
*) xxnf="echo \"<\$1> NOT found, ...\" >&4";;
esac;
case $# in 4) instead=instead;; *) instead="at last";; esac;
while $test "$cont"; do
	xxx=`./findhdr $1`
	var=$2; eval "was=\$$2";
	if $test "$xxx" && $test -r "$xxx";
	then eval $xxf;
	eval "case \"\$$var\" in $undef) . ./whoa; esac"; eval "$var=\$td";
		cont="";
	else eval $xxnf;
	eval "case \"\$$var\" in $define) . ./whoa; esac"; eval "$var=\$tu"; fi;
	set $yyy; shift; shift; yyy=$@@;
	case $# in 0) cont="";;
	2) xxf="echo \"but I found <\$1> $instead.\" >&4";
		xxnf="echo \"and I did not find <\$1> either.\" >&4";;
	*) xxf="echo \"but I found <\$1\> instead.\" >&4";
		xxnf="echo \"there is no <\$1>, ...\" >&4";;
	esac;
done;
while $test "$yyy";
do set $yyy; var=$2; eval "was=\$$2";
	eval "case \"\$$var\" in $define) . ./whoa; esac"; eval "$var=\$tu";
	set $yyy; shift; shift; yyy=$@@;
done'
a4357 3
: see if inttypes.h is available
: we want a real compile instead of Inhdr because some systems
: have an inttypes.h which includes non-existent headers
d4359 8
a4366 2
$cat >try.c <<EOCP
#include <inttypes.h>
d4368 2
a4369 1
	static int32_t foo32 = 0x12345678;
d4373 10
a4382 3
if eval $compile; then
	echo "<inttypes.h> found." >&4
	val="$define"
d4384 6
a4389 2
	echo "<inttypes.h> NOT found." >&4
	val="$undef"
d4391 40
a4430 2
$rm -f try.c try
set i_inttypes
d4432 37
a4468 5

: check for int64_t
echo " "
echo "Checking to see if you have int64_t..." >&4
$cat >try.c <<EOCP
d4470 5
a4474 5
#$i_inttypes I_INTTYPES
#ifdef I_INTTYPES
#include <inttypes.h>
#endif
int main() { int64_t x = 7; }
d4476 24
a4499 15
set try
if eval $compile; then
	val="$define"
	echo "You have int64_t."
else
	val="$undef"
	echo "You do not have int64_t."
fi
$rm -f try try.*
set d_int64_t
eval $setvar


echo " "
echo "Checking which 64-bit integer type we could use..." >&4
a4500 45
case "$intsize" in
8) val=int
   set quadtype
   eval $setvar
   val='"unsigned int"'
   set uquadtype
   eval $setvar
   quadkind=1
   ;;
*) case "$longsize" in
   8) val=long
      set quadtype
      eval $setvar
      val='"unsigned long"'
      set uquadtype
      eval $setvar
      quadkind=2
      ;;
   *) case "$d_longlong:$longlongsize" in
      define:8)
        val='"long long"'
        set quadtype
        eval $setvar
        val='"unsigned long long"'
        set uquadtype
        eval $setvar
        quadkind=3
        ;;
      *) case "$d_int64_t" in
         define)
           val=int64_t
           set quadtype
           eval $setvar
           val=uint64_t
           set uquadtype
           eval $setvar
           quadkind=4
           ;;
         esac
         ;;
      esac
      ;;
   esac
   ;;
esac
d4502 5
a4506 3
case "$quadtype" in
'')	echo "Alas, no 64-bit integer types in sight." >&4
	d_quad="$undef"
d4508 1
a4508 2
*)	echo "We could use '$quadtype' for 64-bit integers." >&4
	d_quad="$define"
a4585 4
   case "$d_quad" in
   "$define") ;;
   *) dflt='n' ;;
   esac
a4592 1
(The default has been chosen based on your configuration.)
a4620 1
(The default has been chosen based on your configuration.)
d4682 1
a4682 6
cat >try.c <<'EOCP'
/* Find out version of GNU C library.  __GLIBC__ and __GLIBC_MINOR__
   alone are insufficient to distinguish different versions, such as
   2.0.6 and 2.0.7.  The function gnu_get_libc_version() appeared in
   libc version 2.1.0.      A. Dougherty,  June 3, 2002.
*/
d4684 1
a4684 1
int main(void)
d4687 1
a4687 11
#   ifdef __GLIBC_MINOR__
#       if __GLIBC__ >= 2 && __GLIBC_MINOR__ >= 1
#           include <gnu/libc-version.h>
	    printf("%s\n",  gnu_get_libc_version());
#       else
	    printf("%d.%d\n",  __GLIBC__, __GLIBC_MINOR__);
#       endif
#   else
	printf("%d\n",  __GLIBC__);
#   endif
    return 0;
d4689 1
a4689 1
    return 1;
d4692 3
a4694 3
EOCP
set try
if eval $compile_ok && $run ./try > glibc.ver; then
d4696 1
a4696 2
	gnulibc_version=`$cat glibc.ver`
	echo "You are using the GNU C Library version $gnulibc_version"
a4698 1
	gnulibc_version=''
d4701 1
a4701 1
$rm -f try try.* glibc.ver
d4807 1
d4955 1
a4955 1
xrun='eval "<libc.tmp $com >libc.list"; echo "done." >&4'
d5069 1
a5069 1
	$sed -n 's/^\([^ 	]*\)[ 	]*syscall[0-9]*[ 	]*$/\1/p' /lib/syscalls.exp >>libc.list
a5141 250
: check for length of double
echo " "
case "$doublesize" in
'')
	echo "Checking to see how big your double precision numbers are..." >&4
	$cat >try.c <<'EOCP'
#include <stdio.h>
int main()
{
    printf("%d\n", (int)sizeof(double));
    exit(0);
}
EOCP
	set try
	if eval $compile_ok; then
		doublesize=`$run ./try`
		echo "Your double is $doublesize bytes long."
	else
		dflt='8'
		echo "(I can't seem to compile the test program.  Guessing...)"
		rp="What is the size of a double precision number (in bytes)?"
		. ./myread
		doublesize="$ans"
	fi
	;;
esac
$rm -f try.c try

: check for long doubles
echo " "
echo "Checking to see if you have long double..." >&4
echo 'int main() { long double x = 7.0; }' > try.c
set try
if eval $compile; then
	val="$define"
	echo "You have long double."
else
	val="$undef"
	echo "You do not have long double."
fi
$rm try.*
set d_longdbl
eval $setvar

: check for length of long double
case "${d_longdbl}${longdblsize}" in
$define)
	echo " "
	echo "Checking to see how big your long doubles are..." >&4
	$cat >try.c <<'EOCP'
#include <stdio.h>
int main()
{
	printf("%d\n", sizeof(long double));
}
EOCP
	set try
	set try
	if eval $compile; then
		longdblsize=`$run ./try`
		echo "Your long doubles are $longdblsize bytes long."
	else
		dflt='8'
		echo " "
		echo "(I can't seem to compile the test program.  Guessing...)" >&4
		rp="What is the size of a long double (in bytes)?"
		. ./myread
		longdblsize="$ans"
	fi
	if $test "X$doublesize" = "X$longdblsize"; then
		echo "(That isn't any different from an ordinary double.)"
	fi	
	;;
esac
$rm -f try.* try

echo " "

if $test X"$d_longdbl" = X"$define"; then

echo "Checking how to print long doubles..." >&4

if $test X"$sPRIfldbl" = X -a X"$doublesize" = X"$longdblsize"; then
	$cat >try.c <<'EOCP'
#include <sys/types.h>
#include <stdio.h>
int main() {
  double d = 123.456;
  printf("%.3f\n", d);
}
EOCP
	set try
	if eval $compile; then
		yyy=`$run ./try`
		case "$yyy" in
		123.456)
			sPRIfldbl='"f"'; sPRIgldbl='"g"'; sPRIeldbl='"e"';
                	sPRIFUldbl='"F"'; sPRIGUldbl='"G"'; sPRIEUldbl='"E"';
			echo "We will use %f."
			;;
		esac
	fi
fi

if $test X"$sPRIfldbl" = X; then
	$cat >try.c <<'EOCP'
#include <sys/types.h>
#include <stdio.h>
int main() {
  long double d = 123.456;
  printf("%.3Lf\n", d);
}
EOCP
	set try
	if eval $compile; then
		yyy=`$run ./try`
		case "$yyy" in
		123.456)
			sPRIfldbl='"Lf"'; sPRIgldbl='"Lg"'; sPRIeldbl='"Le"';
                	sPRIFUldbl='"LF"'; sPRIGUldbl='"LG"'; sPRIEUldbl='"LE"';
			echo "We will use %Lf."
			;;
		esac
	fi
fi

if $test X"$sPRIfldbl" = X; then
	$cat >try.c <<'EOCP'
#include <sys/types.h>
#include <stdio.h>
int main() {
  long double d = 123.456;
  printf("%.3llf\n", d);
}
EOCP
	set try
	if eval $compile; then
		yyy=`$run ./try`
		case "$yyy" in
		123.456)
			sPRIfldbl='"llf"'; sPRIgldbl='"llg"'; sPRIeldbl='"lle"';
                	sPRIFUldbl='"llF"'; sPRIGUldbl='"llG"'; sPRIEUldbl='"llE"';
			echo "We will use %llf."
			;;
		esac
	fi
fi

if $test X"$sPRIfldbl" = X; then
	$cat >try.c <<'EOCP'
#include <sys/types.h>
#include <stdio.h>
int main() {
  long double d = 123.456;
  printf("%.3lf\n", d);
}
EOCP
	set try
	if eval $compile; then
		yyy=`$run ./try`
		case "$yyy" in
		123.456)
			sPRIfldbl='"lf"'; sPRIgldbl='"lg"'; sPRIeldbl='"le"';
                	sPRIFUldbl='"lF"'; sPRIGUldbl='"lG"'; sPRIEUldbl='"lE"';
			echo "We will use %lf."
			;;
		esac
	fi
fi

if $test X"$sPRIfldbl" = X; then
	echo "Cannot figure out how to print long doubles." >&4
else
	sSCNfldbl=$sPRIfldbl	# expect consistency
fi

$rm -f try try.*

fi # d_longdbl

case "$sPRIfldbl" in
'')	d_PRIfldbl="$undef"; d_PRIgldbl="$undef"; d_PRIeldbl="$undef"; 
	d_PRIFUldbl="$undef"; d_PRIGUldbl="$undef"; d_PRIEUldbl="$undef"; 
	d_SCNfldbl="$undef";
	;;
*)	d_PRIfldbl="$define"; d_PRIgldbl="$define"; d_PRIeldbl="$define"; 
	d_PRIFUldbl="$define"; d_PRIGUldbl="$define"; d_PRIEUldbl="$define"; 
	d_SCNfldbl="$define";
	;;
esac

: see if modfl exists
set modfl d_modfl
eval $inlibc

d_modfl_pow32_bug="$undef"

case "$d_longdbl$d_modfl" in
$define$define)
	$cat <<EOM
Checking to see whether your modfl() is okay for large values...
EOM
$cat >try.c <<EOCP
#include <math.h> 
#include <stdio.h>
int main() {
    long double nv = 4294967303.15;
    long double v, w;
    v = modfl(nv, &w);         
#ifdef __GLIBC__
    printf("glibc");
#endif
    printf(" %"$sPRIfldbl" %"$sPRIfldbl" %"$sPRIfldbl"\n", nv, v, w);
    return 0;
}
EOCP
	case "$osname:$gccversion" in
	aix:)	saveccflags="$ccflags"
		ccflags="$ccflags -qlongdouble" ;; # to avoid core dump
	esac
	set try
	if eval $compile; then
		foo=`$run ./try`
		case "$foo" in
		*" 4294967303.150000 1.150000 4294967302.000000")
			echo >&4 "Your modfl() is broken for large values."
			d_modfl_pow32_bug="$define"
			case "$foo" in
			glibc)	echo >&4 "You should upgrade your glibc to at least 2.2.2 to get a fixed modfl()."
			;;
			esac
			;;
		*" 4294967303.150000 0.150000 4294967303.000000")
			echo >&4 "Your modfl() seems okay for large values."
			;;
		*)	echo >&4 "I don't understand your modfl() at all."
			d_modfl="$undef"
			;;
		esac
		$rm -f try.* try core core.try.*
	else
		echo "I cannot figure out whether your modfl() is okay, assuming it isn't."
		d_modfl="$undef"
	fi
	case "$osname:$gccversion" in
	aix:)	ccflags="$saveccflags" ;; # restore
	esac
	;;
esac

d5186 3
a5188 18
message=X
case "$uselongdouble:$d_sqrtl:$d_modfl" in
$define:$define:$define)
	: You have both
	;;
$define:$define:$undef)
	message="I could not find modfl"
	;;
$define:$undef:$define)
	message="I could not find sqrtl"
	;;
$define:$undef:$undef)
	message="I found neither sqrtl nor modfl"
	;;
esac

if $test "$message" != X; then
	$cat <<EOM >&4
d5191 2
a5192 3
*** the mathematic functions for long doubles.
*** ($message)
*** I'm disabling the use of long doubles.
d5195 31
d5227 11
a5237 1
	uselongdouble=$undef
d5239 35
a5296 4
case "$targetarch" in
'') ;;
*)  archname=`echo $targetarch|sed 's,^[^-]*-,,'` ;;
esac
d5357 1
a5357 1
		echo "...but long doubles are equal to doubles, not changing architecture name." >&4
a5373 3
	;;
*)
	echo "Perlio not selected, using stdio." >&4
d5375 1
a5375 1
        *-stdio*) echo "...and architecture name already has -stdio." >&4
d5377 1
a5377 1
        *)      archname="$archname-stdio"
a5419 5
case "$afsroot" in
'')	afsroot=/afs ;;
*)	afsroot=$afsroot ;;
esac

d5425 1
a5425 1
*)	if test -d $afsroot; then
d5497 1
a5507 1
       perl_patchlevel=`grep ',"DEVEL[0-9][0-9]*"' $rsrc/patchlevel.h|sed 's/[^0-9]//g'`
a5514 7
	perl_patchlevel=0
	$echo "(You do not have patchlevel.h.  Eek.)"
fi
if $test -r $rsrc/.patch ; then  
	if $test "`cat $rsrc/.patch`" -gt "$perl_patchlevel" ; then
		perl_patchlevel=`cat $rsrc/.patch`
	fi
d5516 1
a5516 9
: Define a handy string here to avoid duplication in myconfig.SH and configpm.
version_patchlevel_string="version $patchlevel subversion $subversion"
case "$perl_patchlevel" in
0|'') ;;
*) version_patchlevel_string="$version_patchlevel_string patch $perl_patchlevel" ;;
esac

$echo "(You have $package $version_patchlevel_string.)"

d5627 39
d5721 2
a5722 131
				echo "I don't think setuid scripts are secure." >&4
				dflt=n
			fi
			;;
		esac
		rp='Does your kernel have *secure* setuid scripts?'
		. ./myread
		case "$ans" in
		[yY]*)	val="$define";;
		*)	val="$undef";;
		esac
	fi
else
	echo "I don't think setuid scripts are secure (no /dev/fd directory)." >&4
	echo "(That's for file descriptors, not floppy disks.)"
	val="$undef"
fi
set d_suidsafe
eval $setvar

$rm -f reflect flect

: now see if they want to do setuid emulation
echo " "
val="$undef"
case "$d_suidsafe" in
"$define")
	val="$undef"
	echo "No need to emulate SUID scripts since they are secure here." >&4
	;;
*)
	$cat <<EOM
Some systems have disabled setuid scripts, especially systems where
setuid scripts cannot be secure.  On systems where setuid scripts have
been disabled, the setuid/setgid bits on scripts are currently
useless.  It is possible for $package to detect those bits and emulate
setuid/setgid in a secure fashion.  This emulation will only work if
setuid scripts have been disabled in your kernel.

EOM
	case "$d_dosuid" in
	"$define") dflt=y ;;
	*) dflt=n ;;
	esac
	rp="Do you want to do setuid/setgid emulation?"
	. ./myread
	case "$ans" in
	[yY]*)	val="$define";;
	*)	val="$undef";;
	esac
	;;
esac
set d_dosuid
eval $setvar

: see if this is a malloc.h system
set malloc.h i_malloc
eval $inhdr

: see if stdlib is available
set stdlib.h i_stdlib
eval $inhdr

: check for void type
echo " "
echo "Checking to see how well your C compiler groks the void type..." >&4
case "$voidflags" in
'')
	$cat >try.c <<'EOCP'
#if TRY & 1
void sub() {
#else
sub() {
#endif
	extern void moo();	/* function returning void */
	void (*goo)();		/* ptr to func returning void */
#if TRY & 8
	void *hue;		/* generic ptr */
#endif
#if TRY & 2
	void (*foo[10])();
#endif

#if TRY & 4
	if(goo == moo) {
		exit(0);
	}
#endif
	exit(0);
}
int main() { sub(); }
EOCP
	if $cc $ccflags -c -DTRY=$defvoidused try.c >.out 2>&1 ; then
		voidflags=$defvoidused
	echo "Good.  It appears to support void to the level $package wants.">&4
		if $contains warning .out >/dev/null 2>&1; then
			echo "However, you might get some warnings that look like this:"
			$cat .out
		fi
	else
echo "Hmm, your compiler has some difficulty with void. Checking further..." >&4
		if $cc $ccflags -c -DTRY=1 try.c >/dev/null 2>&1; then
			echo "It supports 1..."
			if $cc $ccflags -c -DTRY=3 try.c >/dev/null 2>&1; then
				echo "It also supports 2..."
				if $cc $ccflags -c -DTRY=7 try.c >/dev/null 2>&1; then
					voidflags=7
					echo "And it supports 4 but not 8 definitely."
				else
					echo "It doesn't support 4..."
					if $cc $ccflags -c -DTRY=11 try.c >/dev/null 2>&1; then
						voidflags=11
						echo "But it supports 8."
					else
						voidflags=3
						echo "Neither does it support 8."
					fi
				fi
			else
				echo "It does not support 2..."
				if $cc $ccflags -c -DTRY=13 try.c >/dev/null 2>&1; then
					voidflags=13
					echo "But it supports 4 and 8."
				else
					if $cc $ccflags -c -DTRY=5 try.c >/dev/null 2>&1; then
						voidflags=5
						echo "And it supports 4 but has not heard about 8."
					else
						echo "However it supports 8 but not 4."
					fi
				fi
d5724 8
a5731 4
		else
			echo "There is no support at all for void."
			voidflags=0
		fi
d5733 27
a5759 9
esac
case "$voidflags" in
"$defvoidused") ;;
*)	$cat >&4 <<'EOM'
  Support flag bits are:
    1: basic void declarations.
    2: arrays of pointers to functions returning void.
    4: operations between pointers to and addresses of void functions.
    8: generic void pointers.
d5761 5
a5765 2
	dflt="$voidflags";
	rp="Your void support flags add up to what?"
d5767 4
a5770 1
	voidflags="$ans"
d5773 2
a5774 1
$rm -f try.* .out
d5776 1
a5776 1
: check for length of pointer
d5778 28
a5805 28
case "$ptrsize" in
'')
	echo "Checking to see how big your pointers are..." >&4
	if test "$voidflags" -gt 7; then
		echo '#define VOID_PTR char *' > try.c
	else
		echo '#define VOID_PTR void *' > try.c
	fi
	$cat >>try.c <<'EOCP'
#include <stdio.h>
int main()
{
    printf("%d\n", (int)sizeof(VOID_PTR));
    exit(0);
}
EOCP
	set try
	if eval $compile_ok; then
		ptrsize=`$run ./try`
		echo "Your pointers are $ptrsize bytes long."
	else
		dflt='4'
		echo "(I can't seem to compile the test program.  Guessing...)" >&4
		rp="What is the size of a pointer (in bytes)?"
		. ./myread
		ptrsize="$ans"
	fi
	;;
d5807 1
a5807 5
$rm -f try.c try
case "$use64bitall" in
"$define"|true|[yY]*)
	case "$ptrsize" in
	4)	cat <<EOM >&4
d5809 37
a5845 2
*** You have chosen a maximally 64-bit build, but your pointers
*** are only 4 bytes wide, disabling maximal 64-bitness.
d5847 29
a5875 5
EOM
		use64bitall="$undef"
		case "$use64bitint" in
		"$define"|true|[yY]*) ;;
		*)	cat <<EOM >&4
d5877 3
a5879 10
*** Downgrading from maximal 64-bitness to using 64-bit integers.

EOM
			use64bitint="$define"
			;;
		esac
		;;
	esac
	;;
esac
d5881 3
d5888 2
a5889 7
[yY]*|true|$define)	dflt='y' ;;
[nN]*|false|$undef)	dflt='n' ;;
*)	case "$ptrsize" in
	4) dflt='y' ;;
	*) dflt='n' ;;
	esac
	;;
a6278 52
echo " "
case "$extras" in
'') dflt='n';;
*) dflt='y';;
esac
cat <<EOM
Perl can be built with extra modules or bundles of modules which
will be fetched from the CPAN and installed alongside Perl.

Notice that you will need access to the CPAN; either via the Internet,
or a local copy, for example a CD-ROM or a local CPAN mirror.  (You will
be asked later to configure the CPAN.pm module which will in turn do
the installation of the rest of the extra modules or bundles.)

Notice also that if the modules require any external software such as
libraries and headers (the libz library and the zlib.h header for the
Compress::Zlib module, for example) you MUST have any such software
already installed, this configuration process will NOT install such
things for you.

If this doesn't make any sense to you, just accept the default '$dflt'.
EOM
rp='Install any extra modules (y or n)?'
. ./myread
case "$ans" in
y|Y)
	cat <<EOM

Please list any extra modules or bundles to be installed from CPAN,
with spaces between the names.  The names can be in any format the
'install' command of CPAN.pm will understand.  (Answer 'none',
without the quotes, to install no extra modules or bundles.)
EOM
	rp='Extras?'
	dflt="$extras"
	. ./myread
	extras="$ans"
esac
case "$extras" in
''|'none')
	val=''
	$rm -f ../extras.lst
	;;
*)	echo "(Saving the list of extras for later...)"
	echo "$extras" > ../extras.lst
	val="'$extras'"
	;;
esac
set extras
eval $setvar
echo " "

d6282 1
a6282 1
'')	for tdir in `echo "$binexp$path_sep$PATH" | $sed "s/$path_sep/ /g"`; do
d6284 1
a6284 1
		if $test -x $tdir/perl$exe_ext && $tdir/perl -Mless -e 'use 5.005;' >/dev/null 2>&1; then
d6287 2
a6288 2
		elif $test -x $tdir/perl5$exe_ext && $tdir/perl5 -Mless -e 'use 5.005;' >/dev/null 2>&1; then
			perl5=$tdir/perl5
d6353 1
a6353 1
'')	if test -x "$perl5$exe_ext"; then
d6360 1
a6360 1
*)  eval dflt=\"$inc_version_list\" ;;
d6366 5
a6370 1
5.005) dflt=none ;;
d6372 1
a6372 1
$cat <<EOM
d6483 1
a6483 1
	tdir=`pwd`; cd "$rsrc"; $ls -C $dldir/dl*.xs; cd "$tdir"
a6510 1
	                darwin) dflt='none' ;;
d6547 1
a6547 1
		if $cc $ccflags $ldflags try.c >/dev/null 2>&1 && $run ./a.out; then
d6601 1
a6601 1
		-L*|-R*|-Wl,-R*)
d6732 2
a6733 2
		cygwin*) # ld links against an importlib
			dflt=libperl$lib_ext
d6810 1
a6810 1
	solaris)
d6813 1
a6813 1
	freebsd|netbsd)
d6816 1
a6816 1
	bsdos|linux|irix*|dec_osf)
d6871 2
a6872 3
	syspath='/usr/share/man/man1 /usr/man/man1'
	syspath="$syspath /usr/man/mann /usr/man/manl /usr/man/local/man1"
	syspath="$syspath /usr/man/u_man/man1"
d6904 1
a6904 2
	lookpath="$prefixexp/share/man/man1"
	lookpath="$lookpath $prefixexp/man/man1 $prefixexp/man/l_man/man1"
d7094 1
a7094 1
if $test -d /usr/etc/yp || $test -d /etc/yp || $test -d /usr/lib/yp; then
a7200 3
case "$myhostname" in
'') myhostname=noname ;;
esac
d7301 1
a7301 1
			dflt='.nonet'
a7418 6
case "$versiononly" in
"$define") inc_version_list=''
           inc_version_list_init=0
           ;;
esac

d7463 1
a7463 4
	case "$versiononly" in
	"$define")	perlpath="$binexp/perl$version";;
	*)		perlpath="$binexp/perl";;
	esac
d7546 29
a7574 24
: define an is-a-typedef? function
typedef='type=$1; var=$2; def=$3; shift; shift; shift; inclist=$@@;
case "$inclist" in
"") inclist="sys/types.h";;
esac;
eval "varval=\$$var";
case "$varval" in
"")
	$rm -f temp.c;
	for inc in $inclist; do
		echo "#include <$inc>" >>temp.c;
	done;
	echo "#ifdef $type" >> temp.c;
	echo "printf(\"We have $type\");" >> temp.c;
	echo "#endif" >> temp.c;
	$cppstdin $cppflags $cppminus < temp.c >temp.E 2>/dev/null;
	if $contains $type temp.E >/dev/null 2>&1; then
		eval "$var=\$type";
	else
		eval "$var=\$def";
	fi;
	$rm -f temp.?;;
*) eval "$var=\$varval";;
esac'
d7576 24
a7599 30
: define an is-a-typedef? function that prompts if the type is not available.
typedef_ask='type=$1; var=$2; def=$3; shift; shift; shift; inclist=$@@;
case "$inclist" in
"") inclist="sys/types.h";;
esac;
eval "varval=\$$var";
case "$varval" in
"")
	$rm -f temp.c;
	for inc in $inclist; do
		echo "#include <$inc>" >>temp.c;
	done;
	echo "#ifdef $type" >> temp.c;
	echo "printf(\"We have $type\");" >> temp.c;
	echo "#endif" >> temp.c;
	$cppstdin $cppflags $cppminus < temp.c >temp.E 2>/dev/null;
	echo " " ;
	echo "$rp" | $sed -e "s/What is/Looking for/" -e "s/?/./";
	if $contains $type temp.E >/dev/null 2>&1; then
		echo "$type found." >&4;
		eval "$var=\$type";
	else
		echo "$type NOT found." >&4;
		dflt="$def";
		. ./myread ;
		eval "$var=\$ans";
	fi;
	$rm -f temp.?;;
*) eval "$var=\$varval";;
esac'
d7601 3
a7603 4
: see what type lseek is declared as in the kernel
rp="What is the type used for lseek's offset on this system?"
set off_t lseektype long stdio.h sys/types.h
eval $typedef_ask
d7606 7
a7612 2
echo "Checking to see how big your file offsets are..." >&4
$cat >try.c <<EOCP
d7615 3
a7617 4
int main()
{
    printf("%d\n", (int)sizeof($lseektype));
    return(0); 
d7620 11
a7630 11
set try
if eval $compile_ok; then
	lseeksize=`$run ./try`
	echo "Your file offsets are $lseeksize bytes long."
else
	dflt=$longsize
	echo " "
	echo "(I can't seem to compile the test program.  Guessing...)"
	rp="What is the size of your file offsets (in bytes)?"
	. ./myread
	lseeksize="$ans"
a7631 1
$rm -f try.c try
d7633 2
a7634 12
: see what type file positions are declared as in the library
rp="What is the type for file position used by fsetpos()?"
set fpos_t fpostype long stdio.h sys/types.h
eval $typedef_ask

echo " "
case "$fpostype" in
*_t) zzz="$fpostype"	;;
*)   zzz="fpos_t"	;;
esac
echo "Checking the size of $zzz..." >&4 
cat > try.c <<EOCP
d7638 2
a7639 2
    printf("%d\n", (int)sizeof($fpostype));
    exit(0);
d7642 11
a7652 18
set try
if eval $compile_ok; then
	yyy=`$run ./try`
	case "$yyy" in
	'')	fpossize=4
		echo "(I can't execute the test program--guessing $fpossize.)" >&4
		;;
	*)	fpossize=$yyy
		echo "Your $zzz is $fpossize bytes long."
		;;
	esac
else
	dflt="$longsize"
	echo " " >&4
	echo "(I can't compile the test program.  Guessing...)" >&4
	rp="What is the size of your file positions (in bytes)?"
	. ./myread
	fpossize="$ans"
d7655 2
a7656 51


# Backward compatibility (uselfs is deprecated).
case "$uselfs" in
"$define"|true|[yY]*)
	cat <<EOM >&4

*** Configure -Duselfs is deprecated, using -Duselargefiles instead.
EOM
	uselargefiles="$define"
	;;
esac                          

case "$lseeksize:$fpossize" in
8:8) cat <<EOM

You can have files larger than 2 gigabytes.
EOM
   val="$define" ;;
*)    case "$uselargefiles" in
   "$undef"|false|[nN]*) dflt='n' ;;
   *)	dflt='y' ;;
   esac
   cat <<EOM

Perl can be built to understand large files (files larger than 2 gigabytes)
on some systems.  To do so, Configure can be run with -Duselargefiles.

If this doesn't make any sense to you, just accept the default '$dflt'.
EOM
   rp='Try to understand large files, if available?'
   . ./myread
   case "$ans" in
   y|Y) 	val="$define" ;;
   *)   	val="$undef"  ;;
   esac
   ;;
esac
set uselargefiles
eval $setvar
case "$uselargefiles" in
"$define")
: Look for a hint-file generated 'call-back-unit'.  If the
: user has specified that a large files perl is to be built,
: we may need to set or change some other defaults.
	if $test -f uselargefiles.cbu; then
		echo "Your platform has some specific hints for large file builds, using them..."
		. ./uselargefiles.cbu
		echo " "
		echo "Rechecking to see how big your file offsets are..." >&4
		$cat >try.c <<EOCP
d7659 3
a7661 4
int main()
{
    printf("%d\n", (int)sizeof($lseektype));
    return(0); 
d7664 9
a7672 15
		set try
		if eval $compile_ok; then
			lseeksize=`$run ./try`
			$echo "Your file offsets are now $lseeksize bytes long."
		else
			dflt="$lseeksize"
			echo " "
			echo "(I can't seem to compile the test program.  Guessing...)"
			rp="What is the size of your file offsets (in bytes)?"
			. ./myread
			lseeksize="$ans"
		fi
		case "$fpostype" in
		*_t) zzz="$fpostype"	;;
		*)   zzz="fpos_t"	;;
d7674 5
a7678 2
		$echo $n "Rechecking the size of $zzz...$c" >&4 
		$cat > try.c <<EOCP
d7682 2
a7683 2
    printf("%d\n", (int)sizeof($fpostype));
    exit(0);
d7686 10
a7695 21
		set try
		if eval $compile_ok; then
			yyy=`$run ./try`
			dflt="$lseeksize"
			case "$yyy" in
			'')	echo " "
				echo "(I can't execute the test program--guessing $fpossize.)" >&4
				;;
			*)	fpossize=$yyy
				echo " $fpossize bytes." >&4
				;;
			esac
		else
			dflt="$fpossize"
			echo " "
			echo "(I can't compile the test program.  Guessing...)" >&4
			rp="What is the size of your file positions (in bytes)?"
			. ./myread
			fpossize="$ans"
		fi
		$rm -f try.c try
d7697 1
a7697 2
	;;
esac
d7699 2
a7700 21
case "$vendorprefix" in
'')	d_vendorbin="$undef"
	vendorbin=''
	vendorbinexp=''
	;;
*)	d_vendorbin="$define"
	: determine where vendor-supplied executables go.
	case "$vendorbin" in
	'') dflt=$vendorprefix/bin ;;
	*)	dflt="$vendorbin" ;;
	esac
	fn=d~+
	rp='Pathname for the vendor-supplied executables directory?'
	. ./getfile
	vendorbin="$ans"
	vendorbinexp="$ansexp"
	;;
esac
: Change installation prefix, if necessary.
if $test X"$prefix" != X"$installprefix"; then
	installvendorbin=`echo $vendorbinexp | $sed "s#^$prefix#$installprefix#"`
d7702 1
a7702 1
	installvendorbin="$vendorbinexp"
d7705 1
a7705 3
: see if qgcvt exists
set qgcvt d_qgcvt
eval $inlibc
d7707 1
a7707 1
: Check how to convert floats to strings.
d7709 10
a7718 1
if test "X$d_Gconvert" = X; then
d7720 1
d7748 1
a7748 2
#if defined(USE_LONG_DOUBLE) && defined(HAS_LONG_DOUBLE)
#ifdef HAS_PRIgldbl
a7750 3
#define Gconvert(x,n,t,b) sprintf((b),"%.*g",(n),(double)(x))
#endif
#else
a7792 15
	Gconvert((DOUBLETYPE)0.01, 8, 0, buf); 
	checkit("0.01", buf);

	Gconvert((DOUBLETYPE)0.001, 8, 0, buf); 
	checkit("0.001", buf);

	Gconvert((DOUBLETYPE)0.0001, 8, 0, buf); 
	checkit("0.0001", buf);

	Gconvert((DOUBLETYPE)0.00009, 8, 0, buf);
	if (strlen(buf) > 5)
	    checkit("9e-005", buf); /* for Microsoft ?? */
	else
	    checkit("9e-05", buf);

a7830 13
	/* Testing of 1e+129 in bigintpm.t must not get extra '.' here. */
	Gconvert((DOUBLETYPE)1e34, 8, 0, buf);
	/* 34 should be enough to scare even long double
	 * places into using the e notation. */
	if (strlen(buf) > 5)
	    checkit("1e+034", buf); /* for Microsoft */
	else
	    checkit("1e+34", buf);

	/* For Perl, if you add additional tests here, also add them to
	 * t/base/num.t for benefit of platforms not using Configure or
	 * overriding d_Gconvert */

d7834 6
a7839 15
: first add preferred functions to our list
xxx_list=""
for xxx_convert in $gconvert_preference; do
    case $xxx_convert in
    gcvt|gconvert|sprintf) xxx_list="$xxx_list $xxx_convert" ;;
    *) echo "Discarding unrecognized gconvert_preference $xxx_convert" >&4 ;;
    esac 
done
: then add any others
for xxx_convert in gconvert gcvt sprintf; do
    case "$xxx_list" in
    *$xxx_convert*) ;;
    *) xxx_list="$xxx_list $xxx_convert" ;;
    esac 
done
d7841 8
a7848 27
case "$d_longdbl$uselongdouble" in
"$define$define")
    : again, add prefered functions to our list first
    xxx_ld_list=""
    for xxx_convert in $gconvert_ld_preference; do
        case $xxx_convert in
        qgcvt|gcvt|gconvert|sprintf) xxx_ld_list="$xxx_ld_list $xxx_convert" ;;
        *) echo "Discarding unrecognized gconvert_ld_preference $xxx_convert" ;;
        esac
    done
    : then add qgcvt, sprintf--then, in xxx_list order, gconvert and gcvt
    for xxx_convert in qgcvt sprintf $xxx_list; do
        case "$xxx_ld_list" in
        $xxx_convert*|*" $xxx_convert"*) ;;
        *) xxx_ld_list="$xxx_ld_list $xxx_convert" ;;
        esac
    done
    : if sprintf cannot do long doubles, move it to the end
    if test "$d_PRIgldbl" != "$define"; then
        xxx_ld_list="`echo $xxx_ld_list|sed s/sprintf//` sprintf"
    fi
    : if no qgcvt, remove it
    if test "$d_qgcvt" != "$define"; then
        xxx_ld_list="`echo $xxx_ld_list|sed s/qgcvt//`"
    fi
    : use the ld_list
    xxx_list="$xxx_ld_list"
d7858 1
a7858 1
		if $run ./try; then
a7862 1
			xxx_convert=''
d7868 1
a7868 7

if test X$xxx_convert = X; then
    echo "*** WHOA THERE!!! ***" >&4
    echo "None of ($xxx_list)  seemed to work properly.  I'll use sprintf." >&4
    xxx_convert=sprintf
fi

a7875 2
   "$define$define$undef")
      d_Gconvert='sprintf((b),"%.*g",(n),(double)(x))' ;;
a7880 2
fi

d7895 5
a7899 153
: locate the flags for 'access()'
case "$d_access" in
"$define")
	echo " "
	$cat >access.c <<'EOCP'
#include <sys/types.h>
#ifdef I_FCNTL
#include <fcntl.h>
#endif
#ifdef I_SYS_FILE
#include <sys/file.h>
#endif
#ifdef I_UNISTD
#include <unistd.h>
#endif
int main() {
	exit(R_OK);
}
EOCP
	: check sys/file.h first, no particular reason here
	if $test `./findhdr sys/file.h` && \
		$cc -o access $cppflags -DI_SYS_FILE access.c >/dev/null 2>&1 ; then
		h_sysfile=true;
		echo "<sys/file.h> defines the *_OK access constants." >&4
	elif $test `./findhdr fcntl.h` && \
		$cc -o access $cppflags -DI_FCNTL access.c >/dev/null 2>&1 ; then
		h_fcntl=true;
		echo "<fcntl.h> defines the *_OK access constants." >&4
	elif $test `./findhdr unistd.h` && \
		$cc -o access $cppflags -DI_UNISTD access.c >/dev/null 2>&1 ; then
		echo "<unistd.h> defines the *_OK access constants." >&4
	else
		echo "I can't find the four *_OK access constants--I'll use mine." >&4
	fi
	;;
esac
$rm -f access*

: see if accessx exists
set accessx d_accessx
eval $inlibc

: see if alarm exists
set alarm d_alarm
eval $inlibc

: see if POSIX threads are available
set pthread.h i_pthread
eval $inhdr

: define a fucntion to check prototypes
$cat > protochk <<EOSH
$startsh
cc="$cc"
optimize="$optimize"
ccflags="$ccflags"
prototype="$prototype"
define="$define"
rm=$rm
usethreads=$usethreads
i_pthread=$i_pthread
pthread_h_first=$pthread_h_first
EOSH

$cat >> protochk <<'EOSH'

$rm -f try.c
foo="$1"
shift
while test $# -ge 2; do
	case "$1" in
		$define) echo "#include <$2>" >> try.c ;;
		literal) echo "$2" >> try.c ;;
	esac
    # Extra magic for the benefit of systems that need pthread.h
    # to be included early to correctly detect threadsafe functions.
    # Such functions must guarantee themselves, though, that the usethreads
    # and i_pthread have been defined, before calling protochk.
    if test "$usethreads" = "$define" -a "$i_pthread" = "$define" -a "$pthread_h_first" = "$define" -a "$pthread_h_done" = ""; then
	echo "#include <pthread.h>" >> try.c
	pthread_h_done=yes
    fi
    shift 2
done
test "$prototype" = "$define"  && echo '#define CAN_PROTOTYPE' >> try.c
cat >> try.c <<'EOCP'
#ifdef CAN_PROTOTYPE
#define	_(args) args
#else
#define	_(args) ()
#endif
EOCP
echo "$foo" >> try.c
echo 'int no_real_function_has_this_name _((void)) { return 0; }' >> try.c
$cc $optimize $ccflags -c try.c > /dev/null 2>&1
status=$?
$rm -f try.[co]
exit $status
EOSH
chmod +x protochk
$eunicefix protochk

hasproto='varname=$1; func=$2; shift; shift;
while $test $# -ge 2; do
	case "$1" in
	$define) echo "#include <$2>";;
	esac ;
    shift 2;
done > try.c;
$cppstdin $cppflags $cppminus < try.c > tryout.c 2>/dev/null;
if $contains "$func.*(" tryout.c >/dev/null 2>&1; then
	echo "$func() prototype found.";
	val="$define";
else
	echo "$func() prototype NOT found.";
	val="$undef";
fi;
set $varname;
eval $setvar;
$rm -f try.c tryout.c'

: see if sys/types.h has to be included
set sys/types.h i_systypes
eval $inhdr

: see if sys/select.h has to be included
set sys/select.h i_sysselct
eval $inhdr

hasfield='varname=$1; struct=$2; field=$3; shift; shift; shift;
while $test $# -ge 2; do
	case "$1" in
	$define) echo "#include <$2>";;
	esac ;
    shift 2;
done > try.c;
echo "int main () { struct $struct foo; char* bar; bar = (char*)foo.$field; }" >> try.c;
set try;
if eval $compile; then
	val="$define";
else
	val="$undef";
fi;
set $varname;
eval $setvar;
$rm -f try.c try.o'

: see if we should include time.h, sys/time.h, or both
echo " "
if test "X$timeincl" = X; then
	echo "Testing to see if we should include <time.h>, <sys/time.h> or both." >&4
	$echo $n "I'm now running the test program...$c"
	$cat >try.c <<'EOCP'
d7901 2
a7902 2
#ifdef I_TIME
#include <time.h>
d7904 2
a7905 3
#ifdef I_SYSTIME
#ifdef SYSTIMEKERNEL
#define KERNEL
d7907 2
a7908 1
#include <sys/time.h>
d7910 2
a7911 19
#ifdef I_SYSSELECT
#include <sys/select.h>
#endif
int main()
{
	struct tm foo;
#ifdef S_TIMEVAL
	struct timeval bar;
#endif
#ifdef S_TIMEZONE
	struct timezone tzp;
#endif
	if (foo.tm_sec == foo.tm_sec)
		exit(0);
#ifdef S_TIMEVAL
	if (bar.tv_sec == bar.tv_sec)
		exit(0);
#endif
	exit(1);
d7914 16
a7929 79
	flags=''
	for s_timezone in '-DS_TIMEZONE' ''; do
	sysselect=''
	for s_timeval in '-DS_TIMEVAL' ''; do
	for i_systimek in '' '-DSYSTIMEKERNEL'; do
	for i_time in '' '-DI_TIME'; do
	for i_systime in '-DI_SYSTIME' ''; do
		case "$flags" in
		'') $echo $n ".$c"
			set try $i_time $i_systime $i_systimek $sysselect $s_timeval $s_timezone
			if eval $compile; then
				set X $i_time $i_systime $i_systimek $sysselect $s_timeval
				shift
				flags="$*"
				echo " "
				$echo $n "Succeeded with $flags$c"
			fi
			;;
		esac
	done
	done
	done
	done
	done
	timeincl=''
	echo " "
	case "$flags" in
	*SYSTIMEKERNEL*) i_systimek="$define"
		timeincl=`./findhdr sys/time.h`
		echo "We'll include <sys/time.h> with KERNEL defined." >&4;;
	*) i_systimek="$undef";;
	esac
	case "$flags" in
	*I_TIME*) i_time="$define"
		timeincl=`./findhdr time.h`" $timeincl"
		echo "We'll include <time.h>." >&4;;
	*) i_time="$undef";;
	esac
	case "$flags" in
	*I_SYSTIME*) i_systime="$define"
		timeincl=`./findhdr sys/time.h`" $timeincl"
		echo "We'll include <sys/time.h>." >&4;;
	*) i_systime="$undef";;
	esac
	$rm -f try.c try
fi
: see if struct tm knows about tm_zone
case "$i_systime$i_time" in
*$define*) 
        echo " "
        echo "Checking to see if your struct tm has tm_zone field..." >&4
        set d_tm_tm_zone tm tm_zone $i_systime sys/time.h $i_time time.h
        eval $hasfield
        ;;
*)      val="$undef"
        set d_tm_tm_zone
        eval $setvar
        ;;
esac
case "$d_tm_tm_zone" in
"$define")      echo "Yes, it does."   ;;
*)              echo "No, it doesn't." ;;
esac
: see if struct tm knows about tm_gmtoff
case "$i_systime$i_time" in
*$define*) 
        echo " "
        echo "Checking to see if your struct tm has tm_gmtoff field..." >&4
        set d_tm_tm_gmtoff tm tm_gmtoff $i_systime sys/time.h $i_time time.h
        eval $hasfield
        ;;
*)      val="$undef"
        set d_tm_tm_gmtoff
        eval $setvar
        ;;
esac
case "$d_tm_tm_gmtoff" in
"$define")      echo "Yes, it does."   ;;
*)              echo "No, it doesn't." ;;
d7931 5
d7937 2
a7938 2
: see if asctime_r exists
set asctime_r d_asctime_r
a7939 49
case "$d_asctime_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_time time.h $i_systime sys/time.h"
	case "$d_asctime_r_proto:$usethreads" in
	":define")	d_asctime_r_proto=define
		set d_asctime_r_proto asctime_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_asctime_r_proto" in
	define)
	case "$asctime_r_proto" in
	''|0) try='char* asctime_r(const struct tm*, char*);'
	./protochk "extern $try" $hdrs && asctime_r_proto=B_SB ;;
	esac
	case "$asctime_r_proto" in
	''|0) try='char* asctime_r(const struct tm*, char*, int);'
	./protochk "extern $try" $hdrs && asctime_r_proto=B_SBI ;;
	esac
	case "$asctime_r_proto" in
	''|0) try='int asctime_r(const struct tm*, char*);'
	./protochk "extern $try" $hdrs && asctime_r_proto=I_SB ;;
	esac
	case "$asctime_r_proto" in
	''|0) try='int asctime_r(const struct tm*, char*, int);'
	./protochk "extern $try" $hdrs && asctime_r_proto=I_SBI ;;
	esac
	case "$asctime_r_proto" in
	''|0)	d_asctime_r=undef
 	        asctime_r_proto=0
		echo "Disabling asctime_r, cannot determine prototype." >&4 ;;
	* )	case "$asctime_r_proto" in
		REENTRANT_PROTO*) ;;
		*) asctime_r_proto="REENTRANT_PROTO_$asctime_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "asctime_r has no prototype, not using it." >&4 ;;
		esac
		d_asctime_r=undef
		asctime_r_proto=0
		;;
	esac
	;;
*)	asctime_r_proto=0
	;;
esac
d7992 1
a7992 1
	$cat >try.c <<EOP
d8014 1
a8014 1
	if $cc -o try -DTRY_BSD_PGRP $ccflags $ldflags try.c $libs >/dev/null 2>&1 && $run ./try; then
d8017 1
a8017 1
	elif $cc -o try $ccflags $ldflags try.c $libs >/dev/null 2>&1 && $run ./try; then
d8044 1
a8044 1
$rm -f try try.*
d8054 1
a8054 1
	$cat >try.c <<EOP
d8076 1
a8076 1
	if $cc -o try -DTRY_BSD_PGRP $ccflags $ldflags try.c $libs >/dev/null 2>&1 && $run ./try; then
d8079 1
a8079 1
	elif $cc -o try $ccflags $ldflags try.c $libs >/dev/null 2>&1 && $run ./try; then
d8106 1
a8106 1
$rm -f try try.*
d8196 1
a8196 1
	$run ./try
d8292 1
a8292 1
	$run ./try
d8315 1
a8315 1
	$cat >try.c <<'EOF'
d8318 1
a8318 128
int main() { xxx("foo"); }

xxx(va_alist)
va_dcl
{
	va_list args;
	char buf[10];

	va_start(args);
	exit((unsigned long)vsprintf(buf,"%s",args) > 10L);
}
EOF
	set try
	if eval $compile && $run ./try; then
		echo "Your vsprintf() returns (int)." >&4
		val2="$undef"
	else
		echo "Your vsprintf() returns (char*)." >&4
		val2="$define"
	fi
else
	echo 'vprintf() NOT found.' >&4
		val="$undef"
		val2="$undef"
fi
$rm -f try try.*
set d_vprintf
eval $setvar
val=$val2
set d_charvspr
eval $setvar

: see if chown exists
set chown d_chown
eval $inlibc

: see if chroot exists
set chroot d_chroot
eval $inlibc

: see if chsize exists
set chsize d_chsize
eval $inlibc

: see if class exists
set class d_class
eval $inlibc

hasstruct='varname=$1; struct=$2; shift; shift;
while $test $# -ge 2; do
	case "$1" in
	$define) echo "#include <$2>";;
	esac ;
    shift 2;
done > try.c;
echo "int main () { struct $struct foo; }" >> try.c;
set try;
if eval $compile; then
	val="$define";
else
	val="$undef";
fi;
set $varname;
eval $setvar;
$rm -f try.c try.o'

socketlib=''
sockethdr=''
: see whether socket exists
echo " "
$echo $n "Hmm... $c" >&4
if set socket val -f d_socket; eval $csym; $val; then
	echo "Looks like you have Berkeley networking support." >&4
	d_socket="$define"
	if set setsockopt val -f; eval $csym; $val; then
		d_oldsock="$undef"
	else
		echo "...but it uses the old BSD 4.1c interface, rather than 4.2." >&4
		d_oldsock="$define"
	fi
else
	if $contains socklib libc.list >/dev/null 2>&1; then
		echo "Looks like you have Berkeley networking support." >&4
		d_socket="$define"
		: we will have to assume that it supports the 4.2 BSD interface
		d_oldsock="$undef"
	else
		echo "You don't have Berkeley networking in libc$_a..." >&4
		if test "X$d_socket" = "X$define"; then
		   echo "...but you seem to believe that you have sockets." >&4
		else
			for net in net socket
			do
				if test -f /usr/lib/lib$net$_a; then
					( ($nm $nm_opt /usr/lib/lib$net$_a | eval $nm_extract) ||  \
					$ar t /usr/lib/lib$net$_a) 2>/dev/null >> libc.list
					if $contains socket libc.list >/dev/null 2>&1; then
						d_socket="$define"
						socketlib="-l$net"
						case "$net" in
						net)
							echo "...but the Wollongong group seems to have hacked it in." >&4
							sockethdr="-I/usr/netinclude"
							;;
						esac
						echo "Found Berkeley sockets interface in lib$net." >&4 
						if $contains setsockopt libc.list >/dev/null 2>&1; then
							d_oldsock="$undef"
						else
							echo "...using the old BSD 4.1c interface, rather than 4.2." >&4
							d_oldsock="$define"
						fi
						break
					fi
				fi
			done
			if test "X$d_socket" != "X$define"; then
			   echo "or anywhere else I see." >&4
			   d_socket="$undef"
			   d_oldsock="$undef"
			fi
		fi
	fi
fi

: see if socketpair exists
set socketpair d_sockpair
eval $inlibc
d8320 5
d8326 2
a8327 9
echo " "
echo "Checking the availability of certain socket constants..." >&4
for ENUM in MSG_CTRUNC MSG_DONTROUTE MSG_OOB MSG_PEEK MSG_PROXY SCM_RIGHTS; do
	enum=`$echo $ENUM|./tr '[A-Z]' '[a-z]'`
	$cat >try.c <<EOF
#include <sys/types.h>
#include <sys/socket.h>
int main() {
    int i = $ENUM;
d8330 7
a8336 3
	val="$undef"
	set try; if eval $compile; then
		val="$define"
d8338 10
a8347 3
	set d_${enum}; eval $setvar
	$rm -f try.c try
done
d8349 3
a8351 3
: see if this is a sys/uio.h system
set sys/uio.h i_sysuio
eval $inhdr
d8353 3
d8357 3
a8359 9
echo " "
echo "Checking to see if your system supports struct cmsghdr..." >&4
set d_cmsghdr_s cmsghdr $i_systypes sys/types.h $d_socket sys/socket.h $i_sysuio sys/uio.h
eval $hasstruct
case "$d_cmsghdr_s" in
"$define")      echo "Yes, it does."   ;;
*)              echo "No, it doesn't." ;;
esac

d8384 25
a8408 6
set crypt d_crypt
eval $inlibc
case "$d_crypt" in
$define) cryptlib='' ;;
*)	if set crypt val -f d_crypt; eval $csym; $val; then
		echo 'crypt() found.' >&4
a8409 24
		cryptlib=''
	else
		cryptlib=`./loc Slibcrypt$_a "" $xlibpth`
		if $test -z "$cryptlib"; then
			cryptlib=`./loc Mlibcrypt$_a "" $xlibpth`
		else
			cryptlib=-lcrypt
		fi
		if $test -z "$cryptlib"; then
			cryptlib=`./loc Llibcrypt$_a "" $xlibpth`
		else
			cryptlib=-lcrypt
		fi
		if $test -z "$cryptlib"; then
			cryptlib=`./loc libcrypt$_a "" $libpth`
		else
			cryptlib=-lcrypt
		fi
		if $test -z "$cryptlib"; then
			echo 'crypt() NOT found.' >&4
			val="$undef"
		else
			val="$define"
		fi
d8411 3
a8413 53
	set d_crypt
	eval $setvar
	;;
esac

: see if this is a crypt.h system
set crypt.h i_crypt
eval $inhdr

: see if crypt_r exists
set crypt_r d_crypt_r
eval $inlibc
case "$d_crypt_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_crypt crypt.h"
	case "$d_crypt_r_proto:$usethreads" in
	":define")	d_crypt_r_proto=define
		set d_crypt_r_proto crypt_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_crypt_r_proto" in
	define)
	case "$crypt_r_proto" in
	''|0) try='char* crypt_r(const char*, const char*, struct crypt_data*);'
	./protochk "extern $try" $hdrs && crypt_r_proto=B_CCS ;;
	esac
	case "$crypt_r_proto" in
	''|0) try='char* crypt_r(const char*, const char*, CRYPTD*);'
	./protochk "extern $try" $hdrs && crypt_r_proto=B_CCD ;;
	esac
	case "$crypt_r_proto" in
	''|0)	d_crypt_r=undef
 	        crypt_r_proto=0
		echo "Disabling crypt_r, cannot determine prototype." >&4 ;;
	* )	case "$crypt_r_proto" in
		REENTRANT_PROTO*) ;;
		*) crypt_r_proto="REENTRANT_PROTO_$crypt_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "crypt_r has no prototype, not using it." >&4 ;;
		esac
		d_crypt_r=undef
		crypt_r_proto=0
		;;
	esac
	;;
*)	crypt_r_proto=0
	;;
esac
a8426 94
: see if ctermid_r exists
set ctermid_r d_ctermid_r
eval $inlibc
case "$d_ctermid_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h "
	case "$d_ctermid_r_proto:$usethreads" in
	":define")	d_ctermid_r_proto=define
		set d_ctermid_r_proto ctermid_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_ctermid_r_proto" in
	define)
	case "$ctermid_r_proto" in
	''|0) try='char* ctermid_r(char*);'
	./protochk "extern $try" $hdrs && ctermid_r_proto=B_B ;;
	esac
	case "$ctermid_r_proto" in
	''|0)	d_ctermid_r=undef
 	        ctermid_r_proto=0
		echo "Disabling ctermid_r, cannot determine prototype." >&4 ;;
	* )	case "$ctermid_r_proto" in
		REENTRANT_PROTO*) ;;
		*) ctermid_r_proto="REENTRANT_PROTO_$ctermid_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "ctermid_r has no prototype, not using it." >&4 ;;
		esac
		d_ctermid_r=undef
		ctermid_r_proto=0
		;;
	esac
	;;
*)	ctermid_r_proto=0
	;;
esac

: see if ctime_r exists
set ctime_r d_ctime_r
eval $inlibc
case "$d_ctime_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_time time.h $i_systime sys/time.h"
	case "$d_ctime_r_proto:$usethreads" in
	":define")	d_ctime_r_proto=define
		set d_ctime_r_proto ctime_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_ctime_r_proto" in
	define)
	case "$ctime_r_proto" in
	''|0) try='char* ctime_r(const time_t*, char*);'
	./protochk "extern $try" $hdrs && ctime_r_proto=B_SB ;;
	esac
	case "$ctime_r_proto" in
	''|0) try='char* ctime_r(const time_t*, char*, int);'
	./protochk "extern $try" $hdrs && ctime_r_proto=B_SBI ;;
	esac
	case "$ctime_r_proto" in
	''|0) try='int ctime_r(const time_t*, char*);'
	./protochk "extern $try" $hdrs && ctime_r_proto=I_SB ;;
	esac
	case "$ctime_r_proto" in
	''|0) try='int ctime_r(const time_t*, char*, int);'
	./protochk "extern $try" $hdrs && ctime_r_proto=I_SBI ;;
	esac
	case "$ctime_r_proto" in
	''|0)	d_ctime_r=undef
 	        ctime_r_proto=0
		echo "Disabling ctime_r, cannot determine prototype." >&4 ;;
	* )	case "$ctime_r_proto" in
		REENTRANT_PROTO*) ;;
		*) ctime_r_proto="REENTRANT_PROTO_$ctime_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "ctime_r has no prototype, not using it." >&4 ;;
		esac
		d_ctime_r=undef
		ctime_r_proto=0
		;;
	esac
	;;
*)	ctime_r_proto=0
	;;
esac

a8465 35
: see if dbm.h is available
: see if dbmclose exists
set dbmclose d_dbmclose
eval $inlibc

case "$d_dbmclose" in
$define)
	set dbm.h i_dbm
	eval $inhdr
	case "$i_dbm" in
	$define)
		val="$undef"
		set i_rpcsvcdbm
		eval $setvar
		;;
	*)	set rpcsvc/dbm.h i_rpcsvcdbm
		eval $inhdr
		;;
	esac
	;;
*)	echo "We won't be including <dbm.h>"
	val="$undef"
	set i_dbm
	eval $setvar
	val="$undef"
	set i_rpcsvcdbm
	eval $setvar
	;;
esac

: see if prototype for dbminit is available
echo " "
set d_dbminitproto dbminit $i_dbm dbm.h
eval $hasproto

a8537 57
: see if this is an sysdir system
set sys/dir.h i_sysdir
eval $inhdr

: see if this is an sysndir system
set sys/ndir.h i_sysndir
eval $inhdr

: Look for dirfd
echo " "
$cat >dirfd.c <<EOM
#include <stdio.h>
#$i_dirent I_DIRENT		/**/
#$i_sysdir I_SYS_DIR		/**/
#$i_sysndir I_SYS_NDIR		/**/
#$i_systypes I_SYS_TYPES	/**/
#if defined(I_SYS_TYPES)
#include <sys/types.h>
#endif
#if defined(I_DIRENT)
#include <dirent.h>
#if defined(NeXT) && defined(I_SYS_DIR) /* NeXT needs dirent + sys/dir.h */
#include <sys/dir.h>
#endif
#else
#ifdef I_SYS_NDIR
#include <sys/ndir.h>
#else
#ifdef I_SYS_DIR
#ifdef hp9000s500
#include <ndir.h>	/* may be wrong in the future */
#else
#include <sys/dir.h>
#endif
#endif
#endif
#endif 
int main() {
	DIR *dirp = opendir(".");
	if (dirfd(dirp) >= 0)
		exit(0);
	else
		exit(1);
}
EOM
set dirfd
if eval $compile; then
	val="$define"
fi
case "$val" in
$define)	echo "dirfd() found." >&4	;;
*)		echo "dirfd() NOT found." >&4	;;
esac
set d_dirfd
eval $setvar
$rm -f dirfd*

d8587 1
a8587 1
#include <dlfcn.h>      /* the dynamic linker include file for SunOS/Solaris */
d8631 3
a8633 3
		$ld -o dyna.$dlext $ldflags $lddlflags tmp-dyna${_o} > /dev/null 2>&1 && 
		$cc -o fred $ccflags $ldflags $cccdlflags $ccdlflags fred.c $libs > /dev/null 2>&1 && $to dyna.$dlext; then
		xxx=`$run ./fred`
d8650 1
a8650 1
$rm -f fred fred.* dyna.$dlext dyna.* tmp-dyna.*
d8655 18
a8672 40
: see if drand48_r exists
set drand48_r d_drand48_r
eval $inlibc
case "$d_drand48_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_stdlib stdlib.h"
	case "$d_drand48_r_proto:$usethreads" in
	":define")	d_drand48_r_proto=define
		set d_drand48_r_proto drand48_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_drand48_r_proto" in
	define)
	case "$drand48_r_proto" in
	''|0) try='int drand48_r(struct drand48_data*, double*);'
	./protochk "extern $try" $hdrs && drand48_r_proto=I_ST ;;
	esac
	case "$drand48_r_proto" in
	''|0)	d_drand48_r=undef
 	        drand48_r_proto=0
		echo "Disabling drand48_r, cannot determine prototype." >&4 ;;
	* )	case "$drand48_r_proto" in
		REENTRANT_PROTO*) ;;
		*) drand48_r_proto="REENTRANT_PROTO_$drand48_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "drand48_r has no prototype, not using it." >&4 ;;
		esac
		d_drand48_r=undef
		drand48_r_proto=0
		;;
	esac
	;;
*)	drand48_r_proto=0
	;;
esac
a8690 70
: see if this is an grp system
set grp.h i_grp
eval $inhdr

case "$i_grp" in
$define)
	xxx=`./findhdr grp.h`
	$cppstdin $cppflags $cppminus < $xxx >$$.h

	if $contains 'gr_passwd' $$.h >/dev/null 2>&1; then
		val="$define"
	else
		val="$undef"
	fi
	set d_grpasswd
	eval $setvar

	$rm -f $$.h
	;;
*)
	val="$undef";
	set d_grpasswd; eval $setvar
	;;
esac

: see if endgrent_r exists
set endgrent_r d_endgrent_r
eval $inlibc
case "$d_endgrent_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_grp grp.h"
	case "$d_endgrent_r_proto:$usethreads" in
	":define")	d_endgrent_r_proto=define
		set d_endgrent_r_proto endgrent_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_endgrent_r_proto" in
	define)
	case "$endgrent_r_proto" in
	''|0) try='int endgrent_r(FILE**);'
	./protochk "extern $try" $hdrs && endgrent_r_proto=I_H ;;
	esac
	case "$endgrent_r_proto" in
	''|0) try='void endgrent_r(FILE**);'
	./protochk "extern $try" $hdrs && endgrent_r_proto=V_H ;;
	esac
	case "$endgrent_r_proto" in
	''|0)	d_endgrent_r=undef
 	        endgrent_r_proto=0
		echo "Disabling endgrent_r, cannot determine prototype." >&4 ;;
	* )	case "$endgrent_r_proto" in
		REENTRANT_PROTO*) ;;
		*) endgrent_r_proto="REENTRANT_PROTO_$endgrent_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "endgrent_r has no prototype, not using it." >&4 ;;
		esac
		d_endgrent_r=undef
		endgrent_r_proto=0
		;;
	esac
	;;
*)	endgrent_r_proto=0
	;;
esac

a8694 49
: see if this is a netdb.h system
set netdb.h i_netdb
eval $inhdr

: see if endhostent_r exists
set endhostent_r d_endhostent_r
eval $inlibc
case "$d_endhostent_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_netdb netdb.h"
	case "$d_endhostent_r_proto:$usethreads" in
	":define")	d_endhostent_r_proto=define
		set d_endhostent_r_proto endhostent_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_endhostent_r_proto" in
	define)
	case "$endhostent_r_proto" in
	''|0) try='int endhostent_r(struct hostent_data*);'
	./protochk "extern $try" $hdrs && endhostent_r_proto=I_D ;;
	esac
	case "$endhostent_r_proto" in
	''|0) try='void endhostent_r(struct hostent_data*);'
	./protochk "extern $try" $hdrs && endhostent_r_proto=V_D ;;
	esac
	case "$endhostent_r_proto" in
	''|0)	d_endhostent_r=undef
 	        endhostent_r_proto=0
		echo "Disabling endhostent_r, cannot determine prototype." >&4 ;;
	* )	case "$endhostent_r_proto" in
		REENTRANT_PROTO*) ;;
		*) endhostent_r_proto="REENTRANT_PROTO_$endhostent_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "endhostent_r has no prototype, not using it." >&4 ;;
		esac
		d_endhostent_r=undef
		endhostent_r_proto=0
		;;
	esac
	;;
*)	endhostent_r_proto=0
	;;
esac

a8698 45
: see if endnetent_r exists
set endnetent_r d_endnetent_r
eval $inlibc
case "$d_endnetent_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_netdb netdb.h"
	case "$d_endnetent_r_proto:$usethreads" in
	":define")	d_endnetent_r_proto=define
		set d_endnetent_r_proto endnetent_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_endnetent_r_proto" in
	define)
	case "$endnetent_r_proto" in
	''|0) try='int endnetent_r(struct netent_data*);'
	./protochk "extern $try" $hdrs && endnetent_r_proto=I_D ;;
	esac
	case "$endnetent_r_proto" in
	''|0) try='void endnetent_r(struct netent_data*);'
	./protochk "extern $try" $hdrs && endnetent_r_proto=V_D ;;
	esac
	case "$endnetent_r_proto" in
	''|0)	d_endnetent_r=undef
 	        endnetent_r_proto=0
		echo "Disabling endnetent_r, cannot determine prototype." >&4 ;;
	* )	case "$endnetent_r_proto" in
		REENTRANT_PROTO*) ;;
		*) endnetent_r_proto="REENTRANT_PROTO_$endnetent_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "endnetent_r has no prototype, not using it." >&4 ;;
		esac
		d_endnetent_r=undef
		endnetent_r_proto=0
		;;
	esac
	;;
*)	endnetent_r_proto=0
	;;
esac

a8702 45
: see if endprotoent_r exists
set endprotoent_r d_endprotoent_r
eval $inlibc
case "$d_endprotoent_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_netdb netdb.h"
	case "$d_endprotoent_r_proto:$usethreads" in
	":define")	d_endprotoent_r_proto=define
		set d_endprotoent_r_proto endprotoent_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_endprotoent_r_proto" in
	define)
	case "$endprotoent_r_proto" in
	''|0) try='int endprotoent_r(struct protoent_data*);'
	./protochk "extern $try" $hdrs && endprotoent_r_proto=I_D ;;
	esac
	case "$endprotoent_r_proto" in
	''|0) try='void endprotoent_r(struct protoent_data*);'
	./protochk "extern $try" $hdrs && endprotoent_r_proto=V_D ;;
	esac
	case "$endprotoent_r_proto" in
	''|0)	d_endprotoent_r=undef
 	        endprotoent_r_proto=0
		echo "Disabling endprotoent_r, cannot determine prototype." >&4 ;;
	* )	case "$endprotoent_r_proto" in
		REENTRANT_PROTO*) ;;
		*) endprotoent_r_proto="REENTRANT_PROTO_$endprotoent_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "endprotoent_r has no prototype, not using it." >&4 ;;
		esac
		d_endprotoent_r=undef
		endprotoent_r_proto=0
		;;
	esac
	;;
*)	endprotoent_r_proto=0
	;;
esac

a8706 133
: see if this is a pwd.h system
set pwd.h i_pwd
eval $inhdr

case "$i_pwd" in
$define)
	xxx=`./findhdr pwd.h`
	$cppstdin $cppflags $cppminus < $xxx >$$.h

	if $contains 'pw_quota' $$.h >/dev/null 2>&1; then
		val="$define"
	else
		val="$undef"
	fi
	set d_pwquota
	eval $setvar

	if $contains 'pw_age' $$.h >/dev/null 2>&1; then
		val="$define"
	else
		val="$undef"
	fi
	set d_pwage
	eval $setvar

	if $contains 'pw_change' $$.h >/dev/null 2>&1; then
		val="$define"
	else
		val="$undef"
	fi
	set d_pwchange
	eval $setvar

	if $contains 'pw_class' $$.h >/dev/null 2>&1; then
		val="$define"
	else
		val="$undef"
	fi
	set d_pwclass
	eval $setvar

	if $contains 'pw_expire' $$.h >/dev/null 2>&1; then
		val="$define"
	else
		val="$undef"
	fi
	set d_pwexpire
	eval $setvar

	if $contains 'pw_comment' $$.h >/dev/null 2>&1; then
		val="$define"
	else
		val="$undef"
	fi
	set d_pwcomment
	eval $setvar

	if $contains 'pw_gecos' $$.h >/dev/null 2>&1; then
		val="$define"
	else
		val="$undef"
	fi
	set d_pwgecos
	eval $setvar

	if $contains 'pw_passwd' $$.h >/dev/null 2>&1; then
		val="$define"
	else
		val="$undef"
	fi
	set d_pwpasswd
	eval $setvar

	$rm -f $$.h
	;;
*)
	val="$undef"; 
	set d_pwquota; eval $setvar
	set d_pwage; eval $setvar
	set d_pwchange; eval $setvar
	set d_pwclass; eval $setvar
	set d_pwexpire; eval $setvar
	set d_pwcomment; eval $setvar
	set d_pwgecos; eval $setvar
	set d_pwpasswd; eval $setvar
	;;
esac

: see if endpwent_r exists
set endpwent_r d_endpwent_r
eval $inlibc
case "$d_endpwent_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_pwd pwd.h"
	case "$d_endpwent_r_proto:$usethreads" in
	":define")	d_endpwent_r_proto=define
		set d_endpwent_r_proto endpwent_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_endpwent_r_proto" in
	define)
	case "$endpwent_r_proto" in
	''|0) try='int endpwent_r(FILE**);'
	./protochk "extern $try" $hdrs && endpwent_r_proto=I_H ;;
	esac
	case "$endpwent_r_proto" in
	''|0) try='void endpwent_r(FILE**);'
	./protochk "extern $try" $hdrs && endpwent_r_proto=V_H ;;
	esac
	case "$endpwent_r_proto" in
	''|0)	d_endpwent_r=undef
 	        endpwent_r_proto=0
		echo "Disabling endpwent_r, cannot determine prototype." >&4 ;;
	* )	case "$endpwent_r_proto" in
		REENTRANT_PROTO*) ;;
		*) endpwent_r_proto="REENTRANT_PROTO_$endpwent_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "endpwent_r has no prototype, not using it." >&4 ;;
		esac
		d_endpwent_r=undef
		endpwent_r_proto=0
		;;
	esac
	;;
*)	endpwent_r_proto=0
	;;
esac

a8710 45
: see if endservent_r exists
set endservent_r d_endservent_r
eval $inlibc
case "$d_endservent_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_netdb netdb.h"
	case "$d_endservent_r_proto:$usethreads" in
	":define")	d_endservent_r_proto=define
		set d_endservent_r_proto endservent_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_endservent_r_proto" in
	define)
	case "$endservent_r_proto" in
	''|0) try='int endservent_r(struct servent_data*);'
	./protochk "extern $try" $hdrs && endservent_r_proto=I_D ;;
	esac
	case "$endservent_r_proto" in
	''|0) try='void endservent_r(struct servent_data*);'
	./protochk "extern $try" $hdrs && endservent_r_proto=V_D ;;
	esac
	case "$endservent_r_proto" in
	''|0)	d_endservent_r=undef
 	        endservent_r_proto=0
		echo "Disabling endservent_r, cannot determine prototype." >&4 ;;
	* )	case "$endservent_r_proto" in
		REENTRANT_PROTO*) ;;
		*) endservent_r_proto="REENTRANT_PROTO_$endservent_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "endservent_r has no prototype, not using it." >&4 ;;
		esac
		d_endservent_r=undef
		endservent_r_proto=0
		;;
	esac
	;;
*)	endservent_r_proto=0
	;;
esac

d8713 1
a8713 1
$cat >try.c <<'EOCP'
d8732 1
a8732 1
		set try -DI_SYS_FILE && eval $compile; then
d8735 1
a8735 1
	if $run ./try; then
d8743 1
a8743 1
		set try -DI_FCNTL && eval $compile; then
d8746 1
a8746 1
	if $run ./try; then
d8759 1
a8759 1
$rm -f try try.*
a8782 53
: see if this is a sys/file.h system
val=''
set sys/file.h val
eval $inhdr

: do we need to include sys/file.h ?
case "$val" in
"$define")
	echo " "
	if $h_sysfile; then
		val="$define"
		echo "We'll be including <sys/file.h>." >&4
	else
		val="$undef"
		echo "We won't be including <sys/file.h>." >&4
	fi
	;;
*)
	h_sysfile=false
	;;
esac
set i_sysfile
eval $setvar

: see if fcntl.h is there
val=''
set fcntl.h val
eval $inhdr

: see if we can include fcntl.h
case "$val" in
"$define")
	echo " "
	if $h_fcntl; then
		val="$define"
		echo "We'll be including <fcntl.h>." >&4
	else
		val="$undef"
		if $h_sysfile; then
	echo "We don't need to include <fcntl.h> if we include <sys/file.h>." >&4
		else
			echo "We won't be including <fcntl.h>." >&4
		fi
	fi
	;;
*)
	h_fcntl=false
	val="$undef"
	;;
esac
set i_fcntl
eval $setvar

d8787 5
a8791 5
       case "$h_fcntl" in
       true) echo "#include <fcntl.h>" > head.c;;
       *) echo "#include <sys/fcntl.h>" > head.c;;
       esac
       ;;
d8798 1
a8798 1
	$cat >>try.c <<EOCP
a8799 5
#include <stdlib.h>
#$i_fcntl I_FCNTL
#ifdef I_FCNTL
#include <fcntl.h>
#endif
d8818 1
a8818 1
		o_nonblock=`$run ./try`
a8840 5
#include <stdlib.h> 
#$i_fcntl I_FCNTL
#ifdef I_FCNTL
#include <fcntl.h>
#endif
d8901 1
a8901 1
		write(4, string, strlen(string));
d8915 1
a8915 1
		echo "$run ./try >try.out 2>try.ret 4>try.err || exit 4" >>mtry
a8976 4
: see if fchdir exists
set fchdir d_fchdir
eval $inlibc

d8991 1
a8991 1
$cat >try.c <<EOCP
a8994 2
#include <signal.h>
$signal_t blech(x) int x; { exit(3); }
a9002 2
     signal(SIGALRM, blech);
     alarm(10);
d9016 1
a9016 1
		if $run ./try; then
a9021 12
			case "$?" in
			3) $cat >&4 <<EOM
***
*** I had to forcibly timeout from fcntl(..., F_SETLK, ...).
*** This is (almost) impossible.
*** If your NFS lock daemons are not feeling well, something like
*** this may happen, please investigate.  Cannot continue, aborting.
***
EOM
				exit 1
				;;
			esac
d9037 189
d9231 1
a9231 1
$cat >try.c <<EOCP
d9259 1
a9259 1
set try -DTRYBITS
d9264 1
a9264 1
	if $run ./try; then
d9277 1
a9277 1
	set try
d9282 1
a9282 1
		if $run ./try; then
d9298 1
a9298 1
$rm -f try try.*
a9303 8
: see if finite exists
set finite d_finite
eval $inlibc

: see if finitel exists
set finitel d_finitel
eval $inlibc

a9307 5
: see if prototype for flock is available
echo " "
set d_flockproto flock $i_sysfile sys/file.h
eval $hasproto

a9311 4
: see if fp_class exists
set fp_class d_fp_class
eval $inlibc

a9319 12
: see if fpclass exists
set fpclass d_fpclass
eval $inlibc

: see if fpclassify exists
set fpclassify d_fpclassify
eval $inlibc

: see if fpclassl exists
set fpclassl d_fpclassl
eval $inlibc

d9343 21
a9363 3
: see if frexpl exists
set frexpl d_frexpl
eval $inlibc
d9373 4
a9440 171
: see if getgrent_r exists
set getgrent_r d_getgrent_r
eval $inlibc
case "$d_getgrent_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_grp grp.h"
	case "$d_getgrent_r_proto:$usethreads" in
	":define")	d_getgrent_r_proto=define
		set d_getgrent_r_proto getgrent_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_getgrent_r_proto" in
	define)
	case "$getgrent_r_proto" in
	''|0) try='int getgrent_r(struct group*, char*, size_t, struct group**);'
	./protochk "extern $try" $hdrs && getgrent_r_proto=I_SBWR ;;
	esac
	case "$getgrent_r_proto" in
	''|0) try='int getgrent_r(struct group*, char*, int, struct group**);'
	./protochk "extern $try" $hdrs && getgrent_r_proto=I_SBIR ;;
	esac
	case "$getgrent_r_proto" in
	''|0) try='struct group* getgrent_r(struct group*, char*, size_t);'
	./protochk "extern $try" $hdrs && getgrent_r_proto=S_SBW ;;
	esac
	case "$getgrent_r_proto" in
	''|0) try='struct group* getgrent_r(struct group*, char*, int);'
	./protochk "extern $try" $hdrs && getgrent_r_proto=S_SBI ;;
	esac
	case "$getgrent_r_proto" in
	''|0) try='int getgrent_r(struct group*, char*, int);'
	./protochk "extern $try" $hdrs && getgrent_r_proto=I_SBI ;;
	esac
	case "$getgrent_r_proto" in
	''|0) try='int getgrent_r(struct group*, char*, int, FILE**);'
	./protochk "extern $try" $hdrs && getgrent_r_proto=I_SBIH ;;
	esac
	case "$getgrent_r_proto" in
	''|0)	d_getgrent_r=undef
 	        getgrent_r_proto=0
		echo "Disabling getgrent_r, cannot determine prototype." >&4 ;;
	* )	case "$getgrent_r_proto" in
		REENTRANT_PROTO*) ;;
		*) getgrent_r_proto="REENTRANT_PROTO_$getgrent_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "getgrent_r has no prototype, not using it." >&4 ;;
		esac
		d_getgrent_r=undef
		getgrent_r_proto=0
		;;
	esac
	;;
*)	getgrent_r_proto=0
	;;
esac

: see if getgrgid_r exists
set getgrgid_r d_getgrgid_r
eval $inlibc
case "$d_getgrgid_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_grp grp.h"
	case "$d_getgrgid_r_proto:$usethreads" in
	":define")	d_getgrgid_r_proto=define
		set d_getgrgid_r_proto getgrgid_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_getgrgid_r_proto" in
	define)
	case "$getgrgid_r_proto" in
	''|0) try='int getgrgid_r(gid_t, struct group*, char*, size_t, struct group**);'
	./protochk "extern $try" $hdrs && getgrgid_r_proto=I_TSBWR ;;
	esac
	case "$getgrgid_r_proto" in
	''|0) try='int getgrgid_r(gid_t, struct group*, char*, int, struct group**);'
	./protochk "extern $try" $hdrs && getgrgid_r_proto=I_TSBIR ;;
	esac
	case "$getgrgid_r_proto" in
	''|0) try='int getgrgid_r(gid_t, struct group*, char*, int);'
	./protochk "extern $try" $hdrs && getgrgid_r_proto=I_TSBI ;;
	esac
	case "$getgrgid_r_proto" in
	''|0) try='struct group* getgrgid_r(gid_t, struct group*, char*, int);'
	./protochk "extern $try" $hdrs && getgrgid_r_proto=S_TSBI ;;
	esac
	case "$getgrgid_r_proto" in
	''|0)	d_getgrgid_r=undef
 	        getgrgid_r_proto=0
		echo "Disabling getgrgid_r, cannot determine prototype." >&4 ;;
	* )	case "$getgrgid_r_proto" in
		REENTRANT_PROTO*) ;;
		*) getgrgid_r_proto="REENTRANT_PROTO_$getgrgid_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "getgrgid_r has no prototype, not using it." >&4 ;;
		esac
		d_getgrgid_r=undef
		getgrgid_r_proto=0
		;;
	esac
	;;
*)	getgrgid_r_proto=0
	;;
esac

: see if getgrnam_r exists
set getgrnam_r d_getgrnam_r
eval $inlibc
case "$d_getgrnam_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_grp grp.h"
	case "$d_getgrnam_r_proto:$usethreads" in
	":define")	d_getgrnam_r_proto=define
		set d_getgrnam_r_proto getgrnam_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_getgrnam_r_proto" in
	define)
	case "$getgrnam_r_proto" in
	''|0) try='int getgrnam_r(const char*, struct group*, char*, size_t, struct group**);'
	./protochk "extern $try" $hdrs && getgrnam_r_proto=I_CSBWR ;;
	esac
	case "$getgrnam_r_proto" in
	''|0) try='int getgrnam_r(const char*, struct group*, char*, int, struct group**);'
	./protochk "extern $try" $hdrs && getgrnam_r_proto=I_CSBIR ;;
	esac
	case "$getgrnam_r_proto" in
	''|0) try='struct group* getgrnam_r(const char*, char*, int);'
	./protochk "extern $try" $hdrs && getgrnam_r_proto=S_CBI ;;
	esac
	case "$getgrnam_r_proto" in
	''|0) try='int getgrnam_r(const char*, struct group*, char*, int);'
	./protochk "extern $try" $hdrs && getgrnam_r_proto=I_CSBI ;;
	esac
	case "$getgrnam_r_proto" in
	''|0) try='struct group* getgrnam_r(const char*, struct group*, char*, int);'
	./protochk "extern $try" $hdrs && getgrnam_r_proto=S_CSBI ;;
	esac
	case "$getgrnam_r_proto" in
	''|0)	d_getgrnam_r=undef
 	        getgrnam_r_proto=0
		echo "Disabling getgrnam_r, cannot determine prototype." >&4 ;;
	* )	case "$getgrnam_r_proto" in
		REENTRANT_PROTO*) ;;
		*) getgrnam_r_proto="REENTRANT_PROTO_$getgrnam_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "getgrnam_r has no prototype, not using it." >&4 ;;
		esac
		d_getgrnam_r=undef
		getgrnam_r_proto=0
		;;
	esac
	;;
*)	getgrnam_r_proto=0
	;;
esac

d9538 3
a9540 186
: see if gethostbyaddr_r exists
set gethostbyaddr_r d_gethostbyaddr_r
eval $inlibc
case "$d_gethostbyaddr_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_netdb netdb.h"
	case "$d_gethostbyaddr_r_proto:$usethreads" in
	":define")	d_gethostbyaddr_r_proto=define
		set d_gethostbyaddr_r_proto gethostbyaddr_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_gethostbyaddr_r_proto" in
	define)
	case "$gethostbyaddr_r_proto" in
	''|0) try='int gethostbyaddr_r(const char*, size_t, int, struct hostent*, char*, size_t, struct hostent**, int*);'
	./protochk "extern $try" $hdrs && gethostbyaddr_r_proto=I_CWISBWRE ;;
	esac
	case "$gethostbyaddr_r_proto" in
	''|0) try='struct hostent* gethostbyaddr_r(const char*, size_t, int, struct hostent*, char*, size_t, int, int*);'
	./protochk "extern $try" $hdrs && gethostbyaddr_r_proto=S_CWISBWIE ;;
	esac
	case "$gethostbyaddr_r_proto" in
	''|0) try='struct hostent* gethostbyaddr_r(const char*, size_t, int, struct hostent*, char*, int, int*);'
	./protochk "extern $try" $hdrs && gethostbyaddr_r_proto=S_CWISBIE ;;
	esac
	case "$gethostbyaddr_r_proto" in
	''|0) try='struct hostent* gethostbyaddr_r(const void*, size_t, int, struct hostent*, char*, int, int*);'
	./protochk "extern $try" $hdrs && gethostbyaddr_r_proto=S_TWISBIE ;;
	esac
	case "$gethostbyaddr_r_proto" in
	''|0) try='struct hostent* gethostbyaddr_r(const char*, int, int, struct hostent*, char*, int, int*);'
	./protochk "extern $try" $hdrs && gethostbyaddr_r_proto=S_CIISBIE ;;
	esac
	case "$gethostbyaddr_r_proto" in
	''|0) try='struct hostent* gethostbyaddr_r(const char*, struct hostent*, char*, int, int*);'
	./protochk "extern $try" $hdrs && gethostbyaddr_r_proto=S_CSBIE ;;
	esac
	case "$gethostbyaddr_r_proto" in
	''|0) try='struct hostent* gethostbyaddr_r(const void*, struct hostent*, char*, int, int*);'
	./protochk "extern $try" $hdrs && gethostbyaddr_r_proto=S_TSBIE ;;
	esac
	case "$gethostbyaddr_r_proto" in
	''|0) try='int gethostbyaddr_r(const char*, size_t, int, struct hostent*, struct hostent_data*);'
	./protochk "extern $try" $hdrs && gethostbyaddr_r_proto=I_CWISD ;;
	esac
	case "$gethostbyaddr_r_proto" in
	''|0) try='int gethostbyaddr_r(const char*, int, int, struct hostent*, struct hostent_data*);'
	./protochk "extern $try" $hdrs && gethostbyaddr_r_proto=I_CIISD ;;
	esac
	case "$gethostbyaddr_r_proto" in
	''|0) try='int gethostbyaddr_r(const char*, int, int);'
	./protochk "extern $try" $hdrs && gethostbyaddr_r_proto=I_CII ;;
	esac
	case "$gethostbyaddr_r_proto" in
	''|0)	d_gethostbyaddr_r=undef
 	        gethostbyaddr_r_proto=0
		echo "Disabling gethostbyaddr_r, cannot determine prototype." >&4 ;;
	* )	case "$gethostbyaddr_r_proto" in
		REENTRANT_PROTO*) ;;
		*) gethostbyaddr_r_proto="REENTRANT_PROTO_$gethostbyaddr_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "gethostbyaddr_r has no prototype, not using it." >&4 ;;
		esac
		d_gethostbyaddr_r=undef
		gethostbyaddr_r_proto=0
		;;
	esac
	;;
*)	gethostbyaddr_r_proto=0
	;;
esac

: see if gethostbyname_r exists
set gethostbyname_r d_gethostbyname_r
eval $inlibc
case "$d_gethostbyname_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_netdb netdb.h"
	case "$d_gethostbyname_r_proto:$usethreads" in
	":define")	d_gethostbyname_r_proto=define
		set d_gethostbyname_r_proto gethostbyname_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_gethostbyname_r_proto" in
	define)
	case "$gethostbyname_r_proto" in
	''|0) try='int gethostbyname_r(const char*, struct hostent*, char*, size_t, struct hostent**, int*);'
	./protochk "extern $try" $hdrs && gethostbyname_r_proto=I_CSBWRE ;;
	esac
	case "$gethostbyname_r_proto" in
	''|0) try='struct hostent* gethostbyname_r(const char*, struct hostent*, char*, int, int*);'
	./protochk "extern $try" $hdrs && gethostbyname_r_proto=S_CSBIE ;;
	esac
	case "$gethostbyname_r_proto" in
	''|0) try='int gethostbyname_r(const char*, struct hostent*, struct hostent_data*);'
	./protochk "extern $try" $hdrs && gethostbyname_r_proto=I_CSD ;;
	esac
	case "$gethostbyname_r_proto" in
	''|0)	d_gethostbyname_r=undef
 	        gethostbyname_r_proto=0
		echo "Disabling gethostbyname_r, cannot determine prototype." >&4 ;;
	* )	case "$gethostbyname_r_proto" in
		REENTRANT_PROTO*) ;;
		*) gethostbyname_r_proto="REENTRANT_PROTO_$gethostbyname_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "gethostbyname_r has no prototype, not using it." >&4 ;;
		esac
		d_gethostbyname_r=undef
		gethostbyname_r_proto=0
		;;
	esac
	;;
*)	gethostbyname_r_proto=0
	;;
esac

: see if gethostent_r exists
set gethostent_r d_gethostent_r
eval $inlibc
case "$d_gethostent_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_netdb netdb.h"
	case "$d_gethostent_r_proto:$usethreads" in
	":define")	d_gethostent_r_proto=define
		set d_gethostent_r_proto gethostent_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_gethostent_r_proto" in
	define)
	case "$gethostent_r_proto" in
	''|0) try='int gethostent_r(struct hostent*, char*, size_t, struct hostent**, int*);'
	./protochk "extern $try" $hdrs && gethostent_r_proto=I_SBWRE ;;
	esac
	case "$gethostent_r_proto" in
	''|0) try='int gethostent_r(struct hostent*, char*, int, int*);'
	./protochk "extern $try" $hdrs && gethostent_r_proto=I_SBIE ;;
	esac
	case "$gethostent_r_proto" in
	''|0) try='struct hostent* gethostent_r(struct hostent*, char*, int, int*);'
	./protochk "extern $try" $hdrs && gethostent_r_proto=S_SBIE ;;
	esac
	case "$gethostent_r_proto" in
	''|0) try='struct hostent* gethostent_r(struct hostent*, char*, int);'
	./protochk "extern $try" $hdrs && gethostent_r_proto=S_SBI ;;
	esac
	case "$gethostent_r_proto" in
	''|0) try='int gethostent_r(struct hostent*, char*, int);'
	./protochk "extern $try" $hdrs && gethostent_r_proto=I_SBI ;;
	esac
	case "$gethostent_r_proto" in
	''|0) try='int gethostent_r(struct hostent*, struct hostent_data*);'
	./protochk "extern $try" $hdrs && gethostent_r_proto=I_SD ;;
	esac
	case "$gethostent_r_proto" in
	''|0)	d_gethostent_r=undef
 	        gethostent_r_proto=0
		echo "Disabling gethostent_r, cannot determine prototype." >&4 ;;
	* )	case "$gethostent_r_proto" in
		REENTRANT_PROTO*) ;;
		*) gethostent_r_proto="REENTRANT_PROTO_$gethostent_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "gethostent_r has no prototype, not using it." >&4 ;;
		esac
		d_gethostent_r=undef
		gethostent_r_proto=0
		;;
	esac
	;;
*)	gethostent_r_proto=0
	;;
esac
a9546 4
: see if getitimer exists
set getitimer d_getitimer
eval $inlibc

a9550 53
: see if getlogin_r exists
set getlogin_r d_getlogin_r
eval $inlibc
case "$d_getlogin_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_unistd unistd.h"
	case "$d_getlogin_r_proto:$usethreads" in
	":define")	d_getlogin_r_proto=define
		set d_getlogin_r_proto getlogin_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_getlogin_r_proto" in
	define)
	case "$getlogin_r_proto" in
	''|0) try='int getlogin_r(char*, size_t);'
	./protochk "extern $try" $hdrs && getlogin_r_proto=I_BW ;;
	esac
	case "$getlogin_r_proto" in
	''|0) try='int getlogin_r(char*, int);'
	./protochk "extern $try" $hdrs && getlogin_r_proto=I_BI ;;
	esac
	case "$getlogin_r_proto" in
	''|0) try='char* getlogin_r(char*, size_t);'
	./protochk "extern $try" $hdrs && getlogin_r_proto=B_BW ;;
	esac
	case "$getlogin_r_proto" in
	''|0) try='char* getlogin_r(char*, int);'
	./protochk "extern $try" $hdrs && getlogin_r_proto=B_BI ;;
	esac
	case "$getlogin_r_proto" in
	''|0)	d_getlogin_r=undef
 	        getlogin_r_proto=0
		echo "Disabling getlogin_r, cannot determine prototype." >&4 ;;
	* )	case "$getlogin_r_proto" in
		REENTRANT_PROTO*) ;;
		*) getlogin_r_proto="REENTRANT_PROTO_$getlogin_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "getlogin_r has no prototype, not using it." >&4 ;;
		esac
		d_getlogin_r=undef
		getlogin_r_proto=0
		;;
	esac
	;;
*)	getlogin_r_proto=0
	;;
esac

a9570 179
: see if getnetbyaddr_r exists
set getnetbyaddr_r d_getnetbyaddr_r
eval $inlibc
case "$d_getnetbyaddr_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_netdb netdb.h"
	case "$d_getnetbyaddr_r_proto:$usethreads" in
	":define")	d_getnetbyaddr_r_proto=define
		set d_getnetbyaddr_r_proto getnetbyaddr_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_getnetbyaddr_r_proto" in
	define)
	case "$getnetbyaddr_r_proto" in
	''|0) try='int getnetbyaddr_r(unsigned long, int, struct netent*, char*, size_t, struct netent**, int*);'
	./protochk "extern $try" $hdrs && getnetbyaddr_r_proto=I_UISBWRE ;;
	esac
	case "$getnetbyaddr_r_proto" in
	''|0) try='int getnetbyaddr_r(long, int, struct netent*, char*, int);'
	./protochk "extern $try" $hdrs && getnetbyaddr_r_proto=I_LISBI ;;
	esac
	case "$getnetbyaddr_r_proto" in
	''|0) try='struct netent* getnetbyaddr_r(in_addr_t, int, struct netent*, char*, int);'
	./protochk "extern $try" $hdrs && getnetbyaddr_r_proto=S_TISBI ;;
	esac
	case "$getnetbyaddr_r_proto" in
	''|0) try='struct netent* getnetbyaddr_r(long, int, struct netent*, char*, int);'
	./protochk "extern $try" $hdrs && getnetbyaddr_r_proto=S_LISBI ;;
	esac
	case "$getnetbyaddr_r_proto" in
	''|0) try='int getnetbyaddr_r(in_addr_t, int, struct netent*, struct netent_data*);'
	./protochk "extern $try" $hdrs && getnetbyaddr_r_proto=I_TISD ;;
	esac
	case "$getnetbyaddr_r_proto" in
	''|0) try='int getnetbyaddr_r(long, int, struct netent*, struct netent_data*);'
	./protochk "extern $try" $hdrs && getnetbyaddr_r_proto=I_LISD ;;
	esac
	case "$getnetbyaddr_r_proto" in
	''|0) try='int getnetbyaddr_r(int, int, struct netent*, struct netent_data*);'
	./protochk "extern $try" $hdrs && getnetbyaddr_r_proto=I_IISD ;;
	esac
	case "$getnetbyaddr_r_proto" in
	''|0)	d_getnetbyaddr_r=undef
 	        getnetbyaddr_r_proto=0
		echo "Disabling getnetbyaddr_r, cannot determine prototype." >&4 ;;
	* )	case "$getnetbyaddr_r_proto" in
		REENTRANT_PROTO*) ;;
		*) getnetbyaddr_r_proto="REENTRANT_PROTO_$getnetbyaddr_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "getnetbyaddr_r has no prototype, not using it." >&4 ;;
		esac
		d_getnetbyaddr_r=undef
		getnetbyaddr_r_proto=0
		;;
	esac
	;;
*)	getnetbyaddr_r_proto=0
	;;
esac

: see if getnetbyname_r exists
set getnetbyname_r d_getnetbyname_r
eval $inlibc
case "$d_getnetbyname_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_netdb netdb.h"
	case "$d_getnetbyname_r_proto:$usethreads" in
	":define")	d_getnetbyname_r_proto=define
		set d_getnetbyname_r_proto getnetbyname_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_getnetbyname_r_proto" in
	define)
	case "$getnetbyname_r_proto" in
	''|0) try='int getnetbyname_r(const char*, struct netent*, char*, size_t, struct netent**, int*);'
	./protochk "extern $try" $hdrs && getnetbyname_r_proto=I_CSBWRE ;;
	esac
	case "$getnetbyname_r_proto" in
	''|0) try='int getnetbyname_r(const char*, struct netent*, char*, int);'
	./protochk "extern $try" $hdrs && getnetbyname_r_proto=I_CSBI ;;
	esac
	case "$getnetbyname_r_proto" in
	''|0) try='struct netent* getnetbyname_r(const char*, struct netent*, char*, int);'
	./protochk "extern $try" $hdrs && getnetbyname_r_proto=S_CSBI ;;
	esac
	case "$getnetbyname_r_proto" in
	''|0) try='int getnetbyname_r(const char*, struct netent*, struct netent_data*);'
	./protochk "extern $try" $hdrs && getnetbyname_r_proto=I_CSD ;;
	esac
	case "$getnetbyname_r_proto" in
	''|0)	d_getnetbyname_r=undef
 	        getnetbyname_r_proto=0
		echo "Disabling getnetbyname_r, cannot determine prototype." >&4 ;;
	* )	case "$getnetbyname_r_proto" in
		REENTRANT_PROTO*) ;;
		*) getnetbyname_r_proto="REENTRANT_PROTO_$getnetbyname_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "getnetbyname_r has no prototype, not using it." >&4 ;;
		esac
		d_getnetbyname_r=undef
		getnetbyname_r_proto=0
		;;
	esac
	;;
*)	getnetbyname_r_proto=0
	;;
esac

: see if getnetent_r exists
set getnetent_r d_getnetent_r
eval $inlibc
case "$d_getnetent_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_netdb netdb.h"
	case "$d_getnetent_r_proto:$usethreads" in
	":define")	d_getnetent_r_proto=define
		set d_getnetent_r_proto getnetent_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_getnetent_r_proto" in
	define)
	case "$getnetent_r_proto" in
	''|0) try='int getnetent_r(struct netent*, char*, size_t, struct netent**, int*);'
	./protochk "extern $try" $hdrs && getnetent_r_proto=I_SBWRE ;;
	esac
	case "$getnetent_r_proto" in
	''|0) try='int getnetent_r(struct netent*, char*, int, int*);'
	./protochk "extern $try" $hdrs && getnetent_r_proto=I_SBIE ;;
	esac
	case "$getnetent_r_proto" in
	''|0) try='struct netent* getnetent_r(struct netent*, char*, int, int*);'
	./protochk "extern $try" $hdrs && getnetent_r_proto=S_SBIE ;;
	esac
	case "$getnetent_r_proto" in
	''|0) try='struct netent* getnetent_r(struct netent*, char*, int);'
	./protochk "extern $try" $hdrs && getnetent_r_proto=S_SBI ;;
	esac
	case "$getnetent_r_proto" in
	''|0) try='int getnetent_r(struct netent*, char*, int);'
	./protochk "extern $try" $hdrs && getnetent_r_proto=I_SBI ;;
	esac
	case "$getnetent_r_proto" in
	''|0) try='int getnetent_r(struct netent*, struct netent_data*);'
	./protochk "extern $try" $hdrs && getnetent_r_proto=I_SD ;;
	esac
	case "$getnetent_r_proto" in
	''|0)	d_getnetent_r=undef
 	        getnetent_r_proto=0
		echo "Disabling getnetent_r, cannot determine prototype." >&4 ;;
	* )	case "$getnetent_r_proto" in
		REENTRANT_PROTO*) ;;
		*) getnetent_r_proto="REENTRANT_PROTO_$getnetent_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "getnetent_r has no prototype, not using it." >&4 ;;
		esac
		d_getnetent_r=undef
		getnetent_r_proto=0
		;;
	esac
	;;
*)	getnetent_r_proto=0
	;;
esac

a9608 151
: see if getprotobyname_r exists
set getprotobyname_r d_getprotobyname_r
eval $inlibc
case "$d_getprotobyname_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_netdb netdb.h"
	case "$d_getprotobyname_r_proto:$usethreads" in
	":define")	d_getprotobyname_r_proto=define
		set d_getprotobyname_r_proto getprotobyname_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_getprotobyname_r_proto" in
	define)
	case "$getprotobyname_r_proto" in
	''|0) try='int getprotobyname_r(const char*, struct protoent*, char*, size_t, struct protoent**);'
	./protochk "extern $try" $hdrs && getprotobyname_r_proto=I_CSBWR ;;
	esac
	case "$getprotobyname_r_proto" in
	''|0) try='struct protoent* getprotobyname_r(const char*, struct protoent*, char*, int);'
	./protochk "extern $try" $hdrs && getprotobyname_r_proto=S_CSBI ;;
	esac
	case "$getprotobyname_r_proto" in
	''|0) try='int getprotobyname_r(const char*, struct protoent*, struct protoent_data*);'
	./protochk "extern $try" $hdrs && getprotobyname_r_proto=I_CSD ;;
	esac
	case "$getprotobyname_r_proto" in
	''|0)	d_getprotobyname_r=undef
 	        getprotobyname_r_proto=0
		echo "Disabling getprotobyname_r, cannot determine prototype." >&4 ;;
	* )	case "$getprotobyname_r_proto" in
		REENTRANT_PROTO*) ;;
		*) getprotobyname_r_proto="REENTRANT_PROTO_$getprotobyname_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "getprotobyname_r has no prototype, not using it." >&4 ;;
		esac
		d_getprotobyname_r=undef
		getprotobyname_r_proto=0
		;;
	esac
	;;
*)	getprotobyname_r_proto=0
	;;
esac

: see if getprotobynumber_r exists
set getprotobynumber_r d_getprotobynumber_r
eval $inlibc
case "$d_getprotobynumber_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_netdb netdb.h"
	case "$d_getprotobynumber_r_proto:$usethreads" in
	":define")	d_getprotobynumber_r_proto=define
		set d_getprotobynumber_r_proto getprotobynumber_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_getprotobynumber_r_proto" in
	define)
	case "$getprotobynumber_r_proto" in
	''|0) try='int getprotobynumber_r(int, struct protoent*, char*, size_t, struct protoent**);'
	./protochk "extern $try" $hdrs && getprotobynumber_r_proto=I_ISBWR ;;
	esac
	case "$getprotobynumber_r_proto" in
	''|0) try='struct protoent* getprotobynumber_r(int, struct protoent*, char*, int);'
	./protochk "extern $try" $hdrs && getprotobynumber_r_proto=S_ISBI ;;
	esac
	case "$getprotobynumber_r_proto" in
	''|0) try='int getprotobynumber_r(int, struct protoent*, struct protoent_data*);'
	./protochk "extern $try" $hdrs && getprotobynumber_r_proto=I_ISD ;;
	esac
	case "$getprotobynumber_r_proto" in
	''|0)	d_getprotobynumber_r=undef
 	        getprotobynumber_r_proto=0
		echo "Disabling getprotobynumber_r, cannot determine prototype." >&4 ;;
	* )	case "$getprotobynumber_r_proto" in
		REENTRANT_PROTO*) ;;
		*) getprotobynumber_r_proto="REENTRANT_PROTO_$getprotobynumber_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "getprotobynumber_r has no prototype, not using it." >&4 ;;
		esac
		d_getprotobynumber_r=undef
		getprotobynumber_r_proto=0
		;;
	esac
	;;
*)	getprotobynumber_r_proto=0
	;;
esac

: see if getprotoent_r exists
set getprotoent_r d_getprotoent_r
eval $inlibc
case "$d_getprotoent_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_netdb netdb.h"
	case "$d_getprotoent_r_proto:$usethreads" in
	":define")	d_getprotoent_r_proto=define
		set d_getprotoent_r_proto getprotoent_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_getprotoent_r_proto" in
	define)
	case "$getprotoent_r_proto" in
	''|0) try='int getprotoent_r(struct protoent*, char*, size_t, struct protoent**);'
	./protochk "extern $try" $hdrs && getprotoent_r_proto=I_SBWR ;;
	esac
	case "$getprotoent_r_proto" in
	''|0) try='int getprotoent_r(struct protoent*, char*, int);'
	./protochk "extern $try" $hdrs && getprotoent_r_proto=I_SBI ;;
	esac
	case "$getprotoent_r_proto" in
	''|0) try='struct protoent* getprotoent_r(struct protoent*, char*, int);'
	./protochk "extern $try" $hdrs && getprotoent_r_proto=S_SBI ;;
	esac
	case "$getprotoent_r_proto" in
	''|0) try='int getprotoent_r(struct protoent*, struct protoent_data*);'
	./protochk "extern $try" $hdrs && getprotoent_r_proto=I_SD ;;
	esac
	case "$getprotoent_r_proto" in
	''|0)	d_getprotoent_r=undef
 	        getprotoent_r_proto=0
		echo "Disabling getprotoent_r, cannot determine prototype." >&4 ;;
	* )	case "$getprotoent_r_proto" in
		REENTRANT_PROTO*) ;;
		*) getprotoent_r_proto="REENTRANT_PROTO_$getprotoent_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "getprotoent_r has no prototype, not using it." >&4 ;;
		esac
		d_getprotoent_r=undef
		getprotoent_r_proto=0
		;;
	esac
	;;
*)	getprotoent_r_proto=0
	;;
esac

d9614 2
a9615 71
: see if getprpwnam exists
set getprpwnam d_getprpwnam
eval $inlibc

: see if getpwent exists
set getpwent d_getpwent
eval $inlibc

: see if getpwent_r exists
set getpwent_r d_getpwent_r
eval $inlibc
case "$d_getpwent_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_pwd pwd.h"
	case "$d_getpwent_r_proto:$usethreads" in
	":define")	d_getpwent_r_proto=define
		set d_getpwent_r_proto getpwent_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_getpwent_r_proto" in
	define)
	case "$getpwent_r_proto" in
	''|0) try='int getpwent_r(struct passwd*, char*, size_t, struct passwd**);'
	./protochk "extern $try" $hdrs && getpwent_r_proto=I_SBWR ;;
	esac
	case "$getpwent_r_proto" in
	''|0) try='int getpwent_r(struct passwd*, char*, int, struct passwd**);'
	./protochk "extern $try" $hdrs && getpwent_r_proto=I_SBIR ;;
	esac
	case "$getpwent_r_proto" in
	''|0) try='struct passwd* getpwent_r(struct passwd*, char*, size_t);'
	./protochk "extern $try" $hdrs && getpwent_r_proto=S_SBW ;;
	esac
	case "$getpwent_r_proto" in
	''|0) try='struct passwd* getpwent_r(struct passwd*, char*, int);'
	./protochk "extern $try" $hdrs && getpwent_r_proto=S_SBI ;;
	esac
	case "$getpwent_r_proto" in
	''|0) try='int getpwent_r(struct passwd*, char*, int);'
	./protochk "extern $try" $hdrs && getpwent_r_proto=I_SBI ;;
	esac
	case "$getpwent_r_proto" in
	''|0) try='int getpwent_r(struct passwd*, char*, int, FILE**);'
	./protochk "extern $try" $hdrs && getpwent_r_proto=I_SBIH ;;
	esac
	case "$getpwent_r_proto" in
	''|0)	d_getpwent_r=undef
 	        getpwent_r_proto=0
		echo "Disabling getpwent_r, cannot determine prototype." >&4 ;;
	* )	case "$getpwent_r_proto" in
		REENTRANT_PROTO*) ;;
		*) getpwent_r_proto="REENTRANT_PROTO_$getpwent_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "getpwent_r has no prototype, not using it." >&4 ;;
		esac
		d_getpwent_r=undef
		getpwent_r_proto=0
		;;
	esac
	;;
*)	getpwent_r_proto=0
	;;
esac

: see if getpwnam_r exists
set getpwnam_r d_getpwnam_r
a9616 49
case "$d_getpwnam_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_pwd pwd.h"
	case "$d_getpwnam_r_proto:$usethreads" in
	":define")	d_getpwnam_r_proto=define
		set d_getpwnam_r_proto getpwnam_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_getpwnam_r_proto" in
	define)
	case "$getpwnam_r_proto" in
	''|0) try='int getpwnam_r(const char*, struct passwd*, char*, size_t, struct passwd**);'
	./protochk "extern $try" $hdrs && getpwnam_r_proto=I_CSBWR ;;
	esac
	case "$getpwnam_r_proto" in
	''|0) try='int getpwnam_r(const char*, struct passwd*, char*, int, struct passwd**);'
	./protochk "extern $try" $hdrs && getpwnam_r_proto=I_CSBIR ;;
	esac
	case "$getpwnam_r_proto" in
	''|0) try='struct passwd* getpwnam_r(const char*, struct passwd*, char*, int);'
	./protochk "extern $try" $hdrs && getpwnam_r_proto=S_CSBI ;;
	esac
	case "$getpwnam_r_proto" in
	''|0) try='int getpwnam_r(const char*, struct passwd*, char*, int);'
	./protochk "extern $try" $hdrs && getpwnam_r_proto=I_CSBI ;;
	esac
	case "$getpwnam_r_proto" in
	''|0)	d_getpwnam_r=undef
 	        getpwnam_r_proto=0
		echo "Disabling getpwnam_r, cannot determine prototype." >&4 ;;
	* )	case "$getpwnam_r_proto" in
		REENTRANT_PROTO*) ;;
		*) getpwnam_r_proto="REENTRANT_PROTO_$getpwnam_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "getpwnam_r has no prototype, not using it." >&4 ;;
		esac
		d_getpwnam_r=undef
		getpwnam_r_proto=0
		;;
	esac
	;;
*)	getpwnam_r_proto=0
	;;
esac
d9618 2
a9619 2
: see if getpwuid_r exists
set getpwuid_r d_getpwuid_r
a9620 49
case "$d_getpwuid_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_pwd pwd.h"
	case "$d_getpwuid_r_proto:$usethreads" in
	":define")	d_getpwuid_r_proto=define
		set d_getpwuid_r_proto getpwuid_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_getpwuid_r_proto" in
	define)
	case "$getpwuid_r_proto" in
	''|0) try='int getpwuid_r(uid_t, struct passwd*, char*, size_t, struct passwd**);'
	./protochk "extern $try" $hdrs && getpwuid_r_proto=I_TSBWR ;;
	esac
	case "$getpwuid_r_proto" in
	''|0) try='int getpwuid_r(uid_t, struct passwd*, char*, int, struct passwd**);'
	./protochk "extern $try" $hdrs && getpwuid_r_proto=I_TSBIR ;;
	esac
	case "$getpwuid_r_proto" in
	''|0) try='int getpwuid_r(uid_t, struct passwd*, char*, int);'
	./protochk "extern $try" $hdrs && getpwuid_r_proto=I_TSBI ;;
	esac
	case "$getpwuid_r_proto" in
	''|0) try='struct passwd* getpwuid_r(uid_t, struct passwd*, char*, int);'
	./protochk "extern $try" $hdrs && getpwuid_r_proto=S_TSBI ;;
	esac
	case "$getpwuid_r_proto" in
	''|0)	d_getpwuid_r=undef
 	        getpwuid_r_proto=0
		echo "Disabling getpwuid_r, cannot determine prototype." >&4 ;;
	* )	case "$getpwuid_r_proto" in
		REENTRANT_PROTO*) ;;
		*) getpwuid_r_proto="REENTRANT_PROTO_$getpwuid_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "getpwuid_r has no prototype, not using it." >&4 ;;
		esac
		d_getpwuid_r=undef
		getpwuid_r_proto=0
		;;
	esac
	;;
*)	getpwuid_r_proto=0
	;;
esac
a9634 151
: see if getservbyname_r exists
set getservbyname_r d_getservbyname_r
eval $inlibc
case "$d_getservbyname_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_netdb netdb.h"
	case "$d_getservbyname_r_proto:$usethreads" in
	":define")	d_getservbyname_r_proto=define
		set d_getservbyname_r_proto getservbyname_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_getservbyname_r_proto" in
	define)
	case "$getservbyname_r_proto" in
	''|0) try='int getservbyname_r(const char*, const char*, struct servent*, char*, size_t, struct servent**);'
	./protochk "extern $try" $hdrs && getservbyname_r_proto=I_CCSBWR ;;
	esac
	case "$getservbyname_r_proto" in
	''|0) try='struct servent* getservbyname_r(const char*, const char*, struct servent*, char*, int);'
	./protochk "extern $try" $hdrs && getservbyname_r_proto=S_CCSBI ;;
	esac
	case "$getservbyname_r_proto" in
	''|0) try='int getservbyname_r(const char*, const char*, struct servent*, struct servent_data*);'
	./protochk "extern $try" $hdrs && getservbyname_r_proto=I_CCSD ;;
	esac
	case "$getservbyname_r_proto" in
	''|0)	d_getservbyname_r=undef
 	        getservbyname_r_proto=0
		echo "Disabling getservbyname_r, cannot determine prototype." >&4 ;;
	* )	case "$getservbyname_r_proto" in
		REENTRANT_PROTO*) ;;
		*) getservbyname_r_proto="REENTRANT_PROTO_$getservbyname_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "getservbyname_r has no prototype, not using it." >&4 ;;
		esac
		d_getservbyname_r=undef
		getservbyname_r_proto=0
		;;
	esac
	;;
*)	getservbyname_r_proto=0
	;;
esac

: see if getservbyport_r exists
set getservbyport_r d_getservbyport_r
eval $inlibc
case "$d_getservbyport_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_netdb netdb.h"
	case "$d_getservbyport_r_proto:$usethreads" in
	":define")	d_getservbyport_r_proto=define
		set d_getservbyport_r_proto getservbyport_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_getservbyport_r_proto" in
	define)
	case "$getservbyport_r_proto" in
	''|0) try='int getservbyport_r(int, const char*, struct servent*, char*, size_t, struct servent**);'
	./protochk "extern $try" $hdrs && getservbyport_r_proto=I_ICSBWR ;;
	esac
	case "$getservbyport_r_proto" in
	''|0) try='struct servent* getservbyport_r(int, const char*, struct servent*, char*, int);'
	./protochk "extern $try" $hdrs && getservbyport_r_proto=S_ICSBI ;;
	esac
	case "$getservbyport_r_proto" in
	''|0) try='int getservbyport_r(int, const char*, struct servent*, struct servent_data*);'
	./protochk "extern $try" $hdrs && getservbyport_r_proto=I_ICSD ;;
	esac
	case "$getservbyport_r_proto" in
	''|0)	d_getservbyport_r=undef
 	        getservbyport_r_proto=0
		echo "Disabling getservbyport_r, cannot determine prototype." >&4 ;;
	* )	case "$getservbyport_r_proto" in
		REENTRANT_PROTO*) ;;
		*) getservbyport_r_proto="REENTRANT_PROTO_$getservbyport_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "getservbyport_r has no prototype, not using it." >&4 ;;
		esac
		d_getservbyport_r=undef
		getservbyport_r_proto=0
		;;
	esac
	;;
*)	getservbyport_r_proto=0
	;;
esac

: see if getservent_r exists
set getservent_r d_getservent_r
eval $inlibc
case "$d_getservent_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_netdb netdb.h"
	case "$d_getservent_r_proto:$usethreads" in
	":define")	d_getservent_r_proto=define
		set d_getservent_r_proto getservent_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_getservent_r_proto" in
	define)
	case "$getservent_r_proto" in
	''|0) try='int getservent_r(struct servent*, char*, size_t, struct servent**);'
	./protochk "extern $try" $hdrs && getservent_r_proto=I_SBWR ;;
	esac
	case "$getservent_r_proto" in
	''|0) try='int getservent_r(struct servent*, char*, int);'
	./protochk "extern $try" $hdrs && getservent_r_proto=I_SBI ;;
	esac
	case "$getservent_r_proto" in
	''|0) try='struct servent* getservent_r(struct servent*, char*, int);'
	./protochk "extern $try" $hdrs && getservent_r_proto=S_SBI ;;
	esac
	case "$getservent_r_proto" in
	''|0) try='int getservent_r(struct servent*, struct servent_data*);'
	./protochk "extern $try" $hdrs && getservent_r_proto=I_SD ;;
	esac
	case "$getservent_r_proto" in
	''|0)	d_getservent_r=undef
 	        getservent_r_proto=0
		echo "Disabling getservent_r, cannot determine prototype." >&4 ;;
	* )	case "$getservent_r_proto" in
		REENTRANT_PROTO*) ;;
		*) getservent_r_proto="REENTRANT_PROTO_$getservent_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "getservent_r has no prototype, not using it." >&4 ;;
		esac
		d_getservent_r=undef
		getservent_r_proto=0
		;;
	esac
	;;
*)	getservent_r_proto=0
	;;
esac

a9643 49
: see if this is a shadow.h system
set shadow.h i_shadow
eval $inhdr

: see if getspnam_r exists
set getspnam_r d_getspnam_r
eval $inlibc
case "$d_getspnam_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_shadow shadow.h"
	case "$d_getspnam_r_proto:$usethreads" in
	":define")	d_getspnam_r_proto=define
		set d_getspnam_r_proto getspnam_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_getspnam_r_proto" in
	define)
	case "$getspnam_r_proto" in
	''|0) try='int getspnam_r(const char*, struct spwd*, char*, size_t, struct spwd**);'
	./protochk "extern $try" $hdrs && getspnam_r_proto=I_CSBWR ;;
	esac
	case "$getspnam_r_proto" in
	''|0) try='struct spwd* getspnam_r(const char*, struct spwd*, char*, int);'
	./protochk "extern $try" $hdrs && getspnam_r_proto=S_CSBI ;;
	esac
	case "$getspnam_r_proto" in
	''|0)	d_getspnam_r=undef
 	        getspnam_r_proto=0
		echo "Disabling getspnam_r, cannot determine prototype." >&4 ;;
	* )	case "$getspnam_r_proto" in
		REENTRANT_PROTO*) ;;
		*) getspnam_r_proto="REENTRANT_PROTO_$getspnam_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "getspnam_r has no prototype, not using it." >&4 ;;
		esac
		d_getspnam_r=undef
		getspnam_r_proto=0
		;;
	esac
	;;
*)	getspnam_r_proto=0
	;;
esac

d9663 18
a9680 32
: see if gmtime_r exists
set gmtime_r d_gmtime_r
eval $inlibc
case "$d_gmtime_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_time time.h $i_systime sys/time.h"
	case "$d_gmtime_r_proto:$usethreads" in
	":define")	d_gmtime_r_proto=define
		set d_gmtime_r_proto gmtime_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_gmtime_r_proto" in
	define)
	case "$gmtime_r_proto" in
	''|0) try='struct tm* gmtime_r(const time_t*, struct tm*);'
	./protochk "extern $try" $hdrs && gmtime_r_proto=S_TS ;;
	esac
	case "$gmtime_r_proto" in
	''|0) try='int gmtime_r(const time_t*, struct tm*);'
	./protochk "extern $try" $hdrs && gmtime_r_proto=I_TS ;;
	esac
	case "$gmtime_r_proto" in
	''|0)	d_gmtime_r=undef
 	        gmtime_r_proto=0
		echo "Disabling gmtime_r, cannot determine prototype." >&4 ;;
	* )	case "$gmtime_r_proto" in
		REENTRANT_PROTO*) ;;
		*) gmtime_r_proto="REENTRANT_PROTO_$gmtime_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
d9682 3
a9684 9
	*)	case "$usethreads" in
		define) echo "gmtime_r has no prototype, not using it." >&4 ;;
		esac
		d_gmtime_r=undef
		gmtime_r_proto=0
		;;
	esac
	;;
*)	gmtime_r_proto=0
d9738 4
d9779 45
a9848 8
: see if isfinite exists
set isfinite d_isfinite
eval $inlibc

: see if isinf exists
set isinf d_isinf
eval $inlibc

d9920 56
a9975 46
: see if link exists
set link d_link
eval $inlibc

: see if localtime_r exists
set localtime_r d_localtime_r
eval $inlibc
case "$d_localtime_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_time time.h $i_systime sys/time.h"
	case "$d_localtime_r_proto:$usethreads" in
	":define")	d_localtime_r_proto=define
		set d_localtime_r_proto localtime_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_localtime_r_proto" in
	define)
	case "$localtime_r_proto" in
	''|0) try='struct tm* localtime_r(const time_t*, struct tm*);'
	./protochk "extern $try" $hdrs && localtime_r_proto=S_TS ;;
	esac
	case "$localtime_r_proto" in
	''|0) try='int localtime_r(const time_t*, struct tm*);'
	./protochk "extern $try" $hdrs && localtime_r_proto=I_TS ;;
	esac
	case "$localtime_r_proto" in
	''|0)	d_localtime_r=undef
 	        localtime_r_proto=0
		echo "Disabling localtime_r, cannot determine prototype." >&4 ;;
	* )	case "$localtime_r_proto" in
		REENTRANT_PROTO*) ;;
		*) localtime_r_proto="REENTRANT_PROTO_$localtime_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "localtime_r has no prototype, not using it." >&4 ;;
		esac
		d_localtime_r=undef
		localtime_r_proto=0
		;;
	esac
	;;
*)	localtime_r_proto=0
d9978 1
a9978 8

: see if localeconv exists
set localeconv d_locconv
eval $inlibc

: see if lockf exists
set lockf d_lockf
eval $inlibc
d10076 4
a10135 11

echo " "
echo "Checking to see if your system supports struct msghdr..." >&4
set d_msghdr_s msghdr $i_systypes sys/types.h $d_socket sys/socket.h $i_sysuio sys/uio.h
eval $hasstruct
case "$d_msghdr_s" in
"$define")      echo "Yes, it does."   ;;
*)              echo "No, it doesn't." ;;
esac


a10147 3
: see if this is a langinfo.h system
set langinfo.h i_langinfo
eval $inhdr
d10149 62
a10210 3
: see if nl_langinfo exists
set nl_langinfo d_nl_langinfo
eval $inlibc
d10227 1
a10227 1
		dflt=`$run ./try`
d10343 1
a10343 1
		case "`$run ./try`" in
d10376 1
a10376 1
		case "`$run ./try`" in
d10418 1
a10418 1
		case "`$run ./try`" in
d10497 1
a10497 1
	nv_preserves_uv_bits="`$run ./try`"
d10499 1
a10499 1
case "$nv_preserves_uv_bits" in
d10501 2
a10502 2
	nv_preserves_uv_bits=`expr 0 - $nv_preserves_uv_bits`
	$echo "Your NVs can preserve all $nv_preserves_uv_bits bits of your UVs."  2>&1
d10505 1
a10505 1
[1-9]*)	$echo "Your NVs can preserve only $nv_preserves_uv_bits bits of your UVs."  2>&1
d10508 1
a10508 1
	nv_preserves_uv_bits="$undef" ;;
d10537 7
a10611 59
: see if readlink exists
set readlink d_readlink
eval $inlibc

echo " "
procselfexe=''
val="$undef"
case "$d_readlink" in
"$define")
	if $issymlink /proc/self/exe ; then
		$ls -l /proc/self/exe > reflect
		if $contains /`basename $ls` reflect >/dev/null 2>&1; then
			echo "You have Linux-like /proc/self/exe."
			procselfexe='"/proc/self/exe"'
			val="$define"
		fi
	fi
	if $issymlink /proc/curproc/file ; then
		$ls -l /proc/curproc/file > reflect
		if $contains /`basename $ls` reflect >/dev/null 2>&1; then
			echo "You have BSD-like /proc/curproc/file."
			procselfexe='"/proc/curproc/file"'
			val="$define"
		fi
	fi
	;;
esac
$rm -f reflect
set d_procselfexe
eval $setvar

: see whether the pthread_atfork exists
$cat >try.c <<EOP
#include <pthread.h>
#include <stdio.h>
int main() {
#ifdef  PTHREAD_ATFORK
        pthread_atfork(NULL,NULL,NULL);
#endif
}
EOP

: see if pthread_atfork exists
set try -DPTHREAD_ATFORK
if eval $compile; then
    val="$define"
else
    val="$undef"
fi
case "$usethreads" in
$define)
        case "$val" in
        $define) echo 'pthread_atfork found.' >&4        ;;
        *)       echo 'pthread_atfork NOT found.' >&4    ;;
        esac
esac
set d_pthread_atfork
eval $setvar

d10684 56
a10739 40
: see if random_r exists
set random_r d_random_r
eval $inlibc
case "$d_random_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_stdlib stdlib.h"
	case "$d_random_r_proto:$usethreads" in
	":define")	d_random_r_proto=define
		set d_random_r_proto random_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_random_r_proto" in
	define)
	case "$random_r_proto" in
	''|0) try='int random_r(int*, struct random_data*);'
	./protochk "extern $try" $hdrs && random_r_proto=I_TS ;;
	esac
	case "$random_r_proto" in
	''|0)	d_random_r=undef
 	        random_r_proto=0
		echo "Disabling random_r, cannot determine prototype." >&4 ;;
	* )	case "$random_r_proto" in
		REENTRANT_PROTO*) ;;
		*) random_r_proto="REENTRANT_PROTO_$random_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "random_r has no prototype, not using it." >&4 ;;
		esac
		d_random_r=undef
		random_r_proto=0
		;;
	esac
	;;
*)	random_r_proto=0
	;;
esac
d10741 7
a10747 9
: see if readdir and friends exist
set readdir d_readdir
eval $inlibc
set seekdir d_seekdir
eval $inlibc
set telldir d_telldir
eval $inlibc
set rewinddir d_rewinddir
eval $inlibc
d10749 7
a10755 44
: see if readdir64_r exists
set readdir64_r d_readdir64_r
eval $inlibc
case "$d_readdir64_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_dirent dirent.h"
	case "$d_readdir64_r_proto:$usethreads" in
	":define")	d_readdir64_r_proto=define
		set d_readdir64_r_proto readdir64_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_readdir64_r_proto" in
	define)
	case "$readdir64_r_proto" in
	''|0) try='int readdir64_r(DIR*, struct dirent64*, struct dirent64**);'
	./protochk "extern $try" $hdrs && readdir64_r_proto=I_TSR ;;
	esac
	case "$readdir64_r_proto" in
	''|0) try='int readdir64_r(DIR*, struct dirent64*);'
	./protochk "extern $try" $hdrs && readdir64_r_proto=I_TS ;;
	esac
	case "$readdir64_r_proto" in
	''|0)	d_readdir64_r=undef
 	        readdir64_r_proto=0
		echo "Disabling readdir64_r, cannot determine prototype." >&4 ;;
	* )	case "$readdir64_r_proto" in
		REENTRANT_PROTO*) ;;
		*) readdir64_r_proto="REENTRANT_PROTO_$readdir64_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "readdir64_r has no prototype, not using it." >&4 ;;
		esac
		d_readdir64_r=undef
		readdir64_r_proto=0
		;;
	esac
	;;
*)	readdir64_r_proto=0
	;;
esac
d10757 1
a10757 40
: see if readdir_r exists
set readdir_r d_readdir_r
eval $inlibc
case "$d_readdir_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_dirent dirent.h"
	case "$d_readdir_r_proto:$usethreads" in
	":define")	d_readdir_r_proto=define
		set d_readdir_r_proto readdir_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_readdir_r_proto" in
	define)
	case "$readdir_r_proto" in
	''|0) try='int readdir_r(DIR*, struct dirent*, struct dirent**);'
	./protochk "extern $try" $hdrs && readdir_r_proto=I_TSR ;;
	esac
	case "$readdir_r_proto" in
	''|0) try='int readdir_r(DIR*, struct dirent*);'
	./protochk "extern $try" $hdrs && readdir_r_proto=I_TS ;;
	esac
	case "$readdir_r_proto" in
	''|0)	d_readdir_r=undef
 	        readdir_r_proto=0
		echo "Disabling readdir_r, cannot determine prototype." >&4 ;;
	* )	case "$readdir_r_proto" in
		REENTRANT_PROTO*) ;;
		*) readdir_r_proto="REENTRANT_PROTO_$readdir_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "readdir_r has no prototype, not using it." >&4 ;;
		esac
		d_readdir_r=undef
		readdir_r_proto=0
		;;
	esac
d10759 10
a10768 1
*)	readdir_r_proto=0
d10772 8
a10779 2
: see if readv exists
set readv d_readv
d10782 2
a10783 2
: see if recvmsg exists
set recvmsg d_recvmsg
a10818 1
echo " "
d10820 5
a10824 6
case "$d_memmove" in
"$define") echo "I'll use memmove() instead of bcopy() for overlapping copies." ;;
*)	case "$d_bcopy" in
	"$define")
		echo "Checking to see if bcopy() can do overlapping copies..." >&4
		$cat >try.c <<EOCP
a10853 2
/* Copy "abcde..." string to char abc[] so that gcc doesn't
   try to store the string in read-only memory. */
d10871 5
a10875 8
		set try
		if eval $compile_ok; then
			if ./try 2>/dev/null; then
				echo "Yes, it can."
				val="$define"
			else
				echo "It can't, sorry."
			fi
d10877 4
a10880 1
			echo "(I can't compile the test program, so we'll assume not...)"
d10882 6
a10887 3
		;;
	esac
	$rm -f try.* try core
d10890 1
a10894 1
echo " "
d10896 5
a10900 6
case "$d_memmove" in
"$define") echo "I'll use memmove() instead of memcpy() for overlapping copies." ;;
*)	case "$d_memcpy" in
	"$define")
		echo "Checking to see if memcpy() can do overlapping copies..." >&4
		$cat >try.c <<EOCP
d10949 5
a10953 8
		set try
		if eval $compile_ok; then
			if ./try 2>/dev/null; then
				echo "Yes, it can."
				val="$define"
			else
				echo "It can't, sorry."
			fi
d10955 4
a10958 1
			echo "(I can't compile the test program, so we'll assume not...)"
d10960 6
a10965 3
		;;
	esac
	$rm -f try.* try core
d10968 1
d11011 1
a11011 1
		if $run ./try 2>/dev/null; then
d11180 1
a11180 1
	xxx=`$run ./try`
d11238 1
a11238 1
        xxx=`$run ./try`
a11267 4
: see if sendmsg exists
set sendmsg d_sendmsg
eval $inlibc

a11279 45
: see if setgrent_r exists
set setgrent_r d_setgrent_r
eval $inlibc
case "$d_setgrent_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_grp grp.h"
	case "$d_setgrent_r_proto:$usethreads" in
	":define")	d_setgrent_r_proto=define
		set d_setgrent_r_proto setgrent_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_setgrent_r_proto" in
	define)
	case "$setgrent_r_proto" in
	''|0) try='int setgrent_r(FILE**);'
	./protochk "extern $try" $hdrs && setgrent_r_proto=I_H ;;
	esac
	case "$setgrent_r_proto" in
	''|0) try='void setgrent_r(FILE**);'
	./protochk "extern $try" $hdrs && setgrent_r_proto=V_H ;;
	esac
	case "$setgrent_r_proto" in
	''|0)	d_setgrent_r=undef
 	        setgrent_r_proto=0
		echo "Disabling setgrent_r, cannot determine prototype." >&4 ;;
	* )	case "$setgrent_r_proto" in
		REENTRANT_PROTO*) ;;
		*) setgrent_r_proto="REENTRANT_PROTO_$setgrent_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "setgrent_r has no prototype, not using it." >&4 ;;
		esac
		d_setgrent_r=undef
		setgrent_r_proto=0
		;;
	esac
	;;
*)	setgrent_r_proto=0
	;;
esac

a11283 49
: see if sethostent_r exists
set sethostent_r d_sethostent_r
eval $inlibc
case "$d_sethostent_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_netdb netdb.h"
	case "$d_sethostent_r_proto:$usethreads" in
	":define")	d_sethostent_r_proto=define
		set d_sethostent_r_proto sethostent_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_sethostent_r_proto" in
	define)
	case "$sethostent_r_proto" in
	''|0) try='int sethostent_r(int, struct hostent_data*);'
	./protochk "extern $try" $hdrs && sethostent_r_proto=I_ID ;;
	esac
	case "$sethostent_r_proto" in
	''|0) try='void sethostent_r(int, struct hostent_data*);'
	./protochk "extern $try" $hdrs && sethostent_r_proto=V_ID ;;
	esac
	case "$sethostent_r_proto" in
	''|0)	d_sethostent_r=undef
 	        sethostent_r_proto=0
		echo "Disabling sethostent_r, cannot determine prototype." >&4 ;;
	* )	case "$sethostent_r_proto" in
		REENTRANT_PROTO*) ;;
		*) sethostent_r_proto="REENTRANT_PROTO_$sethostent_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "sethostent_r has no prototype, not using it." >&4 ;;
		esac
		d_sethostent_r=undef
		sethostent_r_proto=0
		;;
	esac
	;;
*)	sethostent_r_proto=0
	;;
esac

: see if setitimer exists
set setitimer d_setitimer
eval $inlibc

a11291 45
: see if locale.h is available
set locale.h i_locale
eval $inhdr

: see if setlocale_r exists
set setlocale_r d_setlocale_r
eval $inlibc
case "$d_setlocale_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_locale locale.h"
	case "$d_setlocale_r_proto:$usethreads" in
	":define")	d_setlocale_r_proto=define
		set d_setlocale_r_proto setlocale_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_setlocale_r_proto" in
	define)
	case "$setlocale_r_proto" in
	''|0) try='int setlocale_r(int, const char*, char*, int);'
	./protochk "extern $try" $hdrs && setlocale_r_proto=I_ICBI ;;
	esac
	case "$setlocale_r_proto" in
	''|0)	d_setlocale_r=undef
 	        setlocale_r_proto=0
		echo "Disabling setlocale_r, cannot determine prototype." >&4 ;;
	* )	case "$setlocale_r_proto" in
		REENTRANT_PROTO*) ;;
		*) setlocale_r_proto="REENTRANT_PROTO_$setlocale_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "setlocale_r has no prototype, not using it." >&4 ;;
		esac
		d_setlocale_r=undef
		setlocale_r_proto=0
		;;
	esac
	;;
*)	setlocale_r_proto=0
	;;
esac

a11295 45
: see if setnetent_r exists
set setnetent_r d_setnetent_r
eval $inlibc
case "$d_setnetent_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_netdb netdb.h"
	case "$d_setnetent_r_proto:$usethreads" in
	":define")	d_setnetent_r_proto=define
		set d_setnetent_r_proto setnetent_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_setnetent_r_proto" in
	define)
	case "$setnetent_r_proto" in
	''|0) try='int setnetent_r(int, struct netent_data*);'
	./protochk "extern $try" $hdrs && setnetent_r_proto=I_ID ;;
	esac
	case "$setnetent_r_proto" in
	''|0) try='void setnetent_r(int, struct netent_data*);'
	./protochk "extern $try" $hdrs && setnetent_r_proto=V_ID ;;
	esac
	case "$setnetent_r_proto" in
	''|0)	d_setnetent_r=undef
 	        setnetent_r_proto=0
		echo "Disabling setnetent_r, cannot determine prototype." >&4 ;;
	* )	case "$setnetent_r_proto" in
		REENTRANT_PROTO*) ;;
		*) setnetent_r_proto="REENTRANT_PROTO_$setnetent_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "setnetent_r has no prototype, not using it." >&4 ;;
		esac
		d_setnetent_r=undef
		setnetent_r_proto=0
		;;
	esac
	;;
*)	setnetent_r_proto=0
	;;
esac

a11315 45
: see if setprotoent_r exists
set setprotoent_r d_setprotoent_r
eval $inlibc
case "$d_setprotoent_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_netdb netdb.h"
	case "$d_setprotoent_r_proto:$usethreads" in
	":define")	d_setprotoent_r_proto=define
		set d_setprotoent_r_proto setprotoent_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_setprotoent_r_proto" in
	define)
	case "$setprotoent_r_proto" in
	''|0) try='int setprotoent_r(int, struct protoent_data*);'
	./protochk "extern $try" $hdrs && setprotoent_r_proto=I_ID ;;
	esac
	case "$setprotoent_r_proto" in
	''|0) try='void setprotoent_r(int, struct protoent_data*);'
	./protochk "extern $try" $hdrs && setprotoent_r_proto=V_ID ;;
	esac
	case "$setprotoent_r_proto" in
	''|0)	d_setprotoent_r=undef
 	        setprotoent_r_proto=0
		echo "Disabling setprotoent_r, cannot determine prototype." >&4 ;;
	* )	case "$setprotoent_r_proto" in
		REENTRANT_PROTO*) ;;
		*) setprotoent_r_proto="REENTRANT_PROTO_$setprotoent_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "setprotoent_r has no prototype, not using it." >&4 ;;
		esac
		d_setprotoent_r=undef
		setprotoent_r_proto=0
		;;
	esac
	;;
*)	setprotoent_r_proto=0
	;;
esac

a11319 45
: see if setpwent_r exists
set setpwent_r d_setpwent_r
eval $inlibc
case "$d_setpwent_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_pwd pwd.h"
	case "$d_setpwent_r_proto:$usethreads" in
	":define")	d_setpwent_r_proto=define
		set d_setpwent_r_proto setpwent_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_setpwent_r_proto" in
	define)
	case "$setpwent_r_proto" in
	''|0) try='int setpwent_r(FILE**);'
	./protochk "extern $try" $hdrs && setpwent_r_proto=I_H ;;
	esac
	case "$setpwent_r_proto" in
	''|0) try='void setpwent_r(FILE**);'
	./protochk "extern $try" $hdrs && setpwent_r_proto=V_H ;;
	esac
	case "$setpwent_r_proto" in
	''|0)	d_setpwent_r=undef
 	        setpwent_r_proto=0
		echo "Disabling setpwent_r, cannot determine prototype." >&4 ;;
	* )	case "$setpwent_r_proto" in
		REENTRANT_PROTO*) ;;
		*) setpwent_r_proto="REENTRANT_PROTO_$setpwent_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "setpwent_r has no prototype, not using it." >&4 ;;
		esac
		d_setpwent_r=undef
		setpwent_r_proto=0
		;;
	esac
	;;
*)	setpwent_r_proto=0
	;;
esac

a11343 45
: see if setservent_r exists
set setservent_r d_setservent_r
eval $inlibc
case "$d_setservent_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_netdb netdb.h"
	case "$d_setservent_r_proto:$usethreads" in
	":define")	d_setservent_r_proto=define
		set d_setservent_r_proto setservent_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_setservent_r_proto" in
	define)
	case "$setservent_r_proto" in
	''|0) try='int setservent_r(int, struct servent_data*);'
	./protochk "extern $try" $hdrs && setservent_r_proto=I_ID ;;
	esac
	case "$setservent_r_proto" in
	''|0) try='void setservent_r(int, struct servent_data*);'
	./protochk "extern $try" $hdrs && setservent_r_proto=V_ID ;;
	esac
	case "$setservent_r_proto" in
	''|0)	d_setservent_r=undef
 	        setservent_r_proto=0
		echo "Disabling setservent_r, cannot determine prototype." >&4 ;;
	* )	case "$setservent_r_proto" in
		REENTRANT_PROTO*) ;;
		*) setservent_r_proto="REENTRANT_PROTO_$setservent_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "setservent_r has no prototype, not using it." >&4 ;;
		esac
		d_setservent_r=undef
		setservent_r_proto=0
		;;
	esac
	;;
*)	setservent_r_proto=0
	;;
esac

d11412 4
a11415 9
	case "$libs" in
	*-lsfio*)
		echo "Removing unneeded -lsfio from library list" >&4
		set `echo X $libs | $sed -e 's/-lsfio / /' -e 's/-lsfio$//'`
		shift
		libs="$*"
		echo "libs = $libs" >&4
		;;
	esac
a11531 4
: see if sigprocmask exists
set sigprocmask d_sigprocmask
eval $inlibc

d11551 1
a11551 1
		if $run ./try >/dev/null 2>&1; then
a11576 9
: see if sockatmark exists
set sockatmark d_sockatmark
eval $inlibc

: see if prototype for sockatmark is available
echo " "
set d_sockatmarkproto sockatmark $d_socket sys/socket.h
eval $hasproto

a11580 92
: see if srand48_r exists
set srand48_r d_srand48_r
eval $inlibc
case "$d_srand48_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_stdlib stdlib.h"
	case "$d_srand48_r_proto:$usethreads" in
	":define")	d_srand48_r_proto=define
		set d_srand48_r_proto srand48_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_srand48_r_proto" in
	define)
	case "$srand48_r_proto" in
	''|0) try='int srand48_r(long, struct drand48_data*);'
	./protochk "extern $try" $hdrs && srand48_r_proto=I_LS ;;
	esac
	case "$srand48_r_proto" in
	''|0)	d_srand48_r=undef
 	        srand48_r_proto=0
		echo "Disabling srand48_r, cannot determine prototype." >&4 ;;
	* )	case "$srand48_r_proto" in
		REENTRANT_PROTO*) ;;
		*) srand48_r_proto="REENTRANT_PROTO_$srand48_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "srand48_r has no prototype, not using it." >&4 ;;
		esac
		d_srand48_r=undef
		srand48_r_proto=0
		;;
	esac
	;;
*)	srand48_r_proto=0
	;;
esac

: see if srandom_r exists
set srandom_r d_srandom_r
eval $inlibc
case "$d_srandom_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_stdlib stdlib.h"
	case "$d_srandom_r_proto:$usethreads" in
	":define")	d_srandom_r_proto=define
		set d_srandom_r_proto srandom_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_srandom_r_proto" in
	define)
	case "$srandom_r_proto" in
	''|0) try='int srandom_r(unsigned int, struct random_data*);'
	./protochk "extern $try" $hdrs && srandom_r_proto=I_TS ;;
	esac
	case "$srandom_r_proto" in
	''|0)	d_srandom_r=undef
 	        srandom_r_proto=0
		echo "Disabling srandom_r, cannot determine prototype." >&4 ;;
	* )	case "$srandom_r_proto" in
		REENTRANT_PROTO*) ;;
		*) srandom_r_proto="REENTRANT_PROTO_$srandom_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "srandom_r has no prototype, not using it." >&4 ;;
		esac
		d_srandom_r=undef
		srandom_r_proto=0
		;;
	esac
	;;
*)	srandom_r_proto=0
	;;
esac

: see if prototype for setresgid is available
echo " "
set d_sresgproto setresgid $i_unistd unistd.h
eval $hasproto

: see if prototype for setresuid is available
echo " "
set d_sresuproto setresuid $i_unistd unistd.h
eval $hasproto

d11715 2
a11716 2
if eval $compile && $to try.c; then
	if $run ./try; then
a11725 20

# glibc 2.2.90 and above apparently change stdio streams so Perl's
# direct buffer manipulation no longer works.  The Configure tests
# should be changed to correctly detect this, but until then,
# the following check should at least let perl compile and run.
# (This quick fix should be updated before 5.8.1.)
# To be defensive, reject all unknown versions, and all versions  > 2.2.9.
# A. Dougherty, June 3, 2002.
case "$d_gnulibc" in
$define)
	case "$gnulibc_version" in
	2.[01]*)  ;;
	2.2) ;;
	2.2.[0-9]) ;;
	*)  echo "But I will not snoop inside glibc $gnulibc_version stdio buffers."
		val="$undef"
		;;
	esac
	;;
esac
d11812 2
a11813 2
	if eval $compile && $to try.c; then
 		case `$run ./try` in
d11852 2
a11853 2
	if eval $compile && $to try.c; then
		if $run ./try; then
d11883 1
a11883 1
		    	case "`$run ./try`" in
a11969 53
: see if strerror_r exists
set strerror_r d_strerror_r
eval $inlibc
case "$d_strerror_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_string string.h"
	case "$d_strerror_r_proto:$usethreads" in
	":define")	d_strerror_r_proto=define
		set d_strerror_r_proto strerror_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_strerror_r_proto" in
	define)
	case "$strerror_r_proto" in
	''|0) try='int strerror_r(int, char*, size_t);'
	./protochk "extern $try" $hdrs && strerror_r_proto=I_IBW ;;
	esac
	case "$strerror_r_proto" in
	''|0) try='int strerror_r(int, char*, int);'
	./protochk "extern $try" $hdrs && strerror_r_proto=I_IBI ;;
	esac
	case "$strerror_r_proto" in
	''|0) try='char* strerror_r(int, char*, size_t);'
	./protochk "extern $try" $hdrs && strerror_r_proto=B_IBW ;;
	esac
	case "$strerror_r_proto" in
	''|0)	d_strerror_r=undef
 	        strerror_r_proto=0
		echo "Disabling strerror_r, cannot determine prototype." >&4 ;;
	* )	case "$strerror_r_proto" in
		REENTRANT_PROTO*) ;;
		*) strerror_r_proto="REENTRANT_PROTO_$strerror_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "strerror_r has no prototype, not using it." >&4 ;;
		esac
		d_strerror_r=undef
		strerror_r_proto=0
		;;
	esac
	;;
*)	strerror_r_proto=0
	;;
esac

: see if strftime exists
set strftime d_strftime
eval $inlibc

d12025 1
a12025 1
		yyy=`$run ./try`
a12040 4
: see if strtoq exists
set strtoq d_strtoq
eval $inlibc

a12044 73
case "$d_strtoul" in
"$define")
	$cat <<EOM
Checking whether your strtoul() works okay...
EOM
	$cat >try.c <<'EOCP'
#include <errno.h>
#include <stdio.h>
extern unsigned long int strtoul(char *s, char **, int); 
static int bad = 0;
void check(char *s, unsigned long eul, int een) {
	unsigned long gul;
	errno = 0;
	gul = strtoul(s, 0, 10);
	if (!((gul == eul) && (errno == een)))
		bad++;
}
int main() {
	check(" 1", 1L, 0);
	check(" 0", 0L, 0);
EOCP
	case "$longsize" in
	8)
	    $cat >>try.c <<'EOCP'
	check("18446744073709551615", 18446744073709551615UL, 0);
	check("18446744073709551616", 18446744073709551615UL, ERANGE);
#if 0 /* strtoul() for /^-/ strings is undefined. */
	check("-1", 18446744073709551615UL, 0);
	check("-18446744073709551614", 2, 0);
	check("-18446744073709551615", 1, 0);
       	check("-18446744073709551616", 18446744073709551615UL, ERANGE);
	check("-18446744073709551617", 18446744073709551615UL, ERANGE);
#endif
EOCP
		;;
	4)
		    $cat >>try.c <<'EOCP'
	check("4294967295", 4294967295UL, 0);
	check("4294967296", 4294967295UL, ERANGE);
#if 0 /* strtoul() for /^-/ strings is undefined. */
	check("-1", 4294967295UL, 0);
	check("-4294967294", 2, 0);
	check("-4294967295", 1, 0);
       	check("-4294967296", 4294967295UL, ERANGE);
	check("-4294967297", 4294967295UL, ERANGE);
#endif
EOCP
		;;
	*)
: Should we write these tests to be more portable by sprintf-ing
: ~0 and then manipulating that char string as input for strtol?
		;;
	esac
	$cat >>try.c <<'EOCP'
	if (!bad)
		printf("ok\n");
	return 0;
}
EOCP
	set try
	if eval $compile; then
		case "`$run ./try`" in
		ok) echo "Your strtoul() seems to be working okay." ;;
		*) cat <<EOM >&4
Your strtoul() doesn't seem to be working okay.
EOM
		   d_strtoul="$undef"
		   ;;
		esac
	fi
	;;
esac

d12070 4
a12073 11
	check(" 1",                                        1LL, 0);
	check(" 0",                                        0LL, 0);
	check("18446744073709551615",  18446744073709551615ULL, 0);
	check("18446744073709551616",  18446744073709551615ULL, ERANGE);
#if 0 /* strtoull() for /^-/ strings is undefined. */
	check("-1",                    18446744073709551615ULL, 0);
	check("-18446744073709551614",                     2LL, 0);
	check("-18446744073709551615",                     1LL, 0);
       	check("-18446744073709551616", 18446744073709551615ULL, ERANGE);
	check("-18446744073709551617", 18446744073709551615ULL, ERANGE);
#endif
d12080 1
a12080 1
		case "`$run ./try`" in
a12095 48
case "$d_strtouq" in
"$define")
	$cat <<EOM
Checking whether your strtouq() works okay...
EOM
	$cat >try.c <<'EOCP'
#include <errno.h>
#include <stdio.h>
extern unsigned long long int strtouq(char *s, char **, int); 
static int bad = 0;
void check(char *s, unsigned long long eull, int een) {
	unsigned long long gull;
	errno = 0;
	gull = strtouq(s, 0, 10);
	if (!((gull == eull) && (errno == een)))
		bad++;
}
int main() {
	check(" 1",                                        1LL, 0);
	check(" 0",                                        0LL, 0);
	check("18446744073709551615",  18446744073709551615ULL, 0);
	check("18446744073709551616",  18446744073709551615ULL, ERANGE);
#if 0 /* strtouq() for /^-/ strings is undefined. */
	check("-1",                    18446744073709551615ULL, 0);
	check("-18446744073709551614",                     2LL, 0);
	check("-18446744073709551615",                     1LL, 0);
       	check("-18446744073709551616", 18446744073709551615ULL, ERANGE);
	check("-18446744073709551617", 18446744073709551615ULL, ERANGE);
#endif
	if (!bad)
		printf("ok\n");
	return 0;
}
EOCP
	set try
	if eval $compile; then
		case "`$run ./try`" in
		ok) echo "Your strtouq() seems to be working okay." ;;
		*) cat <<EOM >&4
Your strtouq() doesn't seem to be working okay.
EOM
		   d_strtouq="$undef"
		   ;;
		esac
	fi
	;;
esac

a12107 5
: see if prototype for syscall is available
echo " "
set d_syscallproto syscall $i_unistd unistd.h
eval $hasproto

d12112 3
a12114 274
: see if system exists
set system d_system
eval $inlibc

: see if tcgetpgrp exists
set tcgetpgrp d_tcgetpgrp
eval $inlibc

: see if tcsetpgrp exists
set tcsetpgrp d_tcsetpgrp
eval $inlibc

: see if prototype for telldir is available
echo " "
set d_telldirproto telldir $i_systypes sys/types.h $i_dirent dirent.h
eval $hasproto

: see if time exists
echo " "
if test "X$d_time" = X -o X"$timetype" = X; then
    if set time val -f d_time; eval $csym; $val; then
		echo 'time() found.' >&4
		val="$define"
		rp="What is the type returned by time() on this system?"
		set time_t timetype long stdio.h sys/types.h
		eval $typedef_ask
    else
		echo 'time() not found, hope that will do.' >&4
		val="$undef"
		timetype='int';
    fi
    set d_time
    eval $setvar
fi

: see if this is a sys/times.h system
set sys/times.h i_systimes
eval $inhdr

: see if times exists
echo " "
if set times val -f d_times; eval $csym; $val; then
	echo 'times() found.' >&4
	d_times="$define"
	inc=''
	case "$i_systimes" in
	"$define") inc='sys/times.h';;
	esac
	rp="What is the type returned by times() on this system?"
	set clock_t clocktype long stdio.h sys/types.h $inc
	eval $typedef_ask
else
	echo 'times() NOT found, hope that will do.' >&4
	d_times="$undef"
	clocktype='int'
fi

: see if tmpnam_r exists
set tmpnam_r d_tmpnam_r
eval $inlibc
case "$d_tmpnam_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h "
	case "$d_tmpnam_r_proto:$usethreads" in
	":define")	d_tmpnam_r_proto=define
		set d_tmpnam_r_proto tmpnam_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_tmpnam_r_proto" in
	define)
	case "$tmpnam_r_proto" in
	''|0) try='char* tmpnam_r(char*);'
	./protochk "extern $try" $hdrs && tmpnam_r_proto=B_B ;;
	esac
	case "$tmpnam_r_proto" in
	''|0)	d_tmpnam_r=undef
 	        tmpnam_r_proto=0
		echo "Disabling tmpnam_r, cannot determine prototype." >&4 ;;
	* )	case "$tmpnam_r_proto" in
		REENTRANT_PROTO*) ;;
		*) tmpnam_r_proto="REENTRANT_PROTO_$tmpnam_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "tmpnam_r has no prototype, not using it." >&4 ;;
		esac
		d_tmpnam_r=undef
		tmpnam_r_proto=0
		;;
	esac
	;;
*)	tmpnam_r_proto=0
	;;
esac

: see if truncate exists
set truncate d_truncate
eval $inlibc

: see if ttyname_r exists
set ttyname_r d_ttyname_r
eval $inlibc
case "$d_ttyname_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_unistd unistd.h"
	case "$d_ttyname_r_proto:$usethreads" in
	":define")	d_ttyname_r_proto=define
		set d_ttyname_r_proto ttyname_r $hdrs
		eval $hasproto ;;
	*)	;;
	esac
	case "$d_ttyname_r_proto" in
	define)
	case "$ttyname_r_proto" in
	''|0) try='int ttyname_r(int, char*, size_t);'
	./protochk "extern $try" $hdrs && ttyname_r_proto=I_IBW ;;
	esac
	case "$ttyname_r_proto" in
	''|0) try='int ttyname_r(int, char*, int);'
	./protochk "extern $try" $hdrs && ttyname_r_proto=I_IBI ;;
	esac
	case "$ttyname_r_proto" in
	''|0) try='char* ttyname_r(int, char*, int);'
	./protochk "extern $try" $hdrs && ttyname_r_proto=B_IBI ;;
	esac
	case "$ttyname_r_proto" in
	''|0)	d_ttyname_r=undef
 	        ttyname_r_proto=0
		echo "Disabling ttyname_r, cannot determine prototype." >&4 ;;
	* )	case "$ttyname_r_proto" in
		REENTRANT_PROTO*) ;;
		*) ttyname_r_proto="REENTRANT_PROTO_$ttyname_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
	*)	case "$usethreads" in
		define) echo "ttyname_r has no prototype, not using it." >&4 ;;
		esac
		d_ttyname_r=undef
		ttyname_r_proto=0
		;;
	esac
	;;
*)	ttyname_r_proto=0
	;;
esac

: see if tzname[] exists
echo " "
if set tzname val -a d_tzname; eval $csym; $val; then
	val="$define"
	echo 'tzname[] found.' >&4
else
	val="$undef"
	echo 'tzname[] NOT found.' >&4
fi
set d_tzname
eval $setvar

case "$osname" in
next|rhapsody|darwin) multiarch="$define" ;;
esac
case "$multiarch" in
''|[nN]*) multiarch="$undef" ;;
esac

: check for ordering of bytes in a UV
echo " "
case "$usecrosscompile$multiarch" in
*$define*)
	$cat <<EOM
You seem to be either cross-compiling or doing a multiarchitecture build,
skipping the byteorder check.

EOM
	byteorder='ffff'
	;;
*)
	case "$byteorder" in
	'')
		$cat <<'EOM'
In the following, larger digits indicate more significance.  A big-endian
machine like a Pyramid or a Motorola 680?0 chip will come out to 4321. A
little-endian machine like a Vax or an Intel 80?86 chip would be 1234. Other
machines may have weird orders like 3412.  A Cray will report 87654321,
an Alpha will report 12345678. If the test program works the default is
probably right.
I'm now running the test program...
EOM
		$cat >try.c <<EOCP
#include <stdio.h>
#include <sys/types.h>
typedef $uvtype UV;
int main()
{
	int i;
	union {
		UV l;
		char c[$uvsize];
	} u;

	if ($uvsize > 4)
		u.l = (((UV)0x08070605) << 32) | (UV)0x04030201;
	else
		u.l = (UV)0x04030201;
	for (i = 0; i < $uvsize; i++)
		printf("%c", u.c[i]+'0');
	printf("\n");
	exit(0);
}
EOCP
		xxx_prompt=y
		set try
		if eval $compile && ./try > /dev/null; then
			dflt=`$run ./try`
			case "$dflt" in
			[1-4][1-4][1-4][1-4]|12345678|87654321)
				echo "(The test program ran ok.)"
				echo "byteorder=$dflt"
				xxx_prompt=n
			;;
			????|????????) echo "(The test program ran ok.)" ;;
			*) echo "(The test program didn't run right for some reason.)" ;;
			esac
		else
			dflt='4321'
			cat <<'EOM'
(I can't seem to compile the test program.  Guessing big-endian...)
EOM
		fi
		case "$xxx_prompt" in
		y)
			rp="What is the order of bytes in $uvtype?"
			. ./myread
			byteorder="$ans"
			;;
		*)	byteorder=$dflt
			;;
		esac
		;;
	esac
	$rm -f try.c try
	;;
esac


$cat <<EOM

Checking to see whether you can access character data unalignedly...
EOM
case "$d_u32align" in
'')   $cat >try.c <<EOCP
#include <stdio.h>
#define U32 $u32type
#define BYTEORDER 0x$byteorder
#define U8 $u8type
#include <signal.h>
#ifdef SIGBUS
$signal_t bletch(s) int s; { exit(4); }
#endif
int main() {
#if BYTEORDER == 0x1234 || BYTEORDER == 0x4321
    U8 buf[8];
    U32 *up;
    int i;

    if (sizeof(U32) != 4) {
	printf("sizeof(U32) is not 4, but %d\n", sizeof(U32));
	exit(1);
    }
d12116 3
a12118 1
    fflush(stdout);
d12120 3
a12122 3
#ifdef SIGBUS
    signal(SIGBUS, bletch);
#endif
d12124 4
a12127 20
    buf[0] = 0;
    buf[1] = 0;
    buf[2] = 0;
    buf[3] = 1;
    buf[5] = 0;
    buf[6] = 0;
    buf[7] = 0;
    buf[8] = 1;

    for (i = 0; i < 4; i++) {
	up = (U32*)(buf + i);
	if (! ((*up == 1 << (8*i)) ||   /* big-endian */
	       (*up == 1 << (8*(3-i)))  /* little-endian */
	      )
	   )
	{
	    printf("read failed (%x)\n", *up);
	    exit(2);
	}
    }
d12129 3
a12131 9
    /* write test */
    for (i = 0; i < 4; i++) {
	up = (U32*)(buf + i);
	*up = 0xBeef;
	if (*up != 0xBeef) {
	    printf("write failed (%x)\n", *up);
	    exit(3);
	}
    }
d12133 8
a12140 23
    exit(0);
#else
    printf("1\n");
    exit(1);
#endif
    return 0;
}
EOCP
set try
if eval $compile_ok; then
	echo "(Testing for character data alignment may crash the test.  That's okay.)" >&4
	$run ./try 2>&1 >/dev/null
	case "$?" in
	0)	cat >&4 <<EOM
You can access character data pretty unalignedly.
EOM
		d_u32align="$undef"
		;;
	*)	cat >&4 <<EOM
It seems that you must access character data in an aligned manner.
EOM
		d_u32align="$define"
		;;
d12142 3
d12146 3
a12148 7
	rp='Can you access character data at unaligned addresses?'
	dflt='n'
	. ./myread
	case "$ans" in
	[yY]*)	d_u32align="$undef"  ;;
	*)	d_u32align="$define" ;;
	esac
a12149 3
$rm -f core core.try.* try.core
;;
esac
d12151 2
a12152 2
: see if ualarm exists
set ualarm d_ualarm
d12155 12
a12170 13
: see if unordered exists
set unordered d_unordered
eval $inlibc

: see if usleep exists
set usleep d_usleep
eval $inlibc

: see if prototype for usleep is available
echo " "
set d_usleepproto usleep $i_unistd unistd.h
eval $hasproto

d12221 8
d12237 1
a12237 1
	cat > try.c <<EOM
d12266 1
a12266 1
	set try
d12268 1
a12268 1
		if $run ./try > /dev/null 2>&1 ; then
d12286 1
a12286 1
$rm -f try try.*
a12302 4
: see if writev exists
set writev d_writev
eval $inlibc

d12310 11
d12323 1
a12323 1
case "$usecrosscompile$multiarch" in
d12360 1
a12360 1
			dflt=`$run ./try`
d12380 78
d12503 1
a12503 1
int main(int argc, char *argv[])
d12509 1
a12509 7
    if (argc == 2) {
        printf("%d %d %d %d %d %d\n",
               DB_VERSION_MAJOR, DB_VERSION_MINOR, DB_VERSION_PATCH,
               Major, Minor, Patch);
        exit(0);
    }
    printf("You have Berkeley DB Version 2 or greater.\n");
d12518 1
a12518 1
	printf("db.h and libdb are incompatible.\n") ;
d12522 1
a12522 1
    printf("db.h and libdb are compatible.\n") ;
d12530 1
a12530 1
	printf("Perl needs Berkeley DB 2.3.4 or greater.\n") ;
d12537 1
a12537 5
    if (argc == 2) {
        printf("1 0 0\n");
        exit(0);
    }
    printf("You have Berkeley DB Version 1.\n");
d12546 1
a12546 1
	if eval $compile_ok && $run ./try; then
a12547 4
		set `$run ./try 1`
		db_version_major=$1
		db_version_minor=$2
		db_version_patch=$3
d12644 86
a12729 5
		db_prefixtype='size_t'
		: XXX Maybe we should just give up here.
		$cat try.out >&4
		echo "Help:  I can't seem to compile the db test program." >&4
		echo "Something's wrong, but I'll assume you use $db_prefixtype." >&4
d12731 14
a12744 4
	$rm -f try.*
	echo "Your version of Berkeley DB uses $db_prefixtype for prefix."
	;;
*)	db_prefixtype='size_t'
d12747 1
d12882 1
a12882 1
$cat >try.c <<'EOM'
d12891 1
a12891 1
set try
d12893 1
a12893 1
	if $run ./try; then
d12897 1
a12897 1
		echo "Nope, no EBCDIC, probably ASCII or some ISO Latin. Or UTF-8." >&4
d12903 1
a12903 1
$rm -f try try.*
d12928 1
a12928 3
  FILE* p;
  unlink("try.out");
  p = fopen("try.out", "w");
a12976 1
$to try.c
d12981 3
a12983 4
 	    $run ./try 2>/dev/null
	    code="$?"
	    $from try.out
	    if $test ! -s try.out -a "X$code" = X42; then
d12990 1
d12992 3
a12994 4
 		    $run ./try 2>/dev/null
		    code="$?"
		    $from try.out
		    if $test ! -s try.out -a "X$code" = X42; then
d13005 2
a13006 1
	    	$run ./try 2>/dev/null
a13007 1
		$from try.out
d13053 1
a13053 1
                    $cat tryp.c | $run ./tryp 2>/dev/null > tryp.out
d13117 1
a13117 1
	    $cat tryp.c | $run ./tryp 2>/dev/null > tryp.out
d13129 3
a13131 4
				$run ./try 2>/dev/null
				code=$?
				$from try.out
				if $test -s try.out -a "X$code" = X42; then
d13236 1
a13236 1
	yyy=`$run ./try`
d13270 1
a13270 1
	yyy=`$run ./try`
d13305 1
a13305 1
		yyy=`$run ./try`
d13327 1
a13327 1
		yyy=`$run ./try`
d13350 1
a13350 1
		yyy=`$run ./try`
d13361 2
a13362 2
if $test X"$sPRId64" = X -a X"$quadtype" != X; then
	$cat >try.c <<EOCP
d13366 2
a13367 2
  $quadtype q = 12345678901;
  printf("%Ld\n", q);
d13372 1
a13372 1
		yyy=`$run ./try`
d13375 3
a13377 3
			sPRId64='"Ld"'; sPRIi64='"Li"'; sPRIu64='"Lu"';
                	sPRIo64='"Lo"'; sPRIx64='"Lx"'; sPRIXU64='"LX"';
			echo "We will use %Ld."
d13383 2
a13384 2
if $test X"$sPRId64" = X -a X"$quadtype" = X"long long"; then
	$cat >try.c <<'EOCP'
d13388 2
a13389 2
  long long q = 12345678901LL; /* AIX cc requires the LL suffix. */
  printf("%lld\n", q);
d13394 1
a13394 1
		yyy=`$run ./try`
d13397 3
a13399 3
			sPRId64='"lld"'; sPRIi64='"lli"'; sPRIu64='"llu"';
                	sPRIo64='"llo"'; sPRIx64='"llx"'; sPRIXU64='"llX"';
			echo "We will use the %lld style."
d13416 1
a13416 1
		yyy=`$run ./try`
d13498 1
a13498 1
'') echo "$0: Fatal: failed to find format strings, cannot continue." >&4
d13596 10
a13605 9
: see if stdarg is available
echo " "
if $test `./findhdr stdarg.h`; then
	echo "<stdarg.h> found." >&4
	valstd="$define"
else
	echo "<stdarg.h> NOT found." >&4
	valstd="$undef"
fi
d13607 1
a13607 7
: see if varags is available
echo " "
if $test `./findhdr varargs.h`; then
	echo "<varargs.h> found." >&4
else
	echo "<varargs.h> NOT found, but that's ok (I hope)." >&4
fi
d13609 14
a13622 11
: set up the varargs testing programs
$cat > varargs.c <<EOP
#ifdef I_STDARG
#include <stdarg.h>
#endif
#ifdef I_VARARGS
#include <varargs.h>
#endif

#ifdef I_STDARG
int f(char *p, ...)
d13624 1
a13624 78
int f(va_alist)
va_dcl
#endif
{
	va_list ap;
#ifndef I_STDARG
	char *p;
#endif
#ifdef I_STDARG
	va_start(ap,p);
#else
	va_start(ap);
	p = va_arg(ap, char *);
#endif
	va_end(ap);
}
EOP
$cat > varargs <<EOP
$startsh
if $cc -c $ccflags -D\$1 varargs.c >/dev/null 2>&1; then
	echo "true"
else
	echo "false"
fi
$rm -f varargs$_o
EOP
chmod +x varargs

: now check which varargs header should be included
echo " "
i_varhdr=''
case "$valstd" in
"$define")
	if `./varargs I_STDARG`; then
		val='stdarg.h'
	elif `./varargs I_VARARGS`; then
		val='varargs.h'
	fi
	;;
*)
	if `./varargs I_VARARGS`; then
		val='varargs.h'
	fi
	;;
esac
case "$val" in
'')
echo "I could not find the definition for va_dcl... You have problems..." >&4
	val="$undef"; set i_stdarg; eval $setvar
	val="$undef"; set i_varargs; eval $setvar
	;;
*) 
	set i_varhdr
	eval $setvar
	case "$i_varhdr" in
	stdarg.h)
		val="$define"; set i_stdarg; eval $setvar
		val="$undef"; set i_varargs; eval $setvar
		;;
	varargs.h)
		val="$undef"; set i_stdarg; eval $setvar
		val="$define"; set i_varargs; eval $setvar
		;;
	esac
	echo "We'll include <$i_varhdr> to get va_dcl definition." >&4;;
esac
$rm -f varargs*

: see if we need va_copy
echo " "
case "$i_stdarg" in
"$define")
	$cat >try.c <<EOCP
#include <stdarg.h>
#include <stdio.h>
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
a13625 30
#include <signal.h>

int
ivfprintf(FILE *f, const char *fmt, va_list *valp)
{
  return vfprintf(f, fmt, *valp);
}
 
int    
myvfprintf(FILE *f, const  char *fmt, va_list val)
{
  return ivfprintf(f, fmt, &val);
}
      
int
myprintf(char *fmt, ...) 
{
  va_list val;
  va_start(val, fmt);
  return myvfprintf(stdout, fmt, val); 
}         

int
main(int ac, char **av)
{
  signal(SIGSEGV, exit);

  myprintf("%s%cs all right, then\n", "that", '\'');                            
  exit(0);      
}
d13627 9
a13635 21
	set try
	if eval $compile && $run ./try 2>&1 >/dev/null; then
		case "`$run ./try`" in
		"that's all right, then")
			okay=yes
			;;
		esac
	fi
	case "$okay" in
	yes)	echo "It seems that you don't need va_copy()." >&4
		need_va_copy="$undef"
		;;
	*)	echo "It seems that va_copy() or similar will be needed." >&4
		need_va_copy="$define"
		;;
	esac
	$rm -f try.* core core.* *.core *.core.*
	;;
*)	echo "You don't have <stdarg.h>, not checking for va_copy()." >&4
	;;
esac
a13769 1
fn=f/
d13789 1
a13789 6
*)	dflt="$pager"
	: Instruct ./getfile to trust the hinted or previous pager value,
	: even if it does not begin with a slash.  For example, on os2,
	: pager might be cmd /c more.  See comments in UU/getfile.
	fn="f/($pager)"
	;;
d13792 1
d13803 40
a13842 4
xs_apiversion=$version # The current site_perl version.
: Find earliest pure perl site_perl subdirectory perl can use.
: The versioned directories started at 5.005.
pm_apiversion='5.005'
d13857 1
a13857 1
	$run ./foobar >/dev/null 2>&1; then
d13863 1
a13863 1
	$run ./foobar >/dev/null 2>&1; then
d14003 1
a14003 1
			selectminbits=`$run ./try`
d14048 1
a14048 1
	$awk "{print \\$$fieldn}" | $sed 's!"!!g' | $sed 's!\\\\\\\\!/!g' | $sort | $uniq`
d14195 1
a14195 1
	$run ./signal$_exe | ($sort -n -k 2 2>/dev/null || $sort -n +1) | $uniq | $awk -f signal.awk >signal.lst
d14201 1
a14201 1
		$run ./signal$_exe > signal.nsg
d14222 1
a14222 1
			$run ./signal$_exe  >> signal.ls1
d14229 1
a14229 1
			$sort -n | $uniq | $awk -f signal.awk >signal.lst
a14293 1
sig_size=`echo $sig_name | awk '{print NF}'`
d14312 1
a14312 1
	yyy=`$run ./try`
d14406 1
a14406 1
$cat > try.c <<EOM
d14423 3
a14425 3
set try
if eval $compile_ok && $run ./try > /dev/null; then
	ssizetype=`$run ./try`
d14441 1
a14441 1
$rm -f try try.*
d14449 1
a14449 1
else
d14455 17
a14471 1

d14513 1
a14513 1
	yyy=`$run ./try`
d14546 1
a14546 1
	yyy=`$run ./try`
d14612 1
a14612 1
if $test -f "$byacc$_exe"; then
d14616 1
a14616 1
if $test -f "$bison$_exe"; then
d14634 57
a14690 2
: see if this is a fp.h system
set fp.h i_fp
d14693 26
a14718 2
: see if this is a fp_class.h system
set fp_class.h i_fp_class
d14722 2
a14723 5
case "$i_ieeefp" in
'' ) set ieeefp.h i_ieeefp
     eval $inhdr
     ;;
esac
d14729 4
a14753 14

case "$t_ndbm" in
$undef)
    # Some Linux distributions such as RedHat 7.1 put the
    # ndbm.h header in /usr/include/gdbm/ndbm.h.
    if $test -f /usr/include/gdbm/ndbm.h; then
	echo '<gdbm/ndbm.h> found.'
        ccflags="$ccflags -I/usr/include/gdbm"
        cppflags="$cppflags -I/usr/include/gdbm"
        t_ndbm=$define
    fi
    ;;
esac

d14824 3
a14826 4
Dynix DynixPTX ELF encore EPI EXTENSIONS FAVOR_BSD
FILE_OFFSET_BITS FreeBSD GCC_NEW_VARARGS gcos gcx gimpel
GLIBC GLIBC_MINOR
GNU_SOURCE GNUC GNUC_MINOR GNU_LIBRARY GO32 gould GOULD_PN
d14869 1
a14869 5
unix UNIX95 UNIX99 unixpc unos
USE_BSD USE_FILE_OFFSET64 USE_GNU USE_ISOC9X USE_LARGEFILE USE_LARGEFILE64
USE_MISC USE_POSIX USE_POSIX199309 USE_POSIX199506 USE_POSIX2
USE_REENTRANT USE_SVID USE_UNIX98 USE_XOPEN USE_XOPEN_EXTENDED
USGr4 USGr4_2
d14911 4
a14914 4
    printf "#ifdef %s\n#if %s+0\nprintf(\"%s=%%ld\\n\", (long)%s);\n#else\nprintf(\"%s\\n\");\n#endif\n#endif\n", $1, $1, $1, $1, $1
    printf "#ifdef _%s\n#if _%s+0\nprintf(\"_%s=%%ld\\n\", (long)_%s);\n#else\nprintf(\"_%s\\n\");\n#endif\n#endif\n", $1, $1, $1, $1, $1
    printf "#ifdef __%s\n#if __%s+0\nprintf(\"__%s=%%ld\\n\", (long)__%s);\n#else\nprintf(\"__%s\\n\");\n#endif\n#endif\n", $1, $1, $1, $1, $1
    printf "#ifdef __%s__\n#if __%s__+0\nprintf(\"__%s__=%%ld\\n\", (long)__%s__);\n#else\nprintf(\"__%s__\\n\");\n#endif\n#endif\n", $1, $1, $1, $1, $1
d14916 1
a14916 1
echo 'return 0;}' >> try.c
d14924 1
a14924 1
$cc -o try $optimize \$ccflags $ldflags try.c $libs && $run ./try
d14943 1
a14943 1
	-A*) $test "$gccversion" && echo "\$i" | $sed 's/^-A//' | $sed 's/\(.*\)(\(.*\))/\1=\2/';;
d15004 1
d15061 102
a15195 20
: see if socket ioctl defs are in sys/sockio.h
echo " "
xxx=`./findhdr sys/sockio.h`
if $test "$xxx"; then
	if $contains SIOCATMARK $xxx >/dev/null 2>&1; then
		val="$define"
		echo "You have socket ioctls defined in <sys/sockio.h>." >&4
	else
		val="$undef"
		echo "No socket ioctls found in <sys/sockio.h>." >&4
	fi
else
	val="$undef"
	$cat <<EOM
<sys/sockio.h> not found, assuming socket ioctls are in <sys/ioctl.h>.
EOM
fi
set i_syssockio
eval $setvar

d15218 4
d15303 1
a15303 1
                   cd "$xxx";
d15313 1
a15313 1
cd "$rsrc/ext"
a15316 4
# Special case:  Add in threads/shared since it is not picked up by the
# recursive find above (and adding in general recursive finding breaks
# SDBM_File/sdbm).  A.D.  10/25/2001.
known_extensions="$known_extensions threads/shared"
d15323 1
a15323 1
cd "$tdir"
a15338 5
	I18N/Langinfo|i18n_lan)
		case "$i_langinfo$d_nl_langinfo" in 
		$define$define) avail_ext="$avail_ext $xxx" ;;
		esac
		;;
d15379 1
a15379 6
		true|$define|y)
		    case "$osname" in
		    beos) ;; # not unless BONE
		    *) avail_ext="$avail_ext $xxx" ;;
		    esac
		    ;;
d15389 2
a15390 18
                case "$usethreads" in
                true|$define|y)
                        case "$useithreads" in
                        $undef|false|[nN]*) avail_ext="$avail_ext $xxx" ;;
                        esac
		esac
		;;
	XS/APItest|xs/apitest)
		# This is just for testing.  Skip it unless we have dynamic loading.

		case "$usedl" in
		$define) avail_ext="$avail_ext $xxx" ;;
		esac
		;;
	XS/Typemap|xs/typemap)
		# This is just for testing.  Skip it unless we have dynamic loading.
		case "$usedl" in
		$define) avail_ext="$avail_ext $xxx" ;;
a15392 14
	threads|threads/shared)
		# threads and threads::shared are special cases.
		# To stop people from asking "Perl 5.8.0 was supposed
		# to have this new fancy threads implementation but my
		# perl doesn't have it" and from people trying to
		# (re)install the threads module using CPAN.pm and
		# CPAN.pm then offering to reinstall Perl 5.8.0,
		# the threads.pm and threads/shared.pm will always be
		# there, croaking informatively ("you need to rebuild
		# all of Perl with threads, sorry") when threads haven't
		# been compiled in.
		# --jhi
		avail_ext="$avail_ext $xxx"
		;;
a15528 14
#        
# Encode is a special case.  If we are building Encode as a static
# extension, we need to explicitly list its subextensions as well.
# For other nested extensions, this is handled automatically by
# the appropriate Makefile.PL.
case " $static_ext " in
	*" Encode "*) # Add the subextensions of Encode
	cd "$rsrc/ext"
	for xxx in `ls Encode/*/Makefile.PL|awk -F/ '{print $2}'`; do
		static_ext="$static_ext Encode/$xxx"
	done
	cd "$tdir"
	;;
esac
a15575 6
: configuration may be patched via a 'config.arch' file
if $test -f config.arch; then
	echo "I see a config.arch file, loading it."
	. ./config.arch
fi

a15634 1
afsroot='$afsroot'
a15647 1
asctime_r_proto='$asctime_r_proto'
d15652 1
d15690 1
a15690 1
crypt_r_proto='$crypt_r_proto'
a15692 2
ctermid_r_proto='$ctermid_r_proto'
ctime_r_proto='$ctime_r_proto'
a15711 1
d_asctime_r='$d_asctime_r'
d15717 1
a15727 1
d_class='$d_class'
a15728 1
d_cmsghdr_s='$d_cmsghdr_s'
a15730 1
d_crypt_r='$d_crypt_r'
a15731 2
d_ctermid_r='$d_ctermid_r'
d_ctime_r='$d_ctime_r'
a15733 1
d_dbminitproto='$d_dbminitproto'
a15734 1
d_dirfd='$d_dirfd'
a15739 1
d_drand48_r='$d_drand48_r'
a15743 1
d_endgrent_r='$d_endgrent_r'
a15744 1
d_endhostent_r='$d_endhostent_r'
a15745 1
d_endnetent_r='$d_endnetent_r'
a15746 1
d_endprotoent_r='$d_endprotoent_r'
a15747 1
d_endpwent_r='$d_endpwent_r'
a15748 1
d_endservent_r='$d_endservent_r'
a15750 1
d_fchdir='$d_fchdir'
a15758 2
d_finite='$d_finite'
d_finitel='$d_finitel'
a15760 1
d_flockproto='$d_flockproto'
a15761 1
d_fp_class='$d_fp_class'
a15762 3
d_fpclass='$d_fpclass'
d_fpclassify='$d_fpclassify'
d_fpclassl='$d_fpclassl'
a15776 3
d_getgrent_r='$d_getgrent_r'
d_getgrgid_r='$d_getgrgid_r'
d_getgrnam_r='$d_getgrnam_r'
a15781 3
d_gethostbyaddr_r='$d_gethostbyaddr_r'
d_gethostbyname_r='$d_gethostbyname_r'
d_gethostent_r='$d_gethostent_r'
a15782 1
d_getitimer='$d_getitimer'
a15783 1
d_getlogin_r='$d_getlogin_r'
a15788 3
d_getnetbyaddr_r='$d_getnetbyaddr_r'
d_getnetbyname_r='$d_getnetbyname_r'
d_getnetent_r='$d_getnetent_r'
a15798 3
d_getprotobyname_r='$d_getprotobyname_r'
d_getprotobynumber_r='$d_getprotobynumber_r'
d_getprotoent_r='$d_getprotoent_r'
a15801 3
d_getpwent_r='$d_getpwent_r'
d_getpwnam_r='$d_getpwnam_r'
d_getpwuid_r='$d_getpwuid_r'
a15804 3
d_getservbyname_r='$d_getservbyname_r'
d_getservbyport_r='$d_getservbyport_r'
d_getservent_r='$d_getservent_r'
a15806 1
d_getspnam_r='$d_getspnam_r'
a15807 1
d_gmtime_r='$d_gmtime_r'
d15812 1
a15816 2
d_isfinite='$d_isfinite'
d_isinf='$d_isinf'
a15822 1
d_localtime_r='$d_localtime_r'
a15845 1
d_modfl_pow32_bug='$d_modfl_pow32_bug'
a15854 1
d_msghdr_s='$d_msghdr_s'
a15860 1
d_nl_langinfo='$d_nl_langinfo'
d15862 1
a15874 2
d_procselfexe='$d_procselfexe'
d_pthread_atfork='$d_pthread_atfork'
a15885 2
d_random_r='$d_random_r'
d_readdir64_r='$d_readdir64_r'
a15886 1
d_readdir_r='$d_readdir_r'
a15887 2
d_readv='$d_readv'
d_recvmsg='$d_recvmsg'
a15904 1
d_sendmsg='$d_sendmsg'
a15907 1
d_setgrent_r='$d_setgrent_r'
a15909 2
d_sethostent_r='$d_sethostent_r'
d_setitimer='$d_setitimer'
a15911 1
d_setlocale_r='$d_setlocale_r'
a15912 1
d_setnetent_r='$d_setnetent_r'
a15918 1
d_setprotoent_r='$d_setprotoent_r'
a15919 1
d_setpwent_r='$d_setpwent_r'
a15926 1
d_setservent_r='$d_setservent_r'
a15936 1
d_sigprocmask='$d_sigprocmask'
a15937 2
d_sockatmark='$d_sockatmark'
d_sockatmarkproto='$d_sockatmarkproto'
a15942 4
d_srand48_r='$d_srand48_r'
d_srandom_r='$d_srandom_r'
d_sresgproto='$d_sresgproto'
d_sresuproto='$d_sresuproto'
a15958 2
d_strerror_r='$d_strerror_r'
d_strftime='$d_strftime'
a15962 1
d_strtoq='$d_strtoq'
a15969 1
d_syscallproto='$d_syscallproto'
a15979 3
d_tm_tm_gmtoff='$d_tm_tm_gmtoff'
d_tm_tm_zone='$d_tm_tm_zone'
d_tmpnam_r='$d_tmpnam_r'
a15980 1
d_ttyname_r='$d_ttyname_r'
a15981 2
d_u32align='$d_u32align'
d_ualarm='$d_ualarm'
a15984 3
d_unordered='$d_unordered'
d_usleep='$d_usleep'
d_usleepproto='$d_usleepproto'
a15998 1
d_writev='$d_writev'
a16002 3
db_version_major='$db_version_major'
db_version_minor='$db_version_minor'
db_version_patch='$db_version_patch'
a16008 1
drand48_r_proto='$drand48_r_proto'
a16014 6
endgrent_r_proto='$endgrent_r_proto'
endhostent_r_proto='$endhostent_r_proto'
endnetent_r_proto='$endnetent_r_proto'
endprotoent_r_proto='$endprotoent_r_proto'
endpwent_r_proto='$endpwent_r_proto'
endservent_r_proto='$endservent_r_proto'
a16018 1
extras='$extras'
a16026 1
from='$from'
a16031 20
getgrent_r_proto='$getgrent_r_proto'
getgrgid_r_proto='$getgrgid_r_proto'
getgrnam_r_proto='$getgrnam_r_proto'
gethostbyaddr_r_proto='$gethostbyaddr_r_proto'
gethostbyname_r_proto='$gethostbyname_r_proto'
gethostent_r_proto='$gethostent_r_proto'
getlogin_r_proto='$getlogin_r_proto'
getnetbyaddr_r_proto='$getnetbyaddr_r_proto'
getnetbyname_r_proto='$getnetbyname_r_proto'
getnetent_r_proto='$getnetent_r_proto'
getprotobyname_r_proto='$getprotobyname_r_proto'
getprotobynumber_r_proto='$getprotobynumber_r_proto'
getprotoent_r_proto='$getprotoent_r_proto'
getpwent_r_proto='$getpwent_r_proto'
getpwnam_r_proto='$getpwnam_r_proto'
getpwuid_r_proto='$getpwuid_r_proto'
getservbyname_r_proto='$getservbyname_r_proto'
getservbyport_r_proto='$getservbyport_r_proto'
getservent_r_proto='$getservent_r_proto'
getspnam_r_proto='$getspnam_r_proto'
a16036 3
gmake='$gmake'
gmtime_r_proto='$gmtime_r_proto'
gnulibc_version='$gnulibc_version'
a16054 1
i_crypt='$i_crypt'
a16061 2
i_fp='$i_fp'
i_fp_class='$i_fp_class'
d16064 1
a16066 1
i_langinfo='$i_langinfo'
a16181 1
localtime_r_proto='$localtime_r_proto'
a16216 1
need_va_copy='$need_va_copy'
a16228 1
nv_preserves_uv_bits='$nv_preserves_uv_bits'
a16248 1
perl_patchlevel='$perl_patchlevel'
a16262 1
procselfexe='$procselfexe'
a16268 1
random_r_proto='$random_r_proto'
a16271 2
readdir64_r_proto='$readdir64_r_proto'
readdir_r_proto='$readdir_r_proto'
a16274 1
run='$run'
a16296 7
setgrent_r_proto='$setgrent_r_proto'
sethostent_r_proto='$sethostent_r_proto'
setlocale_r_proto='$setlocale_r_proto'
setnetent_r_proto='$setnetent_r_proto'
setprotoent_r_proto='$setprotoent_r_proto'
setpwent_r_proto='$setpwent_r_proto'
setservent_r_proto='$setservent_r_proto'
a16308 1
sig_size='$sig_size'
a16329 2
srand48_r_proto='$srand48_r_proto'
srandom_r_proto='$srandom_r_proto'
a16341 1
strerror_r_proto='$strerror_r_proto'
a16347 1
targetarch='$targetarch'
a16352 2
tmpnam_r_proto='$tmpnam_r_proto'
to='$to'
a16356 1
ttyname_r_proto='$ttyname_r_proto'
a16374 1
usecrosscompile='$usecrosscompile'
a16385 1
usereentrant='$usereentrant'
a16409 1
version_patchlevel_string='$version_patchlevel_string'
d16427 1
a16427 2
echo "PERL_PATCHLEVEL=$perl_patchlevel" >>config.sh
echo "PERL_CONFIG_SH=true" >>config.sh
d16457 1
a16457 1
	echo "Extraction done."
a16486 1
pwd=`pwd`
a16487 1
cd "$pwd"
d16517 1
a16517 1
	echo "Configure done."
@


1.1.1.6
log
@perl 5.8.2 from CPAN
@
text
@d23 1
a23 1
# Generated on Thu Sep 18 09:10:02 EEST 2003 [metaconfig 3.0 PL70]
a49 12
if test -f /dev/cputype -a -f /dev/drivers -a -f /dev/osversion; then
	cat >&4 <<EOF
***
*** I'm sorry but this system looks like Plan 9 and Plan 9 doesn't do
*** Configure that well.  (Plan 9 is close to UNIX but not close enough.)
*** Please read the README.plan9 for further instructions.
*** Cannot continue, aborting.
***
EOF
	exit 1
fi

d62 1
a62 1
if test -d c:/. || ( uname -a | grep -i 'os\(/\|\)2' ) 2>&1 >/dev/null ; then
a66 1
		is_os2=yes
d168 1
a178 1
mistrustnm=''
a324 1
d_aintl=''
a342 1
d_copysignl=''
a385 1
d_faststdio=''
a500 1
d_ilogbl=''
a540 1
d_modflproto=''
a564 1
d_pthread_attr_setscope=''
a587 1
d_scalbnl=''
a756 1
gccansipedantic=''
a765 6
html1dir=''
html1direxp=''
installhtml1dir=''
html3dir=''
html3direxp=''
installhtml3dir=''
a1047 6
installsitehtml1dir=''
sitehtml1dir=''
sitehtml1direxp=''
installsitehtml3dir=''
sitehtml3dir=''
sitehtml3direxp=''
a1051 6
installsiteman1dir=''
siteman1dir=''
siteman1direxp=''
installsiteman3dir=''
siteman3dir=''
siteman3direxp=''
a1053 3
installsitescript=''
sitescript=''
sitescriptexp=''
a1076 1
usefaststdio=''
a1105 6
installvendorhtml1dir=''
vendorhtml1dir=''
vendorhtml1direxp=''
installvendorhtml3dir=''
vendorhtml3dir=''
vendorhtml3direxp=''
a1110 6
installvendorman1dir=''
vendorman1dir=''
vendorman1direxp=''
installvendorman3dir=''
vendorman3dir=''
vendorman3direxp=''
a1113 4
d_vendorscript=''
installvendorscript=''
vendorscript=''
vendorscriptexp=''
d1147 1
a1147 1
elif test -d c:/. -o -n "$is_os2" ; then
d1153 11
a1171 6
siteman1dir=''
siteman3dir=''
sitescript=''
: Trailing extension.  Override this in a hint file, if needed.
: Extra object files, if any, needed on this platform.
archobjs=''
a1194 10
: full support for void wanted by default
defvoidused=15

ccname=''
ccversion=''
perllibs=''
: set useposix=false in your hint file to disable the POSIX extension.
useposix=true
: set useopcode=false in your hint file to disable the Opcode extension.
useopcode=true
a1200 1
archname=''
d1203 3
d1207 5
a1211 3
: If anyone needs extra -lxxx, put those in a hint file.
libswanted="sfio socket bind inet nsl nm ndbm gdbm dbm db malloc dl dld ld sun"
libswanted="$libswanted m crypt sec util c cposix posix ucb bsd BSD"
d2155 1
a2155 1
		elif test "$eunicefix" != ":"; then
a2157 1
			exit 0
a3084 3
		os2)	osname=os2
			osvers="$4"
			;;
d3123 1
a3123 1
					osvers=`sizer -v | awk -FUNIX '{print $2}' | awk '{print $1}' |  tr '[A-Z]' '[a-z]' | sed 's/^[xvt]//'`
d3133 1
a3133 2
		# UnixWare 7.1.2 is known as Open UNIX 8
		openunix|unixware) osname=svr5
d3203 1
a3203 1
		elif test -d c:/. -o -n "$is_os2" ; then
d3794 1
a3794 1
	return(0);
d3802 1
a3802 1
	    ccname=gcc
d3855 1
a3855 1
# gcc 3.* complain about adding -Idirectories that they already know about,
d3860 3
a3862 6
    for incdir in $locincpth; do
       warn=`$cc $ccflags -I$incdir -c try.c 2>&1 | \
	     grep '^c[cp]p*[01]: warning: changing search order '`
       if test "X$warn" != X; then
	   locincpth=`echo " $locincpth " | sed "s! $incdir ! !"`
       fi
a4452 44
case "$ccflags" in
*-DUSE_LONG_DOUBLE*|*-DUSE_MORE_BITS*) uselongdouble="$define" ;;
esac

case "$uselongdouble" in
$define|true|[yY]*)	dflt='y';;
*) dflt='n';;
esac
cat <<EOM

Perl can be built to take advantage of long doubles which
(if available) may give more accuracy and range for floating point numbers.

If this doesn't make any sense to you, just accept the default '$dflt'.
EOM
rp='Try to use long doubles if available?'
. ./myread
case "$ans" in
y|Y) 	val="$define"	;;
*)      val="$undef"	;;
esac
set uselongdouble
eval $setvar

case "$uselongdouble" in
true|[yY]*) uselongdouble="$define" ;;
esac

case "$uselongdouble" in
$define)
: Look for a hint-file generated 'call-back-unit'.  If the
: user has specified that long doubles should be used,
: we may need to set or change some other defaults.
	if $test -f uselongdouble.cbu; then
		echo "Your platform has some specific hints for long doubles, using them..."
		. ./uselongdouble.cbu
	else
		$cat <<EOM
(Your platform doesn't have any specific hints for long doubles.)
EOM
	fi
	;;
esac

d4800 1
a4800 1
int main() { printf("Ok\n"); return(0); }
d4884 94
a5016 1
os2) cppfilter="sed -e 's|\\\\\\\\|/|g' |" ;; # path component separator is \
d5087 3
a5089 5
: see if stdlib is available
set stdlib.h i_stdlib
eval $inhdr

: check for lengths of integral types
d5091 4
a5094 15
case "$intsize" in
'')
	echo "Checking to see how big your integers are..." >&4
	$cat >try.c <<EOCP
#include <stdio.h>
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
int main()
{
	printf("intsize=%d;\n", (int)sizeof(int));
	printf("longsize=%d;\n", (int)sizeof(long));
	printf("shortsize=%d;\n", (int)sizeof(short));
	exit(0);
a5096 35
	set try
	if eval $compile_ok && $run ./try > /dev/null; then
		eval `$run ./try`
		echo "Your integers are $intsize bytes long."
		echo "Your long integers are $longsize bytes long."
		echo "Your short integers are $shortsize bytes long."
	else
		$cat >&4 <<EOM
!
Help! I can't compile and run the intsize test program: please enlighten me!
(This is probably a misconfiguration in your system or libraries, and
you really ought to fix it.  Still, I'll try anyway.)
!
EOM
		dflt=4
		rp="What is the size of an integer (in bytes)?"
		. ./myread
		intsize="$ans"
		dflt=$intsize
		rp="What is the size of a long integer (in bytes)?"
		. ./myread
		longsize="$ans"
		dflt=2
		rp="What is the size of a short integer (in bytes)?"
		. ./myread
		shortsize="$ans"
	fi
	;;
esac
$rm -f try try.*

: check for long long
echo " "
echo "Checking to see if you have long long..." >&4
echo 'int main() { long long x = 7; return 0; }' > try.c
d5099 1
a5100 1
	echo "You have long long."
d5102 1
a5103 1
	echo "You do not have long long."
d5105 2
a5106 2
$rm try.*
set d_longlong
d5109 6
a5114 60
: check for length of long long
case "${d_longlong}${longlongsize}" in
$define)
	echo " "
	echo "Checking to see how big your long longs are..." >&4
	$cat >try.c <<'EOCP'
#include <stdio.h>
int main()
{
    printf("%d\n", (int)sizeof(long long));
    return(0);
}
EOCP
	set try
	if eval $compile_ok; then
		longlongsize=`$run ./try`
		echo "Your long longs are $longlongsize bytes long."
	else
		dflt='8'
		echo " "
		echo "(I can't seem to compile the test program.  Guessing...)"
		rp="What is the size of a long long (in bytes)?"
		. ./myread
		longlongsize="$ans"
	fi
	if $test "X$longsize" = "X$longlongsize"; then
		echo "(That isn't any different from an ordinary long.)"
	fi	
	;;
esac
$rm -f try.* try

: see if inttypes.h is available
: we want a real compile instead of Inhdr because some systems
: have an inttypes.h which includes non-existent headers
echo " "
$cat >try.c <<EOCP
#include <inttypes.h>
int main() {
	static int32_t foo32 = 0x12345678;
}
EOCP
set try
if eval $compile; then
	echo "<inttypes.h> found." >&4
	val="$define"
else
	echo "<inttypes.h> NOT found." >&4
	val="$undef"
fi
$rm -f try.c try
set i_inttypes
eval $setvar

: check for int64_t
echo " "
echo "Checking to see if you have int64_t..." >&4
$cat >try.c <<EOCP
#include <sys/types.h>
#$i_inttypes I_INTTYPES
a5364 15
case "$d_quad:$use64bitint" in
$undef:$define)
	cat >&4 <<EOF

*** You have chosen to use 64-bit integers,
*** but none cannot be found.
*** Please rerun Configure without -Duse64bitint and/or -Dusemorebits.
*** Cannot continue, aborting.

EOF
	exit 1
	;;
esac

: check for length of double
d5366 7
a5372 4
case "$doublesize" in
'')
	echo "Checking to see how big your double precision numbers are..." >&4
	$cat >try.c <<EOCP
d5374 16
a5389 3
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
a5390 4
int main()
{
    printf("%d\n", (int)sizeof(double));
    exit(0);
a5392 19
	set try
	if eval $compile_ok; then
		doublesize=`$run ./try`
		echo "Your double is $doublesize bytes long."
	else
		dflt='8'
		echo "(I can't seem to compile the test program.  Guessing...)"
		rp="What is the size of a double precision number (in bytes)?"
		. ./myread
		doublesize="$ans"
	fi
	;;
esac
$rm -f try.c try

: check for long doubles
echo " "
echo "Checking to see if you have long double..." >&4
echo 'int main() { long double x = 7.0; }' > try.c
d5394 1
a5394 1
if eval $compile; then
d5396 2
a5397 1
	echo "You have long double."
d5400 2
a5401 1
	echo "You do not have long double."
d5403 2
a5404 2
$rm try.*
set d_longdbl
d5407 6
a5412 19
: check for length of long double
case "${d_longdbl}${longdblsize}" in
$define)
	echo " "
	echo "Checking to see how big your long doubles are..." >&4
	$cat >try.c <<'EOCP'
#include <stdio.h>
int main()
{
	printf("%d\n", sizeof(long double));
}
EOCP
	set try
	set try
	if eval $compile; then
		longdblsize=`$run ./try`
		echo "Your long doubles are $longdblsize bytes long."
	else
		dflt='8'
d5414 23
a5436 10
		echo "(I can't seem to compile the test program.  Guessing...)" >&4
		rp="What is the size of a long double (in bytes)?"
		. ./myread
		longdblsize="$ans"
	fi
	if $test "X$doublesize" = "X$longdblsize"; then
		echo "That isn't any different from an ordinary double."
		echo "I'll keep your setting anyway, but you may see some"
		echo "harmless compilation warnings."
	fi	
a5437 20
esac
$rm -f try.* try

: determine the architecture name
echo " "
if xxx=`./loc arch blurfl $pth`; $test -f "$xxx"; then
	tarch=`arch`"-$osname"
elif xxx=`./loc uname blurfl $pth`; $test -f "$xxx" ; then
	if uname -m > tmparch 2>&1 ; then
		tarch=`$sed -e 's/ *$//' -e 's/ /_/g' \
			-e 's/$/'"-$osname/" tmparch`
	else
		tarch="$osname"
	fi
	$rm -f tmparch
else
	tarch="$osname"
fi
case "$myarchname" in
''|"$tarch") ;;
d5439 4
a5442 2
	echo "(Your architecture name used to be $myarchname.)"
	archname=''
d5445 18
a5462 3
case "$targetarch" in
'') ;;
*)  archname=`echo $targetarch|sed 's,^[^-]*-,,'` ;;
d5464 4
a5467 4
myarchname="$tarch"
case "$archname" in
'') dflt="$tarch";;
*) dflt="$archname";;
d5469 14
a5482 14
rp='What is your architecture name'
. ./myread
archname="$ans"
case "$usethreads" in
$define)
	echo "Threads selected." >&4
	case "$archname" in
        *-thread*) echo "...and architecture name already has -thread." >&4
                ;;
        *)      archname="$archname-thread"
                echo "...setting architecture name to $archname." >&4
                ;;
        esac
	;;
d5484 11
a5494 10
case "$usemultiplicity" in
$define)
	echo "Multiplicity selected." >&4
	case "$archname" in
        *-multi*) echo "...and architecture name already has -multi." >&4
                ;;
        *)      archname="$archname-multi"
                echo "...setting architecture name to $archname." >&4
                ;;
        esac
d5497 9
a5505 21
case "$use64bitint$use64bitall" in
*"$define"*)
	case "$archname64" in
	'')
		echo "This architecture is naturally 64-bit, not changing architecture name." >&4
		;;
	*)
		case "$use64bitint" in
		"$define") echo "64 bit integers selected." >&4 ;;
		esac
		case "$use64bitall" in
		"$define") echo "Maximal 64 bitness selected." >&4 ;;
		esac
		case "$archname" in
	        *-$archname64*) echo "...and architecture name already has $archname64." >&4
	                ;;
	        *)      archname="$archname-$archname64"
	                echo "...setting architecture name to $archname." >&4
	                ;;
	        esac
		;;
d5507 1
d5509 6
a5514 6
case "$uselongdouble" in
$define)
	echo "Long doubles selected." >&4
	case "$longdblsize" in
	$doublesize)
		echo "...but long doubles are equal to doubles, not changing architecture name." >&4
d5516 20
a5535 8
	*)
		case "$archname" in
	        *-ld*) echo "...and architecture name already has -ld." >&4
	                ;;
	        *)      archname="$archname-ld"
	                echo "...setting architecture name to $archname." >&4
        	        ;;
	        esac
d5537 1
d5539 1
d5542 20
a5561 3
case "$useperlio" in
$define)
	echo "Perlio selected." >&4
d5564 1
a5564 8
	echo "Perlio not selected, using stdio." >&4
	case "$archname" in
        *-stdio*) echo "...and architecture name already has -stdio." >&4
                ;;
        *)      archname="$archname-stdio"
                echo "...setting architecture name to $archname." >&4
                ;;
        esac
d5567 39
a5605 3
if $test -f archname.cbu; then
	echo "Your platform has some specific hints for architecture name, using them..."
	. ./archname.cbu
d5607 3
d5611 2
a5612 13
: determine root of directory hierarchy where package will be installed.
case "$prefix" in
'')
	dflt=`./loc . /usr/local /usr/local /local /opt /usr`
	;;
*?/)
	dflt=`echo "$prefix" | sed 's/.$//'`
	;;
*)
	dflt="$prefix"
	;;
esac
$cat <<EOM
d5614 6
a5619 7
By default, $package will be installed in $dflt/bin, manual pages
under $dflt/man, etc..., i.e. with $dflt as prefix for all
installation directories. Typically this is something like /usr/local.
If you wish to have binaries under /usr/bin but other parts of the
installation under /usr/local, that's ok: you will be prompted
separately for each of the installation directories, the prefix being
only used to set the defaults.
d5622 2
a5623 15
fn=d~
rp='Installation prefix to use?'
. ./getfile
oldprefix=''
case "$prefix" in
'') ;;
*)
	case "$ans" in
	"$prefix") ;;
	*) oldprefix="$prefix";;
	esac
	;;
esac
prefix="$ans"
prefixexp="$ansexp"
d5625 1
a5625 4
case "$afsroot" in
'')	afsroot=/afs ;;
*)	afsroot=$afsroot ;;
esac
d5627 712
a6338 16
: is AFS running?
echo " "
case "$afs" in
$define|true)	afs=true ;;
$undef|false)	afs=false ;;
*)	if test -d $afsroot; then
		afs=true
	else
		afs=false
	fi
	;;
esac
if $afs; then
	echo "AFS may be running... I'll be extra cautious then..." >&4
else
	echo "AFS does not seem to be running..." >&4
d6358 3
a6360 3
it is convenient to distinguish the directory in which files should be
installed from the directory ($prefix) in which they will
eventually reside.  For most users, these two directories are the same.
d6656 6
a6661 19
: we want a real compile instead of Inhdr because some systems have a
: malloc.h that just gives a compile error saying to use stdlib.h instead
echo " "
$cat >try.c <<EOCP
#include <stdlib.h>
#include <malloc.h>
int main () { return 0; }
EOCP
set try
if eval $compile; then
    echo "<malloc.h> found." >&4
    val="$define"
else
    echo "<malloc.h> NOT found." >&4
    val="$undef"
fi
$rm -f try.c try
set i_malloc
eval $setvar
d6668 1
a6668 5
	$cat >try.c <<EOCP
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
d6765 1
a6765 1
	$cat >>try.c <<EOCP
a6766 4
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
d6792 3
a6794 3
*** You have chosen a maximally 64-bit build,
*** but your pointers are only 4 bytes wide.
*** Please rerun Configure without -Duse64bitall.
d6796 6
a6801 9
		case "$d_quad" in
		define)
			cat <<EOM >&4
*** Since you have quads, you could possibly try with -Duse64bitint.
EOM
			;;
		esac
		cat <<EOM >&4
*** Cannot continue, aborting.
d6804 3
a6806 2

		exit 1
d7138 1
a7138 290
rp='Colon-separated list of additional directories for perl to search?'
. ./myread
case "$ans" in
' '|''|none)	otherlibdirs=' ' ;;     
*)	otherlibdirs="$ans" ;;
esac
case "$otherlibdirs" in
' ') val=$undef ;;
*)	val=$define ;;
esac
set d_perl_otherlibdirs
eval $setvar

: Cruising for prototypes
echo " "
echo "Checking out function prototypes..." >&4
$cat >prototype.c <<EOCP
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
int main(int argc, char *argv[]) {
	exit(0);}
EOCP
if $cc $ccflags -c prototype.c >prototype.out 2>&1 ; then
	echo "Your C compiler appears to support function prototypes."
	val="$define"
else
	echo "Your C compiler doesn't seem to understand function prototypes."
	val="$undef"
fi
set prototype
eval $setvar
$rm -f prototype*

case "$prototype" in
"$define") ;;
*)	ansi2knr='ansi2knr'
	echo " "
	cat <<EOM >&4

$me:  FATAL ERROR:
This version of $package can only be compiled by a compiler that 
understands function prototypes.  Unfortunately, your C compiler 
	$cc $ccflags
doesn't seem to understand them.  Sorry about that.

If GNU cc is available for your system, perhaps you could try that instead.  

Eventually, we hope to support building Perl with pre-ANSI compilers.
If you would like to help in that effort, please contact <perlbug@@perl.org>.

Aborting Configure now.
EOM
	exit 2
	;;
esac

: determine where public executables go
echo " "
set dflt bin bin
eval $prefixit
fn=d~
rp='Pathname where the public executables will reside?'
. ./getfile
if $test "X$ansexp" != "X$binexp"; then
	installbin=''
fi
bin="$ans"
binexp="$ansexp"
: Change installation prefix, if necessary.
: XXX Bug? -- ignores Configure -Dinstallprefix setting.
if $test X"$prefix" != X"$installprefix"; then
	installbin=`echo $binexp | sed "s#^$prefix#$installprefix#"`
else
	installbin="$binexp"
fi

echo " "
case "$extras" in
'') dflt='n';;
*) dflt='y';;
esac
cat <<EOM
Perl can be built with extra modules or bundles of modules which
will be fetched from the CPAN and installed alongside Perl.

Notice that you will need access to the CPAN; either via the Internet,
or a local copy, for example a CD-ROM or a local CPAN mirror.  (You will
be asked later to configure the CPAN.pm module which will in turn do
the installation of the rest of the extra modules or bundles.)

Notice also that if the modules require any external software such as
libraries and headers (the libz library and the zlib.h header for the
Compress::Zlib module, for example) you MUST have any such software
already installed, this configuration process will NOT install such
things for you.

If this doesn't make any sense to you, just accept the default '$dflt'.
EOM
rp='Install any extra modules (y or n)?'
. ./myread
case "$ans" in
y|Y)
	cat <<EOM

Please list any extra modules or bundles to be installed from CPAN,
with spaces between the names.  The names can be in any format the
'install' command of CPAN.pm will understand.  (Answer 'none',
without the quotes, to install no extra modules or bundles.)
EOM
	rp='Extras?'
	dflt="$extras"
	. ./myread
	extras="$ans"
esac
case "$extras" in
''|'none')
	val=''
	$rm -f ../extras.lst
	;;
*)	echo "(Saving the list of extras for later...)"
	echo "$extras" > ../extras.lst
	val="'$extras'"
	;;
esac
set extras
eval $setvar
echo " "

: determine where html pages for programs go
set html1dir html1dir none
eval $prefixit
$cat <<EOM

If you wish to install html files for programs in $spackage, indicate 
the appropriate directory here.  To skip installing html files,
answer "none".
EOM
case "$html1dir" in
''|none|$undef|' ') dflt=none ;;
*) dflt=$html1dir ;;
esac
fn=dn+~
rp="Directory for the main $spackage html pages?"
. ./getfile
html1dir="$ans"
html1direxp="$ansexp"
: Use ' ' for none so value is preserved next time through Configure
$test X"$html1dir" = "X" && html1dir=' '
: Change installation prefix, if necessary.
if $test X"$prefix" != X"$installprefix"; then
	installhtml1dir=`echo $html1direxp | sed "s#^$prefix#$installprefix#"`
else
	installhtml1dir="$html1direxp"
fi

: determine where html pages for libraries and modules go
set html3dir html3dir none
eval $prefixit
$cat <<EOM

If you wish to install html files for modules associated with $spackage,
indicate the appropriate directory here.  To skip installing html files,
answer "none".
EOM
: There is no obvious default.  If they have specified html1dir, then
: try to key off that, possibly changing .../html1 into .../html3.
case "$html3dir" in
'') html3dir=`echo "$html1dir" | $sed 's/1$/3$/'` ;;
*) dflt=$html3dir ;;
esac
fn=dn+~
rp="Directory for the $spackage module html pages?"
. ./getfile
html3dir="$ans"
html3direxp="$ansexp"
: Use ' ' for none so value is preserved next time through Configure
$test X"$html3dir" = "X" && html3dir=' '
: Change installation prefix, if necessary.
if $test X"$prefix" != X"$installprefix"; then
	installhtml3dir=`echo $html3direxp | sed "s#^$prefix#$installprefix#"`
else
	installhtml3dir="$html3direxp"
fi

: Find perl5.005 or later.
echo "Looking for a previously installed perl5.005 or later... "
case "$perl5" in
'')	for tdir in `echo "$binexp$path_sep$PATH" | $sed "s/$path_sep/ /g"`; do
		: Check if this perl is recent and can load a simple module
		if $test -x $tdir/perl$exe_ext && $tdir/perl -Mless -e 'use 5.005;' >/dev/null 2>&1; then
			perl5=$tdir/perl
			break;
		elif $test -x $tdir/perl5$exe_ext && $tdir/perl5 -Mless -e 'use 5.005;' >/dev/null 2>&1; then
			perl5=$tdir/perl5
			break;
		fi
	done
	;;
*)	perl5="$perl5"
	;;
esac
case "$perl5" in
'')	echo "None found.  That's ok.";;
*)	echo "Using $perl5." ;;
esac

: Determine list of previous versions to include in @@INC
$cat > getverlist <<EOPL
#!$perl5 -w
use File::Basename;
\$api_versionstring = "$api_versionstring";
\$version = "$version";
\$stem = "$sitelib_stem";
\$archname = "$archname";
EOPL
	$cat >> getverlist <<'EOPL'
# Can't have leading @@ because metaconfig interprets it as a command!
;@@inc_version_list=();
# XXX Redo to do opendir/readdir? 
if (-d $stem) {
    chdir($stem);
    ;@@candidates = glob("5.*");
}
else {
    ;@@candidates = ();
}

# XXX ToDo:  These comparisons must be reworked when two-digit
# subversions come along, so that 5.7.10 compares as greater than
# 5.7.3!  By that time, hope that 5.6.x is sufficiently
# widespread that we can use the built-in version vectors rather
# than reinventing them here.  For 5.6.0, however, we must
# assume this script will likely be run by 5.005_0x.  --AD 1/2000.
foreach $d (@@candidates) {
    if ($d lt $version) {
	if ($d ge $api_versionstring) {
	    unshift(@@inc_version_list, grep { -d } "$d/$archname", $d);
	}
	elsif ($d ge "5.005") {
	    unshift(@@inc_version_list, grep { -d } $d);
	}
    }
    else {
	# Skip newer version.  I.e. don't look in
	# 5.7.0 if we're installing 5.6.1.
    }
}

if (@@inc_version_list) {
    print join(' ', @@inc_version_list);
}
else {
    # Blank space to preserve value for next Configure run.
    print " ";
}
EOPL
chmod +x getverlist
case "$inc_version_list" in
'')	if test -x "$perl5$exe_ext"; then
		dflt=`$perl5 getverlist`
	else
		dflt='none'
	fi
	;;
$undef) dflt='none' ;;
*)  eval dflt=\"$inc_version_list\" ;;
esac
case "$dflt" in
''|' ') dflt=none ;;
esac
case "$dflt" in
5.005) dflt=none ;;
esac
$cat <<EOM

In order to ease the process of upgrading, this version of perl 
can be configured to use modules built and installed with earlier 
versions of perl that were installed under $prefix.  Specify here
the list of earlier versions that this version of perl should check.
If Configure detected no earlier versions of perl installed under
$prefix, then the list will be empty.  Answer 'none' to tell perl
to not search earlier versions.

The default should almost always be sensible, so if you're not sure,
just accept the default.
EOM

rp='List of earlier versions to include in @@INC?'
d7141 2
a7142 2
[Nn]one|''|' ') inc_version_list=' ' ;;
*) inc_version_list="$ans" ;;
d7144 3
a7146 6
case "$inc_version_list" in
''|' ') 
	inc_version_list_init='0';;
*)	inc_version_list_init=`echo $inc_version_list |
		$sed -e 's/^/"/' -e 's/ /","/g' -e 's/$/",0/'`
	;;
d7148 1
a7148 45
$rm -f getverlist

: determine whether to install perl also as /usr/bin/perl

echo " "
if $test -d /usr/bin -a "X$installbin" != X/usr/bin; then
	$cat <<EOM
Many scripts expect perl to be installed as /usr/bin/perl.

If you want to, I can install the perl you are about to compile
as /usr/bin/perl (in addition to $bin/perl).
EOM
	if test -f /usr/bin/perl; then
	    $cat <<EOM

However, please note that because you already have a /usr/bin/perl,
overwriting that with a new Perl would very probably cause problems.
Therefore I'm assuming you don't want to do that (unless you insist).

EOM
	    case "$installusrbinperl" in
	    "$define"|[yY]*)	dflt='y';;
	    *)			dflt='n';;
	    esac
	else
	    $cat <<EOM

Since you don't have a /usr/bin/perl I'm assuming creating one is okay.

EOM
	    case "$installusrbinperl" in
	    "$undef"|[nN]*)	dflt='n';;
	    *)			dflt='y';;
	    esac
	fi
	rp="Do you want to install perl as /usr/bin/perl?"
	. ./myread
	case "$ans" in
	[yY]*)	val="$define";;
	*)	val="$undef" ;;
	esac
else
	val="$undef"
fi
set installusrbinperl
d7151 1
d7153 4
a7156 26
echo "Checking for GNU C Library..." >&4
cat >try.c <<'EOCP'
/* Find out version of GNU C library.  __GLIBC__ and __GLIBC_MINOR__
   alone are insufficient to distinguish different versions, such as
   2.0.6 and 2.0.7.  The function gnu_get_libc_version() appeared in
   libc version 2.1.0.      A. Dougherty,  June 3, 2002.
*/
#include <stdio.h>
int main(void)
{
#ifdef __GLIBC__
#   ifdef __GLIBC_MINOR__
#       if __GLIBC__ >= 2 && __GLIBC_MINOR__ >= 1
#           include <gnu/libc-version.h>
	    printf("%s\n",  gnu_get_libc_version());
#       else
	    printf("%d.%d\n",  __GLIBC__, __GLIBC_MINOR__);
#       endif
#   else
	printf("%d\n",  __GLIBC__);
#   endif
    return 0;
#else
    return 1;
#endif
}
d7158 2
a7159 2
set try
if eval $compile_ok && $run ./try > glibc.ver; then
a7160 2
	gnulibc_version=`$cat glibc.ver`
	echo "You are using the GNU C Library version $gnulibc_version"
d7162 1
a7163 2
	gnulibc_version=''
	echo "You are not using the GNU C Library"
d7165 1
a7165 2
$rm -f try try.* glibc.ver
set d_gnulibc
d7167 7
d7175 5
a7179 39
: see if nm is to be used to determine whether a symbol is defined or not
case "$usenm" in
'')
	dflt=''
	case "$d_gnulibc" in
	"$define")
		echo " "
		echo "nm probably won't work on the GNU C Library." >&4
		dflt=n
		;;
	esac
	case "$dflt" in
	'') 
		if $test "$osname" = aix -a "X$PASE" != "Xdefine" -a ! -f /lib/syscalls.exp; then
			echo " "
			echo "Whoops!  This is an AIX system without /lib/syscalls.exp!" >&4
			echo "'nm' won't be sufficient on this sytem." >&4
			dflt=n
		fi
		;;
	esac
	case "$dflt" in
	'') dflt=`$egrep 'inlibc|csym' $rsrc/Configure | wc -l 2>/dev/null`
		if $test $dflt -gt 20; then
			dflt=y
		else
			dflt=n
		fi
		;;
	esac
	;;
*)
	case "$usenm" in
	true|$define) dflt=y;;
	*) dflt=n;;
	esac
	;;
esac
$cat <<EOM
d7181 1
a7181 7
I can use $nm to extract the symbols from your C libraries. This
is a time consuming task which may generate huge output on the disk (up
to 3 megabytes) but that should make the symbols extraction faster. The
alternative is to skip the 'nm' extraction part and to compile a small
test program instead to determine whether each symbol is present. If
you have a fast C compiler and/or if your 'nm' output cannot be parsed,
this may be the best solution.
d7183 2
a7184 1
You probably shouldn't let me use 'nm' if you are using the GNU C Library.
d7186 1
d7188 1
a7188 107
rp="Shall I use $nm to extract C symbols from the libraries?"
. ./myread
case "$ans" in
[Nn]*) usenm=false;;
*) usenm=true;;
esac

runnm=$usenm
case "$reuseval" in
true) runnm=false;;
esac

: nm options which may be necessary
case "$nm_opt" in
'') if $test -f /mach_boot; then
		nm_opt=''	# Mach
	elif $test -d /usr/ccs/lib; then
		nm_opt='-p'	# Solaris (and SunOS?)
	elif $test -f /dgux; then
		nm_opt='-p'	# DG-UX
	elif $test -f /lib64/rld; then
		nm_opt='-p'	# 64-bit Irix
	else
		nm_opt=''
	fi;;
esac

: nm options which may be necessary for shared libraries but illegal
: for archive libraries.  Thank you, Linux.
case "$nm_so_opt" in
'')	case "$myuname" in
	*linux*)
		if $nm --help | $grep 'dynamic' > /dev/null 2>&1; then
			nm_so_opt='--dynamic'
		fi
		;;
	esac
	;;
esac

case "$runnm" in
true)
: get list of predefined functions in a handy place
echo " "
case "$libc" in
'') libc=unknown
	case "$libs" in
	*-lc_s*) libc=`./loc libc_s$_a $libc $libpth`
	esac
	;;
esac
case "$libs" in
'') ;;
*)  for thislib in $libs; do
	case "$thislib" in
	-lc|-lc_s)
		: Handle C library specially below.
		;;
	-l*)
		thislib=`echo $thislib | $sed -e 's/^-l//'`
		if try=`./loc lib$thislib.$so.'*' X $libpth`; $test -f "$try"; then
			:
		elif try=`./loc lib$thislib.$so X $libpth`; $test -f "$try"; then
			:
		elif try=`./loc lib$thislib$_a X $libpth`; $test -f "$try"; then
			:
		elif try=`./loc $thislib$_a X $libpth`; $test -f "$try"; then
			:
		elif try=`./loc lib$thislib X $libpth`; $test -f "$try"; then
			:
		elif try=`./loc $thislib X $libpth`; $test -f "$try"; then
			:
		elif try=`./loc Slib$thislib$_a X $xlibpth`; $test -f "$try"; then
			:
		else
			try=''
		fi
		libnames="$libnames $try"
		;;
	*) libnames="$libnames $thislib" ;;
	esac
	done
	;;
esac
xxx=normal
case "$libc" in
unknown)
	set /lib/libc.$so
	for xxx in $libpth; do
		$test -r $1 || set $xxx/libc.$so
		: The messy sed command sorts on library version numbers.
		$test -r $1 || \
			set `echo blurfl; echo $xxx/libc.$so.[0-9]* | \
			tr ' ' $trnl | egrep -v '\.[A-Za-z]*$' | $sed -e '
				h
				s/[0-9][0-9]*/0000&/g
				s/0*\([0-9][0-9][0-9][0-9][0-9]\)/\1/g
				G
				s/\n/ /' | \
			 $sort | $sed -e 's/^.* //'`
		eval set \$$#
	done
	$test -r $1 || set /usr/ccs/lib/libc.$so
	$test -r $1 || set /lib/libsys_s$_a
	;;
*)
	set blurfl
d7191 17
a7207 19
if $test -r "$1"; then
	echo "Your (shared) C library seems to be in $1."
	libc="$1"
elif $test -r /lib/libc && $test -r /lib/clib; then
	echo "Your C library seems to be in both /lib/clib and /lib/libc."
	xxx=apollo
	libc='/lib/clib /lib/libc'
	if $test -r /lib/syslib; then
		echo "(Your math library is in /lib/syslib.)"
		libc="$libc /lib/syslib"
	fi
elif $test -r "$libc" || (test -h "$libc") >/dev/null 2>&1; then
	echo "Your C library seems to be in $libc, as you said before."
elif $test -r $incpath/usr/lib/libc$_a; then
	libc=$incpath/usr/lib/libc$_a;
	echo "Your C library seems to be in $libc.  That's fine."
elif $test -r /lib/libc$_a; then
	libc=/lib/libc$_a;
	echo "Your C library seems to be in $libc.  You're normal."
d7209 1
a7209 19
	if tans=`./loc libc$_a blurfl/dyick $libpth`; $test -r "$tans"; then
		:
	elif tans=`./loc libc blurfl/dyick $libpth`; $test -r "$tans"; then
		libnames="$libnames "`./loc clib blurfl/dyick $libpth`
	elif tans=`./loc clib blurfl/dyick $libpth`; $test -r "$tans"; then
		:
	elif tans=`./loc Slibc$_a blurfl/dyick $xlibpth`; $test -r "$tans"; then
		:
	elif tans=`./loc Mlibc$_a blurfl/dyick $xlibpth`; $test -r "$tans"; then
		:
	else
		tans=`./loc Llibc$_a blurfl/dyick $xlibpth`
	fi
	if $test -r "$tans"; then
		echo "Your C library seems to be in $tans, of all places."
		libc=$tans
	else
		libc='blurfl'
	fi
a7210 3
if $test $xxx = apollo -o -r "$libc" || (test -h "$libc") >/dev/null 2>&1; then
	dflt="$libc"
	cat <<EOM
d7212 13
a7224 2
If the guess above is wrong (which it might be if you're using a strange
compiler, or your machine supports multiple models), you can override it here.
d7226 5
a7230 6
EOM
else
	dflt=''
	echo $libpth | $tr ' ' $trnl | $sort | $uniq > libpath
	cat >&4 <<EOM
I can't seem to find your C library.  I've looked in the following places:
d7232 1
d7234 4
a7237 1
	$sed 's/^/	/' libpath
d7240 4
a7243 2
None of these seems to contain your C library. I need to get its name...

d7245 17
a7261 13
fi
fn=f
rp='Where is your C library?'
. ./getfile
libc="$ans"

echo " "
echo $libc $libnames | $tr ' ' $trnl | $sort | $uniq > libnames
set X `cat libnames`
shift
xxx=files
case $# in 1) xxx=file; esac
echo "Extracting names from the following $xxx for later perusal:" >&4
a7262 3
$sed 's/^/	/' libnames >&4
echo " "
$echo $n "This may take a while...$c" >&4
d7264 11
a7274 117
for file in $*; do
	case $file in
	*$so*) $nm $nm_so_opt $nm_opt $file 2>/dev/null;;
	*) $nm $nm_opt $file 2>/dev/null;;
	esac
done >libc.tmp

$echo $n ".$c"
$grep fprintf libc.tmp > libc.ptf
xscan='eval "<libc.ptf $com >libc.list"; $echo $n ".$c" >&4'
xrun='eval "<libc.tmp $com >libc.list"; echo "done." >&4'
xxx='[ADTSIW]'
if com="$sed -n -e 's/__IO//' -e 's/^.* $xxx  *//p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e 's/^__*//' -e 's/^\([a-zA-Z_0-9$]*\).*xtern.*/\1/p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e '/|UNDEF/d' -e '/FUNC..GL/s/^.*|__*//p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e 's/^.* D __*//p' -e 's/^.* D //p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e 's/^_//' -e 's/^\([a-zA-Z_0-9]*\).*xtern.*text.*/\1/p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e 's/^.*|FUNC |GLOB .*|//p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$grep '|' | $sed -n -e '/|COMMON/d' -e '/|DATA/d' \
				-e '/ file/d' -e 's/^\([^ 	]*\).*/\1/p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e 's/^.*|FUNC |GLOB .*|//p' -e 's/^.*|FUNC |WEAK .*|//p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e 's/^__//' -e '/|Undef/d' -e '/|Proc/s/ .*//p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e 's/^.*|Proc .*|Text *| *//p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e '/Def. Text/s/.* \([^ ]*\)\$/\1/p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e 's/^[-0-9a-f ]*_\(.*\)=.*/\1/p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e 's/.*\.text n\ \ \ \.//p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="sed -n -e 's/^__.*//' -e 's/[       ]*D[    ]*[0-9]*.*//p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
else
	$nm -p $* 2>/dev/null >libc.tmp
	$grep fprintf libc.tmp > libc.ptf
	if com="$sed -n -e 's/^.* [ADTSIW]  *_[_.]*//p' -e 's/^.* [ADTSIW] //p'";\
		eval $xscan; $contains '^fprintf$' libc.list >/dev/null 2>&1
	then
		nm_opt='-p'
		eval $xrun
	else
		echo " "
		echo "$nm didn't seem to work right. Trying $ar instead..." >&4
		com=''
		if $ar t $libc > libc.tmp && $contains '^fprintf$' libc.tmp >/dev/null 2>&1; then
			for thisname in $libnames $libc; do
				$ar t $thisname >>libc.tmp
			done
			$sed -e "s/\\$_o\$//" < libc.tmp > libc.list
			echo "Ok." >&4
		elif test "X$osname" = "Xos2" && $ar tv $libc > libc.tmp; then
			# Repeat libc to extract forwarders to DLL entries too
			for thisname in $libnames $libc; do
				$ar tv $thisname >>libc.tmp
				# Revision 50 of EMX has bug in $ar.
				# it will not extract forwarders to DLL entries
				# Use emximp which will extract exactly them.
				emximp -o tmp.imp $thisname \
				    2>/dev/null && \
				    $sed -e 's/^\([_a-zA-Z0-9]*\) .*$/\1/p' \
				    < tmp.imp >>libc.tmp
				$rm tmp.imp
			done
			$sed -e "s/\\$_o\$//" -e 's/^ \+//' < libc.tmp > libc.list
			echo "Ok." >&4
		else
			echo "$ar didn't seem to work right." >&4
			echo "Maybe this is a Cray...trying bld instead..." >&4
			if bld t $libc | $sed -e 's/.*\///' -e "s/\\$_o:.*\$//" > libc.list
			then
				for thisname in $libnames; do
					bld t $libnames | \
					$sed -e 's/.*\///' -e "s/\\$_o:.*\$//" >>libc.list
					$ar t $thisname >>libc.tmp
				done
				echo "Ok." >&4
			else
				echo "That didn't work either.  Giving up." >&4
				exit 1
			fi
d7276 4
a7279 15
	fi
fi
nm_extract="$com"
case "$PASE" in
define)
    echo " "
    echo "Since you are compiling for PASE, extracting more symbols from libc.a ...">&4
    dump -Tv /lib/libc.a | awk '$7 == "/unix" {print $5 " " $8}' | grep "^SV" | awk '{print $2}' >> libc.list
    ;;
*)  if $test -f /lib/syscalls.exp; then
	echo " "
	echo "Also extracting names from /lib/syscalls.exp for good ole AIX..." >&4
	$sed -n 's/^\([^ 	]*\)[ 	]*syscall[0-9]*[ 	]*$/\1/p' /lib/syscalls.exp >>libc.list
    fi
    ;;
d7281 3
a7283 1
;;
a7284 1
$rm -f libnames libpath
d7286 41
a7326 3
: see if dld is available
set dld.h i_dld
eval $inhdr
d7328 12
a7339 24
: is a C symbol defined?
csym='tlook=$1;
case "$3" in
-v) tf=libc.tmp; tdc="";;
-a) tf=libc.tmp; tdc="[]";;
*) tlook="^$1\$"; tf=libc.list; tdc="()";;
esac;
tx=yes;
case "$reuseval-$4" in
true-) ;;
true-*) tx=no; eval "tval=\$$4"; case "$tval" in "") tx=yes;; esac;;
esac;
case "$tx" in
yes)
	tval=false;
	if $test "$runnm" = true; then
		if $contains $tlook $tf >/dev/null 2>&1; then
			tval=true;
		elif $test "$mistrustnm" = compile -o "$mistrustnm" = run; then
			echo "void *(*(p()))$tdc { extern void *$1$tdc; return &$1; } int main() { if(p()) return(0); else return(1); }"> try.c;
			$cc -o try $optimize $ccflags $ldflags try.c >/dev/null 2>&1 $libs && tval=true;
			$test "$mistrustnm" = run -a -x try && { $run ./try$_exe >/dev/null 2>&1 || tval=false; };
			$rm -f try$_exe try.c core core.* try.core;
		fi;
d7341 2
a7342 4
		echo "void *(*(p()))$tdc { extern void *$1$tdc; return &$1; } int main() { if(p()) return(0); else return(1); }"> try.c;
		$cc -o try $optimize $ccflags $ldflags try.c $libs >/dev/null 2>&1 && tval=true;
		$rm -f try$_exe try.c;
	fi;
d7344 34
a7377 5
*)
	case "$tval" in
	$define) tval=true;;
	*) tval=false;;
	esac;
d7379 27
a7405 2
esac;
eval "$2=$tval"'
d7407 3
a7409 26
: define an is-in-libc? function
inlibc='echo " "; td=$define; tu=$undef;
sym=$1; var=$2; eval "was=\$$2";
tx=yes;
case "$reuseval$was" in
true) ;;
true*) tx=no;;
esac;
case "$tx" in
yes)
	set $sym tres -f;
	eval $csym;
	case "$tres" in
	true)
		echo "$sym() found." >&4;
		case "$was" in $undef) . ./whoa; esac; eval "$var=\$td";;
	*)
		echo "$sym() NOT found." >&4;
		case "$was" in $define) . ./whoa; esac; eval "$var=\$tu";;
	esac;;
*)
	case "$was" in
	$define) echo "$sym() found." >&4;;
	*) echo "$sym() NOT found." >&4;;
	esac;;
esac'
d7514 1
a7514 1
	'')	$cat >try.c <<EOM
a7516 2
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
a7517 1
#endif
d7795 1
a7795 1
	freebsd|netbsd|openbsd)
d8520 1
a8520 102
	installscript=`echo $scriptdirexp | sed "s#^$prefix#$installprefix#"`
else
	installscript="$scriptdirexp"
fi

: determine where add-on public executables go
case "$sitebin" in
'')	dflt=$siteprefix/bin ;;
*)	dflt=$sitebin ;;
esac
fn=d~
rp='Pathname where the add-on public executables should be installed?'
. ./getfile
sitebin="$ans"
sitebinexp="$ansexp"
: Change installation prefix, if necessary.
if $test X"$prefix" != X"$installprefix"; then
	installsitebin=`echo $sitebinexp | sed "s#^$prefix#$installprefix#"`
else
	installsitebin="$sitebinexp"
fi

: determine where add-on html pages go
: There is no standard location, so try to copy the previously-selected
: directory structure for the core html pages.
case "$sitehtml1dir" in
'')    dflt=`echo "$html1dir" | $sed "s#^$prefix#$siteprefix#"` ;;
*)     dflt=$sitehtml1dir ;;
esac
case "$dflt" in
''|' ') dflt=none ;;
esac
fn=dn+~
rp='Pathname where the site-specific html pages should be installed?'
. ./getfile
sitehtml1dir="$ans"
sitehtml1direxp="$ansexp"
: Change installation prefix, if necessary.
if $test X"$prefix" != X"$installprefix"; then
	installsitehtml1dir=`echo $sitehtml1direxp | $sed "s#^$prefix#$installprefix#"`
else
	installsitehtml1dir="$sitehtml1direxp"
fi

: determine where add-on library html pages go
: There is no standard location, so try to copy the previously-selected
: directory structure for the core html pages.
case "$sitehtml3dir" in
'')    dflt=`echo "$html3dir" | $sed "s#^$prefix#$siteprefix#"` ;;
*)     dflt=$sitehtml3dir ;;
esac
case "$dflt" in
''|' ') dflt=none ;;
esac
fn=dn+~
rp='Pathname where the site-specific library html pages should be installed?'
. ./getfile
sitehtml3dir="$ans"
sitehtml3direxp="$ansexp"
: Change installation prefix, if necessary.
if $test X"$prefix" != X"$installprefix"; then
	installsitehtml3dir=`echo $sitehtml3direxp | $sed "s#^$prefix#$installprefix#"`
else
	installsitehtml3dir="$sitehtml3direxp"
fi

: determine where add-on manual pages go
case "$siteman1dir" in
'')	dflt=`echo $man1dir | $sed "s#^$prefix#$siteprefix#"` ;;
*)  	dflt=$siteman1dir ;;
esac
case "$dflt" in
''|' ') dflt=none ;;
esac
fn=dn+~
rp='Pathname where the site-specific manual pages should be installed?'
. ./getfile
siteman1dir="$ans"
siteman1direxp="$ansexp"
: Change installation prefix, if necessary.
if $test X"$prefix" != X"$installprefix"; then
	installsiteman1dir=`echo $siteman1direxp | $sed "s#^$prefix#$installprefix#"`
else
	installsiteman1dir="$siteman1direxp"
fi

: determine where add-on library man pages go
case "$siteman3dir" in
'')	dflt=`echo $man3dir | $sed "s#^$prefix#$siteprefix#"` ;;
*)  	dflt=$siteman3dir ;;
esac
case "$dflt" in
''|' ') dflt=none ;;
esac
fn=dn+~
rp='Pathname where the site-specific library manual pages should be installed?'
. ./getfile
siteman3dir="$ans"
siteman3direxp="$ansexp"
: Change installation prefix, if necessary.
if $test X"$prefix" != X"$installprefix"; then
	installsiteman3dir=`echo $siteman3direxp | $sed "s#^$prefix#$installprefix#"`
d8522 1
a8522 1
	installsiteman3dir="$siteman3direxp"
d8525 4
a8528 5
: determine where add-on public executable scripts go
case "$sitescript" in
'')	dflt=$siteprefix/script
	$test -d $dflt || dflt=$sitebin ;;
*)  dflt="$sitescript" ;;
d8530 2
a8531 2
fn=d~+
rp='Pathname where add-on public executable scripts should be installed?'
d8533 2
a8534 2
sitescript="$ans"
sitescriptexp="$ansexp"
d8537 1
a8537 1
	installsitescript=`echo $sitescriptexp | sed "s#^$prefix#$installprefix#"`
d8539 1
a8539 1
	installsitescript="$sitescriptexp"
a8541 30
case "$usefaststdio" in
$define|true|[yY]*|'')
	xversion=`awk '/define[ 	]+PERL_VERSION/ {print $3}' $rsrc/patchlevel.h`
	case "$xversion" in
	[68])	dflt='y' ;;
	*)	dflt='n' ;;
	esac
	;;
*) dflt='n';;
esac
cat <<EOM

Perl can be built to use 'fast stdio', which means using the stdio
library but also directly manipulating the stdio buffers to enable
faster I/O.  Using stdio is better for backward compatibility (especially
for Perl extensions), but on the other hand since Perl 5.8 the 'perlio'
interface has been preferred instead of stdio.

If this doesn't make any sense to you, just accept the default '$dflt'.
EOM
rp='Use the "fast stdio" if available?'
. ./myread
case "$ans" in
y|Y)	val="$define" ;;     
*)      val="$undef" ;;
esac
set usefaststdio
eval $setvar


a8641 4
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
d8667 2
a8745 4
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
d8748 1
a8748 1
    return(0);
a8800 150
case "$vendorprefix" in
'')	vendorhtml1dir=''
	vendorhtml1direxp=''
	;;
*)	: determine where vendor-supplied html pages go.
	: There is no standard location, so try to copy the previously-selected
	: directory structure for the core html pages.
	: XXX Better default suggestions would be welcome.
	case "$vendorhtml1dir" in
	'')	dflt=`echo "$html1dir" | $sed "s#^$prefix#$vendorprefix#"` ;;
	*)	dflt=$vendorhtml1dir ;;
	esac
	case "$dflt" in
	''|' ') dflt=none ;;
	esac
	fn=dn+~
	rp='Pathname for the vendor-supplied html pages?'
	. ./getfile
	vendorhtml1dir="$ans"
	vendorhtml1direxp="$ansexp"
	;;
esac
: Use ' ' for none so value is preserved next time through Configure
$test X"$vendorhtml1dir" = "X" && vendorhtml1dir=' '
: Change installation prefix, if necessary.
if $test X"$prefix" != X"$installprefix"; then
	installvendorhtml1dir=`echo $vendorhtml1direxp | $sed "s#^$prefix#$installprefix#"`
else
	installvendorhtml1dir="$vendorhtml1direxp"
fi

case "$vendorprefix" in
'')	vendorhtml3dir=''
	vendorhtml3direxp=''
	;;
*)	: determine where vendor-supplied module html pages go.
	: There is no standard location, so try to copy the previously-selected
	: directory structure for the core html pages.
	: XXX Better default suggestions would be welcome.
	case "$vendorhtml3dir" in
	'')	dflt=`echo "$html3dir" | $sed "s#^$prefix#$vendorprefix#"` ;;
	*)	dflt=$vendorhtml3dir ;;
	esac
	case "$dflt" in
	''|' ') dflt=none ;;
	esac
	fn=dn+~
	rp='Pathname for the vendor-supplied html pages?'
	. ./getfile
	vendorhtml3dir="$ans"
	vendorhtml3direxp="$ansexp"
	;;
esac
: Use ' ' for none so value is preserved next time through Configure
$test X"$vendorhtml3dir" = "X" && vendorhtml3dir=' '
: Change installation prefix, if necessary.
if $test X"$prefix" != X"$installprefix"; then
	installvendorhtml3dir=`echo $vendorhtml3direxp | $sed "s#^$prefix#$installprefix#"`
else
	installvendorhtml3dir="$vendorhtml3direxp"
fi

case "$vendorprefix" in
'')	vendorman1dir=''
	vendorman1direxp=''
	;;
*)	: determine where vendor-supplied manual pages go.
	case "$vendorman1dir" in
	'') dflt=`echo "$man1dir" | $sed "s#^$prefix#$vendorprefix#"` ;;
	*)	dflt=$vendorman1dir ;;
	esac
	case "$dflt" in
	''|' ') dflt=none ;;
	esac
	fn=nd~+
	rp='Pathname for the vendor-supplied manual section 1 pages?'
	. ./getfile
	vendorman1dir="$ans"
	vendorman1direxp="$ansexp"
	;;
esac
: Use ' ' for none so value is preserved next time through Configure
$test X"$vendorman1dir" = "X" && vendorman1dir=' '
: Change installation prefix, if necessary.
if $test X"$prefix" != X"$installprefix"; then
	installvendorman1dir=`echo "$vendorman1direxp" | $sed "s#^$prefix#$installprefix#"`
else
	installvendorman1dir="$vendorman1direxp"
fi

case "$vendorprefix" in
'')	vendorman3dir=''
	vendorman3direxp=''
	;;
*)	: determine where vendor-supplied module manual pages go.
	case "$vendorman3dir" in
	'') dflt=`echo "$man3dir" | $sed "s#^$prefix#$vendorprefix#"` ;;
	*)	dflt=$vendorman3dir ;;
	esac
	case "$dflt" in
	''|' ') dflt=none ;;
	esac
	fn=nd~+
	rp='Pathname for the vendor-supplied manual section 3 pages?'
	. ./getfile
	vendorman3dir="$ans"
	vendorman3direxp="$ansexp"
	;;
esac
: Use ' ' for none so value is preserved next time through Configure
$test X"$vendorman3dir" = "X" && vendorman3dir=' '
: Change installation prefix, if necessary.
if $test X"$prefix" != X"$installprefix"; then
	installvendorman3dir=`echo "$vendorman3direxp" | $sed "s#^$prefix#$installprefix#"`
else
	installvendorman3dir="$vendorman3direxp"
fi

case "$vendorprefix" in
'')	d_vendorscript="$undef"
	vendorscript=''
	vendorscriptexp=''
	;;
*)	d_vendorscript="$define"
	: determine where vendor-supplied scripts go.
	case "$vendorscript" in
	'')	dflt=$vendorprefix/script
		$test -d $dflt || dflt=$vendorbin ;;
	*)  dflt="$vendorscript" ;;
	esac
	$cat <<EOM

The installation process will create a directory for 
vendor-supplied scripts.

EOM
	fn=d~+
	rp='Pathname for the vendor-supplied scripts directory?'
	. ./getfile
	vendorscript="$ans"
	vendorscriptexp="$ansexp"
	;;
esac
: Change installation prefix, if necessary.
if $test X"$prefix" != X"$installprefix"; then
	installvendorscript=`echo $vendorscriptexp | $sed "s#^$prefix#$installprefix#"`
else
	installvendorscript="$vendorscriptexp"
fi

a8804 115
echo " "

if $test X"$d_longdbl" = X"$define"; then

echo "Checking how to print long doubles..." >&4

if $test X"$sPRIfldbl" = X -a X"$doublesize" = X"$longdblsize"; then
	$cat >try.c <<'EOCP'
#include <sys/types.h>
#include <stdio.h>
int main() {
  double d = 123.456;
  printf("%.3f\n", d);
}
EOCP
	set try
	if eval $compile; then
		yyy=`$run ./try`
		case "$yyy" in
		123.456)
			sPRIfldbl='"f"'; sPRIgldbl='"g"'; sPRIeldbl='"e"';
                	sPRIFUldbl='"F"'; sPRIGUldbl='"G"'; sPRIEUldbl='"E"';
			echo "We will use %f."
			;;
		esac
	fi
fi

if $test X"$sPRIfldbl" = X; then
	$cat >try.c <<'EOCP'
#include <sys/types.h>
#include <stdio.h>
int main() {
  long double d = 123.456;
  printf("%.3Lf\n", d);
}
EOCP
	set try
	if eval $compile; then
		yyy=`$run ./try`
		case "$yyy" in
		123.456)
			sPRIfldbl='"Lf"'; sPRIgldbl='"Lg"'; sPRIeldbl='"Le"';
                	sPRIFUldbl='"LF"'; sPRIGUldbl='"LG"'; sPRIEUldbl='"LE"';
			echo "We will use %Lf."
			;;
		esac
	fi
fi

if $test X"$sPRIfldbl" = X; then
	$cat >try.c <<'EOCP'
#include <sys/types.h>
#include <stdio.h>
int main() {
  long double d = 123.456;
  printf("%.3llf\n", d);
}
EOCP
	set try
	if eval $compile; then
		yyy=`$run ./try`
		case "$yyy" in
		123.456)
			sPRIfldbl='"llf"'; sPRIgldbl='"llg"'; sPRIeldbl='"lle"';
                	sPRIFUldbl='"llF"'; sPRIGUldbl='"llG"'; sPRIEUldbl='"llE"';
			echo "We will use %llf."
			;;
		esac
	fi
fi

if $test X"$sPRIfldbl" = X; then
	$cat >try.c <<'EOCP'
#include <sys/types.h>
#include <stdio.h>
int main() {
  long double d = 123.456;
  printf("%.3lf\n", d);
}
EOCP
	set try
	if eval $compile; then
		yyy=`$run ./try`
		case "$yyy" in
		123.456)
			sPRIfldbl='"lf"'; sPRIgldbl='"lg"'; sPRIeldbl='"le"';
                	sPRIFUldbl='"lF"'; sPRIGUldbl='"lG"'; sPRIEUldbl='"lE"';
			echo "We will use %lf."
			;;
		esac
	fi
fi

if $test X"$sPRIfldbl" = X; then
	echo "Cannot figure out how to print long doubles." >&4
else
	sSCNfldbl=$sPRIfldbl	# expect consistency
fi

$rm -f try try.*

fi # d_longdbl

case "$sPRIfldbl" in
'')	d_PRIfldbl="$undef"; d_PRIgldbl="$undef"; d_PRIeldbl="$undef"; 
	d_PRIFUldbl="$undef"; d_PRIGUldbl="$undef"; d_PRIEUldbl="$undef"; 
	d_SCNfldbl="$undef";
	;;
*)	d_PRIfldbl="$define"; d_PRIgldbl="$define"; d_PRIeldbl="$define"; 
	d_PRIFUldbl="$define"; d_PRIGUldbl="$define"; d_PRIEUldbl="$define"; 
	d_SCNfldbl="$define";
	;;
esac

d9058 1
a9058 1
	$cat >access.c <<EOCP
a9068 4
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
a9095 4
: see if aintl exists
set aintl d_aintl
eval $inlibc

d9206 1
a9206 1
	$cat >try.c <<EOCP
a9219 4
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
d9385 1
a9385 1
void croak (char* pat,...) __attribute__((__format__(__printf__,1,2),noreturn));
a9428 4
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
a9490 4
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
a9595 4
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
a9649 4
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
d9746 1
a9746 1
	$cat >try.c <<EOF
a9747 4
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
a9933 4
: see if copysignl exists
set copysignl d_copysignl
eval $inlibc

a10285 4
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
a10377 4
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
d10915 1
a10915 1
$cat >try.c <<EOCP
a10922 4
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
a11054 2
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
a11055 1
#endif
d11101 1
a11101 4
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
d11170 5
a11174 277
	close(pd[0]);			/* We write to pd[1] */
	close(pu[1]);			/* We read from pu[0] */
	read(pu[0], buf, 1);	/* Wait for parent to signal us we may continue */
	close(pd[1]);			/* Pipe pd is now fully closed! */
	exit(0);				/* Bye bye, thank you for playing! */
}
EOCP
	set try
	if eval $compile_ok; then
		echo "$startsh" >mtry
		echo "$run ./try >try.out 2>try.ret 4>try.err || exit 4" >>mtry
		chmod +x mtry
		./mtry >/dev/null 2>&1
		case $? in
		0) eagain=`$cat try.out`;;
		1) echo "Could not perform non-blocking setting!";;
		2) echo "I did a successful read() for something that was not there!";;
		3) echo "Hmm... non-blocking I/O does not seem to be working!";;
		4) echo "Could not find F_SETFL!";;
		*) echo "Something terribly wrong happened during testing.";;
		esac
		rd_nodata=`$cat try.ret`
		echo "A read() system call with no data present returns $rd_nodata."
		case "$rd_nodata" in
		0|-1) ;;
		*)
			echo "(That's peculiar, fixing that to be -1.)"
			rd_nodata=-1
			;;
		esac
		case "$eagain" in
		'')
			echo "Forcing errno EAGAIN on read() with no data available."
			eagain=EAGAIN
			;;
		*)
			echo "Your read() sets errno to $eagain when no data is available."
			;;
		esac
		status=`$cat try.err`
		case "$status" in
		0) echo "And it correctly returns 0 to signal EOF.";;
		-1) echo "But it also returns -1 to signal EOF, so be careful!";;
		*) echo "However, your read() returns '$status' on EOF??";;
		esac
		val="$define"
		if test "$status" = "$rd_nodata"; then
			echo "WARNING: you can't distinguish between EOF and no data!"
			val="$undef"
		fi
	else
		echo "I can't compile the test program--assuming errno EAGAIN will do."
		eagain=EAGAIN
	fi
	set d_eofnblk
	eval $setvar
	;;
*)
	echo "Using $hint value $eagain."
	echo "Your read() returns $rd_nodata when no data is present."
	case "$d_eofnblk" in
	"$define") echo "And you can see EOF because read() returns 0.";;
	"$undef") echo "But you can't see EOF status from read() returned value.";;
	*)
		echo "(Assuming you can't see EOF status from read anyway.)"
		d_eofnblk=$undef
		;;
	esac
	;;
esac
$rm -f try try.* .out core head.c mtry

: see if _ptr and _cnt from stdio act std
echo " "

if $contains '_lbfsize' `./findhdr stdio.h` >/dev/null 2>&1 ; then
	echo "(Looks like you have stdio.h from BSD.)"
	case "$stdio_ptr" in
	'') stdio_ptr='((fp)->_p)'
		ptr_lval=$define
		;;
	*)	ptr_lval=$d_stdio_ptr_lval;;
	esac
	case "$stdio_cnt" in
	'') stdio_cnt='((fp)->_r)'
		cnt_lval=$define
		;;
	*)	cnt_lval=$d_stdio_cnt_lval;;
	esac
	case "$stdio_base" in
	'') stdio_base='((fp)->_ub._base ? (fp)->_ub._base : (fp)->_bf._base)';;
	esac
	case "$stdio_bufsiz" in
	'') stdio_bufsiz='((fp)->_ub._base ? (fp)->_ub._size : (fp)->_bf._size)';;
	esac
elif $contains '_IO_fpos_t' `./findhdr stdio.h` `./findhdr libio.h` >/dev/null 2>&1 ; then
	echo "(Looks like you have stdio.h from Linux.)"
	case "$stdio_ptr" in
	'') stdio_ptr='((fp)->_IO_read_ptr)'
		ptr_lval=$define
		;;
	*)	ptr_lval=$d_stdio_ptr_lval;;
	esac
	case "$stdio_cnt" in
	'') stdio_cnt='((fp)->_IO_read_end - (fp)->_IO_read_ptr)'
		cnt_lval=$undef
		;;
	*)	cnt_lval=$d_stdio_cnt_lval;;
	esac
	case "$stdio_base" in
	'') stdio_base='((fp)->_IO_read_base)';;
	esac
	case "$stdio_bufsiz" in
	'') stdio_bufsiz='((fp)->_IO_read_end - (fp)->_IO_read_base)';;
	esac
else
	case "$stdio_ptr" in
	'') stdio_ptr='((fp)->_ptr)'
		ptr_lval=$define
		;;
	*)	ptr_lval=$d_stdio_ptr_lval;;
	esac
	case "$stdio_cnt" in
	'') stdio_cnt='((fp)->_cnt)'
		cnt_lval=$define
		;;
	*)	cnt_lval=$d_stdio_cnt_lval;;
	esac
	case "$stdio_base" in
	'') stdio_base='((fp)->_base)';;
	esac
	case "$stdio_bufsiz" in
	'') stdio_bufsiz='((fp)->_cnt + (fp)->_ptr - (fp)->_base)';;
	esac
fi

: test whether _ptr and _cnt really work
echo "Checking how std your stdio is..." >&4
$cat >try.c <<EOP
#include <stdio.h>
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
#define FILE_ptr(fp)	$stdio_ptr
#define FILE_cnt(fp)	$stdio_cnt
int main() {
	FILE *fp = fopen("try.c", "r");
	char c = getc(fp);
	if (
		18 <= FILE_cnt(fp) &&
		strncmp(FILE_ptr(fp), "include <stdio.h>\n", 18) == 0
	)
		exit(0);
	exit(1);
}
EOP
val="$undef"
set try
if eval $compile && $to try.c; then
	if $run ./try; then
		echo "Your stdio acts pretty std."
		val="$define"
	else
		echo "Your stdio isn't very std."
	fi
else
	echo "Your stdio doesn't appear very std."
fi
$rm -f try.c try

# glibc 2.2.90 and above apparently change stdio streams so Perl's
# direct buffer manipulation no longer works.  The Configure tests
# should be changed to correctly detect this, but until then,
# the following check should at least let perl compile and run.
# (This quick fix should be updated before 5.8.1.)
# To be defensive, reject all unknown versions, and all versions  > 2.2.9.
# A. Dougherty, June 3, 2002.
case "$d_gnulibc" in
$define)
	case "$gnulibc_version" in
	2.[01]*)  ;;
	2.2) ;;
	2.2.[0-9]) ;;
	*)  echo "But I will not snoop inside glibc $gnulibc_version stdio buffers."
		val="$undef"
		;;
	esac
	;;
esac
set d_stdstdio
eval $setvar

: Can _ptr be used as an lvalue?
case "$d_stdstdio$ptr_lval" in
$define$define) val=$define ;;
*) val=$undef ;;
esac
set d_stdio_ptr_lval
eval $setvar

: Can _cnt be used as an lvalue?
case "$d_stdstdio$cnt_lval" in
$define$define) val=$define ;;
*) val=$undef ;;
esac
set d_stdio_cnt_lval
eval $setvar


: test whether setting _ptr sets _cnt as a side effect
d_stdio_ptr_lval_sets_cnt="$undef"
d_stdio_ptr_lval_nochange_cnt="$undef"
case "$d_stdio_ptr_lval$d_stdstdio" in
$define$define)
	echo "Checking to see what happens if we set the stdio ptr..." >&4
$cat >try.c <<EOP
#include <stdio.h>
/* Can we scream? */
/* Eat dust sed :-) */
/* In the buffer space, no one can hear you scream. */
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
#define FILE_ptr(fp)	$stdio_ptr
#define FILE_cnt(fp)	$stdio_cnt
#include <sys/types.h>
int main() {
	FILE *fp = fopen("try.c", "r");
	int c;
	char *ptr;
	size_t cnt;
	if (!fp) {
	    puts("Fail even to read");
	    exit(1);
	}
	c = getc(fp); /* Read away the first # */
	if (c == EOF) {
	    puts("Fail even to read");
	    exit(1);
	}
	if (!(
		18 <= FILE_cnt(fp) &&
		strncmp(FILE_ptr(fp), "include <stdio.h>\n", 18) == 0
	)) {
		puts("Fail even to read");
		exit (1);
	}
	ptr = (char*) FILE_ptr(fp);
	cnt = (size_t)FILE_cnt(fp);

	FILE_ptr(fp) += 42;

	if ((char*)FILE_ptr(fp) != (ptr + 42)) {
		printf("Fail ptr check %p != %p", FILE_ptr(fp), (ptr + 42));
		exit (1);
	}
	if (FILE_cnt(fp) <= 20) {
		printf ("Fail (<20 chars to test)");
		exit (1);
	}
	if (strncmp(FILE_ptr(fp), "Eat dust sed :-) */\n", 20) != 0) {
		puts("Fail compare");
		exit (1);
	}
	if (cnt == FILE_cnt(fp)) {
		puts("Pass_unchanged");
		exit (0);
	}	
	if (FILE_cnt(fp) == (cnt - 42)) {
		puts("Pass_changed");
		exit (0);
	}
	printf("Fail count was %d now %d\n", cnt, FILE_cnt(fp));
	return 1;

d11176 1
a11176 1
EOP
d11178 27
a11204 10
	if eval $compile && $to try.c; then
 		case `$run ./try` in
		Pass_changed)
			echo "Increasing ptr in your stdio decreases cnt by the same amount.  Good." >&4
			d_stdio_ptr_lval_sets_cnt="$define" ;;
		Pass_unchanged)
			echo "Increasing ptr in your stdio leaves cnt unchanged.  Good." >&4
			d_stdio_ptr_lval_nochange_cnt="$define" ;;
		Fail*)
			echo "Increasing ptr in your stdio didn't do exactly what I expected.  We'll not be doing that then." >&4 ;;
d11206 13
a11218 39
			echo "It appears attempting to set ptr in your stdio is a bad plan." >&4 ;;
	esac
	else
		echo "It seems we can't set ptr in your stdio.  Nevermind." >&4
	fi
	$rm -f try.c try
	;;
esac

: see if _base is also standard
val="$undef"
case "$d_stdstdio" in
$define)
	$cat >try.c <<EOP
#include <stdio.h>
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
#define FILE_base(fp)	$stdio_base
#define FILE_bufsiz(fp)	$stdio_bufsiz
int main() {
	FILE *fp = fopen("try.c", "r");
	char c = getc(fp);
	if (
		19 <= FILE_bufsiz(fp) &&
		strncmp(FILE_base(fp), "#include <stdio.h>\n", 19) == 0
	)
		exit(0);
	exit(1);
}
EOP
	set try
	if eval $compile && $to try.c; then
		if $run ./try; then
			echo "And its _base field acts std."
			val="$define"
		else
			echo "But its _base field isn't std."
d11221 2
a11222 1
		echo "However, it seems to be lacking the _base field."
d11224 2
a11225 1
	$rm -f try.c try
d11227 9
a11235 12
esac
set d_stdiobase
eval $setvar

: see if fast_stdio exists
val="$undef"
case "$d_stdstdio:$d_stdio_ptr_lval" in
"$define:$define")
	case "$d_stdio_cnt_lval$d_stdio_ptr_lval_sets_cnt" in
	*$define*)
		echo "You seem to have 'fast stdio' to directly manipulate the stdio buffers." >& 4
		val="$define"
d11240 1
a11240 4
set d_faststdio
eval $setvar


a11260 2
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
a11261 1
#endif
a11327 4
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
a11866 4
	''|0) try='int gethostbyaddr_r(const void*, socklen_t, int, struct hostent*, char*, size_t, struct hostent**, int*);'
	./protochk "extern $try" $hdrs && gethostbyaddr_r_proto=I_TsISBWRE ;;
	esac
	case "$gethostbyaddr_r_proto" in
a12127 4
	''|0) try='int getnetbyaddr_r(uint32_t, int, struct netent*, char*, size_t, struct netent**, int*);'
	./protochk "extern $try" $hdrs && getnetbyaddr_r_proto=I_uISBWRE ;;
	esac
	case "$getnetbyaddr_r_proto" in
a12968 4
: see if ilogbl exists
set ilogbl d_ilogbl
eval $inlibc

d13008 1
a13008 1
$cat >isascii.c <<EOCP
a13010 4
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
d13257 1
a13257 83
	echo "and it returns ($mmaptype)." >&4
	;;
esac



: see if sqrtl exists
set sqrtl d_sqrtl
eval $inlibc

: see if scalbnl exists
set scalbnl d_scalbnl
eval $inlibc

: see if modfl exists
set modfl d_modfl
eval $inlibc

: see if prototype for modfl is available
echo " "
set d_modflproto modfl math.h
eval $hasproto

d_modfl_pow32_bug="$undef"

case "$d_longdbl$d_modfl" in
$define$define)
	$cat <<EOM
Checking to see whether your modfl() is okay for large values...
EOM
$cat >try.c <<EOCP
#include <math.h> 
#include <stdio.h>
EOCP
if $test "X$d_modflproto" != "X$define"; then
	$cat >>try.c <<EOCP
/* Sigh. many current glibcs provide the function, but do not prototype it.  */ 
long double modfl (long double, long double *);
EOCP
fi
$cat >>try.c <<EOCP
int main() {
    long double nv = 4294967303.15;
    long double v, w;
    v = modfl(nv, &w);         
#ifdef __GLIBC__
    printf("glibc");
#endif
    printf(" %"$sPRIfldbl" %"$sPRIfldbl" %"$sPRIfldbl"\n", nv, v, w);
    return 0;
}
EOCP
	case "$osname:$gccversion" in
	aix:)	saveccflags="$ccflags"
		ccflags="$ccflags -qlongdouble" ;; # to avoid core dump
	esac
	set try
	if eval $compile; then
		foo=`$run ./try`
		case "$foo" in
		*" 4294967303.150000 1.150000 4294967302.000000")
			echo >&4 "Your modfl() is broken for large values."
			d_modfl_pow32_bug="$define"
			case "$foo" in
			glibc)	echo >&4 "You should upgrade your glibc to at least 2.2.2 to get a fixed modfl()."
			;;
			esac
			;;
		*" 4294967303.150000 0.150000 4294967303.000000")
			echo >&4 "Your modfl() seems okay for large values."
			;;
		*)	echo >&4 "I don't understand your modfl() at all."
			d_modfl="$undef"
			;;
		esac
		$rm -f try.* try core core.try.*
	else
		echo "I cannot figure out whether your modfl() is okay, assuming it isn't."
		d_modfl="$undef"
	fi
	case "$osname:$gccversion" in
	aix:)	ccflags="$saveccflags" ;; # restore
	esac
a13260 30
if $test "$uselongdouble" = "$define"; then
    message=""
    if $test "$d_sqrtl" != "$define"; then
	message="$message sqrtl"
    fi
    if $test "$d_modfl" != "$define"; then
	if $test "$d_aintl:$d_copysignl" = "$define:$define"; then
	    echo "You have both aintl and copysignl, so I can emulate modfl."
	else
	    message="$message modfl"
	fi
    fi
    if $test "$d_frexpl" != "$define"; then
	if $test "$d_ilogbl:$d_scalbnl" = "$define:$define"; then
	    echo "You have both ilogbl and scalbnl, so I can emulate frexpl."
	else
	    message="$message frexpl"
	fi
    fi

    if $test "$message" != ""; then
	$cat <<EOM >&4

*** You requested the use of long doubles but you do not seem to have
*** the following mathematical functions needed for long double support:
***    $message
*** Please rerun Configure without -Duselongdouble and/or -Dusemorebits.
*** Cannot continue, aborting.

EOM
a13261 3
	exit 1
    fi
fi
d13355 1
a13355 1
	$cat >try.c <<EOCP
a13356 4
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
a13595 4
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
a13801 4
: see if pthread_attr_setscope exists
set pthread_attr_setscope d_pthread_attr_setscope
eval $inlibc

d13890 1
a13890 9
	./protochk "extern $try" $hdrs && random_r_proto=I_iS ;;
	esac
	case "$random_r_proto" in
	''|0) try='int random_r(long*, struct random_data*);'
	./protochk "extern $try" $hdrs && random_r_proto=I_lS ;;
	esac
	case "$random_r_proto" in
	''|0) try='int random_r(struct random_data*, int32_t*);'
	./protochk "extern $try" $hdrs && random_r_proto=I_St ;;
d14332 1
a14332 1
$rm -f try try.c
d14339 1
d14365 2
a14366 5
    : see whether semctl IPC_STAT can use union semun
    val="$undef"
    case "$d_semctl_semun" in
    '')
      $cat > try.c <<END
d14412 9
a14420 10
      set try
      if eval $compile; then
	  xxx=`$run ./try`
          case "$xxx" in
          semun) val="$define" ;;
          esac
      fi
      $rm -f try try.c
      ;;
    esac
d14434 1
a14434 4
    val="$undef"
    case "$d_semctl_semid_ds" in
    '')
      $cat > try.c <<'END'
d14470 9
a14478 10
      set try
      if eval $compile; then
          xxx=`$run ./try`
          case "$xxx" in
          semid_ds) val="$define" ;;
          esac
      fi
      $rm -f try try.c
      ;;
    esac
d15068 1
a15068 1
	$cat > try.c <<EOP
a15071 4
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
d15103 1
a15103 1
	$cat >try.c <<EOP
a15104 4
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
d15232 189
a15420 5
		;;
	esac
	;;
*)	srandom_r_proto=0
	;;
d15422 2
d15425 7
a15431 4
: see if prototype for setresgid is available
echo " "
set d_sresgproto setresgid $i_unistd unistd.h
eval $hasproto
a15432 4
: see if prototype for setresuid is available
echo " "
set d_sresuproto setresuid $i_unistd unistd.h
eval $hasproto
d15434 37
a15470 3
: see if sys/stat.h is available
set sys/stat.h i_sysstat
eval $inhdr
d15472 1
d15474 22
a15495 5
: see if stat knows about block sizes
echo " "
echo "Checking to see if your struct stat has st_blocks field..." >&4
set d_statblks stat st_blocks $i_sysstat sys/stat.h
eval $hasfield
d15497 21
a15517 18

: see if this is a sys/vfs.h system
set sys/vfs.h i_sysvfs
eval $inhdr


: see if this is a sys/statfs.h system
set sys/statfs.h i_sysstatfs
eval $inhdr


echo " "
echo "Checking to see if your system supports struct statfs..." >&4
set d_statfs_s statfs $i_systypes sys/types.h $i_sysparam sys/param.h $i_sysmount sys/mount.h $i_sysvfs sys/vfs.h $i_sysstatfs sys/statfs.h
eval $hasstruct
case "$d_statfs_s" in
"$define")      echo "Yes, it does."   ;;
*)              echo "No, it doesn't." ;;
d15520 31
a15550 13


: see if struct statfs knows about f_flags
case "$d_statfs_s" in
define)	
	echo " "
	echo "Checking to see if your struct statfs has f_flags field..." >&4
	set d_statfs_f_flags statfs f_flags $i_systypes sys/types.h $i_sysparam sys/param.h $i_sysmount sys/mount.h $i_sysvfs sys/vfs.h $i_sysstatfs sys/statfs.h
	eval $hasfield
	;;
*)	val="$undef"
	set d_statfs_f_flags
	eval $setvar
d15553 2
a15554 4
case "$d_statfs_f_flags" in
"$define")      echo "Yes, it does."   ;;
*)              echo "No, it doesn't." ;;
esac
a16184 4
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
a16246 4
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
d16554 1
a16554 1
: how do we concatenate cpp tokens here?
d16556 1
a16556 1
echo "Checking to see how your cpp does stuff like concatenate tokens..." >&4
d16575 2
a16576 2
Hmm, I don't seem to be able to concatenate tokens with your cpp.
You're going to have to edit the values of CAT[2-5] in config.h...
a16597 4
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
a16935 4
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
a17251 4
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
d17962 1
a17962 5
$cat > foo.c <<EOP
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
d18052 1
a18052 2
'') safebits=`expr $ptrsize \* 8`
    case "$d_select" in
a18083 4
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
d18090 1
a18090 1
    char *s = malloc(NBYTES);
a18095 2
    if (!s)
	exit(1);
d18099 1
a18099 1
      exit(2);
d18102 1
a18102 1
      exit(3);
a18109 1
    free(s);
d18120 1
a18120 1
I'll play safe and guess it is $safebits bits.
d18122 2
a18123 2
				selectminbits=$safebits
				bits="$safebits bits"
d18132 1
a18132 2
			12345678)	dflt=64 ;;
			1234)		dflt=32 ;;
d18142 1
a18142 1
		selectminbits=$safebits
d18189 1
a18189 1
$cat > signal.c <<EOCP
a18191 4
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
d18266 1
a18266 1
($1 !~ /^NSIG$/) && (NF == 2) && ($2 ~ /^[0-9][0-9]*$/) {
a18418 4
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
a18521 4
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
a18603 4
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
a19401 33
case "$onlyextensions" in
'') ;;
*)  keepextensions=''
    echo "You have requested that only certains extensions be included..." >&4
    for i in $onlyextensions; do
        case " $avail_ext " in
        *" $i "*)
            echo "Keeping extension $i."
            keepextensions="$keepextensions $i"
            ;;
        *) echo "Ignoring extension $i." ;;
        esac
    done
    avail_ext="$keepextensions"
    ;;
esac

case "$noextensions" in
'') ;;
*)  keepextensions=''
    echo "You have requested that certain extensions be ignored..." >&4
    for i in $avail_ext; do
        case " $noextensions " in
        *" $i "*) echo "Ignoring extension $i." ;;
        *) echo "Keeping extension $i.";
           keepextensions="$keepextensions $i"
           ;;
        esac
    done
    avail_ext="$keepextensions"
    ;;
esac

d19427 1
a19427 13
	'')
		: Exclude those listed in static_ext
		dflt=''
		for xxx in $avail_ext; do
			case " $static_ext " in
			*" $xxx "*) ;;
			*) dflt="$dflt $xxx" ;;
			esac
		done
		set X $dflt
		shift
		dflt="$*"
		;;
a19541 17
# Sanity check:  We require an extension suitable for use with
# AnyDBM_File, as well as Fcntl and IO.  (Failure to have these
# should show up as failures in the test suite, but it's helpful to
# catch them now.) The 'extensions' list is normally sorted
# alphabetically, so we need to accept either
#    DB_File ... Fcntl ... IO  ....
# or something like
#    Fcntl ... NDBM_File ... IO  ....
case " $extensions"  in
*"_File "*" Fcntl "*" IO "*) ;; # DB_File
*" Fcntl "*"_File "*" IO "*) ;; # GDBM_File
*" Fcntl "*" IO "*"_File "*) ;; # NDBM_File
*) echo "WARNING: Extensions DB_File or *DBM_File, Fcntl, and IO not configured." >&4
   echo "WARNING: The Perl you are building will be quite crippled." >& 4
   ;;
esac

a19726 1
d_aintl='$d_aintl'
a19748 1
d_copysignl='$d_copysignl'
a19781 1
d_faststdio='$d_faststdio'
a19872 1
d_ilogbl='$d_ilogbl'
a19909 1
d_modflproto='$d_modflproto'
a19941 1
d_pthread_attr_setscope='$d_pthread_attr_setscope'
a19966 1
d_scalbnl='$d_scalbnl'
a20089 1
d_vendorscript='$d_vendorscript'
a20143 1
gccansipedantic='$gccansipedantic'
a20181 4
html1dir='$html1dir'
html1direxp='$html1direxp'
html3dir='$html3dir'
html3direxp='$html3direxp'
a20278 2
installhtml1dir='$installhtml1dir'
installhtml3dir='$installhtml3dir'
a20286 2
installsitehtml1dir='$installsitehtml1dir'
installsitehtml3dir='$installsitehtml3dir'
a20287 3
installsiteman1dir='$installsiteman1dir'
installsiteman3dir='$installsiteman3dir'
installsitescript='$installsitescript'
a20291 2
installvendorhtml1dir='$installvendorhtml1dir'
installvendorhtml3dir='$installvendorhtml3dir'
a20292 3
installvendorman1dir='$installvendorman1dir'
installvendorman3dir='$installvendorman3dir'
installvendorscript='$installvendorscript'
a20346 1
mistrustnm='$mistrustnm'
a20470 4
sitehtml1dir='$sitehtml1dir'
sitehtml1direxp='$sitehtml1direxp'
sitehtml3dir='$sitehtml3dir'
sitehtml3direxp='$sitehtml3direxp'
a20473 4
siteman1dir='$siteman1dir'
siteman1direxp='$siteman1direxp'
siteman3dir='$siteman3dir'
siteman3direxp='$siteman3direxp'
a20475 2
sitescript='$sitescript'
sitescriptexp='$sitescriptexp'
a20540 1
usefaststdio='$usefaststdio'
a20569 4
vendorhtml1dir='$vendorhtml1dir'
vendorhtml1direxp='$vendorhtml1direxp'
vendorhtml3dir='$vendorhtml3dir'
vendorhtml3direxp='$vendorhtml3direxp'
a20572 4
vendorman1dir='$vendorman1dir'
vendorman1direxp='$vendorman1direxp'
vendorman3dir='$vendorman3dir'
vendorman3direxp='$vendorman3direxp'
a20574 2
vendorscript='$vendorscript'
vendorscriptexp='$vendorscriptexp'
@


1.1.1.7
log
@perl 5.8.3 from CPAN
@
text
@d23 1
a23 1
# Generated on Fri Dec  5 12:57:38 MET 2003 [metaconfig 3.0 PL70]
a1211 11
ccname=''
ccversion=''
perllibs=''
: set useposix=false in your hint file to disable the POSIX extension.
useposix=true
: set useopcode=false in your hint file to disable the Opcode extension.
useopcode=true
: Trailing extension.  Override this in a hint file, if needed.
: Extra object files, if any, needed on this platform.
archobjs=''
archname=''
d1220 6
d1249 10
a1258 3
siteman1dir=''
siteman3dir=''
sitescript=''
d1265 1
a1267 3
: full support for void wanted by default
defvoidused=15

d3676 2
d3681 4
a3684 6
if $test -f usethreads.cbu; then
    echo "Your platform has some specific hints regarding threaded builds, using them..."
    . ./usethreads.cbu
else
    case "$usethreads" in
	"$define"|true|[yY]*)
d3686 1
a3686 1
(Your platform does not have any specific hints for threaded builds.
d3689 1
d3691 1
a3691 2
    esac
fi
d4549 2
d4554 4
a4557 6
if $test -f uselongdouble.cbu; then
    echo "Your platform has some specific hints regarding long doubles, using them..."
    . ./uselongdouble.cbu
else
    case "$uselongdouble" in
	$define)
d4559 1
a4559 1
(Your platform does not have any specific hints for long doubles.)
d4561 1
d4563 1
a4563 2
    esac
fi
d5450 2
d5456 1
a5456 1
	echo "Your platform has some specific hints regarding 64-bit integers, using them..."
a5458 2
case "$use64bitint" in
"$define"|true|[yY]*)
d5468 2
d5474 1
a5474 1
	echo "Your platform has some specific hints regarding 64-bit builds, using them..."
a5476 2
case "$use64bitall" in
"$define"|true|[yY]*)
d8855 2
a8859 6
if $test -f uselargefiles.cbu; then
	echo "Your platform has some specific hints regarding large file builds, using them..."
	. ./uselargefiles.cbu
fi
case "$uselargefiles" in
"$define")
d8861 2
a16955 1
    buf[4] = 0;
d16958 2
a16959 1
    buf[7] = 1;
@


1.1.1.8
log
@Import of stock perl 5.8.5
@
text
@d21 1
a21 1
# $Id: Configure,v 1.13 2004/04/07 21:32:58 millert Exp $
d23 1
a23 1
# Generated on Wed May 12 13:00:30 METDST 2004 [metaconfig 3.0 PL70]
a944 1
usemallocwrap=''
d1176 2
d2879 6
a2884 6
*)	# There is a discontinuity in EBCDIC between 'R' and 'S'
	# (0xd9 and 0xe2), therefore that is a nice testing point.
	if test "X$up" = X -o "X$low" = X; then
	    case "`echo RS | $tr '[R-S]' '[r-s]' 2>/dev/null`" in
	    rs) up='[A-Z]'
		low='[a-z]'
d2887 1
a2887 1
	fi
d2889 2
a2890 2
	    case "`echo RS | $tr R-S r-s 2>/dev/null`" in
	    rs) up='A-Z'
d2894 1
a2894 1
	fi
d2896 2
a2897 2
	    case "`echo RS | od -x 2>/dev/null`" in
	    *D9E2*|*d9e2*)
d2900 3
a2902 3
		    case "`echo RS | $tr '[A-IJ-RS-Z]' '[a-ij-rs-z]' 2>/dev/null`" in
		    rs) up='[A-IJ-RS-Z]'
			low='[a-ij-rs-z]'
d2907 3
a2909 3
		    case "`echo RS | $tr A-IJ-RS-Z a-ij-rs-z 2>/dev/null`" in
		    rs) up='A-IJ-RS-Z'
			low='a-ij-rs-z'
d2917 2
a2918 2
case "`echo RS | $tr \"$up\" \"$low\" 2>/dev/null`" in
rs)
d3106 1
a3106 1
		dgux)	osname=dgux 
d3114 2
a3115 4
		genix)	osname=genix ;;
		gnu)	osname=gnu
			osvers="$3" ;;
		hp*)	osname=hpux 
d3118 1
a3118 1
		irix*)	osname=irix
d3125 1
a3125 1
		linux)	osname=linux
d3130 1
a3130 1
		MiNT)	osname=mint
d3461 1
d3464 1
a3464 1
	cf_by=`(logname) 2>/dev/null`
d3466 1
a3466 5
	"")
		cf_by=`(whoami) 2>/dev/null`
		case "$cf_by" in
		"") cf_by=unknown ;;
		esac ;;
a4706 1
			# Interactive Systems (ISC) POSIX mode.
d4720 1
a4720 1
			*strict-aliasing*)
a4729 20
	# For gcc, adding -pipe speeds up compilations for some, but apparently
	# some assemblers can't read from stdin.  (It also slows down compilations
	# in other cases, but those are apparently rarer these days.)  AD 5/2004.
	case "$gccversion" in
	?*)	echo " "
		echo "Checking if your compiler accepts -pipe" 2>&1
		echo 'int main(void) { return 0; }' > gcctest.c
		if $cc -O2 -pipe -o gcctest gcctest.c; then
			echo "Yes, it does." 2>&1
			case "$ccflags" in
			*-pipe*)
				echo "Leaving current flags $ccflags alone." 2>&1
				;;
			*) dflt="$dflt -pipe" ;;
			esac
		else
			echo "Nope, it doesn't, but that's ok." 2>&1
		fi
		;;
	esac
d4741 2
a4742 2
			*" -I$thisincl "*);;
			*) dflt="$dflt -I$thisincl ";;
d4873 1
a4873 1
		case "$dflt " in
d5453 1
a5453 1
if $test -f use64bitint.cbu; then
d5455 2
a5456 2
	. ./use64bitint.cbu
fi
d5471 1
a5471 1
if $test -f use64bitall.cbu; then
d5473 2
a5474 2
	. ./use64bitall.cbu
fi
d5491 1
a5491 1
*** but none can be found.
d5758 1
a5758 1
if test $afs = "true"; then
a6258 21
: determine whether to use malloc wrapping
echo " "
case "$usemallocwrap" in
[yY]*|true|$define)	dflt='y' ;;
[nN]*|false|$undef)	dflt='n' ;;
*)	case "$usedevel" in
	[yY]*|true|$define)	dflt='y' ;;
	*) dflt='n' ;;
	esac
	;;
esac
rp="Do you wish to wrap malloc calls to protect against potential overflows?"
. ./myread
usemallocwrap="$ans"
case "$ans" in
y*|true)
	usemallocwrap="$define" ;;
*)
	usemallocwrap="$undef" ;;
esac

d6876 1
a6876 1
[Nn]one|''|' '|$undef) inc_version_list=' ' ;;
d7626 5
a7630 3
	    linux|hpux)	dflt='-Wl,-E' ;;
	    next|sunos)	dflt='none' ;;
	    *)		dflt='none' ;;
d10059 1
a10059 1
	   sign change.  We don't want that.  We want to mimic SPARC
d18646 6
d21212 1
a21366 1
usemallocwrap='$usemallocwrap'
d21414 1
@


1.1.1.9
log
@perl 5.8.6 from CPAN
@
text
@d21 1
a21 1
# $Id: Head.U,v 3.0.1.9 1997/02/28 15:02:09 ram Exp $
d23 1
a23 1
# Generated on Fri Jul 16 12:49:13 METDST 2004 [metaconfig 3.0 PL70]
d94 1
a94 1
paths="$paths /bsd4.3/usr/bin /usr/bsd /bsd43/bin /opt/ansic/bin /usr/ccs/bin"
d3083 1
a3083 3
			# oslevel can fail with:
			# oslevel: Unable to acquire lock.
			*not\ found) osvers="$4"."$3" ;;
d5783 1
a5783 1
if $afs; then
@


1.1.1.10
log
@perl 5.8.8 import
@
text
@a19 6
#
# Though this script was generated by metaconfig, it is OK to send
# patches against it. It's up to the Configure pumpkin to backport
# the patch to the metaunits if it is accepted.
# See Porting/pumpkin.pod for more information on metaconfig.
#
d23 1
a23 1
# Generated on Sun Jan  1 11:31:40 CET 2006 [metaconfig 3.0 PL70]
d342 1
a342 7
d_attribute_format=''
d_attribute_malloc=''
d_attribute_nonnull=''
d_attribute_noreturn=''
d_attribute_pure=''
d_attribute_unused=''
d_attribute_warn_unused_result=''
a352 1
d_clearenv=''
a430 1
d_futimes=''
a527 1
d_libm_lib_version=''
a539 2
d_malloc_good_size=''
d_malloc_size=''
a665 1
usesitecustomize=''
a680 1
d_sprintf_returns_strlen=''
a714 2
d_strlcat=''
d_strlcpy=''
a748 1
d_unsetenv=''
a994 1
d_nv_zero_is_allbits_zero=''
d4744 1
a4744 1
		if $cc -pipe -o gcctest gcctest.c; then
a4754 14

		echo "Checking if your compiler accepts -Wdeclaration-after-statement" 2>&1
		echo 'int main(void) { return 0; }' > gcctest.c
		if $cc -Wdeclaration-after-statement -o gcctest gcctest.c; then
			echo "Yes, it does." 2>&1
			case "$ccflags" in
			*-Wdeclaration-after-statement*)
				echo "Leaving current flags $ccflags alone." 2>&1
				;;
			*) dflt="$dflt -Wdeclaration-after-statement" ;;
			esac
		else
			echo "Nope, it doesn't, but that's ok." 2>&1
		fi
d7105 1
a7105 1
	*linux*|gnu*)
d7627 1
a7627 1
			linux|irix*|gnu*)	dflt='-shared' ;;
d7674 1
a7674 1
	    linux|hpux|gnu*)	dflt='-Wl,-E' ;;
d7735 1
a7735 1
executable, but it may have a noticeable effect on performance.  The
d7771 1
a7771 1
		linux*|gnu*)  # ld won't link with a bare -lperl otherwise.
d7855 1
a7855 1
	freebsd|netbsd|openbsd|interix)
d7858 1
a7858 1
	bsdos|linux|irix*|dec_osf|gnu*)
d9857 1
a9857 3
: Look for GCC-style attribute format
case "$d_attribute_format" in
'')
d9859 1
a9859 1
echo "Checking whether your compiler can handle __attribute__((format)) ..." >&4
d9862 1
a9862 1
void my_special_printf(char* pat,...) __attribute__((__format__(__printf__,1,2)));
d9866 1
a9866 1
		echo "Your C compiler doesn't support __attribute__((format))."
d9869 1
a9869 1
		echo "Your C compiler supports __attribute__((format))."
d9876 1
a9876 172
;;
*) val="$d_attribute_format" ;;
esac
set d_attribute_format
eval $setvar
$rm -f attrib*

: Look for GCC-style attribute malloc
case "$d_attribute_malloc" in
'')
echo " "
echo "Checking whether your compiler can handle __attribute__((malloc)) ..." >&4
$cat >attrib.c <<'EOCP'
#include <stdio.h>
char *go_get_some_memory( int how_many_bytes ) __attribute__((malloc));
EOCP
if $cc $ccflags -c attrib.c >attrib.out 2>&1 ; then
	if $contains 'warning' attrib.out >/dev/null 2>&1; then
		echo "Your C compiler doesn't support __attribute__((malloc))."
		val="$undef"
	else
		echo "Your C compiler supports __attribute__((malloc))."
		val="$define"
	fi
else
	echo "Your C compiler doesn't seem to understand __attribute__ at all."
	val="$undef"
fi
;;
*) val="$d_attribute_malloc" ;;
esac
set d_attribute_malloc
eval $setvar
$rm -f attrib*

: Look for GCC-style attribute nonnull
case "$d_attribute_nonnull" in
'')
echo " "
echo "Checking whether your compiler can handle __attribute__((nonnull(1))) ..." >&4
$cat >attrib.c <<'EOCP'
#include <stdio.h>
void do_something (char *some_pointer,...) __attribute__((nonnull(1)));
EOCP
if $cc $ccflags -c attrib.c >attrib.out 2>&1 ; then
	if $contains 'warning' attrib.out >/dev/null 2>&1; then
		echo "Your C compiler doesn't support __attribute__((nonnull))."
		val="$undef"
	else
		echo "Your C compiler supports __attribute__((nonnull))."
		val="$define"
	fi
else
	echo "Your C compiler doesn't seem to understand __attribute__ at all."
	val="$undef"
fi
;;
*) val="$d_attribute_nonnull" ;;
esac
set d_attribute_nonnull
eval $setvar
$rm -f attrib*

: Look for GCC-style attribute noreturn
case "$d_attribute_noreturn" in
'')
echo " "
echo "Checking whether your compiler can handle __attribute__((noreturn)) ..." >&4
$cat >attrib.c <<'EOCP'
#include <stdio.h>
void fall_over_dead( void ) __attribute__((noreturn));
EOCP
if $cc $ccflags -c attrib.c >attrib.out 2>&1 ; then
	if $contains 'warning' attrib.out >/dev/null 2>&1; then
		echo "Your C compiler doesn't support __attribute__((noreturn))."
		val="$undef"
	else
		echo "Your C compiler supports __attribute__((noreturn))."
		val="$define"
	fi
else
	echo "Your C compiler doesn't seem to understand __attribute__ at all."
	val="$undef"
fi
;;
*) val="$d_attribute_noreturn" ;;
esac
set d_attribute_noreturn
eval $setvar
$rm -f attrib*

: Look for GCC-style attribute pure
case "$d_attribute_pure" in
'')
echo " "
echo "Checking whether your compiler can handle __attribute__((pure)) ..." >&4
$cat >attrib.c <<'EOCP'
#include <stdio.h>
int square( int n ) __attribute__((pure));
EOCP
if $cc $ccflags -c attrib.c >attrib.out 2>&1 ; then
	if $contains 'warning' attrib.out >/dev/null 2>&1; then
		echo "Your C compiler doesn't support __attribute__((pure))."
		val="$undef"
	else
		echo "Your C compiler supports __attribute__((pure))."
		val="$define"
	fi
else
	echo "Your C compiler doesn't seem to understand __attribute__ at all."
	val="$undef"
fi
;;
*) val="$d_attribute_pure" ;;
esac
set d_attribute_pure
eval $setvar
$rm -f attrib*

: Look for GCC-style attribute unused
case "$d_attribute_unused" in
'')
echo " "
echo "Checking whether your compiler can handle __attribute__((unused)) ..." >&4
$cat >attrib.c <<'EOCP'
#include <stdio.h>
int do_something( int dummy __attribute__((unused)), int n );
EOCP
if $cc $ccflags -c attrib.c >attrib.out 2>&1 ; then
	if $contains 'warning' attrib.out >/dev/null 2>&1; then
		echo "Your C compiler doesn't support __attribute__((unused))."
		val="$undef"
	else
		echo "Your C compiler supports __attribute__((unused))."
		val="$define"
	fi
else
	echo "Your C compiler doesn't seem to understand __attribute__ at all."
	val="$undef"
fi
;;
*) val="$d_attribute_unused" ;;
esac
set d_attribute_unused
eval $setvar
$rm -f attrib*

: Look for GCC-style attribute warn_unused_result
case "$d_attribute_warn_unused_result" in
'')
echo " "
echo "Checking whether your compiler can handle __attribute__((warn_unused_result)) ..." >&4
$cat >attrib.c <<'EOCP'
#include <stdio.h>
int I_will_not_be_ignored(void) __attribute__((warn_unused_result));
EOCP
if $cc $ccflags -c attrib.c >attrib.out 2>&1 ; then
	if $contains 'warning' attrib.out >/dev/null 2>&1; then
		echo "Your C compiler doesn't support __attribute__((warn_unused_result))."
		val="$undef"
	else
		echo "Your C compiler supports __attribute__((warn_unused_result))."
		val="$define"
	fi
else
	echo "Your C compiler doesn't seem to understand __attribute__ at all."
	val="$undef"
fi
;;
*) val="$d_attribute_warn_unused_result" ;;
esac
set d_attribute_warn_unused_result
a10293 4
: see if clearenv exists
set clearenv d_clearenv
eval $inlibc

a10823 1
val=$undef
a12337 35
d_futimes="$undef"
: check for a working futimes
echo " "
echo "Checking for a working futimes()" >&4
$cat >try.c <<EOCP
#include <stdio.h>
#include <sys/time.h>
#include <errno.h>
#include <fcntl.h>

int main ()
{
    int fd, rv;
    fd = open ("try.c", O_RDWR);
    if (-1 == fd) exit (1);
    rv = futimes (fd, NULL);
    exit (rv == -1 ? errno : 0);
}
EOCP
set try
if eval $compile; then
    `$run ./try`
    rc=$?
    case "$rc" in
	0)  echo "Yes, it does" >&4
	    d_futimes="$define"
	    ;;
	*)  echo "No, it has futimes, but it isn't working ($rc) (probably harmless)\n" >&4
	    ;;
    esac
else
    echo "No, it does not (probably harmless)\n" >&4
fi
$rm -f try.* try core core.try.*

a13936 32
: see if this is a math.h system
set math.h i_math
eval $inhdr

d_libm_lib_version="$undef"
case $i_math in
    $define)
	: check to see if math.h defines _LIB_VERSION
	echo " "
	echo "Checking to see if your libm supports _LIB_VERSION..." >&4
	$cat >try.c <<EOCP
#include <unistd.h>
#include <math.h>
int main (int argc, char *argv[])
{
    printf ("%d\n", _LIB_VERSION);
    return (0);
    } /* main */
EOCP
	set try
	if eval $compile; then
	    foo=`$run ./try`
	    echo "Yes, it does ($foo)" >&4
	    d_libm_lib_version="$define"
	else
	    echo "No, it does not (probably harmless)\n" >&4
	    fi
	$rm -f try.* try core core.try.*
	;;

    esac

a14006 8
: see if malloc_size exists
set malloc_size d_malloc_size
eval $inlibc

: see if malloc_size_good exists
set malloc_good_size d_malloc_good_size
eval $inlibc

d14104 1
a14104 1
set d_modflproto modfl $i_math math.h
a14600 122
$echo "Checking whether NV 0.0 is all bits zero in memory..." >&4
: volatile so that the compiler has to store it out to memory.
if test X"$d_volatile" = X"$define"; then
	volatile=volatile
fi
$cat <<EOP >try.c
#include <stdio.h>
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
#$i_string I_STRING
#ifdef I_STRING
#  include <string.h>
#else
#  include <strings.h>
#endif
#include <sys/types.h>
#include <signal.h>
#ifdef SIGFPE
$volatile int bletched = 0;
$signal_t blech(s) int s; { bletched = 1; }
#endif

int checkit($nvtype d, char *where) {
    unsigned char *p = (char *)&d;
    unsigned char *end = p + sizeof(d);
    int fail = 0;

    while (p < end)
	fail += *p++;

    if (!fail)
	return 0;

    p = (char *)&d;
    printf("No - %s: 0x", where);
    while (p < end)
	printf ("%02X", *p++);
    printf("\n");
    return 1;
}

int main(int argc, char **argv) {
    $nvtype d = 0.0;
    int fail = 0;
    fail += checkit(d, "0.0");

    /* The compiler shouldn't be assuming that bletched is 0  */
    d = bletched;

    fail += checkit(d, "bleched");

#ifdef SIGFPE
    signal(SIGFPE, blech);
#endif

    /* Paranoia - the compiler should have no way of knowing that ANSI says
       that argv[argc] will always be NULL.  Actually, if it did assume this it
       would be buggy, as this is C and main() can be called from elsewhere in
       the program.  */
    d = argv[argc] ? 1 : 0;

    if (d) {
	printf("Odd argv[argc]=%p, d=%g\n", argv[argc], d);
    }

    fail += checkit(d, "ternary");

    memset(&d, sizeof(d), argv[argc] ? 1 : 0);

    if (d != 0.0) {
	printf("No - memset doesn't give 0.0\n");
	/* This might just blow up:  */
	printf("(gives %g)\n", d);
	return 1;
    }
    
#ifdef SIGFPE
    if (bletched) {
	printf("No - something bleched\n");
	return 1;
    }
#endif
    if (fail) {
      printf("No - %d fail(s)\n", fail);
      return 1;
    }
    printf("Yes\n");
    return 0;
}
EOP
set try

d_nv_zero_is_allbits_zero="$undef"
if eval $compile; then
    xxx="`$run ./try`"
    case "$?" in
	0)
	    case "$xxx" in
		Yes)  cat >&4 <<EOM
0.0 is represented as all bits zero in memory
EOM
		    d_nv_zero_is_allbits_zero="$define"
		    ;;
		*)  cat >&4 <<EOM
0.0 is not represented as all bits zero in memory
EOM
		    d_nv_zero_is_allbits_zero="$undef"
		    ;;
	    esac
	    ;;
	*)  cat >&4 <<EOM
0.0 is not represented as all bits zero in memory
EOM
	    d_nv_zero_is_allbits_zero="$undef"
	    ;;
    esac
fi

$rm -f try.* try

a16133 62
: see if sprintf returns the length of the string in the buffer as per ANSI
$echo "Checking whether sprintf returns the length of the string..." >&4
$cat <<EOP >try.c
#include <stdio.h>
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
#$i_string I_STRING
#ifdef I_STRING
#  include <string.h>
#else
#  include <strings.h>
#endif
#$i_math I_MATH
#ifdef I_MATH
#include <math.h>
#endif

char buffer[256];

int check (size_t expect, int test) {
  size_t got = strlen(buffer);
  if (expect == got)
    return 0;

  printf("expected %ld, got %ld in test %d '%s'\n", (long) expect, (long) got,
       test, buffer);
  exit (test);
}

int main(int argc, char **argv) {
  int test = 0;

  check(sprintf(buffer, ""), ++test);
  check(sprintf(buffer, "%s %s", "perl", "rules"), ++test);
  check(sprintf(buffer, "I like %g", atan2(0,-1)), ++test);

  return 0;
}
EOP
set try

d_sprintf_returns_strlen="$undef"
if eval $compile; then
    xxx="`$run ./try`"
    case "$?" in
	0) cat >&4 <<EOM
sprintf returns the length of the string (as ANSI says it should)
EOM
	d_sprintf_returns_strlen="$define"
	;;
	*) cat >&4 <<EOM
sprintf does not return the length of the string (how old is this system?)
EOM
	d_sprintf_returns_strlen="$undef"
        ;;
    esac
fi

$rm -f try.* try

a16431 8
: see if strlcat exists
set strlcat d_strlcat
eval $inlibc

: see if strlcpy exists
set strlcpy d_strlcpy
eval $inlibc

a17079 4
: see if unsetenv exists
set unsetenv d_unsetenv
eval $inlibc

d18712 1
a18712 3
	if [ "X$ranlib" = "X" ]; then
	    ranlib=":"
	fi
d19319 1
a19319 2
echo '#include <stdio.h>' > stdio.c
$cppstdin $cppminus < stdio.c > stdioh
d19327 3
a19329 1
$rm -f stdio.* stdioh
a19464 10

case "$usesitecustomize" in
    $define|true|[Yy]*)
	usesitecustomize="$define"
	;;
    *)
	usesitecustomize="$undef"
	;;
    esac

d19525 4
d19613 1
a19613 1
alliant alpha am29000 AM29000 AMD64 amd64 amiga AMIGAOS AMIX
d19619 1
a19619 1
CYGWIN DECC DGUX DGUX_SOURCE DJGPP dmert DOLPHIN DPX2 DSO
d19671 1
a19671 1
Utek UTek UTS UWIN uxpm uxps vax venix VMESA vms x86_64 xenix Xenix286
a19705 10
#if cpp_stuff == 1
#define STRINGIFY(a)    "a"
#endif
#if cpp_stuff == 42
#define StGiFy(a)  #a
#define STRINGIFY(a)    StGiFy(a)
#endif
#if $cpp_stuff != 1 && $cpp_stuff != 42
#   include "Bletch: How does this C preprocessor stringify macros?"
#endif
d19712 4
a19715 4
    printf "#ifdef %s\nprintf(\"%s=%%s\\n\", STRINGIFY(%s));\n#endif\n", $1, $1, $1
    printf "#ifdef _%s\nprintf(\"_%s=%%s\\n\", STRINGIFY(_%s));\n#endif\n", $1, $1, $1
    printf "#ifdef __%s\nprintf(\"__%s=%%s\\n\", STRINGIFY(__%s));\n#endif\n", $1, $1, $1
    printf "#ifdef __%s__\nprintf(\"__%s__=%%s\\n\", STRINGIFY(__%s__));\n#endif\n", $1, $1, $1
d19725 1
a19725 1
$cc -o try -Dcpp_stuff=$cpp_stuff $optimize \$ccflags $ldflags try.c $libs && $run ./try | $sed 's/ /\\\\ /g'
d19761 5
a19765 3
$comm -13 Cppsym.true ccsym.list >ccsym.own
$comm -12 Cppsym.true ccsym.list >ccsym.com
$comm -23 Cppsym.true ccsym.list >ccsym.cpp
d20559 1
a20559 7
d_attribute_format='$d_attribute_format'
d_attribute_malloc='$d_attribute_malloc'
d_attribute_nonnull='$d_attribute_nonnull'
d_attribute_noreturn='$d_attribute_noreturn'
d_attribute_pure='$d_attribute_pure'
d_attribute_unused='$d_attribute_unused'
d_attribute_warn_unused_result='$d_attribute_warn_unused_result'
a20572 1
d_clearenv='$d_clearenv'
a20640 1
d_futimes='$d_futimes'
a20713 1
d_libm_lib_version='$d_libm_lib_version'
a20722 2
d_malloc_good_size='$d_malloc_good_size'
d_malloc_size='$d_malloc_size'
a20758 1
d_nv_zero_is_allbits_zero='$d_nv_zero_is_allbits_zero'
a20858 1
d_sprintf_returns_strlen='$d_sprintf_returns_strlen'
a20881 2
d_strlcat='$d_strlcat'
d_strlcpy='$d_strlcpy'
a20916 1
d_unsetenv='$d_unsetenv'
a21416 1
usesitecustomize='$usesitecustomize'
@


1.1.1.11
log
@import perl 5.10.0 from CPAN
@
text
@d29 1
a29 1
# Generated on Mon Oct  8 10:22:27 CEST 2007 [metaconfig 3.0 PL70]
a67 12
if test ! -c /dev/null ; then
	cat >&4 <<EOF
***
*** I'm sorry, but /dev/null appears to be a file rather than a device.
*** Please consult your operating sytem's notes for making a device
*** in /dev.
*** Cannot continue, aborting.
***
EOF
	exit 1
fi

a171 1
test -x "${newsh}" || unset newsh
a306 1
rm_try=''
a321 1
initialinstalllocation=''
a322 1
userelocatableinc=''
d334 1
a354 1
d_printf_format_null=''
a356 2
d_builtin_choose_expr=''
d_builtin_expect=''
a357 1
d_c99_variadic_macros=''
a370 1
d_cplusplus=''
a376 1
d_ctermid=''
a384 1
d_dir_dd_fd=''
a544 1
d_localtime_r_needs_tzset=''
a680 1
d_signbit=''
a683 2
d_snprintf=''
d_vsnprintf=''
a773 1
d_pseudofork=''
a917 1
d_inc_version_list=''
a960 4
mad=''
madlyh=''
madlyobj=''
madlysrc=''
a1092 1
d_sitearch=''
d1234 7
d1245 8
a1265 1
test -d /usr/lib64         && glibpth="$glibpth /lib64 /usr/lib64 /usr/local/lib64"
a1278 24
: set usethreads on the Configure command line to enable threads.
usereentrant='undef'
: full support for void wanted by default
defvoidused=15

: Possible local include directories to search.
: Set locincpth to "" in a hint file to defeat local include searches.
locincpth="/usr/local/include /opt/local/include /usr/gnu/include"
locincpth="$locincpth /opt/gnu/include /usr/GNU/include /opt/GNU/include"
:
: no include file wanted by default
inclwanted=''

: Enable -DEBUGGING and -DDEBUGGING from the command line
EBUGGING=''
DEBUGGING=old

ccname=''
ccversion=''
perllibs=''
: set useposix=false in your hint file to disable the POSIX extension.
useposix=true
: set useopcode=false in your hint file to disable the Opcode extension.
useopcode=true
d1285 5
a1530 1
	--help|\
a1634 8
       common used examples (see INSTALL for more info):
         -Duse64bitint            use 64bit integers
         -Duse64bitall            use 64bit integers and pointers
         -Dusethreads             use thread support
         -Dinc_version_list=none  do not include older perl trees in @@INC
         -DEBUGGING=none          DEBUGGING options
         -Dcc=gcc                 choose your compiler
         -Dprefix=/opt/perl5      choose your destination
a1641 1
       e.g.:  -Uversiononly
d1643 9
a1651 11
         -A append:symbol=value   append value to symbol
         -A symbol=value          like append:, but with a separating space
         -A define:symbol=value   define symbol to have value
         -A clear:symbol          define symbol to be ''
         -A define:symbol         define symbol to be 'define'
         -A eval:symbol=value     define symbol to be eval of value
         -A prepend:symbol=value  prepend value to symbol
         -A undef:symbol          define symbol to be 'undef'
         -A undef:symbol=         define symbol to be ''
       e.g.:  -A prepend:libswanted='cl pthread '
              -A ccflags=-DSOME_MACRO
a2435 13
# This question was auctioned at YAPC::Europe-2007 in Vienna
# I never promised you could answer it. I only auctioned the question.
cat <<FOO
The following message is sponsored by

  Dresden.pm<--The stars should be here.

Dear Perl user, system administrator or package
maintainer, the Perl community sends greetings to
you. Do you (emblematical) greet back [Y/n]? n

FOO

d2457 3
a2459 5
	# Skip this test because it gives a false match on output like:
	#    ./trygcc: line 23: cc: command not found
        # case "`$cc -v -c try.c 2>&1`" in
        # *gcc*) trygcc=no ;;
        # esac
d2464 2
a2465 21
		# Switching compilers may undo the work of hints files.
		# The most common problem is -D_REENTRANT for threads.
		# This heuristic catches that case, but gets false positives
		# if -Dusethreads was not actually specified.  Better to
		# bail out here with a useful message than fail 
		# mysteriously later. Should we perhaps just try to
		# re-invoke Configure -Dcc=gcc config_args ?
		if $test -f usethreads.cbu; then
			$cat >&4 <<EOM 

*** However, any setting of the C compiler flags (e.g. for thread support)
*** will be lost.  It may be necessary for you to restart Configure and
*** add -Dcc=gcc to your Configure command line.

EOM
			rp="Would you like to go ahead and try gcc anyway?"
			dflt=n
		else
			rp="Would you like to use it?"
			dflt=y
		fi
d2478 9
d2968 1
a2968 1
myuname=`echo $myuname | $sed -e 's/^[^=]*=//' -e "s,['/],,g" | \
d3130 1
a3130 4
		dgux)	osname=dgux
			osvers="$3"
			;;
		dragonfly) osname=dragonfly
d3136 1
a3136 1
		freebsd) osname=freebsd
d3141 1
a3141 1
		hp*)	osname=hpux
d3237 1
a3237 1
				case "svr$3" in
d3300 1
a3300 1

d3368 2
a3369 7
If you have a handcrafted Policy.sh file or a Policy.sh file generated by a
previous run of Configure, you may specify it as well as or instead of
OS-specific hints.  If hints are provided for your OS, you should use them:
although Perl can probably be built without hints on many platforms, using
hints often improve performance and may enable features that Configure can't
set up on its own. If there are no hints that match your OS, specify "none";
DO NOT give a wrong version or a wrong OS.
d3499 13
a3511 4
: decide how portable to be.  Allow command line overrides.
case "$d_portable" in
"$undef") ;;
*)	d_portable="$define" ;;
d3513 9
d3523 3
a3525 35
: set up shell script to do ~ expansion
cat >filexp <<EOSS
$startsh
: expand filename
case "\$1" in
 ~/*|~)
	echo \$1 | $sed "s|~|\${HOME-\$LOGDIR}|"
	;;
 ~*)
	if $test -f /bin/csh; then
		/bin/csh -f -c "glob \$1"
		failed=\$?
		echo ""
		exit \$failed
	else
		name=\`$expr x\$1 : '..\([^/]*\)'\`
		dir=\`$sed -n -e "/^\${name}:/{s/^[^:]*:[^:]*:[^:]*:[^:]*:[^:]*:\([^:]*\).*"'\$'"/\1/" -e p -e q -e '}' </etc/passwd\`
		if $test ! -d "\$dir"; then
			me=\`basename \$0\`
			echo "\$me: can't locate home directory for: \$name" >&2
			exit 1
		fi
		case "\$1" in
		*/*)
			echo \$dir/\`$expr x\$1 : '..[^/]*/\(.*\)'\`
			;;
		*)
			echo \$dir
			;;
		esac
	fi
	;;
*)
	echo \$1
	;;
d3527 5
a3531 3
EOSS
chmod +x filexp
$eunicefix filexp
d3533 7
a3539 16
: now set up to get a file name
cat <<EOS >getfile
$startsh
EOS
cat <<'EOSC' >>getfile
tilde=''
fullpath=''
already=''
skip=''
none_ok=''
exp_file=''
nopath_ok=''
orig_rp="$rp"
orig_dflt="$dflt"
case "$gfpth" in
'') gfpth='.' ;;
d3541 2
d3544 2
a3545 7
case "$fn" in
*\(*)
	: getfile will accept an answer from the comma-separated list
	: enclosed in parentheses even if it does not meet other criteria.
	expr "$fn" : '.*(\(.*\)).*' | $tr ',' $trnl >getfile.ok
	fn=`echo $fn | sed 's/(.*)//'`
	;;
d3548 3
a3550 5
case "$fn" in
*:*)
	loc_file=`expr $fn : '.*:\(.*\)'`
	fn=`expr $fn : '\(.*\):.*'`
	;;
d3552 8
d3561 12
a3572 17
case "$fn" in
*~*) tilde=true;;
esac
case "$fn" in
*/*) fullpath=true;;
esac
case "$fn" in
*+*) skip=true;;
esac
case "$fn" in
*n*) none_ok=true;;
esac
case "$fn" in
*e*) exp_file=true;;
esac
case "$fn" in
*p*) nopath_ok=true;;
d3574 2
d3577 5
a3581 5
case "$fn" in
*f*) type='File';;
*d*) type='Directory';;
*l*) type='Locate';;
esac
d3583 2
a3584 4
what="$type"
case "$what" in
Locate) what='File';;
esac
d3586 2
a3587 5
case "$exp_file" in
'')
	case "$d_portable" in
	"$define") ;;
	*) exp_file=true;;
d3592 17
a3608 128
cd ..
while test "$type"; do
	redo=''
	rp="$orig_rp"
	dflt="$orig_dflt"
	case "$tilde" in
	true) rp="$rp (~name ok)";;
	esac
	. UU/myread
	if test -f UU/getfile.ok && \
		$contains "^$ans\$" UU/getfile.ok >/dev/null 2>&1
	then
		value="$ans"
		ansexp="$ans"
		break
	fi
	case "$ans" in
	none)
		value=''
		ansexp=''
		case "$none_ok" in
		true) type='';;
		esac
		;;
	*)
		case "$tilde" in
		'') value="$ans"
			ansexp="$ans";;
		*)
			value=`UU/filexp $ans`
			case $? in
			0)
				if test "$ans" != "$value"; then
					echo "(That expands to $value on this system.)"
				fi
				;;
			*) value="$ans";;
			esac
			ansexp="$value"
			case "$exp_file" in
			'') value="$ans";;
			esac
			;;
		esac
		case "$fullpath" in
		true)
			case "$ansexp" in
			/*) value="$ansexp" ;;
			[a-zA-Z]:/*) value="$ansexp" ;;
			*)
				redo=true
				case "$already" in
				true)
				echo "I shall only accept a full path name, as in /bin/ls." >&4
				echo "Use a ! shell escape if you wish to check pathnames." >&4
					;;
				*)
				echo "Please give a full path name, starting with slash." >&4
					case "$tilde" in
					true)
				echo "Note that using ~name is ok provided it expands well." >&4
						already=true
						;;
					esac
				esac
				;;
			esac
			;;
		esac
		case "$redo" in
		'')
			case "$type" in
			File)
				for fp in $gfpth; do
					if test "X$fp" = X.; then
					    pf="$ansexp"
					else    
					    pf="$fp/$ansexp"
					fi
					if test -f "$pf"; then
						type=''
					elif test -r "$pf" || (test -h "$pf") >/dev/null 2>&1
					then
						echo "($value is not a plain file, but that's ok.)"
						type=''
					fi
					if test X"$type" = X; then
					    value="$pf"
					    break
					fi
				done
				;;
			Directory)
				for fp in $gfpth; do
					if test "X$fp" = X.; then
					    dir="$ans"
					    direxp="$ansexp"
					else    
					    dir="$fp/$ansexp"
					    direxp="$fp/$ansexp"
					fi
					if test -d "$direxp"; then
						type=''
						value="$dir"
						break
					fi
				done
				;;
			Locate)
				if test -d "$ansexp"; then
					echo "(Looking for $loc_file in directory $value.)"
					value="$value/$loc_file"
					ansexp="$ansexp/$loc_file"
				fi
				if test -f "$ansexp"; then
					type=''
				fi
				case "$nopath_ok" in
				true)	case "$value" in
					*/*) ;;
					*)	echo "Assuming $value will be in people's path."
						type=''
						;;
					esac
					;;
				esac
				;;
			esac
d3610 2
a3611 3
			case "$skip" in
			true) type='';
			esac
d3613 4
a3616 29
			case "$type" in
			'') ;;
			*)
				if test "$fastread" = yes; then
					dflt=y
				else
					dflt=n
				fi
				rp="$what $value doesn't exist.  Use that name anyway?"
				. UU/myread
				dflt=''
				case "$ans" in
				y*) type='';;
				*) echo " ";;
				esac
				;;
			esac
			;;
		esac
		;;
	esac
done
cd UU
ans="$value"
rp="$orig_rp"
dflt="$orig_dflt"
rm -f getfile.ok
test "X$gfpthkeep" != Xy && gfpth=""
EOSC
d3618 7
a3624 11
: determine root of directory hierarchy where package will be installed.
case "$prefix" in
'')
	dflt=`./loc . /usr/local /usr/local /local /opt /usr`
	;;
*?/)
	dflt=`echo "$prefix" | sed 's/.$//'`
	;;
*)
	dflt="$prefix"
	;;
d3626 6
a3631 1
$cat <<EOM
d3633 7
a3639 7
By default, $package will be installed in $dflt/bin, manual pages
under $dflt/man, etc..., i.e. with $dflt as prefix for all
installation directories. Typically this is something like /usr/local.
If you wish to have binaries under /usr/bin but other parts of the
installation under /usr/local, that's ok: you will be prompted
separately for each of the installation directories, the prefix being
only used to set the defaults.
d3642 11
a3652 7
fn=d~
rp='Installation prefix to use?'
. ./getfile
oldprefix=''
case "$prefix" in
'') ;;
*)
d3654 9
a3662 2
	"$prefix") ;;
	*) oldprefix="$prefix";;
d3664 6
a3671 2
prefix="$ans"
prefixexp="$ansexp"
d3673 3
a3675 4
case "$afsroot" in
'')	afsroot=/afs ;;
*)	afsroot=$afsroot ;;
esac
d3677 6
a3682 10
: is AFS running?
echo " "
case "$afs" in
$define|true)	afs=true ;;
$undef|false)	afs=false ;;
*)	if test -d $afsroot; then
		afs=true
	else
		afs=false
	fi
d3685 9
a3693 4
if $afs; then
	echo "AFS may be running... I'll be extra cautious then..." >&4
else
	echo "AFS does not seem to be running..." >&4
d3696 7
a3702 3
: determine installation prefix for where package is to be installed.
if $afs; then 
$cat <<EOM
a3703 3
Since you are running AFS, I need to distinguish the directory in which
files will reside from the directory in which they are installed (and from
which they are presumably copied to the former directory by occult means).
d3705 6
a3710 5
EOM
	case "$installprefix" in
	'') dflt=`echo $prefix | sed 's#^/afs/#/afs/.#'`;;
	*) dflt="$installprefix";;
	esac
d3712 5
a3716 7
$cat <<EOM

In some special cases, particularly when building $package for distribution,
it is convenient to distinguish the directory in which files should be
installed from the directory ($prefix) in which they will
eventually reside.  For most users, these two directories are the same.

d3718 2
a3719 21
	case "$installprefix" in
	'') dflt=$prefix ;;
	*) dflt=$installprefix;;
	esac
fi
fn=d~
rp='What installation prefix should I use for installing files?'
. ./getfile
installprefix="$ans"
installprefixexp="$ansexp"

: Perform the prefixexp/installprefixexp correction if necessary
cat <<EOS >installprefix
$startsh
EOS
cat <<'EOSC' >>installprefix
: Change installation prefix, if necessary.
if $test X"$prefix" != X"$installprefix"; then
    eval "install${prefixvar}=\`echo \$${prefixvar}exp | sed \"s#^\$prefixexp#\$installprefixexp#\"\`"
else
    eval "install${prefixvar}=\"\$${prefixvar}exp\""
a3720 52
EOSC
chmod +x installprefix
$eunicefix installprefix

: Set variables such as privlib and privlibexp from the output of ./getfile
: performing the prefixexp/installprefixexp correction if necessary.
cat <<EOS >setprefixvar
$startsh
EOS
cat <<'EOSC' >>setprefixvar
eval "${prefixvar}=\"\$ans\""
eval "${prefixvar}exp=\"\$ansexp\""
. ./installprefix
EOSC
chmod +x setprefixvar
$eunicefix setprefixvar

: set up the script used to warn in case of inconsistency
cat <<EOS >whoa
$startsh
EOS
cat <<'EOSC' >>whoa
dflt=y
case "$hint" in
    recommended)
	case "$hintfile" in
	'')	echo "The $hint value for \$$var on this machine was \"$was\"!" >&4
		;;
	*)	echo "Hmm.  Based on the hints in hints/$hintfile.sh, " >&4
		echo "the $hint value for \$$var on this machine was \"$was\"!" >&4
		;;
	esac
	;;
    *)	echo " "
	echo "*** WHOA THERE!!! ***" >&4
	echo "    The $hint value for \$$var on this machine was \"$was\"!" >&4
	;;
esac
rp="    Keep the $hint value?"
. ./myread
case "$ans" in
y) td=$was; tu=$was;;
esac
EOSC

: function used to set $1 to $val
setvar='var=$1; eval "was=\$$1"; td=$define; tu=$undef;
case "$val$was" in
$define$undef) . ./whoa; eval "$var=\$td";;
$undef$define) . ./whoa; eval "$var=\$tu";;
*) eval "$var=$val";;
esac'
a3721 4
case "$usesocks" in
$define|true|[yY]*)	dflt='y';;
*) dflt='n';;
esac
d3724 2
a3725 5
Perl can be built to use the SOCKS proxy protocol library.  To do so,
Configure must be run with -Dusesocks.  If you use SOCKS you also need
to use the PerlIO abstraction layer, this will be implicitly selected.

If this doesn't make any sense to you, just accept the default '$dflt'.
a3726 8
rp='Build Perl for SOCKS?'
. ./myread
case "$ans" in
y|Y)	val="$define" ;;     
*)      val="$undef" ;;
esac
set usesocks
eval $setvar
d3728 4
a3731 18
case "$usesocks" in
$define|true|[yY]*) useperlio="$define";;
esac

case "$useperlio" in
$define|true|[yY]*|'')	dflt='y';;
*) dflt='n';;
esac
cat <<EOM

Previous version of $package used the standard IO mechanisms as
defined in <stdio.h>.  Versions 5.003_02 and later of $package allow
alternate IO mechanisms via the PerlIO abstraction layer, but the
stdio mechanism is still available if needed.  The abstraction layer
can use AT&T's sfio (if you already have sfio installed) or regular stdio.
Using PerlIO with sfio may cause problems with some extension modules.

If this doesn't make any sense to you, just accept the default '$dflt'.
a3732 4
rp='Use the PerlIO abstraction layer?'
. ./myread
case "$ans" in
y|Y) 
d3735 12
a3746 3
*)      
	echo "Ok, doing things the stdio way."
	val="$undef"
d3749 2
a3750 2
set useperlio
eval $setvar 
a3751 5
case "$usesocks" in
$define|true|[yY]*)
	case "$useperlio" in
	$define|true|[yY]*) ;;
	*)	cat >&4 <<EOM
d3753 7
a3759 6
You are using the SOCKS proxy protocol library which means that you
should also use the PerlIO layer.  You may be headed for trouble.

EOM
		;;
	esac
d3763 1
a3763 2
	
: get the patchlevel
d3765 33
a3797 9
echo "Getting the current patchlevel..." >&4
if $test -r $rsrc/patchlevel.h;then
	revision=`awk '/define[ 	]+PERL_REVISION/ {print $3}' $rsrc/patchlevel.h`
	patchlevel=`awk '/define[ 	]+PERL_VERSION/ {print $3}' $rsrc/patchlevel.h`
	subversion=`awk '/define[ 	]+PERL_SUBVERSION/ {print $3}' $rsrc/patchlevel.h`
	api_revision=`awk '/define[ 	]+PERL_API_REVISION/ {print $3}' $rsrc/patchlevel.h`
	api_version=`awk '/define[ 	]+PERL_API_VERSION/ {print $3}' $rsrc/patchlevel.h`
	api_subversion=`awk '/define[ 	]+PERL_API_SUBVERSION/ {print $3}' $rsrc/patchlevel.h`
	perl_patchlevel=`egrep ',"(MAINT|SMOKE)[0-9][0-9]*"' $rsrc/patchlevel.h|tail -1|sed 's/[^0-9]//g'`
d3799 2
a3800 8
	revision=0
	patchlevel=0
	subversion=0
	api_revision=0
	api_version=0
	api_subversion=0
	perl_patchlevel=0
	$echo "(You do not have patchlevel.h.  Eek.)"
d3802 15
a3816 10
if $test -r $rsrc/.patch ; then
	if $test "X$perl_patchlevel" = "X" || $test "`cat $rsrc/.patch`" -gt "$perl_patchlevel" ; then
		perl_patchlevel=`cat $rsrc/.patch`
	fi
fi
: Define a handy string here to avoid duplication in myconfig.SH and configpm.
version_patchlevel_string="version $patchlevel subversion $subversion"
case "$perl_patchlevel" in
0|'') ;;
*) version_patchlevel_string="$version_patchlevel_string patch $perl_patchlevel" ;;
d3818 5
a3822 11

$echo "(You have $package $version_patchlevel_string.)"

case "$osname" in
dos|vms)
	: XXX Should be a Configure test for double-dots in filenames.
	version=`echo $revision $patchlevel $subversion | \
		 $awk '{ printf "%d_%d_%d\n", $1, $2, $3 }'`
	api_versionstring=`echo $api_revision $api_version $api_subversion | \
		 $awk '{ printf "%d_%d_%d\n", $1, $2, $3 }'`
	;;
d3824 6
a3829 4
	version=`echo $revision $patchlevel $subversion | \
		 $awk '{ printf "%d.%d.%d\n", $1, $2, $3 }'`
	api_versionstring=`echo $api_revision $api_version $api_subversion | \
		 $awk '{ printf "%d.%d.%d\n", $1, $2, $3 }'`
d3832 21
a3852 4
: Special case the 5.005_xx maintenance series, which used 5.005
: without any subversion label as a subdirectory in $sitelib
if test "${api_revision}${api_version}${api_subversion}" = "550"; then
	api_versionstring='5.005'
d3854 3
d3858 3
a3860 14
case "$usethreads" in
$define|true|[yY]*)     dflt='y';;
*)     # Catch case where user specified ithreads or 5005threads but
       # forgot -Dusethreads (A.D. 4/2002)
       case "$useithreads$use5005threads" in
       *$define*)      
		case "$useperlio" in
		"$define")	dflt='y' ;;
		*)		dflt='n' ;;
		esac
		;;
       *)	dflt='n';;
       esac
       ;;
d3862 1
a3862 13
cat <<EOM

Perl can be built to take advantage of threads on some systems.
To do so, Configure can be run with -Dusethreads.

Note that Perl built with threading support runs slightly slower
and uses more memory than plain Perl. The current implementation
is believed to be stable, but it is fairly new, and so should be
treated with caution.

If this doesn't make any sense to you, just accept the default '$dflt'.
EOM
rp='Build a threading Perl?'
d3864 1
a3864 6
case "$ans" in
y|Y)    val="$define" ;;
*)      val="$undef" ;;
esac
set usethreads
eval $setvar
d3866 9
a3874 12
if $test $patchlevel -lt 9; then
    case "$usethreads" in
    $define)
	$cat <<EOM

Since release 5.6, Perl has had two different threading implementations,
the newer interpreter-based version (ithreads) with one interpreter per
thread, and the older 5.005 version (5005threads).
The 5005threads version is effectively unmaintained and will probably be
removed in Perl 5.10, so there should be no need to build a Perl using it
unless needed for backwards compatibility with some existing 5.005threads
code.
d3876 14
d3891 7
a3897 5
	: Default to ithreads unless overridden on command line or with
	: old config.sh
	dflt='y'
	case "$use5005threads" in
		$define|true|[yY]*) dflt='n';;
d3899 9
a3907 2
	case "$useithreads" in
		$undef|false|[nN]*) dflt='n';;
d3909 14
a3922 21
	rp='Use the newer interpreter-based ithreads?'
	. ./myread
	case "$ans" in
	y|Y)    val="$define" ;;
	*)      val="$undef" ;;
	esac
	set useithreads
	eval $setvar
	: Now set use5005threads to the opposite value.
	case "$useithreads" in
	$define) val="$undef" ;;
	*) val="$define" ;;
	esac
	set use5005threads
	eval $setvar
	;;
    *)
	useithreads="$undef"
	use5005threads="$undef"
	;;
    esac
d3924 1
a3924 3
    case "$useithreads$use5005threads" in
    "$define$define")
	$cat >&4 <<EOM
d3926 2
a3927 3
You cannot have both the ithreads and the 5.005 threads enabled
at the same time.  Disabling the 5.005 threads since they are
much less stable than the ithreads.
d3929 3
a3931 4
EOM
	use5005threads="$undef"
	;;
    esac
d3933 5
a3937 2
else
: perl-5.9.x and later
d3939 9
a3947 4
    if test X"$usethreads" = "X$define"; then
	case "$use5005threads" in
	    $define|true|[yY]*)
		$cat >&4 <<EOM
d3949 14
a3962 1
5.005 threads has been removed for 5.10.  Perl will be built using ithreads.
d3964 5
a3968 4
EOM
	    ;;
	esac
    fi
d3970 7
a3976 36
    use5005threads="$undef"
    useithreads="$usethreads"
fi

if test X"$usethreads" = "X$define" -a "X$useperlio" = "Xundef"; then
	cat >&4 <<EOF
***
*** To build with ithreads you must also use the PerlIO layer.
*** Cannot continue, aborting.
***
EOF
	exit 1
fi

case "$d_oldpthreads" in
'')	: Configure tests would be welcome here.  For now, assume undef.
	val="$undef" ;;
*)	val="$d_oldpthreads" ;;
esac
set d_oldpthreads
eval $setvar


: Look for a hint-file generated 'call-back-unit'.  If the
: user has specified that a threading perl is to be built,
: we may need to set or change some other defaults.
if $test -f usethreads.cbu; then
    echo "Your platform has some specific hints regarding threaded builds, using them..."
    . ./usethreads.cbu
else
    case "$usethreads" in
	"$define"|true|[yY]*)
		$cat <<EOM
(Your platform does not have any specific hints for threaded builds.
 Assuming POSIX threads, then.)
EOM
d3978 23
a4000 15
    esac
fi

cat <<EOM

Perl can be built so that multiple Perl interpreters can coexist
within the same Perl executable.
EOM

case "$useithreads" in
$define)
	cat <<EOM
This multiple interpreter support is required for interpreter-based threads.
EOM
	val="$define"
d4002 2
a4003 12
*)	case "$usemultiplicity" in
	$define|true|[yY]*)	dflt='y';;
	*) dflt='n';;
	esac
	echo " "
	echo "If this doesn't make any sense to you, just accept the default '$dflt'."
	rp='Build Perl for multiplicity?'
	. ./myread
	case "$ans" in
	y|Y)	val="$define" ;;
	*)      val="$undef" ;;
	esac
d4006 3
a4008 2
set usemultiplicity
eval $setvar
d4010 17
d4028 6
a4033 5
case "$usemorebits" in
"$define"|true|[yY]*)
	use64bitint="$define"
	uselongdouble="$define"
	usemorebits="$define"
d4035 6
a4040 1
*)	usemorebits="$undef"
d4044 14
a4057 54
: make some quick guesses about what we are up against
echo " "
$echo $n "Hmm...  $c"
echo exit 1 >bsd
echo exit 1 >usg
echo exit 1 >v7
echo exit 1 >osf1
echo exit 1 >eunice
echo exit 1 >xenix
echo exit 1 >venix
echo exit 1 >os2
d_bsd="$undef"
$cat /usr/include/signal.h /usr/include/sys/signal.h >foo 2>/dev/null
if test -f /osf_boot || $contains 'OSF/1' /usr/include/ctype.h >/dev/null 2>&1
then
	echo "Looks kind of like an OSF/1 system, but we'll see..."
	echo exit 0 >osf1
elif test `echo abc | $tr a-z A-Z` = Abc ; then
	xxx=`./loc addbib blurfl $pth`
	if $test -f $xxx; then
	echo "Looks kind of like a USG system with BSD features, but we'll see..."
		echo exit 0 >bsd
		echo exit 0 >usg
	else
		if $contains SIGTSTP foo >/dev/null 2>&1 ; then
			echo "Looks kind of like an extended USG system, but we'll see..."
		else
			echo "Looks kind of like a USG system, but we'll see..."
		fi
		echo exit 0 >usg
	fi
elif $contains SIGTSTP foo >/dev/null 2>&1 ; then
	echo "Looks kind of like a BSD system, but we'll see..."
	d_bsd="$define"
	echo exit 0 >bsd
else
	echo "Looks kind of like a Version 7 system, but we'll see..."
	echo exit 0 >v7
fi
case "$eunicefix" in
*unixtovms*)
	$cat <<'EOI'
There is, however, a strange, musty smell in the air that reminds me of
something...hmm...yes...I've got it...there's a VMS nearby, or I'm a Blit.
EOI
	echo exit 0 >eunice
	d_eunice="$define"
: it so happens the Eunice I know will not run shell scripts in Unix format
	;;
*)
	echo " "
	echo "Congratulations.  You aren't running Eunice."
	d_eunice="$undef"
	;;
d4059 2
a4060 13
: Detect OS2.  The p_ variable is set above in the Head.U unit.
: Note that this also -- wrongly -- detects e.g. dos-djgpp, which also uses
: semicolon as a patch separator
case "$p_" in
:) ;;
*)
	$cat <<'EOI'
I have the feeling something is not exactly right, however...don't tell me...
lemme think...does HAL ring a bell?...no, of course, you're only running OS/2!
(Or you may be running DOS with DJGPP.)
EOI
	echo exit 0 >os2
	;;
a4061 25
if test -f /xenix; then
	echo "Actually, this looks more like a XENIX system..."
	echo exit 0 >xenix
	d_xenix="$define"
else
	echo " "
	echo "It's not Xenix..."
	d_xenix="$undef"
fi
chmod +x xenix
$eunicefix xenix
if test -f /venix; then
	echo "Actually, this looks more like a VENIX system..."
	echo exit 0 >venix
else
	echo " "
	if ./xenix; then
		: null
	else
		echo "Nor is it Venix..."
	fi
fi
chmod +x bsd usg v7 osf1 eunice xenix venix os2
$eunicefix bsd usg v7 osf1 eunice xenix venix os2
$rm -f foo
d4063 4
a4066 3
case "$cc" in
'') dflt=cc;;
*) dflt="$cc";;
a4067 3
rp="Use which C compiler?"
. ./myread
cc="$ans"
d4069 4
a4072 9
: See if they have not cc but they do have gcc
. ./trygcc
: Look for a hint-file generated 'call-back-unit'.  Now that the
: user has specified the compiler, we may need to set or change some
: other defaults.
if $test -f cc.cbu; then
    . ./cc.cbu
fi
. ./checkcc
d4074 5
a4078 22
echo " "
echo "Checking for GNU cc in disguise and/or its version number..." >&4
$cat >try.c <<EOM
#include <stdio.h>
int main() {
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
#ifdef __VERSION__
	printf("%s\n", __VERSION__);
#else
	printf("%s\n", "1");
#endif
#endif
	return(0);
}
EOM
if $cc -o try $ccflags $ldflags try.c; then
	gccversion=`$run ./try`
	case "$gccversion" in
	'') echo "You are not using GNU cc." ;;
	*)  echo "You are using GNU cc $gccversion."
	    ccname=gcc
	    ;;
d4080 1
a4080 14
else
	echo " "
	echo "*** WHOA THERE!!! ***" >&4
	echo "    Your C compiler \"$cc\" doesn't seem to be working!" >&4
	case "$knowitall" in
	'')
	echo "    You'd better start hunting for one and let me know about it." >&4
		exit 1
		;;
	esac
fi
$rm -f try try.*
case "$gccversion" in
1*) cpp=`./loc gcc-cpp $cpp $pth` ;;
a4081 9
case "$gccversion" in
'') gccosandvers='' ;;
*) gccshortvers=`echo "$gccversion"|sed 's/ .*//'`
   gccosandvers=`$cc -v 2>&1|grep '/specs$'|sed "s!.*/[^-/]*-[^-/]*-\([^-/]*\)/$gccshortvers/specs!\1!"`
   gccshortvers=''
   case "$gccosandvers" in
   $osname) gccosandvers='' ;; # linux gccs seem to have no linux osvers, grr
   $osname$osvers) ;; # looking good
   $osname*) cat <<EOM >&4
d4083 128
a4210 1
*** WHOA THERE!!! ***
d4212 3
a4214 22
    Your gcc has not been compiled for the exact release of
    your operating system ($gccosandvers versus $osname$osvers).

    In general it is a good idea to keep gcc synchronized with
    the operating system because otherwise serious problems
    may ensue when trying to compile software, like Perl.

    I'm trying to be optimistic here, though, and will continue.
    If later during the configuration and build icky compilation
    problems appear (headerfile conflicts being the most common
    manifestation), I suggest reinstalling the gcc to match
    your operating system release.

EOM
      ;;
   *) gccosandvers='' ;; # failed to parse, better be silent
   esac
   ;;
esac
case "$ccname" in
'') ccname="$cc" ;;
esac
d4216 29
a4244 14
# gcc 3.* complain about adding -Idirectories that they already know about,
# so we will take those off from locincpth.
case "$gccversion" in
3*)
    echo "main(){}">try.c
    for incdir in $locincpth; do
       warn=`$cc $ccflags -I$incdir -c try.c 2>&1 | \
	     grep '^c[cp]p*[01]: warning: changing search order '`
       if test "X$warn" != X; then
	   locincpth=`echo " $locincpth " | sed "s! $incdir ! !"`
       fi
    done
    $rm -f try try.*
esac
a4544 2
rm_try="$rm -f try try$_exe a.out .out try.[cho] try.$_o core core.try* try.core*"

a4720 26
: Check what DEBUGGING is required from the command line
: -DEBUGGING      or -DDEBUGGING or
: -DEBUGGING=both			= -g + -DDEBUGGING
: -DEBUGGING=-g   or -Doptimize=-g	= -g
: -DEBUGGING=none or -UDEBUGGING	=
: -DEBUGGING=old  or -DEBUGGING=default	= ? $optimize
case "$EBUGGING" in
'')	;;
*)	DEBUGGING=$EBUGGING ;;
esac

case "$DEBUGGING" in
-g|both|$define)
    case "$optimize" in
	*-g*) ;;
	*)    optimize="$optimize -g" ;;
    esac ;;
none|$undef)
    case "$optimize" in
	*-g*)	set `echo "X $optimize " | sed 's/ -g / /'`
		shift
		optimize="$*"
		;;
    esac ;;
esac

a4721 4
case "$DEBUGGING" in
both|$define) dflt='-DDEBUGGING'
esac

d4727 1
a4727 1
	1*) dflt="$dflt -fpcc-struct-return" ;;
d4729 2
a4730 2
	case "$optimize:$DEBUGGING" in
	*-g*:old) dflt="$dflt -DDEBUGGING";;
d4778 14
d5047 1
a5047 1
$rm_try
d5222 1
a5222 1
$rm_try
d5236 1
a5236 1
$rm_try
d5267 1
a5267 1
	fi
d5270 1
a5270 1
$rm_try
d5290 1
a5290 1
$rm_try
d5313 1
a5313 1
$rm_try
d5594 1
a5594 1
$rm_try
d5608 1
a5608 1
$rm_try
d5641 1
a5641 1
	fi
d5644 1
a5644 1
$rm_try
d5766 95
d5887 56
d5954 4
a5957 54
: Probably not worth prompting for this since we prompt for all
: the directories individually, and the prompt would be too long and
: confusing anyway.
installstyle=$dflt

: determine where public executables go
echo " "
set dflt bin bin
eval $prefixit
fn=d~
rp='Pathname where the public executables will reside?'
. ./getfile
if $test "X$ansexp" != "X$binexp"; then
	installbin=''
fi
prefixvar=bin
: XXX Bug? -- ignores Configure -Dinstallprefix setting.
: XXX If this is fixed, also fix the "start perl" hunk below, which relies on
:     this via initialinstalllocation
. ./setprefixvar

case "$userelocatableinc" in
$define|true|[yY]*)	dflt='y' ;;
*)			dflt='n' ;;
esac
cat <<EOM

Would you like to build Perl so that the installation is relocatable, so that
library paths in @@INC are determined relative to the path of the perl binary?
This is not advised for system Perl installs, or if you need to run setid
scripts or scripts under taint mode.

If this doesn't make any sense to you, just accept the default '$dflt'.
EOM
rp='Use relocatable @@INC?'
. ./myread
case "$ans" in
y|Y)	val="$define" ;;
*)	val="$undef"  ;;
esac
set userelocatableinc
eval $setvar

initialinstalllocation="$binexp"
: Default prefix is now "up one level from where the binaries are"
case "$userelocatableinc" in
$define|true|[yY]*)
    bin=".../"
    binexp=".../"
    prefix=".../.."
    prefixexp=".../.."
    installprefixexp=".../.."
    ;;
esac
d5961 1
a5961 1
: Also allow things like /opt/perl/lib/$version, since
a5974 1
fn=$binexp
d5978 8
a5985 2
prefixvar=privlib
. ./setprefixvar
a6014 1
fn=$binexp
d6018 2
a6019 2
prefixvar=archlib
. ./setprefixvar
d6025 6
a6141 190
: Find perl5.005 or later.
echo "Looking for a previously installed perl5.005 or later... "
case "$perl5" in
'')	for tdir in `echo "$binexp$path_sep$PATH" | $sed "s/$path_sep/ /g"`; do
		: Check if this perl is recent and can load a simple module
		if $test -x $tdir/perl$exe_ext && $tdir/perl -Mless -e 'use 5.005;' >/dev/null 2>&1; then
			perl5=$tdir/perl
			break;
		elif $test -x $tdir/perl5$exe_ext && $tdir/perl5 -Mless -e 'use 5.005;' >/dev/null 2>&1; then
			perl5=$tdir/perl5
			break;
		fi
	done
	;;
*)	perl5="$perl5"
	;;
esac
case "$perl5" in
'')	echo "None found.  That's ok.";;
*)	echo "Using $perl5." ;;
esac

$cat <<EOM

After $package is installed, you may wish to install various
add-on modules and utilities.  Typically, these add-ons will
be installed under $prefix with the rest
of this package.  However, you may wish to install such add-ons
elsewhere under a different prefix.

If you do not wish to put everything under a single prefix, that's
ok.  You will be prompted for the individual locations; this siteprefix
is only used to suggest the defaults.

The default should be fine for most people.

EOM
fn=d~+
rp='Installation prefix to use for add-on modules and utilities?'
: XXX Here might be another good place for an installstyle setting.
case "$siteprefix" in
'') dflt=$prefix ;;
*)  dflt=$siteprefix ;;
esac
. ./getfile
: XXX Prefixit unit does not yet support siteprefix and vendorprefix
oldsiteprefix=''
case "$siteprefix" in
'') ;;
*)	case "$ans" in
	"$prefix") ;;
	*) oldsiteprefix="$prefix";;
	esac
	;;
esac
siteprefix="$ans"
siteprefixexp="$ansexp"

: determine where site specific libraries go.
: Usual default is /usr/local/lib/perl5/site_perl/$version
: The default "style" setting is made in installstyle.U
: XXX No longer works with Prefixit stuff.
prog=`echo $package | $sed 's/-*[0-9.]*$//'`
case "$sitelib" in
'') case "$installstyle" in
	*lib/perl5*) dflt=$siteprefix/lib/$package/site_$prog/$version ;;
	*)	 dflt=$siteprefix/lib/site_$prog/$version ;;
	esac
	;;
*)	dflt="$sitelib"
	;;
esac
$cat <<EOM

The installation process will create a directory for
site-specific extensions and modules.  Most users find it convenient
to place all site-specific files in this directory rather than in the
main distribution directory.

EOM
fn=d~+
rp='Pathname for the site-specific library files?'
. ./getfile
prefixvar=sitelib
. ./setprefixvar
sitelib_stem=`echo "$sitelibexp" | sed "s,/$version$,,"`

: Determine list of previous versions to include in @@INC
$cat > getverlist <<EOPL
#!$perl5 -w
use File::Basename;
\$api_versionstring = "$api_versionstring";
\$version = "$version";
\$stem = "$sitelib_stem";
\$archname = "$archname";
EOPL
	$cat >> getverlist <<'EOPL'
# The list found is store twice for each entry: the original name, and
# the binary broken down version as pack "sss", so sorting is easy and
# unambiguous. This will work for all versions that have a maximum of
# three digit groups, separate by '.'s or '_'s. Names are extended with
# ".0.0" to ensure at least three elements for the pack.
#					-- H.Merijn Brand (m)'06 23-10-2006

# Can't have leading @@ because metaconfig interprets it as a command!
;@@inc_version_list=();
# XXX Redo to do opendir/readdir?
if (-d $stem) {
    chdir($stem);
    ;@@candidates = map {
	[ $_, pack "sss", split m/[._]/, "$_.0.0" ] } glob("5.*");
}
else {
    ;@@candidates = ();
}

($pversion, $aversion, $vsn5005) = map {
    pack "sss", split m/[._]/, "$_.0.0" } $version, $api_versionstring, "5.005";
foreach $d (@@candidates) {
    if ($d->[1] lt $pversion) {
	if ($d->[1] ge $aversion) {
	    unshift(@@inc_version_list, grep { -d } $d->[0]."/$archname", $d->[0]);
	}
	elsif ($d->[1] ge $vsn5005) {
	    unshift(@@inc_version_list, grep { -d } $d->[0]);
	}
    }
    else {
	# Skip newer version.  I.e. don't look in
	# 5.7.0 if we're installing 5.6.1.
    }
}

if (@@inc_version_list) {
    print join(' ', @@inc_version_list);
}
else {
    # Blank space to preserve value for next Configure run.
    print " ";
}
EOPL
chmod +x getverlist
case "$inc_version_list" in
'')	if test -x "$perl5$exe_ext"; then
		dflt=`$perl5 getverlist`
	else
		dflt='none'
	fi
	;;
$undef) dflt='none' ;;
*)  eval dflt=\"$inc_version_list\" ;;
esac
case "$dflt" in
''|' ') dflt=none ;;
esac
case "$dflt" in
5.005) dflt=none ;;
esac
$cat <<EOM

In order to ease the process of upgrading, this version of perl
can be configured to use modules built and installed with earlier
versions of perl that were installed under $prefix.  Specify here
the list of earlier versions that this version of perl should check.
If Configure detected no earlier versions of perl installed under
$prefix, then the list will be empty.  Answer 'none' to tell perl
to not search earlier versions.

The default should almost always be sensible, so if you're not sure,
just accept the default.
EOM

rp='List of earlier versions to include in @@INC?'
. ./myread
case "$ans" in
[Nn]one|''|' '|$undef) inc_version_list=' ' ;;
*) inc_version_list="$ans" ;;
esac
case "$inc_version_list" in
''|' ')
	inc_version_list_init='0'
	d_inc_version_list="$undef"
	;;
*)	inc_version_list_init=`echo $inc_version_list |
		$sed -e 's/^/"/' -e 's/ /","/g' -e 's/$/",0/'`
	d_inc_version_list="$define"
	;;
esac
$rm -f getverlist

d6159 1
a6159 1
$rm_try
d6257 1
a6257 1
$rm_try
d6294 1
a6294 1
$rm_try
d6425 71
d6518 5
a6522 4
prefixvar=sitearch
. ./setprefixvar
if $test X"$sitearch" = X"$sitelib"; then
	d_sitearch="$undef"
d6524 1
a6524 1
	d_sitearch="$define"
d6610 6
a6615 2
prefixvar=vendorlib
. ./installprefix
d6640 6
a6645 2
prefixvar=vendorarch
. ./installprefix
d6727 20
d6804 1
a6804 1
If you wish to install html files for programs in $spackage, indicate
d6815 2
a6816 2
prefixvar=html1dir
. ./setprefixvar
d6819 6
d6844 2
a6845 2
prefixvar=html3dir
. ./setprefixvar
d6848 124
d7031 1
a7031 1
#       if __GLIBC__ >= 2 && __GLIBC_MINOR__ >= 1 && !defined(__cplusplus)
d7056 1
a7056 1
$rm_try glibc.ver
a7440 26

echo " "
echo "Checking for C++..." >&4
$cat >try.c <<'EOCP'
#include <stdio.h>
int main(void)
{
#ifdef __cplusplus
    return 0;
#else
    return 1;
#endif
}
EOCP
set try
if eval $compile_ok && $run ./try; then
	val="$define"
	echo "You are using a C++ compiler."
else
	val="$undef"
	echo "You are not using a C++ compiler."
fi
$rm_try cplusplus$$
set d_cplusplus
eval $setvar

a7455 3
	case "$d_cplusplus" in
		$define) extern_C=\"C\";;
	esac;
d7460 1
a7460 1
			echo "extern $extern_C void *$1$tdc; void *(*(p()))$tdc { return &$1; } int main() { if(p()) return(0); else return(1); }"> try.c;
d7463 1
a7463 1
			$rm_try;
d7466 1
a7466 1
		echo "extern $extern_C void *$1$tdc; void *(*(p()))$tdc { return &$1; } int main() { if(p()) return(0); else return(1); }"> try.c;
d7468 1
a7468 1
		$rm_try;
a7508 1
xxx_ccflags="$ccflags"
a7509 8
: with g++ one needs -shared to get is-in-libc to work for dlopen
case "$gccversion" in
'')	;;
*)	case "$d_cplusplus" in
	"$define") ccflags="$ccflags -shared" ;;
	esac
	;;
esac
a7512 5
ccflags="$xxx_ccflags"

: see if this is a unistd.h system
set unistd.h i_unistd
eval $inhdr
d7526 1
a7526 1
*)
d7589 1
a7589 1
			linux*|svr4*|esix*|solaris|nonstopux) dflt='-fPIC' ;;
a7616 4
#$i_unistd I_UNISTD
#ifdef I_UNISTD
#include <unistd.h>
#endif
d7620 1
a7620 1
	if(i == -1)
d7637 1
a7637 1
		$rm_try
d7663 2
a7664 2
			      ;;
			linux|irix*|gnu*)  dflt="-shared $optimize" ;;
d7892 1
a7892 1
	freebsd|netbsd|openbsd|interix|dragonfly)
d8006 2
a8007 3
prefixvar=man1dir
. ./setprefixvar

d8013 7
d8094 1
a8094 1
However, your system can't handle the long file names like File::Basename.3.
d8109 2
a8110 2
$privlib/man/man3.  This version will suggest a
new default of $dflt.
d8131 2
a8132 3
prefixvar=man3dir
. ./setprefixvar

d8138 7
a8509 3
: XXX Note that this currently takes advantage of the bug that binexp ignores
:     the Configure -Dinstallprefix setting, which in turn means that under
:     relocatable @@INC, initialinstalllocation is what binexp started as.
d8519 2
a8520 2
($initialinstalllocation/perl) on all your platforms. The alternative
is to force a shell by starting the script with a single ':' character.
d8524 2
a8525 2
		"$define")      dflt="$initialinstalllocation/perl$version";;
		*)              dflt="$initialinstalllocation/perl";;
d8554 2
a8555 2
	"$define")	perlpath="$initialinstalllocation/perl$version";;
	*)		perlpath="$initialinstalllocation/perl";;
d8565 1
a8565 1
Perl is not always in a standard place ($initialinstalllocation/perl).
d8568 1
a8568 1
		dflt="$initialinstalllocation/perl"
d8600 1
a8600 1

d8605 1
a8605 1

d8613 8
a8620 5
installscriptdir=''
prefixvar=scriptdir
. ./setprefixvar
: A little fix up for an irregularly named variable.
installscript="$installscriptdir"
d8630 8
a8637 2
prefixvar=sitebin
. ./setprefixvar
d8652 8
a8659 2
prefixvar=sitehtml1dir
. ./setprefixvar
d8674 8
a8681 2
prefixvar=sitehtml3dir
. ./setprefixvar
d8686 1
a8686 1
*)	dflt=$siteman1dir ;;
d8694 8
a8701 2
prefixvar=siteman1dir
. ./setprefixvar
d8706 1
a8706 1
*)	dflt=$siteman3dir ;;
d8714 8
a8721 2
prefixvar=siteman3dir
. ./setprefixvar
d8732 8
a8739 2
prefixvar=sitescript
. ./setprefixvar
d8840 1
a8840 1
    return(0);
d8855 1
a8855 1
$rm_try
d8909 1
a8909 1
esac
d8956 1
a8956 1
    return(0);
d8975 1
a8975 1
		$echo $n "Rechecking the size of $zzz...$c" >&4
d9008 1
a9008 1
		$rm_try
d9031 6
a9036 2
prefixvar=vendorbin
. ./installprefix
d9062 6
a9067 2
prefixvar=vendorhtml1dir
. ./installprefix
d9093 6
a9098 2
prefixvar=vendorhtml3dir
. ./installprefix
d9121 6
a9126 2
prefixvar=vendorman1dir
. ./installprefix
d9149 6
a9154 2
prefixvar=vendorman3dir
. ./installprefix
d9170 1
a9170 1
The installation process will create a directory for
d9181 6
a9186 2
prefixvar=vendorscript
. ./installprefix
d9292 1
a9292 1
$rm_try
d9297 2
a9298 2
'')	d_PRIfldbl="$undef"; d_PRIgldbl="$undef"; d_PRIeldbl="$undef";
	d_PRIFUldbl="$undef"; d_PRIGUldbl="$undef"; d_PRIEUldbl="$undef";
d9301 2
a9302 2
*)	d_PRIfldbl="$define"; d_PRIgldbl="$define"; d_PRIeldbl="$define";
	d_PRIFUldbl="$define"; d_PRIGUldbl="$define"; d_PRIEUldbl="$define";
d9378 2
a9379 2
{
	char buf[64];
d9387 1
a9387 1
	Gconvert((DOUBLETYPE)0.01, 8, 0, buf);
d9390 1
a9390 1
	Gconvert((DOUBLETYPE)0.001, 8, 0, buf);
d9393 1
a9393 1
	Gconvert((DOUBLETYPE)0.0001, 8, 0, buf);
d9402 1
a9402 1
	Gconvert((DOUBLETYPE)1.0, 8, 0, buf);
d9405 1
a9405 1
	Gconvert((DOUBLETYPE)1.1, 8, 0, buf);
d9408 1
a9408 1
	Gconvert((DOUBLETYPE)1.01, 8, 0, buf);
d9411 1
a9411 1
	Gconvert((DOUBLETYPE)1.001, 8, 0, buf);
d9414 1
a9414 1
	Gconvert((DOUBLETYPE)1.0001, 8, 0, buf);
d9417 1
a9417 1
	Gconvert((DOUBLETYPE)1.00001, 8, 0, buf);
d9420 1
a9420 1
	Gconvert((DOUBLETYPE)1.000001, 8, 0, buf);
d9423 1
a9423 1
	Gconvert((DOUBLETYPE)0.0, 8, 0, buf);
d9426 1
a9426 1
	Gconvert((DOUBLETYPE)-1.0, 8, 0, buf);
d9430 1
a9430 1
	Gconvert((DOUBLETYPE)100000.0, 8, 0, buf);
d9432 1
a9432 1

d9434 1
a9434 1
	Gconvert((DOUBLETYPE)-100000.0, 8, 0, buf);
d9437 1
a9437 1
	Gconvert((DOUBLETYPE)123.456, 8, 0, buf);
d9462 1
a9462 1
    esac
d9469 1
a9469 1
    esac
d9504 1
a9504 1
	$rm -f try try$_o core
d9537 1
a9537 1
   ;;
a9540 1
$rm_try
d9622 1
a9622 1
rm_try="$rm_try"
d9630 1
a9630 1
$rm_try
d9660 1
a9660 1
$rm_try
d9683 1
a9683 1
$rm_try tryout.c'
d9709 1
a9709 1
$rm_try'
d9796 1
a9796 1
	$rm_try
d9800 1
a9800 1
*$define*)
d9817 1
a9817 1
*$define*)
d9911 2
a9912 43
else
	echo "Your C compiler doesn't seem to understand __attribute__ at all."
	val="$undef"
fi
;;
*) val="$d_attribute_format" ;;
esac
set d_attribute_format
eval $setvar
$rm -f attrib*

: Look for GCC-style attribute format with null format allowed
case "$d_printf_format_null" in
'') case "$d_attribute_format" in
    $define)
	echo " "
	echo "Checking whether your compiler allows __printf__ format to be null ..." >&4
$cat >attrib.c <<EOCP
#include <stdio.h>
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
int null_printf (char* pat,...) __attribute__((__format__(__printf__,1,2)));
int null_printf (char* pat,...) { return (int)pat; }
int main () { exit(null_printf(NULL)); }
EOCP
	if $cc $ccflags -o attrib attrib.c >attrib.out 2>&1 ; then
	    : run the executable in case it produces a run-time warning
	    if $run ./attrib >>attrib.out 2>&1; then
		if $contains 'warning' attrib.out >/dev/null 2>&1; then
		    echo "Your C compiler doesn't allow __printf__ format to be null."
		    val="$undef"
		else
		    echo "Your C compiler allows __printf__ format to be null."
		    val="$define"
		fi
	    else
	    echo "Your C compiler executable failed with __printf__ format null."
	    val="$undef"
	fi
    else
	echo "Your C compiler fails with __printf__ format null."
d9914 1
a9914 4
    fi
    ;;
    *)  val="$undef" ;;
    esac
d9916 1
a9916 1
*)  val="$d_printf_format_null" ;;
d9918 1
a9918 1
set d_printf_format_null
d10098 4
d10166 1
a10166 1
$rm_try
d10232 1
a10232 67
$rm_try

: Look for GCC-style __builtin_choose_expr
case "$d_builtin_choose_expr" in
'')
    echo " "
    echo "Checking whether your compiler can handle __builtin_choose_expr ..." >&4
    $cat >try.c <<'EOCP'
#include <assert.h>
#include <stdlib.h>
#include <stdio.h>

#define SYRINX(x) __builtin_choose_expr( x, (1056*2), (103*50) )

int main(void) {
    assert( SYRINX(1) == 2112 );
    assert( SYRINX(1) != 5150 );
    assert( SYRINX(0) == 5150 );
    assert( SYRINX(0) != 2112 );
    puts( "All good!" );
    exit(0);
}

EOCP
    set try
    if eval $compile; then
	echo "Your C compiler supports __builtin_choose_expr."
	val="$define"
    else
	echo "Your C compiler doesn't seem to understand __builtin_choose_expr."
	val="$undef"
    fi
;;
*) val="$d_builtin_choose_expr" ;;
esac

set d_builtin_choose_expr
eval $setvar
$rm_try

: Look for GCC-style __builtin_expect
case "$d_builtin_expect" in
'')
    echo " "
    echo "Checking whether your compiler can handle __builtin_expect ..." >&4
    $cat >builtin.c <<'EOCP'
int main(void) {
    int n = 50;
    if ( __builtin_expect(n, 0) ) n = 1;
}
EOCP
    set try
    if eval $compile; then
	echo "Your C compiler supports __builtin_choose_expr."
	val="$define"
    else
	echo "Your C compiler doesn't seem to understand __builtin_choose_expr."
	val="$undef"
    fi
    ;;
*) val="$d_builtin_expect" ;;
esac

set d_builtin_expect
eval $setvar
$rm_try

a10236 140
: see if stdarg is available
echo " "
if $test `./findhdr stdarg.h`; then
	echo "<stdarg.h> found." >&4
	valstd="$define"
else
	echo "<stdarg.h> NOT found." >&4
	valstd="$undef"
fi

: see if varags is available
echo " "
if $test `./findhdr varargs.h`; then
	echo "<varargs.h> found." >&4
else
	echo "<varargs.h> NOT found, but that's ok (I hope)." >&4
fi

: set up the varargs testing programs
$cat > varargs.c <<EOP
#ifdef I_STDARG
#include <stdarg.h>
#endif
#ifdef I_VARARGS
#include <varargs.h>
#endif

#ifdef I_STDARG
int f(char *p, ...)
#else
int f(va_alist)
va_dcl
#endif
{
	va_list ap;
#ifndef I_STDARG
	char *p;
#endif
#ifdef I_STDARG
	va_start(ap,p);
#else
	va_start(ap);
	p = va_arg(ap, char *);
#endif
	va_end(ap);
	return 0;
}
EOP
$cat > varargs <<EOP
$startsh
if $cc -c $ccflags -D\$1 varargs.c >/dev/null 2>&1; then
	echo "true"
else
	echo "false"
fi
$rm -f varargs$_o
EOP
chmod +x varargs

: now check which varargs header should be included
echo " "
i_varhdr=''
case "$valstd" in
"$define")
	if `./varargs I_STDARG`; then
		val='stdarg.h'
	elif `./varargs I_VARARGS`; then
		val='varargs.h'
	fi
	;;
*)
	if `./varargs I_VARARGS`; then
		val='varargs.h'
	fi
	;;
esac
case "$val" in
'')
echo "I could not find the definition for va_dcl... You have problems..." >&4
	val="$undef"; set i_stdarg; eval $setvar
	val="$undef"; set i_varargs; eval $setvar
	;;
*) 
	set i_varhdr
	eval $setvar
	case "$i_varhdr" in
	stdarg.h)
		val="$define"; set i_stdarg; eval $setvar
		val="$undef"; set i_varargs; eval $setvar
		;;
	varargs.h)
		val="$undef"; set i_stdarg; eval $setvar
		val="$define"; set i_varargs; eval $setvar
		;;
	esac
	echo "We'll include <$i_varhdr> to get va_dcl definition." >&4;;
esac
$rm -f varargs*

: see if the Compiler supports C99 variadic macros
case "$i_stdarg$i_stdlib" in
    "$define$define")
    echo "You have <stdarg.h> and <stdlib.h>, so checking for C99 variadic macros." >&4
    $cat >try.c <<EOCP
#include <stdio.h>
#include <stdarg.h>

#define foo(buffer, format, ...) sprintf(buffer, format, __VA_ARGS__)

int main() {
  char buf[20];
  foo(buf, "%d %g %.*s", 123, 456.0, (int)3, "789fail");
  puts(buf);
  return 0;
}
EOCP
    set try
    if eval $compile && $run ./try 2>&1 >/dev/null; then
	case "`$run ./try`" in
	    "123 456 789")
	    echo "You have C99 variadic macros." >&4
	    d_c99_variadic_macros="$define"
	    ;;
	    *)
	    echo "You don't have functional C99 variadic macros." >&4
	    d_c99_variadic_macros="$undef"
	    ;;
	esac
    else
	echo "I couldn't compile and run the test program, so I assume that you don't have functional C99 variadic macros." >&4
	d_c99_variadic_macros="$undef"
    fi
    $rm_try
    ;;
    *)
    echo "You don't have <stdarg.h> and <stdlib.h>, so not checking for C99 variadic macros." >&4
    d_c99_variadic_macros="$undef"
    ;;
esac

d10297 1
a10297 1
$signal_t blech(int s) { exit(3); }
d10306 1
a10306 1
	/* Don't let compiler optimize the test away.  Store the number
d10342 1
a10342 1
$rm_try
d10355 5
a10359 5
$signal_t blech(int s) { exit(7); }
$signal_t blech_in_list(int s) { exit(4); }
unsigned long dummy_long(unsigned long p) { return p; }
unsigned int dummy_int(unsigned int p) { return p; }
unsigned short dummy_short(unsigned short p) { return p; }
d10368 1
a10368 1

d10373 1
a10373 1
	/* Store the number in a writable string for gcc to pass to
d10442 1
a10442 1
$rm_try
d10450 1
a10450 3
#$i_stdarg I_STDARG  /* Only one of these can be defined by i_varhrd */
#$i_varargs I_VARARGS

a10451 12
#$i_unistd I_UNISTD

#ifdef I_STDARG
#  include <stdarg.h>
#else /* I_VARARGS */
#  include <varargs.h>
#endif

#ifdef I_UNISTD
#  include <unistd.h>
#endif

d10453 1
a10453 1
#  include <stdlib.h>
d10456 1
a10456 13
#include <stdio.h> /* vsprintf prototype */

#ifdef I_STDARG
void xxx(int n, ...)
{
    va_list args;
    char buf[10];
    va_start(args, n);
    exit((unsigned long)vsprintf(buf,"%s",args) > 10L);
}
int main() { xxx(1, "foo"); }

#else /* I_VARARGS */
d10461 5
a10465 4
    va_list args;
    char buf[10];
    va_start(args);
    exit((unsigned long)vsprintf(buf,"%s",args) > 10L);
a10466 4
int main() { xxx("foo"); }

#endif

d10469 3
a10471 8
	if eval $compile_ok; then
		if $run ./try; then
			echo "Your vsprintf() returns (int)." >&4
			val2="$undef"
		else
			echo "Your vsprintf() returns (char*)." >&4
			val2="$define"
		fi
d10473 2
a10474 5
		echo 'I am unable to compile the vsprintf() test program.' >&4
		# We shouldn't get here.  If we do, assume the standard signature,
		# not the old BSD one.
		echo 'Guessing that vsprintf() returns (int).' >&4
		val2="$undef"
d10478 2
a10479 2
	val="$undef"
	val2="$undef"
d10481 1
a10481 1
$rm_try
d10524 1
a10524 1
$rm_try'
d10565 1
a10565 1
						echo "Found Berkeley sockets interface in lib$net." >&4
d10606 1
a10606 1
	$rm_try
d10632 1
a10632 1
	const spug y = { 0 };
a10748 4
: see if ctermid exists
set ctermid d_ctermid
eval $inlibc

d10958 1
a10958 1

d10972 2
a10973 1
$rm_try
d10987 1
a10987 37
$rm_try

: Look for DIR.dd_fd
case "$i_dirent" in
"$define")
    echo "Checking to see if DIR has a dd_fd member variable" >&4
    $cat >try.c <<EOCP
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
#include <dirent.h>

int main() {
    DIR dir;
    dir.dd_fd = 1;
    return 0;
}
EOCP
    val=$undef
    set try
    if eval $compile; then
        echo "Yes, it does."
        val="$define"
    else
        echo "No, it does not."
        val="$undef"
    fi
    ;;
*)
    echo "You don't have a <dirent.h>, so not checking for dd_fd." >&4
    val="$undef"
    ;;
esac
set d_dir_dd_fd
eval $setvar
$rm_try
d11689 1
a11689 1
$rm_try
a11765 8
: see if fork exists
set fork d_fork
eval $inlibc

: see if pipe exists
set pipe d_pipe
eval $inlibc

d11820 1
a11820 1
$rm_try
a11825 2
	case "$d_fork:$d_pipe" in
	define:define)
d11831 1
a11831 1
#include <stdio.h>
d11854 1
a11854 1
$signal_t blech(int x) { exit(3); }
a11957 6
	;;
	*)	echo "Can't figure out how to test this--assuming errno EAGAIN will do."
		eagain=EAGAIN
		val="$define"
		;;
	esac
d11974 1
a11974 1
$rm_try head.c mtry
d12073 1
a12073 1
$rm_try
d12173 1
a12173 1
	}
d12200 1
a12200 1
	$rm_try
d12238 1
a12238 1
	$rm_try
d12287 1
a12287 1
$signal_t blech(int x) { exit(3); }
d12341 2
a12342 1
$rm_try
d12420 1
a12420 1
$rm_try
d12443 4
d12490 1
a12490 1
$rm_try
d12556 1
a12556 1
echo "Checking if you have a working futimes()" >&4
d12577 1
a12577 1
	0)  echo "Yes, you have" >&4
d12580 1
a12580 1
	*)  echo "No, you have futimes, but it isn't working ($rc) (probably harmless)" >&4
d12584 1
a12584 1
    echo "No, it does not (probably harmless)" >&4
d12586 1
a12586 1
$rm_try
d14212 1
a14212 1
	    echo "No, it does not (probably harmless)" >&4
d14214 1
a14214 1
	$rm_try
a14267 53
: see if localtime_r calls tzset
case "$localtime_r_proto" in
REENTRANT_PROTO*)
	$cat >try.c <<EOCP
/*  Does our libc's localtime_r call tzset ?
 *  return 0 if so, 1 otherwise.
 */
#include <sys/types.h>
#include <unistd.h>
#include <time.h>
#include <string.h>
#include <malloc.h>
int main()
{
    time_t t = time(0L);
    char w_tz[]="TZ" "=GMT+5",
	 e_tz[]="TZ" "=GMT-5",
	*tz_e = (char*)malloc(16),
	*tz_w = (char*)malloc(16);
    struct tm tm_e, tm_w;
    memset(&tm_e,'\0',sizeof(struct tm));
    memset(&tm_w,'\0',sizeof(struct tm));
    strcpy(tz_e,e_tz);
    strcpy(tz_w,w_tz);

    putenv(tz_e);
    localtime_r(&t, &tm_e);

    putenv(tz_w);
    localtime_r(&t, &tm_w);

    if( memcmp(&tm_e, &tm_w, sizeof(struct tm)) == 0 )
	return 1;
    return 0;
}
EOCP
	set try
	if eval $compile; then
	    if $run ./try; then
		d_localtime_r_needs_tzset=undef;
	    else
		d_localtime_r_needs_tzset=define;
	    fi;
	else
	    d_localtime_r_needs_tzset=undef;
	fi;
     ;;
  *)
     d_localtime_r_needs_tzset=undef;
     ;;
esac
$rm_try

d14405 1
a14405 1
#include <math.h>
d14410 1
a14410 1
/* Sigh. many current glibcs provide the function, but do not prototype it. */
d14418 1
a14418 1
    v = modfl(nv, &w);
d14449 1
a14449 1
		$rm_try
d14582 34
d14645 1
a14645 1
$rm_try
d14704 32
a14735 4
i8type=char
u8type="unsigned char"
i8size=1
u8size=1
d14840 1
a14840 1
$signal_t blech(int s) { bletched = 1; }
d14862 1
a14862 1
      if (bletched)
d14865 1
d14878 1
a14878 1
\-[1-9]*)
d14886 1
a14886 1
	nv_preserves_uv_bits="0" ;;
d14888 2
a14889 1
$rm_try
d14912 1
a14912 1
$signal_t blech(int s) { bletched = 1; }
d14968 1
a14968 1

d15010 3
a15012 1
$rm_try
d15033 1
a15033 1
$rm_try
d15040 1
a15040 1
	echo "Checking what constant to use for creating joinable pthreads..." >&4
d15066 1
a15066 1
		else
d15087 1
a15087 1
	$rm_try
d15097 4
a15135 48
: backward compatibility for d_hvfork
if test X$d_hvfork != X; then
	d_vfork="$d_hvfork"
	d_hvfork=''
fi
: see if there is a vfork
val=''
set vfork val
eval $inlibc

d_pseudofork=$undef

: Ok, but do we want to use it. vfork is reportedly unreliable in
: perl on Solaris 2.x, and probably elsewhere.
case "$val" in
$define)
	echo " "
	case "$usevfork" in
	false) dflt='n';;
	*) dflt='y';;
	esac
	cat <<'EOM'

Perl can only use a vfork() that doesn't suffer from strict
restrictions on calling functions or modifying global data in
the child.  For example, glibc-2.1 contains such a vfork()
that is unsuitable.  If your system provides a proper fork()
call, chances are that you do NOT want perl to use vfork().

EOM
	rp="Do you still want to use vfork()?"
	. ./myread
	case "$ans" in
	y|Y) ;;
	*)
		echo "Ok, we won't use vfork()."
		val="$undef"
		;;
	esac
	;;
esac
set d_vfork
eval $setvar
case "$d_vfork" in
$define) usevfork='true';;
*) usevfork='false';;
esac

d15233 1
d15237 2
a15238 1
$rm_try
d15488 1
a15488 1
			if $run ./try 2>/dev/null; then
d15499 1
a15499 1
	$rm_try
d15564 1
a15564 1
			if $run ./try 2>/dev/null; then
d15575 1
a15575 1
	$rm_try
d15631 1
a15631 1
$rm_try
d15706 1
a15706 1
$rm_try
d15714 1
a15714 1
    $cat > tryh.h <<END
d15739 1
a15741 1
      val="$undef"
d15749 1
a15749 1
#include "tryh.h"
d15780 1
a15780 1
#	endif /* IPC_RMID */
d15795 1
a15795 3
      $rm_try
      set d_semctl_semun
      eval $setvar
d15798 2
d15811 1
a15813 1
      val="$undef"
d15819 1
a15819 1
#include "tryh.h"
d15857 1
a15857 3
      $rm_try
      set d_semctl_semid_ds
      eval $setvar
d15860 2
d15869 1
a15882 1
$rm_try tryh.h
d16478 1
a16478 46
$rm_try

: see if this is a sunmath.h system
set sunmath.h i_sunmath
eval $inhdr

: see if signbit exists
$echo $n "Checking to see if you have signbit() available to work on $nvtype... $c" >&4
$cat >try.c <<EOCP
#$i_math I_MATH
#$i_sunmath I_SUNMATH
#ifdef I_MATH
#  include <math.h>
#endif
#ifdef I_SUNMATH  /* Solaris special math library */
#  include <sunmath.h>
#endif
#define NV $nvtype
int main(int argc, char **argv)
{
    NV x = 0.0;
    NV y = -0.0;
    if ((signbit(x) == 0) && (signbit(y) != 0))
	return 0;
    else
	return 1;
}
EOCP
val="$undef"
set try
if eval $compile; then
    if $run ./try; then
        $echo "Yes." >&4
	val="$define"
    else
        $echo "Signbit seems to be available, but doesn't work as I expected."
        $echo "I won't use it." >&4
	val="$undef"
    fi
else
    $echo "Nope." >&4
    dflt="$undef"
fi
set d_signbit
eval $setvar
$rm_try
d16531 1
a16531 66
$rm_try

: see if snprintf exists
set snprintf d_snprintf
eval $inlibc

: see if vsnprintf exists
set vsnprintf d_vsnprintf
eval $inlibc

case "$d_snprintf-$d_vsnprintf" in
"$define-$define")
    $cat <<EOM
Checking whether your snprintf() and vsnprintf() work okay...
EOM
    $cat >try.c <<'EOCP'
/* v?snprintf testing logic courtesy of Russ Allbery.
 * According to C99:
 * - if the buffer is too short it still must be \0-terminated
 * - if the buffer is too short the potentially required length
 *   must be returned and not -1
 * - if the buffer is NULL the potentially required length
 *   must be returned and not -1 or core dump
 */
#include <stdio.h>
#include <stdarg.h>

char buf[2];

int test (char *format, ...)
{
    va_list args;
    int count;

    va_start (args, format);
    count = vsnprintf (buf, sizeof buf, format, args);
    va_end (args);
    return count;
}

int main ()
{
    return ((test ("%s", "abcd") == 4 && buf[0] == 'a' && buf[1] == '\0'
             && snprintf (NULL, 0, "%s", "abcd") == 4) ? 0 : 1);
}
EOCP
    set try
    if eval $compile; then
	`$run ./try`
	case "$?" in
	0) echo "Your snprintf() and vsnprintf() seem to be working okay." ;;
	*) cat <<EOM >&4
Your snprintf() and snprintf() don't seem to be working okay.
EOM
	   d_snprintf="$undef"
	   d_vsnprintf="$undef"
	   ;;
	esac
    else
	echo "(I can't seem to compile the test program--assuming they don't)"
	d_snprintf="$undef"
	d_vsnprintf="$undef"
    fi
    $rm_try
    ;;
esac
d16605 2
a16606 1
$rm_try
d16771 1
a16771 1
	$rm_try
d16812 1
a16812 1
$rm_try
a17061 3
	else
		echo "(I can't seem to compile the test program--assuming it doesn't)"
		d_strtoul="$undef"
a17115 3
	else
		echo "(I can't seem to compile the test program--assuming it doesn't)"
		d_strtoull="$undef"
a17167 3
	else
		echo "(I can't seem to compile the test program--assuming it doesn't)"
		d_strtouq="$undef"
d17414 1
a17414 1
		if eval $compile && $run ./try > /dev/null; then
d17442 1
a17442 1
	$rm_try
d17446 1
d17463 1
a17463 1
$signal_t bletch(int s) { exit(4); }
d17546 1
a17546 1
$rm_try
d17566 58
a17623 12
: see if usleep exists
set usleep d_usleep
eval $inlibc

: see if prototype for usleep is available
echo " "
set d_usleepproto usleep $i_unistd unistd.h
eval $hasproto

: see if ustat exists
set ustat d_ustat
eval $inlibc
d17659 1
a17659 1
#endif
d17682 1
a17682 2
$rm_try

d17761 1
a17761 1
	$rm_try
d17840 1
a17840 1
        exit(3);
d17852 1
a17852 1
        exit(2);
d17891 1
a17891 1
	$rm_try
d17897 1
a17897 1
	: Check the return type needed for hash
d17934 1
a17934 1
	$rm_try
d17942 1
a17942 1
	: Check the return type needed for prefix
d17979 1
a17979 1
	$rm_try
d17986 1
d18092 1
a18092 1
			$rm_try
d18140 1
a18140 1
$rm_try
d18203 1
a18203 1
# endif
d18212 1
a18212 1
    }
d18263 1
a18263 1
	$rm_try
d18381 1
a18381 1
			$rm_try
d18431 1
a18431 1
$rm_try
d18680 2
a18681 1
$rm_try
d18686 2
a18687 2
'')	d_PRId64="$undef"; d_PRIi64="$undef"; d_PRIu64="$undef";
	d_PRIo64="$undef"; d_PRIx64="$undef"; d_PRIXU64="$undef";
d18689 2
a18690 2
*)	d_PRId64="$define"; d_PRIi64="$define"; d_PRIu64="$define";
	d_PRIo64="$define"; d_PRIx64="$define"; d_PRIXU64="$define";
a18820 33

if $test $patchlevel -lt 9; then
: MAD is not available in 5.8.x or earlier.
    ans=n;
else
    case "$mad" in
    $define|true|[yY]*)	dflt='y' ;;
    *)			dflt='n' ;;
    esac
    cat <<EOM

Would you like to build with Misc Attribute Decoration? This is development
work leading to a Perl 5 to Perl 6 convertor, which imposes a space and speed
overhead on the interpreter.

If this doesn't make any sense to you, just accept the default '$dflt'.
EOM
    rp='Build Perl with MAD?'
    . ./myread
fi
case "$ans" in
y|Y)	val="$define"
	madlyh='madly.h madly.act madly.tab'
	madlysrc='madly.c'
	madlyobj="madly$_o" ;;
*)	val="$undef"
	madlyh=''
	madlysrc=''
	madlyobj='' ;;
esac
set mad
eval $setvar

d18846 98
d18962 2
a18963 2

int
d18968 1
a18968 1

d18970 1
a18970 1
myprintf(char *fmt, ...)
d18974 2
a18975 2
  return myvfprintf(stdout, fmt, val);
}
d18982 2
a18983 2
  myprintf("%s%cs all right, then\n", "that", '\'');
  exit(0);
d19002 1
a19002 1
	$rm_try
a19200 6
elif $ar s bar$_a >/dev/null 2>&1 &&
	$cc -o foobar $ccflags $ldflags foo$_o bar$_a $libs > /dev/null 2>&1 &&
	$run ./foobar >/dev/null 2>&1; then
		echo "a table of contents needs to be added with '$ar s'."
		orderlib=false
		ranlib="$ar s"
d19225 1
a19225 1
$rm -f foo* bar*
d19322 1
a19322 1
    char *s = (char *)malloc(NBYTES);
d19375 1
a19375 1
		$rm_try
a19454 6
#  ifdef _SIG_MAX
#    define NSIG (_SIG_MAX+1)
#  endif
#endif

#ifndef NSIG
d19468 1
a19468 1
#    define NSIG SIGARRAYSIZE /* Assume ary[SIGARRAYSIZE] */
d19707 1
a19707 1
$rm_try
d19779 1
a19779 1
	else
d19803 1
a19803 1
$rm_try
a20000 20
: see if gdbm.h is available
set gdbm.h t_gdbm
eval $inhdr
case "$t_gdbm" in
$define)
	: see if gdbm_open exists
	set gdbm_open d_gdbm_open
	eval $inlibc
	case "$d_gdbm_open" in
	$undef)
		t_gdbm="$undef"
		echo "We won't be including <gdbm.h>"
		;;
	esac
	;;
esac
val="$t_gdbm"
set i_gdbm
eval $setvar

d20083 1
a20083 1
	$rm_try
d20102 1
a20102 1
$echo "Guessing which symbols your C compiler and preprocessor define..." >&4
d20126 1
a20126 1
LIBCATAMOUNT Linux LITTLE_ENDIAN LONG64 LONG_DOUBLE LONG_LONG
d20145 1
a20145 1
PROTOTYPES PWB pyr QNX QK_USER R3000 REENTRANT RES Rhapsody RISC6000
a20232 15
: Add in any linux cpp "predefined macros":
case "$osname::$gccversion" in
  *linux*::*.*)
    tHdrH=_tmpHdr
    rm -f $tHdrH'.h' $tHdrH
    touch $tHdrH'.h'
    if cpp -dM $tHdrH'.h' > $tHdrH'_cppsym.h' && [ -s $tHdrH'_cppsym.h' ]; then
       sed 's/#define[\ \  ]*//;s/[\ \     ].*$//' <$tHdrH'_cppsym.h' >$tHdrH'_cppsym.real'
       if [ -s $tHdrH'_cppsym.real' ]; then
	  cat $tHdrH'_cppsym.real' Cppsym.know | sort | uniq | ./Cppsym | sort | uniq > Cppsym.true
       fi
    fi
    rm -f $tHdrH'.h' $tHdrH'_cppsym.h' $tHdrH'_cppsym.real'
  ;;
esac
d20250 1
a20250 1
$rm_try
d20366 4
d20473 20
d20508 18
a20525 18
	case "$xxx" in
	    DynaLoader|dynaload) ;;
	    *)
	    if $test -f $xxx/$xxx.xs -o -f $xxx/$xxx.c; then
		known_extensions="$known_extensions $1$xxx";
	    elif $test -f $xxx/Makefile.PL; then
		nonxs_extensions="$nonxs_extensions $1$xxx";
	    else
		if $test -d $xxx -a $# -lt 10; then
		    set $1$xxx/ $*;
		    cd "$xxx";
		    eval $find_extensions;
		    cd ..;
		    shift;
		fi;
	    fi
	    ;;
	esac;
d20532 7
a20538 6
# Special case:  Add in modules that nest beyond the first level.
# Currently threads/shared and Hash/Util/FieldHash, since they are
# not picked up by the recursive find above (and adding in general
# recursive finding breaks SDBM_File/sdbm).
# A.D. 20011025 (SDBM), ajgough 20071008 (FieldHash)
known_extensions="$known_extensions threads/shared Hash/Util/FieldHash"
a20541 3
set X $nonxs_extensions
shift
nonxs_extensions="$*"
d20554 1
a20554 1
		case "$i_gdbm" in
d20559 1
a20559 1
		case "$i_langinfo$d_nl_langinfo" in
a20562 6
	IPC/SysV|ipc/sysv)
		: XXX Do we need a useipcsysv variable here
		case "${d_msg}${d_sem}${d_shm}" in
		*"${define}"*) avail_ext="$avail_ext $xxx" ;;
		esac
		;;
d20577 1
a20577 1
	ODBM_File|odbm_fil)
d20580 4
a20583 9
		    case "$d_cplusplus" in
		    define) ;; # delete as a function name will not work
		    *)  case "$osname-$use64bitint" in
			hpux-define)
			    case "$libs" in
			    *-ldbm*) avail_ext="$avail_ext $xxx" ;;
			    esac
			    ;;
			*) avail_ext="$avail_ext $xxx" ;;
d20586 1
d20591 2
a20592 2
	Opcode|opcode)
		case "$useopcode" in
d20596 2
a20597 2
	POSIX|posix)
		case "$useposix" in
d20602 1
a20602 1
		case "$d_socket" in
d20613 1
a20613 1
		case "$d_socket" in
d20620 2
a20621 2
                        case "$use5005threads" in
                        $define|true|[yY]*) avail_ext="$avail_ext $xxx" ;;
d20625 13
d20652 4
a20655 16
	Win32*)
		case "$osname" in
		cygwin) avail_ext="$avail_ext $xxx" ;;
		esac
		;;
	XS/APItest|xs/apitest)
		# This is just for testing.  Skip it unless we have dynamic loading.

		case "$usedl" in
		$define) avail_ext="$avail_ext $xxx" ;;
		esac
		;;
	XS/Typemap|xs/typemap)
		# This is just for testing.  Skip it unless we have dynamic loading.
		case "$usedl" in
		$define) avail_ext="$avail_ext $xxx" ;;
d20744 2
a20745 2
NOTICE:  Your previous config.sh list may be incorrect.
The extensions now available to you are
d20748 1
a20748 1
	${dynamic_ext}
d20780 1
a20780 1
	*)  dflt="$static_ext"
d20796 2
a20797 2
A number of extensions are supplied with $package.  Answer "none"
to include no extensions.
d20809 2
a20810 2
NOTICE:  Your previous config.sh list may be incorrect.
The extensions now available to you are
d20813 1
a20813 1
	${static_ext}
d20833 1
a20833 1
#
d21013 1
a21071 2
d_builtin_choose_expr='$d_builtin_choose_expr'
d_builtin_expect='$d_builtin_expect'
a21072 1
d_c99_variadic_macros='$d_c99_variadic_macros'
a21084 1
d_cplusplus='$d_cplusplus'
a21087 1
d_ctermid='$d_ctermid'
a21093 1
d_dir_dd_fd='$d_dir_dd_fd'
a21211 1
d_inc_version_list='$d_inc_version_list'
a21225 1
d_localtime_r_needs_tzset='$d_localtime_r_needs_tzset'
a21283 1
d_printf_format_null='$d_printf_format_null'
a21284 1
d_pseudofork='$d_pseudofork'
a21363 1
d_signbit='$d_signbit'
a21365 2
d_sitearch='$d_sitearch'
d_snprintf='$d_snprintf'
a21446 1
d_vsnprintf='$d_vsnprintf'
a21632 1
initialinstalllocation='$initialinstalllocation'
a21700 4
mad='$mad'
madlyh='$madlyh'
madlyobj='$madlyobj'
madlysrc='$madlysrc'
a21789 1
rm_try='$rm_try'
a21931 1
userelocatableinc='$userelocatableinc'
@


1.1.1.12
log
@import perl 5.10.1
@
text
@d14 1
a14 1
# Note: this Configure script was generated automatically. Rather than
d16 3
a18 2
# The dist package (which contains metaconfig) is available via SVN:
#     svn co https://svn.sourceforge.net/svnroot/dist/trunk/dist
d27 1
a27 1
# $Id: Head.U 6 2006-08-25 22:21:46Z rmanfredi $
d29 1
a29 1
# Generated on Tue Aug 18 19:22:01 CEST 2009 [metaconfig 3.5 PL0]
d91 1
a91 1
: On OS/2 this directory should exist if this is not floppy only system ":-]"
d93 1
a93 1
	if test -n "$OS2_SHELL"; then
d148 3
a150 3
		avoidksh="to avoid Digital UNIX' ksh"
		newsh=/bin/sh
		unset BIN_SH
d186 1
a186 1
: if needed, set CDPATH to a harmless value that is not chatty
d191 2
a192 2
	*bash*) CDPATH='.' ;;
	*) CDPATH='' ;;
a195 1

a209 1
extern_C=''
a210 1
usedevel=''
d224 1
a362 1
d_attribute_deprecated=''
a467 1
d_getaddrinfo=''
a498 1
d_getnameinfo=''
a554 2
d_inetntop=''
d_inetpton=''
a780 7
d_asctime64=''
d_ctime64=''
d_difftime64=''
d_gmtime64=''
d_localtime64=''
d_mktime64=''
d_timegm=''
a842 1
i_assert=''
a871 1
i_mallocmalloc=''
a874 6
d_gdbm_ndbm_h_uses_prototypes=''
d_gdbmndbm_h_uses_prototypes=''
d_ndbm=''
d_ndbm_h_uses_prototypes=''
i_gdbm_ndbm=''
i_gdbmndbm=''
a914 1
i_syspoll=''
a1059 1
nv_overflows_integers_at=''
a1167 4
sGMTIME_max=''
sGMTIME_min=''
sLOCALTIME_max=''
sLOCALTIME_min=''
a1175 2
dtrace=''
usedtrace=''
a1236 1
: Detect odd OSs
a1265 1
groupstype=''
d1271 1
d1295 3
d1405 1
a1405 1
	./sharp > today 2>/dev/null
d1412 1
a1412 1
		./sharp > today 2>/dev/null
d1455 1
d1459 1
a1459 1
: Configure command line arguments.
d1471 1
d1480 2
d1613 1
a1613 1
                      zzz=" "`echo "$yyy"|sed 's!^[^=]*=!!'`
d1627 1
a1627 1
                 ;;
d1652 1
a1652 1
	-V) echo "$me generated by metaconfig 3.5 PL0." >&2
d1736 1
a1736 1
package='perl5'
d1782 2
a1783 2
/*)	rsrc="$src";;
*)	rsrc="../$src";;
d1786 1
a1786 1
	$contains "^package='$package'\$" $rsrc/Configure >/dev/null 2>&1
d1940 1
a1940 2
	awk '$1 !~ /PACK[A-Z]+/ {print $1}' "$rsrc/MANIFEST" | \
		(split -l 50 2>/dev/null || split -50)
d1944 1
a1944 2
		(cd "$rsrc"; ls `cat "$tmppwd/$filelist"` \
			>/dev/null 2>>"$tmppwd/missing")
d1978 1
a1979 1
echo " "
a2122 1
: See if we are using a devel version and want that
d2125 1
a2125 2
$define|true|[yY]*)
    usedevel="$define" ;;
a2157 1
    usedevel="$undef"
d2283 1
a2283 1
		exit 0
d2290 1
d2321 1
d2421 1
a2421 1
make)
d2430 1
a2430 1
esac
a2498 1
: Check what type of C compiler we use
d2672 1
a2672 1
: Make symlinks util
d2724 1
a2724 1
: Check for Cross-Compilation
d3593 1
a3593 1
 \~/*|\~)
d3596 1
a3596 1
 \~*)
a3902 1
: allow them to override the AFS root
d3913 1
a3913 1
*)	if $test -d $afsroot; then
d4015 1
a4015 1
: function used to set '$1' to '$val'
a4022 1
: Check is we will use socks
d4038 1
a4038 1
y|Y)	val="$define" ;;
a4047 1
: Check if we want perlio
d4066 1
a4066 1
y|Y)
d4069 1
a4069 1
*)
d4075 1
a4075 1
eval $setvar
d4092 1
d4123 1
a4123 3
*)  perl_patchlevel=`echo $perl_patchlevel | sed 's/.* //'`
    version_patchlevel_string="$version_patchlevel_string patch $perl_patchlevel"
    ;;
a4148 1
: Do we want threads support and if so, what type
d4154 1
a4154 1
       *$define*)
a4297 1
: Check if multiplicity is required
d4328 1
a4328 1
: Check if morebits is requested
a4338 17
: Determine the C compiler to be used
echo " "
case "$cc" in
'') dflt=cc;;
*) dflt="$cc";;
esac
rp="Use which C compiler?"
. ./myread
cc="$ans"

: See whether they have no cc but they do have gcc
. ./trygcc
if $test -f cc.cbu; then
    . ./cc.cbu
fi
. ./checkcc

d4434 18
a4451 1
: Check if we are using GNU gcc and what its version is
a4845 1
: Check for uselongdouble support
d4922 1
a4922 1
	    fi
d4964 1
a4964 1
	    fi
a5047 26
: argument order is deliberate, as the flag will start with - which set could
: think is an option
checkccflag='check=$1; flag=$2; callback=$3;
echo " ";
echo "Checking if your compiler accepts $flag" 2>&1;
echo "int main(void) { return 0; }" > gcctest.c;
if $cc -O2 $flag -o gcctest gcctest.c 2>gcctest.out && ./gcctest; then
    echo "Yes, it does." 2>&1;
    if $test -s gcctest.out ; then
        echo "But your platform does not like it:";
        cat gcctest.out;
    else
	case "$ccflags" in
	*$check*)
	    echo "Leaving current flags $ccflags alone." 2>&1
	    ;;
	*) dflt="$dflt $flag";
	    eval $callback
	    ;;
	esac
    fi
else
    echo "Nope, it does not, but that is ok." 2>&1;
fi
'

d5059 1
a5059 1
	2*) if $test -d /etc/conf/kconfig.d &&
d5070 14
a5083 2
	?*)	set strict-aliasing -fno-strict-aliasing
		eval $checkccflag
d5090 14
a5103 14
	?*)	set pipe -pipe
		eval $checkccflag
		;;
	esac

	# on x86_64 (at least) we require an extra library (libssp) in the
	# link command line. This library is not named, so I infer that it is
	# an implementation detail that may change. Hence the safest approach
	# is to add the flag to the flags passed to the compiler at link time,
	# as that way the compiler can do the right implementation dependant
	# thing. (NWC)
	case "$gccversion" in
	?*)	set stack-protector -fstack-protector
		eval $checkccflag
a5243 9
# See note above about -fstack-protector
case "$ccflags" in
*-fstack-protector*) 
	case "$dflt" in
	*-fstack-protector*) ;; # Don't add it again
	*) dflt="$dflt -fstack-protector" ;; 
	esac
	;;
esac
d5310 1
a5310 1
	if $sh -c "$run ./try " >>try.msg 2>&1; then
d5359 1
a5359 1
$rm_try gcctest gcctest.out
a5364 5
case "$usedevel" in $define|true|[yY]*) if $test ! -f "${mc_file}.c"; then
echo "Internal Configure script bug - compiler test file ${mc_file}.c is missing. Please report this to perlbug@@perl.org" >&4;
exit 1;
fi;
esac;
d5629 1
a5629 1
: Check if 64bit ints have a quad type
d5688 1
a5688 1
: Do we want 64bit support
d5697 1
a5697 1
esac
d5706 1
a5706 1
esac
d5715 1
a5715 1
esac
d5724 1
a5724 1
esac
d5733 1
a5733 1
esac
d5742 1
a5742 1
esac
d5793 1
a5793 1
esac
a6310 1
if $test $patchlevel -lt 11; then
a6341 14
else
    case "$d_dosuid" in
	"$define")
	cat >&4 <<EOH

SUID emulation has been removed for 5.12
Please re-run Configure without -Dd_dosuid

EOH
	exit 1;
	;;
    esac
    d_dosuid=undef
fi
a6364 1
: Set the siteprefix variables
a6453 1
    ;@@candidates = sort { $a->[1] cmp $b->[1]} @@candidates;
a6532 4
: see if malloc/malloc.h has to be included
set malloc/malloc.h i_mallocmalloc
eval $inhdr

a6539 5
#$i_mallocmalloc I_MALLOCMALLOC
#ifdef I_MALLOCMALLOC
# include <malloc/malloc.h>
#endif

a6845 1
: Set the vendorprefix variables
a6901 1
: Set the vendorlib variables
a6931 1
: Set the vendorarch variables
a6956 5
if $test X"$vendorarch" = X"$vendorlib"; then
	d_vendorarch="$undef"
else
	d_vendorarch="$define"
fi
a7014 1
: Check if ansi2knr is required
a7037 83
: DTrace support
dflt_dtrace='/usr/sbin/dtrace'
cat <<EOM

Perl can be built to support DTrace on platforms that support it.
DTrace is a diagnosis and performance analysis tool from Sun.

If this doesn't make any sense to you, just accept the default '$dflt'.
EOM

while $test 1 ; do
	case "$usedtrace" in
	$define|true|[yY]*)
		dflt='y'
		;;
	?*)
		dflt='y'
		dflt_dtrace=$usedtrace
		;;
	*)
		dflt='n'
		;;
	esac

	rp='Support DTrace if available?'
	. ./myread
	case "$ans" in
	y|Y)	val="$define" ;;
	*)      val="$undef" ;;
	esac
	set usedtrace
	eval $setvar

	test "X$usedtrace" != "X$define" && break

	echo " "
	rp='Where is the dtrace executable?'
	dflt=$dflt_dtrace
	. ./getfile
	val="$ans"
	set dtrace
	eval $setvar

	if $test -f $dtrace
	then
		if $dtrace -h -s ../perldtrace.d \
			-o perldtrace.tmp >/dev/null 2>&1 \
			&& rm -f perldtrace.tmp
		then
			echo " "
			echo "Good: your $dtrace knows about the -h flag."
		else
			cat >&2 <<EOM

*** $me:  Fatal Error:  $dtrace doesn't support -h flag
***
*** Your installed dtrace doesn't support the -h switch to compile a D
*** program into a C header. Can't continue.

EOM
			exit 1
		fi
		break;
	fi

	case "$fastread" in
	yes)
		cat >&2 <<EOM

*** $me:  Fatal Error:  $dtrace not found.
*** Can't continue.

EOM
		exit 1
		;;
	*)
		echo "*** $dtrace was not found."
		echo " "
		;;
	esac
done

: See if we want extra modules installed
a7178 1
: Check if we are using the GNU C library
a7311 1
: Figure out where the libc is located
d7541 1
a7541 3
		if $ar t $libc > libc.tmp && \
			$contains '^fprintf$' libc.tmp >/dev/null 2>&1
		then
d7548 1
d7551 3
d7558 1
a7558 1
				$rm -f tmp.imp
d7565 1
a7565 3
			if  bld t $libc | \
				$sed -e 's/.*\///' -e "s/\\$_o:.*\$//" > libc.list &&
				$test -s libc.list
d7590 1
a7590 2
	$sed -n 's/^\([^ 	]*\)[ 	]*syscall[0-9]*[ 	]*$/\1/p' \
		/lib/syscalls.exp >>libc.list
d7602 1
a7602 1
: Check if we are using C++
a7634 4
case "$d_cplusplus" in
    $define)	extern_C="extern \"C\""	;;
    *)		extern_C="extern"	;;
esac;
d7643 3
d7650 1
a7650 1
			echo "$extern_C void *$1$tdc; void *(*(p()))$tdc { return &$1; } int main() { if(p()) return(0); else return(1); }"> try.c;
d7656 1
a7656 1
		echo "$extern_C void *$1$tdc; void *(*(p()))$tdc { return &$1; } int main() { if(p()) return(0); else return(1); }"> try.c;
a7866 1
  			haiku) dflt='-shared' ;;
a7902 10
	case "$ldflags" in
	*-fstack-protector*)
	    case "$dflt" in
			*-fstack-protector*) ;; # Don't add it again
			*) dflt="$dflt -fstack-protector" ;; 
		esac
		;;
	esac


a7940 1
: Do we want a shared libperl?
d7949 1
a7949 1
		svr4*|nonstopux|dgux|dynixptx|esix|powerux|beos|haiku|cygwin*)
d8003 1
a8003 1
		# A name such as libperl.so.10.1
d8005 1
a8005 1
		# A name such as libperl.so.100
d8019 2
a8020 6
		cygwin*) # ld links now against the dll directly
			majmin="cygperl5_${patchlevel}_${subversion}.${so}"
			majonly=`echo $patchlevel $subversion |
				$awk '{printf "%03d%03d", $1, $2}'`
			majonly=cygperl5.$majonly.$so
			dflt=$majmin
d8093 1
a8093 1
    case "$osname" in
a8111 3
	haiku)
		# Haiku doesn't like the default, either.
		;;
a8115 3
	cygwin)
		# cygwin needs only ldlibpth
		;;
d8122 1
a8122 1
	*)
d8130 1
a8130 1
passed to $ld so that the perl executable will find the
d8270 1
a8270 1
fi
d8555 1
a8555 1
				  -e 1q 2>/dev/null`
d8559 1
a8559 1
				     -e 1q 2>/dev/null`
a8627 1
: determine the e-mail address of the user who is running us
a8662 1
: Ask e-mail of administrator
a8900 1
: Check if faststdio is requested and available
d8924 1
a8924 1
y|Y)	val="$define" ;;
a9021 1
: Check size for Fpos_t
d9027 1
a9027 1
echo "Checking the size of $zzz..." >&4
a9059 1
: Check for large file support
a9172 1
: Set the vendorbin variables
a9193 1
: Set the vendorhtml1dir variables
a9220 1
: Set the vendorhtml3dir variables
a9247 1
: Set the vendorman1dir variables
a9271 1
: Set the vendorman3dir variables
a9295 1
: Set the vendorscript variables
a9323 40
: script used to emit important warnings
cat >warn <<EOS
$startsh
if test \$# -gt 0; then
	echo "\$@@" >msg
else
	cat >msg
fi
echo "*** WARNING:" >&4
sed -e 's/^/*** /' <msg >&4
echo "*** " >&4
cat msg >>config.msg
echo " " >>config.msg
rm -f msg
EOS
chmod +x warn
$eunicefix warn

: see which of string.h or strings.h is needed
echo " "
strings=`./findhdr string.h`
if $test "$strings" && $test -r "$strings"; then
	echo "Using <string.h> instead of <strings.h>." >&4
	val="$define"
else
	val="$undef"
	strings=`./findhdr strings.h`
	if $test "$strings" && $test -r "$strings"; then
		echo "Using <strings.h> instead of <string.h>." >&4
	else
		./warn "No string header found -- You'll surely have problems."
	fi
fi
set i_string
eval $setvar
case "$i_string" in
"$undef") strings=`./findhdr strings.h`;;
*)	  strings=`./findhdr string.h`;;
esac

a9327 1
: Check print/scan long double stuff
d9496 1
a9496 1
#$i_stdlib I_STDLIB
a9499 6
#$i_string I_STRING
#ifdef I_STRING
#  include <string.h>
#else
#  include <strings.h>
#endif
d9501 4
a9504 1
int checkit(char *expect, char *got)
a9746 20
: see if 64bit time functions exists

set ctime64 d_ctime64
eval $inlibc

set localtime64 d_localtime64
eval $inlibc

set gmtime64 d_gmtime64
eval $inlibc

set mktime64 d_mktime64
eval $inlibc

set difftime64 d_difftime64
eval $inlibc

set asctime64 d_asctime64
eval $inlibc

a9802 1
: Define hasproto macro for Configure internal use
a9829 1
: Define hasfield macro for Configure internal use
d9986 1
a9986 1
	./protochk "$extern_C $try" $hdrs && asctime_r_proto=B_SB ;;
d9990 1
a9990 1
	./protochk "$extern_C $try" $hdrs && asctime_r_proto=B_SBI ;;
d9994 1
a9994 1
	./protochk "$extern_C $try" $hdrs && asctime_r_proto=I_SB ;;
d9998 1
a9998 1
	./protochk "$extern_C $try" $hdrs && asctime_r_proto=I_SBI ;;
a10242 28
: Look for GCC-style attribute deprecated
case "$d_attribute_deprecated" in
'')
echo " "
echo "Checking whether your compiler can handle __attribute__((deprecated)) ..." >&4
$cat >attrib.c <<'EOCP'
#include <stdio.h>
int I_am_deprecated(void) __attribute__((deprecated));
EOCP
if $cc $ccflags -c attrib.c >attrib.out 2>&1 ; then
	if $contains 'warning' attrib.out >/dev/null 2>&1; then
		echo "Your C compiler doesn't support __attribute__((deprecated))."
		val="$undef"
	else
		echo "Your C compiler supports __attribute__((deprecated))."
		val="$define"
	fi
else
	echo "Your C compiler doesn't seem to understand __attribute__ at all."
	val="$undef"
fi
;;
*) val="$d_attribute_deprecated" ;;
esac
set d_attribute_deprecated
eval $setvar
$rm -f attrib*

d10434 1
a10434 1
    if eval $compile && $run ./try; then
d10454 1
a10454 1
    $cat >try.c <<'EOCP'
a10457 2
    /* Remember shell exit code truth is 0, C truth is non-zero */
    return !(n == 1);
d10461 2
a10462 2
    if eval $compile && $run ./try; then
	echo "Your C compiler supports __builtin_expect."
d10465 1
a10465 1
	echo "Your C compiler doesn't seem to understand __builtin_expect."
d10562 1
a10562 1
*)
a10927 1
: Define hasstruct macro for Configure internal use
a10945 1
: see whether socket exists
d10948 1
d11033 1
a11033 1
: Check for cmsghdr support
d11128 1
a11128 1
	./protochk "$extern_C $try" $hdrs && crypt_r_proto=B_CCS ;;
d11132 1
a11132 1
	./protochk "$extern_C $try" $hdrs && crypt_r_proto=B_CCD ;;
d11189 1
a11189 1
	./protochk "$extern_C $try" $hdrs && ctermid_r_proto=B_B ;;
d11230 1
a11230 1
	./protochk "$extern_C $try" $hdrs && ctime_r_proto=B_SB ;;
d11234 1
a11234 1
	./protochk "$extern_C $try" $hdrs && ctime_r_proto=B_SBI ;;
d11238 1
a11238 1
	./protochk "$extern_C $try" $hdrs && ctime_r_proto=I_SB ;;
d11242 1
a11242 1
	./protochk "$extern_C $try" $hdrs && ctime_r_proto=I_SBI ;;
a11520 1
: Check what extension to use for shared libs
d11605 3
a11607 3
	if $cc $ccflags $cccdlflags -c dyna.c > /dev/null 2>&1 &&
		mv dyna${_o} tmp-dyna${_o} > /dev/null 2>&1 &&
		$ld -o dyna.$dlext $ldflags $lddlflags tmp-dyna${_o} > /dev/null 2>&1 &&
d11625 1
a11625 1

d11647 1
a11647 1
	./protochk "$extern_C $try" $hdrs && drand48_r_proto=I_ST ;;
d11730 1
a11730 1
	./protochk "$extern_C $try" $hdrs && endgrent_r_proto=I_H ;;
d11734 1
a11734 1
	./protochk "$extern_C $try" $hdrs && endgrent_r_proto=V_H ;;
d11783 1
a11783 1
	./protochk "$extern_C $try" $hdrs && endhostent_r_proto=I_D ;;
d11787 1
a11787 1
	./protochk "$extern_C $try" $hdrs && endhostent_r_proto=V_D ;;
d11832 1
a11832 1
	./protochk "$extern_C $try" $hdrs && endnetent_r_proto=I_D ;;
d11836 1
a11836 1
	./protochk "$extern_C $try" $hdrs && endnetent_r_proto=V_D ;;
d11881 1
a11881 1
	./protochk "$extern_C $try" $hdrs && endprotoent_r_proto=I_D ;;
d11885 1
a11885 1
	./protochk "$extern_C $try" $hdrs && endprotoent_r_proto=V_D ;;
d12018 1
a12018 1
	./protochk "$extern_C $try" $hdrs && endpwent_r_proto=I_H ;;
d12022 1
a12022 1
	./protochk "$extern_C $try" $hdrs && endpwent_r_proto=V_H ;;
d12067 1
a12067 1
	./protochk "$extern_C $try" $hdrs && endservent_r_proto=I_D ;;
d12071 1
a12071 1
	./protochk "$extern_C $try" $hdrs && endservent_r_proto=V_D ;;
d12150 22
d12752 1
a12753 1
echo " "
d12941 1
d12976 1
a12976 1
: Check for fs_data_s
d12997 1
d13002 1
d13023 1
a13024 1
d_futimes="$undef"
a13057 58
: see if ndbm.h is available
set ndbm.h i_ndbm
eval $inhdr
: Compatibility location for RedHat 7.1
set gdbm/ndbm.h i_gdbmndbm
eval $inhdr
: Compatibility location for Debian 4.0
set gdbm-ndbm.h i_gdbm_ndbm
eval $inhdr

val="$undef"
if $test "$i_ndbm" = "$define" -o "$i_gdbmndbm" = "$define" -o "$i_gdbm_ndbm" = "$define"; then
	: see if dbm_open exists
	set dbm_open d_dbm_open
	eval $inlibc
	case "$d_dbm_open" in
	$undef)
		i_ndbm="$undef"
		i_gdbmndbm="$undef"
		i_gdbm_ndbm="$undef"
		echo "We won't be including <ndbm.h>"
		val="$undef"
		;;
	*) val="$define"
	   ;;
	esac
fi
set d_ndbm
eval $setvar

ndbm_hdr_protochk='name=$1; hdr=$2;
eval "ihdr=\$""i_$name";
val="$undef";
if $test "$ihdr" = "$define"; then
	$echo "Checking if your <$hdr> uses prototypes..." >&4;
	case "$d_cplusplus" in
	$define) ./protochk "$extern_C void dbm_close(DBM *);" literal "extern \"C\" {" $ihdr $hdr literal "}" && val="$define" ;;
	*) ./protochk "$extern_C void dbm_close(int, int);" $ihdr $hdr || val="$define" ;;
	esac;
	case "$val" in
	$define) $echo "Your <$hdr> seems to have prototypes";;
	*) $echo "Your <$hdr> does not seem to have prototypes";;
	esac;
fi;
set "d_${name}_h_uses_prototypes";
eval $setvar'

set ndbm ndbm.h
eval $ndbm_hdr_protochk
set gdbmndbm gdbm/ndbm.h
eval $ndbm_hdr_protochk
set gdbm_ndbm gdbm-ndbm.h
eval $ndbm_hdr_protochk

: see if getaddrinfo exists
set getaddrinfo d_getaddrinfo
eval $inlibc

d13066 1
d13091 1
a13091 1
	./protochk "$extern_C $try" $hdrs && getgrent_r_proto=I_SBWR ;;
d13095 1
a13095 1
	./protochk "$extern_C $try" $hdrs && getgrent_r_proto=I_SBIR ;;
d13099 1
a13099 1
	./protochk "$extern_C $try" $hdrs && getgrent_r_proto=S_SBW ;;
d13103 1
a13103 1
	./protochk "$extern_C $try" $hdrs && getgrent_r_proto=S_SBI ;;
d13107 1
a13107 1
	./protochk "$extern_C $try" $hdrs && getgrent_r_proto=I_SBI ;;
d13111 1
a13111 1
	./protochk "$extern_C $try" $hdrs && getgrent_r_proto=I_SBIH ;;
d13152 1
a13152 1
	./protochk "$extern_C $try" $hdrs && getgrgid_r_proto=I_TSBWR ;;
d13156 1
a13156 1
	./protochk "$extern_C $try" $hdrs && getgrgid_r_proto=I_TSBIR ;;
d13160 1
a13160 1
	./protochk "$extern_C $try" $hdrs && getgrgid_r_proto=I_TSBI ;;
d13164 1
a13164 1
	./protochk "$extern_C $try" $hdrs && getgrgid_r_proto=S_TSBI ;;
d13205 1
a13205 1
	./protochk "$extern_C $try" $hdrs && getgrnam_r_proto=I_CSBWR ;;
d13209 1
a13209 1
	./protochk "$extern_C $try" $hdrs && getgrnam_r_proto=I_CSBIR ;;
d13213 1
a13213 1
	./protochk "$extern_C $try" $hdrs && getgrnam_r_proto=S_CBI ;;
d13217 1
a13217 1
	./protochk "$extern_C $try" $hdrs && getgrnam_r_proto=I_CSBI ;;
d13221 1
a13221 1
	./protochk "$extern_C $try" $hdrs && getgrnam_r_proto=S_CSBI ;;
d13301 1
a13301 1

d13359 1
a13359 1
	./protochk "$extern_C $try" $hdrs && gethostbyaddr_r_proto=I_CWISBWRE ;;
d13363 1
a13363 1
	./protochk "$extern_C $try" $hdrs && gethostbyaddr_r_proto=S_CWISBWIE ;;
d13367 1
a13367 1
	./protochk "$extern_C $try" $hdrs && gethostbyaddr_r_proto=S_CWISBIE ;;
d13371 1
a13371 1
	./protochk "$extern_C $try" $hdrs && gethostbyaddr_r_proto=S_TWISBIE ;;
d13375 1
a13375 1
	./protochk "$extern_C $try" $hdrs && gethostbyaddr_r_proto=S_CIISBIE ;;
d13379 1
a13379 1
	./protochk "$extern_C $try" $hdrs && gethostbyaddr_r_proto=S_CSBIE ;;
d13383 1
a13383 1
	./protochk "$extern_C $try" $hdrs && gethostbyaddr_r_proto=S_TSBIE ;;
d13387 1
a13387 1
	./protochk "$extern_C $try" $hdrs && gethostbyaddr_r_proto=I_CWISD ;;
d13391 1
a13391 1
	./protochk "$extern_C $try" $hdrs && gethostbyaddr_r_proto=I_CIISD ;;
d13395 1
a13395 1
	./protochk "$extern_C $try" $hdrs && gethostbyaddr_r_proto=I_CII ;;
d13399 1
a13399 1
	./protochk "$extern_C $try" $hdrs && gethostbyaddr_r_proto=I_TsISBWRE ;;
d13440 1
a13440 1
	./protochk "$extern_C $try" $hdrs && gethostbyname_r_proto=I_CSBWRE ;;
d13444 1
a13444 1
	./protochk "$extern_C $try" $hdrs && gethostbyname_r_proto=S_CSBIE ;;
d13448 1
a13448 1
	./protochk "$extern_C $try" $hdrs && gethostbyname_r_proto=I_CSD ;;
d13489 1
a13489 1
	./protochk "$extern_C $try" $hdrs && gethostent_r_proto=I_SBWRE ;;
d13493 1
a13493 1
	./protochk "$extern_C $try" $hdrs && gethostent_r_proto=I_SBIE ;;
d13497 1
a13497 1
	./protochk "$extern_C $try" $hdrs && gethostent_r_proto=S_SBIE ;;
d13501 1
a13501 1
	./protochk "$extern_C $try" $hdrs && gethostent_r_proto=S_SBI ;;
d13505 1
a13505 1
	./protochk "$extern_C $try" $hdrs && gethostent_r_proto=I_SBI ;;
d13509 1
a13509 1
	./protochk "$extern_C $try" $hdrs && gethostent_r_proto=I_SD ;;
d13563 1
a13563 1
	./protochk "$extern_C $try" $hdrs && getlogin_r_proto=I_BW ;;
d13567 1
a13567 1
	./protochk "$extern_C $try" $hdrs && getlogin_r_proto=I_BI ;;
d13571 1
a13571 1
	./protochk "$extern_C $try" $hdrs && getlogin_r_proto=B_BW ;;
d13575 1
a13575 1
	./protochk "$extern_C $try" $hdrs && getlogin_r_proto=B_BI ;;
a13607 4
: see if getnameinfo exists
set getnameinfo d_getnameinfo
eval $inlibc

d13636 1
a13636 1
	./protochk "$extern_C $try" $hdrs && getnetbyaddr_r_proto=I_UISBWRE ;;
d13640 1
a13640 1
	./protochk "$extern_C $try" $hdrs && getnetbyaddr_r_proto=I_LISBI ;;
d13644 1
a13644 1
	./protochk "$extern_C $try" $hdrs && getnetbyaddr_r_proto=S_TISBI ;;
d13648 1
a13648 1
	./protochk "$extern_C $try" $hdrs && getnetbyaddr_r_proto=S_LISBI ;;
d13652 1
a13652 1
	./protochk "$extern_C $try" $hdrs && getnetbyaddr_r_proto=I_TISD ;;
d13656 1
a13656 1
	./protochk "$extern_C $try" $hdrs && getnetbyaddr_r_proto=I_LISD ;;
d13660 1
a13660 1
	./protochk "$extern_C $try" $hdrs && getnetbyaddr_r_proto=I_IISD ;;
d13664 1
a13664 1
	./protochk "$extern_C $try" $hdrs && getnetbyaddr_r_proto=I_uISBWRE ;;
d13705 1
a13705 1
	./protochk "$extern_C $try" $hdrs && getnetbyname_r_proto=I_CSBWRE ;;
d13709 1
a13709 1
	./protochk "$extern_C $try" $hdrs && getnetbyname_r_proto=I_CSBI ;;
d13713 1
a13713 1
	./protochk "$extern_C $try" $hdrs && getnetbyname_r_proto=S_CSBI ;;
d13717 1
a13717 1
	./protochk "$extern_C $try" $hdrs && getnetbyname_r_proto=I_CSD ;;
d13758 1
a13758 1
	./protochk "$extern_C $try" $hdrs && getnetent_r_proto=I_SBWRE ;;
d13762 1
a13762 1
	./protochk "$extern_C $try" $hdrs && getnetent_r_proto=I_SBIE ;;
d13766 1
a13766 1
	./protochk "$extern_C $try" $hdrs && getnetent_r_proto=S_SBIE ;;
d13770 1
a13770 1
	./protochk "$extern_C $try" $hdrs && getnetent_r_proto=S_SBI ;;
d13774 1
a13774 1
	./protochk "$extern_C $try" $hdrs && getnetent_r_proto=I_SBI ;;
d13778 1
a13778 1
	./protochk "$extern_C $try" $hdrs && getnetent_r_proto=I_SD ;;
a13811 1
: Optional checks for getprotobyname and getprotobynumber
d13857 1
a13857 1
	./protochk "$extern_C $try" $hdrs && getprotobyname_r_proto=I_CSBWR ;;
d13861 1
a13861 1
	./protochk "$extern_C $try" $hdrs && getprotobyname_r_proto=S_CSBI ;;
d13865 1
a13865 1
	./protochk "$extern_C $try" $hdrs && getprotobyname_r_proto=I_CSD ;;
d13906 1
a13906 1
	./protochk "$extern_C $try" $hdrs && getprotobynumber_r_proto=I_ISBWR ;;
d13910 1
a13910 1
	./protochk "$extern_C $try" $hdrs && getprotobynumber_r_proto=S_ISBI ;;
d13914 1
a13914 1
	./protochk "$extern_C $try" $hdrs && getprotobynumber_r_proto=I_ISD ;;
d13955 1
a13955 1
	./protochk "$extern_C $try" $hdrs && getprotoent_r_proto=I_SBWR ;;
d13959 1
a13959 1
	./protochk "$extern_C $try" $hdrs && getprotoent_r_proto=I_SBI ;;
d13963 1
a13963 1
	./protochk "$extern_C $try" $hdrs && getprotoent_r_proto=S_SBI ;;
d13967 1
a13967 1
	./protochk "$extern_C $try" $hdrs && getprotoent_r_proto=I_SD ;;
d14021 1
a14021 1
	./protochk "$extern_C $try" $hdrs && getpwent_r_proto=I_SBWR ;;
d14025 1
a14025 1
	./protochk "$extern_C $try" $hdrs && getpwent_r_proto=I_SBIR ;;
d14029 1
a14029 1
	./protochk "$extern_C $try" $hdrs && getpwent_r_proto=S_SBW ;;
d14033 1
a14033 1
	./protochk "$extern_C $try" $hdrs && getpwent_r_proto=S_SBI ;;
d14037 1
a14037 1
	./protochk "$extern_C $try" $hdrs && getpwent_r_proto=I_SBI ;;
d14041 1
a14041 1
	./protochk "$extern_C $try" $hdrs && getpwent_r_proto=I_SBIH ;;
d14082 1
a14082 1
	./protochk "$extern_C $try" $hdrs && getpwnam_r_proto=I_CSBWR ;;
d14086 1
a14086 1
	./protochk "$extern_C $try" $hdrs && getpwnam_r_proto=I_CSBIR ;;
d14090 1
a14090 1
	./protochk "$extern_C $try" $hdrs && getpwnam_r_proto=S_CSBI ;;
d14094 1
a14094 1
	./protochk "$extern_C $try" $hdrs && getpwnam_r_proto=I_CSBI ;;
d14135 1
a14135 1
	./protochk "$extern_C $try" $hdrs && getpwuid_r_proto=I_TSBWR ;;
d14139 1
a14139 1
	./protochk "$extern_C $try" $hdrs && getpwuid_r_proto=I_TSBIR ;;
d14143 1
a14143 1
	./protochk "$extern_C $try" $hdrs && getpwuid_r_proto=I_TSBI ;;
d14147 1
a14147 1
	./protochk "$extern_C $try" $hdrs && getpwuid_r_proto=S_TSBI ;;
a14171 1
: Optional checks for getsbyname and getsbyport
d14201 1
a14201 1
	./protochk "$extern_C $try" $hdrs && getservbyname_r_proto=I_CCSBWR ;;
d14205 1
a14205 1
	./protochk "$extern_C $try" $hdrs && getservbyname_r_proto=S_CCSBI ;;
d14209 1
a14209 1
	./protochk "$extern_C $try" $hdrs && getservbyname_r_proto=I_CCSD ;;
d14250 1
a14250 1
	./protochk "$extern_C $try" $hdrs && getservbyport_r_proto=I_ICSBWR ;;
d14254 1
a14254 1
	./protochk "$extern_C $try" $hdrs && getservbyport_r_proto=S_ICSBI ;;
d14258 1
a14258 1
	./protochk "$extern_C $try" $hdrs && getservbyport_r_proto=I_ICSD ;;
d14299 1
a14299 1
	./protochk "$extern_C $try" $hdrs && getservent_r_proto=I_SBWR ;;
d14303 1
a14303 1
	./protochk "$extern_C $try" $hdrs && getservent_r_proto=I_SBI ;;
d14307 1
a14307 1
	./protochk "$extern_C $try" $hdrs && getservent_r_proto=S_SBI ;;
d14311 1
a14311 1
	./protochk "$extern_C $try" $hdrs && getservent_r_proto=I_SD ;;
d14365 1
a14365 1
	./protochk "$extern_C $try" $hdrs && getspnam_r_proto=I_CSBWR ;;
d14369 1
a14369 1
	./protochk "$extern_C $try" $hdrs && getspnam_r_proto=S_CSBI ;;
d14429 1
a14429 1
	./protochk "$extern_C $try" $hdrs && gmtime_r_proto=S_TS ;;
d14433 1
a14433 1
	./protochk "$extern_C $try" $hdrs && gmtime_r_proto=I_TS ;;
a14548 8
: see if inet_ntop exists
set inet_ntop d_inetntop
eval $inlibc

: see if inet_pton exists
set inet_pton d_inetpton
eval $inlibc

a14660 1
: check to see if math.h defines _LIB_VERSION
d14664 1
d14709 1
a14709 1
	./protochk "$extern_C $try" $hdrs && localtime_r_proto=S_TS ;;
d14713 1
a14713 1
	./protochk "$extern_C $try" $hdrs && localtime_r_proto=I_TS ;;
d14745 5
a14749 26
#$i_systypes	I_SYS_TYPES
#$i_unistd	I_UNISTD
#$i_time	I_TIME
#$i_stdlib	I_STDLIB
#$i_string	I_STRING
#$i_malloc	I_MALLOC
#ifdef I_SYS_TYPES
#  include <sys/types.h>
#endif
#ifdef I_UNISTD
#  include <unistd.h>
#endif
#ifdef I_TIME
#  include <time.h>
#endif
#ifdef I_STDLIB
#include <stdlib.h>
#endif
#ifdef I_STRING
#  include <string.h>
#else
#  include <strings.h>
#endif
#ifdef I_MALLOC
#  include <malloc.h>
#endif
d15074 1
a15074 1
: Check for msghdr_s
d15136 1
a15136 1
: Check basic sizes
d15193 1
a15193 1
i8type="signed char"
a15349 83
$echo "Checking to find the largest integer value your NVs can hold..." >&4
: volatile so that the compiler has to store it out to memory.
if test X"$d_volatile" = X"$define"; then
	volatile=volatile
fi
$cat <<EOP >try.c
#include <stdio.h>

typedef $nvtype NV;

int
main() {
  NV value = 2;
  int count = 1;

  while(count < 256) {
    $volatile NV up = value + 1.0;
    $volatile NV negated = -value;
    $volatile NV down = negated - 1.0;
    $volatile NV got_up = up - value;
    int up_good = got_up == 1.0;
    int got_down = down - negated;
    int down_good = got_down == -1.0;

    if (down_good != up_good) {
      fprintf(stderr,
	      "Inconsistency - up %d %f; down %d %f; for 2**%d (%.20f)\n",
	      up_good, (double) got_up, down_good, (double) got_down,
	      count, (double) value);
      return 1;
    }
    if (!up_good) {
      while (1) {
	if (count > 8) {
	  count -= 8;
	  fputs("256.0", stdout);
	} else {
	  count--;
	  fputs("2.0", stdout);
	}
	if (!count) {
	  puts("");
	  return 0;
	}
	fputs("*", stdout);
      }
    }
    value *= 2;
    ++count;
  }
  fprintf(stderr, "Cannot overflow integer range, even at 2**%d (%.20f)\n",
	  count, (double) value);
  return 1;
}
EOP
set try

nv_overflows_integers_at='0'
if eval $compile; then
    xxx="`$run ./try`"
    case "$?" in
	0)
	    case "$xxx" in
		2*)  cat >&4 <<EOM
The largest integer your NVs can preserve is equal to $xxx
EOM
		    nv_overflows_integers_at="$xxx"
		    ;;
		*)  cat >&4 <<EOM
Cannot determine the largest integer value your NVs can hold, unexpected output
'$xxx'
EOM
		    ;;
	    esac
	    ;;
	*)  cat >&4 <<EOM
Cannot determine the largest integer value your NVs can hold
EOM
	    ;;
    esac
fi
$rm_try

a15561 1
: Check if exe is symlink to abs path of executing program
d15669 1
d15755 1
a15755 1
	./protochk "$extern_C $try" $hdrs && random_r_proto=I_iS ;;
d15759 1
a15759 1
	./protochk "$extern_C $try" $hdrs && random_r_proto=I_lS ;;
d15763 1
a15763 1
	./protochk "$extern_C $try" $hdrs && random_r_proto=I_St ;;
d15814 1
a15814 1
	./protochk "$extern_C $try" $hdrs && readdir64_r_proto=I_TSR ;;
d15818 1
a15818 1
	./protochk "$extern_C $try" $hdrs && readdir64_r_proto=I_TS ;;
d15859 1
a15859 1
	./protochk "$extern_C $try" $hdrs && readdir_r_proto=I_TSR ;;
d15863 1
a15863 1
	./protochk "$extern_C $try" $hdrs && readdir_r_proto=I_TS ;;
d16415 1
a16415 1
	./protochk "$extern_C $try" $hdrs && setgrent_r_proto=I_H ;;
d16419 1
a16419 1
	./protochk "$extern_C $try" $hdrs && setgrent_r_proto=V_H ;;
d16464 1
a16464 1
	./protochk "$extern_C $try" $hdrs && sethostent_r_proto=I_ID ;;
d16468 1
a16468 1
	./protochk "$extern_C $try" $hdrs && sethostent_r_proto=V_ID ;;
d16525 1
a16525 1
	./protochk "$extern_C $try" $hdrs && setlocale_r_proto=I_ICBI ;;
d16570 1
a16570 1
	./protochk "$extern_C $try" $hdrs && setnetent_r_proto=I_ID ;;
d16574 1
a16574 1
	./protochk "$extern_C $try" $hdrs && setnetent_r_proto=V_ID ;;
d16635 1
a16635 1
	./protochk "$extern_C $try" $hdrs && setprotoent_r_proto=I_ID ;;
d16639 1
a16639 1
	./protochk "$extern_C $try" $hdrs && setprotoent_r_proto=V_ID ;;
d16684 1
a16684 1
	./protochk "$extern_C $try" $hdrs && setpwent_r_proto=I_H ;;
d16688 1
a16688 1
	./protochk "$extern_C $try" $hdrs && setpwent_r_proto=V_H ;;
d16753 1
a16753 1
	./protochk "$extern_C $try" $hdrs && setservent_r_proto=I_ID ;;
d16757 1
a16757 1
	./protochk "$extern_C $try" $hdrs && setservent_r_proto=V_ID ;;
d16794 1
d16944 1
a16945 1
echo " "
d17198 1
a17212 3
else
    echo "(I can't seem to compile the test program--assuming it doesn't)" >&4
    d_sprintf_returns_strlen="$undef"
d17232 1
a17232 1
	./protochk "$extern_C $try" $hdrs && srand48_r_proto=I_LS ;;
d17273 1
a17273 1
	./protochk "$extern_C $try" $hdrs && srandom_r_proto=I_TS ;;
d17312 1
d17319 1
d17324 1
d17329 1
a17329 1
: Check for statfs_s
d17340 1
d17343 1
a17343 1
define)
a17358 1
: Check stream access
d17477 1
a17477 1
	./protochk "$extern_C $try" $hdrs && strerror_r_proto=I_IBW ;;
d17481 1
a17481 1
	./protochk "$extern_C $try" $hdrs && strerror_r_proto=I_IBI ;;
d17485 1
a17485 1
	./protochk "$extern_C $try" $hdrs && strerror_r_proto=B_IBW ;;
d17552 1
a17552 1
extern long long int strtoll(char *s, char **, int);
d17609 1
a17609 1
extern unsigned long int strtoul(char *s, char **, int);
d17692 1
a17692 1
extern unsigned long long int strtoull(char *s, char **, int);
d17746 1
a17746 1
extern unsigned long long int strtouq(char *s, char **, int);
a17844 4
: see if timegm exists
set timegm d_timegm
eval $inlibc

d17883 1
a17883 1
	./protochk "$extern_C $try" $hdrs && tmpnam_r_proto=B_B ;;
d17928 1
a17928 1
	./protochk "$extern_C $try" $hdrs && ttyname_r_proto=I_IBW ;;
d17932 1
a17932 1
	./protochk "$extern_C $try" $hdrs && ttyname_r_proto=I_IBI ;;
d17936 1
a17936 1
	./protochk "$extern_C $try" $hdrs && ttyname_r_proto=B_IBI ;;
a17972 1
: Check if is a multiplatform env
a18062 1
: Checking 32bit aligndness
a18686 1
: Determine if this is an EBCDIC system
a18713 1
: Check how to flush
d18833 1
a18833 1
	$rm -f core try.core core.try.*
d19001 1
a19001 1
$rm_try tryp
a19035 1
: Check the size of GID
d19041 1
a19041 1
echo "Checking the size of $zzz..." >&4
a19070 1
: Check if GID is signed
d19076 1
a19076 1
echo "Checking the sign of $zzz..." >&4
a19107 1
: Check 64bit sizes
d19263 1
a19263 1
: Check format strings for internal types
a19321 1
: Check format string for GID
d19369 1
a19389 1
: MAD = Misc Attribute Definition
a19422 1
: check whether make sets MAKE
d19535 1
a19535 1
				'')	try="$extern_C struct hostent *gethostbyaddr($xxx, $yyy, int);"
d19584 1
a19584 1
			'')	try="$extern_C struct hostent *gethostbyname($xxx);"
d19622 1
a19622 1
			'')	try="$extern_C struct netent *getnetbyaddr($xxx, int);"
d19666 3
d19737 1
a19737 171
: see if this is a values.h system
set values.h i_values
eval $inhdr

: Check the max offset that gmtime and localtime accept
echo "Checking max offsets that gmtime () accepts"

case $i_values in
    define) yyy="#include <values.h>" ;;
    *)      yyy="" ;;
    esac

case "$sGMTIME_min/$sGMTIME_max" in
    0/0|/)
	$cat >try.c <<EOCP
#include <sys/types.h>
#include <stdio.h>
#include <time.h>
$yyy

int i;
struct tm *tmp;
time_t pt;

void gm_check (time_t t, int min_year, int max_year)
{
    tmp = gmtime (&t);
    if ( tmp == NULL ||
	/* Check tm_year overflow */
	 tmp->tm_year < min_year || tmp->tm_year > max_year)
	tmp = NULL;
    else
	pt = t;
    } /* gm_check */

int check_max ()
{
    tmp = NULL;
    pt  = 0;
#ifdef MAXLONG
    gm_check (MAXLONG, 69, 0x7fffffff);
#endif
    if (tmp == NULL || tmp->tm_year < 0) {
	for (i = 63; i >= 0; i--) {
	    time_t x = pt | ((time_t)1 << i);
	    if (x < 0 || x < pt) continue;
	    gm_check (x, 69, 0x7fffffff);
	    }
	}
    printf ("sGMTIME_max=%ld\n", pt);
    return (0);
    } /* check_max */

int check_min ()
{
    tmp = NULL;
    pt  = 0;
#ifdef MINLONG
    gm_check (MINLONG, -1900, 70);
#endif
    if (tmp == NULL) {
	for (i = 36; i >= 0; i--) {
	    time_t x = pt - ((time_t)1 << i);
	    if (x > 0) continue;
	    gm_check (x, -1900, 70);
	    }
	}
    printf ("sGMTIME_min=%ld\n", pt);
    return (0);
    } /* check_min */

int main (int argc, char *argv[])
{
    fprintf (stderr, "Sizeof time_t = %ld\n", sizeof (time_t));
    check_max ();
    check_min ();
    return (0);
    } /* main */
EOCP
	set try
	if eval $compile; then
	    eval `$run ./try`
	else
	    echo "Cannot determine sGMTIME_max and sGMTIME_min." >&4
	    fi
	$rm_try
	;;
    esac

echo "Checking max offsets that localtime () accepts"

case "$sLOCALTIME_min/$sLOCALTIME_max" in
    0/0|/)
	$cat >try.c <<EOCP
#include <sys/types.h>
#include <stdio.h>
#include <time.h>
$yyy

int i;
struct tm *tmp;
time_t pt;

void local_check (time_t t, int min_year, int max_year)
{
    if (sizeof (time_t) > 4 && t > 0x7ffffffffffff000LL)
	tmp = NULL;
    else
	tmp = localtime (&t);
    if ( tmp == NULL ||
	/* Check tm_year overflow */
	 tmp->tm_year < min_year || tmp->tm_year > max_year)
	tmp = NULL;
    else
	pt = t;
    } /* local_check */

int check_max ()
{
    tmp = NULL;
    pt  = 0;
#ifdef MAXLONG
    local_check (MAXLONG, 69, 0x7fffffff);
#endif
    if (tmp == NULL || tmp->tm_year < 0) {
	for (i = 63; i >= 0; i--) {
	    time_t x = pt | ((time_t)1 << i);
	    if (x < 0 || x < pt) continue;
	    local_check (x, 69, 0x7fffffff);
	    }
	}
    printf ("sLOCALTIME_max=%ld\n", pt);
    return (0);
   } /* check_max */

int check_min ()
{
    tmp = NULL;
    pt  = 0;
#ifdef MINLONG
    local_check (MINLONG, -1900, 70);
#endif
    if (tmp == NULL) {
	for (i = 36; i >= 0; i--) {
	    time_t x = pt - ((time_t)1 << i);
	    if (x > 0) continue;
	    local_check (x, -1900, 70);
	    }
	}
    printf ("sLOCALTIME_min=%ld\n", pt);
    return (0);
    } /* check_min */

int main (int argc, char *argv[])
{
    check_max ();
    check_min ();
    return (0);
    } /* main */
EOCP
	set try
	if eval $compile; then
	    eval `$run ./try`
	else
	    echo "Cannot determine sLOCALTIME_max and sLOCALTIME_min." >&4
	    fi
	$rm_try
	;;
    esac

: check for type of arguments to select.
d19746 1
a19746 1
			$i_systime sys/time.h
d19758 1
a19758 1
					'')	try="$extern_C select _(($nfd, $xxx, $xxx, $xxx, $tmo));"
d19895 5
d19906 2
a19907 3
	$grep '^[ 	]*#.*include' |
	$awk "{print \\$$fieldn}" | $sed 's!"!!g' |\
		$sed 's!\\\\\\\\!/!g' | $sort | $uniq`
d19909 3
d19916 1
d20027 1
a20027 1
	ndups++
d20034 1
a20034 1
END {
d20044 1
a20044 1
 	    printf("NUM%d %d\n", n, n)
d20064 1
a20064 2
	$run ./signal$_exe | ($sort -n -k 2 2>/dev/null || $sort -n +1) |\
		$uniq | $awk -f signal.awk >signal.lst
d20164 1
a20164 1
$rm -f signal signal.c signal.awk signal.lst signal_cmd
a20165 1
: Check size of size
d20171 1
a20171 1
echo "Checking the size of $zzz..." >&4
d20245 1
a20245 1
		'')	try="$extern_C int accept(int, struct sockaddr *, $xxx *);"
d20323 2
a20324 1
echo '#include <stdio.h>' | $cppstdin $cppminus > stdioh
d20332 1
a20332 1
$rm -f stdioh
a20357 1
: Check size of UID
d20363 1
a20363 1
echo "Checking the size of $zzz..." >&4
a20391 1
: Check if UID is signed
d20429 1
a20429 1
: Check format string for UID
d20468 1
a20468 1
: Check if site customization support was requested
a20508 4
: see if this is a assert.h system
set assert.h i_assert
eval $inhdr

d20556 2
d20562 34
a20636 1
: Preprocessor symbols
d20877 1
a20877 1
				./warn "<sgtty.h> not found--you could have problems."
d20884 1
a20884 1
				./warn "<termio.h> not found--you could have problems."
d20895 1
a20895 1
			./warn "Neither <termio.h> nor <sgtty.h> found--cross fingers!"
d20905 1
a20905 1
			./warn "Neither <sgtty.h> nor <termio.h> found--cross fingers!"
d20962 1
d20967 1
a20971 4
: see if there is a sys/poll.h file
set sys/poll.h i_syspoll
eval $inhdr

d20988 1
d21005 4
a21019 1
: Check extensions
a21032 4
: In 5.10.1 and later, extensions are stored in directories
: like File-Glob instead of the older File/Glob/.  In this scheme,
: IO-Compress does not appear to be an XS extension, but we want
: to install it as one.  A.D.  8/2009.
d21038 4
a21041 14
	    this_ext=`echo $xxx | $sed -e s/-/\\\//g`;
	    leaf=`echo $xxx | $sed -e s/.*-//`;
	    if $test -d File-Glob; then
		$ls -1 $xxx > $$.tmp;
		if   $contains "\.xs$" $$.tmp > /dev/null 2>&1; then
		    known_extensions="$known_extensions $this_ext";
		elif $contains "\.c$"  $$.tmp > /dev/null 2>&1; then
		    known_extensions="$known_extensions $this_ext";
		elif $test "$this_ext" = "IO/Compress"; then
		    known_extensions="$known_extensions $this_ext";
		elif $test -d $xxx; then
		    nonxs_extensions="$nonxs_extensions $this_ext";
		fi;
		$rm -f $$.tmp;
d21043 6
a21048 12
		if $test -f $xxx/$leaf.xs -o -f $xxx/$leaf.c; then
		    known_extensions="$known_extensions $1$this_ext";
		elif $test -f $xxx/Makefile.PL; then
		    nonxs_extensions="$nonxs_extensions $1$this_ext";
		else
		    if $test -d $xxx -a $# -lt 10; then
			set $1$xxx/ $*;
			cd "$xxx";
			eval $find_extensions;
			cd ..;
			shift;
		    fi;
d21059 6
a21064 10
if $test -d File-Glob; then
    : All ext/ flattened
else
    # Special case:  Add in modules that nest beyond the first level.
    # Currently threads/shared and Hash/Util/FieldHash, since they are
    # not picked up by the recursive find above (and adding in general
    # recursive finding breaks SDBM_File/sdbm).
    # A.D. 20011025 (SDBM), ajgough 20071008 (FieldHash)
    known_extensions="$known_extensions threads/shared Hash/Util/FieldHash"
fi
d21099 1
a21099 1
		case "$d_ndbm" in
a21177 2
	VMS*)
		;;
d21416 1
a21416 1
	    set X `echo " $libs " | sed -e 's@@ -lndbm @@ @@' -e 's@@ -lgdbm @@ @@' -e 's@@ -lgdbm_compat @@ @@' -e 's@@ -ldbm @@ @@' -e 's@@ -ldb @@ @@'` 
d21449 1
a21449 1
: configuration may be unconditionally patched via a 'config.arch' file
d21451 1
a21451 1
	echo "I see a config.arch file, loading it." >&4
a21498 6
EOT
: Add in command line options if available
$test -f UU/cmdline.opt && $cat UU/cmdline.opt >> config.sh

$spitshell <<EOT >>config.sh

d21505 1
a21593 1
d_asctime64='$d_asctime64'
a21596 1
d_attribute_deprecated='$d_attribute_deprecated'
a21630 1
d_ctime64='$d_ctime64'
a21634 1
d_difftime64='$d_difftime64'
a21692 3
d_gdbm_ndbm_h_uses_prototypes='$d_gdbm_ndbm_h_uses_prototypes'
d_gdbmndbm_h_uses_prototypes='$d_gdbmndbm_h_uses_prototypes'
d_getaddrinfo='$d_getaddrinfo'
a21713 1
d_getnameinfo='$d_getnameinfo'
a21748 1
d_gmtime64='$d_gmtime64'
a21757 2
d_inetntop='$d_inetntop'
d_inetpton='$d_inetpton'
a21768 1
d_localtime64='$d_localtime64'
a21792 1
d_mktime64='$d_mktime64'
a21812 2
d_ndbm='$d_ndbm'
d_ndbm_h_uses_prototypes='$d_ndbm_h_uses_prototypes'
a21969 1
d_timegm='$d_timegm'
a22016 1
dtrace='$dtrace'
a22032 1
extern_C='$extern_C'
a22097 1
i_assert='$i_assert'
a22109 2
i_gdbm_ndbm='$i_gdbm_ndbm'
i_gdbmndbm='$i_gdbmndbm'
a22118 1
i_mallocmalloc='$i_mallocmalloc'
a22152 1
i_syspoll='$i_syspoll'
a22295 1
nv_overflows_integers_at='$nv_overflows_integers_at'
a22349 4
sGMTIME_max='$sGMTIME_max'
sGMTIME_min='$sGMTIME_min'
sLOCALTIME_max='$sLOCALTIME_max'
sLOCALTIME_min='$sLOCALTIME_min'
a22474 1
usedevel='$usedevel'
a22475 1
usedtrace='$usedtrace'
d22536 3
d22542 1
a22542 1
echo "PERL_PATCHLEVEL='$perl_patchlevel'" >>config.sh
d22548 2
a22549 3
	$sed -n 's/^\([a-zA-Z_0-9]*\)=.*/\1/p' \
		config.sh config.sh UU/oldconfig.sh |\
		$sort | $uniq -u >UU/oldsyms
d22558 1
a22558 1
		echo ": Variables propagated from previous config.sh file." >>config.sh
@


1.1.1.13
log
@Perl 5.12.2 from CPAN
@
text
@a18 8
# Though this script was generated by metaconfig from metaunits, it is
# OK to send patches against Configure itself. It's up to the Configure
# pumpkin to backport the patch to the metaunits if it is accepted.
# For more information on patching Configure, see pod/perlhack.pod
#
# The metaunits are also available from the public git repository:
#     http://perl5.git.perl.org/metaconfig.git/ or
#     $ git clone git://perl5.git.perl.org/metaconfig.git metaconfig
d20 3
d28 1
a28 1
# Generated on Wed Jun 23 16:03:55 CEST 2010 [metaconfig 3.5 PL0]
d56 1
a56 1
	cat <<EOF
d68 1
a68 1
	cat <<EOF
a350 2
charbits=''
charsize=''
a826 1
bin_ELF=''
a1226 1
vaproto=''
a2438 9
case "$less" in
'')	;;
*)	if $less -R </dev/null >/dev/null; then
	       echo "Substituting less -R for less."
	       less="$less -R"
	       _less=$less
	fi
	;;
esac
a7136 2
$test -x /usr/bin/dtrace && dflt_dtrace='/usr/bin/dtrace'

a7928 1
bin_ELF="$undef"
a8024 1
			bin_ELF="$define"
a8192 7
	case "$userelocatableinc" in
	true|define)
		echo "Cannot build with both -Duserelocatableinc and -Duseshrplib" >&4
		echo "See INSTALL for an explanation why that won't work." >&4
		exit 4
		;;
	esac
d11003 1
a11003 1
	   in a writable string for gcc to pass to sscanf under HP-UX.
d11070 1
a11070 1
	   sscanf under HP-UX.
d18552 2
a18553 2
    volatile U8 buf[8];
    volatile U32 *up;
a18808 80
: check for length of character
echo " "
case "$charsize" in
'')
	echo "Checking to see how big your characters are (hey, you never know)..." >&4
	$cat >try.c <<EOCP
#include <stdio.h>
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
int main()
{
    printf("%d\n", (int)sizeof(char));
    exit(0);
}
EOCP
	set try
	if eval $compile_ok; then
		dflt=`$run ./try`
	else
		dflt='1'
		echo "(I can't seem to compile the test program.  Guessing...)"
	fi
	;;
*)
	dflt="$charsize"
	;;
esac
rp="What is the size of a character (in bytes)?"
. ./myread
charsize="$ans"
$rm_try

: Check for the number of bits in a character
case "$charbits" in
'')	echo "Checking how long a character is (in bits)..." >&4
	$cat >try.c <<EOCP
#include <stdio.h>
int main ()
{
    int n;
    unsigned char c;
    for (c = 1, n = 0; c; c <<= 1, n++) ;
    printf ("%d\n", n);
    return (0);
    }
EOCP
	set try
	if eval $compile_ok; then
		dflt=`$run ./try`
	else
		dflt='8'
		echo "(I can't seem to compile the test program.  Guessing...)"
	fi
	;;
*)
	dflt="$charbits"
	;;
esac
rp="What is the length of a character (in bits)?"
. ./myread
charbits="$ans"
$rm_try
case "$charbits" in
8)	;;
*)	cat >&4 << EOM
Your system has an unsigned character size of $charbits bits, which
is rather unusual (normally it is 8 bits).  Perl likely will not work
correctly on your system, with subtle bugs in various places.
EOM
	rp='Do you really want to continue?'
	dflt='n'
	. ./myread
	case "$ans" in
		[yY])	echo >&4 "Okay, continuing."	;;
		*)	exit 1				;;
	esac
esac

a21115 15
: see if prototypes support variable argument declarations
echo " "
case "$prototype$i_stdarg" in
$define$define)
	echo "It appears we'll be able to prototype varargs functions." >&4
	val="$define"
	;;
*)
	echo "Too bad... We won't be using prototyped varargs functions..." >&4
	val="$undef"
	;;
esac
set vaproto
eval $setvar

d21378 1
a21378 1
  *linux*::*.*|*gnukfreebsd*::*.*|gnu::*.*)
d21382 1
a21382 1
    if $cpp -dM $tHdrH'.h' > $tHdrH'_cppsym.h' && [ -s $tHdrH'_cppsym.h' ]; then
d21639 3
a21641 1
: like File-Glob instead of the older File/Glob/.
d21649 13
a21661 1
	    if $test -d File; then
a21674 10
	    else
		$ls -1 $xxx > $$.tmp;
		if   $contains "\.xs$" $$.tmp > /dev/null 2>&1; then
		    known_extensions="$known_extensions $this_ext";
		elif $contains "\.c$"  $$.tmp > /dev/null 2>&1; then
		    known_extensions="$known_extensions $this_ext";
		elif $test -d $xxx; then
		    nonxs_extensions="$nonxs_extensions $this_ext";
		fi;
		$rm -f $$.tmp;
a21679 8
cd "$rsrc/cpan"
set X
shift
eval $find_extensions
cd "$rsrc/dist"
set X
shift
eval $find_extensions
d21696 1
a21696 1
known_extensions=`echo "$*" | tr ' ' $trnl | $sort | tr $trnl ' '`
d21699 1
a21699 1
nonxs_extensions=`echo "$*" | tr ' ' $trnl | $sort | tr $trnl ' '`
a21820 7
	XS/APItest/KeywordRPN|xs/apitest/keywordrpn)
		# This is just for testing.  Skip it unless we have dynamic loading.

		case "$usedl" in
		$define) avail_ext="$avail_ext $xxx" ;;
		esac
		;;
a22168 1
bin_ELF='$bin_ELF'
a22186 2
charbits='$charbits'
charsize='$charsize'
a23170 1
vaproto='$vaproto'
@


1.1.1.14
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d31 3
a33 1
# Generated on Sun Apr  1 12:00:35 CEST 2012 [metaconfig 3.5 PL0]
a569 1
d_isblank=''
a630 2
d_prctl=''
d_prctl_set_name=''
a724 1
d_ipv6_mreq=''
a731 3
d_sin6_scope_id=''
d_sockaddr_in6=''
d_sockaddr_sa_len=''
a748 2
d_static_inline=''
perl_static_inline=''
a838 1
ld_can_script=''
a924 1
i_stdbool=''
a1192 2
st_ino_sign=''
st_ino_size=''
a1213 1
usekernprocpathname=''
a1224 1
usensgetexecutablepath=''
a1310 12
: Possible local include directories to search.
: Set locincpth to "" in a hint file to defeat local include searches.
locincpth="/usr/local/include /opt/local/include /usr/gnu/include"
locincpth="$locincpth /opt/gnu/include /usr/GNU/include /opt/GNU/include"
:
: no include file wanted by default
inclwanted=''

: Enable -DEBUGGING and -DDEBUGGING from the command line
EBUGGING=''
DEBUGGING=''

d1339 12
d2252 1
a2252 1
Every time there is a substitution, you will have to confirm.  If there is an
a2371 1
perl
d4069 71
d4161 5
d4204 7
a4210 2
       *$define*)	dflt='y';;
       *)		dflt='n';;
d4312 10
a4896 22
: Check is we will use socks
case "$usesocks" in
$define|true|[yY]*)	dflt='y';;
*) dflt='n';;
esac
cat <<EOM

Perl can be built to use the SOCKS proxy protocol library.  To do so,
Configure must be run with -Dusesocks.  If you use SOCKS you also need
to use the PerlIO abstraction layer, this will be implicitly selected.

If this doesn't make any sense to you, just accept the default '$dflt'.
EOM
rp='Build Perl for SOCKS?'
. ./myread
case "$ans" in
y|Y)	val="$define" ;;
*)      val="$undef" ;;
esac
set usesocks
eval $setvar

d6138 15
a6849 1
	if test "$useithreads" = "$define"; then dflt='n'; fi
d7673 1
a7673 1
xxx='[ADTSIWi]'
d8018 2
a8019 3

: Determine if this is ELF
	$cat >try.c <<EOM
d8036 1
a8036 1
		exit(0); /* succeed (yes, it is ELF) */
d8041 1
a8041 7
	if $cc $ccflags $ldflags try.c >/dev/null 2>&1 && $run ./a.out; then
		bin_ELF="$define"
	fi
	$rm_try

	case "$ld" in
	'')	if $test $bin_ELF = "$define"; then
d8046 1
d8051 1
a8157 28
ld_can_script="$undef"
case "$bin_ELF$usedl" in
$define$define)
    # Abuse try.h and a.out names for neat cleanup
    $cat >try.c <<EOM
void foo() {}
void bar() {}
EOM
    $cat >try.h <<EOM
LIBTEST_42 {
 global:
  foo;
 local: *;
 };
EOM
    if $cc $cccdlflags $ccdlflags $ccflags \
           $ldflags $lddlflags -o a.out try.c \
           -Wl,--version-script=try.h >/dev/null 2>&1 \
       &&  $test -s a.out ; then
	echo "ld supports scripting" >&4
	ld_can_script="$define"
    else
	echo "ld does not support scripting" >&4
    fi
    $rm_try
    ;;
esac

d8329 1
a8329 1
	freebsd|mirbsd|netbsd|openbsd|interix|dragonfly)
a9412 3
: Check if we want perlio
useperlio="$define"

d9900 1
a9900 1
    : again, add preferred functions to our list first
d10061 1
a10061 1
: define a function to check prototypes
a11353 71
echo "Checking the availability sa_len in the sock struct ..." >&4
$cat >try.c <<EOF
#include <sys/types.h>
#include <sys/socket.h>
int main() {
struct sockaddr sa;
return (sa.sa_len);
}
EOF
val="$undef"
set try; if eval $compile; then
	val="$define"
fi
set d_sockaddr_sa_len; eval $setvar
$rm_try

echo " "
echo "Checking the availability struct sockaddr_in6 ..." >&4
$cat >try.c <<EOF
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
int main() {
struct sockaddr_in6 sin6;
return (sin6.sin6_family);
}
EOF
val="$undef"
set try; if eval $compile; then
	val="$define"
fi
set d_sockaddr_in6; eval $setvar
$rm_try

echo " "
echo "Checking the availability sin6_scope_id in struct sockaddr_in6 ..." >&4
$cat >try.c <<EOF
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
int main() {
struct sockaddr_in6 sin6;
return (sin6.sin6_scope_id);
}
EOF
val="$undef"
set try; if eval $compile; then
	val="$define"
fi
set d_sin6_scope_id; eval $setvar
$rm_try

echo " "
echo "Checking the availability struct ipv6_mreq ..." >&4
$cat >try.c <<EOF
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
int main() {
struct ipv6_mreq mreq;
return (mreq.ipv6mr_interface);
}
EOF
val="$undef"
set try; if eval $compile; then
	val="$define"
fi
set d_ipv6_mreq; eval $setvar
$rm_try

echo " "
a14967 24
: Look for isblank
echo " "
$cat >isblank.c <<'EOCP'
#include <stdio.h>
#include <ctype.h>
int main() {
	int c = ' ';
	if (isblank(c))
		exit(0);
	else
		exit(1);
}
EOCP
if $cc $ccflags $ldflags -o isblank isblank.c $libs >/dev/null 2>&1 ; then
	echo "isblank() found." >&4
	val="$define"
else
	echo "isblank() NOT found." >&4
	val="$undef"
fi
set d_isblank
eval $setvar
$rm -f isblank*

a16051 25
: see if prctl exists
set prctl d_prctl
eval $inlibc

: see if prctl supports PR_SET_NAME
d_prctl_set_name=$undef
case $d_prctl in
    $define)
	$cat >try.c <<EOM
#include <sys/prctl.h>

int main (int argc, char *argv[])
{
    return (prctl (PR_SET_NAME, "Test"));
    } /* main */
EOM
	set try
	if eval $compile_ok && $run ./try; then
	    echo "Your prctl (PR_SET_NAME, ...) works"
	    d_prctl_set_name=$define
	    fi
	$rm_try
	;;
    esac

d16061 3
a16063 9
    "$define")
	: NetBSD first as /proc/self is a symlink to /proc/curproc, and it feels
	: more tidy to avoid an extra level of symlink
	set NetBSD /proc/curproc/exe Linux /proc/self/exe FreeBSD /proc/curproc/file Solaris /proc/self/path/a.out
	while test $# -gt 0; do
	    type=$1; try=$2
	    shift; shift
	    if $issymlink $try; then
		$ls -l $try > reflect
d16065 11
a16075 5
		    echo "You have $type-like $try."
		    procselfexe='"'$try'"'
		    val="$define"
		    : This will break out of the loop
		    set X; shift
d16077 1
a16077 2
	    fi
	done
d17307 6
d17316 2
a17317 1
	y|Y)	echo "Ok, turning on sfio then."
a17849 106
: see what flavor, if any, of static inline is supported
echo " "
echo "Checking to see if your system supports static inline..."
$cat > try.c <<'EOCP'
#include <stdlib.h>
extern int f_via_a(int x);
extern int f_via_b(int x);
int main(int argc, char **argv)
{
    int y;

    y = f_via_a(0);
#ifdef USE_B
    y = f_via_b(0);
#endif
    if (y == 42) {
        return EXIT_SUCCESS;
    }
    else {
        return EXIT_FAILURE;
    }
}
EOCP
$cat > a.c <<'EOCP'
static INLINE int f(int x) {
    int y;
    y = x + 42;
    return y;
}

int f_via_a(int x)
{
    return f(x);
}
EOCP
$cat > b.c <<'EOCP'
extern int f(int x);

int f_via_b(int x)
{
    return f(x);
}
EOCP

# Respect a hint (or previous) value for perl_static_inline, if there is one.
case "$perl_static_inline" in
'')	# Check the various possibilities, and break out on success.
	# For gcc, prefer __inline__, which will still permit 
	# cflags.SH to add in -ansi.
	case "$gccversion" in
		'') xxx="inline __inline__ __inline _inline";;
		*)  xxx="__inline__ inline __inline _inline";;
	esac
	for inline in $xxx; do
		set try -DINLINE=$inline a.c
		if eval $compile && $run ./try; then
			# Now make sure there is no external linkage of static
			# functions
			set try -DINLINE=$inline -DUSE_B a.c b.c
			if eval $compile && $run ./try; then
				$echo "Your compiler supports static $inline, " >&4
				$echo "but it also creates an external definition," >&4
				$echo "so I won't use it." >&4
				val=$undef
			else
				$echo "Your compiler supports static $inline." >&4
				val=$define
				perl_static_inline="static $inline";
				break;
			fi
		else
			$echo "Your compiler does NOT support static $inline." >&4
			val="$undef"
		fi
	done
	;;
*inline*) # Some variant of inline exists.
	echo "Keeping your $hint value of $perl_static_inline."
	val=$define
	;;
static)  # No inline capabilities
	echo "Keeping your $hint value of $perl_static_inline."
	val=$undef
	;;
*)  # Unrecognized previous value -- blindly trust the supplied
	# value and hope it makes sense.  Use old value for
	# d_static_inline, if there is one.
	echo "Keeping your $hint value of $perl_static_inline."
	case "$d_static_inline" in
		'') val=$define ;;
		*)  val=$d_static_inline ;;
	esac
	;;
esac
# Fallback to plain 'static' if nothing worked.
case "$perl_static_inline" in
'')
	perl_static_inline="static"
	val=$undef
	;;
esac
set d_static_inline
eval $setvar
$rm -f a.[co] b.[co]
$rm_try

d18560 1
a18560 1
: Checking 32bit alignedness
d18838 33
a18870 3
: length of character in bytes. Is always 1, otherwise it isnt C
: This used to be a test using sizeof
charsize=1
a21066 68
: Check the size of st_ino
$echo " "
$echo "Checking the size of st_ino..." >&4
$cat > try.c <<EOCP
#include <sys/stat.h>
#include <stdio.h>
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
int main() {
    struct stat st;
    printf("%d\n", (int)sizeof(st.st_ino));
    exit(0);
}
EOCP
set try
if eval $compile_ok; then
	val=`$run ./try`
	case "$val" in
	'')	st_ino_size=4
		$echo "(I can't execute the test program--guessing $st_ino_size.)" >&4
		;;
	*)	st_ino_size=$val
		$echo "Your st_ino is $st_ino_size bytes long."
		;;
	esac
else
	st_ino_size=4
	$echo "(I can't compile the test program--guessing $st_ino_size.)" >&4
fi
$rm_try

: Check if st_ino is signed
$echo " "
$echo "Checking the sign of st_ino..." >&4
$cat > try.c <<EOCP
#include <sys/stat.h>
#include <stdio.h>
int main() {
	struct stat foo;
        foo.st_ino = -1;
	if (foo.st_ino < 0)
		printf("-1\n");
	else
		printf("1\n");
}
EOCP
set try
if eval $compile; then
	val=`$run ./try`
	case "$val" in
	'')	st_ino_sign=1
		$echo "(I can't execute the test program--guessing unsigned.)" >&4
		;;
	*)	st_ino_sign=$val
		case "$st_ino_sign" in
		 1) $echo "Your st_ino is unsigned." ;;
		-1) $echo "Your st_ino is signed."   ;;
		esac
		;;
	esac
else
	st_ino_sign=1
	$echo "(I can't compile the test program--guessing unsigned.)" >&4
fi
$rm_try

a21214 215
: Determine if we can use sysctl with KERN_PROC_PATHNAME to find executing program
echo " "
echo "Determining whether we can use sysctl with KERN_PROC_PATHNAME to find executing program..." >&4
$cat >try.c <<'EOM'
/* Intentionally a long probe as I'd like to sanity check that the exact
   approach is going to work, as thinking it will work, but only having it
   part working at runtime is worse than not having it.  */

#include <sys/types.h>
#include <sys/sysctl.h>
#include <sys/param.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>

int
main(int argc, char **argv) {
    char *buffer;
    char *argv_leaf = strrchr(argv[0], '/');
    char *buffer_leaf;
    size_t size = 0;
    int mib[4];

    mib[0] = CTL_KERN;
    mib[1] = KERN_PROC;
    mib[2] = KERN_PROC_PATHNAME;
    mib[3] = -1;

    if (!argv_leaf) {
	fprintf(stderr, "Can't locate / in '%s'\n", argv[0]);
	return 1;
    }

    if (sysctl(mib, 4, NULL, &size, NULL, 0)) {
	perror("sysctl");
	return 2;
    }

    if (size < strlen(argv_leaf) + 1) {
	fprintf(stderr, "size %lu is too short for a path\n",
		(unsigned long) size);
	return 3;
    }

    if (size > MAXPATHLEN * MAXPATHLEN) {
	fprintf(stderr, "size %lu is too long for a path\n",
		(unsigned long) size);
	return 4;
    }

    buffer = malloc(size);
    if (!buffer) {
	perror("malloc");
	return 5;
    }

    if (sysctl(mib, 4, buffer, &size, NULL, 0)) {
	perror("sysctl");
	return 6;
    }

    if (strlen(buffer) + 1 != size) {
	fprintf(stderr, "size != strlen(buffer) + 1 (%lu != %lu)\n",
		(unsigned long)size, (unsigned long)strlen(buffer) + 1);
        return 7;
    }


    if (*buffer != '/') {
	fprintf(stderr, "Not an absolute path: '%s'\n", buffer);
	return 8;
    }

    if (strstr(buffer, "/./")) {
	fprintf(stderr, "Contains /./: '%s'\n", buffer);
	return 9;
    }

    if (strstr(buffer, "/../")) {
	fprintf(stderr, "Contains /../: '%s'\n", buffer);
	return 10;
    }

    buffer_leaf = strrchr(buffer, '/');
    if (strcmp(buffer_leaf, argv_leaf) != 0) {
	fprintf(stderr, "Leafnames differ: '%s' vs '%s'\n", argv[0], buffer);
	return 11;
    }

    free(buffer);

    return 0;
}
EOM

val=$undef
set try
if eval $compile_ok; then
	if $run ./try; then
		echo "You can use sysctl with KERN_PROC_PATHNAME to find the executing program." >&4
		val="$define"
	else
		echo "Nope, sysctl with KERN_PROC_PATHNAME doesn't work here." >&4
		val="$undef"
	fi
else
	echo "I'm unable to compile the test program." >&4
	echo "I'll assume no sysctl with KERN_PROC_PATHNAME here." >&4
	val="$undef"
fi
$rm_try
set usekernprocpathname
eval $setvar

: Determine if we can use _NSGetExecutablePath to find executing program
echo " "
echo "Determining whether we can use _NSGetExecutablePath to find executing program..." >&4
$cat >try.c <<'EOM'
/* Intentionally a long probe as I'd like to sanity check that the exact
   approach is going to work, as thinking it will work, but only having it
   part working at runtime is worse than not having it.  */
#include <mach-o/dyld.h>
#include <stdio.h>
#include <stdlib.h>
#include <sys/param.h>
#include <string.h>

int
main(int argc, char **argv) {
    char buf[1];
    uint32_t size = sizeof(buf);
    int result;
    char *buffer;
    char *tidied;
    char *argv_leaf = strrchr(argv[0], '/');
    char *tidied_leaf;

    if (!argv_leaf) {
	fprintf(stderr, "Can't locate / in '%s'\n", argv[0]);
	return 1;
    }

    _NSGetExecutablePath(buf, &size);
    if (size > MAXPATHLEN * MAXPATHLEN) {
	fprintf(stderr, "_NSGetExecutablePath size %u is too long for a path\n",
		(unsigned int) size);
	return 2;
    }

    buffer = malloc(size);
    if (!buffer) {
	perror("malloc");
	return 3;
    }

    result = _NSGetExecutablePath(buffer, &size);
    if (result != 0) {
	fprintf(stderr, "_NSGetExecutablePath returned %i for a size of %u\n",
		result, (unsigned int) size);
	return 4;
    }

    tidied = realpath(buffer, NULL);
    if (!tidied) {
	perror("realpath");
	return 5;
    }

    free(buffer);

    if (*tidied != '/') {
	fprintf(stderr, "Not an absolute path: '%s'\n", tidied);
	return 6;
    }

    if (strstr(tidied, "/./")) {
	fprintf(stderr, "Contains /./: '%s'\n", tidied);
	return 7;
    }

    if (strstr(tidied, "/../")) {
	fprintf(stderr, "Contains /../: '%s'\n", tidied);
	return 8;
    }

    tidied_leaf = strrchr(tidied, '/');
    if (strcmp(tidied_leaf, argv_leaf) != 0) {
	fprintf(stderr, "Leafnames differ: '%s' vs '%s'\n", argv[0], tidied);
	return 9;
    }

    free(tidied);

    return 0;
}
EOM

val=$undef
set try
if eval $compile_ok; then
	if $run ./try; then
		echo "You can use _NSGetExecutablePath to find the executing program." >&4
		val="$define"
	else
		echo "Nope, _NSGetExecutablePath doesn't work here." >&4
	fi
else
	echo "I'm unable to compile the test program." >&4
	echo "I'll assume no _NSGetExecutablePath here." >&4
fi
$rm_try
set usensgetexecutablepath
eval $setvar

a21643 29
: see if stdbool is available
: we want a real compile instead of Inhdr because some Solaris systems
: have stdbool.h, but it can only be used if the compiler indicates it
: is sufficiently c99-compliant.
echo " "
$cat >try.c <<EOCP
#include <stdio.h>
#include <stdbool.h>
int func(bool x)
{
    return x ? 1 : 0;
}
int main(int argc, char **argv)
{
    return func(0);
}
EOCP
set try
if eval $compile; then
	echo "<stdbool.h> found." >&4
	val="$define"
else
	echo "<stdbool.h> NOT found." >&4
	val="$undef"
fi
$rm_try
set i_stdbool
eval $setvar

a21785 19
		echo " $known_extensions $nonxs_extensions" > $$.tmp;
		if $contains " $this_ext " $$.tmp; then
		    echo >&4;
		    echo "Duplicate directories detected for extension $xxx" >&4;
		    echo "Configure cannot correctly recover from this - shall I abort?" >&4;
		    case "$knowitall" in
		    "") dflt=y;;
		    *) dflt=n;;
		    esac;
		    . ../UU/myread;
		    case "$ans" in
		    n*|N*) ;;
		    *) echo >&4;
		       echo "Ok.  Stopping Configure." >&4;
		       echo "Please remove the duplicate directory (eg using git clean) and then re-run Configure" >&4;
			exit 1;;
		    esac;
		    echo "Ok.  You will need to correct config.sh before running make." >&4;
		fi;
d21949 7
d21974 1
a21974 1
    echo "You have requested that only certain extensions be included..." >&4
d22144 1
a22144 1
	cd "$rsrc/cpan"
a22543 1
d_ipv6_mreq='$d_ipv6_mreq'
a22544 1
d_isblank='$d_isblank'
a22617 2
d_prctl='$d_prctl'
d_prctl_set_name='$d_prctl_set_name'
a22702 1
d_sin6_scope_id='$d_sin6_scope_id'
a22704 2
d_sockaddr_in6='$d_sockaddr_in6'
d_sockaddr_sa_len='$d_sockaddr_sa_len'
a22719 1
d_static_inline='$d_static_inline'
a22932 1
i_stdbool='$i_stdbool'
a23017 1
ld_can_script='$ld_can_script'
a23115 1
perl_static_inline='$perl_static_inline'
a23227 2
st_ino_sign='$st_ino_sign'
st_ino_size='$st_ino_size'
a23281 1
usekernprocpathname='$usekernprocpathname'
a23288 1
usensgetexecutablepath='$usensgetexecutablepath'
d23353 1
a23353 1
	set X `$cat UU/oldsyms`
d23358 1
a23358 1
		$cat <<EOM
d23362 1
a23362 1
		for sym in `$cat UU/oldsyms`; do
@


1.1.1.15
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d17 1
a17 1
#     svn co https://svn.code.sf.net/p/dist/code/trunk/dist
d31 1
a31 1
# Generated on Wed May  8 15:28:09 CEST 2013 [metaconfig 3.5 PL0]
a334 1
useversionedarchname=''
a725 2
d_ip_mreq=''
d_ip_mreq_source=''
a726 1
d_ipv6_mreq_source=''
a849 1
bootstrap_charset=''
d1423 1
a1423 1
$me:  Fatal Error:  I can't find a Bourne Shell anywhere.
d1426 1
a1426 1
Please contact me (Perl Maintainers) at perlbug@@perl.org and
d2711 1
a2711 1
		fi
a3099 4
# Downcase everything to avoid ambiguity.
# Remove slashes and single quotes so we can use parts of this in
# directory and file names.
# Remove newlines so myuname is sane to use elsewhere.
d3102 1
a3102 1
myuname=`echo $myuname | $sed -e "s,['/],,g" | \
d3987 1
a3987 1
if $afs; then
d5257 1
a5257 1
*-fstack-protector*)
d5260 1
a5260 1
	*) dflt="$dflt -fstack-protector" ;;
a6016 26

: optionally add API version to the architecture for versioned archlibs
case "$useversionedarchname" in
$define|true|[yY]*) dflt='y';;
*)                  dflt='n';;
esac
rp='Add the Perl API version to your archname?'
. ./myread
case "$ans" in
y|Y)	useversionedarchname="$define" ;;
*)      useversionedarchname="$undef" ;;
esac
case "$useversionedarchname" in
$define)
        case "$archname" in
        *-$api_versionstring)
                echo "...and architecture name already has -$api_versionstring" >&4
                ;;
        *)
                archname="$archname-$api_versionstring"
                echo "...setting architecture name to $archname." >&4
                ;;
        esac
        ;;
esac

d7008 3
a7010 3
These directories will be searched after
	$sitearch
	$sitelib
d7028 1
a7028 1
' '|''|none)	otherlibdirs=' ' ;;
d7365 1
a7365 1
	'')
d7369 1
a7369 1
			echo "'nm' won't be sufficient on this system." >&4
d8008 1
d8017 1
a8017 14
			solaris) # See [perl #66604].  On Solaris 11, gcc -m64 on amd64
				# appears not to understand -G.  gcc versions at
				# least as old as 3.4.3 support -shared, so just
				# use that with Solaris 11 and later, but keep
				# the old behavior for older Solaris versions.
				case "$gccversion" in
					'') dflt='-G' ;;
					*)	case "$osvers" in
							2.?|2.10) dflt='-G' ;;
							*) dflt='-shared' ;;
						esac
						;;
				esac
				;;
d8131 1
a8131 1
		svr4*|nonstopux|dgux|dynixptx|esix|powerux|haiku|cygwin*)
d8302 3
d8356 1
a8356 1
'')
a8838 10
	case "$MAILDOMAIN" in
	'')
		if $test -s /etc/mailname; then
			maildomain=`$cat /etc/mailname`
		else
			maildomain="$myhostname$mydomain"
		fi
		;;
	*)  maildomain="$MAILDOMAIN";;
	esac
d8840 2
a8841 2
	'') dflt="$cf_by@@$maildomain";;
	*)  dflt="$cf_email";;
d10799 1
a10799 1
: see if varargs is available
a10850 1
val=''
a10866 9
	echo " "
	echo "*** WHOA THERE!!! ***" >&4
	echo "    Your C compiler \"$cc\" doesn't seem to support stdarg or varargs!" >&4
	case "$knowitall" in
	'')
	echo "    I'm giving up; maybe you can try again with a different compiler?" >&4
		exit 1
		;;
	esac
a11373 36
echo "Checking the availability struct ip_mreq ..." >&4
$cat >try.c <<EOF
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
int main() {
struct ip_mreq mreq;
return (mreq.imr_multiaddr.s_addr);
}
EOF
val="$undef"
set try; if eval $compile; then
       val="$define"
fi
set d_ip_mreq; eval $setvar
$rm_try

echo " "
echo "Checking the availability struct ip_mreq_source ..." >&4
$cat >try.c <<EOF
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
int main() {
struct ip_mreq_source mreq;
return (mreq.imr_multiaddr.s_addr);
}
EOF
val="$undef"
set try; if eval $compile; then
       val="$define"
fi
set d_ip_mreq_source; eval $setvar
$rm_try

echo " "
a11391 18
echo "Checking the availability struct ipv6_mreq_source ..." >&4
$cat >try.c <<EOF
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
int main() {
struct ipv6_mreq_source mreq;
return (mreq.imr_multiaddr.s_addr);
}
EOF
val="$undef"
set try; if eval $compile; then
       val="$define"
fi
set d_ipv6_mreq_source; eval $setvar
$rm_try

echo " "
d11869 1
a11869 1
#endif
d12372 1
a12372 1
	val="$undef";
d15014 1
a15014 1
		return 0 ;
d15016 1
a15016 1
		return 1 ;
d17543 1
a17543 1
		echo "But you don't seem to have a usable struct sigaction." >&4
d17978 1
a17978 1
	# For gcc, prefer __inline__, which will still permit
d18108 2
a18109 2
		if set sys_errlist val -a d_syserrlst; eval $csym; $val; then
			echo "(You also have sys_errlist[], so we could roll our own strerror.)"
d18112 1
a18112 1
			echo "(Since you don't have sys_errlist[], strerror() is welcome.)"
d18120 1
a18120 1
		if set sys_errlist val -a d_syserrlst; eval $csym; $val; then
d18658 1
a18658 1
next|darwin) multiarch="$define" ;;
d18968 1
a18968 1
case "$usecrosscompile" in
d18971 2
a18972 1
You seem to be cross-compiling.  Skipping the memory alignment check.
a19009 11
		case "$multiarch" in
		*$define*)
			: The usual safe value is 8, but Darwin with -Duselongdouble
			: needs 16.  Hence, we will take 8 as a minimum, but allow
			: Configure to pick a larger value if needed.
			if $test "$dflt" -lt 8; then
			    dflt='8'
				echo "Setting alignment to 8 for multiarch support.">&4
			fi
			;;
		esac
d19025 1
a19025 34
: Determine if this is an EBCDIC system
echo " "
echo "Determining whether or not we are on an EBCDIC system..." >&4
$cat >try.c <<'EOM'
int main()
{
  if ('M'==0xd4) return 0;
  return 1;
}
EOM

case "$BOOTSTRAP_CHARSET" in
    Y|y|define) bootstrap_charset=$define	;;
    *)		bootstrap_charset=$undef	;;
esac

val=$undef
set try
if eval $compile_ok; then
	if $run ./try; then
		echo "You seem to speak EBCDIC." >&4
		val="$define"
	else
		echo "Nope, no EBCDIC, probably ASCII or some ISO Latin. Or UTF-8." >&4
	fi
else
	echo "I'm unable to compile the test program." >&4
	echo "I'll assume ASCII or some ISO Latin. Or UTF8." >&4
fi
$rm_try
set ebcdic
eval $setvar

: length of character in bytes. Is always 1, otherwise it is not C
d19305 1
a19305 1
		echo "Yuck, looks like I have to use rand()." >&4
d19369 3
a19371 3
	int i;
	unsigned long tmp;
	unsigned long max = 0L;
d19422 28
d19553 1
a19553 1
: check for fflush NULL behavior
a20250 1
	need_va_copy="$undef"
d20408 1
a20410 1
fn="f/($dflt)"
d21538 1
a21538 1
if eval $compile; then
d21640 1
a21640 1
if eval $compile; then
d21705 1
a21705 1
		echo "(Adding -y option to bison to get yacc-compatible behavior.)"
d21939 2
a21940 2
./Cppsym < Cppsym.know | $sort | $uniq > Cppsym.true
: Add in any Linux cpp "predefined macros":
a21945 1
    # Filter out macro arguments, such as Linux's __INT8_C(c)
d21947 1
a21947 1
       sed -e 's/#define[\ \  ]*//;s/[\ \     ].*$//' -e 's/(.*//' <$tHdrH'_cppsym.h' >$tHdrH'_cppsym.real'
d22269 1
a22269 1
		       echo "Please remove the duplicate directory (e.g. using git clean) and then re-run Configure" >&4;
d22387 6
a22392 1
		true|$define|y) avail_ext="$avail_ext $xxx" ;;
d22663 1
a22663 1
	    set X `echo " $libs " | sed -e 's@@ -lndbm @@ @@' -e 's@@ -lgdbm @@ @@' -e 's@@ -lgdbm_compat @@ @@' -e 's@@ -ldbm @@ @@' -e 's@@ -ldb @@ @@'`
a22787 1
bootstrap_charset='$bootstrap_charset'
a23024 2
d_ip_mreq='$d_ip_mreq'
d_ip_mreq_source='$d_ip_mreq_source'
a23025 1
d_ipv6_mreq_source='$d_ipv6_mreq_source'
a23795 1
useversionedarchname='$useversionedarchname'
@


1.1.1.16
log
@Import perl-5.20.1
@
text
@d31 1
a31 1
# Generated on Wed Jun  4 08:58:13 CEST 2014 [metaconfig 3.5 PL0]
d94 1
a94 1
if test -d c:/. || ( uname -a | grep -i 'os\(/\|\)2' 2>&1 ) 2>&1 >/dev/null ; then
d102 1
a102 1
		*cygwin|*msys) ;;
a208 3
hostgenerate=''
hostosname=''
hostperl=''
a210 5
targetdir=''
targetenv=''
targethost=''
targetmkdir=''
targetport=''
a314 1
sysroot=''
d709 2
d890 1
d935 1
a1005 1
incpth=''
a1163 1
targetsh=''
a1199 1
d_libname_unique=''
d1287 2
a1317 3
elif test -f /kern/cookiejar; then
: MiNT
    _exe=""
d1366 3
d1384 1
a1384 1
libswanted="socket bind inet nsl nm ndbm gdbm dbm db malloc dl ld sun"
a1437 4
: When cross-compiling we need to separate the sh-to-run-Configure-with from the sh-to-use-in-Perl
: default both to the same thing, cross-compilers can then set targetsh differently if they like
targetsh=$sh

a2308 42
: Set 'sysroot' to change the logical root directory to your headers and libraries see man gcc
: This is primarily meant for cross-compile environments, and may fail to be useful in other cases
if test "X$sysroot" = X; then
    sysroot=""
else
    case "$cc" in
	*gcc*|*g++*)
	    echo "Using $sysroot to find your headers and libraries, adding to ccflags"
	    # _sysroot is used in places where we need --sysroot=foo
	    # but using the rest of the flags could cause issues.
	    _sysroot="--sysroot=$sysroot";
	    case "$ccflags" in
		*sysroot*) ;;
		'undef'|*)
		ccflags="$ccflags $_sysroot"
	    esac
	    case "$ldflags" in
		*sysroot*) ;;
		'undef'|*)
		ldflags="$ldflags $_sysroot"
	    esac
	    case "$cppflags" in
		*sysroot*) ;;
		'undef'|*)
		cppflags="$cppflags $_sysroot"
	    esac
	    # lddlflags updated below in lddlflags section;
	    # same with cccdlflags
	    ;;
    esac

    # Adjust some defaults to also use $sysroot
    for var in xlibpth loclibpth locincpth glibpth; do
	eval xxx=\$$var
	eval $var=''
	for path in $xxx; do
	    eval $var=\"\$$var $sysroot$path\"
	done
    done

fi

d2397 1
a2397 1
pth="$pth $sysroot/lib $sysroot/usr/lib"
d2469 1
a2469 1
*)	if $less -R </dev/null >/dev/null 2>&1; then
a2788 6
if $test "X$targethost" = "X"; then
    targethost=""
fi
if $test "X$targetenv" = "X"; then
    targetenv=""
fi
d2792 5
a2796 7
	croak=''
	case "$cc" in
	*-gcc*|*-g++*) # A cross-compiling gcc, probably.
	    # arm-linux-androideabi-gcc  -> arm-linux-androideabi
	    # x86_64-w64-mingw32-gcc.exe -> x86_64-w64-mingw32
	    targetarch=`$echo $cc|$sed 's/-g[c\+][c\+].*$//'`
	    ar=`$echo $cc|$sed 's/-g[c\+][c\+]/-ar/'`
d2798 20
a2817 14
	    nm=`$echo $cc|$sed 's/-g[c\+][c\+]/-nm/'`
	    ranlib=`$echo $cc|$sed 's/-g[c\+][c\+]/-ranlib/'`
	    # We are in a weird spot. Just before us, some values
	    # were 'saved', to be restored after the hints are
	    # run.  This means that the changes we made to ar,
	    # nm and ranlib will get reverted.
	    # To avoid that, we hijack the saving mechanism and
	    # have it save our new values.
	    for file in ar nm ranlib; do
		eval xxx=\$$file
		eval $file=$xxx$_exe
		eval _$file=$xxx
	    done
	;;
d2821 23
a2843 1
	*)  echo "Using targetarch $targetarch." >&4 ;;
d2847 1
a2847 1
	*)  echo "Using targethost $targethost." >&4
a2853 50
    : compile a host miniperl and generate_uudmap, unless we got passed them
    if $test "X$hostperl" = X; then
      echo "Building host miniperl and generate_uudmap binaries" >&4
      before_host=`pwd`
      cd ..
      cd $src
      src=`pwd`
      rm -rf $src/host
      mkdir $src/host
      cd $src/host
      $src/Configure -des -Dusedevel -Dmksymlinks
      $make miniperl
      case "$hostgenerate" in
      '') $make generate_uudmap
          hostgenerate=$src/host/generate_uudmap
          ;;
       "$undef") hostgenerate=''
          ;;
      esac
      hostperl=$src/host/miniperl
      cd $before_host
    fi
    hostosname=`$hostperl -le 'print $^O'`
    ;;
*)
    usecrosscompile="$undef"
    ;;
esac

: Define -Dtargethost=somecomputer to run compiled tests on another machine
case "$targethost" in
    '') echo "Checking for cross-compile" >&4
    case "$usecrosscompile$multiarch" in
       *$define*) echo "Skipping the try tests in the rest of Configure as no targethost was defined when cross-compiling" >&4
         if [ -f Makefile ]; then
           echo " "
           echo "Now you must ensure config.sh, config.h and the generated headers exist and run a $make."
         else
           echo "Configure done."
         fi
       exit 0
       ;;
     *) echo "No targethost for running compiler tests against defined, running locally" >&4
        run=''
        to=:
        from=:
        ;;
    esac
    ;;
    *) echo "Using targethost $targethost." >&4
d2876 3
a2878 3
	run=$run-$targetrun
	to=$to-$targetto
	from=$from-$targetfrom
d2881 2
a2882 2
	     echo "Guessing targetdir $targetdir." >&4
	     ;;
d2886 2
a2887 7
	     echo "Guessing targetuser $targetuser." >&4
	     ;;
	esac
	case "$targetport" in
	'')  targetport=22
	     echo "Guessing targetport $targetport." >&4
	     ;;
a2896 1
env=''
a2903 7
case "\$1" in
-env)
  shift
  env=\$1
  shift
  ;;
esac
d2909 5
a2913 2
$to \$exe
$targetrun -p $targetport -l $targetuser $targethost "cd \$cwd && \$env \$exe \$@@"
a2915 3
	adb)
	    $touch $run
	    ;;
d2924 1
a2924 1
$targetrun -p $targetport -l $targetuser $targethost "mkdir -p \$@@"
d2941 1
a2941 1
    $targetto -P $targetport -r $q \$f $targetuser@@$targethost:\$f           2>/dev/null  || exit 1
d2945 1
a2945 1
    $targetto -P $targetport -r $q \$f $targetuser@@$targethost:$targetdir/\$f 2>/dev/null || exit 1
d2981 1
a2981 1
  $targetfrom -P $targetport $q $targetuser@@$targethost:$targetdir/\$f . || exit 1
d3027 1
a3027 1
	usecrosscompile="$undef"
a3257 3
		bitrig) osname=bitrig
			osvers="$3"
			;;
a3300 1
			$test -f /system/lib/libandroid.so && osname=linux-android
d3450 2
a3451 36
            case "$targetarch" in
                nto*|*-nto-*)
                    # Will load qnx.sh, which should change osname to nto
                    osname=qnx
                    osvers=''
                    ;;
                *linux-android*)
                    # Catch arm-linux-androideabi, mipsel-linux-android,
                    # and i686-linux-android
                    osname=linux-android
                    osvers=''
                    ;;
                *linux*)
                    # Something like arm-linux-gnueabihf is really just
                    # plain linux.
                    osname=linux
                    osvers=''
                    ;;
                *solaris*|*sunos*)
                    osname=solaris
                    # XXX perhaps we should just assume
                    # osvers to be 2, or maybe take the value
                    # from targetarch. Using $run before the
                    # hints are run is somewhat icky.
                    set X `$run $uname -a 2>/dev/null`
                    shift
                    case "$3" in
                        5*) osvers=`echo $3 | $sed 's/^5/2/g'` ;;
                        *)  osvers="$3" ;;
                    esac
                    ;;
                *)
		    osname=`echo $targetarch|sed 's,^[^-]*-,,'`
		    osvers=''
                ;;
            esac
d4158 1
a4158 1
Perl can be built to offer a form of threading support on some systems
d4162 3
a4164 1
and uses slightly more memory than plain Perl.
d4180 11
d4195 1
a4195 4
		$define|true|[yY]*)
			echo "5.005 threads are no longer supported"
			exit 1
		;;
d4351 2
a4352 2
$cat $sysroot/usr/include/signal.h $sysroot/usr/include/sys/signal.h >foo 2>/dev/null
if test -f /osf_boot || $contains 'OSF/1' $sysroot/usr/include/ctype.h >/dev/null 2>&1
a4522 16
# gcc 4.9 by default does some optimizations that break perl.
# see ticket 121505.
#
# The -fwrapv disables those optimizations (and probably others,) so
# for gcc 4.9 (and later, since the optimizations probably won't go
# away), add -fwrapv unless the user requests -fno-wrapv, which
# disables -fwrapv, or if the user requests -fsanitize=undefined,
# which turns the overflows -fwrapv ignores into runtime errors.
case "$gccversion" in
4.[3-9].*|4.[1-9][0-9]*|[5-9].*|[1-9][0-9]*)
    case "$ccflags" in
    *-fno-wrapv*|*-fsanitize=undefined*|*-fwrapv*) ;;
    *) ccflags="$ccflags -fwrapv" ;;
    esac
esac

a4523 1
: Use sysroot if set, so findhdr looks in the right place.
d4526 1
a4526 1
dflt="$sysroot/usr/include"
d4536 1
a4536 1
	if $cc $cppflags -E usr.c > usr.out && $contains / usr.out >/dev/null 2>&1; then
d4584 1
a4584 1
		echo 'cat >.$$.c; '"$cc $cppflags"' -E ${1+"$@@"} .$$.c; rm .$$.c' >cppstdin
d4627 1
a4627 1
	x_cpp="$cc $cppflags -E"
d4633 1
a4633 1
	x_cpp="$cc $cppflags -E"
d4639 1
a4639 1
	x_cpp="$cc $cppflags -P"
d4645 1
a4645 1
	x_cpp="$cc $cppflags -P"
d4651 1
a4651 1
	x_cpp="$cpp $cppflags"
d4657 1
a4657 1
	x_cpp="$cpp $cppflags"
a4716 79
: Adjust cppfilter for path component separator
case "$osname" in
vos) cppfilter="tr '\\\\>' '/' |" ;; # path component separator is >
os2) cppfilter="sed -e 's|\\\\\\\\|/|g' |" ;; # path component separator is \
*)   cppfilter='' ;;
esac

: Use gcc to determine libpth and incpth
# If using gcc or clang, we can get better values for libpth, incpth
# and usrinc directly from the compiler.
# Note that ccname for clang is also gcc.
case "$ccname" in
    gcc)
	$echo 'extern int foo;' > try.c
	set X `$cppstdin -v try.c 2>&1 | $awk '/^#include </,/^End of search /'|$cppfilter $grep '/include'`
	shift
	if $test $# -gt 0; then
	    incpth="$incpth $*"
	    incpth="`$echo $incpth|$sed 's/^ //'`"
	    for i in $*; do
		j="`$echo $i|$sed 's,/include$,/lib,'`"
		if $test -d $j; then
		    libpth="$libpth $j"
		fi
	    done
	    libpth="`$echo $libpth|$sed 's/^ //'`"
	    for xxx in $libpth $loclibpth $plibpth $glibpth; do
		if $test -d $xxx; then
		    case " $libpth " in
		    *" $xxx "*) ;;
		    *) libpth="$libpth $xxx";;
		    esac
		fi
	    done
	fi
	$rm -f try.c
	case "$usrinc" in
	'') for i in $incpth; do
		if $test -f $i/errno.h -a -f $i/stdio.h -a -f $i/time.h; then
		    usrinc="$i"
		    break
		fi
	    done
	    ;;
	esac

	case "$usecrosscompile" in
	$define|true|[yY]*)
	    case "$incpth" in
		'') echo "Incpth not defined." >&4; croak=y ;;
		*)  echo "Using incpth '$incpth'." >&4 ;;
	    esac
	    case "$libpth" in
		'') echo "Libpth not defined." >&4; croak=y ;;
		*)  echo "Using libpth '$libpth'." >&4 ;;
	    esac
	    case "$usrinc" in
		'') echo "Usrinc not defined." >&4; croak=y ;;
		*)  echo "Using usrinc $usrinc." >&4 ;;
	    esac
	    case "$croak" in
		y)
		if test "X$sysroot" = X; then
		    echo "Cannot continue, aborting." >&4; exit 1
		else
		    echo "Cross-compiling using sysroot $sysroot, failing to guess inc/lib paths is not fatal" >&4
		fi
		;;
	    esac
	    ;;
	esac
    ;;
esac

: Default value for incpth is just usrinc
case "$incpth" in
'') incpth="$usrinc";;
esac

d4720 2
a4721 2
	plibpth="$incpath/usr/lib $sysroot/usr/local/lib $sysroot/usr/ccs/lib"
    fi;;
d4730 1
a4747 8

if test "X$sysroot" != X; then
    $cat <<EOM
You have set sysroot to $sysroot, please supply the directories excluding sysroot

EOM
fi

a4784 19
: Does target system insist that shared library basenames are unique
$cat << EOM

Some dynamic loaders assume that the *basename* of shared library filenames
are globally unique.  We'll default this to undef as we assume your system
is not this weird. Set to defined if you're on one of them.

EOM

dflt='n'
rp='Make shared library basenames unique?'
. ./myread
case "$ans" in
y|Y) val="$define" ;;
*)   val="$undef"  ;;
esac
set d_libname_unique
eval $setvar

a5058 1
[ "X$sysroot" != "X" ] && echo "For sysroot = $sysroot";
d5060 1
a5060 1
if $cc $_sysroot -O2 $flag -o gcctest gcctest.c 2>gcctest.out && $run ./gcctest; then
d5343 14
a5356 1
		*)    echo 'The program compiled OK, but produced no output.' >> try.msg ;;
d5443 5
d5453 1
a5453 1
for usrincdir in $incpth
a5868 53
	: This test was common to all the OpenBSD forks, and seems harmless for
	: other platforms:
	echo " "
	echo "Checking if your C library has broken 64-bit functions..." >&4
	cat >try.c <<EOCP
#include <stdio.h>
typedef $uquadtype myULL;
int main (void)
{
    struct {
	double d;
	myULL  u;
    } *p, test[] = {
	{4294967303.15, 4294967303ULL},
	{4294967294.2,  4294967294ULL},
	{4294967295.7,  4294967295ULL},
	{0.0, 0ULL}
    };
    for (p = test; p->u; p++) {
	myULL x = (myULL)p->d;
	if (x != p->u) {
	    printf("buggy\n");
	    return 0;
	}
    }
    printf("ok\n");
    return 0;
}
EOCP
	set try
	if eval $compile_ok; then
	    libcquad=`$run ./try`
	    echo "Your C library's 64-bit functions are $libcquad."
	else
	    echo "(I can't seem to compile the test program.)"
	    echo "Assuming that your C library's 64-bit functions are ok."
	    libcquad="ok"
	fi
	$rm_try

	case "$libcquad" in
	    buggy*)
		cat >&4 <<EOM

*** You have a C library with broken 64-bit functions.
*** 64-bit support does not work reliably in this configuration.
*** Please rerun Configure without -Duse64bitint and/or -Dusemorebits.
*** Cannot continue, aborting.

EOM
		exit 1
		;;
	esac
d6625 96
d6726 5
d6739 1
a6739 1
    printf("%d\n", (int)sizeof(void *));
d6951 1
a6951 1
	'') dflt="$prefix" ;;
d7542 2
a7543 2
	$test -r $1 || set $sysroot/usr/ccs/lib/libc.$so
	$test -r $1 || set $sysroot/lib/libsys_s$_a
d7767 4
d7820 1
a7820 1
			echo "$extern_C void *$1$tdc; void *(*(p()))$tdc { return &$1; } int main() { if(p() && p() != (void *)main) return(0); else return(1); }"> try.c;
d7826 1
a7826 1
		echo "$extern_C void *$1$tdc; void *(*(p()))$tdc { return &$1; } int main() { if(p() && p() != (void *)main) return(0); else return(1); }"> try.c;
d7892 1
a7892 1
    $define|y|true)
d7896 1
a7896 1
    $undef|n|false)
d7900 1
a7900 1
    *)
d7905 3
d7917 1
a7917 1
    y*) usedl="$define"
d7919 3
a7921 2
	    '') if $test -f $rsrc/$dldir/dl_${osname}.xs ; then
		    dflt="$dldir/dl_${osname}.xs"
d7923 3
a7925 1
		    dflt="$dldir/dl_dlopen.xs"
d7927 1
a7927 1
		    dflt=''
d7930 1
a7930 1
	    *)  dflt="$dldir/$dlsrc"
d7933 1
a7933 1
	echo "The following dynamic loading files are available:"
d7951 2
a7952 2
	case "$cccdlflags" in
	    '') case "$gccversion" in
d7961 1
a7961 1
		    ;;
d7963 2
a7964 2
			darwin) dflt='none' ;;
			*linux*|svr4*|esix*|solaris|nonstopux) dflt='-fPIC' ;;
d7967 10
a7976 22
		esac ;;
	    ' ') dflt='none' ;;
	    *)   dflt="$cccdlflags" ;;
	esac

	case "$dflt" in
	    none) dflt='' ;;
	esac

	# If -Dsysroot was specified, now's the time to add it
	# to cccdlflags
	if test "X$sysroot" != X; then
	    case "$gccversion" in
		'') ;;
		*)  case "$dflt" in
			*sysroot*) ;;
			'undef'|*)
			    dflt="$dflt --sysroot=$sysroot" ;;
		    esac
		    ;;
	    esac
	fi
d7978 1
a7978 12
	case "$dflt" in
	    '') dflt='none';;
	esac

	rp="Any special flags to pass to $cc -c to compile shared library modules?"
	. ./myread
	case "$ans" in
	    none) cccdlflags=' ' ;;
	    *)    cccdlflags="$ans" ;;
	esac

	cat << EOM
d7998 8
a8005 7
    char b[4];
    int i = open("a.out",O_RDONLY);
    if(i == -1)
	exit(1); /* fail */
    if(read(i,b,4)==4 && b[0]==127 && b[1]=='E' && b[2]=='L' && b[3]=='F')
	exit(0); /* succeed (yes, it is ELF) */
    exit(1); /* fail */
d8009 1
a8009 1
	    bin_ELF="$define"
d8014 2
a8015 2
	    '') if $test $bin_ELF = "$define"; then
		    cat <<EOM
d8018 1
a8018 1
		    dflt="$cc"
d8020 2
a8021 2
		    echo "I'll use ld to build dynamic libraries."
		    dflt='ld'
d8024 1
a8024 1
	    *)  dflt="$ld"
d8028 2
a8029 2
	rp="What command should be used to create dynamic libraries?"
	. ./myread
d8032 1
a8032 1
	cat << EOM
d8041 5
a8045 5
	case "$lddlflags" in
	    '') case "$osname" in
		    haiku) dflt='-shared' ;;
		    hpux) dflt='-b';
			  case "$gccversion" in
d8047 25
a8071 35
			  esac
			  ;;
		    *linux*|irix*|gnu*)  dflt="-shared $optimize" ;;
		    next)  dflt='none' ;;
		    solaris) # See [perl #66604].
			    # On Solaris 11, gcc -m64 on amd64
			    # appears not to understand -G.  gcc versions at
			    # least as old as 3.4.3 support -shared, so just
			    # use that with Solaris 11 and later, but keep
			    # the old behavior for older Solaris versions.
			    case "$gccversion" in
				'') dflt='-G' ;;
				*)  case "$osvers" in
					2.?|2.10) dflt='-G' ;;
					*) dflt='-shared' ;;
				    esac
				    ;;
			    esac
			    ;;
		    sunos) dflt='-assert nodefinitions' ;;
		    svr4*|esix*|nonstopux) dflt="-G $ldflags" ;;
		    *)     dflt='none' ;;
		esac
		;;
	    *) dflt="$lddlflags" ;;
	esac

	: Only do this for gcc, since, for example, qcc has no concept
	: of --sysroot.
	if $test "X$sysroot" != X; then
	    case "$gccversion" in
		'') ;;
		*)  dflt="$dflt --sysroot $sysroot" ;;
	    esac
	fi
d8076 1
a8076 1
	    none) dflt='' ;;
d8079 1
a8079 1
	    case "$thisflag" in
d8081 1
a8081 1
		    case " $dflt " in
d8084 3
a8086 3
		    esac
		    ;;
	    esac
d8090 1
a8090 1
	    ''|' ') dflt='none' ;;
d8094 4
a8097 4
	    *-fstack-protector*)
		case "$dflt" in
		    *-fstack-protector*) ;; # Don't add it again
		    *) dflt="$dflt -fstack-protector" ;;
d8102 7
a8108 6
	rp="Any special flags to pass to $ld to create a dynamically loaded library?"
	. ./myread
	case "$ans" in
	    none) lddlflags=' ' ;;
	    *) lddlflags="$ans" ;;
	esac
d8117 17
a8133 18
	case "$ccdlflags" in
	    '') case "$osname" in
		    *linux*|hpux|gnu*) dflt='-Wl,-E' ;;
		    next|sunos)      dflt='none'   ;;
		    *)               dflt='none'   ;;
		esac ;;
	    ' ') dflt='none' ;;
	    *)   dflt="$ccdlflags" ;;
	esac
	rp="Any special flags to pass to $cc to use dynamic linking?"
	. ./myread
	case "$ans" in
	    none) ccdlflags=' ' ;;
	    *)    ccdlflags="$ans" ;;
	esac
	;;

    *)  usedl="$undef"
d8135 4
a8138 4
	dlsrc='dl_none.xs'
	lddlflags=''
	ccdlflags=''
	;;
d8143 3
a8145 3
    $define$define)
	# Abuse try.h and a.out names for neat cleanup
	$cat >try.c <<EOM
d8149 1
a8149 1
	$cat >try.h <<EOM
d8156 11
a8166 11
	if $cc $cccdlflags $ccdlflags $ccflags \
	       $ldflags $lddlflags -o a.out try.c \
	       -Wl,--version-script=try.h >/dev/null 2>&1 \
	   &&  $test -s a.out ; then
	    echo "ld supports scripting" >&4
	    ld_can_script="$define"
	else
	    echo "ld does not support scripting" >&4
	fi
	$rm_try
	;;
d8252 1
a8252 1
		*linux*|gnu*)  # ld won't link with a bare -lperl otherwise.
d8340 1
a8340 1
	freebsd|mirbsd|netbsd|openbsd|interix|dragonfly|bitrig)
a11325 10
    echo "Looks like you have Berkeley networking support." >&4
    d_socket="$define"
    if set setsockopt val -f; eval $csym; $val; then
	d_oldsock="$undef"
    else
	echo "...but it uses the old BSD 4.1c interface, rather than 4.2." >&4
	d_oldsock="$define"
    fi
else
    if $contains socklib libc.list >/dev/null 2>&1; then
d11328 46
a11373 27
	: we will have to assume that it supports the 4.2 BSD interface
	d_oldsock="$undef"
    else
	echo "You don't have Berkeley networking in libc$_a..." >&4
	if test "X$d_socket" = "X$define"; then
	    echo "...but you seem to believe that you have sockets." >&4
	else
	    for net in net socket
	    do
		if test -f $sysroot/usr/lib/lib$net$_a; then
		    ( ($nm $nm_opt $sysroot/usr/lib/lib$net$_a | eval $nm_extract) ||  \
		    $ar t $sysroot/usr/lib/lib$net$_a) 2>/dev/null >> libc.list
		    if $contains socket libc.list >/dev/null 2>&1; then
			d_socket="$define"
			socketlib="-l$net"
			case "$net" in
			net)
			    echo "...but the Wollongong group seems to have hacked it in." >&4
			    sockethdr="-I$sysroot/usr/netinclude"
			    ;;
			esac
			echo "Found Berkeley sockets interface in lib$net." >&4
			if $contains setsockopt libc.list >/dev/null 2>&1; then
			    d_oldsock="$undef"
			else
			    echo "...using the old BSD 4.1c interface, rather than 4.2." >&4
			    d_oldsock="$define"
a11374 2
			break
		    fi
a11375 6
	    done
	    if test "X$d_socket" != "X$define"; then
	       echo "or anywhere else I see." >&4
	       d_socket="$undef"
	       d_oldsock="$undef"
	    fi
a11376 1
    fi
d11396 1
a11396 1
    val="$define"
d11414 1
a11414 1
    val="$define"
d11432 1
a11432 1
    val="$define"
d11486 1
a11486 1
    val="$define"
d11512 2
a11513 2
    enum=`$echo $ENUM|./tr '[A-Z]' '[a-z]'`
    $cat >try.c <<EOF
d11520 6
a11525 6
    val="$undef"
    set try; if eval $compile; then
	val="$define"
    fi
    set d_${enum}; eval $setvar
    $rm_try
d12863 1
a12863 1
		$run ./mtry >/dev/null 2>&1
d15773 1
a15773 1
  uint16_t u = UINT16_MAX;
d17490 65
d17614 1
a17614 1
	eval $setvar
d17616 1
a17616 1
	eval $setvar
d17618 1
a17618 1
	eval $setvar
d17620 1
a17620 1
	eval $setvar
d18784 1
a18784 1
case "$multiarch" in
d18787 1
a18787 1
You seem to be doing a multiarchitecture build,
d19086 15
a19100 4
case "$alignbytes" in
    '') echo "Checking alignment constraints..." >&4
	if $test "X$uselongdouble" = Xdefine -a "X$d_longdbl" = Xdefine; then
	    $cat >try.c <<'EOCP'
d19103 2
a19104 2
	else
	    $cat >try.c <<'EOCP'
d19107 2
a19108 2
	fi
	$cat >>try.c <<'EOCP'
d19111 2
a19112 2
    char foo;
    NV bar;
d19120 6
a19125 15
	set try
	if eval $compile_ok; then
	    dflt=`$run ./try`
	else
	    dflt='8'
	    echo "(I can't seem to compile the test program...)"
	fi
	case "$multiarch" in
	    *$define*)
		: The usual safe value is 8, but Darwin with -Duselongdouble
		: needs 16.  Hence, we will take 8 as a minimum, but allow
		: Configure to pick a larger value if needed.
		if $test "$dflt" -lt 8; then
		    dflt='8'
		    echo "Setting alignment to 8 for multiarch support.">&4
d19127 13
d19142 4
a19145 2
	;;
    *) dflt="$alignbytes"
d19148 1
a19148 4
rp="Doubles must be aligned on a how-many-byte boundary?"
. ./myread
alignbytes="$ans"
$rm_try
d19455 20
a19474 1
echo "Using our internal random number implementation..." >&4
d19485 97
a19581 5
randfunc=Perl_drand48
drand01="Perl_drand48()"
seedfunc="Perl_drand48_init"
randbits=48
randseedtype=U32
d19665 1
a19665 1
	    $run ./try 2>/dev/null
d19676 1
a19676 1
		    $run ./try 2>/dev/null
d19690 1
a19690 1
		$run ./try 2>/dev/null
d19721 8
a19728 8
	while ((i = getc(stdin)) != -1
	       && (*bp++ = i) != '\n'
	       && bp < &buf[1024])
	/* DO NOTHING */ ;
	*bp = '\0';
	fprintf(stdout, "%s", buf);
	fflush(NULL);
	if (i == -1)
d19730 1
a19730 1
	bp = buf;
d19734 7
a19740 14
		fflushNULL="$define"
		set tryp
		if eval $compile; then
		    $rm -f tryp.out
		    # Copy the .c file to the remote host ($to is an ssh-alike if targethost is set)
		    if $test "X$targethost" != X; then
			$to tryp.c
			$to tryp
			$run "cat tryp.c | ./tryp " 2>/dev/null > tryp.out
		    else
			$cat tryp.c | $run ./tryp   2>/dev/null > tryp.out
		    fi
		    if cmp tryp.c tryp.out >/dev/null 2>&1; then
		       $cat >&4 <<EOM
d19744 1
a19744 1
		    else
d19748 4
a19751 4
			fflushNULL="$undef"
		    fi
		fi
		$rm -f core tryp.c tryp.core core.tryp.*
d19802 1
a19802 7
	    if $test "X$targethost" != X; then
		$to tryp.c
		$to tryp
		$run "cat tryp.c | ./tryp " 2>/dev/null > tryp.out
	    else
		$cat tryp.c | $run ./tryp   2>/dev/null > tryp.out
	    fi
d20940 1
a20940 1
	xxx="$sysroot/usr/include/signal.h $sysroot/usr/include/sys/signal.h"
d22011 1
a22011 1
./tr '-' '_' <<EOSH >>Cppsym.know
d22169 3
a22171 3
    set tcsetattr i_termios
    eval $inlibc
    val3="$i_termios"
d22175 3
a22177 3
    "$define") echo "You have POSIX termios.h... good!" >&4;;
    *)  if ./Cppsym pyr; then
	    case "`$run /bin/universe`" in
d22179 20
d22200 5
d22206 3
a22208 5
		    else
			echo "System is pyramid with BSD universe."
			./warn "<sgtty.h> not found--you could have problems."
		    fi;;
		*)  if $test `./findhdr termio.h`; then
d22210 3
a22212 26
			echo "<termio.h> found." >&4
		    else
			echo "System is pyramid with USG universe."
			./warn "<termio.h> not found--you could have problems."
		    fi;;
	    esac
	elif ./usg; then
	    if $test `./findhdr termio.h`; then
		echo "<termio.h> found." >&4
		val="$define"
	    elif $test `./findhdr sgtty.h`; then
		echo "<sgtty.h> found." >&4
		val2="$define"
	    else
		./warn "Neither <termio.h> nor <sgtty.h> found--cross fingers!"
	    fi
	else
	    if $test `./findhdr sgtty.h`; then
		echo "<sgtty.h> found." >&4
		val2="$define"
	    elif $test `./findhdr termio.h`; then
		echo "<termio.h> found." >&4
		val="$define"
	    else
		./warn "Neither <sgtty.h> nor <termio.h> found--cross fingers!"
	    fi
d22355 3
a22357 2
: If we are using the old config.sh, nonxs_extensions and xs_extensions may
: contain old or inaccurate or duplicate values.
a22358 1
xs_extensions=''
d22374 45
a22418 32
	    case "$this_ext" in
		Scalar/List/Utils) this_ext="List/Util"	;;
		PathTools)         this_ext="Cwd"	;;
	    esac;
	    echo " $xs_extensions $nonxs_extensions" > $tdir/$$.tmp;
	    if $contains " $this_ext " $tdir/$$.tmp; then
		echo >&4;
		echo "Duplicate directories detected for extension $xxx" >&4;
		echo "Configure cannot correctly recover from this - shall I abort?" >&4;
		case "$knowitall" in
		"") dflt=y;;
		*) dflt=n;;
		esac;
		. ../UU/myread;
		case "$ans" in
		n*|N*) ;;
		*) echo >&4;
		    echo "Ok.  Stopping Configure." >&4;
		    echo "Please remove the duplicate directory (e.g. using git clean) and then re-run Configure" >&4;
		    exit 1;;
		esac;
		echo "Ok.  You will need to correct config.sh before running make." >&4;
	    fi;
	    $ls -1 $xxx > $tdir/$$.tmp;
	    if   $contains "\.xs$" $tdir/$$.tmp > /dev/null 2>&1; then
		xs_extensions="$xs_extensions $this_ext";
	    elif $contains "\.c$"  $tdir/$$.tmp > /dev/null 2>&1; then
		xs_extensions="$xs_extensions $this_ext";
	    elif $test -d $xxx; then
		nonxs_extensions="$nonxs_extensions $this_ext";
	    fi;
	    $rm -f $tdir/$$.tmp;
d22435 11
a22445 1
set X $xs_extensions
d22447 1
a22447 1
xs_extensions=`echo "$*" | tr ' ' $trnl | $sort | tr $trnl ' '`
a22451 1
known_extensions=`echo $nonxs_extensions $xs_extensions  | tr ' ' $trnl | $sort | tr $trnl ' '`
d22455 1
a22455 1
for xxx in $xs_extensions ; do
a22619 2
	VMS*)
		;;
a22757 1
		known_extensions="$known_extensions Encode/$xxx"
a23169 1
d_libname_unique='$d_libname_unique'
d23311 1
d23423 1
a23499 3
hostgenerate='$hostgenerate'
hostosname='$hostosname'
hostperl='$hostperl'
d23519 1
d23551 1
a23603 1
incpth='$incpth'
a23870 1
sysroot='$sysroot'
a23873 6
targetdir='$targetdir'
targetenv='$targetenv'
targethost='$targethost'
targetmkdir='$targetmkdir'
targetport='$targetport'
targetsh='$targetsh'
d23924 1
d23964 1
@


1.1.1.17
log
@Import perl-5.20.2
@
text
@d8545 1
a8545 1
	bsdos|linux|irix*|dec_osf|gnu*|haiku)
d8550 3
@


1.1.1.18
log
@Import perl-5.24.2
@
text
@d14 4
a17 7
# Note: this Configure script was generated automatically by the tool
# called "metaconfig". Rather than working with this copy of Configure,
# you may wish to get metaconfig. Perl uses a modified version of this
# tool, available in the "dist" folder in the checkout of the git repo
#    $ git clone git://perl5.git.perl.org/metaconfig.git metaconfig
# The original dist package (including metaconfig) is available via SVN:
#    $ svn co https://svn.code.sf.net/p/dist/code/trunk/dist
d29 1
d31 1
a31 1
# Generated using [metaconfig 3.5 PL0]
d70 1
a70 4
if test -f /sys/utilities/MultiView ; then
	# AmigaOS, test -c for /dev/null is not useful
	:
elif test ! -c /dev/null ; then
a374 1
d_acosh=''
a378 2
d_asinh=''
d_atanh=''
a387 1
d_backtrace=''
a396 1
d_cbrt=''
a405 1
d_copysign=''
a424 1
d_dladdr=''
a452 4
d_erf=''
d_erfc=''
d_exp2=''
d_expm1=''
a461 3
d_fdclose=''
d_fdim=''
d_fegetround=''
a467 3
d_fma=''
d_fmax=''
d_fmin=''
a469 1
d_fp_classl=''
a470 1
d_fp_classify=''
a472 1
d_fpgetround=''
a571 2
d_hypot=''
d_ilogb=''
a579 1
d_isfinitel=''
a580 2
d_isinfl=''
d_isless=''
a582 3
d_isnormal=''
d_j0=''
d_j0l=''
a583 1
d_lc_monetary_2008=''
a585 2
d_lgamma=''
d_lgamma_r=''
a587 4
d_llrint=''
d_llrintl=''
d_llround=''
d_llroundl=''
a592 4
d_log1p=''
d_log2=''
d_logb=''
d_ldexpl=''
a593 1
longdblkind=''
a596 4
d_lrint=''
d_lrintl=''
d_lround=''
d_lroundl=''
a607 1
d_memmem=''
d619 1
a629 9
d_nan=''
d_nearbyint=''
d_duplocale=''
d_freelocale=''
d_newlocale=''
d_uselocale=''
i_xlocale=''
d_nextafter=''
d_nexttoward=''
a650 1
d_ptrdiff_t=''
a664 5
d_re_comp=''
d_regcmp=''
d_regcomp=''
d_remainder=''
d_remquo=''
a665 1
d_rint=''
a666 1
d_round=''
a670 1
d_scalbn=''
a725 8
d_siginfo_si_addr=''
d_siginfo_si_band=''
d_siginfo_si_errno=''
d_siginfo_si_fd=''
d_siginfo_si_pid=''
d_siginfo_si_status=''
d_siginfo_si_uid=''
d_siginfo_si_value=''
a761 1
d_stat=''
a809 1
d_tgamma=''
a822 1
d_trunc=''
a823 1
d_truncl=''
a847 1
d_wcscmp=''
a848 1
d_wcsxfrm=''
d861 1
a861 1
dtraceobject=''
a884 1
i_bfd=''
a897 1
i_execinfo=''
a898 1
i_fenv=''
a940 1
i_quadmath=''
a944 1
i_stdint=''
a996 4
doubleinfbytes=''
doublenanbytes=''
longdblinfbytes=''
longdblnanbytes=''
a1029 1
doublekind=''
d1039 4
a1058 3
doublemantbits=''
longdblmantbits=''
nvmantbits=''
a1234 1
usecbacktrace=''
a1251 1
usequadmath=''
d1334 4
a1349 3
: Trailing extension.  Override this in a hint file, if needed.
: Extra object files, if any, needed on this platform.
archobjs=''
d1373 2
a1387 3
archname=''
: set usethreads on the Configure command line to enable threads.
usereentrant='undef'
d1390 2
a1391 2
libswanted="cl pthread socket bind inet nsl ndbm gdbm dbm db malloc dl ld"
libswanted="$libswanted sun m crypt sec util c cposix posix ucb bsd BSD"
d1605 1
d1635 1
a1635 1
	-O) shift;;
d1744 1
a1744 1
  -O : ignored for backward compatibility
a1790 5
grep '\\' optdef.sh >/dev/null 2>&1
if test $? = 0; then
    echo "Configure does not support \\ in -D arguments"
    exit 1
fi
d1799 2
a1800 2
case "`echo AbyZ | tr '[:lower:]' '[:upper:]' 2>/dev/null`"-"`echo AbyZ | tr '[:upper:]' '[:lower:]' 2>/dev/null`" in
ABYZ-abyz) spackage=`echo $first | tr '[:lower:]' '[:upper:]'`$last;;
d1961 1
a1961 1
	. UU/optdef.sh
d2041 1
d2046 1
a2046 1
	case "`echo foo | tr '\n' x 2>/dev/null`" in
d2051 1
a2051 1
	case "`echo foo | tr '\012' x 2>/dev/null`" in
d2056 1
a2056 1
       case "`echo foo | tr '\r\n' xy 2>/dev/null`" in
d2649 1
a2649 1
		# bail out here with a useful message than fail
d2653 1
a2653 1
			$cat >&4 <<EOM
d2675 1
a2675 1
                fi
d2691 1
a2691 1
case "$cc" in
d2693 1
a2693 1
*)  $rm -f try try.*
d2705 1
a2705 1
        $cat >&4 <<EOM
d2798 1
d2800 5
a2804 20
			awk '{print $1}' $src/MANIFEST | sed -e 's:/\([^/]*\)$: \1:' |
			awk 'NF == 1 {
				dir=".";
				file=$1 "";
			     }
			     NF == 2 {
				dir=$1 "";
				file=$2 "";
			     }
			     {
				 print "# dir = ", dir, "file = ", file
				 mf[dir] = mf[dir]" "source"/"dir"/"file;
			     } END {
				 for (d in mf) {
				     if (d != ".") { print("mkdir -p "d) }
				     print("ln -sf "mf[d]" "d);
				 }
			     }' source="$src" > UU/mksymlinks.$$
			sh UU/mksymlinks.$$
			rm UU/mksymlinks.$$
d2810 15
a2829 4
			if test ! -f win32/win32.c; then
				echo "Failed to create the symlinks (win32/win32.c missing).  Aborting." >&4
				exit 1
			fi
d3129 2
a3130 2
case "`echo AbyZ | $tr '[:lower:]' '[:upper:]' 2>/dev/null`"-"`echo AbyZ | $tr '[:upper:]' '[:lower:]' 2>/dev/null`" in
ABYZ-abyz)
d3276 2
d3280 1
a3280 1
	$test -d /usr/include/minix && osname=minix && osvers=`$uname -r`
a3281 1
	$test -f /sys/utilities/MultiView && osname=amigaos
d3314 1
d3412 1
d3714 1
a3714 1
. ./optdef.sh
d4261 1
a4261 1
		 $awk '{ printf "%d_%d_%d", $1, $2, $3 }'`
d4263 1
a4263 1
		 $awk '{ printf "%d_%d_%d", $1, $2, $3 }'`
d4267 1
a4267 1
		 $awk '{ printf "%d.%d.%d", $1, $2, $3 }'`
d4269 1
a4269 1
		 $awk '{ printf "%d.%d.%d", $1, $2, $3 }'`
a5140 6
: Check if quadmath is requested
case "$usequadmath" in
"$define"|true|[yY]*) usequadmath="$define" ;;
*)                    usequadmath="$undef"  ;;
esac

a5153 6
case "$usecbacktrace" in
"$define") libswanted="$libswanted bfd" ;;
esac
case "$usequadmath" in
"$define") libswanted="$libswanted quadmath" ;;
esac
a5167 3
		xxx=`ls $thisdir/lib$thislib.[0-9].$so 2>/dev/null|sed -n '$p'`
	        $test -f "$xxx" && eval $libscheck
		$test -f "$xxx" && libstyle=shared
d5367 3
a5369 14
	case "$osname" in
	amigaos) ;; # -fstack-protector builds but doesn't work
	*)	case "$gccversion" in
		?*)	set stack-protector-strong -fstack-protector-strong
			eval $checkccflag
			case "$dflt" in
			*-fstack-protector-strong*) ;; # It got added.
			*) # Try the plain/older -fstack-protector.
			   set stack-protector -fstack-protector
			   eval $checkccflag
			   ;;
			esac
			;;
		esac
d5445 1
a5445 6
*)  set X $ccflags; shift
    case " $cppflags " in
    *" $1 "*) ;;  # Try to avoid doubling the cppflags.
    *) cppflags="$cppflags $ccflags" ;;
    esac
    ;;
a5511 6
*-fstack-protector-strong*)
	case "$dflt" in
	*-fstack-protector-strong*) ;; # Don't add it again
	*) dflt="$dflt -fstack-protector-strong" ;;
	esac
	;;
a5642 5
amigaos) fieldn=3 ;;  # Workaround for a bug in abc (pdksh).
esac
case "$fieldn" in
'')
case "$osname" in
a5666 2
;;
esac
d6191 1
a6191 1
: Check if we are using the GNU C library
d6193 4
a6196 7
echo "Checking for GNU C Library..." >&4
cat >try.c <<'EOCP'
/* Find out version of GNU C library.  __GLIBC__ and __GLIBC_MINOR__
   alone are insufficient to distinguish different versions, such as
   2.0.6 and 2.0.7.  The function gnu_get_libc_version() appeared in
   libc version 2.1.0.      A. Dougherty,  June 3, 2002.
*/
d6198 5
a6202 1
int main(void)
d6204 2
a6205 15
#ifdef __GLIBC__
#   ifdef __GLIBC_MINOR__
#       if __GLIBC__ >= 2 && __GLIBC_MINOR__ >= 1 && !defined(__cplusplus)
#           include <gnu/libc-version.h>
	    printf("%s\n",  gnu_get_libc_version());
#       else
	    printf("%d.%d\n",  __GLIBC__, __GLIBC_MINOR__);
#       endif
#   else
	printf("%d\n",  __GLIBC__);
#   endif
    return 0;
#else
    return 1;
#endif
d6208 19
d6228 1
a6228 1
if eval $compile_ok && $run ./try > glibc.ver; then
d6230 1
a6230 2
	gnulibc_version=`$cat glibc.ver`
	echo "You are using the GNU C Library version $gnulibc_version"
d6233 1
a6233 2
	gnulibc_version=''
	echo "You are not using the GNU C Library"
d6235 2
a6236 2
$rm_try glibc.ver
set d_gnulibc
d6239 19
a6257 6
: see if nm is to be used to determine whether a symbol is defined or not
case "$usenm" in
'')
	dflt=''
	case "$d_gnulibc" in
	"$define")
d6259 10
a6268 23
		echo "nm probably won't work on the GNU C Library." >&4
		dflt=n
		;;
	esac
	case "$dflt" in
	'')
		if $test "$osname" = aix -a "X$PASE" != "Xdefine" -a ! -f /lib/syscalls.exp; then
			echo " "
			echo "Whoops!  This is an AIX system without /lib/syscalls.exp!" >&4
			echo "'nm' won't be sufficient on this system." >&4
			dflt=n
		fi
		;;
	esac
	case "$dflt" in
	'') dflt=`$egrep 'inlibc|csym' $rsrc/Configure | wc -l 2>/dev/null`
		if $test $dflt -gt 20; then
			dflt=y
		else
			dflt=n
		fi
		;;
	esac
d6270 20
d6291 2
a6292 4
	case "$usenm" in
	true|$define) dflt=y;;
	*) dflt=n;;
	esac
d6295 12
a6306 1
$cat <<EOM
d6308 6
a6313 12
I can use $nm to extract the symbols from your C libraries. This
is a time consuming task which may generate huge output on the disk (up
to 3 megabytes) but that should make the symbols extraction faster. The
alternative is to skip the 'nm' extraction part and to compile a small
test program instead to determine whether each symbol is present. If
you have a fast C compiler and/or if your 'nm' output cannot be parsed,
this may be the best solution.

You probably shouldn't let me use 'nm' if you are using the GNU C Library.

EOM
rp="Shall I use $nm to extract C symbols from the libraries?"
d6316 15
a6330 2
[Nn]*) usenm=false;;
*) usenm=true;;
d6333 11
a6343 3
runnm=$usenm
case "$reuseval" in
true) runnm=false;;
d6345 11
a6355 14

: nm options which may be necessary
case "$nm_opt" in
'') if $test -f /mach_boot; then
		nm_opt=''	# Mach
	elif $test -d /usr/ccs/lib; then
		nm_opt='-p'	# Solaris (and SunOS?)
	elif $test -f /dgux; then
		nm_opt='-p'	# DG-UX
	elif $test -f /lib64/rld; then
		nm_opt='-p'	# 64-bit Irix
	else
		nm_opt=''
	fi;;
d6357 20
a6376 9

: nm options which may be necessary for shared libraries but illegal
: for archive libraries.  Thank you, Linux.
case "$nm_so_opt" in
'')	case "$myuname" in
	*linux*|gnu*)
		if $nm --help | $grep 'dynamic' > /dev/null 2>&1; then
			nm_so_opt='--dynamic'
		fi
a6378 1
	;;
d6380 6
a6385 19

: Figure out where the libc is located
case "$runnm" in
true)
: get list of predefined functions in a handy place
echo " "
case "$libc" in
'') libc=unknown
	case "$libs" in
	*-lc_s*) libc=`./loc libc_s$_a $libc $libpth`
	esac
	;;
esac
case "$libs" in
'') ;;
*)  for thislib in $libs; do
	case "$thislib" in
	-lc|-lc_s)
		: Handle C library specially below.
d6387 8
a6394 20
	-l*)
		thislib=`echo $thislib | $sed -e 's/^-l//'`
		if try=`./loc lib$thislib.$so.'*' X $libpth`; $test -f "$try"; then
			:
		elif try=`./loc lib$thislib.$so X $libpth`; $test -f "$try"; then
			:
		elif try=`./loc lib$thislib$_a X $libpth`; $test -f "$try"; then
			:
		elif try=`./loc $thislib$_a X $libpth`; $test -f "$try"; then
			:
		elif try=`./loc lib$thislib X $libpth`; $test -f "$try"; then
			:
		elif try=`./loc $thislib X $libpth`; $test -f "$try"; then
			:
		elif try=`./loc Slib$thislib$_a X $xlibpth`; $test -f "$try"; then
			:
		else
			try=''
		fi
		libnames="$libnames $try"
a6395 1
	*) libnames="$libnames $thislib" ;;
a6396 1
	done
d6399 21
a6419 21
xxx=normal
case "$libc" in
unknown)
	set /lib/libc.$so
	for xxx in $libpth; do
		$test -r $1 || set $xxx/libc.$so
		: The messy sed command sorts on library version numbers.
		$test -r $1 || \
			set `echo blurfl; echo $xxx/libc.$so.[0-9]* | \
			tr ' ' $trnl | egrep -v '\.[A-Za-z]*$' | $sed -e '
				h
				s/[0-9][0-9]*/0000&/g
				s/0*\([0-9][0-9][0-9][0-9][0-9]\)/\1/g
				G
				s/\n/ /' | \
			 $sort | $sed -e 's/^.* //'`
		eval set \$$#
	done
	$test -r $1 || set $sysroot/usr/ccs/lib/libc.$so
	$test -r $1 || set $sysroot/lib/libsys_s$_a
	;;
d6421 17
a6437 1
	set blurfl
d6439 1
d6441 14
a6454 39
if $test -r "$1"; then
	echo "Your (shared) C library seems to be in $1."
	libc="$1"
elif $test -r /lib/libc && $test -r /lib/clib; then
	echo "Your C library seems to be in both /lib/clib and /lib/libc."
	xxx=apollo
	libc='/lib/clib /lib/libc'
	if $test -r /lib/syslib; then
		echo "(Your math library is in /lib/syslib.)"
		libc="$libc /lib/syslib"
	fi
elif $test -r "$libc" || (test -h "$libc") >/dev/null 2>&1; then
	echo "Your C library seems to be in $libc, as you said before."
elif $test -r $incpath/usr/lib/libc$_a; then
	libc=$incpath/usr/lib/libc$_a;
	echo "Your C library seems to be in $libc.  That's fine."
elif $test -r /lib/libc$_a; then
	libc=/lib/libc$_a;
	echo "Your C library seems to be in $libc.  You're normal."
else
	if tans=`./loc libc$_a blurfl/dyick $libpth`; $test -r "$tans"; then
		:
	elif tans=`./loc libc blurfl/dyick $libpth`; $test -r "$tans"; then
		libnames="$libnames "`./loc clib blurfl/dyick $libpth`
	elif tans=`./loc clib blurfl/dyick $libpth`; $test -r "$tans"; then
		:
	elif tans=`./loc Slibc$_a blurfl/dyick $xlibpth`; $test -r "$tans"; then
		:
	elif tans=`./loc Mlibc$_a blurfl/dyick $xlibpth`; $test -r "$tans"; then
		:
	else
		tans=`./loc Llibc$_a blurfl/dyick $xlibpth`
	fi
	if $test -r "$tans"; then
		echo "Your C library seems to be in $tans, of all places."
		libc=$tans
	else
		libc='blurfl'
	fi
d6456 5
a6460 3
if $test $xxx = apollo -o -r "$libc" || (test -h "$libc") >/dev/null 2>&1; then
	dflt="$libc"
	cat <<EOM
d6462 5
a6466 2
If the guess above is wrong (which it might be if you're using a strange
compiler, or your machine supports multiple models), you can override it here.
d6468 4
a6471 6
EOM
else
	dflt=''
	echo $libpth | $tr ' ' $trnl | $sort | $uniq > libpath
	cat >&4 <<EOM
I can't seem to find your C library.  I've looked in the following places:
d6473 1
d6475 8
a6482 2
	$sed 's/^/	/' libpath
	cat <<EOM
d6484 101
a6584 1
None of these seems to contain your C library. I need to get its name...
d6587 43
d6631 4
a6634 4
fn=f
rp='Where is your C library?'
. ./getfile
libc="$ans"
d6636 2
d6639 103
a6741 10
echo $libc $libnames | $tr ' ' $trnl | $sort | $uniq > libnames
set X `cat libnames`
shift
xxx=files
case $# in 1) xxx=file; esac
echo "Extracting names from the following $xxx for later perusal:" >&4
echo " "
$sed 's/^/	/' libnames >&4
echo " "
$echo $n "This may take a while...$c" >&4
d6743 9
a6751 4
for file in $*; do
	case $file in
	*$so*) $nm $nm_so_opt $nm_opt $file 2>/dev/null;;
	*) $nm $nm_opt $file 2>/dev/null;;
d6753 65
a6817 1
done >libc.tmp
d6819 12
a6830 70
$echo $n ".$c"
$grep fprintf libc.tmp > libc.ptf
xscan='eval "<libc.ptf $com >libc.list"; $echo $n ".$c" >&4'
xrun='eval "<libc.tmp $com >libc.list"; echo "done." >&4'
xxx='[ADTSIWi]'
if com="$sed -n -e 's/__IO//' -e 's/^.* $xxx  *//p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e 's/^__*//' -e 's/^\([a-zA-Z_0-9$]*\).*xtern.*/\1/p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e '/|UNDEF/d' -e '/FUNC..GL/s/^.*|__*//p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e 's/^.* D __*//p' -e 's/^.* D //p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e 's/^_//' -e 's/^\([a-zA-Z_0-9]*\).*xtern.*text.*/\1/p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e 's/^.*|FUNC |GLOB .*|//p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$grep '|' | $sed -n -e '/|COMMON/d' -e '/|DATA/d' \
				-e '/ file/d' -e 's/^\([^ 	]*\).*/\1/p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e 's/^.*|FUNC |GLOB .*|//p' -e 's/^.*|FUNC |WEAK .*|//p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e 's/^__//' -e '/|Undef/d' -e '/|Proc/s/ .*//p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e 's/^.*|Proc .*|Text *| *//p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e '/Def. Text/s/.* \([^ ]*\)\$/\1/p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e 's/^[-0-9a-f ]*_\(.*\)=.*/\1/p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e 's/.*\.text n\ \ \ \.//p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="sed -n -e 's/^__.*//' -e 's/[       ]*D[    ]*[0-9]*.*//p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
else
	$nm -p $* 2>/dev/null >libc.tmp
	$grep fprintf libc.tmp > libc.ptf
	if com="$sed -n -e 's/^.* [ADTSIW]  *_[_.]*//p' -e 's/^.* [ADTSIW] //p'";\
		eval $xscan; $contains '^fprintf$' libc.list >/dev/null 2>&1
	then
		nm_opt='-p'
		eval $xrun
d6832 31
a6862 56
		echo " "
		echo "$nm didn't seem to work right. Trying $ar instead..." >&4
		com=''
		if $ar t $libc > libc.tmp && \
			$contains '^fprintf$' libc.tmp >/dev/null 2>&1
		then
			for thisname in $libnames $libc; do
				$ar t $thisname >>libc.tmp
			done
			$sed -e "s/\\$_o\$//" < libc.tmp > libc.list
			echo "Ok." >&4
		elif test "X$osname" = "Xos2" && $ar tv $libc > libc.tmp; then
			for thisname in $libnames $libc; do
				$ar tv $thisname >>libc.tmp
				emximp -o tmp.imp $thisname \
				    2>/dev/null && \
				    $sed -e 's/^\([_a-zA-Z0-9]*\) .*$/\1/p' \
				    < tmp.imp >>libc.tmp
				$rm -f tmp.imp
			done
			$sed -e "s/\\$_o\$//" -e 's/^ \+//' < libc.tmp > libc.list
			echo "Ok." >&4
		else
			echo "$ar didn't seem to work right." >&4
			echo "Maybe this is a Cray...trying bld instead..." >&4
			if  bld t $libc | \
				$sed -e 's/.*\///' -e "s/\\$_o:.*\$//" > libc.list &&
				$test -s libc.list
			then
				for thisname in $libnames; do
					bld t $libnames | \
					$sed -e 's/.*\///' -e "s/\\$_o:.*\$//" >>libc.list
					$ar t $thisname >>libc.tmp
				done
				echo "Ok." >&4
			else
				echo "That didn't work either.  Giving up." >&4
				exit 1
			fi
		fi
	fi
fi
nm_extract="$com"
case "$PASE" in
define)
    echo " "
    echo "Since you are compiling for PASE, extracting more symbols from libc.a ...">&4
    dump -Tv /lib/libc.a | awk '$7 == "/unix" {print $5 " " $8}' | grep "^SV" | awk '{print $2}' >> libc.list
    ;;
*)  if $test -f /lib/syscalls.exp; then
	echo " "
	echo "Also extracting names from /lib/syscalls.exp for good ole AIX..." >&4
	$sed -n 's/^\([^ 	]*\)[ 	]*syscall[0-9]*[ 	]*$/\1/p' \
		/lib/syscalls.exp >>libc.list
    fi
    ;;
d6864 9
a6872 1
;;
d6874 5
a6878 1
$rm -f libnames libpath
d6880 3
a6882 1
: Check if we are using C++
d6884 6
a6889 9
echo "Checking for C++..." >&4
$cat >try.c <<'EOCP'
#include <stdio.h>
int main(void)
{
#ifdef __cplusplus
    return 0;
#else
    return 1;
d6891 2
a6892 1
}
d6895 3
a6897 3
if eval $compile_ok && $run ./try; then
	val="$define"
	echo "You are using a C++ compiler."
d6899 2
a6900 2
	val="$undef"
	echo "You are not using a C++ compiler."
d6902 2
a6903 2
$rm_try cplusplus$$
set d_cplusplus
d6906 1
a6906 71
: is a C symbol defined?
csym='tlook=$1;
case "$3" in
-v) tf=libc.tmp; tdc="";;
-a) tf=libc.tmp; tdc="[]";;
*) tlook="^$1\$"; tf=libc.list; tdc="()";;
esac;
case "$d_cplusplus" in
    $define)	extern_C="extern \"C\""	;;
    *)		extern_C="extern"	;;
esac;
tx=yes;
case "$reuseval-$4" in
true-) ;;
true-*) tx=no; eval "tval=\$$4"; case "$tval" in "") tx=yes;; esac;;
esac;
case "$tx" in
yes)
	tval=false;
	if $test "$runnm" = true; then
		if $contains $tlook $tf >/dev/null 2>&1; then
			tval=true;
		elif $test "$mistrustnm" = compile -o "$mistrustnm" = run; then
			echo "$extern_C void *$1$tdc; void *(*(p()))$tdc { return &$1; } int main() { if(p() && p() != (void *)main) return(0); else return(1); }"> try.c;
			$cc -o try $optimize $ccflags $ldflags try.c >/dev/null 2>&1 $libs && tval=true;
			$test "$mistrustnm" = run -a -x try && { $run ./try$_exe >/dev/null 2>&1 || tval=false; };
			$rm_try;
		fi;
	else
		echo "$extern_C void *$1$tdc; void *(*(p()))$tdc { return &$1; } int main() { if(p() && p() != (void *)main) return(0); else return(1); }"> try.c;
		$cc -o try $optimize $ccflags $ldflags try.c $libs >/dev/null 2>&1 && tval=true;
		$rm_try;
	fi;
	;;
*)
	case "$tval" in
	$define) tval=true;;
	*) tval=false;;
	esac;
	;;
esac;
eval "$2=$tval"'

: define an is-in-libc? function
inlibc='echo " "; td=$define; tu=$undef;
sym=$1; var=$2; eval "was=\$$2";
tx=yes;
case "$reuseval$was" in
true) ;;
true*) tx=no;;
esac;
case "$tx" in
yes)
	set $sym tres -f;
	eval $csym;
	case "$tres" in
	true)
		echo "$sym() found." >&4;
		case "$was" in $undef) . ./whoa; esac; eval "$var=\$td";;
	*)
		echo "$sym() NOT found." >&4;
		case "$was" in $define) . ./whoa; esac; eval "$var=\$tu";;
	esac;;
*)
	case "$was" in
	$define) echo "$sym() found." >&4;;
	*) echo "$sym() NOT found." >&4;;
	esac;;
esac'

: check for length of double
d6908 1
a6908 1
case "$doublesize" in
d6910 2
a6911 2
	echo "Checking to see how big your double precision numbers are..." >&4
	$cat >try.c <<EOCP
d6919 1
a6919 1
    printf("%d\n", (int)sizeof(double));
d6924 99
a7022 10
	if eval $compile_ok; then
		doublesize=`$run ./try`
		echo "Your double is $doublesize bytes long."
	else
		dflt='8'
		echo "(I can't seem to compile the test program.  Guessing...)"
		rp="What is the size of a double precision number (in bytes)?"
		. ./myread
		doublesize="$ans"
	fi
a7024 1
$rm_try
d7026 1
a7026 5
: see if this is a float.h system
set float.h i_float
eval $inhdr

: check for long doubles
d7028 3
a7030 24
echo "Checking to see if you have long double..." >&4
echo 'int main() { long double x = 7.0; }' > try.c
set try
if eval $compile; then
	val="$define"
	echo "You have long double."
else
	val="$undef"
	echo "You do not have long double."
fi
$rm_try
set d_longdbl
eval $setvar

: see if ldexpl exists
set ldexpl d_ldexpl
eval $inlibc

: check for length of long double
case "${d_longdbl}${longdblsize}" in
$define)
	echo " "
	echo "Checking to see how big your long doubles are..." >&4
	$cat >try.c <<'EOCP'
d7032 3
a7034 37
int main()
{
	printf("%d\n", sizeof(long double));
}
EOCP
	set try
	set try
	if eval $compile; then
		longdblsize=`$run ./try`
		echo "Your long doubles are $longdblsize bytes long."
	else
		dflt='8'
		echo " "
		echo "(I can't seem to compile the test program.  Guessing...)" >&4
		rp="What is the size of a long double (in bytes)?"
		. ./myread
		longdblsize="$ans"
	fi
	if $test "X$doublesize" = "X$longdblsize"; then
		echo "That isn't any different from an ordinary double."
		echo "I'll keep your setting anyway, but you may see some"
		echo "harmless compilation warnings."
	fi
	;;
esac
$rm_try

$echo "Checking the kind of long doubles you have..." >&4
case "$d_longdbl" in
define)
$cat <<EOP >try.c
#$i_float I_FLOAT
#$i_stdlib I_STDLIB
#define LONGDBLSIZE $longdblsize
#define DOUBLESIZE $doublesize
#ifdef I_FLOAT
#include <float.h>
d7039 2
a7040 7
#include <stdio.h>
static const long double d = -0.1L;
int main() {
  unsigned const char* b = (unsigned const char*)(&d);
#if DOUBLESIZE == LONGDBLSIZE
  printf("0\n"); /* if it floats like double */
  exit(0);
d7042 2
a7043 11
#if (LDBL_MANT_DIG == 113 || FLT128_MANT_DIG == 113) && LONGDBLSIZE == 16
  if (b[0] == 0x9A && b[1] == 0x99 && b[15] == 0xBF) {
    /* IEEE 754 128-bit little-endian */
    printf("1\n");
    exit(0);
  }
  if (b[0] == 0xBF && b[14] == 0x99 && b[15] == 0x9A) {
    /* IEEE 128-bit big-endian, e.g. solaris sparc */
    printf("2\n");
    exit(0);
  }
d7045 9
a7053 71
/* For alignment 32-bit platforms have the 80 bits in 12 bytes,
 * while 64-bits platforms have it in 16 bytes.  The trailing bytes
 * cannot be trusted. */
#if LDBL_MANT_DIG == 64 && (LONGDBLSIZE == 16 || LONGDBLSIZE == 12)
  if (b[0] == 0xCD && b[9] == 0xBF) {
    /* x86 80-bit little-endian, sizeof 12 (ILP32, Solaris x86)
     * or 16 (LP64, Linux and OS X), 4 or 6 bytes of padding.
     * Also known as "extended precision". */
    printf("3\n");
    exit(0);
  }
  if (b[0] == 0xBF && b[9] == 0xCD) {
    /* Is there ever big-endian 80-bit, really?
     *
     * The Motorola 68881 had another "extended precision" format:
     * sign:1 exp:15 zero:16 integer:1 mantissa:63
     * for total of 96 bits of bytes.  The zero bits were unused.
     * See "M68000 FAMILY PROGRAMMER’S REFERENCE MANUAL" for more details.
     * If it ever becomes relevant, this format should be allocated
     * a new doublekind code since it's quite different from the Intel x87.
     */
    printf("4\n");
    exit(0);
  }
#endif
#if (LDBL_MANT_DIG == 106 || LDBL_MANT_DIG == 107) && LONGDBLSIZE == 16
  /* software "double double", the 106 is 53+53.
   * but irix thinks it is 107. */
  if (b[0] == 0x9A && b[7] == 0x3C && b[8] == 0x9A && b[15] == 0xBF) {
    /* double double 128-bit fully little-endian,
     * little-endian doubles in little-endian order,
     * 9a 99 99 99 99 99 59 3c 9a 99 99 99 99 99 b9 bf */
    printf("5\n");
    exit(0);
  }
  if (b[0] == 0xBF && b[7] == 0x9A && b[8] == 0x3C && b[15] == 0x9A) {
    /* double double 128-bit fully big-endian,
     * big-endian doubles in big-endian order,
     * e.g. PPC/Power and MIPS:
     * bf b9 99 99 99 99 99 9a 3c 59 99 99 99 99 99 9a */
    printf("6\n");
    exit(0);
  }
  if (b[0] == 0x9A && b[7] == 0xBF && b[8] == 0x9A && b[15] == 0x3C) {
    /* double double 128-bit mixed endian.
     * little-endian doubles in big-endian order,
     * e.g. ppc64el,
     * 9a 99 99 99 99 99 b9 bf 9a 99 99 99 99 99 59 3c */
    printf("7\n");
    exit(0);
  }
  if (b[0] == 0x3C && b[7] == 0x9A && b[8] == 0xBF && b[15] == 0x9A) {
    /* double double 128-bit mixed endian,
     * big-endian doubles in little-endian order,
     * 3c 59 99 99 99 99 99 9a bf b9 99 99 99 99 99 9a */
    printf("8\n");
    exit(0);
  }
#endif
  printf("-1\n"); /* unknown */
  exit(0);
}
EOP
set try
if eval $compile; then
    longdblkind=`$run ./try`
else
    longdblkind=-1
fi
;;
*) longdblkind=0 ;;
d7055 1
a7055 13
case "$longdblkind" in
0) echo "Your long doubles are doubles." >&4 ;;
1) echo "You have IEEE 754 128-bit little endian long doubles." >&4 ;;
2) echo "You have IEEE 754 128-bit big endian long doubles." >&4 ;;
3) echo "You have x86 80-bit little endian long doubles." >& 4 ;;
4) echo "You have x86 80-bit big endian long doubles." >& 4 ;;
5) echo "You have 128-bit fully little-endian double-double long doubles (64-bit LEs in LE)." >& 4 ;;
6) echo "You have 128-bit fully big-endian double-double long doubles (64-bit BEs in BE)." >& 4 ;;
7) echo "You have 128-bit mixed double-double long doubles (64-bit LEs in BE)." >& 4 ;;
8) echo "You have 128-bit mixed double-double long doubles (64-bit BEs in LE)." >& 4 ;;
*) echo "Cannot figure out your long double." >&4 ;;
esac
$rm_try
d7057 4
a7060 8
: determine the architecture name
echo " "
if xxx=`./loc arch blurfl $pth`; $test -f "$xxx"; then
	tarch=`arch`"-$osname"
elif xxx=`./loc uname blurfl $pth`; $test -f "$xxx" ; then
	if uname -m > tmparch 2>&1 ; then
		tarch=`$sed -e 's/ *$//' -e 's/ /_/g' \
			-e 's/$/'"-$osname/" tmparch`
d7062 1
a7062 1
		tarch="$osname"
a7063 9
	$rm -f tmparch
else
	tarch="$osname"
fi
case "$myarchname" in
''|"$tarch") ;;
*)
	echo "(Your architecture name used to be $myarchname.)"
	archname=''
d7066 12
a7077 3
case "$targetarch" in
'') ;;
*)  archname=`echo $targetarch|sed 's,^[^-]*-,,'` ;;
d7079 35
a7113 8
myarchname="$tarch"
case "$archname" in
'') dflt="$tarch";;
*) dflt="$archname";;
esac
rp='What is your architecture name'
. ./myread
archname="$ans"
d7115 10
a7124 4
: optionally add API version to the architecture for versioned archlibs
case "$useversionedarchname" in
$define|true|[yY]*) dflt='y';;
*)                  dflt='n';;
a7125 1
rp='Add the Perl API version to your archname?'
d7128 5
a7132 13
y|Y)	useversionedarchname="$define" ;;
*)      useversionedarchname="$undef" ;;
esac
case "$useversionedarchname" in
$define)
	case "$archname" in
	*-$api_versionstring)
		echo "...and architecture name already has -$api_versionstring" >&4
		;;
	*)
		archname="$archname-$api_versionstring"
		echo "...setting architecture name to $archname." >&4
		;;
d7134 9
a7142 23
	;;
esac

case "$usethreads" in
$define)
	echo "Threads selected." >&4
	case "$archname" in
	*-thread*) echo "...and architecture name already has -thread." >&4
		;;
	*)      archname="$archname-thread"
		echo "...setting architecture name to $archname." >&4
		;;
	esac
	;;
esac
case "$usemultiplicity" in
$define)
	echo "Multiplicity selected." >&4
	case "$archname" in
	*-multi*) echo "...and architecture name already has -multi." >&4
		;;
	*)      archname="$archname-multi"
		echo "...setting architecture name to $archname." >&4
d7145 7
d7154 11
a7164 3
case "$use64bitint$use64bitall" in
*"$define"*)
	case "$archname64" in
d7166 4
a7169 15
		echo "This architecture is naturally 64-bit, not changing architecture name." >&4
		;;
	*)
		case "$use64bitint" in
		"$define") echo "64 bit integers selected." >&4 ;;
		esac
		case "$use64bitall" in
		"$define") echo "Maximal 64 bitness selected." >&4 ;;
		esac
		case "$archname" in
		*-$archname64*) echo "...and architecture name already has $archname64." >&4
			;;
		*)      archname="$archname-$archname64"
			echo "...setting architecture name to $archname." >&4
			;;
d7172 1
a7172 17
	esac
esac
case "$uselongdouble" in
$define)
	echo "Long doubles selected." >&4
	case "$longdblsize" in
	$doublesize)
		echo "...but long doubles are equal to doubles, not changing architecture name." >&4
		;;
	*)
		case "$archname" in
		*-ld*) echo "...and architecture name already has -ld." >&4
			;;
		*)      archname="$archname-ld"
			echo "...setting architecture name to $archname." >&4
			;;
		esac
d7175 5
d7182 18
a7199 8
case "$usequadmath" in
$define)
	echo "quadmath selected." >&4
	case "$archname" in
	*-ld*) echo "...and architecture name already has -quadmath." >&4
		;;
	*)      archname="$archname-quadmath"
		echo "...setting architecture name to $archname." >&4
d7201 1
d7203 5
d7210 6
a7215 3
if $test -f archname.cbu; then
	echo "Your platform has some specific hints for architecture name, using them..."
	. ./archname.cbu
d7218 2
a7219 25
: set the prefixit variable, to compute a suitable default value
prefixit='case "$3" in
""|none)
	case "$oldprefix" in
	"") eval "$1=\"\$$2\"";;
	*)
		case "$3" in
		"") eval "$1=";;
		none)
			eval "tp=\"\$$2\"";
			case "$tp" in
			""|" ") eval "$1=\"\$$2\"";;
			*) eval "$1=";;
			esac;;
		esac;;
	esac;;
*)
	eval "tp=\"$oldprefix-\$$2-\""; eval "tp=\"$tp\"";
	case "$tp" in
	--|/*--|\~*--) eval "$1=\"$prefix/$3\"";;
	/*-$oldprefix/*|\~*-$oldprefix/*)
		eval "$1=\`echo \$$2 | sed \"s,^$oldprefix,$prefix,\"\`";;
	*) eval "$1=\"\$$2\"";;
	esac;;
esac'
d7221 12
a7232 10
: determine installation style
: For now, try to deduce it from prefix unless it is already set.
: Reproduce behavior of 5.005 and earlier, maybe drop that in 5.7.
case "$installstyle" in
'')	case "$prefix" in
		*perl*) dflt='lib';;
		*) dflt='lib/perl5' ;;
	esac
	;;
*)	dflt="$installstyle" ;;
d7234 3
a7236 4
: Probably not worth prompting for this since we prompt for all
: the directories individually, and the prompt would be too long and
: confusing anyway.
installstyle=$dflt
d7238 1
a7238 15
: determine where public executables go
echo " "
set dflt bin bin
eval $prefixit
fn=d~
rp='Pathname where the public executables will reside?'
. ./getfile
if $test "X$ansexp" != "X$binexp"; then
	installbin=''
fi
prefixvar=bin
: XXX Bug? -- ignores Configure -Dinstallprefix setting.
: XXX If this is fixed, also fix the "start perl" hunk below, which relies on
:     this via initialinstalllocation
. ./setprefixvar
d7240 1
a7240 14
case "$userelocatableinc" in
$define|true|[yY]*)	dflt='y' ;;
*)			dflt='n' ;;
esac
cat <<EOM

Would you like to build Perl so that the installation is relocatable, so that
library paths in @@INC are determined relative to the path of the perl binary?
This is not advised for system Perl installs, or if you need to run setid
scripts or scripts under taint mode.

If this doesn't make any sense to you, just accept the default '$dflt'.
EOM
rp='Use relocatable @@INC?'
d7243 6
a7248 2
y|Y)	val="$define" ;;
*)	val="$undef"  ;;
d7250 1
a7250 1
set userelocatableinc
d7253 21
a7273 11
initialinstalllocation="$binexp"
: Default prefix is now "up one level from where the binaries are"
case "$userelocatableinc" in
$define|true|[yY]*)
    bin=".../"
    binexp=".../"
    prefix=".../.."
    prefixexp=".../.."
    installprefixexp=".../.."
    ;;
esac
d7275 6
a7280 11
: determine where private library files go
: Usual default is /usr/local/lib/perl5/$version.
: Also allow things like /opt/perl/lib/$version, since
: /opt/perl/lib/perl5... would be redundant.
: The default "style" setting is made in installstyle.U
case "$installstyle" in
*lib/perl5*) set dflt privlib lib/$package/$version ;;
*)	 set dflt privlib lib/$version ;;
esac
eval $prefixit
$cat <<EOM
d7282 5
a7286 2
There are some auxiliary files for $package that need to be put into a
private library directory that is accessible by everyone.
d7288 1
a7288 7
EOM
fn=$binexp
fn=d~+
rp='Pathname where the private library files will reside?'
. ./getfile
prefixvar=privlib
. ./setprefixvar
d7290 2
a7291 5
: set the prefixup variable, to restore leading tilda escape
prefixup='case "$prefixexp" in
"$prefix") ;;
*) eval "$1=\`echo \$$1 | sed \"s,^$prefixexp,$prefix,\"\`";;
esac'
d7293 3
a7295 10
: determine where public architecture dependent libraries go
set archlib archlib
eval $prefixit
: privlib default is /usr/local/lib/$package/$version
: archlib default is /usr/local/lib/$package/$version/$archname
: privlib may have an optional trailing /share.
tdflt=`echo $privlib | $sed 's,/share$,,'`
tdflt=$tdflt/$archname
case "$archlib" in
'')	dflt=$tdflt
a7296 2
*)	dflt="$archlib"
    ;;
a7297 1
$cat <<EOM
d7299 8
a7306 4
$spackage contains architecture-dependent library files.  If you are
sharing libraries in a heterogeneous environment, you might store
these files in a separate location.  Otherwise, you can just include
them with the rest of the public library files.
d7308 1
a7309 11
fn=$binexp
fn=d+~
rp='Where do you want to put the public architecture-dependent libraries?'
. ./getfile
prefixvar=archlib
. ./setprefixvar
if $test X"$archlib" = X"$privlib"; then
	d_archlib="$undef"
else
	d_archlib="$define"
fi
d7311 22
a7332 2
: see if setuid scripts can be secure
$cat <<EOM
d7334 1
a7334 2
Some kernels have a bug that prevents setuid #! scripts from being
secure.  Some sites have disabled setuid #! scripts because of this.
d7336 7
a7342 3
First let's decide if your kernel supports secure setuid #! scripts.
(If setuid #! scripts would be secure but have been disabled anyway,
don't say that they are secure if asked.)
d7344 10
a7353 1
EOM
d7355 4
a7358 14
val="$undef"
if $test -d /dev/fd; then
	echo "#!$ls" >reflect
	chmod +x,u+s reflect
	./reflect >flect 2>&1
	if $contains "/dev/fd" flect >/dev/null; then
		echo "Congratulations, your kernel has secure setuid scripts!" >&4
		val="$define"
	else
		$cat <<EOM
If you are not sure if they are secure, I can check but I'll need a
username and password different from the one you are using right now.
If you don't have such a username or don't want me to test, simply
enter 'none'.
d7361 3
a7363 38
		rp='Other username to test security of setuid scripts with?'
		dflt='none'
		. ./myread
		case "$ans" in
		n|none)
			case "$d_suidsafe" in
			'')	echo "I'll assume setuid scripts are *not* secure." >&4
				dflt=n;;
			"$undef")
				echo "Well, the $hint value is *not* secure." >&4
				dflt=n;;
			*)	echo "Well, the $hint value *is* secure." >&4
				dflt=y;;
			esac
			;;
		*)
			$rm -f reflect flect
			echo "#!$ls" >reflect
			chmod +x,u+s reflect
			echo >flect
			chmod a+w flect
			echo '"su" will (probably) prompt you for '"$ans's password."
			su $ans -c './reflect >flect'
			if $contains "/dev/fd" flect >/dev/null; then
				echo "Okay, it looks like setuid scripts are secure." >&4
				dflt=y
			else
				echo "I don't think setuid scripts are secure." >&4
				dflt=n
			fi
			;;
		esac
		rp='Does your kernel have *secure* setuid scripts?'
		. ./myread
		case "$ans" in
		[yY]*)	val="$define";;
		*)	val="$undef";;
		esac
a7364 7
else
	echo "I don't think setuid scripts are secure (no /dev/fd directory)." >&4
	echo "(That's for file descriptors, not floppy disks.)"
	val="$undef"
fi
set d_suidsafe
eval $setvar
d7366 3
a7368 1
$rm -f reflect flect
d7370 2
a7371 17
: now see if they want to do setuid emulation
if $test $patchlevel -lt 11; then
echo " "
val="$undef"
case "$d_suidsafe" in
"$define")
	val="$undef"
	echo "No need to emulate SUID scripts since they are secure here." >&4
	;;
*)
	$cat <<EOM
Some systems have disabled setuid scripts, especially systems where
setuid scripts cannot be secure.  On systems where setuid scripts have
been disabled, the setuid/setgid bits on scripts are currently
useless.  It is possible for $package to detect those bits and emulate
setuid/setgid in a secure fashion.  This emulation will only work if
setuid scripts have been disabled in your kernel.
d7374 6
a7379 3
	case "$d_dosuid" in
	"$define") dflt=y ;;
	*) dflt=n ;;
d7381 7
a7387 7
	rp="Do you want to do setuid/setgid emulation?"
	. ./myread
	case "$ans" in
	[yY]*)	val="$define";;
	*)	val="$undef";;
	esac
	;;
d7389 14
a7402 6
set d_dosuid
eval $setvar
else
    case "$d_dosuid" in
	"$define")
	cat >&4 <<EOH
d7404 7
a7410 2
SUID emulation has been removed for 5.12
Please re-run Configure without -Dd_dosuid
d7412 14
a7425 20
EOH
	exit 1;
	;;
    esac
    d_dosuid=undef
fi

: Find perl5.005 or later.
echo "Looking for a previously installed perl5.005 or later... "
case "$perl5" in
'')	for tdir in `echo "$binexp$path_sep$PATH" | $sed "s/$path_sep/ /g"`; do
		: Check if this perl is recent and can load a simple module
		if $test -x $tdir/perl$exe_ext && $tdir/perl -Mless -e 'use 5.005;' >/dev/null 2>&1; then
			perl5=$tdir/perl
			break;
		elif $test -x $tdir/perl5$exe_ext && $tdir/perl5 -Mless -e 'use 5.005;' >/dev/null 2>&1; then
			perl5=$tdir/perl5
			break;
		fi
	done
d7427 3
a7429 1
*)	perl5="$perl5"
d7432 3
a7434 4
case "$perl5" in
'')	echo "None found.  That's ok.";;
*)	echo "Using $perl5." ;;
esac
d7436 3
a7438 1
: Set the siteprefix variables
d7441 3
a7443 12
After $package is installed, you may wish to install various
add-on modules and utilities.  Typically, these add-ons will
be installed under $prefix with the rest
of this package.  However, you may wish to install such add-ons
elsewhere under a different prefix.

If you do not wish to put everything under a single prefix, that's
ok.  You will be prompted for the individual locations; this siteprefix
is only used to suggest the defaults.

The default should be fine for most people.

d7445 3
a7447 6
fn=d~+
rp='Installation prefix to use for add-on modules and utilities?'
: XXX Here might be another good place for an installstyle setting.
case "$siteprefix" in
'') dflt=$prefix ;;
*)  dflt=$siteprefix ;;
d7449 2
d7452 4
a7455 12
: XXX Prefixit unit does not yet support siteprefix and vendorprefix
oldsiteprefix=''
case "$siteprefix" in
'') ;;
*)	case "$ans" in
	"$prefix") ;;
	*) oldsiteprefix="$prefix";;
	esac
	;;
esac
siteprefix="$ans"
siteprefixexp="$ansexp"
d7457 3
a7459 14
: determine where site specific libraries go.
: Usual default is /usr/local/lib/perl5/site_perl/$version
: The default "style" setting is made in installstyle.U
: XXX No longer works with Prefixit stuff.
prog=`echo $package | $sed 's/-*[0-9.]*$//'`
case "$sitelib" in
'') case "$installstyle" in
	*lib/perl5*) dflt=$siteprefix/lib/$package/site_$prog/$version ;;
	*)	 dflt=$siteprefix/lib/site_$prog/$version ;;
	esac
	;;
*)	dflt="$sitelib"
	;;
esac
d7462 3
a7464 5
The installation process will create a directory for
site-specific extensions and modules.  Most users find it convenient
to place all site-specific files in this directory rather than in the
main distribution directory.

d7466 8
a7473 2
fn=d~+
rp='Pathname for the site-specific library files?'
d7475 1
a7475 1
prefixvar=sitelib
d7477 4
a7480 1
sitelib_stem=`echo "$sitelibexp" | sed "s,/$version$,,"`
d7482 4
a7485 16
: Determine list of previous versions to include in @@INC
$cat > getverlist <<EOPL
#!$perl5 -w
use File::Basename;
\$api_versionstring = "$api_versionstring";
\$version = "$version";
\$stem = "$sitelib_stem";
\$archname = "$archname";
EOPL
	$cat >> getverlist <<'EOPL'
# The list found is store twice for each entry: the original name, and
# the binary broken down version as pack "sss", so sorting is easy and
# unambiguous. This will work for all versions that have a maximum of
# three digit groups, separate by '.'s or '_'s. Names are extended with
# ".0.0" to ensure at least three elements for the pack.
#					-- H.Merijn Brand (m)'06 23-10-2006
d7487 5
a7491 12
# Can't have leading @@ because metaconfig interprets it as a command!
;@@inc_version_list=();
# XXX Redo to do opendir/readdir?
if (-d $stem) {
    chdir($stem);
    ;@@candidates = map {
	[ $_, pack "sss", split m/[._]/, "$_.0.0" ] } glob("5.*");
    ;@@candidates = sort { $a->[1] cmp $b->[1]} @@candidates;
}
else {
    ;@@candidates = ();
}
d7493 3
a7495 16
($pversion, $aversion, $vsn5005) = map {
    pack "sss", split m/[._]/, "$_.0.0" } $version, $api_versionstring, "5.005";
foreach $d (@@candidates) {
    if ($d->[1] lt $pversion) {
	if ($d->[1] ge $aversion) {
	    unshift(@@inc_version_list, grep { -d } $d->[0]."/$archname", $d->[0]);
	}
	elsif ($d->[1] ge $vsn5005) {
	    unshift(@@inc_version_list, grep { -d } $d->[0]);
	}
    }
    else {
	# Skip newer version.  I.e. don't look in
	# 5.7.0 if we're installing 5.6.1.
    }
}
d7497 5
a7501 12
if (@@inc_version_list) {
    print join(' ', @@inc_version_list);
}
else {
    # Blank space to preserve value for next Configure run.
    print " ";
}
EOPL
chmod +x getverlist
case "$inc_version_list" in
'')	if test -x "$perl5$exe_ext"; then
		dflt=`$perl5 getverlist`
d7503 1
a7503 13
		dflt='none'
	fi
	;;
$undef) dflt='none' ;;
*)  eval dflt=\"$inc_version_list\" ;;
esac
case "$dflt" in
''|' ') dflt=none ;;
esac
case "$dflt" in
5.005) dflt=none ;;
esac
$cat <<EOM
d7505 1
a7505 7
In order to ease the process of upgrading, this version of perl
can be configured to use modules built and installed with earlier
versions of perl that were installed under $prefix.  Specify here
the list of earlier versions that this version of perl should check.
If Configure detected no earlier versions of perl installed under
$prefix, then the list will be empty.  Answer 'none' to tell perl
to not search earlier versions.
a7506 2
The default should almost always be sensible, so if you're not sure,
just accept the default.
d7508 11
a7518 41

rp='List of earlier versions to include in @@INC?'
. ./myread
case "$ans" in
[Nn]one|''|' '|$undef) inc_version_list=' ' ;;
*) inc_version_list="$ans" ;;
esac
case "$inc_version_list" in
''|' ')
	inc_version_list_init='0'
	d_inc_version_list="$undef"
	;;
*)	inc_version_list_init=`echo $inc_version_list |
		$sed -e 's/^/"/' -e 's/ /","/g' -e 's/$/",0/'`
	d_inc_version_list="$define"
	;;
esac
$rm -f getverlist

: see if malloc/malloc.h has to be included
set malloc/malloc.h i_mallocmalloc
eval $inhdr

: see if this is a malloc.h system
: we want a real compile instead of Inhdr because some systems have a
: malloc.h that just gives a compile error saying to use stdlib.h instead
echo " "
$cat >try.c <<EOCP
#include <stdlib.h>
#include <malloc.h>
#$i_mallocmalloc I_MALLOCMALLOC
#ifdef I_MALLOCMALLOC
# include <malloc/malloc.h>
#endif

int main () { return 0; }
EOCP
set try
if eval $compile; then
    echo "<malloc.h> found." >&4
    val="$define"
d7520 1
a7520 2
    echo "<malloc.h> NOT found." >&4
    val="$undef"
d7522 1
a7522 2
$rm_try
set i_malloc
d7525 1
a7525 1
: check for length of pointer
d7527 7
a7533 4
case "$ptrsize" in
'')
	echo "Checking to see how big your pointers are..." >&4
	$cat >try.c <<EOCP
d7535 16
a7550 3
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
a7551 4
int main()
{
    printf("%d\n", (int)sizeof(void *));
    exit(0);
d7554 13
a7566 18
	set try
	if eval $compile_ok; then
		ptrsize=`$run ./try`
		echo "Your pointers are $ptrsize bytes long."
	else
		dflt='4'
		echo "(I can't seem to compile the test program.  Guessing...)" >&4
		rp="What is the size of a pointer (in bytes)?"
		. ./myread
		ptrsize="$ans"
	fi
	;;
esac
$rm_try
case "$use64bitall" in
"$define"|true|[yY]*)
	case "$ptrsize" in
	4)	cat <<EOM >&4
d7568 9
a7576 17
*** You have chosen a maximally 64-bit build,
*** but your pointers are only 4 bytes wide.
*** Please rerun Configure without -Duse64bitall.
EOM
		case "$d_quad" in
		define)
			cat <<EOM >&4
*** Since you have quads, you could possibly try with -Duse64bitint.
EOM
			;;
		esac
		cat <<EOM >&4
*** Cannot continue, aborting.

EOM

		exit 1
d7579 9
a7587 12
	;;
esac


: determine whether to use malloc wrapping
echo " "
case "$usemallocwrap" in
[yY]*|true|$define)	dflt='y' ;;
[nN]*|false|$undef)	dflt='n' ;;
*)	case "$usedevel" in
	[yY]*|true|$define)	dflt='y' ;;
	*) dflt='n' ;;
d7589 7
a7595 41
	;;
esac
rp="Do you wish to wrap malloc calls to protect against potential overflows?"
. ./myread
usemallocwrap="$ans"
case "$ans" in
y*|true)
	usemallocwrap="$define" ;;
*)
	usemallocwrap="$undef" ;;
esac

: determine which malloc to compile in
echo " "
case "$usemymalloc" in
[yY]*|true|$define)	dflt='y' ;;
[nN]*|false|$undef)	dflt='n' ;;
*)	case "$ptrsize" in
	4) dflt='y' ;;
	*) dflt='n' ;;
	esac
	if test "$useithreads" = "$define"; then dflt='n'; fi
	;;
esac
rp="Do you wish to attempt to use the malloc that comes with $package?"
. ./myread
usemymalloc="$ans"
case "$ans" in
y*|true)
	usemymalloc='y'
	mallocsrc='malloc.c'
	mallocobj="malloc$_o"
	d_mymalloc="$define"
	case "$libs" in
	*-lmalloc*)
		: Remove malloc from list of libraries to use
		echo "Removing unneeded -lmalloc from library list" >&4
		set `echo X $libs | $sed -e 's/-lmalloc / /' -e 's/-lmalloc$//'`
		shift
		libs="$*"
		echo "libs = $libs" >&4
d7600 4
a7603 58
	usemymalloc='n'
	mallocsrc=''
	mallocobj=''
	d_mymalloc="$undef"
	;;
esac

: compute the return types of malloc and free
echo " "
$cat >malloc.c <<END
#$i_malloc I_MALLOC
#$i_stdlib I_STDLIB
#include <stdio.h>
#include <sys/types.h>
#ifdef I_MALLOC
#include <malloc.h>
#endif
#ifdef I_STDLIB
#include <stdlib.h>
#endif
#ifdef TRY_MALLOC
void *malloc();
#endif
#ifdef TRY_FREE
void free();
#endif
END
case "$malloctype" in
'')
	if $cc $ccflags -c -DTRY_MALLOC malloc.c >/dev/null 2>&1; then
		malloctype='void *'
	else
		malloctype='char *'
	fi
	;;
esac
echo "Your system wants malloc to return '$malloctype', it would seem." >&4

case "$freetype" in
'')
	if $cc $ccflags -c -DTRY_FREE malloc.c >/dev/null 2>&1; then
		freetype='void'
	else
		freetype='int'
	fi
	;;
esac
echo "Your system uses $freetype free(), it would seem." >&4
$rm -f malloc.[co]
: determine where site specific architecture-dependent libraries go.
: sitelib  default is /usr/local/lib/perl5/site_perl/$version
: sitearch default is /usr/local/lib/perl5/site_perl/$version/$archname
: sitelib may have an optional trailing /share.
case "$sitearch" in
'')	dflt=`echo $sitelib | $sed 's,/share$,,'`
	dflt="$dflt/$archname"
	;;
*)	dflt="$sitearch"
a7605 20
set sitearch sitearch none
eval $prefixit
$cat <<EOM

The installation process will also create a directory for
architecture-dependent site-specific extensions and modules.

EOM
fn=d~+
rp='Pathname for the site-specific architecture-dependent library files?'
. ./getfile
prefixvar=sitearch
. ./setprefixvar
if $test X"$sitearch" = X"$sitelib"; then
	d_sitearch="$undef"
else
	d_sitearch="$define"
fi

: Set the vendorprefix variables
d7608 7
a7614 5
The installation process will also create a directory for
vendor-supplied add-ons.  Vendors who supply perl with their system
may find it convenient to place all vendor-supplied files in this
directory rather than in the main distribution directory.  This will
ease upgrades between binary-compatible maintenance versions of perl.
d7616 1
a7616 7
Of course you may also use these directories in whatever way you see
fit.  For example, you might use them to access modules shared over a
company-wide network.

The default answer should be fine for most people.
This causes further questions about vendor add-ons to be skipped
and no vendor-specific directories will be configured for perl.
d7619 1
a7619 10
rp='Do you want to configure vendor-specific add-on directories?'
case "$usevendorprefix" in
define|true|[yY]*) dflt=y ;;
*)	: User may have set vendorprefix directly on Configure command line.
	case "$vendorprefix" in
	''|' ') dflt=n ;;
	*)	dflt=y ;;
	esac
	;;
esac
d7622 32
a7653 15
[yY]*)	fn=d~+
	rp='Installation prefix to use for vendor-supplied add-ons?'
	case "$vendorprefix" in
	'') dflt="$prefix" ;;
	*)  dflt=$vendorprefix ;;
	esac
	. ./getfile
	: XXX Prefixit unit does not yet support siteprefix and vendorprefix
	oldvendorprefix=''
	case "$vendorprefix" in
	'') ;;
	*)	case "$ans" in
		"$prefix") ;;
		*) oldvendorprefix="$prefix";;
		esac
a7655 7
	usevendorprefix="$define"
	vendorprefix="$ans"
	vendorprefixexp="$ansexp"
	;;
*)	usevendorprefix="$undef"
	vendorprefix=''
	vendorprefixexp=''
d7659 10
a7668 5
: Set the vendorlib variables
case "$vendorprefix" in
'')	d_vendorlib="$undef"
	vendorlib=''
	vendorlibexp=''
d7670 7
a7676 10
*)	d_vendorlib="$define"
	: determine where vendor-supplied modules go.
	: Usual default is /usr/local/lib/perl5/vendor_perl/$version
	case "$vendorlib" in
	'')
		prog=`echo $package | $sed 's/-*[0-9.]*$//'`
		case "$installstyle" in
		*lib/perl5*) dflt=$vendorprefix/lib/$package/vendor_$prog/$version ;;
		*)	     dflt=$vendorprefix/lib/vendor_$prog/$version ;;
		esac
d7678 20
a7697 1
	*)	dflt="$vendorlib"
d7699 1
d7701 1
a7701 5
	fn=d~+
	rp='Pathname for the vendor-supplied library files?'
	. ./getfile
	vendorlib="$ans"
	vendorlibexp="$ansexp"
d7704 20
a7723 9
vendorlib_stem=`echo "$vendorlibexp" | sed "s,/$version$,,"`
prefixvar=vendorlib
. ./installprefix

: Set the vendorarch variables
case "$vendorprefix" in
'')	d_vendorarch="$undef"
	vendorarch=''
	vendorarchexp=''
d7725 2
a7726 16
*)	d_vendorarch="$define"
	: determine where vendor-supplied architecture-dependent libraries go.
	: vendorlib  default is /usr/local/lib/perl5/vendor_perl/$version
	: vendorarch default is /usr/local/lib/perl5/vendor_perl/$version/$archname
	: vendorlib may have an optional trailing /share.
	case "$vendorarch" in
	'')	dflt=`echo $vendorlib | $sed 's,/share$,,'`
		dflt="$dflt/$archname"
		;;
	*)	dflt="$vendorarch" ;;
	esac
	fn=d~+
	rp='Pathname for vendor-supplied architecture-dependent files?'
	. ./getfile
	vendorarch="$ans"
	vendorarchexp="$ansexp"
d7729 19
a7747 57
prefixvar=vendorarch
. ./installprefix
if $test X"$vendorarch" = X"$vendorlib"; then
	d_vendorarch="$undef"
else
	d_vendorarch="$define"
fi

: Final catch-all directories to search
$cat <<EOM

Lastly, you can have perl look in other directories for extensions and
modules in addition to those already specified.
These directories will be searched after
	$sitearch
	$sitelib
EOM
test X"$vendorlib" != "X" && echo '	' $vendorlib
test X"$vendorarch" != "X" && echo '	' $vendorarch
echo ' '
case "$otherlibdirs" in
''|' ') dflt='none' ;;
*)	dflt="$otherlibdirs" ;;
esac
$cat <<EOM
Enter a colon-separated set of extra paths to include in perl's @@INC
search path, or enter 'none' for no extra paths.

EOM

rp='Colon-separated list of additional directories for perl to search?'
. ./myread
case "$ans" in
' '|''|none)	otherlibdirs=' ' ;;
*)	otherlibdirs="$ans" ;;
esac
case "$otherlibdirs" in
' ') val=$undef ;;
*)	val=$define ;;
esac
set d_perl_otherlibdirs
eval $setvar

: Cruising for prototypes
echo " "
echo "Checking out function prototypes..." >&4
$cat >prototype.c <<EOCP
#$i_stdlib I_STDLIB
#ifdef I_STDLIB
#include <stdlib.h>
#endif
int main(int argc, char *argv[]) {
	exit(0);}
EOCP
if $cc $ccflags -c prototype.c >prototype.out 2>&1 ; then
	echo "Your C compiler appears to support function prototypes."
	val="$define"
d7749 19
a7767 2
	echo "Your C compiler doesn't seem to understand function prototypes."
	val="$undef"
d7769 3
a7771 3
set prototype
eval $setvar
$rm -f prototype*
d7773 2
a7774 6
: Check if ansi2knr is required
case "$prototype" in
"$define") ;;
*)	ansi2knr='ansi2knr'
	echo " "
	cat <<EOM >&4
d7776 6
a7781 5
$me:  FATAL ERROR:
This version of $package can only be compiled by a compiler that
understands function prototypes.  Unfortunately, your C compiler
	$cc $ccflags
doesn't seem to understand them.  Sorry about that.
a7782 6
If GNU cc is available for your system, perhaps you could try that instead.

Eventually, we hope to support building Perl with pre-ANSI compilers.
If you would like to help in that effort, please contact <perlbug@@perl.org>.

Aborting Configure now.
d7784 2
a7785 3
	exit 2
	;;
esac
d7787 1
a7787 5
: DTrace support
dflt_dtrace='/usr/sbin/dtrace'
$test -x /usr/bin/dtrace && dflt_dtrace='/usr/bin/dtrace'

cat <<EOM
a7788 4
Perl can be built to support DTrace on platforms that support it.
DTrace is a diagnosis and performance analysis tool from Sun.

If this doesn't make any sense to you, just accept the default.
d7790 5
d7796 11
a7806 13
while $test 1 ; do
	case "$usedtrace" in
	$define|true|[yY]*)
		dflt='y'
		;;
	?*)
		dflt='y'
		dflt_dtrace=$usedtrace
		;;
	*)
		dflt='n'
		;;
	esac
d7808 4
a7811 5
	rp='Support DTrace if available?'
	. ./myread
	case "$ans" in
	y|Y)	val="$define" ;;
	*)      val="$undef" ;;
d7813 1
a7813 2
	set usedtrace
	eval $setvar
d7815 67
a7881 11
	test "X$usedtrace" != "X$define" && break

	echo " "
	rp='Where is the dtrace executable?'
	dflt=$dflt_dtrace
	. ./getfile
	val="$ans"
	set dtrace
	eval $setvar

	if $test -f $dtrace
d7883 8
a7890 3
		if $dtrace -h -s ../perldtrace.d \
			-o perldtrace.tmp >/dev/null 2>&1 \
			&& rm -f perldtrace.tmp
d7892 16
a7907 2
			echo " "
			echo "Good: your $dtrace knows about the -h flag."
d7909 33
a7941 35
			cat >&2 <<EOM

*** $me:  Fatal Error:  $dtrace doesn't support -h flag
***
*** Your installed dtrace doesn't support the -h switch to compile a D
*** program into a C header. Can't continue.

EOM
			exit 1
		fi
		break;
	fi

	case "$fastread" in
	yes)
		cat >&2 <<EOM

*** $me:  Fatal Error:  $dtrace not found.
*** Can't continue.

EOM
		exit 1
		;;
	*)
		echo "*** $dtrace was not found."
		echo " "
		;;
	esac
done

: See if we want extra modules installed
echo " "
case "$extras" in
'') dflt='n';;
*) dflt='y';;
d7943 1
a7943 32
cat <<EOM
Perl can be built with extra modules or bundles of modules which
will be fetched from the CPAN and installed alongside Perl.

Notice that you will need access to the CPAN; either via the Internet,
or a local copy, for example a CD-ROM or a local CPAN mirror.  (You will
be asked later to configure the CPAN.pm module which will in turn do
the installation of the rest of the extra modules or bundles.)

Notice also that if the modules require any external software such as
libraries and headers (the libz library and the zlib.h header for the
Compress::Zlib module, for example) you MUST have any such software
already installed, this configuration process will NOT install such
things for you.

If this doesn't make any sense to you, just accept the default '$dflt'.
EOM
rp='Install any extra modules (y or n)?'
. ./myread
case "$ans" in
y|Y)
	cat <<EOM

Please list any extra modules or bundles to be installed from CPAN,
with spaces between the names.  The names can be in any format the
'install' command of CPAN.pm will understand.  (Answer 'none',
without the quotes, to install no extra modules or bundles.)
EOM
	rp='Extras?'
	dflt="$extras"
	. ./myread
	extras="$ans"
d7945 1
a7945 59
case "$extras" in
''|'none')
	val=''
	$rm -f ../extras.lst
	;;
*)	echo "(Saving the list of extras for later...)"
	echo "$extras" > ../extras.lst
	val="'$extras'"
	;;
esac
set extras
eval $setvar
echo " "

: determine where html pages for programs go
set html1dir html1dir none
eval $prefixit
$cat <<EOM

If you wish to install html files for programs in $spackage, indicate
the appropriate directory here.  To skip installing html files,
answer "none".
EOM
case "$html1dir" in
''|none|$undef|' ') dflt=none ;;
*) dflt=$html1dir ;;
esac
fn=dn+~
rp="Directory for the main $spackage html pages?"
. ./getfile
prefixvar=html1dir
. ./setprefixvar
: Use ' ' for none so value is preserved next time through Configure
$test X"$html1dir" = "X" && html1dir=' '

: determine where html pages for libraries and modules go
set html3dir html3dir none
eval $prefixit
$cat <<EOM

If you wish to install html files for modules associated with $spackage,
indicate the appropriate directory here.  To skip installing html files,
answer "none".
EOM
: There is no obvious default.  If they have specified html1dir, then
: try to key off that, possibly changing .../html1 into .../html3.
case "$html3dir" in
'') html3dir=`echo "$html1dir" | $sed 's/1$/3$/'` ;;
*) dflt=$html3dir ;;
esac
fn=dn+~
rp="Directory for the $spackage module html pages?"
. ./getfile
prefixvar=html3dir
. ./setprefixvar
: Use ' ' for none so value is preserved next time through Configure
$test X"$html3dir" = "X" && html3dir=' '

: determine whether to install perl also as /usr/bin/perl
d7947 1
d7949 16
a7964 36
if $test -d /usr/bin -a "X$installbin" != X/usr/bin; then
	$cat <<EOM
Many scripts expect perl to be installed as /usr/bin/perl.

If you want to, I can install the perl you are about to compile
as /usr/bin/perl (in addition to $bin/perl).
EOM
	if test -f /usr/bin/perl; then
	    $cat <<EOM

However, please note that because you already have a /usr/bin/perl,
overwriting that with a new Perl would very probably cause problems.
Therefore I'm assuming you don't want to do that (unless you insist).

EOM
	    case "$installusrbinperl" in
	    "$define"|[yY]*)	dflt='y';;
	    *)			dflt='n';;
	    esac
	else
	    $cat <<EOM

Since you don't have a /usr/bin/perl I'm assuming creating one is okay.

EOM
	    case "$installusrbinperl" in
	    "$undef"|[nN]*)	dflt='n';;
	    *)			dflt='y';;
	    esac
	fi
	rp="Do you want to install perl as /usr/bin/perl?"
	. ./myread
	case "$ans" in
	[yY]*)	val="$define";;
	*)	val="$undef" ;;
	esac
d7967 1
d7969 2
a7970 1
set installusrbinperl
d7973 70
a8049 1
*Clang*)	;;
d8125 1
d8200 1
a8200 1
	if $cc $ccflags $ldflags -o a.out try.c >/dev/null 2>&1 && $run ./a.out; then
d8242 1
a8295 6
	    *-fstack-protector-strong*)
		case "$dflt" in
		    *-fstack-protector-strong*) ;; # Don't add it again
		    *) dflt="$dflt -fstack-protector-strong" ;;
		esac
		;;
d8321 2
a8322 2
		    sunos)             dflt='none'   ;;
		    *)                 dflt='none'   ;;
d8384 9
d8450 4
d8548 3
d8814 20
a9354 23
: see if backtrace exists
set backtrace d_backtrace
eval $inlibc

: add flags if using c backtrace
case "$usecbacktrace" in
  "") usecbacktrace=$undef ;;
  [yY]*|true|$define)
    case "$d_backtrace" in
      [yY]*|true|$define)
        case " $ccflags " in
	  *" -DUSE_C_BACKTRACE "*) ;; # Already there.
	  *) ccflags="$ccflags -DUSE_C_BACKTRACE -g" ;;
	  esac
        ;;
      *)
        echo "This system does not support backtrace" >&4
        usecbacktrace=$undef
        ;;
      esac
    ;;
  esac

a9833 87
: Check what kind of doubles your system has
$echo "Checking the kind of doubles you have..." >&4
$cat >try.c <<EOP
#$i_stdlib I_STDLIB
#define DOUBLESIZE $doublesize
#ifdef I_STDLIB
#include <stdlib.h>
#endif
#include <stdio.h>
static const double d = -0.1;
int main() {
  unsigned const char* b = (unsigned const char*)(&d);
#if DOUBLESIZE == 4
  if (b[0] == 0xCD && b[3] == 0xBD) {
    /* IEEE 754 32-bit little-endian */
    printf("1\n");
    exit(0);
  }
  if (b[0] == 0xBD && b[3] == 0xCD) {
    /* IEEE 754 32-bit big-endian */
    printf("2\n");
    exit(0);
  }
#endif
#if DOUBLESIZE == 8
  if (b[0] == 0x9A && b[7] == 0xBF) {
    /* IEEE 754 64-bit little-endian */
    printf("3\n");
    exit(0);
  }
  if (b[0] == 0xBF && b[7] == 0x9A) {
    /* IEEE 754 64-bit big-endian */
    printf("4\n");
    exit(0);
  }
  if (b[0] == 0x99 && b[3] == 0xBF && b[4] == 0x9A && b[7] == 0x99) {
   /* ARM mixed endian: two little-endian 32-bit floats, in big endian order:
    * 4 5 6 7 0 1 2 3 (MSB = 7, LSB = 0)
    * 99 99 b9 bf 9a 99 99 99 */
    printf("7\n");
    exit(0);
  }
  if (b[0] == 0x99 && b[3] == 0x9A && b[4] == 0xBF && b[7] == 0x99) {
   /* The opposite of case 7, mixed endian: two big-endian 32-bit floats,
    * in little endian order: 3 2 1 0 7 6 5 4 (MSB = 7, LSB = 0)
    * 99 99 99 9a bf b9 99 99 */
    printf("8\n");
    exit(0);
  }
#endif
#if DOUBLESIZE == 16
  if (b[0] == 0x9A && b[15] == 0xBF) {
    /* IEEE 754 128-bit little-endian */
    printf("5\n");
    exit(0);
  }
  if (b[0] == 0xBF && b[15] == 0x9A) {
    /* IEEE 754 128-bit big-endian */
    printf("6\n");
    exit(0);
  }
#endif
  /* Then there are old mainframe/miniframe formats like VAX, IBM, and CRAY.
   * Whether those environments can still build Perl is debatable. */
  printf("-1\n"); /* unknown */
  exit(0);
}
EOP
set try
if eval $compile; then
    doublekind=`$run ./try`
else
    doublekind=-1
fi
case "$doublekind" in
1) echo "You have IEEE 754 32-bit little endian doubles." >&4 ;;
2) echo "You have IEEE 754 32-bit big endian doubles." >&4 ;;
3) echo "You have IEEE 754 64-bit little endian doubles." >&4 ;;
4) echo "You have IEEE 754 64-bit big endian doubles." >&4 ;;
5) echo "You have IEEE 754 128-bit little endian doubles." >&4 ;;
6) echo "You have IEEE 754 128-bit big endian doubles." >&4 ;;
7) echo "You have IEEE 754 64-bit mixed endian doubles (32-bit LEs in BE)." >&4 ;;
8) echo "You have IEEE 754 64-bit mixed endian doubles (32-bit BEs in LE)." >&4 ;;
*) echo "Cannot figure out your double.  You VAX, or something?" >&4 ;;
esac
$rm_try

d9856 1
a9856 1
			sPRIFUldbl='"F"'; sPRIGUldbl='"G"'; sPRIEUldbl='"E"';
d9878 1
a9878 1
			sPRIFUldbl='"LF"'; sPRIGUldbl='"LG"'; sPRIEUldbl='"LE"';
d9900 1
a9900 1
			sPRIFUldbl='"llF"'; sPRIGUldbl='"llG"'; sPRIEUldbl='"llE"';
d9922 1
a9922 1
			sPRIFUldbl='"lF"'; sPRIGUldbl='"lG"'; sPRIEUldbl='"lE"';
a9949 32
: Before committing on uselongdouble, see whether that looks sane.
if $test "$uselongdouble" = "$define"; then
    message=""
    echo " "
    echo "Checking if your long double math functions work right..." >&4
    $cat > try.c <<EOF
#include <math.h>
#include <stdio.h>
int main() {
  printf("%"$sPRIgldbl"\n", sqrtl(logl(expl(cosl(sinl(0.0L))))+powl(2.0L, 3.0L)));
}
EOF
    case "$osname:$gccversion" in
    aix:)	saveccflags="$ccflags"
		ccflags="$ccflags -qlongdouble" ;; # to avoid core dump
    esac
    set try
    if eval $compile_ok; then
      yyy=`$run ./try`
    fi
    case "$yyy" in
    3) echo "Your long double math functions are working correctly." >&4 ;;
    *) echo "Your long double math functions are broken, not using long doubles." >&4
       uselongdouble=$undef
       ;;
    esac
    $rm_try
    case "$osname:$gccversion" in
    aix:)	ccflags="$saveccflags" ;; # restore
    esac
fi

a10248 4
: see if acosh exists
set acosh d_acosh
eval $inlibc

a10554 8
: see if asinh exists
set asinh d_asinh
eval $inlibc

: see if atanh exists
set atanh d_atanh
eval $inlibc

d11281 1
a11281 1
	$run ./try 2>/dev/null
d11381 1
a11381 1
	$run ./try 2>/dev/null
a11398 4
: see if cbrt exists
set cbrt d_cbrt
eval $inlibc

a11762 4
: see if copysign exists
set copysign d_copysign
eval $inlibc

d11973 4
d12171 3
a12207 4
: see if dladdr exists
set dladdr d_dladdr
eval $inlibc

d12970 2
a12971 2
	case "$d_fork:$d_pipe:$d_alarm" in
	define:define:define)
a13008 1
	int ret;
d13010 2
a13011 6
	ret = pipe(pd);	/* Down: child -> parent */
	if (ret != 0)
		exit(3);
	ret = pipe(pu);	/* Up: parent -> child */
	if (ret != 0)
		exit(3);
d13013 1
d13027 1
a13027 3
		ret = write(2, string, strlen(string));
		if (ret != strlen(string))
			exit(3);
d13040 1
a13040 3
		ret = write(pu[1], buf, 1);	/* Unblocks child, tell it to close our pipe */
		if (ret != 1)
			exit(3);
d13046 1
a13046 3
		ret = write(4, string, strlen(string));
		if (ret != strlen(string))
			exit(3);
d13052 1
a13052 3
	ret = read(pu[0], buf, 1);	/* Wait for parent to signal us we may continue */
	if (ret != 1)
		exit(3);
a13127 16
: see if erf exists
set erf d_erf
eval $inlibc

: see if erfc exists
set erfc d_erfc
eval $inlibc

: see if exp2 exists
set exp2 d_exp2
eval $inlibc

: see if expm1 exists
set expm1 d_expm1
eval $inlibc

a13572 12
: see if fdclose exists
set fdclose d_fdclose
eval $inlibc

: see if fdim exists
set fdim d_fdim
eval $inlibc

: see if fegetround exists
set fegetround d_fegetround
eval $inlibc

a13593 12
: see if fma exists
set fma d_fma
eval $inlibc

: see if fmax exists
set fmax d_fmax
eval $inlibc

: see if fmin exists
set fmin d_fmin
eval $inlibc

a13597 33
: see if this is a math.h system
set math.h i_math
eval $inhdr

: check for fpclassify
echo "Checking to see if you have fpclassify..." >&4
$cat >try.c <<EOCP
#$i_math I_MATH
#ifdef I_MATH
#include <math.h>
#endif
int main() { return fpclassify(1.0) == FP_NORMAL ? 0 : 1; }
EOCP
set try
if eval $compile; then
	val="$define"
	echo "You have fpclassify."
else
	val="$undef"
	echo "You do not have fpclassify."
fi
$rm_try
set d_fpclassify
eval $setvar

: see if fp_classify exists
set fp_classify d_fp_classify
eval $inlibc

: see if fp_classl exists
set fp_classl d_fp_classl
eval $inlibc

d13610 4
a13617 4
: see if fpgetround exists
set fpgetround d_fpgetround
eval $inlibc

a13639 20
: see if this is an xlocale.h system
set xlocale.h i_xlocale
eval $inhdr

: see if newlocale exists
set newlocale d_newlocale
eval $inlibc

: see if freelocale exists
set freelocale d_freelocale
eval $inlibc

: see if uselocale exists
set uselocale d_uselocale
eval $inlibc

: see if duplocale exists
set duplocale d_duplocale
eval $inlibc

a15244 8
: see if hypot exists
set hypot d_hypot
eval $inlibc

: see if ilogb exists
set ilogb d_ilogb
eval $inlibc

d15347 3
a15349 20
: check for isfinite
echo "Checking to see if you have isfinite..." >&4
$cat >try.c <<EOCP
#$i_math I_MATH
#ifdef I_MATH
#include <math.h>
#endif
int main() { return isfinite(0.0); }
EOCP
set try
if eval $compile; then
	val="$define"
	echo "You have isfinite."
else
	val="$undef"
	echo "You do not have isfinite."
fi
$rm_try
set d_isfinite
eval $setvar
d15351 2
a15352 2
: see if isfinitel exists
set isfinitel d_isfinitel
d15355 2
a15356 23
: check for isinf
echo "Checking to see if you have isinf..." >&4
$cat >try.c <<EOCP
#$i_math I_MATH
#ifdef I_MATH
#include <math.h>
#endif
int main() { return isinf(0.0); }
EOCP
set try
if eval $compile; then
	val="$define"
	echo "You have isinf."
else
	val="$undef"
	echo "You do not have isinf."
fi
$rm_try
set d_isinf
eval $setvar

: see if isinfl exists
set isinfl d_isinfl
a15358 42
: check for isless
echo "Checking to see if you have isless..." >&4
$cat >try.c <<EOCP
#$i_math I_MATH
#ifdef I_MATH
#include <math.h>
#endif
int main() { return isless(0.0); }
EOCP
set try
if eval $compile; then
	val="$define"
	echo "You have isless."
else
	val="$undef"
	echo "You do not have isless."
fi
$rm_try
set d_isless
eval $setvar

: check for isnan
echo "Checking to see if you have isnan..." >&4
$cat >try.c <<EOCP
#$i_math I_MATH
#ifdef I_MATH
#include <math.h>
#endif
int main() { return isnan(0.0); }
EOCP
set try
if eval $compile; then
	val="$define"
	echo "You have isnan."
else
	val="$undef"
	echo "You do not have isnan."
fi
$rm_try
set d_isnan
eval $setvar

a15362 29
: check for isnormal
echo "Checking to see if you have isnormal..." >&4
$cat >try.c <<EOCP
#$i_math I_MATH
#ifdef I_MATH
#include <math.h>
#endif
int main() { return isnormal(0.0); }
EOCP
set try
if eval $compile; then
	val="$define"
	echo "You have isnormal."
else
	val="$undef"
	echo "You do not have isnormal."
fi
$rm_try
set d_isnormal
eval $setvar

: see if j0 exists
set j0 d_j0
eval $inlibc

: see if j0l exists
set j0l d_j0l
eval $inlibc

a15366 25
: see if localeconv exists
set localeconv d_locconv
eval $inlibc

: see if libc has the POSIX.1-2008 currency locale rules
case "$d_locconv:$d_lc_monetary_2008" in
$define:)
	$cat >try.c <<EOCP
#include <locale.h>
int main() {
	struct lconv *lc = localeconv();
	char int_p_cs_precedes = lc->int_p_cs_precedes;
	return 0;
}
EOCP
	set try
	if eval $compile; then
		d_lc_monetary_2008="$define"
	else
		d_lc_monetary_2008="$undef"
	fi;
	$rm_try
	;;
esac

d15426 3
a15428 7
: see if lgamma exists
set lgamma d_lgamma
eval $inlibc

: see if lgamma_r exists
set lgamma_r d_lgamma_r
eval $inlibc
a15461 16
: see if llrint exists
set llrint d_llrint
eval $inlibc

: see if llrintl exists
set llrintl d_llrintl
eval $inlibc

: see if llround exists
set llround d_llround
eval $inlibc

: see if llroundl exists
set llroundl d_llroundl
eval $inlibc

d15581 4
a15588 28
: see if log1p exists
set log1p d_log1p
eval $inlibc

: see if log2 exists
set log2 d_log2
eval $inlibc

: see if logb exists
set logb d_logb
eval $inlibc

: see if lrint exists
set lrint d_lrint
eval $inlibc

: see if lrintl exists
set lrintl d_lrintl
eval $inlibc

: see if lround exists
set lround d_lround
eval $inlibc

: see if lroundl exists
set lroundl d_lroundl
eval $inlibc

a15633 4
: see if memmem exists
set memmem d_memmem
eval $inlibc

a15700 4
: see if truncl exists
set truncl d_truncl
eval $inlibc

d15710 63
d15779 2
a15780 2
	if $test "$d_truncl:$d_copysignl" = "$define:$define"; then
	    echo "You have both truncl and copysignl, so I can emulate modfl."
d15782 1
a15782 5
	    if $test "$d_aintl:$d_copysignl" = "$define:$define"; then
		echo "You have both aintl and copysignl, so I can emulate modfl."
	    else
		message="$message modfl"
	    fi
a15791 3
    if $test "$d_ldexpl" != "$define"; then
	message="$message ldexpl"
    fi
a15882 16
: see if nan exists
set nan d_nan
eval $inlibc

: see if nearbyint exists
set nearbyint d_nearbyint
eval $inlibc

: see if nextafter exists
set nextafter d_nextafter
eval $inlibc

: see if nexttoward exists
set nexttoward d_nexttoward
eval $inlibc

a15894 4
: see if this is a quadmath.h system
set quadmath.h i_quadmath
eval $inhdr

a15953 42
case "$usequadmath:$i_quadmath" in
define:define)
  nvtype="__float128"
  nvsize=16
  case "$libs" in
  *quadmath*) ;;
  *) $cat <<EOM >&4

*** You requested the use of the quadmath library, but you
*** do not seem to have the quadmath library installed.
*** Cannot continue, aborting.
EOM
    exit 1
    ;;
  esac
  ;;
define:*) $cat <<EOM >&4

*** You requested the use of the quadmath library, but you
*** do not seem to have the required header, <quadmath.h>.
EOM
  case "$gccversion" in
  [23].*|4.[0-5]*)
   $cat <<EOM >&4
*** Your gcc looks a bit old:
*** $gccversion
EOM
    ;;
  '')
   $cat <<EOM >&4
*** You are not running a gcc.
EOM
    ;;
  esac
  $cat <<EOM >&4
*** For the quadmath library you need at least gcc 4.6.
*** Cannot continue, aborting.
EOM
  exit 1
  ;;
esac

a16439 3
#ifdef __ANDROID__
#include <unistd.h>
#endif
d16460 1
a16460 6
: Check if there is a /proc symlink to the abs path of
: the executing program.  We will honor hints of d_procselfexe=$undef
: or procselfexe being non-empty, otherwise will try to determine both
: if we have readlink.
: AmigaOS will attempt to mount proc: aka /proc, if /proc/... is
: referenced, and AmigaOS does not have a proc filesystem anyway.
d16462 1
d16464 4
a16467 7
if $test "X$d_procselfexe" = Xundef; then
	procselfexe=''
elif $test "X$procselfexe" != X -a "X$procselfexe" != 'X '; then
	val="$define"
elif $test "X$d_readlink" = Xdefine; then
        : NetBSD first as /proc/self is a symlink to /proc/curproc,
        : and it feels more tidy to avoid an extra level of symlink
d16483 2
a16484 1
fi
a16637 19
: check for ptrdiff_t
echo " "
echo "Checking to see if you have ptrdiff_t..." >&4
$cat >try.c <<EOCP
#include <stddef.h>
int main() { ptrdiff_t x = 7; }
EOCP
set try
if eval $compile; then
	val="$define"
	echo "You have ptrdiff_t."
else
	val="$undef"
	echo "You do not have ptrdiff_t."
fi
$rm_try
set d_ptrdiff_t
eval $setvar

a16794 34
: see if regcomp, regcmp, or re_comp exist, for regular pattern matching
echo " "
if set regcomp val -f d_regcomp; eval $csym; $val; then
	echo 'regcomp() found.' >&4
	d_regcomp="$define"
	d_regcmp="$undef"
	d_re_comp="$undef"
elif set regcmp val -f d_regcmp; eval $csym; $val; then
	echo 'regcmp() found.' >&4
	d_regcmp="$define"
	d_regcomp="$undef"
	d_re_comp="$undef"
elif set re_comp val -f d_re_comp; eval $csym; $val; then
	echo 're_comp() found, assuming re_exec() also exists.' >&4
	d_re_comp="$define"
	d_regcomp="$undef"
	d_regcmp="$undef"
else
	$cat >&4 <<EOM
No regcomp(), regcmp() nor re_comp() found !! No regular pattern matching.
EOM
	d_regcmp="$undef"
	d_re_comp="$undef"
	d_regcomp="$undef"
fi

: see if remainder exists
set remainder d_remainder
eval $inlibc

: see if remquo exists
set remquo d_remquo
eval $inlibc

a16798 4
: see if rint exists
set rint d_rint
eval $inlibc

a16802 4
: see if round exists
set round d_round
eval $inlibc

a17037 4
: see if scalbn exists
set scalbn d_scalbn
eval $inlibc

a17804 96
: see what type pids are declared as in the kernel
rp="What is the type of process ids on this system?"
set pid_t pidtype int stdio.h sys/types.h
eval $typedef_ask

: see what type uids are declared as in the kernel
echo " "
echo "Looking for the type for user ids returned by getuid()."
set uid_t uidtype xxx stdio.h sys/types.h
eval $typedef
case "$uidtype" in
xxx)
	xxx=`./findhdr sys/user.h`
	set `grep '_ruid;' "$xxx" 2>/dev/null` unsigned short
	case $1 in
	unsigned) dflt="$1 $2" ;;
	*) dflt="$1" ;;
	esac
	;;
*) dflt="$uidtype";;
esac
case "$uidtype" in
uid_t)	echo "uid_t found." ;;
*)	rp="What is the type for user ids returned by getuid()?"
	. ./myread
	uidtype="$ans"
	;;
esac

: Define hasfield_t macro for Configure internal use
hasfield_t='varname=$1; struct=$2; type=$3; field=$4; shift; shift; shift; shift;
while $test $# -ge 2; do
    case "$1" in
	$define) echo "#include <$2>";;
    esac ;
    shift 2;
done > try.c;
echo "int main () { $struct foo; $type bar = foo.$field; }" >> try.c;
set try;
if eval $compile; then
	val="$define";
else
	val="$undef";
fi;
set $varname;
eval $setvar;
$rm_try'

: see what siginfo fields we have
case "$d_sigaction" in
"$define")
	echo "Checking if your siginfo_t has si_errno field...">&4
	set d_siginfo_si_errno siginfo_t int si_errno $d_sigaction signal.h
	eval $hasfield_t;

	echo "Checking if your siginfo_t has si_pid field...">&4
	set d_siginfo_si_pid siginfo_t $pidtype si_pid $d_sigaction signal.h
	eval $hasfield_t;

	echo "Checking if your siginfo_t has si_uid field...">&4
	set d_siginfo_si_uid siginfo_t $uidtype si_uid $d_sigaction signal.h
	eval $hasfield_t;

	echo "Checking if your siginfo_t has si_addr field...">&4
	set d_siginfo_si_addr siginfo_t "void *" si_addr $d_sigaction signal.h
	eval $hasfield_t;

	echo "Checking if your siginfo_t has si_status field...">&4
	set d_siginfo_si_status siginfo_t int si_status $d_sigaction signal.h
	eval $hasfield_t;

	echo "Checking if your siginfo_t has si_band field...">&4
	set d_siginfo_si_band siginfo_t long si_band $d_sigaction signal.h
	eval $hasfield_t;

	echo "Checking if your siginfo_t has si_value field...">&4
	set d_siginfo_si_value siginfo_t "union sigval" si_value $d_sigaction signal.h
	eval $hasfield_t;

	echo "Checking if your siginfo_t has si_fd field...">&4
	set d_siginfo_si_fd siginfo_t int si_fd $d_sigaction signal.h
	eval $hasfield_t;

	;;
*)
	d_siginfo_si_errno="$undef"
	d_siginfo_si_pid="$undef"
	d_siginfo_si_uid="$undef"
	d_siginfo_si_addr="$undef"
	d_siginfo_si_status="$undef"
	d_siginfo_si_band="$undef"
	d_siginfo_si_value="$undef"
	d_siginfo_si_fd="$undef"
	;;
esac

a18135 4
: see if stat exists
set stat d_stat
eval $inlibc

a18757 4
: see if tgamma exists
set tgamma d_tgamma
eval $inlibc

a18842 4
: see if trunc exists
set trunc d_trunc
eval $inlibc

d18910 1
a18910 1
darwin) multiarch="$define" ;;
d19151 3
a19198 28
: look for wcscmp
echo " "
$cat >try.c <<'EOCP'
#include <stdio.h>
#include <wchar.h>
int main ()
{
    wchar_t *s = L" ";
    return (wcscmp (s, s) ? 1 : 0);
    }
EOCP
set try
val="$undef"
if eval $compile; then
    `$run ./try`
    case "$?" in
	0)  echo "A working wcscmp() found." >&4
	    val="$define" ;;
	*)  echo "wcscmp() found, but it doesn't work" >&4
	    ;;
	esac
else
    echo "wcscmp() NOT found." >&4
    fi
set d_wcscmp
eval $setvar
$rm_try

a19202 29
: look for wcsxfrm
echo " "
$cat >try.c <<'EOCP'
#include <errno.h>
#include <wchar.h>
int main ()
{
    wchar_t dst[4], *src = L" ";
    errno = 0;
    return (wcsxfrm (dst, src, 1) ? errno ? errno : 0 : 1);
    }
EOCP
set try
val="$undef"
if eval $compile; then
    `$run ./try`
    case "$?" in
	0)  echo "A working wcsxfrm() found." >&4
	    val="$define" ;;
	*)  echo "wcsxfrm() found, but it doesn't work" >&4
	    ;;
	esac
else
    echo "wcsxfrm() NOT found." >&4
    fi
set d_wcsxfrm
eval $setvar
$rm_try

d19211 21
a19231 5
: check for alignment requirements
echo " "
case "$alignbytes" in
    '') echo "Checking alignment constraints..." >&4
	$cat >try.c <<EOCP
d19235 1
a19235 1
    $nvtype bar;
d19273 33
d19496 3
a19498 1
u_int32_t hash_cb (const void* ptr, size_t size)
d19541 3
a19543 1
size_t prefix_cb (const DBT *key1, const DBT *key2)
a19572 263
: Check what kind of inf/nan your system has
$echo "Checking the kind of infinities and nans you have..." >&4
$cat >try.c <<EOP
#define DOUBLESIZE $doublesize
#$d_longdbl HAS_LONG_DOUBLE
#ifdef HAS_LONG_DOUBLE
#define LONGDBLSIZE $longdblsize
#define LONGDBLKIND $longdblkind
#endif
#$i_math I_MATH
#ifdef I_MATH
#include <math.h>
#endif
#include <stdio.h>
/* Note that whether the sign bit is on or off
 * for NaN depends on the CPU/FPU, and possibly
 * can be affected by the build toolchain.
 *
 * For example for older MIPS and HP-PA 2.0 the quiet NaN is:
 * 0x7f, 0xf7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
 * 0x7f, 0xf4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
 * (respectively) as opposed to the more usual
 * 0x7f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
 */
static void bytes(unsigned char *p, unsigned int n) {
  int i;
  for (i = 0; i < n; i++) {
    printf("0x%02x%s", p[i], i < n - 1 ? ", " : "\n");
  }
}
int main(int argc, char *argv[]) {
   /* We cannot use 1.0/0.0 and 0.0/0.0 (with L suffixes for long double)
    * because some compilers are 'smart' and not only warn but refuse to
    * compile such 'illegal' values. */
   double dinf = exp(1e9);
   double dnan = sqrt(-1.0);
#ifdef HAS_LONG_DOUBLE
   long double ldinf = (long double)exp(1e9);
   long double ldnan = (long double)sqrt(-1.0);
#endif
  if (argc == 2) {
    switch (argv[1][0]) {
    case '1': bytes(&dinf, sizeof(dinf)); break;
    case '2': bytes(&dnan, sizeof(dnan)); break;
#ifdef HAS_LONG_DOUBLE
# if LONG_DOUBLEKIND == 3 || LONG_DOUBLEKIND == 4
/* the 80-bit long doubles might have garbage in their excess bytes */
    memset((char *)&ldinf + 10, '\0', LONG_DOUBLESIZE - 10);
# endif
    case '3': bytes(&ldinf, sizeof(ldinf)); break;
    case '4': bytes(&ldnan, sizeof(ldnan)); break;
#endif
    }
  }
  return 0;
}
EOP
set try
if eval $compile; then
    doubleinfbytes=`$run ./try 1`
    doublenanbytes=`$run ./try 2`
    case "$d_longdbl" in
    $define)
      longdblinfbytes=`$run ./try 3`
      longdblnanbytes=`$run ./try 4`
      ;;
    esac
else
    # Defaults in case the above test program failed.
    case "$doublekind" in
    1) # IEEE 754 32-bit LE
       doubleinfbytes='0x00, 0x00, 0xf0, 0x7f'
       doublenanbytes='0x00, 0x00, 0xf8, 0x7f'
       ;;
    2) # IEEE 754 32-bit BE
       doubleinfbytes='0x7f, 0xf0, 0x00, 0x00'
       doublenanbytes='0x7f, 0xf8, 0x00, 0x00'
       ;;
    3) # IEEE 754 64-bit LE
       doubleinfbytes='0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x7f'
       doublenanbytes='0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x7f'
       ;;
    4) # IEEE 754 64-bit BE
       doubleinfbytes='0x7f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00'
       doublenanbytes='0x7f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00'
       ;;
    5) # IEEE 754 128-bit LE
       doubleinfbytes='0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x7f'
       doublenanbytes='0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x7f'
       ;;
    6) # IEEE 754 128-bit BE
       doubleinfbytes='0x7f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00'
       doublenanbytes='0x7f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00'
       ;;
    7) # IEEE 754 64-bit mixed: 32-bit LEs in BE
       doubleinfbytes='0x00, 0x00, 0xf0, 0x7f, 0x00, 0x00, 0x00, 0x00'
       doublenanbytes='0x00, 0x00, 0xf8, 0x7f, 0x00, 0x00, 0x00, 0x00'
       ;;
    8) # IEEE 754 64-bit mixed: 32-bit BEs in LE
       doubleinfbytes='0x00, 0x00, 0x00, 0x00, 0x7f, 0xf0, 0x00, 0x00'
       doublenanbytes='0x00, 0x00, 0x00, 0x00, 0x7f, 0xf8, 0x00, 0x00'
       ;;
    *) # No idea.
       doubleinfbytes=$undef
       doublenanbytes=$undef
       ;;
    esac
    case "$longdblkind" in
    1) # IEEE 754 128-bit LE
       longdblinfbytes='0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x7f'
       longdblnanbytes='0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0x7f'
       ;;
    2) # IEEE 754 128-bit BE
       longdblinfbytes='0x7f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00'
       longdblnanbytes='0x7f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00'
       ;;
    3) # IEEE 754 80-bit LE, 12 or 16 bytes (x86)
       case "$longdblsize" in
       12) # x86 32-bit (96 bits, or 4 x 32, or 12 x 8)
           longdblinfbytes='0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0x7f, 0x00, 0x00'
           longdblnanbytes='0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 0x7f, 0x00, 0x00'
           ;;
       16) # x86_64
           longdblinfbytes='0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00'
           longdblnanbytes='0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00'
           ;;
       *)  # No idea.
           longdblinfbytes=$undef
           longdblnanbytes=$undef
       ;;
       esac
       ;;
    4) # IEEE 754 80-bit BE, 12 or 16 bytes
       case "$longdblsize" in
       12) # 32-bit system
           longdblinfbytes='0x7f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00'
           longdblnanbytes='0x7f, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00'
           ;;
       16) # 64-bit system
           longdblinfbytes='0x7f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00'
           longdblnanbytes='0x7f, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00'
           ;;
       *)  # No idea.
           longdblinfbytes=$undef
           longdblnanbytes=$undef
       ;;
       esac
       ;;
    5) # 128-bit LE-LE "double double"
       longdblinfbytes='0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x7f'
       longdblnanbytes='0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x7f'
       ;;
    6) # 128-bit BE-BE "double double"
       longdblinfbytes='0x7f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00'
       longdblnanbytes='0x7f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00'
       ;;
    7) # 128-bit LE-BE "double double"
       longdblinfbytes='0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00'
       longdblnanbytes='0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00'
       ;;
    8) # 128-bit BE-LE "double double"
       longdblinfbytes='0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00'
       longdblnanbytes='0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00'
       ;;
    *) # No idea.
       longdblinfbytes=$undef
       longdblnanbytes=$undef
       ;;
    esac
fi
$rm_try

: Check the length of the double mantissa
$echo "Checking how many mantissa bits your doubles have..." >&4
$cat >try.c <<EOP
#$i_float I_FLOAT
#$i_sunmath I_SUNMATH
#ifdef I_FLOAT
# include <float.h>
#endif
#ifdef I_SUNMATH
# include <sunmath.h>
#endif
#ifdef DBL_MANT_DIG
# define BITS (DBL_MANT_DIG - 1) /* the implicit bit does not count */
#endif
#include <stdio.h>
int main(int argc, char *argv[]) {
#ifdef BITS
  printf("%d\n", BITS);
#endif
  return 0;
}
EOP
set try
if eval $compile; then
    doublemantbits=`$run ./try`
else
    doublemantbits="$undef"
fi
$rm_try

: Check the length of the longdouble mantissa
$echo "Checking how many mantissa bits your long doubles have..." >&4
$cat >try.c <<EOP
#$i_float I_FLOAT
#$i_sunmath I_SUNMATH
#ifdef I_FLOAT
# include <float.h>
#endif
#ifdef I_SUNMATH
# include <sunmath.h>
#endif
#$d_longdbl HAS_LONG_DOUBLE
#if defined(HAS_LONG_DOUBLE) && defined(LDBL_MANT_DIG)
# if ($longdblkind == 3) || ($longdblkind == 4) /* 80-bit extended precision */
/* This format has no implicit bit.  Beware, however, that for
 * this format the bare LDBL_MANT_DIG is misleading for inf/nan:
 * the top three bits are used for inf (100) / qnan (11x) / snan (101),
 * and the top bit must have been one since 387, zero is plain invalid.
 * For normal fp values, the LDBL_MANT_DIG is fine, though. */
#  define BITS LDBL_MANT_DIG
# elif ($longdblkind == 5 || $longdblkind == 6 || $longdblkind == 7 || $longdblkind == 8) /* double double */
/* LDBL_MANT_DIG of 106 (twice 53) would be logical, but for some
 * reason e.g. Irix thinks 107.  But in any case, we want only
 * the number of real bits, the implicit bits are of no interest.  */
#  define BITS 2 * (DBL_MANT_DIG - 1)
# else
#  define BITS (LDBL_MANT_DIG - 1) /* the implicit bit does not count */
# endif
#endif
#include <stdio.h>
int main(int argc, char *argv[]) {
#ifdef BITS
  printf("%d\n", BITS);
#endif
  return 0;
}
EOP
set try
if eval $compile; then
    longdblmantbits=`$run ./try`
else
    longdblmantbits="$undef"
fi
$rm_try

: Check the length of the NV mantissa
$echo "Checking how many mantissa bits your NVs have..." >&4
if test "X$usequadmath" = "X$define"; then
  nvmantbits=112 # 128-1-15
else
  if test "X$nvsize" = "X$doublesize"; then
    nvmantbits="$doublemantbits"
  else
     if test "X$nvsize" = "X$longdblsize"; then
       nvmantbits="$longdblmantbits"
     else
       nvmantbits="$undef"
     fi
  fi
fi

a19591 57
: Probe whether dtrace builds an object, as newer Illumos requires an input
: object file that uses at least one of the probes defined in the .d file
case "$usedtrace" in
$define)
    case "$dtraceobject" in
    $define|true|[yY]*)
        dtraceobject=$define
        ;;
    ' '|'')
        $dtrace -h -s ../perldtrace.d -o perldtrace.h
        $cat >try.c <<EOM
#include "perldtrace.h"
int main(void) {
    PERL_LOADED_FILE("dummy");
    return 0;
}
EOM
        dtraceobject=$undef
        if $cc -c -o try.o $optimize $ccflags try.c \
                    && $dtrace -G -s ../perldtrace.d try.o >/dev/null 2>&1; then
                dtraceobject=$define
            echo "Your dtrace builds an object file"
        fi
        $rm -f try.c try.o perldtrace.o
        ;;
    *) dtraceobject=$undef ;;
    esac
esac

: Determine if this is an EBCDIC system
echo " "
echo "Determining whether or not we are on an EBCDIC system..." >&4
$cat >try.c <<'EOM'
int main()
{
  if ('M'==0xd4) return 0;
  return 1;
}
EOM

val=$undef
set try
if eval $compile_ok; then
	if $run ./try; then
		echo "You seem to speak EBCDIC." >&4
		val="$define"
	else
		echo "Nope, no EBCDIC, probably ASCII or some ISO Latin. Or UTF-8." >&4
	fi
else
	echo "I'm unable to compile the test program." >&4
	echo "I'll assume ASCII or some ISO Latin. Or UTF8." >&4
fi
$rm_try
set ebcdic
eval $setvar

d20195 1
a20195 9
if $test X"$usequadmath" = X"$define"; then
    nveformat='"Qe"'
    nvfformat='"Qf"'
    nvgformat='"Qg"'
    nvEUformat='"QE"'
    nvFUformat='"QF"'
    nvGUformat='"QG"'
else
    if $test X"$uselongdouble" = X"$define" -a X"$d_longdbl" = X"$define" -a X"$d_PRIgldbl" = X"$define"; then
d20202 1
a20202 1
    else
a20208 1
    fi
d20285 34
d20415 1
a20415 1
: check for type of arguments to gethostbyaddr.
d20424 2
a20425 2
			$d_socket sys/socket.h
			$i_niin netinet/in.h
d20462 1
a20462 1
	# Remove the "const" if needed. -- but then we'll have a
d20467 1
a20467 1
: check for type of argument to gethostbyname.
d20476 2
a20477 2
			$d_socket sys/socket.h
			$i_niin netinet/in.h
d20505 1
a20505 1
: check for type of 1st argument to getnetbyaddr.
d20514 2
a20515 2
			$d_socket sys/socket.h
			$i_niin netinet/in.h
d20572 5
d20705 1
a20705 1
    /* fprintf (stderr, "Sizeof time_t = %ld\n", sizeof (time_t)); */
d20713 1
a20713 1
	    eval `$run ./try 2>/dev/null`
d20794 1
a20794 1
	    eval `$run ./try 2>/dev/null`
d20926 1
a20926 1
			selectminbits=`$run ./try 2>/dev/null`
a20959 2
case "$sig_num_init" in
'')
a21178 2
;;
esac
a21180 2
case "$sig_num_init" in
'')
a21222 2
;;
esac
d21460 24
a21870 12
: see if this is a bfd.h system
set bfd.h i_bfd
eval $inhdr

: see if this is an execinfo.h system
set execinfo.h i_execinfo
eval $inhdr

: see if this is a fenv.h system
set fenv.h i_fenv
eval $inhdr

d21967 36
a22002 36
a29k aarch64 ABI64 aegis AES_SOURCE AIX AIX32 AIX370 AIX41 AIX42
AIX43 aixpc AIX_SOURCE alliant ALL_SOURCE alpha AM29000 am29000
AMD64 amd64 amiga AMIGAOS AMIX ansi ANSI_C_SOURCE apollo arch_ppc
arch_pwr ardent ARM ARM32 atarist att386 att3b
BeOS BIG_ENDIAN BIT_MSF BSD bsd bsd43 bsd4_2 BSD4_3 bsd4_3 bsd4_4
BSDCOMPAT bsdi BSD_4_3 BSD_4_4 BSD_NET2 BSD_TIME BSD_TYPES bull
byteorder byte_order
c cadmus clang clipper CMU COFF COMPILER_VERSION concurrent
convex cpu CRAY cray CRAYMPP ctix CX_UX CYGWIN
DECC DGUX DGUX_SOURCE DJGPP dmert DOLPHIN DPX2 DSO Dynix DynixPTX
ELF encore EPI EXTENSIONS
FAVOR_BSD FILE_OFFSET_BITS FORTIFY_SOURCE FreeBSD
GCC_NEW_VARARGS gcos gcx gimpel GLIBC GLIBC_MINOR GNUC GNUC_MINOR
GNU_LIBRARY GNU_SOURCE GO32 gould GOULD_PN
H3050R H3050RX hbullx20 hcx host_mips hp200 hp300 HP700 hp700
hp800 hp9000 hp9000s200 hp9000s300 hp9000s400 hp9000s500
hp9000s700 hp9000s800 hp9k8 hppa hpux HPUX_SOURCE hp_osf
i186 i286 i386 i486 i586 i686 i8086 i80960 i860 I960 IA32 IA64
iAPX286 ibm ibm032 ibmesa IBMR2 ibmrt ILP32 ILP64
INLINE_INTRINSICS INT64 INTEL interdata INTRINSICS is68k itanium
ksr1
LANGUAGE_C LARGEFILE64_SOURCE LARGEFILE_SOURCE LARGE_FILE_API
LFS64_LARGEFILE LFS_LARGEFILE LIBCATAMOUNT Linux LITTLE_ENDIAN
LONG64 LONGDOUBLE LONGLONG LONG_DOUBLE LONG_LONG LP64 luna
luna88k Lynx
M68000 m68k m88100 m88k M88KBCS_TARGET MACH machine MachTen
MATH_HAS_NO_SIDE_EFFECTS mc300 mc500 mc68000 mc68010 mc68020
mc68030 mc68040 mc68060 mc68k mc68k32 mc700 mc88000 mc88100
merlin mert MiNT mips MIPSEB MIPSEL MIPS_FPSET MIPS_ISA MIPS_SIM
MIPS_SZINT MIPS_SZLONG MIPS_SZPTR MODERN_C motorola mpeix MSDOS
MTXINU MULTIMAX MVS mvs M_AMD64 M_ARM M_ARMT M_COFF M_I186 M_I286
M_I386 M_I8086 M_I86 M_I86SM M_IA64 M_IX86 M_PPC M_SYS3 M_SYS5
M_SYSIII M_SYSV M_UNIX M_X86 M_XENIX
n16 ncl_el ncl_mr NetBSD news1500 news1700 news1800 news1900
news3700 news700 news800 news900 NeXT NLS nonstopux ns16000
ns32000 ns32016 ns32332 ns32k nsc32000
d22004 15
a22018 14
PARAGON parisc pa_risc PA_RISC1_1 PA_RISC2_0 pc532 pdp11 PGC PIC
plexus PORTAR posix POSIX1B_SOURCE POSIX2_SOURCE POSIX4_SOURCE
POSIX_C_SOURCE POSIX_SOURCE POWER powerpc ppc PROTOTYPES PWB pyr
QK_USER QNX
R3000 REENTRANT RES Rhapsody RISC6000 riscix riscos RT
S390 S390x SA110 SCO scs sequent sgi SGI_SOURCE SH SH3 sinix
SIZE_INT SIZE_LONG SIZE_PTR SOCKETS_SOURCE SOCKET_SOURCE sony
sonyrisc sony_news sparc sparclite sparcv8 sparcv9 spectrum
stardent stdc STDC_EXT stratos sun sun3 sun386 Sun386i svr3 svr4
SVR4_2 SVR4_SOURCE svr5 SX system SYSTYPE_BSD SYSTYPE_BSD43
SYSTYPE_BSD44 SYSTYPE_SVR4 SYSTYPE_SVR5 SYSTYPE_SYSV SYSV SYSV3
SYSV4 SYSV5 sysV68 sysV88
Tek4132 Tek4300 thumb thw_370 thw_intel thw_rs6000 titan TM3200
TM5400 TM5600 tower tower32 tower32_200 tower32_600 tower32_700
d22020 11
a22030 11
u370 u3b u3b2 u3b20 u3b200 u3b20d u3b5 ultrix UMAXV UnicomPBB
UnicomPBD UNICOS UNICOSMK unix UNIX95 UNIX99 unixpc unos USE_BSD
USE_FILE_OFFSET64 USE_GNU USE_ISOC9X USE_LARGEFILE
USE_LARGEFILE64 USE_MISC USE_POSIX USE_POSIX199309
USE_POSIX199506 USE_POSIX2 USE_REENTRANT USE_SVID USE_UNIX98
USE_XOPEN USE_XOPEN_EXTENDED USGr4 USGr4_2 UTek Utek UTS UWIN
uxpm uxps
vax venix VMESA vms
x86_64 xenix Xenix286 XOPEN_SOURCE XOPEN_SOURCE_EXTENDED XPG2
XPG2_EXTENDED XPG3 XPG3_EXTENDED XPG4 XPG4_EXTENDED
z8000 zarch
d22046 2
a22047 2
	$rm -f Cppsym.got
	exit 0
d22091 1
a22091 1
$cc -o try -Dcpp_stuff=$cpp_stuff $optimize \$ccflags $ldflags try.c $libs 2>/dev/null && $run ./try | $sed 's/ /\\\\ /g'
d22136 1
a22136 1
    $sort ccsym1.raw | $uniq >ccsym.raw
d22138 1
a22138 1
    mv ccsym1.raw ccsym.raw
d22152 1
a22152 1
	ccsymbols=''
d22154 1
a22154 1
	cppsymbols=`echo $cppsymbols`
d22180 2
a22181 2
		ccsymbols=`$cat ccsym.own`
		ccsymbols=`echo $ccsymbols`
a22185 20
: add -D_FORTIFY_SOURCE if feasible and not already there
case "$gccversion" in
[45].*)	case "$optimize$ccflags" in
	*-O*)	case "$ccflags$cppsymbols" in
		*_FORTIFY_SOURCE=*) # Don't add it again.
			echo "You seem to have -D_FORTIFY_SOURCE already, not adding it." >&4
			;;
		*)	echo "Adding -D_FORTIFY_SOURCE=2 to ccflags..." >&4
			ccflags="$ccflags -D_FORTIFY_SOURCE=2"
			;;
		esac
		;;
	*)	echo "You have gcc 4.* or later but not optimizing, not adding -D_FORTIFY_SOURCE." >&4
		;;
	esac
	;;
*)	echo "You seem not to have gcc 4.* or later, not adding -D_FORTIFY_SOURCE." >&4
	;;
esac

a22273 4
: see if stdint is available
set stdint.h i_stdint
eval $inhdr

d22395 1
a22395 1
	    this_ext=`echo "$xxx" | $sed -e s/-/\\\//g`;
d22400 2
a22401 2
	    echo " $xs_extensions $nonxs_extensions" > "$tdir/$$.tmp";
	    if $contains " $this_ext " "$tdir/$$.tmp"; then
d22419 2
a22420 2
	    $ls -1 "$xxx" > "$tdir/$$.tmp";
	    if   $contains "\.xs$" "$tdir/$$.tmp" > /dev/null 2>&1; then
d22422 1
a22422 1
	    elif $contains "\.c$"  "$tdir/$$.tmp" > /dev/null 2>&1; then
d22424 1
a22424 1
	    elif $test -d "$xxx"; then
d22427 1
a22427 1
	    $rm -f "$tdir/$$.tmp";
a22456 5
	Amiga*)
		case "$osname" in
		amigaos) avail_ext="$avail_ext $xxx" ;;
		esac
		;;
d22526 3
a22528 8
		case $osname in
			amigaos) ;; # not really very useful on AmigaOS
			*)
			: XXX syslog requires socket
			case "$d_socket" in
			true|$define|y) avail_ext="$avail_ext $xxx" ;;
			esac
			;;
d22921 1
a22979 1
d_acosh='$d_acosh'
a22984 2
d_asinh='$d_asinh'
d_atanh='$d_atanh'
a22994 1
d_backtrace='$d_backtrace'
a23005 1
d_cbrt='$d_cbrt'
a23014 1
d_copysign='$d_copysign'
a23031 1
d_dladdr='$d_dladdr'
a23038 1
d_duplocale='$d_duplocale'
a23052 2
d_erf='$d_erf'
d_erfc='$d_erfc'
a23053 2
d_exp2='$d_exp2'
d_expm1='$d_expm1'
a23061 2
d_fdclose='$d_fdclose'
d_fdim='$d_fdim'
a23062 1
d_fegetround='$d_fegetround'
a23068 3
d_fma='$d_fma'
d_fmax='$d_fmax'
d_fmin='$d_fmin'
a23070 2
d_fp_classify='$d_fp_classify'
d_fp_classl='$d_fp_classl'
a23074 1
d_fpgetround='$d_fpgetround'
a23075 1
d_freelocale='$d_freelocale'
a23151 2
d_hypot='$d_hypot'
d_ilogb='$d_ilogb'
a23165 1
d_isfinitel='$d_isfinitel'
a23166 2
d_isinfl='$d_isinfl'
d_isless='$d_isless'
a23168 3
d_isnormal='$d_isnormal'
d_j0='$d_j0'
d_j0l='$d_j0l'
a23169 1
d_lc_monetary_2008='$d_lc_monetary_2008'
a23171 3
d_ldexpl='$d_ldexpl'
d_lgamma='$d_lgamma'
d_lgamma_r='$d_lgamma_r'
a23174 4
d_llrint='$d_llrint'
d_llrintl='$d_llrintl'
d_llround='$d_llround'
d_llroundl='$d_llroundl'
a23179 3
d_log1p='$d_log1p'
d_log2='$d_log2'
d_logb='$d_logb'
a23181 4
d_lrint='$d_lrint'
d_lrintl='$d_lrintl'
d_lround='$d_lround'
d_lroundl='$d_lroundl'
a23192 1
d_memmem='$d_memmem'
d23204 1
a23220 1
d_nan='$d_nan'
a23222 4
d_nearbyint='$d_nearbyint'
d_newlocale='$d_newlocale'
d_nextafter='$d_nextafter'
d_nexttoward='$d_nexttoward'
a23246 1
d_ptrdiff_t='$d_ptrdiff_t'
a23257 1
d_re_comp='$d_re_comp'
a23263 4
d_regcmp='$d_regcmp'
d_regcomp='$d_regcomp'
d_remainder='$d_remainder'
d_remquo='$d_remquo'
a23265 1
d_rint='$d_rint'
a23266 1
d_round='$d_round'
a23270 1
d_scalbn='$d_scalbn'
a23321 8
d_siginfo_si_addr='$d_siginfo_si_addr'
d_siginfo_si_band='$d_siginfo_si_band'
d_siginfo_si_errno='$d_siginfo_si_errno'
d_siginfo_si_fd='$d_siginfo_si_fd'
d_siginfo_si_pid='$d_siginfo_si_pid'
d_siginfo_si_status='$d_siginfo_si_status'
d_siginfo_si_uid='$d_siginfo_si_uid'
d_siginfo_si_value='$d_siginfo_si_value'
a23341 1
d_stat='$d_stat'
a23383 1
d_tgamma='$d_tgamma'
a23389 1
d_trunc='$d_trunc'
a23390 1
d_truncl='$d_truncl'
a23399 1
d_uselocale='$d_uselocale'
a23415 1
d_wcscmp='$d_wcscmp'
a23416 1
d_wcsxfrm='$d_wcsxfrm'
a23428 4
doubleinfbytes='$doubleinfbytes'
doublekind='$doublekind'
doublemantbits='$doublemantbits'
doublenanbytes='$doublenanbytes'
a23432 1
dtraceobject='$dtraceobject'
a23518 1
i_bfd='$i_bfd'
a23524 1
i_execinfo='$i_execinfo'
a23525 1
i_fenv='$i_fenv'
a23553 1
i_quadmath='$i_quadmath'
a23560 1
i_stdint='$i_stdint'
a23602 1
i_xlocale='$i_xlocale'
a23670 4
longdblinfbytes='$longdblinfbytes'
longdblkind='$longdblkind'
longdblmantbits='$longdblmantbits'
longdblnanbytes='$longdblnanbytes'
d23679 4
a23726 1
nvmantbits='$nvmantbits'
a23914 1
usecbacktrace='$usecbacktrace'
a23932 1
usequadmath='$usequadmath'
a24010 3

: preserve RCS keywords in files with variable substitution, grrr
Id='$Id'
@


