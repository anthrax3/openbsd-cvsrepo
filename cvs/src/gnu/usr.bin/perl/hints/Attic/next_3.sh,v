head	1.7;
access;
symbols
	OPENBSD_6_0:1.6.0.16
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.10
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.12
	OPENBSD_5_8_BASE:1.6
	PERL_5_20_2:1.1.1.5
	OPENBSD_5_7:1.6.0.4
	OPENBSD_5_7_BASE:1.6
	PERL_5_20_1:1.1.1.5
	OPENBSD_5_6:1.6.0.8
	OPENBSD_5_6_BASE:1.6
	PERL_5_18_2:1.1.1.5
	PERL:1.1.1
	OPENBSD_5_5:1.6.0.6
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.2
	OPENBSD_5_4_BASE:1.6
	PERL_5_16_3:1.1.1.5
	OPENBSD_5_3:1.5.0.42
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.40
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.38
	OPENBSD_5_0:1.5.0.36
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.34
	OPENBSD_4_9_BASE:1.5
	PERL_5_12_2:1.1.1.4
	OPENBSD_4_8:1.5.0.32
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.28
	OPENBSD_4_7_BASE:1.5
	PERL_5_10_1:1.1.1.4
	OPENBSD_4_6:1.5.0.30
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.26
	OPENBSD_4_5_BASE:1.5
	PERL_5_10_0:1.1.1.4
	OPENBSD_4_4:1.5.0.24
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.22
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.20
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.18
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.16
	OPENBSD_4_0_BASE:1.5
	PERL_5_8_8:1.1.1.4
	OPENBSD_3_9:1.5.0.14
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.12
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.10
	OPENBSD_3_7_BASE:1.5
	PERL_5_8_6:1.1.1.4
	OPENBSD_3_6:1.5.0.8
	OPENBSD_3_6_BASE:1.5
	PERL_5_8_5:1.1.1.4
	PERL_5_8_3:1.1.1.4
	OPENBSD_3_5:1.5.0.6
	OPENBSD_3_5_BASE:1.5
	PERL_5_8_2:1.1.1.4
	OPENBSD_3_4:1.5.0.4
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.5.0.2
	OPENBSD_3_3_BASE:1.5
	PERL_5_8_0:1.1.1.4
	OPENBSD_3_2:1.4.0.12
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.10
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.8
	OPENBSD_3_0_BASE:1.4
	PERL_5_6_1:1.1.1.3
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	PERL_5_6_0:1.1.1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	PERL_500503:1.1.1.2
	CPAN:1.1.1
	OPENBSD_2_5:1.2.0.6
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.4
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	perl5003:1.1.1.1
	lwall:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.7
date	2017.02.05.00.32.14;	author afresh1;	state dead;
branches;
next	1.6;
commitid	cxJ08BvJA9Pt2PTM;

1.6
date	2013.03.25.20.40.55;	author sthen;	state Exp;
branches;
next	1.5;

1.5
date	2002.10.27.22.25.25;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.06.17.05.49;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	99.04.29.22.51.39;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.11.30.07.56.22;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.08.19.10.12.25;	author downsj;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.08.19.10.12.25;	author downsj;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.04.29.22.39.34;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2000.04.06.16.09.28;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2002.10.27.22.14.56;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2013.03.25.20.08.48;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@# This file has been put together by Anno Siegel <siegel@@zrz.TU-Berlin.DE>,
# Andreas Koenig <k@@franz.ww.TU-Berlin.DE> and Gerd Knops <gerti@@BITart.com>.
# Comments, questions, and improvements welcome!
#
# These hints work for NeXT 3.2 and 3.3.  3.0 has its own
# special hint file.
#

######################################################################
# THE MALLOC STORY
######################################################################
# 1994:
# the simple program `for ($i=1;$i<38771;$i++){$t{$i}=123}' fails
# with Larry's malloc on NS 3.2 due to broken sbrk()
#
# setting usemymalloc='n' was the solution back then. Later came
# reports that perl would run unstable on 3.2:
#
# 1996:
# From about perl5.002beta1h perl became unstable on the
# NeXT. Intermittent coredumps were frequent on 3.2 OS. There were
# reports, that the developer version of 3.3 didn't have problems, so it
# seemed pretty obvious that we had to work around an malloc bug in 3.2.
# This hints file reflects a patch to perl5.002_01 that introduces a
# home made sbrk routine (remember, NeXT's sbrk _never_ worked). This
# sbrk makes it possible to run perl with its own malloc. Thanks to
# Ilya who showed me the way to his sbrk for OS/2!!
#
# The whole malloc disaster lead to a failing gdbm test. It is far
# beyond my understanding, why GDBM_File breaks with the "fix", but in
# general I consider it better to have a working perl with broken GDBM
# than no perl at all.
#
# So, this hintsfile is using perl's malloc. If you want to turn
# perl's malloc off, you need to remove '-DUSE_PERL_SBRK'
# from the ccflags and set usemymalloc to 'n'.
#
# 1997:
# From perl5.003_22 the malloc bug has no impact any more. We can run
# a perl without a special sbrk. Apparently Chip Salzenberg, the hero
# of 5.004 anyway, earned another trophy during Australian Open.
#
# use the following two lines to enable USE_PERL_SBRK. Try this if you
# encounter intermittent core dumps:
#ccflags='-DUSE_NEXT_CTYPE -DUSE_PERL_SBRK'
#usemymalloc='y'
# use the following two lines if you have perl5.003_22 or better and
# do not encounter intermittent core dumps.

ccflags="$ccflags -DUSE_NEXT_CTYPE"
usemymalloc='n'

######################################################################
# End of the MALLOC story
######################################################################

ldflags='-u libsys_s'
libswanted='dbm gdbm db'

lddlflags='-nostdlib -r'
# Give cccdlflags an empty value since Configure will detect we are
# using GNU cc and try to specify -fpic for cccdlflags.
cccdlflags=' '

######################################################################
# MAB support
######################################################################
# By default we will build for all architectures your development
# environment supports. If you only want to build for the platform
# you are on, simply comment or remove the line below.
#
# If you want to build for specific architectures, change the line
# below to something like
#
#	archs='m68k i386'
#
archs=`/bin/lipo -info /usr/lib/libm.a | sed -n 's/^[^:]*:[^:]*: //p'`

#
# leave the following part alone
#
archcount=`echo $archs |wc -w`
if [ $archcount -gt 1 ]
then
	for d in $archs
	do
			mabflags="$mabflags -arch $d"
	done
	ccflags="$ccflags $mabflags"
	ldflags="$ldflags $mabflags"
	lddlflags="$lddlflags $mabflags"
	archname='next-fat'
fi
######################################################################
# END MAB support
######################################################################
ld='cc'

i_utime='undef'
groupstype='int'
direntrytype='struct direct'
d_strcoll='undef'
d_uname='define'
#
# At least on m68k there are situations when memcmp doesn't behave
# as expected.  So we'll use perl's memcmp.
#
d_sanemcmp='undef'
# setpgid() is in the posix library, but we don't use -posix, so
# we don't see it.  ext/POSIX/POSIX.xs  *does* use -posix, so
# setpgid is still available as POSIX::setpgid.
# See ext/POSIX/POSIX/hints/next.pl.
d_setpgid='undef'
d_setsid='define'
d_tcgetpgrp='define'
d_tcsetpgrp='define'

#
# On some NeXT machines, the timestamp put by ranlib is not correct, and
# this may cause useless recompiles.  Fix that by adding a sleep before
# running ranlib.  The '5' is an empirical number that's "long enough."
#
ranlib='sleep 5; /bin/ranlib' 

#
# There where reports that the compiler on HPPA machines
# fails with the -O flag on pp.c.
# Compiling pp.c with -O for HPPA machines results in a broken perl.
# This is true whether we're on an HPPA machine or cross-compiling
# for one.
pp_cflags='optimize=""'

# The SysV IPC is optional (ftp://ftp.nluug.nl/pub/comp/next/SysVIPC/)
# Gerben_Wierda@@RnA.nl
if [ -f /usr/local/lib/libIPC.a ]; then
  libswanted="$libswanted IPC"
  # As of Sep 1998 d_msg wasn't supported in that library,
  # only d_sem and d_shm, but Configure should be able to
  # figure that out. --jhi
  # Note also the next3 ext/IPC/SysV hints file.
fi
@


1.6
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@@


1.5
log
@Resolve conflicts, remove old files, merge local changes
@
text
@d29 1
a29 1
# The whole malloc desaster lead to a failing gdbm test. It is far
d41 1
a41 1
# of 5.004 anyway, earned another trophy during Australien Open.
@


1.4
log
@perl-5.6.0 + local changes
@
text
@d5 1
a5 1
# These hints work for NeXT 3.2 and 3.3.  3.0 has it's own
@


1.3
log
@perl5.005_03 (stock)
@
text
@d35 2
a36 2
# perl's malloc off, you need to remove '-DUSE_PERL_SBRK' and
# '-DHIDEMYMALLOC' from the ccflags and set usemymalloc to 'n'.
d45 1
a45 1
#ccflags='-DUSE_NEXT_CTYPE -DUSE_PERL_SBRK -DHIDEMYMALLOC'
d50 1
a50 1
ccflags='-DUSE_NEXT_CTYPE'
@


1.2
log
@perl 5.004_04
@
text
@d75 1
a75 1
#	archs=(m68k i386)
d132 10
@


1.1
log
@Initial revision
@
text
@d1 3
a3 3
# This file has been put together by Anno Siegel <siegel@@zrz.TU-Berlin.DE>
# and Andreas Koenig <k@@franz.ww.TU-Berlin.DE>. Comments, questions, and
# improvements welcome!
d7 42
d51 6
a56 1
POSIX_cflags='ccflags="-posix $ccflags"'
d60 1
a60 1
lddlflags='-r'
d65 34
a102 3
# the simple program `for ($i=1;$i<38771;$i++){$t{$i}=123}' fails
# with Larry's malloc on NS 3.2 due to broken sbrk()
usemymalloc='n'
d104 10
a113 1
d_setpgid='define'
d117 1
d122 1
a122 1
# (Thanks to Andreas Koenig <k@@franz.ww.tu-berlin.de>)
d124 1
d128 4
a131 3
if [ `arch` = "hppa" ]; then
pp_cflags='optimize="-g"'
fi
@


1.1.1.1
log
@Import of Perl 5.003 into the tree.  Makefile.bsd-wrapper and
config.sh.OpenBSD are the only local changes.
@
text
@@


1.1.1.2
log
@perl5.005_03
@
text
@d1 3
a3 3
# This file has been put together by Anno Siegel <siegel@@zrz.TU-Berlin.DE>,
# Andreas Koenig <k@@franz.ww.TU-Berlin.DE> and Gerd Knops <gerti@@BITart.com>.
# Comments, questions, and improvements welcome!
a6 42
#

######################################################################
# THE MALLOC STORY
######################################################################
# 1994:
# the simple program `for ($i=1;$i<38771;$i++){$t{$i}=123}' fails
# with Larry's malloc on NS 3.2 due to broken sbrk()
#
# setting usemymalloc='n' was the solution back then. Later came
# reports that perl would run unstable on 3.2:
#
# 1996:
# From about perl5.002beta1h perl became unstable on the
# NeXT. Intermittent coredumps were frequent on 3.2 OS. There were
# reports, that the developer version of 3.3 didn't have problems, so it
# seemed pretty obvious that we had to work around an malloc bug in 3.2.
# This hints file reflects a patch to perl5.002_01 that introduces a
# home made sbrk routine (remember, NeXT's sbrk _never_ worked). This
# sbrk makes it possible to run perl with its own malloc. Thanks to
# Ilya who showed me the way to his sbrk for OS/2!!
#
# The whole malloc desaster lead to a failing gdbm test. It is far
# beyond my understanding, why GDBM_File breaks with the "fix", but in
# general I consider it better to have a working perl with broken GDBM
# than no perl at all.
#
# So, this hintsfile is using perl's malloc. If you want to turn
# perl's malloc off, you need to remove '-DUSE_PERL_SBRK' and
# '-DHIDEMYMALLOC' from the ccflags and set usemymalloc to 'n'.
#
# 1997:
# From perl5.003_22 the malloc bug has no impact any more. We can run
# a perl without a special sbrk. Apparently Chip Salzenberg, the hero
# of 5.004 anyway, earned another trophy during Australien Open.
#
# use the following two lines to enable USE_PERL_SBRK. Try this if you
# encounter intermittent core dumps:
#ccflags='-DUSE_NEXT_CTYPE -DUSE_PERL_SBRK -DHIDEMYMALLOC'
#usemymalloc='y'
# use the following two lines if you have perl5.003_22 or better and
# do not encounter intermittent core dumps.
d9 1
a9 6
usemymalloc='n'

######################################################################
# End of the MALLOC story
######################################################################

d13 1
a13 1
lddlflags='-nostdlib -r'
a17 34
######################################################################
# MAB support
######################################################################
# By default we will build for all architectures your development
# environment supports. If you only want to build for the platform
# you are on, simply comment or remove the line below.
#
# If you want to build for specific architectures, change the line
# below to something like
#
#	archs='m68k i386'
#
archs=`/bin/lipo -info /usr/lib/libm.a | sed -n 's/^[^:]*:[^:]*: //p'`

#
# leave the following part alone
#
archcount=`echo $archs |wc -w`
if [ $archcount -gt 1 ]
then
	for d in $archs
	do
			mabflags="$mabflags -arch $d"
	done
	ccflags="$ccflags $mabflags"
	ldflags="$ldflags $mabflags"
	lddlflags="$lddlflags $mabflags"
	archname='next-fat'
fi
######################################################################
# END MAB support
######################################################################
ld='cc'

d22 3
d26 1
a26 10
#
# At least on m68k there are situations when memcmp doesn't behave
# as expected.  So we'll use perl's memcmp.
#
d_sanemcmp='undef'
# setpgid() is in the posix library, but we don't use -posix, so
# we don't see it.  ext/POSIX/POSIX.xs  *does* use -posix, so
# setpgid is still available as POSIX::setpgid.
# See ext/POSIX/POSIX/hints/next.pl.
d_setpgid='undef'
a29 1

d34 1
a34 1
#
a35 1

d39 2
a40 13
# Compiling pp.c with -O for HPPA machines results in a broken perl.
# This is true whether we're on an HPPA machine or cross-compiling
# for one.
pp_cflags='optimize=""'

# The SysV IPC is optional (ftp://ftp.nluug.nl/pub/comp/next/SysVIPC/)
# Gerben_Wierda@@RnA.nl
if [ -f /usr/local/lib/libIPC.a ]; then
  libswanted="$libswanted IPC"
  # As of Sep 1998 d_msg wasn't supported in that library,
  # only d_sem and d_shm, but Configure should be able to
  # figure that out. --jhi
  # Note also the next3 ext/IPC/SysV hints file.
@


1.1.1.3
log
@virgin perl 5.6.0
@
text
@d35 2
a36 2
# perl's malloc off, you need to remove '-DUSE_PERL_SBRK'
# from the ccflags and set usemymalloc to 'n'.
d45 1
a45 1
#ccflags='-DUSE_NEXT_CTYPE -DUSE_PERL_SBRK'
d50 1
a50 1
ccflags="$ccflags -DUSE_NEXT_CTYPE"
@


1.1.1.4
log
@stock perl 5.8.0 from CPAN
@
text
@d5 1
a5 1
# These hints work for NeXT 3.2 and 3.3.  3.0 has its own
@


1.1.1.5
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d29 1
a29 1
# The whole malloc disaster lead to a failing gdbm test. It is far
d41 1
a41 1
# of 5.004 anyway, earned another trophy during Australian Open.
@


