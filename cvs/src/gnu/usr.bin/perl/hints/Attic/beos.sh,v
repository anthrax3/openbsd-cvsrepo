head	1.12;
access;
symbols
	OPENBSD_5_5:1.11.0.6
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.11.0.2
	OPENBSD_5_4_BASE:1.11
	PERL_5_16_3:1.1.1.7
	OPENBSD_5_3:1.10.0.10
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.8
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.6
	OPENBSD_5_0:1.10.0.4
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.2
	OPENBSD_4_9_BASE:1.10
	PERL_5_12_2:1.1.1.6
	OPENBSD_4_8:1.9.0.4
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.2
	OPENBSD_4_7_BASE:1.9
	PERL_5_10_1:1.1.1.6
	OPENBSD_4_6:1.8.0.6
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.2
	OPENBSD_4_5_BASE:1.8
	PERL_5_10_0:1.1.1.6
	OPENBSD_4_4:1.7.0.10
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.8
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.6
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.4
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.2
	OPENBSD_4_0_BASE:1.7
	PERL_5_8_8:1.1.1.6
	OPENBSD_3_9:1.6.0.10
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.8
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.6
	OPENBSD_3_7_BASE:1.6
	PERL_5_8_6:1.1.1.5
	OPENBSD_3_6:1.6.0.4
	OPENBSD_3_6_BASE:1.6
	PERL_5_8_5:1.1.1.4
	PERL_5_8_3:1.1.1.3
	OPENBSD_3_5:1.6.0.2
	OPENBSD_3_5_BASE:1.6
	PERL_5_8_2:1.1.1.3
	OPENBSD_3_4:1.5.0.4
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.5.0.2
	OPENBSD_3_3_BASE:1.5
	PERL_5_8_0:1.1.1.3
	OPENBSD_3_2:1.4.0.6
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.4
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4
	PERL_5_6_1:1.1.1.2
	OPENBSD_2_9:1.3.0.6
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	PERL_5_6_0:1.1.1.2
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	PERL_500503:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.12
date	2014.03.24.15.05.27;	author afresh1;	state dead;
branches;
next	1.11;

1.11
date	2013.03.25.20.40.55;	author sthen;	state Exp;
branches;
next	1.10;

1.10
date	2010.09.24.15.06.58;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2009.10.12.18.24.37;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2008.09.29.17.36.07;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2006.03.28.19.23.04;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2003.12.03.03.02.34;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2002.10.27.22.25.24;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2001.05.24.18.35.18;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.06.17.05.42;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	99.04.29.22.51.37;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	99.04.29.22.39.28;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.29.22.39.28;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2000.04.06.16.09.27;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.10.27.22.14.56;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.08.09.17.47.56;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2005.01.15.21.17.04;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2006.03.28.18.48.28;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2013.03.25.20.08.47;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Merge perl-5.18.2 plus local patches, remove old files

OK espie@@ sthen@@ deraadt@@
@
text
@# BeOS hints file

if [ ! -f beos/nm ]; then mwcc -w all -o beos/nm beos/nm.c 2>/dev/null; fi
# If this fails, that's all right - it's only for PPC.

prefix="/boot/home/config"

#cpp="mwcc -e"

libpth='/boot/beos/system/lib /boot/home/config/lib'
usrinc='/boot/develop/headers/posix'
locinc='/boot/develop/headers/ /boot/home/config/include'

libc='/boot/beos/system/lib/libroot.so'
libs=' '

d_bcmp='define'
d_bcopy='define'
d_bzero='define'
d_index='define'
#d_htonl='define' # It exists, but much hackery would be required to support.
# a bunch of extra includes would have to be added, and it's only used at
# one place in the non-socket perl code.

#these are all in libdll.a, which my version of nm doesn't know how to parse.
#if I can get it to both do that, and scan multiple library files, perhaps
#these can be gotten rid of.

usemymalloc='n'
# Hopefully, Be's malloc knows better than perl's.

d_link='undef'
dont_use_nlink='define'
# no posix (aka hard) links for us!

d_syserrlst='undef'
# the array syserrlst[] is useless for the most part.
# large negative numbers really kind of suck in arrays.

# Sockets didn't use to be real sockets but BONE changes this.
if [ ! -f /boot/develop/headers/be/bone/sys/socket.h ]; then
    d_socket='undef'
    d_gethbyaddr='undef'
    d_gethbyname='undef'
    d_getsbyname='undef'

	libs='-lnet'
fi

# There's a third party flock() emulation. Check, if it is available.
echo "#include <flock.h>" > try.c
if cc -E $CFLAGS try.c 2> /dev/null | grep "flock.*("; then
    d_flock='define'
    d_flockproto='define'
    libs="$libs -lflock"
    ldflags="$ldflags -L/boot/home/config/lib"
else
	cat << 'EOM' >&4

I couldn't find a <flock.h> header defining a flock() prototype. That header
comes with the flock server package (available on BeBits). You have to add
the path to the directory containing the header via the environment variable
CFLAGS (should contain -I</path/to/dir/of/flock/header>). Perl will be compiled
without flock() support, if the flock server package is not installed or the
header not found.

EOM

fi
rm try.c

ld='gcc'

export PATH="$PATH:$PWD/beos"

case "$ldlibpthname" in
'') ldlibpthname=LIBRARY_PATH ;;
esac

# the waitpid() wrapper (among other things)
archobjs="beos.o"
test -f beos.c || cp beos/beos.c .
@


1.11
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@@


1.10
log
@merge in perl 5.12.2 plus local changes
@
text
@a1 1
# $Id: beos.sh,v 1.1 1998/02/16 03:51:45 dogcow Exp $
@


1.9
log
@Merge in perl 5.10.1
@
text
@@


1.8
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@@


1.7
log
@merge in perl 5.8.8
@
text
@d2 1
a2 1
# $Id: beos.sh,v 1.6 2003/12/03 03:02:34 millert Exp $
@


1.6
log
@Resolve conflicts for perl 5.8.2, remove old files, and add OpenBSD-specific scaffolding
@
text
@d2 1
a2 1
# $Id: beos.sh,v 1.1 1998/02/16 03:51:45 dogcow Exp $
d42 1
a42 2
# How does one test for BONEness?
if [ ! -f /some/bone/file.h ]; then
d47 2
d51 22
d81 1
a81 1
# the waitpid() wrapper
a83 2


@


1.5
log
@Resolve conflicts, remove old files, merge local changes
@
text
@@


1.4
log
@merge in perl 5.6.1 with our local changes
@
text
@d41 8
a48 4
d_socket='undef'
d_gethbyaddr='undef'
d_gethbyname='undef'
d_getsbyname='undef'
a51 5
# Sockets really don't work with the current version of perl and the
# current BeOS sockets; I suspect that a new module a la GSAR's WIN32 port
# will be required.
# Of course, this may also change with R5.

d57 6
@


1.3
log
@perl-5.6.0 + local changes
@
text
@@


1.2
log
@perl5.005_03 (stock)
@
text
@d54 4
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@perl5.005_03
@
text
@@


1.1.1.2
log
@virgin perl 5.6.0
@
text
@a53 4

case "$ldlibpthname" in
'') ldlibpthname=LIBRARY_PATH ;;
esac
@


1.1.1.3
log
@stock perl 5.8.0 from CPAN
@
text
@d41 4
a44 8
# Sockets didn't use to be real sockets but BONE changes this.
# How does one test for BONEness?
if [ ! -f /some/bone/file.h ]; then
    d_socket='undef'
    d_gethbyaddr='undef'
    d_gethbyname='undef'
    d_getsbyname='undef'
fi
d48 5
a57 6

# the waitpid() wrapper
archobjs="beos.o"
test -f beos.c || cp beos/beos.c .


@


1.1.1.4
log
@Import of stock perl 5.8.5
@
text
@d2 1
a2 1
# $Id: beos.sh,v 1.6 2003/12/03 03:02:34 millert Exp $
@


1.1.1.5
log
@perl 5.8.6 from CPAN
@
text
@d2 1
a2 1
# $Id: beos.sh,v 1.1 1998/02/16 03:51:45 dogcow Exp $
@


1.1.1.6
log
@perl 5.8.8 import
@
text
@d42 2
a43 1
if [ ! -f /boot/develop/headers/be/bone/sys/socket.h ]; then
a47 2

	libs='-lnet'
a49 22
# There's a third party flock() emulation. Check, if it is available.
echo "#include <flock.h>" > try.c
if cc -E $CFLAGS try.c 2> /dev/null | grep "flock.*("; then
    d_flock='define'
    d_flockproto='define'
    libs="$libs -lflock"
    ldflags="$ldflags -L/boot/home/config/lib"
else
	cat << 'EOM' >&4

I couldn't find a <flock.h> header defining a flock() prototype. That header
comes with the flock server package (available on BeBits). You have to add
the path to the directory containing the header via the environment variable
CFLAGS (should contain -I</path/to/dir/of/flock/header>). Perl will be compiled
without flock() support, if the flock server package is not installed or the
header not found.

EOM

fi
rm try.c

d58 1
a58 1
# the waitpid() wrapper (among other things)
d61 2
@


1.1.1.7
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d2 1
@


