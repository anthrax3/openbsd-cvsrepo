head	1.2;
access;
symbols
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.16
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.10
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.12
	OPENBSD_5_8_BASE:1.2
	PERL_5_20_2:1.1.1.2
	OPENBSD_5_7:1.2.0.4
	OPENBSD_5_7_BASE:1.2
	PERL_5_20_1:1.1.1.2
	OPENBSD_5_6:1.2.0.8
	OPENBSD_5_6_BASE:1.2
	PERL_5_18_2:1.1.1.2
	PERL:1.1.1
	OPENBSD_5_5:1.2.0.6
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.2
	OPENBSD_5_4_BASE:1.2
	PERL_5_16_3:1.1.1.2
	OPENBSD_5_3:1.1.0.62
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.60
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.58
	OPENBSD_5_0:1.1.0.56
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.54
	OPENBSD_4_9_BASE:1.1
	PERL_5_12_2:1.1.1.1
	OPENBSD_4_8:1.1.0.52
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.48
	OPENBSD_4_7_BASE:1.1
	PERL_5_10_1:1.1.1.1
	OPENBSD_4_6:1.1.0.50
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.46
	OPENBSD_4_5_BASE:1.1
	PERL_5_10_0:1.1.1.1
	OPENBSD_4_4:1.1.0.44
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.42
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.40
	OPENBSD_4_2_BASE:1.1
	OPENBSD_4_1:1.1.0.38
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.36
	OPENBSD_4_0_BASE:1.1
	PERL_5_8_8:1.1.1.1
	OPENBSD_3_9:1.1.0.34
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.32
	OPENBSD_3_8_BASE:1.1
	OPENBSD_3_7:1.1.0.30
	OPENBSD_3_7_BASE:1.1
	PERL_5_8_6:1.1.1.1
	OPENBSD_3_6:1.1.0.28
	OPENBSD_3_6_BASE:1.1
	PERL_5_8_5:1.1.1.1
	PERL_5_8_3:1.1.1.1
	OPENBSD_3_5:1.1.0.26
	OPENBSD_3_5_BASE:1.1
	PERL_5_8_2:1.1.1.1
	OPENBSD_3_4:1.1.0.24
	OPENBSD_3_4_BASE:1.1
	OPENBSD_3_3:1.1.0.22
	OPENBSD_3_3_BASE:1.1
	PERL_5_8_0:1.1.1.1
	OPENBSD_3_2:1.1.0.20
	OPENBSD_3_2_BASE:1.1
	OPENBSD_3_1:1.1.0.18
	OPENBSD_3_1_BASE:1.1
	OPENBSD_3_0:1.1.0.16
	OPENBSD_3_0_BASE:1.1
	PERL_5_6_1:1.1.1.1
	OPENBSD_2_9:1.1.0.14
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_8:1.1.0.12
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.10
	OPENBSD_2_7_BASE:1.1
	PERL_5_6_0:1.1.1.1
	OPENBSD_2_6:1.1.0.8
	OPENBSD_2_6_BASE:1.1
	PERL_500503:1.1.1.1
	CPAN:1.1.1
	OPENBSD_2_5:1.1.0.6
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.4
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.2
	OPENBSD_2_3_BASE:1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2013.03.25.20.40.55;	author sthen;	state Exp;
branches;
next	1.1;

1.1
date	97.11.30.07.56.06;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.29.22.39.29;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.03.25.20.08.47;	author sthen;	state Exp;
branches;
next	;


desc
@perl 5.004_04
@


1.2
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@# hints/dcosx.sh
# Last modified:  Thu Jan 16 11:38:12 EST 1996
# Stephen Zander  <stephen.zander@@interlock.mckesson.com>
# hints for DC/OSx (Pyramid) & SINIX (Seimens: dc/osx rebadged)
# Based on the hints/solaris_2.sh file

# See man vfork.
usevfork=false

d_suidsafe=define

# Avoid all libraries in /usr/ucblib.
set `echo $glibpth | sed -e 's@@/usr/ucblib@@@@'`
glibpth="$*"

# Remove bad libraries.
# -lucb contains incompatible routines.
set `echo " $libswanted " | sed -e 's@@ ucb @@ @@'`
libswanted="$*"

# Here's another draft of the perl5/solaris/gcc sanity-checker. 

case $PATH in
*/usr/ucb*:/usr/bin:*|*/usr/ucb*:/usr/bin) cat <<END >&2

NOTE:  /usr/ucb/cc does not function properly.
Remove /usr/ucb from your PATH.

END
;;
esac


# Check that /dev/fd is mounted.  If it is not mounted, let the
# user know that suid scripts may not work.
/usr/bin/df /dev/fd 2>&1 > /dev/null
case $? in
0) ;;
*)
      cat <<END >&4

NOTE: Your system does not have /dev/fd mounted.  If you want to
be able to use set-uid scripts you must ask your system administrator
to mount /dev/fd.

END
      ;;
esac


# See if libucb can be found in /usr/lib.  If it is, warn the user
# that this may cause problems while building Perl extensions.
/usr/bin/ls /usr/lib/libucb* >/dev/null 2>&1
case $? in
0)
      cat <<END >&4

NOTE: libucb has been found in /usr/lib.  libucb should reside in
/usr/ucblib.  You may have trouble while building Perl extensions.

END
;;
esac


# See if make(1) is GNU make(1).
# If it is, make sure the setgid bit is not set.
make -v > make.vers 2>&1
if grep GNU make.vers > /dev/null 2>&1; then
    tmp=`/usr/bin/ksh -c "whence make"`
    case "`/usr/bin/ls -l $tmp`" in
    ??????s*)
          cat <<END >&2
      
NOTE: Your PATH points to GNU make, and your GNU make has the set-group-id
bit set.  You must either rearrange your PATH to put /usr/ccs/bin before the
GNU utilities or you must ask your system administrator to disable the
set-group-id bit on GNU make.

END
          ;;
    esac
fi
rm -f make.vers

# If the C compiler is gcc:
#   - check the fixed-includes
#   - check as(1) and ld(1), they should not be GNU
# If the C compiler is not gcc:
#   - check as(1) and ld(1), they should not be GNU
#   - increase the optimizing level to prevent object size warnings
#
# Watch out in case they have not set $cc.
case "`${cc:-cc} -v 2>&1`" in
*gcc*)
      #
      # Using gcc.
      #
      #echo Using gcc

      # Get gcc to share its secrets.
      echo 'main() { return 0; }' > try.c
      verbose=`${cc:-cc} -v -o try try.c 2>&1`
      rm -f try try.c
      tmp=`echo "$verbose" | grep '^Reading' |
              awk '{print $NF}'  | sed 's/specs$/include/'`

      # Determine if the fixed-includes look like they'll work.
      # Doesn't work anymore for gcc-2.7.2.

      # See if as(1) is GNU as(1).  GNU as(1) won't work for this job.
      case $verbose in
      */usr/ccs/bin/as*) ;;
      *)
          cat <<END >&2

NOTE: You are using GNU as(1).  GNU as(1) will not build Perl.
You must arrange to use /usr/ccs/bin/as, perhaps by setting
GCC_EXEC_PREFIX or by including -B/usr/ccs/bin in your cc command.

END
      ;;
      esac

      # See if ld(1) is GNU ld(1).  GNU ld(1) won't work for this job.
      case $verbose in
      */usr/ccs/bin/ld*) ;;
      *)
          cat <<END >&2

NOTE: You are using GNU ld(1).  GNU ld(1) will not build Perl.
You must arrange to use /usr/ccs/bin/ld, perhaps by setting
GCC_EXEC_PREFIX or by including -B/usr/ccs/bin in your cc command.

END
      ;;
      esac

      ;; #using gcc
*)
      optimize='-O -K Olimit:3064'
      #
      # Not using gcc.
      #
      #echo Not using gcc

      # See if as(1) is GNU as(1).  GNU as(1) won't work for this job.
      case `as --version < /dev/null 2>&1` in
      *GNU*)
              cat <<END >&2

NOTE: You are using GNU as(1).  GNU as(1) will not build Perl.
You must arrange to use /usr/ccs/bin, perhaps by adding it to the
beginning of your PATH.

END
              ;;
      esac

      # See if ld(1) is GNU ld(1).  GNU ld(1) won't work for this job.
      case `ld --version < /dev/null 2>&1` in
      *GNU*)
              cat <<END >&2

NOTE: You are using GNU ld(1).  GNU ld(1) will not build Perl.
You must arrange to use /usr/ccs/bin, perhaps by adding it to the
beginning of your PATH

END
              ;;
      esac

      ;; #not using gcc
esac

# as --version or ld --version might dump core.
rm -f core

# DC/OSx hides certain functions in a libc that looks dynamic but isn't
# because of this we reinclude -lc when building dynamic extensions
libc='/usr/ccs/lib/libc.so'
lddlflags='-G -lc'

# DC/OSx gets overenthusiastic with symbol removal when building dynamically
ccdlflags='-Blargedynsym'

# System malloc is safer when using third part libs
usemymalloc='n'
@


1.1
log
@perl 5.004_04
@
text
@d180 1
a180 1
# because of this we reinclude -lc when building dynamic extenstions
@


1.1.1.1
log
@perl5.005_03
@
text
@@


1.1.1.2
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d180 1
a180 1
# because of this we reinclude -lc when building dynamic extensions
@


