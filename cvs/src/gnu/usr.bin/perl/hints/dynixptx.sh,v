head	1.5;
access;
symbols
	OPENBSD_6_2_BASE:1.5
	PERL_5_24_2:1.1.1.4
	OPENBSD_6_1:1.5.0.60
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.58
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.52
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.54
	OPENBSD_5_8_BASE:1.5
	PERL_5_20_2:1.1.1.4
	OPENBSD_5_7:1.5.0.46
	OPENBSD_5_7_BASE:1.5
	PERL_5_20_1:1.1.1.4
	OPENBSD_5_6:1.5.0.50
	OPENBSD_5_6_BASE:1.5
	PERL_5_18_2:1.1.1.4
	PERL:1.1.1
	OPENBSD_5_5:1.5.0.48
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.44
	OPENBSD_5_4_BASE:1.5
	PERL_5_16_3:1.1.1.4
	OPENBSD_5_3:1.5.0.42
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.40
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.38
	OPENBSD_5_0:1.5.0.36
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.34
	OPENBSD_4_9_BASE:1.5
	PERL_5_12_2:1.1.1.4
	OPENBSD_4_8:1.5.0.32
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.28
	OPENBSD_4_7_BASE:1.5
	PERL_5_10_1:1.1.1.4
	OPENBSD_4_6:1.5.0.30
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.26
	OPENBSD_4_5_BASE:1.5
	PERL_5_10_0:1.1.1.4
	OPENBSD_4_4:1.5.0.24
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.22
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.20
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.18
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.16
	OPENBSD_4_0_BASE:1.5
	PERL_5_8_8:1.1.1.4
	OPENBSD_3_9:1.5.0.14
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.12
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.10
	OPENBSD_3_7_BASE:1.5
	PERL_5_8_6:1.1.1.4
	OPENBSD_3_6:1.5.0.8
	OPENBSD_3_6_BASE:1.5
	PERL_5_8_5:1.1.1.4
	PERL_5_8_3:1.1.1.4
	OPENBSD_3_5:1.5.0.6
	OPENBSD_3_5_BASE:1.5
	PERL_5_8_2:1.1.1.4
	OPENBSD_3_4:1.5.0.4
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.5.0.2
	OPENBSD_3_3_BASE:1.5
	PERL_5_8_0:1.1.1.4
	OPENBSD_3_2:1.4.0.12
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.10
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.8
	OPENBSD_3_0_BASE:1.4
	PERL_5_6_1:1.1.1.3
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	PERL_5_6_0:1.1.1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	PERL_500503:1.1.1.2
	CPAN:1.1.1
	OPENBSD_2_5:1.2.0.6
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.4
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	perl5003:1.1.1.1
	lwall:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.5
date	2002.10.27.22.25.24;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.06.17.05.44;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	99.04.29.22.51.38;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.11.30.07.56.09;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.08.19.10.12.28;	author downsj;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.08.19.10.12.28;	author downsj;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.04.29.22.39.30;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2000.04.06.16.09.27;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2002.10.27.22.14.56;	author millert;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Resolve conflicts, remove old files, merge local changes
@
text
@# Sequent Dynix/Ptx v. 4 hints
# Created 1996/03/15 by Brad Howerter, bhower@@wgc.woodward.com

# Modified 1998/11/10 by Martin J. Bligh, mbligh@@sequent.com
# to incorporate work done by Kurtis D. Rader & myself.

# Use Configure -Dcc=gcc to use gcc.

# cc wants -G for dynamic loading
lddlflags='-G'

# Remove inet to avoid this error in Configure, which causes Configure
# to be unable to figure out return types:
# dynamic linker: ./ssize: can't find libinet.so,
# link with -lsocket instead of -linet

libswanted=`echo $libswanted | sed -e 's/ inet / /'`

# Configure defaults to usenm='y', which doesn't work very well
usenm='n'

# removed d_vfork='define'; we can't use it any more ...

case "$optimize" in
'') optimize='-Wc,-O3 -W0,-xstring' ;;
esac

# We override d_socket because it's very hard for Configure to get it right
# in Dynix/Ptx, for several reasons.
# (1) the socket interface is in libsocket.so -- this wouldn't be so hard
#     for Configure to fathom...but it gets more tangled.
# (2) if the system has been patched there can be libsocket.so.1.FOO.BAR,
#     the FOO.BAR being the old version of the system before the patching.
#     Configure picks up the old broken version.
# (3) libsocket.so points to either libsocket.so.1 (v4.2)
#     or libsocket.so.1.1 (v4.4)  The socket call in libsocket.so.1.1
#     (BSD socket library) is called bsd_socket(), and has a macro wrapper
#     to hide this.
# This information kindly provided by Martin J. Bligh of Sequent.
# As he puts it:
# "Sequent has unusual capabilities, taking it above and beyond
#  the complexity of any other vendor" :-)
#
# Jarkko Hietaniemi November 1998

case "$osvers" in
4.[45]*) # configure doesn't find sockets, as they're in libsocket, not libc
        d_socket='define'
        d_oldsock='undef'
        d_sockpair='define'
        ;;
4.2*) # on ptx/TCP 4.2, we can use BSD sockets, but they're not the default.
        cppflags="$cppflags -Wc,+bsd-socket"
        ccflags="$ccflags -Wc,+bsd-socket"
        ldflags="$ldflags -Wc,+bsd-socket"
        d_socket='define'
        d_oldsock='undef'
        d_sockpair='define'
    ;;
esac
@


1.4
log
@perl-5.6.0 + local changes
@
text
@d47 1
a47 1
4.4*) # configure doesn't find sockets, as they're in libsocket, not libc
@


1.3
log
@perl5.005_03 (stock)
@
text
@d22 1
a22 1
# for performance, apparently this makes a huge difference (~krader)
d24 3
a26 2
d_vfork='define'
optimize='-Wc,-O3 -W0,-xstring'
d53 3
a55 3
        cppflags='-Wc,+bsd-socket'
        ccflags='-Wc,+bsd-socket'
        ldflags='-Wc,+bsd-socket'
@


1.2
log
@perl 5.004_04
@
text
@d3 4
d22 38
a59 7
# Reported by bruce@@aps.org ("Bruce P. Schuck") as needed for
# DYNIX/ptx 4.0 V4.2.1 to get socket i/o to work
# Not defined by default in case they break other versions.
# These probably need to be worked into a piece of code that
# checks for the need for this setting.
# cppflags='-Wc,+abi-socket -I/usr/local/include'
# ccflags='-Wc,+abi-socket -I/usr/local/include'
@


1.1
log
@Initial revision
@
text
@d11 1
a11 1
# link with -lsocket instead of -l inet
d18 7
a24 22
# The Perl library has to be built as a shared library so that dynamic
# loading will work (otherwise code loaded with dlopen() won't be able
# to reference symbols in the main part of perl).  Note that since
# Configure doesn't normally prompt about $d_shrplib this will cause a
# `Whoa there!'.  This is normal, just keep the recommended value.  A
# consequence of all this is that you've got to include the source
# directory in your LD_LIBRARY_PATH when you're building and testing
# perl.
d_shrplib=define

cat <<'EOM' >&4

If you get a 'Whoa there!' with regard to d_shrplib, you can ignore
it, and just keep the recommended value.

If you wish to use dynamic linking, you must use
   LD_LIBRARY_PATH=`pwd`; export LD_LIBRARY_PATH
or
   setenv LD_LIBRARY_PATH `pwd`
before running make.

EOM
@


1.1.1.1
log
@Import of Perl 5.003 into the tree.  Makefile.bsd-wrapper and
config.sh.OpenBSD are the only local changes.
@
text
@@


1.1.1.2
log
@perl5.005_03
@
text
@a2 4

# Modified 1998/11/10 by Martin J. Bligh, mbligh@@sequent.com
# to incorporate work done by Kurtis D. Rader & myself.

d11 1
a11 1
# link with -lsocket instead of -linet
d18 20
a37 4
# for performance, apparently this makes a huge difference (~krader)

d_vfork='define'
optimize='-Wc,-O3 -W0,-xstring'
d39 1
a39 33
# We override d_socket because it's very hard for Configure to get it right
# in Dynix/Ptx, for several reasons.
# (1) the socket interface is in libsocket.so -- this wouldn't be so hard
#     for Configure to fathom...but it gets more tangled.
# (2) if the system has been patched there can be libsocket.so.1.FOO.BAR,
#     the FOO.BAR being the old version of the system before the patching.
#     Configure picks up the old broken version.
# (3) libsocket.so points to either libsocket.so.1 (v4.2)
#     or libsocket.so.1.1 (v4.4)  The socket call in libsocket.so.1.1
#     (BSD socket library) is called bsd_socket(), and has a macro wrapper
#     to hide this.
# This information kindly provided by Martin J. Bligh of Sequent.
# As he puts it:
# "Sequent has unusual capabilities, taking it above and beyond
#  the complexity of any other vendor" :-)
#
# Jarkko Hietaniemi November 1998

case "$osvers" in
4.4*) # configure doesn't find sockets, as they're in libsocket, not libc
        d_socket='define'
        d_oldsock='undef'
        d_sockpair='define'
        ;;
4.2*) # on ptx/TCP 4.2, we can use BSD sockets, but they're not the default.
        cppflags='-Wc,+bsd-socket'
        ccflags='-Wc,+bsd-socket'
        ldflags='-Wc,+bsd-socket'
        d_socket='define'
        d_oldsock='undef'
        d_sockpair='define'
    ;;
esac
@


1.1.1.3
log
@virgin perl 5.6.0
@
text
@d22 1
a22 1
# removed d_vfork='define'; we can't use it any more ...
d24 2
a25 3
case "$optimize" in
'') optimize='-Wc,-O3 -W0,-xstring' ;;
esac
d52 3
a54 3
        cppflags="$cppflags -Wc,+bsd-socket"
        ccflags="$ccflags -Wc,+bsd-socket"
        ldflags="$ldflags -Wc,+bsd-socket"
@


1.1.1.4
log
@stock perl 5.8.0 from CPAN
@
text
@d47 1
a47 1
4.[45]*) # configure doesn't find sockets, as they're in libsocket, not libc
@


