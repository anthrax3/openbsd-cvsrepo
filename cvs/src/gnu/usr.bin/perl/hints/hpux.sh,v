head	1.15;
access;
symbols
	PERL_5_24_2:1.1.1.14
	OPENBSD_6_1:1.15.0.4
	OPENBSD_6_1_BASE:1.15
	OPENBSD_6_0:1.14.0.12
	OPENBSD_6_0_BASE:1.14
	OPENBSD_5_9:1.14.0.6
	OPENBSD_5_9_BASE:1.14
	OPENBSD_5_8:1.14.0.8
	OPENBSD_5_8_BASE:1.14
	PERL_5_20_2:1.1.1.13
	OPENBSD_5_7:1.14.0.2
	OPENBSD_5_7_BASE:1.14
	PERL_5_20_1:1.1.1.13
	OPENBSD_5_6:1.14.0.4
	OPENBSD_5_6_BASE:1.14
	PERL_5_18_2:1.1.1.13
	PERL:1.1.1
	OPENBSD_5_5:1.13.0.6
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.13.0.2
	OPENBSD_5_4_BASE:1.13
	PERL_5_16_3:1.1.1.12
	OPENBSD_5_3:1.12.0.10
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.8
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.6
	OPENBSD_5_0:1.12.0.4
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.2
	OPENBSD_4_9_BASE:1.12
	PERL_5_12_2:1.1.1.11
	OPENBSD_4_8:1.11.0.4
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.2
	OPENBSD_4_7_BASE:1.11
	PERL_5_10_1:1.1.1.10
	OPENBSD_4_6:1.10.0.6
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.2
	OPENBSD_4_5_BASE:1.10
	PERL_5_10_0:1.1.1.9
	OPENBSD_4_4:1.9.0.10
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.8
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.6
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.4
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.2
	OPENBSD_4_0_BASE:1.9
	PERL_5_8_8:1.1.1.8
	OPENBSD_3_9:1.8.0.8
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.6
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.4
	OPENBSD_3_7_BASE:1.8
	PERL_5_8_6:1.1.1.7
	OPENBSD_3_6:1.8.0.2
	OPENBSD_3_6_BASE:1.8
	PERL_5_8_5:1.1.1.7
	PERL_5_8_3:1.1.1.6
	OPENBSD_3_5:1.7.0.2
	OPENBSD_3_5_BASE:1.7
	PERL_5_8_2:1.1.1.6
	OPENBSD_3_4:1.6.0.4
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.6.0.2
	OPENBSD_3_3_BASE:1.6
	PERL_5_8_0:1.1.1.5
	OPENBSD_3_2:1.5.0.6
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.4
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	PERL_5_6_1:1.1.1.4
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	PERL_5_6_0:1.1.1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	PERL_500503:1.1.1.2
	CPAN:1.1.1
	OPENBSD_2_5:1.2.0.6
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.4
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	perl5003:1.1.1.1
	lwall:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.15
date	2017.02.05.00.32.14;	author afresh1;	state Exp;
branches;
next	1.14;
commitid	cxJ08BvJA9Pt2PTM;

1.14
date	2014.03.24.15.05.27;	author afresh1;	state Exp;
branches;
next	1.13;

1.13
date	2013.03.25.20.40.55;	author sthen;	state Exp;
branches;
next	1.12;

1.12
date	2010.09.24.15.06.58;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2009.10.12.18.24.37;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2008.09.29.17.36.07;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2006.03.28.19.23.04;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2004.08.09.18.09.26;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2003.12.03.03.02.34;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.10.27.22.25.24;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.24.18.35.19;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.06.17.05.45;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	99.04.29.22.51.38;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.11.30.07.56.12;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.08.19.10.12.23;	author downsj;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.08.19.10.12.23;	author downsj;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.04.29.22.39.31;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2000.04.06.16.09.28;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2001.05.24.18.23.10;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2002.10.27.22.14.56;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2003.12.03.02.43.56;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2004.08.09.17.47.57;	author millert;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2006.03.28.18.48.28;	author millert;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2008.09.29.17.18.27;	author millert;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	2009.10.12.18.10.46;	author millert;	state Exp;
branches;
next	1.1.1.11;

1.1.1.11
date	2010.09.24.14.48.55;	author millert;	state Exp;
branches;
next	1.1.1.12;

1.1.1.12
date	2013.03.25.20.08.48;	author sthen;	state Exp;
branches;
next	1.1.1.13;

1.1.1.13
date	2014.03.24.14.59.02;	author afresh1;	state Exp;
branches;
next	1.1.1.14;

1.1.1.14
date	2017.08.14.13.46.13;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.15
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!/usr/bin/sh

### SYSTEM ARCHITECTURE

# Determine the architecture type of this system.
# Keep leading tab below -- Configure Black Magic -- RAM, 03/02/97
	xxOsRevMajor=`uname -r | sed -e 's/^[^0-9]*//' | cut -d. -f1`;
	xxOsRevMinor=`uname -r | sed -e 's/^[^0-9]*//' | cut -d. -f2`;
	xxOsRev=`expr 100 \* $xxOsRevMajor + $xxOsRevMinor`
if [ "$xxOsRevMajor" -ge 10 ]; then
    # This system is running >= 10.x

    # Tested on 10.01 PA1.x and 10.20 PA[12].x.
    # Idea: Scan /usr/include/sys/unistd.h for matches with
    # "#define CPU_* `getconf # CPU_VERSION`" to determine CPU type.
    # Note the text following "CPU_" is used, *NOT* the comment.
    #
    # ASSUMPTIONS: Numbers will continue to be defined in hex -- and in
    # /usr/include/sys/unistd.h -- and the CPU_* #defines will be kept
    # up to date with new CPU/OS releases.
    xxcpu=`getconf CPU_VERSION`; # Get the number.
    xxcpu=`printf '0x%x' $xxcpu`; # convert to hex
    archname=`sed -n -e "s/^#[[:space:]]*define[[:space:]]*CPU_//p" /usr/include/sys/unistd.h |
	sed -n -e "s/[[:space:]]*$xxcpu[[:space:]].*//p" |
	sed -e s/_RISC/-RISC/ -e s/HP_// -e s/_/./ -e "s/[[:space:]]*//g"`;
else
    # This system is running <= 9.x
    # Tested on 9.0[57] PA and [78].0 MC680[23]0.  Idea: After removing
    # MC6888[12] from context string, use first CPU identifier.
    #
    # ASSUMPTION: Only CPU identifiers contain no lowercase letters.
    archname=`getcontext | tr ' ' '\012' | grep -v '[a-z]' | grep -v MC688 |
	sed -e 's/HP-//' -e 1q`;
    selecttype='int *'
    fi

# For some strange reason, the u32align test from Configure hangs in
# HP-UX 10.20 since the December 2001 patches.  So hint it to avoid
# the test.
if [ "$xxOsRevMajor" -le 10 ]; then
    d_u32align=$define
    fi

echo "Archname is $archname"

# Fix XSlib (CPAN) confusion when re-using a prefix but changing from ILP32
# to LP64 builds.  They're NOT binary compatible, so quit claiming they are.
archname64=LP64


### HP-UX OS specific behaviour

# -ldbm is obsolete and should not be used
# -lBSD contains BSD-style duplicates of SVR4 routines that cause confusion
# -lPW is obsolete and should not be used
# The libraries crypt, malloc, ndir, and net are empty.
set `echo "X $libswanted " | sed -e 's/ ld / /' -e 's/ dbm / /' -e 's/ BSD / /' -e 's/ PW / /'`
shift
libswanted="$*"

cc=${cc:-cc}
ar=/usr/bin/ar	# Yes, truly override.  We do not want the GNU ar.
full_ar=$ar	# I repeat, no GNU ar.  arrr.

set `echo "X $ccflags " | sed -e 's/ -A[ea] / /' -e 's/ -D_HPUX_SOURCE / /'`
shift
	cc_cppflags="$* -D_HPUX_SOURCE"
cppflags="-Aa -D__STDC_EXT__ $cc_cppflags"

case "$prefix" in
    "") prefix='/opt/perl5' ;;
    esac

    gnu_as=no
    gnu_ld=no
case `$cc -v 2>&1`"" in
    *gcc*)  ccisgcc="$define"
	    ccflags="$cc_cppflags"
	    if [ "X$gccversion" = "X" ]; then
		# Done too late in Configure if hinted
		gccversion=`$cc -dumpversion`
		fi
	    case "$gccversion" in
		[012]*) # HP-UX and gcc-2.* break UINT32_MAX :-(
			ccflags="$ccflags -DUINT32_MAX_BROKEN"
			;;
		[34]*) # GCC (both 32bit and 64bit) will define __STDC_EXT__
                       # by default when using GCC 3.0 and newer versions of
                       # the compiler.
                       cppflags="$cc_cppflags"
                       ;;
		esac
	    case "`getconf KERNEL_BITS 2>/dev/null`" in
		*64*)
		    echo "main(){}">try.c
		    case "$gccversion" in
			[34]*)
			    case "$archname" in
                               PA-RISC*)
                                   case "$ccflags" in
                                       *-mpa-risc*) ;;
                                       *) ccflags="$ccflags -mpa-risc-2-0" ;;
                                       esac
                                   ;;
				esac
			    ;;
			*)  # gcc with gas will not accept +DA2.0
			    case "`$cc -c -Wa,+DA2.0 try.c 2>&1`" in
				*"+DA2.0"*)		# gas
				    gnu_as=yes
				    ;;
				*)			# HPas
				    ccflags="$ccflags -Wa,+DA2.0"
				    ;;
				esac
			    ;;
			esac
		    # gcc with gld will not accept +vnocompatwarnings
		    case "`$cc -o try -Wl,+vnocompatwarnings try.c 2>&1`" in
			*"+vnocompat"*)		# gld
			    gnu_ld=yes
			    ;;
			*)			# HPld
			   case "$gccversion" in
			       [12]*)
				   # Why not 3 as well here?
				   # Since not relevant to IA64, not changed.
				   ldflags="$ldflags -Wl,+vnocompatwarnings"
				   ccflags="$ccflags -Wl,+vnocompatwarnings"
				   ;;
			       esac
			    ;;
			esac
		    rm -f try.c
		    ;;
		esac
	    ;;
    *)      ccisgcc=''
	    # What cannot be use in combination with ccache links :(
	    cc_found=""
	    for p in `echo $PATH | tr : ' ''` ; do
		x="$p/cc"
		if [ -f $x ] && [ -x $x ]; then
		    if [ -h $x ]; then
			l=`ls -l $x | sed 's,.*-> ,,'`
			case $l in
			    /*) x=$l		;;
			    *)  x="$p/$l"	;;
			    esac
			fi
		    x=`echo $x | sed 's,/\./,/,g'`
		    case $x in
			*ccache*) ;;
			*) [ -z "$cc_found" ] && cc_found=$x ;;
			esac
		    fi
		done
	    [ -z "$cc_found" ] && cc_found=`which cc`
	    what $cc_found >&4
	    ccversion=`what $cc_found | awk '/Compiler/{print $2}/Itanium/{print $6,$7}/for Integrity/{print $6,$7}'`
	    case "$ccflags" in
               "-Ae "*) ;;
		*)  ccflags="-Ae $cc_cppflags"
		    # +vnocompatwarnings not known in 10.10 and older
		    if [ $xxOsRev -ge 1020 ]; then
			ccflags="$ccflags -Wl,+vnocompatwarnings"
			fi
		    ;;
               esac
	    # Needed because cpp does only support -Aa (not -Ae)
	    cpplast='-'
	    cppminus='-'
	    cppstdin='cc -E -Aa -D__STDC_EXT__'
	    cpprun=$cppstdin
#	    case "$d_casti32" in
#		"") d_casti32='undef' ;;
#		esac
	    ;;
    esac

# When HP-UX runs a script with "#!", it sets argv[0] to the script name.
toke_cflags='ccflags="$ccflags -DARG_ZERO_IS_SCRIPT"'

### 64 BITNESS

# Some gcc versions do native 64 bit long (e.g. 2.9-hppa-000310 and gcc-3.0)
# We have to force 64bitness to go search the right libraries
    gcc_64native=no
case "$ccisgcc" in
    $define|true|[Yy])
	echo '#include <stdio.h>\nint main(){long l;printf("%d\\n",sizeof(l));}'>try.c
	$cc -o try $ccflags $ldflags try.c
	if [ "`try`" = "8" ]; then
	    case "$use64bitall" in
		$define|true|[Yy]) ;;
		*)  cat <<EOM >&4

*** This version of gcc uses 64 bit longs. -Duse64bitall is
*** implicitly set to enable continuation
EOM
		esac
	    use64bitall=$define
	    gcc_64native=yes
	    fi
	;;
    esac

case "$use64bitall" in
    $define|true|[yY]*) use64bitint="$define" ;;
    esac

case "$usemorebits" in
    $define|true|[yY]*) use64bitint="$define"; uselongdouble="$define" ;;
    esac

# There is a weird pre-C99 long double (a struct of four uin32_t)
# in HP-UX 10.20 but beyond strtold() there's no support for them
# for example in <math.h>.
case "$uselongdouble" in
    $define|true|[yY]*)
	if [ "$xxOsRevMajor" -lt 11 ]; then
	    cat <<EOM >&4

*** uselongdouble (or usemorebits) is not supported on HP-UX $xxOsRevMajor.
*** You need at least HP-UX 11.0.
*** Cannot continue, aborting.
EOM
	    exit 1
	fi
	;;
    esac

# Configure long double scan will detect the HP-UX 10.20 "long double"
# (a struct of four uin32_t) and think it is IEEE quad.  Make it not so.
if [ "$xxOsRevMajor" -lt 11 ]; then
    d_longdbl="$undef"
    longdblsize=8 # Make it double.
fi

case "$archname" in
    IA64*)
	# While here, override so=sl auto-detection
	so='so'
	;;
    esac

case "$use64bitall" in
    $define|true|[Yy])

	if [ "$xxOsRevMajor" -lt 11 ]; then
	    cat <<EOM >&4

*** 64-bit compilation is not supported on HP-UX $xxOsRevMajor.
*** You need at least HP-UX 11.0.
*** Cannot continue, aborting.
EOM
	    exit 1
	    fi

	if [ $xxOsRev -eq 1100 ]; then
	    # HP-UX 11.00 uses only 48 bits internally in 64bit mode, not 64
	    # force min/max to 2**47-1
	    sGMTIME_max=140737488355327
	    sGMTIME_min=-62167219200
	    sLOCALTIME_max=140737488355327
	    sLOCALTIME_min=-62167219200
	    fi

	# Set libc and the library paths
	case "$archname" in
	    PA-RISC*)
		loclibpth="$loclibpth /lib/pa20_64"
		libc='/lib/pa20_64/libc.sl' ;;
	    IA64*)
		loclibpth="$loclibpth /usr/lib/hpux64"
		libc='/usr/lib/hpux64/libc.so' ;;
	    esac
	if [ ! -f "$libc" ]; then
	    cat <<EOM >&4

*** You do not seem to have the 64-bit libc.
*** I cannot find the file $libc.
*** Cannot continue, aborting.
EOM
	    exit 1
	    fi

	case "$ccisgcc" in
	    $define|true|[Yy])
		# The fixed socket.h header file is wrong for gcc-4.x
		# on PA-RISC2.0W, so Sock_type_t is size_t which is
		# unsigned long which is 64bit which is too long
		case "$gccversion" in
		    4*) case "$archname" in
			    PA-RISC*) socksizetype=int ;;
			    esac
			;;
		    esac

		# For the moment, don't care that it ain't supported (yet)
		# by gcc (up to and including 2.95.3), cause it'll crash
		# anyway. Expect auto-detection of 64-bit enabled gcc on
		# HP-UX soon, including a user-friendly exit
		case $gcc_64native in
		    no) case "$gccversion" in
			    [1234]*)
				ccflags="$ccflags -mlp64"
				case "$archname" in
				    PA-RISC*)
					ldflags="$ldflags -Wl,+DD64"
					;;
				    IA64*)
					ldflags="$ldflags -mlp64"
					;;
				    esac
				;;
			    esac
			;;
		    esac
		;;
	    *)
		case "$use64bitall" in
		    $define|true|[yY]*)
			ccflags="$ccflags +DD64"
			ldflags="$ldflags +DD64"
			;;
		    esac
		;;
	    esac

	# Reset the library checker to make sure libraries
	# are the right type
	# (NOTE: on IA64, this doesn't work with .a files.)
	libscheck='case "`/usr/bin/file $xxx`" in
		       *ELF-64*|*LP64*|*PA-RISC2.0*) ;;
		       *) xxx=/no/64-bit$xxx ;;
		       esac'

	;;

    *)	# Not in 64-bit mode

	case "$archname" in
	    PA-RISC*)
		libc='/lib/libc.sl' ;;
	    IA64*)
		loclibpth="$loclibpth /usr/lib/hpux32"
		libc='/usr/lib/hpux32/libc.so' ;;
	    esac
	;;
    esac

# By setting the deferred flag below, this means that if you run perl
# on a system that does not have the required shared library that you
# linked it with, it will die when you try to access a symbol in the
# (missing) shared library.  If you would rather know at perl startup
# time that you are missing an important shared library, switch the
# comments so that immediate, rather than deferred loading is
# performed.  Even with immediate loading, you can postpone errors for
# undefined (or multiply defined) routines until actual access by
# adding the "nonfatal" option.
# ccdlflags="-Wl,-E -Wl,-B,immediate $ccdlflags"
# ccdlflags="-Wl,-E -Wl,-B,immediate,-B,nonfatal $ccdlflags"
if [ "$gnu_ld" = "yes" ]; then
    ccdlflags="-Wl,-E $ccdlflags"
else
    ccdlflags="-Wl,-E -Wl,-B,deferred $ccdlflags"
    fi


### COMPILER SPECIFICS

## Local restrictions (point to README.hpux to lift these)

## Optimization limits
cat >try.c <<EOF
#include <stdio.h>
#include <sys/resource.h>

int main ()
{
    struct rlimit rl;
    int i = getrlimit (RLIMIT_DATA, &rl);
    printf ("%d\n", (int)(rl.rlim_cur / (1024 * 1024)));
    } /* main */
EOF
$cc -o try $ccflags $ldflags try.c
	maxdsiz=`try`
rm -f try try.c core
if [ $maxdsiz -le 64 ]; then
    # 64 Mb is probably not enough to optimize toke.c
    # and regexp.c with -O2
    cat <<EOM >&4
Your kernel limits the data section of your programs to $maxdsiz Mb,
which is (sadly) not enough to fully optimize some parts of the
perl binary. I'll try to use a lower optimization level for
those parts. If you are a sysadmin, and you *do* want full
optimization, raise the 'maxdsiz' kernel configuration parameter
to at least 0x08000000 (128 Mb) and rebuild your kernel.
EOM
regexec_cflags=''
doop_cflags=''
op_cflags=''
opmini_cflags=''
perlmain_cflags=''
    fi

case "$ccisgcc" in
    $define|true|[Yy])

	case "$optimize" in
	    "")           optimize="-g -O" ;;
	    *O[3456789]*) optimize=`echo "$optimize" | sed -e 's/O[3-9]/O2/'` ;;
	    esac
	#ld="$cc"
	ld=/usr/bin/ld
	cccdlflags='-fPIC'
	#lddlflags='-shared'
	lddlflags='-b'
	case "$optimize" in
	    *-g*-O*|*-O*-g*)
		# gcc without gas will not accept -g
		echo "main(){}">try.c
		case "`$cc $optimize -c try.c 2>&1`" in
		    *"-g option disabled"*)
			set `echo "X $optimize " | sed -e 's/ -g / /'`
			shift
			optimize="$*"
			;;
		    esac
		;;
	    esac
	if [ $maxdsiz -le 64 ]; then
	    case "$optimize" in
		*O2*)	opt=`echo "$optimize" | sed -e 's/O2/O1/'`
			toke_cflags="$toke_cflags;optimize=\"$opt\""
			regexec_cflags="optimize=\"$opt\""
			;;
		esac
	    fi
	;;

    *)
	case "$optimize" in
	    "")           optimize="+O2 +Onolimit" ;;
	    *O[3456789]*) optimize=`echo "$optimize" | sed -e 's/O[3-9]/O2/'` ;;
	    esac
	case "$optimize" in
	    *-O*|\
	    *O2*)   opt=`echo "$optimize" | sed -e 's/-O/+O2/' -e 's/O2/O1/' -e 's/ *+Onolimit//'`
		    ;;
	    *)      opt="$optimize"
		    ;;
	    esac
	case "$archname" in
	    PA-RISC2.0)
		case "$ccversion" in
		    B.11.11.*)
			# opmini.c and op.c with +O2 makes the compiler die
			# of internal error, for perlmain.c only +O0 (no opt)
                        # works.
			case "$optimize" in
			*O2*)	opt=`echo "$optimize" | sed -e 's/O2/O1/'`
				opmini_cflags="optimize=\"$opt\""
				op_cflags="optimize=\"$opt\""
				perlmain_cflags="optimize=\"\""
				;;
			esac
		    esac
		;;
	    IA64*)
		case "$ccversion" in
		    B3910B*A.06.0[12345])
			# > cc --version
			# cc: HP aC++/ANSI C B3910B A.06.05 [Jul 25 2005]
			# Has optimizing problems with -O2 and up for both
			# maint (5.8.8+) and blead (5.9.3+)
			# -O1/+O1 passed all tests (m)'05 [ 10 Jan 2005 ]
			optimize="$opt"			;;
			B3910B*A.06.15)
			# > cc --version
			# cc: HP C/aC++ B3910B A.06.15 [May 16 2007]
			# Has optimizing problems with +O2 for blead (5.17.4),
			# see https://rt.perl.org:443/rt3/Ticket/Display.html?id=103668.
			#
			# +O2 +Onolimit +Onoprocelim  +Ostore_ordering \
			# +Onolibcalls=strcmp
			# passes all tests (with/without -DDEBUGGING) [Nov 17 2011]
			case "$optimize" in
				*O2*) optimize="$optimize +Onoprocelim +Ostore_ordering +Onolibcalls=strcmp" ;;
				esac
			;;
		    *)  doop_cflags="optimize=\"$opt\""
			op_cflags="optimize=\"$opt\""	;;
		    esac
		;;
	    esac
	if [ $maxdsiz -le 64 ]; then
	    toke_cflags="$toke_cflags;optimize=\"$opt\""
	    regexec_cflags="optimize=\"$opt\""
	    fi
	ld=/usr/bin/ld
	cccdlflags='+Z'
	lddlflags='-b +vnocompatwarnings'
	;;
    esac

## LARGEFILES
if [ $xxOsRev -lt 1020 ]; then
    uselargefiles="$undef"
    fi

#case "$uselargefiles-$ccisgcc" in
#    "$define-$define"|'-define')
#	cat <<EOM >&4
#
#*** I'm ignoring large files for this build because
#*** I don't know how to do use large files in HP-UX using gcc.
#
#EOM
#	uselargefiles="$undef"
#	;;
#    esac

# Once we have the compiler flags defined, Configure will
# execute the following call-back script. See hints/README.hints
# for details.
cat > UU/cc.cbu <<'EOCBU'
# This script UU/cc.cbu will get 'called-back' by Configure after it
# has prompted the user for the C compiler to use.

# Compile and run the a test case to see if a certain gcc bug is
# present. If so, lower the optimization level when compiling
# pp_pack.c.  This works around a bug in unpack.

if test -z "$ccisgcc" -a -z "$gccversion"; then
    : no tests needed for HPc
else
    echo " "
    echo "Testing for a certain gcc bug is fixed in your compiler..."

    # Try compiling the test case.
    if $cc -o t001 -O $ccflags $ldflags -lm ../hints/t001.c; then
       gccbug=`$run ./t001`
       case "$gccbug" in
           *fails*)
               cat >&4 <<EOF
This C compiler ($gccversion) is known to have optimizer
problems when compiling pp_pack.c.

Disabling optimization for pp_pack.c.
EOF
               case "$pp_pack_cflags" in
                   '') pp_pack_cflags='optimize='
                       echo "pp_pack_cflags='optimize=\"\"'" >> config.sh ;;
                   *)  echo "You specified pp_pack_cflags yourself, so we'll go with your value." >&4 ;;
                   esac
               ;;
           *)  echo "Your compiler is ok." >&4
               ;;
           esac
    else
       echo " "
       echo "*** WHOA THERE!!! ***" >&4
       echo "    Your C compiler \"$cc\" doesn't seem to be working!" >&4
       case "$knowitall" in
           '') echo "    You'd better start hunting for one and let me know about it." >&4
               exit 1
               ;;
           esac
       fi

    rm -f t001$_o t001$_exe
    fi
EOCBU

cat >config.arch <<'EOCBU'
# This script UU/config.arch will get 'called-back' by Configure after
# all other configurations are done just before config.h is generated
case "$archname:$optimize" in
  PA*:*-g*[-+]O*|PA*:*[-+]O*-g*)
    case "$ccflags" in
      *DD64*) ;;
      *) case "$ccversion" in
	  # Only on PA-RISC. B3910B (aCC) is not faulty
	  # B.11.* and A.10.* are
	  [AB].1*)
	      # cc: error 1414: Can't handle preprocessed file foo.i if -g and -O specified.
	      echo "HP-UX C-ANSI-C on PA-RISC does not accept both -g and -O on preprocessed files" >&4
	      echo "when compiling in 32bit mode. The optimizer will be disabled." >&4
	      optimize=`echo "$optimize" | sed -e 's/[-+]O[0-9]*//' -e 's/+Onolimit//' -e 's/^ *//'`
	      ;;
	  esac
      esac
  esac
EOCBU

cat >UU/uselargefiles.cbu <<'EOCBU'
# This script UU/uselargefiles.cbu will get 'called-back' by Configure
# after it has prompted the user for whether to use large files.

case "$archname:$use64bitall:$use64bitint" in
    *-LP64*:undef:define)
	archname=`echo "$archname" | sed 's/-LP64/-64int/'`
	echo "Archname changed to $archname"
	;;
    esac

case "$uselargefiles" in
    ""|$define|true|[yY]*)
	# there are largefile flags available via getconf(1)
	# but we cheat for now.  (Keep that in the left margin.)
ccflags_uselargefiles="-D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"

	case " $ccflags " in
	*" $ccflags_uselargefiles "*) ;;
	*) ccflags="$ccflags $ccflags_uselargefiles" ;;
	esac

	if test -z "$ccisgcc" -a -z "$gccversion"; then
	    # The strict ANSI mode (-Aa) doesn't like large files.
	    ccflags=`echo " $ccflags "|sed 's@@ -Aa @@ @@g'`
	    case "$ccflags" in
		*-Ae*) ;;
		*)     ccflags="$ccflags -Ae" ;;
		esac
	    fi
	;;
    esac
EOCBU

# THREADING

# This script UU/usethreads.cbu will get 'called-back' by Configure
# after it has prompted the user for whether to use threads.
cat >UU/usethreads.cbu <<'EOCBU'
case "$usethreads" in
    $define|true|[yY]*)
	if [ "$xxOsRevMajor" -lt 10 ]; then
	    cat <<EOM >&4

HP-UX $xxOsRevMajor cannot support POSIX threads.
Consider upgrading to at least HP-UX 11.
Cannot continue, aborting.
EOM
	    exit 1
	    fi

	if [ "$xxOsRevMajor" -eq 10 ]; then
	    # Under 10.X, a threaded perl can be built
	    if [ -f /usr/include/pthread.h ]; then
		if [ -f /usr/lib/libcma.sl ]; then
		    # DCE (from Core OS CD) is installed

		   # Check if it is pristine, or patched
		   cmavsn=`what /usr/lib/libcma.sl 2>&1 | grep 1996`
		   if [ ! -z "$cmavsn" ]; then
		       cat <<EOM >&4

***************************************************************************

Perl will support threading through /usr/lib/libcma.sl from
the HP DCE package, but the version found is too old to be
reliable.

If you are not depending on this specific version of the library,
consider to upgrade using patch PHSS_23672 (read README.hpux)

***************************************************************************

(sleeping for 10 seconds...)
EOM
		       sleep 10
		       fi

		    # It needs # libcma and OLD_PTHREADS_API. Also
		    # <pthread.h> needs to be #included before any
		    # other includes (in perl.h)

		    # HP-UX 10.X uses the old pthreads API
		    d_oldpthreads="$define"

		    # include libcma before all the others
		    libswanted="cma $libswanted"

		    # tell perl.h to include <pthread.h> before other
		    # include files
		    ccflags="$ccflags -DPTHREAD_H_FIRST"
# First column on purpose:
# this is not a standard Configure variable
# but we need to get this noticed.
pthread_h_first="$define"

		    # HP-UX 10.X seems to have no easy
		    # way of detecting these *time_r protos.
		    d_gmtime_r_proto='define'
		    gmtime_r_proto='REENTRANT_PROTO_I_TS'
		    d_localtime_r_proto='define'
		    localtime_r_proto='REENTRANT_PROTO_I_TS'

		    # Avoid the poisonous conflicting (and irrelevant)
		    # prototypes of setkey ().
		    i_crypt="$undef"

		    # CMA redefines select to cma_select, and cma_select
		    # expects int * instead of fd_set * (just like 9.X)
		    selecttype='int *'

		elif [ -f /usr/lib/libpthread.sl ]; then
		    # PTH package is installed
		    libswanted="pthread $libswanted"
		else
		    libswanted="no_threads_available"
		    fi
	    else
		libswanted="no_threads_available"
		fi

	    if [ $libswanted = "no_threads_available" ]; then
		cat <<EOM >&4

In HP-UX 10.X for POSIX threads you need both of the files
/usr/include/pthread.h and either /usr/lib/libcma.sl or /usr/lib/libpthread.sl.
Either you must upgrade to HP-UX 11 or install a posix thread library:

    DCE-CoreTools from HP-UX 10.20 Hardware Extensions 3.0 CD (B3920-13941)

or

    PTH package from e.g. http://hpux.connect.org.uk/hppd/hpux/Gnu/pth-2.0.7/

Cannot continue, aborting.
EOM
		exit 1
		fi
	else
	    # 12 may want upping the _POSIX_C_SOURCE datestamp...
	    ccflags=" -D_POSIX_C_SOURCE=199506L -D_REENTRANT $ccflags"
	    set `echo X "$libswanted "| sed -e 's/ c / pthread c /'`
	    shift
	    libswanted="$*"

	    # HP-UX 11.X seems to have no easy
	    # way of detecting these *time_r protos.
	    d_gmtime_r_proto='define'
	    gmtime_r_proto='REENTRANT_PROTO_S_TS'
	    d_localtime_r_proto='define'
	    localtime_r_proto='REENTRANT_PROTO_S_TS'
	    fi
	;;
    esac
EOCBU

# There used to be:
#  The mysterious io_xs memory corruption in 11.00 32bit seems to get
#  fixed by not using Perl's malloc.  Flip side is performance loss.
#  So we want mymalloc for all situations possible
# That set usemymalloc to 'n' for threaded builds and non-gcc 32bit
#  non-debugging builds and 'y' for all others

usemymalloc='n'
case "$useperlio" in
    $undef|false|[nN]*) usemymalloc='y' ;;
    esac

# malloc wrap works
case "$usemallocwrap" in
    '') usemallocwrap='define' ;;
    esac

# ctime_r () and asctime_r () seem to have issues for versions before
# HP-UX 11
if [ $xxOsRevMajor -lt 11 ]; then
    d_ctime_r="$undef"
    d_asctime_r="$undef"
    fi

# fpclassify () is a macro, the library call is Fpclassify
# Similarly with the others below.
d_fpclassify='define'
d_isnan='define'
d_isinf='define'
d_isfinite='define'
d_unordered='define'
# Next one(s) need the leading tab.  These are special 'hint' symbols that
# are not to be propagated to config.sh, all related to pthreads draft 4
# interfaces.
case "$d_oldpthreads" in
    ''|$undef)
	d_crypt_r_proto='undef'
	d_getgrent_r_proto='undef'
	d_getpwent_r_proto='undef'
	d_strerror_r_proto='undef'
	;;
    esac

# H.Merijn says it's not 1998 anymore: ODBM is not needed,
# and it seems to be buggy in HP-UX anyway.
i_dbm=undef

# In HP-UXes prior to 11.23 strtold() returned a HP-UX
# specific union called long_double, not a C99 long double.
case "`grep 'double strtold.const' /usr/include/stdlib.h`" in
*"long double strtold"*) ;; # strtold should be safe.
*) echo "Looks like your strtold() is non-standard..." >&4
   d_strtold=undef ;;
esac

# In pre-11 HP-UXes there really isn't isfinite(), despite what
# Configure might think. (There is finite(), though.)
case "`grep 'isfinite' /usr/include/math.h`" in
*"isfinite"*) ;;
*) d_isfinite=undef ;;
esac
@


1.14
log
@Merge perl-5.18.2 plus local patches, remove old files

OK espie@@ sthen@@ deraadt@@
@
text
@d216 24
d404 2
d456 15
d601 8
d796 19
@


1.13
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@d442 1
a442 1
			# Has optimizing problems with +O2 for blead (5.16.3),
@


1.12
log
@merge in perl 5.12.2 plus local changes
@
text
@d160 1
a160 1
	    ccversion=`what $cc_found | awk '/Compiler/{print $2}/Itanium/{print $6,$7}/for Integrity/{print $6}'`
d223 1
a223 1
case "$use64bitint" in
d266 10
d417 1
a417 1
    *)	# HP's compiler cannot combine -g and -O
d439 13
d536 21
d681 1
a681 1
    PTH package from e.g. http://hpux.tn.tudelft.nl/hppd/hpux/alpha.html
@


1.11
log
@Merge in perl 5.10.1
@
text
@d236 9
d282 1
a282 1
				    ;;
d288 6
a293 2
		ccflags="$ccflags +DD64"
		ldflags="$ldflags +DD64"
a683 1

@


1.10
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@a220 12
    *)
	case "$uselongdouble" in
	    *) ;;
	    $define|true|[yY]*)
		cat <<EOM >&4

*** long doubles are not (yet) supported on HP-UX (any version)
*** Until it does, we cannot continue, aborting.
EOM
		exit 1 ;;
	    esac
	;;
@


1.9
log
@merge in perl 5.8.8
@
text
@d81 1
a81 1
		gccversion=`$cc --version | sed 's/.*(GCC) *//'`
d160 1
a160 1
	    ccversion=`what $cc_found | awk '/Compiler/{print $2}/Itanium/{print $6,$7}'`
d191 1
a191 1
	echo 'int main(){long l;printf("%d\\n",sizeof(l));}'>try.c
d194 3
a196 1
	    cat <<EOM >&4
d201 1
d253 1
a253 1
	    IA64*) 
d311 1
a311 1
	    IA64*) 
d342 1
d368 1
d373 1
a373 1
	
d428 2
a429 1
		    *)  doop_cflags="optimize=\"$opt\""	;;
d449 1
a449 1
#    "$define-$define"|'-define') 
d513 1
a513 1
# This script UU/uselargefiles.cbu will get 'called-back' by Configure 
d540 1
a540 1
# This script UU/usethreads.cbu will get 'called-back' by Configure 
d608 1
a608 1
		    # prototypes of setkey(). 
d648 7
a655 1

d660 6
a665 20
# The mysterious io_xs memory corruption in 11.00 32bit seems to get
# fixed by not using Perl's malloc.  Flip side is performance loss.
# So we want mymalloc for all situations possible
usemymalloc='y'
case "$usethreads" in
    $define|true|[yY]*) usemymalloc='n' ;;
    *)  case "$ccisgcc" in
           $undef|false|[nN]*)
               case "$use64bitint" in
                   $undef|false|[nN]*)
                       case "$ccflags" in
                           *-DDEBUGGING*) ;;
                           *) usemymalloc='n' ;;
                           esac
                       ;;
                   esac
               ;;
           esac
       ;;
    esac
d674 2
a675 2
'') usemallocwrap='define' ;;
esac
d677 1
a677 1
# ctime_r() and asctime_r() seem to have issues for versions before
d685 1
a685 1
# fpclassify() is a macro, the library call is Fpclassify
@


1.8
log
@merge 5.8.5 into HEAD
remove now-unused files
crank libperl shared library major number
update Makefile.bsd-wrapper
tweak openbsd hints file for arm and m68k
@
text
@d87 1
a87 1
               3*)     # GCC (both 32bit and 64bit) will define __STDC_EXT__
d97 1
a97 1
			3*)
d139 22
a160 1
	    ccversion=`which cc | xargs what | awk '/Compiler/{print $2}/Itanium/{print $6,$7}'`
d272 10
a281 9
			    [123]*) ccflags="$ccflags -mlp64"
				    case "$archname" in
					PA-RISC*)
					    ldflags="$ldflags -Wl,+DD64"
					    ;;
					IA64*)
					    ldflags="$ldflags -mlp64"
					    ;;
					esac
d345 1
a345 1
    printf ("%d\n", rl.rlim_cur / (1024 * 1024));
d413 14
a430 5
	case "$archname" in
	    IA64*)
		doop_cflags="optimize=\"$opt\""
		;;
	    esac
d678 8
@


1.7
log
@Resolve conflicts for perl 5.8.2, remove old files, and add OpenBSD-specific scaffolding
@
text
@d8 2
d139 1
a139 1
	    ccversion=`which cc | xargs what | awk '/Compiler/{print $2}'`
d142 6
a147 1
               *) ccflags="-Ae $cc_cppflags -Wl,+vnocompatwarnings" ;;
d407 3
d642 5
@


1.6
log
@Resolve conflicts, remove old files, merge local changes
@
text
@d413 52
@


1.5
log
@merge in perl 5.6.1 with our local changes
@
text
@d1 1
a1 1
#! /bin/sh
d3 31
a33 80
# hints/hpux.sh
# Perl Configure hints file for Hewlett-Packard's HP-UX 9.x and 10.x
# (Hopefully, 7.x through 11.x.)
#
# This file is based on hints/hpux_9.sh, Perl Configure hints file for
# Hewlett Packard HP-UX 9.x
#
# Use Configure -Dcc=gcc to use gcc.
#
# From: Jeff Okamoto <okamoto@@corp.hp.com>
# and
# hints/hpux_10.sh, Perl Configure hints file for Hewlett Packard HP-UX 10.x
# From: Giles Lean <giles@@nemeton.com.au>
# and
# Use #define CPU_* instead of comments for >= 10.x.
# Support PA1.2 under 10.x.
# Distinguish between PA2.0, PA2.1, etc.
# Distinguish between MC68020, MC68030, MC68040
# Don't assume every OS != 10 is < 10, (e.g., 11).
# From: Chuck Phillips <cdp@@fc.hp.com>
# HP-UX 10 pthreads hints: Matthew T Harden <mthard@@mthard1.monsanto.com>
# From: Dominic Dunlop <domo@@computer.org>
# Abort and offer advice if bundled (non-ANSI) C compiler selected
# From: H.Merijn Brand <h.m.brand@@hccnet.nl>
# ccversion detection
# perl/64/HP-UX wants libdb-3.0 to be shared ELF 64
# generic pthread support detection for PTH package


# This version: March 8, 2000
# Current maintainer: Jeff Okamoto <okamoto@@corp.hp.com>

#--------------------------------------------------------------------
# Use Configure -Dcc=gcc to use gcc.
# Use Configure -Dprefix=/usr/local to install in /usr/local.
#
# You may have dynamic loading problems if the environment variable
# LDOPTS='-a archive'.  Under >= 10.x, you can instead LDOPTS='-a
# archive_shared' to prefer archive libraries without requiring them.
# Regardless of HPUX release, in the "libs" variable or the ext.libs
# file, you can always give explicit path names to archive libraries
# that may not exist on the target machine.  E.g., /usr/lib/libndbm.a
# instead of -lndbm.  See also note below on ndbm.
#
# ALSO, bear in mind that gdbm and Berkely DB contain incompatible
# replacements for ndbm (and dbm) routines.  If you want concurrent
# access to ndbm files, you need to make sure libndbm is linked in
# *before* gdbm and Berkely DB.  Lastly, remember to check the
# "ext.libs" file which is *probably* messing up the order.  Often,
# you can replace ext.libs with an empty file to fix the problem.
#
# If you get a message about "too much defining", as may happen
# in HPUX < 10, you might have to append a single entry to your
# ccflags: '-Wp,-H256000'
# NOTE: This is a single entry (-W takes the argument 'p,-H256000').
#--------------------------------------------------------------------

# Turn on the _HPUX_SOURCE flag to get many of the HP add-ons
# regardless of compiler.  For the HP ANSI C compiler, you may also
# want to include +e to enable "long long" and "long double".
#
# HP compiler flags to include (if at all) *both* as part of ccflags
# and cc itself so Configure finds (and builds) everything
# consistently:
#	-Aa -D_HPUX_SOURCE +e
#
# Lastly, you may want to include the "-z" HP linker flag so that
# reading from a NULL pointer causes a SEGV.
ccflags="$ccflags -D_HPUX_SOURCE"

# Check if you're using the bundled C compiler.  This compiler doesn't support
# ANSI C (the -Aa flag) and so is not suitable for perl 5.5 and later.
case "$cc" in
'') if cc $ccflags -Aa 2>&1 | $contains 'option' >/dev/null
    then
	     cat <<'EOM' >&4

The bundled C compiler is not ANSI-compliant, and so cannot be used to
build perl.  Please see the file README.hpux for advice on alternative
compilers.
d35 5
a39 15
Cannot continue, aborting.
EOM
	exit 1
    else
	ccflags="$ccflags -Aa"	# The add-on compiler supports ANSI C
	# cppstdin and cpprun need the -Aa option if you use the unbundled 
	# ANSI C compiler (*not* the bundled K&R compiler or gcc)
	# [XXX this should be set automatically by Configure, but isn't yet.]
	# [XXX This is reported not to work.  You may have to edit config.sh.
	#  After running Configure, set cpprun and cppstdin in config.sh,
	#  run "Configure -S" and then "make".]
	cpprun="${cc:-cc} -E -Aa"
	cppstdin="$cpprun"
	cppminus='-'
	cpplast='-'
d41 17
a57 12
    case "$optimize" in
	# For HP's ANSI C compiler, up to "+O3" is safe for everything
	# except shared libraries (PIC code).  Max safe for PIC is "+O2".
	# Setting both causes innocuous warnings.
	'')	optimize='-O'
		#optimize='+O3'
		#cccdlflags='+z +O2'
		;;
    esac
    cc=cc
    ;;
esac
d60 2
d63 11
d75 92
a166 5
*gcc*) ccisgcc="$define" ;;
*) ccisgcc=''
   ccversion=`which cc | xargs what | awk '/Compiler/{print $2}'`
   ;;
esac
d168 8
a175 31
# Determine the architecture type of this system.
# Keep leading tab below -- Configure Black Magic -- RAM, 03/02/97
	xxOsRevMajor=`uname -r | sed -e 's/^[^0-9]*//' | cut -d. -f1`;
	#xxOsRevMinor=`uname -r | sed -e 's/^[^0-9]*//' | cut -d. -f2`;
if [ "$xxOsRevMajor" -ge 10 ]
then
	# This system is running >= 10.x

	# Tested on 10.01 PA1.x and 10.20 PA[12].x.  Idea: Scan
	# /usr/include/sys/unistd.h for matches with "#define CPU_* `getconf
	# CPU_VERSION`" to determine CPU type.  Note the part following
	# "CPU_" is used, *NOT* the comment.
	#
	# ASSUMPTIONS: Numbers will continue to be defined in hex -- and in
	# /usr/include/sys/unistd.h -- and the CPU_* #defines will be kept
	# up to date with new CPU/OS releases.
	xxcpu=`getconf CPU_VERSION`; # Get the number.
	xxcpu=`printf '0x%x' $xxcpu`; # convert to hex
	archname=`sed -n -e "s/^#[ \t]*define[ \t]*CPU_//p" /usr/include/sys/unistd.h |
	    sed -n -e "s/[ \t]*$xxcpu[ \t].*//p" |
	    sed -e s/_RISC/-RISC/ -e s/HP_// -e s/_/./`;
else
	# This system is running <= 9.x
	# Tested on 9.0[57] PA and [78].0 MC680[23]0.  Idea: After removing
	# MC6888[12] from context string, use first CPU identifier.
	#
	# ASSUMPTION: Only CPU identifiers contain no lowercase letters.
	archname=`getcontext | tr ' ' '\012' | grep -v '[a-z]' | grep -v MC688 |
	    sed -e 's/HP-//' -e 1q`;
	selecttype='int *'
fi
a176 1
# Do this right now instead of the delayed callback unit approach.
d178 26
a203 2
$define|true|[yY]*) use64bitint="$define" ;;
esac
d205 4
a208 3
$define|true|[yY]*)
    if [ "$xxOsRevMajor" -lt 11 ]; then
		cat <<EOM >&4
d210 3
a212 3
64-bit compilation is not supported on HP-UX $xxOsRevMajor.
You need at least HP-UX 11.0.
Cannot continue, aborting.
d214 2
a215 2
		exit 1
    fi
d217 11
a227 4
    # Without the 64-bit libc we cannot do much.
    libc='/lib/pa20_64/libc.sl'
    if [ ! -f "$libc" ]; then
		cat <<EOM >&4
d229 2
a230 2
*** You do not seem to have the 64-bit libraries in /lib/pa20_64.
*** Most importantly, I cannot find the $libc.
d233 2
a234 2
		exit 1
    fi
d236 27
a262 15
    ccflags="$ccflags +DD64"
    ldflags="$ldflags +DD64"
    test -d /lib/pa20_64 && loclibpth="$loclibpth /lib/pa20_64"
    libswanted="$libswanted pthread"
    libscheck='case "`/usr/bin/file $xxx`" in
*LP64*|*PA-RISC2.0*) ;;
*) xxx=/no/64-bit$xxx ;;
esac'
    if test -n "$ccisgcc" -o -n "$gccversion"; then
	ld="$cc"
    else	
	ld=/usr/bin/ld
    fi
    ar=/usr/bin/ar
    full_ar=$ar
d264 7
a270 8
    if test -z "$ccisgcc" -a -z "$gccversion"; then
       # The strict ANSI mode (-Aa) doesn't like the LL suffixes.
       ccflags=`echo " $ccflags "|sed 's@@ -Aa @@ @@g'`
       case "$ccflags" in
       *-Ae*) ;;
       *) ccflags="$ccflags -Ae" ;;
       esac
    fi
d272 1
a272 2
    set `echo " $libswanted " | sed -e 's@@ dl @@ @@'`
    libswanted="$*"
d274 1
a274 2
    ;;
esac
d276 9
a284 24
case "$ccisgcc" in
# Even if you use gcc, prefer the HP math library over the GNU one.
"$define") test -d /lib/pa1.1 && ccflags="$ccflags -L/lib/pa1.1" ;;
esac
    
case "$ccisgcc" in
"$define") ;;
*)  case "`getconf KERNEL_BITS 2>/dev/null`" in
    *64*) ldflags="$ldflags -Wl,+vnocompatwarnings" ;;
    esac
    ;;
esac

# Remove bad libraries that will cause problems
# (This doesn't remove libraries that don't actually exist)
# -lld is unneeded (and I can't figure out what it's used for anyway)
# -ldbm is obsolete and should not be used
# -lBSD contains BSD-style duplicates of SVR4 routines that cause confusion
# -lPW is obsolete and should not be used
# The libraries crypt, malloc, ndir, and net are empty.
# Although -lndbm should be included, it will make perl blow up if you should
# copy the binary to a system without libndbm.sl.  See ccdlflags below.
set `echo " $libswanted " | sed -e 's@@ ld @@ @@' -e 's@@ dbm @@ @@' -e 's@@ BSD @@ @@' -e 's@@ PW @@ @@'`
libswanted="$*"
d297 6
a302 1
ccdlflags="-Wl,-E -Wl,-B,deferred $ccdlflags"
d304 1
a304 7
case "$usemymalloc" in
'') usemymalloc='y' ;;
esac

alignbytes=8
# For native nm, you need "-p" to produce BSD format output.
nm_opt='-p'
d306 1
a306 2
# When HP-UX runs a script with "#!", it sets argv[0] to the script name.
toke_cflags='ccflags="$ccflags -DARG_ZERO_IS_SCRIPT"'
d308 28
a335 2
# If your compile complains about FLT_MIN, uncomment the next line
# POSIX_cflags='ccflags="$ccflags -DFLT_MIN=1.17549435E-38"'
d337 34
a370 5
# Comment this out if you don't want to follow the SVR4 filesystem layout
# that HP-UX 10.0 uses
case "$prefix" in
'') prefix='/opt/perl5' ;;
esac
d372 26
a397 10
# HP-UX can't do setuid emulation offered by Configure
case "$d_dosuid" in
'') d_dosuid="$undef" ;;
esac

# HP-UX 11 groks also LD_LIBRARY_PATH but SHLIB_PATH
# is recommended for compatibility.
case "$ldlibpthname" in
'') ldlibpthname=SHLIB_PATH ;;
esac
d399 1
a399 4
# HP-UX 10.20 and gcc 2.8.1 break UINT32_MAX.
case "$ccisgcc" in
"$define") ccflags="$ccflags -DUINT32_MAX_BROKEN" ;;
esac
d401 11
a411 17
cat > UU/cc.cbu <<'EOSH'
# XXX This script UU/cc.cbu will get 'called-back' by Configure after it
# XXX has prompted the user for the C compiler to use.
# Get gcc to share its secrets.
echo 'main() { return 0; }' > try.c
	# Indent to avoid propagation to config.sh
	verbose=`${cc:-cc} -v -o try try.c 2>&1`
if echo "$verbose" | grep '^Reading specs from' >/dev/null 2>&1; then
	# Using gcc.
	: nothing to see here, move on.
else
	# Using cc.
        ar=${ar:-ar}
	case "`$ar -V 2>&1`" in
	*GNU*)
	    if test -x /usr/bin/ar; then
	    	cat <<END >&2
d413 8
a420 2
*** You are using HP cc(1) but GNU ar(1).  This might lead into trouble
*** later on, I'm switching to HP ar to play safe.
d422 12
a433 2
END
		ar=/usr/bin/ar
d437 1
a437 3
fi

EOSH
d439 1
a439 7
# Date: Fri, 6 Sep 96 23:15:31 CDT
# From: "Daniel S. Lewart" <d-lewart@@uiuc.edu>
# I looked through the gcc.info and found this:
#   * GNU CC compiled code sometimes emits warnings from the HP-UX
#     assembler of the form:
#          (warning) Use of GR3 when frame >= 8192 may cause conflict.
#     These warnings are harmless and can be safely ignored.
a440 1
cat > UU/usethreads.cbu <<'EOCBU'
d443 1
d445 3
a447 3
$define|true|[yY]*)
        if [ "$xxOsRevMajor" -lt 10 ]; then
            cat <<EOM >&4
d453 6
a458 6
            exit 1
        fi
        case "$xxOsRevMajor" in
        10)
            # Under 10.X, a threaded perl can be built
            if [ -f /usr/include/pthread.h ]; then
d462 24
a485 3
		    # It needs # libcma and OLD_PTHREADS_API. Also <pthread.h>
		    # needs to be #included before any other includes
		    # (in perl.h)
d493 2
a494 1
		    # tell perl.h to include <pthread.h> before other include files
d496 15
d512 2
a513 2
		    # CMA redefines select to cma_select, and cma_select expects int *
		    # instead of fd_set * (just like 9.X)
d526 2
a527 2
            if [ $libswanted = "no_threads_available" ]; then
                cat <<EOM >&4
d537 1
a537 1
    PTH package from http://hpux.tn.tudelft.nl/hppd/hpux/alpha.html
d541 1
a541 1
     	        exit 1
d543 7
a550 9
            ;;
        11 | 12) # 12 may want upping the _POSIX_C_SOURCE datestamp...
            ccflags=" -D_POSIX_C_SOURCE=199506L $ccflags"
            set `echo X "$libswanted "| sed -e 's/ c / pthread c /'`
            shift
            libswanted="$*"
	    ;;
        esac
	usemymalloc='n'
d552 1
a552 1
esac
d555 20
a574 3
case "$uselargefiles-$ccisgcc" in
"$define-$define"|'-define') 
    cat <<EOM >&4
d576 4
a579 27
*** I'm ignoring large files for this build because
*** I don't know how to do use large files in HP-UX using gcc.

EOM
    uselargefiles="$undef"
    ;;
esac

cat > UU/uselargefiles.cbu <<'EOCBU'
# This script UU/uselargefiles.cbu will get 'called-back' by Configure 
# after it has prompted the user for whether to use large files.
case "$uselargefiles" in
''|$define|true|[yY]*)
	# there are largefile flags available via getconf(1)
	# but we cheat for now.  (Keep that in the left margin.)
ccflags_uselargefiles="-D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"

	ccflags="$ccflags $ccflags_uselargefiles"

        if test -z "$ccisgcc" -a -z "$gccversion"; then
           # The strict ANSI mode (-Aa) doesn't like large files.
           ccflags=`echo " $ccflags "|sed 's@@ -Aa @@ @@g'`
           case "$ccflags" in
           *-Ae*) ;;
           *) ccflags="$ccflags -Ae" ;;
           esac
	fi
d581 16
d598 1
a598 6
esac
EOCBU

# keep that leading tab.
	ccisgcc=''

@


1.4
log
@perl-5.6.0 + local changes
@
text
@d26 5
d113 2
d117 3
a119 1
*) ccisgcc='' ;;
a165 1

a177 1

d185 1
d332 1
d341 33
a373 4
            # Under 10.X, a threaded perl can be built, but it needs
            # libcma and OLD_PTHREADS_API.  Also <pthread.h> needs to
            # be #included before any other includes (in perl.h)
            if [ ! -f /usr/include/pthread.h -o ! -f /usr/lib/libcma.sl ]; then
d375 1
d377 9
a385 2
/usr/include/pthread.h and /usr/lib/libcma.sl.
Either you must install the CMA package or you must upgrade to HP-UX 11.
d389 1
a389 1
            fi
a390 14
            # HP-UX 10.X uses the old pthreads API
            case "$d_oldpthreads" in
            '') d_oldpthreads="$define" ;;
            esac

            # include libcma before all the others
            libswanted="cma $libswanted"

            # tell perl.h to include <pthread.h> before other include files
            ccflags="$ccflags -DPTHREAD_H_FIRST"

            # CMA redefines select to cma_select, and cma_select expects int *
            # instead of fd_set * (just like 9.X)
            selecttype='int *'
d422 4
a425 2
	# but we cheat for now.
	ccflags="$ccflags -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"
@


1.3
log
@perl5.005_03 (stock)
@
text
@d24 2
d27 1
a27 1
# This version: August 15, 1997
d69 1
a69 2
# ANSI C (the -Aa flag) nor can it produce shared libraries.  Thus we have
# to turn off dynamic loading.
a72 2
	case "$usedl" in
	 '') usedl="$undef"
d75 3
a77 2
The bundled C compiler can not produce shared libraries, so you will
not be able to use dynamic loading. 
d79 1
d81 1
a81 2
	     ;;
	esac
d95 10
a104 6
    # For HP's ANSI C compiler, up to "+O3" is safe for everything
    # except shared libraries (PIC code).  Max safe for PIC is "+O2".
    # Setting both causes innocuous warnings.
    #optimize='+O3'
    #cccdlflags='+z +O2'
    optimize='-O'
d108 3
a110 4
# Even if you use gcc, prefer the HP math library over the GNU one.

case "`$cc -v 2>&1`" in
"*gcc*" ) test -d /lib/pa1.1 && ccflags="$ccflags -L/lib/pa1.1" ;;
d145 5
a149 4
# This script UU/usethreads.cbu will get 'called-back' by Configure 
# after it has prompted the user for whether to use threads.
cat > UU/usethreads.cbu <<'EOCBU'
case "$usethreads" in
d151 5
a155 4
        if [ "$xxOsRevMajor" -lt 10 ]; then
            cat <<EOM >&4
HP-UX $xxOsRevMajor cannot support POSIX threads.
Consider upgrading to at least HP-UX 11.
d157 1
d159 12
a170 13
            exit 1
        fi
        case "$xxOsRevMajor" in
        10)
            # Under 10.X, a threaded perl can be built, but it needs
            # libcma and OLD_PTHREADS_API.  Also <pthread.h> needs to
            # be #included before any other includes (in perl.h)
            if [ ! -f /usr/include/pthread.h -o ! -f /usr/lib/libcma.sl ]; then
                cat <<EOM >&4
In HP-UX 10.X for POSIX threads you need both of the files
/usr/include/pthread.h and /usr/lib/libcma.sl.
Either you must install the CMA package or you must upgrade to HP-UX 11.
Cannot continue, aborting.
d172 17
a188 2
     	        exit 1
            fi
d190 8
a197 4
            # HP-UX 10.X uses the old pthreads API
            case "$d_oldpthreads" in
            '') d_oldpthreads="$define" ;;
            esac
d199 2
a200 2
            # include libcma before all the others
            libswanted="cma $libswanted"
d202 2
a203 2
            # tell perl.h to include <pthread.h> before other include files
            ccflags="$ccflags -DPTHREAD_H_FIRST"
d205 11
a215 13
            # CMA redefines select to cma_select, and cma_select expects int *
            # instead of fd_set * (just like 9.X)
            selecttype='int *'
            ;;
        11 | 12) # 12 may want upping the _POSIX_C_SOURCE datestamp...
            ccflags=" -D_POSIX_C_SOURCE=199506L $ccflags"
            set `echo X "$libswanted "| sed -e 's/ c / pthread c /'`
            shift
            libswanted="$*"
	    ;;
        esac
	usemymalloc='n'
	;;
a216 1
EOCBU
d243 4
a246 1
usemymalloc='y'
d268 41
d316 93
@


1.2
log
@perl 5.004_04
@
text
@d23 1
d47 4
a50 2
# If you get a message about "too much defining", you might have to
# add the following to your ccflags: '-Wp,-H256000'
a65 4
# If you plan to use gcc, then you should uncomment the following line
# so you get the HP math library and not the GCC math library.
# ccflags="$ccflags -L/lib/pa1.1"

d84 10
d104 6
d142 54
d237 5
@


1.1
log
@Initial revision
@
text
@d1 2
d4 6
a9 3
# Perl Configure hints file for Hewlett Packard HP/UX 9.x and 10.x
# This file is based on 
# hints/hpux_9.sh, Perl Configure hints file for Hewlett Packard HP/UX 9.x
d11 2
a12 2
# From: Jeff Okamoto <okamoto@@hpcc123.corp.hp.com>
# Date: Thu, 28 Sep 95 11:06:07 PDT
d14 1
a14 1
# hints/hpux_10.sh, Perl Configure hints file for Hewlett Packard HP/UX 10.x
d16 7
a22 1
# Date: Tue, 27 Jun 1995 08:17:45 +1000
d24 4
d30 19
a48 3

# Some users have reported problems with dynamic loading if the 
# environment variable LDOPTS='-a archive' .
d51 10
d62 4
a65 1
ldflags="$ldflags"
d75 1
a75 1
	     cat <<'EOM'
d86 5
d96 4
a99 2
xxuname=`uname -r`
if echo $xxuname | $contains '10'
d101 15
a115 16
	# This system is running 10.0
	xxcontext=`grep $(printf %#x $(getconf CPU_VERSION)) /usr/include/sys/unistd.h`
	if echo "$xxcontext" | $contains 'PA-RISC1.1'
	then
		archname='PA-RISC1.1'
	elif echo "$xxcontext" | $contains 'PA-RISC1.0'
	then
		archname='PA-RISC1.0'
	elif echo "$xxcontext" | $contains 'PA-RISC2'
	then
		archname='PA-RISC2'
	else
		echo "This 10.0 system is of a PA-RISC type I don't recognize."
		echo "Debugging output: $xxcontext"
		archname=''
	fi
d117 8
a124 16
	# This system is not running 10.0
	xxcontext=`/bin/getcontext`
	if echo "$xxcontext" | $contains 'PA-RISC1.1'
	then
		archname='PA-RISC1.1'
	elif echo "$xxcontext" | $contains 'PA-RISC1.0'
	then
		archname='PA-RISC1.0'
	elif echo "$xxcontext" | $contains 'HP-MC'
	then
		archname='HP-MC68K'
	else
		echo "I cannot recognize what chip set this system is using."
		echo "Debugging output: $xxcontext"
		archname=''
	fi
d127 1
d137 1
a137 1
set `echo " $libswanted " | sed  -e 's@@ ld @@ @@' -e 's@@ dbm @@ @@' -e 's@@ BSD @@ @@' -e 's@@ PW @@ @@'`
d140 11
a150 7
# By setting the deferred flag below, this means that if you run perl on a
# system that does not have the required shared library that you linked it
# with, it will die when you try to access a symbol in the (missing) shared
# library.  If you would rather know at perl startup time that you are
# missing an important shared library, switch the comments so that immediate,
# rather than deferred loading is performed.
# ccdlflags="-Wl,-E $ccdlflags"
d155 2
a156 1
selecttype='int *' 
d158 2
a159 5
# There are some lingering issues about whether g/setpgrp should be a part
# of the perl core.  This setting should cause perl to conform to the Principle
# of Least Astonishment.  The best thing is to use the g/setpgrp in the POSIX
# module.
d_bsdpgrp='define'
d169 8
@


1.1.1.1
log
@Import of Perl 5.003 into the tree.  Makefile.bsd-wrapper and
config.sh.OpenBSD are the only local changes.
@
text
@@


1.1.1.2
log
@perl5.005_03
@
text
@a0 2
#! /bin/sh

d2 3
a4 6
# Perl Configure hints file for Hewlett-Packard's HP-UX 9.x and 10.x
# (Hopefully, 7.x through 11.x.)
#
# This file is based on hints/hpux_9.sh, Perl Configure hints file for
# Hewlett Packard HP-UX 9.x
#
d6 2
a7 2
#
# From: Jeff Okamoto <okamoto@@corp.hp.com>
d9 1
a9 1
# hints/hpux_10.sh, Perl Configure hints file for Hewlett Packard HP-UX 10.x
d11 1
a11 8
# and
# Use #define CPU_* instead of comments for >= 10.x.
# Support PA1.2 under 10.x.
# Distinguish between PA2.0, PA2.1, etc.
# Distinguish between MC68020, MC68030, MC68040
# Don't assume every OS != 10 is < 10, (e.g., 11).
# From: Chuck Phillips <cdp@@fc.hp.com>
# HP-UX 10 pthreads hints: Matthew T Harden <mthard@@mthard1.monsanto.com>
a12 4
# This version: August 15, 1997
# Current maintainer: Jeff Okamoto <okamoto@@corp.hp.com>

#--------------------------------------------------------------------
d15 3
a17 21
#
# You may have dynamic loading problems if the environment variable
# LDOPTS='-a archive'.  Under >= 10.x, you can instead LDOPTS='-a
# archive_shared' to prefer archive libraries without requiring them.
# Regardless of HPUX release, in the "libs" variable or the ext.libs
# file, you can always give explicit path names to archive libraries
# that may not exist on the target machine.  E.g., /usr/lib/libndbm.a
# instead of -lndbm.  See also note below on ndbm.
#
# ALSO, bear in mind that gdbm and Berkely DB contain incompatible
# replacements for ndbm (and dbm) routines.  If you want concurrent
# access to ndbm files, you need to make sure libndbm is linked in
# *before* gdbm and Berkely DB.  Lastly, remember to check the
# "ext.libs" file which is *probably* messing up the order.  Often,
# you can replace ext.libs with an empty file to fix the problem.
#
# If you get a message about "too much defining", as may happen
# in HPUX < 10, you might have to append a single entry to your
# ccflags: '-Wp,-H256000'
# NOTE: This is a single entry (-W takes the argument 'p,-H256000').
#--------------------------------------------------------------------
a19 10
# regardless of compiler.  For the HP ANSI C compiler, you may also
# want to include +e to enable "long long" and "long double".
#
# HP compiler flags to include (if at all) *both* as part of ccflags
# and cc itself so Configure finds (and builds) everything
# consistently:
#	-Aa -D_HPUX_SOURCE +e
#
# Lastly, you may want to include the "-z" HP linker flag so that
# reading from a NULL pointer causes a SEGV.
d21 1
d31 1
a31 1
	     cat <<'EOM' >&4
a40 10
	# cppstdin and cpprun need the -Aa option if you use the unbundled 
	# ANSI C compiler (*not* the bundled K&R compiler or gcc)
	# [XXX this should be set automatically by Configure, but isn't yet.]
	# [XXX This is reported not to work.  You may have to edit config.sh.
	#  After running Configure, set cpprun and cppstdin in config.sh,
	#  run "Configure -S" and then "make".]
	cpprun="${cc:-cc} -E -Aa"
	cppstdin="$cpprun"
	cppminus='-'
	cpplast='-'
a41 5
    # For HP's ANSI C compiler, up to "+O3" is safe for everything
    # except shared libraries (PIC code).  Max safe for PIC is "+O2".
    # Setting both causes innocuous warnings.
    #optimize='+O3'
    #cccdlflags='+z +O2'
a45 6
# Even if you use gcc, prefer the HP math library over the GNU one.

case "`$cc -v 2>&1`" in
"*gcc*" ) test -d /lib/pa1.1 && ccflags="$ccflags -L/lib/pa1.1" ;;
esac

d47 2
a48 4
# Keep leading tab below -- Configure Black Magic -- RAM, 03/02/97
	xxOsRevMajor=`uname -r | sed -e 's/^[^0-9]*//' | cut -d. -f1`;
	#xxOsRevMinor=`uname -r | sed -e 's/^[^0-9]*//' | cut -d. -f2`;
if [ "$xxOsRevMajor" -ge 10 ]
d50 16
a65 15
	# This system is running >= 10.x

	# Tested on 10.01 PA1.x and 10.20 PA[12].x.  Idea: Scan
	# /usr/include/sys/unistd.h for matches with "#define CPU_* `getconf
	# CPU_VERSION`" to determine CPU type.  Note the part following
	# "CPU_" is used, *NOT* the comment.
	#
	# ASSUMPTIONS: Numbers will continue to be defined in hex -- and in
	# /usr/include/sys/unistd.h -- and the CPU_* #defines will be kept
	# up to date with new CPU/OS releases.
	xxcpu=`getconf CPU_VERSION`; # Get the number.
	xxcpu=`printf '0x%x' $xxcpu`; # convert to hex
	archname=`sed -n -e "s/^#[ \t]*define[ \t]*CPU_//p" /usr/include/sys/unistd.h |
	    sed -n -e "s/[ \t]*$xxcpu[ \t].*//p" |
	    sed -e s/_RISC/-RISC/ -e s/HP_// -e s/_/./`;
d67 16
a82 8
	# This system is running <= 9.x
	# Tested on 9.0[57] PA and [78].0 MC680[23]0.  Idea: After removing
	# MC6888[12] from context string, use first CPU identifier.
	#
	# ASSUMPTION: Only CPU identifiers contain no lowercase letters.
	archname=`getcontext | tr ' ' '\012' | grep -v '[a-z]' | grep -v MC688 |
	    sed -e 's/HP-//' -e 1q`;
	selecttype='int *'
a84 55
# This script UU/usethreads.cbu will get 'called-back' by Configure 
# after it has prompted the user for whether to use threads.
cat > UU/usethreads.cbu <<'EOCBU'
case "$usethreads" in
$define|true|[yY]*)
        if [ "$xxOsRevMajor" -lt 10 ]; then
            cat <<EOM >&4
HP-UX $xxOsRevMajor cannot support POSIX threads.
Consider upgrading to at least HP-UX 11.
Cannot continue, aborting.
EOM
            exit 1
        fi
        case "$xxOsRevMajor" in
        10)
            # Under 10.X, a threaded perl can be built, but it needs
            # libcma and OLD_PTHREADS_API.  Also <pthread.h> needs to
            # be #included before any other includes (in perl.h)
            if [ ! -f /usr/include/pthread.h -o ! -f /usr/lib/libcma.sl ]; then
                cat <<EOM >&4
In HP-UX 10.X for POSIX threads you need both of the files
/usr/include/pthread.h and /usr/lib/libcma.sl.
Either you must install the CMA package or you must upgrade to HP-UX 11.
Cannot continue, aborting.
EOM
     	        exit 1
            fi

            # HP-UX 10.X uses the old pthreads API
            case "$d_oldpthreads" in
            '') d_oldpthreads="$define" ;;
            esac

            # include libcma before all the others
            libswanted="cma $libswanted"

            # tell perl.h to include <pthread.h> before other include files
            ccflags="$ccflags -DPTHREAD_H_FIRST"

            # CMA redefines select to cma_select, and cma_select expects int *
            # instead of fd_set * (just like 9.X)
            selecttype='int *'
            ;;
        11 | 12) # 12 may want upping the _POSIX_C_SOURCE datestamp...
            ccflags=" -D_POSIX_C_SOURCE=199506L $ccflags"
            set `echo X "$libswanted "| sed -e 's/ c / pthread c /'`
            shift
            libswanted="$*"
	    ;;
        esac
	usemymalloc='n'
	;;
esac
EOCBU

d94 1
a94 1
set `echo " $libswanted " | sed -e 's@@ ld @@ @@' -e 's@@ dbm @@ @@' -e 's@@ BSD @@ @@' -e 's@@ PW @@ @@'`
d97 7
a103 11
# By setting the deferred flag below, this means that if you run perl
# on a system that does not have the required shared library that you
# linked it with, it will die when you try to access a symbol in the
# (missing) shared library.  If you would rather know at perl startup
# time that you are missing an important shared library, switch the
# comments so that immediate, rather than deferred loading is
# performed.  Even with immediate loading, you can postpone errors for
# undefined (or multiply defined) routines until actual access by
# adding the "nonfatal" option.
# ccdlflags="-Wl,-E -Wl,-B,immediate $ccdlflags"
# ccdlflags="-Wl,-E -Wl,-B,immediate,-B,nonfatal $ccdlflags"
d108 1
a108 2
# For native nm, you need "-p" to produce BSD format output.
nm_opt='-p'
d110 5
a114 2
# When HP-UX runs a script with "#!", it sets argv[0] to the script name.
toke_cflags='ccflags="$ccflags -DARG_ZERO_IS_SCRIPT"'
a123 13

# HP-UX can't do setuid emulation offered by Configure
case "$d_dosuid" in
'') d_dosuid="$undef" ;;
esac

# Date: Fri, 6 Sep 96 23:15:31 CDT
# From: "Daniel S. Lewart" <d-lewart@@uiuc.edu>
# I looked through the gcc.info and found this:
#   * GNU CC compiled code sometimes emits warnings from the HP-UX
#     assembler of the form:
#          (warning) Use of GR3 when frame >= 8192 may cause conflict.
#     These warnings are harmless and can be safely ignored.
@


1.1.1.3
log
@virgin perl 5.6.0
@
text
@a23 2
# From: Dominic Dunlop <domo@@computer.org>
# Abort and offer advice if bundled (non-ANSI) C compiler selected
d25 1
a25 1
# This version: March 8, 2000
d67 2
a68 1
# ANSI C (the -Aa flag) and so is not suitable for perl 5.5 and later.
d72 2
d76 2
a77 3
The bundled C compiler is not ANSI-compliant, and so cannot be used to
build perl.  Please see the file README.hpux for advice on alternative
compilers.
a78 1
Cannot continue, aborting.
d80 2
a81 1
	exit 1
d95 6
a100 10
    case "$optimize" in
	# For HP's ANSI C compiler, up to "+O3" is safe for everything
	# except shared libraries (PIC code).  Max safe for PIC is "+O2".
	# Setting both causes innocuous warnings.
	'')	optimize='-O'
		#optimize='+O3'
		#cccdlflags='+z +O2'
		;;
    esac
    cc=cc
d104 4
a107 3
case `$cc -v 2>&1`"" in
*gcc*) ccisgcc="$define" ;;
*) ccisgcc='' ;;
d142 4
a145 5
# Do this right now instead of the delayed callback unit approach.
case "$use64bitall" in
$define|true|[yY]*) use64bitint="$define" ;;
esac
case "$use64bitint" in
d147 4
a150 5
    if [ "$xxOsRevMajor" -lt 11 ]; then
		cat <<EOM >&4

64-bit compilation is not supported on HP-UX $xxOsRevMajor.
You need at least HP-UX 11.0.
a151 1

d153 13
a165 12
		exit 1
    fi

    # Without the 64-bit libc we cannot do much.
    libc='/lib/pa20_64/libc.sl'
    if [ ! -f "$libc" ]; then
		cat <<EOM >&4

*** You do not seem to have the 64-bit libraries in /lib/pa20_64.
*** Most importantly, I cannot find the $libc.
*** Cannot continue, aborting.

d167 2
a168 2
		exit 1
    fi
d170 4
a173 14
    ccflags="$ccflags +DD64"
    ldflags="$ldflags +DD64"
    test -d /lib/pa20_64 && loclibpth="$loclibpth /lib/pa20_64"
    libscheck='case "`/usr/bin/file $xxx`" in
*LP64*|*PA-RISC2.0*) ;;
*) xxx=/no/64-bit$xxx ;;
esac'
    if test -n "$ccisgcc" -o -n "$gccversion"; then
	ld="$cc"
    else	
	ld=/usr/bin/ld
    fi
    ar=/usr/bin/ar
    full_ar=$ar
d175 2
a176 8
    if test -z "$ccisgcc" -a -z "$gccversion"; then
       # The strict ANSI mode (-Aa) doesn't like the LL suffixes.
       ccflags=`echo " $ccflags "|sed 's@@ -Aa @@ @@g'`
       case "$ccflags" in
       *-Ae*) ;;
       *) ccflags="$ccflags -Ae" ;;
       esac
    fi
d178 2
a179 2
    set `echo " $libswanted " | sed -e 's@@ dl @@ @@'`
    libswanted="$*"
d181 13
a193 14
    ;;
esac

case "$ccisgcc" in
# Even if you use gcc, prefer the HP math library over the GNU one.
"$define") test -d /lib/pa1.1 && ccflags="$ccflags -L/lib/pa1.1" ;;
esac
    
case "$ccisgcc" in
"$define") ;;
*)  case "`getconf KERNEL_BITS 2>/dev/null`" in
    *64*) ldflags="$ldflags -Wl,+vnocompatwarnings" ;;
    esac
    ;;
d195 1
d222 1
a222 4
case "$usemymalloc" in
'') usemymalloc='y' ;;
esac

a243 41
# HP-UX 11 groks also LD_LIBRARY_PATH but SHLIB_PATH
# is recommended for compatibility.
case "$ldlibpthname" in
'') ldlibpthname=SHLIB_PATH ;;
esac

# HP-UX 10.20 and gcc 2.8.1 break UINT32_MAX.
case "$ccisgcc" in
"$define") ccflags="$ccflags -DUINT32_MAX_BROKEN" ;;
esac

cat > UU/cc.cbu <<'EOSH'
# XXX This script UU/cc.cbu will get 'called-back' by Configure after it
# XXX has prompted the user for the C compiler to use.
# Get gcc to share its secrets.
echo 'main() { return 0; }' > try.c
	# Indent to avoid propagation to config.sh
	verbose=`${cc:-cc} -v -o try try.c 2>&1`
if echo "$verbose" | grep '^Reading specs from' >/dev/null 2>&1; then
	# Using gcc.
	: nothing to see here, move on.
else
	# Using cc.
        ar=${ar:-ar}
	case "`$ar -V 2>&1`" in
	*GNU*)
	    if test -x /usr/bin/ar; then
	    	cat <<END >&2

*** You are using HP cc(1) but GNU ar(1).  This might lead into trouble
*** later on, I'm switching to HP ar to play safe.

END
		ar=/usr/bin/ar
	    fi
	;;
    esac
fi

EOSH

a250 93

cat > UU/usethreads.cbu <<'EOCBU'
# This script UU/usethreads.cbu will get 'called-back' by Configure 
# after it has prompted the user for whether to use threads.
case "$usethreads" in
$define|true|[yY]*)
        if [ "$xxOsRevMajor" -lt 10 ]; then
            cat <<EOM >&4
HP-UX $xxOsRevMajor cannot support POSIX threads.
Consider upgrading to at least HP-UX 11.
Cannot continue, aborting.
EOM
            exit 1
        fi
        case "$xxOsRevMajor" in
        10)
            # Under 10.X, a threaded perl can be built, but it needs
            # libcma and OLD_PTHREADS_API.  Also <pthread.h> needs to
            # be #included before any other includes (in perl.h)
            if [ ! -f /usr/include/pthread.h -o ! -f /usr/lib/libcma.sl ]; then
                cat <<EOM >&4
In HP-UX 10.X for POSIX threads you need both of the files
/usr/include/pthread.h and /usr/lib/libcma.sl.
Either you must install the CMA package or you must upgrade to HP-UX 11.
Cannot continue, aborting.
EOM
     	        exit 1
            fi

            # HP-UX 10.X uses the old pthreads API
            case "$d_oldpthreads" in
            '') d_oldpthreads="$define" ;;
            esac

            # include libcma before all the others
            libswanted="cma $libswanted"

            # tell perl.h to include <pthread.h> before other include files
            ccflags="$ccflags -DPTHREAD_H_FIRST"

            # CMA redefines select to cma_select, and cma_select expects int *
            # instead of fd_set * (just like 9.X)
            selecttype='int *'
            ;;
        11 | 12) # 12 may want upping the _POSIX_C_SOURCE datestamp...
            ccflags=" -D_POSIX_C_SOURCE=199506L $ccflags"
            set `echo X "$libswanted "| sed -e 's/ c / pthread c /'`
            shift
            libswanted="$*"
	    ;;
        esac
	usemymalloc='n'
	;;
esac
EOCBU

case "$uselargefiles-$ccisgcc" in
"$define-$define"|'-define') 
    cat <<EOM >&4

*** I'm ignoring large files for this build because
*** I don't know how to do use large files in HP-UX using gcc.

EOM
    uselargefiles="$undef"
    ;;
esac

cat > UU/uselargefiles.cbu <<'EOCBU'
# This script UU/uselargefiles.cbu will get 'called-back' by Configure 
# after it has prompted the user for whether to use large files.
case "$uselargefiles" in
''|$define|true|[yY]*)
	# there are largefile flags available via getconf(1)
	# but we cheat for now.
	ccflags="$ccflags -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"

        if test -z "$ccisgcc" -a -z "$gccversion"; then
           # The strict ANSI mode (-Aa) doesn't like large files.
           ccflags=`echo " $ccflags "|sed 's@@ -Aa @@ @@g'`
           case "$ccflags" in
           *-Ae*) ;;
           *) ccflags="$ccflags -Ae" ;;
           esac
	fi

	;;
esac
EOCBU

# keep that leading tab.
	ccisgcc=''

@


1.1.1.4
log
@stock perl 5.6.1
@
text
@a25 5
# From: H.Merijn Brand <h.m.brand@@hccnet.nl>
# ccversion detection
# perl/64/HP-UX wants libdb-3.0 to be shared ELF 64
# generic pthread support detection for PTH package

a107 2
cc=${cc:-cc}

d110 1
a110 3
*) ccisgcc=''
   ccversion=`which cc | xargs what | awk '/Compiler/{print $2}'`
   ;;
d157 1
d170 1
a177 1
    libswanted="$libswanted pthread"
a323 1

d332 4
a335 33
            # Under 10.X, a threaded perl can be built
            if [ -f /usr/include/pthread.h ]; then
		if [ -f /usr/lib/libcma.sl ]; then
		    # DCE (from Core OS CD) is installed

		    # It needs # libcma and OLD_PTHREADS_API. Also <pthread.h>
		    # needs to be #included before any other includes
		    # (in perl.h)

		    # HP-UX 10.X uses the old pthreads API
		    d_oldpthreads="$define"

		    # include libcma before all the others
		    libswanted="cma $libswanted"

		    # tell perl.h to include <pthread.h> before other include files
		    ccflags="$ccflags -DPTHREAD_H_FIRST"

		    # CMA redefines select to cma_select, and cma_select expects int *
		    # instead of fd_set * (just like 9.X)
		    selecttype='int *'

		elif [ -f /usr/lib/libpthread.sl ]; then
		    # PTH package is installed
		    libswanted="pthread $libswanted"
		else
		    libswanted="no_threads_available"
		    fi
	    else
		libswanted="no_threads_available"
		fi

            if [ $libswanted = "no_threads_available" ]; then
a336 1

d338 2
a339 9
/usr/include/pthread.h and either /usr/lib/libcma.sl or /usr/lib/libpthread.sl.
Either you must upgrade to HP-UX 11 or install a posix thread library:

    DCE-CoreTools from HP-UX 10.20 Hardware Extensions 3.0 CD (B3920-13941)

or

    PTH package from http://hpux.tn.tudelft.nl/hppd/hpux/alpha.html

d343 1
a343 1
		fi
d345 14
d390 2
a391 4
	# but we cheat for now.  (Keep that in the left margin.)
ccflags_uselargefiles="-D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"

	ccflags="$ccflags $ccflags_uselargefiles"
@


1.1.1.5
log
@stock perl 5.8.0 from CPAN
@
text
@d1 1
a1 1
#!/usr/bin/sh
d3 80
a82 1
### SYSTEM ARCHITECTURE
d84 15
a98 35
# Determine the architecture type of this system.
# Keep leading tab below -- Configure Black Magic -- RAM, 03/02/97
	xxOsRevMajor=`uname -r | sed -e 's/^[^0-9]*//' | cut -d. -f1`;
if [ "$xxOsRevMajor" -ge 10 ]; then
    # This system is running >= 10.x

    # Tested on 10.01 PA1.x and 10.20 PA[12].x.
    # Idea: Scan /usr/include/sys/unistd.h for matches with
    # "#define CPU_* `getconf # CPU_VERSION`" to determine CPU type.
    # Note the text following "CPU_" is used, *NOT* the comment.
    #
    # ASSUMPTIONS: Numbers will continue to be defined in hex -- and in
    # /usr/include/sys/unistd.h -- and the CPU_* #defines will be kept
    # up to date with new CPU/OS releases.
    xxcpu=`getconf CPU_VERSION`; # Get the number.
    xxcpu=`printf '0x%x' $xxcpu`; # convert to hex
    archname=`sed -n -e "s/^#[[:space:]]*define[[:space:]]*CPU_//p" /usr/include/sys/unistd.h |
	sed -n -e "s/[[:space:]]*$xxcpu[[:space:]].*//p" |
	sed -e s/_RISC/-RISC/ -e s/HP_// -e s/_/./ -e "s/[[:space:]]*//g"`;
else
    # This system is running <= 9.x
    # Tested on 9.0[57] PA and [78].0 MC680[23]0.  Idea: After removing
    # MC6888[12] from context string, use first CPU identifier.
    #
    # ASSUMPTION: Only CPU identifiers contain no lowercase letters.
    archname=`getcontext | tr ' ' '\012' | grep -v '[a-z]' | grep -v MC688 |
	sed -e 's/HP-//' -e 1q`;
    selecttype='int *'
    fi

# For some strange reason, the u32align test from Configure hangs in
# HP-UX 10.20 since the December 2001 patches.  So hint it to avoid
# the test.
if [ "$xxOsRevMajor" -le 10 ]; then
    d_u32align=$define
d100 12
a111 17

echo "Archname is $archname"

# Fix XSlib (CPAN) confusion when re-using a prefix but changing from ILP32
# to LP64 builds.  They're NOT binary compatible, so quit claiming they are.
archname64=LP64


### HP-UX OS specific behaviour

# -ldbm is obsolete and should not be used
# -lBSD contains BSD-style duplicates of SVR4 routines that cause confusion
# -lPW is obsolete and should not be used
# The libraries crypt, malloc, ndir, and net are empty.
set `echo "X $libswanted " | sed -e 's/ ld / /' -e 's/ dbm / /' -e 's/ BSD / /' -e 's/ PW / /'`
shift
libswanted="$*"
a113 2
ar=/usr/bin/ar	# Yes, truly override.  We do not want the GNU ar.
full_ar=$ar	# I repeat, no GNU ar.  arrr.
a114 11
set `echo "X $ccflags " | sed -e 's/ -A[ea] / /' -e 's/ -D_HPUX_SOURCE / /'`
shift
	cc_cppflags="$* -D_HPUX_SOURCE"
cppflags="-Aa -D__STDC_EXT__ $cc_cppflags"

case "$prefix" in
    "") prefix='/opt/perl5' ;;
    esac

    gnu_as=no
    gnu_ld=no
d116 5
a120 77
    *gcc*)  ccisgcc="$define"
	    ccflags="$cc_cppflags"
	    if [ "X$gccversion" = "X" ]; then
		# Done too late in Configure if hinted
		gccversion=`$cc --version | sed 's/.*(GCC) *//'`
		fi
	    case "$gccversion" in
		[012]*) # HP-UX and gcc-2.* break UINT32_MAX :-(
			ccflags="$ccflags -DUINT32_MAX_BROKEN"
			;;
               3*)     # GCC (both 32bit and 64bit) will define __STDC_EXT__
                       # by default when using GCC 3.0 and newer versions of
                       # the compiler.
                       cppflags="$cc_cppflags"
                       ;;
		esac
	    case "`getconf KERNEL_BITS 2>/dev/null`" in
		*64*)
		    echo "main(){}">try.c
		    case "$gccversion" in
			3*)
			    case "$archname" in
                               PA-RISC*)
                                   case "$ccflags" in
                                       *-mpa-risc*) ;;
                                       *) ccflags="$ccflags -mpa-risc-2-0" ;;
                                       esac
                                   ;;
				esac
			    ;;
			*)  # gcc with gas will not accept +DA2.0
			    case "`$cc -c -Wa,+DA2.0 try.c 2>&1`" in
				*"+DA2.0"*)		# gas
				    gnu_as=yes
				    ;;
				*)			# HPas
				    ccflags="$ccflags -Wa,+DA2.0"
				    ;;
				esac
			    ;;
			esac
		    # gcc with gld will not accept +vnocompatwarnings
		    case "`$cc -o try -Wl,+vnocompatwarnings try.c 2>&1`" in
			*"+vnocompat"*)		# gld
			    gnu_ld=yes
			    ;;
			*)			# HPld
			   case "$gccversion" in
			       [12]*)
				   # Why not 3 as well here?
				   # Since not relevant to IA64, not changed.
				   ldflags="$ldflags -Wl,+vnocompatwarnings"
				   ccflags="$ccflags -Wl,+vnocompatwarnings"
				   ;;
			       esac
			    ;;
			esac
		    rm -f try.c
		    ;;
		esac
	    ;;
    *)      ccisgcc=''
	    ccversion=`which cc | xargs what | awk '/Compiler/{print $2}'`
	    case "$ccflags" in
               "-Ae "*) ;;
               *) ccflags="-Ae $cc_cppflags -Wl,+vnocompatwarnings" ;;
               esac
	    # Needed because cpp does only support -Aa (not -Ae)
	    cpplast='-'
	    cppminus='-'
	    cppstdin='cc -E -Aa -D__STDC_EXT__'
	    cpprun=$cppstdin
#	    case "$d_casti32" in
#		"") d_casti32='undef' ;;
#		esac
	    ;;
    esac
d122 31
a152 23
# When HP-UX runs a script with "#!", it sets argv[0] to the script name.
toke_cflags='ccflags="$ccflags -DARG_ZERO_IS_SCRIPT"'

### 64 BITNESS

# Some gcc versions do native 64 bit long (e.g. 2.9-hppa-000310 and gcc-3.0)
# We have to force 64bitness to go search the right libraries
    gcc_64native=no
case "$ccisgcc" in
    $define|true|[Yy])
	echo 'int main(){long l;printf("%d\\n",sizeof(l));}'>try.c
	$cc -o try $ccflags $ldflags try.c
	if [ "`try`" = "8" ]; then
	    cat <<EOM >&4

*** This version of gcc uses 64 bit longs. -Duse64bitall is
*** implicitly set to enable continuation
EOM
	    use64bitall=$define
	    gcc_64native=yes
	    fi
	;;
    esac
d154 1
d156 5
a160 16
    $define|true|[yY]*) use64bitint="$define" ;;
    esac

case "$usemorebits" in
    $define|true|[yY]*) use64bitint="$define"; uselongdouble="$define" ;;
    esac

case "$archname" in
    IA64*)
	# While here, override so=sl auto-detection
	so='so'
	;;
    *)
	case "$uselongdouble" in
	    *) ;;
	    $define|true|[yY]*)
d163 3
a165 2
*** long doubles are not (yet) supported on HP-UX (any version)
*** Until it does, we cannot continue, aborting.
d167 2
a168 4
		exit 1 ;;
	    esac
	;;
    esac
d170 4
a173 5
case "$use64bitint" in
    $define|true|[Yy])

	if [ "$xxOsRevMajor" -lt 11 ]; then
	    cat <<EOM >&4
d175 2
a176 2
*** 64-bit compilation is not supported on HP-UX $xxOsRevMajor.
*** You need at least HP-UX 11.0.
d179 2
a180 2
	    exit 1
	    fi
d182 15
a196 11
	# Set libc and the library paths
	case "$archname" in
	    PA-RISC*)
		loclibpth="$loclibpth /lib/pa20_64"
		libc='/lib/pa20_64/libc.sl' ;;
	    IA64*) 
		loclibpth="$loclibpth /usr/lib/hpux64"
		libc='/usr/lib/hpux64/libc.so' ;;
	    esac
	if [ ! -f "$libc" ]; then
	    cat <<EOM >&4
d198 8
a205 34
*** You do not seem to have the 64-bit libc.
*** I cannot find the file $libc.
*** Cannot continue, aborting.
EOM
	    exit 1
	    fi

	case "$ccisgcc" in
	    $define|true|[Yy])
		# For the moment, don't care that it ain't supported (yet)
		# by gcc (up to and including 2.95.3), cause it'll crash
		# anyway. Expect auto-detection of 64-bit enabled gcc on
		# HP-UX soon, including a user-friendly exit
		case $gcc_64native in
		    no) case "$gccversion" in
			    [123]*) ccflags="$ccflags -mlp64"
				    case "$archname" in
					PA-RISC*)
					    ldflags="$ldflags -Wl,+DD64"
					    ;;
					IA64*)
					    ldflags="$ldflags -mlp64"
					    ;;
					esac
				    ;;
			    esac
			;;
		    esac
		;;
	    *)
		ccflags="$ccflags +DD64"
		ldflags="$ldflags +DD64"
		;;
	    esac
d207 2
a208 7
	# Reset the library checker to make sure libraries
	# are the right type
	# (NOTE: on IA64, this doesn't work with .a files.)
	libscheck='case "`/usr/bin/file $xxx`" in
		       *ELF-64*|*LP64*|*PA-RISC2.0*) ;;
		       *) xxx=/no/64-bit$xxx ;;
		       esac'
d210 2
a211 1
	;;
d213 24
a236 11
    *)	# Not in 64-bit mode

	case "$archname" in
	    PA-RISC*)
		libc='/lib/libc.sl' ;;
	    IA64*) 
		loclibpth="$loclibpth /usr/lib/hpux32"
		libc='/usr/lib/hpux32/libc.so' ;;
	    esac
	;;
    esac
d249 1
a249 5
if [ "$gnu_ld" = "yes" ]; then
    ccdlflags="-Wl,-E $ccdlflags"
else
    ccdlflags="-Wl,-E -Wl,-B,deferred $ccdlflags"
    fi
d251 7
d259 5
a263 1
### COMPILER SPECIFICS
d265 5
a269 1
## Local restrictions (point to README.hpux to lift these)
d271 10
a280 28
## Optimization limits
cat >try.c <<EOF
#include <sys/resource.h>

int main ()
{
    struct rlimit rl;
    int i = getrlimit (RLIMIT_DATA, &rl);
    printf ("%d\n", rl.rlim_cur / (1024 * 1024));
    } /* main */
EOF
$cc -o try $ccflags $ldflags try.c
	maxdsiz=`try`
rm -f try try.c core
if [ $maxdsiz -le 64 ]; then
    # 64 Mb is probably not enough to optimize toke.c
    # and regexp.c with -O2
    cat <<EOM >&4
Your kernel limits the data section of your programs to $maxdsiz Mb,
which is (sadly) not enough to fully optimize some parts of the
perl binary. I'll try to use a lower optimization level for
those parts. If you are a sysadmin, and you *do* want full
optimization, raise the 'maxdsiz' kernel configuration parameter
to at least 0x08000000 (128 Mb) and rebuild your kernel.
EOM
regexec_cflags=''
doop_cflags=''
    fi
d282 1
d284 2
a285 33
    $define|true|[Yy])
	
	case "$optimize" in
	    "")           optimize="-g -O" ;;
	    *O[3456789]*) optimize=`echo "$optimize" | sed -e 's/O[3-9]/O2/'` ;;
	    esac
	#ld="$cc"
	ld=/usr/bin/ld
	cccdlflags='-fPIC'
	#lddlflags='-shared'
	lddlflags='-b'
	case "$optimize" in
	    *-g*-O*|*-O*-g*)
		# gcc without gas will not accept -g
		echo "main(){}">try.c
		case "`$cc $optimize -c try.c 2>&1`" in
		    *"-g option disabled"*)
			set `echo "X $optimize " | sed -e 's/ -g / /'`
			shift
			optimize="$*"
			;;
		    esac
		;;
	    esac
	if [ $maxdsiz -le 64 ]; then
	    case "$optimize" in
		*O2*)	opt=`echo "$optimize" | sed -e 's/O2/O1/'`
			toke_cflags="$toke_cflags;optimize=\"$opt\""
			regexec_cflags="optimize=\"$opt\""
			;;
		esac
	    fi
	;;
d287 17
a303 28
    *)	# HP's compiler cannot combine -g and -O
	case "$optimize" in
	    "")           optimize="+O2 +Onolimit" ;;
	    *O[3456789]*) optimize=`echo "$optimize" | sed -e 's/O[3-9]/O2/'` ;;
	    esac
	case "$optimize" in
	    *-O*|\
	    *O2*)   opt=`echo "$optimize" | sed -e 's/-O/+O2/' -e 's/O2/O1/' -e 's/ *+Onolimit//'`
		    ;;
	    *)      opt="$optimize"
		    ;;
	    esac
	if [ $maxdsiz -le 64 ]; then
	    toke_cflags="$toke_cflags;optimize=\"$opt\""
	    regexec_cflags="optimize=\"$opt\""
	    fi
	case "$archname" in
	    IA64*)
		doop_cflags="optimize=\"$opt\""
		;;
	    esac
	ld=/usr/bin/ld
	cccdlflags='+Z'
	lddlflags='-b +vnocompatwarnings'
	;;
    esac

## LARGEFILES
d305 2
a306 20
#case "$uselargefiles-$ccisgcc" in
#    "$define-$define"|'-define') 
#	cat <<EOM >&4
#
#*** I'm ignoring large files for this build because
#*** I don't know how to do use large files in HP-UX using gcc.
#
#EOM
#	uselargefiles="$undef"
#	;;
#    esac

cat >UU/uselargefiles.cbu <<'EOCBU'
# This script UU/uselargefiles.cbu will get 'called-back' by Configure 
# after it has prompted the user for whether to use large files.
case "$uselargefiles" in
    ""|$define|true|[yY]*)
	# there are largefile flags available via getconf(1)
	# but we cheat for now.  (Keep that in the left margin.)
ccflags_uselargefiles="-D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"
d308 2
a309 12
	case " $ccflags " in
	*" $ccflags_uselargefiles "*) ;;
	*) ccflags="$ccflags $ccflags_uselargefiles" ;;
	esac

	if test -z "$ccisgcc" -a -z "$gccversion"; then
	    # The strict ANSI mode (-Aa) doesn't like large files.
	    ccflags=`echo " $ccflags "|sed 's@@ -Aa @@ @@g'`
	    case "$ccflags" in
		*-Ae*) ;;
		*)     ccflags="$ccflags -Ae" ;;
		esac
d313 3
a315 1
EOCBU
d317 7
a323 1
# THREADING
d325 1
a327 1
cat >UU/usethreads.cbu <<'EOCBU'
d329 3
a331 3
    $define|true|[yY]*)
	if [ "$xxOsRevMajor" -lt 10 ]; then
	    cat <<EOM >&4
d337 6
a342 6
	    exit 1
	    fi

	if [ "$xxOsRevMajor" -eq 10 ]; then
	    # Under 10.X, a threaded perl can be built
	    if [ -f /usr/include/pthread.h ]; then
d346 3
a348 24
		   # Check if it is pristine, or patched
		   cmavsn=`what /usr/lib/libcma.sl 2>&1 | grep 1996`
		   if [ ! -z "$cmavsn" ]; then
		       cat <<EOM >&4

***************************************************************************

Perl will support threading through /usr/lib/libcma.sl from
the HP DCE package, but the version found is too old to be
reliable.

If you are not depending on this specific version of the library,
consider to upgrade using patch PHSS_23672 (read README.hpux)

***************************************************************************

(sleeping for 10 seconds...)
EOM
		       sleep 10
		       fi

		    # It needs # libcma and OLD_PTHREADS_API. Also
		    # <pthread.h> needs to be #included before any
		    # other includes (in perl.h)
d356 1
a356 2
		    # tell perl.h to include <pthread.h> before other
		    # include files
a357 15
# First column on purpose:
# this is not a standard Configure variable
# but we need to get this noticed.
pthread_h_first="$define"

		    # HP-UX 10.X seems to have no easy
		    # way of detecting these *time_r protos.
		    d_gmtime_r_proto='define'
		    gmtime_r_proto='REENTRANT_PROTO_I_TS'
		    d_localtime_r_proto='define'
		    localtime_r_proto='REENTRANT_PROTO_I_TS'

		    # Avoid the poisonous conflicting (and irrelevant)
		    # prototypes of setkey(). 
		    i_crypt="$undef"
d359 2
a360 2
		    # CMA redefines select to cma_select, and cma_select
		    # expects int * instead of fd_set * (just like 9.X)
d373 2
a374 2
	    if [ $libswanted = "no_threads_available" ]; then
		cat <<EOM >&4
d384 1
a384 1
    PTH package from e.g. http://hpux.tn.tudelft.nl/hppd/hpux/alpha.html
d388 1
a388 1
		exit 1
a389 7
	else
	    # 12 may want upping the _POSIX_C_SOURCE datestamp...
	    ccflags=" -D_POSIX_C_SOURCE=199506L -D_REENTRANT $ccflags"
	    set `echo X "$libswanted "| sed -e 's/ c / pthread c /'`
	    shift
	    libswanted="$*"
	    fi
d391 9
d401 1
a401 1
    esac
d404 29
a432 17
# The mysterious io_xs memory corruption in 11.00 32bit seems to get
# fixed by not using Perl's malloc.  Flip side is performance loss.
# So we want mymalloc for all situations possible
usemymalloc='y'
case "$usethreads" in
    $define|true|[yY]*) usemymalloc='n' ;;
    *)  case "$ccisgcc" in
           $undef|false|[nN]*)
               case "$use64bitint" in
                   $undef|false|[nN]*)
                       case "$ccflags" in
                           *-DDEBUGGING*) ;;
                           *) usemymalloc='n' ;;
                           esac
                       ;;
                   esac
               ;;
d434 5
a438 2
       ;;
    esac
d440 2
a441 4
usemymalloc='n'
case "$useperlio" in
    $undef|false|[nN]*) usemymalloc='y' ;;
    esac
a442 18
# fpclassify() is a macro, the library call is Fpclassify
# Similarly with the others below.
d_fpclassify='define'
d_isnan='define'
d_isinf='define'
d_isfinite='define'
d_unordered='define'
# Next one(s) need the leading tab.  These are special 'hint' symbols that
# are not to be propagated to config.sh, all related to pthreads draft 4
# interfaces.
case "$d_oldpthreads" in
    ''|$undef)
	d_crypt_r_proto='undef'
	d_getgrent_r_proto='undef'
	d_getpwent_r_proto='undef'
	d_strerror_r_proto='undef'
	;;
    esac
@


1.1.1.6
log
@perl 5.8.2 from CPAN
@
text
@a412 52
# Once we have the compiler flags defined, Configure will
# execute the following call-back script. See hints/README.hints
# for details.
cat > UU/cc.cbu <<'EOCBU'
# This script UU/cc.cbu will get 'called-back' by Configure after it
# has prompted the user for the C compiler to use.

# Compile and run the a test case to see if a certain gcc bug is
# present. If so, lower the optimization level when compiling
# pp_pack.c.  This works around a bug in unpack.

if test -z "$ccisgcc" -a -z "$gccversion"; then
    : no tests needed for HPc
else
    echo " "
    echo "Testing for a certain gcc bug is fixed in your compiler..."

    # Try compiling the test case.
    if $cc -o t001 -O $ccflags $ldflags -lm ../hints/t001.c; then
       gccbug=`$run ./t001`
       case "$gccbug" in
           *fails*)
               cat >&4 <<EOF
This C compiler ($gccversion) is known to have optimizer
problems when compiling pp_pack.c.

Disabling optimization for pp_pack.c.
EOF
               case "$pp_pack_cflags" in
                   '') pp_pack_cflags='optimize='
                       echo "pp_pack_cflags='optimize=\"\"'" >> config.sh ;;
                   *)  echo "You specified pp_pack_cflags yourself, so we'll go with your value." >&4 ;;
                   esac
               ;;
           *)  echo "Your compiler is ok." >&4
               ;;
           esac
    else
       echo " "
       echo "*** WHOA THERE!!! ***" >&4
       echo "    Your C compiler \"$cc\" doesn't seem to be working!" >&4
       case "$knowitall" in
           '') echo "    You'd better start hunting for one and let me know about it." >&4
               exit 1
               ;;
           esac
       fi

    rm -f t001$_o t001$_exe
    fi
EOCBU

@


1.1.1.7
log
@Import of stock perl 5.8.5
@
text
@a7 2
	xxOsRevMinor=`uname -r | sed -e 's/^[^0-9]*//' | cut -d. -f2`;
	xxOsRev=`expr 100 \* $xxOsRevMajor + $xxOsRevMinor`
d137 1
a137 1
	    ccversion=`which cc | xargs what | awk '/Compiler/{print $2}/Itanium/{print $6,$7}'`
d140 1
a140 6
		*)  ccflags="-Ae $cc_cppflags"
		    # +vnocompatwarnings not known in 10.10 and older
		    if [ $xxOsRev -ge 1020 ]; then
			ccflags="$ccflags -Wl,+vnocompatwarnings"
			fi
		    ;;
a399 3
if [ $xxOsRev -lt 1020 ]; then
    uselargefiles="$undef"
    fi
a631 5

# malloc wrap works
case "$usemallocwrap" in
'') usemallocwrap='define' ;;
esac
@


1.1.1.8
log
@perl 5.8.8 import
@
text
@d87 1
a87 1
		[34]*) # GCC (both 32bit and 64bit) will define __STDC_EXT__
d97 1
a97 1
			[34]*)
d139 1
a139 22
	    # What cannot be use in combination with ccache links :(
	    cc_found=""
	    for p in `echo $PATH | tr : ' ''` ; do
		x="$p/cc"
		if [ -f $x ] && [ -x $x ]; then
		    if [ -h $x ]; then
			l=`ls -l $x | sed 's,.*-> ,,'`
			case $l in
			    /*) x=$l		;;
			    *)  x="$p/$l"	;;
			    esac
			fi
		    x=`echo $x | sed 's,/\./,/,g'`
		    case $x in
			*ccache*) ;;
			*) [ -z "$cc_found" ] && cc_found=$x ;;
			esac
		    fi
		done
	    [ -z "$cc_found" ] && cc_found=`which cc`
	    what $cc_found >&4
	    ccversion=`what $cc_found | awk '/Compiler/{print $2}/Itanium/{print $6,$7}'`
d251 9
a259 10
			    [1234]*)
				ccflags="$ccflags -mlp64"
				case "$archname" in
				    PA-RISC*)
					ldflags="$ldflags -Wl,+DD64"
					;;
				    IA64*)
					ldflags="$ldflags -mlp64"
					;;
				    esac
d323 1
a323 1
    printf ("%d\n", (int)(rl.rlim_cur / (1024 * 1024)));
d391 4
d397 1
a397 10
		case "$ccversion" in
		    B3910B*A.06.0[12345])
			# > cc --version
			# cc: HP aC++/ANSI C B3910B A.06.05 [Jul 25 2005]
			# Has optimizing problems with -O2 and up for both
			# maint (5.8.8+) and blead (5.9.3+)
			# -O1/+O1 passed all tests (m)'05 [ 10 Jan 2005 ]
			optimize="$opt"			;;
		    *)  doop_cflags="optimize=\"$opt\""	;;
		    esac
a399 4
	if [ $maxdsiz -le 64 ]; then
	    toke_cflags="$toke_cflags;optimize=\"$opt\""
	    regexec_cflags="optimize=\"$opt\""
	    fi
a646 8

# ctime_r() and asctime_r() seem to have issues for versions before
# HP-UX 11
if [ $xxOsRevMajor -lt 11 ]; then
    d_ctime_r="$undef"
    d_asctime_r="$undef"
    fi

@


1.1.1.9
log
@import perl 5.10.0 from CPAN
@
text
@d81 1
a81 1
		gccversion=`$cc -dumpversion`
d160 1
a160 1
	    ccversion=`what $cc_found | awk '/Compiler/{print $2}/Itanium/{print $6,$7}/for Integrity/{print $6}'`
d191 1
a191 1
	echo '#include <stdio.h>\nint main(){long l;printf("%d\\n",sizeof(l));}'>try.c
d194 1
a194 3
	    case "$use64bitall" in
		$define|true|[Yy]) ;;
		*)  cat <<EOM >&4
a198 1
		esac
d250 1
a250 1
	    IA64*)
d308 1
a308 1
	    IA64*)
a338 1
#include <stdio.h>
a363 1
op_cflags=''
d368 1
a368 1

d423 1
a423 2
		    *)  doop_cflags="optimize=\"$opt\""
			op_cflags="optimize=\"$opt\""	;;
d443 1
a443 1
#    "$define-$define"|'-define')
d507 1
a507 1
# This script UU/uselargefiles.cbu will get 'called-back' by Configure
d534 1
a534 1
# This script UU/usethreads.cbu will get 'called-back' by Configure
d602 1
a602 1
		    # prototypes of setkey ().
d642 1
a643 7
	    # HP-UX 11.X seems to have no easy
	    # way of detecting these *time_r protos.
	    d_gmtime_r_proto='define'
	    gmtime_r_proto='REENTRANT_PROTO_S_TS'
	    d_localtime_r_proto='define'
	    localtime_r_proto='REENTRANT_PROTO_S_TS'
	    fi
d648 20
a667 6
# There used to be:
#  The mysterious io_xs memory corruption in 11.00 32bit seems to get
#  fixed by not using Perl's malloc.  Flip side is performance loss.
#  So we want mymalloc for all situations possible
# That set usemymalloc to 'n' for threaded builds and non-gcc 32bit
#  non-debugging builds and 'y' for all others
d676 2
a677 2
    '') usemallocwrap='define' ;;
    esac
d679 1
a679 1
# ctime_r () and asctime_r () seem to have issues for versions before
d687 1
a687 1
# fpclassify () is a macro, the library call is Fpclassify
@


1.1.1.10
log
@import perl 5.10.1
@
text
@d221 12
@


1.1.1.11
log
@Perl 5.12.2 from CPAN
@
text
@a235 9
	if [ $xxOsRev -eq 1100 ]; then
	    # HP-UX 11.00 uses only 48 bits internally in 64bit mode, not 64
	    # force min/max to 2**47-1
	    sGMTIME_max=140737488355327
	    sGMTIME_min=-62167219200
	    sLOCALTIME_max=140737488355327
	    sLOCALTIME_min=-62167219200
	    fi

d273 1
a273 1
				;;
d279 2
a280 6
		case "$use64bitall" in
		    $define|true|[yY]*)
			ccflags="$ccflags +DD64"
			ldflags="$ldflags +DD64"
			;;
		    esac
d671 1
@


1.1.1.12
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d160 1
a160 1
	    ccversion=`what $cc_found | awk '/Compiler/{print $2}/Itanium/{print $6,$7}/for Integrity/{print $6,$7}'`
d223 1
a223 1
case "$use64bitall" in
a265 10
		# The fixed socket.h header file is wrong for gcc-4.x
		# on PA-RISC2.0W, so Sock_type_t is size_t which is
		# unsigned long which is 64bit which is too long
		case "$gccversion" in
		    4*) case "$archname" in
			    PA-RISC*) socksizetype=int ;;
			    esac
			;;
		    esac

d407 1
a407 1
    *)
a428 13
			B3910B*A.06.15)
			# > cc --version
			# cc: HP C/aC++ B3910B A.06.15 [May 16 2007]
			# Has optimizing problems with +O2 for blead (5.16.3),
			# see https://rt.perl.org:443/rt3/Ticket/Display.html?id=103668.
			#
			# +O2 +Onolimit +Onoprocelim  +Ostore_ordering \
			# +Onolibcalls=strcmp
			# passes all tests (with/without -DDEBUGGING) [Nov 17 2011]
			case "$optimize" in
				*O2*) optimize="$optimize +Onoprocelim +Ostore_ordering +Onolibcalls=strcmp" ;;
				esac
			;;
a512 21
cat >config.arch <<'EOCBU'
# This script UU/config.arch will get 'called-back' by Configure after
# all other configurations are done just before config.h is generated
case "$archname:$optimize" in
  PA*:*-g*[-+]O*|PA*:*[-+]O*-g*)
    case "$ccflags" in
      *DD64*) ;;
      *) case "$ccversion" in
	  # Only on PA-RISC. B3910B (aCC) is not faulty
	  # B.11.* and A.10.* are
	  [AB].1*)
	      # cc: error 1414: Can't handle preprocessed file foo.i if -g and -O specified.
	      echo "HP-UX C-ANSI-C on PA-RISC does not accept both -g and -O on preprocessed files" >&4
	      echo "when compiling in 32bit mode. The optimizer will be disabled." >&4
	      optimize=`echo "$optimize" | sed -e 's/[-+]O[0-9]*//' -e 's/+Onolimit//' -e 's/^ *//'`
	      ;;
	  esac
      esac
  esac
EOCBU

d637 1
a637 1
    PTH package from e.g. http://hpux.connect.org.uk/hppd/hpux/Gnu/pth-2.0.7/
@


1.1.1.13
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d442 1
a442 1
			# Has optimizing problems with +O2 for blead (5.17.4),
@


1.1.1.14
log
@Import perl-5.24.2
@
text
@a215 24
# There is a weird pre-C99 long double (a struct of four uin32_t)
# in HP-UX 10.20 but beyond strtold() there's no support for them
# for example in <math.h>.
case "$uselongdouble" in
    $define|true|[yY]*)
	if [ "$xxOsRevMajor" -lt 11 ]; then
	    cat <<EOM >&4

*** uselongdouble (or usemorebits) is not supported on HP-UX $xxOsRevMajor.
*** You need at least HP-UX 11.0.
*** Cannot continue, aborting.
EOM
	    exit 1
	fi
	;;
    esac

# Configure long double scan will detect the HP-UX 10.20 "long double"
# (a struct of four uin32_t) and think it is IEEE quad.  Make it not so.
if [ "$xxOsRevMajor" -lt 11 ]; then
    d_longdbl="$undef"
    longdblsize=8 # Make it double.
fi

a379 2
opmini_cflags=''
perlmain_cflags=''
a429 15
	    PA-RISC2.0)
		case "$ccversion" in
		    B.11.11.*)
			# opmini.c and op.c with +O2 makes the compiler die
			# of internal error, for perlmain.c only +O0 (no opt)
                        # works.
			case "$optimize" in
			*O2*)	opt=`echo "$optimize" | sed -e 's/O2/O1/'`
				opmini_cflags="optimize=\"$opt\""
				op_cflags="optimize=\"$opt\""
				perlmain_cflags="optimize=\"\""
				;;
			esac
		    esac
		;;
a559 8

case "$archname:$use64bitall:$use64bitint" in
    *-LP64*:undef:define)
	archname=`echo "$archname" | sed 's/-LP64/-64int/'`
	echo "Archname changed to $archname"
	;;
    esac

a746 19

# H.Merijn says it's not 1998 anymore: ODBM is not needed,
# and it seems to be buggy in HP-UX anyway.
i_dbm=undef

# In HP-UXes prior to 11.23 strtold() returned a HP-UX
# specific union called long_double, not a C99 long double.
case "`grep 'double strtold.const' /usr/include/stdlib.h`" in
*"long double strtold"*) ;; # strtold should be safe.
*) echo "Looks like your strtold() is non-standard..." >&4
   d_strtold=undef ;;
esac

# In pre-11 HP-UXes there really isn't isfinite(), despite what
# Configure might think. (There is finite(), though.)
case "`grep 'isfinite' /usr/include/math.h`" in
*"isfinite"*) ;;
*) d_isfinite=undef ;;
esac
@


