head	1.16;
access;
symbols
	OPENBSD_6_1_BASE:1.16
	OPENBSD_6_0:1.15.0.10
	OPENBSD_6_0_BASE:1.15
	OPENBSD_5_9:1.15.0.4
	OPENBSD_5_9_BASE:1.15
	OPENBSD_5_8:1.15.0.6
	OPENBSD_5_8_BASE:1.15
	PERL_5_20_2:1.1.1.14
	OPENBSD_5_7:1.15.0.2
	OPENBSD_5_7_BASE:1.15
	PERL_5_20_1:1.1.1.14
	OPENBSD_5_6:1.14.0.4
	OPENBSD_5_6_BASE:1.14
	PERL_5_18_2:1.1.1.13
	PERL:1.1.1
	OPENBSD_5_5:1.13.0.6
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.13.0.2
	OPENBSD_5_4_BASE:1.13
	PERL_5_16_3:1.1.1.12
	OPENBSD_5_3:1.12.0.14
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.12
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.10
	OPENBSD_5_0:1.12.0.8
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.6
	OPENBSD_4_9_BASE:1.12
	PERL_5_12_2:1.1.1.11
	OPENBSD_4_8:1.12.0.4
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.2
	OPENBSD_4_7_BASE:1.12
	PERL_5_10_1:1.1.1.11
	OPENBSD_4_6:1.11.0.6
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.2
	OPENBSD_4_5_BASE:1.11
	PERL_5_10_0:1.1.1.10
	OPENBSD_4_4:1.10.0.10
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.8
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.6
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.4
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.2
	OPENBSD_4_0_BASE:1.10
	PERL_5_8_8:1.1.1.9
	OPENBSD_3_9:1.9.0.8
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.6
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.4
	OPENBSD_3_7_BASE:1.9
	PERL_5_8_6:1.1.1.8
	OPENBSD_3_6:1.9.0.2
	OPENBSD_3_6_BASE:1.9
	PERL_5_8_5:1.1.1.8
	PERL_5_8_3:1.1.1.7
	OPENBSD_3_5:1.7.0.2
	OPENBSD_3_5_BASE:1.7
	PERL_5_8_2:1.1.1.6
	OPENBSD_3_4:1.6.0.4
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.6.0.2
	OPENBSD_3_3_BASE:1.6
	PERL_5_8_0:1.1.1.5
	OPENBSD_3_2:1.5.0.6
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.4
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	PERL_5_6_1:1.1.1.4
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	PERL_5_6_0:1.1.1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	PERL_500503:1.1.1.2
	CPAN:1.1.1
	OPENBSD_2_5:1.2.0.6
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.4
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	perl5003:1.1.1.1
	lwall:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.16
date	2017.02.05.00.32.14;	author afresh1;	state Exp;
branches;
next	1.15;
commitid	cxJ08BvJA9Pt2PTM;

1.15
date	2014.11.17.20.57.06;	author afresh1;	state Exp;
branches;
next	1.14;
commitid	QP75iYx42Uo7mMxO;

1.14
date	2014.03.24.15.05.27;	author afresh1;	state Exp;
branches;
next	1.13;

1.13
date	2013.03.25.20.40.55;	author sthen;	state Exp;
branches;
next	1.12;

1.12
date	2009.10.12.18.24.37;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2008.09.29.17.36.08;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2006.03.28.19.23.04;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2004.08.09.18.09.26;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2004.04.07.21.33.04;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2003.12.03.03.02.35;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.10.27.22.25.25;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.24.18.35.20;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.06.17.05.54;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	99.04.29.22.51.40;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.11.30.07.56.27;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.08.19.10.12.26;	author downsj;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.08.19.10.12.26;	author downsj;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.04.29.22.39.36;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2000.04.06.16.09.29;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2001.05.24.18.23.13;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2002.10.27.22.14.56;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2003.12.03.02.43.56;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2004.04.07.21.13.11;	author millert;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2004.08.09.17.47.58;	author millert;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2006.03.28.18.48.29;	author millert;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	2008.09.29.17.18.28;	author millert;	state Exp;
branches;
next	1.1.1.11;

1.1.1.11
date	2009.10.12.18.10.46;	author millert;	state Exp;
branches;
next	1.1.1.12;

1.1.1.12
date	2013.03.25.20.08.49;	author sthen;	state Exp;
branches;
next	1.1.1.13;

1.1.1.13
date	2014.03.24.14.59.03;	author afresh1;	state Exp;
branches;
next	1.1.1.14;

1.1.1.14
date	2014.11.17.20.53.07;	author afresh1;	state Exp;
branches;
next	;
commitid	B31cAbBIXiCqnL97;


desc
@@


1.16
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@# hints/solaris_2.sh
# Contributions by (in alphabetical order) Alan Burlison, Andy Dougherty,
# Dean Roehrich, Jarkko Hietaniemi, Lupe Christoph, Richard Soderberg and
# many others.
#
# See README.solaris for additional information.
#
# For consistency with gcc, we do not adopt Sun Marketing's
# removal of the '2.' prefix from the Solaris version number.
# (Configure tries to detect an old fixincludes and needs
# this information.)

# If perl fails tests that involve dynamic loading of extensions, and
# you are using gcc, be sure that you are NOT using GNU as and ld.  One
# way to do that is to invoke Configure with
#
#     sh Configure -Dcc='gcc -B/usr/ccs/bin/'
#
#  (Note that the trailing slash is *required*.)
#  gcc will occasionally emit warnings about "unused prefix", but
#  these ought to be harmless.  See below for more details.

# Solaris has secure SUID scripts
d_suidsafe=${d_suidsafe:-define}

# Be paranoid about nm failing to find symbols
mistrustnm=${mistrustnm:-run}

# Several people reported problems with perl's malloc, especially
# when use64bitall is defined or when using gcc.
#     http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2001-01/msg01318.html
#     http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2001-01/msg00465.html
usemymalloc=${usemymalloc:-false}

# malloc wrap works
case "$usemallocwrap" in
'') usemallocwrap='define' ;;
esac

# Avoid all libraries in /usr/ucblib.
# /lib is just a symlink to /usr/lib
set `echo $glibpth | sed -e 's@@/usr/ucblib@@@@' -e 's@@ /lib @@ @@'`
glibpth="$*"

# Starting with Solaris 10, we don't want versioned shared libraries because
# those often indicate a private use only library.  Especially badly that would
# break things with SUNWbdb (Berkeley DB) being installed, which brings in
# /usr/lib/libdb.so.1, but that is not really meant for public consumption.
#  XXX Revisit after perl 5.10 -- should we apply this to older Solaris
# versions too?  (A.D. 11/2007).
case "`$run uname -r`" in
5.[0-9]) ;;
*) ignore_versioned_solibs=y ;;
esac

# Remove unwanted libraries.  -lucb contains incompatible routines.
# -lld and -lsec don't do anything useful. -lcrypt does not
# really provide anything we need over -lc, so we drop it, too.
# -lmalloc can cause a problem with GNU CC & Solaris.  Specifically,
# libmalloc.a may allocate memory that is only 4 byte aligned, but
# GNU CC on the Sparc assumes that doubles are 8 byte aligned.
# Thanks to  Hallvard B. Furuseth <h.b.furuseth@@usit.uio.no>
set `echo " $libswanted " | sed -e 's@@ ld @@ @@' -e 's@@ malloc @@ @@' -e 's@@ ucb @@ @@' -e 's@@ sec @@ @@' -e 's@@ crypt @@ @@'`
libswanted="$*"

# Look for architecture name.  We want to suggest a useful default.
case "$archname" in
'')
    if test -f /usr/bin/arch; then
	archname=`/usr/bin/arch`
	archname="${archname}-${osname}"
    elif test -f /usr/ucb/arch; then
	archname=`/usr/ucb/arch`
	archname="${archname}-${osname}"
    fi
    ;;
esac

#
# This extracts the library directories that will be searched by the Sun
# Workshop compiler, given the command-line supplied in $tryworkshopcc.
# Use thusly: loclibpth="`$getworkshoplibs` $loclibpth"
#
	getworkshoplibs=`cat <<'END'
eval $tryworkshopcc -### 2>&1 | \
sed -n '/ -Y /s!.* -Y "P,\([^"]*\)".*!\1!p' | tr ':' ' ' | \
sed -e 's!/usr/lib/sparcv9!!' -e 's!/usr/ccs/lib/sparcv9!!' \
    -e 's!/usr/lib!!g' -e 's!/usr/ccs/lib!!g'
END
`

case "$cc" in
'')    for i in `ls -r /opt/sol*studio*/bin/cc` /opt/SUNWspro/bin/cc
       do
	       if test -f "$i"; then
		       cc=$i
		       cat <<EOF >&4

You specified no cc but you seem to have the Workshop compiler
($cc) installed, using that.
If you want something else, specify that in the command line,
e.g. Configure -Dcc=gcc

EOF
			break
		fi
	done
	;;
esac

######################################################
# General sanity testing.  See below for excerpts from the Solaris FAQ.
#
# From roehrich@@ironwood-fddi.cray.com Wed Sep 27 12:51:46 1995
# Date: Thu, 7 Sep 1995 16:31:40 -0500
# From: Dean Roehrich <roehrich@@ironwood-fddi.cray.com>
# To: perl5-porters@@africa.nicoh.com
# Subject: Re: On perl5/solaris/gcc
#
# Here's another draft of the perl5/solaris/gcc sanity-checker.

case `type ${cc:-cc}` in
*/usr/ucb/cc*) cat <<END >&4

NOTE:  Some people have reported problems with /usr/ucb/cc.
If you have difficulties, please make sure the directory
containing your C compiler is before /usr/ucb in your PATH.

END
;;
esac


# Check that /dev/fd is mounted.  If it is not mounted, let the
# user know that suid scripts may not work.
$run mount | grep '^/dev/fd ' 2>&1 > /dev/null
case $? in
0) ;;
*)
	cat <<END >&4

NOTE: Your system does not have /dev/fd mounted.  If you want to
be able to use set-uid scripts you must ask your system administrator
to mount /dev/fd.

END
	;;
esac


# See if libucb can be found in /usr/lib.  If it is, warn the user
# that this may cause problems while building Perl extensions.
found_libucb=''
case "$run" in
'') /usr/bin/ls /usr/lib/libucb* >/dev/null 2>&1
    found_libucb=$?
    ;;
*)  $run /usr/bin/ls '/usr/lib/libucb*' >/dev/null 2>&1
    found_libucb=$?
    ;;
esac

case $found_libucb in
0)
	cat <<END >&4

NOTE: libucb has been found in /usr/lib.  libucb should reside in
/usr/ucblib.  You may have trouble while building Perl extensions.

END
;;
esac

# Use shell built-in 'type' command instead of /usr/bin/which to
# avoid possible csh start-up problems and also to use the same shell
# we'll be using to Configure and make perl.
# The path name is the last field in the output, but the type command
# has an annoying array of possible outputs, e.g.:
#	make is hashed (/opt/gnu/bin/make)
#	cc is /usr/ucb/cc
#	foo not found
# use a command like type make | awk '{print $NF}' | sed 's/[()]//g'

# See if make(1) is GNU make(1).
# If it is, make sure the setgid bit is not set.
make -v > make.vers 2>&1
if grep GNU make.vers > /dev/null 2>&1; then
    tmp=`type make | awk '{print $NF}' | sed 's/[()]//g'`
    case "`${ls:-'/usr/bin/ls'} -lL $tmp`" in
    ??????s*)
	    cat <<END >&2

NOTE: Your PATH points to GNU make, and your GNU make has the set-group-id
bit set.  You must either rearrange your PATH to put /usr/ccs/bin before the
GNU utilities or you must ask your system administrator to disable the
set-group-id bit on GNU make.

END
	    ;;
    esac
fi
rm -f make.vers

cat > UU/cc.cbu <<'EOCBU'
# This script UU/cc.cbu will get 'called-back' by Configure after it
# has prompted the user for the C compiler to use.

# If the C compiler is gcc:
#   - check the fixed-includes
#   - check as(1) and ld(1), they should not be GNU
#	(GNU as and ld 2.8.1 and later are reportedly ok, however.)
# If the C compiler is not gcc:
#   - Check if it is the Workshop/Forte compiler.
#     If it is, prepare for 64 bit and long doubles.
#   - check as(1) and ld(1), they should not be GNU
#	(GNU as and ld 2.8.1 and later are reportedly ok, however.)
#
# Watch out in case they have not set $cc.

# Perl compiled with some combinations of GNU as and ld may not
# be able to perform dynamic loading of extensions.  If you have a
# problem with dynamic loading, be sure that you are using the Solaris
# /usr/ccs/bin/as and /usr/ccs/bin/ld.  You can do that with
#	sh Configure -Dcc='gcc -B/usr/ccs/bin/'
# (note the trailing slash is required).
# Combinations that are known to work with the following hints:
#
#  gcc-2.7.2, GNU as 2.7, GNU ld 2.7
#  egcs-1.0.3, GNU as 2.9.1 and GNU ld 2.9.1
#	--Andy Dougherty  <doughera@@lafayette.edu>
#	Tue Apr 13 17:19:43 EDT 1999

# Get gcc to share its secrets.
echo 'int main() { return 0; }' > try.c
	# Indent to avoid propagation to config.sh
	verbose=`${cc:-cc} $ccflags -v -o try try.c 2>&1`

# XXX TODO:  'specs' output changed from 'Reading specs from' in gcc-[23] to 'Using
# built-in specs' in gcc-4.  Perhaps we should just use the same gcc test as
# in Configure to see if we're using gcc.
if echo "$verbose" | egrep '(Reading specs from)|(Using built-in specs)' >/dev/null 2>&1; then
	#
	# Using gcc.
	#
	cc_name='gcc'

	# See if as(1) is GNU as(1).  GNU as(1) might not work for this job.
	if echo "$verbose" | grep ' /usr/ccs/bin/as ' >/dev/null 2>&1; then
	    :
	else
	    cat <<END >&2

NOTE: You are using GNU as(1).  GNU as(1) might not build Perl.  If you
have trouble, you can use /usr/ccs/bin/as by including -B/usr/ccs/bin/
in your ${cc:-cc} command.  (Note that the trailing "/" is required.)

END
	    # Apparently not needed, at least for as 2.7 and later.
	    # cc="${cc:-cc} $ccflags -B/usr/ccs/bin/"
	fi

	# See if ld(1) is GNU ld(1).  GNU ld(1) might not work for this job.
	# Recompute $verbose since we may have just changed $cc.
	verbose=`${cc:-cc} $ccflags -v -o try try.c 2>&1 | grep ld 2>&1`

	if echo "$verbose" | grep ' /usr/ccs/bin/ld ' >/dev/null 2>&1; then
	    # Ok, gcc directly calls the Solaris /usr/ccs/bin/ld.
	    :
	elif echo "$verbose" | grep "ld: Software Generation Utilities" >/dev/null 2>&1; then
	    # Hmm.  gcc doesn't call /usr/ccs/bin/ld directly, but it
	    # does appear to be using it eventually.  egcs-1.0.3's ld
	    # wrapper does this.
	    # Most Solaris versions of ld I've seen contain the magic
	    # string used in the grep.
	    :
	elif echo "$verbose" | grep "Solaris Link Editors" >/dev/null 2>&1; then
	    # However some Solaris 8 versions prior to ld 5.8-1.286 contain
	    # this string instead.
	    :
	else
	    # No evidence yet of /usr/ccs/bin/ld.  Some versions
	    # of egcs's ld wrapper call /usr/ccs/bin/ld in turn but
	    # apparently don't reveal that unless you pass in -V.
	    # (This may all depend on local configurations too.)

	    # Recompute verbose with -Wl,-v to find GNU ld if present
	    verbose=`${cc:-cc} $ccflags -Wl,-v -o try try.c 2>&1 | grep /ld 2>&1`

	    myld=`echo $verbose | awk '/\/ld/ {print $1}'`
	    # This assumes that gcc's output will not change, and that
	    # /full/path/to/ld will be the first word of the output.
	    # Thus myld is something like /opt/gnu/sparc-sun-solaris2.5/bin/ld

	    # Allow that $myld may be '', due to changes in gcc's output
	    if ${myld:-ld} -V 2>&1 |
		grep "ld: Software Generation Utilities" >/dev/null 2>&1; then
		# Ok, /usr/ccs/bin/ld eventually does get called.
		:
	    elif ${myld:-ld} -V 2>&1 |
		grep "Solaris Link Editors" >/dev/null 2>&1; then
		# Ok, /usr/ccs/bin/ld eventually does get called.
		:
	    else
		echo "Found GNU ld='$myld'" >&4
		cat <<END >&2

NOTE: You are using GNU ld(1).  GNU ld(1) might not build Perl.  If you
have trouble, you can use /usr/ccs/bin/ld by including -B/usr/ccs/bin/
in your ${cc:-cc} command.  (Note that the trailing "/" is required.)

I will try to use GNU ld by passing in the -Wl,-E flag, but if that
doesn't work, you should use -B/usr/ccs/bin/ instead.

END
		ccdlflags="$ccdlflags -Wl,-E"
		lddlflags="$lddlflags -Wl,-E -shared"
	    fi
	fi

else
	#
	# Not using gcc.
	#
	cat > try.c << 'EOM'
#include <stdio.h>
int main() {
#if defined(__SUNPRO_C)
	printf("workshop\n");
#else
#if defined(__SUNPRO_CC)
	printf("workshop CC\n");
#else
	printf("\n");
#endif
#endif
return(0);
}
EOM
	tryworkshopcc="${cc:-cc} $ccflags try.c -o try"
	if $tryworkshopcc >/dev/null 2>&1; then
		cc_name=`$run ./try`
		if test "$cc_name" = "workshop"; then
			ccversion="`${cc:-cc} -V 2>&1|sed -n -e '1s/^[Cc][Cc9]9*: //p'`"
		fi
		if test "$cc_name" = "workshop CC"; then
			ccversion="`${cc:-CC} -V 2>&1|sed -n -e '1s/^[Cc][C]: //p'`"
		fi
		case "$cc_name" in
		workshop*)
			# Settings for either cc or CC
			if test ! "$use64bitall_done"; then
				loclibpth="/usr/lib /usr/ccs/lib `$getworkshoplibs` $loclibpth"
			fi
			# Sun CC/cc don't support gcc attributes
			d_attribute_format='undef'
			d_attribute_malloc='undef'
			d_attribute_nonnull='undef'
			d_attribute_noreturn='undef'
			d_attribute_pure='undef'
			d_attribute_unused='undef'
			d_attribute_warn_unused_result='undef'
			case "$cc" in
			*c99)	# c99 rejects bare '-O'.
				case "$optimize" in
				''|-O) optimize=-O3 ;;
				esac
				# Without -Xa c99 doesn't see
				# many OS interfaces.
				case "$ccflags" in
				*-Xa*)	;;
				*) ccflags="$ccflags -Xa" ;;
				esac
				;;
			esac
			;;
		esac
	fi

	# See if as(1) is GNU as(1).  GNU might not work for this job.
	case `as --version < /dev/null 2>&1` in
	*GNU*)
		cat <<END >&2

NOTE: You are using GNU as(1).  GNU as(1) might not build Perl.
You must arrange to use /usr/ccs/bin/as, perhaps by adding /usr/ccs/bin
to the beginning of your PATH.

END
		;;
	esac

	# See if ld(1) is GNU ld(1).  GNU ld(1) might not work for this job.
	# ld --version doesn't properly report itself as a GNU tool,
	# as of ld version 2.6, so we need to be more strict. TWP 9/5/96
	# Sun's ld always emits the "Software Generation Utilities" string.
	if ld -V 2>&1 | grep "ld: Software Generation Utilities" >/dev/null 2>&1; then
	    # Ok, ld is /usr/ccs/bin/ld.
	    :
	else
	    cat <<END >&2

NOTE: You are apparently using GNU ld(1).  GNU ld(1) might not build Perl.
You should arrange to use /usr/ccs/bin/ld, perhaps by adding /usr/ccs/bin
to the beginning of your PATH.

END
	fi
fi

# as --version or ld --version might dump core.
rm -f try try.c core
EOCBU

cat > UU/usethreads.cbu <<'EOCBU'
# This script UU/usethreads.cbu will get 'called-back' by Configure
# after it has prompted the user for whether to use threads.
case "$usethreads" in
$define|true|[yY]*)
	ccflags="-D_REENTRANT $ccflags"

	# -lpthread overrides some lib C functions, so put it before c.
	set `echo X "$libswanted "| sed -e "s/ c / pthread c /"`
	shift
	libswanted="$*"

	# sched_yield is available in the -lrt library.  However,
	# we can also pick up the equivalent yield() function in the
	# normal C library.  To avoid pulling in unnecessary
	# libraries, we'll normally avoid sched_yield()/-lrt and
	# just use yield().  However, we'll honor a command-line
	# override : "-Dsched_yield=sched_yield".
	# If we end up using sched_yield, we're going to need -lrt.
	sched_yield=${sched_yield:-yield}
	if test "$sched_yield" = "sched_yield"; then
	    set `echo X "$libswanted "| sed -e "s/ pthread / rt pthread /"`
	    shift
	    libswanted="$*"
	fi

	# On Solaris 2.6 x86 there is a bug with sigsetjmp() and siglongjmp()
	# when linked with the threads library, such that whatever positive
	# value you pass to siglongjmp(), sigsetjmp() returns 1.
	# Thanks to Simon Parsons <S.Parsons@@ftel.co.uk> for this report.
	# Sun BugID is 4117946, "sigsetjmp always returns 1 when called by
	# siglongjmp in a MT program". As of 19980622, there is no patch
	# available.
	cat >try.c <<'EOM'
	/* Test for sig(set|long)jmp bug. */
	#include <setjmp.h>

	int main()
	{
	    sigjmp_buf env;
	    int ret;

	    ret = sigsetjmp(env, 1);
	    if (ret) { return ret == 2; }
	    siglongjmp(env, 2);
	}
EOM
	if test "`arch`" = i86pc -a `uname -r` = 5.6 && \
	   ${cc:-cc} try.c -lpthread >/dev/null 2>&1 && ./a.out; then
	    d_sigsetjmp=$undef
	fi

	# These prototypes should be visible since we using
	# -D_REENTRANT, but that does not seem to work.
	# It does seem to work for getnetbyaddr_r, weirdly enough,
	# and other _r functions. (Solaris 8)

	d_ctermid_r_proto="$define"
	d_gethostbyaddr_r_proto="$define"
	d_gethostbyname_r_proto="$define"
	d_getnetbyname_r_proto="$define"
	d_getprotobyname_r_proto="$define"
	d_getprotobynumber_r_proto="$define"
	d_getservbyname_r_proto="$define"
	d_getservbyport_r_proto="$define"

	# Ditto. (Solaris 7)
	d_readdir_r_proto="$define"
	d_readdir64_r_proto="$define"
	d_tmpnam_r_proto="$define"
	d_ttyname_r_proto="$define"

	;;
esac
EOCBU

cat > UU/uselargefiles.cbu <<'EOCBU'
# This script UU/uselargefiles.cbu will get 'called-back' by Configure
# after it has prompted the user for whether to use large files.
case "$uselargefiles" in
''|$define|true|[yY]*)

# Keep these in the left margin.
ccflags_uselargefiles="`$run getconf LFS_CFLAGS 2>/dev/null`"
ldflags_uselargefiles="`$run getconf LFS_LDFLAGS 2>/dev/null`"
libswanted_uselargefiles="`$run getconf LFS_LIBS 2>/dev/null|sed -e 's@@^-l@@@@' -e 's@@ -l@@ @@g'`"

    ccflags="$ccflags $ccflags_uselargefiles"
    ldflags="$ldflags $ldflags_uselargefiles"
    libswanted="$libswanted $libswanted_uselargefiles"
    ;;
esac
EOCBU

# This is truly a mess.
case "$usemorebits" in
"$define"|true|[yY]*)
	use64bitint="$define"
	uselongdouble="$define"
	;;
esac

if test `$run uname -p` = i386; then
    case "$use64bitint" in
    "$define"|true|[yY]*)
            ccflags="$ccflags -DPTR_IS_LONG"
            ;;
    esac
fi

if test `$run uname -p` = sparc -o `$run uname -p` = i386; then
    cat > UU/use64bitint.cbu <<'EOCBU'
# This script UU/use64bitint.cbu will get 'called-back' by Configure
# after it has prompted the user for whether to use 64 bit integers.
case "$use64bitint" in
"$define"|true|[yY]*)
	    case "`$run uname -r`" in
	    5.[0-4])
		cat >&4 <<EOM
Solaris `uname -r|sed -e 's/^5\./2./'` does not support 64-bit integers.
You should upgrade to at least Solaris 2.5.
EOM
		exit 1
		;;
	    esac

# gcc-2.8.1 on Solaris 8 with -Duse64bitint fails op/pat.t test 822
# if we compile regexec.c with -O.  Turn off optimization for that one
# file.  See hints/README.hints , especially
# =head2 Propagating variables to config.sh, method 3.
#  A. Dougherty  May 24, 2002
    case "${gccversion}-${optimize}" in
    2.8*-O*)
	# Honor a command-line override (rather unlikely)
	case "$regexec_cflags" in
	'') echo "Disabling optimization on regexec.c for gcc $gccversion" >&4
	    regexec_cflags='optimize='
	    echo "regexec_cflags='optimize=\"\"'" >> config.sh
	    ;;
	esac
	;;
    esac
    ;;
esac
EOCBU

    cat > UU/use64bitall.cbu <<'EOCBU'
# This script UU/use64bitall.cbu will get 'called-back' by Configure
# after it has prompted the user for whether to be maximally 64 bitty.
case "$use64bitall-$use64bitall_done" in
"$define-"|true-|[yY]*-)
	    case "`$run uname -r`" in
	    5.[0-6])
		cat >&4 <<EOM
Solaris `uname -r|sed -e 's/^5\./2./'` does not support 64-bit pointers.
You should upgrade to at least Solaris 2.7.
EOM
		exit 1
		;;
	    esac
	    processor=`$run uname -p`;
	    if test "$processor" = sparc; then
		libc='/usr/lib/sparcv9/libc.so'
		if test ! -f $libc; then
		    cat >&4 <<EOM

I do not see the 64-bit libc, $libc.
Cannot continue, aborting.

EOM
		    exit 1
		fi
	    fi
	    case "${cc:-cc} -v 2>/dev/null" in
	    *gcc*)
		echo 'int main() { return 0; }' > try.c
		case "`${cc:-cc} $ccflags -mcpu=v9 -m64 -S try.c 2>&1 | grep 'm64 is not supported by this configuration'`" in
		*"m64 is not supported"*)
		    cat >&4 <<EOM

Full 64-bit build is not supported by this gcc configuration.
Check http://gcc.gnu.org/ for the latest news of availability
of gcc for 64-bit Sparc.

Cannot continue, aborting.

EOM
		    exit 1
		    ;;
		esac
		if test "$processor" = sparc; then
		    loclibpth="/usr/lib/sparcv9 $loclibpth"
		    ccflags="$ccflags -mcpu=v9"
		fi
		ccflags="$ccflags -m64"

		# This adds in -Wa,-xarch=v9.  I suspect that's superfluous,
		# since the -m64 above should do that already.  Someone
		# with gcc-3.x.x, please test with gcc -v.   A.D. 20-Nov-2003
#		if test $processor = sparc -a X`$run getconf XBS5_LP64_OFF64_CFLAGS 2>/dev/null` != X; then
#		    ccflags="$ccflags -Wa,`$run getconf XBS5_LP64_OFF64_CFLAGS 2>/dev/null`"
#		fi
		ldflags="$ldflags -m64"

		# See [perl #66604]:  On Solaris 11, gcc -m64 on amd64
		# appears not to understand -G.  (gcc -G has not caused
		# problems on other platforms in the past.)  gcc versions
		# at least as old as 3.4.3 support -shared, so just
		# use that with Solaris 11 and later, but keep
		# the old behavior for older Solaris versions.
		case "$osvers" in
			2.?|2.10) lddlflags="$lddlflags -G -m64" ;;
			*) lddlflags="$lddlflags -shared -m64" ;;
		esac
		;;
	    *)
		getconfccflags="`$run getconf XBS5_LP64_OFF64_CFLAGS 2>/dev/null`"
		getconfldflags="`$run getconf XBS5_LP64_OFF64_LDFLAGS 2>/dev/null`"
		getconflddlflags="`$run getconf XBS5_LP64_OFF64_LDFLAGS 2>/dev/null`"
		echo "int main() { return(0); } " > try.c
		case "`${cc:-cc} $getconfccflags try.c 2>&1 | grep 'deprecated'`" in
		*" -xarch=generic64 is deprecated, use -m64 "*)
		    getconfccflags=`echo $getconfccflags | sed -e 's/xarch=generic64/m64/'`
		    getconfldflags=`echo $getconfldflags | sed -e 's/xarch=generic64/m64/'`
		    getconflddlflags=`echo $getconflddlflags | sed -e 's/xarch=generic64/m64/'`
		    ;;
		esac
		ccflags="$ccflags $getconfccflags"
		ldflags="$ldflags $getconfldflags"
		lddlflags="$lddlflags -G $getconflddlflags"

		echo "int main() { return(0); } " > try.c
		tryworkshopcc="${cc:-cc} try.c -o try $ccflags"
		if test "$processor" = sparc; then
		    loclibpth="/usr/lib/sparcv9 /usr/ccs/lib/sparcv9 $loclibpth"
		fi
		loclibpth="`$getworkshoplibs` $loclibpth"
		;;
	    esac
	    unset processor
	    use64bitall_done=yes
	    archname64=64
	    ;;
esac
EOCBU

    # Actually, we want to run this already now, if so requested,
    # because we need to fix up things right now.
    case "$use64bitall" in
    "$define"|true|[yY]*)
	# CBUs expect to be run in UU
	cd UU; . ./use64bitall.cbu; cd ..
	;;
    esac
fi

cat > UU/uselongdouble.cbu <<'EOCBU'
# This script UU/uselongdouble.cbu will get 'called-back' by Configure
# after it has prompted the user for whether to use long doubles.
case "$uselongdouble" in
"$define"|true|[yY]*)
	if test "$cc_name" = "workshop"; then
		cat > try.c << 'EOM'
#include <sunmath.h>
int main() { (void) powl(2, 256); return(0); }
EOM
		if ${cc:-cc} try.c -lsunmath -o try > /dev/null 2>&1 && ./try; then
			libswanted="$libswanted sunmath"
		fi
	else
		cat >&4 <<EOM

The Sun Workshop math library is either not available or not working,
so I do not know how to do long doubles, sorry.
I'm therefore disabling the use of long doubles.
EOM
		uselongdouble="$undef"
	fi
	;;
esac
EOCBU

#
# If unsetenv is available, use it in conjunction with PERL_USE_SAFE_PUTENV to
# work around Sun bugid 6333830.  Both unsetenv and 6333830 only appear in
# Solaris 10, so we don't need to probe explicitly for an OS version.  We have
# to append this test to the end of config.over as it needs to run after
# Configure has probed for unsetenv, and this hints file is processed before
# that has happened.
#
cat >> config.over <<'EOOVER'
if test "$d_unsetenv" = "$define" -a \
    `expr "$ccflags" : '.*-DPERL_USE_SAFE_PUTENV'` -eq 0; then
        ccflags="$ccflags -DPERL_USE_SAFE_PUTENV"
fi
EOOVER

rm -f try.c try.o try a.out

# If using C++, the Configure scan for dlopen() will fail in Solaris
# because one of the two (1) an extern "C" linkage definition is needed
# (2) #include <dlfcn.h> is needed, *and* a cast to (void*(*)())
# is needed for the &dlopen.  Adding any of these would require changing
# a delicate spot in Configure, so easier just to force our guess here
# for Solaris.  Much the same goes for dlerror().
case "$cc" in
*g++*|*CC*)
  d_dlopen='define'
  d_dlerror='define'
  ;;
esac

# Oracle/Sun builds their Perl shared since 5.6.1, and they also
# strongly recommend using shared libraries in general.
#
# Furthermore, OpenIndiana seems to effectively require building perl
# shared, or otherwise perl scripts won't even find the Perl library.
useshrplib='true'
@


1.15
log
@Fix merge conflicts, remove extra files, match upstream perl-5.20.1

ok deraadt@@ sthen@@ espie@@ miod@@
@
text
@d93 1
a93 1
'')    for i in `ls -r /opt/solstudio*/bin/cc` /opt/SUNWspro/bin/cc
d726 6
@


1.14
log
@Merge perl-5.18.2 plus local patches, remove old files

OK espie@@ sthen@@ deraadt@@
@
text
@d51 1
a51 1
case "`uname -r`" in
d93 5
a97 3
'')	if test -f /opt/SUNWspro/bin/cc; then
		cc=/opt/SUNWspro/bin/cc
		cat <<EOF >&4
d105 3
a107 1
	fi
d136 1
a136 1
mount | grep '^/dev/fd ' 2>&1 > /dev/null
d153 11
a163 2
/usr/bin/ls /usr/lib/libucb* >/dev/null 2>&1
case $? in
d189 1
a189 1
    case "`/usr/bin/ls -lL $tmp`" in
d236 1
a236 1
	verbose=`${cc:-cc} -v -o try try.c 2>&1`
d259 1
a259 1
	    # cc="${cc:-cc} -B/usr/ccs/bin/"
d264 1
a264 1
	verbose=`${cc:-cc} -v -o try try.c 2>&1 | grep ld 2>&1`
d287 1
a287 1
	    verbose=`${cc:-cc} -Wl,-v -o try try.c 2>&1 | grep /ld 2>&1`
d339 1
a339 1
	tryworkshopcc="${cc:-cc} try.c -o try"
d341 1
a341 1
		cc_name=`./try`
d343 1
a343 1
			ccversion="`${cc:-cc} -V 2>&1|sed -n -e '1s/^[Cc][Cc]: //p'`"
d362 13
d497 3
a499 3
ccflags_uselargefiles="`getconf LFS_CFLAGS 2>/dev/null`"
ldflags_uselargefiles="`getconf LFS_LDFLAGS 2>/dev/null`"
libswanted_uselargefiles="`getconf LFS_LIBS 2>/dev/null|sed -e 's@@^-l@@@@' -e 's@@ -l@@ @@g'`"
d516 1
a516 1
if test `uname -p` = i386; then
d524 1
a524 1
if test `uname -p` = sparc -o `uname -p` = i386; then
d530 1
a530 1
	    case "`uname -r`" in
d565 1
a565 1
	    case "`uname -r`" in
d574 1
a574 1
	    processor=`uname -p`;
d590 1
a590 1
		case "`${cc:-cc} -mcpu=v9 -m64 -S try.c 2>&1 | grep 'm64 is not supported by this configuration'`" in
d613 2
a614 2
#		if test $processor = sparc -a X`getconf XBS5_LP64_OFF64_CFLAGS 2>/dev/null` != X; then
#		    ccflags="$ccflags -Wa,`getconf XBS5_LP64_OFF64_CFLAGS 2>/dev/null`"
d630 3
a632 3
		getconfccflags="`getconf XBS5_LP64_OFF64_CFLAGS 2>/dev/null`"
		getconfldflags="`getconf XBS5_LP64_OFF64_LDFLAGS 2>/dev/null`"
		getconflddlflags="`getconf XBS5_LP64_OFF64_LDFLAGS 2>/dev/null`"
d706 1
a706 1
    `expr "$ccflags" : '.*-D_PERL_USE_SAFE_PUTENV'` -eq 0; then
@


1.13
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@d303 1
a303 1
		lddlflags="$lddlflags -Wl,-E -G"
d330 1
a330 12
			ccversion="`${cc:-cc} -V 2>&1|sed -n -e '1s/^cc: //ip'`"
			if test ! "$use64bitall_done"; then
				loclibpth="/usr/lib /usr/ccs/lib `$getworkshoplibs` $loclibpth"
			fi
			# Sun cc doesn't support gcc attributes
			d_attribute_format='undef'
			d_attribute_malloc='undef'
			d_attribute_nonnull='undef'
			d_attribute_noreturn='undef'
			d_attribute_pure='undef'
			d_attribute_unused='undef'
			d_attribute_warn_unused_result='undef'
d333 5
a337 1
			ccversion="`${cc:-CC} -V 2>&1|sed -n -e '1s/^CC: //ip'`"
d341 1
a341 1
			# Sun CC doesn't support gcc attributes
d349 2
a350 1
		fi
d591 11
a601 1
		lddlflags="$lddlflags -G -m64"
@


1.12
log
@Merge in perl 5.10.1
@
text
@d314 1
a314 1
#ifdef __SUNPRO_C
d317 3
d322 1
d330 1
a330 1
			ccversion="`${cc:-cc} -V 2>&1|sed -n -e '1s/^cc: //p'`"
d334 22
d600 15
a614 3
		ccflags="$ccflags `getconf XBS5_LP64_OFF64_CFLAGS 2>/dev/null`"
		ldflags="$ldflags `getconf XBS5_LP64_OFF64_LDFLAGS 2>/dev/null`"
		lddlflags="$lddlflags -G `getconf XBS5_LP64_OFF64_LDFLAGS 2>/dev/null`"
@


1.11
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@d453 1
a453 1
libswanted_uselargefiles="`getconf LFS_LIBS 2>/dev/null|sed -e 's@@^-l@@@@' -e 's@@ -l@@ @@g`"
@


1.10
log
@merge in perl 5.8.8
@
text
@d45 11
d95 1
a95 1
		cat <<EOF >&4	
d167 1
a167 1
# 	cc is /usr/ucb/cc
d211 1
a211 1
#  		sh Configure -Dcc='gcc -B/usr/ccs/bin/'
d281 1
a281 1
	    # Allow that $myld may be '', due to changes in gcc's output 
a417 7
	    cat << 'EOM' >&2

You will see a *** WHOA THERE!!! ***  message from Configure for
d_sigsetjmp.  Keep the recommended value.  See hints/solaris_2.sh
for more information.

EOM
d470 8
d496 1
a496 1
# file.  See hints/README.hints , especially 
d505 1
a505 1
	    echo "regexec_cflags='optimize=\"\"'" >> config.sh 
d561 1
a561 1
		fi 
d563 7
a569 6
		if test $processor = sparc -a X`getconf XBS5_LP64_OFF64_CFLAGS 2>/dev/null` != X; then
		    # This adds in -Wa,-xarch=v9.  I suspect that's superfluous,
		    # since the -m64 above should do that already.  Someone
		    # with gcc-3.x.x, please test with gcc -v.   A.D. 20-Nov-2003
		    ccflags="$ccflags -Wa,`getconf XBS5_LP64_OFF64_CFLAGS 2>/dev/null`"
		fi
d644 14
@


1.9
log
@merge 5.8.5 into HEAD
remove now-unused files
crank libperl shared library major number
update Makefile.bsd-wrapper
tweak openbsd hints file for arm and m68k
@
text
@d59 2
a60 2
        archname=`/usr/bin/arch`
    	archname="${archname}-${osname}"
d62 2
a63 2
        archname=`/usr/ucb/arch`
    	archname="${archname}-${osname}"
d214 4
a217 1
if echo "$verbose" | grep '^Reading specs from' >/dev/null 2>&1; then
d263 1
a263 1
	    verbose=`${cc:-cc} -v -Wl,-v -o try try.c 2>&1 | grep ld 2>&1`
d265 1
a265 1
	    myld=`echo $verbose| grep ld | awk '/\/ld/ {print $1}'`
d362 1
a362 1
        ccflags="-D_REENTRANT $ccflags"
d365 3
a367 3
        set `echo X "$libswanted "| sed -e "s/ c / pthread c /"`
        shift
        libswanted="$*"
d383 8
a390 8
        # On Solaris 2.6 x86 there is a bug with sigsetjmp() and siglongjmp()
        # when linked with the threads library, such that whatever positive
        # value you pass to siglongjmp(), sigsetjmp() returns 1.
        # Thanks to Simon Parsons <S.Parsons@@ftel.co.uk> for this report.
        # Sun BugID is 4117946, "sigsetjmp always returns 1 when called by
        # siglongjmp in a MT program". As of 19980622, there is no patch
        # available.
        cat >try.c <<'EOM'
d404 3
a406 3
        if test "`arch`" = i86pc -a `uname -r` = 5.6 && \
           ${cc:-cc} try.c -lpthread >/dev/null 2>&1 && ./a.out; then
 	    d_sigsetjmp=$undef
d414 1
a414 1
        fi
d466 1
a466 1
if test `uname -p` = "sparc"; then
d516 5
a520 3
	    libc='/usr/lib/sparcv9/libc.so'
	    if test ! -f $libc; then
		cat >&4 <<EOM
d526 2
a527 1
		exit 1
d546 6
a551 3
	        loclibpth="/usr/lib/sparcv9 $loclibpth"
		ccflags="$ccflags -mcpu=v9 -m64"
		if test X`getconf XBS5_LP64_OFF64_CFLAGS 2>/dev/null` != X; then
d566 4
a569 1
		loclibpth="/usr/lib/sparcv9 /usr/ccs/lib/sparcv9 `$getworkshoplibs` $loclibpth"
d572 1
a572 1

d614 15
@


1.8
log
@merge local changes into perl-5.8.3
@
text
@d35 5
d246 1
a246 1
	    # All Solaris versions of ld I've seen contain the magic
d249 4
d272 4
d361 1
a361 1
	sched_yield='yield'
d365 14
@


1.7
log
@Resolve conflicts for perl 5.8.2, remove old files, and add OpenBSD-specific scaffolding
@
text
@d451 1
a451 2
	    ;;
esac
a456 2
case "$use64bitint" in
"$define")
d516 3
d521 2
a522 6
		# no changes to ld flags, as (according to man ld):
		#
   		# There is no specific option that tells ld to link 64-bit
		# objects; the class of the first object that gets processed
		# by ld determines whether it is to perform a 32-bit or a
		# 64-bit link edit.
@


1.6
log
@Resolve conflicts, remove old files, merge local changes
@
text
@d2 3
a4 8
# Last modified: Mon Jan 29 12:52:28 2001
# Lupe Christoph <lupe@@lupe-christoph.de>
# Based on version by:
# Andy Dougherty  <doughera@@lafayette.edu>
# Which was based on input from lots of folks, especially
# Dean Roehrich <roehrich@@ironwood-fddi.cray.com>
# Additional input from Alan Burlison, Jarkko Hietaniemi,
# and Richard Soderberg.
a22 3
# See man vfork.
usevfork=${usevfork:-false}

d26 3
d63 12
a74 28
cat > UU/workshoplibpth.cbu << 'EOCBU'
# This script UU/workshoplibpth.cbu will get 'called-back'
# by other CBUs this script creates.
case "$workshoplibpth_done" in
    '')	if test `uname -p` = "sparc"; then
	case "$use64bitall" in
	    "$define"|true|[yY]*)
		# add SPARC-specific 64 bit libraries
		loclibpth="$loclibpth /usr/lib/sparcv9"
		if test -n "$workshoplibs"; then
		    loclibpth=`echo $loclibpth | sed -e "s% $workshoplibs%%" `
		    for lib in $workshoplibs; do
			# Logically, it should be sparcv9.
			# But the reality fights back, it's v9.
			loclibpth="$loclibpth $lib/sparcv9 $lib/v9"
		    done
		fi
	    ;;
	*)  loclibpth="$loclibpth $workshoplibs"
	    ;;
	esac
	else
	    loclibpth="$loclibpth $workshoplibs"
	fi
	workshoplibpth_done="$define"
	;;
esac
EOCBU
d116 1
a116 1
df /dev/fd 2>&1 > /dev/null
d205 1
a205 1
echo 'main() { return 0; }' > try.c
d213 1
d284 10
a293 12

	ccversion="`${cc:-cc} -V 2>&1|sed -n -e '1s/^cc: //p'`"
	case "$ccversion" in
	*WorkShop*) ccname=workshop ;;
	*) ccversion='' ;;
	esac

	case "$ccname" in
	workshop)
		cat >try.c <<EOM
#include <sunmath.h>
int main() { return(0); }
d295 10
a304 4
		workshoplibs=`cc -### try.c -lsunmath -o try 2>&1|sed -n '/ -Y /s%.* -Y "P,\(.*\)".*%\1%p'|tr ':' '\n'|grep '/SUNWspro/'`
		. ./workshoplibpth.cbu
	;;
	esac
a334 1

d338 1
a338 4
rm -f try try.c
rm -f core

# XXX
d348 2
a349 6
        # sched_yield is in -lposix4 up to Solaris 2.6, in -lrt starting with Solaris 2.7
	case `uname -r` in
	5.[0-6] | 5.5.1) sched_yield_lib="posix4" ;;
	*) sched_yield_lib="rt";
	esac
        set `echo X "$libswanted "| sed -e "s/ c / $sched_yield_lib pthread c /"`
d364 1
a364 1
	main()
d499 1
a499 2
	    . ./workshoplibpth.cbu
	    case "$cc -v 2>/dev/null" in
d501 1
a501 1
		echo 'main() { return 0; }' > try.c
d516 1
d532 3
a536 4
	    libscheck='case "`/usr/bin/file $xxx`" in
*64-bit*|*SPARCV9*) ;;
*) xxx=/no/64-bit$xxx ;;
esac'
d539 1
d559 8
a566 7
	if test -f /opt/SUNWspro/lib/libsunmath.so; then
		# Unfortunately libpth has already been set and
		# searched, so we need to add in everything manually.
		libpth="$libpth /opt/SUNWspro/lib"
		libs="$libs -lsunmath"
		ldflags="$ldflags -L/opt/SUNWspro/lib -R/opt/SUNWspro/lib"
		d_sqrtl=define
d570 3
a572 3
The Sun Workshop math library is not installed; therefore I do not
know how to do long doubles, sorry.  I'm disabling the use of long
doubles.
@


1.5
log
@merge in perl 5.6.1 with our local changes
@
text
@d2 1
a2 1
# Last modified: Tue Jan  2 10:16:35 2001
d29 1
a29 1
usevfork=false
d31 8
a38 1
d_suidsafe=define
d97 15
d137 1
a137 1
/usr/bin/df /dev/fd 2>&1 > /dev/null
d270 3
d276 1
a276 1
	    # Thus myld is something like opt/gnu/sparc-sun-solaris2.5/bin/ld
d278 3
a280 1
	    if $myld -V 2>&1 | grep "ld: Software Generation Utilities" >/dev/null 2>&1; then
d284 1
d296 1
a296 1
		lddlflags="$lddlflags -W,l-E -G"
d409 21
d477 20
d584 3
@


1.4
log
@perl-5.6.0 + local changes
@
text
@d2 3
a4 1
# Last modified:  Tue Apr 13 13:12:49 EDT 1999
d6 1
a6 1
# Based on input from lots of folks, especially
d8 9
d21 1
a21 1
# 
d27 1
a27 1
 
d34 2
a35 1
set `echo $glibpth | sed -e 's@@/usr/ucblib@@@@'`
d38 3
a40 2
# Remove bad libraries.  -lucb contains incompatible routines.
# -lld doesn't do anything useful.
d45 1
a45 1
set `echo " $libswanted " | sed -e 's@@ ld @@ @@' -e 's@@ malloc @@ @@' -e 's@@ ucb @@ @@'`
d61 3
a63 4
test -z "`${cc:-cc} -V 2>&1|grep -i workshop`" || ccisworkshop="$define"
test -z "`${cc:-cc} -v 2>&1|grep -i gcc`"      || ccisgcc="$define"

cat >UU/workshoplibpth.cbu<<'EOCBU'
d65 13
a77 11
'')	case "$use64bitall" in
	"$define"|true|[yY]*)
            loclibpth="$loclibpth /usr/lib/sparcv9"
            if test -n "$workshoplibs"; then
                loclibpth=`echo $loclibpth | sed -e "s% $workshoplibs%%" `
                for lib in $workshoplibs; do
                    # Logically, it should be sparcv9.
                    # But the reality fights back, it's v9.
                    loclibpth="$loclibpth $lib/sparcv9 $lib/v9"
                done
            fi 
d79 1
a79 1
	*)  loclibpth="$loclibpth $workshoplibs"  
d82 3
a89 11
case "$ccisworkshop" in
"$define")
	cat >try.c <<EOF
#include <sunmath.h>
int main() { return(0); }
EOF
	workshoplibs=`cc -### try.c -lsunmath -o try 2>&1|grep " -Y "|sed 's%.* -Y "P,\(.*\)".*%\1%'|tr ':' '\n'|grep '/SUNWspro/'`
	. ./UU/workshoplibpth.cbu
	;;
esac

d99 1
a99 1
# Here's another draft of the perl5/solaris/gcc sanity-checker. 
d104 1
a104 1
NOTE:  Some people have reported problems with /usr/ucb/cc.  
d162 1
a162 1
	
d174 4
a177 4
# XXX EXPERIMENTAL  A.D.  2/27/1998
# XXX This script UU/cc.cbu will get 'called-back' by Configure after it
# XXX has prompted the user for the C compiler to use.
cat > UU/cc.cbu <<'EOSH'
d183 2
d190 1
a190 1
# Perl compiled with some combinations of GNU as and ld may not 
d195 1
a195 1
# (note the trailing slash is required). 
d200 1
a200 1
#	--Andy Dougherty  <doughera@@lafayette.edu>  
a212 6
	tmp=`echo "$verbose" | grep '^Reading' |
		awk '{print $NF}'  | sed 's/specs$/include/'`

	# Determine if the fixed-includes look like they'll work.
	# Doesn't work anymore for gcc-2.7.2.

d277 17
d310 4
a313 7
	gnu_ld=false
	case `ld --version < /dev/null 2>&1` in
	*GNU*|ld\ version\ 2*)
		gnu_ld=true ;;
	*) ;;
	esac
	if $gnu_ld ; then :
d315 1
a315 8
		# Try to guess from path
		case `type ld | awk '{print $NF}'` in
		*gnu*|*GNU*|*FSF*)
			gnu_ld=true ;;
		esac
	fi
	if $gnu_ld ; then
		cat <<END >&2
d331 1
a331 1
EOSH
d334 1
a334 1
# This script UU/usethreads.cbu will get 'called-back' by Configure 
d340 6
a345 2
        # sched_yield is in -lposix4
        set `echo X "$libswanted "| sed -e 's/ c / posix4 pthread c /'`
d359 1
a359 1
	 
d364 1
a364 1
	
d370 1
a370 1
        if test "`arch`" = i86pc -a "$osvers" = 2.6 && \
d386 1
a386 1
# This script UU/uselargefiles.cbu will get 'called-back' by Configure 
d390 9
a398 3
    ccflags="$ccflags `getconf LFS_CFLAGS 2>/dev/null`"
    ldflags="$ldflags `getconf LFS_LDFLAGS 2>/dev/null`"
    libswanted="$libswanted `getconf LFS_LIBS 2>/dev/null|sed -e 's@@^-l@@@@' -e 's@@ -l@@ @@g`"
d403 11
a413 2
cat > UU/use64bitint.cbu <<'EOCBU'
# This script UU/use64bitint.cbu will get 'called-back' by Configure 
d418 1
a418 1
	    2.[1-6])
d420 2
a421 2
Solaris `uname -r` does not support 64-bit integers.
You should upgrade to at least Solaris 2.7.
d430 2
a431 2
cat > UU/use64bitall.cbu <<'EOCBU'
# This script UU/use64bitall.cbu will get 'called-back' by Configure 
d435 9
d453 2
a454 2
	    fi 
	    . ./UU/workshoplibpth.cbu
d458 2
a459 2
		if ${cc:-cc} -mcpu=v9 -m64 -S try.c 2>&1 | grep -e \
		    '-m64 is not supported by this configuration'; then
d462 4
a465 1
Full 64-bit build not supported by this configuration.
d470 2
a471 1
		fi
d488 1
a488 1
	    esac	
d493 1
d498 7
a504 6
 
# Actually, we want to run this already now, if so requested,
# because we need to fix up things right now.
case "$use64bitall" in
"$define"|true|[yY]*)
	. ./UU/use64bitall.cbu
d506 2
a507 1
esac
d510 1
a510 1
# This script UU/uselongdouble.cbu will get 'called-back' by Configure 
d512 8
a519 4
case "$uselongdouble-$uselongdouble_done" in
"$define-"|true-|[yY]*-)
	case "$ccisworkshop" in
	'')	cat >&4 <<EOM
d521 3
a523 3
I do not see the Sun Workshop compiler; therefore I do not see
the libsunmath; therefore I do not know how to do long doubles, sorry.
I'm disabling the use of long doubles.
d526 1
a526 6
		;;
	*)	libswanted="$libswanted sunmath"
		loclibpth="$loclibpth /opt/SUNWspro/lib"
		;;
	esac
	uselongdouble_done=yes
d531 1
a531 192
# Actually, we want to run this already now, if so requested,
# because we need to fix up things right now.
case "$uselongdouble" in
"$define"|true|[yY]*)
	. ./UU/uselongdouble.cbu
	;;
esac

rm -f try.c try.o try
# keep that leading tab
	ccisworkshop=''
	ccisgcc=''

# This is just a trick to include some useful notes.
cat > /dev/null <<'End_of_Solaris_Notes'

Here are some notes kindly contributed by Dean Roehrich.

-----
Generic notes about building Perl5 on Solaris:
- Use /usr/ccs/bin/make.
- If you use GNU make, remove its setgid bit.
- Remove all instances of *ucb* from your path.
- Make sure libucb is not in /usr/lib (it should be in /usr/ucblib).
- Do not use GNU as or GNU ld, or any of GNU binutils or GNU libc.
- Do not use /usr/ucb/cc.
- Do not change Configure's default answers, except for the path names.
- Do not use -lmalloc.
- Do not build on SunOS 4 and expect it to work properly on SunOS 5.
- /dev/fd must be mounted if you want set-uid scripts to work.


Here are the gcc-related questions and answers from the Solaris 2 FAQ.  Note
the themes:
	- run fixincludes
	- run fixincludes correctly
	- don't use GNU as or GNU ld

Question 5.7 covers the __builtin_va_alist problem people are always seeing.
Question 6.1.3 covers the GNU as and GNU ld issues which are always biting
people.
Question 6.9 is for those who are still trying to compile Perl4.

The latest Solaris 2 FAQ can be found in the following locations:
	rtfm.mit.edu:/pub/usenet-by-group/comp.sys.sun.admin
	ftp.fwi.uva.nl:/pub/solaris

Perl5 comes with a script in the top-level directory called "myconfig" which
will print a summary of the configuration in your config.sh.  My summary for
Solaris 2.4 and gcc 2.6.3 follows.  I have also built with gcc 2.7.0 and the
results are identical.  This configuration was generated with Configure's -d
option (take all defaults, don't bother prompting me).  All tests pass for
Perl5.001, patch.1m.

Summary of my perl5 (patchlevel 1) configuration:
  Platform:
    osname=solaris, osver=2.4, archname=sun4-solaris
    uname='sunos poplar 5.4 generic_101945-27 sun4d sparc '
    hint=recommended
  Compiler:
    cc='gcc', optimize='-O', ld='gcc'
    cppflags=''
    ccflags =''
    ldflags =''
    stdchar='unsigned char', d_stdstdio=define, usevfork=false
    voidflags=15, castflags=0, d_casti32=define, d_castneg=define
    intsize=4, alignbytes=8, usemymalloc=y, randbits=15
  Libraries:
    so=so
    libpth=/lib /usr/lib /usr/ccs/lib /usr/local/lib
    libs=-lsocket -lnsl -ldl -lm -lc -lcrypt
    libc=/usr/lib/libc.so
  Dynamic Linking:
    dlsrc=dl_dlopen.xs, dlext=so, d_dlsymun=undef
    cccdlflags='-fpic', ccdlflags=' ', lddlflags='-G'


Dean
roehrich@@cray.com
9/7/95

-----------

From: Casper.Dik@@Holland.Sun.COM (Casper H.S. Dik - Network Security Engineer)
Subject: Solaris 2 Frequently Asked Questions (FAQ) 1.48
Date: 25 Jul 1995 12:20:18 GMT

5.7) Why do I get __builtin_va_alist or __builtin_va_arg_incr undefined?

    You're using gcc without properly installing the gcc fixed
    include files.  Or you ran fixincludes after installing gcc
    w/o moving the gcc supplied varargs.h and stdarg.h files
    out of the way and moving them back again later.  This often
    happens when people install gcc from a binary distribution.
    If there's a tmp directory in gcc's include directory, fixincludes
    didn't complete.  You should have run "just-fixinc" instead.

    Another possible cause is using ``gcc -I/usr/include.''

6.1) Where is the C compiler or where can I get one?

    [...]

    3) Gcc.

    Gcc is available from the GNU archives in source and binary
    form.  Look in a directory called sparc-sun-solaris2 for
    binaries.  You need gcc 2.3.3 or later.  You should not use
    GNU as or GNU ld.  Make sure you run just-fixinc if you use
    a binary distribution.  Better is to get a binary version and
    use that to bootstrap gcc from source.

    [...]

    When you install gcc, don't make the mistake of installing
    GNU binutils or GNU libc, they are not as capable as their
    counterparts you get with Solaris 2.x.

6.9) I can't get perl 4.036 to compile or run.

    Run Configure, and use the solaris_2_0 hints, *don't* use
    the solaris_2_1 hints and don't use the config.sh you may
    already have.  First you must make sure Configure and make
    don't find /usr/ucb/cc.  (It must use gcc or the native C
    compiler: /opt/SUNWspro/bin/cc)

    Some questions need a special answer.

    Are your system (especially dbm) libraries compiled with gcc? [y] y

    yes: gcc 2.3.3 or later uses the standard calling
    conventions, same as Sun's C.

    Any additional cc flags? [ -traditional -Dvolatile=__volatile__
    -I/usr/ucbinclude] -traditional -Dvolatile=__volatile__
    Remove /usr/ucbinclude.

    Any additional libraries? [-lsocket -lnsl -ldbm -lmalloc -lm
    -lucb] -lsocket -lnsl  -lm

    Don't include -ldbm, -lmalloc and -lucb.

    Perl 5 compiled out of the box.

7.0) 64-bitness, from Alan Burlison (added by jhi 2000-02-21)

  You need a machine running Solaris 2.7 or above.

  Here's some rules:
  
  1. Solaris 2.7 and above will run in either 32 bit or 64 bit mode,
     via a reboot.
  2. You can build 64 bit apps whilst running 32 bit mode and vice-versa.
  3. 32 bit apps will run under Solaris running in either 32 or 64 bit mode.
  4. 64 bit apps require Solaris to be running 64 bit mode
  5. It is possible to select the appropriate 32 or 64 bit version of an
     app at run-time using isaexec(3).
  6. You can detect the OS mode using "isainfo -v", e.g.
      fubar$ isainfo -v   # Ultra 30 in 64 bit mode
      64-bit sparcv9 applications
      32-bit sparc applications
  7. To compile 64 bit you need to use the flag "-xarch=v9".
     getconf(1) will tell you this, e.g.
      fubar$ getconf -a | grep v9
      XBS5_LP64_OFF64_CFLAGS:         -xarch=v9
      XBS5_LP64_OFF64_LDFLAGS:        -xarch=v9
      XBS5_LP64_OFF64_LINTFLAGS:      -xarch=v9
      XBS5_LPBIG_OFFBIG_CFLAGS:       -xarch=v9
      XBS5_LPBIG_OFFBIG_LDFLAGS:      -xarch=v9
      XBS5_LPBIG_OFFBIG_LINTFLAGS:    -xarch=v9
      _XBS5_LP64_OFF64_CFLAGS:        -xarch=v9
      _XBS5_LP64_OFF64_LDFLAGS:       -xarch=v9
      _XBS5_LP64_OFF64_LINTFLAGS:     -xarch=v9
      _XBS5_LPBIG_OFFBIG_CFLAGS:      -xarch=v9
      _XBS5_LPBIG_OFFBIG_LDFLAGS:     -xarch=v9
      _XBS5_LPBIG_OFFBIG_LINTFLAGS:   -xarch=v9

  > > Now, what should we do, then?  Should -Duse64bits in a v9 box cause
  > > Perl to compiled in v9 mode?  Or should we for compatibility stick
  > > with 32 bit builds and let the people in the know to add the -xarch=v9
  > > to ccflags (and ldflags?)?

  > I think the second (explicit) mechanism should be the default.  Unless
  > you want to allocate more than ~ 4Gb of memory inside Perl, you don't
  > need Perl to be a 64-bit app.  Put it this way, on a machine running
  > Solaris 8, there are 463 executables under /usr/bin, but only 15 of
  > those require 64 bit versions - mainly because they invade the kernel
  > address space, e.g. adb, kgmon etc.  Certainly we don't recommend users
  > to build 64 bit apps unless they need the address space.

End_of_Solaris_Notes

@


1.3
log
@perl5.005_03 (stock)
@
text
@d2 2
a3 2
# Last modified:  Wed May 27 13:04:45 EDT 1998
# Andy Dougherty  <doughera@@lafcol.lafayette.edu>
d12 4
a15 1
# 
d48 36
d86 1
a86 1

d92 1
a92 1

d182 13
a203 1
	#echo Using gcc
d211 1
a211 1
	# See if as(1) is GNU as(1).  GNU as(1) won't work for this job.
d217 2
a218 2
NOTE: You are using GNU as(1).  GNU as(1) will not build Perl.
I'm arranging to use /usr/ccs/bin/as by including -B/usr/ccs/bin/
d222 2
a223 1
	    cc="${cc:-cc} -B/usr/ccs/bin/"
d226 1
a226 1
	# See if ld(1) is GNU ld(1).  GNU ld(1) won't work for this job.
d229 1
d231 8
d241 4
a244 3
        # It's not /usr/ccs/bin/ld - but it might be egcs's ld wrapper,
        # which calls /usr/ccs/bin/ld in turn. Passing -V to it will
        # make it show its true colors.
d247 9
a255 2
            # This assumes that gcc's output will not change, and that
            # /full/path/to/ld will be the first word of the output.
d257 3
a259 11
            # all Solaris versions of ld I've seen contain the magic
            # string used in the grep below.
            if $myld -V 2>&1 | grep "ld: Software Generation Utilities" >/dev/null 2>&1; then
                cat <<END >&2

Aha. You're using egcs and /usr/ccs/bin/ld.

END

            else
	    cat <<END >&2
d261 2
a262 3
NOTE: You are using GNU ld(1).  GNU ld(1) will not build Perl.
I'm arranging to use /usr/ccs/bin/ld by including -B/usr/ccs/bin/
in your ${cc:-cc} command.  (Note that the trailing "/" is required.)
d265 3
a267 2
	    cc="${cc:-cc} -B/usr/ccs/bin/"
            fi
a273 1
	#echo Not using gcc
d275 1
a275 1
	# See if as(1) is GNU as(1).  GNU as(1) won't work for this job.
d280 1
a280 1
NOTE: You are using GNU as(1).  GNU as(1) will not build Perl.
d288 1
a288 1
	# See if ld(1) is GNU ld(1).  GNU ld(1) won't work for this job.
d308 2
a309 2
NOTE: You are apparently using GNU ld(1).  GNU ld(1) will not build Perl.
You must arrange to use /usr/ccs/bin/ld, perhaps by adding /usr/ccs/bin
d324 1
a326 1
cat > UU/usethreads.cbu <<'EOCBU'
d372 129
d631 46
@


1.2
log
@perl 5.004_04
@
text
@d2 1
a2 1
# Last modified:  Thu Feb  8 11:38:12 EST 1996
d56 2
a57 2
case $PATH in
*/usr/ucb*:/usr/bin:*|*/usr/ucb*:/usr/bin) cat <<END >&4
d60 2
a61 1
Remove /usr/ucb from your PATH if you have difficulties.
d99 9
d113 2
a114 2
    tmp=`/usr/bin/which make`
    case "`/usr/bin/ls -l $tmp`" in
d129 4
d136 1
d139 1
d142 7
a148 2
case "`${cc:-cc} -v 2>&1`" in
*gcc*)
a153 4
	# Get gcc to share its secrets.
	echo 'main() { return 0; }' > try.c
	verbose=`${cc:-cc} -v -o try try.c 2>&1`
	rm -f try try.c
d161 3
a163 3
	case $verbose in
	*/usr/ccs/bin/as*) ;;
	*)
d167 2
a168 3
You must arrange to use /usr/ccs/bin/as, perhaps by setting
GCC_EXEC_PREFIX or by including -B/usr/ccs/bin/ in your cc command.
(Note that the trailing "/" is required.)
d171 2
a172 2
	;;
	esac
d175 23
a197 3
	case $verbose in
	*/usr/ccs/bin/ld*) ;;
	*)
d201 2
a202 2
You must arrange to use /usr/ccs/bin/ld, perhaps by setting
GCC_EXEC_PREFIX or by including -B/usr/ccs/bin/ in your cc command.
d205 3
a207 2
	;;
	esac
d209 1
a209 2
	;; #using gcc
*)
d221 2
a222 2
You must arrange to use /usr/ccs/bin, perhaps by adding it to the
beginning of your PATH.
d239 3
a241 4
		case `which ld` in
		no\ ld\ in*|[Cc]ommand\ not\ found*)
			;;
		/*gnu*/ld|/*GNU*/ld)
d248 3
a250 3
NOTE: You are using GNU ld(1).  GNU ld(1) will not build Perl.
You must arrange to use /usr/ccs/bin, perhaps by adding it to the
beginning of your PATH.
d255 1
a255 2
	;; #not using gcc
esac
d258 1
d260 51
@


1.1
log
@Initial revision
@
text
@d7 7
a44 11
# Solaris 2.5 has reintroduced some BSD-ish functions into libc.
# This is no problem unless you compile perl under Solaris 2.5 but
# try to run the binary on 2.4.  Here, we take the easy way out by
# claiming we don't have these functions.  perl.h works around all of
# these anyway.
# XXX Eventually, I should fix perl.h to prefer the POSIX versions.
d_bcmp='undef'
d_bcopy='undef'
d_safebcpy='undef'
d_index='undef'

d57 1
a57 1
*/usr/ucb*:/usr/bin:*|*/usr/ucb*:/usr/bin) cat <<END
d73 1
a73 1
	cat <<END
d89 1
a89 1
	cat <<END
d106 1
a106 1
	    cat <<END
d147 1
a147 1
	    cat <<END
d151 2
a152 1
GCC_EXEC_PREFIX or by including -B/usr/ccs/bin in your cc command.
d162 1
a162 1
	    cat <<END
d166 1
a166 1
GCC_EXEC_PREFIX or by including -B/usr/ccs/bin in your cc command.
d182 1
a182 1
		cat <<END
d193 3
d197 15
a211 2
	*GNU*)
		cat <<END
d215 1
a215 1
beginning of your PATH
d218 1
a218 2
		;;
	esac
@


1.1.1.1
log
@Import of Perl 5.003 into the tree.  Makefile.bsd-wrapper and
config.sh.OpenBSD are the only local changes.
@
text
@@


1.1.1.2
log
@perl5.005_03
@
text
@d2 1
a2 1
# Last modified:  Wed May 27 13:04:45 EDT 1998
a6 7
# If perl fails tests that involve dynamic loading of extensions, and
# you are using gcc, be sure that you are NOT using GNU as and ld.  One
# way to do that is to invoke Configure with
# 
#     sh Configure -Dcc='gcc -B/usr/ccs/bin/'
# 
 
d38 11
d60 2
a61 2
case `type ${cc:-cc}` in
*/usr/ucb/cc*) cat <<END >&4
d64 1
a64 2
If you have difficulties, please make sure the directory
containing your C compiler is before /usr/ucb in your PATH.
d77 1
a77 1
	cat <<END >&4
d93 1
a93 1
	cat <<END >&4
a101 9
# Use shell built-in 'type' command instead of /usr/bin/which to
# avoid possible csh start-up problems and also to use the same shell
# we'll be using to Configure and make perl.
# The path name is the last field in the output, but the type command
# has an annoying array of possible outputs, e.g.:
#	make is hashed (/opt/gnu/bin/make)
# 	cc is /usr/ucb/cc
#	foo not found
# use a command like type make | awk '{print $NF}' | sed 's/[()]//g'
d107 2
a108 2
    tmp=`type make | awk '{print $NF}' | sed 's/[()]//g'`
    case "`/usr/bin/ls -lL $tmp`" in
d110 1
a110 1
	    cat <<END >&2
a122 4
# XXX EXPERIMENTAL  A.D.  2/27/1998
# XXX This script UU/cc.cbu will get 'called-back' by Configure after it
# XXX has prompted the user for the C compiler to use.
cat > UU/cc.cbu <<'EOSH'
a125 1
#	(GNU as and ld 2.8.1 and later are reportedly ok, however.)
a127 1
#	(GNU as and ld 2.8.1 and later are reportedly ok, however.)
d130 2
a131 7

# Get gcc to share its secrets.
echo 'main() { return 0; }' > try.c
	# Indent to avoid propagation to config.sh
	verbose=`${cc:-cc} -v -o try try.c 2>&1`

if echo "$verbose" | grep '^Reading specs from' >/dev/null 2>&1; then
d137 4
d148 4
a151 4
	if echo "$verbose" | grep ' /usr/ccs/bin/as ' >/dev/null 2>&1; then
	    :
	else
	    cat <<END >&2
d154 2
a155 2
I'm arranging to use /usr/ccs/bin/as by including -B/usr/ccs/bin/
in your ${cc:-cc} command.  (Note that the trailing "/" is required.)
d158 2
a159 2
	    cc="${cc:-cc} -B/usr/ccs/bin/"
	fi
d162 4
a165 24
	# Recompute $verbose since we may have just changed $cc.
	verbose=`${cc:-cc} -v -o try try.c 2>&1 | grep ld 2>&1`
	if echo "$verbose" | grep ' /usr/ccs/bin/ld ' >/dev/null 2>&1; then
	    :
	else
        # It's not /usr/ccs/bin/ld - but it might be egcs's ld wrapper,
        # which calls /usr/ccs/bin/ld in turn. Passing -V to it will
        # make it show its true colors.

	    myld=`echo $verbose| grep ld | awk '/\/ld/ {print $1}'`
            # This assumes that gcc's output will not change, and that
            # /full/path/to/ld will be the first word of the output.

            # all Solaris versions of ld I've seen contain the magic
            # string used in the grep below.
            if $myld -V 2>&1 | grep "ld: Software Generation Utilities" >/dev/null 2>&1; then
                cat <<END >&2

Aha. You're using egcs and /usr/ccs/bin/ld.

END

            else
	    cat <<END >&2
d168 2
a169 2
I'm arranging to use /usr/ccs/bin/ld by including -B/usr/ccs/bin/
in your ${cc:-cc} command.  (Note that the trailing "/" is required.)
d172 2
a173 3
	    cc="${cc:-cc} -B/usr/ccs/bin/"
            fi
	fi
d175 2
a176 1
else
d185 1
a185 1
		cat <<END >&2
d188 2
a189 2
You must arrange to use /usr/ccs/bin/as, perhaps by adding /usr/ccs/bin
to the beginning of your PATH.
a195 3
	# ld --version doesn't properly report itself as a GNU tool,
	# as of ld version 2.6, so we need to be more strict. TWP 9/5/96
	gnu_ld=false
d197 6
a202 18
	*GNU*|ld\ version\ 2*)
		gnu_ld=true ;;
	*) ;;
	esac
	if $gnu_ld ; then :
	else
		# Try to guess from path
		case `type ld | awk '{print $NF}'` in
		*gnu*|*GNU*|*FSF*)
			gnu_ld=true ;;
		esac
	fi
	if $gnu_ld ; then
		cat <<END >&2

NOTE: You are apparently using GNU ld(1).  GNU ld(1) will not build Perl.
You must arrange to use /usr/ccs/bin/ld, perhaps by adding /usr/ccs/bin
to the beginning of your PATH.
d205 2
a206 1
	fi
d208 2
a209 1
fi
a211 1
rm -f try try.c
a212 51

# XXX
EOSH

# This script UU/usethreads.cbu will get 'called-back' by Configure 
# after it has prompted the user for whether to use threads.
cat > UU/usethreads.cbu <<'EOCBU'
case "$usethreads" in
$define|true|[yY]*)
        ccflags="-D_REENTRANT $ccflags"

        # sched_yield is in -lposix4
        set `echo X "$libswanted "| sed -e 's/ c / posix4 pthread c /'`
        shift
        libswanted="$*"

        # On Solaris 2.6 x86 there is a bug with sigsetjmp() and siglongjmp()
        # when linked with the threads library, such that whatever positive
        # value you pass to siglongjmp(), sigsetjmp() returns 1.
        # Thanks to Simon Parsons <S.Parsons@@ftel.co.uk> for this report.
        # Sun BugID is 4117946, "sigsetjmp always returns 1 when called by
        # siglongjmp in a MT program". As of 19980622, there is no patch
        # available.
        cat >try.c <<'EOM'
	/* Test for sig(set|long)jmp bug. */
	#include <setjmp.h>
	 
	main()
	{
	    sigjmp_buf env;
	    int ret;
	
	    ret = sigsetjmp(env, 1);
	    if (ret) { return ret == 2; }
	    siglongjmp(env, 2);
	}
EOM
        if test "`arch`" = i86pc -a "$osvers" = 2.6 && \
           ${cc:-cc} try.c -lpthread >/dev/null 2>&1 && ./a.out; then
 	    d_sigsetjmp=$undef
	    cat << 'EOM' >&2

You will see a *** WHOA THERE!!! ***  message from Configure for
d_sigsetjmp.  Keep the recommended value.  See hints/solaris_2.sh
for more information.

EOM
        fi
	;;
esac
EOCBU
@


1.1.1.3
log
@virgin perl 5.6.0
@
text
@d2 2
a3 2
# Last modified:  Tue Apr 13 13:12:49 EDT 1999
# Andy Dougherty  <doughera@@lafayette.edu>
d12 1
a12 4
#
#  (Note that the trailing slash is *required*.)
#  gcc will occasionally emit warnings about "unused prefix", but
#  these ought to be harmless.  See below for more details.
a44 36
test -z "`${cc:-cc} -V 2>&1|grep -i workshop`" || ccisworkshop="$define"
test -z "`${cc:-cc} -v 2>&1|grep -i gcc`"      || ccisgcc="$define"

cat >UU/workshoplibpth.cbu<<'EOCBU'
case "$workshoplibpth_done" in
'')	case "$use64bitall" in
	"$define"|true|[yY]*)
            loclibpth="$loclibpth /usr/lib/sparcv9"
            if test -n "$workshoplibs"; then
                loclibpth=`echo $loclibpth | sed -e "s% $workshoplibs%%" `
                for lib in $workshoplibs; do
                    # Logically, it should be sparcv9.
                    # But the reality fights back, it's v9.
                    loclibpth="$loclibpth $lib/sparcv9 $lib/v9"
                done
            fi 
	    ;;
	*)  loclibpth="$loclibpth $workshoplibs"  
	    ;;
	esac
	workshoplibpth_done="$define"
	;;
esac
EOCBU

case "$ccisworkshop" in
"$define")
	cat >try.c <<EOF
#include <sunmath.h>
int main() { return(0); }
EOF
	workshoplibs=`cc -### try.c -lsunmath -o try 2>&1|grep " -Y "|sed 's%.* -Y "P,\(.*\)".*%\1%'|tr ':' '\n'|grep '/SUNWspro/'`
	. ./UU/workshoplibpth.cbu
	;;
esac

d47 1
a47 1
#
d53 1
a53 1
#
a142 13
# Perl compiled with some combinations of GNU as and ld may not 
# be able to perform dynamic loading of extensions.  If you have a
# problem with dynamic loading, be sure that you are using the Solaris
# /usr/ccs/bin/as and /usr/ccs/bin/ld.  You can do that with
#  		sh Configure -Dcc='gcc -B/usr/ccs/bin/'
# (note the trailing slash is required). 
# Combinations that are known to work with the following hints:
#
#  gcc-2.7.2, GNU as 2.7, GNU ld 2.7
#  egcs-1.0.3, GNU as 2.9.1 and GNU ld 2.9.1
#	--Andy Dougherty  <doughera@@lafayette.edu>  
#	Tue Apr 13 17:19:43 EDT 1999

d152 1
d160 1
a160 1
	# See if as(1) is GNU as(1).  GNU as(1) might not work for this job.
d166 2
a167 2
NOTE: You are using GNU as(1).  GNU as(1) might not build Perl.  If you
have trouble, you can use /usr/ccs/bin/as by including -B/usr/ccs/bin/
d171 1
a171 2
	    # Apparently not needed, at least for as 2.7 and later.
	    # cc="${cc:-cc} -B/usr/ccs/bin/"
d174 1
a174 1
	# See if ld(1) is GNU ld(1).  GNU ld(1) might not work for this job.
a176 1

a177 8
	    # Ok, gcc directly calls the Solaris /usr/ccs/bin/ld.
	    :
	elif echo "$verbose" | grep "ld: Software Generation Utilities" >/dev/null 2>&1; then
	    # Hmm.  gcc doesn't call /usr/ccs/bin/ld directly, but it
	    # does appear to be using it eventually.  egcs-1.0.3's ld
	    # wrapper does this.
	    # All Solaris versions of ld I've seen contain the magic
	    # string used in the grep.
d180 3
a182 4
	    # No evidence yet of /usr/ccs/bin/ld.  Some versions
	    # of egcs's ld wrapper call /usr/ccs/bin/ld in turn but
	    # apparently don't reveal that unless you pass in -V.
	    # (This may all depend on local configurations too.)
d185 14
a198 9
	    # This assumes that gcc's output will not change, and that
	    # /full/path/to/ld will be the first word of the output.
	    # Thus myld is something like opt/gnu/sparc-sun-solaris2.5/bin/ld

	    if $myld -V 2>&1 | grep "ld: Software Generation Utilities" >/dev/null 2>&1; then
		# Ok, /usr/ccs/bin/ld eventually does get called.
		:
	    else
		cat <<END >&2
d200 2
a201 2
NOTE: You are using GNU ld(1).  GNU ld(1) might not build Perl.  If you
have trouble, you can use /usr/ccs/bin/ld by including -B/usr/ccs/bin/
a203 3
I will try to use GNU ld by passing in the -Wl,-E flag, but if that
doesn't work, you should use -B/usr/ccs/bin/ instead.

d205 2
a206 3
		ccdlflags="$ccdlflags -Wl,-E"
		lddlflags="$lddlflags -W,l-E -G"
	    fi
d213 1
d215 1
a215 1
	# See if as(1) is GNU as(1).  GNU might not work for this job.
d220 1
a220 1
NOTE: You are using GNU as(1).  GNU as(1) might not build Perl.
d228 1
a228 1
	# See if ld(1) is GNU ld(1).  GNU ld(1) might not work for this job.
d248 2
a249 2
NOTE: You are apparently using GNU ld(1).  GNU ld(1) might not build Perl.
You should arrange to use /usr/ccs/bin/ld, perhaps by adding /usr/ccs/bin
a263 1
cat > UU/usethreads.cbu <<'EOCBU'
d266 1
a311 129
cat > UU/uselargefiles.cbu <<'EOCBU'
# This script UU/uselargefiles.cbu will get 'called-back' by Configure 
# after it has prompted the user for whether to use large files.
case "$uselargefiles" in
''|$define|true|[yY]*)
    ccflags="$ccflags `getconf LFS_CFLAGS 2>/dev/null`"
    ldflags="$ldflags `getconf LFS_LDFLAGS 2>/dev/null`"
    libswanted="$libswanted `getconf LFS_LIBS 2>/dev/null|sed -e 's@@^-l@@@@' -e 's@@ -l@@ @@g`"
    ;;
esac
EOCBU

cat > UU/use64bitint.cbu <<'EOCBU'
# This script UU/use64bitint.cbu will get 'called-back' by Configure 
# after it has prompted the user for whether to use 64 bit integers.
case "$use64bitint" in
"$define"|true|[yY]*)
	    case "`uname -r`" in
	    2.[1-6])
		cat >&4 <<EOM
Solaris `uname -r` does not support 64-bit integers.
You should upgrade to at least Solaris 2.7.
EOM
		exit 1
		;;
	    esac
	    ;;
esac
EOCBU

cat > UU/use64bitall.cbu <<'EOCBU'
# This script UU/use64bitall.cbu will get 'called-back' by Configure 
# after it has prompted the user for whether to be maximally 64 bitty.
case "$use64bitall-$use64bitall_done" in
"$define-"|true-|[yY]*-)
	    libc='/usr/lib/sparcv9/libc.so'
	    if test ! -f $libc; then
		cat >&4 <<EOM

I do not see the 64-bit libc, $libc.
Cannot continue, aborting.

EOM
		exit 1
	    fi 
	    . ./UU/workshoplibpth.cbu
	    case "$cc -v 2>/dev/null" in
	    *gcc*)
		echo 'main() { return 0; }' > try.c
		if ${cc:-cc} -mcpu=v9 -m64 -S try.c 2>&1 | grep -e \
		    '-m64 is not supported by this configuration'; then
		    cat >&4 <<EOM

Full 64-bit build not supported by this configuration.
Cannot continue, aborting.

EOM
		    exit 1
		fi
		ccflags="$ccflags -mcpu=v9 -m64"
		if test X`getconf XBS5_LP64_OFF64_CFLAGS 2>/dev/null` != X; then
		    ccflags="$ccflags -Wa,`getconf XBS5_LP64_OFF64_CFLAGS 2>/dev/null`"
		fi
		# no changes to ld flags, as (according to man ld):
		#
   		# There is no specific option that tells ld to link 64-bit
		# objects; the class of the first object that gets processed
		# by ld determines whether it is to perform a 32-bit or a
		# 64-bit link edit.
		;;
	    *)
		ccflags="$ccflags `getconf XBS5_LP64_OFF64_CFLAGS 2>/dev/null`"
		ldflags="$ldflags `getconf XBS5_LP64_OFF64_LDFLAGS 2>/dev/null`"
		lddlflags="$lddlflags -G `getconf XBS5_LP64_OFF64_LDFLAGS 2>/dev/null`"
		;;
	    esac	
	    libscheck='case "`/usr/bin/file $xxx`" in
*64-bit*|*SPARCV9*) ;;
*) xxx=/no/64-bit$xxx ;;
esac'
	    use64bitall_done=yes
	    ;;
esac
EOCBU
 
# Actually, we want to run this already now, if so requested,
# because we need to fix up things right now.
case "$use64bitall" in
"$define"|true|[yY]*)
	. ./UU/use64bitall.cbu
	;;
esac

cat > UU/uselongdouble.cbu <<'EOCBU'
# This script UU/uselongdouble.cbu will get 'called-back' by Configure 
# after it has prompted the user for whether to use long doubles.
case "$uselongdouble-$uselongdouble_done" in
"$define-"|true-|[yY]*-)
	case "$ccisworkshop" in
	'')	cat >&4 <<EOM

I do not see the Sun Workshop compiler; therefore I do not see
the libsunmath; therefore I do not know how to do long doubles, sorry.
I'm disabling the use of long doubles.
EOM
		uselongdouble="$undef"
		;;
	*)	libswanted="$libswanted sunmath"
		loclibpth="$loclibpth /opt/SUNWspro/lib"
		;;
	esac
	uselongdouble_done=yes
	;;
esac
EOCBU

# Actually, we want to run this already now, if so requested,
# because we need to fix up things right now.
case "$uselongdouble" in
"$define"|true|[yY]*)
	. ./UU/uselongdouble.cbu
	;;
esac

rm -f try.c try.o try
# keep that leading tab
	ccisworkshop=''
	ccisgcc=''

a441 46

7.0) 64-bitness, from Alan Burlison (added by jhi 2000-02-21)

  You need a machine running Solaris 2.7 or above.

  Here's some rules:
  
  1. Solaris 2.7 and above will run in either 32 bit or 64 bit mode,
     via a reboot.
  2. You can build 64 bit apps whilst running 32 bit mode and vice-versa.
  3. 32 bit apps will run under Solaris running in either 32 or 64 bit mode.
  4. 64 bit apps require Solaris to be running 64 bit mode
  5. It is possible to select the appropriate 32 or 64 bit version of an
     app at run-time using isaexec(3).
  6. You can detect the OS mode using "isainfo -v", e.g.
      fubar$ isainfo -v   # Ultra 30 in 64 bit mode
      64-bit sparcv9 applications
      32-bit sparc applications
  7. To compile 64 bit you need to use the flag "-xarch=v9".
     getconf(1) will tell you this, e.g.
      fubar$ getconf -a | grep v9
      XBS5_LP64_OFF64_CFLAGS:         -xarch=v9
      XBS5_LP64_OFF64_LDFLAGS:        -xarch=v9
      XBS5_LP64_OFF64_LINTFLAGS:      -xarch=v9
      XBS5_LPBIG_OFFBIG_CFLAGS:       -xarch=v9
      XBS5_LPBIG_OFFBIG_LDFLAGS:      -xarch=v9
      XBS5_LPBIG_OFFBIG_LINTFLAGS:    -xarch=v9
      _XBS5_LP64_OFF64_CFLAGS:        -xarch=v9
      _XBS5_LP64_OFF64_LDFLAGS:       -xarch=v9
      _XBS5_LP64_OFF64_LINTFLAGS:     -xarch=v9
      _XBS5_LPBIG_OFFBIG_CFLAGS:      -xarch=v9
      _XBS5_LPBIG_OFFBIG_LDFLAGS:     -xarch=v9
      _XBS5_LPBIG_OFFBIG_LINTFLAGS:   -xarch=v9

  > > Now, what should we do, then?  Should -Duse64bits in a v9 box cause
  > > Perl to compiled in v9 mode?  Or should we for compatibility stick
  > > with 32 bit builds and let the people in the know to add the -xarch=v9
  > > to ccflags (and ldflags?)?

  > I think the second (explicit) mechanism should be the default.  Unless
  > you want to allocate more than ~ 4Gb of memory inside Perl, you don't
  > need Perl to be a 64-bit app.  Put it this way, on a machine running
  > Solaris 8, there are 463 executables under /usr/bin, but only 15 of
  > those require 64 bit versions - mainly because they invade the kernel
  > address space, e.g. adb, kgmon etc.  Certainly we don't recommend users
  > to build 64 bit apps unless they need the address space.
@


1.1.1.4
log
@stock perl 5.6.1
@
text
@d2 1
a2 3
# Last modified: Tue Jan  2 10:16:35 2001
# Lupe Christoph <lupe@@lupe-christoph.de>
# Based on version by:
d4 1
a4 1
# Which was based on input from lots of folks, especially
a5 9
# Additional input from Alan Burlison, Jarkko Hietaniemi,
# and Richard Soderberg.
#
# See README.solaris for additional information.
#
# For consistency with gcc, we do not adopt Sun Marketing's
# removal of the '2.' prefix from the Solaris version number.
# (Configure tries to detect an old fixincludes and needs
# this information.)
d10 1
a10 1
#
d16 1
a16 1

d23 1
a23 2
# /lib is just a symlink to /usr/lib
set `echo $glibpth | sed -e 's@@/usr/ucblib@@@@' -e 's@@ /lib @@ @@'`
d26 2
a27 3
# Remove unwanted libraries.  -lucb contains incompatible routines.
# -lld and -lsec don't do anything useful. -lcrypt does not
# really provide anything we need over -lc, so we drop it, too.
d32 1
a32 1
set `echo " $libswanted " | sed -e 's@@ ld @@ @@' -e 's@@ malloc @@ @@' -e 's@@ ucb @@ @@' -e 's@@ sec @@ @@' -e 's@@ crypt @@ @@'`
d48 4
a51 3
cat > UU/workshoplibpth.cbu << 'EOCBU'
# This script UU/workshoplibpth.cbu will get 'called-back'
# by other CBUs this script creates.
d53 11
a63 13
    '')	if test `uname -p` = "sparc"; then
	case "$use64bitall" in
	    "$define"|true|[yY]*)
		# add SPARC-specific 64 bit libraries
		loclibpth="$loclibpth /usr/lib/sparcv9"
		if test -n "$workshoplibs"; then
		    loclibpth=`echo $loclibpth | sed -e "s% $workshoplibs%%" `
		    for lib in $workshoplibs; do
			# Logically, it should be sparcv9.
			# But the reality fights back, it's v9.
			loclibpth="$loclibpth $lib/sparcv9 $lib/v9"
		    done
		fi
d65 1
a65 1
	*)  loclibpth="$loclibpth $workshoplibs"
a67 3
	else
	    loclibpth="$loclibpth $workshoplibs"
	fi
d73 11
d93 1
a93 1
# Here's another draft of the perl5/solaris/gcc sanity-checker.
d98 1
a98 1
NOTE:  Some people have reported problems with /usr/ucb/cc.
d156 1
a156 1

d168 4
a171 4
cat > UU/cc.cbu <<'EOCBU'
# This script UU/cc.cbu will get 'called-back' by Configure after it
# has prompted the user for the C compiler to use.

a176 2
#   - Check if it is the Workshop/Forte compiler.
#     If it is, prepare for 64 bit and long doubles.
d182 1
a182 1
# Perl compiled with some combinations of GNU as and ld may not
d187 1
a187 1
# (note the trailing slash is required).
d192 1
a192 1
#	--Andy Dougherty  <doughera@@lafayette.edu>
d205 6
a274 17
	ccversion="`${cc:-cc} -V 2>&1|sed -n -e '1s/^cc: //p'`"
	case "$ccversion" in
	*WorkShop*) ccname=workshop ;;
	*) ccversion='' ;;
	esac

	case "$ccname" in
	workshop)
		cat >try.c <<EOM
#include <sunmath.h>
int main() { return(0); }
EOM
		workshoplibs=`cc -### try.c -lsunmath -o try 2>&1|sed -n '/ -Y /s%.* -Y "P,\(.*\)".*%\1%p'|tr ':' '\n'|grep '/SUNWspro/'`
		. ./workshoplibpth.cbu
	;;
	esac

d291 7
a297 4
	# Sun's ld always emits the "Software Generation Utilities" string.
	if ld -V 2>&1 | grep "ld: Software Generation Utilities" >/dev/null 2>&1; then
	    # Ok, ld is /usr/ccs/bin/ld.
	    :
d299 8
a306 1
	    cat <<END >&2
d322 1
a322 1
EOCBU
d325 1
a325 1
# This script UU/usethreads.cbu will get 'called-back' by Configure
d331 2
a332 6
        # sched_yield is in -lposix4 up to Solaris 2.6, in -lrt starting with Solaris 2.7
	case `uname -r` in
	5.[0-6] | 5.5.1) sched_yield_lib="posix4" ;;
	*) sched_yield_lib="rt";
	esac
        set `echo X "$libswanted "| sed -e "s/ c / $sched_yield_lib pthread c /"`
d346 1
a346 1

d351 1
a351 1

d357 1
a357 1
        if test "`arch`" = i86pc -a `uname -r` = 5.6 && \
d373 1
a373 1
# This script UU/uselargefiles.cbu will get 'called-back' by Configure
d377 3
a379 9

# Keep these in the left margin.
ccflags_uselargefiles="`getconf LFS_CFLAGS 2>/dev/null`"
ldflags_uselargefiles="`getconf LFS_LDFLAGS 2>/dev/null`"
libswanted_uselargefiles="`getconf LFS_LIBS 2>/dev/null|sed -e 's@@^-l@@@@' -e 's@@ -l@@ @@g`"

    ccflags="$ccflags $ccflags_uselargefiles"
    ldflags="$ldflags $ldflags_uselargefiles"
    libswanted="$libswanted $libswanted_uselargefiles"
d384 2
a385 11
# This is truly a mess.
case "$usemorebits" in
"$define"|true|[yY]*)
	use64bitint="$define"
	uselongdouble="$define"
	;;
esac

if test `uname -p` = "sparc"; then
    cat > UU/use64bitint.cbu <<'EOCBU'
# This script UU/use64bitint.cbu will get 'called-back' by Configure
d390 1
a390 1
	    5.[0-4])
d392 2
a393 2
Solaris `uname -r|sed -e 's/^5\./2./'` does not support 64-bit integers.
You should upgrade to at least Solaris 2.5.
d402 2
a403 2
    cat > UU/use64bitall.cbu <<'EOCBU'
# This script UU/use64bitall.cbu will get 'called-back' by Configure
a406 9
	    case "`uname -r`" in
	    5.[0-6])
		cat >&4 <<EOM
Solaris `uname -r|sed -e 's/^5\./2./'` does not support 64-bit pointers.
You should upgrade to at least Solaris 2.7.
EOM
		exit 1
		;;
	    esac
d416 2
a417 2
	    fi
	    . ./workshoplibpth.cbu
d421 2
a422 2
		case "`${cc:-cc} -mcpu=v9 -m64 -S try.c 2>&1 | grep 'm64 is not supported by this configuration'`" in
		*"m64 is not supported"*)
d425 1
a425 4
Full 64-bit build is not supported by this gcc configuration.
Check http://gcc.gnu.org/ for the latest news of availability
of gcc for 64-bit Sparc.

d430 1
a430 2
		    ;;
		esac
d447 1
a447 1
	    esac
a451 1

d456 6
a461 7

    # Actually, we want to run this already now, if so requested,
    # because we need to fix up things right now.
    case "$use64bitall" in
    "$define"|true|[yY]*)
	# CBUs expect to be run in UU
	cd UU; . ./use64bitall.cbu; cd ..
d463 1
a463 2
    esac
fi
d466 1
a466 1
# This script UU/uselongdouble.cbu will get 'called-back' by Configure
d468 4
a471 8
case "$uselongdouble" in
"$define"|true|[yY]*)
	if test -f /opt/SUNWspro/lib/libsunmath.so; then
		libs="$libs -lsunmath"
		ldflags="$ldflags -L/opt/SUNWspro/lib -R/opt/SUNWspro/lib"
		d_sqrtl=define
	else
		cat >&4 <<EOM
d473 3
a475 3
The Sun Workshop math library is not installed; therefore I do not
know how to do long doubles, sorry.  I'm disabling the use of long
doubles.
d478 6
a483 1
	fi
d488 192
a679 1
rm -f try.c try.o try a.out
@


1.1.1.5
log
@stock perl 5.8.0 from CPAN
@
text
@d2 1
a2 1
# Last modified: Mon Jan 29 12:52:28 2001
d29 1
a29 1
usevfork=${usevfork:-false}
d31 1
a31 8
# Solaris has secure SUID scripts
d_suidsafe=${d_suidsafe:-define}

# Several people reported problems with perl's malloc, especially
# when use64bitall is defined or when using gcc.
#     http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2001-01/msg01318.html
#     http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2001-01/msg00465.html
usemymalloc=${usemymalloc:-false}
a89 15
case "$cc" in
'')	if test -f /opt/SUNWspro/bin/cc; then
		cc=/opt/SUNWspro/bin/cc
		cat <<EOF >&4	

You specified no cc but you seem to have the Workshop compiler
($cc) installed, using that.
If you want something else, specify that in the command line,
e.g. Configure -Dcc=gcc

EOF
	fi
	;;
esac

d115 1
a115 1
df /dev/fd 2>&1 > /dev/null
a247 3
	    # Recompute verbose with -Wl,-v to find GNU ld if present
	    verbose=`${cc:-cc} -v -Wl,-v -o try try.c 2>&1 | grep ld 2>&1`

d251 1
a251 1
	    # Thus myld is something like /opt/gnu/sparc-sun-solaris2.5/bin/ld
d253 1
a253 3
	    # Allow that $myld may be '', due to changes in gcc's output 
	    if ${myld:-ld} -V 2>&1 |
		grep "ld: Software Generation Utilities" >/dev/null 2>&1; then
a256 1
		echo "Found GNU ld='$myld'" >&4
d268 1
a268 1
		lddlflags="$lddlflags -Wl,-E -G"
a380 21

	# These prototypes should be visible since we using
	# -D_REENTRANT, but that does not seem to work.
	# It does seem to work for getnetbyaddr_r, weirdly enough,
	# and other _r functions. (Solaris 8)

	d_ctermid_r_proto="$define"
	d_gethostbyaddr_r_proto="$define"
	d_gethostbyname_r_proto="$define"
	d_getnetbyname_r_proto="$define"
	d_getprotobyname_r_proto="$define"
	d_getprotobynumber_r_proto="$define"
	d_getservbyname_r_proto="$define"
	d_getservbyport_r_proto="$define"

	# Ditto. (Solaris 7)
	d_readdir_r_proto="$define"
	d_readdir64_r_proto="$define"
	d_tmpnam_r_proto="$define"
	d_ttyname_r_proto="$define"

a427 20
# gcc-2.8.1 on Solaris 8 with -Duse64bitint fails op/pat.t test 822
# if we compile regexec.c with -O.  Turn off optimization for that one
# file.  See hints/README.hints , especially 
# =head2 Propagating variables to config.sh, method 3.
#  A. Dougherty  May 24, 2002
case "$use64bitint" in
"$define")
    case "${gccversion}-${optimize}" in
    2.8*-O*)
	# Honor a command-line override (rather unlikely)
	case "$regexec_cflags" in
	'') echo "Disabling optimization on regexec.c for gcc $gccversion" >&4
	    regexec_cflags='optimize='
	    echo "regexec_cflags='optimize=\"\"'" >> config.sh 
	    ;;
	esac
	;;
    esac
    ;;
esac
a514 3
		# Unfortunately libpth has already been set and
		# searched, so we need to add in everything manually.
		libpth="$libpth /opt/SUNWspro/lib"
@


1.1.1.6
log
@perl 5.8.2 from CPAN
@
text
@d2 8
a9 3
# Contributions by (in alphabetical order) Alan Burlison, Andy Dougherty,
# Dean Roehrich, Jarkko Hietaniemi, Lupe Christoph, Richard Soderberg and
# many others.
d28 3
a33 3
# Be paranoid about nm failing to find symbols
mistrustnm=${mistrustnm:-run}

d68 28
a95 12
#
# This extracts the library directories that will be searched by the Sun
# Workshop compiler, given the command-line supplied in $tryworkshopcc.
# Use thusly: loclibpth="`$getworkshoplibs` $loclibpth"
#
	getworkshoplibs=`cat <<'END'
eval $tryworkshopcc -### 2>&1 | \
sed -n '/ -Y /s!.* -Y "P,\([^"]*\)".*!\1!p' | tr ':' ' ' | \
sed -e 's!/usr/lib/sparcv9!!' -e 's!/usr/ccs/lib/sparcv9!!' \
    -e 's!/usr/lib!!g' -e 's!/usr/ccs/lib!!g'
END
`
d137 1
a137 1
mount | grep '^/dev/fd ' 2>&1 > /dev/null
d226 1
a226 1
echo 'int main() { return 0; }' > try.c
a233 1
	cc_name='gcc'
d304 12
a315 10
	cat > try.c << 'EOM'
#include <stdio.h>
int main() {
#ifdef __SUNPRO_C
	printf("workshop\n");
#else
	printf("\n");
#endif
return(0);
}
d317 4
a320 10
	tryworkshopcc="${cc:-cc} try.c -o try"
	if $tryworkshopcc >/dev/null 2>&1; then
		cc_name=`./try`
		if test "$cc_name" = "workshop"; then
			ccversion="`${cc:-cc} -V 2>&1|sed -n -e '1s/^cc: //p'`"
			if test ! "$use64bitall_done"; then
				loclibpth="/usr/lib /usr/ccs/lib `$getworkshoplibs` $loclibpth"
			fi
		fi
	fi
d351 1
d355 4
a358 1
rm -f try try.c core
d368 6
a373 2
	sched_yield='yield'
        set `echo X "$libswanted "| sed -e "s/ c / pthread c /"`
d388 1
a388 1
	int main()
d523 2
a524 1
	    case "${cc:-cc} -v 2>/dev/null" in
d526 1
a526 1
		echo 'int main() { return 0; }' > try.c
a540 1
	        loclibpth="/usr/lib/sparcv9 $loclibpth"
a555 3
		echo "int main() { return(0); } " > try.c
		tryworkshopcc="${cc:-cc} try.c -o try $ccflags"
		loclibpth="/usr/lib/sparcv9 /usr/ccs/lib/sparcv9 `$getworkshoplibs` $loclibpth"
d558 4
a563 1
	    archname64=64
d583 7
a589 8
	if test "$cc_name" = "workshop"; then
		cat > try.c << 'EOM'
#include <sunmath.h>
int main() { (void) powl(2, 256); return(0); }
EOM
		if ${cc:-cc} try.c -lsunmath -o try > /dev/null 2>&1 && ./try; then
			libswanted="$libswanted sunmath"
		fi
d593 3
a595 3
The Sun Workshop math library is either not available or not working,
so I do not know how to do long doubles, sorry.
I'm therefore disabling the use of long doubles.
@


1.1.1.7
log
@perl 5.8.3 from CPAN
@
text
@d451 2
a452 1

d458 2
a518 3
		    # This adds in -Wa,-xarch=v9.  I suspect that's superfluous,
		    # since the -m64 above should do that already.  Someone
		    # with gcc-3.x.x, please test with gcc -v.   A.D. 20-Nov-2003
d521 6
a526 2
		ldflags="$ldflags -m64"
		lddlflags="$lddlflags -G -m64"
@


1.1.1.8
log
@Import of stock perl 5.8.5
@
text
@a34 5
# malloc wrap works
case "$usemallocwrap" in
'') usemallocwrap='define' ;;
esac

d241 1
a241 1
	    # Most Solaris versions of ld I've seen contain the magic
a243 4
	elif echo "$verbose" | grep "Solaris Link Editors" >/dev/null 2>&1; then
	    # However some Solaris 8 versions prior to ld 5.8-1.286 contain
	    # this string instead.
	    :
a262 4
	    elif ${myld:-ld} -V 2>&1 |
		grep "Solaris Link Editors" >/dev/null 2>&1; then
		# Ok, /usr/ccs/bin/ld eventually does get called.
		:
d348 1
a348 1
	# -lpthread overrides some lib C functions, so put it before c.
a351 14

	# sched_yield is available in the -lrt library.  However,
	# we can also pick up the equivalent yield() function in the
	# normal C library.  To avoid pulling in unnecessary
	# libraries, we'll normally avoid sched_yield()/-lrt and
	# just use yield().  However, we'll honor a command-line
	# override : "-Dsched_yield=sched_yield".
	# If we end up using sched_yield, we're going to need -lrt.
	sched_yield=${sched_yield:-yield}
	if test "$sched_yield" = "sched_yield"; then
	    set `echo X "$libswanted "| sed -e "s/ pthread / rt pthread /"`
	    shift
	    libswanted="$*"
	fi
@


1.1.1.9
log
@perl 5.8.8 import
@
text
@d59 2
a60 2
	archname=`/usr/bin/arch`
	archname="${archname}-${osname}"
d62 2
a63 2
	archname=`/usr/ucb/arch`
	archname="${archname}-${osname}"
d214 1
a214 4
# XXX TODO:  'specs' output changed from 'Reading specs from' in gcc-[23] to 'Using
# built-in specs' in gcc-4.  Perhaps we should just use the same gcc test as
# in Configure to see if we're using gcc.
if echo "$verbose" | egrep '(Reading specs from)|(Using built-in specs)' >/dev/null 2>&1; then
d260 1
a260 1
	    verbose=`${cc:-cc} -Wl,-v -o try try.c 2>&1 | grep /ld 2>&1`
d262 1
a262 1
	    myld=`echo $verbose | awk '/\/ld/ {print $1}'`
d359 1
a359 1
	ccflags="-D_REENTRANT $ccflags"
d362 3
a364 3
	set `echo X "$libswanted "| sed -e "s/ c / pthread c /"`
	shift
	libswanted="$*"
d380 8
a387 8
	# On Solaris 2.6 x86 there is a bug with sigsetjmp() and siglongjmp()
	# when linked with the threads library, such that whatever positive
	# value you pass to siglongjmp(), sigsetjmp() returns 1.
	# Thanks to Simon Parsons <S.Parsons@@ftel.co.uk> for this report.
	# Sun BugID is 4117946, "sigsetjmp always returns 1 when called by
	# siglongjmp in a MT program". As of 19980622, there is no patch
	# available.
	cat >try.c <<'EOM'
d401 3
a403 3
	if test "`arch`" = i86pc -a `uname -r` = 5.6 && \
	   ${cc:-cc} try.c -lpthread >/dev/null 2>&1 && ./a.out; then
	    d_sigsetjmp=$undef
d411 1
a411 1
	fi
d463 1
a463 1
if test `uname -p` = sparc -o `uname -p` = i386; then
d513 3
a515 5
	    processor=`uname -p`;
	    if test "$processor" = sparc; then
		libc='/usr/lib/sparcv9/libc.so'
		if test ! -f $libc; then
		    cat >&4 <<EOM
d521 1
a521 2
		    exit 1
		fi
d540 3
a542 6
		if test "$processor" = sparc; then
		    loclibpth="/usr/lib/sparcv9 $loclibpth"
		    ccflags="$ccflags -mcpu=v9"
		fi 
		ccflags="$ccflags -m64"
		if test $processor = sparc -a X`getconf XBS5_LP64_OFF64_CFLAGS 2>/dev/null` != X; then
d557 1
a557 4
		if test "$processor" = sparc; then
		    loclibpth="/usr/lib/sparcv9 /usr/ccs/lib/sparcv9 $loclibpth"
		fi
		loclibpth="`$getworkshoplibs` $loclibpth"
d560 1
a560 1
	    unset processor
a601 15

#
# If unsetenv is available, use it in conjunction with PERL_USE_SAFE_PUTENV to
# work around Sun bugid 6333830.  Both unsetenv and 6333830 only appear in
# Solaris 10, so we don't need to probe explicitly for an OS version.  We have
# to append this test to the end of config.over as it needs to run after
# Configure has probed for unsetenv, and this hints file is processed before
# that has happened.
#
cat >> config.over <<'EOOVER'
if test "$d_unsetenv" = "$define" -a \
    `expr "$ccflags" : '.*-D_PERL_USE_SAFE_PUTENV'` -eq 0; then
        ccflags="$ccflags -DPERL_USE_SAFE_PUTENV"
fi
EOOVER
@


1.1.1.10
log
@import perl 5.10.0 from CPAN
@
text
@a44 11
# Starting with Solaris 10, we don't want versioned shared libraries because
# those often indicate a private use only library.  Especially badly that would
# break things with SUNWbdb (Berkeley DB) being installed, which brings in
# /usr/lib/libdb.so.1, but that is not really meant for public consumption.
#  XXX Revisit after perl 5.10 -- should we apply this to older Solaris
# versions too?  (A.D. 11/2007).
case "`uname -r`" in
5.[0-9]) ;;
*) ignore_versioned_solibs=y ;;
esac

d84 1
a84 1
		cat <<EOF >&4
d156 1
a156 1
#	cc is /usr/ucb/cc
d200 1
a200 1
#	sh Configure -Dcc='gcc -B/usr/ccs/bin/'
d270 1
a270 1
	    # Allow that $myld may be '', due to changes in gcc's output
d407 7
a465 8
if test `uname -p` = i386; then
    case "$use64bitint" in
    "$define"|true|[yY]*)
            ccflags="$ccflags -DPTR_IS_LONG"
            ;;
    esac
fi

d484 1
a484 1
# file.  See hints/README.hints , especially
d493 1
a493 1
	    echo "regexec_cflags='optimize=\"\"'" >> config.sh
d549 7
a556 8
		ccflags="$ccflags -m64"

		# This adds in -Wa,-xarch=v9.  I suspect that's superfluous,
		# since the -m64 above should do that already.  Someone
		# with gcc-3.x.x, please test with gcc -v.   A.D. 20-Nov-2003
#		if test $processor = sparc -a X`getconf XBS5_LP64_OFF64_CFLAGS 2>/dev/null` != X; then
#		    ccflags="$ccflags -Wa,`getconf XBS5_LP64_OFF64_CFLAGS 2>/dev/null`"
#		fi
a630 14

# If using C++, the Configure scan for dlopen() will fail in Solaris
# because one of the two (1) an extern "C" linkage definition is needed
# (2) #include <dlfcn.h> is needed, *and* a cast to (void*(*)())
# is needed for the &dlopen.  Adding any of these would require changing
# a delicate spot in Configure, so easier just to force our guess here
# for Solaris.  Much the same goes for dlerror().
case "$cc" in
*g++*|*CC*)
  d_dlopen='define'
  d_dlerror='define'
  ;;
esac

@


1.1.1.11
log
@import perl 5.10.1
@
text
@d453 1
a453 1
libswanted_uselargefiles="`getconf LFS_LIBS 2>/dev/null|sed -e 's@@^-l@@@@' -e 's@@ -l@@ @@g'`"
@


1.1.1.12
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d314 1
a314 1
#if defined(__SUNPRO_C)
a316 3
#if defined(__SUNPRO_CC)
	printf("workshop CC\n");
#else
a318 1
#endif
d326 1
a326 1
			ccversion="`${cc:-cc} -V 2>&1|sed -n -e '1s/^cc: //ip'`"
a329 22
			# Sun cc doesn't support gcc attributes
			d_attribute_format='undef'
			d_attribute_malloc='undef'
			d_attribute_nonnull='undef'
			d_attribute_noreturn='undef'
			d_attribute_pure='undef'
			d_attribute_unused='undef'
			d_attribute_warn_unused_result='undef'
		fi
		if test "$cc_name" = "workshop CC"; then
			ccversion="`${cc:-CC} -V 2>&1|sed -n -e '1s/^CC: //ip'`"
			if test ! "$use64bitall_done"; then
				loclibpth="/usr/lib /usr/ccs/lib `$getworkshoplibs` $loclibpth"
			fi
			# Sun CC doesn't support gcc attributes
			d_attribute_format='undef'
			d_attribute_malloc='undef'
			d_attribute_nonnull='undef'
			d_attribute_noreturn='undef'
			d_attribute_pure='undef'
			d_attribute_unused='undef'
			d_attribute_warn_unused_result='undef'
d574 3
a576 15
		getconfccflags="`getconf XBS5_LP64_OFF64_CFLAGS 2>/dev/null`"
		getconfldflags="`getconf XBS5_LP64_OFF64_LDFLAGS 2>/dev/null`"
		getconflddlflags="`getconf XBS5_LP64_OFF64_LDFLAGS 2>/dev/null`"
		echo "int main() { return(0); } " > try.c
		case "`${cc:-cc} $getconfccflags try.c 2>&1 | grep 'deprecated'`" in
		*" -xarch=generic64 is deprecated, use -m64 "*)
		    getconfccflags=`echo $getconfccflags | sed -e 's/xarch=generic64/m64/'`
		    getconfldflags=`echo $getconfldflags | sed -e 's/xarch=generic64/m64/'`
		    getconflddlflags=`echo $getconflddlflags | sed -e 's/xarch=generic64/m64/'`
		    ;;
		esac
		ccflags="$ccflags $getconfccflags"
		ldflags="$ldflags $getconfldflags"
		lddlflags="$lddlflags -G $getconflddlflags"

@


1.1.1.13
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d303 1
a303 1
		lddlflags="$lddlflags -Wl,-E -shared"
d330 12
a341 1
			ccversion="`${cc:-cc} -V 2>&1|sed -n -e '1s/^[Cc][Cc]: //p'`"
d344 1
a344 5
			ccversion="`${cc:-CC} -V 2>&1|sed -n -e '1s/^[Cc][C]: //p'`"
		fi
		case "$cc_name" in
		workshop*)
			# Settings for either cc or CC
d348 1
a348 1
			# Sun CC/cc don't support gcc attributes
d356 1
a356 2
			;;
		esac
d597 1
a597 11

		# See [perl #66604]:  On Solaris 11, gcc -m64 on amd64
		# appears not to understand -G.  (gcc -G has not caused
		# problems on other platforms in the past.)  gcc versions
		# at least as old as 3.4.3 support -shared, so just
		# use that with Solaris 11 and later, but keep
		# the old behavior for older Solaris versions.
		case "$osvers" in
			2.?|2.10) lddlflags="$lddlflags -G -m64" ;;
			*) lddlflags="$lddlflags -shared -m64" ;;
		esac
@


1.1.1.14
log
@Import perl-5.20.1
@
text
@d51 1
a51 1
case "`$run uname -r`" in
d93 3
a95 5
'')    for i in `ls -r /opt/solstudio*/bin/cc` /opt/SUNWspro/bin/cc
       do
	       if test -f "$i"; then
		       cc=$i
		       cat <<EOF >&4
d103 1
a103 3
			break
		fi
	done
d132 1
a132 1
$run mount | grep '^/dev/fd ' 2>&1 > /dev/null
d149 2
a150 11
found_libucb=''
case "$run" in
'') /usr/bin/ls /usr/lib/libucb* >/dev/null 2>&1
    found_libucb=$?
    ;;
*)  $run /usr/bin/ls '/usr/lib/libucb*' >/dev/null 2>&1
    found_libucb=$?
    ;;
esac

case $found_libucb in
d176 1
a176 1
    case "`${ls:-'/usr/bin/ls'} -lL $tmp`" in
d223 1
a223 1
	verbose=`${cc:-cc} $ccflags -v -o try try.c 2>&1`
d246 1
a246 1
	    # cc="${cc:-cc} $ccflags -B/usr/ccs/bin/"
d251 1
a251 1
	verbose=`${cc:-cc} $ccflags -v -o try try.c 2>&1 | grep ld 2>&1`
d274 1
a274 1
	    verbose=`${cc:-cc} $ccflags -Wl,-v -o try try.c 2>&1 | grep /ld 2>&1`
d326 1
a326 1
	tryworkshopcc="${cc:-cc} $ccflags try.c -o try"
d328 1
a328 1
		cc_name=`$run ./try`
d330 1
a330 1
			ccversion="`${cc:-cc} -V 2>&1|sed -n -e '1s/^[Cc][Cc9]9*: //p'`"
a348 13
			case "$cc" in
			*c99)	# c99 rejects bare '-O'.
				case "$optimize" in
				''|-O) optimize=-O3 ;;
				esac
				# Without -Xa c99 doesn't see
				# many OS interfaces.
				case "$ccflags" in
				*-Xa*)	;;
				*) ccflags="$ccflags -Xa" ;;
				esac
				;;
			esac
d471 3
a473 3
ccflags_uselargefiles="`$run getconf LFS_CFLAGS 2>/dev/null`"
ldflags_uselargefiles="`$run getconf LFS_LDFLAGS 2>/dev/null`"
libswanted_uselargefiles="`$run getconf LFS_LIBS 2>/dev/null|sed -e 's@@^-l@@@@' -e 's@@ -l@@ @@g'`"
d490 1
a490 1
if test `$run uname -p` = i386; then
d498 1
a498 1
if test `$run uname -p` = sparc -o `$run uname -p` = i386; then
d504 1
a504 1
	    case "`$run uname -r`" in
d539 1
a539 1
	    case "`$run uname -r`" in
d548 1
a548 1
	    processor=`$run uname -p`;
d564 1
a564 1
		case "`${cc:-cc} $ccflags -mcpu=v9 -m64 -S try.c 2>&1 | grep 'm64 is not supported by this configuration'`" in
d587 2
a588 2
#		if test $processor = sparc -a X`$run getconf XBS5_LP64_OFF64_CFLAGS 2>/dev/null` != X; then
#		    ccflags="$ccflags -Wa,`$run getconf XBS5_LP64_OFF64_CFLAGS 2>/dev/null`"
d604 3
a606 3
		getconfccflags="`$run getconf XBS5_LP64_OFF64_CFLAGS 2>/dev/null`"
		getconfldflags="`$run getconf XBS5_LP64_OFF64_LDFLAGS 2>/dev/null`"
		getconflddlflags="`$run getconf XBS5_LP64_OFF64_LDFLAGS 2>/dev/null`"
d680 1
a680 1
    `expr "$ccflags" : '.*-DPERL_USE_SAFE_PUTENV'` -eq 0; then
@


