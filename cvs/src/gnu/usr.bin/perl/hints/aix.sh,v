head	1.16;
access;
symbols
	OPENBSD_6_1:1.16.0.2
	OPENBSD_6_1_BASE:1.16
	OPENBSD_6_0:1.15.0.12
	OPENBSD_6_0_BASE:1.15
	OPENBSD_5_9:1.15.0.6
	OPENBSD_5_9_BASE:1.15
	OPENBSD_5_8:1.15.0.8
	OPENBSD_5_8_BASE:1.15
	PERL_5_20_2:1.1.1.14
	OPENBSD_5_7:1.15.0.2
	OPENBSD_5_7_BASE:1.15
	PERL_5_20_1:1.1.1.14
	OPENBSD_5_6:1.15.0.4
	OPENBSD_5_6_BASE:1.15
	PERL_5_18_2:1.1.1.14
	PERL:1.1.1
	OPENBSD_5_5:1.14.0.6
	OPENBSD_5_5_BASE:1.14
	OPENBSD_5_4:1.14.0.2
	OPENBSD_5_4_BASE:1.14
	PERL_5_16_3:1.1.1.13
	OPENBSD_5_3:1.13.0.10
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.13.0.8
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.6
	OPENBSD_5_0:1.13.0.4
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.13.0.2
	OPENBSD_4_9_BASE:1.13
	PERL_5_12_2:1.1.1.12
	OPENBSD_4_8:1.12.0.4
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.2
	OPENBSD_4_7_BASE:1.12
	PERL_5_10_1:1.1.1.11
	OPENBSD_4_6:1.11.0.6
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.2
	OPENBSD_4_5_BASE:1.11
	PERL_5_10_0:1.1.1.10
	OPENBSD_4_4:1.10.0.10
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.8
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.6
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.4
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.2
	OPENBSD_4_0_BASE:1.10
	PERL_5_8_8:1.1.1.9
	OPENBSD_3_9:1.9.0.6
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.4
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.2
	OPENBSD_3_7_BASE:1.9
	PERL_5_8_6:1.1.1.8
	OPENBSD_3_6:1.8.0.2
	OPENBSD_3_6_BASE:1.8
	PERL_5_8_5:1.1.1.7
	PERL_5_8_3:1.1.1.6
	OPENBSD_3_5:1.7.0.2
	OPENBSD_3_5_BASE:1.7
	PERL_5_8_2:1.1.1.6
	OPENBSD_3_4:1.6.0.4
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.6.0.2
	OPENBSD_3_3_BASE:1.6
	PERL_5_8_0:1.1.1.5
	OPENBSD_3_2:1.5.0.6
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.4
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	PERL_5_6_1:1.1.1.4
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	PERL_5_6_0:1.1.1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	PERL_500503:1.1.1.2
	CPAN:1.1.1
	OPENBSD_2_5:1.2.0.6
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.4
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	perl5003:1.1.1.1
	lwall:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.16
date	2017.02.05.00.32.14;	author afresh1;	state Exp;
branches;
next	1.15;
commitid	cxJ08BvJA9Pt2PTM;

1.15
date	2014.03.24.15.05.27;	author afresh1;	state Exp;
branches;
next	1.14;

1.14
date	2013.03.25.20.40.55;	author sthen;	state Exp;
branches;
next	1.13;

1.13
date	2010.09.24.15.06.58;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2009.10.12.18.24.37;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2008.09.29.17.36.07;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2006.03.28.19.23.04;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2005.01.15.21.30.29;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2004.08.09.18.09.26;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2003.12.03.03.02.34;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.10.27.22.25.24;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.24.18.35.18;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.06.17.05.41;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	99.04.29.22.51.37;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.11.30.07.56.01;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.08.19.10.12.21;	author downsj;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.08.19.10.12.21;	author downsj;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.04.29.22.39.27;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2000.04.06.16.09.26;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2001.05.24.18.23.07;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2002.10.27.22.14.56;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2003.12.03.02.43.56;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2004.08.09.17.47.56;	author millert;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2005.01.15.21.17.04;	author millert;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2006.03.28.18.48.27;	author millert;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	2008.09.29.17.18.27;	author millert;	state Exp;
branches;
next	1.1.1.11;

1.1.1.11
date	2009.10.12.18.10.47;	author millert;	state Exp;
branches;
next	1.1.1.12;

1.1.1.12
date	2010.09.24.14.48.55;	author millert;	state Exp;
branches;
next	1.1.1.13;

1.1.1.13
date	2013.03.25.20.08.47;	author sthen;	state Exp;
branches;
next	1.1.1.14;

1.1.1.14
date	2014.03.24.14.59.02;	author afresh1;	state Exp;
branches;
next	;


desc
@@


1.16
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@# hints/aix.sh

# AIX 3 and AIX 4 are split off to aix_3.sh and aix_4.sh
#    early Feb 2004 by H.Merijn Brand
# please read comments in there for historic questions.
#    many now stripped here

# Contact dfavor@@corridor.com for any of the following:
#
#    - AIX 43x and above support
#    - gcc + threads support
#    - socks support
#
# Notes:
#
#    - shared libperl support is tricky. if ever libperl.a ends up
#      in /usr/local/lib/* it can override any subsequent builds of
#      that same perl release. to make sure you know where the shared
#      libperl.a is coming from do a 'dump -Hv perl' and check all the
#      library search paths in the loader header.
#
#      it would be nice to warn the user if a libperl.a exists that is
#      going to override the current build, but that would be complex.
#
#      better yet, a solid fix for this situation should be developed.
#

# Configure finds setrgid and setruid, but they're useless.  The man
# pages state:
#    setrgid: The EPERM error code is always returned.
#    setruid: The EPERM error code is always returned. Processes cannot
#	      reset only their real user IDs.
d_setrgid='undef'
d_setruid='undef'

alignbytes=8
case "$usemymalloc" in
    '')  usemymalloc='n' ;;
    esac

# malloc wrap works, but not in vac-5, see later
case "$usemallocwrap" in
    '') usemallocwrap='define' ;;
    esac

# Intuiting the existence of system calls under AIX is difficult,
# at best; the safest technique is to find them empirically.

case "$usenativedlopen" in
    '') usenativedlopen='true' ;;
    esac

so="a"
# AIX itself uses .o (libc.o) but we prefer compatibility
# with the rest of the world and with rest of the scripting
# languages (Tcl, Python) and related systems (SWIG).
# Stephanie Beals <bealzy@@us.ibm.com>
dlext="so"

# Take possible hint from the environment.  If 32-bit is set in the
# environment, we can override it later.  If set for 64, the
# 'sizeof' test sees a native 64-bit architecture and never looks back.
case "$OBJECT_MODE" in
    32) cat >&4 <<EOF

You have OBJECT_MODE=32 set in the environment.
I take this as a hint you do not want to
build for a 64-bit address space. You will be
given the opportunity to change this later.
EOF
	;;
    64) cat >&4 <<EOF

You have OBJECT_MODE=64 set in the environment.
This forces a full 64-bit build.  If that is
not what you intended, please terminate this
program, unset it and restart.
EOF
	;;
    esac

 s=`lslpp -lc bos.adt.libm >/dev/null`
if [ $? != 0 ]; then
    echo "You cannot build perl without the bos.adt.libm package installed" >&4
    exit
    fi

# uname -m output is too specific and not appropriate here
case "$archname" in
    '') archname="$osname" ;;
    esac

cc=${cc:-cc}

ccflags="$ccflags -D_ALL_SOURCE -D_ANSI_C_SOURCE -D_POSIX_SOURCE"
case "$cc" in
    *gcc*) ;;
    *) ccflags="$ccflags -qmaxmem=-1 -qnoansialias -qlanglvl=extc99" ;;
    esac
nm_opt='-B'

# These functions don't work like Perl expects them to.
d_setregid='undef'
d_setreuid='undef'

# Changes for dynamic linking by Wayne Scott <wscott@@ichips.intel.com>
#
# Tell perl which symbols to export for dynamic linking.
cccdlflags='none'	# All AIX code is position independent
   cc_type=xlc		# do not export to config.sh
case "$cc" in
    *gcc*)
	cc_type=gcc
	ccdlflags='-Xlinker'
	if [ "X$gccversion" = "X" ]; then
	    # Done too late in Configure if hinted
	    gccversion=`$cc -dumpversion`
	    fi
	;;

    *)  ccversion=`lslpp -ql -Ou vac.C | grep -v '^Path' | head -1 | awk '{print $1,$2}'`
	case "$ccversion" in
	    '') ccversion=`lslpp -L | grep 'IBM C and C++ Compilers LUM$'` ;;

	    *.*.*.*.*.*.*)	# Ahhrgg, more than one C compiler installed
		first_cc_path=`which ${cc:-cc}`
		case "$first_cc_path" in
		    *vac*)
			cc_type=vac ;;

		    /usr/bin/cc)		# Check the symlink
			if [ -h $first_cc_path ] ; then
			    ls -l $first_cc_path > reflect
			    if grep -i vac reflect >/dev/null 2>&1 ; then
				cc_type=vac
				fi
			    rm -f reflect
			    fi
			;;
		    esac
		ccversion=`lslpp -L | grep 'C for AIX Compiler$' | grep -i $cc_type | head -1`
		;;

	    vac*.*.*.*)
		cc_type=vac
		;;
	    esac

	ccversion=`echo "$ccversion" | awk '{print $2}'`
	# Redbooks state AIX-5 only supports vac-5.0.2.0 and up
	case "$ccversion" in
	    5*) usemallocwrap='n' ;; # panic in miniperl
	    esac
	;;
    esac

# the required -bE:$installarchlib/CORE/perl.exp is added by
# libperl.U (Configure) later.

# The first 3 options would not be needed if dynamic libs. could be linked
# with the compiler instead of ld.
# -bI:$(PERL_INC)/perl.exp  Read the exported symbols from the perl binary
# -bE:$(BASEEXT).exp	    Export these symbols.  This file contains only one
#			    symbol: boot_$(EXP)	 can it be auto-generated?
if test $usenativedlopen = 'true' ; then
    lddlflags="$lddlflags -bhalt:4 -G -bI:\$(PERL_INC)/perl.exp -bE:\$(BASEEXT).exp -bnoentry -lc -lm"
else
    lddlflags="$lddlflags -bhalt:4 -bM:SRE -bI:\$(PERL_INC)/perl.exp -bE:\$(BASEEXT).exp -bnoentry -lc"
    fi

case "$use64bitall" in
    $define|true|[yY]*) use64bitint="$define" ;;
    esac

case "$usemorebits" in
    $define|true|[yY]*) use64bitint="$define"; uselongdouble="$define" ;;
    esac

case $cc_type in
    vac|xlc)
	case "$uselongdouble" in
	    $define|true|[yY]*)
		ccflags="$ccflags -qlongdouble"
		libswanted="c128 $libswanted"
		lddlflags=`echo "$lddlflags " | sed -e 's/ -lc / -lc128 -lc /'`
		;;
	    esac
	;;
    esac

case "$cc" in
    *gcc*) ;;

    cc*|xlc*) # cc should've been set by line 116 or so if empty.
	if test ! -x /usr/bin/$cc -a -x /usr/vac/bin/$cc; then
	    case ":$PATH:" in
		*:/usr/vac/bin:*) ;;
		*)  if test ! -x /QOpenSys/usr/bin/$cc; then
			# The /QOpenSys/usr/bin/$cc saves us if we are
			# building natively in OS/400 PASE.
			cat >&4 <<EOF

***
*** You either implicitly or explicitly specified an IBM C compiler,
*** but you do not seem to have one in /usr/bin, but you seem to have
*** the VAC installed in /usr/vac, but you do not have the /usr/vac/bin
*** in your PATH.  I suggest adding that and retrying Configure.
***
EOF
			exit 1
			fi
		    ;;
		esac
	    fi
	;;
    esac

case "$ldlibpthname" in
    '') ldlibpthname=LIBPATH ;;
    esac

# This script UU/usethreads.cbu will get 'called-back' by Configure
# after it has prompted the user for whether to use threads.
cat > UU/usethreads.cbu <<'EOCBU'
case "$usethreads" in
    $define|true|[yY]*)
	d_drand48_r='undef'
	d_endgrent_r='undef'
	d_endpwent_r='undef'
	d_getgrent_r='undef'
	d_getpwent_r='undef'
	d_random_r='undef'
	d_setgrent_r='undef'
	d_setpwent_r='undef'
	d_srand48_r='undef'
	d_srandom_r='undef'
	d_strerror_r='undef'

	ccflags="$ccflags -DNEED_PTHREAD_INIT"
	case "$cc" in
	    *gcc*) 
	      ccflags="-D_THREAD_SAFE $ccflags" 
	      ;;
	    cc_r) 
	      ;;
	    xlc_r) 
	      ;;
	    # we do not need the C++ compiler
	    xlC_r) 
	      cc=xlc_r 
	      ;;
	    '') 
	      cc=cc_r 
	      ;;
	    *)
	esac

	# Insert pthreads to libswanted, before any libc or libC.
	set `echo X "$libswanted "| sed -e 's/ \([cC]\) / pthreads \1 /'`
	shift
	libswanted="$*"
	# Insert pthreads to lddlflags, before any libc or libC.
	set `echo X "$lddlflags " | sed -e 's/ \(-l[cC]\) / -lpthreads \1 /'`
	shift
	lddlflags="$*"
	;;
    *)
	case "$cc" in
	    xlc) 
	      ;;
	    # we do not need the C++ compiler
	    xlC) 
	      cc=xlc 
	      ;;
	    *)
	esac
	;;
esac
EOCBU

# This script UU/uselargefiles.cbu will get 'called-back' by Configure
# after it has prompted the user for whether to use large files.
cat > UU/uselargefiles.cbu <<'EOCBU'
case "$uselargefiles" in
    ''|$define|true|[yY]*)
	# Configure should take care of use64bitint and use64bitall being
	# defined before uselargefiles.cbu is consulted.
	if test X"$use64bitint:$quadtype" = X"$define:long" -o X"$use64bitall" = Xdefine; then
# Keep these at the left margin.
ccflags_uselargefiles="`getconf XBS5_LP64_OFF64_CFLAGS 2>/dev/null`"
ldflags_uselargefiles="`getconf XBS5_LP64_OFF64_LDFLAGS 2>/dev/null`"
	else
# Keep these at the left margin.
ccflags_uselargefiles="`getconf XBS5_ILP32_OFFBIG_CFLAGS 2>/dev/null`"
ldflags_uselargefiles="`getconf XBS5_ILP32_OFFBIG_LDFLAGS 2>/dev/null`"
	    fi
	if test X"$use64bitint:$quadtype" = X"$define:long" -o X"$use64bitall" = Xdefine; then
# Keep this at the left margin.
libswanted_uselargefiles="`getconf XBS5_LP64_OFF64_LIBS 2>/dev/null|sed -e 's@@^-l@@@@' -e 's@@ -l@@ @@g'`"
	else
# Keep this at the left margin.
libswanted_uselargefiles="`getconf XBS5_ILP32_OFFBIG_LIBS 2>/dev/null|sed -e 's@@^-l@@@@' -e 's@@ -l@@ @@g'`"
	    fi

	case "$ccflags_uselargefiles$ldflags_uselargefiles$libs_uselargefiles" in
	    '') ;;
	    *)  ccflags="$ccflags $ccflags_uselargefiles"
		ldflags="$ldflags $ldflags_uselargefiles"
		libswanted="$libswanted $libswanted_uselargefiles"
		;;
	    esac

	# -bmaxdata:0x80000000
	# - This increases the size of heap memory available to perl.
	#   Default is 256 MB, which sounds large but caused a software
	#   vendor problems. So this sets heap to 2 GB maximum. Anything
	#   higher and you'd want to consider 64 bit perl.
	# - NOTE however, that setting this in 64bit mode will limit your
	#   amount of available memory to 2GB, so we set this only in
	#   32bit mode to avoid future problems a la "should be enough
	#   for everyone" ...
	#
	case "$use64bitall" in
	    $define|true|[yY]*)
		:
		;;
	    *)
	    	ldflags="$ldflags -bmaxdata:0x80000000"
		;;
	    esac

	case "$gccversion" in
	    '') # Not using gcc.
	    	# Due to calling $cc without $cflags when linking some
		# binaries we need to hardwire $cc to the right mode.
		# The correct fix would be to have Makefile.SH not set
		# CLDFLAGS from $ldflags ...
		case "$use64bitall" in
		    $define|true|[yY]*) cc="$cc -q64"	;;
		    *)			cc="$cc -q32"	;;
		    esac
                # Some 32-bit getconfs will set ccflags to include -qlonglong
                # but that's no longer needed with an explicit -qextc99.
                ccflags="`echo $ccflags | sed -e 's@@ -qlonglong@@@@'`"
		;;
	    *)  # Remove xlc-specific -qflags.
		ccflags="`echo $ccflags | sed -e 's@@ -q[^ ]*@@ @@g' -e 's@@^-q[^ ]* @@@@g'`"
		ldflags="`echo $ldflags | sed -e 's@@ -q[^ ]*@@ @@g' -e 's@@^-q[^ ]* @@@@g'`"
		# Move xlc-specific -bflags.
		ccflags="`echo $ccflags | sed -e 's@@ -b@@ -Wl,-b@@g'`"
		ldflags="`echo ' '$ldflags | sed -e 's@@ -b@@ -Wl,-b@@g'`"
		lddlflags="`echo ' '$lddlflags | sed -e 's@@ -b@@ -Wl,-b@@g'`"
		lddlflags="`echo ' '$lddlflags | sed -e 's@@ -G @@ -Wl,-G @@g'`"

	    	# Due to calling $cc without $cflags when linking some
		# binaries we need to hardwire $cc to the right mode.
		case "$use64bitall" in
		    $define|true|[yY]*)
			cc="$cc -maix64"
			ld="$cc"
			;;
		    *)
			cc="$cc -maix32"
			ld="$cc"
			;;
		    esac
		echo >&4 "(using ccflags   $ccflags)"
		echo >&4 "(using ldflags   $ldflags)"
		echo >&4 "(using lddlflags $lddlflags)"
		;;
	    esac
	;;
    esac
EOCBU

cat > UU/use64bitall.cbu <<'EOCBU'
# This script UU/use64bitall.cbu will get 'called-back' by Configure
# after it has prompted the user for whether to be maximally 64-bitty.
case "$use64bitall" in
    $define|true|[yY]*)
	echo " "
	echo "Checking the CPU width of your hardware..." >&4
	$cat >size.c <<EOCP
#include <stdio.h>
#include <sys/systemcfg.h>
int main (void)
{
    printf ("%d\n", _system_configuration.width);
    return (0);
    }
EOCP
	set size
	if eval $compile_ok; then
	    qacpuwidth=`./size`
	    echo "You are running on $qacpuwidth bit hardware."
	else
	    dflt="32"
	    echo " "
	    echo "(I can't seem to compile the test program.  Guessing...)"
	    rp="What is the width of your CPU (in bits)?"
	    . ./myread
	    qacpuwidth="$ans"
	    fi
	$rm -f size.c size

	case "$qacpuwidth" in
	    32*)
		cat >&4 <<EOM
Bzzzt! At present, you can only perform a
full 64-bit build on a 64-bit machine.
EOM
		exit 1
		;;
	    esac
	qacflags="`getconf XBS5_LP64_OFF64_CFLAGS 2>/dev/null`"
	qaldflags="`getconf XBS5_LP64_OFF64_LDFLAGS 2>/dev/null`"
	# See jhi's comments above regarding this re-eval.  I've
	# seen similar weirdness in the form of:
	#
# 1506-173 (W) Option lm is not valid.  Enter xlc for list of valid options.
	#
	# error messages from 'cc -E' invocation. Again, the offending
	# string is simply not detectable by any means.  Since it doesn't
	# do any harm, I didn't pursue it. -- sh
	qaldflags="`echo $qaldflags`"
	qalibs="`getconf XBS5_LP64_OFF64_LIBS 2>/dev/null|sed -e 's@@^-l@@@@' -e 's@@ -l@@ @@g'`"
	# -q32 and -b32 may have been set by uselargefiles or user.
	# Remove them.
	ccflags="`echo $ccflags | sed -e 's@@-q32@@@@'`"
	ldflags="`echo $ldflags | sed -e 's@@-b32@@@@'`"
	case "$cc" in
	    *gcc*)
		ccflags="`echo $ccflags | sed -e 's@@-q64@@-maix64@@'`"
		ccflags_uselargefiles="`echo $ccflags_uselargefiles | sed -e 's@@-q64@@-maix64@@'`"
		qacflags="`echo $qacflags | sed -e 's@@-q64@@-maix64@@'`"
		;;
	    esac
	# Tell archiver to use large format.  Unless we remove 'ar'
	# from 'trylist', the Configure script will just reset it to 'ar'
	# immediately prior to writing config.sh.  This took me hours
	# to figure out.
	trylist="`echo $trylist | sed -e 's@@^ar @@@@' -e 's@@ ar @@ @@g' -e 's@@ ar$@@@@'`"
	ar="ar -X64"
	nm_opt="-X64 $nm_opt"
	case "$qacflags$qaldflags$qalibs" in
	    '') ;;
	    *)  ccflags="$ccflags $qacflags"
		ldflags="$ldflags"
		lddlflags="$qaldflags $lddlflags"
		libswanted="$libswanted $qalibs"
		;;
	    esac
	case "$ccflags" in
	    *-DUSE_64_BIT_ALL*) ;;
	    *) ccflags="$ccflags -DUSE_64_BIT_ALL";;
	    esac
	case "$archname64" in
	    ''|64*) archname64=64all ;;
	    esac
	longsize="8"
	qacflags=''
	qaldflags=''
	qalibs=''
	qacpuwidth=''
	;;
    esac
EOCBU

if test $usenativedlopen = 'true' ; then
    ccflags="$ccflags -DUSE_NATIVE_DLOPEN"
    # -brtl		    Enables a binary to use run time linking
    # -bdynamic		    When used with -brtl, tells linker to search for
    #			    ".so"-suffix libraries as well as ".a" suffix
    #			    libraries. AIX allows both .so and .a libraries to
    #			    contain dynamic shared objects.
    case "$cc" in
	*gcc*) ldflags="$ldflags -Wl,-brtl -Wl,-bdynamic" ;;
	*)     ldflags="$ldflags -brtl -bdynamic" ;;
	esac
elif test -f /lib/libC.a -a X"`$cc -v 2>&1 | grep gcc`" = X; then
    # If the C++ libraries, libC and libC_r, are available we will
    # prefer them over the vanilla libc, because the libC contain
    # loadAndInit() and terminateAndUnload() which work correctly
    # with C++ statics while libc load() and unload() do not. See
    # ext/DynaLoader/dl_aix.xs. The C-to-C_r switch is done by
    # usethreads.cbu, if needed.

    # Cify libswanted.
    set `echo X "$libswanted "| sed -e 's/ c / C c /'`
    shift
    libswanted="$*"
    # Cify lddlflags.
    set `echo X "$lddlflags "| sed -e 's/ -lc / -lC -lc /'`
    shift
    lddlflags="$*"
    fi

case "$PASE" in
    define)
	case "$prefix" in
	    '') prefix=/QOpenSys/perl ;;
	    esac
	cat >&4 <<EOF

***
*** You seem to be compiling in AIX for the OS/400 PASE environment.
*** I'm not going to use the AIX bind, nsl, and possible util libraries, then.
*** I'm also not going to install perl as /usr/bin/perl.
*** Perl will be installed under $prefix.
*** For instructions how to install this build from AIX to PASE,
*** see the file README.os400.  Accept the "aix" for the question
*** about "Operating system name".
***
EOF
	set `echo " $libswanted " | sed -e 's@@ bind @@ @@' -e 's@@ nsl @@ @@' -e 's@@ util @@ @@'`
	shift
	libswanted="$*"
	installusrbinperl="$undef"

	# V5R1 doesn't have this (V5R2 does), without knowing
	# which one we have it's safer to be pessimistic.
	# Cwd will work fine even without fchdir(), but if
	# V5R1 tries to use code compiled assuming fchdir(),
	# lots of grief will issue forth from Cwd.
	case "$d_fchdir" in
	    '') d_fchdir="$undef" ;;
	    esac
	;;
    esac

# remove libbsd.a from wanted libraries
libswanted=`echo " $libswanted " | sed -e 's/ bsd / /'`
libswanted=`echo " $libswanted " | sed -e 's/ BSD / /'`
d_flock='undef'

# remove libgdbm from wanted libraries
# The libgdbm < 1.8.3-5 from the AIX Toolbox is not working
# because two wrong .h are present
if [ -f "/opt/freeware/include/gdbm/dbm.h" ] ||
   [ -f "/opt/freeware/include/gdbm/ndbm.h" ]; then
    echo "GDBM support disabled because your GDBM package contains extraneous headers - see README.aix."
    libswanted=`echo " $libswanted " | sed -e 's/ gdbm / /'`
    i_gdbm='undef'
    i_gdbmndbm='undef'
fi

# Some releases (and patch levels) of AIX cannot have both
# long doubles and infinity (infinity plus one equals ... NaNQ!)
#
# This deficiency, and others, is apparently a well-documented feature
# of AIX 128-bit long doubles:
#
# http://www-01.ibm.com/support/knowledgecenter/ssw_aix_61/com.ibm.aix.genprogc/128bit_long_double_floating-point_datatype.htm
#
# The URL seems to be fragile, it has moved around over the years,
# but searching AIX docs at ibm.com for "128-bit long double
# floating-point data type" should surface the latest info.
#
# Some salient points:
#
# <quote>
# * The 128-bit implementation differs from the IEEE standard for long double
#   in the following ways:
# * Supports only round-to-nearest mode. If the application changes
#   the rounding mode, results are undefined.
# * Does not fully support the IEEE special numbers NaN and INF.
# * Does not support IEEE status flags for overflow, underflow,
#   and other conditions. These flags have no meaning for the 128-bit
#   long double inplementation.
# * The 128-bit long double data type does not support the following math
#   APIs: atanhl, cbrtl, copysignl, exp2l, expm1l, fdiml, fmal, fmaxl,
#   fminl, hypotl, ilogbl, llrintl, llroundl, log1pl, log2l, logbl,
#   lrintl, lroundl, nanl, nearbyintl, nextafterl, nexttoward,
#   nexttowardf, nexttowardl, remainderl, remquol, rintl, roundl,
#   scalblnl, scalbnl, tgammal, and truncl.
# * The representation of 128-bit long double numbers means that the
#   following macros required by standard C in the values.h file do not
#   have clear meaning:
#   * Number of bits in the mantissa (LDBL_MANT_DIG)
#   * Epsilon (LBDL_EPSILON)
#   * Maximum representable finite value (LDBL_MAX)
# </quote>
#
# The missing math functions affect the POSIX extension math interfaces.

case "$uselongdouble" in
'')
  echo "Checking if your infinity is working with long doubles..." >&4
  cat > inf$$.c <<EOF
#include <math.h>
#include <stdio.h>
int main() {
  long double inf = INFINITY;
  long double one = 1.0L;
  printf("%Lg\n", inf + one);
}
EOF
  $cc -qlongdouble -o inf$$ inf$$.c -lm
  case `./inf$$` in
  INF) echo "Your infinity is working correctly with long doubles." >&4 ;;
  *) # NaNQ (or anything else than INF)
    echo " "
    echo "Your infinity is broken, I suggest disabling long doubles." >&4
    rp="Disable long doubles?"
    dflt="y"
    . UU/myread
    case "$ans" in
    [Yy]*)
      echo "Okay, disabling long doubles." >&4
      uselongdouble="$undef"
      ccflags=`echo " $ccflags " | sed -e 's/ -qlongdouble / /'`
      libswanted=`echo " $libswanted " | sed -e 's/ c128/ /'`
      lddlflags=`echo " $lddlflags " | sed -e 's/ -lc128 / /'`
      ;;
    *)
      echo "Okay, keeping long doubles enabled." >&4
      ;;
    esac
    ;;
  esac
  rm -f inf$$.c inf$$
  ;;
esac

# Some releases (and patch levels) of AIX have a broken powl().
pp_cflags=''
case "$uselongdouble" in
define)
  echo "Checking if your powl() is broken..." >&4
  cat > powl$$.c <<EOF
#include <math.h>
#include <stdio.h>
int main() {
  printf("%Lg\n", powl(-3.0L, 2.0L));
}
EOF
  case "$gccversion" in
  '') $cc -qlongdouble -o powl$$ powl$$.c -lm ;;
  *) $cc -o powl$$ powl$$.c -lm ;;
  esac
  case `./powl$$` in
  9) echo "Your powl() is working correctly." >&4 ;;
  *)
    echo "Your powl() is broken, will use a workaround." >&4
    pp_cflags='ccflags="$ccflags -DHAS_AIX_POWL_NEG_BASE_BUG"'
    ;;
  esac
  rm -f powl$$.c powl$$
  ;;
esac

# Some releases of AIX cc/xlc a broken fmodl(), but -q64 seems to help.
case "$gccversion" in
'') case "$uselongdouble" in
   define)
     case "$ccflags" in
     *-q64*) ;;
     *) echo "Checking if your fmodl() is broken..." >&4
        cat > fmodl$$.c <<EOF
#include <math.h>
#include <stdio.h>
int main() {
  printf("%ld\n", (long)fmodl(powl(2, 31), (long double)4294967295));
}
EOF
        $cc -qlongdouble -o fmodl$$ fmodl$$.c -lm
        case `./fmodl$$` in
        2147483648) echo "Your fmodl() is working correctly." >&4 ;;
        *) echo "Your fmodl() is broken, will try with -q64..." >&4
           $cc -q64 -qlongdouble -o fmodl$$ fmodl$$.c -lm
           case `./fmodl$$` in
           2147483648)
             echo "The -q64 did the trick, will use it." >& 4
             ccflags="`echo $ccflags | sed -e 's@@-q32@@@@g'`"
             ldflags="`echo $ldflags | sed -e 's@@-q32@@@@g'`"
             ccflags="$ccflags -q64"
             ldflags="$ldflags -q64"
             ;;
           *) echo "Not even the -q64 worked.  I'm disabling long doubles." >&4
              echo "And you should have stern talk with your IBM rep." >&4
              uselongdouble="$undef"
              ccflags=`echo " $ccflags " | sed -e 's/ -qlongdouble / /'`
              libswanted=`echo " $libswanted " | sed -e 's/ c128/ /'`
              lddlflags=`echo " $lddlflags " | sed -e 's/ -lc128 / /'`
              ;;
           esac  # second fmodl$$
           ;;
        esac # first fmodl$$
        ;;
     esac # Checking if ...
     ;;
  esac # uselongdouble
  rm -f fmodl$$.c fmodl$$
  ;;
esac # not gcc


# EOF
@


1.15
log
@Merge perl-5.18.2 plus local patches, remove old files

OK espie@@ sthen@@ deraadt@@
@
text
@a36 1

d546 152
@


1.14
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@d345 1
a345 1
                ccflags="`echo $ccflags | sed -e 's@@ -qlonglong@@@@`"
@


1.13
log
@merge in perl 5.12.2 plus local changes
@
text
@d99 1
a99 1
    *) ccflags="$ccflags -qmaxmem=-1 -qnoansialias" ;;
a247 2
	      # for -qlonglong
	      ccflags="$ccflags -qlanglvl=extended"
a250 2
	      # for -qlonglong
	      ccflags="$ccflags -qlanglvl=extended"
a270 2
	      # for -qlonglong
	      ccflags="$ccflags -qlanglvl=extended"
a273 2
	      # for -qlonglong
	      ccflags="$ccflags -qlanglvl=extended"
d343 3
@


1.12
log
@Merge in perl 5.10.1
@
text
@d237 1
d543 9
a551 6
# The libgdbm 1.8.3 from the AIX Toolbox is not working 
# (the dbm_store() function is defective)
libswanted=`echo " $libswanted " | sed -e 's/ gdbm / /'`
i_gdbm='undef'
i_gdbmndbm='undef'

@


1.11
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@d83 6
d167 1
a167 1
    lddlflags="$lddlflags -bhalt:4 -bexpall -G -bnoentry -lc"
d241 18
a258 5
	    *gcc*) ccflags="-D_THREAD_SAFE $ccflags" ;;

	    cc_r) ;;
	    '') cc=cc_r ;;

a259 25


	    # No | alternation in aix sed. :-(
	    newcc=`echo $cc | sed -e 's/cc$/cc_r/' -e 's/xl[cC]$/cc_r/' -e 's/xl[cC]_r$/cc_r/'`
	    case "$newcc" in
		$cc) # No change
		;;

		*cc_r)
		echo >&4 "Switching cc to cc_r because of POSIX threads."
		# xlc_r has been known to produce buggy code in AIX 4.3.2.
		# (e.g. pragma/overload core dumps)	 Let's suspect xlC_r, too.
		# --jhi@@iki.fi
		cc="$newcc"
		;;

		*)
		cat >&4 <<EOM
*** For pthreads you should use the AIX C compiler cc_r.
*** (now your compiler was set to '$cc')
*** Cannot continue, aborting.
EOM
		exit 1
		;;
	    esac
d271 15
d307 1
a307 1
libswanted_uselargefiles="`getconf XBS5_LP64_OFF64_LIBS 2>/dev/null|sed -e 's@@^-l@@@@' -e 's@@ -l@@ @@g`"
d310 1
a310 1
libswanted_uselargefiles="`getconf XBS5_ILP32_OFFBIG_LIBS 2>/dev/null|sed -e 's@@^-l@@@@' -e 's@@ -l@@ @@g`"
d431 1
a431 1
	qalibs="`getconf XBS5_LP64_OFF64_LIBS 2>/dev/null|sed -e 's@@^-l@@@@' -e 's@@ -l@@ @@g`"
d535 12
@


1.10
log
@merge in perl 5.8.8
@
text
@d112 1
a112 1
	    gccversion=`$cc --version | sed 's/.*(GCC) *//'`
d312 19
d332 10
a341 1
	    '') ;;
d350 3
d354 8
a361 2
		    $define|true|[yY]*) ld="$cc -maix64"	;;
		    *)			ld="$cc"		;;
a440 3
	# Note: Placing the 'qacflags' variable into the 'ldflags' string
	# is NOT a typo.  ldflags is passed to the C compiler for final
	# linking, and it wants -q64 (-b64 is for ld only!).
d444 1
a444 1
		ldflags="$ldflags $qacflags"
a471 5
    # -bmaxdata:0x80000000  This increases the size of heap memory available
    #			    to perl. Default is 256 MB, which sounds large but
    #			    caused a software vendor problems. So this sets
    #			    heap to 2 GB maximum. Anything higher and you'd
    #			    want to consider 64 bit perl.
d473 2
a474 2
	*gcc*) ldflags="$ldflags -Wl,-brtl -Wl,-bdynamic -Wl,-bmaxdata:0x80000000" ;;
	*)     ldflags="$ldflags -brtl -bdynamic -bmaxdata:0x80000000" ;;
@


1.9
log
@sync in-tree perl with 5.8.6
@
text
@d116 1
a116 1
    *)  ccversion=`lslpp -L | grep 'C for AIX Compiler$' | grep -v '\.msg\.[A-Za-z_]*\.' | head -1 | awk '{print $1,$2}'`
d323 2
a324 2
		    $define|true|[yY]*) ld="gcc -maix64"	;;
		    *)			ld="gcc"		;;
@


1.8
log
@merge 5.8.5 into HEAD
remove now-unused files
crank libperl shared library major number
update Makefile.bsd-wrapper
tweak openbsd hints file for arm and m68k
@
text
@d160 5
a164 1
lddlflags="$lddlflags -bhalt:4 -bM:SRE -bI:\$(PERL_INC)/perl.exp -bE:\$(BASEEXT).exp -bnoentry -lc"
d321 5
a325 1
		ld='gcc'
d390 7
d433 10
d444 2
a445 2
	*gcc*) ldflags="$ldflags -Wl,-brtl" ;;
	*)     ldflags="$ldflags -brtl" ;;
@


1.7
log
@Resolve conflicts for perl 5.8.2, remove old files, and add OpenBSD-specific scaffolding
@
text
@a1 7
# AIX 3.x.x hints thanks to Wayne Scott <wscott@@ichips.intel.com>
# AIX 4.1 hints thanks to Christopher Chan-Nui <channui@@austin.ibm.com>.
# AIX 4.1 pthreading by Christopher Chan-Nui <channui@@austin.ibm.com> and
#	  Jarkko Hietaniemi <jhi@@iki.fi>.
# AIX 4.3.x LP64 build by Steven Hirsch <hirschs@@btv.ibm.com>
# Merged on Mon Feb  6 10:22:35 EST 1995 by
#   Andy Dougherty  <doughera@@lafayette.edu>
d3 5
a7 1
#
a13 6
# Apr 99 changes:
#
#    - use nm in AIX 43x and above
#    - gcc + threads now builds
#    [(added support for socks) Jul 99 SOCKS support rewritten]
#
d39 7
a45 2
'')  usemymalloc='n' ;;
esac
d50 3
a52 17
# AIX 4.3.* and above default to letting Configure test if nm
# extraction will work.
case "$osvers" in
   3.*|4.1.*|4.2.*)
      case "$usenm" in
	  '') usenm='undef'
	  esac
      case "$usenativedlopen" in
	  '') usenativedlopen='false'
	  esac
      ;;
   *)
      case "$usenativedlopen" in
	  '') usenativedlopen='true'
	  esac
      ;;
esac
d65 1
a65 2
32)
    cat >&4 <<EOF
d67 1
a67 1
You have OBJECT_MODE=32 set in the environment. 
d72 2
a73 3
    ;;
64)
    cat >&4 <<EOF
d75 1
a75 1
You have OBJECT_MODE=64 set in the environment. 
d80 2
a81 8
    ;;
*)  ;;
esac

# Trying to set this breaks the POSIX.c compilation

# Make setsockopt work correctly.  See man page.
# ccflags='-D_BSD=44'
d85 2
a86 2
'') archname="$osname" ;;
esac
d90 4
a93 9
case "$osvers" in
3*) d_fchmod=undef
    ccflags="$ccflags -D_ALL_SOURCE"
    ;;
*)  # These hints at least work for 4.x, possibly other systems too.
    ccflags="$ccflags -D_ALL_SOURCE -D_ANSI_C_SOURCE -D_POSIX_SOURCE"
    case "$cc" in
     *gcc*) ;;
     *) ccflags="$ccflags -qmaxmem=16384 -qnoansialias" ;;
d95 1
a95 3
    nm_opt='-B'
    ;;
esac
d107 7
a113 37
*gcc*)
   cc_type=gcc
   ccdlflags='-Xlinker'
   if [ "X$gccversion" = "X" ]; then
     # Done too late in Configure if hinted
     gccversion=`$cc --version | sed 's/.*(GCC) *//'`
     fi
   ;;
*) ccversion=`lslpp -L | grep 'C for AIX Compiler$' | grep -v '\.msg\.[A-Za-z_]*\.' | head -1 | awk '{print $1,$2}'`
   case "$ccversion" in
     '') ccversion=`lslpp -L | grep 'IBM C and C++ Compilers LUM$'`
	 ;;
     *.*.*.*.*.*.*)		# Ahhrgg, more than one C compiler installed
	 first_cc_path=`which ${cc:-cc}`
	 case "$first_cc_path" in
	   *vac*)
	     cc_type=vac ;;
	   /usr/bin/cc)		# Check the symlink
	     if [ -h $first_cc_path ] ; then
	       ls -l $first_cc_path > reflect
	       if grep -i vac reflect >/dev/null 2>&1 ; then
		 cc_type=vac
		 fi
	       rm -f reflect
	       fi
	     ;;
	   esac
	 ccversion=`lslpp -L | grep 'C for AIX Compiler$' | grep -i $cc_type | head -1`
	 ;;
     vac*.*.*.*)
         cc_type=vac
	 ;;
     esac
   ccversion=`echo "$ccversion" | awk '{print $2}'`
   case "$ccversion" in
     3.6.6.0)
	optimize='none'
d115 34
a148 8
     4.4.0.0|4.4.0.1|4.4.0.2)
	cat >&4 <<EOF
***
*** This C compiler ($ccversion) is outdated.
***
*** Please upgrade to at least 4.4.0.3.
***
EOF
d150 2
a151 26
     5.0.0.0)
	cat >&4 <<EOF
***
*** This C compiler ($ccversion) is known to have too many optimizer
*** bugs to compile a working Perl.
***
*** Consider upgrading your C compiler, or getting the GNU cc (gcc).
***
*** Cannot continue, aborting.
EOF
	exit 1
	;;
     5.0.1.0)
	cat >&4 <<EOF
***
*** This C compiler ($ccversion) is known to have optimizer problems
*** when compiling regcomp.c.
***
*** Disabling optimization for that file but consider upgrading
*** your C compiler.
***
EOF
regcomp_cflags='optimize='
	;;
     esac
esac
d160 1
a160 8
case "$osvers" in
    3*) 
	lddlflags="$lddlflags -H512 -T512 -bhalt:4 -bM:SRE -bI:\$(PERL_INC)/perl.exp -bE:\$(BASEEXT).exp -e _nostart -lc"
	;;
    *) 
	lddlflags="$lddlflags -bhalt:4 -bM:SRE -bI:\$(PERL_INC)/perl.exp -bE:\$(BASEEXT).exp -bnoentry -lc"
	;;
    esac
d179 1
d183 3
a185 2
*gcc*) ;;
cc*|xlc*) # cc should've been set by line 116 or so if empty.
d187 1
a187 1
		case ":$PATH:" in
d189 1
a189 1
		*) if test ! -x /QOpenSys/usr/bin/$cc; then
d202 2
a203 2
		   fi 
		   ;;
d205 1
a205 1
	fi
d207 1
a207 1
esac
d210 1
a210 16
'') ldlibpthname=LIBPATH ;;
esac

# AIX 4.2 (using latest patchlevels on 20001130) has a broken bind
# library (getprotobyname and getprotobynumber are outversioned by
# the same calls in libc, at least for xlc version 3...
case "`oslevel`" in
    4.2.1.*)
      case "$ccversion" in    # Don't know if needed for gcc
          3.1.4.*|5.0.2.*)    # libswanted "bind ... c ..." => "... c bind ..."
              set `echo X "$libswanted "| sed -e 's/ bind\( .*\) \([cC]\) / \1 \2 bind /'`
              shift
              libswanted="$*"
              ;;
          esac
      ;;
d213 1
a213 1
# This script UU/usethreads.cbu will get 'called-back' by Configure 
d217 12
a228 1
$define|true|[yY]*)
d231 21
a251 22
	*gcc*)
	    ccflags="-D_THREAD_SAFE $ccflags"
	    echo "GCC $gccversion disabling some _r functions" >&4
	    case "$gccversion" in
		3*) d_drand48_r='undef'
		    d_endgrent_r='undef'
		    d_endpwent_r='undef'
		    d_getgrent_r='undef'
		    d_getpwent_r='undef'
		    d_random_r='undef'
		    d_srand48_r='undef'
		    d_strerror_r='undef'
		    ;;
		esac
	    ;;
	cc_r) ;;
	cc|xl[cC]_r) 
	    echo >&4 "Switching cc to cc_r because of POSIX threads."
	    # xlc_r has been known to produce buggy code in AIX 4.3.2.
	    # (e.g. pragma/overload core dumps)	 Let's suspect xlC_r, too.
	    # --jhi@@iki.fi
	    cc=cc_r
d253 2
a254 9
	    case "`oslevel`" in
		4.2.1.*) i_crypt='undef' ;;
		esac
	    ;;
	'') 
	    cc=cc_r
	    ;;
	*)
	    cat >&4 <<EOM
d259 3
a261 2
	    exit 1
	    ;;
a263 9
	# c_rify libswanted.
	set `echo X "$libswanted "| sed -e 's/ \([cC]\) / \1_r /g'`
	shift
	libswanted="$*"
	# c_rify lddlflags.
	set `echo X "$lddlflags "| sed -e 's/ \(-l[cC]\) / \1_r /g'`
	shift
	lddlflags="$*"

d265 1
a265 1
	set `echo X "$libswanted "| sed -e 's/ \([cC]_r\) / pthreads \1 /'`
d269 1
a269 1
	set `echo X "$lddlflags " | sed -e 's/ \(-l[cC]_r\) / -lpthreads \1 /'`
a271 1

d276 1
a276 1
# This script UU/uselargefiles.cbu will get 'called-back' by Configure 
d280 4
a283 4
''|$define|true|[yY]*)
    # Configure should take care of use64bitint and use64bitall being
    # defined before uselargefiles.cbu is consulted.
    if test X"$use64bitint:$quadtype" = X"$define:long" -o X"$use64bitall" = Xdefine; then
d287 1
a287 1
    else
d291 2
a292 13
    fi
	# _Somehow_ in AIX 4.3.1.0 the above getconf call manages to
	# insert(?) *something* to $ldflags so that later (in Configure) evaluating
	# $ldflags causes a newline after the '-b64' (the result of the getconf).
	# (nothing strange shows up in $ldflags even in hexdump;
	#  so it may be something (a bug) in the shell, instead?)
	# Try it out: just uncomment the below line and rerun Configure:
# echo >&4 "AIX 4.3.1.0 $ldflags_uselargefiles mystery" ; exit 1
	# Just don't ask me how AIX does it, I spent hours wondering.
	# Therefore the line re-evaluating ldflags_uselargefiles: it seems to fix
	# the whatever it was that AIX managed to break. --jhi
	ldflags_uselargefiles="`echo $ldflags_uselargefiles`"
    if test X"$use64bitint:$quadtype" = X"$define:long" -o X"$use64bitall" = Xdefine; then
d295 1
a295 1
    else
d298 2
a299 1
    fi
d301 7
a307 6
	'');;
	*) ccflags="$ccflags $ccflags_uselargefiles"
	   ldflags="$ldflags $ldflags_uselargefiles"
	   libswanted="$libswanted $libswanted_uselargefiles"
	   ;;
	esac
d309 12
a320 30
	'') ;;
	*) # Remove xlc-specific -qflags.
	   ccflags="`echo $ccflags | sed -e 's@@ -q[^ ]*@@ @@g' -e 's@@^-q[^ ]* @@@@g'`"
	   ldflags="`echo $ldflags | sed -e 's@@ -q[^ ]*@@ @@g' -e 's@@^-q[^ ]* @@@@g'`"
	   # Move xlc-specific -bflags.
	   ccflags="`echo $ccflags | sed -e 's@@ -b@@ -Wl,-b@@g'`"
	   ldflags="`echo ' '$ldflags | sed -e 's@@ -b@@ -Wl,-b@@g'`"
	   lddlflags="`echo ' '$lddlflags | sed -e 's@@ -b@@ -Wl,-b@@g'`"
	   ld='gcc'
	   echo >&4 "(using ccflags   $ccflags)"
	   echo >&4 "(using ldflags   $ldflags)"
	   echo >&4 "(using lddlflags $lddlflags)"
	   ;; 
        esac
        ;;
esac
EOCBU

# This script UU/use64bitint.cbu will get 'called-back' by Configure 
# after it has prompted the user for whether to use 64 bit integers.
cat > UU/use64bitint.cbu <<'EOCBU'
case "$use64bitint" in
$define|true|[yY]*)
	    case "`oslevel`" in
	    3.*|4.[012].*)
		cat >&4 <<EOM
AIX `oslevel` does not support 64-bit interfaces.
You should upgrade to at least AIX 4.3.
EOM
		exit 1
d323 2
a324 2
	    ;;
esac
d328 1
a328 1
# This script UU/use64bitall.cbu will get 'called-back' by Configure 
d331 4
a334 13
$define|true|[yY]*)
	    case "`oslevel`" in
	    3.*|4.[012].*)
		cat >&4 <<EOM
AIX `oslevel` does not support 64-bit interfaces.
You should upgrade to at least AIX 4.3.
EOM
		exit 1
		;;
	    esac
	    echo " "
	    echo "Checking the CPU width of your hardware..." >&4
	    $cat >size.c <<EOCP
d339 3
a341 3
  printf("%d\n",_system_configuration.width);
  return(0);
}
d343 11
a353 11
	    set size
	    if eval $compile_ok; then
		qacpuwidth=`./size`
		echo "You are running on $qacpuwidth bit hardware."
	    else
		dflt="32"
		echo " "
		echo "(I can't seem to compile the test program.  Guessing...)"
		rp="What is the width of your CPU (in bits)?"
		. ./myread
		qacpuwidth="$ans"
d355 3
a357 2
	    $rm -f size.c size
	    case "$qacpuwidth" in
d366 5
a370 5
	    qacflags="`getconf XBS5_LP64_OFF64_CFLAGS 2>/dev/null`"
	    qaldflags="`getconf XBS5_LP64_OFF64_LDFLAGS 2>/dev/null`"
	    # See jhi's comments above regarding this re-eval.  I've
	    # seen similar weirdness in the form of:
	    #
d372 27
a398 27
	    #
	    # error messages from 'cc -E' invocation. Again, the offending
	    # string is simply not detectable by any means.  Since it doesn't
	    # do any harm, I didn't pursue it. -- sh
	    qaldflags="`echo $qaldflags`"
	    qalibs="`getconf XBS5_LP64_OFF64_LIBS 2>/dev/null|sed -e 's@@^-l@@@@' -e 's@@ -l@@ @@g`"
	    # -q32 and -b32 may have been set by uselargefiles or user.
    	    # Remove them.
	    ccflags="`echo $ccflags | sed -e 's@@-q32@@@@'`"
	    ldflags="`echo $ldflags | sed -e 's@@-b32@@@@'`"
	    # Tell archiver to use large format.  Unless we remove 'ar'
	    # from 'trylist', the Configure script will just reset it to 'ar'
	    # immediately prior to writing config.sh.  This took me hours
	    # to figure out.
	    trylist="`echo $trylist | sed -e 's@@^ar @@@@' -e 's@@ ar @@ @@g' -e 's@@ ar$@@@@'`"
	    ar="ar -X64"
	    nm_opt="-X64 $nm_opt"
	    # Note: Placing the 'qacflags' variable into the 'ldflags' string
	    # is NOT a typo.  ldflags is passed to the C compiler for final
	    # linking, and it wants -q64 (-b64 is for ld only!).
	    case "$qacflags$qaldflags$qalibs" in
	    '');;
	    *) ccflags="$ccflags $qacflags"
	       ldflags="$ldflags $qacflags"
	       lddlflags="$qaldflags $lddlflags"
	       libswanted="$libswanted $qalibs"
	       ;;
d400 1
a400 1
	    case "$ccflags" in
d402 1
a402 1
      	    *) ccflags="$ccflags -DUSE_64_BIT_ALL";;
d404 1
a404 1
	    case "$archname64" in
d407 7
a413 7
	    longsize="8"
	    qacflags=''
	    qaldflags=''
	    qalibs=''
	    qacpuwidth=''
	    ;;
esac
d416 1
a416 2
if test $usenativedlopen = 'true'
then
d419 2
a420 22
      *gcc*) ldflags="$ldflags -Wl,-brtl" ;;
      *)     ldflags="$ldflags -brtl" ;;
      esac
else
    case `oslevel` in
	4.2.*)	;;	# libC_r has broke gettimeofday
        *)  # If the C++ libraries, libC and libC_r, are available we will
	    # prefer them over the vanilla libc, because the libC contain
	    # loadAndInit() and terminateAndUnload() which work correctly
	    # with C++ statics while libc load() and unload() do not. See
	    # ext/DynaLoader/dl_aix.xs. The C-to-C_r switch is done by
	    # usethreads.cbu, if needed.
	    if test -f /lib/libC.a -a X"`$cc -v 2>&1 | grep gcc`" = X; then
		# Cify libswanted.
		set `echo X "$libswanted "| sed -e 's/ c / C c /'`
		shift
		libswanted="$*"
		# Cify lddlflags.
		set `echo X "$lddlflags "| sed -e 's/ -lc / -lC -lc /'`
		shift
		lddlflags="$*"
	    fi
d422 17
a438 1
fi
d441 1
a441 1
define)
d443 2
a444 2
	'') prefix=/QOpenSys/perl ;;
	esac
d468 2
a469 2
	'') d_fchdir="$undef" ;;
	esac
d471 1
a471 1
esac
@


1.6
log
@Resolve conflicts, remove old files, merge local changes
@
text
@d8 1
a8 1
#   Andy Dougherty  <doughera@@lafcol.lafayette.edu>
d54 2
a55 1
# AIX 4.3.* and above default to using nm for symbol extraction
a65 3
      case "$usenm" in
	  '') usenm='true'
	  esac
d137 2
a138 2
cccdlflags='none'      # All AIX code is position independent
cc_type=xlc
d145 1
a145 1
     gccversion=`$cc --version | sed 's/.*(GCC) *//`
d148 1
a148 1
*) ccversion=`lslpp -L | grep 'C for AIX Compiler$' | grep -v '\.msg\.[A-Za-z_]*\.' | awk '{print $2}'`
d150 1
a150 1
     '') ccversion=`lslpp -L | grep 'IBM C and C++ Compilers LUM$' | awk '{print $2}'`
d167 4
a170 1
	 ccversion=`lslpp -L | grep 'C for AIX Compiler$' | grep -i $cc_type | awk '{print $2}' | head -1`
d173 1
a215 4
case "$ldlibpthname" in
'') ldlibpthname=LIBPATH ;;
esac

d222 55
a276 6
3*) 
    lddlflags="$lddlflags -H512 -T512 -bhalt:4 -bM:SRE -bI:\$(PERL_INC)/perl.exp -bE:\$(BASEEXT).exp -e _nostart -lc"
    ;;
*) 
    lddlflags="$lddlflags -bhalt:4 -bM:SRE -bI:\$(PERL_INC)/perl.exp -bE:\$(BASEEXT).exp -bnoentry -lc"
    ;;
d278 1
d302 2
a303 1
echo "GCC $gccversion disabling some _r functions" >&4
d406 1
a406 1
	*) # Remove xlc-spefific -qflags.
d409 1
a409 1
	   # Move xld-spefific -bflags.
d566 33
@


1.5
log
@merge in perl 5.6.1 with our local changes
@
text
@d57 6
a62 1
      usenm='undef'
d65 6
a70 1
      usenm='true'
d126 1
a126 1
     *) ccflags="$ccflags -qmaxmem=16384" ;;
d139 2
d142 9
a150 2
*gcc*) ccdlflags='-Xlinker' ;;
*) ccversion=`lslpp -L | grep 'C for AIX Compiler$' | awk '{print $2}'`
d152 24
d177 31
a207 2
	echo >&4 "*** This C compiler ($ccversion) is outdated."
	echo >&4 "*** Please upgrade to at least 4.4.0.3."
d228 1
a228 1
    lddlflags="$lddlflags -bhalt:4 -bM:SRE -bI:\$(PERL_INC)/perl.exp -bE:\$(BASEEXT).exp -b noentry -lc"
d235 1
a235 1
    4.2.1.*)  # Test for xlc version too, should we?
d237 1
a237 1
          3.1.4.*)    # libswanted "bind ... c ..." => "... c bind ..."
d253 14
a266 1
	gcc) ;;
d274 4
d302 1
a302 1
	set `echo X "$libswanted "| sed -e 's/ \([cC]\) / pthreads \1 /'`
d306 1
a306 1
	set `echo X "$lddlflags " | sed -e 's/ \(-l[cC]\) / -lpthreads \1 /'`
d319 7
d329 1
d341 4
d347 1
d357 12
a368 14
	*)
	cat >&4 <<EOM

*** Warning: gcc in AIX might not work with the largefile support of Perl
*** (default since 5.6.0), this combination hasn't been tested.
*** I will try, though.

EOM
	# Remove xlc-spefific -qflags.
        ccflags="`echo $ccflags | sed -e 's@@ -q[^ ]*@@ @@g' -e 's@@^-q[^ ]* @@@@g'`"
        ldflags="`echo $ldflags | sed -e 's@@ -q[^ ]*@@ @@g' -e 's@@^-q[^ ]* @@@@g'`"
	echo >&4 "(using ccflags $ccflags)"
	echo >&4 "(using ldflags $ldflags)"
        ;; 
a480 3
	    # Don't try backwards compatibility
	    bincompat="$undef"
	    d_bincompat5005="$undef"
d489 27
a515 30
cat > UU/uselongdouble.cbu <<'EOCBU'
# This script UU/uselongdouble.cbu will get 'called-back' by Configure 
# after it has prompted the user for whether to use long doubles.
case "$uselongdouble" in
$define|true|[yY]*)
        case "$cc" in
        *gcc*) ;;
        *) ccflags="$ccflags -qlongdouble" ;;
        esac
	# The explicit cc128, xlc128, xlC128 are not needed,
	# the -qlongdouble should do the trick. --jhi
	d_Gconvert='sprintf((b),"%.*llg",(n),(x))'
	;;
esac
EOCBU

# If the C++ libraries, libC and libC_r, are available we will prefer them
# over the vanilla libc, because the libC contain loadAndInit() and
# terminateAndUnload() which work correctly with C++ statics while libc
# load() and unload() do not.  See ext/DynaLoader/dl_aix.xs.
# The C-to-C_r switch is done by usethreads.cbu, if needed.
if test -f /lib/libC.a -a X"`$cc -v 2>&1 | grep gcc`" = X; then
    # Cify libswanted.
    set `echo X "$libswanted "| sed -e 's/ c / C c /'`
    shift
    libswanted="$*"
    # Cify lddlflags.
    set `echo X "$lddlflags "| sed -e 's/ -lc / -lC -lc /'`
    shift
    lddlflags="$*"
@


1.4
log
@perl-5.6.0 + local changes
@
text
@d131 7
d159 14
d195 3
a197 3
For pthreads you should use the AIX C compiler cc_r.
(now your compiler was set to '$cc')
Cannot continue, aborting.
d230 3
a232 2
	lfcflags="`getconf XBS5_ILP32_OFFBIG_CFLAGS 2>/dev/null`"
	lfldflags="`getconf XBS5_ILP32_OFFBIG_LDFLAGS 2>/dev/null`"
d237 1
a237 1
	#  so it may be something in the shell, instead?)
d239 1
a239 1
# echo >&4 "AIX 4.3.1.0 $lfldflags mystery" ; exit 1
d241 1
a241 1
	# Therefore the line re-evaluating lfldflags: it seems to fix
d243 4
a246 3
	lfldflags="`echo $lfldflags`"
	lflibs="`getconf XBS5_ILP32_OFFBIG_LIBS 2>/dev/null|sed -e 's@@^-l@@@@' -e 's@@ -l@@ @@g`"
	case "$lfcflags$lfldflags$lflibs" in
d248 3
a250 3
	*) ccflags="$ccflags $lfcflags"
	   ldflags="$ldflags $lfldflags"
	   libswanted="$libswanted $lflibs"
d253 18
a270 4
	lfcflags=''
	lfldflags=''
	lflibs=''
	;;
d319 2
a320 2
		lfcpuwidth=`./size`
		echo "You are running on $lfcpuwidth bit hardware."
d327 1
a327 1
		lfcpuwidth="$ans"
d330 1
a330 1
	    case "$lfcpuwidth" in
d339 2
a340 2
	    lfcflags="`getconf XBS5_LP64_OFF64_CFLAGS 2>/dev/null`"
	    lfldflags="`getconf XBS5_LP64_OFF64_LDFLAGS 2>/dev/null`"
d349 2
a350 2
	    lfldflags="`echo $lfldflags`"
	    lflibs="`getconf XBS5_LP64_OFF64_LIBS 2>/dev/null|sed -e 's@@^-l@@@@' -e 's@@ -l@@ @@g`"
d362 2
a363 2
	    # Note: Placing the 'lfcflags' variable into the 'ldflags' string
	    # is NOT a typo.  ldlflags is passed to the C compiler for final
d365 1
a365 1
	    case "$lfcflags$lfldflags$lflibs" in
d367 4
a370 4
	    *) ccflags="$ccflags $lfcflags"
	       ldflags="$ldflags $lfcflags"
	       lddlflags="$lfldflags $lddlflags"
	       libswanted="$libswanted $lflibs"
d384 4
a387 4
	    lfcflags=''
	    lfldflags=''
	    lflibs=''
	    lfcpuwidth=''
d397 4
a400 1
	ccflags="$ccflags -qlongdouble"
@


1.3
log
@perl5.005_03 (stock)
@
text
@d5 2
a6 1
#         Jarkko Hietaniemi <jhi@@iki.fi>.
d10 26
d41 1
a41 1
#             reset only their real user IDs.
d47 3
a49 1
usemymalloc='n'
d53 10
a62 1
usenm='undef'
d65 4
d71 27
d106 2
d116 1
a116 1
     *) ccflags="$ccflags -qmaxmem=8192" ;;
d130 7
a136 2
*gcc*) ccdlflags='-Xlinker -bE:perl.exp' ;;
*) ccdlflags='-bE:perl.exp' ;;
d142 2
a143 2
# -bE:$(BASEEXT).exp        Export these symbols.  This file contains only one
#                           symbol: boot_$(EXP)  can it be auto-generated?
d146 1
a146 1
    lddlflags='-H512 -T512 -bhalt:4 -bM:SRE -bI:$(PERL_INC)/perl.exp -bE:$(BASEEXT).exp -e _nostart -lc'
d149 1
a149 1
    lddlflags='-bhalt:4 -bM:SRE -bI:$(PERL_INC)/perl.exp -bE:$(BASEEXT).exp -b noentry -lc'
d158 5
a162 4
        ccflags="$ccflags -DNEED_PTHREAD_INIT"
        case "$cc" in
        cc_r) ;;
        cc|xlc_r) 
d165 1
a165 1
	    # (e.g. pragma/overload core dumps)
d168 2
a169 2
            ;;
        '') 
d171 3
a173 3
            ;;
        *)
 	    cat >&4 <<EOM
d175 1
a175 1
(now your compiler was '$cc')
d178 1
a178 1
 	    exit 1
d180 1
a180 1
        esac
d182 17
a198 1
        # Add the POSIX threads library and the re-entrant libc.
d200 3
a202 1
        lddlflags=`echo $lddlflags | sed 's/ -lc$/ -lpthreads -lc_r -lc/'`
d204 29
a232 6
        # Add the c_r library to the list of wanted libraries.
        # Make sure the c_r library is before the c library or
        # make will fail.
        set `echo X "$libswanted "| sed -e 's/ c / c_r c /'`
        shift
        libswanted="$*"
d236 149
@


1.2
log
@perl 5.004_04
@
text
@d4 2
d22 4
d39 1
a39 1
    ccflags='-D_ALL_SOURCE'
d42 1
a42 1
    ccflags='-D_ALL_SOURCE -D_ANSI_C_SOURCE -D_POSIX_SOURCE'
d45 1
a45 1
     *) ccflags="-qmaxmem=8192  $ccflags" ;;
a54 6
# The optimizer in 4.1.1 apparently generates bad code for scope.c.
# Configure doesn't offer an easy way to propagate extra variables
# only for certain cases, so the following contortion is required:
# This is probably not needed in 5.002 and later.
# scope_cflags='case "$osvers" in 4.1*) optimize=" ";; esac'

d70 1
a70 1
lddlflags='-H512 -T512 -bhalt:4 -bM:SRE -bI:$(PERL_INC)/perl.exp -bE:$(BASEEXT).exp -e _nostart -lc'
d73 3
a75 1
lddlflags='-H512 -T512 -bhalt:4 -bM:SRE -bI:$(PERL_INC)/perl.exp -bE:$(BASEEXT).exp -b noentry -lc'
d77 39
a115 1
;;
d117 1
@


1.1
log
@Initial revision
@
text
@d20 3
d36 5
a40 3
    d_setregid='undef'
    d_setreuid='undef'
    ccflags='-qmaxmem=8192 -D_ALL_SOURCE -D_ANSI_C_SOURCE -D_POSIX_SOURCE'
d44 4
@


1.1.1.1
log
@Import of Perl 5.003 into the tree.  Makefile.bsd-wrapper and
config.sh.OpenBSD are the only local changes.
@
text
@@


1.1.1.2
log
@perl5.005_03
@
text
@a3 2
# AIX 4.1 pthreading by Christopher Chan-Nui <channui@@austin.ibm.com> and
#         Jarkko Hietaniemi <jhi@@iki.fi>.
a19 7
# Intuiting the existence of system calls under AIX is difficult,
# at best; the safest technique is to find them empirically.
usenm='undef'

so="a"
dlext="so"

d30 1
a30 1
    ccflags="$ccflags -D_ALL_SOURCE"
d33 3
a35 5
    ccflags="$ccflags -D_ALL_SOURCE -D_ANSI_C_SOURCE -D_POSIX_SOURCE"
    case "$cc" in
     *gcc*) ;;
     *) ccflags="$ccflags -qmaxmem=8192" ;;
    esac
d40 5
a44 3
# These functions don't work like Perl expects them to.
d_setregid='undef'
d_setreuid='undef'
d61 1
a61 1
    lddlflags='-H512 -T512 -bhalt:4 -bM:SRE -bI:$(PERL_INC)/perl.exp -bE:$(BASEEXT).exp -e _nostart -lc'
d64 1
a64 3
    lddlflags='-bhalt:4 -bM:SRE -bI:$(PERL_INC)/perl.exp -bE:$(BASEEXT).exp -b noentry -lc'
    ;;
esac
d66 1
a66 39
# This script UU/usethreads.cbu will get 'called-back' by Configure 
# after it has prompted the user for whether to use threads.
cat > UU/usethreads.cbu <<'EOCBU'
case "$usethreads" in
$define|true|[yY]*)
        ccflags="$ccflags -DNEED_PTHREAD_INIT"
        case "$cc" in
        cc_r) ;;
        cc|xlc_r) 
	    echo >&4 "Switching cc to cc_r because of POSIX threads."
	    # xlc_r has been known to produce buggy code in AIX 4.3.2.
	    # (e.g. pragma/overload core dumps)
	    # --jhi@@iki.fi
	    cc=cc_r
            ;;
        '') 
	    cc=cc_r
            ;;
        *)
 	    cat >&4 <<EOM
For pthreads you should use the AIX C compiler cc_r.
(now your compiler was '$cc')
Cannot continue, aborting.
EOM
 	    exit 1
	    ;;
        esac

        # Add the POSIX threads library and the re-entrant libc.

        lddlflags=`echo $lddlflags | sed 's/ -lc$/ -lpthreads -lc_r -lc/'`

        # Add the c_r library to the list of wanted libraries.
        # Make sure the c_r library is before the c library or
        # make will fail.
        set `echo X "$libswanted "| sed -e 's/ c / c_r c /'`
        shift
        libswanted="$*"
	;;
a67 1
EOCBU
@


1.1.1.3
log
@virgin perl 5.6.0
@
text
@d5 1
a5 2
#	  Jarkko Hietaniemi <jhi@@iki.fi>.
# AIX 4.3.x LP64 build by Steven Hirsch <hirschs@@btv.ibm.com>
a8 26
#
# Contact dfavor@@corridor.com for any of the following:
#
#    - AIX 43x and above support
#    - gcc + threads support
#    - socks support
#
# Apr 99 changes:
#
#    - use nm in AIX 43x and above
#    - gcc + threads now builds
#    [(added support for socks) Jul 99 SOCKS support rewritten]
#
# Notes:
#
#    - shared libperl support is tricky. if ever libperl.a ends up
#      in /usr/local/lib/* it can override any subsequent builds of
#      that same perl release. to make sure you know where the shared
#      libperl.a is coming from do a 'dump -Hv perl' and check all the
#      library search paths in the loader header.
#
#      it would be nice to warn the user if a libperl.a exists that is
#      going to override the current build, but that would be complex.
#
#      better yet, a solid fix for this situation should be developed.
#
d14 1
a14 1
#	      reset only their real user IDs.
d20 1
a20 3
case "$usemymalloc" in
'')  usemymalloc='n' ;;
esac
d24 1
a24 10

# AIX 4.3.* and above default to using nm for symbol extraction
case "$osvers" in
   3.*|4.1.*|4.2.*)
      usenm='undef'
      ;;
   *)
      usenm='true'
      ;;
esac
a26 4
# AIX itself uses .o (libc.o) but we prefer compatibility
# with the rest of the world and with rest of the scripting
# languages (Tcl, Python) and related systems (SWIG).
# Stephanie Beals <bealzy@@us.ibm.com>
a28 27
# Take possible hint from the environment.  If 32-bit is set in the
# environment, we can override it later.  If set for 64, the
# 'sizeof' test sees a native 64-bit architecture and never looks back.
case "$OBJECT_MODE" in
32)
    cat >&4 <<EOF

You have OBJECT_MODE=32 set in the environment. 
I take this as a hint you do not want to
build for a 64-bit address space. You will be
given the opportunity to change this later.
EOF
    ;;
64)
    cat >&4 <<EOF

You have OBJECT_MODE=64 set in the environment. 
This forces a full 64-bit build.  If that is
not what you intended, please terminate this
program, unset it and restart.
EOF
    ;;
*)  ;;
esac

# Trying to set this breaks the POSIX.c compilation

a36 2
cc=${cc:-cc}

d45 1
a45 1
     *) ccflags="$ccflags -qmaxmem=16384" ;;
d59 2
a60 7
*gcc*) ccdlflags='-Xlinker' ;;
esac
# the required -bE:$installarchlib/CORE/perl.exp is added by
# libperl.U (Configure) later.

case "$ldlibpthname" in
'') ldlibpthname=LIBPATH ;;
d66 2
a67 2
# -bE:$(BASEEXT).exp	    Export these symbols.  This file contains only one
#			    symbol: boot_$(EXP)	 can it be auto-generated?
d70 1
a70 1
    lddlflags="$lddlflags -H512 -T512 -bhalt:4 -bM:SRE -bI:\$(PERL_INC)/perl.exp -bE:\$(BASEEXT).exp -e _nostart -lc"
d73 1
a73 1
    lddlflags="$lddlflags -bhalt:4 -bM:SRE -bI:\$(PERL_INC)/perl.exp -bE:\$(BASEEXT).exp -b noentry -lc"
d82 4
a85 5
	ccflags="$ccflags -DNEED_PTHREAD_INIT"
	case "$cc" in
	gcc) ;;
	cc_r) ;;
	cc|xl[cC]_r) 
d88 1
a88 1
	    # (e.g. pragma/overload core dumps)	 Let's suspect xlC_r, too.
d91 2
a92 2
	    ;;
	'') 
d94 3
a96 3
	    ;;
	*)
	    cat >&4 <<EOM
d98 1
a98 1
(now your compiler was set to '$cc')
d101 1
a101 1
	    exit 1
d103 1
a103 1
	esac
d105 1
a105 17
	# c_rify libswanted.
	set `echo X "$libswanted "| sed -e 's/ \([cC]\) / \1_r /g'`
	shift
	libswanted="$*"
	# c_rify lddlflags.
	set `echo X "$lddlflags "| sed -e 's/ \(-l[cC]\) / \1_r /g'`
	shift
	lddlflags="$*"

	# Insert pthreads to libswanted, before any libc or libC.
	set `echo X "$libswanted "| sed -e 's/ \([cC]\) / pthreads \1 /'`
	shift
	libswanted="$*"
	# Insert pthreads to lddlflags, before any libc or libC.
	set `echo X "$lddlflags " | sed -e 's/ \(-l[cC]\) / -lpthreads \1 /'`
	shift
	lddlflags="$*"
d107 1
a107 3
	;;
esac
EOCBU
d109 6
a114 29
# This script UU/uselargefiles.cbu will get 'called-back' by Configure 
# after it has prompted the user for whether to use large files.
cat > UU/uselargefiles.cbu <<'EOCBU'
case "$uselargefiles" in
''|$define|true|[yY]*)
	lfcflags="`getconf XBS5_ILP32_OFFBIG_CFLAGS 2>/dev/null`"
	lfldflags="`getconf XBS5_ILP32_OFFBIG_LDFLAGS 2>/dev/null`"
	# _Somehow_ in AIX 4.3.1.0 the above getconf call manages to
	# insert(?) *something* to $ldflags so that later (in Configure) evaluating
	# $ldflags causes a newline after the '-b64' (the result of the getconf).
	# (nothing strange shows up in $ldflags even in hexdump;
	#  so it may be something in the shell, instead?)
	# Try it out: just uncomment the below line and rerun Configure:
# echo >&4 "AIX 4.3.1.0 $lfldflags mystery" ; exit 1
	# Just don't ask me how AIX does it, I spent hours wondering.
	# Therefore the line re-evaluating lfldflags: it seems to fix
	# the whatever it was that AIX managed to break. --jhi
	lfldflags="`echo $lfldflags`"
	lflibs="`getconf XBS5_ILP32_OFFBIG_LIBS 2>/dev/null|sed -e 's@@^-l@@@@' -e 's@@ -l@@ @@g`"
	case "$lfcflags$lfldflags$lflibs" in
	'');;
	*) ccflags="$ccflags $lfcflags"
	   ldflags="$ldflags $lfldflags"
	   libswanted="$libswanted $lflibs"
	   ;;
	esac
	lfcflags=''
	lfldflags=''
	lflibs=''
a117 149

# This script UU/use64bitint.cbu will get 'called-back' by Configure 
# after it has prompted the user for whether to use 64 bit integers.
cat > UU/use64bitint.cbu <<'EOCBU'
case "$use64bitint" in
$define|true|[yY]*)
	    case "`oslevel`" in
	    3.*|4.[012].*)
		cat >&4 <<EOM
AIX `oslevel` does not support 64-bit interfaces.
You should upgrade to at least AIX 4.3.
EOM
		exit 1
		;;
	    esac
	    ;;
esac
EOCBU

cat > UU/use64bitall.cbu <<'EOCBU'
# This script UU/use64bitall.cbu will get 'called-back' by Configure 
# after it has prompted the user for whether to be maximally 64-bitty.
case "$use64bitall" in
$define|true|[yY]*)
	    case "`oslevel`" in
	    3.*|4.[012].*)
		cat >&4 <<EOM
AIX `oslevel` does not support 64-bit interfaces.
You should upgrade to at least AIX 4.3.
EOM
		exit 1
		;;
	    esac
	    echo " "
	    echo "Checking the CPU width of your hardware..." >&4
	    $cat >size.c <<EOCP
#include <stdio.h>
#include <sys/systemcfg.h>
int main (void)
{
  printf("%d\n",_system_configuration.width);
  return(0);
}
EOCP
	    set size
	    if eval $compile_ok; then
		lfcpuwidth=`./size`
		echo "You are running on $lfcpuwidth bit hardware."
	    else
		dflt="32"
		echo " "
		echo "(I can't seem to compile the test program.  Guessing...)"
		rp="What is the width of your CPU (in bits)?"
		. ./myread
		lfcpuwidth="$ans"
	    fi
	    $rm -f size.c size
	    case "$lfcpuwidth" in
	    32*)
		cat >&4 <<EOM
Bzzzt! At present, you can only perform a
full 64-bit build on a 64-bit machine.
EOM
		exit 1
		;;
	    esac
	    lfcflags="`getconf XBS5_LP64_OFF64_CFLAGS 2>/dev/null`"
	    lfldflags="`getconf XBS5_LP64_OFF64_LDFLAGS 2>/dev/null`"
	    # See jhi's comments above regarding this re-eval.  I've
	    # seen similar weirdness in the form of:
	    #
# 1506-173 (W) Option lm is not valid.  Enter xlc for list of valid options.
	    #
	    # error messages from 'cc -E' invocation. Again, the offending
	    # string is simply not detectable by any means.  Since it doesn't
	    # do any harm, I didn't pursue it. -- sh
	    lfldflags="`echo $lfldflags`"
	    lflibs="`getconf XBS5_LP64_OFF64_LIBS 2>/dev/null|sed -e 's@@^-l@@@@' -e 's@@ -l@@ @@g`"
	    # -q32 and -b32 may have been set by uselargefiles or user.
    	    # Remove them.
	    ccflags="`echo $ccflags | sed -e 's@@-q32@@@@'`"
	    ldflags="`echo $ldflags | sed -e 's@@-b32@@@@'`"
	    # Tell archiver to use large format.  Unless we remove 'ar'
	    # from 'trylist', the Configure script will just reset it to 'ar'
	    # immediately prior to writing config.sh.  This took me hours
	    # to figure out.
	    trylist="`echo $trylist | sed -e 's@@^ar @@@@' -e 's@@ ar @@ @@g' -e 's@@ ar$@@@@'`"
	    ar="ar -X64"
	    nm_opt="-X64 $nm_opt"
	    # Note: Placing the 'lfcflags' variable into the 'ldflags' string
	    # is NOT a typo.  ldlflags is passed to the C compiler for final
	    # linking, and it wants -q64 (-b64 is for ld only!).
	    case "$lfcflags$lfldflags$lflibs" in
	    '');;
	    *) ccflags="$ccflags $lfcflags"
	       ldflags="$ldflags $lfcflags"
	       lddlflags="$lfldflags $lddlflags"
	       libswanted="$libswanted $lflibs"
	       ;;
	    esac
	    case "$ccflags" in
	    *-DUSE_64_BIT_ALL*) ;;
      	    *) ccflags="$ccflags -DUSE_64_BIT_ALL";;
	    esac
	    case "$archname64" in
	    ''|64*) archname64=64all ;;
	    esac
	    longsize="8"
	    # Don't try backwards compatibility
	    bincompat="$undef"
	    d_bincompat5005="$undef"
	    lfcflags=''
	    lfldflags=''
	    lflibs=''
	    lfcpuwidth=''
	    ;;
esac
EOCBU

cat > UU/uselongdouble.cbu <<'EOCBU'
# This script UU/uselongdouble.cbu will get 'called-back' by Configure 
# after it has prompted the user for whether to use long doubles.
case "$uselongdouble" in
$define|true|[yY]*)
	ccflags="$ccflags -qlongdouble"
	# The explicit cc128, xlc128, xlC128 are not needed,
	# the -qlongdouble should do the trick. --jhi
	d_Gconvert='sprintf((b),"%.*llg",(n),(x))'
	;;
esac
EOCBU

# If the C++ libraries, libC and libC_r, are available we will prefer them
# over the vanilla libc, because the libC contain loadAndInit() and
# terminateAndUnload() which work correctly with C++ statics while libc
# load() and unload() do not.  See ext/DynaLoader/dl_aix.xs.
# The C-to-C_r switch is done by usethreads.cbu, if needed.
if test -f /lib/libC.a -a X"`$cc -v 2>&1 | grep gcc`" = X; then
    # Cify libswanted.
    set `echo X "$libswanted "| sed -e 's/ c / C c /'`
    shift
    libswanted="$*"
    # Cify lddlflags.
    set `echo X "$lddlflags "| sed -e 's/ -lc / -lC -lc /'`
    shift
    lddlflags="$*"
fi

# EOF
@


1.1.1.4
log
@stock perl 5.6.1
@
text
@a130 7
*) ccversion=`lslpp -L | grep 'C for AIX Compiler$' | awk '{print $2}'`
   case "$ccversion" in
     4.4.0.0|4.4.0.1|4.4.0.2)
	echo >&4 "*** This C compiler ($ccversion) is outdated."
	echo >&4 "*** Please upgrade to at least 4.4.0.3."
	;;
     esac
a151 14
# AIX 4.2 (using latest patchlevels on 20001130) has a broken bind
# library (getprotobyname and getprotobynumber are outversioned by
# the same calls in libc, at least for xlc version 3...
case "`oslevel`" in
    4.2.1.*)  # Test for xlc version too, should we?
      case "$ccversion" in    # Don't know if needed for gcc
          3.1.4.*)    # libswanted "bind ... c ..." => "... c bind ..."
              set `echo X "$libswanted "| sed -e 's/ bind\( .*\) \([cC]\) / \1 \2 bind /'`
              shift
              libswanted="$*"
              ;;
          esac
      ;;
    esac
d174 3
a176 3
*** For pthreads you should use the AIX C compiler cc_r.
*** (now your compiler was set to '$cc')
*** Cannot continue, aborting.
d209 2
a210 3
# Keep these at the left margin.
ccflags_uselargefiles="`getconf XBS5_ILP32_OFFBIG_CFLAGS 2>/dev/null`"
ldflags_uselargefiles="`getconf XBS5_ILP32_OFFBIG_LDFLAGS 2>/dev/null`"
d215 1
a215 1
	#  so it may be something (a bug) in the shell, instead?)
d217 1
a217 1
# echo >&4 "AIX 4.3.1.0 $ldflags_uselargefiles mystery" ; exit 1
d219 1
a219 1
	# Therefore the line re-evaluating ldflags_uselargefiles: it seems to fix
d221 3
a223 4
	ldflags_uselargefiles="`echo $ldflags_uselargefiles`"
# Keep this at the left margin.
libswanted_uselargefiles="`getconf XBS5_ILP32_OFFBIG_LIBS 2>/dev/null|sed -e 's@@^-l@@@@' -e 's@@ -l@@ @@g`"
	case "$ccflags_uselargefiles$ldflags_uselargefiles$libs_uselargefiles" in
d225 3
a227 3
	*) ccflags="$ccflags $ccflags_uselargefiles"
	   ldflags="$ldflags $ldflags_uselargefiles"
	   libswanted="$libswanted $libswanted_uselargefiles"
d230 4
a233 18
	case "$gccversion" in
	'') ;;
	*)
	cat >&4 <<EOM

*** Warning: gcc in AIX might not work with the largefile support of Perl
*** (default since 5.6.0), this combination hasn't been tested.
*** I will try, though.

EOM
	# Remove xlc-spefific -qflags.
        ccflags="`echo $ccflags | sed -e 's@@ -q[^ ]*@@ @@g' -e 's@@^-q[^ ]* @@@@g'`"
        ldflags="`echo $ldflags | sed -e 's@@ -q[^ ]*@@ @@g' -e 's@@^-q[^ ]* @@@@g'`"
	echo >&4 "(using ccflags $ccflags)"
	echo >&4 "(using ldflags $ldflags)"
        ;; 
        esac
        ;;
d282 2
a283 2
		qacpuwidth=`./size`
		echo "You are running on $qacpuwidth bit hardware."
d290 1
a290 1
		qacpuwidth="$ans"
d293 1
a293 1
	    case "$qacpuwidth" in
d302 2
a303 2
	    qacflags="`getconf XBS5_LP64_OFF64_CFLAGS 2>/dev/null`"
	    qaldflags="`getconf XBS5_LP64_OFF64_LDFLAGS 2>/dev/null`"
d312 2
a313 2
	    qaldflags="`echo $qaldflags`"
	    qalibs="`getconf XBS5_LP64_OFF64_LIBS 2>/dev/null|sed -e 's@@^-l@@@@' -e 's@@ -l@@ @@g`"
d325 2
a326 2
	    # Note: Placing the 'qacflags' variable into the 'ldflags' string
	    # is NOT a typo.  ldflags is passed to the C compiler for final
d328 1
a328 1
	    case "$qacflags$qaldflags$qalibs" in
d330 4
a333 4
	    *) ccflags="$ccflags $qacflags"
	       ldflags="$ldflags $qacflags"
	       lddlflags="$qaldflags $lddlflags"
	       libswanted="$libswanted $qalibs"
d347 4
a350 4
	    qacflags=''
	    qaldflags=''
	    qalibs=''
	    qacpuwidth=''
d360 1
a360 4
        case "$cc" in
        *gcc*) ;;
        *) ccflags="$ccflags -qlongdouble" ;;
        esac
@


1.1.1.5
log
@stock perl 5.8.0 from CPAN
@
text
@d57 1
a57 6
      case "$usenm" in
	  '') usenm='undef'
	  esac
      case "$usenativedlopen" in
	  '') usenativedlopen='false'
	  esac
d60 1
a60 6
      case "$usenm" in
	  '') usenm='true'
	  esac
      case "$usenativedlopen" in
	  '') usenativedlopen='true'
	  esac
d116 1
a116 1
     *) ccflags="$ccflags -qmaxmem=16384 -qnoansialias" ;;
a128 2
cccdlflags='none'      # All AIX code is position independent
cc_type=xlc
d130 2
a131 9
*gcc*)
   cc_type=gcc
   ccdlflags='-Xlinker'
   if [ "X$gccversion" = "X" ]; then
     # Done too late in Configure if hinted
     gccversion=`$cc --version | sed 's/.*(GCC) *//`
     fi
   ;;
*) ccversion=`lslpp -L | grep 'C for AIX Compiler$' | grep -v '\.msg\.[A-Za-z_]*\.' | awk '{print $2}'`
a132 24
     '') ccversion=`lslpp -L | grep 'IBM C and C++ Compilers LUM$' | awk '{print $2}'`
	 ;;
     *.*.*.*.*.*.*)		# Ahhrgg, more than one C compiler installed
	 first_cc_path=`which ${cc:-cc}`
	 case "$first_cc_path" in
	   *vac*)
	     cc_type=vac ;;
	   /usr/bin/cc)		# Check the symlink
	     if [ -h $first_cc_path ] ; then
	       ls -l $first_cc_path > reflect
	       if grep -i vac reflect >/dev/null 2>&1 ; then
		 cc_type=vac
		 fi
	       rm -f reflect
	       fi
	     ;;
	   esac
	 ccversion=`lslpp -L | grep 'C for AIX Compiler$' | grep -i $cc_type | awk '{print $2}' | head -1`
	 ;;
     esac
   case "$ccversion" in
     3.6.6.0)
	optimize='none'
	;;
d134 2
a135 31
	cat >&4 <<EOF
***
*** This C compiler ($ccversion) is outdated.
***
*** Please upgrade to at least 4.4.0.3.
***
EOF
	;;
     5.0.0.0)
	cat >&4 <<EOF
***
*** This C compiler ($ccversion) is known to have too many optimizer
*** bugs to compile a working Perl.
***
*** Consider upgrading your C compiler, or getting the GNU cc (gcc).
***
*** Cannot continue, aborting.
EOF
	exit 1
	;;
     5.0.1.0)
	cat >&4 <<EOF
***
*** This C compiler ($ccversion) is known to have optimizer problems
*** when compiling regcomp.c.
***
*** Disabling optimization for that file but consider upgrading
*** your C compiler.
***
EOF
regcomp_cflags='optimize='
d156 1
a156 1
    lddlflags="$lddlflags -bhalt:4 -bM:SRE -bI:\$(PERL_INC)/perl.exp -bE:\$(BASEEXT).exp -bnoentry -lc"
d163 1
a163 1
    4.2.1.*)
d165 1
a165 1
          3.1.4.*|5.0.2.*)    # libswanted "bind ... c ..." => "... c bind ..."
d181 1
a181 14
	*gcc*)
echo "GCC $gccversion disabling some _r functions" >&4
	    case "$gccversion" in
		3*) d_drand48_r='undef'
		    d_endgrent_r='undef'
		    d_endpwent_r='undef'
		    d_getgrent_r='undef'
		    d_getpwent_r='undef'
		    d_random_r='undef'
		    d_srand48_r='undef'
		    d_strerror_r='undef'
		    ;;
		esac
	    ;;
a188 4

	    case "`oslevel`" in
		4.2.1.*) i_crypt='undef' ;;
		esac
d213 1
a213 1
	set `echo X "$libswanted "| sed -e 's/ \([cC]_r\) / pthreads \1 /'`
d217 1
a217 1
	set `echo X "$lddlflags " | sed -e 's/ \(-l[cC]_r\) / -lpthreads \1 /'`
a229 7
    # Configure should take care of use64bitint and use64bitall being
    # defined before uselargefiles.cbu is consulted.
    if test X"$use64bitint:$quadtype" = X"$define:long" -o X"$use64bitall" = Xdefine; then
# Keep these at the left margin.
ccflags_uselargefiles="`getconf XBS5_LP64_OFF64_CFLAGS 2>/dev/null`"
ldflags_uselargefiles="`getconf XBS5_LP64_OFF64_LDFLAGS 2>/dev/null`"
    else
a232 1
    fi
a243 4
    if test X"$use64bitint:$quadtype" = X"$define:long" -o X"$use64bitall" = Xdefine; then
# Keep this at the left margin.
libswanted_uselargefiles="`getconf XBS5_LP64_OFF64_LIBS 2>/dev/null|sed -e 's@@^-l@@@@' -e 's@@ -l@@ @@g`"
    else
a245 1
    fi
d255 14
a268 12
	*) # Remove xlc-spefific -qflags.
	   ccflags="`echo $ccflags | sed -e 's@@ -q[^ ]*@@ @@g' -e 's@@^-q[^ ]* @@@@g'`"
	   ldflags="`echo $ldflags | sed -e 's@@ -q[^ ]*@@ @@g' -e 's@@^-q[^ ]* @@@@g'`"
	   # Move xld-spefific -bflags.
	   ccflags="`echo $ccflags | sed -e 's@@ -b@@ -Wl,-b@@g'`"
	   ldflags="`echo ' '$ldflags | sed -e 's@@ -b@@ -Wl,-b@@g'`"
	   lddlflags="`echo ' '$lddlflags | sed -e 's@@ -b@@ -Wl,-b@@g'`"
	   ld='gcc'
	   echo >&4 "(using ccflags   $ccflags)"
	   echo >&4 "(using ldflags   $ldflags)"
	   echo >&4 "(using lddlflags $lddlflags)"
	   ;; 
d381 3
d392 30
a421 27
if test $usenativedlopen = 'true'
then
    ccflags="$ccflags -DUSE_NATIVE_DLOPEN"
    case "$cc" in
      *gcc*) ldflags="$ldflags -Wl,-brtl" ;;
      *)     ldflags="$ldflags -brtl" ;;
      esac
else
    case `oslevel` in
	4.2.*)	;;	# libC_r has broke gettimeofday
        *)  # If the C++ libraries, libC and libC_r, are available we will
	    # prefer them over the vanilla libc, because the libC contain
	    # loadAndInit() and terminateAndUnload() which work correctly
	    # with C++ statics while libc load() and unload() do not. See
	    # ext/DynaLoader/dl_aix.xs. The C-to-C_r switch is done by
	    # usethreads.cbu, if needed.
	    if test -f /lib/libC.a -a X"`$cc -v 2>&1 | grep gcc`" = X; then
		# Cify libswanted.
		set `echo X "$libswanted "| sed -e 's/ c / C c /'`
		shift
		libswanted="$*"
		# Cify lddlflags.
		set `echo X "$lddlflags "| sed -e 's/ -lc / -lC -lc /'`
		shift
		lddlflags="$*"
	    fi
	esac
@


1.1.1.6
log
@perl 5.8.2 from CPAN
@
text
@d8 1
a8 1
#   Andy Dougherty  <doughera@@lafayette.edu>
d54 1
a54 2
# AIX 4.3.* and above default to letting Configure test if nm
# extraction will work.
d65 3
d139 2
a140 2
cccdlflags='none'	# All AIX code is position independent
   cc_type=xlc		# do not export to config.sh
d147 1
a147 1
     gccversion=`$cc --version | sed 's/.*(GCC) *//'`
d150 1
a150 1
*) ccversion=`lslpp -L | grep 'C for AIX Compiler$' | grep -v '\.msg\.[A-Za-z_]*\.' | head -1 | awk '{print $1,$2}'`
d152 1
a152 1
     '') ccversion=`lslpp -L | grep 'IBM C and C++ Compilers LUM$'`
d169 1
a169 4
	 ccversion=`lslpp -L | grep 'C for AIX Compiler$' | grep -i $cc_type | head -1`
	 ;;
     vac*.*.*.*)
         cc_type=vac
a171 1
   ccversion=`echo "$ccversion" | awk '{print $2}'`
d214 4
d224 6
a229 55
    3*) 
	lddlflags="$lddlflags -H512 -T512 -bhalt:4 -bM:SRE -bI:\$(PERL_INC)/perl.exp -bE:\$(BASEEXT).exp -e _nostart -lc"
	;;
    *) 
	lddlflags="$lddlflags -bhalt:4 -bM:SRE -bI:\$(PERL_INC)/perl.exp -bE:\$(BASEEXT).exp -bnoentry -lc"
	;;
    esac

case "$use64bitall" in
    $define|true|[yY]*) use64bitint="$define" ;;
    esac

case "$usemorebits" in
    $define|true|[yY]*) use64bitint="$define"; uselongdouble="$define" ;;
    esac

case $cc_type in
    vac|xlc)
	case "$uselongdouble" in
	    $define|true|[yY]*)
		ccflags="$ccflags -qlongdouble"
		libswanted="c128 $libswanted"
		lddlflags=`echo "$lddlflags " | sed -e 's/ -lc / -lc128 -lc /'`
		;;
	    esac
    esac

case "$cc" in
*gcc*) ;;
cc*|xlc*) # cc should've been set by line 116 or so if empty.
	if test ! -x /usr/bin/$cc -a -x /usr/vac/bin/$cc; then
		case ":$PATH:" in
		*:/usr/vac/bin:*) ;;
		*) if test ! -x /QOpenSys/usr/bin/$cc; then
			# The /QOpenSys/usr/bin/$cc saves us if we are
			# building natively in OS/400 PASE.
			cat >&4 <<EOF

***
*** You either implicitly or explicitly specified an IBM C compiler,
*** but you do not seem to have one in /usr/bin, but you seem to have
*** the VAC installed in /usr/vac, but you do not have the /usr/vac/bin
*** in your PATH.  I suggest adding that and retrying Configure.
***
EOF
			exit 1
		   fi 
		   ;;
		esac
	fi
	;;
esac

case "$ldlibpthname" in
'') ldlibpthname=LIBPATH ;;
a230 1

d254 1
a254 2
	    ccflags="-D_THREAD_SAFE $ccflags"
	    echo "GCC $gccversion disabling some _r functions" >&4
d357 1
a357 1
	*) # Remove xlc-specific -qflags.
d360 1
a360 1
	   # Move xlc-specific -bflags.
a516 33

case "$PASE" in
define)
	case "$prefix" in
	'') prefix=/QOpenSys/perl ;;
	esac
	cat >&4 <<EOF

***
*** You seem to be compiling in AIX for the OS/400 PASE environment.
*** I'm not going to use the AIX bind, nsl, and possible util libraries, then.
*** I'm also not going to install perl as /usr/bin/perl.
*** Perl will be installed under $prefix.
*** For instructions how to install this build from AIX to PASE,
*** see the file README.os400.  Accept the "aix" for the question
*** about "Operating system name".
***
EOF
	set `echo " $libswanted " | sed -e 's@@ bind @@ @@' -e 's@@ nsl @@ @@' -e 's@@ util @@ @@'`
	shift
	libswanted="$*"
	installusrbinperl="$undef"

	# V5R1 doesn't have this (V5R2 does), without knowing
	# which one we have it's safer to be pessimistic.
	# Cwd will work fine even without fchdir(), but if
	# V5R1 tries to use code compiled assuming fchdir(),
	# lots of grief will issue forth from Cwd.
	case "$d_fchdir" in
	'') d_fchdir="$undef" ;;
	esac
	;;
esac
@


1.1.1.7
log
@Import of stock perl 5.8.5
@
text
@d2 7
d10 1
a10 5
# AIX 3 and AIX 4 are split off to aix_3.sh and aix_4.sh
#    early Feb 2004 by H.Merijn Brand
# please read comments in there for historic questions.
#    many now stripped here

d17 6
d48 2
a49 7
    '')  usemymalloc='n' ;;
    esac

# malloc wrap works, but not in vac-5, see later
case "$usemallocwrap" in
    '') usemallocwrap='define' ;;
    esac
d54 17
a70 3
case "$usenativedlopen" in
    '') usenativedlopen='true' ;;
    esac
d83 2
a84 1
    32) cat >&4 <<EOF
d86 1
a86 1
You have OBJECT_MODE=32 set in the environment.
d91 3
a93 2
	;;
    64) cat >&4 <<EOF
d95 1
a95 1
You have OBJECT_MODE=64 set in the environment.
d100 8
a107 2
	;;
    esac
d111 2
a112 2
    '') archname="$osname" ;;
    esac
d116 9
a124 4
ccflags="$ccflags -D_ALL_SOURCE -D_ANSI_C_SOURCE -D_POSIX_SOURCE"
case "$cc" in
    *gcc*) ;;
    *) ccflags="$ccflags -qmaxmem=-1 -qnoansialias" ;;
d126 3
a128 1
nm_opt='-B'
d140 58
a197 7
    *gcc*)
	cc_type=gcc
	ccdlflags='-Xlinker'
	if [ "X$gccversion" = "X" ]; then
	    # Done too late in Configure if hinted
	    gccversion=`$cc --version | sed 's/.*(GCC) *//'`
	    fi
d199 11
a209 34

    *)  ccversion=`lslpp -L | grep 'C for AIX Compiler$' | grep -v '\.msg\.[A-Za-z_]*\.' | head -1 | awk '{print $1,$2}'`
	case "$ccversion" in
	    '') ccversion=`lslpp -L | grep 'IBM C and C++ Compilers LUM$'` ;;

	    *.*.*.*.*.*.*)	# Ahhrgg, more than one C compiler installed
		first_cc_path=`which ${cc:-cc}`
		case "$first_cc_path" in
		    *vac*)
			cc_type=vac ;;

		    /usr/bin/cc)		# Check the symlink
			if [ -h $first_cc_path ] ; then
			    ls -l $first_cc_path > reflect
			    if grep -i vac reflect >/dev/null 2>&1 ; then
				cc_type=vac
				fi
			    rm -f reflect
			    fi
			;;
		    esac
		ccversion=`lslpp -L | grep 'C for AIX Compiler$' | grep -i $cc_type | head -1`
		;;

	    vac*.*.*.*)
		cc_type=vac
		;;
	    esac

	ccversion=`echo "$ccversion" | awk '{print $2}'`
	# Redbooks state AIX-5 only supports vac-5.0.2.0 and up
	case "$ccversion" in
	    5*) usemallocwrap='n' ;; # panic in miniperl
	    esac
d211 2
a212 2
    esac

d221 8
a228 1
lddlflags="$lddlflags -bhalt:4 -bM:SRE -bI:\$(PERL_INC)/perl.exp -bE:\$(BASEEXT).exp -bnoentry -lc"
a246 1
	;;
d250 2
a251 3
    *gcc*) ;;

    cc*|xlc*) # cc should've been set by line 116 or so if empty.
d253 1
a253 1
	    case ":$PATH:" in
d255 1
a255 1
		*)  if test ! -x /QOpenSys/usr/bin/$cc; then
d268 2
a269 2
			fi
		    ;;
d271 1
a271 1
	    fi
d273 1
a273 1
    esac
d276 16
a291 1
    '') ldlibpthname=LIBPATH ;;
d294 1
a294 1
# This script UU/usethreads.cbu will get 'called-back' by Configure
d298 1
a298 12
    $define|true|[yY]*)
	d_drand48_r='undef'
	d_endgrent_r='undef'
	d_endpwent_r='undef'
	d_getgrent_r='undef'
	d_getpwent_r='undef'
	d_random_r='undef'
	d_setgrent_r='undef'
	d_setpwent_r='undef'
	d_srand48_r='undef'
	d_strerror_r='undef'

d301 22
a322 1
	    *gcc*) ccflags="-D_THREAD_SAFE $ccflags" ;;
d324 9
a332 22
	    cc_r) ;;
	    '') cc=cc_r ;;

	    *)


	    # No | alternation in aix sed. :-(
	    newcc=`echo $cc | sed -e 's/cc$/cc_r/' -e 's/xl[cC]$/cc_r/' -e 's/xl[cC]_r$/cc_r/'`
	    case "$newcc" in
		$cc) # No change
		;;

		*cc_r)
		echo >&4 "Switching cc to cc_r because of POSIX threads."
		# xlc_r has been known to produce buggy code in AIX 4.3.2.
		# (e.g. pragma/overload core dumps)	 Let's suspect xlC_r, too.
		# --jhi@@iki.fi
		cc="$newcc"
		;;

		*)
		cat >&4 <<EOM
d337 2
a338 3
		exit 1
		;;
	    esac
d341 9
d351 1
a351 1
	set `echo X "$libswanted "| sed -e 's/ \([cC]\) / pthreads \1 /'`
d355 1
a355 1
	set `echo X "$lddlflags " | sed -e 's/ \(-l[cC]\) / -lpthreads \1 /'`
d358 1
d363 1
a363 1
# This script UU/uselargefiles.cbu will get 'called-back' by Configure
d367 4
a370 4
    ''|$define|true|[yY]*)
	# Configure should take care of use64bitint and use64bitall being
	# defined before uselargefiles.cbu is consulted.
	if test X"$use64bitint:$quadtype" = X"$define:long" -o X"$use64bitall" = Xdefine; then
d374 1
a374 1
	else
d378 13
a390 2
	    fi
	if test X"$use64bitint:$quadtype" = X"$define:long" -o X"$use64bitall" = Xdefine; then
d393 1
a393 1
	else
d396 1
a396 2
	    fi

d398 24
a421 6
	    '') ;;
	    *)  ccflags="$ccflags $ccflags_uselargefiles"
		ldflags="$ldflags $ldflags_uselargefiles"
		libswanted="$libswanted $libswanted_uselargefiles"
		;;
	    esac
d423 12
a434 13
	case "$gccversion" in
	    '') ;;
	    *)  # Remove xlc-specific -qflags.
		ccflags="`echo $ccflags | sed -e 's@@ -q[^ ]*@@ @@g' -e 's@@^-q[^ ]* @@@@g'`"
		ldflags="`echo $ldflags | sed -e 's@@ -q[^ ]*@@ @@g' -e 's@@^-q[^ ]* @@@@g'`"
		# Move xlc-specific -bflags.
		ccflags="`echo $ccflags | sed -e 's@@ -b@@ -Wl,-b@@g'`"
		ldflags="`echo ' '$ldflags | sed -e 's@@ -b@@ -Wl,-b@@g'`"
		lddlflags="`echo ' '$lddlflags | sed -e 's@@ -b@@ -Wl,-b@@g'`"
		ld='gcc'
		echo >&4 "(using ccflags   $ccflags)"
		echo >&4 "(using ldflags   $ldflags)"
		echo >&4 "(using lddlflags $lddlflags)"
d437 2
a438 2
	;;
    esac
d442 1
a442 1
# This script UU/use64bitall.cbu will get 'called-back' by Configure
d445 13
a457 4
    $define|true|[yY]*)
	echo " "
	echo "Checking the CPU width of your hardware..." >&4
	$cat >size.c <<EOCP
d462 3
a464 3
    printf ("%d\n", _system_configuration.width);
    return (0);
    }
d466 11
a476 11
	set size
	if eval $compile_ok; then
	    qacpuwidth=`./size`
	    echo "You are running on $qacpuwidth bit hardware."
	else
	    dflt="32"
	    echo " "
	    echo "(I can't seem to compile the test program.  Guessing...)"
	    rp="What is the width of your CPU (in bits)?"
	    . ./myread
	    qacpuwidth="$ans"
d478 2
a479 3
	$rm -f size.c size

	case "$qacpuwidth" in
d488 5
a492 5
	qacflags="`getconf XBS5_LP64_OFF64_CFLAGS 2>/dev/null`"
	qaldflags="`getconf XBS5_LP64_OFF64_LDFLAGS 2>/dev/null`"
	# See jhi's comments above regarding this re-eval.  I've
	# seen similar weirdness in the form of:
	#
d494 27
a520 27
	#
	# error messages from 'cc -E' invocation. Again, the offending
	# string is simply not detectable by any means.  Since it doesn't
	# do any harm, I didn't pursue it. -- sh
	qaldflags="`echo $qaldflags`"
	qalibs="`getconf XBS5_LP64_OFF64_LIBS 2>/dev/null|sed -e 's@@^-l@@@@' -e 's@@ -l@@ @@g`"
	# -q32 and -b32 may have been set by uselargefiles or user.
	# Remove them.
	ccflags="`echo $ccflags | sed -e 's@@-q32@@@@'`"
	ldflags="`echo $ldflags | sed -e 's@@-b32@@@@'`"
	# Tell archiver to use large format.  Unless we remove 'ar'
	# from 'trylist', the Configure script will just reset it to 'ar'
	# immediately prior to writing config.sh.  This took me hours
	# to figure out.
	trylist="`echo $trylist | sed -e 's@@^ar @@@@' -e 's@@ ar @@ @@g' -e 's@@ ar$@@@@'`"
	ar="ar -X64"
	nm_opt="-X64 $nm_opt"
	# Note: Placing the 'qacflags' variable into the 'ldflags' string
	# is NOT a typo.  ldflags is passed to the C compiler for final
	# linking, and it wants -q64 (-b64 is for ld only!).
	case "$qacflags$qaldflags$qalibs" in
	    '') ;;
	    *)  ccflags="$ccflags $qacflags"
		ldflags="$ldflags $qacflags"
		lddlflags="$qaldflags $lddlflags"
		libswanted="$libswanted $qalibs"
		;;
d522 1
a522 1
	case "$ccflags" in
d524 1
a524 1
	    *) ccflags="$ccflags -DUSE_64_BIT_ALL";;
d526 1
a526 1
	case "$archname64" in
d529 7
a535 7
	longsize="8"
	qacflags=''
	qaldflags=''
	qalibs=''
	qacpuwidth=''
	;;
    esac
d538 2
a539 1
if test $usenativedlopen = 'true' ; then
d542 22
a563 2
	*gcc*) ldflags="$ldflags -Wl,-brtl" ;;
	*)     ldflags="$ldflags -brtl" ;;
d565 1
a565 17
elif test -f /lib/libC.a -a X"`$cc -v 2>&1 | grep gcc`" = X; then
    # If the C++ libraries, libC and libC_r, are available we will
    # prefer them over the vanilla libc, because the libC contain
    # loadAndInit() and terminateAndUnload() which work correctly
    # with C++ statics while libc load() and unload() do not. See
    # ext/DynaLoader/dl_aix.xs. The C-to-C_r switch is done by
    # usethreads.cbu, if needed.

    # Cify libswanted.
    set `echo X "$libswanted "| sed -e 's/ c / C c /'`
    shift
    libswanted="$*"
    # Cify lddlflags.
    set `echo X "$lddlflags "| sed -e 's/ -lc / -lC -lc /'`
    shift
    lddlflags="$*"
    fi
d568 1
a568 1
    define)
d570 2
a571 2
	    '') prefix=/QOpenSys/perl ;;
	    esac
d595 2
a596 2
	    '') d_fchdir="$undef" ;;
	    esac
d598 1
a598 1
    esac
@


1.1.1.8
log
@perl 5.8.6 from CPAN
@
text
@d160 1
a160 5
if test $usenativedlopen = 'true' ; then
    lddlflags="$lddlflags -bhalt:4 -bexpall -G -bnoentry -lc"
else
    lddlflags="$lddlflags -bhalt:4 -bM:SRE -bI:\$(PERL_INC)/perl.exp -bE:\$(BASEEXT).exp -bnoentry -lc"
    fi
d317 1
a317 5
		lddlflags="`echo ' '$lddlflags | sed -e 's@@ -G @@ -Wl,-G @@g'`"
		case "$use64bitall" in
		    $define|true|[yY]*) ld="gcc -maix64"	;;
		    *)			ld="gcc"		;;
		    esac
a381 7
	case "$cc" in
	    *gcc*)
		ccflags="`echo $ccflags | sed -e 's@@-q64@@-maix64@@'`"
		ccflags_uselargefiles="`echo $ccflags_uselargefiles | sed -e 's@@-q64@@-maix64@@'`"
		qacflags="`echo $qacflags | sed -e 's@@-q64@@-maix64@@'`"
		;;
	    esac
a417 10
    # -brtl		    Enables a binary to use run time linking
    # -bdynamic		    When used with -brtl, tells linker to search for
    #			    ".so"-suffix libraries as well as ".a" suffix
    #			    libraries. AIX allows both .so and .a libraries to
    #			    contain dynamic shared objects.
    # -bmaxdata:0x80000000  This increases the size of heap memory available
    #			    to perl. Default is 256 MB, which sounds large but
    #			    caused a software vendor problems. So this sets
    #			    heap to 2 GB maximum. Anything higher and you'd
    #			    want to consider 64 bit perl.
d419 2
a420 2
	*gcc*) ldflags="$ldflags -Wl,-brtl -Wl,-bdynamic -Wl,-bmaxdata:0x80000000" ;;
	*)     ldflags="$ldflags -brtl -bdynamic -bmaxdata:0x80000000" ;;
@


1.1.1.9
log
@perl 5.8.8 import
@
text
@d116 1
a116 1
    *)  ccversion=`lslpp -ql -Ou vac.C | grep -v '^Path' | head -1 | awk '{print $1,$2}'`
d323 2
a324 2
		    $define|true|[yY]*) ld="$cc -maix64"	;;
		    *)			ld="$cc"		;;
@


1.1.1.10
log
@import perl 5.10.0 from CPAN
@
text
@d112 1
a112 1
	    gccversion=`$cc -dumpversion`
a311 19
	# -bmaxdata:0x80000000
	# - This increases the size of heap memory available to perl.
	#   Default is 256 MB, which sounds large but caused a software
	#   vendor problems. So this sets heap to 2 GB maximum. Anything
	#   higher and you'd want to consider 64 bit perl.
	# - NOTE however, that setting this in 64bit mode will limit your
	#   amount of available memory to 2GB, so we set this only in
	#   32bit mode to avoid future problems a la "should be enough
	#   for everyone" ...
	#
	case "$use64bitall" in
	    $define|true|[yY]*)
		:
		;;
	    *)
	    	ldflags="$ldflags -bmaxdata:0x80000000"
		;;
	    esac

d313 1
a313 10
	    '') # Not using gcc.
	    	# Due to calling $cc without $cflags when linking some
		# binaries we need to hardwire $cc to the right mode.
		# The correct fix would be to have Makefile.SH not set
		# CLDFLAGS from $ldflags ...
		case "$use64bitall" in
		    $define|true|[yY]*) cc="$cc -q64"	;;
		    *)			cc="$cc -q32"	;;
		    esac
		;;
a321 3

	    	# Due to calling $cc without $cflags when linking some
		# binaries we need to hardwire $cc to the right mode.
d323 2
a324 8
		    $define|true|[yY]*)
			cc="$cc -maix64"
			ld="$cc"
			;;
		    *)
			cc="$cc -maix32"
			ld="$cc"
			;;
d404 3
d410 1
a410 1
		ldflags="$ldflags"
d438 5
d444 2
a445 2
	*gcc*) ldflags="$ldflags -Wl,-brtl -Wl,-bdynamic" ;;
	*)     ldflags="$ldflags -brtl -bdynamic" ;;
@


1.1.1.11
log
@import perl 5.10.1
@
text
@a82 6
 s=`lslpp -lc bos.adt.libm >/dev/null`
if [ $? != 0 ]; then
    echo "You cannot build perl without the bos.adt.libm package installed" >&4
    exit
    fi

d161 1
a161 1
    lddlflags="$lddlflags -bhalt:4 -G -bI:\$(PERL_INC)/perl.exp -bE:\$(BASEEXT).exp -bnoentry -lc -lm"
d235 5
a239 18
	    *gcc*) 
	      ccflags="-D_THREAD_SAFE $ccflags" 
	      ;;
	    cc_r) 
	      ;;
	    xlc_r) 
	      # for -qlonglong
	      ccflags="$ccflags -qlanglvl=extended"
	      ;;
	    # we do not need the C++ compiler
	    xlC_r) 
	      # for -qlonglong
	      ccflags="$ccflags -qlanglvl=extended"
	      cc=xlc_r 
	      ;;
	    '') 
	      cc=cc_r 
	      ;;
d241 25
a276 15
    *)
	case "$cc" in
	    xlc) 
	      # for -qlonglong
	      ccflags="$ccflags -qlanglvl=extended"
	      ;;
	    # we do not need the C++ compiler
	    xlC) 
	      # for -qlonglong
	      ccflags="$ccflags -qlanglvl=extended"
	      cc=xlc 
	      ;;
	    *)
	esac
	;;
d298 1
a298 1
libswanted_uselargefiles="`getconf XBS5_LP64_OFF64_LIBS 2>/dev/null|sed -e 's@@^-l@@@@' -e 's@@ -l@@ @@g'`"
d301 1
a301 1
libswanted_uselargefiles="`getconf XBS5_ILP32_OFFBIG_LIBS 2>/dev/null|sed -e 's@@^-l@@@@' -e 's@@ -l@@ @@g'`"
d422 1
a422 1
	qalibs="`getconf XBS5_LP64_OFF64_LIBS 2>/dev/null|sed -e 's@@^-l@@@@' -e 's@@ -l@@ @@g'`"
a525 12

# remove libbsd.a from wanted libraries
libswanted=`echo " $libswanted " | sed -e 's/ bsd / /'`
libswanted=`echo " $libswanted " | sed -e 's/ BSD / /'`
d_flock='undef'

# remove libgdbm from wanted libraries
# The libgdbm 1.8.3 from the AIX Toolbox is not working 
# (the dbm_store() function is defective)
libswanted=`echo " $libswanted " | sed -e 's/ gdbm / /'`
i_gdbm='undef'
i_gdbmndbm='undef'
@


1.1.1.12
log
@Perl 5.12.2 from CPAN
@
text
@a236 1
	d_srandom_r='undef'
d542 6
a547 9
# The libgdbm < 1.8.3-5 from the AIX Toolbox is not working
# because two wrong .h are present
if [ -f "/opt/freeware/include/gdbm/dbm.h" ] ||
   [ -f "/opt/freeware/include/gdbm/ndbm.h" ]; then
    echo "GDBM support disabled because your GDBM package contains extraneous headers - see README.aix."
    libswanted=`echo " $libswanted " | sed -e 's/ gdbm / /'`
    i_gdbm='undef'
    i_gdbmndbm='undef'
fi
@


1.1.1.13
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d99 1
a99 1
    *) ccflags="$ccflags -qmaxmem=-1 -qnoansialias -qlanglvl=extc99" ;;
d248 2
d253 2
d275 2
d280 2
a350 3
                # Some 32-bit getconfs will set ccflags to include -qlonglong
                # but that's no longer needed with an explicit -qextc99.
                ccflags="`echo $ccflags | sed -e 's@@ -qlonglong@@@@`"
@


1.1.1.14
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d345 1
a345 1
                ccflags="`echo $ccflags | sed -e 's@@ -qlonglong@@@@'`"
@


