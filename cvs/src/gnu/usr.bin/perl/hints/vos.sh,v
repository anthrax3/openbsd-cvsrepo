head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2:1.1.1.7.0.10
	OPENBSD_6_2_BASE:1.1.1.7
	PERL_5_24_2:1.1.1.7
	OPENBSD_6_1:1.1.1.7.0.14
	OPENBSD_6_1_BASE:1.1.1.7
	OPENBSD_6_0:1.1.1.7.0.12
	OPENBSD_6_0_BASE:1.1.1.7
	OPENBSD_5_9:1.1.1.7.0.6
	OPENBSD_5_9_BASE:1.1.1.7
	OPENBSD_5_8:1.1.1.7.0.8
	OPENBSD_5_8_BASE:1.1.1.7
	PERL_5_20_2:1.1.1.7
	OPENBSD_5_7:1.1.1.7.0.2
	OPENBSD_5_7_BASE:1.1.1.7
	PERL_5_20_1:1.1.1.7
	OPENBSD_5_6:1.1.1.7.0.4
	OPENBSD_5_6_BASE:1.1.1.7
	PERL_5_18_2:1.1.1.7
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.6.0.6
	OPENBSD_5_5_BASE:1.1.1.6
	OPENBSD_5_4:1.1.1.6.0.2
	OPENBSD_5_4_BASE:1.1.1.6
	PERL_5_16_3:1.1.1.6
	OPENBSD_5_3:1.1.1.5.0.14
	OPENBSD_5_3_BASE:1.1.1.5
	OPENBSD_5_2:1.1.1.5.0.12
	OPENBSD_5_2_BASE:1.1.1.5
	OPENBSD_5_1_BASE:1.1.1.5
	OPENBSD_5_1:1.1.1.5.0.10
	OPENBSD_5_0:1.1.1.5.0.8
	OPENBSD_5_0_BASE:1.1.1.5
	OPENBSD_4_9:1.1.1.5.0.6
	OPENBSD_4_9_BASE:1.1.1.5
	PERL_5_12_2:1.1.1.5
	OPENBSD_4_8:1.1.1.5.0.4
	OPENBSD_4_8_BASE:1.1.1.5
	OPENBSD_4_7:1.1.1.5.0.2
	OPENBSD_4_7_BASE:1.1.1.5
	PERL_5_10_1:1.1.1.5
	OPENBSD_4_6:1.1.1.4.0.6
	OPENBSD_4_6_BASE:1.1.1.4
	OPENBSD_4_5:1.1.1.4.0.2
	OPENBSD_4_5_BASE:1.1.1.4
	PERL_5_10_0:1.1.1.4
	OPENBSD_4_4:1.1.1.3.0.18
	OPENBSD_4_4_BASE:1.1.1.3
	OPENBSD_4_3:1.1.1.3.0.16
	OPENBSD_4_3_BASE:1.1.1.3
	OPENBSD_4_2:1.1.1.3.0.14
	OPENBSD_4_2_BASE:1.1.1.3
	OPENBSD_4_1:1.1.1.3.0.12
	OPENBSD_4_1_BASE:1.1.1.3
	OPENBSD_4_0:1.1.1.3.0.10
	OPENBSD_4_0_BASE:1.1.1.3
	PERL_5_8_8:1.1.1.3
	OPENBSD_3_9:1.1.1.3.0.8
	OPENBSD_3_9_BASE:1.1.1.3
	OPENBSD_3_8:1.1.1.3.0.6
	OPENBSD_3_8_BASE:1.1.1.3
	OPENBSD_3_7:1.1.1.3.0.4
	OPENBSD_3_7_BASE:1.1.1.3
	PERL_5_8_6:1.1.1.3
	OPENBSD_3_6:1.1.1.3.0.2
	OPENBSD_3_6_BASE:1.1.1.3
	PERL_5_8_5:1.1.1.3
	PERL_5_8_3:1.1.1.3
	OPENBSD_3_5:1.1.1.2.0.2
	OPENBSD_3_5_BASE:1.1.1.2
	PERL_5_8_2:1.1.1.2
	OPENBSD_3_4:1.1.1.1.0.4
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.2
	OPENBSD_3_3_BASE:1.1.1.1
	PERL_5_8_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2002.10.27.22.14.57;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.10.27.22.14.57;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.12.03.02.43.57;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.04.07.21.13.11;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2008.09.29.17.18.28;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2009.10.12.18.10.47;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2013.03.25.20.08.49;	author sthen;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2014.03.24.14.59.03;	author afresh1;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@# $Id: vos.sh,v 1.0 2001-12-11 09:30:00-05 Green Exp $

# This is a hints file for Stratus VOS, using the POSIX environment
# in VOS 14.4.0 and higher.
#
# VOS POSIX is based on POSIX.1-1996.  It ships with gcc as the standard
# compiler.
#
# Paul Green (Paul.Green@@stratus.com)

# C compiler and default options.
cc=gcc
ccflags="-D_SVID_SOURCE -D_POSIX_C_SOURCE=199509L"

# Make command.
make="/system/gnu_library/bin/gmake"
# indented to not put it into config.sh
  _make="/system/gnu_library/bin/gmake"

# Architecture name
archname="hppa1.1"

# Executable suffix.
# No, this is not a typo.  The ".pm" really is the native
# executable suffix in VOS.  Talk about cosmic resonance.
_exe=".pm"

# Object library paths.
loclibpth="/system/stcp/object_library"
loclibpth="$loclibpth /system/stcp/object_library/common"
loclibpth="$loclibpth /system/stcp/object_library/net"
loclibpth="$loclibpth /system/stcp/object_library/socket"
loclibpth="$loclibpth /system/posix_object_library/sysv"
loclibpth="$loclibpth /system/posix_object_library"
loclibpth="$loclibpth /system/c_object_library"
loclibpth="$loclibpth /system/object_library"
glibpth="$loclibpth"

# Include library paths
locincpth="/system/stcp/include_library"
locincpth="$locincpth /system/include_library/sysv"
usrinc="/system/include_library"

# Where to install perl5.
prefix=/system/ported/perl5

# Linker is gcc.
ld="gcc"

# No shared libraries.
so="none"

# Don't use nm.
usenm="n"

# Make the default be no large file support.
uselargefiles="n"

# Don't use malloc that comes with perl.
usemymalloc="n"

# Make bison the default compiler-compiler.
yacc="/system/gnu_library/bin/bison"

# VOS doesn't have (or need) a pager, but perl needs one.
pager="/system/gnu_library/bin/cat.pm"

# VOS has a bug that causes _exit() to flush all files.
# This confuses the tests.  Make 'em happy here.
fflushNULL=define

# VOS has a link() function but it is a dummy.
d_link="undef"

# VOS does not have truncate() but we supply one in vos.c
d_truncate="define"
archobjs="vos.o"

# Help gmake find vos.c
test -h vos.c || ln -s vos/vos.c vos.c

# VOS returns a constant 1 for st_nlink when stat'ing a
# directory. Therefore, we must set this variable to stop
# File::Find using the link count to determine whether there are
# subdirectories to be searched.
dont_use_nlink=define

# Tell Configure where to find the hosts file.
hostcat="cat /system/stcp/hosts"

# VOS does not have socketpair() but we supply one in vos.c
d_sockpair="define"

# Once we have the compiler flags defined, Configure will
# execute the following call-back script. See hints/README.hints
# for details.
cat > UU/cc.cbu <<'EOCBU'
# This script UU/cc.cbu will get 'called-back' by Configure after it
# has prompted the user for the C compiler to use.

# Compile and run the a test case to see if bug gnu_g++-220 is
# present. If so, lower the optimization level when compiling
# pp_pack.c.  This works around a bug in unpack.

echo " "
echo "Testing whether bug gnu_g++-220 is fixed in your compiler..."

# Try compiling the test case.
if $cc -o t001 -O $ccflags $ldflags ../hints/t001.c; then
	gccbug=`$run ./t001`
	if [ "X$gccversion" = "X" ]; then
		# Done too late in Configure if hinted
		gccversion=`$cc --version | sed 's/.*(GCC) *//'`
	fi
	case "$gccbug" in
	*fails*)	cat >&4 <<EOF
This C compiler ($gccversion) is known to have optimizer
problems when compiling pp_pack.c.  The Stratus bug number
for this problem is gnu_g++-220.

Disabling optimization for pp_pack.c.
EOF
			case "$pp_pack_cflags" in
			'')	pp_pack_cflags='optimize='
				echo "pp_pack_cflags='optimize=\"\"'" >> config.sh ;;
			*)  echo "You specified pp_pack_cflags yourself, so we'll go with your value." >&4 ;;
			esac
		;;
	*)	echo "Your compiler is ok." >&4
		;;
	esac
else
	echo " "
	echo "*** WHOA THERE!!! ***" >&4
	echo "    Your C compiler \"$cc\" doesn't seem to be working!" >&4
	case "$knowitall" in
	'')
		echo "    You'd better start hunting for one and let me know about it." >&4
		exit 1
		;;
	esac
fi

$rm -f t001$_o t001$_exe t001.kp
EOCBU
@


1.1.1.1
log
@stock perl 5.8.0 from CPAN
@
text
@@


1.1.1.2
log
@perl 5.8.2 from CPAN
@
text
@a145 2


@


1.1.1.3
log
@perl 5.8.3 from CPAN
@
text
@a147 2
# VOS 14.7 has minimal support for dynamic linking. Too minimal for perl.
usedl="undef"
@


1.1.1.4
log
@import perl 5.10.0 from CPAN
@
text
@d113 1
a113 1
		gccversion=`$cc -dumpversion`
@


1.1.1.5
log
@import perl 5.10.1
@
text
@d6 2
a7 2
# VOS POSIX is based on POSIX.1-1996 and contains elements of
# POSIX.1-2001.  It ships with gcc as the standard compiler.
d13 1
a13 1
ccflags="-D_SVID_SOURCE -D_POSIX_C_SOURCE=200112L"
d21 1
a21 5
if test `uname -m` = i786; then
     archname="i786"
else
     archname="hppa1.1"
fi
d40 1
a40 7
# Pick up vos/syslog.h on Continuum Platform.
if test "$archname" = "i786"; then
     locincpth=""
else
     locincpth=`pwd`/vos
fi
locincpth="$locincpth /system/stcp/include_library"
@


1.1.1.6
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d1 4
a4 2
# This is a hints file for Stratus OpenVOS, using the POSIX environment
# found in VOS 17.1.0 and higher.
d6 1
a6 1
# OpenVOS POSIX is based on POSIX.1-1996 and contains elements of
d13 1
a13 3
ccflags="-D_XOPEN_SOURCE=700 -D_VOS_EXTENDED_NAMES"
ccdlflags="-Wl,-rpath,$shrpdir"
cccdlflags="-fPIC"
d20 5
a24 8
# Check for the minimum acceptable release of OpenVOS (17.1.0).
if test `uname -r | sed -e 's/OpenVOS Release //' -e 's/VOS Release //'` \< "17.1.0"; then
cat >&4 <<EOF
***
*** This version of Perl 5 must be built on OpenVOS Release 17.1.0 or later.
***
EOF
exit 1
a26 3
# Always X86
archname=`uname -m`

d33 5
d44 8
a51 1
locincpth=""
a58 1
lddlflags="-shared"
d60 2
a61 2
# Shared libraries!
so="so"
d63 1
a63 4
# Build libperl.so
useshrplib="true"

# Don't use nm. The VOS copy of libc.a is empty.
d92 6
d100 60
@


1.1.1.7
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d10 4
a13 2
cc=${CC-gcc}
ccflags=${CFLAGS-"-D_XOPEN_SOURCE=700 -D_SYSV -D_VOS_EXTENDED_NAMES -D_FILE_OFFSET_BITS=64"}
d16 1
a16 1
make=${MAKE-"/system/gnu_library/bin/gmake"}
d18 1
a18 1
  _make=${MAKE-"/system/gnu_library/bin/gmake"}
d30 1
a30 1
# Architecture name always X86
d46 1
a46 1
usrinc=${USRINC-"/system/include_library"}
d49 1
a49 1
prefix=/system/ported
d52 8
a59 1
ld=${CC-"gcc"}
d64 3
d73 2
a74 2
# VOS doesn't need a pager, but perl does.
pager="/system/gnu_library/bin/less.pm"
a91 24

# VOS 17.1 has support for dynamic linking.
usedl="define"

# Filename suffix for shared libraries.
so="so"

# Flags used when compiling a module for a shared library.
cccdlflags="-fPIC"

# Flags passed to $ld to produce shared libraries.
lddlflags="-shared"

# Flags passed to $cc when linking a program that uses shared libraries.
ccdlflags="-Wl,-export-dynamic"

# Filename suffix for dynamically-loaded perl modules.
dlext="so"

# Use dlopen() to open shared libraries.
dlsrc="dl_dlopen.xs"

# Build a shared libperl?  (Define on Configure cmd line.)
# useshrplib="true"
@


