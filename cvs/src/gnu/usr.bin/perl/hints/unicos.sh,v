head	1.8;
access;
symbols
	OPENBSD_6_0:1.8.0.44
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.38
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.40
	OPENBSD_5_8_BASE:1.8
	PERL_5_20_2:1.1.1.7
	OPENBSD_5_7:1.8.0.32
	OPENBSD_5_7_BASE:1.8
	PERL_5_20_1:1.1.1.7
	OPENBSD_5_6:1.8.0.36
	OPENBSD_5_6_BASE:1.8
	PERL_5_18_2:1.1.1.7
	PERL:1.1.1
	OPENBSD_5_5:1.8.0.34
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.30
	OPENBSD_5_4_BASE:1.8
	PERL_5_16_3:1.1.1.7
	OPENBSD_5_3:1.8.0.28
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.26
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.24
	OPENBSD_5_0:1.8.0.22
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.20
	OPENBSD_4_9_BASE:1.8
	PERL_5_12_2:1.1.1.7
	OPENBSD_4_8:1.8.0.18
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.14
	OPENBSD_4_7_BASE:1.8
	PERL_5_10_1:1.1.1.7
	OPENBSD_4_6:1.8.0.16
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.12
	OPENBSD_4_5_BASE:1.8
	PERL_5_10_0:1.1.1.7
	OPENBSD_4_4:1.8.0.10
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.8
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.6
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.4
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.2
	OPENBSD_4_0_BASE:1.8
	PERL_5_8_8:1.1.1.7
	OPENBSD_3_9:1.7.0.10
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.8
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.6
	OPENBSD_3_7_BASE:1.7
	PERL_5_8_6:1.1.1.6
	OPENBSD_3_6:1.7.0.4
	OPENBSD_3_6_BASE:1.7
	PERL_5_8_5:1.1.1.6
	PERL_5_8_3:1.1.1.6
	OPENBSD_3_5:1.7.0.2
	OPENBSD_3_5_BASE:1.7
	PERL_5_8_2:1.1.1.6
	OPENBSD_3_4:1.6.0.4
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.6.0.2
	OPENBSD_3_3_BASE:1.6
	PERL_5_8_0:1.1.1.5
	OPENBSD_3_2:1.5.0.6
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.4
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	PERL_5_6_1:1.1.1.4
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	PERL_5_6_0:1.1.1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	PERL_500503:1.1.1.2
	CPAN:1.1.1
	OPENBSD_2_5:1.2.0.6
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.4
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	perl5003:1.1.1.1
	lwall:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.8
date	2006.03.28.19.23.04;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2003.12.03.03.02.35;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.10.27.22.25.25;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.24.18.35.21;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.06.17.05.55;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	99.04.29.22.51.40;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.11.30.07.56.32;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.08.19.10.12.28;	author downsj;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.08.19.10.12.28;	author downsj;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.04.29.22.39.37;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2000.04.06.16.09.30;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2001.05.24.18.23.13;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2002.10.27.22.14.56;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2003.12.03.02.43.57;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2006.03.28.18.48.30;	author millert;	state Exp;
branches;
next	;


desc
@@


1.8
log
@merge in perl 5.8.8
@
text
@case `uname -r` in
6.1*) shellflags="-m+65536" ;;
esac

case "$optimize" in
# If we used fastmd (the default) integer values would be limited to 46 bits.
# --Mark P. Lutz
'') optimize="$optimize -O1 -h nofastmd" ;;
esac

# At least in the following environment
# uname -a: snxxxx xxxx 9.0.2.2 sin.0 CRAY Y-MP
# cc -V:    Cray Standard C Version 4.0.3  (057126) Jan 29 2006  07:27:26
# one has to drop optimisation from perl.c or otherwise
# the resulting miniperl executable does nothing (visible)
# but always exits with zero (success) exit status, this
# making it impossible to build the perl executable. --jhi
perl_cflags='optimize="-O0"'

# The default is to die in runtime on math overflows.
# Let's not do that. --jhi
ccflags="$ccflags -h matherror=errno" 

# Cray floating point (cfp) CPUs need -h rounddiv
# (It gives int((2/3)*3) a chance to be 2, not 1. --jhi)
# (but IEEE CPUs, IEEE/ieee/CPE1 CPUs should not have -h rounddiv,
#  since the compiler on those CPUs doesn't even support the option.)
if /etc/cpu -i | grep -q cfp
then
    ccflags="$ccflags -h rounddiv"
fi

# Avoid an optimizer bug where a volatile variables
# isn't correctly saved and restored --Mark P. Lutz 
pp_ctl_cflags='ccflags="$ccflags -h scalar0 -h vector0"'
# Otherwise the unpack %65c checksums will fail.
pp_pack_cflags='optimize="$ccflags -h scalar0 -h vector0"'
case "$usemymalloc" in
'') # The perl malloc.c SHOULD work says Ilya.
    # But for the time being (5.004_68), alas, it doesn't. --jhi
    # usemymalloc='y'
    # ccflags="$ccflags -DNO_RCHECK"
    usemymalloc='n'
    ;;
esac
# Configure gets fooled for some reason, these do not exist.
d_getpgid='undef'
d_setitimer='undef'
# These exist but do not really work.
d_setregid='undef'
d_setreuid='undef'
# No shared libraries.
so='none'
# No dynaloading.
d_dlopen='undef'
i_dlfcn='undef'
# Threads call-back unit.
cat > UU/usethreads.cbu <<'EOCBU'
# This script UU/usethreads.cbu will get 'called-back' by Configure
# after it has prompted the user for whether to use threads.
case "$usethreads" in
$define|true|[yY]*)
        set `echo X "$libswanted "| sed -e "s/ c / pthread c /"`
        shift
        libswanted="$*"
	;;
esac
EOCBU
@


1.7
log
@Resolve conflicts for perl 5.8.2, remove old files, and add OpenBSD-specific scaffolding
@
text
@d4 1
d8 1
a8 1
'') optimize="$optimize -h nofastmd" ;;
d10 10
@


1.6
log
@Resolve conflicts, remove old files, merge local changes
@
text
@d43 3
@


1.5
log
@merge in perl 5.6.1 with our local changes
@
text
@d12 10
a21 2
# Give int((2/3)*3) a chance to be 2, not 1. --jhi
ccflags="$ccflags -h rounddiv"
d25 2
d35 1
a35 1
# Configure gets fooled for some reason.  There is no getpgid().
d37 1
d41 14
@


1.4
log
@perl-5.6.0 + local changes
@
text
@d5 3
a7 1
'') optimize="-O1" ;;
d9 8
a16 2
d_setregid='undef'
d_setreuid='undef'
d19 1
a19 1
    # But for the time being (5.004_68), alas, it doesn't.
d27 3
@


1.3
log
@perl5.005_03 (stock)
@
text
@d17 2
@


1.2
log
@perl 5.004_04
@
text
@d4 3
a6 1
optimize="-O1"
d9 8
a16 1

@


1.1
log
@Initial revision
@
text
@a3 1
ccflags="$ccflags -DHZ=__hertz"
a4 1
libswanted=m
@


1.1.1.1
log
@Import of Perl 5.003 into the tree.  Makefile.bsd-wrapper and
config.sh.OpenBSD are the only local changes.
@
text
@@


1.1.1.2
log
@perl5.005_03
@
text
@d4 3
a6 3
case "$optimize" in
'') optimize="-O1" ;;
esac
d9 1
a9 8
case "$usemymalloc" in
'') # The perl malloc.c SHOULD work says Ilya.
    # But for the time being (5.004_68), alas, it doesn't.
    # usemymalloc='y'
    # ccflags="$ccflags -DNO_RCHECK"
    usemymalloc='n'
    ;;
esac
@


1.1.1.3
log
@virgin perl 5.6.0
@
text
@a16 2
# Configure gets fooled for some reason.  There is no getpgid().
d_getpgid='undef'
@


1.1.1.4
log
@stock perl 5.6.1
@
text
@d5 1
a5 3
# If we used fastmd (the default) integer values would be limited to 46 bits.
# --Mark P. Lutz
'') optimize="$optimize -h nofastmd" ;;
d7 2
a8 8
# The default is to die in runtime on math overflows.
# Let's not do that. --jhi
ccflags="$ccflags -h matherror=errno" 
# Give int((2/3)*3) a chance to be 2, not 1. --jhi
ccflags="$ccflags -h rounddiv"
# Avoid an optimizer bug where a volatile variables
# isn't correctly saved and restored --Mark P. Lutz 
pp_ctl_cflags='ccflags="$ccflags -h scalar0 -h vector0"'
d11 1
a11 1
    # But for the time being (5.004_68), alas, it doesn't. --jhi
a18 3
# These exist but do not really work.
d_setregid='undef'
d_setreuid='undef'
@


1.1.1.5
log
@stock perl 5.8.0 from CPAN
@
text
@d12 2
a13 10

# Cray floating point (cfp) CPUs need -h rounddiv
# (It gives int((2/3)*3) a chance to be 2, not 1. --jhi)
# (but IEEE CPUs, IEEE/ieee/CPE1 CPUs should not have -h rounddiv,
#  since the compiler on those CPUs doesn't even support the option.)
if /etc/cpu -i | grep -q cfp
then
    ccflags="$ccflags -h rounddiv"
fi

a16 2
# Otherwise the unpack %65c checksums will fail.
pp_pack_cflags='optimize="$ccflags -h scalar0 -h vector0"'
d25 1
a25 1
# Configure gets fooled for some reason, these do not exist.
a26 1
d_setitimer='undef'
a29 14
# No shared libraries.
so='none'
# Threads call-back unit.
cat > UU/usethreads.cbu <<'EOCBU'
# This script UU/usethreads.cbu will get 'called-back' by Configure
# after it has prompted the user for whether to use threads.
case "$usethreads" in
$define|true|[yY]*)
        set `echo X "$libswanted "| sed -e "s/ c / pthread c /"`
        shift
        libswanted="$*"
	;;
esac
EOCBU
@


1.1.1.6
log
@perl 5.8.2 from CPAN
@
text
@a42 3
# No dynaloading.
d_dlopen='undef'
i_dlfcn='undef'
@


1.1.1.7
log
@perl 5.8.8 import
@
text
@a3 1

d7 1
a7 1
'') optimize="$optimize -O1 -h nofastmd" ;;
a8 10

# At least in the following environment
# uname -a: snxxxx xxxx 9.0.2.2 sin.0 CRAY Y-MP
# cc -V:    Cray Standard C Version 4.0.3  (057126) Jan 29 2006  07:27:26
# one has to drop optimisation from perl.c or otherwise
# the resulting miniperl executable does nothing (visible)
# but always exits with zero (success) exit status, this
# making it impossible to build the perl executable. --jhi
perl_cflags='optimize="-O0"'

@


