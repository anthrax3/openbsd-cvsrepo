head	1.6;
access;
symbols
	OPENBSD_4_6:1.5.0.16
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.12
	OPENBSD_4_5_BASE:1.5
	PERL_5_10_0:1.1.1.4
	OPENBSD_4_4:1.5.0.10
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.8
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.6
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.4
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.2
	OPENBSD_4_0_BASE:1.5
	PERL_5_8_8:1.1.1.4
	OPENBSD_3_9:1.4.0.10
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.8
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.6
	OPENBSD_3_7_BASE:1.4
	PERL_5_8_6:1.1.1.3
	OPENBSD_3_6:1.4.0.4
	OPENBSD_3_6_BASE:1.4
	PERL_5_8_5:1.1.1.3
	PERL_5_8_3:1.1.1.3
	OPENBSD_3_5:1.4.0.2
	OPENBSD_3_5_BASE:1.4
	PERL_5_8_2:1.1.1.3
	OPENBSD_3_4:1.3.0.4
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.3.0.2
	OPENBSD_3_3_BASE:1.3
	PERL_5_8_0:1.1.1.2
	OPENBSD_3_2:1.2.0.14
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.12
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.10
	OPENBSD_3_0_BASE:1.2
	PERL_5_6_1:1.1.1.1
	OPENBSD_2_9:1.2.0.8
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.6
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.4
	OPENBSD_2_7_BASE:1.2
	PERL_5_6_0:1.1.1.1
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	PERL_500503:1.1.1.1
	CPAN:1.1.1
	OPENBSD_2_5:1.1.0.6
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.4
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.2
	OPENBSD_2_3_BASE:1.1;
locks; strict;
comment	@# @;


1.6
date	2009.10.12.18.24.47;	author millert;	state dead;
branches;
next	1.5;

1.5
date	2006.03.28.19.23.09;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2003.12.03.03.02.43;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2002.10.27.22.25.32;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	99.04.29.22.52.07;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	97.11.30.07.58.57;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.29.22.40.32;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.10.27.22.15.03;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.12.03.02.44.19;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2006.03.28.18.49.13;	author millert;	state Exp;
branches;
next	;


desc
@perl 5.004_04
@


1.6
log
@Merge in perl 5.10.1
@
text
@#!/usr/local/bin/perl

use Config;
use File::Basename qw(&basename &dirname);
use Cwd;

# List explicitly here the variables you want Configure to
# generate.  Metaconfig only looks for shell variables, so you
# have to mention them as if they were shell variables, not
# %Config entries.  Thus you write
#  $startperl
# to ensure Configure will look for $Config{startperl}.

# This forces PL files to create target in same directory as PL file.
# This is so that make depend always knows where to find PL derivatives.
$origdir = cwd;
chdir dirname($0);
$file = basename($0, '.PL');
$file .= '.com' if $^O eq 'VMS';

open OUT,">$file" or die "Can't create $file: $!";

print "Extracting $file (with variable substitutions)\n";

# In this section, perl variables will be expanded during extraction.
# You can use $Config{...} to use Configure variables.

print OUT <<"!GROK!THIS!";
$Config{startperl}
    eval 'exec $Config{perlpath} -S \$0 \${1+"\$@@"}'
	if \$running_under_some_shell;
!GROK!THIS!

# In the following, perl variables are not expanded during extraction.

print OUT <<'!NO!SUBS!';
# From roderick@@gate.netThu Sep  5 17:19:30 1996
# Date: Thu, 05 Sep 1996 00:11:22 -0400
# From: Roderick Schertler <roderick@@gate.net>
# To: perl5-porters@@africa.nicoh.com
# Subject: POD lines with only spaces
#
# There are some places in the documentation where a POD directive is
# ignored because the line before it contains whitespace (and so the
# directive doesn't start a paragraph).  This patch adds a way to check
# for these to the pod Makefile (though it isn't made part of the build
# process, which would be a good idea), and fixes those places where the
# problem currently exists.
#
#  Version 1.00  Original.
#  Version 1.01  Andy Dougherty <doughera@@lafayette.edu>
#    Trivial modifications to output format for easier auto-parsing
#    Broke it out as a separate function to avoid nasty
#	Make/Shell/Perl quoting problems, and also to make it easier
#	to grow.  Someone will probably want to rewrite in terms of
#	some sort of Pod::Checker module.  Or something.  Consider this
#	a placeholder for the future.
#  Version 1.02  Roderick Schertler <roderick@@argon.org>
#	Check for pod directives following any kind of unempty line, not
#	just lines of whitespace.

@@directive = qw(head1 head2 item over back cut pod for begin end);
@@directive{@@directive} = (1) x @@directive;

$exit = $last_unempty = 0;
while (<>) {
    s/(\012|\015\012|\015)$//;
    if (/^=(\S+)/ && $directive{$1} && $last_unempty) {
	printf "%s: line %5d, no blank line preceding directive =%s\n",
		$ARGV, $., $1;
	$exit = 1;
    }
    $last_unempty = ($_ ne '');
    if (eof) {
	close(ARGV);
	$last_unempty = 0;
    }
}
exit $exit
!NO!SUBS!

close OUT or die "Can't close $file: $!";
chmod 0755, $file or die "Can't reset permissions for $file: $!\n";
exec("$Config{'eunicefix'} $file") if $Config{'eunicefix'} ne ':';
chdir $origdir;
@


1.5
log
@merge in perl 5.8.8
@
text
@@


1.4
log
@Resolve conflicts for perl 5.8.2, remove old files, and add OpenBSD-specific scaffolding
@
text
@d69 1
a69 1
	printf "%s: line %5d, no blank line preceeding directive =%s\n",
@


1.3
log
@Resolve conflicts, remove old files, merge local changes
@
text
@d51 1
a51 1
#  Version 1.01  Andy Dougherty <doughera@@lafcol.lafayette.edu>
@


1.2
log
@perl5.005_03 (stock)
@
text
@d67 1
a67 1
    chomp;
@


1.1
log
@perl 5.004_04
@
text
@d5 1
d16 1
d42 1
a42 1
# 
d58 8
a65 1
$exit = $last_blank = 0;
d67 3
a69 3
    chop;
    if (/^(=\S+)/ && $last_blank) {
	printf "%s: line %5d, Non-empty line preceeding directive %s\n",
d73 1
a73 1
    $last_blank = /^\s+$/;
d76 1
a76 1
	$last_blank = 0;
d85 1
@


1.1.1.1
log
@perl5.005_03
@
text
@a4 1
use Cwd;
a14 1
$origdir = cwd;
d40 1
a40 1
#
d56 1
a56 8
#  Version 1.02  Roderick Schertler <roderick@@argon.org>
#	Check for pod directives following any kind of unempty line, not
#	just lines of whitespace.

@@directive = qw(head1 head2 item over back cut pod for begin end);
@@directive{@@directive} = (1) x @@directive;

$exit = $last_unempty = 0;
d58 3
a60 3
    chomp;
    if (/^=(\S+)/ && $directive{$1} && $last_unempty) {
	printf "%s: line %5d, no blank line preceeding directive =%s\n",
d64 1
a64 1
    $last_unempty = ($_ ne '');
d67 1
a67 1
	$last_unempty = 0;
a75 1
chdir $origdir;
@


1.1.1.2
log
@stock perl 5.8.0 from CPAN
@
text
@d67 1
a67 1
    s/(\012|\015\012|\015)$//;
@


1.1.1.3
log
@perl 5.8.2 from CPAN
@
text
@d51 1
a51 1
#  Version 1.01  Andy Dougherty <doughera@@lafayette.edu>
@


1.1.1.4
log
@perl 5.8.8 import
@
text
@d69 1
a69 1
	printf "%s: line %5d, no blank line preceding directive =%s\n",
@


