head	1.13;
access;
symbols
	OPENBSD_5_3:1.12.0.10
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.8
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.6
	OPENBSD_5_0:1.12.0.4
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.2
	OPENBSD_4_9_BASE:1.12
	PERL_5_12_2:1.1.1.12
	OPENBSD_4_8:1.11.0.4
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.2
	OPENBSD_4_7_BASE:1.11
	PERL_5_10_1:1.1.1.11
	OPENBSD_4_6:1.10.0.6
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.2
	OPENBSD_4_5_BASE:1.10
	PERL_5_10_0:1.1.1.10
	OPENBSD_4_4:1.9.0.10
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.8
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.6
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.4
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.2
	OPENBSD_4_0_BASE:1.9
	PERL_5_8_8:1.1.1.9
	OPENBSD_3_9:1.8.0.6
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.4
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.2
	OPENBSD_3_7_BASE:1.8
	PERL_5_8_6:1.1.1.8
	OPENBSD_3_6:1.7.0.2
	OPENBSD_3_6_BASE:1.7
	PERL_5_8_5:1.1.1.7
	PERL_5_8_3:1.1.1.6
	OPENBSD_3_5:1.6.0.2
	OPENBSD_3_5_BASE:1.6
	PERL_5_8_2:1.1.1.5
	OPENBSD_3_4:1.5.0.4
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.5.0.2
	OPENBSD_3_3_BASE:1.5
	PERL_5_8_0:1.1.1.4
	OPENBSD_3_2:1.4.0.6
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.4
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4
	PERL_5_6_1:1.1.1.3
	OPENBSD_2_9:1.3.0.6
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	PERL_5_6_0:1.1.1.2
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	PERL_500503:1.1.1.1
	CPAN:1.1.1
	OPENBSD_2_5:1.1.0.6
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.4
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.2
	OPENBSD_2_3_BASE:1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.13
date	2013.03.25.20.40.58;	author sthen;	state dead;
branches;
next	1.12;

1.12
date	2010.09.24.15.07.03;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2009.10.12.18.24.47;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2008.09.29.17.36.16;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2006.03.28.19.23.10;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2005.01.15.21.30.36;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2004.04.07.21.33.08;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2003.12.03.03.02.44;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2002.10.27.22.25.32;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2001.05.24.18.35.53;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.06.17.07.25;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	99.04.29.22.52.10;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	97.11.30.07.59.08;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.29.22.40.41;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2000.04.06.16.10.22;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2001.05.24.18.24.34;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2002.10.27.22.15.04;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2003.12.03.02.44.21;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2004.04.07.21.13.32;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2004.08.09.17.48.08;	author millert;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2005.01.15.21.17.49;	author millert;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2006.03.28.18.49.17;	author millert;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	2008.09.29.17.18.51;	author millert;	state Exp;
branches;
next	1.1.1.11;

1.1.1.11
date	2009.10.12.18.10.39;	author millert;	state Exp;
branches;
next	1.1.1.12;

1.1.1.12
date	2010.09.24.14.49.08;	author millert;	state Exp;
branches;
next	;


desc
@perl 5.004_04
@


1.13
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@=head1 NAME

perlfaq1 - General Questions About Perl

=head1 DESCRIPTION

This section of the FAQ answers very general, high-level questions
about Perl.

=head2 What is Perl?

Perl is a high-level programming language with an eclectic heritage
written by Larry Wall and a cast of thousands. It derives from the
ubiquitous C programming language and to a lesser extent from sed,
awk, the Unix shell, and at least a dozen other tools and languages.
Perl's process, file, and text manipulation facilities make it
particularly well-suited for tasks involving quick prototyping, system
utilities, software tools, system management tasks, database access,
graphical programming, networking, and world wide web programming.
These strengths make it especially popular with system administrators
and CGI script authors, but mathematicians, geneticists, journalists,
and even managers also use Perl. Maybe you should, too.

=head2 Who supports Perl? Who develops it? Why is it free?

The original culture of the pre-populist Internet and the deeply-held
beliefs of Perl's author, Larry Wall, gave rise to the free and open
distribution policy of perl. Perl is supported by its users. The
core, the standard Perl library, the optional modules, and the
documentation you're reading now were all written by volunteers. See
the personal note at the end of the README file in the perl source
distribution for more details. See L<perlhist> (new as of 5.005)
for Perl's milestone releases.

In particular, the core development team (known as the Perl Porters)
are a rag-tag band of highly altruistic individuals committed to
producing better software for free than you could hope to purchase for
money. You may snoop on pending developments via the archives at
http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/
and http://archive.develooper.com/perl5-porters@@perl.org/
or the news gateway nntp://nntp.perl.org/perl.perl5.porters or
its web interface at http://nntp.perl.org/group/perl.perl5.porters ,
or read the faq at http://dev.perl.org/perl5/docs/p5p-faq.html ,
or you can subscribe to the mailing list by sending
perl5-porters-subscribe@@perl.org a subscription request
(an empty message with no subject is fine).

While the GNU project includes Perl in its distributions, there's no
such thing as "GNU Perl". Perl is not produced nor maintained by the
Free Software Foundation. Perl's licensing terms are also more open
than GNU software's tend to be.

You can get commercial support of Perl if you wish, although for most
users the informal support will more than suffice. See the answer to
"Where can I buy a commercial version of perl?" for more information.

=head2 Which version of Perl should I use?

(contributed by brian d foy)

There is often a matter of opinion and taste, and there isn't any one
answer that fits everyone. In general, you want to use either the current
stable release, or the stable release immediately prior to that one.
Currently, those are perl5.10.x and perl5.8.x, respectively.

Beyond that, you have to consider several things and decide which is best
for you.

=over 4

=item *

If things aren't broken, upgrading perl may break them (or at least issue
new warnings).

=item *

The latest versions of perl have more bug fixes.

=item *

The Perl community is geared toward supporting the most recent releases,
so you'll have an easier time finding help for those.

=item *

Versions prior to perl5.004 had serious security problems with buffer
overflows, and in some cases have CERT advisories (for instance,
http://www.cert.org/advisories/CA-1997-17.html ).

=item *

The latest versions are probably the least deployed and widely tested, so
you may want to wait a few months after their release and see what
problems others have if you are risk averse.

=item *

The immediate, previous releases (i.e. perl5.8.x ) are usually maintained
for a while, although not at the same level as the current releases.

=item *

No one is actively supporting Perl 4. Five years ago it was a dead
camel carcass (according to this document). Now it's barely a skeleton
as its whitewashed bones have fractured or eroded.

=item *

There is no Perl 6 release scheduled, but it will be available when
it's ready. Stay tuned, but don't worry that you'll have to change
major versions of Perl; no one is going to take Perl 5 away from you.

=item *

There are really two tracks of perl development: a maintenance version
and an experimental version. The maintenance versions are stable, and
have an even number as the minor release (i.e. perl5.10.x, where 10 is the
minor release). The experimental versions may include features that
don't make it into the stable versions, and have an odd number as the
minor release (i.e. perl5.9.x, where 9 is the minor release).

=back


=head2 What are Perl 4, Perl 5, or Perl 6?

(contributed by brian d foy)

In short, Perl 4 is the past, Perl 5 is the present, and Perl 6 is the
future.

The number after perl (i.e. the 5 after Perl 5) is the major release
of the perl interpreter as well as the version of the language. Each
major version has significant differences that earlier versions cannot
support.

The current major release of Perl is Perl 5, and was released in 1994.
It can run scripts from the previous major release, Perl 4 (March 1991),
but has significant differences. It introduced the concept of references,
complex data structures, and modules. The Perl 5 interpreter was a
complete re-write of the previous perl sources.

Perl 6 is the next major version of Perl, but it's still in development
in both its syntax and design. The work started in 2002 and is still
ongoing. Many of the most interesting features have shown up in the
latest versions of Perl 5, and some Perl 5 modules allow you to use some
Perl 6 syntax in your programs. You can learn more about Perl 6 at
http://dev.perl.org/perl6/ .

See L<perlhist> for a history of Perl revisions.

=head2 What was Ponie?

(contributed by brian d foy)

Ponie stands for "Perl On the New Internal Engine", started by Arthur
Bergman from Fotango in 2003, and subsequently run as a project of The
Perl Foundation. It was abandoned in 2006
( http://www.nntp.perl.org/group/perl.ponie.dev/487 ).

Instead of using the current Perl internals, Ponie aimed to create a
new one that would provide a translation path from Perl 5 to Perl 6
(or anything else that targets Parrot, actually). You would have been
able to just keep using Perl 5 with Parrot, the virtual machine which
will compile and run Perl 6 bytecode.

=head2 What is Perl 6?

At The Second O'Reilly Open Source Software Convention, Larry Wall
announced Perl 6 development would begin in earnest. Perl 6 was an oft
used term for Chip Salzenberg's project to rewrite Perl in C++ named
Topaz. However, Topaz provided valuable insights to the next version
of Perl and its implementation, but was ultimately abandoned.

If you want to learn more about Perl 6, or have a desire to help in
the crusade to make Perl a better place then read the Perl 6 developers
page at http://dev.perl.org/perl6/ and get involved.

Perl 6 is not scheduled for release yet, and Perl 5 will still be supported
for quite awhile after its release. Do not wait for Perl 6 to do whatever
you need to do.

"We're really serious about reinventing everything that needs reinventing."
--Larry Wall

=head2 How stable is Perl?

Production releases, which incorporate bug fixes and new functionality,
are widely tested before release. Since the 5.000 release, we have
averaged only about one production release per year.

Larry and the Perl development team occasionally make changes to the
internal core of the language, but all possible efforts are made toward
backward compatibility. While not quite all Perl 4 scripts run flawlessly
under Perl 5, an update to perl should nearly never invalidate a program
written for an earlier version of perl (barring accidental bug fixes
and the rare new keyword).

=head2 Is Perl difficult to learn?

No, Perl is easy to start learning--and easy to keep learning. It looks
like most programming languages you're likely to have experience
with, so if you've ever written a C program, an awk script, a shell
script, or even a BASIC program, you're already partway there.

Most tasks only require a small subset of the Perl language. One of
the guiding mottos for Perl development is "there's more than one way
to do it" (TMTOWTDI, sometimes pronounced "tim toady"). Perl's
learning curve is therefore shallow (easy to learn) and long (there's
a whole lot you can do if you really want).

Finally, because Perl is frequently (but not always, and certainly not by
definition) an interpreted language, you can write your programs and test
them without an intermediate compilation step, allowing you to experiment
and test/debug quickly and easily. This ease of experimentation flattens
the learning curve even more.

Things that make Perl easier to learn: Unix experience, almost any kind
of programming experience, an understanding of regular expressions, and
the ability to understand other people's code. If there's something you
need to do, then it's probably already been done, and a working example is
usually available for free. Don't forget Perl modules, either.
They're discussed in Part 3 of this FAQ, along with CPAN, which is
discussed in Part 2.

=head2 How does Perl compare with other languages like Java, Python, REXX, Scheme, or Tcl?

Favorably in some areas, unfavorably in others. Precisely which areas
are good and bad is often a personal choice, so asking this question
on Usenet runs a strong risk of starting an unproductive Holy War.

Probably the best thing to do is try to write equivalent code to do a
set of tasks. These languages have their own newsgroups in which you
can learn about (but hopefully not argue about) them.

Some comparison documents can be found at http://www.perl.com/doc/FMTEYEWTK/versus/
if you really can't stop yourself.

=head2 Can I do [task] in Perl?

Perl is flexible and extensible enough for you to use on virtually any
task, from one-line file-processing tasks to large, elaborate systems.
For many people, Perl serves as a great replacement for shell scripting.
For others, it serves as a convenient, high-level replacement for most of
what they'd program in low-level languages like C or C++. It's ultimately
up to you (and possibly your management) which tasks you'll use Perl
for and which you won't.

If you have a library that provides an API, you can make any component
of it available as just another Perl function or variable using a Perl
extension written in C or C++ and dynamically linked into your main
perl interpreter. You can also go the other direction, and write your
main program in C or C++, and then link in some Perl code on the fly,
to create a powerful application. See L<perlembed>.

That said, there will always be small, focused, special-purpose
languages dedicated to a specific problem domain that are simply more
convenient for certain kinds of problems. Perl tries to be all things
to all people, but nothing special to anyone. Examples of specialized
languages that come to mind include prolog and matlab.

=head2 When shouldn't I program in Perl?

When your manager forbids it--but do consider replacing them :-).

Actually, one good reason is when you already have an existing
application written in another language that's all done (and done
well), or you have an application language specifically designed for a
certain task (e.g. prolog, make).

For various reasons, Perl is probably not well-suited for real-time
embedded systems, low-level operating systems development work like
device drivers or context-switching code, complex multi-threaded
shared-memory applications, or extremely large applications. You'll
notice that perl is not itself written in Perl.

Perl remains fundamentally a dynamically typed language, not
a statically typed one. You certainly won't be chastised if you don't
trust nuclear-plant or brain-surgery monitoring code to it. And Larry
will sleep easier, too--Wall Street programs not withstanding. :-)

=head2 What's the difference between "perl" and "Perl"?

One bit. Oh, you weren't talking ASCII? :-) Larry now uses "Perl" to
signify the language proper and "perl" the implementation of it, i.e.
the current interpreter. Hence Tom's quip that "Nothing but perl can
parse Perl."

Before the first edition of I<Programming perl>, people commonly
referred to the language as "perl", and its name appeared that way in
the title because it referred to the interpreter. In the book, Randal
Schwartz capitalised the language's name to make it stand out better
when typeset. This convention was adopted by the community, and the
second edition became I<Programming Perl>, using the capitalized
version of the name to refer to the language.

You may or may not choose to follow this usage. For example,
parallelism means "awk and perl" and "Python and Perl" look good, while
"awk and Perl" and "Python and perl" do not. But never write "PERL",
because perl is not an acronym, apocryphal folklore and post-facto
expansions notwithstanding.

=head2 Is it a Perl program or a Perl script?

Larry doesn't really care. He says (half in jest) that "a script is
what you give the actors. A program is what you give the audience."

Originally, a script was a canned sequence of normally interactive
commands--that is, a chat script. Something like a UUCP or PPP chat
script or an expect script fits the bill nicely, as do configuration
scripts run by a program at its start up, such F<.cshrc> or F<.ircrc>,
for example. Chat scripts were just drivers for existing programs,
not stand-alone programs in their own right.

A computer scientist will correctly explain that all programs are
interpreted and that the only question is at what level. But if you
ask this question of someone who isn't a computer scientist, they might
tell you that a I<program> has been compiled to physical machine code
once and can then be run multiple times, whereas a I<script> must be
translated by a program each time it's used.

Now that "script" and "scripting" are terms that have been seized by
unscrupulous or unknowing marketeers for their own nefarious purposes,
they have begun to take on strange and often pejorative meanings,
like "non serious" or "not real programming". Consequently, some Perl
programmers prefer to avoid them altogether.

=head2 What is a JAPH?

(contributed by brian d foy)

JAPH stands for "Just another Perl hacker,", which Randal Schwartz used
to sign email and usenet messages starting in the late 1980s. He
previously used the phrase with many subjects ("Just another x hacker,"),
so to distinguish his JAPH, he started to write them as Perl programs:

	print "Just another Perl hacker,";

Other people picked up on this and started to write clever or obfuscated
programs to produce the same output, spinning things quickly out of
control while still providing hours of amusement for their creators and
readers.

CPAN has several JAPH programs at http://www.cpan.org/misc/japh .

=head2 Where can I get a list of Larry Wall witticisms?

(contributed by brian d foy)

Google "larry wall quotes"! You might even try the "I feel lucky" button.
:)

Wikiquote has the witticisms from Larry along with their source,
including his usenet postings and source code comments.

If you want a plain text file, try
http://www.cpan.org/misc/lwall-quotes.txt.gz .

=head2 How can I convince others to use Perl?

(contributed by brian d foy)

Appeal to their self interest! If Perl is new (and thus scary) to them,
find something that Perl can do to solve one of their problems. That
might mean that Perl either saves them something (time, headaches, money)
or gives them something (flexibility, power, testability).

In general, the benefit of a language is closely related to the skill of
the people using that language. If you or your team can be more faster,
better, and stronger through Perl, you'll deliver more value. Remember,
people often respond better to what they get out of it. If you run
into resistance, figure out what those people get out of the other
choice and how Perl might satisfy that requirement.

You don't have to worry about finding or paying for Perl; it's freely
available and several popular operating systems come with Perl. Community
support in places such as Perlmonks ( http://www.perlmonks.com )
and the various Perl mailing lists ( http://lists.perl.org ) means that
you can usually get quick answers to your problems.

Finally, keep in mind that Perl might not be the right tool for every
job. You're a much better advocate if your claims are reasonable and
grounded in reality. Dogmatically advocating anything tends to make
people discount your message. Be honest about possible disadvantages
to your choice of Perl since any choice has trade-offs.

You might find these links useful:

=over 4

=item * http://perltraining.com.au/whyperl.html

=item * http://www.perl.org/advocacy/whyperl.html

=back

=head1 AUTHOR AND COPYRIGHT

Copyright (c) 1997-2010 Tom Christiansen, Nathan Torkington, and
other authors as noted. All rights reserved.

This documentation is free; you can redistribute it and/or modify it
under the same terms as Perl itself.

Irrespective of its distribution, all code examples here are in the public
domain. You are permitted and encouraged to use this code and any
derivatives thereof in your own programs for fun or for profit as you
see fit. A simple comment in the code giving credit to the FAQ would
be courteous but is not required.
@


1.12
log
@merge in perl 5.12.2 plus local changes
@
text
@@


1.11
log
@Merge in perl 5.10.1
@
text
@d13 1
a13 1
written by Larry Wall and a cast of thousands.  It derives from the
d22 1
a22 1
and even managers also use Perl.  Maybe you should, too.
d24 1
a24 1
=head2 Who supports Perl?  Who develops it?  Why is it free?
d28 1
a28 1
distribution policy of perl.  Perl is supported by its users.  The
d30 1
a30 1
documentation you're reading now were all written by volunteers.  See
d32 1
a32 1
distribution for more details.  See L<perlhist> (new as of 5.005)
d38 1
a38 1
money.  You may snoop on pending developments via the archives at
d45 1
a45 1
perl5-porters-request@@perl.org a subscription request
d49 2
a50 2
such thing as "GNU Perl".  Perl is not produced nor maintained by the
Free Software Foundation.  Perl's licensing terms are also more open
d54 1
a54 1
users the informal support will more than suffice.  See the answer to
d104 2
a105 2
No one is actively supporting Perl 4.  Five years ago it was a dead
camel carcass (according to this document).  Now it's barely a skeleton
d111 1
a111 1
it's ready.  Stay tuned, but don't worry that you'll have to change
d117 1
a117 1
and an experimental version.  The maintenance versions are stable, and
d119 1
a119 1
minor release).  The experimental versions may include features that
d134 1
a134 1
of the perl interpreter as well as the version of the language.  Each
d141 1
a141 1
complex data structures, and modules.  The Perl 5 interpreter was a
d145 2
a146 2
in both its syntax and design.  The work started in 2002 and is still
ongoing.  Many of the most interesting features have shown up in the
d148 1
a148 1
Perl 6 syntax in your programs.  You can learn more about Perl 6 at
d165 1
a165 1
able  to just keep using Perl 5 with Parrot, the virtual machine which
d177 1
a177 1
the crusade to make Perl a better place then peruse the Perl 6 developers
d190 1
a190 1
are widely tested before release.  Since the 5.000 release, we have
d195 1
a195 1
backward compatibility.  While not quite all Perl 4 scripts run flawlessly
d202 1
a202 1
No, Perl is easy to start learning--and easy to keep learning.  It looks
d207 1
a207 1
Most tasks only require a small subset of the Perl language.  One of
d209 1
a209 1
to do it" (TMTOWTDI, sometimes pronounced "tim toady").  Perl's
d216 1
a216 1
and test/debug quickly and easily.  This ease of experimentation flattens
d221 1
a221 1
the ability to understand other people's code.  If there's something you
d223 1
a223 1
usually available for free.  Don't forget Perl modules, either.
d229 1
a229 1
Favorably in some areas, unfavorably in others.  Precisely which areas
d234 1
a234 1
set of tasks.  These languages have their own newsgroups in which you
d246 1
a246 1
what they'd program in low-level languages like C or C++.  It's ultimately
d253 1
a253 1
perl interpreter.  You can also go the other direction, and write your
d255 1
a255 1
to create a powerful application.  See L<perlembed>.
d259 2
a260 2
convenient for certain kinds of problems.  Perl tries to be all things
to all people, but nothing special to anyone.  Examples of specialized
d275 1
a275 1
shared-memory applications, or extremely large applications.  You'll
d279 2
a280 2
a statically typed one.  You certainly won't be chastised if you don't
trust nuclear-plant or brain-surgery monitoring code to it.  And Larry
d285 1
a285 1
One bit.  Oh, you weren't talking ASCII? :-) Larry now uses "Perl" to
d287 1
a287 1
the current interpreter.  Hence Tom's quip that "Nothing but perl can
d298 1
a298 1
You may or may not choose to follow this usage.  For example,
d300 1
a300 1
"awk and Perl" and "Python and perl" do not.  But never write "PERL",
d306 2
a307 2
Larry doesn't really care.  He says (half in jest) that "a script is
what you give the actors.  A program is what you give the audience."
d310 1
a310 1
commands--that is, a chat script.  Something like a UUCP or PPP chat
d313 1
a313 1
for example.  Chat scripts were just drivers for existing programs,
d317 1
a317 1
interpreted and that the only question is at what level.  But if you
d326 1
a326 1
like "non serious" or "not real programming".  Consequently, some Perl
a397 8
=head1 REVISION

Revision: $Revision$

Date: $Date$

See L<perlfaq> for source control details and availability.

d400 1
a400 1
Copyright (c) 1997-2009 Tom Christiansen, Nathan Torkington, and
d407 1
a407 1
domain.  You are permitted and encouraged to use this code and any
d409 1
a409 1
see fit.  A simple comment in the code giving credit to the FAQ would
@


1.10
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@d62 1
a62 1
answer that fits anyone.  In general, you want to use either the current
d110 2
a111 2
There is no Perl 6 release scheduled, but it will be available when 
it's ready.  Stay tuned, but don't worry that you'll have to change 
d288 1
a288 1
parse Perl."  
d338 1
a338 4
	print "Just another Perl hacker, ";

Note the trailing comma and space, which allows the addition of other
JAxH clauses for his many other interests.
d400 1
a400 1
Revision: $Revision: 10427 $
d402 1
a402 1
Date: $Date: 2007-12-14 00:39:01 +0100 (Fri, 14 Dec 2007) $
d408 1
a408 1
Copyright (c) 1997-2007 Tom Christiansen, Nathan Torkington, and
@


1.9
log
@merge in perl 5.8.8
@
text
@d43 1
a43 1
or read the faq at http://simon-cozens.org/writings/p5p-faq ,
d61 4
a64 4
There is often a matter of opinion and taste, and there isn't any
one answer that fits anyone.  In general, you want to use either
the current stable release, or the stable release immediately prior
to that one.  Currently, those are perl5.8.x and perl5.6.x, respectively.
d66 2
a67 2
Beyond that, you have to consider several things and decide which
is best for you.
d73 2
a74 2
If things aren't broken, upgrading perl may break
them (or at least issue new warnings).
d82 2
a83 3
The Perl community is geared toward supporting the most
recent releases, so you'll have an easier time finding help for
those.
d87 3
a89 3
Versions prior to perl5.004 had serious security problems with
buffer overflows, and in some cases have CERT advisories (for
instance, http://www.cert.org/advisories/CA-1997-17.html ).
d93 3
a95 3
The latest versions are probably the least deployed and
widely tested, so you may want to wait a few months after their
release and see what problems others have if you are risk averse.
d99 2
a100 3
The immediate, previous releases (i.e. perl5.6.x ) are usually
maintained for a while, although not at the same level as the
current releases.
d104 3
a106 3
No one is actively supporting perl4.x.  Five years ago it was
a dead camel carcass (according to this document).  Now it's barely
a skeleton as its whitewashed bones have fractured or eroded.
d110 3
a112 3
There is no perl6.x for the next couple of years.  Stay tuned,
but don't worry that you'll have to change major versions of Perl
soon (i.e. before 2006).
d116 6
a121 7
There are really two tracks of perl development: a
maintenance version and an experimental version.  The
maintenance versions are stable, and have an even number
as the minor release (i.e. perl5.8.x, where 8 is the minor
release).  The experimental versions may include features that
don't make it into the stable versions, and have an odd number
as the minor release (i.e. perl5.9.x, where 9 is the minor release).
d126 1
a126 1
=head2 What are perl4, perl5, or perl6?
d130 1
a130 1
In short, perl4 is the past, perl5 is the present, and perl6 is the
d133 1
a133 1
The number after perl (i.e. the 5 after perl5) is the major release
d138 2
a139 2
The current major release of Perl is perl5, and was released in 1994.
It can run scripts from the previous major release, perl4 (March 1991),
d141 1
a141 1
complex data structures, and modules.  The perl5 interpreter was a
d144 1
a144 1
Perl6 is the next major version of Perl, but it's still in development
d147 2
a148 2
latest versions of perl5, and some perl5 modules allow you to use some
perl6 syntax in your programs.  You can learn more about perl6 at
d153 1
a153 1
=head2 What is Ponie?
d155 1
a155 7
At The O'Reilly Open Source Software Convention in 2003, Artur
Bergman, Fotango, and The Perl Foundation announced a project to
run perl5 on the Parrot virtual machine named Ponie. Ponie stands for
Perl On New Internal Engine.  The Perl 5.10 language implementation
will be used for Ponie, and there will be no language level
differences between perl5 and ponie.  Ponie is not a complete rewrite
of perl5.
d157 10
a166 1
For more details, see http://www.poniecode.org/
d168 1
a168 1
=head2 What is perl6?
d171 1
a171 1
announced Perl6 development would begin in earnest. Perl6 was an oft
d176 2
a177 2
If you want to learn more about Perl6, or have a desire to help in
the crusade to make Perl a better place then peruse the Perl6 developers
d180 2
a181 2
Perl6 is not scheduled for release yet, and Perl5 will still be supported
for quite awhile after its release. Do not wait for Perl6 to do whatever
d195 2
a196 2
backward compatibility.  While not quite all perl4 scripts run flawlessly
under perl5, an update to perl should nearly never invalidate a program
d223 1
a223 1
usually available for free.  Don't forget the new perl modules, either.
d278 1
a278 3
The new, native-code compiler for Perl may eventually reduce the
limitations given in the previous statement to some degree, but understand
that Perl remains fundamentally a dynamically typed language, not
d286 17
a302 7
signify the language proper and "perl" the implementation of it,
i.e. the current interpreter.  Hence Tom's quip that "Nothing but perl
can parse Perl."  You may or may not choose to follow this usage.  For
example, parallelism means "awk and perl" and "Python and Perl" look
OK, while "awk and Perl" and "Python and perl" do not.  But never
write "PERL", because perl is not an acronym, apocryphal
folklore and post-facto expansions notwithstanding.
a322 8
Perl programs are (usually) neither strictly compiled nor strictly
interpreted.  They can be compiled to a byte-code form (something of a
Perl virtual machine) or to completely different languages, like C or
assembly language.  You can't tell just by looking at it whether the
source is destined for a pure interpreter, a parse-tree interpreter,
a byte-code interpreter, or a native-code compiler, so it's hard to give
a definitive answer here.

d331 18
a348 4
These are the "just another perl hacker" signatures that some people
sign their postings with.  Randal Schwartz made these famous.  About
100 of the earlier ones are available from
http://www.cpan.org/misc/japh .
d352 52
a403 2
Over a hundred quips by Larry, from postings of his or source code,
can be found at http://www.cpan.org/misc/lwall-quotes.txt.gz .
d405 1
a405 1
=head2 How can I convince my sysadmin/supervisor/employees to use version 5/5.6.1/Perl instead of some other language?
d407 1
a407 52
If your manager or employees are wary of unsupported software, or
software which doesn't officially ship with your operating system, you
might try to appeal to their self-interest.  If programmers can be
more productive using and utilizing Perl constructs, functionality,
simplicity, and power, then the typical manager/supervisor/employee
may be persuaded.  Regarding using Perl in general, it's also
sometimes helpful to point out that delivery times may be reduced
using Perl compared to other languages.

If you have a project which has a bottleneck, especially in terms of
translation or testing, Perl almost certainly will provide a viable,
quick solution.  In conjunction with any persuasion effort, you
should not fail to point out that Perl is used, quite extensively, and
with extremely reliable and valuable results, at many large computer
software and hardware companies throughout the world.  In fact,
many Unix vendors now ship Perl by default.  Support is usually
just a news-posting away, if you can't find the answer in the
I<comprehensive> documentation, including this FAQ.

See http://www.perl.org/advocacy/ for more information.

If you face reluctance to upgrading from an older version of perl,
then point out that version 4 is utterly unmaintained and unsupported
by the Perl Development Team.  Another big sell for Perl5 is the large
number of modules and extensions which greatly reduce development time
for any given task.  Also mention that the difference between version
4 and version 5 of Perl is like the difference between awk and C++.
(Well, OK, maybe it's not quite that distinct, but you get the idea.)
If you want support and a reasonable guarantee that what you're
developing will continue to work in the future, then you have to run
the supported version.  As of December 2003 that means running either
5.8.2 (released in November 2003), or one of the older releases like
5.6.2 (also released in November 2003; a maintenance release to let perl
5.6 compile on newer systems as 5.6.1 was released in April 2001) or
5.005_03 (released in March 1999),
although 5.004_05 isn't that bad if you B<absolutely> need such an old
version (released in April 1999) for stability  reasons.
Anything older than 5.004_05 shouldn't be used.

Of particular note is the massive bug hunt for buffer overflow
problems that went into the 5.004 release.  All releases prior to
that, including perl4, are considered insecure and should be upgraded
as soon as possible.

In August 2000 in all Linux distributions a new security problem was
found in the optional 'suidperl' (not built or installed by default)
in all the Perl branches 5.6, 5.005, and 5.004, see
http://www.cpan.org/src/5.0/sperl-2000-08-05/
Perl maintenance releases 5.6.1 and 5.8.0 have this security hole closed.
Most, if not all, Linux distribution have patches for this
vulnerability available, see http://www.linuxsecurity.com/advisories/ ,
but the most recommendable way is to upgrade to at least Perl 5.6.1.
d411 1
a411 1
Copyright (c) 1997-2006 Tom Christiansen, Nathan Torkington, and
@


1.8
log
@sync in-tree perl with 5.8.6
@
text
@d3 1
a3 1
perlfaq1 - General Questions About Perl ($Revision: 1.7 $, $Date: 2004/04/07 21:33:08 $)
d59 94
a152 33
You should definitely use version 5.  Version 4 is old, limited, and
no longer maintained; its last patch (4.036) was in 1992, long ago and
far away.  Sure, it's stable, but so is anything that's dead; in fact,
perl4 had been called a dead, flea-bitten camel carcass.  The most
recent production release is 5.8.2 (although 5.005_03 and 5.6.2 are
still supported). The most cutting-edge development release is 5.9.
Further references to the Perl language in this document refer to the
production release unless otherwise specified.  There may be one or
more official bug fixes by the time you read this, and also perhaps
some experimental versions on the way to the next release.
All releases prior to 5.004 were subject to buffer overruns, a grave
security issue.

=head2 What are perl4 and perl5?

Perl4 and perl5 are informal names for different versions of the Perl
programming language.  It's easier to say "perl5" than it is to say
"the 5(.004) release of Perl", but some people have interpreted this
to mean there's a language called "perl5", which isn't the case.
Perl5 is merely the popular name for the fifth major release (October 1994),
while perl4 was the fourth major release (March 1991).  There was also a
perl1 (in January 1988), a perl2 (June 1988), and a perl3 (October 1989).

The 5.0 release is, essentially, a ground-up rewrite of the original
perl source code from releases 1 through 4.  It has been modularized,
object-oriented, tweaked, trimmed, and optimized until it almost doesn't
look like the old code.  However, the interface is mostly the same, and
compatibility with previous releases is very high.
See L<perltrap/"Perl4 to Perl5 Traps">.

To avoid the "what language is perl5?" confusion, some people prefer to
simply use "perl" to refer to the latest version of perl and avoid using
"perl5" altogether.  It's not really that big a deal, though.
d398 2
a399 2
Copyright (c) 1997, 1998, 1999, 2000, 2001 Tom Christiansen and Nathan
Torkington.  All rights reserved.
@


1.7
log
@merge local changes into perl-5.8.3
@
text
@d3 1
a3 1
perlfaq1 - General Questions About Perl ($Revision: 1.6 $, $Date: 2003/12/03 03:02:44 $)
d176 1
a176 1
Some comparison documents can be found at http://language.perl.com/versus/
@


1.6
log
@Resolve conflicts for perl 5.8.2, remove old files, and add OpenBSD-specific scaffolding
@
text
@d3 1
a3 1
perlfaq1 - General Questions About Perl ($Revision: 1.12 $, $Date: 2003/07/09 15:47:28 $)
d63 1
a63 1
recent production release is 5.8.1 (although 5.005_03 and 5.6.1 are
d105 2
d312 5
a316 3
the supported version.  As of October 2003 that means running either
5.8.1 (released in September 2003), or one of the older releases like
5.6.1 (released in April 2001) or 5.005_03 (released in March 1999),
@


1.5
log
@Resolve conflicts, remove old files, merge local changes
@
text
@d3 1
a3 1
perlfaq1 - General Questions About Perl ($Revision: 1.8 $, $Date: 2002/04/07 18:46:13 $)
d43 1
a43 1
or read the faq at http://perlhacker.org/p5p-faq ,
d62 9
a70 8
perl4 had been called a dead, flea-bitten camel carcass.  The most recent
production release is 5.6 (although 5.005_03 is still supported).
The most cutting-edge development release is 5.7.  Further references
to the Perl language in this document refer to the production release
unless otherwise specified.  There may be one or more official bug fixes
by the time you read this, and also perhaps some experimental versions
on the way to the next release.  All releases prior to 5.004 were subject
to buffer overruns, a grave security issue.
d86 1
a86 1
compatibility with previous releases is very high. 
d95 10
d107 1
a107 1
At The Second O'Reilly Open Source Software Convention, Larry Wall            
d111 1
a111 1
of Perl and its implementation, but was ultimately abandoned.   
d113 2
a114 2
If you want to learn more about Perl6, or have a desire to help in 
the crusade to make Perl a better place then peruse the Perl6 developers 
d310 6
a315 5
the supported version.  As of January 2002 that probably means
running either of the releases 5.6.1 (released in April 2001) or
5.005_03 (released in March 1999), although 5.004_05 isn't that bad
if you B<absolutely> need such an old version (released in April 1999)
for stability reasons.  Anything older than 5.004_05 shouldn't be used.
@


1.4
log
@merge in perl 5.6.1 with our local changes
@
text
@d3 1
a3 1
perlfaq1 - General Questions About Perl ($Revision: 1.23 $, $Date: 1999/05/23 16:08:30 $)
d36 11
a46 7
are a rag-tag band of highly altruistic individuals committed
to producing better software for free than you could hope to
purchase for money.  You may snoop on pending developments via
nntp://news.perl.com/perl.porters-gw/ and the Deja archive at
http://www.deja.com/ using the perl.porters-gw newsgroup, or you can
subscribe to the mailing list by sending perl5-porters-request@@perl.org
a subscription request.
d99 2
a100 7
Topaz. However, Topaz should not be confused with the nisus to rewrite
Perl while keeping the lessons learned from other software, as well as
Perl5, in mind.

If you have a desire to help in the crusade to make Perl a better place
then peruse the Perl6 developers page at http://www.perl.org/perl6/ and 
get involved.
d102 7
a108 1
The first alpha release is expected by Summer 2001.
d219 1
a219 1
write "PERL", because perl isn't really an acronym, apocryphal
d260 1
a260 1
http://www.perl.com/CPAN/misc/japh .
d265 1
a265 1
can be found at http://www.perl.com/CPAN/misc/lwall-quotes.txt.gz .
d267 1
a267 5
Newer examples can be found by perusing Larry's postings:

    http://x1.dejanews.com/dnquery.xp?QRY=*&DBS=2&ST=PS&defaultOp=AND&LNG=ALL&format=terse&showsort=date&maxhits=100&subjects=&groups=&authors=larry@@*wall.org&fromdate=&todate=

=head2 How can I convince my sysadmin/supervisor/employees to use version 5/5.005/Perl instead of some other language?
d299 1
a299 1
the supported version.  As of April 2001 that probably means
d314 4
d324 2
a325 4
When included as an integrated part of the Standard Distribution
of Perl or of its documentation (printed or otherwise), this works is
covered under Perl's Artistic Licence.  For separate distributions of
all or part of this FAQ outside of that, see L<perlfaq>.
@


1.3
log
@perl-5.6.0 + local changes
@
text
@d39 1
a39 1
news://news.perl.com/perl.porters-gw/ and the Deja archive at
d59 2
a60 2
production release is 5.005_03 (although 5.004_05 is still supported).
The most cutting-edge development release is 5.005_57.  Further references
d81 2
a82 2
compatibility with previous releases is very high. See L<perltrap/"Perl4
to Perl5 Traps">.
d92 15
a106 18
Perl6 is a semi-jocular reference to the Topaz project.  Headed by Chip
Salzenberg, Topaz is yet-another ground-up rewrite of the current release
of Perl, one whose major goal is to create a more maintainable core than
found in release 5.  Written in nominally portable C++, Topaz hopes to
maintain 100% source-compatibility with previous releases of Perl but to
run significantly faster and smaller.  The Topaz team hopes to provide
an XS compatibility interface to allow most XS modules to work unchanged,
albeit perhaps without the efficiency that the new interface would allow.
New features in Topaz are as yet undetermined, and will be addressed
once compatibility and performance goals are met.

If you are a hard-working C++ wizard with a firm command of Perl's
internals, and you would like to work on the project, send a request to
perl6-porters-request@@perl.org to subscribe to the Topaz mailing list.

There is no ETA for Topaz.  It is expected to be several years before it
achieves enough robustness, compatibility, portability, and performance
to replace perl5 for ordinary use by mere mortals.
d123 1
a123 1
No, Perl is easy to start learning -- and easy to keep learning.  It looks
d126 1
a126 1
script, or even a BASIC program, you're already part way there.
d186 1
a186 1
When your manager forbids it -- but do consider replacing them :-).
d204 1
a204 1
will sleep easier, too -- Wall Street programs not withstanding. :-)
d223 1
a223 1
commands, that is, a chat script.  Something like a UUCP or PPP chat
d230 1
a230 1
interpreted, and that the only question is at what level.  But if you
d233 1
a233 1
once, and can then be run multiple times, whereas a I<script> must be
d266 1
a266 1
=head2 How can I convince my sysadmin/supervisor/employees to use version (5/5.005/Perl instead of some other language)?
d275 1
a275 1
using Perl, as compared to other languages.
d279 1
a279 1
and quick solution.  In conjunction with any persuasion effort, you
d282 2
a283 2
software and/or hardware companies throughout the world.  In fact,
many Unix vendors now ship Perl by default, and support is usually
d295 8
a302 6
(Well, OK, maybe not quite that distinct, but you get the idea.)  If you
want support and a reasonable guarantee that what you're developing
will continue to work in the future, then you have to run the supported
version.  That probably means running the 5.005 release, although 5.004
isn't that bad.  Several important bugs were fixed from the 5.000 through
5.003 versions, though, so try upgrading past them if possible.
d309 5
d316 2
a317 2
Copyright (c) 1997, 1998, 1999 Tom Christiansen and Nathan Torkington.
All rights reserved.
@


1.2
log
@perl5.005_03 (stock)
@
text
@d3 1
a3 1
perlfaq1 - General Questions About Perl ($Revision: 1.20 $, $Date: 1999/01/08 04:22:09 $)
d39 2
a40 2
nntp://news.perl.com/perl.porters-gw/ and the Deja News archive at
http://www.dejanews.com/ using the perl.porters-gw newsgroup, or you can
d59 2
a60 2
production release is 5.005_02 (although 5.004_04 is still supported).
The most cutting-edge development release is 5.005_54.  Further references
d62 4
a65 4
unless otherwise specified.  There may be one or more official bug
fixes for 5.005_02 by the time you read this, and also perhaps some
experimental versions on the way to the next release.  All releases
prior to 5.004 were subject to buffer overruns, a grave security issue.
d99 1
a99 1
albeit perhaps without the efficiency that the new interface uowld allow.
d128 2
a129 2
with, so if you've ever written an C program, an awk script, a shell
script, or even BASIC program, you're already part way there.
d216 2
a217 2
ok, while "awk and Perl" and "Python and perl" do not.  But never
write "PERL", because perl isn't really an acronym, aprocryphal
d226 1
a226 1
commands, that is, a chat script.  Something like a uucp or ppp chat
d250 1
a250 1
like "non serious" or "not real programming".  Consequently, some perl
d272 1
a272 1
software which doesn't officially ship with your Operating System, you
d298 1
a298 1
(Well, ok, maybe not quite that distinct, but you get the idea.)  If you
d305 1
a305 1
Of particular note is the massive bughunt for buffer overflow
d312 1
a312 1
Copyright (c) 1997-1999 Tom Christiansen and Nathan Torkington.
d316 1
a316 1
of Perl or of its documentation (printed or otherwise), this work is
d320 1
a320 1
Irrespective of its distribution, all code examples here are public
a324 1

@


1.1
log
@perl 5.004_04
@
text
@d3 1
a3 1
perlfaq1 - General Questions About Perl ($Revision: 1.12 $, $Date: 1997/04/24 22:43:34 $)
d32 2
a33 1
distribution for more details.
d35 8
a42 6
In particular, the core development team (known as the Perl
Porters) are a rag-tag band of highly altruistic individuals
committed to producing better software for free than you
could hope to purchase for money.  You may snoop on pending
developments via news://genetics.upenn.edu/perl.porters-gw/ and
http://www.frii.com/~gnat/perl/porters/summary.html.
d56 10
a65 6
no longer maintained; its last patch (4.036) was in 1992.  The most
recent production release is 5.004.  Further references to the Perl
language in this document refer to this production release unless
otherwise specified.  There may be one or more official bug fixes for
5.004 by the time you read this, and also perhaps some experimental
versions on the way to the next release.
d77 6
a82 5
The 5.0 release is, essentially, a complete rewrite of the perl source
code from the ground up.  It has been modularized, object-oriented,
tweaked, trimmed, and optimized until it almost doesn't look like the
old code.  However, the interface is mostly the same, and compatibility
with previous releases is very high.
d88 23
d126 2
a127 2
Perl is easy to start learning -- and easy to keep learning.  It looks
like most programming languages you're likely to have had experience
d129 1
a129 1
script, or even an Excel macro, you're already part way there.
d137 5
a141 5
Finally, Perl is (frequently) an interpreted language.  This means
that you can write your programs and test them without an intermediate
compilation step, allowing you to experiment and test/debug quickly
and easily.  This ease of experimentation flattens the learning curve
even more.
d148 1
a148 1
They're discussed in Part 3 of this FAQ, along with the CPAN, which is
d161 3
d166 7
a172 7
Perl is flexible and extensible enough for you to use on almost any
task, from one-line file-processing tasks to complex systems.  For
many people, Perl serves as a great replacement for shell scripting.
For others, it serves as a convenient, high-level replacement for most
of what they'd program in low-level languages like C or C++.  It's
ultimately up to you (and possibly your management ...) which tasks
you'll use Perl for and which you won't.
d179 1
a179 1
to create a powerful application.
d198 1
a198 1
device drivers or context-switching code, complex multithreaded
d202 6
a207 7
The new native-code compiler for Perl may reduce the limitations given
in the previous statement to some degree, but understand that Perl
remains fundamentally a dynamically typed language, and not a
statically typed one.  You certainly won't be chastized if you don't
trust nuclear-plant or brain-surgery monitoring code to it.  And
Larry will sleep easier, too -- Wall Street programs not
withstanding. :-)
d216 3
a218 1
ok, while "awk and Perl" and "Python and perl" do not.
d222 16
a237 1
It doesn't matter.
d239 2
a240 5
In "standard terminology" a I<program> has been compiled to physical
machine code once, and can then be be run multiple times, whereas a
I<script> must be translated by a program each time it's used.  Perl
programs, however, are usually neither strictly compiled nor strictly
interpreted.  They can be compiled to a byte code form (something of a
d242 10
a251 4
assembly language.  You can't tell just by looking whether the source
is destined for a pure interpreter, a parse-tree interpreter, a byte
code interpreter, or a native-code compiler, so it's hard to give a
definitive answer here.
d256 3
a258 2
sign their postings with.  About 100 of the of the earlier ones are
available from http://www.perl.com/CPAN/misc/japh .
d263 1
a263 1
can be found at http://www.perl.com/CPAN/misc/lwall-quotes .
d265 5
a269 1
=head2 How can I convince my sysadmin/supervisor/employees to use version (5/5.004/Perl instead of some other language)?
d281 1
a281 1
translation, or testing, Perl almost certainly will provide a viable,
d290 2
d298 11
a308 7
(Well, ok, maybe not quite that distinct, but you get the idea.)  If
you want support and a reasonable guarantee that what you're
developing will continue to work in the future, then you have to run
the supported version.  That probably means running the 5.004 release,
although 5.003 isn't that bad (it's just one year and one release
behind).  Several important bugs were fixed from the 5.000 through
5.002 versions, though, so try upgrading past them if possible.
d312 14
a325 2
Copyright (c) 1997 Tom Christiansen and Nathan Torkington.
All rights reserved.  See L<perlfaq> for distribution information.
@


1.1.1.1
log
@perl5.005_03
@
text
@d3 1
a3 1
perlfaq1 - General Questions About Perl ($Revision: 1.20 $, $Date: 1999/01/08 04:22:09 $)
d32 1
a32 2
distribution for more details.  See L<perlhist> (new as of 5.005)
for Perl's milestone releases.
d34 6
a39 8
In particular, the core development team (known as the Perl Porters)
are a rag-tag band of highly altruistic individuals committed
to producing better software for free than you could hope to
purchase for money.  You may snoop on pending developments via
nntp://news.perl.com/perl.porters-gw/ and the Deja News archive at
http://www.dejanews.com/ using the perl.porters-gw newsgroup, or you can
subscribe to the mailing list by sending perl5-porters-request@@perl.org
a subscription request.
d53 6
a58 10
no longer maintained; its last patch (4.036) was in 1992, long ago and
far away.  Sure, it's stable, but so is anything that's dead; in fact,
perl4 had been called a dead, flea-bitten camel carcass.  The most recent
production release is 5.005_02 (although 5.004_04 is still supported).
The most cutting-edge development release is 5.005_54.  Further references
to the Perl language in this document refer to the production release
unless otherwise specified.  There may be one or more official bug
fixes for 5.005_02 by the time you read this, and also perhaps some
experimental versions on the way to the next release.  All releases
prior to 5.004 were subject to buffer overruns, a grave security issue.
d70 5
a74 6
The 5.0 release is, essentially, a ground-up rewrite of the original
perl source code from releases 1 through 4.  It has been modularized,
object-oriented, tweaked, trimmed, and optimized until it almost doesn't
look like the old code.  However, the interface is mostly the same, and
compatibility with previous releases is very high. See L<perltrap/"Perl4
to Perl5 Traps">.
a79 23
See L<perlhist> for a history of Perl revisions.

=head2 What is perl6?

Perl6 is a semi-jocular reference to the Topaz project.  Headed by Chip
Salzenberg, Topaz is yet-another ground-up rewrite of the current release
of Perl, one whose major goal is to create a more maintainable core than
found in release 5.  Written in nominally portable C++, Topaz hopes to
maintain 100% source-compatibility with previous releases of Perl but to
run significantly faster and smaller.  The Topaz team hopes to provide
an XS compatibility interface to allow most XS modules to work unchanged,
albeit perhaps without the efficiency that the new interface uowld allow.
New features in Topaz are as yet undetermined, and will be addressed
once compatibility and performance goals are met.

If you are a hard-working C++ wizard with a firm command of Perl's
internals, and you would like to work on the project, send a request to
perl6-porters-request@@perl.org to subscribe to the Topaz mailing list.

There is no ETA for Topaz.  It is expected to be several years before it
achieves enough robustness, compatibility, portability, and performance
to replace perl5 for ordinary use by mere mortals.

d95 2
a96 2
No, Perl is easy to start learning -- and easy to keep learning.  It looks
like most programming languages you're likely to have experience
d98 1
a98 1
script, or even BASIC program, you're already part way there.
d106 5
a110 5
Finally, because Perl is frequently (but not always, and certainly not by
definition) an interpreted language, you can write your programs and test
them without an intermediate compilation step, allowing you to experiment
and test/debug quickly and easily.  This ease of experimentation flattens
the learning curve even more.
d117 1
a117 1
They're discussed in Part 3 of this FAQ, along with CPAN, which is
a129 3
Some comparison documents can be found at http://language.perl.com/versus/
if you really can't stop yourself.

d132 7
a138 7
Perl is flexible and extensible enough for you to use on virtually any
task, from one-line file-processing tasks to large, elaborate systems.
For many people, Perl serves as a great replacement for shell scripting.
For others, it serves as a convenient, high-level replacement for most of
what they'd program in low-level languages like C or C++.  It's ultimately
up to you (and possibly your management) which tasks you'll use Perl
for and which you won't.
d145 1
a145 1
to create a powerful application.  See L<perlembed>.
d164 1
a164 1
device drivers or context-switching code, complex multi-threaded
d168 7
a174 6
The new, native-code compiler for Perl may eventually reduce the
limitations given in the previous statement to some degree, but understand
that Perl remains fundamentally a dynamically typed language, not
a statically typed one.  You certainly won't be chastised if you don't
trust nuclear-plant or brain-surgery monitoring code to it.  And Larry
will sleep easier, too -- Wall Street programs not withstanding. :-)
d183 1
a183 3
ok, while "awk and Perl" and "Python and perl" do not.  But never
write "PERL", because perl isn't really an acronym, aprocryphal
folklore and post-facto expansions notwithstanding.
d187 1
a187 16
Larry doesn't really care.  He says (half in jest) that "a script is
what you give the actors.  A program is what you give the audience."

Originally, a script was a canned sequence of normally interactive
commands, that is, a chat script.  Something like a uucp or ppp chat
script or an expect script fits the bill nicely, as do configuration
scripts run by a program at its start up, such F<.cshrc> or F<.ircrc>,
for example.  Chat scripts were just drivers for existing programs,
not stand-alone programs in their own right.

A computer scientist will correctly explain that all programs are
interpreted, and that the only question is at what level.  But if you
ask this question of someone who isn't a computer scientist, they might
tell you that a I<program> has been compiled to physical machine code
once, and can then be run multiple times, whereas a I<script> must be
translated by a program each time it's used.
d189 5
a193 2
Perl programs are (usually) neither strictly compiled nor strictly
interpreted.  They can be compiled to a byte-code form (something of a
d195 4
a198 10
assembly language.  You can't tell just by looking at it whether the
source is destined for a pure interpreter, a parse-tree interpreter,
a byte-code interpreter, or a native-code compiler, so it's hard to give
a definitive answer here.

Now that "script" and "scripting" are terms that have been seized by
unscrupulous or unknowing marketeers for their own nefarious purposes,
they have begun to take on strange and often pejorative meanings,
like "non serious" or "not real programming".  Consequently, some perl
programmers prefer to avoid them altogether.
d203 2
a204 3
sign their postings with.  Randal Schwartz made these famous.  About
100 of the earlier ones are available from
http://www.perl.com/CPAN/misc/japh .
d209 1
a209 1
can be found at http://www.perl.com/CPAN/misc/lwall-quotes.txt.gz .
d211 1
a211 5
Newer examples can be found by perusing Larry's postings:

    http://x1.dejanews.com/dnquery.xp?QRY=*&DBS=2&ST=PS&defaultOp=AND&LNG=ALL&format=terse&showsort=date&maxhits=100&subjects=&groups=&authors=larry@@*wall.org&fromdate=&todate=

=head2 How can I convince my sysadmin/supervisor/employees to use version (5/5.005/Perl instead of some other language)?
d223 1
a223 1
translation or testing, Perl almost certainly will provide a viable,
a231 2
See http://www.perl.org/advocacy/ for more information.

d238 7
a244 11
(Well, ok, maybe not quite that distinct, but you get the idea.)  If you
want support and a reasonable guarantee that what you're developing
will continue to work in the future, then you have to run the supported
version.  That probably means running the 5.005 release, although 5.004
isn't that bad.  Several important bugs were fixed from the 5.000 through
5.003 versions, though, so try upgrading past them if possible.

Of particular note is the massive bughunt for buffer overflow
problems that went into the 5.004 release.  All releases prior to
that, including perl4, are considered insecure and should be upgraded
as soon as possible.
d248 2
a249 14
Copyright (c) 1997-1999 Tom Christiansen and Nathan Torkington.
All rights reserved.

When included as an integrated part of the Standard Distribution
of Perl or of its documentation (printed or otherwise), this work is
covered under Perl's Artistic Licence.  For separate distributions of
all or part of this FAQ outside of that, see L<perlfaq>.

Irrespective of its distribution, all code examples here are public
domain.  You are permitted and encouraged to use this code and any
derivatives thereof in your own programs for fun or for profit as you
see fit.  A simple comment in the code giving credit to the FAQ would
be courteous but is not required.

@


1.1.1.2
log
@virgin perl 5.6.0
@
text
@d3 1
a3 1
perlfaq1 - General Questions About Perl ($Revision: 1.23 $, $Date: 1999/05/23 16:08:30 $)
d39 2
a40 2
news://news.perl.com/perl.porters-gw/ and the Deja archive at
http://www.deja.com/ using the perl.porters-gw newsgroup, or you can
d59 2
a60 2
production release is 5.005_03 (although 5.004_05 is still supported).
The most cutting-edge development release is 5.005_57.  Further references
d62 4
a65 4
unless otherwise specified.  There may be one or more official bug fixes
by the time you read this, and also perhaps some experimental versions
on the way to the next release.  All releases prior to 5.004 were subject
to buffer overruns, a grave security issue.
d99 1
a99 1
albeit perhaps without the efficiency that the new interface would allow.
d128 2
a129 2
with, so if you've ever written a C program, an awk script, a shell
script, or even a BASIC program, you're already part way there.
d216 2
a217 2
OK, while "awk and Perl" and "Python and perl" do not.  But never
write "PERL", because perl isn't really an acronym, apocryphal
d226 1
a226 1
commands, that is, a chat script.  Something like a UUCP or PPP chat
d250 1
a250 1
like "non serious" or "not real programming".  Consequently, some Perl
d272 1
a272 1
software which doesn't officially ship with your operating system, you
d298 1
a298 1
(Well, OK, maybe not quite that distinct, but you get the idea.)  If you
d305 1
a305 1
Of particular note is the massive bug hunt for buffer overflow
d312 1
a312 1
Copyright (c) 1997, 1998, 1999 Tom Christiansen and Nathan Torkington.
d316 1
a316 1
of Perl or of its documentation (printed or otherwise), this works is
d320 1
a320 1
Irrespective of its distribution, all code examples here are in the public
d325 1
@


1.1.1.3
log
@stock perl 5.6.1
@
text
@d39 1
a39 1
nntp://news.perl.com/perl.porters-gw/ and the Deja archive at
d59 2
a60 2
production release is 5.6 (although 5.005_03 is still supported).
The most cutting-edge development release is 5.7.  Further references
d81 2
a82 2
compatibility with previous releases is very high. 
See L<perltrap/"Perl4 to Perl5 Traps">.
d92 18
a109 15
At The Second O'Reilly Open Source Software Convention, Larry Wall            
announced Perl6 development would begin in earnest. Perl6 was an oft
used term for Chip Salzenberg's project to rewrite Perl in C++ named
Topaz. However, Topaz should not be confused with the nisus to rewrite
Perl while keeping the lessons learned from other software, as well as
Perl5, in mind.

If you have a desire to help in the crusade to make Perl a better place
then peruse the Perl6 developers page at http://www.perl.org/perl6/ and 
get involved.

The first alpha release is expected by Summer 2001.

"We're really serious about reinventing everything that needs reinventing."
--Larry Wall
d126 1
a126 1
No, Perl is easy to start learning--and easy to keep learning.  It looks
d129 1
a129 1
script, or even a BASIC program, you're already partway there.
d189 1
a189 1
When your manager forbids it--but do consider replacing them :-).
d207 1
a207 1
will sleep easier, too--Wall Street programs not withstanding. :-)
d226 1
a226 1
commands--that is, a chat script.  Something like a UUCP or PPP chat
d233 1
a233 1
interpreted and that the only question is at what level.  But if you
d236 1
a236 1
once and can then be run multiple times, whereas a I<script> must be
d269 1
a269 1
=head2 How can I convince my sysadmin/supervisor/employees to use version 5/5.005/Perl instead of some other language?
d278 1
a278 1
using Perl compared to other languages.
d282 1
a282 1
quick solution.  In conjunction with any persuasion effort, you
d285 2
a286 2
software and hardware companies throughout the world.  In fact,
many Unix vendors now ship Perl by default.  Support is usually
d298 6
a303 8
(Well, OK, maybe it's not quite that distinct, but you get the idea.)
If you want support and a reasonable guarantee that what you're
developing will continue to work in the future, then you have to run
the supported version.  As of April 2001 that probably means
running either of the releases 5.6.1 (released in April 2001) or
5.005_03 (released in March 1999), although 5.004_05 isn't that bad
if you B<absolutely> need such an old version (released in April 1999)
for stability reasons.  Anything older than 5.004_05 shouldn't be used.
a309 5
In August 2000 in all Linux distributions a new security problem was
found in the optional 'suidperl' (not built or installed by default)
in all the Perl branches 5.6, 5.005, and 5.004, see
http://www.cpan.org/src/5.0/sperl-2000-08-05/

d312 2
a313 2
Copyright (c) 1997, 1998, 1999, 2000, 2001 Tom Christiansen and Nathan
Torkington.  All rights reserved.
@


1.1.1.4
log
@stock perl 5.8.0 from CPAN
@
text
@d3 1
a3 1
perlfaq1 - General Questions About Perl ($Revision: 1.8 $, $Date: 2002/04/07 18:46:13 $)
d36 7
a42 11
are a rag-tag band of highly altruistic individuals committed to
producing better software for free than you could hope to purchase for
money.  You may snoop on pending developments via the archives at
http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/
and http://archive.develooper.com/perl5-porters@@perl.org/
or the news gateway nntp://nntp.perl.org/perl.perl5.porters or
its web interface at http://nntp.perl.org/group/perl.perl5.porters ,
or read the faq at http://perlhacker.org/p5p-faq ,
or you can subscribe to the mailing list by sending
perl5-porters-request@@perl.org a subscription request
(an empty message with no subject is fine).
d95 7
a101 2
Topaz. However, Topaz provided valuable insights to the next version
of Perl and its implementation, but was ultimately abandoned.   
d103 1
a103 7
If you want to learn more about Perl6, or have a desire to help in 
the crusade to make Perl a better place then peruse the Perl6 developers 
page at http://dev.perl.org/perl6/ and get involved.

Perl6 is not scheduled for release yet, and Perl5 will still be supported
for quite awhile after its release. Do not wait for Perl6 to do whatever
you need to do.
d214 1
a214 1
write "PERL", because perl is not an acronym, apocryphal
d255 1
a255 1
http://www.cpan.org/misc/japh .
d260 1
a260 1
can be found at http://www.cpan.org/misc/lwall-quotes.txt.gz .
d262 5
a266 1
=head2 How can I convince my sysadmin/supervisor/employees to use version 5/5.6.1/Perl instead of some other language?
d298 1
a298 1
the supported version.  As of January 2002 that probably means
a312 4
Perl maintenance releases 5.6.1 and 5.8.0 have this security hole closed.
Most, if not all, Linux distribution have patches for this
vulnerability available, see http://www.linuxsecurity.com/advisories/ ,
but the most recommendable way is to upgrade to at least Perl 5.6.1.
d319 4
a322 2
This documentation is free; you can redistribute it and/or modify it
under the same terms as Perl itself.
@


1.1.1.5
log
@perl 5.8.2 from CPAN
@
text
@d3 1
a3 1
perlfaq1 - General Questions About Perl ($Revision: 1.12 $, $Date: 2003/07/09 15:47:28 $)
d43 1
a43 1
or read the faq at http://simon-cozens.org/writings/p5p-faq ,
d62 8
a69 9
perl4 had been called a dead, flea-bitten camel carcass.  The most
recent production release is 5.8.1 (although 5.005_03 and 5.6.1 are
still supported). The most cutting-edge development release is 5.9.
Further references to the Perl language in this document refer to the
production release unless otherwise specified.  There may be one or
more official bug fixes by the time you read this, and also perhaps
some experimental versions on the way to the next release.
All releases prior to 5.004 were subject to buffer overruns, a grave
security issue.
d85 1
a85 1
compatibility with previous releases is very high.
a93 10
=head2 What is Ponie?

At The O'Reilly Open Source Software Convention in 2003, Artur
Bergman, Fotango, and The Perl Foundation announced a project to
run perl5 on the Parrot virtual machine named Ponie. Ponie stands for
Perl On New Internal Engine.  The Perl 5.10 language implementation
will be used for Ponie, and there will be no language level
differences between perl5 and ponie.  Ponie is not a complete rewrite
of perl5.

d96 1
a96 1
At The Second O'Reilly Open Source Software Convention, Larry Wall
d100 1
a100 1
of Perl and its implementation, but was ultimately abandoned.
d102 2
a103 2
If you want to learn more about Perl6, or have a desire to help in
the crusade to make Perl a better place then peruse the Perl6 developers
d299 5
a303 6
the supported version.  As of October 2003 that means running either
5.8.1 (released in September 2003), or one of the older releases like
5.6.1 (released in April 2001) or 5.005_03 (released in March 1999),
although 5.004_05 isn't that bad if you B<absolutely> need such an old
version (released in April 1999) for stability  reasons.
Anything older than 5.004_05 shouldn't be used.
@


1.1.1.6
log
@perl 5.8.3 from CPAN
@
text
@d3 1
a3 1
perlfaq1 - General Questions About Perl ($Revision: 1.14 $, $Date: 2003/11/23 08:02:29 $)
d63 1
a63 1
recent production release is 5.8.2 (although 5.005_03 and 5.6.2 are
a104 2
For more details, see http://www.poniecode.org/

d310 3
a312 5
the supported version.  As of December 2003 that means running either
5.8.2 (released in November 2003), or one of the older releases like
5.6.2 (also released in November 2003; a maintenance release to let perl
5.6 compile on newer systems as 5.6.1 was released in April 2001) or
5.005_03 (released in March 1999),
@


1.1.1.7
log
@Import of stock perl 5.8.5
@
text
@d3 1
a3 1
perlfaq1 - General Questions About Perl ($Revision: 1.7 $, $Date: 2004/04/07 21:33:08 $)
@


1.1.1.8
log
@perl 5.8.6 from CPAN
@
text
@d3 1
a3 1
perlfaq1 - General Questions About Perl ($Revision: 1.15 $, $Date: 2004/10/11 05:06:29 $)
d176 1
a176 1
Some comparison documents can be found at http://www.perl.com/doc/FMTEYEWTK/versus/
@


1.1.1.9
log
@perl 5.8.8 import
@
text
@d3 1
a3 1
perlfaq1 - General Questions About Perl ($Revision: 1.19 $, $Date: 2005/12/31 00:54:37 $)
d59 33
a91 94
(contributed by brian d foy)

There is often a matter of opinion and taste, and there isn't any
one answer that fits anyone.  In general, you want to use either
the current stable release, or the stable release immediately prior
to that one.  Currently, those are perl5.8.x and perl5.6.x, respectively.

Beyond that, you have to consider several things and decide which
is best for you.

=over 4

=item *

If things aren't broken, upgrading perl may break
them (or at least issue new warnings).

=item *

The latest versions of perl have more bug fixes.

=item *

The Perl community is geared toward supporting the most
recent releases, so you'll have an easier time finding help for
those.

=item *

Versions prior to perl5.004 had serious security problems with
buffer overflows, and in some cases have CERT advisories (for
instance, http://www.cert.org/advisories/CA-1997-17.html ).

=item *

The latest versions are probably the least deployed and
widely tested, so you may want to wait a few months after their
release and see what problems others have if you are risk averse.

=item *

The immediate, previous releases (i.e. perl5.6.x ) are usually
maintained for a while, although not at the same level as the
current releases.

=item *

No one is actively supporting perl4.x.  Five years ago it was
a dead camel carcass (according to this document).  Now it's barely
a skeleton as its whitewashed bones have fractured or eroded.

=item *

There is no perl6.x for the next couple of years.  Stay tuned,
but don't worry that you'll have to change major versions of Perl
soon (i.e. before 2006).

=item *

There are really two tracks of perl development: a
maintenance version and an experimental version.  The
maintenance versions are stable, and have an even number
as the minor release (i.e. perl5.8.x, where 8 is the minor
release).  The experimental versions may include features that
don't make it into the stable versions, and have an odd number
as the minor release (i.e. perl5.9.x, where 9 is the minor release).

=back


=head2 What are perl4, perl5, or perl6?

(contributed by brian d foy)

In short, perl4 is the past, perl5 is the present, and perl6 is the
future.

The number after perl (i.e. the 5 after perl5) is the major release
of the perl interpreter as well as the version of the language.  Each
major version has significant differences that earlier versions cannot
support.

The current major release of Perl is perl5, and was released in 1994.
It can run scripts from the previous major release, perl4 (March 1991),
but has significant differences. It introduced the concept of references,
complex data structures, and modules.  The perl5 interpreter was a
complete re-write of the previous perl sources.

Perl6 is the next major version of Perl, but it's still in development
in both its syntax and design.  The work started in 2002 and is still
ongoing.  Many of the most interesting features have shown up in the
latest versions of perl5, and some perl5 modules allow you to use some
perl6 syntax in your programs.  You can learn more about perl6 at
http://dev.perl.org/perl6/ .
d337 2
a338 2
Copyright (c) 1997-2006 Tom Christiansen, Nathan Torkington, and
other authors as noted. All rights reserved.
@


1.1.1.10
log
@import perl 5.10.0 from CPAN
@
text
@d3 1
a3 1
perlfaq1 - General Questions About Perl ($Revision: 10427 $)
d43 1
a43 1
or read the faq at http://dev.perl.org/perl5/docs/p5p-faq.html ,
d61 4
a64 4
There is often a matter of opinion and taste, and there isn't any one
answer that fits anyone.  In general, you want to use either the current
stable release, or the stable release immediately prior to that one.
Currently, those are perl5.10.x and perl5.8.x, respectively.
d66 2
a67 2
Beyond that, you have to consider several things and decide which is best
for you.
d73 2
a74 2
If things aren't broken, upgrading perl may break them (or at least issue
new warnings).
d82 3
a84 2
The Perl community is geared toward supporting the most recent releases,
so you'll have an easier time finding help for those.
d88 3
a90 3
Versions prior to perl5.004 had serious security problems with buffer
overflows, and in some cases have CERT advisories (for instance,
http://www.cert.org/advisories/CA-1997-17.html ).
d94 3
a96 3
The latest versions are probably the least deployed and widely tested, so
you may want to wait a few months after their release and see what
problems others have if you are risk averse.
d100 3
a102 2
The immediate, previous releases (i.e. perl5.8.x ) are usually maintained
for a while, although not at the same level as the current releases.
d106 3
a108 3
No one is actively supporting Perl 4.  Five years ago it was a dead
camel carcass (according to this document).  Now it's barely a skeleton
as its whitewashed bones have fractured or eroded.
d112 3
a114 3
There is no Perl 6 release scheduled, but it will be available when 
it's ready.  Stay tuned, but don't worry that you'll have to change 
major versions of Perl; no one is going to take Perl 5 away from you.
d118 7
a124 6
There are really two tracks of perl development: a maintenance version
and an experimental version.  The maintenance versions are stable, and
have an even number as the minor release (i.e. perl5.10.x, where 10 is the
minor release).  The experimental versions may include features that
don't make it into the stable versions, and have an odd number as the
minor release (i.e. perl5.9.x, where 9 is the minor release).
d129 1
a129 1
=head2 What are Perl 4, Perl 5, or Perl 6?
d133 1
a133 1
In short, Perl 4 is the past, Perl 5 is the present, and Perl 6 is the
d136 1
a136 1
The number after perl (i.e. the 5 after Perl 5) is the major release
d141 2
a142 2
The current major release of Perl is Perl 5, and was released in 1994.
It can run scripts from the previous major release, Perl 4 (March 1991),
d144 1
a144 1
complex data structures, and modules.  The Perl 5 interpreter was a
d147 1
a147 1
Perl 6 is the next major version of Perl, but it's still in development
d150 2
a151 2
latest versions of Perl 5, and some Perl 5 modules allow you to use some
Perl 6 syntax in your programs.  You can learn more about Perl 6 at
d156 1
a156 1
=head2 What was Ponie?
d158 7
a164 1
(contributed by brian d foy)
d166 1
a166 10
Ponie stands for "Perl On the New Internal Engine", started by Arthur
Bergman from Fotango in 2003, and subsequently run as a project of The
Perl Foundation. It was abandoned in 2006
( http://www.nntp.perl.org/group/perl.ponie.dev/487 ).

Instead of using the current Perl internals, Ponie aimed to create a
new one that would provide a translation path from Perl 5 to Perl 6
(or anything else that targets Parrot, actually). You would have been
able  to just keep using Perl 5 with Parrot, the virtual machine which
will compile and run Perl 6 bytecode.
d168 1
a168 1
=head2 What is Perl 6?
d171 1
a171 1
announced Perl 6 development would begin in earnest. Perl 6 was an oft
d176 2
a177 2
If you want to learn more about Perl 6, or have a desire to help in
the crusade to make Perl a better place then peruse the Perl 6 developers
d180 2
a181 2
Perl 6 is not scheduled for release yet, and Perl 5 will still be supported
for quite awhile after its release. Do not wait for Perl 6 to do whatever
d195 2
a196 2
backward compatibility.  While not quite all Perl 4 scripts run flawlessly
under Perl 5, an update to perl should nearly never invalidate a program
d223 1
a223 1
usually available for free.  Don't forget Perl modules, either.
d278 3
a280 1
Perl remains fundamentally a dynamically typed language, not
d288 7
a294 17
signify the language proper and "perl" the implementation of it, i.e.
the current interpreter.  Hence Tom's quip that "Nothing but perl can
parse Perl."  

Before the first edition of I<Programming perl>, people commonly
referred to the language as "perl", and its name appeared that way in
the title because it referred to the interpreter. In the book, Randal
Schwartz capitalised the language's name to make it stand out better
when typeset. This convention was adopted by the community, and the
second edition became I<Programming Perl>, using the capitalized
version of the name to refer to the language.

You may or may not choose to follow this usage.  For example,
parallelism means "awk and perl" and "Python and Perl" look good, while
"awk and Perl" and "Python and perl" do not.  But never write "PERL",
because perl is not an acronym, apocryphal folklore and post-facto
expansions notwithstanding.
d315 8
d331 4
a334 18
(contributed by brian d foy)

JAPH stands for "Just another Perl hacker,", which Randal Schwartz used
to sign email and usenet messages starting in the late 1980s. He
previously used the phrase with many subjects ("Just another x hacker,"),
so to distinguish his JAPH, he started to write them as Perl programs:

	print "Just another Perl hacker, ";

Note the trailing comma and space, which allows the addition of other
JAxH clauses for his many other interests.

Other people picked up on this and started to write clever or obfuscated
programs to produce the same output, spinning things quickly out of
control while still providing hours of amusement for their creators and
readers.

CPAN has several JAPH programs at http://www.cpan.org/misc/japh .
d338 2
a339 52
(contributed by brian d foy)

Google "larry wall quotes"! You might even try the "I feel lucky" button.
:)

Wikiquote has the witticisms from Larry along with their source,
including his usenet postings and source code comments.

If you want a plain text file, try
http://www.cpan.org/misc/lwall-quotes.txt.gz .

=head2 How can I convince others to use Perl?

(contributed by brian d foy)

Appeal to their self interest! If Perl is new (and thus scary) to them,
find something that Perl can do to solve one of their problems. That
might mean that Perl either saves them something (time, headaches, money)
or gives them something (flexibility, power, testability).

In general, the benefit of a language is closely related to the skill of
the people using that language. If you or your team can be more faster,
better, and stronger through Perl, you'll deliver more value. Remember,
people often respond better to what they get out of it. If you run
into resistance, figure out what those people get out of the other
choice and how Perl might satisfy that requirement.

You don't have to worry about finding or paying for Perl; it's freely
available and several popular operating systems come with Perl. Community
support in places such as Perlmonks ( http://www.perlmonks.com )
and the various Perl mailing lists ( http://lists.perl.org ) means that
you can usually get quick answers to your problems.

Finally, keep in mind that Perl might not be the right tool for every
job. You're a much better advocate if your claims are reasonable and
grounded in reality. Dogmatically advocating anything tends to make
people discount your message. Be honest about possible disadvantages
to your choice of Perl since any choice has trade-offs.

You might find these links useful:

=over 4

=item * http://perltraining.com.au/whyperl.html

=item * http://www.perl.org/advocacy/whyperl.html

=back

=head1 REVISION

Revision: $Revision: 10427 $
d341 1
a341 1
Date: $Date: 2007-12-14 00:39:01 +0100 (Fri, 14 Dec 2007) $
d343 52
a394 1
See L<perlfaq> for source control details and availability.
d398 1
a398 1
Copyright (c) 1997-2007 Tom Christiansen, Nathan Torkington, and
@


1.1.1.11
log
@import perl 5.10.1
@
text
@d3 1
a3 1
perlfaq1 - General Questions About Perl
d62 1
a62 1
answer that fits everyone. In general, you want to use either the current
d110 2
a111 2
There is no Perl 6 release scheduled, but it will be available when
it's ready.  Stay tuned, but don't worry that you'll have to change
d288 1
a288 1
parse Perl."
d338 4
a341 1
	print "Just another Perl hacker,";
d403 1
a403 1
Revision: $Revision$
d405 1
a405 1
Date: $Date$
d411 1
a411 1
Copyright (c) 1997-2009 Tom Christiansen, Nathan Torkington, and
@


1.1.1.12
log
@Perl 5.12.2 from CPAN
@
text
@d13 1
a13 1
written by Larry Wall and a cast of thousands. It derives from the
d22 1
a22 1
and even managers also use Perl. Maybe you should, too.
d24 1
a24 1
=head2 Who supports Perl? Who develops it? Why is it free?
d28 1
a28 1
distribution policy of perl. Perl is supported by its users. The
d30 1
a30 1
documentation you're reading now were all written by volunteers. See
d32 1
a32 1
distribution for more details. See L<perlhist> (new as of 5.005)
d38 1
a38 1
money. You may snoop on pending developments via the archives at
d45 1
a45 1
perl5-porters-subscribe@@perl.org a subscription request
d49 2
a50 2
such thing as "GNU Perl". Perl is not produced nor maintained by the
Free Software Foundation. Perl's licensing terms are also more open
d54 1
a54 1
users the informal support will more than suffice. See the answer to
d104 2
a105 2
No one is actively supporting Perl 4. Five years ago it was a dead
camel carcass (according to this document). Now it's barely a skeleton
d111 1
a111 1
it's ready. Stay tuned, but don't worry that you'll have to change
d117 1
a117 1
and an experimental version. The maintenance versions are stable, and
d119 1
a119 1
minor release). The experimental versions may include features that
d134 1
a134 1
of the perl interpreter as well as the version of the language. Each
d141 1
a141 1
complex data structures, and modules. The Perl 5 interpreter was a
d145 2
a146 2
in both its syntax and design. The work started in 2002 and is still
ongoing. Many of the most interesting features have shown up in the
d148 1
a148 1
Perl 6 syntax in your programs. You can learn more about Perl 6 at
d165 1
a165 1
able to just keep using Perl 5 with Parrot, the virtual machine which
d177 1
a177 1
the crusade to make Perl a better place then read the Perl 6 developers
d190 1
a190 1
are widely tested before release. Since the 5.000 release, we have
d195 1
a195 1
backward compatibility. While not quite all Perl 4 scripts run flawlessly
d202 1
a202 1
No, Perl is easy to start learning--and easy to keep learning. It looks
d207 1
a207 1
Most tasks only require a small subset of the Perl language. One of
d209 1
a209 1
to do it" (TMTOWTDI, sometimes pronounced "tim toady"). Perl's
d216 1
a216 1
and test/debug quickly and easily. This ease of experimentation flattens
d221 1
a221 1
the ability to understand other people's code. If there's something you
d223 1
a223 1
usually available for free. Don't forget Perl modules, either.
d229 1
a229 1
Favorably in some areas, unfavorably in others. Precisely which areas
d234 1
a234 1
set of tasks. These languages have their own newsgroups in which you
d246 1
a246 1
what they'd program in low-level languages like C or C++. It's ultimately
d253 1
a253 1
perl interpreter. You can also go the other direction, and write your
d255 1
a255 1
to create a powerful application. See L<perlembed>.
d259 2
a260 2
convenient for certain kinds of problems. Perl tries to be all things
to all people, but nothing special to anyone. Examples of specialized
d275 1
a275 1
shared-memory applications, or extremely large applications. You'll
d279 2
a280 2
a statically typed one. You certainly won't be chastised if you don't
trust nuclear-plant or brain-surgery monitoring code to it. And Larry
d285 1
a285 1
One bit. Oh, you weren't talking ASCII? :-) Larry now uses "Perl" to
d287 1
a287 1
the current interpreter. Hence Tom's quip that "Nothing but perl can
d298 1
a298 1
You may or may not choose to follow this usage. For example,
d300 1
a300 1
"awk and Perl" and "Python and perl" do not. But never write "PERL",
d306 2
a307 2
Larry doesn't really care. He says (half in jest) that "a script is
what you give the actors. A program is what you give the audience."
d310 1
a310 1
commands--that is, a chat script. Something like a UUCP or PPP chat
d313 1
a313 1
for example. Chat scripts were just drivers for existing programs,
d317 1
a317 1
interpreted and that the only question is at what level. But if you
d326 1
a326 1
like "non serious" or "not real programming". Consequently, some Perl
d398 8
d408 1
a408 1
Copyright (c) 1997-2010 Tom Christiansen, Nathan Torkington, and
d415 1
a415 1
domain. You are permitted and encouraged to use this code and any
d417 1
a417 1
see fit. A simple comment in the code giving credit to the FAQ would
@


