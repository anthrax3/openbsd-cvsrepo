head	1.12;
access;
symbols
	OPENBSD_5_3:1.11.0.10
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.8
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.6
	OPENBSD_5_0:1.11.0.4
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.2
	OPENBSD_4_9_BASE:1.11
	PERL_5_12_2:1.1.1.10
	OPENBSD_4_8:1.10.0.4
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.2
	OPENBSD_4_7_BASE:1.10
	PERL_5_10_1:1.1.1.9
	OPENBSD_4_6:1.9.0.6
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.2
	OPENBSD_4_5_BASE:1.9
	PERL_5_10_0:1.1.1.8
	OPENBSD_4_4:1.8.0.18
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.16
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.14
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.12
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.10
	OPENBSD_4_0_BASE:1.8
	PERL_5_8_8:1.1.1.7
	OPENBSD_3_9:1.8.0.8
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.6
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.4
	OPENBSD_3_7_BASE:1.8
	PERL_5_8_6:1.1.1.7
	OPENBSD_3_6:1.8.0.2
	OPENBSD_3_6_BASE:1.8
	PERL_5_8_5:1.1.1.6
	PERL_5_8_3:1.1.1.5
	OPENBSD_3_5:1.7.0.2
	OPENBSD_3_5_BASE:1.7
	PERL_5_8_2:1.1.1.5
	OPENBSD_3_4:1.6.0.4
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.6.0.2
	OPENBSD_3_3_BASE:1.6
	PERL_5_8_0:1.1.1.5
	OPENBSD_3_2:1.5.0.6
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.4
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	PERL_5_6_1:1.1.1.4
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	PERL_5_6_0:1.1.1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	PERL_500503:1.1.1.2
	CPAN:1.1.1
	OPENBSD_2_5:1.2.0.6
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.4
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	perl5003:1.1.1.1
	lwall:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.12
date	2013.03.25.20.40.59;	author sthen;	state dead;
branches;
next	1.11;

1.11
date	2010.09.24.15.07.05;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2009.10.12.18.24.48;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2008.09.29.17.36.18;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2004.08.09.18.10.17;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2003.12.03.03.02.47;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.10.27.22.25.34;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.24.18.36.02;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.06.17.07.46;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	99.04.29.22.52.23;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.11.30.07.59.40;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.08.19.10.13.07;	author downsj;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.08.19.10.13.07;	author downsj;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.04.29.22.41.07;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2000.04.06.16.10.34;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2001.05.24.18.24.55;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2002.10.27.22.15.09;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2004.08.09.17.48.30;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2005.01.15.21.18.11;	author millert;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2008.09.29.17.18.57;	author millert;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2009.10.12.18.10.38;	author millert;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	2010.09.24.14.49.08;	author millert;	state Exp;
branches;
next	;


desc
@@


1.12
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@#!/usr/local/bin/perl

use Config;
use File::Basename qw(&basename &dirname);
use Cwd;

# List explicitly here the variables you want Configure to
# generate.  Metaconfig only looks for shell variables, so you
# have to mention them as if they were shell variables, not
# %Config entries.  Thus you write
#  $startperl
# to ensure Configure will look for $Config{startperl}.

# This forces PL files to create target in same directory as PL file.
# This is so that make depend always knows where to find PL derivatives.
$origdir = cwd;
chdir dirname($0);
$file = basename($0, '.PL');
$file .= '.com' if $^O eq 'VMS';

open OUT,">$file" or die "Can't create $file: $!";

print "Extracting $file (with variable substitutions)\n";

# In this section, perl variables will be expanded during extraction.
# You can use $Config{...} to use Configure variables.

print OUT <<"!GROK!THIS!";
$Config{startperl}
    eval 'exec $Config{perlpath} -S \$0 \${1+"\$@@"}'
        if \$running_under_some_shell;
!GROK!THIS!

# In the following, perl variables are not expanded during extraction.

print OUT <<'!NO!SUBS!';

# pod2man -- Convert POD data to formatted *roff input.
#
# Copyright 1999, 2000, 2001, 2004, 2006, 2008 Russ Allbery <rra@@stanford.edu>
#
# This program is free software; you may redistribute it and/or modify it
# under the same terms as Perl itself.

require 5.004;

use Getopt::Long qw(GetOptions);
use Pod::Man ();
use Pod::Usage qw(pod2usage);

use strict;

# Silence -w warnings.
use vars qw($running_under_some_shell);

# Insert -- into @@ARGV before any single dash argument to hide it from
# Getopt::Long; we want to interpret it as meaning stdin.
my $stdin;
@@ARGV = map { $_ eq '-' && !$stdin++ ? ('--', $_) : $_ } @@ARGV;

# Parse our options, trying to retain backward compatibility with pod2man but
# allowing short forms as well.  --lax is currently ignored.
my %options;
$options{errors} = 'pod';
Getopt::Long::config ('bundling_override');
GetOptions (\%options, 'center|c=s', 'date|d=s', 'fixed=s', 'fixedbold=s',
            'fixeditalic=s', 'fixedbolditalic=s', 'help|h', 'lax|l',
            'name|n=s', 'official|o', 'quotes|q=s', 'release|r:s',
            'section|s=s', 'stderr', 'verbose|v', 'utf8|u') or exit 1;
pod2usage (0) if $options{help};

# Official sets --center, but don't override things explicitly set.
if ($options{official} && !defined $options{center}) {
    $options{center} = 'Perl Programmers Reference Guide';
}

# Verbose is only our flag, not a Pod::Man flag.
my $verbose = $options{verbose};
delete $options{verbose};

# This isn't a valid Pod::Man option and is only accepted for backward
# compatibility.
delete $options{lax};

# Initialize and run the formatter, pulling a pair of input and output off at
# a time.
my $parser = Pod::Man->new (%options);
my @@files;
do {
    @@files = splice (@@ARGV, 0, 2);
    print "  $files[1]\n" if $verbose;
    $parser->parse_from_file (@@files);
} while (@@ARGV);

__END__

=head1 NAME

pod2man - Convert POD data to formatted *roff input

=for stopwords
en em --stderr stderr --utf8 UTF-8 overdo markup MT-LEVEL Allbery Solaris
URL troff troff-specific formatters uppercased Christiansen

=head1 SYNOPSIS

pod2man [B<--center>=I<string>] [B<--date>=I<string>]
    [B<--fixed>=I<font>] [B<--fixedbold>=I<font>] [B<--fixeditalic>=I<font>]
    [B<--fixedbolditalic>=I<font>] [B<--name>=I<name>] [B<--official>]
    [B<--quotes>=I<quotes>] [B<--release>[=I<version>]]
    [B<--section>=I<manext>] [B<--stderr>] [B<--utf8>] [B<--verbose>]
    [I<input> [I<output>] ...]

pod2man B<--help>

=head1 DESCRIPTION

B<pod2man> is a front-end for Pod::Man, using it to generate *roff input
from POD source.  The resulting *roff code is suitable for display on a
terminal using nroff(1), normally via man(1), or printing using troff(1).

I<input> is the file to read for POD source (the POD can be embedded in
code).  If I<input> isn't given, it defaults to C<STDIN>.  I<output>, if
given, is the file to which to write the formatted output.  If I<output>
isn't given, the formatted output is written to C<STDOUT>.  Several POD
files can be processed in the same B<pod2man> invocation (saving module
load and compile times) by providing multiple pairs of I<input> and
I<output> files on the command line.

B<--section>, B<--release>, B<--center>, B<--date>, and B<--official> can
be used to set the headers and footers to use; if not given, Pod::Man will
assume various defaults.  See below or L<Pod::Man> for details.

B<pod2man> assumes that your *roff formatters have a fixed-width font
named C<CW>.  If yours is called something else (like C<CR>), use
B<--fixed> to specify it.  This generally only matters for troff output
for printing.  Similarly, you can set the fonts used for bold, italic, and
bold italic fixed-width output.

Besides the obvious pod conversions, Pod::Man, and therefore pod2man also
takes care of formatting func(), func(n), and simple variable references
like $foo or @@bar so you don't have to use code escapes for them; complex
expressions like C<$fred{'stuff'}> will still need to be escaped, though.
It also translates dashes that aren't used as hyphens into en dashes, makes
long dashes--like this--into proper em dashes, fixes "paired quotes," and
takes care of several other troff-specific tweaks.  See L<Pod::Man> for
complete information.

=head1 OPTIONS

=over 4

=item B<-c> I<string>, B<--center>=I<string>

Sets the centered page header to I<string>.  The default is "User
Contributed Perl Documentation", but also see B<--official> below.

=item B<-d> I<string>, B<--date>=I<string>

Set the left-hand footer string to this value.  By default, the modification
date of the input file will be used, or the current date if input comes from
C<STDIN>.

=item B<--fixed>=I<font>

The fixed-width font to use for verbatim text and code.  Defaults to
C<CW>.  Some systems may want C<CR> instead.  Only matters for troff(1)
output.

=item B<--fixedbold>=I<font>

Bold version of the fixed-width font.  Defaults to C<CB>.  Only matters
for troff(1) output.

=item B<--fixeditalic>=I<font>

Italic version of the fixed-width font (actually, something of a misnomer,
since most fixed-width fonts only have an oblique version, not an italic
version).  Defaults to C<CI>.  Only matters for troff(1) output.

=item B<--fixedbolditalic>=I<font>

Bold italic (probably actually oblique) version of the fixed-width font.
Pod::Man doesn't assume you have this, and defaults to C<CB>.  Some
systems (such as Solaris) have this font available as C<CX>.  Only matters
for troff(1) output.

=item B<-h>, B<--help>

Print out usage information.

=item B<-l>, B<--lax>

No longer used.  B<pod2man> used to check its input for validity as a
manual page, but this should now be done by L<podchecker(1)> instead.
Accepted for backward compatibility; this option no longer does anything.

=item B<-n> I<name>, B<--name>=I<name>

Set the name of the manual page to I<name>.  Without this option, the manual
name is set to the uppercased base name of the file being converted unless
the manual section is 3, in which case the path is parsed to see if it is a
Perl module path.  If it is, a path like C<.../lib/Pod/Man.pm> is converted
into a name like C<Pod::Man>.  This option, if given, overrides any
automatic determination of the name.

Note that this option is probably not useful when converting multiple POD
files at once.  The convention for Unix man pages for commands is for the
man page title to be in all-uppercase even if the command isn't.

=item B<-o>, B<--official>

Set the default header to indicate that this page is part of the standard
Perl release, if B<--center> is not also given.

=item B<-q> I<quotes>, B<--quotes>=I<quotes>

Sets the quote marks used to surround CE<lt>> text to I<quotes>.  If
I<quotes> is a single character, it is used as both the left and right
quote; if I<quotes> is two characters, the first character is used as the
left quote and the second as the right quoted; and if I<quotes> is four
characters, the first two are used as the left quote and the second two as
the right quote.

I<quotes> may also be set to the special value C<none>, in which case no
quote marks are added around CE<lt>> text (but the font is still changed for
troff output).

=item B<-r>, B<--release>

Set the centered footer.  By default, this is the version of Perl you run
B<pod2man> under.  Note that some system an macro sets assume that the
centered footer will be a modification date and will prepend something like
"Last modified: "; if this is the case, you may want to set B<--release> to
the last modified date and B<--date> to the version number.

=item B<-s>, B<--section>

Set the section for the C<.TH> macro.  The standard section numbering
convention is to use 1 for user commands, 2 for system calls, 3 for
functions, 4 for devices, 5 for file formats, 6 for games, 7 for
miscellaneous information, and 8 for administrator commands.  There is a lot
of variation here, however; some systems (like Solaris) use 4 for file
formats, 5 for miscellaneous information, and 7 for devices.  Still others
use 1m instead of 8, or some mix of both.  About the only section numbers
that are reliably consistent are 1, 2, and 3.

By default, section 1 will be used unless the file ends in C<.pm>, in
which case section 3 will be selected.

=item B<--stderr>

By default, B<pod2man> puts any errors detected in the POD input in a POD
ERRORS section in the output manual page.  If B<--stderr> is given, errors
are sent to standard error instead and the POD ERRORS section is
suppressed.

=item B<-u>, B<--utf8>

By default, B<pod2man> produces the most conservative possible *roff
output to try to ensure that it will work with as many different *roff
implementations as possible.  Many *roff implementations cannot handle
non-ASCII characters, so this means all non-ASCII characters are converted
either to a *roff escape sequence that tries to create a properly accented
character (at least for troff output) or to C<X>.

This option says to instead output literal UTF-8 characters.  If your
*roff implementation can handle it, this is the best output format to use
and avoids corruption of documents containing non-ASCII characters.
However, be warned that *roff source with literal UTF-8 characters is not
supported by many implementations and may even result in segfaults and
other bad behavior.

Be aware that, when using this option, the input encoding of your POD
source must be properly declared unless it is US-ASCII or Latin-1.  POD
input without an C<=encoding> command will be assumed to be in Latin-1,
and if it's actually in UTF-8, the output will be double-encoded.  See
L<perlpod(1)> for more information on the C<=encoding> command.

=item B<-v>, B<--verbose>

Print out the name of each output file as it is being generated.

=back

=head1 DIAGNOSTICS

If B<pod2man> fails with errors, see L<Pod::Man> and L<Pod::Simple> for
information about what those errors might mean.

=head1 EXAMPLES

    pod2man program > program.1
    pod2man SomeModule.pm /usr/perl/man/man3/SomeModule.3
    pod2man --section=7 note.pod > note.7

If you would like to print out a lot of man page continuously, you probably
want to set the C and D registers to set contiguous page numbering and
even/odd paging, at least on some versions of man(7).

    troff -man -rC1 -rD1 perl.1 perldata.1 perlsyn.1 ...

To get index entries on C<STDERR>, turn on the F register, as in:

    troff -man -rF1 perl.1

The indexing merely outputs messages via C<.tm> for each major page,
section, subsection, item, and any C<XE<lt>E<gt>> directives.  See
L<Pod::Man> for more details.

=head1 BUGS

Lots of this documentation is duplicated from L<Pod::Man>.

=head1 NOTES

For those not sure of the proper layout of a man page, here are some notes
on writing a proper man page.

The name of the program being documented is conventionally written in bold
(using BE<lt>E<gt>) wherever it occurs, as are all program options.
Arguments should be written in italics (IE<lt>E<gt>).  Functions are
traditionally written in italics; if you write a function as function(),
Pod::Man will take care of this for you.  Literal code or commands should
be in CE<lt>E<gt>.  References to other man pages should be in the form
C<manpage(section)>, and Pod::Man will automatically format those
appropriately.  As an exception, it's traditional not to use this form when
referring to module documentation; use C<LE<lt>Module::NameE<gt>> instead.

References to other programs or functions are normally in the form of man
page references so that cross-referencing tools can provide the user with
links and the like.  It's possible to overdo this, though, so be careful not
to clutter your documentation with too much markup.

The major headers should be set out using a C<=head1> directive, and are
historically written in the rather startling ALL UPPER CASE format, although
this is not mandatory.  Minor headers may be included using C<=head2>, and
are typically in mixed case.

The standard sections of a manual page are:

=over 4

=item NAME

Mandatory section; should be a comma-separated list of programs or functions
documented by this POD page, such as:

    foo, bar - programs to do something

Manual page indexers are often extremely picky about the format of this
section, so don't put anything in it except this line.  A single dash, and
only a single dash, should separate the list of programs or functions from
the description.  Do not use any markup such as CE<lt>E<gt> or
BE<lt>E<gt>.  Functions should not be qualified with C<()> or the like.
The description should ideally fit on a single line, even if a man program
replaces the dash with a few tabs.

=item SYNOPSIS

A short usage summary for programs and functions.  This section is mandatory
for section 3 pages.

=item DESCRIPTION

Extended description and discussion of the program or functions, or the body
of the documentation for man pages that document something else.  If
particularly long, it's a good idea to break this up into subsections
C<=head2> directives like:

    =head2 Normal Usage

    =head2 Advanced Features

    =head2 Writing Configuration Files

or whatever is appropriate for your documentation.

=item OPTIONS

Detailed description of each of the command-line options taken by the
program.  This should be separate from the description for the use of things
like L<Pod::Usage|Pod::Usage>.  This is normally presented as a list, with
each option as a separate C<=item>.  The specific option string should be
enclosed in BE<lt>E<gt>.  Any values that the option takes should be
enclosed in IE<lt>E<gt>.  For example, the section for the option
B<--section>=I<manext> would be introduced with:

    =item B<--section>=I<manext>

Synonymous options (like both the short and long forms) are separated by a
comma and a space on the same C<=item> line, or optionally listed as their
own item with a reference to the canonical name.  For example, since
B<--section> can also be written as B<-s>, the above would be:

    =item B<-s> I<manext>, B<--section>=I<manext>

(Writing the short option first is arguably easier to read, since the long
option is long enough to draw the eye to it anyway and the short option can
otherwise get lost in visual noise.)

=item RETURN VALUE

What the program or function returns, if successful.  This section can be
omitted for programs whose precise exit codes aren't important, provided
they return 0 on success as is standard.  It should always be present for
functions.

=item ERRORS

Exceptions, error return codes, exit statuses, and errno settings.
Typically used for function documentation; program documentation uses
DIAGNOSTICS instead.  The general rule of thumb is that errors printed to
C<STDOUT> or C<STDERR> and intended for the end user are documented in
DIAGNOSTICS while errors passed internal to the calling program and
intended for other programmers are documented in ERRORS.  When documenting
a function that sets errno, a full list of the possible errno values
should be given here.

=item DIAGNOSTICS

All possible messages the program can print out--and what they mean.  You
may wish to follow the same documentation style as the Perl documentation;
see perldiag(1) for more details (and look at the POD source as well).

If applicable, please include details on what the user should do to correct
the error; documenting an error as indicating "the input buffer is too
small" without telling the user how to increase the size of the input buffer
(or at least telling them that it isn't possible) aren't very useful.

=item EXAMPLES

Give some example uses of the program or function.  Don't skimp; users often
find this the most useful part of the documentation.  The examples are
generally given as verbatim paragraphs.

Don't just present an example without explaining what it does.  Adding a
short paragraph saying what the example will do can increase the value of
the example immensely.

=item ENVIRONMENT

Environment variables that the program cares about, normally presented as a
list using C<=over>, C<=item>, and C<=back>.  For example:

    =over 6

    =item HOME

    Used to determine the user's home directory.  F<.foorc> in this
    directory is read for configuration details, if it exists.

    =back

Since environment variables are normally in all uppercase, no additional
special formatting is generally needed; they're glaring enough as it is.

=item FILES

All files used by the program or function, normally presented as a list, and
what it uses them for.  File names should be enclosed in FE<lt>E<gt>.  It's
particularly important to document files that will be potentially modified.

=item CAVEATS

Things to take special care with, sometimes called WARNINGS.

=item BUGS

Things that are broken or just don't work quite right.

=item RESTRICTIONS

Bugs you don't plan to fix.  :-)

=item NOTES

Miscellaneous commentary.

=item AUTHOR

Who wrote it (use AUTHORS for multiple people).  Including your current
e-mail address (or some e-mail address to which bug reports should be sent)
so that users have a way of contacting you is a good idea.  Remember that
program documentation tends to roam the wild for far longer than you expect
and pick an e-mail address that's likely to last if possible.

=item HISTORY

Programs derived from other sources sometimes have this, or you might keep
a modification log here.  If the log gets overly long or detailed,
consider maintaining it in a separate file, though.

=item COPYRIGHT AND LICENSE

For copyright

    Copyright YEAR(s) by YOUR NAME(s)

(No, (C) is not needed.  No, "all rights reserved" is not needed.)

For licensing the easiest way is to use the same licensing as Perl itself:

    This library is free software; you may redistribute it and/or modify
    it under the same terms as Perl itself.

This makes it easy for people to use your module with Perl.  Note that
this licensing is neither an endorsement or a requirement, you are of
course free to choose any licensing.

=item SEE ALSO

Other man pages to check out, like man(1), man(7), makewhatis(8), or
catman(8).  Normally a simple list of man pages separated by commas, or a
paragraph giving the name of a reference work.  Man page references, if they
use the standard C<name(section)> form, don't have to be enclosed in
LE<lt>E<gt> (although it's recommended), but other things in this section
probably should be when appropriate.

If the package has a mailing list, include a URL or subscription
instructions here.

If the package has a web site, include a URL here.

=back

In addition, some systems use CONFORMING TO to note conformance to relevant
standards and MT-LEVEL to note safeness for use in threaded programs or
signal handlers.  These headings are primarily useful when documenting parts
of a C library.  Documentation of object-oriented libraries or modules may
use CONSTRUCTORS and METHODS sections for detailed documentation of the
parts of the library and save the DESCRIPTION section for an overview; other
large modules may use FUNCTIONS for similar reasons.  Some people use
OVERVIEW to summarize the description if it's quite long.

Section ordering varies, although NAME should I<always> be the first section
(you'll break some man page systems otherwise), and NAME, SYNOPSIS,
DESCRIPTION, and OPTIONS generally always occur first and in that order if
present.  In general, SEE ALSO, AUTHOR, and similar material should be left
for last.  Some systems also move WARNINGS and NOTES to last.  The order
given above should be reasonable for most purposes.

Finally, as a general note, try not to use an excessive amount of markup.
As documented here and in L<Pod::Man>, you can safely leave Perl variables,
function names, man page references, and the like unadorned by markup and
the POD translators will figure it out for you.  This makes it much easier
to later edit the documentation.  Note that many existing translators
(including this one currently) will do the wrong thing with e-mail addresses
when wrapped in LE<lt>E<gt>, so don't do that.

For additional information that may be more accurate for your specific
system, see either L<man(5)> or L<man(7)> depending on your system manual
section numbering conventions.

=head1 SEE ALSO

L<Pod::Man>, L<Pod::Simple>, L<man(1)>, L<nroff(1)>, L<perlpod(1)>,
L<podchecker(1)>, L<troff(1)>, L<man(7)>

The man page documenting the an macro set may be L<man(5)> instead of
L<man(7)> on your system.

The current version of this script is always available from its web site at
L<http://www.eyrie.org/~eagle/software/podlators/>.  It is also part of the
Perl core distribution as of 5.6.0.

=head1 AUTHOR

Russ Allbery <rra@@stanford.edu>, based I<very> heavily on the original
B<pod2man> by Larry Wall and Tom Christiansen.  Large portions of this
documentation, particularly the sections on the anatomy of a proper man
page, are taken from the B<pod2man> documentation by Tom.

=head1 COPYRIGHT AND LICENSE

Copyright 1999, 2000, 2001, 2004, 2006, 2008 Russ Allbery
<rra@@stanford.edu>.

This program is free software; you may redistribute it and/or modify it
under the same terms as Perl itself.

=cut
!NO!SUBS!
#'# (cperl-mode)

close OUT or die "Can't close $file: $!";
chmod 0755, $file or die "Can't reset permissions for $file: $!\n";
exec("$Config{'eunicefix'} $file") if $Config{'eunicefix'} ne ':';
chdir $origdir;
@


1.11
log
@merge in perl 5.12.2 plus local changes
@
text
@@


1.10
log
@Merge in perl 5.10.1
@
text
@d354 2
a355 1
the description.  Functions should not be qualified with C<()> or the like.
@


1.9
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@a38 1
# $Id: pod2man.PL,v 1.16 2006-01-21 01:53:55 eagle Exp $
d40 1
a40 1
# Copyright 1999, 2000, 2001, 2004, 2006 by Russ Allbery <rra@@stanford.edu>
d61 1
a61 1
# Parse our options, trying to retain backwards compatibility with pod2man but
d64 1
d66 4
a69 4
GetOptions (\%options, 'section|s=s', 'release|r:s', 'center|c=s',
            'date|d=s', 'fixed=s', 'fixedbold=s', 'fixeditalic=s',
            'fixedbolditalic=s', 'name|n=s', 'official|o', 'quotes|q=s',
            'lax|l', 'help|h', 'verbose|v') or exit 1;
d81 1
a81 1
# This isn't a valid Pod::Man option and is only accepted for backwards
d101 4
d107 6
a112 6
pod2man [B<--section>=I<manext>] [B<--release>[=I<version>]]
[B<--center>=I<string>] [B<--date>=I<string>] [B<--fixed>=I<font>]
[B<--fixedbold>=I<font>] [B<--fixeditalic>=I<font>]
[B<--fixedbolditalic>=I<font>] [B<--name>=I<name>] [B<--official>]
[B<--lax>] [B<--quotes>=I<quotes>] [B<--verbose>]
[I<input> [I<output>] ...]
d123 6
a128 6
code).  If I<input> isn't given, it defaults to STDIN.  I<output>, if given,
is the file to which to write the formatted output.  If I<output> isn't
given, the formatted output is written to STDOUT.  Several POD files can be
processed in the same B<pod2man> invocation (saving module load and compile
times) by providing multiple pairs of I<input> and I<output> files on the
command line.
d130 2
a131 2
B<--section>, B<--release>, B<--center>, B<--date>, and B<--official> can be
used to set the headers and footers to use; if not given, Pod::Man will
d134 5
a138 5
B<pod2man> assumes that your *roff formatters have a fixed-width font named
CW.  If yours is called something else (like CR), use B<--fixed> to specify
it.  This generally only matters for troff output for printing.  Similarly,
you can set the fonts used for bold, italic, and bold italic fixed-width
output.
d162 1
a162 1
STDIN.
d166 3
a168 2
The fixed-width font to use for vertabim text and code.  Defaults to CW.
Some systems may want CR instead.  Only matters for troff(1) output.
d172 2
a173 2
Bold version of the fixed-width font.  Defaults to CB.  Only matters for
troff(1) output.
d179 1
a179 1
version).  Defaults to CI.  Only matters for troff(1) output.
d184 3
a186 3
Pod::Man doesn't assume you have this, and defaults to CB.  Some systems
(such as Solaris) have this font available as CX.  Only matters for troff(1)
output.
d194 3
a196 3
No longer used.  B<pod2man> used to check its input for validity as a manual
page, but this should now be done by L<podchecker(1)> instead.  Accepted for
backwards compatibility; this option no longer does anything.
d248 31
a278 2
By default, section 1 will be used unless the file ends in .pm in which case
section 3 will be selected.
d303 1
a303 1
To get index entries on stderr, turn on the F register, as in:
d347 1
a347 1
documented by this podpage, such as:
d413 5
a417 4
STDOUT or STDERR and intended for the end user are documented in DIAGNOSTICS
while errors passed internal to the calling program and intended for other
programmers are documented in ERRORS.  When documenting a function that sets
errno, a full list of the possible errno values should be given here.
d556 2
a557 2
L<Pod::Man>, L<Pod::Simple>, L<man(1)>, L<nroff(1)>, L<podchecker(1)>,
L<troff(1)>, L<man(7)>
d575 2
a576 1
Copyright 1999, 2000, 2001, 2004, 2006 by Russ Allbery <rra@@stanford.edu>.
@


1.8
log
@merge 5.8.5 into HEAD
remove now-unused files
crank libperl shared library major number
update Makefile.bsd-wrapper
tweak openbsd hints file for arm and m68k
@
text
@d39 1
a39 1
# $Id: pod2man.PL,v 1.7 2003/12/03 03:02:47 millert Exp $
d41 1
a41 1
# Copyright 1999, 2000, 2001 by Russ Allbery <rra@@stanford.edu>
d58 1
a58 2
# Getopt::Long; we want to interpret it as meaning stdin (which Pod::Parser
# does correctly).
d103 1
a103 1
pod2man [B<--section>=I<manext>] [B<--release>=I<version>]
d254 1
a254 1
If B<pod2man> fails with errors, see L<Pod::Man> and L<Pod::Parser> for
a443 14
=item SEE ALSO

Other man pages to check out, like man(1), man(7), makewhatis(8), or
catman(8).  Normally a simple list of man pages separated by commas, or a
paragraph giving the name of a reference work.  Man page references, if they
use the standard C<name(section)> form, don't have to be enclosed in
LE<lt>E<gt> (although it's recommended), but other things in this section
probably should be when appropriate.

If the package has a mailing list, include a URL or subscription
instructions here.

If the package has a web site, include a URL here.

d452 6
d475 11
a485 1
=item HISTORY
d487 1
a487 3
Programs derived from other sources sometimes have this, or you might keep
a modification log here.  If the log gets overly long or detailed,
consider maintaining it in a separate file, though.
d513 1
a513 1
or URLs when wrapped in LE<lt>E<gt>, so don't do that.
d521 1
a521 1
L<Pod::Man>, L<Pod::Parser>, L<man(1)>, L<nroff(1)>, L<podchecker(1)>,
d540 1
a540 1
Copyright 1999, 2000, 2001 by Russ Allbery <rra@@stanford.edu>.
@


1.7
log
@Resolve conflicts for perl 5.8.2, remove old files, and add OpenBSD-specific scaffolding
@
text
@d39 1
a39 1
# $Id: pod2man.PL,v 1.10 2002/07/15 05:45:56 eagle Exp $
d67 1
a67 1
GetOptions (\%options, 'section|s=s', 'release|r=s', 'center|c=s',
@


1.6
log
@Resolve conflicts, remove old files, merge local changes
@
text
@@


1.5
log
@merge in perl 5.6.1 with our local changes
@
text
@d39 1
a39 1
# $Id: pod2man.PL,v 1.4 2000/11/19 05:47:46 eagle Exp $
d41 1
a41 1
# Copyright 1999, 2000 by Russ Allbery <rra@@stanford.edu>
d43 1
a43 1
# This program is free software; you can redistribute it and/or modify it
d54 3
d63 2
a64 2
# Parse our options, trying to retain backwards compatibility with pod2man
# but allowing short forms as well.  --lax is currently ignored.
d69 2
a70 2
            'fixedbolditalic=s', 'official|o', 'quotes|q=s', 'lax|l',
            'help|h') or exit 1;
d78 10
a87 2
# Initialize and run the formatter, pulling a pair of input and output off
# at a time.
d92 1
d95 1
a95 1
  
d107 3
a109 2
[B<--fixedbolditalic>=I<font>] [B<--official>] [B<--lax>]
[B<--quotes>=I<quotes>] [I<input> [I<output>] ...]
d190 16
a205 2
Don't complain when required sections are missing.  Not currently used, as
POD checking functionality is not yet implemented in Pod::Man.
d247 4
a281 2
POD checking and the corresponding B<--lax> option don't work yet.

d451 5
a455 3
LE<lt>E<gt>, but other things in this section probably should be when
appropriate.  You may need to use the C<LE<lt>...|...E<gt>> syntax to keep
B<pod2man> and B<pod2text> from being too verbose; see perlpod(1).
d467 17
d486 3
a488 2
Programs derived from other sources sometimes have this, or you might keep a
modification log here.
d499 1
a499 4
OVERVIEW to summarize the description if it's quite long.  Sometimes there's
an additional COPYRIGHT section at the bottom, for licensing terms.
AVAILABILITY is sometimes added, giving the canonical download site for the
software or a URL for updates.
d517 2
a518 2
system, see either man(5) or man(7) depending on your system manual section
numbering conventions.
d522 2
a523 2
L<Pod::Man|Pod::Man>, L<Pod::Parser|Pod::Parser>, man(1), nroff(1),
troff(1), man(7)
d525 6
a530 2
The man page documenting the an macro set may be man(5) instead of man(7) on
your system.
d534 3
a536 3
Russ Allbery E<lt>rra@@stanford.eduE<gt>, based I<very> heavily on the
original B<pod2man> by Larry Wall and Tom Christiansen.  Large portions of
this documentation, particularly the sections on the anatomy of a proper man
d538 7
@


1.4
log
@perl-5.6.0 + local changes
@
text
@d39 1
a39 1
# $Id: pod2man.PL,v 1.2 2000/03/16 21:08:23 eagle Exp $
d66 2
a67 1
            'fixedbolditalic=s', 'official|o', 'lax|l', 'help|h') or exit 1;
d75 2
a76 1
# Initialize and run the formatter.
d78 6
a83 2
$parser->parse_from_file (@@ARGV);

d95 2
a96 2
[B<--fixedbolditalic>=I<font>] [B<--official>] [B<--lax>] [I<input>
[I<output>]]
d109 4
a112 1
given, the formatted output is written to STDOUT.
d184 13
@


1.3
log
@perl5.005_03 (stock)
@
text
@a11 1
#  $man3ext
d31 1
a31 3
	if \$running_under_some_shell;

\$DEF_PM_SECTION = '$Config{man3ext}' || '3';
d38 42
d82 1
a82 1
pod2man - translate embedded Perl pod directives into man pages
d86 7
a92 9
B<pod2man>
[ B<--section=>I<manext> ]
[ B<--release=>I<relpatch> ]
[ B<--center=>I<string> ]
[ B<--date=>I<string> ]
[ B<--fixed=>I<font> ]
[ B<--official> ]
[ B<--lax> ]
I<inputfile>
d96 27
a122 15
B<pod2man> converts its input file containing embedded pod directives (see
L<perlpod>) into nroff source suitable for viewing with nroff(1) or
troff(1) using the man(7) macro set.

Besides the obvious pod conversions, B<pod2man> also takes care of
func(), func(n), and simple variable references like $foo or @@bar so
you don't have to use code escapes for them; complex expressions like
C<$fred{'stuff'}> will still need to be escaped, though.  Other nagging
little roffish things that it catches include translating the minus in
something like foo-bar, making a long dash--like this--into a real em
dash, fixing up "paired quotes", putting a little space after the
parens in something like func(), making C++ and PI look right, making
double underbars have a little tiny space between them, making ALLCAPS
a teeny bit smaller in troff(1), and escaping backslashes so you don't
have to.
d126 1
a126 1
=over 8
d128 1
a128 1
=item center
d130 2
a131 3
Set the centered header to a specific string.  The default is
"User Contributed Perl Documentation", unless the C<--official> flag is
given, in which case the default is "Perl Programmers Reference Guide".
d133 1
a133 1
=item date
d135 3
a137 2
Set the left-hand footer string to this value.  By default,
the modification date of the input file will be used.
d139 1
a139 1
=item fixed
d141 2
a142 1
The fixed font to use for code refs.  Defaults to CW.
d144 1
a144 1
=item official
d146 2
a147 2
Set the default header to indicate that this page is of
the standard release in case C<--center> is not given.
d149 1
a149 1
=item release
d151 3
a153 2
Set the centered footer.  By default, this is the current
perl release.
d155 1
a155 1
=item section
d157 4
a160 7
Set the section for the C<.TH> macro.  The standard conventions on
sections are to use 1 for user commands,  2 for system calls, 3 for
functions, 4 for devices, 5 for file formats, 6 for games, 7 for
miscellaneous information, and 8 for administrator commands.  This works
best if you put your Perl man pages in a separate tree, like
F</usr/local/perl/man/>.  By default, section 1 will be used
unless the file ends in F<.pm> in which case section 3 will be selected.
d162 1
a162 1
=item lax
d164 1
a164 1
Don't complain when required sections aren't present.
d166 1
a166 1
=back
d168 2
a169 1
=head1 Anatomy of a Proper Man Page
d171 1
a171 7
For those not sure of the proper layout of a man page, here's
an example of the skeleton of a proper man page.  Head of the
major headers should be setout as a C<=head1> directive, and
are historically written in the rather startling ALL UPPER CASE
format, although this is not mandatory.
Minor headers may be included using C<=head2>, and are
typically in mixed case.
d173 2
a174 1
=over 10
d176 1
a176 1
=item NAME
d178 5
a182 2
Mandatory section; should be a comma-separated list of programs or
functions documented by this podpage, such as:
d184 1
a184 1
    foo, bar - programs to do something
d186 8
a193 1
=item SYNOPSIS
d195 2
a196 2
A short usage summary for programs and functions, which
may someday be deemed mandatory.
d198 1
a198 1
=item DESCRIPTION
d200 1
a200 28
Long drawn out discussion of the program.  It's a good idea to break this
up into subsections using the C<=head2> directives, like

    =head2 A Sample Subection

    =head2 Yet Another Sample Subection

=item OPTIONS

Some people make this separate from the description.

=item RETURN VALUE

What the program or function returns if successful.

=item ERRORS

Exceptions, return codes, exit stati, and errno settings.

=item EXAMPLES

Give some example uses of the program.

=item ENVIRONMENT

Envariables this program might care about.

=item FILES
d202 2
a203 38
All files used by the program.  You should probably use the FE<lt>E<gt>
for these.

=item SEE ALSO

Other man pages to check out, like man(1), man(7), makewhatis(8), or catman(8).

=item NOTES

Miscellaneous commentary.

=item CAVEATS

Things to take special care with; sometimes called WARNINGS.

=item DIAGNOSTICS

All possible messages the program can print out--and
what they mean.

=item BUGS

Things that are broken or just don't work quite right.

=item RESTRICTIONS

Bugs you don't plan to fix :-)

=item AUTHOR

Who wrote it (or AUTHORS if multiple).

=item HISTORY

Programs derived from other sources sometimes have this, or
you might keep a modification log here.

=back
d208 1
a208 1
    pod2man some_module.pm > /usr/perl/man/man3/some_module.3
d211 3
a213 7
=head1 DIAGNOSTICS

The following diagnostics are generated by B<pod2man>.  Items
marked "(W)" are non-fatal, whereas the "(F)" errors will cause
B<pod2man> to immediately exit with a non-zero status.

=over 4
d215 1
a215 1
=item bad option in paragraph %d of %s: ``%s'' should be [%s]<%s>
d217 1
a217 2
(W) If you start include an option, you should set it off
as bold, italic, or code.
d219 1
a219 1
=item can't open %s: %s
d221 3
a223 1
(F) The input file wasn't available for the given reason.
d225 1
a225 1
=item Improper man page - no dash in NAME header in paragraph %d of %s
d227 1
a227 2
(W) The NAME header did not have an isolated dash in it.  This is
considered important.
d229 1
a229 38
=item Invalid man page - no NAME line in %s

(F) You did not include a NAME header, which is essential.

=item roff font should be 1 or 2 chars, not `%s'  (F)

(F) The font specified with the C<--fixed> option was not
a one- or two-digit roff font.

=item %s is missing required section: %s

(W) Required sections include NAME, DESCRIPTION, and if you're
using a section starting with a 3, also a SYNOPSIS.  Actually,
not having a NAME is a fatal.

=item Unknown escape: %s in %s

(W) An unknown HTML entity (probably for an 8-bit character) was given via
a C<EE<lt>E<gt>> directive.  Besides amp, lt, gt, and quot, recognized
entities are Aacute, aacute, Acirc, acirc, AElig, aelig, Agrave, agrave,
Aring, aring, Atilde, atilde, Auml, auml, Ccedil, ccedil, Eacute, eacute,
Ecirc, ecirc, Egrave, egrave, ETH, eth, Euml, euml, Iacute, iacute, Icirc,
icirc, Igrave, igrave, Iuml, iuml, Ntilde, ntilde, Oacute, oacute, Ocirc,
ocirc, Ograve, ograve, Oslash, oslash, Otilde, otilde, Ouml, ouml, szlig,
THORN, thorn, Uacute, uacute, Ucirc, ucirc, Ugrave, ugrave, Uuml, uuml,
Yacute, yacute, and yuml.

=item Unmatched =back

(W) You have a C<=back> without a corresponding C<=over>.

=item Unrecognized pod directive: %s

(W) You specified a pod directive that isn't in the known list of
C<=head1>, C<=head2>, C<=item>, C<=over>, C<=back>, or C<=cut>.


=back
d233 2
a234 5
If you would like to print out a lot of man page continuously, you
probably want to set the C and D registers to set contiguous page
numbering and even/odd paging, at least on some versions of man(7).
Settting the F register will get you some additional experimental
indexing:
d236 19
a254 1
    troff -man -rC1 -rD1 -rF1 perl.1 perldata.1 perlsyn.1 ...
d256 1
a256 3
The indexing merely outputs messages via C<.tm> for each
major page, section, subsection, item, and any C<XE<lt>E<gt>>
directives.
d258 1
d260 1
a260 1
=head1 RESTRICTIONS
d262 2
a263 1
None at this time.
d265 1
a265 1
=head1 BUGS
d267 6
a272 3
The =over and =back directives don't really work right.  They
take absolute positions instead of offsets, don't nest well, and
making people count is suboptimal in any event.
d274 1
a274 1
=head1 AUTHORS
d276 2
a277 2
Original prototype by Larry Wall, but so massively hacked over by
Tom Christiansen such that Larry probably doesn't recognize it anymore.
d279 1
a279 1
=cut
d281 4
a284 19
$/ = "";
$cutting = 1;
@@Indices = ();

# We try first to get the version number from a local binary, in case we're
# running an installed version of Perl to produce documentation from an
# uninstalled newer version's pod files.
if ($^O ne 'plan9' and $^O ne 'dos' and $^O ne 'os2' and $^O ne 'MSWin32') {
  my $perl = (-x './perl' && -f './perl' ) ?
                 './perl' :
                 ((-x '../perl' && -f '../perl') ?
                      '../perl' :
                      '');
  ($version,$patch) = `$perl -e 'print $]'` =~ /^(\d\.\d{3})(\d{2})?/ if $perl;
}
# No luck; we'll just go with the running Perl's version
($version,$patch) = $] =~ /^(.{5})(\d{2})?/ unless $version;
$DEF_RELEASE  = "perl $version";
$DEF_RELEASE .= ", patch $patch" if $patch;
d286 1
d288 1
a288 7
sub makedate {
    my $secs = shift;
    my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime($secs);
    my $mname = (qw{Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec})[$mon];
    $year += 1900;
    return "$mday/$mname/$year";
}
d290 1
a290 1
use Getopt::Long;
d292 1
a292 20
$DEF_SECTION = 1;
$DEF_CENTER = "User Contributed Perl Documentation";
$STD_CENTER = "Perl Programmers Reference Guide";
$DEF_FIXED = 'CW';
$DEF_LAX = 0;

sub usage {
    warn "$0: @@_\n" if @@_;
    die <<EOF;
usage: $0 [options] podpage
Options are:
	--section=manext      (default "$DEF_SECTION")
	--release=relpatch    (default "$DEF_RELEASE")
	--center=string       (default "$DEF_CENTER")
	--date=string         (default "$DEF_DATE")
	--fixed=font	      (default "$DEF_FIXED")
	--official	      (default NOT)
	--lax                 (default NOT)
EOF
}
d294 1
a294 21
$uok = GetOptions( qw(
	section=s
	release=s
	center=s
	date=s
	fixed=s
	official
	lax
	help));

$DEF_DATE = makedate((stat($ARGV[0]))[9] || time());

usage("Usage error!") unless $uok;
usage() if $opt_help;
usage("Need one and only one podpage argument") unless @@ARGV == 1;

$section = $opt_section || ($ARGV[0] =~ /\.pm$/
				? $DEF_PM_SECTION : $DEF_SECTION);
$RP = $opt_release || $DEF_RELEASE;
$center = $opt_center || ($opt_official ? $STD_CENTER : $DEF_CENTER);
$lax = $opt_lax || $DEF_LAX;
d296 20
a315 1
$CFont = $opt_fixed || $DEF_FIXED;
d317 1
a317 9
if (length($CFont) == 2) {
    $CFont_embed = "\\f($CFont";
}
elsif (length($CFont) == 1) {
    $CFont_embed = "\\f$CFont";
}
else {
    die "roff font should be 1 or 2 chars, not `$CFont_embed'";
}
d319 4
a322 1
$date = $opt_date || $DEF_DATE;
d324 1
a324 5
for (qw{NAME DESCRIPTION}) {
# for (qw{NAME DESCRIPTION AUTHOR}) {
    $wanna_see{$_}++;
}
$wanna_see{SYNOPSIS}++ if $section =~ /^3/;
d326 7
d334 1
a334 7
$name = @@ARGV ? $ARGV[0] : "<STDIN>";
$Filename = $name;
if ($section =~ /^1/) {
    require File::Basename;
    $name = uc File::Basename::basename($name);
}
$name =~ s/\.(pod|p[lm])$//i;
d336 8
a343 16
# Lose everything up to the first of
#     */lib/*perl*	standard or site_perl module
#     */*perl*/lib	from -D prefix=/opt/perl
#     */*perl*/		random module hierarchy
# which works.
$name =~ s-//+-/-g;
if ($name =~ s-^.*?/lib/[^/]*perl[^/]*/--i
	or $name =~ s-^.*?/[^/]*perl[^/]*/lib/--i
	or $name =~ s-^.*?/[^/]*perl[^/]*/--i) {
    # Lose ^site(_perl)?/.
    $name =~ s-^site(_perl)?/--;
    # Lose ^arch/.	(XXX should we use Config? Just for archname?)
    $name =~ s~^(.*-$^O|$^O-.*)/~~o;
    # Lose ^version/.
    $name =~ s-^\d+\.\d+/--;
}
d345 1
a345 2
# Translate Getopt/Long to Getopt::Long, etc.
$name =~ s(/)(::)g;
d347 7
a353 30
if ($name ne 'something') {
    FCHECK: {
	open(F, "< $ARGV[0]") || die "can't open $ARGV[0]: $!";
	while (<F>) {
	    next unless /^=\b/;
	    if (/^=head1\s+NAME\s*$/) {  # an /m would forgive mistakes
		$_ = <F>;
		unless (/\s*-+\s+/) {
		    $oops++;
		    warn "$0: Improper man page - no dash in NAME header in paragraph $. of $ARGV[0]\n"
                } else {
		    my @@n = split /\s+-+\s+/;
		    if (@@n != 2) {
			$oops++;
			warn "$0: Improper man page - malformed NAME header in paragraph $. of $ARGV[0]\n"
		    }
		    else {
			%namedesc = @@n;
		    }
		}
		last FCHECK;
	    }
	    next if /^=cut\b/;	# DB_File and Net::Ping have =cut before NAME
	    next if /^=pod\b/;  # It is OK to have =pod before NAME
	    die "$0: Invalid man page - 1st pod line is not NAME in $ARGV[0]\n" unless $lax;
	}
	die "$0: Invalid man page - no documentation in $ARGV[0]\n" unless $lax;
    }
    close F;
}
d355 1
a355 112
print <<"END";
.rn '' }`
''' \$RCSfile\$\$Revision\$\$Date\$
'''
''' \$Log\$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\\fB\\\\\$1\\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\\\n(.\$>=3 .ne \\\\\$3
.el .ne 3
.IP "\\\\\$1" \\\\\$2
..
.de Vb
.ft $CFont
.nf
.ne \\\\\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \\*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \\(*W-|\\(bv\\*(Tr
.ie n \\{\\
.ds -- \\(*W-
.ds PI pi
.if (\\n(.H=4u)&(1m=24u) .ds -- \\(*W\\h'-12u'\\(*W\\h'-12u'-\\" diablo 10 pitch
.if (\\n(.H=4u)&(1m=20u) .ds -- \\(*W\\h'-12u'\\(*W\\h'-8u'-\\" diablo 12 pitch
.ds L" ""
.ds R" ""
'''   \\*(M", \\*(S", \\*(N" and \\*(T" are the equivalent of
'''   \\*(L" and \\*(R", except that they are used on ".xx" lines,
'''   such as .IP and .SH, which do another additional levels of
'''   double-quote interpretation
.ds M" """
.ds S" """
.ds N" """""
.ds T" """""
.ds L' '
.ds R' '
.ds M' '
.ds S' '
.ds N' '
.ds T' '
'br\\}
.el\\{\\
.ds -- \\(em\\|
.tr \\*(Tr
.ds L" ``
.ds R" ''
.ds M" ``
.ds S" ''
.ds N" ``
.ds T" ''
.ds L' `
.ds R' '
.ds M' `
.ds S' '
.ds N' `
.ds T' '
.ds PI \\(*p
'br\\}
END

print <<'END';
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
END

print <<"END";
.TH $name $section "$RP" "$date" "$center"
.UC
END

push(@@Indices, qq{.IX Title "$name $section"});

while (($name, $desc) = each %namedesc) {
    for ($name, $desc) { s/^\s+//; s/\s+$//; }
    push(@@Indices, qq(.IX Name "$name - $desc"\n));
}
d357 2
a358 367
print <<'END';
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
END
print ".ft $CFont\n";
print <<'END';
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
END

$indent = 0;

$begun = "";

# Unrolling [^A-Z>]|[A-Z](?!<) gives:    // MRE pp 165.
my $nonest = '(?:[^A-Z>]*(?:[A-Z](?!<)[^A-Z>]*)*)';

while (<>) {
    if ($cutting) {
	next unless /^=/;
	$cutting = 0;
    }
    if ($begun) {
	if (/^=end\s+$begun/) {
            $begun = "";
	}
	elsif ($begun =~ /^(roff|man)$/) {
	    print STDOUT $_;
        }
	next;
    }
    chomp;

    # Translate verbatim paragraph

    if (/^\s/) {
	@@lines = split(/\n/);
	for (@@lines) {
	    1 while s
		{^( [^\t]* ) \t ( \t* ) }
		{ $1 . ' ' x (8 - (length($1)%8) + 8 * (length($2))) }ex;
	    s/\\/\\e/g;
	    s/\A/\\&/s;
	}
	$lines = @@lines;
	makespace() unless $verbatim++;
	print ".Vb $lines\n";
	print join("\n", @@lines), "\n";
	print ".Ve\n";
	$needspace = 0;
	next;
    }

    $verbatim = 0;

    if (/^=for\s+(\S+)\s*/s) {
	if ($1 eq "man" or $1 eq "roff") {
	    print STDOUT $',"\n\n";
	} else {
	    # ignore unknown for
	}
	next;
    }
    elsif (/^=begin\s+(\S+)\s*/s) {
	$begun = $1;
	if ($1 eq "man" or $1 eq "roff") {
	    print STDOUT $'."\n\n";
	}
	next;
    }

    # check for things that'll hosed our noremap scheme; affects $_
    init_noremap();

    if (!/^=item/) {

	# trofficate backslashes; must do it before what happens below
	s/\\/noremap('\\e')/ge;

	# protect leading periods and quotes against *roff
	# mistaking them for directives
	s/^(?:[A-Z]<)?[.']/\\&$&/gm;

	# first hide the escapes in case we need to
	# intuit something and get it wrong due to fmting

	1 while s/([A-Z]<$nonest>)/noremap($1)/ge;

	# func() is a reference to a perl function
	s{
	    \b
	    (
		[:\w]+ \(\)
	    )
	} {I<$1>}gx;

	# func(n) is a reference to a perl function or a man page
	s{
	    ([:\w]+)
	    (
		\( [^\051]+ \)
	    )
	} {I<$1>\\|$2}gx;

	# convert simple variable references
	s/(\s+)([\$\@@%][\w:]+)(?!\()/${1}C<$2>/g;

	if (m{ (
		    [\-\w]+
		    \(
			[^\051]*?
			[\@@\$,]
			[^\051]*?
		    \)
		)
	    }x && $` !~ /([LCI]<[^<>]*|-)$/ && !/^=\w/)
	{
	    warn "$0: bad option in paragraph $. of $ARGV: ``$1'' should be [LCI]<$1>\n";
	    $oops++;
	}

	while (/(-[a-zA-Z])\b/g && $` !~ /[\w\-]$/) {
	    warn "$0: bad option in paragraph $. of $ARGV: ``$1'' should be [CB]<$1>\n";
	    $oops++;
	}

	# put it back so we get the <> processed again;
	clear_noremap(0); # 0 means leave the E's

    } else {
	# trofficate backslashes
	s/\\/noremap('\\e')/ge;

    }

    # need to hide E<> first; they're processed in clear_noremap
    s/(E<[^<>]+>)/noremap($1)/ge;


    $maxnest = 10;
    while ($maxnest-- && /[A-Z]</) {

	# can't do C font here
	s/([BI])<($nonest)>/font($1) . $2 . font('R')/eg;

	# files and filelike refs in italics
	s/F<($nonest)>/I<$1>/g;

	# no break -- usually we want C<> for this
	s/S<($nonest)>/nobreak($1)/eg;

	# LREF: a la HREF L<show this text|man/section>
	s:L<([^|>]+)\|[^>]+>:$1:g;

	# LREF: a manpage(3f)
	s:L<([a-zA-Z][^\s\/]+)(\([^\)]+\))?>:the I<$1>$2 manpage:g;

	# LREF: an =item on another manpage
	s{
	    L<
		([^/]+)
		/
		(
		    [:\w]+
		    (\(\))?
		)
	    >
	} {the C<$2> entry in the I<$1> manpage}gx;

	# LREF: an =item on this manpage
	s{
	   ((?:
	    L<
		/
		(
		    [:\w]+
		    (\(\))?
		)
	    >
	    (,?\s+(and\s+)?)?
	  )+)
	} { internal_lrefs($1) }gex;

	# LREF: a =head2 (head1?), maybe on a manpage, maybe right here
	# the "func" can disambiguate
	s{
	    L<
		(?:
		    ([a-zA-Z]\S+?) /
		)?
		"?(.*?)"?
	    >
	}{
	    do {
		$1 	# if no $1, assume it means on this page.
		    ?  "the section on I<$2> in the I<$1> manpage"
		    :  "the section on I<$2>"
	    }
	}gesx; # s in case it goes over multiple lines, so . matches \n

	s/Z<>/\\&/g;

	# comes last because not subject to reprocessing
	s/C<($nonest)>/noremap("${CFont_embed}${1}\\fR")/eg;
    }

    if (s/^=//) {
	$needspace = 0;		# Assume this.

	s/\n/ /g;

	($Cmd, $_) = split(' ', $_, 2);

	$dotlevel = 1;
	if ($Cmd eq 'head1') {
	   $dotlevel = 1;
	}
	elsif ($Cmd eq 'head2') {
	   $dotlevel = 1;
	}
	elsif ($Cmd eq 'item') {
	   $dotlevel = 2;
	}

	if (defined $_) {
	    &escapes($dotlevel);
	    s/"/""/g;
	}

	clear_noremap(1);

	if ($Cmd eq 'cut') {
	    $cutting = 1;
	}
	elsif ($Cmd eq 'head1') {
	    s/\s+$//;
	    delete $wanna_see{$_} if exists $wanna_see{$_};
	    print qq{.SH "$_"\n};
      push(@@Indices, qq{.IX Header "$_"\n});
	}
	elsif ($Cmd eq 'head2') {
	    print qq{.Sh "$_"\n};
      push(@@Indices, qq{.IX Subsection "$_"\n});
	}
	elsif ($Cmd eq 'over') {
	    push(@@indent,$indent);
	    $indent += ($_ + 0) || 5;
	}
	elsif ($Cmd eq 'back') {
	    $indent = pop(@@indent);
	    warn "$0: Unmatched =back in paragraph $. of $ARGV\n" unless defined $indent;
	    $needspace = 1;
	}
	elsif ($Cmd eq 'item') {
	    s/^\*( |$)/\\(bu$1/g;
	    # if you know how to get ":s please do
	    s/\\\*\(L"([^"]+?)\\\*\(R"/'$1'/g;
	    s/\\\*\(L"([^"]+?)""/'$1'/g;
	    s/[^"]""([^"]+?)""[^"]/'$1'/g;
	    # here do something about the $" in perlvar?
	    print STDOUT qq{.Ip "$_" $indent\n};
      push(@@Indices, qq{.IX Item "$_"\n});
	}
	elsif ($Cmd eq 'pod') {
	    # this is just a comment
	} 
	else {
	    warn "$0: Unrecognized pod directive in paragraph $. of $ARGV: $Cmd\n";
	}
    }
    else {
	if ($needspace) {
	    &makespace;
	}
	&escapes(0);
	clear_noremap(1);
	print $_, "\n";
	$needspace = 1;
    }
}
d360 1
a360 1
print <<"END";
d362 1
a362 2
.rn }` ''
END
d364 2
a365 7
if (%wanna_see && !$lax) {
    @@missing = keys %wanna_see;
    warn "$0: $Filename is missing required section"
	.  (@@missing > 1 && "s")
	.  ": @@missing\n";
    $oops++;
}
d367 1
a367 1
foreach (@@Indices) { print "$_\n"; }
d369 2
a370 2
exit;
#exit ($oops != 0);
d372 1
a372 1
#########################################################################
d374 3
a376 5
sub nobreak {
    my $string = shift;
    $string =~ s/ /\\ /g;
    $string;
}
d378 1
a378 2
sub escapes {
    my $indot = shift;
d380 1
a380 1
    s/X<(.*?)>/mkindex($1)/ge;
d382 1
a382 2
    # translate the minus in foo-bar into foo\-bar for roff
    s/([^0-9a-z-])-([^-])/$1\\-$2/g;
d384 1
a384 61
    # make -- into the string version \*(-- (defined above)
    s/\b--\b/\\*(--/g;
    s/"--([^"])/"\\*(--$1/g;  # should be a better way
    s/([^"])--"/$1\\*(--"/g;

    # fix up quotes; this is somewhat tricky
    my $dotmacroL = 'L';
    my $dotmacroR = 'R';
    if ( $indot == 1 ) {
	$dotmacroL = 'M';
	$dotmacroR = 'S';
    }  
    elsif ( $indot >= 2 ) {
	$dotmacroL = 'N';
	$dotmacroR = 'T';
    }  
    if (!/""/) {
	s/(^|\s)(['"])/noremap("$1\\*($dotmacroL$2")/ge;
	s/(['"])($|[\-\s,;\\!?.])/noremap("\\*($dotmacroR$1$2")/ge;
    }

    #s/(?!")(?:.)--(?!")(?:.)/\\*(--/g;
    #s/(?:(?!")(?:.)--(?:"))|(?:(?:")--(?!")(?:.))/\\*(--/g;


    # make sure that func() keeps a bit a space tween the parens
    ### s/\b\(\)/\\|()/g;
    ### s/\b\(\)/(\\|)/g;

    # make C++ into \*C+, which is a squinched version (defined above)
    s/\bC\+\+/\\*(C+/g;

    # make double underbars have a little tiny space between them
    s/__/_\\|_/g;

    # PI goes to \*(PI (defined above)
    s/\bPI\b/noremap('\\*(PI')/ge;

    # make all caps a teeny bit smaller, but don't muck with embedded code literals
    my $hidCFont = font('C');
    if ($Cmd !~ /^head1/) { # SH already makes smaller
	# /g isn't enough; 1 while or we'll be off

#	1 while s{
#	    (?!$hidCFont)(..|^.|^)
#	    \b
#	    (
#		[A-Z][\/A-Z+:\-\d_$.]+
#	    )
#	    (s?) 		
#	    \b
#	} {$1\\s-1$2\\s0}gmox;

	1 while s{
	    (?!$hidCFont)(..|^.|^)
	    (
		\b[A-Z]{2,}[\/A-Z+:\-\d_\$]*\b
	    )
	} {
	    $1 . noremap( '\\s-1' .  $2 . '\\s0' )
	}egmox;
d386 1
a386 2
    }
}
d388 1
a388 6
# make troff just be normal, but make small nroff get quoted
# decided to just put the quotes in the text; sigh;
sub ccvt {
    local($_,$prev) = @@_;
    noremap(qq{.CQ "$_" \n\\&});
}
d390 1
a390 8
sub makespace {
    if ($indent) {
	print ".Sp\n";
    }
    else {
	print ".PP\n";
    }
}
d392 1
a392 6
sub mkindex {
    my ($entry) = @@_;
    my @@entries = split m:\s*/\s*:, $entry;
    push @@Indices, ".IX Xref " . join ' ', map {qq("$_")} @@entries;
    return '';
}
d394 1
a394 4
sub font {
    local($font) = shift;
    return '\\f' . noremap($font);
}
d396 7
a402 5
sub noremap {
    local($thing_to_hide) = shift;
    $thing_to_hide =~ tr/\000-\177/\200-\377/;
    return $thing_to_hide;
}
d404 1
a404 4
sub init_noremap {
	# escape high bit characters in input stream
	s/([\200-\377])/"E<".ord($1).">"/ge;
}
d406 1
a406 2
sub clear_noremap {
    my $ready_to_print = $_[0];
d408 5
a412 1
    tr/\200-\377/\000-\177/;
d414 1
a414 2
    # trofficate backslashes
    # s/(?!\\e)(?:..|^.|^)\\/\\e/g;
d416 2
a417 24
    # now for the E<>s, which have been hidden until now
    # otherwise the interative \w<> processing would have
    # been hosed by the E<gt>
    s {
	    E<
	    (
	        ( \d + ) 
	        | ( [A-Za-z]+ )	
	    )
	    >	
    } {
	 do {
	     defined $2
		? chr($2)
		:	
	     exists $HTML_Escapes{$3}
		? do { $HTML_Escapes{$3} }
		: do {
		    warn "$0: Unknown escape in paragraph $. of $ARGV: ``$&''\n";
		    "E<$1>";
		}
	 }
    }egx if $ready_to_print;
}
d419 1
a419 20
sub internal_lrefs {
    local($_) = shift;
    local $trailing_and = s/and\s+$// ? "and " : "";

    s{L</([^>]+)>}{$1}g;
    my(@@items) = split( /(?:,?\s+(?:and\s+)?)/ );
    my $retstr = "the ";
    my $i;
    for ($i = 0; $i <= $#items; $i++) {
	$retstr .= "C<$items[$i]>";
	$retstr .= ", " if @@items > 2 && $i != $#items;
	$retstr .= " and " if $i+2 == @@items;
    }

    $retstr .= " entr" . ( @@items > 1  ? "ies" : "y" )
	    .  " elsewhere in this document";
    # terminal space to avoid words running together (pattern used
    # strips terminal spaces)
    $retstr .= " " if length $trailing_and;
    $retstr .=  $trailing_and;
d421 45
a465 75
    return $retstr;

}

BEGIN {
%HTML_Escapes = (
    'amp'	=>	'&',	#   ampersand
    'lt'	=>	'<',	#   left chevron, less-than
    'gt'	=>	'>',	#   right chevron, greater-than
    'quot'	=>	'"',	#   double quote

    "Aacute"	=>	"A\\*'",	#   capital A, acute accent
    "aacute"	=>	"a\\*'",	#   small a, acute accent
    "Acirc"	=>	"A\\*^",	#   capital A, circumflex accent
    "acirc"	=>	"a\\*^",	#   small a, circumflex accent
    "AElig"	=>	'\*(AE',	#   capital AE diphthong (ligature)
    "aelig"	=>	'\*(ae',	#   small ae diphthong (ligature)
    "Agrave"	=>	"A\\*`",	#   capital A, grave accent
    "agrave"	=>	"A\\*`",	#   small a, grave accent
    "Aring"	=>	'A\\*o',	#   capital A, ring
    "aring"	=>	'a\\*o',	#   small a, ring
    "Atilde"	=>	'A\\*~',	#   capital A, tilde
    "atilde"	=>	'a\\*~',	#   small a, tilde
    "Auml"	=>	'A\\*:',	#   capital A, dieresis or umlaut mark
    "auml"	=>	'a\\*:',	#   small a, dieresis or umlaut mark
    "Ccedil"	=>	'C\\*,',	#   capital C, cedilla
    "ccedil"	=>	'c\\*,',	#   small c, cedilla
    "Eacute"	=>	"E\\*'",	#   capital E, acute accent
    "eacute"	=>	"e\\*'",	#   small e, acute accent
    "Ecirc"	=>	"E\\*^",	#   capital E, circumflex accent
    "ecirc"	=>	"e\\*^",	#   small e, circumflex accent
    "Egrave"	=>	"E\\*`",	#   capital E, grave accent
    "egrave"	=>	"e\\*`",	#   small e, grave accent
    "ETH"	=>	'\\*(D-',	#   capital Eth, Icelandic
    "eth"	=>	'\\*(d-',	#   small eth, Icelandic
    "Euml"	=>	"E\\*:",	#   capital E, dieresis or umlaut mark
    "euml"	=>	"e\\*:",	#   small e, dieresis or umlaut mark
    "Iacute"	=>	"I\\*'",	#   capital I, acute accent
    "iacute"	=>	"i\\*'",	#   small i, acute accent
    "Icirc"	=>	"I\\*^",	#   capital I, circumflex accent
    "icirc"	=>	"i\\*^",	#   small i, circumflex accent
    "Igrave"	=>	"I\\*`",	#   capital I, grave accent
    "igrave"	=>	"i\\*`",	#   small i, grave accent
    "Iuml"	=>	"I\\*:",	#   capital I, dieresis or umlaut mark
    "iuml"	=>	"i\\*:",	#   small i, dieresis or umlaut mark
    "Ntilde"	=>	'N\*~',		#   capital N, tilde
    "ntilde"	=>	'n\*~',		#   small n, tilde
    "Oacute"	=>	"O\\*'",	#   capital O, acute accent
    "oacute"	=>	"o\\*'",	#   small o, acute accent
    "Ocirc"	=>	"O\\*^",	#   capital O, circumflex accent
    "ocirc"	=>	"o\\*^",	#   small o, circumflex accent
    "Ograve"	=>	"O\\*`",	#   capital O, grave accent
    "ograve"	=>	"o\\*`",	#   small o, grave accent
    "Oslash"	=>	"O\\*/",	#   capital O, slash
    "oslash"	=>	"o\\*/",	#   small o, slash
    "Otilde"	=>	"O\\*~",	#   capital O, tilde
    "otilde"	=>	"o\\*~",	#   small o, tilde
    "Ouml"	=>	"O\\*:",	#   capital O, dieresis or umlaut mark
    "ouml"	=>	"o\\*:",	#   small o, dieresis or umlaut mark
    "szlig"	=>	'\*8',		#   small sharp s, German (sz ligature)
    "THORN"	=>	'\\*(Th',	#   capital THORN, Icelandic
    "thorn"	=>	'\\*(th',,	#   small thorn, Icelandic
    "Uacute"	=>	"U\\*'",	#   capital U, acute accent
    "uacute"	=>	"u\\*'",	#   small u, acute accent
    "Ucirc"	=>	"U\\*^",	#   capital U, circumflex accent
    "ucirc"	=>	"u\\*^",	#   small u, circumflex accent
    "Ugrave"	=>	"U\\*`",	#   capital U, grave accent
    "ugrave"	=>	"u\\*`",	#   small u, grave accent
    "Uuml"	=>	"U\\*:",	#   capital U, dieresis or umlaut mark
    "uuml"	=>	"u\\*:",	#   small u, dieresis or umlaut mark
    "Yacute"	=>	"Y\\*'",	#   capital Y, acute accent
    "yacute"	=>	"y\\*'",	#   small y, acute accent
    "yuml"	=>	"y\\*:",	#   small y, dieresis or umlaut mark
);
}
d467 1
d469 1
@


1.2
log
@perl 5.004_04
@
text
@d5 1
d17 1
d320 7
a326 3
if ($^O ne 'plan9') {
  ($version,$patch) =
    `\PATH=.:..:\$PATH; perl -v` =~ /version (\d\.\d{3})(?:_(\d{2}))?/;
d338 1
d425 6
a430 2
    # Lose ^arch/version/.
    $name =~ s-^[^/]+/\d+\.\d+/--;
d681 3
d753 1
a753 1
	s/([A-Z]<[^<>]*>)/noremap($1)/ge;
d810 1
a810 1
	s/([BI])<([^<>]*)>/font($1) . $2 . font('R')/eg;
d813 1
a813 1
	s/F<([^<>]*)>/I<$1>/g;
d816 4
a819 1
	s/S<([^<>]*)>/nobreak($1)/eg;
d870 1
a870 1
	s/C<([^<>]*)>/noremap("${CFont_embed}${1}\\fR")/eg;
a1066 4
    for $entry (@@entries) {
	print qq("$entry" );
    }
    print "\n";
d1134 4
a1137 1
	    .  " elsewhere in this document "; # terminal space to avoid words running together (pattern used strips terminal spaces)
d1221 1
@


1.1
log
@Initial revision
@
text
@d11 1
d16 3
a18 4
chdir(dirname($0));
($file = basename($0)) =~ s/\.PL$//;
$file =~ s/\.pl$//
	if ($^O eq 'VMS' or $^O eq 'os2');  # "case-forgiving"
d28 5
a32 1
$Config{'startperl'}
a37 2
eval 'exec perl -S $0 "$@@"'
    if 0;
d52 1
d112 4
d208 1
a208 1
you might keep a modification long here.
a234 6
=item high bit char in input stream

(W) You can't use high-bit characters in the input stream,
because the translator uses them for its own nefarious purposes.
Use an HTML entity in angle brackets instead.

d258 1
a258 1
a C<E<lt>E<gt>> directive.  Besides amp, lt, gt, and quot, recognized
d283 1
a283 1
numbering and even/odd paging, at least one some versions of man(7).
d296 1
a296 2
You shouldn't use 8-bit characters in the input stream, as these
will be used by the translator.
d313 1
d315 9
a323 1
($version,$patch) = `\PATH=.:..:\$PATH; perl -v` =~ /version (\d\.\d{3}(?: +)(?:\S+)?)(?:.*patchlevel (\d\S*))?/s;
d341 1
d354 1
d365 1
d374 2
a375 1
$section = $opt_section || ($ARGV[0] =~ /\.pm$/ ? 3 : $DEF_SECTION);
d378 1
a391 1
$section = $opt_section || $DEF_SECTION;
d403 21
a423 2
$name = uc($name) if $section =~ /^1/;
$name =~ s/\.[^.]*$//;
d435 9
a444 1
		%namedesc = split /\s+-\s+/;
d448 2
a449 1
	    die "$0: Invalid man page - 1st pod line is not NAME in $ARGV[0]\n";
d451 1
a451 1
	die "$0: Invalid man page - no documentation in $ARGV[0]\n";
d504 8
d514 4
d524 4
d530 4
a558 1
.IX Title "$name $section"
d562 2
d566 1
a566 1
    print qq(.IX Name "$name - $desc"\n);
d668 2
d675 9
d708 16
d732 4
d749 1
a749 1
	# func(n) is a reference to a man page
d751 1
a751 1
	    (\w+)
d753 1
a753 3
		\(
		    [^\s,\051]+
		\)
d758 1
a758 1
	s/(\s+)([\$\@@%][\w:]+)/${1}C<$2>/g;
d848 1
a848 1
	}gex;
d863 11
d875 1
a875 1
	    &escapes;
d888 1
a888 1
	    print qq{.IX Header "$_"\n};
d892 1
a892 1
	    print qq{.IX Subsection "$_"\n};
d905 5
d911 1
a911 1
	    print qq{.IX Item "$_"\n};
d924 1
a924 1
	&escapes;
d936 1
a936 1
if (%wanna_see) {
d944 2
d958 1
d971 10
d982 2
a983 2
	s/(^|\s)(['"])/noremap("$1\\*(L$2")/ge;
	s/(['"])($|[\-\s,;\\!?.])/noremap("\\*(R$1$2")/ge;
d1033 1
a1033 7
     local($_,$prev) = @@_;
     if ( /^\W+$/ && !/^\$./ ) {
 	($prev && "\n") . noremap(qq{.CQ $_ \n\\&});
 	# what about $" ?
     } else {
 	noremap(qq{${CFont_embed}$_\\fR});
     }
d1049 1
a1049 1
    print ".IX Xref ";
d1069 2
a1070 3
    if ( /[\200-\377]/ ) {
	warn "$0: high bit char in input stream in paragraph $. of $ARGV\n";
    }
d1085 5
a1089 2
	    E<	
	    ( [A-Za-z]+ )	
d1092 6
a1097 3
	 do {	
	     exists $HTML_Escapes{$1}
		? do { $HTML_Escapes{$1} }
d1108 1
d1121 2
a1122 1
	    .  " elsewhere in this document";
@


1.1.1.1
log
@Import of Perl 5.003 into the tree.  Makefile.bsd-wrapper and
config.sh.OpenBSD are the only local changes.
@
text
@@


1.1.1.2
log
@perl5.005_03
@
text
@a4 1
use Cwd;
a10 1
#  $man3ext
d15 4
a18 4
$origdir = cwd;
chdir dirname($0);
$file = basename($0, '.PL');
$file .= '.com' if $^O eq 'VMS';
d28 1
a28 5
$Config{startperl}
    eval 'exec $Config{perlpath} -S \$0 \${1+"\$@@"}'
	if \$running_under_some_shell;

\$DEF_PM_SECTION = '$Config{man3ext}' || '3';
d34 2
a49 1
[ B<--lax> ]
a108 4
=item lax

Don't complain when required sections aren't present.

d201 1
a201 1
you might keep a modification log here.
d228 6
d257 1
a257 1
a C<EE<lt>E<gt>> directive.  Besides amp, lt, gt, and quot, recognized
d282 1
a282 1
numbering and even/odd paging, at least on some versions of man(7).
d295 2
a296 1
None at this time.
a312 1
@@Indices = ();
d314 1
a314 13
# We try first to get the version number from a local binary, in case we're
# running an installed version of Perl to produce documentation from an
# uninstalled newer version's pod files.
if ($^O ne 'plan9' and $^O ne 'dos' and $^O ne 'os2' and $^O ne 'MSWin32') {
  my $perl = (-x './perl' && -f './perl' ) ?
                 './perl' :
                 ((-x '../perl' && -f '../perl') ?
                      '../perl' :
                      '');
  ($version,$patch) = `$perl -e 'print $]'` =~ /^(\d\.\d{3})(\d{2})?/ if $perl;
}
# No luck; we'll just go with the running Perl's version
($version,$patch) = $] =~ /^(.{5})(\d{2})?/ unless $version;
a322 1
    $year += 1900;
a331 1
$DEF_LAX = 0;
a343 1
	--lax                 (default NOT)
a353 1
	lax
d362 1
a362 2
$section = $opt_section || ($ARGV[0] =~ /\.pm$/
				? $DEF_PM_SECTION : $DEF_SECTION);
a364 1
$lax = $opt_lax || $DEF_LAX;
d378 1
d390 2
a391 25
if ($section =~ /^1/) {
    require File::Basename;
    $name = uc File::Basename::basename($name);
}
$name =~ s/\.(pod|p[lm])$//i;

# Lose everything up to the first of
#     */lib/*perl*	standard or site_perl module
#     */*perl*/lib	from -D prefix=/opt/perl
#     */*perl*/		random module hierarchy
# which works.
$name =~ s-//+-/-g;
if ($name =~ s-^.*?/lib/[^/]*perl[^/]*/--i
	or $name =~ s-^.*?/[^/]*perl[^/]*/lib/--i
	or $name =~ s-^.*?/[^/]*perl[^/]*/--i) {
    # Lose ^site(_perl)?/.
    $name =~ s-^site(_perl)?/--;
    # Lose ^arch/.	(XXX should we use Config? Just for archname?)
    $name =~ s~^(.*-$^O|$^O-.*)/~~o;
    # Lose ^version/.
    $name =~ s-^\d+\.\d+/--;
}

# Translate Getopt/Long to Getopt::Long, etc.
$name =~ s(/)(::)g;
a402 9
                } else {
		    my @@n = split /\s+-+\s+/;
		    if (@@n != 2) {
			$oops++;
			warn "$0: Improper man page - malformed NAME header in paragraph $. of $ARGV[0]\n"
		    }
		    else {
			%namedesc = @@n;
		    }
d404 1
d408 1
a408 2
	    next if /^=pod\b/;  # It is OK to have =pod before NAME
	    die "$0: Invalid man page - 1st pod line is not NAME in $ARGV[0]\n" unless $lax;
d410 1
a410 1
	die "$0: Invalid man page - no documentation in $ARGV[0]\n" unless $lax;
a462 8
'''   \\*(M", \\*(S", \\*(N" and \\*(T" are the equivalent of
'''   \\*(L" and \\*(R", except that they are used on ".xx" lines,
'''   such as .IP and .SH, which do another additional levels of
'''   double-quote interpretation
.ds M" """
.ds S" """
.ds N" """""
.ds T" """""
a464 4
.ds M' '
.ds S' '
.ds N' '
.ds T' '
a470 4
.ds M" ``
.ds S" ''
.ds N" ``
.ds T" ''
a472 4
.ds M' `
.ds S' '
.ds N' `
.ds T' '
d498 1
a501 2
push(@@Indices, qq{.IX Title "$name $section"});

d504 1
a504 1
    push(@@Indices, qq(.IX Name "$name - $desc"\n));
a605 5
$begun = "";

# Unrolling [^A-Z>]|[A-Z](?!<) gives:    // MRE pp 165.
my $nonest = '(?:[^A-Z>]*(?:[A-Z](?!<)[^A-Z>]*)*)';

a610 9
    if ($begun) {
	if (/^=end\s+$begun/) {
            $begun = "";
	}
	elsif ($begun =~ /^(roff|man)$/) {
	    print STDOUT $_;
        }
	next;
    }
a634 16
    if (/^=for\s+(\S+)\s*/s) {
	if ($1 eq "man" or $1 eq "roff") {
	    print STDOUT $',"\n\n";
	} else {
	    # ignore unknown for
	}
	next;
    }
    elsif (/^=begin\s+(\S+)\s*/s) {
	$begun = $1;
	if ($1 eq "man" or $1 eq "roff") {
	    print STDOUT $'."\n\n";
	}
	next;
    }

a642 4
	# protect leading periods and quotes against *roff
	# mistaking them for directives
	s/^(?:[A-Z]<)?[.']/\\&$&/gm;

d646 1
a646 1
	1 while s/([A-Z]<$nonest>)/noremap($1)/ge;
d656 1
a656 1
	# func(n) is a reference to a perl function or a man page
d658 1
a658 1
	    ([:\w]+)
d660 3
a662 1
		\( [^\051]+ \)
d667 1
a667 1
	s/(\s+)([\$\@@%][\w:]+)(?!\()/${1}C<$2>/g;
d705 1
a705 1
	s/([BI])<($nonest)>/font($1) . $2 . font('R')/eg;
d708 1
a708 1
	s/F<($nonest)>/I<$1>/g;
d711 1
a711 4
	s/S<($nonest)>/nobreak($1)/eg;

	# LREF: a la HREF L<show this text|man/section>
	s:L<([^|>]+)\|[^>]+>:$1:g;
d757 1
a757 1
	}gesx; # s in case it goes over multiple lines, so . matches \n
d762 1
a762 1
	s/C<($nonest)>/noremap("${CFont_embed}${1}\\fR")/eg;
a771 11
	$dotlevel = 1;
	if ($Cmd eq 'head1') {
	   $dotlevel = 1;
	}
	elsif ($Cmd eq 'head2') {
	   $dotlevel = 1;
	}
	elsif ($Cmd eq 'item') {
	   $dotlevel = 2;
	}

d773 1
a773 1
	    &escapes($dotlevel);
d786 1
a786 1
      push(@@Indices, qq{.IX Header "$_"\n});
d790 1
a790 1
      push(@@Indices, qq{.IX Subsection "$_"\n});
a802 5
	    # if you know how to get ":s please do
	    s/\\\*\(L"([^"]+?)\\\*\(R"/'$1'/g;
	    s/\\\*\(L"([^"]+?)""/'$1'/g;
	    s/[^"]""([^"]+?)""[^"]/'$1'/g;
	    # here do something about the $" in perlvar?
d804 1
a804 1
      push(@@Indices, qq{.IX Item "$_"\n});
d817 1
a817 1
	&escapes(0);
d829 1
a829 1
if (%wanna_see && !$lax) {
a836 2
foreach (@@Indices) { print "$_\n"; }

a848 1
    my $indot = shift;
a860 10
    my $dotmacroL = 'L';
    my $dotmacroR = 'R';
    if ( $indot == 1 ) {
	$dotmacroL = 'M';
	$dotmacroR = 'S';
    }  
    elsif ( $indot >= 2 ) {
	$dotmacroL = 'N';
	$dotmacroR = 'T';
    }  
d862 2
a863 2
	s/(^|\s)(['"])/noremap("$1\\*($dotmacroL$2")/ge;
	s/(['"])($|[\-\s,;\\!?.])/noremap("\\*($dotmacroR$1$2")/ge;
d913 7
a919 1
    local($_,$prev) = @@_;
d935 5
a939 1
    push @@Indices, ".IX Xref " . join ' ', map {qq("$_")} @@entries;
d955 3
a957 2
	# escape high bit characters in input stream
	s/([\200-\377])/"E<".ord($1).">"/ge;
d972 2
a973 5
	    E<
	    (
	        ( \d + ) 
	        | ( [A-Za-z]+ )	
	    )
d976 3
a978 6
	 do {
	     defined $2
		? chr($2)
		:	
	     exists $HTML_Escapes{$3}
		? do { $HTML_Escapes{$3} }
a988 1
    local $trailing_and = s/and\s+$// ? "and " : "";
a1001 4
    # terminal space to avoid words running together (pattern used
    # strips terminal spaces)
    $retstr .= " " if length $trailing_and;
    $retstr .=  $trailing_and;
a1083 1
chdir $origdir;
@


1.1.1.3
log
@virgin perl 5.6.0
@
text
@d12 1
d32 3
a34 1
        if \$running_under_some_shell;
a40 42
# pod2man -- Convert POD data to formatted *roff input.
# $Id: pod2man.PL,v 1.2 2000/03/16 21:08:23 eagle Exp $
#
# Copyright 1999, 2000 by Russ Allbery <rra@@stanford.edu>
#
# This program is free software; you can redistribute it and/or modify it
# under the same terms as Perl itself.

require 5.004;

use Getopt::Long qw(GetOptions);
use Pod::Man ();
use Pod::Usage qw(pod2usage);

use strict;

# Insert -- into @@ARGV before any single dash argument to hide it from
# Getopt::Long; we want to interpret it as meaning stdin (which Pod::Parser
# does correctly).
my $stdin;
@@ARGV = map { $_ eq '-' && !$stdin++ ? ('--', $_) : $_ } @@ARGV;

# Parse our options, trying to retain backwards compatibility with pod2man
# but allowing short forms as well.  --lax is currently ignored.
my %options;
Getopt::Long::config ('bundling_override');
GetOptions (\%options, 'section|s=s', 'release|r=s', 'center|c=s',
            'date|d=s', 'fixed=s', 'fixedbold=s', 'fixeditalic=s',
            'fixedbolditalic=s', 'official|o', 'lax|l', 'help|h') or exit 1;
pod2usage (0) if $options{help};

# Official sets --center, but don't override things explicitly set.
if ($options{official} && !defined $options{center}) {
    $options{center} = 'Perl Programmers Reference Guide';
}

# Initialize and run the formatter.
my $parser = Pod::Man->new (%options);
$parser->parse_from_file (@@ARGV);

__END__

d43 1
a43 1
pod2man - Convert POD data to formatted *roff input
d47 9
a55 7
pod2man [B<--section>=I<manext>] [B<--release>=I<version>]
[B<--center>=I<string>] [B<--date>=I<string>] [B<--fixed>=I<font>]
[B<--fixedbold>=I<font>] [B<--fixeditalic>=I<font>]
[B<--fixedbolditalic>=I<font>] [B<--official>] [B<--lax>] [I<input>
[I<output>]]

pod2man B<--help>
d59 15
a73 27
B<pod2man> is a front-end for Pod::Man, using it to generate *roff input
from POD source.  The resulting *roff code is suitable for display on a
terminal using nroff(1), normally via man(1), or printing using troff(1).

I<input> is the file to read for POD source (the POD can be embedded in
code).  If I<input> isn't given, it defaults to STDIN.  I<output>, if given,
is the file to which to write the formatted output.  If I<output> isn't
given, the formatted output is written to STDOUT.

B<--section>, B<--release>, B<--center>, B<--date>, and B<--official> can be
used to set the headers and footers to use; if not given, Pod::Man will
assume various defaults.  See below or L<Pod::Man> for details.

B<pod2man> assumes that your *roff formatters have a fixed-width font named
CW.  If yours is called something else (like CR), use B<--fixed> to specify
it.  This generally only matters for troff output for printing.  Similarly,
you can set the fonts used for bold, italic, and bold italic fixed-width
output.

Besides the obvious pod conversions, Pod::Man, and therefore pod2man also
takes care of formatting func(), func(n), and simple variable references
like $foo or @@bar so you don't have to use code escapes for them; complex
expressions like C<$fred{'stuff'}> will still need to be escaped, though.
It also translates dashes that aren't used as hyphens into en dashes, makes
long dashes--like this--into proper em dashes, fixes "paired quotes," and
takes care of several other troff-specific tweaks.  See L<Pod::Man> for
complete information.
d77 68
a144 1
=over 4
d146 2
a147 1
=item B<-c> I<string>, B<--center>=I<string>
d149 1
a149 2
Sets the centered page header to I<string>.  The default is "User
Contributed Perl Documentation", but also see B<--official> below.
d151 1
a151 1
=item B<-d> I<string>, B<--date>=I<string>
d153 1
a153 3
Set the left-hand footer string to this value.  By default, the modification
date of the input file will be used, or the current date if input comes from
STDIN.
d155 1
a155 1
=item B<--fixed>=I<font>
d157 1
a157 2
The fixed-width font to use for vertabim text and code.  Defaults to CW.
Some systems may want CR instead.  Only matters for troff(1) output.
d159 1
a159 1
=item B<--fixedbold>=I<font>
d161 1
a161 2
Bold version of the fixed-width font.  Defaults to CB.  Only matters for
troff(1) output.
d163 1
a163 1
=item B<--fixeditalic>=I<font>
d165 1
a165 3
Italic version of the fixed-width font (actually, something of a misnomer,
since most fixed-width fonts only have an oblique version, not an italic
version).  Defaults to CI.  Only matters for troff(1) output.
d167 1
a167 1
=item B<--fixedbolditalic>=I<font>
d169 1
a169 4
Bold italic (probably actually oblique) version of the fixed-width font.
Pod::Man doesn't assume you have this, and defaults to CB.  Some systems
(such as Solaris) have this font available as CX.  Only matters for troff(1)
output.
d171 1
a171 1
=item B<-h>, B<--help>
d173 1
a173 1
Print out usage information.
d175 2
a176 1
=item B<-l>, B<--lax>
d178 1
a178 2
Don't complain when required sections are missing.  Not currently used, as
POD checking functionality is not yet implemented in Pod::Man.
d180 1
a180 1
=item B<-o>, B<--official>
d182 7
a188 2
Set the default header to indicate that this page is part of the standard
Perl release, if B<--center> is not also given.
d190 1
a190 1
=item B<-r>, B<--release>
d192 2
a193 5
Set the centered footer.  By default, this is the version of Perl you run
B<pod2man> under.  Note that some system an macro sets assume that the
centered footer will be a modification date and will prepend something like
"Last modified: "; if this is the case, you may want to set B<--release> to
the last modified date and B<--date> to the version number.
d195 1
a195 1
=item B<-s>, B<--section>
d197 7
a203 8
Set the section for the C<.TH> macro.  The standard section numbering
convention is to use 1 for user commands, 2 for system calls, 3 for
functions, 4 for devices, 5 for file formats, 6 for games, 7 for
miscellaneous information, and 8 for administrator commands.  There is a lot
of variation here, however; some systems (like Solaris) use 4 for file
formats, 5 for miscellaneous information, and 7 for devices.  Still others
use 1m instead of 8, or some mix of both.  About the only section numbers
that are reliably consistent are 1, 2, and 3.
d205 1
a205 2
By default, section 1 will be used unless the file ends in .pm in which case
section 3 will be selected.
d207 1
a207 1
=back
d209 2
a210 1
=head1 DIAGNOSTICS
d212 1
a212 2
If B<pod2man> fails with errors, see L<Pod::Man> and L<Pod::Parser> for
information about what those errors might mean.
d217 1
a217 1
    pod2man SomeModule.pm /usr/perl/man/man3/SomeModule.3
d220 9
a228 3
If you would like to print out a lot of man page continuously, you probably
want to set the C and D registers to set contiguous page numbering and
even/odd paging, at least on some versions of man(7).
d230 2
a231 1
    troff -man -rC1 -rD1 perl.1 perldata.1 perlsyn.1 ...
d233 1
a233 1
To get index entries on stderr, turn on the F register, as in:
d235 1
a235 1
    troff -man -rF1 perl.1
d237 1
a237 3
The indexing merely outputs messages via C<.tm> for each major page,
section, subsection, item, and any C<XE<lt>E<gt>> directives.  See
L<Pod::Man> for more details.
d239 38
a276 1
=head1 BUGS
a277 1
Lots of this documentation is duplicated from L<Pod::Man>.
d279 1
a279 1
POD checking and the corresponding B<--lax> option don't work yet.
d283 7
a289 2
For those not sure of the proper layout of a man page, here are some notes
on writing a proper man page.
d291 3
a293 19
The name of the program being documented is conventionally written in bold
(using BE<lt>E<gt>) wherever it occurs, as are all program options.
Arguments should be written in italics (IE<lt>E<gt>).  Functions are
traditionally written in italics; if you write a function as function(),
Pod::Man will take care of this for you.  Literal code or commands should
be in CE<lt>E<gt>.  References to other man pages should be in the form
C<manpage(section)>, and Pod::Man will automatically format those
appropriately.  As an exception, it's traditional not to use this form when
referring to module documentation; use C<LE<lt>Module::NameE<gt>> instead.

References to other programs or functions are normally in the form of man
page references so that cross-referencing tools can provide the user with
links and the like.  It's possible to overdo this, though, so be careful not
to clutter your documentation with too much markup.

The major headers should be set out using a C<=head1> directive, and are
historically written in the rather startling ALL UPPER CASE format, although
this is not mandatory.  Minor headers may be included using C<=head2>, and
are typically in mixed case.
a294 1
The standard sections of a manual page are:
d296 3
a298 1
=over 4
d300 1
a300 1
=item NAME
d302 3
a304 2
Mandatory section; should be a comma-separated list of programs or functions
documented by this podpage, such as:
d306 1
a306 1
    foo, bar - programs to do something
d308 2
a309 6
Manual page indexers are often extremely picky about the format of this
section, so don't put anything in it except this line.  A single dash, and
only a single dash, should separate the list of programs or functions from
the description.  Functions should not be qualified with C<()> or the like.
The description should ideally fit on a single line, even if a man program
replaces the dash with a few tabs.
d311 1
a311 1
=item SYNOPSIS
d313 19
a331 2
A short usage summary for programs and functions.  This section is mandatory
for section 3 pages.
a332 1
=item DESCRIPTION
d334 7
a340 4
Extended description and discussion of the program or functions, or the body
of the documentation for man pages that document something else.  If
particularly long, it's a good idea to break this up into subsections
C<=head2> directives like:
d342 1
a342 1
    =head2 Normal Usage
d344 20
a363 1
    =head2 Advanced Features
d365 21
a385 1
    =head2 Writing Configuration Files
d387 1
a387 1
or whatever is appropriate for your documentation.
d389 9
a397 1
=item OPTIONS
d399 1
a399 20
Detailed description of each of the command-line options taken by the
program.  This should be separate from the description for the use of things
like L<Pod::Usage|Pod::Usage>.  This is normally presented as a list, with
each option as a separate C<=item>.  The specific option string should be
enclosed in BE<lt>E<gt>.  Any values that the option takes should be
enclosed in IE<lt>E<gt>.  For example, the section for the option
B<--section>=I<manext> would be introduced with:

    =item B<--section>=I<manext>

Synonymous options (like both the short and long forms) are separated by a
comma and a space on the same C<=item> line, or optionally listed as their
own item with a reference to the canonical name.  For example, since
B<--section> can also be written as B<-s>, the above would be:

    =item B<-s> I<manext>, B<--section>=I<manext>

(Writing the short option first is arguably easier to read, since the long
option is long enough to draw the eye to it anyway and the short option can
otherwise get lost in visual noise.)
d401 5
a405 1
=item RETURN VALUE
a406 4
What the program or function returns, if successful.  This section can be
omitted for programs whose precise exit codes aren't important, provided
they return 0 on success as is standard.  It should always be present for
functions.
d408 7
a414 1
=item ERRORS
d416 16
a431 7
Exceptions, error return codes, exit statuses, and errno settings.
Typically used for function documentation; program documentation uses
DIAGNOSTICS instead.  The general rule of thumb is that errors printed to
STDOUT or STDERR and intended for the end user are documented in DIAGNOSTICS
while errors passed internal to the calling program and intended for other
programmers are documented in ERRORS.  When documenting a function that sets
errno, a full list of the possible errno values should be given here.
d433 2
a434 1
=item DIAGNOSTICS
d436 30
a465 8
All possible messages the program can print out--and what they mean.  You
may wish to follow the same documentation style as the Perl documentation;
see perldiag(1) for more details (and look at the POD source as well).

If applicable, please include details on what the user should do to correct
the error; documenting an error as indicating "the input buffer is too
small" without telling the user how to increase the size of the input buffer
(or at least telling them that it isn't possible) aren't very useful.
d467 112
a578 1
=item EXAMPLES
d580 367
a946 7
Give some example uses of the program or function.  Don't skimp; users often
find this the most useful part of the documentation.  The examples are
generally given as verbatim paragraphs.

Don't just present an example without explaining what it does.  Adding a
short paragraph saying what the example will do can increase the value of
the example immensely.
d948 1
a948 1
=item ENVIRONMENT
d950 2
a951 2
Environment variables that the program cares about, normally presented as a
list using C<=over>, C<=item>, and C<=back>.  For example:
d953 7
a959 1
    =over 6
d961 1
a961 1
    =item HOME
d963 2
a964 2
    Used to determine the user's home directory.  F<.foorc> in this
    directory is read for configuration details, if it exists.
d966 1
a966 1
    =back
d968 5
a972 2
Since environment variables are normally in all uppercase, no additional
special formatting is generally needed; they're glaring enough as it is.
d974 2
a975 1
=item FILES
d977 1
a977 3
All files used by the program or function, normally presented as a list, and
what it uses them for.  File names should be enclosed in FE<lt>E<gt>.  It's
particularly important to document files that will be potentially modified.
d979 2
a980 1
=item CAVEATS
d982 61
a1042 1
Things to take special care with, sometimes called WARNINGS.
d1044 2
a1045 1
=item BUGS
d1047 6
a1052 1
Things that are broken or just don't work quite right.
d1054 8
a1061 1
=item RESTRICTIONS
d1063 6
a1068 1
Bugs you don't plan to fix.  :-)
d1070 4
a1073 1
=item NOTES
d1075 5
a1079 1
Miscellaneous commentary.
d1081 4
a1084 1
=item SEE ALSO
d1086 2
a1087 7
Other man pages to check out, like man(1), man(7), makewhatis(8), or
catman(8).  Normally a simple list of man pages separated by commas, or a
paragraph giving the name of a reference work.  Man page references, if they
use the standard C<name(section)> form, don't have to be enclosed in
LE<lt>E<gt>, but other things in this section probably should be when
appropriate.  You may need to use the C<LE<lt>...|...E<gt>> syntax to keep
B<pod2man> and B<pod2text> from being too verbose; see perlpod(1).
d1089 1
a1089 1
If the package has a web site, include a URL here.
d1091 2
a1092 1
=item AUTHOR
d1094 24
a1117 5
Who wrote it (use AUTHORS for multiple people).  Including your current
e-mail address (or some e-mail address to which bug reports should be sent)
so that users have a way of contacting you is a good idea.  Remember that
program documentation tends to roam the wild for far longer than you expect
and pick an e-mail address that's likely to last if possible.
d1119 20
a1138 1
=item HISTORY
d1140 1
a1140 2
Programs derived from other sources sometimes have this, or you might keep a
modification log here.
d1142 1
a1142 1
=back
d1144 71
a1214 45
In addition, some systems use CONFORMING TO to note conformance to relevant
standards and MT-LEVEL to note safeness for use in threaded programs or
signal handlers.  These headings are primarily useful when documenting parts
of a C library.  Documentation of object-oriented libraries or modules may
use CONSTRUCTORS and METHODS sections for detailed documentation of the
parts of the library and save the DESCRIPTION section for an overview; other
large modules may use FUNCTIONS for similar reasons.  Some people use
OVERVIEW to summarize the description if it's quite long.  Sometimes there's
an additional COPYRIGHT section at the bottom, for licensing terms.
AVAILABILITY is sometimes added, giving the canonical download site for the
software or a URL for updates.

Section ordering varies, although NAME should I<always> be the first section
(you'll break some man page systems otherwise), and NAME, SYNOPSIS,
DESCRIPTION, and OPTIONS generally always occur first and in that order if
present.  In general, SEE ALSO, AUTHOR, and similar material should be left
for last.  Some systems also move WARNINGS and NOTES to last.  The order
given above should be reasonable for most purposes.

Finally, as a general note, try not to use an excessive amount of markup.
As documented here and in L<Pod::Man>, you can safely leave Perl variables,
function names, man page references, and the like unadorned by markup and
the POD translators will figure it out for you.  This makes it much easier
to later edit the documentation.  Note that many existing translators
(including this one currently) will do the wrong thing with e-mail addresses
or URLs when wrapped in LE<lt>E<gt>, so don't do that.

For additional information that may be more accurate for your specific
system, see either man(5) or man(7) depending on your system manual section
numbering conventions.

=head1 SEE ALSO

L<Pod::Man|Pod::Man>, L<Pod::Parser|Pod::Parser>, man(1), nroff(1),
troff(1), man(7)

The man page documenting the an macro set may be man(5) instead of man(7) on
your system.

=head1 AUTHOR

Russ Allbery E<lt>rra@@stanford.eduE<gt>, based I<very> heavily on the
original B<pod2man> by Larry Wall and Tom Christiansen.  Large portions of
this documentation, particularly the sections on the anatomy of a proper man
page, are taken from the B<pod2man> documentation by Tom.
a1215 1
=cut
a1216 1
#'# (cperl-mode)
@


1.1.1.4
log
@stock perl 5.6.1
@
text
@d39 1
a39 1
# $Id: pod2man.PL,v 1.4 2000/11/19 05:47:46 eagle Exp $
d66 1
a66 2
            'fixedbolditalic=s', 'official|o', 'quotes|q=s', 'lax|l',
            'help|h') or exit 1;
d74 1
a74 2
# Initialize and run the formatter, pulling a pair of input and output off
# at a time.
d76 2
a77 6
my @@files;
do {
    @@files = splice (@@ARGV, 0, 2);
    $parser->parse_from_file (@@files);
} while (@@ARGV);
  
d89 2
a90 2
[B<--fixedbolditalic>=I<font>] [B<--official>] [B<--lax>]
[B<--quotes>=I<quotes>] [I<input> [I<output>] ...]
d103 1
a103 4
given, the formatted output is written to STDOUT.  Several POD files can be
processed in the same B<pod2man> invocation (saving module load and compile
times) by providing multiple pairs of I<input> and I<output> files on the
command line.
a174 13

=item B<-q> I<quotes>, B<--quotes>=I<quotes>

Sets the quote marks used to surround CE<lt>> text to I<quotes>.  If
I<quotes> is a single character, it is used as both the left and right
quote; if I<quotes> is two characters, the first character is used as the
left quote and the second as the right quoted; and if I<quotes> is four
characters, the first two are used as the left quote and the second two as
the right quote.

I<quotes> may also be set to the special value C<none>, in which case no
quote marks are added around CE<lt>> text (but the font is still changed for
troff output).
@


1.1.1.5
log
@stock perl 5.8.0 from CPAN
@
text
@d39 1
a39 1
# $Id: pod2man.PL,v 1.10 2002/07/15 05:45:56 eagle Exp $
d41 1
a41 1
# Copyright 1999, 2000, 2001 by Russ Allbery <rra@@stanford.edu>
d43 1
a43 1
# This program is free software; you may redistribute it and/or modify it
a53 3
# Silence -w warnings.
use vars qw($running_under_some_shell);

d60 2
a61 2
# Parse our options, trying to retain backwards compatibility with pod2man but
# allowing short forms as well.  --lax is currently ignored.
d66 2
a67 2
            'fixedbolditalic=s', 'name|n=s', 'official|o', 'quotes|q=s',
            'lax|l', 'help|h', 'verbose|v') or exit 1;
d75 2
a76 10
# Verbose is only our flag, not a Pod::Man flag.
my $verbose = $options{verbose};
delete $options{verbose};

# This isn't a valid Pod::Man option and is only accepted for backwards
# compatibility.
delete $options{lax};

# Initialize and run the formatter, pulling a pair of input and output off at
# a time.
a80 1
    print "  $files[1]\n" if $verbose;
d83 1
a83 1

d95 2
a96 3
[B<--fixedbolditalic>=I<font>] [B<--name>=I<name>] [B<--official>]
[B<--lax>] [B<--quotes>=I<quotes>] [B<--verbose>]
[I<input> [I<output>] ...]
d177 2
a178 16
No longer used.  B<pod2man> used to check its input for validity as a manual
page, but this should now be done by L<podchecker(1)> instead.  Accepted for
backwards compatibility; this option no longer does anything.

=item B<-n> I<name>, B<--name>=I<name>

Set the name of the manual page to I<name>.  Without this option, the manual
name is set to the uppercased base name of the file being converted unless
the manual section is 3, in which case the path is parsed to see if it is a
Perl module path.  If it is, a path like C<.../lib/Pod/Man.pm> is converted
into a name like C<Pod::Man>.  This option, if given, overrides any
automatic determination of the name.

Note that this option is probably not useful when converting multiple POD
files at once.  The convention for Unix man pages for commands is for the
man page title to be in all-uppercase even if the command isn't.
a219 4
=item B<-v>, B<--verbose>

Print out the name of each output file as it is being generated.

d251 2
d422 3
a424 5
LE<lt>E<gt> (although it's recommended), but other things in this section
probably should be when appropriate.

If the package has a mailing list, include a URL or subscription
instructions here.
a435 17
=item COPYRIGHT AND LICENSE

For copyright

    Copyright YEAR(s) by YOUR NAME(s)

(No, (C) is not needed.  No, "all rights reserved" is not needed.)

For licensing the easiest way is to use the same licensing as Perl itself:

    This library is free software; you may redistribute it and/or modify
    it under the same terms as Perl itself.

This makes it easy for people to use your module with Perl.  Note that
this licensing is neither an endorsement or a requirement, you are of
course free to choose any licensing.

d438 2
a439 3
Programs derived from other sources sometimes have this, or you might keep
a modification log here.  If the log gets overly long or detailed,
consider maintaining it in a separate file, though.
d450 4
a453 1
OVERVIEW to summarize the description if it's quite long.
d471 2
a472 2
system, see either L<man(5)> or L<man(7)> depending on your system manual
section numbering conventions.
d476 2
a477 2
L<Pod::Man>, L<Pod::Parser>, L<man(1)>, L<nroff(1)>, L<podchecker(1)>,
L<troff(1)>, L<man(7)>
d479 2
a480 6
The man page documenting the an macro set may be L<man(5)> instead of
L<man(7)> on your system.

The current version of this script is always available from its web site at
L<http://www.eyrie.org/~eagle/software/podlators/>.  It is also part of the
Perl core distribution as of 5.6.0.
d484 3
a486 3
Russ Allbery <rra@@stanford.edu>, based I<very> heavily on the original
B<pod2man> by Larry Wall and Tom Christiansen.  Large portions of this
documentation, particularly the sections on the anatomy of a proper man
a487 7

=head1 COPYRIGHT AND LICENSE

Copyright 1999, 2000, 2001 by Russ Allbery <rra@@stanford.edu>.

This program is free software; you may redistribute it and/or modify it
under the same terms as Perl itself.
@


1.1.1.6
log
@Import of stock perl 5.8.5
@
text
@d39 1
a39 1
# $Id: pod2man.PL,v 1.7 2003/12/03 03:02:47 millert Exp $
d67 1
a67 1
GetOptions (\%options, 'section|s=s', 'release|r:s', 'center|c=s',
@


1.1.1.7
log
@perl 5.8.6 from CPAN
@
text
@d39 1
a39 1
# $Id: pod2man.PL,v 1.10 2002/07/15 05:45:56 eagle Exp $
@


1.1.1.8
log
@import perl 5.10.0 from CPAN
@
text
@d39 1
a39 1
# $Id: pod2man.PL,v 1.16 2006-01-21 01:53:55 eagle Exp $
d41 1
a41 1
# Copyright 1999, 2000, 2001, 2004, 2006 by Russ Allbery <rra@@stanford.edu>
d58 2
a59 1
# Getopt::Long; we want to interpret it as meaning stdin.
d104 1
a104 1
pod2man [B<--section>=I<manext>] [B<--release>[=I<version>]]
d255 1
a255 1
If B<pod2man> fails with errors, see L<Pod::Man> and L<Pod::Simple> for
d445 14
a466 6
=item HISTORY

Programs derived from other sources sometimes have this, or you might keep
a modification log here.  If the log gets overly long or detailed,
consider maintaining it in a separate file, though.

d484 1
a484 1
=item SEE ALSO
d486 3
a488 11
Other man pages to check out, like man(1), man(7), makewhatis(8), or
catman(8).  Normally a simple list of man pages separated by commas, or a
paragraph giving the name of a reference work.  Man page references, if they
use the standard C<name(section)> form, don't have to be enclosed in
LE<lt>E<gt> (although it's recommended), but other things in this section
probably should be when appropriate.

If the package has a mailing list, include a URL or subscription
instructions here.

If the package has a web site, include a URL here.
d514 1
a514 1
when wrapped in LE<lt>E<gt>, so don't do that.
d522 1
a522 1
L<Pod::Man>, L<Pod::Simple>, L<man(1)>, L<nroff(1)>, L<podchecker(1)>,
d541 1
a541 1
Copyright 1999, 2000, 2001, 2004, 2006 by Russ Allbery <rra@@stanford.edu>.
@


1.1.1.9
log
@import perl 5.10.1
@
text
@d39 1
d41 1
a41 1
# Copyright 1999, 2000, 2001, 2004, 2006, 2008 Russ Allbery <rra@@stanford.edu>
d62 1
a62 1
# Parse our options, trying to retain backward compatibility with pod2man but
a64 1
$options{errors} = 'pod';
d66 4
a69 4
GetOptions (\%options, 'center|c=s', 'date|d=s', 'fixed=s', 'fixedbold=s',
            'fixeditalic=s', 'fixedbolditalic=s', 'help|h', 'lax|l',
            'name|n=s', 'official|o', 'quotes|q=s', 'release|r:s',
            'section|s=s', 'stderr', 'verbose|v', 'utf8|u') or exit 1;
d81 1
a81 1
# This isn't a valid Pod::Man option and is only accepted for backward
a100 4
=for stopwords
en em --stderr stderr --utf8 UTF-8 overdo markup MT-LEVEL Allbery Solaris
URL troff troff-specific formatters uppercased Christiansen

d103 6
a108 6
pod2man [B<--center>=I<string>] [B<--date>=I<string>]
    [B<--fixed>=I<font>] [B<--fixedbold>=I<font>] [B<--fixeditalic>=I<font>]
    [B<--fixedbolditalic>=I<font>] [B<--name>=I<name>] [B<--official>]
    [B<--quotes>=I<quotes>] [B<--release>[=I<version>]]
    [B<--section>=I<manext>] [B<--stderr>] [B<--utf8>] [B<--verbose>]
    [I<input> [I<output>] ...]
d119 6
a124 6
code).  If I<input> isn't given, it defaults to C<STDIN>.  I<output>, if
given, is the file to which to write the formatted output.  If I<output>
isn't given, the formatted output is written to C<STDOUT>.  Several POD
files can be processed in the same B<pod2man> invocation (saving module
load and compile times) by providing multiple pairs of I<input> and
I<output> files on the command line.
d126 2
a127 2
B<--section>, B<--release>, B<--center>, B<--date>, and B<--official> can
be used to set the headers and footers to use; if not given, Pod::Man will
d130 5
a134 5
B<pod2man> assumes that your *roff formatters have a fixed-width font
named C<CW>.  If yours is called something else (like C<CR>), use
B<--fixed> to specify it.  This generally only matters for troff output
for printing.  Similarly, you can set the fonts used for bold, italic, and
bold italic fixed-width output.
d158 1
a158 1
C<STDIN>.
d162 2
a163 3
The fixed-width font to use for verbatim text and code.  Defaults to
C<CW>.  Some systems may want C<CR> instead.  Only matters for troff(1)
output.
d167 2
a168 2
Bold version of the fixed-width font.  Defaults to C<CB>.  Only matters
for troff(1) output.
d174 1
a174 1
version).  Defaults to C<CI>.  Only matters for troff(1) output.
d179 3
a181 3
Pod::Man doesn't assume you have this, and defaults to C<CB>.  Some
systems (such as Solaris) have this font available as C<CX>.  Only matters
for troff(1) output.
d189 3
a191 3
No longer used.  B<pod2man> used to check its input for validity as a
manual page, but this should now be done by L<podchecker(1)> instead.
Accepted for backward compatibility; this option no longer does anything.
d243 2
a244 31
By default, section 1 will be used unless the file ends in C<.pm>, in
which case section 3 will be selected.

=item B<--stderr>

By default, B<pod2man> puts any errors detected in the POD input in a POD
ERRORS section in the output manual page.  If B<--stderr> is given, errors
are sent to standard error instead and the POD ERRORS section is
suppressed.

=item B<-u>, B<--utf8>

By default, B<pod2man> produces the most conservative possible *roff
output to try to ensure that it will work with as many different *roff
implementations as possible.  Many *roff implementations cannot handle
non-ASCII characters, so this means all non-ASCII characters are converted
either to a *roff escape sequence that tries to create a properly accented
character (at least for troff output) or to C<X>.

This option says to instead output literal UTF-8 characters.  If your
*roff implementation can handle it, this is the best output format to use
and avoids corruption of documents containing non-ASCII characters.
However, be warned that *roff source with literal UTF-8 characters is not
supported by many implementations and may even result in segfaults and
other bad behavior.

Be aware that, when using this option, the input encoding of your POD
source must be properly declared unless it is US-ASCII or Latin-1.  POD
input without an C<=encoding> command will be assumed to be in Latin-1,
and if it's actually in UTF-8, the output will be double-encoded.  See
L<perlpod(1)> for more information on the C<=encoding> command.
d269 1
a269 1
To get index entries on C<STDERR>, turn on the F register, as in:
d313 1
a313 1
documented by this POD page, such as:
d379 4
a382 5
C<STDOUT> or C<STDERR> and intended for the end user are documented in
DIAGNOSTICS while errors passed internal to the calling program and
intended for other programmers are documented in ERRORS.  When documenting
a function that sets errno, a full list of the possible errno values
should be given here.
d521 2
a522 2
L<Pod::Man>, L<Pod::Simple>, L<man(1)>, L<nroff(1)>, L<perlpod(1)>,
L<podchecker(1)>, L<troff(1)>, L<man(7)>
d540 1
a540 2
Copyright 1999, 2000, 2001, 2004, 2006, 2008 Russ Allbery
<rra@@stanford.edu>.
@


1.1.1.10
log
@Perl 5.12.2 from CPAN
@
text
@d354 1
a354 2
the description.  Do not use any markup such as CE<lt>E<gt> or
BE<lt>E<gt>.  Functions should not be qualified with C<()> or the like.
@


