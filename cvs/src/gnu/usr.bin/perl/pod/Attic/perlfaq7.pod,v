head	1.12;
access;
symbols
	OPENBSD_5_3:1.11.0.10
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.8
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.6
	OPENBSD_5_0:1.11.0.4
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.2
	OPENBSD_4_9_BASE:1.11
	PERL_5_12_2:1.1.1.11
	OPENBSD_4_8:1.10.0.4
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.2
	OPENBSD_4_7_BASE:1.10
	PERL_5_10_1:1.1.1.10
	OPENBSD_4_6:1.9.0.6
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.2
	OPENBSD_4_5_BASE:1.9
	PERL_5_10_0:1.1.1.9
	OPENBSD_4_4:1.8.0.10
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.8
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.6
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.4
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.2
	OPENBSD_4_0_BASE:1.8
	PERL_5_8_8:1.1.1.8
	OPENBSD_3_9:1.7.0.6
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.4
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.2
	OPENBSD_3_7_BASE:1.7
	PERL_5_8_6:1.1.1.7
	OPENBSD_3_6:1.6.0.4
	OPENBSD_3_6_BASE:1.6
	PERL_5_8_5:1.1.1.6
	PERL_5_8_3:1.1.1.5
	OPENBSD_3_5:1.6.0.2
	OPENBSD_3_5_BASE:1.6
	PERL_5_8_2:1.1.1.5
	OPENBSD_3_4:1.5.0.4
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.5.0.2
	OPENBSD_3_3_BASE:1.5
	PERL_5_8_0:1.1.1.4
	OPENBSD_3_2:1.4.0.6
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.4
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4
	PERL_5_6_1:1.1.1.3
	OPENBSD_2_9:1.3.0.6
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	PERL_5_6_0:1.1.1.2
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	PERL_500503:1.1.1.1
	CPAN:1.1.1
	OPENBSD_2_5:1.1.0.6
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.4
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.2
	OPENBSD_2_3_BASE:1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.12
date	2013.03.25.20.40.58;	author sthen;	state dead;
branches;
next	1.11;

1.11
date	2010.09.24.15.07.03;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2009.10.12.18.24.47;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2008.09.29.17.36.16;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2006.03.28.19.23.10;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2005.01.15.21.30.36;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2003.12.03.03.02.45;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2002.10.27.22.25.33;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2001.05.24.18.35.54;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.06.17.07.27;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	99.04.29.22.52.12;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	97.11.30.07.59.11;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.29.22.40.44;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2000.04.06.16.10.24;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2001.05.24.18.24.36;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2002.10.27.22.15.04;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2003.12.03.02.44.21;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2004.08.09.17.48.13;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2005.01.15.21.17.53;	author millert;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2006.03.28.18.49.18;	author millert;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2008.09.29.17.18.51;	author millert;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	2009.10.12.18.10.38;	author millert;	state Exp;
branches;
next	1.1.1.11;

1.1.1.11
date	2010.09.24.14.49.08;	author millert;	state Exp;
branches;
next	;


desc
@perl 5.004_04
@


1.12
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@=head1 NAME

perlfaq7 - General Perl Language Issues

=head1 DESCRIPTION

This section deals with general Perl language issues that don't
clearly fit into any of the other sections.

=head2 Can I get a BNF/yacc/RE for the Perl language?

There is no BNF, but you can paw your way through the yacc grammar in
perly.y in the source distribution if you're particularly brave.  The
grammar relies on very smart tokenizing code, so be prepared to
venture into toke.c as well.

In the words of Chaim Frenkel: "Perl's grammar can not be reduced to BNF.
The work of parsing perl is distributed between yacc, the lexer, smoke
and mirrors."

=head2 What are all these $@@%&* punctuation signs, and how do I know when to use them?

They are type specifiers, as detailed in L<perldata>:

	$ for scalar values (number, string or reference)
	@@ for arrays
	% for hashes (associative arrays)
	& for subroutines (aka functions, procedures, methods)
	* for all types of that symbol name.  In version 4 you used them like
	  pointers, but in modern perls you can just use references.

There are couple of other symbols that you're likely to encounter that aren't
really type specifiers:

	<> are used for inputting a record from a filehandle.
	\  takes a reference to something.

Note that <FILE> is I<neither> the type specifier for files
nor the name of the handle.  It is the C<< <> >> operator applied
to the handle FILE.  It reads one line (well, record--see
L<perlvar/$E<sol>>) from the handle FILE in scalar context, or I<all> lines
in list context.  When performing open, close, or any other operation
besides C<< <> >> on files, or even when talking about the handle, do
I<not> use the brackets.  These are correct: C<eof(FH)>, C<seek(FH, 0,
2)> and "copying from STDIN to FILE".

=head2 Do I always/never have to quote my strings or use semicolons and commas?

Normally, a bareword doesn't need to be quoted, but in most cases
probably should be (and must be under C<use strict>).  But a hash key
consisting of a simple word (that isn't the name of a defined
subroutine) and the left-hand operand to the C<< => >> operator both
count as though they were quoted:

	This                    is like this
	------------            ---------------
	$foo{line}              $foo{'line'}
	bar => stuff            'bar' => stuff

The final semicolon in a block is optional, as is the final comma in a
list.  Good style (see L<perlstyle>) says to put them in except for
one-liners:

	if ($whoops) { exit 1 }
	@@nums = (1, 2, 3);

	if ($whoops) {
		exit 1;
	}

	@@lines = (
	"There Beren came from mountains cold",
	"And lost he wandered under leaves",
	);

=head2 How do I skip some return values?

One way is to treat the return values as a list and index into it:

	$dir = (getpwnam($user))[7];

Another way is to use undef as an element on the left-hand-side:

	($dev, $ino, undef, undef, $uid, $gid) = stat($file);

You can also use a list slice to select only the elements that
you need:

	($dev, $ino, $uid, $gid) = ( stat($file) )[0,1,4,5];

=head2 How do I temporarily block warnings?

If you are running Perl 5.6.0 or better, the C<use warnings> pragma
allows fine control of what warning are produced.
See L<perllexwarn> for more details.

	{
	no warnings;          # temporarily turn off warnings
	$a = $b + $c;         # I know these might be undef
	}

Additionally, you can enable and disable categories of warnings.
You turn off the categories you want to ignore and you can still
get other categories of warnings.  See L<perllexwarn> for the
complete details, including the category names and hierarchy.

	{
	no warnings 'uninitialized';
	$a = $b + $c;
	}

If you have an older version of Perl, the C<$^W> variable (documented
in L<perlvar>) controls runtime warnings for a block:

	{
	local $^W = 0;        # temporarily turn off warnings
	$a = $b + $c;         # I know these might be undef
	}

Note that like all the punctuation variables, you cannot currently
use my() on C<$^W>, only local().

=head2 What's an extension?

An extension is a way of calling compiled C code from Perl.  Reading
L<perlxstut> is a good place to learn more about extensions.

=head2 Why do Perl operators have different precedence than C operators?

Actually, they don't.  All C operators that Perl copies have the same
precedence in Perl as they do in C.  The problem is with operators that C
doesn't have, especially functions that give a list context to everything
on their right, eg. print, chmod, exec, and so on.  Such functions are
called "list operators" and appear as such in the precedence table in
L<perlop>.

A common mistake is to write:

	unlink $file || die "snafu";

This gets interpreted as:

	unlink ($file || die "snafu");

To avoid this problem, either put in extra parentheses or use the
super low precedence C<or> operator:

	(unlink $file) || die "snafu";
	unlink $file or die "snafu";

The "English" operators (C<and>, C<or>, C<xor>, and C<not>)
deliberately have precedence lower than that of list operators for
just such situations as the one above.

Another operator with surprising precedence is exponentiation.  It
binds more tightly even than unary minus, making C<-2**2> produce a
negative not a positive four.  It is also right-associating, meaning
that C<2**3**2> is two raised to the ninth power, not eight squared.

Although it has the same precedence as in C, Perl's C<?:> operator
produces an lvalue.  This assigns $x to either $a or $b, depending
on the trueness of $maybe:

	($maybe ? $a : $b) = $x;

=head2 How do I declare/create a structure?

In general, you don't "declare" a structure.  Just use a (probably
anonymous) hash reference.  See L<perlref> and L<perldsc> for details.
Here's an example:

	$person = {};                   # new anonymous hash
	$person->{AGE}  = 24;           # set field AGE to 24
	$person->{NAME} = "Nat";        # set field NAME to "Nat"

If you're looking for something a bit more rigorous, try L<perltoot>.

=head2 How do I create a module?

(contributed by brian d foy)

L<perlmod>, L<perlmodlib>, L<perlmodstyle> explain modules
in all the gory details. L<perlnewmod> gives a brief
overview of the process along with a couple of suggestions
about style.

If you need to include C code or C library interfaces in
your module, you'll need h2xs.  h2xs will create the module
distribution structure and the initial interface files
you'll need.  L<perlxs> and L<perlxstut> explain the details.

If you don't need to use C code, other tools such as
ExtUtils::ModuleMaker and Module::Starter, can help you
create a skeleton module distribution.

You may also want to see Sam Tregar's "Writing Perl Modules
for CPAN" ( http://apress.com/book/bookDisplay.html?bID=14 )
which is the best hands-on guide to creating module
distributions.

=head2 How do I adopt or take over a module already on CPAN?

(contributed by brian d foy)

The easiest way to take over a module is to have the current
module maintainer either make you a co-maintainer or transfer
the module to you.

If you can't reach the author for some reason (e.g. email bounces),
the PAUSE admins at modules@@perl.org can help. The PAUSE admins
treat each case individually.

=over 4

=item

Get a login for the Perl Authors Upload Server (PAUSE) if you don't
already have one: http://pause.perl.org

=item

Write to modules@@perl.org explaining what you did to contact the
current maintainer. The PAUSE admins will also try to reach the
maintainer.

=item

Post a public message in a heavily trafficked site announcing your
intention to take over the module.

=item

Wait a bit. The PAUSE admins don't want to act too quickly in case
the current maintainer is on holiday. If there's no response to
private communication or the public post, a PAUSE admin can transfer
it to you.

=back

=head2 How do I create a class?
X<class, creation> X<package>

(contributed by brian d foy)

In Perl, a class is just a package, and methods are just subroutines.
Perl doesn't get more formal than that and lets you set up the package
just the way that you like it (that is, it doesn't set up anything for
you).

The Perl documentation has several tutorials that cover class
creation, including L<perlboot> (Barnyard Object Oriented Tutorial),
L<perltoot> (Tom's Object Oriented Tutorial), L<perlbot> (Bag o'
Object Tricks), and L<perlobj>.

=head2 How can I tell if a variable is tainted?

You can use the tainted() function of the Scalar::Util module, available
from CPAN (or included with Perl since release 5.8.0).
See also L<perlsec/"Laundering and Detecting Tainted Data">.

=head2 What's a closure?

Closures are documented in L<perlref>.

I<Closure> is a computer science term with a precise but
hard-to-explain meaning. Usually, closures are implemented in Perl as
anonymous subroutines with lasting references to lexical variables
outside their own scopes. These lexicals magically refer to the
variables that were around when the subroutine was defined (deep
binding).

Closures are most often used in programming languages where you can
have the return value of a function be itself a function, as you can
in Perl. Note that some languages provide anonymous functions but are
not capable of providing proper closures: the Python language, for
example.  For more information on closures, check out any textbook on
functional programming.  Scheme is a language that not only supports
but encourages closures.

Here's a classic non-closure function-generating function:

	sub add_function_generator {
		return sub { shift() + shift() };
		}

	$add_sub = add_function_generator();
	$sum = $add_sub->(4,5);                # $sum is 9 now.

The anonymous subroutine returned by add_function_generator() isn't
technically a closure because it refers to no lexicals outside its own
scope.  Using a closure gives you a I<function template> with some
customization slots left out to be filled later.

Contrast this with the following make_adder() function, in which the
returned anonymous function contains a reference to a lexical variable
outside the scope of that function itself.  Such a reference requires
that Perl return a proper closure, thus locking in for all time the
value that the lexical had when the function was created.

	sub make_adder {
		my $addpiece = shift;
		return sub { shift() + $addpiece };
	}

	$f1 = make_adder(20);
	$f2 = make_adder(555);

Now C<&$f1($n)> is always 20 plus whatever $n you pass in, whereas
C<&$f2($n)> is always 555 plus whatever $n you pass in.  The $addpiece
in the closure sticks around.

Closures are often used for less esoteric purposes.  For example, when
you want to pass in a bit of code into a function:

	my $line;
	timeout( 30, sub { $line = <STDIN> } );

If the code to execute had been passed in as a string,
C<< '$line = <STDIN>' >>, there would have been no way for the
hypothetical timeout() function to access the lexical variable
$line back in its caller's scope.

Another use for a closure is to make a variable I<private> to a
named subroutine, e.g. a counter that gets initialized at creation
time of the sub and can only be modified from within the sub.
This is sometimes used with a BEGIN block in package files to make
sure a variable doesn't get meddled with during the lifetime of the
package:

	BEGIN {
		my $id = 0;
		sub next_id { ++$id }
	}

This is discussed in more detail in L<perlsub>, see the entry on
I<Persistent Private Variables>.

=head2 What is variable suicide and how can I prevent it?

This problem was fixed in perl 5.004_05, so preventing it means upgrading
your version of perl. ;)

Variable suicide is when you (temporarily or permanently) lose the value
of a variable.  It is caused by scoping through my() and local()
interacting with either closures or aliased foreach() iterator variables
and subroutine arguments.  It used to be easy to inadvertently lose a
variable's value this way, but now it's much harder.  Take this code:

	my $f = 'foo';
	sub T {
		while ($i++ < 3) { my $f = $f; $f .= "bar"; print $f, "\n" }
		}

	T;
	print "Finally $f\n";

If you are experiencing variable suicide, that C<my $f> in the subroutine
doesn't pick up a fresh copy of the C<$f> whose value is <foo>. The output
shows that inside the subroutine the value of C<$f> leaks through when it
shouldn't, as in this output:

	foobar
	foobarbar
	foobarbarbar
	Finally foo

The $f that has "bar" added to it three times should be a new C<$f>
C<my $f> should create a new lexical variable each time through the loop.
The expected output is:

	foobar
	foobar
	foobar
	Finally foo

=head2 How can I pass/return a {Function, FileHandle, Array, Hash, Method, Regex}?

You need to pass references to these objects.  See L<perlsub/"Pass by
Reference"> for this particular question, and L<perlref> for
information on references.

=over 4

=item Passing Variables and Functions

Regular variables and functions are quite easy to pass: just pass in a
reference to an existing or anonymous variable or function:

	func( \$some_scalar );

	func( \@@some_array  );
	func( [ 1 .. 10 ]   );

	func( \%some_hash   );
	func( { this => 10, that => 20 }   );

	func( \&some_func   );
	func( sub { $_[0] ** $_[1] }   );

=item Passing Filehandles

As of Perl 5.6, you can represent filehandles with scalar variables
which you treat as any other scalar.

	open my $fh, $filename or die "Cannot open $filename! $!";
	func( $fh );

	sub func {
		my $passed_fh = shift;

		my $line = <$passed_fh>;
		}

Before Perl 5.6, you had to use the C<*FH> or C<\*FH> notations.
These are "typeglobs"--see L<perldata/"Typeglobs and Filehandles">
and especially L<perlsub/"Pass by Reference"> for more information.

=item Passing Regexes

Here's an example of how to pass in a string and a regular expression
for it to match against. You construct the pattern with the C<qr//>
operator:

	sub compare($$) {
		my ($val1, $regex) = @@_;
		my $retval = $val1 =~ /$regex/;
	return $retval;
	}
	$match = compare("old McDonald", qr/d.*D/i);

=item Passing Methods

To pass an object method into a subroutine, you can do this:

	call_a_lot(10, $some_obj, "methname")
	sub call_a_lot {
		my ($count, $widget, $trick) = @@_;
		for (my $i = 0; $i < $count; $i++) {
			$widget->$trick();
		}
	}

Or, you can use a closure to bundle up the object, its
method call, and arguments:

	my $whatnot =  sub { $some_obj->obfuscate(@@args) };
	func($whatnot);
	sub func {
		my $code = shift;
		&$code();
	}

You could also investigate the can() method in the UNIVERSAL class
(part of the standard perl distribution).

=back

=head2 How do I create a static variable?

(contributed by brian d foy)

In Perl 5.10, declare the variable with C<state>. The C<state>
declaration creates the lexical variable that persists between calls
to the subroutine:

	sub counter { state $count = 1; $counter++ }

You can fake a static variable by using a lexical variable which goes
out of scope. In this example, you define the subroutine C<counter>, and
it uses the lexical variable C<$count>. Since you wrap this in a BEGIN
block, C<$count> is defined at compile-time, but also goes out of
scope at the end of the BEGIN block. The BEGIN block also ensures that
the subroutine and the value it uses is defined at compile-time so the
subroutine is ready to use just like any other subroutine, and you can
put this code in the same place as other subroutines in the program
text (i.e. at the end of the code, typically). The subroutine
C<counter> still has a reference to the data, and is the only way you
can access the value (and each time you do, you increment the value).
The data in chunk of memory defined by C<$count> is private to
C<counter>.

	BEGIN {
		my $count = 1;
		sub counter { $count++ }
	}

	my $start = counter();

	.... # code that calls counter();

	my $end = counter();

In the previous example, you created a function-private variable
because only one function remembered its reference. You could define
multiple functions while the variable is in scope, and each function
can share the "private" variable. It's not really "static" because you
can access it outside the function while the lexical variable is in
scope, and even create references to it. In this example,
C<increment_count> and C<return_count> share the variable. One
function adds to the value and the other simply returns the value.
They can both access C<$count>, and since it has gone out of scope,
there is no other way to access it.

	BEGIN {
		my $count = 1;
		sub increment_count { $count++ }
		sub return_count    { $count }
	}

To declare a file-private variable, you still use a lexical variable.
A file is also a scope, so a lexical variable defined in the file
cannot be seen from any other file.

See L<perlsub/"Persistent Private Variables"> for more information.
The discussion of closures in L<perlref> may help you even though we
did not use anonymous subroutines in this answer. See
L<perlsub/"Persistent Private Variables"> for details.

=head2 What's the difference between dynamic and lexical (static) scoping?  Between local() and my()?

C<local($x)> saves away the old value of the global variable C<$x>
and assigns a new value for the duration of the subroutine I<which is
visible in other functions called from that subroutine>.  This is done
at run-time, so is called dynamic scoping.  local() always affects global
variables, also called package variables or dynamic variables.

C<my($x)> creates a new variable that is only visible in the current
subroutine.  This is done at compile-time, so it is called lexical or
static scoping.  my() always affects private variables, also called
lexical variables or (improperly) static(ly scoped) variables.

For instance:

	sub visible {
		print "var has value $var\n";
		}

	sub dynamic {
		local $var = 'local';	# new temporary value for the still-global
		visible();              #   variable called $var
		}

	sub lexical {
		my $var = 'private';    # new private variable, $var
		visible();              # (invisible outside of sub scope)
		}

	$var = 'global';

	visible();      		# prints global
	dynamic();      		# prints local
	lexical();      		# prints global

Notice how at no point does the value "private" get printed.  That's
because $var only has that value within the block of the lexical()
function, and it is hidden from called subroutine.

In summary, local() doesn't make what you think of as private, local
variables.  It gives a global variable a temporary value.  my() is
what you're looking for if you want private variables.

See L<perlsub/"Private Variables via my()"> and
L<perlsub/"Temporary Values via local()"> for excruciating details.

=head2 How can I access a dynamic variable while a similarly named lexical is in scope?

If you know your package, you can just mention it explicitly, as in
$Some_Pack::var. Note that the notation $::var is B<not> the dynamic $var
in the current package, but rather the one in the "main" package, as
though you had written $main::var.

	use vars '$var';
	local $var = "global";
	my    $var = "lexical";

	print "lexical is $var\n";
	print "global  is $main::var\n";

Alternatively you can use the compiler directive our() to bring a
dynamic variable into the current lexical scope.

	require 5.006; # our() did not exist before 5.6
	use vars '$var';

	local $var = "global";
	my $var    = "lexical";

	print "lexical is $var\n";

	{
		our $var;
		print "global  is $var\n";
	}

=head2 What's the difference between deep and shallow binding?

In deep binding, lexical variables mentioned in anonymous subroutines
are the same ones that were in scope when the subroutine was created.
In shallow binding, they are whichever variables with the same names
happen to be in scope when the subroutine is called.  Perl always uses
deep binding of lexical variables (i.e., those created with my()).
However, dynamic variables (aka global, local, or package variables)
are effectively shallowly bound.  Consider this just one more reason
not to use them.  See the answer to L<"What's a closure?">.

=head2 Why doesn't "my($foo) = E<lt>FILEE<gt>;" work right?

C<my()> and C<local()> give list context to the right hand side
of C<=>.  The <FH> read operation, like so many of Perl's
functions and operators, can tell which context it was called in and
behaves appropriately.  In general, the scalar() function can help.
This function does nothing to the data itself (contrary to popular myth)
but rather tells its argument to behave in whatever its scalar fashion is.
If that function doesn't have a defined scalar behavior, this of course
doesn't help you (such as with sort()).

To enforce scalar context in this particular case, however, you need
merely omit the parentheses:

	local($foo) = <FILE>;	    # WRONG
	local($foo) = scalar(<FILE>);   # ok
	local $foo  = <FILE>;	    # right

You should probably be using lexical variables anyway, although the
issue is the same here:

	my($foo) = <FILE>;	# WRONG
	my $foo  = <FILE>;	# right

=head2 How do I redefine a builtin function, operator, or method?

Why do you want to do that? :-)

If you want to override a predefined function, such as open(),
then you'll have to import the new definition from a different
module.  See L<perlsub/"Overriding Built-in Functions">.  There's
also an example in L<perltoot/"Class::Template">.

If you want to overload a Perl operator, such as C<+> or C<**>,
then you'll want to use the C<use overload> pragma, documented
in L<overload>.

If you're talking about obscuring method calls in parent classes,
see L<perltoot/"Overridden Methods">.

=head2 What's the difference between calling a function as &foo and foo()?

(contributed by brian d foy)

Calling a subroutine as C<&foo> with no trailing parentheses ignores
the prototype of C<foo> and passes it the current value of the argument
list, C<@@_>. Here's an example; the C<bar> subroutine calls C<&foo>,
which prints its arguments list:

	sub bar { &foo }

	sub foo { print "Args in foo are: @@_\n" }

	bar( qw( a b c ) );

When you call C<bar> with arguments, you see that C<foo> got the same C<@@_>:

	Args in foo are: a b c

Calling the subroutine with trailing parentheses, with or without arguments,
does not use the current C<@@_> and respects the subroutine prototype. Changing
the example to put parentheses after the call to C<foo> changes the program:

	sub bar { &foo() }

	sub foo { print "Args in foo are: @@_\n" }

	bar( qw( a b c ) );

Now the output shows that C<foo> doesn't get the C<@@_> from its caller.

	Args in foo are:

The main use of the C<@@_> pass-through feature is to write subroutines
whose main job it is to call other subroutines for you. For further
details, see L<perlsub>.

=head2 How do I create a switch or case statement?

In Perl 5.10, use the C<given-when> construct described in L<perlsyn>:

	use 5.010;

	given ( $string ) {
		when( 'Fred' )        { say "I found Fred!" }
		when( 'Barney' )      { say "I found Barney!" }
		when( /Bamm-?Bamm/ )  { say "I found Bamm-Bamm!" }
		default               { say "I don't recognize the name!" }
		};

If one wants to use pure Perl and to be compatible with Perl versions
prior to 5.10, the general answer is to use C<if-elsif-else>:

	for ($variable_to_test) {
		if    (/pat1/)  { }     # do something
		elsif (/pat2/)  { }     # do something else
		elsif (/pat3/)  { }     # do something else
		else            { }     # default
		}

Here's a simple example of a switch based on pattern matching,
lined up in a way to make it look more like a switch statement.
We'll do a multiway conditional based on the type of reference stored
in $whatchamacallit:

    SWITCH: for (ref $whatchamacallit) {

	/^$/		&& die "not a reference";

	/SCALAR/	&& do {
				print_scalar($$ref);
				last SWITCH;
			};

	/ARRAY/		&& do {
				print_array(@@$ref);
				last SWITCH;
			};

	/HASH/		&& do {
				print_hash(%$ref);
				last SWITCH;
			};

	/CODE/		&& do {
				warn "can't print function ref";
				last SWITCH;
			};

	# DEFAULT

	warn "User defined type skipped";

    }

See L<perlsyn> for other examples in this style.

Sometimes you should change the positions of the constant and the variable.
For example, let's say you wanted to test which of many answers you were
given, but in a case-insensitive way that also allows abbreviations.
You can use the following technique if the strings all start with
different characters or if you want to arrange the matches so that
one takes precedence over another, as C<"SEND"> has precedence over
C<"STOP"> here:

	chomp($answer = <>);
	if    ("SEND"  =~ /^\Q$answer/i) { print "Action is send\n"  }
	elsif ("STOP"  =~ /^\Q$answer/i) { print "Action is stop\n"  }
	elsif ("ABORT" =~ /^\Q$answer/i) { print "Action is abort\n" }
	elsif ("LIST"  =~ /^\Q$answer/i) { print "Action is list\n"  }
	elsif ("EDIT"  =~ /^\Q$answer/i) { print "Action is edit\n"  }

A totally different approach is to create a hash of function references.

	my %commands = (
		"happy" => \&joy,
		"sad",  => \&sullen,
		"done"  => sub { die "See ya!" },
		"mad"   => \&angry,
	);

	print "How are you? ";
	chomp($string = <STDIN>);
	if ($commands{$string}) {
		$commands{$string}->();
	} else {
		print "No such command: $string\n";
	}

Starting from Perl 5.8, a source filter module, C<Switch>, can also be
used to get switch and case. Its use is now discouraged, because it's
not fully compatible with the native switch of Perl 5.10, and because,
as it's implemented as a source filter, it doesn't always work as intended
when complex syntax is involved.

=head2 How can I catch accesses to undefined variables, functions, or methods?

The AUTOLOAD method, discussed in L<perlsub/"Autoloading"> and
L<perltoot/"AUTOLOAD: Proxy Methods">, lets you capture calls to
undefined functions and methods.

When it comes to undefined variables that would trigger a warning
under C<use warnings>, you can promote the warning to an error.

	use warnings FATAL => qw(uninitialized);

=head2 Why can't a method included in this same file be found?

Some possible reasons: your inheritance is getting confused, you've
misspelled the method name, or the object is of the wrong type.  Check
out L<perltoot> for details about any of the above cases.  You may
also use C<print ref($object)> to find out the class C<$object> was
blessed into.

Another possible reason for problems is because you've used the
indirect object syntax (eg, C<find Guru "Samy">) on a class name
before Perl has seen that such a package exists.  It's wisest to make
sure your packages are all defined before you start using them, which
will be taken care of if you use the C<use> statement instead of
C<require>.  If not, make sure to use arrow notation (eg.,
C<< Guru->find("Samy") >>) instead.  Object notation is explained in
L<perlobj>.

Make sure to read about creating modules in L<perlmod> and
the perils of indirect objects in L<perlobj/"Method Invocation">.

=head2 How can I find out my current or calling package?

(contributed by brian d foy)

To find the package you are currently in, use the special literal
C<__PACKAGE__>, as documented in L<perldata>. You can only use the
special literals as separate tokens, so you can't interpolate them
into strings like you can with variables:

	my $current_package = __PACKAGE__;
	print "I am in package $current_package\n";

If you want to find the package calling your code, perhaps to give better
diagnostics as C<Carp> does, use the C<caller> built-in:

	sub foo {
		my @@args = ...;
		my( $package, $filename, $line ) = caller;

		print "I was called from package $package\n";
		);

By default, your program starts in package C<main>, so you should
always be in some package unless someone uses the C<package> built-in
with no namespace. See the C<package> entry in L<perlfunc> for the
details of empty packages.

This is different from finding out the package an object is blessed
into, which might not be the current package. For that, use C<blessed>
from C<Scalar::Util>, part of the Standard Library since Perl 5.8:

	use Scalar::Util qw(blessed);
	my $object_package = blessed( $object );

Most of the time, you shouldn't care what package an object is blessed
into, however, as long as it claims to inherit from that class:

	my $is_right_class = eval { $object->isa( $package ) }; # true or false

And, with Perl 5.10 and later, you don't have to check for an
inheritance to see if the object can handle a role. For that, you can
use C<DOES>, which comes from C<UNIVERSAL>:

	my $class_does_it = eval { $object->DOES( $role ) }; # true or false

You can safely replace C<isa> with C<DOES> (although the converse is not true).

=head2 How can I comment out a large block of Perl code?

(contributed by brian d foy)

The quick-and-dirty way to comment out more than one line of Perl is
to surround those lines with Pod directives. You have to put these
directives at the beginning of the line and somewhere where Perl
expects a new statement (so not in the middle of statements like the #
comments). You end the comment with C<=cut>, ending the Pod section:

	=pod

	my $object = NotGonnaHappen->new();

	ignored_sub();

	$wont_be_assigned = 37;

	=cut

The quick-and-dirty method only works well when you don't plan to
leave the commented code in the source. If a Pod parser comes along,
you're multiline comment is going to show up in the Pod translation.
A better way hides it from Pod parsers as well.

The C<=begin> directive can mark a section for a particular purpose.
If the Pod parser doesn't want to handle it, it just ignores it. Label
the comments with C<comment>. End the comment using C<=end> with the
same label. You still need the C<=cut> to go back to Perl code from
the Pod comment:

	=begin comment

	my $object = NotGonnaHappen->new();

	ignored_sub();

	$wont_be_assigned = 37;

	=end comment

	=cut

For more information on Pod, check out L<perlpod> and L<perlpodspec>.

=head2 How do I clear a package?

Use this code, provided by Mark-Jason Dominus:

	sub scrub_package {
		no strict 'refs';
		my $pack = shift;
		die "Shouldn't delete main package"
			if $pack eq "" || $pack eq "main";
		my $stash = *{$pack . '::'}{HASH};
		my $name;
		foreach $name (keys %$stash) {
			my $fullname = $pack . '::' . $name;
			# Get rid of everything with that name.
			undef $$fullname;
			undef @@$fullname;
			undef %$fullname;
			undef &$fullname;
			undef *$fullname;
	}
	}

Or, if you're using a recent release of Perl, you can
just use the Symbol::delete_package() function instead.

=head2 How can I use a variable as a variable name?

Beginners often think they want to have a variable contain the name
of a variable.

	$fred    = 23;
	$varname = "fred";
	++$$varname;         # $fred now 24

This works I<sometimes>, but it is a very bad idea for two reasons.

The first reason is that this technique I<only works on global
variables>.  That means that if $fred is a lexical variable created
with my() in the above example, the code wouldn't work at all: you'd
accidentally access the global and skip right over the private lexical
altogether.  Global variables are bad because they can easily collide
accidentally and in general make for non-scalable and confusing code.

Symbolic references are forbidden under the C<use strict> pragma.
They are not true references and consequently are not reference counted
or garbage collected.

The other reason why using a variable to hold the name of another
variable is a bad idea is that the question often stems from a lack of
understanding of Perl data structures, particularly hashes.  By using
symbolic references, you are just using the package's symbol-table hash
(like C<%main::>) instead of a user-defined hash.  The solution is to
use your own hash or a real reference instead.

	$USER_VARS{"fred"} = 23;
	$varname = "fred";
	$USER_VARS{$varname}++;  # not $$varname++

There we're using the %USER_VARS hash instead of symbolic references.
Sometimes this comes up in reading strings from the user with variable
references and wanting to expand them to the values of your perl
program's variables.  This is also a bad idea because it conflates the
program-addressable namespace and the user-addressable one.  Instead of
reading a string and expanding it to the actual contents of your program's
own variables:

	$str = 'this has a $fred and $barney in it';
	$str =~ s/(\$\w+)/$1/eeg;		  # need double eval

it would be better to keep a hash around like %USER_VARS and have
variable references actually refer to entries in that hash:

	$str =~ s/\$(\w+)/$USER_VARS{$1}/g;   # no /e here at all

That's faster, cleaner, and safer than the previous approach.  Of course,
you don't need to use a dollar sign.  You could use your own scheme to
make it less confusing, like bracketed percent symbols, etc.

	$str = 'this has a %fred% and %barney% in it';
	$str =~ s/%(\w+)%/$USER_VARS{$1}/g;   # no /e here at all

Another reason that folks sometimes think they want a variable to
contain the name of a variable is because they don't know how to build
proper data structures using hashes.  For example, let's say they
wanted two hashes in their program: %fred and %barney, and that they
wanted to use another scalar variable to refer to those by name.

	$name = "fred";
	$$name{WIFE} = "wilma";     # set %fred

	$name = "barney";
	$$name{WIFE} = "betty";	# set %barney

This is still a symbolic reference, and is still saddled with the
problems enumerated above.  It would be far better to write:

	$folks{"fred"}{WIFE}   = "wilma";
	$folks{"barney"}{WIFE} = "betty";

And just use a multilevel hash to start with.

The only times that you absolutely I<must> use symbolic references are
when you really must refer to the symbol table.  This may be because it's
something that can't take a real reference to, such as a format name.
Doing so may also be important for method calls, since these always go
through the symbol table for resolution.

In those cases, you would turn off C<strict 'refs'> temporarily so you
can play around with the symbol table.  For example:

	@@colors = qw(red blue green yellow orange purple violet);
	for my $name (@@colors) {
		no strict 'refs';  # renege for the block
		*$name = sub { "<FONT COLOR='$name'>@@_</FONT>" };
	}

All those functions (red(), blue(), green(), etc.) appear to be separate,
but the real code in the closure actually was compiled only once.

So, sometimes you might want to use symbolic references to directly
manipulate the symbol table.  This doesn't matter for formats, handles, and
subroutines, because they are always global--you can't use my() on them.
For scalars, arrays, and hashes, though--and usually for subroutines--
you probably only want to use hard references.

=head2 What does "bad interpreter" mean?

(contributed by brian d foy)

The "bad interpreter" message comes from the shell, not perl.  The
actual message may vary depending on your platform, shell, and locale
settings.

If you see "bad interpreter - no such file or directory", the first
line in your perl script (the "shebang" line) does not contain the
right path to perl (or any other program capable of running scripts).
Sometimes this happens when you move the script from one machine to
another and each machine has a different path to perl--/usr/bin/perl
versus /usr/local/bin/perl for instance. It may also indicate
that the source machine has CRLF line terminators and the
destination machine has LF only: the shell tries to find
/usr/bin/perl<CR>, but can't.

If you see "bad interpreter: Permission denied", you need to make your
script executable.

In either case, you should still be able to run the scripts with perl
explicitly:

	% perl script.pl

If you get a message like "perl: command not found", perl is not in
your PATH, which might also mean that the location of perl is not
where you expect it so you need to adjust your shebang line.

=head1 AUTHOR AND COPYRIGHT

Copyright (c) 1997-2010 Tom Christiansen, Nathan Torkington, and
other authors as noted. All rights reserved.

This documentation is free; you can redistribute it and/or modify it
under the same terms as Perl itself.

Irrespective of its distribution, all code examples in this file
are hereby placed into the public domain.  You are permitted and
encouraged to use this code in your own programs for fun
or for profit as you see fit.  A simple comment in the code giving
credit would be courteous but is not required.

@


1.11
log
@merge in perl 5.12.2 plus local changes
@
text
@@


1.10
log
@Merge in perl 5.10.1
@
text
@a204 3
The full answer to this can be found at
http://cpan.org/modules/04pause.html#takeover

d378 3
a380 6
With the exception of regexes, you need to pass references to these
objects.  See L<perlsub/"Pass by Reference"> for this particular
question, and L<perlref> for information on references.

See "Passing Regexes", later in L<perlfaq7>, for information on
passing regular expressions.
d420 3
a422 6
To pass regexes around, you'll need to be using a release of Perl
sufficiently recent as to support the C<qr//> construct, pass around
strings and use an exception-trapping eval, or else be very, very clever.

Here's an example of how to pass in a string to be regex compared
using C<qr//>:
a430 31
Notice how C<qr//> allows flags at the end.  That pattern was compiled
at compile time, although it was executed later.  The nifty C<qr//>
notation wasn't introduced until the 5.005 release.  Before that, you
had to approach this problem much less intuitively.  For example, here
it is again if you don't have C<qr//>:

	sub compare($$) {
		my ($val1, $regex) = @@_;
		my $retval = eval { $val1 =~ /$regex/ };
	die if $@@;
	return $retval;
	}

	$match = compare("old McDonald", q/($?i)d.*D/);

Make sure you never say something like this:

	return eval "\$val =~ /$regex/";   # WRONG

or someone can sneak shell escapes into the regex due to the double
interpolation of the eval and the double-quoted string.  For example:

	$pattern_of_evil = 'danger ${ system("rm -rf * &") } danger';

	eval "\$string =~ /$pattern_of_evil/";

Those preferring to be very, very clever might see the O'Reilly book,
I<Mastering Regular Expressions>, by Jeffrey Friedl.  Page 273's
Build_MatchMany_Function() is particularly interesting.  A complete
citation of this book is given in L<perlfaq2>.

d651 1
a651 1
the prototype of C<foo> and passes it the current value of the argumet
d653 1
a653 1
which prints what its arguments list:
d824 15
d851 3
a853 6
If you want to find the package calling your code, perhaps to give better
diagnostics as C<Carp> does, use the C<caller> built-in:

	sub foo {
		my @@args = ...;
		my( $package, $filename, $line ) = caller;
d855 1
a855 2
		print "I was called from package $package\n";
		);
d857 1
a857 4
By default, your program starts in package C<main>, so you should
always be in some package unless someone uses the C<package> built-in
with no namespace. See the C<package> entry in L<perlfunc> for the
details of empty packges.
d879 1
a879 1
The quick-and-dirty method only works well when you don't plan to 
d882 1
a882 1
A better way hides it from Pod parsers as well. 
a1058 8
=head1 REVISION

Revision: $Revision$

Date: $Date$

See L<perlfaq> for source control details and availability.

d1061 1
a1061 1
Copyright (c) 1997-2009 Tom Christiansen, Nathan Torkington, and
@


1.9
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@d66 1
a66 1
	
d156 1
a156 1
binds more tightly even than unary minus, making C<-2**2> product a
d175 1
a175 1
	
d205 3
d229 1
a229 1
=item 
d237 1
a237 1
the current maintainer is on holiday. If there's no response to 
d244 1
d246 11
a256 2
See L<perltoot> for an introduction to classes and objects, as well as
L<perlobj> and L<perlbot>.
d272 1
a272 1
variables that were around when the subroutine was defined (deep 
d307 1
a307 1
	
d502 5
a506 3
Perl doesn't have "static" variables, which can only be accessed from
the function in which they are declared. You can get the same effect
with lexical variables, though.
d526 1
a526 1
	
d528 1
a528 1
	
d530 1
a530 1
	
d577 1
a577 1
	
d582 1
a582 1
	
d587 1
a587 1
	
d589 1
a589 1
	
d688 34
a721 15
When you call a function as C<&foo>, you allow that function access to
your current @@_ values, and you bypass prototypes.
The function doesn't get an empty @@_--it gets yours!  While not
strictly speaking a bug (it's documented that way in L<perlsub>), it
would be hard to consider this a feature in most cases.

When you call your function as C<&foo()>, then you I<do> get a new @@_,
but prototyping is still circumvented.

Normally, you want to call a function using C<foo()>.  You may only
omit the parentheses if the function is already known to the compiler
because it already saw the definition (C<use> but not C<require>),
or via a forward reference or C<use subs> declaration.  Even in this
case, you get a clean @@_ without any of the old values leaking through
where they don't belong.
d725 11
d737 1
a737 1
prior to 5.10, the general answer is to write a construct like this:
d806 1
a806 1
	
a814 3
Note that starting from version 5.10, Perl has now a native switch
statement. See L<perlsyn>.

d852 30
a881 1
=head2 How can I find out my current package?
d883 2
a884 2
If you're just a random program, you can do this to find
out what the currently compiled package is:
d886 4
a889 1
	my $packname = __PACKAGE__;
d891 1
a891 3
But, if you're a method and you want to print an error message
that includes the kind of object you were called on (which is
not necessarily the same as the one in which you were compiled):
d893 15
a907 5
	sub amethod {
		my $self  = shift;
		my $class = ref($self) || $self;
		warn "called me from a $class object";
		}
d909 1
a909 1
=head2 How can I comment out a large block of perl code?
d911 10
a920 5
You can use embedded POD to discard it.  Enclose the blocks you want
to comment out in POD markers.  The <=begin> directive marks a section
for a specific formatter.  Use the C<comment> format, which no formatter
should claim to understand (by policy).  Mark the end of the block
with <=end>.
a921 2
	# program is here
	
d923 7
a929 6
	
	all of this stuff
	
	here will be ignored
	by everyone
	
d931 1
a931 1
	
a932 7
	
	# program continues

The pod directives cannot go just anywhere.  You must put a
pod directive where the parser is expecting a new statement,
not just in the middle of an expression or some other
arbitrary grammar production.
d934 1
a934 1
See L<perlpod> for more details.
d1093 1
a1093 1
Revision: $Revision: 10100 $
d1095 1
a1095 1
Date: $Date: 2007-10-21 20:59:30 +0200 (Sun, 21 Oct 2007) $
d1101 1
a1101 1
Copyright (c) 1997-2007 Tom Christiansen, Nathan Torkington, and
@


1.8
log
@merge in perl 5.8.8
@
text
@d25 6
a30 6
    $ for scalar values (number, string or reference)
    @@ for arrays
    % for hashes (associative arrays)
    & for subroutines (aka functions, procedures, methods)
    * for all types of that symbol name.  In version 4 you used them like
      pointers, but in modern perls you can just use references.
d35 2
a36 2
    <> are used for inputting a record from a filehandle.
    \  takes a reference to something.
d55 4
a58 4
    This                    is like this
    ------------            ---------------
    $foo{line}              $foo{'line'}
    bar => stuff            'bar' => stuff
d64 6
a69 2
    if ($whoops) { exit 1 }
    @@nums = (1, 2, 3);
d71 1
a71 4
    if ($whoops) {
        exit 1;
    }
    @@lines = (
d74 1
a74 1
    );
d80 1
a80 1
        $dir = (getpwnam($user))[7];
d84 1
a84 1
    ($dev, $ino, undef, undef, $uid, $gid) = stat($file);
d97 1
a97 1
    {
d100 1
a100 1
    }
d115 1
a115 1
    {
d118 1
a118 1
    }
d139 1
a139 1
    unlink $file || die "snafu";
d143 1
a143 1
    unlink ($file || die "snafu");
d148 2
a149 2
    (unlink $file) || die "snafu";
    unlink $file or die "snafu";
d164 1
a164 1
    ($maybe ? $a : $b) = $x;
d172 4
a175 4
    $person = {};                   # new anonymous hash
    $person->{AGE}  = 24;           # set field AGE to 24
    $person->{NAME} = "Nat";        # set field NAME to "Nat"

d201 39
d256 10
a265 9
hard-to-explain meaning. Closures are implemented in Perl as anonymous
subroutines with lasting references to lexical variables outside their
own scopes.  These lexicals magically refer to the variables that were
around when the subroutine was defined (deep binding).

Closures make sense in any programming language where you can have the
return value of a function be itself a function, as you can in Perl.
Note that some languages provide anonymous functions but are not
capable of providing proper closures: the Python language, for
d270 1
a270 1
Here's a classic function-generating function:
d272 3
a274 3
    sub add_function_generator {
      return sub { shift() + shift() };
    }
d276 2
a277 2
    $add_sub = add_function_generator();
    $sum = $add_sub->(4,5);                # $sum is 9 now.
d279 4
a282 4
The closure works as a I<function template> with some customization
slots left out to be filled later.  The anonymous subroutine returned
by add_function_generator() isn't technically a closure because it
refers to no lexicals outside its own scope.
d290 7
a296 7
    sub make_adder {
        my $addpiece = shift;
        return sub { shift() + $addpiece };
    }

    $f1 = make_adder(20);
    $f2 = make_adder(555);
d305 2
a306 2
    my $line;
    timeout( 30, sub { $line = <STDIN> } );
d313 15
d339 7
a345 6
    my $f = 'foo';
    sub T {
      while ($i++ < 3) { my $f = $f; $f .= $i; print $f, "\n" }
    }
    T;
    print "Finally $f\n";
d372 2
a373 2
See "Passing Regexes", below, for information on passing regular
expressions.
d382 1
a382 1
    func( \$some_scalar );
d384 2
a385 2
    func( \@@some_array  );
    func( [ 1 .. 10 ]   );
d387 2
a388 2
    func( \%some_hash   );
    func( { this => 10, that => 20 }   );
d390 2
a391 2
    func( \&some_func   );
    func( sub { $_[0] ** $_[1] }   );
d404 1
a404 1
		my $line = <$fh>;
d420 3
a422 3
    sub compare($$) {
        my ($val1, $regex) = @@_;
        my $retval = $val1 =~ /$regex/;
d424 2
a425 2
    }
    $match = compare("old McDonald", qr/d.*D/i);
d433 3
a435 3
    sub compare($$) {
        my ($val1, $regex) = @@_;
        my $retval = eval { $val1 =~ /$regex/ };
d438 1
a438 1
    }
d440 1
a440 1
    $match = compare("old McDonald", q/($?i)d.*D/);
d444 1
a444 1
    return eval "\$val =~ /$regex/";   # WRONG
d449 1
a449 1
    $pattern_of_evil = 'danger ${ system("rm -rf * &") } danger';
d451 1
a451 1
    eval "\$string =~ /$pattern_of_evil/";
d462 7
a468 7
    call_a_lot(10, $some_obj, "methname")
    sub call_a_lot {
        my ($count, $widget, $trick) = @@_;
        for (my $i = 0; $i < $count; $i++) {
            $widget->$trick();
        }
    }
d473 6
a478 6
    my $whatnot =  sub { $some_obj->obfuscate(@@args) };
    func($whatnot);
    sub func {
        my $code = shift;
        &$code();
    }
d507 10
a516 10
    BEGIN {
        my $count = 1;
        sub counter { $count++ }
    }

    my $start = count();

    .... # code that calls count();

    my $end = count();
d529 5
a533 5
    BEGIN {
        my $count = 1;
        sub increment_count { $count++ }
        sub return_count    { $count }
    }
d559 19
a577 19
    sub visible {
	print "var has value $var\n";
    }

    sub dynamic {
	local $var = 'local';	# new temporary value for the still-global
	visible();              #   variable called $var
    }

    sub lexical {
	my $var = 'private';    # new private variable, $var
	visible();              # (invisible outside of sub scope)
    }

    $var = 'global';

    visible();      		# prints global
    dynamic();      		# prints local
    lexical();      		# prints global
d616 2
a617 2
	  our $var;
	  print "global  is $var\n";
d645 3
a647 3
    local($foo) = <FILE>;	    # WRONG
    local($foo) = scalar(<FILE>);   # ok
    local $foo  = <FILE>;	    # right
d652 2
a653 2
    my($foo) = <FILE>;	# WRONG
    my $foo  = <FILE>;	# right
d691 9
a699 25
This is explained in more depth in the L<perlsyn>.  Briefly, there's
no official case statement, because of the variety of tests possible
in Perl (numeric comparison, string comparison, glob comparison,
regex matching, overloaded comparisons, ...).
Larry couldn't decide how best to do this, so he left it out, even
though it's been on the wish list since perl1.

Starting from Perl 5.8 to get switch and case one can use the
Switch extension and say:

	use Switch;

after which one has switch and case.  It is not as fast as it could be
because it's not really part of the language (it's done using source
filters) but it is available, and it's very flexible.

But if one wants to use pure Perl, the general answer is to write a
construct like this:

    for ($variable_to_test) {
	if    (/pat1/)  { }     # do something
	elsif (/pat2/)  { }     # do something else
	elsif (/pat3/)  { }     # do something else
	else            { }     # default
    }
d701 2
a702 2
Here's a simple example of a switch based on pattern matching, this
time lined up in a way to make it look more like a switch statement.
d736 1
a736 2
See C<perlsyn/"Basic BLOCKs and Switch Statements"> for many other
examples in this style.
d746 6
a751 6
    chomp($answer = <>);
    if    ("SEND"  =~ /^\Q$answer/i) { print "Action is send\n"  }
    elsif ("STOP"  =~ /^\Q$answer/i) { print "Action is stop\n"  }
    elsif ("ABORT" =~ /^\Q$answer/i) { print "Action is abort\n" }
    elsif ("LIST"  =~ /^\Q$answer/i) { print "Action is list\n"  }
    elsif ("EDIT"  =~ /^\Q$answer/i) { print "Action is edit\n"  }
d755 23
a777 14
    my %commands = (
        "happy" => \&joy,
        "sad",  => \&sullen,
        "done"  => sub { die "See ya!" },
        "mad"   => \&angry,
    );

    print "How are you? ";
    chomp($string = <STDIN>);
    if ($commands{$string}) {
        $commands{$string}->();
    } else {
        print "No such command: $string\n";
    }
d815 1
a815 1
    my $packname = __PACKAGE__;
d821 5
a825 5
    sub amethod {
	my $self  = shift;
	my $class = ref($self) || $self;
	warn "called me from a $class object";
    }
d835 9
a843 9
    # program is here

    =begin comment

    all of this stuff

    here will be ignored
    by everyone

d845 4
a848 4

    =cut

    # program continues
d861 16
a876 15
    sub scrub_package {
	no strict 'refs';
	my $pack = shift;
	die "Shouldn't delete main package"
	    if $pack eq "" || $pack eq "main";
	my $stash = *{$pack . '::'}{HASH};
	my $name;
	foreach $name (keys %$stash) {
	    my $fullname = $pack . '::' . $name;
	    # Get rid of everything with that name.
	    undef $$fullname;
	    undef @@$fullname;
	    undef %$fullname;
	    undef &$fullname;
	    undef *$fullname;
a877 1
    }
d887 3
a889 3
    $fred    = 23;
    $varname = "fred";
    ++$$varname;         # $fred now 24
d911 3
a913 3
    $USER_VARS{"fred"} = 23;
    $varname = "fred";
    $USER_VARS{$varname}++;  # not $$varname++
d923 2
a924 2
    $str = 'this has a $fred and $barney in it';
    $str =~ s/(\$\w+)/$1/eeg;		  # need double eval
d929 1
a929 1
    $str =~ s/\$(\w+)/$USER_VARS{$1}/g;   # no /e here at all
d935 2
a936 2
    $str = 'this has a %fred% and %barney% in it';
    $str =~ s/%(\w+)%/$USER_VARS{$1}/g;   # no /e here at all
d944 2
a945 2
    $name = "fred";
    $$name{WIFE} = "wilma";     # set %fred
d947 2
a948 2
    $name = "barney";
    $$name{WIFE} = "betty";	# set %barney
d953 2
a954 2
    $folks{"fred"}{WIFE}   = "wilma";
    $folks{"barney"}{WIFE} = "betty";
d967 5
a971 5
    @@colors = qw(red blue green yellow orange purple violet);
    for my $name (@@colors) {
        no strict 'refs';  # renege for the block
        *$name = sub { "<FONT COLOR='$name'>@@_</FONT>" };
    }
d994 1
a994 1
another and each machine has a different path to perl---/usr/bin/perl
d1012 8
d1022 1
a1022 1
Copyright (c) 1997-2006 Tom Christiansen, Nathan Torkington, and
@


1.7
log
@sync in-tree perl with 5.8.6
@
text
@d3 1
a3 1
perlfaq7 - General Perl Language Issues ($Revision: 1.6 $, $Date: 2003/12/03 03:02:45 $)
d57 2
a58 2
    $foo{line}              $foo{"line"}
    bar => stuff            "bar" => stuff
d100 1
a100 1
    
d179 20
a198 14
A module is a package that lives in a file of the same name.  For
example, the Hello::There module would live in Hello/There.pm.  For
details, read L<perlmod>.  You'll also find L<Exporter> helpful.  If
you're writing a C or mixed-language module with both C and Perl, then
you should study L<perlxstut>.

The C<h2xs> program will create stubs for all the important stuff for you:

  % h2xs -XA -n My::Module

The C<-X> switch tells C<h2xs> that you are not using C<XS> extension
code.  The C<-A> switch tells C<h2xs> that you are not using the
AutoLoader, and the C<-n> switch specifies the name of the module.
See L<h2xs> for more details.
d274 8
a281 6
Variable suicide is when you (temporarily or permanently) lose the
value of a variable.  It is caused by scoping through my() and local()
interacting with either closures or aliased foreach() iterator
variables and subroutine arguments.  It used to be easy to
inadvertently lose a variable's value this way, but now it's much
harder.  Take this code:
d283 1
a283 1
    my $f = "foo";
d285 1
a285 1
      while ($i++ < 3) { my $f = $f; $f .= "bar"; print $f, "\n" }
d290 10
d301 7
a307 3
(C<my $f> should create a new local variable each time through the loop).
It isn't, however.  This was a bug, now fixed in the latest releases
(tested against 5.004_05, 5.005_03, and 5.005_56).
d315 1
a315 1
See ``Passing Regexes'', below, for information on passing regular
d430 1
a430 5
As with most things in Perl, TMTOWTDI.  What is a "static variable" in
other languages could be either a function-private variable (visible
only within a single function, retaining its value between calls to
that function), or a file-private variable (visible only to functions
within the file it was declared in) in Perl.
d432 17
a448 1
Here's code to implement a function-private variable:
d451 2
a452 3
        my $counter = 42;
        sub prev_counter { return --$counter }
        sub next_counter { return $counter++ }
d455 1
a455 2
Now prev_counter() and next_counter() share a private variable $counter
that was initialized at compile time.
d457 1
a457 3
To declare a file-private variable, you'll still use a my(), putting
the declaration at the outer scope level at the top of the file.
Assume this is in file Pax.pm:
d459 12
a470 2
    package Pax;
    my $started = scalar(localtime(time()));
d472 5
a476 10
    sub begun { return $started }

When C<use Pax> or C<require Pax> loads this module, the variable will
be initialized.  It won't get garbage-collected the way most variables
going out of scope do, because the begun() function cares about it,
but no one else can get it.  It is not called $Pax::started because
its scope is unrelated to the package.  It's scoped to the file.  You
could conceivably have several packages in that same file all
accessing the same private variable, but another file with the same
package couldn't get to it.
d478 8
a485 1
See L<perlsub/"Persistent Private Variables"> for details.
d781 4
a784 2
to comment out in POD markers, for example C<=for nobody> and C<=cut>
(which marks ends of POD blocks).
d788 1
a788 1
    =for nobody
d795 2
d935 2
d943 1
a943 1
right path to perl (or any other program capable of running scripts). 
d946 4
a949 1
versus /usr/local/bin/perl for instance.
d965 2
a966 2
Copyright (c) 1997-2002 Tom Christiansen and Nathan Torkington.
All rights reserved.
@


1.6
log
@Resolve conflicts for perl 5.8.2, remove old files, and add OpenBSD-specific scaffolding
@
text
@d3 1
a3 1
perlfaq7 - General Perl Language Issues ($Revision: 1.15 $, $Date: 2003/07/24 02:17:21 $)
d100 10
d226 1
a226 1
      return sub { shift + shift };
d245 1
a245 1
        return sub { shift + $addpiece };
@


1.5
log
@Resolve conflicts, remove old files, merge local changes
@
text
@d3 1
a3 1
perlfaq7 - General Perl Language Issues ($Revision: 1.8 $, $Date: 2002/03/26 15:48:32 $)
d41 1
a41 1
L<perlvar/$/>) from the handle FILE in scalar context, or I<all> lines
d85 5
d306 2
a307 3
To pass filehandles to subroutines, use the C<*FH> or C<\*FH> notations.
These are "typeglobs"--see L<perldata/"Typeglobs and Filehandles">
and especially L<perlsub/"Pass by Reference"> for more information.
d309 2
a310 1
Here's an excerpt:
d312 2
a313 3
If you're passing around filehandles, you could usually just use the bare
typeglob, like *STDOUT, but typeglobs references would be better because
they'll still work properly under C<use strict 'refs'>.  For example:
d315 2
a316 5
    splutter(\*STDOUT);
    sub splutter {
        my $fh = shift;
        print $fh "her um well a hmmm\n";
    }
d318 3
a320 15
    $rec = get_rec(\*STDIN);
    sub get_rec {
        my $fh = shift;
        return scalar <$fh>;
    }

If you're planning on generating new filehandles, you could do this:

    sub openit {
        my $path = shift;
        local *FH;
        return open (FH, $path) ? *FH : undef;
    }
    $fh = openit('< /etc/motd');
    print <$fh>;
d478 1
a478 1
See L<perlsub/"Private Variables via my()"> and 
d483 11
a493 2
You can do this via symbolic references, provided you haven't set
C<use strict "refs">.  So instead of $var, use C<${'var'}>.
d495 2
a496 2
    local $var = "global";
    my    $var = "lexical";
d498 2
a499 1
    print "lexical is $var\n";
d501 2
a502 2
    no strict 'refs';
    print "global  is ${'var'}\n";
d504 6
a509 6
If you know your package, you can just mention it explicitly, as in
$Some_Pack::var.  Note that the notation $::var is I<not> the dynamic
$var in the current package, but rather the one in the C<main>
package, as though you had written $main::var.  Specifying the package
directly makes you hard-code its name, but it executes faster and
avoids running afoul of C<use strict "refs">.
d522 1
a522 1
=head2 Why doesn't "my($foo) = <FILE>;" work right?
d606 1
a606 1
    } 
d643 1
a643 1
See C<perlsyn/"Basic BLOCKs and Switch Statements"> for many other 
d661 1
a661 1
A totally different approach is to create a hash of function references.  
d676 1
a676 1
    } 
d678 1
a678 1
=head2 How can I catch accesses to undefined variables/functions/methods?
d685 1
a685 6
under C<-w>, you can use a handler to trap the pseudo-signal
C<__WARN__> like this:

    $SIG{__WARN__} = sub {

	for ( $_[0] ) {		# voici un switch statement 
d687 1
a687 11
	    /Use of uninitialized value/  && do {
		# promote warning to a fatal
		die $_;
	    };

	    # other warning cases to catch could go here;

	    warn $_;
	}

    };
d728 3
a730 2
You can use embedded POD to discard it.  The =for directive
lasts until the next paragraph (two consecutive newlines).
a734 8
    This paragraph is commented out

    # program continues

The =begin and =end directives can contain multiple
paragraphs.

    =begin comment text
d741 3
a743 1
    =end comment text
d748 1
a748 1
arbitrary s grammar production.
d759 1
a759 1
	die "Shouldn't delete main package" 
d774 1
a774 1
Or, if you're using a recent release of Perl, you can 
d806 1
a806 1
    $fred    = 23;
d842 1
a842 1
    $name = "barney";           
d866 1
a866 1
    } 
d876 25
@


1.4
log
@merge in perl 5.6.1 with our local changes
@
text
@d3 1
a3 1
perlfaq7 - Perl Language Issues ($Revision: 1.28 $, $Date: 1999/05/23 20:36:18 $)
d170 1
a170 2
Here's a convenient template you might wish you use when starting your
own module.  Make sure to change the names appropriately.
d172 1
a172 48
    package Some::Module;  # assumes Some/Module.pm

    use strict;
    use warnings;

    BEGIN {
	use Exporter   ();
	our ($VERSION, @@ISA, @@EXPORT, @@EXPORT_OK, %EXPORT_TAGS);

	## set the version for version checking; uncomment to use
	## $VERSION     = 1.00;

	# if using RCS/CVS, this next line may be preferred,
	# but beware two-digit versions.
	$VERSION = do{my@@r=q$Revision: 1.28 $=~/\d+/g;sprintf '%d.'.'%02d'x$#r,@@r};

	@@ISA         = qw(Exporter);
	@@EXPORT      = qw(&func1 &func2 &func3);
	%EXPORT_TAGS = ( );  	# eg: TAG => [ qw!name1 name2! ],

	# your exported package globals go here,
	# as well as any optionally exported functions
	@@EXPORT_OK   = qw($Var1 %Hashit);
    }
    our @@EXPORT_OK;

    # exported package globals go here
    our $Var1;
    our %Hashit;

    # non-exported package globals go here
    our @@more;
    our $stuff;

    # initialize package globals, first exported ones
    $Var1   = '';
    %Hashit = ();

    # then the others (which are still accessible as $Some::Module::stuff)
    $stuff  = '';
    @@more   = ();

    # all file-scoped lexicals must be created before
    # the functions below that use them.

    # file-private lexicals go here
    my $priv_var    = '';
    my %secret_hash = ();
d174 4
a177 22
    # here's a file-private function as a closure,
    # callable as &$priv_func;  it cannot be prototyped.
    my $priv_func = sub {
        # stuff goes here.
    };

    # make all your functions, whether exported or not;
    # remember to put something interesting in the {} stubs
    sub func1      {}	 # no prototype
    sub func2()    {}	 # proto'd void
    sub func3($$)  {}	 # proto'd to 2 scalars

    # this one isn't exported, but could be called!
    sub func4(\%)  {}    # proto'd to 1 hash ref

    END { }       # module clean-up code here (global destructor)

    1;            # modules must return true

The h2xs program will create stubs for all the important stuff for you:

  % h2xs -XA -n My::Module
d186 3
a188 11
See L<perlsec/"Laundering and Detecting Tainted Data">.  Here's an
example (which doesn't use any system calls, because the kill()
is given no processes to signal):

    sub is_tainted {
	return ! eval { join('',@@_), kill 0; 1; };
    }

This is not C<-w> clean, however.  There is no C<-w> clean way to
detect taintedness--take this as a hint that you should untaint
all possibly-tainted data.
d586 6
a591 3
regex matching, overloaded comparisons, ...).  Larry couldn't decide
how best to do this, so he left it out, even though it's been on the
wish list since perl1.
d593 8
a600 1
The general answer is to write a construct like this:
d611 1
a611 1
We'll do a multi-way conditional based on the type of reference stored
d723 1
a723 1
the perils of indirect objects in L<perlobj/"WARNING">.
d744 2
a745 1
Use embedded POD to discard it:
d754 3
d766 4
a769 1
    =cut
d771 1
a771 3
This can't go just anywhere.  You have to put a pod directive where
the parser is expecting a new statement, not just in the middle
of an expression or some other arbitrary yacc grammar production.
d900 1
a900 1
Copyright (c) 1997-1999 Tom Christiansen and Nathan Torkington.
d903 2
a904 6
When included as part of the Standard Version of Perl, or as part of
its complete documentation whether printed or otherwise, this work
may be distributed only under the terms of Perl's Artistic License.
Any distribution of this file or derivatives thereof I<outside>
of that package require that special arrangements be made with
copyright holder.
@


1.3
log
@perl-5.6.0 + local changes
@
text
@d32 2
a33 2
A couple of others that you're likely to encounter that aren't
really type specifiers are:
d40 1
a40 1
to the handle FILE.  It reads one line (well, record - see
d43 1
a43 1
besides C<< <> >> on files, or even talking about the handle, do
d109 2
a110 2
A way of calling compiled C code from Perl.  Reading L<perlxstut>
is a good place to learn more about extensions.
d117 1
a117 1
on their right, eg print, chmod, exec, and so on.  Such functions are
d199 4
d261 1
a261 1
detect taintedness - take this as a hint that you should untaint
d277 1
a277 1
capable of providing proper closures; the Python language, for
d352 3
d359 1
a359 1
Regular variables and functions are quite easy: just pass in a
d376 1
a376 1
These are "typeglobs" - see L<perldata/"Typeglobs and Filehandles">
d400 1
a400 1
        my $name = shift;
d466 2
a467 2
Or you can use a closure to bundle up the object and its method call
and arguments:
d501 2
a502 2
it at the outer scope level at the top of the file.  Assume this is in
file Pax.pm:
d522 2
a523 2
C<local($x)> saves away the old value of the global variable C<$x>,
and assigns a new value for the duration of the subroutine, I<which is
d529 1
a529 1
subroutine.  This is done at compile-time, so is called lexical or
d563 2
a564 2
See L<perlsub/"Private Variables via my()"> and L<perlsub/"Temporary
Values via local()"> for excruciating details.
d640 2
a641 2
your current @@_ values, and you by-pass prototypes.  That means that
the function doesn't get an empty @@_, it gets yours!  While not
d715 1
a715 1
different characters, or if you want to arrange the matches so that
d773 3
a775 2
out L<perltoot> for details on these.  You may also use C<print
ref($object)> to find out the class C<$object> was blessed into.
d782 1
a782 1
C<require>.  If not, make sure to use arrow notation (eg,
d796 1
a796 1
But if you're a method and you want to print an error message
d868 6
a873 6
The first reason is that they I<only work on global variables>.
That means above that if $fred is a lexical variable created with my(),
that the code won't work at all: you'll accidentally access the global
and skip right over the private lexical altogether.  Global variables
are bad because they can easily collide accidentally and in general make
for non-scalable and confusing code.
d880 1
a880 1
variable a bad idea is that the question often stems from a lack of
d901 1
a901 1
Instead, it would be better to keep a hash around like %USER_VARS and have
d913 5
a917 5
Another reason that folks sometimes think they want a variable to contain
the name of a variable is because they don't know how to build proper
data structures using hashes.  For example, let's say they wanted two
hashes in their program: %fred and %barney, and to use another scalar
variable to refer to those by name.
d953 3
a955 3
subroutines, because they are always global -- you can't use my() on them.
But for scalars, arrays, and hashes -- and usually for subroutines --
you probably want to use hard references only.
d974 1
@


1.2
log
@perl5.005_03 (stock)
@
text
@d3 1
a3 1
perlfaq7 - Perl Language Issues ($Revision: 1.24 $, $Date: 1999/01/08 05:32:11 $)
d21 1
a21 1
=head2 What are all these $@@%* punctuation signs, and how do I know when to use them?
d28 1
a31 3
While there are a few places where you don't actually need these type
specifiers, you should always use them.

d38 2
a39 2
Note that E<lt>FILEE<gt> is I<neither> the type specifier for files
nor the name of the handle.  It is the C<E<lt>E<gt>> operator applied
d43 1
a43 1
besides C<E<lt>E<gt>> on files, or even talking about the handle, do
d52 1
a52 1
subroutine) and the left-hand operand to the C<=E<gt>> operator both
d87 11
a97 2
The C<$^W> variable (documented in L<perlvar>) controls
runtime warnings for a block:
a106 4
A new C<use warnings> pragma is in the works to provide finer control
over all this.  The curious should check the perl5-porters mailing list
archives for details.

d176 1
d180 1
a180 1
	use vars       qw($VERSION @@ISA @@EXPORT @@EXPORT_OK %EXPORT_TAGS);
d187 1
a187 1
	$VERSION = do{my@@r=q$Revision: 1.24 $=~/\d+/g;sprintf '%d.'.'%02d'x$#r,@@r};
d197 1
a197 1
    use vars      @@EXPORT_OK;
d200 2
a201 1
    use vars      qw( @@more $stuff );
d316 4
a319 4
If the code to execute had been passed in as a string, C<'$line =
E<lt>STDINE<gt>'>, there would have been no way for the hypothetical
timeout() function to access the lexical variable $line back in its
caller's scope.
d338 3
a340 2
(C<my $f> should create a new local variable each time through the
loop).  It isn't, however.  This is a bug, and will be fixed.
d342 1
a342 1
=head2 How can I pass/return a {Function, FileHandle, Array, Hash, Method, Regexp}?
d344 1
a344 1
With the exception of regexps, you need to pass references to these
d400 15
a414 1
=item Passing Regexps
d416 5
a420 5
To pass regexps around, you'll need to either use one of the highly
experimental regular expression modules from CPAN (Nick Ing-Simmons's
Regexp or Ilya Zakharevich's Devel::Regexp), pass around strings
and use an exception-trapping eval, or else be very, very clever.
Here's an example of how to pass in a string to be regexp compared:
d423 2
a424 2
        my ($val1, $regexp) = @@_;
        my $retval = eval { $val =~ /$regexp/ };
d429 1
a429 1
    $match = compare("old McDonald", q/d.*D/);
d433 1
a433 1
    return eval "\$val =~ /$regexp/";   # WRONG
d435 1
a435 1
or someone can sneak shell escapes into the regexp due to the double
d590 1
a590 1
=head2 Why doesn't "my($foo) = E<lt>FILEE<gt>;" work right?
d593 1
a593 1
of C<=>.  The E<lt>FHE<gt> read operation, like so many of Perl's
d620 1
a620 1
module.  See L<perlsub/"Overriding Builtin Functions">.  There's
d653 1
a653 1
regexp matching, overloaded comparisons, ...).  Larry couldn't decide
d775 1
a775 1
C<Guru-E<gt>find("Samy")>) instead.  Object notation is explained in
d849 100
d956 1
a956 1
may be distributed only under the terms of Perl's Artistic Licence.
a965 1

@


1.1
log
@perl 5.004_04
@
text
@d3 1
a3 1
perlfaq7 - Perl Language Issues ($Revision: 1.18 $, $Date: 1997/04/24 22:44:14 $)
d12 8
a19 3
No, in the words of Chaim Frenkel: "Perl's grammar can not be reduced
to BNF.  The work of parsing perl is distributed between yacc, the
lexer, smoke and mirrors."
d141 6
d183 1
a183 1
	$VERSION = do{my@@r=q$Revision: 1.18 $=~/\d+/g;sprintf '%d.'.'%02d'x$#r,@@r};
d232 4
d280 1
a280 1
    $sum = &$add_sub(4,5);                # $sum is 9 now.
d320 1
a320 1
interacting with either closures or aliased foreach() interator
d351 1
a351 1
    func( \$some_array );
d362 31
a392 10
To create filehandles you can pass to subroutines, you can use C<*FH>
or C<\*FH> notation ("typeglobs" - see L<perldata> for more information),
or create filehandles dynamically using the old FileHandle or the new
IO::File modules, both part of the standard Perl distribution.

    use Fcntl;
    use IO::File;
    my $fh = new IO::File $filename, O_WRONLY|O_APPEND;
		or die "Can't append to $filename: $!";
    func($fh);
d399 1
a399 1
and use an exception-trapping eval, or else be be very, very clever.
d439 1
a439 1
or you can use a closure to bundle up the object and its method call
d491 2
d536 2
a537 1
See also L<perlsub>, which explains this all in more detail.
d570 1
a570 1
=head2 Why doesn't "local($foo) = <FILE>;" work right?
d572 8
a579 8
C<local()> gives list context to the right hand side of C<=>.  The
E<lt>FHE<gt> read operation, like so many of Perl's functions and
operators, can tell which context it was called in and behaves
appropriately.  In general, the scalar() function can help.  This
function does nothing to the data itself (contrary to popular myth)
but rather tells its argument to behave in whatever its scalar fashion
is.  If that function doesn't have a defined scalar behavior, this of
course doesn't help you (such as with sort()).
d618 1
a618 1
When you call your function as C<&foo()>, then you do get a new @@_,
d637 13
a649 3
Here's a simple example of a switch based on pattern matching.  We'll
do a multi-way conditional based on the type of reference stored in
$whatchamacallit:
d651 1
a651 2
    SWITCH:
      for (ref $whatchamacallit) {
d681 35
d728 1
a728 1
	for ( $_[0] ) {
d755 1
a755 1
C<Guru->find("Samy")>) instead.  Object notation is explained in
d758 3
d766 1
a766 1
    my $packname = ref bless [];
d773 1
a773 1
	my $self = shift;
d800 29
d831 16
a846 2
Copyright (c) 1997 Tom Christiansen and Nathan Torkington.
All rights reserved.  See L<perlfaq> for distribution information.
@


1.1.1.1
log
@perl5.005_03
@
text
@d3 1
a3 1
perlfaq7 - Perl Language Issues ($Revision: 1.24 $, $Date: 1999/01/08 05:32:11 $)
d12 3
a14 8
There is no BNF, but you can paw your way through the yacc grammar in
perly.y in the source distribution if you're particularly brave.  The
grammar relies on very smart tokenizing code, so be prepared to
venture into toke.c as well.

In the words of Chaim Frenkel: "Perl's grammar can not be reduced to BNF.
The work of parsing perl is distributed between yacc, the lexer, smoke
and mirrors."
a135 6
Although it has the same precedence as in C, Perl's C<?:> operator
produces an lvalue.  This assigns $x to either $a or $b, depending
on the trueness of $maybe:

    ($maybe ? $a : $b) = $x;

d172 1
a172 1
	$VERSION = do{my@@r=q$Revision: 1.24 $=~/\d+/g;sprintf '%d.'.'%02d'x$#r,@@r};
a220 4
The h2xs program will create stubs for all the important stuff for you:

  % h2xs -XA -n My::Module

d265 1
a265 1
    $sum = $add_sub->(4,5);                # $sum is 9 now.
d305 1
a305 1
interacting with either closures or aliased foreach() iterator
d336 1
a336 1
    func( \@@some_array  );
d347 10
a356 31
To pass filehandles to subroutines, use the C<*FH> or C<\*FH> notations.
These are "typeglobs" - see L<perldata/"Typeglobs and Filehandles">
and especially L<perlsub/"Pass by Reference"> for more information.

Here's an excerpt:

If you're passing around filehandles, you could usually just use the bare
typeglob, like *STDOUT, but typeglobs references would be better because
they'll still work properly under C<use strict 'refs'>.  For example:

    splutter(\*STDOUT);
    sub splutter {
        my $fh = shift;
        print $fh "her um well a hmmm\n";
    }

    $rec = get_rec(\*STDIN);
    sub get_rec {
        my $fh = shift;
        return scalar <$fh>;
    }

If you're planning on generating new filehandles, you could do this:

    sub openit {
        my $name = shift;
        local *FH;
        return open (FH, $path) ? *FH : undef;
    }
    $fh = openit('< /etc/motd');
    print <$fh>;
d363 1
a363 1
and use an exception-trapping eval, or else be very, very clever.
d403 1
a403 1
Or you can use a closure to bundle up the object and its method call
a454 2
See L<perlsub/"Persistent Private Variables"> for details.

d498 1
a498 2
See L<perlsub/"Private Variables via my()"> and L<perlsub/"Temporary
Values via local()"> for excruciating details.
d531 1
a531 1
=head2 Why doesn't "my($foo) = E<lt>FILEE<gt>;" work right?
d533 8
a540 8
C<my()> and C<local()> give list context to the right hand side
of C<=>.  The E<lt>FHE<gt> read operation, like so many of Perl's
functions and operators, can tell which context it was called in and
behaves appropriately.  In general, the scalar() function can help.
This function does nothing to the data itself (contrary to popular myth)
but rather tells its argument to behave in whatever its scalar fashion is.
If that function doesn't have a defined scalar behavior, this of course
doesn't help you (such as with sort()).
d579 1
a579 1
When you call your function as C<&foo()>, then you I<do> get a new @@_,
d598 3
a600 13
The general answer is to write a construct like this:

    for ($variable_to_test) {
	if    (/pat1/)  { }     # do something
	elsif (/pat2/)  { }     # do something else
	elsif (/pat3/)  { }     # do something else
	else            { }     # default
    } 

Here's a simple example of a switch based on pattern matching, this
time lined up in a way to make it look more like a switch statement.
We'll do a multi-way conditional based on the type of reference stored
in $whatchamacallit:
d602 2
a603 1
    SWITCH: for (ref $whatchamacallit) {
a632 35
See C<perlsyn/"Basic BLOCKs and Switch Statements"> for many other 
examples in this style.

Sometimes you should change the positions of the constant and the variable.
For example, let's say you wanted to test which of many answers you were
given, but in a case-insensitive way that also allows abbreviations.
You can use the following technique if the strings all start with
different characters, or if you want to arrange the matches so that
one takes precedence over another, as C<"SEND"> has precedence over
C<"STOP"> here:

    chomp($answer = <>);
    if    ("SEND"  =~ /^\Q$answer/i) { print "Action is send\n"  }
    elsif ("STOP"  =~ /^\Q$answer/i) { print "Action is stop\n"  }
    elsif ("ABORT" =~ /^\Q$answer/i) { print "Action is abort\n" }
    elsif ("LIST"  =~ /^\Q$answer/i) { print "Action is list\n"  }
    elsif ("EDIT"  =~ /^\Q$answer/i) { print "Action is edit\n"  }

A totally different approach is to create a hash of function references.  

    my %commands = (
        "happy" => \&joy,
        "sad",  => \&sullen,
        "done"  => sub { die "See ya!" },
        "mad"   => \&angry,
    );

    print "How are you? ";
    chomp($string = <STDIN>);
    if ($commands{$string}) {
        $commands{$string}->();
    } else {
        print "No such command: $string\n";
    } 

d645 1
a645 1
	for ( $_[0] ) {		# voici un switch statement 
d672 1
a672 1
C<Guru-E<gt>find("Samy")>) instead.  Object notation is explained in
a674 3
Make sure to read about creating modules in L<perlmod> and
the perils of indirect objects in L<perlobj/"WARNING">.

d680 1
a680 1
    my $packname = __PACKAGE__;
d687 1
a687 1
	my $self  = shift;
a713 29
This can't go just anywhere.  You have to put a pod directive where
the parser is expecting a new statement, not just in the middle
of an expression or some other arbitrary yacc grammar production.

=head2 How do I clear a package?

Use this code, provided by Mark-Jason Dominus:

    sub scrub_package {
	no strict 'refs';
	my $pack = shift;
	die "Shouldn't delete main package" 
	    if $pack eq "" || $pack eq "main";
	my $stash = *{$pack . '::'}{HASH};
	my $name;
	foreach $name (keys %$stash) {
	    my $fullname = $pack . '::' . $name;
	    # Get rid of everything with that name.
	    undef $$fullname;
	    undef @@$fullname;
	    undef %$fullname;
	    undef &$fullname;
	    undef *$fullname;
	}
    }

Or, if you're using a recent release of Perl, you can 
just use the Symbol::delete_package() function instead.

d716 2
a717 16
Copyright (c) 1997-1999 Tom Christiansen and Nathan Torkington.
All rights reserved.

When included as part of the Standard Version of Perl, or as part of
its complete documentation whether printed or otherwise, this work
may be distributed only under the terms of Perl's Artistic Licence.
Any distribution of this file or derivatives thereof I<outside>
of that package require that special arrangements be made with
copyright holder.

Irrespective of its distribution, all code examples in this file
are hereby placed into the public domain.  You are permitted and
encouraged to use this code in your own programs for fun
or for profit as you see fit.  A simple comment in the code giving
credit would be courteous but is not required.

@


1.1.1.2
log
@virgin perl 5.6.0
@
text
@d3 1
a3 1
perlfaq7 - Perl Language Issues ($Revision: 1.28 $, $Date: 1999/05/23 20:36:18 $)
d21 1
a21 1
=head2 What are all these $@@%&* punctuation signs, and how do I know when to use them?
a27 1
    & for subroutines (aka functions, procedures, methods)
d31 3
d40 2
a41 2
Note that <FILE> is I<neither> the type specifier for files
nor the name of the handle.  It is the C<< <> >> operator applied
d45 1
a45 1
besides C<< <> >> on files, or even talking about the handle, do
d54 1
a54 1
subroutine) and the left-hand operand to the C<< => >> operator both
d89 2
a90 11
If you are running Perl 5.6.0 or better, the C<use warnings> pragma
allows fine control of what warning are produced.
See L<perllexwarn> for more details.

    {
	no warnings;          # temporarily turn off warnings
	$a = $b + $c;         # I know these might be undef
    }

If you have an older version of Perl, the C<$^W> variable (documented
in L<perlvar>) controls runtime warnings for a block:
d100 4
a172 1
    use warnings;
d176 1
a176 1
	our ($VERSION, @@ISA, @@EXPORT, @@EXPORT_OK, %EXPORT_TAGS);
d183 1
a183 1
	$VERSION = do{my@@r=q$Revision: 1.28 $=~/\d+/g;sprintf '%d.'.'%02d'x$#r,@@r};
d193 1
a193 1
    our @@EXPORT_OK;
d196 1
a196 2
    our @@more;
    our $stuff;
d311 4
a314 4
If the code to execute had been passed in as a string,
C<< '$line = <STDIN>' >>, there would have been no way for the
hypothetical timeout() function to access the lexical variable
$line back in its caller's scope.
d333 2
a334 3
(C<my $f> should create a new local variable each time through the loop).
It isn't, however.  This was a bug, now fixed in the latest releases
(tested against 5.004_05, 5.005_03, and 5.005_56).
d336 1
a336 1
=head2 How can I pass/return a {Function, FileHandle, Array, Hash, Method, Regex}?
d338 1
a338 1
With the exception of regexes, you need to pass references to these
d394 1
a394 15
=item Passing Regexes

To pass regexes around, you'll need to be using a release of Perl
sufficiently recent as to support the C<qr//> construct, pass around
strings and use an exception-trapping eval, or else be very, very clever.

Here's an example of how to pass in a string to be regex compared
using C<qr//>:

    sub compare($$) {
        my ($val1, $regex) = @@_;
        my $retval = $val1 =~ /$regex/;
	return $retval;
    }
    $match = compare("old McDonald", qr/d.*D/i);
d396 5
a400 5
Notice how C<qr//> allows flags at the end.  That pattern was compiled
at compile time, although it was executed later.  The nifty C<qr//>
notation wasn't introduced until the 5.005 release.  Before that, you
had to approach this problem much less intuitively.  For example, here
it is again if you don't have C<qr//>:
d403 2
a404 2
        my ($val1, $regex) = @@_;
        my $retval = eval { $val1 =~ /$regex/ };
d409 1
a409 1
    $match = compare("old McDonald", q/($?i)d.*D/);
d413 1
a413 1
    return eval "\$val =~ /$regex/";   # WRONG
d415 1
a415 1
or someone can sneak shell escapes into the regex due to the double
d570 1
a570 1
=head2 Why doesn't "my($foo) = <FILE>;" work right?
d573 1
a573 1
of C<=>.  The <FH> read operation, like so many of Perl's
d600 1
a600 1
module.  See L<perlsub/"Overriding Built-in Functions">.  There's
d633 1
a633 1
regex matching, overloaded comparisons, ...).  Larry couldn't decide
d755 1
a755 1
C<< Guru->find("Samy") >>) instead.  Object notation is explained in
a828 100
=head2 How can I use a variable as a variable name?

Beginners often think they want to have a variable contain the name
of a variable.

    $fred    = 23;
    $varname = "fred";
    ++$$varname;         # $fred now 24

This works I<sometimes>, but it is a very bad idea for two reasons.

The first reason is that they I<only work on global variables>.
That means above that if $fred is a lexical variable created with my(),
that the code won't work at all: you'll accidentally access the global
and skip right over the private lexical altogether.  Global variables
are bad because they can easily collide accidentally and in general make
for non-scalable and confusing code.

Symbolic references are forbidden under the C<use strict> pragma.
They are not true references and consequently are not reference counted
or garbage collected.

The other reason why using a variable to hold the name of another
variable a bad idea is that the question often stems from a lack of
understanding of Perl data structures, particularly hashes.  By using
symbolic references, you are just using the package's symbol-table hash
(like C<%main::>) instead of a user-defined hash.  The solution is to
use your own hash or a real reference instead.

    $fred    = 23;
    $varname = "fred";
    $USER_VARS{$varname}++;  # not $$varname++

There we're using the %USER_VARS hash instead of symbolic references.
Sometimes this comes up in reading strings from the user with variable
references and wanting to expand them to the values of your perl
program's variables.  This is also a bad idea because it conflates the
program-addressable namespace and the user-addressable one.  Instead of
reading a string and expanding it to the actual contents of your program's
own variables:

    $str = 'this has a $fred and $barney in it';
    $str =~ s/(\$\w+)/$1/eeg;		  # need double eval

Instead, it would be better to keep a hash around like %USER_VARS and have
variable references actually refer to entries in that hash:

    $str =~ s/\$(\w+)/$USER_VARS{$1}/g;   # no /e here at all

That's faster, cleaner, and safer than the previous approach.  Of course,
you don't need to use a dollar sign.  You could use your own scheme to
make it less confusing, like bracketed percent symbols, etc.

    $str = 'this has a %fred% and %barney% in it';
    $str =~ s/%(\w+)%/$USER_VARS{$1}/g;   # no /e here at all

Another reason that folks sometimes think they want a variable to contain
the name of a variable is because they don't know how to build proper
data structures using hashes.  For example, let's say they wanted two
hashes in their program: %fred and %barney, and to use another scalar
variable to refer to those by name.

    $name = "fred";
    $$name{WIFE} = "wilma";     # set %fred

    $name = "barney";           
    $$name{WIFE} = "betty";	# set %barney

This is still a symbolic reference, and is still saddled with the
problems enumerated above.  It would be far better to write:

    $folks{"fred"}{WIFE}   = "wilma";
    $folks{"barney"}{WIFE} = "betty";

And just use a multilevel hash to start with.

The only times that you absolutely I<must> use symbolic references are
when you really must refer to the symbol table.  This may be because it's
something that can't take a real reference to, such as a format name.
Doing so may also be important for method calls, since these always go
through the symbol table for resolution.

In those cases, you would turn off C<strict 'refs'> temporarily so you
can play around with the symbol table.  For example:

    @@colors = qw(red blue green yellow orange purple violet);
    for my $name (@@colors) {
        no strict 'refs';  # renege for the block
        *$name = sub { "<FONT COLOR='$name'>@@_</FONT>" };
    } 

All those functions (red(), blue(), green(), etc.) appear to be separate,
but the real code in the closure actually was compiled only once.

So, sometimes you might want to use symbolic references to directly
manipulate the symbol table.  This doesn't matter for formats, handles, and
subroutines, because they are always global -- you can't use my() on them.
But for scalars, arrays, and hashes -- and usually for subroutines --
you probably want to use hard references only.

d836 1
a836 1
may be distributed only under the terms of Perl's Artistic License.
d846 1
@


1.1.1.3
log
@stock perl 5.6.1
@
text
@d32 2
a33 2
There are couple of other symbols that you're likely to encounter that aren't
really type specifiers:
d40 1
a40 1
to the handle FILE.  It reads one line (well, record--see
d43 1
a43 1
besides C<< <> >> on files, or even when talking about the handle, do
d109 2
a110 2
An extension is a way of calling compiled C code from Perl.  Reading
L<perlxstut> is a good place to learn more about extensions.
d117 1
a117 1
on their right, eg. print, chmod, exec, and so on.  Such functions are
a198 4
    # exported package globals go here
    our $Var1;
    our %Hashit;

d257 1
a257 1
detect taintedness--take this as a hint that you should untaint
d273 1
a273 1
capable of providing proper closures: the Python language, for
a347 3
See ``Passing Regexes'', below, for information on passing regular
expressions.

d352 1
a352 1
Regular variables and functions are quite easy to pass: just pass in a
d369 1
a369 1
These are "typeglobs"--see L<perldata/"Typeglobs and Filehandles">
d393 1
a393 1
        my $path = shift;
d459 2
a460 2
Or, you can use a closure to bundle up the object, its
method call, and arguments:
d494 2
a495 2
the declaration at the outer scope level at the top of the file.
Assume this is in file Pax.pm:
d515 2
a516 2
C<local($x)> saves away the old value of the global variable C<$x>
and assigns a new value for the duration of the subroutine I<which is
d522 1
a522 1
subroutine.  This is done at compile-time, so it is called lexical or
d556 2
a557 2
See L<perlsub/"Private Variables via my()"> and 
L<perlsub/"Temporary Values via local()"> for excruciating details.
d633 2
a634 2
your current @@_ values, and you bypass prototypes.
The function doesn't get an empty @@_--it gets yours!  While not
d708 1
a708 1
different characters or if you want to arrange the matches so that
d766 2
a767 3
out L<perltoot> for details about any of the above cases.  You may
also use C<print ref($object)> to find out the class C<$object> was
blessed into.
d774 1
a774 1
C<require>.  If not, make sure to use arrow notation (eg.,
d788 1
a788 1
But, if you're a method and you want to print an error message
d860 6
a865 6
The first reason is that this technique I<only works on global
variables>.  That means that if $fred is a lexical variable created
with my() in the above example, the code wouldn't work at all: you'd
accidentally access the global and skip right over the private lexical
altogether.  Global variables are bad because they can easily collide
accidentally and in general make for non-scalable and confusing code.
d872 1
a872 1
variable is a bad idea is that the question often stems from a lack of
d893 1
a893 1
it would be better to keep a hash around like %USER_VARS and have
d905 5
a909 5
Another reason that folks sometimes think they want a variable to
contain the name of a variable is because they don't know how to build
proper data structures using hashes.  For example, let's say they
wanted two hashes in their program: %fred and %barney, and that they
wanted to use another scalar variable to refer to those by name.
d945 3
a947 3
subroutines, because they are always global--you can't use my() on them.
For scalars, arrays, and hashes, though--and usually for subroutines--
you probably only want to use hard references.
a965 1

@


1.1.1.4
log
@stock perl 5.8.0 from CPAN
@
text
@d3 1
a3 1
perlfaq7 - General Perl Language Issues ($Revision: 1.8 $, $Date: 2002/03/26 15:48:32 $)
d170 72
a241 1
The C<h2xs> program will create stubs for all the important stuff for you:
a244 5
The C<-X> switch tells C<h2xs> that you are not using C<XS> extension
code.  The C<-A> switch tells C<h2xs> that you are not using the
AutoLoader, and the C<-n> switch specifies the name of the module.
See L<h2xs> for more details.

d252 11
a262 3
You can use the tainted() function of the Scalar::Util module, available
from CPAN (or included with Perl since release 5.8.0).
See also L<perlsec/"Laundering and Detecting Tainted Data">.
d660 3
a662 6
regex matching, overloaded comparisons, ...).
Larry couldn't decide how best to do this, so he left it out, even
though it's been on the wish list since perl1.

Starting from Perl 5.8 to get switch and case one can use the
Switch extension and say:
d664 1
a664 8
	use Switch;

after which one has switch and case.  It is not as fast as it could be
because it's not really part of the language (it's done using source
filters) but it is available, and it's very flexible.

But if one wants to use pure Perl, the general answer is to write a
construct like this:
d675 1
a675 1
We'll do a multiway conditional based on the type of reference stored
d787 1
a787 1
the perils of indirect objects in L<perlobj/"Method Invocation">.
d808 1
a808 2
You can use embedded POD to discard it.  The =for directive
lasts until the next paragraph (two consecutive newlines).
a816 3
The =begin and =end directives can contain multiple
paragraphs.

d826 1
a826 4
The pod directives cannot go just anywhere.  You must put a
pod directive where the parser is expecting a new statement,
not just in the middle of an expression or some other
arbitrary s grammar production.
d828 3
a830 1
See L<perlpod> for more details.
d959 1
a959 1
Copyright (c) 1997-2002 Tom Christiansen and Nathan Torkington.
d962 6
a967 2
This documentation is free; you can redistribute it and/or modify it
under the same terms as Perl itself.
@


1.1.1.5
log
@perl 5.8.2 from CPAN
@
text
@d3 1
a3 1
perlfaq7 - General Perl Language Issues ($Revision: 1.15 $, $Date: 2003/07/24 02:17:21 $)
d41 1
a41 1
L<perlvar/$E<sol>>) from the handle FILE in scalar context, or I<all> lines
a84 5
You can also use a list slice to select only the elements that
you need:

	($dev, $ino, $uid, $gid) = ( stat($file) )[0,1,4,5];

d301 3
a303 2
As of Perl 5.6, you can represent filehandles with scalar variables
which you treat as any other scalar.
d305 1
a305 2
	open my $fh, $filename or die "Cannot open $filename! $!";
	func( $fh );
d307 3
a309 2
	sub func {
		my $passed_fh = shift;
d311 5
a315 2
		my $line = <$fh>;
		}
d317 15
a331 3
Before Perl 5.6, you had to use the C<*FH> or C<\*FH> notations.
These are "typeglobs"--see L<perldata/"Typeglobs and Filehandles">
and especially L<perlsub/"Pass by Reference"> for more information.
d489 1
a489 1
See L<perlsub/"Private Variables via my()"> and
d494 2
a495 4
If you know your package, you can just mention it explicitly, as in
$Some_Pack::var. Note that the notation $::var is B<not> the dynamic $var
in the current package, but rather the one in the "main" package, as
though you had written $main::var.
d497 2
a498 3
	use vars '$var';
	local $var = "global";
	my    $var = "lexical";
d500 1
a500 2
	print "lexical is $var\n";
	print "global  is $main::var\n";
d502 2
a503 2
Alternatively you can use the compiler directive our() to bring a
dynamic variable into the current lexical scope.
d505 6
a510 12
	require 5.006; # our() did not exist before 5.6
	use vars '$var';

	local $var = "global";
	my $var    = "lexical";

	print "lexical is $var\n";

	{
	  our $var;
	  print "global  is $var\n";
	}
d523 1
a523 1
=head2 Why doesn't "my($foo) = E<lt>FILEE<gt>;" work right?
d607 1
a607 1
    }
d644 1
a644 1
See C<perlsyn/"Basic BLOCKs and Switch Statements"> for many other
d662 1
a662 1
A totally different approach is to create a hash of function references.
d677 1
a677 1
    }
d679 1
a679 1
=head2 How can I catch accesses to undefined variables, functions, or methods?
d686 6
a691 1
under C<use warnings>, you can promote the warning to an error.
d693 11
a703 1
	use warnings FATAL => qw(uninitialized);
d744 2
a745 3
You can use embedded POD to discard it.  Enclose the blocks you want
to comment out in POD markers, for example C<=for nobody> and C<=cut>
(which marks ends of POD blocks).
d750 8
d764 1
a764 3
    =cut

    # program continues
d769 1
a769 1
arbitrary grammar production.
d780 1
a780 1
	die "Shouldn't delete main package"
d795 1
a795 1
Or, if you're using a recent release of Perl, you can
d827 1
a827 1
    $USER_VARS{"fred"} = 23;
d863 1
a863 1
    $name = "barney";
d887 1
a887 1
    }
a896 25

=head2 What does "bad interpreter" mean?

The "bad interpreter" message comes from the shell, not perl.  The
actual message may vary depending on your platform, shell, and locale
settings.

If you see "bad interpreter - no such file or directory", the first
line in your perl script (the "shebang" line) does not contain the
right path to perl (or any other program capable of running scripts). 
Sometimes this happens when you move the script from one machine to
another and each machine has a different path to perl---/usr/bin/perl
versus /usr/local/bin/perl for instance.

If you see "bad interpreter: Permission denied", you need to make your
script executable.

In either case, you should still be able to run the scripts with perl
explicitly:

	% perl script.pl

If you get a message like "perl: command not found", perl is not in
your PATH, which might also mean that the location of perl is not
where you expect it so you need to adjust your shebang line.
@


1.1.1.6
log
@Import of stock perl 5.8.5
@
text
@d3 1
a3 1
perlfaq7 - General Perl Language Issues ($Revision: 1.6 $, $Date: 2003/12/03 03:02:45 $)
@


1.1.1.7
log
@perl 5.8.6 from CPAN
@
text
@d3 1
a3 1
perlfaq7 - General Perl Language Issues ($Revision: 1.18 $, $Date: 2004/11/03 22:54:08 $)
a99 10
    
Additionally, you can enable and disable categories of warnings.
You turn off the categories you want to ignore and you can still
get other categories of warnings.  See L<perllexwarn> for the
complete details, including the category names and hierarchy.

	{
	no warnings 'uninitialized';
	$a = $b + $c;
	}
d216 1
a216 1
      return sub { shift() + shift() };
d235 1
a235 1
        return sub { shift() + $addpiece };
@


1.1.1.8
log
@perl 5.8.8 import
@
text
@d3 1
a3 1
perlfaq7 - General Perl Language Issues ($Revision: 1.28 $, $Date: 2005/12/31 00:54:37 $)
d57 2
a58 2
    $foo{line}              $foo{'line'}
    bar => stuff            'bar' => stuff
d100 1
a100 1

d179 14
a192 20
(contributed by brian d foy)

L<perlmod>, L<perlmodlib>, L<perlmodstyle> explain modules
in all the gory details. L<perlnewmod> gives a brief
overview of the process along with a couple of suggestions
about style.

If you need to include C code or C library interfaces in
your module, you'll need h2xs.  h2xs will create the module
distribution structure and the initial interface files
you'll need.  L<perlxs> and L<perlxstut> explain the details.

If you don't need to use C code, other tools such as
ExtUtils::ModuleMaker and Module::Starter, can help you
create a skeleton module distribution.

You may also want to see Sam Tregar's "Writing Perl Modules
for CPAN" ( http://apress.com/book/bookDisplay.html?bID=14 )
which is the best hands-on guide to creating module
distributions.
d268 6
a273 8
This problem was fixed in perl 5.004_05, so preventing it means upgrading
your version of perl. ;)

Variable suicide is when you (temporarily or permanently) lose the value
of a variable.  It is caused by scoping through my() and local()
interacting with either closures or aliased foreach() iterator variables
and subroutine arguments.  It used to be easy to inadvertently lose a
variable's value this way, but now it's much harder.  Take this code:
d275 1
a275 1
    my $f = 'foo';
d277 1
a277 1
      while ($i++ < 3) { my $f = $f; $f .= $i; print $f, "\n" }
a281 10
If you are experiencing variable suicide, that C<my $f> in the subroutine
doesn't pick up a fresh copy of the C<$f> whose value is <foo>. The output
shows that inside the subroutine the value of C<$f> leaks through when it
shouldn't, as in this output:

	foobar
	foobarbar
	foobarbarbar
	Finally foo

d283 3
a285 7
C<my $f> should create a new lexical variable each time through the loop.
The expected output is:

	foobar
	foobar
	foobar
	Finally foo
d293 1
a293 1
See "Passing Regexes", below, for information on passing regular
d408 5
a412 1
(contributed by brian d foy)
d414 1
a414 17
Perl doesn't have "static" variables, which can only be accessed from
the function in which they are declared. You can get the same effect
with lexical variables, though.

You can fake a static variable by using a lexical variable which goes
out of scope. In this example, you define the subroutine C<counter>, and
it uses the lexical variable C<$count>. Since you wrap this in a BEGIN
block, C<$count> is defined at compile-time, but also goes out of
scope at the end of the BEGIN block. The BEGIN block also ensures that
the subroutine and the value it uses is defined at compile-time so the
subroutine is ready to use just like any other subroutine, and you can
put this code in the same place as other subroutines in the program
text (i.e. at the end of the code, typically). The subroutine
C<counter> still has a reference to the data, and is the only way you
can access the value (and each time you do, you increment the value).
The data in chunk of memory defined by C<$count> is private to
C<counter>.
d417 3
a419 2
        my $count = 1;
        sub counter { $count++ }
d422 2
a423 1
    my $start = count();
d425 3
a427 1
    .... # code that calls count();
d429 2
a430 12
    my $end = count();

In the previous example, you created a function-private variable
because only one function remembered its reference. You could define
multiple functions while the variable is in scope, and each function
can share the "private" variable. It's not really "static" because you
can access it outside the function while the lexical variable is in
scope, and even create references to it. In this example,
C<increment_count> and C<return_count> share the variable. One
function adds to the value and the other simply returns the value.
They can both access C<$count>, and since it has gone out of scope,
there is no other way to access it.
d432 10
a441 5
    BEGIN {
        my $count = 1;
        sub increment_count { $count++ }
        sub return_count    { $count }
    }
d443 1
a443 8
To declare a file-private variable, you still use a lexical variable.
A file is also a scope, so a lexical variable defined in the file
cannot be seen from any other file.

See L<perlsub/"Persistent Private Variables"> for more information.
The discussion of closures in L<perlref> may help you even though we
did not use anonymous subroutines in this answer. See
L<perlsub/"Persistent Private Variables"> for details.
d739 2
a740 4
to comment out in POD markers.  The <=begin> directive marks a section
for a specific formatter.  Use the C<comment> format, which no formatter
should claim to understand (by policy).  Mark the end of the block
with <=end>.
d744 1
a744 1
    =begin comment
a750 2
	=end comment

a888 2
(contributed by brian d foy)

d895 1
a895 1
right path to perl (or any other program capable of running scripts).
d898 1
a898 4
versus /usr/local/bin/perl for instance. It may also indicate
that the source machine has CRLF line terminators and the
destination machine has LF only: the shell tries to find
/usr/bin/perl<CR>, but can't.
d914 2
a915 2
Copyright (c) 1997-2006 Tom Christiansen, Nathan Torkington, and
other authors as noted. All rights reserved.
@


1.1.1.9
log
@import perl 5.10.0 from CPAN
@
text
@d3 1
a3 1
perlfaq7 - General Perl Language Issues ($Revision: 10100 $)
d25 6
a30 6
	$ for scalar values (number, string or reference)
	@@ for arrays
	% for hashes (associative arrays)
	& for subroutines (aka functions, procedures, methods)
	* for all types of that symbol name.  In version 4 you used them like
	  pointers, but in modern perls you can just use references.
d35 2
a36 2
	<> are used for inputting a record from a filehandle.
	\  takes a reference to something.
d55 4
a58 4
	This                    is like this
	------------            ---------------
	$foo{line}              $foo{'line'}
	bar => stuff            'bar' => stuff
d64 2
a65 6
	if ($whoops) { exit 1 }
	@@nums = (1, 2, 3);
	
	if ($whoops) {
		exit 1;
	}
d67 4
a70 1
	@@lines = (
d73 1
a73 1
	);
d79 1
a79 1
	$dir = (getpwnam($user))[7];
d83 1
a83 1
	($dev, $ino, undef, undef, $uid, $gid) = stat($file);
d96 1
a96 1
	{
d99 1
a99 1
	}
d114 1
a114 1
	{
d117 1
a117 1
	}
d138 1
a138 1
	unlink $file || die "snafu";
d142 1
a142 1
	unlink ($file || die "snafu");
d147 2
a148 2
	(unlink $file) || die "snafu";
	unlink $file or die "snafu";
d163 1
a163 1
	($maybe ? $a : $b) = $x;
d171 4
a174 4
	$person = {};                   # new anonymous hash
	$person->{AGE}  = 24;           # set field AGE to 24
	$person->{NAME} = "Nat";        # set field NAME to "Nat"
	
a199 39
=head2 How do I adopt or take over a module already on CPAN?

(contributed by brian d foy)

The easiest way to take over a module is to have the current
module maintainer either make you a co-maintainer or transfer
the module to you.

If you can't reach the author for some reason (e.g. email bounces),
the PAUSE admins at modules@@perl.org can help. The PAUSE admins
treat each case individually.

=over 4

=item

Get a login for the Perl Authors Upload Server (PAUSE) if you don't
already have one: http://pause.perl.org

=item

Write to modules@@perl.org explaining what you did to contact the
current maintainer. The PAUSE admins will also try to reach the
maintainer.

=item 

Post a public message in a heavily trafficked site announcing your
intention to take over the module.

=item

Wait a bit. The PAUSE admins don't want to act too quickly in case
the current maintainer is on holiday. If there's no response to 
private communication or the public post, a PAUSE admin can transfer
it to you.

=back

d216 9
a224 10
hard-to-explain meaning. Usually, closures are implemented in Perl as
anonymous subroutines with lasting references to lexical variables
outside their own scopes. These lexicals magically refer to the
variables that were around when the subroutine was defined (deep 
binding).

Closures are most often used in programming languages where you can
have the return value of a function be itself a function, as you can
in Perl. Note that some languages provide anonymous functions but are
not capable of providing proper closures: the Python language, for
d229 1
a229 1
Here's a classic non-closure function-generating function:
d231 3
a233 3
	sub add_function_generator {
		return sub { shift() + shift() };
		}
d235 2
a236 2
	$add_sub = add_function_generator();
	$sum = $add_sub->(4,5);                # $sum is 9 now.
d238 4
a241 4
The anonymous subroutine returned by add_function_generator() isn't
technically a closure because it refers to no lexicals outside its own
scope.  Using a closure gives you a I<function template> with some
customization slots left out to be filled later.
d249 7
a255 7
	sub make_adder {
		my $addpiece = shift;
		return sub { shift() + $addpiece };
	}
	
	$f1 = make_adder(20);
	$f2 = make_adder(555);
d264 2
a265 2
	my $line;
	timeout( 30, sub { $line = <STDIN> } );
a271 15
Another use for a closure is to make a variable I<private> to a
named subroutine, e.g. a counter that gets initialized at creation
time of the sub and can only be modified from within the sub.
This is sometimes used with a BEGIN block in package files to make
sure a variable doesn't get meddled with during the lifetime of the
package:

	BEGIN {
		my $id = 0;
		sub next_id { ++$id }
	}

This is discussed in more detail in L<perlsub>, see the entry on
I<Persistent Private Variables>.

d283 6
a288 7
	my $f = 'foo';
	sub T {
		while ($i++ < 3) { my $f = $f; $f .= "bar"; print $f, "\n" }
		}

	T;
	print "Finally $f\n";
d315 2
a316 2
See "Passing Regexes", later in L<perlfaq7>, for information on
passing regular expressions.
d325 1
a325 1
	func( \$some_scalar );
d327 2
a328 2
	func( \@@some_array  );
	func( [ 1 .. 10 ]   );
d330 2
a331 2
	func( \%some_hash   );
	func( { this => 10, that => 20 }   );
d333 2
a334 2
	func( \&some_func   );
	func( sub { $_[0] ** $_[1] }   );
d347 1
a347 1
		my $line = <$passed_fh>;
d363 3
a365 3
	sub compare($$) {
		my ($val1, $regex) = @@_;
		my $retval = $val1 =~ /$regex/;
d367 2
a368 2
	}
	$match = compare("old McDonald", qr/d.*D/i);
d376 3
a378 3
	sub compare($$) {
		my ($val1, $regex) = @@_;
		my $retval = eval { $val1 =~ /$regex/ };
d381 1
a381 1
	}
d383 1
a383 1
	$match = compare("old McDonald", q/($?i)d.*D/);
d387 1
a387 1
	return eval "\$val =~ /$regex/";   # WRONG
d392 1
a392 1
	$pattern_of_evil = 'danger ${ system("rm -rf * &") } danger';
d394 1
a394 1
	eval "\$string =~ /$pattern_of_evil/";
d405 7
a411 7
	call_a_lot(10, $some_obj, "methname")
	sub call_a_lot {
		my ($count, $widget, $trick) = @@_;
		for (my $i = 0; $i < $count; $i++) {
			$widget->$trick();
		}
	}
d416 6
a421 6
	my $whatnot =  sub { $some_obj->obfuscate(@@args) };
	func($whatnot);
	sub func {
		my $code = shift;
		&$code();
	}
d450 10
a459 10
	BEGIN {
		my $count = 1;
		sub counter { $count++ }
	}
	
	my $start = counter();
	
	.... # code that calls counter();
	
	my $end = counter();
d472 5
a476 5
	BEGIN {
		my $count = 1;
		sub increment_count { $count++ }
		sub return_count    { $count }
	}
d502 19
a520 19
	sub visible {
		print "var has value $var\n";
		}
	
	sub dynamic {
		local $var = 'local';	# new temporary value for the still-global
		visible();              #   variable called $var
		}
	
	sub lexical {
		my $var = 'private';    # new private variable, $var
		visible();              # (invisible outside of sub scope)
		}
	
	$var = 'global';
	
	visible();      		# prints global
	dynamic();      		# prints local
	lexical();      		# prints global
d559 2
a560 2
		our $var;
		print "global  is $var\n";
d588 3
a590 3
	local($foo) = <FILE>;	    # WRONG
	local($foo) = scalar(<FILE>);   # ok
	local $foo  = <FILE>;	    # right
d595 2
a596 2
	my($foo) = <FILE>;	# WRONG
	my $foo  = <FILE>;	# right
d634 25
a658 2
If one wants to use pure Perl and to be compatible with Perl versions
prior to 5.10, the general answer is to write a construct like this:
d660 2
a661 9
	for ($variable_to_test) {
		if    (/pat1/)  { }     # do something
		elsif (/pat2/)  { }     # do something else
		elsif (/pat3/)  { }     # do something else
		else            { }     # default
		}

Here's a simple example of a switch based on pattern matching,
lined up in a way to make it look more like a switch statement.
d695 2
a696 1
See L<perlsyn> for other examples in this style.
d706 6
a711 6
	chomp($answer = <>);
	if    ("SEND"  =~ /^\Q$answer/i) { print "Action is send\n"  }
	elsif ("STOP"  =~ /^\Q$answer/i) { print "Action is stop\n"  }
	elsif ("ABORT" =~ /^\Q$answer/i) { print "Action is abort\n" }
	elsif ("LIST"  =~ /^\Q$answer/i) { print "Action is list\n"  }
	elsif ("EDIT"  =~ /^\Q$answer/i) { print "Action is edit\n"  }
d715 14
a728 23
	my %commands = (
		"happy" => \&joy,
		"sad",  => \&sullen,
		"done"  => sub { die "See ya!" },
		"mad"   => \&angry,
	);
	
	print "How are you? ";
	chomp($string = <STDIN>);
	if ($commands{$string}) {
		$commands{$string}->();
	} else {
		print "No such command: $string\n";
	}

Note that starting from version 5.10, Perl has now a native switch
statement. See L<perlsyn>.

Starting from Perl 5.8, a source filter module, C<Switch>, can also be
used to get switch and case. Its use is now discouraged, because it's
not fully compatible with the native switch of Perl 5.10, and because,
as it's implemented as a source filter, it doesn't always work as intended
when complex syntax is involved.
d766 1
a766 1
	my $packname = __PACKAGE__;
d772 5
a776 5
	sub amethod {
		my $self  = shift;
		my $class = ref($self) || $self;
		warn "called me from a $class object";
		}
d786 9
a794 9
	# program is here
	
	=begin comment
	
	all of this stuff
	
	here will be ignored
	by everyone
	
d796 4
a799 4
	
	=cut
	
	# program continues
d812 15
a826 16
	sub scrub_package {
		no strict 'refs';
		my $pack = shift;
		die "Shouldn't delete main package"
			if $pack eq "" || $pack eq "main";
		my $stash = *{$pack . '::'}{HASH};
		my $name;
		foreach $name (keys %$stash) {
			my $fullname = $pack . '::' . $name;
			# Get rid of everything with that name.
			undef $$fullname;
			undef @@$fullname;
			undef %$fullname;
			undef &$fullname;
			undef *$fullname;
	}
d828 1
d838 3
a840 3
	$fred    = 23;
	$varname = "fred";
	++$$varname;         # $fred now 24
d862 3
a864 3
	$USER_VARS{"fred"} = 23;
	$varname = "fred";
	$USER_VARS{$varname}++;  # not $$varname++
d874 2
a875 2
	$str = 'this has a $fred and $barney in it';
	$str =~ s/(\$\w+)/$1/eeg;		  # need double eval
d880 1
a880 1
	$str =~ s/\$(\w+)/$USER_VARS{$1}/g;   # no /e here at all
d886 2
a887 2
	$str = 'this has a %fred% and %barney% in it';
	$str =~ s/%(\w+)%/$USER_VARS{$1}/g;   # no /e here at all
d895 2
a896 2
	$name = "fred";
	$$name{WIFE} = "wilma";     # set %fred
d898 2
a899 2
	$name = "barney";
	$$name{WIFE} = "betty";	# set %barney
d904 2
a905 2
	$folks{"fred"}{WIFE}   = "wilma";
	$folks{"barney"}{WIFE} = "betty";
d918 5
a922 5
	@@colors = qw(red blue green yellow orange purple violet);
	for my $name (@@colors) {
		no strict 'refs';  # renege for the block
		*$name = sub { "<FONT COLOR='$name'>@@_</FONT>" };
	}
d945 1
a945 1
another and each machine has a different path to perl--/usr/bin/perl
a962 8
=head1 REVISION

Revision: $Revision: 10100 $

Date: $Date: 2007-10-21 20:59:30 +0200 (Sun, 21 Oct 2007) $

See L<perlfaq> for source control details and availability.

d965 1
a965 1
Copyright (c) 1997-2007 Tom Christiansen, Nathan Torkington, and
@


1.1.1.10
log
@import perl 5.10.1
@
text
@d3 1
a3 1
perlfaq7 - General Perl Language Issues
d66 1
a66 1

d156 1
a156 1
binds more tightly even than unary minus, making C<-2**2> produce a
d175 1
a175 1

a204 3
The full answer to this can be found at
http://cpan.org/modules/04pause.html#takeover

d226 1
a226 1
=item
d234 1
a234 1
the current maintainer is on holiday. If there's no response to
a240 1
X<class, creation> X<package>
d242 2
a243 11
(contributed by brian d foy)

In Perl, a class is just a package, and methods are just subroutines.
Perl doesn't get more formal than that and lets you set up the package
just the way that you like it (that is, it doesn't set up anything for
you).

The Perl documentation has several tutorials that cover class
creation, including L<perlboot> (Barnyard Object Oriented Tutorial),
L<perltoot> (Tom's Object Oriented Tutorial), L<perlbot> (Bag o'
Object Tricks), and L<perlobj>.
d259 1
a259 1
variables that were around when the subroutine was defined (deep
d294 1
a294 1

d489 3
a491 5
In Perl 5.10, declare the variable with C<state>. The C<state>
declaration creates the lexical variable that persists between calls
to the subroutine:

	sub counter { state $count = 1; $counter++ }
d511 1
a511 1

d513 1
a513 1

d515 1
a515 1

d562 1
a562 1

d567 1
a567 1

d572 1
a572 1

d574 1
a574 1

d673 15
a687 34
(contributed by brian d foy)

Calling a subroutine as C<&foo> with no trailing parentheses ignores
the prototype of C<foo> and passes it the current value of the argumet
list, C<@@_>. Here's an example; the C<bar> subroutine calls C<&foo>,
which prints what its arguments list:

	sub bar { &foo }

	sub foo { print "Args in foo are: @@_\n" }

	bar( qw( a b c ) );

When you call C<bar> with arguments, you see that C<foo> got the same C<@@_>:

	Args in foo are: a b c

Calling the subroutine with trailing parentheses, with or without arguments,
does not use the current C<@@_> and respects the subroutine prototype. Changing
the example to put parentheses after the call to C<foo> changes the program:

	sub bar { &foo() }

	sub foo { print "Args in foo are: @@_\n" }

	bar( qw( a b c ) );

Now the output shows that C<foo> doesn't get the C<@@_> from its caller.

	Args in foo are:

The main use of the C<@@_> pass-through feature is to write subroutines
whose main job it is to call other subroutines for you. For further
details, see L<perlsub>.
a690 11
In Perl 5.10, use the C<given-when> construct described in L<perlsyn>:

	use 5.010;

	given ( $string ) {
		when( 'Fred' )        { say "I found Fred!" }
		when( 'Barney' )      { say "I found Barney!" }
		when( /Bamm-?Bamm/ )  { say "I found Bamm-Bamm!" }
		default               { say "I don't recognize the name!" }
		};

d692 1
a692 1
prior to 5.10, the general answer is to use C<if-elsif-else>:
d761 1
a761 1

d770 3
d810 1
a810 3
=head2 How can I find out my current or calling package?

(contributed by brian d foy)
d812 2
a813 4
To find the package you are currently in, use the special literal
C<__PACKAGE__>, as documented in L<perldata>. You can only use the
special literals as separate tokens, so you can't interpolate them
into strings like you can with variables:
d815 1
a815 2
	my $current_package = __PACKAGE__;
	print "I am in package $current_package\n";
d817 3
a819 3
This is different from finding out the package an object is blessed
into, which might not be the current package. For that, use C<blessed>
from C<Scalar::Util>, part of the Standard Library since Perl 5.8:
d821 5
a825 2
	use Scalar::Util qw(blessed);
	my $object_package = blessed( $object );
d827 1
a827 2
Most of the time, you shouldn't care what package an object is blessed
into, however, as long as it claims to inherit from that class:
d829 5
a833 47
	my $is_right_class = eval { $object->isa( $package ) }; # true or false

If you want to find the package calling your code, perhaps to give better
diagnostics as C<Carp> does, use the C<caller> built-in:

	sub foo {
		my @@args = ...;
		my( $package, $filename, $line ) = caller;

		print "I was called from package $package\n";
		);

By default, your program starts in package C<main>, so you should
always be in some package unless someone uses the C<package> built-in
with no namespace. See the C<package> entry in L<perlfunc> for the
details of empty packges.

=head2 How can I comment out a large block of Perl code?

(contributed by brian d foy)

The quick-and-dirty way to comment out more than one line of Perl is
to surround those lines with Pod directives. You have to put these
directives at the beginning of the line and somewhere where Perl
expects a new statement (so not in the middle of statements like the #
comments). You end the comment with C<=cut>, ending the Pod section:

	=pod

	my $object = NotGonnaHappen->new();

	ignored_sub();

	$wont_be_assigned = 37;

	=cut

The quick-and-dirty method only works well when you don't plan to 
leave the commented code in the source. If a Pod parser comes along,
you're multiline comment is going to show up in the Pod translation.
A better way hides it from Pod parsers as well. 

The C<=begin> directive can mark a section for a particular purpose.
If the Pod parser doesn't want to handle it, it just ignores it. Label
the comments with C<comment>. End the comment using C<=end> with the
same label. You still need the C<=cut> to go back to Perl code from
the Pod comment:
d835 2
d838 6
a843 7

	my $object = NotGonnaHappen->new();

	ignored_sub();

	$wont_be_assigned = 37;

d845 4
d850 4
a853 1
	=cut
d855 1
a855 1
For more information on Pod, check out L<perlpod> and L<perlpodspec>.
d1014 1
a1014 1
Revision: $Revision$
d1016 1
a1016 1
Date: $Date$
d1022 1
a1022 1
Copyright (c) 1997-2009 Tom Christiansen, Nathan Torkington, and
@


1.1.1.11
log
@Perl 5.12.2 from CPAN
@
text
@d205 3
d381 6
a386 3
You need to pass references to these objects.  See L<perlsub/"Pass by
Reference"> for this particular question, and L<perlref> for
information on references.
d426 6
a431 3
Here's an example of how to pass in a string and a regular expression
for it to match against. You construct the pattern with the C<qr//>
operator:
d440 31
d691 1
a691 1
the prototype of C<foo> and passes it the current value of the argument
d693 1
a693 1
which prints its arguments list:
a863 15
If you want to find the package calling your code, perhaps to give better
diagnostics as C<Carp> does, use the C<caller> built-in:

	sub foo {
		my @@args = ...;
		my( $package, $filename, $line ) = caller;

		print "I was called from package $package\n";
		);

By default, your program starts in package C<main>, so you should
always be in some package unless someone uses the C<package> built-in
with no namespace. See the C<package> entry in L<perlfunc> for the
details of empty packages.

d876 6
a881 3
And, with Perl 5.10 and later, you don't have to check for an
inheritance to see if the object can handle a role. For that, you can
use C<DOES>, which comes from C<UNIVERSAL>:
d883 2
a884 1
	my $class_does_it = eval { $object->DOES( $role ) }; # true or false
d886 4
a889 1
You can safely replace C<isa> with C<DOES> (although the converse is not true).
d911 1
a911 1
The quick-and-dirty method only works well when you don't plan to
d914 1
a914 1
A better way hides it from Pod parsers as well.
d1091 8
d1101 1
a1101 1
Copyright (c) 1997-2010 Tom Christiansen, Nathan Torkington, and
@


