head	1.8;
access;
symbols
	OPENBSD_4_6:1.7.0.6
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.2
	OPENBSD_4_5_BASE:1.7
	PERL_5_10_0:1.1.1.8
	OPENBSD_4_4:1.6.0.10
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.8
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.6
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.4
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.2
	OPENBSD_4_0_BASE:1.6
	PERL_5_8_8:1.1.1.7
	OPENBSD_3_9:1.5.0.6
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.4
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.2
	OPENBSD_3_7_BASE:1.5
	PERL_5_8_6:1.1.1.6
	OPENBSD_3_6:1.4.0.2
	OPENBSD_3_6_BASE:1.4
	PERL_5_8_5:1.1.1.5
	PERL_5_8_3:1.1.1.4
	OPENBSD_3_5:1.3.0.2
	OPENBSD_3_5_BASE:1.3
	PERL_5_8_2:1.1.1.4
	OPENBSD_3_4:1.2.0.4
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.2
	OPENBSD_3_3_BASE:1.2
	PERL_5_8_0:1.1.1.3
	OPENBSD_3_2:1.1.1.2.0.6
	OPENBSD_3_2_BASE:1.1.1.2
	OPENBSD_3_1:1.1.1.2.0.4
	OPENBSD_3_1_BASE:1.1.1.2
	OPENBSD_3_0:1.1.1.2.0.2
	OPENBSD_3_0_BASE:1.1.1.2
	PERL_5_6_1:1.1.1.2
	OPENBSD_2_9:1.1.1.1.0.6
	OPENBSD_2_9_BASE:1.1.1.1
	OPENBSD_2_8:1.1.1.1.0.4
	OPENBSD_2_8_BASE:1.1.1.1
	OPENBSD_2_7:1.1.1.1.0.2
	OPENBSD_2_7_BASE:1.1.1.1
	PERL_5_6_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;


1.8
date	2009.10.12.18.24.47;	author millert;	state dead;
branches;
next	1.7;

1.7
date	2008.09.29.17.36.16;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2006.03.28.19.23.10;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2005.01.15.21.30.37;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2004.08.09.18.10.16;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2003.12.03.03.02.45;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2003.02.26.18.32.58;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2000.04.06.16.10.26;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.04.06.16.10.26;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.05.24.18.24.40;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.10.27.22.15.05;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2003.12.03.02.44.22;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2004.08.09.17.48.15;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2005.01.15.21.17.55;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2006.03.28.18.49.21;	author millert;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2008.09.29.17.18.52;	author millert;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Merge in perl 5.10.1
@
text
@-*- buffer-read-only: t -*-

!!!!!!!   DO NOT EDIT THIS FILE   !!!!!!!
This file is built by autodoc.pl extracting documentation from the C source
files.

=head1 NAME

perlintern - autogenerated documentation of purely B<internal>
		 Perl functions

=head1 DESCRIPTION
X<internal Perl functions> X<interpreter functions>

This file is the autogenerated documentation of functions in the
Perl interpreter that are documented using Perl's internal documentation
format but are not marked as part of the Perl API. In other words,
B<they are not for use in extensions>!


=head1 CV reference counts and CvOUTSIDE

=over 8

=item CvWEAKOUTSIDE
X<CvWEAKOUTSIDE>

Each CV has a pointer, C<CvOUTSIDE()>, to its lexically enclosing
CV (if any). Because pointers to anonymous sub prototypes are
stored in C<&> pad slots, it is a possible to get a circular reference,
with the parent pointing to the child and vice-versa. To avoid the
ensuing memory leak, we do not increment the reference count of the CV
pointed to by C<CvOUTSIDE> in the I<one specific instance> that the parent
has a C<&> pad slot pointing back to us. In this case, we set the
C<CvWEAKOUTSIDE> flag in the child. This allows us to determine under what
circumstances we should decrement the refcount of the parent when freeing
the child.

There is a further complication with non-closure anonymous subs (i.e. those
that do not refer to any lexicals outside that sub). In this case, the
anonymous prototype is shared rather than being cloned. This has the
consequence that the parent may be freed while there are still active
children, eg

    BEGIN { $a = sub { eval '$x' } }

In this case, the BEGIN is freed immediately after execution since there
are no active references to it: the anon sub prototype has
C<CvWEAKOUTSIDE> set since it's not a closure, and $a points to the same
CV, so it doesn't contribute to BEGIN's refcount either.  When $a is
executed, the C<eval '$x'> causes the chain of C<CvOUTSIDE>s to be followed,
and the freed BEGIN is accessed.

To avoid this, whenever a CV and its associated pad is freed, any
C<&> entries in the pad are explicitly removed from the pad, and if the
refcount of the pointed-to anon sub is still positive, then that
child's C<CvOUTSIDE> is set to point to its grandparent. This will only
occur in the single specific case of a non-closure anon prototype
having one or more active references (such as C<$a> above).

One other thing to consider is that a CV may be merely undefined
rather than freed, eg C<undef &foo>. In this case, its refcount may
not have reached zero, but we still delete its pad and its C<CvROOT> etc.
Since various children may still have their C<CvOUTSIDE> pointing at this
undefined CV, we keep its own C<CvOUTSIDE> for the time being, so that
the chain of lexical scopes is unbroken. For example, the following
should print 123:

    my $x = 123;
    sub tmp { sub { eval '$x' } }
    my $a = tmp();
    undef &tmp;
    print  $a->();

	bool	CvWEAKOUTSIDE(CV *cv)

=for hackers
Found in file cv.h


=back

=head1 Functions in file pad.h


=over 8

=item CX_CURPAD_SAVE
X<CX_CURPAD_SAVE>

Save the current pad in the given context block structure.

	void	CX_CURPAD_SAVE(struct context)

=for hackers
Found in file pad.h

=item CX_CURPAD_SV
X<CX_CURPAD_SV>

Access the SV at offset po in the saved current pad in the given
context block structure (can be used as an lvalue).

	SV *	CX_CURPAD_SV(struct context, PADOFFSET po)

=for hackers
Found in file pad.h

=item PAD_BASE_SV
X<PAD_BASE_SV>

Get the value from slot C<po> in the base (DEPTH=1) pad of a padlist

	SV *	PAD_BASE_SV(PADLIST padlist, PADOFFSET po)

=for hackers
Found in file pad.h

=item PAD_CLONE_VARS
X<PAD_CLONE_VARS>

|CLONE_PARAMS* param
Clone the state variables associated with running and compiling pads.

	void	PAD_CLONE_VARS(PerlInterpreter *proto_perl \)

=for hackers
Found in file pad.h

=item PAD_COMPNAME_FLAGS
X<PAD_COMPNAME_FLAGS>

Return the flags for the current compiling pad name
at offset C<po>. Assumes a valid slot entry.

	U32	PAD_COMPNAME_FLAGS(PADOFFSET po)

=for hackers
Found in file pad.h

=item PAD_COMPNAME_GEN
X<PAD_COMPNAME_GEN>

The generation number of the name at offset C<po> in the current
compiling pad (lvalue). Note that C<SvUVX> is hijacked for this purpose.

	STRLEN	PAD_COMPNAME_GEN(PADOFFSET po)

=for hackers
Found in file pad.h

=item PAD_COMPNAME_GEN_set
X<PAD_COMPNAME_GEN_set>

Sets the generation number of the name at offset C<po> in the current
ling pad (lvalue) to C<gen>.  Note that C<SvUV_set> is hijacked for this purpose.

	STRLEN	PAD_COMPNAME_GEN_set(PADOFFSET po, int gen)

=for hackers
Found in file pad.h

=item PAD_COMPNAME_OURSTASH
X<PAD_COMPNAME_OURSTASH>

Return the stash associated with an C<our> variable.
Assumes the slot entry is a valid C<our> lexical.

	HV *	PAD_COMPNAME_OURSTASH(PADOFFSET po)

=for hackers
Found in file pad.h

=item PAD_COMPNAME_PV
X<PAD_COMPNAME_PV>

Return the name of the current compiling pad name
at offset C<po>. Assumes a valid slot entry.

	char *	PAD_COMPNAME_PV(PADOFFSET po)

=for hackers
Found in file pad.h

=item PAD_COMPNAME_TYPE
X<PAD_COMPNAME_TYPE>

Return the type (stash) of the current compiling pad name at offset
C<po>. Must be a valid name. Returns null if not typed.

	HV *	PAD_COMPNAME_TYPE(PADOFFSET po)

=for hackers
Found in file pad.h

=item PAD_DUP
X<PAD_DUP>

Clone a padlist.

	void	PAD_DUP(PADLIST dstpad, PADLIST srcpad, CLONE_PARAMS* param)

=for hackers
Found in file pad.h

=item PAD_RESTORE_LOCAL
X<PAD_RESTORE_LOCAL>

Restore the old pad saved into the local variable opad by PAD_SAVE_LOCAL()

	void	PAD_RESTORE_LOCAL(PAD *opad)

=for hackers
Found in file pad.h

=item PAD_SAVE_LOCAL
X<PAD_SAVE_LOCAL>

Save the current pad to the local variable opad, then make the
current pad equal to npad

	void	PAD_SAVE_LOCAL(PAD *opad, PAD *npad)

=for hackers
Found in file pad.h

=item PAD_SAVE_SETNULLPAD
X<PAD_SAVE_SETNULLPAD>

Save the current pad then set it to null.

	void	PAD_SAVE_SETNULLPAD()

=for hackers
Found in file pad.h

=item PAD_SETSV
X<PAD_SETSV>

Set the slot at offset C<po> in the current pad to C<sv>

	SV *	PAD_SETSV(PADOFFSET po, SV* sv)

=for hackers
Found in file pad.h

=item PAD_SET_CUR
X<PAD_SET_CUR>

Set the current pad to be pad C<n> in the padlist, saving
the previous current pad. NB currently this macro expands to a string too
long for some compilers, so it's best to replace it with

    SAVECOMPPAD();
    PAD_SET_CUR_NOSAVE(padlist,n);


	void	PAD_SET_CUR(PADLIST padlist, I32 n)

=for hackers
Found in file pad.h

=item PAD_SET_CUR_NOSAVE
X<PAD_SET_CUR_NOSAVE>

like PAD_SET_CUR, but without the save

	void	PAD_SET_CUR_NOSAVE(PADLIST padlist, I32 n)

=for hackers
Found in file pad.h

=item PAD_SV
X<PAD_SV>

Get the value at offset C<po> in the current pad

	void	PAD_SV(PADOFFSET po)

=for hackers
Found in file pad.h

=item PAD_SVl
X<PAD_SVl>

Lightweight and lvalue version of C<PAD_SV>.
Get or set the value at offset C<po> in the current pad.
Unlike C<PAD_SV>, does not print diagnostics with -DX.
For internal use only.

	SV *	PAD_SVl(PADOFFSET po)

=for hackers
Found in file pad.h

=item SAVECLEARSV
X<SAVECLEARSV>

Clear the pointed to pad value on scope exit. (i.e. the runtime action of 'my')

	void	SAVECLEARSV(SV **svp)

=for hackers
Found in file pad.h

=item SAVECOMPPAD
X<SAVECOMPPAD>

save PL_comppad and PL_curpad





	void	SAVECOMPPAD()

=for hackers
Found in file pad.h

=item SAVEPADSV
X<SAVEPADSV>

Save a pad slot (used to restore after an iteration)

XXX DAPM it would make more sense to make the arg a PADOFFSET
	void	SAVEPADSV(PADOFFSET po)

=for hackers
Found in file pad.h


=back

=head1 GV Functions

=over 8

=item is_gv_magical
X<is_gv_magical>

Returns C<TRUE> if given the name of a magical GV.

Currently only useful internally when determining if a GV should be
created even in rvalue contexts.

C<flags> is not used at present but available for future extension to
allow selecting particular classes of magical variable.

Currently assumes that C<name> is NUL terminated (as well as len being valid).
This assumption is met by all callers within the perl core, which all pass
pointers returned by SvPV.

	bool	is_gv_magical(const char *name, STRLEN len, U32 flags)

=for hackers
Found in file gv.c

=item is_gv_magical_sv
X<is_gv_magical_sv>

Returns C<TRUE> if given the name of a magical GV. Calls is_gv_magical.

	bool	is_gv_magical_sv(SV *name, U32 flags)

=for hackers
Found in file gv.c


=back

=head1 Hash Manipulation Functions

=over 8

=item refcounted_he_chain_2hv
X<refcounted_he_chain_2hv>

Generates and returns a C<HV *> by walking up the tree starting at the passed
in C<struct refcounted_he *>.

	HV *	refcounted_he_chain_2hv(const struct refcounted_he *c)

=for hackers
Found in file hv.c

=item refcounted_he_free
X<refcounted_he_free>

Decrements the reference count of the passed in C<struct refcounted_he *>
by one. If the reference count reaches zero the structure's memory is freed,
and C<refcounted_he_free> iterates onto the parent node.

	void	refcounted_he_free(struct refcounted_he *he)

=for hackers
Found in file hv.c

=item refcounted_he_new
X<refcounted_he_new>

Creates a new C<struct refcounted_he>. As S<key> is copied, and value is
stored in a compact form, all references remain the property of the caller.
The C<struct refcounted_he> is returned with a reference count of 1.

	struct refcounted_he *	refcounted_he_new(struct refcounted_he *const parent, SV *const key, SV *const value)

=for hackers
Found in file hv.c


=back

=head1 IO Functions

=over 8

=item start_glob
X<start_glob>

Function called by C<do_readline> to spawn a glob (or do the glob inside
perl on VMS). This code used to be inline, but now perl uses C<File::Glob>
this glob starter is only used by miniperl during the build process.
Moving it away shrinks pp_hot.c; shrinking pp_hot.c helps speed perl up.

	PerlIO*	start_glob(SV* pattern, IO *io)

=for hackers
Found in file doio.c


=back

=head1 Magical Functions

=over 8

=item magic_sethint
X<magic_sethint>

Triggered by a delete from %^H, records the key to
C<PL_compiling.cop_hints_hash>.

	int	magic_sethint(SV* sv, MAGIC* mg)

=for hackers
Found in file mg.c

=item mg_localize
X<mg_localize>

Copy some of the magic from an existing SV to new localized version of
that SV. Container magic (eg %ENV, $1, tie) gets copied, value magic
doesn't (eg taint, pos).

	void	mg_localize(SV* sv, SV* nsv)

=for hackers
Found in file mg.c


=back

=head1 MRO Functions

=over 8

=item mro_get_linear_isa_c3
X<mro_get_linear_isa_c3>

Returns the C3 linearization of @@ISA
the given stash.  The return value is a read-only AV*.
C<level> should be 0 (it is used internally in this
function's recursion).

You are responsible for C<SvREFCNT_inc()> on the
return value if you plan to store it anywhere
semi-permanently (otherwise it might be deleted
out from under you the next time the cache is
invalidated).

	AV*	mro_get_linear_isa_c3(HV* stash, I32 level)

=for hackers
Found in file mro.c

=item mro_get_linear_isa_dfs
X<mro_get_linear_isa_dfs>

Returns the Depth-First Search linearization of @@ISA
the given stash.  The return value is a read-only AV*.
C<level> should be 0 (it is used internally in this
function's recursion).

You are responsible for C<SvREFCNT_inc()> on the
return value if you plan to store it anywhere
semi-permanently (otherwise it might be deleted
out from under you the next time the cache is
invalidated).

	AV*	mro_get_linear_isa_dfs(HV* stash, I32 level)

=for hackers
Found in file mro.c

=item mro_isa_changed_in
X<mro_isa_changed_in>

Takes the necessary steps (cache invalidations, mostly)
when the @@ISA of the given package has changed.  Invoked
by the C<setisa> magic, should not need to invoke directly.

	void	mro_isa_changed_in(HV* stash)

=for hackers
Found in file mro.c


=back

=head1 Pad Data Structures

=over 8

=item CvPADLIST
X<CvPADLIST>

CV's can have CvPADLIST(cv) set to point to an AV.

For these purposes "forms" are a kind-of CV, eval""s are too (except they're
not callable at will and are always thrown away after the eval"" is done
executing). Require'd files are simply evals without any outer lexical
scope.

XSUBs don't have CvPADLIST set - dXSTARG fetches values from PL_curpad,
but that is really the callers pad (a slot of which is allocated by
every entersub).

The CvPADLIST AV has does not have AvREAL set, so REFCNT of component items
is managed "manual" (mostly in pad.c) rather than normal av.c rules.
The items in the AV are not SVs as for a normal AV, but other AVs:

0'th Entry of the CvPADLIST is an AV which represents the "names" or rather
the "static type information" for lexicals.

The CvDEPTH'th entry of CvPADLIST AV is an AV which is the stack frame at that
depth of recursion into the CV.
The 0'th slot of a frame AV is an AV which is @@_.
other entries are storage for variables and op targets.

During compilation:
C<PL_comppad_name> is set to the names AV.
C<PL_comppad> is set to the frame AV for the frame CvDEPTH == 1.
C<PL_curpad> is set to the body of the frame AV (i.e. AvARRAY(PL_comppad)).

During execution, C<PL_comppad> and C<PL_curpad> refer to the live
frame of the currently executing sub.

Iterating over the names AV iterates over all possible pad
items. Pad slots that are SVs_PADTMP (targets/GVs/constants) end up having
&PL_sv_undef "names" (see pad_alloc()).

Only my/our variable (SVs_PADMY/SVs_PADOUR) slots get valid names.
The rest are op targets/GVs/constants which are statically allocated
or resolved at compile time.  These don't have names by which they
can be looked up from Perl code at run time through eval"" like
my/our variables can be.  Since they can't be looked up by "name"
but only by their index allocated at compile time (which is usually
in PL_op->op_targ), wasting a name SV for them doesn't make sense.

The SVs in the names AV have their PV being the name of the variable.
xlow+1..xhigh inclusive in the NV union is a range of cop_seq numbers for
which the name is valid.  For typed lexicals name SV is SVt_PVMG and SvSTASH
points at the type.  For C<our> lexicals, the type is also SVt_PVMG, with the
SvOURSTASH slot pointing at the stash of the associated global (so that
duplicate C<our> declarations in the same package can be detected).  SvUVX is
sometimes hijacked to store the generation number during compilation.

If SvFAKE is set on the name SV, then that slot in the frame AV is
a REFCNT'ed reference to a lexical from "outside". In this case,
the name SV does not use xlow and xhigh to store a cop_seq range, since it is
in scope throughout. Instead xhigh stores some flags containing info about
the real lexical (is it declared in an anon, and is it capable of being
instantiated multiple times?), and for fake ANONs, xlow contains the index
within the parent's pad where the lexical's value is stored, to make
cloning quicker.

If the 'name' is '&' the corresponding entry in frame AV
is a CV representing a possible closure.
(SvFAKE and name of '&' is not a meaningful combination currently but could
become so if C<my sub foo {}> is implemented.)

Note that formats are treated as anon subs, and are cloned each time
write is called (if necessary).

The flag SVf_PADSTALE is cleared on lexicals each time the my() is executed,
and set on scope exit. This allows the 'Variable $x is not available' warning
to be generated in evals, such as 

    { my $x = 1; sub f { eval '$x'} } f();

	AV *	CvPADLIST(CV *cv)

=for hackers
Found in file pad.c

=item cv_clone
X<cv_clone>

Clone a CV: make a new CV which points to the same code etc, but which
has a newly-created pad built by copying the prototype pad and capturing
any outer lexicals.

	CV*	cv_clone(CV* proto)

=for hackers
Found in file pad.c

=item cv_dump
X<cv_dump>

dump the contents of a CV

	void	cv_dump(const CV *cv, const char *title)

=for hackers
Found in file pad.c

=item do_dump_pad
X<do_dump_pad>

Dump the contents of a padlist

	void	do_dump_pad(I32 level, PerlIO *file, PADLIST *padlist, int full)

=for hackers
Found in file pad.c

=item intro_my
X<intro_my>

"Introduce" my variables to visible status.

	U32	intro_my()

=for hackers
Found in file pad.c

=item pad_add_anon
X<pad_add_anon>

Add an anon code entry to the current compiling pad

	PADOFFSET	pad_add_anon(SV* sv, OPCODE op_type)

=for hackers
Found in file pad.c

=item pad_add_name
X<pad_add_name>

Create a new name and associated PADMY SV in the current pad; return the
offset.
If C<typestash> is valid, the name is for a typed lexical; set the
name's stash to that value.
If C<ourstash> is valid, it's an our lexical, set the name's
SvOURSTASH to that value

If fake, it means we're cloning an existing entry

	PADOFFSET	pad_add_name(const char *name, HV* typestash, HV* ourstash, bool clone, bool state)

=for hackers
Found in file pad.c

=item pad_alloc
X<pad_alloc>

Allocate a new my or tmp pad entry. For a my, simply push a null SV onto
the end of PL_comppad, but for a tmp, scan the pad from PL_padix upwards
for a slot which has no name and no active value.

	PADOFFSET	pad_alloc(I32 optype, U32 tmptype)

=for hackers
Found in file pad.c

=item pad_block_start
X<pad_block_start>

Update the pad compilation state variables on entry to a new block

	void	pad_block_start(int full)

=for hackers
Found in file pad.c

=item pad_check_dup
X<pad_check_dup>

Check for duplicate declarations: report any of:
     * a my in the current scope with the same name;
     * an our (anywhere in the pad) with the same name and the same stash
       as C<ourstash>
C<is_our> indicates that the name to check is an 'our' declaration

	void	pad_check_dup(const char* name, bool is_our, const HV* ourstash)

=for hackers
Found in file pad.c

=item pad_findlex
X<pad_findlex>

Find a named lexical anywhere in a chain of nested pads. Add fake entries
in the inner pads if it's found in an outer one.

Returns the offset in the bottom pad of the lex or the fake lex.
cv is the CV in which to start the search, and seq is the current cop_seq
to match against. If warn is true, print appropriate warnings.  The out_*
vars return values, and so are pointers to where the returned values
should be stored. out_capture, if non-null, requests that the innermost
instance of the lexical is captured; out_name_sv is set to the innermost
matched namesv or fake namesv; out_flags returns the flags normally
associated with the IVX field of a fake namesv.

Note that pad_findlex() is recursive; it recurses up the chain of CVs,
then comes back down, adding fake entries as it goes. It has to be this way
because fake namesvs in anon protoypes have to store in xlow the index into
the parent pad.

	PADOFFSET	pad_findlex(const char *name, const CV* cv, U32 seq, int warn, SV** out_capture, SV** out_name_sv, int *out_flags)

=for hackers
Found in file pad.c

=item pad_findmy
X<pad_findmy>

Given a lexical name, try to find its offset, first in the current pad,
or failing that, in the pads of any lexically enclosing subs (including
the complications introduced by eval). If the name is found in an outer pad,
then a fake entry is added to the current pad.
Returns the offset in the current pad, or NOT_IN_PAD on failure.

	PADOFFSET	pad_findmy(const char* name)

=for hackers
Found in file pad.c

=item pad_fixup_inner_anons
X<pad_fixup_inner_anons>

For any anon CVs in the pad, change CvOUTSIDE of that CV from
old_cv to new_cv if necessary. Needed when a newly-compiled CV has to be
moved to a pre-existing CV struct.

	void	pad_fixup_inner_anons(PADLIST *padlist, CV *old_cv, CV *new_cv)

=for hackers
Found in file pad.c

=item pad_free
X<pad_free>

Free the SV at offset po in the current pad.

	void	pad_free(PADOFFSET po)

=for hackers
Found in file pad.c

=item pad_leavemy
X<pad_leavemy>

Cleanup at end of scope during compilation: set the max seq number for
lexicals in this scope and warn of any lexicals that never got introduced.

	void	pad_leavemy()

=for hackers
Found in file pad.c

=item pad_new
X<pad_new>

Create a new compiling padlist, saving and updating the various global
vars at the same time as creating the pad itself. The following flags
can be OR'ed together:

    padnew_CLONE	this pad is for a cloned CV
    padnew_SAVE		save old globals
    padnew_SAVESUB	also save extra stuff for start of sub

	PADLIST*	pad_new(int flags)

=for hackers
Found in file pad.c

=item pad_push
X<pad_push>

Push a new pad frame onto the padlist, unless there's already a pad at
this depth, in which case don't bother creating a new one.  Then give
the new pad an @@_ in slot zero.

	void	pad_push(PADLIST *padlist, int depth)

=for hackers
Found in file pad.c

=item pad_reset
X<pad_reset>

Mark all the current temporaries for reuse

	void	pad_reset()

=for hackers
Found in file pad.c

=item pad_setsv
X<pad_setsv>

Set the entry at offset po in the current pad to sv.
Use the macro PAD_SETSV() rather than calling this function directly.

	void	pad_setsv(PADOFFSET po, SV* sv)

=for hackers
Found in file pad.c

=item pad_swipe
X<pad_swipe>

Abandon the tmp in the current pad at offset po and replace with a
new one.

	void	pad_swipe(PADOFFSET po, bool refadjust)

=for hackers
Found in file pad.c

=item pad_tidy
X<pad_tidy>

Tidy up a pad after we've finished compiling it:
    * remove most stuff from the pads of anonsub prototypes;
    * give it a @@_;
    * mark tmps as such.

	void	pad_tidy(padtidy_type type)

=for hackers
Found in file pad.c

=item pad_undef
X<pad_undef>

Free the padlist associated with a CV.
If parts of it happen to be current, we null the relevant
PL_*pad* global vars so that we don't have any dangling references left.
We also repoint the CvOUTSIDE of any about-to-be-orphaned
inner subs to the outer of this cv.

(This function should really be called pad_free, but the name was already
taken)

	void	pad_undef(CV* cv)

=for hackers
Found in file pad.c


=back

=head1 Per-Interpreter Variables

=over 8

=item PL_DBsingle
X<PL_DBsingle>

When Perl is run in debugging mode, with the B<-d> switch, this SV is a
boolean which indicates whether subs are being single-stepped.
Single-stepping is automatically turned on after every step.  This is the C
variable which corresponds to Perl's $DB::single variable.  See
C<PL_DBsub>.

	SV *	PL_DBsingle

=for hackers
Found in file intrpvar.h

=item PL_DBsub
X<PL_DBsub>

When Perl is run in debugging mode, with the B<-d> switch, this GV contains
the SV which holds the name of the sub being debugged.  This is the C
variable which corresponds to Perl's $DB::sub variable.  See
C<PL_DBsingle>.

	GV *	PL_DBsub

=for hackers
Found in file intrpvar.h

=item PL_DBtrace
X<PL_DBtrace>

Trace variable used when Perl is run in debugging mode, with the B<-d>
switch.  This is the C variable which corresponds to Perl's $DB::trace
variable.  See C<PL_DBsingle>.

	SV *	PL_DBtrace

=for hackers
Found in file intrpvar.h

=item PL_dowarn
X<PL_dowarn>

The C variable which corresponds to Perl's $^W warning variable.

	bool	PL_dowarn

=for hackers
Found in file intrpvar.h

=item PL_last_in_gv
X<PL_last_in_gv>

The GV which was last used for a filehandle input operation. (C<< <FH> >>)

	GV*	PL_last_in_gv

=for hackers
Found in file intrpvar.h

=item PL_ofs_sv
X<PL_ofs_sv>

The output field separator - C<$,> in Perl space.

	SV*	PL_ofs_sv

=for hackers
Found in file intrpvar.h

=item PL_rs
X<PL_rs>

The input record separator - C<$/> in Perl space.

	SV*	PL_rs

=for hackers
Found in file intrpvar.h


=back

=head1 Stack Manipulation Macros

=over 8

=item djSP
X<djSP>

Declare Just C<SP>. This is actually identical to C<dSP>, and declares
a local copy of perl's stack pointer, available via the C<SP> macro.
See C<SP>.  (Available for backward source code compatibility with the
old (Perl 5.005) thread model.)

		djSP;

=for hackers
Found in file pp.h

=item LVRET
X<LVRET>

True if this op will be the return value of an lvalue subroutine

=for hackers
Found in file pp.h


=back

=head1 SV Manipulation Functions

=over 8

=item sv_add_arena
X<sv_add_arena>

Given a chunk of memory, link it to the head of the list of arenas,
and split it into a list of free SVs.

	void	sv_add_arena(char* ptr, U32 size, U32 flags)

=for hackers
Found in file sv.c

=item sv_clean_all
X<sv_clean_all>

Decrement the refcnt of each remaining SV, possibly triggering a
cleanup. This function may have to be called multiple times to free
SVs which are in complex self-referential hierarchies.

	I32	sv_clean_all()

=for hackers
Found in file sv.c

=item sv_clean_objs
X<sv_clean_objs>

Attempt to destroy all objects not yet freed

	void	sv_clean_objs()

=for hackers
Found in file sv.c

=item sv_free_arenas
X<sv_free_arenas>

Deallocate the memory used by all arenas. Note that all the individual SV
heads and bodies within the arenas must already have been freed.

	void	sv_free_arenas()

=for hackers
Found in file sv.c


=back

=head1 SV-Body Allocation

=over 8

=item sv_2num
X<sv_2num>

Return an SV with the numeric value of the source SV, doing any necessary
reference or overload conversion.  You must use the C<SvNUM(sv)> macro to
access this function.

	SV*	sv_2num(SV* sv)

=for hackers
Found in file sv.c


=back

=head1 Unicode Support

=over 8

=item find_uninit_var
X<find_uninit_var>

Find the name of the undefined variable (if any) that caused the operator o
to issue a "Use of uninitialized value" warning.
If match is true, only return a name if it's value matches uninit_sv.
So roughly speaking, if a unary operator (such as OP_COS) generates a
warning, then following the direct child of the op may yield an
OP_PADSV or OP_GV that gives the name of the undefined variable. On the
other hand, with OP_ADD there are two branches to follow, so we only print
the variable name if we get an exact match.

The name is returned as a mortal SV.

Assumes that PL_op is the op that originally triggered the error, and that
PL_comppad/PL_curpad points to the currently executing pad.

	SV*	find_uninit_var(OP* obase, SV* uninit_sv, bool top)

=for hackers
Found in file sv.c

=item report_uninit
X<report_uninit>

Print appropriate "Use of uninitialized variable" warning

	void	report_uninit(SV* uninit_sv)

=for hackers
Found in file sv.c


=back

=head1 AUTHORS

The autodocumentation system was originally added to the Perl core by
Benjamin Stuhl. Documentation is by whoever was kind enough to
document their functions.

=head1 SEE ALSO

perlguts(1), perlapi(1)

=cut

 ex: set ro:
@


1.7
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@@


1.6
log
@merge in perl 5.8.8
@
text
@d1 6
d145 1
a145 1
compiling pad (lvalue). Note that C<SvCUR> is hijacked for this purpose.
d156 1
a156 1
ling pad (lvalue) to C<gen>.  Note that C<SvCUR_set> is hijacked for this purpose.
d334 11
a344 1
=head1 Functions in file pp_ctl.c
d346 2
d349 8
a356 1
=over 8
d358 2
a359 2
=item find_runcv
X<find_runcv>
d361 1
a361 5
Locate the CV corresponding to the currently executing sub or eval.
If db_seqp is non_null, skip CVs that are in the DB package and populate
*db_seqp with the cop sequence number at the point that the DB:: code was
entered. (allows debuggers to eval in the scope of the breakpoint rather
than in the scope of the debugger itself).
d363 1
a363 1
	CV*	find_runcv(U32 *db_seqp)
d366 1
a366 1
Found in file pp_ctl.c
d371 1
a371 1
=head1 Global Variables
d375 2
a376 2
=item PL_DBsingle
X<PL_DBsingle>
d378 2
a379 5
When Perl is run in debugging mode, with the B<-d> switch, this SV is a
boolean which indicates whether subs are being single-stepped.
Single-stepping is automatically turned on after every step.  This is the C
variable which corresponds to Perl's $DB::single variable.  See
C<PL_DBsub>.
d381 1
a381 1
	SV *	PL_DBsingle
d384 1
a384 1
Found in file intrpvar.h
d386 2
a387 2
=item PL_DBsub
X<PL_DBsub>
d389 3
a391 4
When Perl is run in debugging mode, with the B<-d> switch, this GV contains
the SV which holds the name of the sub being debugged.  This is the C
variable which corresponds to Perl's $DB::sub variable.  See
C<PL_DBsingle>.
d393 1
a393 1
	GV *	PL_DBsub
d396 1
a396 1
Found in file intrpvar.h
d398 2
a399 2
=item PL_DBtrace
X<PL_DBtrace>
d401 3
a403 3
Trace variable used when Perl is run in debugging mode, with the B<-d>
switch.  This is the C variable which corresponds to Perl's $DB::trace
variable.  See C<PL_DBsingle>.
d405 1
a405 1
	SV *	PL_DBtrace
d408 8
a415 1
Found in file intrpvar.h
d417 2
a418 2
=item PL_dowarn
X<PL_dowarn>
d420 4
a423 1
The C variable which corresponds to Perl's $^W warning variable.
d425 1
a425 1
	bool	PL_dowarn
d428 1
a428 1
Found in file intrpvar.h
a429 2
=item PL_last_in_gv
X<PL_last_in_gv>
d431 1
a431 1
The GV which was last used for a filehandle input operation. (C<< <FH> >>)
d433 1
a433 1
	GV*	PL_last_in_gv
d435 1
a435 2
=for hackers
Found in file thrdvar.h
d437 2
a438 2
=item PL_ofs_sv
X<PL_ofs_sv>
d440 2
a441 1
The output field separator - C<$,> in Perl space.
d443 1
a443 1
	SV*	PL_ofs_sv
d446 1
a446 1
Found in file thrdvar.h
d448 2
a449 2
=item PL_rs
X<PL_rs>
d451 3
a453 1
The input record separator - C<$/> in Perl space.
d455 1
a455 1
	SV*	PL_rs
d458 1
a458 1
Found in file thrdvar.h
d463 1
a463 1
=head1 GV Functions
d467 2
a468 2
=item is_gv_magical
X<is_gv_magical>
d470 4
a473 1
Returns C<TRUE> if given the name of a magical GV.
d475 5
a479 2
Currently only useful internally when determining if a GV should be
created even in rvalue contexts.
d481 1
a481 2
C<flags> is not used at present but available for future extension to
allow selecting particular classes of magical variable.
d483 2
a484 3
Currently assumes that C<name> is NUL terminated (as well as len being valid).
This assumption is met by all callers within the perl core, which all pass
pointers returned by SvPV.
d486 2
a487 1
	bool	is_gv_magical(char *name, STRLEN len, U32 flags)
d489 4
a492 2
=for hackers
Found in file gv.c
d494 5
d500 1
a500 1
=back
d502 2
a503 1
=head1 IO Functions
d505 2
a506 4
=over 8

=item start_glob
X<start_glob>
d508 3
a510 4
Function called by C<do_readline> to spawn a glob (or do the glob inside
perl on VMS). This code used to be inline, but now perl uses C<File::Glob>
this glob starter is only used by miniperl during the build process.
Moving it away shrinks pp_hot.c; shrinking pp_hot.c helps speed perl up.
d512 1
a512 1
	PerlIO*	start_glob(SV* pattern, IO *io)
d515 1
a515 1
Found in file doio.c
d531 2
a532 1
executing).
d571 15
a585 11
NV+1..IV inclusive is a range of cop_seq numbers for which the name is
valid.  For typed lexicals name SV is SVt_PVMG and SvSTASH points at the
type.  For C<our> lexicals, the type is SVt_PVGV, and GvSTASH points at the
stash of the associated global (so that duplicate C<our> declarations in the
same package can be detected).  SvCUR is sometimes hijacked to
store the generation number during compilation.

If SvFAKE is set on the name SV then slot in the frame AVs are
a REFCNT'ed references to a lexical from "outside". In this case,
the name SV does not have a cop_seq range, since it is in scope
throughout.
d592 3
d661 2
a662 1
Create a new name in the current pad at the specified offset.
d666 1
a666 3
GvSTASH to that value

Also, if the name is @@.. or %.., create a new array or hash for that slot
d670 1
a670 1
	PADOFFSET	pad_add_name(char *name, HV* typestash, HV* ourstash, bool clone)
d706 1
a706 1
	void	pad_check_dup(char* name, bool is_our, HV* ourstash)
d715 15
a729 4
in the inner pads if it's found in an outer one. innercv is the CV *inside*
the chain of outer CVs to be searched. If newoff is non-null, this is a
run-time cloning: don't add fake entries, just find the lexical and add a
ref to it at newoff in the current pad.
d731 1
a731 1
	PADOFFSET	pad_findlex(const char* name, PADOFFSET newoff, const CV* innercv)
d745 1
a745 1
	PADOFFSET	pad_findmy(char* name)
d803 2
a804 2
this depth, in which case don't bother creating a new one.
If has_args is true, give the new pad an @@_ in slot zero.
d806 1
a806 1
	void	pad_push(PADLIST *padlist, int depth, int has_args)
d876 86
a993 10
=item report_uninit
X<report_uninit>

Print appropriate "Use of uninitialized variable" warning

	void	report_uninit()

=for hackers
Found in file sv.c

d1041 58
d1109 3
@


1.5
log
@sync in-tree perl with 5.8.6
@
text
@d7 1
d20 1
d33 1
a33 1
There is a further complication with non-closure anonymous subs (ie those
d83 1
d93 1
d103 2
a104 1
=item PAD_BASE_SV	
d108 1
a108 1
	SV *	PAD_BASE_SV	(PADLIST padlist, PADOFFSET po)
d114 1
d125 1
d136 1
d146 11
d158 1
d169 1
d180 1
d191 1
d201 1
d211 1
d222 1
d231 2
a232 1
=item PAD_SETSV	
d236 1
a236 1
	SV *	PAD_SETSV	(PADOFFSET po, SV* sv)
d241 2
a242 1
=item PAD_SET_CUR	
d245 5
a249 1
the previous current pad.
d251 2
a252 1
	void	PAD_SET_CUR	(PADLIST padlist, I32 n)
d257 2
a258 1
=item PAD_SET_CUR_NOSAVE	
d262 1
a262 1
	void	PAD_SET_CUR_NOSAVE	(PADLIST padlist, I32 n)
d267 2
a268 1
=item PAD_SV	
d272 1
a272 1
	void	PAD_SV	(PADOFFSET po)
d277 2
a278 1
=item PAD_SVl	
d285 1
a285 1
	SV *	PAD_SVl	(PADOFFSET po)
d290 2
a291 1
=item SAVECLEARSV	
d293 1
a293 1
Clear the pointed to pad value on scope exit. (ie the runtime action of 'my')
d295 1
a295 1
	void	SAVECLEARSV	(SV **svp)
d301 1
d314 2
a315 1
=item SAVEPADSV	
d320 1
a320 1
	void	SAVEPADSV	(PADOFFSET po)
d334 1
d340 1
a340 1
than in in the scope of the debugger itself).
d355 1
d369 1
d382 1
d394 1
d404 1
d414 1
d424 1
d441 1
d451 4
d468 1
d488 1
d536 1
a536 1
stash of the associated global (so that duplicate C<our> delarations in the
d562 1
d574 1
d578 1
a578 1
	void	cv_dump(CV *cv, char *title)
d584 1
d594 1
d604 1
d614 1
d632 1
d636 1
a636 1
for a slot which has no name and and no active value.
d644 1
d654 1
d668 1
d676 1
a676 1
	PADOFFSET	pad_findlex(char* name, PADOFFSET newoff, CV* innercv)
d682 1
d696 1
d708 1
d710 1
a710 1
Free the SV at offet po in the current pad.
d718 1
d729 1
d745 1
d757 1
d767 1
d778 1
d789 1
d802 1
d826 1
d839 1
d854 1
d864 1
d875 1
d887 1
d897 1
@


1.4
log
@merge 5.8.5 into HEAD
remove now-unused files
crank libperl shared library major number
update Makefile.bsd-wrapper
tweak openbsd hints file for arm and m68k
@
text
@d496 6
@


1.3
log
@Resolve conflicts for perl 5.8.2, remove old files, and add OpenBSD-specific scaffolding
@
text
@d300 1
a300 1
than in in the scope of the debuger itself).
@


1.2
log
@repeated words; millert ok ok
@
text
@d14 296
d447 1
a447 1
is managed "manual" (mostly in op.c) rather than normal av.c rules.
d461 1
a461 1
C<PL_curpad> is set to body of the frame AV (i.e. AvARRAY(PL_comppad)).
d463 4
a466 1
Itterating over the names AV itterates over all possible pad
d479 6
a484 2
NV+1..IV inclusive is a range of cop_seq numbers for which the name is valid.
For typed lexicals name SV is SVt_PVMG and SvSTASH points at the type.
d487 3
a489 1
a REFCNT'ed references to a lexical from "outside".
d499 237
a735 1
Found in file cv.h
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
perlintern - autogenerated documentation of purely B<internal> 
d8 3
a10 3
This file is the autogenerated documentation of functions in the 
Perl intrepreter that are documented using Perl's internal documentation
format but are not marked as part of the Perl API. In other words, 
d13 3
d18 261
d283 2
a284 2
The autodocumentation system was orignally added to the Perl core by 
Benjamin Stuhl. Documentation is by whoever was kind enough to 
@


1.1.1.1
log
@virgin perl 5.6.0
@
text
@@


1.1.1.2
log
@stock perl 5.6.1
@
text
@d9 1
a9 1
Perl interpreter that are documented using Perl's internal documentation
a14 94
=item is_gv_magical

Returns C<TRUE> if given the name of a magical GV.

Currently only useful internally when determining if a GV should be
created even in rvalue contexts.

C<flags> is not used at present but available for future extension to
allow selecting particular classes of magical variable.

	bool	is_gv_magical(char *name, STRLEN len, U32 flags)

=for hackers
Found in file gv.c

=item LVRET

True if this op will be the return value of an lvalue subroutine

=for hackers
Found in file pp.h

=item PL_DBsingle

When Perl is run in debugging mode, with the B<-d> switch, this SV is a
boolean which indicates whether subs are being single-stepped. 
Single-stepping is automatically turned on after every step.  This is the C
variable which corresponds to Perl's $DB::single variable.  See
C<PL_DBsub>.

	SV *	PL_DBsingle

=for hackers
Found in file intrpvar.h

=item PL_DBsub

When Perl is run in debugging mode, with the B<-d> switch, this GV contains
the SV which holds the name of the sub being debugged.  This is the C
variable which corresponds to Perl's $DB::sub variable.  See
C<PL_DBsingle>.

	GV *	PL_DBsub

=for hackers
Found in file intrpvar.h

=item PL_DBtrace

Trace variable used when Perl is run in debugging mode, with the B<-d>
switch.  This is the C variable which corresponds to Perl's $DB::trace
variable.  See C<PL_DBsingle>.

	SV *	PL_DBtrace

=for hackers
Found in file intrpvar.h

=item PL_dowarn

The C variable which corresponds to Perl's $^W warning variable.

	bool	PL_dowarn

=for hackers
Found in file intrpvar.h

=item PL_last_in_gv

The GV which was last used for a filehandle input operation. (C<< <FH> >>)

	GV*	PL_last_in_gv

=for hackers
Found in file thrdvar.h

=item PL_ofs_sv

The output field separator - C<$,> in Perl space.

	SV*	PL_ofs_sv

=for hackers
Found in file thrdvar.h

=item PL_rs

The input record separator - C<$/> in Perl space.

	SV*	PL_rs

=for hackers
Found in file thrdvar.h

d19 1
a19 1
The autodocumentation system was originally added to the Perl core by 
@


1.1.1.3
log
@stock perl 5.8.0 from CPAN
@
text
@d3 1
a3 1
perlintern - autogenerated documentation of purely B<internal>
d8 1
a8 1
This file is the autogenerated documentation of functions in the
d10 1
a10 1
format but are not marked as part of the Perl API. In other words,
d13 18
d32 1
a32 1
=head1 Global Variables
d34 2
a35 1
=over 8
d40 1
a40 1
boolean which indicates whether subs are being single-stepped.
a108 189

=back

=head1 GV Functions

=over 8

=item is_gv_magical

Returns C<TRUE> if given the name of a magical GV.

Currently only useful internally when determining if a GV should be
created even in rvalue contexts.

C<flags> is not used at present but available for future extension to
allow selecting particular classes of magical variable.

	bool	is_gv_magical(char *name, STRLEN len, U32 flags)

=for hackers
Found in file gv.c


=back

=head1 IO Functions

=over 8

=item start_glob

Function called by C<do_readline> to spawn a glob (or do the glob inside
perl on VMS). This code used to be inline, but now perl uses C<File::Glob>
this glob starter is only used by miniperl during the build process.
Moving it away shrinks pp_hot.c; shrinking pp_hot.c helps speed perl up.

	PerlIO*	start_glob(SV* pattern, IO *io)

=for hackers
Found in file doio.c


=back

=head1 Pad Data Structures

=over 8

=item CvPADLIST

CV's can have CvPADLIST(cv) set to point to an AV.

For these purposes "forms" are a kind-of CV, eval""s are too (except they're
not callable at will and are always thrown away after the eval"" is done
executing).

XSUBs don't have CvPADLIST set - dXSTARG fetches values from PL_curpad,
but that is really the callers pad (a slot of which is allocated by
every entersub).

The CvPADLIST AV has does not have AvREAL set, so REFCNT of component items
is managed "manual" (mostly in op.c) rather than normal av.c rules.
The items in the AV are not SVs as for a normal AV, but other AVs:

0'th Entry of the CvPADLIST is an AV which represents the "names" or rather
the "static type information" for lexicals.

The CvDEPTH'th entry of CvPADLIST AV is an AV which is the stack frame at that
depth of recursion into the CV.
The 0'th slot of a frame AV is an AV which is @@_.
other entries are storage for variables and op targets.

During compilation:
C<PL_comppad_name> is set the the the names AV.
C<PL_comppad> is set the the frame AV for the frame CvDEPTH == 1.
C<PL_curpad> is set the body of the frame AV (i.e. AvARRAY(PL_comppad)).

Itterating over the names AV itterates over all possible pad
items. Pad slots that are SVs_PADTMP (targets/GVs/constants) end up having
&PL_sv_undef "names" (see pad_alloc()).

Only my/our variable (SVs_PADMY/SVs_PADOUR) slots get valid names.
The rest are op targets/GVs/constants which are statically allocated
or resolved at compile time.  These don't have names by which they
can be looked up from Perl code at run time through eval"" like
my/our variables can be.  Since they can't be looked up by "name"
but only by their index allocated at compile time (which is usually
in PL_op->op_targ), wasting a name SV for them doesn't make sense.

The SVs in the names AV have their PV being the name of the variable.
NV+1..IV inclusive is a range of cop_seq numbers for which the name is valid.
For typed lexicals name SV is SVt_PVMG and SvSTASH points at the type.

If SvFAKE is set on the name SV then slot in the frame AVs are
a REFCNT'ed references to a lexical from "outside".

If the 'name' is '&' the the corresponding entry in frame AV
is a CV representing a possible closure.
(SvFAKE and name of '&' is not a meaningful combination currently but could
become so if C<my sub foo {}> is implemented.)

	AV *	CvPADLIST(CV *cv)

=for hackers
Found in file cv.h


=back

=head1 Stack Manipulation Macros

=over 8

=item djSP

Declare Just C<SP>. This is actually identical to C<dSP>, and declares
a local copy of perl's stack pointer, available via the C<SP> macro.
See C<SP>.  (Available for backward source code compatibility with the
old (Perl 5.005) thread model.)

		djSP;

=for hackers
Found in file pp.h

=item LVRET

True if this op will be the return value of an lvalue subroutine

=for hackers
Found in file pp.h


=back

=head1 SV Manipulation Functions

=over 8

=item report_uninit

Print appropriate "Use of uninitialized variable" warning

	void	report_uninit()

=for hackers
Found in file sv.c

=item sv_add_arena

Given a chunk of memory, link it to the head of the list of arenas,
and split it into a list of free SVs.

	void	sv_add_arena(char* ptr, U32 size, U32 flags)

=for hackers
Found in file sv.c

=item sv_clean_all

Decrement the refcnt of each remaining SV, possibly triggering a
cleanup. This function may have to be called multiple times to free
SVs which are in complex self-referential hierarchies.

	I32	sv_clean_all()

=for hackers
Found in file sv.c

=item sv_clean_objs

Attempt to destroy all objects not yet freed

	void	sv_clean_objs()

=for hackers
Found in file sv.c

=item sv_free_arenas

Deallocate the memory used by all arenas. Note that all the individual SV
heads and bodies within the arenas must already have been freed.

	void	sv_free_arenas()

=for hackers
Found in file sv.c


d113 2
a114 2
The autodocumentation system was originally added to the Perl core by
Benjamin Stuhl. Documentation is by whoever was kind enough to
@


1.1.1.4
log
@perl 5.8.2 from CPAN
@
text
@a13 296
=head1 CV reference counts and CvOUTSIDE

=over 8

=item CvWEAKOUTSIDE

Each CV has a pointer, C<CvOUTSIDE()>, to its lexically enclosing
CV (if any). Because pointers to anonymous sub prototypes are
stored in C<&> pad slots, it is a possible to get a circular reference,
with the parent pointing to the child and vice-versa. To avoid the
ensuing memory leak, we do not increment the reference count of the CV
pointed to by C<CvOUTSIDE> in the I<one specific instance> that the parent
has a C<&> pad slot pointing back to us. In this case, we set the
C<CvWEAKOUTSIDE> flag in the child. This allows us to determine under what
circumstances we should decrement the refcount of the parent when freeing
the child.

There is a further complication with non-closure anonymous subs (ie those
that do not refer to any lexicals outside that sub). In this case, the
anonymous prototype is shared rather than being cloned. This has the
consequence that the parent may be freed while there are still active
children, eg

    BEGIN { $a = sub { eval '$x' } }

In this case, the BEGIN is freed immediately after execution since there
are no active references to it: the anon sub prototype has
C<CvWEAKOUTSIDE> set since it's not a closure, and $a points to the same
CV, so it doesn't contribute to BEGIN's refcount either.  When $a is
executed, the C<eval '$x'> causes the chain of C<CvOUTSIDE>s to be followed,
and the freed BEGIN is accessed.

To avoid this, whenever a CV and its associated pad is freed, any
C<&> entries in the pad are explicitly removed from the pad, and if the
refcount of the pointed-to anon sub is still positive, then that
child's C<CvOUTSIDE> is set to point to its grandparent. This will only
occur in the single specific case of a non-closure anon prototype
having one or more active references (such as C<$a> above).

One other thing to consider is that a CV may be merely undefined
rather than freed, eg C<undef &foo>. In this case, its refcount may
not have reached zero, but we still delete its pad and its C<CvROOT> etc.
Since various children may still have their C<CvOUTSIDE> pointing at this
undefined CV, we keep its own C<CvOUTSIDE> for the time being, so that
the chain of lexical scopes is unbroken. For example, the following
should print 123:

    my $x = 123;
    sub tmp { sub { eval '$x' } }
    my $a = tmp();
    undef &tmp;
    print  $a->();

	bool	CvWEAKOUTSIDE(CV *cv)

=for hackers
Found in file cv.h


=back

=head1 Functions in file pad.h


=over 8

=item CX_CURPAD_SAVE

Save the current pad in the given context block structure.

	void	CX_CURPAD_SAVE(struct context)

=for hackers
Found in file pad.h

=item CX_CURPAD_SV

Access the SV at offset po in the saved current pad in the given
context block structure (can be used as an lvalue).

	SV *	CX_CURPAD_SV(struct context, PADOFFSET po)

=for hackers
Found in file pad.h

=item PAD_BASE_SV	

Get the value from slot C<po> in the base (DEPTH=1) pad of a padlist

	SV *	PAD_BASE_SV	(PADLIST padlist, PADOFFSET po)

=for hackers
Found in file pad.h

=item PAD_CLONE_VARS

|CLONE_PARAMS* param
Clone the state variables associated with running and compiling pads.

	void	PAD_CLONE_VARS(PerlInterpreter *proto_perl \)

=for hackers
Found in file pad.h

=item PAD_COMPNAME_FLAGS

Return the flags for the current compiling pad name
at offset C<po>. Assumes a valid slot entry.

	U32	PAD_COMPNAME_FLAGS(PADOFFSET po)

=for hackers
Found in file pad.h

=item PAD_COMPNAME_GEN

The generation number of the name at offset C<po> in the current
compiling pad (lvalue). Note that C<SvCUR> is hijacked for this purpose.

	STRLEN	PAD_COMPNAME_GEN(PADOFFSET po)

=for hackers
Found in file pad.h

=item PAD_COMPNAME_OURSTASH

Return the stash associated with an C<our> variable.
Assumes the slot entry is a valid C<our> lexical.

	HV *	PAD_COMPNAME_OURSTASH(PADOFFSET po)

=for hackers
Found in file pad.h

=item PAD_COMPNAME_PV

Return the name of the current compiling pad name
at offset C<po>. Assumes a valid slot entry.

	char *	PAD_COMPNAME_PV(PADOFFSET po)

=for hackers
Found in file pad.h

=item PAD_COMPNAME_TYPE

Return the type (stash) of the current compiling pad name at offset
C<po>. Must be a valid name. Returns null if not typed.

	HV *	PAD_COMPNAME_TYPE(PADOFFSET po)

=for hackers
Found in file pad.h

=item PAD_DUP

Clone a padlist.

	void	PAD_DUP(PADLIST dstpad, PADLIST srcpad, CLONE_PARAMS* param)

=for hackers
Found in file pad.h

=item PAD_RESTORE_LOCAL

Restore the old pad saved into the local variable opad by PAD_SAVE_LOCAL()

	void	PAD_RESTORE_LOCAL(PAD *opad)

=for hackers
Found in file pad.h

=item PAD_SAVE_LOCAL

Save the current pad to the local variable opad, then make the
current pad equal to npad

	void	PAD_SAVE_LOCAL(PAD *opad, PAD *npad)

=for hackers
Found in file pad.h

=item PAD_SAVE_SETNULLPAD

Save the current pad then set it to null.

	void	PAD_SAVE_SETNULLPAD()

=for hackers
Found in file pad.h

=item PAD_SETSV	

Set the slot at offset C<po> in the current pad to C<sv>

	SV *	PAD_SETSV	(PADOFFSET po, SV* sv)

=for hackers
Found in file pad.h

=item PAD_SET_CUR	

Set the current pad to be pad C<n> in the padlist, saving
the previous current pad.

	void	PAD_SET_CUR	(PADLIST padlist, I32 n)

=for hackers
Found in file pad.h

=item PAD_SET_CUR_NOSAVE	

like PAD_SET_CUR, but without the save

	void	PAD_SET_CUR_NOSAVE	(PADLIST padlist, I32 n)

=for hackers
Found in file pad.h

=item PAD_SV	

Get the value at offset C<po> in the current pad

	void	PAD_SV	(PADOFFSET po)

=for hackers
Found in file pad.h

=item PAD_SVl	

Lightweight and lvalue version of C<PAD_SV>.
Get or set the value at offset C<po> in the current pad.
Unlike C<PAD_SV>, does not print diagnostics with -DX.
For internal use only.

	SV *	PAD_SVl	(PADOFFSET po)

=for hackers
Found in file pad.h

=item SAVECLEARSV	

Clear the pointed to pad value on scope exit. (ie the runtime action of 'my')

	void	SAVECLEARSV	(SV **svp)

=for hackers
Found in file pad.h

=item SAVECOMPPAD

save PL_comppad and PL_curpad





	void	SAVECOMPPAD()

=for hackers
Found in file pad.h

=item SAVEPADSV	

Save a pad slot (used to restore after an iteration)

XXX DAPM it would make more sense to make the arg a PADOFFSET
	void	SAVEPADSV	(PADOFFSET po)

=for hackers
Found in file pad.h


=back

=head1 Functions in file pp_ctl.c


=over 8

=item find_runcv

Locate the CV corresponding to the currently executing sub or eval.
If db_seqp is non_null, skip CVs that are in the DB package and populate
*db_seqp with the cop sequence number at the point that the DB:: code was
entered. (allows debuggers to eval in the scope of the breakpoint rather
than in in the scope of the debuger itself).

	CV*	find_runcv(U32 *db_seqp)

=for hackers
Found in file pp_ctl.c


=back

d151 1
a151 1
is managed "manual" (mostly in pad.c) rather than normal av.c rules.
d163 3
a165 3
C<PL_comppad_name> is set to the names AV.
C<PL_comppad> is set to the frame AV for the frame CvDEPTH == 1.
C<PL_curpad> is set to the body of the frame AV (i.e. AvARRAY(PL_comppad)).
d167 1
a167 4
During execution, C<PL_comppad> and C<PL_curpad> refer to the live
frame of the currently executing sub.

Iterating over the names AV iterates over all possible pad
d180 2
a181 6
NV+1..IV inclusive is a range of cop_seq numbers for which the name is
valid.  For typed lexicals name SV is SVt_PVMG and SvSTASH points at the
type.  For C<our> lexicals, the type is SVt_PVGV, and GvSTASH points at the
stash of the associated global (so that duplicate C<our> delarations in the
same package can be detected).  SvCUR is sometimes hijacked to
store the generation number during compilation.
d184 1
a184 3
a REFCNT'ed references to a lexical from "outside". In this case,
the name SV does not have a cop_seq range, since it is in scope
throughout.
d186 1
a186 1
If the 'name' is '&' the corresponding entry in frame AV
d194 1
a194 237
Found in file pad.c

=item cv_clone

Clone a CV: make a new CV which points to the same code etc, but which
has a newly-created pad built by copying the prototype pad and capturing
any outer lexicals.

	CV*	cv_clone(CV* proto)

=for hackers
Found in file pad.c

=item cv_dump

dump the contents of a CV

	void	cv_dump(CV *cv, char *title)

=for hackers
Found in file pad.c

=item do_dump_pad

Dump the contents of a padlist

	void	do_dump_pad(I32 level, PerlIO *file, PADLIST *padlist, int full)

=for hackers
Found in file pad.c

=item intro_my

"Introduce" my variables to visible status.

	U32	intro_my()

=for hackers
Found in file pad.c

=item pad_add_anon

Add an anon code entry to the current compiling pad

	PADOFFSET	pad_add_anon(SV* sv, OPCODE op_type)

=for hackers
Found in file pad.c

=item pad_add_name

Create a new name in the current pad at the specified offset.
If C<typestash> is valid, the name is for a typed lexical; set the
name's stash to that value.
If C<ourstash> is valid, it's an our lexical, set the name's
GvSTASH to that value

Also, if the name is @@.. or %.., create a new array or hash for that slot

If fake, it means we're cloning an existing entry

	PADOFFSET	pad_add_name(char *name, HV* typestash, HV* ourstash, bool clone)

=for hackers
Found in file pad.c

=item pad_alloc

Allocate a new my or tmp pad entry. For a my, simply push a null SV onto
the end of PL_comppad, but for a tmp, scan the pad from PL_padix upwards
for a slot which has no name and and no active value.

	PADOFFSET	pad_alloc(I32 optype, U32 tmptype)

=for hackers
Found in file pad.c

=item pad_block_start

Update the pad compilation state variables on entry to a new block

	void	pad_block_start(int full)

=for hackers
Found in file pad.c

=item pad_check_dup

Check for duplicate declarations: report any of:
     * a my in the current scope with the same name;
     * an our (anywhere in the pad) with the same name and the same stash
       as C<ourstash>
C<is_our> indicates that the name to check is an 'our' declaration

	void	pad_check_dup(char* name, bool is_our, HV* ourstash)

=for hackers
Found in file pad.c

=item pad_findlex

Find a named lexical anywhere in a chain of nested pads. Add fake entries
in the inner pads if it's found in an outer one. innercv is the CV *inside*
the chain of outer CVs to be searched. If newoff is non-null, this is a
run-time cloning: don't add fake entries, just find the lexical and add a
ref to it at newoff in the current pad.

	PADOFFSET	pad_findlex(char* name, PADOFFSET newoff, CV* innercv)

=for hackers
Found in file pad.c

=item pad_findmy

Given a lexical name, try to find its offset, first in the current pad,
or failing that, in the pads of any lexically enclosing subs (including
the complications introduced by eval). If the name is found in an outer pad,
then a fake entry is added to the current pad.
Returns the offset in the current pad, or NOT_IN_PAD on failure.

	PADOFFSET	pad_findmy(char* name)

=for hackers
Found in file pad.c

=item pad_fixup_inner_anons

For any anon CVs in the pad, change CvOUTSIDE of that CV from
old_cv to new_cv if necessary. Needed when a newly-compiled CV has to be
moved to a pre-existing CV struct.

	void	pad_fixup_inner_anons(PADLIST *padlist, CV *old_cv, CV *new_cv)

=for hackers
Found in file pad.c

=item pad_free

Free the SV at offet po in the current pad.

	void	pad_free(PADOFFSET po)

=for hackers
Found in file pad.c

=item pad_leavemy

Cleanup at end of scope during compilation: set the max seq number for
lexicals in this scope and warn of any lexicals that never got introduced.

	void	pad_leavemy()

=for hackers
Found in file pad.c

=item pad_new

Create a new compiling padlist, saving and updating the various global
vars at the same time as creating the pad itself. The following flags
can be OR'ed together:

    padnew_CLONE	this pad is for a cloned CV
    padnew_SAVE		save old globals
    padnew_SAVESUB	also save extra stuff for start of sub

	PADLIST*	pad_new(int flags)

=for hackers
Found in file pad.c

=item pad_push

Push a new pad frame onto the padlist, unless there's already a pad at
this depth, in which case don't bother creating a new one.
If has_args is true, give the new pad an @@_ in slot zero.

	void	pad_push(PADLIST *padlist, int depth, int has_args)

=for hackers
Found in file pad.c

=item pad_reset

Mark all the current temporaries for reuse

	void	pad_reset()

=for hackers
Found in file pad.c

=item pad_setsv

Set the entry at offset po in the current pad to sv.
Use the macro PAD_SETSV() rather than calling this function directly.

	void	pad_setsv(PADOFFSET po, SV* sv)

=for hackers
Found in file pad.c

=item pad_swipe

Abandon the tmp in the current pad at offset po and replace with a
new one.

	void	pad_swipe(PADOFFSET po, bool refadjust)

=for hackers
Found in file pad.c

=item pad_tidy

Tidy up a pad after we've finished compiling it:
    * remove most stuff from the pads of anonsub prototypes;
    * give it a @@_;
    * mark tmps as such.

	void	pad_tidy(padtidy_type type)

=for hackers
Found in file pad.c

=item pad_undef

Free the padlist associated with a CV.
If parts of it happen to be current, we null the relevant
PL_*pad* global vars so that we don't have any dangling references left.
We also repoint the CvOUTSIDE of any about-to-be-orphaned
inner subs to the outer of this cv.

(This function should really be called pad_free, but the name was already
taken)

	void	pad_undef(CV* cv)

=for hackers
Found in file pad.c
@


1.1.1.5
log
@Import of stock perl 5.8.5
@
text
@d300 1
a300 1
than in in the scope of the debugger itself).
@


1.1.1.6
log
@perl 5.8.6 from CPAN
@
text
@a495 6
The flag SVf_PADSTALE is cleared on lexicals each time the my() is executed,
and set on scope exit. This allows the 'Variable $x is not available' warning
to be generated in evals, such as 

    { my $x = 1; sub f { eval '$x'} } f();

@


1.1.1.7
log
@perl 5.8.8 import
@
text
@a6 1
X<internal Perl functions> X<interpreter functions>
a18 1
X<CvWEAKOUTSIDE>
d31 1
a31 1
There is a further complication with non-closure anonymous subs (i.e. those
a80 1
X<CX_CURPAD_SAVE>
a89 1
X<CX_CURPAD_SV>
d99 1
a99 2
=item PAD_BASE_SV
X<PAD_BASE_SV>
d103 1
a103 1
	SV *	PAD_BASE_SV(PADLIST padlist, PADOFFSET po)
a108 1
X<PAD_CLONE_VARS>
a118 1
X<PAD_COMPNAME_FLAGS>
a128 1
X<PAD_COMPNAME_GEN>
a137 11
=item PAD_COMPNAME_GEN_set
X<PAD_COMPNAME_GEN_set>

Sets the generation number of the name at offset C<po> in the current
ling pad (lvalue) to C<gen>.  Note that C<SvCUR_set> is hijacked for this purpose.

	STRLEN	PAD_COMPNAME_GEN_set(PADOFFSET po, int gen)

=for hackers
Found in file pad.h

a138 1
X<PAD_COMPNAME_OURSTASH>
a148 1
X<PAD_COMPNAME_PV>
a158 1
X<PAD_COMPNAME_TYPE>
a168 1
X<PAD_DUP>
a177 1
X<PAD_RESTORE_LOCAL>
a186 1
X<PAD_SAVE_LOCAL>
a196 1
X<PAD_SAVE_SETNULLPAD>
d205 1
a205 2
=item PAD_SETSV
X<PAD_SETSV>
d209 1
a209 1
	SV *	PAD_SETSV(PADOFFSET po, SV* sv)
d214 1
a214 2
=item PAD_SET_CUR
X<PAD_SET_CUR>
d217 1
a217 5
the previous current pad. NB currently this macro expands to a string too
long for some compilers, so it's best to replace it with

    SAVECOMPPAD();
    PAD_SET_CUR_NOSAVE(padlist,n);
d219 1
a219 2

	void	PAD_SET_CUR(PADLIST padlist, I32 n)
d224 1
a224 2
=item PAD_SET_CUR_NOSAVE
X<PAD_SET_CUR_NOSAVE>
d228 1
a228 1
	void	PAD_SET_CUR_NOSAVE(PADLIST padlist, I32 n)
d233 1
a233 2
=item PAD_SV
X<PAD_SV>
d237 1
a237 1
	void	PAD_SV(PADOFFSET po)
d242 1
a242 2
=item PAD_SVl
X<PAD_SVl>
d249 1
a249 1
	SV *	PAD_SVl(PADOFFSET po)
d254 1
a254 2
=item SAVECLEARSV
X<SAVECLEARSV>
d256 1
a256 1
Clear the pointed to pad value on scope exit. (i.e. the runtime action of 'my')
d258 1
a258 1
	void	SAVECLEARSV(SV **svp)
a263 1
X<SAVECOMPPAD>
d276 1
a276 2
=item SAVEPADSV
X<SAVEPADSV>
d281 1
a281 1
	void	SAVEPADSV(PADOFFSET po)
a294 1
X<find_runcv>
d300 1
a300 1
than in the scope of the debugger itself).
a314 1
X<PL_DBsingle>
a327 1
X<PL_DBsub>
a339 1
X<PL_DBtrace>
a350 1
X<PL_dowarn>
a359 1
X<PL_last_in_gv>
a368 1
X<PL_ofs_sv>
a377 1
X<PL_rs>
a393 1
X<is_gv_magical>
a402 4
Currently assumes that C<name> is NUL terminated (as well as len being valid).
This assumption is met by all callers within the perl core, which all pass
pointers returned by SvPV.

a415 1
X<start_glob>
a434 1
X<CvPADLIST>
d482 1
a482 1
stash of the associated global (so that duplicate C<our> declarations in the
a507 1
X<cv_clone>
a518 1
X<cv_dump>
d522 1
a522 1
	void	cv_dump(const CV *cv, const char *title)
a527 1
X<do_dump_pad>
a536 1
X<intro_my>
a545 1
X<pad_add_anon>
a554 1
X<pad_add_name>
a571 1
X<pad_alloc>
d575 1
a575 1
for a slot which has no name and no active value.
a582 1
X<pad_block_start>
a591 1
X<pad_check_dup>
a604 1
X<pad_findlex>
d612 1
a612 1
	PADOFFSET	pad_findlex(const char* name, PADOFFSET newoff, const CV* innercv)
a617 1
X<pad_findmy>
a630 1
X<pad_fixup_inner_anons>
a641 1
X<pad_free>
d643 1
a643 1
Free the SV at offset po in the current pad.
a650 1
X<pad_leavemy>
a660 1
X<pad_new>
a675 1
X<pad_push>
a686 1
X<pad_reset>
a695 1
X<pad_setsv>
a705 1
X<pad_swipe>
a715 1
X<pad_tidy>
a727 1
X<pad_undef>
a750 1
X<djSP>
a762 1
X<LVRET>
a776 1
X<report_uninit>
a785 1
X<sv_add_arena>
a795 1
X<sv_clean_all>
a806 1
X<sv_clean_objs>
a815 1
X<sv_free_arenas>
@


1.1.1.8
log
@import perl 5.10.0 from CPAN
@
text
@a0 6
-*- buffer-read-only: t -*-

!!!!!!!   DO NOT EDIT THIS FILE   !!!!!!!
This file is built by autodoc.pl extracting documentation from the C source
files.

d139 1
a139 1
compiling pad (lvalue). Note that C<SvUVX> is hijacked for this purpose.
d150 1
a150 1
ling pad (lvalue) to C<gen>.  Note that C<SvUV_set> is hijacked for this purpose.
d328 2
a329 1
=head1 GV Functions
d333 2
a334 7
=item is_gv_magical
X<is_gv_magical>

Returns C<TRUE> if given the name of a magical GV.

Currently only useful internally when determining if a GV should be
created even in rvalue contexts.
d336 5
a340 2
C<flags> is not used at present but available for future extension to
allow selecting particular classes of magical variable.
d342 1
a342 15
Currently assumes that C<name> is NUL terminated (as well as len being valid).
This assumption is met by all callers within the perl core, which all pass
pointers returned by SvPV.

	bool	is_gv_magical(const char *name, STRLEN len, U32 flags)

=for hackers
Found in file gv.c

=item is_gv_magical_sv
X<is_gv_magical_sv>

Returns C<TRUE> if given the name of a magical GV. Calls is_gv_magical.

	bool	is_gv_magical_sv(SV *name, U32 flags)
d345 1
a345 1
Found in file gv.c
d350 1
a350 1
=head1 Hash Manipulation Functions
d354 2
a355 2
=item refcounted_he_chain_2hv
X<refcounted_he_chain_2hv>
d357 5
a361 2
Generates and returns a C<HV *> by walking up the tree starting at the passed
in C<struct refcounted_he *>.
d363 1
a363 1
	HV *	refcounted_he_chain_2hv(const struct refcounted_he *c)
d366 1
a366 1
Found in file hv.c
d368 2
a369 2
=item refcounted_he_free
X<refcounted_he_free>
d371 4
a374 3
Decrements the reference count of the passed in C<struct refcounted_he *>
by one. If the reference count reaches zero the structure's memory is freed,
and C<refcounted_he_free> iterates onto the parent node.
d376 1
a376 1
	void	refcounted_he_free(struct refcounted_he *he)
d379 1
a379 1
Found in file hv.c
d381 2
a382 2
=item refcounted_he_new
X<refcounted_he_new>
d384 3
a386 3
Creates a new C<struct refcounted_he>. As S<key> is copied, and value is
stored in a compact form, all references remain the property of the caller.
The C<struct refcounted_he> is returned with a reference count of 1.
d388 1
a388 1
	struct refcounted_he *	refcounted_he_new(struct refcounted_he *const parent, SV *const key, SV *const value)
d391 1
a391 1
Found in file hv.c
d393 2
d396 1
a396 1
=back
d398 1
a398 1
=head1 IO Functions
d400 2
a401 1
=over 8
d403 2
a404 2
=item start_glob
X<start_glob>
d406 1
a406 4
Function called by C<do_readline> to spawn a glob (or do the glob inside
perl on VMS). This code used to be inline, but now perl uses C<File::Glob>
this glob starter is only used by miniperl during the build process.
Moving it away shrinks pp_hot.c; shrinking pp_hot.c helps speed perl up.
d408 1
a408 1
	PerlIO*	start_glob(SV* pattern, IO *io)
d411 1
a411 1
Found in file doio.c
d413 2
d416 1
a416 1
=back
d418 1
a418 11
=head1 Magical Functions

=over 8

=item magic_sethint
X<magic_sethint>

Triggered by a delete from %^H, records the key to
C<PL_compiling.cop_hints_hash>.

	int	magic_sethint(SV* sv, MAGIC* mg)
d421 1
a421 1
Found in file mg.c
d423 2
a424 2
=item mg_localize
X<mg_localize>
d426 1
a426 3
Copy some of the magic from an existing SV to new localized version of
that SV. Container magic (eg %ENV, $1, tie) gets copied, value magic
doesn't (eg taint, pos).
d428 1
a428 1
	void	mg_localize(SV* sv, SV* nsv)
d431 1
a431 1
Found in file mg.c
d436 1
a436 1
=head1 MRO Functions
d440 2
a441 2
=item mro_get_linear_isa_c3
X<mro_get_linear_isa_c3>
d443 1
a443 4
Returns the C3 linearization of @@ISA
the given stash.  The return value is a read-only AV*.
C<level> should be 0 (it is used internally in this
function's recursion).
d445 2
a446 5
You are responsible for C<SvREFCNT_inc()> on the
return value if you plan to store it anywhere
semi-permanently (otherwise it might be deleted
out from under you the next time the cache is
invalidated).
d448 8
a455 1
	AV*	mro_get_linear_isa_c3(HV* stash, I32 level)
d458 1
a458 1
Found in file mro.c
a459 2
=item mro_get_linear_isa_dfs
X<mro_get_linear_isa_dfs>
d461 1
a461 4
Returns the Depth-First Search linearization of @@ISA
the given stash.  The return value is a read-only AV*.
C<level> should be 0 (it is used internally in this
function's recursion).
d463 1
a463 5
You are responsible for C<SvREFCNT_inc()> on the
return value if you plan to store it anywhere
semi-permanently (otherwise it might be deleted
out from under you the next time the cache is
invalidated).
d465 1
a465 1
	AV*	mro_get_linear_isa_dfs(HV* stash, I32 level)
d467 2
a468 2
=for hackers
Found in file mro.c
d470 4
a473 2
=item mro_isa_changed_in
X<mro_isa_changed_in>
d475 1
a475 5
Takes the necessary steps (cache invalidations, mostly)
when the @@ISA of the given package has changed.  Invoked
by the C<setisa> magic, should not need to invoke directly.

	void	mro_isa_changed_in(HV* stash)
d478 1
a478 1
Found in file mro.c
d494 1
a494 2
executing). Require'd files are simply evals without any outer lexical
scope.
d533 11
a543 15
xlow+1..xhigh inclusive in the NV union is a range of cop_seq numbers for
which the name is valid.  For typed lexicals name SV is SVt_PVMG and SvSTASH
points at the type.  For C<our> lexicals, the type is also SVt_PVMG, with the
SvOURSTASH slot pointing at the stash of the associated global (so that
duplicate C<our> declarations in the same package can be detected).  SvUVX is
sometimes hijacked to store the generation number during compilation.

If SvFAKE is set on the name SV, then that slot in the frame AV is
a REFCNT'ed reference to a lexical from "outside". In this case,
the name SV does not use xlow and xhigh to store a cop_seq range, since it is
in scope throughout. Instead xhigh stores some flags containing info about
the real lexical (is it declared in an anon, and is it capable of being
instantiated multiple times?), and for fake ANONs, xlow contains the index
within the parent's pad where the lexical's value is stored, to make
cloning quicker.
a549 3
Note that formats are treated as anon subs, and are cloned each time
write is called (if necessary).

d616 1
a616 2
Create a new name and associated PADMY SV in the current pad; return the
offset.
d620 3
a622 1
SvOURSTASH to that value
d626 1
a626 1
	PADOFFSET	pad_add_name(const char *name, HV* typestash, HV* ourstash, bool clone, bool state)
d662 1
a662 1
	void	pad_check_dup(const char* name, bool is_our, const HV* ourstash)
d671 4
a674 15
in the inner pads if it's found in an outer one.

Returns the offset in the bottom pad of the lex or the fake lex.
cv is the CV in which to start the search, and seq is the current cop_seq
to match against. If warn is true, print appropriate warnings.  The out_*
vars return values, and so are pointers to where the returned values
should be stored. out_capture, if non-null, requests that the innermost
instance of the lexical is captured; out_name_sv is set to the innermost
matched namesv or fake namesv; out_flags returns the flags normally
associated with the IVX field of a fake namesv.

Note that pad_findlex() is recursive; it recurses up the chain of CVs,
then comes back down, adding fake entries as it goes. It has to be this way
because fake namesvs in anon protoypes have to store in xlow the index into
the parent pad.
d676 1
a676 1
	PADOFFSET	pad_findlex(const char *name, const CV* cv, U32 seq, int warn, SV** out_capture, SV** out_name_sv, int *out_flags)
d690 1
a690 1
	PADOFFSET	pad_findmy(const char* name)
d748 2
a749 2
this depth, in which case don't bother creating a new one.  Then give
the new pad an @@_ in slot zero.
d751 1
a751 1
	void	pad_push(PADLIST *padlist, int depth)
a820 86
=head1 Per-Interpreter Variables

=over 8

=item PL_DBsingle
X<PL_DBsingle>

When Perl is run in debugging mode, with the B<-d> switch, this SV is a
boolean which indicates whether subs are being single-stepped.
Single-stepping is automatically turned on after every step.  This is the C
variable which corresponds to Perl's $DB::single variable.  See
C<PL_DBsub>.

	SV *	PL_DBsingle

=for hackers
Found in file intrpvar.h

=item PL_DBsub
X<PL_DBsub>

When Perl is run in debugging mode, with the B<-d> switch, this GV contains
the SV which holds the name of the sub being debugged.  This is the C
variable which corresponds to Perl's $DB::sub variable.  See
C<PL_DBsingle>.

	GV *	PL_DBsub

=for hackers
Found in file intrpvar.h

=item PL_DBtrace
X<PL_DBtrace>

Trace variable used when Perl is run in debugging mode, with the B<-d>
switch.  This is the C variable which corresponds to Perl's $DB::trace
variable.  See C<PL_DBsingle>.

	SV *	PL_DBtrace

=for hackers
Found in file intrpvar.h

=item PL_dowarn
X<PL_dowarn>

The C variable which corresponds to Perl's $^W warning variable.

	bool	PL_dowarn

=for hackers
Found in file intrpvar.h

=item PL_last_in_gv
X<PL_last_in_gv>

The GV which was last used for a filehandle input operation. (C<< <FH> >>)

	GV*	PL_last_in_gv

=for hackers
Found in file intrpvar.h

=item PL_ofs_sv
X<PL_ofs_sv>

The output field separator - C<$,> in Perl space.

	SV*	PL_ofs_sv

=for hackers
Found in file intrpvar.h

=item PL_rs
X<PL_rs>

The input record separator - C<$/> in Perl space.

	SV*	PL_rs

=for hackers
Found in file intrpvar.h


=back

d853 10
a909 58
=head1 SV-Body Allocation

=over 8

=item sv_2num
X<sv_2num>

Return an SV with the numeric value of the source SV, doing any necessary
reference or overload conversion.  You must use the C<SvNUM(sv)> macro to
access this function.

	SV*	sv_2num(SV* sv)

=for hackers
Found in file sv.c


=back

=head1 Unicode Support

=over 8

=item find_uninit_var
X<find_uninit_var>

Find the name of the undefined variable (if any) that caused the operator o
to issue a "Use of uninitialized value" warning.
If match is true, only return a name if it's value matches uninit_sv.
So roughly speaking, if a unary operator (such as OP_COS) generates a
warning, then following the direct child of the op may yield an
OP_PADSV or OP_GV that gives the name of the undefined variable. On the
other hand, with OP_ADD there are two branches to follow, so we only print
the variable name if we get an exact match.

The name is returned as a mortal SV.

Assumes that PL_op is the op that originally triggered the error, and that
PL_comppad/PL_curpad points to the currently executing pad.

	SV*	find_uninit_var(OP* obase, SV* uninit_sv, bool top)

=for hackers
Found in file sv.c

=item report_uninit
X<report_uninit>

Print appropriate "Use of uninitialized variable" warning

	void	report_uninit(SV* uninit_sv)

=for hackers
Found in file sv.c


=back

a919 3
=cut

 ex: set ro:
@


