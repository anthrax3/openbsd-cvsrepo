head	1.13;
access;
symbols
	OPENBSD_5_3:1.12.0.10
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.8
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.6
	OPENBSD_5_0:1.12.0.4
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.2
	OPENBSD_4_9_BASE:1.12
	PERL_5_12_2:1.1.1.12
	OPENBSD_4_8:1.11.0.4
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.2
	OPENBSD_4_7_BASE:1.11
	PERL_5_10_1:1.1.1.11
	OPENBSD_4_6:1.10.0.6
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.2
	OPENBSD_4_5_BASE:1.10
	PERL_5_10_0:1.1.1.10
	OPENBSD_4_4:1.9.0.10
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.8
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.6
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.4
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.2
	OPENBSD_4_0_BASE:1.9
	PERL_5_8_8:1.1.1.9
	OPENBSD_3_9:1.8.0.6
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.4
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.2
	OPENBSD_3_7_BASE:1.8
	PERL_5_8_6:1.1.1.8
	OPENBSD_3_6:1.7.0.2
	OPENBSD_3_6_BASE:1.7
	PERL_5_8_5:1.1.1.7
	PERL_5_8_3:1.1.1.6
	OPENBSD_3_5:1.6.0.2
	OPENBSD_3_5_BASE:1.6
	PERL_5_8_2:1.1.1.5
	OPENBSD_3_4:1.5.0.4
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.5.0.2
	OPENBSD_3_3_BASE:1.5
	PERL_5_8_0:1.1.1.4
	OPENBSD_3_2:1.4.0.6
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.4
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4
	PERL_5_6_1:1.1.1.3
	OPENBSD_2_9:1.3.0.6
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	PERL_5_6_0:1.1.1.2
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	PERL_500503:1.1.1.1
	CPAN:1.1.1
	OPENBSD_2_5:1.1.0.6
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.4
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.2
	OPENBSD_2_3_BASE:1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.13
date	2013.03.25.20.40.58;	author sthen;	state dead;
branches;
next	1.12;

1.12
date	2010.09.24.15.07.03;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2009.10.12.18.24.47;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2008.09.29.17.36.16;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2006.03.28.19.23.10;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2005.01.15.21.30.36;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2004.04.07.21.33.08;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2003.12.03.03.02.44;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2002.10.27.22.25.33;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2001.05.24.18.35.53;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.06.17.07.26;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	99.04.29.22.52.11;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	97.11.30.07.59.09;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.29.22.40.42;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2000.04.06.16.10.23;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2001.05.24.18.24.35;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2002.10.27.22.15.04;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2003.12.03.02.44.21;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2004.04.07.21.13.32;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2004.08.09.17.48.08;	author millert;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2005.01.15.21.17.49;	author millert;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2006.03.28.18.49.18;	author millert;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	2008.09.29.17.18.51;	author millert;	state Exp;
branches;
next	1.1.1.11;

1.1.1.11
date	2009.10.12.18.10.40;	author millert;	state Exp;
branches;
next	1.1.1.12;

1.1.1.12
date	2010.09.24.14.49.10;	author millert;	state Exp;
branches;
next	;


desc
@perl 5.004_04
@


1.13
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@=head1 NAME

perlfaq3 - Programming Tools

=head1 DESCRIPTION

This section of the FAQ answers questions related to programmer tools
and programming support.

=head2 How do I do (anything)?

Have you looked at CPAN (see L<perlfaq2>)?  The chances are that
someone has already written a module that can solve your problem.
Have you read the appropriate manpages?  Here's a brief index:

	Basics	        perldata, perlvar, perlsyn, perlop, perlsub
	Execution	perlrun, perldebug
	Functions	perlfunc
	Objects		perlref, perlmod, perlobj, perltie
	Data Structures	perlref, perllol, perldsc
	Modules		perlmod, perlmodlib, perlsub
	Regexes		perlre, perlfunc, perlop, perllocale
	Moving to perl5	perltrap, perl
	Linking w/C	perlxstut, perlxs, perlcall, perlguts, perlembed
	Various 	http://www.cpan.org/misc/olddoc/FMTEYEWTK.tgz
			(not a man-page but still useful, a collection
			 of various essays on Perl techniques)

A crude table of contents for the Perl manpage set is found in L<perltoc>.

=head2 How can I use Perl interactively?

The typical approach uses the Perl debugger, described in the
C<perldebug(1)> manpage, on an "empty" program, like this:

    perl -de 42

Now just type in any legal Perl code, and it will be immediately
evaluated.  You can also examine the symbol table, get stack
backtraces, check variable values, set breakpoints, and other
operations typically found in symbolic debuggers.

=head2 Is there a Perl shell?

The C<psh> (Perl sh) is currently at version 1.8. The Perl Shell is a shell
that combines the interactive nature of a Unix shell with the power of
Perl. The goal is a full featured shell that behaves as expected for
normal shell activity and uses Perl syntax and functionality for
control-flow statements and other things. You can get C<psh> at
http://sourceforge.net/projects/psh/ .

C<Zoidberg> is a similar project and provides a shell written in perl,
configured in perl and operated in perl. It is intended as a login shell
and development environment. It can be found at
http://pardus-larus.student.utwente.nl/~pardus/projects/zoidberg/
or your local CPAN mirror.

The C<Shell.pm> module (distributed with Perl) makes Perl try commands
which aren't part of the Perl language as shell commands.  C<perlsh> from
the source distribution is simplistic and uninteresting, but may still
be what you want.

=head2 How do I find which modules are installed on my system?

From the command line, you can use the C<cpan> command's C<-l> switch:

	$ cpan -l

You can also use C<cpan>'s C<-a> switch to create an autobundle file
that C<CPAN.pm> understands and can use to re-install every module:

	$ cpan -a

Inside a Perl program, you can use the C<ExtUtils::Installed> module to
show all installed distributions, although it can take awhile to do
its magic.  The standard library which comes with Perl just shows up
as "Perl" (although you can get those with C<Module::CoreList>).

	use ExtUtils::Installed;

	my $inst    = ExtUtils::Installed->new();
	my @@modules = $inst->modules();

If you want a list of all of the Perl module filenames, you
can use C<File::Find::Rule>:

	use File::Find::Rule;

	my @@files = File::Find::Rule->
		extras({follow => 1})->
		file()->
		name( '*.pm' )->
		in( @@INC )
		;

If you do not have that module, you can do the same thing
with C<File::Find> which is part of the standard library:

	use File::Find;
	my @@files;

	find(
	    {
		wanted => sub {
		    push @@files, $File::Find::fullname
			if -f $File::Find::fullname && /\.pm$/
		},
		follow => 1,
		follow_skip => 2,
	    },
	    @@INC
	);

	print join "\n", @@files;

If you simply need to quickly check to see if a module is
available, you can check for its documentation.  If you can
read the documentation the module is most likely installed.
If you cannot read the documentation, the module might not
have any (in rare cases):

	$ perldoc Module::Name

You can also try to include the module in a one-liner to see if
perl finds it:

	$ perl -MModule::Name -e1

=head2 How do I debug my Perl programs?

(contributed by brian d foy)

Before you do anything else, you can help yourself by ensuring that
you let Perl tell you about problem areas in your code. By turning
on warnings and strictures, you can head off many problems before
they get too big. You can find out more about these in L<strict>
and L<warnings>.

	#!/usr/bin/perl
	use strict;
	use warnings;

Beyond that, the simplest debugger is the C<print> function. Use it
to look at values as you run your program:

	print STDERR "The value is [$value]\n";

The C<Data::Dumper> module can pretty-print Perl data structures:

	use Data::Dumper qw( Dumper );
	print STDERR "The hash is " . Dumper( \%hash ) . "\n";

Perl comes with an interactive debugger, which you can start with the
C<-d> switch. It's fully explained in L<perldebug>.

If you'd like a graphical user interface and you have C<Tk>, you can use
C<ptkdb>. It's on CPAN and available for free.

If you need something much more sophisticated and controllable, Leon
Brocard's C<Devel::ebug> (which you can call with the C<-D> switch as C<-Debug>)
gives you the programmatic hooks into everything you need to write your
own (without too much pain and suffering).

You can also use a commercial debugger such as Affrus (Mac OS X), Komodo
from Activestate (Windows and Mac OS X), or EPIC (most platforms).

=head2 How do I profile my Perl programs?

(contributed by brian d foy, updated Fri Jul 25 12:22:26 PDT 2008)

The C<Devel> namespace has several modules which you can use to
profile your Perl programs. The C<Devel::DProf> module comes with Perl
and you can invoke it with the C<-d> switch:

	perl -d:DProf program.pl

After running your program under C<DProf>, you'll get a F<tmon.out> file
with the profile data. To look at the data, you can turn it into a
human-readable report with the C<dprofpp> program that comes with
C<Devel::DProf>.

	dprofpp

You can also do the profiling and reporting in one step with the C<-p>
switch to C<dprofpp>:

	dprofpp -p program.pl

The C<Devel::NYTProf> (New York Times Profiler) does both statement
and subroutine profiling. It's available from CPAN and you also invoke
it with the C<-d> switch:

	perl -d:NYTProf some_perl.pl

Like C<DProf>, it creates a database of the profile information that you
can turn into reports. The C<nytprofhtml> command turns the data into
an HTML report similar to the C<Devel::Cover> report:

	nytprofhtml

CPAN has several other profilers that you can invoke in the same
fashion. You might also be interested in using the C<Benchmark> to
measure and compare code snippets.

You can read more about profiling in I<Programming Perl>, chapter 20,
or I<Mastering Perl>, chapter 5.

L<perldebguts> documents creating a custom debugger if you need to
create a special sort of profiler. brian d foy describes the process
in I<The Perl Journal>, "Creating a Perl Debugger",
http://www.ddj.com/184404522 , and "Profiling in Perl"
http://www.ddj.com/184404580 .

Perl.com has two interesting articles on profiling: "Profiling Perl",
by Simon Cozens, http://www.perl.com/lpt/a/850 and "Debugging and
Profiling mod_perl Applications", by Frank Wiles,
http://www.perl.com/pub/a/2006/02/09/debug_mod_perl.html .

Randal L. Schwartz writes about profiling in "Speeding up Your Perl
Programs" for I<Unix Review>,
http://www.stonehenge.com/merlyn/UnixReview/col49.html , and "Profiling
in Template Toolkit via Overriding" for I<Linux Magazine>,
http://www.stonehenge.com/merlyn/LinuxMag/col75.html .

=head2 How do I cross-reference my Perl programs?

The C<B::Xref> module can be used to generate cross-reference reports
for Perl programs.

    perl -MO=Xref[,OPTIONS] scriptname.plx

=head2 Is there a pretty-printer (formatter) for Perl?

C<Perltidy> is a Perl script which indents and reformats Perl scripts
to make them easier to read by trying to follow the rules of the
L<perlstyle>. If you write Perl scripts, or spend much time reading
them, you will probably find it useful.  It is available at
http://perltidy.sourceforge.net .

Of course, if you simply follow the guidelines in L<perlstyle>,
you shouldn't need to reformat.  The habit of formatting your code
as you write it will help prevent bugs.  Your editor can and should
help you with this.  The perl-mode or newer cperl-mode for emacs
can provide remarkable amounts of help with most (but not all)
code, and even less programmable editors can provide significant
assistance.  Tom Christiansen and many other VI users  swear by
the following settings in vi and its clones:

    set ai sw=4
    map! ^O {^M}^[O^T

Put that in your F<.exrc> file (replacing the caret characters
with control characters) and away you go.  In insert mode, ^T is
for indenting, ^D is for undenting, and ^O is for blockdenting--as
it were.  A more complete example, with comments, can be found at
http://www.cpan.org/authors/id/TOMC/scripts/toms.exrc.gz

The a2ps http://www-inf.enst.fr/%7Edemaille/a2ps/black+white.ps.gz does
lots of things related to generating nicely printed output of
documents.

=head2 Is there a ctags for Perl?

(contributed by brian d foy)

Ctags uses an index to quickly find things in source code, and many
popular editors support ctags for several different languages,
including Perl.

Exuberent ctags supports Perl: http://ctags.sourceforge.net/

You might also try pltags: http://www.mscha.com/pltags.zip

=head2 Is there an IDE or Windows Perl Editor?

Perl programs are just plain text, so any editor will do.

If you're on Unix, you already have an IDE--Unix itself.  The Unix
philosophy is the philosophy of several small tools that each do one
thing and do it well.  It's like a carpenter's toolbox.

If you want an IDE, check the following (in alphabetical order, not
order of preference):

=over 4

=item Eclipse

http://e-p-i-c.sf.net/

The Eclipse Perl Integration Project integrates Perl
editing/debugging with Eclipse.

=item Enginsite

http://www.enginsite.com/

Perl Editor by EngInSite is a complete integrated development
environment (IDE) for creating, testing, and  debugging  Perl scripts;
the tool runs on Windows 9x/NT/2000/XP or later.

=item Komodo

http://www.ActiveState.com/Products/Komodo/

ActiveState's cross-platform (as of October 2004, that's Windows, Linux,
and Solaris), multi-language IDE has Perl support, including a regular expression
debugger and remote debugging.

=item Notepad++

http://notepad-plus.sourceforge.net/

=item Open Perl IDE

http://open-perl-ide.sourceforge.net/

Open Perl IDE is an integrated development environment for writing
and debugging Perl scripts with ActiveState's ActivePerl distribution
under Windows 95/98/NT/2000.

=item OptiPerl

http://www.optiperl.com/

OptiPerl is a Windows IDE with simulated CGI environment, including
debugger and syntax highlighting editor.

=item Padre

http://padre.perlide.org/

Padre is cross-platform IDE for Perl written in Perl using wxWidgets to provide
a native look and feel. It's open source under the Artistic License.

=item PerlBuilder

http://www.solutionsoft.com/perl.htm

PerlBuilder is an integrated development environment for Windows that
supports Perl development.

=item visiPerl+

http://helpconsulting.net/visiperl/

From Help Consulting, for Windows.

=item Visual Perl

http://www.activestate.com/Products/Visual_Perl/

Visual Perl is a Visual Studio.NET plug-in from ActiveState.

=item Zeus

http://www.zeusedit.com/lookmain.html

Zeus for Window is another Win32 multi-language editor/IDE
that comes with support for Perl:

=back

For editors: if you're on Unix you probably have vi or a vi clone
already, and possibly an emacs too, so you may not need to download
anything. In any emacs the cperl-mode (M-x cperl-mode) gives you
perhaps the best available Perl editing mode in any editor.

If you are using Windows, you can use any editor that lets you work
with plain text, such as NotePad or WordPad. Word processors, such as
Microsoft Word or WordPerfect, typically do not work since they insert
all sorts of behind-the-scenes information, although some allow you to
save files as "Text Only". You can also download text editors designed
specifically for programming, such as Textpad (
http://www.textpad.com/ ) and UltraEdit ( http://www.ultraedit.com/ ),
among others.

If you are using MacOS, the same concerns apply. MacPerl (for Classic
environments) comes with a simple editor. Popular external editors are
BBEdit ( http://www.bbedit.com/ ) or Alpha (
http://www.his.com/~jguyer/Alpha/Alpha8.html ). MacOS X users can use
Unix editors as well.

=over 4

=item GNU Emacs

http://www.gnu.org/software/emacs/windows/ntemacs.html

=item MicroEMACS

http://www.microemacs.de/

=item XEmacs

http://www.xemacs.org/Download/index.html

=item Jed

http://space.mit.edu/~davis/jed/

=back

or a vi clone such as

=over 4

=item Elvis

ftp://ftp.cs.pdx.edu/pub/elvis/ http://www.fh-wedel.de/elvis/

=item Vile

http://dickey.his.com/vile/vile.html

=item Vim

http://www.vim.org/

=back

For vi lovers in general, Windows or elsewhere:

	http://www.thomer.com/thomer/vi/vi.html

nvi ( http://www.bostic.com/vi/ , available from CPAN in src/misc/) is
yet another vi clone, unfortunately not available for Windows, but in
Unix platforms you might be interested in trying it out, firstly because
strictly speaking it is not a vi clone, it is the real vi, or the new
incarnation of it, and secondly because you can embed Perl inside it
to use Perl as the scripting language.  nvi is not alone in this,
though: at least also vim and vile offer an embedded Perl.

The following are Win32 multilanguage editor/IDEs that support Perl:

=over 4

=item Codewright

http://www.borland.com/codewright/

=item MultiEdit

http://www.MultiEdit.com/

=item SlickEdit

http://www.slickedit.com/

=item ConTEXT

http://www.contexteditor.org/

=back

There is also a toyedit Text widget based editor written in Perl
that is distributed with the Tk module on CPAN.  The ptkdb
( http://ptkdb.sourceforge.net/ ) is a Perl/tk based debugger that
acts as a development environment of sorts.  Perl Composer
( http://perlcomposer.sourceforge.net/ ) is an IDE for Perl/Tk
GUI creation.

In addition to an editor/IDE you might be interested in a more
powerful shell environment for Win32.  Your options include

=over 4

=item Bash

from the Cygwin package ( http://sources.redhat.com/cygwin/ )

=item Ksh

from the MKS Toolkit ( http://www.mkssoftware.com/ ), or the Bourne shell of
the U/WIN environment ( http://www.research.att.com/sw/tools/uwin/ )

=item Tcsh

ftp://ftp.astron.com/pub/tcsh/ , see also
http://www.primate.wisc.edu/software/csh-tcsh-book/

=item Zsh

http://www.zsh.org/

=back

MKS and U/WIN are commercial (U/WIN is free for educational and
research purposes), Cygwin is covered by the GNU General Public
License (but that shouldn't matter for Perl use).  The Cygwin, MKS,
and U/WIN all contain (in addition to the shells) a comprehensive set
of standard Unix toolkit utilities.

If you're transferring text files between Unix and Windows using FTP
be sure to transfer them in ASCII mode so the ends of lines are
appropriately converted.

On Mac OS the MacPerl Application comes with a simple 32k text editor
that behaves like a rudimentary IDE.  In contrast to the MacPerl Application
the MPW Perl tool can make use of the MPW Shell itself as an editor (with
no 32k limit).

=over 4

=item Affrus

is a full Perl development environment with full debugger support
( http://www.latenightsw.com ).

=item Alpha

is an editor, written and extensible in Tcl, that nonetheless has
built in support for several popular markup and programming languages
including Perl and HTML ( http://www.his.com/~jguyer/Alpha/Alpha8.html ).

=item BBEdit and BBEdit Lite

are text editors for Mac OS that have a Perl sensitivity mode
( http://web.barebones.com/ ).

=back

=head2 Where can I get Perl macros for vi?

For a complete version of Tom Christiansen's vi configuration file,
see http://www.cpan.org/authors/Tom_Christiansen/scripts/toms.exrc.gz ,
the standard benchmark file for vi emulators.  The file runs best with nvi,
the current version of vi out of Berkeley, which incidentally can be built
with an embedded Perl interpreter--see http://www.cpan.org/src/misc/ .

=head2 Where can I get perl-mode or cperl-mode for emacs?
X<emacs>

Since Emacs version 19 patchlevel 22 or so, there have been both a
perl-mode.el and support for the Perl debugger built in.  These should
come with the standard Emacs 19 distribution.

Note that the perl-mode of emacs will have fits with C<"main'foo">
(single quote), and mess up the indentation and highlighting.  You
are probably using C<"main::foo"> in new Perl code anyway, so this
shouldn't be an issue.

For CPerlMode, see http://www.emacswiki.org/cgi-bin/wiki/CPerlMode

=head2 How can I use curses with Perl?

The Curses module from CPAN provides a dynamically loadable object
module interface to a curses library.  A small demo can be found at the
directory http://www.cpan.org/authors/Tom_Christiansen/scripts/rep.gz ;
this program repeats a command and updates the screen as needed, rendering
B<rep ps axu> similar to B<top>.

=head2 How can I write a GUI (X, Tk, Gtk, etc.) in Perl?
X<GUI> X<Tk> X<Wx> X<WxWidgets> X<Gtk> X<Gtk2> X<CamelBones> X<Qt>

(contributed by Ben Morrow)

There are a number of modules which let you write GUIs in Perl. Most
GUI toolkits have a perl interface: an incomplete list follows.

=over 4

=item Tk

This works under Unix and Windows, and the current version doesn't
look half as bad under Windows as it used to. Some of the gui elements
still don't 'feel' quite right, though. The interface is very natural
and 'perlish', making it easy to use in small scripts that just need a
simple gui. It hasn't been updated in a while.

=item Wx

This is a Perl binding for the cross-platform wxWidgets toolkit
( http://www.wxwidgets.org ). It works under Unix, Win32 and Mac OS X,
using native widgets (Gtk under Unix). The interface follows the C++
interface closely, but the documentation is a little sparse for someone
who doesn't know the library, mostly just referring you to the C++
documentation.

=item Gtk and Gtk2

These are Perl bindings for the Gtk toolkit ( http://www.gtk.org ). The
interface changed significantly between versions 1 and 2 so they have
separate Perl modules. It runs under Unix, Win32 and Mac OS X (currently
it requires an X server on Mac OS, but a 'native' port is underway), and
the widgets look the same on every plaform: i.e., they don't match the
native widgets. As with Wx, the Perl bindings follow the C API closely,
and the documentation requires you to read the C documentation to
understand it.

=item Win32::GUI

This provides access to most of the Win32 GUI widgets from Perl.
Obviously, it only runs under Win32, and uses native widgets. The Perl
interface doesn't really follow the C interface: it's been made more
Perlish, and the documentation is pretty good. More advanced stuff may
require familiarity with the C Win32 APIs, or reference to MSDN.

=item CamelBones

CamelBones ( http://camelbones.sourceforge.net ) is a Perl interface to
Mac OS X's Cocoa GUI toolkit, and as such can be used to produce native
GUIs on Mac OS X. It's not on CPAN, as it requires frameworks that
CPAN.pm doesn't know how to install, but installation is via the
standard OSX package installer. The Perl API is, again, very close to
the ObjC API it's wrapping, and the documentation just tells you how to
translate from one to the other.

=item Qt

There is a Perl interface to TrollTech's Qt toolkit, but it does not
appear to be maintained.

=item Athena

Sx is an interface to the Athena widget set which comes with X, but
again it appears not to be much used nowadays.

=back

=head2 How can I make my Perl program run faster?

The best way to do this is to come up with a better algorithm.  This
can often make a dramatic difference.  Jon Bentley's book
I<Programming Pearls> (that's not a misspelling!)  has some good tips
on optimization, too.  Advice on benchmarking boils down to: benchmark
and profile to make sure you're optimizing the right part, look for
better algorithms instead of microtuning your code, and when all else
fails consider just buying faster hardware.  You will probably want to
read the answer to the earlier question "How do I profile my Perl
programs?" if you haven't done so already.

A different approach is to autoload seldom-used Perl code.  See the
AutoSplit and AutoLoader modules in the standard distribution for
that.  Or you could locate the bottleneck and think about writing just
that part in C, the way we used to take bottlenecks in C code and
write them in assembler.  Similar to rewriting in C, modules that have
critical sections can be written in C (for instance, the PDL module
from CPAN).

If you're currently linking your perl executable to a shared
I<libc.so>, you can often gain a 10-25% performance benefit by
rebuilding it to link with a static libc.a instead.  This will make a
bigger perl executable, but your Perl programs (and programmers) may
thank you for it.  See the F<INSTALL> file in the source distribution
for more information.

The undump program was an ancient attempt to speed up Perl program by
storing the already-compiled form to disk.  This is no longer a viable
option, as it only worked on a few architectures, and wasn't a good
solution anyway.

=head2 How can I make my Perl program take less memory?

When it comes to time-space tradeoffs, Perl nearly always prefers to
throw memory at a problem.  Scalars in Perl use more memory than
strings in C, arrays take more than that, and hashes use even more.  While
there's still a lot to be done, recent releases have been addressing
these issues.  For example, as of 5.004, duplicate hash keys are
shared amongst all hashes using them, so require no reallocation.

In some cases, using substr() or vec() to simulate arrays can be
highly beneficial.  For example, an array of a thousand booleans will
take at least 20,000 bytes of space, but it can be turned into one
125-byte bit vector--a considerable memory savings.  The standard
Tie::SubstrHash module can also help for certain types of data
structure.  If you're working with specialist data structures
(matrices, for instance) modules that implement these in C may use
less memory than equivalent Perl modules.

Another thing to try is learning whether your Perl was compiled with
the system malloc or with Perl's builtin malloc.  Whichever one it
is, try using the other one and see whether this makes a difference.
Information about malloc is in the F<INSTALL> file in the source
distribution.  You can find out whether you are using perl's malloc by
typing C<perl -V:usemymalloc>.

Of course, the best way to save memory is to not do anything to waste
it in the first place. Good programming practices can go a long way
toward this:

=over 4

=item * Don't slurp!

Don't read an entire file into memory if you can process it line
by line. Or more concretely, use a loop like this:

	#
	# Good Idea
	#
	while (<FILE>) {
	   # ...
	}

instead of this:

	#
	# Bad Idea
	#
	@@data = <FILE>;
	foreach (@@data) {
	    # ...
	}

When the files you're processing are small, it doesn't much matter which
way you do it, but it makes a huge difference when they start getting
larger.

=item * Use map and grep selectively

Remember that both map and grep expect a LIST argument, so doing this:

        @@wanted = grep {/pattern/} <FILE>;

will cause the entire file to be slurped. For large files, it's better
to loop:

        while (<FILE>) {
                push(@@wanted, $_) if /pattern/;
        }

=item * Avoid unnecessary quotes and stringification

Don't quote large strings unless absolutely necessary:

        my $copy = "$large_string";

makes 2 copies of $large_string (one for $copy and another for the
quotes), whereas

        my $copy = $large_string;

only makes one copy.

Ditto for stringifying large arrays:

	{
	local $, = "\n";
	print @@big_array;
	}

is much more memory-efficient than either

	print join "\n", @@big_array;

or

	{
	local $" = "\n";
	print "@@big_array";
	}


=item * Pass by reference

Pass arrays and hashes by reference, not by value. For one thing, it's
the only way to pass multiple lists or hashes (or both) in a single
call/return. It also avoids creating a copy of all the contents. This
requires some judgement, however, because any changes will be propagated
back to the original data. If you really want to mangle (er, modify) a
copy, you'll have to sacrifice the memory needed to make one.

=item * Tie large variables to disk.

For "big" data stores (i.e. ones that exceed available memory) consider
using one of the DB modules to store it on disk instead of in RAM. This
will incur a penalty in access time, but that's probably better than
causing your hard disk to thrash due to massive swapping.

=back

=head2 Is it safe to return a reference to local or lexical data?

Yes. Perl's garbage collection system takes care of this so
everything works out right.

    sub makeone {
	my @@a = ( 1 .. 10 );
	return \@@a;
    }

    for ( 1 .. 10 ) {
        push @@many, makeone();
    }

    print $many[4][5], "\n";

    print "@@many\n";

=head2 How can I free an array or hash so my program shrinks?

(contributed by Michael Carman)

You usually can't. Memory allocated to lexicals (i.e. my() variables)
cannot be reclaimed or reused even if they go out of scope. It is
reserved in case the variables come back into scope. Memory allocated
to global variables can be reused (within your program) by using
undef() and/or delete().

On most operating systems, memory allocated to a program can never be
returned to the system. That's why long-running programs sometimes re-
exec themselves. Some operating systems (notably, systems that use
mmap(2) for allocating large chunks of memory) can reclaim memory that
is no longer used, but on such systems, perl must be configured and
compiled to use the OS's malloc, not perl's.

In general, memory allocation and de-allocation isn't something you can
or should be worrying about much in Perl.

See also "How can I make my Perl program take less memory?"

=head2 How can I make my CGI script more efficient?

Beyond the normal measures described to make general Perl programs
faster or smaller, a CGI program has additional issues.  It may be run
several times per second.  Given that each time it runs it will need
to be re-compiled and will often allocate a megabyte or more of system
memory, this can be a killer.  Compiling into C B<isn't going to help
you> because the process start-up overhead is where the bottleneck is.

There are two popular ways to avoid this overhead.  One solution
involves running the Apache HTTP server (available from
http://www.apache.org/ ) with either of the mod_perl or mod_fastcgi
plugin modules.

With mod_perl and the Apache::Registry module (distributed with
mod_perl), httpd will run with an embedded Perl interpreter which
pre-compiles your script and then executes it within the same address
space without forking.  The Apache extension also gives Perl access to
the internal server API, so modules written in Perl can do just about
anything a module written in C can.  For more on mod_perl, see
http://perl.apache.org/

With the FCGI module (from CPAN) and the mod_fastcgi
module (available from http://www.fastcgi.com/ ) each of your Perl
programs becomes a permanent CGI daemon process.

Both of these solutions can have far-reaching effects on your system
and on the way you write your CGI programs, so investigate them with
care.

See http://www.cpan.org/modules/by-category/15_World_Wide_Web_HTML_HTTP_CGI/ .

=head2 How can I hide the source for my Perl program?

Delete it. :-) Seriously, there are a number of (mostly
unsatisfactory) solutions with varying levels of "security".

First of all, however, you I<can't> take away read permission, because
the source code has to be readable in order to be compiled and
interpreted.  (That doesn't mean that a CGI script's source is
readable by people on the web, though--only by people with access to
the filesystem.)  So you have to leave the permissions at the socially
friendly 0755 level.

Some people regard this as a security problem.  If your program does
insecure things and relies on people not knowing how to exploit those
insecurities, it is not secure.  It is often possible for someone to
determine the insecure things and exploit them without viewing the
source.  Security through obscurity, the name for hiding your bugs
instead of fixing them, is little security indeed.

You can try using encryption via source filters (Starting from Perl
5.8 the Filter::Simple and Filter::Util::Call modules are included in
the standard distribution), but any decent programmer will be able to
decrypt it.  You can try using the byte code compiler and interpreter
described later in L<perlfaq3>, but the curious might still be able to
de-compile it. You can try using the native-code compiler described
later, but crackers might be able to disassemble it.  These pose
varying degrees of difficulty to people wanting to get at your code,
but none can definitively conceal it (true of every language, not just
Perl).

It is very easy to recover the source of Perl programs.  You simply
feed the program to the perl interpreter and use the modules in
the B:: hierarchy.  The B::Deparse module should be able to
defeat most attempts to hide source.  Again, this is not
unique to Perl.

If you're concerned about people profiting from your code, then the
bottom line is that nothing but a restrictive license will give you
legal security.  License your software and pepper it with threatening
statements like "This is unpublished proprietary software of XYZ Corp.
Your access to it does not give you permission to use it blah blah
blah."  We are not lawyers, of course, so you should see a lawyer if
you want to be sure your license's wording will stand up in court.

=head2 How can I compile my Perl program into byte code or C?

(contributed by brian d foy)

In general, you can't do this.  There are some things that may work
for your situation though.  People usually ask this question
because they want to distribute their works without giving away
the source code, and most solutions trade disk space for convenience.
You probably won't see much of a speed increase either, since most
solutions simply bundle a Perl interpreter in the final product
(but see L<How can I make my Perl program run faster?>).

The Perl Archive Toolkit ( http://par.perl.org/ ) is Perl's
analog to Java's JAR.  It's freely available and on CPAN (
http://search.cpan.org/dist/PAR/ ).

There are also some commercial products that may work for you, although
you have to buy a license for them.

The Perl Dev Kit ( http://www.activestate.com/Products/Perl_Dev_Kit/ )
from ActiveState can "Turn your Perl programs into ready-to-run
executables for HP-UX, Linux, Solaris and Windows."

Perl2Exe ( http://www.indigostar.com/perl2exe.htm ) is a command line
program for converting perl scripts to executable files.  It targets both
Windows and Unix platforms.

=head2 How can I get C<#!perl> to work on [MS-DOS,NT,...]?

For OS/2 just use

    extproc perl -S -your_switches

as the first line in C<*.cmd> file (C<-S> due to a bug in cmd.exe's
"extproc" handling).  For DOS one should first invent a corresponding
batch file and codify it in C<ALTERNATE_SHEBANG> (see the
F<dosish.h> file in the source distribution for more information).

The Win95/NT installation, when using the ActiveState port of Perl,
will modify the Registry to associate the C<.pl> extension with the
perl interpreter.  If you install another port, perhaps even building
your own Win95/NT Perl from the standard sources by using a Windows port
of gcc (e.g., with cygwin or mingw32), then you'll have to modify
the Registry yourself.  In addition to associating C<.pl> with the
interpreter, NT people can use: C<SET PATHEXT=%PATHEXT%;.PL> to let them
run the program C<install-linux.pl> merely by typing C<install-linux>.

Under "Classic" MacOS, a perl program will have the appropriate Creator and
Type, so that double-clicking them will invoke the MacPerl application.
Under Mac OS X, clickable apps can be made from any C<#!> script using Wil
Sanchez' DropScript utility: http://www.wsanchez.net/software/ .

I<IMPORTANT!>: Whatever you do, PLEASE don't get frustrated, and just
throw the perl interpreter into your cgi-bin directory, in order to
get your programs working for a web server.  This is an EXTREMELY big
security risk.  Take the time to figure out how to do it correctly.

=head2 Can I write useful Perl programs on the command line?

Yes.  Read L<perlrun> for more information.  Some examples follow.
(These assume standard Unix shell quoting rules.)

    # sum first and last fields
    perl -lane 'print $F[0] + $F[-1]' *

    # identify text files
    perl -le 'for(@@ARGV) {print if -f && -T _}' *

    # remove (most) comments from C program
    perl -0777 -pe 's{/\*.*?\*/}{}gs' foo.c

    # make file a month younger than today, defeating reaper daemons
    perl -e '$X=24*60*60; utime(time(),time() + 30 * $X,@@ARGV)' *

    # find first unused uid
    perl -le '$i++ while getpwuid($i); print $i'

    # display reasonable manpath
    echo $PATH | perl -nl -072 -e '
	s![^/+]*$!man!&&-d&&!$s{$_}++&&push@@m,$_;END{print"@@m"}'

OK, the last one was actually an Obfuscated Perl Contest entry. :-)

=head2 Why don't Perl one-liners work on my DOS/Mac/VMS system?

The problem is usually that the command interpreters on those systems
have rather different ideas about quoting than the Unix shells under
which the one-liners were created.  On some systems, you may have to
change single-quotes to double ones, which you must I<NOT> do on Unix
or Plan9 systems.  You might also have to change a single % to a %%.

For example:

    # Unix (including Mac OS X)
    perl -e 'print "Hello world\n"'

    # DOS, etc.
    perl -e "print \"Hello world\n\""

    # Mac Classic
    print "Hello world\n"
     (then Run "Myscript" or Shift-Command-R)

    # MPW
    perl -e 'print "Hello world\n"'

    # VMS
    perl -e "print ""Hello world\n"""

The problem is that none of these examples are reliable: they depend on the
command interpreter.  Under Unix, the first two often work. Under DOS,
it's entirely possible that neither works.  If 4DOS was the command shell,
you'd probably have better luck like this:

  perl -e "print <Ctrl-x>"Hello world\n<Ctrl-x>""

Under the Mac, it depends which environment you are using.  The MacPerl
shell, or MPW, is much like Unix shells in its support for several
quoting variants, except that it makes free use of the Mac's non-ASCII
characters as control characters.

Using qq(), q(), and qx(), instead of "double quotes", 'single
quotes', and `backticks`, may make one-liners easier to write.

There is no general solution to all of this.  It is a mess.

[Some of this answer was contributed by Kenneth Albanowski.]

=head2 Where can I learn about CGI or Web programming in Perl?

For modules, get the CGI or LWP modules from CPAN.  For textbooks,
see the two especially dedicated to web stuff in the question on
books.  For problems and questions related to the web, like "Why
do I get 500 Errors" or "Why doesn't it run from the browser right
when it runs fine on the command line", see the troubleshooting
guides and references in L<perlfaq9> or in the CGI MetaFAQ:

	http://www.perl.org/CGI_MetaFAQ.html

=head2 Where can I learn about object-oriented Perl programming?

A good place to start is L<perltoot>, and you can use L<perlobj>,
L<perlboot>, L<perltoot>, L<perltooc>, and L<perlbot> for reference.

A good book on OO on Perl is the "Object-Oriented Perl"
by Damian Conway from Manning Publications, or "Intermediate Perl"
by Randal Schwartz, brian d foy, and Tom Phoenix from O'Reilly Media.

=head2 Where can I learn about linking C with Perl?

If you want to call C from Perl, start with L<perlxstut>,
moving on to L<perlxs>, L<xsubpp>, and L<perlguts>.  If you want to
call Perl from C, then read L<perlembed>, L<perlcall>, and
L<perlguts>.  Don't forget that you can learn a lot from looking at
how the authors of existing extension modules wrote their code and
solved their problems.

You might not need all the power of XS. The Inline::C module lets
you put C code directly in your Perl source. It handles all the
magic to make it work. You still have to learn at least some of
the perl API but you won't have to deal with the complexity of the
XS support files.

=head2 I've read perlembed, perlguts, etc., but I can't embed perl in my C program; what am I doing wrong?

Download the ExtUtils::Embed kit from CPAN and run `make test'.  If
the tests pass, read the pods again and again and again.  If they
fail, see L<perlbug> and send a bug report with the output of
C<make test TEST_VERBOSE=1> along with C<perl -V>.

=head2 When I tried to run my script, I got this message. What does it mean?

A complete list of Perl's error messages and warnings with explanatory
text can be found in L<perldiag>. You can also use the splain program
(distributed with Perl) to explain the error messages:

    perl program 2>diag.out
    splain [-v] [-p] diag.out

or change your program to explain the messages for you:

    use diagnostics;

or

    use diagnostics -verbose;

=head2 What's MakeMaker?

(contributed by brian d foy)

The C<ExtUtils::MakeMaker> module, better known simply as "MakeMaker",
turns a Perl script, typically called C<Makefile.PL>, into a Makefile.
The Unix tool C<make> uses this file to manage dependencies and actions
to process and install a Perl distribution.

=head1 AUTHOR AND COPYRIGHT

Copyright (c) 1997-2010 Tom Christiansen, Nathan Torkington, and
other authors as noted. All rights reserved.

This documentation is free; you can redistribute it and/or modify it
under the same terms as Perl itself.

Irrespective of its distribution, all code examples here are in the public
domain.  You are permitted and encouraged to use this code and any
derivatives thereof in your own programs for fun or for profit as you
see fit.  A simple comment in the code giving credit to the FAQ would
be courteous but is not required.
@


1.12
log
@merge in perl 5.12.2 plus local changes
@
text
@@


1.11
log
@Merge in perl 5.10.1
@
text
@d34 1
a34 1
perldebug(1) manpage, on an "empty" program, like this:
d45 1
a45 1
The psh (Perl sh) is currently at version 1.8. The Perl Shell is a shell
d49 1
a49 1
control-flow statements and other things. You can get psh at
d52 1
a52 1
Zoidberg is a similar project and provides a shell written in perl,
d58 2
a59 2
The Shell.pm module (distributed with Perl) makes Perl try commands
which aren't part of the Perl language as shell commands.  perlsh from
d70 1
a70 1
that C<CPAN.pm> understands and cna use to re-install every module:
d74 1
a74 1
Inside a Perl program, you can use the ExtUtils::Installed module to
d77 1
a77 1
as "Perl" (although you can get those with Module::CoreList).
d85 1
a85 1
can use File::Find::Rule.
d97 1
a97 1
with File::Find which is part of the standard library.
d120 1
a120 1
have any (in rare cases).
d125 1
a125 1
perl finds it.
d156 1
a156 1
If you'd like a graphical user interface and you have Tk, you can use
d160 1
a160 1
Brocard's Devel::ebug (which you can call with the -D switch as -Debug)
d185 1
a185 1
switch to <dprofpp>:
d227 1
a227 1
The B::Xref module can be used to generate cross-reference reports
d234 1
a234 1
Perltidy is a Perl script which indents and reformats Perl scripts
d238 1
a238 1
http://perltidy.sourceforge.net
d278 1
a278 1
If you're on Unix, you already have an IDE--Unix itself.  The UNIX
d310 4
d333 2
a334 3
Padre is cross-platform IDE for Perl written in Perl using the the wxWidgets
to provide a native look and feel. It's open source under the Artistic
License.
d370 1
a370 1
with plain text, such as NotePad or WordPad.  Word processors, such as
d378 1
a378 1
If you are using MacOS, the same concerns apply.  MacPerl (for Classic
d428 1
a428 1
UNIX platforms you might be interested in trying it out, firstly because
d492 1
a492 1
of standard UNIX toolkit utilities.
a520 1

d531 2
a532 1
=head2 Where can I get perl-mode for emacs?
a537 4
In the Perl source directory, you'll find a directory called "emacs",
which contains a cperl-mode that color-codes keywords, provides
context-sensitive help, and other nifty things.

d543 2
d738 4
a741 4
        {
                local $, = "\n";
                print @@big_array;
        }
d745 1
a745 1
        print join "\n", @@big_array;
d749 4
a752 4
        {
                local $" = "\n";
                print "@@big_array";
        }
d914 1
a914 1
Windows and unix platforms.
d1082 1
a1082 1
The unix tool C<make> uses this file to manage dependencies and actions
a1084 8
=head1 REVISION

Revision: $Revision$

Date: $Date$

See L<perlfaq> for source control details and availability.

d1087 1
a1087 1
Copyright (c) 1997-2009 Tom Christiansen, Nathan Torkington, and
@


1.10
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@d54 2
a55 1
and development environment. It can be found at http://zoidberg.sf.net/
d65 13
a77 4
You can use the ExtUtils::Installed module to show all installed
distributions, although it can take awhile to do its magic.  The
standard library which comes with Perl just shows up as "Perl" (although
you can get those with Module::CoreList).
d89 6
a94 1
	my @@files = File::Find::Rule->file()->name( '*.pm' )->in( @@INC );
d99 2
a100 2
    use File::Find;
    my @@files;
d102 11
a112 8
    find(
      sub {
      	push @@files, $File::Find::name
      		if -f $File::Find::name && /\.pm$/
      	},

      @@INC
      );
d122 1
a122 1
	prompt% perldoc Module::Name
d127 1
a127 1
	perl -MModule::Name -e1
d169 55
a223 32
You should get the Devel::DProf module from the standard distribution
(or separately on CPAN) and also use Benchmark.pm from the standard
distribution.  The Benchmark module lets you time specific portions of
your code, while Devel::DProf gives detailed breakdowns of where your
code spends its time.

Here's a sample use of Benchmark:

  use Benchmark;

  @@junk = `cat /etc/motd`;
  $count = 10_000;

  timethese($count, {
            'map' => sub { my @@a = @@junk;
			   map { s/a/b/ } @@a;
			   return @@a },
            'for' => sub { my @@a = @@junk;
			   for (@@a) { s/a/b/ };
			   return @@a },
           });

This is what it prints (on one machine--your results will be dependent
on your hardware, operating system, and the load on your machine):

  Benchmark: timing 10000 iterations of for, map...
         for:  4 secs ( 3.97 usr  0.01 sys =  3.98 cpu)
         map:  6 secs ( 4.97 usr  0.00 sys =  4.97 cpu)

Be aware that a good benchmark is very hard to write.  It only tests the
data you give it and proves little about the differing complexities
of contrasting algorithms.
d325 8
d337 1
a337 1
PerlBuidler is an integrated development environment for Windows that
d431 1
a431 1
The following are Win32 multilanguage editor/IDESs that support Perl:
d447 4
d471 1
a471 1
from the MKS Toolkit ( http://www.mks.com/ ), or the Bourne shell of
d486 4
a489 4
research purposes), Cygwin is covered by the GNU Public License (but
that shouldn't matter for Perl use).  The Cygwin, MKS, and U/WIN all
contain (in addition to the shells) a comprehensive set of standard
UNIX toolkit utilities.
a520 3
Pepper and Pe are programming language sensitive text editors for Mac
OS X and BeOS respectively ( http://www.hekkelman.com/ ).

d572 2
a573 2
This is a Perl binding for the cross-platform wxWidgets toolkit 
L<http://www.wxwidgets.org>. It works under Unix, Win32 and Mac OS X,
d581 1
a581 1
These are Perl bindings for the Gtk toolkit L<http://www.gtk.org>. The
d600 1
a600 1
CamelBones L<http://camelbones.sourceforge.net> is a Perl interface to
d798 1
a798 1
undef()ing and/or delete().
d1086 1
a1086 1
Revision: $Revision: 10127 $
d1088 1
a1088 1
Date: $Date: 2007-10-27 21:40:20 +0200 (Sat, 27 Oct 2007) $
d1094 1
a1094 1
Copyright (c) 1997-2007 Tom Christiansen, Nathan Torkington, and
@


1.9
log
@merge in perl 5.8.8
@
text
@d113 24
a136 2
Have you tried C<use warnings> or used C<-w>?  They enable warnings
to detect dubious practices.
d138 10
a147 19
Have you tried C<use strict>?  It prevents you from using symbolic
references, makes you predeclare any subroutines that you call as bare
words, and (probably most importantly) forces you to predeclare your
variables with C<my>, C<our>, or C<use vars>.

Did you check the return values of each and every system call?  The operating
system (and thus Perl) tells you whether they worked, and if not
why.

  open(FH, "> /etc/cantwrite")
    or die "Couldn't write to /etc/cantwrite: $!\n";

Did you read L<perltrap>?  It's full of gotchas for old and new Perl
programmers and even has sections for those of you who are upgrading
from languages like I<awk> and I<C>.

Have you tried the Perl debugger, described in L<perldebug>?  You can
step through your program and see what it's doing and thus work out
why what it's doing isn't what it should be doing.
d213 2
a214 2
for indenting, ^D is for undenting, and ^O is for blockdenting--
as it were.  A more complete example, with comments, can be found at
d219 1
a219 1
documents, as does enscript at http://people.ssh.fi/mtr/genscript/ .
d225 4
d330 1
a330 3
Unix editors as well. Neil Bowers (the man behind Geekcruises) has a
list of Mac editors that can handle Perl (
http://www.neilbowers.org/macperleditors.html ).
d402 1
a402 1
( http://world.std.com/~aep/ptkdb/ ) is a Perl/tk based debugger that
d428 1
a428 1
ftp://ftp.blarg.net/users/amol/zsh/ , see also http://www.zsh.org/
d502 62
a563 1
=head2 How can I use X or Tk with Perl?
d565 4
a568 11
Tk is a completely Perl-based, object-oriented interface to the Tk toolkit
that doesn't force you to use Tcl just to get at Tk.  Sx is an interface
to the Athena Widget set.  Both are available from CPAN.  See the
directory http://www.cpan.org/modules/by-category/08_User_Interfaces/

Invaluable for Perl/Tk programming are the Perl/Tk FAQ at
http://phaseit.net/claird/comp.lang.perl.tk/ptkFAQ.html , the Perl/Tk Reference
Guide available at
http://www.cpan.org/authors/Stephen_O_Lidie/ , and the
online manpages at
http://www-users.cs.umn.edu/%7Eamundson/perl/perltk/toc.html .
d709 1
a709 1
requires some judgment, however, because any changes will be propagated
d817 6
a822 5
described below, but the curious might still be able to de-compile it.
You can try using the native-code compiler described below, but
crackers might be able to disassemble it.  These pose varying degrees
of difficulty to people wanting to get at your code, but none can
definitively conceal it (true of every language, not just Perl).
d850 1
a850 1
The Perl Archive Toolkit ( http://par.perl.org/index.cgi ) is Perl's
a853 6
The B::* namespace, often called "the Perl compiler", but is really a way
for Perl programs to peek at its innards rather than create pre-compiled
versions of your program.  However. the B::Bytecode module can turn your
script  into a bytecode format that could be loaded later by the
ByteLoader module and executed as a regular Perl script.

a864 10
=head2 How can I compile Perl into Java?

You can also integrate Java and Perl with the
Perl Resource Kit from O'Reilly Media.  See
http://www.oreilly.com/catalog/prkunix/ .

Perl 5.6 comes with Java Perl Lingo, or JPL.  JPL, still in
development, allows Perl code to be called from Java.  See jpl/README
in the Perl source tree.

d931 1
a931 1
    # Unix
d937 1
a937 1
    # Mac
d983 2
a984 3
by Damian Conway from Manning Publications, or "Learning Perl
References, Objects, & Modules" by Randal Schwartz and Tom
Phoenix from O'Reilly Media.
d1027 14
a1040 3
This module (part of the standard Perl distribution) is designed to
write a Makefile for an extension module from a Makefile.PL.  For more
information, see L<ExtUtils::MakeMaker>.
d1044 1
a1044 1
Copyright (c) 1997-2006 Tom Christiansen, Nathan Torkington, and
@


1.8
log
@sync in-tree perl with 5.8.6
@
text
@d3 1
a3 1
perlfaq3 - Programming Tools ($Revision: 1.7 $, $Date: 2004/04/07 21:33:08 $)
d34 1
a34 1
perldebug(1) manpage, on an ``empty'' program, like this:
d45 6
a50 6
The psh (Perl sh) is currently at version 1.8. The Perl Shell is a
shell that combines the interactive nature of a Unix shell with the
power of Perl. The goal is a full featured shell that behaves as
expected for normal shell activity and uses Perl syntax and
functionality for control-flow statements and other things.
You can get psh at http://www.focusresearch.com/gregor/psh/ .
d58 3
a60 3
which aren't part of the Perl language as shell commands.  perlsh
from the source distribution is simplistic and uninteresting, but
may still be what you want.
d64 4
a67 5
You can use the ExtUtils::Installed module to show all
installed distributions, although it can take awhile to do
its magic.  The standard library which comes with Perl just
shows up as "Perl" (although you can get those with
Module::CoreList).
d87 8
a94 2
    find sub { push @@files, $File::Find::name if -f _ && /\.pm$/ },
         @@INC;
d210 5
a214 7
Recent versions of ctags do much more than older versions did.
EXUBERANT CTAGS is available from http://ctags.sourceforge.net/
and does a good job of making tags files for perl code.

There is also a simple one at
http://www.cpan.org/authors/id/TOMC/scripts/ptags.gz which may do
the trick.  It can be easy to hack this into what you want.
d231 3
a233 1
The Eclipse Perl Integration Project integrates Perl 
d236 7
a242 1
The website for the project is http://e-p-i-c.sf.net/
d246 2
d250 1
a250 2
debugger and remote debugging
( http://www.ActiveState.com/Products/Komodo/ ).
d254 2
a255 1
( http://open-perl-ide.sourceforge.net/ )
d262 4
a265 2
( http://www.optiperl.com/ ) is a Windows IDE with simulated CGI
environment, including debugger and syntax highlighting editor.
d269 4
a272 2
( http://www.solutionsoft.com/perl.htm ) is an integrated development
environment for Windows that supports Perl development.
d276 2
a277 1
( http://helpconsulting.net/visiperl/ )
d282 2
a283 1
( http://www.activestate.com/Products/Visual_Perl/ )
d286 6
d295 21
a315 20
For editors: if you're on Unix you probably have vi or a vi clone already,
and possibly an emacs too, so you may not need to download anything.
In any emacs the cperl-mode (M-x cperl-mode) gives you perhaps the
best available Perl editing mode in any editor.

If you are using Windows, you can use any editor that lets
you work with plain text, such as NotePad or WordPad.  Word
processors, such as Microsoft Word or WordPerfect, typically
do not work since they insert all sorts of behind-the-scenes
information, although some allow you to save files as "Text
Only". You can also download text editors designed
specifically for programming, such as Textpad
( http://www.textpad.com/ ) and UltraEdit
( http://www.ultraedit.com/ ), among others.

If you are using MacOS, the same concerns apply.  MacPerl
(for Classic environments) comes with a simple editor.
Popular external editors are BBEdit ( http://www.bbedit.com/ )
or Alpha ( http://www.his.com/~jguyer/Alpha/Alpha8.html ). MacOS X users can
use Unix editors as well.
d436 2
a437 2
is a full Perl development enivornment with full debugger support (
http://www.latenightsw.com ).
a500 5
=head2 How can I generate simple menus without using CGI or Tk?

The http://www.cpan.org/authors/id/SKUNZ/perlmenu.v4.0.tar.gz
module, which is curses-based, can help with this.

d510 2
a511 2
read the answer to the earlier question ``How do I profile my Perl
programs?'' if you haven't done so already.
d673 15
a687 14
You usually can't. On most operating systems, memory
allocated to a program can never be returned to the system.
That's why long-running programs sometimes re-exec
themselves. Some operating systems (notably, systems that
use mmap(2) for allocating large chunks of memory) can
reclaim memory that is no longer used, but on such systems,
perl must be configured and compiled to use the OS's malloc,
not perl's.

However, judicious use of my() on your variables will help make sure
that they go out of scope so that Perl can free up that space for
use in other parts of your program.  A global variable, of course, never
goes out of scope, so you can't get its space automatically reclaimed,
although undef()ing and/or delete()ing it will achieve the same effect.
d689 3
a691 2
or should be worrying about much in Perl, but even this capability
(preallocation of data types) is in the works.
a724 9
A non-free, commercial product, ``The Velocity Engine for Perl'',
(http://www.binevolve.com/ or http://www.binevolve.com/velocigen/ )
might also be worth looking at.  It will allow you to increase the
performance of your Perl programs, running programs up to 25 times
faster than normal CGI Perl when running in persistent Perl mode or 4
to 5 times faster without any modification to your existing CGI
programs. Fully functional evaluation copies are available from the
web site.

d728 1
a728 1
unsatisfactory) solutions with varying levels of ``security''.
d763 1
a763 1
statements like ``This is unpublished proprietary software of XYZ Corp.
d765 1
a765 1
blah.''  We are not lawyers, of course, so you should see a lawyer if
d770 30
a799 35
Malcolm Beattie has written a multifunction backend compiler,
available from CPAN, that can do both these things.  It is included
in the perl5.005 release, but is still considered experimental.
This means it's fun to play with if you're a programmer but not
really for people looking for turn-key solutions.

Merely compiling into C does not in and of itself guarantee that your
code will run very much faster.  That's because except for lucky cases
where a lot of native type inferencing is possible, the normal Perl
run-time system is still present and so your program will take just as
long to run and be just as big.  Most programs save little more than
compilation time, leaving execution no more than 10-30% faster.  A few
rare programs actually benefit significantly (even running several times
faster), but this takes some tweaking of your code.

You'll probably be astonished to learn that the current version of the
compiler generates a compiled form of your script whose executable is
just as big as the original perl executable, and then some.  That's
because as currently written, all programs are prepared for a full
eval() statement.  You can tremendously reduce this cost by building a
shared I<libperl.so> library and linking against that.  See the
F<INSTALL> podfile in the Perl source distribution for details.  If
you link your main perl binary with this, it will make it minuscule.
For example, on one author's system, F</usr/bin/perl> is only 11k in
size!

In general, the compiler will do nothing to make a Perl program smaller,
faster, more portable, or more secure.  In fact, it can make your
situation worse.  The executable will be bigger, your VM system may take
longer to load the whole thing, the binary is fragile and hard to fix,
and compilation never stopped software piracy in the form of crackers,
viruses, or bootleggers.  The real advantage of the compiler is merely
packaging, and once you see the size of what it makes (well, unless
you use a shared I<libperl.so>), you'll probably want a complete
Perl install anyway.
d818 1
a818 1
`extproc' handling).  For DOS one should first invent a corresponding
d831 4
a834 2
Macintosh Perl programs will have the appropriate Creator and
Type, so that double-clicking them will invoke the Perl application.
d916 3
a918 3
books.  For problems and questions related to the web, like ``Why
do I get 500 Errors'' or ``Why doesn't it run from the browser right
when it runs fine on the command line'', see the troubleshooting
a926 2
(If you are using really old Perl, you may not have all of these,
try http://www.perldoc.com/ , but consider upgrading your perl.)
d929 3
a931 2
by Damian Conway from Manning Publications,
http://www.manning.com/Conway/index.html
d933 1
a933 1
=head2 Where can I learn about linking C with Perl? [h2xs, xsubpp]
d942 7
a948 2
=head2 I've read perlembed, perlguts, etc., but I can't embed perl in
my C program; what am I doing wrong?
d980 2
a981 2
Copyright (c) 1997-2002 Tom Christiansen and Nathan Torkington.
All rights reserved.
@


1.7
log
@merge local changes into perl-5.8.3
@
text
@d3 1
a3 1
perlfaq3 - Programming Tools ($Revision: 1.6 $, $Date: 2003/12/03 03:02:44 $)
d221 2
a222 1
If you want an IDE, check the following:
d226 7
d235 2
a236 2
ActiveState's cross-platform (as of April 2001 Windows and Linux),
multi-language IDE has Perl support, including a regular expression
d238 1
a238 9
( http://www.ActiveState.com/Products/Komodo/index.html ).  (Visual
Perl, a Visual Studio.NET plug-in is currently (early 2001) in beta
( http://www.ActiveState.com/Products/VisualPerl/index.html )).

=item The Object System

( http://www.castlelink.co.uk/object_system/ ) is a Perl web
applications development IDE, apparently for any platform
that runs Perl.
d247 5
d262 4
a265 1
=item OptiPerl
a266 2
( http://www.optiperl.com/ ) is a Windows IDE with simulated CGI
environment, including debugger and syntax highlighting editor.
d288 1
a288 1
or Alpha ( http://www.kelehers.org/alpha/ ). MacOS X users can
d347 1
a347 1
http://www.starbase.com/
d408 1
a408 1
=item BBEdit and BBEdit Lite
d410 2
a411 2
are text editors for Mac OS that have a Perl sensitivity mode
( http://web.barebones.com/ ).
d417 7
a423 1
including Perl and HTML ( http://alpha.olm.net/ ).
d469 1
a469 1
http://w4.lns.cornell.edu/%7Epvhp/ptk/ptkTOC.html , the Perl/Tk Reference
d795 1
a795 1
Perl Resource Kit from O'Reilly and Associates.  See
@


1.6
log
@Resolve conflicts for perl 5.8.2, remove old files, and add OpenBSD-specific scaffolding
@
text
@d3 1
a3 1
perlfaq3 - Programming Tools ($Revision: 1.35 $, $Date: 2003/08/24 05:26:59 $)
d68 1
a68 1
Mod::CoreList).
@


1.5
log
@Resolve conflicts, remove old files, merge local changes
@
text
@d3 1
a3 1
perlfaq3 - Programming Tools ($Revision: 1.22 $, $Date: 2002/05/06 13:11:13 $)
d45 11
a55 11
In general, not yet.  There is psh available at

    http://www.focusresearch.com/gregor/psh

Which includes the following description:

    The Perl Shell is a shell that combines the interactive nature
    of a Unix shell with the power of Perl. The goal is to eventually
    have a full featured shell that behaves as expected for normal
    shell activity. But, the Perl Shell will use Perl syntax and
    functionality for control-flow statements and other things.
d62 44
d108 1
a108 1
Have you tried C<use warnings> or used C<-w>?  They enable warnings 
d134 3
a136 3
(or separately on CPAN) and also use Benchmark.pm from the standard 
distribution.  The Benchmark module lets you time specific portions of 
your code, while Devel::DProf gives detailed breakdowns of where your 
d149 1
a149 2
			   return @@a
			 },
a150 1
			   local $_;
d168 1
a168 1
The B::Xref module can be used to generate cross-reference reports 
d199 1
a199 1
The a2ps http://www-inf.enst.fr/%7Edemaille/a2ps/black+white.ps does
a263 13
For Windows there's also the

=over 4

=item CodeMagicCD

( http://www.codemagiccd.com/ ) Collection of various programming
tools for Windows: Perl (5.005_03), TclTk, Python, GNU programming
tools, REBOL, wxWindows toolkit, the MinGW GNU C/C++ compiler, DJGPP
GNU C/C++ compiler, Cint C interpreter, YaBasic.

=back

d279 1
a279 1
If you are using Mac OS, the same concerns apply.  MacPerl
d282 1
a282 1
or Alpha ( http://www.kelehers.org/alpha/ ). Mac OS X users can
d293 1
a293 1
http://members.nbci.com/uemacs/
d299 4
d315 1
a315 1
http://vile.cx/
a320 2
win32: http://www.cs.vu.nl/%7Etmgil/vi.html

d357 1
a357 1
( http://perlcomposer.sourceforge.net/vperl.html ) is an IDE for Perl/Tk
d445 1
a445 1
directory http://www.cpan.org/authors/Tom_Christiansen/scripts/rep ;
d472 1
a472 1
``Programming Pearls'' (that's not a misspelling!)  has some good tips
d477 2
a478 2
read the answer to the earlier question ``How do I profile my Perl programs?''
if you haven't done so already.
d484 15
a498 27
write them in assembler.  Similar to rewriting in C,
modules that have critical sections can be written in C (for instance, the
PDL module from CPAN).

In some cases, it may be worth it to use the backend compiler to
produce byte code (saving compilation time) or compile into C, which
will certainly save compilation time and sometimes a small amount (but
not much) execution time.  See the question about compiling your Perl
programs for more on the compiler--the wins aren't as obvious as you'd
hope.

If you're currently linking your perl executable to a shared I<libc.so>,
you can often gain a 10-25% performance benefit by rebuilding it to
link with a static libc.a instead.  This will make a bigger perl
executable, but your Perl programs (and programmers) may thank you for
it.  See the F<INSTALL> file in the source distribution for more
information.

Unsubstantiated reports allege that Perl interpreters that use sfio
outperform those that don't (for I/O intensive applications).  To try
this, see the F<INSTALL> file in the source distribution, especially
the ``Selecting File I/O mechanisms'' section.

The undump program was an old attempt to speed up your Perl program
by storing the already-compiled form to disk.  This is no longer
a viable option, as it only worked on a few architectures, and
wasn't a good solution anyway.
d555 1
a555 1
larger. 
d620 1
a620 1
=head2 Is it unsafe to return a pointer to local data?
d622 2
a623 1
No, Perl's garbage collection system takes care of this.
d630 1
a630 1
    for $i ( 1 .. 10 ) {
d728 6
d798 2
a799 2
batch file and codify it in C<ALTERNATIVE_SHEBANG> (see the
F<INSTALL> file in the source distribution for more information).
d908 1
a908 1
by Damian Conway from Manning Publications, 
@


1.4
log
@merge in perl 5.6.1 with our local changes
@
text
@d3 1
a3 1
perlfaq3 - Programming Tools ($Revision: 1.38 $, $Date: 1999/05/23 16:08:30 $)
d14 1
a14 1
Have you read the appropriate man pages?  Here's a brief index:
d25 3
a27 2
	Various 	http://www.perl.com/CPAN/doc/FMTEYEWTK/index.html
			(not a man-page but still useful)
d29 1
a29 1
A crude table of contents for the Perl man page set is found in L<perltoc>.
d34 1
a34 1
perldebug(1) man page, on an ``empty'' program, like this:
d45 16
a60 4
In general, no.  The Shell.pm module (distributed with Perl) makes
Perl try commands which aren't part of the Perl language as shell
commands.  perlsh from the source distribution is simplistic and
uninteresting, but may still be what you want.
d126 2
a127 3
The B::Xref module, shipped with the new, alpha-release Perl compiler
(not the general distribution prior to the 5.005 release), can be used
to generate cross-reference reports for Perl programs.
d133 14
a146 12
There is no program that will reformat Perl as much as indent(1) does
for C.  The complex feedback between the scanner and the parser (this
feedback is what confuses the vgrind and emacs programs) makes it
challenging at best to write a stand-alone Perl parser.

Of course, if you simply follow the guidelines in L<perlstyle>, you
shouldn't need to reformat.  The habit of formatting your code as you
write it will help prevent bugs.  Your editor can and should help you
with this.  The perl-mode or newer cperl-mode for emacs can provide
remarkable amounts of help with most (but not all) code, and even less
programmable editors can provide significant assistance.  Tom swears
by the following settings in vi and its clones:
d151 1
a151 1
Now put that in your F<.exrc> file (replacing the caret characters
d154 2
a155 8
as it were.  If you haven't used the last one, you're missing
a lot.  A more complete example, with comments, can be found at
http://www.perl.com/CPAN-local/authors/id/TOMC/scripts/toms.exrc.gz

If you are used to using the I<vgrind> program for printing out nice code
to a laser printer, you can take a stab at this using
http://www.perl.com/CPAN/doc/misc/tips/working.vgrind.entry, but the
results are not particularly satisfying for sophisticated code.
d157 3
a159 2
The a2ps at http://www.infres.enst.fr/%7Edemaille/a2ps/ does lots of things
related to generating nicely printed output of documents.
d163 7
a169 3
There's a simple one at
http://www.perl.com/CPAN/authors/id/TOMC/scripts/ptags.gz which may do
the trick.  And if not, it's easy to hack into what you want.
d179 1
a179 1
If you want a Windows IDE, check the following:
a182 4
=item CodeMagicCD

http://www.codemagiccd.com/

d185 6
a190 5
ActiveState's cross-platform, multi-language IDE has Perl support,
including a regular expression debugger and remote debugging
(http://www.ActiveState.com/Products/Komodo/index.html).
(Visual Perl, a Visual Studio.NET plug-in is currently (early 2001)
in beta (http://www.ActiveState.com/Products/VisualPerl/index.html)).
d194 10
a203 2
(http://www.castlelink.co.uk/object_system/) is a Perl web
applications development IDE.
d207 1
a207 1
(http://www.solutionsoft.com/perl.htm) is an integrated development
d210 6
a215 1
=item Perl code magic
d217 8
a224 1
(http://www.petes-place.com/codemagic.html).
d226 1
a226 1
=item visiPerl+
d228 4
a231 1
http://helpconsulting.net/visiperl/, from Help Consulting.
d240 15
a254 1
For Windows editors: you can download an Emacs
a292 1
http://www.thomer.com/thomer/vi/vi.html.
d294 3
a296 1
nvi (http://www.bostic.com/vi/, available from CPAN in src/misc/) is
d324 1
a324 1
(http://world.std.com/~aep/ptkdb/) is a Perl/tk based debugger that
d326 1
a326 1
(http://perlcomposer.sourceforge.net/vperl.html) is an IDE for Perl/Tk
d336 1
a336 1
from the Cygwin package (http://sources.redhat.com/cygwin/)
d340 2
a341 2
from the MKS Toolkit (http://www.mks.com/), or the Bourne shell of
the U/WIN environment (http://www.research.att.com/sw/tools/uwin/)
d345 1
a345 1
ftp://ftp.astron.com/pub/tcsh/, see also
d350 1
a350 1
ftp://ftp.blarg.net/users/amol/zsh/, see also http://www.zsh.org/
d374 1
a374 1
(http://web.barebones.com/).
d380 1
a380 1
including Perl and HTML (http://alpha.olm.net/).
d385 1
a385 1
OS X and BeOS respectively (http://www.hekkelman.com/).
d390 1
a390 1
see http://www.perl.com/CPAN/authors/Tom_Christiansen/scripts/toms.exrc.gz ,
d393 1
a393 1
with an embedded Perl interpreter--see http://www.perl.com/CPAN/src/misc.
d414 1
a414 1
directory http://www.perl.com/CPAN/authors/Tom_Christiansen/scripts/rep;
d423 1
a423 1
directory http://www.perl.com/CPAN/modules/by-category/08_User_Interfaces/
d428 1
a428 1
http://www.perl.com/CPAN-local/authors/Stephen_O_Lidie/ , and the
d434 1
a434 1
The http://www.perl.com/CPAN/authors/id/SKUNZ/perlmenu.v4.0.tar.gz
a436 4
=head2 What is undump?

See the next question on ``How can I make my Perl program run faster?''

d445 3
a447 1
fails consider just buying faster hardware.
d506 95
d620 8
a627 11
You can't.  On most operating systems, memory allocated to a program
can never be returned to the system.  That's why long-running programs
sometimes re-exec themselves.  Some operating systems (notably,
FreeBSD and Linux) allegedly reclaim large chunks of memory that is no
longer used, but it doesn't appear to happen with Perl (yet).  The Mac
appears to be the only platform that will reliably (albeit, slowly)
return memory to the OS.

We've had reports that on Linux (Redhat 5.1) on Intel, C<undef
$scalar> will return memory to the system, while on Solaris 2.6 it
won't.  In general, try it yourself and see.
d649 1
a649 1
http://www.apache.org/) with either of the mod_perl or mod_fastcgi
d661 1
a661 1
module (available from http://www.fastcgi.com/) each of your Perl
d668 1
a668 1
See http://www.perl.com/CPAN/modules/by-category/15_World_Wide_Web_HTML_HTTP_CGI/ .
d698 9
a706 8
You can try using encryption via source filters (Filter::* from CPAN),
but any decent programmer will be able to decrypt it.  You can try using
the byte code compiler and interpreter described below, but the curious
might still be able to de-compile it.  You can try using the native-code
compiler described below, but crackers might be able to disassemble it.
These pose varying degrees of difficulty to people wanting to get at
your code, but none can definitively conceal it (true of every
language, not just Perl).
d838 3
d859 1
a859 2
There is no general solution to all of this.  It is a mess, pure and
simple.  Sucks to be away from Unix, huh? :-)
d869 2
a870 20
when it runs fine on the command line'', see these sources:

    WWW Security FAQ
        http://www.w3.org/Security/Faq/

    Web FAQ
        http://www.boutell.com/faq/

    CGI FAQ
        http://www.webthing.com/tutorials/cgifaq.html

    HTTP Spec
        http://www.w3.org/pub/WWW/Protocols/HTTP/

    HTML Spec
        http://www.w3.org/TR/REC-html40/
        http://www.w3.org/pub/WWW/MarkUp/

    CGI Spec
        http://www.w3.org/CGI/
d872 1
a872 2
    CGI Security FAQ
        http://www.go2net.com/people/paulp/cgi-security/safe-cgi.txt
d877 7
a883 3
L<perlboot>, and L<perlbot> for reference.  Perltoot didn't come out
until the 5.004 release; you can get a copy (in pod, html, or
postscript) from http://www.perl.com/CPAN/doc/FMTEYEWTK/ .
d902 1
a902 2
=head2 When I tried to run my script, I got this message. What does it
mean?
d927 1
a927 1
Copyright (c) 1997-1999 Tom Christiansen and Nathan Torkington.
d930 2
a931 4
When included as an integrated part of the Standard Distribution
of Perl or of its documentation (printed or otherwise), this works is
covered under Perl's Artistic License.  For separate distributions of
all or part of this FAQ outside of that, see L<perlfaq>.
@


1.3
log
@perl-5.6.0 + local changes
@
text
@d52 1
a52 1
for dubious practices.
d57 1
a57 1
variables with C<my> or C<our> or C<use vars>.
d59 2
a60 2
Did you check the returns of each and every system call?  The operating
system (and thus Perl) tells you whether they worked or not, and if not
d67 1
a67 1
programmers, and even has sections for those of you who are upgrading
d76 5
a80 4
You should get the Devel::DProf module from CPAN, and also use
Benchmark.pm from the standard distribution.  Benchmark lets you time
specific portions of your code, while Devel::DProf gives detailed
breakdowns of where your code spends its time.
d108 1
a108 1
data you give it, and really proves little about differing complexities
d129 4
a132 4
with this.  The perl-mode for emacs can provide a remarkable amount of
help with most (but not all) code, and even less programmable editors
can provide significant assistance.  Tom swears by the following
settings in vi and its clones:
d139 1
a139 1
for indenting, ^D is for undenting, and ^O is for blockdenting --
d160 178
a337 28
If you're on Unix, you already have an IDE -- Unix itself.  This powerful
IDE derives from its interoperability, flexibility, and configurability.
If you really want to get a feel for Unix-qua-IDE, the best thing to do
is to find some high-powered programmer whose native language is Unix.
Find someone who has been at this for many years, and just sit back
and watch them at work.  They have created their own IDE, one that
suits their own tastes and aptitudes.  Quietly observe them edit files,
move them around, compile them, debug them, test them, etc.  The entire
development *is* integrated, like a top-of-the-line German sports car:
functional, powerful, and elegant.  You will be absolutely astonished
at the speed and ease exhibited by the native speaker of Unix in his
home territory.  The art and skill of a virtuoso can only be seen to be
believed.  That is the path to mastery -- all these cobbled little IDEs
are expensive toys designed to sell a flashy demo using cheap tricks,
and being optimized for immediate but shallow understanding rather than
enduring use, are but a dim palimpsest of real tools.

In short, you just have to learn the toolbox.  However, if you're not
on Unix, then your vendor probably didn't bother to provide you with
a proper toolbox on the so-called complete system that you forked out
your hard-earned cash on.

PerlBuilder (XXX URL to follow) is an integrated development environment
for Windows that supports Perl development.  Perl programs are just plain
text, though, so you could download emacs for Windows (???) or a vi clone
(vim) which runs on for win32 (http://www.cs.vu.nl/%7Etmgil/vi.html).
If you're transferring Windows files to Unix, be sure to transfer in
ASCII mode so the ends of lines are appropriately mangled.
d342 2
a343 2
see http://www.perl.com/CPAN/authors/Tom_Christiansen/scripts/toms.exrc.gz,
the standard benchmark file for vi emulators.  This runs best with nvi,
d345 1
a345 1
with an embedded Perl interpreter -- see http://www.perl.com/CPAN/src/misc.
d377 1
a377 1
Invaluable for Perl/Tk programming are: the Perl/Tk FAQ at
d391 1
a391 1
See the next questions.
d396 1
a396 2
can often make a dramatic difference.  Chapter 8 in the Camel has some
efficiency tips in it you might want to look at.  Jon Bentley's book
d407 2
a408 2
write them in assembler.  Similar to rewriting in C is the use of
modules that have critical sections written in C (for instance, the
d447 1
a447 1
125-byte bit vector for a considerable memory savings.  The standard
d492 1
a492 1
that they go out of scope so that Perl can free up their storage for
d533 7
a539 6
(http://www.binevolve.com/ or http://www.binevolve.com/velocigen/) might
also be worth looking at.  It will allow you to increase the performance
of your Perl programs, up to 25 times faster than normal CGI Perl by
running in persistent Perl mode, or 4 to 5 times faster without any
modification to your existing CGI programs. Fully functional evaluation
copies are available from the web site.
d549 2
a550 2
readable by people on the web, though, only by people with access to
the filesystem) So you have to leave the permissions at the socially
d554 1
a554 1
insecure things, and relies on people not knowing how to exploit those
d566 1
a566 1
your code, but none can definitively conceal it (this is true of every
d588 1
a588 1
run time system is still present and so your program will take just as
d591 1
a591 1
rare programs actually benefit significantly (like several times
d606 2
a607 2
faster, more portable, or more secure.  In fact, it will usually hurt
all of those.  The executable will be bigger, your VM system may take
d617 1
a617 1
You can't.  Not yet, anyway.  You can integrate Java and Perl with the
d619 5
a623 3
http://www.oreilly.com/catalog/prkunix/ for more information.
The Java interface will be supported in the core 5.6 release
of Perl.
d633 1
a633 1
batch file, and codify it in C<ALTERNATIVE_SHEBANG> (see the
d702 1
a702 1
The problem is that none of this is reliable: it depends on the
d704 1
a704 1
it's entirely possible neither works.  If 4DOS was the command shell,
a751 1

d754 4
a757 4
A good place to start is L<perltoot>, and you can use L<perlobj> and
L<perlbot> for reference.  Perltoot didn't come out until the 5.004
release, but you can get a copy (in pod, html, or postscript) from
http://www.perl.com/CPAN/doc/FMTEYEWTK/ .
d769 1
a769 1
my C program, what am I doing wrong?
@


1.2
log
@perl5.005_03 (stock)
@
text
@d3 1
a3 1
perlfaq3 - Programming Tools ($Revision: 1.33 $, $Date: 1998/12/29 20:12:12 $)
d22 1
a22 1
	Regexps		perlre, perlfunc, perlop, perllocale
d28 1
a28 1
L<perltoc> provides a crude table of contents for the perl man page set.
d44 2
a45 2
In general, no.  The Shell.pm module (distributed with perl) makes
perl try commands which aren't part of the Perl language as shell
d51 2
a52 1
Have you used C<-w>?  It enables warnings for dubious practices.
d57 1
a57 1
variables with C<my> or C<use vars>.
d134 1
a134 1
    map ^O {^M}^[O^T
d148 1
a148 1
The a2ps at http://www.infres.enst.fr/~demaille/a2ps/ does lots of things
d151 1
a151 1
=head2 Is there a etags/ctags for perl?
d153 1
a153 8
With respect to the source code for the Perl interpreter, yes.
There has been support for etags in the source for a long time.
Ctags was introduced in v5.005_54 (and probably 5.005_03).
After building perl, type 'make etags' or 'make ctags' and both
sets of tag files will be built.

Now, if you're looking to build a tag file for perl code, then there's
a simple one at
d159 28
a186 10
If you're on Unix, you already have an IDE -- Unix itself.
You just have to learn the toolbox.  If you're not, then you
probably don't have a toolbox, so may need something else.

PerlBuilder (XXX URL to follow) is an integrated development
environment for Windows that supports Perl development.  Perl programs
are just plain text, though, so you could download emacs for Windows
(XXX) or vim for win32 (http://www.cs.vu.nl/~tmgil/vi.html).  If
you're transferring Windows files to Unix, be sure to transfer in
ASCII mode so the ends of lines are appropriately converted.
d199 1
a199 1
perl-mode.el and support for the perl debugger built in.  These should
d202 1
a202 1
In the perl source directory, you'll find a directory called "emacs",
d207 1
a207 1
(single quote), and mess up the indentation and hilighting.  You
d227 1
a227 1
http://w4.lns.cornell.edu/~pvhp/ptk/ptkTOC.html , the Perl/Tk Reference
d231 1
a231 1
http://www-users.cs.umn.edu/~amundson/perl/perltk/toc.html .
d276 1
a276 1
outperform those that don't (for IO intensive applications).  To try
d278 1
a278 1
the ``Selecting File IO mechanisms'' section.
d373 2
a374 2
module (available from http://www.fastcgi.com/) each of your perl
scripts becomes a permanent CGI daemon process.
d377 1
a377 1
and on the way you write your CGI scripts, so investigate them with
d383 1
a383 1
(http://www.binevolve.com/ or 
d385 3
a387 3
of your perl scripts, upto 25 times faster than normal CGI perl by
running in persistent perl mode, or 4 to 5 times faster without any
modification to your existing CGI scripts. Fully functional evaluation
d419 1
a419 1
bottom line is that nothing but a restrictive licence will give you
d424 1
a424 1
you want to be sure your licence's wording will stand up in court.
d449 2
a450 2
F<INSTALL> podfile in the perl source distribution for details.  If
you link your main perl binary with this, it will make it miniscule.
d469 1
a469 1
The Java interface will be supported in the core 5.006 release
d485 6
a490 7
perl interpreter.  If you install another port (Gurusamy Sarathy's is
the recommended Win95/NT port), or (eventually) build your own
Win95/NT Perl using a Windows port of gcc (e.g., with cygwin32 or
mingw32), then you'll have to modify the Registry yourself.  In
addition to associating C<.pl> with the interpreter, NT people can
use: C<SET PATHEXT=%PATHEXT%;.PL> to let them run the program
C<install-linux.pl> merely by typing C<install-linux>.
d492 2
a493 2
Macintosh perl scripts will have the appropriate Creator and
Type, so that double-clicking them will invoke the perl application.
d497 1
a497 1
get your scripts working for a web server.  This is an EXTREMELY big
d500 1
a500 1
=head2 Can I write useful perl programs on the command line?
d524 1
a524 1
Ok, the last one was actually an obfuscated perl entry. :-)
d526 1
a526 1
=head2 Why don't perl one-liners work on my DOS/Mac/VMS system?
d584 1
a584 1
		http://www.webthing.com/tutorials/cgifaq.html		
a598 1
Also take a look at L<perlfaq9>
d602 1
a602 1
L<perltoot> is a good place to start, and you can use L<perlobj> and
d621 1
a621 1
fail, see L<perlbug> and send a bugreport with the output of
d627 3
a629 3
L<perldiag> has a complete list of perl's error messages and warnings,
with explanatory text.  You can also use the splain program (distributed
with perl) to explain the error messages:
d644 1
a644 1
This module (part of the standard perl distribution) is designed to
d654 2
a655 2
of Perl or of its documentation (printed or otherwise), this work is
covered under Perl's Artistic Licence.  For separate distributions of
d658 1
a658 1
Irrespective of its distribution, all code examples here are public
a662 1

@


1.1
log
@perl 5.004_04
@
text
@d3 1
a3 1
perlfaq3 - Programming Tools ($Revision: 1.22 $, $Date: 1997/04/24 22:43:42 $)
d16 3
d22 1
a22 1
	Regexps		perlre, perlfunc, perlop
d33 1
a33 1
perldebug(1) man page, on an "empty" program, like this:
d40 1
a40 1
operations typically found in symbolic debuggers
d51 1
a51 1
Have you used C<-w>?
d53 19
a71 7
Have you tried C<use strict>?

Did you check the returns of each and every system call?

Did you read L<perltrap>?

Have you tried the Perl debugger, described in L<perldebug>?
d80 29
d112 2
a113 2
(not the general distribution), can be used to generate
cross-reference reports for Perl programs.
d115 1
a115 1
    perl -MO=Xref[,OPTIONS] foo.pl
d119 3
a121 3
There is no program that will reformat Perl as much as indent(1) will
do for C.  The complex feedback between the scanner and the parser
(this feedback is what confuses the vgrind and emacs programs) makes it
d125 16
a140 6
shouldn't need to reformat.

Your editor can and should help you with source formatting.  The
perl-mode for emacs can provide a remarkable amount of help with most
(but not all) code, and even less programmable editors can provide
significant assistance.
d142 2
a143 2
If you are using to using vgrind program for printing out nice code to
a laser printer, you can take a stab at this using
d147 4
a150 1
=head2 Is there a ctags for Perl?
d152 8
a159 1
There's a simple one at
d161 14
a174 1
the trick.
d179 4
a182 4
see ftp://ftp.perl.com/pub/vi/toms.exrc, the standard benchmark file
for vi emulators.  This runs best with nvi, the current version of vi
out of Berkeley, which incidentally can be built with an embedded Perl
interpreter -- see http://www.perl.com/CPAN/src/misc .
d194 1
a194 1
Note that the perl-mode of emacs will have fits with "main'foo"
d196 2
a197 1
should be using "main::foo", anyway.
d202 4
a205 1
module interface to a curses library.
d209 11
a219 3
Tk is a completely Perl-based, object-oriented interface to the Tk
toolkit that doesn't force you to use Tcl just to get at Tk.  Sx is an
interface to the Athena Widget set.  Both are available from CPAN.
a225 6
=head2 Can I dynamically load C routines into Perl?

If your system architecture supports it, then the standard perl
on your system should also provide you with this via the
DynaLoader module.  Read L<perlxstut> for details.

d232 8
a239 3
The best way to do this is to come up with a better algorithm.
This can often make a dramatic difference.  Chapter 8 in the Camel
has some efficiency tips in it you might want to look at.
d241 1
a241 1
Other approaches include autoloading seldom-used Perl code.  See the
d253 2
a254 1
programs.
d256 1
a256 1
If you're currently linking your perl executable to a shared libc.so,
d266 1
a266 1
the "Selecting File IO mechanisms" section.
d277 1
a277 1
strings in C, arrays take more that, and hashes use even more.  While
d317 11
a327 3
You can't.  Memory the system allocates to a program will never be
returned to the system.  That's why long-running programs sometimes
re-exec themselves.
d331 1
a331 2
use in other parts of your program.  (NB: my() variables also execute
about 10% faster than globals.)  A global variable, of course, never
d347 2
a348 2
There are at least two popular ways to avoid this overhead.  One
solution involves running the Apache HTTP server (available from
d350 13
a362 10
plugin modules.  With mod_perl and the Apache::* modules (from CPAN),
httpd will run with an embedded Perl interpreter which pre-compiles
your script and then executes it within the same address space without
forking.  The Apache extension also gives Perl access to the internal
server API, so modules written in Perl can do just about anything a
module written in C can.  With the FCGI module (from CPAN), a Perl
executable compiled with sfio (see the F<INSTALL> file in the
distribution) and the mod_fastcgi module (available from
http://www.fastcgi.com/) each of your perl scripts becomes a permanent
CGI daemon processes.
d368 10
d381 1
a381 1
unsatisfactory) solutions with varying levels of "security".
d386 3
a388 2
readable by people on the web, though.)  So you have to leave the
permissions at the socially friendly 0755 level.
d397 7
a403 7
You can try using encryption via source filters (Filter::* from CPAN).
But crackers might be able to decrypt it.  You can try using the byte
code compiler and interpreter described below, but crackers might be
able to de-compile it.  You can try using the native-code compiler
described below, but crackers might be able to disassemble it.  These
pose varying degrees of difficulty to people wanting to get at your
code, but none can definitively conceal it (this is true of every
d409 1
a409 1
statements like "This is unpublished proprietary software of XYZ Corp.
d411 1
a411 1
blah."  We are not lawyers, of course, so you should see a lawyer if
d417 13
a429 18
available from CPAN, that can do both these things.  It is as of
Feb-1997 in late alpha release, which means it's fun to play with if
you're a programmer but not really for people looking for turn-key
solutions.

I<Please> understand that merely compiling into C does not in and of
itself guarantee that your code will run very much faster.  That's
because except for lucky cases where a lot of native type inferencing
is possible, the normal Perl run time system is still present and thus
will still take just as long to run and be just as big.  Most programs
save little more than compilation time, leaving execution no more than
10-30% faster.  A few rare programs actually benefit significantly
(like several times faster), but this takes some tweaking of your
code.

Malcolm will be in charge of the 5.005 release of Perl itself
to try to unify and merge his compiler and multithreading work into
the main release.
d436 1
a436 1
shared libperl.so library and linking against that.  See the
d439 1
a439 1
For example, on one author's system, /usr/bin/perl is only 11k in
d442 19
a460 1
=head2 How can I get '#!perl' to work on [MS-DOS,NT,...]?
d471 9
a479 5
The Win95/NT installation, when using the Activeware port of Perl,
will modify the Registry to associate the .pl extension with the perl
interpreter.  If you install another port, or (eventually) build your
own Win95/NT Perl using WinGCC, then you'll have to modify the
Registry yourself.
d481 1
a481 1
Macintosh perl scripts will have the the appropriate Creator and
d495 1
a495 1
    perl -lane 'print $F[0] + $F[-1]'
d500 1
a500 1
    # remove comments from C program
d538 4
a541 4
The problem is that none of this is reliable: it depends on the command
interpreter.  Under Unix, the first two often work. Under DOS, it's
entirely possible neither works.  If 4DOS was the command shell, I'd
probably have better luck like this:
d550 5
a554 2
I'm afraid that there is no general solution to all of this.  It is a
mess, pure and simple.
d562 9
a570 3
books.  For problems and questions related to the web, like "Why
do I get 500 Errors" or "Why doesn't it run from the browser right
when it runs fine on the command line", see these sources:
d572 2
a573 2
    The Idiot's Guide to Solving Perl/CGI Problems, by Tom Christiansen
	http://www.perl.com/perl/faq/idiots-guide.html
d575 2
a576 3
    Frequently Asked Questions about CGI Programming, by Nick Kew
	ftp://rtfm.mit.edu/pub/usenet/news.answers/www/cgi-faq
	http://www3.pair.com/webthing/docs/cgi/faqs/cgifaq.shtml
d578 3
a580 2
    Perl/CGI programming FAQ, by Shishir Gundavaram and Tom Christiansen
	http://www.perl.com/perl/faq/perl-cgi-faq.html
d582 2
a583 2
    The WWW Security FAQ, by Lincoln Stein
	http://www-genome.wi.mit.edu/WWW/faqs/www-security-faq.html
d585 4
a588 2
    World Wide Web FAQ, by Thomas Boutell
	http://www.boutell.com/faq/
d640 13
a652 2
Copyright (c) 1997 Tom Christiansen and Nathan Torkington.
All rights reserved.  See L<perlfaq> for distribution information.
@


1.1.1.1
log
@perl5.005_03
@
text
@d3 1
a3 1
perlfaq3 - Programming Tools ($Revision: 1.33 $, $Date: 1998/12/29 20:12:12 $)
a15 3
	Basics	        perldata, perlvar, perlsyn, perlop, perlsub
	Execution	perlrun, perldebug
	Functions	perlfunc
d19 1
a19 1
	Regexps		perlre, perlfunc, perlop, perllocale
d30 1
a30 1
perldebug(1) man page, on an ``empty'' program, like this:
d37 1
a37 1
operations typically found in symbolic debuggers.
d48 1
a48 1
Have you used C<-w>?  It enables warnings for dubious practices.
d50 7
a56 19
Have you tried C<use strict>?  It prevents you from using symbolic
references, makes you predeclare any subroutines that you call as bare
words, and (probably most importantly) forces you to predeclare your
variables with C<my> or C<use vars>.

Did you check the returns of each and every system call?  The operating
system (and thus Perl) tells you whether they worked or not, and if not
why.

  open(FH, "> /etc/cantwrite")
    or die "Couldn't write to /etc/cantwrite: $!\n";

Did you read L<perltrap>?  It's full of gotchas for old and new Perl
programmers, and even has sections for those of you who are upgrading
from languages like I<awk> and I<C>.

Have you tried the Perl debugger, described in L<perldebug>?  You can
step through your program and see what it's doing and thus work out
why what it's doing isn't what it should be doing.
a64 29
Here's a sample use of Benchmark:

  use Benchmark;

  @@junk = `cat /etc/motd`;
  $count = 10_000;

  timethese($count, {
            'map' => sub { my @@a = @@junk;
			   map { s/a/b/ } @@a;
			   return @@a
			 },
            'for' => sub { my @@a = @@junk;
			   local $_;
			   for (@@a) { s/a/b/ };
			   return @@a },
           });

This is what it prints (on one machine--your results will be dependent
on your hardware, operating system, and the load on your machine):

  Benchmark: timing 10000 iterations of for, map...
         for:  4 secs ( 3.97 usr  0.01 sys =  3.98 cpu)
         map:  6 secs ( 4.97 usr  0.00 sys =  4.97 cpu)

Be aware that a good benchmark is very hard to write.  It only tests the
data you give it, and really proves little about differing complexities
of contrasting algorithms.

d68 2
a69 2
(not the general distribution prior to the 5.005 release), can be used
to generate cross-reference reports for Perl programs.
d71 1
a71 1
    perl -MO=Xref[,OPTIONS] scriptname.plx
d75 3
a77 3
There is no program that will reformat Perl as much as indent(1) does
for C.  The complex feedback between the scanner and the parser (this
feedback is what confuses the vgrind and emacs programs) makes it
d81 6
a86 16
shouldn't need to reformat.  The habit of formatting your code as you
write it will help prevent bugs.  Your editor can and should help you
with this.  The perl-mode for emacs can provide a remarkable amount of
help with most (but not all) code, and even less programmable editors
can provide significant assistance.  Tom swears by the following
settings in vi and its clones:

    set ai sw=4
    map ^O {^M}^[O^T

Now put that in your F<.exrc> file (replacing the caret characters
with control characters) and away you go.  In insert mode, ^T is
for indenting, ^D is for undenting, and ^O is for blockdenting --
as it were.  If you haven't used the last one, you're missing
a lot.  A more complete example, with comments, can be found at
http://www.perl.com/CPAN-local/authors/id/TOMC/scripts/toms.exrc.gz
d88 2
a89 2
If you are used to using the I<vgrind> program for printing out nice code
to a laser printer, you can take a stab at this using
d93 1
a93 4
The a2ps at http://www.infres.enst.fr/~demaille/a2ps/ does lots of things
related to generating nicely printed output of documents.

=head2 Is there a etags/ctags for perl?
d95 1
a95 8
With respect to the source code for the Perl interpreter, yes.
There has been support for etags in the source for a long time.
Ctags was introduced in v5.005_54 (and probably 5.005_03).
After building perl, type 'make etags' or 'make ctags' and both
sets of tag files will be built.

Now, if you're looking to build a tag file for perl code, then there's
a simple one at
d97 1
a97 14
the trick.  And if not, it's easy to hack into what you want.

=head2 Is there an IDE or Windows Perl Editor?

If you're on Unix, you already have an IDE -- Unix itself.
You just have to learn the toolbox.  If you're not, then you
probably don't have a toolbox, so may need something else.

PerlBuilder (XXX URL to follow) is an integrated development
environment for Windows that supports Perl development.  Perl programs
are just plain text, though, so you could download emacs for Windows
(XXX) or vim for win32 (http://www.cs.vu.nl/~tmgil/vi.html).  If
you're transferring Windows files to Unix, be sure to transfer in
ASCII mode so the ends of lines are appropriately converted.
d102 4
a105 4
see http://www.perl.com/CPAN/authors/Tom_Christiansen/scripts/toms.exrc.gz,
the standard benchmark file for vi emulators.  This runs best with nvi,
the current version of vi out of Berkeley, which incidentally can be built
with an embedded Perl interpreter -- see http://www.perl.com/CPAN/src/misc.
d117 1
a117 1
Note that the perl-mode of emacs will have fits with C<"main'foo">
d119 1
a119 2
are probably using C<"main::foo"> in new Perl code anyway, so this
shouldn't be an issue.
d124 1
a124 4
module interface to a curses library.  A small demo can be found at the
directory http://www.perl.com/CPAN/authors/Tom_Christiansen/scripts/rep;
this program repeats a command and updates the screen as needed, rendering
B<rep ps axu> similar to B<top>.
d128 3
a130 11
Tk is a completely Perl-based, object-oriented interface to the Tk toolkit
that doesn't force you to use Tcl just to get at Tk.  Sx is an interface
to the Athena Widget set.  Both are available from CPAN.  See the
directory http://www.perl.com/CPAN/modules/by-category/08_User_Interfaces/

Invaluable for Perl/Tk programming are: the Perl/Tk FAQ at
http://w4.lns.cornell.edu/~pvhp/ptk/ptkTOC.html , the Perl/Tk Reference
Guide available at
http://www.perl.com/CPAN-local/authors/Stephen_O_Lidie/ , and the
online manpages at
http://www-users.cs.umn.edu/~amundson/perl/perltk/toc.html .
d137 6
d149 3
a151 8
The best way to do this is to come up with a better algorithm.  This
can often make a dramatic difference.  Chapter 8 in the Camel has some
efficiency tips in it you might want to look at.  Jon Bentley's book
``Programming Pearls'' (that's not a misspelling!)  has some good tips
on optimization, too.  Advice on benchmarking boils down to: benchmark
and profile to make sure you're optimizing the right part, look for
better algorithms instead of microtuning your code, and when all else
fails consider just buying faster hardware.
d153 1
a153 1
A different approach is to autoload seldom-used Perl code.  See the
d165 1
a165 2
programs for more on the compiler--the wins aren't as obvious as you'd
hope.
d167 1
a167 1
If you're currently linking your perl executable to a shared I<libc.so>,
d177 1
a177 1
the ``Selecting File IO mechanisms'' section.
d188 1
a188 1
strings in C, arrays take more than that, and hashes use even more.  While
d228 3
a230 11
You can't.  On most operating systems, memory allocated to a program
can never be returned to the system.  That's why long-running programs
sometimes re-exec themselves.  Some operating systems (notably,
FreeBSD and Linux) allegedly reclaim large chunks of memory that is no
longer used, but it doesn't appear to happen with Perl (yet).  The Mac
appears to be the only platform that will reliably (albeit, slowly)
return memory to the OS.

We've had reports that on Linux (Redhat 5.1) on Intel, C<undef
$scalar> will return memory to the system, while on Solaris 2.6 it
won't.  In general, try it yourself and see.
d234 2
a235 1
use in other parts of your program.  A global variable, of course, never
d251 2
a252 2
There are two popular ways to avoid this overhead.  One solution
involves running the Apache HTTP server (available from
d254 10
a263 13
plugin modules.

With mod_perl and the Apache::Registry module (distributed with
mod_perl), httpd will run with an embedded Perl interpreter which
pre-compiles your script and then executes it within the same address
space without forking.  The Apache extension also gives Perl access to
the internal server API, so modules written in Perl can do just about
anything a module written in C can.  For more on mod_perl, see
http://perl.apache.org/

With the FCGI module (from CPAN) and the mod_fastcgi
module (available from http://www.fastcgi.com/) each of your perl
scripts becomes a permanent CGI daemon process.
a268 10
See http://www.perl.com/CPAN/modules/by-category/15_World_Wide_Web_HTML_HTTP_CGI/ .

A non-free, commercial product, ``The Velocity Engine for Perl'',
(http://www.binevolve.com/ or 
also be worth looking at.  It will allow you to increase the performance
of your perl scripts, upto 25 times faster than normal CGI perl by
running in persistent perl mode, or 4 to 5 times faster without any
modification to your existing CGI scripts. Fully functional evaluation
copies are available from the web site.

d272 1
a272 1
unsatisfactory) solutions with varying levels of ``security''.
d277 2
a278 3
readable by people on the web, though, only by people with access to
the filesystem) So you have to leave the permissions at the socially
friendly 0755 level.
d287 7
a293 7
You can try using encryption via source filters (Filter::* from CPAN),
but any decent programmer will be able to decrypt it.  You can try using
the byte code compiler and interpreter described below, but the curious
might still be able to de-compile it.  You can try using the native-code
compiler described below, but crackers might be able to disassemble it.
These pose varying degrees of difficulty to people wanting to get at
your code, but none can definitively conceal it (this is true of every
d299 1
a299 1
statements like ``This is unpublished proprietary software of XYZ Corp.
d301 1
a301 1
blah.''  We are not lawyers, of course, so you should see a lawyer if
d307 18
a324 13
available from CPAN, that can do both these things.  It is included
in the perl5.005 release, but is still considered experimental.
This means it's fun to play with if you're a programmer but not
really for people looking for turn-key solutions.

Merely compiling into C does not in and of itself guarantee that your
code will run very much faster.  That's because except for lucky cases
where a lot of native type inferencing is possible, the normal Perl
run time system is still present and so your program will take just as
long to run and be just as big.  Most programs save little more than
compilation time, leaving execution no more than 10-30% faster.  A few
rare programs actually benefit significantly (like several times
faster), but this takes some tweaking of your code.
d331 1
a331 1
shared I<libperl.so> library and linking against that.  See the
d334 1
a334 1
For example, on one author's system, F</usr/bin/perl> is only 11k in
d337 1
a337 19
In general, the compiler will do nothing to make a Perl program smaller,
faster, more portable, or more secure.  In fact, it will usually hurt
all of those.  The executable will be bigger, your VM system may take
longer to load the whole thing, the binary is fragile and hard to fix,
and compilation never stopped software piracy in the form of crackers,
viruses, or bootleggers.  The real advantage of the compiler is merely
packaging, and once you see the size of what it makes (well, unless
you use a shared I<libperl.so>), you'll probably want a complete
Perl install anyway.

=head2 How can I compile Perl into Java?

You can't.  Not yet, anyway.  You can integrate Java and Perl with the
Perl Resource Kit from O'Reilly and Associates.  See
http://www.oreilly.com/catalog/prkunix/ for more information.
The Java interface will be supported in the core 5.006 release
of Perl.

=head2 How can I get C<#!perl> to work on [MS-DOS,NT,...]?
d348 5
a352 9
The Win95/NT installation, when using the ActiveState port of Perl,
will modify the Registry to associate the C<.pl> extension with the
perl interpreter.  If you install another port (Gurusamy Sarathy's is
the recommended Win95/NT port), or (eventually) build your own
Win95/NT Perl using a Windows port of gcc (e.g., with cygwin32 or
mingw32), then you'll have to modify the Registry yourself.  In
addition to associating C<.pl> with the interpreter, NT people can
use: C<SET PATHEXT=%PATHEXT%;.PL> to let them run the program
C<install-linux.pl> merely by typing C<install-linux>.
d354 1
a354 1
Macintosh perl scripts will have the appropriate Creator and
d368 1
a368 1
    perl -lane 'print $F[0] + $F[-1]' *
d373 1
a373 1
    # remove (most) comments from C program
d411 4
a414 4
The problem is that none of this is reliable: it depends on the
command interpreter.  Under Unix, the first two often work. Under DOS,
it's entirely possible neither works.  If 4DOS was the command shell,
you'd probably have better luck like this:
d423 2
a424 5
Using qq(), q(), and qx(), instead of "double quotes", 'single
quotes', and `backticks`, may make one-liners easier to write.

There is no general solution to all of this.  It is a mess, pure and
simple.  Sucks to be away from Unix, huh? :-)
d432 3
a434 9
books.  For problems and questions related to the web, like ``Why
do I get 500 Errors'' or ``Why doesn't it run from the browser right
when it runs fine on the command line'', see these sources:

    WWW Security FAQ
        http://www.w3.org/Security/Faq/

    Web FAQ
        http://www.boutell.com/faq/
d436 2
a437 2
    CGI FAQ
		http://www.webthing.com/tutorials/cgifaq.html		
d439 3
a441 2
    HTTP Spec
        http://www.w3.org/pub/WWW/Protocols/HTTP/
d443 2
a444 3
    HTML Spec
        http://www.w3.org/TR/REC-html40/
        http://www.w3.org/pub/WWW/MarkUp/
d446 2
a447 2
    CGI Spec
        http://www.w3.org/CGI/
d449 2
a450 4
    CGI Security FAQ
        http://www.go2net.com/people/paulp/cgi-security/safe-cgi.txt

Also take a look at L<perlfaq9>
d502 2
a503 13
Copyright (c) 1997-1999 Tom Christiansen and Nathan Torkington.
All rights reserved.

When included as an integrated part of the Standard Distribution
of Perl or of its documentation (printed or otherwise), this work is
covered under Perl's Artistic Licence.  For separate distributions of
all or part of this FAQ outside of that, see L<perlfaq>.

Irrespective of its distribution, all code examples here are public
domain.  You are permitted and encouraged to use this code and any
derivatives thereof in your own programs for fun or for profit as you
see fit.  A simple comment in the code giving credit to the FAQ would
be courteous but is not required.
@


1.1.1.2
log
@virgin perl 5.6.0
@
text
@d3 1
a3 1
perlfaq3 - Programming Tools ($Revision: 1.38 $, $Date: 1999/05/23 16:08:30 $)
d22 1
a22 1
	Regexes		perlre, perlfunc, perlop, perllocale
d28 1
a28 1
A crude table of contents for the Perl man page set is found in L<perltoc>.
d44 2
a45 2
In general, no.  The Shell.pm module (distributed with Perl) makes
Perl try commands which aren't part of the Perl language as shell
d51 1
a51 2
Have you tried C<use warnings> or used C<-w>?  They enable warnings 
for dubious practices.
d56 1
a56 1
variables with C<my> or C<our> or C<use vars>.
d133 1
a133 1
    map! ^O {^M}^[O^T
d147 1
a147 1
The a2ps at http://www.infres.enst.fr/%7Edemaille/a2ps/ does lots of things
d150 1
a150 1
=head2 Is there a ctags for Perl?
d152 8
a159 1
There's a simple one at
d165 10
a174 28
If you're on Unix, you already have an IDE -- Unix itself.  This powerful
IDE derives from its interoperability, flexibility, and configurability.
If you really want to get a feel for Unix-qua-IDE, the best thing to do
is to find some high-powered programmer whose native language is Unix.
Find someone who has been at this for many years, and just sit back
and watch them at work.  They have created their own IDE, one that
suits their own tastes and aptitudes.  Quietly observe them edit files,
move them around, compile them, debug them, test them, etc.  The entire
development *is* integrated, like a top-of-the-line German sports car:
functional, powerful, and elegant.  You will be absolutely astonished
at the speed and ease exhibited by the native speaker of Unix in his
home territory.  The art and skill of a virtuoso can only be seen to be
believed.  That is the path to mastery -- all these cobbled little IDEs
are expensive toys designed to sell a flashy demo using cheap tricks,
and being optimized for immediate but shallow understanding rather than
enduring use, are but a dim palimpsest of real tools.

In short, you just have to learn the toolbox.  However, if you're not
on Unix, then your vendor probably didn't bother to provide you with
a proper toolbox on the so-called complete system that you forked out
your hard-earned cash on.

PerlBuilder (XXX URL to follow) is an integrated development environment
for Windows that supports Perl development.  Perl programs are just plain
text, though, so you could download emacs for Windows (???) or a vi clone
(vim) which runs on for win32 (http://www.cs.vu.nl/%7Etmgil/vi.html).
If you're transferring Windows files to Unix, be sure to transfer in
ASCII mode so the ends of lines are appropriately mangled.
d187 1
a187 1
perl-mode.el and support for the Perl debugger built in.  These should
d190 1
a190 1
In the Perl source directory, you'll find a directory called "emacs",
d195 1
a195 1
(single quote), and mess up the indentation and highlighting.  You
d215 1
a215 1
http://w4.lns.cornell.edu/%7Epvhp/ptk/ptkTOC.html , the Perl/Tk Reference
d219 1
a219 1
http://www-users.cs.umn.edu/%7Eamundson/perl/perltk/toc.html .
d264 1
a264 1
outperform those that don't (for I/O intensive applications).  To try
d266 1
a266 1
the ``Selecting File I/O mechanisms'' section.
d361 2
a362 2
module (available from http://www.fastcgi.com/) each of your Perl
programs becomes a permanent CGI daemon process.
d365 1
a365 1
and on the way you write your CGI programs, so investigate them with
d371 1
a371 1
(http://www.binevolve.com/ or http://www.binevolve.com/velocigen/) might
d373 3
a375 3
of your Perl programs, up to 25 times faster than normal CGI Perl by
running in persistent Perl mode, or 4 to 5 times faster without any
modification to your existing CGI programs. Fully functional evaluation
d407 1
a407 1
bottom line is that nothing but a restrictive license will give you
d412 1
a412 1
you want to be sure your license's wording will stand up in court.
d437 2
a438 2
F<INSTALL> podfile in the Perl source distribution for details.  If
you link your main perl binary with this, it will make it minuscule.
d457 1
a457 1
The Java interface will be supported in the core 5.6 release
d473 7
a479 6
perl interpreter.  If you install another port, perhaps even building
your own Win95/NT Perl from the standard sources by using a Windows port
of gcc (e.g., with cygwin or mingw32), then you'll have to modify
the Registry yourself.  In addition to associating C<.pl> with the
interpreter, NT people can use: C<SET PATHEXT=%PATHEXT%;.PL> to let them
run the program C<install-linux.pl> merely by typing C<install-linux>.
d481 2
a482 2
Macintosh Perl programs will have the appropriate Creator and
Type, so that double-clicking them will invoke the Perl application.
d486 1
a486 1
get your programs working for a web server.  This is an EXTREMELY big
d489 1
a489 1
=head2 Can I write useful Perl programs on the command line?
d513 1
a513 1
OK, the last one was actually an Obfuscated Perl Contest entry. :-)
d515 1
a515 1
=head2 Why don't Perl one-liners work on my DOS/Mac/VMS system?
d573 1
a573 1
        http://www.webthing.com/tutorials/cgifaq.html
d588 1
d592 1
a592 1
A good place to start is L<perltoot>, and you can use L<perlobj> and
d611 1
a611 1
fail, see L<perlbug> and send a bug report with the output of
d617 3
a619 3
A complete list of Perl's error messages and warnings with explanatory
text can be found in L<perldiag>. You can also use the splain program
(distributed with Perl) to explain the error messages:
d634 1
a634 1
This module (part of the standard Perl distribution) is designed to
d644 2
a645 2
of Perl or of its documentation (printed or otherwise), this works is
covered under Perl's Artistic License.  For separate distributions of
d648 1
a648 1
Irrespective of its distribution, all code examples here are in the public
d653 1
@


1.1.1.3
log
@stock perl 5.6.1
@
text
@d52 1
a52 1
to detect dubious practices.
d57 1
a57 1
variables with C<my>, C<our>, or C<use vars>.
d59 2
a60 2
Did you check the return values of each and every system call?  The operating
system (and thus Perl) tells you whether they worked, and if not
d67 1
a67 1
programmers and even has sections for those of you who are upgrading
d76 4
a79 5
You should get the Devel::DProf module from the standard distribution
(or separately on CPAN) and also use Benchmark.pm from the standard 
distribution.  The Benchmark module lets you time specific portions of 
your code, while Devel::DProf gives detailed breakdowns of where your 
code spends its time.
d107 1
a107 1
data you give it and proves little about the differing complexities
d128 4
a131 4
with this.  The perl-mode or newer cperl-mode for emacs can provide
remarkable amounts of help with most (but not all) code, and even less
programmable editors can provide significant assistance.  Tom swears
by the following settings in vi and its clones:
d138 1
a138 1
for indenting, ^D is for undenting, and ^O is for blockdenting--
d159 28
a186 178
Perl programs are just plain text, so any editor will do.

If you're on Unix, you already have an IDE--Unix itself.  The UNIX
philosophy is the philosophy of several small tools that each do one
thing and do it well.  It's like a carpenter's toolbox.

If you want a Windows IDE, check the following:

=over 4

=item CodeMagicCD

http://www.codemagiccd.com/

=item Komodo

ActiveState's cross-platform, multi-language IDE has Perl support,
including a regular expression debugger and remote debugging
(http://www.ActiveState.com/Products/Komodo/index.html).
(Visual Perl, a Visual Studio.NET plug-in is currently (early 2001)
in beta (http://www.ActiveState.com/Products/VisualPerl/index.html)).

=item The Object System

(http://www.castlelink.co.uk/object_system/) is a Perl web
applications development IDE.

=item PerlBuilder

(http://www.solutionsoft.com/perl.htm) is an integrated development
environment for Windows that supports Perl development.

=item Perl code magic

(http://www.petes-place.com/codemagic.html).

=item visiPerl+

http://helpconsulting.net/visiperl/, from Help Consulting.

=back

For editors: if you're on Unix you probably have vi or a vi clone already,
and possibly an emacs too, so you may not need to download anything.
In any emacs the cperl-mode (M-x cperl-mode) gives you perhaps the
best available Perl editing mode in any editor.

For Windows editors: you can download an Emacs

=over 4

=item GNU Emacs

http://www.gnu.org/software/emacs/windows/ntemacs.html

=item MicroEMACS

http://members.nbci.com/uemacs/

=item XEmacs

http://www.xemacs.org/Download/index.html

=back

or a vi clone such as

=over 4

=item Elvis

ftp://ftp.cs.pdx.edu/pub/elvis/ http://www.fh-wedel.de/elvis/

=item Vile

http://vile.cx/

=item Vim

http://www.vim.org/

win32: http://www.cs.vu.nl/%7Etmgil/vi.html

=back

For vi lovers in general, Windows or elsewhere:
http://www.thomer.com/thomer/vi/vi.html.

nvi (http://www.bostic.com/vi/, available from CPAN in src/misc/) is
yet another vi clone, unfortunately not available for Windows, but in
UNIX platforms you might be interested in trying it out, firstly because
strictly speaking it is not a vi clone, it is the real vi, or the new
incarnation of it, and secondly because you can embed Perl inside it
to use Perl as the scripting language.  nvi is not alone in this,
though: at least also vim and vile offer an embedded Perl.

The following are Win32 multilanguage editor/IDESs that support Perl:

=over 4

=item Codewright

http://www.starbase.com/

=item MultiEdit

http://www.MultiEdit.com/

=item SlickEdit

http://www.slickedit.com/

=back

There is also a toyedit Text widget based editor written in Perl
that is distributed with the Tk module on CPAN.  The ptkdb
(http://world.std.com/~aep/ptkdb/) is a Perl/tk based debugger that
acts as a development environment of sorts.  Perl Composer
(http://perlcomposer.sourceforge.net/vperl.html) is an IDE for Perl/Tk
GUI creation.

In addition to an editor/IDE you might be interested in a more
powerful shell environment for Win32.  Your options include

=over 4

=item Bash

from the Cygwin package (http://sources.redhat.com/cygwin/)

=item Ksh

from the MKS Toolkit (http://www.mks.com/), or the Bourne shell of
the U/WIN environment (http://www.research.att.com/sw/tools/uwin/)

=item Tcsh

ftp://ftp.astron.com/pub/tcsh/, see also
http://www.primate.wisc.edu/software/csh-tcsh-book/

=item Zsh

ftp://ftp.blarg.net/users/amol/zsh/, see also http://www.zsh.org/

=back

MKS and U/WIN are commercial (U/WIN is free for educational and
research purposes), Cygwin is covered by the GNU Public License (but
that shouldn't matter for Perl use).  The Cygwin, MKS, and U/WIN all
contain (in addition to the shells) a comprehensive set of standard
UNIX toolkit utilities.

If you're transferring text files between Unix and Windows using FTP
be sure to transfer them in ASCII mode so the ends of lines are
appropriately converted.

On Mac OS the MacPerl Application comes with a simple 32k text editor
that behaves like a rudimentary IDE.  In contrast to the MacPerl Application
the MPW Perl tool can make use of the MPW Shell itself as an editor (with
no 32k limit).

=over 4

=item BBEdit and BBEdit Lite

are text editors for Mac OS that have a Perl sensitivity mode
(http://web.barebones.com/).

=item Alpha

is an editor, written and extensible in Tcl, that nonetheless has
built in support for several popular markup and programming languages
including Perl and HTML (http://alpha.olm.net/).

=back

Pepper and Pe are programming language sensitive text editors for Mac
OS X and BeOS respectively (http://www.hekkelman.com/).
d191 2
a192 2
see http://www.perl.com/CPAN/authors/Tom_Christiansen/scripts/toms.exrc.gz ,
the standard benchmark file for vi emulators.  The file runs best with nvi,
d194 1
a194 1
with an embedded Perl interpreter--see http://www.perl.com/CPAN/src/misc.
d226 1
a226 1
Invaluable for Perl/Tk programming are the Perl/Tk FAQ at
d240 1
a240 1
See the next question on ``How can I make my Perl program run faster?''
d245 2
a246 1
can often make a dramatic difference.  Jon Bentley's book
d257 2
a258 2
write them in assembler.  Similar to rewriting in C,
modules that have critical sections can be written in C (for instance, the
d297 1
a297 1
125-byte bit vector--a considerable memory savings.  The standard
d342 1
a342 1
that they go out of scope so that Perl can free up that space for
d383 6
a388 7
(http://www.binevolve.com/ or http://www.binevolve.com/velocigen/ )
might also be worth looking at.  It will allow you to increase the
performance of your Perl programs, running programs up to 25 times
faster than normal CGI Perl when running in persistent Perl mode or 4
to 5 times faster without any modification to your existing CGI
programs. Fully functional evaluation copies are available from the
web site.
d398 2
a399 2
readable by people on the web, though--only by people with access to
the filesystem.)  So you have to leave the permissions at the socially
d403 1
a403 1
insecure things and relies on people not knowing how to exploit those
d415 1
a415 1
your code, but none can definitively conceal it (true of every
d437 1
a437 1
run-time system is still present and so your program will take just as
d440 1
a440 1
rare programs actually benefit significantly (even running several times
d455 2
a456 2
faster, more portable, or more secure.  In fact, it can make your
situation worse.  The executable will be bigger, your VM system may take
d466 1
a466 1
You can also integrate Java and Perl with the
d468 3
a470 5
http://www.oreilly.com/catalog/prkunix/ .

Perl 5.6 comes with Java Perl Lingo, or JPL.  JPL, still in
development, allows Perl code to be called from Java.  See jpl/README
in the Perl source tree.
d480 1
a480 1
batch file and codify it in C<ALTERNATIVE_SHEBANG> (see the
d549 1
a549 1
The problem is that none of these examples are reliable: they depend on the
d551 1
a551 1
it's entirely possible that neither works.  If 4DOS was the command shell,
d599 1
d602 4
a605 4
A good place to start is L<perltoot>, and you can use L<perlobj>,
L<perlboot>, and L<perlbot> for reference.  Perltoot didn't come out
until the 5.004 release; you can get a copy (in pod, html, or
postscript) from http://www.perl.com/CPAN/doc/FMTEYEWTK/ .
d617 1
a617 1
my C program; what am I doing wrong?
@


1.1.1.4
log
@stock perl 5.8.0 from CPAN
@
text
@d3 1
a3 1
perlfaq3 - Programming Tools ($Revision: 1.22 $, $Date: 2002/05/06 13:11:13 $)
d14 1
a14 1
Have you read the appropriate manpages?  Here's a brief index:
d25 2
a26 3
	Various 	http://www.cpan.org/misc/olddoc/FMTEYEWTK.tgz
			(not a man-page but still useful, a collection
			 of various essays on Perl techniques)
d28 1
a28 1
A crude table of contents for the Perl manpage set is found in L<perltoc>.
d33 1
a33 1
perldebug(1) manpage, on an ``empty'' program, like this:
d44 4
a47 16
In general, not yet.  There is psh available at

    http://www.focusresearch.com/gregor/psh

Which includes the following description:

    The Perl Shell is a shell that combines the interactive nature
    of a Unix shell with the power of Perl. The goal is to eventually
    have a full featured shell that behaves as expected for normal
    shell activity. But, the Perl Shell will use Perl syntax and
    functionality for control-flow statements and other things.

The Shell.pm module (distributed with Perl) makes Perl try commands
which aren't part of the Perl language as shell commands.  perlsh
from the source distribution is simplistic and uninteresting, but
may still be what you want.
d113 3
a115 2
The B::Xref module can be used to generate cross-reference reports 
for Perl programs.
d121 12
a132 14
Perltidy is a Perl script which indents and reformats Perl scripts
to make them easier to read by trying to follow the rules of the
L<perlstyle>. If you write Perl scripts, or spend much time reading
them, you will probably find it useful.  It is available at
http://perltidy.sourceforge.net

Of course, if you simply follow the guidelines in L<perlstyle>,
you shouldn't need to reformat.  The habit of formatting your code
as you write it will help prevent bugs.  Your editor can and should
help you with this.  The perl-mode or newer cperl-mode for emacs
can provide remarkable amounts of help with most (but not all)
code, and even less programmable editors can provide significant
assistance.  Tom Christiansen and many other VI users  swear by
the following settings in vi and its clones:
d137 1
a137 1
Put that in your F<.exrc> file (replacing the caret characters
d140 8
a147 2
as it were.  A more complete example, with comments, can be found at
http://www.cpan.org/authors/id/TOMC/scripts/toms.exrc.gz
d149 2
a150 3
The a2ps http://www-inf.enst.fr/%7Edemaille/a2ps/black+white.ps does
lots of things related to generating nicely printed output of
documents, as does enscript at http://people.ssh.fi/mtr/genscript/ .
d154 3
a156 7
Recent versions of ctags do much more than older versions did.
EXUBERANT CTAGS is available from http://ctags.sourceforge.net/
and does a good job of making tags files for perl code.

There is also a simple one at
http://www.cpan.org/authors/id/TOMC/scripts/ptags.gz which may do
the trick.  It can be easy to hack this into what you want.
d166 1
a166 1
If you want an IDE, check the following:
d170 4
d176 5
a180 6
ActiveState's cross-platform (as of April 2001 Windows and Linux),
multi-language IDE has Perl support, including a regular expression
debugger and remote debugging
( http://www.ActiveState.com/Products/Komodo/index.html ).  (Visual
Perl, a Visual Studio.NET plug-in is currently (early 2001) in beta
( http://www.ActiveState.com/Products/VisualPerl/index.html )).
d184 2
a185 10
( http://www.castlelink.co.uk/object_system/ ) is a Perl web
applications development IDE, apparently for any platform
that runs Perl.

=item Open Perl IDE

( http://open-perl-ide.sourceforge.net/ )
Open Perl IDE is an integrated development environment for writing
and debugging Perl scripts with ActiveState's ActivePerl distribution
under Windows 95/98/NT/2000.
d189 1
a189 1
( http://www.solutionsoft.com/perl.htm ) is an integrated development
d192 1
a192 4
=item visiPerl+

( http://helpconsulting.net/visiperl/ )
From Help Consulting, for Windows.
d194 1
a194 1
=item OptiPerl
d196 1
a196 8
( http://www.optiperl.com/ ) is a Windows IDE with simulated CGI
environment, including debugger and syntax highlighting editor.

=back

For Windows there's also the

=over 4
d198 1
a198 6
=item CodeMagicCD

( http://www.codemagiccd.com/ ) Collection of various programming
tools for Windows: Perl (5.005_03), TclTk, Python, GNU programming
tools, REBOL, wxWindows toolkit, the MinGW GNU C/C++ compiler, DJGPP
GNU C/C++ compiler, Cint C interpreter, YaBasic.
d207 1
a207 15
If you are using Windows, you can use any editor that lets
you work with plain text, such as NotePad or WordPad.  Word
processors, such as Microsoft Word or WordPerfect, typically
do not work since they insert all sorts of behind-the-scenes
information, although some allow you to save files as "Text
Only". You can also download text editors designed
specifically for programming, such as Textpad
( http://www.textpad.com/ ) and UltraEdit
( http://www.ultraedit.com/ ), among others.

If you are using Mac OS, the same concerns apply.  MacPerl
(for Classic environments) comes with a simple editor.
Popular external editors are BBEdit ( http://www.bbedit.com/ )
or Alpha ( http://www.kelehers.org/alpha/ ). Mac OS X users can
use Unix editors as well.
d246 1
d248 1
a248 3
	http://www.thomer.com/thomer/vi/vi.html

nvi ( http://www.bostic.com/vi/ , available from CPAN in src/misc/) is
d276 1
a276 1
( http://world.std.com/~aep/ptkdb/ ) is a Perl/tk based debugger that
d278 1
a278 1
( http://perlcomposer.sourceforge.net/vperl.html ) is an IDE for Perl/Tk
d288 1
a288 1
from the Cygwin package ( http://sources.redhat.com/cygwin/ )
d292 2
a293 2
from the MKS Toolkit ( http://www.mks.com/ ), or the Bourne shell of
the U/WIN environment ( http://www.research.att.com/sw/tools/uwin/ )
d297 1
a297 1
ftp://ftp.astron.com/pub/tcsh/ , see also
d302 1
a302 1
ftp://ftp.blarg.net/users/amol/zsh/ , see also http://www.zsh.org/
d326 1
a326 1
( http://web.barebones.com/ ).
d332 1
a332 1
including Perl and HTML ( http://alpha.olm.net/ ).
d337 1
a337 1
OS X and BeOS respectively ( http://www.hekkelman.com/ ).
d342 1
a342 1
see http://www.cpan.org/authors/Tom_Christiansen/scripts/toms.exrc.gz ,
d345 1
a345 1
with an embedded Perl interpreter--see http://www.cpan.org/src/misc/ .
d366 1
a366 1
directory http://www.cpan.org/authors/Tom_Christiansen/scripts/rep ;
d375 1
a375 1
directory http://www.cpan.org/modules/by-category/08_User_Interfaces/
d380 1
a380 1
http://www.cpan.org/authors/Stephen_O_Lidie/ , and the
d386 1
a386 1
The http://www.cpan.org/authors/id/SKUNZ/perlmenu.v4.0.tar.gz
d389 4
d401 1
a401 3
fails consider just buying faster hardware.  You will probably want to
read the answer to the earlier question ``How do I profile my Perl programs?''
if you haven't done so already.
a459 95
Of course, the best way to save memory is to not do anything to waste
it in the first place. Good programming practices can go a long way
toward this:

=over 4

=item * Don't slurp!

Don't read an entire file into memory if you can process it line
by line. Or more concretely, use a loop like this:

	#
	# Good Idea
	#
	while (<FILE>) {
	   # ...
	}

instead of this:

	#
	# Bad Idea
	#
	@@data = <FILE>;
	foreach (@@data) {
	    # ...
	}

When the files you're processing are small, it doesn't much matter which
way you do it, but it makes a huge difference when they start getting
larger. 

=item * Use map and grep selectively

Remember that both map and grep expect a LIST argument, so doing this:

        @@wanted = grep {/pattern/} <FILE>;

will cause the entire file to be slurped. For large files, it's better
to loop:

        while (<FILE>) {
                push(@@wanted, $_) if /pattern/;
        }

=item * Avoid unnecessary quotes and stringification

Don't quote large strings unless absolutely necessary:

        my $copy = "$large_string";

makes 2 copies of $large_string (one for $copy and another for the
quotes), whereas

        my $copy = $large_string;

only makes one copy.

Ditto for stringifying large arrays:

        {
                local $, = "\n";
                print @@big_array;
        }

is much more memory-efficient than either

        print join "\n", @@big_array;

or

        {
                local $" = "\n";
                print "@@big_array";
        }


=item * Pass by reference

Pass arrays and hashes by reference, not by value. For one thing, it's
the only way to pass multiple lists or hashes (or both) in a single
call/return. It also avoids creating a copy of all the contents. This
requires some judgment, however, because any changes will be propagated
back to the original data. If you really want to mangle (er, modify) a
copy, you'll have to sacrifice the memory needed to make one.

=item * Tie large variables to disk.

For "big" data stores (i.e. ones that exceed available memory) consider
using one of the DB modules to store it on disk instead of in RAM. This
will incur a penalty in access time, but that's probably better than
causing your hard disk to thrash due to massive swapping.

=back

d479 11
a489 8
You usually can't. On most operating systems, memory
allocated to a program can never be returned to the system.
That's why long-running programs sometimes re-exec
themselves. Some operating systems (notably, systems that
use mmap(2) for allocating large chunks of memory) can
reclaim memory that is no longer used, but on such systems,
perl must be configured and compiled to use the OS's malloc,
not perl's.
d511 1
a511 1
http://www.apache.org/ ) with either of the mod_perl or mod_fastcgi
d523 1
a523 1
module (available from http://www.fastcgi.com/ ) each of your Perl
d530 1
a530 1
See http://www.cpan.org/modules/by-category/15_World_Wide_Web_HTML_HTTP_CGI/ .
d560 8
a567 9
You can try using encryption via source filters (Starting from Perl
5.8 the Filter::Simple and Filter::Util::Call modules are included in
the standard distribution), but any decent programmer will be able to
decrypt it.  You can try using the byte code compiler and interpreter
described below, but the curious might still be able to de-compile it.
You can try using the native-code compiler described below, but
crackers might be able to disassemble it.  These pose varying degrees
of difficulty to people wanting to get at your code, but none can
definitively conceal it (true of every language, not just Perl).
a698 3
    # MPW
    perl -e 'print "Hello world\n"'

d717 2
a718 1
There is no general solution to all of this.  It is a mess.
d728 20
a747 2
when it runs fine on the command line'', see the troubleshooting
guides and references in L<perlfaq9> or in the CGI MetaFAQ:
d749 2
a750 1
	http://www.perl.org/CGI_MetaFAQ.html
d755 3
a757 7
L<perlboot>, L<perltoot>, L<perltooc>, and L<perlbot> for reference.
(If you are using really old Perl, you may not have all of these,
try http://www.perldoc.com/ , but consider upgrading your perl.)

A good book on OO on Perl is the "Object-Oriented Perl"
by Damian Conway from Manning Publications, 
http://www.manning.com/Conway/index.html
d776 2
a777 1
=head2 When I tried to run my script, I got this message. What does it mean?
d802 1
a802 1
Copyright (c) 1997-2002 Tom Christiansen and Nathan Torkington.
d805 4
a808 2
This documentation is free; you can redistribute it and/or modify it
under the same terms as Perl itself.
@


1.1.1.5
log
@perl 5.8.2 from CPAN
@
text
@d3 1
a3 1
perlfaq3 - Programming Tools ($Revision: 1.35 $, $Date: 2003/08/24 05:26:59 $)
d45 11
a55 11
The psh (Perl sh) is currently at version 1.8. The Perl Shell is a
shell that combines the interactive nature of a Unix shell with the
power of Perl. The goal is a full featured shell that behaves as
expected for normal shell activity and uses Perl syntax and
functionality for control-flow statements and other things.
You can get psh at http://www.focusresearch.com/gregor/psh/ .

Zoidberg is a similar project and provides a shell written in perl,
configured in perl and operated in perl. It is intended as a login shell
and development environment. It can be found at http://zoidberg.sf.net/
or your local CPAN mirror.
a61 44
=head2 How do I find which modules are installed on my system?

You can use the ExtUtils::Installed module to show all
installed distributions, although it can take awhile to do
its magic.  The standard library which comes with Perl just
shows up as "Perl" (although you can get those with
Mod::CoreList).

	use ExtUtils::Installed;

	my $inst    = ExtUtils::Installed->new();
	my @@modules = $inst->modules();

If you want a list of all of the Perl module filenames, you
can use File::Find::Rule.

	use File::Find::Rule;

	my @@files = File::Find::Rule->file()->name( '*.pm' )->in( @@INC );

If you do not have that module, you can do the same thing
with File::Find which is part of the standard library.

    use File::Find;
    my @@files;

    find sub { push @@files, $File::Find::name if -f _ && /\.pm$/ },
         @@INC;

	print join "\n", @@files;

If you simply need to quickly check to see if a module is
available, you can check for its documentation.  If you can
read the documentation the module is most likely installed.
If you cannot read the documentation, the module might not
have any (in rare cases).

	prompt% perldoc Module::Name

You can also try to include the module in a one-liner to see if
perl finds it.

	perl -MModule::Name -e1

d64 1
a64 1
Have you tried C<use warnings> or used C<-w>?  They enable warnings
d90 3
a92 3
(or separately on CPAN) and also use Benchmark.pm from the standard
distribution.  The Benchmark module lets you time specific portions of
your code, while Devel::DProf gives detailed breakdowns of where your
d105 2
a106 1
			   return @@a },
d108 1
d126 1
a126 1
The B::Xref module can be used to generate cross-reference reports
d157 1
a157 1
The a2ps http://www-inf.enst.fr/%7Edemaille/a2ps/black+white.ps.gz does
d222 13
d250 1
a250 1
If you are using MacOS, the same concerns apply.  MacPerl
d253 1
a253 1
or Alpha ( http://www.kelehers.org/alpha/ ). MacOS X users can
d264 1
a264 1
http://www.microemacs.de/
a269 4
=item Jed

http://space.mit.edu/~davis/jed/

d282 1
a282 1
http://dickey.his.com/vile/vile.html
d288 2
d326 1
a326 1
( http://perlcomposer.sourceforge.net/ ) is an IDE for Perl/Tk
d414 1
a414 1
directory http://www.cpan.org/authors/Tom_Christiansen/scripts/rep.gz ;
d441 1
a441 1
I<Programming Pearls> (that's not a misspelling!)  has some good tips
d446 2
a447 2
read the answer to the earlier question ``How do I profile my Perl
programs?'' if you haven't done so already.
d453 27
a479 15
write them in assembler.  Similar to rewriting in C, modules that have
critical sections can be written in C (for instance, the PDL module
from CPAN).

If you're currently linking your perl executable to a shared
I<libc.so>, you can often gain a 10-25% performance benefit by
rebuilding it to link with a static libc.a instead.  This will make a
bigger perl executable, but your Perl programs (and programmers) may
thank you for it.  See the F<INSTALL> file in the source distribution
for more information.

The undump program was an ancient attempt to speed up Perl program by
storing the already-compiled form to disk.  This is no longer a viable
option, as it only worked on a few architectures, and wasn't a good
solution anyway.
d536 1
a536 1
larger.
d601 1
a601 1
=head2 Is it safe to return a reference to local or lexical data?
d603 1
a603 2
Yes. Perl's garbage collection system takes care of this so
everything works out right.
d610 1
a610 1
    for ( 1 .. 10 ) {
a707 6
It is very easy to recover the source of Perl programs.  You simply
feed the program to the perl interpreter and use the modules in
the B:: hierarchy.  The B::Deparse module should be able to
defeat most attempts to hide source.  Again, this is not
unique to Perl.

d772 2
a773 2
batch file and codify it in C<ALTERNATE_SHEBANG> (see the
F<dosish.h> file in the source distribution for more information).
d882 1
a882 1
by Damian Conway from Manning Publications,
@


1.1.1.6
log
@perl 5.8.3 from CPAN
@
text
@d3 1
a3 1
perlfaq3 - Programming Tools ($Revision: 1.37 $, $Date: 2003/11/24 19:55:50 $)
d68 1
a68 1
Module::CoreList).
@


1.1.1.7
log
@Import of stock perl 5.8.5
@
text
@d3 1
a3 1
perlfaq3 - Programming Tools ($Revision: 1.7 $, $Date: 2004/04/07 21:33:08 $)
@


1.1.1.8
log
@perl 5.8.6 from CPAN
@
text
@d3 1
a3 1
perlfaq3 - Programming Tools ($Revision: 1.41 $, $Date: 2004/11/03 22:45:32 $)
d221 1
a221 2
If you want an IDE, check the following (in alphabetical order, not
order of preference):
a224 7
=item Eclipse

The Eclipse Perl Integration Project integrates Perl 
editing/debugging with Eclipse.

The website for the project is http://e-p-i-c.sf.net/

d227 2
a228 2
ActiveState's cross-platform (as of October 2004, that's Windows, Linux,
and Solaris), multi-language IDE has Perl support, including a regular expression
d230 9
a238 1
( http://www.ActiveState.com/Products/Komodo/ ).
a246 5
=item OptiPerl

( http://www.optiperl.com/ ) is a Windows IDE with simulated CGI
environment, including debugger and syntax highlighting editor.

d257 1
a257 4
=item Visual Perl

( http://www.activestate.com/Products/Visual_Perl/ )
Visual Perl is a Visual Studio.NET plug-in from ActiveState.
d259 2
d282 1
a282 1
or Alpha ( http://www.his.com/~jguyer/Alpha/Alpha8.html ). MacOS X users can
d341 1
a341 1
http://www.borland.com/codewright/
d402 1
a402 1
=item Affrus
d404 2
a405 2
is a full Perl development enivornment with full debugger support (
http://www.latenightsw.com ).
d411 1
a411 7
including Perl and HTML ( http://www.his.com/~jguyer/Alpha/Alpha8.html ).

=item BBEdit and BBEdit Lite

are text editors for Mac OS that have a Perl sensitivity mode
( http://web.barebones.com/ ).

d457 1
a457 1
http://phaseit.net/claird/comp.lang.perl.tk/ptkFAQ.html , the Perl/Tk Reference
d783 1
a783 1
Perl Resource Kit from O'Reilly Media.  See
@


1.1.1.9
log
@perl 5.8.8 import
@
text
@d3 1
a3 1
perlfaq3 - Programming Tools ($Revision: 1.56 $, $Date: 2005/12/31 00:54:37 $)
d34 1
a34 1
perldebug(1) manpage, on an "empty" program, like this:
d45 6
a50 6
The psh (Perl sh) is currently at version 1.8. The Perl Shell is a shell
that combines the interactive nature of a Unix shell with the power of
Perl. The goal is a full featured shell that behaves as expected for
normal shell activity and uses Perl syntax and functionality for
control-flow statements and other things. You can get psh at
http://sourceforge.net/projects/psh/ .
d58 3
a60 3
which aren't part of the Perl language as shell commands.  perlsh from
the source distribution is simplistic and uninteresting, but may still
be what you want.
d64 5
a68 4
You can use the ExtUtils::Installed module to show all installed
distributions, although it can take awhile to do its magic.  The
standard library which comes with Perl just shows up as "Perl" (although
you can get those with Module::CoreList).
d88 2
a89 8
    find(
      sub {
      	push @@files, $File::Find::name
      		if -f $File::Find::name && /\.pm$/
      	},

      @@INC
      );
d205 7
a211 5
(contributed by brian d foy)

Exuberent ctags supports Perl: http://ctags.sourceforge.net/

You might also try pltags: http://www.mscha.com/pltags.zip
d228 1
a228 3
http://e-p-i-c.sf.net/

The Eclipse Perl Integration Project integrates Perl
d231 1
a231 7
=item Enginsite

http://www.enginsite.com/

Perl Editor by EngInSite is a complete integrated development
environment (IDE) for creating, testing, and  debugging  Perl scripts;
the tool runs on Windows 9x/NT/2000/XP or later.
a234 2
http://www.ActiveState.com/Products/Komodo/

d237 2
a238 1
debugger and remote debugging.
d242 1
a242 2
http://open-perl-ide.sourceforge.net/

d249 2
a250 4
http://www.optiperl.com/

OptiPerl is a Windows IDE with simulated CGI environment, including
debugger and syntax highlighting editor.
d254 2
a255 4
http://www.solutionsoft.com/perl.htm

PerlBuidler is an integrated development environment for Windows that
supports Perl development.
d259 1
a259 2
http://helpconsulting.net/visiperl/

d264 1
a264 2
http://www.activestate.com/Products/Visual_Perl/

a266 6
=item Zeus

http://www.zeusedit.com/lookmain.html

Zeus for Window is another Win32 multi-language editor/IDE
that comes with support for Perl:
d270 20
a289 21
For editors: if you're on Unix you probably have vi or a vi clone
already, and possibly an emacs too, so you may not need to download
anything. In any emacs the cperl-mode (M-x cperl-mode) gives you
perhaps the best available Perl editing mode in any editor.

If you are using Windows, you can use any editor that lets you work
with plain text, such as NotePad or WordPad.  Word processors, such as
Microsoft Word or WordPerfect, typically do not work since they insert
all sorts of behind-the-scenes information, although some allow you to
save files as "Text Only". You can also download text editors designed
specifically for programming, such as Textpad (
http://www.textpad.com/ ) and UltraEdit ( http://www.ultraedit.com/ ),
among others.

If you are using MacOS, the same concerns apply.  MacPerl (for Classic
environments) comes with a simple editor. Popular external editors are
BBEdit ( http://www.bbedit.com/ ) or Alpha (
http://www.his.com/~jguyer/Alpha/Alpha8.html ). MacOS X users can use
Unix editors as well. Neil Bowers (the man behind Geekcruises) has a
list of Mac editors that can handle Perl (
http://www.neilbowers.org/macperleditors.html ).
d410 2
a411 2
is a full Perl development environment with full debugger support
( http://www.latenightsw.com ).
d475 5
d489 2
a490 2
read the answer to the earlier question "How do I profile my Perl
programs?" if you haven't done so already.
d652 14
a665 15
(contributed by Michael Carman)

You usually can't. Memory allocated to lexicals (i.e. my() variables)
cannot be reclaimed or reused even if they go out of scope. It is
reserved in case the variables come back into scope. Memory allocated
to global variables can be reused (within your program) by using
undef()ing and/or delete().

On most operating systems, memory allocated to a program can never be
returned to the system. That's why long-running programs sometimes re-
exec themselves. Some operating systems (notably, systems that use
mmap(2) for allocating large chunks of memory) can reclaim memory that
is no longer used, but on such systems, perl must be configured and
compiled to use the OS's malloc, not perl's.

d667 2
a668 3
or should be worrying about much in Perl.

See also "How can I make my Perl program take less memory?"
d702 9
d714 1
a714 1
unsatisfactory) solutions with varying levels of "security".
d749 1
a749 1
statements like "This is unpublished proprietary software of XYZ Corp.
d751 1
a751 1
blah."  We are not lawyers, of course, so you should see a lawyer if
d756 35
a790 30
(contributed by brian d foy)

In general, you can't do this.  There are some things that may work
for your situation though.  People usually ask this question
because they want to distribute their works without giving away
the source code, and most solutions trade disk space for convenience.
You probably won't see much of a speed increase either, since most
solutions simply bundle a Perl interpreter in the final product
(but see L<How can I make my Perl program run faster?>).

The Perl Archive Toolkit ( http://par.perl.org/index.cgi ) is Perl's
analog to Java's JAR.  It's freely available and on CPAN (
http://search.cpan.org/dist/PAR/ ).

The B::* namespace, often called "the Perl compiler", but is really a way
for Perl programs to peek at its innards rather than create pre-compiled
versions of your program.  However. the B::Bytecode module can turn your
script  into a bytecode format that could be loaded later by the
ByteLoader module and executed as a regular Perl script.

There are also some commercial products that may work for you, although
you have to buy a license for them.

The Perl Dev Kit ( http://www.activestate.com/Products/Perl_Dev_Kit/ )
from ActiveState can "Turn your Perl programs into ready-to-run
executables for HP-UX, Linux, Solaris and Windows."

Perl2Exe ( http://www.indigostar.com/perl2exe.htm ) is a command line
program for converting perl scripts to executable files.  It targets both
Windows and unix platforms.
d809 1
a809 1
"extproc" handling).  For DOS one should first invent a corresponding
d822 2
a823 4
Under "Classic" MacOS, a perl program will have the appropriate Creator and
Type, so that double-clicking them will invoke the MacPerl application.
Under Mac OS X, clickable apps can be made from any C<#!> script using Wil
Sanchez' DropScript utility: http://www.wsanchez.net/software/ .
d905 3
a907 3
books.  For problems and questions related to the web, like "Why
do I get 500 Errors" or "Why doesn't it run from the browser right
when it runs fine on the command line", see the troubleshooting
d916 2
d920 2
a921 3
by Damian Conway from Manning Publications, or "Learning Perl
References, Objects, & Modules" by Randal Schwartz and Tom
Phoenix from O'Reilly Media.
d923 1
a923 1
=head2 Where can I learn about linking C with Perl?
d932 2
a933 7
You might not need all the power of XS. The Inline::C module lets
you put C code directly in your Perl source. It handles all the
magic to make it work. You still have to learn at least some of
the perl API but you won't have to deal with the complexity of the
XS support files.

=head2 I've read perlembed, perlguts, etc., but I can't embed perl in my C program; what am I doing wrong?
d965 2
a966 2
Copyright (c) 1997-2006 Tom Christiansen, Nathan Torkington, and
other authors as noted. All rights reserved.
@


1.1.1.10
log
@import perl 5.10.0 from CPAN
@
text
@d3 1
a3 1
perlfaq3 - Programming Tools ($Revision: 10127 $)
d113 2
a114 24
(contributed by brian d foy)

Before you do anything else, you can help yourself by ensuring that
you let Perl tell you about problem areas in your code. By turning
on warnings and strictures, you can head off many problems before
they get too big. You can find out more about these in L<strict>
and L<warnings>.

	#!/usr/bin/perl
	use strict;
	use warnings;

Beyond that, the simplest debugger is the C<print> function. Use it
to look at values as you run your program:

	print STDERR "The value is [$value]\n";

The C<Data::Dumper> module can pretty-print Perl data structures:

	use Data::Dumper qw( Dumper );
	print STDERR "The hash is " . Dumper( \%hash ) . "\n";

Perl comes with an interactive debugger, which you can start with the
C<-d> switch. It's fully explained in L<perldebug>.
d116 19
a134 10
If you'd like a graphical user interface and you have Tk, you can use
C<ptkdb>. It's on CPAN and available for free.

If you need something much more sophisticated and controllable, Leon
Brocard's Devel::ebug (which you can call with the -D switch as -Debug)
gives you the programmatic hooks into everything you need to write your
own (without too much pain and suffering).

You can also use a commercial debugger such as Affrus (Mac OS X), Komodo
from Activestate (Windows and Mac OS X), or EPIC (most platforms).
d200 2
a201 2
for indenting, ^D is for undenting, and ^O is for blockdenting--as
it were.  A more complete example, with comments, can be found at
d206 1
a206 1
documents.
a211 4
Ctags uses an index to quickly find things in source code, and many
popular editors support ctags for several different languages,
including Perl.

d313 3
a315 1
Unix editors as well.
d387 1
a387 1
( http://ptkdb.sourceforge.net/ ) is a Perl/tk based debugger that
d413 1
a413 1
http://www.zsh.org/
d487 1
a487 62
=head2 How can I write a GUI (X, Tk, Gtk, etc.) in Perl?
X<GUI> X<Tk> X<Wx> X<WxWidgets> X<Gtk> X<Gtk2> X<CamelBones> X<Qt>

(contributed by Ben Morrow)

There are a number of modules which let you write GUIs in Perl. Most
GUI toolkits have a perl interface: an incomplete list follows.

=over 4

=item Tk

This works under Unix and Windows, and the current version doesn't
look half as bad under Windows as it used to. Some of the gui elements
still don't 'feel' quite right, though. The interface is very natural
and 'perlish', making it easy to use in small scripts that just need a
simple gui. It hasn't been updated in a while.

=item Wx

This is a Perl binding for the cross-platform wxWidgets toolkit 
L<http://www.wxwidgets.org>. It works under Unix, Win32 and Mac OS X,
using native widgets (Gtk under Unix). The interface follows the C++
interface closely, but the documentation is a little sparse for someone
who doesn't know the library, mostly just referring you to the C++
documentation.

=item Gtk and Gtk2

These are Perl bindings for the Gtk toolkit L<http://www.gtk.org>. The
interface changed significantly between versions 1 and 2 so they have
separate Perl modules. It runs under Unix, Win32 and Mac OS X (currently
it requires an X server on Mac OS, but a 'native' port is underway), and
the widgets look the same on every plaform: i.e., they don't match the
native widgets. As with Wx, the Perl bindings follow the C API closely,
and the documentation requires you to read the C documentation to
understand it.

=item Win32::GUI

This provides access to most of the Win32 GUI widgets from Perl.
Obviously, it only runs under Win32, and uses native widgets. The Perl
interface doesn't really follow the C interface: it's been made more
Perlish, and the documentation is pretty good. More advanced stuff may
require familiarity with the C Win32 APIs, or reference to MSDN.

=item CamelBones

CamelBones L<http://camelbones.sourceforge.net> is a Perl interface to
Mac OS X's Cocoa GUI toolkit, and as such can be used to produce native
GUIs on Mac OS X. It's not on CPAN, as it requires frameworks that
CPAN.pm doesn't know how to install, but installation is via the
standard OSX package installer. The Perl API is, again, very close to
the ObjC API it's wrapping, and the documentation just tells you how to
translate from one to the other.

=item Qt

There is a Perl interface to TrollTech's Qt toolkit, but it does not
appear to be maintained.

=item Athena
d489 11
a499 4
Sx is an interface to the Athena widget set which comes with X, but
again it appears not to be much used nowadays.

=back
d640 1
a640 1
requires some judgement, however, because any changes will be propagated
d748 5
a752 6
described later in L<perlfaq3>, but the curious might still be able to
de-compile it. You can try using the native-code compiler described
later, but crackers might be able to disassemble it.  These pose
varying degrees of difficulty to people wanting to get at your code,
but none can definitively conceal it (true of every language, not just
Perl).
d780 1
a780 1
The Perl Archive Toolkit ( http://par.perl.org/ ) is Perl's
d784 6
d801 10
d877 1
a877 1
    # Unix (including Mac OS X)
d883 1
a883 1
    # Mac Classic
d929 3
a931 2
by Damian Conway from Manning Publications, or "Intermediate Perl"
by Randal Schwartz, brian d foy, and Tom Phoenix from O'Reilly Media.
d974 3
a976 14
(contributed by brian d foy)

The C<ExtUtils::MakeMaker> module, better known simply as "MakeMaker",
turns a Perl script, typically called C<Makefile.PL>, into a Makefile.
The unix tool C<make> uses this file to manage dependencies and actions
to process and install a Perl distribution.

=head1 REVISION

Revision: $Revision: 10127 $

Date: $Date: 2007-10-27 21:40:20 +0200 (Sat, 27 Oct 2007) $

See L<perlfaq> for source control details and availability.
d980 1
a980 1
Copyright (c) 1997-2007 Tom Christiansen, Nathan Torkington, and
@


1.1.1.11
log
@import perl 5.10.1
@
text
@d3 1
a3 1
perlfaq3 - Programming Tools
d54 1
a54 2
and development environment. It can be found at
http://pardus-larus.student.utwente.nl/~pardus/projects/zoidberg/
d64 4
a67 13
From the command line, you can use the C<cpan> command's C<-l> switch:

	$ cpan -l

You can also use C<cpan>'s C<-a> switch to create an autobundle file
that C<CPAN.pm> understands and cna use to re-install every module:

	$ cpan -a

Inside a Perl program, you can use the ExtUtils::Installed module to
show all installed distributions, although it can take awhile to do
its magic.  The standard library which comes with Perl just shows up
as "Perl" (although you can get those with Module::CoreList).
d79 1
a79 6
	my @@files = File::Find::Rule->
		extras({follow => 1})->
		file()->
		name( '*.pm' )->
		in( @@INC )
		;
d84 2
a85 2
	use File::Find;
	my @@files;
d87 8
a94 11
	find(
	    {
		wanted => sub {
		    push @@files, $File::Find::fullname
			if -f $File::Find::fullname && /\.pm$/
		},
		follow => 1,
		follow_skip => 2,
	    },
	    @@INC
	);
d104 1
a104 1
	$ perldoc Module::Name
d109 1
a109 1
	$ perl -MModule::Name -e1
d151 32
a182 55
(contributed by brian d foy, updated Fri Jul 25 12:22:26 PDT 2008)

The C<Devel> namespace has several modules which you can use to
profile your Perl programs. The C<Devel::DProf> module comes with Perl
and you can invoke it with the C<-d> switch:

	perl -d:DProf program.pl

After running your program under C<DProf>, you'll get a F<tmon.out> file
with the profile data. To look at the data, you can turn it into a
human-readable report with the C<dprofpp> program that comes with
C<Devel::DProf>.

	dprofpp

You can also do the profiling and reporting in one step with the C<-p>
switch to <dprofpp>:

	dprofpp -p program.pl

The C<Devel::NYTProf> (New York Times Profiler) does both statement
and subroutine profiling. It's available from CPAN and you also invoke
it with the C<-d> switch:

	perl -d:NYTProf some_perl.pl

Like C<DProf>, it creates a database of the profile information that you
can turn into reports. The C<nytprofhtml> command turns the data into
an HTML report similar to the C<Devel::Cover> report:

	nytprofhtml

CPAN has several other profilers that you can invoke in the same
fashion. You might also be interested in using the C<Benchmark> to
measure and compare code snippets.

You can read more about profiling in I<Programming Perl>, chapter 20,
or I<Mastering Perl>, chapter 5.

L<perldebguts> documents creating a custom debugger if you need to
create a special sort of profiler. brian d foy describes the process
in I<The Perl Journal>, "Creating a Perl Debugger",
http://www.ddj.com/184404522 , and "Profiling in Perl"
http://www.ddj.com/184404580 .

Perl.com has two interesting articles on profiling: "Profiling Perl",
by Simon Cozens, http://www.perl.com/lpt/a/850 and "Debugging and
Profiling mod_perl Applications", by Frank Wiles,
http://www.perl.com/pub/a/2006/02/09/debug_mod_perl.html .

Randal L. Schwartz writes about profiling in "Speeding up Your Perl
Programs" for I<Unix Review>,
http://www.stonehenge.com/merlyn/UnixReview/col49.html , and "Profiling
in Template Toolkit via Overriding" for I<Linux Magazine>,
http://www.stonehenge.com/merlyn/LinuxMag/col75.html .
a283 8
=item Padre

http://padre.perlide.org/

Padre is cross-platform IDE for Perl written in Perl using the the wxWidgets
to provide a native look and feel. It's open source under the Artistic
License.

d288 1
a288 1
PerlBuilder is an integrated development environment for Windows that
d382 1
a382 1
The following are Win32 multilanguage editor/IDEs that support Perl:
a397 4
=item ConTEXT

http://www.contexteditor.org/

d418 1
a418 1
from the MKS Toolkit ( http://www.mkssoftware.com/ ), or the Bourne shell of
d433 4
a436 4
research purposes), Cygwin is covered by the GNU General Public
License (but that shouldn't matter for Perl use).  The Cygwin, MKS,
and U/WIN all contain (in addition to the shells) a comprehensive set
of standard UNIX toolkit utilities.
d468 3
d522 2
a523 2
This is a Perl binding for the cross-platform wxWidgets toolkit
( http://www.wxwidgets.org ). It works under Unix, Win32 and Mac OS X,
d531 1
a531 1
These are Perl bindings for the Gtk toolkit ( http://www.gtk.org ). The
d550 1
a550 1
CamelBones ( http://camelbones.sourceforge.net ) is a Perl interface to
d748 1
a748 1
undef() and/or delete().
d1036 1
a1036 1
Revision: $Revision$
d1038 1
a1038 1
Date: $Date$
d1044 1
a1044 1
Copyright (c) 1997-2009 Tom Christiansen, Nathan Torkington, and
@


1.1.1.12
log
@Perl 5.12.2 from CPAN
@
text
@d34 1
a34 1
C<perldebug(1)> manpage, on an "empty" program, like this:
d45 1
a45 1
The C<psh> (Perl sh) is currently at version 1.8. The Perl Shell is a shell
d49 1
a49 1
control-flow statements and other things. You can get C<psh> at
d52 1
a52 1
C<Zoidberg> is a similar project and provides a shell written in perl,
d58 2
a59 2
The C<Shell.pm> module (distributed with Perl) makes Perl try commands
which aren't part of the Perl language as shell commands.  C<perlsh> from
d70 1
a70 1
that C<CPAN.pm> understands and can use to re-install every module:
d74 1
a74 1
Inside a Perl program, you can use the C<ExtUtils::Installed> module to
d77 1
a77 1
as "Perl" (although you can get those with C<Module::CoreList>).
d85 1
a85 1
can use C<File::Find::Rule>:
d97 1
a97 1
with C<File::Find> which is part of the standard library:
d120 1
a120 1
have any (in rare cases):
d125 1
a125 1
perl finds it:
d156 1
a156 1
If you'd like a graphical user interface and you have C<Tk>, you can use
d160 1
a160 1
Brocard's C<Devel::ebug> (which you can call with the C<-D> switch as C<-Debug>)
d185 1
a185 1
switch to C<dprofpp>:
d227 1
a227 1
The C<B::Xref> module can be used to generate cross-reference reports
d234 1
a234 1
C<Perltidy> is a Perl script which indents and reformats Perl scripts
d238 1
a238 1
http://perltidy.sourceforge.net .
d278 1
a278 1
If you're on Unix, you already have an IDE--Unix itself.  The Unix
a309 4
=item Notepad++

http://notepad-plus.sourceforge.net/

d329 3
a331 2
Padre is cross-platform IDE for Perl written in Perl using wxWidgets to provide
a native look and feel. It's open source under the Artistic License.
d367 1
a367 1
with plain text, such as NotePad or WordPad. Word processors, such as
d375 1
a375 1
If you are using MacOS, the same concerns apply. MacPerl (for Classic
d425 1
a425 1
Unix platforms you might be interested in trying it out, firstly because
d489 1
a489 1
of standard Unix toolkit utilities.
d518 1
d529 1
a529 2
=head2 Where can I get perl-mode or cperl-mode for emacs?
X<emacs>
d535 4
a543 2
For CPerlMode, see http://www.emacswiki.org/cgi-bin/wiki/CPerlMode

d737 4
a740 4
	{
	local $, = "\n";
	print @@big_array;
	}
d744 1
a744 1
	print join "\n", @@big_array;
d748 4
a751 4
	{
	local $" = "\n";
	print "@@big_array";
	}
d913 1
a913 1
Windows and Unix platforms.
d1081 1
a1081 1
The Unix tool C<make> uses this file to manage dependencies and actions
d1084 8
d1094 1
a1094 1
Copyright (c) 1997-2010 Tom Christiansen, Nathan Torkington, and
@


