head	1.2;
access;
symbols
	OPENBSD_6_2:1.2.0.2
	OPENBSD_6_2_BASE:1.2
	PERL_5_24_2:1.1.1.10
	OPENBSD_6_1:1.2.0.4
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.1.9.0.12
	OPENBSD_6_0_BASE:1.1.1.9
	OPENBSD_5_9:1.1.1.9.0.6
	OPENBSD_5_9_BASE:1.1.1.9
	OPENBSD_5_8:1.1.1.9.0.8
	OPENBSD_5_8_BASE:1.1.1.9
	PERL_5_20_2:1.1.1.9
	OPENBSD_5_7:1.1.1.9.0.2
	OPENBSD_5_7_BASE:1.1.1.9
	PERL_5_20_1:1.1.1.9
	OPENBSD_5_6:1.1.1.9.0.4
	OPENBSD_5_6_BASE:1.1.1.9
	PERL_5_18_2:1.1.1.9
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.8.0.6
	OPENBSD_5_5_BASE:1.1.1.8
	OPENBSD_5_4:1.1.1.8.0.2
	OPENBSD_5_4_BASE:1.1.1.8
	PERL_5_16_3:1.1.1.8
	OPENBSD_5_3:1.1.1.7.0.14
	OPENBSD_5_3_BASE:1.1.1.7
	OPENBSD_5_2:1.1.1.7.0.12
	OPENBSD_5_2_BASE:1.1.1.7
	OPENBSD_5_1_BASE:1.1.1.7
	OPENBSD_5_1:1.1.1.7.0.10
	OPENBSD_5_0:1.1.1.7.0.8
	OPENBSD_5_0_BASE:1.1.1.7
	OPENBSD_4_9:1.1.1.7.0.6
	OPENBSD_4_9_BASE:1.1.1.7
	PERL_5_12_2:1.1.1.7
	OPENBSD_4_8:1.1.1.7.0.4
	OPENBSD_4_8_BASE:1.1.1.7
	OPENBSD_4_7:1.1.1.7.0.2
	OPENBSD_4_7_BASE:1.1.1.7
	PERL_5_10_1:1.1.1.7
	OPENBSD_4_6:1.1.1.6.0.16
	OPENBSD_4_6_BASE:1.1.1.6
	OPENBSD_4_5:1.1.1.6.0.12
	OPENBSD_4_5_BASE:1.1.1.6
	PERL_5_10_0:1.1.1.6
	OPENBSD_4_4:1.1.1.6.0.10
	OPENBSD_4_4_BASE:1.1.1.6
	OPENBSD_4_3:1.1.1.6.0.8
	OPENBSD_4_3_BASE:1.1.1.6
	OPENBSD_4_2:1.1.1.6.0.6
	OPENBSD_4_2_BASE:1.1.1.6
	OPENBSD_4_1:1.1.1.6.0.4
	OPENBSD_4_1_BASE:1.1.1.6
	OPENBSD_4_0:1.1.1.6.0.2
	OPENBSD_4_0_BASE:1.1.1.6
	PERL_5_8_8:1.1.1.6
	OPENBSD_3_9:1.1.1.5.0.10
	OPENBSD_3_9_BASE:1.1.1.5
	OPENBSD_3_8:1.1.1.5.0.8
	OPENBSD_3_8_BASE:1.1.1.5
	OPENBSD_3_7:1.1.1.5.0.6
	OPENBSD_3_7_BASE:1.1.1.5
	PERL_5_8_6:1.1.1.5
	OPENBSD_3_6:1.1.1.5.0.4
	OPENBSD_3_6_BASE:1.1.1.5
	PERL_5_8_5:1.1.1.5
	PERL_5_8_3:1.1.1.5
	OPENBSD_3_5:1.1.1.5.0.2
	OPENBSD_3_5_BASE:1.1.1.5
	PERL_5_8_2:1.1.1.5
	OPENBSD_3_4:1.1.1.4.0.4
	OPENBSD_3_4_BASE:1.1.1.4
	OPENBSD_3_3:1.1.1.4.0.2
	OPENBSD_3_3_BASE:1.1.1.4
	PERL_5_8_0:1.1.1.4
	OPENBSD_3_2:1.1.1.3.0.6
	OPENBSD_3_2_BASE:1.1.1.3
	OPENBSD_3_1:1.1.1.3.0.4
	OPENBSD_3_1_BASE:1.1.1.3
	OPENBSD_3_0:1.1.1.3.0.2
	OPENBSD_3_0_BASE:1.1.1.3
	PERL_5_6_1:1.1.1.3
	OPENBSD_2_9:1.1.1.2.0.6
	OPENBSD_2_9_BASE:1.1.1.2
	OPENBSD_2_8:1.1.1.2.0.4
	OPENBSD_2_8_BASE:1.1.1.2
	OPENBSD_2_7:1.1.1.2.0.2
	OPENBSD_2_7_BASE:1.1.1.2
	PERL_5_6_0:1.1.1.2
	OPENBSD_2_6:1.1.1.1.0.2
	OPENBSD_2_6_BASE:1.1.1.1
	PERL_500503:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2017.02.05.00.32.19;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	99.04.29.22.40.58;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.29.22.40.58;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2000.04.06.16.10.29;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2001.05.24.18.24.46;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2002.10.27.22.15.06;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2003.12.03.02.44.23;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2006.03.28.18.49.23;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2009.10.12.18.10.40;	author millert;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2013.03.25.20.09.24;	author sthen;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2014.03.24.14.59.08;	author afresh1;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	2017.08.14.13.46.21;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@=head1 NAME

perlreftut - Mark's very short tutorial about references

=head1 DESCRIPTION

One of the most important new features in Perl 5 was the capability to
manage complicated data structures like multidimensional arrays and
nested hashes.  To enable these, Perl 5 introduced a feature called
I<references>, and using references is the key to managing complicated,
structured data in Perl.  Unfortunately, there's a lot of funny syntax
to learn, and the main manual page can be hard to follow.  The manual
is quite complete, and sometimes people find that a problem, because
it can be hard to tell what is important and what isn't.

Fortunately, you only need to know 10% of what's in the main page to get
90% of the benefit.  This page will show you that 10%.

=head1 Who Needs Complicated Data Structures?

One problem that comes up all the time is needing a hash whose values are
lists.  Perl has hashes, of course, but the values have to be scalars;
they can't be lists.

Why would you want a hash of lists?  Let's take a simple example: You
have a file of city and country names, like this:

	Chicago, USA
	Frankfurt, Germany
	Berlin, Germany
	Washington, USA
	Helsinki, Finland
	New York, USA

and you want to produce an output like this, with each country mentioned
once, and then an alphabetical list of the cities in that country:

	Finland: Helsinki.
	Germany: Berlin, Frankfurt.
	USA:  Chicago, New York, Washington.

The natural way to do this is to have a hash whose keys are country
names.  Associated with each country name key is a list of the cities in
that country.  Each time you read a line of input, split it into a country
and a city, look up the list of cities already known to be in that
country, and append the new city to the list.  When you're done reading
the input, iterate over the hash as usual, sorting each list of cities
before you print it out.

If hash values couldn't be lists, you lose.  You'd probably have to
combine all the cities into a single string somehow, and then when
time came to write the output, you'd have to break the string into a
list, sort the list, and turn it back into a string.  This is messy
and error-prone.  And it's frustrating, because Perl already has
perfectly good lists that would solve the problem if only you could
use them.

=head1 The Solution

By the time Perl 5 rolled around, we were already stuck with this
design: Hash values must be scalars.  The solution to this is
references.

A reference is a scalar value that I<refers to> an entire array or an
entire hash (or to just about anything else).  Names are one kind of
reference that you're already familiar with.  Think of the President
of the United States: a messy, inconvenient bag of blood and bones.
But to talk about him, or to represent him in a computer program, all
you need is the easy, convenient scalar string "Barack Obama".

References in Perl are like names for arrays and hashes.  They're
Perl's private, internal names, so you can be sure they're
unambiguous.  Unlike "Barack Obama", a reference only refers to one
thing, and you always know what it refers to.  If you have a reference
to an array, you can recover the entire array from it.  If you have a
reference to a hash, you can recover the entire hash.  But the
reference is still an easy, compact scalar value.

You can't have a hash whose values are arrays; hash values can only be
scalars.  We're stuck with that.  But a single reference can refer to
an entire array, and references are scalars, so you can have a hash of
references to arrays, and it'll act a lot like a hash of arrays, and
it'll be just as useful as a hash of arrays.

We'll come back to this city-country problem later, after we've seen
some syntax for managing references.


=head1 Syntax

There are just two ways to make a reference, and just two ways to use
it once you have it.

=head2 Making References

=head3 B<Make Rule 1>

If you put a C<\> in front of a variable, you get a
reference to that variable.

    $aref = \@@array;         # $aref now holds a reference to @@array
    $href = \%hash;          # $href now holds a reference to %hash
    $sref = \$scalar;        # $sref now holds a reference to $scalar

Once the reference is stored in a variable like $aref or $href, you
can copy it or store it just the same as any other scalar value:

    $xy = $aref;             # $xy now holds a reference to @@array
    $p[3] = $href;           # $p[3] now holds a reference to %hash
    $z = $p[3];              # $z now holds a reference to %hash


These examples show how to make references to variables with names.
Sometimes you want to make an array or a hash that doesn't have a
name.  This is analogous to the way you like to be able to use the
string C<"\n"> or the number 80 without having to store it in a named
variable first.

=head3 B<Make Rule 2>

C<[ ITEMS ]> makes a new, anonymous array, and returns a reference to
that array.  C<{ ITEMS }> makes a new, anonymous hash, and returns a
reference to that hash.

    $aref = [ 1, "foo", undef, 13 ];
    # $aref now holds a reference to an array

    $href = { APR => 4, AUG => 8 };
    # $href now holds a reference to a hash


The references you get from rule 2 are the same kind of
references that you get from rule 1:

	# This:
	$aref = [ 1, 2, 3 ];

	# Does the same as this:
	@@array = (1, 2, 3);
	$aref = \@@array;


The first line is an abbreviation for the following two lines, except
that it doesn't create the superfluous array variable C<@@array>.

If you write just C<[]>, you get a new, empty anonymous array.
If you write just C<{}>, you get a new, empty anonymous hash.


=head2 Using References

What can you do with a reference once you have it?  It's a scalar
value, and we've seen that you can store it as a scalar and get it back
again just like any scalar.  There are just two more ways to use it:

=head3 B<Use Rule 1>

You can always use an array reference, in curly braces, in place of
the name of an array.  For example, C<@@{$aref}> instead of C<@@array>.

Here are some examples of that:

Arrays:


	@@a		@@{$aref}		An array
	reverse @@a	reverse @@{$aref}	Reverse the array
	$a[3]		${$aref}[3]		An element of the array
	$a[3] = 17;	${$aref}[3] = 17	Assigning an element


On each line are two expressions that do the same thing.  The
left-hand versions operate on the array C<@@a>.  The right-hand
versions operate on the array that is referred to by C<$aref>.  Once
they find the array they're operating on, both versions do the same
things to the arrays.

Using a hash reference is I<exactly> the same:

	%h		%{$href}	      A hash
	keys %h		keys %{$href}	      Get the keys from the hash
	$h{'red'}	${$href}{'red'}	      An element of the hash
	$h{'red'} = 17	${$href}{'red'} = 17  Assigning an element

Whatever you want to do with a reference, B<Use Rule 1> tells you how
to do it.  You just write the Perl code that you would have written
for doing the same thing to a regular array or hash, and then replace
the array or hash name with C<{$reference}>.  "How do I loop over an
array when all I have is a reference?"  Well, to loop over an array, you
would write

        for my $element (@@array) {
          ...
        }

so replace the array name, C<@@array>, with the reference:

        for my $element (@@{$aref}) {
          ...
        }

"How do I print out the contents of a hash when all I have is a
reference?"  First write the code for printing out a hash:

        for my $key (keys %hash) {
          print "$key => $hash{$key}\n";
        }

And then replace the hash name with the reference:

        for my $key (keys %{$href}) {
          print "$key => ${$href}{$key}\n";
        }

=head3 B<Use Rule 2>

L<B<Use Rule 1>|/B<Use Rule 1>> is all you really need, because it tells
you how to do absolutely everything you ever need to do with references.
But the most common thing to do with an array or a hash is to extract a
single element, and the L<B<Use Rule 1>|/B<Use Rule 1>> notation is
cumbersome.  So there is an abbreviation.

C<${$aref}[3]> is too hard to read, so you can write C<< $aref->[3] >>
instead.

C<${$href}{red}> is too hard to read, so you can write
C<< $href->{red} >> instead.

If C<$aref> holds a reference to an array, then C<< $aref->[3] >> is
the fourth element of the array.  Don't confuse this with C<$aref[3]>,
which is the fourth element of a totally different array, one
deceptively named C<@@aref>.  C<$aref> and C<@@aref> are unrelated the
same way that C<$item> and C<@@item> are.

Similarly, C<< $href->{'red'} >> is part of the hash referred to by
the scalar variable C<$href>, perhaps even one with no name.
C<$href{'red'}> is part of the deceptively named C<%href> hash.  It's
easy to forget to leave out the C<< -> >>, and if you do, you'll get
bizarre results when your program gets array and hash elements out of
totally unexpected hashes and arrays that weren't the ones you wanted
to use.


=head2 An Example

Let's see a quick example of how all this is useful.

First, remember that C<[1, 2, 3]> makes an anonymous array containing
C<(1, 2, 3)>, and gives you a reference to that array.

Now think about

	@@a = ( [1, 2, 3],
               [4, 5, 6],
	       [7, 8, 9]
             );

C<@@a> is an array with three elements, and each one is a reference to
another array.

C<$a[1]> is one of these references.  It refers to an array, the array
containing C<(4, 5, 6)>, and because it is a reference to an array,
L<B<Use Rule 2>|/B<Use Rule 2>> says that we can write C<< $a[1]->[2] >>
to get the third element from that array.  C<< $a[1]->[2] >> is the 6.
Similarly, C<< $a[0]->[1] >> is the 2.  What we have here is like a
two-dimensional array; you can write C<< $a[ROW]->[COLUMN] >> to get or
set the element in any row and any column of the array.

The notation still looks a little cumbersome, so there's one more
abbreviation:

=head2 Arrow Rule

In between two B<subscripts>, the arrow is optional.

Instead of C<< $a[1]->[2] >>, we can write C<$a[1][2]>; it means the
same thing.  Instead of C<< $a[0]->[1] = 23 >>, we can write
C<$a[0][1] = 23>; it means the same thing.

Now it really looks like two-dimensional arrays!

You can see why the arrows are important.  Without them, we would have
had to write C<${$a[1]}[2]> instead of C<$a[1][2]>.  For
three-dimensional arrays, they let us write C<$x[2][3][5]> instead of
the unreadable C<${${$x[2]}[3]}[5]>.

=head1 Solution

Here's the answer to the problem I posed earlier, of reformatting a
file of city and country names.

    1   my %table;

    2   while (<>) {
    3     chomp;
    4     my ($city, $country) = split /, /;
    5     $table{$country} = [] unless exists $table{$country};
    6     push @@{$table{$country}}, $city;
    7   }

    8   for my $country (sort keys %table) {
    9     print "$country: ";
   10     my @@cities = @@{$table{$country}};
   11     print join ', ', sort @@cities;
   12     print ".\n";
   13	}


The program has two pieces: Lines 2-7 read the input and build a data
structure, and lines 8-13 analyze the data and print out the report.
We're going to have a hash, C<%table>, whose keys are country names,
and whose values are references to arrays of city names.  The data
structure will look like this:


           %table
        +-------+---+
        |       |   |   +-----------+--------+
        |Germany| *---->| Frankfurt | Berlin |
        |       |   |   +-----------+--------+
        +-------+---+
        |       |   |   +----------+
        |Finland| *---->| Helsinki |
        |       |   |   +----------+
        +-------+---+
        |       |   |   +---------+------------+----------+
        |  USA  | *---->| Chicago | Washington | New York |
        |       |   |   +---------+------------+----------+
        +-------+---+

We'll look at output first.  Supposing we already have this structure,
how do we print it out?

    8   for my $country (sort keys %table) {
    9     print "$country: ";
   10     my @@cities = @@{$table{$country}};
   11     print join ', ', sort @@cities;
   12     print ".\n";
   13	}

C<%table> is an ordinary hash, and we get a list of keys from it, sort
the keys, and loop over the keys as usual.  The only use of references
is in line 10.  C<$table{$country}> looks up the key C<$country> in the
hash and gets the value, which is a reference to an array of cities in
that country.  L<B<Use Rule 1>|/B<Use Rule 1>> says that we can recover
the array by saying C<@@{$table{$country}}>.  Line 10 is just like

	@@cities = @@array;

except that the name C<array> has been replaced by the reference
C<{$table{$country}}>.  The C<@@> tells Perl to get the entire array.
Having gotten the list of cities, we sort it, join it, and print it
out as usual.

Lines 2-7 are responsible for building the structure in the first
place.  Here they are again:

    2   while (<>) {
    3     chomp;
    4     my ($city, $country) = split /, /;
    5     $table{$country} = [] unless exists $table{$country};
    6     push @@{$table{$country}}, $city;
    7   }

Lines 2-4 acquire a city and country name.  Line 5 looks to see if the
country is already present as a key in the hash.  If it's not, the
program uses the C<[]> notation (L<B<Make Rule 2>|/B<Make Rule 2>>) to
manufacture a new, empty anonymous array of cities, and installs a
reference to it into the hash under the appropriate key.

Line 6 installs the city name into the appropriate array.
C<$table{$country}> now holds a reference to the array of cities seen
in that country so far.  Line 6 is exactly like

	push @@array, $city;

except that the name C<array> has been replaced by the reference
C<{$table{$country}}>.  The L<C<push>|perlfunc/push ARRAY,LIST> adds a
city name to the end of the referred-to array.

There's one fine point I skipped.  Line 5 is unnecessary, and we can
get rid of it.

    2   while (<>) {
    3     chomp;
    4     my ($city, $country) = split /, /;
    5   ####  $table{$country} = [] unless exists $table{$country};
    6     push @@{$table{$country}}, $city;
    7   }

If there's already an entry in C<%table> for the current C<$country>,
then nothing is different.  Line 6 will locate the value in
C<$table{$country}>, which is a reference to an array, and push C<$city>
into the array.  But what does it do when C<$country> holds a key, say
C<Greece>, that is not yet in C<%table>?

This is Perl, so it does the exact right thing.  It sees that you want
to push C<Athens> onto an array that doesn't exist, so it helpfully
makes a new, empty, anonymous array for you, installs it into
C<%table>, and then pushes C<Athens> onto it.  This is called
I<autovivification>--bringing things to life automatically.  Perl saw
that the key wasn't in the hash, so it created a new hash entry
automatically. Perl saw that you wanted to use the hash value as an
array, so it created a new empty array and installed a reference to it
in the hash automatically.  And as usual, Perl made the array one
element longer to hold the new city name.

=head1 The Rest

I promised to give you 90% of the benefit with 10% of the details, and
that means I left out 90% of the details.  Now that you have an
overview of the important parts, it should be easier to read the
L<perlref> manual page, which discusses 100% of the details.

Some of the highlights of L<perlref>:

=over 4

=item *

You can make references to anything, including scalars, functions, and
other references.

=item *

In L<B<Use Rule 1>|/B<Use Rule 1>>, you can omit the curly brackets
whenever the thing inside them is an atomic scalar variable like
C<$aref>.  For example, C<@@$aref> is the same as C<@@{$aref}>, and
C<$$aref[1]> is the same as C<${$aref}[1]>.  If you're just starting
out, you may want to adopt the habit of always including the curly
brackets.

=item *

This doesn't copy the underlying array:

        $aref2 = $aref1;

You get two references to the same array.  If you modify
C<< $aref1->[23] >> and then look at
C<< $aref2->[23] >> you'll see the change.

To copy the array, use

        $aref2 = [@@{$aref1}];

This uses C<[...]> notation to create a new anonymous array, and
C<$aref2> is assigned a reference to the new array.  The new array is
initialized with the contents of the array referred to by C<$aref1>.

Similarly, to copy an anonymous hash, you can use

        $href2 = {%{$href1}};

=item *

To see if a variable contains a reference, use the
L<C<ref>|perlfunc/ref EXPR> function.  It returns true if its argument
is a reference.  Actually it's a little better than that: It returns
C<HASH> for hash references and C<ARRAY> for array references.

=item *

If you try to use a reference like a string, you get strings like

	ARRAY(0x80f5dec)   or    HASH(0x826afc0)

If you ever see a string that looks like this, you'll know you
printed out a reference by mistake.

A side effect of this representation is that you can use
L<C<eq>|perlop/Equality Operators> to see if two references refer to the
same thing.  (But you should usually use
L<C<==>|perlop/Equality Operators> instead because it's much faster.)

=item *

You can use a string as if it were a reference.  If you use the string
C<"foo"> as an array reference, it's taken to be a reference to the
array C<@@foo>.  This is called a I<symbolic reference>.  The declaration
L<C<use strict 'refs'>|strict> disables this feature, which can cause
all sorts of trouble if you use it by accident.

=back

You might prefer to go on to L<perllol> instead of L<perlref>; it
discusses lists of lists and multidimensional arrays in detail.  After
that, you should move on to L<perldsc>; it's a Data Structure Cookbook
that shows recipes for using and printing out arrays of hashes, hashes
of arrays, and other kinds of data.

=head1 Summary

Everyone needs compound data structures, and in Perl the way you get
them is with references.  There are four important rules for managing
references: Two for making references and two for using them.  Once
you know these rules you can do most of the important things you need
to do with references.

=head1 Credits

Author: Mark Jason Dominus, Plover Systems (C<mjd-perl-ref+@@plover.com>)

This article originally appeared in I<The Perl Journal>
( http://www.tpj.com/ ) volume 3, #2.  Reprinted with permission.

The original title was I<Understand References Today>.

=head2 Distribution Conditions

Copyright 1998 The Perl Journal.

This documentation is free; you can redistribute it and/or modify it
under the same terms as Perl itself.

Irrespective of its distribution, all code examples in these files are
hereby placed into the public domain.  You are permitted and
encouraged to use this code in your own programs for fun or for profit
as you see fit.  A simple comment in the code giving credit would be
courteous but is not required.




=cut
@


1.1
log
@Initial revision
@
text
@a0 1

d10 1
a10 1
`references', and using references is the key to managing complicated,
d21 3
a23 3
One problem that came up all the time in Perl 4 was how to represent a
hash whose values were lists.  Perl 4 had hashes, of course, but the
values had to be scalars; they couldn't be lists.  
d50 1
a50 2
If hash values can't be lists, you lose.  In Perl 4, hash values can't
be lists; they can only be strings.  You lose.  You'd probably have to
d66 4
a69 4
reference that you're already familiar with.  Think of the President:
a messy, inconvenient bag of blood and bones.  But to talk about him,
or to represent him in a computer program, all you need is the easy,
convenient scalar string "Bill Clinton".
d73 1
a73 1
unambiguous.  Unlike "Bill Clinton", a reference only refers to one
d96 1
a96 1
B<Make Rule 1>
d103 1
d119 1
a119 1
B<Make Rule 2>
d122 1
a122 1
that array. C<{ ITEMS }> makes a new, anonymous hash. and returns a
d125 1
a125 1
    $aref = [ 1, "foo", undef, 13 ];  
d128 1
a128 1
    $href = { APR => 4, AUG => 8 };   
d146 3
d156 1
a156 1
B<Use Rule 1>
d158 2
a159 3
If C<$aref> contains a reference to an array, then you
can put C<{$aref}> anywhere you would normally put the name of an
array.  For example, C<@@{$aref}> instead of C<@@array>.
d173 4
a176 4
left-hand versions operate on the array C<@@a>, and the right-hand
versions operate on the array that is referred to by C<$aref>, but
once they find the array they're operating on, they do the same things
to the arrays.
d185 29
d215 1
a215 1
B<Use Rule 2>
d217 7
a223 1
C<${$aref}[3]> is too hard to read, so you can write C<$aref-E<gt>[3]>
d227 1
a227 5
C<$href-E<gt>{red}> instead.

Most often, when you have an array or a hash, you want to get or set a
single element from it.  C<${$aref}[3]> and C<${$href}{'red'}> have
too much punctuation, and Perl lets you abbreviate.
d229 1
a229 1
If C<$aref> holds a reference to an array, then C<$aref-E<gt>[3]> is
d235 1
a235 1
Similarly, C<$href-E<gt>{'red'}> is part of the hash referred to by
d238 1
a238 1
easy to forget to leave out the C<-E<gt>>, and if you do, you'll get
d244 1
a244 1
=head1 An Example
d258 1
a258 1
@@a is an array with three elements, and each one is a reference to
d263 5
a267 5
B<USE RULE 2> says that we can write C<$a[1]-E<gt>[2]> to get the
third element from that array.  C<$a[1]-E<gt>[2]> is the 6.
Similarly, C<$a[0]-E<gt>[1]> is the 2.  What we have here is like a
two-dimensional array; you can write C<$a[ROW]-E<gt>[COLUMN]> to get
or set the element in any row and any column of the array.
d270 1
a270 1
abbreviation:  
d272 1
a272 1
=head1 Arrow Rule
d276 3
a278 3
Instead of C<$a[1]-E<gt>[2]>, we can write C<$a[1][2]>; it means the
same thing.  Instead of C<$a[0]-E<gt>[1]>, we can write C<$a[0][1]>;
it means the same thing.
a286 1

d292 1
a292 24
    1   while (<>) {
    2     chomp;
    3     my ($city, $country) = split /, /;
    4     push @@{$table{$country}}, $city;
    5   }
    6
    7   foreach $country (sort keys %table) {
    8     print "$country: ";
    9     my @@cities = @@{$table{$country}};
   10     print join ', ', sort @@cities;
   11     print ".\n";
   12	}


The program has two pieces:  Lines 1--5 read the input and build a
data structure, and lines 7--12 analyze the data and print out the
report.  

In the first part, line 4 is the important one.  We're going to have a
hash, C<%table>, whose keys are country names, and whose values are
(references to) arrays of city names.  After acquiring a city and
country name, the program looks up C<$table{$country}>, which holds (a
reference to) the list of cities seen in that country so far.  Line 4 is
totally analogous to
d294 53
a346 10
	push @@array, $city;

except that the name C<array> has been replaced by the reference
C<{$table{$country}}>.  The C<push> adds a city name to the end of the
referred-to array.

In the second part, line 9 is the important one.  Again,
C<$table{$country}> is (a reference to) the list of cities in the country, so
we can recover the original list, and copy it into the array C<@@cities>,
by using C<@@{$table{$country}}>.  Line 9 is totally analogous to
d352 2
d355 2
a356 2
The rest of the program is just familiar uses of C<chomp>, C<split>, C<sort>,
C<print>, and doesn't involve references at all.
d358 16
a373 6
There's one fine point I skipped.  Suppose the program has just read
the first line in its input that happens to mention Greece.
Control is at line 4, C<$country> is C<'Greece'>, and C<$city> is
C<'Athens'>.  Since this is the first city in Greece,
C<$table{$country}> is undefined---in fact there isn't an C<'Greece'> key
in C<%table> at all.  What does line 4 do here?
d375 1
a375 1
 4	push @@{$table{$country}}, $city;
d377 19
d399 8
a406 3
makes a new, empty, anonymous array for you, installs it in the table,
and then pushes C<Athens> onto it.  This is called `autovivification'.

d426 18
a443 12
In B<USE RULE 1>, you can omit the curly brackets whenever the thing
inside them is an atomic scalar variable like C<$aref>.  For example,
C<@@$aref> is the same as C<@@{$aref}>, and C<$$aref[1]> is the same as
C<${$aref}[1]>.  If you're just starting out, you may want to adopt
the habit of always including the curly brackets.

=item * 

To see if a variable contains a reference, use the `ref' function.
It returns true if its argument is a reference.  Actually it's a
little better than that:  It returns HASH for hash references and
ARRAY for array references.
d445 18
a462 1
=item * 
d471 4
a474 3
A side effect of this representation is that you can use C<eq> to see
if two references refer to the same thing.  (But you should usually use
C<==> instead because it's much faster.)
d480 3
a482 1
array C<@@foo>.  This is called a I<soft reference> or I<symbolic reference>.
d502 1
a502 1
Author: Mark-Jason Dominus, Plover Systems (C<mjd-perl-ref@@plover.com>)
d505 1
a505 1
(http://tpj.com) volume 3, #2.  Reprinted with permission.  
d513 2
a514 6
When included as part of the Standard Version of Perl, or as part of
its complete documentation whether printed or otherwise, this work may
be distributed only under the terms of Perl's Artistic License.  Any
distribution of this file or derivatives thereof outside of that
package require that special arrangements be made with copyright
holder.
@


1.1.1.1
log
@perl5.005_03
@
text
@@


1.1.1.2
log
@virgin perl 5.6.0
@
text
@d187 1
a187 1
C<${$aref}[3]> is too hard to read, so you can write C<< $aref->[3] >>
d191 1
a191 1
C<< $href->{red} >> instead.
d197 1
a197 1
If C<$aref> holds a reference to an array, then C<< $aref->[3] >> is
d203 1
a203 1
Similarly, C<< $href->{'red'} >> is part of the hash referred to by
d206 1
a206 1
easy to forget to leave out the C<< -> >>, and if you do, you'll get
d231 4
a234 4
B<USE RULE 2> says that we can write C<< $a[1]->[2] >> to get the
third element from that array.  C<< $a[1]->[2] >> is the 6.
Similarly, C<< $a[0]->[1] >> is the 2.  What we have here is like a
two-dimensional array; you can write C<< $a[ROW]->[COLUMN] >> to get
d244 2
a245 2
Instead of C<< $a[1]->[2] >>, we can write C<$a[1][2]>; it means the
same thing.  Instead of C<< $a[0]->[1] >>, we can write C<$a[0][1]>;
@


1.1.1.3
log
@stock perl 5.6.1
@
text
@d389 1
a389 1
Author: Mark-Jason Dominus, Plover Systems (C<mjd-perl-ref+@@plover.com>)
@


1.1.1.4
log
@stock perl 5.8.0 from CPAN
@
text
@d68 4
a71 4
reference that you're already familiar with.  Think of the President
of the United States: a messy, inconvenient bag of blood and bones.
But to talk about him, or to represent him in a computer program, all
you need is the easy, convenient scalar string "George Bush".
d75 1
a75 1
unambiguous.  Unlike "George Bush", a reference only refers to one
d392 1
a392 1
( http://www.tpj.com/ ) volume 3, #2.  Reprinted with permission.  
@


1.1.1.5
log
@perl 5.8.2 from CPAN
@
text
@d98 1
a98 1
=head3 B<Make Rule 1>
d123 1
a123 1
that array.  C<{ ITEMS }> makes a new, anonymous hash, and returns a
a146 3
If you write just C<[]>, you get a new, empty anonymous array.
If you write just C<{}>, you get a new, empty anonymous hash.

d154 1
a154 1
=head3 B<Use Rule 1>
d156 3
a158 2
You can always use an array reference, in curly braces, in place of
the name of an array.  For example, C<@@{$aref}> instead of C<@@array>.
d172 4
a175 4
left-hand versions operate on the array C<@@a>.  The right-hand
versions operate on the array that is referred to by C<$aref>.  Once
they find the array they're operating on, both versions do the same
things to the arrays.
d184 2
a185 37
Whatever you want to do with a reference, B<Use Rule 1> tells you how
to do it.  You just write the Perl code that you would have written
for doing the same thing to a regular array or hash, and then replace
the array or hash name with C<{$reference}>.  "How do I loop over an
array when all I have is a reference?"  Well, to loop over an array, you
would write

        for my $element (@@array) {
           ...
        }

so replace the array name, C<@@array>, with the reference:

        for my $element (@@{$aref}) {
           ...
        }

"How do I print out the contents of a hash when all I have is a
reference?"  First write the code for printing out a hash:

        for my $key (keys %hash) {
          print "$key => $hash{$key}\n";
        }

And then replace the hash name with the reference:

        for my $key (keys %{$href}) {
          print "$key => ${$href}{$key}\n";
        }

=head3 B<Use Rule 2>

B<Use Rule 1> is all you really need, because it tells you how to to
absolutely everything you ever need to do with references.  But the
most common thing to do with an array or a hash is to extract a single
element, and the B<Use Rule 1> notation is cumbersome.  So there is an
abbreviation.
d193 4
d212 1
a212 1
=head2 An Example
d231 1
a231 1
B<Use Rule 2> says that we can write C<< $a[1]->[2] >> to get the
d240 1
a240 1
=head2 Arrow Rule
d245 2
a246 2
same thing.  Instead of C<< $a[0]->[1] = 23 >>, we can write
C<$a[0][1] = 23>; it means the same thing.
d255 1
d261 30
a290 1
    1   my %table;
d292 4
a295 55
    2   while (<>) {
    3    chomp;
    4     my ($city, $country) = split /, /;
    5     $table{$country} = [] unless exists $table{$country};
    6     push @@{$table{$country}}, $city;
    7   }

    8   foreach $country (sort keys %table) {
    9     print "$country: ";
   10     my @@cities = @@{$table{$country}};
   11     print join ', ', sort @@cities;
   12     print ".\n";
   13	}


The program has two pieces: Lines 2--7 read the input and build a data
structure, and lines 8-13 analyze the data and print out the report.
We're going to have a hash, C<%table>, whose keys are country names,
and whose values are references to arrays of city names.  The data
structure will look like this:


           %table
        +-------+---+   
        |       |   |   +-----------+--------+
        |Germany| *---->| Frankfurt | Berlin |
        |       |   |   +-----------+--------+
        +-------+---+
        |       |   |   +----------+
        |Finland| *---->| Helsinki |
        |       |   |   +----------+
        +-------+---+
        |       |   |   +---------+------------+----------+
        |  USA  | *---->| Chicago | Washington | New York |
        |       |   |   +---------+------------+----------+
        +-------+---+

We'll look at output first.  Supposing we already have this structure,
how do we print it out?

    8   foreach $country (sort keys %table) {
    9     print "$country: ";
   10     my @@cities = @@{$table{$country}};
   11     print join ', ', sort @@cities;
   12     print ".\n";
   13	}

C<%table> is an
ordinary hash, and we get a list of keys from it, sort the keys, and
loop over the keys as usual.  The only use of references is in line 10.
C<$table{$country}> looks up the key C<$country> in the hash
and gets the value, which is a reference to an array of cities in that country.
B<Use Rule 1> says that
we can recover the array by saying
C<@@{$table{$country}}>.  Line 10 is just like
a300 2
Having gotten the list of cities, we sort it, join it, and print it
out as usual.
d302 2
a303 2
Lines 2-7 are responsible for building the structure in the first
place.  Here they are again:
d305 6
a310 16
    2   while (<>) {
    3    chomp;
    4     my ($city, $country) = split /, /;
    5     $table{$country} = [] unless exists $table{$country};
    6     push @@{$table{$country}}, $city;
    7   }

Lines 2-4 acquire a city and country name.  Line 5 looks to see if the
country is already present as a key in the hash.  If it's not, the
program uses the C<[]> notation (B<Make Rule 2>) to manufacture a new,
empty anonymous array of cities, and installs a reference to it into
the hash under the appropriate key.

Line 6 installs the city name into the appropriate array.
C<$table{$country}> now holds a reference to the array of cities seen
in that country so far.  Line 6 is exactly like
d312 1
a312 1
	push @@array, $city;
a313 20
except that the name C<array> has been replaced by the reference
C<{$table{$country}}>.  The C<push> adds a city name to the end of the
referred-to array.

There's one fine point I skipped.  Line 5 is unnecessary, and we can
get rid of it.  

    2   while (<>) {
    3    chomp;
    4     my ($city, $country) = split /, /;
    5   ####  $table{$country} = [] unless exists $table{$country};
    6     push @@{$table{$country}}, $city;
    7   }

If there's already an entry in C<%table> for the current C<$country>,
then nothing is different.  Line 6 will locate the value in
C<$table{$country}>, which is a reference to an array, and push
C<$city> into the array.  But
what does it do when
C<$country> holds a key, say C<Greece>, that is not yet in C<%table>?
d317 3
a319 8
makes a new, empty, anonymous array for you, installs it into
C<%table>, and then pushes C<Athens> onto it.  This is called
`autovivification'--bringing things to life automatically.  Perl saw
that they key wasn't in the hash, so it created a new hash entry
automatically. Perl saw that you wanted to use the hash value as an
array, so it created a new empty array and installed a reference to it
in the hash automatically.  And as usual, Perl made the array one
element longer to hold the new city name.
d339 1
a339 1
In B<Use Rule 1>, you can omit the curly brackets whenever the thing
a344 22
=item *

This doesn't copy the underlying array:

        $aref2 = $aref1;        

You get two references to the same array.  If you modify 
C<< $aref1->[23] >> and then look at
C<< $aref2->[23] >> you'll see the change.   

To copy the array, use

        $aref2 = [@@{$aref1}];

This uses C<[...]> notation to create a new anonymous array, and
C<$aref2> is assigned a reference to the new array.  The new array is
initialized with the contents of the array referred to by C<$aref1>.

Similarly, to copy an anonymous hash, you can use

        $href2 = {%{$href1}};

d347 4
a350 4
To see if a variable contains a reference, use the C<ref> function.  It
returns true if its argument is a reference.  Actually it's a little
better than that: It returns C<HASH> for hash references and C<ARRAY>
for array references.
d369 1
a369 3
array C<@@foo>.  This is called a I<soft reference> or I<symbolic
reference>.  The declaration C<use strict 'refs'> disables this
feature, which can cause all sorts of trouble if you use it by accident.
d389 1
a389 1
Author: Mark Jason Dominus, Plover Systems (C<mjd-perl-ref+@@plover.com>)
d400 6
a405 2
This documentation is free; you can redistribute it and/or modify it
under the same terms as Perl itself.
@


1.1.1.6
log
@perl 5.8.8 import
@
text
@d1 1
d24 1
a24 1
values had to be scalars; they couldn't be lists.
a104 1
    $sref = \$scalar;        # $sref now holds a reference to $scalar
d126 1
a126 1
    $aref = [ 1, "foo", undef, 13 ];
d129 1
a129 1
    $href = { APR => 4, AUG => 8 };
d218 1
a218 1
B<Use Rule 1> is all you really need, because it tells you how to do
d271 1
a271 1
abbreviation:
d318 1
a318 1
        +-------+---+
d385 1
a385 1
get rid of it.
d440 1
a440 1
        $aref2 = $aref1;
d442 1
a442 1
You get two references to the same array.  If you modify
d444 1
a444 1
C<< $aref2->[23] >> you'll see the change.
d458 1
a458 1
=item *
d465 1
a465 1
=item *
d507 1
a507 1
( http://www.tpj.com/ ) volume 3, #2.  Reprinted with permission.
@


1.1.1.7
log
@import perl 5.10.1
@
text
@d70 1
a70 1
you need is the easy, convenient scalar string "Barack Obama".
d74 1
a74 1
unambiguous.  Unlike "Barack Obama", a reference only refers to one
@


1.1.1.8
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d10 1
a10 1
'references', and using references is the key to managing complicated,
d405 1
a405 1
'autovivification'--bringing things to life automatically.  Perl saw
@


1.1.1.9
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d21 3
a23 3
One problem that comes up all the time is needing a hash whose values are
lists.  Perl has hashes, of course, but the values have to be scalars;
they can't be lists.
d50 2
a51 1
If hash values couldn't be lists, you lose.  You'd probably have to
d406 1
a406 1
that the key wasn't in the hash, so it created a new hash entry
@


1.1.1.10
log
@Import perl-5.24.2
@
text
@d10 1
a10 1
I<references>, and using references is the key to managing complicated,
d119 1
a119 1
=head3 B<Make Rule 2>
d193 1
a193 1
          ...
d199 1
a199 1
          ...
d217 5
a221 5
L<B<Use Rule 1>|/B<Use Rule 1>> is all you really need, because it tells
you how to do absolutely everything you ever need to do with references.
But the most common thing to do with an array or a hash is to extract a
single element, and the L<B<Use Rule 1>|/B<Use Rule 1>> notation is
cumbersome.  So there is an abbreviation.
d258 1
a258 1
C<@@a> is an array with three elements, and each one is a reference to
d263 2
a264 2
L<B<Use Rule 2>|/B<Use Rule 2>> says that we can write C<< $a[1]->[2] >>
to get the third element from that array.  C<< $a[1]->[2] >> is the 6.
d266 2
a267 2
two-dimensional array; you can write C<< $a[ROW]->[COLUMN] >> to get or
set the element in any row and any column of the array.
d295 1
a295 1
    3     chomp;
d301 1
a301 1
    8   for my $country (sort keys %table) {
d309 1
a309 1
The program has two pieces: Lines 2-7 read the input and build a data
d334 1
a334 1
    8   for my $country (sort keys %table) {
d341 8
a348 6
C<%table> is an ordinary hash, and we get a list of keys from it, sort
the keys, and loop over the keys as usual.  The only use of references
is in line 10.  C<$table{$country}> looks up the key C<$country> in the
hash and gets the value, which is a reference to an array of cities in
that country.  L<B<Use Rule 1>|/B<Use Rule 1>> says that we can recover
the array by saying C<@@{$table{$country}}>.  Line 10 is just like
d361 1
a361 1
    3     chomp;
d369 3
a371 3
program uses the C<[]> notation (L<B<Make Rule 2>|/B<Make Rule 2>>) to
manufacture a new, empty anonymous array of cities, and installs a
reference to it into the hash under the appropriate key.
d380 2
a381 2
C<{$table{$country}}>.  The L<C<push>|perlfunc/push ARRAY,LIST> adds a
city name to the end of the referred-to array.
d387 1
a387 1
    3     chomp;
d395 4
a398 3
C<$table{$country}>, which is a reference to an array, and push C<$city>
into the array.  But what does it do when C<$country> holds a key, say
C<Greece>, that is not yet in C<%table>?
d404 1
a404 1
I<autovivification>--bringing things to life automatically.  Perl saw
d429 5
a433 6
In L<B<Use Rule 1>|/B<Use Rule 1>>, you can omit the curly brackets
whenever the thing inside them is an atomic scalar variable like
C<$aref>.  For example, C<@@$aref> is the same as C<@@{$aref}>, and
C<$$aref[1]> is the same as C<${$aref}[1]>.  If you're just starting
out, you may want to adopt the habit of always including the curly
brackets.
d459 4
a462 4
To see if a variable contains a reference, use the
L<C<ref>|perlfunc/ref EXPR> function.  It returns true if its argument
is a reference.  Actually it's a little better than that: It returns
C<HASH> for hash references and C<ARRAY> for array references.
d473 3
a475 4
A side effect of this representation is that you can use
L<C<eq>|perlop/Equality Operators> to see if two references refer to the
same thing.  (But you should usually use
L<C<==>|perlop/Equality Operators> instead because it's much faster.)
d481 3
a483 3
array C<@@foo>.  This is called a I<symbolic reference>.  The declaration
L<C<use strict 'refs'>|strict> disables this feature, which can cause
all sorts of trouble if you use it by accident.
@


