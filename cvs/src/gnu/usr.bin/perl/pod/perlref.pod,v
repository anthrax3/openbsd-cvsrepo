head	1.12;
access;
symbols
	OPENBSD_6_2:1.12.0.6
	OPENBSD_6_2_BASE:1.12
	PERL_5_24_2:1.1.1.11
	OPENBSD_6_1:1.12.0.4
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.11.0.8
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.11.0.2
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.11.0.4
	OPENBSD_5_8_BASE:1.11
	PERL_5_20_2:1.1.1.10
	OPENBSD_5_7:1.10.0.2
	OPENBSD_5_7_BASE:1.10
	PERL_5_20_1:1.1.1.9
	OPENBSD_5_6:1.9.0.4
	OPENBSD_5_6_BASE:1.9
	PERL_5_18_2:1.1.1.8
	PERL:1.1.1
	OPENBSD_5_5:1.8.0.6
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.2
	OPENBSD_5_4_BASE:1.8
	PERL_5_16_3:1.1.1.7
	OPENBSD_5_3:1.7.0.18
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.16
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.14
	OPENBSD_5_0:1.7.0.12
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.10
	OPENBSD_4_9_BASE:1.7
	PERL_5_12_2:1.1.1.6
	OPENBSD_4_8:1.7.0.8
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.4
	OPENBSD_4_7_BASE:1.7
	PERL_5_10_1:1.1.1.6
	OPENBSD_4_6:1.7.0.6
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.2
	OPENBSD_4_5_BASE:1.7
	PERL_5_10_0:1.1.1.6
	OPENBSD_4_4:1.6.0.10
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.8
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.6
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.4
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.2
	OPENBSD_4_0_BASE:1.6
	PERL_5_8_8:1.1.1.5
	OPENBSD_3_9:1.5.0.14
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.12
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.10
	OPENBSD_3_7_BASE:1.5
	PERL_5_8_6:1.1.1.4
	OPENBSD_3_6:1.5.0.8
	OPENBSD_3_6_BASE:1.5
	PERL_5_8_5:1.1.1.4
	PERL_5_8_3:1.1.1.4
	OPENBSD_3_5:1.5.0.6
	OPENBSD_3_5_BASE:1.5
	PERL_5_8_2:1.1.1.4
	OPENBSD_3_4:1.5.0.4
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.5.0.2
	OPENBSD_3_3_BASE:1.5
	PERL_5_8_0:1.1.1.4
	OPENBSD_3_2:1.4.0.12
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.10
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.8
	OPENBSD_3_0_BASE:1.4
	PERL_5_6_1:1.1.1.3
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	PERL_5_6_0:1.1.1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	PERL_500503:1.1.1.2
	CPAN:1.1.1
	OPENBSD_2_5:1.2.0.6
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.4
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	perl5003:1.1.1.1
	lwall:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.12
date	2017.02.05.00.32.19;	author afresh1;	state Exp;
branches;
next	1.11;
commitid	cxJ08BvJA9Pt2PTM;

1.11
date	2015.04.25.19.14.48;	author afresh1;	state Exp;
branches;
next	1.10;
commitid	XRK22kO4se3v2i2I;

1.10
date	2014.11.17.20.57.07;	author afresh1;	state Exp;
branches;
next	1.9;
commitid	QP75iYx42Uo7mMxO;

1.9
date	2014.03.24.15.05.33;	author afresh1;	state Exp;
branches;
next	1.8;

1.8
date	2013.03.25.20.40.59;	author sthen;	state Exp;
branches;
next	1.7;

1.7
date	2008.09.29.17.36.17;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2006.03.28.19.23.11;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2002.10.27.22.25.34;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.06.17.07.37;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	99.04.29.22.52.18;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.11.30.07.59.25;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.08.19.10.13.04;	author downsj;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.08.19.10.13.04;	author downsj;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.04.29.22.40.58;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2000.04.06.16.10.29;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2002.10.27.22.15.06;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2006.03.28.18.49.23;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2008.09.29.17.18.53;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2013.03.25.20.09.24;	author sthen;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2014.03.24.14.59.08;	author afresh1;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2014.11.17.20.53.15;	author afresh1;	state Exp;
branches;
next	1.1.1.10;
commitid	B31cAbBIXiCqnL97;

1.1.1.10
date	2015.04.25.19.10.44;	author afresh1;	state Exp;
branches;
next	1.1.1.11;
commitid	Wpcs5S8qILgEZC7F;

1.1.1.11
date	2017.08.14.13.46.21;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.12
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@=head1 NAME
X<reference> X<pointer> X<data structure> X<structure> X<struct>

perlref - Perl references and nested data structures

=head1 NOTE

This is complete documentation about all aspects of references.
For a shorter, tutorial introduction to just the essential features,
see L<perlreftut>.

=head1 DESCRIPTION

Before release 5 of Perl it was difficult to represent complex data
structures, because all references had to be symbolic--and even then
it was difficult to refer to a variable instead of a symbol table entry.
Perl now not only makes it easier to use symbolic references to variables,
but also lets you have "hard" references to any piece of data or code.
Any scalar may hold a hard reference.  Because arrays and hashes contain
scalars, you can now easily build arrays of arrays, arrays of hashes,
hashes of arrays, arrays of hashes of functions, and so on.

Hard references are smart--they keep track of reference counts for you,
automatically freeing the thing referred to when its reference count goes
to zero.  (Reference counts for values in self-referential or
cyclic data structures may not go to zero without a little help; see
L</"Circular References"> for a detailed explanation.)
If that thing happens to be an object, the object is destructed.  See
L<perlobj> for more about objects.  (In a sense, everything in Perl is an
object, but we usually reserve the word for references to objects that
have been officially "blessed" into a class package.)

Symbolic references are names of variables or other objects, just as a
symbolic link in a Unix filesystem contains merely the name of a file.
The C<*glob> notation is something of a symbolic reference.  (Symbolic
references are sometimes called "soft references", but please don't call
them that; references are confusing enough without useless synonyms.)
X<reference, symbolic> X<reference, soft>
X<symbolic reference> X<soft reference>

In contrast, hard references are more like hard links in a Unix file
system: They are used to access an underlying object without concern for
what its (other) name is.  When the word "reference" is used without an
adjective, as in the following paragraph, it is usually talking about a
hard reference.
X<reference, hard> X<hard reference>

References are easy to use in Perl.  There is just one overriding
principle: in general, Perl does no implicit referencing or dereferencing.
When a scalar is holding a reference, it always behaves as a simple scalar.
It doesn't magically start being an array or hash or subroutine; you have to
tell it explicitly to do so, by dereferencing it.

=head2 Making References
X<reference, creation> X<referencing>

References can be created in several ways.

=over 4

=item 1.
X<\> X<backslash>

By using the backslash operator on a variable, subroutine, or value.
(This works much like the & (address-of) operator in C.)
This typically creates I<another> reference to a variable, because
there's already a reference to the variable in the symbol table.  But
the symbol table reference might go away, and you'll still have the
reference that the backslash returned.  Here are some examples:

    $scalarref = \$foo;
    $arrayref  = \@@ARGV;
    $hashref   = \%ENV;
    $coderef   = \&handler;
    $globref   = \*foo;

It isn't possible to create a true reference to an IO handle (filehandle
or dirhandle) using the backslash operator.  The most you can get is a
reference to a typeglob, which is actually a complete symbol table entry.
But see the explanation of the C<*foo{THING}> syntax below.  However,
you can still use type globs and globrefs as though they were IO handles.

=item 2.
X<array, anonymous> X<[> X<[]> X<square bracket>
X<bracket, square> X<arrayref> X<array reference> X<reference, array>

A reference to an anonymous array can be created using square
brackets:

    $arrayref = [1, 2, ['a', 'b', 'c']];

Here we've created a reference to an anonymous array of three elements
whose final element is itself a reference to another anonymous array of three
elements.  (The multidimensional syntax described later can be used to
access this.  For example, after the above, C<< $arrayref->[2][1] >> would have
the value "b".)

Taking a reference to an enumerated list is not the same
as using square brackets--instead it's the same as creating
a list of references!

    @@list = (\$a, \@@b, \%c);
    @@list = \($a, @@b, %c);      # same thing!

As a special case, C<\(@@foo)> returns a list of references to the contents
of C<@@foo>, not a reference to C<@@foo> itself.  Likewise for C<%foo>,
except that the key references are to copies (since the keys are just
strings rather than full-fledged scalars).

=item 3.
X<hash, anonymous> X<{> X<{}> X<curly bracket>
X<bracket, curly> X<brace> X<hashref> X<hash reference> X<reference, hash>

A reference to an anonymous hash can be created using curly
brackets:

    $hashref = {
        'Adam'  => 'Eve',
        'Clyde' => 'Bonnie',
    };

Anonymous hash and array composers like these can be intermixed freely to
produce as complicated a structure as you want.  The multidimensional
syntax described below works for these too.  The values above are
literals, but variables and expressions would work just as well, because
assignment operators in Perl (even within local() or my()) are executable
statements, not compile-time declarations.

Because curly brackets (braces) are used for several other things
including BLOCKs, you may occasionally have to disambiguate braces at the
beginning of a statement by putting a C<+> or a C<return> in front so
that Perl realizes the opening brace isn't starting a BLOCK.  The economy and
mnemonic value of using curlies is deemed worth this occasional extra
hassle.

For example, if you wanted a function to make a new hash and return a
reference to it, you have these options:

    sub hashem {        { @@_ } }   # silently wrong
    sub hashem {       +{ @@_ } }   # ok
    sub hashem { return { @@_ } }   # ok

On the other hand, if you want the other meaning, you can do this:

    sub showem {        { @@_ } }   # ambiguous (currently ok,
                                   # but may change)
    sub showem {       {; @@_ } }   # ok
    sub showem { { return @@_ } }   # ok

The leading C<+{> and C<{;> always serve to disambiguate
the expression to mean either the HASH reference, or the BLOCK.

=item 4.
X<subroutine, anonymous> X<subroutine, reference> X<reference, subroutine>
X<scope, lexical> X<closure> X<lexical> X<lexical scope>

A reference to an anonymous subroutine can be created by using
C<sub> without a subname:

    $coderef = sub { print "Boink!\n" };

Note the semicolon.  Except for the code
inside not being immediately executed, a C<sub {}> is not so much a
declaration as it is an operator, like C<do{}> or C<eval{}>.  (However, no
matter how many times you execute that particular line (unless you're in an
C<eval("...")>), $coderef will still have a reference to the I<same>
anonymous subroutine.)

Anonymous subroutines act as closures with respect to my() variables,
that is, variables lexically visible within the current scope.  Closure
is a notion out of the Lisp world that says if you define an anonymous
function in a particular lexical context, it pretends to run in that
context even when it's called outside the context.

In human terms, it's a funny way of passing arguments to a subroutine when
you define it as well as when you call it.  It's useful for setting up
little bits of code to run later, such as callbacks.  You can even
do object-oriented stuff with it, though Perl already provides a different
mechanism to do that--see L<perlobj>.

You might also think of closure as a way to write a subroutine
template without using eval().  Here's a small example of how
closures work:

    sub newprint {
        my $x = shift;
        return sub { my $y = shift; print "$x, $y!\n"; };
    }
    $h = newprint("Howdy");
    $g = newprint("Greetings");

    # Time passes...

    &$h("world");
    &$g("earthlings");

This prints

    Howdy, world!
    Greetings, earthlings!

Note particularly that $x continues to refer to the value passed
into newprint() I<despite> "my $x" having gone out of scope by the
time the anonymous subroutine runs.  That's what a closure is all
about.

This applies only to lexical variables, by the way.  Dynamic variables
continue to work as they have always worked.  Closure is not something
that most Perl programmers need trouble themselves about to begin with.

=item 5.
X<constructor> X<new>

References are often returned by special subroutines called constructors.  Perl
objects are just references to a special type of object that happens to know
which package it's associated with.  Constructors are just special subroutines
that know how to create that association.  They do so by starting with an
ordinary reference, and it remains an ordinary reference even while it's also
being an object.  Constructors are often named C<new()>.  You I<can> call them
indirectly:

    $objref = new Doggie( Tail => 'short', Ears => 'long' );

But that can produce ambiguous syntax in certain cases, so it's often
better to use the direct method invocation approach:

    $objref   = Doggie->new(Tail => 'short', Ears => 'long');

    use Term::Cap;
    $terminal = Term::Cap->Tgetent( { OSPEED => 9600 });

    use Tk;
    $main    = MainWindow->new();
    $menubar = $main->Frame(-relief              => "raised",
                            -borderwidth         => 2)

=item 6.
X<autovivification>

References of the appropriate type can spring into existence if you
dereference them in a context that assumes they exist.  Because we haven't
talked about dereferencing yet, we can't show you any examples yet.

=item 7.
X<*foo{THING}> X<*>

A reference can be created by using a special syntax, lovingly known as
the *foo{THING} syntax.  *foo{THING} returns a reference to the THING
slot in *foo (which is the symbol table entry which holds everything
known as foo).

    $scalarref = *foo{SCALAR};
    $arrayref  = *ARGV{ARRAY};
    $hashref   = *ENV{HASH};
    $coderef   = *handler{CODE};
    $ioref     = *STDIN{IO};
    $globref   = *foo{GLOB};
    $formatref = *foo{FORMAT};
    $globname  = *foo{NAME};    # "foo"
    $pkgname   = *foo{PACKAGE}; # "main"

Most of these are self-explanatory, but C<*foo{IO}>
deserves special attention.  It returns
the IO handle, used for file handles (L<perlfunc/open>), sockets
(L<perlfunc/socket> and L<perlfunc/socketpair>), and directory
handles (L<perlfunc/opendir>).  For compatibility with previous
versions of Perl, C<*foo{FILEHANDLE}> is a synonym for C<*foo{IO}>, though it
is discouraged, to encourage a consistent use of one name: IO.  On perls
between v5.8 and v5.22, it will issue a deprecation warning, but this
deprecation has since been rescinded.

C<*foo{THING}> returns undef if that particular THING hasn't been used yet,
except in the case of scalars.  C<*foo{SCALAR}> returns a reference to an
anonymous scalar if $foo hasn't been used yet.  This might change in a
future release.

C<*foo{NAME}> and C<*foo{PACKAGE}> are the exception, in that they return
strings, rather than references.  These return the package and name of the
typeglob itself, rather than one that has been assigned to it.  So, after
C<*foo=*Foo::bar>, C<*foo> will become "*Foo::bar" when used as a string,
but C<*foo{PACKAGE}> and C<*foo{NAME}> will continue to produce "main" and
"foo", respectively.

C<*foo{IO}> is an alternative to the C<*HANDLE> mechanism given in
L<perldata/"Typeglobs and Filehandles"> for passing filehandles
into or out of subroutines, or storing into larger data structures.
Its disadvantage is that it won't create a new filehandle for you.
Its advantage is that you have less risk of clobbering more than
you want to with a typeglob assignment.  (It still conflates file
and directory handles, though.)  However, if you assign the incoming
value to a scalar instead of a typeglob as we do in the examples
below, there's no risk of that happening.

    splutter(*STDOUT);          # pass the whole glob
    splutter(*STDOUT{IO});      # pass both file and dir handles

    sub splutter {
        my $fh = shift;
        print $fh "her um well a hmmm\n";
    }

    $rec = get_rec(*STDIN);     # pass the whole glob
    $rec = get_rec(*STDIN{IO}); # pass both file and dir handles

    sub get_rec {
        my $fh = shift;
        return scalar <$fh>;
    }

=back

=head2 Using References
X<reference, use> X<dereferencing> X<dereference>

That's it for creating references.  By now you're probably dying to
know how to use references to get back to your long-lost data.  There
are several basic methods.

=over 4

=item 1.

Anywhere you'd put an identifier (or chain of identifiers) as part
of a variable or subroutine name, you can replace the identifier with
a simple scalar variable containing a reference of the correct type:

    $bar = $$scalarref;
    push(@@$arrayref, $filename);
    $$arrayref[0] = "January";
    $$hashref{"KEY"} = "VALUE";
    &$coderef(1,2,3);
    print $globref "output\n";

It's important to understand that we are specifically I<not> dereferencing
C<$arrayref[0]> or C<$hashref{"KEY"}> there.  The dereference of the
scalar variable happens I<before> it does any key lookups.  Anything more
complicated than a simple scalar variable must use methods 2 or 3 below.
However, a "simple scalar" includes an identifier that itself uses method
1 recursively.  Therefore, the following prints "howdy".

    $refrefref = \\\"howdy";
    print $$$$refrefref;

=item 2.

Anywhere you'd put an identifier (or chain of identifiers) as part of a
variable or subroutine name, you can replace the identifier with a
BLOCK returning a reference of the correct type.  In other words, the
previous examples could be written like this:

    $bar = ${$scalarref};
    push(@@{$arrayref}, $filename);
    ${$arrayref}[0] = "January";
    ${$hashref}{"KEY"} = "VALUE";
    &{$coderef}(1,2,3);
    $globref->print("output\n");  # iff IO::Handle is loaded

Admittedly, it's a little silly to use the curlies in this case, but
the BLOCK can contain any arbitrary expression, in particular,
subscripted expressions:

    &{ $dispatch{$index} }(1,2,3);      # call correct routine

Because of being able to omit the curlies for the simple case of C<$$x>,
people often make the mistake of viewing the dereferencing symbols as
proper operators, and wonder about their precedence.  If they were,
though, you could use parentheses instead of braces.  That's not the case.
Consider the difference below; case 0 is a short-hand version of case 1,
I<not> case 2:

    $$hashref{"KEY"}   = "VALUE";       # CASE 0
    ${$hashref}{"KEY"} = "VALUE";       # CASE 1
    ${$hashref{"KEY"}} = "VALUE";       # CASE 2
    ${$hashref->{"KEY"}} = "VALUE";     # CASE 3

Case 2 is also deceptive in that you're accessing a variable
called %hashref, not dereferencing through $hashref to the hash
it's presumably referencing.  That would be case 3.

=item 3.

Subroutine calls and lookups of individual array elements arise often
enough that it gets cumbersome to use method 2.  As a form of
syntactic sugar, the examples for method 2 may be written:

    $arrayref->[0] = "January";   # Array element
    $hashref->{"KEY"} = "VALUE";  # Hash element
    $coderef->(1,2,3);            # Subroutine call

The left side of the arrow can be any expression returning a reference,
including a previous dereference.  Note that C<$array[$x]> is I<not> the
same thing as C<< $array->[$x] >> here:

    $array[$x]->{"foo"}->[0] = "January";

This is one of the cases we mentioned earlier in which references could
spring into existence when in an lvalue context.  Before this
statement, C<$array[$x]> may have been undefined.  If so, it's
automatically defined with a hash reference so that we can look up
C<{"foo"}> in it.  Likewise C<< $array[$x]->{"foo"} >> will automatically get
defined with an array reference so that we can look up C<[0]> in it.
This process is called I<autovivification>.

One more thing here.  The arrow is optional I<between> brackets
subscripts, so you can shrink the above down to

    $array[$x]{"foo"}[0] = "January";

Which, in the degenerate case of using only ordinary arrays, gives you
multidimensional arrays just like C's:

    $score[$x][$y][$z] += 42;

Well, okay, not entirely like C's arrays, actually.  C doesn't know how
to grow its arrays on demand.  Perl does.

=item 4.

If a reference happens to be a reference to an object, then there are
probably methods to access the things referred to, and you should probably
stick to those methods unless you're in the class package that defines the
object's methods.  In other words, be nice, and don't violate the object's
encapsulation without a very good reason.  Perl does not enforce
encapsulation.  We are not totalitarians here.  We do expect some basic
civility though.

=back

Using a string or number as a reference produces a symbolic reference,
as explained above.  Using a reference as a number produces an
integer representing its storage location in memory.  The only
useful thing to be done with this is to compare two references
numerically to see whether they refer to the same location.
X<reference, numeric context>

    if ($ref1 == $ref2) {  # cheap numeric compare of references
        print "refs 1 and 2 refer to the same thing\n";
    }

Using a reference as a string produces both its referent's type,
including any package blessing as described in L<perlobj>, as well
as the numeric address expressed in hex.  The ref() operator returns
just the type of thing the reference is pointing to, without the
address.  See L<perlfunc/ref> for details and examples of its use.
X<reference, string context>

The bless() operator may be used to associate the object a reference
points to with a package functioning as an object class.  See L<perlobj>.

A typeglob may be dereferenced the same way a reference can, because
the dereference syntax always indicates the type of reference desired.
So C<${*foo}> and C<${\$foo}> both indicate the same scalar variable.

Here's a trick for interpolating a subroutine call into a string:

    print "My sub returned @@{[mysub(1,2,3)]} that time.\n";

The way it works is that when the C<@@{...}> is seen in the double-quoted
string, it's evaluated as a block.  The block creates a reference to an
anonymous array containing the results of the call to C<mysub(1,2,3)>.  So
the whole block returns a reference to an array, which is then
dereferenced by C<@@{...}> and stuck into the double-quoted string. This
chicanery is also useful for arbitrary expressions:

    print "That yields @@{[$n + 5]} widgets\n";

Similarly, an expression that returns a reference to a scalar can be
dereferenced via C<${...}>. Thus, the above expression may be written
as:

    print "That yields ${\($n + 5)} widgets\n";

=head2 Circular References
X<circular reference> X<reference, circular>

It is possible to create a "circular reference" in Perl, which can lead
to memory leaks. A circular reference occurs when two references
contain a reference to each other, like this:

    my $foo = {};
    my $bar = { foo => $foo };
    $foo->{bar} = $bar;

You can also create a circular reference with a single variable:

    my $foo;
    $foo = \$foo;

In this case, the reference count for the variables will never reach 0,
and the references will never be garbage-collected. This can lead to
memory leaks.

Because objects in Perl are implemented as references, it's possible to
have circular references with objects as well. Imagine a TreeNode class
where each node references its parent and child nodes. Any node with a
parent will be part of a circular reference.

You can break circular references by creating a "weak reference". A
weak reference does not increment the reference count for a variable,
which means that the object can go out of scope and be destroyed. You
can weaken a reference with the C<weaken> function exported by the
L<Scalar::Util> module.

Here's how we can make the first example safer:

    use Scalar::Util 'weaken';

    my $foo = {};
    my $bar = { foo => $foo };
    $foo->{bar} = $bar;

    weaken $foo->{bar};

The reference from C<$foo> to C<$bar> has been weakened. When the
C<$bar> variable goes out of scope, it will be garbage-collected. The
next time you look at the value of the C<< $foo->{bar} >> key, it will
be C<undef>.

This action at a distance can be confusing, so you should be careful
with your use of weaken. You should weaken the reference in the
variable that will go out of scope I<first>. That way, the longer-lived
variable will contain the expected reference until it goes out of
scope.

=head2 Symbolic references
X<reference, symbolic> X<reference, soft>
X<symbolic reference> X<soft reference>

We said that references spring into existence as necessary if they are
undefined, but we didn't say what happens if a value used as a
reference is already defined, but I<isn't> a hard reference.  If you
use it as a reference, it'll be treated as a symbolic
reference.  That is, the value of the scalar is taken to be the I<name>
of a variable, rather than a direct link to a (possibly) anonymous
value.

People frequently expect it to work like this.  So it does.

    $name = "foo";
    $$name = 1;                 # Sets $foo
    ${$name} = 2;               # Sets $foo
    ${$name x 2} = 3;           # Sets $foofoo
    $name->[0] = 4;             # Sets $foo[0]
    @@$name = ();                # Clears @@foo
    &$name();                   # Calls &foo()
    $pack = "THAT";
    ${"${pack}::$name"} = 5;    # Sets $THAT::foo without eval

This is powerful, and slightly dangerous, in that it's possible
to intend (with the utmost sincerity) to use a hard reference, and
accidentally use a symbolic reference instead.  To protect against
that, you can say

    use strict 'refs';

and then only hard references will be allowed for the rest of the enclosing
block.  An inner block may countermand that with

    no strict 'refs';

Only package variables (globals, even if localized) are visible to
symbolic references.  Lexical variables (declared with my()) aren't in
a symbol table, and thus are invisible to this mechanism.  For example:

    local $value = 10;
    $ref = "value";
    {
        my $value = 20;
        print $$ref;
    }

This will still print 10, not 20.  Remember that local() affects package
variables, which are all "global" to the package.

=head2 Not-so-symbolic references

Brackets around a symbolic reference can simply
serve to isolate an identifier or variable name from the rest of an
expression, just as they always have within a string.  For example,

    $push = "pop on ";
    print "${push}over";

has always meant to print "pop on over", even though push is
a reserved word.  This is generalized to work the same
without the enclosing double quotes, so that

    print ${push} . "over";

and even

    print ${ push } . "over";

will have the same effect.  This
construct is I<not> considered to be a symbolic reference when you're
using strict refs:

    use strict 'refs';
    ${ bareword };      # Okay, means $bareword.
    ${ "bareword" };    # Error, symbolic reference.

Similarly, because of all the subscripting that is done using single words,
the same rule applies to any bareword that is used for subscripting a hash.
So now, instead of writing

    $array{ "aaa" }{ "bbb" }{ "ccc" }

you can write just

    $array{ aaa }{ bbb }{ ccc }

and not worry about whether the subscripts are reserved words.  In the
rare event that you do wish to do something like

    $array{ shift }

you can force interpretation as a reserved word by adding anything that
makes it more than a bareword:

    $array{ shift() }
    $array{ +shift }
    $array{ shift @@_ }

The C<use warnings> pragma or the B<-w> switch will warn you if it
interprets a reserved word as a string.
But it will no longer warn you about using lowercase words, because the
string is effectively quoted.

=head2 Pseudo-hashes: Using an array as a hash
X<pseudo-hash> X<pseudo hash> X<pseudohash>

Pseudo-hashes have been removed from Perl.  The 'fields' pragma
remains available.

=head2 Function Templates
X<scope, lexical> X<closure> X<lexical> X<lexical scope>
X<subroutine, nested> X<sub, nested> X<subroutine, local> X<sub, local>

As explained above, an anonymous function with access to the lexical
variables visible when that function was compiled, creates a closure.  It
retains access to those variables even though it doesn't get run until
later, such as in a signal handler or a Tk callback.

Using a closure as a function template allows us to generate many functions
that act similarly.  Suppose you wanted functions named after the colors
that generated HTML font changes for the various colors:

    print "Be ", red("careful"), "with that ", green("light");

The red() and green() functions would be similar.  To create these,
we'll assign a closure to a typeglob of the name of the function we're
trying to build.

    @@colors = qw(red blue green yellow orange purple violet);
    for my $name (@@colors) {
        no strict 'refs';       # allow symbol table manipulation
        *$name = *{uc $name} = sub { "<FONT COLOR='$name'>@@_</FONT>" };
    }

Now all those different functions appear to exist independently.  You can
call red(), RED(), blue(), BLUE(), green(), etc.  This technique saves on
both compile time and memory use, and is less error-prone as well, since
syntax checks happen at compile time.  It's critical that any variables in
the anonymous subroutine be lexicals in order to create a proper closure.
That's the reasons for the C<my> on the loop iteration variable.

This is one of the only places where giving a prototype to a closure makes
much sense.  If you wanted to impose scalar context on the arguments of
these functions (probably not a wise idea for this particular example),
you could have written it this way instead:

    *$name = sub ($) { "<FONT COLOR='$name'>$_[0]</FONT>" };

However, since prototype checking happens at compile time, the assignment
above happens too late to be of much use.  You could address this by
putting the whole loop of assignments within a BEGIN block, forcing it
to occur during compilation.

Access to lexicals that change over time--like those in the C<for> loop
above, basically aliases to elements from the surrounding lexical scopes--
only works with anonymous subs, not with named subroutines. Generally
said, named subroutines do not nest properly and should only be declared
in the main package scope.

This is because named subroutines are created at compile time so their
lexical variables get assigned to the parent lexicals from the first
execution of the parent block. If a parent scope is entered a second
time, its lexicals are created again, while the nested subs still
reference the old ones.

Anonymous subroutines get to capture each time you execute the C<sub>
operator, as they are created on the fly. If you are accustomed to using
nested subroutines in other programming languages with their own private
variables, you'll have to work at it a bit in Perl.  The intuitive coding
of this type of thing incurs mysterious warnings about "will not stay
shared" due to the reasons explained above.
For example, this won't work:

    sub outer {
        my $x = $_[0] + 35;
        sub inner { return $x * 19 }   # WRONG
        return $x + inner();
    }

A work-around is the following:

    sub outer {
        my $x = $_[0] + 35;
        local *inner = sub { return $x * 19 };
        return $x + inner();
    }

Now inner() can only be called from within outer(), because of the
temporary assignments of the anonymous subroutine. But when it does,
it has normal access to the lexical variable $x from the scope of
outer() at the time outer is invoked.

This has the interesting effect of creating a function local to another
function, something not normally supported in Perl.

=head1 WARNING
X<reference, string context> X<reference, use as hash key>

You may not (usefully) use a reference as the key to a hash.  It will be
converted into a string:

    $x{ \$a } = $a;

If you try to dereference the key, it won't do a hard dereference, and
you won't accomplish what you're attempting.  You might want to do something
more like

    $r = \@@a;
    $x{ $r } = $r;

And then at least you can use the values(), which will be
real refs, instead of the keys(), which won't.

The standard Tie::RefHash module provides a convenient workaround to this.

=head1 Postfix Dereference Syntax

Beginning in v5.20.0, a postfix syntax for using references is
available.  It behaves as described in L</Using References>, but instead
of a prefixed sigil, a postfixed sigil-and-star is used.

For example:

    $r = \@@a;
    @@b = $r->@@*; # equivalent to @@$r or @@{ $r }

    $r = [ 1, [ 2, 3 ], 4 ];
    $r->[1]->@@*;  # equivalent to @@{ $r->[1] }

In Perl 5.20 and 5.22, this syntax must be enabled with C<use feature
'postderef'>. As of Perl 5.24, no feature declarations are required to make
it available.

Postfix dereference should work in all circumstances where block
(circumfix) dereference worked, and should be entirely equivalent.  This
syntax allows dereferencing to be written and read entirely
left-to-right.  The following equivalencies are defined:

  $sref->$*;  # same as  ${ $sref }
  $aref->@@*;  # same as  @@{ $aref }
  $aref->$#*; # same as $#{ $aref }
  $href->%*;  # same as  %{ $href }
  $cref->&*;  # same as  &{ $cref }
  $gref->**;  # same as  *{ $gref }

Note especially that C<< $cref->&* >> is I<not> equivalent to C<<
$cref->() >>, and can serve different purposes.

Glob elements can be extracted through the postfix dereferencing feature:

  $gref->*{SCALAR}; # same as *{ $gref }{SCALAR}

Postfix array and scalar dereferencing I<can> be used in interpolating
strings (double quotes or the C<qq> operator), but only if the
C<postderef_qq> feature is enabled.

=head2 Postfix Reference Slicing

Value slices of arrays and hashes may also be taken with postfix
dereferencing notation, with the following equivalencies:

  $aref->@@[ ... ];  # same as @@$aref[ ... ]
  $href->@@{ ... };  # same as @@$href{ ... }

Postfix key/value pair slicing, added in 5.20.0 and documented in
L<the KeyE<sol>Value Hash Slices section of perldata|perldata/"Key/Value Hash
Slices">, also behaves as expected:

  $aref->%[ ... ];  # same as %$aref[ ... ]
  $href->%{ ... };  # same as %$href{ ... }

As with postfix array, postfix value slice dereferencing I<can> be used
in interpolating strings (double quotes or the C<qq> operator), but only
if the C<postderef_qq> L<feature> is enabled.

=head1 Assigning to References

Beginning in v5.22.0, the referencing operator can be assigned to.  It
performs an aliasing operation, so that the variable name referenced on the
left-hand side becomes an alias for the thing referenced on the right-hand
side:

    \$a = \$b; # $a and $b now point to the same scalar
    \&foo = \&bar; # foo() now means bar()

This syntax must be enabled with C<use feature 'refaliasing'>.  It is
experimental, and will warn by default unless C<no warnings
'experimental::refaliasing'> is in effect.

These forms may be assigned to, and cause the right-hand side to be
evaluated in scalar context:

    \$scalar
    \@@array
    \%hash
    \&sub
    \my $scalar
    \my @@array
    \my %hash
    \state $scalar # or @@array, etc.
    \our $scalar   # etc.
    \local $scalar # etc.
    \local our $scalar # etc.
    \$some_array[$index]
    \$some_hash{$key}
    \local $some_array[$index]
    \local $some_hash{$key}
    condition ? \$this : \$that[0] # etc.

Slicing operations and parentheses cause
the right-hand side to be evaluated in
list context:

    \@@array[5..7]
    (\@@array[5..7])
    \(@@array[5..7])
    \@@hash{'foo','bar'}
    (\@@hash{'foo','bar'})
    \(@@hash{'foo','bar'})
    (\$scalar)
    \($scalar)
    \(my $scalar)
    \my($scalar)
    (\@@array)
    (\%hash)
    (\&sub)
    \(&sub)
    \($foo, @@bar, %baz)
    (\$foo, \@@bar, \%baz)

Each element on the right-hand side must be a reference to a datum of the
right type.  Parentheses immediately surrounding an array (and possibly
also C<my>/C<state>/C<our>/C<local>) will make each element of the array an
alias to the corresponding scalar referenced on the right-hand side:

    \(@@a) = \(@@b); # @@a and @@b now have the same elements
    \my(@@a) = \(@@b); # likewise
    \(my @@a) = \(@@b); # likewise
    push @@a, 3; # but now @@a has an extra element that @@b lacks
    \(@@a) = (\$a, \$b, \$c); # @@a now contains $a, $b, and $c

Combining that form with C<local> and putting parentheses immediately
around a hash are forbidden (because it is not clear what they should do):

    \local(@@array) = foo(); # WRONG
    \(%hash)       = bar(); # wRONG

Assignment to references and non-references may be combined in lists and
conditional ternary expressions, as long as the values on the right-hand
side are the right type for each element on the left, though this may make
for obfuscated code:

    (my $tom, \my $dick, \my @@harry) = (\1, \2, [1..3]);
    # $tom is now \1
    # $dick is now 2 (read-only)
    # @@harry is (1,2,3)

    my $type = ref $thingy;
    ($type ? $type eq 'ARRAY' ? \@@foo : \$bar : $baz) = $thingy;

The C<foreach> loop can also take a reference constructor for its loop
variable, though the syntax is limited to one of the following, with an
optional C<my>, C<state>, or C<our> after the backslash:

    \$s
    \@@a
    \%h
    \&c

No parentheses are permitted.  This feature is particularly useful for
arrays-of-arrays, or arrays-of-hashes:

    foreach \my @@a (@@array_of_arrays) {
        frobnicate($a[0], $a[-1]);
    }

    foreach \my %h (@@array_of_hashes) {
        $h{gelastic}++ if $h{type} eq 'funny';
    }

B<CAVEAT:> Aliasing does not work correctly with closures.  If you try to
alias lexical variables from an inner subroutine or C<eval>, the aliasing
will only be visible within that inner sub, and will not affect the outer
subroutine where the variables are declared.  This bizarre behavior is
subject to change.

=head1 SEE ALSO

Besides the obvious documents, source code can be instructive.
Some pathological examples of the use of references can be found
in the F<t/op/ref.t> regression test in the Perl source directory.

See also L<perldsc> and L<perllol> for how to use references to create
complex data structures, and L<perlootut> and L<perlobj>
for how to use them to create objects.
@


1.11
log
@Fix merge issues, remove excess files - match perl-5.20.2 dist
@
text
@a53 7
That said, be aware that Perl version 5.14 introduces an exception
to the rule, for syntactic convenience.  Experimental array and hash container
function behavior allows array and hash references to be handled by Perl as
if they had been explicitly syntactically dereferenced.  See
L<perl5140delta/"Syntactical Enhancements">
and L<perlfunc> for details.

d268 3
a270 2
is deprecated as of 5.8.0.  If deprecation warnings are in effect, it will warn
of its use.
d755 3
a757 3
This syntax must be enabled with C<use feature 'postderef'>.  It is
experimental, and will warn by default unless C<no warnings
'experimental::postderef'> is in effect.
d780 1
a780 1
additional C<postderef_qq> feature is enabled.
d799 112
a910 1
if the additional C<postderef_qq> L<feature> is enabled.
@


1.10
log
@Fix merge conflicts, remove extra files, match upstream perl-5.20.1

ok deraadt@@ sthen@@ espie@@ miod@@
@
text
@d72 1
a72 1
(This works much like the & (address-of) operator in C.)  
d110 1
a110 1
    @@list = \($a, @@b, %c);	# same thing!
d125 2
a126 2
	'Adam'  => 'Eve',
	'Clyde' => 'Bonnie',
d193 2
a194 2
	my $x = shift;
	return sub { my $y = shift; print "$x, $y!\n"; };
d300 2
a301 2
    splutter(*STDOUT);		# pass the whole glob
    splutter(*STDOUT{IO});	# pass both file and dir handles
d304 2
a305 2
	my $fh = shift;
	print $fh "her um well a hmmm\n";
d308 1
a308 1
    $rec = get_rec(*STDIN);	# pass the whole glob
d312 2
a313 2
	my $fh = shift;
	return scalar <$fh>;
d368 1
a368 1
    &{ $dispatch{$index} }(1,2,3);	# call correct routine
d377 4
a380 4
    $$hashref{"KEY"}   = "VALUE";	# CASE 0
    ${$hashref}{"KEY"} = "VALUE";	# CASE 1
    ${$hashref{"KEY"}} = "VALUE";	# CASE 2
    ${$hashref->{"KEY"}} = "VALUE";	# CASE 3
d443 1
a443 1
	print "refs 1 and 2 refer to the same thing\n";
d546 6
a551 6
    $$name = 1;			# Sets $foo
    ${$name} = 2;		# Sets $foo
    ${$name x 2} = 3;		# Sets $foofoo
    $name->[0] = 4;		# Sets $foo[0]
    @@$name = ();		# Clears @@foo
    &$name();			# Calls &foo()
d553 1
a553 1
    ${"${pack}::$name"} = 5;	# Sets $THAT::foo without eval
d574 2
a575 2
	my $value = 20;
	print $$ref;
d605 2
a606 2
    ${ bareword };	# Okay, means $bareword.
    ${ "bareword" };	# Error, symbolic reference.
d658 1
a658 1
trying to build.  
d662 1
a662 1
        no strict 'refs';	# allow symbol table manipulation
d664 1
a664 1
    } 
d702 1
a702 1
shared" due to the reasons explained above. 
@


1.9
log
@Merge perl-5.18.2 plus local patches, remove old files

OK espie@@ sthen@@ deraadt@@
@
text
@d152 2
a153 1
    sub showem {        { @@_ } }   # ambiguous (currently ok, but may change)
d746 60
@


1.8
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@a48 6
principle: Perl does no implicit referencing or dereferencing.  When a
scalar is holding a reference, it always behaves as a simple scalar.  It
doesn't magically start being an array or hash or subroutine; you have to
tell it explicitly to do so, by dereferencing it.

References are easy to use in Perl.  There is just one overriding
d265 2
d268 2
a269 1
All of these are self-explanatory except for C<*foo{IO}>.  It returns
d282 7
d550 1
a550 1
    &$name();			# Calls &foo() (as in Perl 4)
d582 1
a582 1
Since Perl verion 5.001, brackets around a symbolic reference can simply
d590 1
a590 1
a reserved word.  In 5.001, this was generalized to work the same
d599 1
a599 2
will have the same effect.  (This would have been a syntax error in
Perl 5.000, though Perl 4 allowed it in the spaceless form.)  This
@


1.7
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@d27 1
a27 1
L<perlobj/"Two-Phased Garbage Collection"> for a detailed explanation.)
d54 13
d474 52
d578 3
a580 3
A new feature contributing to readability in perl version 5.001 is that the
brackets around a symbolic reference behave more like quotes, just as they
always have within a string.  That is,
d586 2
a587 2
a reserved word.  This has been generalized to work the same outside
of quotes, so that
d604 3
a606 3
Similarly, because of all the subscripting that is done using single
words, we've applied the same rule to any bareword that is used for
subscripting a hash.  So now, instead of writing
d750 1
a750 1
complex data structures, and L<perltoot>, L<perlobj>, and L<perlbot>
@


1.6
log
@merge in perl 5.8.8
@
text
@d213 7
a219 7
References are often returned by special subroutines called constructors.
Perl objects are just references to a special type of object that happens to know
which package it's associated with.  Constructors are just special
subroutines that know how to create that association.  They do so by
starting with an ordinary reference, and it remains an ordinary reference
even while it's also being an object.  Constructors are often
named new() and called indirectly:
d221 1
a221 1
    $objref = new Doggie (Tail => 'short', Ears => 'long');
d223 2
a224 1
But don't have to be:
a332 1
X<${}> X<@@{}> X<%{}>
a368 1
X<autovivification> X<< -> >> X<arrow>
a405 1
X<encapsulation>
d455 6
d569 2
a570 71
B<WARNING>:  This section describes an experimental feature.  Details may
change without notice in future versions.

B<NOTE>: The current user-visible implementation of pseudo-hashes
(the weird use of the first array element) is deprecated starting from
Perl 5.8.0 and will be removed in Perl 5.10.0, and the feature will be
implemented differently.  Not only is the current interface rather ugly,
but the current implementation slows down normal array and hash use quite
noticeably.  The 'fields' pragma interface will remain available.

Beginning with release 5.005 of Perl, you may use an array reference
in some contexts that would normally require a hash reference.  This
allows you to access array elements using symbolic names, as if they
were fields in a structure.

For this to work, the array must contain extra information.  The first
element of the array has to be a hash reference that maps field names
to array indices.  Here is an example:

    $struct = [{foo => 1, bar => 2}, "FOO", "BAR"];

    $struct->{foo};  # same as $struct->[1], i.e. "FOO"
    $struct->{bar};  # same as $struct->[2], i.e. "BAR"

    keys %$struct;   # will return ("foo", "bar") in some order
    values %$struct; # will return ("FOO", "BAR") in same some order

    while (my($k,$v) = each %$struct) {
       print "$k => $v\n";
    }

Perl will raise an exception if you try to access nonexistent fields.
To avoid inconsistencies, always use the fields::phash() function
provided by the C<fields> pragma.

    use fields;
    $pseudohash = fields::phash(foo => "FOO", bar => "BAR");

For better performance, Perl can also do the translation from field
names to array indices at compile time for typed object references.
See L<fields>.

There are two ways to check for the existence of a key in a
pseudo-hash.  The first is to use exists().  This checks to see if the
given field has ever been set.  It acts this way to match the behavior
of a regular hash.  For instance:

    use fields;
    $phash = fields::phash([qw(foo bar pants)], ['FOO']);
    $phash->{pants} = undef;

    print exists $phash->{foo};    # true, 'foo' was set in the declaration
    print exists $phash->{bar};    # false, 'bar' has not been used.
    print exists $phash->{pants};  # true, your 'pants' have been touched

The second is to use exists() on the hash reference sitting in the
first array element.  This checks to see if the given key is a valid
field in the pseudo-hash.

    print exists $phash->[0]{bar};	# true, 'bar' is a valid field
    print exists $phash->[0]{shoes};# false, 'shoes' can't be used

delete() on a pseudo-hash element only deletes the value corresponding
to the key, not the key itself.  To delete the key, you'll have to
explicitly delete it from the first hash element.

    print delete $phash->{foo};     # prints $phash->[1], "FOO"
    print exists $phash->{foo};     # false
    print exists $phash->[0]{foo};  # true, key still exists
    print delete $phash->[0]{foo};  # now key is gone
    print $phash->{foo};            # runtime exception
d616 19
a634 10
Access to lexicals that change over type--like those in the C<for> loop
above--only works with closures, not general subroutines.  In the general
case, then, named subroutines do not nest properly, although anonymous
ones do. Thus is because named subroutines are created (and capture any
outer lexicals) only once at compile time, whereas anonymous subroutines
get to capture each time you execute the 'sub' operator.  If you are
accustomed to using nested subroutines in other programming languages with
their own private variables, you'll have to work at it a bit in Perl.  The
intuitive coding of this type of thing incurs mysterious warnings about
"will not stay shared".  For example, this won't work:
d651 3
a653 3
temporary assignments of the closure (anonymous subroutine).  But when
it does, it has normal access to the lexical variable $x from the scope
of outer().
@


1.5
log
@Resolve conflicts, remove old files, merge local changes
@
text
@d2 1
d38 2
d46 1
d55 1
d62 1
d84 2
d111 2
d153 2
d211 1
d236 1
d243 1
d256 1
d300 1
d332 1
d369 1
d407 1
d424 1
d435 1
d458 2
d563 1
d638 2
d641 4
a644 4
As explained above, a closure is an anonymous function with access to the
lexical variables visible when that function was compiled.  It retains
access to those variables even though it doesn't get run until later,
such as in a signal handler or a Tk callback.
d684 7
a690 5
ones do.  If you are accustomed to using nested subroutines in other
programming languages with their own private variables, you'll have to
work at it a bit in Perl.  The intuitive coding of this type of thing
incurs mysterious warnings about ``will not stay shared''.  For example,
this won't work:
d696 1
a696 1
    } 
d704 1
a704 1
    } 
d715 1
@


1.4
log
@perl-5.6.0 + local changes
@
text
@d34 1
a34 1
The C<*glob> notation is something of a of symbolic reference.  (Symbolic
d246 3
a248 1
versions of Perl, C<*foo{FILEHANDLE}> is a synonym for C<*foo{IO}>.
d542 7
@


1.3
log
@perl5.005_03 (stock)
@
text
@d24 1
a24 1
to zero.  (Note: the reference counts for values in self-referential or
d34 1
a34 1
The C<*glob> notation is a kind of symbolic reference.  (Symbolic
d59 2
a60 2
(This works much like the & (address-of) operator in C.)  Note
that this typically creates I<ANOTHER> reference to a variable, because
d87 1
a87 1
access this.  For example, after the above, C<$arrayref-E<gt>[2][1]> would have
d90 1
a90 1
Note that taking a reference to an enumerated list is not the same
d139 1
a139 1
Note how the leading C<+{> and C<{;> always serve to disambiguate
d149 2
a150 2
Note the presence of the semicolon.  Except for the fact that the code
inside isn't executed immediately, a C<sub {}> is not so much a
d153 1
a153 1
C<eval("...")>), C<$coderef> will still have a reference to the I<SAME>
d157 1
a157 1
that is, variables visible lexically within the current scope.  Closure
d160 1
a160 1
context even when it's called outside of the context.
d168 3
a170 5
You can also think of closure as a way to write a subroutine template without
using eval.  (In fact, in version 5.000, eval was the I<only> way to get
closures.  You may wish to use "require 5.001" if you use closures.)

Here's a small example of how closures works:
d189 4
a192 4
Note particularly that $x continues to refer to the value passed into
newprint() I<despite> the fact that the "my $x" has seemingly gone out of
scope by the time the anonymous subroutine runs.  That's what closure
is all about.
d201 1
a201 1
Perl objects are just references to a special kind of object that happens to know
d242 5
a246 5
All of these are self-explanatory except for *foo{IO}.  It returns the
IO handle, used for file handles (L<perlfunc/open>), sockets
(L<perlfunc/socket> and L<perlfunc/socketpair>), and directory handles
(L<perlfunc/opendir>).  For compatibility with previous versions of
Perl, *foo{FILEHANDLE} is a synonym for *foo{IO}.
d248 2
a249 2
*foo{THING} returns undef if that particular THING hasn't been used yet,
except in the case of scalars.  *foo{SCALAR} returns a reference to an
d253 1
a253 1
*foo{IO} is an alternative to the \*HANDLE mechanism given in
d257 5
a261 3
Its advantage is that you have no risk of clobbering more than you want
to with a typeglob assignment, although if you assign to a scalar instead
of a typeglob, you're ok.
d263 2
a264 2
    splutter(*STDOUT);
    splutter(*STDOUT{IO});
d271 2
a272 2
    $rec = get_rec(*STDIN);
    $rec = get_rec(*STDIN{IO});
d302 1
a302 1
It's important to understand that we are specifically I<NOT> dereferencing
d304 1
a304 1
scalar variable happens I<BEFORE> it does any key lookups.  Anything more
d337 1
a337 1
I<NOT> case 2:
d359 2
a360 2
including a previous dereference.  Note that C<$array[$x]> is I<NOT> the
same thing as C<$array-E<gt>[$x]> here:
d368 1
a368 1
C<{"foo"}> in it.  Likewise C<$array[$x]-E<gt>{"foo"}> will automatically get
d372 1
a372 1
One more thing here.  The arrow is optional I<BETWEEN> brackets
d397 15
a411 2
The ref() operator may be used to determine what type of thing the
reference is pointing to.  See L<perlfunc>.
d417 1
a417 1
the dereference syntax always indicates the kind of reference desired.
d437 3
a439 3
reference is already defined, but I<ISN'T> a hard reference.  If you
use it as a reference in this case, it'll be treated as a symbolic
reference.  That is, the value of the scalar is taken to be the I<NAME>
d455 1
a455 1
This is very powerful, and slightly dangerous, in that it's possible
d490 1
a490 1
has always meant to print "pop on over", despite the fact that push is
d501 1
a501 1
Perl 5.000, though Perl 4 allowed it in the spaceless form.)  Note that this
d531 2
a532 1
The B<-w> switch will warn you if it interprets a reserved word as a string.
d538 1
a538 1
WARNING:  This section describes an experimental feature.  Details may
d541 1
a541 1
Beginning with release 5.005 of Perl you can use an array reference
d550 1
a550 1
   $struct = [{foo => 1, bar => 2}, "FOO", "BAR"];
d552 2
a553 2
   $struct->{foo};  # same as $struct->[1], i.e. "FOO"
   $struct->{bar};  # same as $struct->[2], i.e. "BAR"
d555 2
a556 2
   keys %$struct;   # will return ("foo", "bar") in some order
   values %$struct; # will return ("FOO", "BAR") in same some order
d558 1
a558 1
   while (my($k,$v) = each %$struct) {
d560 1
a560 6
   }

Perl will raise an exception if you try to delete keys from a pseudo-hash
or try to access nonexistent fields.  For better performance, Perl can also
do the translation from field names to array indices at compile time for
typed object references.  See L<fields>.
d562 40
d616 1
a616 1
The red() and green() functions would be very similar.  To create these,
d650 1
a650 1
work at it a bit in Perl.  The intuitive coding of this kind of thing
d698 1
a698 1
Some rather pathological examples of the use of references can be found
@


1.2
log
@perl 5.004_04
@
text
@d5 6
d14 7
a20 7
structures, because all references had to be symbolic, and even that was
difficult to do when you wanted to refer to a variable rather than a
symbol table entry.  Perl not only makes it easier to use symbolic
references to variables, but lets you have "hard" references to any piece
of data.  Any scalar may hold a hard reference.  Because arrays and hashes
contain scalars, you can now easily build arrays of arrays, arrays of
hashes, hashes of arrays, arrays of hashes of functions, and so on.
d24 1
a24 1
to zero.  (Note: The reference counts for values in self-referential or
d26 1
a26 1
L<perlobj/"Two-Phased Garbage Collection"> for a detailed explanation.
d41 1
a41 1
adjective, like in the following paragraph, it usually is talking about a
d50 3
a52 1
References can be constructed in several ways.
d71 5
a75 5
It isn't possible to create a true reference to an IO handle (filehandle or
dirhandle) using the backslash operator.  See the explanation of the
*foo{THING} syntax below.  (However, you're apt to find Perl code
out there using globrefs as though they were IO handles, which is
grandfathered into continued functioning.)
d79 1
a79 1
A reference to an anonymous array can be constructed using square
d84 1
a84 1
Here we've constructed a reference to an anonymous array of three elements
d98 3
a100 1
of C<@@foo>, not a reference to C<@@foo> itself.  Likewise for C<%foo>.
d104 1
a104 1
A reference to an anonymous hash can be constructed using curly
d112 1
a112 1
Anonymous hash and array constructors can be intermixed freely to
d133 9
d144 1
a144 1
A reference to an anonymous subroutine can be constructed by using
d152 1
a152 1
matter how many times you execute that line (unless you're in an
d196 1
a196 1
This applies to only lexical variables, by the way.  Dynamic variables
d207 2
a208 2
even while it's also being an object.  Constructors are customarily
named new(), but don't have to be:
d212 12
d255 7
a261 2
The use of *foo{IO} is the best way to pass bareword filehandles into or
out of subroutines, or to store them in larger data structures.
d263 1
d265 1
d271 1
d273 1
d279 1
a279 10
Beware, though, that you can't do this with a routine which is going to
open the filehandle for you, because *HANDLE{IO} will be undef if HANDLE
hasn't been used yet.  Use \*HANDLE for that sort of thing instead.

Using \*HANDLE (or *HANDLE) is another way to use and store non-bareword
filehandles (before perl version 5.002 it was the only way).  The two
methods are largely interchangeable, you can do

    splutter(\*STDOUT);
    $rec = get_rec(\*STDIN);
d281 1
a281 3
with the above subroutine definitions.

=back
d370 1
d400 2
a401 2
The bless() operator may be used to associate a reference with a package
functioning as an object class.  See L<perlobj>.
d454 3
a456 3
Only package variables are visible to symbolic references.  Lexical
variables (declared with my()) aren't in a symbol table, and thus are
invisible to this mechanism.  For example:
d458 2
a459 2
    local($value) = 10;
    $ref = \$value;
d522 105
d644 2
d653 2
a654 2
complex data structures, and L<perlobj> for how to use them to create
objects.
@


1.1
log
@Initial revision
@
text
@d10 1
a10 1
symbol table entry.  Perl 5 not only makes it easier to use symbolic
d12 1
a12 1
of data.  Any scalar may hold a hard reference.  Since arrays and hashes
d17 26
a42 17
automatically freeing the thing referred to when its reference count
goes to zero.  If that thing happens to be an object, the object is
destructed.  See L<perlobj> for more about objects.  (In a sense,
everything in Perl is an object, but we usually reserve the word for
references to objects that have been officially "blessed" into a class package.)

A symbolic reference contains the name of a variable, just as a
symbolic link in the filesystem merely contains the name of a file.  
The C<*glob> notation is a kind of symbolic reference.  Hard references
are more like hard links in the file system: merely another way
at getting at the same underlying object, irrespective of its name.

"Hard" references are easy to use in Perl.  There is just one
overriding principle:  Perl does no implicit referencing or
dereferencing.  When a scalar is holding a reference, it always behaves
as a scalar.  It doesn't magically start being an array or a hash
unless you tell it so explicitly by dereferencing it.
d44 1
a44 1
References can be constructed several ways.
d51 2
a52 2
(This works much like the & (address-of) operator works in C.)  Note
that this typically creates I<ANOTHER> reference to a variable, since
d61 1
a61 1
    $globref   = \*STDOUT;
d63 5
d77 1
a77 1
whose final element is itself reference to another anonymous array of three
d79 1
a79 1
access this.  For example, after the above, $arrayref-E<gt>[2][1] would have
d86 5
a90 2
    @@list = (\$a, \$b, \$c);  
    @@list = \($a, $b, $c);	# same thing!
d146 2
a147 2
do object-oriented stuff with it, though Perl provides a different
mechanism to do that already--see L<perlobj>.
d177 1
a177 1
This only applies to lexical variables, by the way.  Dynamic variables
d196 1
a196 1
dereference them in a context that assumes they exist.  Since we haven't
d201 24
a224 2
References to filehandles can be created by taking a reference to 
a typeglob.  This is currently the best way to pass filehandles into or
d227 1
a227 1
    splutter(\*STDOUT);
d233 1
a233 1
    $rec = get_rec(\*STDIN);
d239 13
d262 3
a264 3
Anywhere you'd put an identifier as part of a variable or subroutine
name, you can replace the identifier with a simple scalar variable
containing a reference of the correct type:
d285 4
a288 4
Anywhere you'd put an identifier as part of a variable or subroutine
name, you can replace the identifier with a BLOCK returning a reference
of the correct type.  In other words, the previous examples could be
written like this:
d295 1
a295 1
    $globref->print("output\n");  # iff you use FileHandle
d301 1
a301 1
    &{ $dispatch{$index} }(1,2,3);	# call correct routine 
d306 1
a306 1
though, you could use parens instead of braces.  That's not the case.
d321 7
a327 3
The case of individual array elements arises often enough that it gets
cumbersome to use method 2.  As a form of syntactic sugar, the two
lines like that above can be written:
d329 1
a329 4
    $arrayref->[0] = "January";
    $hashref->{"KEY"} = "VALUE";

The left side of the array can be any expression returning a reference,
d373 1
a373 1
A typeglob may be dereferenced the same way a reference can, since
d388 1
a388 1
    print "That yeilds @@{[$n + 5]} widgets\n";
d420 1
a420 1
block.  An inner block may countermand that with 
d433 1
a433 1
    } 
d440 2
a441 2
A new feature contributing to readability in 5.001 is that the brackets
around a symbolic reference behave more like quotes, just as they
d458 1
a458 1
5.000, though Perl 4 allowed it in the spaceless form.)  Note that this
d472 1
a472 1
you can just write
d489 1
a489 1
But it will no longer warn you about using lowercase words, since the
d499 2
a500 2
If you try to dereference the key, it won't do a hard dereference, and 
you won't accomplish what you're attemping.  You might want to do something
@


1.1.1.1
log
@Import of Perl 5.003 into the tree.  Makefile.bsd-wrapper and
config.sh.OpenBSD are the only local changes.
@
text
@@


1.1.1.2
log
@perl5.005_03
@
text
@a4 6
=head1 NOTE

This is complete documentation about all aspects of references.
For a shorter, tutorial introduction to just the essential features,
see L<perlreftut>.

d8 7
a14 7
structures, because all references had to be symbolic--and even then
it was difficult to refer to a variable instead of a symbol table entry.
Perl now not only makes it easier to use symbolic references to variables,
but also lets you have "hard" references to any piece of data or code.
Any scalar may hold a hard reference.  Because arrays and hashes contain
scalars, you can now easily build arrays of arrays, arrays of hashes,
hashes of arrays, arrays of hashes of functions, and so on.
d17 17
a33 28
automatically freeing the thing referred to when its reference count goes
to zero.  (Note: the reference counts for values in self-referential or
cyclic data structures may not go to zero without a little help; see
L<perlobj/"Two-Phased Garbage Collection"> for a detailed explanation.)
If that thing happens to be an object, the object is destructed.  See
L<perlobj> for more about objects.  (In a sense, everything in Perl is an
object, but we usually reserve the word for references to objects that
have been officially "blessed" into a class package.)

Symbolic references are names of variables or other objects, just as a
symbolic link in a Unix filesystem contains merely the name of a file.
The C<*glob> notation is a kind of symbolic reference.  (Symbolic
references are sometimes called "soft references", but please don't call
them that; references are confusing enough without useless synonyms.)

In contrast, hard references are more like hard links in a Unix file
system: They are used to access an underlying object without concern for
what its (other) name is.  When the word "reference" is used without an
adjective, as in the following paragraph, it is usually talking about a
hard reference.

References are easy to use in Perl.  There is just one overriding
principle: Perl does no implicit referencing or dereferencing.  When a
scalar is holding a reference, it always behaves as a simple scalar.  It
doesn't magically start being an array or hash or subroutine; you have to
tell it explicitly to do so, by dereferencing it.

=head2 Making References
d35 1
a35 1
References can be created in several ways.
d42 2
a43 2
(This works much like the & (address-of) operator in C.)  Note
that this typically creates I<ANOTHER> reference to a variable, because
d52 1
a52 1
    $globref   = \*foo;
a53 5
It isn't possible to create a true reference to an IO handle (filehandle
or dirhandle) using the backslash operator.  The most you can get is a
reference to a typeglob, which is actually a complete symbol table entry.
But see the explanation of the C<*foo{THING}> syntax below.  However,
you can still use type globs and globrefs as though they were IO handles.
d57 1
a57 1
A reference to an anonymous array can be created using square
d62 2
a63 2
Here we've created a reference to an anonymous array of three elements
whose final element is itself a reference to another anonymous array of three
d65 1
a65 1
access this.  For example, after the above, C<$arrayref-E<gt>[2][1]> would have
d72 2
a73 7
    @@list = (\$a, \@@b, \%c);
    @@list = \($a, @@b, %c);	# same thing!

As a special case, C<\(@@foo)> returns a list of references to the contents
of C<@@foo>, not a reference to C<@@foo> itself.  Likewise for C<%foo>,
except that the key references are to copies (since the keys are just
strings rather than full-fledged scalars).
d77 1
a77 1
A reference to an anonymous hash can be created using curly
d85 1
a85 1
Anonymous hash and array composers like these can be intermixed freely to
a105 9
On the other hand, if you want the other meaning, you can do this:

    sub showem {        { @@_ } }   # ambiguous (currently ok, but may change)
    sub showem {       {; @@_ } }   # ok
    sub showem { { return @@_ } }   # ok

Note how the leading C<+{> and C<{;> always serve to disambiguate
the expression to mean either the HASH reference, or the BLOCK.

d108 1
a108 1
A reference to an anonymous subroutine can be created by using
d116 1
a116 1
matter how many times you execute that particular line (unless you're in an
d129 2
a130 2
do object-oriented stuff with it, though Perl already provides a different
mechanism to do that--see L<perlobj>.
d160 1
a160 1
This applies only to lexical variables, by the way.  Dynamic variables
d171 2
a172 2
even while it's also being an object.  Constructors are often
named new() and called indirectly:
a175 12
But don't have to be:

    $objref   = Doggie->new(Tail => 'short', Ears => 'long');

    use Term::Cap;
    $terminal = Term::Cap->Tgetent( { OSPEED => 9600 });

    use Tk;
    $main    = MainWindow->new();
    $menubar = $main->Frame(-relief              => "raised",
                            -borderwidth         => 2)

d179 1
a179 1
dereference them in a context that assumes they exist.  Because we haven't
d184 3
a186 33
A reference can be created by using a special syntax, lovingly known as
the *foo{THING} syntax.  *foo{THING} returns a reference to the THING
slot in *foo (which is the symbol table entry which holds everything
known as foo).

    $scalarref = *foo{SCALAR};
    $arrayref  = *ARGV{ARRAY};
    $hashref   = *ENV{HASH};
    $coderef   = *handler{CODE};
    $ioref     = *STDIN{IO};
    $globref   = *foo{GLOB};

All of these are self-explanatory except for *foo{IO}.  It returns the
IO handle, used for file handles (L<perlfunc/open>), sockets
(L<perlfunc/socket> and L<perlfunc/socketpair>), and directory handles
(L<perlfunc/opendir>).  For compatibility with previous versions of
Perl, *foo{FILEHANDLE} is a synonym for *foo{IO}.

*foo{THING} returns undef if that particular THING hasn't been used yet,
except in the case of scalars.  *foo{SCALAR} returns a reference to an
anonymous scalar if $foo hasn't been used yet.  This might change in a
future release.

*foo{IO} is an alternative to the \*HANDLE mechanism given in
L<perldata/"Typeglobs and Filehandles"> for passing filehandles
into or out of subroutines, or storing into larger data structures.
Its disadvantage is that it won't create a new filehandle for you.
Its advantage is that you have no risk of clobbering more than you want
to with a typeglob assignment, although if you assign to a scalar instead
of a typeglob, you're ok.

    splutter(*STDOUT);
    splutter(*STDOUT{IO});
d188 1
d194 1
a194 3
    $rec = get_rec(*STDIN);
    $rec = get_rec(*STDIN{IO});

a201 2
=head2 Using References

d210 3
a212 3
Anywhere you'd put an identifier (or chain of identifiers) as part
of a variable or subroutine name, you can replace the identifier with
a simple scalar variable containing a reference of the correct type:
d233 4
a236 4
Anywhere you'd put an identifier (or chain of identifiers) as part of a
variable or subroutine name, you can replace the identifier with a
BLOCK returning a reference of the correct type.  In other words, the
previous examples could be written like this:
d243 1
a243 1
    $globref->print("output\n");  # iff IO::Handle is loaded
d249 1
a249 1
    &{ $dispatch{$index} }(1,2,3);	# call correct routine
d254 1
a254 1
though, you could use parentheses instead of braces.  That's not the case.
d269 3
a271 7
Subroutine calls and lookups of individual array elements arise often
enough that it gets cumbersome to use method 2.  As a form of
syntactic sugar, the examples for method 2 may be written:

    $arrayref->[0] = "January";   # Array element
    $hashref->{"KEY"} = "VALUE";  # Hash element
    $coderef->(1,2,3);            # Subroutine call
d273 4
a276 1
The left side of the arrow can be any expression returning a reference,
a287 1
This process is called I<autovivification>.
d317 2
a318 2
The bless() operator may be used to associate the object a reference
points to with a package functioning as an object class.  See L<perlobj>.
d320 1
a320 1
A typeglob may be dereferenced the same way a reference can, because
d335 1
a335 1
    print "That yields @@{[$n + 5]} widgets\n";
d367 1
a367 1
block.  An inner block may countermand that with
d371 3
a373 3
Only package variables (globals, even if localized) are visible to
symbolic references.  Lexical variables (declared with my()) aren't in
a symbol table, and thus are invisible to this mechanism.  For example:
d375 2
a376 2
    local $value = 10;
    $ref = "value";
d380 1
a380 1
    }
d387 2
a388 2
A new feature contributing to readability in perl version 5.001 is that the
brackets around a symbolic reference behave more like quotes, just as they
d405 1
a405 1
Perl 5.000, though Perl 4 allowed it in the spaceless form.)  Note that this
d419 1
a419 1
you can write just
d436 1
a436 1
But it will no longer warn you about using lowercase words, because the
a438 105
=head2 Pseudo-hashes: Using an array as a hash

WARNING:  This section describes an experimental feature.  Details may
change without notice in future versions.

Beginning with release 5.005 of Perl you can use an array reference
in some contexts that would normally require a hash reference.  This
allows you to access array elements using symbolic names, as if they
were fields in a structure.

For this to work, the array must contain extra information.  The first
element of the array has to be a hash reference that maps field names
to array indices.  Here is an example:

   $struct = [{foo => 1, bar => 2}, "FOO", "BAR"];

   $struct->{foo};  # same as $struct->[1], i.e. "FOO"
   $struct->{bar};  # same as $struct->[2], i.e. "BAR"

   keys %$struct;   # will return ("foo", "bar") in some order
   values %$struct; # will return ("FOO", "BAR") in same some order

   while (my($k,$v) = each %$struct) {
       print "$k => $v\n";
   }

Perl will raise an exception if you try to delete keys from a pseudo-hash
or try to access nonexistent fields.  For better performance, Perl can also
do the translation from field names to array indices at compile time for
typed object references.  See L<fields>.


=head2 Function Templates

As explained above, a closure is an anonymous function with access to the
lexical variables visible when that function was compiled.  It retains
access to those variables even though it doesn't get run until later,
such as in a signal handler or a Tk callback.

Using a closure as a function template allows us to generate many functions
that act similarly.  Suppose you wanted functions named after the colors
that generated HTML font changes for the various colors:

    print "Be ", red("careful"), "with that ", green("light");

The red() and green() functions would be very similar.  To create these,
we'll assign a closure to a typeglob of the name of the function we're
trying to build.  

    @@colors = qw(red blue green yellow orange purple violet);
    for my $name (@@colors) {
        no strict 'refs';	# allow symbol table manipulation
        *$name = *{uc $name} = sub { "<FONT COLOR='$name'>@@_</FONT>" };
    } 

Now all those different functions appear to exist independently.  You can
call red(), RED(), blue(), BLUE(), green(), etc.  This technique saves on
both compile time and memory use, and is less error-prone as well, since
syntax checks happen at compile time.  It's critical that any variables in
the anonymous subroutine be lexicals in order to create a proper closure.
That's the reasons for the C<my> on the loop iteration variable.

This is one of the only places where giving a prototype to a closure makes
much sense.  If you wanted to impose scalar context on the arguments of
these functions (probably not a wise idea for this particular example),
you could have written it this way instead:

    *$name = sub ($) { "<FONT COLOR='$name'>$_[0]</FONT>" };

However, since prototype checking happens at compile time, the assignment
above happens too late to be of much use.  You could address this by
putting the whole loop of assignments within a BEGIN block, forcing it
to occur during compilation.

Access to lexicals that change over type--like those in the C<for> loop
above--only works with closures, not general subroutines.  In the general
case, then, named subroutines do not nest properly, although anonymous
ones do.  If you are accustomed to using nested subroutines in other
programming languages with their own private variables, you'll have to
work at it a bit in Perl.  The intuitive coding of this kind of thing
incurs mysterious warnings about ``will not stay shared''.  For example,
this won't work:

    sub outer {
        my $x = $_[0] + 35;
        sub inner { return $x * 19 }   # WRONG
        return $x + inner();
    } 

A work-around is the following:

    sub outer {
        my $x = $_[0] + 35;
        local *inner = sub { return $x * 19 };
        return $x + inner();
    } 

Now inner() can only be called from within outer(), because of the
temporary assignments of the closure (anonymous subroutine).  But when
it does, it has normal access to the lexical variable $x from the scope
of outer().

This has the interesting effect of creating a function local to another
function, something not normally supported in Perl.

d446 2
a447 2
If you try to dereference the key, it won't do a hard dereference, and
you won't accomplish what you're attempting.  You might want to do something
a455 2
The standard Tie::RefHash module provides a convenient workaround to this.

d463 2
a464 2
complex data structures, and L<perltoot>, L<perlobj>, and L<perlbot>
for how to use them to create objects.
@


1.1.1.3
log
@virgin perl 5.6.0
@
text
@d24 1
a24 1
to zero.  (Reference counts for values in self-referential or
d34 1
a34 1
The C<*glob> notation is something of a of symbolic reference.  (Symbolic
d59 2
a60 2
(This works much like the & (address-of) operator in C.)  
This typically creates I<another> reference to a variable, because
d87 1
a87 1
access this.  For example, after the above, C<< $arrayref->[2][1] >> would have
d90 1
a90 1
Taking a reference to an enumerated list is not the same
d139 1
a139 1
The leading C<+{> and C<{;> always serve to disambiguate
d149 2
a150 2
Note the semicolon.  Except for the code
inside not being immediately executed, a C<sub {}> is not so much a
d153 1
a153 1
C<eval("...")>), $coderef will still have a reference to the I<same>
d157 1
a157 1
that is, variables lexically visible within the current scope.  Closure
d160 1
a160 1
context even when it's called outside the context.
d168 5
a172 3
You might also think of closure as a way to write a subroutine
template without using eval().  Here's a small example of how
closures work:
d191 4
a194 4
Note particularly that $x continues to refer to the value passed
into newprint() I<despite> "my $x" having gone out of scope by the
time the anonymous subroutine runs.  That's what a closure is all
about.
d203 1
a203 1
Perl objects are just references to a special type of object that happens to know
d244 5
a248 5
All of these are self-explanatory except for C<*foo{IO}>.  It returns
the IO handle, used for file handles (L<perlfunc/open>), sockets
(L<perlfunc/socket> and L<perlfunc/socketpair>), and directory
handles (L<perlfunc/opendir>).  For compatibility with previous
versions of Perl, C<*foo{FILEHANDLE}> is a synonym for C<*foo{IO}>.
d250 2
a251 2
C<*foo{THING}> returns undef if that particular THING hasn't been used yet,
except in the case of scalars.  C<*foo{SCALAR}> returns a reference to an
d255 1
a255 1
C<*foo{IO}> is an alternative to the C<*HANDLE> mechanism given in
d259 3
a261 5
Its advantage is that you have less risk of clobbering more than
you want to with a typeglob assignment.  (It still conflates file
and directory handles, though.)  However, if you assign the incoming
value to a scalar instead of a typeglob as we do in the examples
below, there's no risk of that happening.
d263 2
a264 2
    splutter(*STDOUT);		# pass the whole glob
    splutter(*STDOUT{IO});	# pass both file and dir handles
d271 2
a272 2
    $rec = get_rec(*STDIN);	# pass the whole glob
    $rec = get_rec(*STDIN{IO}); # pass both file and dir handles
d302 1
a302 1
It's important to understand that we are specifically I<not> dereferencing
d304 1
a304 1
scalar variable happens I<before> it does any key lookups.  Anything more
d337 1
a337 1
I<not> case 2:
d359 2
a360 2
including a previous dereference.  Note that C<$array[$x]> is I<not> the
same thing as C<< $array->[$x] >> here:
d368 1
a368 1
C<{"foo"}> in it.  Likewise C<< $array[$x]->{"foo"} >> will automatically get
d372 1
a372 1
One more thing here.  The arrow is optional I<between> brackets
d397 2
a398 15
Using a string or number as a reference produces a symbolic reference,
as explained above.  Using a reference as a number produces an
integer representing its storage location in memory.  The only
useful thing to be done with this is to compare two references
numerically to see whether they refer to the same location.

    if ($ref1 == $ref2) {  # cheap numeric compare of references
	print "refs 1 and 2 refer to the same thing\n";
    }

Using a reference as a string produces both its referent's type,
including any package blessing as described in L<perlobj>, as well
as the numeric address expressed in hex.  The ref() operator returns
just the type of thing the reference is pointing to, without the
address.  See L<perlfunc/ref> for details and examples of its use.
d404 1
a404 1
the dereference syntax always indicates the type of reference desired.
d424 3
a426 3
reference is already defined, but I<isn't> a hard reference.  If you
use it as a reference, it'll be treated as a symbolic
reference.  That is, the value of the scalar is taken to be the I<name>
d442 1
a442 1
This is powerful, and slightly dangerous, in that it's possible
d477 1
a477 1
has always meant to print "pop on over", even though push is
d488 1
a488 1
Perl 5.000, though Perl 4 allowed it in the spaceless form.)  This
d518 1
a518 2
The C<use warnings> pragma or the B<-w> switch will warn you if it
interprets a reserved word as a string.
d524 1
a524 1
B<WARNING>:  This section describes an experimental feature.  Details may
d527 1
a527 1
Beginning with release 5.005 of Perl, you may use an array reference
d536 1
a536 1
    $struct = [{foo => 1, bar => 2}, "FOO", "BAR"];
d538 2
a539 2
    $struct->{foo};  # same as $struct->[1], i.e. "FOO"
    $struct->{bar};  # same as $struct->[2], i.e. "BAR"
d541 2
a542 2
    keys %$struct;   # will return ("foo", "bar") in some order
    values %$struct; # will return ("FOO", "BAR") in same some order
d544 1
a544 1
    while (my($k,$v) = each %$struct) {
d546 6
a551 1
    }
a552 40
Perl will raise an exception if you try to access nonexistent fields.
To avoid inconsistencies, always use the fields::phash() function
provided by the C<fields> pragma.

    use fields;
    $pseudohash = fields::phash(foo => "FOO", bar => "BAR");

For better performance, Perl can also do the translation from field
names to array indices at compile time for typed object references.
See L<fields>.

There are two ways to check for the existence of a key in a
pseudo-hash.  The first is to use exists().  This checks to see if the
given field has ever been set.  It acts this way to match the behavior
of a regular hash.  For instance:

    use fields;
    $phash = fields::phash([qw(foo bar pants)], ['FOO']);
    $phash->{pants} = undef;

    print exists $phash->{foo};    # true, 'foo' was set in the declaration
    print exists $phash->{bar};    # false, 'bar' has not been used.
    print exists $phash->{pants};  # true, your 'pants' have been touched

The second is to use exists() on the hash reference sitting in the
first array element.  This checks to see if the given key is a valid
field in the pseudo-hash.

    print exists $phash->[0]{bar};	# true, 'bar' is a valid field
    print exists $phash->[0]{shoes};# false, 'shoes' can't be used

delete() on a pseudo-hash element only deletes the value corresponding
to the key, not the key itself.  To delete the key, you'll have to
explicitly delete it from the first hash element.

    print delete $phash->{foo};     # prints $phash->[1], "FOO"
    print exists $phash->{foo};     # false
    print exists $phash->[0]{foo};  # true, key still exists
    print delete $phash->[0]{foo};  # now key is gone
    print $phash->{foo};            # runtime exception
d567 1
a567 1
The red() and green() functions would be similar.  To create these,
d601 1
a601 1
work at it a bit in Perl.  The intuitive coding of this type of thing
d649 1
a649 1
Some pathological examples of the use of references can be found
@


1.1.1.4
log
@stock perl 5.8.0 from CPAN
@
text
@d34 1
a34 1
The C<*glob> notation is something of a symbolic reference.  (Symbolic
d246 1
a246 3
versions of Perl, C<*foo{FILEHANDLE}> is a synonym for C<*foo{IO}>, though it
is deprecated as of 5.8.0.  If deprecation warnings are in effect, it will warn
of its use.
a539 7

B<NOTE>: The current user-visible implementation of pseudo-hashes
(the weird use of the first array element) is deprecated starting from
Perl 5.8.0 and will be removed in Perl 5.10.0, and the feature will be
implemented differently.  Not only is the current interface rather ugly,
but the current implementation slows down normal array and hash use quite
noticeably.  The 'fields' pragma interface will remain available.
@


1.1.1.5
log
@perl 5.8.8 import
@
text
@a1 1
X<reference> X<pointer> X<data structure> X<structure> X<struct>
a36 2
X<reference, symbolic> X<reference, soft>
X<symbolic reference> X<soft reference>
a42 1
X<reference, hard> X<hard reference>
a50 1
X<reference, creation> X<referencing>
a56 1
X<\> X<backslash>
a77 2
X<array, anonymous> X<[> X<[]> X<square bracket>
X<bracket, square> X<arrayref> X<array reference> X<reference, array>
a102 2
X<hash, anonymous> X<{> X<{}> X<curly bracket>
X<bracket, curly> X<brace> X<hashref> X<hash reference> X<reference, hash>
a142 2
X<subroutine, anonymous> X<subroutine, reference> X<reference, subroutine>
X<scope, lexical> X<closure> X<lexical> X<lexical scope>
a198 1
X<constructor> X<new>
a222 1
X<autovivification>
a228 1
X<*foo{THING}> X<*>
a240 1
    $formatref = *foo{FORMAT};
a283 1
X<reference, use> X<dereferencing> X<dereference>
a314 1
X<${}> X<@@{}> X<%{}>
a350 1
X<autovivification> X<< -> >> X<arrow>
a387 1
X<encapsulation>
a403 1
X<reference, numeric context>
a413 1
X<reference, string context>
a435 2
X<reference, symbolic> X<reference, soft>
X<symbolic reference> X<soft reference>
a538 1
X<pseudo-hash> X<pseudo hash> X<pseudohash>
a612 2
X<scope, lexical> X<closure> X<lexical> X<lexical scope>
X<subroutine, nested> X<sub, nested> X<subroutine, local> X<sub, local>
d614 4
a617 4
As explained above, an anonymous function with access to the lexical
variables visible when that function was compiled, creates a closure.  It
retains access to those variables even though it doesn't get run until
later, such as in a signal handler or a Tk callback.
d657 5
a661 7
ones do. Thus is because named subroutines are created (and capture any
outer lexicals) only once at compile time, whereas anonymous subroutines
get to capture each time you execute the 'sub' operator.  If you are
accustomed to using nested subroutines in other programming languages with
their own private variables, you'll have to work at it a bit in Perl.  The
intuitive coding of this type of thing incurs mysterious warnings about
"will not stay shared".  For example, this won't work:
d667 1
a667 1
    }
d675 1
a675 1
    }
a685 1
X<reference, string context> X<reference, use as hash key>
@


1.1.1.6
log
@import perl 5.10.0 from CPAN
@
text
@d213 7
a219 7
References are often returned by special subroutines called constructors.  Perl
objects are just references to a special type of object that happens to know
which package it's associated with.  Constructors are just special subroutines
that know how to create that association.  They do so by starting with an
ordinary reference, and it remains an ordinary reference even while it's also
being an object.  Constructors are often named C<new()>.  You I<can> call them
indirectly:
d221 1
a221 1
    $objref = new Doggie( Tail => 'short', Ears => 'long' );
d223 1
a223 2
But that can produce ambiguous syntax in certain cases, so it's often
better to use the direct method invocation approach:
d332 1
d369 1
d407 1
a456 6
Similarly, an expression that returns a reference to a scalar can be
dereferenced via C<${...}>. Thus, the above expression may be written
as:

    print "That yields ${\($n + 5)} widgets\n";

d565 71
a635 2
Pseudo-hashes have been removed from Perl.  The 'fields' pragma
remains available.
d681 10
a690 19
Access to lexicals that change over time--like those in the C<for> loop
above, basically aliases to elements from the surrounding lexical scopes--
only works with anonymous subs, not with named subroutines. Generally
said, named subroutines do not nest properly and should only be declared
in the main package scope.

This is because named subroutines are created at compile time so their
lexical variables get assigned to the parent lexicals from the first
execution of the parent block. If a parent scope is entered a second
time, its lexicals are created again, while the nested subs still
reference the old ones.

Anonymous subroutines get to capture each time you execute the C<sub>
operator, as they are created on the fly. If you are accustomed to using
nested subroutines in other programming languages with their own private
variables, you'll have to work at it a bit in Perl.  The intuitive coding
of this type of thing incurs mysterious warnings about "will not stay
shared" due to the reasons explained above. 
For example, this won't work:
d707 3
a709 3
temporary assignments of the anonymous subroutine. But when it does,
it has normal access to the lexical variable $x from the scope of
outer() at the time outer is invoked.
@


1.1.1.7
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d27 1
a27 1
L</"Circular References"> for a detailed explanation.)
a53 13
References are easy to use in Perl.  There is just one overriding
principle: in general, Perl does no implicit referencing or dereferencing.
When a scalar is holding a reference, it always behaves as a simple scalar.
It doesn't magically start being an array or hash or subroutine; you have to
tell it explicitly to do so, by dereferencing it.

That said, be aware that Perl version 5.14 introduces an exception
to the rule, for syntactic convenience.  Experimental array and hash container
function behavior allows array and hash references to be handled by Perl as
if they had been explicitly syntactically dereferenced.  See
L<perl5140delta/"Syntactical Enhancements">
and L<perlfunc> for details.

a460 52
=head2 Circular References
X<circular reference> X<reference, circular>

It is possible to create a "circular reference" in Perl, which can lead
to memory leaks. A circular reference occurs when two references
contain a reference to each other, like this:

    my $foo = {};
    my $bar = { foo => $foo };
    $foo->{bar} = $bar;

You can also create a circular reference with a single variable:

    my $foo;
    $foo = \$foo;

In this case, the reference count for the variables will never reach 0,
and the references will never be garbage-collected. This can lead to
memory leaks.

Because objects in Perl are implemented as references, it's possible to
have circular references with objects as well. Imagine a TreeNode class
where each node references its parent and child nodes. Any node with a
parent will be part of a circular reference.

You can break circular references by creating a "weak reference". A
weak reference does not increment the reference count for a variable,
which means that the object can go out of scope and be destroyed. You
can weaken a reference with the C<weaken> function exported by the
L<Scalar::Util> module.

Here's how we can make the first example safer:

    use Scalar::Util 'weaken';

    my $foo = {};
    my $bar = { foo => $foo };
    $foo->{bar} = $bar;

    weaken $foo->{bar};

The reference from C<$foo> to C<$bar> has been weakened. When the
C<$bar> variable goes out of scope, it will be garbage-collected. The
next time you look at the value of the C<< $foo->{bar} >> key, it will
be C<undef>.

This action at a distance can be confusing, so you should be careful
with your use of weaken. You should weaken the reference in the
variable that will go out of scope I<first>. That way, the longer-lived
variable will contain the expected reference until it goes out of
scope.

d513 3
a515 3
Since Perl verion 5.001, brackets around a symbolic reference can simply
serve to isolate an identifier or variable name from the rest of an
expression, just as they always have within a string.  For example,
d521 2
a522 2
a reserved word.  In 5.001, this was generalized to work the same
without the enclosing double quotes, so that
d539 3
a541 3
Similarly, because of all the subscripting that is done using single words,
the same rule applies to any bareword that is used for subscripting a hash.
So now, instead of writing
d685 1
a685 1
complex data structures, and L<perlootut> and L<perlobj>
@


1.1.1.8
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d49 6
a270 2
    $globname  = *foo{NAME};    # "foo"
    $pkgname   = *foo{PACKAGE}; # "main"
d272 1
a272 2
Most of these are self-explanatory, but C<*foo{IO}>
deserves special attention.  It returns
a284 7
C<*foo{NAME}> and C<*foo{PACKAGE}> are the exception, in that they return
strings, rather than references.  These return the package and name of the
typeglob itself, rather than one that has been assigned to it.  So, after
C<*foo=*Foo::bar>, C<*foo> will become "*Foo::bar" when used as a string,
but C<*foo{PACKAGE}> and C<*foo{NAME}> will continue to produce "main" and
"foo", respectively.

d546 1
a546 1
    &$name();			# Calls &foo()
d578 1
a578 1
Brackets around a symbolic reference can simply
d586 1
a586 1
a reserved word.  This is generalized to work the same
d595 2
a596 1
will have the same effect.  This
@


1.1.1.9
log
@Import perl-5.20.1
@
text
@d152 1
a152 2
    sub showem {        { @@_ } }   # ambiguous (currently ok,
                                   # but may change)
a744 60

=head1 Postfix Dereference Syntax

Beginning in v5.20.0, a postfix syntax for using references is
available.  It behaves as described in L</Using References>, but instead
of a prefixed sigil, a postfixed sigil-and-star is used.

For example:

    $r = \@@a;
    @@b = $r->@@*; # equivalent to @@$r or @@{ $r }

    $r = [ 1, [ 2, 3 ], 4 ];
    $r->[1]->@@*;  # equivalent to @@{ $r->[1] }

This syntax must be enabled with C<use feature 'postderef'>.  It is
experimental, and will warn by default unless C<no warnings
'experimental::postderef'> is in effect.

Postfix dereference should work in all circumstances where block
(circumfix) dereference worked, and should be entirely equivalent.  This
syntax allows dereferencing to be written and read entirely
left-to-right.  The following equivalencies are defined:

  $sref->$*;  # same as  ${ $sref }
  $aref->@@*;  # same as  @@{ $aref }
  $aref->$#*; # same as $#{ $aref }
  $href->%*;  # same as  %{ $href }
  $cref->&*;  # same as  &{ $cref }
  $gref->**;  # same as  *{ $gref }

Note especially that C<< $cref->&* >> is I<not> equivalent to C<<
$cref->() >>, and can serve different purposes.

Glob elements can be extracted through the postfix dereferencing feature:

  $gref->*{SCALAR}; # same as *{ $gref }{SCALAR}

Postfix array and scalar dereferencing I<can> be used in interpolating
strings (double quotes or the C<qq> operator), but only if the
additional C<postderef_qq> feature is enabled.

=head2 Postfix Reference Slicing

Value slices of arrays and hashes may also be taken with postfix
dereferencing notation, with the following equivalencies:

  $aref->@@[ ... ];  # same as @@$aref[ ... ]
  $href->@@{ ... };  # same as @@$href{ ... }

Postfix key/value pair slicing, added in 5.20.0 and documented in
L<the KeyE<sol>Value Hash Slices section of perldata|perldata/"Key/Value Hash
Slices">, also behaves as expected:

  $aref->%[ ... ];  # same as %$aref[ ... ]
  $href->%{ ... };  # same as %$href{ ... }

As with postfix array, postfix value slice dereferencing I<can> be used
in interpolating strings (double quotes or the C<qq> operator), but only
if the additional C<postderef_qq> L<feature> is enabled.
@


1.1.1.10
log
@Import perl-5.20.2
@
text
@d72 1
a72 1
(This works much like the & (address-of) operator in C.)
d110 1
a110 1
    @@list = \($a, @@b, %c);      # same thing!
d125 2
a126 2
        'Adam'  => 'Eve',
        'Clyde' => 'Bonnie',
d193 2
a194 2
        my $x = shift;
        return sub { my $y = shift; print "$x, $y!\n"; };
d300 2
a301 2
    splutter(*STDOUT);          # pass the whole glob
    splutter(*STDOUT{IO});      # pass both file and dir handles
d304 2
a305 2
        my $fh = shift;
        print $fh "her um well a hmmm\n";
d308 1
a308 1
    $rec = get_rec(*STDIN);     # pass the whole glob
d312 2
a313 2
        my $fh = shift;
        return scalar <$fh>;
d368 1
a368 1
    &{ $dispatch{$index} }(1,2,3);      # call correct routine
d377 4
a380 4
    $$hashref{"KEY"}   = "VALUE";       # CASE 0
    ${$hashref}{"KEY"} = "VALUE";       # CASE 1
    ${$hashref{"KEY"}} = "VALUE";       # CASE 2
    ${$hashref->{"KEY"}} = "VALUE";     # CASE 3
d443 1
a443 1
        print "refs 1 and 2 refer to the same thing\n";
d546 6
a551 6
    $$name = 1;                 # Sets $foo
    ${$name} = 2;               # Sets $foo
    ${$name x 2} = 3;           # Sets $foofoo
    $name->[0] = 4;             # Sets $foo[0]
    @@$name = ();                # Clears @@foo
    &$name();                   # Calls &foo()
d553 1
a553 1
    ${"${pack}::$name"} = 5;    # Sets $THAT::foo without eval
d574 2
a575 2
        my $value = 20;
        print $$ref;
d605 2
a606 2
    ${ bareword };      # Okay, means $bareword.
    ${ "bareword" };    # Error, symbolic reference.
d658 1
a658 1
trying to build.
d662 1
a662 1
        no strict 'refs';       # allow symbol table manipulation
d664 1
a664 1
    }
d702 1
a702 1
shared" due to the reasons explained above.
@


1.1.1.11
log
@Import perl-5.24.2
@
text
@d54 7
d275 2
a276 3
is discouraged, to encourage a consistent use of one name: IO.  On perls
between v5.8 and v5.22, it will issue a deprecation warning, but this
deprecation has since been rescinded.
d761 3
a763 3
In Perl 5.20 and 5.22, this syntax must be enabled with C<use feature
'postderef'>. As of Perl 5.24, no feature declarations are required to make
it available.
d786 1
a786 1
C<postderef_qq> feature is enabled.
d805 1
a805 112
if the C<postderef_qq> L<feature> is enabled.

=head1 Assigning to References

Beginning in v5.22.0, the referencing operator can be assigned to.  It
performs an aliasing operation, so that the variable name referenced on the
left-hand side becomes an alias for the thing referenced on the right-hand
side:

    \$a = \$b; # $a and $b now point to the same scalar
    \&foo = \&bar; # foo() now means bar()

This syntax must be enabled with C<use feature 'refaliasing'>.  It is
experimental, and will warn by default unless C<no warnings
'experimental::refaliasing'> is in effect.

These forms may be assigned to, and cause the right-hand side to be
evaluated in scalar context:

    \$scalar
    \@@array
    \%hash
    \&sub
    \my $scalar
    \my @@array
    \my %hash
    \state $scalar # or @@array, etc.
    \our $scalar   # etc.
    \local $scalar # etc.
    \local our $scalar # etc.
    \$some_array[$index]
    \$some_hash{$key}
    \local $some_array[$index]
    \local $some_hash{$key}
    condition ? \$this : \$that[0] # etc.

Slicing operations and parentheses cause
the right-hand side to be evaluated in
list context:

    \@@array[5..7]
    (\@@array[5..7])
    \(@@array[5..7])
    \@@hash{'foo','bar'}
    (\@@hash{'foo','bar'})
    \(@@hash{'foo','bar'})
    (\$scalar)
    \($scalar)
    \(my $scalar)
    \my($scalar)
    (\@@array)
    (\%hash)
    (\&sub)
    \(&sub)
    \($foo, @@bar, %baz)
    (\$foo, \@@bar, \%baz)

Each element on the right-hand side must be a reference to a datum of the
right type.  Parentheses immediately surrounding an array (and possibly
also C<my>/C<state>/C<our>/C<local>) will make each element of the array an
alias to the corresponding scalar referenced on the right-hand side:

    \(@@a) = \(@@b); # @@a and @@b now have the same elements
    \my(@@a) = \(@@b); # likewise
    \(my @@a) = \(@@b); # likewise
    push @@a, 3; # but now @@a has an extra element that @@b lacks
    \(@@a) = (\$a, \$b, \$c); # @@a now contains $a, $b, and $c

Combining that form with C<local> and putting parentheses immediately
around a hash are forbidden (because it is not clear what they should do):

    \local(@@array) = foo(); # WRONG
    \(%hash)       = bar(); # wRONG

Assignment to references and non-references may be combined in lists and
conditional ternary expressions, as long as the values on the right-hand
side are the right type for each element on the left, though this may make
for obfuscated code:

    (my $tom, \my $dick, \my @@harry) = (\1, \2, [1..3]);
    # $tom is now \1
    # $dick is now 2 (read-only)
    # @@harry is (1,2,3)

    my $type = ref $thingy;
    ($type ? $type eq 'ARRAY' ? \@@foo : \$bar : $baz) = $thingy;

The C<foreach> loop can also take a reference constructor for its loop
variable, though the syntax is limited to one of the following, with an
optional C<my>, C<state>, or C<our> after the backslash:

    \$s
    \@@a
    \%h
    \&c

No parentheses are permitted.  This feature is particularly useful for
arrays-of-arrays, or arrays-of-hashes:

    foreach \my @@a (@@array_of_arrays) {
        frobnicate($a[0], $a[-1]);
    }

    foreach \my %h (@@array_of_hashes) {
        $h{gelastic}++ if $h{type} eq 'funny';
    }

B<CAVEAT:> Aliasing does not work correctly with closures.  If you try to
alias lexical variables from an inner subroutine or C<eval>, the aliasing
will only be visible within that inner sub, and will not affect the outer
subroutine where the variables are declared.  This bizarre behavior is
subject to change.
@


