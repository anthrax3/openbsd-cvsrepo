head	1.16;
access;
symbols
	PERL_5_24_2:1.1.1.15
	OPENBSD_6_1:1.16.0.4
	OPENBSD_6_1_BASE:1.16
	OPENBSD_6_0:1.15.0.8
	OPENBSD_6_0_BASE:1.15
	OPENBSD_5_9:1.15.0.2
	OPENBSD_5_9_BASE:1.15
	OPENBSD_5_8:1.15.0.4
	OPENBSD_5_8_BASE:1.15
	PERL_5_20_2:1.1.1.14
	OPENBSD_5_7:1.14.0.2
	OPENBSD_5_7_BASE:1.14
	PERL_5_20_1:1.1.1.13
	OPENBSD_5_6:1.13.0.4
	OPENBSD_5_6_BASE:1.13
	PERL_5_18_2:1.1.1.12
	PERL:1.1.1
	OPENBSD_5_5:1.12.0.6
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.12.0.2
	OPENBSD_5_4_BASE:1.12
	PERL_5_16_3:1.1.1.11
	OPENBSD_5_3:1.11.0.10
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.8
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.6
	OPENBSD_5_0:1.11.0.4
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.2
	OPENBSD_4_9_BASE:1.11
	PERL_5_12_2:1.1.1.10
	OPENBSD_4_8:1.10.0.4
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.2
	OPENBSD_4_7_BASE:1.10
	PERL_5_10_1:1.1.1.9
	OPENBSD_4_6:1.9.0.6
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.2
	OPENBSD_4_5_BASE:1.9
	PERL_5_10_0:1.1.1.8
	OPENBSD_4_4:1.8.0.10
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.8
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.6
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.4
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.2
	OPENBSD_4_0_BASE:1.8
	PERL_5_8_8:1.1.1.7
	OPENBSD_3_9:1.7.0.10
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.8
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.6
	OPENBSD_3_7_BASE:1.7
	PERL_5_8_6:1.1.1.6
	OPENBSD_3_6:1.7.0.4
	OPENBSD_3_6_BASE:1.7
	PERL_5_8_5:1.1.1.6
	PERL_5_8_3:1.1.1.6
	OPENBSD_3_5:1.7.0.2
	OPENBSD_3_5_BASE:1.7
	PERL_5_8_2:1.1.1.6
	OPENBSD_3_4:1.6.0.4
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.6.0.2
	OPENBSD_3_3_BASE:1.6
	PERL_5_8_0:1.1.1.5
	OPENBSD_3_2:1.5.0.6
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.4
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	PERL_5_6_1:1.1.1.4
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	PERL_5_6_0:1.1.1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	PERL_500503:1.1.1.2
	CPAN:1.1.1
	OPENBSD_2_5:1.2.0.6
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.4
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	perl5003:1.1.1.1
	lwall:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.16
date	2017.02.05.00.32.19;	author afresh1;	state Exp;
branches;
next	1.15;
commitid	cxJ08BvJA9Pt2PTM;

1.15
date	2015.04.25.19.14.48;	author afresh1;	state Exp;
branches;
next	1.14;
commitid	XRK22kO4se3v2i2I;

1.14
date	2014.11.17.20.57.07;	author afresh1;	state Exp;
branches;
next	1.13;
commitid	QP75iYx42Uo7mMxO;

1.13
date	2014.03.24.15.05.33;	author afresh1;	state Exp;
branches;
next	1.12;

1.12
date	2013.03.25.20.40.59;	author sthen;	state Exp;
branches;
next	1.11;

1.11
date	2010.09.24.15.07.04;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2009.10.12.18.24.47;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2008.09.29.17.36.17;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2006.03.28.19.23.11;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2003.12.03.03.02.46;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.10.27.22.25.34;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.24.18.35.59;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.06.17.07.39;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	99.04.29.22.52.19;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.11.30.07.59.29;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.08.19.10.13.05;	author downsj;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.08.19.10.13.05;	author downsj;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.04.29.22.41.00;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2000.04.06.16.10.30;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2001.05.24.18.24.48;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2002.10.27.22.15.06;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2003.12.03.02.44.24;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2006.03.28.18.49.24;	author millert;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2008.09.29.17.18.53;	author millert;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2009.10.12.18.10.38;	author millert;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	2010.09.24.14.49.06;	author millert;	state Exp;
branches;
next	1.1.1.11;

1.1.1.11
date	2013.03.25.20.09.26;	author sthen;	state Exp;
branches;
next	1.1.1.12;

1.1.1.12
date	2014.03.24.14.59.08;	author afresh1;	state Exp;
branches;
next	1.1.1.13;

1.1.1.13
date	2014.11.17.20.53.15;	author afresh1;	state Exp;
branches;
next	1.1.1.14;
commitid	B31cAbBIXiCqnL97;

1.1.1.14
date	2015.04.25.19.10.45;	author afresh1;	state Exp;
branches;
next	1.1.1.15;
commitid	Wpcs5S8qILgEZC7F;

1.1.1.15
date	2017.08.14.13.46.21;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.16
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@=head1 NAME
X<syntax>

perlsyn - Perl syntax

=head1 DESCRIPTION

A Perl program consists of a sequence of declarations and statements
which run from the top to the bottom.  Loops, subroutines, and other
control structures allow you to jump around within the code.

Perl is a B<free-form> language: you can format and indent it however
you like.  Whitespace serves mostly to separate tokens, unlike
languages like Python where it is an important part of the syntax,
or Fortran where it is immaterial.

Many of Perl's syntactic elements are B<optional>.  Rather than
requiring you to put parentheses around every function call and
declare every variable, you can often leave such explicit elements off
and Perl will figure out what you meant.  This is known as B<Do What I
Mean>, abbreviated B<DWIM>.  It allows programmers to be B<lazy> and to
code in a style with which they are comfortable.

Perl B<borrows syntax> and concepts from many languages: awk, sed, C,
Bourne Shell, Smalltalk, Lisp and even English.  Other
languages have borrowed syntax from Perl, particularly its regular
expression extensions.  So if you have programmed in another language
you will see familiar pieces in Perl.  They often work the same, but
see L<perltrap> for information about how they differ.

=head2 Declarations
X<declaration> X<undef> X<undefined> X<uninitialized>

The only things you need to declare in Perl are report formats and
subroutines (and sometimes not even subroutines).  A scalar variable holds
the undefined value (C<undef>) until it has been assigned a defined
value, which is anything other than C<undef>.  When used as a number,
C<undef> is treated as C<0>; when used as a string, it is treated as
the empty string, C<"">; and when used as a reference that isn't being
assigned to, it is treated as an error.  If you enable warnings,
you'll be notified of an uninitialized value whenever you treat
C<undef> as a string or a number.  Well, usually.  Boolean contexts,
such as:

    if ($a) {}

are exempt from warnings (because they care about truth rather than
definedness).  Operators such as C<++>, C<-->, C<+=>,
C<-=>, and C<.=>, that operate on undefined variables such as:

    undef $a;
    $a++;

are also always exempt from such warnings.

A declaration can be put anywhere a statement can, but has no effect on
the execution of the primary sequence of statements: declarations all
take effect at compile time.  All declarations are typically put at
the beginning or the end of the script.  However, if you're using
lexically-scoped private variables created with C<my()>,
C<state()>, or C<our()>, you'll have to make sure
your format or subroutine definition is within the same block scope
as the my if you expect to be able to access those private variables.

Declaring a subroutine allows a subroutine name to be used as if it were a
list operator from that point forward in the program.  You can declare a
subroutine without defining it by saying C<sub name>, thus:
X<subroutine, declaration>

    sub myname;
    $me = myname $0             or die "can't get myname";

A bare declaration like that declares the function to be a list operator,
not a unary operator, so you have to be careful to use parentheses (or
C<or> instead of C<||>.)  The C<||> operator binds too tightly to use after
list operators; it becomes part of the last element.  You can always use
parentheses around the list operators arguments to turn the list operator
back into something that behaves more like a function call.  Alternatively,
you can use the prototype C<($)> to turn the subroutine into a unary
operator:

  sub myname ($);
  $me = myname $0             || die "can't get myname";

That now parses as you'd expect, but you still ought to get in the habit of
using parentheses in that situation.  For more on prototypes, see
L<perlsub>.

Subroutines declarations can also be loaded up with the C<require> statement
or both loaded and imported into your namespace with a C<use> statement.
See L<perlmod> for details on this.

A statement sequence may contain declarations of lexically-scoped
variables, but apart from declaring a variable name, the declaration acts
like an ordinary statement, and is elaborated within the sequence of
statements as if it were an ordinary statement.  That means it actually
has both compile-time and run-time effects.

=head2 Comments
X<comment> X<#>

Text from a C<"#"> character until the end of the line is a comment,
and is ignored.  Exceptions include C<"#"> inside a string or regular
expression.

=head2 Simple Statements
X<statement> X<semicolon> X<expression> X<;>

The only kind of simple statement is an expression evaluated for its
side-effects.  Every simple statement must be terminated with a
semicolon, unless it is the final statement in a block, in which case
the semicolon is optional.  But put the semicolon in anyway if the
block takes up more than one line, because you may eventually add
another line.  Note that there are operators like C<eval {}>, C<sub {}>, and
C<do {}> that I<look> like compound statements, but aren't--they're just
TERMs in an expression--and thus need an explicit termination when used
as the last item in a statement.

=head2 Truth and Falsehood
X<truth> X<falsehood> X<true> X<false> X<!> X<not> X<negation> X<0>

The number 0, the strings C<'0'> and C<"">, the empty list C<()>, and
C<undef> are all false in a boolean context.  All other values are true.
Negation of a true value by C<!> or C<not> returns a special false value.
When evaluated as a string it is treated as C<"">, but as a number, it
is treated as 0.  Most Perl operators
that return true or false behave this way.

=head2 Statement Modifiers
X<statement modifier> X<modifier> X<if> X<unless> X<while>
X<until> X<when> X<foreach> X<for>

Any simple statement may optionally be followed by a I<SINGLE> modifier,
just before the terminating semicolon (or block ending).  The possible
modifiers are:

    if EXPR
    unless EXPR
    while EXPR
    until EXPR
    for LIST
    foreach LIST
    when EXPR

The C<EXPR> following the modifier is referred to as the "condition".
Its truth or falsehood determines how the modifier will behave.

C<if> executes the statement once I<if> and only if the condition is
true.  C<unless> is the opposite, it executes the statement I<unless>
the condition is true (that is, if the condition is false).

    print "Basset hounds got long ears" if length $ear >= 10;
    go_outside() and play() unless $is_raining;

The C<for(each)> modifier is an iterator: it executes the statement once
for each item in the LIST (with C<$_> aliased to each item in turn).

    print "Hello $_!\n" for qw(world Dolly nurse);

C<while> repeats the statement I<while> the condition is true.
C<until> does the opposite, it repeats the statement I<until> the
condition is true (or while the condition is false):

    # Both of these count from 0 to 10.
    print $i++ while $i <= 10;
    print $j++ until $j >  10;

The C<while> and C<until> modifiers have the usual "C<while> loop"
semantics (conditional evaluated first), except when applied to a
C<do>-BLOCK (or to the Perl4 C<do>-SUBROUTINE statement), in
which case the block executes once before the conditional is
evaluated.

This is so that you can write loops like:

    do {
        $line = <STDIN>;
        ...
    } until !defined($line) || $line eq ".\n"

See L<perlfunc/do>.  Note also that the loop control statements described
later will I<NOT> work in this construct, because modifiers don't take
loop labels.  Sorry.  You can always put another block inside of it
(for C<next>/C<redo>) or around it (for C<last>) to do that sort of thing.
X<next> X<last> X<redo>

For C<next> or C<redo>, just double the braces:

    do {{
        next if $x == $y;
        # do something here
    }} until $x++ > $z;

For C<last>, you have to be more elaborate and put braces around it:
X<last>

    {
        do {
            last if $x == $y**2;
            # do something here
        } while $x++ <= $z;
    }

If you need both C<next> and C<last>, you have to do both and also use a
loop label:

    LOOP: {
        do {{
            next if $x == $y;
            last LOOP if $x == $y**2;
            # do something here
        }} until $x++ > $z;
    }

B<NOTE:> The behaviour of a C<my>, C<state>, or
C<our> modified with a statement modifier conditional
or loop construct (for example, C<my $x if ...>) is
B<undefined>.  The value of the C<my> variable may be C<undef>, any
previously assigned value, or possibly anything else.  Don't rely on
it.  Future versions of perl might do something different from the
version of perl you try it out on.  Here be dragons.
X<my>

The C<when> modifier is an experimental feature that first appeared in Perl
5.14.  To use it, you should include a C<use v5.14> declaration.
(Technically, it requires only the C<switch> feature, but that aspect of it
was not available before 5.14.)  Operative only from within a C<foreach>
loop or a C<given> block, it executes the statement only if the smartmatch
C<< $_ ~~ I<EXPR> >> is true.  If the statement executes, it is followed by
a C<next> from inside a C<foreach> and C<break> from inside a C<given>.

Under the current implementation, the C<foreach> loop can be
anywhere within the C<when> modifier's dynamic scope, but must be
within the C<given> block's lexical scope.  This restricted may
be relaxed in a future release.  See L<"Switch Statements"> below.

=head2 Compound Statements
X<statement, compound> X<block> X<bracket, curly> X<curly bracket> X<brace>
X<{> X<}> X<if> X<unless> X<given> X<while> X<until> X<foreach> X<for> X<continue>

In Perl, a sequence of statements that defines a scope is called a block.
Sometimes a block is delimited by the file containing it (in the case
of a required file, or the program as a whole), and sometimes a block
is delimited by the extent of a string (in the case of an eval).

But generally, a block is delimited by curly brackets, also known as braces.
We will call this syntactic construct a BLOCK.

The following compound statements may be used to control flow:

    if (EXPR) BLOCK
    if (EXPR) BLOCK else BLOCK
    if (EXPR) BLOCK elsif (EXPR) BLOCK ...
    if (EXPR) BLOCK elsif (EXPR) BLOCK ... else BLOCK

    unless (EXPR) BLOCK
    unless (EXPR) BLOCK else BLOCK
    unless (EXPR) BLOCK elsif (EXPR) BLOCK ...
    unless (EXPR) BLOCK elsif (EXPR) BLOCK ... else BLOCK

    given (EXPR) BLOCK

    LABEL while (EXPR) BLOCK
    LABEL while (EXPR) BLOCK continue BLOCK

    LABEL until (EXPR) BLOCK
    LABEL until (EXPR) BLOCK continue BLOCK

    LABEL for (EXPR; EXPR; EXPR) BLOCK
    LABEL for VAR (LIST) BLOCK
    LABEL for VAR (LIST) BLOCK continue BLOCK

    LABEL foreach (EXPR; EXPR; EXPR) BLOCK
    LABEL foreach VAR (LIST) BLOCK
    LABEL foreach VAR (LIST) BLOCK continue BLOCK

    LABEL BLOCK
    LABEL BLOCK continue BLOCK

    PHASE BLOCK

The experimental C<given> statement is I<not automatically enabled>; see
L</"Switch Statements"> below for how to do so, and the attendant caveats.

Unlike in C and Pascal, in Perl these are all defined in terms of BLOCKs,
not statements.  This means that the curly brackets are I<required>--no
dangling statements allowed.  If you want to write conditionals without
curly brackets, there are several other ways to do it.  The following
all do the same thing:

    if (!open(FOO)) { die "Can't open $FOO: $!" }
    die "Can't open $FOO: $!" unless open(FOO);
    open(FOO)  || die "Can't open $FOO: $!";
    open(FOO) ? () : die "Can't open $FOO: $!";
        # a bit exotic, that last one

The C<if> statement is straightforward.  Because BLOCKs are always
bounded by curly brackets, there is never any ambiguity about which
C<if> an C<else> goes with.  If you use C<unless> in place of C<if>,
the sense of the test is reversed.  Like C<if>, C<unless> can be followed
by C<else>.  C<unless> can even be followed by one or more C<elsif>
statements, though you may want to think twice before using that particular
language construct, as everyone reading your code will have to think at least
twice before they can understand what's going on.

The C<while> statement executes the block as long as the expression is
L<true|/"Truth and Falsehood">.
The C<until> statement executes the block as long as the expression is
false.
The LABEL is optional, and if present, consists of an identifier followed
by a colon.  The LABEL identifies the loop for the loop control
statements C<next>, C<last>, and C<redo>.
If the LABEL is omitted, the loop control statement
refers to the innermost enclosing loop.  This may include dynamically
looking back your call-stack at run time to find the LABEL.  Such
desperate behavior triggers a warning if you use the C<use warnings>
pragma or the B<-w> flag.

If there is a C<continue> BLOCK, it is always executed just before the
conditional is about to be evaluated again.  Thus it can be used to
increment a loop variable, even when the loop has been continued via
the C<next> statement.

When a block is preceding by a compilation phase keyword such as C<BEGIN>,
C<END>, C<INIT>, C<CHECK>, or C<UNITCHECK>, then the block will run only
during the corresponding phase of execution.  See L<perlmod> for more details.

Extension modules can also hook into the Perl parser to define new
kinds of compound statements.  These are introduced by a keyword which
the extension recognizes, and the syntax following the keyword is
defined entirely by the extension.  If you are an implementor, see
L<perlapi/PL_keyword_plugin> for the mechanism.  If you are using such
a module, see the module's documentation for details of the syntax that
it defines.

=head2 Loop Control
X<loop control> X<loop, control> X<next> X<last> X<redo> X<continue>

The C<next> command starts the next iteration of the loop:

    LINE: while (<STDIN>) {
        next LINE if /^#/;      # discard comments
        ...
    }

The C<last> command immediately exits the loop in question.  The
C<continue> block, if any, is not executed:

    LINE: while (<STDIN>) {
        last LINE if /^$/;      # exit when done with header
        ...
    }

The C<redo> command restarts the loop block without evaluating the
conditional again.  The C<continue> block, if any, is I<not> executed.
This command is normally used by programs that want to lie to themselves
about what was just input.

For example, when processing a file like F</etc/termcap>.
If your input lines might end in backslashes to indicate continuation, you
want to skip ahead and get the next record.

    while (<>) {
        chomp;
        if (s/\\$//) {
            $_ .= <>;
            redo unless eof();
        }
        # now process $_
    }

which is Perl shorthand for the more explicitly written version:

    LINE: while (defined($line = <ARGV>)) {
        chomp($line);
        if ($line =~ s/\\$//) {
            $line .= <ARGV>;
            redo LINE unless eof(); # not eof(ARGV)!
        }
        # now process $line
    }

Note that if there were a C<continue> block on the above code, it would
get executed only on lines discarded by the regex (since redo skips the
continue block).  A continue block is often used to reset line counters
or C<m?pat?> one-time matches:

    # inspired by :1,$g/fred/s//WILMA/
    while (<>) {
        m?(fred)?    && s//WILMA $1 WILMA/;
        m?(barney)?  && s//BETTY $1 BETTY/;
        m?(homer)?   && s//MARGE $1 MARGE/;
    } continue {
        print "$ARGV $.: $_";
        close ARGV  if eof;             # reset $.
        reset       if eof;             # reset ?pat?
    }

If the word C<while> is replaced by the word C<until>, the sense of the
test is reversed, but the conditional is still tested before the first
iteration.

Loop control statements don't work in an C<if> or C<unless>, since
they aren't loops.  You can double the braces to make them such, though.

    if (/pattern/) {{
        last if /fred/;
        next if /barney/; # same effect as "last",
                          # but doesn't document as well
        # do something here
    }}

This is caused by the fact that a block by itself acts as a loop that
executes once, see L<"Basic BLOCKs">.

The form C<while/if BLOCK BLOCK>, available in Perl 4, is no longer
available.   Replace any occurrence of C<if BLOCK> by C<if (do BLOCK)>.

=head2 For Loops
X<for> X<foreach>

Perl's C-style C<for> loop works like the corresponding C<while> loop;
that means that this:

    for ($i = 1; $i < 10; $i++) {
        ...
    }

is the same as this:

    $i = 1;
    while ($i < 10) {
        ...
    } continue {
        $i++;
    }

There is one minor difference: if variables are declared with C<my>
in the initialization section of the C<for>, the lexical scope of
those variables is exactly the C<for> loop (the body of the loop
and the control sections).
X<my>

As a special case, if the test in the C<for> loop (or the corresponding
C<while> loop) is empty, it is treated as true.  That is, both

    for (;;) {
        ...
    }

and

    while () {
        ...
    }

are treated as infinite loops.

Besides the normal array index looping, C<for> can lend itself
to many other interesting applications.  Here's one that avoids the
problem you get into if you explicitly test for end-of-file on
an interactive file descriptor causing your program to appear to
hang.
X<eof> X<end-of-file> X<end of file>

    $on_a_tty = -t STDIN && -t STDOUT;
    sub prompt { print "yes? " if $on_a_tty }
    for ( prompt(); <STDIN>; prompt() ) {
        # do something
    }

Using C<readline> (or the operator form, C<< <EXPR> >>) as the
conditional of a C<for> loop is shorthand for the following.  This
behaviour is the same as a C<while> loop conditional.
X<readline> X<< <> >>

    for ( prompt(); defined( $_ = <STDIN> ); prompt() ) {
        # do something
    }

=head2 Foreach Loops
X<for> X<foreach>

The C<foreach> loop iterates over a normal list value and sets the scalar
variable VAR to be each element of the list in turn.  If the variable
is preceded with the keyword C<my>, then it is lexically scoped, and
is therefore visible only within the loop.  Otherwise, the variable is
implicitly local to the loop and regains its former value upon exiting
the loop.  If the variable was previously declared with C<my>, it uses
that variable instead of the global one, but it's still localized to
the loop.  This implicit localization occurs I<only> in a C<foreach>
loop.
X<my> X<local>

The C<foreach> keyword is actually a synonym for the C<for> keyword, so
you can use either.  If VAR is omitted, C<$_> is set to each value.
X<$_>

If any element of LIST is an lvalue, you can modify it by modifying
VAR inside the loop.  Conversely, if any element of LIST is NOT an
lvalue, any attempt to modify that element will fail.  In other words,
the C<foreach> loop index variable is an implicit alias for each item
in the list that you're looping over.
X<alias>

If any part of LIST is an array, C<foreach> will get very confused if
you add or remove elements within the loop body, for example with
C<splice>.   So don't do that.
X<splice>

C<foreach> probably won't do what you expect if VAR is a tied or other
special variable.   Don't do that either.

As of Perl 5.22, there is an experimental variant of this loop that accepts
a variable preceded by a backslash for VAR, in which case the items in the
LIST must be references.  The backslashed variable will become an alias
to each referenced item in the LIST, which must be of the correct type.
The variable needn't be a scalar in this case, and the backslash may be
followed by C<my>.  To use this form, you must enable the C<refaliasing>
feature via C<use feature>.  (See L<feature>.  See also L<perlref/Assigning
to References>.)

Examples:

    for (@@ary) { s/foo/bar/ }

    for my $elem (@@elements) {
        $elem *= 2;
    }

    for $count (reverse(1..10), "BOOM") {
        print $count, "\n";
        sleep(1);
    }

    for (1..15) { print "Merry Christmas\n"; }

    foreach $item (split(/:[\\\n:]*/, $ENV{TERMCAP})) {
        print "Item: $item\n";
    }

    use feature "refaliasing";
    no warnings "experimental::refaliasing";
    foreach \my %hash (@@array_of_hash_references) {
        # do something which each %hash
    }

Here's how a C programmer might code up a particular algorithm in Perl:

    for (my $i = 0; $i < @@ary1; $i++) {
        for (my $j = 0; $j < @@ary2; $j++) {
            if ($ary1[$i] > $ary2[$j]) {
                last; # can't go to outer :-(
            }
            $ary1[$i] += $ary2[$j];
        }
        # this is where that last takes me
    }

Whereas here's how a Perl programmer more comfortable with the idiom might
do it:

    OUTER: for my $wid (@@ary1) {
    INNER:   for my $jet (@@ary2) {
                next OUTER if $wid > $jet;
                $wid += $jet;
             }
          }

See how much easier this is?  It's cleaner, safer, and faster.  It's
cleaner because it's less noisy.  It's safer because if code gets added
between the inner and outer loops later on, the new code won't be
accidentally executed.  The C<next> explicitly iterates the other loop
rather than merely terminating the inner one.  And it's faster because
Perl executes a C<foreach> statement more rapidly than it would the
equivalent C<for> loop.

Perceptive Perl hackers may have noticed that a C<for> loop has a return
value, and that this value can be captured by wrapping the loop in a C<do>
block.  The reward for this discovery is this cautionary advice:  The
return value of a C<for> loop is unspecified and may change without notice.
Do not rely on it.

=head2 Basic BLOCKs
X<block>

A BLOCK by itself (labeled or not) is semantically equivalent to a
loop that executes once.  Thus you can use any of the loop control
statements in it to leave or restart the block.  (Note that this is
I<NOT> true in C<eval{}>, C<sub{}>, or contrary to popular belief
C<do{}> blocks, which do I<NOT> count as loops.)  The C<continue>
block is optional.

The BLOCK construct can be used to emulate case structures.

    SWITCH: {
        if (/^abc/) { $abc = 1; last SWITCH; }
        if (/^def/) { $def = 1; last SWITCH; }
        if (/^xyz/) { $xyz = 1; last SWITCH; }
        $nothing = 1;
    }

You'll also find that C<foreach> loop used to create a topicalizer
and a switch:

    SWITCH:
    for ($var) {
        if (/^abc/) { $abc = 1; last SWITCH; }
        if (/^def/) { $def = 1; last SWITCH; }
        if (/^xyz/) { $xyz = 1; last SWITCH; }
        $nothing = 1;
    }

Such constructs are quite frequently used, both because older versions of
Perl had no official C<switch> statement, and also because the new version
described immediately below remains experimental and can sometimes be confusing.

=head2 Switch Statements

X<switch> X<case> X<given> X<when> X<default>

Starting from Perl 5.10.1 (well, 5.10.0, but it didn't work
right), you can say

    use feature "switch";

to enable an experimental switch feature.  This is loosely based on an
old version of a Perl 6 proposal, but it no longer resembles the Perl 6
construct.   You also get the switch feature whenever you declare that your
code prefers to run under a version of Perl that is 5.10 or later.  For
example:

    use v5.14;

Under the "switch" feature, Perl gains the experimental keywords
C<given>, C<when>, C<default>, C<continue>, and C<break>.
Starting from Perl 5.16, one can prefix the switch
keywords with C<CORE::> to access the feature without a C<use feature>
statement.  The keywords C<given> and
C<when> are analogous to C<switch> and
C<case> in other languages, so the code in the previous section could be
rewritten as

    use v5.10.1;
    for ($var) {
        when (/^abc/) { $abc = 1 }
        when (/^def/) { $def = 1 }
        when (/^xyz/) { $xyz = 1 }
        default       { $nothing = 1 }
    }

The C<foreach> is the non-experimental way to set a topicalizer.
If you wish to use the highly experimental C<given>, that could be
written like this:

    use v5.10.1;
    given ($var) {
        when (/^abc/) { $abc = 1 }
        when (/^def/) { $def = 1 }
        when (/^xyz/) { $xyz = 1 }
        default       { $nothing = 1 }
    }

As of 5.14, that can also be written this way:

    use v5.14;
    for ($var) {
        $abc = 1 when /^abc/;
        $def = 1 when /^def/;
        $xyz = 1 when /^xyz/;
        default { $nothing = 1 }
    }

Or if you don't care to play it safe, like this:

    use v5.14;
    given ($var) {
        $abc = 1 when /^abc/;
        $def = 1 when /^def/;
        $xyz = 1 when /^xyz/;
        default { $nothing = 1 }
    }

The arguments to C<given> and C<when> are in scalar context,
and C<given> assigns the C<$_> variable its topic value.

Exactly what the I<EXPR> argument to C<when> does is hard to describe
precisely, but in general, it tries to guess what you want done.  Sometimes
it is interpreted as C<< $_ ~~ I<EXPR> >>, and sometimes it is not.  It
also behaves differently when lexically enclosed by a C<given> block than
it does when dynamically enclosed by a C<foreach> loop.  The rules are far
too difficult to understand to be described here.  See L</"Experimental Details
on given and when"> later on.

Due to an unfortunate bug in how C<given> was implemented between Perl 5.10
and 5.16, under those implementations the version of C<$_> governed by
C<given> is merely a lexically scoped copy of the original, not a
dynamically scoped alias to the original, as it would be if it were a
C<foreach> or under both the original and the current Perl 6 language
specification.  This bug was fixed in Perl 5.18 (and lexicalized C<$_> itself
was removed in Perl 5.24).

If your code still needs to run on older versions,
stick to C<foreach> for your topicalizer and
you will be less unhappy.

=head2 Goto
X<goto>

Although not for the faint of heart, Perl does support a C<goto>
statement.  There are three forms: C<goto>-LABEL, C<goto>-EXPR, and
C<goto>-&NAME.  A loop's LABEL is not actually a valid target for
a C<goto>; it's just the name of the loop.

The C<goto>-LABEL form finds the statement labeled with LABEL and resumes
execution there.  It may not be used to go into any construct that
requires initialization, such as a subroutine or a C<foreach> loop.  It
also can't be used to go into a construct that is optimized away.  It
can be used to go almost anywhere else within the dynamic scope,
including out of subroutines, but it's usually better to use some other
construct such as C<last> or C<die>.  The author of Perl has never felt the
need to use this form of C<goto> (in Perl, that is--C is another matter).

The C<goto>-EXPR form expects a label name, whose scope will be resolved
dynamically.  This allows for computed C<goto>s per FORTRAN, but isn't
necessarily recommended if you're optimizing for maintainability:

    goto(("FOO", "BAR", "GLARCH")[$i]);

The C<goto>-&NAME form is highly magical, and substitutes a call to the
named subroutine for the currently running subroutine.  This is used by
C<AUTOLOAD()> subroutines that wish to load another subroutine and then
pretend that the other subroutine had been called in the first place
(except that any modifications to C<@@_> in the current subroutine are
propagated to the other subroutine.)  After the C<goto>, not even C<caller()>
will be able to tell that this routine was called first.

In almost all cases like this, it's usually a far, far better idea to use the
structured control flow mechanisms of C<next>, C<last>, or C<redo> instead of
resorting to a C<goto>.  For certain applications, the catch and throw pair of
C<eval{}> and die() for exception processing can also be a prudent approach.

=head2 The Ellipsis Statement
X<...>
X<... statement>
X<ellipsis operator>
X<elliptical statement>
X<unimplemented statement>
X<unimplemented operator>
X<yada-yada>
X<yada-yada operator>
X<... operator>
X<whatever operator>
X<triple-dot operator>

Beginning in Perl 5.12, Perl accepts an ellipsis, "C<...>", as a
placeholder for code that you haven't implemented yet.  This form of
ellipsis, the unimplemented statement, should not be confused with the
binary flip-flop C<...> operator.  One is a statement and the other an
operator.  (Perl doesn't usually confuse them because usually Perl can tell
whether it wants an operator or a statement, but see below for exceptions.)

When Perl 5.12 or later encounters an ellipsis statement, it parses this
without error, but if and when you should actually try to execute it, Perl
throws an exception with the text C<Unimplemented>:

    use v5.12;
    sub unimplemented { ... }
    eval { unimplemented() };
    if ($@@ =~ /^Unimplemented at /) {
        say "I found an ellipsis!";
    }

You can only use the elliptical statement to stand in for a
complete statement.  These examples of how the ellipsis works:

    use v5.12;
    { ... }
    sub foo { ... }
    ...;
    eval { ... };
    sub somemeth {
        my $self = shift;
        ...;
    }
    $x = do {
        my $n;
        ...;
        say "Hurrah!";
        $n;
    };

The elliptical statement cannot stand in for an expression that
is part of a larger statement, since the C<...> is also the three-dot
version of the flip-flop operator (see L<perlop/"Range Operators">).

These examples of attempts to use an ellipsis are syntax errors:

    use v5.12;

    print ...;
    open(my $fh, ">", "/dev/passwd") or ...;
    if ($condition && ... ) { say "Howdy" };

There are some cases where Perl can't immediately tell the difference
between an expression and a statement.  For instance, the syntax for a
block and an anonymous hash reference constructor look the same unless
there's something in the braces to give Perl a hint.  The ellipsis is a
syntax error if Perl doesn't guess that the C<{ ... }> is a block.  In that
case, it doesn't think the C<...> is an ellipsis because it's expecting an
expression instead of a statement:

    @@transformed = map { ... } @@input;    # syntax error

Inside your block, you can use a C<;> before the ellipsis to denote that the
C<{ ... }> is a block and not a hash reference constructor.  Now the ellipsis
works:

    @@transformed = map {; ... } @@input;   # ';' disambiguates

Note: Some folks colloquially refer to this bit of punctuation as a
"yada-yada" or "triple-dot", but its true name
is actually an ellipsis.

=head2 PODs: Embedded Documentation
X<POD> X<documentation>

Perl has a mechanism for intermixing documentation with source code.
While it's expecting the beginning of a new statement, if the compiler
encounters a line that begins with an equal sign and a word, like this

    =head1 Here There Be Pods!

Then that text and all remaining text up through and including a line
beginning with C<=cut> will be ignored.  The format of the intervening
text is described in L<perlpod>.

This allows you to intermix your source code
and your documentation text freely, as in

    =item snazzle($)

    The snazzle() function will behave in the most spectacular
    form that you can possibly imagine, not even excepting
    cybernetic pyrotechnics.

    =cut back to the compiler, nuff of this pod stuff!

    sub snazzle($) {
        my $thingie = shift;
        .........
    }

Note that pod translators should look at only paragraphs beginning
with a pod directive (it makes parsing easier), whereas the compiler
actually knows to look for pod escapes even in the middle of a
paragraph.  This means that the following secret stuff will be
ignored by both the compiler and the translators.

    $a=3;
    =secret stuff
     warn "Neither POD nor CODE!?"
    =cut back
    print "got $a\n";

You probably shouldn't rely upon the C<warn()> being podded out forever.
Not all pod translators are well-behaved in this regard, and perhaps
the compiler will become pickier.

One may also use pod directives to quickly comment out a section
of code.

=head2 Plain Old Comments (Not!)
X<comment> X<line> X<#> X<preprocessor> X<eval>

Perl can process line directives, much like the C preprocessor.  Using
this, one can control Perl's idea of filenames and line numbers in
error or warning messages (especially for strings that are processed
with C<eval()>).  The syntax for this mechanism is almost the same as for
most C preprocessors: it matches the regular expression

    # example: '# line 42 "new_filename.plx"'
    /^\#   \s*
      line \s+ (\d+)   \s*
      (?:\s("?)([^"]+)\g2)? \s*
     $/x

with C<$1> being the line number for the next line, and C<$3> being
the optional filename (specified with or without quotes).  Note that
no whitespace may precede the C<< # >>, unlike modern C preprocessors.

There is a fairly obvious gotcha included with the line directive:
Debuggers and profilers will only show the last source line to appear
at a particular line number in a given file.  Care should be taken not
to cause line number collisions in code you'd like to debug later.

Here are some examples that you should be able to type into your command
shell:

    % perl
    # line 200 "bzzzt"
    # the '#' on the previous line must be the first char on line
    die 'foo';
    __END__
    foo at bzzzt line 201.

    % perl
    # line 200 "bzzzt"
    eval qq[\n#line 2001 ""\ndie 'foo']; print $@@;
    __END__
    foo at - line 2001.

    % perl
    eval qq[\n#line 200 "foo bar"\ndie 'foo']; print $@@;
    __END__
    foo at foo bar line 200.

    % perl
    # line 345 "goop"
    eval "\n#line " . __LINE__ . ' "' . __FILE__ ."\"\ndie 'foo'";
    print $@@;
    __END__
    foo at goop line 345.

=head2 Experimental Details on given and when

As previously mentioned, the "switch" feature is considered highly
experimental; it is subject to change with little notice.  In particular,
C<when> has tricky behaviours that are expected to change to become less
tricky in the future.  Do not rely upon its current (mis)implementation.
Before Perl 5.18, C<given> also had tricky behaviours that you should still
beware of if your code must run on older versions of Perl.

Here is a longer example of C<given>:

    use feature ":5.10";
    given ($foo) {
        when (undef) {
            say '$foo is undefined';
        }
        when ("foo") {
            say '$foo is the string "foo"';
        }
        when ([1,3,5,7,9]) {
            say '$foo is an odd digit';
            continue; # Fall through
        }
        when ($_ < 100) {
            say '$foo is numerically less than 100';
        }
        when (\&complicated_check) {
            say 'a complicated check for $foo is true';
        }
        default {
            die q(I don't know what to do with $foo);
        }
    }

Before Perl 5.18, C<given(EXPR)> assigned the value of I<EXPR> to
merely a lexically scoped I<B<copy>> (!) of C<$_>, not a dynamically
scoped alias the way C<foreach> does.  That made it similar to

        do { my $_ = EXPR; ... }

except that the block was automatically broken out of by a successful
C<when> or an explicit C<break>.  Because it was only a copy, and because
it was only lexically scoped, not dynamically scoped, you could not do the
things with it that you are used to in a C<foreach> loop.  In particular,
it did not work for arbitrary function calls if those functions might try
to access $_.  Best stick to C<foreach> for that.

Most of the power comes from the implicit smartmatching that can
sometimes apply.  Most of the time, C<when(EXPR)> is treated as an
implicit smartmatch of C<$_>, that is, C<$_ ~~ EXPR>.  (See
L<perlop/"Smartmatch Operator"> for more information on smartmatching.)
But when I<EXPR> is one of the 10 exceptional cases (or things like them)
listed below, it is used directly as a boolean.

=over 4

=item Z<>1.

A user-defined subroutine call or a method invocation.

=item Z<>2.

A regular expression match in the form of C</REGEX/>, C<$foo =~ /REGEX/>,
or C<$foo =~ EXPR>.  Also, a negated regular expression match in
the form C<!/REGEX/>, C<$foo !~ /REGEX/>, or C<$foo !~ EXPR>.

=item Z<>3.

A smart match that uses an explicit C<~~> operator, such as C<EXPR ~~ EXPR>.

B<NOTE:> You will often have to use C<$c ~~ $_> because the default case
uses C<$_ ~~ $c> , which is frequentlythe opposite of what you want.

=item Z<>4.

A boolean comparison operator such as C<$_ E<lt> 10> or C<$x eq "abc">.  The
relational operators that this applies to are the six numeric comparisons
(C<< < >>, C<< > >>, C<< <= >>, C<< >= >>, C<< == >>, and C<< != >>), and
the six string comparisons (C<lt>, C<gt>, C<le>, C<ge>, C<eq>, and C<ne>).

=item Z<>5.

At least the three builtin functions C<defined(...)>, C<exists(...)>, and
C<eof(...)>.  We might someday add more of these later if we think of them.

=item Z<>6.

A negated expression, whether C<!(EXPR)> or C<not(EXPR)>, or a logical
exclusive-or, C<(EXPR1) xor (EXPR2)>.  The bitwise versions (C<~> and C<^>)
are not included.

=item Z<>7.

A filetest operator, with exactly 4 exceptions: C<-s>, C<-M>, C<-A>, and
C<-C>, as these return numerical values, not boolean ones.  The C<-z>
filetest operator is not included in the exception list.

=item Z<>8.

The C<..> and C<...> flip-flop operators.  Note that the C<...> flip-flop
operator is completely different from the C<...> elliptical statement
just described.

=back

In those 8 cases above, the value of EXPR is used directly as a boolean, so
no smartmatching is done.  You may think of C<when> as a smartsmartmatch.

Furthermore, Perl inspects the operands of logical operators to
decide whether to use smartmatching for each one by applying the
above test to the operands:

=over 4

=item Z<>9.

If EXPR is C<EXPR1 && EXPR2> or C<EXPR1 and EXPR2>, the test is applied
I<recursively> to both EXPR1 and EXPR2.
Only if I<both> operands also pass the
test, I<recursively>, will the expression be treated as boolean.  Otherwise,
smartmatching is used.

=item Z<>10.

If EXPR is C<EXPR1 || EXPR2>, C<EXPR1 // EXPR2>, or C<EXPR1 or EXPR2>, the
test is applied I<recursively> to EXPR1 only (which might itself be a
higher-precedence AND operator, for example, and thus subject to the
previous rule), not to EXPR2.  If EXPR1 is to use smartmatching, then EXPR2
also does so, no matter what EXPR2 contains.  But if EXPR2 does not get to
use smartmatching, then the second argument will not be either.  This is
quite different from the C<&&> case just described, so be careful.

=back

These rules are complicated, but the goal is for them to do what you want
(even if you don't quite understand why they are doing it).  For example:

    when (/^\d+$/ && $_ < 75) { ... }

will be treated as a boolean match because the rules say both
a regex match and an explicit test on C<$_> will be treated
as boolean.

Also:

    when ([qw(foo bar)] && /baz/) { ... }

will use smartmatching because only I<one> of the operands is a boolean:
the other uses smartmatching, and that wins.

Further:

    when ([qw(foo bar)] || /^baz/) { ... }

will use smart matching (only the first operand is considered), whereas

    when (/^baz/ || [qw(foo bar)]) { ... }

will test only the regex, which causes both operands to be
treated as boolean.  Watch out for this one, then, because an
arrayref is always a true value, which makes it effectively
redundant.  Not a good idea.

Tautologous boolean operators are still going to be optimized
away.  Don't be tempted to write

    when ("foo" or "bar") { ... }

This will optimize down to C<"foo">, so C<"bar"> will never be considered (even
though the rules say to use a smartmatch
on C<"foo">).  For an alternation like
this, an array ref will work, because this will instigate smartmatching:

    when ([qw(foo bar)] { ... }

This is somewhat equivalent to the C-style switch statement's fallthrough
functionality (not to be confused with I<Perl's> fallthrough
functionality--see below), wherein the same block is used for several
C<case> statements.

Another useful shortcut is that, if you use a literal array or hash as the
argument to C<given>, it is turned into a reference.  So C<given(@@foo)> is
the same as C<given(\@@foo)>, for example.

C<default> behaves exactly like C<when(1 == 1)>, which is
to say that it always matches.

=head3 Breaking out

You can use the C<break> keyword to break out of the enclosing
C<given> block.  Every C<when> block is implicitly ended with
a C<break>.

=head3 Fall-through

You can use the C<continue> keyword to fall through from one
case to the next:

    given($foo) {
        when (/x/) { say '$foo contains an x'; continue }
        when (/y/) { say '$foo contains a y'            }
        default    { say '$foo does not contain a y'    }
    }

=head3 Return value

When a C<given> statement is also a valid expression (for example,
when it's the last statement of a block), it evaluates to:

=over 4

=item *

An empty list as soon as an explicit C<break> is encountered.

=item *

The value of the last evaluated expression of the successful
C<when>/C<default> clause, if there happens to be one.

=item *

The value of the last evaluated expression of the C<given> block if no
condition is true.

=back

In both last cases, the last expression is evaluated in the context that
was applied to the C<given> block.

Note that, unlike C<if> and C<unless>, failed C<when> statements always
evaluate to an empty list.

    my $price = do {
        given ($item) {
            when (["pear", "apple"]) { 1 }
            break when "vote";      # My vote cannot be bought
            1e10  when /Mona Lisa/;
            "unknown";
        }
    };

Currently, C<given> blocks can't always
be used as proper expressions.  This
may be addressed in a future version of Perl.

=head3 Switching in a loop

Instead of using C<given()>, you can use a C<foreach()> loop.
For example, here's one way to count how many times a particular
string occurs in an array:

    use v5.10.1;
    my $count = 0;
    for (@@array) {
        when ("foo") { ++$count }
    }
    print "\@@array contains $count copies of 'foo'\n";

Or in a more recent version:

    use v5.14;
    my $count = 0;
    for (@@array) {
        ++$count when "foo";
    }
    print "\@@array contains $count copies of 'foo'\n";

At the end of all C<when> blocks, there is an implicit C<next>.
You can override that with an explicit C<last> if you're
interested in only the first match alone.

This doesn't work if you explicitly specify a loop variable, as
in C<for $item (@@array)>.  You have to use the default variable C<$_>.

=head3 Differences from Perl 6

The Perl 5 smartmatch and C<given>/C<when> constructs are not compatible
with their Perl 6 analogues.  The most visible difference and least
important difference is that, in Perl 5, parentheses are required around
the argument to C<given()> and C<when()> (except when this last one is used
as a statement modifier).  Parentheses in Perl 6 are always optional in a
control construct such as C<if()>, C<while()>, or C<when()>; they can't be
made optional in Perl 5 without a great deal of potential confusion,
because Perl 5 would parse the expression

    given $foo {
        ...
    }

as though the argument to C<given> were an element of the hash
C<%foo>, interpreting the braces as hash-element syntax.

However, their are many, many other differences.  For example,
this works in Perl 5:

    use v5.12;
    my @@primary = ("red", "blue", "green");

    if (@@primary ~~ "red") {
        say "primary smartmatches red";
    }

    if ("red" ~~ @@primary) {
        say "red smartmatches primary";
    }

    say "that's all, folks!";

But it doesn't work at all in Perl 6.  Instead, you should
use the (parallelizable) C<any> operator:

   if any(@@primary) eq "red" {
       say "primary smartmatches red";
   }

   if "red" eq any(@@primary) {
       say "red smartmatches primary";
   }

The table of smartmatches in L<perlop/"Smartmatch Operator"> is not
identical to that proposed by the Perl 6 specification, mainly due to
differences between Perl 6's and Perl 5's data models, but also because
the Perl 6 spec has changed since Perl 5 rushed into early adoption.

In Perl 6, C<when()> will always do an implicit smartmatch with its
argument, while in Perl 5 it is convenient (albeit potentially confusing) to
suppress this implicit smartmatch in various rather loosely-defined
situations, as roughly outlined above.  (The difference is largely because
Perl 5 does not have, even internally, a boolean type.)

=cut
@


1.15
log
@Fix merge issues, remove excess files - match perl-5.20.2 dist
@
text
@d184 1
a184 2
(for C<next>) or around it (for C<last>) to do that sort of thing.
For C<next>, just double the braces:
d187 2
d194 1
a194 1
For C<last>, you have to be more elaborate:
d197 10
d208 5
a212 4
            do {
                last if $x = $y**2;
                # do something here
            } while $x++ <= $z;
d484 1
a484 1
The C<foreach> loop iterates over a normal list value and sets the
d514 9
d542 6
d700 2
a701 7
specification.  This bug was fixed in Perl
5.18.  If you really want a lexical C<$_>,
specify that explicitly, but note that C<my $_>
is now deprecated and will warn unless warnings
have been disabled:

    given(my $_ = EXPR) { ... }
d995 3
a1003 4

B<NOTE:> You will often have to use C<$c ~~ $_> because
the default case uses C<$_ ~~ $c> , which is frequently
the opposite of what you want.
@


1.14
log
@Fix merge conflicts, remove extra files, match upstream perl-5.20.1

ok deraadt@@ sthen@@ espie@@ miod@@
@
text
@d71 1
a71 1
    $me = myname $0 		or die "can't get myname";
d177 2
a178 2
	$line = <STDIN>;
	...
d189 2
a190 2
	next if $x == $y;
	# do something here
d196 5
a200 5
    LOOP: { 
	    do {
		last if $x = $y**2;
		# do something here
	    } while $x++ <= $z;
d270 1
a270 1
The experimental C<given> statement is I<not automatically enabled>; see 
d283 1
a283 1
			# a bit exotic, that last one
d330 2
a331 2
	next LINE if /^#/;	# discard comments
	...
d338 2
a339 2
	last LINE if /^$/;	# exit when done with header
	...
d352 6
a357 6
	chomp;
	if (s/\\$//) {
	    $_ .= <>;
	    redo unless eof();
	}
	# now process $_
d363 6
a368 6
	chomp($line);
	if ($line =~ s/\\$//) {
	    $line .= <ARGV>;
	    redo LINE unless eof(); # not eof(ARGV)!
	}
	# now process $line
d378 3
a380 3
	m?(fred)?    && s//WILMA $1 WILMA/;
	m?(barney)?  && s//BETTY $1 BETTY/;
	m?(homer)?   && s//MARGE $1 MARGE/;
d382 3
a384 3
	print "$ARGV $.: $_";
	close ARGV  if eof;		# reset $.
	reset	    if eof;		# reset ?pat?
d395 4
a398 4
	last if /fred/;
	next if /barney/; # same effect as "last",
			  # but doesn't document as well
	# do something here
d414 1
a414 1
	...
d421 1
a421 1
	...
d423 1
a423 1
	$i++;
d436 1
a436 1
	...
d442 1
a442 1
	...
d457 1
a457 1
	# do something
d507 1
a507 1
	$elem *= 2;
d511 2
a512 2
	print $count, "\n";
	sleep(1);
d518 1
a518 1
	print "Item: $item\n";
d524 7
a530 7
	for (my $j = 0; $j < @@ary2; $j++) {
	    if ($ary1[$i] > $ary2[$j]) {
		last; # can't go to outer :-(
	    }
	    $ary1[$i] += $ary2[$j];
	}
	# this is where that last takes me
d538 4
a541 4
		next OUTER if $wid > $jet;
		$wid += $jet;
	     }
	  }
d570 4
a573 4
	if (/^abc/) { $abc = 1; last SWITCH; }
	if (/^def/) { $def = 1; last SWITCH; }
	if (/^xyz/) { $xyz = 1; last SWITCH; }
	$nothing = 1;
d581 4
a584 4
	if (/^abc/) { $abc = 1; last SWITCH; }
	if (/^def/) { $def = 1; last SWITCH; }
	if (/^xyz/) { $xyz = 1; last SWITCH; }
	$nothing = 1;
d619 4
a622 4
	when (/^abc/) { $abc = 1 }
	when (/^def/) { $def = 1 }
	when (/^xyz/) { $xyz = 1 }
	default       { $nothing = 1 }
d631 4
a634 4
	when (/^abc/) { $abc = 1 }
	when (/^def/) { $def = 1 }
	when (/^xyz/) { $xyz = 1 }
	default       { $nothing = 1 }
d641 4
a644 4
	$abc = 1 when /^abc/;
	$def = 1 when /^def/;
	$xyz = 1 when /^xyz/;
	default { $nothing = 1 }
d651 4
a654 4
	$abc = 1 when /^abc/;
	$def = 1 when /^def/;
	$xyz = 1 when /^xyz/;
	default { $nothing = 1 }
d749 1
a749 1
	say "I found an ellipsis!";
d761 2
a762 2
	my $self = shift;
	...;
d765 4
a768 4
	my $n;
	...;
	say "Hurrah!";
	$n;
d791 1
a791 4
    @@transformed = map { ... } @@input;  # syntax error

You can use a C<;> inside your block to denote that the C<{ ...  }> is a
block and not a hash reference constructor.  Now the ellipsis works:
d793 3
a795 1
    @@transformed = map {; ... } @@input; # ; disambiguates
d797 1
a797 1
    @@transformed = map { ...; } @@input; # ; disambiguates
d801 1
a801 3
is actually an ellipsis.  Perl does not yet
accept the Unicode version, U+2026 HORIZONTAL ELLIPSIS, as an alias for
C<...>, but someday it may.
d828 2
a829 2
	my $thingie = shift;
	.........
d916 19
a934 19
	when (undef) {
	    say '$foo is undefined';
	}
	when ("foo") {
	    say '$foo is the string "foo"';
	}
	when ([1,3,5,7,9]) {
	    say '$foo is an odd digit';
	    continue; # Fall through
	}
	when ($_ < 100) {
	    say '$foo is numerically less than 100';
	}
	when (\&complicated_check) {
	    say 'a complicated check for $foo is true';
	}
	default {
	    die q(I don't know what to do with $foo);
	}
d941 1
a941 1
	do { my $_ = EXPR; ... }
d1103 3
a1105 3
	when (/x/) { say '$foo contains an x'; continue }
	when (/y/) { say '$foo contains a y'            }
	default    { say '$foo does not contain a y'    }
d1138 6
a1143 6
	given ($item) {
	    when (["pear", "apple"]) { 1 }
	    break when "vote";      # My vote cannot be bought
	    1e10  when /Mona Lisa/;
	    "unknown";
	}
d1159 1
a1159 1
	when ("foo") { ++$count }
d1168 1
a1168 1
	++$count when "foo";
d1191 1
a1191 1
	...
@


1.13
log
@Merge perl-5.18.2 plus local patches, remove old files

OK espie@@ sthen@@ deraadt@@
@
text
@d87 1
a87 1
L<perlsub>
d432 15
d551 6
d962 1
a962 1
=item 1.
d966 1
a966 1
=item 2.
d972 1
a972 1
=item 3.
d976 1
a976 1
=item 4.
d987 1
a987 1
=item 5.
d992 1
a992 1
=item 6.
d998 1
a998 1
=item 7.
d1004 1
a1004 1
=item 8.
d1021 1
a1021 1
=item 9.
d1029 1
a1029 1
=item 10.
d1217 1
a1217 1
use the (parallelizable) C<any> operator instead:
@


1.12
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@d641 1
a641 1
it is interpreted as C<< $_ ~~ I<EXPR> >>, and sometimes it does not.  It
d648 1
a648 1
and 5.14, under those implementations the version of C<$_> governed by
d652 5
a656 3
specification.  This bug is expected to be addressed in a future release of
Perl.  For forwards compatibility, if you really want a lexical C<$_>,
specify that explicitly:
d660 2
a661 1
In the meanwhile, stick to C<foreach> for your topicalizer and
d889 4
a892 3
both C<given> and C<when> have tricky behaviours that are expected to
change to become less tricky in the future.  Do not rely upon their
current (mis)implementations.
d919 1
a919 1
As currently implemented, C<given(EXPR)> assign the value of I<EXPR> to
d921 1
a921 1
scoped alias the way C<foreach> does.  That makes it similar to
d925 6
a930 6
except that the block is automatically broken out of by a
successful C<when> or an explicit C<break>.  Because it is only a
copy, and because it is only lexically scoped, not dynamically
scoped, you cannot do the things with it that you are used to in
a C<foreach> loop.  In particular, you probably cannot use
arbitrary function calls.  Best stick to C<foreach> for that.
d957 1
a957 1
A boolean comparison operator such as C<$_ E<lt> 10> or C<$x eq "abc"> The
@


1.11
log
@merge in perl 5.12.2 plus local changes
@
text
@d9 1
a9 1
which run from the top to the bottom.  Loops, subroutines and other
d12 4
a15 3
Perl is a B<free-form> language, you can format and indent it however
you like.  Whitespace mostly serves to separate tokens, unlike
languages like Python where it is an important part of the syntax.
d35 1
a35 1
subroutines (and sometimes not even subroutines).  A variable holds
a44 1
    my $a;
d49 1
a49 1
C<-=>, and C<.=>, that operate on undefined left values such as:
d51 1
a51 1
    my $a;
d57 2
a58 2
the execution of the primary sequence of statements--declarations all
take effect at compile time.  Typically all the declarations are put at
d60 2
a61 2
lexically-scoped private variables created with C<my()>, you'll
have to make sure
d73 15
a87 5
Note that myname() functions as a list operator, not as a unary operator;
so be careful to use C<or> instead of C<||> in this case.  However, if
you were to declare the subroutine as C<sub myname ($)>, then
C<myname> would function as a unary operator, so either C<or> or
C<||> would work.
d110 1
a110 1
side effects.  Every simple statement must be terminated with a
d112 1
a112 1
the semicolon is optional.  (A semicolon is still encouraged if the
d114 3
a116 3
another line.)  Note that there are some operators like C<eval {}> and
C<do {}> that look like compound statements, but aren't (they're just
TERMs in an expression), and thus need an explicit termination if used
d122 2
a123 2
The number 0, the strings C<'0'> and C<''>, the empty list C<()>, and
C<undef> are all false in a boolean context. All other values are true.
d125 3
a127 2
When evaluated as a string it is treated as C<''>, but as a number, it
is treated as 0.
a140 1
    when EXPR
d143 1
d150 1
a150 1
the condition is true (i.e., if the condition is false).
d155 1
a155 17
C<when> executes the statement I<when> C<$_> smart matches C<EXPR>, and
then either C<break>s out if it's enclosed in a C<given> scope or skips
to the C<next> element when it lies directly inside a C<for> loop.
See also L</"Switch statements">.

    given ($something) {
        $abc    = 1 when /^abc/;
        $just_a = 1 when /^a/;
        $other  = 1;
    }

    for (@@names) {
	admin($_)   when [ qw/Alice Bob/ ];
	regular($_) when [ qw/Chris David Ellen/ ];
    }

The C<foreach> modifier is an iterator: it executes the statement once
d158 1
a158 1
    print "Hello $_!\n" foreach qw(world Dolly nurse);
d170 1
a170 1
C<do>-BLOCK (or to the deprecated C<do>-SUBROUTINE statement), in
d172 3
a174 1
evaluated.  This is so that you can write loops like:
d179 1
a179 1
    } until $line  eq ".\n";
d203 3
a205 2
B<NOTE:> The behaviour of a C<my> statement modified with a statement
modifier conditional or loop construct (e.g. C<my $x if ...>) is
d212 13
d227 1
a227 1
X<{> X<}> X<if> X<unless> X<while> X<until> X<foreach> X<for> X<continue>
d241 1
d243 1
d246 1
d248 3
d253 1
d256 1
d258 4
d264 2
d268 6
a273 1
Note that, unlike C and Pascal, these are defined in terms of BLOCKs,
d276 1
a276 1
curly brackets there are several other ways to do it.  The following
d279 1
a279 1
    if (!open(FOO)) { die "Can't open $FOO: $!"; }
d281 2
a282 2
    open(FOO) or die "Can't open $FOO: $!";	# FOO or bust!
    open(FOO) ? 'hi mom' : die "Can't open $FOO: $!";
d288 2
a289 2
the sense of the test is reversed. Like C<if>, C<unless> can be followed
by C<else>. C<unless> can even be followed by one or more C<elsif>
d312 4
d317 2
a318 2
kinds of compound statement.  These are introduced by a keyword which
the extension recognises, and the syntax following the keyword is
d360 1
a360 1
which is Perl short-hand for the more explicitly written version:
d373 2
a374 2
continue block). A continue block is often used to reset line counters
or C<?pat?> one-time matches:
d378 3
a380 3
	?(fred)?    && s//WILMA $1 WILMA/;
	?(barney)?  && s//BETTY $1 BETTY/;
	?(homer)?   && s//MARGE $1 MARGE/;
d383 2
a384 2
	close ARGV  if eof();		# reset $.
	reset	    if eof();		# reset ?pat?
d391 1
a391 1
The loop control statements don't work in an C<if> or C<unless>, since
d396 2
a397 1
	next if /barney/; # same effect as "last", but doesn't document as well
d464 1
a464 1
the loop.  This implicit localisation occurs I<only> in a C<foreach>
d469 1
a469 3
you can use C<foreach> for readability or C<for> for brevity.  (Or because
the Bourne shell is more familiar to you than I<csh>, so writing C<for>
comes more naturally.)  If VAR is omitted, C<$_> is set to each value.
d495 3
a497 2
    for $count (10,9,8,7,6,5,4,3,2,1,'BOOM') {
	print $count, "\n"; sleep(1);
d555 2
a556 2
Such constructs are quite frequently used, because older versions
of Perl had no official C<switch> statement.
d558 6
a563 19
=head2 Switch statements
X<switch> X<case> X<given> X<when> X<default>

Starting from Perl 5.10, you can say

    use feature "switch";

which enables a switch feature that is closely based on the
Perl 6 proposal.

The keywords C<given> and C<when> are analogous
to C<switch> and C<case> in other languages, so the code
above could be written as

    given($_) {
	when (/^abc/) { $abc = 1; }
	when (/^def/) { $def = 1; }
	when (/^xyz/) { $xyz = 1; }
	default { $nothing = 1; }
d566 3
a568 1
This construct is very flexible and powerful. For example:
d570 1
a570 22
    use feature ":5.10";
    given($foo) {
	when (undef) {
	    say '$foo is undefined';
	}
	when ("foo") {
	    say '$foo is the string "foo"';
	}
	when ([1,3,5,7,9]) {
	    say '$foo is an odd digit';
	    continue; # Fall through
	}
	when ($_ < 100) {
	    say '$foo is numerically less than 100';
	}
	when (\&complicated_check) {
	    say 'a complicated check for $foo is true';
	}
	default {
	    die q(I don't know what to do with $foo);
	}
    }
d572 1
a572 2
C<given(EXPR)> will assign the value of EXPR to C<$_>
within the lexical scope of the block, so it's similar to
d574 2
a575 1
	do { my $_ = EXPR; ... }
d577 1
a577 35
except that the block is automatically broken out of by a
successful C<when> or an explicit C<break>.

Most of the power comes from implicit smart matching:

	when($foo)

is exactly equivalent to

	when($_ ~~ $foo)

Most of the time, C<when(EXPR)> is treated as an implicit smart match of
C<$_>, i.e. C<$_ ~~ EXPR>. (See L</"Smart matching in detail"> for more
information on smart matching.) But when EXPR is one of the below
exceptional cases, it is used directly as a boolean:

=over 4

=item *

a subroutine or method call

=item *

a regular expression match, i.e. C</REGEX/> or C<$foo =~ /REGEX/>,
or a negated regular expression match (C<!/REGEX/> or C<$foo !~ /REGEX/>).

=item *

a comparison such as C<$_ E<lt> 10> or C<$x eq "abc">
(or of course C<$_ ~~ $c>)

=item *

C<defined(...)>, C<exists(...)>, or C<eof(...)>
d579 76
a654 38
=item *

a negated expression C<!(...)> or C<not (...)>, or a logical
exclusive-or C<(...) xor (...)>.

=item *

a filetest operator, with the exception of C<-s>, C<-M>, C<-A>, and C<-C>,
that return numerical values, not boolean ones.

=item *

the C<..> and C<...> flip-flop operators.

=back

In those cases the value of EXPR is used directly as a boolean.

Furthermore:

=over 4

=item *

If EXPR is C<... && ...> or C<... and ...>, the test
is applied recursively to both arguments. If I<both>
arguments pass the test, then the argument is treated
as boolean.

=item *

If EXPR is C<... || ...>, C<... // ...> or C<... or ...>, the test
is applied recursively to the first argument.

=back

These rules look complicated, but usually they will do what
you want. For example you could write:
d656 1
a656 1
    when (/^\d+$/ && $_ < 75) { ... }
d658 2
a659 146
Another useful shortcut is that, if you use a literal array
or hash as the argument to C<given>, it is turned into a
reference. So C<given(@@foo)> is the same as C<given(\@@foo)>,
for example.

C<default> behaves exactly like C<when(1 == 1)>, which is
to say that it always matches.

=head3 Breaking out

You can use the C<break> keyword to break out of the enclosing
C<given> block.  Every C<when> block is implicitly ended with
a C<break>.

=head3 Fall-through

You can use the C<continue> keyword to fall through from one
case to the next:

    given($foo) {
	when (/x/) { say '$foo contains an x'; continue }
	when (/y/) { say '$foo contains a y' }
	default    { say '$foo does not contain a y' }
    }

=head3 Switching in a loop

Instead of using C<given()>, you can use a C<foreach()> loop.
For example, here's one way to count how many times a particular
string occurs in an array:

    my $count = 0;
    for (@@array) {
	when ("foo") { ++$count }
    }
    print "\@@array contains $count copies of 'foo'\n";

At the end of all C<when> blocks, there is an implicit C<next>.
You can override that with an explicit C<last> if you're only
interested in the first match.

This doesn't work if you explicitly specify a loop variable,
as in C<for $item (@@array)>. You have to use the default
variable C<$_>. (You can use C<for my $_ (@@array)>.)

=head3 Smart matching in detail

The behaviour of a smart match depends on what type of thing its arguments
are. The behaviour is determined by the following table: the first row
that applies determines the match behaviour (which is thus mostly
determined by the type of the right operand). Note that the smart match
implicitly dereferences any non-blessed hash or array ref, so the "Hash"
and "Array" entries apply in those cases. (For blessed references, the
"Object" entries apply.)

Note that the "Matching Code" column is not always an exact rendition.  For
example, the smart match operator short-circuits whenever possible, but
C<grep> does not.

    $a      $b        Type of Match Implied    Matching Code
    ======  =====     =====================    =============
    Any     undef     undefined                !defined $a

    Any     Object    invokes ~~ overloading on $object, or dies

    Hash    CodeRef   sub truth for each key[1] !grep { !$b->($_) } keys %$a
    Array   CodeRef   sub truth for each elt[1] !grep { !$b->($_) } @@$a
    Any     CodeRef   scalar sub truth          $b->($a)

    Hash    Hash      hash keys identical (every key is found in both hashes)
    Array   Hash      hash keys intersection   grep { exists $b->{$_} } @@$a
    Regex   Hash      hash key grep            grep /$a/, keys %$b
    undef   Hash      always false (undef can't be a key)
    Any     Hash      hash entry existence     exists $b->{$a}

    Hash    Array     hash keys intersection   grep { exists $a->{$_} } @@$b
    Array   Array     arrays are comparable[2]
    Regex   Array     array grep               grep /$a/, @@$b
    undef   Array     array contains undef     grep !defined, @@$b
    Any     Array     match against an array element[3]
                                               grep $a ~~ $_, @@$b

    Hash    Regex     hash key grep            grep /$b/, keys %$a
    Array   Regex     array grep               grep /$b/, @@$a
    Any     Regex     pattern match            $a =~ /$b/

    Object  Any       invokes ~~ overloading on $object, or falls back:
    Any     Num       numeric equality         $a == $b
    Num     numish[4] numeric equality         $a == $b
    undef   Any       undefined                !defined($b)
    Any     Any       string equality          $a eq $b

 1 - empty hashes or arrays will match.
 2 - that is, each element smart-matches the element of same index in the
     other array. [3]
 3 - If a circular reference is found, we fall back to referential equality.
 4 - either a real number, or a string that looks like a number

=head3 Custom matching via overloading

You can change the way that an object is matched by overloading
the C<~~> operator. This may alter the usual smart match semantics.

It should be noted that C<~~> will refuse to work on objects that
don't overload it (in order to avoid relying on the object's
underlying structure).

Note also that smart match's matching rules take precedence over
overloading, so if C<$obj> has smart match overloading, then

    $obj ~~ X

will not automatically invoke the overload method with X as an argument;
instead the table above is consulted as normal, and based in the type of X,
overloading may or may not be invoked.

See L<overload>.

=head3 Differences from Perl 6

The Perl 5 smart match and C<given>/C<when> constructs are not
absolutely identical to their Perl 6 analogues. The most visible
difference is that, in Perl 5, parentheses are required around
the argument to C<given()> and C<when()> (except when this last
one is used as a statement modifier). Parentheses in Perl 6
are always optional in a control construct such as C<if()>,
C<while()>, or C<when()>; they can't be made optional in Perl
5 without a great deal of potential confusion, because Perl 5
would parse the expression

  given $foo {
    ...
  }

as though the argument to C<given> were an element of the hash
C<%foo>, interpreting the braces as hash-element syntax.

The table of smart matches is not identical to that proposed by the
Perl 6 specification, mainly due to the differences between Perl 6's
and Perl 5's data models.

In Perl 6, C<when()> will always do an implicit smart match
with its argument, whilst it is convenient in Perl 5 to
suppress this implicit smart match in certain situations,
as documented above. (The difference is largely because Perl 5
does not, even internally, have a boolean type.)
d697 85
d836 2
a837 2
with C<eval()>).  The syntax for this mechanism is the same as for most
C preprocessors: it matches the regular expression
d842 1
a842 1
      (?:\s("?)([^"]+)\2)? \s*
d846 2
a847 1
the optional filename (specified with or without quotes).
d859 1
a859 1
    # the `#' on the previous line must be the first char on line
d881 331
@


1.10
log
@Merge in perl 5.10.1
@
text
@d120 1
a120 1
X<until> X<foreach> X<for>
d130 2
d144 16
d231 3
d258 5
a262 1
the sense of the test is reversed.
d282 8
d689 1
a689 1
On exit from the C<when> block, there is an implicit C<next>.
d722 1
a722 1
    Array   Hash      hash slice existence     grep { exists $b->{$_} } @@$a
d727 1
a727 1
    Hash    Array     hash slice existence     grep { exists $a->{$_} } @@$b
d775 2
a776 1
the argument to C<given()> and C<when()>. Parentheses in Perl 6
@


1.9
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@a518 1
	
a521 1
	
a525 1
	
a528 1
	
d530 1
a530 1
	    say 'complicated_check($foo) is true';
a531 1
	
d553 4
a556 2
In fact C<when(EXPR)> is treated as an implicit smart match most of the
time. The exceptions are that when EXPR is:
d560 1
a560 1
=item o
d564 1
a564 1
=item o
d567 1
a567 1
or a negated regular expression match C<$foo !~ /REGEX/>.
d569 1
a569 1
=item o
d574 1
a574 1
=item o
d578 1
a578 1
=item o
d580 1
a580 1
A negated expression C<!(...)> or C<not (...)>, or a logical
d583 9
d594 2
a595 1
then the value of EXPR is used directly as a boolean.
d600 1
a600 1
=item o
d607 1
a607 1
=item o
d609 1
a609 1
If EXPR is C<... || ...> or C<... or ...>, the test
d620 1
a620 1
or hash as the argument to C<when>, it is turned into a
a626 3
See L</"Smart matching in detail"> for more information
on smart matching.

d641 1
a641 1
	default    { say '$foo contains neither an x nor a y' }
d666 11
a676 6
The behaviour of a smart match depends on what type of thing
its arguments are. It is always commutative, i.e. C<$a ~~ $b>
behaves the same as C<$b ~~ $a>. The behaviour is determined
by the following table: the first row that applies, in either
order, determines the match behaviour.

d680 1
a680 1
    (overloading trumps everything)
d682 18
a699 2
    Code[+] Code[+]   referential equality     $a == $b
    Any     Code[+]   scalar sub truth         $b->($a)
a700 2
    Hash    Hash      hash keys identical      [sort keys %$a]~~[sort keys %$b]
    Hash    Array     hash slice existence     grep {exists $a->{$_}} @@$b
a701 3
    Hash    Any       hash entry existence     exists $a->{$b}

    Array   Array     arrays are identical[*]
d703 1
a703 2
    Array   Num       array contains number    grep $_ == $b, @@$a
    Array   Any       array contains string    grep $_ eq $b, @@$a
d705 1
a705 6
    Any     undef     undefined                !defined $a
    Any     Regex     pattern match            $a =~ /$b/
    Code()  Code()    results are equal        $a->() eq $b->()
    Any     Code()    simple closure truth     $b->() # ignoring $a
    Num     numish[!] numeric equality         $a == $b
    Any     Str       string equality          $a eq $b
d707 2
a708 1

d711 5
a715 11

 + - this must be a code reference whose prototype (if present) is not ""
     (subs with a "" prototype are dealt with by the 'Code()' entry lower down)
 * - that is, each element matches the element of same index in the other
     array. If a circular reference is found, we fall back to referential
     equality.
 ! - either a real number, or a string that looks like a number

The "matching code" doesn't represent the I<real> matching code,
of course: it's just there to explain the intended meaning. Unlike
C<grep>, the smart match operator will short-circuit whenever it can.
d720 15
a734 1
the C<~~> operator. This trumps the usual smart match semantics.
@


1.8
log
@merge in perl 5.8.8
@
text
@d240 1
a240 1
true (does not evaluate to the null string C<""> or C<0> or C<"0">).
d334 1
a334 1
executes once, see L<"Basic BLOCKs and Switch Statements">.
d469 2
a470 2
=head2 Basic BLOCKs and Switch Statements
X<switch> X<block> X<case>
d479 1
a479 2
The BLOCK construct is particularly nice for doing case
structures.
d488 2
a489 2
There is no official C<switch> statement in Perl, because there are
already several ways to write the equivalent.
d491 2
a492 2
However, starting from Perl 5.8 to get switch and case one can use
the Switch extension and say:
d494 1
a494 1
	use Switch;
d496 1
a496 3
after which one has switch and case.  It is not as fast as it could be
because it's not really part of the language (it's done using source
filters) but it is available, and it's very flexible.
d498 2
a499 1
In addition to the above BLOCK construct, you could write
d501 39
a539 5
    SWITCH: {
	$abc = 1, last SWITCH  if /^abc/;
	$def = 1, last SWITCH  if /^def/;
	$xyz = 1, last SWITCH  if /^xyz/;
	$nothing = 1;
d542 57
a598 3
(That's actually not as strange as it looks once you realize that you can
use loop control "operators" within an expression.  That's just the binary
comma operator in scalar context.  See L<perlop/"Comma Operator">.)
d600 1
a600 1
or
d602 36
a637 5
    SWITCH: {
	/^abc/ && do { $abc = 1; last SWITCH; };
	/^def/ && do { $def = 1; last SWITCH; };
	/^xyz/ && do { $xyz = 1; last SWITCH; };
	$nothing = 1;
d640 1
a640 1
or formatted so it stands out more as a "proper" C<switch> statement:
d642 7
a648 16
    SWITCH: {
	/^abc/ 	    && do {
			    $abc = 1;
			    last SWITCH;
		       };

	/^def/ 	    && do {
			    $def = 1;
			    last SWITCH;
		       };

	/^xyz/ 	    && do {
			    $xyz = 1;
			    last SWITCH;
		        };
	$nothing = 1;
d650 5
d656 3
a658 1
or
d660 47
a706 6
    SWITCH: {
	/^abc/ and $abc = 1, last SWITCH;
	/^def/ and $def = 1, last SWITCH;
	/^xyz/ and $xyz = 1, last SWITCH;
	$nothing = 1;
    }
d708 1
a708 1
or even, horrors,
d710 3
a712 18
    if (/^abc/)
	{ $abc = 1 }
    elsif (/^def/)
	{ $def = 1 }
    elsif (/^xyz/)
	{ $xyz = 1 }
    else
	{ $nothing = 1 }

A common idiom for a C<switch> statement is to use C<foreach>'s aliasing to make
a temporary assignment to C<$_> for convenient matching:

    SWITCH: for ($where) {
		/In Card Names/     && do { push @@flags, '-e'; last; };
		/Anywhere/          && do { push @@flags, '-h'; last; };
		/In Rulings/        && do {                    last; };
		die "unknown value for form variable where: `$where'";
	    }
d714 1
a714 2
Another interesting approach to a switch statement is arrange
for a C<do> block to return the proper value:
d716 8
a723 8
    $amode = do {
	if     ($flag & O_RDONLY) { "r" }	# XXX: isn't this 0?
	elsif  ($flag & O_WRONLY) { ($flag & O_APPEND) ? "a" : "w" }
	elsif  ($flag & O_RDWR)   {
	    if ($flag & O_CREAT)  { "w+" }
	    else                  { ($flag & O_APPEND) ? "a+" : "r+" }
	}
    };
d725 3
a727 1
Or 
d729 2
a730 23
        print do {
            ($flags & O_WRONLY) ? "write-only"          :
            ($flags & O_RDWR)   ? "read-write"          :
                                  "read-only";
        };

Or if you are certain that all the C<&&> clauses are true, you can use
something like this, which "switches" on the value of the
C<HTTP_USER_AGENT> environment variable.

    #!/usr/bin/perl 
    # pick out jargon file page based on browser
    $dir = 'http://www.wins.uva.nl/~mes/jargon';
    for ($ENV{HTTP_USER_AGENT}) { 
	$page  =    /Mac/            && 'm/Macintrash.html'
		 || /Win(dows )?NT/  && 'e/evilandrude.html'
		 || /Win|MSIE|WebTV/ && 'm/MicroslothWindows.html'
		 || /Linux/          && 'l/Linux.html'
		 || /HP-UX/          && 'h/HP-SUX.html'
		 || /SunOS/          && 's/ScumOS.html'
		 ||                     'a/AppendixB.html';
    }
    print "Location: $dir/$page\015\012\015\012";
d732 3
a734 2
That kind of switch statement only works when you know the C<&&> clauses
will be true.  If you don't, the previous C<?:> example should be used.
d736 5
a740 2
You might also consider writing a hash of subroutine references
instead of synthesizing a C<switch> statement.
@


1.7
log
@Resolve conflicts for perl 5.8.2, remove old files, and add OpenBSD-specific scaffolding
@
text
@d2 1
d31 1
d68 1
d90 1
d97 1
d110 1
d114 3
d119 2
d171 1
d179 1
d194 1
d197 2
d215 2
d241 2
d258 1
d340 1
d362 1
d369 1
d380 1
d387 1
d398 1
d404 1
d411 1
d416 1
d470 1
d618 1
d654 1
d702 1
@


1.6
log
@Resolve conflicts, remove old files, merge local changes
@
text
@d7 21
a27 17
A Perl script consists of a sequence of declarations and statements.
The sequence of statements is executed just once, unlike in B<sed>
and B<awk> scripts, where the sequence of statements is executed
for each input line.  While this means that you must explicitly
loop over the lines of your input file (or files), it also means
you have much more control over which files and which lines you look at.
(Actually, I'm lying--it is possible to do an implicit loop with
either the B<-n> or B<-p> switch.  It's just not the mandatory
default like it is in B<sed> and B<awk>.)

Perl is, for the most part, a free-form language.  (The only exception
to this is format declarations, for obvious reasons.)  Text from a
C<"#"> character until the end of the line is a comment, and is
ignored.  If you attempt to use C</* */> C-style comments, it will be
interpreted either as division or pattern matching, depending on the
context, and C++ C<//> comments just look like a null regular
expression, so don't do that.
d31 10
a40 10
The only things you need to declare in Perl are report formats
and subroutines--and even undefined subroutines can be handled
through AUTOLOAD.  A variable holds the undefined value (C<undef>)
until it has been assigned a defined value, which is anything
other than C<undef>.  When used as a number, C<undef> is treated
as C<0>; when used as a string, it is treated the empty string,
C<"">; and when used as a reference that isn't being assigned
to, it is treated as an error.  If you enable warnings, you'll
be notified of an uninitialized value whenever you treat C<undef>
as a string or a number.  Well, usually.  Boolean contexts, such as:
d86 7
a92 1
=head2 Simple statements
d97 13
a109 5
the semicolon is optional.  (A semicolon is still encouraged there if the
block takes up more than one line, because you may eventually add another line.)
Note that there are some operators like C<eval {}> and C<do {}> that look
like compound statements, but aren't (they're just TERMs in an expression),
and thus need an explicit termination if used as the last item in a statement.
d119 14
a132 1
    foreach EXPR
d134 15
a148 8
The C<if> and C<unless> modifiers have the expected semantics,
presuming you're a speaker of English.  The C<foreach> modifier is an
iterator:  For each value in EXPR, it aliases C<$_> to the value and
executes the statement.  The C<while> and C<until> modifiers have the
usual "C<while> loop" semantics (conditional evaluated first), except
when applied to a C<do>-BLOCK (or to the deprecated C<do>-SUBROUTINE
statement), in which case the block executes once before the
conditional is evaluated.  This is so that you can write loops like:
d175 8
a182 1
=head2 Compound statements
a230 2
Unlike a C<foreach> statement, a C<while> statement never implicitly
localises any variables.
d233 3
a235 4
conditional is about to be evaluated again, just like the third part of a
C<for> loop in C.  Thus it can be used to increment a loop variable, even
when the loop has been continued via the C<next> statement (which is
similar to the C C<continue> statement).
d239 1
a239 2
The C<next> command is like the C<continue> statement in C; it starts
the next iteration of the loop:
d246 1
a246 2
The C<last> command is like the C<break> statement in C (as used in
loops); it immediately exits the loop in question.  The
d353 8
d370 2
a371 1
the loop.  
d480 2
a481 2
use loop control "operators" within an expression,  That's just the normal
C comma operator.)
d670 1
a670 1
Much like the C preprocessor, Perl can process line directives.  Using
d675 9
a683 3
C</^#\s*line\s+(\d+)\s*(?:\s"([^"]+)")?\s*$/> with C<$1> being the line
number for the next line, and C<$2> being the optional filename
(specified within quotes).
@


1.5
log
@merge in perl 5.6.1 with our local changes
@
text
@d36 13
a48 3
as a string or a number.  Well, usually.  Boolean ("don't-care")
contexts and operators such as C<++>, C<-->, C<+=>, C<-=>, and
C<.=> are always exempt from such warnings.
d243 4
a246 3
Note that if there were a C<continue> block on the above code, it would get
executed even on discarded lines.  This is often used to reset line counters 
or C<?pat?> one-time matches.
d267 3
a269 3
	next if /fred/;
	next if /barney/;
	# so something here
d272 3
d410 12
a421 2
already several ways to write the equivalent.  In addition to the
above, you could write
d513 1
a513 1
Or if you are certainly that all the C<&&> clauses are true, you can use
@


1.4
log
@perl-5.6.0 + local changes
@
text
@d56 2
a57 2
Note that my() functions as a list operator, not as a unary operator; so
be careful to use C<or> instead of C<||> in this case.  However, if
d175 1
a175 1
praga or the B<-w> flag.
d266 1
a266 1
Perl's C-style C<for> loop works exactly like the corresponding C<while> loop;
d282 4
a285 2
(There is one minor difference: The first form implies a lexical scope
for variables declared with C<my> in the initialization expression.)
d314 6
a319 3
If any element of LIST is an lvalue, you can modify it by modifying VAR
inside the loop.  That's because the C<foreach> loop index variable is
an implicit alias for each item in the list that you're looping over.
d491 1
a491 1
C<HTTP_USER_AGENT> envariable.
d605 5
@


1.3
log
@perl5.005_03 (stock)
@
text
@d8 8
a15 15
The only things that need to be declared in Perl are report formats
and subroutines.  See the sections below for more information on those
declarations.  All uninitialized user-created objects are assumed to
start with a C<null> or C<0> value until they are defined by some explicit
operation such as assignment.  (Though you can get warnings about the
use of undefined values if you like.)  The sequence of statements is
executed just once, unlike in B<sed> and B<awk> scripts, where the
sequence of statements is executed for each input line.  While this means
that you must explicitly loop over the lines of your input file (or
files), it also means you have much more control over which files and
which lines you look at.  (Actually, I'm lying--it is possible to do an
implicit loop with either the B<-n> or B<-p> switch.  It's just not the
mandatory default like it is in B<sed> and B<awk>.)

=head2 Declarations
d25 15
d44 2
a45 1
lexically-scoped private variables created with C<my()>, you'll have to make sure
d56 1
a56 1
Note that it functions as a list operator, not as a unary operator; so
d98 1
a98 1
when applied to a C<do>-BLOCK (or to the now-deprecated C<do>-SUBROUTINE
d146 1
d167 5
a171 4
true (does not evaluate to the null string (C<"">) or C<0> or C<"0")>.  The LABEL is
optional, and if present, consists of an identifier followed by a colon.
The LABEL identifies the loop for the loop control statements C<next>,
C<last>, and C<redo>.  If the LABEL is omitted, the loop control statement
d174 4
a177 1
desperate behavior triggers a warning if you use the B<-w> flag.
d306 1
a306 3
the loop.  (Note that a lexically scoped variable can cause problems
if you have subroutine or format declarations within the loop which
refer to it.)
d327 1
a327 1
    foreach my $elem (@@elements) {
d356 2
a357 2
    OUTER: foreach my $wid (@@ary1) {
    INNER:   foreach my $jet (@@ary2) {
d505 2
a506 2
You might also consider writing a hash instead of synthesizing a C<switch>
statement.
d510 4
a513 4
Although not for the faint of heart, Perl does support a C<goto> statement.
A loop's LABEL is not actually a valid target for a C<goto>;
it's just the name of the loop.  There are three forms: C<goto>-LABEL,
C<goto>-EXPR, and C<goto>-&NAME.
d528 1
a528 1
    goto ("FOO", "BAR", "GLARCH")[$i];
d597 1
a597 1
C</^#\s*line\s+(\d+)\s*(?:\s"([^"]*)")?/> with C<$1> being the line
@


1.2
log
@perl 5.004_04
@
text
@d11 1
a11 1
start with a null or 0 value until they are defined by some explicit
d24 7
a30 7
Perl is, for the most part, a free-form language.  (The only
exception to this is format declarations, for obvious reasons.) Comments
are indicated by the "#" character, and extend to the end of the line.  If
you attempt to use C</* */> C-style comments, it will be interpreted
either as division or pattern matching, depending on the context, and C++
C<//> comments just look like a null regular expression, so don't do
that.
d36 1
a36 1
lexically-scoped private variables created with my(), you'll have to make sure
d50 1
a50 1
C<myname> would functonion as a unary operator, so either C<or> or
d82 1
d85 7
a91 6
presuming you're a speaker of English.  The C<while> and C<until>
modifiers also have the usual "while loop" semantics (conditional
evaluated first), except when applied to a do-BLOCK (or to the
now-deprecated do-SUBROUTINE statement), in which case the block
executes once before the conditional is evaluated.  This is so that you
can write loops like:
d98 19
a116 4
See L<perlfunc/do>.  Note also that the loop control
statements described later will I<NOT> work in this construct, because
modifiers don't take loop labels.  Sorry.  You can always wrap
another block around it to do that sort of thing.
d157 1
a157 1
true (does not evaluate to the null string or 0 or "0").  The LABEL is
d219 3
a221 2
Or here's a simpleminded Pascal comment stripper (warning: assumes no
{ or } in strings).
d223 9
a231 13
    LINE: while (<STDIN>) {
	while (s|({.*}.*){.*}|$1 |) {}
	s|{.*}| |;
	if (s|{.*| |) {
	    $front = $_;
	    while (<STDIN>) {
		if (/}/) {	# end of comment?
		    s|^|$front{|;
		    redo LINE;
		}
	    }
	}
	print;
a233 3
Note that if there were a C<continue> block on the above code, it would get
executed even on discarded lines.

d238 9
d293 2
a294 1
with you have subroutine or format declarations.)
d297 13
a309 6
you can use C<foreach> for readability or C<for> for brevity.  If VAR is
omitted, $_ is set to each value.  If LIST is an actual array (as opposed
to an expression returning a list value), you can modify each element of
the array by modifying VAR inside the loop.  That's because the C<foreach>
loop index variable is an implicit alias for each item in the list that
you're looping over.
d378 1
a378 1
There is no official switch statement in Perl, because there are
d402 1
a402 1
or formatted so it stands out more as a "proper" switch statement:
d442 2
a443 3

A common idiom for a switch statement is to use C<foreach>'s aliasing to make
a temporary assignment to $_ for convenient matching:
d456 1
a456 1
	if     ($flag & O_RDONLY) { "r" }
d464 32
d500 2
a501 2
it's just the name of the loop.  There are three forms: goto-LABEL,
goto-EXPR, and goto-&NAME.
d503 1
a503 1
The goto-LABEL form finds the statement labeled with LABEL and resumes
d505 1
a505 1
requires initialization, such as a subroutine or a foreach loop.  It
d509 2
a510 2
construct such as last or die.  The author of Perl has never felt the
need to use this form of goto (in Perl, that is--C is another matter).
d512 2
a513 2
The goto-EXPR form expects a label name, whose scope will be resolved
dynamically.  This allows for computed gotos per FORTRAN, but isn't
d518 1
a518 1
The goto-&NAME form is highly magical, and substitutes a call to the
d520 1
a520 1
AUTOLOAD() subroutines that wish to load another subroutine and then
d522 2
a523 2
(except that any modifications to @@_ in the current subroutine are
propagated to the other subroutine.)  After the C<goto>, not even caller()
d571 1
a571 1
You probably shouldn't rely upon the warn() being podded out forever.
d580 2
a581 2
Much like the C preprocessor, perl can process line directives.  Using
this, one can control perl's idea of filenames and line numbers in
d583 1
a583 1
with eval()).  The syntax for this mechanism is the same as for most
@


1.1
log
@Initial revision
@
text
@d35 1
a35 1
the beginning or the end of the script.  However, if you're using 
d38 1
a38 1
as the my if you expect to to be able to access those private variables.
d42 1
a42 1
subroutine (prototyped to take one scalar parameter) without defining it by saying just:
d44 1
a44 1
    sub myname ($);
d47 5
a51 2
Note that it functions as a list operator though, not as a unary
operator, so be careful to use C<or> instead of C<||> there.
d69 1
a69 1
block takes up more than one line, since you may eventually add another line.)
d71 1
a71 1
like compound statements, but aren't (they're just TERMs in an expression), 
d97 1
a97 1
statements described later will I<NOT> work in this construct, since
d134 1
a134 1
The C<if> statement is straightforward.  Since BLOCKs are always
d184 2
a185 2
	if (s/\\$//) { 
	    $_ .= <>; 
d189 1
a189 1
    } 
d193 1
a193 1
    LINE: while ($line = <ARGV>) {
d195 2
a196 2
	if ($line =~ s/\\$//) { 
	    $line .= <ARGV>; 
d200 1
a200 1
    } 
d202 2
a203 1
Or here's a a simpleminded Pascal comment stripper (warning: assumes no { or } in strings)
d227 2
a228 5
In either the C<if> or the C<while> statement, you may replace "(EXPR)"
with a BLOCK, and the conditional is true if the value of the last
statement in that block is true.  While this "feature" continues to work in 
version 5, it has been deprecated, so please change any occurrences of "if BLOCK" to
"if (do BLOCK)".
d248 3
d253 2
a254 2
problem you get into if you explicitly test for end-of-file on 
an interactive file descriptor causing your program to appear to 
d261 1
a261 1
    } 
d266 8
a273 6
variable VAR to be each element of the list in turn.  The variable is
implicitly local to the loop and regains its former value upon exiting the
loop.  If the variable was previously declared with C<my>, it uses that
variable instead of the global one, but it's still localized to the loop.
This can cause problems if you have subroutine or format declarations
within that block's scope.
d287 1
a287 1
    foreach $elem (@@elements) {
d303 2
a304 2
    for ($i = 0; $i < @@ary1; $i++) {
	for ($j = 0; $j < @@ary2; $j++) {
d313 1
a313 1
Whereas here's how a Perl programmer more confortable with the idiom might
d316 2
a317 2
    OUTER: foreach $wid (@@ary1) { 
    INNER:   foreach $jet (@@ary2) {
d320 2
a321 2
	     } 
	  } 
d326 1
a326 1
accidentally executed, the C<next> explicitly iterates the other loop
d333 6
a338 6
A BLOCK by itself (labeled or not) is semantically equivalent to a loop
that executes once.  Thus you can use any of the loop control
statements in it to leave or restart the block.  (Note that this
is I<NOT> true in C<eval{}>, C<sub{}>, or contrary to popular belief C<do{}> blocks,
which do I<NOT> count as loops.)  The C<continue> block
is optional.  
d377 3
a379 3
	/^abc/ 	    && do { 
			    $abc = 1; 
			    last SWITCH; 
d382 3
a384 3
	/^def/ 	    && do { 
			    $def = 1; 
			    last SWITCH; 
d387 3
a389 3
	/^xyz/ 	    && do { 
			    $xyz = 1; 
			    last SWITCH; 
d423 1
a423 1
	    } 
d429 2
a430 2
	if     ($flag & O_RDONLY) { "r" } 
	elsif  ($flag & O_WRONLY) { ($flag & O_APPEND) ? "a" : "w" } 
d482 1
a482 1
text is described in L<perlpod>. 
d489 1
a489 1
    The snazzle() function will behave in the most spectacular 
d498 1
a498 1
    } 
d500 3
a502 3
Note that pod translators should only look at paragraphs beginning 
with a pod diretive (it makes parsing easier), whereas the compiler
actually knows to look for pod escapes even in the middle of a 
d515 44
@


1.1.1.1
log
@Import of Perl 5.003 into the tree.  Makefile.bsd-wrapper and
config.sh.OpenBSD are the only local changes.
@
text
@@


1.1.1.2
log
@perl5.005_03
@
text
@d11 1
a11 1
start with a C<null> or C<0> value until they are defined by some explicit
d24 7
a30 7
Perl is, for the most part, a free-form language.  (The only exception
to this is format declarations, for obvious reasons.)  Text from a
C<"#"> character until the end of the line is a comment, and is
ignored.  If you attempt to use C</* */> C-style comments, it will be
interpreted either as division or pattern matching, depending on the
context, and C++ C<//> comments just look like a null regular
expression, so don't do that.
d35 2
a36 2
the beginning or the end of the script.  However, if you're using
lexically-scoped private variables created with C<my()>, you'll have to make sure
d38 1
a38 1
as the my if you expect to be able to access those private variables.
d42 1
a42 1
subroutine without defining it by saying C<sub name>, thus:
d44 1
a44 1
    sub myname;
d47 2
a48 5
Note that it functions as a list operator, not as a unary operator; so
be careful to use C<or> instead of C<||> in this case.  However, if
you were to declare the subroutine as C<sub myname ($)>, then
C<myname> would function as a unary operator, so either C<or> or
C<||> would work.
d66 1
a66 1
block takes up more than one line, because you may eventually add another line.)
d68 1
a68 1
like compound statements, but aren't (they're just TERMs in an expression),
a78 1
    foreach EXPR
d81 6
a86 7
presuming you're a speaker of English.  The C<foreach> modifier is an
iterator:  For each value in EXPR, it aliases C<$_> to the value and
executes the statement.  The C<while> and C<until> modifiers have the
usual "C<while> loop" semantics (conditional evaluated first), except
when applied to a C<do>-BLOCK (or to the now-deprecated C<do>-SUBROUTINE
statement), in which case the block executes once before the
conditional is evaluated.  This is so that you can write loops like:
d93 4
a96 19
See L<perlfunc/do>.  Note also that the loop control statements described
later will I<NOT> work in this construct, because modifiers don't take
loop labels.  Sorry.  You can always put another block inside of it
(for C<next>) or around it (for C<last>) to do that sort of thing.
For C<next>, just double the braces:

    do {{
	next if $x == $y;
	# do something here
    }} until $x++ > $z;

For C<last>, you have to be more elaborate:

    LOOP: { 
	    do {
		last if $x = $y**2;
		# do something here
	    } while $x++ <= $z;
    }
d131 1
a131 1
The C<if> statement is straightforward.  Because BLOCKs are always
d137 1
a137 1
true (does not evaluate to the null string (C<"">) or C<0> or C<"0")>.  The LABEL is
d181 2
a182 2
	if (s/\\$//) {
	    $_ .= <>;
d186 1
a186 1
    }
d190 1
a190 1
    LINE: while (defined($line = <ARGV>)) {
d192 2
a193 2
	if ($line =~ s/\\$//) {
	    $line .= <ARGV>;
d197 17
d217 1
a217 13
executed even on discarded lines.  This is often used to reset line counters 
or C<?pat?> one-time matches.

    # inspired by :1,$g/fred/s//WILMA/
    while (<>) {
	?(fred)?    && s//WILMA $1 WILMA/;
	?(barney)?  && s//BETTY $1 BETTY/;
	?(homer)?   && s//MARGE $1 MARGE/;
    } continue {
	print "$ARGV $.: $_";
	close ARGV  if eof();		# reset $.
	reset	    if eof();		# reset ?pat?
    }
d223 5
a227 11
The loop control statements don't work in an C<if> or C<unless>, since
they aren't loops.  You can double the braces to make them such, though.

    if (/pattern/) {{
	next if /fred/;
	next if /barney/;
	# so something here
    }}

The form C<while/if BLOCK BLOCK>, available in Perl 4, is no longer
available.   Replace any occurrence of C<if BLOCK> by C<if (do BLOCK)>.
a246 3
(There is one minor difference: The first form implies a lexical scope
for variables declared with C<my> in the initialization expression.)

d249 2
a250 2
problem you get into if you explicitly test for end-of-file on
an interactive file descriptor causing your program to appear to
d257 1
a257 1
    }
d262 6
a267 9
variable VAR to be each element of the list in turn.  If the variable
is preceded with the keyword C<my>, then it is lexically scoped, and
is therefore visible only within the loop.  Otherwise, the variable is
implicitly local to the loop and regains its former value upon exiting
the loop.  If the variable was previously declared with C<my>, it uses
that variable instead of the global one, but it's still localized to
the loop.  (Note that a lexically scoped variable can cause problems
if you have subroutine or format declarations within the loop which
refer to it.)
d270 6
a275 13
you can use C<foreach> for readability or C<for> for brevity.  (Or because
the Bourne shell is more familiar to you than I<csh>, so writing C<for>
comes more naturally.)  If VAR is omitted, C<$_> is set to each value.
If any element of LIST is an lvalue, you can modify it by modifying VAR
inside the loop.  That's because the C<foreach> loop index variable is
an implicit alias for each item in the list that you're looping over.

If any part of LIST is an array, C<foreach> will get very confused if
you add or remove elements within the loop body, for example with
C<splice>.   So don't do that.

C<foreach> probably won't do what you expect if VAR is a tied or other
special variable.   Don't do that either.
d281 1
a281 1
    foreach my $elem (@@elements) {
d297 2
a298 2
    for (my $i = 0; $i < @@ary1; $i++) {
	for (my $j = 0; $j < @@ary2; $j++) {
d307 1
a307 1
Whereas here's how a Perl programmer more comfortable with the idiom might
d310 2
a311 2
    OUTER: foreach my $wid (@@ary1) {
    INNER:   foreach my $jet (@@ary2) {
d314 2
a315 2
	     }
	  }
d320 1
a320 1
accidentally executed.  The C<next> explicitly iterates the other loop
d327 6
a332 6
A BLOCK by itself (labeled or not) is semantically equivalent to a
loop that executes once.  Thus you can use any of the loop control
statements in it to leave or restart the block.  (Note that this is
I<NOT> true in C<eval{}>, C<sub{}>, or contrary to popular belief
C<do{}> blocks, which do I<NOT> count as loops.)  The C<continue>
block is optional.
d344 1
a344 1
There is no official C<switch> statement in Perl, because there are
d368 1
a368 1
or formatted so it stands out more as a "proper" C<switch> statement:
d371 3
a373 3
	/^abc/ 	    && do {
			    $abc = 1;
			    last SWITCH;
d376 3
a378 3
	/^def/ 	    && do {
			    $def = 1;
			    last SWITCH;
d381 3
a383 3
	/^xyz/ 	    && do {
			    $xyz = 1;
			    last SWITCH;
d408 3
a410 2
A common idiom for a C<switch> statement is to use C<foreach>'s aliasing to make
a temporary assignment to C<$_> for convenient matching:
d417 1
a417 1
	    }
d423 2
a424 2
	if     ($flag & O_RDONLY) { "r" }	# XXX: isn't this 0?
	elsif  ($flag & O_WRONLY) { ($flag & O_APPEND) ? "a" : "w" }
a430 32
Or 

        print do {
            ($flags & O_WRONLY) ? "write-only"          :
            ($flags & O_RDWR)   ? "read-write"          :
                                  "read-only";
        };

Or if you are certainly that all the C<&&> clauses are true, you can use
something like this, which "switches" on the value of the
C<HTTP_USER_AGENT> envariable.

    #!/usr/bin/perl 
    # pick out jargon file page based on browser
    $dir = 'http://www.wins.uva.nl/~mes/jargon';
    for ($ENV{HTTP_USER_AGENT}) { 
	$page  =    /Mac/            && 'm/Macintrash.html'
		 || /Win(dows )?NT/  && 'e/evilandrude.html'
		 || /Win|MSIE|WebTV/ && 'm/MicroslothWindows.html'
		 || /Linux/          && 'l/Linux.html'
		 || /HP-UX/          && 'h/HP-SUX.html'
		 || /SunOS/          && 's/ScumOS.html'
		 ||                     'a/AppendixB.html';
    }
    print "Location: $dir/$page\015\012\015\012";

That kind of switch statement only works when you know the C<&&> clauses
will be true.  If you don't, the previous C<?:> example should be used.

You might also consider writing a hash instead of synthesizing a C<switch>
statement.

d435 2
a436 2
it's just the name of the loop.  There are three forms: C<goto>-LABEL,
C<goto>-EXPR, and C<goto>-&NAME.
d438 1
a438 1
The C<goto>-LABEL form finds the statement labeled with LABEL and resumes
d440 1
a440 1
requires initialization, such as a subroutine or a C<foreach> loop.  It
d444 2
a445 2
construct such as C<last> or C<die>.  The author of Perl has never felt the
need to use this form of C<goto> (in Perl, that is--C is another matter).
d447 2
a448 2
The C<goto>-EXPR form expects a label name, whose scope will be resolved
dynamically.  This allows for computed C<goto>s per FORTRAN, but isn't
d453 1
a453 1
The C<goto>-&NAME form is highly magical, and substitutes a call to the
d455 1
a455 1
C<AUTOLOAD()> subroutines that wish to load another subroutine and then
d457 2
a458 2
(except that any modifications to C<@@_> in the current subroutine are
propagated to the other subroutine.)  After the C<goto>, not even C<caller()>
d476 1
a476 1
text is described in L<perlpod>.
d483 1
a483 1
    The snazzle() function will behave in the most spectacular
d492 1
a492 1
    }
d494 3
a496 3
Note that pod translators should look at only paragraphs beginning
with a pod directive (it makes parsing easier), whereas the compiler
actually knows to look for pod escapes even in the middle of a
d506 1
a506 1
You probably shouldn't rely upon the C<warn()> being podded out forever.
a508 44

One may also use pod directives to quickly comment out a section
of code.

=head2 Plain Old Comments (Not!)

Much like the C preprocessor, Perl can process line directives.  Using
this, one can control Perl's idea of filenames and line numbers in
error or warning messages (especially for strings that are processed
with C<eval()>).  The syntax for this mechanism is the same as for most
C preprocessors: it matches the regular expression
C</^#\s*line\s+(\d+)\s*(?:\s"([^"]*)")?/> with C<$1> being the line
number for the next line, and C<$2> being the optional filename
(specified within quotes).

Here are some examples that you should be able to type into your command
shell:

    % perl
    # line 200 "bzzzt"
    # the `#' on the previous line must be the first char on line
    die 'foo';
    __END__
    foo at bzzzt line 201.

    % perl
    # line 200 "bzzzt"
    eval qq[\n#line 2001 ""\ndie 'foo']; print $@@;
    __END__
    foo at - line 2001.

    % perl
    eval qq[\n#line 200 "foo bar"\ndie 'foo']; print $@@;
    __END__
    foo at foo bar line 200.

    % perl
    # line 345 "goop"
    eval "\n#line " . __LINE__ . ' "' . __FILE__ ."\"\ndie 'foo'";
    print $@@;
    __END__
    foo at goop line 345.

=cut
@


1.1.1.3
log
@virgin perl 5.6.0
@
text
@d8 15
a22 8
The sequence of statements is executed just once, unlike in B<sed>
and B<awk> scripts, where the sequence of statements is executed
for each input line.  While this means that you must explicitly
loop over the lines of your input file (or files), it also means
you have much more control over which files and which lines you look at.
(Actually, I'm lying--it is possible to do an implicit loop with
either the B<-n> or B<-p> switch.  It's just not the mandatory
default like it is in B<sed> and B<awk>.)
a31 15
=head2 Declarations

The only things you need to declare in Perl are report formats
and subroutines--and even undefined subroutines can be handled
through AUTOLOAD.  A variable holds the undefined value (C<undef>)
until it has been assigned a defined value, which is anything
other than C<undef>.  When used as a number, C<undef> is treated
as C<0>; when used as a string, it is treated the empty string,
C<"">; and when used as a reference that isn't being assigned
to, it is treated as an error.  If you enable warnings, you'll
be notified of an uninitialized value whenever you treat C<undef>
as a string or a number.  Well, usually.  Boolean ("don't-care")
contexts and operators such as C<++>, C<-->, C<+=>, C<-=>, and
C<.=> are always exempt from such warnings.

d36 1
a36 2
lexically-scoped private variables created with C<my()>, you'll
have to make sure
d47 1
a47 1
Note that my() functions as a list operator, not as a unary operator; so
d89 1
a89 1
when applied to a C<do>-BLOCK (or to the deprecated C<do>-SUBROUTINE
a136 1
    LABEL foreach VAR (LIST) BLOCK continue BLOCK
d157 4
a160 5
true (does not evaluate to the null string C<""> or C<0> or C<"0">).
The LABEL is optional, and if present, consists of an identifier followed
by a colon.  The LABEL identifies the loop for the loop control
statements C<next>, C<last>, and C<redo>.
If the LABEL is omitted, the loop control statement
d163 1
a163 4
desperate behavior triggers a warning if you use the C<use warnings>
praga or the B<-w> flag.
Unlike a C<foreach> statement, a C<while> statement never implicitly
localises any variables.
d292 3
a294 1
the loop.  
d315 1
a315 1
    for my $elem (@@elements) {
d344 2
a345 2
    OUTER: for my $wid (@@ary1) {
    INNER:   for my $jet (@@ary2) {
d493 2
a494 2
You might also consider writing a hash of subroutine references
instead of synthesizing a C<switch> statement.
d498 4
a501 4
Although not for the faint of heart, Perl does support a C<goto>
statement.  There are three forms: C<goto>-LABEL, C<goto>-EXPR, and
C<goto>-&NAME.  A loop's LABEL is not actually a valid target for
a C<goto>; it's just the name of the loop.
d516 1
a516 1
    goto(("FOO", "BAR", "GLARCH")[$i]);
d585 1
a585 1
C</^#\s*line\s+(\d+)\s*(?:\s"([^"]+)")?\s*$/> with C<$1> being the line
@


1.1.1.4
log
@stock perl 5.6.1
@
text
@d56 2
a57 2
Note that myname() functions as a list operator, not as a unary operator;
so be careful to use C<or> instead of C<||> in this case.  However, if
d175 1
a175 1
pragma or the B<-w> flag.
d266 1
a266 1
Perl's C-style C<for> loop works like the corresponding C<while> loop;
d282 2
a283 4
There is one minor difference: if variables are declared with C<my>
in the initialization section of the C<for>, the lexical scope of
those variables is exactly the C<for> loop (the body of the loop
and the control sections).
d312 3
a314 6

If any element of LIST is an lvalue, you can modify it by modifying
VAR inside the loop.  Conversely, if any element of LIST is NOT an
lvalue, any attempt to modify that element will fail.  In other words,
the C<foreach> loop index variable is an implicit alias for each item
in the list that you're looping over.
d486 1
a486 1
C<HTTP_USER_AGENT> environment variable.
a599 5

There is a fairly obvious gotcha included with the line directive:
Debuggers and profilers will only show the last source line to appear
at a particular line number in a given file.  Care should be taken not
to cause line number collisions in code you'd like to debug later.
@


1.1.1.5
log
@stock perl 5.8.0 from CPAN
@
text
@d36 3
a38 13
as a string or a number.  Well, usually.  Boolean contexts, such as:

    my $a;
    if ($a) {}

are exempt from warnings (because they care about truth rather than
definedness).  Operators such as C<++>, C<-->, C<+=>,
C<-=>, and C<.=>, that operate on undefined left values such as:

    my $a;
    $a++;

are also always exempt from such warnings.
d233 3
a235 4
Note that if there were a C<continue> block on the above code, it would
get executed only on lines discarded by the regex (since redo skips the
continue block). A continue block is often used to reset line counters
or C<?pat?> one-time matches:
d256 3
a258 3
	last if /fred/;
	next if /barney/; # same effect as "last", but doesn't document as well
	# do something here
a260 3
This is caused by the fact that a block by itself acts as a loop that
executes once, see L<"Basic BLOCKs and Switch Statements">.

d396 2
a397 12
already several ways to write the equivalent.

However, starting from Perl 5.8 to get switch and case one can use
the Switch extension and say:

	use Switch;

after which one has switch and case.  It is not as fast as it could be
because it's not really part of the language (it's done using source
filters) but it is available, and it's very flexible.

In addition to the above BLOCK construct, you could write
d489 1
a489 1
Or if you are certain that all the C<&&> clauses are true, you can use
@


1.1.1.6
log
@perl 5.8.2 from CPAN
@
text
@d7 17
a23 21
A Perl program consists of a sequence of declarations and statements
which run from the top to the bottom.  Loops, subroutines and other
control structures allow you to jump around within the code.

Perl is a B<free-form> language, you can format and indent it however
you like.  Whitespace mostly serves to separate tokens, unlike
languages like Python where it is an important part of the syntax.

Many of Perl's syntactic elements are B<optional>.  Rather than
requiring you to put parentheses around every function call and
declare every variable, you can often leave such explicit elements off
and Perl will figure out what you meant.  This is known as B<Do What I
Mean>, abbreviated B<DWIM>.  It allows programmers to be B<lazy> and to
code in a style with which they are comfortable.

Perl B<borrows syntax> and concepts from many languages: awk, sed, C,
Bourne Shell, Smalltalk, Lisp and even English.  Other
languages have borrowed syntax from Perl, particularly its regular
expression extensions.  So if you have programmed in another language
you will see familiar pieces in Perl.  They often work the same, but
see L<perltrap> for information about how they differ.
d27 10
a36 10
The only things you need to declare in Perl are report formats and
subroutines (and sometimes not even subroutines).  A variable holds
the undefined value (C<undef>) until it has been assigned a defined
value, which is anything other than C<undef>.  When used as a number,
C<undef> is treated as C<0>; when used as a string, it is treated as
the empty string, C<"">; and when used as a reference that isn't being
assigned to, it is treated as an error.  If you enable warnings,
you'll be notified of an uninitialized value whenever you treat
C<undef> as a string or a number.  Well, usually.  Boolean contexts,
such as:
d82 1
a82 7
=head2 Comments

Text from a C<"#"> character until the end of the line is a comment,
and is ignored.  Exceptions include C<"#"> inside a string or regular
expression.

=head2 Simple Statements
d87 5
a91 13
the semicolon is optional.  (A semicolon is still encouraged if the
block takes up more than one line, because you may eventually add
another line.)  Note that there are some operators like C<eval {}> and
C<do {}> that look like compound statements, but aren't (they're just
TERMs in an expression), and thus need an explicit termination if used
as the last item in a statement.

=head2 Truth and Falsehood

The number 0, the strings C<'0'> and C<''>, the empty list C<()>, and
C<undef> are all false in a boolean context. All other values are true.

=head2 Statement Modifiers
d101 1
a101 14
    foreach LIST

The C<EXPR> following the modifier is referred to as the "condition".
Its truth or falsehood determines how the modifier will behave.

C<if> executes the statement once I<if> and only if the condition is
true.  C<unless> is the opposite, it executes the statement I<unless>
the condition is true (i.e., if the condition is false).

    print "Basset hounds got long ears" if length $ear >= 10;
    go_outside() and play() unless $is_raining;

The C<foreach> modifier is an iterator: it executes the statement once
for each item in the LIST (with C<$_> aliased to each item in turn).
d103 8
a110 15
    print "Hello $_!\n" foreach qw(world Dolly nurse);

C<while> repeats the statement I<while> the condition is true.
C<until> does the opposite, it repeats the statement I<until> the
condition is true (or while the condition is false):

    # Both of these count from 0 to 10.
    print $i++ while $i <= 10;
    print $j++ until $j >  10;

The C<while> and C<until> modifiers have the usual "C<while> loop"
semantics (conditional evaluated first), except when applied to a
C<do>-BLOCK (or to the deprecated C<do>-SUBROUTINE statement), in
which case the block executes once before the conditional is
evaluated.  This is so that you can write loops like:
d137 1
a137 8
B<NOTE:> The behaviour of a C<my> statement modified with a statement
modifier conditional or loop construct (e.g. C<my $x if ...>) is
B<undefined>.  The value of the C<my> variable may be C<undef>, any
previously assigned value, or possibly anything else.  Don't rely on
it.  Future versions of perl might do something different from the
version of perl you try it out on.  Here be dragons.

=head2 Compound Statements
d186 2
d190 4
a193 3
conditional is about to be evaluated again.  Thus it can be used to
increment a loop variable, even when the loop has been continued via
the C<next> statement.
d197 2
a198 1
The C<next> command starts the next iteration of the loop:
d205 2
a206 1
The C<last> command immediately exits the loop in question.  The
a312 8
Using C<readline> (or the operator form, C<< <EXPR> >>) as the
conditional of a C<for> loop is shorthand for the following.  This
behaviour is the same as a C<while> loop conditional.

    for ( prompt(); defined( $_ = <STDIN> ); prompt() ) {
        # do something
    }

d322 1
a322 2
the loop.  This implicit localisation occurs I<only> in a C<foreach>
loop.
d431 2
a432 2
use loop control "operators" within an expression.  That's just the binary
comma operator in scalar context.  See L<perlop/"Comma Operator">.)
d621 1
a621 1
Perl can process line directives, much like the C preprocessor.  Using
d626 3
a628 9

    # example: '# line 42 "new_filename.plx"'
    /^\#   \s*
      line \s+ (\d+)   \s*
      (?:\s("?)([^"]+)\2)? \s*
     $/x

with C<$1> being the line number for the next line, and C<$3> being
the optional filename (specified with or without quotes).
@


1.1.1.7
log
@perl 5.8.8 import
@
text
@a1 1
X<syntax>
a29 1
X<declaration> X<undef> X<undefined> X<uninitialized>
a65 1
X<subroutine, declaration>
a86 1
X<comment> X<#>
a92 1
X<statement> X<semicolon> X<expression> X<;>
a104 1
X<truth> X<falsehood> X<true> X<false> X<!> X<not> X<negation> X<0>
a107 3
Negation of a true value by C<!> or C<not> returns a special false value.
When evaluated as a string it is treated as C<''>, but as a number, it
is treated as 0.
a109 2
X<statement modifier> X<modifier> X<if> X<unless> X<while>
X<until> X<foreach> X<for>
a159 1
X<next> X<last> X<redo>
a166 1
X<last>
a180 1
X<my>
a182 2
X<statement, compound> X<block> X<bracket, curly> X<curly bracket> X<brace>
X<{> X<}> X<if> X<unless> X<while> X<until> X<foreach> X<for> X<continue>
a198 2
    LABEL until (EXPR) BLOCK
    LABEL until (EXPR) BLOCK continue BLOCK
a222 2
The C<until> statement executes the block as long as the expression is
false.
a237 1
X<loop control> X<loop, control> X<next> X<last> X<redo> X<continue>
a318 1
X<for> X<foreach>
a339 1
X<my>
a345 1
X<eof> X<end-of-file> X<end of file>
a355 1
X<readline> X<< <> >>
a361 1
X<for> X<foreach>
a371 1
X<my> X<local>
a376 1
X<$_>
a382 1
X<alias>
a386 1
X<splice>
a439 1
X<switch> X<block> X<case>
a586 1
X<goto>
a621 1
X<POD> X<documentation>
a668 1
X<comment> X<line> X<#> X<preprocessor> X<eval>
@


1.1.1.8
log
@import perl 5.10.0 from CPAN
@
text
@d240 1
a240 1
L<true|/"Truth and Falsehood">.
d334 1
a334 1
executes once, see L<"Basic BLOCKs">.
d469 2
a470 2
=head2 Basic BLOCKs
X<block>
d479 2
a480 1
The BLOCK construct can be used to emulate case structures.
d489 2
a490 2
Such constructs are quite frequently used, because older versions
of Perl had no official C<switch> statement.
d492 2
a493 2
=head2 Switch statements
X<switch> X<case> X<given> X<when> X<default>
d495 1
a495 1
Starting from Perl 5.10, you can say
d497 3
a499 1
    use feature "switch";
d501 1
a501 2
which enables a switch feature that is closely based on the
Perl 6 proposal.
d503 6
a508 3
The keywords C<given> and C<when> are analogous
to C<switch> and C<case> in other languages, so the code
above could be written as
d510 3
a512 6
    given($_) {
	when (/^abc/) { $abc = 1; }
	when (/^def/) { $def = 1; }
	when (/^xyz/) { $xyz = 1; }
	default { $nothing = 1; }
    }
d514 1
a514 1
This construct is very flexible and powerful. For example:
d516 5
a520 26
    use feature ":5.10";
    given($foo) {
	when (undef) {
	    say '$foo is undefined';
	}
	
	when ("foo") {
	    say '$foo is the string "foo"';
	}
	
	when ([1,3,5,7,9]) {
	    say '$foo is an odd digit';
	    continue; # Fall through
	}
	
	when ($_ < 100) {
	    say '$foo is numerically less than 100';
	}
	
	when (\&complicated_check) {
	    say 'complicated_check($foo) is true';
	}
	
	default {
	    die q(I don't know what to do with $foo);
	}
d523 1
a523 2
C<given(EXPR)> will assign the value of EXPR to C<$_>
within the lexical scope of the block, so it's similar to
d525 16
a540 93
	do { my $_ = EXPR; ... }

except that the block is automatically broken out of by a
successful C<when> or an explicit C<break>.

Most of the power comes from implicit smart matching:

	when($foo)

is exactly equivalent to

	when($_ ~~ $foo)

In fact C<when(EXPR)> is treated as an implicit smart match most of the
time. The exceptions are that when EXPR is:

=over 4

=item o

a subroutine or method call

=item o

a regular expression match, i.e. C</REGEX/> or C<$foo =~ /REGEX/>,
or a negated regular expression match C<$foo !~ /REGEX/>.

=item o

a comparison such as C<$_ E<lt> 10> or C<$x eq "abc">
(or of course C<$_ ~~ $c>)

=item o

C<defined(...)>, C<exists(...)>, or C<eof(...)>

=item o

A negated expression C<!(...)> or C<not (...)>, or a logical
exclusive-or C<(...) xor (...)>.

=back

then the value of EXPR is used directly as a boolean.
Furthermore:

=over 4

=item o

If EXPR is C<... && ...> or C<... and ...>, the test
is applied recursively to both arguments. If I<both>
arguments pass the test, then the argument is treated
as boolean.

=item o

If EXPR is C<... || ...> or C<... or ...>, the test
is applied recursively to the first argument.

=back

These rules look complicated, but usually they will do what
you want. For example you could write:

    when (/^\d+$/ && $_ < 75) { ... }

Another useful shortcut is that, if you use a literal array
or hash as the argument to C<when>, it is turned into a
reference. So C<given(@@foo)> is the same as C<given(\@@foo)>,
for example.

C<default> behaves exactly like C<when(1 == 1)>, which is
to say that it always matches.

See L</"Smart matching in detail"> for more information
on smart matching.

=head3 Breaking out

You can use the C<break> keyword to break out of the enclosing
C<given> block.  Every C<when> block is implicitly ended with
a C<break>.

=head3 Fall-through

You can use the C<continue> keyword to fall through from one
case to the next:

    given($foo) {
	when (/x/) { say '$foo contains an x'; continue }
	when (/y/) { say '$foo contains a y' }
	default    { say '$foo contains neither an x nor a y' }
d543 1
a543 1
=head3 Switching in a loop
d545 5
a549 7
Instead of using C<given()>, you can use a C<foreach()> loop.
For example, here's one way to count how many times a particular
string occurs in an array:

    my $count = 0;
    for (@@array) {
	when ("foo") { ++$count }
a550 1
    print "\@@array contains $count copies of 'foo'\n";
d552 1
a552 3
On exit from the C<when> block, there is an implicit C<next>.
You can override that with an explicit C<last> if you're only
interested in the first match.
d554 18
a571 3
This doesn't work if you explicitly specify a loop variable,
as in C<for $item (@@array)>. You have to use the default
variable C<$_>. (You can use C<for my $_ (@@array)>.)
d573 2
a574 1
=head3 Smart matching in detail
d576 8
a583 5
The behaviour of a smart match depends on what type of thing
its arguments are. It is always commutative, i.e. C<$a ~~ $b>
behaves the same as C<$b ~~ $a>. The behaviour is determined
by the following table: the first row that applies, in either
order, determines the match behaviour.
d585 1
d587 23
a609 62
    $a      $b        Type of Match Implied    Matching Code
    ======  =====     =====================    =============
    (overloading trumps everything)

    Code[+] Code[+]   referential equality     $a == $b
    Any     Code[+]   scalar sub truth         $b->($a)

    Hash    Hash      hash keys identical      [sort keys %$a]~~[sort keys %$b]
    Hash    Array     hash slice existence     grep {exists $a->{$_}} @@$b
    Hash    Regex     hash key grep            grep /$b/, keys %$a
    Hash    Any       hash entry existence     exists $a->{$b}

    Array   Array     arrays are identical[*]
    Array   Regex     array grep               grep /$b/, @@$a
    Array   Num       array contains number    grep $_ == $b, @@$a
    Array   Any       array contains string    grep $_ eq $b, @@$a

    Any     undef     undefined                !defined $a
    Any     Regex     pattern match            $a =~ /$b/
    Code()  Code()    results are equal        $a->() eq $b->()
    Any     Code()    simple closure truth     $b->() # ignoring $a
    Num     numish[!] numeric equality         $a == $b
    Any     Str       string equality          $a eq $b
    Any     Num       numeric equality         $a == $b

    Any     Any       string equality          $a eq $b


 + - this must be a code reference whose prototype (if present) is not ""
     (subs with a "" prototype are dealt with by the 'Code()' entry lower down)
 * - that is, each element matches the element of same index in the other
     array. If a circular reference is found, we fall back to referential
     equality.
 ! - either a real number, or a string that looks like a number

The "matching code" doesn't represent the I<real> matching code,
of course: it's just there to explain the intended meaning. Unlike
C<grep>, the smart match operator will short-circuit whenever it can.

=head3 Custom matching via overloading

You can change the way that an object is matched by overloading
the C<~~> operator. This trumps the usual smart match semantics.
See L<overload>.

=head3 Differences from Perl 6

The Perl 5 smart match and C<given>/C<when> constructs are not
absolutely identical to their Perl 6 analogues. The most visible
difference is that, in Perl 5, parentheses are required around
the argument to C<given()> and C<when()>. Parentheses in Perl 6
are always optional in a control construct such as C<if()>,
C<while()>, or C<when()>; they can't be made optional in Perl
5 without a great deal of potential confusion, because Perl 5
would parse the expression

  given $foo {
    ...
  }

as though the argument to C<given> were an element of the hash
C<%foo>, interpreting the braces as hash-element syntax.
d611 2
a612 3
The table of smart matches is not identical to that proposed by the
Perl 6 specification, mainly due to the differences between Perl 6's
and Perl 5's data models.
d614 2
a615 5
In Perl 6, C<when()> will always do an implicit smart match
with its argument, whilst it is convenient in Perl 5 to
suppress this implicit smart match in certain situations,
as documented above. (The difference is largely because Perl 5
does not, even internally, have a boolean type.)
@


1.1.1.9
log
@import perl 5.10.1
@
text
@d519 1
d523 1
d528 1
d532 1
d534 1
a534 1
	    say 'a complicated check for $foo is true';
d536 1
d558 2
a559 4
Most of the time, C<when(EXPR)> is treated as an implicit smart match of
C<$_>, i.e. C<$_ ~~ EXPR>. (See L</"Smart matching in detail"> for more
information on smart matching.) But when EXPR is one of the below
exceptional cases, it is used directly as a boolean:
d563 1
a563 1
=item *
d567 1
a567 1
=item *
d570 1
a570 1
or a negated regular expression match (C<!/REGEX/> or C<$foo !~ /REGEX/>).
d572 1
a572 1
=item *
d577 1
a577 1
=item *
d581 1
a581 1
=item *
d583 1
a583 1
a negated expression C<!(...)> or C<not (...)>, or a logical
a585 9
=item *

a filetest operator, with the exception of C<-s>, C<-M>, C<-A>, and C<-C>,
that return numerical values, not boolean ones.

=item *

the C<..> and C<...> flip-flop operators.

d588 1
a588 2
In those cases the value of EXPR is used directly as a boolean.

d593 1
a593 1
=item *
d600 1
a600 1
=item *
d602 1
a602 1
If EXPR is C<... || ...>, C<... // ...> or C<... or ...>, the test
d613 1
a613 1
or hash as the argument to C<given>, it is turned into a
d620 3
d637 1
a637 1
	default    { say '$foo does not contain a y' }
d662 6
a667 11
The behaviour of a smart match depends on what type of thing its arguments
are. The behaviour is determined by the following table: the first row
that applies determines the match behaviour (which is thus mostly
determined by the type of the right operand). Note that the smart match
implicitly dereferences any non-blessed hash or array ref, so the "Hash"
and "Array" entries apply in those cases. (For blessed references, the
"Object" entries apply.)

Note that the "Matching Code" column is not always an exact rendition.  For
example, the smart match operator short-circuits whenever possible, but
C<grep> does not.
d671 1
a671 1
    Any     undef     undefined                !defined $a
d673 2
a674 1
    Any     Object    invokes ~~ overloading on $object, or dies
d676 4
a679 16
    Hash    CodeRef   sub truth for each key[1] !grep { !$b->($_) } keys %$a
    Array   CodeRef   sub truth for each elt[1] !grep { !$b->($_) } @@$a
    Any     CodeRef   scalar sub truth          $b->($a)

    Hash    Hash      hash keys identical (every key is found in both hashes)
    Array   Hash      hash slice existence     grep { exists $b->{$_} } @@$a
    Regex   Hash      hash key grep            grep /$a/, keys %$b
    undef   Hash      always false (undef can't be a key)
    Any     Hash      hash entry existence     exists $b->{$a}

    Hash    Array     hash slice existence     grep { exists $a->{$_} } @@$b
    Array   Array     arrays are comparable[2]
    Regex   Array     array grep               grep /$a/, @@$b
    undef   Array     array contains undef     grep !defined, @@$b
    Any     Array     match against an array element[3]
                                               grep $a ~~ $_, @@$b
d681 1
a681 1
    Hash    Regex     hash key grep            grep /$b/, keys %$a
d683 4
d688 5
a693 4
    Object  Any       invokes ~~ overloading on $object, or falls back:
    Any     Num       numeric equality         $a == $b
    Num     numish[4] numeric equality         $a == $b
    undef   Any       undefined                !defined($b)
d696 11
a706 5
 1 - empty hashes or arrays will match.
 2 - that is, each element smart-matches the element of same index in the
     other array. [3]
 3 - If a circular reference is found, we fall back to referential equality.
 4 - either a real number, or a string that looks like a number
d711 1
a711 15
the C<~~> operator. This may alter the usual smart match semantics.

It should be noted that C<~~> will refuse to work on objects that
don't overload it (in order to avoid relying on the object's
underlying structure).

Note also that smart match's matching rules take precedence over
overloading, so if C<$obj> has smart match overloading, then

    $obj ~~ X

will not automatically invoke the overload method with X as an argument;
instead the table above is consulted as normal, and based in the type of X,
overloading may or may not be invoked.

@


1.1.1.10
log
@Perl 5.12.2 from CPAN
@
text
@d120 1
a120 1
X<until> X<when> X<foreach> X<for>
a129 2
    when EXPR
    for LIST
a141 16
C<when> executes the statement I<when> C<$_> smart matches C<EXPR>, and
then either C<break>s out if it's enclosed in a C<given> scope or skips
to the C<next> element when it lies directly inside a C<for> loop.
See also L</"Switch statements">.

    given ($something) {
        $abc    = 1 when /^abc/;
        $just_a = 1 when /^a/;
        $other  = 1;
    }

    for (@@names) {
	admin($_)   when [ qw/Alice Bob/ ];
	regular($_) when [ qw/Chris David Ellen/ ];
    }

a212 3
    unless (EXPR) BLOCK
    unless (EXPR) BLOCK else BLOCK
    unless (EXPR) BLOCK elsif (EXPR) BLOCK ... else BLOCK
d237 1
a237 5
the sense of the test is reversed. Like C<if>, C<unless> can be followed
by C<else>. C<unless> can even be followed by one or more C<elsif>
statements, though you may want to think twice before using that particular
language construct, as everyone reading your code will have to think at least
twice before they can understand what's going on.
a256 8
Extension modules can also hook into the Perl parser to define new
kinds of compound statement.  These are introduced by a keyword which
the extension recognises, and the syntax following the keyword is
defined entirely by the extension.  If you are an implementor, see
L<perlapi/PL_keyword_plugin> for the mechanism.  If you are using such
a module, see the module's documentation for details of the syntax that
it defines.

d656 1
a656 1
At the end of all C<when> blocks, there is an implicit C<next>.
d689 1
a689 1
    Array   Hash      hash keys intersection   grep { exists $b->{$_} } @@$a
d694 1
a694 1
    Hash    Array     hash keys intersection   grep { exists $a->{$_} } @@$b
d742 1
a742 2
the argument to C<given()> and C<when()> (except when this last
one is used as a statement modifier). Parentheses in Perl 6
@


1.1.1.11
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d9 1
a9 1
which run from the top to the bottom.  Loops, subroutines, and other
d12 3
a14 4
Perl is a B<free-form> language: you can format and indent it however
you like.  Whitespace serves mostly to separate tokens, unlike
languages like Python where it is an important part of the syntax,
or Fortran where it is immaterial.
d34 1
a34 1
subroutines (and sometimes not even subroutines).  A scalar variable holds
d44 1
d49 1
a49 1
C<-=>, and C<.=>, that operate on undefined variables such as:
d51 1
a51 1
    undef $a;
d57 2
a58 2
the execution of the primary sequence of statements: declarations all
take effect at compile time.  All declarations are typically put at
d60 2
a61 2
lexically-scoped private variables created with C<my()>,
C<state()>, or C<our()>, you'll have to make sure
d73 5
a77 15
A bare declaration like that declares the function to be a list operator,
not a unary operator, so you have to be careful to use parentheses (or
C<or> instead of C<||>.)  The C<||> operator binds too tightly to use after
list operators; it becomes part of the last element.  You can always use
parentheses around the list operators arguments to turn the list operator
back into something that behaves more like a function call.  Alternatively,
you can use the prototype C<($)> to turn the subroutine into a unary
operator:

  sub myname ($);
  $me = myname $0             || die "can't get myname";

That now parses as you'd expect, but you still ought to get in the habit of
using parentheses in that situation.  For more on prototypes, see
L<perlsub>
d100 1
a100 1
side-effects.  Every simple statement must be terminated with a
d102 1
a102 1
the semicolon is optional.  But put the semicolon in anyway if the
d104 3
a106 3
another line.  Note that there are operators like C<eval {}>, C<sub {}>, and
C<do {}> that I<look> like compound statements, but aren't--they're just
TERMs in an expression--and thus need an explicit termination when used
d112 2
a113 2
The number 0, the strings C<'0'> and C<"">, the empty list C<()>, and
C<undef> are all false in a boolean context.  All other values are true.
d115 2
a116 3
When evaluated as a string it is treated as C<"">, but as a number, it
is treated as 0.  Most Perl operators
that return true or false behave this way.
d130 1
a132 1
    when EXPR
d139 1
a139 1
the condition is true (that is, if the condition is false).
d144 17
a160 1
The C<for(each)> modifier is an iterator: it executes the statement once
d163 1
a163 1
    print "Hello $_!\n" for qw(world Dolly nurse);
d175 1
a175 1
C<do>-BLOCK (or to the Perl4 C<do>-SUBROUTINE statement), in
d177 1
a177 3
evaluated.

This is so that you can write loops like:
d182 1
a182 1
    } until !defined($line) || $line eq ".\n"
d206 2
a207 3
B<NOTE:> The behaviour of a C<my>, C<state>, or
C<our> modified with a statement modifier conditional
or loop construct (for example, C<my $x if ...>) is
a213 13
The C<when> modifier is an experimental feature that first appeared in Perl
5.14.  To use it, you should include a C<use v5.14> declaration.
(Technically, it requires only the C<switch> feature, but that aspect of it
was not available before 5.14.)  Operative only from within a C<foreach>
loop or a C<given> block, it executes the statement only if the smartmatch
C<< $_ ~~ I<EXPR> >> is true.  If the statement executes, it is followed by
a C<next> from inside a C<foreach> and C<break> from inside a C<given>.

Under the current implementation, the C<foreach> loop can be
anywhere within the C<when> modifier's dynamic scope, but must be
within the C<given> block's lexical scope.  This restricted may
be relaxed in a future release.  See L<"Switch Statements"> below.

d216 1
a216 1
X<{> X<}> X<if> X<unless> X<given> X<while> X<until> X<foreach> X<for> X<continue>
a229 1
    if (EXPR) BLOCK elsif (EXPR) BLOCK ...
a230 1

a232 1
    unless (EXPR) BLOCK elsif (EXPR) BLOCK ...
a233 3

    given (EXPR) BLOCK

a235 1

a237 1

a238 4
    LABEL for VAR (LIST) BLOCK
    LABEL for VAR (LIST) BLOCK continue BLOCK

    LABEL foreach (EXPR; EXPR; EXPR) BLOCK
a240 2

    LABEL BLOCK
d243 1
a243 6
    PHASE BLOCK

The experimental C<given> statement is I<not automatically enabled>; see 
L</"Switch Statements"> below for how to do so, and the attendant caveats.

Unlike in C and Pascal, in Perl these are all defined in terms of BLOCKs,
d246 1
a246 1
curly brackets, there are several other ways to do it.  The following
d249 1
a249 1
    if (!open(FOO)) { die "Can't open $FOO: $!" }
d251 2
a252 2
    open(FOO)  || die "Can't open $FOO: $!";
    open(FOO) ? () : die "Can't open $FOO: $!";
d258 2
a259 2
the sense of the test is reversed.  Like C<if>, C<unless> can be followed
by C<else>.  C<unless> can even be followed by one or more C<elsif>
a281 4
When a block is preceding by a compilation phase keyword such as C<BEGIN>,
C<END>, C<INIT>, C<CHECK>, or C<UNITCHECK>, then the block will run only
during the corresponding phase of execution.  See L<perlmod> for more details.

d283 2
a284 2
kinds of compound statements.  These are introduced by a keyword which
the extension recognizes, and the syntax following the keyword is
d326 1
a326 1
which is Perl shorthand for the more explicitly written version:
d339 2
a340 2
continue block).  A continue block is often used to reset line counters
or C<m?pat?> one-time matches:
d344 3
a346 3
	m?(fred)?    && s//WILMA $1 WILMA/;
	m?(barney)?  && s//BETTY $1 BETTY/;
	m?(homer)?   && s//MARGE $1 MARGE/;
d349 2
a350 2
	close ARGV  if eof;		# reset $.
	reset	    if eof;		# reset ?pat?
d357 1
a357 1
Loop control statements don't work in an C<if> or C<unless>, since
d362 1
a362 2
	next if /barney/; # same effect as "last",
			  # but doesn't document as well
d429 1
a429 1
the loop.  This implicit localization occurs I<only> in a C<foreach>
d434 3
a436 1
you can use either.  If VAR is omitted, C<$_> is set to each value.
d462 2
a463 3
    for $count (reverse(1..10), "BOOM") {
	print $count, "\n";
	sleep(1);
d521 144
a664 2
You'll also find that C<foreach> loop used to create a topicalizer
and a switch:
d666 9
a674 6
    SWITCH:
    for ($var) {
	if (/^abc/) { $abc = 1; last SWITCH; }
	if (/^def/) { $def = 1; last SWITCH; }
	if (/^xyz/) { $xyz = 1; last SWITCH; }
	$nothing = 1;
d677 1
a677 3
Such constructs are quite frequently used, both because older versions of
Perl had no official C<switch> statement, and also because the new version
described immediately below remains experimental and can sometimes be confusing.
d679 3
a681 1
=head2 Switch Statements
d683 84
a766 1
X<switch> X<case> X<given> X<when> X<default>
d768 1
a768 2
Starting from Perl 5.10.1 (well, 5.10.0, but it didn't work
right), you can say
d770 1
a770 1
    use feature "switch";
d772 13
a784 76
to enable an experimental switch feature.  This is loosely based on an
old version of a Perl 6 proposal, but it no longer resembles the Perl 6
construct.   You also get the switch feature whenever you declare that your
code prefers to run under a version of Perl that is 5.10 or later.  For
example:

    use v5.14;

Under the "switch" feature, Perl gains the experimental keywords
C<given>, C<when>, C<default>, C<continue>, and C<break>.
Starting from Perl 5.16, one can prefix the switch
keywords with C<CORE::> to access the feature without a C<use feature>
statement.  The keywords C<given> and
C<when> are analogous to C<switch> and
C<case> in other languages, so the code in the previous section could be
rewritten as

    use v5.10.1;
    for ($var) {
	when (/^abc/) { $abc = 1 }
	when (/^def/) { $def = 1 }
	when (/^xyz/) { $xyz = 1 }
	default       { $nothing = 1 }
    }

The C<foreach> is the non-experimental way to set a topicalizer.
If you wish to use the highly experimental C<given>, that could be
written like this:

    use v5.10.1;
    given ($var) {
	when (/^abc/) { $abc = 1 }
	when (/^def/) { $def = 1 }
	when (/^xyz/) { $xyz = 1 }
	default       { $nothing = 1 }
    }

As of 5.14, that can also be written this way:

    use v5.14;
    for ($var) {
	$abc = 1 when /^abc/;
	$def = 1 when /^def/;
	$xyz = 1 when /^xyz/;
	default { $nothing = 1 }
    }

Or if you don't care to play it safe, like this:

    use v5.14;
    given ($var) {
	$abc = 1 when /^abc/;
	$def = 1 when /^def/;
	$xyz = 1 when /^xyz/;
	default { $nothing = 1 }
    }

The arguments to C<given> and C<when> are in scalar context,
and C<given> assigns the C<$_> variable its topic value.

Exactly what the I<EXPR> argument to C<when> does is hard to describe
precisely, but in general, it tries to guess what you want done.  Sometimes
it is interpreted as C<< $_ ~~ I<EXPR> >>, and sometimes it does not.  It
also behaves differently when lexically enclosed by a C<given> block than
it does when dynamically enclosed by a C<foreach> loop.  The rules are far
too difficult to understand to be described here.  See L</"Experimental Details
on given and when"> later on.

Due to an unfortunate bug in how C<given> was implemented between Perl 5.10
and 5.14, under those implementations the version of C<$_> governed by
C<given> is merely a lexically scoped copy of the original, not a
dynamically scoped alias to the original, as it would be if it were a
C<foreach> or under both the original and the current Perl 6 language
specification.  This bug is expected to be addressed in a future release of
Perl.  For forwards compatibility, if you really want a lexical C<$_>,
specify that explicitly:
d786 2
a787 1
    given(my $_ = EXPR) { ... }
d789 9
a797 2
In the meanwhile, stick to C<foreach> for your topicalizer and
you will be less unhappy.
a834 85
=head2 The Ellipsis Statement
X<...>
X<... statement>
X<ellipsis operator>
X<elliptical statement>
X<unimplemented statement>
X<unimplemented operator>
X<yada-yada>
X<yada-yada operator>
X<... operator>
X<whatever operator>
X<triple-dot operator>

Beginning in Perl 5.12, Perl accepts an ellipsis, "C<...>", as a
placeholder for code that you haven't implemented yet.  This form of
ellipsis, the unimplemented statement, should not be confused with the
binary flip-flop C<...> operator.  One is a statement and the other an
operator.  (Perl doesn't usually confuse them because usually Perl can tell
whether it wants an operator or a statement, but see below for exceptions.)

When Perl 5.12 or later encounters an ellipsis statement, it parses this
without error, but if and when you should actually try to execute it, Perl
throws an exception with the text C<Unimplemented>:

    use v5.12;
    sub unimplemented { ... }
    eval { unimplemented() };
    if ($@@ =~ /^Unimplemented at /) {
	say "I found an ellipsis!";
    }

You can only use the elliptical statement to stand in for a
complete statement.  These examples of how the ellipsis works:

    use v5.12;
    { ... }
    sub foo { ... }
    ...;
    eval { ... };
    sub somemeth {
	my $self = shift;
	...;
    }
    $x = do {
	my $n;
	...;
	say "Hurrah!";
	$n;
    };

The elliptical statement cannot stand in for an expression that
is part of a larger statement, since the C<...> is also the three-dot
version of the flip-flop operator (see L<perlop/"Range Operators">).

These examples of attempts to use an ellipsis are syntax errors:

    use v5.12;

    print ...;
    open(my $fh, ">", "/dev/passwd") or ...;
    if ($condition && ... ) { say "Howdy" };

There are some cases where Perl can't immediately tell the difference
between an expression and a statement.  For instance, the syntax for a
block and an anonymous hash reference constructor look the same unless
there's something in the braces to give Perl a hint.  The ellipsis is a
syntax error if Perl doesn't guess that the C<{ ... }> is a block.  In that
case, it doesn't think the C<...> is an ellipsis because it's expecting an
expression instead of a statement:

    @@transformed = map { ... } @@input;  # syntax error

You can use a C<;> inside your block to denote that the C<{ ...  }> is a
block and not a hash reference constructor.  Now the ellipsis works:

    @@transformed = map {; ... } @@input; # ; disambiguates

    @@transformed = map { ...; } @@input; # ; disambiguates

Note: Some folks colloquially refer to this bit of punctuation as a
"yada-yada" or "triple-dot", but its true name
is actually an ellipsis.  Perl does not yet
accept the Unicode version, U+2026 HORIZONTAL ELLIPSIS, as an alias for
C<...>, but someday it may.

d889 2
a890 2
with C<eval()>).  The syntax for this mechanism is almost the same as for
most C preprocessors: it matches the regular expression
d895 1
a895 1
      (?:\s("?)([^"]+)\g2)? \s*
d899 1
a899 2
the optional filename (specified with or without quotes).  Note that
no whitespace may precede the C<< # >>, unlike modern C preprocessors.
d911 1
a911 1
    # the '#' on the previous line must be the first char on line
a932 331

=head2 Experimental Details on given and when

As previously mentioned, the "switch" feature is considered highly
experimental; it is subject to change with little notice.  In particular,
both C<given> and C<when> have tricky behaviours that are expected to
change to become less tricky in the future.  Do not rely upon their
current (mis)implementations.

Here is a longer example of C<given>:

    use feature ":5.10";
    given ($foo) {
	when (undef) {
	    say '$foo is undefined';
	}
	when ("foo") {
	    say '$foo is the string "foo"';
	}
	when ([1,3,5,7,9]) {
	    say '$foo is an odd digit';
	    continue; # Fall through
	}
	when ($_ < 100) {
	    say '$foo is numerically less than 100';
	}
	when (\&complicated_check) {
	    say 'a complicated check for $foo is true';
	}
	default {
	    die q(I don't know what to do with $foo);
	}
    }

As currently implemented, C<given(EXPR)> assign the value of I<EXPR> to
merely a lexically scoped I<B<copy>> (!) of C<$_>, not a dynamically
scoped alias the way C<foreach> does.  That makes it similar to

	do { my $_ = EXPR; ... }

except that the block is automatically broken out of by a
successful C<when> or an explicit C<break>.  Because it is only a
copy, and because it is only lexically scoped, not dynamically
scoped, you cannot do the things with it that you are used to in
a C<foreach> loop.  In particular, you probably cannot use
arbitrary function calls.  Best stick to C<foreach> for that.

Most of the power comes from the implicit smartmatching that can
sometimes apply.  Most of the time, C<when(EXPR)> is treated as an
implicit smartmatch of C<$_>, that is, C<$_ ~~ EXPR>.  (See
L<perlop/"Smartmatch Operator"> for more information on smartmatching.)
But when I<EXPR> is one of the 10 exceptional cases (or things like them)
listed below, it is used directly as a boolean.

=over 4

=item 1.

A user-defined subroutine call or a method invocation.

=item 2.

A regular expression match in the form of C</REGEX/>, C<$foo =~ /REGEX/>,
or C<$foo =~ EXPR>.  Also, a negated regular expression match in
the form C<!/REGEX/>, C<$foo !~ /REGEX/>, or C<$foo !~ EXPR>.

=item 3.

A smart match that uses an explicit C<~~> operator, such as C<EXPR ~~ EXPR>.

=item 4.

A boolean comparison operator such as C<$_ E<lt> 10> or C<$x eq "abc"> The
relational operators that this applies to are the six numeric comparisons
(C<< < >>, C<< > >>, C<< <= >>, C<< >= >>, C<< == >>, and C<< != >>), and
the six string comparisons (C<lt>, C<gt>, C<le>, C<ge>, C<eq>, and C<ne>).

B<NOTE:> You will often have to use C<$c ~~ $_> because
the default case uses C<$_ ~~ $c> , which is frequently
the opposite of what you want.

=item 5.

At least the three builtin functions C<defined(...)>, C<exists(...)>, and
C<eof(...)>.  We might someday add more of these later if we think of them.

=item 6.

A negated expression, whether C<!(EXPR)> or C<not(EXPR)>, or a logical
exclusive-or, C<(EXPR1) xor (EXPR2)>.  The bitwise versions (C<~> and C<^>)
are not included.

=item 7.

A filetest operator, with exactly 4 exceptions: C<-s>, C<-M>, C<-A>, and
C<-C>, as these return numerical values, not boolean ones.  The C<-z>
filetest operator is not included in the exception list.

=item 8.

The C<..> and C<...> flip-flop operators.  Note that the C<...> flip-flop
operator is completely different from the C<...> elliptical statement
just described.

=back

In those 8 cases above, the value of EXPR is used directly as a boolean, so
no smartmatching is done.  You may think of C<when> as a smartsmartmatch.

Furthermore, Perl inspects the operands of logical operators to
decide whether to use smartmatching for each one by applying the
above test to the operands:

=over 4

=item 9.

If EXPR is C<EXPR1 && EXPR2> or C<EXPR1 and EXPR2>, the test is applied
I<recursively> to both EXPR1 and EXPR2.
Only if I<both> operands also pass the
test, I<recursively>, will the expression be treated as boolean.  Otherwise,
smartmatching is used.

=item 10.

If EXPR is C<EXPR1 || EXPR2>, C<EXPR1 // EXPR2>, or C<EXPR1 or EXPR2>, the
test is applied I<recursively> to EXPR1 only (which might itself be a
higher-precedence AND operator, for example, and thus subject to the
previous rule), not to EXPR2.  If EXPR1 is to use smartmatching, then EXPR2
also does so, no matter what EXPR2 contains.  But if EXPR2 does not get to
use smartmatching, then the second argument will not be either.  This is
quite different from the C<&&> case just described, so be careful.

=back

These rules are complicated, but the goal is for them to do what you want
(even if you don't quite understand why they are doing it).  For example:

    when (/^\d+$/ && $_ < 75) { ... }

will be treated as a boolean match because the rules say both
a regex match and an explicit test on C<$_> will be treated
as boolean.

Also:

    when ([qw(foo bar)] && /baz/) { ... }

will use smartmatching because only I<one> of the operands is a boolean:
the other uses smartmatching, and that wins.

Further:

    when ([qw(foo bar)] || /^baz/) { ... }

will use smart matching (only the first operand is considered), whereas

    when (/^baz/ || [qw(foo bar)]) { ... }

will test only the regex, which causes both operands to be
treated as boolean.  Watch out for this one, then, because an
arrayref is always a true value, which makes it effectively
redundant.  Not a good idea.

Tautologous boolean operators are still going to be optimized
away.  Don't be tempted to write

    when ("foo" or "bar") { ... }

This will optimize down to C<"foo">, so C<"bar"> will never be considered (even
though the rules say to use a smartmatch
on C<"foo">).  For an alternation like
this, an array ref will work, because this will instigate smartmatching:

    when ([qw(foo bar)] { ... }

This is somewhat equivalent to the C-style switch statement's fallthrough
functionality (not to be confused with I<Perl's> fallthrough
functionality--see below), wherein the same block is used for several
C<case> statements.

Another useful shortcut is that, if you use a literal array or hash as the
argument to C<given>, it is turned into a reference.  So C<given(@@foo)> is
the same as C<given(\@@foo)>, for example.

C<default> behaves exactly like C<when(1 == 1)>, which is
to say that it always matches.

=head3 Breaking out

You can use the C<break> keyword to break out of the enclosing
C<given> block.  Every C<when> block is implicitly ended with
a C<break>.

=head3 Fall-through

You can use the C<continue> keyword to fall through from one
case to the next:

    given($foo) {
	when (/x/) { say '$foo contains an x'; continue }
	when (/y/) { say '$foo contains a y'            }
	default    { say '$foo does not contain a y'    }
    }

=head3 Return value

When a C<given> statement is also a valid expression (for example,
when it's the last statement of a block), it evaluates to:

=over 4

=item *

An empty list as soon as an explicit C<break> is encountered.

=item *

The value of the last evaluated expression of the successful
C<when>/C<default> clause, if there happens to be one.

=item *

The value of the last evaluated expression of the C<given> block if no
condition is true.

=back

In both last cases, the last expression is evaluated in the context that
was applied to the C<given> block.

Note that, unlike C<if> and C<unless>, failed C<when> statements always
evaluate to an empty list.

    my $price = do {
	given ($item) {
	    when (["pear", "apple"]) { 1 }
	    break when "vote";      # My vote cannot be bought
	    1e10  when /Mona Lisa/;
	    "unknown";
	}
    };

Currently, C<given> blocks can't always
be used as proper expressions.  This
may be addressed in a future version of Perl.

=head3 Switching in a loop

Instead of using C<given()>, you can use a C<foreach()> loop.
For example, here's one way to count how many times a particular
string occurs in an array:

    use v5.10.1;
    my $count = 0;
    for (@@array) {
	when ("foo") { ++$count }
    }
    print "\@@array contains $count copies of 'foo'\n";

Or in a more recent version:

    use v5.14;
    my $count = 0;
    for (@@array) {
	++$count when "foo";
    }
    print "\@@array contains $count copies of 'foo'\n";

At the end of all C<when> blocks, there is an implicit C<next>.
You can override that with an explicit C<last> if you're
interested in only the first match alone.

This doesn't work if you explicitly specify a loop variable, as
in C<for $item (@@array)>.  You have to use the default variable C<$_>.

=head3 Differences from Perl 6

The Perl 5 smartmatch and C<given>/C<when> constructs are not compatible
with their Perl 6 analogues.  The most visible difference and least
important difference is that, in Perl 5, parentheses are required around
the argument to C<given()> and C<when()> (except when this last one is used
as a statement modifier).  Parentheses in Perl 6 are always optional in a
control construct such as C<if()>, C<while()>, or C<when()>; they can't be
made optional in Perl 5 without a great deal of potential confusion,
because Perl 5 would parse the expression

    given $foo {
	...
    }

as though the argument to C<given> were an element of the hash
C<%foo>, interpreting the braces as hash-element syntax.

However, their are many, many other differences.  For example,
this works in Perl 5:

    use v5.12;
    my @@primary = ("red", "blue", "green");

    if (@@primary ~~ "red") {
        say "primary smartmatches red";
    }

    if ("red" ~~ @@primary) {
        say "red smartmatches primary";
    }

    say "that's all, folks!";

But it doesn't work at all in Perl 6.  Instead, you should
use the (parallelizable) C<any> operator instead:

   if any(@@primary) eq "red" {
       say "primary smartmatches red";
   }

   if "red" eq any(@@primary) {
       say "red smartmatches primary";
   }

The table of smartmatches in L<perlop/"Smartmatch Operator"> is not
identical to that proposed by the Perl 6 specification, mainly due to
differences between Perl 6's and Perl 5's data models, but also because
the Perl 6 spec has changed since Perl 5 rushed into early adoption.

In Perl 6, C<when()> will always do an implicit smartmatch with its
argument, while in Perl 5 it is convenient (albeit potentially confusing) to
suppress this implicit smartmatch in various rather loosely-defined
situations, as roughly outlined above.  (The difference is largely because
Perl 5 does not have, even internally, a boolean type.)
@


1.1.1.12
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d641 1
a641 1
it is interpreted as C<< $_ ~~ I<EXPR> >>, and sometimes it is not.  It
d648 1
a648 1
and 5.16, under those implementations the version of C<$_> governed by
d652 3
a654 5
specification.  This bug was fixed in Perl
5.18.  If you really want a lexical C<$_>,
specify that explicitly, but note that C<my $_>
is now deprecated and will warn unless warnings
have been disabled:
d658 1
a658 2
If your code still needs to run on older versions,
stick to C<foreach> for your topicalizer and
d886 3
a888 4
C<when> has tricky behaviours that are expected to change to become less
tricky in the future.  Do not rely upon its current (mis)implementation.
Before Perl 5.18, C<given> also had tricky behaviours that you should still
beware of if your code must run on older versions of Perl.
d915 1
a915 1
Before Perl 5.18, C<given(EXPR)> assigned the value of I<EXPR> to
d917 1
a917 1
scoped alias the way C<foreach> does.  That made it similar to
d921 6
a926 6
except that the block was automatically broken out of by a successful
C<when> or an explicit C<break>.  Because it was only a copy, and because
it was only lexically scoped, not dynamically scoped, you could not do the
things with it that you are used to in a C<foreach> loop.  In particular,
it did not work for arbitrary function calls if those functions might try
to access $_.  Best stick to C<foreach> for that.
d953 1
a953 1
A boolean comparison operator such as C<$_ E<lt> 10> or C<$x eq "abc">.  The
@


1.1.1.13
log
@Import perl-5.20.1
@
text
@d87 1
a87 1
L<perlsub>.
a431 15
As a special case, if the test in the C<for> loop (or the corresponding
C<while> loop) is empty, it is treated as true.  That is, both

    for (;;) {
	...
    }

and

    while () {
	...
    }

are treated as infinite loops.

a535 6
Perceptive Perl hackers may have noticed that a C<for> loop has a return
value, and that this value can be captured by wrapping the loop in a C<do>
block.  The reward for this discovery is this cautionary advice:  The
return value of a C<for> loop is unspecified and may change without notice.
Do not rely on it.

d941 1
a941 1
=item Z<>1.
d945 1
a945 1
=item Z<>2.
d951 1
a951 1
=item Z<>3.
d955 1
a955 1
=item Z<>4.
d966 1
a966 1
=item Z<>5.
d971 1
a971 1
=item Z<>6.
d977 1
a977 1
=item Z<>7.
d983 1
a983 1
=item Z<>8.
d1000 1
a1000 1
=item Z<>9.
d1008 1
a1008 1
=item Z<>10.
d1196 1
a1196 1
use the (parallelizable) C<any> operator:
@


1.1.1.14
log
@Import perl-5.20.2
@
text
@d71 1
a71 1
    $me = myname $0             or die "can't get myname";
d177 2
a178 2
        $line = <STDIN>;
        ...
d189 2
a190 2
        next if $x == $y;
        # do something here
d196 5
a200 5
    LOOP: {
            do {
                last if $x = $y**2;
                # do something here
            } while $x++ <= $z;
d270 1
a270 1
The experimental C<given> statement is I<not automatically enabled>; see
d283 1
a283 1
        # a bit exotic, that last one
d330 2
a331 2
        next LINE if /^#/;      # discard comments
        ...
d338 2
a339 2
        last LINE if /^$/;      # exit when done with header
        ...
d352 6
a357 6
        chomp;
        if (s/\\$//) {
            $_ .= <>;
            redo unless eof();
        }
        # now process $_
d363 6
a368 6
        chomp($line);
        if ($line =~ s/\\$//) {
            $line .= <ARGV>;
            redo LINE unless eof(); # not eof(ARGV)!
        }
        # now process $line
d378 3
a380 3
        m?(fred)?    && s//WILMA $1 WILMA/;
        m?(barney)?  && s//BETTY $1 BETTY/;
        m?(homer)?   && s//MARGE $1 MARGE/;
d382 3
a384 3
        print "$ARGV $.: $_";
        close ARGV  if eof;             # reset $.
        reset       if eof;             # reset ?pat?
d395 4
a398 4
        last if /fred/;
        next if /barney/; # same effect as "last",
                          # but doesn't document as well
        # do something here
d414 1
a414 1
        ...
d421 1
a421 1
        ...
d423 1
a423 1
        $i++;
d436 1
a436 1
        ...
d442 1
a442 1
        ...
d457 1
a457 1
        # do something
d507 1
a507 1
        $elem *= 2;
d511 2
a512 2
        print $count, "\n";
        sleep(1);
d518 1
a518 1
        print "Item: $item\n";
d524 7
a530 7
        for (my $j = 0; $j < @@ary2; $j++) {
            if ($ary1[$i] > $ary2[$j]) {
                last; # can't go to outer :-(
            }
            $ary1[$i] += $ary2[$j];
        }
        # this is where that last takes me
d538 4
a541 4
                next OUTER if $wid > $jet;
                $wid += $jet;
             }
          }
d570 4
a573 4
        if (/^abc/) { $abc = 1; last SWITCH; }
        if (/^def/) { $def = 1; last SWITCH; }
        if (/^xyz/) { $xyz = 1; last SWITCH; }
        $nothing = 1;
d581 4
a584 4
        if (/^abc/) { $abc = 1; last SWITCH; }
        if (/^def/) { $def = 1; last SWITCH; }
        if (/^xyz/) { $xyz = 1; last SWITCH; }
        $nothing = 1;
d619 4
a622 4
        when (/^abc/) { $abc = 1 }
        when (/^def/) { $def = 1 }
        when (/^xyz/) { $xyz = 1 }
        default       { $nothing = 1 }
d631 4
a634 4
        when (/^abc/) { $abc = 1 }
        when (/^def/) { $def = 1 }
        when (/^xyz/) { $xyz = 1 }
        default       { $nothing = 1 }
d641 4
a644 4
        $abc = 1 when /^abc/;
        $def = 1 when /^def/;
        $xyz = 1 when /^xyz/;
        default { $nothing = 1 }
d651 4
a654 4
        $abc = 1 when /^abc/;
        $def = 1 when /^def/;
        $xyz = 1 when /^xyz/;
        default { $nothing = 1 }
d749 1
a749 1
        say "I found an ellipsis!";
d761 2
a762 2
        my $self = shift;
        ...;
d765 4
a768 4
        my $n;
        ...;
        say "Hurrah!";
        $n;
d791 4
a794 1
    @@transformed = map { ... } @@input;    # syntax error
d796 1
a796 3
Inside your block, you can use a C<;> before the ellipsis to denote that the
C<{ ... }> is a block and not a hash reference constructor.  Now the ellipsis
works:
d798 1
a798 1
    @@transformed = map {; ... } @@input;   # ';' disambiguates
d802 3
a804 1
is actually an ellipsis.
d831 2
a832 2
        my $thingie = shift;
        .........
d919 19
a937 19
        when (undef) {
            say '$foo is undefined';
        }
        when ("foo") {
            say '$foo is the string "foo"';
        }
        when ([1,3,5,7,9]) {
            say '$foo is an odd digit';
            continue; # Fall through
        }
        when ($_ < 100) {
            say '$foo is numerically less than 100';
        }
        when (\&complicated_check) {
            say 'a complicated check for $foo is true';
        }
        default {
            die q(I don't know what to do with $foo);
        }
d944 1
a944 1
        do { my $_ = EXPR; ... }
d1106 3
a1108 3
        when (/x/) { say '$foo contains an x'; continue }
        when (/y/) { say '$foo contains a y'            }
        default    { say '$foo does not contain a y'    }
d1141 6
a1146 6
        given ($item) {
            when (["pear", "apple"]) { 1 }
            break when "vote";      # My vote cannot be bought
            1e10  when /Mona Lisa/;
            "unknown";
        }
d1162 1
a1162 1
        when ("foo") { ++$count }
d1171 1
a1171 1
        ++$count when "foo";
d1194 1
a1194 1
        ...
@


1.1.1.15
log
@Import perl-5.24.2
@
text
@d184 2
a185 1
(for C<next>/C<redo>) or around it (for C<last>) to do that sort of thing.
a187 2
For C<next> or C<redo>, just double the braces:

d193 1
a193 1
For C<last>, you have to be more elaborate and put braces around it:
a195 10
    {
        do {
            last if $x == $y**2;
            # do something here
        } while $x++ <= $z;
    }

If you need both C<next> and C<last>, you have to do both and also use a
loop label:

d197 4
a200 5
        do {{
            next if $x == $y;
            last LOOP if $x == $y**2;
            # do something here
        }} until $x++ > $z;
d472 1
a472 1
The C<foreach> loop iterates over a normal list value and sets the scalar
a501 9
As of Perl 5.22, there is an experimental variant of this loop that accepts
a variable preceded by a backslash for VAR, in which case the items in the
LIST must be references.  The backslashed variable will become an alias
to each referenced item in the LIST, which must be of the correct type.
The variable needn't be a scalar in this case, and the backslash may be
followed by C<my>.  To use this form, you must enable the C<refaliasing>
feature via C<use feature>.  (See L<feature>.  See also L<perlref/Assigning
to References>.)

a520 6
    use feature "refaliasing";
    no warnings "experimental::refaliasing";
    foreach \my %hash (@@array_of_hash_references) {
        # do something which each %hash
    }

d673 7
a679 2
specification.  This bug was fixed in Perl 5.18 (and lexicalized C<$_> itself
was removed in Perl 5.24).
a972 3
B<NOTE:> You will often have to use C<$c ~~ $_> because the default case
uses C<$_ ~~ $c> , which is frequentlythe opposite of what you want.

d979 4
@


