head	1.24;
access;
symbols
	OPENBSD_6_1:1.24.0.2
	OPENBSD_6_1_BASE:1.24
	OPENBSD_6_0:1.22.0.8
	OPENBSD_6_0_BASE:1.22
	OPENBSD_5_9:1.22.0.2
	OPENBSD_5_9_BASE:1.22
	OPENBSD_5_8:1.22.0.4
	OPENBSD_5_8_BASE:1.22
	PERL_5_20_2:1.1.1.17
	OPENBSD_5_7:1.20.0.2
	OPENBSD_5_7_BASE:1.20
	PERL_5_20_1:1.1.1.16
	OPENBSD_5_6:1.18.0.4
	OPENBSD_5_6_BASE:1.18
	PERL_5_18_2:1.1.1.15
	PERL:1.1.1
	OPENBSD_5_5:1.17.0.6
	OPENBSD_5_5_BASE:1.17
	OPENBSD_5_4:1.17.0.2
	OPENBSD_5_4_BASE:1.17
	PERL_5_16_3:1.1.1.14
	OPENBSD_5_3:1.16.0.10
	OPENBSD_5_3_BASE:1.16
	OPENBSD_5_2:1.16.0.8
	OPENBSD_5_2_BASE:1.16
	OPENBSD_5_1_BASE:1.16
	OPENBSD_5_1:1.16.0.6
	OPENBSD_5_0:1.16.0.4
	OPENBSD_5_0_BASE:1.16
	OPENBSD_4_9:1.16.0.2
	OPENBSD_4_9_BASE:1.16
	PERL_5_12_2:1.1.1.13
	OPENBSD_4_8:1.15.0.4
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.15.0.2
	OPENBSD_4_7_BASE:1.15
	PERL_5_10_1:1.1.1.12
	OPENBSD_4_6:1.13.0.6
	OPENBSD_4_6_BASE:1.13
	OPENBSD_4_5:1.13.0.2
	OPENBSD_4_5_BASE:1.13
	PERL_5_10_0:1.1.1.11
	OPENBSD_4_4:1.12.0.10
	OPENBSD_4_4_BASE:1.12
	OPENBSD_4_3:1.12.0.8
	OPENBSD_4_3_BASE:1.12
	OPENBSD_4_2:1.12.0.6
	OPENBSD_4_2_BASE:1.12
	OPENBSD_4_1:1.12.0.4
	OPENBSD_4_1_BASE:1.12
	OPENBSD_4_0:1.12.0.2
	OPENBSD_4_0_BASE:1.12
	PERL_5_8_8:1.1.1.10
	OPENBSD_3_9:1.10.0.6
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.4
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.10.0.2
	OPENBSD_3_7_BASE:1.10
	PERL_5_8_6:1.1.1.9
	OPENBSD_3_6:1.9.0.2
	OPENBSD_3_6_BASE:1.9
	PERL_5_8_5:1.1.1.8
	PERL_5_8_3:1.1.1.7
	OPENBSD_3_5:1.7.0.2
	OPENBSD_3_5_BASE:1.7
	PERL_5_8_2:1.1.1.6
	OPENBSD_3_4:1.6.0.4
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.6.0.2
	OPENBSD_3_3_BASE:1.6
	PERL_5_8_0:1.1.1.5
	OPENBSD_3_2:1.5.0.6
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.4
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	PERL_5_6_1:1.1.1.4
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	PERL_5_6_0:1.1.1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	PERL_500503:1.1.1.2
	CPAN:1.1.1
	OPENBSD_2_5:1.2.0.6
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.4
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	perl5003:1.1.1.1
	lwall:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.24
date	2017.02.05.00.33.41;	author afresh1;	state Exp;
branches;
next	1.23;
commitid	7JLVNm1wwPgqSqTa;

1.23
date	2017.02.05.00.32.18;	author afresh1;	state Exp;
branches;
next	1.22;
commitid	cxJ08BvJA9Pt2PTM;

1.22
date	2015.04.25.19.26.22;	author afresh1;	state Exp;
branches;
next	1.21;
commitid	3qGYFVvfrExB70FB;

1.21
date	2015.04.25.19.14.48;	author afresh1;	state Exp;
branches;
next	1.20;
commitid	XRK22kO4se3v2i2I;

1.20
date	2014.11.17.21.01.01;	author afresh1;	state Exp;
branches;
next	1.19;
commitid	LnErp1MFKSuew5Fr;

1.19
date	2014.11.17.20.57.07;	author afresh1;	state Exp;
branches;
next	1.18;
commitid	QP75iYx42Uo7mMxO;

1.18
date	2014.03.24.15.05.33;	author afresh1;	state Exp;
branches;
next	1.17;

1.17
date	2013.03.25.20.40.59;	author sthen;	state Exp;
branches;
next	1.16;

1.16
date	2010.09.24.15.07.04;	author millert;	state Exp;
branches;
next	1.15;

1.15
date	2009.10.13.01.25.48;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	2009.10.12.18.24.47;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	2008.09.29.17.36.17;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2006.04.01.21.24.36;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2006.03.28.19.23.11;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2005.01.15.21.30.37;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2004.08.09.18.10.16;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2004.04.07.21.33.08;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2003.12.03.03.02.45;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.10.27.22.25.33;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.24.18.35.57;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.06.17.07.35;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	99.04.29.22.52.17;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.11.30.07.59.22;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.08.19.10.13.03;	author downsj;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.08.19.10.13.03;	author downsj;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.04.29.22.40.56;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2000.04.06.16.10.28;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2001.05.24.18.24.44;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2002.10.27.22.15.06;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2003.12.03.02.44.23;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2004.04.07.21.13.34;	author millert;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2004.08.09.17.48.16;	author millert;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2005.01.15.21.17.56;	author millert;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	2006.03.28.18.49.22;	author millert;	state Exp;
branches;
next	1.1.1.11;

1.1.1.11
date	2008.09.29.17.18.52;	author millert;	state Exp;
branches;
next	1.1.1.12;

1.1.1.12
date	2009.10.12.18.10.38;	author millert;	state Exp;
branches;
next	1.1.1.13;

1.1.1.13
date	2010.09.24.14.49.11;	author millert;	state Exp;
branches;
next	1.1.1.14;

1.1.1.14
date	2013.03.25.20.09.22;	author sthen;	state Exp;
branches;
next	1.1.1.15;

1.1.1.15
date	2014.03.24.14.59.08;	author afresh1;	state Exp;
branches;
next	1.1.1.16;

1.1.1.16
date	2014.11.17.20.53.15;	author afresh1;	state Exp;
branches;
next	1.1.1.17;
commitid	B31cAbBIXiCqnL97;

1.1.1.17
date	2015.04.25.19.10.44;	author afresh1;	state Exp;
branches;
next	;
commitid	Wpcs5S8qILgEZC7F;


desc
@@


1.24
log
@Apply local patches - perl-5.24.1
@
text
@=head1 NAME
X<operator>

perlop - Perl operators and precedence

=head1 DESCRIPTION

In Perl, the operator determines what operation is performed,
independent of the type of the operands.  For example S<C<$x + $y>>
is always a numeric addition, and if C<$x> or C<$y> do not contain
numbers, an attempt is made to convert them to numbers first.

This is in contrast to many other dynamic languages, where the
operation is determined by the type of the first argument.  It also
means that Perl has two versions of some operators, one for numeric
and one for string comparison.  For example S<C<$x == $y>> compares
two numbers for equality, and S<C<$x eq $y>> compares two strings.

There are a few exceptions though: C<x> can be either string
repetition or list repetition, depending on the type of the left
operand, and C<&>, C<|>, C<^> and C<~> can be either string or numeric bit
operations.

=head2 Operator Precedence and Associativity
X<operator, precedence> X<precedence> X<associativity>

Operator precedence and associativity work in Perl more or less like
they do in mathematics.

I<Operator precedence> means some operators are evaluated before
others.  For example, in S<C<2 + 4 * 5>>, the multiplication has higher
precedence so S<C<4 * 5>> is evaluated first yielding S<C<2 + 20 ==
22>> and not S<C<6 * 5 == 30>>.

I<Operator associativity> defines what happens if a sequence of the
same operators is used one after another: whether the evaluator will
evaluate the left operations first, or the right first.  For example, in
S<C<8 - 4 - 2>>, subtraction is left associative so Perl evaluates the
expression left to right.  S<C<8 - 4>> is evaluated first making the
expression S<C<4 - 2 == 2>> and not S<C<8 - 2 == 6>>.

Perl operators have the following associativity and precedence,
listed from highest precedence to lowest.  Operators borrowed from
C keep the same precedence relationship with each other, even where
C's precedence is slightly screwy.  (This makes learning Perl easier
for C folks.)  With very few exceptions, these all operate on scalar
values only, not array values.

    left	terms and list operators (leftward)
    left	->
    nonassoc	++ --
    right	**
    right	! ~ \ and unary + and -
    left	=~ !~
    left	* / % x
    left	+ - .
    left	<< >>
    nonassoc	named unary operators
    nonassoc	< > <= >= lt gt le ge
    nonassoc	== != <=> eq ne cmp ~~
    left	&
    left	| ^
    left	&&
    left	|| //
    nonassoc	..  ...
    right	?:
    right	= += -= *= etc. goto last next redo dump
    left	, =>
    nonassoc	list operators (rightward)
    right	not
    left	and
    left	or xor

In the following sections, these operators are covered in precedence order.

Many operators can be overloaded for objects.  See L<overload>.

=head2 Terms and List Operators (Leftward)
X<list operator> X<operator, list> X<term>

A TERM has the highest precedence in Perl.  They include variables,
quote and quote-like operators, any expression in parentheses,
and any function whose arguments are parenthesized.  Actually, there
aren't really functions in this sense, just list operators and unary
operators behaving as functions because you put parentheses around
the arguments.  These are all documented in L<perlfunc>.

If any list operator (C<print()>, etc.) or any unary operator (C<chdir()>, etc.)
is followed by a left parenthesis as the next token, the operator and
arguments within parentheses are taken to be of highest precedence,
just like a normal function call.

In the absence of parentheses, the precedence of list operators such as
C<print>, C<sort>, or C<chmod> is either very high or very low depending on
whether you are looking at the left side or the right side of the operator.
For example, in

    @@ary = (1, 3, sort 4, 2);
    print @@ary;		# prints 1324

the commas on the right of the C<sort> are evaluated before the C<sort>,
but the commas on the left are evaluated after.  In other words,
list operators tend to gobble up all arguments that follow, and
then act like a simple TERM with regard to the preceding expression.
Be careful with parentheses:

    # These evaluate exit before doing the print:
    print($foo, exit);	# Obviously not what you want.
    print $foo, exit;	# Nor is this.

    # These do the print before evaluating exit:
    (print $foo), exit;	# This is what you want.
    print($foo), exit;	# Or this.
    print ($foo), exit;	# Or even this.

Also note that

    print ($foo & 255) + 1, "\n";

probably doesn't do what you expect at first glance.  The parentheses
enclose the argument list for C<print> which is evaluated (printing
the result of S<C<$foo & 255>>).  Then one is added to the return value
of C<print> (usually 1).  The result is something like this:

    1 + 1, "\n";    # Obviously not what you meant.

To do what you meant properly, you must write:

    print(($foo & 255) + 1, "\n");

See L<Named Unary Operators> for more discussion of this.

Also parsed as terms are the S<C<do {}>> and S<C<eval {}>> constructs, as
well as subroutine and method calls, and the anonymous
constructors C<[]> and C<{}>.

See also L<Quote and Quote-like Operators> toward the end of this section,
as well as L</"I/O Operators">.

=head2 The Arrow Operator
X<arrow> X<dereference> X<< -> >>

"C<< -> >>" is an infix dereference operator, just as it is in C
and C++.  If the right side is either a C<[...]>, C<{...}>, or a
C<(...)> subscript, then the left side must be either a hard or
symbolic reference to an array, a hash, or a subroutine respectively.
(Or technically speaking, a location capable of holding a hard
reference, if it's an array or hash reference being used for
assignment.)  See L<perlreftut> and L<perlref>.

Otherwise, the right side is a method name or a simple scalar
variable containing either the method name or a subroutine reference,
and the left side must be either an object (a blessed reference)
or a class name (that is, a package name).  See L<perlobj>.

The dereferencing cases (as opposed to method-calling cases) are
somewhat extended by the C<postderef> feature.  For the
details of that feature, consult L<perlref/Postfix Dereference Syntax>.

=head2 Auto-increment and Auto-decrement
X<increment> X<auto-increment> X<++> X<decrement> X<auto-decrement> X<-->

C<"++"> and C<"--"> work as in C.  That is, if placed before a variable,
they increment or decrement the variable by one before returning the
value, and if placed after, increment or decrement after returning the
value.

    $i = 0;  $j = 0;
    print $i++;  # prints 0
    print ++$j;  # prints 1

Note that just as in C, Perl doesn't define B<when> the variable is
incremented or decremented.  You just know it will be done sometime
before or after the value is returned.  This also means that modifying
a variable twice in the same statement will lead to undefined behavior.
Avoid statements like:

    $i = $i ++;
    print ++ $i + $i ++;

Perl will not guarantee what the result of the above statements is.

The auto-increment operator has a little extra builtin magic to it.  If
you increment a variable that is numeric, or that has ever been used in
a numeric context, you get a normal increment.  If, however, the
variable has been used in only string contexts since it was set, and
has a value that is not the empty string and matches the pattern
C</^[a-zA-Z]*[0-9]*\z/>, the increment is done as a string, preserving each
character within its range, with carry:

    print ++($foo = "99");	# prints "100"
    print ++($foo = "a0");	# prints "a1"
    print ++($foo = "Az");	# prints "Ba"
    print ++($foo = "zz");	# prints "aaa"

C<undef> is always treated as numeric, and in particular is changed
to C<0> before incrementing (so that a post-increment of an undef value
will return C<0> rather than C<undef>).

The auto-decrement operator is not magical.

=head2 Exponentiation
X<**> X<exponentiation> X<power>

Binary C<"**"> is the exponentiation operator.  It binds even more
tightly than unary minus, so C<-2**4> is C<-(2**4)>, not C<(-2)**4>.
(This is
implemented using C's C<pow(3)> function, which actually works on doubles
internally.)

Note that certain exponentiation expressions are ill-defined:
these include C<0**0>, C<1**Inf>, and C<Inf**0>.  Do not expect
any particular results from these special cases, the results
are platform-dependent.

=head2 Symbolic Unary Operators
X<unary operator> X<operator, unary>

Unary C<"!"> performs logical negation, that is, "not".  See also C<not> for a lower
precedence version of this.
X<!>

Unary C<"-"> performs arithmetic negation if the operand is numeric,
including any string that looks like a number.  If the operand is
an identifier, a string consisting of a minus sign concatenated
with the identifier is returned.  Otherwise, if the string starts
with a plus or minus, a string starting with the opposite sign is
returned.  One effect of these rules is that C<-bareword> is equivalent
to the string C<"-bareword">.  If, however, the string begins with a
non-alphabetic character (excluding C<"+"> or C<"-">), Perl will attempt
to convert
the string to a numeric, and the arithmetic negation is performed.  If the
string cannot be cleanly converted to a numeric, Perl will give the warning
B<Argument "the string" isn't numeric in negation (-) at ...>.
X<-> X<negation, arithmetic>

Unary C<"~"> performs bitwise negation, that is, 1's complement.  For
example, S<C<0666 & ~027>> is 0640.  (See also L<Integer Arithmetic> and
L<Bitwise String Operators>.)  Note that the width of the result is
platform-dependent: C<~0> is 32 bits wide on a 32-bit platform, but 64
bits wide on a 64-bit platform, so if you are expecting a certain bit
width, remember to use the C<"&"> operator to mask off the excess bits.
X<~> X<negation, binary>

When complementing strings, if all characters have ordinal values under
256, then their complements will, also.  But if they do not, all
characters will be in either 32- or 64-bit complements, depending on your
architecture.  So for example, C<~"\x{3B1}"> is C<"\x{FFFF_FC4E}"> on
32-bit machines and C<"\x{FFFF_FFFF_FFFF_FC4E}"> on 64-bit machines.

If the experimental "bitwise" feature is enabled via S<C<use feature
'bitwise'>>, then unary C<"~"> always treats its argument as a number, and an
alternate form of the operator, C<"~.">, always treats its argument as a
string.  So C<~0> and C<~"0"> will both give 2**32-1 on 32-bit platforms,
whereas C<~.0> and C<~."0"> will both yield C<"\xff">.  This feature
produces a warning unless you use S<C<no warnings 'experimental::bitwise'>>.

Unary C<"+"> has no effect whatsoever, even on strings.  It is useful
syntactically for separating a function name from a parenthesized expression
that would otherwise be interpreted as the complete list of function
arguments.  (See examples above under L</Terms and List Operators (Leftward)>.)
X<+>

Unary C<"\"> creates a reference to whatever follows it.  See L<perlreftut>
and L<perlref>.  Do not confuse this behavior with the behavior of
backslash within a string, although both forms do convey the notion
of protecting the next thing from interpolation.
X<\> X<reference> X<backslash>

=head2 Binding Operators
X<binding> X<operator, binding> X<=~> X<!~>

Binary C<"=~"> binds a scalar expression to a pattern match.  Certain operations
search or modify the string C<$_> by default.  This operator makes that kind
of operation work on some other string.  The right argument is a search
pattern, substitution, or transliteration.  The left argument is what is
supposed to be searched, substituted, or transliterated instead of the default
C<$_>.  When used in scalar context, the return value generally indicates the
success of the operation.  The exceptions are substitution (C<s///>)
and transliteration (C<y///>) with the C</r> (non-destructive) option,
which cause the B<r>eturn value to be the result of the substitution.
Behavior in list context depends on the particular operator.
See L</"Regexp Quote-Like Operators"> for details and L<perlretut> for
examples using these operators.

If the right argument is an expression rather than a search pattern,
substitution, or transliteration, it is interpreted as a search pattern at run
time.  Note that this means that its
contents will be interpolated twice, so

    '\\' =~ q'\\';

is not ok, as the regex engine will end up trying to compile the
pattern C<\>, which it will consider a syntax error.

Binary C<"!~"> is just like C<"=~"> except the return value is negated in
the logical sense.

Binary C<"!~"> with a non-destructive substitution (C<s///r>) or transliteration
(C<y///r>) is a syntax error.

=head2 Multiplicative Operators
X<operator, multiplicative>

Binary C<"*"> multiplies two numbers.
X<*>

Binary C<"/"> divides two numbers.
X</> X<slash>

Binary C<"%"> is the modulo operator, which computes the division
remainder of its first argument with respect to its second argument.
Given integer
operands C<$m> and C<$n>: If C<$n> is positive, then S<C<$m % $n>> is
C<$m> minus the largest multiple of C<$n> less than or equal to
C<$m>.  If C<$n> is negative, then S<C<$m % $n>> is C<$m> minus the
smallest multiple of C<$n> that is not less than C<$m> (that is, the
result will be less than or equal to zero).  If the operands
C<$m> and C<$n> are floating point values and the absolute value of
C<$n> (that is C<abs($n)>) is less than S<C<(UV_MAX + 1)>>, only
the integer portion of C<$m> and C<$n> will be used in the operation
(Note: here C<UV_MAX> means the maximum of the unsigned integer type).
If the absolute value of the right operand (C<abs($n)>) is greater than
or equal to S<C<(UV_MAX + 1)>>, C<"%"> computes the floating-point remainder
C<$r> in the equation S<C<($r = $m - $i*$n)>> where C<$i> is a certain
integer that makes C<$r> have the same sign as the right operand
C<$n> (B<not> as the left operand C<$m> like C function C<fmod()>)
and the absolute value less than that of C<$n>.
Note that when S<C<use integer>> is in scope, C<"%"> gives you direct access
to the modulo operator as implemented by your C compiler.  This
operator is not as well defined for negative operands, but it will
execute faster.
X<%> X<remainder> X<modulo> X<mod>

Binary C<"x"> is the repetition operator.  In scalar context or if the left
operand is not enclosed in parentheses, it returns a string consisting
of the left operand repeated the number of times specified by the right
operand.  In list context, if the left operand is enclosed in
parentheses or is a list formed by C<qw/I<STRING>/>, it repeats the list.
If the right operand is zero or negative (raising a warning on
negative), it returns an empty string
or an empty list, depending on the context.
X<x>

    print '-' x 80;		# print row of dashes

    print "\t" x ($tab/8), ' ' x ($tab%8);	# tab over

    @@ones = (1) x 80;		# a list of 80 1's
    @@ones = (5) x @@ones;	# set all elements to 5


=head2 Additive Operators
X<operator, additive>

Binary C<"+"> returns the sum of two numbers.
X<+>

Binary C<"-"> returns the difference of two numbers.
X<->

Binary C<"."> concatenates two strings.
X<string, concatenation> X<concatenation>
X<cat> X<concat> X<concatenate> X<.>

=head2 Shift Operators
X<shift operator> X<operator, shift> X<<< << >>>
X<<< >> >>> X<right shift> X<left shift> X<bitwise shift>
X<shl> X<shr> X<shift, right> X<shift, left>

Binary C<<< "<<" >>> returns the value of its left argument shifted left by the
number of bits specified by the right argument.  Arguments should be
integers.  (See also L<Integer Arithmetic>.)

Binary C<<< ">>" >>> returns the value of its left argument shifted right by
the number of bits specified by the right argument.  Arguments should
be integers.  (See also L<Integer Arithmetic>.)

If S<C<use integer>> (see L<Integer Arithmetic>) is in force then
signed C integers are used (I<arithmetic shift>), otherwise unsigned C
integers are used (I<logical shift>), even for negative shiftees.
In arithmetic right shift the sign bit is replicated on the left,
in logical shift zero bits come in from the left.

Either way, the implementation isn't going to generate results larger
than the size of the integer type Perl was built with (32 bits or 64 bits).

Shifting by negative number of bits means the reverse shift: left
shift becomes right shift, right shift becomes left shift.  This is
unlike in C, where negative shift is undefined.

Shifting by more bits than the size of the integers means most of the
time zero (all bits fall off), except that under S<C<use integer>>
right overshifting a negative shiftee results in -1.  This is unlike
in C, where shifting by too many bits is undefined.  A common C
behavior is "shift by modulo wordbits", so that for example

    1 >> 64 == 1 >> (64 % 64) == 1 >> 0 == 1  # Common C behavior.

but that is completely accidental.

If you get tired of being subject to your platform's native integers,
the S<C<use bigint>> pragma neatly sidesteps the issue altogether:

    print 20 << 20;  # 20971520
    print 20 << 40;  # 5120 on 32-bit machines, 
                     # 21990232555520 on 64-bit machines
    use bigint;
    print 20 << 100; # 25353012004564588029934064107520

=head2 Named Unary Operators
X<operator, named unary>

The various named unary operators are treated as functions with one
argument, with optional parentheses.

If any list operator (C<print()>, etc.) or any unary operator (C<chdir()>, etc.)
is followed by a left parenthesis as the next token, the operator and
arguments within parentheses are taken to be of highest precedence,
just like a normal function call.  For example,
because named unary operators are higher precedence than C<||>:

    chdir $foo    || die;	# (chdir $foo) || die
    chdir($foo)   || die;	# (chdir $foo) || die
    chdir ($foo)  || die;	# (chdir $foo) || die
    chdir +($foo) || die;	# (chdir $foo) || die

but, because C<"*"> is higher precedence than named operators:

    chdir $foo * 20;	# chdir ($foo * 20)
    chdir($foo) * 20;	# (chdir $foo) * 20
    chdir ($foo) * 20;	# (chdir $foo) * 20
    chdir +($foo) * 20;	# chdir ($foo * 20)

    rand 10 * 20;	# rand (10 * 20)
    rand(10) * 20;	# (rand 10) * 20
    rand (10) * 20;	# (rand 10) * 20
    rand +(10) * 20;	# rand (10 * 20)

Regarding precedence, the filetest operators, like C<-f>, C<-M>, etc. are
treated like named unary operators, but they don't follow this functional
parenthesis rule.  That means, for example, that C<-f($file).".bak"> is
equivalent to S<C<-f "$file.bak">>.
X<-X> X<filetest> X<operator, filetest>

See also L<"Terms and List Operators (Leftward)">.

=head2 Relational Operators
X<relational operator> X<operator, relational>

Perl operators that return true or false generally return values 
that can be safely used as numbers.  For example, the relational
operators in this section and the equality operators in the next
one return C<1> for true and a special version of the defined empty
string, C<"">, which counts as a zero but is exempt from warnings
about improper numeric conversions, just as S<C<"0 but true">> is.

Binary C<< "<" >> returns true if the left argument is numerically less than
the right argument.
X<< < >>

Binary C<< ">" >> returns true if the left argument is numerically greater
than the right argument.
X<< > >>

Binary C<< "<=" >> returns true if the left argument is numerically less than
or equal to the right argument.
X<< <= >>

Binary C<< ">=" >> returns true if the left argument is numerically greater
than or equal to the right argument.
X<< >= >>

Binary C<"lt"> returns true if the left argument is stringwise less than
the right argument.
X<< lt >>

Binary C<"gt"> returns true if the left argument is stringwise greater
than the right argument.
X<< gt >>

Binary C<"le"> returns true if the left argument is stringwise less than
or equal to the right argument.
X<< le >>

Binary C<"ge"> returns true if the left argument is stringwise greater
than or equal to the right argument.
X<< ge >>

=head2 Equality Operators
X<equality> X<equal> X<equals> X<operator, equality>

Binary C<< "==" >> returns true if the left argument is numerically equal to
the right argument.
X<==>

Binary C<< "!=" >> returns true if the left argument is numerically not equal
to the right argument.
X<!=>

Binary C<< "<=>" >> returns -1, 0, or 1 depending on whether the left
argument is numerically less than, equal to, or greater than the right
argument.  If your platform supports C<NaN>'s (not-a-numbers) as numeric
values, using them with C<< "<=>" >> returns undef.  C<NaN> is not
C<< "<" >>, C<< "==" >>, C<< ">" >>, C<< "<=" >> or C<< ">=" >> anything
(even C<NaN>), so those 5 return false.  S<C<< NaN != NaN >>> returns
true, as does S<C<NaN !=> I<anything else>>.  If your platform doesn't
support C<NaN>'s then C<NaN> is just a string with numeric value 0.
X<< <=> >>
X<spaceship>

    $ perl -le '$x = "NaN"; print "No NaN support here" if $x == $x'
    $ perl -le '$x = "NaN"; print "NaN support here" if $x != $x'

(Note that the L<bigint>, L<bigrat>, and L<bignum> pragmas all
support C<"NaN">.)

Binary C<"eq"> returns true if the left argument is stringwise equal to
the right argument.
X<eq>

Binary C<"ne"> returns true if the left argument is stringwise not equal
to the right argument.
X<ne>

Binary C<"cmp"> returns -1, 0, or 1 depending on whether the left
argument is stringwise less than, equal to, or greater than the right
argument.
X<cmp>

Binary C<"~~"> does a smartmatch between its arguments.  Smart matching
is described in the next section.
X<~~>

C<"lt">, C<"le">, C<"ge">, C<"gt"> and C<"cmp"> use the collation (sort)
order specified by the current C<LC_COLLATE> locale if a S<C<use
locale>> form that includes collation is in effect.  See L<perllocale>.
Do not mix these with Unicode,
only use them with legacy 8-bit locale encodings.
The standard C<L<Unicode::Collate>> and
C<L<Unicode::Collate::Locale>> modules offer much more powerful
solutions to collation issues.

For case-insensitive comparisions, look at the L<perlfunc/fc> case-folding
function, available in Perl v5.16 or later:

    if ( fc($x) eq fc($y) ) { ... }

=head2 Smartmatch Operator

First available in Perl 5.10.1 (the 5.10.0 version behaved differently),
binary C<~~> does a "smartmatch" between its arguments.  This is mostly
used implicitly in the C<when> construct described in L<perlsyn>, although
not all C<when> clauses call the smartmatch operator.  Unique among all of
Perl's operators, the smartmatch operator can recurse.  The smartmatch
operator is L<experimental|perlpolicy/experimental> and its behavior is
subject to change.

It is also unique in that all other Perl operators impose a context
(usually string or numeric context) on their operands, autoconverting
those operands to those imposed contexts.  In contrast, smartmatch
I<infers> contexts from the actual types of its operands and uses that
type information to select a suitable comparison mechanism.

The C<~~> operator compares its operands "polymorphically", determining how
to compare them according to their actual types (numeric, string, array,
hash, etc.)  Like the equality operators with which it shares the same
precedence, C<~~> returns 1 for true and C<""> for false.  It is often best
read aloud as "in", "inside of", or "is contained in", because the left
operand is often looked for I<inside> the right operand.  That makes the
order of the operands to the smartmatch operand often opposite that of
the regular match operator.  In other words, the "smaller" thing is usually
placed in the left operand and the larger one in the right.

The behavior of a smartmatch depends on what type of things its arguments
are, as determined by the following table.  The first row of the table
whose types apply determines the smartmatch behavior.  Because what
actually happens is mostly determined by the type of the second operand,
the table is sorted on the right operand instead of on the left.

 Left      Right      Description and pseudocode                               
 ===============================================================
 Any       undef      check whether Any is undefined                    
                like: !defined Any

 Any       Object     invoke ~~ overloading on Object, or die

 Right operand is an ARRAY:

 Left      Right      Description and pseudocode                               
 ===============================================================
 ARRAY1    ARRAY2     recurse on paired elements of ARRAY1 and ARRAY2[2]
                like: (ARRAY1[0] ~~ ARRAY2[0])
                        && (ARRAY1[1] ~~ ARRAY2[1]) && ...
 HASH      ARRAY      any ARRAY elements exist as HASH keys             
                like: grep { exists HASH->{$_} } ARRAY
 Regexp    ARRAY      any ARRAY elements pattern match Regexp
                like: grep { /Regexp/ } ARRAY
 undef     ARRAY      undef in ARRAY                                    
                like: grep { !defined } ARRAY
 Any       ARRAY      smartmatch each ARRAY element[3]                   
                like: grep { Any ~~ $_ } ARRAY

 Right operand is a HASH:

 Left      Right      Description and pseudocode                               
 ===============================================================
 HASH1     HASH2      all same keys in both HASHes                      
                like: keys HASH1 ==
                         grep { exists HASH2->{$_} } keys HASH1
 ARRAY     HASH       any ARRAY elements exist as HASH keys             
                like: grep { exists HASH->{$_} } ARRAY
 Regexp    HASH       any HASH keys pattern match Regexp                
                like: grep { /Regexp/ } keys HASH
 undef     HASH       always false (undef can't be a key)               
                like: 0 == 1
 Any       HASH       HASH key existence                                
                like: exists HASH->{Any}

 Right operand is CODE:

 Left      Right      Description and pseudocode                               
 ===============================================================
 ARRAY     CODE       sub returns true on all ARRAY elements[1]
                like: !grep { !CODE->($_) } ARRAY
 HASH      CODE       sub returns true on all HASH keys[1]
                like: !grep { !CODE->($_) } keys HASH
 Any       CODE       sub passed Any returns true              
                like: CODE->(Any)

Right operand is a Regexp:

 Left      Right      Description and pseudocode                               
 ===============================================================
 ARRAY     Regexp     any ARRAY elements match Regexp                   
                like: grep { /Regexp/ } ARRAY
 HASH      Regexp     any HASH keys match Regexp                        
                like: grep { /Regexp/ } keys HASH
 Any       Regexp     pattern match                                     
                like: Any =~ /Regexp/

 Other:

 Left      Right      Description and pseudocode                               
 ===============================================================
 Object    Any        invoke ~~ overloading on Object,
                      or fall back to...

 Any       Num        numeric equality                                  
                 like: Any == Num
 Num       nummy[4]    numeric equality
                 like: Num == nummy
 undef     Any        check whether undefined
                 like: !defined(Any)
 Any       Any        string equality                                   
                 like: Any eq Any


Notes:

=over

=item 1.
Empty hashes or arrays match. 

=item 2.
That is, each element smartmatches the element of the same index in the other array.[3]

=item 3.
If a circular reference is found, fall back to referential equality. 

=item 4.
Either an actual number, or a string that looks like one.

=back

The smartmatch implicitly dereferences any non-blessed hash or array
reference, so the C<I<HASH>> and C<I<ARRAY>> entries apply in those cases.
For blessed references, the C<I<Object>> entries apply.  Smartmatches
involving hashes only consider hash keys, never hash values.

The "like" code entry is not always an exact rendition.  For example, the
smartmatch operator short-circuits whenever possible, but C<grep> does
not.  Also, C<grep> in scalar context returns the number of matches, but
C<~~> returns only true or false.

Unlike most operators, the smartmatch operator knows to treat C<undef>
specially:

    use v5.10.1;
    @@array = (1, 2, 3, undef, 4, 5);
    say "some elements undefined" if undef ~~ @@array;

Each operand is considered in a modified scalar context, the modification
being that array and hash variables are passed by reference to the
operator, which implicitly dereferences them.  Both elements
of each pair are the same:

    use v5.10.1;

    my %hash = (red    => 1, blue   => 2, green  => 3,
                orange => 4, yellow => 5, purple => 6,
                black  => 7, grey   => 8, white  => 9);

    my @@array = qw(red blue green);

    say "some array elements in hash keys" if  @@array ~~  %hash;
    say "some array elements in hash keys" if \@@array ~~ \%hash;

    say "red in array" if "red" ~~  @@array;
    say "red in array" if "red" ~~ \@@array;

    say "some keys end in e" if /e$/ ~~  %hash;
    say "some keys end in e" if /e$/ ~~ \%hash;

Two arrays smartmatch if each element in the first array smartmatches
(that is, is "in") the corresponding element in the second array,
recursively.

    use v5.10.1;
    my @@little = qw(red blue green);
    my @@bigger = ("red", "blue", [ "orange", "green" ] );
    if (@@little ~~ @@bigger) {  # true!
        say "little is contained in bigger";
    } 

Because the smartmatch operator recurses on nested arrays, this
will still report that "red" is in the array.

    use v5.10.1;
    my @@array = qw(red blue green);
    my $nested_array = [[[[[[[ @@array ]]]]]]];
    say "red in array" if "red" ~~ $nested_array;

If two arrays smartmatch each other, then they are deep
copies of each others' values, as this example reports:

    use v5.12.0;
    my @@a = (0, 1, 2, [3, [4, 5], 6], 7); 
    my @@b = (0, 1, 2, [3, [4, 5], 6], 7); 

    if (@@a ~~ @@b && @@b ~~ @@a) {
        say "a and b are deep copies of each other";
    } 
    elsif (@@a ~~ @@b) {
        say "a smartmatches in b";
    } 
    elsif (@@b ~~ @@a) {
        say "b smartmatches in a";
    } 
    else {
        say "a and b don't smartmatch each other at all";
    } 


If you were to set S<C<$b[3] = 4>>, then instead of reporting that "a and b
are deep copies of each other", it now reports that C<"b smartmatches in a">.
That's because the corresponding position in C<@@a> contains an array that
(eventually) has a 4 in it.

Smartmatching one hash against another reports whether both contain the
same keys, no more and no less.  This could be used to see whether two
records have the same field names, without caring what values those fields
might have.  For example:

    use v5.10.1;
    sub make_dogtag {
        state $REQUIRED_FIELDS = { name=>1, rank=>1, serial_num=>1 };

        my ($class, $init_fields) = @@_;

        die "Must supply (only) name, rank, and serial number"
            unless $init_fields ~~ $REQUIRED_FIELDS;

        ...
    }

However, this only does what you mean if C<$init_fields> is indeed a hash
reference. The condition C<$init_fields ~~ $REQUIRED_FIELDS> also allows the
strings C<"name">, C<"rank">, C<"serial_num"> as well as any array reference
that contains C<"name"> or C<"rank"> or C<"serial_num"> anywhere to pass
through.

The smartmatch operator is most often used as the implicit operator of a
C<when> clause.  See the section on "Switch Statements" in L<perlsyn>.

=head3 Smartmatching of Objects

To avoid relying on an object's underlying representation, if the
smartmatch's right operand is an object that doesn't overload C<~~>,
it raises the exception "C<Smartmatching a non-overloaded object
breaks encapsulation>".  That's because one has no business digging
around to see whether something is "in" an object.  These are all
illegal on objects without a C<~~> overload:

    %hash ~~ $object
       42 ~~ $object
   "fred" ~~ $object

However, you can change the way an object is smartmatched by overloading
the C<~~> operator.  This is allowed to
extend the usual smartmatch semantics.
For objects that do have an C<~~> overload, see L<overload>.

Using an object as the left operand is allowed, although not very useful.
Smartmatching rules take precedence over overloading, so even if the
object in the left operand has smartmatch overloading, this will be
ignored.  A left operand that is a non-overloaded object falls back on a
string or numeric comparison of whatever the C<ref> operator returns.  That
means that

    $object ~~ X

does I<not> invoke the overload method with C<I<X>> as an argument.
Instead the above table is consulted as normal, and based on the type of
C<I<X>>, overloading may or may not be invoked.  For simple strings or
numbers, "in" becomes equivalent to this:

    $object ~~ $number          ref($object) == $number
    $object ~~ $string          ref($object) eq $string 

For example, this reports that the handle smells IOish
(but please don't really do this!):

    use IO::Handle;
    my $fh = IO::Handle->new();
    if ($fh ~~ /\bIO\b/) {
        say "handle smells IOish";
    } 

That's because it treats C<$fh> as a string like
C<"IO::Handle=GLOB(0x8039e0)">, then pattern matches against that.

=head2 Bitwise And
X<operator, bitwise, and> X<bitwise and> X<&>

Binary C<"&"> returns its operands ANDed together bit by bit.  Although no
warning is currently raised, the result is not well defined when this operation
is performed on operands that aren't either numbers (see
L<Integer Arithmetic>) nor bitstrings (see L<Bitwise String Operators>).

Note that C<"&"> has lower priority than relational operators, so for example
the parentheses are essential in a test like

    print "Even\n" if ($x & 1) == 0;

If the experimental "bitwise" feature is enabled via S<C<use feature
'bitwise'>>, then this operator always treats its operand as numbers.  This
feature produces a warning unless you also use C<S<no warnings
'experimental::bitwise'>>.

=head2 Bitwise Or and Exclusive Or
X<operator, bitwise, or> X<bitwise or> X<|> X<operator, bitwise, xor>
X<bitwise xor> X<^>

Binary C<"|"> returns its operands ORed together bit by bit.

Binary C<"^"> returns its operands XORed together bit by bit.

Although no warning is currently raised, the results are not well
defined when these operations are performed on operands that aren't either
numbers (see L<Integer Arithmetic>) nor bitstrings (see L<Bitwise String
Operators>).

Note that C<"|"> and C<"^"> have lower priority than relational operators, so
for example the parentheses are essential in a test like

    print "false\n" if (8 | 2) != 10;

If the experimental "bitwise" feature is enabled via S<C<use feature
'bitwise'>>, then this operator always treats its operand as numbers.  This
feature produces a warning unless you also use S<C<no warnings
'experimental::bitwise'>>.

=head2 C-style Logical And
X<&&> X<logical and> X<operator, logical, and>

Binary C<"&&"> performs a short-circuit logical AND operation.  That is,
if the left operand is false, the right operand is not even evaluated.
Scalar or list context propagates down to the right operand if it
is evaluated.

=head2 C-style Logical Or
X<||> X<operator, logical, or>

Binary C<"||"> performs a short-circuit logical OR operation.  That is,
if the left operand is true, the right operand is not even evaluated.
Scalar or list context propagates down to the right operand if it
is evaluated.

=head2 Logical Defined-Or
X<//> X<operator, logical, defined-or>

Although it has no direct equivalent in C, Perl's C<//> operator is related
to its C-style "or".  In fact, it's exactly the same as C<||>, except that it
tests the left hand side's definedness instead of its truth.  Thus,
S<C<< EXPR1 // EXPR2 >>> returns the value of C<< EXPR1 >> if it's defined,
otherwise, the value of C<< EXPR2 >> is returned.
(C<< EXPR1 >> is evaluated in scalar context, C<< EXPR2 >>
in the context of C<< // >> itself).  Usually,
this is the same result as S<C<< defined(EXPR1) ? EXPR1 : EXPR2 >>> (except that
the ternary-operator form can be used as a lvalue, while S<C<< EXPR1 // EXPR2 >>>
cannot).  This is very useful for
providing default values for variables.  If you actually want to test if
at least one of C<$x> and C<$y> is defined, use S<C<defined($x // $y)>>.

The C<||>, C<//> and C<&&> operators return the last value evaluated
(unlike C's C<||> and C<&&>, which return 0 or 1).  Thus, a reasonably
portable way to find out the home directory might be:

    $home =  $ENV{HOME}
	  // $ENV{LOGDIR}
	  // (getpwuid($<))[7]
	  // die "You're homeless!\n";

In particular, this means that you shouldn't use this
for selecting between two aggregates for assignment:

    @@a = @@b || @@c;            # This doesn't do the right thing
    @@a = scalar(@@b) || @@c;    # because it really means this.
    @@a = @@b ? @@b : @@c;        # This works fine, though.

As alternatives to C<&&> and C<||> when used for
control flow, Perl provides the C<and> and C<or> operators (see below).
The short-circuit behavior is identical.  The precedence of C<"and">
and C<"or"> is much lower, however, so that you can safely use them after a
list operator without the need for parentheses:

    unlink "alpha", "beta", "gamma"
	    or gripe(), next LINE;

With the C-style operators that would have been written like this:

    unlink("alpha", "beta", "gamma")
	    || (gripe(), next LINE);

It would be even more readable to write that this way:

    unless(unlink("alpha", "beta", "gamma")) {
        gripe();
        next LINE;
    } 

Using C<"or"> for assignment is unlikely to do what you want; see below.

=head2 Range Operators
X<operator, range> X<range> X<..> X<...>

Binary C<".."> is the range operator, which is really two different
operators depending on the context.  In list context, it returns a
list of values counting (up by ones) from the left value to the right
value.  If the left value is greater than the right value then it
returns the empty list.  The range operator is useful for writing
S<C<foreach (1..10)>> loops and for doing slice operations on arrays.  In
the current implementation, no temporary array is created when the
range operator is used as the expression in C<foreach> loops, but older
versions of Perl might burn a lot of memory when you write something
like this:

    for (1 .. 1_000_000) {
	# code
    }

The range operator also works on strings, using the magical
auto-increment, see below.

In scalar context, C<".."> returns a boolean value.  The operator is
bistable, like a flip-flop, and emulates the line-range (comma)
operator of B<sed>, B<awk>, and various editors.  Each C<".."> operator
maintains its own boolean state, even across calls to a subroutine
that contains it.  It is false as long as its left operand is false.
Once the left operand is true, the range operator stays true until the
right operand is true, I<AFTER> which the range operator becomes false
again.  It doesn't become false till the next time the range operator
is evaluated.  It can test the right operand and become false on the
same evaluation it became true (as in B<awk>), but it still returns
true once.  If you don't want it to test the right operand until the
next evaluation, as in B<sed>, just use three dots (C<"...">) instead of
two.  In all other regards, C<"..."> behaves just like C<".."> does.

The right operand is not evaluated while the operator is in the
"false" state, and the left operand is not evaluated while the
operator is in the "true" state.  The precedence is a little lower
than || and &&.  The value returned is either the empty string for
false, or a sequence number (beginning with 1) for true.  The sequence
number is reset for each range encountered.  The final sequence number
in a range has the string C<"E0"> appended to it, which doesn't affect
its numeric value, but gives you something to search for if you want
to exclude the endpoint.  You can exclude the beginning point by
waiting for the sequence number to be greater than 1.

If either operand of scalar C<".."> is a constant expression,
that operand is considered true if it is equal (C<==>) to the current
input line number (the C<$.> variable).

To be pedantic, the comparison is actually S<C<int(EXPR) == int(EXPR)>>,
but that is only an issue if you use a floating point expression; when
implicitly using C<$.> as described in the previous paragraph, the
comparison is S<C<int(EXPR) == int($.)>> which is only an issue when C<$.>
is set to a floating point value and you are not reading from a file.
Furthermore, S<C<"span" .. "spat">> or S<C<2.18 .. 3.14>> will not do what
you want in scalar context because each of the operands are evaluated
using their integer representation.

Examples:

As a scalar operator:

    if (101 .. 200) { print; } # print 2nd hundred lines, short for
                               #  if ($. == 101 .. $. == 200) { print; }

    next LINE if (1 .. /^$/);  # skip header lines, short for
                               #   next LINE if ($. == 1 .. /^$/);
                               # (typically in a loop labeled LINE)

    s/^/> / if (/^$/ .. eof());  # quote body

    # parse mail messages
    while (<>) {
        $in_header =   1  .. /^$/;
        $in_body   = /^$/ .. eof;
        if ($in_header) {
            # do something
        } else { # in body
            # do something else
        }
    } continue {
        close ARGV if eof;             # reset $. each file
    }

Here's a simple example to illustrate the difference between
the two range operators:

    @@lines = ("   - Foo",
              "01 - Bar",
              "1  - Baz",
              "   - Quux");

    foreach (@@lines) {
        if (/0/ .. /1/) {
            print "$_\n";
        }
    }

This program will print only the line containing "Bar".  If
the range operator is changed to C<...>, it will also print the
"Baz" line.

And now some examples as a list operator:

    for (101 .. 200) { print }      # print $_ 100 times
    @@foo = @@foo[0 .. $#foo];        # an expensive no-op
    @@foo = @@foo[$#foo-4 .. $#foo];  # slice last 5 items

The range operator (in list context) makes use of the magical
auto-increment algorithm if the operands are strings.  You
can say

    @@alphabet = ("A" .. "Z");

to get all normal letters of the English alphabet, or

    $hexdigit = (0 .. 9, "a" .. "f")[$num & 15];

to get a hexadecimal digit, or

    @@z2 = ("01" .. "31");
    print $z2[$mday];

to get dates with leading zeros.

If the final value specified is not in the sequence that the magical
increment would produce, the sequence goes until the next value would
be longer than the final value specified.

If the initial value specified isn't part of a magical increment
sequence (that is, a non-empty string matching C</^[a-zA-Z]*[0-9]*\z/>),
only the initial value will be returned.  So the following will only
return an alpha:

    use charnames "greek";
    my @@greek_small =  ("\N{alpha}" .. "\N{omega}");

To get the 25 traditional lowercase Greek letters, including both sigmas,
you could use this instead:

    use charnames "greek";
    my @@greek_small =  map { chr } ( ord("\N{alpha}") 
                                        ..
                                     ord("\N{omega}") 
                                   );

However, because there are I<many> other lowercase Greek characters than
just those, to match lowercase Greek characters in a regular expression,
you could use the pattern C</(?:(?=\p{Greek})\p{Lower})+/> (or the
L<experimental feature|perlrecharclass/Extended Bracketed Character
Classes> C<S</(?[ \p{Greek} & \p{Lower} ])+/>>).

Because each operand is evaluated in integer form, S<C<2.18 .. 3.14>> will
return two elements in list context.

    @@list = (2.18 .. 3.14); # same as @@list = (2 .. 3);

=head2 Conditional Operator
X<operator, conditional> X<operator, ternary> X<ternary> X<?:>

Ternary C<"?:"> is the conditional operator, just as in C.  It works much
like an if-then-else.  If the argument before the C<?> is true, the
argument before the C<:> is returned, otherwise the argument after the
C<:> is returned.  For example:

    printf "I have %d dog%s.\n", $n,
	    ($n == 1) ? "" : "s";

Scalar or list context propagates downward into the 2nd
or 3rd argument, whichever is selected.

    $x = $ok ? $y : $z;  # get a scalar
    @@x = $ok ? @@y : @@z;  # get an array
    $x = $ok ? @@y : @@z;  # oops, that's just a count!

The operator may be assigned to if both the 2nd and 3rd arguments are
legal lvalues (meaning that you can assign to them):

    ($x_or_y ? $x : $y) = $z;

Because this operator produces an assignable result, using assignments
without parentheses will get you in trouble.  For example, this:

    $x % 2 ? $x += 10 : $x += 2

Really means this:

    (($x % 2) ? ($x += 10) : $x) += 2

Rather than this:

    ($x % 2) ? ($x += 10) : ($x += 2)

That should probably be written more simply as:

    $x += ($x % 2) ? 10 : 2;

=head2 Assignment Operators
X<assignment> X<operator, assignment> X<=> X<**=> X<+=> X<*=> X<&=>
X<<< <<= >>> X<&&=> X<-=> X</=> X<|=> X<<< >>= >>> X<||=> X<//=> X<.=>
X<%=> X<^=> X<x=> X<&.=> X<|.=> X<^.=>

C<"="> is the ordinary assignment operator.

Assignment operators work as in C.  That is,

    $x += 2;

is equivalent to

    $x = $x + 2;

although without duplicating any side effects that dereferencing the lvalue
might trigger, such as from C<tie()>.  Other assignment operators work similarly.
The following are recognized:

    **=    +=    *=    &=    &.=    <<=    &&=
           -=    /=    |=    |.=    >>=    ||=
           .=    %=    ^=    ^.=           //=
                 x=

Although these are grouped by family, they all have the precedence
of assignment.  These combined assignment operators can only operate on
scalars, whereas the ordinary assignment operator can assign to arrays,
hashes, lists and even references.  (See L<"Context"|perldata/Context>
and L<perldata/List value constructors>, and L<perlref/Assigning to
References>.)

Unlike in C, the scalar assignment operator produces a valid lvalue.
Modifying an assignment is equivalent to doing the assignment and
then modifying the variable that was assigned to.  This is useful
for modifying a copy of something, like this:

    ($tmp = $global) =~ tr/13579/24680/;

Although as of 5.14, that can be also be accomplished this way:

    use v5.14;
    $tmp = ($global =~  tr/13579/24680/r);

Likewise,

    ($x += 2) *= 3;

is equivalent to

    $x += 2;
    $x *= 3;

Similarly, a list assignment in list context produces the list of
lvalues assigned to, and a list assignment in scalar context returns
the number of elements produced by the expression on the right hand
side of the assignment.

The three dotted bitwise assignment operators (C<&.=> C<|.=> C<^.=>) are new in
Perl 5.22 and experimental.  See L</Bitwise String Operators>.

=head2 Comma Operator
X<comma> X<operator, comma> X<,>

Binary C<","> is the comma operator.  In scalar context it evaluates
its left argument, throws that value away, then evaluates its right
argument and returns that value.  This is just like C's comma operator.

In list context, it's just the list argument separator, and inserts
both its arguments into the list.  These arguments are also evaluated
from left to right.

The C<< => >> operator (sometimes pronounced "fat comma") is a synonym
for the comma except that it causes a
word on its left to be interpreted as a string if it begins with a letter
or underscore and is composed only of letters, digits and underscores.
This includes operands that might otherwise be interpreted as operators,
constants, single number v-strings or function calls.  If in doubt about
this behavior, the left operand can be quoted explicitly.

Otherwise, the C<< => >> operator behaves exactly as the comma operator
or list argument separator, according to context.

For example:

    use constant FOO => "something";

    my %h = ( FOO => 23 );

is equivalent to:

    my %h = ("FOO", 23);

It is I<NOT>:

    my %h = ("something", 23);

The C<< => >> operator is helpful in documenting the correspondence
between keys and values in hashes, and other paired elements in lists.

    %hash = ( $key => $value );
    login( $username => $password );

The special quoting behavior ignores precedence, and hence may apply to
I<part> of the left operand:

    print time.shift => "bbb";

That example prints something like C<"1314363215shiftbbb">, because the
C<< => >> implicitly quotes the C<shift> immediately on its left, ignoring
the fact that C<time.shift> is the entire left operand.

=head2 List Operators (Rightward)
X<operator, list, rightward> X<list operator>

On the right side of a list operator, the comma has very low precedence,
such that it controls all comma-separated expressions found there.
The only operators with lower precedence are the logical operators
C<"and">, C<"or">, and C<"not">, which may be used to evaluate calls to list
operators without the need for parentheses:

    open HANDLE, "< :utf8", "filename" or die "Can't open: $!\n";

However, some people find that code harder to read than writing
it with parentheses:

    open(HANDLE, "< :utf8", "filename") or die "Can't open: $!\n";

in which case you might as well just use the more customary C<"||"> operator:

    open(HANDLE, "< :utf8", "filename") || die "Can't open: $!\n";

See also discussion of list operators in L</Terms and List Operators (Leftward)>.

=head2 Logical Not
X<operator, logical, not> X<not>

Unary C<"not"> returns the logical negation of the expression to its right.
It's the equivalent of C<"!"> except for the very low precedence.

=head2 Logical And
X<operator, logical, and> X<and>

Binary C<"and"> returns the logical conjunction of the two surrounding
expressions.  It's equivalent to C<&&> except for the very low
precedence.  This means that it short-circuits: the right
expression is evaluated only if the left expression is true.

=head2 Logical or and Exclusive Or
X<operator, logical, or> X<operator, logical, xor>
X<operator, logical, exclusive or>
X<or> X<xor>

Binary C<"or"> returns the logical disjunction of the two surrounding
expressions.  It's equivalent to C<||> except for the very low precedence.
This makes it useful for control flow:

    print FH $data		or die "Can't write to FH: $!";

This means that it short-circuits: the right expression is evaluated
only if the left expression is false.  Due to its precedence, you must
be careful to avoid using it as replacement for the C<||> operator.
It usually works out better for flow control than in assignments:

    $x = $y or $z;              # bug: this is wrong
    ($x = $y) or $z;            # really means this
    $x = $y || $z;              # better written this way

However, when it's a list-context assignment and you're trying to use
C<||> for control flow, you probably need C<"or"> so that the assignment
takes higher precedence.

    @@info = stat($file) || die;     # oops, scalar sense of stat!
    @@info = stat($file) or die;     # better, now @@info gets its due

Then again, you could always use parentheses.

Binary C<"xor"> returns the exclusive-OR of the two surrounding expressions.
It cannot short-circuit (of course).

There is no low precedence operator for defined-OR.

=head2 C Operators Missing From Perl
X<operator, missing from perl> X<&> X<*>
X<typecasting> X<(TYPE)>

Here is what C has that Perl doesn't:

=over 8

=item unary &

Address-of operator.  (But see the C<"\"> operator for taking a reference.)

=item unary *

Dereference-address operator.  (Perl's prefix dereferencing
operators are typed: C<$>, C<@@>, C<%>, and C<&>.)

=item (TYPE)

Type-casting operator.

=back

=head2 Quote and Quote-like Operators
X<operator, quote> X<operator, quote-like> X<q> X<qq> X<qx> X<qw> X<m>
X<qr> X<s> X<tr> X<'> X<''> X<"> X<""> X<//> X<`> X<``> X<<< << >>>
X<escape sequence> X<escape>

While we usually think of quotes as literal values, in Perl they
function as operators, providing various kinds of interpolating and
pattern matching capabilities.  Perl provides customary quote characters
for these behaviors, but also provides a way for you to choose your
quote character for any of them.  In the following table, a C<{}> represents
any pair of delimiters you choose.

    Customary  Generic        Meaning	     Interpolates
	''	 q{}	      Literal		  no
	""	qq{}	      Literal		  yes
	``	qx{}	      Command		  yes*
		qw{}	     Word list		  no
	//	 m{}	   Pattern match	  yes*
		qr{}	      Pattern		  yes*
		 s{}{}	    Substitution	  yes*
		tr{}{}	  Transliteration	  no (but see below)
		 y{}{}	  Transliteration	  no (but see below)
        <<EOF                 here-doc            yes*

	* unless the delimiter is ''.

Non-bracketing delimiters use the same character fore and aft, but the four
sorts of ASCII brackets (round, angle, square, curly) all nest, which means
that

    q{foo{bar}baz}

is the same as

    'foo{bar}baz'

Note, however, that this does not always work for quoting Perl code:

    $s = q{ if($x eq "}") ... }; # WRONG

is a syntax error.  The C<L<Text::Balanced>> module (standard as of v5.8,
and from CPAN before then) is able to do this properly.

There can be whitespace between the operator and the quoting
characters, except when C<#> is being used as the quoting character.
C<q#foo#> is parsed as the string C<foo>, while S<C<q #foo#>> is the
operator C<q> followed by a comment.  Its argument will be taken
from the next line.  This allows you to write:

    s {foo}  # Replace foo
      {bar}  # with bar.

The following escape sequences are available in constructs that interpolate,
and in transliterations:
X<\t> X<\n> X<\r> X<\f> X<\b> X<\a> X<\e> X<\x> X<\0> X<\c> X<\N> X<\N{}>
X<\o{}>

    Sequence     Note  Description
    \t                  tab               (HT, TAB)
    \n                  newline           (NL)
    \r                  return            (CR)
    \f                  form feed         (FF)
    \b                  backspace         (BS)
    \a                  alarm (bell)      (BEL)
    \e                  escape            (ESC)
    \x{263A}     [1,8]  hex char          (example: SMILEY)
    \x1b         [2,8]  restricted range hex char (example: ESC)
    \N{name}     [3]    named Unicode character or character sequence
    \N{U+263D}   [4,8]  Unicode character (example: FIRST QUARTER MOON)
    \c[          [5]    control char      (example: chr(27))
    \o{23072}    [6,8]  octal char        (example: SMILEY)
    \033         [7,8]  restricted range octal char  (example: ESC)

=over 4

=item [1]

The result is the character specified by the hexadecimal number between
the braces.  See L</[8]> below for details on which character.

Only hexadecimal digits are valid between the braces.  If an invalid
character is encountered, a warning will be issued and the invalid
character and all subsequent characters (valid or invalid) within the
braces will be discarded.

If there are no valid digits between the braces, the generated character is
the NULL character (C<\x{00}>).  However, an explicit empty brace (C<\x{}>)
will not cause a warning (currently).

=item [2]

The result is the character specified by the hexadecimal number in the range
0x00 to 0xFF.  See L</[8]> below for details on which character.

Only hexadecimal digits are valid following C<\x>.  When C<\x> is followed
by fewer than two valid digits, any valid digits will be zero-padded.  This
means that C<\x7> will be interpreted as C<\x07>, and a lone C<"\x"> will be
interpreted as C<\x00>.  Except at the end of a string, having fewer than
two valid digits will result in a warning.  Note that although the warning
says the illegal character is ignored, it is only ignored as part of the
escape and will still be used as the subsequent character in the string.
For example:

  Original    Result    Warns?
  "\x7"       "\x07"    no
  "\x"        "\x00"    no
  "\x7q"      "\x07q"   yes
  "\xq"       "\x00q"   yes

=item [3]

The result is the Unicode character or character sequence given by I<name>.
See L<charnames>.

=item [4]

S<C<\N{U+I<hexadecimal number>}>> means the Unicode character whose Unicode code
point is I<hexadecimal number>.

=item [5]

The character following C<\c> is mapped to some other character as shown in the
table:

 Sequence   Value
   \c@@      chr(0)
   \cA      chr(1)
   \ca      chr(1)
   \cB      chr(2)
   \cb      chr(2)
   ...
   \cZ      chr(26)
   \cz      chr(26)
   \c[      chr(27)
                     # See below for chr(28)
   \c]      chr(29)
   \c^      chr(30)
   \c_      chr(31)
   \c?      chr(127) # (on ASCII platforms; see below for link to
                     #  EBCDIC discussion)

In other words, it's the character whose code point has had 64 xor'd with
its uppercase.  C<\c?> is DELETE on ASCII platforms because
S<C<ord("?") ^ 64>> is 127, and
C<\c@@> is NULL because the ord of C<"@@"> is 64, so xor'ing 64 itself produces 0.

Also, C<\c\I<X>> yields S<C< chr(28) . "I<X>">> for any I<X>, but cannot come at the
end of a string, because the backslash would be parsed as escaping the end
quote.

On ASCII platforms, the resulting characters from the list above are the
complete set of ASCII controls.  This isn't the case on EBCDIC platforms; see
L<perlebcdic/OPERATOR DIFFERENCES> for a full discussion of the
differences between these for ASCII versus EBCDIC platforms.

Use of any other character following the C<"c"> besides those listed above is
discouraged, and as of Perl v5.20, the only characters actually allowed
are the printable ASCII ones, minus the left brace C<"{">.  What happens
for any of the allowed other characters is that the value is derived by
xor'ing with the seventh bit, which is 64, and a warning raised if
enabled.  Using the non-allowed characters generates a fatal error.

To get platform independent controls, you can use C<\N{...}>.

=item [6]

The result is the character specified by the octal number between the braces.
See L</[8]> below for details on which character.

If a character that isn't an octal digit is encountered, a warning is raised,
and the value is based on the octal digits before it, discarding it and all
following characters up to the closing brace.  It is a fatal error if there are
no octal digits at all.

=item [7]

The result is the character specified by the three-digit octal number in the
range 000 to 777 (but best to not use above 077, see next paragraph).  See
L</[8]> below for details on which character.

Some contexts allow 2 or even 1 digit, but any usage without exactly
three digits, the first being a zero, may give unintended results.  (For
example, in a regular expression it may be confused with a backreference;
see L<perlrebackslash/Octal escapes>.)  Starting in Perl 5.14, you may
use C<\o{}> instead, which avoids all these problems.  Otherwise, it is best to
use this construct only for ordinals C<\077> and below, remembering to pad to
the left with zeros to make three digits.  For larger ordinals, either use
C<\o{}>, or convert to something else, such as to hex and use C<\N{U+}>
(which is portable between platforms with different character sets) or
C<\x{}> instead.

=item [8]

Several constructs above specify a character by a number.  That number
gives the character's position in the character set encoding (indexed from 0).
This is called synonymously its ordinal, code position, or code point.  Perl
works on platforms that have a native encoding currently of either ASCII/Latin1
or EBCDIC, each of which allow specification of 256 characters.  In general, if
the number is 255 (0xFF, 0377) or below, Perl interprets this in the platform's
native encoding.  If the number is 256 (0x100, 0400) or above, Perl interprets
it as a Unicode code point and the result is the corresponding Unicode
character.  For example C<\x{50}> and C<\o{120}> both are the number 80 in
decimal, which is less than 256, so the number is interpreted in the native
character set encoding.  In ASCII the character in the 80th position (indexed
from 0) is the letter C<"P">, and in EBCDIC it is the ampersand symbol C<"&">.
C<\x{100}> and C<\o{400}> are both 256 in decimal, so the number is interpreted
as a Unicode code point no matter what the native encoding is.  The name of the
character in the 256th position (indexed by 0) in Unicode is
C<LATIN CAPITAL LETTER A WITH MACRON>.

There are a couple of exceptions to the above rule.  S<C<\N{U+I<hex number>}>> is
always interpreted as a Unicode code point, so that C<\N{U+0050}> is C<"P"> even
on EBCDIC platforms.  And if C<S<L<use encoding|encoding>>> is in effect, the
number is considered to be in that encoding, and is translated from that into
the platform's native encoding if there is a corresponding native character;
otherwise to Unicode.

=back

B<NOTE>: Unlike C and other languages, Perl has no C<\v> escape sequence for
the vertical tab (VT, which is 11 in both ASCII and EBCDIC), but you may
use C<\N{VT}>, C<\ck>, C<\N{U+0b}>, or C<\x0b>.  (C<\v>
does have meaning in regular expression patterns in Perl, see L<perlre>.)

The following escape sequences are available in constructs that interpolate,
but not in transliterations.
X<\l> X<\u> X<\L> X<\U> X<\E> X<\Q> X<\F>

    \l		lowercase next character only
    \u		titlecase (not uppercase!) next character only
    \L		lowercase all characters till \E or end of string
    \U		uppercase all characters till \E or end of string
    \F		foldcase all characters till \E or end of string
    \Q          quote (disable) pattern metacharacters till \E or
                end of string
    \E		end either case modification or quoted section
		(whichever was last seen)

See L<perlfunc/quotemeta> for the exact definition of characters that
are quoted by C<\Q>.

C<\L>, C<\U>, C<\F>, and C<\Q> can stack, in which case you need one
C<\E> for each.  For example:

 say"This \Qquoting \ubusiness \Uhere isn't quite\E done yet,\E is it?";
 This quoting\ Business\ HERE\ ISN\'T\ QUITE\ done\ yet\, is it?

If a S<C<use locale>> form that includes C<LC_CTYPE> is in effect (see
L<perllocale>), the case map used by C<\l>, C<\L>, C<\u>, and C<\U> is
taken from the current locale.  If Unicode (for example, C<\N{}> or code
points of 0x100 or beyond) is being used, the case map used by C<\l>,
C<\L>, C<\u>, and C<\U> is as defined by Unicode.  That means that
case-mapping a single character can sometimes produce a sequence of
several characters.
Under S<C<use locale>>, C<\F> produces the same results as C<\L>
for all locales but a UTF-8 one, where it instead uses the Unicode
definition.

All systems use the virtual C<"\n"> to represent a line terminator,
called a "newline".  There is no such thing as an unvarying, physical
newline character.  It is only an illusion that the operating system,
device drivers, C libraries, and Perl all conspire to preserve.  Not all
systems read C<"\r"> as ASCII CR and C<"\n"> as ASCII LF.  For example,
on the ancient Macs (pre-MacOS X) of yesteryear, these used to be reversed,
and on systems without a line terminator,
printing C<"\n"> might emit no actual data.  In general, use C<"\n"> when
you mean a "newline" for your system, but use the literal ASCII when you
need an exact character.  For example, most networking protocols expect
and prefer a CR+LF (C<"\015\012"> or C<"\cM\cJ">) for line terminators,
and although they often accept just C<"\012">, they seldom tolerate just
C<"\015">.  If you get in the habit of using C<"\n"> for networking,
you may be burned some day.
X<newline> X<line terminator> X<eol> X<end of line>
X<\r>

For constructs that do interpolate, variables beginning with "C<$>"
or "C<@@>" are interpolated.  Subscripted variables such as C<$a[3]> or
C<< $href->{key}[0] >> are also interpolated, as are array and hash slices.
But method calls such as C<< $obj->meth >> are not.

Interpolating an array or slice interpolates the elements in order,
separated by the value of C<$">, so is equivalent to interpolating
S<C<join $", @@array>>.  "Punctuation" arrays such as C<@@*> are usually
interpolated only if the name is enclosed in braces C<@@{*}>, but the
arrays C<@@_>, C<@@+>, and C<@@-> are interpolated even without braces.

For double-quoted strings, the quoting from C<\Q> is applied after
interpolation and escapes are processed.

    "abc\Qfoo\tbar$s\Exyz"

is equivalent to

    "abc" . quotemeta("foo\tbar$s") . "xyz"

For the pattern of regex operators (C<qr//>, C<m//> and C<s///>),
the quoting from C<\Q> is applied after interpolation is processed,
but before escapes are processed.  This allows the pattern to match
literally (except for C<$> and C<@@>).  For example, the following matches:

    '\s\t' =~ /\Q\s\t/

Because C<$> or C<@@> trigger interpolation, you'll need to use something
like C</\Quser\E\@@\Qhost/> to match them literally.

Patterns are subject to an additional level of interpretation as a
regular expression.  This is done as a second pass, after variables are
interpolated, so that regular expressions may be incorporated into the
pattern from the variables.  If this is not what you want, use C<\Q> to
interpolate a variable literally.

Apart from the behavior described above, Perl does not expand
multiple levels of interpolation.  In particular, contrary to the
expectations of shell programmers, back-quotes do I<NOT> interpolate
within double quotes, nor do single quotes impede evaluation of
variables when used within double quotes.

=head2 Regexp Quote-Like Operators
X<operator, regexp>

Here are the quote-like operators that apply to pattern
matching and related activities.

=over 8

=item C<qr/I<STRING>/msixpodualn>
X<qr> X</i> X</m> X</o> X</s> X</x> X</p>

This operator quotes (and possibly compiles) its I<STRING> as a regular
expression.  I<STRING> is interpolated the same way as I<PATTERN>
in C<m/I<PATTERN>/>.  If C<"'"> is used as the delimiter, no interpolation
is done.  Returns a Perl value which may be used instead of the
corresponding C</I<STRING>/msixpodualn> expression.  The returned value is a
normalized version of the original pattern.  It magically differs from
a string containing the same characters: C<ref(qr/x/)> returns "Regexp";
however, dereferencing it is not well defined (you currently get the 
normalized version of the original pattern, but this may change).


For example,

    $rex = qr/my.STRING/is;
    print $rex;                 # prints (?si-xm:my.STRING)
    s/$rex/foo/;

is equivalent to

    s/my.STRING/foo/is;

The result may be used as a subpattern in a match:

    $re = qr/$pattern/;
    $string =~ /foo${re}bar/;	# can be interpolated in other
                                # patterns
    $string =~ $re;		# or used standalone
    $string =~ /$re/;		# or this way

Since Perl may compile the pattern at the moment of execution of the C<qr()>
operator, using C<qr()> may have speed advantages in some situations,
notably if the result of C<qr()> is used standalone:

    sub match {
	my $patterns = shift;
	my @@compiled = map qr/$_/i, @@$patterns;
	grep {
	    my $success = 0;
	    foreach my $pat (@@compiled) {
		$success = 1, last if /$pat/;
	    }
	    $success;
	} @@_;
    }

Precompilation of the pattern into an internal representation at
the moment of C<qr()> avoids the need to recompile the pattern every
time a match C</$pat/> is attempted.  (Perl has many other internal
optimizations, but none would be triggered in the above example if
we did not use C<qr()> operator.)

Options (specified by the following modifiers) are:

    m	Treat string as multiple lines.
    s	Treat string as single line. (Make . match a newline)
    i	Do case-insensitive pattern matching.
    x	Use extended regular expressions.
    p	When matching preserve a copy of the matched string so
        that ${^PREMATCH}, ${^MATCH}, ${^POSTMATCH} will be
        defined (ignored starting in v5.20) as these are always
        defined starting in that relese
    o	Compile pattern only once.
    a   ASCII-restrict: Use ASCII for \d, \s, \w; specifying two
        a's further restricts things to that that no ASCII
        character will match a non-ASCII one under /i.
    l   Use the current run-time locale's rules.
    u   Use Unicode rules.
    d   Use Unicode or native charset, as in 5.12 and earlier.
    n   Non-capture mode. Don't let () fill in $1, $2, etc...

If a precompiled pattern is embedded in a larger pattern then the effect
of C<"msixpluadn"> will be propagated appropriately.  The effect that the
C</o> modifier has is not propagated, being restricted to those patterns
explicitly using it.

The last four modifiers listed above, added in Perl 5.14,
control the character set rules, but C</a> is the only one you are likely
to want to specify explicitly; the other three are selected
automatically by various pragmas.

See L<perlre> for additional information on valid syntax for I<STRING>, and
for a detailed look at the semantics of regular expressions.  In
particular, all modifiers except the largely obsolete C</o> are further
explained in L<perlre/Modifiers>.  C</o> is described in the next section.

=item C<m/I<PATTERN>/msixpodualngc>
X<m> X<operator, match>
X<regexp, options> X<regexp> X<regex, options> X<regex>
X</m> X</s> X</i> X</x> X</p> X</o> X</g> X</c>

=item C</I<PATTERN>/msixpodualngc>

Searches a string for a pattern match, and in scalar context returns
true if it succeeds, false if it fails.  If no string is specified
via the C<=~> or C<!~> operator, the C<$_> string is searched.  (The
string specified with C<=~> need not be an lvalue--it may be the
result of an expression evaluation, but remember the C<=~> binds
rather tightly.)  See also L<perlre>.

Options are as described in C<qr//> above; in addition, the following match
process modifiers are available:

 g  Match globally, i.e., find all occurrences.
 c  Do not reset search position on a failed match when /g is
    in effect.

If C<"/"> is the delimiter then the initial C<m> is optional.  With the C<m>
you can use any pair of non-whitespace (ASCII) characters
as delimiters.  This is particularly useful for matching path names
that contain C<"/">, to avoid LTS (leaning toothpick syndrome).  If C<"?"> is
the delimiter, then a match-only-once rule applies,
described in C<m?I<PATTERN>?> below.  If C<"'"> (single quote) is the delimiter,
no interpolation is performed on the I<PATTERN>.
When using a delimiter character valid in an identifier, whitespace is required
after the C<m>.

I<PATTERN> may contain variables, which will be interpolated
every time the pattern search is evaluated, except
for when the delimiter is a single quote.  (Note that C<$(>, C<$)>, and
C<$|> are not interpolated because they look like end-of-string tests.)
Perl will not recompile the pattern unless an interpolated
variable that it contains changes.  You can force Perl to skip the
test and never recompile by adding a C</o> (which stands for "once")
after the trailing delimiter.
Once upon a time, Perl would recompile regular expressions
unnecessarily, and this modifier was useful to tell it not to do so, in the
interests of speed.  But now, the only reasons to use C</o> are one of:

=over

=item 1

The variables are thousands of characters long and you know that they
don't change, and you need to wring out the last little bit of speed by
having Perl skip testing for that.  (There is a maintenance penalty for
doing this, as mentioning C</o> constitutes a promise that you won't
change the variables in the pattern.  If you do change them, Perl won't
even notice.)

=item 2

you want the pattern to use the initial values of the variables
regardless of whether they change or not.  (But there are saner ways
of accomplishing this than using C</o>.)

=item 3

If the pattern contains embedded code, such as

    use re 'eval';
    $code = 'foo(?{ $x })';
    /$code/

then perl will recompile each time, even though the pattern string hasn't
changed, to ensure that the current value of C<$x> is seen each time.
Use C</o> if you want to avoid this.

=back

The bottom line is that using C</o> is almost never a good idea.

=item The empty pattern C<//>

If the I<PATTERN> evaluates to the empty string, the last
I<successfully> matched regular expression is used instead.  In this
case, only the C<g> and C<c> flags on the empty pattern are honored;
the other flags are taken from the original pattern.  If no match has
previously succeeded, this will (silently) act instead as a genuine
empty pattern (which will always match).

Note that it's possible to confuse Perl into thinking C<//> (the empty
regex) is really C<//> (the defined-or operator).  Perl is usually pretty
good about this, but some pathological cases might trigger this, such as
C<$x///> (is that S<C<($x) / (//)>> or S<C<$x // />>?) and S<C<print $fh //>>
(S<C<print $fh(//>> or S<C<print($fh //>>?).  In all of these examples, Perl
will assume you meant defined-or.  If you meant the empty regex, just
use parentheses or spaces to disambiguate, or even prefix the empty
regex with an C<m> (so C<//> becomes C<m//>).

=item Matching in list context

If the C</g> option is not used, C<m//> in list context returns a
list consisting of the subexpressions matched by the parentheses in the
pattern, that is, (C<$1>, C<$2>, C<$3>...)  (Note that here C<$1> etc. are
also set).  When there are no parentheses in the pattern, the return
value is the list C<(1)> for success.  
With or without parentheses, an empty list is returned upon failure.

Examples:

 open(TTY, "+</dev/tty")
    || die "can't access /dev/tty: $!";

 <TTY> =~ /^y/i && foo();	# do foo if desired

 if (/Version: *([0-9.]*)/) { $version = $1; }

 next if m#^/usr/spool/uucp#;

 # poor man's grep
 $arg = shift;
 while (<>) {
    print if /$arg/o; # compile only once (no longer needed!)
 }

 if (($F1, $F2, $Etc) = ($foo =~ /^(\S+)\s+(\S+)\s*(.*)/))

This last example splits C<$foo> into the first two words and the
remainder of the line, and assigns those three fields to C<$F1>, C<$F2>, and
C<$Etc>.  The conditional is true if any variables were assigned; that is,
if the pattern matched.

The C</g> modifier specifies global pattern matching--that is,
matching as many times as possible within the string.  How it behaves
depends on the context.  In list context, it returns a list of the
substrings matched by any capturing parentheses in the regular
expression.  If there are no parentheses, it returns a list of all
the matched strings, as if there were parentheses around the whole
pattern.

In scalar context, each execution of C<m//g> finds the next match,
returning true if it matches, and false if there is no further match.
The position after the last match can be read or set using the C<pos()>
function; see L<perlfunc/pos>.  A failed match normally resets the
search position to the beginning of the string, but you can avoid that
by adding the C</c> modifier (for example, C<m//gc>).  Modifying the target
string also resets the search position.

=item C<\G I<assertion>>

You can intermix C<m//g> matches with C<m/\G.../g>, where C<\G> is a
zero-width assertion that matches the exact position where the
previous C<m//g>, if any, left off.  Without the C</g> modifier, the
C<\G> assertion still anchors at C<pos()> as it was at the start of
the operation (see L<perlfunc/pos>), but the match is of course only
attempted once.  Using C<\G> without C</g> on a target string that has
not previously had a C</g> match applied to it is the same as using
the C<\A> assertion to match the beginning of the string.  Note also
that, currently, C<\G> is only properly supported when anchored at the
very beginning of the pattern.

Examples:

    # list context
    ($one,$five,$fifteen) = (`uptime` =~ /(\d+\.\d+)/g);

    # scalar context
    local $/ = "";
    while ($paragraph = <>) {
	while ($paragraph =~ /\p{Ll}['")]*[.!?]+['")]*\s/g) {
	    $sentences++;
	}
    }
    say $sentences;

Here's another way to check for sentences in a paragraph:

 my $sentence_rx = qr{
    (?: (?<= ^ ) | (?<= \s ) )  # after start-of-string or
                                # whitespace
    \p{Lu}                      # capital letter
    .*?                         # a bunch of anything
    (?<= \S )                   # that ends in non-
                                # whitespace
    (?<! \b [DMS]r  )           # but isn't a common abbr.
    (?<! \b Mrs )
    (?<! \b Sra )
    (?<! \b St  )
    [.?!]                       # followed by a sentence
                                # ender
    (?= $ | \s )                # in front of end-of-string
                                # or whitespace
 }sx;
 local $/ = "";
 while (my $paragraph = <>) {
    say "NEW PARAGRAPH";
    my $count = 0;
    while ($paragraph =~ /($sentence_rx)/g) {
        printf "\tgot sentence %d: <%s>\n", ++$count, $1;
    }
 }

Here's how to use C<m//gc> with C<\G>:

    $_ = "ppooqppqq";
    while ($i++ < 2) {
        print "1: '";
        print $1 while /(o)/gc; print "', pos=", pos, "\n";
        print "2: '";
        print $1 if /\G(q)/gc;  print "', pos=", pos, "\n";
        print "3: '";
        print $1 while /(p)/gc; print "', pos=", pos, "\n";
    }
    print "Final: '$1', pos=",pos,"\n" if /\G(.)/;

The last example should print:

    1: 'oo', pos=4
    2: 'q', pos=5
    3: 'pp', pos=7
    1: '', pos=7
    2: 'q', pos=8
    3: '', pos=8
    Final: 'q', pos=8

Notice that the final match matched C<q> instead of C<p>, which a match
without the C<\G> anchor would have done.  Also note that the final match
did not update C<pos>.  C<pos> is only updated on a C</g> match.  If the
final match did indeed match C<p>, it's a good bet that you're running a
very old (pre-5.6.0) version of Perl.

A useful idiom for C<lex>-like scanners is C</\G.../gc>.  You can
combine several regexps like this to process a string part-by-part,
doing different actions depending on which regexp matched.  Each
regexp tries to match where the previous one leaves off.

 $_ = <<'EOL';
    $url = URI::URL->new( "http://example.com/" );
    die if $url eq "xXx";
 EOL

 LOOP: {
     print(" digits"),       redo LOOP if /\G\d+\b[,.;]?\s*/gc;
     print(" lowercase"),    redo LOOP
                                    if /\G\p{Ll}+\b[,.;]?\s*/gc;
     print(" UPPERCASE"),    redo LOOP
                                    if /\G\p{Lu}+\b[,.;]?\s*/gc;
     print(" Capitalized"),  redo LOOP
                              if /\G\p{Lu}\p{Ll}+\b[,.;]?\s*/gc;
     print(" MiXeD"),        redo LOOP if /\G\pL+\b[,.;]?\s*/gc;
     print(" alphanumeric"), redo LOOP
                            if /\G[\p{Alpha}\pN]+\b[,.;]?\s*/gc;
     print(" line-noise"),   redo LOOP if /\G\W+/gc;
     print ". That's all!\n";
 }

Here is the output (split into several lines):

 line-noise lowercase line-noise UPPERCASE line-noise UPPERCASE
 line-noise lowercase line-noise lowercase line-noise lowercase
 lowercase line-noise lowercase lowercase line-noise lowercase
 lowercase line-noise MiXeD line-noise. That's all!

=item C<m?I<PATTERN>?msixpodualngc>
X<?> X<operator, match-once>

=item C<?I<PATTERN>?msixpodualngc>

This is just like the C<m/I<PATTERN>/> search, except that it matches
only once between calls to the C<reset()> operator.  This is a useful
optimization when you want to see only the first occurrence of
something in each file of a set of files, for instance.  Only C<m??>
patterns local to the current package are reset.

    while (<>) {
	if (m?^$?) {
			    # blank line between header and body
	}
    } continue {
	reset if eof;	    # clear m?? status for next file
    }

Another example switched the first "latin1" encoding it finds
to "utf8" in a pod file:

    s//utf8/ if m? ^ =encoding \h+ \K latin1 ?x;

The match-once behavior is controlled by the match delimiter being
C<?>; with any other delimiter this is the normal C<m//> operator.

In the past, the leading C<m> in C<m?I<PATTERN>?> was optional, but omitting it
would produce a deprecation warning.  As of v5.22.0, omitting it produces a
syntax error.  If you encounter this construct in older code, you can just add
C<m>.

=item C<s/I<PATTERN>/I<REPLACEMENT>/msixpodualngcer>
X<substitute> X<substitution> X<replace> X<regexp, replace>
X<regexp, substitute> X</m> X</s> X</i> X</x> X</p> X</o> X</g> X</c> X</e> X</r>

Searches a string for a pattern, and if found, replaces that pattern
with the replacement text and returns the number of substitutions
made.  Otherwise it returns false (specifically, the empty string).

If the C</r> (non-destructive) option is used then it runs the
substitution on a copy of the string and instead of returning the
number of substitutions, it returns the copy whether or not a
substitution occurred.  The original string is never changed when
C</r> is used.  The copy will always be a plain string, even if the
input is an object or a tied variable.

If no string is specified via the C<=~> or C<!~> operator, the C<$_>
variable is searched and modified.  Unless the C</r> option is used,
the string specified must be a scalar variable, an array element, a
hash element, or an assignment to one of those; that is, some sort of
scalar lvalue.

If the delimiter chosen is a single quote, no interpolation is
done on either the I<PATTERN> or the I<REPLACEMENT>.  Otherwise, if the
I<PATTERN> contains a C<$> that looks like a variable rather than an
end-of-string test, the variable will be interpolated into the pattern
at run-time.  If you want the pattern compiled only once the first time
the variable is interpolated, use the C</o> option.  If the pattern
evaluates to the empty string, the last successfully executed regular
expression is used instead.  See L<perlre> for further explanation on these.

Options are as with C<m//> with the addition of the following replacement
specific options:

    e	Evaluate the right side as an expression.
    ee  Evaluate the right side as a string then eval the
        result.
    r   Return substitution and leave the original string
        untouched.

Any non-whitespace delimiter may replace the slashes.  Add space after
the C<s> when using a character allowed in identifiers.  If single quotes
are used, no interpretation is done on the replacement string (the C</e>
modifier overrides this, however).  Note that Perl treats backticks
as normal delimiters; the replacement text is not evaluated as a command.
If the I<PATTERN> is delimited by bracketing quotes, the I<REPLACEMENT> has
its own pair of quotes, which may or may not be bracketing quotes, for example,
C<s(foo)(bar)> or C<< s<foo>/bar/ >>.  A C</e> will cause the
replacement portion to be treated as a full-fledged Perl expression
and evaluated right then and there.  It is, however, syntax checked at
compile-time.  A second C<e> modifier will cause the replacement portion
to be C<eval>ed before being run as a Perl expression.

Examples:

    s/\bgreen\b/mauve/g;	      # don't change wintergreen

    $path =~ s|/usr/bin|/usr/local/bin|;

    s/Login: $foo/Login: $bar/; # run-time pattern

    ($foo = $bar) =~ s/this/that/;	# copy first, then
                                        # change
    ($foo = "$bar") =~ s/this/that/;	# convert to string,
                                        # copy, then change
    $foo = $bar =~ s/this/that/r;	# Same as above using /r
    $foo = $bar =~ s/this/that/r
                =~ s/that/the other/r;	# Chained substitutes
                                        # using /r
    @@foo = map { s/this/that/r } @@bar	# /r is very useful in
                                        # maps

    $count = ($paragraph =~ s/Mister\b/Mr./g);  # get change-cnt

    $_ = 'abc123xyz';
    s/\d+/$&*2/e;		# yields 'abc246xyz'
    s/\d+/sprintf("%5d",$&)/e;	# yields 'abc  246xyz'
    s/\w/$& x 2/eg;		# yields 'aabbcc  224466xxyyzz'

    s/%(.)/$percent{$1}/g;	# change percent escapes; no /e
    s/%(.)/$percent{$1} || $&/ge;	# expr now, so /e
    s/^=(\w+)/pod($1)/ge;	# use function call

    $_ = 'abc123xyz';
    $x = s/abc/def/r;           # $x is 'def123xyz' and
                                # $_ remains 'abc123xyz'.

    # expand variables in $_, but dynamics only, using
    # symbolic dereferencing
    s/\$(\w+)/${$1}/g;

    # Add one to the value of any numbers in the string
    s/(\d+)/1 + $1/eg;

    # Titlecase words in the last 30 characters only
    substr($str, -30) =~ s/\b(\p{Alpha}+)\b/\u\L$1/g;

    # This will expand any embedded scalar variable
    # (including lexicals) in $_ : First $1 is interpolated
    # to the variable name, and then evaluated
    s/(\$\w+)/$1/eeg;

    # Delete (most) C comments.
    $program =~ s {
	/\*	# Match the opening delimiter.
	.*?	# Match a minimal number of characters.
	\*/	# Match the closing delimiter.
    } []gsx;

    s/^\s*(.*?)\s*$/$1/;	# trim whitespace in $_,
                                # expensively

    for ($variable) {		# trim whitespace in $variable,
                                # cheap
	s/^\s+//;
	s/\s+$//;
    }

    s/([^ ]*) *([^ ]*)/$2 $1/;	# reverse 1st two fields

Note the use of C<$> instead of C<\> in the last example.  Unlike
B<sed>, we use the \<I<digit>> form only in the left hand side.
Anywhere else it's $<I<digit>>.

Occasionally, you can't use just a C</g> to get all the changes
to occur that you might want.  Here are two common cases:

    # put commas in the right places in an integer
    1 while s/(\d)(\d\d\d)(?!\d)/$1,$2/g;

    # expand tabs to 8-column spacing
    1 while s/\t+/' ' x (length($&)*8 - length($`)%8)/e;

=back

=head2 Quote-Like Operators
X<operator, quote-like>

=over 4

=item C<q/I<STRING>/>
X<q> X<quote, single> X<'> X<''>

=item C<'I<STRING>'>

A single-quoted, literal string.  A backslash represents a backslash
unless followed by the delimiter or another backslash, in which case
the delimiter or backslash is interpolated.

    $foo = q!I said, "You said, 'She said it.'"!;
    $bar = q('This is it.');
    $baz = '\n';		# a two-character string

=item C<qq/I<STRING>/>
X<qq> X<quote, double> X<"> X<"">

=item "I<STRING>"

A double-quoted, interpolated string.

    $_ .= qq
     (*** The previous line contains the naughty word "$1".\n)
		if /\b(tcl|java|python)\b/i;      # :-)
    $baz = "\n";		# a one-character string

=item C<qx/I<STRING>/>
X<qx> X<`> X<``> X<backtick>

=item C<`I<STRING>`>

A string which is (possibly) interpolated and then executed as a
system command with F</bin/sh> or its equivalent.  Shell wildcards,
pipes, and redirections will be honored.  The collected standard
output of the command is returned; standard error is unaffected.  In
scalar context, it comes back as a single (potentially multi-line)
string, or C<undef> if the command failed.  In list context, returns a
list of lines (however you've defined lines with C<$/> or
C<$INPUT_RECORD_SEPARATOR>), or an empty list if the command failed.

Because backticks do not affect standard error, use shell file descriptor
syntax (assuming the shell supports this) if you care to address this.
To capture a command's STDERR and STDOUT together:

    $output = `cmd 2>&1`;

To capture a command's STDOUT but discard its STDERR:

    $output = `cmd 2>/dev/null`;

To capture a command's STDERR but discard its STDOUT (ordering is
important here):

    $output = `cmd 2>&1 1>/dev/null`;

To exchange a command's STDOUT and STDERR in order to capture the STDERR
but leave its STDOUT to come out the old STDERR:

    $output = `cmd 3>&1 1>&2 2>&3 3>&-`;

To read both a command's STDOUT and its STDERR separately, it's easiest
to redirect them separately to files, and then read from those files
when the program is done:

    system("program args 1>program.stdout 2>program.stderr");

The STDIN filehandle used by the command is inherited from Perl's STDIN.
For example:

    open(SPLAT, "stuff")   || die "can't open stuff: $!";
    open(STDIN, "<&SPLAT") || die "can't dupe SPLAT: $!";
    print STDOUT `sort`;

will print the sorted contents of the file named F<"stuff">.

Using single-quote as a delimiter protects the command from Perl's
double-quote interpolation, passing it on to the shell instead:

    $perl_info  = qx(ps $$);            # that's Perl's $$
    $shell_info = qx'ps $$';            # that's the new shell's $$

How that string gets evaluated is entirely subject to the command
interpreter on your system.  On most platforms, you will have to protect
shell metacharacters if you want them treated literally.  This is in
practice difficult to do, as it's unclear how to escape which characters.
See L<perlsec> for a clean and safe example of a manual C<fork()> and C<exec()>
to emulate backticks safely.

On some platforms (notably DOS-like ones), the shell may not be
capable of dealing with multiline commands, so putting newlines in
the string may not get you what you want.  You may be able to evaluate
multiple commands in a single line by separating them with the command
separator character, if your shell supports that (for example, C<;> on 
many Unix shells and C<&> on the Windows NT C<cmd> shell).

Perl will attempt to flush all files opened for
output before starting the child process, but this may not be supported
on some platforms (see L<perlport>).  To be safe, you may need to set
C<$|> (C<$AUTOFLUSH> in C<L<English>>) or call the C<autoflush()> method of
C<L<IO::Handle>> on any open handles.

Beware that some command shells may place restrictions on the length
of the command line.  You must ensure your strings don't exceed this
limit after any necessary interpolations.  See the platform-specific
release notes for more details about your particular environment.

Using this operator can lead to programs that are difficult to port,
because the shell commands called vary between systems, and may in
fact not be present at all.  As one example, the C<type> command under
the POSIX shell is very different from the C<type> command under DOS.
That doesn't mean you should go out of your way to avoid backticks
when they're the right way to get something done.  Perl was made to be
a glue language, and one of the things it glues together is commands.
Just understand what you're getting yourself into.

Like C<system>, backticks put the child process exit code in C<$?>.
If you'd like to manually inspect failure, you can check all possible
failure modes by inspecting C<$?> like this:

    if ($? == -1) {
        print "failed to execute: $!\n";
    }
    elsif ($? & 127) {
        printf "child died with signal %d, %s coredump\n",
            ($? & 127),  ($? & 128) ? 'with' : 'without';
    }
    else {
        printf "child exited with value %d\n", $? >> 8;
    }

See L</"I/O Operators"> for more discussion.

=item C<qw/I<STRING>/>
X<qw> X<quote, list> X<quote, words>

Evaluates to a list of the words extracted out of I<STRING>, using embedded
whitespace as the word delimiters.  It can be understood as being roughly
equivalent to:

    split(" ", q/STRING/);

the differences being that it generates a real list at compile time, and
in scalar context it returns the last element in the list.  So
this expression:

    qw(foo bar baz)

is semantically equivalent to the list:

    "foo", "bar", "baz"

Some frequently seen examples:

    use POSIX qw( setlocale localeconv )
    @@EXPORT = qw( foo bar baz );

A common mistake is to try to separate the words with commas or to
put comments into a multi-line C<qw>-string.  For this reason, the
S<C<use warnings>> pragma and the B<-w> switch (that is, the C<$^W> variable)
produces warnings if the I<STRING> contains the C<","> or the C<"#"> character.

=item C<tr/I<SEARCHLIST>/I<REPLACEMENTLIST>/cdsr>
X<tr> X<y> X<transliterate> X</c> X</d> X</s>

=item C<y/I<SEARCHLIST>/I<REPLACEMENTLIST>/cdsr>

Transliterates all occurrences of the characters found in the search list
with the corresponding character in the replacement list.  It returns
the number of characters replaced or deleted.  If no string is
specified via the C<=~> or C<!~> operator, the C<$_> string is transliterated.

If the C</r> (non-destructive) option is present, a new copy of the string
is made and its characters transliterated, and this copy is returned no
matter whether it was modified or not: the original string is always
left unchanged.  The new copy is always a plain string, even if the input
string is an object or a tied variable.

Unless the C</r> option is used, the string specified with C<=~> must be a
scalar variable, an array element, a hash element, or an assignment to one
of those; in other words, an lvalue.

A character range may be specified with a hyphen, so C<tr/A-J/0-9/>
does the same replacement as C<tr/ACEGIBDFHJ/0246813579/>.
For B<sed> devotees, C<y> is provided as a synonym for C<tr>.  If the
I<SEARCHLIST> is delimited by bracketing quotes, the I<REPLACEMENTLIST> has
its own pair of quotes, which may or may not be bracketing quotes;
for example, C<tr[aeiouy][yuoiea]> or C<tr(+\-*/)/ABCD/>.

Characters may be literals or any of the escape sequences accepted in
double-quoted strings.  But there is no interpolation, so C<"$"> and
C<"@@"> are treated as literals.  A hyphen at the beginning or end, or
preceded by a backslash is considered a literal.  Escape sequence
details are in L<the table near the beginning of this section|/Quote and
Quote-like Operators>.

Note that C<tr> does B<not> do regular expression character classes such as
C<\d> or C<\pL>.  The C<tr> operator is not equivalent to the C<L<tr(1)>>
utility.  If you want to map strings between lower/upper cases, see
L<perlfunc/lc> and L<perlfunc/uc>, and in general consider using the C<s>
operator if you need regular expressions.  The C<\U>, C<\u>, C<\L>, and
C<\l> string-interpolation escapes on the right side of a substitution
operator will perform correct case-mappings, but C<tr[a-z][A-Z]> will not
(except sometimes on legacy 7-bit data).

Most ranges are unportable between character sets, but certain ones
signal Perl to do special handling to make them portable.  There are two
classes of portable ranges.  The first are any subsets of the ranges
C<A-Z>, C<a-z>, and C<0-9>, when expressed as literal characters.

  tr/h-k/H-K/

capitalizes the letters C<"h">, C<"i">, C<"j">, and C<"k"> and nothing
else, no matter what the platform's character set is.  In contrast, all
of

  tr/\x68-\x6B/\x48-\x4B/
  tr/h-\x6B/H-\x4B/
  tr/\x68-k/\x48-K/

do the same capitalizations as the previous example when run on ASCII
platforms, but something completely different on EBCDIC ones.

The second class of portable ranges is invoked when one or both of the
range's end points are expressed as C<\N{...}>

 $string =~ tr/\N{U+20}-\N{U+7E}//d;

removes from C<$string> all the platform's characters which are
equivalent to any of Unicode U+0020, U+0021, ... U+007D, U+007E.  This
is a portable range, and has the same effect on every platform it is
run on.  It turns out that in this example, these are the ASCII
printable characters.  So after this is run, C<$string> has only
controls and characters which have no ASCII equivalents.

But, even for portable ranges, it is not generally obvious what is
included without having to look things up.  A sound principle is to use
only ranges that begin from and end at either ASCII alphabetics of equal
case (C<b-e>, C<b-E>), or digits (C<1-4>).  Anything else is unclear
(and unportable unless C<\N{...}> is used).  If in doubt, spell out the
character sets in full.

Options:

    c	Complement the SEARCHLIST.
    d	Delete found but unreplaced characters.
    s	Squash duplicate replaced characters.
    r	Return the modified string and leave the original string
	untouched.

If the C</c> modifier is specified, the I<SEARCHLIST> character set
is complemented.  If the C</d> modifier is specified, any characters
specified by I<SEARCHLIST> not found in I<REPLACEMENTLIST> are deleted.
(Note that this is slightly more flexible than the behavior of some
B<tr> programs, which delete anything they find in the I<SEARCHLIST>,
period.)  If the C</s> modifier is specified, sequences of characters
that were transliterated to the same character are squashed down
to a single instance of the character.

If the C</d> modifier is used, the I<REPLACEMENTLIST> is always interpreted
exactly as specified.  Otherwise, if the I<REPLACEMENTLIST> is shorter
than the I<SEARCHLIST>, the final character is replicated till it is long
enough.  If the I<REPLACEMENTLIST> is empty, the I<SEARCHLIST> is replicated.
This latter is useful for counting characters in a class or for
squashing character sequences in a class.

Examples:

    $ARGV[1] =~ tr/A-Z/a-z/;	# canonicalize to lower case ASCII

    $cnt = tr/*/*/;		# count the stars in $_

    $cnt = $sky =~ tr/*/*/;	# count the stars in $sky

    $cnt = tr/0-9//;		# count the digits in $_

    tr/a-zA-Z//s;		# bookkeeper -> bokeper

    ($HOST = $host) =~ tr/a-z/A-Z/;
     $HOST = $host  =~ tr/a-z/A-Z/r;   # same thing

    $HOST = $host =~ tr/a-z/A-Z/r    # chained with s///r
                  =~ s/:/ -p/r;

    tr/a-zA-Z/ /cs;		# change non-alphas to single space

    @@stripped = map tr/a-zA-Z/ /csr, @@original;
				# /r with map

    tr [\200-\377]
       [\000-\177];		# wickedly delete 8th bit

If multiple transliterations are given for a character, only the
first one is used:

    tr/AAA/XYZ/

will transliterate any A to X.

Because the transliteration table is built at compile time, neither
the I<SEARCHLIST> nor the I<REPLACEMENTLIST> are subjected to double quote
interpolation.  That means that if you want to use variables, you
must use an C<eval()>:

    eval "tr/$oldlist/$newlist/";
    die $@@ if $@@;

    eval "tr/$oldlist/$newlist/, 1" or die $@@;

=item C<< <<I<EOF> >>
X<here-doc> X<heredoc> X<here-document> X<<< << >>>

A line-oriented form of quoting is based on the shell "here-document"
syntax.  Following a C<< << >> you specify a string to terminate
the quoted material, and all lines following the current line down to
the terminating string are the value of the item.

The terminating string may be either an identifier (a word), or some
quoted text.  An unquoted identifier works like double quotes.
There may not be a space between the C<< << >> and the identifier,
unless the identifier is explicitly quoted.  (If you put a space it
will be treated as a null identifier, which is valid, and matches the
first empty line.)  The terminating string must appear by itself
(unquoted and with no surrounding whitespace) on the terminating line.

If the terminating string is quoted, the type of quotes used determine
the treatment of the text.

=over 4

=item Double Quotes

Double quotes indicate that the text will be interpolated using exactly
the same rules as normal double quoted strings.

       print <<EOF;
    The price is $Price.
    EOF

       print << "EOF"; # same as above
    The price is $Price.
    EOF


=item Single Quotes

Single quotes indicate the text is to be treated literally with no
interpolation of its content.  This is similar to single quoted
strings except that backslashes have no special meaning, with C<\\>
being treated as two backslashes and not one as they would in every
other quoting construct.

Just as in the shell, a backslashed bareword following the C<<< << >>>
means the same thing as a single-quoted string does:

	$cost = <<'VISTA';  # hasta la ...
    That'll be $10 please, ma'am.
    VISTA

	$cost = <<\VISTA;   # Same thing!
    That'll be $10 please, ma'am.
    VISTA

This is the only form of quoting in perl where there is no need
to worry about escaping content, something that code generators
can and do make good use of.

=item Backticks

The content of the here doc is treated just as it would be if the
string were embedded in backticks.  Thus the content is interpolated
as though it were double quoted and then executed via the shell, with
the results of the execution returned.

       print << `EOC`; # execute command and get results
    echo hi there
    EOC

=back

It is possible to stack multiple here-docs in a row:

       print <<"foo", <<"bar"; # you can stack them
    I said foo.
    foo
    I said bar.
    bar

       myfunc(<< "THIS", 23, <<'THAT');
    Here's a line
    or two.
    THIS
    and here's another.
    THAT

Just don't forget that you have to put a semicolon on the end
to finish the statement, as Perl doesn't know you're not going to
try to do this:

       print <<ABC
    179231
    ABC
       + 20;

If you want to remove the line terminator from your here-docs,
use C<chomp()>.

    chomp($string = <<'END');
    This is a string.
    END

If you want your here-docs to be indented with the rest of the code,
you'll need to remove leading whitespace from each line manually:

    ($quote = <<'FINIS') =~ s/^\s+//gm;
       The Road goes ever on and on,
       down from the door where it began.
    FINIS

If you use a here-doc within a delimited construct, such as in C<s///eg>,
the quoted material must still come on the line following the
C<<< <<FOO >>> marker, which means it may be inside the delimited
construct:

    s/this/<<E . 'that'
    the other
    E
     . 'more '/eg;

It works this way as of Perl 5.18.  Historically, it was inconsistent, and
you would have to write

    s/this/<<E . 'that'
     . 'more '/eg;
    the other
    E

outside of string evals.

Additionally, quoting rules for the end-of-string identifier are
unrelated to Perl's quoting rules.  C<q()>, C<qq()>, and the like are not
supported in place of C<''> and C<"">, and the only interpolation is for
backslashing the quoting character:

    print << "abc\"def";
    testing...
    abc"def

Finally, quoted strings cannot span multiple lines.  The general rule is
that the identifier must be a string literal.  Stick with that, and you
should be safe.

=back

=head2 Gory details of parsing quoted constructs
X<quote, gory details>

When presented with something that might have several different
interpretations, Perl uses the B<DWIM> (that's "Do What I Mean")
principle to pick the most probable interpretation.  This strategy
is so successful that Perl programmers often do not suspect the
ambivalence of what they write.  But from time to time, Perl's
notions differ substantially from what the author honestly meant.

This section hopes to clarify how Perl handles quoted constructs.
Although the most common reason to learn this is to unravel labyrinthine
regular expressions, because the initial steps of parsing are the
same for all quoting operators, they are all discussed together.

The most important Perl parsing rule is the first one discussed
below: when processing a quoted construct, Perl first finds the end
of that construct, then interprets its contents.  If you understand
this rule, you may skip the rest of this section on the first
reading.  The other rules are likely to contradict the user's
expectations much less frequently than this first one.

Some passes discussed below are performed concurrently, but because
their results are the same, we consider them individually.  For different
quoting constructs, Perl performs different numbers of passes, from
one to four, but these passes are always performed in the same order.

=over 4

=item Finding the end

The first pass is finding the end of the quoted construct.  This results
in saving to a safe location a copy of the text (between the starting
and ending delimiters), normalized as necessary to avoid needing to know
what the original delimiters were.

If the construct is a here-doc, the ending delimiter is a line
that has a terminating string as the content.  Therefore C<<<EOF> is
terminated by C<EOF> immediately followed by C<"\n"> and starting
from the first column of the terminating line.
When searching for the terminating line of a here-doc, nothing
is skipped.  In other words, lines after the here-doc syntax
are compared with the terminating string line by line.

For the constructs except here-docs, single characters are used as starting
and ending delimiters.  If the starting delimiter is an opening punctuation
(that is C<(>, C<[>, C<{>, or C<< < >>), the ending delimiter is the
corresponding closing punctuation (that is C<)>, C<]>, C<}>, or C<< > >>).
If the starting delimiter is an unpaired character like C</> or a closing
punctuation, the ending delimiter is the same as the starting delimiter.
Therefore a C</> terminates a C<qq//> construct, while a C<]> terminates
both C<qq[]> and C<qq]]> constructs.

When searching for single-character delimiters, escaped delimiters
and C<\\> are skipped.  For example, while searching for terminating C</>,
combinations of C<\\> and C<\/> are skipped.  If the delimiters are
bracketing, nested pairs are also skipped.  For example, while searching
for a closing C<]> paired with the opening C<[>, combinations of C<\\>, C<\]>,
and C<\[> are all skipped, and nested C<[> and C<]> are skipped as well.
However, when backslashes are used as the delimiters (like C<qq\\> and
C<tr\\\>), nothing is skipped.
During the search for the end, backslashes that escape delimiters or
other backslashes are removed (exactly speaking, they are not copied to the
safe location).

For constructs with three-part delimiters (C<s///>, C<y///>, and
C<tr///>), the search is repeated once more.
If the first delimiter is not an opening punctuation, the three delimiters must
be the same, such as C<s!!!> and C<tr)))>,
in which case the second delimiter
terminates the left part and starts the right part at once.
If the left part is delimited by bracketing punctuation (that is C<()>,
C<[]>, C<{}>, or C<< <> >>), the right part needs another pair of
delimiters such as C<s(){}> and C<tr[]//>.  In these cases, whitespace
and comments are allowed between the two parts, although the comment must follow
at least one whitespace character; otherwise a character expected as the 
start of the comment may be regarded as the starting delimiter of the right part.

During this search no attention is paid to the semantics of the construct.
Thus:

    "$hash{"$foo/$bar"}"

or:

    m/
      bar	# NOT a comment, this slash / terminated m//!
     /x

do not form legal quoted expressions.   The quoted part ends on the
first C<"> and C</>, and the rest happens to be a syntax error.
Because the slash that terminated C<m//> was followed by a C<SPACE>,
the example above is not C<m//x>, but rather C<m//> with no C</x>
modifier.  So the embedded C<#> is interpreted as a literal C<#>.

Also no attention is paid to C<\c\> (multichar control char syntax) during
this search.  Thus the second C<\> in C<qq/\c\/> is interpreted as a part
of C<\/>, and the following C</> is not recognized as a delimiter.
Instead, use C<\034> or C<\x1c> at the end of quoted constructs.

=item Interpolation
X<interpolation>

The next step is interpolation in the text obtained, which is now
delimiter-independent.  There are multiple cases.

=over 4

=item C<<<'EOF'>

No interpolation is performed.
Note that the combination C<\\> is left intact, since escaped delimiters
are not available for here-docs.

=item  C<m''>, the pattern of C<s'''>

No interpolation is performed at this stage.
Any backslashed sequences including C<\\> are treated at the stage
to L</"parsing regular expressions">.

=item C<''>, C<q//>, C<tr'''>, C<y'''>, the replacement of C<s'''>

The only interpolation is removal of C<\> from pairs of C<\\>.
Therefore C<"-"> in C<tr'''> and C<y'''> is treated literally
as a hyphen and no character range is available.
C<\1> in the replacement of C<s'''> does not work as C<$1>.

=item C<tr///>, C<y///>

No variable interpolation occurs.  String modifying combinations for
case and quoting such as C<\Q>, C<\U>, and C<\E> are not recognized.
The other escape sequences such as C<\200> and C<\t> and backslashed
characters such as C<\\> and C<\-> are converted to appropriate literals.
The character C<"-"> is treated specially and therefore C<\-> is treated
as a literal C<"-">.

=item C<"">, C<``>, C<qq//>, C<qx//>, C<< <file*glob> >>, C<<<"EOF">

C<\Q>, C<\U>, C<\u>, C<\L>, C<\l>, C<\F> (possibly paired with C<\E>) are
converted to corresponding Perl constructs.  Thus, C<"$foo\Qbaz$bar">
is converted to S<C<$foo . (quotemeta("baz" . $bar))>> internally.
The other escape sequences such as C<\200> and C<\t> and backslashed
characters such as C<\\> and C<\-> are replaced with appropriate
expansions.

Let it be stressed that I<whatever falls between C<\Q> and C<\E>>
is interpolated in the usual way.  Something like C<"\Q\\E"> has
no C<\E> inside.  Instead, it has C<\Q>, C<\\>, and C<E>, so the
result is the same as for C<"\\\\E">.  As a general rule, backslashes
between C<\Q> and C<\E> may lead to counterintuitive results.  So,
C<"\Q\t\E"> is converted to C<quotemeta("\t")>, which is the same
as C<"\\\t"> (since TAB is not alphanumeric).  Note also that:

  $str = '\t';
  return "\Q$str";

may be closer to the conjectural I<intention> of the writer of C<"\Q\t\E">.

Interpolated scalars and arrays are converted internally to the C<join> and
C<"."> catenation operations.  Thus, S<C<"$foo XXX '@@arr'">> becomes:

  $foo . " XXX '" . (join $", @@arr) . "'";

All operations above are performed simultaneously, left to right.

Because the result of S<C<"\Q I<STRING> \E">> has all metacharacters
quoted, there is no way to insert a literal C<$> or C<@@> inside a
C<\Q\E> pair.  If protected by C<\>, C<$> will be quoted to become
C<"\\\$">; if not, it is interpreted as the start of an interpolated
scalar.

Note also that the interpolation code needs to make a decision on
where the interpolated scalar ends.  For instance, whether
S<C<< "a $x -> {c}" >>> really means:

  "a " . $x . " -> {c}";

or:

  "a " . $x -> {c};

Most of the time, the longest possible text that does not include
spaces between components and which contains matching braces or
brackets.  because the outcome may be determined by voting based
on heuristic estimators, the result is not strictly predictable.
Fortunately, it's usually correct for ambiguous cases.

=item the replacement of C<s///>

Processing of C<\Q>, C<\U>, C<\u>, C<\L>, C<\l>, C<\F> and interpolation
happens as with C<qq//> constructs.

It is at this step that C<\1> is begrudgingly converted to C<$1> in
the replacement text of C<s///>, in order to correct the incorrigible
I<sed> hackers who haven't picked up the saner idiom yet.  A warning
is emitted if the S<C<use warnings>> pragma or the B<-w> command-line flag
(that is, the C<$^W> variable) was set.

=item C<RE> in C<?RE?>, C</RE/>, C<m/RE/>, C<s/RE/foo/>,

Processing of C<\Q>, C<\U>, C<\u>, C<\L>, C<\l>, C<\F>, C<\E>,
and interpolation happens (almost) as with C<qq//> constructs.

Processing of C<\N{...}> is also done here, and compiled into an intermediate
form for the regex compiler.  (This is because, as mentioned below, the regex
compilation may be done at execution time, and C<\N{...}> is a compile-time
construct.)

However any other combinations of C<\> followed by a character
are not substituted but only skipped, in order to parse them
as regular expressions at the following step.
As C<\c> is skipped at this step, C<@@> of C<\c@@> in RE is possibly
treated as an array symbol (for example C<@@foo>),
even though the same text in C<qq//> gives interpolation of C<\c@@>.

Code blocks such as C<(?{BLOCK})> are handled by temporarily passing control
back to the perl parser, in a similar way that an interpolated array
subscript expression such as C<"foo$array[1+f("[xyz")]bar"> would be.

Moreover, inside C<(?{BLOCK})>, S<C<(?# comment )>>, and
a C<#>-comment in a C</x>-regular expression, no processing is
performed whatsoever.  This is the first step at which the presence
of the C</x> modifier is relevant.

Interpolation in patterns has several quirks: C<$|>, C<$(>, C<$)>, C<@@+>
and C<@@-> are not interpolated, and constructs C<$var[SOMETHING]> are
voted (by several different estimators) to be either an array element
or C<$var> followed by an RE alternative.  This is where the notation
C<${arr[$bar]}> comes handy: C</${arr[0-9]}/> is interpreted as
array element C<-9>, not as a regular expression from the variable
C<$arr> followed by a digit, which would be the interpretation of
C</$arr[0-9]/>.  Since voting among different estimators may occur,
the result is not predictable.

The lack of processing of C<\\> creates specific restrictions on
the post-processed text.  If the delimiter is C</>, one cannot get
the combination C<\/> into the result of this step.  C</> will
finish the regular expression, C<\/> will be stripped to C</> on
the previous step, and C<\\/> will be left as is.  Because C</> is
equivalent to C<\/> inside a regular expression, this does not
matter unless the delimiter happens to be character special to the
RE engine, such as in C<s*foo*bar*>, C<m[foo]>, or C<?foo?>; or an
alphanumeric char, as in:

  m m ^ a \s* b mmx;

In the RE above, which is intentionally obfuscated for illustration, the
delimiter is C<m>, the modifier is C<mx>, and after delimiter-removal the
RE is the same as for S<C<m/ ^ a \s* b /mx>>.  There's more than one
reason you're encouraged to restrict your delimiters to non-alphanumeric,
non-whitespace choices.

=back

This step is the last one for all constructs except regular expressions,
which are processed further.

=item parsing regular expressions
X<regexp, parse>

Previous steps were performed during the compilation of Perl code,
but this one happens at run time, although it may be optimized to
be calculated at compile time if appropriate.  After preprocessing
described above, and possibly after evaluation if concatenation,
joining, casing translation, or metaquoting are involved, the
resulting I<string> is passed to the RE engine for compilation.

Whatever happens in the RE engine might be better discussed in L<perlre>,
but for the sake of continuity, we shall do so here.

This is another step where the presence of the C</x> modifier is
relevant.  The RE engine scans the string from left to right and
converts it into a finite automaton.

Backslashed characters are either replaced with corresponding
literal strings (as with C<\{>), or else they generate special nodes
in the finite automaton (as with C<\b>).  Characters special to the
RE engine (such as C<|>) generate corresponding nodes or groups of
nodes.  C<(?#...)> comments are ignored.  All the rest is either
converted to literal strings to match, or else is ignored (as is
whitespace and C<#>-style comments if C</x> is present).

Parsing of the bracketed character class construct, C<[...]>, is
rather different than the rule used for the rest of the pattern.
The terminator of this construct is found using the same rules as
for finding the terminator of a C<{}>-delimited construct, the only
exception being that C<]> immediately following C<[> is treated as
though preceded by a backslash.

The terminator of runtime C<(?{...})> is found by temporarily switching
control to the perl parser, which should stop at the point where the
logically balancing terminating C<}> is found.

It is possible to inspect both the string given to RE engine and the
resulting finite automaton.  See the arguments C<debug>/C<debugcolor>
in the S<C<use L<re>>> pragma, as well as Perl's B<-Dr> command-line
switch documented in L<perlrun/"Command Switches">.

=item Optimization of regular expressions
X<regexp, optimization>

This step is listed for completeness only.  Since it does not change
semantics, details of this step are not documented and are subject
to change without notice.  This step is performed over the finite
automaton that was generated during the previous pass.

It is at this stage that C<split()> silently optimizes C</^/> to
mean C</^/m>.

=back

=head2 I/O Operators
X<operator, i/o> X<operator, io> X<io> X<while> X<filehandle>
X<< <> >> X<< <<>> >> X<@@ARGV>

There are several I/O operators you should know about.

A string enclosed by backticks (grave accents) first undergoes
double-quote interpolation.  It is then interpreted as an external
command, and the output of that command is the value of the
backtick string, like in a shell.  In scalar context, a single string
consisting of all output is returned.  In list context, a list of
values is returned, one per line of output.  (You can set C<$/> to use
a different line terminator.)  The command is executed each time the
pseudo-literal is evaluated.  The status value of the command is
returned in C<$?> (see L<perlvar> for the interpretation of C<$?>).
Unlike in B<csh>, no translation is done on the return data--newlines
remain newlines.  Unlike in any of the shells, single quotes do not
hide variable names in the command from interpretation.  To pass a
literal dollar-sign through to the shell you need to hide it with a
backslash.  The generalized form of backticks is C<qx//>.  (Because
backticks always undergo shell expansion as well, see L<perlsec> for
security concerns.)
X<qx> X<`> X<``> X<backtick> X<glob>

In scalar context, evaluating a filehandle in angle brackets yields
the next line from that file (the newline, if any, included), or
C<undef> at end-of-file or on error.  When C<$/> is set to C<undef>
(sometimes known as file-slurp mode) and the file is empty, it
returns C<''> the first time, followed by C<undef> subsequently.

Ordinarily you must assign the returned value to a variable, but
there is one situation where an automatic assignment happens.  If
and only if the input symbol is the only thing inside the conditional
of a C<while> statement (even if disguised as a C<for(;;)> loop),
the value is automatically assigned to the global variable C<$_>,
destroying whatever was there previously.  (This may seem like an
odd thing to you, but you'll use the construct in almost every Perl
script you write.)  The C<$_> variable is not implicitly localized.
You'll have to put a S<C<local $_;>> before the loop if you want that
to happen.

The following lines are equivalent:

    while (defined($_ = <STDIN>)) { print; }
    while ($_ = <STDIN>) { print; }
    while (<STDIN>) { print; }
    for (;<STDIN>;) { print; }
    print while defined($_ = <STDIN>);
    print while ($_ = <STDIN>);
    print while <STDIN>;

This also behaves similarly, but assigns to a lexical variable 
instead of to C<$_>:

    while (my $line = <STDIN>) { print $line }

In these loop constructs, the assigned value (whether assignment
is automatic or explicit) is then tested to see whether it is
defined.  The defined test avoids problems where the line has a string
value that would be treated as false by Perl; for example a "" or
a C<"0"> with no trailing newline.  If you really mean for such values
to terminate the loop, they should be tested for explicitly:

    while (($_ = <STDIN>) ne '0') { ... }
    while (<STDIN>) { last unless $_; ... }

In other boolean contexts, C<< <I<FILEHANDLE>> >> without an
explicit C<defined> test or comparison elicits a warning if the
S<C<use warnings>> pragma or the B<-w>
command-line switch (the C<$^W> variable) is in effect.

The filehandles STDIN, STDOUT, and STDERR are predefined.  (The
filehandles C<stdin>, C<stdout>, and C<stderr> will also work except
in packages, where they would be interpreted as local identifiers
rather than global.)  Additional filehandles may be created with
the C<open()> function, amongst others.  See L<perlopentut> and
L<perlfunc/open> for details on this.
X<stdin> X<stdout> X<sterr>

If a C<< <I<FILEHANDLE>> >> is used in a context that is looking for
a list, a list comprising all input lines is returned, one line per
list element.  It's easy to grow to a rather large data space this
way, so use with care.

C<< <I<FILEHANDLE>> >>  may also be spelled C<readline(*I<FILEHANDLE>)>.
See L<perlfunc/readline>.

The null filehandle C<< <> >> is special: it can be used to emulate the
behavior of B<sed> and B<awk>, and any other Unix filter program
that takes a list of filenames, doing the same to each line
of input from all of them.  Input from C<< <> >> comes either from
standard input, or from each file listed on the command line.  Here's
how it works: the first time C<< <> >> is evaluated, the C<@@ARGV> array is
checked, and if it is empty, C<$ARGV[0]> is set to C<"-">, which when opened
gives you standard input.  The C<@@ARGV> array is then processed as a list
of filenames.  The loop

    while (<>) {
	...			# code for each line
    }

is equivalent to the following Perl-like pseudo code:

    unshift(@@ARGV, '-') unless @@ARGV;
    while ($ARGV = shift) {
	open(ARGV, $ARGV);
	while (<ARGV>) {
	    ...		# code for each line
	}
    }

except that it isn't so cumbersome to say, and will actually work.
It really does shift the C<@@ARGV> array and put the current filename
into the C<$ARGV> variable.  It also uses filehandle I<ARGV>
internally.  C<< <> >> is just a synonym for C<< <ARGV> >>, which
is magical.  (The pseudo code above doesn't work because it treats
C<< <ARGV> >> as non-magical.)

Since the null filehandle uses the two argument form of L<perlfunc/open>
it interprets special characters, so if you have a script like this:

    while (<>) {
        print;
    }

and call it with S<C<perl dangerous.pl 'rm -rfv *|'>>, it actually opens a
pipe, executes the C<rm> command and reads C<rm>'s output from that pipe.
If you want all items in C<@@ARGV> to be interpreted as file names, you
can use the module C<ARGV::readonly> from CPAN, or use the double bracket:

    while (<<>>) {
        print;
    }

Using double angle brackets inside of a while causes the open to use the
three argument form (with the second argument being C<< < >>), so all
arguments in C<ARGV> are treated as literal filenames (including C<"-">).
(Note that for convenience, if you use C<< <<>> >> and if C<@@ARGV> is
empty, it will still read from the standard input.)

You can modify C<@@ARGV> before the first C<< <> >> as long as the array ends up
containing the list of filenames you really want.  Line numbers (C<$.>)
continue as though the input were one big happy file.  See the example
in L<perlfunc/eof> for how to reset line numbers on each file.

If you want to set C<@@ARGV> to your own list of files, go right ahead.
This sets C<@@ARGV> to all plain text files if no C<@@ARGV> was given:

    @@ARGV = grep { -f && -T } glob('*') unless @@ARGV;

You can even set them to pipe commands.  For example, this automatically
filters compressed arguments through B<gzip>:

    @@ARGV = map { /\.(gz|Z)$/ ? "gzip -dc < $_ |" : $_ } @@ARGV;

If you want to pass switches into your script, you can use one of the
C<Getopts> modules or put a loop on the front like this:

    while ($_ = $ARGV[0], /^-/) {
	shift;
        last if /^--$/;
	if (/^-D(.*)/) { $debug = $1 }
	if (/^-v/)     { $verbose++  }
	# ...		# other switches
    }

    while (<>) {
	# ...		# code for each line
    }

The C<< <> >> symbol will return C<undef> for end-of-file only once.
If you call it again after this, it will assume you are processing another
C<@@ARGV> list, and if you haven't set C<@@ARGV>, will read input from STDIN.

If what the angle brackets contain is a simple scalar variable (for example,
C<$foo>), then that variable contains the name of the
filehandle to input from, or its typeglob, or a reference to the
same.  For example:

    $fh = \*STDIN;
    $line = <$fh>;

If what's within the angle brackets is neither a filehandle nor a simple
scalar variable containing a filehandle name, typeglob, or typeglob
reference, it is interpreted as a filename pattern to be globbed, and
either a list of filenames or the next filename in the list is returned,
depending on context.  This distinction is determined on syntactic
grounds alone.  That means C<< <$x> >> is always a C<readline()> from
an indirect handle, but C<< <$hash{key}> >> is always a C<glob()>.
That's because C<$x> is a simple scalar variable, but C<$hash{key}> is
not--it's a hash element.  Even C<< <$x > >> (note the extra space)
is treated as C<glob("$x ")>, not C<readline($x)>.

One level of double-quote interpretation is done first, but you can't
say C<< <$foo> >> because that's an indirect filehandle as explained
in the previous paragraph.  (In older versions of Perl, programmers
would insert curly brackets to force interpretation as a filename glob:
C<< <${foo}> >>.  These days, it's considered cleaner to call the
internal function directly as C<glob($foo)>, which is probably the right
way to have done it in the first place.)  For example:

    while (<*.c>) {
	chmod 0644, $_;
    }

is roughly equivalent to:

    open(FOO, "echo *.c | tr -s ' \t\r\f' '\\012\\012\\012\\012'|");
    while (<FOO>) {
	chomp;
	chmod 0644, $_;
    }

except that the globbing is actually done internally using the standard
C<L<File::Glob>> extension.  Of course, the shortest way to do the above is:

    chmod 0644, <*.c>;

A (file)glob evaluates its (embedded) argument only when it is
starting a new list.  All values must be read before it will start
over.  In list context, this isn't important because you automatically
get them all anyway.  However, in scalar context the operator returns
the next value each time it's called, or C<undef> when the list has
run out.  As with filehandle reads, an automatic C<defined> is
generated when the glob occurs in the test part of a C<while>,
because legal glob returns (for example,
a file called F<0>) would otherwise
terminate the loop.  Again, C<undef> is returned only once.  So if
you're expecting a single value from a glob, it is much better to
say

    ($file) = <blurch*>;

than

    $file = <blurch*>;

because the latter will alternate between returning a filename and
returning false.

If you're trying to do variable interpolation, it's definitely better
to use the C<glob()> function, because the older notation can cause people
to become confused with the indirect filehandle notation.

    @@files = glob("$dir/*.[ch]");
    @@files = glob($files[$i]);

=head2 Constant Folding
X<constant folding> X<folding>

Like C, Perl does a certain amount of expression evaluation at
compile time whenever it determines that all arguments to an
operator are static and have no side effects.  In particular, string
concatenation happens at compile time between literals that don't do
variable substitution.  Backslash interpolation also happens at
compile time.  You can say

      'Now is the time for all'
    . "\n" 
    .  'good men to come to.'

and this all reduces to one string internally.  Likewise, if
you say

    foreach $file (@@filenames) {
	if (-s $file > 5 + 100 * 2**16) {  }
    }

the compiler precomputes the number which that expression
represents so that the interpreter won't have to.

=head2 No-ops
X<no-op> X<nop>

Perl doesn't officially have a no-op operator, but the bare constants
C<0> and C<1> are special-cased not to produce a warning in void
context, so you can for example safely do

    1 while foo();

=head2 Bitwise String Operators
X<operator, bitwise, string> X<&.> X<|.> X<^.> X<~.>

Bitstrings of any size may be manipulated by the bitwise operators
(C<~ | & ^>).

If the operands to a binary bitwise op are strings of different
sizes, B<|> and B<^> ops act as though the shorter operand had
additional zero bits on the right, while the B<&> op acts as though
the longer operand were truncated to the length of the shorter.
The granularity for such extension or truncation is one or more
bytes.

    # ASCII-based examples
    print "j p \n" ^ " a h";        	# prints "JAPH\n"
    print "JA" | "  ph\n";          	# prints "japh\n"
    print "japh\nJunk" & '_____';   	# prints "JAPH\n";
    print 'p N$' ^ " E<H\n";		# prints "Perl\n";

If you are intending to manipulate bitstrings, be certain that
you're supplying bitstrings: If an operand is a number, that will imply
a B<numeric> bitwise operation.  You may explicitly show which type of
operation you intend by using C<""> or C<0+>, as in the examples below.

    $foo =  150  |  105;	# yields 255  (0x96 | 0x69 is 0xFF)
    $foo = '150' |  105;	# yields 255
    $foo =  150  | '105';	# yields 255
    $foo = '150' | '105';	# yields string '155' (under ASCII)

    $baz = 0+$foo & 0+$bar;	# both ops explicitly numeric
    $biz = "$foo" ^ "$bar";	# both ops explicitly stringy

This somewhat unpredictable behavior can be avoided with the experimental
"bitwise" feature, new in Perl 5.22.  You can enable it via S<C<use feature
'bitwise'>>.  By default, it will warn unless the C<"experimental::bitwise">
warnings category has been disabled.  (S<C<use experimental 'bitwise'>> will
enable the feature and disable the warning.)  Under this feature, the four
standard bitwise operators (C<~ | & ^>) are always numeric.  Adding a dot
after each operator (C<~. |. &. ^.>) forces it to treat its operands as
strings:

    use experimental "bitwise";
    $foo =  150  |  105;	# yields 255  (0x96 | 0x69 is 0xFF)
    $foo = '150' |  105;	# yields 255
    $foo =  150  | '105';	# yields 255
    $foo = '150' | '105';	# yields 255
    $foo =  150  |. 105;	# yields string '155'
    $foo = '150' |. 105;	# yields string '155'
    $foo =  150  |.'105';	# yields string '155'
    $foo = '150' |.'105';	# yields string '155'

    $baz = $foo &  $bar;	# both operands numeric
    $biz = $foo ^. $bar;	# both operands stringy

The assignment variants of these operators (C<&= |= ^= &.= |.= ^.=>)
behave likewise under the feature.

The behavior of these operators is problematic (and subject to change)
if either or both of the strings are encoded in UTF-8 (see
L<perlunicode/Byte and Character Semantics>.

See L<perlfunc/vec> for information on how to manipulate individual bits
in a bit vector.

=head2 Integer Arithmetic
X<integer>

By default, Perl assumes that it must do most of its arithmetic in
floating point.  But by saying

    use integer;

you may tell the compiler to use integer operations
(see L<integer> for a detailed explanation) from here to the end of
the enclosing BLOCK.  An inner BLOCK may countermand this by saying

    no integer;

which lasts until the end of that BLOCK.  Note that this doesn't
mean everything is an integer, merely that Perl will use integer
operations for arithmetic, comparison, and bitwise operators.  For
example, even under S<C<use integer>>, if you take the C<sqrt(2)>, you'll
still get C<1.4142135623731> or so.

Used on numbers, the bitwise operators (C<&> C<|> C<^> C<~> C<< << >>
C<< >> >>) always produce integral results.  (But see also
L<Bitwise String Operators>.)  However, S<C<use integer>> still has meaning for
them.  By default, their results are interpreted as unsigned integers, but
if S<C<use integer>> is in effect, their results are interpreted
as signed integers.  For example, C<~0> usually evaluates to a large
integral value.  However, S<C<use integer; ~0>> is C<-1> on two's-complement
machines.

=head2 Floating-point Arithmetic

X<floating-point> X<floating point> X<float> X<real>

While S<C<use integer>> provides integer-only arithmetic, there is no
analogous mechanism to provide automatic rounding or truncation to a
certain number of decimal places.  For rounding to a certain number
of digits, C<sprintf()> or C<printf()> is usually the easiest route.
See L<perlfaq4>.

Floating-point numbers are only approximations to what a mathematician
would call real numbers.  There are infinitely more reals than floats,
so some corners must be cut.  For example:

    printf "%.20g\n", 123456789123456789;
    #        produces 123456789123456784

Testing for exact floating-point equality or inequality is not a
good idea.  Here's a (relatively expensive) work-around to compare
whether two floating-point numbers are equal to a particular number of
decimal places.  See Knuth, volume II, for a more robust treatment of
this topic.

    sub fp_equal {
	my ($X, $Y, $POINTS) = @@_;
	my ($tX, $tY);
	$tX = sprintf("%.${POINTS}g", $X);
	$tY = sprintf("%.${POINTS}g", $Y);
	return $tX eq $tY;
    }

The POSIX module (part of the standard perl distribution) implements
C<ceil()>, C<floor()>, and other mathematical and trigonometric functions.
The C<L<Math::Complex>> module (part of the standard perl distribution)
defines mathematical functions that work on both the reals and the
imaginary numbers.  C<Math::Complex> is not as efficient as POSIX, but
POSIX can't work with complex numbers.

Rounding in financial applications can have serious implications, and
the rounding method used should be specified precisely.  In these
cases, it probably pays not to trust whichever system rounding is
being used by Perl, but to instead implement the rounding function you
need yourself.

=head2 Bigger Numbers
X<number, arbitrary precision>

The standard C<L<Math::BigInt>>, C<L<Math::BigRat>>, and
C<L<Math::BigFloat>> modules,
along with the C<bignum>, C<bigint>, and C<bigrat> pragmas, provide
variable-precision arithmetic and overloaded operators, although
they're currently pretty slow.  At the cost of some space and
considerable speed, they avoid the normal pitfalls associated with
limited-precision representations.

	use 5.010;
	use bigint;  # easy interface to Math::BigInt
	$x = 123456789123456789;
	say $x * $x;
    +15241578780673678515622620750190521

Or with rationals:

        use 5.010;
        use bigrat;
        $x = 3/22;
        $y = 4/6;
        say "x/y is ", $x/$y;
        say "x*y is ", $x*$y;
        x/y is 9/44
        x*y is 1/11

Several modules let you calculate with unlimited or fixed precision
(bound only by memory and CPU time).  There
are also some non-standard modules that
provide faster implementations via external C libraries.

Here is a short, but incomplete summary:

  Math::String           treat string sequences like numbers
  Math::FixedPrecision   calculate with a fixed precision
  Math::Currency         for currency calculations
  Bit::Vector            manipulate bit vectors fast (uses C)
  Math::BigIntFast       Bit::Vector wrapper for big numbers
  Math::Pari             provides access to the Pari C library
  Math::Cephes           uses the external Cephes C library (no
                         big numbers)
  Math::Cephes::Fraction fractions via the Cephes library
  Math::GMP              another one using an external C library
  Math::GMPz             an alternative interface to libgmp's big ints
  Math::GMPq             an interface to libgmp's fraction numbers
  Math::GMPf             an interface to libgmp's floating point numbers

Choose wisely.

=cut
@


1.23
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@d1621 1
a1621 1
X<\n> X<\r> X<\r\n>
@


1.22
log
@Apply local patches, remove excess files - perl-5.20.2
@
text
@d9 1
a9 1
independent of the type of the operands.  For example C<$x + $y>
d16 2
a17 2
and one for string comparison.  For example C<$x == $y> compares
two numbers for equality, and C<$x eq $y> compares two strings.
d21 1
a21 1
operand, and C<&>, C<|> and C<^> can be either string or numeric bit
d31 3
a33 3
others.  For example, in C<2 + 4 * 5>, the multiplication has higher
precedence so C<4 * 5> is evaluated first yielding C<2 + 20 ==
22> and not C<6 * 5 == 30>.
d37 4
a40 4
evaluate the left operations first or the right.  For example, in C<8
- 4 - 2>, subtraction is left associative so Perl evaluates the
expression left to right.  C<8 - 4> is evaluated first making the
expression C<4 - 2 == 2> and not C<8 - 2 == 6>.
d88 1
a88 1
If any list operator (print(), etc.) or any unary operator (chdir(), etc.)
d101 1
a101 1
the commas on the right of the sort are evaluated before the sort,
d122 1
a122 1
the result of C<$foo & 255>).  Then one is added to the return value
d133 1
a133 1
Also parsed as terms are the C<do {}> and C<eval {}> constructs, as
d157 1
a157 1
somewhat extended by the experimental C<postderef> feature.  For the
d163 1
a163 1
"++" and "--" work as in C.  That is, if placed before a variable,
d205 4
a208 3
Binary "**" is the exponentiation operator.  It binds even more
tightly than unary minus, so -2**4 is -(2**4), not (-2)**4.  (This is
implemented using C's pow(3) function, which actually works on doubles
d211 5
d219 1
a219 1
Unary "!" performs logical negation, that is, "not".  See also C<not> for a lower
d223 1
a223 1
Unary "-" performs arithmetic negation if the operand is numeric,
d228 5
a232 4
returned.  One effect of these rules is that -bareword is equivalent
to the string "-bareword".  If, however, the string begins with a
non-alphabetic character (excluding "+" or "-"), Perl will attempt to convert
the string to a numeric and the arithmetic negation is performed.  If the
d237 2
a238 2
Unary "~" performs bitwise negation, that is, 1's complement.  For
example, C<0666 & ~027> is 0640.  (See also L<Integer Arithmetic> and
d240 1
a240 1
platform-dependent: ~0 is 32 bits wide on a 32-bit platform, but 64
d242 1
a242 1
width, remember to use the "&" operator to mask off the excess bits.
d251 8
a258 1
Unary "+" has no effect whatsoever, even on strings.  It is useful
d261 1
a261 1
arguments.  (See examples above under L<Terms and List Operators (Leftward)>.)
d264 1
a264 1
Unary "\" creates a reference to whatever follows it.  See L<perlreftut>
d273 2
a274 2
Binary "=~" binds a scalar expression to a pattern match.  Certain operations
search or modify the string $_ by default.  This operator makes that kind
d278 3
a280 3
$_.  When used in scalar context, the return value generally indicates the
success of the operation.  The exceptions are substitution (s///)
and transliteration (y///) with the C</r> (non-destructive) option,
d296 1
a296 1
Binary "!~" is just like "=~" except the return value is negated in
d299 2
a300 2
Binary "!~" with a non-destructive substitution (s///r) or transliteration
(y///r) is a syntax error.
d305 1
a305 1
Binary "*" multiplies two numbers.
d308 1
a308 1
Binary "/" divides two numbers.
d311 1
a311 1
Binary "%" is the modulo operator, which computes the division
d314 1
a314 1
operands C<$m> and C<$n>: If C<$n> is positive, then C<$m % $n> is
d316 1
a316 1
C<$m>.  If C<$n> is negative, then C<$m % $n> is C<$m> minus the
d320 1
a320 1
C<$n> (that is C<abs($n)>) is less than C<(UV_MAX + 1)>, only
d324 2
a325 2
or equal to C<(UV_MAX + 1)>, "%" computes the floating-point remainder
C<$r> in the equation C<($r = $m - $i*$n)> where C<$i> is a certain
d329 1
a329 1
Note that when C<use integer> is in scope, "%" gives you direct access
d335 1
a335 1
Binary "x" is the repetition operator.  In scalar context or if the left
d339 3
a341 2
parentheses or is a list formed by C<qw/STRING/>, it repeats the list.
If the right operand is zero or negative, it returns an empty string
d356 1
a356 1
Binary C<+> returns the sum of two numbers.
d359 1
a359 1
Binary C<-> returns the difference of two numbers.
d362 1
a362 1
Binary C<.> concatenates two strings.
d371 1
a371 1
Binary C<<< << >>> returns the value of its left argument shifted left by the
d375 1
a375 1
Binary C<<< >> >>> returns the value of its left argument shifted right by
d379 22
a400 11
Note that both C<<< << >>> and C<<< >> >>> in Perl are implemented directly using
C<<< << >>> and C<<< >> >>>  in C.  If C<use integer> (see L<Integer Arithmetic>) is
in force then signed C integers are used, else unsigned C integers are
used.  Either way, the implementation isn't going to generate results
larger than the size of the integer type Perl was built with (32 bits
or 64 bits).

The result of overflowing the range of the integers is undefined
because it is undefined also in C.  In other words, using 32-bit
integers, C<< 1 << 32 >> is undefined.  Shifting by a negative number
of bits is also undefined.
d403 1
a403 1
the C<use bigint> pragma neatly sidesteps the issue altogether:
d417 1
a417 1
If any list operator (print(), etc.) or any unary operator (chdir(), etc.)
d428 1
a428 1
but, because * is higher precedence than named operators:
d443 1
a443 1
equivalent to C<-f "$file.bak">.
d456 1
a456 1
about improper numeric conversions, just as C<"0 but true"> is.
d458 1
a458 1
Binary "<" returns true if the left argument is numerically less than
d462 1
a462 1
Binary ">" returns true if the left argument is numerically greater
d466 1
a466 1
Binary "<=" returns true if the left argument is numerically less than
d470 1
a470 1
Binary ">=" returns true if the left argument is numerically greater
d474 1
a474 1
Binary "lt" returns true if the left argument is stringwise less than
d478 1
a478 1
Binary "gt" returns true if the left argument is stringwise greater
d482 1
a482 1
Binary "le" returns true if the left argument is stringwise less than
d486 1
a486 1
Binary "ge" returns true if the left argument is stringwise greater
d493 1
a493 1
Binary "==" returns true if the left argument is numerically equal to
d497 1
a497 1
Binary "!=" returns true if the left argument is numerically not equal
d501 1
a501 1
Binary "<=>" returns -1, 0, or 1 depending on whether the left
d503 8
a510 6
argument.  If your platform supports NaNs (not-a-numbers) as numeric
values, using them with "<=>" returns undef.  NaN is not "<", "==", ">",
"<=" or ">=" anything (even NaN), so those 5 return false.  NaN != NaN
returns true, as does NaN != anything else.  If your platform doesn't
support NaNs then NaN is just a string with numeric value 0.
X<< <=> >> X<spaceship>
d516 1
a516 1
support "NaN".)
d518 1
a518 1
Binary "eq" returns true if the left argument is stringwise equal to
d522 1
a522 1
Binary "ne" returns true if the left argument is stringwise not equal
d526 1
a526 1
Binary "cmp" returns -1, 0, or 1 depending on whether the left
d531 1
a531 1
Binary "~~" does a smartmatch between its arguments.  Smart matching
d535 13
a547 7
"lt", "le", "ge", "gt" and "cmp" use the collation (sort) order specified
by the current locale if a legacy C<use locale> (but not
C<use locale ':not_characters'>) is in effect.  See
L<perllocale>.  Do not mix these with Unicode, only with legacy binary
encodings.  The standard L<Unicode::Collate> and
L<Unicode::Collate::Locale> modules offer much more powerful solutions to
collation issues.
d756 3
a758 3
If you were to set C<$b[3] = 4>, then instead of reporting that "a and b
are deep copies of each other", it now reports that "b smartmatches in a".
That because the corresponding position in C<@@a> contains an array that
d778 5
a782 13
or, if other non-required fields are allowed, use ARRAY ~~ HASH:

    use v5.10.1;
    sub make_dogtag {
        state $REQUIRED_FIELDS = { name=>1, rank=>1, serial_num=>1 };

        my ($class, $init_fields) = @@_;

        die "Must supply (at least) name, rank, and serial number"
            unless [keys %{$init_fields}] ~~ $REQUIRED_FIELDS;

        ...
    }
d817 1
a817 1
numbers, in becomes equivalent to this:
d837 1
a837 1
Binary "&" returns its operands ANDed together bit by bit.  Although no
d840 1
a840 1
L<Integer Arithmetic>) or bitstrings (see L<Bitwise String Operators>).
d842 1
a842 1
Note that "&" has lower priority than relational operators, so for example
d847 5
d856 1
a856 1
Binary "|" returns its operands ORed together bit by bit.
d858 1
a858 1
Binary "^" returns its operands XORed together bit by bit.
d862 1
a862 1
numbers (see L<Integer Arithmetic>) or bitstrings (see L<Bitwise String
d865 2
a866 2
Note that "|" and "^" have lower priority than relational operators, so
for example the brackets are essential in a test like
d870 5
d878 1
a878 1
Binary "&&" performs a short-circuit logical AND operation.  That is,
d886 1
a886 1
Binary "||" performs a short-circuit logical OR operation.  That is,
d895 1
a895 1
to its C-style or.  In fact, it's exactly the same as C<||>, except that it
d897 1
a897 1
C<< EXPR1 // EXPR2 >> returns the value of C<< EXPR1 >> if it's defined,
d901 2
a902 2
this is the same result as C<< defined(EXPR1) ? EXPR1 : EXPR2 >> (except that
the ternary-operator form can be used as a lvalue, while C<< EXPR1 // EXPR2 >>
d905 1
a905 1
at least one of C<$x> and C<$y> is defined, use C<defined($x // $y)>.
d919 3
a921 3
    @@a = @@b || @@c;		# this is wrong
    @@a = scalar(@@b) || @@c;	# really meant this
    @@a = @@b ? @@b : @@c;		# this works fine, though
d925 2
a926 2
The short-circuit behavior is identical.  The precedence of "and"
and "or" is much lower, however, so that you can safely use them after a
d944 1
a944 1
Using "or" for assignment is unlikely to do what you want; see below.
d949 1
a949 1
Binary ".." is the range operator, which is really two different
d954 1
a954 1
C<foreach (1..10)> loops and for doing slice operations on arrays.  In
d967 1
a967 1
In scalar context, ".." returns a boolean value.  The operator is
d969 1
a969 1
operator of B<sed>, B<awk>, and various editors.  Each ".." operator
d978 2
a979 2
next evaluation, as in B<sed>, just use three dots ("...") instead of
two.  In all other regards, "..." behaves just like ".." does.
d987 1
a987 1
in a range has the string "E0" appended to it, which doesn't affect
d992 1
a992 1
If either operand of scalar ".." is a constant expression,
d996 1
a996 1
To be pedantic, the comparison is actually C<int(EXPR) == int(EXPR)>,
d999 1
a999 1
comparison is C<int(EXPR) == int($.)> which is only an issue when C<$.>
d1001 1
a1001 1
Furthermore, C<"span" .. "spat"> or C<2.18 .. 3.14> will not do what
d1099 1
a1099 1
Because each operand is evaluated in integer form, C<2.18 .. 3.14> will
d1107 4
a1110 4
Ternary "?:" is the conditional operator, just as in C.  It works much
like an if-then-else.  If the argument before the ? is true, the
argument before the : is returned, otherwise the argument after the :
is returned.  For example:
d1147 1
a1147 1
X<%=> X<^=> X<x=>
d1149 1
a1149 1
"=" is the ordinary assignment operator.
d1160 1
a1160 1
might trigger, such as from tie().  Other assignment operators work similarly.
d1163 3
a1165 3
    **=    +=    *=    &=    <<=    &&=
           -=    /=    |=    >>=    ||=
           .=    %=    ^=           //=
d1169 5
a1173 1
of assignment.
d1201 3
d1207 1
a1207 1
Binary "," is the comma operator.  In scalar context it evaluates
d1215 2
a1216 1
The C<< => >> operator is a synonym for the comma except that it causes a
d1251 1
a1251 1
That example prints something like "1314363215shiftbbb", because the
d1261 1
a1261 1
"and", "or", and "not", which may be used to evaluate calls to list
d1271 1
a1271 1
in which case you might as well just use the more customary "||" operator:
d1275 1
a1275 1
See also discussion of list operators in L<Terms and List Operators (Leftward)>.
d1280 2
a1281 2
Unary "not" returns the logical negation of the expression to its right.
It's the equivalent of "!" except for the very low precedence.
d1286 1
a1286 1
Binary "and" returns the logical conjunction of the two surrounding
d1296 1
a1296 1
Binary "or" returns the logical disjunction of the two surrounding
d1312 1
a1312 1
C<||> for control flow, you probably need "or" so that the assignment
d1320 1
a1320 1
Binary C<xor> returns the exclusive-OR of the two surrounding expressions.
d1335 1
a1335 1
Address-of operator.  (But see the "\" operator for taking a reference.)
d1340 1
a1340 1
operators are typed: $, @@, %, and &.)
d1388 1
a1388 1
is a syntax error.  The C<Text::Balanced> module (standard as of v5.8,
d1393 1
a1393 1
C<q#foo#> is parsed as the string C<foo>, while C<q #foo#> is the
d1444 1
a1444 1
means that C<\x7> will be interpreted as C<\x07>, and a lone <\x> will be
d1464 1
a1464 1
C<\N{U+I<hexadecimal number>}> means the Unicode character whose Unicode code
d1482 1
d1486 2
a1487 1
   \c?      chr(127) # (on ASCII platforms)
d1492 1
a1492 1
C<\c@@> is NULL because the ord of "@@" is 64, so xor'ing 64 itself produces 0.
d1494 1
a1494 1
Also, C<\c\I<X>> yields C< chr(28) . "I<X>"> for any I<X>, but cannot come at the
d1504 5
a1508 4
discouraged, and some are deprecated with the intention of removing
those in a later Perl version.  What happens for any of these
other characters currently though, is that the value is derived by xor'ing
with the seventh bit, which is 64.
d1535 3
a1537 2
C<\o{}>, or convert to something else, such as to hex and use C<\x{}>
instead.
d1552 1
a1552 1
from 0) is the letter "P", and in EBCDIC it is the ampersand symbol "&".
d1559 2
a1560 2
always interpreted as a Unicode code point, so that C<\N{U+0050}> is "P" even
on EBCDIC platforms.  And if L<C<S<use encoding>>|encoding> is in effect, the
d1569 1
a1569 2
use C<\ck> or
C<\x0b>.  (C<\v>
d1595 8
a1602 8
If C<use locale> is in effect (but not C<use locale ':not_characters'>),
the case map used by C<\l>, C<\L>,
C<\u>, and C<\U> is taken from the current locale.  See L<perllocale>.
If Unicode (for example, C<\N{}> or code points of 0x100 or
beyond) is being used, the case map used by C<\l>, C<\L>, C<\u>, and
C<\U> is as defined by Unicode.  That means that case-mapping
a single character can sometimes produce several characters.
Under C<use locale>, C<\F> produces the same results as C<\L>
d1612 1
a1612 1
and on systems without line terminator,
d1621 1
a1621 1
X<\r>
d1630 1
a1630 1
C<join $", @@array>.  "Punctuation" arrays such as C<@@*> are usually
d1673 1
a1673 1
=item qr/STRING/msixpodual
d1678 1
a1678 1
in C<m/PATTERN/>.  If "'" is used as the delimiter, no interpolation
d1680 1
a1680 1
corresponding C</STRING/msixpodual> expression.  The returned value is a
d1705 3
a1707 3
Since Perl may compile the pattern at the moment of execution of the qr()
operator, using qr() may have speed advantages in some situations,
notably if the result of qr() is used standalone:
d1722 1
a1722 1
the moment of qr() avoids a need to recompile the pattern every
d1725 1
a1725 1
we did not use qr() operator.)
d1735 2
a1736 1
        defined.
d1739 3
a1741 3
        a's further restricts /i matching so that no ASCII
        character will match a non-ASCII one.
    l   Use the locale.
d1744 1
d1747 2
a1748 2
of "msixpluad" will be propagated appropriately.  The effect the "o"
modifier has is not propagated, being restricted to those patterns
d1756 1
a1756 1
See L<perlre> for additional information on valid syntax for STRING, and
d1761 1
a1761 1
=item m/PATTERN/msixpodualgc
d1766 1
a1766 1
=item /PATTERN/msixpodualgc
d1770 1
a1770 1
via the C<=~> or C<!~> operator, the $_ string is searched.  (The
d1782 1
a1782 1
If "/" is the delimiter then the initial C<m> is optional.  With the C<m>
d1785 1
a1785 1
that contain "/", to avoid LTS (leaning toothpick syndrome).  If "?" is
d1787 3
a1789 3
described in C<m?PATTERN?> below.  If "'" (single quote) is the delimiter,
no interpolation is performed on the PATTERN.
When using a character valid in an identifier, whitespace is required
d1792 1
a1792 1
PATTERN may contain variables, which will be interpolated
d1837 1
a1837 1
=item The empty pattern //
d1839 1
a1839 1
If the PATTERN evaluates to the empty string, the last
d1849 2
a1850 2
C<$x///> (is that C<($x) / (//)> or C<$x // />?) and C<print $fh //>
(C<print $fh(//> or C<print($fh //>?).  In all of these examples, Perl
d1883 3
a1885 3
This last example splits $foo into the first two words and the
remainder of the line, and assigns those three fields to $F1, $F2, and
$Etc.  The conditional is true if any variables were assigned; that is,
d1904 1
a1904 1
=item \G assertion
d2019 1
a2019 1
=item m?PATTERN?msixpodualgc
d2022 1
a2022 1
=item ?PATTERN?msixpodualgc
d2024 2
a2025 2
This is just like the C<m/PATTERN/> search, except that it matches
only once between calls to the reset() operator.  This is a useful
d2044 1
a2044 1
C<?>; with any other delimiter this is the normal C<m//> operator.  
d2046 4
a2049 4
For historical reasons, the leading C<m> in C<m?PATTERN?> is optional,
but the resulting C<?PATTERN?> syntax is deprecated, will warn on
usage and might be removed from a future stable release of Perl (without
further notice!).
d2051 1
a2051 1
=item s/PATTERN/REPLACEMENT/msixpodualgcer
d2073 2
a2074 2
done on either the PATTERN or the REPLACEMENT.  Otherwise, if the
PATTERN contains a $ that looks like a variable rather than an
d2081 1
a2081 1
Options are as with m// with the addition of the following replacement
d2095 1
a2095 1
If the PATTERN is delimited by bracketing quotes, the REPLACEMENT has
d2170 2
a2171 2
Note the use of $ instead of \ in the last example.  Unlike
B<sed>, we use the \<I<digit>> form in only the left hand side.
d2190 1
a2190 1
=item q/STRING/
d2193 1
a2193 1
=item 'STRING'
d2203 1
a2203 1
=item qq/STRING/
d2206 1
a2206 1
=item "STRING"
d2215 1
a2215 1
=item qx/STRING/
d2218 1
a2218 1
=item `STRING`
d2225 3
a2227 3
string, or undef if the command failed.  In list context, returns a
list of lines (however you've defined lines with $/ or
$INPUT_RECORD_SEPARATOR), or an empty list if the command failed.
d2274 1
a2274 1
See L<perlsec> for a clean and safe example of a manual fork() and exec()
d2287 2
a2288 2
C<$|> ($AUTOFLUSH in English) or call the C<autoflush()> method of
C<IO::Handle> on any open handles.
d2304 15
d2321 1
a2321 1
=item qw/STRING/
d2324 1
a2324 1
Evaluates to a list of the words extracted out of STRING, using embedded
d2345 1
a2345 1
A common mistake is to try to separate the words with comma or to
d2347 2
a2348 2
C<use warnings> pragma and the B<-w> switch (that is, the C<$^W> variable)
produces warnings if the STRING contains the "," or the "#" character.
d2350 1
a2350 1
=item tr/SEARCHLIST/REPLACEMENTLIST/cdsr
d2353 1
a2353 1
=item y/SEARCHLIST/REPLACEMENTLIST/cdsr
d2358 1
a2358 1
specified via the C<=~> or C<!~> operator, the $_ string is transliterated.
d2373 1
a2373 1
SEARCHLIST is delimited by bracketing quotes, the REPLACEMENTLIST has
d2377 7
d2385 1
a2385 1
C<\d> or C<\pL>.  The C<tr> operator is not equivalent to the tr(1)
d2393 35
a2427 5
Note also that the whole range idea is rather unportable between
character sets--and even within character sets they may cause results
you probably didn't expect.  A sound principle is to use only ranges
that begin from and end at either alphabets of equal case (a-e, A-E),
or digits (0-4).  Anything else is unsafe.  If in doubt, spell out the
d2438 1
a2438 1
If the C</c> modifier is specified, the SEARCHLIST character set
d2440 1
a2440 1
specified by SEARCHLIST not found in REPLACEMENTLIST are deleted.
d2442 1
a2442 1
B<tr> programs, which delete anything they find in the SEARCHLIST,
d2447 4
a2450 4
If the C</d> modifier is used, the REPLACEMENTLIST is always interpreted
exactly as specified.  Otherwise, if the REPLACEMENTLIST is shorter
than the SEARCHLIST, the final character is replicated till it is long
enough.  If the REPLACEMENTLIST is empty, the SEARCHLIST is replicated.
d2488 1
a2488 1
the SEARCHLIST nor the REPLACEMENTLIST are subjected to double quote
d2490 1
a2490 1
must use an eval():
d2497 1
a2497 1
=item <<EOF
d2673 4
a2676 4
The first pass is finding the end of the quoted construct, where
the information about the delimiters is used in parsing.
During this search, text between the starting and ending delimiters
is copied to a safe location.  The text copied gets delimiter-independent.
d2691 1
a2691 1
punctuation, the ending delimiter is same as the starting delimiter.
d2699 1
a2699 1
for closing C<]> paired with the opening C<[>, combinations of C<\\>, C<\]>,
d2716 1
a2716 1
and comments are allowed between the two parts, though the comment must follow
d2765 1
a2765 1
Therefore C<-> in C<tr'''> and C<y'''> is treated literally
d2775 2
a2776 2
The character C<-> is treated specially and therefore C<\-> is treated
as a literal C<->.
d2782 1
a2782 1
is converted to C<$foo . (quotemeta("baz" . $bar))> internally.
d2801 1
a2801 1
C<.> catenation operations.  Thus, C<"$foo XXX '@@arr'"> becomes:
d2807 1
a2807 1
Because the result of C<"\Q STRING \E"> has all metacharacters
d2809 1
a2809 1
C<\Q\E> pair.  If protected by C<\>, C<$> will be quoted to became
d2815 1
a2815 1
C<< "a $x -> {c}" >> really means:
d2837 1
a2837 1
is emitted if the C<use warnings> pragma or the B<-w> command-line flag
d2861 2
a2862 2
Moreover, inside C<(?{BLOCK})>, C<(?# comment )>, and
a C<#>-comment in a C<//x>-regular expression, no processing is
d2864 1
a2864 1
of the C<//x> modifier is relevant.
d2890 1
a2890 1
RE is the same as for C<m/ ^ a \s* b /mx>.  There's more than one
d2912 1
a2912 1
This is another step where the presence of the C<//x> modifier is
d2914 1
a2914 1
converts it to a finite automaton.
d2922 1
a2922 1
whitespace and C<#>-style comments if C<//x> is present).
d2937 1
a2937 1
in the C<use L<re>> pragma, as well as Perl's B<-Dr> command-line
d2955 1
a2955 1
X<< <> >> X<@@ARGV>
d2987 1
a2987 1
the value is automatically assigned to the global variable $_,
d2990 2
a2991 2
script you write.)  The $_ variable is not implicitly localized.
You'll have to put a C<local $_;> before the loop if you want that
d3013 1
a3013 1
a "0" with no trailing newline.  If you really mean for such values
d3019 1
a3019 1
In other boolean contexts, C<< <FILEHANDLE> >> without an
d3021 1
a3021 1
C<use warnings> pragma or the B<-w>
d3028 1
a3028 1
the open() function, amongst others.  See L<perlopentut> and
d3032 1
a3032 1
If a <FILEHANDLE> is used in a context that is looking for
d3037 1
a3037 1
<FILEHANDLE> may also be spelled C<readline(*FILEHANDLE)>.
d3040 1
a3040 1
The null filehandle <> is special: it can be used to emulate the
d3043 1
a3043 1
of input from all of them.  Input from <> comes either from
d3045 3
a3047 3
how it works: the first time <> is evaluated, the @@ARGV array is
checked, and if it is empty, C<$ARGV[0]> is set to "-", which when opened
gives you standard input.  The @@ARGV array is then processed as a list
d3065 3
a3067 3
It really does shift the @@ARGV array and put the current filename
into the $ARGV variable.  It also uses filehandle I<ARGV>
internally.  <> is just a synonym for <ARGV>, which
d3069 1
a3069 1
<ARGV> as non-magical.)
d3078 1
a3078 1
and call it with C<perl dangerous.pl 'rm -rfv *|'>, it actually opens a
d3081 1
a3081 1
can use the module C<ARGV::readonly> from CPAN.
d3083 11
a3093 1
You can modify @@ARGV before the first <> as long as the array ends up
d3098 2
a3099 2
If you want to set @@ARGV to your own list of files, go right ahead.
This sets @@ARGV to all plain text files if no @@ARGV was given:
d3109 1
a3109 1
Getopts modules or put a loop on the front like this:
d3123 1
a3123 1
The <> symbol will return C<undef> for end-of-file only once.
d3125 1
a3125 1
@@ARGV list, and if you haven't set @@ARGV, will read input from STDIN.
d3128 1
a3128 1
<$foo>), then that variable contains the name of the
d3140 3
a3142 3
grounds alone.  That means C<< <$x> >> is always a readline() from
an indirect handle, but C<< <$hash{key}> >> is always a glob().
That's because $x is a simple scalar variable, but C<$hash{key}> is
d3167 1
a3167 1
C<File::Glob> extension.  Of course, the shortest way to do the above is:
d3194 1
a3194 1
to use the glob() function, because the older notation can cause people
d3234 1
a3234 1
X<operator, bitwise, string>
d3265 29
d3314 1
a3314 1
example, even under C<use integer>, if you take the C<sqrt(2)>, you'll
d3317 3
a3319 3
Used on numbers, the bitwise operators ("&", "|", "^", "~", "<<",
and ">>") always produce integral results.  (But see also
L<Bitwise String Operators>.)  However, C<use integer> still has meaning for
d3321 1
a3321 1
if C<use integer> is in effect, their results are interpreted
d3323 1
a3323 1
integral value.  However, C<use integer; ~0> is C<-1> on two's-complement
d3330 1
a3330 1
While C<use integer> provides integer-only arithmetic, there is no
d3333 1
a3333 1
of digits, sprintf() or printf() is usually the easiest route.
d3358 2
a3359 2
ceil(), floor(), and other mathematical and trigonometric functions.
The Math::Complex module (part of the standard perl distribution)
d3361 1
a3361 1
imaginary numbers.  Math::Complex not as efficient as POSIX, but
d3373 2
a3374 1
The standard C<Math::BigInt>, C<Math::BigRat>, and C<Math::BigFloat> modules,
d3398 2
a3399 2
Several modules let you calculate with (bound only by memory and CPU time)
unlimited or fixed precision.  There
@


1.21
log
@Fix merge issues, remove excess files - match perl-5.20.2 dist
@
text
@d1574 1
a1574 1
X<\n> X<\r> X<\r\n>
@


1.20
log
@Apply local patches to perl-5.20.1

ok deraadt@@ sthen@@ espie@@ miod@@
@
text
@d9 2
a10 2
independent of the type of the operands. For example C<$a + $b>
is always a numeric addition, and if C<$a> or C<$b> do not contain
d14 1
a14 1
operation is determined by the type of the first argument. It also
d16 2
a17 2
and one for string comparison. For example C<$a == $b> compares
two numbers for equality, and C<$a eq $b> compares two strings.
d173 2
a174 2
incremented or decremented. You just know it will be done sometime
before or after the value is returned. This also means that modifying
d206 1
a206 1
tightly than unary minus, so -2**4 is -(2**4), not (-2)**4. (This is
d225 1
a225 1
the string to a numeric and the arithmetic negation is performed. If the
d274 2
a275 1
time. Note that this means that its contents will be interpolated twice, so
d300 4
a303 4
operands C<$a> and C<$b>: If C<$b> is positive, then C<$a % $b> is
C<$a> minus the largest multiple of C<$b> less than or equal to
C<$a>.  If C<$b> is negative, then C<$a % $b> is C<$a> minus the
smallest multiple of C<$b> that is not less than C<$a> (that is, the
d305 3
a307 3
C<$a> and C<$b> are floating point values and the absolute value of
C<$b> (that is C<abs($b)>) is less than C<(UV_MAX + 1)>, only
the integer portion of C<$a> and C<$b> will be used in the operation
d309 1
a309 1
If the absolute value of the right operand (C<abs($b)>) is greater than
d311 1
a311 1
C<$r> in the equation C<($r = $a - $i*$b)> where C<$i> is a certain
d313 2
a314 2
C<$b> (B<not> as the left operand C<$a> like C function C<fmod()>)
and the absolute value less than that of C<$b>.
d479 2
a480 2
"<=" or ">=" anything (even NaN), so those 5 return false. NaN != NaN
returns true, as does NaN != anything else. If your platform doesn't
d484 2
a485 2
    $ perl -le '$a = "NaN"; print "No NaN support here" if $a == $a'
    $ perl -le '$a = "NaN"; print "NaN support here" if $a != $a'
d487 1
a487 1
(Note that the L<bigint>, L<bigrat>, and L<bignum> pragmas all 
d728 1
a728 1
same keys, no more and no less. This could be used to see whether two
d766 2
a767 2
breaks encapsulation>". That's because one has no business digging
around to see whether something is "in" an object. These are all
d775 2
a776 1
the C<~~> operator. This is allowed to extend the usual smartmatch semantics.
d862 3
a864 2
otherwise, the value of C<< EXPR2 >> is returned. (C<< EXPR1 >> is evaluated
in scalar context, C<< EXPR2 >> in the context of C<< // >> itself). Usually,
d867 1
a867 1
cannot). This is very useful for
d869 1
a869 1
at least one of C<$a> and C<$b> is defined, use C<defined($a // $b)>.
d872 1
a872 1
(unlike C's C<||> and C<&&>, which return 0 or 1). Thus, a reasonably
d918 1
a918 1
C<foreach (1..10)> loops and for doing slice operations on arrays. In
d933 1
a933 1
operator of B<sed>, B<awk>, and various editors. Each ".." operator
d935 1
a935 1
that contains it. It is false as long as its left operand is false.
d941 1
a941 1
true once. If you don't want it to test the right operand until the
d1009 1
a1009 1
This program will print only the line containing "Bar". If
d1082 3
a1084 3
    $a = $ok ? $b : $c;  # get a scalar
    @@a = $ok ? @@b : @@c;  # get an array
    $a = $ok ? @@b : @@c;  # oops, that's just a count!
d1089 1
a1089 1
    ($a_or_b ? $a : $b) = $c;
d1094 1
a1094 1
    $a % 2 ? $a += 10 : $a += 2
d1098 1
a1098 1
    (($a % 2) ? ($a += 10) : $a) += 2
d1102 1
a1102 1
    ($a % 2) ? ($a += 10) : ($a += 2)
d1106 1
a1106 1
    $a += ($a % 2) ? 10 : 2;
d1117 1
a1117 1
    $a += 2;
d1121 1
a1121 1
    $a = $a + 2;
d1149 1
a1149 1
    ($a += 2) *= 3;
d1153 2
a1154 2
    $a += 2;
    $a *= 3;
d1176 1
a1176 1
constants, single number v-strings or function calls. If in doubt about
d1263 3
a1265 3
    $a = $b or $c;		# bug: this is wrong
    ($a = $b) or $c;		# really means this
    $a = $b || $c;		# better written this way
d1295 1
a1295 1
Dereference-address operator. (Perl's prefix dereferencing
d1342 1
a1342 1
    $s = q{ if($a eq "}") ... }; # WRONG
d1344 1
a1344 1
is a syntax error. The C<Text::Balanced> module (standard as of v5.8,
d1384 1
a1384 1
Only hexadecimal digits are valid between the braces. If an invalid
d1574 1
a1574 1
X<\r>
d1598 2
a1599 2
but before escapes are processed. This allows the pattern to match
literally (except for C<$> and C<@@>). For example, the following matches:
d1633 2
a1634 2
corresponding C</STRING/msixpodual> expression. The returned value is a
normalized version of the original pattern. It magically differs from
d1738 1
a1738 1
described in C<m?PATTERN?> below. If "'" (single quote) is the delimiter,
d1791 1
a1791 1
I<successfully> matched regular expression is used instead. In this
d1793 1
a1793 1
the other flags are taken from the original pattern. If no match has
d1800 1
a1800 1
C<$a///> (is that C<($a) / (//)> or C<$a // />?) and C<print $fh //>
d1840 2
a1841 2
matching as many times as possible within the string. How it behaves
depends on the context. In list context, it returns a list of the
d1843 1
a1843 1
expression. If there are no parentheses, it returns a list of all
d1850 1
a1850 1
function; see L<perlfunc/pos>. A failed match normally resets the
d1852 1
a1852 1
by adding the C</c> modifier (for example, C<m//gc>). Modifying the target
d1859 1
a1859 1
previous C<m//g>, if any, left off. Without the C</g> modifier, the
d1862 1
a1862 1
attempted once. Using C<\G> without C</g> on a target string that has
d1933 2
a1934 2
without the C<\G> anchor would have done. Also note that the final match
did not update C<pos>. C<pos> is only updated on a C</g> match. If the
d2051 1
a2051 1
compile-time. A second C<e> modifier will cause the replacement portion
d2085 1
a2085 1
    $a = s/abc/def/r;           # $a is 'def123xyz' and
d2342 1
a2342 1
period.) If the C</s> modifier is specified, sequences of characters
d2434 1
a2434 1
interpolation of its content. This is similar to single quoted
d2457 1
a2457 1
string were embedded in backticks. Thus the content is interpolated
d2527 1
a2527 1
unrelated to Perl's quoting rules. C<q()>, C<qq()>, and the like are not
d2575 1
a2575 1
is copied to a safe location. The text copied gets delimiter-independent.
d2578 1
a2578 1
that has a terminating string as the content. Therefore C<<<EOF> is
d2582 1
a2582 1
is skipped. In other words, lines after the here-doc syntax
d2586 1
a2586 1
and ending delimiters. If the starting delimiter is an opening punctuation
d2592 1
a2592 1
C<qq[]> and C<qq]]> constructs.
d2608 3
a2610 2
If the first delimiter is not an opening punctuation, three delimiters must
be same such as C<s!!!> and C<tr)))>, in which case the second delimiter
d2615 1
a2615 1
and comments are allowed between both parts, though the comment must follow
d2637 1
a2637 1
this search. Thus the second C<\> in C<qq/\c\/> is interpreted as a part
d2714 1
a2714 1
C<< "a $b -> {c}" >> really means:
d2716 1
a2716 1
  "a " . $b . " -> {c}";
d2720 1
a2720 1
  "a " . $b -> {c};
d2966 1
a2966 1
internally. <> is just a synonym for <ARGV>, which
d3236 1
a3236 1
they're currently pretty slow. At the cost of some space and
d3248 8
a3255 8
	use 5.010;
	use bigrat;
	$a = 3/22;
	$b = 4/6;
	say "a/b is ", $a/$b;
	say "a*b is ", $a*$b;
    a/b is 9/44
    a*b is 1/11
d3258 2
a3259 1
unlimited or fixed precision. There are also some non-standard modules that
@


1.19
log
@Fix merge conflicts, remove extra files, match upstream perl-5.20.1

ok deraadt@@ sthen@@ espie@@ miod@@
@
text
@d1571 1
a1571 1
X<\n> X<\r> X<\r\n>
@


1.18
log
@Merge perl-5.18.2 plus local patches, remove old files

OK espie@@ sthen@@ deraadt@@
@
text
@d8 16
d156 4
d520 3
a522 1
Perl's operators, the smartmatch operator can recurse.
d809 4
a812 2
Binary "&" returns its operands ANDed together bit by bit.
(See also L<Integer Arithmetic> and L<Bitwise String Operators>.)
a823 1
(See also L<Integer Arithmetic> and L<Bitwise String Operators>.)
d826 5
a830 1
(See also L<Integer Arithmetic> and L<Bitwise String Operators>.)
d1056 3
a1058 1
you would use the pattern C</(?:(?=\p{Greek})\p{Lower})+/>.
d1437 2
a1438 1
   \c?      chr(127)
d1441 2
a1442 1
its uppercase.  C<\c?> is DELETE because C<ord("?") ^ 64> is 127, and
d1451 2
a1452 2
L<perlebcdic/OPERATOR DIFFERENCES> for the complete list of what these
sequences mean on both ASCII and EBCDIC platforms.
d1454 1
a1454 1
Use of any other character following the "c" besides those listed above is
a1487 6
Having fewer than 3 digits may lead to a misleading warning message that says
that what follows is ignored.  For example, C<"\128"> in the ASCII character set
is equivalent to the two characters C<"\n8">, but the warning C<Illegal octal
digit '8' ignored> will be thrown.  If C<"\n8"> is what you want, you can
avoid this warning by padding your octal number with C<0>'s: C<"\0128">.

d1552 3
a1554 1
Under C<use locale>, C<\F> produces the same results as C<\L>.
d1571 1
a1571 1
X<\r>
d1700 1
a1700 1
control the character set semantics, but C</a> is the only one you are likely
d1735 2
a1736 2
described in C<m?PATTERN?> below.
If "'" is the delimiter, no interpolation is performed on the PATTERN.
d1750 1
a1750 1
interests of speed.  But now, the only reasons to use C</o> are either:
@


1.17
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@d51 1
a51 1
    right	= += -= *= etc.
d564 1
a564 1
   
d1411 1
a1411 1
its uppercase.  C<\c?> is DELETE because C<ord("@@") ^ 64> is 127, and
d1492 3
a1494 1
the vertical tab (VT - ASCII 11), but you may use C<\ck> or C<\x0b>.  (C<\v>
d1623 2
a1624 1
    $string =~ /foo${re}bar/;	# can be interpolated in other patterns
d1657 2
a1658 1
        that ${^PREMATCH}, ${^MATCH}, ${^POSTMATCH} will be defined.
d1660 6
a1665 6
    a   ASCII-restrict: Use ASCII for \d, \s, \w; specifying two a's
        further restricts /i matching so that no ASCII character will
        match a non-ASCII one
    l   Use the locale
    u   Use Unicode rules
    d   Use Unicode or native charset, as in 5.12 and earlier
d1700 2
a1701 1
 c  Do not reset search position on a failed match when /g is in effect.
d1742 12
d1780 4
a1783 5
pattern, that is, (C<$1>, C<$2>, C<$3>...).  (Note that here C<$1> etc. are
also set, and that this differs from Perl 4's behavior.)  When there are
no parentheses in the pattern, the return value is the list C<(1)> for
success.  With or without parentheses, an empty list is returned upon
failure.
d1787 2
a1788 2
    open(TTY, "+</dev/tty")
	|| die "can't access /dev/tty: $!";
d1790 1
a1790 1
    <TTY> =~ /^y/i && foo();	# do foo if desired
d1792 1
a1792 1
    if (/Version: *([0-9.]*)/) { $version = $1; }
d1794 1
a1794 1
    next if m#^/usr/spool/uucp#;
d1796 5
a1800 5
    # poor man's grep
    $arg = shift;
    while (<>) {
	print if /$arg/o;	# compile only once (no longer needed!)
    }
d1802 1
a1802 1
    if (($F1, $F2, $Etc) = ($foo =~ /^(\S+)\s+(\S+)\s*(.*)/))
d1854 22
a1875 19
    my $sentence_rx = qr{
	(?: (?<= ^ ) | (?<= \s ) )  # after start-of-string or whitespace
	\p{Lu}                      # capital letter
	.*?                         # a bunch of anything
	(?<= \S )                   # that ends in non-whitespace
	(?<! \b [DMS]r  )           # but isn't a common abbreviation
	(?<! \b Mrs )
	(?<! \b Sra )
	(?<! \b St  )
	[.?!]                       # followed by a sentence ender
	(?= $ | \s )                # in front of end-of-string or whitespace
    }sx;
    local $/ = "";
    while (my $paragraph = <>) {
	say "NEW PARAGRAPH";
	my $count = 0;
	while ($paragraph =~ /($sentence_rx)/g) {
	    printf "\tgot sentence %d: <%s>\n", ++$count, $1;
	}
d1877 1
d1914 2
a1915 1
    $url = URI::URL->new( "http://example.com/" ); die if $url eq "xXx";
d1920 6
a1925 3
     print(" lowercase"),    redo LOOP if /\G\p{Ll}+\b[,.;]?\s*/gc;
     print(" UPPERCASE"),    redo LOOP if /\G\p{Lu}+\b[,.;]?\s*/gc;
     print(" Capitalized"),  redo LOOP if /\G\p{Lu}\p{Ll}+\b[,.;]?\s*/gc;
d1927 2
a1928 1
     print(" alphanumeric"), redo LOOP if /\G[\p{Alpha}\pN]+\b[,.;]?\s*/gc;
d1935 4
a1938 4
    line-noise lowercase line-noise UPPERCASE line-noise UPPERCASE
    line-noise lowercase line-noise lowercase line-noise lowercase
    lowercase line-noise lowercase lowercase line-noise lowercase
    lowercase line-noise MiXeD line-noise. That's all!
d2006 4
a2009 2
    ee  Evaluate the right side as a string then eval the result.
    r   Return substitution and leave the original string untouched.
d2014 1
a2014 1
modifier overrides this, however).  Unlike Perl 4, Perl 5 treats backticks
d2026 1
a2026 1
    s/\bgreen\b/mauve/g;		# don't change wintergreen
d2032 4
a2035 2
    ($foo = $bar) =~ s/this/that/;	# copy first, then change
    ($foo = "$bar") =~ s/this/that/;	# convert to string, copy, then change
d2038 4
a2041 2
                =~ s/that/the other/r;	# Chained substitutes using /r
    @@foo = map { s/this/that/r } @@bar	# /r is very useful in maps
d2043 1
a2043 1
    $count = ($paragraph =~ s/Mister\b/Mr./g);  # get change-count
d2080 2
a2081 1
    s/^\s*(.*?)\s*$/$1/;	# trim whitespace in $_, expensively
d2083 2
a2084 1
    for ($variable) {		# trim whitespace in $variable, cheap
a2103 8
C<s///le> is treated as a substitution followed by the C<le> operator, not
the C</le> flags.  This may change in a future version of Perl.  It
produces a warning if warnings are enabled.  To disambiguate, use a space
or change the order of the flags:

    s/foo/bar/ le 5;  # "le" infix operator
    s/foo/bar/el;     # "e" and "l" flags

d2142 1
a2142 1
system command with C</bin/sh> or its equivalent.  Shell wildcards,
d2205 1
a2205 1
Beginning with v5.6.0, Perl will attempt to flush all files opened for
d2477 3
a2479 2
the quoted material must come on the lines following the final delimiter.
So instead of
d2486 2
a2487 1
you have to write
d2494 1
a2494 3
If the terminating identifier is on the last line of the program, you
must be sure there is a newline after it; otherwise, Perl will give the
warning B<Can't find string terminator "END" anywhere before EOF...>.
d2573 1
a2573 1
backslashes are removed (exactly speaking, they are not copied to the
d2657 1
a2657 1
no C<\E> inside.  instead, it has C<\Q>, C<\\>, and C<E>, so the
d2725 4
d2797 5
a2801 3
though preceded by a backslash.  Similarly, the terminator of
C<(?{...})> is found using the same rules as for finding the
terminator of a C<{}>-delimited construct.
d3203 1
a3203 1
along with the C<bigint>, C<bigrat>, and C<bitfloat> pragmas, provide
a3231 1
  Math::Fraction         big, unlimited fractions like 9973 / 12967
d3238 2
a3239 2
  Math::BigInteger       uses an external C library
  Math::Cephes           uses external Cephes C library (no big numbers)
d3242 3
@


1.16
log
@merge in perl 5.12.2 plus local changes
@
text
@d155 1
a155 1
a variable twice in the same statement will lead to undefined behaviour.
d171 4
a174 4
    print ++($foo = '99');	# prints '100'
    print ++($foo = 'a0');	# prints 'a1'
    print ++($foo = 'Az');	# prints 'Ba'
    print ++($foo = 'zz');	# prints 'aaa'
d193 1
a193 1
Unary "!" performs logical negation, i.e., "not".  See also C<not> for a lower
d197 6
a202 5
Unary "-" performs arithmetic negation if the operand is numeric.  If
the operand is an identifier, a string consisting of a minus sign
concatenated with the identifier is returned.  Otherwise, if the string
starts with a plus or minus, a string starting with the opposite sign
is returned.  One effect of these rules is that -bareword is equivalent
d210 1
a210 1
Unary "~" performs bitwise negation, i.e., 1's complement.  For
d215 1
a215 1
width, remember to use the & operator to mask off the excess bits.
d218 6
d245 6
a250 3
success of the operation.  Behavior in list context depends on the particular
operator.  See L</"Regexp Quote-Like Operators"> for details and
L<perlretut> for examples using these operators.
d256 1
a256 1
  '\\' =~ q'\\';
d264 3
d282 1
a282 1
smallest multiple of C<$b> that is not less than C<$a> (i.e. the
d320 1
a320 1
Binary "+" returns the sum of two numbers.
d323 1
a323 1
Binary "-" returns the difference of two numbers.
d326 1
a326 1
Binary "." concatenates two strings.
d335 1
a335 1
Binary "<<" returns the value of its left argument shifted left by the
d339 1
a339 1
Binary ">>" returns the value of its left argument shifted right by
d343 2
a344 2
Note that both "<<" and ">>" in Perl are implemented directly using
"<<" and ">>" in C.  If C<use integer> (see L<Integer Arithmetic>) is
d355 9
d374 1
a374 1
because named unary operators are higher precedence than ||:
d404 7
d463 5
a467 2
    perl -le '$a = "NaN"; print "No NaN support here" if $a == $a'
    perl -le '$a = "NaN"; print "NaN support here" if $a != $a'
d482 2
a483 2
Binary "~~" does a smart match between its arguments. Smart matching
is described in L<perlsyn/"Smart matching in detail">.
d487 296
a782 1
by the current locale if C<use locale> is in effect.  See L<perllocale>.
d791 1
a791 1
the brackets are essential in a test like
d793 1
a793 1
	print "Even\n" if ($x & 1) == 0;
d808 1
a808 1
	print "false\n" if (8 | 2) != 10;
d826 1
a826 1
=head2 C-style Logical Defined-Or
d831 9
a839 6
tests the left hand side's definedness instead of its truth.  Thus, C<$a // $b>
is similar to C<defined($a) || $b> (except that it returns the value of C<$a>
rather than the value of C<defined($a)>) and is exactly equivalent to
C<defined($a) ? $a : $b>.  This is very useful for providing default values
for variables.  If you actually want to test if at least one of C<$a> and
C<$b> is defined, use C<defined($a // $b)>.
d845 4
a848 2
    $home = $ENV{'HOME'} // $ENV{'LOGDIR'} //
	(getpwuid($<))[7] // die "You're homeless!\n";
d857 1
a857 1
As more readable alternatives to C<&&> and C<||> when used for
d871 7
d944 1
a944 1
                               #   if ($. == 101 .. $. == 200) { print; }
d985 3
a987 3
    for (101 .. 200) { print; }	# print $_ 100 times
    @@foo = @@foo[0 .. $#foo];	# an expensive no-op
    @@foo = @@foo[$#foo-4 .. $#foo];	# slice last 5 items
d993 1
a993 1
    @@alphabet = ('A' .. 'Z');
d997 1
a997 1
    $hexdigit = (0 .. 9, 'a' .. 'f')[$num & 15];
d1001 2
a1002 1
    @@z2 = ('01' .. '31');  print $z2[$mday];
d1011 1
a1011 1
sequence (that is, a non-empty string matching "/^[a-zA-Z]*[0-9]*\z/"),
d1015 1
a1015 1
    use charnames 'greek';
d1018 2
a1019 1
To get lower-case greek letters, use this instead:
d1021 9
a1029 1
    my @@greek_small =  map { chr } ( ord("\N{alpha}") .. ord("\N{omega}") );
d1045 1
a1045 1
	    ($n == 1) ? '' : "s";
d1108 6
a1113 1
    ($tmp = $global) =~ tr [A-Z] [a-z];
d1140 2
a1141 2
The C<< => >> operator is a synonym for the comma except that it causes
its left operand to be interpreted as a string if it begins with a letter
d1145 1
a1145 1
this behaviour, the left operand can be quoted explicitly.
d1167 2
a1168 56
        %hash = ( $key => $value );
        login( $username => $password );

=head2 Yada Yada Operator
X<...> X<... operator> X<yada yada operator>

The yada yada operator (noted C<...>) is a placeholder for code. Perl
parses it without error, but when you try to execute a yada yada, it
throws an exception with the text C<Unimplemented>:

	sub unimplemented { ... }
	
	eval { unimplemented() };
	if( $@@ eq 'Unimplemented' ) {
	  print "I found the yada yada!\n";
	  }

You can only use the yada yada to stand in for a complete statement.
These examples of the yada yada work:

	{ ... }
	
	sub foo { ... }
	
	...;
	
	eval { ... };
	
	sub foo {
			my( $self ) = shift;
			
			...;
			}
			
	do { my $n; ...; print 'Hurrah!' };

The yada yada cannot stand in for an expression that is part of a
larger statement since the C<...> is also the three-dot version of the
range operator (see L<Range Operators>). These examples of the yada
yada are still syntax errors:

	print ...;
	
	open my($fh), '>', '/dev/passwd' or ...;
	
	if( $condition && ... ) { print "Hello\n" };

There are some cases where Perl can't immediately tell the difference
between an expression and a statement. For instance, the syntax for a
block and an anonymous hash reference constructor look the same unless
there's something in the braces that give Perl a hint. The yada yada
is a syntax error if Perl doesn't guess that the C<{ ... }> is a
block. In that case, it doesn't think the C<...> is the yada yada
because it's expecting an expression instead of a statement:

	my @@transformed = map { ... } @@input;  # syntax error
d1170 2
a1171 2
You can use a C<;> inside your block to denote that the C<{ ... }> is
a block and not a hash reference constructor. Now the yada yada works:
d1173 1
a1173 1
	my @@transformed = map {; ... } @@input; # ; disambiguates
d1175 3
a1177 1
	my @@transformed = map { ...; } @@input; # ; disambiguates
d1182 1
a1182 1
On the right side of a list operator, it has very low precedence,
d1186 1
a1186 1
operators without the need for extra parentheses:
d1188 10
a1197 2
    open HANDLE, "filename"
	or die "Can't open: $!\n";
d1211 2
a1212 2
expressions.  It's equivalent to && except for the very low
precedence.  This means that it short-circuits: i.e., the right
d1215 1
a1215 1
=head2 Logical or, Defined or, and Exclusive Or
d1217 1
a1217 1
X<operator, logical, defined or> X<operator, logical, exclusive or>
d1221 2
a1222 2
expressions.  It's equivalent to || except for the very low precedence.
This makes it useful for control flow
d1226 4
a1229 3
This means that it short-circuits: i.e., the right expression is evaluated
only if the left expression is false.  Due to its precedence, you should
probably avoid using this for assignment, only for control flow.
d1236 1
a1236 1
"||" for control flow, you probably need "or" so that the assignment
d1244 4
a1247 2
Binary "xor" returns the exclusive-OR of the two surrounding expressions.
It cannot short circuit, of course.
a1276 1

d1293 1
d1299 1
a1299 1
sorts of brackets (round, angle, square, curly) will all nest, which means
d1302 1
a1302 1
	q{foo{bar}baz}
d1306 1
a1306 1
	'foo{bar}baz'
d1310 1
a1310 1
	$s = q{ if($a eq "}") ... }; # WRONG
d1312 2
a1313 3
is a syntax error. The C<Text::Balanced> module (from CPAN, and
starting from Perl 5.8 part of the standard distribution) is able
to do this properly.
d1324 166
a1489 30
The following escape sequences are available in constructs that interpolate
and in transliterations.
X<\t> X<\n> X<\r> X<\f> X<\b> X<\a> X<\e> X<\x> X<\0> X<\c> X<\N>
X<\t> X<\r> X<\f> X<\b> X<\a> X<\e> X<\x> X<\0> X<\c> X<\N>

    \t		tab             (HT, TAB)
    \n		newline         (NL)
    \r		return          (CR)
    \f		form feed       (FF)
    \b		backspace       (BS)
    \a		alarm (bell)    (BEL)
    \e		escape          (ESC)
    \033	octal char	(example: ESC)
    \x1b	hex char	(example: ESC)
    \x{263a}	wide hex char	(example: SMILEY)
    \c[		control char    (example: ESC)
    \N{name}	named Unicode character
    \N{U+263D}	Unicode character (example: FIRST QUARTER MOON)

The character following C<\c> is mapped to some other character by
converting letters to upper case and then (on ASCII systems) by inverting
the 7th bit (0x40). The most interesting range is from '@@' to '_'
(0x40 through 0x5F), resulting in a control character from 0x00
through 0x1F. A '?' maps to the DEL character. On EBCDIC systems only
'@@', the letters, '[', '\', ']', '^', '_' and '?' will work, resulting
in 0x00 through 0x1F and 0x7F.

C<\N{U+I<wide hex char>}> means the Unicode character whose Unicode ordinal
number is I<wide hex char>.
For documentation of C<\N{name}>, see L<charnames>.
d1497 1
a1497 1
X<\l> X<\u> X<\L> X<\U> X<\E> X<\Q>
d1499 27
a1525 12
    \l		lowercase next char
    \u		uppercase next char
    \L		lowercase till \E
    \U		uppercase till \E
    \E		end case modification
    \Q		quote non-word characters till \E

If C<use locale> is in effect, the case map used by C<\l>, C<\L>,
C<\u> and C<\U> is taken from the current locale.  See L<perllocale>.
If Unicode (for example, C<\N{}> or wide hex characters of 0x100 or
beyond) is being used, the case map used by C<\l>, C<\L>, C<\u> and
C<\U> is as defined by Unicode.
d1532 3
a1534 2
on a Mac, these are reversed, and on systems without line terminator,
printing C<"\n"> may emit no actual data.  In general, use C<"\n"> when
d1551 22
a1572 8
C<join $", @@array>.    "Punctuation" arrays such as C<@@*> are only
interpolated if the name is enclosed in braces C<@@{*}>, but special
arrays C<@@_>, C<@@+>, and C<@@-> are interpolated, even without braces.

You cannot include a literal C<$> or C<@@> within a C<\Q> sequence.
An unescaped C<$> or C<@@> interpolates the corresponding variable,
while escaping will cause the literal string C<\$> to be inserted.
You'll need to write something like C<m/\Quser\E\@@\Qhost/>.
d1594 1
a1594 1
=item qr/STRING/msixpo
d1601 1
a1601 1
corresponding C</STRING/msixpo> expression. The returned value is a
d1603 4
a1606 2
a string containing the same characters: C<ref(qr/x/)> returns "Regexp",
even though dereferencing the result returns undef.
d1625 1
a1625 1
Since Perl may compile the pattern at the moment of execution of qr()
d1647 1
a1647 1
Options are:
d1656 6
d1664 1
a1664 1
of 'msixp' will be propagated appropriately.  The effect of the 'o'
d1668 5
d1674 3
a1676 1
for a detailed look at the semantics of regular expressions.
d1678 1
a1678 1
=item m/PATTERN/msixpogc
d1683 1
a1683 1
=item /PATTERN/msixpogc
d1690 1
a1690 3
rather tightly.)  See also L<perlre>.  See L<perllocale> for
discussion of additional considerations that apply when C<use locale>
is in effect.
d1692 1
a1692 1
Options are as described in C<qr//>; in addition, the following match
d1695 2
a1696 2
    g	Match globally, i.e., find all occurrences.
    c	Do not reset search position on a failed match when /g is in effect.
d1699 1
a1699 1
you can use any pair of non-whitespace characters
d1702 2
a1703 1
the delimiter, then the match-only-once rule of C<?PATTERN?> applies.
d1708 2
a1709 2
PATTERN may contain variables, which will be interpolated (and the
pattern recompiled) every time the pattern search is evaluated, except
d1712 28
a1739 6
If you want such a pattern to be compiled only once, add a C</o> after
the trailing delimiter.  This avoids expensive run-time recompilations,
and is useful when the value you are interpolating won't change over
the life of the script.  However, mentioning C</o> constitutes a promise
that you won't change the variables in the pattern.  If you change them,
Perl won't even notice.  See also L<"qr/STRING/msixpo">.
d1745 1
a1745 1
case, only the C<g> and C<c> flags on the empty pattern is honoured -
d1763 1
a1763 1
pattern, i.e., (C<$1>, C<$2>, C<$3>...).  (Note that here C<$1> etc. are
d1771 3
a1773 1
    open(TTY, '/dev/tty');
d1783 1
a1783 1
	print if /$arg/o;	# compile only once
d1790 2
a1791 2
$Etc.  The conditional is true if any variables were assigned, i.e., if
the pattern matched.
d1794 2
a1795 2
matching as many times as possible within the string.  How it behaves
depends on the context.  In list context, it returns a list of the
d1797 1
a1797 1
expression.  If there are no parentheses, it returns a list of all
d1803 2
a1804 2
The position after the last match can be read or set using the pos()
function; see L<perlfunc/pos>.   A failed match normally resets the
d1806 1
a1806 1
by adding the C</c> modifier (e.g. C<m//gc>).  Modifying the target
d1812 9
a1820 7
zero-width assertion that matches the exact position where the previous
C<m//g>, if any, left off.  Without the C</g> modifier, the C<\G> assertion
still anchors at pos(), but the match is of course only attempted once.
Using C<\G> without C</g> on a target string that has not previously had a
C</g> match applied to it is the same as using the C<\A> assertion to match
the beginning of the string.  Note also that, currently, C<\G> is only
properly supported when anchored at the very beginning of the pattern.
d1828 3
a1830 3
    $/ = "";
    while (defined($paragraph = <>)) {
	while ($paragraph =~ /[a-z]['")]*[.!?]+['")]*\s/g) {
d1834 26
a1859 1
    print "$sentences\n";
a1860 1
    # using m//gc with \G
d1885 2
a1886 2
final match did indeed match C<p>, it's a good bet that you're running an
older (pre-5.6.0) Perl.
d1894 1
a1894 1
      $url = URI::URL->new( "http://example.com/" ); die if $url eq "xXx";
d1896 11
a1906 11
 LOOP:
    {
      print(" digits"),		redo LOOP if /\G\d+\b[,.;]?\s*/gc;
      print(" lowercase"),	redo LOOP if /\G[a-z]+\b[,.;]?\s*/gc;
      print(" UPPERCASE"),	redo LOOP if /\G[A-Z]+\b[,.;]?\s*/gc;
      print(" Capitalized"),	redo LOOP if /\G[A-Z][a-z]+\b[,.;]?\s*/gc;
      print(" MiXeD"),		redo LOOP if /\G[A-Za-z]+\b[,.;]?\s*/gc;
      print(" alphanumeric"),	redo LOOP if /\G[A-Za-z0-9]+\b[,.;]?\s*/gc;
      print(" line-noise"),	redo LOOP if /\G[^A-Za-z0-9]+/gc;
      print ". That's all!\n";
    }
d1910 7
a1916 4
 line-noise lowercase line-noise lowercase UPPERCASE line-noise
 UPPERCASE line-noise lowercase line-noise lowercase line-noise
 lowercase lowercase line-noise lowercase lowercase line-noise
 MiXeD line-noise. That's all!
d1918 1
a1918 2
=item ?PATTERN?
X<?>
d1920 2
a1921 2
This is just like the C</pattern/> search, except that it matches only
once between calls to the reset() operator.  This is a useful
d1923 1
a1923 1
something in each file of a set of files, for instance.  Only C<??>
d1927 1
a1927 1
	if (?^$?) {
d1931 1
a1931 1
	reset if eof;	    # clear ?? status for next file
d1934 4
a1937 3
This usage is vaguely deprecated, which means it just might possibly
be removed in some distant future version of Perl, perhaps somewhere
around the year 2168.
d1939 9
a1947 1
=item s/PATTERN/REPLACEMENT/msixpogce
d1949 1
a1949 1
X<regexp, substitute> X</m> X</s> X</i> X</x> X</p> X</o> X</g> X</c> X</e>
d1955 7
d1963 4
a1966 3
variable is searched and modified.  (The string specified with C<=~> must
be scalar variable, an array element, a hash element, or an assignment
to one of those, i.e., an lvalue.)
a1975 2
See L<perllocale> for discussion of additional considerations that apply
when C<use locale> is in effect.
d1981 2
a1982 1
    ee  Evaluate the right side as a string then eval the result
d1990 1
a1990 1
its own pair of quotes, which may or may not be bracketing quotes, e.g.,
d2006 5
d2023 4
d2034 3
d2071 8
d2154 3
a2156 3
    open BLAM, "blam" || die "Can't open: $!";
    open STDIN, "<&BLAM";
    print `sort`;
d2158 1
a2158 1
will print the sorted contents of the file "blam".
d2177 2
a2178 2
separator character, if your shell supports that (e.g. C<;> on many Unix
shells; C<&> on the Windows NT C<cmd> shell).
d2209 1
a2209 1
    split(' ', q/STRING/);
d2219 1
a2219 1
    'foo', 'bar', 'baz'
d2231 1
a2231 2

=item tr/SEARCHLIST/REPLACEMENTLIST/cds
d2234 1
a2234 1
=item y/SEARCHLIST/REPLACEMENTLIST/cds
d2239 11
a2249 3
specified via the =~ or !~ operator, the $_ string is transliterated.  (The
string specified with =~ must be a scalar variable, an array element, a
hash element, or an assignment to one of those, i.e., an lvalue.)
d2255 2
a2256 2
its own pair of quotes, which may or may not be bracketing quotes,
e.g., C<tr[A-Z][a-z]> or C<tr(+\-*/)/ABCD/>.
d2258 8
a2265 5
Note that C<tr> does B<not> do regular expression character classes
such as C<\d> or C<[:lower:]>.  The C<tr> operator is not equivalent to
the tr(1) utility.  If you want to map strings between lower/upper
cases, see L<perlfunc/lc> and L<perlfunc/uc>, and in general consider
using the C<s> operator if you need regular expressions.
d2279 2
d2300 1
a2300 1
    $ARGV[1] =~ tr/A-Z/a-z/;	# canonicalize to lower case
d2311 4
d2318 3
d2322 1
a2322 1
       [\000-\177];		# delete 8th bit
d2384 11
d2471 2
a2472 2
Additionally, the quoting rules for the end of string identifier are not
related to Perl's quoting rules. C<q()>, C<qq()>, and the like are not
d2540 1
a2540 1
and C<\\> are skipped. For example, while searching for terminating C</>,
d2547 3
a2549 2
During the search for the end, backslashes that escape delimiters
are removed (exactly speaking, they are not copied to the safe location).
d2556 1
a2556 1
If the left part is delimited by bracketing punctuations (that is C<()>,
d2558 1
a2558 1
delimiters such as C<s(){}> and C<tr[]//>.  In these cases, whitespaces
d2560 2
a2561 2
at least one whitespace; otherwise a character expected as the start of
the comment may be regarded as the starting delimiter of the right part.
d2623 1
a2623 1
C<\Q>, C<\U>, C<\u>, C<\L>, C<\l> (possibly paired with C<\E>) are
d2674 1
a2674 1
Processing of C<\Q>, C<\U>, C<\u>, C<\L>, C<\l>, and interpolation
d2685 1
a2685 1
Processing of C<\Q>, C<\U>, C<\u>, C<\L>, C<\l>, C<\E>,
d2841 2
a2842 1
This also behaves similarly, but avoids $_ :
d2848 2
a2849 2
defined.  The defined test avoids problems where line has a string
value that would be treated as false by Perl, for example a "" or
d2856 1
a2856 1
In other boolean contexts, C<< <filehandle> >> without an
d2878 3
a2880 1
behavior of B<sed> and B<awk>.  Input from <> comes either from
d2954 1
a2954 1
If what the angle brackets contain is a simple scalar variable (e.g.,
d3005 2
a3006 1
because legal glob returns (e.g. a file called F<0>) would otherwise
d3037 3
a3039 2
    'Now is the time for all' . "\n" .
	'good men to come to.'
d3048 1
a3048 1
the compiler will precompute the number which that expression
d3055 1
a3055 1
C<0> and C<1> are special-cased to not produce a warning in a void
d3103 3
a3105 3
you may tell the compiler that it's okay to use integer operations
(if it feels like it) from here to the end of the enclosing BLOCK.
An inner BLOCK may countermand this by saying
d3110 4
a3113 4
mean everything is only an integer, merely that Perl may use integer
operations if it is so inclined.  For example, even under C<use
integer>, if you take the C<sqrt(2)>, you'll still get C<1.4142135623731>
or so.
d3125 1
d3171 2
a3172 1
The standard Math::BigInt and Math::BigFloat modules provide
d3178 20
a3197 10
    use Math::BigInt;
    $x = Math::BigInt->new('123456789123456789');
    print $x * $x;

    # prints +15241578780673678515622620750190521

There are several modules that let you calculate with (bound only by
memory and cpu-time) unlimited or fixed precision. There are also
some non-standard modules that provide faster implementations via
external C libraries.
d3201 11
a3211 11
	Math::Fraction		big, unlimited fractions like 9973 / 12967
	Math::String		treat string sequences like numbers
	Math::FixedPrecision	calculate with a fixed precision
	Math::Currency		for currency calculations
	Bit::Vector		manipulate bit vectors fast (uses C)
	Math::BigIntFast	Bit::Vector wrapper for big numbers
	Math::Pari		provides access to the Pari C library
	Math::BigInteger	uses an external C library
	Math::Cephes		uses external Cephes C library (no big numbers)
	Math::Cephes::Fraction	fractions via the Cephes library
	Math::GMP		another one using an external C library
@


1.15
log
@Merge in some local changes that got lost.
@
text
@d559 2
a560 2
The range operator also works on strings, using the magical auto-increment,
see below.
d563 4
a566 3
bistable, like a flip-flop, and emulates the line-range (comma) operator
of B<sed>, B<awk>, and various editors.  Each ".." operator maintains its
own boolean state.  It is false as long as its left operand is false.
d569 5
a573 5
again.  It doesn't become false till the next time the range operator is
evaluated.  It can test the right operand and become false on the same
evaluation it became true (as in B<awk>), but it still returns true once.
If you don't want it to test the right operand till the next
evaluation, as in B<sed>, just use three dots ("...") instead of
d580 6
a585 7
false, or a sequence number (beginning with 1) for true.  The
sequence number is reset for each range encountered.  The final
sequence number in a range has the string "E0" appended to it, which
doesn't affect its numeric value, but gives you something to search
for if you want to exclude the endpoint.  You can exclude the
beginning point by waiting for the sequence number to be greater
than 1.
d816 61
d1029 1
d1039 7
a1045 2
B<NOTE>: Unlike C and other languages, Perl has no \v escape sequence for
the vertical tab (VT - ASCII 11), but you may use C<\ck> or C<\x0b>.
d1047 1
a1047 1
The following escape sequences are available in constructs that interpolate
d1062 1
a1062 2
C<\U> is as defined by Unicode.  For documentation of C<\N{name}>,
see L<charnames>.
d1208 1
a1208 1
you can use any pair of non-alphanumeric, non-whitespace characters
d1213 2
d1342 1
a1342 1
did not update C<pos> -- C<pos> is only updated on a C</g> match. If the
d1352 1
a1352 1
      $url = URI::URL->new( "http://www/" );   die if $url eq "xXx";
d1424 7
a1430 7
Any non-alphanumeric, non-whitespace delimiter may replace the
slashes.  If single quotes are used, no interpretation is done on the
replacement string (the C</e> modifier overrides this, however).  Unlike
Perl 4, Perl 5 treats backticks as normal delimiters; the replacement
text is not evaluated as a command.  If the
PATTERN is delimited by bracketing quotes, the REPLACEMENT has its own
pair of quotes, which may or may not be bracketing quotes, e.g.,
d1862 1
a1862 1
related to Perl's quoting rules -- C<q()>, C<qq()>, and the like are not
d2077 5
d2131 1
a2131 1
but this one happens at run time--although it may be optimized to
d2244 2
a2245 2
In other boolean contexts, C<< <I<filehandle>> >> without an
explicit C<defined> test or comparison elicit a warning if the
d2290 1
a2290 1
internally--<> is just a synonym for <ARGV>, which
d2524 2
a2525 2
Testing for exact equality of floating-point equality or inequality is
not a good idea.  Here's a (relatively expensive) work-around to compare
@


1.14
log
@Merge in perl 5.10.1
@
text
@d954 1
d1012 1
a1012 1
X<\n> X<\r> X<\r\n>
@


1.13
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@d263 3
a265 1
Binary "%" computes the modulus of two numbers.  Given integer
d267 1
a267 1
C<$a> minus the largest multiple of C<$b> that is not greater than
d278 1
a278 1
integer that makes C<$r> should have the same sign as the right operand
d282 1
a282 1
to the modulus operator as implemented by your C compiler.  This
d285 1
a285 1
X<%> X<remainder> X<modulus> X<mod>
a451 2
This operator is only available if you enable the "~~" feature:
see L<feature> for more information.
d605 1
a605 1
                               #   if ($. == 101 .. $. == 200) ...
d608 1
a608 1
                               #   ... if ($. == 1 .. /^$/);
d618 1
a618 1
            # ...
d620 1
a620 1
            # ...
d786 11
a796 4
The C<< => >> operator is a synonym for the comma, but forces any word
(consisting entirely of word characters) to its left to be interpreted
as a string (as of 5.001).  This includes words that might otherwise be
considered a constant or function call.
a809 3
If the argument on the left is not a word, it is first interpreted as
an expression, and then the string value of that is used.

a953 1
X<\t> X<\r> X<\f> X<\b> X<\a> X<\e> X<\x> X<\0> X<\c> X<\N>
d1011 1
a1011 1
X<\r>
d1158 2
d1176 2
d1224 2
d2219 12
@


1.12
log
@Remove index entries for \n since nroff will try to expand this.
No one uses the index entries anyway...
@
text
@d8 1
a8 1
=head2 Operator Precedence and Associativity 
d44 1
a44 1
    nonassoc	== != <=> eq ne cmp
d48 1
a48 1
    left	||
d122 1
a122 1
as well as L<"I/O Operators">.
d153 1
a153 1
incremented or decremented. You just know it will be done sometime 
d203 1
a203 1
non-alphabetic character (exluding "+" or "-"), Perl will attempt to convert
d239 1
a239 1
operator.  See L</"Regexp Quote-Like Operators"> for details and 
d244 6
a249 1
time.
d268 11
a278 1
result will be less than or equal to zero). 
d448 6
d499 13
a511 1
The C<||> and C<&&> operators return the last value evaluated
d515 2
a516 2
    $home = $ENV{'HOME'} || $ENV{'LOGDIR'} ||
	(getpwuid($<))[7] || die "You're homeless!\n";
d526 3
a528 3
control flow, Perl provides C<and> and C<or> operators (see below).
The short-circuit behavior is identical.  The precedence of "and" and
"or" is much lower, however, so that you can safely use them after a
d664 17
a680 4
to get dates with leading zeros.  If the final value specified is not
in the sequence that the magical increment would produce, the sequence
goes until the next value would be longer than the final value
specified.
d729 1
a729 1
X<<< <<= >>> X<&&=> X<-=> X</=> X<|=> X<<< >>= >>> X<||=> X<.=>
d748 1
a748 1
           .=    %=    ^=
d783 2
a784 1
both its arguments into the list.
d840 2
a841 2
=head2 Logical or and Exclusive Or
X<operator, logical, or> X<operator, logical, xor> X<operator, logical, err>
d843 1
a843 1
X<or> X<xor> X<err>
d866 1
a866 1
Then again, you could always use parentheses. 
d895 1
a895 1
X<operator, quote> X<operator, quote-like> X<q> X<qq> X<qx> X<qw> X<m> 
d949 1
d959 4
a962 4
    \033	octal char	(ESC)
    \x1b	hex char	(ESC)
    \x{263a}	wide hex char	(SMILEY)
    \c[		control char    (ESC)
d965 8
d974 1
a974 1
the vertical tab (VT - ASCII 11).
d1017 3
a1019 2
C<join $", @@array>.    "Punctuation" arrays such as C<@@+> are only
interpolated if the name is enclosed in braces C<@@{+}>.
d1021 2
a1022 2
You cannot include a literal C<$> or C<@@> within a C<\Q> sequence. 
An unescaped C<$> or C<@@> interpolates the corresponding variable, 
d1024 1
a1024 1
You'll need to write something like C<m/\Quser\E\@@\Qhost/>. 
d1046 28
a1073 2
=item ?PATTERN?
X<?>
d1075 3
a1077 5
This is just like the C</pattern/> search, except that it matches only
once between calls to the reset() operator.  This is a useful
optimization when you want to see only the first occurrence of
something in each file of a set of files, for instance.  Only C<??>
patterns local to the current package are reset.
d1079 10
a1088 6
    while (<>) {
	if (?^$?) {
			    # blank line between header and body
	}
    } continue {
	reset if eof;	    # clear ?? status for next file
d1091 23
a1113 3
This usage is vaguely deprecated, which means it just might possibly
be removed in some distant future version of Perl, perhaps somewhere
around the year 2168.
d1115 4
a1118 4
=item m/PATTERN/cgimosx
X<m> X<operator, match> 
X<regexp, options> X<regexp> X<regex, options> X<regex> 
X</c> X</i> X</m> X</o> X</s> X</x>
d1120 1
a1120 1
=item /PATTERN/cgimosx
d1131 2
a1132 1
Options are:
d1134 1
a1135 6
    g	Match globally, i.e., find all occurrences.
    i	Do case-insensitive pattern matching.
    m	Treat string as multiple lines.
    o	Compile pattern only once.
    s	Treat string as single line.
    x	Use extended regular expressions.
d1138 1
a1138 1
you can use any pair of non-alphanumeric, non-whitespace characters 
d1153 1
a1153 1
Perl won't even notice.  See also L<"qr/STRING/imosx">.
d1162 9
d1274 1
a1274 1
      $url = new URI::URL "http://www/";   die if $url eq "xXx";
d1295 133
d1429 1
a1429 1
X<q> X<quote, double> X<'> X<''>
d1431 1
a1431 1
=item C<'STRING'>
a1452 58
=item qr/STRING/imosx
X<qr> X</i> X</m> X</o> X</s> X</x>

This operator quotes (and possibly compiles) its I<STRING> as a regular
expression.  I<STRING> is interpolated the same way as I<PATTERN>
in C<m/PATTERN/>.  If "'" is used as the delimiter, no interpolation
is done.  Returns a Perl value which may be used instead of the
corresponding C</STRING/imosx> expression.

For example,

    $rex = qr/my.STRING/is;
    s/$rex/foo/;

is equivalent to

    s/my.STRING/foo/is;

The result may be used as a subpattern in a match:

    $re = qr/$pattern/;
    $string =~ /foo${re}bar/;	# can be interpolated in other patterns
    $string =~ $re;		# or used standalone
    $string =~ /$re/;		# or this way

Since Perl may compile the pattern at the moment of execution of qr()
operator, using qr() may have speed advantages in some situations,
notably if the result of qr() is used standalone:

    sub match {
	my $patterns = shift;
	my @@compiled = map qr/$_/i, @@$patterns;
	grep {
	    my $success = 0;
	    foreach my $pat (@@compiled) {
		$success = 1, last if /$pat/;
	    }
	    $success;
	} @@_;
    }

Precompilation of the pattern into an internal representation at
the moment of qr() avoids a need to recompile the pattern every
time a match C</$pat/> is attempted.  (Perl has many other internal
optimizations, but none would be triggered in the above example if
we did not use qr() operator.)

Options are:

    i	Do case-insensitive pattern matching.
    m	Treat string as multiple lines.
    o	Compile pattern only once.
    s	Treat string as single line.
    x	Use extended regular expressions.

See L<perlre> for additional information on valid syntax for STRING, and
for a detailed look at the semantics of regular expressions.

d1493 9
d1542 1
a1542 1
See L<"I/O Operators"> for more discussion.
d1570 1
a1570 1
C<use warnings> pragma and the B<-w> switch (that is, the C<$^W> variable) 
a1572 108
=item s/PATTERN/REPLACEMENT/egimosx
X<substitute> X<substitution> X<replace> X<regexp, replace>
X<regexp, substitute> X</e> X</g> X</i> X</m> X</o> X</s> X</x>

Searches a string for a pattern, and if found, replaces that pattern
with the replacement text and returns the number of substitutions
made.  Otherwise it returns false (specifically, the empty string).

If no string is specified via the C<=~> or C<!~> operator, the C<$_>
variable is searched and modified.  (The string specified with C<=~> must
be scalar variable, an array element, a hash element, or an assignment
to one of those, i.e., an lvalue.)

If the delimiter chosen is a single quote, no interpolation is
done on either the PATTERN or the REPLACEMENT.  Otherwise, if the
PATTERN contains a $ that looks like a variable rather than an
end-of-string test, the variable will be interpolated into the pattern
at run-time.  If you want the pattern compiled only once the first time
the variable is interpolated, use the C</o> option.  If the pattern
evaluates to the empty string, the last successfully executed regular
expression is used instead.  See L<perlre> for further explanation on these.
See L<perllocale> for discussion of additional considerations that apply
when C<use locale> is in effect.

Options are:

    e	Evaluate the right side as an expression.
    g	Replace globally, i.e., all occurrences.
    i	Do case-insensitive pattern matching.
    m	Treat string as multiple lines.
    o	Compile pattern only once.
    s	Treat string as single line.
    x	Use extended regular expressions.

Any non-alphanumeric, non-whitespace delimiter may replace the
slashes.  If single quotes are used, no interpretation is done on the
replacement string (the C</e> modifier overrides this, however).  Unlike
Perl 4, Perl 5 treats backticks as normal delimiters; the replacement
text is not evaluated as a command.  If the
PATTERN is delimited by bracketing quotes, the REPLACEMENT has its own
pair of quotes, which may or may not be bracketing quotes, e.g.,
C<s(foo)(bar)> or C<< s<foo>/bar/ >>.  A C</e> will cause the
replacement portion to be treated as a full-fledged Perl expression
and evaluated right then and there.  It is, however, syntax checked at
compile-time. A second C<e> modifier will cause the replacement portion
to be C<eval>ed before being run as a Perl expression.

Examples:

    s/\bgreen\b/mauve/g;		# don't change wintergreen

    $path =~ s|/usr/bin|/usr/local/bin|;

    s/Login: $foo/Login: $bar/; # run-time pattern

    ($foo = $bar) =~ s/this/that/;	# copy first, then change

    $count = ($paragraph =~ s/Mister\b/Mr./g);  # get change-count

    $_ = 'abc123xyz';
    s/\d+/$&*2/e;		# yields 'abc246xyz'
    s/\d+/sprintf("%5d",$&)/e;	# yields 'abc  246xyz'
    s/\w/$& x 2/eg;		# yields 'aabbcc  224466xxyyzz'

    s/%(.)/$percent{$1}/g;	# change percent escapes; no /e
    s/%(.)/$percent{$1} || $&/ge;	# expr now, so /e
    s/^=(\w+)/&pod($1)/ge;	# use function call

    # expand variables in $_, but dynamics only, using
    # symbolic dereferencing
    s/\$(\w+)/${$1}/g;

    # Add one to the value of any numbers in the string
    s/(\d+)/1 + $1/eg;

    # This will expand any embedded scalar variable
    # (including lexicals) in $_ : First $1 is interpolated
    # to the variable name, and then evaluated
    s/(\$\w+)/$1/eeg;

    # Delete (most) C comments.
    $program =~ s {
	/\*	# Match the opening delimiter.
	.*?	# Match a minimal number of characters.
	\*/	# Match the closing delimiter.
    } []gsx;

    s/^\s*(.*?)\s*$/$1/;	# trim whitespace in $_, expensively

    for ($variable) {		# trim whitespace in $variable, cheap
	s/^\s+//;
	s/\s+$//;
    }

    s/([^ ]*) *([^ ]*)/$2 $1/;	# reverse 1st two fields

Note the use of $ instead of \ in the last example.  Unlike
B<sed>, we use the \<I<digit>> form in only the left hand side.
Anywhere else it's $<I<digit>>.

Occasionally, you can't use just a C</g> to get all the changes
to occur that you might want.  Here are two common cases:

    # put commas in the right places in an integer
    1 while s/(\d)(\d\d\d)(?!\d)/$1,$2/g;  

    # expand tabs to 8-column spacing
    1 while s/\t+/' ' x (length($&)*8 - length($`)%8)/e;
d1586 1
a1586 1
A character range may be specified with a hyphen, so C<tr/A-J/0-9/> 
d1594 1
a1594 1
such as C<\d> or C<[:lower:]>.  The <tr> operator is not equivalent to
d1670 19
a1688 9
the terminating string are the value of the item.  The terminating
string may be either an identifier (a word), or some quoted text.  If
quoted, the type of quotes you use determines the treatment of the
text, just as in regular quoting.  An unquoted identifier works like
double quotes.  There must be no space between the C<< << >> and
the identifier, unless the identifier is quoted.  (If you put a space it
will be treated as a null identifier, which is valid, and matches the first
empty line.)  The terminating string must appear by itself (unquoted and
with no surrounding whitespace) on the terminating line.
d1698 21
a1718 1
       print << `EOC`; # execute commands
a1719 1
    echo lo there
d1722 4
d1748 9
a1756 3
If you want your here-docs to be indented with the 
rest of the code, you'll need to remove leading whitespace
from each line manually:
d1759 1
a1759 1
       The Road goes ever on and on, 
d1774 4
a1777 4
    s/this/<<E . 'that' 
     . 'more '/eg; 
    the other 
    E 
d1783 4
a1786 4
Additionally, the quoting rules for the identifier are not related to
Perl's quoting rules -- C<q()>, C<qq()>, and the like are not supported
in place of C<''> and C<"">, and the only interpolation is for backslashing
the quoting character:
d1823 1
a1823 1
one to five, but these passes are always performed in the same order.
d1829 32
a1860 12
The first pass is finding the end of the quoted construct, whether
it be a multicharacter delimiter C<"\nEOF\n"> in the C<<<EOF>
construct, a C</> that terminates a C<qq//> construct, a C<]> which
terminates C<qq[]> construct, or a C<< > >> which terminates a
fileglob started with C<< < >>.

When searching for single-character non-pairing delimiters, such
as C</>, combinations of C<\\> and C<\/> are skipped.  However,
when searching for single-character pairing delimiter like C<[>,
combinations of C<\\>, C<\]>, and C<\[> are all skipped, and nested
C<[>, C<]> are skipped as well.  When searching for multicharacter
delimiters, nothing is skipped.
d1864 9
d1881 1
a1881 1
    m/ 
d1891 3
a1893 3
Also no attention is paid to C<\c\> during this search.
Thus the second C<\> in C<qq/\c\/> is interpreted as a part of C<\/>,
and the following C</> is not recognized as a delimiter.
a1895 12
=item Removal of backslashes before delimiters

During the second pass, text between the starting and ending
delimiters is copied to a safe location, and the C<\> is removed
from combinations consisting of C<\> and delimiter--or delimiters,
meaning both starting and ending delimiters will should these differ.
This removal does not happen for multi-character delimiters.
Note that the combination C<\\> is left intact, just as it was.

Starting from this step no information about the delimiters is
used in parsing.

d1900 1
a1900 1
delimiter-independent.  There are four different cases.
d1904 1
a1904 1
=item C<<<'EOF'>, C<m''>, C<s'''>, C<tr///>, C<y///>
d1907 2
d1910 1
a1910 1
=item C<''>, C<q//>
d1912 3
a1914 1
The only interpolation is removal of C<\> from pairs C<\\>.
d1916 17
a1932 1
=item C<"">, C<``>, C<qq//>, C<qx//>, C<< <file*glob> >>
d1937 3
a1939 1
The other combinations are replaced with appropriate expansions.
d1968 1
a1968 1
where the interpolated scalar ends.  For instance, whether 
d1983 1
a1983 1
=item C<?RE?>, C</RE/>, C<m/RE/>, C<s/RE/foo/>, 
d1986 21
a2006 3
happens (almost) as with C<qq//> constructs, but the substitution
of C<\> followed by RE-special chars (including C<\>) is not
performed.  Moreover, inside C<(?{BLOCK})>, C<(?# comment )>, and
d2011 4
a2014 4
Interpolation has several quirks: C<$|>, C<$(>, and C<$)> are not
interpolated, and constructs C<$var[SOMETHING]> are voted (by several
different estimators) to be either an array element or C<$var>
followed by an RE alternative.  This is where the notation
a2020 6
It is at this step that C<\1> is begrudgingly converted to C<$1> in
the replacement text of C<s///> to correct the incorrigible
I<sed> hackers who haven't picked up the saner idiom yet.  A warning
is emitted if the C<use warnings> pragma or the B<-w> command-line flag
(that is, the C<$^W> variable) was set.

d2034 2
a2035 2
delimiter is C<m>, the modifier is C<mx>, and after backslash-removal the
RE is the same as for C<m/ ^ a \s* b /mx>.  There's more than one 
d2044 2
a2045 2
=item Interpolation of regular expressions
X<regexp, interpolation>
d2050 1
a2050 1
described above, and possibly after evaluation if catenation,
d2149 1
a2149 1
    while (my $line = <STDIN>) { print $line }    
d2162 1
a2162 1
explicit C<defined> test or comparison elicit a warning if the 
d2216 1
a2216 1
If you want to set @@ARGV to your own list of files, go right ahead.  
d2241 2
a2242 2
The <> symbol will return C<undef> for end-of-file only once.  
If you call it again after this, it will assume you are processing another 
d2362 1
a2362 1
    # ASCII-based examples 
d2405 1
a2405 1
and ">>") always produce integral results.  (But see also 
d2410 1
a2410 1
integral value.  However, C<use integer; ~0> is C<-1> on twos-complement
@


1.11
log
@merge in perl 5.8.8
@
text
@d902 1
a902 1
X<\t> X<\n> X<\r> X<\f> X<\b> X<\a> X<\e> X<\x> X<\0> X<\c> X<\N>
d952 1
a952 1
X<\n> X<\r> X<\r\n>
@


1.10
log
@sync in-tree perl with 5.8.6
@
text
@d2 1
d8 2
a9 1
=head2 Operator Precedence and Associativity
d63 1
d125 1
d141 1
d183 1
d191 1
d195 1
d202 6
a207 1
to "-bareword".
d215 1
d221 1
d227 1
d230 1
d250 1
d253 1
d256 1
d268 1
d274 4
a277 3
parentheses, it repeats the list.  If the right operand is zero or
negative, it returns an empty string or an empty list, depending on the
context.
d288 1
d291 1
d294 1
d297 2
d301 3
d326 1
d358 1
d363 1
d367 1
d371 1
d375 1
d379 1
d383 1
d387 1
d391 1
d395 1
d398 1
d402 1
d406 1
d415 1
d417 2
a418 2
    perl -le '$a = NaN; print "No NaN support here" if $a == $a'
    perl -le '$a = NaN; print "NaN support here" if $a != $a'
d422 1
d426 1
d431 1
d437 1
d448 2
d463 1
d471 1
d509 1
d573 2
a574 1
    next line if (1 .. /^$/);  # skip header lines, short for
d576 3
a578 1
    s/^/> / if (/^$/ .. eof());	# quote body
d601 2
a602 4
    foreach(@@lines)
    {
        if (/0/ .. /1/)
        {
d607 2
a608 2
This program will print only the line containing "Bar". If 
the range operator is changed to C<...>, it will also print the 
d642 1
d682 3
d703 1
a703 1
	         x=
d730 1
d740 24
a763 3
to its left to be interpreted as a string (as of 5.001). It is helpful
in documenting the correspondence between keys and values in hashes,
and other paired elements in lists.
d766 1
d780 1
d786 1
d794 3
d825 2
d848 4
d858 1
a858 1
any pair of delimiters you choose.  
d875 1
a875 1
that 
d877 1
a877 1
	q{foo{bar}baz} 
d879 1
a879 1
is the same as 
d902 1
d922 1
d951 2
d982 1
d990 1
d1011 3
d1186 1
d1199 1
d1211 1
d1269 1
d1351 1
d1380 2
d1466 1
a1466 1
    s/^\s*(.*?)\s*$/$1/;	# trim white space in $_, expensively
d1468 1
a1468 1
    for ($variable) {		# trim white space in $variable, cheap
d1489 1
d1579 1
d1674 1
d1737 5
d1755 1
d1869 1
d1908 1
d1921 2
d1942 1
d1996 1
d2085 2
a2086 1
not--it's a hash element.
d2142 1
d2165 1
d2174 1
d2197 2
a2198 2
    $foo =  150  |  105 ;	# yields 255  (0x96 | 0x69 is 0xFF)
    $foo = '150' |  105 ;	# yields 255
d2209 1
d2238 1
d2281 1
@


1.9
log
@merge 5.8.5 into HEAD
remove now-unused files
crank libperl shared library major number
update Makefile.bsd-wrapper
tweak openbsd hints file for arm and m68k
@
text
@d193 2
a194 2
is returned.  One effect of these rules is that C<-bareword> is equivalent
to C<"-bareword">.
d222 2
a223 1
operator.  See L</"Regexp Quote-Like Operators"> for details.
d2037 8
@


1.8
log
@merge local changes into perl-5.8.3
@
text
@d147 11
d252 3
a254 1
parentheses, it repeats the list.
d535 21
a555 1
As a list operator:
d1196 2
a1197 2
and safest to redirect them separately to files, and then read from those
files when the program is done:
d1199 1
a1199 1
    system("program args 1>/tmp/program.stdout 2>/tmp/program.stderr");
@


1.7
log
@Resolve conflicts for perl 5.8.2, remove old files, and add OpenBSD-specific scaffolding
@
text
@d789 3
@


1.6
log
@Resolve conflicts, remove old files, merge local changes
@
text
@d5 18
a22 1
=head1 SYNOPSIS
a59 2
=head1 DESCRIPTION

d101 12
a112 2
probably doesn't do what you expect at first glance.  See
L<Named Unary Operators> for more discussion of this.
d138 8
a145 3
"++" and "--" work as in C.  That is, if placed before a variable, they
increment or decrement the variable before returning the value, and if
placed after, increment or decrement the variable after returning the value.
d160 4
d190 1
a190 1
width, remember use the & operator to mask off the excess bits.
d215 1
a215 2
time.  This can be less efficient than an explicit search, because the
pattern must be compiled every time the expression is evaluated.
d232 1
a232 1
Note than when C<use integer> is in scope, "%" gives you direct access
d284 1
a284 2
argument, with optional parentheses.  These include the filetest
operators, like C<-f>, C<-M>, etc.  See L<perlfunc>.
d309 5
d376 1
a376 1
Binary "&" returns its operators ANDed together bit by bit.
d379 5
d386 1
a386 1
Binary "|" returns its operators ORed together bit by bit.
d389 1
a389 1
Binary "^" returns its operators XORed together bit by bit.
d392 5
d411 3
a413 3
The C<||> and C<&&> operators differ from C's in that, rather than returning
0 or 1, they return the last value evaluated.  Thus, a reasonably portable
way to find out the home directory (assuming it's not "0") might be:
d444 1
a444 1
operators depending on the context.  In list context, it returns an
d447 1
a447 1
returns the empty array.  The range operator is useful for writing
d484 16
a499 3
than 1.  If either operand of scalar ".." is a constant expression,
that operand is implicitly compared to the C<$.> variable, the
current line number.  Examples:
d503 4
a506 2
    if (101 .. 200) { print; }	# print 2nd hundred lines
    next line if (1 .. /^$/);	# skip header lines
d512 6
a517 2
        $in_body   = /^$/ .. eof();
	# do something based on those
d519 1
a519 1
	close ARGV if eof; 		# reset $. each file
d547 5
d645 4
a648 3
The => digraph is mostly just a synonym for the comma operator.  It's useful for
documenting arguments that come in pairs.  As of release 5.001, it also forces
any word to the left of it to be interpreted as a string.
d822 2
a823 2
C<$href->{key}[0]> are also interpolated, as are array and hash slices.
But method calls such as C<$obj->meth> are not.
d1215 2
a1216 1
the difference being that it generates a real list at compile time.  So
d1704 1
a1704 1
RE is the same as for C<m/ ^ a s* b /mx>).  There's more than one 
@


1.5
log
@merge in perl 5.6.1 with our local changes
@
text
@d236 12
d398 1
a398 1
array of values counting (up by ones) from the left value to the right
d401 1
a401 1
C<foreach (1..10)> loops and for doing slice operations on arrays.  In
d411 3
d468 1
a468 1
to get all normal letters of the alphabet, or
d664 1
a664 1
	``	qx{}	      Command		  yes (unless '' is delimiter)
d666 3
a668 3
	//	 m{}	   Pattern match	  yes (unless '' is delimiter)
		qr{}	      Pattern		  yes (unless '' is delimiter)
		 s{}{}	    Substitution	  yes (unless '' is delimiter)
d670 3
d688 3
a690 2
is a syntax error. The C<Text::Balanced> module on CPAN is able to do this
properly.
d701 2
a702 3
For constructs that do interpolate, variables beginning with "C<$>"
or "C<@@>" are interpolated, as are the following escape sequences.  Within
a transliteration, the first eleven of these sequences may be used.
d715 4
a718 1
    \N{name}	named char
d727 6
a732 3
If C<use locale> is in effect, the case map used by C<\l>, C<\L>, C<\u>
and C<\U> is taken from the current locale.  See L<perllocale>.  For
documentation of C<\N{name}>, see L<charnames>.
d748 10
d844 5
a848 1
I<successfully> matched regular expression is used instead.
d902 2
a903 1
the beginning of the string.
d1358 92
d1835 1
a1835 1
If angle brackets contain is a simple scalar variable (e.g.,
d1899 1
a1899 1
It you're trying to do variable interpolation, it's definitely better
@


1.4
log
@perl-5.6.0 + local changes
@
text
@d122 1
a122 1
C</^[a-zA-Z]*[0-9]*$/>, the increment is done as a string, preserving each
d199 1
a199 1
Note than when C<use integer> is in scope, "%" give you direct access
d245 2
a246 1
just like a normal function call.  Examples:
d253 1
a253 1
but, because * is higher precedence than ||:
d303 8
a310 1
argument.
d318 3
a320 2
Binary "cmp" returns -1, 0, or 1 depending on whether the left argument is stringwise
less than, equal to, or greater than the right argument.
d719 1
a719 1
and prefer a CR+LF (C<"\012\015"> or C<"\cJ\cM">) for line terminators,
d764 1
a764 1
This usage is vaguely depreciated, which means it just might possibly
d800 2
a801 2
for when the delimiter is a single quote.  (Note that C<$)> and C<$|>
might not be interpolated because they look like end-of-string tests.)
d807 1
a807 1
Perl won't even notice.  See also L<"qr//">.
d860 5
a864 3
C<m//g>, if any, left off.  The C<\G> assertion is not supported without
the C</g> modifier.  (Currently, without C</g>, C<\G> behaves just like
C<\A>, but that's accidental and may change in the future.)
d872 1
a872 1
    $/ = ""; $* = 1;  # $* deprecated in modern perls
d890 1
d900 7
d960 1
a960 1
This operators quotes--and compiles--its I<STRING> as a regular
d1019 8
a1026 7
A string which is (possibly) interpolated and then executed as a system
command with C</bin/sh> or its equivalent.  Shell wildcards, pipes,
and redirections will be honored.  The collected standard output of the
command is returned; standard error is unaffected.  In scalar context,
it comes back as a single (potentially multi-line) string.  In list
context, returns a list of lines (however you've defined lines with $/
or $INPUT_RECORD_SEPARATOR).
d1230 1
a1230 1
=item tr/SEARCHLIST/REPLACEMENTLIST/cdsUC
d1232 1
a1232 1
=item y/SEARCHLIST/REPLACEMENTLIST/cdsUC
d1248 6
a1265 2
    U	Translate to/from UTF-8.
    C	Translate to/from 8-bit char (octet).
a1282 4
The first C</U> or C</C> modifier applies to the left side of the translation.
The second one applies to the right side.  If present, these modifiers override
the current utf8 state.

a1301 3
    tr/\0-\xFF//CU;		# change Latin-1 to Unicode
    tr/\0-\x{FF}//UC;		# change Unicode to Latin-1

d1347 1
a1347 1
=over
d1401 1
a1401 1
=over
d1432 1
a1432 1
C<.> catentation operations.  Thus, C<"$foo XXX '@@arr'"> becomes:
d1566 13
a1578 13
pseudo-literal, j
string consisting of all output is returned.  In list context, a
list of values is returned, one per line of output.  (You can set
C<$/> to use a different line terminator.)  The command is executed
each time the pseudo-literal is evaluated.  The status value of the
command is returned in C<$?> (see L<perlvar> for the interpretation
of C<$?>).  Unlike in B<csh>, no translation is done on the return
data--newlines remain newlines.  Unlike in any of the shells, single
quotes do not hide variable names in the command from interpretation.
To pass a literal dollar-sign through to the shell you need to hide
it with a backslash.  The generalized form of backticks is C<qx//>.
(Because backticks always undergo shell expansion as well, see
L<perlsec> for security concerns.)
d1593 1
a1593 1
script you write.)  The $_ variables is not implicitly localized.
d1738 1
a1738 1
	chop;
d1751 1
a1751 1
the next value each time it's called, or C
d1851 2
a1852 2
and ">>") always produce integral results.  (But see also L<Bitwise
String Operators>.)  However, C<use integer> still has meaning for
d1905 1
a1905 1
they're currently pretty slow.  At the cost of some space and
d1915 20
a1934 3
The non-standard modules SSLeay::BN and Math::Pari provide
equivalent functionality (and much more) with a substantial
performance savings.
@


1.3
log
@perl5.005_03 (stock)
@
text
@d8 5
a12 5
listed from highest precedence to lowest.  Note that all operators
borrowed from C keep the same precedence relationship with each other,
even where C's precedence is slightly screwy.  (This makes learning
Perl easier for C folks.)  With very few exceptions, these all
operate on scalar values only, not array values.
d67 3
a69 3
the commas on the right of the sort are evaluated before the sort, but
the commas on the left are evaluated after.  In other words, list
operators tend to gobble up all the arguments that follow them, and
d71 1
a71 1
Note that you have to be careful with parentheses:
d98 12
a109 10
Just as in C and C++, "C<-E<gt>>" is an infix dereference operator.  If the
right side is either a C<[...]> or C<{...}> subscript, then the left side
must be either a hard or symbolic reference to an array or hash (or
a location capable of holding a hard reference, if it's an lvalue (assignable)).
See L<perlref>.

Otherwise, the right side is a method name or a simple scalar variable
containing the method name, and the left side must either be an object
(a blessed reference) or a class name (that is, a package name).
See L<perlobj>.
d134 1
a134 1
Binary "**" is the exponentiation operator.  Note that it binds even more
d151 6
a156 3
Unary "~" performs bitwise negation, i.e., 1's complement.  For example,
C<0666 &~ 027> is 0640.  (See also L<Integer Arithmetic> and L<Bitwise
String Operators>.)
d163 4
a166 4
Unary "\" creates a reference to whatever follows it.  See L<perlref>.
Do not confuse this behavior with the behavior of backslash within a
string, although both forms do convey the notion of protecting the next
thing from interpretation.
d175 5
a179 2
$_.  The return value indicates the success of the operation.  (If the
right argument is an expression rather than a search pattern,
d181 1
a181 1
time.  This can be is less efficient than an explicit search, because the
d204 5
a208 4
Binary "x" is the repetition operator.  In scalar context, it
returns a string consisting of the left operand repeated the number of
times specified by the right operand.  In list context, if the left
operand is a list in parentheses, it repeats the list.
d268 1
a268 1
Binary "E<lt>" returns true if the left argument is numerically less than
d271 1
a271 1
Binary "E<gt>" returns true if the left argument is numerically greater
d274 1
a274 1
Binary "E<lt>=" returns true if the left argument is numerically less than
d277 1
a277 1
Binary "E<gt>=" returns true if the left argument is numerically greater
d300 1
a300 1
Binary "E<lt>=E<gt>" returns -1, 0, or 1 depending on whether the left
d371 1
a371 1
Use "or" for assignment is unlikely to do what you want; see below.
d377 8
a384 6
array of values counting (by ones) from the left value to the right
value.  This is useful for writing C<foreach (1..10)> loops and for
doing slice operations on arrays.  In the current implementation, no
temporary array is created when the range operator is used as the
expression in C<foreach> loops, but older versions of Perl might burn
a lot of memory when you write something like this:
d396 1
a396 1
again.  (It doesn't become false till the next time the range operator is
d399 17
a415 14
If you don't want it to test the right operand till the next evaluation
(as in B<sed>), use three dots ("...") instead of two.)  The right
operand is not evaluated while the operator is in the "false" state, and
the left operand is not evaluated while the operator is in the "true"
state.  The precedence is a little lower than || and &&.  The value
returned is either the empty string for false, or a sequence number
(beginning with 1) for true.  The sequence number is reset for each range
encountered.  The final sequence number in a range has the string "E0"
appended to it, which doesn't affect its numeric value, but gives you
something to search for if you want to exclude the endpoint.  You can
exclude the beginning point by waiting for the sequence number to be
greater than 1.  If either operand of scalar ".." is a constant expression,
that operand is implicitly compared to the C<$.> variable, the current
line number.  Examples:
d444 1
a444 1
to get all the letters of the alphabet, or
a478 2
This is not necessarily guaranteed to contribute to the readability of your program.

d492 4
d517 1
a517 1
Note that while these are grouped by family, they all have the precedence
d520 4
a523 4
Unlike in C, the assignment operator produces a valid lvalue.  Modifying
an assignment is equivalent to doing the assignment and then modifying
the variable that was assigned to.  This is useful for modifying
a copy of something, like this:
d536 5
d550 1
a550 1
The =E<gt> digraph is mostly just a synonym for the comma operator.  It's useful for
d595 1
a595 1
However, when it's a list context assignment and you're trying to use
d602 1
a602 1
Then again, you could always use parentheses.
d624 1
a624 1
Type casting operator.
d635 1
a635 3
any pair of delimiters you choose.  Non-bracketing delimiters use
the same character fore and aft, but the 4 sorts of brackets
(round, angle, square, curly) will all nest.
d647 18
a664 1
Note that there can be whitespace between the operator and the quoting
d666 3
a668 3
C<q#foo#> is parsed as being the string C<foo>, while C<q #foo#> is the
operator C<q> followed by a comment. Its argument will be taken from the
next line. This allows you to write:
d673 3
a675 3
For constructs that do interpolation, variables beginning with "C<$>"
or "C<@@>" are interpolated, as are the following sequences. Within
a transliteration, the first ten of these sequences may be used.
d686 3
a688 1
    \c[		control char
d698 2
a699 1
and C<\U> is taken from the current locale.  See L<perllocale>.
d703 1
a703 1
newline character.  It is an illusion that the operating system,
d726 5
a730 4
Apart from the above, there are no multiple levels of interpolation.  In
particular, contrary to the expectations of shell programmers, back-quotes
do I<NOT> interpolate within double quotes, nor do single quotes impede
evaluation of variables when used within double quotes.
a736 12
Most of this section is related to use of regular expressions from Perl.
Such a use may be considered from two points of view: Perl handles a
a string and a "pattern" to RE (regular expression) engine to match, 
RE engine finds (or does not find) the match, and Perl uses the findings 
of RE engine for its operation, possibly asking the engine for other matches.

RE engine has no idea what Perl is going to do with what it finds, 
similarly, the rest of Perl has no idea what a particular regular expression 
means to RE engine.  This creates a clean separation, and in this section
we discuss matching from Perl point of view only.  The other point of
view may be found in L<perlre>.

d755 3
a757 2
This usage is vaguely deprecated, and may be removed in some future
version of Perl.
d764 7
a770 7
true (1) or false ('').  If no string is specified via the C<=~> or
C<!~> operator, the $_ string is searched.  (The string specified with
C<=~> need not be an lvalue--it may be the result of an expression
evaluation, but remember the C<=~> binds rather tightly.)  See also
L<perlre>.
See L<perllocale> for discussion of additional considerations that apply
when C<use locale> is in effect.
d784 2
a785 2
as delimiters. This is particularly useful for matching Unix path names
that contain "/", to avoid LTS (leaning toothpick syndrome). If "?" is
d787 1
a787 2
If "'" is the delimiter, no variable interpolation is performed on the
PATTERN.
d798 1
a798 1
Perl won't even notice.
d803 1
a803 1
If the C</g> option is not used, C<m//> in a list context returns a
d833 7
a839 6
The C</g> modifier specifies global pattern matching--that is, matching
as many times as possible within the string.  How it behaves depends on
the context.  In list context, it returns a list of all the
substrings matched by all the parentheses in the regular expression.
If there are no parentheses, it returns a list of all the matched
strings, as if there were parentheses around the whole pattern.
d842 1
a842 1
returning TRUE if it matches, and FALSE if there is no further match.
d852 2
a853 2
the C</g> modifier; currently, without C</g>, C<\G> behaves just like
C<\A>, but that's accidental and may change in the future.
d861 4
a864 6
    {
	local $/ = "";
	while (defined($paragraph = <>)) {
	    while ($paragraph =~ /[a-z]['")]*[.!?]+['")]*\s/g) {
		$sentences++;
	    }
d920 1
a920 1
A single-quoted, literal string. A backslash represents a backslash
d936 1
a936 1
		if /(tcl|rexx|python)/;      # :-)
d939 1
a939 1
=item qr/PATTERN/imosx
d941 5
a945 4
Quote-as-a-regular-expression operator.  I<STRING> is interpolated the
same way as I<PATTERN> in C<m/PATTERN/>.  If "'" is used as the
delimiter, no variable interpolation is done.  Returns a Perl value
which may be used instead of the corresponding C</STRING/imosx> expression.
d964 1
a964 1
operator, using qr() may have speed advantages in I<some> situations,
d972 1
a972 1
	    foreach my $pat @@compiled {
d979 5
a983 5
Precompilation of the pattern into an internal representation at the
moment of qr() avoids a need to recompile the pattern every time a
match C</$pat/> is attempted.  (Note that Perl has many other
internal optimizations, but none would be triggered in the above
example if we did not use qr() operator.)
d1040 1
a1040 1
Note that how the string gets evaluated is entirely subject to the command
d1054 6
d1078 3
a1080 2
Returns a list of the words extracted out of STRING, using embedded
whitespace as the word delimiters.  It is exactly equivalent to
d1084 2
a1085 4
This equivalency means that if used in scalar context, you'll get split's
(unfortunate) scalar context behavior, complete with mysterious warnings.
However do not rely on this as in a future release it could be changed to
be exactly equivalent to the list
d1087 1
a1087 1
    ('foo', 'bar', 'baz')
d1089 3
a1091 1
Which in a scalar context would result in C<'baz'>.
d1098 4
a1101 4
A common mistake is to try to separate the words with comma or to put
comments into a multi-line C<qw>-string.  For this reason the C<-w>
switch produce warnings if the STRING contains the "," or the "#"
character.
d1114 1
a1114 1
If the delimiter chosen is a single quote, no variable interpolation is
d1142 5
a1146 4
C<s(foo)(bar)> or C<sE<lt>fooE<gt>/bar/>.  A C</e> will cause the
replacement portion to be interpreted as a full-fledged Perl expression
and eval()ed right then and there.  It is, however, syntax checked at
compile-time.
d1173 6
a1178 2
    # /e's can even nest;  this will expand
    # any embedded scalar variable (including lexicals) in $_
d1198 2
a1199 2
B<sed>, we use the \E<lt>I<digit>E<gt> form in only the left hand side.
Anywhere else it's $E<lt>I<digit>E<gt>.
d1202 1
a1202 1
to occur.  Here are two common cases:
d1205 1
a1205 2
    1 while s/(.*\d)(\d\d\d)/$1,$2/g;      # perl4
    1 while s/(\d)(\d\d\d)(?!\d)/$1,$2/g;  # perl5
d1210 1
d1212 1
a1212 3
=item tr/SEARCHLIST/REPLACEMENTLIST/cds

=item y/SEARCHLIST/REPLACEMENTLIST/cds
d1240 2
d1243 8
a1250 8
If the C</c> modifier is specified, the SEARCHLIST character set is
complemented.  If the C</d> modifier is specified, any characters specified
by SEARCHLIST not found in REPLACEMENTLIST are deleted.  (Note
that this is slightly more flexible than the behavior of some B<tr>
programs, which delete anything they find in the SEARCHLIST, period.)
If the C</s> modifier is specified, sequences of characters that were
transliterated to the same character are squashed down to a single instance of the
character.
d1259 4
d1282 5
a1286 1
If multiple transliterations are given for a character, only the first one is used:
d1292 1
a1292 1
Note that because the transliteration table is built at compile time, neither
d1294 2
a1295 2
interpolation.  That means that if you want to use variables, you must use
an eval():
d1306 23
a1328 24
When presented with something which may have several different 
interpretations, Perl uses the principle B<DWIM> (expanded to Do What I Mean 
- not what I wrote) to pick up the most probable interpretation of the 
source.  This strategy is so successful that Perl users usually do not
suspect ambivalence of what they write.  However, time to time Perl's ideas
differ from what the author meant.  

The target of this section is to clarify the Perl's way of interpreting
quoted constructs.  The most frequent reason one may have to want to know the 
details discussed in this section is hairy regular expressions.  However, the 
first steps of parsing are the same for all Perl quoting operators, so here
they are discussed together.

The most important detail of Perl parsing rules is the first one
discussed below; when processing a quoted construct, Perl I<first>
finds the end of the construct, then it interprets the contents of the
construct.  If you understand this rule, you may skip the rest of this
section on the first reading.  The other rules would
contradict user's expectations much less frequently than the first one.

Some of the passes discussed below are performed concurrently, but as 
far as results are the same, we consider them one-by-one.  For different
quoting constructs Perl performs different number of passes, from
one to five, but they are always performed in the same order.
d1334 12
a1345 11
First pass is finding the end of the quoted construct, be it 
a multichar delimiter
C<"\nEOF\n"> of C<<<EOF> construct, C</> which terminates C<qq/> construct,
C<]> which terminates C<qq[> construct, or C<E<gt>> which terminates a
fileglob started with C<<>.

When searching for one-char non-matching delimiter, such as C</>, combinations
C<\\> and C<\/> are skipped.  When searching for one-char matching delimiter,
such as C<]>, combinations C<\\>, C<\]> and C<\[> are skipped, and 
nested C<[>, C<]> are skipped as well.  When searching for multichar delimiter
no skipping is performed.  
d1347 2
a1348 2
For constructs with 3-part delimiters (C<s///> etc.) the search is
repeated once more.
d1350 2
a1351 2
During this search no attention is paid to the semantic of the construct,
thus:
d1361 5
a1365 5
do not form legal quoted expressions, the quoted part ends on the first C<">
and C</>, and the rest happens to be a syntax error.  Note that since the slash
which terminated C<m//> was followed by a C<SPACE>, the above is not C<m//x>, 
but rather C<m//> with no 'x' switch.  So the embedded C<#> is interpreted
as a literal C<#>.
d1369 6
a1374 4
During the second pass the text between the starting delimiter and 
the ending delimiter is copied to a safe location, and the C<\> is 
removed from combinations consisting of C<\> and delimiter(s) (both starting
and ending delimiter if they differ).
d1376 2
a1377 6
The removal does not happen for multi-char delimiters.

Note that the combination C<\\> is left as it was!

Starting from this step no information about the delimiter(s) is used in the
parsing.
d1381 2
a1382 2
Next step is interpolation in the obtained delimiter-independent text.
There are four different cases.
d1394 1
a1394 6
=item C<"">, C<``>, C<qq//>, C<qx//>, C<<file*globE<gt>>

C<\Q>, C<\U>, C<\u>, C<\L>, C<\l> (possibly paired with C<\E>) are converted
to corresponding Perl constructs, thus C<"$foo\Qbaz$bar"> is converted to :

   $foo . (quotemeta("baz" . $bar));
d1396 12
a1407 13
Other combinations of C<\> with following chars are substituted with
appropriate expansions.

Let it be stressed that I<whatever is between C<\Q> and C<\E>> is interpolated
in the usual way.  Say, C<"\Q\\E"> has no C<\E> inside: it has C<\Q>, C<\\>,
and C<E>, thus the result is the same as for C<"\\\\E">.  Generally speaking,
having backslashes between C<\Q> and C<\E> may lead to counterintuitive
results.  So, C<"\Q\t\E"> is converted to:

  quotemeta("\t")

which is the same as C<"\\\t"> (since TAB is not alphanumerical).  Note also
that:
d1414 2
a1415 2
Interpolated scalars and arrays are internally converted to the C<join> and
C<.> Perl operations, thus C<"$foo >>> '@@arr'"> becomes:
d1417 1
a1417 1
  $foo . " >>> '" . (join $", @@arr) . "'";
d1419 1
a1419 1
All the operations in the above are performed simultaneously left-to-right.
d1421 9
a1429 7
Since the result of "\Q STRING \E" has all the metacharacters quoted
there is no way to insert a literal C<$> or C<@@> inside a C<\Q\E> pair: if
protected by C<\> C<$> will be quoted to became "\\\$", if not, it is 
interpreted as starting an interpolated scalar.

Note also that the interpolating code needs to make a decision on where the 
interpolated scalar ends. For instance, whether C<"a $b -E<gt> {c}"> means:
d1437 5
a1441 5
I<Most of the time> the decision is to take the longest possible text which
does not include spaces between components and contains matching
braces/brackets.  Since the outcome may be determined by I<voting> based
on heuristic estimators, the result I<is not strictly predictable>, but
is usually correct for the ambiguous cases.
d1445 33
a1477 26
Processing of C<\Q>, C<\U>, C<\u>, C<\L>, C<\l> and interpolation happens 
(almost) as with C<qq//> constructs, but I<the substitution of C<\> followed by
RE-special chars (including C<\>) is not performed>!  Moreover, 
inside C<(?{BLOCK})>, C<(?# comment )>, and C<#>-comment of
C<//x>-regular expressions no processing is performed at all.
This is the first step where presence of the C<//x> switch is relevant.

Interpolation has several quirks: C<$|>, C<$(> and C<$)> are not interpolated, and
constructs C<$var[SOMETHING]> are I<voted> (by several different estimators) 
to be an array element or C<$var> followed by a RE alternative.  This is
the place where the notation C<${arr[$bar]}> comes handy: C</${arr[0-9]}/>
is interpreted as an array element C<-9>, not as a regular expression from
variable C<$arr> followed by a digit, which is the interpretation of 
C</$arr[0-9]/>.  Since voting among different estimators may be performed,
the result I<is not predictable>.

It is on this step that C<\1> is converted to C<$1> in the replacement
text of C<s///>.

Note that absence of processing of C<\\> creates specific restrictions on the
post-processed text: if the delimiter is C</>, one cannot get the combination
C<\/> into the result of this step: C</> will finish the regular expression,
C<\/> will be stripped to C</> on the previous step, and C<\\/> will be left
as is.  Since C</> is equivalent to C<\/> inside a regular expression, this
does not matter unless the delimiter is a special character for the RE engine,
as in C<s*foo*bar*>, C<m[foo]>, or C<?foo?>, or an alphanumeric char, as in:
d1481 1
a1481 1
In the above RE, which is intentionally obfuscated for illustration, the
d1483 3
a1485 1
RE is the same as for C<m/ ^ a s* b /mx>).
d1489 1
a1489 1
This step is the last one for all the constructs except regular expressions,
d1494 35
a1528 34
All the previous steps were performed during the compilation of Perl code,
this one happens in run time (though it may be optimized to be calculated
at compile time if appropriate).  After all the preprocessing performed 
above (and possibly after evaluation if catenation, joining, up/down-casing 
and C<quotemeta()>ing are involved) the resulting I<string> is passed to RE
engine for compilation.

Whatever happens in the RE engine is better be discussed in L<perlre>,
but for the sake of continuity let us do it here.

This is another step where presence of the C<//x> switch is relevant.
The RE engine scans the string left-to-right, and converts it to a finite 
automaton.  

Backslashed chars are either substituted by corresponding literal 
strings (as with C<\{>), or generate special nodes of the finite automaton
(as with C<\b>).  Characters which are special to the RE engine (such as
C<|>) generate corresponding nodes or groups of nodes.  C<(?#...)>
comments are ignored.  All the rest is either converted to literal strings
to match, or is ignored (as is whitespace and C<#>-style comments if
C<//x> is present).

Note that the parsing of the construct C<[...]> is performed using 
rather different rules than for the rest of the regular expression.  
The terminator of this construct is found using the same rules as for
finding a terminator of a C<{}>-delimited construct, the only exception
being that C<]> immediately following C<[> is considered as if preceded
by a backslash.  Similarly, the terminator of C<(?{...})> is found using
the same rules as for finding a terminator of a C<{}>-delimited construct.

It is possible to inspect both the string given to RE engine, and the
resulting finite automaton.  See arguments C<debug>/C<debugcolor>
of C<use L<re>> directive, and/or B<-Dr> option of Perl in
L<perlrun/Switches>.
d1534 2
a1535 2
to change.  This step is performed over the finite automaton generated
during the previous pass.
d1537 2
a1538 3
However, in older versions of Perl C<L<split>> used to silently
optimize C</^/> to mean C</^/m>.  This behaviour, though present
in current versions of Perl, may be deprecated in future.
d1547 6
a1552 6
variable substitution just like a double quoted string.  It is then
interpreted as a command, and the output of that command is the value
of the pseudo-literal, like in a shell.  In scalar context, a single
string consisting of all the output is returned.  In list context,
a list of values is returned, one for each line of output.  (You can
set C<$/> to use a different line terminator.)  The command is executed
d1558 23
a1580 22
To pass a $ through to the shell you need to hide it with a backslash.
The generalized form of backticks is C<qx//>.  (Because backticks
always undergo shell expansion as well, see L<perlsec> for
security concerns.)

In a scalar context, evaluating a filehandle in angle brackets yields the
next line from that file (newline, if any, included), or C<undef> at
end-of-file.  When C<$/> is set to C<undef> (i.e. file slurp mode),
and the file is empty, it returns C<''> the first time, followed by
C<undef> subsequently.

Ordinarily you must assign the returned value to a variable, but there is one
situation where an automatic assignment happens.  I<If and ONLY if> the
input symbol is the only thing inside the conditional of a C<while> or
C<for(;;)> loop, the value is automatically assigned to the variable
C<$_>.  In these loop constructs, the assigned value (whether assignment
is automatic or explicit) is then tested to see if it is defined.
The defined test avoids problems where line has a string value
that would be treated as false by perl e.g. "" or "0" with no trailing
newline. (This may seem like an odd thing to you, but you'll use the 
construct in almost every Perl script you write.) Anyway, the following 
lines are equivalent to each other:
d1590 1
a1590 1
and this also behaves similarly, but avoids the use of $_ :
d1594 6
a1599 2
If you really mean such values to terminate the loop they should be 
tested for explicitly:
d1604 4
a1607 2
In other boolean contexts, C<E<lt>I<filehandle>E<gt>> without explicit C<defined>
test or comparison will solicit a warning if C<-w> is in effect.
d1610 10
a1619 9
filehandles C<stdin>, C<stdout>, and C<stderr> will also work except in
packages, where they would be interpreted as local identifiers rather
than global.)  Additional filehandles may be created with the open()
function.  See L<perlfunc/open> for details on this.

If a E<lt>FILEHANDLEE<gt> is used in a context that is looking for a list, a
list consisting of all the input lines is returned, one line per list
element.  It's easy to make a I<LARGE> data space this way, so use with
care.
d1621 2
a1622 2
E<lt>FILEHANDLEE<gt> may also be spelt readline(FILEHANDLE).  See
L<perlfunc/readline>.
d1624 2
a1625 2
The null filehandle E<lt>E<gt> is special and can be used to emulate the
behavior of B<sed> and B<awk>.  Input from E<lt>E<gt> comes either from
d1627 1
a1627 1
how it works: the first time E<lt>E<gt> is evaluated, the @@ARGV array is
d1646 6
a1651 5
except that it isn't so cumbersome to say, and will actually work.  It
really does shift array @@ARGV and put the current filename into variable
$ARGV.  It also uses filehandle I<ARGV> internally--E<lt>E<gt> is just a
synonym for E<lt>ARGVE<gt>, which is magical.  (The pseudo code above
doesn't work because it treats E<lt>ARGVE<gt> as non-magical.)
d1653 1
a1653 1
You can modify @@ARGV before the first E<lt>E<gt> as long as the array ends up
d1655 2
a1656 2
continue as if the input were one big happy file.  (But see example
under C<eof> for how to reset line numbers on each file.)
d1683 8
a1690 7
The E<lt>E<gt> symbol will return C<undef> for end-of-file only once.  
If you call it again after this it will assume you are processing another 
@@ARGV list, and if you haven't set @@ARGV, will input from STDIN.

If the string inside the angle brackets is a reference to a scalar
variable (e.g., E<lt>$fooE<gt>), then that variable contains the name of the
filehandle to input from, or its typeglob, or a reference to the same.  For example:
d1699 3
a1701 3
depending on context.   This distinction is determined on syntactic
grounds alone.  That means C<E<lt>$xE<gt>> is always a readline from
an indirect handle, but C<E<lt>$hash{key}E<gt>> is always a glob.
d1706 1
a1706 1
say C<E<lt>$fooE<gt>> because that's an indirect filehandle as explained
d1709 1
a1709 1
C<E<lt>${foo}E<gt>>.  These days, it's considered cleaner to call the
d1711 1
a1711 1
way to have done it in the first place.)  Example:
d1717 1
a1717 1
is equivalent to
d1725 2
a1726 3
In fact, it's currently implemented that way.  (Which means it will not
work on filenames with spaces in them unless you have csh(1) on your
machine.)  Of course, the shortest way to do the above is:
d1730 11
a1740 15
Because globbing invokes a shell, it's often faster to call readdir() yourself
and do your own grep() on the filenames.  Furthermore, due to its current
implementation of using a shell, the glob() routine may get "Arg list too
long" errors (unless you've installed tcsh(1L) as F</bin/csh>).

A glob evaluates its (embedded) argument only when it is starting a new
list.  All values must be read before it will start over.  In a list
context this isn't important, because you automatically get them all
anyway.  In scalar context, however, the operator returns the next value
each time it is called, or a C<undef> value if you've just run out. As
for filehandles an automatic C<defined> is generated when the glob
occurs in the test part of a C<while> or C<for> - because legal glob returns
(e.g. a file called F<0>) would otherwise terminate the loop.
Again, C<undef> is returned only once.  So if you're expecting a single value 
from a glob, it is much better to say
d1749 1
a1749 1
returning FALSE.
d1761 1
a1761 1
compile time, whenever it determines that all arguments to an
d1764 1
a1764 1
variable substitution.  Backslash interpretation also happens at
d1777 2
a1778 3
the compiler will precompute the number that
expression represents so that the interpreter
won't have to.
d1785 6
a1790 5
If the operands to a binary bitwise op are strings of different sizes,
B<|> and B<^> ops will act as if the shorter operand had additional
zero bits on the right, while the B<&> op will act as if the longer
operand were truncated to the length of the shorter.  Note that the
granularity for such extension or truncation is one or more I<bytes>.
d1798 1
a1798 1
If you are intending to manipulate bitstrings, you should be certain that
d1800 1
a1800 1
a B<numeric> bitwise operation. You may explicitly show which type of
d1816 1
a1816 1
By default Perl assumes that it must do most of its arithmetic in
d1822 2
a1823 2
from here to the end of the enclosing BLOCK.  An inner BLOCK may
countermand this by saying
d1827 14
a1840 9
which lasts until the end of that BLOCK.

The bitwise operators ("&", "|", "^", "~", "<<", and ">>") always
produce integral results.  (But see also L<Bitwise String Operators>.)
However, C<use integer> still has meaning
for them.  By default, their results are interpreted as unsigned
integers.  However, if C<use integer> is in effect, their results are
interpreted as signed integers.  For example, C<~0> usually evaluates
to a large integral value.  However, C<use integer; ~0> is -1 on twos-complement machines.
d1845 4
a1848 3
similar ways to provide rounding or truncation at a certain number of
decimal places.  For rounding to a certain number of digits, sprintf()
or printf() is usually the easiest route.
d1872 4
a1875 4
ceil(), floor(), and a number of other mathematical and trigonometric
functions.  The Math::Complex module (part of the standard perl
distribution) defines a number of mathematical functions that can also
work on real numbers.  Math::Complex not as efficient as POSIX, but
d1887 4
a1890 4
variable precision arithmetic and overloaded operators.
At the cost of some space and considerable speed, they
avoid the normal pitfalls associated with limited-precision
representations.
d1897 6
@


1.2
log
@perl 5.004_04
@
text
@d41 2
d47 1
a47 1
A TERM has the highest precedence in Perl.  They includes variables,
d119 1
a119 1
has a value that is not null and matches the pattern
d149 3
a151 2
Unary "~" performs bitwise negation, i.e., 1's complement.
(See also L<Integer Arithmetic>.)
d168 2
a169 2
pattern, substitution, or translation.  The left argument is what is
supposed to be searched, substituted, or translated instead of the default
d172 1
a172 1
substitution, or translation, it is interpreted as a search pattern at run
d190 5
a194 1
result will be less than or equal to zero).
d196 1
a196 1
Binary "x" is the repetition operator.  In a scalar context, it
d198 1
a198 1
times specified by the right operand.  In a list context, if the left
d310 1
a310 1
(See also L<Integer Arithmetic>.)
d315 1
a315 1
(See also L<Integer Arithmetic>.)
d318 1
a318 1
(See also L<Integer Arithmetic>.)
d341 12
a352 5
As more readable alternatives to C<&&> and C<||>, Perl provides "and" and
"or" operators (see below).  The short-circuit behavior is identical.  The
precedence of "and" and "or" is much lower, however, so that you can
safely use them after a list operator without the need for
parentheses:
d362 3
a364 1
=head2 Range Operator
d367 1
a367 1
operators depending on the context.  In a list context, it returns an
d369 5
a373 4
value.  This is useful for writing C<for (1..10)> loops and for doing
slice operations on arrays.  Be aware that under the current implementation,
a temporary array is created, so you'll burn a lot of memory if you
write something like this:
d379 1
a379 1
In a scalar context, ".." returns a boolean value.  The operator is
d393 1
a393 1
returned is either the null string for false, or a sequence number
d399 1
a399 1
greater than 1.  If either operand of scalar ".." is a numeric literal,
d409 9
d424 1
a424 1
The range operator (in a list context) makes use of the magical
d467 13
d522 1
a522 1
Binary "," is the comma operator.  In a scalar context it evaluates
d526 1
a526 1
In a list context, it's just the list argument separator, and inserts
d561 21
a581 3
expressions.  It's equivalent to || except for the very low
precedence.  This means that it short-circuits: i.e., the right
expression is evaluated only if the left expression is false.
d618 9
a626 8
    Customary  Generic     Meaning    Interpolates
	''	 q{}	   Literal	   no
	""	qq{}	   Literal	   yes
	``	qx{}	   Command	   yes
		qw{}	  Word list	   no
	//	 m{}	Pattern match	   yes
		 s{}{}	 Substitution	   yes
		tr{}{}	 Translation	   no
d630 1
a630 1
C<q#foo#> is parsed as being the string C<foo>, which C<q #foo#> is the
d637 3
a639 2
For constructs that do interpolation, variables beginning with "C<$>" or "C<@@>"
are interpolated, as are the following sequences:
d642 1
a642 1
    \n		newline         (LF, NL)
d648 2
a649 2
    \033	octal char
    \x1b	hex char
d651 1
d657 1
a657 1
    \Q		quote regexp metacharacters till \E
d660 20
a679 1
and <\U> is taken from the current locale.  See L<perllocale>.
d697 12
d719 8
d734 1
a734 1
Searches a string for a pattern match, and in a scalar context returns
d740 1
a740 1
See L<perllocale> for discussion of additional considerations which apply
d754 3
a756 3
you can use any pair of non-alphanumeric, non-whitespace characters as
delimiters.  This is particularly useful for matching Unix path names
that contain "/", to avoid LTS (leaning toothpick syndrome).  If "?" is
d758 2
d762 9
a770 8
pattern recompiled) every time the pattern search is evaluated.  (Note
that C<$)> and C<$|> might not be interpolated because they look like
end-of-string tests.)  If you want such a pattern to be compiled only
once, add a C</o> after the trailing delimiter.  This avoids expensive
run-time recompilations, and is useful when the value you are
interpolating won't change over the life of the script.  However, mentioning
C</o> constitutes a promise that you won't change the variables in the pattern.
If you change them, Perl won't even notice.
d772 2
a773 2
If the PATTERN evaluates to a null string, the last
successfully executed regular expression is used instead.
d775 1
a775 1
If used in a context that requires a list value, a pattern match returns a
d777 5
a781 4
pattern, i.e., (C<$1>, $2, $3...).  (Note that here $1 etc. are also set, and
that this differs from Perl 4's behavior.)  If the match fails, a null
array is returned.  If the match succeeds, but there were no parentheses,
a list value of (1) is returned.
d807 1
a807 1
the context.  In a list context, it returns a list of all the
d812 7
a818 9
In a scalar context, C<m//g> iterates through the string, returning TRUE
each time it matches, and FALSE when it eventually runs out of matches.
(In other words, it remembers where it left off last time and restarts
the search at that point.  You can actually find the current match
position of a string or set it using the pos() function; see
L<perlfunc/pos>.)  A failed match normally resets the search position to
the beginning of the string, but you can avoid that by adding the C</c>
modifier (e.g. C<m//gc>).  Modifying the target string also resets the
search position.
d832 6
a837 4
    $/ = ""; $* = 1;  # $* deprecated in modern perls
    while (defined($paragraph = <>)) {
	while ($paragraph =~ /[a-z]['")]*[.!?]+['")]*\s/g) {
	    $sentences++;
d912 56
d972 47
a1018 11
A string which is interpolated and then executed as a system command.
The collected standard output of the command is returned.  In scalar
context, it comes back as a single (potentially multi-line) string.
In list context, returns a list of lines (however you've defined lines
with $/ or $INPUT_RECORD_SEPARATOR).

    $today = qx{ date };

Note that how the string gets evaluated is entirely subject to the
command interpreter on your system.  On most platforms, you will have
to protect shell metacharacters if you want them treated literally.
d1031 8
a1038 2
Also realize that using this operator frequently leads to unportable
programs.
d1049 9
d1064 1
a1064 1
comments into a multi-line qw-string.  For this reason the C<-w>
d1076 1
a1076 1
be a scalar variable, an array element, a hash element, or an assignment
d1079 1
a1079 1
If the delimiter chosen is single quote, no variable interpolation is
d1085 1
a1085 1
evaluates to a null string, the last successfully executed regular
d1087 1
a1087 1
See L<perllocale> for discussion of additional considerations which apply
d1108 1
a1108 1
replacement portion to be interpreter as a full-fledged Perl expression
d1120 1
a1120 1
    ($foo = $bar) =~ s/this/that/;
d1122 1
a1122 1
    $count = ($paragraph =~ s/Mister\b/Mr./g);
d1133 4
d1138 1
a1138 1
    # simple embedded variables in $_
d1141 1
a1141 1
    # Delete C comments.
d1148 6
a1153 1
    s/^\s*(.*?)\s*$/$1/;	# trim white space
d1176 1
a1176 1
Translates all occurrences of the characters found in the search list
d1179 1
a1179 1
specified via the =~ or !~ operator, the $_ string is translated.  (The
d1182 3
d1188 8
a1195 1
e.g., C<tr[A-Z][a-z]> or C<tr(+-*/)/ABCD/>.
d1209 1
a1209 1
translated to the same character are squashed down to a single instance of the
d1215 1
a1215 1
enough.  If the REPLACEMENTLIST is null, the SEARCHLIST is replicated.
d1238 1
a1238 1
If multiple translations are given for a character, only the first one is used:
d1242 1
a1242 1
will translate any A to X.
d1244 1
a1244 1
Note that because the translation table is built at compile time, neither
d1256 235
d1494 2
a1495 1
A string is enclosed by backticks (grave accents) first undergoes
d1498 2
a1499 2
of the pseudo-literal, like in a shell.  In a scalar context, a single
string consisting of all the output is returned.  In a list context,
d1512 7
a1518 3
Evaluating a filehandle in angle brackets yields the next line from
that file (newline, if any, included), or C<undef> at end of file.
Ordinarily you must assign that value to a variable, but there is one
d1522 7
a1528 4
C<$_>.  The assigned value is then tested to see if it is defined.
(This may seem like an odd thing to you, but you'll use the construct
in almost every Perl script you write.)  Anyway, the following lines
are equivalent to each other:
d1531 1
d1535 1
d1538 13
d1555 1
a1555 1
function.  See L<perlfunc/open()> for details on this.
d1562 3
d1569 1
a1569 1
checked, and if it is null, C<$ARGV[0]> is set to "-", which when opened
d1596 4
a1599 1
under eof() for how to reset line numbers on each file.)
d1601 8
a1608 2
If you want to set @@ARGV to your own list of files, go right ahead.  If
you want to pass switches into your script, you can use one of the
d1616 1
a1616 1
	...		# other switches
d1618 1
d1620 1
a1620 1
	...		# code for each line
d1623 3
a1625 3
The E<lt>E<gt> symbol will return FALSE only once.  If you call it again after
this it will assume you are processing another @@ARGV list, and if you
haven't set @@ARGV, will input from STDIN.
d1629 1
a1629 1
filehandle to input from, or a reference to the same.  For example:
d1634 17
a1650 11
If the string inside angle brackets is not a filehandle or a scalar
variable containing a filehandle name or reference, then it is interpreted
as a filename pattern to be globbed, and either a list of filenames or the
next filename in the list is returned, depending on context.  One level of
$ interpretation is done first, but you can't say C<E<lt>$fooE<gt>>
because that's an indirect filehandle as explained in the previous
paragraph.  (In older versions of Perl, programmers would insert curly
brackets to force interpretation as a filename glob: C<E<lt>${foo}E<gt>>.
These days, it's considered cleaner to call the internal function directly
as C<glob($foo)>, which is probably the right way to have done it in the
first place.)  Example:
d1678 7
a1684 4
anyway.  In a scalar context, however, the operator returns the next value
each time it is called, or a FALSE value if you've just run out.  Again,
FALSE is returned only once.  So if you're expecting a single value from
a glob, it is much better to say
d1705 1
a1705 1
compile time, whenever it determines that all of the arguments to an
d1718 1
a1718 1
	if (-s $file > 5 + 100 * 2**16) { ... }
d1725 32
d1774 2
a1775 1
produce integral results.  However, C<use integer> still has meaning
d1779 1
a1779 1
to a large integral value.  However, C<use integer; ~0> is -1.
d1788 21
d1821 14
@


1.1
log
@Initial revision
@
text
@d11 1
a11 1
Perl easier for C folks.)  With very few exceptions, these all 
d19 1
a19 1
    left	=~ !~ 
d30 1
a30 1
    nonassoc	..
d45 2
a46 2
Any TERM is of highest precedence of Perl.  These includes variables,
quote and quotelike operators, any expression in parentheses,
d59 1
a59 1
whether you look at the left side of operator or the right side of it.
d69 1
a69 1
Note that you have to be careful with parens:
d84 1
a84 1
probably doesn't do what you expect at first glance.  See 
d88 1
a88 1
well as subroutine and method calls, and the anonymous 
d91 1
a91 1
See also L<Quote and Quotelike Operators> toward the end of this section,
d107 1
a107 1
=head2 Autoincrement and Autodecrement
d113 1
a113 1
The autoincrement operator has a little extra built-in magic to it.  If
d116 1
a116 1
variable has only been used in string contexts since it was set, and
d126 1
a126 1
The autodecrement operator is not magical.
d137 1
a137 1
Unary "!" performs logical negation, i.e. "not".  See also C<not> for a lower
d147 2
a148 1
Unary "~" performs bitwise negation, i.e. 1's complement.
d153 1
a153 1
arguments.  (See examples above under L<List Operators>.)
d170 2
a171 3
time.  This is less efficient than an explicit search, since the pattern
must be compiled every time the expression is evaluated--unless you've
used C</o>.)
d182 6
a187 1
Binary "%" computes the modulus of the two numbers.
d192 1
a192 1
operand is a list in parens, it repeats the list.
d213 2
a214 2
number of bits specified by the right argument.  Arguments should be 
integers.
d216 3
a218 3
Binary ">>" returns the value of its left argument shifted right by the
number of bits specified by the right argument.  Arguments should be 
integers.
d248 1
a248 1
See also L<"List Operators">.
d252 1
a252 1
Binary "<" returns true if the left argument is numerically less than
d255 1
a255 1
Binary ">" returns true if the left argument is numerically greater
d258 1
a258 1
Binary "<=" returns true if the left argument is numerically less than
d261 1
a261 1
Binary ">=" returns true if the left argument is numerically greater
d284 3
a286 2
Binary "<=>" returns -1, 0, or 1 depending on whether the left argument is numerically
less than, equal to, or greater than the right argument.
d297 3
d303 1
d308 1
d311 1
d355 1
a355 1
a temporary array is created, so you'll burn a lot of memory if you 
d360 1
a360 1
    } 
d395 1
a395 1
    @@foo = @@foo[$[ .. $#foo];	# an expensive no-op
d399 1
a399 1
autoincrement algorithm if the operands are strings.  You
d424 1
a424 1
    printf "I have %d dog%s.\n", $n, 
d428 1
a428 1
or 3rd argument, whichever is selected.  
d454 2
a455 2
might trigger, such as from tie().  Other assignment operators work similarly.  
The following are recognized: 
d490 1
a490 1
The => digraph is mostly just a synonym for the comma operator.  It's useful for
d505 1
a505 1
See also discussion of list operators in L<List Operators (Leftward)>.
d516 1
a516 1
precedence.  This means that it short-circuits: i.e. the right
d523 1
a523 1
precedence.  This means that it short-circuits: i.e. the right
d541 1
a541 1
Dereference-address operator. (Perl's prefix dereferencing 
d546 1
a546 1
Type casting operator.  
d550 1
a550 1
=head2 Quote and Quotelike Operators
d558 1
a558 1
the same character fore and aft, but the 4 sorts of brackets 
d570 9
d582 7
a588 7
    \t		tab
    \n		newline
    \r		return
    \f		form feed
    \b		backspace
    \a		alarm (bell)
    \e		escape
d599 3
d609 1
a609 1
particular, contrary to the expectations of shell programmers, backquotes
d613 1
a613 1
=head2 Regexp Quotelike Operators
d615 1
a615 1
Here are the quotelike operators that apply to pattern
d624 1
a624 1
optimization when you only want to see the first occurrence of
d631 1
a631 1
=item m/PATTERN/gimosx
d633 1
a633 1
=item /PATTERN/gimosx
d641 2
d646 2
a647 1
    g	Match globally, i.e. find all occurrences.
d650 1
a650 1
    o	Only compile pattern once.
d657 2
a658 1
that contain "/", to avoid LTS (leaning toothpick syndrome).
d675 1
a675 1
pattern, i.e. ($1, $2, $3...).  (Note that here $1 etc. are also set, and
d698 2
a699 2
remainder of the line, and assigns those three fields to $F1, $F2 and
$Etc.  The conditional is true if any variables were assigned, i.e. if
d710 16
a725 6
each time it matches, and FALSE when it eventually runs out of
matches.  (In other words, it remembers where it left off last time and
restarts the search at that point.  You can actually find the current
match position of a string using the pos() function--see L<perlfunc>.)
If you modify the string in any way, the match position is reset to the
beginning.  Examples:
d731 2
a732 2
    $/ = ""; $* = 1;  # $* deprecated in Perl 5
    while ($paragraph = <>) {
d739 47
d790 3
a792 3
A single-quoted, literal string.  Backslashes are ignored, unless
followed by the delimiter or another backslash, in which case the
delimiter or backslash is interpolated.
d796 1
d807 1
d821 19
a839 1
See L<I/O Operators> for more discussion.
d853 5
d862 1
a862 1
made.  Otherwise it returns false (0).
d867 1
a867 1
to one of those, i.e. an lvalue.)
d873 1
a873 1
at run-time.  If you only want the pattern compiled once the first time
d877 2
d883 1
a883 1
    g	Replace globally, i.e. all occurrences.
d886 1
a886 1
    o	Only compile pattern once.
d892 3
a894 3
replacement string (the C</e> modifier overrides this, however).  If
backquotes are used, the replacement string is a command to execute
whose output will be used as the actual replacement text.  If the
d896 1
a896 1
pair of quotes, which may or may not be bracketing quotes, e.g.
d938 3
a940 3
Note the use of $ instead of \ in the last example.  Unlike 
B<sed>, we only use the \<I<digit>> form in the left hand side.
Anywhere else it's $<I<digit>>.
d942 1
a942 1
Occasionally, you can't just use a C</g> to get all the changes
d961 6
a966 6
string specified with =~ must be a scalar variable, an array element,
or an assignment to one of those, i.e. an lvalue.)  For B<sed> devotees,
C<y> is provided as a synonym for C<tr>.  If the SEARCHLIST is
delimited by bracketing quotes, the REPLACEMENTLIST has its own pair of
quotes, which may or may not be bracketing quotes, e.g. C<tr[A-Z][a-z]>
or C<tr(+-*/)/ABCD/>.
d1029 1
a1029 1
There are several I/O operators you should know about.  
d1044 1
a1044 1
always undergo shell expansion as well, see L<perlsec> for 
d1048 9
a1056 9
that file (newline included, so it's never false until end of file, at
which time an undefined value is returned).  Ordinarily you must assign
that value to a variable, but there is one situation where an automatic
assignment happens.  I<If and ONLY if> the input symbol is the only
thing inside the conditional of a C<while> loop, the value is
automatically assigned to the variable C<$_>.  The assigned value is
then tested to see if it is defined.  (This may seem like an odd thing
to you, but you'll use the construct in almost every Perl script you
write.)  Anyway, the following lines are equivalent to each other:
d1064 2
a1065 2
The filehandles STDIN, STDOUT and STDERR are predefined.  (The
filehandles C<stdin>, C<stdout> and C<stderr> will also work except in
d1070 1
a1070 1
If a <FILEHANDLE> is used in a context that is looking for a list, a
d1089 1
a1089 1
    unshift(@@ARGV, '-') if $#ARGV < $[;
d1099 3
a1101 3
$ARGV.  It also uses filehandle I<ARGV> internally--E<lt>E<gt> is just a synonym
for <ARGV>, which is magical.  (The pseudo code above doesn't work
because it treats <ARGV> as non-magical.)
d1109 1
a1109 1
you want to pass switches into your script, you can use one of the 
d1128 1
a1128 1
variable (e.g. <$foo>), then that variable contains the name of the
d1140 1
a1140 1
paragraph.  In older version of Perl, programmers would insert curly
d1165 2
a1166 2
and just do your own grep() on the filenames.  Furthermore, due to its current
implementation of using a shell, the glob() routine may get "Arg list too 
d1169 1
a1169 1
A glob only evaluates its (embedded) argument when it is starting a new
d1184 1
a1184 1
returning FALSE.  
d1188 1
a1188 1
to become confused with the indirect filehandle notatin.
d1205 1
a1205 1
and this all reduces to one string internally.  Likewise, if 
d1210 1
a1210 1
    } 
d1212 1
a1212 1
the compiler will pre-compute the number that
d1217 1
a1217 1
=head2 Integer arithmetic
d1226 1
a1226 1
countermand this by saying 
d1232 26
@


1.1.1.1
log
@Import of Perl 5.003 into the tree.  Makefile.bsd-wrapper and
config.sh.OpenBSD are the only local changes.
@
text
@@


1.1.1.2
log
@perl5.005_03
@
text
@d11 1
a11 1
Perl easier for C folks.)  With very few exceptions, these all
d19 1
a19 1
    left	=~ !~
d30 1
a30 1
    nonassoc	..  ...
a40 2
Many operators can be overloaded for objects.  See L<overload>.

d45 2
a46 2
A TERM has the highest precedence in Perl.  They include variables,
quote and quote-like operators, any expression in parentheses,
d59 1
a59 1
whether you are looking at the left side or the right side of the operator.
d69 1
a69 1
Note that you have to be careful with parentheses:
d84 1
a84 1
probably doesn't do what you expect at first glance.  See
d88 1
a88 1
well as subroutine and method calls, and the anonymous
d91 1
a91 1
See also L<Quote and Quote-like Operators> toward the end of this section,
d107 1
a107 1
=head2 Auto-increment and Auto-decrement
d113 1
a113 1
The auto-increment operator has a little extra builtin magic to it.  If
d116 2
a117 2
variable has been used in only string contexts since it was set, and
has a value that is not the empty string and matches the pattern
d126 1
a126 1
The auto-decrement operator is not magical.
d137 1
a137 1
Unary "!" performs logical negation, i.e., "not".  See also C<not> for a lower
d147 1
a147 3
Unary "~" performs bitwise negation, i.e., 1's complement.  For example,
C<0666 &~ 027> is 0640.  (See also L<Integer Arithmetic> and L<Bitwise
String Operators>.)
d152 1
a152 1
arguments.  (See examples above under L<Terms and List Operators (Leftward)>.)
d164 2
a165 2
pattern, substitution, or transliteration.  The left argument is what is
supposed to be searched, substituted, or transliterated instead of the default
d168 4
a171 3
substitution, or transliteration, it is interpreted as a search pattern at run
time.  This can be is less efficient than an explicit search, because the
pattern must be compiled every time the expression is evaluated.
d182 1
a182 10
Binary "%" computes the modulus of two numbers.  Given integer
operands C<$a> and C<$b>: If C<$b> is positive, then C<$a % $b> is
C<$a> minus the largest multiple of C<$b> that is not greater than
C<$a>.  If C<$b> is negative, then C<$a % $b> is C<$a> minus the
smallest multiple of C<$b> that is not less than C<$a> (i.e. the
result will be less than or equal to zero). 
Note than when C<use integer> is in scope, "%" give you direct access
to the modulus operator as implemented by your C compiler.  This
operator is not as well defined for negative operands, but it will
execute faster.
d184 1
a184 1
Binary "x" is the repetition operator.  In scalar context, it
d186 2
a187 2
times specified by the right operand.  In list context, if the left
operand is a list in parentheses, it repeats the list.
d208 2
a209 2
number of bits specified by the right argument.  Arguments should be
integers.  (See also L<Integer Arithmetic>.)
d211 3
a213 3
Binary ">>" returns the value of its left argument shifted right by
the number of bits specified by the right argument.  Arguments should
be integers.  (See also L<Integer Arithmetic>.)
d243 1
a243 1
See also L<"Terms and List Operators (Leftward)">.
d247 1
a247 1
Binary "E<lt>" returns true if the left argument is numerically less than
d250 1
a250 1
Binary "E<gt>" returns true if the left argument is numerically greater
d253 1
a253 1
Binary "E<lt>=" returns true if the left argument is numerically less than
d256 1
a256 1
Binary "E<gt>=" returns true if the left argument is numerically greater
d279 2
a280 3
Binary "E<lt>=E<gt>" returns -1, 0, or 1 depending on whether the left
argument is numerically less than, equal to, or greater than the right
argument.
a290 3
"lt", "le", "ge", "gt" and "cmp" use the collation (sort) order specified
by the current locale if C<use locale> is in effect.  See L<perllocale>.

a293 1
(See also L<Integer Arithmetic> and L<Bitwise String Operators>.)
a297 1
(See also L<Integer Arithmetic> and L<Bitwise String Operators>.)
a299 1
(See also L<Integer Arithmetic> and L<Bitwise String Operators>.)
d322 5
a326 12
In particular, this means that you shouldn't use this
for selecting between two aggregates for assignment:

    @@a = @@b || @@c;		# this is wrong
    @@a = scalar(@@b) || @@c;	# really meant this
    @@a = @@b ? @@b : @@c;		# this works fine, though

As more readable alternatives to C<&&> and C<||> when used for
control flow, Perl provides C<and> and C<or> operators (see below).
The short-circuit behavior is identical.  The precedence of "and" and
"or" is much lower, however, so that you can safely use them after a
list operator without the need for parentheses:
d336 1
a336 3
Use "or" for assignment is unlikely to do what you want; see below.

=head2 Range Operators
d339 1
a339 1
operators depending on the context.  In list context, it returns an
d341 4
a344 5
value.  This is useful for writing C<foreach (1..10)> loops and for
doing slice operations on arrays.  In the current implementation, no
temporary array is created when the range operator is used as the
expression in C<foreach> loops, but older versions of Perl might burn
a lot of memory when you write something like this:
d348 1
a348 1
    }
d350 1
a350 1
In scalar context, ".." returns a boolean value.  The operator is
d364 1
a364 1
returned is either the empty string for false, or a sequence number
d370 1
a370 1
greater than 1.  If either operand of scalar ".." is a constant expression,
a379 9
    # parse mail messages
    while (<>) {
        $in_header =   1  .. /^$/;
        $in_body   = /^$/ .. eof();
	# do something based on those
    } continue {
	close ARGV if eof; 		# reset $. each file
    }

d383 1
a383 1
    @@foo = @@foo[0 .. $#foo];	# an expensive no-op
d386 2
a387 2
The range operator (in list context) makes use of the magical
auto-increment algorithm if the operands are strings.  You
d412 1
a412 1
    printf "I have %d dog%s.\n", $n,
d416 1
a416 1
or 3rd argument, whichever is selected.
a428 13
Because this operator produces an assignable result, using assignments
without parentheses will get you in trouble.  For example, this:

    $a % 2 ? $a += 10 : $a += 2

Really means this:

    (($a % 2) ? ($a += 10) : $a) += 2

Rather than this:

    ($a % 2) ? ($a += 10) : ($a += 2)

d442 2
a443 2
might trigger, such as from tie().  Other assignment operators work similarly.
The following are recognized:
d471 1
a471 1
Binary "," is the comma operator.  In scalar context it evaluates
d475 1
a475 1
In list context, it's just the list argument separator, and inserts
d478 1
a478 1
The =E<gt> digraph is mostly just a synonym for the comma operator.  It's useful for
d493 1
a493 1
See also discussion of list operators in L<Terms and List Operators (Leftward)>.
d504 1
a504 1
precedence.  This means that it short-circuits: i.e., the right
d510 3
a512 21
expressions.  It's equivalent to || except for the very low precedence.
This makes it useful for control flow

    print FH $data		or die "Can't write to FH: $!";

This means that it short-circuits: i.e., the right expression is evaluated
only if the left expression is false.  Due to its precedence, you should
probably avoid using this for assignment, only for control flow.

    $a = $b or $c;		# bug: this is wrong
    ($a = $b) or $c;		# really means this
    $a = $b || $c;		# better written this way

However, when it's a list context assignment and you're trying to use
"||" for control flow, you probably need "or" so that the assignment
takes higher precedence.

    @@info = stat($file) || die;     # oops, scalar sense of stat!
    @@info = stat($file) or die;     # better, now @@info gets its due

Then again, you could always use parentheses.
d529 1
a529 1
Dereference-address operator. (Perl's prefix dereferencing
d534 1
a534 1
Type casting operator.
d538 1
a538 1
=head2 Quote and Quote-like Operators
d546 1
a546 1
the same character fore and aft, but the 4 sorts of brackets
d549 21
a569 32
    Customary  Generic        Meaning	     Interpolates
	''	 q{}	      Literal		  no
	""	qq{}	      Literal		  yes
	``	qx{}	      Command		  yes (unless '' is delimiter)
		qw{}	     Word list		  no
	//	 m{}	   Pattern match	  yes (unless '' is delimiter)
		qr{}	      Pattern		  yes (unless '' is delimiter)
		 s{}{}	    Substitution	  yes (unless '' is delimiter)
		tr{}{}	  Transliteration	  no (but see below)

Note that there can be whitespace between the operator and the quoting
characters, except when C<#> is being used as the quoting character.
C<q#foo#> is parsed as being the string C<foo>, while C<q #foo#> is the
operator C<q> followed by a comment. Its argument will be taken from the
next line. This allows you to write:

    s {foo}  # Replace foo
      {bar}  # with bar.

For constructs that do interpolation, variables beginning with "C<$>"
or "C<@@>" are interpolated, as are the following sequences. Within
a transliteration, the first ten of these sequences may be used.

    \t		tab             (HT, TAB)
    \n		newline         (NL)
    \r		return          (CR)
    \f		form feed       (FF)
    \b		backspace       (BS)
    \a		alarm (bell)    (BEL)
    \e		escape          (ESC)
    \033	octal char	(ESC)
    \x1b	hex char	(ESC)
a570 1

d576 1
a576 23
    \Q		quote non-word characters till \E

If C<use locale> is in effect, the case map used by C<\l>, C<\L>, C<\u>
and C<\U> is taken from the current locale.  See L<perllocale>.

All systems use the virtual C<"\n"> to represent a line terminator,
called a "newline".  There is no such thing as an unvarying, physical
newline character.  It is an illusion that the operating system,
device drivers, C libraries, and Perl all conspire to preserve.  Not all
systems read C<"\r"> as ASCII CR and C<"\n"> as ASCII LF.  For example,
on a Mac, these are reversed, and on systems without line terminator,
printing C<"\n"> may emit no actual data.  In general, use C<"\n"> when
you mean a "newline" for your system, but use the literal ASCII when you
need an exact character.  For example, most networking protocols expect
and prefer a CR+LF (C<"\012\015"> or C<"\cJ\cM">) for line terminators,
and although they often accept just C<"\012">, they seldom tolerate just
C<"\015">.  If you get in the habit of using C<"\n"> for networking,
you may be burned some day.

You cannot include a literal C<$> or C<@@> within a C<\Q> sequence. 
An unescaped C<$> or C<@@> interpolates the corresponding variable, 
while escaping will cause the literal string C<\$> to be inserted.
You'll need to write something like C<m/\Quser\E\@@\Qhost/>. 
d585 1
a585 1
particular, contrary to the expectations of shell programmers, back-quotes
d589 1
a589 1
=head2 Regexp Quote-Like Operators
d591 1
a591 1
Here are the quote-like operators that apply to pattern
a593 12
Most of this section is related to use of regular expressions from Perl.
Such a use may be considered from two points of view: Perl handles a
a string and a "pattern" to RE (regular expression) engine to match, 
RE engine finds (or does not find) the match, and Perl uses the findings 
of RE engine for its operation, possibly asking the engine for other matches.

RE engine has no idea what Perl is going to do with what it finds, 
similarly, the rest of Perl has no idea what a particular regular expression 
means to RE engine.  This creates a clean separation, and in this section
we discuss matching from Perl point of view only.  The other point of
view may be found in L<perlre>.

d600 1
a600 1
optimization when you want to see only the first occurrence of
a603 8
    while (<>) {
	if (?^$?) {
			    # blank line between header and body
	}
    } continue {
	reset if eof;	    # clear ?? status for next file
    }

d607 1
a607 1
=item m/PATTERN/cgimosx
d609 1
a609 1
=item /PATTERN/cgimosx
d611 1
a611 1
Searches a string for a pattern match, and in scalar context returns
a616 2
See L<perllocale> for discussion of additional considerations that apply
when C<use locale> is in effect.
d620 1
a620 2
    c	Do not reset search position on a failed match when /g is in effect.
    g	Match globally, i.e., find all occurrences.
d623 1
a623 1
    o	Compile pattern only once.
d628 3
a630 6
you can use any pair of non-alphanumeric, non-whitespace characters 
as delimiters. This is particularly useful for matching Unix path names
that contain "/", to avoid LTS (leaning toothpick syndrome). If "?" is
the delimiter, then the match-only-once rule of C<?PATTERN?> applies.
If "'" is the delimiter, no variable interpolation is performed on the
PATTERN.
d633 8
a640 9
pattern recompiled) every time the pattern search is evaluated, except
for when the delimiter is a single quote.  (Note that C<$)> and C<$|>
might not be interpolated because they look like end-of-string tests.)
If you want such a pattern to be compiled only once, add a C</o> after
the trailing delimiter.  This avoids expensive run-time recompilations,
and is useful when the value you are interpolating won't change over
the life of the script.  However, mentioning C</o> constitutes a promise
that you won't change the variables in the pattern.  If you change them,
Perl won't even notice.
d642 2
a643 2
If the PATTERN evaluates to the empty string, the last
I<successfully> matched regular expression is used instead.
d645 1
a645 1
If the C</g> option is not used, C<m//> in a list context returns a
d647 4
a650 5
pattern, i.e., (C<$1>, C<$2>, C<$3>...).  (Note that here C<$1> etc. are
also set, and that this differs from Perl 4's behavior.)  When there are
no parentheses in the pattern, the return value is the list C<(1)> for
success.  With or without parentheses, an empty list is returned upon
failure.
d670 2
a671 2
remainder of the line, and assigns those three fields to $F1, $F2, and
$Etc.  The conditional is true if any variables were assigned, i.e., if
d676 1
a676 1
the context.  In list context, it returns a list of all the
d681 7
a687 15
In scalar context, each execution of C<m//g> finds the next match,
returning TRUE if it matches, and FALSE if there is no further match.
The position after the last match can be read or set using the pos()
function; see L<perlfunc/pos>.   A failed match normally resets the
search position to the beginning of the string, but you can avoid that
by adding the C</c> modifier (e.g. C<m//gc>).  Modifying the target
string also resets the search position.

You can intermix C<m//g> matches with C<m/\G.../g>, where C<\G> is a
zero-width assertion that matches the exact position where the previous
C<m//g>, if any, left off.  The C<\G> assertion is not supported without
the C</g> modifier; currently, without C</g>, C<\G> behaves just like
C<\A>, but that's accidental and may change in the future.

Examples:
d693 4
a696 6
    {
	local $/ = "";
	while (defined($paragraph = <>)) {
	    while ($paragraph =~ /[a-z]['")]*[.!?]+['")]*\s/g) {
		$sentences++;
	    }
a700 47
    # using m//gc with \G
    $_ = "ppooqppqq";
    while ($i++ < 2) {
        print "1: '";
        print $1 while /(o)/gc; print "', pos=", pos, "\n";
        print "2: '";
        print $1 if /\G(q)/gc;  print "', pos=", pos, "\n";
        print "3: '";
        print $1 while /(p)/gc; print "', pos=", pos, "\n";
    }

The last example should print:

    1: 'oo', pos=4
    2: 'q', pos=5
    3: 'pp', pos=7
    1: '', pos=7
    2: 'q', pos=8
    3: '', pos=8

A useful idiom for C<lex>-like scanners is C</\G.../gc>.  You can
combine several regexps like this to process a string part-by-part,
doing different actions depending on which regexp matched.  Each
regexp tries to match where the previous one leaves off.

 $_ = <<'EOL';
      $url = new URI::URL "http://www/";   die if $url eq "xXx";
 EOL
 LOOP:
    {
      print(" digits"),		redo LOOP if /\G\d+\b[,.;]?\s*/gc;
      print(" lowercase"),	redo LOOP if /\G[a-z]+\b[,.;]?\s*/gc;
      print(" UPPERCASE"),	redo LOOP if /\G[A-Z]+\b[,.;]?\s*/gc;
      print(" Capitalized"),	redo LOOP if /\G[A-Z][a-z]+\b[,.;]?\s*/gc;
      print(" MiXeD"),		redo LOOP if /\G[A-Za-z]+\b[,.;]?\s*/gc;
      print(" alphanumeric"),	redo LOOP if /\G[A-Za-z0-9]+\b[,.;]?\s*/gc;
      print(" line-noise"),	redo LOOP if /\G[^A-Za-z0-9]+/gc;
      print ". That's all!\n";
    }

Here is the output (split into several lines):

 line-noise lowercase line-noise lowercase UPPERCASE line-noise
 UPPERCASE line-noise lowercase line-noise lowercase line-noise
 lowercase lowercase line-noise lowercase lowercase line-noise
 MiXeD line-noise. That's all!

d705 3
a707 3
A single-quoted, literal string. A backslash represents a backslash
unless followed by the delimiter or another backslash, in which case
the delimiter or backslash is interpolated.
a710 1
    $baz = '\n';		# a two-character string
a720 57
    $baz = "\n";		# a one-character string

=item qr/PATTERN/imosx

Quote-as-a-regular-expression operator.  I<STRING> is interpolated the
same way as I<PATTERN> in C<m/PATTERN/>.  If "'" is used as the
delimiter, no variable interpolation is done.  Returns a Perl value
which may be used instead of the corresponding C</STRING/imosx> expression.

For example,

    $rex = qr/my.STRING/is;
    s/$rex/foo/;

is equivalent to

    s/my.STRING/foo/is;

The result may be used as a subpattern in a match:

    $re = qr/$pattern/;
    $string =~ /foo${re}bar/;	# can be interpolated in other patterns
    $string =~ $re;		# or used standalone
    $string =~ /$re/;		# or this way

Since Perl may compile the pattern at the moment of execution of qr()
operator, using qr() may have speed advantages in I<some> situations,
notably if the result of qr() is used standalone:

    sub match {
	my $patterns = shift;
	my @@compiled = map qr/$_/i, @@$patterns;
	grep {
	    my $success = 0;
	    foreach my $pat @@compiled {
		$success = 1, last if /$pat/;
	    }
	    $success;
	} @@_;
    }

Precompilation of the pattern into an internal representation at the
moment of qr() avoids a need to recompile the pattern every time a
match C</$pat/> is attempted.  (Note that Perl has many other
internal optimizations, but none would be triggered in the above
example if we did not use qr() operator.)

Options are:

    i	Do case-insensitive pattern matching.
    m	Treat string as multiple lines.
    o	Compile pattern only once.
    s	Treat string as single line.
    x	Use extended regular expressions.

See L<perlre> for additional information on valid syntax for STRING, and
for a detailed look at the semantics of regular expressions.
d726 7
a732 67
A string which is (possibly) interpolated and then executed as a system
command with C</bin/sh> or its equivalent.  Shell wildcards, pipes,
and redirections will be honored.  The collected standard output of the
command is returned; standard error is unaffected.  In scalar context,
it comes back as a single (potentially multi-line) string.  In list
context, returns a list of lines (however you've defined lines with $/
or $INPUT_RECORD_SEPARATOR).

Because backticks do not affect standard error, use shell file descriptor
syntax (assuming the shell supports this) if you care to address this.
To capture a command's STDERR and STDOUT together:

    $output = `cmd 2>&1`;

To capture a command's STDOUT but discard its STDERR:

    $output = `cmd 2>/dev/null`;

To capture a command's STDERR but discard its STDOUT (ordering is
important here):

    $output = `cmd 2>&1 1>/dev/null`;

To exchange a command's STDOUT and STDERR in order to capture the STDERR
but leave its STDOUT to come out the old STDERR:

    $output = `cmd 3>&1 1>&2 2>&3 3>&-`;

To read both a command's STDOUT and its STDERR separately, it's easiest
and safest to redirect them separately to files, and then read from those
files when the program is done:

    system("program args 1>/tmp/program.stdout 2>/tmp/program.stderr");

Using single-quote as a delimiter protects the command from Perl's
double-quote interpolation, passing it on to the shell instead:

    $perl_info  = qx(ps $$);            # that's Perl's $$
    $shell_info = qx'ps $$';            # that's the new shell's $$

Note that how the string gets evaluated is entirely subject to the command
interpreter on your system.  On most platforms, you will have to protect
shell metacharacters if you want them treated literally.  This is in
practice difficult to do, as it's unclear how to escape which characters.
See L<perlsec> for a clean and safe example of a manual fork() and exec()
to emulate backticks safely.

On some platforms (notably DOS-like ones), the shell may not be
capable of dealing with multiline commands, so putting newlines in
the string may not get you what you want.  You may be able to evaluate
multiple commands in a single line by separating them with the command
separator character, if your shell supports that (e.g. C<;> on many Unix
shells; C<&> on the Windows NT C<cmd> shell).

Beware that some command shells may place restrictions on the length
of the command line.  You must ensure your strings don't exceed this
limit after any necessary interpolations.  See the platform-specific
release notes for more details about your particular environment.

Using this operator can lead to programs that are difficult to port,
because the shell commands called vary between systems, and may in
fact not be present at all.  As one example, the C<type> command under
the POSIX shell is very different from the C<type> command under DOS.
That doesn't mean you should go out of your way to avoid backticks
when they're the right way to get something done.  Perl was made to be
a glue language, and one of the things it glues together is commands.
Just understand what you're getting yourself into.
d734 1
a734 1
See L<"I/O Operators"> for more discussion.
a742 9
This equivalency means that if used in scalar context, you'll get split's
(unfortunate) scalar context behavior, complete with mysterious warnings.
However do not rely on this as in a future release it could be changed to
be exactly equivalent to the list

    ('foo', 'bar', 'baz')

Which in a scalar context would result in C<'baz'>.

a747 5
A common mistake is to try to separate the words with comma or to put
comments into a multi-line C<qw>-string.  For this reason the C<-w>
switch produce warnings if the STRING contains the "," or the "#"
character.

d752 1
a752 1
made.  Otherwise it returns false (specifically, the empty string).
d756 2
a757 2
be scalar variable, an array element, a hash element, or an assignment
to one of those, i.e., an lvalue.)
d759 1
a759 1
If the delimiter chosen is a single quote, no variable interpolation is
d763 1
a763 1
at run-time.  If you want the pattern compiled only once the first time
d765 1
a765 1
evaluates to the empty string, the last successfully executed regular
a766 2
See L<perllocale> for discussion of additional considerations that apply
when C<use locale> is in effect.
d771 1
a771 1
    g	Replace globally, i.e., all occurrences.
d774 1
a774 1
    o	Compile pattern only once.
d780 3
a782 3
replacement string (the C</e> modifier overrides this, however).  Unlike
Perl 4, Perl 5 treats backticks as normal delimiters; the replacement
text is not evaluated as a command.  If the
d784 1
a784 1
pair of quotes, which may or may not be bracketing quotes, e.g.,
d786 1
a786 1
replacement portion to be interpreted as a full-fledged Perl expression
d798 1
a798 1
    ($foo = $bar) =~ s/this/that/;	# copy first, then change
d800 1
a800 1
    $count = ($paragraph =~ s/Mister\b/Mr./g);  # get change-count
a810 4
    # expand variables in $_, but dynamics only, using
    # symbolic dereferencing
    s/\$(\w+)/${$1}/g;

d812 1
a812 1
    # any embedded scalar variable (including lexicals) in $_
d815 1
a815 1
    # Delete (most) C comments.
d822 1
a822 6
    s/^\s*(.*?)\s*$/$1/;	# trim white space in $_, expensively

    for ($variable) {		# trim white space in $variable, cheap
	s/^\s+//;
	s/\s+$//;
    }
d826 3
a828 3
Note the use of $ instead of \ in the last example.  Unlike
B<sed>, we use the \E<lt>I<digit>E<gt> form in only the left hand side.
Anywhere else it's $E<lt>I<digit>E<gt>.
d830 1
a830 1
Occasionally, you can't use just a C</g> to get all the changes
d845 1
a845 1
Transliterates all occurrences of the characters found in the search list
d848 7
a854 17
specified via the =~ or !~ operator, the $_ string is transliterated.  (The
string specified with =~ must be a scalar variable, an array element, a
hash element, or an assignment to one of those, i.e., an lvalue.)

A character range may be specified with a hyphen, so C<tr/A-J/0-9/> 
does the same replacement as C<tr/ACEGIBDFHJ/0246813579/>.
For B<sed> devotees, C<y> is provided as a synonym for C<tr>.  If the
SEARCHLIST is delimited by bracketing quotes, the REPLACEMENTLIST has
its own pair of quotes, which may or may not be bracketing quotes,
e.g., C<tr[A-Z][a-z]> or C<tr(+\-*/)/ABCD/>.

Note also that the whole range idea is rather unportable between
character sets--and even within character sets they may cause results
you probably didn't expect.  A sound principle is to use only ranges
that begin from and end at either alphabets of equal case (a-e, A-E),
or digits (0-4).  Anything else is unsafe.  If in doubt, spell out the
character sets in full.
d868 1
a868 1
transliterated to the same character are squashed down to a single instance of the
d874 1
a874 1
enough.  If the REPLACEMENTLIST is empty, the SEARCHLIST is replicated.
d897 1
a897 1
If multiple transliterations are given for a character, only the first one is used:
d901 1
a901 1
will transliterate any A to X.
d903 1
a903 1
Note that because the transliteration table is built at compile time, neither
a914 235
=head2 Gory details of parsing quoted constructs

When presented with something which may have several different 
interpretations, Perl uses the principle B<DWIM> (expanded to Do What I Mean 
- not what I wrote) to pick up the most probable interpretation of the 
source.  This strategy is so successful that Perl users usually do not
suspect ambivalence of what they write.  However, time to time Perl's ideas
differ from what the author meant.  

The target of this section is to clarify the Perl's way of interpreting
quoted constructs.  The most frequent reason one may have to want to know the 
details discussed in this section is hairy regular expressions.  However, the 
first steps of parsing are the same for all Perl quoting operators, so here
they are discussed together.

The most important detail of Perl parsing rules is the first one
discussed below; when processing a quoted construct, Perl I<first>
finds the end of the construct, then it interprets the contents of the
construct.  If you understand this rule, you may skip the rest of this
section on the first reading.  The other rules would
contradict user's expectations much less frequently than the first one.

Some of the passes discussed below are performed concurrently, but as 
far as results are the same, we consider them one-by-one.  For different
quoting constructs Perl performs different number of passes, from
one to five, but they are always performed in the same order.

=over

=item Finding the end

First pass is finding the end of the quoted construct, be it 
a multichar delimiter
C<"\nEOF\n"> of C<<<EOF> construct, C</> which terminates C<qq/> construct,
C<]> which terminates C<qq[> construct, or C<E<gt>> which terminates a
fileglob started with C<<>.

When searching for one-char non-matching delimiter, such as C</>, combinations
C<\\> and C<\/> are skipped.  When searching for one-char matching delimiter,
such as C<]>, combinations C<\\>, C<\]> and C<\[> are skipped, and 
nested C<[>, C<]> are skipped as well.  When searching for multichar delimiter
no skipping is performed.  

For constructs with 3-part delimiters (C<s///> etc.) the search is
repeated once more.

During this search no attention is paid to the semantic of the construct,
thus:

    "$hash{"$foo/$bar"}"

or:

    m/ 
      bar	# NOT a comment, this slash / terminated m//!
     /x

do not form legal quoted expressions, the quoted part ends on the first C<">
and C</>, and the rest happens to be a syntax error.  Note that since the slash
which terminated C<m//> was followed by a C<SPACE>, the above is not C<m//x>, 
but rather C<m//> with no 'x' switch.  So the embedded C<#> is interpreted
as a literal C<#>.

=item Removal of backslashes before delimiters

During the second pass the text between the starting delimiter and 
the ending delimiter is copied to a safe location, and the C<\> is 
removed from combinations consisting of C<\> and delimiter(s) (both starting
and ending delimiter if they differ).

The removal does not happen for multi-char delimiters.

Note that the combination C<\\> is left as it was!

Starting from this step no information about the delimiter(s) is used in the
parsing.

=item Interpolation

Next step is interpolation in the obtained delimiter-independent text.
There are four different cases.

=over

=item C<<<'EOF'>, C<m''>, C<s'''>, C<tr///>, C<y///>

No interpolation is performed.

=item C<''>, C<q//>

The only interpolation is removal of C<\> from pairs C<\\>.

=item C<"">, C<``>, C<qq//>, C<qx//>, C<<file*globE<gt>>

C<\Q>, C<\U>, C<\u>, C<\L>, C<\l> (possibly paired with C<\E>) are converted
to corresponding Perl constructs, thus C<"$foo\Qbaz$bar"> is converted to :

   $foo . (quotemeta("baz" . $bar));

Other combinations of C<\> with following chars are substituted with
appropriate expansions.

Let it be stressed that I<whatever is between C<\Q> and C<\E>> is interpolated
in the usual way.  Say, C<"\Q\\E"> has no C<\E> inside: it has C<\Q>, C<\\>,
and C<E>, thus the result is the same as for C<"\\\\E">.  Generally speaking,
having backslashes between C<\Q> and C<\E> may lead to counterintuitive
results.  So, C<"\Q\t\E"> is converted to:

  quotemeta("\t")

which is the same as C<"\\\t"> (since TAB is not alphanumerical).  Note also
that:

  $str = '\t';
  return "\Q$str";

may be closer to the conjectural I<intention> of the writer of C<"\Q\t\E">.

Interpolated scalars and arrays are internally converted to the C<join> and
C<.> Perl operations, thus C<"$foo >>> '@@arr'"> becomes:

  $foo . " >>> '" . (join $", @@arr) . "'";

All the operations in the above are performed simultaneously left-to-right.

Since the result of "\Q STRING \E" has all the metacharacters quoted
there is no way to insert a literal C<$> or C<@@> inside a C<\Q\E> pair: if
protected by C<\> C<$> will be quoted to became "\\\$", if not, it is 
interpreted as starting an interpolated scalar.

Note also that the interpolating code needs to make a decision on where the 
interpolated scalar ends. For instance, whether C<"a $b -E<gt> {c}"> means:

  "a " . $b . " -> {c}";

or:

  "a " . $b -> {c};

I<Most of the time> the decision is to take the longest possible text which
does not include spaces between components and contains matching
braces/brackets.  Since the outcome may be determined by I<voting> based
on heuristic estimators, the result I<is not strictly predictable>, but
is usually correct for the ambiguous cases.

=item C<?RE?>, C</RE/>, C<m/RE/>, C<s/RE/foo/>, 

Processing of C<\Q>, C<\U>, C<\u>, C<\L>, C<\l> and interpolation happens 
(almost) as with C<qq//> constructs, but I<the substitution of C<\> followed by
RE-special chars (including C<\>) is not performed>!  Moreover, 
inside C<(?{BLOCK})>, C<(?# comment )>, and C<#>-comment of
C<//x>-regular expressions no processing is performed at all.
This is the first step where presence of the C<//x> switch is relevant.

Interpolation has several quirks: C<$|>, C<$(> and C<$)> are not interpolated, and
constructs C<$var[SOMETHING]> are I<voted> (by several different estimators) 
to be an array element or C<$var> followed by a RE alternative.  This is
the place where the notation C<${arr[$bar]}> comes handy: C</${arr[0-9]}/>
is interpreted as an array element C<-9>, not as a regular expression from
variable C<$arr> followed by a digit, which is the interpretation of 
C</$arr[0-9]/>.  Since voting among different estimators may be performed,
the result I<is not predictable>.

It is on this step that C<\1> is converted to C<$1> in the replacement
text of C<s///>.

Note that absence of processing of C<\\> creates specific restrictions on the
post-processed text: if the delimiter is C</>, one cannot get the combination
C<\/> into the result of this step: C</> will finish the regular expression,
C<\/> will be stripped to C</> on the previous step, and C<\\/> will be left
as is.  Since C</> is equivalent to C<\/> inside a regular expression, this
does not matter unless the delimiter is a special character for the RE engine,
as in C<s*foo*bar*>, C<m[foo]>, or C<?foo?>, or an alphanumeric char, as in:

  m m ^ a \s* b mmx;

In the above RE, which is intentionally obfuscated for illustration, the
delimiter is C<m>, the modifier is C<mx>, and after backslash-removal the
RE is the same as for C<m/ ^ a s* b /mx>).

=back

This step is the last one for all the constructs except regular expressions,
which are processed further.

=item Interpolation of regular expressions

All the previous steps were performed during the compilation of Perl code,
this one happens in run time (though it may be optimized to be calculated
at compile time if appropriate).  After all the preprocessing performed 
above (and possibly after evaluation if catenation, joining, up/down-casing 
and C<quotemeta()>ing are involved) the resulting I<string> is passed to RE
engine for compilation.

Whatever happens in the RE engine is better be discussed in L<perlre>,
but for the sake of continuity let us do it here.

This is another step where presence of the C<//x> switch is relevant.
The RE engine scans the string left-to-right, and converts it to a finite 
automaton.  

Backslashed chars are either substituted by corresponding literal 
strings (as with C<\{>), or generate special nodes of the finite automaton
(as with C<\b>).  Characters which are special to the RE engine (such as
C<|>) generate corresponding nodes or groups of nodes.  C<(?#...)>
comments are ignored.  All the rest is either converted to literal strings
to match, or is ignored (as is whitespace and C<#>-style comments if
C<//x> is present).

Note that the parsing of the construct C<[...]> is performed using 
rather different rules than for the rest of the regular expression.  
The terminator of this construct is found using the same rules as for
finding a terminator of a C<{}>-delimited construct, the only exception
being that C<]> immediately following C<[> is considered as if preceded
by a backslash.  Similarly, the terminator of C<(?{...})> is found using
the same rules as for finding a terminator of a C<{}>-delimited construct.

It is possible to inspect both the string given to RE engine, and the
resulting finite automaton.  See arguments C<debug>/C<debugcolor>
of C<use L<re>> directive, and/or B<-Dr> option of Perl in
L<perlrun/Switches>.

=item Optimization of regular expressions

This step is listed for completeness only.  Since it does not change
semantics, details of this step are not documented and are subject
to change.  This step is performed over the finite automaton generated
during the previous pass.

However, in older versions of Perl C<L<split>> used to silently
optimize C</^/> to mean C</^/m>.  This behaviour, though present
in current versions of Perl, may be deprecated in future.

=back

d917 2
a918 3
There are several I/O operators you should know about.

A string enclosed by backticks (grave accents) first undergoes
d921 2
a922 2
of the pseudo-literal, like in a shell.  In scalar context, a single
string consisting of all the output is returned.  In list context,
d932 1
a932 1
always undergo shell expansion as well, see L<perlsec> for
d935 10
a944 17
In a scalar context, evaluating a filehandle in angle brackets yields the
next line from that file (newline, if any, included), or C<undef> at
end-of-file.  When C<$/> is set to C<undef> (i.e. file slurp mode),
and the file is empty, it returns C<''> the first time, followed by
C<undef> subsequently.

Ordinarily you must assign the returned value to a variable, but there is one
situation where an automatic assignment happens.  I<If and ONLY if> the
input symbol is the only thing inside the conditional of a C<while> or
C<for(;;)> loop, the value is automatically assigned to the variable
C<$_>.  In these loop constructs, the assigned value (whether assignment
is automatic or explicit) is then tested to see if it is defined.
The defined test avoids problems where line has a string value
that would be treated as false by perl e.g. "" or "0" with no trailing
newline. (This may seem like an odd thing to you, but you'll use the 
construct in almost every Perl script you write.) Anyway, the following 
lines are equivalent to each other:
a946 1
    while ($_ = <STDIN>) { print; }
a949 1
    print while ($_ = <STDIN>);
d952 2
a953 15
and this also behaves similarly, but avoids the use of $_ :

    while (my $line = <STDIN>) { print $line }    

If you really mean such values to terminate the loop they should be 
tested for explicitly:

    while (($_ = <STDIN>) ne '0') { ... }
    while (<STDIN>) { last unless $_; ... }

In other boolean contexts, C<E<lt>I<filehandle>E<gt>> without explicit C<defined>
test or comparison will solicit a warning if C<-w> is in effect.

The filehandles STDIN, STDOUT, and STDERR are predefined.  (The
filehandles C<stdin>, C<stdout>, and C<stderr> will also work except in
d956 1
a956 1
function.  See L<perlfunc/open> for details on this.
d958 1
a958 1
If a E<lt>FILEHANDLEE<gt> is used in a context that is looking for a list, a
a962 3
E<lt>FILEHANDLEE<gt> may also be spelt readline(FILEHANDLE).  See
L<perlfunc/readline>.

d967 1
a967 1
checked, and if it is empty, C<$ARGV[0]> is set to "-", which when opened
d977 1
a977 1
    unshift(@@ARGV, '-') unless @@ARGV;
d987 3
a989 3
$ARGV.  It also uses filehandle I<ARGV> internally--E<lt>E<gt> is just a
synonym for E<lt>ARGVE<gt>, which is magical.  (The pseudo code above
doesn't work because it treats E<lt>ARGVE<gt> as non-magical.)
d994 1
a994 11
under C<eof> for how to reset line numbers on each file.)

If you want to set @@ARGV to your own list of files, go right ahead.  
This sets @@ARGV to all plain text files if no @@ARGV was given:

    @@ARGV = grep { -f && -T } glob('*') unless @@ARGV;

You can even set them to pipe commands.  For example, this automatically
filters compressed arguments through B<gzip>:

    @@ARGV = map { /\.(gz|Z)$/ ? "gzip -dc < $_ |" : $_ } @@ARGV;
d996 2
a997 1
If you want to pass switches into your script, you can use one of the
d1005 1
a1005 1
	# ...		# other switches
a1006 1

d1008 1
a1008 1
	# ...		# code for each line
d1011 3
a1013 3
The E<lt>E<gt> symbol will return C<undef> for end-of-file only once.  
If you call it again after this it will assume you are processing another 
@@ARGV list, and if you haven't set @@ARGV, will input from STDIN.
d1016 2
a1017 2
variable (e.g., E<lt>$fooE<gt>), then that variable contains the name of the
filehandle to input from, or its typeglob, or a reference to the same.  For example:
d1022 11
a1032 17
If what's within the angle brackets is neither a filehandle nor a simple
scalar variable containing a filehandle name, typeglob, or typeglob
reference, it is interpreted as a filename pattern to be globbed, and
either a list of filenames or the next filename in the list is returned,
depending on context.   This distinction is determined on syntactic
grounds alone.  That means C<E<lt>$xE<gt>> is always a readline from
an indirect handle, but C<E<lt>$hash{key}E<gt>> is always a glob.
That's because $x is a simple scalar variable, but C<$hash{key}> is
not--it's a hash element.

One level of double-quote interpretation is done first, but you can't
say C<E<lt>$fooE<gt>> because that's an indirect filehandle as explained
in the previous paragraph.  (In older versions of Perl, programmers
would insert curly brackets to force interpretation as a filename glob:
C<E<lt>${foo}E<gt>>.  These days, it's considered cleaner to call the
internal function directly as C<glob($foo)>, which is probably the right
way to have done it in the first place.)  Example:
d1053 2
a1054 2
and do your own grep() on the filenames.  Furthermore, due to its current
implementation of using a shell, the glob() routine may get "Arg list too
d1057 1
a1057 1
A glob evaluates its (embedded) argument only when it is starting a new
d1060 4
a1063 7
anyway.  In scalar context, however, the operator returns the next value
each time it is called, or a C<undef> value if you've just run out. As
for filehandles an automatic C<defined> is generated when the glob
occurs in the test part of a C<while> or C<for> - because legal glob returns
(e.g. a file called F<0>) would otherwise terminate the loop.
Again, C<undef> is returned only once.  So if you're expecting a single value 
from a glob, it is much better to say
d1072 1
a1072 1
returning FALSE.
d1076 1
a1076 1
to become confused with the indirect filehandle notation.
d1084 1
a1084 1
compile time, whenever it determines that all arguments to an
d1093 1
a1093 1
and this all reduces to one string internally.  Likewise, if
d1097 2
a1098 2
	if (-s $file > 5 + 100 * 2**16) {  }
    }
d1100 1
a1100 1
the compiler will precompute the number that
a1103 29
=head2 Bitwise String Operators

Bitstrings of any size may be manipulated by the bitwise operators
(C<~ | & ^>).

If the operands to a binary bitwise op are strings of different sizes,
B<|> and B<^> ops will act as if the shorter operand had additional
zero bits on the right, while the B<&> op will act as if the longer
operand were truncated to the length of the shorter.  Note that the
granularity for such extension or truncation is one or more I<bytes>.

    # ASCII-based examples 
    print "j p \n" ^ " a h";        	# prints "JAPH\n"
    print "JA" | "  ph\n";          	# prints "japh\n"
    print "japh\nJunk" & '_____';   	# prints "JAPH\n";
    print 'p N$' ^ " E<H\n";		# prints "Perl\n";

If you are intending to manipulate bitstrings, you should be certain that
you're supplying bitstrings: If an operand is a number, that will imply
a B<numeric> bitwise operation. You may explicitly show which type of
operation you intend by using C<""> or C<0+>, as in the examples below.

    $foo =  150  |  105 ;	# yields 255  (0x96 | 0x69 is 0xFF)
    $foo = '150' |  105 ;	# yields 255
    $foo =  150  | '105';	# yields 255
    $foo = '150' | '105';	# yields string '155' (under ASCII)

    $baz = 0+$foo & 0+$bar;	# both ops explicitly numeric
    $biz = "$foo" ^ "$bar";	# both ops explicitly stringy
d1105 1
a1105 4
See L<perlfunc/vec> for information on how to manipulate individual bits
in a bit vector.

=head2 Integer Arithmetic
d1114 1
a1114 1
countermand this by saying
a1119 62
The bitwise operators ("&", "|", "^", "~", "<<", and ">>") always
produce integral results.  (But see also L<Bitwise String Operators>.)
However, C<use integer> still has meaning
for them.  By default, their results are interpreted as unsigned
integers.  However, if C<use integer> is in effect, their results are
interpreted as signed integers.  For example, C<~0> usually evaluates
to a large integral value.  However, C<use integer; ~0> is -1 on twos-complement machines.

=head2 Floating-point Arithmetic

While C<use integer> provides integer-only arithmetic, there is no
similar ways to provide rounding or truncation at a certain number of
decimal places.  For rounding to a certain number of digits, sprintf()
or printf() is usually the easiest route.

Floating-point numbers are only approximations to what a mathematician
would call real numbers.  There are infinitely more reals than floats,
so some corners must be cut.  For example:

    printf "%.20g\n", 123456789123456789;
    #        produces 123456789123456784

Testing for exact equality of floating-point equality or inequality is
not a good idea.  Here's a (relatively expensive) work-around to compare
whether two floating-point numbers are equal to a particular number of
decimal places.  See Knuth, volume II, for a more robust treatment of
this topic.

    sub fp_equal {
	my ($X, $Y, $POINTS) = @@_;
	my ($tX, $tY);
	$tX = sprintf("%.${POINTS}g", $X);
	$tY = sprintf("%.${POINTS}g", $Y);
	return $tX eq $tY;
    }

The POSIX module (part of the standard perl distribution) implements
ceil(), floor(), and a number of other mathematical and trigonometric
functions.  The Math::Complex module (part of the standard perl
distribution) defines a number of mathematical functions that can also
work on real numbers.  Math::Complex not as efficient as POSIX, but
POSIX can't work with complex numbers.

Rounding in financial applications can have serious implications, and
the rounding method used should be specified precisely.  In these
cases, it probably pays not to trust whichever system rounding is
being used by Perl, but to instead implement the rounding function you
need yourself.

=head2 Bigger Numbers

The standard Math::BigInt and Math::BigFloat modules provide
variable precision arithmetic and overloaded operators.
At the cost of some space and considerable speed, they
avoid the normal pitfalls associated with limited-precision
representations.

    use Math::BigInt;
    $x = Math::BigInt->new('123456789123456789');
    print $x * $x;

    # prints +15241578780673678515622620750190521
@


1.1.1.3
log
@virgin perl 5.6.0
@
text
@d8 5
a12 5
listed from highest precedence to lowest.  Operators borrowed from
C keep the same precedence relationship with each other, even where
C's precedence is slightly screwy.  (This makes learning Perl easier
for C folks.)  With very few exceptions, these all operate on scalar
values only, not array values.
d67 3
a69 3
the commas on the right of the sort are evaluated before the sort,
but the commas on the left are evaluated after.  In other words,
list operators tend to gobble up all arguments that follow, and
d71 1
a71 1
Be careful with parentheses:
d98 10
a107 12
"C<< -> >>" is an infix dereference operator, just as it is in C
and C++.  If the right side is either a C<[...]>, C<{...}>, or a
C<(...)> subscript, then the left side must be either a hard or
symbolic reference to an array, a hash, or a subroutine respectively.
(Or technically speaking, a location capable of holding a hard
reference, if it's an array or hash reference being used for
assignment.)  See L<perlreftut> and L<perlref>.

Otherwise, the right side is a method name or a simple scalar
variable containing either the method name or a subroutine reference,
and the left side must be either an object (a blessed reference)
or a class name (that is, a package name).  See L<perlobj>.
d132 1
a132 1
Binary "**" is the exponentiation operator.  It binds even more
d149 3
a151 6
Unary "~" performs bitwise negation, i.e., 1's complement.  For
example, C<0666 & ~027> is 0640.  (See also L<Integer Arithmetic> and
L<Bitwise String Operators>.)  Note that the width of the result is
platform-dependent: ~0 is 32 bits wide on a 32-bit platform, but 64
bits wide on a 64-bit platform, so if you are expecting a certain bit
width, remember use the & operator to mask off the excess bits.
d158 4
a161 4
Unary "\" creates a reference to whatever follows it.  See L<perlreftut>
and L<perlref>.  Do not confuse this behavior with the behavior of
backslash within a string, although both forms do convey the notion
of protecting the next thing from interpolation.
d170 2
a171 5
$_.  When used in scalar context, the return value generally indicates the
success of the operation.  Behavior in list context depends on the particular
operator.  See L</"Regexp Quote-Like Operators"> for details.

If the right argument is an expression rather than a search pattern,
d173 1
a173 1
time.  This can be less efficient than an explicit search, because the
d196 4
a199 5
Binary "x" is the repetition operator.  In scalar context or if the left
operand is not enclosed in parentheses, it returns a string consisting
of the left operand repeated the number of times specified by the right
operand.  In list context, if the left operand is enclosed in
parentheses, it repeats the list.
d259 1
a259 1
Binary "<" returns true if the left argument is numerically less than
d262 1
a262 1
Binary ">" returns true if the left argument is numerically greater
d265 1
a265 1
Binary "<=" returns true if the left argument is numerically less than
d268 1
a268 1
Binary ">=" returns true if the left argument is numerically greater
d291 1
a291 1
Binary "<=>" returns -1, 0, or 1 depending on whether the left
d362 1
a362 1
Using "or" for assignment is unlikely to do what you want; see below.
d368 6
a373 8
array of values counting (up by ones) from the left value to the right
value.  If the left value is greater than the right value then it
returns the empty array.  The range operator is useful for writing
C<foreach (1..10)> loops and for doing slice operations on arrays.  In
the current implementation, no temporary array is created when the
range operator is used as the expression in C<foreach> loops, but older
versions of Perl might burn a lot of memory when you write something
like this:
d385 1
a385 1
again.  It doesn't become false till the next time the range operator is
d388 14
a401 17
If you don't want it to test the right operand till the next
evaluation, as in B<sed>, just use three dots ("...") instead of
two.  In all other regards, "..." behaves just like ".." does.

The right operand is not evaluated while the operator is in the
"false" state, and the left operand is not evaluated while the
operator is in the "true" state.  The precedence is a little lower
than || and &&.  The value returned is either the empty string for
false, or a sequence number (beginning with 1) for true.  The
sequence number is reset for each range encountered.  The final
sequence number in a range has the string "E0" appended to it, which
doesn't affect its numeric value, but gives you something to search
for if you want to exclude the endpoint.  You can exclude the
beginning point by waiting for the sequence number to be greater
than 1.  If either operand of scalar ".." is a constant expression,
that operand is implicitly compared to the C<$.> variable, the
current line number.  Examples:
d430 1
a430 1
to get all normal letters of the alphabet, or
d465 2
a479 4
That should probably be written more simply as:

    $a += ($a % 2) ? 10 : 2;

d501 1
a501 1
Although these are grouped by family, they all have the precedence
d504 4
a507 4
Unlike in C, the scalar assignment operator produces a valid lvalue.
Modifying an assignment is equivalent to doing the assignment and
then modifying the variable that was assigned to.  This is useful
for modifying a copy of something, like this:
a519 5
Similarly, a list assignment in list context produces the list of
lvalues assigned to, and a list assignment in scalar context returns
the number of elements produced by the expression on the right hand
side of the assignment.

d529 1
a529 1
The => digraph is mostly just a synonym for the comma operator.  It's useful for
d574 1
a574 1
However, when it's a list-context assignment and you're trying to use
d581 1
a581 1
Then again, you could always use parentheses. 
d603 1
a603 1
Type-casting operator.
d614 3
a616 1
any pair of delimiters you choose.  
d628 1
a628 18
Non-bracketing delimiters use the same character fore and aft, but the four
sorts of brackets (round, angle, square, curly) will all nest, which means
that 

	q{foo{bar}baz} 

is the same as 

	'foo{bar}baz'

Note, however, that this does not always work for quoting Perl code:

	$s = q{ if($a eq "}") ... }; # WRONG

is a syntax error. The C<Text::Balanced> module on CPAN is able to do this
properly.

There can be whitespace between the operator and the quoting
d630 3
a632 3
C<q#foo#> is parsed as the string C<foo>, while C<q #foo#> is the
operator C<q> followed by a comment.  Its argument will be taken
from the next line.  This allows you to write:
d637 3
a639 3
For constructs that do interpolate, variables beginning with "C<$>"
or "C<@@>" are interpolated, as are the following escape sequences.  Within
a transliteration, the first eleven of these sequences may be used.
d650 1
a650 3
    \x{263a}	wide hex char	(SMILEY)
    \c[		control char    (ESC)
    \N{name}	named char
d660 1
a660 2
and C<\U> is taken from the current locale.  See L<perllocale>.  For
documentation of C<\N{name}>, see L<charnames>.
d664 1
a664 1
newline character.  It is only an illusion that the operating system,
d687 4
a690 5
Apart from the behavior described above, Perl does not expand
multiple levels of interpolation.  In particular, contrary to the
expectations of shell programmers, back-quotes do I<NOT> interpolate
within double quotes, nor do single quotes impede evaluation of
variables when used within double quotes.
d697 12
d727 2
a728 3
This usage is vaguely depreciated, which means it just might possibly
be removed in some distant future version of Perl, perhaps somewhere
around the year 2168.
d735 7
a741 7
true if it succeeds, false if it fails.  If no string is specified
via the C<=~> or C<!~> operator, the $_ string is searched.  (The
string specified with C<=~> need not be an lvalue--it may be the
result of an expression evaluation, but remember the C<=~> binds
rather tightly.)  See also L<perlre>.  See L<perllocale> for
discussion of additional considerations that apply when C<use locale>
is in effect.
d755 2
a756 2
as delimiters.  This is particularly useful for matching path names
that contain "/", to avoid LTS (leaning toothpick syndrome).  If "?" is
d758 2
a759 1
If "'" is the delimiter, no interpolation is performed on the PATTERN.
d770 1
a770 1
Perl won't even notice.  See also L<"qr//">.
d775 1
a775 1
If the C</g> option is not used, C<m//> in list context returns a
d805 6
a810 7
The C</g> modifier specifies global pattern matching--that is,
matching as many times as possible within the string.  How it behaves
depends on the context.  In list context, it returns a list of the
substrings matched by any capturing parentheses in the regular
expression.  If there are no parentheses, it returns a list of all
the matched strings, as if there were parentheses around the whole
pattern.
d813 1
a813 1
returning true if it matches, and false if there is no further match.
d823 2
a824 2
the C</g> modifier.  (Currently, without C</g>, C<\G> behaves just like
C<\A>, but that's accidental and may change in the future.)
d832 6
a837 4
    $/ = ""; $* = 1;  # $* deprecated in modern perls
    while (defined($paragraph = <>)) {
	while ($paragraph =~ /[a-z]['")]*[.!?]+['")]*\s/g) {
	    $sentences++;
d893 1
a893 1
A single-quoted, literal string.  A backslash represents a backslash
d909 1
a909 1
		if /\b(tcl|java|python)\b/i;      # :-)
d912 1
a912 1
=item qr/STRING/imosx
d914 4
a917 5
This operators quotes--and compiles--its I<STRING> as a regular
expression.  I<STRING> is interpolated the same way as I<PATTERN>
in C<m/PATTERN/>.  If "'" is used as the delimiter, no interpolation
is done.  Returns a Perl value which may be used instead of the
corresponding C</STRING/imosx> expression.
d936 1
a936 1
operator, using qr() may have speed advantages in some situations,
d944 1
a944 1
	    foreach my $pat (@@compiled) {
d951 5
a955 5
Precompilation of the pattern into an internal representation at
the moment of qr() avoids a need to recompile the pattern every
time a match C</$pat/> is attempted.  (Perl has many other internal
optimizations, but none would be triggered in the above example if
we did not use qr() operator.)
d1012 1
a1012 1
How that string gets evaluated is entirely subject to the command
a1025 6
Beginning with v5.6.0, Perl will attempt to flush all files opened for
output before starting the child process, but this may not be supported
on some platforms (see L<perlport>).  To be safe, you may need to set
C<$|> ($AUTOFLUSH in English) or call the C<autoflush()> method of
C<IO::Handle> on any open handles.

d1044 2
a1045 3
Evaluates to a list of the words extracted out of STRING, using embedded
whitespace as the word delimiters.  It can be understood as being roughly
equivalent to:
d1049 4
a1052 2
the difference being that it generates a real list at compile time.  So
this expression:
d1054 1
a1054 1
    qw(foo bar baz)
d1056 1
a1056 3
is semantically equivalent to the list:

    'foo', 'bar', 'baz'
d1063 4
a1066 4
A common mistake is to try to separate the words with comma or to
put comments into a multi-line C<qw>-string.  For this reason, the
C<use warnings> pragma and the B<-w> switch (that is, the C<$^W> variable) 
produces warnings if the STRING contains the "," or the "#" character.
d1079 1
a1079 1
If the delimiter chosen is a single quote, no interpolation is
d1107 4
a1110 5
C<s(foo)(bar)> or C<< s<foo>/bar/ >>.  A C</e> will cause the
replacement portion to be treated as a full-fledged Perl expression
and evaluated right then and there.  It is, however, syntax checked at
compile-time. A second C<e> modifier will cause the replacement portion
to be C<eval>ed before being run as a Perl expression.
d1137 2
a1138 6
    # Add one to the value of any numbers in the string
    s/(\d+)/1 + $1/eg;

    # This will expand any embedded scalar variable
    # (including lexicals) in $_ : First $1 is interpolated
    # to the variable name, and then evaluated
d1158 2
a1159 2
B<sed>, we use the \<I<digit>> form in only the left hand side.
Anywhere else it's $<I<digit>>.
d1162 1
a1162 1
to occur that you might want.  Here are two common cases:
d1165 2
a1166 1
    1 while s/(\d)(\d\d\d)(?!\d)/$1,$2/g;  
a1170 1
=item tr/SEARCHLIST/REPLACEMENTLIST/cdsUC
d1172 3
a1174 1
=item y/SEARCHLIST/REPLACEMENTLIST/cdsUC
a1201 2
    U	Translate to/from UTF-8.
    C	Translate to/from 8-bit char (octet).
d1203 8
a1210 8
If the C</c> modifier is specified, the SEARCHLIST character set
is complemented.  If the C</d> modifier is specified, any characters
specified by SEARCHLIST not found in REPLACEMENTLIST are deleted.
(Note that this is slightly more flexible than the behavior of some
B<tr> programs, which delete anything they find in the SEARCHLIST,
period.) If the C</s> modifier is specified, sequences of characters
that were transliterated to the same character are squashed down
to a single instance of the character.
a1218 4
The first C</U> or C</C> modifier applies to the left side of the translation.
The second one applies to the right side.  If present, these modifiers override
the current utf8 state.

d1238 1
a1238 5
    tr/\0-\xFF//CU;		# change Latin-1 to Unicode
    tr/\0-\x{FF}//UC;		# change Unicode to Latin-1

If multiple transliterations are given for a character, only the
first one is used:
d1244 1
a1244 1
Because the transliteration table is built at compile time, neither
d1246 2
a1247 2
interpolation.  That means that if you want to use variables, you
must use an eval():
d1258 24
a1281 23
When presented with something that might have several different
interpretations, Perl uses the B<DWIM> (that's "Do What I Mean")
principle to pick the most probable interpretation.  This strategy
is so successful that Perl programmers often do not suspect the
ambivalence of what they write.  But from time to time, Perl's
notions differ substantially from what the author honestly meant.

This section hopes to clarify how Perl handles quoted constructs.
Although the most common reason to learn this is to unravel labyrinthine
regular expressions, because the initial steps of parsing are the
same for all quoting operators, they are all discussed together.

The most important Perl parsing rule is the first one discussed
below: when processing a quoted construct, Perl first finds the end
of that construct, then interprets its contents.  If you understand
this rule, you may skip the rest of this section on the first
reading.  The other rules are likely to contradict the user's
expectations much less frequently than this first one.

Some passes discussed below are performed concurrently, but because
their results are the same, we consider them individually.  For different
quoting constructs, Perl performs different numbers of passes, from
one to five, but these passes are always performed in the same order.
d1287 11
a1297 12
The first pass is finding the end of the quoted construct, whether
it be a multicharacter delimiter C<"\nEOF\n"> in the C<<<EOF>
construct, a C</> that terminates a C<qq//> construct, a C<]> which
terminates C<qq[]> construct, or a C<< > >> which terminates a
fileglob started with C<< < >>.

When searching for single-character non-pairing delimiters, such
as C</>, combinations of C<\\> and C<\/> are skipped.  However,
when searching for single-character pairing delimiter like C<[>,
combinations of C<\\>, C<\]>, and C<\[> are all skipped, and nested
C<[>, C<]> are skipped as well.  When searching for multicharacter
delimiters, nothing is skipped.
d1299 2
a1300 2
For constructs with three-part delimiters (C<s///>, C<y///>, and
C<tr///>), the search is repeated once more.
d1302 2
a1303 2
During this search no attention is paid to the semantics of the construct.
Thus:
d1313 5
a1317 5
do not form legal quoted expressions.   The quoted part ends on the
first C<"> and C</>, and the rest happens to be a syntax error.
Because the slash that terminated C<m//> was followed by a C<SPACE>,
the example above is not C<m//x>, but rather C<m//> with no C</x>
modifier.  So the embedded C<#> is interpreted as a literal C<#>.
d1321 4
a1324 6
During the second pass, text between the starting and ending
delimiters is copied to a safe location, and the C<\> is removed
from combinations consisting of C<\> and delimiter--or delimiters,
meaning both starting and ending delimiters will should these differ.
This removal does not happen for multi-character delimiters.
Note that the combination C<\\> is left intact, just as it was.
d1326 6
a1331 2
Starting from this step no information about the delimiters is
used in parsing.
d1335 2
a1336 2
The next step is interpolation in the text obtained, which is now
delimiter-independent.  There are four different cases.
d1348 6
a1353 1
=item C<"">, C<``>, C<qq//>, C<qx//>, C<< <file*glob> >>
d1355 13
a1367 12
C<\Q>, C<\U>, C<\u>, C<\L>, C<\l> (possibly paired with C<\E>) are
converted to corresponding Perl constructs.  Thus, C<"$foo\Qbaz$bar">
is converted to C<$foo . (quotemeta("baz" . $bar))> internally.
The other combinations are replaced with appropriate expansions.

Let it be stressed that I<whatever falls between C<\Q> and C<\E>>
is interpolated in the usual way.  Something like C<"\Q\\E"> has
no C<\E> inside.  instead, it has C<\Q>, C<\\>, and C<E>, so the
result is the same as for C<"\\\\E">.  As a general rule, backslashes
between C<\Q> and C<\E> may lead to counterintuitive results.  So,
C<"\Q\t\E"> is converted to C<quotemeta("\t")>, which is the same
as C<"\\\t"> (since TAB is not alphanumeric).  Note also that:
d1374 2
a1375 2
Interpolated scalars and arrays are converted internally to the C<join> and
C<.> catentation operations.  Thus, C<"$foo XXX '@@arr'"> becomes:
d1377 1
a1377 1
  $foo . " XXX '" . (join $", @@arr) . "'";
d1379 1
a1379 1
All operations above are performed simultaneously, left to right.
d1381 7
a1387 9
Because the result of C<"\Q STRING \E"> has all metacharacters
quoted, there is no way to insert a literal C<$> or C<@@> inside a
C<\Q\E> pair.  If protected by C<\>, C<$> will be quoted to became
C<"\\\$">; if not, it is interpreted as the start of an interpolated
scalar.

Note also that the interpolation code needs to make a decision on
where the interpolated scalar ends.  For instance, whether 
C<< "a $b -> {c}" >> really means:
d1395 5
a1399 5
Most of the time, the longest possible text that does not include
spaces between components and which contains matching braces or
brackets.  because the outcome may be determined by voting based
on heuristic estimators, the result is not strictly predictable.
Fortunately, it's usually correct for ambiguous cases.
d1403 26
a1428 33
Processing of C<\Q>, C<\U>, C<\u>, C<\L>, C<\l>, and interpolation
happens (almost) as with C<qq//> constructs, but the substitution
of C<\> followed by RE-special chars (including C<\>) is not
performed.  Moreover, inside C<(?{BLOCK})>, C<(?# comment )>, and
a C<#>-comment in a C<//x>-regular expression, no processing is
performed whatsoever.  This is the first step at which the presence
of the C<//x> modifier is relevant.

Interpolation has several quirks: C<$|>, C<$(>, and C<$)> are not
interpolated, and constructs C<$var[SOMETHING]> are voted (by several
different estimators) to be either an array element or C<$var>
followed by an RE alternative.  This is where the notation
C<${arr[$bar]}> comes handy: C</${arr[0-9]}/> is interpreted as
array element C<-9>, not as a regular expression from the variable
C<$arr> followed by a digit, which would be the interpretation of
C</$arr[0-9]/>.  Since voting among different estimators may occur,
the result is not predictable.

It is at this step that C<\1> is begrudgingly converted to C<$1> in
the replacement text of C<s///> to correct the incorrigible
I<sed> hackers who haven't picked up the saner idiom yet.  A warning
is emitted if the C<use warnings> pragma or the B<-w> command-line flag
(that is, the C<$^W> variable) was set.

The lack of processing of C<\\> creates specific restrictions on
the post-processed text.  If the delimiter is C</>, one cannot get
the combination C<\/> into the result of this step.  C</> will
finish the regular expression, C<\/> will be stripped to C</> on
the previous step, and C<\\/> will be left as is.  Because C</> is
equivalent to C<\/> inside a regular expression, this does not
matter unless the delimiter happens to be character special to the
RE engine, such as in C<s*foo*bar*>, C<m[foo]>, or C<?foo?>; or an
alphanumeric char, as in:
d1432 1
a1432 1
In the RE above, which is intentionally obfuscated for illustration, the
d1434 1
a1434 3
RE is the same as for C<m/ ^ a s* b /mx>).  There's more than one 
reason you're encouraged to restrict your delimiters to non-alphanumeric,
non-whitespace choices.
d1438 1
a1438 1
This step is the last one for all constructs except regular expressions,
d1443 34
a1476 35
Previous steps were performed during the compilation of Perl code,
but this one happens at run time--although it may be optimized to
be calculated at compile time if appropriate.  After preprocessing
described above, and possibly after evaluation if catenation,
joining, casing translation, or metaquoting are involved, the
resulting I<string> is passed to the RE engine for compilation.

Whatever happens in the RE engine might be better discussed in L<perlre>,
but for the sake of continuity, we shall do so here.

This is another step where the presence of the C<//x> modifier is
relevant.  The RE engine scans the string from left to right and
converts it to a finite automaton.

Backslashed characters are either replaced with corresponding
literal strings (as with C<\{>), or else they generate special nodes
in the finite automaton (as with C<\b>).  Characters special to the
RE engine (such as C<|>) generate corresponding nodes or groups of
nodes.  C<(?#...)> comments are ignored.  All the rest is either
converted to literal strings to match, or else is ignored (as is
whitespace and C<#>-style comments if C<//x> is present).

Parsing of the bracketed character class construct, C<[...]>, is
rather different than the rule used for the rest of the pattern.
The terminator of this construct is found using the same rules as
for finding the terminator of a C<{}>-delimited construct, the only
exception being that C<]> immediately following C<[> is treated as
though preceded by a backslash.  Similarly, the terminator of
C<(?{...})> is found using the same rules as for finding the
terminator of a C<{}>-delimited construct.

It is possible to inspect both the string given to RE engine and the
resulting finite automaton.  See the arguments C<debug>/C<debugcolor>
in the C<use L<re>> pragma, as well as Perl's B<-Dr> command-line
switch documented in L<perlrun/"Command Switches">.
d1482 2
a1483 2
to change without notice.  This step is performed over the finite
automaton that was generated during the previous pass.
d1485 3
a1487 2
It is at this stage that C<split()> silently optimizes C</^/> to
mean C</^/m>.
d1496 6
a1501 6
double-quote interpolation.  It is then interpreted as an external
command, and the output of that command is the value of the
pseudo-literal, j
string consisting of all output is returned.  In list context, a
list of values is returned, one per line of output.  (You can set
C<$/> to use a different line terminator.)  The command is executed
d1507 22
a1528 23
To pass a literal dollar-sign through to the shell you need to hide
it with a backslash.  The generalized form of backticks is C<qx//>.
(Because backticks always undergo shell expansion as well, see
L<perlsec> for security concerns.)

In scalar context, evaluating a filehandle in angle brackets yields
the next line from that file (the newline, if any, included), or
C<undef> at end-of-file or on error.  When C<$/> is set to C<undef>
(sometimes known as file-slurp mode) and the file is empty, it
returns C<''> the first time, followed by C<undef> subsequently.

Ordinarily you must assign the returned value to a variable, but
there is one situation where an automatic assignment happens.  If
and only if the input symbol is the only thing inside the conditional
of a C<while> statement (even if disguised as a C<for(;;)> loop),
the value is automatically assigned to the global variable $_,
destroying whatever was there previously.  (This may seem like an
odd thing to you, but you'll use the construct in almost every Perl
script you write.)  The $_ variables is not implicitly localized.
You'll have to put a C<local $_;> before the loop if you want that
to happen.

The following lines are equivalent:
d1538 1
a1538 1
This also behaves similarly, but avoids $_ :
d1542 2
a1543 6
In these loop constructs, the assigned value (whether assignment
is automatic or explicit) is then tested to see whether it is
defined.  The defined test avoids problems where line has a string
value that would be treated as false by Perl, for example a "" or
a "0" with no trailing newline.  If you really mean for such values
to terminate the loop, they should be tested for explicitly:
d1548 2
a1549 4
In other boolean contexts, C<< <I<filehandle>> >> without an
explicit C<defined> test or comparison elicit a warning if the 
C<use warnings> pragma or the B<-w>
command-line switch (the C<$^W> variable) is in effect.
d1552 9
a1560 10
filehandles C<stdin>, C<stdout>, and C<stderr> will also work except
in packages, where they would be interpreted as local identifiers
rather than global.)  Additional filehandles may be created with
the open() function, amongst others.  See L<perlopentut> and
L<perlfunc/open> for details on this.

If a <FILEHANDLE> is used in a context that is looking for
a list, a list comprising all input lines is returned, one line per
list element.  It's easy to grow to a rather large data space this
way, so use with care.
d1562 2
a1563 2
<FILEHANDLE> may also be spelled C<readline(*FILEHANDLE)>.
See L<perlfunc/readline>.
d1565 2
a1566 2
The null filehandle <> is special: it can be used to emulate the
behavior of B<sed> and B<awk>.  Input from <> comes either from
d1568 1
a1568 1
how it works: the first time <> is evaluated, the @@ARGV array is
d1587 5
a1591 6
except that it isn't so cumbersome to say, and will actually work.
It really does shift the @@ARGV array and put the current filename
into the $ARGV variable.  It also uses filehandle I<ARGV>
internally--<> is just a synonym for <ARGV>, which
is magical.  (The pseudo code above doesn't work because it treats
<ARGV> as non-magical.)
d1593 1
a1593 1
You can modify @@ARGV before the first <> as long as the array ends up
d1595 2
a1596 2
continue as though the input were one big happy file.  See the example
in L<perlfunc/eof> for how to reset line numbers on each file.
d1623 7
a1629 8
The <> symbol will return C<undef> for end-of-file only once.  
If you call it again after this, it will assume you are processing another 
@@ARGV list, and if you haven't set @@ARGV, will read input from STDIN.

If angle brackets contain is a simple scalar variable (e.g.,
<$foo>), then that variable contains the name of the
filehandle to input from, or its typeglob, or a reference to the
same.  For example:
d1638 3
a1640 3
depending on context.  This distinction is determined on syntactic
grounds alone.  That means C<< <$x> >> is always a readline() from
an indirect handle, but C<< <$hash{key}> >> is always a glob().
d1645 1
a1645 1
say C<< <$foo> >> because that's an indirect filehandle as explained
d1648 1
a1648 1
C<< <${foo}> >>.  These days, it's considered cleaner to call the
d1650 1
a1650 1
way to have done it in the first place.)  For example:
d1656 1
a1656 1
is roughly equivalent to:
d1664 3
a1666 2
except that the globbing is actually done internally using the standard
C<File::Glob> extension.  Of course, the shortest way to do the above is:
d1670 15
a1684 11
A (file)glob evaluates its (embedded) argument only when it is
starting a new list.  All values must be read before it will start
over.  In list context, this isn't important because you automatically
get them all anyway.  However, in scalar context the operator returns
the next value each time it's called, or C
run out.  As with filehandle reads, an automatic C<defined> is
generated when the glob occurs in the test part of a C<while>,
because legal glob returns (e.g. a file called F<0>) would otherwise
terminate the loop.  Again, C<undef> is returned only once.  So if
you're expecting a single value from a glob, it is much better to
say
d1693 1
a1693 1
returning false.
d1705 1
a1705 1
compile time whenever it determines that all arguments to an
d1708 1
a1708 1
variable substitution.  Backslash interpolation also happens at
d1721 3
a1723 2
the compiler will precompute the number which that expression
represents so that the interpreter won't have to.
d1730 5
a1734 6
If the operands to a binary bitwise op are strings of different
sizes, B<|> and B<^> ops act as though the shorter operand had
additional zero bits on the right, while the B<&> op acts as though
the longer operand were truncated to the length of the shorter.
The granularity for such extension or truncation is one or more
bytes.
d1742 1
a1742 1
If you are intending to manipulate bitstrings, be certain that
d1744 1
a1744 1
a B<numeric> bitwise operation.  You may explicitly show which type of
d1760 1
a1760 1
By default, Perl assumes that it must do most of its arithmetic in
d1766 2
a1767 2
(if it feels like it) from here to the end of the enclosing BLOCK.
An inner BLOCK may countermand this by saying
d1771 9
a1779 14
which lasts until the end of that BLOCK.  Note that this doesn't
mean everything is only an integer, merely that Perl may use integer
operations if it is so inclined.  For example, even under C<use
integer>, if you take the C<sqrt(2)>, you'll still get C<1.4142135623731>
or so.

Used on numbers, the bitwise operators ("&", "|", "^", "~", "<<",
and ">>") always produce integral results.  (But see also L<Bitwise
String Operators>.)  However, C<use integer> still has meaning for
them.  By default, their results are interpreted as unsigned integers, but
if C<use integer> is in effect, their results are interpreted
as signed integers.  For example, C<~0> usually evaluates to a large
integral value.  However, C<use integer; ~0> is C<-1> on twos-complement
machines.
d1784 3
a1786 4
analogous mechanism to provide automatic rounding or truncation to a
certain number of decimal places.  For rounding to a certain number
of digits, sprintf() or printf() is usually the easiest route.
See L<perlfaq4>.
d1810 4
a1813 4
ceil(), floor(), and other mathematical and trigonometric functions.
The Math::Complex module (part of the standard perl distribution)
defines mathematical functions that work on both the reals and the
imaginary numbers.  Math::Complex not as efficient as POSIX, but
d1825 4
a1828 4
variable-precision arithmetic and overloaded operators, although
they're currently pretty slow.  At the cost of some space and
considerable speed, they avoid the normal pitfalls associated with
limited-precision representations.
a1834 6

The non-standard modules SSLeay::BN and Math::Pari provide
equivalent functionality (and much more) with a substantial
performance savings.

=cut
@


1.1.1.4
log
@stock perl 5.6.1
@
text
@d122 1
a122 1
C</^[a-zA-Z]*[0-9]*\z/>, the increment is done as a string, preserving each
d199 1
a199 1
Note than when C<use integer> is in scope, "%" gives you direct access
d245 1
a245 2
just like a normal function call.  For example,
because named unary operators are higher precedence than ||:
d252 1
a252 1
but, because * is higher precedence than named operators:
d302 1
a302 8
argument.  If your platform supports NaNs (not-a-numbers) as numeric
values, using them with "<=>" returns undef.  NaN is not "<", "==", ">",
"<=" or ">=" anything (even NaN), so those 5 return false. NaN != NaN
returns true, as does NaN != anything else. If your platform doesn't
support NaNs then NaN is just a string with numeric value 0.

    perl -le '$a = NaN; print "No NaN support here" if $a == $a'
    perl -le '$a = NaN; print "NaN support here" if $a != $a'
d310 2
a311 3
Binary "cmp" returns -1, 0, or 1 depending on whether the left
argument is stringwise less than, equal to, or greater than the right
argument.
d710 1
a710 1
and prefer a CR+LF (C<"\015\012"> or C<"\cM\cJ">) for line terminators,
d755 1
a755 1
This usage is vaguely deprecated, which means it just might possibly
d791 2
a792 2
for when the delimiter is a single quote.  (Note that C<$(>, C<$)>, and
C<$|> are not interpolated because they look like end-of-string tests.)
d798 1
a798 1
Perl won't even notice.  See also L<"qr/STRING/imosx">.
d851 3
a853 5
C<m//g>, if any, left off.  Without the C</g> modifier, the C<\G> assertion
still anchors at pos(), but the match is of course only attempted once.
Using C<\G> without C</g> on a target string that has not previously had a
C</g> match applied to it is the same as using the C<\A> assertion to match
the beginning of the string.
d861 1
a861 1
    $/ = "";
a878 1
    print "Final: '$1', pos=",pos,"\n" if /\G(.)/;
a887 7
    Final: 'q', pos=8

Notice that the final match matched C<q> instead of C<p>, which a match
without the C<\G> anchor would have done. Also note that the final match
did not update C<pos> -- C<pos> is only updated on a C</g> match. If the
final match did indeed match C<p>, it's a good bet that you're running an
older (pre-5.6.0) Perl.
d941 1
a941 1
This operator quotes (and possibly compiles) its I<STRING> as a regular
d1000 7
a1006 8
A string which is (possibly) interpolated and then executed as a
system command with C</bin/sh> or its equivalent.  Shell wildcards,
pipes, and redirections will be honored.  The collected standard
output of the command is returned; standard error is unaffected.  In
scalar context, it comes back as a single (potentially multi-line)
string, or undef if the command failed.  In list context, returns a
list of lines (however you've defined lines with $/ or
$INPUT_RECORD_SEPARATOR), or an empty list if the command failed.
d1210 1
a1210 1
=item tr/SEARCHLIST/REPLACEMENTLIST/cds
d1212 1
a1212 1
=item y/SEARCHLIST/REPLACEMENTLIST/cds
a1227 6
Note that C<tr> does B<not> do regular expression character classes
such as C<\d> or C<[:lower:]>.  The <tr> operator is not equivalent to
the tr(1) utility.  If you want to map strings between lower/upper
cases, see L<perlfunc/lc> and L<perlfunc/uc>, and in general consider
using the C<s> operator if you need regular expressions.

d1240 2
d1259 4
d1282 3
d1330 1
a1330 1
=over 4
d1384 1
a1384 1
=over 4
d1415 1
a1415 1
C<.> catenation operations.  Thus, C<"$foo XXX '@@arr'"> becomes:
d1549 13
a1561 13
backtick string, like in a shell.  In scalar context, a single string
consisting of all output is returned.  In list context, a list of
values is returned, one per line of output.  (You can set C<$/> to use
a different line terminator.)  The command is executed each time the
pseudo-literal is evaluated.  The status value of the command is
returned in C<$?> (see L<perlvar> for the interpretation of C<$?>).
Unlike in B<csh>, no translation is done on the return data--newlines
remain newlines.  Unlike in any of the shells, single quotes do not
hide variable names in the command from interpretation.  To pass a
literal dollar-sign through to the shell you need to hide it with a
backslash.  The generalized form of backticks is C<qx//>.  (Because
backticks always undergo shell expansion as well, see L<perlsec> for
security concerns.)
d1576 1
a1576 1
script you write.)  The $_ variable is not implicitly localized.
d1721 1
a1721 1
	chomp;
d1734 1
a1734 1
the next value each time it's called, or C<undef> when the list has
d1834 2
a1835 2
and ">>") always produce integral results.  (But see also 
L<Bitwise String Operators>.)  However, C<use integer> still has meaning for
d1888 1
a1888 1
they're currently pretty slow. At the cost of some space and
d1898 3
a1900 20
There are several modules that let you calculate with (bound only by
memory and cpu-time) unlimited or fixed precision. There are also
some non-standard modules that provide faster implementations via
external C libraries.

Here is a short, but incomplete summary:

	Math::Fraction		big, unlimited fractions like 9973 / 12967
	Math::String		treat string sequences like numbers
	Math::FixedPrecision	calculate with a fixed precision
	Math::Currency		for currency calculations
	Bit::Vector		manipulate bit vectors fast (uses C)
	Math::BigIntFast	Bit::Vector wrapper for big numbers
	Math::Pari		provides access to the Pari C library
	Math::BigInteger	uses an external C library
	Math::Cephes		uses external Cephes C library (no big numbers)
	Math::Cephes::Fraction	fractions via the Cephes library
	Math::GMP		another one using an external C library

Choose wisely.
@


1.1.1.5
log
@stock perl 5.8.0 from CPAN
@
text
@a235 12
Note that both "<<" and ">>" in Perl are implemented directly using
"<<" and ">>" in C.  If C<use integer> (see L<Integer Arithmetic>) is
in force then signed C integers are used, else unsigned C integers are
used.  Either way, the implementation isn't going to generate results
larger than the size of the integer type Perl was built with (32 bits
or 64 bits).

The result of overflowing the range of the integers is undefined
because it is undefined also in C.  In other words, using 32-bit
integers, C<< 1 << 32 >> is undefined.  Shifting by a negative number
of bits is also undefined.

d386 1
a386 1
list of values counting (up by ones) from the left value to the right
d389 1
a389 1
C<foreach (1..10)> loops and for doing slice operations on arrays. In
a398 3
The range operator also works on strings, using the magical auto-increment,
see below.

d453 1
a453 1
to get all normal letters of the English alphabet, or
d649 1
a649 1
	``	qx{}	      Command		  yes*
d651 3
a653 3
	//	 m{}	   Pattern match	  yes*
		qr{}	      Pattern		  yes*
		 s{}{}	    Substitution	  yes*
a654 3
        <<EOF                 here-doc            yes*

	* unless the delimiter is ''.
d670 2
a671 3
is a syntax error. The C<Text::Balanced> module (from CPAN, and
starting from Perl 5.8 part of the standard distribution) is able
to do this properly.
d682 3
a684 2
The following escape sequences are available in constructs that interpolate
and in transliterations.
d697 1
a697 4
    \N{name}	named Unicode character

The following escape sequences are available in constructs that interpolate
but not in transliterations.
d706 3
a708 6
If C<use locale> is in effect, the case map used by C<\l>, C<\L>,
C<\u> and C<\U> is taken from the current locale.  See L<perllocale>.
If Unicode (for example, C<\N{}> or wide hex characters of 0x100 or
beyond) is being used, the case map used by C<\l>, C<\L>, C<\u> and
C<\U> is as defined by Unicode.  For documentation of C<\N{name}>,
see L<charnames>.
a723 10
For constructs that do interpolate, variables beginning with "C<$>"
or "C<@@>" are interpolated.  Subscripted variables such as C<$a[3]> or
C<$href->{key}[0]> are also interpolated, as are array and hash slices.
But method calls such as C<$obj->meth> are not.

Interpolating an array or slice interpolates the elements in order,
separated by the value of C<$">, so is equivalent to interpolating
C<join $", @@array>.    "Punctuation" arrays such as C<@@+> are only
interpolated if the name is enclosed in braces C<@@{+}>.

d810 1
a810 5
I<successfully> matched regular expression is used instead. In this
case, only the C<g> and C<c> flags on the empty pattern is honoured -
the other flags are taken from the original pattern. If no match has
previously succeeded, this will (silently) act instead as a genuine
empty pattern (which will always match).
d864 1
a864 2
the beginning of the string.  Note also that, currently, C<\G> is only
properly supported when anchored at the very beginning of the pattern.
a1318 92
=item <<EOF

A line-oriented form of quoting is based on the shell "here-document"
syntax.  Following a C<< << >> you specify a string to terminate
the quoted material, and all lines following the current line down to
the terminating string are the value of the item.  The terminating
string may be either an identifier (a word), or some quoted text.  If
quoted, the type of quotes you use determines the treatment of the
text, just as in regular quoting.  An unquoted identifier works like
double quotes.  There must be no space between the C<< << >> and
the identifier, unless the identifier is quoted.  (If you put a space it
will be treated as a null identifier, which is valid, and matches the first
empty line.)  The terminating string must appear by itself (unquoted and
with no surrounding whitespace) on the terminating line.

       print <<EOF;
    The price is $Price.
    EOF

       print << "EOF"; # same as above
    The price is $Price.
    EOF

       print << `EOC`; # execute commands
    echo hi there
    echo lo there
    EOC

       print <<"foo", <<"bar"; # you can stack them
    I said foo.
    foo
    I said bar.
    bar

       myfunc(<< "THIS", 23, <<'THAT');
    Here's a line
    or two.
    THIS
    and here's another.
    THAT

Just don't forget that you have to put a semicolon on the end
to finish the statement, as Perl doesn't know you're not going to
try to do this:

       print <<ABC
    179231
    ABC
       + 20;

If you want your here-docs to be indented with the 
rest of the code, you'll need to remove leading whitespace
from each line manually:

    ($quote = <<'FINIS') =~ s/^\s+//gm;
       The Road goes ever on and on, 
       down from the door where it began.
    FINIS

If you use a here-doc within a delimited construct, such as in C<s///eg>,
the quoted material must come on the lines following the final delimiter.
So instead of

    s/this/<<E . 'that'
    the other
    E
     . 'more '/eg;

you have to write

    s/this/<<E . 'that' 
     . 'more '/eg; 
    the other 
    E 

If the terminating identifier is on the last line of the program, you
must be sure there is a newline after it; otherwise, Perl will give the
warning B<Can't find string terminator "END" anywhere before EOF...>.

Additionally, the quoting rules for the identifier are not related to
Perl's quoting rules -- C<q()>, C<qq()>, and the like are not supported
in place of C<''> and C<"">, and the only interpolation is for backslashing
the quoting character:

    print << "abc\"def";
    testing...
    abc"def

Finally, quoted strings cannot span multiple lines.  The general rule is
that the identifier must be a string literal.  Stick with that, and you
should be safe.

d1704 1
a1704 1
If what the angle brackets contain is a simple scalar variable (e.g.,
d1768 1
a1768 1
If you're trying to do variable interpolation, it's definitely better
@


1.1.1.6
log
@perl 5.8.2 from CPAN
@
text
@d5 1
a5 18
=head1 DESCRIPTION

=head2 Operator Precedence and Associativity

Operator precedence and associativity work in Perl more or less like
they do in mathematics.

I<Operator precedence> means some operators are evaluated before
others.  For example, in C<2 + 4 * 5>, the multiplication has higher
precedence so C<4 * 5> is evaluated first yielding C<2 + 20 ==
22> and not C<6 * 5 == 30>.

I<Operator associativity> defines what happens if a sequence of the
same operators is used one after another: whether the evaluator will
evaluate the left operations first or the right.  For example, in C<8
- 4 - 2>, subtraction is left associative so Perl evaluates the
expression left to right.  C<8 - 4> is evaluated first making the
expression C<4 - 2 == 2> and not C<8 - 2 == 6>.
d43 2
d86 2
a87 12
probably doesn't do what you expect at first glance.  The parentheses
enclose the argument list for C<print> which is evaluated (printing
the result of C<$foo & 255>).  Then one is added to the return value
of C<print> (usually 1).  The result is something like this:

    1 + 1, "\n";    # Obviously not what you meant.

To do what you meant properly, you must write:

    print(($foo & 255) + 1, "\n");

See L<Named Unary Operators> for more discussion of this.
d113 3
a115 8
"++" and "--" work as in C.  That is, if placed before a variable,
they increment or decrement the variable by one before returning the
value, and if placed after, increment or decrement after returning the
value.

    $i = 0;  $j = 0;
    print $i++;  # prints 0
    print ++$j;  # prints 1
a129 4
C<undef> is always treated as numeric, and in particular is changed
to C<0> before incrementing (so that a post-increment of an undef value
will return C<0> rather than C<undef>).

d156 1
a156 1
width, remember to use the & operator to mask off the excess bits.
d181 2
a182 1
time.
d199 1
a199 1
Note that when C<use integer> is in scope, "%" gives you direct access
d251 2
a252 1
argument, with optional parentheses.
a276 5
Regarding precedence, the filetest operators, like C<-f>, C<-M>, etc. are
treated like named unary operators, but they don't follow this functional
parenthesis rule.  That means, for example, that C<-f($file).".bak"> is
equivalent to C<-f "$file.bak">.

d339 1
a339 1
Binary "&" returns its operands ANDed together bit by bit.
a341 5
Note that "&" has lower priority than relational operators, so for example
the brackets are essential in a test like

	print "Even\n" if ($x & 1) == 0;

d344 1
a344 1
Binary "|" returns its operands ORed together bit by bit.
d347 1
a347 1
Binary "^" returns its operands XORed together bit by bit.
a349 5
Note that "|" and "^" have lower priority than relational operators, so
for example the brackets are essential in a test like

	print "false\n" if (8 | 2) != 10;

d364 3
a366 3
The C<||> and C<&&> operators return the last value evaluated
(unlike C's C<||> and C<&&>, which return 0 or 1). Thus, a reasonably
portable way to find out the home directory might be:
d397 1
a397 1
operators depending on the context.  In list context, it returns a
d400 1
a400 1
returns the empty list.  The range operator is useful for writing
d437 3
a439 16
than 1.

If either operand of scalar ".." is a constant expression,
that operand is considered true if it is equal (C<==>) to the current
input line number (the C<$.> variable).

To be pedantic, the comparison is actually C<int(EXPR) == int(EXPR)>,
but that is only an issue if you use a floating point expression; when
implicitly using C<$.> as described in the previous paragraph, the
comparison is C<int(EXPR) == int($.)> which is only an issue when C<$.>
is set to a floating point value and you are not reading from a file.
Furthermore, C<"span" .. "spat"> or C<2.18 .. 3.14> will not do what
you want in scalar context because each of the operands are evaluated
using their integer representation.

Examples:
d443 2
a444 4
    if (101 .. 200) { print; } # print 2nd hundred lines, short for
                               #   if ($. == 101 .. $. == 200) ...
    next line if (1 .. /^$/);  # skip header lines, short for
                               #   ... if ($. == 1 .. /^$/);
d450 2
a451 6
        $in_body   = /^$/ .. eof;
        if ($in_header) {
            # ...
        } else { # in body
            # ...
        }
d453 1
a453 1
        close ARGV if eof;             # reset $. each file
a480 5
Because each operand is evaluated in integer form, C<2.18 .. 3.14> will
return two elements in list context.

    @@list = (2.18 .. 3.14); # same as @@list = (2 .. 3);

d574 3
a576 4
The C<< => >> operator is a synonym for the comma, but forces any word
to its left to be interpreted as a string (as of 5.001). It is helpful
in documenting the correspondence between keys and values in hashes,
and other paired elements in lists.
d750 2
a751 2
C<< $href->{key}[0] >> are also interpolated, as are array and hash slices.
But method calls such as C<< $obj->meth >> are not.
d1143 1
a1143 2
the differences being that it generates a real list at compile time, and
in scalar context it returns the last element in the list.  So
d1631 1
a1631 1
RE is the same as for C<m/ ^ a \s* b /mx>.  There's more than one 
@


1.1.1.7
log
@perl 5.8.3 from CPAN
@
text
@a788 3
B<NOTE>: Unlike C and other languages, Perl has no \v escape sequence for
the vertical tab (VT - ASCII 11).

@


1.1.1.8
log
@Import of stock perl 5.8.5
@
text
@a146 11
Note that just as in C, Perl doesn't define B<when> the variable is
incremented or decremented. You just know it will be done sometime 
before or after the value is returned. This also means that modifying
a variable twice in the same statement will lead to undefined behaviour.
Avoid statements like:

    $i = $i ++;
    print ++ $i + $i ++;

Perl will not guarantee what the result of the above statements is.

d241 1
a241 3
parentheses, it repeats the list.  If the right operand is zero or
negative, it returns an empty string or an empty list, depending on the
context.
d522 1
a522 21
Here's a simple example to illustrate the difference between
the two range operators:

    @@lines = ("   - Foo",
              "01 - Bar",
              "1  - Baz",
              "   - Quux");

    foreach(@@lines)
    {
        if (/0/ .. /1/)
        {
            print "$_\n";
        }
    }

This program will print only the line containing "Bar". If 
the range operator is changed to C<...>, it will also print the 
"Baz" line.

And now some examples as a list operator:
d1163 2
a1164 2
to redirect them separately to files, and then read from those files
when the program is done:
d1166 1
a1166 1
    system("program args 1>program.stdout 2>program.stderr");
@


1.1.1.9
log
@perl 5.8.6 from CPAN
@
text
@d193 2
a194 2
is returned.  One effect of these rules is that -bareword is equivalent
to "-bareword".
d222 1
a222 2
operator.  See L</"Regexp Quote-Like Operators"> for details and 
L<perlretut> for examples using these operators.
a2035 8

=head2 No-ops

Perl doesn't officially have a no-op operator, but the bare constants
C<0> and C<1> are special-cased to not produce a warning in a void
context, so you can for example safely do

    1 while foo();
@


1.1.1.10
log
@perl 5.8.8 import
@
text
@a1 1
X<operator>
d7 1
a7 2
=head2 Operator Precedence and Associativity 
X<operator, precedence> X<precedence> X<associativity>
a60 1
X<list operator> X<operator, list> X<term>
a121 1
X<arrow> X<dereference> X<< -> >>
a136 1
X<increment> X<auto-increment> X<++> X<decrement> X<auto-decrement> X<-->
a177 1
X<**> X<exponentiation> X<power>
a184 1
X<unary operator> X<operator, unary>
a187 1
X<!>
d194 1
a194 6
to the string "-bareword".  If, however, the string begins with a
non-alphabetic character (exluding "+" or "-"), Perl will attempt to convert
the string to a numeric and the arithmetic negation is performed. If the
string cannot be cleanly converted to a numeric, Perl will give the warning
B<Argument "the string" isn't numeric in negation (-) at ...>.
X<-> X<negation, arithmetic>
a201 1
X<~> X<negation, binary>
a206 1
X<+>
a211 1
X<\> X<reference> X<backslash>
a213 1
X<binding> X<operator, binding> X<=~> X<!~>
a232 1
X<operator, multiplicative>
a234 1
X<*>
a236 1
X</> X<slash>
a247 1
X<%> X<remainder> X<modulus> X<mod>
d253 3
a255 4
parentheses or is a list formed by C<qw/STRING/>, it repeats the list.
If the right operand is zero or negative, it returns an empty string
or an empty list, depending on the context.
X<x>
a265 1
X<operator, additive>
a267 1
X<+>
a269 1
X<->
a271 2
X<string, concatenation> X<concatenation>
X<cat> X<concat> X<concatenate> X<.>
a273 3
X<shift operator> X<operator, shift> X<<< << >>>
X<<< >> >>> X<right shift> X<left shift> X<bitwise shift>
X<shl> X<shr> X<shift, right> X<shift, left>
a295 1
X<operator, named unary>
a326 1
X<-X> X<filetest> X<operator, filetest>
a330 1
X<relational operator> X<operator, relational>
a333 1
X<< < >>
a336 1
X<< > >>
a339 1
X<< <= >>
a342 1
X<< >= >>
a345 1
X<< lt >>
a348 1
X<< gt >>
a351 1
X<< le >>
a354 1
X<< ge >>
a356 1
X<equality> X<equal> X<equals> X<operator, equality>
a359 1
X<==>
a362 1
X<!=>
a370 1
X<< <=> >> X<spaceship>
d372 2
a373 2
    perl -le '$a = "NaN"; print "No NaN support here" if $a == $a'
    perl -le '$a = "NaN"; print "NaN support here" if $a != $a'
a376 1
X<eq>
a379 1
X<ne>
a383 1
X<cmp>
a388 1
X<operator, bitwise, and> X<bitwise and> X<&>
a398 2
X<operator, bitwise, or> X<bitwise or> X<|> X<operator, bitwise, xor>
X<bitwise xor> X<^>
a411 1
X<&&> X<logical and> X<operator, logical, and>
a418 1
X<||> X<operator, logical, or>
a455 1
X<operator, range> X<range> X<..> X<...>
d519 1
a519 2

    next LINE if (1 .. /^$/);  # skip header lines, short for
d521 1
a521 3
                               # (typically in a loop labeled LINE)

    s/^/> / if (/^$/ .. eof());  # quote body
d544 4
a547 2
    foreach (@@lines) {
        if (/0/ .. /1/) {
d552 2
a553 2
This program will print only the line containing "Bar". If
the range operator is changed to C<...>, it will also print the
a586 1
X<operator, conditional> X<operator, ternary> X<ternary> X<?:>
a625 3
X<assignment> X<operator, assignment> X<=> X<**=> X<+=> X<*=> X<&=>
X<<< <<= >>> X<&&=> X<-=> X</=> X<|=> X<<< >>= >>> X<||=> X<.=>
X<%=> X<^=> X<x=>
d644 1
a644 1
                 x=
a670 1
X<comma> X<operator, comma> X<,>
d680 3
a682 24
(consisting entirely of word characters) to its left to be interpreted
as a string (as of 5.001).  This includes words that might otherwise be
considered a constant or function call.

    use constant FOO => "something";

    my %h = ( FOO => 23 );

is equivalent to:

    my %h = ("FOO", 23);

It is I<NOT>:

    my %h = ("something", 23);

If the argument on the left is not a word, it is first interpreted as
an expression, and then the string value of that is used.

The C<< => >> operator is helpful in documenting the correspondence
between keys and values in hashes, and other paired elements in lists.

        %hash = ( $key => $value );
        login( $username => $password );
a684 1
X<operator, list, rightward> X<list operator>
a697 1
X<operator, logical, not> X<not>
a702 1
X<operator, logical, and> X<and>
a709 3
X<operator, logical, or> X<operator, logical, xor> X<operator, logical, err>
X<operator, logical, defined or> X<operator, logical, exclusive or>
X<or> X<xor> X<err>
a737 2
X<operator, missing from perl> X<&> X<*>
X<typecasting> X<(TYPE)>
a758 4
X<operator, quote> X<operator, quote-like> X<q> X<qq> X<qx> X<qw> X<m> 
X<qr> X<s> X<tr> X<'> X<''> X<"> X<""> X<//> X<`> X<``> X<<< << >>>
X<escape sequence> X<escape>

d765 1
a765 1
any pair of delimiters you choose.
d782 1
a782 1
that
d784 1
a784 1
	q{foo{bar}baz}
d786 1
a786 1
is the same as
a808 1
X<\t> X<\n> X<\r> X<\f> X<\b> X<\a> X<\e> X<\x> X<\0> X<\c> X<\N>
a827 1
X<\l> X<\u> X<\L> X<\U> X<\E> X<\Q>
a855 2
X<newline> X<line terminator> X<eol> X<end of line>
X<\n> X<\r> X<\r\n>
a884 1
X<operator, regexp>
a891 1
X<?>
a911 3
X<m> X<operator, match> 
X<regexp, options> X<regexp> X<regex, options> X<regex> 
X</c> X</i> X</m> X</o> X</s> X</x>
a1083 1
X<q> X<quote, double> X<'> X<''>
a1095 1
X<qq> X<quote, double> X<"> X<"">
a1106 1
X<qr> X</i> X</m> X</o> X</s> X</x>
a1163 1
X<qx> X<`> X<``> X<backtick>
a1244 1
X<qw> X<quote, list> X<quote, words>
a1272 2
X<substitute> X<substitution> X<replace> X<regexp, replace>
X<regexp, substitute> X</e> X</g> X</i> X</m> X</o> X</s> X</x>
d1357 1
a1357 1
    s/^\s*(.*?)\s*$/$1/;	# trim whitespace in $_, expensively
d1359 1
a1359 1
    for ($variable) {		# trim whitespace in $variable, cheap
a1379 1
X<tr> X<y> X<transliterate> X</c> X</d> X</s>
a1468 1
X<here-doc> X<heredoc> X<here-document> X<<< << >>>
a1562 1
X<quote, gory details>
a1624 5
Also no attention is paid to C<\c\> during this search.
Thus the second C<\> in C<qq/\c\/> is interpreted as a part of C<\/>,
and the following C</> is not recognized as a delimiter.
Instead, use C<\034> or C<\x1c> at the end of quoted constructs.

a1637 1
X<interpolation>
a1750 1
X<regexp, interpolation>
a1788 1
X<regexp, optimization>
a1800 2
X<operator, i/o> X<operator, io> X<io> X<while> X<filehandle>
X<< <> >> X<@@ARGV>
a1819 1
X<qx> X<`> X<``> X<backtick> X<glob>
a1872 1
X<stdin> X<stdout> X<sterr>
d1961 1
a1961 2
not--it's a hash element.  Even C<< <$x > >> (note the extra space)
is treated as C<glob("$x ")>, not C<readline($x)>.
a2016 1
X<constant folding> X<folding>
a2038 1
X<no-op> X<nop>
a2046 1
X<operator, bitwise, string>
d2069 2
a2070 2
    $foo =  150  |  105;	# yields 255  (0x96 | 0x69 is 0xFF)
    $foo = '150' |  105;	# yields 255
a2080 1
X<integer>
a2108 1
X<floating-point> X<floating point> X<float> X<real>
a2150 1
X<number, arbitrary precision>
@


1.1.1.11
log
@import perl 5.10.0 from CPAN
@
text
@d8 1
a8 1
=head2 Operator Precedence and Associativity
d44 1
a44 1
    nonassoc	== != <=> eq ne cmp ~~
d48 1
a48 1
    left	|| //
d122 1
a122 1
as well as L</"I/O Operators">.
d153 1
a153 1
incremented or decremented. You just know it will be done sometime
d203 1
a203 1
non-alphabetic character (excluding "+" or "-"), Perl will attempt to convert
d239 1
a239 1
operator.  See L</"Regexp Quote-Like Operators"> for details and
d244 1
a244 6
time. Note that this means that its contents will be interpolated twice, so

  '\\' =~ q'\\';

is not ok, as the regex engine will end up trying to compile the
pattern C<\>, which it will consider a syntax error.
d263 1
a263 11
result will be less than or equal to zero).  If the operands
C<$a> and C<$b> are floating point values and the absolute value of
C<$b> (that is C<abs($b)>) is less than C<(UV_MAX + 1)>, only
the integer portion of C<$a> and C<$b> will be used in the operation
(Note: here C<UV_MAX> means the maximum of the unsigned integer type).
If the absolute value of the right operand (C<abs($b)>) is greater than
or equal to C<(UV_MAX + 1)>, "%" computes the floating-point remainder
C<$r> in the equation C<($r = $a - $i*$b)> where C<$i> is a certain
integer that makes C<$r> should have the same sign as the right operand
C<$b> (B<not> as the left operand C<$a> like C function C<fmod()>)
and the absolute value less than that of C<$b>.
a432 6
Binary "~~" does a smart match between its arguments. Smart matching
is described in L<perlsyn/"Smart matching in detail">.
This operator is only available if you enable the "~~" feature:
see L<feature> for more information.
X<~~>

d478 1
a478 13
=head2 C-style Logical Defined-Or
X<//> X<operator, logical, defined-or>

Although it has no direct equivalent in C, Perl's C<//> operator is related
to its C-style or.  In fact, it's exactly the same as C<||>, except that it
tests the left hand side's definedness instead of its truth.  Thus, C<$a // $b>
is similar to C<defined($a) || $b> (except that it returns the value of C<$a>
rather than the value of C<defined($a)>) and is exactly equivalent to
C<defined($a) ? $a : $b>.  This is very useful for providing default values
for variables.  If you actually want to test if at least one of C<$a> and
C<$b> is defined, use C<defined($a // $b)>.

The C<||>, C<//> and C<&&> operators return the last value evaluated
d482 2
a483 2
    $home = $ENV{'HOME'} // $ENV{'LOGDIR'} //
	(getpwuid($<))[7] // die "You're homeless!\n";
d493 3
a495 3
control flow, Perl provides the C<and> and C<or> operators (see below).
The short-circuit behavior is identical.  The precedence of "and"
and "or" is much lower, however, so that you can safely use them after a
d631 4
a634 17
to get dates with leading zeros.

If the final value specified is not in the sequence that the magical
increment would produce, the sequence goes until the next value would
be longer than the final value specified.

If the initial value specified isn't part of a magical increment
sequence (that is, a non-empty string matching "/^[a-zA-Z]*[0-9]*\z/"),
only the initial value will be returned.  So the following will only
return an alpha:

    use charnames 'greek';
    my @@greek_small =  ("\N{alpha}" .. "\N{omega}");

To get lower-case greek letters, use this instead:

    my @@greek_small =  map { chr } ( ord("\N{alpha}") .. ord("\N{omega}") );
d683 1
a683 1
X<<< <<= >>> X<&&=> X<-=> X</=> X<|=> X<<< >>= >>> X<||=> X<//=> X<.=>
d702 1
a702 1
           .=    %=    ^=           //=
d737 1
a737 2
both its arguments into the list.  These arguments are also evaluated
from left to right.
d793 2
a794 2
=head2 Logical or, Defined or, and Exclusive Or
X<operator, logical, or> X<operator, logical, xor>
d796 1
a796 1
X<or> X<xor>
d819 1
a819 1
Then again, you could always use parentheses.
d848 1
a848 1
X<operator, quote> X<operator, quote-like> X<q> X<qq> X<qx> X<qw> X<m>
d911 4
a914 4
    \033	octal char	(example: ESC)
    \x1b	hex char	(example: ESC)
    \x{263a}	wide hex char	(example: SMILEY)
    \c[		control char    (example: ESC)
a916 8
The character following C<\c> is mapped to some other character by
converting letters to upper case and then (on ASCII systems) by inverting
the 7th bit (0x40). The most interesting range is from '@@' to '_'
(0x40 through 0x5F), resulting in a control character from 0x00
through 0x1F. A '?' maps to the DEL character. On EBCDIC systems only
'@@', the letters, '[', '\', ']', '^', '_' and '?' will work, resulting
in 0x00 through 0x1F and 0x7F.

d918 1
a918 1
the vertical tab (VT - ASCII 11), but you may use C<\ck> or C<\x0b>.
d961 2
a962 3
C<join $", @@array>.    "Punctuation" arrays such as C<@@*> are only
interpolated if the name is enclosed in braces C<@@{*}>, but special
arrays C<@@_>, C<@@+>, and C<@@-> are interpolated, even without braces.
d964 2
a965 2
You cannot include a literal C<$> or C<@@> within a C<\Q> sequence.
An unescaped C<$> or C<@@> interpolates the corresponding variable,
d967 1
a967 1
You'll need to write something like C<m/\Quser\E\@@\Qhost/>.
d989 2
a990 2
=item qr/STRING/msixpo
X<qr> X</i> X</m> X</o> X</s> X</x> X</p>
d992 5
a996 8
This operator quotes (and possibly compiles) its I<STRING> as a regular
expression.  I<STRING> is interpolated the same way as I<PATTERN>
in C<m/PATTERN/>.  If "'" is used as the delimiter, no interpolation
is done.  Returns a Perl value which may be used instead of the
corresponding C</STRING/msixpo> expression. The returned value is a
normalized version of the original pattern. It magically differs from
a string containing the same characters: C<ref(qr/x/)> returns "Regexp",
even though dereferencing the result returns undef.
d998 6
a1003 31
For example,

    $rex = qr/my.STRING/is;
    print $rex;                 # prints (?si-xm:my.STRING)
    s/$rex/foo/;

is equivalent to

    s/my.STRING/foo/is;

The result may be used as a subpattern in a match:

    $re = qr/$pattern/;
    $string =~ /foo${re}bar/;	# can be interpolated in other patterns
    $string =~ $re;		# or used standalone
    $string =~ /$re/;		# or this way

Since Perl may compile the pattern at the moment of execution of qr()
operator, using qr() may have speed advantages in some situations,
notably if the result of qr() is used standalone:

    sub match {
	my $patterns = shift;
	my @@compiled = map qr/$_/i, @@$patterns;
	grep {
	    my $success = 0;
	    foreach my $pat (@@compiled) {
		$success = 1, last if /$pat/;
	    }
	    $success;
	} @@_;
d1006 3
a1008 23
Precompilation of the pattern into an internal representation at
the moment of qr() avoids a need to recompile the pattern every
time a match C</$pat/> is attempted.  (Perl has many other internal
optimizations, but none would be triggered in the above example if
we did not use qr() operator.)

Options are:

    m	Treat string as multiple lines.
    s	Treat string as single line. (Make . match a newline)
    i	Do case-insensitive pattern matching.
    x	Use extended regular expressions.
    p	When matching preserve a copy of the matched string so
        that ${^PREMATCH}, ${^MATCH}, ${^POSTMATCH} will be defined.
    o	Compile pattern only once.

If a precompiled pattern is embedded in a larger pattern then the effect
of 'msixp' will be propagated appropriately.  The effect of the 'o'
modifier has is not propagated, being restricted to those patterns
explicitly using it.

See L<perlre> for additional information on valid syntax for STRING, and
for a detailed look at the semantics of regular expressions.
d1010 4
a1013 4
=item m/PATTERN/msixpogc
X<m> X<operator, match>
X<regexp, options> X<regexp> X<regex, options> X<regex>
X</m> X</s> X</i> X</x> X</p> X</o> X</g> X</c>
d1015 1
a1015 1
=item /PATTERN/msixpogc
d1026 1
a1026 2
Options are as described in C<qr//>; in addition, the following match
process modifiers are available:
d1028 1
d1030 5
a1034 1
    c	Do not reset search position on a failed match when /g is in effect.
d1037 1
a1037 1
you can use any pair of non-alphanumeric, non-whitespace characters
d1052 1
a1052 1
Perl won't even notice.  See also L<"qr/STRING/msixpo">.
a1060 9
Note that it's possible to confuse Perl into thinking C<//> (the empty
regex) is really C<//> (the defined-or operator).  Perl is usually pretty
good about this, but some pathological cases might trigger this, such as
C<$a///> (is that C<($a) / (//)> or C<$a // />?) and C<print $fh //>
(C<print $fh(//> or C<print($fh //>?).  In all of these examples, Perl
will assume you meant defined-or.  If you meant the empty regex, just
use parentheses or spaces to disambiguate, or even prefix the empty
regex with an C<m> (so C<//> becomes C<m//>).

d1164 1
a1164 1
      $url = URI::URL->new( "http://www/" );   die if $url eq "xXx";
d1185 2
a1186 2
=item ?PATTERN?
X<?>
d1188 1
a1188 5
This is just like the C</pattern/> search, except that it matches only
once between calls to the reset() operator.  This is a useful
optimization when you want to see only the first occurrence of
something in each file of a set of files, for instance.  Only C<??>
patterns local to the current package are reset.
d1190 3
a1192 7
    while (<>) {
	if (?^$?) {
			    # blank line between header and body
	}
    } continue {
	reset if eof;	    # clear ?? status for next file
    }
d1194 3
a1196 3
This usage is vaguely deprecated, which means it just might possibly
be removed in some distant future version of Perl, perhaps somewhere
around the year 2168.
d1198 2
a1199 3
=item s/PATTERN/REPLACEMENT/msixpogce
X<substitute> X<substitution> X<replace> X<regexp, replace>
X<regexp, substitute> X</m> X</s> X</i> X</x> X</p> X</o> X</g> X</c> X</e>
d1201 1
a1201 3
Searches a string for a pattern, and if found, replaces that pattern
with the replacement text and returns the number of substitutions
made.  Otherwise it returns false (specifically, the empty string).
d1203 1
a1203 4
If no string is specified via the C<=~> or C<!~> operator, the C<$_>
variable is searched and modified.  (The string specified with C<=~> must
be scalar variable, an array element, a hash element, or an assignment
to one of those, i.e., an lvalue.)
d1205 4
a1208 10
If the delimiter chosen is a single quote, no interpolation is
done on either the PATTERN or the REPLACEMENT.  Otherwise, if the
PATTERN contains a $ that looks like a variable rather than an
end-of-string test, the variable will be interpolated into the pattern
at run-time.  If you want the pattern compiled only once the first time
the variable is interpolated, use the C</o> option.  If the pattern
evaluates to the empty string, the last successfully executed regular
expression is used instead.  See L<perlre> for further explanation on these.
See L<perllocale> for discussion of additional considerations that apply
when C<use locale> is in effect.
d1210 2
a1211 2
Options are as with m// with the addition of the following replacement
specific options:
d1213 5
a1217 2
    e	Evaluate the right side as an expression.
    ee  Evaluate the right side as a string then eval the result
d1219 1
a1219 12
Any non-alphanumeric, non-whitespace delimiter may replace the
slashes.  If single quotes are used, no interpretation is done on the
replacement string (the C</e> modifier overrides this, however).  Unlike
Perl 4, Perl 5 treats backticks as normal delimiters; the replacement
text is not evaluated as a command.  If the
PATTERN is delimited by bracketing quotes, the REPLACEMENT has its own
pair of quotes, which may or may not be bracketing quotes, e.g.,
C<s(foo)(bar)> or C<< s<foo>/bar/ >>.  A C</e> will cause the
replacement portion to be treated as a full-fledged Perl expression
and evaluated right then and there.  It is, however, syntax checked at
compile-time. A second C<e> modifier will cause the replacement portion
to be C<eval>ed before being run as a Perl expression.
d1221 2
a1222 1
Examples:
d1224 1
a1224 1
    s/\bgreen\b/mauve/g;		# don't change wintergreen
d1226 1
a1226 1
    $path =~ s|/usr/bin|/usr/local/bin|;
d1228 1
a1228 1
    s/Login: $foo/Login: $bar/; # run-time pattern
d1230 4
a1233 1
    ($foo = $bar) =~ s/this/that/;	# copy first, then change
d1235 3
a1237 1
    $count = ($paragraph =~ s/Mister\b/Mr./g);  # get change-count
d1239 10
a1248 33
    $_ = 'abc123xyz';
    s/\d+/$&*2/e;		# yields 'abc246xyz'
    s/\d+/sprintf("%5d",$&)/e;	# yields 'abc  246xyz'
    s/\w/$& x 2/eg;		# yields 'aabbcc  224466xxyyzz'

    s/%(.)/$percent{$1}/g;	# change percent escapes; no /e
    s/%(.)/$percent{$1} || $&/ge;	# expr now, so /e
    s/^=(\w+)/pod($1)/ge;	# use function call

    # expand variables in $_, but dynamics only, using
    # symbolic dereferencing
    s/\$(\w+)/${$1}/g;

    # Add one to the value of any numbers in the string
    s/(\d+)/1 + $1/eg;

    # This will expand any embedded scalar variable
    # (including lexicals) in $_ : First $1 is interpolated
    # to the variable name, and then evaluated
    s/(\$\w+)/$1/eeg;

    # Delete (most) C comments.
    $program =~ s {
	/\*	# Match the opening delimiter.
	.*?	# Match a minimal number of characters.
	\*/	# Match the closing delimiter.
    } []gsx;

    s/^\s*(.*?)\s*$/$1/;	# trim whitespace in $_, expensively

    for ($variable) {		# trim whitespace in $variable, cheap
	s/^\s+//;
	s/\s+$//;
d1251 5
a1255 1
    s/([^ ]*) *([^ ]*)/$2 $1/;	# reverse 1st two fields
d1257 1
a1257 3
Note the use of $ instead of \ in the last example.  Unlike
B<sed>, we use the \<I<digit>> form in only the left hand side.
Anywhere else it's $<I<digit>>.
d1259 5
a1263 2
Occasionally, you can't use just a C</g> to get all the changes
to occur that you might want.  Here are two common cases:
d1265 2
a1266 37
    # put commas in the right places in an integer
    1 while s/(\d)(\d\d\d)(?!\d)/$1,$2/g;

    # expand tabs to 8-column spacing
    1 while s/\t+/' ' x (length($&)*8 - length($`)%8)/e;

=back

=head2 Quote-Like Operators
X<operator, quote-like>

=over 4

=item q/STRING/
X<q> X<quote, single> X<'> X<''>

=item 'STRING'

A single-quoted, literal string.  A backslash represents a backslash
unless followed by the delimiter or another backslash, in which case
the delimiter or backslash is interpolated.

    $foo = q!I said, "You said, 'She said it.'"!;
    $bar = q('This is it.');
    $baz = '\n';		# a two-character string

=item qq/STRING/
X<qq> X<quote, double> X<"> X<"">

=item "STRING"

A double-quoted, interpolated string.

    $_ .= qq
     (*** The previous line contains the naughty word "$1".\n)
		if /\b(tcl|java|python)\b/i;      # :-)
    $baz = "\n";		# a one-character string
a1307 9
The STDIN filehandle used by the command is inherited from Perl's STDIN.
For example:

    open BLAM, "blam" || die "Can't open: $!";
    open STDIN, "<&BLAM";
    print `sort`;

will print the sorted contents of the file "blam".

d1348 1
a1348 1
See L</"I/O Operators"> for more discussion.
d1376 1
a1376 1
C<use warnings> pragma and the B<-w> switch (that is, the C<$^W> variable)
d1379 108
d1500 1
a1500 1
A character range may be specified with a hyphen, so C<tr/A-J/0-9/>
d1508 1
a1508 1
such as C<\d> or C<[:lower:]>.  The C<tr> operator is not equivalent to
d1584 9
a1592 19
the terminating string are the value of the item.

The terminating string may be either an identifier (a word), or some
quoted text.  An unquoted identifier works like double quotes.
There may not be a space between the C<< << >> and the identifier,
unless the identifier is explicitly quoted.  (If you put a space it
will be treated as a null identifier, which is valid, and matches the
first empty line.)  The terminating string must appear by itself
(unquoted and with no surrounding whitespace) on the terminating line.

If the terminating string is quoted, the type of quotes used determine
the treatment of the text.

=over 4

=item Double Quotes

Double quotes indicate that the text will be interpolated using exactly
the same rules as normal double quoted strings.
d1602 1
a1602 21

=item Single Quotes

Single quotes indicate the text is to be treated literally with no
interpolation of its content. This is similar to single quoted
strings except that backslashes have no special meaning, with C<\\>
being treated as two backslashes and not one as they would in every
other quoting construct.

This is the only form of quoting in perl where there is no need
to worry about escaping content, something that code generators
can and do make good use of.

=item Backticks

The content of the here doc is treated just as it would be if the
string were embedded in backticks. Thus the content is interpolated
as though it were double quoted and then executed via the shell, with
the results of the execution returned.

       print << `EOC`; # execute command and get results
d1604 1
a1606 4
=back

It is possible to stack multiple here-docs in a row:

d1629 3
a1631 9
If you want to remove the line terminator from your here-docs,
use C<chomp()>.

    chomp($string = <<'END');
    This is a string.
    END

If you want your here-docs to be indented with the rest of the code,
you'll need to remove leading whitespace from each line manually:
d1634 1
a1634 1
       The Road goes ever on and on,
d1649 4
a1652 4
    s/this/<<E . 'that'
     . 'more '/eg;
    the other
    E
d1658 4
a1661 4
Additionally, the quoting rules for the end of string identifier are not
related to Perl's quoting rules -- C<q()>, C<qq()>, and the like are not
supported in place of C<''> and C<"">, and the only interpolation is for
backslashing the quoting character:
d1698 1
a1698 1
one to four, but these passes are always performed in the same order.
d1704 12
a1715 32
The first pass is finding the end of the quoted construct, where
the information about the delimiters is used in parsing.
During this search, text between the starting and ending delimiters
is copied to a safe location. The text copied gets delimiter-independent.

If the construct is a here-doc, the ending delimiter is a line
that has a terminating string as the content. Therefore C<<<EOF> is
terminated by C<EOF> immediately followed by C<"\n"> and starting
from the first column of the terminating line.
When searching for the terminating line of a here-doc, nothing
is skipped. In other words, lines after the here-doc syntax
are compared with the terminating string line by line.

For the constructs except here-docs, single characters are used as starting
and ending delimiters. If the starting delimiter is an opening punctuation
(that is C<(>, C<[>, C<{>, or C<< < >>), the ending delimiter is the
corresponding closing punctuation (that is C<)>, C<]>, C<}>, or C<< > >>).
If the starting delimiter is an unpaired character like C</> or a closing
punctuation, the ending delimiter is same as the starting delimiter.
Therefore a C</> terminates a C<qq//> construct, while a C<]> terminates
C<qq[]> and C<qq]]> constructs.

When searching for single-character delimiters, escaped delimiters
and C<\\> are skipped. For example, while searching for terminating C</>,
combinations of C<\\> and C<\/> are skipped.  If the delimiters are
bracketing, nested pairs are also skipped.  For example, while searching
for closing C<]> paired with the opening C<[>, combinations of C<\\>, C<\]>,
and C<\[> are all skipped, and nested C<[> and C<]> are skipped as well.
However, when backslashes are used as the delimiters (like C<qq\\> and
C<tr\\\>), nothing is skipped.
During the search for the end, backslashes that escape delimiters
are removed (exactly speaking, they are not copied to the safe location).
a1718 9
If the first delimiter is not an opening punctuation, three delimiters must
be same such as C<s!!!> and C<tr)))>, in which case the second delimiter
terminates the left part and starts the right part at once.
If the left part is delimited by bracketing punctuations (that is C<()>,
C<[]>, C<{}>, or C<< <> >>), the right part needs another pair of
delimiters such as C<s(){}> and C<tr[]//>.  In these cases, whitespaces
and comments are allowed between both parts, though the comment must follow
at least one whitespace; otherwise a character expected as the start of
the comment may be regarded as the starting delimiter of the right part.
d1727 1
a1727 1
    m/
d1737 3
a1739 3
Also no attention is paid to C<\c\> (multichar control char syntax) during
this search. Thus the second C<\> in C<qq/\c\/> is interpreted as a part
of C<\/>, and the following C</> is not recognized as a delimiter.
d1742 12
d1758 1
a1758 1
delimiter-independent.  There are multiple cases.
d1762 1
a1762 1
=item C<<<'EOF'>
a1764 2
Note that the combination C<\\> is left intact, since escaped delimiters
are not available for here-docs.
d1766 1
a1766 1
=item  C<m''>, the pattern of C<s'''>
d1768 1
a1768 3
No interpolation is performed at this stage.
Any backslashed sequences including C<\\> are treated at the stage
to L</"parsing regular expressions">.
d1770 1
a1770 17
=item C<''>, C<q//>, C<tr'''>, C<y'''>, the replacement of C<s'''>

The only interpolation is removal of C<\> from pairs of C<\\>.
Therefore C<-> in C<tr'''> and C<y'''> is treated literally
as a hyphen and no character range is available.
C<\1> in the replacement of C<s'''> does not work as C<$1>.

=item C<tr///>, C<y///>

No variable interpolation occurs.  String modifying combinations for
case and quoting such as C<\Q>, C<\U>, and C<\E> are not recognized.
The other escape sequences such as C<\200> and C<\t> and backslashed
characters such as C<\\> and C<\-> are converted to appropriate literals.
The character C<-> is treated specially and therefore C<\-> is treated
as a literal C<->.

=item C<"">, C<``>, C<qq//>, C<qx//>, C<< <file*glob> >>, C<<<"EOF">
d1775 1
a1775 3
The other escape sequences such as C<\200> and C<\t> and backslashed
characters such as C<\\> and C<\-> are replaced with appropriate
expansions.
d1804 1
a1804 1
where the interpolated scalar ends.  For instance, whether
d1819 1
a1819 1
=item the replacement of C<s///>
d1822 3
a1824 21
happens as with C<qq//> constructs.

It is at this step that C<\1> is begrudgingly converted to C<$1> in
the replacement text of C<s///>, in order to correct the incorrigible
I<sed> hackers who haven't picked up the saner idiom yet.  A warning
is emitted if the C<use warnings> pragma or the B<-w> command-line flag
(that is, the C<$^W> variable) was set.

=item C<RE> in C<?RE?>, C</RE/>, C<m/RE/>, C<s/RE/foo/>,

Processing of C<\Q>, C<\U>, C<\u>, C<\L>, C<\l>, C<\E>,
and interpolation happens (almost) as with C<qq//> constructs.

However any other combinations of C<\> followed by a character
are not substituted but only skipped, in order to parse them
as regular expressions at the following step.
As C<\c> is skipped at this step, C<@@> of C<\c@@> in RE is possibly
treated as an array symbol (for example C<@@foo>),
even though the same text in C<qq//> gives interpolation of C<\c@@>.

Moreover, inside C<(?{BLOCK})>, C<(?# comment )>, and
d1829 4
a1832 4
Interpolation in patterns has several quirks: C<$|>, C<$(>, C<$)>, C<@@+>
and C<@@-> are not interpolated, and constructs C<$var[SOMETHING]> are
voted (by several different estimators) to be either an array element
or C<$var> followed by an RE alternative.  This is where the notation
d1839 6
d1858 2
a1859 2
delimiter is C<m>, the modifier is C<mx>, and after delimiter-removal the
RE is the same as for C<m/ ^ a \s* b /mx>.  There's more than one
d1868 2
a1869 2
=item parsing regular expressions
X<regexp, parse>
d1874 1
a1874 1
described above, and possibly after evaluation if concatenation,
d1973 1
a1973 1
    while (my $line = <STDIN>) { print $line }
d1986 1
a1986 1
explicit C<defined> test or comparison elicit a warning if the
d2040 1
a2040 1
If you want to set @@ARGV to your own list of files, go right ahead.
d2065 2
a2066 2
The <> symbol will return C<undef> for end-of-file only once.
If you call it again after this, it will assume you are processing another
d2186 1
a2186 1
    # ASCII-based examples
d2229 1
a2229 1
and ">>") always produce integral results.  (But see also
d2234 1
a2234 1
integral value.  However, C<use integer; ~0> is C<-1> on two's-complement
@


1.1.1.12
log
@import perl 5.10.1
@
text
@d263 1
a263 3
Binary "%" is the modulo operator, which computes the division
remainder of its first argument with respect to its second argument.
Given integer
d265 1
a265 1
C<$a> minus the largest multiple of C<$b> less than or equal to
d276 1
a276 1
integer that makes C<$r> have the same sign as the right operand
d280 1
a280 1
to the modulo operator as implemented by your C compiler.  This
d283 1
a283 1
X<%> X<remainder> X<modulo> X<mod>
d450 2
d605 1
a605 1
                               #   if ($. == 101 .. $. == 200) { print; }
d608 1
a608 1
                               #   next LINE if ($. == 1 .. /^$/);
d618 1
a618 1
            # do something
d620 1
a620 1
            # do something else
d786 4
a789 11
The C<< => >> operator is a synonym for the comma except that it causes
its left operand to be interpreted as a string if it begins with a letter
or underscore and is composed only of letters, digits and underscores.
This includes operands that might otherwise be interpreted as operators,
constants, single number v-strings or function calls. If in doubt about
this behaviour, the left operand can be quoted explicitly.

Otherwise, the C<< => >> operator behaves exactly as the comma operator
or list argument separator, according to context.

For example:
d803 3
a1153 2
=item The empty pattern //

a1169 2
=item Matching in list context

a1215 2
=item \G assertion

a2208 12

Since the null filehandle uses the two argument form of L<perlfunc/open>
it interprets special characters, so if you have a script like this:

    while (<>) {
        print;
    }

and call it with C<perl dangerous.pl 'rm -rfv *|'>, it actually opens a
pipe, executes the C<rm> command and reads C<rm>'s output from that pipe.
If you want all items in C<@@ARGV> to be interpreted as file names, you
can use the module C<ARGV::readonly> from CPAN.
@


1.1.1.13
log
@Perl 5.12.2 from CPAN
@
text
@d559 2
a560 2
The range operator also works on strings, using the magical
auto-increment, see below.
d563 3
a565 4
bistable, like a flip-flop, and emulates the line-range (comma)
operator of B<sed>, B<awk>, and various editors. Each ".." operator
maintains its own boolean state, even across calls to a subroutine
that contains it. It is false as long as its left operand is false.
d568 5
a572 5
again.  It doesn't become false till the next time the range operator
is evaluated.  It can test the right operand and become false on the
same evaluation it became true (as in B<awk>), but it still returns
true once. If you don't want it to test the right operand until the
next evaluation, as in B<sed>, just use three dots ("...") instead of
d579 7
a585 6
false, or a sequence number (beginning with 1) for true.  The sequence
number is reset for each range encountered.  The final sequence number
in a range has the string "E0" appended to it, which doesn't affect
its numeric value, but gives you something to search for if you want
to exclude the endpoint.  You can exclude the beginning point by
waiting for the sequence number to be greater than 1.
a815 61
=head2 Yada Yada Operator
X<...> X<... operator> X<yada yada operator>

The yada yada operator (noted C<...>) is a placeholder for code. Perl
parses it without error, but when you try to execute a yada yada, it
throws an exception with the text C<Unimplemented>:

	sub unimplemented { ... }
	
	eval { unimplemented() };
	if( $@@ eq 'Unimplemented' ) {
	  print "I found the yada yada!\n";
	  }

You can only use the yada yada to stand in for a complete statement.
These examples of the yada yada work:

	{ ... }
	
	sub foo { ... }
	
	...;
	
	eval { ... };
	
	sub foo {
			my( $self ) = shift;
			
			...;
			}
			
	do { my $n; ...; print 'Hurrah!' };

The yada yada cannot stand in for an expression that is part of a
larger statement since the C<...> is also the three-dot version of the
range operator (see L<Range Operators>). These examples of the yada
yada are still syntax errors:

	print ...;
	
	open my($fh), '>', '/dev/passwd' or ...;
	
	if( $condition && ... ) { print "Hello\n" };

There are some cases where Perl can't immediately tell the difference
between an expression and a statement. For instance, the syntax for a
block and an anonymous hash reference constructor look the same unless
there's something in the braces that give Perl a hint. The yada yada
is a syntax error if Perl doesn't guess that the C<{ ... }> is a
block. In that case, it doesn't think the C<...> is the yada yada
because it's expecting an expression instead of a statement:

	my @@transformed = map { ... } @@input;  # syntax error

You can use a C<;> inside your block to denote that the C<{ ... }> is
a block and not a hash reference constructor. Now the yada yada works:

	my @@transformed = map {; ... } @@input; # ; disambiguates

	my @@transformed = map { ...; } @@input; # ; disambiguates

a966 1
    \N{U+263D}	Unicode character (example: FIRST QUARTER MOON)
d976 2
a977 7
C<\N{U+I<wide hex char>}> means the Unicode character whose Unicode ordinal
number is I<wide hex char>.
For documentation of C<\N{name}>, see L<charnames>.

B<NOTE>: Unlike C and other languages, Perl has no C<\v> escape sequence for
the vertical tab (VT - ASCII 11), but you may use C<\ck> or C<\x0b>.  (C<\v>
does have meaning in regular expression patterns in Perl, see L<perlre>.)
d979 1
a979 1
The following escape sequences are available in constructs that interpolate,
d994 2
a995 1
C<\U> is as defined by Unicode.
d1141 1
a1141 1
you can use any pair of non-whitespace characters
a1145 2
When using a character valid in an identifier, whitespace is required
after the C<m>.
d1273 1
a1273 1
did not update C<pos>. C<pos> is only updated on a C</g> match. If the
d1283 1
a1283 1
      $url = URI::URL->new( "http://example.com/" ); die if $url eq "xXx";
d1355 7
a1361 7
Any non-whitespace delimiter may replace the slashes.  Add space after
the C<s> when using a character allowed in identifiers.  If single quotes
are used, no interpretation is done on the replacement string (the C</e>
modifier overrides this, however).  Unlike Perl 4, Perl 5 treats backticks
as normal delimiters; the replacement text is not evaluated as a command.
If the PATTERN is delimited by bracketing quotes, the REPLACEMENT has
its own pair of quotes, which may or may not be bracketing quotes, e.g.,
d1793 1
a1793 1
related to Perl's quoting rules. C<q()>, C<qq()>, and the like are not
a2007 5
Processing of C<\N{...}> is also done here, and compiled into an intermediate
form for the regex compiler.  (This is because, as mentioned below, the regex
compilation may be done at execution time, and C<\N{...}> is a compile-time
construct.)

d2057 1
a2057 1
but this one happens at run time, although it may be optimized to
d2170 2
a2171 2
In other boolean contexts, C<< <filehandle> >> without an
explicit C<defined> test or comparison elicits a warning if the
d2216 1
a2216 1
internally. <> is just a synonym for <ARGV>, which
d2450 2
a2451 2
Testing for exact floating-point equality or inequality is not a
good idea.  Here's a (relatively expensive) work-around to compare
@


1.1.1.14
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d155 1
a155 1
a variable twice in the same statement will lead to undefined behavior.
d171 4
a174 4
    print ++($foo = "99");	# prints "100"
    print ++($foo = "a0");	# prints "a1"
    print ++($foo = "Az");	# prints "Ba"
    print ++($foo = "zz");	# prints "aaa"
d193 1
a193 1
Unary "!" performs logical negation, that is, "not".  See also C<not> for a lower
d197 5
a201 6
Unary "-" performs arithmetic negation if the operand is numeric,
including any string that looks like a number.  If the operand is
an identifier, a string consisting of a minus sign concatenated
with the identifier is returned.  Otherwise, if the string starts
with a plus or minus, a string starting with the opposite sign is
returned.  One effect of these rules is that -bareword is equivalent
d209 1
a209 1
Unary "~" performs bitwise negation, that is, 1's complement.  For
d214 1
a214 1
width, remember to use the "&" operator to mask off the excess bits.
a216 6
When complementing strings, if all characters have ordinal values under
256, then their complements will, also.  But if they do not, all
characters will be in either 32- or 64-bit complements, depending on your
architecture.  So for example, C<~"\x{3B1}"> is C<"\x{FFFF_FC4E}"> on
32-bit machines and C<"\x{FFFF_FFFF_FFFF_FC4E}"> on 64-bit machines.

d238 3
a240 6
success of the operation.  The exceptions are substitution (s///)
and transliteration (y///) with the C</r> (non-destructive) option,
which cause the B<r>eturn value to be the result of the substitution.
Behavior in list context depends on the particular operator.
See L</"Regexp Quote-Like Operators"> for details and L<perlretut> for
examples using these operators.
d246 1
a246 1
    '\\' =~ q'\\';
a253 3
Binary "!~" with a non-destructive substitution (s///r) or transliteration
(y///r) is a syntax error.

d269 1
a269 1
smallest multiple of C<$b> that is not less than C<$a> (that is, the
d307 1
a307 1
Binary C<+> returns the sum of two numbers.
d310 1
a310 1
Binary C<-> returns the difference of two numbers.
d313 1
a313 1
Binary C<.> concatenates two strings.
d322 1
a322 1
Binary C<<< << >>> returns the value of its left argument shifted left by the
d326 1
a326 1
Binary C<<< >> >>> returns the value of its left argument shifted right by
d330 2
a331 2
Note that both C<<< << >>> and C<<< >> >>> in Perl are implemented directly using
C<<< << >>> and C<<< >> >>>  in C.  If C<use integer> (see L<Integer Arithmetic>) is
a341 9
If you get tired of being subject to your platform's native integers,
the C<use bigint> pragma neatly sidesteps the issue altogether:

    print 20 << 20;  # 20971520
    print 20 << 40;  # 5120 on 32-bit machines, 
                     # 21990232555520 on 64-bit machines
    use bigint;
    print 20 << 100; # 25353012004564588029934064107520

d352 1
a352 1
because named unary operators are higher precedence than C<||>:
a381 7
Perl operators that return true or false generally return values 
that can be safely used as numbers.  For example, the relational
operators in this section and the equality operators in the next
one return C<1> for true and a special version of the defined empty
string, C<"">, which counts as a zero but is exempt from warnings
about improper numeric conversions, just as C<"0 but true"> is.

d434 2
a435 5
    $ perl -le '$a = "NaN"; print "No NaN support here" if $a == $a'
    $ perl -le '$a = "NaN"; print "NaN support here" if $a != $a'

(Note that the L<bigint>, L<bigrat>, and L<bignum> pragmas all 
support "NaN".)
d450 2
a451 2
Binary "~~" does a smartmatch between its arguments.  Smart matching
is described in the next section.
d455 1
a455 296
by the current locale if a legacy C<use locale> (but not
C<use locale ':not_characters'>) is in effect.  See
L<perllocale>.  Do not mix these with Unicode, only with legacy binary
encodings.  The standard L<Unicode::Collate> and
L<Unicode::Collate::Locale> modules offer much more powerful solutions to
collation issues.

=head2 Smartmatch Operator

First available in Perl 5.10.1 (the 5.10.0 version behaved differently),
binary C<~~> does a "smartmatch" between its arguments.  This is mostly
used implicitly in the C<when> construct described in L<perlsyn>, although
not all C<when> clauses call the smartmatch operator.  Unique among all of
Perl's operators, the smartmatch operator can recurse.

It is also unique in that all other Perl operators impose a context
(usually string or numeric context) on their operands, autoconverting
those operands to those imposed contexts.  In contrast, smartmatch
I<infers> contexts from the actual types of its operands and uses that
type information to select a suitable comparison mechanism.

The C<~~> operator compares its operands "polymorphically", determining how
to compare them according to their actual types (numeric, string, array,
hash, etc.)  Like the equality operators with which it shares the same
precedence, C<~~> returns 1 for true and C<""> for false.  It is often best
read aloud as "in", "inside of", or "is contained in", because the left
operand is often looked for I<inside> the right operand.  That makes the
order of the operands to the smartmatch operand often opposite that of
the regular match operator.  In other words, the "smaller" thing is usually
placed in the left operand and the larger one in the right.

The behavior of a smartmatch depends on what type of things its arguments
are, as determined by the following table.  The first row of the table
whose types apply determines the smartmatch behavior.  Because what
actually happens is mostly determined by the type of the second operand,
the table is sorted on the right operand instead of on the left.

 Left      Right      Description and pseudocode                               
 ===============================================================
 Any       undef      check whether Any is undefined                    
                like: !defined Any

 Any       Object     invoke ~~ overloading on Object, or die

 Right operand is an ARRAY:

 Left      Right      Description and pseudocode                               
 ===============================================================
 ARRAY1    ARRAY2     recurse on paired elements of ARRAY1 and ARRAY2[2]
                like: (ARRAY1[0] ~~ ARRAY2[0])
                        && (ARRAY1[1] ~~ ARRAY2[1]) && ...
 HASH      ARRAY      any ARRAY elements exist as HASH keys             
                like: grep { exists HASH->{$_} } ARRAY
 Regexp    ARRAY      any ARRAY elements pattern match Regexp
                like: grep { /Regexp/ } ARRAY
 undef     ARRAY      undef in ARRAY                                    
                like: grep { !defined } ARRAY
 Any       ARRAY      smartmatch each ARRAY element[3]                   
                like: grep { Any ~~ $_ } ARRAY

 Right operand is a HASH:

 Left      Right      Description and pseudocode                               
 ===============================================================
 HASH1     HASH2      all same keys in both HASHes                      
                like: keys HASH1 ==
                         grep { exists HASH2->{$_} } keys HASH1
 ARRAY     HASH       any ARRAY elements exist as HASH keys             
                like: grep { exists HASH->{$_} } ARRAY
 Regexp    HASH       any HASH keys pattern match Regexp                
                like: grep { /Regexp/ } keys HASH
 undef     HASH       always false (undef can't be a key)               
                like: 0 == 1
 Any       HASH       HASH key existence                                
                like: exists HASH->{Any}

 Right operand is CODE:
   
 Left      Right      Description and pseudocode                               
 ===============================================================
 ARRAY     CODE       sub returns true on all ARRAY elements[1]
                like: !grep { !CODE->($_) } ARRAY
 HASH      CODE       sub returns true on all HASH keys[1]
                like: !grep { !CODE->($_) } keys HASH
 Any       CODE       sub passed Any returns true              
                like: CODE->(Any)

Right operand is a Regexp:

 Left      Right      Description and pseudocode                               
 ===============================================================
 ARRAY     Regexp     any ARRAY elements match Regexp                   
                like: grep { /Regexp/ } ARRAY
 HASH      Regexp     any HASH keys match Regexp                        
                like: grep { /Regexp/ } keys HASH
 Any       Regexp     pattern match                                     
                like: Any =~ /Regexp/

 Other:

 Left      Right      Description and pseudocode                               
 ===============================================================
 Object    Any        invoke ~~ overloading on Object,
                      or fall back to...

 Any       Num        numeric equality                                  
                 like: Any == Num
 Num       nummy[4]    numeric equality
                 like: Num == nummy
 undef     Any        check whether undefined
                 like: !defined(Any)
 Any       Any        string equality                                   
                 like: Any eq Any


Notes:

=over

=item 1.
Empty hashes or arrays match. 

=item 2.
That is, each element smartmatches the element of the same index in the other array.[3]

=item 3.
If a circular reference is found, fall back to referential equality. 

=item 4.
Either an actual number, or a string that looks like one.

=back

The smartmatch implicitly dereferences any non-blessed hash or array
reference, so the C<I<HASH>> and C<I<ARRAY>> entries apply in those cases.
For blessed references, the C<I<Object>> entries apply.  Smartmatches
involving hashes only consider hash keys, never hash values.

The "like" code entry is not always an exact rendition.  For example, the
smartmatch operator short-circuits whenever possible, but C<grep> does
not.  Also, C<grep> in scalar context returns the number of matches, but
C<~~> returns only true or false.

Unlike most operators, the smartmatch operator knows to treat C<undef>
specially:

    use v5.10.1;
    @@array = (1, 2, 3, undef, 4, 5);
    say "some elements undefined" if undef ~~ @@array;

Each operand is considered in a modified scalar context, the modification
being that array and hash variables are passed by reference to the
operator, which implicitly dereferences them.  Both elements
of each pair are the same:

    use v5.10.1;

    my %hash = (red    => 1, blue   => 2, green  => 3,
                orange => 4, yellow => 5, purple => 6,
                black  => 7, grey   => 8, white  => 9);

    my @@array = qw(red blue green);

    say "some array elements in hash keys" if  @@array ~~  %hash;
    say "some array elements in hash keys" if \@@array ~~ \%hash;

    say "red in array" if "red" ~~  @@array;
    say "red in array" if "red" ~~ \@@array;

    say "some keys end in e" if /e$/ ~~  %hash;
    say "some keys end in e" if /e$/ ~~ \%hash;

Two arrays smartmatch if each element in the first array smartmatches
(that is, is "in") the corresponding element in the second array,
recursively.

    use v5.10.1;
    my @@little = qw(red blue green);
    my @@bigger = ("red", "blue", [ "orange", "green" ] );
    if (@@little ~~ @@bigger) {  # true!
        say "little is contained in bigger";
    } 

Because the smartmatch operator recurses on nested arrays, this
will still report that "red" is in the array.

    use v5.10.1;
    my @@array = qw(red blue green);
    my $nested_array = [[[[[[[ @@array ]]]]]]];
    say "red in array" if "red" ~~ $nested_array;

If two arrays smartmatch each other, then they are deep
copies of each others' values, as this example reports:

    use v5.12.0;
    my @@a = (0, 1, 2, [3, [4, 5], 6], 7); 
    my @@b = (0, 1, 2, [3, [4, 5], 6], 7); 

    if (@@a ~~ @@b && @@b ~~ @@a) {
        say "a and b are deep copies of each other";
    } 
    elsif (@@a ~~ @@b) {
        say "a smartmatches in b";
    } 
    elsif (@@b ~~ @@a) {
        say "b smartmatches in a";
    } 
    else {
        say "a and b don't smartmatch each other at all";
    } 


If you were to set C<$b[3] = 4>, then instead of reporting that "a and b
are deep copies of each other", it now reports that "b smartmatches in a".
That because the corresponding position in C<@@a> contains an array that
(eventually) has a 4 in it.

Smartmatching one hash against another reports whether both contain the
same keys, no more and no less. This could be used to see whether two
records have the same field names, without caring what values those fields
might have.  For example:

    use v5.10.1;
    sub make_dogtag {
        state $REQUIRED_FIELDS = { name=>1, rank=>1, serial_num=>1 };

        my ($class, $init_fields) = @@_;

        die "Must supply (only) name, rank, and serial number"
            unless $init_fields ~~ $REQUIRED_FIELDS;

        ...
    }

or, if other non-required fields are allowed, use ARRAY ~~ HASH:

    use v5.10.1;
    sub make_dogtag {
        state $REQUIRED_FIELDS = { name=>1, rank=>1, serial_num=>1 };

        my ($class, $init_fields) = @@_;

        die "Must supply (at least) name, rank, and serial number"
            unless [keys %{$init_fields}] ~~ $REQUIRED_FIELDS;

        ...
    }

The smartmatch operator is most often used as the implicit operator of a
C<when> clause.  See the section on "Switch Statements" in L<perlsyn>.

=head3 Smartmatching of Objects

To avoid relying on an object's underlying representation, if the
smartmatch's right operand is an object that doesn't overload C<~~>,
it raises the exception "C<Smartmatching a non-overloaded object
breaks encapsulation>". That's because one has no business digging
around to see whether something is "in" an object. These are all
illegal on objects without a C<~~> overload:

    %hash ~~ $object
       42 ~~ $object
   "fred" ~~ $object

However, you can change the way an object is smartmatched by overloading
the C<~~> operator. This is allowed to extend the usual smartmatch semantics.
For objects that do have an C<~~> overload, see L<overload>.

Using an object as the left operand is allowed, although not very useful.
Smartmatching rules take precedence over overloading, so even if the
object in the left operand has smartmatch overloading, this will be
ignored.  A left operand that is a non-overloaded object falls back on a
string or numeric comparison of whatever the C<ref> operator returns.  That
means that

    $object ~~ X

does I<not> invoke the overload method with C<I<X>> as an argument.
Instead the above table is consulted as normal, and based on the type of
C<I<X>>, overloading may or may not be invoked.  For simple strings or
numbers, in becomes equivalent to this:

    $object ~~ $number          ref($object) == $number
    $object ~~ $string          ref($object) eq $string 

For example, this reports that the handle smells IOish
(but please don't really do this!):

    use IO::Handle;
    my $fh = IO::Handle->new();
    if ($fh ~~ /\bIO\b/) {
        say "handle smells IOish";
    } 

That's because it treats C<$fh> as a string like
C<"IO::Handle=GLOB(0x8039e0)">, then pattern matches against that.
d464 1
a464 1
the parentheses are essential in a test like
d466 1
a466 1
    print "Even\n" if ($x & 1) == 0;
d481 1
a481 1
    print "false\n" if (8 | 2) != 10;
d499 1
a499 1
=head2 Logical Defined-Or
d504 6
a509 9
tests the left hand side's definedness instead of its truth.  Thus,
C<< EXPR1 // EXPR2 >> returns the value of C<< EXPR1 >> if it's defined,
otherwise, the value of C<< EXPR2 >> is returned. (C<< EXPR1 >> is evaluated
in scalar context, C<< EXPR2 >> in the context of C<< // >> itself). Usually,
this is the same result as C<< defined(EXPR1) ? EXPR1 : EXPR2 >> (except that
the ternary-operator form can be used as a lvalue, while C<< EXPR1 // EXPR2 >>
cannot). This is very useful for
providing default values for variables.  If you actually want to test if
at least one of C<$a> and C<$b> is defined, use C<defined($a // $b)>.
d515 2
a516 4
    $home =  $ENV{HOME}
	  // $ENV{LOGDIR}
	  // (getpwuid($<))[7]
	  // die "You're homeless!\n";
d525 1
a525 1
As alternatives to C<&&> and C<||> when used for
a538 7
It would be even more readable to write that this way:

    unless(unlink("alpha", "beta", "gamma")) {
        gripe();
        next LINE;
    } 

d605 1
a605 1
                               #  if ($. == 101 .. $. == 200) { print; }
d646 3
a648 3
    for (101 .. 200) { print }      # print $_ 100 times
    @@foo = @@foo[0 .. $#foo];        # an expensive no-op
    @@foo = @@foo[$#foo-4 .. $#foo];  # slice last 5 items
d654 1
a654 1
    @@alphabet = ("A" .. "Z");
d658 1
a658 1
    $hexdigit = (0 .. 9, "a" .. "f")[$num & 15];
d662 1
a662 2
    @@z2 = ("01" .. "31");
    print $z2[$mday];
d671 1
a671 1
sequence (that is, a non-empty string matching C</^[a-zA-Z]*[0-9]*\z/>),
d675 1
a675 1
    use charnames "greek";
d678 1
a678 2
To get the 25 traditional lowercase Greek letters, including both sigmas,
you could use this instead:
d680 1
a680 9
    use charnames "greek";
    my @@greek_small =  map { chr } ( ord("\N{alpha}") 
                                        ..
                                     ord("\N{omega}") 
                                   );

However, because there are I<many> other lowercase Greek characters than
just those, to match lowercase Greek characters in a regular expression,
you would use the pattern C</(?:(?=\p{Greek})\p{Lower})+/>.
d696 1
a696 1
	    ($n == 1) ? "" : "s";
d759 1
a759 6
    ($tmp = $global) =~ tr/13579/24680/;

Although as of 5.14, that can be also be accomplished this way:

    use v5.14;
    $tmp = ($global =~  tr/13579/24680/r);
d786 2
a787 2
The C<< => >> operator is a synonym for the comma except that it causes a
word on its left to be interpreted as a string if it begins with a letter
d791 1
a791 1
this behavior, the left operand can be quoted explicitly.
d813 56
a868 2
    %hash = ( $key => $value );
    login( $username => $password );
d870 2
a871 2
The special quoting behavior ignores precedence, and hence may apply to
I<part> of the left operand:
d873 1
a873 1
    print time.shift => "bbb";
d875 1
a875 3
That example prints something like "1314363215shiftbbb", because the
C<< => >> implicitly quotes the C<shift> immediately on its left, ignoring
the fact that C<time.shift> is the entire left operand.
d880 1
a880 1
On the right side of a list operator, the comma has very low precedence,
d884 1
a884 1
operators without the need for parentheses:
d886 2
a887 10
    open HANDLE, "< :utf8", "filename" or die "Can't open: $!\n";

However, some people find that code harder to read than writing
it with parentheses:

    open(HANDLE, "< :utf8", "filename") or die "Can't open: $!\n";

in which case you might as well just use the more customary "||" operator:

    open(HANDLE, "< :utf8", "filename") || die "Can't open: $!\n";
d901 2
a902 2
expressions.  It's equivalent to C<&&> except for the very low
precedence.  This means that it short-circuits: the right
d905 1
a905 1
=head2 Logical or and Exclusive Or
d907 1
a907 1
X<operator, logical, exclusive or>
d911 2
a912 2
expressions.  It's equivalent to C<||> except for the very low precedence.
This makes it useful for control flow:
d916 3
a918 4
This means that it short-circuits: the right expression is evaluated
only if the left expression is false.  Due to its precedence, you must
be careful to avoid using it as replacement for the C<||> operator.
It usually works out better for flow control than in assignments:
d925 1
a925 1
C<||> for control flow, you probably need "or" so that the assignment
d933 2
a934 4
Binary C<xor> returns the exclusive-OR of the two surrounding expressions.
It cannot short-circuit (of course).

There is no low precedence operator for defined-OR.
d964 1
a980 1
		 y{}{}	  Transliteration	  no (but see below)
d986 1
a986 1
sorts of ASCII brackets (round, angle, square, curly) all nest, which means
d989 1
a989 1
    q{foo{bar}baz}
d993 1
a993 1
    'foo{bar}baz'
d997 1
a997 1
    $s = q{ if($a eq "}") ... }; # WRONG
d999 3
a1001 2
is a syntax error. The C<Text::Balanced> module (standard as of v5.8,
and from CPAN before then) is able to do this properly.
d1012 29
a1040 166
The following escape sequences are available in constructs that interpolate,
and in transliterations:
X<\t> X<\n> X<\r> X<\f> X<\b> X<\a> X<\e> X<\x> X<\0> X<\c> X<\N> X<\N{}>
X<\o{}>

    Sequence     Note  Description
    \t                  tab               (HT, TAB)
    \n                  newline           (NL)
    \r                  return            (CR)
    \f                  form feed         (FF)
    \b                  backspace         (BS)
    \a                  alarm (bell)      (BEL)
    \e                  escape            (ESC)
    \x{263A}     [1,8]  hex char          (example: SMILEY)
    \x1b         [2,8]  restricted range hex char (example: ESC)
    \N{name}     [3]    named Unicode character or character sequence
    \N{U+263D}   [4,8]  Unicode character (example: FIRST QUARTER MOON)
    \c[          [5]    control char      (example: chr(27))
    \o{23072}    [6,8]  octal char        (example: SMILEY)
    \033         [7,8]  restricted range octal char  (example: ESC)

=over 4

=item [1]

The result is the character specified by the hexadecimal number between
the braces.  See L</[8]> below for details on which character.

Only hexadecimal digits are valid between the braces. If an invalid
character is encountered, a warning will be issued and the invalid
character and all subsequent characters (valid or invalid) within the
braces will be discarded.

If there are no valid digits between the braces, the generated character is
the NULL character (C<\x{00}>).  However, an explicit empty brace (C<\x{}>)
will not cause a warning (currently).

=item [2]

The result is the character specified by the hexadecimal number in the range
0x00 to 0xFF.  See L</[8]> below for details on which character.

Only hexadecimal digits are valid following C<\x>.  When C<\x> is followed
by fewer than two valid digits, any valid digits will be zero-padded.  This
means that C<\x7> will be interpreted as C<\x07>, and a lone <\x> will be
interpreted as C<\x00>.  Except at the end of a string, having fewer than
two valid digits will result in a warning.  Note that although the warning
says the illegal character is ignored, it is only ignored as part of the
escape and will still be used as the subsequent character in the string.
For example:

  Original    Result    Warns?
  "\x7"       "\x07"    no
  "\x"        "\x00"    no
  "\x7q"      "\x07q"   yes
  "\xq"       "\x00q"   yes

=item [3]

The result is the Unicode character or character sequence given by I<name>.
See L<charnames>.

=item [4]

C<\N{U+I<hexadecimal number>}> means the Unicode character whose Unicode code
point is I<hexadecimal number>.

=item [5]

The character following C<\c> is mapped to some other character as shown in the
table:

 Sequence   Value
   \c@@      chr(0)
   \cA      chr(1)
   \ca      chr(1)
   \cB      chr(2)
   \cb      chr(2)
   ...
   \cZ      chr(26)
   \cz      chr(26)
   \c[      chr(27)
   \c]      chr(29)
   \c^      chr(30)
   \c?      chr(127)

In other words, it's the character whose code point has had 64 xor'd with
its uppercase.  C<\c?> is DELETE because C<ord("@@") ^ 64> is 127, and
C<\c@@> is NULL because the ord of "@@" is 64, so xor'ing 64 itself produces 0.

Also, C<\c\I<X>> yields C< chr(28) . "I<X>"> for any I<X>, but cannot come at the
end of a string, because the backslash would be parsed as escaping the end
quote.

On ASCII platforms, the resulting characters from the list above are the
complete set of ASCII controls.  This isn't the case on EBCDIC platforms; see
L<perlebcdic/OPERATOR DIFFERENCES> for the complete list of what these
sequences mean on both ASCII and EBCDIC platforms.

Use of any other character following the "c" besides those listed above is
discouraged, and some are deprecated with the intention of removing
those in a later Perl version.  What happens for any of these
other characters currently though, is that the value is derived by xor'ing
with the seventh bit, which is 64.

To get platform independent controls, you can use C<\N{...}>.

=item [6]

The result is the character specified by the octal number between the braces.
See L</[8]> below for details on which character.

If a character that isn't an octal digit is encountered, a warning is raised,
and the value is based on the octal digits before it, discarding it and all
following characters up to the closing brace.  It is a fatal error if there are
no octal digits at all.

=item [7]

The result is the character specified by the three-digit octal number in the
range 000 to 777 (but best to not use above 077, see next paragraph).  See
L</[8]> below for details on which character.

Some contexts allow 2 or even 1 digit, but any usage without exactly
three digits, the first being a zero, may give unintended results.  (For
example, in a regular expression it may be confused with a backreference;
see L<perlrebackslash/Octal escapes>.)  Starting in Perl 5.14, you may
use C<\o{}> instead, which avoids all these problems.  Otherwise, it is best to
use this construct only for ordinals C<\077> and below, remembering to pad to
the left with zeros to make three digits.  For larger ordinals, either use
C<\o{}>, or convert to something else, such as to hex and use C<\x{}>
instead.

Having fewer than 3 digits may lead to a misleading warning message that says
that what follows is ignored.  For example, C<"\128"> in the ASCII character set
is equivalent to the two characters C<"\n8">, but the warning C<Illegal octal
digit '8' ignored> will be thrown.  If C<"\n8"> is what you want, you can
avoid this warning by padding your octal number with C<0>'s: C<"\0128">.

=item [8]

Several constructs above specify a character by a number.  That number
gives the character's position in the character set encoding (indexed from 0).
This is called synonymously its ordinal, code position, or code point.  Perl
works on platforms that have a native encoding currently of either ASCII/Latin1
or EBCDIC, each of which allow specification of 256 characters.  In general, if
the number is 255 (0xFF, 0377) or below, Perl interprets this in the platform's
native encoding.  If the number is 256 (0x100, 0400) or above, Perl interprets
it as a Unicode code point and the result is the corresponding Unicode
character.  For example C<\x{50}> and C<\o{120}> both are the number 80 in
decimal, which is less than 256, so the number is interpreted in the native
character set encoding.  In ASCII the character in the 80th position (indexed
from 0) is the letter "P", and in EBCDIC it is the ampersand symbol "&".
C<\x{100}> and C<\o{400}> are both 256 in decimal, so the number is interpreted
as a Unicode code point no matter what the native encoding is.  The name of the
character in the 256th position (indexed by 0) in Unicode is
C<LATIN CAPITAL LETTER A WITH MACRON>.

There are a couple of exceptions to the above rule.  S<C<\N{U+I<hex number>}>> is
always interpreted as a Unicode code point, so that C<\N{U+0050}> is "P" even
on EBCDIC platforms.  And if L<C<S<use encoding>>|encoding> is in effect, the
number is considered to be in that encoding, and is translated from that into
the platform's native encoding if there is a corresponding native character;
otherwise to Unicode.

=back
d1048 1
a1048 1
X<\l> X<\u> X<\L> X<\U> X<\E> X<\Q> X<\F>
d1050 12
a1061 27
    \l		lowercase next character only
    \u		titlecase (not uppercase!) next character only
    \L		lowercase all characters till \E or end of string
    \U		uppercase all characters till \E or end of string
    \F		foldcase all characters till \E or end of string
    \Q          quote (disable) pattern metacharacters till \E or
                end of string
    \E		end either case modification or quoted section
		(whichever was last seen)

See L<perlfunc/quotemeta> for the exact definition of characters that
are quoted by C<\Q>.

C<\L>, C<\U>, C<\F>, and C<\Q> can stack, in which case you need one
C<\E> for each.  For example:

 say"This \Qquoting \ubusiness \Uhere isn't quite\E done yet,\E is it?";
 This quoting\ Business\ HERE\ ISN\'T\ QUITE\ done\ yet\, is it?

If C<use locale> is in effect (but not C<use locale ':not_characters'>),
the case map used by C<\l>, C<\L>,
C<\u>, and C<\U> is taken from the current locale.  See L<perllocale>.
If Unicode (for example, C<\N{}> or code points of 0x100 or
beyond) is being used, the case map used by C<\l>, C<\L>, C<\u>, and
C<\U> is as defined by Unicode.  That means that case-mapping
a single character can sometimes produce several characters.
Under C<use locale>, C<\F> produces the same results as C<\L>.
d1068 2
a1069 3
on the ancient Macs (pre-MacOS X) of yesteryear, these used to be reversed,
and on systems without line terminator,
printing C<"\n"> might emit no actual data.  In general, use C<"\n"> when
d1086 8
a1093 22
C<join $", @@array>.  "Punctuation" arrays such as C<@@*> are usually
interpolated only if the name is enclosed in braces C<@@{*}>, but the
arrays C<@@_>, C<@@+>, and C<@@-> are interpolated even without braces.

For double-quoted strings, the quoting from C<\Q> is applied after
interpolation and escapes are processed.

    "abc\Qfoo\tbar$s\Exyz"

is equivalent to

    "abc" . quotemeta("foo\tbar$s") . "xyz"

For the pattern of regex operators (C<qr//>, C<m//> and C<s///>),
the quoting from C<\Q> is applied after interpolation is processed,
but before escapes are processed. This allows the pattern to match
literally (except for C<$> and C<@@>). For example, the following matches:

    '\s\t' =~ /\Q\s\t/

Because C<$> or C<@@> trigger interpolation, you'll need to use something
like C</\Quser\E\@@\Qhost/> to match them literally.
d1115 1
a1115 1
=item qr/STRING/msixpodual
d1122 1
a1122 1
corresponding C</STRING/msixpodual> expression. The returned value is a
d1124 2
a1125 4
a string containing the same characters: C<ref(qr/x/)> returns "Regexp";
however, dereferencing it is not well defined (you currently get the 
normalized version of the original pattern, but this may change).

d1144 1
a1144 1
Since Perl may compile the pattern at the moment of execution of the qr()
d1166 1
a1166 1
Options (specified by the following modifiers) are:
a1174 6
    a   ASCII-restrict: Use ASCII for \d, \s, \w; specifying two a's
        further restricts /i matching so that no ASCII character will
        match a non-ASCII one
    l   Use the locale
    u   Use Unicode rules
    d   Use Unicode or native charset, as in 5.12 and earlier
d1177 1
a1177 1
of "msixpluad" will be propagated appropriately.  The effect the "o"
a1180 5
The last four modifiers listed above, added in Perl 5.14,
control the character set semantics, but C</a> is the only one you are likely
to want to specify explicitly; the other three are selected
automatically by various pragmas.

d1182 1
a1182 3
for a detailed look at the semantics of regular expressions.  In
particular, all modifiers except the largely obsolete C</o> are further
explained in L<perlre/Modifiers>.  C</o> is described in the next section.
d1184 1
a1184 1
=item m/PATTERN/msixpodualgc
d1189 1
a1189 1
=item /PATTERN/msixpodualgc
d1196 3
a1198 1
rather tightly.)  See also L<perlre>.
d1200 1
a1200 1
Options are as described in C<qr//> above; in addition, the following match
d1203 2
a1204 2
 g  Match globally, i.e., find all occurrences.
 c  Do not reset search position on a failed match when /g is in effect.
d1207 1
a1207 1
you can use any pair of non-whitespace (ASCII) characters
d1210 1
a1210 2
the delimiter, then a match-only-once rule applies,
described in C<m?PATTERN?> below.
d1215 2
a1216 2
PATTERN may contain variables, which will be interpolated
every time the pattern search is evaluated, except
d1219 6
a1224 28
Perl will not recompile the pattern unless an interpolated
variable that it contains changes.  You can force Perl to skip the
test and never recompile by adding a C</o> (which stands for "once")
after the trailing delimiter.
Once upon a time, Perl would recompile regular expressions
unnecessarily, and this modifier was useful to tell it not to do so, in the
interests of speed.  But now, the only reasons to use C</o> are either:

=over

=item 1

The variables are thousands of characters long and you know that they
don't change, and you need to wring out the last little bit of speed by
having Perl skip testing for that.  (There is a maintenance penalty for
doing this, as mentioning C</o> constitutes a promise that you won't
change the variables in the pattern.  If you do change them, Perl won't
even notice.)

=item 2

you want the pattern to use the initial values of the variables
regardless of whether they change or not.  (But there are saner ways
of accomplishing this than using C</o>.)

=back

The bottom line is that using C</o> is almost never a good idea.
d1230 1
a1230 1
case, only the C<g> and C<c> flags on the empty pattern are honored;
d1248 1
a1248 1
pattern, that is, (C<$1>, C<$2>, C<$3>...).  (Note that here C<$1> etc. are
d1256 1
a1256 3
    open(TTY, "+</dev/tty")
	|| die "can't access /dev/tty: $!";

d1266 1
a1266 1
	print if /$arg/o;	# compile only once (no longer needed!)
d1273 2
a1274 2
$Etc.  The conditional is true if any variables were assigned; that is,
if the pattern matched.
d1277 2
a1278 2
matching as many times as possible within the string. How it behaves
depends on the context. In list context, it returns a list of the
d1280 1
a1280 1
expression. If there are no parentheses, it returns a list of all
d1286 2
a1287 2
The position after the last match can be read or set using the C<pos()>
function; see L<perlfunc/pos>. A failed match normally resets the
d1289 1
a1289 1
by adding the C</c> modifier (for example, C<m//gc>). Modifying the target
d1295 7
a1301 9
zero-width assertion that matches the exact position where the
previous C<m//g>, if any, left off. Without the C</g> modifier, the
C<\G> assertion still anchors at C<pos()> as it was at the start of
the operation (see L<perlfunc/pos>), but the match is of course only
attempted once. Using C<\G> without C</g> on a target string that has
not previously had a C</g> match applied to it is the same as using
the C<\A> assertion to match the beginning of the string.  Note also
that, currently, C<\G> is only properly supported when anchored at the
very beginning of the pattern.
d1309 3
a1311 3
    local $/ = "";
    while ($paragraph = <>) {
	while ($paragraph =~ /\p{Ll}['")]*[.!?]+['")]*\s/g) {
d1315 1
a1315 26
    say $sentences;

Here's another way to check for sentences in a paragraph:

    my $sentence_rx = qr{
	(?: (?<= ^ ) | (?<= \s ) )  # after start-of-string or whitespace
	\p{Lu}                      # capital letter
	.*?                         # a bunch of anything
	(?<= \S )                   # that ends in non-whitespace
	(?<! \b [DMS]r  )           # but isn't a common abbreviation
	(?<! \b Mrs )
	(?<! \b Sra )
	(?<! \b St  )
	[.?!]                       # followed by a sentence ender
	(?= $ | \s )                # in front of end-of-string or whitespace
    }sx;
    local $/ = "";
    while (my $paragraph = <>) {
	say "NEW PARAGRAPH";
	my $count = 0;
	while ($paragraph =~ /($sentence_rx)/g) {
	    printf "\tgot sentence %d: <%s>\n", ++$count, $1;
	}
    }

Here's how to use C<m//gc> with C<\G>:
d1317 1
d1342 2
a1343 2
final match did indeed match C<p>, it's a good bet that you're running a
very old (pre-5.6.0) version of Perl.
d1351 1
a1351 1
    $url = URI::URL->new( "http://example.com/" ); die if $url eq "xXx";
d1353 11
a1363 11

 LOOP: {
     print(" digits"),       redo LOOP if /\G\d+\b[,.;]?\s*/gc;
     print(" lowercase"),    redo LOOP if /\G\p{Ll}+\b[,.;]?\s*/gc;
     print(" UPPERCASE"),    redo LOOP if /\G\p{Lu}+\b[,.;]?\s*/gc;
     print(" Capitalized"),  redo LOOP if /\G\p{Lu}\p{Ll}+\b[,.;]?\s*/gc;
     print(" MiXeD"),        redo LOOP if /\G\pL+\b[,.;]?\s*/gc;
     print(" alphanumeric"), redo LOOP if /\G[\p{Alpha}\pN]+\b[,.;]?\s*/gc;
     print(" line-noise"),   redo LOOP if /\G\W+/gc;
     print ". That's all!\n";
 }
d1367 4
a1370 7
    line-noise lowercase line-noise UPPERCASE line-noise UPPERCASE
    line-noise lowercase line-noise lowercase line-noise lowercase
    lowercase line-noise lowercase lowercase line-noise lowercase
    lowercase line-noise MiXeD line-noise. That's all!

=item m?PATTERN?msixpodualgc
X<?> X<operator, match-once>
d1372 2
a1373 1
=item ?PATTERN?msixpodualgc
d1375 2
a1376 2
This is just like the C<m/PATTERN/> search, except that it matches
only once between calls to the reset() operator.  This is a useful
d1378 1
a1378 1
something in each file of a set of files, for instance.  Only C<m??>
d1382 1
a1382 1
	if (m?^$?) {
d1386 1
a1386 1
	reset if eof;	    # clear m?? status for next file
d1389 3
a1391 4
Another example switched the first "latin1" encoding it finds
to "utf8" in a pod file:

    s//utf8/ if m? ^ =encoding \h+ \K latin1 ?x;
d1393 1
a1393 9
The match-once behavior is controlled by the match delimiter being
C<?>; with any other delimiter this is the normal C<m//> operator.  

For historical reasons, the leading C<m> in C<m?PATTERN?> is optional,
but the resulting C<?PATTERN?> syntax is deprecated, will warn on
usage and might be removed from a future stable release of Perl (without
further notice!).

=item s/PATTERN/REPLACEMENT/msixpodualgcer
d1395 1
a1395 1
X<regexp, substitute> X</m> X</s> X</i> X</x> X</p> X</o> X</g> X</c> X</e> X</r>
a1400 7
If the C</r> (non-destructive) option is used then it runs the
substitution on a copy of the string and instead of returning the
number of substitutions, it returns the copy whether or not a
substitution occurred.  The original string is never changed when
C</r> is used.  The copy will always be a plain string, even if the
input is an object or a tied variable.

d1402 3
a1404 4
variable is searched and modified.  Unless the C</r> option is used,
the string specified must be a scalar variable, an array element, a
hash element, or an assignment to one of those; that is, some sort of
scalar lvalue.
d1414 2
d1421 1
a1421 2
    ee  Evaluate the right side as a string then eval the result.
    r   Return substitution and leave the original string untouched.
d1429 1
a1429 1
its own pair of quotes, which may or may not be bracketing quotes, for example,
a1444 5
    ($foo = "$bar") =~ s/this/that/;	# convert to string, copy, then change
    $foo = $bar =~ s/this/that/r;	# Same as above using /r
    $foo = $bar =~ s/this/that/r
                =~ s/that/the other/r;	# Chained substitutes using /r
    @@foo = map { s/this/that/r } @@bar	# /r is very useful in maps
a1456 4
    $_ = 'abc123xyz';
    $a = s/abc/def/r;           # $a is 'def123xyz' and
                                # $_ remains 'abc123xyz'.

a1463 3
    # Titlecase words in the last 30 characters only
    substr($str, -30) =~ s/\b(\p{Alpha}+)\b/\u\L$1/g;

a1497 8
C<s///le> is treated as a substitution followed by the C<le> operator, not
the C</le> flags.  This may change in a future version of Perl.  It
produces a warning if warnings are enabled.  To disambiguate, use a space
or change the order of the flags:

    s/foo/bar/ le 5;  # "le" infix operator
    s/foo/bar/el;     # "e" and "l" flags

d1573 3
a1575 3
    open(SPLAT, "stuff")   || die "can't open stuff: $!";
    open(STDIN, "<&SPLAT") || die "can't dupe SPLAT: $!";
    print STDOUT `sort`;
d1577 1
a1577 1
will print the sorted contents of the file named F<"stuff">.
d1596 2
a1597 2
separator character, if your shell supports that (for example, C<;> on 
many Unix shells and C<&> on the Windows NT C<cmd> shell).
d1628 1
a1628 1
    split(" ", q/STRING/);
d1638 1
a1638 1
    "foo", "bar", "baz"
d1650 2
a1651 1
=item tr/SEARCHLIST/REPLACEMENTLIST/cdsr
d1654 1
a1654 1
=item y/SEARCHLIST/REPLACEMENTLIST/cdsr
d1659 3
a1661 11
specified via the C<=~> or C<!~> operator, the $_ string is transliterated.

If the C</r> (non-destructive) option is present, a new copy of the string
is made and its characters transliterated, and this copy is returned no
matter whether it was modified or not: the original string is always
left unchanged.  The new copy is always a plain string, even if the input
string is an object or a tied variable.

Unless the C</r> option is used, the string specified with C<=~> must be a
scalar variable, an array element, a hash element, or an assignment to one
of those; in other words, an lvalue.
d1667 2
a1668 2
its own pair of quotes, which may or may not be bracketing quotes;
for example, C<tr[aeiouy][yuoiea]> or C<tr(+\-*/)/ABCD/>.
d1670 5
a1674 8
Note that C<tr> does B<not> do regular expression character classes such as
C<\d> or C<\pL>.  The C<tr> operator is not equivalent to the tr(1)
utility.  If you want to map strings between lower/upper cases, see
L<perlfunc/lc> and L<perlfunc/uc>, and in general consider using the C<s>
operator if you need regular expressions.  The C<\U>, C<\u>, C<\L>, and
C<\l> string-interpolation escapes on the right side of a substitution
operator will perform correct case-mappings, but C<tr[a-z][A-Z]> will not
(except sometimes on legacy 7-bit data).
a1687 2
    r	Return the modified string and leave the original string
	untouched.
d1707 1
a1707 1
    $ARGV[1] =~ tr/A-Z/a-z/;	# canonicalize to lower case ASCII
a1717 4
     $HOST = $host  =~ tr/a-z/A-Z/r;   # same thing

    $HOST = $host =~ tr/a-z/A-Z/r    # chained with s///r
                  =~ s/:/ -p/r;
a1720 3
    @@stripped = map tr/a-zA-Z/ /csr, @@original;
				# /r with map

d1722 1
a1722 1
       [\000-\177];		# wickedly delete 8th bit
a1783 11
Just as in the shell, a backslashed bareword following the C<<< << >>>
means the same thing as a single-quoted string does:

	$cost = <<'VISTA';  # hasta la ...
    That'll be $10 please, ma'am.
    VISTA

	$cost = <<\VISTA;   # Same thing!
    That'll be $10 please, ma'am.
    VISTA

d1860 2
a1861 2
Additionally, quoting rules for the end-of-string identifier are
unrelated to Perl's quoting rules. C<q()>, C<qq()>, and the like are not
d1929 1
a1929 1
and C<\\> are skipped.  For example, while searching for terminating C</>,
d1936 2
a1937 3
During the search for the end, backslashes that escape delimiters or
backslashes are removed (exactly speaking, they are not copied to the
safe location).
d1944 1
a1944 1
If the left part is delimited by bracketing punctuation (that is C<()>,
d1946 1
a1946 1
delimiters such as C<s(){}> and C<tr[]//>.  In these cases, whitespace
d1948 2
a1949 2
at least one whitespace character; otherwise a character expected as the 
start of the comment may be regarded as the starting delimiter of the right part.
d2011 1
a2011 1
C<\Q>, C<\U>, C<\u>, C<\L>, C<\l>, C<\F> (possibly paired with C<\E>) are
d2062 1
a2062 1
Processing of C<\Q>, C<\U>, C<\u>, C<\L>, C<\l>, C<\F> and interpolation
d2073 1
a2073 1
Processing of C<\Q>, C<\U>, C<\u>, C<\L>, C<\l>, C<\F>, C<\E>,
d2229 1
a2229 2
This also behaves similarly, but assigns to a lexical variable 
instead of to C<$_>:
d2235 2
a2236 2
defined.  The defined test avoids problems where the line has a string
value that would be treated as false by Perl; for example a "" or
d2243 1
a2243 1
In other boolean contexts, C<< <FILEHANDLE> >> without an
d2265 1
a2265 3
behavior of B<sed> and B<awk>, and any other Unix filter program
that takes a list of filenames, doing the same to each line
of input from all of them.  Input from <> comes either from
d2339 1
a2339 1
If what the angle brackets contain is a simple scalar variable (for example,
d2390 1
a2390 2
because legal glob returns (for example,
a file called F<0>) would otherwise
d2421 2
a2422 3
      'Now is the time for all'
    . "\n" 
    .  'good men to come to.'
d2431 1
a2431 1
the compiler precomputes the number which that expression
d2438 1
a2438 1
C<0> and C<1> are special-cased not to produce a warning in void
d2486 3
a2488 3
you may tell the compiler to use integer operations
(see L<integer> for a detailed explanation) from here to the end of
the enclosing BLOCK.  An inner BLOCK may countermand this by saying
d2493 4
a2496 4
mean everything is an integer, merely that Perl will use integer
operations for arithmetic, comparison, and bitwise operators.  For
example, even under C<use integer>, if you take the C<sqrt(2)>, you'll
still get C<1.4142135623731> or so.
a2507 1

d2553 1
a2553 2
The standard C<Math::BigInt>, C<Math::BigRat>, and C<Math::BigFloat> modules,
along with the C<bigint>, C<bigrat>, and C<bitfloat> pragmas, provide
d2559 10
a2568 20
	use 5.010;
	use bigint;  # easy interface to Math::BigInt
	$x = 123456789123456789;
	say $x * $x;
    +15241578780673678515622620750190521

Or with rationals:

	use 5.010;
	use bigrat;
	$a = 3/22;
	$b = 4/6;
	say "a/b is ", $a/$b;
	say "a*b is ", $a*$b;
    a/b is 9/44
    a*b is 1/11

Several modules let you calculate with (bound only by memory and CPU time)
unlimited or fixed precision. There are also some non-standard modules that
provide faster implementations via external C libraries.
d2572 11
a2582 11
  Math::Fraction         big, unlimited fractions like 9973 / 12967
  Math::String           treat string sequences like numbers
  Math::FixedPrecision   calculate with a fixed precision
  Math::Currency         for currency calculations
  Bit::Vector            manipulate bit vectors fast (uses C)
  Math::BigIntFast       Bit::Vector wrapper for big numbers
  Math::Pari             provides access to the Pari C library
  Math::BigInteger       uses an external C library
  Math::Cephes           uses external Cephes C library (no big numbers)
  Math::Cephes::Fraction fractions via the Cephes library
  Math::GMP              another one using an external C library
@


1.1.1.15
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d51 1
a51 1
    right	= += -= *= etc. goto last next redo dump
d564 1
a564 1

d1411 1
a1411 1
its uppercase.  C<\c?> is DELETE because C<ord("?") ^ 64> is 127, and
d1492 1
a1492 3
the vertical tab (VT, which is 11 in both ASCII and EBCDIC), but you may
use C<\ck> or
C<\x0b>.  (C<\v>
d1621 1
a1621 2
    $string =~ /foo${re}bar/;	# can be interpolated in other
                                # patterns
d1654 1
a1654 2
        that ${^PREMATCH}, ${^MATCH}, ${^POSTMATCH} will be
        defined.
d1656 6
a1661 6
    a   ASCII-restrict: Use ASCII for \d, \s, \w; specifying two
        a's further restricts /i matching so that no ASCII
        character will match a non-ASCII one.
    l   Use the locale.
    u   Use Unicode rules.
    d   Use Unicode or native charset, as in 5.12 and earlier.
d1696 1
a1696 2
 c  Do not reset search position on a failed match when /g is
    in effect.
a1736 12
=item 3

If the pattern contains embedded code, such as

    use re 'eval';
    $code = 'foo(?{ $x })';
    /$code/

then perl will recompile each time, even though the pattern string hasn't
changed, to ensure that the current value of C<$x> is seen each time.
Use C</o> if you want to avoid this.

d1763 5
a1767 4
pattern, that is, (C<$1>, C<$2>, C<$3>...)  (Note that here C<$1> etc. are
also set).  When there are no parentheses in the pattern, the return
value is the list C<(1)> for success.  
With or without parentheses, an empty list is returned upon failure.
d1771 2
a1772 2
 open(TTY, "+</dev/tty")
    || die "can't access /dev/tty: $!";
d1774 1
a1774 1
 <TTY> =~ /^y/i && foo();	# do foo if desired
d1776 1
a1776 1
 if (/Version: *([0-9.]*)/) { $version = $1; }
d1778 1
a1778 1
 next if m#^/usr/spool/uucp#;
d1780 5
a1784 5
 # poor man's grep
 $arg = shift;
 while (<>) {
    print if /$arg/o; # compile only once (no longer needed!)
 }
d1786 1
a1786 1
 if (($F1, $F2, $Etc) = ($foo =~ /^(\S+)\s+(\S+)\s*(.*)/))
d1838 19
a1856 22
 my $sentence_rx = qr{
    (?: (?<= ^ ) | (?<= \s ) )  # after start-of-string or
                                # whitespace
    \p{Lu}                      # capital letter
    .*?                         # a bunch of anything
    (?<= \S )                   # that ends in non-
                                # whitespace
    (?<! \b [DMS]r  )           # but isn't a common abbr.
    (?<! \b Mrs )
    (?<! \b Sra )
    (?<! \b St  )
    [.?!]                       # followed by a sentence
                                # ender
    (?= $ | \s )                # in front of end-of-string
                                # or whitespace
 }sx;
 local $/ = "";
 while (my $paragraph = <>) {
    say "NEW PARAGRAPH";
    my $count = 0;
    while ($paragraph =~ /($sentence_rx)/g) {
        printf "\tgot sentence %d: <%s>\n", ++$count, $1;
a1857 1
 }
d1894 1
a1894 2
    $url = URI::URL->new( "http://example.com/" );
    die if $url eq "xXx";
d1899 3
a1901 6
     print(" lowercase"),    redo LOOP
                                    if /\G\p{Ll}+\b[,.;]?\s*/gc;
     print(" UPPERCASE"),    redo LOOP
                                    if /\G\p{Lu}+\b[,.;]?\s*/gc;
     print(" Capitalized"),  redo LOOP
                              if /\G\p{Lu}\p{Ll}+\b[,.;]?\s*/gc;
d1903 1
a1903 2
     print(" alphanumeric"), redo LOOP
                            if /\G[\p{Alpha}\pN]+\b[,.;]?\s*/gc;
d1910 4
a1913 4
 line-noise lowercase line-noise UPPERCASE line-noise UPPERCASE
 line-noise lowercase line-noise lowercase line-noise lowercase
 lowercase line-noise lowercase lowercase line-noise lowercase
 lowercase line-noise MiXeD line-noise. That's all!
d1981 2
a1982 4
    ee  Evaluate the right side as a string then eval the
        result.
    r   Return substitution and leave the original string
        untouched.
d1987 1
a1987 1
modifier overrides this, however).  Note that Perl treats backticks
d1999 1
a1999 1
    s/\bgreen\b/mauve/g;	      # don't change wintergreen
d2005 2
a2006 4
    ($foo = $bar) =~ s/this/that/;	# copy first, then
                                        # change
    ($foo = "$bar") =~ s/this/that/;	# convert to string,
                                        # copy, then change
d2009 2
a2010 4
                =~ s/that/the other/r;	# Chained substitutes
                                        # using /r
    @@foo = map { s/this/that/r } @@bar	# /r is very useful in
                                        # maps
d2012 1
a2012 1
    $count = ($paragraph =~ s/Mister\b/Mr./g);  # get change-cnt
d2049 1
a2049 2
    s/^\s*(.*?)\s*$/$1/;	# trim whitespace in $_,
                                # expensively
d2051 1
a2051 2
    for ($variable) {		# trim whitespace in $variable,
                                # cheap
d2071 8
d2117 1
a2117 1
system command with F</bin/sh> or its equivalent.  Shell wildcards,
d2180 1
a2180 1
Perl will attempt to flush all files opened for
d2452 2
a2453 3
the quoted material must still come on the line following the
C<<< <<FOO >>> marker, which means it may be inside the delimited
construct:
d2460 1
a2460 2
It works this way as of Perl 5.18.  Historically, it was inconsistent, and
you would have to write
d2467 3
a2469 1
outside of string evals.
d2548 1
a2548 1
other backslashes are removed (exactly speaking, they are not copied to the
d2632 1
a2632 1
no C<\E> inside.  Instead, it has C<\Q>, C<\\>, and C<E>, so the
a2699 4
Code blocks such as C<(?{BLOCK})> are handled by temporarily passing control
back to the perl parser, in a similar way that an interpolated array
subscript expression such as C<"foo$array[1+f("[xyz")]bar"> would be.

d2768 3
a2770 5
though preceded by a backslash.

The terminator of runtime C<(?{...})> is found by temporarily switching
control to the perl parser, which should stop at the point where the
logically balancing terminating C<}> is found.
d3172 1
a3172 1
along with the C<bignum>, C<bigint>, and C<bigrat> pragmas, provide
d3201 1
d3208 2
a3209 2
  Math::Cephes           uses the external Cephes C library (no
                         big numbers)
a3211 3
  Math::GMPz             an alternative interface to libgmp's big ints
  Math::GMPq             an interface to libgmp's fraction numbers
  Math::GMPf             an interface to libgmp's floating point numbers
@


1.1.1.16
log
@Import perl-5.20.1
@
text
@a7 16
In Perl, the operator determines what operation is performed,
independent of the type of the operands. For example C<$a + $b>
is always a numeric addition, and if C<$a> or C<$b> do not contain
numbers, an attempt is made to convert them to numbers first.

This is in contrast to many other dynamic languages, where the
operation is determined by the type of the first argument. It also
means that Perl has two versions of some operators, one for numeric
and one for string comparison. For example C<$a == $b> compares
two numbers for equality, and C<$a eq $b> compares two strings.

There are a few exceptions though: C<x> can be either string
repetition or list repetition, depending on the type of the left
operand, and C<&>, C<|> and C<^> can be either string or numeric bit
operations.

a139 4
The dereferencing cases (as opposed to method-calling cases) are
somewhat extended by the experimental C<postderef> feature.  For the
details of that feature, consult L<perlref/Postfix Dereference Syntax>.

d500 1
a500 3
Perl's operators, the smartmatch operator can recurse.  The smartmatch
operator is L<experimental|perlpolicy/experimental> and its behavior is
subject to change.
d787 2
a788 4
Binary "&" returns its operands ANDed together bit by bit.  Although no
warning is currently raised, the result is not well defined when this operation
is performed on operands that aren't either numbers (see
L<Integer Arithmetic>) or bitstrings (see L<Bitwise String Operators>).
d800 1
d803 1
a803 5

Although no warning is currently raised, the results are not well
defined when these operations are performed on operands that aren't either
numbers (see L<Integer Arithmetic>) or bitstrings (see L<Bitwise String
Operators>).
d1029 1
a1029 3
you could use the pattern C</(?:(?=\p{Greek})\p{Lower})+/> (or the
L<experimental feature|perlrecharclass/Extended Bracketed Character
Classes> C<S</(?[ \p{Greek} & \p{Lower} ])+/>>).
d1408 1
a1408 2
   \c_      chr(31)
   \c?      chr(127) # (on ASCII platforms)
d1411 1
a1411 2
its uppercase.  C<\c?> is DELETE on ASCII platforms because
S<C<ord("?") ^ 64>> is 127, and
d1420 2
a1421 2
L<perlebcdic/OPERATOR DIFFERENCES> for a full discussion of the
differences between these for ASCII versus EBCDIC platforms.
d1423 1
a1423 1
Use of any other character following the C<"c"> besides those listed above is
d1457 6
d1527 1
a1527 3
Under C<use locale>, C<\F> produces the same results as C<\L>
for all locales but a UTF-8 one, where it instead uses the Unicode
definition.
d1673 1
a1673 1
control the character set rules, but C</a> is the only one you are likely
d1708 2
a1709 2
described in C<m?PATTERN?> below. If "'" (single quote) is the delimiter,
no interpolation is performed on the PATTERN.
d1723 1
a1723 1
interests of speed.  But now, the only reasons to use C</o> are one of:
@


1.1.1.17
log
@Import perl-5.20.2
@
text
@d9 2
a10 2
independent of the type of the operands.  For example C<$x + $y>
is always a numeric addition, and if C<$x> or C<$y> do not contain
d14 1
a14 1
operation is determined by the type of the first argument.  It also
d16 2
a17 2
and one for string comparison.  For example C<$x == $y> compares
two numbers for equality, and C<$x eq $y> compares two strings.
d173 2
a174 2
incremented or decremented.  You just know it will be done sometime
before or after the value is returned.  This also means that modifying
d206 1
a206 1
tightly than unary minus, so -2**4 is -(2**4), not (-2)**4.  (This is
d225 1
a225 1
the string to a numeric and the arithmetic negation is performed.  If the
d274 1
a274 2
time.  Note that this means that its
contents will be interpolated twice, so
d299 4
a302 4
operands C<$m> and C<$n>: If C<$n> is positive, then C<$m % $n> is
C<$m> minus the largest multiple of C<$n> less than or equal to
C<$m>.  If C<$n> is negative, then C<$m % $n> is C<$m> minus the
smallest multiple of C<$n> that is not less than C<$m> (that is, the
d304 3
a306 3
C<$m> and C<$n> are floating point values and the absolute value of
C<$n> (that is C<abs($n)>) is less than C<(UV_MAX + 1)>, only
the integer portion of C<$m> and C<$n> will be used in the operation
d308 1
a308 1
If the absolute value of the right operand (C<abs($n)>) is greater than
d310 1
a310 1
C<$r> in the equation C<($r = $m - $i*$n)> where C<$i> is a certain
d312 2
a313 2
C<$n> (B<not> as the left operand C<$m> like C function C<fmod()>)
and the absolute value less than that of C<$n>.
d478 2
a479 2
"<=" or ">=" anything (even NaN), so those 5 return false.  NaN != NaN
returns true, as does NaN != anything else.  If your platform doesn't
d483 2
a484 2
    $ perl -le '$x = "NaN"; print "No NaN support here" if $x == $x'
    $ perl -le '$x = "NaN"; print "NaN support here" if $x != $x'
d486 1
a486 1
(Note that the L<bigint>, L<bigrat>, and L<bignum> pragmas all
d727 1
a727 1
same keys, no more and no less.  This could be used to see whether two
d765 2
a766 2
breaks encapsulation>".  That's because one has no business digging
around to see whether something is "in" an object.  These are all
d774 1
a774 2
the C<~~> operator.  This is allowed to
extend the usual smartmatch semantics.
d860 2
a861 3
otherwise, the value of C<< EXPR2 >> is returned.
(C<< EXPR1 >> is evaluated in scalar context, C<< EXPR2 >>
in the context of C<< // >> itself).  Usually,
d864 1
a864 1
cannot).  This is very useful for
d866 1
a866 1
at least one of C<$x> and C<$y> is defined, use C<defined($x // $y)>.
d869 1
a869 1
(unlike C's C<||> and C<&&>, which return 0 or 1).  Thus, a reasonably
d915 1
a915 1
C<foreach (1..10)> loops and for doing slice operations on arrays.  In
d930 1
a930 1
operator of B<sed>, B<awk>, and various editors.  Each ".." operator
d932 1
a932 1
that contains it.  It is false as long as its left operand is false.
d938 1
a938 1
true once.  If you don't want it to test the right operand until the
d1006 1
a1006 1
This program will print only the line containing "Bar".  If
d1079 3
a1081 3
    $x = $ok ? $y : $z;  # get a scalar
    @@x = $ok ? @@y : @@z;  # get an array
    $x = $ok ? @@y : @@z;  # oops, that's just a count!
d1086 1
a1086 1
    ($x_or_y ? $x : $y) = $z;
d1091 1
a1091 1
    $x % 2 ? $x += 10 : $x += 2
d1095 1
a1095 1
    (($x % 2) ? ($x += 10) : $x) += 2
d1099 1
a1099 1
    ($x % 2) ? ($x += 10) : ($x += 2)
d1103 1
a1103 1
    $x += ($x % 2) ? 10 : 2;
d1114 1
a1114 1
    $x += 2;
d1118 1
a1118 1
    $x = $x + 2;
d1146 1
a1146 1
    ($x += 2) *= 3;
d1150 2
a1151 2
    $x += 2;
    $x *= 3;
d1173 1
a1173 1
constants, single number v-strings or function calls.  If in doubt about
d1260 3
a1262 3
    $x = $y or $z;              # bug: this is wrong
    ($x = $y) or $z;            # really means this
    $x = $y || $z;              # better written this way
d1292 1
a1292 1
Dereference-address operator.  (Perl's prefix dereferencing
d1339 1
a1339 1
    $s = q{ if($x eq "}") ... }; # WRONG
d1341 1
a1341 1
is a syntax error.  The C<Text::Balanced> module (standard as of v5.8,
d1381 1
a1381 1
Only hexadecimal digits are valid between the braces.  If an invalid
d1595 2
a1596 2
but before escapes are processed.  This allows the pattern to match
literally (except for C<$> and C<@@>).  For example, the following matches:
d1630 2
a1631 2
corresponding C</STRING/msixpodual> expression.  The returned value is a
normalized version of the original pattern.  It magically differs from
d1735 1
a1735 1
described in C<m?PATTERN?> below.  If "'" (single quote) is the delimiter,
d1788 1
a1788 1
I<successfully> matched regular expression is used instead.  In this
d1790 1
a1790 1
the other flags are taken from the original pattern.  If no match has
d1797 1
a1797 1
C<$x///> (is that C<($x) / (//)> or C<$x // />?) and C<print $fh //>
d1837 2
a1838 2
matching as many times as possible within the string.  How it behaves
depends on the context.  In list context, it returns a list of the
d1840 1
a1840 1
expression.  If there are no parentheses, it returns a list of all
d1847 1
a1847 1
function; see L<perlfunc/pos>.  A failed match normally resets the
d1849 1
a1849 1
by adding the C</c> modifier (for example, C<m//gc>).  Modifying the target
d1856 1
a1856 1
previous C<m//g>, if any, left off.  Without the C</g> modifier, the
d1859 1
a1859 1
attempted once.  Using C<\G> without C</g> on a target string that has
d1930 2
a1931 2
without the C<\G> anchor would have done.  Also note that the final match
did not update C<pos>.  C<pos> is only updated on a C</g> match.  If the
d2048 1
a2048 1
compile-time.  A second C<e> modifier will cause the replacement portion
d2082 1
a2082 1
    $x = s/abc/def/r;           # $x is 'def123xyz' and
d2339 1
a2339 1
period.)  If the C</s> modifier is specified, sequences of characters
d2431 1
a2431 1
interpolation of its content.  This is similar to single quoted
d2454 1
a2454 1
string were embedded in backticks.  Thus the content is interpolated
d2524 1
a2524 1
unrelated to Perl's quoting rules.  C<q()>, C<qq()>, and the like are not
d2572 1
a2572 1
is copied to a safe location.  The text copied gets delimiter-independent.
d2575 1
a2575 1
that has a terminating string as the content.  Therefore C<<<EOF> is
d2579 1
a2579 1
is skipped.  In other words, lines after the here-doc syntax
d2583 1
a2583 1
and ending delimiters.  If the starting delimiter is an opening punctuation
d2589 1
a2589 1
both C<qq[]> and C<qq]]> constructs.
d2605 2
a2606 3
If the first delimiter is not an opening punctuation, the three delimiters must
be the same, such as C<s!!!> and C<tr)))>,
in which case the second delimiter
d2611 1
a2611 1
and comments are allowed between the two parts, though the comment must follow
d2633 1
a2633 1
this search.  Thus the second C<\> in C<qq/\c\/> is interpreted as a part
d2710 1
a2710 1
C<< "a $x -> {c}" >> really means:
d2712 1
a2712 1
  "a " . $x . " -> {c}";
d2716 1
a2716 1
  "a " . $x -> {c};
d2962 1
a2962 1
internally.  <> is just a synonym for <ARGV>, which
d3232 1
a3232 1
they're currently pretty slow.  At the cost of some space and
d3244 8
a3251 8
        use 5.010;
        use bigrat;
        $x = 3/22;
        $y = 4/6;
        say "x/y is ", $x/$y;
        say "x*y is ", $x*$y;
        x/y is 9/44
        x*y is 1/11
d3254 1
a3254 2
unlimited or fixed precision.  There
are also some non-standard modules that
@


