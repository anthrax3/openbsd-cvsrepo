head	1.13;
access;
symbols
	OPENBSD_6_1:1.13.0.2
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.12.0.10
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.4
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.12.0.6
	OPENBSD_5_8_BASE:1.12
	PERL_5_20_2:1.1.1.11
	OPENBSD_5_7:1.12.0.2
	OPENBSD_5_7_BASE:1.12
	PERL_5_20_1:1.1.1.11
	OPENBSD_5_6:1.11.0.4
	OPENBSD_5_6_BASE:1.11
	PERL_5_18_2:1.1.1.10
	PERL:1.1.1
	OPENBSD_5_5:1.10.0.6
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.2
	OPENBSD_5_4_BASE:1.10
	PERL_5_16_3:1.1.1.9
	OPENBSD_5_3:1.9.0.14
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.12
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.10
	OPENBSD_5_0:1.9.0.8
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.6
	OPENBSD_4_9_BASE:1.9
	PERL_5_12_2:1.1.1.8
	OPENBSD_4_8:1.9.0.4
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.2
	OPENBSD_4_7_BASE:1.9
	PERL_5_10_1:1.1.1.8
	OPENBSD_4_6:1.8.0.16
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.12
	OPENBSD_4_5_BASE:1.8
	PERL_5_10_0:1.1.1.7
	OPENBSD_4_4:1.8.0.10
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.8
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.6
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.4
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.2
	OPENBSD_4_0_BASE:1.8
	PERL_5_8_8:1.1.1.7
	OPENBSD_3_9:1.7.0.10
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.8
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.6
	OPENBSD_3_7_BASE:1.7
	PERL_5_8_6:1.1.1.6
	OPENBSD_3_6:1.7.0.4
	OPENBSD_3_6_BASE:1.7
	PERL_5_8_5:1.1.1.6
	PERL_5_8_3:1.1.1.6
	OPENBSD_3_5:1.7.0.2
	OPENBSD_3_5_BASE:1.7
	PERL_5_8_2:1.1.1.6
	OPENBSD_3_4:1.6.0.4
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.6.0.2
	OPENBSD_3_3_BASE:1.6
	PERL_5_8_0:1.1.1.5
	OPENBSD_3_2:1.5.0.6
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.4
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	PERL_5_6_1:1.1.1.4
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	PERL_5_6_0:1.1.1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	PERL_500503:1.1.1.2
	CPAN:1.1.1
	OPENBSD_2_5:1.2.0.6
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.4
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	perl5003:1.1.1.1
	lwall:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.13
date	2017.02.05.00.32.19;	author afresh1;	state Exp;
branches;
next	1.12;
commitid	cxJ08BvJA9Pt2PTM;

1.12
date	2014.11.17.20.57.07;	author afresh1;	state Exp;
branches;
next	1.11;
commitid	QP75iYx42Uo7mMxO;

1.11
date	2014.03.24.15.05.33;	author afresh1;	state Exp;
branches;
next	1.10;

1.10
date	2013.03.25.20.40.59;	author sthen;	state Exp;
branches;
next	1.9;

1.9
date	2009.10.12.18.24.48;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2006.03.28.19.23.12;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2003.12.03.03.02.46;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.10.27.22.25.34;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.24.18.36.01;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.06.17.07.43;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	99.04.29.22.52.21;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.11.30.07.59.35;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.08.19.10.13.05;	author downsj;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.08.19.10.13.05;	author downsj;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.04.29.22.41.04;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2000.04.06.16.10.33;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2001.05.24.18.24.53;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2002.10.27.22.15.08;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2003.12.03.02.44.28;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2006.03.28.18.49.37;	author millert;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2009.10.12.18.10.39;	author millert;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2013.03.25.20.09.26;	author sthen;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	2014.03.24.14.59.08;	author afresh1;	state Exp;
branches;
next	1.1.1.11;

1.1.1.11
date	2014.11.17.20.53.15;	author afresh1;	state Exp;
branches;
next	;
commitid	B31cAbBIXiCqnL97;


desc
@@


1.13
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@=head1 NAME

perltrap - Perl traps for the unwary

=head1 DESCRIPTION

The biggest trap of all is forgetting to C<use warnings> or use the B<-w>
switch; see L<warnings> and L<perlrun>. The second biggest trap is not
making your entire program runnable under C<use strict>.  The third biggest
trap is not reading the list of changes in this version of Perl; see
L<perldelta>.

=head2 Awk Traps

Accustomed B<awk> users should take special note of the following:

=over 4

=item *

A Perl program executes only once, not once for each input line.  You can
do an implicit loop with C<-n> or C<-p>.

=item *

The English module, loaded via

    use English;

allows you to refer to special variables (like C<$/>) with names (like
$RS), as though they were in B<awk>; see L<perlvar> for details.

=item *

Semicolons are required after all simple statements in Perl (except
at the end of a block).  Newline is not a statement delimiter.

=item *

Curly brackets are required on C<if>s and C<while>s.

=item *

Variables begin with "$", "@@" or "%" in Perl.

=item *

Arrays index from 0.  Likewise string positions in substr() and
index().

=item *

You have to decide whether your array has numeric or string indices.

=item *

Hash values do not spring into existence upon mere reference.

=item *

You have to decide whether you want to use string or numeric
comparisons.

=item *

Reading an input line does not split it for you.  You get to split it
to an array yourself.  And the split() operator has different
arguments than B<awk>'s.

=item *

The current input line is normally in $_, not $0.  It generally does
not have the newline stripped.  ($0 is the name of the program
executed.)  See L<perlvar>.

=item *

$<I<digit>> does not refer to fields--it refers to substrings matched
by the last match pattern.

=item *

The print() statement does not add field and record separators unless
you set C<$,> and C<$\>.  You can set $OFS and $ORS if you're using
the English module.

=item *

You must open your files before you print to them.

=item *

The range operator is "..", not comma.  The comma operator works as in
C.

=item *

The match operator is "=~", not "~".  ("~" is the one's complement
operator, as in C.)

=item *

The exponentiation operator is "**", not "^".  "^" is the XOR
operator, as in C.  (You know, one could get the feeling that B<awk> is
basically incompatible with C.)

=item *

The concatenation operator is ".", not the null string.  (Using the
null string would render C</pat/ /pat/> unparsable, because the third slash
would be interpreted as a division operator--the tokenizer is in fact
slightly context sensitive for operators like "/", "?", and ">".
And in fact, "." itself can be the beginning of a number.)

=item *

The C<next>, C<exit>, and C<continue> keywords work differently.

=item *


The following variables work differently:

      Awk	Perl
      ARGC	scalar @@ARGV (compare with $#ARGV)
      ARGV[0]	$0
      FILENAME	$ARGV
      FNR	$. - something
      FS	(whatever you like)
      NF	$#Fld, or some such
      NR	$.
      OFMT	$#
      OFS	$,
      ORS	$\
      RLENGTH	length($&)
      RS	$/
      RSTART	length($`)
      SUBSEP	$;

=item *

You cannot set $RS to a pattern, only a string.

=item *

When in doubt, run the B<awk> construct through B<a2p> and see what it
gives you.

=back

=head2 C/C++ Traps

Cerebral C and C++ programmers should take note of the following:

=over 4

=item *

Curly brackets are required on C<if>'s and C<while>'s.

=item *

You must use C<elsif> rather than C<else if>.

=item *

The C<break> and C<continue> keywords from C become in Perl C<last>
and C<next>, respectively.  Unlike in C, these do I<not> work within a
C<do { } while> construct.  See L<perlsyn/"Loop Control">.

=item *

The switch statement is called C<given>/C<when> and only available in
perl 5.10 or newer.  See L<perlsyn/"Switch Statements">.

=item *

Variables begin with "$", "@@" or "%" in Perl.

=item *

Comments begin with "#", not "/*" or "//".  Perl may interpret C/C++
comments as division operators, unterminated regular expressions or
the defined-or operator.

=item *

You can't take the address of anything, although a similar operator
in Perl is the backslash, which creates a reference.

=item *

C<ARGV> must be capitalized.  C<$ARGV[0]> is C's C<argv[1]>, and C<argv[0]>
ends up in C<$0>.

=item *

System calls such as link(), unlink(), rename(), etc. return nonzero for
success, not 0. (system(), however, returns zero for success.)

=item *

Signal handlers deal with signal names, not numbers.  Use C<kill -l>
to find their names on your system.

=back

=head2 JavaScript Traps

Judicious JavaScript programmers should take note of the following:

=over 4

=item *

In Perl, binary C<+> is always addition.  C<$string1 + $string2> converts
both strings to numbers and then adds them.  To concatenate two strings,
use the C<.> operator.

=item *

The C<+> unary operator doesn't do anything in Perl.  It exists to avoid
syntactic ambiguities.

=item *

Unlike C<for...in>, Perl's C<for> (also spelled C<foreach>) does not allow
the left-hand side to be an arbitrary expression.  It must be a variable:

   for my $variable (keys %hash) {
	...
   }

Furthermore, don't forget the C<keys> in there, as
C<foreach my $kv (%hash) {}> iterates over the keys and values, and is
generally not useful ($kv would be a key, then a value, and so on).

=item *

To iterate over the indices of an array, use C<foreach my $i (0 .. $#array)
{}>.  C<foreach my $v (@@array) {}> iterates over the values.

=item *

Perl requires braces following C<if>, C<while>, C<foreach>, etc.

=item *

In Perl, C<else if> is spelled C<elsif>.

=item *

C<? :> has higher precedence than assignment.  In JavaScript, one can
write:

    condition ? do_something() : variable = 3

and the variable is only assigned if the condition is false.  In Perl, you
need parentheses:

    $condition ? do_something() : ($variable = 3);

Or just use C<if>.

=item *

Perl requires semicolons to separate statements.

=item *

Variables declared with C<my> only affect code I<after> the declaration.
You cannot write C<$x = 1; my $x;> and expect the first assignment to
affect the same variable.  It will instead assign to an C<$x> declared
previously in an outer scope, or to a global variable.

Note also that the variable is not visible until the following
I<statement>.  This means that in C<my $x = 1 + $x> the second $x refers
to one declared previously.

=item *

C<my> variables are scoped to the current block, not to the current
function.  If you write C<{my $x;} $x;>, the second C<$x> does not refer to
the one declared inside the block.

=item *

An object's members cannot be made accessible as variables.  The closest
Perl equivalent to C<with(object) { method() }> is C<for>, which can alias
C<$_> to the object:

    for ($object) {
	$_->method;
    }

=item *

The object or class on which a method is called is passed as one of the
method's arguments, not as a separate C<this> value.

=back

=head2 Sed Traps

Seasoned B<sed> programmers should take note of the following:

=over 4

=item *

A Perl program executes only once, not once for each input line.  You can
do an implicit loop with C<-n> or C<-p>.

=item *

Backreferences in substitutions use "$" rather than "\".

=item *

The pattern matching metacharacters "(", ")", and "|" do not have backslashes
in front.

=item *

The range operator is C<...>, rather than comma.

=back

=head2 Shell Traps

Sharp shell programmers should take note of the following:

=over 4

=item *

The backtick operator does variable interpolation without regard to
the presence of single quotes in the command.

=item *

The backtick operator does no translation of the return value, unlike B<csh>.

=item *

Shells (especially B<csh>) do several levels of substitution on each
command line.  Perl does substitution in only certain constructs
such as double quotes, backticks, angle brackets, and search patterns.

=item *

Shells interpret scripts a little bit at a time.  Perl compiles the
entire program before executing it (except for C<BEGIN> blocks, which
execute at compile time).

=item *

The arguments are available via @@ARGV, not $1, $2, etc.

=item *

The environment is not automatically made available as separate scalar
variables.

=item *

The shell's C<test> uses "=", "!=", "<" etc for string comparisons and "-eq",
"-ne", "-lt" etc for numeric comparisons. This is the reverse of Perl, which
uses C<eq>, C<ne>, C<lt> for string comparisons, and C<==>, C<!=> C<< < >> etc
for numeric comparisons.

=back

=head2 Perl Traps

Practicing Perl Programmers should take note of the following:

=over 4

=item *

Remember that many operations behave differently in a list
context than they do in a scalar one.  See L<perldata> for details.

=item *

Avoid barewords if you can, especially all lowercase ones.
You can't tell by just looking at it whether a bareword is
a function or a string.  By using quotes on strings and
parentheses on function calls, you won't ever get them confused.

=item *

You cannot discern from mere inspection which builtins
are unary operators (like chop() and chdir())
and which are list operators (like print() and unlink()).
(Unless prototyped, user-defined subroutines can B<only> be list
operators, never unary ones.)  See L<perlop> and L<perlsub>.

=item *

People have a hard time remembering that some functions
default to $_, or @@ARGV, or whatever, but that others which
you might expect to do not.

=item *

The <FH> construct is not the name of the filehandle, it is a readline
operation on that handle.  The data read is assigned to $_ only if the
file read is the sole condition in a while loop:

    while (<FH>)      { }
    while (defined($_ = <FH>)) { }..
    <FH>;  # data discarded!

=item *

Remember not to use C<=> when you need C<=~>;
these two constructs are quite different:

    $x =  /foo/;
    $x =~ /foo/;

=item *

The C<do {}> construct isn't a real loop that you can use
loop control on.

=item *

Use C<my()> for local variables whenever you can get away with
it (but see L<perlform> for where you can't).
Using C<local()> actually gives a local value to a global
variable, which leaves you open to unforeseen side-effects
of dynamic scoping.

=item *

If you localize an exported variable in a module, its exported value will
not change.  The local name becomes an alias to a new value but the
external name is still an alias for the original.

=back

As always, if any of these are ever officially declared as bugs,
they'll be fixed and removed.

@


1.12
log
@Fix merge conflicts, remove extra files, match upstream perl-5.20.1

ok deraadt@@ sthen@@ espie@@ miod@@
@
text
@d173 1
a173 1
The switch statement is called C<given/when> and only available in
@


1.11
log
@Merge perl-5.18.2 plus local patches, remove old files

OK espie@@ sthen@@ deraadt@@
@
text
@d8 1
a8 1
switch; see L<perllexwarn> and L<perlrun>. The second biggest trap is not
d205 95
@


1.10
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@a349 1239
=head2 Perl4 to Perl5 Traps

Practicing Perl4 Programmers should take note of the following
Perl4-to-Perl5 specific traps.

They're crudely ordered according to the following list:

=over 4

=item Discontinuance, Deprecation, and BugFix traps

Anything that's been fixed as a perl4 bug, removed as a perl4 feature
or deprecated as a perl4 feature with the intent to encourage usage of
some other perl5 feature.

=item Parsing Traps

Traps that appear to stem from the new parser.

=item Numerical Traps

Traps having to do with numerical or mathematical operators.

=item General data type traps

Traps involving perl standard data types.

=item Context Traps - scalar, list contexts

Traps related to context within lists, scalar statements/declarations.

=item Precedence Traps

Traps related to the precedence of parsing, evaluation, and execution of
code.

=item General Regular Expression Traps using s///, etc.

Traps related to the use of pattern matching.

=item Subroutine, Signal, Sorting Traps

Traps related to the use of signals and signal handlers, general subroutines,
and sorting, along with sorting subroutines.

=item OS Traps

OS-specific traps.

=item DBM Traps

Traps specific to the use of C<dbmopen()>, and specific dbm implementations.

=item Unclassified Traps

Everything else.

=back

If you find an example of a conversion trap that is not listed here,
please submit it to <F<perlbug@@perl.org>> for inclusion.
Also note that at least some of these can be caught with the
C<use warnings> pragma or the B<-w> switch.

=head2 Discontinuance, Deprecation, and BugFix traps

Anything that has been discontinued, deprecated, or fixed as
a bug from perl4.

=over 4

=item * Symbols starting with "_" no longer forced into main

Symbols starting with "_" are no longer forced into package main, except
for C<$_> itself (and C<@@_>, etc.).

    package test;
    $_legacy = 1;

    package main;
    print "\$_legacy is ",$_legacy,"\n";

    # perl4 prints: $_legacy is 1
    # perl5 prints: $_legacy is

=item * Double-colon valid package separator in variable name

Double-colon is now a valid package separator in a variable name.  Thus these
behave differently in perl4 vs. perl5, because the packages don't exist.

    $a=1;$b=2;$c=3;$var=4;
    print "$a::$b::$c ";
    print "$var::abc::xyz\n";

    # perl4 prints: 1::2::3 4::abc::xyz
    # perl5 prints: 3

Given that C<::> is now the preferred package delimiter, it is debatable
whether this should be classed as a bug or not.
(The older package delimiter, ' ,is used here)

    $x = 10;
    print "x=${'x}\n";

    # perl4 prints: x=10
    # perl5 prints: Can't find string terminator "'" anywhere before EOF

You can avoid this problem, and remain compatible with perl4, if you
always explicitly include the package name:

    $x = 10;
    print "x=${main'x}\n";

Also see precedence traps, for parsing C<$:>.

=item * 2nd and 3rd args to C<splice()> are now in scalar context

The second and third arguments of C<splice()> are now evaluated in scalar
context (as the Camel says) rather than list context.

    sub sub1{return(0,2) }          # return a 2-element list
    sub sub2{ return(1,2,3)}        # return a 3-element list
    @@a1 = ("a","b","c","d","e");
    @@a2 = splice(@@a1,&sub1,&sub2);
    print join(' ',@@a2),"\n";

    # perl4 prints: a b
    # perl5 prints: c d e

=item * Can't do C<goto> into a block that is optimized away

You can't do a C<goto> into a block that is optimized away.  Darn.

    goto marker1;

    for(1){
    marker1:
        print "Here I is!\n";
    }

    # perl4 prints: Here I is!
    # perl5 errors: Can't "goto" into the middle of a foreach loop

=item * Can't use whitespace as variable name or quote delimiter

It is no longer syntactically legal to use whitespace as the name
of a variable, or as a delimiter for any kind of quote construct.
Double darn.

    $a = ("foo bar");
    $b = q baz ;
    print "a is $a, b is $b\n";

    # perl4 prints: a is foo bar, b is baz
    # perl5 errors: Bareword found where operator expected

=item * C<while/if BLOCK BLOCK> gone

The archaic while/if BLOCK BLOCK syntax is no longer supported.

    if { 1 } {
        print "True!";
    }
    else {
        print "False!";
    }

    # perl4 prints: True!
    # perl5 errors: syntax error at test.pl line 1, near "if {"

=item * C<**> binds tighter than unary minus

The C<**> operator now binds more tightly than unary minus.
It was documented to work this way before, but didn't.

    print -4**2,"\n";

    # perl4 prints: 16
    # perl5 prints: -16

=item * C<foreach> changed when iterating over a list

The meaning of C<foreach{}> has changed slightly when it is iterating over a
list which is not an array.  This used to assign the list to a
temporary array, but no longer does so (for efficiency).  This means
that you'll now be iterating over the actual values, not over copies of
the values.  Modifications to the loop variable can change the original
values.

    @@list = ('ab','abc','bcd','def');
    foreach $var (grep(/ab/,@@list)){
        $var = 1;
    }
    print (join(':',@@list));

    # perl4 prints: ab:abc:bcd:def
    # perl5 prints: 1:1:bcd:def

To retain Perl4 semantics you need to assign your list
explicitly to a temporary array and then iterate over that.  For
example, you might need to change

    foreach $var (grep(/ab/,@@list)){

to

    foreach $var (@@tmp = grep(/ab/,@@list)){

Otherwise changing $var will clobber the values of @@list.  (This most often
happens when you use C<$_> for the loop variable, and call subroutines in
the loop that don't properly localize C<$_>.)

=item * C<split> with no args behavior changed

C<split> with no arguments now behaves like C<split ' '> (which doesn't
return an initial null field if $_ starts with whitespace), it used to
behave like C<split /\s+/> (which does).

    $_ = ' hi mom';
    print join(':', split);

    # perl4 prints: :hi:mom
    # perl5 prints: hi:mom

=item * B<-e> behavior fixed

Perl 4 would ignore any text which was attached to an B<-e> switch,
always taking the code snippet from the following arg.  Additionally, it
would silently accept an B<-e> switch without a following arg.  Both of
these behaviors have been fixed.

    perl -e'print "attached to -e"' 'print "separate arg"'

    # perl4 prints: separate arg
    # perl5 prints: attached to -e

    perl -e

    # perl4 prints:
    # perl5 dies: No code specified for -e.

=item * C<push> returns number of elements in resulting list

In Perl 4 the return value of C<push> was undocumented, but it was
actually the last value being pushed onto the target list.  In Perl 5
the return value of C<push> is documented, but has changed, it is the
number of elements in the resulting list.

    @@x = ('existing');
    print push(@@x, 'first new', 'second new');

    # perl4 prints: second new
    # perl5 prints: 3

=item * Some error messages differ

Some error messages will be different.

=item * C<split()> honors subroutine args

In Perl 4, if in list context the delimiters to the first argument of
C<split()> were C<??>, the result would be placed in C<@@_> as well as
being returned.   Perl 5 has more respect for your subroutine arguments.

=item * Bugs removed

Some bugs may have been inadvertently removed.  :-)

=back

=head2 Parsing Traps

Perl4-to-Perl5 traps from having to do with parsing.

=over 4

=item * Space between . and = triggers syntax error

Note the space between . and =

    $string . = "more string";
    print $string;

    # perl4 prints: more string
    # perl5 prints: syntax error at - line 1, near ". ="

=item * Better parsing in perl 5

Better parsing in perl 5

    sub foo {}
    &foo
    print("hello, world\n");

    # perl4 prints: hello, world
    # perl5 prints: syntax error

=item * Function parsing

"if it looks like a function, it is a function" rule.

  print
    ($foo == 1) ? "is one\n" : "is zero\n";

    # perl4 prints: is zero
    # perl5 warns: "Useless use of a constant in void context" if using -w

=item * String interpolation of C<$#array> differs

String interpolation of the C<$#array> construct differs when braces
are to used around the name.

    @@a = (1..3);
    print "${#a}";

    # perl4 prints: 2
    # perl5 fails with syntax error

    @@a = (1..3);
    print "$#{a}";

    # perl4 prints: {a}
    # perl5 prints: 2

=item * Perl guesses on C<map>, C<grep> followed by C<{> if it starts BLOCK or hash ref

When perl sees C<map {> (or C<grep {>), it has to guess whether the C<{>
starts a BLOCK or a hash reference. If it guesses wrong, it will report
a syntax error near the C<}> and the missing (or unexpected) comma.

Use unary C<+> before C<{> on a hash reference, and unary C<+> applied
to the first thing in a BLOCK (after C<{>), for perl to guess right all
the time. (See L<perlfunc/map>.)

=back

=head2 Numerical Traps

Perl4-to-Perl5 traps having to do with numerical operators,
operands, or output from same.

=over 5

=item * Formatted output and significant digits

Formatted output and significant digits.  In general, Perl 5
tries to be more precise.  For example, on a Solaris Sparc:

    print 7.373504 - 0, "\n";
    printf "%20.18f\n", 7.373504 - 0;

    # Perl4 prints:
    7.3750399999999996141
    7.375039999999999614

    # Perl5 prints:
    7.373504
    7.373503999999999614

Notice how the first result looks better in Perl 5.

Your results may vary, since your floating point formatting routines
and even floating point format may be slightly different.

=item * Auto-increment operator over signed int limit deleted

This specific item has been deleted.  It demonstrated how the auto-increment
operator would not catch when a number went over the signed int limit.  Fixed
in version 5.003_04.  But always be wary when using large integers.
If in doubt:

   use Math::BigInt;

=item * Assignment of return values from numeric equality tests doesn't work

Assignment of return values from numeric equality tests
does not work in perl5 when the test evaluates to false (0).
Logical tests now return a null, instead of 0

    $p = ($test == 1);
    print $p,"\n";

    # perl4 prints: 0
    # perl5 prints:

Also see L<"General Regular Expression Traps using s///, etc.">
for another example of this new feature...

=item * Bitwise string ops

When bitwise operators which can operate upon either numbers or
strings (C<& | ^ ~>) are given only strings as arguments, perl4 would
treat the operands as bitstrings so long as the program contained a call
to the C<vec()> function. perl5 treats the string operands as bitstrings.
(See L<perlop/Bitwise String Operators> for more details.)

    $fred = "10";
    $barney = "12";
    $betty = $fred & $barney;
    print "$betty\n";
    # Uncomment the next line to change perl4's behavior
    # ($dummy) = vec("dummy", 0, 0);

    # Perl4 prints:
    8

    # Perl5 prints:
    10

    # If vec() is used anywhere in the program, both print:
    10

=back

=head2 General data type traps

Perl4-to-Perl5 traps involving most data-types, and their usage
within certain expressions and/or context.

=over 5

=item * Negative array subscripts now count from the end of array

Negative array subscripts now count from the end of the array.

    @@a = (1, 2, 3, 4, 5);
    print "The third element of the array is $a[3] also expressed as $a[-2] \n";

    # perl4 prints: The third element of the array is 4 also expressed as
    # perl5 prints: The third element of the array is 4 also expressed as 4

=item * Setting C<$#array> lower now discards array elements

Setting C<$#array> lower now discards array elements, and makes them
impossible to recover.

    @@a = (a,b,c,d,e);
    print "Before: ",join('',@@a);
    $#a =1;
    print ", After: ",join('',@@a);
    $#a =3;
    print ", Recovered: ",join('',@@a),"\n";

    # perl4 prints: Before: abcde, After: ab, Recovered: abcd
    # perl5 prints: Before: abcde, After: ab, Recovered: ab

=item * Hashes get defined before use

Hashes get defined before use

    local($s,@@a,%h);
    die "scalar \$s defined" if defined($s);
    die "array \@@a defined" if defined(@@a);
    die "hash \%h defined" if defined(%h);

    # perl4 prints:
    # perl5 dies: hash %h defined

Perl will now generate a warning when it sees defined(@@a) and
defined(%h).

=item * Glob assignment from localized variable to variable

glob assignment from variable to variable will fail if the assigned
variable is localized subsequent to the assignment

    @@a = ("This is Perl 4");
    *b = *a;
    local(@@a);
    print @@b,"\n";

    # perl4 prints: This is Perl 4
    # perl5 prints:

=item * Assigning C<undef> to glob

Assigning C<undef> to a glob has no effect in Perl 5.   In Perl 4
it undefines the associated scalar (but may have other side effects
including SEGVs). Perl 5 will also warn if C<undef> is assigned to a
typeglob. (Note that assigning C<undef> to a typeglob is different
than calling the C<undef> function on a typeglob (C<undef *foo>), which
has quite a few effects.

    $foo = "bar";
    *foo = undef;
    print $foo;

    # perl4 prints:
    # perl4 warns: "Use of uninitialized variable" if using -w
    # perl5 prints: bar
    # perl5 warns: "Undefined value assigned to typeglob" if using -w

=item * Changes in unary negation (of strings)

Changes in unary negation (of strings)
This change effects both the return value and what it
does to auto(magic)increment.

    $x = "aaa";
    print ++$x," : ";
    print -$x," : ";
    print ++$x,"\n";

    # perl4 prints: aab : -0 : 1
    # perl5 prints: aab : -aab : aac

=item * Modifying of constants prohibited

perl 4 lets you modify constants:

    $foo = "x";
    &mod($foo);
    for ($x = 0; $x < 3; $x++) {
        &mod("a");
    }
    sub mod {
        print "before: $_[0]";
        $_[0] = "m";
        print "  after: $_[0]\n";
    }

    # perl4:
    # before: x  after: m
    # before: a  after: m
    # before: m  after: m
    # before: m  after: m

    # Perl5:
    # before: x  after: m
    # Modification of a read-only value attempted at foo.pl line 12.
    # before: a

=item * C<defined $var> behavior changed

The behavior is slightly different for:

    print "$x", defined $x

    # perl 4: 1
    # perl 5: <no output, $x is not called into existence>

=item * Variable Suicide

Variable suicide behavior is more consistent under Perl 5.
Perl5 exhibits the same behavior for hashes and scalars,
that perl4 exhibits for only scalars.

    $aGlobal{ "aKey" } = "global value";
    print "MAIN:", $aGlobal{"aKey"}, "\n";
    $GlobalLevel = 0;
    &test( *aGlobal );

    sub test {
        local( *theArgument ) = @@_;
        local( %aNewLocal ); # perl 4 != 5.001l,m
        $aNewLocal{"aKey"} = "this should never appear";
        print "SUB: ", $theArgument{"aKey"}, "\n";
        $aNewLocal{"aKey"} = "level $GlobalLevel";   # what should print
        $GlobalLevel++;
        if( $GlobalLevel<4 ) {
            &test( *aNewLocal );
        }
    }

    # Perl4:
    # MAIN:global value
    # SUB: global value
    # SUB: level 0
    # SUB: level 1
    # SUB: level 2

    # Perl5:
    # MAIN:global value
    # SUB: global value
    # SUB: this should never appear
    # SUB: this should never appear
    # SUB: this should never appear

=back

=head2 Context Traps - scalar, list contexts

=over 5

=item * Elements of argument lists for formats evaluated in list context

The elements of argument lists for formats are now evaluated in list
context.  This means you can interpolate list values now.

    @@fmt = ("foo","bar","baz");
    format STDOUT=
    @@<<<<< @@||||| @@>>>>>
    @@fmt;
    .
    write;

    # perl4 errors:  Please use commas to separate fields in file
    # perl5 prints: foo     bar      baz

=item * C<caller()> returns false value in scalar context if no caller present

The C<caller()> function now returns a false value in a scalar context
if there is no caller.  This lets library files determine if they're
being required.

    caller() ? (print "You rang?\n") : (print "Got a 0\n");

    # perl4 errors: There is no caller
    # perl5 prints: Got a 0

=item * Comma operator in scalar context gives scalar context to args

The comma operator in a scalar context is now guaranteed to give a
scalar context to its last argument. It gives scalar or void context
to any preceding arguments, depending on circumstances.

    @@y= ('a','b','c');
    $x = (1, 2, @@y);
    print "x = $x\n";

    # Perl4 prints:  x = c   # Interpolates array @@y into the list
    # Perl5 prints:  x = 3   # Evaluates array @@y in scalar context

=item * C<sprintf()> prototyped as C<($;@@)>

C<sprintf()> is prototyped as ($;@@), so its first argument is given scalar
context. Thus, if passed an array, it will probably not do what you want,
unlike Perl 4:

    @@z = ('%s%s', 'foo', 'bar');
    $x = sprintf(@@z);
    print $x;

    # perl4 prints: foobar
    # perl5 prints: 3

C<printf()> works the same as it did in Perl 4, though:

    @@z = ('%s%s', 'foo', 'bar');
    printf STDOUT (@@z);

    # perl4 prints: foobar
    # perl5 prints: foobar

=back

=head2 Precedence Traps

Perl4-to-Perl5 traps involving precedence order.

Perl 4 has almost the same precedence rules as Perl 5 for the operators
that they both have.  Perl 4 however, seems to have had some
inconsistencies that made the behavior differ from what was documented.

=over 5

=item * LHS vs. RHS of any assignment operator

LHS vs. RHS of any assignment operator.  LHS is evaluated first
in perl4, second in perl5; this can affect the relationship
between side-effects in sub-expressions.

    @@arr = ( 'left', 'right' );
    $a{shift @@arr} = shift @@arr;
    print join( ' ', keys %a );

    # perl4 prints: left
    # perl5 prints: right

=item * Semantic errors introduced due to precedence

These are now semantic errors because of precedence:

    @@list = (1,2,3,4,5);
    %map = ("a",1,"b",2,"c",3,"d",4);
    $n = shift @@list + 2;   # first item in list plus 2
    print "n is $n, ";
    $m = keys %map + 2;     # number of items in hash plus 2
    print "m is $m\n";

    # perl4 prints: n is 3, m is 6
    # perl5 errors and fails to compile

=item * Precedence of assignment operators same as the precedence of assignment

The precedence of assignment operators is now the same as the precedence
of assignment.  Perl 4 mistakenly gave them the precedence of the associated
operator.  So you now must parenthesize them in expressions like

    /foo/ ? ($a += 2) : ($a -= 2);

Otherwise

    /foo/ ? $a += 2 : $a -= 2

would be erroneously parsed as

    (/foo/ ? $a += 2 : $a) -= 2;

On the other hand,

    $a += /foo/ ? 1 : 2;

now works as a C programmer would expect.

=item * C<open> requires parentheses around filehandle

    open FOO || die;

is now incorrect.  You need parentheses around the filehandle.
Otherwise, perl5 leaves the statement as its default precedence:

    open(FOO || die);

    # perl4 opens or dies
    # perl5 opens FOO, dying only if 'FOO' is false, i.e. never

=item * C<$:> precedence over C<$::> gone

perl4 gives the special variable, C<$:> precedence, where perl5
treats C<$::> as main C<package>

    $a = "x"; print "$::a";

    # perl 4 prints: -:a
    # perl 5 prints: x

=item * Precedence of file test operators documented

perl4 had buggy precedence for the file test operators vis-a-vis
the assignment operators.  Thus, although the precedence table
for perl4 leads one to believe C<-e $foo .= "q"> should parse as
C<((-e $foo) .= "q")>, it actually parses as C<(-e ($foo .= "q"))>.
In perl5, the precedence is as documented.

    -e $foo .= "q"

    # perl4 prints: no output
    # perl5 prints: Can't modify -e in concatenation

=item * C<keys>, C<each>, C<values> are regular named unary operators

In perl4, keys(), each() and values() were special high-precedence operators
that operated on a single hash, but in perl5, they are regular named unary
operators.  As documented, named unary operators have lower precedence
than the arithmetic and concatenation operators C<+ - .>, but the perl4
variants of these operators actually bind tighter than C<+ - .>.
Thus, for:

    %foo = 1..10;
    print keys %foo - 1

    # perl4 prints: 4
    # perl5 prints: Type of arg 1 to keys must be hash (not subtraction)

The perl4 behavior was probably more useful, if less consistent.

=back

=head2 General Regular Expression Traps using s///, etc.

All types of RE traps.

=over 5

=item * C<s'$lhs'$rhs'> interpolates on either side

C<s'$lhs'$rhs'> now does no interpolation on either side.  It used to
interpolate $lhs but not $rhs.  (And still does not match a literal
'$' in string)

    $a=1;$b=2;
    $string = '1 2 $a $b';
    $string =~ s'$a'$b';
    print $string,"\n";

    # perl4 prints: $b 2 $a $b
    # perl5 prints: 1 2 $a $b

=item * C<m//g> attaches its state to the searched string

C<m//g> now attaches its state to the searched string rather than the
regular expression.  (Once the scope of a block is left for the sub, the
state of the searched string is lost)

    $_ = "ababab";
    while(m/ab/g){
        &doit("blah");
    }
    sub doit{local($_) = shift; print "Got $_ "}

    # perl4 prints: Got blah Got blah Got blah Got blah
    # perl5 prints: infinite loop blah...

=item * C<m//o> used within an anonymous sub

Currently, if you use the C<m//o> qualifier on a regular expression
within an anonymous sub, I<all> closures generated from that anonymous
sub will use the regular expression as it was compiled when it was used
the very first time in any such closure.  For instance, if you say

    sub build_match {
        my($left,$right) = @@_;
        return sub { $_[0] =~ /$left stuff $right/o; };
    }
    $good = build_match('foo','bar');
    $bad = build_match('baz','blarch');
    print $good->('foo stuff bar') ? "ok\n" : "not ok\n";
    print $bad->('baz stuff blarch') ? "ok\n" : "not ok\n";
    print $bad->('foo stuff bar') ? "not ok\n" : "ok\n";

For most builds of Perl5, this will print:
ok
not ok
not ok

build_match() will always return a sub which matches the contents of
$left and $right as they were the I<first> time that build_match()
was called, not as they are in the current call.

=item * C<$+> isn't set to whole match

If no parentheses are used in a match, Perl4 sets C<$+> to
the whole match, just like C<$&>. Perl5 does not.

    "abcdef" =~ /b.*e/;
    print "\$+ = $+\n";

    # perl4 prints: bcde
    # perl5 prints:

=item * Substitution now returns null string if it fails

substitution now returns the null string if it fails

    $string = "test";
    $value = ($string =~ s/foo//);
    print $value, "\n";

    # perl4 prints: 0
    # perl5 prints:

Also see L<Numerical Traps> for another example of this new feature.

=item * C<s`lhs`rhs`> is now a normal substitution

C<s`lhs`rhs`> (using backticks) is now a normal substitution, with no
backtick expansion

    $string = "";
    $string =~ s`^`hostname`;
    print $string, "\n";

    # perl4 prints: <the local hostname>
    # perl5 prints: hostname

=item * Stricter parsing of variables in regular expressions

Stricter parsing of variables used in regular expressions

    s/^([^$grpc]*$grpc[$opt$plus$rep]?)//o;

    # perl4: compiles w/o error
    # perl5: with Scalar found where operator expected ..., near "$opt$plus"

an added component of this example, apparently from the same script, is
the actual value of the s'd string after the substitution.
C<[$opt]> is a character class in perl4 and an array subscript in perl5

    $grpc = 'a';
    $opt  = 'r';
    $_ = 'bar';
    s/^([^$grpc]*$grpc[$opt]?)/foo/;
    print;

    # perl4 prints: foo
    # perl5 prints: foobar

=item * C<m?x?> matches only once

Under perl5, C<m?x?> matches only once, like C<?x?>. Under perl4, it matched
repeatedly, like C</x/> or C<m!x!>.

    $test = "once";
    sub match { $test =~ m?once?; }
    &match();
    if( &match() ) {
        # m?x? matches more then once
        print "perl4\n";
    } else {
        # m?x? matches only once
        print "perl5\n";
    }

    # perl4 prints: perl4
    # perl5 prints: perl5

=item * Failed matches don't reset the match variables

Unlike in Ruby, failed matches in Perl do not reset the match variables
($1, $2, ..., C<$`>, ...).

=back

=head2 Subroutine, Signal, Sorting Traps

The general group of Perl4-to-Perl5 traps having to do with
Signals, Sorting, and their related subroutines, as well as
general subroutine traps.  Includes some OS-Specific traps.

=over 5

=item * Barewords that used to look like strings look like subroutine calls

Barewords that used to look like strings to Perl will now look like subroutine
calls if a subroutine by that name is defined before the compiler sees them.

    sub SeeYa { warn"Hasta la vista, baby!" }
    $SIG{'TERM'} = SeeYa;
    print "SIGTERM is now $SIG{'TERM'}\n";

    # perl4 prints: SIGTERM is now main'SeeYa
    # perl5 prints: SIGTERM is now main::1 (and warns "Hasta la vista, baby!")

Use B<-w> to catch this one

=item * Reverse is no longer allowed as the name of a sort subroutine

reverse is no longer allowed as the name of a sort subroutine.

    sub reverse{ print "yup "; $a <=> $b }
    print sort reverse (2,1,3);

    # perl4 prints: yup yup 123
    # perl5 prints: 123
    # perl5 warns (if using -w): Ambiguous call resolved as CORE::reverse()

=item * C<warn()> won't let you specify a filehandle.

Although it _always_ printed to STDERR, warn() would let you specify a
filehandle in perl4.  With perl5 it does not.

    warn STDERR "Foo!";

    # perl4 prints: Foo!
    # perl5 prints: String found where operator expected

=back

=head2 OS Traps

=over 5

=item * SysV resets signal handler correctly

Under HPUX, and some other SysV OSes, one had to reset any signal handler,
within  the signal handler function, each time a signal was handled with
perl4.  With perl5, the reset is now done correctly.  Any code relying
on the handler _not_ being reset will have to be reworked.

Since version 5.002, Perl uses sigaction() under SysV.

    sub gotit {
        print "Got @@_... ";
    }
    $SIG{'INT'} = 'gotit';

    $| = 1;
    $pid = fork;
    if ($pid) {
        kill('INT', $pid);
        sleep(1);
        kill('INT', $pid);
    } else {
        while (1) {sleep(10);}
    }

    # perl4 (HPUX) prints: Got INT...
    # perl5 (HPUX) prints: Got INT... Got INT...

=item * SysV C<seek()> appends correctly

Under SysV OSes, C<seek()> on a file opened to append C<<< >> >>> now does
the right thing w.r.t. the fopen() manpage. e.g., - When a file is opened
for append,  it  is  impossible to overwrite information already in
the file.

    open(TEST,">>seek.test");
    $start = tell TEST;
    foreach(1 .. 9){
        print TEST "$_ ";
    }
    $end = tell TEST;
    seek(TEST,$start,0);
    print TEST "18 characters here";

    # perl4 (solaris) seek.test has: 18 characters here
    # perl5 (solaris) seek.test has: 1 2 3 4 5 6 7 8 9 18 characters here



=back

=head2 Interpolation Traps

Perl4-to-Perl5 traps having to do with how things get interpolated
within certain expressions, statements, contexts, or whatever.

=over 5

=item * C<@@> always interpolates an array in double-quotish strings

@@ now always interpolates an array in double-quotish strings.

    print "To: someone@@somewhere.com\n";

    # perl4 prints: To:someone@@somewhere.com
    # perl < 5.6.1, error : In string, @@somewhere now must be written as \@@somewhere
    # perl >= 5.6.1, warning : Possible unintended interpolation of @@somewhere in string

=item * Double-quoted strings may no longer end with an unescaped $

Double-quoted strings may no longer end with an unescaped $.

    $foo = "foo$";
    print "foo is $foo\n";

    # perl4 prints: foo is foo$
    # perl5 errors: Final $ should be \$ or $name

Note: perl5 DOES NOT error on the terminating @@ in $bar

=item * Arbitrary expressions are evaluated inside braces within double quotes

Perl now sometimes evaluates arbitrary expressions inside braces that occur
within double quotes (usually when the opening brace is preceded by C<$>
or C<@@>).

    @@www = "buz";
    $foo = "foo";
    $bar = "bar";
    sub foo { return "bar" };
    print "|@@{w.w.w}|${main'foo}|";

    # perl4 prints: |@@{w.w.w}|foo|
    # perl5 prints: |buz|bar|

Note that you can C<use strict;> to ward off such trappiness under perl5.

=item * C<$$x> now tries to dereference $x

The construct "this is $$x" used to interpolate the pid at that point, but
now tries to dereference $x.  C<$$> by itself still works fine, however.

    $s = "a reference";
    $x = *s;
    print "this is $$x\n";

    # perl4 prints: this is XXXx   (XXX is the current pid)
    # perl5 prints: this is a reference

=item * Creation of hashes on the fly with C<eval "EXPR"> requires protection

Creation of hashes on the fly with C<eval "EXPR"> now requires either both
C<$>'s to be protected in the specification of the hash name, or both curlies
to be protected.  If both curlies are protected, the result will be compatible
with perl4 and perl5.  This is a very common practice, and should be changed
to use the block form of C<eval{}>  if possible.

    $hashname = "foobar";
    $key = "baz";
    $value = 1234;
    eval "\$$hashname{'$key'} = q|$value|";
    (defined($foobar{'baz'})) ?  (print "Yup") : (print "Nope");

    # perl4 prints: Yup
    # perl5 prints: Nope

Changing

    eval "\$$hashname{'$key'} = q|$value|";

to

    eval "\$\$hashname{'$key'} = q|$value|";

causes the following result:

    # perl4 prints: Nope
    # perl5 prints: Yup

or, changing to

    eval "\$$hashname\{'$key'\} = q|$value|";

causes the following result:

    # perl4 prints: Yup
    # perl5 prints: Yup
    # and is compatible for both versions


=item * Bugs in earlier perl versions

perl4 programs which unconsciously rely on the bugs in earlier perl versions.

    perl -e '$bar=q/not/; print "This is $foo{$bar} perl5"'

    # perl4 prints: This is not perl5
    # perl5 prints: This is perl5

=item * Array and hash brackets during interpolation

You also have to be careful about array and hash brackets during
interpolation.

    print "$foo["

    perl 4 prints: [
    perl 5 prints: syntax error

    print "$foo{"

    perl 4 prints: {
    perl 5 prints: syntax error

Perl 5 is expecting to find an index or key name following the respective
brackets, as well as an ending bracket of the appropriate type.  In order
to mimic the behavior of Perl 4, you must escape the bracket like so.

    print "$foo\[";
    print "$foo\{";

=item * Interpolation of C<\$$foo{bar}>

Similarly, watch out for: C<\$$foo{bar}>

    $foo = "baz";
    print "\$$foo{bar}\n";

    # perl4 prints: $baz{bar}
    # perl5 prints: $

Perl 5 is looking for C<$foo{bar}> which doesn't exist, but perl 4 is
happy just to expand $foo to "baz" by itself.  Watch out for this
especially in C<eval>'s.

=item * C<qq()> string passed to C<eval> will not find string terminator

C<qq()> string passed to C<eval>

    eval qq(
        foreach \$y (keys %\$x\) {
            \$count++;
        }
    );

    # perl4 runs this ok
    # perl5 prints: Can't find string terminator ")"

=back

=head2 DBM Traps

General DBM traps.

=over 5

=item * Perl5 must have been linked with same dbm/ndbm as the default for C<dbmopen()>

Existing dbm databases created under perl4 (or any other dbm/ndbm tool)
may cause the same script, run under perl5, to fail.  The build of perl5
must have been linked with the same dbm/ndbm as the default for C<dbmopen()>
to function properly without C<tie>'ing to an extension dbm implementation.

    dbmopen (%dbm, "file", undef);
    print "ok\n";

    # perl4 prints: ok
    # perl5 prints: ok (IFF linked with -ldbm or -lndbm)


=item * DBM exceeding limit on the key/value size will cause perl5 to exit immediately

Existing dbm databases created under perl4 (or any other dbm/ndbm tool)
may cause the same script, run under perl5, to fail.  The error generated
when exceeding the limit on the key/value size will cause perl5 to exit
immediately.

    dbmopen(DB, "testdb",0600) || die "couldn't open db! $!";
    $DB{'trap'} = "x" x 1024;  # value too large for most dbm/ndbm
    print "YUP\n";

    # perl4 prints:
    dbm store returned -1, errno 28, key "trap" at - line 3.
    YUP

    # perl5 prints:
    dbm store returned -1, errno 28, key "trap" at - line 3.

=back

=head2 Unclassified Traps

Everything else.

=over 5

=item * C<require>/C<do> trap using returned value

If the file doit.pl has:

    sub foo {
        $rc = do "./do.pl";
        return 8;
    }
    print &foo, "\n";

And the do.pl file has the following single line:

    return 3;

Running doit.pl gives the following:

    # perl 4 prints: 3 (aborts the subroutine early)
    # perl 5 prints: 8

Same behavior if you replace C<do> with C<require>.

=item * C<split> on empty string with LIMIT specified

    $string = '';
    @@list = split(/foo/, $string, 2)

Perl4 returns a one element list containing the empty string but Perl5
returns an empty list.

=back

@


1.9
log
@Merge in perl 5.10.1
@
text
@d174 1
a174 1
perl 5.10 or newer. See L<perlsyn/"Switch statements">.
d500 1
a500 1
    $b = q baz;
d668 1
a668 1
    @@ = (1..3);
d707 1
a707 1
    7.375039999999999614
d963 2
a964 1
scalar context to its arguments.
d970 2
a971 2
    # Perl4 prints:  x = c   # Thinks list context interpolates list
    # Perl5 prints:  x = 3   # Knows scalar uses length of list
@


1.8
log
@merge in perl 5.8.8
@
text
@d173 2
a174 2
There's no switch statement.  (But it's easy to build one on the fly,
see L<perlsyn/"Basic BLOCKs and Switch Statements">)
@


1.7
log
@Resolve conflicts for perl 5.8.2, remove old files, and add OpenBSD-specific scaffolding
@
text
@d270 7
d421 1
a421 1
=item * Discontinuance
d435 1
a435 1
=item * Deprecation
d451 2
a452 2
    $x = 10 ;
    print "x=${'x}\n" ;
d460 2
a461 2
    $x = 10 ;
    print "x=${main'x}\n" ;
d465 1
a465 1
=item * BugFix
d479 1
a479 1
=item * Discontinuance
d493 1
a493 1
=item * Discontinuance
d500 1
a500 1
    $b = q baz ;
d506 1
a506 1
=item * Discontinuance
d520 1
a520 1
=item * BugFix
d530 1
a530 1
=item * Discontinuance
d562 1
a562 1
=item * Discontinuance
d574 1
a574 1
=item * BugFix
d591 1
a591 1
=item * Discontinuance
d604 1
a604 1
=item * Deprecation
d608 1
a608 1
=item * Discontinuance
d614 1
a614 1
=item * Discontinuance
d626 1
a626 1
=item * Parsing
d636 1
a636 1
=item * Parsing
d647 1
a647 1
=item * Parsing
d657 1
a657 1
=item * Parsing
d674 1
a674 1
=item * Parsing
d693 1
a693 1
=item * Numerical
d714 1
a714 1
=item * Numerical
d723 1
a723 1
=item * Numerical
d771 1
a771 1
=item * (Arrays)
d781 1
a781 1
=item * (Arrays)
d796 1
a796 1
=item * (Hashes)
d811 1
a811 1
=item * (Globs)
d824 1
a824 1
=item * (Globs)
d842 1
a842 1
=item * (Scalar String)
d856 1
a856 1
=item * (Constants)
d882 1
a882 1
=item * (Scalars)
d891 1
a891 1
=item * (Variable Suicide)
d934 1
a934 1
=item * (list context)
d949 1
a949 1
=item * (scalar context)
d960 1
a960 1
=item * (scalar context)
d972 1
a972 1
=item * (list, builtin)
d1005 1
a1005 1
=item * Precedence
d1018 1
a1018 1
=item * Precedence
d1032 1
a1032 1
=item * Precedence
d1054 1
a1054 1
=item * Precedence
d1066 1
a1066 1
=item * Precedence
d1076 1
a1076 1
=item * Precedence
d1089 1
a1089 1
=item * Precedence
d1114 1
a1114 1
=item * Regular Expression
d1128 1
a1128 1
=item * Regular Expression
d1143 1
a1143 1
=item * Regular Expression
d1169 1
a1169 1
=item * Regular Expression
d1180 1
a1180 1
=item * Regular Expression
d1193 1
a1193 1
=item * Regular Expression
d1205 1
a1205 1
=item * Regular Expression
d1222 1
a1222 1
    print ;
d1227 1
a1227 1
=item * Regular Expression
d1246 1
a1246 1
=item * Regular Expression
d1261 1
a1261 1
=item * (Signals)
d1275 1
a1275 1
=item * (Sort Subroutine)
d1286 1
a1286 1
=item * warn() won't let you specify a filehandle.
d1302 1
a1302 1
=item * (SysV)
d1329 1
a1329 1
=item * (SysV)
d1337 1
a1337 1
    $start = tell TEST ;
d1341 1
a1341 1
    $end = tell TEST ;
d1359 1
a1359 1
=item * Interpolation
d1369 1
a1369 1
=item * Interpolation
d1381 1
a1381 1
=item * Interpolation
d1398 1
a1398 1
=item * Interpolation
d1410 1
a1410 1
=item * Interpolation
d1451 1
a1451 1
=item * Interpolation
d1460 1
a1460 1
=item * Interpolation
d1482 1
a1482 1
=item * Interpolation
d1484 1
a1484 1
Similarly, watch out for:
d1496 1
a1496 1
=item * Interpolation
d1517 1
a1517 1
=item * DBM
d1531 1
a1531 1
=item * DBM
@


1.6
log
@Resolve conflicts, remove old files, merge local changes
@
text
@d21 5
d151 1
a151 1
=head2 C Traps
d153 1
a153 1
Cerebral C programmers should take note of the following:
d167 3
a169 3
The C<break> and C<continue> keywords from C become in
Perl C<last> and C<next>, respectively.
Unlike in C, these do I<not> work within a C<do { } while> construct.
d173 2
a174 1
There's no switch statement.  (But it's easy to build one on the fly.)
d182 3
a184 1
Comments begin with "#", not "/*".
d216 5
d1239 4
d1364 1
a1364 1
Double-quoted strings may no longer end with an unescaped $ or @@.
d1367 1
a1367 2
    $bar = "bar@@";
    print "foo is $foo, bar is $bar\n";
d1369 1
a1369 1
    # perl4 prints: foo is foo$, bar is bar@@
d1455 7
a1461 1
You also have to be careful about array references.
d1467 7
@


1.5
log
@merge in perl 5.6.1 with our local changes
@
text
@d654 10
d675 2
a676 1
Formatted output and significant digits
d682 2
a683 2
    7.375039999999996141
    7.37503999999999614
d687 6
a692 1
    7.37503999999999614
d707 1
a707 1
Logical tests now return an null, instead of 0
@


1.4
log
@perl-5.6.0 + local changes
@
text
@d7 5
a11 4
The biggest trap of all is forgetting to use the B<-w> switch; see
L<perlrun>.  The second biggest trap is not making your entire program
runnable under C<use strict>.  The third biggest trap is not reading
the list of changes in this version of Perl; see L<perldelta>.
d120 1
a120 1
      ARGC	$#ARGV or scalar @@ARGV
a175 6
C<printf()> does not implement the "*" format for interpolating
field widths, but it's trivial to use interpolation of double-quoted
strings to achieve the same effect.

=item *

d191 1
a191 1
success, not 0.
d282 2
a283 2
(User-defined subroutines can be B<only> list operators, never
unary ones.)  See L<perlop>.
d390 1
a390 1
please submit it to Bill Middleton <F<wjm@@best.com>> for inclusion.
d471 1
a471 1
    # perl5 dumps core (SEGV)
d590 6
d642 1
a642 1
    @@ = (1..3);
d792 13
a804 1
including SEGVs).
d938 3
a940 2
C<sprintf()> funkiness (array argument converted to scalar array count)
This test could be added to t/op/sprintf.t
d944 1
a944 1
    if ($x eq 'foobar') {print "ok 2\n";} else {print "not ok 2 '$x'\n";}
d946 2
a947 2
    # perl4 prints: ok 2
    # perl5 prints: not ok 2
d949 1
a949 1
C<printf()> works fine, though:
d951 1
a952 1
    print "\n";
a956 2
Probably a bug.

d1028 1
a1028 1
    # perl5 errors: Precedence problem: open FOO should be open(FOO)
d1104 1
a1104 1
    # perl4 prints: blah blah blah
d1118 10
a1132 2
This is probably a bug, and may change in future versions of Perl.

d1230 2
a1231 2
    # perl4 prints: SIGTERM is main'SeeYa
    # perl5 prints: SIGTERM is now main::1
d1240 1
a1240 1
    print sort reverse a,b,c;
d1242 3
a1244 2
    # perl4 prints: yup yup yup yup abc
    # perl5 prints: abc
d1326 2
a1327 1
    # perl5 errors : In string, @@somewhere now must be written as \@@somewhere
d1361 2
a1362 3
The construct "this is $$x" used to interpolate the pid at that
point, but now apparently tries to dereference $x.  C<$$> by itself still
works fine, however.
d1364 2
d1369 1
a1369 1
    # perl5 prints: this is
d1434 1
a1434 1
    $foo = "array";
d1437 1
a1437 1
    # perl4 prints: $array{bar}
d1440 2
a1441 2
Perl 5 is looking for C<$array{bar}> which doesn't exist, but perl 4 is
happy just to expand $foo to "array" by itself.  Watch out for this
d1528 1
a1528 1
	$string = '';
@


1.3
log
@perl5.005_03 (stock)
@
text
@d25 1
a25 1
C<$RS>), as though they were in B<awk>; see L<perlvar> for details.
d72 1
a72 1
$E<lt>I<digit>E<gt> does not refer to fields--it refers to substrings matched
d106 1
a106 1
slightly context sensitive for operators like "/", "?", and "E<gt>".
d163 1
a163 1
Unlike in C, these do I<NOT> work within a C<do { } while> construct.
d298 1
a298 1
The E<lt>FHE<gt> construct is not the name of the filehandle, it is a readline
d308 1
a308 1
Remember not to use "C<=>" when you need "C<=~>";
d396 2
a397 1
Also note that at least some of these can be caught with B<-w>.
d428 1
a428 1
 
a588 18
=item * Discontinuance

In Perl 4 (and versions of Perl 5 before 5.004), C<'\r'> characters in
Perl code were silently allowed, although they could cause (mysterious!)
failures in certain constructs, particularly here documents.  Now,
C<'\r'> characters cause an immediate fatal error.  (Note: In this
example, the notation B<\015> represents the incorrect line
ending. Depending upon your text viewer, it will look different.)

    print "foo";\015
    print "bar";

    # perl4     prints: foobar
    # perl5.003 prints: foobar
    # perl5.004 dies: Illegal character \015 (carriage return)

See L<perldiag> for full details.

d701 24
d771 3
d1069 1
a1069 1
interpolate C<$lhs> but not C<$rhs>.  (And still does not match a literal
d1108 1
a1108 1
C<$left> and C<$right> as they were the I<first> time that build_match()
d1270 1
a1270 1
Under SysV OSes, C<seek()> on a file opened to append C<E<gt>E<gt>> now does
d1340 1
a1340 1
point, but now apparently tries to dereference C<$x>.  C<$$> by itself still
@


1.2
log
@perl 5.004_04
@
text
@d454 2
a455 2
    sub sub1{return(0,2) }          # return a 2-elem array
    sub sub2{ return(1,2,3)}        # return a 3-elem array
d653 17
d777 1
a777 6
    # Another example

    *fred = *barney; # fred is aliased to barney
    @@barney = (1, 2, 4);
    # @@fred;
    print "@@fred";  # should print "1, 2, 4"
d779 3
a781 2
    # perl4 prints: 1 2 4
    # perl5 prints: In string, @@fred now must be written as \@@fred
d941 4
d1020 5
a1024 1
concatenation precedence over filetest operator?
d1031 17
a1179 20

=item * Regular Expression

Under perl4 and upto version 5.003, a failed C<m//g> match used to
reset the internal iterator, so that subsequent C<m//g> match attempts
began from the beginning of the string.  In perl version 5.004 and later,
failed C<m//g> matches do not reset the iterator position (which can be
found using the C<pos()> function--see L<perlfunc/pos>).

    $test = "foop";
    for (1..3) {
        print $1 while ($test =~ /(o)/g);
        # pos $test = 0;     # to get old behavior
    }

    # perl4     prints: oooooo
    # perl5.004 prints: oo

You may always reset the iterator yourself as shown in the commented line
to get the old behavior.
@


1.1
log
@Initial revision
@
text
@d9 2
a10 1
runnable under C<use strict>.
d24 2
a25 2
allows you to refer to special variables (like $RS) as 
though they were in B<awk>; see L<perlvar> for details.
d38 1
a38 1
Variables begin with "$" or "@@" in Perl.
d51 1
a51 2
Associative array values do not spring into existence upon mere
reference.
d61 2
a62 2
yourself to an array.  And split() operator has different
arguments.
d72 2
a73 2
$<I<digit>> does not refer to fields--it refers to substrings matched by
the last match pattern.
d78 1
a78 1
you set C<$,> and C<$.>.  You can set $OFS and $ORS if you're using
d104 3
a106 3
null string would render C</pat/ /pat/> unparsable, since the third slash
would be interpreted as a division operator--the tokener is in fact
slightly context sensitive for operators like "/", "?", and ">".
d161 1
a161 1
The C<break> and C<continue> keywords from C become in 
d171 1
a171 1
Variables begin with "$" or "@@" in Perl.
d175 1
a175 1
printf() does not implement the "*" format for interpolating
d186 1
a186 1
in Perl 5 is the backslash, which creates a reference.
d234 1
a234 1
The backtick operator does variable interpretation without regard to
d244 1
a244 1
command line.  Perl does substitution only in certain constructs
d277 4
a280 4
Avoid barewords if you can, especially all lower-case ones.
You can't tell just by looking at it whether a bareword is 
a function or a string.  By using quotes on strings and 
parens on function calls, you won't ever get them confused.
d284 2
a285 2
You cannot discern from mere inspection which built-ins
are unary operators (like chop() and chdir()) 
d287 1
a287 1
(User-defined subroutines can B<only> be list operators, never
d294 1
a294 1
you might expect to do not.  
d296 1
a296 1
=item * 
d298 2
a299 2
The <FH> construct is not the name of the filehandle, it is a readline
operation on that handle.  The data read is only assigned to $_ if the
d303 1
a303 1
    while ($_ = <FH>) { }..
d306 1
a306 1
=item * 
d316 1
a316 1
The C<do {}> construct isn't a real loop that you can use 
d321 3
a323 3
Use my() for local variables whenever you can get away with 
it (but see L<perlform> for where you can't).  
Using local() actually gives a local value to a global 
d335 4
a338 1
=head2 Perl4 Traps
d340 1
a340 2
Penitent Perl 4 Programmers should take note of the following
incompatible changes that occurred between release 4 and release 5:
d344 55
a398 1
=item *
d400 2
a401 2
C<@@> now always interpolates an array in double-quotish strings.  Some programs
may now need to use backslash to protect any C<@@> that shouldn't interpolate.
d403 1
a403 1
=item *
d405 1
a405 3
Barewords that used to look like strings to Perl will now look like subroutine
calls if a subroutine by that name is defined before the compiler sees them.
For example:
d407 2
a408 2
    sub SeeYa { die "Hasta la vista, baby!" }
    $SIG{'QUIT'} = SeeYa;
d410 2
a411 2
In Perl 4, that set the signal handler; in Perl 5, it actually calls the
function!  You may use the B<-w> switch to find such places.
d413 2
a414 1
=item *
d416 2
a417 2
Symbols starting with C<_> are no longer forced into package C<main>, except
for $_ itself (and @@_, etc.).
d419 1
a419 1
=item *
d421 2
a422 2
Double-colon is now a valid package separator in an identifier.  Thus these
behave differently in perl4 vs. perl5:
d424 2
a425 1
    print "$a::$b::$c\n";
d427 494
d922 9
a930 1
=item *
d932 3
a934 2
C<s'$lhs'$rhs'> now does no interpolation on either side.  It used to
interpolate C<$lhs> but not C<$rhs>.
d936 3
a938 1
=item *
d940 2
a941 2
The second and third arguments of splice() are now evaluated in scalar
context (as the book says) rather than list context.
d943 1
a943 1
=item *
d947 6
a952 2
    shift @@list + 20;	
    $n = keys %map + 20; 
d954 2
a955 1
Because if that were to work, then this couldn't:
d957 1
a957 3
    sleep $dormancy + 20;

=item *
d967 1
a967 1
    /foo/ ? $a += 2 : $a -= 2;
d979 27
a1005 1
=item *
d1007 2
a1008 3
C<open FOO || die> is now incorrect.  You need parens around the filehandle.
While temporarily supported, using such a construct will 
generate a non-fatal (but non-suppressible) warning.
d1010 1
a1010 1
=item *
d1012 1
a1012 2
The elements of argument lists for formats are now evaluated in list
context.  This means you can interpolate list values now.
d1014 1
a1014 1
=item *
d1016 1
a1016 1
You can't do a C<goto> into a block that is optimized away.  Darn.
d1018 1
a1018 1
=item *
d1020 3
a1022 3
It is no longer syntactically legal to use whitespace as the name
of a variable, or as a delimiter for any kind of quote construct.
Double darn.
d1024 4
a1027 1
=item *
d1029 2
a1030 2
The caller() function now returns a false value in a scalar context if there
is no caller.  This lets library files determine if they're being required.
d1032 1
a1032 1
=item *
d1035 224
a1258 1
regular expression.
a1259 1
=item *
d1261 1
a1261 1
C<reverse> is no longer allowed as the name of a sort subroutine.
d1263 1
a1263 1
=item *
d1265 2
a1266 2
B<taintperl> is no longer a separate executable.  There is now a B<-T>
switch to turn on tainting when it isn't turned on automatically.
d1268 1
a1268 1
=item *
d1270 1
a1270 1
Double-quoted strings may no longer end with an unescaped C<$> or C<@@>.
d1272 1
a1272 1
=item *
d1274 1
a1274 1
The archaic C<while/if> BLOCK BLOCK syntax is no longer supported.
d1276 2
d1279 1
a1279 1
=item *
d1281 1
a1281 1
Negative array subscripts now count from the end of the array.
d1283 3
a1285 1
=item *
d1287 2
a1288 2
The comma operator in a scalar context is now guaranteed to give a
scalar context to its arguments.
d1290 1
a1290 1
=item *
d1292 1
a1292 2
The C<**> operator now binds more tightly than unary minus.  
It was documented to work this way before, but didn't.
d1294 3
a1296 1
=item *
d1298 5
a1302 1
Setting C<$#array> lower now discards array elements.
d1304 2
a1305 1
=item *
d1307 1
a1307 2
delete() is not guaranteed to return the old value for tie()d arrays,
since this capability may be onerous for some modules to implement.
d1309 1
a1309 1
=item *
d1312 1
a1312 1
point, but now tries to dereference $x.  C<$$> by itself still
d1315 21
a1335 1
=item *
d1337 1
a1337 8
The meaning of foreach has changed slightly when it is iterating over a
list which is not an array.  This used to assign the list to a
temporary array, but no longer does so (for efficiency).  This means
that you'll now be iterating over the actual values, not over copies of
the values.  Modifications to the loop variable can change the original
values.  To retain Perl 4 semantics you need to assign your list
explicitly to a temporary array and then iterate over that.  For
example, you might need to change
d1339 1
a1339 1
    foreach $var (grep /x/, @@list) { ... }
d1343 26
a1368 1
    foreach $var (my @@tmp = grep /x/, @@list) { ... }
d1370 102
a1471 3
Otherwise changing C<$var> will clobber the values of @@list.  (This most often
happens when you use C<$_> for the loop variable, and call subroutines in
the loop that don't properly localize C<$_>.)
d1473 1
a1473 1
=item *
d1475 1
a1475 1
Some error messages will be different.
d1477 2
a1478 1
=item *
d1480 2
a1481 1
Some bugs may have been inadvertently removed.
d1484 4
@


1.1.1.1
log
@Import of Perl 5.003 into the tree.  Makefile.bsd-wrapper and
config.sh.OpenBSD are the only local changes.
@
text
@@


1.1.1.2
log
@perl5.005_03
@
text
@d9 1
a9 2
runnable under C<use strict>.  The third biggest trap is not reading
the list of changes in this version of Perl; see L<perldelta>.
d23 2
a24 2
allows you to refer to special variables (like C<$/>) with names (like
C<$RS>), as though they were in B<awk>; see L<perlvar> for details.
d37 1
a37 1
Variables begin with "$", "@@" or "%" in Perl.
d50 2
a51 1
Hash values do not spring into existence upon mere reference.
d61 2
a62 2
to an array yourself.  And the split() operator has different
arguments than B<awk>'s.
d72 2
a73 2
$E<lt>I<digit>E<gt> does not refer to fields--it refers to substrings matched
by the last match pattern.
d78 1
a78 1
you set C<$,> and C<$\>.  You can set $OFS and $ORS if you're using
d104 3
a106 3
null string would render C</pat/ /pat/> unparsable, because the third slash
would be interpreted as a division operator--the tokenizer is in fact
slightly context sensitive for operators like "/", "?", and "E<gt>".
d161 1
a161 1
The C<break> and C<continue> keywords from C become in
d171 1
a171 1
Variables begin with "$", "@@" or "%" in Perl.
d175 1
a175 1
C<printf()> does not implement the "*" format for interpolating
d186 1
a186 1
in Perl is the backslash, which creates a reference.
d234 1
a234 1
The backtick operator does variable interpolation without regard to
d244 1
a244 1
command line.  Perl does substitution in only certain constructs
d277 4
a280 4
Avoid barewords if you can, especially all lowercase ones.
You can't tell by just looking at it whether a bareword is
a function or a string.  By using quotes on strings and
parentheses on function calls, you won't ever get them confused.
d284 2
a285 2
You cannot discern from mere inspection which builtins
are unary operators (like chop() and chdir())
d287 1
a287 1
(User-defined subroutines can be B<only> list operators, never
d294 1
a294 1
you might expect to do not.
d296 1
a296 1
=item *
d298 2
a299 2
The E<lt>FHE<gt> construct is not the name of the filehandle, it is a readline
operation on that handle.  The data read is assigned to $_ only if the
d303 1
a303 1
    while (defined($_ = <FH>)) { }..
d306 1
a306 1
=item *
d316 1
a316 1
The C<do {}> construct isn't a real loop that you can use
d321 3
a323 3
Use C<my()> for local variables whenever you can get away with
it (but see L<perlform> for where you can't).
Using C<local()> actually gives a local value to a global
d335 1
a335 4
=head2 Perl4 to Perl5 Traps

Practicing Perl4 Programmers should take note of the following
Perl4-to-Perl5 specific traps.
d337 2
a338 1
They're crudely ordered according to the following list:
d342 1
a342 1
=item Discontinuance, Deprecation, and BugFix traps
d344 2
a345 3
Anything that's been fixed as a perl4 bug, removed as a perl4 feature
or deprecated as a perl4 feature with the intent to encourage usage of
some other perl5 feature.
d347 1
a347 1
=item Parsing Traps
d349 3
a351 1
Traps that appear to stem from the new parser.
d353 2
a354 1
=item Numerical Traps
d356 2
a357 1
Traps having to do with numerical or mathematical operators.
d359 1
a359 1
=item General data type traps
d361 2
a362 1
Traps involving perl standard data types.
d364 1
a364 31
=item Context Traps - scalar, list contexts

Traps related to context within lists, scalar statements/declarations.

=item Precedence Traps

Traps related to the precedence of parsing, evaluation, and execution of
code.

=item General Regular Expression Traps using s///, etc.

Traps related to the use of pattern matching.

=item Subroutine, Signal, Sorting Traps

Traps related to the use of signals and signal handlers, general subroutines,
and sorting, along with sorting subroutines.

=item OS Traps

OS-specific traps.

=item DBM Traps

Traps specific to the use of C<dbmopen()>, and specific dbm implementations.

=item Unclassified Traps

Everything else.

=back
d366 2
a367 3
If you find an example of a conversion trap that is not listed here,
please submit it to Bill Middleton <F<wjm@@best.com>> for inclusion.
Also note that at least some of these can be caught with B<-w>.
d369 1
a369 28
=head2 Discontinuance, Deprecation, and BugFix traps

Anything that has been discontinued, deprecated, or fixed as
a bug from perl4.

=over 4

=item * Discontinuance

Symbols starting with "_" are no longer forced into package main, except
for C<$_> itself (and C<@@_>, etc.).

    package test;
    $_legacy = 1;

    package main;
    print "\$_legacy is ",$_legacy,"\n";

    # perl4 prints: $_legacy is 1
    # perl5 prints: $_legacy is

=item * Deprecation

Double-colon is now a valid package separator in a variable name.  Thus these
behave differently in perl4 vs. perl5, because the packages don't exist.

    $a=1;$b=2;$c=3;$var=4;
    print "$a::$b::$c ";
a370 3
 
    # perl4 prints: 1::2::3 4::abc::xyz
    # perl5 prints: 3
d372 1
a372 3
Given that C<::> is now the preferred package delimiter, it is debatable
whether this should be classed as a bug or not.
(The older package delimiter, ' ,is used here)
d374 2
a375 2
    $x = 10 ;
    print "x=${'x}\n" ;
d377 1
a377 2
    # perl4 prints: x=10
    # perl5 prints: Can't find string terminator "'" anywhere before EOF
d379 2
a380 2
You can avoid this problem, and remain compatible with perl4, if you
always explicitly include the package name:
d382 1
a382 2
    $x = 10 ;
    print "x=${main'x}\n" ;
d384 1
a384 1
Also see precedence traps, for parsing C<$:>.
d386 2
a387 1
=item * BugFix
d389 1
a389 2
The second and third arguments of C<splice()> are now evaluated in scalar
context (as the Camel says) rather than list context.
d391 1
a391 5
    sub sub1{return(0,2) }          # return a 2-element list
    sub sub2{ return(1,2,3)}        # return a 3-element list
    @@a1 = ("a","b","c","d","e");
    @@a2 = splice(@@a1,&sub1,&sub2);
    print join(' ',@@a2),"\n";
d393 1
a393 515
    # perl4 prints: a b
    # perl5 prints: c d e

=item * Discontinuance

You can't do a C<goto> into a block that is optimized away.  Darn.

    goto marker1;

    for(1){
    marker1:
        print "Here I is!\n";
    }

    # perl4 prints: Here I is!
    # perl5 dumps core (SEGV)

=item * Discontinuance

It is no longer syntactically legal to use whitespace as the name
of a variable, or as a delimiter for any kind of quote construct.
Double darn.

    $a = ("foo bar");
    $b = q baz ;
    print "a is $a, b is $b\n";

    # perl4 prints: a is foo bar, b is baz
    # perl5 errors: Bareword found where operator expected

=item * Discontinuance

The archaic while/if BLOCK BLOCK syntax is no longer supported.

    if { 1 } {
        print "True!";
    }
    else {
        print "False!";
    }

    # perl4 prints: True!
    # perl5 errors: syntax error at test.pl line 1, near "if {"

=item * BugFix

The C<**> operator now binds more tightly than unary minus.
It was documented to work this way before, but didn't.

    print -4**2,"\n";

    # perl4 prints: 16
    # perl5 prints: -16

=item * Discontinuance

The meaning of C<foreach{}> has changed slightly when it is iterating over a
list which is not an array.  This used to assign the list to a
temporary array, but no longer does so (for efficiency).  This means
that you'll now be iterating over the actual values, not over copies of
the values.  Modifications to the loop variable can change the original
values.

    @@list = ('ab','abc','bcd','def');
    foreach $var (grep(/ab/,@@list)){
        $var = 1;
    }
    print (join(':',@@list));

    # perl4 prints: ab:abc:bcd:def
    # perl5 prints: 1:1:bcd:def

To retain Perl4 semantics you need to assign your list
explicitly to a temporary array and then iterate over that.  For
example, you might need to change

    foreach $var (grep(/ab/,@@list)){

to

    foreach $var (@@tmp = grep(/ab/,@@list)){

Otherwise changing $var will clobber the values of @@list.  (This most often
happens when you use C<$_> for the loop variable, and call subroutines in
the loop that don't properly localize C<$_>.)

=item * Discontinuance

C<split> with no arguments now behaves like C<split ' '> (which doesn't
return an initial null field if $_ starts with whitespace), it used to
behave like C<split /\s+/> (which does).

    $_ = ' hi mom';
    print join(':', split);

    # perl4 prints: :hi:mom
    # perl5 prints: hi:mom

=item * BugFix

Perl 4 would ignore any text which was attached to an B<-e> switch,
always taking the code snippet from the following arg.  Additionally, it
would silently accept an B<-e> switch without a following arg.  Both of
these behaviors have been fixed.

    perl -e'print "attached to -e"' 'print "separate arg"'

    # perl4 prints: separate arg
    # perl5 prints: attached to -e

    perl -e

    # perl4 prints:
    # perl5 dies: No code specified for -e.

=item * Discontinuance

In Perl 4 the return value of C<push> was undocumented, but it was
actually the last value being pushed onto the target list.  In Perl 5
the return value of C<push> is documented, but has changed, it is the
number of elements in the resulting list.

    @@x = ('existing');
    print push(@@x, 'first new', 'second new');

    # perl4 prints: second new
    # perl5 prints: 3

=item * Discontinuance

In Perl 4 (and versions of Perl 5 before 5.004), C<'\r'> characters in
Perl code were silently allowed, although they could cause (mysterious!)
failures in certain constructs, particularly here documents.  Now,
C<'\r'> characters cause an immediate fatal error.  (Note: In this
example, the notation B<\015> represents the incorrect line
ending. Depending upon your text viewer, it will look different.)

    print "foo";\015
    print "bar";

    # perl4     prints: foobar
    # perl5.003 prints: foobar
    # perl5.004 dies: Illegal character \015 (carriage return)

See L<perldiag> for full details.

=item * Deprecation

Some error messages will be different.

=item * Discontinuance

Some bugs may have been inadvertently removed.  :-)

=back

=head2 Parsing Traps

Perl4-to-Perl5 traps from having to do with parsing.

=over 4

=item * Parsing

Note the space between . and =

    $string . = "more string";
    print $string;

    # perl4 prints: more string
    # perl5 prints: syntax error at - line 1, near ". ="

=item * Parsing

Better parsing in perl 5

    sub foo {}
    &foo
    print("hello, world\n");

    # perl4 prints: hello, world
    # perl5 prints: syntax error

=item * Parsing

"if it looks like a function, it is a function" rule.

  print
    ($foo == 1) ? "is one\n" : "is zero\n";

    # perl4 prints: is zero
    # perl5 warns: "Useless use of a constant in void context" if using -w

=item * Parsing

String interpolation of the C<$#array> construct differs when braces
are to used around the name.

    @@ = (1..3);
    print "${#a}";

    # perl4 prints: 2
    # perl5 fails with syntax error

    @@ = (1..3);
    print "$#{a}";

    # perl4 prints: {a}
    # perl5 prints: 2

=back

=head2 Numerical Traps

Perl4-to-Perl5 traps having to do with numerical operators,
operands, or output from same.

=over 5

=item * Numerical

Formatted output and significant digits

    print 7.373504 - 0, "\n";
    printf "%20.18f\n", 7.373504 - 0;

    # Perl4 prints:
    7.375039999999996141
    7.37503999999999614

    # Perl5 prints:
    7.373504
    7.37503999999999614

=item * Numerical

This specific item has been deleted.  It demonstrated how the auto-increment
operator would not catch when a number went over the signed int limit.  Fixed
in version 5.003_04.  But always be wary when using large integers.
If in doubt:

   use Math::BigInt;

=item * Numerical

Assignment of return values from numeric equality tests
does not work in perl5 when the test evaluates to false (0).
Logical tests now return an null, instead of 0

    $p = ($test == 1);
    print $p,"\n";

    # perl4 prints: 0
    # perl5 prints:

Also see L<"General Regular Expression Traps using s///, etc.">
for another example of this new feature...

=back

=head2 General data type traps

Perl4-to-Perl5 traps involving most data-types, and their usage
within certain expressions and/or context.

=over 5

=item * (Arrays)

Negative array subscripts now count from the end of the array.

    @@a = (1, 2, 3, 4, 5);
    print "The third element of the array is $a[3] also expressed as $a[-2] \n";

    # perl4 prints: The third element of the array is 4 also expressed as
    # perl5 prints: The third element of the array is 4 also expressed as 4

=item * (Arrays)

Setting C<$#array> lower now discards array elements, and makes them
impossible to recover.

    @@a = (a,b,c,d,e);
    print "Before: ",join('',@@a);
    $#a =1;
    print ", After: ",join('',@@a);
    $#a =3;
    print ", Recovered: ",join('',@@a),"\n";

    # perl4 prints: Before: abcde, After: ab, Recovered: abcd
    # perl5 prints: Before: abcde, After: ab, Recovered: ab

=item * (Hashes)

Hashes get defined before use

    local($s,@@a,%h);
    die "scalar \$s defined" if defined($s);
    die "array \@@a defined" if defined(@@a);
    die "hash \%h defined" if defined(%h);

    # perl4 prints:
    # perl5 dies: hash %h defined

=item * (Globs)

glob assignment from variable to variable will fail if the assigned
variable is localized subsequent to the assignment

    @@a = ("This is Perl 4");
    *b = *a;
    local(@@a);
    print @@b,"\n";

    # perl4 prints: This is Perl 4
    # perl5 prints:

=item * (Globs)

Assigning C<undef> to a glob has no effect in Perl 5.   In Perl 4
it undefines the associated scalar (but may have other side effects
including SEGVs).

=item * (Scalar String)

Changes in unary negation (of strings)
This change effects both the return value and what it
does to auto(magic)increment.

    $x = "aaa";
    print ++$x," : ";
    print -$x," : ";
    print ++$x,"\n";

    # perl4 prints: aab : -0 : 1
    # perl5 prints: aab : -aab : aac

=item * (Constants)

perl 4 lets you modify constants:

    $foo = "x";
    &mod($foo);
    for ($x = 0; $x < 3; $x++) {
        &mod("a");
    }
    sub mod {
        print "before: $_[0]";
        $_[0] = "m";
        print "  after: $_[0]\n";
    }

    # perl4:
    # before: x  after: m
    # before: a  after: m
    # before: m  after: m
    # before: m  after: m

    # Perl5:
    # before: x  after: m
    # Modification of a read-only value attempted at foo.pl line 12.
    # before: a

=item * (Scalars)

The behavior is slightly different for:

    print "$x", defined $x

    # perl 4: 1
    # perl 5: <no output, $x is not called into existence>

=item * (Variable Suicide)

Variable suicide behavior is more consistent under Perl 5.
Perl5 exhibits the same behavior for hashes and scalars,
that perl4 exhibits for only scalars.

    $aGlobal{ "aKey" } = "global value";
    print "MAIN:", $aGlobal{"aKey"}, "\n";
    $GlobalLevel = 0;
    &test( *aGlobal );

    sub test {
        local( *theArgument ) = @@_;
        local( %aNewLocal ); # perl 4 != 5.001l,m
        $aNewLocal{"aKey"} = "this should never appear";
        print "SUB: ", $theArgument{"aKey"}, "\n";
        $aNewLocal{"aKey"} = "level $GlobalLevel";   # what should print
        $GlobalLevel++;
        if( $GlobalLevel<4 ) {
            &test( *aNewLocal );
        }
    }

    # Perl4:
    # MAIN:global value
    # SUB: global value
    # SUB: level 0
    # SUB: level 1
    # SUB: level 2

    # Perl5:
    # MAIN:global value
    # SUB: global value
    # SUB: this should never appear
    # SUB: this should never appear
    # SUB: this should never appear

=back

=head2 Context Traps - scalar, list contexts

=over 5

=item * (list context)

The elements of argument lists for formats are now evaluated in list
context.  This means you can interpolate list values now.

    @@fmt = ("foo","bar","baz");
    format STDOUT=
    @@<<<<< @@||||| @@>>>>>
    @@fmt;
    .
    write;

    # perl4 errors:  Please use commas to separate fields in file
    # perl5 prints: foo     bar      baz

=item * (scalar context)

The C<caller()> function now returns a false value in a scalar context
if there is no caller.  This lets library files determine if they're
being required.

    caller() ? (print "You rang?\n") : (print "Got a 0\n");

    # perl4 errors: There is no caller
    # perl5 prints: Got a 0

=item * (scalar context)

The comma operator in a scalar context is now guaranteed to give a
scalar context to its arguments.

    @@y= ('a','b','c');
    $x = (1, 2, @@y);
    print "x = $x\n";

    # Perl4 prints:  x = c   # Thinks list context interpolates list
    # Perl5 prints:  x = 3   # Knows scalar uses length of list

=item * (list, builtin)

C<sprintf()> funkiness (array argument converted to scalar array count)
This test could be added to t/op/sprintf.t

    @@z = ('%s%s', 'foo', 'bar');
    $x = sprintf(@@z);
    if ($x eq 'foobar') {print "ok 2\n";} else {print "not ok 2 '$x'\n";}

    # perl4 prints: ok 2
    # perl5 prints: not ok 2

C<printf()> works fine, though:

    printf STDOUT (@@z);
    print "\n";

    # perl4 prints: foobar
    # perl5 prints: foobar

Probably a bug.

=back

=head2 Precedence Traps

Perl4-to-Perl5 traps involving precedence order.

Perl 4 has almost the same precedence rules as Perl 5 for the operators
that they both have.  Perl 4 however, seems to have had some
inconsistencies that made the behavior differ from what was documented.

=over 5

=item * Precedence

LHS vs. RHS of any assignment operator.  LHS is evaluated first
in perl4, second in perl5; this can affect the relationship
between side-effects in sub-expressions.

    @@arr = ( 'left', 'right' );
    $a{shift @@arr} = shift @@arr;
    print join( ' ', keys %a );

    # perl4 prints: left
    # perl5 prints: right

=item * Precedence

These are now semantic errors because of precedence:

    @@list = (1,2,3,4,5);
    %map = ("a",1,"b",2,"c",3,"d",4);
    $n = shift @@list + 2;   # first item in list plus 2
    print "n is $n, ";
    $m = keys %map + 2;     # number of items in hash plus 2
    print "m is $m\n";

    # perl4 prints: n is 3, m is 6
    # perl5 errors and fails to compile

=item * Precedence
d403 1
a403 1
    /foo/ ? $a += 2 : $a -= 2
d415 1
a415 1
=item * Precedence
d417 3
a419 1
    open FOO || die;
d421 1
a421 2
is now incorrect.  You need parentheses around the filehandle.
Otherwise, perl5 leaves the statement as its default precedence:
d423 2
a424 1
    open(FOO || die);
d426 1
a426 2
    # perl4 opens or dies
    # perl5 errors: Precedence problem: open FOO should be open(FOO)
d428 1
a428 1
=item * Precedence
d430 1
a430 2
perl4 gives the special variable, C<$:> precedence, where perl5
treats C<$::> as main C<package>
d432 3
a434 1
    $a = "x"; print "$::a";
d436 1
a436 2
    # perl 4 prints: -:a
    # perl 5 prints: x
d438 2
a439 1
=item * Precedence
d441 1
a441 51
perl4 had buggy precedence for the file test operators vis-a-vis
the assignment operators.  Thus, although the precedence table
for perl4 leads one to believe C<-e $foo .= "q"> should parse as
C<((-e $foo) .= "q")>, it actually parses as C<(-e ($foo .= "q"))>.
In perl5, the precedence is as documented.

    -e $foo .= "q"

    # perl4 prints: no output
    # perl5 prints: Can't modify -e in concatenation

=item * Precedence

In perl4, keys(), each() and values() were special high-precedence operators
that operated on a single hash, but in perl5, they are regular named unary
operators.  As documented, named unary operators have lower precedence
than the arithmetic and concatenation operators C<+ - .>, but the perl4
variants of these operators actually bind tighter than C<+ - .>.
Thus, for:

    %foo = 1..10;
    print keys %foo - 1

    # perl4 prints: 4
    # perl5 prints: Type of arg 1 to keys must be hash (not subtraction)

The perl4 behavior was probably more useful, if less consistent.

=back

=head2 General Regular Expression Traps using s///, etc.

All types of RE traps.

=over 5

=item * Regular Expression

C<s'$lhs'$rhs'> now does no interpolation on either side.  It used to
interpolate C<$lhs> but not C<$rhs>.  (And still does not match a literal
'$' in string)

    $a=1;$b=2;
    $string = '1 2 $a $b';
    $string =~ s'$a'$b';
    print $string,"\n";

    # perl4 prints: $b 2 $a $b
    # perl5 prints: 1 2 $a $b

=item * Regular Expression
d444 1
a444 2
regular expression.  (Once the scope of a block is left for the sub, the
state of the searched string is lost)
d446 1
a446 5
    $_ = "ababab";
    while(m/ab/g){
        &doit("blah");
    }
    sub doit{local($_) = shift; print "Got $_ "}
d448 1
a448 2
    # perl4 prints: blah blah blah
    # perl5 prints: infinite loop blah...
d450 1
a450 1
=item * Regular Expression
d452 2
a453 4
Currently, if you use the C<m//o> qualifier on a regular expression
within an anonymous sub, I<all> closures generated from that anonymous
sub will use the regular expression as it was compiled when it was used
the very first time in any such closure.  For instance, if you say
d455 1
a455 4
    sub build_match {
        my($left,$right) = @@_;
        return sub { $_[0] =~ /$left stuff $right/o; };
    }
d457 1
a457 3
build_match() will always return a sub which matches the contents of
C<$left> and C<$right> as they were the I<first> time that build_match()
was called, not as they are in the current call.
d459 1
a459 1
This is probably a bug, and may change in future versions of Perl.
d461 1
a461 1
=item * Regular Expression
a462 2
If no parentheses are used in a match, Perl4 sets C<$+> to
the whole match, just like C<$&>. Perl5 does not.
d464 1
a464 2
    "abcdef" =~ /b.*e/;
    print "\$+ = $+\n";
d466 1
a466 2
    # perl4 prints: bcde
    # perl5 prints:
d468 1
a468 1
=item * Regular Expression
d470 2
a471 1
substitution now returns the null string if it fails
d473 1
a473 3
    $string = "test";
    $value = ($string =~ s/foo//);
    print $value, "\n";
d475 2
a476 2
    # perl4 prints: 0
    # perl5 prints:
d478 1
a478 1
Also see L<Numerical Traps> for another example of this new feature.
d480 1
a480 1
=item * Regular Expression
d482 1
a482 2
C<s`lhs`rhs`> (using backticks) is now a normal substitution, with no
backtick expansion
d484 2
a485 3
    $string = "";
    $string =~ s`^`hostname`;
    print $string, "\n";
d487 1
a487 192
    # perl4 prints: <the local hostname>
    # perl5 prints: hostname

=item * Regular Expression

Stricter parsing of variables used in regular expressions

    s/^([^$grpc]*$grpc[$opt$plus$rep]?)//o;

    # perl4: compiles w/o error
    # perl5: with Scalar found where operator expected ..., near "$opt$plus"

an added component of this example, apparently from the same script, is
the actual value of the s'd string after the substitution.
C<[$opt]> is a character class in perl4 and an array subscript in perl5

    $grpc = 'a';
    $opt  = 'r';
    $_ = 'bar';
    s/^([^$grpc]*$grpc[$opt]?)/foo/;
    print ;

    # perl4 prints: foo
    # perl5 prints: foobar

=item * Regular Expression

Under perl5, C<m?x?> matches only once, like C<?x?>. Under perl4, it matched
repeatedly, like C</x/> or C<m!x!>.

    $test = "once";
    sub match { $test =~ m?once?; }
    &match();
    if( &match() ) {
        # m?x? matches more then once
        print "perl4\n";
    } else {
        # m?x? matches only once
        print "perl5\n";
    }

    # perl4 prints: perl4
    # perl5 prints: perl5


=back

=head2 Subroutine, Signal, Sorting Traps

The general group of Perl4-to-Perl5 traps having to do with
Signals, Sorting, and their related subroutines, as well as
general subroutine traps.  Includes some OS-Specific traps.

=over 5

=item * (Signals)

Barewords that used to look like strings to Perl will now look like subroutine
calls if a subroutine by that name is defined before the compiler sees them.

    sub SeeYa { warn"Hasta la vista, baby!" }
    $SIG{'TERM'} = SeeYa;
    print "SIGTERM is now $SIG{'TERM'}\n";

    # perl4 prints: SIGTERM is main'SeeYa
    # perl5 prints: SIGTERM is now main::1

Use B<-w> to catch this one

=item * (Sort Subroutine)

reverse is no longer allowed as the name of a sort subroutine.

    sub reverse{ print "yup "; $a <=> $b }
    print sort reverse a,b,c;

    # perl4 prints: yup yup yup yup abc
    # perl5 prints: abc

=item * warn() won't let you specify a filehandle.

Although it _always_ printed to STDERR, warn() would let you specify a
filehandle in perl4.  With perl5 it does not.

    warn STDERR "Foo!";

    # perl4 prints: Foo!
    # perl5 prints: String found where operator expected

=back

=head2 OS Traps

=over 5

=item * (SysV)

Under HPUX, and some other SysV OSes, one had to reset any signal handler,
within  the signal handler function, each time a signal was handled with
perl4.  With perl5, the reset is now done correctly.  Any code relying
on the handler _not_ being reset will have to be reworked.

Since version 5.002, Perl uses sigaction() under SysV.

    sub gotit {
        print "Got @@_... ";
    }
    $SIG{'INT'} = 'gotit';

    $| = 1;
    $pid = fork;
    if ($pid) {
        kill('INT', $pid);
        sleep(1);
        kill('INT', $pid);
    } else {
        while (1) {sleep(10);}
    }

    # perl4 (HPUX) prints: Got INT...
    # perl5 (HPUX) prints: Got INT... Got INT...

=item * (SysV)

Under SysV OSes, C<seek()> on a file opened to append C<E<gt>E<gt>> now does
the right thing w.r.t. the fopen() manpage. e.g., - When a file is opened
for append,  it  is  impossible to overwrite information already in
the file.

    open(TEST,">>seek.test");
    $start = tell TEST ;
    foreach(1 .. 9){
        print TEST "$_ ";
    }
    $end = tell TEST ;
    seek(TEST,$start,0);
    print TEST "18 characters here";

    # perl4 (solaris) seek.test has: 18 characters here
    # perl5 (solaris) seek.test has: 1 2 3 4 5 6 7 8 9 18 characters here



=back

=head2 Interpolation Traps

Perl4-to-Perl5 traps having to do with how things get interpolated
within certain expressions, statements, contexts, or whatever.

=over 5

=item * Interpolation

@@ now always interpolates an array in double-quotish strings.

    print "To: someone@@somewhere.com\n";

    # perl4 prints: To:someone@@somewhere.com
    # perl5 errors : In string, @@somewhere now must be written as \@@somewhere

=item * Interpolation

Double-quoted strings may no longer end with an unescaped $ or @@.

    $foo = "foo$";
    $bar = "bar@@";
    print "foo is $foo, bar is $bar\n";

    # perl4 prints: foo is foo$, bar is bar@@
    # perl5 errors: Final $ should be \$ or $name

Note: perl5 DOES NOT error on the terminating @@ in $bar

=item * Interpolation

Perl now sometimes evaluates arbitrary expressions inside braces that occur
within double quotes (usually when the opening brace is preceded by C<$>
or C<@@>).

    @@www = "buz";
    $foo = "foo";
    $bar = "bar";
    sub foo { return "bar" };
    print "|@@{w.w.w}|${main'foo}|";

    # perl4 prints: |@@{w.w.w}|foo|
    # perl5 prints: |buz|bar|

Note that you can C<use strict;> to ward off such trappiness under perl5.

=item * Interpolation
d490 1
a490 1
point, but now apparently tries to dereference C<$x>.  C<$$> by itself still
d493 1
a493 1
    print "this is $$x\n";
d495 8
a502 19
    # perl4 prints: this is XXXx   (XXX is the current pid)
    # perl5 prints: this is

=item * Interpolation

Creation of hashes on the fly with C<eval "EXPR"> now requires either both
C<$>'s to be protected in the specification of the hash name, or both curlies
to be protected.  If both curlies are protected, the result will be compatible
with perl4 and perl5.  This is a very common practice, and should be changed
to use the block form of C<eval{}>  if possible.

    $hashname = "foobar";
    $key = "baz";
    $value = 1234;
    eval "\$$hashname{'$key'} = q|$value|";
    (defined($foobar{'baz'})) ?  (print "Yup") : (print "Nope");

    # perl4 prints: Yup
    # perl5 prints: Nope
d504 1
a504 3
Changing

    eval "\$$hashname{'$key'} = q|$value|";
d508 1
a508 1
    eval "\$\$hashname{'$key'} = q|$value|";
d510 3
a512 1
causes the following result:
d514 1
a514 2
    # perl4 prints: Nope
    # perl5 prints: Yup
d516 1
a516 1
or, changing to
d518 1
a518 12
    eval "\$$hashname\{'$key'\} = q|$value|";

causes the following result:

    # perl4 prints: Yup
    # perl5 prints: Yup
    # and is compatible for both versions


=item * Interpolation

perl4 programs which unconsciously rely on the bugs in earlier perl versions.
d520 1
a520 40
    perl -e '$bar=q/not/; print "This is $foo{$bar} perl5"'

    # perl4 prints: This is not perl5
    # perl5 prints: This is perl5

=item * Interpolation

You also have to be careful about array references.

    print "$foo{"

    perl 4 prints: {
    perl 5 prints: syntax error

=item * Interpolation

Similarly, watch out for:

    $foo = "array";
    print "\$$foo{bar}\n";

    # perl4 prints: $array{bar}
    # perl5 prints: $

Perl 5 is looking for C<$array{bar}> which doesn't exist, but perl 4 is
happy just to expand $foo to "array" by itself.  Watch out for this
especially in C<eval>'s.

=item * Interpolation

C<qq()> string passed to C<eval>

    eval qq(
        foreach \$y (keys %\$x\) {
            \$count++;
        }
    );

    # perl4 runs this ok
    # perl5 prints: Can't find string terminator ")"
a522 81

=head2 DBM Traps

General DBM traps.

=over 5

=item * DBM

Existing dbm databases created under perl4 (or any other dbm/ndbm tool)
may cause the same script, run under perl5, to fail.  The build of perl5
must have been linked with the same dbm/ndbm as the default for C<dbmopen()>
to function properly without C<tie>'ing to an extension dbm implementation.

    dbmopen (%dbm, "file", undef);
    print "ok\n";

    # perl4 prints: ok
    # perl5 prints: ok (IFF linked with -ldbm or -lndbm)


=item * DBM

Existing dbm databases created under perl4 (or any other dbm/ndbm tool)
may cause the same script, run under perl5, to fail.  The error generated
when exceeding the limit on the key/value size will cause perl5 to exit
immediately.

    dbmopen(DB, "testdb",0600) || die "couldn't open db! $!";
    $DB{'trap'} = "x" x 1024;  # value too large for most dbm/ndbm
    print "YUP\n";

    # perl4 prints:
    dbm store returned -1, errno 28, key "trap" at - line 3.
    YUP

    # perl5 prints:
    dbm store returned -1, errno 28, key "trap" at - line 3.

=back

=head2 Unclassified Traps

Everything else.

=over 5

=item * C<require>/C<do> trap using returned value

If the file doit.pl has:

    sub foo {
        $rc = do "./do.pl";
        return 8;
    }
    print &foo, "\n";

And the do.pl file has the following single line:

    return 3;

Running doit.pl gives the following:

    # perl 4 prints: 3 (aborts the subroutine early)
    # perl 5 prints: 8

Same behavior if you replace C<do> with C<require>.

=item * C<split> on empty string with LIMIT specified

	$string = '';
    @@list = split(/foo/, $string, 2)

Perl4 returns a one element list containing the empty string but Perl5
returns an empty list.

=back

As always, if any of these are ever officially declared as bugs,
they'll be fixed and removed.

@


1.1.1.3
log
@virgin perl 5.6.0
@
text
@d25 1
a25 1
$RS), as though they were in B<awk>; see L<perlvar> for details.
d72 1
a72 1
$<I<digit>> does not refer to fields--it refers to substrings matched
d106 1
a106 1
slightly context sensitive for operators like "/", "?", and ">".
d163 1
a163 1
Unlike in C, these do I<not> work within a C<do { } while> construct.
d298 1
a298 1
The <FH> construct is not the name of the filehandle, it is a readline
d308 1
a308 1
Remember not to use C<=> when you need C<=~>;
d396 1
a396 2
Also note that at least some of these can be caught with the
C<use warnings> pragma or the B<-w> switch.
d427 1
a427 1

d588 18
a717 24
=item * Bitwise string ops

When bitwise operators which can operate upon either numbers or
strings (C<& | ^ ~>) are given only strings as arguments, perl4 would
treat the operands as bitstrings so long as the program contained a call
to the C<vec()> function. perl5 treats the string operands as bitstrings.
(See L<perlop/Bitwise String Operators> for more details.)

    $fred = "10";
    $barney = "12";
    $betty = $fred & $barney;
    print "$betty\n";
    # Uncomment the next line to change perl4's behavior
    # ($dummy) = vec("dummy", 0, 0);

    # Perl4 prints:
    8

    # Perl5 prints:
    10

    # If vec() is used anywhere in the program, both print:
    10

a763 3
Perl will now generate a warning when it sees defined(@@a) and
defined(%h).

d1059 1
a1059 1
interpolate $lhs but not $rhs.  (And still does not match a literal
d1098 1
a1098 1
$left and $right as they were the I<first> time that build_match()
d1260 1
a1260 1
Under SysV OSes, C<seek()> on a file opened to append C<<< >> >>> now does
d1330 1
a1330 1
point, but now apparently tries to dereference $x.  C<$$> by itself still
@


1.1.1.4
log
@stock perl 5.6.1
@
text
@d7 4
a10 5
The biggest trap of all is forgetting to C<use warnings> or use the B<-w>
switch; see L<perllexwarn> and L<perlrun>. The second biggest trap is not
making your entire program runnable under C<use strict>.  The third biggest
trap is not reading the list of changes in this version of Perl; see
L<perldelta>.
d119 1
a119 1
      ARGC	scalar @@ARGV (compare with $#ARGV)
d175 6
d196 1
a196 1
success, not 0. (system(), however, returns zero for success.)
d287 2
a288 2
(Unless prototyped, user-defined subroutines can B<only> be list
operators, never unary ones.)  See L<perlop> and L<perlsub>.
d395 1
a395 1
please submit it to <F<perlbug@@perl.org>> for inclusion.
d476 1
a476 1
    # perl5 errors: Can't "goto" into the middle of a foreach loop
a594 6
In Perl 4, if in list context the delimiters to the first argument of
C<split()> were C<??>, the result would be placed in C<@@_> as well as
being returned.   Perl 5 has more respect for your subroutine arguments.

=item * Discontinuance

d641 1
a641 1
    @@a = (1..3);
d791 1
a791 13
including SEGVs). Perl 5 will also warn if C<undef> is assigned to a
typeglob. (Note that assigning C<undef> to a typeglob is different
than calling the C<undef> function on a typeglob (C<undef *foo>), which
has quite a few effects.

    $foo = "bar";
    *foo = undef;
    print $foo;

    # perl4 prints:
    # perl4 warns: "Use of uninitialized variable" if using -w
    # perl5 prints: bar
    # perl5 warns: "Undefined value assigned to typeglob" if using -w
d925 2
a926 3
C<sprintf()> is prototyped as ($;@@), so its first argument is given scalar
context. Thus, if passed an array, it will probably not do what you want,
unlike Perl 4:
d930 1
a930 1
    print $x;
d932 2
a933 2
    # perl4 prints: foobar
    # perl5 prints: 3
d935 1
a935 1
C<printf()> works the same as it did in Perl 4, though:
a936 1
    @@z = ('%s%s', 'foo', 'bar');
d938 1
d943 2
d1016 1
a1016 1
    # perl5 opens FOO, dying only if 'FOO' is false, i.e. never
d1092 1
a1092 1
    # perl4 prints: Got blah Got blah Got blah Got blah
a1105 10
    $good = build_match('foo','bar');
    $bad = build_match('baz','blarch');
    print $good->('foo stuff bar') ? "ok\n" : "not ok\n";
    print $bad->('baz stuff blarch') ? "ok\n" : "not ok\n";
    print $bad->('foo stuff bar') ? "not ok\n" : "ok\n";

For most builds of Perl5, this will print:
ok
not ok
not ok
d1111 2
d1210 2
a1211 2
    # perl4 prints: SIGTERM is now main'SeeYa
    # perl5 prints: SIGTERM is now main::1 (and warns "Hasta la vista, baby!")
d1220 1
a1220 1
    print sort reverse (2,1,3);
d1222 2
a1223 3
    # perl4 prints: yup yup 123
    # perl5 prints: 123
    # perl5 warns (if using -w): Ambiguous call resolved as CORE::reverse()
d1305 1
a1305 2
    # perl < 5.6.1, error : In string, @@somewhere now must be written as \@@somewhere
    # perl >= 5.6.1, warning : Possible unintended interpolation of @@somewhere in string
d1339 3
a1341 2
The construct "this is $$x" used to interpolate the pid at that point, but
now tries to dereference $x.  C<$$> by itself still works fine, however.
a1342 2
    $s = "a reference";
    $x = *s;
d1346 1
a1346 1
    # perl5 prints: this is a reference
d1411 1
a1411 1
    $foo = "baz";
d1414 1
a1414 1
    # perl4 prints: $baz{bar}
d1417 2
a1418 2
Perl 5 is looking for C<$foo{bar}> which doesn't exist, but perl 4 is
happy just to expand $foo to "baz" by itself.  Watch out for this
d1505 1
a1505 1
    $string = '';
@


1.1.1.5
log
@stock perl 5.8.0 from CPAN
@
text
@a653 10
=item * Parsing

When perl sees C<map {> (or C<grep {>), it has to guess whether the C<{>
starts a BLOCK or a hash reference. If it guesses wrong, it will report
a syntax error near the C<}> and the missing (or unexpected) comma.

Use unary C<+> before C<{> on a hash reference, and unary C<+> applied
to the first thing in a BLOCK (after C<{>), for perl to guess right all
the time. (See L<perlfunc/map>.)

d665 1
a665 2
Formatted output and significant digits.  In general, Perl 5
tries to be more precise.  For example, on a Solaris Sparc:
d671 2
a672 2
    7.3750399999999996141
    7.375039999999999614
d676 1
a676 6
    7.375039999999999614

Notice how the first result looks better in Perl 5.

Your results may vary, since your floating point formatting routines
and even floating point format may be slightly different.
d691 1
a691 1
Logical tests now return a null, instead of 0
@


1.1.1.6
log
@perl 5.8.2 from CPAN
@
text
@a20 5
A Perl program executes only once, not once for each input line.  You can
do an implicit loop with C<-n> or C<-p>.

=item *

d146 1
a146 1
=head2 C/C++ Traps
d148 1
a148 1
Cerebral C and C++ programmers should take note of the following:
d162 3
a164 3
The C<break> and C<continue> keywords from C become in Perl C<last>
and C<next>, respectively.  Unlike in C, these do I<not> work within a
C<do { } while> construct.  See L<perlsyn/"Loop Control">.
d168 1
a168 2
There's no switch statement.  (But it's easy to build one on the fly,
see L<perlsyn/"Basic BLOCKs and Switch Statements">)
d176 1
a176 3
Comments begin with "#", not "/*" or "//".  Perl may interpret C/C++
comments as division operators, unterminated regular expressions or
the defined-or operator.
a207 5
A Perl program executes only once, not once for each input line.  You can
do an implicit loop with C<-n> or C<-p>.

=item *

a1225 4
=item * Regular Expression

Unlike in Ruby, failed matches in Perl do not reset the match variables
($1, $2, ..., C<$`>, ...).
d1347 1
a1347 1
Double-quoted strings may no longer end with an unescaped $.
d1350 2
a1351 1
    print "foo is $foo\n";
d1353 1
a1353 1
    # perl4 prints: foo is foo$
d1439 1
a1439 7
You also have to be careful about array and hash brackets during
interpolation.

    print "$foo["

    perl 4 prints: [
    perl 5 prints: syntax error
a1444 7

Perl 5 is expecting to find an index or key name following the respective
brackets, as well as an ending bracket of the appropriate type.  In order
to mimic the behavior of Perl 4, you must escape the bracket like so.

    print "$foo\[";
    print "$foo\{";
@


1.1.1.7
log
@perl 5.8.8 import
@
text
@a269 7
=item *

The shell's C<test> uses "=", "!=", "<" etc for string comparisons and "-eq",
"-ne", "-lt" etc for numeric comparisons. This is the reverse of Perl, which
uses C<eq>, C<ne>, C<lt> for string comparisons, and C<==>, C<!=> C<< < >> etc
for numeric comparisons.

d414 1
a414 1
=item * Symbols starting with "_" no longer forced into main
d428 1
a428 1
=item * Double-colon valid package separator in variable name
d444 2
a445 2
    $x = 10;
    print "x=${'x}\n";
d453 2
a454 2
    $x = 10;
    print "x=${main'x}\n";
d458 1
a458 1
=item * 2nd and 3rd args to C<splice()> are now in scalar context
d472 1
a472 1
=item * Can't do C<goto> into a block that is optimized away
d486 1
a486 1
=item * Can't use whitespace as variable name or quote delimiter
d493 1
a493 1
    $b = q baz;
d499 1
a499 1
=item * C<while/if BLOCK BLOCK> gone
d513 1
a513 1
=item * C<**> binds tighter than unary minus
d523 1
a523 1
=item * C<foreach> changed when iterating over a list
d555 1
a555 1
=item * C<split> with no args behavior changed
d567 1
a567 1
=item * B<-e> behavior fixed
d584 1
a584 1
=item * C<push> returns number of elements in resulting list
d597 1
a597 1
=item * Some error messages differ
d601 1
a601 1
=item * C<split()> honors subroutine args
d607 1
a607 1
=item * Bugs removed
d619 1
a619 1
=item * Space between . and = triggers syntax error
d629 1
a629 1
=item * Better parsing in perl 5
d640 1
a640 1
=item * Function parsing
d650 1
a650 1
=item * String interpolation of C<$#array> differs
d667 1
a667 1
=item * Perl guesses on C<map>, C<grep> followed by C<{> if it starts BLOCK or hash ref
d686 1
a686 1
=item * Formatted output and significant digits
d707 1
a707 1
=item * Auto-increment operator over signed int limit deleted
d716 1
a716 1
=item * Assignment of return values from numeric equality tests doesn't work
d764 1
a764 1
=item * Negative array subscripts now count from the end of array
d774 1
a774 1
=item * Setting C<$#array> lower now discards array elements
d789 1
a789 1
=item * Hashes get defined before use
d804 1
a804 1
=item * Glob assignment from localized variable to variable
d817 1
a817 1
=item * Assigning C<undef> to glob
d835 1
a835 1
=item * Changes in unary negation (of strings)
d849 1
a849 1
=item * Modifying of constants prohibited
d875 1
a875 1
=item * C<defined $var> behavior changed
d884 1
a884 1
=item * Variable Suicide
d927 1
a927 1
=item * Elements of argument lists for formats evaluated in list context
d942 1
a942 1
=item * C<caller()> returns false value in scalar context if no caller present
d953 1
a953 1
=item * Comma operator in scalar context gives scalar context to args
d965 1
a965 1
=item * C<sprintf()> prototyped as C<($;@@)>
d998 1
a998 1
=item * LHS vs. RHS of any assignment operator
d1011 1
a1011 1
=item * Semantic errors introduced due to precedence
d1025 1
a1025 1
=item * Precedence of assignment operators same as the precedence of assignment
d1047 1
a1047 1
=item * C<open> requires parentheses around filehandle
d1059 1
a1059 1
=item * C<$:> precedence over C<$::> gone
d1069 1
a1069 1
=item * Precedence of file test operators documented
d1082 1
a1082 1
=item * C<keys>, C<each>, C<values> are regular named unary operators
d1107 1
a1107 1
=item * C<s'$lhs'$rhs'> interpolates on either side
d1121 1
a1121 1
=item * C<m//g> attaches its state to the searched string
d1136 1
a1136 1
=item * C<m//o> used within an anonymous sub
d1162 1
a1162 1
=item * C<$+> isn't set to whole match
d1173 1
a1173 1
=item * Substitution now returns null string if it fails
d1186 1
a1186 1
=item * C<s`lhs`rhs`> is now a normal substitution
d1198 1
a1198 1
=item * Stricter parsing of variables in regular expressions
d1215 1
a1215 1
    print;
d1220 1
a1220 1
=item * C<m?x?> matches only once
d1239 1
a1239 1
=item * Failed matches don't reset the match variables
d1254 1
a1254 1
=item * Barewords that used to look like strings look like subroutine calls
d1268 1
a1268 1
=item * Reverse is no longer allowed as the name of a sort subroutine
d1279 1
a1279 1
=item * C<warn()> won't let you specify a filehandle.
d1295 1
a1295 1
=item * SysV resets signal handler correctly
d1322 1
a1322 1
=item * SysV C<seek()> appends correctly
d1330 1
a1330 1
    $start = tell TEST;
d1334 1
a1334 1
    $end = tell TEST;
d1352 1
a1352 1
=item * C<@@> always interpolates an array in double-quotish strings
d1362 1
a1362 1
=item * Double-quoted strings may no longer end with an unescaped $
d1374 1
a1374 1
=item * Arbitrary expressions are evaluated inside braces within double quotes
d1391 1
a1391 1
=item * C<$$x> now tries to dereference $x
d1403 1
a1403 1
=item * Creation of hashes on the fly with C<eval "EXPR"> requires protection
d1444 1
a1444 1
=item * Bugs in earlier perl versions
d1453 1
a1453 1
=item * Array and hash brackets during interpolation
d1475 1
a1475 1
=item * Interpolation of C<\$$foo{bar}>
d1477 1
a1477 1
Similarly, watch out for: C<\$$foo{bar}>
d1489 1
a1489 1
=item * C<qq()> string passed to C<eval> will not find string terminator
d1510 1
a1510 1
=item * Perl5 must have been linked with same dbm/ndbm as the default for C<dbmopen()>
d1524 1
a1524 1
=item * DBM exceeding limit on the key/value size will cause perl5 to exit immediately
@


1.1.1.8
log
@import perl 5.10.1
@
text
@d173 2
a174 2
The switch statement is called C<given/when> and only available in
perl 5.10 or newer. See L<perlsyn/"Switch statements">.
@


1.1.1.9
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d174 1
a174 1
perl 5.10 or newer.  See L<perlsyn/"Switch Statements">.
d500 1
a500 1
    $b = q baz ;
d668 1
a668 1
    @@a = (1..3);
d707 1
a707 1
    7.373503999999999614
d963 1
a963 2
scalar context to its last argument. It gives scalar or void context
to any preceding arguments, depending on circumstances.
d969 2
a970 2
    # Perl4 prints:  x = c   # Interpolates array @@y into the list
    # Perl5 prints:  x = 3   # Evaluates array @@y in scalar context
@


1.1.1.10
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d350 1239
@


1.1.1.11
log
@Import perl-5.20.1
@
text
@d8 1
a8 1
switch; see L<warnings> and L<perlrun>. The second biggest trap is not
a204 95

=back

=head2 JavaScript Traps

Judicious JavaScript programmers should take note of the following:

=over 4

=item *

In Perl, binary C<+> is always addition.  C<$string1 + $string2> converts
both strings to numbers and then adds them.  To concatenate two strings,
use the C<.> operator.

=item *

The C<+> unary operator doesn't do anything in Perl.  It exists to avoid
syntactic ambiguities.

=item *

Unlike C<for...in>, Perl's C<for> (also spelled C<foreach>) does not allow
the left-hand side to be an arbitrary expression.  It must be a variable:

   for my $variable (keys %hash) {
	...
   }

Furthermore, don't forget the C<keys> in there, as
C<foreach my $kv (%hash) {}> iterates over the keys and values, and is
generally not useful ($kv would be a key, then a value, and so on).

=item *

To iterate over the indices of an array, use C<foreach my $i (0 .. $#array)
{}>.  C<foreach my $v (@@array) {}> iterates over the values.

=item *

Perl requires braces following C<if>, C<while>, C<foreach>, etc.

=item *

In Perl, C<else if> is spelled C<elsif>.

=item *

C<? :> has higher precedence than assignment.  In JavaScript, one can
write:

    condition ? do_something() : variable = 3

and the variable is only assigned if the condition is false.  In Perl, you
need parentheses:

    $condition ? do_something() : ($variable = 3);

Or just use C<if>.

=item *

Perl requires semicolons to separate statements.

=item *

Variables declared with C<my> only affect code I<after> the declaration.
You cannot write C<$x = 1; my $x;> and expect the first assignment to
affect the same variable.  It will instead assign to an C<$x> declared
previously in an outer scope, or to a global variable.

Note also that the variable is not visible until the following
I<statement>.  This means that in C<my $x = 1 + $x> the second $x refers
to one declared previously.

=item *

C<my> variables are scoped to the current block, not to the current
function.  If you write C<{my $x;} $x;>, the second C<$x> does not refer to
the one declared inside the block.

=item *

An object's members cannot be made accessible as variables.  The closest
Perl equivalent to C<with(object) { method() }> is C<for>, which can alias
C<$_> to the object:

    for ($object) {
	$_->method;
    }

=item *

The object or class on which a method is called is passed as one of the
method's arguments, not as a separate C<this> value.
@


