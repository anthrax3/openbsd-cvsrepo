head	1.2;
access;
symbols
	OPENBSD_6_2:1.2.0.6
	OPENBSD_6_2_BASE:1.2
	PERL_5_24_2:1.1.1.9
	OPENBSD_6_1:1.2.0.4
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.1.8.0.10
	OPENBSD_6_0_BASE:1.1.1.8
	OPENBSD_5_9:1.1.1.8.0.4
	OPENBSD_5_9_BASE:1.1.1.8
	OPENBSD_5_8:1.1.1.8.0.6
	OPENBSD_5_8_BASE:1.1.1.8
	PERL_5_20_2:1.1.1.8
	OPENBSD_5_7:1.1.1.8.0.2
	OPENBSD_5_7_BASE:1.1.1.8
	PERL_5_20_1:1.1.1.8
	OPENBSD_5_6:1.1.1.7.0.4
	OPENBSD_5_6_BASE:1.1.1.7
	PERL_5_18_2:1.1.1.7
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.6.0.6
	OPENBSD_5_5_BASE:1.1.1.6
	OPENBSD_5_4:1.1.1.6.0.2
	OPENBSD_5_4_BASE:1.1.1.6
	PERL_5_16_3:1.1.1.6
	OPENBSD_5_3:1.1.1.5.0.10
	OPENBSD_5_3_BASE:1.1.1.5
	OPENBSD_5_2:1.1.1.5.0.8
	OPENBSD_5_2_BASE:1.1.1.5
	OPENBSD_5_1_BASE:1.1.1.5
	OPENBSD_5_1:1.1.1.5.0.6
	OPENBSD_5_0:1.1.1.5.0.4
	OPENBSD_5_0_BASE:1.1.1.5
	OPENBSD_4_9:1.1.1.5.0.2
	OPENBSD_4_9_BASE:1.1.1.5
	PERL_5_12_2:1.1.1.5
	OPENBSD_4_8:1.1.1.4.0.4
	OPENBSD_4_8_BASE:1.1.1.4
	OPENBSD_4_7:1.1.1.4.0.2
	OPENBSD_4_7_BASE:1.1.1.4
	PERL_5_10_1:1.1.1.4
	OPENBSD_4_6:1.1.1.3.0.6
	OPENBSD_4_6_BASE:1.1.1.3
	OPENBSD_4_5:1.1.1.3.0.2
	OPENBSD_4_5_BASE:1.1.1.3
	PERL_5_10_0:1.1.1.3
	OPENBSD_4_4:1.1.1.2.0.24
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.22
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_2:1.1.1.2.0.20
	OPENBSD_4_2_BASE:1.1.1.2
	OPENBSD_4_1:1.1.1.2.0.18
	OPENBSD_4_1_BASE:1.1.1.2
	OPENBSD_4_0:1.1.1.2.0.16
	OPENBSD_4_0_BASE:1.1.1.2
	PERL_5_8_8:1.1.1.2
	OPENBSD_3_9:1.1.1.2.0.14
	OPENBSD_3_9_BASE:1.1.1.2
	OPENBSD_3_8:1.1.1.2.0.12
	OPENBSD_3_8_BASE:1.1.1.2
	OPENBSD_3_7:1.1.1.2.0.10
	OPENBSD_3_7_BASE:1.1.1.2
	PERL_5_8_6:1.1.1.2
	OPENBSD_3_6:1.1.1.2.0.8
	OPENBSD_3_6_BASE:1.1.1.2
	PERL_5_8_5:1.1.1.2
	PERL_5_8_3:1.1.1.2
	OPENBSD_3_5:1.1.1.2.0.6
	OPENBSD_3_5_BASE:1.1.1.2
	PERL_5_8_2:1.1.1.2
	OPENBSD_3_4:1.1.1.2.0.4
	OPENBSD_3_4_BASE:1.1.1.2
	OPENBSD_3_3:1.1.1.2.0.2
	OPENBSD_3_3_BASE:1.1.1.2
	PERL_5_8_0:1.1.1.2
	OPENBSD_3_2:1.1.1.1.0.6
	OPENBSD_3_2_BASE:1.1.1.1
	OPENBSD_3_1:1.1.1.1.0.4
	OPENBSD_3_1_BASE:1.1.1.1
	OPENBSD_3_0:1.1.1.1.0.2
	OPENBSD_3_0_BASE:1.1.1.1
	PERL_5_6_1:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2017.02.05.00.32.19;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	2001.05.24.18.24.53;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.05.24.18.24.53;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.10.27.22.15.08;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2008.09.29.17.18.57;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2009.10.12.18.10.38;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2010.09.24.14.49.07;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2013.03.25.20.09.27;	author sthen;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2014.03.24.14.59.08;	author afresh1;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2014.11.17.20.53.15;	author afresh1;	state Exp;
branches;
next	1.1.1.9;
commitid	B31cAbBIXiCqnL97;

1.1.1.9
date	2017.08.14.13.46.21;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@=head1 NAME

perlutil - utilities packaged with the Perl distribution

=head1 DESCRIPTION

Along with the Perl interpreter itself, the Perl distribution installs a
range of utilities on your system. There are also several utilities
which are used by the Perl distribution itself as part of the install
process. This document exists to list all of these utilities, explain
what they are for and provide pointers to each module's documentation,
if appropriate.

=head1 LIST OF UTILITIES

=head2 Documentation

=over 3

=item L<perldoc|perldoc>

The main interface to Perl's documentation is C<perldoc>, although
if you're reading this, it's more than likely that you've already found
it. F<perldoc> will extract and format the documentation from any file
in the current directory, any Perl module installed on the system, or
any of the standard documentation pages, such as this one. Use 
C<perldoc E<lt>nameE<gt>> to get information on any of the utilities
described in this document.

=item L<pod2man|pod2man> and L<pod2text|pod2text>

If it's run from a terminal, F<perldoc> will usually call F<pod2man> to
translate POD (Plain Old Documentation - see L<perlpod> for an
explanation) into a manpage, and then run F<man> to display it; if
F<man> isn't available, F<pod2text> will be used instead and the output
piped through your favourite pager.

=item L<pod2html|pod2html>

As well as these two, there is another converter: F<pod2html> will
produce HTML pages from POD.

=item L<pod2usage|pod2usage>

If you just want to know how to use the utilities described here,
F<pod2usage> will just extract the "USAGE" section; some of
the utilities will automatically call F<pod2usage> on themselves when
you call them with C<-help>.

=item L<podselect|podselect>

F<pod2usage> is a special case of F<podselect>, a utility to extract
named sections from documents written in POD. For instance, while
utilities have "USAGE" sections, Perl modules usually have "SYNOPSIS"
sections: C<podselect -s "SYNOPSIS" ...> will extract this section for
a given file.

=item L<podchecker|podchecker>

If you're writing your own documentation in POD, the F<podchecker>
utility will look for errors in your markup.

=item L<splain|splain>

F<splain> is an interface to L<perldiag> - paste in your error message
to it, and it'll explain it for you.

=item C<roffitall>

The C<roffitall> utility is not installed on your system but lives in
the F<pod/> directory of your Perl source kit; it converts all the
documentation from the distribution to F<*roff> format, and produces a
typeset PostScript or text file of the whole lot.

=back

=head2 Converters

To help you convert legacy programs to more modern Perl, the
L<pl2pm|pl2pm> utility will help you convert old-style Perl 4 libraries
to new-style Perl5 modules.

=head2 Administration

=over 3

=item L<libnetcfg|libnetcfg>

To display and change the libnet configuration run the libnetcfg command.

=item L<perlivp>

The F<perlivp> program is set up at Perl source code build time to test
the Perl version it was built under.  It can be used after running C<make
install> (or your platform's equivalent procedure) to verify that perl
and its libraries have been installed correctly.

=back

=head2 Development

There are a set of utilities which help you in developing Perl programs, 
and in particular, extending Perl with C.

=over 3

=item L<perlbug|perlbug>

F<perlbug> is the recommended way to report bugs in the perl interpreter
itself or any of the standard library modules back to the developers;
please read through the documentation for F<perlbug> thoroughly before
using it to submit a bug report.

=item L<perlthanks|perlbug>

This program provides an easy way to send a thank-you message back to the
authors and maintainers of perl. It's just F<perlbug> installed under
another name.

=item L<h2ph|h2ph>

Back before Perl had the XS system for connecting with C libraries,
programmers used to get library constants by reading through the C
header files. You may still see C<require 'syscall.ph'> or similar
around - the F<.ph> file should be created by running F<h2ph> on the
corresponding F<.h> file. See the F<h2ph> documentation for more on how
to convert a whole bunch of header files at once.

=item L<c2ph|c2ph> and L<pstruct|pstruct>

F<c2ph> and F<pstruct>, which are actually the same program but behave
differently depending on how they are called, provide another way of
getting at C with Perl - they'll convert C structures and union declarations
to Perl code. This is deprecated in favour of F<h2xs> these days.

=item L<h2xs|h2xs>

F<h2xs> converts C header files into XS modules, and will try and write
as much glue between C libraries and Perl modules as it can. It's also
very useful for creating skeletons of pure Perl modules.

=item L<enc2xs>

F<enc2xs> builds a Perl extension for use by Encode from either
Unicode Character Mapping files (.ucm) or Tcl Encoding Files (.enc).
Besides being used internally during the build process of the Encode
module, you can use F<enc2xs> to add your own encoding to perl.
No knowledge of XS is necessary.

=item L<xsubpp>

F<xsubpp> is a compiler to convert Perl XS code into C code.
It is typically run by the makefiles created by L<ExtUtils::MakeMaker>.

F<xsubpp> will compile XS code into C code by embedding the constructs
necessary to let C functions manipulate Perl values and creates the glue
necessary to let Perl access those functions.

=item L<prove>

F<prove> is a command-line interface to the test-running functionality
of F<Test::Harness>.  It's an alternative to C<make test>.

=item L<corelist>

A command-line front-end to C<Module::CoreList>, to query what modules
were shipped with given versions of perl.

=back

=head2 General tools

A few general-purpose tools are shipped with perl, mostly because they
came along modules included in the perl distribution.

=over 3

=item L<piconv>

B<piconv> is a Perl version of B<iconv>, a character encoding converter
widely available for various Unixen today.  This script was primarily a
technology demonstrator for Perl v5.8.0, but you can use piconv in the
place of iconv for virtually any case.

=item L<ptar>

F<ptar> is a tar-like program, written in pure Perl.

=item L<ptardiff>

F<ptardiff> is a small utility that produces a diff between an extracted
archive and an unextracted one. (Note that this utility requires the
C<Text::Diff> module to function properly; this module isn't distributed
with perl, but is available from the CPAN.)

=item L<ptargrep>

F<ptargrep> is a utility to apply pattern matching to the contents of files 
in a tar archive.

=item L<shasum>

This utility, that comes with the C<Digest::SHA> module, is used to print
or verify SHA checksums.

=item L<zipdetails>

L<zipdetails> displays information about the internal record structure of the zip file.
It is not concerned with displaying any details of the compressed data stored in the zip file.

=back

=head2 Installation

These utilities help manage extra Perl modules that don't come with the perl
distribution.

=over 3

=item L<cpan>

F<cpan> is a command-line interface to CPAN.pm.  It allows you to install
modules or distributions from CPAN, or just get information about them, and
a lot more.  It is similar to the command line mode of the L<CPAN> module,

    perl -MCPAN -e shell

=item L<instmodsh>

A little interface to ExtUtils::Installed to examine installed modules,
validate your packlists and even create a tarball from an installed module.

=back

=head1 SEE ALSO

L<perldoc|perldoc>, L<pod2man|pod2man>, L<perlpod>,
L<pod2html|pod2html>, L<pod2usage|pod2usage>, L<podselect|podselect>,
L<podchecker|podchecker>, L<splain|splain>, L<perldiag>,
C<roffitall|roffitall>, L<File::Find|File::Find>, L<pl2pm|pl2pm>,
L<perlbug|perlbug>, L<h2ph|h2ph>, L<c2ph|c2ph>, L<h2xs|h2xs>, L<enc2xs>,
L<xsubpp>, L<cpan>, L<instmodsh>, L<piconv>, L<prove>, L<corelist>, L<ptar>,
L<ptardiff>, L<shasum>, L<zipdetails>

=cut
@


1.1
log
@Initial revision
@
text
@d14 3
a16 1
=head2 DOCUMENTATION
d34 1
a34 1
explanation) into a man page, and then run F<man> to display it; if
d38 1
a38 1
=item L<pod2html|pod2html> and L<pod2latex|pod2latex>
d40 2
a41 3
As well as these two, there are two other converters: F<pod2html> will
produce HTML pages from POD, and F<pod2latex>, which produces LaTeX
files.
d68 1
a68 1
=item L<roffitall|roffitall>
d77 5
a81 1
=head2 CONVERTORS
d83 1
a83 2
To help you convert legacy programs to Perl, we've included three
conversion filters:
d87 3
a89 1
=item L<a2p|a2p>
d91 6
a96 34
F<a2p> converts F<awk> scripts to Perl programs; for example, C<a2p -F:>
on the simple F<awk> script C<{print $2}> will produce a Perl program
based around this code:

    while (<>) {
        ($Fld1,$Fld2) = split(/[:\n]/, $_, 9999);
        print $Fld2;
    }

=item L<s2p|s2p>

Similarly, F<s2p> converts F<sed> scripts to Perl programs. F<s2p> run
on C<s/foo/bar> will produce a Perl program based around this:

    while (<>) {
        chomp;
        s/foo/bar/g;
        print if $printit;
    }

=item L<find2perl|find2perl>

Finally, F<find2perl> translates C<find> commands to Perl equivalents which 
use the L<File::Find|File::Find> module. As an example, 
C<find2perl . -user root -perm 4000 -print> produces the following callback
subroutine for C<File::Find>:

    sub wanted {
        my ($dev,$ino,$mode,$nlink,$uid,$gid);
        (($dev,$ino,$mode,$nlink,$uid,$gid) = lstat($_)) &&
        $uid == $uid{'root'}) &&
        (($mode & 0777) == 04000);
        print("$name\n");
    }
a99 4
As well as these filters for converting other languages, the
L<pl2pm|pl2pm> utility will help you convert old-style Perl 4 libraries to 
new-style Perl5 modules.

d114 6
d127 1
a127 1
to convert a whole bunch of header files at ones.
d142 83
a224 1
=item L<dprofpp|dprofpp>
d226 1
a226 4
Perl comes with a profiler, the F<Devel::Dprof> module. The
F<dprofpp> utility analyzes the output of this profiler and tells you
which subroutines are taking up the most run time. See L<Devel::Dprof>
for more information.
d228 1
a228 1
=item L<perlcc|perlcc>
d230 2
a231 1
F<perlcc> is the interface to the experimental Perl compiler suite.
d235 1
a235 1
=head2 SEE ALSO
d240 4
a243 4
L<roffitall|roffitall>, L<a2p|a2p>, L<s2p|s2p>, L<find2perl|find2perl>,
L<File::Find|File::Find>, L<pl2pm|pl2pm>, L<perlbug|perlbug>,
L<h2ph|h2ph>, L<c2ph|c2ph>, L<h2xs|h2xs>, L<dprofpp|dprofpp>,
L<Devel::Dprof>, L<perlcc|perlcc>
@


1.1.1.1
log
@stock perl 5.6.1
@
text
@@


1.1.1.2
log
@stock perl 5.8.0 from CPAN
@
text
@d32 1
a32 1
explanation) into a manpage, and then run F<man> to display it; if
a125 10
=head2 Administration

=over 3

=item L<libnetcfg|libnetcfg>

To display and change the libnet configuration run the libnetcfg command.

=back

d147 1
a147 1
to convert a whole bunch of header files at once.
d164 1
a164 1
Perl comes with a profiler, the F<Devel::DProf> module. The
d166 1
a166 1
which subroutines are taking up the most run time. See L<Devel::DProf>
d183 1
a183 1
L<Devel::DProf>, L<perlcc|perlcc>
@


1.1.1.3
log
@import perl 5.10.0 from CPAN
@
text
@d14 1
a14 3
=head1 LIST OF UTILITIES

=head2 Documentation
d76 1
a76 1
=head2 Convertors
d94 1
a94 1
=item L<s2p|s2p> and L<psed>
a104 3
When invoked as F<psed>, it behaves as a F<sed> implementation, written in
Perl.

a129 5
=item L<config_data|config_data>

Query or change configuration of Perl modules that use Module::Build-based
configuration files for features and config data.

a133 7
=item L<perlivp>

The F<perlivp> program is set up at Perl source code build time to test
the Perl version it was built under.  It can be used after running C<make
install> (or your platform's equivalent procedure) to verify that perl
and its libraries have been installed correctly.

a171 17
=item L<enc2xs>

F<enc2xs> builds a Perl extension for use by Encode from either
Unicode Character Mapping files (.ucm) or Tcl Encoding Files (.enc).
Besides being used internally during the build process of the Encode
module, you can use F<enc2xs> to add your own encoding to perl.
No knowledge of XS is necessary.

=item L<xsubpp>

F<xsubpp> is a compiler to convert Perl XS code into C code.
It is typically run by the makefiles created by L<ExtUtils::MakeMaker>.

F<xsubpp> will compile XS code into C code by embedding the constructs
necessary to let C functions manipulate Perl values and creates the glue
necessary to let Perl access those functions.

d179 1
a179 72
=item L<prove>

F<prove> is a command-line interface to the test-running functionality of
of F<Test::Harness>.  It's an alternative to C<make test>.

=item L<corelist>

A command-line front-end to C<Module::CoreList>, to query what modules
were shipped with given versions of perl.

=back

=head2 General tools

A few general-purpose tools are shipped with perl, mostly because they
came along modules included in the perl distribution.

=over 3

=item L<piconv>

B<piconv> is a Perl version of B<iconv>, a character encoding converter
widely available for various Unixen today.  This script was primarily a
technology demonstrator for Perl 5.8.0, but you can use piconv in the
place of iconv for virtually any case.

=item L<ptar>

F<ptar> is a tar-like program, written in pure Perl.

=item L<ptardiff>

F<ptardiff> is a small utility that produces a diff between an extracted
archive and an unextracted one. (Note that this utility requires the
C<Text::Diff> module to function properly; this module isn't distributed
with perl, but is available from the CPAN.)

=item L<shasum>

This utility, that comes with the C<Digest::SHA> module, is used to print
or verify SHA checksums.

=back

=head2 Installation

These utilities help manage extra Perl modules that don't come with the perl
distribution.

=over 3

=item L<cpan>

F<cpan> is a command-line interface to CPAN.pm.  It allows you to install
modules or distributions from CPAN, or just get information about them, and
a lot more.  It is similar to the command line mode of the L<CPAN> module,

    perl -MCPAN -e shell

=item L<cpanp>

F<cpanp> is, like F<cpan>, a command-line interface to the CPAN, using
the C<CPANPLUS> module as a back-end. It can be used interactively or
imperatively.

=item L<cpan2dist>

F<cpan2dist> is a tool to create distributions (or packages) from CPAN
modules, then suitable for your package manager of choice. Support for
specific formats are available from CPAN as C<CPANPLUS::Dist::*> modules.

=item L<instmodsh>
d181 1
a181 2
A little interface to ExtUtils::Installed to examine installed modules,
validate your packlists and even create a tarball from an installed module.
d185 1
a185 1
=head1 SEE ALSO
d193 1
a193 3
L<Devel::DProf>, L<enc2xs>, L<xsubpp>, L<cpan>, L<cpanp>, L<cpan2dist>,
L<instmodsh>, L<piconv>, L<prove>, L<corelist>, L<ptar>, L<ptardiff>,
L<shasum>
@


1.1.1.4
log
@import perl 5.10.1
@
text
@a166 6
=item L<perlthanks|perlthanks>

This program provides an easy way to send a thank-you message back to the
authors and maintainers of perl. It's just F<perlbug> installed under
another name.

@


1.1.1.5
log
@Perl 5.12.2 from CPAN
@
text
@d92 1
a92 1
        ($Fld1,$Fld2) = split(/[:\n]/, $_, -1);
d221 1
a221 1
F<prove> is a command-line interface to the test-running functionality
@


1.1.1.6
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d69 1
a69 1
=item C<roffitall>
d78 1
a78 1
=head2 Converters
d167 1
a167 1
=item L<perlthanks|perlbug>
d212 7
a255 5
=item L<ptargrep>

F<ptargrep> is a utility to apply pattern matching to the contents of files 
in a tar archive.

a260 5
=item L<zipdetails>

L<zipdetails> displays information about the internal record structure of the zip file.
It is not concerned with displaying any details of the compressed data stored in the zip file.

d302 1
a302 1
C<roffitall|roffitall>, L<a2p|a2p>, L<s2p|s2p>, L<find2perl|find2perl>,
d304 4
a307 3
L<h2ph|h2ph>, L<c2ph|c2ph>, L<h2xs|h2xs>, L<enc2xs>, L<xsubpp>,
L<cpan>, L<cpanp>, L<cpan2dist>, L<instmodsh>, L<piconv>, L<prove>,
L<corelist>, L<ptar>, L<ptardiff>, L<shasum>, L<zipdetails>
@


1.1.1.7
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d235 1
a235 1
technology demonstrator for Perl v5.8.0, but you can use piconv in the
@


1.1.1.8
log
@Import perl-5.20.1
@
text
@d38 1
a38 1
=item L<pod2html|pod2html>
d40 3
a42 2
As well as these two, there is another converter: F<pod2html> will
produce HTML pages from POD.
d281 12
d308 1
a308 1
L<cpan>, L<instmodsh>, L<piconv>, L<prove>,
@


1.1.1.9
log
@Import perl-5.24.2
@
text
@d79 50
a128 3
To help you convert legacy programs to more modern Perl, the
L<pl2pm|pl2pm> utility will help you convert old-style Perl 4 libraries
to new-style Perl5 modules.
d134 5
d292 5
a296 4
C<roffitall|roffitall>, L<File::Find|File::Find>, L<pl2pm|pl2pm>,
L<perlbug|perlbug>, L<h2ph|h2ph>, L<c2ph|c2ph>, L<h2xs|h2xs>, L<enc2xs>,
L<xsubpp>, L<cpan>, L<instmodsh>, L<piconv>, L<prove>, L<corelist>, L<ptar>,
L<ptardiff>, L<shasum>, L<zipdetails>
@


