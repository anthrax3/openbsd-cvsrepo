head	1.17;
access;
symbols
	OPENBSD_6_0:1.16.0.10
	OPENBSD_6_0_BASE:1.16
	OPENBSD_5_9:1.16.0.4
	OPENBSD_5_9_BASE:1.16
	OPENBSD_5_8:1.16.0.6
	OPENBSD_5_8_BASE:1.16
	PERL_5_20_2:1.1.1.15
	OPENBSD_5_7:1.16.0.2
	OPENBSD_5_7_BASE:1.16
	PERL_5_20_1:1.1.1.15
	OPENBSD_5_6:1.15.0.4
	OPENBSD_5_6_BASE:1.15
	PERL_5_18_2:1.1.1.14
	PERL:1.1.1
	OPENBSD_5_5:1.14.0.6
	OPENBSD_5_5_BASE:1.14
	OPENBSD_5_4:1.14.0.2
	OPENBSD_5_4_BASE:1.14
	PERL_5_16_3:1.1.1.13
	OPENBSD_5_3:1.13.0.10
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.13.0.8
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.6
	OPENBSD_5_0:1.13.0.4
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.13.0.2
	OPENBSD_4_9_BASE:1.13
	PERL_5_12_2:1.1.1.12
	OPENBSD_4_8:1.12.0.4
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.2
	OPENBSD_4_7_BASE:1.12
	PERL_5_10_1:1.1.1.11
	OPENBSD_4_6:1.11.0.6
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.2
	OPENBSD_4_5_BASE:1.11
	PERL_5_10_0:1.1.1.10
	OPENBSD_4_4:1.10.0.10
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.8
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.6
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.4
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.2
	OPENBSD_4_0_BASE:1.10
	PERL_5_8_8:1.1.1.9
	OPENBSD_3_9:1.9.0.6
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.4
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.2
	OPENBSD_3_7_BASE:1.9
	PERL_5_8_6:1.1.1.8
	OPENBSD_3_6:1.8.0.2
	OPENBSD_3_6_BASE:1.8
	PERL_5_8_5:1.1.1.7
	PERL_5_8_3:1.1.1.6
	OPENBSD_3_5:1.7.0.2
	OPENBSD_3_5_BASE:1.7
	PERL_5_8_2:1.1.1.6
	OPENBSD_3_4:1.6.0.4
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.6.0.2
	OPENBSD_3_3_BASE:1.6
	PERL_5_8_0:1.1.1.5
	OPENBSD_3_2:1.5.0.6
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.4
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	PERL_5_6_1:1.1.1.4
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	PERL_5_6_0:1.1.1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	PERL_500503:1.1.1.2
	CPAN:1.1.1
	OPENBSD_2_5:1.2.0.6
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.4
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	perl5003:1.1.1.1
	lwall:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.17
date	2017.02.05.00.32.18;	author afresh1;	state Exp;
branches;
next	1.16;
commitid	cxJ08BvJA9Pt2PTM;

1.16
date	2014.11.17.20.57.07;	author afresh1;	state Exp;
branches;
next	1.15;
commitid	QP75iYx42Uo7mMxO;

1.15
date	2014.03.24.15.05.32;	author afresh1;	state Exp;
branches;
next	1.14;

1.14
date	2013.03.25.20.40.58;	author sthen;	state Exp;
branches;
next	1.13;

1.13
date	2010.09.24.15.07.03;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2009.10.12.18.24.47;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2008.09.29.17.36.16;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2006.03.28.19.23.09;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2005.01.15.21.30.35;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2004.08.09.18.10.15;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2003.12.03.03.02.44;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.10.27.22.25.32;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.24.18.35.51;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.06.17.07.21;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	99.04.29.22.52.08;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.11.30.07.59.02;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.08.19.10.12.57;	author downsj;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.08.19.10.12.57;	author downsj;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.04.29.22.40.35;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2000.04.06.16.10.21;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2001.05.24.18.24.30;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2002.10.27.22.15.04;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2003.12.03.02.44.20;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2004.08.09.17.48.07;	author millert;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2005.01.15.21.17.48;	author millert;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2006.03.28.18.49.16;	author millert;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	2008.09.29.17.18.50;	author millert;	state Exp;
branches;
next	1.1.1.11;

1.1.1.11
date	2009.10.12.18.10.40;	author millert;	state Exp;
branches;
next	1.1.1.12;

1.1.1.12
date	2010.09.24.14.49.08;	author millert;	state Exp;
branches;
next	1.1.1.13;

1.1.1.13
date	2013.03.25.20.09.18;	author sthen;	state Exp;
branches;
next	1.1.1.14;

1.1.1.14
date	2014.03.24.14.59.07;	author afresh1;	state Exp;
branches;
next	1.1.1.15;

1.1.1.15
date	2014.11.17.20.53.13;	author afresh1;	state Exp;
branches;
next	;
commitid	B31cAbBIXiCqnL97;


desc
@@


1.17
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@=head1 NAME
X<debug> X<debugger>

perldebug - Perl debugging

=head1 DESCRIPTION

First of all, have you tried using L<C<use strict;>|strict> and
L<C<use warnings;>|warnings>?


If you're new to the Perl debugger, you may prefer to read
L<perldebtut>, which is a tutorial introduction to the debugger.

=head1 The Perl Debugger

If you invoke Perl with the B<-d> switch, your script runs under the
Perl source debugger.  This works like an interactive Perl
environment, prompting for debugger commands that let you examine
source code, set breakpoints, get stack backtraces, change the values of
variables, etc.  This is so convenient that you often fire up
the debugger all by itself just to test out Perl constructs
interactively to see what they do.  For example:
X<-d>

    $ perl -d -e 42

In Perl, the debugger is not a separate program the way it usually is in the
typical compiled environment.  Instead, the B<-d> flag tells the compiler
to insert source information into the parse trees it's about to hand off
to the interpreter.  That means your code must first compile correctly
for the debugger to work on it.  Then when the interpreter starts up, it
preloads a special Perl library file containing the debugger.

The program will halt I<right before> the first run-time executable
statement (but see below regarding compile-time statements) and ask you
to enter a debugger command.  Contrary to popular expectations, whenever
the debugger halts and shows you a line of code, it always displays the
line it's I<about> to execute, rather than the one it has just executed.

Any command not recognized by the debugger is directly executed
(C<eval>'d) as Perl code in the current package.  (The debugger
uses the DB package for keeping its own state information.)

Note that the said C<eval> is bound by an implicit scope. As a
result any newly introduced lexical variable or any modified
capture buffer content is lost after the eval. The debugger is a
nice environment to learn Perl, but if you interactively experiment using
material which should be in the same scope, stuff it in one line.

For any text entered at the debugger prompt, leading and trailing whitespace
is first stripped before further processing.  If a debugger command
coincides with some function in your own program, merely precede the
function with something that doesn't look like a debugger command, such
as a leading C<;> or perhaps a C<+>, or by wrapping it with parentheses
or braces.

=head2 Calling the Debugger

There are several ways to call the debugger:

=over 4

=item perl -d program_name

On the given program identified by C<program_name>.

=item perl -d -e 0 

Interactively supply an arbitrary C<expression> using C<-e>.

=item perl -d:ptkdb program_name

Debug a given program via the C<Devel::ptkdb> GUI.

=item perl -dt threaded_program_name

Debug a given program using threads (experimental).

=back

=head2 Debugger Commands

The interactive debugger understands the following commands:

=over 12

=item h
X<debugger command, h>

Prints out a summary help message

=item h [command]

Prints out a help message for the given debugger command.

=item h h

The special argument of C<h h> produces the entire help page, which is quite long.

If the output of the C<h h> command (or any command, for that matter) scrolls
past your screen, precede the command with a leading pipe symbol so
that it's run through your pager, as in

    DB> |h h

You may change the pager which is used via C<o pager=...> command.

=item p expr
X<debugger command, p>

Same as C<print {$DB::OUT} expr> in the current package.  In particular,
because this is just Perl's own C<print> function, this means that nested
data structures and objects are not dumped, unlike with the C<x> command.

The C<DB::OUT> filehandle is opened to F</dev/tty>, regardless of
where STDOUT may be redirected to.

=item x [maxdepth] expr
X<debugger command, x>

Evaluates its expression in list context and dumps out the result in a
pretty-printed fashion.  Nested data structures are printed out
recursively, unlike the real C<print> function in Perl.  When dumping
hashes, you'll probably prefer 'x \%h' rather than 'x %h'.
See L<Dumpvalue> if you'd like to do this yourself.

The output format is governed by multiple options described under
L<"Configurable Options">.

If the C<maxdepth> is included, it must be a numeral I<N>; the value is
dumped only I<N> levels deep, as if the C<dumpDepth> option had been
temporarily set to I<N>.

=item V [pkg [vars]]
X<debugger command, V>

Display all (or some) variables in package (defaulting to C<main>)
using a data pretty-printer (hashes show their keys and values so
you see what's what, control characters are made printable, etc.).
Make sure you don't put the type specifier (like C<$>) there, just
the symbol names, like this:

    V DB filename line

Use C<~pattern> and C<!pattern> for positive and negative regexes.

This is similar to calling the C<x> command on each applicable var.

=item X [vars]
X<debugger command, X>

Same as C<V currentpackage [vars]>.

=item y [level [vars]]
X<debugger command, y>

Display all (or some) lexical variables (mnemonic: C<mY> variables)
in the current scope or I<level> scopes higher.  You can limit the
variables that you see with I<vars> which works exactly as it does
for the C<V> and C<X> commands.  Requires the C<PadWalker> module
version 0.08 or higher; will warn if this isn't installed.  Output
is pretty-printed in the same style as for C<V> and the format is
controlled by the same options.

=item T
X<debugger command, T> X<backtrace> X<stack, backtrace>

Produce a stack backtrace.  See below for details on its output.

=item s [expr]
X<debugger command, s> X<step>

Single step.  Executes until the beginning of another
statement, descending into subroutine calls.  If an expression is
supplied that includes function calls, it too will be single-stepped.

=item n [expr]
X<debugger command, n>

Next.  Executes over subroutine calls, until the beginning
of the next statement.  If an expression is supplied that includes
function calls, those functions will be executed with stops before
each statement.

=item r
X<debugger command, r>

Continue until the return from the current subroutine.
Dump the return value if the C<PrintRet> option is set (default).

=item <CR>

Repeat last C<n> or C<s> command.

=item c [line|sub]
X<debugger command, c>

Continue, optionally inserting a one-time-only breakpoint
at the specified line or subroutine.

=item l
X<debugger command, l>

List next window of lines.

=item l min+incr

List C<incr+1> lines starting at C<min>.

=item l min-max

List lines C<min> through C<max>.  C<l -> is synonymous to C<->.

=item l line

List a single line.

=item l subname

List first window of lines from subroutine.  I<subname> may
be a variable that contains a code reference.

=item -
X<debugger command, ->

List previous window of lines.

=item v [line]
X<debugger command, v>

View a few lines of code around the current line.

=item .
X<debugger command, .>

Return the internal debugger pointer to the line last
executed, and print out that line.

=item f filename
X<debugger command, f>

Switch to viewing a different file or C<eval> statement.  If I<filename>
is not a full pathname found in the values of %INC, it is considered
a regex.

C<eval>ed strings (when accessible) are considered to be filenames:
C<f (eval 7)> and C<f eval 7\b> access the body of the 7th C<eval>ed string
(in the order of execution).  The bodies of the currently executed C<eval>
and of C<eval>ed strings that define subroutines are saved and thus
accessible.

=item /pattern/

Search forwards for pattern (a Perl regex); final / is optional.
The search is case-insensitive by default.

=item ?pattern?

Search backwards for pattern; final ? is optional.
The search is case-insensitive by default.

=item L [abw]
X<debugger command, L>

List (default all) actions, breakpoints and watch expressions

=item S [[!]regex]
X<debugger command, S>

List subroutine names [not] matching the regex.

=item t [n]
X<debugger command, t>

Toggle trace mode (see also the C<AutoTrace> option).
Optional argument is the maximum number of levels to trace below
the current one; anything deeper than that will be silent.

=item t [n] expr
X<debugger command, t>

Trace through execution of C<expr>.
Optional first argument is the maximum number of levels to trace below
the current one; anything deeper than that will be silent.
See L<perldebguts/"Frame Listing Output Examples"> for examples.

=item b
X<breakpoint>
X<debugger command, b>

Sets breakpoint on current line

=item b [line] [condition]
X<breakpoint>
X<debugger command, b>

Set a breakpoint before the given line.  If a condition
is specified, it's evaluated each time the statement is reached: a
breakpoint is taken only if the condition is true.  Breakpoints may
only be set on lines that begin an executable statement.  Conditions
don't use C<if>:

    b 237 $x > 30
    b 237 ++$count237 < 11
    b 33 /pattern/i

If the line number is C<.>, sets a breakpoint on the current line:

    b . $n > 100

=item b [file]:[line] [condition]
X<breakpoint>
X<debugger command, b>

Set a breakpoint before the given line in a (possibly different) file.  If a
condition is specified, it's evaluated each time the statement is reached: a
breakpoint is taken only if the condition is true.  Breakpoints may only be set
on lines that begin an executable statement.  Conditions don't use C<if>:

    b lib/MyModule.pm:237 $x > 30
    b /usr/lib/perl5/site_perl/CGI.pm:100 ++$count100 < 11

=item b subname [condition]
X<breakpoint>
X<debugger command, b>

Set a breakpoint before the first line of the named subroutine.  I<subname> may
be a variable containing a code reference (in this case I<condition>
is not supported).

=item b postpone subname [condition]
X<breakpoint>
X<debugger command, b>

Set a breakpoint at first line of subroutine after it is compiled.

=item b load filename
X<breakpoint>
X<debugger command, b>

Set a breakpoint before the first executed line of the I<filename>,
which should be a full pathname found amongst the %INC values.

=item b compile subname
X<breakpoint>
X<debugger command, b>

Sets a breakpoint before the first statement executed after the specified
subroutine is compiled.

=item B line
X<breakpoint>
X<debugger command, B>

Delete a breakpoint from the specified I<line>.

=item B *
X<breakpoint>
X<debugger command, B>

Delete all installed breakpoints.

=item disable [file]:[line]
X<breakpoint>
X<debugger command, disable>
X<disable>

Disable the breakpoint so it won't stop the execution of the program. 
Breakpoints are enabled by default and can be re-enabled using the C<enable>
command.

=item disable [line]
X<breakpoint>
X<debugger command, disable>
X<disable>

Disable the breakpoint so it won't stop the execution of the program. 
Breakpoints are enabled by default and can be re-enabled using the C<enable>
command.

This is done for a breakpoint in the current file.

=item enable [file]:[line]
X<breakpoint>
X<debugger command, disable>
X<disable>

Enable the breakpoint so it will stop the execution of the program. 

=item enable [line]
X<breakpoint>
X<debugger command, disable>
X<disable>

Enable the breakpoint so it will stop the execution of the program. 

This is done for a breakpoint in the current file.

=item a [line] command
X<debugger command, a>

Set an action to be done before the line is executed.  If I<line> is
omitted, set an action on the line about to be executed.
The sequence of steps taken by the debugger is

  1. check for a breakpoint at this line
  2. print the line if necessary (tracing)
  3. do any actions associated with that line
  4. prompt user if at a breakpoint or in single-step
  5. evaluate line

For example, this will print out $foo every time line
53 is passed:

    a 53 print "DB FOUND $foo\n"

=item A line
X<debugger command, A>

Delete an action from the specified line.

=item A *
X<debugger command, A>

Delete all installed actions.

=item w expr
X<debugger command, w>

Add a global watch-expression. Whenever a watched global changes the
debugger will stop and display the old and new values.

=item W expr
X<debugger command, W>

Delete watch-expression

=item W *
X<debugger command, W>

Delete all watch-expressions.

=item o
X<debugger command, o>

Display all options.

=item o booloption ...
X<debugger command, o>

Set each listed Boolean option to the value C<1>.

=item o anyoption? ...
X<debugger command, o>

Print out the value of one or more options.

=item o option=value ...
X<debugger command, o>

Set the value of one or more options.  If the value has internal
whitespace, it should be quoted.  For example, you could set C<o
pager="less -MQeicsNfr"> to call B<less> with those specific options.
You may use either single or double quotes, but if you do, you must
escape any embedded instances of same sort of quote you began with,
as well as any escaping any escapes that immediately precede that
quote but which are not meant to escape the quote itself.  In other
words, you follow single-quoting rules irrespective of the quote;
eg: C<o option='this isn\'t bad'> or C<o option="She said, \"Isn't
it?\"">.

For historical reasons, the C<=value> is optional, but defaults to
1 only where it is safe to do so--that is, mostly for Boolean
options.  It is always better to assign a specific value using C<=>.
The C<option> can be abbreviated, but for clarity probably should
not be.  Several options can be set together.  See L<"Configurable Options">
for a list of these.

=item < ?
X<< debugger command, < >>

List out all pre-prompt Perl command actions.

=item < [ command ]
X<< debugger command, < >>

Set an action (Perl command) to happen before every debugger prompt.
A multi-line command may be entered by backslashing the newlines.

=item < *
X<< debugger command, < >>

Delete all pre-prompt Perl command actions.

=item << command
X<< debugger command, << >>

Add an action (Perl command) to happen before every debugger prompt.
A multi-line command may be entered by backwhacking the newlines.

=item > ?
X<< debugger command, > >>

List out post-prompt Perl command actions.

=item > command
X<< debugger command, > >>

Set an action (Perl command) to happen after the prompt when you've
just given a command to return to executing the script.  A multi-line
command may be entered by backslashing the newlines (we bet you
couldn't have guessed this by now).

=item > *
X<< debugger command, > >>

Delete all post-prompt Perl command actions.

=item >> command
X<<< debugger command, >> >>>

Adds an action (Perl command) to happen after the prompt when you've
just given a command to return to executing the script.  A multi-line
command may be entered by backslashing the newlines.

=item { ?
X<debugger command, {>

List out pre-prompt debugger commands.

=item { [ command ]

Set an action (debugger command) to happen before every debugger prompt.
A multi-line command may be entered in the customary fashion.

Because this command is in some senses new, a warning is issued if
you appear to have accidentally entered a block instead.  If that's
what you mean to do, write it as with C<;{ ... }> or even
C<do { ... }>.

=item { *
X<debugger command, {>

Delete all pre-prompt debugger commands.

=item {{ command
X<debugger command, {{>

Add an action (debugger command) to happen before every debugger prompt.
A multi-line command may be entered, if you can guess how: see above.

=item ! number
X<debugger command, !>

Redo a previous command (defaults to the previous command).

=item ! -number
X<debugger command, !>

Redo number'th previous command.

=item ! pattern
X<debugger command, !>

Redo last command that started with pattern.
See C<o recallCommand>, too.

=item !! cmd
X<debugger command, !!>

Run cmd in a subprocess (reads from DB::IN, writes to DB::OUT) See
C<o shellBang>, also.  Note that the user's current shell (well,
their C<$ENV{SHELL}> variable) will be used, which can interfere
with proper interpretation of exit status or signal and coredump
information.

=item source file
X<debugger command, source>

Read and execute debugger commands from I<file>.
I<file> may itself contain C<source> commands.

=item H -number
X<debugger command, H>

Display last n commands.  Only commands longer than one character are
listed.  If I<number> is omitted, list them all.

=item q or ^D
X<debugger command, q>
X<debugger command, ^D>

Quit.  ("quit" doesn't work for this, unless you've made an alias)
This is the only supported way to exit the debugger, though typing
C<exit> twice might work.

Set the C<inhibit_exit> option to 0 if you want to be able to step
off the end the script.  You may also need to set $finished to 0
if you want to step through global destruction.

=item R
X<debugger command, R>

Restart the debugger by C<exec()>ing a new session.  We try to maintain
your history across this, but internal settings and command-line options
may be lost.

The following setting are currently preserved: history, breakpoints,
actions, debugger options, and the Perl command-line
options B<-w>, B<-I>, and B<-e>.

=item |dbcmd
X<debugger command, |>

Run the debugger command, piping DB::OUT into your current pager.

=item ||dbcmd
X<debugger command, ||>

Same as C<|dbcmd> but DB::OUT is temporarily C<select>ed as well.

=item = [alias value]
X<debugger command, =>

Define a command alias, like

    = quit q

or list current aliases.

=item command

Execute command as a Perl statement.  A trailing semicolon will be
supplied.  If the Perl statement would otherwise be confused for a
Perl debugger, use a leading semicolon, too.

=item m expr
X<debugger command, m>

List which methods may be called on the result of the evaluated
expression.  The expression may evaluated to a reference to a
blessed object, or to a package name.

=item M
X<debugger command, M>

Display all loaded modules and their versions.

=item man [manpage]
X<debugger command, man>

Despite its name, this calls your system's default documentation
viewer on the given page, or on the viewer itself if I<manpage> is
omitted.  If that viewer is B<man>, the current C<Config> information
is used to invoke B<man> using the proper MANPATH or S<B<-M>
I<manpath>> option.  Failed lookups of the form C<XXX> that match
known manpages of the form I<perlXXX> will be retried.  This lets
you type C<man debug> or C<man op> from the debugger.

On systems traditionally bereft of a usable B<man> command, the
debugger invokes B<perldoc>.  Occasionally this determination is
incorrect due to recalcitrant vendors or rather more felicitously,
to enterprising users.  If you fall into either category, just
manually set the $DB::doccmd variable to whatever viewer to view
the Perl documentation on your system.  This may be set in an rc
file, or through direct assignment.  We're still waiting for a
working example of something along the lines of:

    $DB::doccmd = 'netscape -remote http://something.here/';

=back

=head2 Configurable Options

The debugger has numerous options settable using the C<o> command,
either interactively or from the environment or an rc file.
(./.perldb or ~/.perldb under Unix.)


=over 12

=item C<recallCommand>, C<ShellBang>
X<debugger option, recallCommand>
X<debugger option, ShellBang>

The characters used to recall a command or spawn a shell.  By
default, both are set to C<!>, which is unfortunate.

=item C<pager>
X<debugger option, pager>

Program to use for output of pager-piped commands (those beginning
with a C<|> character.)  By default, C<$ENV{PAGER}> will be used.
Because the debugger uses your current terminal characteristics
for bold and underlining, if the chosen pager does not pass escape
sequences through unchanged, the output of some debugger commands
will not be readable when sent through the pager.

=item C<tkRunning>
X<debugger option, tkRunning>

Run Tk while prompting (with ReadLine).

=item C<signalLevel>, C<warnLevel>, C<dieLevel>
X<debugger option, signalLevel> X<debugger option, warnLevel>
X<debugger option, dieLevel>

Level of verbosity.  By default, the debugger leaves your exceptions
and warnings alone, because altering them can break correctly running
programs.  It will attempt to print a message when uncaught INT, BUS, or
SEGV signals arrive.  (But see the mention of signals in L</BUGS> below.)

To disable this default safe mode, set these values to something higher
than 0.  At a level of 1, you get backtraces upon receiving any kind
of warning (this is often annoying) or exception (this is
often valuable).  Unfortunately, the debugger cannot discern fatal
exceptions from non-fatal ones.  If C<dieLevel> is even 1, then your
non-fatal exceptions are also traced and unceremoniously altered if they
came from C<eval'ed> strings or from any kind of C<eval> within modules
you're attempting to load.  If C<dieLevel> is 2, the debugger doesn't
care where they came from:  It usurps your exception handler and prints
out a trace, then modifies all exceptions with its own embellishments.
This may perhaps be useful for some tracing purposes, but tends to hopelessly
destroy any program that takes its exception handling seriously.

=item C<AutoTrace>
X<debugger option, AutoTrace>

Trace mode (similar to C<t> command, but can be put into
C<PERLDB_OPTS>).

=item C<LineInfo>
X<debugger option, LineInfo>

File or pipe to print line number info to.  If it is a pipe (say,
C<|visual_perl_db>), then a short message is used.  This is the
mechanism used to interact with a slave editor or visual debugger,
such as the special C<vi> or C<emacs> hooks, or the C<ddd> graphical
debugger.

=item C<inhibit_exit>
X<debugger option, inhibit_exit>

If 0, allows I<stepping off> the end of the script.

=item C<PrintRet>
X<debugger option, PrintRet>

Print return value after C<r> command if set (default).

=item C<ornaments>
X<debugger option, ornaments>

Affects screen appearance of the command line (see L<Term::ReadLine>).
There is currently no way to disable these, which can render
some output illegible on some displays, or with some pagers.
This is considered a bug.

=item C<frame>
X<debugger option, frame>

Affects the printing of messages upon entry and exit from subroutines.  If
C<frame & 2> is false, messages are printed on entry only. (Printing
on exit might be useful if interspersed with other messages.)

If C<frame & 4>, arguments to functions are printed, plus context
and caller info.  If C<frame & 8>, overloaded C<stringify> and
C<tie>d C<FETCH> is enabled on the printed arguments.  If C<frame
& 16>, the return value from the subroutine is printed.

The length at which the argument list is truncated is governed by the
next option:

=item C<maxTraceLen>
X<debugger option, maxTraceLen>

Length to truncate the argument list when the C<frame> option's
bit 4 is set.

=item C<windowSize>
X<debugger option, windowSize>

Change the size of code list window (default is 10 lines).

=back

The following options affect what happens with C<V>, C<X>, and C<x>
commands:

=over 12

=item C<arrayDepth>, C<hashDepth>
X<debugger option, arrayDepth> X<debugger option, hashDepth>

Print only first N elements ('' for all).

=item C<dumpDepth>
X<debugger option, dumpDepth>

Limit recursion depth to N levels when dumping structures.
Negative values are interpreted as infinity.  Default: infinity.

=item C<compactDump>, C<veryCompact>
X<debugger option, compactDump> X<debugger option, veryCompact>

Change the style of array and hash output.  If C<compactDump>, short array
may be printed on one line.

=item C<globPrint>
X<debugger option, globPrint>

Whether to print contents of globs.

=item C<DumpDBFiles>
X<debugger option, DumpDBFiles>

Dump arrays holding debugged files.

=item C<DumpPackages>
X<debugger option, DumpPackages>

Dump symbol tables of packages.

=item C<DumpReused>
X<debugger option, DumpReused>

Dump contents of "reused" addresses.

=item C<quote>, C<HighBit>, C<undefPrint>
X<debugger option, quote> X<debugger option, HighBit>
X<debugger option, undefPrint>

Change the style of string dump.  The default value for C<quote>
is C<auto>; one can enable double-quotish or single-quotish format
by setting it to C<"> or C<'>, respectively.  By default, characters
with their high bit set are printed verbatim.

=item C<UsageOnly>
X<debugger option, UsageOnly>

Rudimentary per-package memory usage dump.  Calculates total
size of strings found in variables in the package.  This does not
include lexicals in a module's file scope, or lost in closures.

=item C<HistFile>
X<debugger option, history, HistFile>

The path of the file from which the history (assuming a usable
Term::ReadLine backend) will be read on the debugger's startup, and to which
it will be saved on shutdown (for persistence across sessions). Similar in
concept to Bash's C<.bash_history> file.

=item C<HistSize>
X<debugger option, history, HistSize>

The count of the saved lines in the history (assuming C<HistFile> above).

=back

After the rc file is read, the debugger reads the C<$ENV{PERLDB_OPTS}>
environment variable and parses this as the remainder of a "O ..."
line as one might enter at the debugger prompt.  You may place the
initialization options C<TTY>, C<noTTY>, C<ReadLine>, and C<NonStop>
there.

If your rc file contains:

  parse_options("NonStop=1 LineInfo=db.out AutoTrace");

then your script will run without human intervention, putting trace
information into the file I<db.out>.  (If you interrupt it, you'd
better reset C<LineInfo> to F</dev/tty> if you expect to see anything.)

=over 12

=item C<TTY>
X<debugger option, TTY>

The TTY to use for debugging I/O.

=item C<noTTY>
X<debugger option, noTTY>

If set, the debugger goes into C<NonStop> mode and will not connect to a TTY.  If
interrupted (or if control goes to the debugger via explicit setting of
$DB::signal or $DB::single from the Perl script), it connects to a TTY
specified in the C<TTY> option at startup, or to a tty found at
runtime using the C<Term::Rendezvous> module of your choice.

This module should implement a method named C<new> that returns an object
with two methods: C<IN> and C<OUT>.  These should return filehandles to use
for debugging input and output correspondingly.  The C<new> method should
inspect an argument containing the value of C<$ENV{PERLDB_NOTTY}> at
startup, or C<"$ENV{HOME}/.perldbtty$$"> otherwise.  This file is not
inspected for proper ownership, so security hazards are theoretically
possible.

=item C<ReadLine>
X<debugger option, ReadLine>

If false, readline support in the debugger is disabled in order
to debug applications that themselves use ReadLine.

=item C<NonStop>
X<debugger option, NonStop>

If set, the debugger goes into non-interactive mode until interrupted, or
programmatically by setting $DB::signal or $DB::single.

=back

Here's an example of using the C<$ENV{PERLDB_OPTS}> variable:

    $ PERLDB_OPTS="NonStop frame=2" perl -d myprogram

That will run the script B<myprogram> without human intervention,
printing out the call tree with entry and exit points.  Note that
C<NonStop=1 frame=2> is equivalent to C<N f=2>, and that originally,
options could be uniquely abbreviated by the first letter (modulo
the C<Dump*> options).  It is nevertheless recommended that you
always spell them out in full for legibility and future compatibility.

Other examples include

    $ PERLDB_OPTS="NonStop LineInfo=listing frame=2" perl -d myprogram

which runs script non-interactively, printing info on each entry
into a subroutine and each executed line into the file named F<listing>.
(If you interrupt it, you would better reset C<LineInfo> to something
"interactive"!)

Other examples include (using standard shell syntax to show environment
variable settings):

  $ ( PERLDB_OPTS="NonStop frame=1 AutoTrace LineInfo=tperl.out"
      perl -d myprogram )

which may be useful for debugging a program that uses C<Term::ReadLine>
itself.  Do not forget to detach your shell from the TTY in the window that
corresponds to F</dev/ttyXX>, say, by issuing a command like

  $ sleep 1000000

See L<perldebguts/"Debugger Internals"> for details.

=head2 Debugger Input/Output

=over 8

=item Prompt

The debugger prompt is something like

    DB<8>

or even

    DB<<17>>

where that number is the command number, and which you'd use to
access with the built-in B<csh>-like history mechanism.  For example,
C<!17> would repeat command number 17.  The depth of the angle
brackets indicates the nesting depth of the debugger.  You could
get more than one set of brackets, for example, if you'd already
at a breakpoint and then printed the result of a function call that
itself has a breakpoint, or you step into an expression via C<s/n/t
expression> command.

=item Multiline commands

If you want to enter a multi-line command, such as a subroutine
definition with several statements or a format, escape the newline
that would normally end the debugger command with a backslash.
Here's an example:

      DB<1> for (1..4) {         \
      cont:     print "ok\n";   \
      cont: }
      ok
      ok
      ok
      ok

Note that this business of escaping a newline is specific to interactive
commands typed into the debugger.

=item Stack backtrace
X<backtrace> X<stack, backtrace>

Here's an example of what a stack backtrace via C<T> command might
look like:

 $ = main::infested called from file 'Ambulation.pm' line 10
 @@ = Ambulation::legs(1, 2, 3, 4) called from file 'camel_flea'
                                                          line 7
 $ = main::pests('bactrian', 4) called from file 'camel_flea'
                                                          line 4

The left-hand character up there indicates the context in which the
function was called, with C<$> and C<@@> meaning scalar or list
contexts respectively, and C<.> meaning void context (which is
actually a sort of scalar context).  The display above says
that you were in the function C<main::infested> when you ran the
stack dump, and that it was called in scalar context from line
10 of the file I<Ambulation.pm>, but without any arguments at all,
meaning it was called as C<&infested>.  The next stack frame shows
that the function C<Ambulation::legs> was called in list context
from the I<camel_flea> file with four arguments.  The last stack
frame shows that C<main::pests> was called in scalar context,
also from I<camel_flea>, but from line 4.

If you execute the C<T> command from inside an active C<use>
statement, the backtrace will contain both a C<require> frame and
an C<eval> frame.

=item Line Listing Format

This shows the sorts of output the C<l> command can produce:

   DB<<13>> l
 101:        @@i{@@i} = ();
 102:b       @@isa{@@i,$pack} = ()
 103             if(exists $i{$prevpack} || exists $isa{$pack});
 104     }
 105
 106     next
 107==>      if(exists $isa{$pack});
 108
 109:a   if ($extra-- > 0) {
 110:        %isa = ($pack,1);

Breakable lines are marked with C<:>.  Lines with breakpoints are
marked by C<b> and those with actions by C<a>.  The line that's
about to be executed is marked by C<< ==> >>.

Please be aware that code in debugger listings may not look the same
as your original source code.  Line directives and external source
filters can alter the code before Perl sees it, causing code to move
from its original positions or take on entirely different forms.

=item Frame listing

When the C<frame> option is set, the debugger would print entered (and
optionally exited) subroutines in different styles.  See L<perldebguts>
for incredibly long examples of these.

=back

=head2 Debugging Compile-Time Statements

If you have compile-time executable statements (such as code within
BEGIN, UNITCHECK and CHECK blocks or C<use> statements), these will
I<not> be stopped by debugger, although C<require>s and INIT blocks
will, and compile-time statements can be traced with the C<AutoTrace>
option set in C<PERLDB_OPTS>).  From your own Perl code, however, you
can transfer control back to the debugger using the following
statement, which is harmless if the debugger is not running:

    $DB::single = 1;

If you set C<$DB::single> to 2, it's equivalent to having
just typed the C<n> command, whereas a value of 1 means the C<s>
command.  The C<$DB::trace>  variable should be set to 1 to simulate
having typed the C<t> command.

Another way to debug compile-time code is to start the debugger, set a
breakpoint on the I<load> of some module:

    DB<7> b load f:/perllib/lib/Carp.pm
  Will stop on load of 'f:/perllib/lib/Carp.pm'.

and then restart the debugger using the C<R> command (if possible).  One can use C<b
compile subname> for the same purpose.

=head2 Debugger Customization

The debugger probably contains enough configuration hooks that you
won't ever have to modify it yourself.  You may change the behaviour
of the debugger from within the debugger using its C<o> command, from
the command line via the C<PERLDB_OPTS> environment variable, and
from customization files.

You can do some customization by setting up a F<.perldb> file, which
contains initialization code.  For instance, you could make aliases
like these (the last one is one people expect to be there):

    $DB::alias{'len'}  = 's/^len(.*)/p length($1)/';
    $DB::alias{'stop'} = 's/^stop (at|in)/b/';
    $DB::alias{'ps'}   = 's/^ps\b/p scalar /';
    $DB::alias{'quit'} = 's/^quit(\s*)/exit/';

You can change options from F<.perldb> by using calls like this one;

    parse_options("NonStop=1 LineInfo=db.out AutoTrace=1 frame=2");

The code is executed in the package C<DB>.  Note that F<.perldb> is
processed before processing C<PERLDB_OPTS>.  If F<.perldb> defines the
subroutine C<afterinit>, that function is called after debugger
initialization ends.  F<.perldb> may be contained in the current
directory, or in the home directory.  Because this file is sourced
in by Perl and may contain arbitrary commands, for security reasons,
it must be owned by the superuser or the current user, and writable
by no one but its owner.

You can mock TTY input to debugger by adding arbitrary commands to
@@DB::typeahead. For example, your F<.perldb> file might contain:

    sub afterinit { push @@DB::typeahead, "b 4", "b 6"; }

Which would attempt to set breakpoints on lines 4 and 6 immediately
after debugger initialization. Note that @@DB::typeahead is not a supported
interface and is subject to change in future releases.

If you want to modify the debugger, copy F<perl5db.pl> from the
Perl library to another name and hack it to your heart's content.
You'll then want to set your C<PERL5DB> environment variable to say
something like this:

    BEGIN { require "myperl5db.pl" }

As a last resort, you could also use C<PERL5DB> to customize the debugger
by directly setting internal variables or calling debugger functions.

Note that any variables and functions that are not documented in
this document (or in L<perldebguts>) are considered for internal
use only, and as such are subject to change without notice.

=head2 Readline Support / History in the Debugger

As shipped, the only command-line history supplied is a simplistic one
that checks for leading exclamation points.  However, if you install
the Term::ReadKey and Term::ReadLine modules from CPAN (such as
Term::ReadLine::Gnu, Term::ReadLine::Perl, ...) you will
have full editing capabilities much like those GNU I<readline>(3) provides.
Look for these in the F<modules/by-module/Term> directory on CPAN.
These do not support normal B<vi> command-line editing, however.

A rudimentary command-line completion is also available, including
lexical variables in the current scope if the C<PadWalker> module
is installed.

Without Readline support you may see the symbols "^[[A", "^[[C", "^[[B",
"^[[D"", "^H", ... when using the arrow keys and/or the backspace key.

=head2 Editor Support for Debugging

If you have the GNU's version of B<emacs> installed on your system,
it can interact with the Perl debugger to provide an integrated
software development environment reminiscent of its interactions
with C debuggers.

Recent versions of Emacs come with a
start file for making B<emacs> act like a
syntax-directed editor that understands (some of) Perl's syntax.
See L<perlfaq3>.

Users of B<vi> should also look into B<vim> and B<gvim>, the mousey
and windy version, for coloring of Perl keywords.

Note that only perl can truly parse Perl, so all such CASE tools
fall somewhat short of the mark, especially if you don't program
your Perl as a C programmer might.

=head2 The Perl Profiler
X<profile> X<profiling> X<profiler>

If you wish to supply an alternative debugger for Perl to run,
invoke your script with a colon and a package argument given to the
B<-d> flag.  Perl's alternative debuggers include a Perl profiler,
L<Devel::NYTProf>, which is available separately as a CPAN
distribution.  To profile your Perl program in the file F<mycode.pl>,
just type:

    $ perl -d:NYTProf mycode.pl

When the script terminates the profiler will create a database of the
profile information that you can turn into reports using the profiler's
tools. See <perlperf> for details.

=head1 Debugging Regular Expressions
X<regular expression, debugging>
X<regex, debugging> X<regexp, debugging>

C<use re 'debug'> enables you to see the gory details of how the Perl
regular expression engine works. In order to understand this typically
voluminous output, one must not only have some idea about how regular
expression matching works in general, but also know how Perl's regular
expressions are internally compiled into an automaton. These matters
are explored in some detail in
L<perldebguts/"Debugging Regular Expressions">.

=head1 Debugging Memory Usage
X<memory usage>

Perl contains internal support for reporting its own memory usage,
but this is a fairly advanced concept that requires some understanding
of how memory allocation works.
See L<perldebguts/"Debugging Perl Memory Usage"> for the details.

=head1 SEE ALSO

You do have C<use strict> and C<use warnings> enabled, don't you?

L<perldebtut>,
L<perldebguts>,
L<re>,
L<DB>,
L<Devel::NYTProf>,
L<Dumpvalue>,
and
L<perlrun>.

When debugging a script that uses #! and is thus normally found in
$PATH, the -S option causes perl to search $PATH for it, so you don't
have to type the path or C<which $scriptname>.

  $ perl -Sd foo.pl

=head1 BUGS

You cannot get stack frame information or in any fashion debug functions
that were not compiled by Perl, such as those from C or C++ extensions.

If you alter your @@_ arguments in a subroutine (such as with C<shift>
or C<pop>), the stack backtrace will not show the original values.

The debugger does not currently work in conjunction with the B<-W>
command-line switch, because it itself is not free of warnings.

If you're in a slow syscall (like C<wait>ing, C<accept>ing, or C<read>ing
from your keyboard or a socket) and haven't set up your own C<$SIG{INT}>
handler, then you won't be able to CTRL-C your way back to the debugger,
because the debugger's own C<$SIG{INT}> handler doesn't understand that
it needs to raise an exception to longjmp(3) out of slow syscalls.
@


1.16
log
@Fix merge conflicts, remove extra files, match upstream perl-5.20.1

ok deraadt@@ sthen@@ espie@@ miod@@
@
text
@d8 2
a9 1
First of all, have you tried using the B<-w> switch?
d994 5
a998 3
    $ = main::infested called from file 'Ambulation.pm' line 10
    @@ = Ambulation::legs(1, 2, 3, 4) called from file 'camel_flea' line 7
    $ = main::pests('bactrian', 4) called from file 'camel_flea' line 4
d1021 11
a1031 11
    DB<<13>> l
  101:                @@i{@@i} = ();
  102:b               @@isa{@@i,$pack} = ()
  103                     if(exists $i{$prevpack} || exists $isa{$pack});
  104             }
  105
  106             next
  107==>              if(exists $isa{$pack});
  108
  109:a           if ($extra-- > 0) {
  110:                %isa = ($pack,1);
d1203 1
a1203 1
You did try the B<-w> switch, didn't you?
@


1.15
log
@Merge perl-5.18.2 plus local patches, remove old files

OK espie@@ sthen@@ deraadt@@
@
text
@d71 1
a71 1
=item perl -d:Ptkdb program_name
d73 1
a73 1
Debug a given program via the C<Devel::Ptkdb> GUI.
d1145 1
a1145 1
If you have the FSF's version of B<emacs> installed on your system,
a1153 7

A similar setup by Tom Christiansen for interacting with any
vendor-shipped B<vi> and the X11 window system is also available.
This works similarly to the integrated multiwindow support that
B<emacs> provides, where the debugger drives the editor.  At the
time of this writing, however, that tool's eventual location in the
Perl distribution was uncertain.
@


1.14
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@d686 1
a686 1
The characters used to recall command or spawn shell.  By
d844 13
@


1.13
log
@merge in perl 5.12.2 plus local changes
@
text
@d12 1
a12 1
L<perldebtut>, which is a tutorial introduction to the debugger .
d57 1
a57 1
=head2 Calling the debugger
a107 1

d272 1
a272 1
=item t
d276 2
d279 1
a279 1
=item t expr
d283 2
d307 16
d363 36
d446 1
a446 1
Display all options
d647 1
a647 2
Displays all loaded modules and their versions

d711 1
a711 1
SEGV signals arrive.  (But see the mention of signals in L<BUGS> below.)
d933 1
a933 1
=head2 Debugger input/output
d980 3
a982 3
    $ = main::infested called from file `Ambulation.pm' line 10
    @@ = Ambulation::legs(1, 2, 3, 4) called from file `camel_flea' line 7
    $ = main::pests('bactrian', 4) called from file `camel_flea' line 4
d999 1
a999 1
an C<eval>) frame.
d1034 1
a1034 1
=head2 Debugging compile-time statements
d1039 1
a1039 1
will, and compile-time statements can be traced with C<AutoTrace>
d1055 1
a1055 1
  Will stop on load of `f:/perllib/lib/Carp.pm'.
d1064 1
a1064 1
of debugger from within the debugger using its C<o> command, from
d1113 1
a1113 1
=head2 Readline Support / History in the debugger
d1119 1
a1119 1
have full editing capabilities much like GNU I<readline>(3) provides.
d1137 2
a1138 1
Perl comes with a start file for making B<emacs> act like a
d1140 1
a1140 1
Look in the I<emacs> directory of the Perl source distribution.
d1161 2
a1162 2
B<-d> flag.  Perl's alternative debuggers include the Perl profiler,
L<Devel::DProf>, which is included with the standard Perl
d1166 1
a1166 1
    $ perl -d:DProf mycode.pl
d1168 3
a1170 6
When the script terminates the profiler will dump the profile
information to a file called F<tmon.out>.  A tool like B<dprofpp>,
also supplied with the standard Perl distribution, can be used to
interpret the information in that profile.  More powerful profilers,
such as C<Devel::NYTProf> are available from the CPAN:  see L<perlperf>
for details.
d1172 1
a1172 1
=head1 Debugging regular expressions
d1182 1
a1182 1
L<perldebguts/"Debugging regular expressions">.
d1184 1
a1184 1
=head1 Debugging memory usage
d1190 1
a1190 1
See L<perldebguts/"Debugging Perl memory usage"> for the details.
d1200 1
a1200 2
L<Devel::DProf>,
L<dprofpp>,
@


1.12
log
@Merge in perl 5.10.1
@
text
@d1069 3
a1071 3
A rudimentary command-line completion is also available.
Unfortunately, the names of lexical variables are not available for
completion.
d1104 1
a1104 1
If you wish to supply an alternative debugger for Perl to run, just
d1106 2
a1107 2
B<-d> flag.  The most popular alternative debuggers for Perl is the
Perl profiler.  Devel::DProf is included with the standard Perl
d1117 2
a1118 1
such as C<Devel::NYTProf> are available from the CPAN.
@


1.11
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@d375 2
a376 2
Add a global watch-expression.  We hope you know what one of these
is, because they're supposed to be obvious.
d1059 1
a1059 1
=head2 Readline Support
d1063 2
a1064 1
the Term::ReadKey and Term::ReadLine modules from CPAN, you will
d1073 3
d1107 1
a1107 1
Perl profiler.  Devel::DProf is now included with the standard Perl
d1116 2
a1117 1
interpret the information in that profile.
@


1.10
log
@merge in perl 5.8.8
@
text
@d57 24
d83 1
a83 1
The debugger understands the following commands:
d457 1
a457 1
couldn't've guessed this by now).
d665 1
a665 1
came from C<eval'd> strings or from any kind of C<eval> within modules
d983 6
a988 6
BEGIN and CHECK blocks or C<use> statements), these will I<not> be
stopped by debugger, although C<require>s and INIT blocks will, and
compile-time statements can be traced with C<AutoTrace> option set
in C<PERLDB_OPTS>).  From your own Perl code, however, you can
transfer control back to the debugger using the following statement,
which is harmless if the debugger is not running:
@


1.9
log
@sync in-tree perl with 5.8.6
@
text
@d2 1
d23 1
d64 1
d86 1
d96 1
d112 1
d114 1
a114 1
Display all (or some) variables in package (defaulting to C<main>) 
d127 1
d132 1
d143 1
d148 1
d155 1
d163 1
d173 1
d179 1
d201 1
d206 1
d211 1
d217 1
d220 1
a220 1
is not a full pathname found in the values of %INC, it is considered 
d240 1
d245 1
d250 1
d255 1
d261 2
d267 2
d281 2
d289 2
d295 2
d302 2
d309 2
d312 1
a312 1
Delete a breakpoint from the specified I<line>.  
d315 2
d321 1
d339 1
d341 1
a341 1
Delete an action from the specified line.  
d344 1
d349 1
d352 1
a352 1
is, because they're supposed to be obvious.  
d355 1
d360 1
d365 1
d370 1
d375 1
d380 1
d397 1
a397 1
not be.  Several options can be set together.  See L<"Configurable Options"> 
d400 2
a401 1
=item < ? 
d406 1
d409 1
a409 1
A multi-line command may be entered by backslashing the newlines.  
d411 2
a412 1
=item < * 
d417 1
d423 1
d428 1
d433 1
a433 1
couldn't've guessed this by now). 
d435 2
a436 1
=item > * 
d441 1
d448 1
d455 1
a455 1
A multi-line command may be entered in the customary fashion.  
d459 1
a459 1
what you mean to do, write it as with C<;{ ... }> or even 
d462 2
a463 1
=item { * 
d468 1
d474 1
d479 1
d484 1
d490 1
d499 1
d505 1
d511 2
d519 1
a519 1
off the end the script.  You may also need to set $finished to 0 
d523 1
d534 1
d539 1
d544 1
d559 1
d562 1
a562 1
expression.  The expression may evaluated to a reference to a 
d566 1
d572 1
d605 2
d612 1
d622 1
d627 2
d649 1
d655 1
d664 1
d669 1
d674 1
d682 1
d697 1
d703 1
d715 1
d720 1
d726 1
d732 1
d737 1
d742 1
d747 1
d752 2
d761 1
d770 1
a770 1
environment variable and parses this as the remainder of a `O ...'
d786 1
d791 1
d803 1
a803 1
startup, or C<".perldbtty$$"> otherwise.  This file is not 
d808 1
d814 1
d897 1
d1018 1
a1018 1
after debugger initilization. Note that @@DB::typeahead is not a supported
d1067 1
a1067 1
and windy version, for coloring of Perl keywords.  
d1074 1
d1091 2
d1103 1
d1126 1
a1126 1
have to type the path or `which $scriptname`.
@


1.8
log
@merge 5.8.5 into HEAD
remove now-unused files
crank libperl shared library major number
update Makefile.bsd-wrapper
tweak openbsd hints file for arm and m68k
@
text
@d1017 6
@


1.7
log
@Resolve conflicts for perl 5.8.2, remove old files, and add OpenBSD-specific scaffolding
@
text
@d703 1
a703 1
startup, or C<"/tmp/perldbtty$$"> otherwise.  This file is not 
@


1.6
log
@Resolve conflicts, remove old files, merge local changes
@
text
@d42 6
d360 4
a363 1
B<WARNING> If C<command> is missing, all actions are wiped out!
d379 5
a383 2
couldn't've guessed this by now).  B<WARNING> If C<command> is
missing, all actions are wiped out!
a398 1
B<WARNING> If C<command> is missing, all actions are wiped out!
d405 4
d908 9
@


1.5
log
@merge in perl 5.6.1 with our local changes
@
text
@d9 4
d55 4
d61 1
a61 1
Prints out a help message.
d63 1
a63 4
If you supply another debugger command as an argument to the C<h> command,
it prints out the description for just that command.  The special
argument of C<h h> produces a more compact help listing, designed to fit
together on one screen.
d65 3
a67 1
If the output of the C<h> command (or any command, for that matter) scrolls
d71 3
a73 1
    DB> |h
a74 1
You may change the pager which is used via C<O pager=...> command.
d85 1
a85 1
=item x expr
d87 4
a90 3
Evaluates its expression in list context and dumps out the result
in a pretty-printed fashion.  Nested data structures are printed out
recursively, unlike the real C<print> function in Perl.
d96 4
d118 10
d184 1
a184 1
=item w [line]
d186 1
a186 1
List window (a few lines) around the current line.
d208 1
d213 1
d215 1
a215 1
=item L
d217 1
a217 1
List all breakpoints and actions.
d232 4
d238 1
a238 2
Set a breakpoint before the given line.  If I<line> is omitted, set a
breakpoint on the line about to be executed.  If a condition
d268 1
a268 1
=item d [line]
d270 1
a270 2
Delete a breakpoint from the specified I<line>.  If I<line> is omitted, deletes
the breakpoint from the line about to be executed.
d272 1
a272 1
=item D
d293 1
a293 1
=item a [line]
d295 1
a295 2
Delete an action from the specified line.  If I<line> is omitted, delete
the action on the line that is about to be executed.
d297 1
a297 1
=item A
d301 5
d308 1
a308 4
Add a global watch-expression.  We hope you know what one of these
is, because they're supposed to be obvious.  B<WARNING>: It is far
too easy to destroy your watch expressions by accidentally omitting
the I<expr>.
d310 1
a310 1
=item W
d314 5
a318 1
=item O booloption ...
d322 1
a322 1
=item O anyoption? ...
d326 1
a326 1
=item O option=value ...
d329 1
a329 1
whitespace, it should be quoted.  For example, you could set C<O
d336 1
a336 1
eg: C<O option='this isn\'t bad'> or C<O option="She said, \"Isn't
d410 1
a410 1
See C<O recallCommand>, too.
d415 1
a415 1
C<O shellBang>, also.  Note that the user's current shell (well,
d420 5
d478 5
d508 1
a508 1
The debugger has numerous options settable using the C<O> command,
d600 4
d615 5
d717 1
a717 1
    $ PERLDB_OPTS="NonStop frame=2" perl -d myprogram
d868 1
a868 1
of debugger from within the debugger using its C<O> command, from
d964 6
a969 6
C<use re 'debug'> enables you to see the gory details of how the
Perl regular expression engine works.  In order to understand this
typically voluminous output, one must not only have some idea about
about how regular expression matching works in general, but also
know how Perl's regular expressions are internally compiled into
an automaton.  These matters are explored in some detail in
d983 1
d987 1
a987 1
L<Devel::Dprof>,
d999 1
a999 1
or C<pop>, the stack backtrace will not show the original values.
@


1.4
log
@perl-5.6.0 + local changes
@
text
@d85 1
a85 1
L<"Options">.
d311 2
a312 2
not be.  Several options can be set together.  See L<"Options"> for
a list of these.
d345 1
a345 1
command may be entered by slackbashing the newlines.
d468 2
d605 5
a609 3
During startup, options are initialized from C<$ENV{PERLDB_OPTS}>.
You may place the initialization options C<TTY>, C<noTTY>,
C<ReadLine>, and C<NonStop> there.
d773 5
@


1.3
log
@perl5.005_03 (stock)
@
text
@a10 9
"As soon as we started programming, we found to our
surprise that it wasn't as easy to get programs right
as we had thought.  Debugging had to be discovered.
I can remember the exact instant when I realized that
a large part of my life from then on was going to be
spent in finding mistakes in my own programs."

I<  --Maurice Wilkes, 1949>

d19 1
a19 1
    perl -d -e 42
d21 1
a21 1
In Perl, the debugger is not a separate program as it usually is in the
d26 1
a26 1
preloads a Perl library file containing the debugger itself.
d35 2
a36 2
(C<eval>'d) as Perl code in the current package.  (The debugger uses the
DB package for its own state information.)
d38 6
a43 3
Leading white space before a command would cause the debugger to think
it's I<NOT> a debugger command but for Perl, so be careful not to do
that.
d61 2
a62 2
past your screen, either precede the command with a leading pipe symbol so
it's run through your pager, as in
d71 1
a71 1
because this is just Perl's own B<print> function, this means that nested
d81 2
a82 1
recursively, unlike the C<print> function.
d84 2
a85 1
The details of printout are governed by multiple C<O>ptions.
d89 5
a93 5
Display all (or some) variables in package (defaulting to the C<main>
package) using a data pretty-printer (hashes show their keys and values so
you see what's what, control characters are made printable, etc.).  Make
sure you don't put the type specifier (like C<$>) there, just the symbol
names, like this:
d97 1
a97 4
Use C<~pattern> and C<!pattern> for positive and negative regexps.

Nested data structures are printed out in a legible fashion, unlike
the C<print> function.
d99 1
a99 1
The details of printout are governed by multiple C<O>ptions.
d111 1
a111 1
Single step.  Executes until it reaches the beginning of another
d117 1
a117 1
Next.  Executes over subroutine calls, until it reaches the beginning
d122 6
a127 1
=item E<lt>CRE<gt>
d154 2
a155 1
List first window of lines from subroutine.
d167 2
a168 2
Return debugger pointer to the last-executed line and
print it out.
d172 9
a180 3
Switch to viewing a different file or eval statement.  If C<filename>
is not a full filename as found in values of %INC, it is considered as
a regexp.
d184 1
a184 1
Search forwards for pattern; final / is optional.
d194 1
a194 1
=item S [[!]pattern]
d196 1
a196 1
List subroutine names [not] matching pattern.
d200 1
a200 1
Toggle trace mode (see also C<AutoTrace> C<O>ption).
d204 2
a205 34
Trace through execution of expr.  For example:

 $ perl -de 42
 Stack dump during die enabled outside of evals.

 Loading DB routines from perl5db.pl patch level 0.94
 Emacs support available.

 Enter h or `h h' for help.

 main::(-e:1):   0
   DB<1> sub foo { 14 }

   DB<2> sub bar { 3 }

   DB<3> t print foo() * bar()
 main::((eval 172):3):   print foo() + bar();
 main::foo((eval 168):2):
 main::bar((eval 170):2):
 42

or, with the C<O>ption C<frame=2> set,

   DB<4> O f=2
                frame = '2'
   DB<5> t print foo() * bar()
 3:      foo() * bar()
 entering main::foo
  2:     sub foo { 14 };
 exited main::foo
 entering main::bar
  2:     sub bar { 3 };
 exited main::bar
 42
d209 6
a214 5
Set a breakpoint.  If line is omitted, sets a breakpoint on the line
that is about to be executed.  If a condition is specified, it's
evaluated each time the statement is reached and a breakpoint is taken
only if the condition is true.  Breakpoints may be set on only lines
that begin an executable statement.  Conditions don't use B<if>:
d222 3
a224 1
Set a breakpoint at the first line of the named subroutine.
d228 1
a228 1
Set breakpoint at first line of subroutine after it is compiled.
d232 2
a233 2
Set breakpoint at the first executed line of the file.  Filename should
be a full name as found in values of %INC.
d237 2
a238 2
Sets breakpoint at the first statement executed after the subroutine
is compiled.
d242 2
a243 2
Delete a breakpoint at the specified line.  If line is omitted, deletes
the breakpoint on the line that is about to be executed.
d251 2
a252 1
Set an action to be done before the line is executed.
d266 5
d275 1
a275 1
=item W [expr]
d277 4
a280 1
Add a global watch-expression.
d286 150
a435 1
=item O [opt[=val]] [opt"val"] [opt?]...
d437 31
a467 2
Set or query values of options.  val defaults to 1.  opt can
be abbreviated.  Several options can be listed.
d474 1
a474 1
default, these are both set to C<!>.
d478 6
a483 3
Program to use for output of pager-piped commands (those
beginning with a C<|> character.)  By default,
C<$ENV{PAGER}> will be used.
d491 17
a507 8
Level of verbosity.  By default the debugger is in a sane verbose mode,
thus it will print backtraces on all the warnings and die-messages
which are going to be printed out, and will print a message when
interesting uncaught signals arrive.

To disable this behaviour, set these values to 0.  If C<dieLevel> is 2,
then the messages which will be caught by surrounding C<eval> are also
printed.
d517 4
a520 1
C<|visual_perl_db>), then a short, "emacs like" message is used.
d528 1
a528 1
affects printing of return value after C<r> command.
d532 4
a535 1
affects screen appearance of the command line (see L<Term::ReadLine>).
d539 1
a539 1
affects printing messages on entry and exit from subroutines.  If
d541 1
a541 1
on exit may be useful if inter(di)spersed with other messages.)
d543 4
a546 4
If C<frame & 4>, arguments to functions are printed as well as the
context and caller info.  If C<frame & 8>, overloaded C<stringify> and
C<tie>d C<FETCH> are enabled on the printed arguments. If C<frame &
16>, the return value from the subroutine is printed as well.
d553 1
a553 1
length at which the argument list is truncated when C<frame> option's
d569 1
a569 1
Change style of array and hash dump.  If C<compactDump>, short array
d590 4
a593 4
Change style of string dump.  Default value of C<quote> is C<auto>, one
can enable either double-quotish dump, or single-quotish by setting it
to C<"> or C<'>.  By default, characters with high bit set are printed
I<as is>.
d597 3
a599 2
I<very> rudimentally per-package memory usage dump.  Calculates total
size of strings in variables in the package.
d603 2
a604 2
During startup options are initialized from C<$ENV{PERLDB_OPTS}>.
You can put additional initialization options C<TTY>, C<noTTY>,
d607 1
a607 1
Example rc file:
d609 1
a609 1
  &parse_options("NonStop=1 LineInfo=db.out AutoTrace");
d611 3
a613 3
The script will run without human intervention, putting trace information
into the file I<db.out>.  (If you interrupt it, you would better reset
C<LineInfo> to something "interactive"!)
d623 13
a635 11
If set, goes in C<NonStop> mode, and would not connect to a TTY.  If
interrupt (or if control goes to debugger via explicit setting of
$DB::signal or $DB::single from the Perl script), connects to a TTY
specified by the C<TTY> option at startup, or to a TTY found at
runtime using C<Term::Rendezvous> module of your choice.

This module should implement a method C<new> which returns an object
with two methods: C<IN> and C<OUT>, returning two filehandles to use
for debugging input and output correspondingly.  Method C<new> may
inspect an argument which is a value of C<$ENV{PERLDB_NOTTY}> at
startup, or is C<"/tmp/perldbtty$$"> otherwise.
d639 2
a640 2
If false, readline support in debugger is disabled, so you can debug
ReadLine applications.
d644 1
a644 1
If set, debugger goes into noninteractive mode until interrupted, or
d651 1
a651 1
  $ PERLDB_OPTS="N f=2" perl -d myprogram
d653 14
a666 14
will run the script C<myprogram> without human intervention, printing
out the call tree with entry and exit points.  Note that C<N f=2> is
equivalent to C<NonStop=1 frame=2>.  Note also that at the moment when
this documentation was written all the options to the debugger could
be uniquely abbreviated by the first letter (with exception of
C<Dump*> options).

Other examples may include

  $ PERLDB_OPTS="N f A L=listing" perl -d myprogram

- runs script noninteractively, printing info on each entry into a
subroutine and each executed line into the file F<listing>. (If you
interrupt it, you would better reset C<LineInfo> to something
d669 2
d672 2
a673 1
  $ env "PERLDB_OPTS=R=0 TTY=/dev/ttyc" perl -d myprogram
d675 3
a677 3
may be useful for debugging a program which uses C<Term::ReadLine>
itself.  Do not forget detach shell from the TTY in the window which
corresponds to F</dev/ttyc>, say, by issuing a command like
d681 1
a681 114
See L<"Debugger Internals"> below for more details.

=item E<lt> [ command ]

Set an action (Perl command) to happen before every debugger prompt.
A multi-line command may be entered by backslashing the newlines.  If
C<command> is missing, resets the list of actions.

=item E<lt>E<lt> command

Add an action (Perl command) to happen before every debugger prompt.
A multi-line command may be entered by backslashing the newlines.

=item E<gt> command

Set an action (Perl command) to happen after the prompt when you've
just given a command to return to executing the script.  A multi-line
command may be entered by backslashing the newlines.  If C<command> is
missing, resets the list of actions.

=item E<gt>E<gt> command

Adds an action (Perl command) to happen after the prompt when you've
just given a command to return to executing the script.  A multi-line
command may be entered by backslashing the newlines.

=item { [ command ]

Set an action (debugger command) to happen before every debugger prompt.
A multi-line command may be entered by backslashing the newlines.  If
C<command> is missing, resets the list of actions.

=item {{ command

Add an action (debugger command) to happen before every debugger prompt.
A multi-line command may be entered by backslashing the newlines.

=item ! number

Redo a previous command (default previous command).

=item ! -number

Redo number'th-to-last command.

=item ! pattern

Redo last command that started with pattern.
See C<O recallCommand>, too.

=item !! cmd

Run cmd in a subprocess (reads from DB::IN, writes to DB::OUT)
See C<O shellBang> too.

=item H -number

Display last n commands.  Only commands longer than one character are
listed.  If number is omitted, lists them all.

=item q or ^D

Quit.  ("quit" doesn't work for this.)  This is the only supported way
to exit the debugger, though typing C<exit> twice may do it too.

Set an C<O>ption C<inhibit_exit> to 0 if you want to be able to I<step
off> the end the script.  You may also need to set C<$finished> to 0 at
some moment if you want to step through global destruction.

=item R

Restart the debugger by B<exec>ing a new session.  It tries to maintain
your history across this, but internal settings and command line options
may be lost.

Currently the following setting are preserved: history, breakpoints,
actions, debugger C<O>ptions, and the following command line
options: B<-w>, B<-I>, and B<-e>.

=item |dbcmd

Run debugger command, piping DB::OUT to current pager.

=item ||dbcmd

Same as C<|dbcmd> but DB::OUT is temporarily B<select>ed as well.
Often used with commands that would otherwise produce long
output, such as

    |V main

=item = [alias value]

Define a command alias, like

    = quit q

or list current aliases.

=item command

Execute command as a Perl statement.  A missing semicolon will be
supplied.

=item m expr

The expression is evaluated, and the methods which may be applied to
the result are listed.

=item m package

The methods which may be applied to objects in the C<package> are listed.

=back
d697 8
a704 7
where that number is the command number, which you'd use to access with
the builtin B<csh>-like history mechanism, e.g., C<!17> would repeat
command number 17.  The number of angle brackets indicates the depth of
the debugger.  You could get more than one set of brackets, for example, if
you'd already at a breakpoint and then printed out the result of a
function call that itself also has a breakpoint, or you step into an
expression via C<s/n/t expression> command.
d709 2
a710 2
definition with several statements, or a format, you may escape the
newline that would normally end the debugger command with a backslash.
d733 16
a748 14
The left-hand character up there tells whether the function was called
in a scalar or list context (we bet you can tell which is which).  What
that says is that you were in the function C<main::infested> when you ran
the stack dump, and that it was called in a scalar context from line 10
of the file I<Ambulation.pm>, but without any arguments at all, meaning
it was called as C<&infested>.  The next stack frame shows that the
function C<Ambulation::legs> was called in a list context from the
I<camel_flea> file with four arguments.  The last stack frame shows that
C<main::pests> was called in a scalar context, also from I<camel_flea>,
but from line 4.

Note that if you execute C<T> command from inside an active C<use>
statement, the backtrace will contain both C<require>
frame and an C<eval>) frame.
d750 1
a750 1
=item Listing
d752 1
a752 1
Listing given via different flavors of C<l> command looks like this:
d766 3
a768 3
Note that the breakable lines are marked with C<:>, lines with
breakpoints are marked by C<b>, with actions by C<a>, and the
next executed line is marked by C<==E<gt>>.
d772 3
a774 145
When C<frame> option is set, debugger would print entered (and
optionally exited) subroutines in different styles.

What follows is the start of the listing of

  env "PERLDB_OPTS=f=n N" perl -d -V

for different values of C<n>:

=over 4

=item 1

  entering main::BEGIN
   entering Config::BEGIN
    Package lib/Exporter.pm.
    Package lib/Carp.pm.
   Package lib/Config.pm.
   entering Config::TIEHASH
   entering Exporter::import
    entering Exporter::export
  entering Config::myconfig
   entering Config::FETCH
   entering Config::FETCH
   entering Config::FETCH
   entering Config::FETCH

=item 2

  entering main::BEGIN
   entering Config::BEGIN
    Package lib/Exporter.pm.
    Package lib/Carp.pm.
   exited Config::BEGIN
   Package lib/Config.pm.
   entering Config::TIEHASH
   exited Config::TIEHASH
   entering Exporter::import
    entering Exporter::export
    exited Exporter::export
   exited Exporter::import
  exited main::BEGIN
  entering Config::myconfig
   entering Config::FETCH
   exited Config::FETCH
   entering Config::FETCH
   exited Config::FETCH
   entering Config::FETCH

=item 4

  in  $=main::BEGIN() from /dev/nul:0
   in  $=Config::BEGIN() from lib/Config.pm:2
    Package lib/Exporter.pm.
    Package lib/Carp.pm.
   Package lib/Config.pm.
   in  $=Config::TIEHASH('Config') from lib/Config.pm:644
   in  $=Exporter::import('Config', 'myconfig', 'config_vars') from /dev/nul:0
    in  $=Exporter::export('Config', 'main', 'myconfig', 'config_vars') from li
  in  @@=Config::myconfig() from /dev/nul:0
   in  $=Config::FETCH(ref(Config), 'package') from lib/Config.pm:574
   in  $=Config::FETCH(ref(Config), 'baserev') from lib/Config.pm:574
   in  $=Config::FETCH(ref(Config), 'PATCHLEVEL') from lib/Config.pm:574
   in  $=Config::FETCH(ref(Config), 'SUBVERSION') from lib/Config.pm:574
   in  $=Config::FETCH(ref(Config), 'osname') from lib/Config.pm:574
   in  $=Config::FETCH(ref(Config), 'osvers') from lib/Config.pm:574

=item 6

  in  $=main::BEGIN() from /dev/nul:0
   in  $=Config::BEGIN() from lib/Config.pm:2
    Package lib/Exporter.pm.
    Package lib/Carp.pm.
   out $=Config::BEGIN() from lib/Config.pm:0
   Package lib/Config.pm.
   in  $=Config::TIEHASH('Config') from lib/Config.pm:644
   out $=Config::TIEHASH('Config') from lib/Config.pm:644
   in  $=Exporter::import('Config', 'myconfig', 'config_vars') from /dev/nul:0
    in  $=Exporter::export('Config', 'main', 'myconfig', 'config_vars') from lib/
    out $=Exporter::export('Config', 'main', 'myconfig', 'config_vars') from lib/
   out $=Exporter::import('Config', 'myconfig', 'config_vars') from /dev/nul:0
  out $=main::BEGIN() from /dev/nul:0
  in  @@=Config::myconfig() from /dev/nul:0
   in  $=Config::FETCH(ref(Config), 'package') from lib/Config.pm:574
   out $=Config::FETCH(ref(Config), 'package') from lib/Config.pm:574
   in  $=Config::FETCH(ref(Config), 'baserev') from lib/Config.pm:574
   out $=Config::FETCH(ref(Config), 'baserev') from lib/Config.pm:574
   in  $=Config::FETCH(ref(Config), 'PATCHLEVEL') from lib/Config.pm:574
   out $=Config::FETCH(ref(Config), 'PATCHLEVEL') from lib/Config.pm:574
   in  $=Config::FETCH(ref(Config), 'SUBVERSION') from lib/Config.pm:574

=item 14

  in  $=main::BEGIN() from /dev/nul:0
   in  $=Config::BEGIN() from lib/Config.pm:2
    Package lib/Exporter.pm.
    Package lib/Carp.pm.
   out $=Config::BEGIN() from lib/Config.pm:0
   Package lib/Config.pm.
   in  $=Config::TIEHASH('Config') from lib/Config.pm:644
   out $=Config::TIEHASH('Config') from lib/Config.pm:644
   in  $=Exporter::import('Config', 'myconfig', 'config_vars') from /dev/nul:0
    in  $=Exporter::export('Config', 'main', 'myconfig', 'config_vars') from lib/E
    out $=Exporter::export('Config', 'main', 'myconfig', 'config_vars') from lib/E
   out $=Exporter::import('Config', 'myconfig', 'config_vars') from /dev/nul:0
  out $=main::BEGIN() from /dev/nul:0
  in  @@=Config::myconfig() from /dev/nul:0
   in  $=Config::FETCH('Config=HASH(0x1aa444)', 'package') from lib/Config.pm:574
   out $=Config::FETCH('Config=HASH(0x1aa444)', 'package') from lib/Config.pm:574
   in  $=Config::FETCH('Config=HASH(0x1aa444)', 'baserev') from lib/Config.pm:574
   out $=Config::FETCH('Config=HASH(0x1aa444)', 'baserev') from lib/Config.pm:574

=item 30

  in  $=CODE(0x15eca4)() from /dev/null:0
   in  $=CODE(0x182528)() from lib/Config.pm:2
    Package lib/Exporter.pm.
   out $=CODE(0x182528)() from lib/Config.pm:0
   scalar context return from CODE(0x182528): undef
   Package lib/Config.pm.
   in  $=Config::TIEHASH('Config') from lib/Config.pm:628
   out $=Config::TIEHASH('Config') from lib/Config.pm:628
   scalar context return from Config::TIEHASH:   empty hash
   in  $=Exporter::import('Config', 'myconfig', 'config_vars') from /dev/null:0
    in  $=Exporter::export('Config', 'main', 'myconfig', 'config_vars') from lib/Exporter.pm:171
    out $=Exporter::export('Config', 'main', 'myconfig', 'config_vars') from lib/Exporter.pm:171
    scalar context return from Exporter::export: ''
   out $=Exporter::import('Config', 'myconfig', 'config_vars') from /dev/null:0
   scalar context return from Exporter::import: ''


=back

In all the cases indentation of lines shows the call tree, if bit 2 of
C<frame> is set, then a line is printed on exit from a subroutine as
well, if bit 4 is set, then the arguments are printed as well as the
caller info, if bit 8 is set, the arguments are printed even if they
are tied or references, if bit 16 is set, the return value is printed
as well.

When a package is compiled, a line like this

    Package lib/Carp.pm.

is printed with proper indentation.
d780 5
a784 5
If you have any compile-time executable statements (code within a BEGIN
block or a C<use> statement), these will C<NOT> be stopped by debugger,
although C<require>s will (and compile-time statements can be traced
with C<AutoTrace> option set in C<PERLDB_OPTS>).  From your own Perl
code, however, you can
d790 1
a790 1
If you set C<$DB::single> to the value 2, it's equivalent to having
d795 2
a796 2
Another way to debug compile-time code is to start debugger, set a
breakpoint on I<load> of some module thusly
d801 1
a801 1
and restart debugger by C<R> command (if possible).  One can use C<b
d806 5
a810 4
Most probably you do not want to modify the debugger, it contains enough
hooks to satisfy most needs.  You may change the behaviour of debugger
from the debugger itself, using C<O>ptions, from the command line via
C<PERLDB_OPTS> environment variable, and from I<customization files>.
d812 1
a812 1
You can do some customization by setting up a F<.perldb> file which
d819 1
a819 1
    $DB::alias{'quit'} = 's/^quit(\s*)/exit\$/';
d821 1
a821 1
One changes options from F<.perldb> file via calls like this one;
d825 1
a825 1
(the code is executed in the package C<DB>).  Note that F<.perldb> is
d827 1
a827 1
subroutine C<afterinit>, it is called after all the debugger
d829 9
a837 1
directory, or in the C<LOGDIR>/C<HOME> directory.
d839 1
a839 3
If you want to modify the debugger, copy F<perl5db.pl> from the Perl
library to another name and modify it as necessary.  You'll also want
to set your C<PERL5DB> environment variable to say something like this:
d841 2
a842 1
    BEGIN { require "myperl5db.pl" }
d844 3
a846 2
As the last resort, one can use C<PERL5DB> to customize debugger by
directly setting internal variables or calling debugger functions.
d850 1
a850 1
As shipped, the only command line history supplied is a simplistic one
d855 1
d857 1
a857 1
A rudimentary command line completion is also available.
d863 22
a884 11
If you have GNU B<emacs> installed on your system, it can interact with
the Perl debugger to provide an integrated software development
environment reminiscent of its interactions with C debuggers.

Perl is also delivered with a start file for making B<emacs> act like a
syntax-directed editor that understands (some of) Perl's syntax.  Look in
the I<emacs> directory of the Perl source distribution.

(Historically, a similar setup for interacting with B<vi> and the
X11 window system had also been available, but at the time of this
writing, no debugger support for B<vi> currently exists.)
d889 12
a900 5
invoke your script with a colon and a package argument given to the B<-d>
flag.  One of the most popular alternative debuggers for Perl is
B<DProf>, the Perl profiler.   As of this writing, B<DProf> is not
included with the standard Perl distribution, but it is expected to
be included soon, for certain values of "soon".
d902 1
a902 127
Meanwhile, you can fetch the Devel::Dprof module from CPAN.  Assuming
it's properly installed on your system, to profile your Perl program in
the file F<mycode.pl>, just type:

    perl -d:DProf mycode.pl

When the script terminates the profiler will dump the profile information
to a file called F<tmon.out>.  A tool like B<dprofpp> (also supplied with
the Devel::DProf package) can be used to interpret the information which is
in that profile.

=head2 Debugger support in perl

When you call the B<caller> function (see L<perlfunc/caller>) from the
package DB, Perl sets the array @@DB::args to contain the arguments the
corresponding stack frame was called with.

If perl is run with B<-d> option, the following additional features
are enabled (cf. L<perlvar/$^P>):

=over

=item *

Perl inserts the contents of C<$ENV{PERL5DB}> (or C<BEGIN {require
'perl5db.pl'}> if not present) before the first line of the
application.

=item *

The array C<@@{"_E<lt>$filename"}> is the line-by-line contents of
$filename for all the compiled files.  Same for C<eval>ed strings which
contain subroutines, or which are currently executed.  The C<$filename>
for C<eval>ed strings looks like C<(eval 34)>.

=item *

The hash C<%{"_E<lt>$filename"}> contains breakpoints and action (it is
keyed by line number), and individual entries are settable (as opposed
to the whole hash).  Only true/false is important to Perl, though the
values used by F<perl5db.pl> have the form
C<"$break_condition\0$action">.  Values are magical in numeric context:
they are zeros if the line is not breakable.

Same for evaluated strings which contain subroutines, or which are
currently executed.  The $filename for C<eval>ed strings looks like
C<(eval 34)>.

=item *

The scalar C<${"_E<lt>$filename"}> contains C<"_E<lt>$filename">.  Same for
evaluated strings which contain subroutines, or which are currently
executed.  The $filename for C<eval>ed strings looks like C<(eval
34)>.

=item *

After each C<require>d file is compiled, but before it is executed,
C<DB::postponed(*{"_E<lt>$filename"})> is called (if subroutine
C<DB::postponed> exists).  Here the $filename is the expanded name of
the C<require>d file (as found in values of %INC).

=item *

After each subroutine C<subname> is compiled existence of
C<$DB::postponed{subname}> is checked.  If this key exists,
C<DB::postponed(subname)> is called (if subroutine C<DB::postponed>
exists).

=item *

A hash C<%DB::sub> is maintained, with keys being subroutine names,
values having the form C<filename:startline-endline>.  C<filename> has
the form C<(eval 31)> for subroutines defined inside C<eval>s.

=item *

When execution of the application reaches a place that can have
a breakpoint, a call to C<DB::DB()> is performed if any one of
variables $DB::trace, $DB::single, or $DB::signal is true. (Note that
these variables are not C<local>izable.) This feature is disabled when
the control is inside C<DB::DB()> or functions called from it (unless
C<$^D & (1E<lt>E<lt>30)>).

=item *

When execution of the application reaches a subroutine call, a call
to C<&DB::sub>(I<args>) is performed instead, with C<$DB::sub> being
the name of the called subroutine. (Unless the subroutine is compiled
in the package C<DB>.)

=back

Note that if C<&DB::sub> needs some external data to be setup for it
to work, no subroutine call is possible until this is done.  For the
standard debugger C<$DB::deep> (how many levels of recursion deep into
the debugger you can go before a mandatory break) gives an example of
such a dependency.

The minimal working debugger consists of one line

  sub DB::DB {}

which is quite handy as contents of C<PERL5DB> environment
variable:

  env "PERL5DB=sub DB::DB {}" perl -d your-script

Another (a little bit more useful) minimal debugger can be created
with the only line being

  sub DB::DB {print ++$i; scalar <STDIN>}

This debugger would print the sequential number of encountered
statement, and would wait for your C<CR> to continue.

The following debugger is quite functional:

  {
    package DB;
    sub DB  {}
    sub sub {print ++$i, " $sub\n"; &$sub}
  }

It prints the sequential number of subroutine call and the name of the
called subroutine.  Note that C<&DB::sub> should be compiled into the
package C<DB>.
d904 14
a917 1
=head2 Debugger Internals
d919 1
a919 28
At the start, the debugger reads your rc file (F<./.perldb> or
F<~/.perldb> under Unix), which can set important options.  This file may
define a subroutine C<&afterinit> to be executed after the debugger is
initialized.

After the rc file is read, the debugger reads environment variable
PERLDB_OPTS and parses it as a rest of C<O ...> line in debugger prompt.

It also maintains magical internal variables, such as C<@@DB::dbline>,
C<%DB::dbline>, which are aliases for C<@@{"::_<current_file"}>
C<%{"::_<current_file"}>.  Here C<current_file> is the currently
selected (with the debugger's C<f> command, or by flow of execution)
file.

Some functions are provided to simplify customization.  See L<"Debugger
Customization"> for description of C<DB::parse_options(string)>.  The
function C<DB::dump_trace(skip[, count])> skips the specified number
of frames, and returns a list containing info about the caller
frames (all if C<count> is missing).  Each entry is a hash with keys
C<context> (C<$> or C<@@>), C<sub> (subroutine name, or info about
eval), C<args> (C<undef> or a reference to an array), C<file>, and
C<line>.

The function C<DB::print_trace(FH, skip[, count[, short]])> prints
formatted info about caller frames.  The last two functions may be
convenient as arguments to C<E<lt>>, C<E<lt>E<lt>> commands.

=head2 Other resources
d923 25
a947 562
=head2 BUGS

You cannot get the stack frame information or otherwise debug functions
that were not compiled by Perl, such as C or C++ extensions.

If you alter your @@_ arguments in a subroutine (such as with B<shift>
or B<pop>, the stack backtrace will not show the original values.

=head1 Debugging Perl memory usage

Perl is I<very> frivolous with memory.  There is a saying that to
estimate memory usage of Perl, assume a reasonable algorithm of
allocation, and multiply your estimates by 10.  This is not absolutely
true, but may give you a good grasp of what happens.

Say, an integer cannot take less than 20 bytes of memory, a float
cannot take less than 24 bytes, a string cannot take less than 32
bytes (all these examples assume 32-bit architectures, the result are
much worse on 64-bit architectures).  If a variable is accessed in two
of three different ways (which require an integer, a float, or a
string), the memory footprint may increase by another 20 bytes.  A
sloppy malloc() implementation will make these numbers yet more.

On the opposite end of the scale, a declaration like

  sub foo;

may take (on some versions of perl) up to 500 bytes of memory.

Off-the-cuff anecdotal estimates of a code bloat give a factor around
8.  This means that the compiled form of reasonable (commented
indented etc.)  code will take approximately 8 times more than the
disk space the code takes.

There are two Perl-specific ways to analyze the memory usage:
$ENV{PERL_DEBUG_MSTATS} and B<-DL> switch.  First one is available
only if perl is compiled with Perl's malloc(), the second one only if
Perl compiled with C<-DDEBUGGING> (as with giving C<-D optimise=-g>
option to F<Configure>).

=head2 Using C<$ENV{PERL_DEBUG_MSTATS}>

If your perl is using Perl's malloc(), and compiled with correct
switches (this is the default), then it will print memory usage
statistics after compiling your code (if C<$ENV{PERL_DEBUG_MSTATS}> >
1), and before termination of the script (if
C<$ENV{PERL_DEBUG_MSTATS}> >= 1).  The report format is similar to one
in the following example:

  env PERL_DEBUG_MSTATS=2 perl -e "require Carp"
  Memory allocation statistics after compilation: (buckets 4(4)..8188(8192)
     14216 free:   130   117    28     7     9   0   2     2   1 0 0
		437    61    36     0     5
     60924 used:   125   137   161    55     7   8   6    16   2 0 1
		 74   109   304    84    20
  Total sbrk(): 77824/21:119. Odd ends: pad+heads+chain+tail: 0+636+0+2048.
  Memory allocation statistics after execution:   (buckets 4(4)..8188(8192)
     30888 free:   245    78    85    13     6   2   1     3   2 0 1
		315   162    39    42    11
    175816 used:   265   176  1112   111    26  22  11    27   2 1 1
		196   178  1066   798    39
  Total sbrk(): 215040/47:145. Odd ends: pad+heads+chain+tail: 0+2192+0+6144.

It is possible to ask for such a statistic at arbitrary moment by
using Devel::Peek::mstats() (module Devel::Peek is available on CPAN).

Here is the explanation of different parts of the format:

=over

=item C<buckets SMALLEST(APPROX)..GREATEST(APPROX)>

Perl's malloc() uses bucketed allocations.  Every request is rounded
up to the closest bucket size available, and a bucket of these size is
taken from the pool of the buckets of this size.

The above line describes limits of buckets currently in use.  Each
bucket has two sizes: memory footprint, and the maximal size of user
data which may be put into this bucket.  Say, in the above example the
smallest bucket is both sizes 4.  The biggest bucket has usable size
8188, and the memory footprint 8192.  

With debugging Perl some buckets may have negative usable size.  This
means that these buckets cannot (and will not) be used.  For greater
buckets the memory footprint may be one page greater than a power of
2.  In such a case the corresponding power of two is printed instead
in the C<APPROX> field above.

=item Free/Used

The following 1 or 2 rows of numbers correspond to the number of
buckets of each size between C<SMALLEST> and C<GREATEST>.  In the
first row the sizes (memory footprints) of buckets are powers of two
(or possibly one page greater).  In the second row (if present) the
memory footprints of the buckets are between memory footprints of two
buckets "above".  

Say, with the above example the memory footprints are (with current
algorithm)

     free:    8     16    32    64    128  256 512 1024 2048 4096 8192
	   4     12    24    48    80

With non-C<DEBUGGING> perl the buckets starting from C<128>-long ones
have 4-byte overhead, thus 8192-long bucket may take up to
8188-byte-long allocations.

=item C<Total sbrk(): SBRKed/SBRKs:CONTINUOUS>

The first two fields give the total amount of memory perl sbrk()ed,
and number of sbrk()s used.  The third number is what perl thinks
about continuity of returned chunks.  As far as this number is
positive, malloc() will assume that it is probable that sbrk() will
provide continuous memory.

The amounts sbrk()ed by external libraries is not counted.

=item C<pad: 0>

The amount of sbrk()ed memory needed to keep buckets aligned.

=item C<heads: 2192>

While memory overhead of bigger buckets is kept inside the bucket, for
smaller buckets it is kept in separate areas.  This field gives the
total size of these areas.

=item C<chain: 0>

malloc() may want to subdivide a bigger bucket into smaller buckets.
If only a part of the deceased-bucket is left non-subdivided, the rest
is kept as an element of a linked list.  This field gives the total
size of these chunks.

=item C<tail: 6144>

To minimize amount of sbrk()s malloc() asks for more memory.  This
field gives the size of the yet-unused part, which is sbrk()ed, but
never touched.

=back

=head2 Example of using B<-DL> switch

Below we show how to analyse memory usage by 

  do 'lib/auto/POSIX/autosplit.ix';

The file in question contains a header and 146 lines similar to

  sub getcwd ;

B<Note:> I<the discussion below supposes 32-bit architecture.  In the
newer versions of perl the memory usage of the constructs discussed
here is much improved, but the story discussed below is a real-life
story.  This story is very terse, and assumes more than cursory
knowledge of Perl internals.>

Here is the itemized list of Perl allocations performed during parsing
of this file:

 !!! "after" at test.pl line 3.
    Id  subtot   4   8  12  16  20  24  28  32  36  40  48  56  64  72  80 80+
  0 02   13752   .   .   .   . 294   .   .   .   .   .   .   .   .   .   .   4
  0 54    5545   .   .   8 124  16   .   .   .   1   1   .   .   .   .   .   3
  5 05      32   .   .   .   .   .   .   .   1   .   .   .   .   .   .   .   .
  6 02    7152   .   .   .   .   .   .   .   .   .   . 149   .   .   .   .   .
  7 02    3600   .   .   .   .   . 150   .   .   .   .   .   .   .   .   .   .
  7 03      64   .  -1   .   1   .   .   2   .   .   .   .   .   .   .   .   .
  7 04    7056   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   7
  7 17   38404   .   .   .   .   .   .   .   1   .   . 442 149   .   . 147   .
  9 03    2078  17 249  32   .   .   .   .   2   .   .   .   .   .   .   .   .


To see this list insert two C<warn('!...')> statements around the call:

  warn('!');
  do 'lib/auto/POSIX/autosplit.ix';
  warn('!!! "after"');

and run it with B<-DL> option.  The first warn() will print memory
allocation info before the parsing of the file, and will memorize the
statistics at this point (we ignore what it prints). The second warn()
will print increments w.r.t. this memorized statistics.  This is the
above printout.

Different I<Id>s on the left correspond to different subsystems of
perl interpreter, they are just first argument given to perl memory
allocation API New().  To find what C<9 03> means C<grep> the perl
source for C<903>.  You will see that it is F<util.c>, function
savepvn().  This function is used to store a copy of existing chunk of
memory.  Using C debugger, one can see that it is called either
directly from gv_init(), or via sv_magic(), and gv_init() is called
from gv_fetchpv() - which is called from newSUB().

B<Note:> to reach this place in debugger and skip all the calls to
savepvn during the compilation of the main script, set a C breakpoint
in Perl_warn(), C<continue> this point is reached, I<then> set
breakpoint in Perl_savepvn().  Note that you may need to skip a
handful of Perl_savepvn() which do not correspond to mass production
of CVs (there are more C<903> allocations than 146 similar lines of
F<lib/auto/POSIX/autosplit.ix>).  Note also that C<Perl_> prefixes are
added by macroization code in perl header files to avoid conflicts
with external libraries.

Anyway, we see that C<903> ids correspond to creation of globs, twice
per glob - for glob name, and glob stringification magic.

Here are explanations for other I<Id>s above: 

=over

=item C<717> 

is for creation of bigger C<XPV*> structures.  In the above case it
creates 3 C<AV> per subroutine, one for a list of lexical variable
names, one for a scratchpad (which contains lexical variables and
C<targets>), and one for the array of scratchpads needed for
recursion.  

It also creates a C<GV> and a C<CV> per subroutine (all called from
start_subparse()).

=item C<002>

Creates C array corresponding to the C<AV> of scratchpads, and the
scratchpad itself (the first fake entry of this scratchpad is created
though the subroutine itself is not defined yet).

It also creates C arrays to keep data for the stash (this is one HV,
but it grows, thus there are 4 big allocations: the big chunks are not
freed, but are kept as additional arenas for C<SV> allocations).

=item C<054>

creates a C<HEK> for the name of the glob for the subroutine (this
name is a key in a I<stash>).

Big allocations with this I<Id> correspond to allocations of new
arenas to keep C<HE>.

=item C<602>

creates a C<GP> for the glob for the subroutine.

=item C<702>

creates the C<MAGIC> for the glob for the subroutine.

=item C<704>

creates I<arenas> which keep SVs.

=back

=head2 B<-DL> details

If Perl is run with B<-DL> option, then warn()s which start with `!'
behave specially.  They print a list of I<categories> of memory
allocations, and statistics of allocations of different sizes for
these categories.

If warn() string starts with

=over

=item C<!!!> 

print changed categories only, print the differences in counts of allocations;

=item C<!!> 

print grown categories only; print the absolute values of counts, and totals;

=item C<!>

print nonempty categories, print the absolute values of counts and totals.

=back

=head2 Limitations of B<-DL> statistic

If an extension or an external library does not use Perl API to
allocate memory, these allocations are not counted.

=head1 Debugging regular expressions

There are two ways to enable debugging output for regular expressions.

If your perl is compiled with C<-DDEBUGGING>, you may use the
B<-Dr> flag on the command line.

Otherwise, one can C<use re 'debug'>, which has effects both at
compile time, and at run time (and is I<not> lexically scoped).

=head2 Compile-time output

The debugging output for the compile time looks like this:

  compiling RE `[bc]d(ef*g)+h[ij]k$'
  size 43 first at 1
     1: ANYOF(11)
    11: EXACT <d>(13)
    13: CURLYX {1,32767}(27)
    15:   OPEN1(17)
    17:     EXACT <e>(19)
    19:     STAR(22)
    20:       EXACT <f>(0)
    22:     EXACT <g>(24)
    24:   CLOSE1(26)
    26:   WHILEM(0)
    27: NOTHING(28)
    28: EXACT <h>(30)
    30: ANYOF(40)
    40: EXACT <k>(42)
    42: EOL(43)
    43: END(0)
  anchored `de' at 1 floating `gh' at 3..2147483647 (checking floating)
				    stclass `ANYOF' minlen 7

The first line shows the pre-compiled form of the regexp, and the
second shows the size of the compiled form (in arbitrary units,
usually 4-byte words) and the label I<id> of the first node which
does a match.

The last line (split into two lines in the above) contains the optimizer
info.  In the example shown, the optimizer found that the match 
should contain a substring C<de> at the offset 1, and substring C<gh>
at some offset between 3 and infinity.  Moreover, when checking for
these substrings (to abandon impossible matches quickly) it will check
for the substring C<gh> before checking for the substring C<de>.  The
optimizer may also use the knowledge that the match starts (at the
C<first> I<id>) with a character class, and the match cannot be
shorter than 7 chars.

The fields of interest which may appear in the last line are

=over

=item C<anchored> I<STRING> C<at> I<POS>

=item C<floating> I<STRING> C<at> I<POS1..POS2>

see above;

=item C<matching floating/anchored>

which substring to check first;

=item C<minlen>

the minimal length of the match;

=item C<stclass> I<TYPE>

The type of the first matching node.

=item C<noscan>

which advises to not scan for the found substrings;

=item C<isall>

which says that the optimizer info is in fact all that the regular
expression contains (thus one does not need to enter the RE engine at
all);

=item C<GPOS>

if the pattern contains C<\G>;

=item C<plus> 

if the pattern starts with a repeated char (as in C<x+y>);

=item C<implicit>

if the pattern starts with C<.*>;

=item C<with eval> 

if the pattern contain eval-groups (see L<perlre/(?{ code })>);

=item C<anchored(TYPE)>

if the pattern may
match only at a handful of places  (with C<TYPE> being
C<BOL>, C<MBOL>, or C<GPOS>, see the table below).

=back

If a substring is known to match at end-of-line only, it may be
followed by C<$>, as in C<floating `k'$>.

The optimizer-specific info is used to avoid entering (a slow) RE
engine on strings which will definitely not match.  If C<isall> flag
is set, a call to the RE engine may be avoided even when optimizer
found an appropriate place for the match.

The rest of the output contains the list of I<nodes> of the compiled
form of the RE.  Each line has format 

C<   >I<id>: I<TYPE> I<OPTIONAL-INFO> (I<next-id>)

=head2 Types of nodes

Here is the list of possible types with short descriptions:

    # TYPE arg-description [num-args] [longjump-len] DESCRIPTION

    # Exit points
    END		no	End of program.
    SUCCEED	no	Return from a subroutine, basically.

    # Anchors:
    BOL		no	Match "" at beginning of line.
    MBOL	no	Same, assuming multiline.
    SBOL	no	Same, assuming singleline.
    EOS		no	Match "" at end of string.
    EOL		no	Match "" at end of line.
    MEOL	no	Same, assuming multiline.
    SEOL	no	Same, assuming singleline.
    BOUND	no	Match "" at any word boundary
    BOUNDL	no	Match "" at any word boundary
    NBOUND	no	Match "" at any word non-boundary
    NBOUNDL	no	Match "" at any word non-boundary
    GPOS	no	Matches where last m//g left off.

    # [Special] alternatives
    ANY		no	Match any one character (except newline).
    SANY	no	Match any one character.
    ANYOF	sv	Match character in (or not in) this class.
    ALNUM	no	Match any alphanumeric character
    ALNUML	no	Match any alphanumeric char in locale
    NALNUM	no	Match any non-alphanumeric character
    NALNUML	no	Match any non-alphanumeric char in locale
    SPACE	no	Match any whitespace character
    SPACEL	no	Match any whitespace char in locale
    NSPACE	no	Match any non-whitespace character
    NSPACEL	no	Match any non-whitespace char in locale
    DIGIT	no	Match any numeric character
    NDIGIT	no	Match any non-numeric character

    # BRANCH	The set of branches constituting a single choice are hooked
    #		together with their "next" pointers, since precedence prevents
    #		anything being concatenated to any individual branch.  The
    #		"next" pointer of the last BRANCH in a choice points to the
    #		thing following the whole choice.  This is also where the
    #		final "next" pointer of each individual branch points; each
    #		branch starts with the operand node of a BRANCH node.
    #
    BRANCH	node	Match this alternative, or the next...

    # BACK	Normal "next" pointers all implicitly point forward; BACK
    #		exists to make loop structures possible.
    # not used
    BACK	no	Match "", "next" ptr points backward.

    # Literals
    EXACT	sv	Match this string (preceded by length).
    EXACTF	sv	Match this string, folded (prec. by length).
    EXACTFL	sv	Match this string, folded in locale (w/len).

    # Do nothing
    NOTHING	no	Match empty string.
    # A variant of above which delimits a group, thus stops optimizations
    TAIL	no	Match empty string. Can jump here from outside.

    # STAR,PLUS	'?', and complex '*' and '+', are implemented as circular
    #		BRANCH structures using BACK.  Simple cases (one character
    #		per match) are implemented with STAR and PLUS for speed
    #		and to minimize recursive plunges.
    #
    STAR	node	Match this (simple) thing 0 or more times.
    PLUS	node	Match this (simple) thing 1 or more times.

    CURLY	sv 2	Match this simple thing {n,m} times.
    CURLYN	no 2	Match next-after-this simple thing 
    #			{n,m} times, set parenths.
    CURLYM	no 2	Match this medium-complex thing {n,m} times.
    CURLYX	sv 2	Match this complex thing {n,m} times.

    # This terminator creates a loop structure for CURLYX
    WHILEM	no	Do curly processing and see if rest matches.

    # OPEN,CLOSE,GROUPP	...are numbered at compile time.
    OPEN	num 1	Mark this point in input as start of #n.
    CLOSE	num 1	Analogous to OPEN.

    REF		num 1	Match some already matched string
    REFF	num 1	Match already matched string, folded
    REFFL	num 1	Match already matched string, folded in loc.

    # grouping assertions
    IFMATCH	off 1 2	Succeeds if the following matches.
    UNLESSM	off 1 2	Fails if the following matches.
    SUSPEND	off 1 1	"Independent" sub-RE.
    IFTHEN	off 1 1	Switch, should be preceeded by switcher .
    GROUPP	num 1	Whether the group matched.

    # Support for long RE
    LONGJMP	off 1 1	Jump far away.
    BRANCHJ	off 1 1	BRANCH with long offset.

    # The heavy worker
    EVAL	evl 1	Execute some Perl code.

    # Modifiers
    MINMOD	no	Next operator is not greedy.
    LOGICAL	no	Next opcode should set the flag only.

    # This is not used yet
    RENUM	off 1 1	Group with independently numbered parens.

    # This is not really a node, but an optimized away piece of a "long" node.
    # To simplify debugging output, we mark it as if it were a node
    OPTIMIZED	off	Placeholder for dump.

=head2 Run-time output

First of all, when doing a match, one may get no run-time output even
if debugging is enabled.  this means that the RE engine was never
entered, all of the job was done by the optimizer.

If RE engine was entered, the output may look like this:

  Matching `[bc]d(ef*g)+h[ij]k$' against `abcdefg__gh__'
    Setting an EVAL scope, savestack=3
     2 <ab> <cdefg__gh_>    |  1: ANYOF
     3 <abc> <defg__gh_>    | 11: EXACT <d>
     4 <abcd> <efg__gh_>    | 13: CURLYX {1,32767}
     4 <abcd> <efg__gh_>    | 26:   WHILEM
				0 out of 1..32767  cc=effff31c
     4 <abcd> <efg__gh_>    | 15:     OPEN1
     4 <abcd> <efg__gh_>    | 17:     EXACT <e>
     5 <abcde> <fg__gh_>    | 19:     STAR
			     EXACT <f> can match 1 times out of 32767...
    Setting an EVAL scope, savestack=3
     6 <bcdef> <g__gh__>    | 22:       EXACT <g>
     7 <bcdefg> <__gh__>    | 24:       CLOSE1
     7 <bcdefg> <__gh__>    | 26:       WHILEM
				    1 out of 1..32767  cc=effff31c
    Setting an EVAL scope, savestack=12
     7 <bcdefg> <__gh__>    | 15:         OPEN1
     7 <bcdefg> <__gh__>    | 17:         EXACT <e>
       restoring \1 to 4(4)..7
				    failed, try continuation...
     7 <bcdefg> <__gh__>    | 27:         NOTHING
     7 <bcdefg> <__gh__>    | 28:         EXACT <h>
				    failed...
				failed...

The most significant information in the output is about the particular I<node>
of the compiled RE which is currently being tested against the target string.
The format of these lines is

C<    >I<STRING-OFFSET> <I<PRE-STRING>> <I<POST-STRING>>   |I<ID>:  I<TYPE>

The I<TYPE> info is indented with respect to the backtracking level.
Other incidental information appears interspersed within.

=cut
@


1.2
log
@perl 5.004_04
@
text
@d66 1
a66 1
If the output the C<h> command (or any command, for that matter) scrolls
d284 1
a284 1
For example, this will print out C<$foo> every time line
d293 8
d403 4
d670 2
a671 2
statement, the backtrace will contain both C<L<perlfunc/require>>
frame and an C<L<perlfunc/eval EXPR>>) frame.
d871 1
a871 1
Most probably you not want to modify the debugger, it contains enough
d969 1
a969 1
The array C<@@{"_<$filename"}> is the line-by-line contents of
d976 1
a976 1
The hash C<%{"_<$filename"}> contains breakpoints and action (it is
d984 1
a984 1
currently executed.  The C<$filename> for C<eval>ed strings looks like
d989 1
a989 1
The scalar C<${"_<$filename"}> contains C<"_<$filename">.  Same for
d991 1
a991 1
executed.  The C<$filename> for C<eval>ed strings looks like C<(eval
d997 1
a997 1
C<DB::postponed(*{"_<$filename"})> is called (if subroutine
d999 1
a999 1
the C<require>d file (as found in values of C<%INC>).
d1086 1
a1086 1
of frames, and returns an array containing info about the caller
d1100 1
a1100 1
=head1 BUGS
d1107 555
@


1.1
log
@Initial revision
@
text
@d9 1
a9 1
=head2 Debugging
d11 43
a53 9
If you invoke Perl with a B<-d> switch, your script will be run under the
debugger.  However, the Perl debugger is not a separate program as it is
in a C environment.  Instead, the B<-d> flag tells the compiler to insert
source information into the pseudocode it's about to hand to the
interpreter.  (That means your code must compile correctly for the
debugger to work on it.)  Then when the interpreter starts up, it
pre-loads a Perl library file containing the debugger itself.  The program
will halt before the first executable statement (but see below) and ask
you for one of the following commands:
d57 1
a57 1
=item h
d61 51
d114 1
a114 3
Stack trace.
If you do bizarre things to your @@_ arguments in a subroutine, the stack
backtrace will not always show the original values.
d116 1
a116 1
=item s
d119 2
a120 1
statement.
d122 1
a122 1
=item n
d125 3
a127 1
of the next statement.
d129 1
a129 1
=item f
d131 1
a131 2
Finish.  Executes statements until it has finished the current
subroutine.
d133 1
a133 1
=item c
d135 2
a136 1
Continue.  Executes until the next breakpoint is reached.
d138 1
a138 6
=item c line

Continue to the specified line.  Inserts a one-time-only breakpoint at
the specified line.

=item <CR>
d140 1
a140 1
Repeat last n or s.
d144 1
a144 3
List incr+1 lines starting at min.  If min is omitted, starts where
last listing left off.  If incr is omitted, previous value of incr is
used.
d148 1
a148 1
List lines in the indicated range.
d152 1
a152 1
List just the indicated line.
d154 1
a154 1
=item l
d156 1
a156 1
List next window.
d160 3
a162 1
List previous window.
d164 1
a164 1
=item w line
d166 1
a166 1
List window (a few lines worth of code) around line.
d168 4
a171 1
=item l subname
d173 3
a175 2
List subroutine.  If it's a long subroutine it just lists the
beginning.  Use "l" to list more.
d179 1
a179 2
Regular expression search forward in the source code for pattern; the
final / is optional.
d183 1
a183 2
Regular expression search backward in the source code for pattern; the
final ? is optional.
d187 1
a187 1
List lines that have breakpoints or actions.
d189 1
a189 1
=item S
d191 1
a191 1
Lists the names of all subroutines.
d195 16
a210 1
Toggle trace mode on or off.
d212 23
a234 1
=item b line [ condition ]
d237 1
a237 1
that is about to be executed.  If a condition is specified, it is
d239 2
a240 2
only if the condition is true.  Breakpoints may only be set on lines
that begin an executable statement.  Conditions don't use C<if>:
d243 1
d246 7
a252 1
=item b subname [ condition ]
d254 1
a254 1
Set breakpoint at first executable line of subroutine.
d256 2
a257 1
=item d line
d259 9
a267 2
Delete breakpoint.  If line is omitted, deletes the breakpoint on the
line that is about to be executed.
d271 3
a273 1
Delete all breakpoints.
d275 2
a276 1
=item a line command
d278 10
a287 3
Set an action for line.  A multiline command may be entered by
backslashing the newlines.  This command is Perl code, not another
debugger command.
d291 163
a453 1
Delete all line actions.
d455 1
a455 1
=item < command
d457 39
a495 2
Set an action to happen before every debugger prompt.  A multiline
command may be entered by backslashing the newlines.
d497 4
a500 1
=item > command
d502 1
a502 3
Set an action to happen after the prompt when you've just given a
command to return to executing the script.  A multiline command may be
entered by backslashing the newlines.
d504 3
a506 1
=item V package [symbols]
d508 1
a508 5
Display all (or some) variables in package (defaulting to the C<main>
package) using a data pretty-printer (hashes show their keys and values so
you see what's what, control characters are made printable, etc.).  Make
sure you don't put the type specifier (like $) there, just the symbol
names, like this:
d510 3
a512 1
    V DB filename line 
d514 1
a514 1
=item X [symbols] 
d516 2
a517 1
Same as as "V" command, but within the current package.  
d521 1
a521 2
Redo a debugging command.  If number is omitted, redoes the previous
command.
d525 11
a535 1
Redo the command that was that many commands ago.
d544 36
a579 1
Quit.  ("quit" doesn't work for this.)
d586 240
a825 1
=item p expr
d827 1
a827 2
Same as C<print DB::OUT expr>.  The DB::OUT filehandle is opened to
/dev/tty, regardless of where STDOUT may be redirected to.
d831 1
a831 3
Any command you type in that isn't recognized by the debugger will be
directly executed (C<eval>'d) as Perl code.  Leading white space will
cause the debugger to think it's C<NOT> a debugger command.
d833 7
a839 5
If you have any compile-time executable statements (code within a BEGIN 
block or a C<use> statement), these will I<NOT> be stopped by debugger,
although C<require>s will.  From your own code, however, you can transfer
control back to the debugger using the following statement, which is harmless
if the debugger is not running:
d843 39
a881 1
=head2 Customization
d885 1
a885 1
to set environment variable PERL5DB to say something like this:
d889 181
a1069 4
You can do some customization by setting up a F<.perldb> file which
contains initialization code.  For instance, you could make aliases
like these (the last one in particular most people seem to expect to 
be there):
d1071 8
a1078 5
    $DB::alias{'len'} = 's/^len(.*)/p length($1)/';
    $DB::alias{'stop'} = 's/^stop (at|in)/b/';
    $DB::alias{'.'} = 's/^\./p '
		    . '"\$DB::sub(\$DB::filename:\$DB::line):\t"'
		    . ',\$DB::dbline[\$DB::line]/' ;
d1080 3
d1090 2
a1091 6
If your program exit()s or die()s, so does the debugger.

There's no builtin way to restart the debugger without exiting and coming back
into it.  You could use an alias like this:

    $DB::alias{'rerun'} = 'exec "perl -d $DB::filename"';
d1093 2
a1094 2
But you'd lose any pending breakpoint information, and that might not
be the right path, etc.
@


1.1.1.1
log
@Import of Perl 5.003 into the tree.  Makefile.bsd-wrapper and
config.sh.OpenBSD are the only local changes.
@
text
@@


1.1.1.2
log
@perl5.005_03
@
text
@d9 1
a9 1
=head1 The Perl Debugger
d11 9
a19 43
"As soon as we started programming, we found to our
surprise that it wasn't as easy to get programs right
as we had thought.  Debugging had to be discovered.
I can remember the exact instant when I realized that
a large part of my life from then on was going to be
spent in finding mistakes in my own programs."

I<  --Maurice Wilkes, 1949>

If you invoke Perl with the B<-d> switch, your script runs under the
Perl source debugger.  This works like an interactive Perl
environment, prompting for debugger commands that let you examine
source code, set breakpoints, get stack backtraces, change the values of
variables, etc.  This is so convenient that you often fire up
the debugger all by itself just to test out Perl constructs
interactively to see what they do.  For example:

    perl -d -e 42

In Perl, the debugger is not a separate program as it usually is in the
typical compiled environment.  Instead, the B<-d> flag tells the compiler
to insert source information into the parse trees it's about to hand off
to the interpreter.  That means your code must first compile correctly
for the debugger to work on it.  Then when the interpreter starts up, it
preloads a Perl library file containing the debugger itself.

The program will halt I<right before> the first run-time executable
statement (but see below regarding compile-time statements) and ask you
to enter a debugger command.  Contrary to popular expectations, whenever
the debugger halts and shows you a line of code, it always displays the
line it's I<about> to execute, rather than the one it has just executed.

Any command not recognized by the debugger is directly executed
(C<eval>'d) as Perl code in the current package.  (The debugger uses the
DB package for its own state information.)

Leading white space before a command would cause the debugger to think
it's I<NOT> a debugger command but for Perl, so be careful not to do
that.

=head2 Debugger Commands

The debugger understands the following commands:
d23 1
a23 1
=item h [command]
a26 51
If you supply another debugger command as an argument to the C<h> command,
it prints out the description for just that command.  The special
argument of C<h h> produces a more compact help listing, designed to fit
together on one screen.

If the output of the C<h> command (or any command, for that matter) scrolls
past your screen, either precede the command with a leading pipe symbol so
it's run through your pager, as in

    DB> |h

You may change the pager which is used via C<O pager=...> command.

=item p expr

Same as C<print {$DB::OUT} expr> in the current package.  In particular,
because this is just Perl's own B<print> function, this means that nested
data structures and objects are not dumped, unlike with the C<x> command.

The C<DB::OUT> filehandle is opened to F</dev/tty>, regardless of
where STDOUT may be redirected to.

=item x expr

Evaluates its expression in list context and dumps out the result
in a pretty-printed fashion.  Nested data structures are printed out
recursively, unlike the C<print> function.

The details of printout are governed by multiple C<O>ptions.

=item V [pkg [vars]]

Display all (or some) variables in package (defaulting to the C<main>
package) using a data pretty-printer (hashes show their keys and values so
you see what's what, control characters are made printable, etc.).  Make
sure you don't put the type specifier (like C<$>) there, just the symbol
names, like this:

    V DB filename line

Use C<~pattern> and C<!pattern> for positive and negative regexps.

Nested data structures are printed out in a legible fashion, unlike
the C<print> function.

The details of printout are governed by multiple C<O>ptions.

=item X [vars]

Same as C<V currentpackage [vars]>.

d29 3
a31 1
Produce a stack backtrace.  See below for details on its output.
d33 1
a33 1
=item s [expr]
d36 1
a36 2
statement, descending into subroutine calls.  If an expression is
supplied that includes function calls, it too will be single-stepped.
d38 1
a38 1
=item n [expr]
d41 6
a46 3
of the next statement.  If an expression is supplied that includes
function calls, those functions will be executed with stops before
each statement.
d48 1
a48 1
=item E<lt>CRE<gt>
d50 1
a50 1
Repeat last C<n> or C<s> command.
d52 1
a52 1
=item c [line|sub]
d54 2
a55 2
Continue, optionally inserting a one-time-only breakpoint
at the specified line or subroutine.
d57 1
a57 1
=item l
d59 1
a59 1
List next window of lines.
d63 3
a65 1
List C<incr+1> lines starting at C<min>.
d69 1
a69 1
List lines C<min> through C<max>.  C<l -> is synonymous to C<->.
d73 1
a73 1
List a single line.
d75 1
a75 1
=item l subname
d77 1
a77 1
List first window of lines from subroutine.
d81 1
a81 1
List previous window of lines.
d83 1
a83 1
=item w [line]
d85 1
a85 1
List window (a few lines) around the current line.
d87 1
a87 6
=item .

Return debugger pointer to the last-executed line and
print it out.

=item f filename
d89 2
a90 3
Switch to viewing a different file or eval statement.  If C<filename>
is not a full filename as found in values of %INC, it is considered as
a regexp.
d94 2
a95 1
Search forwards for pattern; final / is optional.
d99 2
a100 1
Search backwards for pattern; final ? is optional.
d104 1
a104 1
List all breakpoints and actions.
d106 1
a106 1
=item S [[!]pattern]
d108 1
a108 1
List subroutine names [not] matching pattern.
d112 1
a112 8
Toggle trace mode (see also C<AutoTrace> C<O>ption).

=item t expr

Trace through execution of expr.  For example:

 $ perl -de 42
 Stack dump during die enabled outside of evals.
d114 1
a114 31
 Loading DB routines from perl5db.pl patch level 0.94
 Emacs support available.

 Enter h or `h h' for help.

 main::(-e:1):   0
   DB<1> sub foo { 14 }

   DB<2> sub bar { 3 }

   DB<3> t print foo() * bar()
 main::((eval 172):3):   print foo() + bar();
 main::foo((eval 168):2):
 main::bar((eval 170):2):
 42

or, with the C<O>ption C<frame=2> set,

   DB<4> O f=2
                frame = '2'
   DB<5> t print foo() * bar()
 3:      foo() * bar()
 entering main::foo
  2:     sub foo { 14 };
 exited main::foo
 entering main::bar
  2:     sub bar { 3 };
 exited main::bar
 42

=item b [line] [condition]
d117 1
a117 1
that is about to be executed.  If a condition is specified, it's
d119 2
a120 2
only if the condition is true.  Breakpoints may be set on only lines
that begin an executable statement.  Conditions don't use B<if>:
a122 1
    b 237 ++$count237 < 11
d125 1
a125 9
=item b subname [condition]

Set a breakpoint at the first line of the named subroutine.

=item b postpone subname [condition]

Set breakpoint at first line of subroutine after it is compiled.

=item b load filename
d127 1
a127 2
Set breakpoint at the first executed line of the file.  Filename should
be a full name as found in values of %INC.
d129 1
a129 1
=item b compile subname
d131 2
a132 7
Sets breakpoint at the first statement executed after the subroutine
is compiled.

=item d [line]

Delete a breakpoint at the specified line.  If line is omitted, deletes
the breakpoint on the line that is about to be executed.
d136 1
a136 3
Delete all installed breakpoints.

=item a [line] command
d138 1
a138 2
Set an action to be done before the line is executed.
The sequence of steps taken by the debugger is
d140 3
a142 10
  1. check for a breakpoint at this line
  2. print the line if necessary (tracing)
  3. do any actions associated with that line
  4. prompt user if at a breakpoint or in single-step
  5. evaluate line

For example, this will print out $foo every time line
53 is passed:

    a 53 print "DB FOUND $foo\n"
d146 1
a146 1
Delete all installed actions.
d148 1
a148 1
=item W [expr]
d150 2
a151 1
Add a global watch-expression.
d153 1
a153 1
=item W
d155 3
a157 1
Delete all watch-expressions.
d159 1
a159 1
=item O [opt[=val]] [opt"val"] [opt?]...
d161 5
a165 84
Set or query values of options.  val defaults to 1.  opt can
be abbreviated.  Several options can be listed.

=over 12

=item C<recallCommand>, C<ShellBang>

The characters used to recall command or spawn shell.  By
default, these are both set to C<!>.

=item C<pager>

Program to use for output of pager-piped commands (those
beginning with a C<|> character.)  By default,
C<$ENV{PAGER}> will be used.

=item C<tkRunning>

Run Tk while prompting (with ReadLine).

=item C<signalLevel>, C<warnLevel>, C<dieLevel>

Level of verbosity.  By default the debugger is in a sane verbose mode,
thus it will print backtraces on all the warnings and die-messages
which are going to be printed out, and will print a message when
interesting uncaught signals arrive.

To disable this behaviour, set these values to 0.  If C<dieLevel> is 2,
then the messages which will be caught by surrounding C<eval> are also
printed.

=item C<AutoTrace>

Trace mode (similar to C<t> command, but can be put into
C<PERLDB_OPTS>).

=item C<LineInfo>

File or pipe to print line number info to.  If it is a pipe (say,
C<|visual_perl_db>), then a short, "emacs like" message is used.

=item C<inhibit_exit>

If 0, allows I<stepping off> the end of the script.

=item C<PrintRet>

affects printing of return value after C<r> command.

=item C<ornaments>

affects screen appearance of the command line (see L<Term::ReadLine>).

=item C<frame>

affects printing messages on entry and exit from subroutines.  If
C<frame & 2> is false, messages are printed on entry only. (Printing
on exit may be useful if inter(di)spersed with other messages.)

If C<frame & 4>, arguments to functions are printed as well as the
context and caller info.  If C<frame & 8>, overloaded C<stringify> and
C<tie>d C<FETCH> are enabled on the printed arguments. If C<frame &
16>, the return value from the subroutine is printed as well.

The length at which the argument list is truncated is governed by the
next option:

=item C<maxTraceLen>

length at which the argument list is truncated when C<frame> option's
bit 4 is set.

=back

The following options affect what happens with C<V>, C<X>, and C<x>
commands:

=over 12

=item C<arrayDepth>, C<hashDepth>

Print only first N elements ('' for all).

=item C<compactDump>, C<veryCompact>
d167 1
a167 2
Change style of array and hash dump.  If C<compactDump>, short array
may be printed on one line.
d169 1
a169 1
=item C<globPrint>
d171 1
a171 137
Whether to print contents of globs.

=item C<DumpDBFiles>

Dump arrays holding debugged files.

=item C<DumpPackages>

Dump symbol tables of packages.

=item C<DumpReused>

Dump contents of "reused" addresses.

=item C<quote>, C<HighBit>, C<undefPrint>

Change style of string dump.  Default value of C<quote> is C<auto>, one
can enable either double-quotish dump, or single-quotish by setting it
to C<"> or C<'>.  By default, characters with high bit set are printed
I<as is>.

=item C<UsageOnly>

I<very> rudimentally per-package memory usage dump.  Calculates total
size of strings in variables in the package.

=back

During startup options are initialized from C<$ENV{PERLDB_OPTS}>.
You can put additional initialization options C<TTY>, C<noTTY>,
C<ReadLine>, and C<NonStop> there.

Example rc file:

  &parse_options("NonStop=1 LineInfo=db.out AutoTrace");

The script will run without human intervention, putting trace information
into the file I<db.out>.  (If you interrupt it, you would better reset
C<LineInfo> to something "interactive"!)

=over 12

=item C<TTY>

The TTY to use for debugging I/O.

=item C<noTTY>

If set, goes in C<NonStop> mode, and would not connect to a TTY.  If
interrupt (or if control goes to debugger via explicit setting of
$DB::signal or $DB::single from the Perl script), connects to a TTY
specified by the C<TTY> option at startup, or to a TTY found at
runtime using C<Term::Rendezvous> module of your choice.

This module should implement a method C<new> which returns an object
with two methods: C<IN> and C<OUT>, returning two filehandles to use
for debugging input and output correspondingly.  Method C<new> may
inspect an argument which is a value of C<$ENV{PERLDB_NOTTY}> at
startup, or is C<"/tmp/perldbtty$$"> otherwise.

=item C<ReadLine>

If false, readline support in debugger is disabled, so you can debug
ReadLine applications.

=item C<NonStop>

If set, debugger goes into noninteractive mode until interrupted, or
programmatically by setting $DB::signal or $DB::single.

=back

Here's an example of using the C<$ENV{PERLDB_OPTS}> variable:

  $ PERLDB_OPTS="N f=2" perl -d myprogram

will run the script C<myprogram> without human intervention, printing
out the call tree with entry and exit points.  Note that C<N f=2> is
equivalent to C<NonStop=1 frame=2>.  Note also that at the moment when
this documentation was written all the options to the debugger could
be uniquely abbreviated by the first letter (with exception of
C<Dump*> options).

Other examples may include

  $ PERLDB_OPTS="N f A L=listing" perl -d myprogram

- runs script noninteractively, printing info on each entry into a
subroutine and each executed line into the file F<listing>. (If you
interrupt it, you would better reset C<LineInfo> to something
"interactive"!)


  $ env "PERLDB_OPTS=R=0 TTY=/dev/ttyc" perl -d myprogram

may be useful for debugging a program which uses C<Term::ReadLine>
itself.  Do not forget detach shell from the TTY in the window which
corresponds to F</dev/ttyc>, say, by issuing a command like

  $ sleep 1000000

See L<"Debugger Internals"> below for more details.

=item E<lt> [ command ]

Set an action (Perl command) to happen before every debugger prompt.
A multi-line command may be entered by backslashing the newlines.  If
C<command> is missing, resets the list of actions.

=item E<lt>E<lt> command

Add an action (Perl command) to happen before every debugger prompt.
A multi-line command may be entered by backslashing the newlines.

=item E<gt> command

Set an action (Perl command) to happen after the prompt when you've
just given a command to return to executing the script.  A multi-line
command may be entered by backslashing the newlines.  If C<command> is
missing, resets the list of actions.

=item E<gt>E<gt> command

Adds an action (Perl command) to happen after the prompt when you've
just given a command to return to executing the script.  A multi-line
command may be entered by backslashing the newlines.

=item { [ command ]

Set an action (debugger command) to happen before every debugger prompt.
A multi-line command may be entered by backslashing the newlines.  If
C<command> is missing, resets the list of actions.

=item {{ command

Add an action (debugger command) to happen before every debugger prompt.
A multi-line command may be entered by backslashing the newlines.
d175 2
a176 1
Redo a previous command (default previous command).
d180 1
a180 11
Redo number'th-to-last command.

=item ! pattern

Redo last command that started with pattern.
See C<O recallCommand>, too.

=item !! cmd

Run cmd in a subprocess (reads from DB::IN, writes to DB::OUT)
See C<O shellBang> too.
d189 1
a189 36
Quit.  ("quit" doesn't work for this.)  This is the only supported way
to exit the debugger, though typing C<exit> twice may do it too.

Set an C<O>ption C<inhibit_exit> to 0 if you want to be able to I<step
off> the end the script.  You may also need to set C<$finished> to 0 at
some moment if you want to step through global destruction.

=item R

Restart the debugger by B<exec>ing a new session.  It tries to maintain
your history across this, but internal settings and command line options
may be lost.

Currently the following setting are preserved: history, breakpoints,
actions, debugger C<O>ptions, and the following command line
options: B<-w>, B<-I>, and B<-e>.

=item |dbcmd

Run debugger command, piping DB::OUT to current pager.

=item ||dbcmd

Same as C<|dbcmd> but DB::OUT is temporarily B<select>ed as well.
Often used with commands that would otherwise produce long
output, such as

    |V main

=item = [alias value]

Define a command alias, like

    = quit q

or list current aliases.
d196 1
a196 226
=item m expr

The expression is evaluated, and the methods which may be applied to
the result are listed.

=item m package

The methods which may be applied to objects in the C<package> are listed.

=back

=head2 Debugger input/output

=over 8

=item Prompt

The debugger prompt is something like

    DB<8>

or even

    DB<<17>>

where that number is the command number, which you'd use to access with
the builtin B<csh>-like history mechanism, e.g., C<!17> would repeat
command number 17.  The number of angle brackets indicates the depth of
the debugger.  You could get more than one set of brackets, for example, if
you'd already at a breakpoint and then printed out the result of a
function call that itself also has a breakpoint, or you step into an
expression via C<s/n/t expression> command.

=item Multiline commands

If you want to enter a multi-line command, such as a subroutine
definition with several statements, or a format, you may escape the
newline that would normally end the debugger command with a backslash.
Here's an example:

      DB<1> for (1..4) {         \
      cont:     print "ok\n";   \
      cont: }
      ok
      ok
      ok
      ok

Note that this business of escaping a newline is specific to interactive
commands typed into the debugger.

=item Stack backtrace

Here's an example of what a stack backtrace via C<T> command might
look like:

    $ = main::infested called from file `Ambulation.pm' line 10
    @@ = Ambulation::legs(1, 2, 3, 4) called from file `camel_flea' line 7
    $ = main::pests('bactrian', 4) called from file `camel_flea' line 4

The left-hand character up there tells whether the function was called
in a scalar or list context (we bet you can tell which is which).  What
that says is that you were in the function C<main::infested> when you ran
the stack dump, and that it was called in a scalar context from line 10
of the file I<Ambulation.pm>, but without any arguments at all, meaning
it was called as C<&infested>.  The next stack frame shows that the
function C<Ambulation::legs> was called in a list context from the
I<camel_flea> file with four arguments.  The last stack frame shows that
C<main::pests> was called in a scalar context, also from I<camel_flea>,
but from line 4.

Note that if you execute C<T> command from inside an active C<use>
statement, the backtrace will contain both C<require>
frame and an C<eval>) frame.

=item Listing

Listing given via different flavors of C<l> command looks like this:

    DB<<13>> l
  101:                @@i{@@i} = ();
  102:b               @@isa{@@i,$pack} = ()
  103                     if(exists $i{$prevpack} || exists $isa{$pack});
  104             }
  105
  106             next
  107==>              if(exists $isa{$pack});
  108
  109:a           if ($extra-- > 0) {
  110:                %isa = ($pack,1);

Note that the breakable lines are marked with C<:>, lines with
breakpoints are marked by C<b>, with actions by C<a>, and the
next executed line is marked by C<==E<gt>>.

=item Frame listing

When C<frame> option is set, debugger would print entered (and
optionally exited) subroutines in different styles.

What follows is the start of the listing of

  env "PERLDB_OPTS=f=n N" perl -d -V

for different values of C<n>:

=over 4

=item 1

  entering main::BEGIN
   entering Config::BEGIN
    Package lib/Exporter.pm.
    Package lib/Carp.pm.
   Package lib/Config.pm.
   entering Config::TIEHASH
   entering Exporter::import
    entering Exporter::export
  entering Config::myconfig
   entering Config::FETCH
   entering Config::FETCH
   entering Config::FETCH
   entering Config::FETCH

=item 2

  entering main::BEGIN
   entering Config::BEGIN
    Package lib/Exporter.pm.
    Package lib/Carp.pm.
   exited Config::BEGIN
   Package lib/Config.pm.
   entering Config::TIEHASH
   exited Config::TIEHASH
   entering Exporter::import
    entering Exporter::export
    exited Exporter::export
   exited Exporter::import
  exited main::BEGIN
  entering Config::myconfig
   entering Config::FETCH
   exited Config::FETCH
   entering Config::FETCH
   exited Config::FETCH
   entering Config::FETCH

=item 4

  in  $=main::BEGIN() from /dev/nul:0
   in  $=Config::BEGIN() from lib/Config.pm:2
    Package lib/Exporter.pm.
    Package lib/Carp.pm.
   Package lib/Config.pm.
   in  $=Config::TIEHASH('Config') from lib/Config.pm:644
   in  $=Exporter::import('Config', 'myconfig', 'config_vars') from /dev/nul:0
    in  $=Exporter::export('Config', 'main', 'myconfig', 'config_vars') from li
  in  @@=Config::myconfig() from /dev/nul:0
   in  $=Config::FETCH(ref(Config), 'package') from lib/Config.pm:574
   in  $=Config::FETCH(ref(Config), 'baserev') from lib/Config.pm:574
   in  $=Config::FETCH(ref(Config), 'PATCHLEVEL') from lib/Config.pm:574
   in  $=Config::FETCH(ref(Config), 'SUBVERSION') from lib/Config.pm:574
   in  $=Config::FETCH(ref(Config), 'osname') from lib/Config.pm:574
   in  $=Config::FETCH(ref(Config), 'osvers') from lib/Config.pm:574

=item 6

  in  $=main::BEGIN() from /dev/nul:0
   in  $=Config::BEGIN() from lib/Config.pm:2
    Package lib/Exporter.pm.
    Package lib/Carp.pm.
   out $=Config::BEGIN() from lib/Config.pm:0
   Package lib/Config.pm.
   in  $=Config::TIEHASH('Config') from lib/Config.pm:644
   out $=Config::TIEHASH('Config') from lib/Config.pm:644
   in  $=Exporter::import('Config', 'myconfig', 'config_vars') from /dev/nul:0
    in  $=Exporter::export('Config', 'main', 'myconfig', 'config_vars') from lib/
    out $=Exporter::export('Config', 'main', 'myconfig', 'config_vars') from lib/
   out $=Exporter::import('Config', 'myconfig', 'config_vars') from /dev/nul:0
  out $=main::BEGIN() from /dev/nul:0
  in  @@=Config::myconfig() from /dev/nul:0
   in  $=Config::FETCH(ref(Config), 'package') from lib/Config.pm:574
   out $=Config::FETCH(ref(Config), 'package') from lib/Config.pm:574
   in  $=Config::FETCH(ref(Config), 'baserev') from lib/Config.pm:574
   out $=Config::FETCH(ref(Config), 'baserev') from lib/Config.pm:574
   in  $=Config::FETCH(ref(Config), 'PATCHLEVEL') from lib/Config.pm:574
   out $=Config::FETCH(ref(Config), 'PATCHLEVEL') from lib/Config.pm:574
   in  $=Config::FETCH(ref(Config), 'SUBVERSION') from lib/Config.pm:574

=item 14

  in  $=main::BEGIN() from /dev/nul:0
   in  $=Config::BEGIN() from lib/Config.pm:2
    Package lib/Exporter.pm.
    Package lib/Carp.pm.
   out $=Config::BEGIN() from lib/Config.pm:0
   Package lib/Config.pm.
   in  $=Config::TIEHASH('Config') from lib/Config.pm:644
   out $=Config::TIEHASH('Config') from lib/Config.pm:644
   in  $=Exporter::import('Config', 'myconfig', 'config_vars') from /dev/nul:0
    in  $=Exporter::export('Config', 'main', 'myconfig', 'config_vars') from lib/E
    out $=Exporter::export('Config', 'main', 'myconfig', 'config_vars') from lib/E
   out $=Exporter::import('Config', 'myconfig', 'config_vars') from /dev/nul:0
  out $=main::BEGIN() from /dev/nul:0
  in  @@=Config::myconfig() from /dev/nul:0
   in  $=Config::FETCH('Config=HASH(0x1aa444)', 'package') from lib/Config.pm:574
   out $=Config::FETCH('Config=HASH(0x1aa444)', 'package') from lib/Config.pm:574
   in  $=Config::FETCH('Config=HASH(0x1aa444)', 'baserev') from lib/Config.pm:574
   out $=Config::FETCH('Config=HASH(0x1aa444)', 'baserev') from lib/Config.pm:574

=item 30

  in  $=CODE(0x15eca4)() from /dev/null:0
   in  $=CODE(0x182528)() from lib/Config.pm:2
    Package lib/Exporter.pm.
   out $=CODE(0x182528)() from lib/Config.pm:0
   scalar context return from CODE(0x182528): undef
   Package lib/Config.pm.
   in  $=Config::TIEHASH('Config') from lib/Config.pm:628
   out $=Config::TIEHASH('Config') from lib/Config.pm:628
   scalar context return from Config::TIEHASH:   empty hash
   in  $=Exporter::import('Config', 'myconfig', 'config_vars') from /dev/null:0
    in  $=Exporter::export('Config', 'main', 'myconfig', 'config_vars') from lib/Exporter.pm:171
    out $=Exporter::export('Config', 'main', 'myconfig', 'config_vars') from lib/Exporter.pm:171
    scalar context return from Exporter::export: ''
   out $=Exporter::import('Config', 'myconfig', 'config_vars') from /dev/null:0
   scalar context return from Exporter::import: ''
d198 2
d203 3
a205 14
In all the cases indentation of lines shows the call tree, if bit 2 of
C<frame> is set, then a line is printed on exit from a subroutine as
well, if bit 4 is set, then the arguments are printed as well as the
caller info, if bit 8 is set, the arguments are printed even if they
are tied or references, if bit 16 is set, the return value is printed
as well.

When a package is compiled, a line like this

    Package lib/Carp.pm.

is printed with proper indentation.

=back
d207 5
a211 9
=head2 Debugging compile-time statements

If you have any compile-time executable statements (code within a BEGIN
block or a C<use> statement), these will C<NOT> be stopped by debugger,
although C<require>s will (and compile-time statements can be traced
with C<AutoTrace> option set in C<PERLDB_OPTS>).  From your own Perl
code, however, you can
transfer control back to the debugger using the following statement,
which is harmless if the debugger is not running:
d215 1
a215 39
If you set C<$DB::single> to the value 2, it's equivalent to having
just typed the C<n> command, whereas a value of 1 means the C<s>
command.  The C<$DB::trace>  variable should be set to 1 to simulate
having typed the C<t> command.

Another way to debug compile-time code is to start debugger, set a
breakpoint on I<load> of some module thusly

    DB<7> b load f:/perllib/lib/Carp.pm
  Will stop on load of `f:/perllib/lib/Carp.pm'.

and restart debugger by C<R> command (if possible).  One can use C<b
compile subname> for the same purpose.

=head2 Debugger Customization

Most probably you do not want to modify the debugger, it contains enough
hooks to satisfy most needs.  You may change the behaviour of debugger
from the debugger itself, using C<O>ptions, from the command line via
C<PERLDB_OPTS> environment variable, and from I<customization files>.

You can do some customization by setting up a F<.perldb> file which
contains initialization code.  For instance, you could make aliases
like these (the last one is one people expect to be there):

    $DB::alias{'len'}  = 's/^len(.*)/p length($1)/';
    $DB::alias{'stop'} = 's/^stop (at|in)/b/';
    $DB::alias{'ps'}   = 's/^ps\b/p scalar /';
    $DB::alias{'quit'} = 's/^quit(\s*)/exit\$/';

One changes options from F<.perldb> file via calls like this one;

    parse_options("NonStop=1 LineInfo=db.out AutoTrace=1 frame=2");

(the code is executed in the package C<DB>).  Note that F<.perldb> is
processed before processing C<PERLDB_OPTS>.  If F<.perldb> defines the
subroutine C<afterinit>, it is called after all the debugger
initialization ends.  F<.perldb> may be contained in the current
directory, or in the C<LOGDIR>/C<HOME> directory.
d219 1
a219 1
to set your C<PERL5DB> environment variable to say something like this:
d223 4
a226 2
As the last resort, one can use C<PERL5DB> to customize debugger by
directly setting internal variables or calling debugger functions.
d228 5
a232 137
=head2 Readline Support

As shipped, the only command line history supplied is a simplistic one
that checks for leading exclamation points.  However, if you install
the Term::ReadKey and Term::ReadLine modules from CPAN, you will
have full editing capabilities much like GNU I<readline>(3) provides.
Look for these in the F<modules/by-module/Term> directory on CPAN.

A rudimentary command line completion is also available.
Unfortunately, the names of lexical variables are not available for
completion.

=head2 Editor Support for Debugging

If you have GNU B<emacs> installed on your system, it can interact with
the Perl debugger to provide an integrated software development
environment reminiscent of its interactions with C debuggers.

Perl is also delivered with a start file for making B<emacs> act like a
syntax-directed editor that understands (some of) Perl's syntax.  Look in
the I<emacs> directory of the Perl source distribution.

(Historically, a similar setup for interacting with B<vi> and the
X11 window system had also been available, but at the time of this
writing, no debugger support for B<vi> currently exists.)

=head2 The Perl Profiler

If you wish to supply an alternative debugger for Perl to run, just
invoke your script with a colon and a package argument given to the B<-d>
flag.  One of the most popular alternative debuggers for Perl is
B<DProf>, the Perl profiler.   As of this writing, B<DProf> is not
included with the standard Perl distribution, but it is expected to
be included soon, for certain values of "soon".

Meanwhile, you can fetch the Devel::Dprof module from CPAN.  Assuming
it's properly installed on your system, to profile your Perl program in
the file F<mycode.pl>, just type:

    perl -d:DProf mycode.pl

When the script terminates the profiler will dump the profile information
to a file called F<tmon.out>.  A tool like B<dprofpp> (also supplied with
the Devel::DProf package) can be used to interpret the information which is
in that profile.

=head2 Debugger support in perl

When you call the B<caller> function (see L<perlfunc/caller>) from the
package DB, Perl sets the array @@DB::args to contain the arguments the
corresponding stack frame was called with.

If perl is run with B<-d> option, the following additional features
are enabled (cf. L<perlvar/$^P>):

=over

=item *

Perl inserts the contents of C<$ENV{PERL5DB}> (or C<BEGIN {require
'perl5db.pl'}> if not present) before the first line of the
application.

=item *

The array C<@@{"_E<lt>$filename"}> is the line-by-line contents of
$filename for all the compiled files.  Same for C<eval>ed strings which
contain subroutines, or which are currently executed.  The C<$filename>
for C<eval>ed strings looks like C<(eval 34)>.

=item *

The hash C<%{"_E<lt>$filename"}> contains breakpoints and action (it is
keyed by line number), and individual entries are settable (as opposed
to the whole hash).  Only true/false is important to Perl, though the
values used by F<perl5db.pl> have the form
C<"$break_condition\0$action">.  Values are magical in numeric context:
they are zeros if the line is not breakable.

Same for evaluated strings which contain subroutines, or which are
currently executed.  The $filename for C<eval>ed strings looks like
C<(eval 34)>.

=item *

The scalar C<${"_E<lt>$filename"}> contains C<"_E<lt>$filename">.  Same for
evaluated strings which contain subroutines, or which are currently
executed.  The $filename for C<eval>ed strings looks like C<(eval
34)>.

=item *

After each C<require>d file is compiled, but before it is executed,
C<DB::postponed(*{"_E<lt>$filename"})> is called (if subroutine
C<DB::postponed> exists).  Here the $filename is the expanded name of
the C<require>d file (as found in values of %INC).

=item *

After each subroutine C<subname> is compiled existence of
C<$DB::postponed{subname}> is checked.  If this key exists,
C<DB::postponed(subname)> is called (if subroutine C<DB::postponed>
exists).

=item *

A hash C<%DB::sub> is maintained, with keys being subroutine names,
values having the form C<filename:startline-endline>.  C<filename> has
the form C<(eval 31)> for subroutines defined inside C<eval>s.

=item *

When execution of the application reaches a place that can have
a breakpoint, a call to C<DB::DB()> is performed if any one of
variables $DB::trace, $DB::single, or $DB::signal is true. (Note that
these variables are not C<local>izable.) This feature is disabled when
the control is inside C<DB::DB()> or functions called from it (unless
C<$^D & (1E<lt>E<lt>30)>).

=item *

When execution of the application reaches a subroutine call, a call
to C<&DB::sub>(I<args>) is performed instead, with C<$DB::sub> being
the name of the called subroutine. (Unless the subroutine is compiled
in the package C<DB>.)

=back

Note that if C<&DB::sub> needs some external data to be setup for it
to work, no subroutine call is possible until this is done.  For the
standard debugger C<$DB::deep> (how many levels of recursion deep into
the debugger you can go before a mandatory break) gives an example of
such a dependency.

The minimal working debugger consists of one line

  sub DB::DB {}
a233 53
which is quite handy as contents of C<PERL5DB> environment
variable:

  env "PERL5DB=sub DB::DB {}" perl -d your-script

Another (a little bit more useful) minimal debugger can be created
with the only line being

  sub DB::DB {print ++$i; scalar <STDIN>}

This debugger would print the sequential number of encountered
statement, and would wait for your C<CR> to continue.

The following debugger is quite functional:

  {
    package DB;
    sub DB  {}
    sub sub {print ++$i, " $sub\n"; &$sub}
  }

It prints the sequential number of subroutine call and the name of the
called subroutine.  Note that C<&DB::sub> should be compiled into the
package C<DB>.

=head2 Debugger Internals

At the start, the debugger reads your rc file (F<./.perldb> or
F<~/.perldb> under Unix), which can set important options.  This file may
define a subroutine C<&afterinit> to be executed after the debugger is
initialized.

After the rc file is read, the debugger reads environment variable
PERLDB_OPTS and parses it as a rest of C<O ...> line in debugger prompt.

It also maintains magical internal variables, such as C<@@DB::dbline>,
C<%DB::dbline>, which are aliases for C<@@{"::_<current_file"}>
C<%{"::_<current_file"}>.  Here C<current_file> is the currently
selected (with the debugger's C<f> command, or by flow of execution)
file.

Some functions are provided to simplify customization.  See L<"Debugger
Customization"> for description of C<DB::parse_options(string)>.  The
function C<DB::dump_trace(skip[, count])> skips the specified number
of frames, and returns a list containing info about the caller
frames (all if C<count> is missing).  Each entry is a hash with keys
C<context> (C<$> or C<@@>), C<sub> (subroutine name, or info about
eval), C<args> (C<undef> or a reference to an array), C<file>, and
C<line>.

The function C<DB::print_trace(FH, skip[, count[, short]])> prints
formatted info about caller frames.  The last two functions may be
convenient as arguments to C<E<lt>>, C<E<lt>E<lt>> commands.
d239 1
a239 393
=head2 BUGS

You cannot get the stack frame information or otherwise debug functions
that were not compiled by Perl, such as C or C++ extensions.

If you alter your @@_ arguments in a subroutine (such as with B<shift>
or B<pop>, the stack backtrace will not show the original values.

=head1 Debugging Perl memory usage

Perl is I<very> frivolous with memory.  There is a saying that to
estimate memory usage of Perl, assume a reasonable algorithm of
allocation, and multiply your estimates by 10.  This is not absolutely
true, but may give you a good grasp of what happens.

Say, an integer cannot take less than 20 bytes of memory, a float
cannot take less than 24 bytes, a string cannot take less than 32
bytes (all these examples assume 32-bit architectures, the result are
much worse on 64-bit architectures).  If a variable is accessed in two
of three different ways (which require an integer, a float, or a
string), the memory footprint may increase by another 20 bytes.  A
sloppy malloc() implementation will make these numbers yet more.

On the opposite end of the scale, a declaration like

  sub foo;

may take (on some versions of perl) up to 500 bytes of memory.

Off-the-cuff anecdotal estimates of a code bloat give a factor around
8.  This means that the compiled form of reasonable (commented
indented etc.)  code will take approximately 8 times more than the
disk space the code takes.

There are two Perl-specific ways to analyze the memory usage:
$ENV{PERL_DEBUG_MSTATS} and B<-DL> switch.  First one is available
only if perl is compiled with Perl's malloc(), the second one only if
Perl compiled with C<-DDEBUGGING> (as with giving C<-D optimise=-g>
option to F<Configure>).

=head2 Using C<$ENV{PERL_DEBUG_MSTATS}>

If your perl is using Perl's malloc(), and compiled with correct
switches (this is the default), then it will print memory usage
statistics after compiling your code (if C<$ENV{PERL_DEBUG_MSTATS}> >
1), and before termination of the script (if
C<$ENV{PERL_DEBUG_MSTATS}> >= 1).  The report format is similar to one
in the following example:

  env PERL_DEBUG_MSTATS=2 perl -e "require Carp"
  Memory allocation statistics after compilation: (buckets 4(4)..8188(8192)
     14216 free:   130   117    28     7     9   0   2     2   1 0 0
		437    61    36     0     5
     60924 used:   125   137   161    55     7   8   6    16   2 0 1
		 74   109   304    84    20
  Total sbrk(): 77824/21:119. Odd ends: pad+heads+chain+tail: 0+636+0+2048.
  Memory allocation statistics after execution:   (buckets 4(4)..8188(8192)
     30888 free:   245    78    85    13     6   2   1     3   2 0 1
		315   162    39    42    11
    175816 used:   265   176  1112   111    26  22  11    27   2 1 1
		196   178  1066   798    39
  Total sbrk(): 215040/47:145. Odd ends: pad+heads+chain+tail: 0+2192+0+6144.

It is possible to ask for such a statistic at arbitrary moment by
using Devel::Peek::mstats() (module Devel::Peek is available on CPAN).

Here is the explanation of different parts of the format:

=over

=item C<buckets SMALLEST(APPROX)..GREATEST(APPROX)>

Perl's malloc() uses bucketed allocations.  Every request is rounded
up to the closest bucket size available, and a bucket of these size is
taken from the pool of the buckets of this size.

The above line describes limits of buckets currently in use.  Each
bucket has two sizes: memory footprint, and the maximal size of user
data which may be put into this bucket.  Say, in the above example the
smallest bucket is both sizes 4.  The biggest bucket has usable size
8188, and the memory footprint 8192.  

With debugging Perl some buckets may have negative usable size.  This
means that these buckets cannot (and will not) be used.  For greater
buckets the memory footprint may be one page greater than a power of
2.  In such a case the corresponding power of two is printed instead
in the C<APPROX> field above.

=item Free/Used

The following 1 or 2 rows of numbers correspond to the number of
buckets of each size between C<SMALLEST> and C<GREATEST>.  In the
first row the sizes (memory footprints) of buckets are powers of two
(or possibly one page greater).  In the second row (if present) the
memory footprints of the buckets are between memory footprints of two
buckets "above".  

Say, with the above example the memory footprints are (with current
algorithm)

     free:    8     16    32    64    128  256 512 1024 2048 4096 8192
	   4     12    24    48    80

With non-C<DEBUGGING> perl the buckets starting from C<128>-long ones
have 4-byte overhead, thus 8192-long bucket may take up to
8188-byte-long allocations.

=item C<Total sbrk(): SBRKed/SBRKs:CONTINUOUS>

The first two fields give the total amount of memory perl sbrk()ed,
and number of sbrk()s used.  The third number is what perl thinks
about continuity of returned chunks.  As far as this number is
positive, malloc() will assume that it is probable that sbrk() will
provide continuous memory.

The amounts sbrk()ed by external libraries is not counted.

=item C<pad: 0>

The amount of sbrk()ed memory needed to keep buckets aligned.

=item C<heads: 2192>

While memory overhead of bigger buckets is kept inside the bucket, for
smaller buckets it is kept in separate areas.  This field gives the
total size of these areas.

=item C<chain: 0>

malloc() may want to subdivide a bigger bucket into smaller buckets.
If only a part of the deceased-bucket is left non-subdivided, the rest
is kept as an element of a linked list.  This field gives the total
size of these chunks.

=item C<tail: 6144>

To minimize amount of sbrk()s malloc() asks for more memory.  This
field gives the size of the yet-unused part, which is sbrk()ed, but
never touched.

=back

=head2 Example of using B<-DL> switch

Below we show how to analyse memory usage by 

  do 'lib/auto/POSIX/autosplit.ix';

The file in question contains a header and 146 lines similar to

  sub getcwd ;

B<Note:> I<the discussion below supposes 32-bit architecture.  In the
newer versions of perl the memory usage of the constructs discussed
here is much improved, but the story discussed below is a real-life
story.  This story is very terse, and assumes more than cursory
knowledge of Perl internals.>

Here is the itemized list of Perl allocations performed during parsing
of this file:

 !!! "after" at test.pl line 3.
    Id  subtot   4   8  12  16  20  24  28  32  36  40  48  56  64  72  80 80+
  0 02   13752   .   .   .   . 294   .   .   .   .   .   .   .   .   .   .   4
  0 54    5545   .   .   8 124  16   .   .   .   1   1   .   .   .   .   .   3
  5 05      32   .   .   .   .   .   .   .   1   .   .   .   .   .   .   .   .
  6 02    7152   .   .   .   .   .   .   .   .   .   . 149   .   .   .   .   .
  7 02    3600   .   .   .   .   . 150   .   .   .   .   .   .   .   .   .   .
  7 03      64   .  -1   .   1   .   .   2   .   .   .   .   .   .   .   .   .
  7 04    7056   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   7
  7 17   38404   .   .   .   .   .   .   .   1   .   . 442 149   .   . 147   .
  9 03    2078  17 249  32   .   .   .   .   2   .   .   .   .   .   .   .   .


To see this list insert two C<warn('!...')> statements around the call:

  warn('!');
  do 'lib/auto/POSIX/autosplit.ix';
  warn('!!! "after"');

and run it with B<-DL> option.  The first warn() will print memory
allocation info before the parsing of the file, and will memorize the
statistics at this point (we ignore what it prints). The second warn()
will print increments w.r.t. this memorized statistics.  This is the
above printout.

Different I<Id>s on the left correspond to different subsystems of
perl interpreter, they are just first argument given to perl memory
allocation API New().  To find what C<9 03> means C<grep> the perl
source for C<903>.  You will see that it is F<util.c>, function
savepvn().  This function is used to store a copy of existing chunk of
memory.  Using C debugger, one can see that it is called either
directly from gv_init(), or via sv_magic(), and gv_init() is called
from gv_fetchpv() - which is called from newSUB().

B<Note:> to reach this place in debugger and skip all the calls to
savepvn during the compilation of the main script, set a C breakpoint
in Perl_warn(), C<continue> this point is reached, I<then> set
breakpoint in Perl_savepvn().  Note that you may need to skip a
handful of Perl_savepvn() which do not correspond to mass production
of CVs (there are more C<903> allocations than 146 similar lines of
F<lib/auto/POSIX/autosplit.ix>).  Note also that C<Perl_> prefixes are
added by macroization code in perl header files to avoid conflicts
with external libraries.

Anyway, we see that C<903> ids correspond to creation of globs, twice
per glob - for glob name, and glob stringification magic.

Here are explanations for other I<Id>s above: 

=over

=item C<717> 

is for creation of bigger C<XPV*> structures.  In the above case it
creates 3 C<AV> per subroutine, one for a list of lexical variable
names, one for a scratchpad (which contains lexical variables and
C<targets>), and one for the array of scratchpads needed for
recursion.  

It also creates a C<GV> and a C<CV> per subroutine (all called from
start_subparse()).

=item C<002>

Creates C array corresponding to the C<AV> of scratchpads, and the
scratchpad itself (the first fake entry of this scratchpad is created
though the subroutine itself is not defined yet).

It also creates C arrays to keep data for the stash (this is one HV,
but it grows, thus there are 4 big allocations: the big chunks are not
freed, but are kept as additional arenas for C<SV> allocations).

=item C<054>

creates a C<HEK> for the name of the glob for the subroutine (this
name is a key in a I<stash>).

Big allocations with this I<Id> correspond to allocations of new
arenas to keep C<HE>.

=item C<602>

creates a C<GP> for the glob for the subroutine.

=item C<702>

creates the C<MAGIC> for the glob for the subroutine.

=item C<704>

creates I<arenas> which keep SVs.

=back

=head2 B<-DL> details

If Perl is run with B<-DL> option, then warn()s which start with `!'
behave specially.  They print a list of I<categories> of memory
allocations, and statistics of allocations of different sizes for
these categories.

If warn() string starts with

=over

=item C<!!!> 

print changed categories only, print the differences in counts of allocations;

=item C<!!> 

print grown categories only; print the absolute values of counts, and totals;

=item C<!>

print nonempty categories, print the absolute values of counts and totals.

=back

=head2 Limitations of B<-DL> statistic

If an extension or an external library does not use Perl API to
allocate memory, these allocations are not counted.

=head1 Debugging regular expressions

There are two ways to enable debugging output for regular expressions.

If your perl is compiled with C<-DDEBUGGING>, you may use the
B<-Dr> flag on the command line.

Otherwise, one can C<use re 'debug'>, which has effects both at
compile time, and at run time (and is I<not> lexically scoped).

=head2 Compile-time output

The debugging output for the compile time looks like this:

  compiling RE `[bc]d(ef*g)+h[ij]k$'
  size 43 first at 1
     1: ANYOF(11)
    11: EXACT <d>(13)
    13: CURLYX {1,32767}(27)
    15:   OPEN1(17)
    17:     EXACT <e>(19)
    19:     STAR(22)
    20:       EXACT <f>(0)
    22:     EXACT <g>(24)
    24:   CLOSE1(26)
    26:   WHILEM(0)
    27: NOTHING(28)
    28: EXACT <h>(30)
    30: ANYOF(40)
    40: EXACT <k>(42)
    42: EOL(43)
    43: END(0)
  anchored `de' at 1 floating `gh' at 3..2147483647 (checking floating)
				    stclass `ANYOF' minlen 7

The first line shows the pre-compiled form of the regexp, and the
second shows the size of the compiled form (in arbitrary units,
usually 4-byte words) and the label I<id> of the first node which
does a match.

The last line (split into two lines in the above) contains the optimizer
info.  In the example shown, the optimizer found that the match 
should contain a substring C<de> at the offset 1, and substring C<gh>
at some offset between 3 and infinity.  Moreover, when checking for
these substrings (to abandon impossible matches quickly) it will check
for the substring C<gh> before checking for the substring C<de>.  The
optimizer may also use the knowledge that the match starts (at the
C<first> I<id>) with a character class, and the match cannot be
shorter than 7 chars.

The fields of interest which may appear in the last line are

=over

=item C<anchored> I<STRING> C<at> I<POS>

=item C<floating> I<STRING> C<at> I<POS1..POS2>

see above;

=item C<matching floating/anchored>

which substring to check first;

=item C<minlen>

the minimal length of the match;

=item C<stclass> I<TYPE>

The type of the first matching node.

=item C<noscan>

which advises to not scan for the found substrings;

=item C<isall>

which says that the optimizer info is in fact all that the regular
expression contains (thus one does not need to enter the RE engine at
all);

=item C<GPOS>

if the pattern contains C<\G>;

=item C<plus> 

if the pattern starts with a repeated char (as in C<x+y>);

=item C<implicit>

if the pattern starts with C<.*>;

=item C<with eval> 

if the pattern contain eval-groups (see L<perlre/(?{ code })>);

=item C<anchored(TYPE)>

if the pattern may
match only at a handful of places  (with C<TYPE> being
C<BOL>, C<MBOL>, or C<GPOS>, see the table below).

=back

If a substring is known to match at end-of-line only, it may be
followed by C<$>, as in C<floating `k'$>.
d241 1
a241 161
The optimizer-specific info is used to avoid entering (a slow) RE
engine on strings which will definitely not match.  If C<isall> flag
is set, a call to the RE engine may be avoided even when optimizer
found an appropriate place for the match.

The rest of the output contains the list of I<nodes> of the compiled
form of the RE.  Each line has format 

C<   >I<id>: I<TYPE> I<OPTIONAL-INFO> (I<next-id>)

=head2 Types of nodes

Here is the list of possible types with short descriptions:

    # TYPE arg-description [num-args] [longjump-len] DESCRIPTION

    # Exit points
    END		no	End of program.
    SUCCEED	no	Return from a subroutine, basically.

    # Anchors:
    BOL		no	Match "" at beginning of line.
    MBOL	no	Same, assuming multiline.
    SBOL	no	Same, assuming singleline.
    EOS		no	Match "" at end of string.
    EOL		no	Match "" at end of line.
    MEOL	no	Same, assuming multiline.
    SEOL	no	Same, assuming singleline.
    BOUND	no	Match "" at any word boundary
    BOUNDL	no	Match "" at any word boundary
    NBOUND	no	Match "" at any word non-boundary
    NBOUNDL	no	Match "" at any word non-boundary
    GPOS	no	Matches where last m//g left off.

    # [Special] alternatives
    ANY		no	Match any one character (except newline).
    SANY	no	Match any one character.
    ANYOF	sv	Match character in (or not in) this class.
    ALNUM	no	Match any alphanumeric character
    ALNUML	no	Match any alphanumeric char in locale
    NALNUM	no	Match any non-alphanumeric character
    NALNUML	no	Match any non-alphanumeric char in locale
    SPACE	no	Match any whitespace character
    SPACEL	no	Match any whitespace char in locale
    NSPACE	no	Match any non-whitespace character
    NSPACEL	no	Match any non-whitespace char in locale
    DIGIT	no	Match any numeric character
    NDIGIT	no	Match any non-numeric character

    # BRANCH	The set of branches constituting a single choice are hooked
    #		together with their "next" pointers, since precedence prevents
    #		anything being concatenated to any individual branch.  The
    #		"next" pointer of the last BRANCH in a choice points to the
    #		thing following the whole choice.  This is also where the
    #		final "next" pointer of each individual branch points; each
    #		branch starts with the operand node of a BRANCH node.
    #
    BRANCH	node	Match this alternative, or the next...

    # BACK	Normal "next" pointers all implicitly point forward; BACK
    #		exists to make loop structures possible.
    # not used
    BACK	no	Match "", "next" ptr points backward.

    # Literals
    EXACT	sv	Match this string (preceded by length).
    EXACTF	sv	Match this string, folded (prec. by length).
    EXACTFL	sv	Match this string, folded in locale (w/len).

    # Do nothing
    NOTHING	no	Match empty string.
    # A variant of above which delimits a group, thus stops optimizations
    TAIL	no	Match empty string. Can jump here from outside.

    # STAR,PLUS	'?', and complex '*' and '+', are implemented as circular
    #		BRANCH structures using BACK.  Simple cases (one character
    #		per match) are implemented with STAR and PLUS for speed
    #		and to minimize recursive plunges.
    #
    STAR	node	Match this (simple) thing 0 or more times.
    PLUS	node	Match this (simple) thing 1 or more times.

    CURLY	sv 2	Match this simple thing {n,m} times.
    CURLYN	no 2	Match next-after-this simple thing 
    #			{n,m} times, set parenths.
    CURLYM	no 2	Match this medium-complex thing {n,m} times.
    CURLYX	sv 2	Match this complex thing {n,m} times.

    # This terminator creates a loop structure for CURLYX
    WHILEM	no	Do curly processing and see if rest matches.

    # OPEN,CLOSE,GROUPP	...are numbered at compile time.
    OPEN	num 1	Mark this point in input as start of #n.
    CLOSE	num 1	Analogous to OPEN.

    REF		num 1	Match some already matched string
    REFF	num 1	Match already matched string, folded
    REFFL	num 1	Match already matched string, folded in loc.

    # grouping assertions
    IFMATCH	off 1 2	Succeeds if the following matches.
    UNLESSM	off 1 2	Fails if the following matches.
    SUSPEND	off 1 1	"Independent" sub-RE.
    IFTHEN	off 1 1	Switch, should be preceeded by switcher .
    GROUPP	num 1	Whether the group matched.

    # Support for long RE
    LONGJMP	off 1 1	Jump far away.
    BRANCHJ	off 1 1	BRANCH with long offset.

    # The heavy worker
    EVAL	evl 1	Execute some Perl code.

    # Modifiers
    MINMOD	no	Next operator is not greedy.
    LOGICAL	no	Next opcode should set the flag only.

    # This is not used yet
    RENUM	off 1 1	Group with independently numbered parens.

    # This is not really a node, but an optimized away piece of a "long" node.
    # To simplify debugging output, we mark it as if it were a node
    OPTIMIZED	off	Placeholder for dump.

=head2 Run-time output

First of all, when doing a match, one may get no run-time output even
if debugging is enabled.  this means that the RE engine was never
entered, all of the job was done by the optimizer.

If RE engine was entered, the output may look like this:

  Matching `[bc]d(ef*g)+h[ij]k$' against `abcdefg__gh__'
    Setting an EVAL scope, savestack=3
     2 <ab> <cdefg__gh_>    |  1: ANYOF
     3 <abc> <defg__gh_>    | 11: EXACT <d>
     4 <abcd> <efg__gh_>    | 13: CURLYX {1,32767}
     4 <abcd> <efg__gh_>    | 26:   WHILEM
				0 out of 1..32767  cc=effff31c
     4 <abcd> <efg__gh_>    | 15:     OPEN1
     4 <abcd> <efg__gh_>    | 17:     EXACT <e>
     5 <abcde> <fg__gh_>    | 19:     STAR
			     EXACT <f> can match 1 times out of 32767...
    Setting an EVAL scope, savestack=3
     6 <bcdef> <g__gh__>    | 22:       EXACT <g>
     7 <bcdefg> <__gh__>    | 24:       CLOSE1
     7 <bcdefg> <__gh__>    | 26:       WHILEM
				    1 out of 1..32767  cc=effff31c
    Setting an EVAL scope, savestack=12
     7 <bcdefg> <__gh__>    | 15:         OPEN1
     7 <bcdefg> <__gh__>    | 17:         EXACT <e>
       restoring \1 to 4(4)..7
				    failed, try continuation...
     7 <bcdefg> <__gh__>    | 27:         NOTHING
     7 <bcdefg> <__gh__>    | 28:         EXACT <h>
				    failed...
				failed...

The most significant information in the output is about the particular I<node>
of the compiled RE which is currently being tested against the target string.
The format of these lines is
d243 2
a244 1
C<    >I<STRING-OFFSET> <I<PRE-STRING>> <I<POST-STRING>>   |I<ID>:  I<TYPE>
d246 1
a246 2
The I<TYPE> info is indented with respect to the backtracking level.
Other incidental information appears interspersed within.
d248 2
a249 1
=cut
@


1.1.1.3
log
@virgin perl 5.6.0
@
text
@d11 9
d28 1
a28 1
    $ perl -d -e 42
d30 1
a30 1
In Perl, the debugger is not a separate program the way it usually is in the
d35 1
a35 1
preloads a special Perl library file containing the debugger.
d44 2
a45 2
(C<eval>'d) as Perl code in the current package.  (The debugger
uses the DB package for keeping its own state information.)
d47 3
a49 6
For any text entered at the debugger prompt, leading and trailing whitespace
is first stripped before further processing.  If a debugger command
coincides with some function in your own program, merely precede the
function with something that doesn't look like a debugger command, such
as a leading C<;> or perhaps a C<+>, or by wrapping it with parentheses
or braces.
d67 2
a68 2
past your screen, precede the command with a leading pipe symbol so
that it's run through your pager, as in
d77 1
a77 1
because this is just Perl's own C<print> function, this means that nested
d87 1
a87 2
recursively, unlike the real C<print> function in Perl.
See L<Dumpvalue> if you'd like to do this yourself.
d89 1
a89 2
The output format is governed by multiple options described under
L<"Options">.
d93 5
a97 5
Display all (or some) variables in package (defaulting to C<main>) 
using a data pretty-printer (hashes show their keys and values so
you see what's what, control characters are made printable, etc.).
Make sure you don't put the type specifier (like C<$>) there, just
the symbol names, like this:
d101 4
a104 1
Use C<~pattern> and C<!pattern> for positive and negative regexes.
d106 1
a106 1
This is similar to calling the C<x> command on each applicable var.
d118 1
a118 1
Single step.  Executes until the beginning of another
d124 1
a124 1
Next.  Executes over subroutine calls, until the beginning
d129 1
a129 6
=item r

Continue until the return from the current subroutine.
Dump the return value if the C<PrintRet> option is set (default).

=item <CR>
d156 1
a156 2
List first window of lines from subroutine.  I<subname> may
be a variable that contains a code reference.
d168 2
a169 2
Return the internal debugger pointer to the line last
executed, and print out that line.
d173 3
a175 9
Switch to viewing a different file or C<eval> statement.  If I<filename>
is not a full pathname found in the values of %INC, it is considered 
a regex.

C<eval>ed strings (when accessible) are considered to be filenames:
C<f (eval 7)> and C<f eval 7\b> access the body of the 7th C<eval>ed string
(in the order of execution).  The bodies of the currently executed C<eval>
and of C<eval>ed strings that define subroutines are saved and thus
accessible.
d179 1
a179 1
Search forwards for pattern (a Perl regex); final / is optional.
d189 1
a189 1
=item S [[!]regex]
d191 1
a191 1
List subroutine names [not] matching the regex.
d195 1
a195 1
Toggle trace mode (see also the C<AutoTrace> option).
d199 34
a232 2
Trace through execution of C<expr>.
See L<perldebguts/"Frame Listing Output Examples"> for examples.
d236 5
a240 6
Set a breakpoint before the given line.  If I<line> is omitted, set a
breakpoint on the line about to be executed.  If a condition
is specified, it's evaluated each time the statement is reached: a
breakpoint is taken only if the condition is true.  Breakpoints may
only be set on lines that begin an executable statement.  Conditions
don't use C<if>:
d248 1
a248 3
Set a breakpoint before the first line of the named subroutine.  I<subname> may
be a variable containing a code reference (in this case I<condition>
is not supported).
d252 1
a252 1
Set a breakpoint at first line of subroutine after it is compiled.
d256 2
a257 2
Set a breakpoint before the first executed line of the I<filename>,
which should be a full pathname found amongst the %INC values.
d261 2
a262 2
Sets a breakpoint before the first statement executed after the specified
subroutine is compiled.
d266 2
a267 2
Delete a breakpoint from the specified I<line>.  If I<line> is omitted, deletes
the breakpoint from the line about to be executed.
d275 1
a275 2
Set an action to be done before the line is executed.  If I<line> is
omitted, set an action on the line about to be executed.
a288 5
=item a [line]

Delete an action from the specified line.  If I<line> is omitted, delete
the action on the line that is about to be executed.

d293 1
a293 1
=item W expr
d295 1
a295 4
Add a global watch-expression.  We hope you know what one of these
is, because they're supposed to be obvious.  B<WARNING>: It is far
too easy to destroy your watch expressions by accidentally omitting
the I<expr>.
d301 1
a301 150
=item O booloption ...

Set each listed Boolean option to the value C<1>.

=item O anyoption? ...

Print out the value of one or more options.

=item O option=value ...

Set the value of one or more options.  If the value has internal
whitespace, it should be quoted.  For example, you could set C<O
pager="less -MQeicsNfr"> to call B<less> with those specific options.
You may use either single or double quotes, but if you do, you must
escape any embedded instances of same sort of quote you began with,
as well as any escaping any escapes that immediately precede that
quote but which are not meant to escape the quote itself.  In other
words, you follow single-quoting rules irrespective of the quote;
eg: C<O option='this isn\'t bad'> or C<O option="She said, \"Isn't
it?\"">.

For historical reasons, the C<=value> is optional, but defaults to
1 only where it is safe to do so--that is, mostly for Boolean
options.  It is always better to assign a specific value using C<=>.
The C<option> can be abbreviated, but for clarity probably should
not be.  Several options can be set together.  See L<"Options"> for
a list of these.

=item < ? 

List out all pre-prompt Perl command actions.

=item < [ command ]

Set an action (Perl command) to happen before every debugger prompt.
A multi-line command may be entered by backslashing the newlines.  
B<WARNING> If C<command> is missing, all actions are wiped out!

=item << command

Add an action (Perl command) to happen before every debugger prompt.
A multi-line command may be entered by backwhacking the newlines.

=item > ?

List out post-prompt Perl command actions.

=item > command

Set an action (Perl command) to happen after the prompt when you've
just given a command to return to executing the script.  A multi-line
command may be entered by backslashing the newlines (we bet you
couldn't've guessed this by now).  B<WARNING> If C<command> is
missing, all actions are wiped out!

=item >> command

Adds an action (Perl command) to happen after the prompt when you've
just given a command to return to executing the script.  A multi-line
command may be entered by slackbashing the newlines.

=item { ?

List out pre-prompt debugger commands.

=item { [ command ]

Set an action (debugger command) to happen before every debugger prompt.
A multi-line command may be entered in the customary fashion.  
B<WARNING> If C<command> is missing, all actions are wiped out!

Because this command is in some senses new, a warning is issued if
you appear to have accidentally entered a block instead.  If that's
what you mean to do, write it as with C<;{ ... }> or even 
C<do { ... }>.

=item {{ command

Add an action (debugger command) to happen before every debugger prompt.
A multi-line command may be entered, if you can guess how: see above.

=item ! number

Redo a previous command (defaults to the previous command).

=item ! -number

Redo number'th previous command.

=item ! pattern

Redo last command that started with pattern.
See C<O recallCommand>, too.

=item !! cmd

Run cmd in a subprocess (reads from DB::IN, writes to DB::OUT) See
C<O shellBang>, also.  Note that the user's current shell (well,
their C<$ENV{SHELL}> variable) will be used, which can interfere
with proper interpretation of exit status or signal and coredump
information.

=item H -number

Display last n commands.  Only commands longer than one character are
listed.  If I<number> is omitted, list them all.

=item q or ^D

Quit.  ("quit" doesn't work for this, unless you've made an alias)
This is the only supported way to exit the debugger, though typing
C<exit> twice might work.

Set the C<inhibit_exit> option to 0 if you want to be able to step
off the end the script.  You may also need to set $finished to 0 
if you want to step through global destruction.

=item R

Restart the debugger by C<exec()>ing a new session.  We try to maintain
your history across this, but internal settings and command-line options
may be lost.

The following setting are currently preserved: history, breakpoints,
actions, debugger options, and the Perl command-line
options B<-w>, B<-I>, and B<-e>.

=item |dbcmd

Run the debugger command, piping DB::OUT into your current pager.

=item ||dbcmd

Same as C<|dbcmd> but DB::OUT is temporarily C<select>ed as well.

=item = [alias value]

Define a command alias, like

    = quit q

or list current aliases.

=item command

Execute command as a Perl statement.  A trailing semicolon will be
supplied.  If the Perl statement would otherwise be confused for a
Perl debugger, use a leading semicolon, too.

=item m expr
d303 2
a304 31
List which methods may be called on the result of the evaluated
expression.  The expression may evaluated to a reference to a 
blessed object, or to a package name.

=item man [manpage]

Despite its name, this calls your system's default documentation
viewer on the given page, or on the viewer itself if I<manpage> is
omitted.  If that viewer is B<man>, the current C<Config> information
is used to invoke B<man> using the proper MANPATH or S<B<-M>
I<manpath>> option.  Failed lookups of the form C<XXX> that match
known manpages of the form I<perlXXX> will be retried.  This lets
you type C<man debug> or C<man op> from the debugger.

On systems traditionally bereft of a usable B<man> command, the
debugger invokes B<perldoc>.  Occasionally this determination is
incorrect due to recalcitrant vendors or rather more felicitously,
to enterprising users.  If you fall into either category, just
manually set the $DB::doccmd variable to whatever viewer to view
the Perl documentation on your system.  This may be set in an rc
file, or through direct assignment.  We're still waiting for a
working example of something along the lines of:

    $DB::doccmd = 'netscape -remote http://something.here/';

=back

=head2 Configurable Options

The debugger has numerous options settable using the C<O> command,
either interactively or from the environment or an rc file.
d311 1
a311 1
default, both are set to C<!>, which is unfortunate.
d315 3
a317 6
Program to use for output of pager-piped commands (those beginning
with a C<|> character.)  By default, C<$ENV{PAGER}> will be used.
Because the debugger uses your current terminal characteristics
for bold and underlining, if the chosen pager does not pass escape
sequences through unchanged, the output of some debugger commands
will not be readable when sent through the pager.
d325 8
a332 17
Level of verbosity.  By default, the debugger leaves your exceptions
and warnings alone, because altering them can break correctly running
programs.  It will attempt to print a message when uncaught INT, BUS, or
SEGV signals arrive.  (But see the mention of signals in L<BUGS> below.)

To disable this default safe mode, set these values to something higher
than 0.  At a level of 1, you get backtraces upon receiving any kind
of warning (this is often annoying) or exception (this is
often valuable).  Unfortunately, the debugger cannot discern fatal
exceptions from non-fatal ones.  If C<dieLevel> is even 1, then your
non-fatal exceptions are also traced and unceremoniously altered if they
came from C<eval'd> strings or from any kind of C<eval> within modules
you're attempting to load.  If C<dieLevel> is 2, the debugger doesn't
care where they came from:  It usurps your exception handler and prints
out a trace, then modifies all exceptions with its own embellishments.
This may perhaps be useful for some tracing purposes, but tends to hopelessly
destroy any program that takes its exception handling seriously.
d342 1
a342 4
C<|visual_perl_db>), then a short message is used.  This is the
mechanism used to interact with a slave editor or visual debugger,
such as the special C<vi> or C<emacs> hooks, or the C<ddd> graphical
debugger.
d350 1
a350 1
Print return value after C<r> command if set (default).
d354 1
a354 4
Affects screen appearance of the command line (see L<Term::ReadLine>).
There is currently no way to disable these, which can render
some output illegible on some displays, or with some pagers.
This is considered a bug.
d358 1
a358 1
Affects the printing of messages upon entry and exit from subroutines.  If
d360 1
a360 1
on exit might be useful if interspersed with other messages.)
d362 4
a365 4
If C<frame & 4>, arguments to functions are printed, plus context
and caller info.  If C<frame & 8>, overloaded C<stringify> and
C<tie>d C<FETCH> is enabled on the printed arguments.  If C<frame
& 16>, the return value from the subroutine is printed.
d372 1
a372 1
Length to truncate the argument list when the C<frame> option's
d388 1
a388 1
Change the style of array and hash output.  If C<compactDump>, short array
d409 4
a412 4
Change the style of string dump.  The default value for C<quote>
is C<auto>; one can enable double-quotish or single-quotish format
by setting it to C<"> or C<'>, respectively.  By default, characters
with their high bit set are printed verbatim.
d416 2
a417 3
Rudimentary per-package memory usage dump.  Calculates total
size of strings found in variables in the package.  This does not
include lexicals in a module's file scope, or lost in closures.
d421 2
a422 2
During startup, options are initialized from C<$ENV{PERLDB_OPTS}>.
You may place the initialization options C<TTY>, C<noTTY>,
d425 1
a425 1
If your rc file contains:
d427 1
a427 1
  parse_options("NonStop=1 LineInfo=db.out AutoTrace");
d429 3
a431 3
then your script will run without human intervention, putting trace
information into the file I<db.out>.  (If you interrupt it, you'd
better reset C<LineInfo> to F</dev/tty> if you expect to see anything.)
d441 11
a451 13
If set, the debugger goes into C<NonStop> mode and will not connect to a TTY.  If
interrupted (or if control goes to the debugger via explicit setting of
$DB::signal or $DB::single from the Perl script), it connects to a TTY
specified in the C<TTY> option at startup, or to a tty found at
runtime using the C<Term::Rendezvous> module of your choice.

This module should implement a method named C<new> that returns an object
with two methods: C<IN> and C<OUT>.  These should return filehandles to use
for debugging input and output correspondingly.  The C<new> method should
inspect an argument containing the value of C<$ENV{PERLDB_NOTTY}> at
startup, or C<"/tmp/perldbtty$$"> otherwise.  This file is not 
inspected for proper ownership, so security hazards are theoretically
possible.
d455 2
a456 2
If false, readline support in the debugger is disabled in order
to debug applications that themselves use ReadLine.
d460 1
a460 1
If set, the debugger goes into non-interactive mode until interrupted, or
d467 1
a467 1
    $ PERLDB_OPTS="NonStop frame=2" perl -d myprogram
d469 14
a482 14
That will run the script B<myprogram> without human intervention,
printing out the call tree with entry and exit points.  Note that
C<NonStop=1 frame=2> is equivalent to C<N f=2>, and that originally,
options could be uniquely abbreviated by the first letter (modulo
the C<Dump*> options).  It is nevertheless recommended that you
always spell them out in full for legibility and future compatibility.

Other examples include

    $ PERLDB_OPTS="NonStop frame=2" perl -d myprogram

which runs script non-interactively, printing info on each entry
into a subroutine and each executed line into the file named F<listing>.
(If you interrupt it, you would better reset C<LineInfo> to something
a484 2
Other examples include (using standard shell syntax to show environment
variable settings):
d486 1
a486 2
  $ ( PERLDB_OPTS="NonStop frame=1 AutoTrace LineInfo=tperl.out"
      perl -d myprogram )
d488 3
a490 3
which may be useful for debugging a program that uses C<Term::ReadLine>
itself.  Do not forget to detach your shell from the TTY in the window that
corresponds to F</dev/ttyXX>, say, by issuing a command like
d494 114
a607 1
See L<perldebguts/"Debugger Internals"> for details.
d623 7
a629 8
where that number is the command number, and which you'd use to
access with the built-in B<csh>-like history mechanism.  For example,
C<!17> would repeat command number 17.  The depth of the angle
brackets indicates the nesting depth of the debugger.  You could
get more than one set of brackets, for example, if you'd already
at a breakpoint and then printed the result of a function call that
itself has a breakpoint, or you step into an expression via C<s/n/t
expression> command.
d634 2
a635 2
definition with several statements or a format, escape the newline
that would normally end the debugger command with a backslash.
d658 14
a671 16
The left-hand character up there indicates the context in which the
function was called, with C<$> and C<@@> meaning scalar or list
contexts respectively, and C<.> meaning void context (which is
actually a sort of scalar context).  The display above says
that you were in the function C<main::infested> when you ran the
stack dump, and that it was called in scalar context from line
10 of the file I<Ambulation.pm>, but without any arguments at all,
meaning it was called as C<&infested>.  The next stack frame shows
that the function C<Ambulation::legs> was called in list context
from the I<camel_flea> file with four arguments.  The last stack
frame shows that C<main::pests> was called in scalar context,
also from I<camel_flea>, but from line 4.

If you execute the C<T> command from inside an active C<use>
statement, the backtrace will contain both a C<require> frame and
an C<eval>) frame.
d673 1
a673 1
=item Line Listing Format
d675 1
a675 1
This shows the sorts of output the C<l> command can produce:
d689 3
a691 3
Breakable lines are marked with C<:>.  Lines with breakpoints are
marked by C<b> and those with actions by C<a>.  The line that's
about to be executed is marked by C<< ==> >>.
d695 145
a839 3
When the C<frame> option is set, the debugger would print entered (and
optionally exited) subroutines in different styles.  See L<perldebguts>
for incredibly long examples of these.
d845 5
a849 5
If you have compile-time executable statements (such as code within
BEGIN and CHECK blocks or C<use> statements), these will I<not> be
stopped by debugger, although C<require>s and INIT blocks will, and
compile-time statements can be traced with C<AutoTrace> option set
in C<PERLDB_OPTS>).  From your own Perl code, however, you can
d855 1
a855 1
If you set C<$DB::single> to 2, it's equivalent to having
d860 2
a861 2
Another way to debug compile-time code is to start the debugger, set a
breakpoint on the I<load> of some module:
d866 1
a866 1
and then restart the debugger using the C<R> command (if possible).  One can use C<b
d871 4
a874 5
The debugger probably contains enough configuration hooks that you
won't ever have to modify it yourself.  You may change the behaviour
of debugger from within the debugger using its C<O> command, from
the command line via the C<PERLDB_OPTS> environment variable, and
from customization files.
d876 1
a876 1
You can do some customization by setting up a F<.perldb> file, which
d883 1
a883 1
    $DB::alias{'quit'} = 's/^quit(\s*)/exit/';
d885 1
a885 1
You can change options from F<.perldb> by using calls like this one;
d889 1
a889 1
The code is executed in the package C<DB>.  Note that F<.perldb> is
d891 1
a891 1
subroutine C<afterinit>, that function is called after debugger
d893 5
a897 9
directory, or in the home directory.  Because this file is sourced
in by Perl and may contain arbitrary commands, for security reasons,
it must be owned by the superuser or the current user, and writable
by no one but its owner.

If you want to modify the debugger, copy F<perl5db.pl> from the
Perl library to another name and hack it to your heart's content.
You'll then want to set your C<PERL5DB> environment variable to say
something like this:
d901 2
a902 6
As a last resort, you could also use C<PERL5DB> to customize the debugger
by directly setting internal variables or calling debugger functions.

Note that any variables and functions that are not documented in
this document (or in L<perldebguts>) are considered for internal
use only, and as such are subject to change without notice.
d906 1
a906 1
As shipped, the only command-line history supplied is a simplistic one
a910 1
These do not support normal B<vi> command-line editing, however.
d912 1
a912 1
A rudimentary command-line completion is also available.
d918 11
a928 22
If you have the FSF's version of B<emacs> installed on your system,
it can interact with the Perl debugger to provide an integrated
software development environment reminiscent of its interactions
with C debuggers.

Perl comes with a start file for making B<emacs> act like a
syntax-directed editor that understands (some of) Perl's syntax.
Look in the I<emacs> directory of the Perl source distribution.

A similar setup by Tom Christiansen for interacting with any
vendor-shipped B<vi> and the X11 window system is also available.
This works similarly to the integrated multiwindow support that
B<emacs> provides, where the debugger drives the editor.  At the
time of this writing, however, that tool's eventual location in the
Perl distribution was uncertain.

Users of B<vi> should also look into B<vim> and B<gvim>, the mousey
and windy version, for coloring of Perl keywords.  

Note that only perl can truly parse Perl, so all such CASE tools
fall somewhat short of the mark, especially if you don't program
your Perl as a C programmer might.
d933 451
a1383 12
invoke your script with a colon and a package argument given to the
B<-d> flag.  The most popular alternative debuggers for Perl is the
Perl profiler.  Devel::DProf is now included with the standard Perl
distribution.  To profile your Perl program in the file F<mycode.pl>,
just type:

    $ perl -d:DProf mycode.pl

When the script terminates the profiler will dump the profile
information to a file called F<tmon.out>.  A tool like B<dprofpp>,
also supplied with the standard Perl distribution, can be used to
interpret the information in that profile.
d1387 63
a1449 14
C<use re 'debug'> enables you to see the gory details of how the
Perl regular expression engine works.  In order to understand this
typically voluminous output, one must not only have some idea about
about how regular expression matching works in general, but also
know how Perl's regular expressions are internally compiled into
an automaton.  These matters are explored in some detail in
L<perldebguts/"Debugging regular expressions">.

=head1 Debugging memory usage

Perl contains internal support for reporting its own memory usage,
but this is a fairly advanced concept that requires some understanding
of how memory allocation works.
See L<perldebguts/"Debugging Perl memory usage"> for the details.
d1451 1
a1451 1
=head1 SEE ALSO
d1453 207
a1659 1
You did try the B<-w> switch, didn't you?
d1661 1
a1661 25
L<perldebguts>,
L<re>,
L<DB>,
L<Devel::Dprof>,
L<dprofpp>,
L<Dumpvalue>,
and
L<perlrun>.

=head1 BUGS

You cannot get stack frame information or in any fashion debug functions
that were not compiled by Perl, such as those from C or C++ extensions.

If you alter your @@_ arguments in a subroutine (such as with C<shift>
or C<pop>, the stack backtrace will not show the original values.

The debugger does not currently work in conjunction with the B<-W>
command-line switch, because it itself is not free of warnings.

If you're in a slow syscall (like C<wait>ing, C<accept>ing, or C<read>ing
from your keyboard or a socket) and haven't set up your own C<$SIG{INT}>
handler, then you won't be able to CTRL-C your way back to the debugger,
because the debugger's own C<$SIG{INT}> handler doesn't understand that
it needs to raise an exception to longjmp(3) out of slow syscalls.
@


1.1.1.4
log
@stock perl 5.6.1
@
text
@d85 1
a85 1
L<"Configurable Options">.
d311 2
a312 2
not be.  Several options can be set together.  See L<"Configurable Options"> 
for a list of these.
d345 1
a345 1
command may be entered by backslashing the newlines.
a467 2
(./.perldb or ~/.perldb under Unix.)

d603 3
a605 5
After the rc file is read, the debugger reads the C<$ENV{PERLDB_OPTS}>
environment variable and parses this as the remainder of a `O ...'
line as one might enter at the debugger prompt.  You may place the
initialization options C<TTY>, C<noTTY>, C<ReadLine>, and C<NonStop>
there.
a768 5

Please be aware that code in debugger listings may not look the same
as your original source code.  Line directives and external source
filters can alter the code before Perl sees it, causing code to move
from its original positions or take on entirely different forms.
@


1.1.1.5
log
@stock perl 5.8.0 from CPAN
@
text
@a8 4

If you're new to the Perl debugger, you may prefer to read
L<perldebtut>, which is a tutorial introduction to the debugger .

a50 4
=item h

Prints out a summary help message

d53 1
a53 1
Prints out a help message for the given debugger command.
d55 4
a58 1
=item h h
d60 1
a60 3
The special argument of C<h h> produces the entire help page, which is quite long.

If the output of the C<h h> command (or any command, for that matter) scrolls
d64 1
a64 3
    DB> |h h

You may change the pager which is used via C<o pager=...> command.
d66 1
d77 1
a77 1
=item x [maxdepth] expr
d79 3
a81 4
Evaluates its expression in list context and dumps out the result in a
pretty-printed fashion.  Nested data structures are printed out
recursively, unlike the real C<print> function in Perl.  When dumping
hashes, you'll probably prefer 'x \%h' rather than 'x %h'.
a86 4
If the C<maxdepth> is included, it must be a numeral I<N>; the value is
dumped only I<N> levels deep, as if the C<dumpDepth> option had been
temporarily set to I<N>.

a104 10
=item y [level [vars]]

Display all (or some) lexical variables (mnemonic: C<mY> variables)
in the current scope or I<level> scopes higher.  You can limit the
variables that you see with I<vars> which works exactly as it does
for the C<V> and C<X> commands.  Requires the C<PadWalker> module
version 0.08 or higher; will warn if this isn't installed.  Output
is pretty-printed in the same style as for C<V> and the format is
controlled by the same options.

d161 1
a161 1
=item v [line]
d163 1
a163 1
View a few lines of code around the current line.
a184 1
The search is case-insensitive by default.
a188 1
The search is case-insensitive by default.
d190 1
a190 1
=item L [abw]
d192 1
a192 1
List (default all) actions, breakpoints and watch expressions
a206 4
=item b

Sets breakpoint on current line

d209 2
a210 1
Set a breakpoint before the given line.  If a condition
d240 1
a240 1
=item B line
d242 2
a243 1
Delete a breakpoint from the specified I<line>.  
d245 1
a245 1
=item B *
d266 1
a266 1
=item A line
d268 2
a269 1
Delete an action from the specified line.  
d271 1
a271 1
=item A *
d275 1
a275 1
=item w expr
d278 3
a280 3
is, because they're supposed to be obvious.  

=item W expr
d282 1
a282 3
Delete watch-expression

=item W *
d286 1
a286 5
=item o

Display all options

=item o booloption ...
d290 1
a290 1
=item o anyoption? ...
d294 1
a294 1
=item o option=value ...
d297 1
a297 1
whitespace, it should be quoted.  For example, you could set C<o
d304 1
a304 1
eg: C<o option='this isn\'t bad'> or C<o option="She said, \"Isn't
d378 1
a378 1
See C<o recallCommand>, too.
d383 1
a383 1
C<o shellBang>, also.  Note that the user's current shell (well,
a387 5
=item source file

Read and execute debugger commands from I<file>.
I<file> may itself contain C<source> commands.

a440 5
=item M

Displays all loaded modules and their versions


d466 1
a466 1
The debugger has numerous options settable using the C<o> command,
a557 4
=item C<windowSize>

Change the size of code list window (default is 10 lines).

a568 5
=item C<dumpDepth>

Limit recursion depth to N levels when dumping structures.
Negative values are interpreted as infinity.  Default: infinity.

d666 1
a666 1
    $ PERLDB_OPTS="NonStop LineInfo=listing frame=2" perl -d myprogram
d817 1
a817 1
of debugger from within the debugger using its C<o> command, from
d913 6
a918 6
C<use re 'debug'> enables you to see the gory details of how the Perl
regular expression engine works. In order to understand this typically
voluminous output, one must not only have some idea about how regular
expression matching works in general, but also know how Perl's regular
expressions are internally compiled into an automaton. These matters
are explored in some detail in
a931 1
L<perldebtut>,
d935 1
a935 1
L<Devel::DProf>,
d947 1
a947 1
or C<pop>), the stack backtrace will not show the original values.
@


1.1.1.6
log
@perl 5.8.2 from CPAN
@
text
@a41 6
Note that the said C<eval> is bound by an implicit scope. As a
result any newly introduced lexical variable or any modified
capture buffer content is lost after the eval. The debugger is a
nice environment to learn Perl, but if you interactively experiment using
material which should be in the same scope, stuff it in one line.

d354 1
a354 4

=item < * 

Delete all pre-prompt Perl command actions.
d370 2
a371 5
couldn't've guessed this by now). 

=item > * 

Delete all post-prompt Perl command actions.
d387 1
a393 4
=item { * 

Delete all pre-prompt debugger commands.

a892 9

You can mock TTY input to debugger by adding arbitrary commands to
@@DB::typeahead. For example, your F<.perldb> file might contain:

    sub afterinit { push @@DB::typeahead, "b 4", "b 6"; }

Which would attempt to set breakpoints on lines 4 and 6 immediately
after debugger initilization. Note that @@DB::typeahead is not a supported
interface and is subject to change in future releases.
@


1.1.1.7
log
@Import of stock perl 5.8.5
@
text
@d703 1
a703 1
startup, or C<".perldbtty$$"> otherwise.  This file is not 
@


1.1.1.8
log
@perl 5.8.6 from CPAN
@
text
@a1016 6
When debugging a script that uses #! and is thus normally found in
$PATH, the -S option causes perl to search $PATH for it, so you don't
have to type the path or `which $scriptname`.

  $ perl -Sd foo.pl

@


1.1.1.9
log
@perl 5.8.8 import
@
text
@a1 1
X<debug> X<debugger>
a21 1
X<-d>
a61 1
X<debugger command, h>
a82 1
X<debugger command, p>
a91 1
X<debugger command, x>
a106 1
X<debugger command, V>
d108 1
a108 1
Display all (or some) variables in package (defaulting to C<main>)
a120 1
X<debugger command, X>
a124 1
X<debugger command, y>
a134 1
X<debugger command, T> X<backtrace> X<stack, backtrace>
a138 1
X<debugger command, s> X<step>
a144 1
X<debugger command, n>
a151 1
X<debugger command, r>
a160 1
X<debugger command, c>
a165 1
X<debugger command, l>
a186 1
X<debugger command, ->
a190 1
X<debugger command, v>
a194 1
X<debugger command, .>
a199 1
X<debugger command, f>
d202 1
a202 1
is not a full pathname found in the values of %INC, it is considered
a221 1
X<debugger command, L>
a225 1
X<debugger command, S>
a229 1
X<debugger command, t>
a233 1
X<debugger command, t>
a238 2
X<breakpoint>
X<debugger command, b>
a242 2
X<breakpoint>
X<debugger command, b>
a254 2
X<breakpoint>
X<debugger command, b>
a260 2
X<breakpoint>
X<debugger command, b>
a264 2
X<breakpoint>
X<debugger command, b>
a269 2
X<breakpoint>
X<debugger command, b>
a274 2
X<breakpoint>
X<debugger command, B>
d276 1
a276 1
Delete a breakpoint from the specified I<line>.
a278 2
X<breakpoint>
X<debugger command, B>
a282 1
X<debugger command, a>
a299 1
X<debugger command, A>
d301 1
a301 1
Delete an action from the specified line.
a303 1
X<debugger command, A>
a307 1
X<debugger command, w>
d310 1
a310 1
is, because they're supposed to be obvious.
a312 1
X<debugger command, W>
a316 1
X<debugger command, W>
a320 1
X<debugger command, o>
a324 1
X<debugger command, o>
a328 1
X<debugger command, o>
a332 1
X<debugger command, o>
d349 1
a349 1
not be.  Several options can be set together.  See L<"Configurable Options">
d352 1
a352 2
=item < ?
X<< debugger command, < >>
a356 1
X<< debugger command, < >>
d359 1
a359 1
A multi-line command may be entered by backslashing the newlines.
d361 1
a361 2
=item < *
X<< debugger command, < >>
a365 1
X<< debugger command, << >>
a370 1
X<< debugger command, > >>
a374 1
X<< debugger command, > >>
d379 1
a379 1
couldn't've guessed this by now).
d381 1
a381 2
=item > *
X<< debugger command, > >>
a385 1
X<<< debugger command, >> >>>
a391 1
X<debugger command, {>
d398 1
a398 1
A multi-line command may be entered in the customary fashion.
d402 1
a402 1
what you mean to do, write it as with C<;{ ... }> or even
d405 1
a405 2
=item { *
X<debugger command, {>
a409 1
X<debugger command, {{>
a414 1
X<debugger command, !>
a418 1
X<debugger command, !>
a422 1
X<debugger command, !>
a427 1
X<debugger command, !!>
a435 1
X<debugger command, source>
a440 1
X<debugger command, H>
a445 2
X<debugger command, q>
X<debugger command, ^D>
d452 1
a452 1
off the end the script.  You may also need to set $finished to 0
a455 1
X<debugger command, R>
a465 1
X<debugger command, |>
a469 1
X<debugger command, ||>
a473 1
X<debugger command, =>
a487 1
X<debugger command, m>
d490 1
a490 1
expression.  The expression may evaluated to a reference to a
a493 1
X<debugger command, M>
a498 1
X<debugger command, man>
a530 2
X<debugger option, recallCommand>
X<debugger option, ShellBang>
a535 1
X<debugger option, pager>
a544 1
X<debugger option, tkRunning>
a548 2
X<debugger option, signalLevel> X<debugger option, warnLevel>
X<debugger option, dieLevel>
a568 1
X<debugger option, AutoTrace>
a573 1
X<debugger option, LineInfo>
a581 1
X<debugger option, inhibit_exit>
a585 1
X<debugger option, PrintRet>
a589 1
X<debugger option, ornaments>
a596 1
X<debugger option, frame>
a610 1
X<debugger option, maxTraceLen>
a615 1
X<debugger option, windowSize>
a626 1
X<debugger option, arrayDepth> X<debugger option, hashDepth>
a630 1
X<debugger option, dumpDepth>
a635 1
X<debugger option, compactDump> X<debugger option, veryCompact>
a640 1
X<debugger option, globPrint>
a644 1
X<debugger option, DumpDBFiles>
a648 1
X<debugger option, DumpPackages>
a652 1
X<debugger option, DumpReused>
a656 2
X<debugger option, quote> X<debugger option, HighBit>
X<debugger option, undefPrint>
a663 1
X<debugger option, UsageOnly>
d672 1
a672 1
environment variable and parses this as the remainder of a "O ..."
a687 1
X<debugger option, TTY>
a691 1
X<debugger option, noTTY>
d703 1
a703 1
startup, or C<"$ENV{HOME}/.perldbtty$$"> otherwise.  This file is not
a707 1
X<debugger option, ReadLine>
a712 1
X<debugger option, NonStop>
a794 1
X<backtrace> X<stack, backtrace>
d915 1
a915 1
after debugger initialization. Note that @@DB::typeahead is not a supported
d964 1
a964 1
and windy version, for coloring of Perl keywords.
a970 1
X<profile> X<profiling> X<profiler>
a986 2
X<regular expression, debugging>
X<regex, debugging> X<regexp, debugging>
a996 1
X<memory usage>
d1019 1
a1019 1
have to type the path or C<which $scriptname>.
@


1.1.1.10
log
@import perl 5.10.0 from CPAN
@
text
@a56 24
=head2 Calling the debugger

There are several ways to call the debugger:

=over 4

=item perl -d program_name

On the given program identified by C<program_name>.

=item perl -d -e 0 

Interactively supply an arbitrary C<expression> using C<-e>.

=item perl -d:Ptkdb program_name

Debug a given program via the C<Devel::Ptkdb> GUI.

=item perl -dt threaded_program_name

Debug a given program using threads (experimental).

=back

d59 1
a59 1
The interactive debugger understands the following commands:
d433 1
a433 1
couldn't have guessed this by now).
d641 1
a641 1
came from C<eval'ed> strings or from any kind of C<eval> within modules
d959 6
a964 6
BEGIN, UNITCHECK and CHECK blocks or C<use> statements), these will
I<not> be stopped by debugger, although C<require>s and INIT blocks
will, and compile-time statements can be traced with C<AutoTrace>
option set in C<PERLDB_OPTS>).  From your own Perl code, however, you
can transfer control back to the debugger using the following
statement, which is harmless if the debugger is not running:
@


1.1.1.11
log
@import perl 5.10.1
@
text
@d375 2
a376 2
Add a global watch-expression. Whenever a watched global changes the
debugger will stop and display the old and new values.
d1059 1
a1059 1
=head2 Readline Support / History in the debugger
d1063 1
a1063 2
the Term::ReadKey and Term::ReadLine modules from CPAN (such as
Term::ReadLine::Gnu, Term::ReadLine::Perl, ...) you will
a1071 3
Without Readline support you may see the symbols "^[[A", "^[[C", "^[[B",
"^[[D"", "^H", ... when using the arrow keys and/or the backspace key.

d1103 1
a1103 1
Perl profiler.  Devel::DProf is included with the standard Perl
d1112 1
a1112 2
interpret the information in that profile.  More powerful profilers,
such as C<Devel::NYTProf> are available from the CPAN.
@


1.1.1.12
log
@Perl 5.12.2 from CPAN
@
text
@d1069 3
a1071 3
A rudimentary command-line completion is also available, including
lexical variables in the current scope if the C<PadWalker> module
is installed.
d1104 1
a1104 1
If you wish to supply an alternative debugger for Perl to run,
d1106 2
a1107 2
B<-d> flag.  Perl's alternative debuggers include the Perl profiler,
L<Devel::DProf>, which is included with the standard Perl
d1117 1
a1117 2
such as C<Devel::NYTProf> are available from the CPAN:  see L<perlperf>
for details.
@


1.1.1.13
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d12 1
a12 1
L<perldebtut>, which is a tutorial introduction to the debugger.
d57 1
a57 1
=head2 Calling the Debugger
d108 1
d273 1
a273 1
=item t [n]
a276 2
Optional argument is the maximum number of levels to trace below
the current one; anything deeper than that will be silent.
d278 1
a278 1
=item t [n] expr
a281 2
Optional first argument is the maximum number of levels to trace below
the current one; anything deeper than that will be silent.
a303 16
If the line number is C<.>, sets a breakpoint on the current line:

    b . $n > 100

=item b [file]:[line] [condition]
X<breakpoint>
X<debugger command, b>

Set a breakpoint before the given line in a (possibly different) file.  If a
condition is specified, it's evaluated each time the statement is reached: a
breakpoint is taken only if the condition is true.  Breakpoints may only be set
on lines that begin an executable statement.  Conditions don't use C<if>:

    b lib/MyModule.pm:237 $x > 30
    b /usr/lib/perl5/site_perl/CGI.pm:100 ++$count100 < 11

a343 36
=item disable [file]:[line]
X<breakpoint>
X<debugger command, disable>
X<disable>

Disable the breakpoint so it won't stop the execution of the program. 
Breakpoints are enabled by default and can be re-enabled using the C<enable>
command.

=item disable [line]
X<breakpoint>
X<debugger command, disable>
X<disable>

Disable the breakpoint so it won't stop the execution of the program. 
Breakpoints are enabled by default and can be re-enabled using the C<enable>
command.

This is done for a breakpoint in the current file.

=item enable [file]:[line]
X<breakpoint>
X<debugger command, disable>
X<disable>

Enable the breakpoint so it will stop the execution of the program. 

=item enable [line]
X<breakpoint>
X<debugger command, disable>
X<disable>

Enable the breakpoint so it will stop the execution of the program. 

This is done for a breakpoint in the current file.

d391 1
a391 1
Display all options.
d592 2
a593 1
Display all loaded modules and their versions.
d657 1
a657 1
SEGV signals arrive.  (But see the mention of signals in L</BUGS> below.)
d879 1
a879 1
=head2 Debugger Input/Output
d926 3
a928 3
    $ = main::infested called from file 'Ambulation.pm' line 10
    @@ = Ambulation::legs(1, 2, 3, 4) called from file 'camel_flea' line 7
    $ = main::pests('bactrian', 4) called from file 'camel_flea' line 4
d945 1
a945 1
an C<eval> frame.
d980 1
a980 1
=head2 Debugging Compile-Time Statements
d985 1
a985 1
will, and compile-time statements can be traced with the C<AutoTrace>
d1001 1
a1001 1
  Will stop on load of 'f:/perllib/lib/Carp.pm'.
d1010 1
a1010 1
of the debugger from within the debugger using its C<o> command, from
d1059 1
a1059 1
=head2 Readline Support / History in the Debugger
d1065 1
a1065 1
have full editing capabilities much like those GNU I<readline>(3) provides.
d1083 1
a1083 2
Recent versions of Emacs come with a
start file for making B<emacs> act like a
d1085 1
a1085 1
See L<perlfaq3>.
d1106 2
a1107 2
B<-d> flag.  Perl's alternative debuggers include a Perl profiler,
L<Devel::NYTProf>, which is available separately as a CPAN
d1111 1
a1111 1
    $ perl -d:NYTProf mycode.pl
d1113 6
a1118 3
When the script terminates the profiler will create a database of the
profile information that you can turn into reports using the profiler's
tools. See <perlperf> for details.
d1120 1
a1120 1
=head1 Debugging Regular Expressions
d1130 1
a1130 1
L<perldebguts/"Debugging Regular Expressions">.
d1132 1
a1132 1
=head1 Debugging Memory Usage
d1138 1
a1138 1
See L<perldebguts/"Debugging Perl Memory Usage"> for the details.
d1148 2
a1149 1
L<Devel::NYTProf>,
@


1.1.1.14
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d686 1
a686 1
The characters used to recall a command or spawn a shell.  By
a843 13

=item C<HistFile>
X<debugger option, history, HistFile>

The path of the file from which the history (assuming a usable
Term::ReadLine backend) will be read on the debugger's startup, and to which
it will be saved on shutdown (for persistence across sessions). Similar in
concept to Bash's C<.bash_history> file.

=item C<HistSize>
X<debugger option, history, HistSize>

The count of the saved lines in the history (assuming C<HistFile> above).
@


1.1.1.15
log
@Import perl-5.20.1
@
text
@d71 1
a71 1
=item perl -d:ptkdb program_name
d73 1
a73 1
Debug a given program via the C<Devel::ptkdb> GUI.
d1145 1
a1145 1
If you have the GNU's version of B<emacs> installed on your system,
d1154 7
@


