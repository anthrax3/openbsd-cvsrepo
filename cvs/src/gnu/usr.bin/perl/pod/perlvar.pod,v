head	1.17;
access;
symbols
	OPENBSD_6_1:1.17.0.2
	OPENBSD_6_1_BASE:1.17
	OPENBSD_6_0:1.16.0.8
	OPENBSD_6_0_BASE:1.16
	OPENBSD_5_9:1.16.0.2
	OPENBSD_5_9_BASE:1.16
	OPENBSD_5_8:1.16.0.4
	OPENBSD_5_8_BASE:1.16
	PERL_5_20_2:1.1.1.16
	OPENBSD_5_7:1.15.0.2
	OPENBSD_5_7_BASE:1.15
	PERL_5_20_1:1.1.1.15
	OPENBSD_5_6:1.14.0.4
	OPENBSD_5_6_BASE:1.14
	PERL_5_18_2:1.1.1.14
	PERL:1.1.1
	OPENBSD_5_5:1.13.0.6
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.13.0.2
	OPENBSD_5_4_BASE:1.13
	PERL_5_16_3:1.1.1.13
	OPENBSD_5_3:1.12.0.10
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.8
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.6
	OPENBSD_5_0:1.12.0.4
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.2
	OPENBSD_4_9_BASE:1.12
	PERL_5_12_2:1.1.1.12
	OPENBSD_4_8:1.11.0.4
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.2
	OPENBSD_4_7_BASE:1.11
	PERL_5_10_1:1.1.1.11
	OPENBSD_4_6:1.10.0.6
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.2
	OPENBSD_4_5_BASE:1.10
	PERL_5_10_0:1.1.1.10
	OPENBSD_4_4:1.9.0.10
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.8
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.6
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.4
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.2
	OPENBSD_4_0_BASE:1.9
	PERL_5_8_8:1.1.1.9
	OPENBSD_3_9:1.8.0.6
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.4
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.2
	OPENBSD_3_7_BASE:1.8
	PERL_5_8_6:1.1.1.8
	OPENBSD_3_6:1.7.0.4
	OPENBSD_3_6_BASE:1.7
	PERL_5_8_5:1.1.1.7
	PERL_5_8_3:1.1.1.6
	OPENBSD_3_5:1.7.0.2
	OPENBSD_3_5_BASE:1.7
	PERL_5_8_2:1.1.1.6
	OPENBSD_3_4:1.6.0.4
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.6.0.2
	OPENBSD_3_3_BASE:1.6
	PERL_5_8_0:1.1.1.5
	OPENBSD_3_2:1.5.0.6
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.4
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	PERL_5_6_1:1.1.1.4
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	PERL_5_6_0:1.1.1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	PERL_500503:1.1.1.2
	CPAN:1.1.1
	OPENBSD_2_5:1.2.0.6
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.4
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	perl5003:1.1.1.1
	lwall:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.17
date	2017.02.05.00.32.19;	author afresh1;	state Exp;
branches;
next	1.16;
commitid	cxJ08BvJA9Pt2PTM;

1.16
date	2015.04.25.19.14.48;	author afresh1;	state Exp;
branches;
next	1.15;
commitid	XRK22kO4se3v2i2I;

1.15
date	2014.11.17.20.57.07;	author afresh1;	state Exp;
branches;
next	1.14;
commitid	QP75iYx42Uo7mMxO;

1.14
date	2014.03.24.15.05.33;	author afresh1;	state Exp;
branches;
next	1.13;

1.13
date	2013.03.25.20.40.59;	author sthen;	state Exp;
branches;
next	1.12;

1.12
date	2010.09.24.15.07.04;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2009.10.12.18.24.48;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2008.09.29.17.36.18;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2006.03.28.19.23.12;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2005.01.15.21.30.38;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2003.12.03.03.02.46;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.10.27.22.25.34;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.24.18.36.01;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.06.17.07.44;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	99.04.29.22.52.22;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.11.30.07.59.36;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.08.19.10.13.05;	author downsj;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.08.19.10.13.05;	author downsj;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.04.29.22.41.05;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2000.04.06.16.10.33;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2001.05.24.18.24.53;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2002.10.27.22.15.08;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2003.12.03.02.44.28;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2004.08.09.17.48.29;	author millert;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2005.01.15.21.18.10;	author millert;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2006.03.28.18.49.37;	author millert;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	2008.09.29.17.18.57;	author millert;	state Exp;
branches;
next	1.1.1.11;

1.1.1.11
date	2009.10.12.18.10.39;	author millert;	state Exp;
branches;
next	1.1.1.12;

1.1.1.12
date	2010.09.24.14.49.11;	author millert;	state Exp;
branches;
next	1.1.1.13;

1.1.1.13
date	2013.03.25.20.09.27;	author sthen;	state Exp;
branches;
next	1.1.1.14;

1.1.1.14
date	2014.03.24.14.59.08;	author afresh1;	state Exp;
branches;
next	1.1.1.15;

1.1.1.15
date	2014.11.17.20.53.15;	author afresh1;	state Exp;
branches;
next	1.1.1.16;
commitid	B31cAbBIXiCqnL97;

1.1.1.16
date	2015.04.25.19.10.45;	author afresh1;	state Exp;
branches;
next	;
commitid	Wpcs5S8qILgEZC7F;


desc
@@


1.17
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@=head1 NAME

perlvar - Perl predefined variables

=head1 DESCRIPTION

=head2 The Syntax of Variable Names

Variable names in Perl can have several formats.  Usually, they
must begin with a letter or underscore, in which case they can be
arbitrarily long (up to an internal limit of 251 characters) and
may contain letters, digits, underscores, or the special sequence
C<::> or C<'>.  In this case, the part before the last C<::> or
C<'> is taken to be a I<package qualifier>; see L<perlmod>.
A Unicode letter that is not ASCII is not considered to be a letter
unless S<C<"use utf8">> is in effect, and somewhat more complicated
rules apply; see L<perldata/Identifier parsing> for details.

Perl variable names may also be a sequence of digits, a single
punctuation character, or the two-character sequence: C<^> (caret or
CIRCUMFLEX ACCENT) followed by any one of the characters C<[][A-Z^_?\]>.
These names are all reserved for
special uses by Perl; for example, the all-digits names are used
to hold data captured by backreferences after a regular expression
match.

Since Perl v5.6.0, Perl variable names may also be alphanumeric strings
preceded by a caret.  These must all be written in the form C<${^Foo}>;
the braces are not optional.  C<${^Foo}> denotes the scalar variable
whose name is considered to be a control-C<F> followed by two C<o>'s.
These variables are
reserved for future special uses by Perl, except for the ones that
begin with C<^_> (caret-underscore).  No
name that begins with C<^_> will acquire a special
meaning in any future version of Perl; such names may therefore be
used safely in programs.  C<$^_> itself, however, I<is> reserved.

Perl identifiers that begin with digits or
punctuation characters are exempt from the effects of the C<package>
declaration and are always forced to be in package C<main>; they are
also exempt from C<strict 'vars'> errors.  A few other names are also
exempt in these ways:

    ENV      STDIN
    INC      STDOUT
    ARGV     STDERR
    ARGVOUT
    SIG

In particular, the special C<${^_XYZ}> variables are always taken
to be in package C<main>, regardless of any C<package> declarations
presently in scope.

=head1 SPECIAL VARIABLES

The following names have special meaning to Perl.  Most punctuation
names have reasonable mnemonics, or analogs in the shells.
Nevertheless, if you wish to use long variable names, you need only say:

    use English;

at the top of your program.  This aliases all the short names to the long
names in the current package.  Some even have medium names, generally
borrowed from B<awk>.  For more info, please see L<English>.

Before you continue, note the sort order for variables.  In general, we
first list the variables in case-insensitive, almost-lexigraphical
order (ignoring the C<{> or C<^> preceding words, as in C<${^UNICODE}>
or C<$^T>), although C<$_> and C<@@_> move up to the top of the pile.
For variables with the same identifier, we list it in order of scalar,
array, hash, and bareword.

=head2 General Variables

=over 8

=item $ARG

=item $_
X<$_> X<$ARG>

The default input and pattern-searching space.  The following pairs are
equivalent:

    while (<>) {...}    # equivalent only in while!
    while (defined($_ = <>)) {...}

    /^Subject:/
    $_ =~ /^Subject:/

    tr/a-z/A-Z/
    $_ =~ tr/a-z/A-Z/

    chomp
    chomp($_)

Here are the places where Perl will assume C<$_> even if you don't use it:

=over 3

=item *

The following functions use C<$_> as a default argument:

abs, alarm, chomp, chop, chr, chroot,
cos, defined, eval, evalbytes, exp, fc, glob, hex, int, lc,
lcfirst, length, log, lstat, mkdir, oct, ord, pos, print, printf,
quotemeta, readlink, readpipe, ref, require, reverse (in scalar context only),
rmdir, say, sin, split (for its second
argument), sqrt, stat, study, uc, ucfirst,
unlink, unpack.

=item *

All file tests (C<-f>, C<-d>) except for C<-t>, which defaults to STDIN.
See L<perlfunc/-X>

=item *

The pattern matching operations C<m//>, C<s///> and C<tr///> (aka C<y///>)
when used without an C<=~> operator.

=item *

The default iterator variable in a C<foreach> loop if no other
variable is supplied.

=item *

The implicit iterator variable in the C<grep()> and C<map()> functions.

=item *

The implicit variable of C<given()>.

=item *

The default place to put the next value or input record
when a C<< <FH> >>, C<readline>, C<readdir> or C<each>
operation's result is tested by itself as the sole criterion of a C<while>
test.  Outside a C<while> test, this will not happen.

=back

C<$_> is by default a global variable.  However, as
of perl v5.10.0, you can use a lexical version of
C<$_> by declaring it in a file or in a block with C<my>.  Moreover,
declaring C<our $_> restores the global C<$_> in the current scope.  Though
this seemed like a good idea at the time it was introduced, lexical C<$_>
actually causes more problems than it solves.  If you call a function that
expects to be passed information via C<$_>, it may or may not work,
depending on how the function is written, there not being any easy way to
solve this.  Just avoid lexical C<$_>, unless you are feeling particularly
masochistic.  For this reason lexical C<$_> is still experimental and will
produce a warning unless warnings have been disabled.  As with other
experimental features, the behavior of lexical C<$_> is subject to change
without notice, including change into a fatal error.

Mnemonic: underline is understood in certain operations.

=item @@ARG

=item @@_
X<@@_> X<@@ARG>

Within a subroutine the array C<@@_> contains the parameters passed to
that subroutine.  Inside a subroutine, C<@@_> is the default array for
the array operators C<pop> and C<shift>.

See L<perlsub>.

=item $LIST_SEPARATOR

=item $"
X<$"> X<$LIST_SEPARATOR>

When an array or an array slice is interpolated into a double-quoted
string or a similar context such as C</.../>, its elements are
separated by this value.  Default is a space.  For example, this:

    print "The array is: @@array\n";

is equivalent to this:

    print "The array is: " . join($", @@array) . "\n";

Mnemonic: works in double-quoted context.

=item $PROCESS_ID

=item $PID

=item $$
X<$$> X<$PID> X<$PROCESS_ID>

The process number of the Perl running this script.  Though you I<can> set
this variable, doing so is generally discouraged, although it can be
invaluable for some testing purposes.  It will be reset automatically
across C<fork()> calls.

Note for Linux and Debian GNU/kFreeBSD users: Before Perl v5.16.0 perl
would emulate POSIX semantics on Linux systems using LinuxThreads, a
partial implementation of POSIX Threads that has since been superseded
by the Native POSIX Thread Library (NPTL).

LinuxThreads is now obsolete on Linux, and caching C<getpid()>
like this made embedding perl unnecessarily complex (since you'd have
to manually update the value of $$), so now C<$$> and C<getppid()>
will always return the same values as the underlying C library.

Debian GNU/kFreeBSD systems also used LinuxThreads up until and
including the 6.0 release, but after that moved to FreeBSD thread
semantics, which are POSIX-like.

To see if your system is affected by this discrepancy check if
C<getconf GNU_LIBPTHREAD_VERSION | grep -q NPTL> returns a false
value.  NTPL threads preserve the POSIX semantics.

Mnemonic: same as shells.

=item $PROGRAM_NAME

=item $0
X<$0> X<$PROGRAM_NAME>

Contains the name of the program being executed.

On some (but not all) operating systems assigning to C<$0> modifies
the argument area that the C<ps> program sees.  On some platforms you
may have to use special C<ps> options or a different C<ps> to see the
changes.  Modifying the C<$0> is more useful as a way of indicating the
current program state than it is for hiding the program you're
running.

Note that there are platform-specific limitations on the maximum
length of C<$0>.  In the most extreme case it may be limited to the
space occupied by the original C<$0>.

In some platforms there may be arbitrary amount of padding, for
example space characters, after the modified name as shown by C<ps>.
In some platforms this padding may extend all the way to the original
length of the argument area, no matter what you do (this is the case
for example with Linux 2.2).

Note for BSD users: setting C<$0> does not completely remove "perl"
from the ps(1) output.  For example, setting C<$0> to C<"foobar"> may
result in C<"perl: foobar (perl)"> (whether both the C<"perl: "> prefix
and the " (perl)" suffix are shown depends on your exact BSD variant
and version).  This is an operating system feature, Perl cannot help it.

In multithreaded scripts Perl coordinates the threads so that any
thread may modify its copy of the C<$0> and the change becomes visible
to ps(1) (assuming the operating system plays along).  Note that
the view of C<$0> the other threads have will not change since they
have their own copies of it.

If the program has been given to perl via the switches C<-e> or C<-E>,
C<$0> will contain the string C<"-e">.

On Linux as of perl v5.14.0 the legacy process name will be set with
C<prctl(2)>, in addition to altering the POSIX name via C<argv[0]> as
perl has done since version 4.000.  Now system utilities that read the
legacy process name such as ps, top and killall will recognize the
name you set when assigning to C<$0>.  The string you supply will be
cut off at 16 bytes, this is a limitation imposed by Linux.

Mnemonic: same as B<sh> and B<ksh>.

=item $REAL_GROUP_ID

=item $GID

=item $(
X<$(> X<$GID> X<$REAL_GROUP_ID>

The real gid of this process.  If you are on a machine that supports
membership in multiple groups simultaneously, gives a space separated
list of groups you are in.  The first number is the one returned by
C<getgid()>, and the subsequent ones by C<getgroups()>, one of which may be
the same as the first number.

However, a value assigned to C<$(> must be a single number used to
set the real gid.  So the value given by C<$(> should I<not> be assigned
back to C<$(> without being forced numeric, such as by adding zero.  Note
that this is different to the effective gid (C<$)>) which does take a
list.

You can change both the real gid and the effective gid at the same
time by using C<POSIX::setgid()>.  Changes
to C<$(> require a check to C<$!>
to detect any possible errors after an attempted change.

Mnemonic: parentheses are used to I<group> things.  The real gid is the
group you I<left>, if you're running setgid.

=item $EFFECTIVE_GROUP_ID

=item $EGID

=item $)
X<$)> X<$EGID> X<$EFFECTIVE_GROUP_ID>

The effective gid of this process.  If you are on a machine that
supports membership in multiple groups simultaneously, gives a space
separated list of groups you are in.  The first number is the one
returned by C<getegid()>, and the subsequent ones by C<getgroups()>,
one of which may be the same as the first number.

Similarly, a value assigned to C<$)> must also be a space-separated
list of numbers.  The first number sets the effective gid, and
the rest (if any) are passed to C<setgroups()>.  To get the effect of an
empty list for C<setgroups()>, just repeat the new effective gid; that is,
to force an effective gid of 5 and an effectively empty C<setgroups()>
list, say C< $) = "5 5" >.

You can change both the effective gid and the real gid at the same
time by using C<POSIX::setgid()> (use only a single numeric argument).
Changes to C<$)> require a check to C<$!> to detect any possible errors
after an attempted change.

C<< $< >>, C<< $> >>, C<$(> and C<$)> can be set only on
machines that support the corresponding I<set[re][ug]id()> routine.  C<$(>
and C<$)> can be swapped only on machines supporting C<setregid()>.

Mnemonic: parentheses are used to I<group> things.  The effective gid
is the group that's I<right> for you, if you're running setgid.

=item $REAL_USER_ID

=item $UID

=item $<
X<< $< >> X<$UID> X<$REAL_USER_ID>

The real uid of this process.  You can change both the real uid and the
effective uid at the same time by using C<POSIX::setuid()>.  Since
changes to C<< $< >> require a system call, check C<$!> after a change
attempt to detect any possible errors.

Mnemonic: it's the uid you came I<from>, if you're running setuid.

=item $EFFECTIVE_USER_ID

=item $EUID

=item $>
X<< $> >> X<$EUID> X<$EFFECTIVE_USER_ID>

The effective uid of this process.  For example:

    $< = $>;            # set real to effective uid
    ($<,$>) = ($>,$<);  # swap real and effective uids

You can change both the effective uid and the real uid at the same
time by using C<POSIX::setuid()>.  Changes to C<< $> >> require a check
to C<$!> to detect any possible errors after an attempted change.

C<< $< >> and C<< $> >> can be swapped only on machines
supporting C<setreuid()>.

Mnemonic: it's the uid you went I<to>, if you're running setuid.

=item $SUBSCRIPT_SEPARATOR

=item $SUBSEP

=item $;
X<$;> X<$SUBSEP> X<SUBSCRIPT_SEPARATOR>

The subscript separator for multidimensional array emulation.  If you
refer to a hash element as

    $foo{$x,$y,$z}

it really means

    $foo{join($;, $x, $y, $z)}

But don't put

    @@foo{$x,$y,$z}	# a slice--note the @@

which means

    ($foo{$x},$foo{$y},$foo{$z})

Default is "\034", the same as SUBSEP in B<awk>.  If your keys contain
binary data there might not be any safe value for C<$;>.

Consider using "real" multidimensional arrays as described
in L<perllol>.

Mnemonic: comma (the syntactic subscript separator) is a semi-semicolon.

=item $a

=item $b
X<$a> X<$b>

Special package variables when using C<sort()>, see L<perlfunc/sort>.
Because of this specialness C<$a> and C<$b> don't need to be declared
(using C<use vars>, or C<our()>) even when using the C<strict 'vars'>
pragma.  Don't lexicalize them with C<my $a> or C<my $b> if you want to
be able to use them in the C<sort()> comparison block or function.

=item %ENV
X<%ENV>

The hash C<%ENV> contains your current environment.  Setting a
value in C<ENV> changes the environment for any child processes
you subsequently C<fork()> off.

As of v5.18.0, both keys and values stored in C<%ENV> are stringified.

    my $foo = 1;
    $ENV{'bar'} = \$foo;
    if( ref $ENV{'bar'} ) {
        say "Pre 5.18.0 Behaviour";
    } else {
        say "Post 5.18.0 Behaviour";
    }

Previously, only child processes received stringified values:

    my $foo = 1;
    $ENV{'bar'} = \$foo;

    # Always printed 'non ref'
    system($^X, '-e',
           q/print ( ref $ENV{'bar'}  ? 'ref' : 'non ref' ) /);

This happens because you can't really share arbitrary data structures with
foreign processes.

=item $OLD_PERL_VERSION

=item $]
X<$]> X<$OLD_PERL_VERSION>

The revision, version, and subversion of the Perl interpreter, represented
as a decimal of the form 5.XXXYYY, where XXX is the version / 1e3 and YYY
is the subversion / 1e6.  For example, Perl v5.10.1 would be "5.010001".

This variable can be used to determine whether the Perl interpreter
executing a script is in the right range of versions:

    warn "No PerlIO!\n" if $] lt '5.008';

When comparing C<$]>, string comparison operators are B<highly
recommended>.  The inherent limitations of binary floating point
representation can sometimes lead to incorrect comparisons for some
numbers on some architectures.

See also the documentation of C<use VERSION> and C<require VERSION>
for a convenient way to fail if the running Perl interpreter is too old.

See L</$^V> for a representation of the Perl version as a L<version>
object, which allows more flexible string comparisons.

The main advantage of C<$]> over C<$^V> is that it works the same on any
version of Perl.  The disadvantages are that it can't easily be compared
to versions in other formats (e.g. literal v-strings, "v1.2.3" or
version objects) and numeric comparisons can occasionally fail; it's good
for string literal version checks and bad for comparing to a variable
that hasn't been sanity-checked.

The C<$OLD_PERL_VERSION> form was added in Perl v5.20.0 for historical
reasons but its use is discouraged. (If your reason to use C<$]> is to
run code on old perls then referring to it as C<$OLD_PERL_VERSION> would
be self-defeating.)

Mnemonic: Is this version of perl in the right bracket?

=item $SYSTEM_FD_MAX

=item $^F
X<$^F> X<$SYSTEM_FD_MAX>

The maximum system file descriptor, ordinarily 2.  System file
descriptors are passed to C<exec()>ed processes, while higher file
descriptors are not.  Also, during an
C<open()>, system file descriptors are
preserved even if the C<open()> fails (ordinary file descriptors are
closed before the C<open()> is attempted).  The close-on-exec
status of a file descriptor will be decided according to the value of
C<$^F> when the corresponding file, pipe, or socket was opened, not the
time of the C<exec()>.

=item @@F
X<@@F>

The array C<@@F> contains the fields of each line read in when autosplit
mode is turned on.  See L<perlrun> for the B<-a> switch.  This array
is package-specific, and must be declared or given a full package name
if not in package main when running under C<strict 'vars'>.

=item @@INC
X<@@INC>

The array C<@@INC> contains the list of places that the C<do EXPR>,
C<require>, or C<use> constructs look for their library files.  It
initially consists of the arguments to any B<-I> command-line
switches, followed by the default Perl library, probably
F</usr/local/lib/perl>, followed by ".", to represent the current
directory.  ("." will not be appended if taint checks are enabled,
either by C<-T> or by C<-t>.)  If you need to modify this at runtime,
you should use the C<use lib> pragma to get the machine-dependent
library properly loaded also:

    use lib '/mypath/libdir/';
    use SomeMod;

You can also insert hooks into the file inclusion system by putting Perl
code directly into C<@@INC>.  Those hooks may be subroutine references,
array references or blessed objects.  See L<perlfunc/require> for details.

=item %INC
X<%INC>

The hash C<%INC> contains entries for each filename included via the
C<do>, C<require>, or C<use> operators.  The key is the filename
you specified (with module names converted to pathnames), and the
value is the location of the file found.  The C<require>
operator uses this hash to determine whether a particular file has
already been included.

If the file was loaded via a hook (e.g. a subroutine reference, see
L<perlfunc/require> for a description of these hooks), this hook is
by default inserted into C<%INC> in place of a filename.  Note, however,
that the hook may have set the C<%INC> entry by itself to provide some more
specific info.

=item $INPLACE_EDIT

=item $^I
X<$^I> X<$INPLACE_EDIT>

The current value of the inplace-edit extension.  Use C<undef> to disable
inplace editing.

Mnemonic: value of B<-i> switch.

=item $^M
X<$^M>

By default, running out of memory is an untrappable, fatal error.
However, if suitably built, Perl can use the contents of C<$^M>
as an emergency memory pool after C<die()>ing.  Suppose that your Perl
were compiled with C<-DPERL_EMERGENCY_SBRK> and used Perl's malloc.
Then

    $^M = 'a' x (1 << 16);

would allocate a 64K buffer for use in an emergency.  See the
F<INSTALL> file in the Perl distribution for information on how to
add custom C compilation flags when compiling perl.  To discourage casual
use of this advanced feature, there is no L<English|English> long name for
this variable.

This variable was added in Perl 5.004.

=item $OSNAME

=item $^O
X<$^O> X<$OSNAME>

The name of the operating system under which this copy of Perl was
built, as determined during the configuration process.  For examples
see L<perlport/PLATFORMS>.

The value is identical to C<$Config{'osname'}>.  See also L<Config>
and the B<-V> command-line switch documented in L<perlrun>.

In Windows platforms, C<$^O> is not very helpful: since it is always
C<MSWin32>, it doesn't tell the difference between
95/98/ME/NT/2000/XP/CE/.NET.  Use C<Win32::GetOSName()> or
Win32::GetOSVersion() (see L<Win32> and L<perlport>) to distinguish
between the variants.

This variable was added in Perl 5.003.

=item %SIG
X<%SIG>

The hash C<%SIG> contains signal handlers for signals.  For example:

    sub handler {   # 1st argument is signal name
	my($sig) = @@_;
	print "Caught a SIG$sig--shutting down\n";
	close(LOG);
	exit(0);
	}

    $SIG{'INT'}  = \&handler;
    $SIG{'QUIT'} = \&handler;
    ...
    $SIG{'INT'}  = 'DEFAULT';   # restore default action
    $SIG{'QUIT'} = 'IGNORE';    # ignore SIGQUIT

Using a value of C<'IGNORE'> usually has the effect of ignoring the
signal, except for the C<CHLD> signal.  See L<perlipc> for more about
this special case.

Here are some other examples:

    $SIG{"PIPE"} = "Plumber";   # assumes main::Plumber (not
				# recommended)
    $SIG{"PIPE"} = \&Plumber;   # just fine; assume current
				# Plumber
    $SIG{"PIPE"} = *Plumber;    # somewhat esoteric
    $SIG{"PIPE"} = Plumber();   # oops, what did Plumber()
				# return??

Be sure not to use a bareword as the name of a signal handler,
lest you inadvertently call it.

If your system has the C<sigaction()> function then signal handlers
are installed using it.  This means you get reliable signal handling.

The default delivery policy of signals changed in Perl v5.8.0 from
immediate (also known as "unsafe") to deferred, also known as "safe
signals".  See L<perlipc> for more information.

Certain internal hooks can be also set using the C<%SIG> hash.  The
routine indicated by C<$SIG{__WARN__}> is called when a warning
message is about to be printed.  The warning message is passed as the
first argument.  The presence of a C<__WARN__> hook causes the
ordinary printing of warnings to C<STDERR> to be suppressed.  You can
use this to save warnings in a variable, or turn warnings into fatal
errors, like this:

    local $SIG{__WARN__} = sub { die $_[0] };
    eval $proggie;

As the C<'IGNORE'> hook is not supported by C<__WARN__>, you can
disable warnings using the empty subroutine:

    local $SIG{__WARN__} = sub {};

The routine indicated by C<$SIG{__DIE__}> is called when a fatal
exception is about to be thrown.  The error message is passed as the
first argument.  When a C<__DIE__> hook routine returns, the exception
processing continues as it would have in the absence of the hook,
unless the hook routine itself exits via a C<goto &sub>, a loop exit,
or a C<die()>.  The C<__DIE__> handler is explicitly disabled during
the call, so that you can die from a C<__DIE__> handler.  Similarly
for C<__WARN__>.

Due to an implementation glitch, the C<$SIG{__DIE__}> hook is called
even inside an C<eval()>.  Do not use this to rewrite a pending
exception in C<$@@>, or as a bizarre substitute for overriding
C<CORE::GLOBAL::die()>.  This strange action at a distance may be fixed
in a future release so that C<$SIG{__DIE__}> is only called if your
program is about to exit, as was the original intent.  Any other use is
deprecated.

C<__DIE__>/C<__WARN__> handlers are very special in one respect: they
may be called to report (probable) errors found by the parser.  In such
a case the parser may be in inconsistent state, so any attempt to
evaluate Perl code from such a handler will probably result in a
segfault.  This means that warnings or errors that result from parsing
Perl should be used with extreme caution, like this:

    require Carp if defined $^S;
    Carp::confess("Something wrong") if defined &Carp::confess;
    die "Something wrong, but could not load Carp to give "
      . "backtrace...\n\t"
      . "To see backtrace try starting Perl with -MCarp switch";

Here the first line will load C<Carp> I<unless> it is the parser who
called the handler.  The second line will print backtrace and die if
C<Carp> was available.  The third line will be executed only if C<Carp> was
not available.

Having to even think about the C<$^S> variable in your exception
handlers is simply wrong.  C<$SIG{__DIE__}> as currently implemented
invites grievous and difficult to track down errors.  Avoid it
and use an C<END{}> or CORE::GLOBAL::die override instead.

See L<perlfunc/die>, L<perlfunc/warn>, L<perlfunc/eval>, and
L<warnings> for additional information.

=item $BASETIME

=item $^T
X<$^T> X<$BASETIME>

The time at which the program began running, in seconds since the
epoch (beginning of 1970).  The values returned by the B<-M>, B<-A>,
and B<-C> filetests are based on this value.

=item $PERL_VERSION

=item $^V
X<$^V> X<$PERL_VERSION>

The revision, version, and subversion of the Perl interpreter,
represented as a L<version> object.

This variable first appeared in perl v5.6.0; earlier versions of perl
will see an undefined value.  Before perl v5.10.0 C<$^V> was represented
as a v-string rather than a L<version> object.

C<$^V> can be used to determine whether the Perl interpreter executing
a script is in the right range of versions.  For example:

    warn "Hashes not randomized!\n" if !$^V or $^V lt v5.8.1

While version objects overload stringification, to portably convert
C<$^V> into its string representation, use C<sprintf()>'s C<"%vd">
conversion, which works for both v-strings or version objects:

    printf "version is v%vd\n", $^V;  # Perl's version

See the documentation of C<use VERSION> and C<require VERSION>
for a convenient way to fail if the running Perl interpreter is too old.

See also C<$]> for a decimal representation of the Perl version.

The main advantage of C<$^V> over C<$]> is that, for Perl v5.10.0 or
later, it overloads operators, allowing easy comparison against other
version representations (e.g. decimal, literal v-string, "v1.2.3", or
objects).  The disadvantage is that prior to v5.10.0, it was only a
literal v-string, which can't be easily printed or compared.

Mnemonic: use ^V for a version object.

=item ${^WIN32_SLOPPY_STAT}
X<${^WIN32_SLOPPY_STAT}> X<sitecustomize> X<sitecustomize.pl>

If this variable is set to a true value, then C<stat()> on Windows will
not try to open the file.  This means that the link count cannot be
determined and file attributes may be out of date if additional
hardlinks to the file exist.  On the other hand, not opening the file
is considerably faster, especially for files on network drives.

This variable could be set in the F<sitecustomize.pl> file to
configure the local Perl installation to use "sloppy" C<stat()> by
default.  See the documentation for B<-f> in
L<perlrun|perlrun/"Command Switches"> for more information about site
customization.

This variable was added in Perl v5.10.0.

=item $EXECUTABLE_NAME

=item $^X
X<$^X> X<$EXECUTABLE_NAME>

The name used to execute the current copy of Perl, from C's
C<argv[0]> or (where supported) F</proc/self/exe>.

Depending on the host operating system, the value of C<$^X> may be
a relative or absolute pathname of the perl program file, or may
be the string used to invoke perl but not the pathname of the
perl program file.  Also, most operating systems permit invoking
programs that are not in the PATH environment variable, so there
is no guarantee that the value of C<$^X> is in PATH.  For VMS, the
value may or may not include a version number.

You usually can use the value of C<$^X> to re-invoke an independent
copy of the same perl that is currently running, e.g.,

    @@first_run = `$^X -le "print int rand 100 for 1..100"`;

But recall that not all operating systems support forking or
capturing of the output of commands, so this complex statement
may not be portable.

It is not safe to use the value of C<$^X> as a path name of a file,
as some operating systems that have a mandatory suffix on
executable files do not require use of the suffix when invoking
a command.  To convert the value of C<$^X> to a path name, use the
following statements:

    # Build up a set of file names (not command names).
    use Config;
    my $this_perl = $^X;
    if ($^O ne 'VMS') {
	$this_perl .= $Config{_exe}
	  unless $this_perl =~ m/$Config{_exe}$/i;
	}

Because many operating systems permit anyone with read access to
the Perl program file to make a copy of it, patch the copy, and
then execute the copy, the security-conscious Perl programmer
should take care to invoke the installed copy of perl, not the
copy referenced by C<$^X>.  The following statements accomplish
this goal, and produce a pathname that can be invoked as a
command or referenced as a file.

    use Config;
    my $secure_perl_path = $Config{perlpath};
    if ($^O ne 'VMS') {
	$secure_perl_path .= $Config{_exe}
	    unless $secure_perl_path =~ m/$Config{_exe}$/i;
	}

=back

=head2 Variables related to regular expressions

Most of the special variables related to regular expressions are side
effects.  Perl sets these variables when it has a successful match, so
you should check the match result before using them.  For instance:

    if( /P(A)TT(ER)N/ ) {
	print "I found $1 and $2\n";
	}

These variables are read-only and dynamically-scoped, unless we note
otherwise.

The dynamic nature of the regular expression variables means that
their value is limited to the block that they are in, as demonstrated
by this bit of code:

    my $outer = 'Wallace and Grommit';
    my $inner = 'Mutt and Jeff';

    my $pattern = qr/(\S+) and (\S+)/;

    sub show_n { print "\$1 is $1; \$2 is $2\n" }

    {
    OUTER:
	show_n() if $outer =~ m/$pattern/;

	INNER: {
	    show_n() if $inner =~ m/$pattern/;
	    }

	show_n();
    }

The output shows that while in the C<OUTER> block, the values of C<$1>
and C<$2> are from the match against C<$outer>.  Inside the C<INNER>
block, the values of C<$1> and C<$2> are from the match against
C<$inner>, but only until the end of the block (i.e. the dynamic
scope).  After the C<INNER> block completes, the values of C<$1> and
C<$2> return to the values for the match against C<$outer> even though
we have not made another match:

    $1 is Wallace; $2 is Grommit
    $1 is Mutt; $2 is Jeff
    $1 is Wallace; $2 is Grommit

=head3 Performance issues

Traditionally in Perl, any use of any of the three variables  C<$`>, C<$&>
or C<$'> (or their C<use English> equivalents) anywhere in the code, caused
all subsequent successful pattern matches to make a copy of the matched
string, in case the code might subsequently access one of those variables.
This imposed a considerable performance penalty across the whole program,
so generally the use of these variables has been discouraged.

In Perl 5.6.0 the C<@@-> and C<@@+> dynamic arrays were introduced that
supply the indices of successful matches. So you could for example do
this:

    $str =~ /pattern/;

    print $`, $&, $'; # bad: perfomance hit

    print             # good: no perfomance hit
	substr($str, 0,     $-[0]),
	substr($str, $-[0], $+[0]-$-[0]),
	substr($str, $+[0]);

In Perl 5.10.0 the C</p> match operator flag and the C<${^PREMATCH}>,
C<${^MATCH}>, and C<${^POSTMATCH}> variables were introduced, that allowed
you to suffer the penalties only on patterns marked with C</p>.

In Perl 5.18.0 onwards, perl started noting the presence of each of the
three variables separately, and only copied that part of the string
required; so in

    $`; $&; "abcdefgh" =~ /d/

perl would only copy the "abcd" part of the string. That could make a big
difference in something like

    $str = 'x' x 1_000_000;
    $&; # whoops
    $str =~ /x/g # one char copied a million times, not a million chars

In Perl 5.20.0 a new copy-on-write system was enabled by default, which
finally fixes all performance issues with these three variables, and makes
them safe to use anywhere.

The C<Devel::NYTProf> and C<Devel::FindAmpersand> modules can help you
find uses of these problematic match variables in your code.

=over 8

=item $<I<digits>> ($1, $2, ...)
X<$1> X<$2> X<$3>

Contains the subpattern from the corresponding set of capturing
parentheses from the last successful pattern match, not counting patterns
matched in nested blocks that have been exited already.

These variables are read-only and dynamically-scoped.

Mnemonic: like \digits.

=item $MATCH

=item $&
X<$&> X<$MATCH>

The string matched by the last successful pattern match (not counting
any matches hidden within a BLOCK or C<eval()> enclosed by the current
BLOCK).

See L</Performance issues> above for the serious performance implications
of using this variable (even once) in your code.

This variable is read-only and dynamically-scoped.

Mnemonic: like C<&> in some editors.

=item ${^MATCH}
X<${^MATCH}>

This is similar to C<$&> (C<$MATCH>) except that it does not incur the
performance penalty associated with that variable.

See L</Performance issues> above.

In Perl v5.18 and earlier, it is only guaranteed
to return a defined value when the pattern was compiled or executed with
the C</p> modifier.  In Perl v5.20, the C</p> modifier does nothing, so
C<${^MATCH}> does the same thing as C<$MATCH>.

This variable was added in Perl v5.10.0.

This variable is read-only and dynamically-scoped.

=item $PREMATCH

=item $`
X<$`> X<$PREMATCH> X<${^PREMATCH}>

The string preceding whatever was matched by the last successful
pattern match, not counting any matches hidden within a BLOCK or C<eval>
enclosed by the current BLOCK.

See L</Performance issues> above for the serious performance implications
of using this variable (even once) in your code.

This variable is read-only and dynamically-scoped.

Mnemonic: C<`> often precedes a quoted string.

=item ${^PREMATCH}
X<$`> X<${^PREMATCH}>

This is similar to C<$`> ($PREMATCH) except that it does not incur the
performance penalty associated with that variable.

See L</Performance issues> above.

In Perl v5.18 and earlier, it is only guaranteed
to return a defined value when the pattern was compiled or executed with
the C</p> modifier.  In Perl v5.20, the C</p> modifier does nothing, so
C<${^PREMATCH}> does the same thing as C<$PREMATCH>.

This variable was added in Perl v5.10.0.

This variable is read-only and dynamically-scoped.

=item $POSTMATCH

=item $'
X<$'> X<$POSTMATCH> X<${^POSTMATCH}> X<@@->

The string following whatever was matched by the last successful
pattern match (not counting any matches hidden within a BLOCK or C<eval()>
enclosed by the current BLOCK).  Example:

    local $_ = 'abcdefghi';
    /def/;
    print "$`:$&:$'\n";  	# prints abc:def:ghi

See L</Performance issues> above for the serious performance implications
of using this variable (even once) in your code.

This variable is read-only and dynamically-scoped.

Mnemonic: C<'> often follows a quoted string.

=item ${^POSTMATCH}
X<${^POSTMATCH}> X<$'> X<$POSTMATCH>

This is similar to C<$'> (C<$POSTMATCH>) except that it does not incur the
performance penalty associated with that variable.

See L</Performance issues> above.

In Perl v5.18 and earlier, it is only guaranteed
to return a defined value when the pattern was compiled or executed with
the C</p> modifier.  In Perl v5.20, the C</p> modifier does nothing, so
C<${^POSTMATCH}> does the same thing as C<$POSTMATCH>.

This variable was added in Perl v5.10.0.

This variable is read-only and dynamically-scoped.

=item $LAST_PAREN_MATCH

=item $+
X<$+> X<$LAST_PAREN_MATCH>

The text matched by the last bracket of the last successful search pattern.
This is useful if you don't know which one of a set of alternative patterns
matched.  For example:

    /Version: (.*)|Revision: (.*)/ && ($rev = $+);

This variable is read-only and dynamically-scoped.

Mnemonic: be positive and forward looking.

=item $LAST_SUBMATCH_RESULT

=item $^N
X<$^N> X<$LAST_SUBMATCH_RESULT>

The text matched by the used group most-recently closed (i.e. the group
with the rightmost closing parenthesis) of the last successful search
pattern.

This is primarily used inside C<(?{...})> blocks for examining text
recently matched.  For example, to effectively capture text to a variable
(in addition to C<$1>, C<$2>, etc.), replace C<(...)> with

    (?:(...)(?{ $var = $^N }))

By setting and then using C<$var> in this way relieves you from having to
worry about exactly which numbered set of parentheses they are.

This variable was added in Perl v5.8.0.

Mnemonic: the (possibly) Nested parenthesis that most recently closed.

=item @@LAST_MATCH_END

=item @@+
X<@@+> X<@@LAST_MATCH_END>

This array holds the offsets of the ends of the last successful
submatches in the currently active dynamic scope.  C<$+[0]> is
the offset into the string of the end of the entire match.  This
is the same value as what the C<pos> function returns when called
on the variable that was matched against.  The I<n>th element
of this array holds the offset of the I<n>th submatch, so
C<$+[1]> is the offset past where C<$1> ends, C<$+[2]> the offset
past where C<$2> ends, and so on.  You can use C<$#+> to determine
how many subgroups were in the last successful match.  See the
examples given for the C<@@-> variable.

This variable was added in Perl v5.6.0.

=item %LAST_PAREN_MATCH

=item %+
X<%+> X<%LAST_PAREN_MATCH>

Similar to C<@@+>, the C<%+> hash allows access to the named capture
buffers, should they exist, in the last successful match in the
currently active dynamic scope.

For example, C<$+{foo}> is equivalent to C<$1> after the following match:

    'foo' =~ /(?<foo>foo)/;

The keys of the C<%+> hash list only the names of buffers that have
captured (and that are thus associated to defined values).

The underlying behaviour of C<%+> is provided by the
L<Tie::Hash::NamedCapture> module.

B<Note:> C<%-> and C<%+> are tied views into a common internal hash
associated with the last successful regular expression.  Therefore mixing
iterative access to them via C<each> may have unpredictable results.
Likewise, if the last successful match changes, then the results may be
surprising.

This variable was added in Perl v5.10.0.

This variable is read-only and dynamically-scoped.

=item @@LAST_MATCH_START

=item @@-
X<@@-> X<@@LAST_MATCH_START>

C<$-[0]> is the offset of the start of the last successful match.
C<$-[>I<n>C<]> is the offset of the start of the substring matched by
I<n>-th subpattern, or undef if the subpattern did not match.

Thus, after a match against C<$_>, C<$&> coincides with C<substr $_, $-[0],
$+[0] - $-[0]>.  Similarly, $I<n> coincides with C<substr $_, $-[n],
$+[n] - $-[n]> if C<$-[n]> is defined, and $+ coincides with
C<substr $_, $-[$#-], $+[$#-] - $-[$#-]>.  One can use C<$#-> to find the
last matched subgroup in the last successful match.  Contrast with
C<$#+>, the number of subgroups in the regular expression.  Compare
with C<@@+>.

This array holds the offsets of the beginnings of the last
successful submatches in the currently active dynamic scope.
C<$-[0]> is the offset into the string of the beginning of the
entire match.  The I<n>th element of this array holds the offset
of the I<n>th submatch, so C<$-[1]> is the offset where C<$1>
begins, C<$-[2]> the offset where C<$2> begins, and so on.

After a match against some variable C<$var>:

=over 5

=item C<$`> is the same as C<substr($var, 0, $-[0])>

=item C<$&> is the same as C<substr($var, $-[0], $+[0] - $-[0])>

=item C<$'> is the same as C<substr($var, $+[0])>

=item C<$1> is the same as C<substr($var, $-[1], $+[1] - $-[1])>

=item C<$2> is the same as C<substr($var, $-[2], $+[2] - $-[2])>

=item C<$3> is the same as C<substr($var, $-[3], $+[3] - $-[3])>

=back

This variable was added in Perl v5.6.0.

=item %-
X<%->

Similar to C<%+>, this variable allows access to the named capture groups
in the last successful match in the currently active dynamic scope.  To
each capture group name found in the regular expression, it associates a
reference to an array containing the list of values captured by all
buffers with that name (should there be several of them), in the order
where they appear.

Here's an example:

    if ('1234' =~ /(?<A>1)(?<B>2)(?<A>3)(?<B>4)/) {
        foreach my $bufname (sort keys %-) {
            my $ary = $-{$bufname};
            foreach my $idx (0..$#$ary) {
                print "\$-{$bufname}[$idx] : ",
                      (defined($ary->[$idx])
                          ? "'$ary->[$idx]'"
                          : "undef"),
                      "\n";
            }
        }
    }

would print out:

    $-{A}[0] : '1'
    $-{A}[1] : '3'
    $-{B}[0] : '2'
    $-{B}[1] : '4'

The keys of the C<%-> hash correspond to all buffer names found in
the regular expression.

The behaviour of C<%-> is implemented via the
L<Tie::Hash::NamedCapture> module.

B<Note:> C<%-> and C<%+> are tied views into a common internal hash
associated with the last successful regular expression.  Therefore mixing
iterative access to them via C<each> may have unpredictable results.
Likewise, if the last successful match changes, then the results may be
surprising.

This variable was added in Perl v5.10.0.

This variable is read-only and dynamically-scoped.

=item $LAST_REGEXP_CODE_RESULT

=item $^R
X<$^R> X<$LAST_REGEXP_CODE_RESULT>

The result of evaluation of the last successful C<(?{ code })>
regular expression assertion (see L<perlre>).  May be written to.

This variable was added in Perl 5.005.

=item ${^RE_DEBUG_FLAGS}
X<${^RE_DEBUG_FLAGS}>

The current value of the regex debugging flags.  Set to 0 for no debug output
even when the C<re 'debug'> module is loaded.  See L<re> for details.

This variable was added in Perl v5.10.0.

=item ${^RE_TRIE_MAXBUF}
X<${^RE_TRIE_MAXBUF}>

Controls how certain regex optimisations are applied and how much memory they
utilize.  This value by default is 65536 which corresponds to a 512kB
temporary cache.  Set this to a higher value to trade
memory for speed when matching large alternations.  Set
it to a lower value if you want the optimisations to
be as conservative of memory as possible but still occur, and set it to a
negative value to prevent the optimisation and conserve the most memory.
Under normal situations this variable should be of no interest to you.

This variable was added in Perl v5.10.0.

=back

=head2 Variables related to filehandles

Variables that depend on the currently selected filehandle may be set
by calling an appropriate object method on the C<IO::Handle> object,
although this is less efficient than using the regular built-in
variables.  (Summary lines below for this contain the word HANDLE.)
First you must say

    use IO::Handle;

after which you may use either

    method HANDLE EXPR

or more safely,

    HANDLE->method(EXPR)

Each method returns the old value of the C<IO::Handle> attribute.  The
methods each take an optional EXPR, which, if supplied, specifies the
new value for the C<IO::Handle> attribute in question.  If not
supplied, most methods do nothing to the current value--except for
C<autoflush()>, which will assume a 1 for you, just to be different.

Because loading in the C<IO::Handle> class is an expensive operation,
you should learn how to use the regular built-in variables.

A few of these variables are considered "read-only".  This means that
if you try to assign to this variable, either directly or indirectly
through a reference, you'll raise a run-time exception.

You should be very careful when modifying the default values of most
special variables described in this document.  In most cases you want
to localize these variables before changing them, since if you don't,
the change may affect other modules which rely on the default values
of the special variables that you have changed.  This is one of the
correct ways to read the whole file at once:

    open my $fh, "<", "foo" or die $!;
    local $/; # enable localized slurp mode
    my $content = <$fh>;
    close $fh;

But the following code is quite bad:

    open my $fh, "<", "foo" or die $!;
    undef $/; # enable slurp mode
    my $content = <$fh>;
    close $fh;

since some other module, may want to read data from some file in the
default "line mode", so if the code we have just presented has been
executed, the global value of C<$/> is now changed for any other code
running inside the same Perl interpreter.

Usually when a variable is localized you want to make sure that this
change affects the shortest scope possible.  So unless you are already
inside some short C<{}> block, you should create one yourself.  For
example:

    my $content = '';
    open my $fh, "<", "foo" or die $!;
    {
	local $/;
	$content = <$fh>;
    }
    close $fh;

Here is an example of how your own code can go broken:

    for ( 1..3 ){
	$\ = "\r\n";
	nasty_break();
	print "$_";
    }

    sub nasty_break {
	$\ = "\f";
	# do something with $_
    }

You probably expect this code to print the equivalent of

    "1\r\n2\r\n3\r\n"

but instead you get:

    "1\f2\f3\f"

Why? Because C<nasty_break()> modifies C<$\> without localizing it
first.  The value you set in  C<nasty_break()> is still there when you
return.  The fix is to add C<local()> so the value doesn't leak out of
C<nasty_break()>:

    local $\ = "\f";

It's easy to notice the problem in such a short example, but in more
complicated code you are looking for trouble if you don't localize
changes to the special variables.

=over 8

=item $ARGV
X<$ARGV>

Contains the name of the current file when reading from C<< <> >>.

=item @@ARGV
X<@@ARGV>

The array C<@@ARGV> contains the command-line arguments intended for
the script.  C<$#ARGV> is generally the number of arguments minus
one, because C<$ARGV[0]> is the first argument, I<not> the program's
command name itself.  See L</$0> for the command name.

=item ARGV
X<ARGV>

The special filehandle that iterates over command-line filenames in
C<@@ARGV>.  Usually written as the null filehandle in the angle operator
C<< <> >>.  Note that currently C<ARGV> only has its magical effect
within the C<< <> >> operator; elsewhere it is just a plain filehandle
corresponding to the last file opened by C<< <> >>.  In particular,
passing C<\*ARGV> as a parameter to a function that expects a filehandle
may not cause your function to automatically read the contents of all the
files in C<@@ARGV>.

=item ARGVOUT
X<ARGVOUT>

The special filehandle that points to the currently open output file
when doing edit-in-place processing with B<-i>.  Useful when you have
to do a lot of inserting and don't want to keep modifying C<$_>.  See
L<perlrun> for the B<-i> switch.

=item IO::Handle->output_field_separator( EXPR )

=item $OUTPUT_FIELD_SEPARATOR

=item $OFS

=item $,
X<$,> X<$OFS> X<$OUTPUT_FIELD_SEPARATOR>

The output field separator for the print operator.  If defined, this
value is printed between each of print's arguments.  Default is C<undef>.

You cannot call C<output_field_separator()> on a handle, only as a
static method.  See L<IO::Handle|IO::Handle>.

Mnemonic: what is printed when there is a "," in your print statement.

=item HANDLE->input_line_number( EXPR )

=item $INPUT_LINE_NUMBER

=item $NR

=item $.
X<$.> X<$NR> X<$INPUT_LINE_NUMBER> X<line number>

Current line number for the last filehandle accessed.

Each filehandle in Perl counts the number of lines that have been read
from it.  (Depending on the value of C<$/>, Perl's idea of what
constitutes a line may not match yours.)  When a line is read from a
filehandle (via C<readline()> or C<< <> >>), or when C<tell()> or
C<seek()> is called on it, C<$.> becomes an alias to the line counter
for that filehandle.

You can adjust the counter by assigning to C<$.>, but this will not
actually move the seek pointer.  I<Localizing C<$.> will not localize
the filehandle's line count>.  Instead, it will localize perl's notion
of which filehandle C<$.> is currently aliased to.

C<$.> is reset when the filehandle is closed, but B<not> when an open
filehandle is reopened without an intervening C<close()>.  For more
details, see L<perlop/"IE<sol>O Operators">.  Because C<< <> >> never does
an explicit close, line numbers increase across C<ARGV> files (but see
examples in L<perlfunc/eof>).

You can also use C<< HANDLE->input_line_number(EXPR) >> to access the
line counter for a given filehandle without having to worry about
which handle you last accessed.

Mnemonic: many programs use "." to mean the current line number.

=item IO::Handle->input_record_separator( EXPR )

=item $INPUT_RECORD_SEPARATOR

=item $RS

=item $/
X<$/> X<$RS> X<$INPUT_RECORD_SEPARATOR>

The input record separator, newline by default.  This influences Perl's
idea of what a "line" is.  Works like B<awk>'s RS variable, including
treating empty lines as a terminator if set to the null string (an
empty line cannot contain any spaces or tabs).  You may set it to a
multi-character string to match a multi-character terminator, or to
C<undef> to read through the end of file.  Setting it to C<"\n\n">
means something slightly different than setting to C<"">, if the file
contains consecutive empty lines.  Setting to C<""> will treat two or
more consecutive empty lines as a single empty line.  Setting to
C<"\n\n"> will blindly assume that the next input character belongs to
the next paragraph, even if it's a newline.

    local $/;           # enable "slurp" mode
    local $_ = <FH>;    # whole file now here
    s/\n[ \t]+/ /g;

Remember: the value of C<$/> is a string, not a regex.  B<awk> has to
be better for something. :-)

Setting C<$/> to a reference to an integer, scalar containing an
integer, or scalar that's convertible to an integer will attempt to
read records instead of lines, with the maximum record size being the
referenced integer number of characters.  So this:

    local $/ = \32768; # or \"32768", or \$var_containing_32768
    open my $fh, "<", $myfile or die $!;
    local $_ = <$fh>;

will read a record of no more than 32768 characters from $fh.  If you're
not reading from a record-oriented file (or your OS doesn't have
record-oriented files), then you'll likely get a full chunk of data
with every read.  If a record is larger than the record size you've
set, you'll get the record back in pieces.  Trying to set the record
size to zero or less is deprecated and will cause $/ to have the value
of "undef", which will cause reading in the (rest of the) whole file.

As of 5.19.9 setting C<$/> to any other form of reference will throw a
fatal exception. This is in preparation for supporting new ways to set
C<$/> in the future.

On VMS only, record reads bypass PerlIO layers and any associated
buffering, so you must not mix record and non-record reads on the
same filehandle.  Record mode mixes with line mode only when the
same buffering layer is in use for both modes.

You cannot call C<input_record_separator()> on a handle, only as a
static method.  See L<IO::Handle|IO::Handle>.

See also L<perlport/"Newlines">.  Also see L</$.>.

Mnemonic: / delimits line boundaries when quoting poetry.

=item IO::Handle->output_record_separator( EXPR )

=item $OUTPUT_RECORD_SEPARATOR

=item $ORS

=item $\
X<$\> X<$ORS> X<$OUTPUT_RECORD_SEPARATOR>

The output record separator for the print operator.  If defined, this
value is printed after the last of print's arguments.  Default is C<undef>.

You cannot call C<output_record_separator()> on a handle, only as a
static method.  See L<IO::Handle|IO::Handle>.

Mnemonic: you set C<$\> instead of adding "\n" at the end of the print.
Also, it's just like C<$/>, but it's what you get "back" from Perl.

=item HANDLE->autoflush( EXPR )

=item $OUTPUT_AUTOFLUSH

=item $|
X<$|> X<autoflush> X<flush> X<$OUTPUT_AUTOFLUSH>

If set to nonzero, forces a flush right away and after every write or
print on the currently selected output channel.  Default is 0
(regardless of whether the channel is really buffered by the system or
not; C<$|> tells you only whether you've asked Perl explicitly to
flush after each write).  STDOUT will typically be line buffered if
output is to the terminal and block buffered otherwise.  Setting this
variable is useful primarily when you are outputting to a pipe or
socket, such as when you are running a Perl program under B<rsh> and
want to see the output as it's happening.  This has no effect on input
buffering.  See L<perlfunc/getc> for that.  See L<perlfunc/select> on
how to select the output channel.  See also L<IO::Handle>.

Mnemonic: when you want your pipes to be piping hot.

=item ${^LAST_FH}
X<${^LAST_FH}>

This read-only variable contains a reference to the last-read filehandle.
This is set by C<< <HANDLE> >>, C<readline>, C<tell>, C<eof> and C<seek>.
This is the same handle that C<$.> and C<tell> and C<eof> without arguments
use.  It is also the handle used when Perl appends ", <STDIN> line 1" to
an error or warning message.

This variable was added in Perl v5.18.0.

=back

=head3 Variables related to formats

The special variables for formats are a subset of those for
filehandles.  See L<perlform> for more information about Perl's
formats.

=over 8

=item $ACCUMULATOR

=item $^A
X<$^A> X<$ACCUMULATOR>

The current value of the C<write()> accumulator for C<format()> lines.
A format contains C<formline()> calls that put their result into
C<$^A>.  After calling its format, C<write()> prints out the contents
of C<$^A> and empties.  So you never really see the contents of C<$^A>
unless you call C<formline()> yourself and then look at it.  See
L<perlform> and L<perlfunc/"formline PICTURE,LIST">.

=item IO::Handle->format_formfeed(EXPR)

=item $FORMAT_FORMFEED

=item $^L
X<$^L> X<$FORMAT_FORMFEED>

What formats output as a form feed.  The default is C<\f>.

You cannot call C<format_formfeed()> on a handle, only as a static
method.  See L<IO::Handle|IO::Handle>.

=item HANDLE->format_page_number(EXPR)

=item $FORMAT_PAGE_NUMBER

=item $%
X<$%> X<$FORMAT_PAGE_NUMBER>

The current page number of the currently selected output channel.

Mnemonic: C<%> is page number in B<nroff>.

=item HANDLE->format_lines_left(EXPR)

=item $FORMAT_LINES_LEFT

=item $-
X<$-> X<$FORMAT_LINES_LEFT>

The number of lines left on the page of the currently selected output
channel.

Mnemonic: lines_on_page - lines_printed.

=item IO::Handle->format_line_break_characters EXPR

=item $FORMAT_LINE_BREAK_CHARACTERS

=item $:
X<$:> X<FORMAT_LINE_BREAK_CHARACTERS>

The current set of characters after which a string may be broken to
fill continuation fields (starting with C<^>) in a format.  The default is
S<" \n-">, to break on a space, newline, or a hyphen.

You cannot call C<format_line_break_characters()> on a handle, only as
a static method.  See L<IO::Handle|IO::Handle>.

Mnemonic: a "colon" in poetry is a part of a line.

=item HANDLE->format_lines_per_page(EXPR)

=item $FORMAT_LINES_PER_PAGE

=item $=
X<$=> X<$FORMAT_LINES_PER_PAGE>

The current page length (printable lines) of the currently selected
output channel.  The default is 60.

Mnemonic: = has horizontal lines.

=item HANDLE->format_top_name(EXPR)

=item $FORMAT_TOP_NAME

=item $^
X<$^> X<$FORMAT_TOP_NAME>

The name of the current top-of-page format for the currently selected
output channel.  The default is the name of the filehandle with C<_TOP>
appended.  For example, the default format top name for the C<STDOUT>
filehandle is C<STDOUT_TOP>.

Mnemonic: points to top of page.

=item HANDLE->format_name(EXPR)

=item $FORMAT_NAME

=item $~
X<$~> X<$FORMAT_NAME>

The name of the current report format for the currently selected
output channel.  The default format name is the same as the filehandle
name.  For example, the default format name for the C<STDOUT>
filehandle is just C<STDOUT>.

Mnemonic: brother to C<$^>.

=back

=head2 Error Variables
X<error> X<exception>

The variables C<$@@>, C<$!>, C<$^E>, and C<$?> contain information
about different types of error conditions that may appear during
execution of a Perl program.  The variables are shown ordered by
the "distance" between the subsystem which reported the error and
the Perl process.  They correspond to errors detected by the Perl
interpreter, C library, operating system, or an external program,
respectively.

To illustrate the differences between these variables, consider the
following Perl expression, which uses a single-quoted string.  After
execution of this statement, perl may have set all four special error
variables:

    eval q{
	open my $pipe, "/cdrom/install |" or die $!;
	my @@res = <$pipe>;
	close $pipe or die "bad pipe: $?, $!";
    };

When perl executes the C<eval()> expression, it translates the
C<open()>, C<< <PIPE> >>, and C<close> calls in the C run-time library
and thence to the operating system kernel.  perl sets C<$!> to
the C library's C<errno> if one of these calls fails.

C<$@@> is set if the string to be C<eval>-ed did not compile (this may
happen if C<open> or C<close> were imported with bad prototypes), or
if Perl code executed during evaluation C<die()>d.  In these cases the
value of C<$@@> is the compile error, or the argument to C<die> (which
will interpolate C<$!> and C<$?>).  (See also L<Fatal>, though.)

Under a few operating systems, C<$^E> may contain a more verbose error
indicator, such as in this case, "CDROM tray not closed."  Systems that
do not support extended error messages leave C<$^E> the same as C<$!>.

Finally, C<$?> may be set to a non-0 value if the external program
F</cdrom/install> fails.  The upper eight bits reflect specific error
conditions encountered by the program (the program's C<exit()> value).
The lower eight bits reflect mode of failure, like signal death and
core dump information.  See L<wait(2)> for details.  In contrast to
C<$!> and C<$^E>, which are set only if an error condition is detected,
the variable C<$?> is set on each C<wait> or pipe C<close>,
overwriting the old value.  This is more like C<$@@>, which on every
C<eval()> is always set on failure and cleared on success.

For more details, see the individual descriptions at C<$@@>, C<$!>,
C<$^E>, and C<$?>.

=over 8

=item ${^CHILD_ERROR_NATIVE}
X<$^CHILD_ERROR_NATIVE>

The native status returned by the last pipe close, backtick (C<``>)
command, successful call to C<wait()> or C<waitpid()>, or from the
C<system()> operator.  On POSIX-like systems this value can be decoded
with the WIFEXITED, WEXITSTATUS, WIFSIGNALED, WTERMSIG, WIFSTOPPED,
WSTOPSIG and WIFCONTINUED functions provided by the L<POSIX> module.

Under VMS this reflects the actual VMS exit status; i.e. it is the
same as C<$?> when the pragma C<use vmsish 'status'> is in effect.

This variable was added in Perl v5.10.0.

=item $EXTENDED_OS_ERROR

=item $^E
X<$^E> X<$EXTENDED_OS_ERROR>

Error information specific to the current operating system.  At the
moment, this differs from C<L</$!>> under only VMS, OS/2, and Win32 (and
for MacPerl).  On all other platforms, C<$^E> is always just the same
as C<$!>.

Under VMS, C<$^E> provides the VMS status value from the last system
error.  This is more specific information about the last system error
than that provided by C<$!>.  This is particularly important when C<$!>
is set to B<EVMSERR>.

Under OS/2, C<$^E> is set to the error code of the last call to OS/2
API either via CRT, or directly from perl.

Under Win32, C<$^E> always returns the last error information reported
by the Win32 call C<GetLastError()> which describes the last error
from within the Win32 API.  Most Win32-specific code will report errors
via C<$^E>.  ANSI C and Unix-like calls set C<errno> and so most
portable Perl code will report errors via C<$!>.

Caveats mentioned in the description of C<L</$!>> generally apply to
C<$^E>, also.

This variable was added in Perl 5.003.

Mnemonic: Extra error explanation.

=item $EXCEPTIONS_BEING_CAUGHT

=item $^S
X<$^S> X<$EXCEPTIONS_BEING_CAUGHT>

Current state of the interpreter.

	$^S         State
	---------   -------------------------------------
	undef       Parsing module, eval, or main program
	true (1)    Executing an eval
	false (0)   Otherwise

The first state may happen in C<$SIG{__DIE__}> and C<$SIG{__WARN__}>
handlers.

The English name $EXCEPTIONS_BEING_CAUGHT is slightly misleading, because
the C<undef> value does not indicate whether exceptions are being caught,
since compilation of the main program does not catch exceptions.

This variable was added in Perl 5.004.

=item $WARNING

=item $^W
X<$^W> X<$WARNING>

The current value of the warning switch, initially true if B<-w> was
used, false otherwise, but directly modifiable.

See also L<warnings>.

Mnemonic: related to the B<-w> switch.

=item ${^WARNING_BITS}
X<${^WARNING_BITS}>

The current set of warning checks enabled by the C<use warnings> pragma.
It has the same scoping as the C<$^H> and C<%^H> variables.  The exact
values are considered internal to the L<warnings> pragma and may change
between versions of Perl.

This variable was added in Perl v5.6.0.

=item $OS_ERROR

=item $ERRNO

=item $!
X<$!> X<$ERRNO> X<$OS_ERROR>

When referenced, C<$!> retrieves the current value
of the C C<errno> integer variable.
If C<$!> is assigned a numerical value, that value is stored in C<errno>.
When referenced as a string, C<$!> yields the system error string
corresponding to C<errno>.

Many system or library calls set C<errno> if they fail,
to indicate the cause of failure.  They usually do B<not>
set C<errno> to zero if they succeed.  This means C<errno>,
hence C<$!>, is meaningful only I<immediately> after a B<failure>:

    if (open my $fh, "<", $filename) {
		# Here $! is meaningless.
		...
    }
    else {
		# ONLY here is $! meaningful.
		...
		# Already here $! might be meaningless.
    }
    # Since here we might have either success or failure,
    # $! is meaningless.

Here, I<meaningless> means that C<$!> may be unrelated to the outcome
of the C<open()> operator.  Assignment to C<$!> is similarly ephemeral.
It can be used immediately before invoking the C<die()> operator,
to set the exit value, or to inspect the system error string
corresponding to error I<n>, or to restore C<$!> to a meaningful state.

Mnemonic: What just went bang?

=item %OS_ERROR

=item %ERRNO

=item %!
X<%!> X<%OS_ERROR> X<%ERRNO>

Each element of C<%!> has a true value only if C<$!> is set to that
value.  For example, C<$!{ENOENT}> is true if and only if the current
value of C<$!> is C<ENOENT>; that is, if the most recent error was "No
such file or directory" (or its moral equivalent: not all operating
systems give that exact error, and certainly not all languages).  The
specific true value is not guaranteed, but in the past has generally
been the numeric value of C<$!>.  To check if a particular key is
meaningful on your system, use C<exists $!{the_key}>; for a list of legal
keys, use C<keys %!>.  See L<Errno> for more information, and also see
L</$!>.

This variable was added in Perl 5.005.

=item $CHILD_ERROR

=item $?
X<$?> X<$CHILD_ERROR>

The status returned by the last pipe close, backtick (C<``>) command,
successful call to C<wait()> or C<waitpid()>, or from the C<system()>
operator.  This is just the 16-bit status word returned by the
traditional Unix C<wait()> system call (or else is made up to look
like it).  Thus, the exit value of the subprocess is really (C<<< $? >>
8 >>>), and C<$? & 127> gives which signal, if any, the process died
from, and C<$? & 128> reports whether there was a core dump.

Additionally, if the C<h_errno> variable is supported in C, its value
is returned via C<$?> if any C<gethost*()> function fails.

If you have installed a signal handler for C<SIGCHLD>, the
value of C<$?> will usually be wrong outside that handler.

Inside an C<END> subroutine C<$?> contains the value that is going to be
given to C<exit()>.  You can modify C<$?> in an C<END> subroutine to
change the exit status of your program.  For example:

    END {
	$? = 1 if $? == 255;  # die would make it 255
    }

Under VMS, the pragma C<use vmsish 'status'> makes C<$?> reflect the
actual VMS exit status, instead of the default emulation of POSIX
status; see L<perlvms/$?> for details.

Mnemonic: similar to B<sh> and B<ksh>.

=item $EVAL_ERROR

=item $@@
X<$@@> X<$EVAL_ERROR>

The Perl error from the last C<eval> operator, i.e. the last exception that
was caught.  For C<eval BLOCK>, this is either a runtime error message or the
string or reference C<die> was called with.  The C<eval STRING> form also
catches syntax errors and other compile time exceptions.

If no error occurs, C<eval> sets C<$@@> to the empty string.

Warning messages are not collected in this variable.  You can, however,
set up a routine to process warnings by setting C<$SIG{__WARN__}> as
described in L</%SIG>.

Mnemonic: Where was the error "at"?

=back

=head2 Variables related to the interpreter state

These variables provide information about the current interpreter state.

=over 8

=item $COMPILING

=item $^C
X<$^C> X<$COMPILING>

The current value of the flag associated with the B<-c> switch.
Mainly of use with B<-MO=...> to allow code to alter its behavior
when being compiled, such as for example to C<AUTOLOAD> at compile
time rather than normal, deferred loading.  Setting
C<$^C = 1> is similar to calling C<B::minus_c>.

This variable was added in Perl v5.6.0.

=item $DEBUGGING

=item $^D
X<$^D> X<$DEBUGGING>

The current value of the debugging flags.  May be read or set.  Like its
L<command-line equivalent|perlrun/B<-D>I<letters>>, you can use numeric
or symbolic values, e.g. C<$^D = 10> or C<$^D = "st">.  See
L<perlrun/B<-D>I<number>>.  The contents of this variable also affects the
debugger operation.  See L<perldebguts/Debugger Internals>.

Mnemonic: value of B<-D> switch.

=item ${^ENCODING}
X<${^ENCODING}>

DEPRECATED!!!

The I<object reference> to the C<Encode> object that is used to convert
the source code to Unicode.  Thanks to this variable your Perl script
does not have to be written in UTF-8.  Default is C<undef>.

Setting this variable to any other value than C<undef> is deprecated due
to fundamental defects in its design and implementation.  It is planned
to remove it from a future Perl version.  Its purpose was to allow your
non-ASCII Perl scripts to not have to be written in UTF-8; this was
useful before editors that worked on UTF-8 encoded text were common, but
that was long ago.  It causes problems, such as affecting the operation
of other modules that aren't expecting it, causing general mayhem.  Its
use can lead to segfaults.

If you need something like this functionality, you should use the
L<encoding> pragma, which is also deprecated, but has fewer nasty side
effects.

If you are coming here because code of yours is being adversely affected
by someone's use of this variable, you can usually work around it by
doing this:

 local ${^ENCODING};

near the beginning of the functions that are getting broken.  This
undefines the variable during the scope of execution of the including
function.

This variable was added in Perl 5.8.2.

=item ${^GLOBAL_PHASE}
X<${^GLOBAL_PHASE}>

The current phase of the perl interpreter.

Possible values are:

=over 8

=item CONSTRUCT

The C<PerlInterpreter*> is being constructed via C<perl_construct>.  This
value is mostly there for completeness and for use via the
underlying C variable C<PL_phase>.  It's not really possible for Perl
code to be executed unless construction of the interpreter is
finished.

=item START

This is the global compile-time.  That includes, basically, every
C<BEGIN> block executed directly or indirectly from during the
compile-time of the top-level program.

This phase is not called "BEGIN" to avoid confusion with
C<BEGIN>-blocks, as those are executed during compile-time of any
compilation unit, not just the top-level program.  A new, localised
compile-time entered at run-time, for example by constructs as
C<eval "use SomeModule"> are not global interpreter phases, and
therefore aren't reflected by C<${^GLOBAL_PHASE}>.

=item CHECK

Execution of any C<CHECK> blocks.

=item INIT

Similar to "CHECK", but for C<INIT>-blocks, not C<CHECK> blocks.

=item RUN

The main run-time, i.e. the execution of C<PL_main_root>.

=item END

Execution of any C<END> blocks.

=item DESTRUCT

Global destruction.

=back

Also note that there's no value for UNITCHECK-blocks.  That's because
those are run for each compilation unit individually, and therefore is
not a global interpreter phase.

Not every program has to go through each of the possible phases, but
transition from one phase to another can only happen in the order
described in the above list.

An example of all of the phases Perl code can see:

    BEGIN { print "compile-time: ${^GLOBAL_PHASE}\n" }

    INIT  { print "init-time: ${^GLOBAL_PHASE}\n" }

    CHECK { print "check-time: ${^GLOBAL_PHASE}\n" }

    {
        package Print::Phase;

        sub new {
            my ($class, $time) = @@_;
            return bless \$time, $class;
        }

        sub DESTROY {
            my $self = shift;
            print "$$self: ${^GLOBAL_PHASE}\n";
        }
    }

    print "run-time: ${^GLOBAL_PHASE}\n";

    my $runtime = Print::Phase->new(
        "lexical variables are garbage collected before END"
    );

    END   { print "end-time: ${^GLOBAL_PHASE}\n" }

    our $destruct = Print::Phase->new(
        "package variables are garbage collected after END"
    );

This will print out

    compile-time: START
    check-time: CHECK
    init-time: INIT
    run-time: RUN
    lexical variables are garbage collected before END: RUN
    end-time: END
    package variables are garbage collected after END: DESTRUCT

This variable was added in Perl 5.14.0.

=item $^H
X<$^H>

WARNING: This variable is strictly for
internal use only.  Its availability,
behavior, and contents are subject to change without notice.

This variable contains compile-time hints for the Perl interpreter.  At the
end of compilation of a BLOCK the value of this variable is restored to the
value when the interpreter started to compile the BLOCK.

When perl begins to parse any block construct that provides a lexical scope
(e.g., eval body, required file, subroutine body, loop body, or conditional
block), the existing value of C<$^H> is saved, but its value is left unchanged.
When the compilation of the block is completed, it regains the saved value.
Between the points where its value is saved and restored, code that
executes within BEGIN blocks is free to change the value of C<$^H>.

This behavior provides the semantic of lexical scoping, and is used in,
for instance, the C<use strict> pragma.

The contents should be an integer; different bits of it are used for
different pragmatic flags.  Here's an example:

    sub add_100 { $^H |= 0x100 }

    sub foo {
	BEGIN { add_100() }
	bar->baz($boon);
    }

Consider what happens during execution of the BEGIN block.  At this point
the BEGIN block has already been compiled, but the body of C<foo()> is still
being compiled.  The new value of C<$^H>
will therefore be visible only while
the body of C<foo()> is being compiled.

Substitution of C<BEGIN { add_100() }> block with:

    BEGIN { require strict; strict->import('vars') }

demonstrates how C<use strict 'vars'> is implemented.  Here's a conditional
version of the same lexical pragma:

    BEGIN {
	require strict; strict->import('vars') if $condition
    }

This variable was added in Perl 5.003.

=item %^H
X<%^H>

The C<%^H> hash provides the same scoping semantic as C<$^H>.  This makes
it useful for implementation of lexically scoped pragmas.  See
L<perlpragma>.   All the entries are stringified when accessed at
runtime, so only simple values can be accommodated.  This means no
pointers to objects, for example.

When putting items into C<%^H>, in order to avoid conflicting with other
users of the hash there is a convention regarding which keys to use.
A module should use only keys that begin with the module's name (the
name of its main package) and a "/" character.  For example, a module
C<Foo::Bar> should use keys such as C<Foo::Bar/baz>.

This variable was added in Perl v5.6.0.

=item ${^OPEN}
X<${^OPEN}>

An internal variable used by PerlIO.  A string in two parts, separated
by a C<\0> byte, the first part describes the input layers, the second
part describes the output layers.

This variable was added in Perl v5.8.0.

=item $PERLDB

=item $^P
X<$^P> X<$PERLDB>

The internal variable for debugging support.  The meanings of the
various bits are subject to change, but currently indicate:

=over 6

=item 0x01

Debug subroutine enter/exit.

=item 0x02

Line-by-line debugging.  Causes C<DB::DB()> subroutine to be called for
each statement executed.  Also causes saving source code lines (like
0x400).

=item 0x04

Switch off optimizations.

=item 0x08

Preserve more data for future interactive inspections.

=item 0x10

Keep info about source lines on which a subroutine is defined.

=item 0x20

Start with single-step on.

=item 0x40

Use subroutine address instead of name when reporting.

=item 0x80

Report C<goto &subroutine> as well.

=item 0x100

Provide informative "file" names for evals based on the place they were compiled.

=item 0x200

Provide informative names to anonymous subroutines based on the place they
were compiled.

=item 0x400

Save source code lines into C<@@{"_<$filename"}>.

=item 0x800

When saving source, include evals that generate no subroutines.

=item 0x1000

When saving source, include source that did not compile.

=back

Some bits may be relevant at compile-time only, some at
run-time only.  This is a new mechanism and the details may change.
See also L<perldebguts>.

=item ${^TAINT}
X<${^TAINT}>

Reflects if taint mode is on or off.  1 for on (the program was run with
B<-T>), 0 for off, -1 when only taint warnings are enabled (i.e. with
B<-t> or B<-TU>).

This variable is read-only.

This variable was added in Perl v5.8.0.

=item ${^UNICODE}
X<${^UNICODE}>

Reflects certain Unicode settings of Perl.  See L<perlrun>
documentation for the C<-C> switch for more information about
the possible values.

This variable is set during Perl startup and is thereafter read-only.

This variable was added in Perl v5.8.2.

=item ${^UTF8CACHE}
X<${^UTF8CACHE}>

This variable controls the state of the internal UTF-8 offset caching code.
1 for on (the default), 0 for off, -1 to debug the caching code by checking
all its results against linear scans, and panicking on any discrepancy.

This variable was added in Perl v5.8.9.  It is subject to change or
removal without notice, but is currently used to avoid recalculating the
boundaries of multi-byte UTF-8-encoded characters.

=item ${^UTF8LOCALE}
X<${^UTF8LOCALE}>

This variable indicates whether a UTF-8 locale was detected by perl at
startup.  This information is used by perl when it's in
adjust-utf8ness-to-locale mode (as when run with the C<-CL> command-line
switch); see L<perlrun> for more info on this.

This variable was added in Perl v5.8.8.

=back

=head2 Deprecated and removed variables

Deprecating a variable announces the intent of the perl maintainers to
eventually remove the variable from the language.  It may still be
available despite its status.  Using a deprecated variable triggers
a warning.

Once a variable is removed, its use triggers an error telling you
the variable is unsupported.

See L<perldiag> for details about error messages.

=over 8

=item $#
X<$#>

C<$#> was a variable that could be used to format printed numbers.
After a deprecation cycle, its magic was removed in Perl v5.10.0 and
using it now triggers a warning: C<$# is no longer supported>.

This is not the sigil you use in front of an array name to get the
last index, like C<$#array>.  That's still how you get the last index
of an array in Perl.  The two have nothing to do with each other.

Deprecated in Perl 5.

Removed in Perl v5.10.0.

=item $*
X<$*>

C<$*> was a variable that you could use to enable multiline matching.
After a deprecation cycle, its magic was removed in Perl v5.10.0.
Using it now triggers a warning: C<$* is no longer supported>.
You should use the C</s> and C</m> regexp modifiers instead.

Deprecated in Perl 5.

Removed in Perl v5.10.0.

=item $[
X<$[>

This variable stores the index of the first element in an array, and
of the first character in a substring.  The default is 0, but you could
theoretically set it to 1 to make Perl behave more like B<awk> (or Fortran)
when subscripting and when evaluating the index() and substr() functions.

As of release 5 of Perl, assignment to C<$[> is treated as a compiler
directive, and cannot influence the behavior of any other file.
(That's why you can only assign compile-time constants to it.)
Its use is highly discouraged.

Prior to Perl v5.10.0, assignment to C<$[> could be seen from outer lexical
scopes in the same file, unlike other compile-time directives (such as
L<strict>).  Using local() on it would bind its value strictly to a lexical
block.  Now it is always lexically scoped.

As of Perl v5.16.0, it is implemented by the L<arybase> module.  See
L<arybase> for more details on its behaviour.

Under C<use v5.16>, or C<no feature "array_base">, C<$[> no longer has any
effect, and always contains 0.  Assigning 0 to it is permitted, but any
other value will produce an error.

Mnemonic: [ begins subscripts.

Deprecated in Perl v5.12.0.

=back

=cut
@


1.16
log
@Fix merge issues, remove excess files - match perl-5.20.2 dist
@
text
@d15 8
a22 4

Perl variable names may also be a sequence of digits or a single
punctuation or control character (with the literal control character
form deprecated).  These names are all reserved for
d25 7
a31 12
match.  Perl has a special syntax for the single-control-character
names: It understands C<^X> (caret C<X>) to mean the control-C<X>
character.  For example, the notation C<$^W> (dollar-sign caret
C<W>) is the scalar variable whose name is the single character
control-C<W>.  This is better than typing a literal control-C<W>
into your program.

Since Perl v5.6.0, Perl variable names may be alphanumeric
strings that begin with control characters (or better yet, a caret).
These variables must be written in the form C<${^Foo}>; the braces
are not optional.  C<${^Foo}> denotes the scalar variable whose
name is a control-C<F> followed by two C<o>'s.  These variables are
d33 2
a34 2
begin with C<^_> (control-underscore or caret-underscore).  No
control-character name that begins with C<^_> will acquire a special
d38 1
a38 1
Perl identifiers that begin with digits, control characters, or
d168 1
a168 1
the array operators C<push>, C<pop>, C<shift>, and C<unshift>.
d435 39
d698 1
a698 1
represented as a C<version> object.
d702 1
a702 1
as a v-string.
d709 3
a711 2
To convert C<$^V> into its string representation use C<sprintf()>'s
C<"%vd"> conversion:
d718 1
a718 1
See also C<$]> for an older representation of the Perl version.
d720 5
a724 1
This variable was added in Perl v5.6.0.
d726 1
a726 1
Mnemonic: use ^V for Version Control.
a1137 2
=item %LAST_MATCH_START

d1139 1
a1139 1
X<%-> X<%LAST_MATCH_START>
d1670 1
a1670 1
Finally, C<$?> may be set to non-0 value if the external program
d1675 1
a1675 1
C<$!> and C<$^E>, which are set only if error condition is detected,
d1705 1
a1705 1
moment, this differs from C<$!> under only VMS, OS/2, and Win32 (and
d1723 1
a1723 1
Caveats mentioned in the description of C<$!> generally apply to
a1809 4
Note that when stringified, the text is always returned as if both
S<L<C<"use locale">|perllocale>> and S<L<C<"use bytes">|bytes>> are in
effect.  This is likely to change in v5.22.

d1823 6
a1828 4
systems give that exact error, and certainly not all languages).  To
check if a particular key is meaningful on your system, use C<exists
$!{the_key}>; for a list of legal keys, use C<keys %!>.  See L<Errno>
for more information, and also see L</$!>.
d1870 6
a1875 5
The Perl syntax error message from the
last C<eval()> operator.  If C<$@@> is
the null string, the last C<eval()> parsed and executed correctly
(although the operations you invoked may have failed in the normal
fashion).
d1881 1
a1881 1
Mnemonic: Where was the syntax error "at"?
d1910 4
a1913 2
command-line equivalent, you can use numeric or symbolic values, eg
C<$^D = 10> or C<$^D = "st">.
d1920 2
d1924 24
a1947 2
does not have to be written in UTF-8.  Default is I<undef>.  The direct
manipulation of this variable is highly discouraged.
d2112 3
a2114 1
L<perlpragma>.
a2317 20

=item $]
X<$]>

See L</$^V> for a more modern representation of the Perl version that allows
accurate string comparisons.

The version + patchlevel / 1000 of the Perl interpreter.  This variable
can be used to determine whether the Perl interpreter executing a
script is in the right range of versions:

    warn "No PerlIO!\n" if $] lt '5.008';

The floating point representation can sometimes lead to inaccurate
numeric comparisons, so string comparisons are recommended.

See also the documentation of C<use VERSION> and C<require VERSION>
for a convenient way to fail if the running Perl interpreter is too old.

Mnemonic: Is this version of perl in the right bracket?
@


1.15
log
@Fix merge conflicts, remove extra files, match upstream perl-5.20.1

ok deraadt@@ sthen@@ espie@@ miod@@
@
text
@d17 2
a18 1
punctuation or control character.  These names are all reserved for
d374 1
a374 1
    $foo{$a,$b,$c}
d378 1
a378 1
    $foo{join($;, $a, $b, $c)}
d382 1
a382 1
    @@foo{$a,$b,$c}	# a slice--note the @@
d386 1
a386 1
    ($foo{$a},$foo{$b},$foo{$c})
@


1.14
log
@Merge perl-5.18.2 plus local patches, remove old files

OK espie@@ sthen@@ deraadt@@
@
text
@d64 1
a64 5
borrowed from B<awk>.  To avoid a performance hit, if you don't need the
C<$PREMATCH>, C<$MATCH>, or C<$POSTMATCH> it's best to use the C<English>
module without them:

    use English '-no_match_vars';
d217 1
a217 1
value. NTPL threads preserve the POSIX semantics.
d413 22
d804 45
a848 16
Due to an unfortunate accident of Perl's implementation, C<use
English> imposes a considerable performance penalty on all regular
expression matches in a program because it uses the C<$`>, C<$&>, and
C<$'>, regardless of whether they occur in the scope of C<use
English>.  For that reason, saying C<use English> in libraries is
strongly discouraged unless you import it without the match variables:

    use English '-no_match_vars'

The C<Devel::NYTProf> and C<Devel::FindAmpersand>
modules can help you find uses of these
problematic match variables in your code.

Since Perl v5.10.0, you can use the C</p> match operator flag and the
C<${^PREMATCH}>, C<${^MATCH}>, and C<${^POSTMATCH}> variables instead
so you only suffer the performance penalties.
d872 2
a873 5
The use of this variable anywhere in a program imposes a considerable
performance penalty on all regular expression matches.  To avoid this
penalty, you can extract the same substring by using L</@@->.  Starting
with Perl v5.10.0, you can use the C</p> match flag and the C<${^MATCH}>
variable to do the same thing for particular match operations.
d883 5
a887 1
performance penalty associated with that variable, and is only guaranteed
d889 2
a890 1
the C</p> modifier.
d905 2
a906 6
The use of this variable anywhere in a program imposes a considerable
performance penalty on all regular expression matches.  To avoid this
penalty, you can extract the same substring by using L</@@->.  Starting
with Perl v5.10.0, you can use the C</p> match flag and the
C<${^PREMATCH}> variable to do the same thing for particular match
operations.
d916 5
a920 1
performance penalty associated with that variable, and is only guaranteed
d922 2
a923 1
the C</p> modifier.
d925 1
a925 1
This variable was added in Perl v5.10.0
d942 2
a943 6
The use of this variable anywhere in a program imposes a considerable
performance penalty on all regular expression matches.
To avoid this penalty, you can extract the same substring by
using L</@@->.  Starting with Perl v5.10.0, you can use the C</p> match flag
and the C<${^POSTMATCH}> variable to do the same thing for particular
match operations.
d953 5
a957 1
performance penalty associated with that variable, and is only guaranteed
d959 2
a960 1
the C</p> modifier.
d1407 6
a1412 1
size to zero or less will cause reading in the (rest of the) whole file.
d1768 4
d2121 8
a2193 2
=item $OFMT

d2195 1
a2195 1
X<$#> X<$OFMT>
a2220 2
=item $ARRAY_BASE

d2222 1
a2222 1
X<$[> X<$ARRAY_BASE>
a2249 2
=item $OLD_PERL_VERSION

d2251 1
a2251 1
X<$]> X<$OLD_PERL_VERSION>
d2260 1
a2260 1
    warn "No checksumming!\n" if $] < 3.019;
d2263 1
a2263 1
numeric comparisons.
@


1.13
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@d27 1
a27 1
Since Perl 5.6, Perl variable names may be alphanumeric
d110 2
a111 2
cos, defined, eval, evalbytes, exp, glob,
hex, int, lc, lcfirst, length, log, lstat, mkdir, oct, ord, pos, print,
d113 2
a114 1
rmdir, sin, split (on its second argument), sqrt, stat, study, uc, ucfirst,
d142 2
a143 1
The default place to put an input record when a C<< <FH> >>
d149 2
a150 2
As C<$_> is a global variable, this may lead in some cases to unwanted
side-effects.  As of perl 5.10, you can now use a lexical version of
d152 10
a161 1
declaring C<our $_> restores the global C<$_> in the current scope.
d210 1
a210 1
LinuxThreads is now obsolete on Linux, and and caching C<getpid()>
d264 1
a264 1
On Linux as of perl 5.14 the legacy process name will be set with
d563 1
a563 1
The default delivery policy of signals changed in Perl 5.8.0 from
d643 2
a644 2
This variable first appeared in perl 5.6.0; earlier versions of perl
will see an undefined value.  Before perl 5.10.0 C<$^V> was represented
d662 1
a662 1
This variable was added in Perl 5.6.
d681 1
a681 1
This variable was added in Perl 5.10.
d799 1
a799 1
Since Perl 5.10, you can use the C</p> match operator flag and the
d828 1
a828 1
with Perl 5.10, you can use the C</p> match flag and the C<${^MATCH}>
d843 1
a843 1
This variable was added in Perl 5.10.
d859 1
a859 1
with Perl 5.10, you can use the C</p> match flag and the
d875 1
a875 1
This variable was added in Perl 5.10
d895 1
a895 1
using L</@@->.  Starting with Perl 5.10, you can use the C</p> match flag
d911 1
a911 1
This variable was added in Perl 5.10.
d948 1
a948 1
This variable was added in Perl 5.8.
d968 1
a968 1
This variable was added in Perl 5.6.
d995 1
a995 1
This variable was added in Perl 5.10.
d1041 1
a1041 1
This variable was added in Perl 5.6.
d1089 1
a1089 1
This variable was added in Perl 5.10
d1109 1
a1109 1
This variable was added in Perl 5.10.
d1123 1
a1123 1
This variable was added in Perl 5.10.
d1262 1
a1262 1
=item Handle->output_field_separator( EXPR )
d1274 3
d1314 1
a1314 1
=item HANDLE->input_record_separator( EXPR )
d1345 1
a1345 1
referenced integer.  So this:
d1351 1
a1351 1
will read a record of no more than 32768 bytes from FILE.  If you're
d1359 1
a1359 1
buffering,so you must not mix record and non-record reads on the
d1363 2
a1364 6
If you perform a record read on a FILE with an encoding layer such as
C<:encoding(latin1)> or C<:utf8>, you may get an invalid string as a
result, may leave the FILE positioned between characters in the stream
and may not be reading the number of bytes from the underlying file
that you specified.  This behaviour may change without warning in a
future version of perl.
d1366 1
a1366 1
See also L<perlport/"Newlines">. Also see L</$.>.
d1370 1
a1370 1
=item Handle->output_record_separator( EXPR )
d1382 3
d1409 11
d1442 1
a1442 1
=item HANDLE->format_formfeed(EXPR)
d1451 3
d1477 1
a1477 1
=item Handle->format_line_break_characters EXPR
d1488 3
d1599 1
a1599 1
This variable was added in Perl 5.8.9.
d1640 2
a1641 2
	---------   -------------------
	undef       Parsing module/eval
d1648 4
d1674 1
a1674 1
This variable was added in Perl 5.6.
d1801 1
a1801 1
This variable was added in Perl 5.6.
d1993 1
a1993 1
This variable was added in Perl 5.6.
d2002 1
a2002 1
This variable was added in Perl 5.8.0.
d2076 1
a2076 1
This variable was added in Perl 5.8.
d2087 1
a2087 1
This variable was added in Perl 5.8.2.
d2096 3
a2098 1
This variable was added in Perl 5.8.9.
d2108 1
a2108 1
This variable was added in Perl 5.8.8.
d2132 1
a2132 1
After a deprecation cycle, its magic was removed in Perl 5.10 and
d2141 1
a2141 1
Removed in Perl 5.10.
d2147 1
a2147 1
After a deprecation cycle, its magic was removed in Perl 5.10.
d2153 1
a2153 1
Removed in Perl 5.10.
d2170 1
a2170 1
Prior to Perl 5.10, assignment to C<$[> could be seen from outer lexical
d2175 1
a2175 1
As of Perl 5.16, it is implemented by the L<arybase> module.  See
d2184 1
a2184 1
Deprecated in Perl 5.12.
@


1.12
log
@merge in perl 5.12.2 plus local changes
@
text
@d7 1
a7 1
=head2 Predefined Names
d9 6
a14 4
The following names have special meaning to Perl.  Most 
punctuation names have reasonable mnemonics, or analogs in the
shells.  Nevertheless, if you wish to use long variable names,
you need only say
d16 10
a25 1
    use English;
d27 10
a36 3
at the top of your program. This aliases all the short names to the long
names in the current package. Some even have medium names, generally
borrowed from B<awk>. In general, it's best to use the
d38 5
a42 1
    use English '-no_match_vars';
d44 5
a48 8
invocation if you don't need $PREMATCH, $MATCH, or $POSTMATCH, as it avoids
a certain performance hit with the use of regular expressions. See
L<English>.

Variables that depend on the currently selected filehandle may be set by
calling an appropriate object method on the IO::Handle object, although
this is less efficient than using the regular built-in variables. (Summary
lines below for this contain the word HANDLE.) First you must say
d50 3
a52 1
    use IO::Handle;
d54 1
a54 1
after which you may use either
d56 3
a58 1
    method HANDLE EXPR
d60 1
a60 1
or more safely,
d62 5
a66 1
    HANDLE->method(EXPR)
d68 1
a68 73
Each method returns the old value of the IO::Handle attribute.
The methods each take an optional EXPR, which, if supplied, specifies the
new value for the IO::Handle attribute in question.  If not supplied,
most methods do nothing to the current value--except for
autoflush(), which will assume a 1 for you, just to be different.

Because loading in the IO::Handle class is an expensive operation, you should
learn how to use the regular built-in variables.

A few of these variables are considered "read-only".  This means that if
you try to assign to this variable, either directly or indirectly through
a reference, you'll raise a run-time exception.

You should be very careful when modifying the default values of most
special variables described in this document. In most cases you want
to localize these variables before changing them, since if you don't,
the change may affect other modules which rely on the default values
of the special variables that you have changed. This is one of the
correct ways to read the whole file at once:

    open my $fh, "<", "foo" or die $!;
    local $/; # enable localized slurp mode
    my $content = <$fh>;
    close $fh;

But the following code is quite bad:

    open my $fh, "<", "foo" or die $!;
    undef $/; # enable slurp mode
    my $content = <$fh>;
    close $fh;

since some other module, may want to read data from some file in the
default "line mode", so if the code we have just presented has been
executed, the global value of C<$/> is now changed for any other code
running inside the same Perl interpreter.

Usually when a variable is localized you want to make sure that this
change affects the shortest scope possible. So unless you are already
inside some short C<{}> block, you should create one yourself. For
example:

    my $content = '';
    open my $fh, "<", "foo" or die $!;
    {
        local $/;
        $content = <$fh>;
    }
    close $fh;

Here is an example of how your own code can go broken:

    for (1..5){
        nasty_break();
        print "$_ ";
    }
    sub nasty_break {
        $_ = 5;
        # do something with $_
    }

You probably expect this code to print:

    1 2 3 4 5

but instead you get:

    5 5 5 5 5

Why? Because nasty_break() modifies C<$_> without localizing it
first. The fix is to add local():

        local $_ = 5;
d70 6
a75 3
It's easy to notice the problem in such a short example, but in more
complicated code you are looking for trouble if you don't localize
changes to the special variables.
d77 1
a77 2
The following list is ordered by scalar variables first, then the
arrays, then the hashes.
d89 1
a89 1
    while (<>) {...}	# equivalent only in while!
d101 1
a101 2
Here are the places where Perl will assume $_ even if you
don't use it:
d107 1
a107 1
The following functions:
d109 2
a110 1
abs, alarm, chomp, chop, chr, chroot, cos, defined, eval, exp, glob,
d113 1
a113 1
rmdir, sin, split (on its second argument), sqrt, stat, study, uc, ucfirst, 
a120 1

d133 1
a133 1
The implicit iterator variable in the grep() and map() functions.
d137 1
a137 1
The implicit variable of given().
d148 1
a148 1
side-effects.  As of perl 5.9.1, you can now use a lexical version of
d152 1
a152 1
(Mnemonic: underline is understood in certain operations.)
d154 1
a154 1
=back
d156 2
a157 1
=over 8
d159 3
a161 1
=item $a
d163 1
a163 2
=item $b
X<$a> X<$b>
d165 1
a165 5
Special package variables when using sort(), see L<perlfunc/sort>.
Because of this specialness $a and $b don't need to be declared
(using use vars, or our()) even when using the C<strict 'vars'> pragma.
Don't lexicalize them with C<my $a> or C<my $b> if you want to be
able to use them in the sort() comparison block or function.
d167 2
a168 1
=back
d170 3
a172 1
=over 8
d174 1
a174 2
=item $<I<digits>> ($1, $2, ...)
X<$1> X<$2> X<$3>
d176 1
a176 5
Contains the subpattern from the corresponding set of capturing
parentheses from the last successful pattern match, not counting patterns
matched in nested blocks that have been exited already.  (Mnemonic:
like \digits.)  These variables are all read-only and dynamically
scoped to the current BLOCK.
d178 1
a178 1
=item $MATCH
d180 1
a180 2
=item $&
X<$&> X<$MATCH>
d182 1
a182 4
The string matched by the last successful pattern match (not counting
any matches hidden within a BLOCK or eval() enclosed by the current
BLOCK).  (Mnemonic: like & in some editors.)  This variable is read-only
and dynamically scoped to the current BLOCK.
d184 1
a184 2
The use of this variable anywhere in a program imposes a considerable
performance penalty on all regular expression matches.  See L</BUGS>.
d186 2
a187 1
See L</@@-> for a replacement.
d189 22
a210 2
=item ${^MATCH}
X<${^MATCH}>
d212 1
a212 4
This is similar to C<$&> (C<$MATCH>) except that it does not incur the
performance penalty associated with that variable, and is only guaranteed
to return a defined value when the pattern was compiled or executed with
the C</p> modifier.
d214 1
a214 1
=item $PREMATCH
d216 2
a217 2
=item $`
X<$`> X<$PREMATCH>
d219 1
a219 4
The string preceding whatever was matched by the last successful
pattern match (not counting any matches hidden within a BLOCK or eval
enclosed by the current BLOCK).  (Mnemonic: C<`> often precedes a quoted
string.)  This variable is read-only.
d221 6
a226 2
The use of this variable anywhere in a program imposes a considerable
performance penalty on all regular expression matches.  See L</BUGS>.
d228 3
a230 1
See L</@@-> for a replacement.
d232 5
a236 2
=item ${^PREMATCH}
X<${^PREMATCH}>
d238 5
a242 4
This is similar to C<$`> ($PREMATCH) except that it does not incur the
performance penalty associated with that variable, and is only guaranteed
to return a defined value when the pattern was compiled or executed with
the C</p> modifier.
d244 5
a248 1
=item $POSTMATCH
d250 2
a251 2
=item $'
X<$'> X<$POSTMATCH>
d253 6
a258 4
The string following whatever was matched by the last successful
pattern match (not counting any matches hidden within a BLOCK or eval()
enclosed by the current BLOCK).  (Mnemonic: C<'> often follows a quoted
string.)  Example:
d260 1
a260 3
    local $_ = 'abcdefghi';
    /def/;
    print "$`:$&:$'\n";  	# prints abc:def:ghi
d262 1
a262 1
This variable is read-only and dynamically scoped to the current BLOCK.
d264 1
a264 2
The use of this variable anywhere in a program imposes a considerable
performance penalty on all regular expression matches.  See L</BUGS>.
d266 2
a267 1
See L</@@-> for a replacement.
d269 5
a273 2
=item ${^POSTMATCH}
X<${^POSTMATCH}>
d275 5
a279 4
This is similar to C<$'> (C<$POSTMATCH>) except that it does not incur the
performance penalty associated with that variable, and is only guaranteed
to return a defined value when the pattern was compiled or executed with
the C</p> modifier.
d281 4
a284 1
=item $LAST_PAREN_MATCH
d286 2
a287 2
=item $+
X<$+> X<$LAST_PAREN_MATCH>
d289 1
a289 3
The text matched by the last bracket of the last successful search pattern.
This is useful if you don't know which one of a set of alternative patterns
matched. For example:
d291 1
a291 1
    /Version: (.*)|Revision: (.*)/ && ($rev = $+);
d293 2
a294 2
(Mnemonic: be positive and forward looking.)
This variable is read-only and dynamically scoped to the current BLOCK.
d296 5
a300 1
=item $LAST_SUBMATCH_RESULT
d302 6
a307 2
=item $^N
X<$^N>
d309 4
a312 4
The text matched by the used group most-recently closed (i.e. the group
with the rightmost closing parenthesis) of the last successful search
pattern.  (Mnemonic: the (possibly) Nested parenthesis that most
recently closed.)
d314 3
a316 3
This is primarily used inside C<(?{...})> blocks for examining text
recently matched. For example, to effectively capture text to a variable
(in addition to C<$1>, C<$2>, etc.), replace C<(...)> with
d318 2
a319 1
     (?:(...)(?{ $var = $^N }))
d321 1
a321 2
By setting and then using C<$var> in this way relieves you from having to
worry about exactly which numbered set of parentheses they are.
d323 1
a323 1
This variable is dynamically scoped to the current BLOCK.
d325 2
a326 1
=item @@LAST_MATCH_END
d328 4
a331 2
=item @@+
X<@@+> X<@@LAST_MATCH_END>
d333 1
a333 10
This array holds the offsets of the ends of the last successful
submatches in the currently active dynamic scope.  C<$+[0]> is
the offset into the string of the end of the entire match.  This
is the same value as what the C<pos> function returns when called
on the variable that was matched against.  The I<n>th element
of this array holds the offset of the I<n>th submatch, so
C<$+[1]> is the offset past where $1 ends, C<$+[2]> the offset
past where $2 ends, and so on.  You can use C<$#+> to determine
how many subgroups were in the last successful match.  See the
examples given for the C<@@-> variable.
d335 1
a335 1
=item %LAST_PAREN_MATCH
d337 1
a337 2
=item %+
X<%+>
d339 2
a340 3
Similar to C<@@+>, the C<%+> hash allows access to the named capture
buffers, should they exist, in the last successful match in the
currently active dynamic scope.
d342 1
a342 1
For example, C<$+{foo}> is equivalent to C<$1> after the following match:
d344 2
a345 1
  'foo' =~ /(?<foo>foo)/;
d347 3
a349 2
The keys of the C<%+> hash list only the names of buffers that have
captured (and that are thus associated to defined values).
d351 2
a352 2
The underlying behaviour of C<%+> is provided by the
L<Tie::Hash::NamedCapture> module.
d354 1
a354 5
B<Note:> C<%-> and C<%+> are tied views into a common internal hash
associated with the last successful regular expression. Therefore mixing
iterative access to them via C<each> may have unpredictable results.
Likewise, if the last successful match changes, then the results may be
surprising.
d356 1
a356 1
=item HANDLE->input_line_number(EXPR)
d358 1
a358 1
=item $INPUT_LINE_NUMBER
d360 2
a361 1
=item $NR
d363 2
a364 2
=item $.
X<$.> X<$NR> X<$INPUT_LINE_NUMBER> X<line number>
d366 1
a366 1
Current line number for the last filehandle accessed.
d368 438
a805 6
Each filehandle in Perl counts the number of lines that have been read
from it.  (Depending on the value of C<$/>, Perl's idea of what
constitutes a line may not match yours.)  When a line is read from a
filehandle (via readline() or C<< <> >>), or when tell() or seek() is
called on it, C<$.> becomes an alias to the line counter for that
filehandle.
d807 2
a808 4
You can adjust the counter by assigning to C<$.>, but this will not
actually move the seek pointer.  I<Localizing C<$.> will not localize
the filehandle's line count>.  Instead, it will localize perl's notion
of which filehandle C<$.> is currently aliased to.
d810 3
a812 5
C<$.> is reset when the filehandle is closed, but B<not> when an open
filehandle is reopened without an intervening close().  For more
details, see L<perlop/"IE<sol>O Operators">.  Because C<< <> >> never does
an explicit close, line numbers increase across ARGV files (but see
examples in L<perlfunc/eof>).
d814 5
a818 3
You can also use C<< HANDLE->input_line_number(EXPR) >> to access the
line counter for a given filehandle without having to worry about
which handle you last accessed.
d820 1
a820 1
(Mnemonic: many programs use "." to mean the current line number.)
d822 1
a822 1
=item IO::Handle->input_record_separator(EXPR)
d824 2
a825 1
=item $INPUT_RECORD_SEPARATOR
d827 4
a830 1
=item $RS
d832 1
a832 2
=item $/
X<$/> X<$RS> X<$INPUT_RECORD_SEPARATOR>
d834 1
a834 13
The input record separator, newline by default.  This 
influences Perl's idea of what a "line" is.  Works like B<awk>'s RS
variable, including treating empty lines as a terminator if set to
the null string.  (An empty line cannot contain any spaces
or tabs.)  You may set it to a multi-character string to match a
multi-character terminator, or to C<undef> to read through the end
of file.  Setting it to C<"\n\n"> means something slightly
different than setting to C<"">, if the file contains consecutive
empty lines.  Setting to C<""> will treat two or more consecutive
empty lines as a single empty line.  Setting to C<"\n\n"> will
blindly assume that the next input character belongs to the next
paragraph, even if it's a newline.  (Mnemonic: / delimits
line boundaries when quoting poetry.)
d836 1
a836 3
    local $/;           # enable "slurp" mode
    local $_ = <FH>;    # whole file now here
    s/\n[ \t]+/ /g;
d838 2
a839 2
Remember: the value of C<$/> is a string, not a regex.  B<awk> has to be
better for something. :-)
d841 3
a843 4
Setting C<$/> to a reference to an integer, scalar containing an integer, or
scalar that's convertible to an integer will attempt to read records
instead of lines, with the maximum record size being the referenced
integer.  So this:
d845 6
a850 3
    local $/ = \32768; # or \"32768", or \$var_containing_32768
    open my $fh, "<", $myfile or die $!;
    local $_ = <$fh>;
d852 1
a852 6
will read a record of no more than 32768 bytes from FILE.  If you're
not reading from a record-oriented file (or your OS doesn't have
record-oriented files), then you'll likely get a full chunk of data
with every read.  If a record is larger than the record size you've
set, you'll get the record back in pieces.  Trying to set the record
size to zero or less will cause reading in the (rest of the) whole file.
d854 1
a854 6
On VMS, record reads are done with the equivalent of C<sysread>,
so it's best not to mix record and non-record reads on the same
file.  (This is unlikely to be a problem, because any file you'd
want to read in record mode is probably unusable in line mode.)
Non-VMS systems do normal I/O, so it's safe to mix record and
non-record reads of a file.
d856 2
a857 1
See also L<perlport/"Newlines">.  Also see C<$.>.
d859 4
a862 1
=item HANDLE->autoflush(EXPR)
d864 1
a864 1
=item $OUTPUT_AUTOFLUSH
d866 1
a866 2
=item $|
X<$|> X<autoflush> X<flush> X<$OUTPUT_AUTOFLUSH>
d868 1
a868 12
If set to nonzero, forces a flush right away and after every write
or print on the currently selected output channel.  Default is 0
(regardless of whether the channel is really buffered by the
system or not; C<$|> tells you only whether you've asked Perl
explicitly to flush after each write).  STDOUT will
typically be line buffered if output is to the terminal and block
buffered otherwise.  Setting this variable is useful primarily when
you are outputting to a pipe or socket, such as when you are running
a Perl program under B<rsh> and want to see the output as it's
happening.  This has no effect on input buffering.  See L<perlfunc/getc>
for that.  See L<perldoc/select> on how to select the output channel. 
See also L<IO::Handle>. (Mnemonic: when you want your pipes to be piping hot.)
d870 2
a871 1
=item IO::Handle->output_field_separator EXPR
d873 3
a875 1
=item $OUTPUT_FIELD_SEPARATOR
d877 3
a879 1
=item $OFS
d881 6
a886 2
=item $,
X<$,> X<$OFS> X<$OUTPUT_FIELD_SEPARATOR>
d888 1
a888 3
The output field separator for the print operator.  If defined, this
value is printed between each of print's arguments.  Default is C<undef>.
(Mnemonic: what is printed when there is a "," in your print statement.)
d890 1
a890 1
=item IO::Handle->output_record_separator EXPR
d892 2
a893 1
=item $OUTPUT_RECORD_SEPARATOR
d895 4
a898 1
=item $ORS
d900 1
a900 2
=item $\
X<$\> X<$ORS> X<$OUTPUT_RECORD_SEPARATOR>
d902 1
a902 4
The output record separator for the print operator.  If defined, this
value is printed after the last of print's arguments.  Default is C<undef>.
(Mnemonic: you set C<$\> instead of adding "\n" at the end of the print.
Also, it's just like C<$/>, but it's what you get "back" from Perl.)
d904 1
a904 1
=item $LIST_SEPARATOR
d906 2
a907 2
=item $"
X<$"> X<$LIST_SEPARATOR>
d909 3
a911 3
This is like C<$,> except that it applies to array and slice values
interpolated into a double-quoted string (or similar interpreted
string).  Default is a space.  (Mnemonic: obvious, I think.)
d913 1
a913 1
=item $SUBSCRIPT_SEPARATOR
d915 1
a915 1
=item $SUBSEP
d917 1
a917 2
=item $;
X<$;> X<$SUBSEP> X<SUBSCRIPT_SEPARATOR>
d919 1
a919 2
The subscript separator for multidimensional array emulation.  If you
refer to a hash element as
d921 2
a922 1
    $foo{$a,$b,$c}
d924 3
a926 1
it really means
d928 3
a930 1
    $foo{join($;, $a, $b, $c)}
d932 1
a932 1
But don't put
d934 2
a935 1
    @@foo{$a,$b,$c}	# a slice--note the @@
d937 1
a937 1
which means
d939 1
a939 1
    ($foo{$a},$foo{$b},$foo{$c})
d941 1
a941 5
Default is "\034", the same as SUBSEP in B<awk>.  If your
keys contain binary data there might not be any safe value for C<$;>.
(Mnemonic: comma (the syntactic subscript separator) is a
semi-semicolon.  Yeah, I know, it's pretty lame, but C<$,> is already
taken for something more important.)
d943 2
a944 2
Consider using "real" multidimensional arrays as described
in L<perllol>.
d946 10
a955 1
=item HANDLE->format_page_number(EXPR)
d957 1
a957 1
=item $FORMAT_PAGE_NUMBER
d959 1
a959 2
=item $%
X<$%> X<$FORMAT_PAGE_NUMBER>
d961 2
a962 3
The current page number of the currently selected output channel.
Used with formats.
(Mnemonic: % is page number in B<nroff>.)
d964 3
a966 1
=item HANDLE->format_lines_per_page(EXPR)
d968 1
a968 1
=item $FORMAT_LINES_PER_PAGE
d970 1
a970 2
=item $=
X<$=> X<$FORMAT_LINES_PER_PAGE>
d972 2
a973 4
The current page length (printable lines) of the currently selected
output channel.  Default is 60.  
Used with formats.
(Mnemonic: = has horizontal lines.)
d975 2
a976 1
=item HANDLE->format_lines_left(EXPR)
d978 5
a982 1
=item $FORMAT_LINES_LEFT
d984 1
a984 2
=item $-
X<$-> X<$FORMAT_LINES_LEFT>
d986 1
a986 4
The number of lines left on the page of the currently selected output
channel.  
Used with formats.
(Mnemonic: lines_on_page - lines_printed.)
d993 1
a993 1
$-[0] is the offset of the start of the last successful match.
d997 1
a997 1
Thus after a match against $_, $& coincides with C<substr $_, $-[0],
d1000 2
a1001 2
C<substr $_, $-[$#-], $+[$#-] - $-[$#-]>.  One can use C<$#-> to find the last
matched subgroup in the last successful match.  Contrast with
d1009 2
a1010 2
of the I<n>th submatch, so C<$-[1]> is the offset where $1
begins, C<$-[2]> the offset where $2 begins, and so on.
d1012 1
a1012 1
After a match against some variable $var:
d1022 163
a1184 1
=item C<$1> is the same as C<substr($var, $-[1], $+[1] - $-[1])>  
d1186 5
a1190 1
=item C<$2> is the same as C<substr($var, $-[2], $+[2] - $-[2])>
d1192 4
a1195 1
=item C<$3> is the same as C<substr($var, $-[3], $+[3] - $-[3])>
d1197 1
a1197 1
=back
d1199 1
a1199 2
=item %-
X<%->
d1201 1
a1201 6
Similar to C<%+>, this variable allows access to the named capture buffers
in the last successful match in the currently active dynamic scope. To
each capture buffer name found in the regular expression, it associates a
reference to an array containing the list of values captured by all
buffers with that name (should there be several of them), in the order
where they appear.
d1203 1
a1203 1
Here's an example:
d1205 4
a1208 10
    if ('1234' =~ /(?<A>1)(?<B>2)(?<A>3)(?<B>4)/) {
        foreach my $bufname (sort keys %-) {
            my $ary = $-{$bufname};
            foreach my $idx (0..$#$ary) {
                print "\$-{$bufname}[$idx] : ",
                      (defined($ary->[$idx]) ? "'$ary->[$idx]'" : "undef"),
                      "\n";
            }
        }
    }
d1210 1
a1210 1
would print out:
d1212 3
a1214 4
    $-{A}[0] : '1'
    $-{A}[1] : '3'
    $-{B}[0] : '2'
    $-{B}[1] : '4'
d1216 1
a1216 2
The keys of the C<%-> hash correspond to all buffer names found in
the regular expression.
d1218 2
a1219 2
The behaviour of C<%-> is implemented via the
L<Tie::Hash::NamedCapture> module.
d1221 1
a1221 5
B<Note:> C<%-> and C<%+> are tied views into a common internal hash
associated with the last successful regular expression. Therefore mixing
iterative access to them via C<each> may have unpredictable results.
Likewise, if the last successful match changes, then the results may be
surprising.
d1223 2
a1224 1
=item HANDLE->format_name(EXPR)
d1226 4
a1229 1
=item $FORMAT_NAME
d1231 2
a1232 2
=item $~
X<$~> X<$FORMAT_NAME>
d1234 8
a1241 3
The name of the current report format for the currently selected output
channel.  Default is the name of the filehandle.  (Mnemonic: brother to
C<$^>.)
d1243 2
a1244 1
=item HANDLE->format_top_name(EXPR)
d1246 4
a1249 1
=item $FORMAT_TOP_NAME
d1251 1
a1251 2
=item $^
X<$^> X<$FORMAT_TOP_NAME>
d1253 1
a1253 3
The name of the current top-of-page format for the currently selected
output channel.  Default is the name of the filehandle with _TOP
appended.  (Mnemonic: points to top of page.)
d1255 1
a1255 1
=item IO::Handle->format_line_break_characters EXPR
d1257 2
a1258 1
=item $FORMAT_LINE_BREAK_CHARACTERS
d1260 2
a1261 2
=item $:
X<$:> X<FORMAT_LINE_BREAK_CHARACTERS>
d1263 1
a1263 4
The current set of characters after which a string may be broken to
fill continuation fields (starting with ^) in a format.  Default is
S<" \n-">, to break on whitespace or hyphens.  (Mnemonic: a "colon" in
poetry is a part of a line.)
d1265 1
a1265 1
=item IO::Handle->format_formfeed EXPR
d1267 1
a1267 1
=item $FORMAT_FORMFEED
d1269 1
a1269 2
=item $^L
X<$^L> X<$FORMAT_FORMFEED>
d1271 2
a1272 1
What formats output as a form feed.  Default is \f.
d1274 1
a1274 1
=item $ACCUMULATOR
d1276 6
a1281 2
=item $^A
X<$^A> X<$ACCUMULATOR>
d1283 4
a1286 6
The current value of the write() accumulator for format() lines.  A format
contains formline() calls that put their result into C<$^A>.  After
calling its format, write() prints out the contents of C<$^A> and empties.
So you never really see the contents of C<$^A> unless you call
formline() yourself and then look at it.  See L<perlform> and
L<perlfunc/formline()>.
d1288 5
a1292 1
=item $CHILD_ERROR
d1294 3
a1296 2
=item $?
X<$?> X<$CHILD_ERROR>
d1298 1
a1298 8
The status returned by the last pipe close, backtick (C<``>) command,
successful call to wait() or waitpid(), or from the system()
operator.  This is just the 16-bit status word returned by the
traditional Unix wait() system call (or else is made up to look like it).  Thus, the
exit value of the subprocess is really (C<<< $? >> 8 >>>), and
C<$? & 127> gives which signal, if any, the process died from, and
C<$? & 128> reports whether there was a core dump.  (Mnemonic:
similar to B<sh> and B<ksh>.)
d1300 1
a1300 2
Additionally, if the C<h_errno> variable is supported in C, its value
is returned via $? if any C<gethost*()> function fails.
d1302 1
a1302 2
If you have installed a signal handler for C<SIGCHLD>, the
value of C<$?> will usually be wrong outside that handler.
d1304 1
a1304 3
Inside an C<END> subroutine C<$?> contains the value that is going to be
given to C<exit()>.  You can modify C<$?> in an C<END> subroutine to
change the exit status of your program.  For example:
d1306 2
a1307 3
    END {
	$? = 1 if $? == 255;  # die would make it 255
    } 
d1309 11
a1319 3
Under VMS, the pragma C<use vmsish 'status'> makes C<$?> reflect the
actual VMS exit status, instead of the default emulation of POSIX
status; see L<perlvms/$?> for details.
d1321 3
a1323 1
Also see L<Error Indicators>.
d1325 2
a1326 2
=item ${^CHILD_ERROR_NATIVE}
X<$^CHILD_ERROR_NATIVE>
d1328 4
a1331 5
The native status returned by the last pipe close, backtick (C<``>)
command, successful call to wait() or waitpid(), or from the system()
operator.  On POSIX-like systems this value can be decoded with the
WIFEXITED, WEXITSTATUS, WIFSIGNALED, WTERMSIG, WIFSTOPPED, WSTOPSIG
and WIFCONTINUED functions provided by the L<POSIX> module.
d1333 3
a1335 2
Under VMS this reflects the actual VMS exit status; i.e. it is the same
as $? when the pragma C<use vmsish 'status'> is in effect.
d1337 6
a1342 2
=item ${^ENCODING}
X<$^ENCODING>
d1344 11
a1354 4
The I<object reference> to the Encode object that is used to convert
the source code to Unicode.  Thanks to this variable your perl script
does not have to be written in UTF-8.  Default is I<undef>.  The direct
manipulation of this variable is highly discouraged.
d1356 1
a1356 1
=item $OS_ERROR
d1358 1
a1358 1
=item $ERRNO
d1360 1
a1360 2
=item $!
X<$!> X<$ERRNO> X<$OS_ERROR>
d1362 1
a1362 4
If used numerically, yields the current value of the C C<errno>
variable, or in other words, if a system or library call fails, it
sets this variable.  This means that the value of C<$!> is meaningful
only I<immediately> after a B<failure>:
d1364 1
a1364 10
    if (open my $fh, "<", $filename) {
	# Here $! is meaningless.
	...
    } else {
	# ONLY here is $! meaningful.
	...
	# Already here $! might be meaningless.
    }
    # Since here we might have either success or failure,
    # here $! is meaningless.
d1366 2
a1367 9
In the above I<meaningless> stands for anything: zero, non-zero,
C<undef>.  A successful system or library call does B<not> set
the variable to zero.

If used as a string, yields the corresponding system error string.
You can assign a number to C<$!> to set I<errno> if, for instance,
you want C<"$!"> to return the string for error I<n>, or you want
to set the exit value for the die() operator.  (Mnemonic: What just
went bang?)
d1369 2
a1370 1
Also see L<Error Indicators>.
d1372 2
a1373 1
=item %OS_ERROR
d1375 1
a1375 1
=item %ERRNO
d1377 1
a1377 2
=item %!
X<%!>
d1379 2
a1380 9
Each element of C<%!> has a true value only if C<$!> is set to that
value.  For example, C<$!{ENOENT}> is true if and only if the current
value of C<$!> is C<ENOENT>; that is, if the most recent error was
"No such file or directory" (or its moral equivalent: not all operating
systems give that exact error, and certainly not all languages).
To check if a particular key is meaningful on your system, use
C<exists $!{the_key}>; for a list of legal keys, use C<keys %!>.
See L<Errno> for more information, and also see above for the
validity of C<$!>.
d1382 11
a1392 1
=item $EXTENDED_OS_ERROR
d1394 1
a1394 2
=item $^E
X<$^E> X<$EXTENDED_OS_ERROR>
d1396 1
a1396 19
Error information specific to the current operating system.  At
the moment, this differs from C<$!> under only VMS, OS/2, and Win32
(and for MacPerl).  On all other platforms, C<$^E> is always just
the same as C<$!>.

Under VMS, C<$^E> provides the VMS status value from the last
system error.  This is more specific information about the last
system error than that provided by C<$!>.  This is particularly
important when C<$!> is set to B<EVMSERR>.

Under OS/2, C<$^E> is set to the error code of the last call to
OS/2 API either via CRT, or directly from perl.

Under Win32, C<$^E> always returns the last error information
reported by the Win32 call C<GetLastError()> which describes
the last error from within the Win32 API.  Most Win32-specific
code will report errors via C<$^E>.  ANSI C and Unix-like calls
set C<errno> and so most portable Perl code will report errors
via C<$!>. 
d1398 1
a1398 2
Caveats mentioned in the description of C<$!> generally apply to
C<$^E>, also.  (Mnemonic: Extra error explanation.)
d1400 3
a1402 1
Also see L<Error Indicators>.
d1404 1
a1404 1
=item $EVAL_ERROR
d1406 1
a1406 2
=item $@@
X<$@@> X<$EVAL_ERROR>
d1408 2
a1409 8
The Perl syntax error message from the last eval() operator.
If $@@ is the null string, the last eval() parsed and executed
correctly (although the operations you invoked may have failed in the
normal fashion).  (Mnemonic: Where was the syntax error "at"?)

Warning messages are not collected in this variable.  You can,
however, set up a routine to process warnings by setting C<$SIG{__WARN__}>
as described below.
d1411 6
a1416 1
Also see L<Error Indicators>.
d1418 1
a1418 1
=item $PROCESS_ID
d1420 1
a1420 1
=item $PID
d1422 2
a1423 2
=item $$
X<$$> X<$PID> X<$PROCESS_ID>
d1425 1
a1425 9
The process number of the Perl running this script.  You should
consider this variable read-only, although it will be altered
across fork() calls.  (Mnemonic: same as shells.)

Note for Linux users: on Linux, the C functions C<getpid()> and
C<getppid()> return different values from different threads. In order to
be portable, this behavior is not reflected by C<$$>, whose value remains
consistent across threads. If you want to call the underlying C<getpid()>,
you may use the CPAN module C<Linux::Pid>.
d1427 1
a1427 1
=item $REAL_USER_ID
d1429 1
a1429 1
=item $UID
d1431 2
a1432 2
=item $<
X<< $< >> X<$UID> X<$REAL_USER_ID>
d1434 1
a1434 5
The real uid of this process.  (Mnemonic: it's the uid you came I<from>,
if you're running setuid.)  You can change both the real uid and
the effective uid at the same time by using POSIX::setuid().  Since
changes to $< require a system call, check $! after a change attempt to 
detect any possible errors.
d1436 1
a1436 1
=item $EFFECTIVE_USER_ID
d1438 1
a1438 1
=item $EUID
d1440 1
a1440 2
=item $>
X<< $> >> X<$EUID> X<$EFFECTIVE_USER_ID>
d1442 2
a1443 1
The effective uid of this process.  Example:
d1445 2
a1446 2
    $< = $>;		# set real to effective uid
    ($<,$>) = ($>,$<);	# swap real and effective uid
d1448 1
a1448 3
You can change both the effective uid and the real uid at the same
time by using POSIX::setuid().  Changes to $> require a check to $!
to detect any possible errors after an attempted change. 
d1450 1
a1450 3
(Mnemonic: it's the uid you went I<to>, if you're running setuid.)
C<< $< >> and C<< $> >> can be swapped only on machines
supporting setreuid().
d1452 1
a1452 1
=item $REAL_GROUP_ID
d1454 2
a1455 1
=item $GID
d1457 3
a1459 2
=item $(
X<$(> X<$GID> X<$REAL_GROUP_ID>
d1461 1
a1461 5
The real gid of this process.  If you are on a machine that supports
membership in multiple groups simultaneously, gives a space separated
list of groups you are in.  The first number is the one returned by
getgid(), and the subsequent ones by getgroups(), one of which may be
the same as the first number.
d1463 1
a1463 5
However, a value assigned to C<$(> must be a single number used to
set the real gid.  So the value given by C<$(> should I<not> be assigned
back to C<$(> without being forced numeric, such as by adding zero. Note
that this is different to the effective gid (C<$)>) which does take a
list.
d1465 1
a1465 3
You can change both the real gid and the effective gid at the same
time by using POSIX::setgid().  Changes to $( require a check to $!
to detect any possible errors after an attempted change.
d1467 2
a1468 2
(Mnemonic: parentheses are used to I<group> things.  The real gid is the
group you I<left>, if you're running setgid.)
d1470 2
a1471 1
=item $EFFECTIVE_GROUP_ID
d1473 1
a1473 1
=item $EGID
d1475 1
a1475 2
=item $)
X<$)> X<$EGID> X<$EFFECTIVE_GROUP_ID>
d1477 1
a1477 5
The effective gid of this process.  If you are on a machine that
supports membership in multiple groups simultaneously, gives a space
separated list of groups you are in.  The first number is the one
returned by getegid(), and the subsequent ones by getgroups(), one of
which may be the same as the first number.
d1479 2
a1480 6
Similarly, a value assigned to C<$)> must also be a space-separated
list of numbers.  The first number sets the effective gid, and
the rest (if any) are passed to setgroups().  To get the effect of an
empty list for setgroups(), just repeat the new effective gid; that is,
to force an effective gid of 5 and an effectively empty setgroups()
list, say C< $) = "5 5" >.
d1482 4
a1485 4
You can change both the effective gid and the real gid at the same
time by using POSIX::setgid() (use only a single numeric argument).
Changes to $) require a check to $! to detect any possible errors
after an attempted change.
d1487 1
a1487 2
(Mnemonic: parentheses are used to I<group> things.  The effective gid
is the group that's I<right> for you, if you're running setgid.)
d1489 1
a1489 3
C<< $< >>, C<< $> >>, C<$(> and C<$)> can be set only on
machines that support the corresponding I<set[re][ug]id()> routine.  C<$(>
and C<$)> can be swapped only on machines supporting setregid().
d1491 1
a1491 1
=item $PROGRAM_NAME
d1493 2
a1494 4
=item $0
X<$0> X<$PROGRAM_NAME>

Contains the name of the program being executed.
d1496 4
a1499 6
On some (read: not all) operating systems assigning to C<$0> modifies
the argument area that the C<ps> program sees.  On some platforms you
may have to use special C<ps> options or a different C<ps> to see the
changes.  Modifying the $0 is more useful as a way of indicating the
current program state than it is for hiding the program you're
running.  (Mnemonic: same as B<sh> and B<ksh>.)
d1501 1
a1501 3
Note that there are platform specific limitations on the maximum
length of C<$0>.  In the most extreme case it may be limited to the
space occupied by the original C<$0>.
d1503 1
a1503 5
In some platforms there may be arbitrary amount of padding, for
example space characters, after the modified name as shown by C<ps>.
In some platforms this padding may extend all the way to the original
length of the argument area, no matter what you do (this is the case
for example with Linux 2.2).
d1505 2
a1506 5
Note for BSD users: setting C<$0> does not completely remove "perl"
from the ps(1) output.  For example, setting C<$0> to C<"foobar"> may
result in C<"perl: foobar (perl)"> (whether both the C<"perl: "> prefix
and the " (perl)" suffix are shown depends on your exact BSD variant
and version).  This is an operating system feature, Perl cannot help it.
d1508 7
a1514 5
In multithreaded scripts Perl coordinates the threads so that any
thread may modify its copy of the C<$0> and the change becomes visible
to ps(1) (assuming the operating system plays along).  Note that
the view of C<$0> the other threads have will not change since they
have their own copies of it.
d1516 4
a1519 2
If the program has been given to perl via the switches C<-e> or C<-E>,
C<$0> will contain the string C<"-e">.
d1521 5
a1525 2
=item $[
X<$[>
d1527 14
a1540 5
The index of the first element in an array, and of the first character
in a substring.  Default is 0, but you could theoretically set it
to 1 to make Perl behave more like B<awk> (or Fortran) when
subscripting and when evaluating the index() and substr() functions.
(Mnemonic: [ begins subscripts.)
d1542 9
a1550 4
As of release 5 of Perl, assignment to C<$[> is treated as a compiler
directive, and cannot influence the behavior of any other file.
(That's why you can only assign compile-time constants to it.)  Its
use is deprecated, and by default will trigger a warning.
d1552 2
a1553 4
Note that, unlike other compile-time directives (such as L<strict>),
assignment to C<$[> can be seen from outer lexical scopes in the same file.
However, you can use local() on it to strictly bind its value to a
lexical block.
d1555 1
a1555 2
=item $]
X<$]>
d1557 2
a1558 4
The version + patchlevel / 1000 of the Perl interpreter.  This variable
can be used to determine whether the Perl interpreter executing a
script is in the right range of versions.  (Mnemonic: Is this version
of perl in the right bracket?)  Example:
d1560 5
a1564 1
    warn "No checksumming!\n" if $] < 3.019;
d1566 2
a1567 2
See also the documentation of C<use VERSION> and C<require VERSION>
for a convenient way to fail if the running Perl interpreter is too old.
d1569 1
a1569 3
The floating point representation can sometimes lead to inaccurate
numeric comparisons.  See C<$^V> for a more modern representation of
the Perl version that allows accurate string comparisons.
d1571 1
a1571 1
=item $COMPILING
d1573 2
a1574 2
=item $^C
X<$^C> X<$COMPILING>
d1576 18
a1593 5
The current value of the flag associated with the B<-c> switch.
Mainly of use with B<-MO=...> to allow code to alter its behavior
when being compiled, such as for example to AUTOLOAD at compile
time rather than normal, deferred loading.  Setting
C<$^C = 1> is similar to calling C<B::minus_c>.
d1595 2
a1596 1
=item $DEBUGGING
d1598 1
a1598 2
=item $^D
X<$^D> X<$DEBUGGING>
d1600 1
a1600 3
The current value of the debugging flags.  (Mnemonic: value of B<-D>
switch.) May be read or set. Like its command-line equivalent, you can use
numeric or symbolic values, eg C<$^D = 10> or C<$^D = "st">.
d1602 1
a1602 1
=item ${^RE_DEBUG_FLAGS}
d1604 2
a1605 2
The current value of the regex debugging flags. Set to 0 for no debug output
even when the re 'debug' module is loaded. See L<re> for details.
d1607 1
a1607 1
=item ${^RE_TRIE_MAXBUF}
d1609 5
a1613 7
Controls how certain regex optimisations are applied and how much memory they
utilize. This value by default is 65536 which corresponds to a 512kB temporary
cache. Set this to a higher value to trade memory for speed when matching
large alternations. Set it to a lower value if you want the optimisations to
be as conservative of memory as possible but still occur, and set it to a
negative value to prevent the optimisation and conserve the most memory.
Under normal situations this variable should be of no interest to you.
d1615 2
a1616 1
=item $SYSTEM_FD_MAX
d1618 1
a1618 2
=item $^F
X<$^F> X<$SYSTEM_FD_MAX>
d1620 1
a1620 8
The maximum system file descriptor, ordinarily 2.  System file
descriptors are passed to exec()ed processes, while higher file
descriptors are not.  Also, during an open(), system file descriptors are
preserved even if the open() fails.  (Ordinary file descriptors are
closed before the open() is attempted.)  The close-on-exec
status of a file descriptor will be decided according to the value of
C<$^F> when the corresponding file, pipe, or socket was opened, not the
time of the exec().
d1622 2
a1623 1
=item $^H
d1625 2
a1626 2
WARNING: This variable is strictly for internal use only.  Its availability,
behavior, and contents are subject to change without notice.
d1628 1
a1628 3
This variable contains compile-time hints for the Perl interpreter.  At the
end of compilation of a BLOCK the value of this variable is restored to the
value when the interpreter started to compile the BLOCK.
d1630 1
a1630 6
When perl begins to parse any block construct that provides a lexical scope
(e.g., eval body, required file, subroutine body, loop body, or conditional
block), the existing value of $^H is saved, but its value is left unchanged.
When the compilation of the block is completed, it regains the saved value.
Between the points where its value is saved and restored, code that
executes within BEGIN blocks is free to change the value of $^H.
d1632 2
a1633 2
This behavior provides the semantic of lexical scoping, and is used in,
for instance, the C<use strict> pragma.
d1635 4
a1638 2
The contents should be an integer; different bits of it are used for
different pragmatic flags.  Here's an example:
d1640 1
a1640 1
    sub add_100 { $^H |= 0x100 }
d1642 1
a1642 4
    sub foo {
	BEGIN { add_100() }
	bar->baz($boon);
    }
d1644 1
a1644 4
Consider what happens during execution of the BEGIN block.  At this point
the BEGIN block has already been compiled, but the body of foo() is still
being compiled.  The new value of $^H will therefore be visible only while
the body of foo() is being compiled.
d1646 2
a1647 1
Substitution of the above BEGIN block with:
d1649 10
a1658 1
    BEGIN { require strict; strict->import('vars') }
d1660 11
a1670 2
demonstrates how C<use strict 'vars'> is implemented.  Here's a conditional
version of the same lexical pragma:
d1672 5
a1676 1
    BEGIN { require strict; strict->import('vars') if $condition }
d1678 1
a1678 1
=item %^H
d1680 1
a1680 2
The %^H hash provides the same scoping semantic as $^H.  This makes it
useful for implementation of lexically scoped pragmas. See L<perlpragma>.
d1682 1
a1682 1
=item $INPLACE_EDIT
d1684 2
a1685 2
=item $^I
X<$^I> X<$INPLACE_EDIT>
d1687 8
a1694 2
The current value of the inplace-edit extension.  Use C<undef> to disable
inplace editing.  (Mnemonic: value of B<-i> switch.)
d1696 1
a1696 2
=item $^M
X<$^M>
d1698 1
a1698 5
By default, running out of memory is an untrappable, fatal error.
However, if suitably built, Perl can use the contents of C<$^M>
as an emergency memory pool after die()ing.  Suppose that your Perl
were compiled with C<-DPERL_EMERGENCY_SBRK> and used Perl's malloc.
Then
d1700 2
a1701 1
    $^M = 'a' x (1 << 16);
d1703 7
a1709 5
would allocate a 64K buffer for use in an emergency.  See the
F<INSTALL> file in the Perl distribution for information on how to
add custom C compilation flags when compiling perl.  To discourage casual
use of this advanced feature, there is no L<English|English> long name for
this variable.
d1711 2
a1712 1
=item $OSNAME
d1714 2
a1715 2
=item $^O
X<$^O> X<$OSNAME>
d1717 3
a1719 3
The name of the operating system under which this copy of Perl was
built, as determined during the configuration process. For examples
see L<perlport/PLATFORMS>.
d1721 3
a1723 2
The value is identical to C<$Config{'osname'}>.  See also L<Config>
and the B<-V> command-line switch documented in L<perlrun>.
d1725 3
a1727 5
In Windows platforms, $^O is not very helpful: since it is always
C<MSWin32>, it doesn't tell the difference between
95/98/ME/NT/2000/XP/CE/.NET.  Use Win32::GetOSName() or
Win32::GetOSVersion() (see L<Win32> and L<perlport>) to distinguish
between the variants.
d1729 1
a1729 1
=item ${^OPEN}
d1731 1
a1731 3
An internal variable used by PerlIO.  A string in two parts, separated
by a C<\0> byte, the first part describes the input layers, the second
part describes the output layers.
d1733 2
a1734 1
=item $PERLDB
d1736 9
a1744 2
=item $^P
X<$^P> X<$PERLDB>
d1746 1
a1746 2
The internal variable for debugging support.  The meanings of the
various bits are subject to change, but currently indicate:
d1748 1
a1748 1
=over 6
d1750 1
a1750 1
=item 0x01
d1752 1
a1752 1
Debug subroutine enter/exit.
d1754 1
a1754 1
=item 0x02
d1756 1
a1756 2
Line-by-line debugging. Causes DB::DB() subroutine to be called for each
statement executed. Also causes saving source code lines (like 0x400).
d1758 2
a1759 1
=item 0x04
d1761 5
a1765 1
Switch off optimizations.
d1767 1
a1767 1
=item 0x08
d1769 1
a1769 1
Preserve more data for future interactive inspections.
d1771 2
a1772 1
=item 0x10
d1774 3
a1776 1
Keep info about source lines on which a subroutine is defined.
d1778 1
a1778 1
=item 0x20
d1780 2
a1781 1
Start with single-step on.
d1783 4
a1786 1
=item 0x40
d1788 1
a1788 1
Use subroutine address instead of name when reporting.
d1790 2
a1791 1
=item 0x80
d1793 1
a1793 1
Report C<goto &subroutine> as well.
d1795 1
a1795 1
=item 0x100
d1797 1
a1797 1
Provide informative "file" names for evals based on the place they were compiled.
d1799 1
a1799 1
=item 0x200
d1801 5
a1805 2
Provide informative names to anonymous subroutines based on the place they
were compiled.
d1807 1
a1807 1
=item 0x400
d1809 3
a1811 1
Save source code lines into C<@@{"_<$filename"}>.
d1813 6
a1818 1
=back
d1820 1
a1820 3
Some bits may be relevant at compile-time only, some at
run-time only.  This is a new mechanism and the details may change.
See also L<perldebguts>.
d1822 1
a1822 1
=item $LAST_REGEXP_CODE_RESULT
d1824 1
a1824 2
=item $^R
X<$^R> X<$LAST_REGEXP_CODE_RESULT>
d1826 1
a1826 2
The result of evaluation of the last successful C<(?{ code })>
regular expression assertion (see L<perlre>).  May be written to.
d1828 1
a1828 1
=item $EXCEPTIONS_BEING_CAUGHT
d1830 1
a1830 2
=item $^S
X<$^S> X<$EXCEPTIONS_BEING_CAUGHT>
d1832 1
a1832 1
Current state of the interpreter.
d1834 1
a1834 5
    $^S         State
    ---------   -------------------
    undef       Parsing module/eval
    true (1)    Executing an eval
    false (0)   Otherwise
d1836 1
a1836 1
The first state may happen in $SIG{__DIE__} and $SIG{__WARN__} handlers.
d1838 1
a1838 1
=item $BASETIME
d1840 1
a1840 2
=item $^T
X<$^T> X<$BASETIME>
d1842 3
a1844 3
The time at which the program began running, in seconds since the
epoch (beginning of 1970).  The values returned by the B<-M>, B<-A>,
and B<-C> filetests are based on this value.
d1846 3
a1848 1
=item ${^TAINT}
d1850 1
a1850 3
Reflects if taint mode is on or off.  1 for on (the program was run with
B<-T>), 0 for off, -1 when only taint warnings are enabled (i.e. with
B<-t> or B<-TU>).  This variable is read-only.
d1852 1
a1852 1
=item ${^UNICODE}
d1854 1
a1854 4
Reflects certain Unicode settings of Perl.  See L<perlrun>
documentation for the C<-C> switch for more information about
the possible values. This variable is set during Perl startup
and is thereafter read-only.
d1856 1
a1856 1
=item ${^UTF8CACHE}
d1858 2
a1859 3
This variable controls the state of the internal UTF-8 offset caching code.
1 for on (the default), 0 for off, -1 to debug the caching code by checking
all its results against linear scans, and panicking on any discrepancy.
d1861 4
a1864 1
=item ${^UTF8LOCALE}
d1866 5
a1870 4
This variable indicates whether a UTF-8 locale was detected by perl at
startup. This information is used by perl when it's in
adjust-utf8ness-to-locale mode (as when run with the C<-CL> command-line
switch); see L<perlrun> for more info on this.
d1872 1
a1872 1
=item $PERL_VERSION
d1874 3
a1876 2
=item $^V
X<$^V> X<$PERL_VERSION>
d1878 1
a1878 2
The revision, version, and subversion of the Perl interpreter, represented
as a C<version> object.
d1880 3
a1882 2
This variable first appeared in perl 5.6.0; earlier versions of perl will
see an undefined value. Before perl 5.10.0 $^V was represented as a v-string.
d1884 1
a1884 3
$^V can be used to determine whether the Perl interpreter executing a
script is in the right range of versions.  (Mnemonic: use ^V for Version
Control.)  Example:
d1886 7
a1892 1
    warn "Hashes not randomized!\n" if !$^V or $^V lt v5.8.1
d1894 1
a1894 2
To convert C<$^V> into its string representation use sprintf()'s
C<"%vd"> conversion:
d1896 2
a1897 1
    printf "version is v%vd\n", $^V;  # Perl's version
d1899 3
a1901 2
See the documentation of C<use VERSION> and C<require VERSION>
for a convenient way to fail if the running Perl interpreter is too old.
d1903 3
a1905 1
See also C<$]> for an older representation of the Perl version.
d1907 6
a1912 1
=item $WARNING
d1914 2
a1915 2
=item $^W
X<$^W> X<$WARNING>
d1917 2
a1918 3
The current value of the warning switch, initially true if B<-w>
was used, false otherwise, but directly modifiable.  (Mnemonic:
related to the B<-w> switch.)  See also L<warnings>.
d1920 1
a1920 1
=item ${^WARNING_BITS}
d1922 4
a1925 2
The current set of warning checks enabled by the C<use warnings> pragma.
See the documentation of C<warnings> for more details.
d1927 5
a1931 2
=item ${^WIN32_SLOPPY_STAT}
X<sitecustomize> X<sitecustomize.pl>
d1933 1
a1933 5
If this variable is set to a true value, then stat() on Windows will
not try to open the file. This means that the link count cannot be
determined and file attributes may be out of date if additional
hardlinks to the file exist. On the other hand, not opening the file
is considerably faster, especially for files on network drives.
d1935 1
a1935 5
This variable could be set in the F<sitecustomize.pl> file to
configure the local Perl installation to use "sloppy" stat() by
default.  See the documentation for B<-f> in
L<perlrun|perlrun/"Command Switches"> for more information about site
customization.
d1937 2
a1938 1
=item $EXECUTABLE_NAME
d1940 3
a1942 2
=item $^X
X<$^X> X<$EXECUTABLE_NAME>
d1944 1
a1944 2
The name used to execute the current copy of Perl, from C's
C<argv[0]> or (where supported) F</proc/self/exe>.
d1946 2
a1947 7
Depending on the host operating system, the value of $^X may be
a relative or absolute pathname of the perl program file, or may
be the string used to invoke perl but not the pathname of the
perl program file.  Also, most operating systems permit invoking
programs that are not in the PATH environment variable, so there
is no guarantee that the value of $^X is in PATH.  For VMS, the
value may or may not include a version number.
d1949 9
a1957 2
You usually can use the value of $^X to re-invoke an independent
copy of the same perl that is currently running, e.g.,
d1959 1
a1959 1
  @@first_run = `$^X -le "print int rand 100 for 1..100"`;
d1961 2
a1962 3
But recall that not all operating systems support forking or
capturing of the output of commands, so this complex statement
may not be portable.
d1964 3
a1966 5
It is not safe to use the value of $^X as a path name of a file,
as some operating systems that have a mandatory suffix on
executable files do not require use of the suffix when invoking
a command.  To convert the value of $^X to a path name, use the
following statements:
d1968 1
a1968 6
  # Build up a set of file names (not command names).
  use Config;
  $this_perl = $^X;
  if ($^O ne 'VMS')
     {$this_perl .= $Config{_exe}
          unless $this_perl =~ m/$Config{_exe}$/i;}
d1970 1
a1970 7
Because many operating systems permit anyone with read access to
the Perl program file to make a copy of it, patch the copy, and
then execute the copy, the security-conscious Perl programmer
should take care to invoke the installed copy of perl, not the
copy referenced by $^X.  The following statements accomplish
this goal, and produce a pathname that can be invoked as a
command or referenced as a file.
d1972 2
a1973 5
  use Config;
  $secure_perl_path = $Config{perlpath};
  if ($^O ne 'VMS')
     {$secure_perl_path .= $Config{_exe}
          unless $secure_perl_path =~ m/$Config{_exe}$/i;}
d1975 2
a1976 2
=item ARGV
X<ARGV>
d1978 1
a1978 8
The special filehandle that iterates over command-line filenames in
C<@@ARGV>. Usually written as the null filehandle in the angle operator
C<< <> >>. Note that currently C<ARGV> only has its magical effect
within the C<< <> >> operator; elsewhere it is just a plain filehandle
corresponding to the last file opened by C<< <> >>. In particular,
passing C<\*ARGV> as a parameter to a function that expects a filehandle
may not cause your function to automatically read the contents of all the
files in C<@@ARGV>.
d1980 1
a1980 2
=item $ARGV
X<$ARGV>
d1982 1
a1982 1
contains the name of the current file when reading from <>.
d1984 1
a1984 2
=item @@ARGV
X<@@ARGV>
d1986 3
a1988 4
The array @@ARGV contains the command-line arguments intended for
the script.  C<$#ARGV> is generally the number of arguments minus
one, because C<$ARGV[0]> is the first argument, I<not> the program's
command name itself.  See C<$0> for the command name.
d1990 1
a1990 2
=item ARGVOUT
X<ARGVOUT>
d1992 1
a1992 4
The special filehandle that points to the currently open output file
when doing edit-in-place processing with B<-i>.  Useful when you have
to do a lot of inserting and don't want to keep modifying $_.  See
L<perlrun> for the B<-i> switch.
d1994 1
a1994 2
=item @@F
X<@@F>
d1996 1
a1996 4
The array @@F contains the fields of each line read in when autosplit
mode is turned on.  See L<perlrun> for the B<-a> switch.  This array
is package-specific, and must be declared or given a full package name
if not in package main when running under C<strict 'vars'>.
d1998 1
a1998 2
=item @@INC
X<@@INC>
d2000 1
a2000 9
The array @@INC contains the list of places that the C<do EXPR>,
C<require>, or C<use> constructs look for their library files.  It
initially consists of the arguments to any B<-I> command-line
switches, followed by the default Perl library, probably
F</usr/local/lib/perl>, followed by ".", to represent the current
directory.  ("." will not be appended if taint checks are enabled, either by
C<-T> or by C<-t>.)  If you need to modify this at runtime, you should use
the C<use lib> pragma to get the machine-dependent library properly
loaded also:
d2002 1
a2002 2
    use lib '/mypath/libdir/';
    use SomeMod;
d2004 1
a2004 3
You can also insert hooks into the file inclusion system by putting Perl
code directly into @@INC.  Those hooks may be subroutine references, array
references or blessed objects.  See L<perlfunc/require> for details.
d2006 1
a2006 1
=item @@ARG
d2008 1
a2008 2
=item @@_
X<@@_> X<@@ARG>
d2010 1
a2010 2
Within a subroutine the array @@_ contains the parameters passed to that
subroutine.  See L<perlsub>.
d2012 1
a2012 2
=item %INC
X<%INC>
d2014 1
a2014 6
The hash %INC contains entries for each filename included via the
C<do>, C<require>, or C<use> operators.  The key is the filename
you specified (with module names converted to pathnames), and the
value is the location of the file found.  The C<require>
operator uses this hash to determine whether a particular file has
already been included.
d2016 1
a2016 5
If the file was loaded via a hook (e.g. a subroutine reference, see
L<perlfunc/require> for a description of these hooks), this hook is
by default inserted into %INC in place of a filename.  Note, however,
that the hook may have set the %INC entry by itself to provide some more
specific info.
d2018 1
a2018 1
=item %ENV
d2020 2
a2021 2
=item $ENV{expr}
X<%ENV>
d2023 1
a2023 3
The hash %ENV contains your current environment.  Setting a
value in C<ENV> changes the environment for any child processes
you subsequently fork() off.
d2025 1
a2025 1
=item %SIG
d2027 1
a2027 2
=item $SIG{expr}
X<%SIG>
d2029 3
a2031 1
The hash C<%SIG> contains signal handlers for signals.  For example:
d2033 2
a2034 6
    sub handler {	# 1st argument is signal name
	my($sig) = @@_;
	print "Caught a SIG$sig--shutting down\n";
	close(LOG);
	exit(0);
    }
d2036 3
a2038 5
    $SIG{'INT'}  = \&handler;
    $SIG{'QUIT'} = \&handler;
    ...
    $SIG{'INT'}  = 'DEFAULT';	# restore default action
    $SIG{'QUIT'} = 'IGNORE';	# ignore SIGQUIT
d2040 1
a2040 3
Using a value of C<'IGNORE'> usually has the effect of ignoring the
signal, except for the C<CHLD> signal.  See L<perlipc> for more about
this special case.
d2042 1
a2042 1
Here are some other examples:
d2044 2
a2045 4
    $SIG{"PIPE"} = "Plumber";   # assumes main::Plumber (not recommended)
    $SIG{"PIPE"} = \&Plumber;   # just fine; assume current Plumber
    $SIG{"PIPE"} = *Plumber;    # somewhat esoteric
    $SIG{"PIPE"} = Plumber();   # oops, what did Plumber() return??
d2047 3
a2049 2
Be sure not to use a bareword as the name of a signal handler,
lest you inadvertently call it. 
d2051 1
a2051 2
If your system has the sigaction() function then signal handlers are
installed using it.  This means you get reliable signal handling.
d2053 1
a2053 10
The default delivery policy of signals changed in Perl 5.8.0 from 
immediate (also known as "unsafe") to deferred, also known as 
"safe signals".  See L<perlipc> for more information.

Certain internal hooks can be also set using the %SIG hash.  The
routine indicated by C<$SIG{__WARN__}> is called when a warning message is
about to be printed.  The warning message is passed as the first
argument.  The presence of a C<__WARN__> hook causes the ordinary printing
of warnings to C<STDERR> to be suppressed.  You can use this to save warnings
in a variable, or turn warnings into fatal errors, like this:
d2055 2
a2056 2
    local $SIG{__WARN__} = sub { die $_[0] };
    eval $proggie;
d2058 3
a2060 2
As the C<'IGNORE'> hook is not supported by C<__WARN__>, you can
disable warnings using the empty subroutine:
d2062 1
a2062 1
    local $SIG{__WARN__} = sub {};
d2064 2
a2065 7
The routine indicated by C<$SIG{__DIE__}> is called when a fatal exception
is about to be thrown.  The error message is passed as the first
argument.  When a C<__DIE__> hook routine returns, the exception
processing continues as it would have in the absence of the hook,
unless the hook routine itself exits via a C<goto>, a loop exit, or a C<die()>.
The C<__DIE__> handler is explicitly disabled during the call, so that you
can die from a C<__DIE__> handler.  Similarly for C<__WARN__>.
d2067 4
a2070 14
Due to an implementation glitch, the C<$SIG{__DIE__}> hook is called
even inside an eval().  Do not use this to rewrite a pending exception
in C<$@@>, or as a bizarre substitute for overriding C<CORE::GLOBAL::die()>.
This strange action at a distance may be fixed in a future release
so that C<$SIG{__DIE__}> is only called if your program is about
to exit, as was the original intent.  Any other use is deprecated.

C<__DIE__>/C<__WARN__> handlers are very special in one respect:
they may be called to report (probable) errors found by the parser.
In such a case the parser may be in inconsistent state, so any
attempt to evaluate Perl code from such a handler will probably
result in a segfault.  This means that warnings or errors that
result from parsing Perl should be used with extreme caution, like
this:
d2072 1
a2072 4
    require Carp if defined $^S;
    Carp::confess("Something wrong") if defined &Carp::confess;
    die "Something wrong, but could not load Carp to give backtrace...
         To see backtrace try starting Perl with -MCarp switch";
d2074 1
a2074 4
Here the first line will load Carp I<unless> it is the parser who
called the handler.  The second line will print backtrace and die if
Carp was available.  The third line will be executed only if Carp was
not available.
d2076 1
a2076 2
See L<perlfunc/die>, L<perlfunc/warn>, L<perlfunc/eval>, and
L<warnings> for additional information.
d2078 4
a2081 1
=back
d2083 2
a2084 1
=head2 Names that are no longer special
d2086 1
a2086 3
These variables had special meaning in prior versions of Perl but now
have no effect and will cause warnings if used.  They are included
here for historical reference.
d2090 2
d2093 1
a2093 1
X<$#>
d2095 3
a2097 3
C<$#> used to be a variable that could be used to format printed numbers.
After a deprecation cycle, its magic was removed in Perl 5.10 and using it
now triggers a warning: C<$# is no longer supported>.
d2099 3
a2101 2
C<$#> is also used as sigil, which, when prepended on the name of an
array, gives the index of the last element in that array.
d2103 1
a2103 6
    my @@array        = ("a", "b", "c");
    my $last_index   = $#array;   # $last_index is 2

    for my $i (0 .. $#array) {
        print "The value of index $i is $array[$i]\n";
    }
d2105 1
a2105 1
Also see L<perldata>.
d2110 1
a2110 1
C<$*> used to be a variable that enabled multiline matching.
d2113 1
a2113 1
Use the C</s> and C</m> regexp modifiers instead.
d2115 1
a2115 1
Also see L<perlre>.
d2117 3
a2119 1
=back
d2121 2
a2122 2
=head2 Error Indicators
X<error> X<exception>
d2124 4
a2127 7
The variables C<$@@>, C<$!>, C<$^E>, and C<$?> contain information
about different types of error conditions that may appear during
execution of a Perl program.  The variables are shown ordered by
the "distance" between the subsystem which reported the error and
the Perl process.  They correspond to errors detected by the Perl
interpreter, C library, operating system, or an external program,
respectively.
d2129 4
a2132 2
To illustrate the differences between these variables, consider the 
following Perl expression, which uses a single-quoted string:
d2134 4
a2137 5
    eval q{
	open my $pipe, "/cdrom/install |" or die $!;
	my @@res = <$pipe>;
	close $pipe or die "bad pipe: $?, $!";
    };
d2139 2
a2140 1
After execution of this statement all 4 variables may have been set.  
d2142 3
a2144 16
C<$@@> is set if the string to be C<eval>-ed did not compile (this
may happen if C<open> or C<close> were imported with bad prototypes),
or if Perl code executed during evaluation die()d .  In these cases
the value of $@@ is the compile error, or the argument to C<die>
(which will interpolate C<$!> and C<$?>).  (See also L<Fatal>,
though.)

When the eval() expression above is executed, open(), C<< <PIPE> >>,
and C<close> are translated to calls in the C run-time library and
thence to the operating system kernel.  C<$!> is set to the C library's
C<errno> if one of these calls fails. 

Under a few operating systems, C<$^E> may contain a more verbose
error indicator, such as in this case, "CDROM tray not closed."
Systems that do not support extended error messages leave C<$^E>
the same as C<$!>.
d2146 1
a2146 9
Finally, C<$?> may be set to non-0 value if the external program
F</cdrom/install> fails.  The upper eight bits reflect specific
error conditions encountered by the program (the program's exit()
value).   The lower eight bits reflect mode of failure, like signal
death and core dump information  See wait(2) for details.  In
contrast to C<$!> and C<$^E>, which are set only if error condition
is detected, the variable C<$?> is set on each C<wait> or pipe
C<close>, overwriting the old value.  This is more like C<$@@>, which
on every eval() is always set on failure and cleared on success.
d2148 1
a2148 2
For more details, see the individual descriptions at C<$@@>, C<$!>, C<$^E>,
and C<$?>.
d2150 1
a2150 1
=head2 Technical Note on the Syntax of Variable Names
d2152 2
a2153 6
Variable names in Perl can have several formats.  Usually, they
must begin with a letter or underscore, in which case they can be
arbitrarily long (up to an internal limit of 251 characters) and
may contain letters, digits, underscores, or the special sequence
C<::> or C<'>.  In this case, the part before the last C<::> or
C<'> is taken to be a I<package qualifier>; see L<perlmod>.
d2155 2
a2156 10
Perl variable names may also be a sequence of digits or a single
punctuation or control character.  These names are all reserved for
special uses by Perl; for example, the all-digits names are used
to hold data captured by backreferences after a regular expression
match.  Perl has a special syntax for the single-control-character
names: It understands C<^X> (caret C<X>) to mean the control-C<X>
character.  For example, the notation C<$^W> (dollar-sign caret
C<W>) is the scalar variable whose name is the single character
control-C<W>.  This is better than typing a literal control-C<W>
into your program.
d2158 3
a2160 10
Finally, new in Perl 5.6, Perl variable names may be alphanumeric
strings that begin with control characters (or better yet, a caret).
These variables must be written in the form C<${^Foo}>; the braces
are not optional.  C<${^Foo}> denotes the scalar variable whose
name is a control-C<F> followed by two C<o>'s.  These variables are
reserved for future special uses by Perl, except for the ones that
begin with C<^_> (control-underscore or caret-underscore).  No
control-character name that begins with C<^_> will acquire a special
meaning in any future version of Perl; such names may therefore be
used safely in programs.  C<$^_> itself, however, I<is> reserved.
d2162 1
a2162 5
Perl identifiers that begin with digits, control characters, or
punctuation characters are exempt from the effects of the C<package>
declaration and are always forced to be in package C<main>; they are
also exempt from C<strict 'vars'> errors.  A few other names are also
exempt in these ways:
d2164 2
a2165 5
	ENV		STDIN
	INC		STDOUT
	ARGV		STDERR
	ARGVOUT		_
	SIG
d2167 2
a2168 3
In particular, the new special C<${^_XYZ}> variables are always taken
to be in package C<main>, regardless of any C<package> declarations
presently in scope.  
d2170 1
a2170 1
=head1 BUGS
d2172 1
a2172 9
Due to an unfortunate accident of Perl's implementation, C<use
English> imposes a considerable performance penalty on all regular
expression matches in a program, regardless of whether they occur
in the scope of C<use English>.  For that reason, saying C<use
English> in libraries is strongly discouraged.  See the
Devel::SawAmpersand module documentation from CPAN
( http://www.cpan.org/modules/by-module/Devel/ )
for more information. Writing C<use English '-no_match_vars';>
avoids the performance penalty.
d2174 1
a2174 4
Having to even think about the C<$^S> variable in your exception
handlers is simply wrong.  C<$SIG{__DIE__}> as currently implemented
invites grievous and difficult to track down errors.  Avoid it
and use an C<END{}> or CORE::GLOBAL::die override instead.
@


1.11
log
@Merge in perl 5.10.1
@
text
@d217 1
a217 1
=item $<I<digits>>
d221 1
a221 1
parentheses from the last pattern match, not counting patterns
d1040 2
a1041 2
(That's why you can only assign compile-time constants to it.)
Its use is highly discouraged.
d1193 5
a1197 3
built, as determined during the configuration process.  The value
is identical to C<$Config{'osname'}>.  See also L<Config> and the 
B<-V> command-line switch documented in L<perlrun>.
d1326 1
a1326 1
This variable indicates whether an UTF-8 locale was detected by perl at
d1373 1
d1383 2
a1384 1
default.  See L<perlrun> for more information about site
d1624 39
@


1.10
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@d61 1
a61 1
    open my $fh, "foo" or die $!;
d68 1
a68 1
    open my $fh, "foo" or die $!;
d84 1
a84 1
    open my $fh, "foo" or die $!;
d151 7
a157 3
Various unary functions, including functions like ord() and int(), as well
as the all file tests (C<-f>, C<-d>) except for C<-t>, which defaults to
STDIN.
d161 3
a163 1
Various list functions like print() and unlink().
d167 2
a168 2
The pattern matching operations C<m//>, C<s///>, and C<tr///> when used
without an C<=~> operator.
d181 4
d244 1
a244 1
This is similar to C<$&> (C<$POSTMATCH>) except that it does not incur the
d352 2
d448 1
a448 1
    open my $fh, $myfile or die $!;
d484 2
a485 1
for that.  (Mnemonic: when you want your pipes to be piping hot.)
d796 1
a796 1
    if (open(FH, $filename)) {
d1026 3
d1225 2
a1226 1
Line-by-line debugging.
d1263 1
a1263 1
Debug assertion subroutines enter/exit.
d1269 1
@


1.9
log
@merge in perl 5.8.8
@
text
@d127 1
d181 5
d195 1
d208 1
d219 1
d229 10
d242 1
d252 10
d265 1
d281 10
d294 1
d305 2
d308 1
d329 1
d342 6
a347 1
=item $*
d349 15
a363 15
Set to a non-zero integer value to do multi-line matching within a
string, 0 (or undefined) to tell Perl that it can assume that strings
contain a single line, for the purpose of optimizing pattern matches.
Pattern matches on strings containing multiple newlines can produce
confusing results when C<$*> is 0 or undefined. Default is undefined.
(Mnemonic: * matches multiple things.) This variable influences the
interpretation of only C<^> and C<$>. A literal newline can be searched
for even when C<$* == 0>.

Use of C<$*> is deprecated in modern Perl, supplanted by 
the C</s> and C</m> modifiers on pattern matching.

Assigning a non-numerical value to C<$*> triggers a warning (and makes
C<$*> act if C<$* == 0>), while assigning a numerical value to C<$*>
makes that an implicit C<int> is applied on the value.
d372 1
d374 1
a374 1
Current line number for the last filehandle accessed. 
d407 1
d443 2
a444 1
set, you'll get the record back in pieces.
d460 1
d481 1
d494 1
d504 1
d515 1
a542 12
=item $#

The output format for printed numbers.  This variable is a half-hearted
attempt to emulate B<awk>'s OFMT variable.  There are times, however,
when B<awk> and Perl have differing notions of what counts as 
numeric.  The initial value is "%.I<n>g", where I<n> is the value
of the macro DBL_DIG from your system's F<float.h>.  This is different from
B<awk>'s default OFMT setting of "%.6g", so you need to set C<$#>
explicitly to get B<awk>'s value.  (Mnemonic: # is the number sign.)

Use of C<$#> is deprecated.

d548 1
d559 1
d571 1
d581 1
d620 42
d667 1
d678 1
d689 1
d701 1
d708 1
d720 1
d725 1
a725 1
wait() system call (or else is made up to look like it).  Thus, the
d751 12
d764 1
d769 1
a769 2
manipulation of this variable is highly discouraged.  See L<encoding>
for more details.
d776 1
d806 4
d811 1
d826 1
d856 1
d874 1
d891 1
d904 1
d924 1
d934 3
a936 1
back to C<$(> without being forced numeric, such as by adding zero.
d950 1
d980 1
d1014 1
d1033 1
a1044 5
When testing the variable, to steer clear of floating point
inaccuracies you might want to prefer the inequality tests C<< < >>
and C<< > >> to the tests containing equivalence: C<< <= >>, C<< == >>,
and C<< >= >>.

d1052 1
d1057 1
a1057 1
time rather than normal, deferred loading.  See L<perlcc>.  Setting
d1063 1
d1069 15
d1087 1
a1142 3
WARNING: This variable is strictly for internal use only.  Its availability,
behavior, and contents are subject to change without notice.

d1144 1
a1144 1
useful for implementation of lexically scoped pragmas.
d1149 1
d1155 1
d1174 1
d1196 1
d1256 1
d1264 1
d1279 1
d1289 1
a1289 1
B<-t> or B<-TU>).
d1298 6
d1314 1
d1317 4
a1320 4
as a string composed of characters with those ordinals.  Thus in Perl v5.6.0
it equals C<chr(5) . chr(6) . chr(0)> and will return true for
C<$^V eq v5.6.0>.  Note that the characters in this string value can
potentially be in Unicode range.
d1322 1
a1322 1
This can be used to determine whether the Perl interpreter executing a
d1326 1
a1326 1
    warn "No \"our\" declarations!\n" if $^V and $^V lt v5.6.0;
d1341 1
d1352 13
d1368 1
d1418 1
d1430 1
d1435 1
d1443 1
d1451 1
d1459 1
d1478 2
d1481 1
d1487 1
d1505 1
d1514 1
d1516 1
a1516 1
The hash %SIG contains signal handlers for signals.  For example:
d1555 2
a1556 2
argument.  The presence of a __WARN__ hook causes the ordinary printing
of warnings to STDERR to be suppressed.  You can use this to save warnings
d1562 5
d1569 1
a1569 1
argument.  When a __DIE__ hook routine returns, the exception
d1571 1
a1571 1
unless the hook routine itself exits via a C<goto>, a loop exit, or a die().
d1577 1
a1577 1
in C<$@@>, or as a bizarre substitute for overriding CORE::GLOBAL::die().
d1606 1
d1713 2
a1714 1
for more information.
@


1.8
log
@sync in-tree perl with 5.8.6
@
text
@d427 3
a429 6
The output field separator for the print operator.  Ordinarily the
print operator simply prints out its arguments without further
adornment.  To get behavior more like B<awk>, set this variable as
you would set B<awk>'s OFS variable to specify what is printed
between fields.  (Mnemonic: what is printed when there is a "," in
your print statement.)
d439 4
a442 8
The output record separator for the print operator.  Ordinarily the
print operator simply prints out its arguments as is, with no
trailing newline or other end-of-record string added.  To get
behavior more like B<awk>, set this variable as you would set
B<awk>'s ORS variable to specify what is printed at the end of the
print.  (Mnemonic: you set C<$\> instead of adding "\n" at the
end of the print.  Also, it's just like C<$/>, but it's what you
get "back" from Perl.)
d537 3
a539 3
$+[0] - $-[0]>.  Similarly, C<$>I<n> coincides with C<substr $_, $-[>I<n>C<],
$+[>I<n>C<] - $-[>I<n>C<]> if C<$-[>I<n>C<]> is defined, and $+ coincides with
C<substr $_, $-[$#-], $+[$#-]>.  One can use C<$#-> to find the last
d565 1
a565 1
=item C<$3> is the same as C<substr $var, $-[3], $+[3] - $-[3])>
d882 1
a882 1
to ps(1) (assuming the operating system plays along).  Note that the
d900 2
a901 2
assignment to $[ can be seen from outer lexical scopes in the same file.
However, you can use local() on it to strictly bound its value to a
d1019 1
a1019 1
were compiled with -DPERL_EMERGENCY_SBRK and used Perl's malloc.
d1026 3
a1028 2
enable this option.  To discourage casual use of this advanced
feature, there is no L<English|English> long name for this variable.
d1152 7
d1203 1
a1203 1
C<argv[0]>.
d1228 1
a1228 1
# Build up a set of file names (not command names).
d1445 1
a1445 1
(which will interpolate C<$!> and C<$?>!).  (See also L<Fatal>,
@


1.7
log
@Resolve conflicts for perl 5.8.2, remove old files, and add OpenBSD-specific scaffolding
@
text
@d781 3
a783 1
the effective uid at the same time by using POSIX::setuid().
d797 2
a798 1
time by using POSIX::setuid().
d821 2
a822 1
time by using POSIX::setgid().
d848 2
@


1.6
log
@Resolve conflicts, remove old files, merge local changes
@
text
@d192 3
a194 4
(using local(), use vars, or our()) even when using the strict
vars pragma.  Don't lexicalize them with C<my $a> or C<my $b>
if you want to be able to use them in the sort() comparison block
or function.
a295 2
=item $MULTILINE_MATCHING

a490 2
=item $OFMT

d693 1
a693 1
If used an a string, yields the corresponding system error string.
d767 6
d856 18
a873 5
Contains the name of the program being executed.  On some operating
systems assigning to C<$0> modifies the argument area that the B<ps>
program sees.  This is more useful as a way of indicating the current
program state than it is for hiding the program you're running.
(Mnemonic: same as B<sh> and B<ksh>.)
d876 10
a885 3
from the ps(1) output.  For example, setting C<$0> to C<"foobar"> will
result in C<"perl: foobar (perl)">.  This is an operating system
feature.
d897 1
d900 5
d917 5
d941 2
a942 1
switch.)
d1101 4
d1121 9
a1129 3
Current state of the interpreter.  Undefined if parsing of the current
module/eval is not finished (may happen in $SIG{__DIE__} and
$SIG{__WARN__} handlers).  True if inside an eval(), otherwise false.
d1141 10
a1150 2
Reflects if taint mode is on or off (i.e. if the program was run with
B<-T> or not).  True for on, false for off.
a1190 15
=item ${^WIDE_SYSTEM_CALLS}

Global flag that enables system calls made by Perl to use wide character
APIs native to the system, if available.  This is currently only implemented
on the Windows platform.

This can also be enabled from the command line using the C<-C> switch.

The initial value is typically C<0> for compatibility with Perl versions
earlier than 5.6, but may be automatically set to C<1> by Perl if the system
provides a user-settable default (e.g., C<$ENV{LC_CTYPE}>).

The C<bytes> pragma always overrides the effect of this flag in the current
lexical scope.  See L<bytes>.

d1359 1
a1359 12
installed using it.  This means you get reliable signal handling.  If
your system has the SA_RESTART flag it is used when signals handlers are
installed.  This means that system calls for which restarting is supported
continue rather than returning when a signal arrives.  If you want your
system calls to be interrupted by signal delivery then do something like
this:

    use POSIX ':signal_h';

    my $alarm = 0;
    sigaction SIGALRM, new POSIX::SigAction sub { $alarm = 1 }
    	or die "Error setting SIGALRM handler: $!\n";
d1361 3
a1363 1
See L<POSIX>.
d1497 3
a1499 2
declaration and are always forced to be in package C<main>.  A few
other names are also exempt:
d1504 1
a1504 1
	ARGVOUT
d1509 1
a1509 1
presently in scope.
@


1.5
log
@merge in perl 5.6.1 with our local changes
@
text
@d16 14
a29 8
at the top of your program.  This will alias all the short names to the
long names in the current package.  Some even have medium names,
generally borrowed from B<awk>.

If you don't mind the performance hit, variables that depend on the
currently selected filehandle may instead be set by calling an
appropriate object method on the IO::Handle object.  (Summary lines
below for this contain the word HANDLE.)  First you must say
d42 1
a42 1
The methods each take an optional EXPR, which if supplied specifies the
d46 1
d54 65
d186 15
d219 1
a219 1
performance penalty on all regular expression matches.  See L<BUGS>.
d231 1
a231 1
performance penalty on all regular expression matches.  See L<BUGS>.
d242 1
a242 1
    $_ = 'abcdefghi';
d249 1
a249 1
performance penalty on all regular expression matches.  See L<BUGS>.
d255 3
a257 3
The last bracket matched by the last search pattern.  This is useful if
you don't know which one of a set of alternative patterns matched.  For
example:
d264 18
d317 1
a317 1
=item input_line_number HANDLE EXPR
d325 1
a325 12
The current input record number for the last file handle from which
you just read() (or called a C<seek> or C<tell> on).  The value
may be different from the actual physical line number in the file,
depending on what notion of "line" is in effect--see C<$/> on how
to change that.  An explicit close on a filehandle resets the line
number.  Because C<< <> >> never does an explicit close, line
numbers increase across ARGV files (but see examples in L<perlfunc/eof>).
Consider this variable read-only: setting it does not reposition
the seek pointer; you'll have to do that on your own.  Localizing C<$.>
has the effect of also localizing Perl's notion of "the last read
filehandle".  (Mnemonic: many programs use "." to mean the current line
number.)
d327 25
a351 1
=item input_record_separator HANDLE EXPR
d373 2
a374 2
    undef $/;		# enable "slurp" mode
    $_ = <FH>;		# whole file now here
d385 3
a387 3
    $/ = \32768; # or \"32768", or \$var_containing_32768
    open(FILE, $myfile);
    $_ = <FILE>;
d404 1
a404 1
=item autoflush HANDLE EXPR
d422 1
a422 1
=item output_field_separator HANDLE EXPR
d437 1
a437 1
=item output_record_separator HANDLE EXPR
d508 1
a508 1
=item format_page_number HANDLE EXPR
d518 1
a518 1
=item format_lines_per_page HANDLE EXPR
d529 1
a529 1
=item format_lines_left HANDLE EXPR
d560 2
a561 4
of the I<n>th submatch, so C<$+[1]> is the offset where $1
begins, C<$+[2]> the offset where $2 begins, and so on.
You can use C<$#-> to determine how many subgroups were in the
last successful match.  Compare with the C<@@+> variable.
d581 1
a581 1
=item format_name HANDLE EXPR
d591 1
a591 1
=item format_top_name HANDLE EXPR
d601 1
a601 1
=item format_line_break_characters HANDLE EXPR
d612 1
a612 1
=item format_formfeed HANDLE EXPR
d660 1
a660 1
status.
d664 8
d679 19
a697 3
variable, with all the usual caveats.  (This means that you shouldn't
depend on the value of C<$!> to be anything in particular unless
you've gotten a specific error return indicating a system error.)
d706 12
d751 4
a754 4
The Perl syntax error message from the last eval() operator.  If null, the
last eval() parsed and executed correctly (although the operations you
invoked may have failed in the normal fashion).  (Mnemonic: Where was
the syntax error "at"?)
d779 2
a780 1
if you're running setuid.)
d793 3
d816 3
d841 3
d890 3
a892 4
The use of this variable is deprecated.  The floating point representation
can sometimes lead to inaccurate numeric comparisons.  See C<$^V> for a
more modern representation of the Perl version that allows accurate string
comparisons.
d1006 12
d1096 5
d1117 5
d1159 57
a1215 2
The name that the Perl binary itself was executed as, from C's C<argv[0]>.
This may not be a full pathname, nor even necessarily in your path.
d1228 14
d1249 2
a1250 1
directory.  If you need to modify this at runtime, you should use
d1257 4
d1275 6
d1400 3
a1402 3
	open PIPE, "/cdrom/install |";
	@@res = <PIPE>;
	close PIPE or die "bad pipe: $?, $!";
d1491 1
a1491 1
(http://www.perl.com/CPAN/modules/by-module/Devel/)
@


1.4
log
@perl-5.6.0 + local changes
@
text
@d177 2
d196 8
a203 7
Set to 1 to do multi-line matching within a string, 0 to tell Perl
that it can assume that strings contain a single line, for the purpose
of optimizing pattern matches.  Pattern matches on strings containing
multiple newlines can produce confusing results when C<$*> is 0.  Default
is 0.  (Mnemonic: * matches multiple things.)  This variable
influences the interpretation of only C<^> and C<$>.  A literal newline can
be searched for even when C<$* == 0>.
d208 4
d422 2
d451 1
a451 1
=item C<$`> is the same as C<substr($var, 0, $-[0]>)
d453 1
a453 1
=item C<$&> is the same as C<substr($var, $-[0], $+[0] - $-[0]>) 
d455 1
a455 1
=item C<$'> is the same as C<substr($var, $+[0]>)
d461 1
a461 1
=item C<$3> is the same as C<substr $var, $-[3], $+[3] - $-[3]>) 
d699 5
d831 1
a831 1
would allocate a 64K buffer for use when in emergency.  See the
d834 1
a834 1
feature, there is no L<English> long name for this variable.
d937 1
a937 1
    warn "No "our" declarations!\n" if $^V and $^V lt v5.6.0;
@


1.3
log
@perl5.005_03 (stock)
@
text
@d10 3
a12 3
punctuation names have reasonable mnemonics, or analogues in one of
the shells.  Nevertheless, if you wish to use long variable names,
you just need to say
d20 4
a23 13
Due to an unfortunate accident of Perl's implementation, "C<use English>"
imposes a considerable performance penalty on all regular expression
matches in a program, regardless of whether they occur in the scope of
"C<use English>".  For that reason, saying "C<use English>" in
libraries is strongly discouraged.  See the Devel::SawAmpersand module
documentation from CPAN
(http://www.perl.com/CPAN/modules/by-module/Devel/Devel-SawAmpersand-0.10.readme)
for more information.

To go a step further, those variables that depend on the currently
selected filehandle may instead (and preferably) be set by calling an
object method on the FileHandle object.  (Summary lines below for this
contain the word HANDLE.)  First you must say
d25 1
a25 1
    use FileHandle;
d35 1
a35 1
Each of the methods returns the old value of the FileHandle attribute.
d37 2
a38 2
new value for the FileHandle attribute in question.  If not supplied,
most of the methods do nothing to the current value, except for
d40 2
d48 1
a48 4
arrays, then the hashes (except $^M was added in the wrong place).
This is somewhat obscured by the fact that %ENV and %SIG are listed as
$ENV{expr} and $SIG{expr}.

d59 1
a59 1
    while (<>) {...}	# equivalent in only while!
d68 2
a69 2
    chop
    chop($_)
d102 1
a102 1
The default place to put an input record when a C<E<lt>FHE<gt>>
d104 1
a104 1
test.  Note that outside of a C<while> test, this will not happen.
d114 1
a114 1
=item $E<lt>I<digits>E<gt>
d116 5
a120 4
Contains the subpattern from the corresponding set of parentheses in
the last pattern matched, not counting patterns matched in nested
blocks that have been exited already.  (Mnemonic: like \digits.)
These variables are all read-only.
d128 2
a129 1
BLOCK).  (Mnemonic: like & in some editors.)  This variable is read-only.
d132 1
a132 2
performance penalty on all regular expression matches.  See the
Devel::SawAmpersand module from CPAN for more information.
d144 1
a144 2
performance penalty on all regular expression matches.  See the
Devel::SawAmpersand module from CPAN for more information.
d159 1
a159 1
This variable is read-only.
d162 1
a162 2
performance penalty on all regular expression matches.  See the
Devel::SawAmpersand module from CPAN for more information.
d169 1
a169 1
you don't know which of a set of alternative patterns matched.  For
d175 14
a188 1
This variable is read-only.
d197 3
a199 3
multiple newlines can produce confusing results when "C<$*>" is 0.  Default
is 0.  (Mnemonic: * matches multiple things.)  Note that this variable
influences the interpretation of only "C<^>" and "C<$>".  A literal newline can
d202 1
a202 1
Use of "C<$*>" is deprecated in modern Perls, supplanted by 
d213 2
a214 2
The current input line number for the last file handle from
which you read (or performed a C<seek> or C<tell> on).  The value
d216 7
a222 6
depending on what notion of "line" is in effect--see L<$/> on how
to affect that.  An
explicit close on a filehandle resets the line number.  Because
"C<E<lt>E<gt>>" never does an explicit close, line numbers increase
across ARGV files (but see examples under eof()).  Localizing C<$.> has
the effect of also localizing Perl's notion of "the last read
d234 13
a246 12
The input record separator, newline by default.  This is used to
influence Perl's idea of what a "line" is.  Works like B<awk>'s RS
variable, including treating empty lines as delimiters if set to the
null string.  (Note: An empty line cannot contain any spaces or tabs.)
You may set it to a multi-character string to match a multi-character
delimiter, or to C<undef> to read to end of file.  Note that setting it
to C<"\n\n"> means something slightly different than setting it to
C<"">, if the file contains consecutive empty lines.  Setting it to
C<""> will treat two or more consecutive empty lines as a single empty
line.  Setting it to C<"\n\n"> will blindly assume that the next input
character belongs to the next paragraph, even if it's a newline.
(Mnemonic: / is used to delimit line boundaries when quoting poetry.)
d252 2
a253 2
Remember: the value of $/ is a string, not a regexp.  AWK has to be
better for something :-)
d255 2
a256 2
Setting $/ to a reference to an integer, scalar containing an integer, or
scalar that's convertable to an integer will attempt to read records
d258 1
a258 1
integer. So this:
d264 12
a275 11
will read a record of no more than 32768 bytes from FILE. If you're not
reading from a record-oriented file (or your OS doesn't have
record-oriented files), then you'll likely get a full chunk of data with
every read. If a record is larger than the record size you've set, you'll
get the record back in pieces.

On VMS, record reads are done with the equivalent of C<sysread>, so it's
best not to mix record and non-record reads on the same file. (This is
likely not a problem, as any file you'd want to read in record mode is
probably usable in line mode) Non-VMS systems perform normal I/O, so
it's safe to mix record and non-record reads of a file.
d277 1
a277 1
Also see L<$.>.
d285 11
a295 10
If set to nonzero, forces a flush right away and after every write or print on the
currently selected output channel.  Default is 0 (regardless of whether
the channel is actually buffered by the system or not; C<$|> tells you
only whether you've asked Perl explicitly to flush after each write).
Note that STDOUT will typically be line buffered if output is to the
terminal and block buffered otherwise.  Setting this variable is useful
primarily when you are outputting to a pipe, such as when you are running
a Perl script under rsh and want to see the output as it's happening.  This
has no effect on input buffering.
(Mnemonic: when you want your pipes to be piping hot.)
d306 5
a310 5
print operator simply prints out the comma-separated fields you
specify.  To get behavior more like B<awk>, set this variable
as you would set B<awk>'s OFS variable to specify what is printed
between fields.  (Mnemonic: what is printed when there is a , in your
print statement.)
d321 7
a327 7
print operator simply prints out the comma-separated fields you
specify, with no trailing newline or record separator assumed.
To get behavior more like B<awk>, set this variable as you would
set B<awk>'s ORS variable to specify what is printed at the end of the
print.  (Mnemonic: you set "C<$\>" instead of adding \n at the end of the
print.  Also, it's just like C<$/>, but it's what you get "back" from
Perl.)
d333 3
a335 3
This is like "C<$,>" except that it applies to array values interpolated
into a double-quoted string (or similar interpreted string).  Default
is a space.  (Mnemonic: obvious, I think.)
d360 2
a361 2
Default is "\034", the same as SUBSEP in B<awk>.  Note that if your
keys contain binary data there might not be any safe value for "C<$;>".
d363 1
a363 1
semi-semicolon.  Yeah, I know, it's pretty lame, but "C<$,>" is already
d366 2
a367 1
Consider using "real" multidimensional arrays.
d375 2
a376 2
when B<awk> and Perl have differing notions of what is in fact
numeric.  The initial value is %.I<n>g, where I<n> is the value
d378 1
a378 1
B<awk>'s default OFMT setting of %.6g, so you need to set "C<$#>"
d381 1
a381 1
Use of "C<$#>" is deprecated.
d390 1
d400 3
a402 1
output channel.  Default is 60.  (Mnemonic: = has horizontal lines.)
d411 44
a454 1
channel.  (Mnemonic: lines_on_page - lines_printed.)
d463 2
a464 2
channel.  Default is name of the filehandle.  (Mnemonic: brother to
"C<$^>".)
d473 1
a473 1
output channel.  Default is name of the filehandle with _TOP
d493 1
a493 1
What formats output to perform a form feed.  Default is \f.
d500 1
a500 1
contains formline() commands that put their result into C<$^A>.  After
d502 1
a502 1
So you never actually see the contents of C<$^A> unless you call
d511 7
a517 5
or system() operator.  Note that this is the status word returned by the
wait() system call (or else is made up to look like it).  Thus, the exit
value of the subprocess is actually (C<$? E<gt>E<gt> 8>), and C<$? & 127>
gives which signal, if any, the process died from, and C<$? & 128> reports
whether there was a core dump.  (Mnemonic: similar to B<sh> and B<ksh>.)
d520 1
a520 1
is returned via $? if any of the C<gethost*()> functions fail.
d522 1
a522 1
Note that if you have installed a signal handler for C<SIGCHLD>, the
d527 5
a531 1
change the exit status of the script.
d545 9
a553 8
If used in a numeric context, yields the current value of errno, with
all the usual caveats.  (This means that you shouldn't depend on the
value of C<$!> to be anything in particular unless you've gotten a
specific error return indicating a system error.)  If used in a string
context, yields the corresponding system error string.  You can assign
to C<$!> to set I<errno> if, for instance, you want C<"$!"> to return the
string for error I<n>, or you want to set the exit value for the die()
operator.  (Mnemonic: What just went bang?)
d577 1
a577 1
code will report errors via C<$^E>.  ANSI C and UNIX-like calls
d590 1
a590 1
The Perl syntax error message from the last eval() command.  If null, the
d595 1
a595 1
Note that warning messages are not collected in this variable.  You can,
d607 3
a609 2
The process number of the Perl running this script.  (Mnemonic: same
as shells.)
d617 1
a617 1
The real uid of this process.  (Mnemonic: it's the uid you came I<FROM>,
d631 2
a632 2
(Mnemonic: it's the uid you went I<TO>, if you're running setuid.)
Note: "C<$E<lt>>" and "C<$E<gt>>" can be swapped only on machines
d647 3
a649 3
However, a value assigned to "C<$(>" must be a single number used to
set the real gid.  So the value given by "C<$(>" should I<not> be assigned
back to "C<$(>" without being forced numeric, such as by adding zero.
d651 2
a652 2
(Mnemonic: parentheses are used to I<GROUP> things.  The real gid is the
group you I<LEFT>, if you're running setgid.)
d666 2
a667 2
Similarly, a value assigned to "C<$)>" must also be a space-separated
list of numbers.  The first number is used to set the effective gid, and
d673 2
a674 2
(Mnemonic: parentheses are used to I<GROUP> things.  The effective gid
is the group that's I<RIGHT> for you, if you're running setgid.)
d676 3
a678 3
Note: "C<$E<lt>>", "C<$E<gt>>", "C<$(>" and "C<$)>" can be set only on
machines that support the corresponding I<set[re][ug]id()> routine.  "C<$(>"
and "C<$)>" can be swapped only on machines supporting setregid().
d684 4
a687 5
Contains the name of the file containing the Perl script being
executed.  On some operating systems
assigning to "C<$0>" modifies the argument area that the ps(1)
program sees.  This is more useful as a way of indicating the
current program state than it is for hiding the program you're running.
d693 8
a700 10
in a substring.  Default is 0, but you could set it to 1 to make
Perl behave more like B<awk> (or Fortran) when subscripting and when
evaluating the index() and substr() functions.  (Mnemonic: [ begins
subscripts.)

As of Perl 5, assignment to "C<$[>" is treated as a compiler directive,
and cannot influence the behavior of any other file.  Its use is
discouraged.

=item $PERL_VERSION
d712 6
a717 1
for a convenient way to fail if the Perl interpreter is too old.
d723 5
a727 4
The current value of the flag associated with the B<-c> switch. Mainly
of use with B<-MO=...> to allow code to alter its behaviour when being compiled.
(For example to automatically AUTOLOADing at compile time rather than normal
deferred loading.)  Setting C<$^C = 1> is similar to calling C<B::minus_c>.
d744 1
a744 1
closed before the open() is attempted.)  Note that the close-on-exec
d746 2
a747 1
C<$^F> when the open() or pipe() was called, not the time of the exec().
d751 48
a798 2
The current set of syntax checks enabled by C<use strict> and other block
scoped compiler hints.  See the documentation of C<strict> for more details.
d809 12
a820 11
By default, running out of memory it is not trappable.  However, if
compiled for this, Perl may use the contents of C<$^M> as an emergency
pool after die()ing with this message.  Suppose that your Perl were
compiled with -DPERL_EMERGENCY_SBRK and used Perl's malloc.  Then

    $^M = 'a' x (1<<16);

would allocate a 64K buffer for use when in emergency.  See the F<INSTALL>
file for information on how to enable this option.  As a disincentive to
casual use of this advanced feature, there is no L<English> long name for
this variable.
d828 2
a829 1
is identical to C<$Config{'osname'}>.
d835 2
a836 2
The internal variable for debugging support.  Different bits mean the
following (subject to change): 
d864 17
d883 4
a886 2
Note that some bits may be relevant at compile-time only, some at
run-time only. This is a new mechanism and the details may change.
d890 4
a893 3
The result of evaluation of the last successful L<perlre/C<(?{ code })>> 
regular expression assertion.  (Excluding those used as switches.)  May
be written to.
d899 1
a899 1
$SIG{__WARN__} handlers).  True if inside an eval, otherwise false.
d905 1
a905 1
The time at which the script began running, in seconds since the
d907 22
a928 2
and B<-C> filetests are
based on this value.
d934 23
a956 2
The current value of the warning switch, either TRUE or FALSE.
(Mnemonic: related to the B<-w> switch.)
d963 1
d967 1
a967 1
contains the name of the current file when reading from E<lt>E<gt>.
d971 4
a974 4
The array @@ARGV contains the command line arguments intended for the
script.  Note that C<$#ARGV> is the generally number of arguments minus
one, because C<$ARGV[0]> is the first argument, I<NOT> the command name.  See
"C<$0>" for the command name.
d978 8
a985 7
The array @@INC contains the list of places to look for Perl scripts to
be evaluated by the C<do EXPR>, C<require>, or C<use> constructs.  It
initially consists of the arguments to any B<-I> command line switches,
followed by the default Perl library, probably F</usr/local/lib/perl>,
followed by ".", to represent the current directory.  If you need to
modify this at runtime, you should use the C<use lib> pragma
to get the machine-dependent library properly loaded also:
d993 1
a993 1
subroutine. See L<perlsub>.
d997 6
a1002 5
The hash %INC contains entries for each filename that has
been included via C<do> or C<require>.  The key is the filename you
specified, and the value is the location of the file actually found.
The C<require> command uses this array to determine whether a given file
has already been included.
d1009 2
a1010 1
value in C<ENV> changes the environment for child processes.
d1016 1
a1016 2
The hash %SIG is used to set signal handlers for various
signals.  Example:
d1028 1
a1028 1
    $SIG{'INT'} = 'DEFAULT';	# restore default action
d1035 1
a1035 2
The %SIG array contains values for only the signals actually set within
the Perl script.  Here are some other examples:
a1036 1
    $SIG{"PIPE"} = Plumber;     # SCARY!!
d1039 1
d1042 2
a1043 4
The one marked scary is problematic because it's a bareword, which means
sometimes it's a string representing the function, and sometimes it's
going to call the subroutine call right then and there!  Best to be sure
and quote it or take a reference to it.  *Plumber works too.  See L<perlsub>.
d1048 1
a1048 1
installed.  This means that system calls for which it is supported
d1079 14
a1092 10
Note that the C<$SIG{__DIE__}> hook is called even inside eval()ed
blocks/strings.  See L<perlfunc/die> and L<perlvar/$^S> for how to
circumvent this.

Note that C<__DIE__>/C<__WARN__> handlers are very special in one
respect: they may be called to report (probable) errors found by the
parser.  In such a case the parser may be in inconsistent state, so
any attempt to evaluate Perl code from such a handler will probably
result in a segfault.  This means that calls which result/may-result
in parsing Perl should be used with extreme caution, like this:
d1104 2
a1105 2
See L<perlfunc/die>, L<perlfunc/warn> and L<perlfunc/eval> for
additional info.
d1111 7
a1117 6
The variables L<$@@>, L<$!>, L<$^E>, and L<$?> contain information about
different types of error conditions that may appear during execution of
Perl script.  The variables are shown ordered by the "distance" between
the subsystem which reported the error and the Perl process, and
correspond to errors detected by the Perl interpreter, C library,
operating system, or an external program, respectively.
d1120 1
a1120 1
following Perl expression:
d1122 5
a1126 5
   eval '
	 open PIPE, "/cdrom/install |";
         @@res = <PIPE>;
	 close PIPE or die "bad pipe: $?, $!";
	';
d1130 16
a1145 27
$@@ is set if the string to be C<eval>-ed did not compile (this may happen if 
C<open> or C<close> were imported with bad prototypes), or if Perl 
code executed during evaluation die()d (either implicitly, say, 
if C<open> was imported from module L<Fatal>, or the C<die> after 
C<close> was triggered).  In these cases the value of $@@ is the compile 
error, or C<Fatal> error (which will interpolate C<$!>!), or the argument
to C<die> (which will interpolate C<$!> and C<$?>!).

When the above expression is executed, open(), C<<PIPEE<gt>>, and C<close> 
are translated to C run-time library calls.  $! is set if one of these 
calls fails.  The value is a symbolic indicator chosen by the C run-time 
library, say C<No such file or directory>.

On some systems the above C library calls are further translated 
to calls to the kernel.  The kernel may have set more verbose error 
indicator that one of the handful of standard C errors.  In such cases $^E 
contains this verbose error indicator, which may be, say, C<CDROM tray not
closed>.  On systems where C library calls are identical to system calls
$^E is a duplicate of $!.

Finally, $? may be set to non-C<0> value if the external program 
C</cdrom/install> fails.  Upper bits of the particular value may reflect 
specific error conditions encountered by this program (this is 
program-dependent), lower-bits reflect mode of failure (segfault, completion,
etc.).  Note that in contrast to $@@, $!, and $^E, which are set only 
if error condition is detected, the variable $? is set on each C<wait> or
pipe C<close>, overwriting the old value.
d1147 9
a1155 2
For more details, see the individual descriptions at L<$@@>, L<$!>, L<$^E>,
and L<$?>.
d1157 2
d1162 6
a1167 6
Variable names in Perl can have several formats.  Usually, they must
begin with a letter or underscore, in which case they can be
arbitrarily long (up to an internal limit of 256 characters) and may
contain letters, digits, underscores, or the special sequence C<::>.
In this case the part before the last C<::> is taken to be a I<package
qualifier>; see L<perlmod>. 
d1171 19
a1189 7
special uses by Perl; for example, the all-digits names are used to
hold backreferences after a regular expression match.  Perl has a
special syntax for the single-control-character names: It understands
C<^X> (caret C<X>) to mean the control-C<X> character.  For example,
the notation C<$^W> (dollar-sign caret C<W>) is the scalar variable
whose name is the single character control-C<W>.  This is better than
typing a literal control-C<W> into your program.
d1191 1
a1191 1
All Perl variables that begin with digits, control characters, or
d1202 19
@


1.2
log
@perl 5.004_04
@
text
@d9 1
a9 1
The following names have special meaning to Perl.  Most of the
d11 1
a11 1
the shells.  Nevertheless, if you wish to use the long variable names,
d17 1
a17 1
long names in the current package.  Some of them even have medium names,
d20 9
d40 1
a40 1
or
d124 1
a124 1
=item $E<lt>I<digit>E<gt>
d128 1
a128 1
blocks that have been exited already.  (Mnemonic: like \digit.)
d139 4
d152 4
d171 4
d200 2
a201 1
Use of "C<$*>" is deprecated in modern perls.
d212 4
a215 1
which you read (or performed a C<seek> or C<tell> on).  An
d231 2
a232 1
The input record separator, newline by default.  Works like B<awk>'s RS
d244 2
a245 2
    undef $/;
    $_ = <FH>; 		# whole file now here
d251 23
d458 8
a465 6
or system() operator.  Note that this is the status word returned by
the wait() system call (or else is made up to look like it).  Thus,
the exit value of the subprocess is actually (C<$? E<gt>E<gt> 8>), and
C<$? & 255> gives which signal, if any, the process died from, and
whether there was a core dump.  (Mnemonic: similar to B<sh> and
B<ksh>.)
d478 2
d488 1
a488 1
value of "C<$!>" to be anything in particular unless you've gotten a
d491 1
a491 1
to "C<$!>" to set I<errno> if, for instance, you want "C<$!>" to return the
d495 2
d501 24
a524 7
More specific information about the last system error than that provided by
C<$!>, if available.  (If not, it's just C<$!> again.)
At the moment, this differs from C<$!> under only VMS and OS/2, where it
provides the VMS status value from the last system error, and OS/2 error
code of the last call to OS/2 API either via CRT, or directly from perl.  The
caveats mentioned in the description of C<$!> apply here, too.
(Mnemonic: Extra error explanation.)
d539 2
d656 9
d682 1
a682 1
C<$^F> at the time of the open, not the time of the exec.
d753 1
a753 1
Note that some bits may be relevent at compile-time only, some at
d756 6
d766 1
a766 1
$SIG{__WARN__} handlers).  True if inside an eval, othewise false.
d827 3
a829 1
=item %ENV  $ENV{expr}
d834 3
a836 1
=item %SIG  $SIG{expr}
d854 4
d906 1
a906 1
blocks/strings.  See L<perlfunc/die>, L<perlvar/$^S> for how to
d914 1
a914 1
in parsing Perl should be used with extreme causion, like this:
d930 83
@


1.1
log
@Initial revision
@
text
@d10 1
a10 1
punctuational names have reasonable mnemonics, or analogues in one of
d21 3
a23 3
selected filehandle may instead be set by calling an object method on
the FileHandle object.  (Summary lines below for this contain the word
HANDLE.)  First you must say
d45 6
d60 2
a61 2
    while (<>) {...}	# only equivalent in while!
    while ($_ = <>) {...}
d72 1
a72 1
Here are the places where Perl will assume $_ even if you 
d92 1
a92 1
=item * 
d97 1
a97 1
=item * 
d101 1
a101 1
=item * 
d111 5
a115 1
=item $<I<digit>>
d136 1
a136 1
enclosed by the current BLOCK).  (Mnemonic: ` often precedes a quoted
d145 1
a145 1
enclosed by the current BLOCK).  (Mnemonic: ' often follows a quoted
d171 1
a171 1
Set to 1 to do multiline matching within a string, 0 to tell Perl
d176 1
a176 1
only influences the interpretation of "C<^>" and "C<$>".  A literal newline can
d179 1
a179 1
Use of "C<$*>" is deprecated in Perl 5.
d189 3
a191 2
The current input line number of the last filehandle that was read.  An
explicit close on the filehandle resets the line number.  Since
d207 10
a216 9
variable, including treating blank lines as delimiters if set to the
null string.  You may set it to a multicharacter string to match a
multi-character delimiter.  Note that setting it to C<"\n\n"> means
something slightly different than setting it to C<"">, if the file
contains consecutive blank lines.  Setting it to C<""> will treat two or
more consecutive blank lines as a single blank line.  Setting it to
C<"\n\n"> will blindly assume that the next input character belongs to the
next paragraph, even if it's a newline.  (Mnemonic: / is used to
delimit line boundaries when quoting poetry.)
d222 3
d231 9
a239 7
If set to nonzero, forces a flush after every write or print on the
currently selected output channel.  Default is 0.  Note that STDOUT
will typically be line buffered if output is to the terminal and block
buffered otherwise.  Setting this variable is useful primarily when you
are outputting to a pipe, such as when you are running a Perl script
under rsh and want to see the output as it's happening.  This has no
effect on input buffering.  
d251 2
a252 2
print operator simply prints out the comma separated fields you
specify.  In order to get behavior more like B<awk>, set this variable
d266 3
a268 3
print operator simply prints out the comma separated fields you
specify, with no trailing newline or record separator assumed.  In
order to get behavior more like B<awk>, set this variable as you would
d271 1
a271 1
print.  Also, it's just like /, but it's what you get "back" from
d288 1
a288 1
The subscript separator for multi-dimensional array emulation.  If you
d311 1
a311 1
Consider using "real" multi-dimensional arrays in Perl 5.
d320 4
a323 3
numeric.  Also, the initial value is %.20g rather than %.6g, so you
need to set "C<$#>" explicitly to get B<awk>'s value.  (Mnemonic: # is the
number sign.)
d325 1
a325 1
Use of "C<$#>" is deprecated in Perl 5.
d381 1
a381 1
fill continuation fields (starting with ^) in a format.  Default is 
d391 1
a391 1
What formats output to perform a formfeed.  Default is \f.
d410 16
a425 4
the wait() system call, so the exit value of the subprocess is actually
(C<$? E<gt>E<gt> 8>).  Thus on many systems, C<$? & 255> gives which signal,
if any, the process died from, and whether there was a core dump.
(Mnemonic: similar to B<sh> and B<ksh>.)
d438 1
a438 1
to "C<$!>" in order to set I<errno> if, for instance, you want "C<$!>" to return the
d446 5
a450 4
More specific information about the last system error than that
provided by C<$!>, if available.  (If not, it's just C<$!> again.)
At the moment, this differs from C<$!> only under VMS, where it
provides the VMS status value from the last system error.  The
a453 1

d464 2
a465 1
however, set up a routine to process warnings by setting $SIG{__WARN__} below.
d496 3
a498 2
(Mnemonic: it's the uid you went I<TO>, if you're running setuid.)  Note:
"C<$E<lt>>" and "C<$E<gt>>" can only be swapped on machines supporting setreuid().
d510 8
a517 2
the same as the first number.  (Mnemonic: parentheses are used to I<GROUP>
things.  The real gid is the group you I<LEFT>, if you're running setgid.)
d529 15
a543 8
which may be the same as the first number.  (Mnemonic: parentheses are
used to I<GROUP> things.  The effective gid is the group that's I<RIGHT> for
you, if you're running setgid.)

Note: "C<$E<lt>>", "C<$E<gt>>", "C<$(>" and "C<$)>" can only be set on machines
that support the corresponding I<set[re][ug]id()> routine.  "C<$(>" and "C<$)>" 
can only be swapped on machines supporting setregid().   Because Perl doesn't
currently use initgroups(), you can't set your group vector to multiple groups.
d550 2
a551 1
executed.  Assigning to "C<$0>" modifies the argument area that the ps(1)
d572 4
a575 14
The string printed out when you say C<perl -v>.
(This is currently I<BROKEN>).
It can be used to
determine at the beginning of a script whether the perl interpreter
executing the script is in the right range of versions.  If used in a
numeric context, returns the version + patchlevel / 1000.  Example:

    # see if getc is available
    ($version,$patchlevel) =
	     $] =~ /(\d+\.\d+).*\nPatch level: (\d+)/;
    print STDERR "(No filename completion available.)\n"
	     if $version * 1000 + $patchlevel < 2016;

or, used numerically,
d579 2
a580 1
(Mnemonic: Is this version of perl in the right bracket?)
d601 5
d613 14
d628 1
d639 39
a677 3
The internal flag that the debugger clears so that it doesn't debug
itself.  You could conceivably disable debugging yourself by clearing
it.
d684 1
a684 1
epoch (beginning of 1970).  The values returned by the B<-M>, B<-A> 
d692 2
a693 2
The current value of the warning switch, either TRUE or FALSE.  (Mnemonic: related to the
B<-w> switch.)
d703 1
a703 1
contains the name of the current file when reading from <>.
d709 1
a709 1
one, since C<$ARGV[0]> is the first argument, I<NOT> the command name.  See
d717 1
a717 1
followed by the default Perl library, probably "/usr/local/lib/perl",
d719 2
a720 2
modify this at runtime, you should use the C<use lib> pragma in order
to also get the machine-dependent library properly loaded:
d724 6
a729 1
  
d738 1
a738 1
=item $ENV{expr}
d743 1
a743 1
=item $SIG{expr}
d749 1
a749 1
	local($sig) = @@_;
d755 2
a756 2
    $SIG{'INT'} = 'handler';
    $SIG{'QUIT'} = 'handler';
d761 1
a761 1
The %SIG array only contains values for the signals actually set within
d764 2
a765 2
    $SIG{PIPE} = Plumber;       # SCARY!!
    $SIG{"PIPE"} = "Plumber";   # just fine, assumes main::Plumber
d770 1
a770 1
sometimes it's a string representing the function, and sometimes it's 
d772 17
a788 1
and quote it or take a reference to it.  *Plumber works too.  See L<perlsubs>.
d791 1
a791 1
routine indicated by $SIG{__WARN__} is called when a warning message is
d800 1
a800 1
The routine indicated by $SIG{__DIE__} is called when a fatal exception
d805 26
a830 2
The __DIE__ handler is explicitly disabled during the call, so that you
can die from a __DIE__ handler.  Similarly for __WARN__.
a832 1

@


1.1.1.1
log
@Import of Perl 5.003 into the tree.  Makefile.bsd-wrapper and
config.sh.OpenBSD are the only local changes.
@
text
@@


1.1.1.2
log
@perl5.005_03
@
text
@d9 3
a11 3
The following names have special meaning to Perl.  Most 
punctuation names have reasonable mnemonics, or analogues in one of
the shells.  Nevertheless, if you wish to use long variable names,
d17 1
a17 1
long names in the current package.  Some even have medium names,
a19 9
Due to an unfortunate accident of Perl's implementation, "C<use English>"
imposes a considerable performance penalty on all regular expression
matches in a program, regardless of whether they occur in the scope of
"C<use English>".  For that reason, saying "C<use English>" in
libraries is strongly discouraged.  See the Devel::SawAmpersand module
documentation from CPAN
(http://www.perl.com/CPAN/modules/by-module/Devel/Devel-SawAmpersand-0.10.readme)
for more information.

d21 3
a23 3
selected filehandle may instead (and preferably) be set by calling an
object method on the FileHandle object.  (Summary lines below for this
contain the word HANDLE.)  First you must say
d31 1
a31 1
or more safely,
a44 6
The following list is ordered by scalar variables first, then the
arrays, then the hashes (except $^M was added in the wrong place).
This is somewhat obscured by the fact that %ENV and %SIG are listed as
$ENV{expr} and $SIG{expr}.


d54 2
a55 2
    while (<>) {...}	# equivalent in only while!
    while (defined($_ = <>)) {...}
d66 1
a66 1
Here are the places where Perl will assume $_ even if you
d86 1
a86 1
=item *
d91 1
a91 1
=item *
d95 1
a95 1
=item *
d105 1
a105 5
=back

=over 8

=item $E<lt>I<digits>E<gt>
d109 1
a109 1
blocks that have been exited already.  (Mnemonic: like \digits.)
a119 4
The use of this variable anywhere in a program imposes a considerable
performance penalty on all regular expression matches.  See the
Devel::SawAmpersand module from CPAN for more information.

d126 1
a126 1
enclosed by the current BLOCK).  (Mnemonic: C<`> often precedes a quoted
a128 4
The use of this variable anywhere in a program imposes a considerable
performance penalty on all regular expression matches.  See the
Devel::SawAmpersand module from CPAN for more information.

d135 1
a135 1
enclosed by the current BLOCK).  (Mnemonic: C<'> often follows a quoted
a143 4
The use of this variable anywhere in a program imposes a considerable
performance penalty on all regular expression matches.  See the
Devel::SawAmpersand module from CPAN for more information.

d161 1
a161 1
Set to 1 to do multi-line matching within a string, 0 to tell Perl
d166 1
a166 1
influences the interpretation of only "C<^>" and "C<$>".  A literal newline can
d169 1
a169 2
Use of "C<$*>" is deprecated in modern Perls, supplanted by 
the C</s> and C</m> modifiers on pattern matching.
d179 2
a180 6
The current input line number for the last file handle from
which you read (or performed a C<seek> or C<tell> on).  The value
may be different from the actual physical line number in the file,
depending on what notion of "line" is in effect--see L<$/> on how
to affect that.  An
explicit close on a filehandle resets the line number.  Because
d195 10
a204 12
The input record separator, newline by default.  This is used to
influence Perl's idea of what a "line" is.  Works like B<awk>'s RS
variable, including treating empty lines as delimiters if set to the
null string.  (Note: An empty line cannot contain any spaces or tabs.)
You may set it to a multi-character string to match a multi-character
delimiter, or to C<undef> to read to end of file.  Note that setting it
to C<"\n\n"> means something slightly different than setting it to
C<"">, if the file contains consecutive empty lines.  Setting it to
C<""> will treat two or more consecutive empty lines as a single empty
line.  Setting it to C<"\n\n"> will blindly assume that the next input
character belongs to the next paragraph, even if it's a newline.
(Mnemonic: / is used to delimit line boundaries when quoting poetry.)
d206 2
a207 2
    undef $/;		# enable "slurp" mode
    $_ = <FH>;		# whole file now here
a209 26
Remember: the value of $/ is a string, not a regexp.  AWK has to be
better for something :-)

Setting $/ to a reference to an integer, scalar containing an integer, or
scalar that's convertable to an integer will attempt to read records
instead of lines, with the maximum record size being the referenced
integer. So this:

    $/ = \32768; # or \"32768", or \$var_containing_32768
    open(FILE, $myfile);
    $_ = <FILE>;

will read a record of no more than 32768 bytes from FILE. If you're not
reading from a record-oriented file (or your OS doesn't have
record-oriented files), then you'll likely get a full chunk of data with
every read. If a record is larger than the record size you've set, you'll
get the record back in pieces.

On VMS, record reads are done with the equivalent of C<sysread>, so it's
best not to mix record and non-record reads on the same file. (This is
likely not a problem, as any file you'd want to read in record mode is
probably usable in line mode) Non-VMS systems perform normal I/O, so
it's safe to mix record and non-record reads of a file.

Also see L<$.>.

d216 7
a222 9
If set to nonzero, forces a flush right away and after every write or print on the
currently selected output channel.  Default is 0 (regardless of whether
the channel is actually buffered by the system or not; C<$|> tells you
only whether you've asked Perl explicitly to flush after each write).
Note that STDOUT will typically be line buffered if output is to the
terminal and block buffered otherwise.  Setting this variable is useful
primarily when you are outputting to a pipe, such as when you are running
a Perl script under rsh and want to see the output as it's happening.  This
has no effect on input buffering.
d234 2
a235 2
print operator simply prints out the comma-separated fields you
specify.  To get behavior more like B<awk>, set this variable
d249 3
a251 3
print operator simply prints out the comma-separated fields you
specify, with no trailing newline or record separator assumed.
To get behavior more like B<awk>, set this variable as you would
d254 1
a254 1
print.  Also, it's just like C<$/>, but it's what you get "back" from
d271 1
a271 1
The subscript separator for multidimensional array emulation.  If you
d294 1
a294 1
Consider using "real" multidimensional arrays.
d303 3
a305 4
numeric.  The initial value is %.I<n>g, where I<n> is the value
of the macro DBL_DIG from your system's F<float.h>.  This is different from
B<awk>'s default OFMT setting of %.6g, so you need to set "C<$#>"
explicitly to get B<awk>'s value.  (Mnemonic: # is the number sign.)
d307 1
a307 1
Use of "C<$#>" is deprecated.
d363 1
a363 1
fill continuation fields (starting with ^) in a format.  Default is
d373 1
a373 1
What formats output to perform a form feed.  Default is \f.
d391 5
a395 21
or system() operator.  Note that this is the status word returned by the
wait() system call (or else is made up to look like it).  Thus, the exit
value of the subprocess is actually (C<$? E<gt>E<gt> 8>), and C<$? & 127>
gives which signal, if any, the process died from, and C<$? & 128> reports
whether there was a core dump.  (Mnemonic: similar to B<sh> and B<ksh>.)

Additionally, if the C<h_errno> variable is supported in C, its value
is returned via $? if any of the C<gethost*()> functions fail.

Note that if you have installed a signal handler for C<SIGCHLD>, the
value of C<$?> will usually be wrong outside that handler.

Inside an C<END> subroutine C<$?> contains the value that is going to be
given to C<exit()>.  You can modify C<$?> in an C<END> subroutine to
change the exit status of the script.

Under VMS, the pragma C<use vmsish 'status'> makes C<$?> reflect the
actual VMS exit status, instead of the default emulation of POSIX
status.

Also see L<Error Indicators>.
d405 1
a405 1
value of C<$!> to be anything in particular unless you've gotten a
d408 1
a408 1
to C<$!> to set I<errno> if, for instance, you want C<"$!"> to return the
a411 2
Also see L<Error Indicators>.

d416 6
a421 19
Error information specific to the current operating system.  At
the moment, this differs from C<$!> under only VMS, OS/2, and Win32
(and for MacPerl).  On all other platforms, C<$^E> is always just
the same as C<$!>.

Under VMS, C<$^E> provides the VMS status value from the last
system error.  This is more specific information about the last
system error than that provided by C<$!>.  This is particularly
important when C<$!> is set to B<EVMSERR>.

Under OS/2, C<$^E> is set to the error code of the last call to
OS/2 API either via CRT, or directly from perl.

Under Win32, C<$^E> always returns the last error information
reported by the Win32 call C<GetLastError()> which describes
the last error from within the Win32 API.  Most Win32-specific
code will report errors via C<$^E>.  ANSI C and UNIX-like calls
set C<errno> and so most portable Perl code will report errors
via C<$!>. 
a422 4
Caveats mentioned in the description of C<$!> generally apply to
C<$^E>, also.  (Mnemonic: Extra error explanation.)

Also see L<Error Indicators>.
d434 1
a434 4
however, set up a routine to process warnings by setting C<$SIG{__WARN__}>
as described below.

Also see L<Error Indicators>.
d465 2
a466 3
(Mnemonic: it's the uid you went I<TO>, if you're running setuid.)
Note: "C<$E<lt>>" and "C<$E<gt>>" can be swapped only on machines
supporting setreuid().
d478 2
a479 8
the same as the first number.

However, a value assigned to "C<$(>" must be a single number used to
set the real gid.  So the value given by "C<$(>" should I<not> be assigned
back to "C<$(>" without being forced numeric, such as by adding zero.

(Mnemonic: parentheses are used to I<GROUP> things.  The real gid is the
group you I<LEFT>, if you're running setgid.)
d491 8
a498 15
which may be the same as the first number.

Similarly, a value assigned to "C<$)>" must also be a space-separated
list of numbers.  The first number is used to set the effective gid, and
the rest (if any) are passed to setgroups().  To get the effect of an
empty list for setgroups(), just repeat the new effective gid; that is,
to force an effective gid of 5 and an effectively empty setgroups()
list, say C< $) = "5 5" >.

(Mnemonic: parentheses are used to I<GROUP> things.  The effective gid
is the group that's I<RIGHT> for you, if you're running setgid.)

Note: "C<$E<lt>>", "C<$E<gt>>", "C<$(>" and "C<$)>" can be set only on
machines that support the corresponding I<set[re][ug]id()> routine.  "C<$(>"
and "C<$)>" can be swapped only on machines supporting setregid().
d505 1
a505 2
executed.  On some operating systems
assigning to "C<$0>" modifies the argument area that the ps(1)
d526 14
a539 4
The version + patchlevel / 1000 of the Perl interpreter.  This variable
can be used to determine whether the Perl interpreter executing a
script is in the right range of versions.  (Mnemonic: Is this version
of perl in the right bracket?)  Example:
d543 1
a543 11
See also the documentation of C<use VERSION> and C<require VERSION>
for a convenient way to fail if the Perl interpreter is too old.

=item $COMPILING

=item $^C

The current value of the flag associated with the B<-c> switch. Mainly
of use with B<-MO=...> to allow code to alter its behaviour when being compiled.
(For example to automatically AUTOLOADing at compile time rather than normal
deferred loading.)  Setting C<$^C = 1> is similar to calling C<B::minus_c>.
d562 1
a562 6
C<$^F> when the open() or pipe() was called, not the time of the exec().

=item $^H

The current set of syntax checks enabled by C<use strict> and other block
scoped compiler hints.  See the documentation of C<strict> for more details.
a570 14
=item $^M

By default, running out of memory it is not trappable.  However, if
compiled for this, Perl may use the contents of C<$^M> as an emergency
pool after die()ing with this message.  Suppose that your Perl were
compiled with -DPERL_EMERGENCY_SBRK and used Perl's malloc.  Then

    $^M = 'a' x (1<<16);

would allocate a 64K buffer for use when in emergency.  See the F<INSTALL>
file for information on how to enable this option.  As a disincentive to
casual use of this advanced feature, there is no L<English> long name for
this variable.

a571 1

d582 3
a584 45
The internal variable for debugging support.  Different bits mean the
following (subject to change): 

=over 6

=item 0x01

Debug subroutine enter/exit.

=item 0x02

Line-by-line debugging.

=item 0x04

Switch off optimizations.

=item 0x08

Preserve more data for future interactive inspections.

=item 0x10

Keep info about source lines on which a subroutine is defined.

=item 0x20

Start with single-step on.

=back

Note that some bits may be relevant at compile-time only, some at
run-time only. This is a new mechanism and the details may change.

=item $^R

The result of evaluation of the last successful L<perlre/C<(?{ code })>> 
regular expression assertion.  (Excluding those used as switches.)  May
be written to.

=item $^S

Current state of the interpreter.  Undefined if parsing of the current
module/eval is not finished (may happen in $SIG{__DIE__} and
$SIG{__WARN__} handlers).  True if inside an eval, otherwise false.
d591 1
a591 1
epoch (beginning of 1970).  The values returned by the B<-M>, B<-A>,
d599 2
a600 2
The current value of the warning switch, either TRUE or FALSE.
(Mnemonic: related to the B<-w> switch.)
d610 1
a610 1
contains the name of the current file when reading from E<lt>E<gt>.
d616 1
a616 1
one, because C<$ARGV[0]> is the first argument, I<NOT> the command name.  See
d624 1
a624 1
followed by the default Perl library, probably F</usr/local/lib/perl>,
d626 2
a627 2
modify this at runtime, you should use the C<use lib> pragma
to get the machine-dependent library properly loaded also:
d631 1
a631 6

=item @@_

Within a subroutine the array @@_ contains the parameters passed to that
subroutine. See L<perlsub>.

a639 2
=item %ENV

a644 2
=item %SIG

d651 1
a651 1
	my($sig) = @@_;
d657 2
a658 2
    $SIG{'INT'}  = \&handler;
    $SIG{'QUIT'} = \&handler;
d663 1
a663 5
Using a value of C<'IGNORE'> usually has the effect of ignoring the
signal, except for the C<CHLD> signal.  See L<perlipc> for more about
this special case.

The %SIG array contains values for only the signals actually set within
d666 2
a667 2
    $SIG{"PIPE"} = Plumber;     # SCARY!!
    $SIG{"PIPE"} = "Plumber";   # assumes main::Plumber (not recommended)
d672 1
a672 1
sometimes it's a string representing the function, and sometimes it's
d674 1
a674 17
and quote it or take a reference to it.  *Plumber works too.  See L<perlsub>.

If your system has the sigaction() function then signal handlers are
installed using it.  This means you get reliable signal handling.  If
your system has the SA_RESTART flag it is used when signals handlers are
installed.  This means that system calls for which it is supported
continue rather than returning when a signal arrives.  If you want your
system calls to be interrupted by signal delivery then do something like
this:

    use POSIX ':signal_h';

    my $alarm = 0;
    sigaction SIGALRM, new POSIX::SigAction sub { $alarm = 1 }
    	or die "Error setting SIGALRM handler: $!\n";

See L<POSIX>.
d677 1
a677 1
routine indicated by C<$SIG{__WARN__}> is called when a warning message is
d686 1
a686 1
The routine indicated by C<$SIG{__DIE__}> is called when a fatal exception
d691 2
a692 26
The C<__DIE__> handler is explicitly disabled during the call, so that you
can die from a C<__DIE__> handler.  Similarly for C<__WARN__>.

Note that the C<$SIG{__DIE__}> hook is called even inside eval()ed
blocks/strings.  See L<perlfunc/die> and L<perlvar/$^S> for how to
circumvent this.

Note that C<__DIE__>/C<__WARN__> handlers are very special in one
respect: they may be called to report (probable) errors found by the
parser.  In such a case the parser may be in inconsistent state, so
any attempt to evaluate Perl code from such a handler will probably
result in a segfault.  This means that calls which result/may-result
in parsing Perl should be used with extreme caution, like this:

    require Carp if defined $^S;
    Carp::confess("Something wrong") if defined &Carp::confess;
    die "Something wrong, but could not load Carp to give backtrace...
         To see backtrace try starting Perl with -MCarp switch";

Here the first line will load Carp I<unless> it is the parser who
called the handler.  The second line will print backtrace and die if
Carp was available.  The third line will be executed only if Carp was
not available.

See L<perlfunc/die>, L<perlfunc/warn> and L<perlfunc/eval> for
additional info.
a694 82

=head2 Error Indicators

The variables L<$@@>, L<$!>, L<$^E>, and L<$?> contain information about
different types of error conditions that may appear during execution of
Perl script.  The variables are shown ordered by the "distance" between
the subsystem which reported the error and the Perl process, and
correspond to errors detected by the Perl interpreter, C library,
operating system, or an external program, respectively.

To illustrate the differences between these variables, consider the 
following Perl expression:

   eval '
	 open PIPE, "/cdrom/install |";
         @@res = <PIPE>;
	 close PIPE or die "bad pipe: $?, $!";
	';

After execution of this statement all 4 variables may have been set.  

$@@ is set if the string to be C<eval>-ed did not compile (this may happen if 
C<open> or C<close> were imported with bad prototypes), or if Perl 
code executed during evaluation die()d (either implicitly, say, 
if C<open> was imported from module L<Fatal>, or the C<die> after 
C<close> was triggered).  In these cases the value of $@@ is the compile 
error, or C<Fatal> error (which will interpolate C<$!>!), or the argument
to C<die> (which will interpolate C<$!> and C<$?>!).

When the above expression is executed, open(), C<<PIPEE<gt>>, and C<close> 
are translated to C run-time library calls.  $! is set if one of these 
calls fails.  The value is a symbolic indicator chosen by the C run-time 
library, say C<No such file or directory>.

On some systems the above C library calls are further translated 
to calls to the kernel.  The kernel may have set more verbose error 
indicator that one of the handful of standard C errors.  In such cases $^E 
contains this verbose error indicator, which may be, say, C<CDROM tray not
closed>.  On systems where C library calls are identical to system calls
$^E is a duplicate of $!.

Finally, $? may be set to non-C<0> value if the external program 
C</cdrom/install> fails.  Upper bits of the particular value may reflect 
specific error conditions encountered by this program (this is 
program-dependent), lower-bits reflect mode of failure (segfault, completion,
etc.).  Note that in contrast to $@@, $!, and $^E, which are set only 
if error condition is detected, the variable $? is set on each C<wait> or
pipe C<close>, overwriting the old value.

For more details, see the individual descriptions at L<$@@>, L<$!>, L<$^E>,
and L<$?>.


=head2 Technical Note on the Syntax of Variable Names

Variable names in Perl can have several formats.  Usually, they must
begin with a letter or underscore, in which case they can be
arbitrarily long (up to an internal limit of 256 characters) and may
contain letters, digits, underscores, or the special sequence C<::>.
In this case the part before the last C<::> is taken to be a I<package
qualifier>; see L<perlmod>. 

Perl variable names may also be a sequence of digits or a single
punctuation or control character.  These names are all reserved for
special uses by Perl; for example, the all-digits names are used to
hold backreferences after a regular expression match.  Perl has a
special syntax for the single-control-character names: It understands
C<^X> (caret C<X>) to mean the control-C<X> character.  For example,
the notation C<$^W> (dollar-sign caret C<W>) is the scalar variable
whose name is the single character control-C<W>.  This is better than
typing a literal control-C<W> into your program.

All Perl variables that begin with digits, control characters, or
punctuation characters are exempt from the effects of the C<package>
declaration and are always forced to be in package C<main>.  A few
other names are also exempt:

	ENV		STDIN
	INC		STDOUT
	ARGV		STDERR
	ARGVOUT
	SIG
@


1.1.1.3
log
@virgin perl 5.6.0
@
text
@d10 3
a12 3
punctuation names have reasonable mnemonics, or analogs in the
shells.  Nevertheless, if you wish to use long variable names,
you need only say
d20 13
a32 4
If you don't mind the performance hit, variables that depend on the
currently selected filehandle may instead be set by calling an
appropriate object method on the IO::Handle object.  (Summary lines
below for this contain the word HANDLE.)  First you must say
d34 1
a34 1
    use IO::Handle;
d44 1
a44 1
Each method returns the old value of the IO::Handle attribute.
d46 2
a47 2
new value for the IO::Handle attribute in question.  If not supplied,
most methods do nothing to the current value--except for
a48 2
Because loading in the IO::Handle class is an expensive operation, you should
learn how to use the regular built-in variables.
d55 4
a58 1
arrays, then the hashes.
d69 1
a69 1
    while (<>) {...}	# equivalent only in while!
d78 2
a79 2
    chomp
    chomp($_)
d112 1
a112 1
The default place to put an input record when a C<< <FH> >>
d114 1
a114 1
test.  Outside a C<while> test, this will not happen.
d124 1
a124 1
=item $<I<digits>>
d126 4
a129 5
Contains the subpattern from the corresponding set of capturing
parentheses from the last pattern match, not counting patterns
matched in nested blocks that have been exited already.  (Mnemonic:
like \digits.)  These variables are all read-only and dynamically
scoped to the current BLOCK.
d137 1
a137 2
BLOCK).  (Mnemonic: like & in some editors.)  This variable is read-only
and dynamically scoped to the current BLOCK.
d140 2
a141 1
performance penalty on all regular expression matches.  See L<BUGS>.
d153 2
a154 1
performance penalty on all regular expression matches.  See L<BUGS>.
d169 1
a169 1
This variable is read-only and dynamically scoped to the current BLOCK.
d172 2
a173 1
performance penalty on all regular expression matches.  See L<BUGS>.
d180 1
a180 1
you don't know which one of a set of alternative patterns matched.  For
d186 1
a186 14
This variable is read-only and dynamically scoped to the current BLOCK.

=item @@+

This array holds the offsets of the ends of the last successful
submatches in the currently active dynamic scope.  C<$+[0]> is
the offset into the string of the end of the entire match.  This
is the same value as what the C<pos> function returns when called
on the variable that was matched against.  The I<n>th element
of this array holds the offset of the I<n>th submatch, so
C<$+[1]> is the offset past where $1 ends, C<$+[2]> the offset
past where $2 ends, and so on.  You can use C<$#+> to determine
how many subgroups were in the last successful match.  See the
examples given for the C<@@-> variable.
d195 3
a197 3
multiple newlines can produce confusing results when C<$*> is 0.  Default
is 0.  (Mnemonic: * matches multiple things.)  This variable
influences the interpretation of only C<^> and C<$>.  A literal newline can
d200 1
a200 1
Use of C<$*> is deprecated in modern Perl, supplanted by 
d211 2
a212 2
The current input record number for the last file handle from which
you just read() (or called a C<seek> or C<tell> on).  The value
d214 6
a219 7
depending on what notion of "line" is in effect--see C<$/> on how
to change that.  An explicit close on a filehandle resets the line
number.  Because C<< <> >> never does an explicit close, line
numbers increase across ARGV files (but see examples in L<perlfunc/eof>).
Consider this variable read-only: setting it does not reposition
the seek pointer; you'll have to do that on your own.  Localizing C<$.>
has the effect of also localizing Perl's notion of "the last read
d231 12
a242 13
The input record separator, newline by default.  This 
influences Perl's idea of what a "line" is.  Works like B<awk>'s RS
variable, including treating empty lines as a terminator if set to
the null string.  (An empty line cannot contain any spaces
or tabs.)  You may set it to a multi-character string to match a
multi-character terminator, or to C<undef> to read through the end
of file.  Setting it to C<"\n\n"> means something slightly
different than setting to C<"">, if the file contains consecutive
empty lines.  Setting to C<""> will treat two or more consecutive
empty lines as a single empty line.  Setting to C<"\n\n"> will
blindly assume that the next input character belongs to the next
paragraph, even if it's a newline.  (Mnemonic: / delimits
line boundaries when quoting poetry.)
d248 2
a249 2
Remember: the value of C<$/> is a string, not a regex.  B<awk> has to be
better for something. :-)
d251 2
a252 2
Setting C<$/> to a reference to an integer, scalar containing an integer, or
scalar that's convertible to an integer will attempt to read records
d254 1
a254 1
integer.  So this:
d260 11
a270 12
will read a record of no more than 32768 bytes from FILE.  If you're
not reading from a record-oriented file (or your OS doesn't have
record-oriented files), then you'll likely get a full chunk of data
with every read.  If a record is larger than the record size you've
set, you'll get the record back in pieces.

On VMS, record reads are done with the equivalent of C<sysread>,
so it's best not to mix record and non-record reads on the same
file.  (This is unlikely to be a problem, because any file you'd
want to read in record mode is probably unusable in line mode.)
Non-VMS systems do normal I/O, so it's safe to mix record and
non-record reads of a file.
d272 1
a272 1
See also L<perlport/"Newlines">.  Also see C<$.>.
d280 10
a289 11
If set to nonzero, forces a flush right away and after every write
or print on the currently selected output channel.  Default is 0
(regardless of whether the channel is really buffered by the
system or not; C<$|> tells you only whether you've asked Perl
explicitly to flush after each write).  STDOUT will
typically be line buffered if output is to the terminal and block
buffered otherwise.  Setting this variable is useful primarily when
you are outputting to a pipe or socket, such as when you are running
a Perl program under B<rsh> and want to see the output as it's
happening.  This has no effect on input buffering.  See L<perlfunc/getc>
for that.  (Mnemonic: when you want your pipes to be piping hot.)
d300 5
a304 5
print operator simply prints out its arguments without further
adornment.  To get behavior more like B<awk>, set this variable as
you would set B<awk>'s OFS variable to specify what is printed
between fields.  (Mnemonic: what is printed when there is a "," in
your print statement.)
d315 7
a321 7
print operator simply prints out its arguments as is, with no
trailing newline or other end-of-record string added.  To get
behavior more like B<awk>, set this variable as you would set
B<awk>'s ORS variable to specify what is printed at the end of the
print.  (Mnemonic: you set C<$\> instead of adding "\n" at the
end of the print.  Also, it's just like C<$/>, but it's what you
get "back" from Perl.)
d327 3
a329 3
This is like C<$,> except that it applies to array and slice values
interpolated into a double-quoted string (or similar interpreted
string).  Default is a space.  (Mnemonic: obvious, I think.)
d354 2
a355 2
Default is "\034", the same as SUBSEP in B<awk>.  If your
keys contain binary data there might not be any safe value for C<$;>.
d357 1
a357 1
semi-semicolon.  Yeah, I know, it's pretty lame, but C<$,> is already
d360 1
a360 2
Consider using "real" multidimensional arrays as described
in L<perllol>.
d368 2
a369 2
when B<awk> and Perl have differing notions of what counts as 
numeric.  The initial value is "%.I<n>g", where I<n> is the value
d371 1
a371 1
B<awk>'s default OFMT setting of "%.6g", so you need to set C<$#>
d374 1
a374 1
Use of C<$#> is deprecated.
a382 1
Used with formats.
d392 1
a392 3
output channel.  Default is 60.  
Used with formats.
(Mnemonic: = has horizontal lines.)
d401 1
a401 44
channel.  
Used with formats.
(Mnemonic: lines_on_page - lines_printed.)

=item @@-

$-[0] is the offset of the start of the last successful match.
C<$-[>I<n>C<]> is the offset of the start of the substring matched by
I<n>-th subpattern, or undef if the subpattern did not match.

Thus after a match against $_, $& coincides with C<substr $_, $-[0],
$+[0] - $-[0]>.  Similarly, C<$>I<n> coincides with C<substr $_, $-[>I<n>C<],
$+[>I<n>C<] - $-[>I<n>C<]> if C<$-[>I<n>C<]> is defined, and $+ coincides with
C<substr $_, $-[$#-], $+[$#-]>.  One can use C<$#-> to find the last
matched subgroup in the last successful match.  Contrast with
C<$#+>, the number of subgroups in the regular expression.  Compare
with C<@@+>.

This array holds the offsets of the beginnings of the last
successful submatches in the currently active dynamic scope.
C<$-[0]> is the offset into the string of the beginning of the
entire match.  The I<n>th element of this array holds the offset
of the I<n>th submatch, so C<$+[1]> is the offset where $1
begins, C<$+[2]> the offset where $2 begins, and so on.
You can use C<$#-> to determine how many subgroups were in the
last successful match.  Compare with the C<@@+> variable.

After a match against some variable $var:

=over 5

=item C<$`> is the same as C<substr($var, 0, $-[0]>)

=item C<$&> is the same as C<substr($var, $-[0], $+[0] - $-[0]>) 

=item C<$'> is the same as C<substr($var, $+[0]>)

=item C<$1> is the same as C<substr($var, $-[1], $+[1] - $-[1])>  

=item C<$2> is the same as C<substr($var, $-[2], $+[2] - $-[2])>

=item C<$3> is the same as C<substr $var, $-[3], $+[3] - $-[3]>) 

=back
d410 2
a411 2
channel.  Default is the name of the filehandle.  (Mnemonic: brother to
C<$^>.)
d420 1
a420 1
output channel.  Default is the name of the filehandle with _TOP
d440 1
a440 1
What formats output as a form feed.  Default is \f.
d447 1
a447 1
contains formline() calls that put their result into C<$^A>.  After
d449 1
a449 1
So you never really see the contents of C<$^A> unless you call
d458 5
a462 7
successful call to wait() or waitpid(), or from the system()
operator.  This is just the 16-bit status word returned by the
wait() system call (or else is made up to look like it).  Thus, the
exit value of the subprocess is really (C<<< $? >> 8 >>>), and
C<$? & 127> gives which signal, if any, the process died from, and
C<$? & 128> reports whether there was a core dump.  (Mnemonic:
similar to B<sh> and B<ksh>.)
d465 1
a465 1
is returned via $? if any C<gethost*()> function fails.
d467 1
a467 1
If you have installed a signal handler for C<SIGCHLD>, the
d472 1
a472 5
change the exit status of your program.  For example:

    END {
	$? = 1 if $? == 255;  # die would make it 255
    } 
d486 8
a493 9
If used numerically, yields the current value of the C C<errno>
variable, with all the usual caveats.  (This means that you shouldn't
depend on the value of C<$!> to be anything in particular unless
you've gotten a specific error return indicating a system error.)
If used an a string, yields the corresponding system error string.
You can assign a number to C<$!> to set I<errno> if, for instance,
you want C<"$!"> to return the string for error I<n>, or you want
to set the exit value for the die() operator.  (Mnemonic: What just
went bang?)
d517 1
a517 1
code will report errors via C<$^E>.  ANSI C and Unix-like calls
d530 1
a530 1
The Perl syntax error message from the last eval() operator.  If null, the
d535 1
a535 1
Warning messages are not collected in this variable.  You can,
d547 2
a548 3
The process number of the Perl running this script.  You should
consider this variable read-only, although it will be altered
across fork() calls.  (Mnemonic: same as shells.)
d556 1
a556 1
The real uid of this process.  (Mnemonic: it's the uid you came I<from>,
d570 2
a571 2
(Mnemonic: it's the uid you went I<to>, if you're running setuid.)
C<< $< >> and C<< $> >> can be swapped only on machines
d586 3
a588 3
However, a value assigned to C<$(> must be a single number used to
set the real gid.  So the value given by C<$(> should I<not> be assigned
back to C<$(> without being forced numeric, such as by adding zero.
d590 2
a591 2
(Mnemonic: parentheses are used to I<group> things.  The real gid is the
group you I<left>, if you're running setgid.)
d605 2
a606 2
Similarly, a value assigned to C<$)> must also be a space-separated
list of numbers.  The first number sets the effective gid, and
d612 2
a613 2
(Mnemonic: parentheses are used to I<group> things.  The effective gid
is the group that's I<right> for you, if you're running setgid.)
d615 3
a617 3
C<< $< >>, C<< $> >>, C<$(> and C<$)> can be set only on
machines that support the corresponding I<set[re][ug]id()> routine.  C<$(>
and C<$)> can be swapped only on machines supporting setregid().
d623 5
a627 4
Contains the name of the program being executed.  On some operating
systems assigning to C<$0> modifies the argument area that the B<ps>
program sees.  This is more useful as a way of indicating the current
program state than it is for hiding the program you're running.
d633 10
a642 8
in a substring.  Default is 0, but you could theoretically set it
to 1 to make Perl behave more like B<awk> (or Fortran) when
subscripting and when evaluating the index() and substr() functions.
(Mnemonic: [ begins subscripts.)

As of release 5 of Perl, assignment to C<$[> is treated as a compiler
directive, and cannot influence the behavior of any other file.
Its use is highly discouraged.
d654 1
a654 6
for a convenient way to fail if the running Perl interpreter is too old.

The use of this variable is deprecated.  The floating point representation
can sometimes lead to inaccurate numeric comparisons.  See C<$^V> for a
more modern representation of the Perl version that allows accurate string
comparisons.
d660 4
a663 5
The current value of the flag associated with the B<-c> switch.
Mainly of use with B<-MO=...> to allow code to alter its behavior
when being compiled, such as for example to AUTOLOAD at compile
time rather than normal, deferred loading.  See L<perlcc>.  Setting
C<$^C = 1> is similar to calling C<B::minus_c>.
d680 1
a680 1
closed before the open() is attempted.)  The close-on-exec
d682 1
a682 2
C<$^F> when the corresponding file, pipe, or socket was opened, not the
time of the exec().
d686 2
a687 48
WARNING: This variable is strictly for internal use only.  Its availability,
behavior, and contents are subject to change without notice.

This variable contains compile-time hints for the Perl interpreter.  At the
end of compilation of a BLOCK the value of this variable is restored to the
value when the interpreter started to compile the BLOCK.

When perl begins to parse any block construct that provides a lexical scope
(e.g., eval body, required file, subroutine body, loop body, or conditional
block), the existing value of $^H is saved, but its value is left unchanged.
When the compilation of the block is completed, it regains the saved value.
Between the points where its value is saved and restored, code that
executes within BEGIN blocks is free to change the value of $^H.

This behavior provides the semantic of lexical scoping, and is used in,
for instance, the C<use strict> pragma.

The contents should be an integer; different bits of it are used for
different pragmatic flags.  Here's an example:

    sub add_100 { $^H |= 0x100 }

    sub foo {
	BEGIN { add_100() }
	bar->baz($boon);
    }

Consider what happens during execution of the BEGIN block.  At this point
the BEGIN block has already been compiled, but the body of foo() is still
being compiled.  The new value of $^H will therefore be visible only while
the body of foo() is being compiled.

Substitution of the above BEGIN block with:

    BEGIN { require strict; strict->import('vars') }

demonstrates how C<use strict 'vars'> is implemented.  Here's a conditional
version of the same lexical pragma:

    BEGIN { require strict; strict->import('vars') if $condition }

=item %^H

WARNING: This variable is strictly for internal use only.  Its availability,
behavior, and contents are subject to change without notice.

The %^H hash provides the same scoping semantic as $^H.  This makes it
useful for implementation of lexically scoped pragmas.
d698 11
a708 12
By default, running out of memory is an untrappable, fatal error.
However, if suitably built, Perl can use the contents of C<$^M>
as an emergency memory pool after die()ing.  Suppose that your Perl
were compiled with -DPERL_EMERGENCY_SBRK and used Perl's malloc.
Then

    $^M = 'a' x (1 << 16);

would allocate a 64K buffer for use when in emergency.  See the
F<INSTALL> file in the Perl distribution for information on how to
enable this option.  To discourage casual use of this advanced
feature, there is no L<English> long name for this variable.
d716 1
a716 2
is identical to C<$Config{'osname'}>.  See also L<Config> and the 
B<-V> command-line switch documented in L<perlrun>.
d722 2
a723 2
The internal variable for debugging support.  The meanings of the
various bits are subject to change, but currently indicate:
a750 17
=item 0x40

Use subroutine address instead of name when reporting.

=item 0x80

Report C<goto &subroutine> as well.

=item 0x100

Provide informative "file" names for evals based on the place they were compiled.

=item 0x200

Provide informative names to anonymous subroutines based on the place they
were compiled.

d753 2
a754 4
Some bits may be relevant at compile-time only, some at
run-time only.  This is a new mechanism and the details may change.

=item $LAST_REGEXP_CODE_RESULT
d758 3
a760 4
The result of evaluation of the last successful C<(?{ code })>
regular expression assertion (see L<perlre>).  May be written to.

=item $EXCEPTIONS_BEING_CAUGHT
d766 1
a766 1
$SIG{__WARN__} handlers).  True if inside an eval(), otherwise false.
d772 1
a772 1
The time at which the program began running, in seconds since the
d774 2
a775 22
and B<-C> filetests are based on this value.

=item $PERL_VERSION

=item $^V

The revision, version, and subversion of the Perl interpreter, represented
as a string composed of characters with those ordinals.  Thus in Perl v5.6.0
it equals C<chr(5) . chr(6) . chr(0)> and will return true for
C<$^V eq v5.6.0>.  Note that the characters in this string value can
potentially be in Unicode range.

This can be used to determine whether the Perl interpreter executing a
script is in the right range of versions.  (Mnemonic: use ^V for Version
Control.)  Example:

    warn "No "our" declarations!\n" if $^V and $^V lt v5.6.0;

See the documentation of C<use VERSION> and C<require VERSION>
for a convenient way to fail if the running Perl interpreter is too old.

See also C<$]> for an older representation of the Perl version.
d781 2
a782 23
The current value of the warning switch, initially true if B<-w>
was used, false otherwise, but directly modifiable.  (Mnemonic:
related to the B<-w> switch.)  See also L<warnings>.

=item ${^WARNING_BITS}

The current set of warning checks enabled by the C<use warnings> pragma.
See the documentation of C<warnings> for more details.

=item ${^WIDE_SYSTEM_CALLS}

Global flag that enables system calls made by Perl to use wide character
APIs native to the system, if available.  This is currently only implemented
on the Windows platform.

This can also be enabled from the command line using the C<-C> switch.

The initial value is typically C<0> for compatibility with Perl versions
earlier than 5.6, but may be automatically set to C<1> by Perl if the system
provides a user-settable default (e.g., C<$ENV{LC_CTYPE}>).

The C<bytes> pragma always overrides the effect of this flag in the current
lexical scope.  See L<bytes>.
a788 1
This may not be a full pathname, nor even necessarily in your path.
d792 1
a792 1
contains the name of the current file when reading from <>.
d796 4
a799 4
The array @@ARGV contains the command-line arguments intended for
the script.  C<$#ARGV> is generally the number of arguments minus
one, because C<$ARGV[0]> is the first argument, I<not> the program's
command name itself.  See C<$0> for the command name.
d803 7
a809 8
The array @@INC contains the list of places that the C<do EXPR>,
C<require>, or C<use> constructs look for their library files.  It
initially consists of the arguments to any B<-I> command-line
switches, followed by the default Perl library, probably
F</usr/local/lib/perl>, followed by ".", to represent the current
directory.  If you need to modify this at runtime, you should use
the C<use lib> pragma to get the machine-dependent library properly
loaded also:
d817 1
a817 1
subroutine.  See L<perlsub>.
d821 5
a825 6
The hash %INC contains entries for each filename included via the
C<do>, C<require>, or C<use> operators.  The key is the filename
you specified (with module names converted to pathnames), and the
value is the location of the file found.  The C<require>
operator uses this hash to determine whether a particular file has
already been included.
d832 1
a832 2
value in C<ENV> changes the environment for any child processes
you subsequently fork() off.
d838 2
a839 1
The hash %SIG contains signal handlers for signals.  For example:
d851 1
a851 1
    $SIG{'INT'}  = 'DEFAULT';	# restore default action
d858 2
a859 1
Here are some other examples:
d861 1
a863 1
    $SIG{"PIPE"} = *Plumber;    # somewhat esoteric
d866 4
a869 2
Be sure not to use a bareword as the name of a signal handler,
lest you inadvertently call it. 
d874 1
a874 1
installed.  This means that system calls for which restarting is supported
d905 10
a914 14
Due to an implementation glitch, the C<$SIG{__DIE__}> hook is called
even inside an eval().  Do not use this to rewrite a pending exception
in C<$@@>, or as a bizarre substitute for overriding CORE::GLOBAL::die().
This strange action at a distance may be fixed in a future release
so that C<$SIG{__DIE__}> is only called if your program is about
to exit, as was the original intent.  Any other use is deprecated.

C<__DIE__>/C<__WARN__> handlers are very special in one respect:
they may be called to report (probable) errors found by the parser.
In such a case the parser may be in inconsistent state, so any
attempt to evaluate Perl code from such a handler will probably
result in a segfault.  This means that warnings or errors that
result from parsing Perl should be used with extreme caution, like
this:
d926 2
a927 2
See L<perlfunc/die>, L<perlfunc/warn>, L<perlfunc/eval>, and
L<warnings> for additional information.
d933 6
a938 7
The variables C<$@@>, C<$!>, C<$^E>, and C<$?> contain information
about different types of error conditions that may appear during
execution of a Perl program.  The variables are shown ordered by
the "distance" between the subsystem which reported the error and
the Perl process.  They correspond to errors detected by the Perl
interpreter, C library, operating system, or an external program,
respectively.
d941 1
a941 1
following Perl expression, which uses a single-quoted string:
d943 5
a947 5
    eval q{
	open PIPE, "/cdrom/install |";
	@@res = <PIPE>;
	close PIPE or die "bad pipe: $?, $!";
    };
d951 27
a977 16
C<$@@> is set if the string to be C<eval>-ed did not compile (this
may happen if C<open> or C<close> were imported with bad prototypes),
or if Perl code executed during evaluation die()d .  In these cases
the value of $@@ is the compile error, or the argument to C<die>
(which will interpolate C<$!> and C<$?>!).  (See also L<Fatal>,
though.)

When the eval() expression above is executed, open(), C<< <PIPE> >>,
and C<close> are translated to calls in the C run-time library and
thence to the operating system kernel.  C<$!> is set to the C library's
C<errno> if one of these calls fails. 

Under a few operating systems, C<$^E> may contain a more verbose
error indicator, such as in this case, "CDROM tray not closed."
Systems that do not support extended error messages leave C<$^E>
the same as C<$!>.
d979 2
a980 9
Finally, C<$?> may be set to non-0 value if the external program
F</cdrom/install> fails.  The upper eight bits reflect specific
error conditions encountered by the program (the program's exit()
value).   The lower eight bits reflect mode of failure, like signal
death and core dump information  See wait(2) for details.  In
contrast to C<$!> and C<$^E>, which are set only if error condition
is detected, the variable C<$?> is set on each C<wait> or pipe
C<close>, overwriting the old value.  This is more like C<$@@>, which
on every eval() is always set on failure and cleared on success.
a981 2
For more details, see the individual descriptions at C<$@@>, C<$!>, C<$^E>,
and C<$?>.
d985 6
a990 6
Variable names in Perl can have several formats.  Usually, they
must begin with a letter or underscore, in which case they can be
arbitrarily long (up to an internal limit of 251 characters) and
may contain letters, digits, underscores, or the special sequence
C<::> or C<'>.  In this case, the part before the last C<::> or
C<'> is taken to be a I<package qualifier>; see L<perlmod>.
d994 7
a1000 19
special uses by Perl; for example, the all-digits names are used
to hold data captured by backreferences after a regular expression
match.  Perl has a special syntax for the single-control-character
names: It understands C<^X> (caret C<X>) to mean the control-C<X>
character.  For example, the notation C<$^W> (dollar-sign caret
C<W>) is the scalar variable whose name is the single character
control-C<W>.  This is better than typing a literal control-C<W>
into your program.

Finally, new in Perl 5.6, Perl variable names may be alphanumeric
strings that begin with control characters (or better yet, a caret).
These variables must be written in the form C<${^Foo}>; the braces
are not optional.  C<${^Foo}> denotes the scalar variable whose
name is a control-C<F> followed by two C<o>'s.  These variables are
reserved for future special uses by Perl, except for the ones that
begin with C<^_> (control-underscore or caret-underscore).  No
control-character name that begins with C<^_> will acquire a special
meaning in any future version of Perl; such names may therefore be
used safely in programs.  C<$^_> itself, however, I<is> reserved.
d1002 1
a1002 1
Perl identifiers that begin with digits, control characters, or
a1012 19
In particular, the new special C<${^_XYZ}> variables are always taken
to be in package C<main>, regardless of any C<package> declarations
presently in scope.

=head1 BUGS

Due to an unfortunate accident of Perl's implementation, C<use
English> imposes a considerable performance penalty on all regular
expression matches in a program, regardless of whether they occur
in the scope of C<use English>.  For that reason, saying C<use
English> in libraries is strongly discouraged.  See the
Devel::SawAmpersand module documentation from CPAN
(http://www.perl.com/CPAN/modules/by-module/Devel/)
for more information.

Having to even think about the C<$^S> variable in your exception
handlers is simply wrong.  C<$SIG{__DIE__}> as currently implemented
invites grievous and difficult to track down errors.  Avoid it
and use an C<END{}> or CORE::GLOBAL::die override instead.
@


1.1.1.4
log
@stock perl 5.6.1
@
text
@a176 2
=item @@LAST_MATCH_END

d194 7
a200 8
Set to a non-zero integer value to do multi-line matching within a
string, 0 (or undefined) to tell Perl that it can assume that strings
contain a single line, for the purpose of optimizing pattern matches.
Pattern matches on strings containing multiple newlines can produce
confusing results when C<$*> is 0 or undefined. Default is undefined.
(Mnemonic: * matches multiple things.) This variable influences the
interpretation of only C<^> and C<$>. A literal newline can be searched
for even when C<$* == 0>.
a204 4
Assigning a non-numerical value to C<$*> triggers a warning (and makes
C<$*> act if C<$* == 0>), while assigning a numerical value to C<$*>
makes that an implicit C<int> is applied on the value.

a414 2
=item @@LAST_MATCH_START

d442 1
a442 1
=item C<$`> is the same as C<substr($var, 0, $-[0])>
d444 1
a444 1
=item C<$&> is the same as C<substr($var, $-[0], $+[0] - $-[0])>
d446 1
a446 1
=item C<$'> is the same as C<substr($var, $+[0])>
d452 1
a452 1
=item C<$3> is the same as C<substr $var, $-[3], $+[3] - $-[3])>
a689 5
Note for BSD users: setting C<$0> does not completely remove "perl"
from the ps(1) output.  For example, setting C<$0> to C<"foobar"> will
result in C<"perl: foobar (perl)">.  This is an operating system
feature.

d817 1
a817 1
would allocate a 64K buffer for use in an emergency.  See the
d820 1
a820 1
feature, there is no L<English|English> long name for this variable.
d923 1
a923 1
    warn "No \"our\" declarations!\n" if $^V and $^V lt v5.6.0;
@


1.1.1.5
log
@stock perl 5.8.0 from CPAN
@
text
@d16 8
a23 14
at the top of your program. This aliases all the short names to the long
names in the current package. Some even have medium names, generally
borrowed from B<awk>. In general, it's best to use the

    use English '-no_match_vars';

invocation if you don't need $PREMATCH, $MATCH, or $POSTMATCH, as it avoids
a certain performance hit with the use of regular expressions. See
L<English>.

Variables that depend on the currently selected filehandle may be set by
calling an appropriate object method on the IO::Handle object, although
this is less efficient than using the regular built-in variables. (Summary
lines below for this contain the word HANDLE.) First you must say
d36 1
a36 1
The methods each take an optional EXPR, which, if supplied, specifies the
a39 1

a46 65
You should be very careful when modifying the default values of most
special variables described in this document. In most cases you want
to localize these variables before changing them, since if you don't,
the change may affect other modules which rely on the default values
of the special variables that you have changed. This is one of the
correct ways to read the whole file at once:

    open my $fh, "foo" or die $!;
    local $/; # enable localized slurp mode
    my $content = <$fh>;
    close $fh;

But the following code is quite bad:

    open my $fh, "foo" or die $!;
    undef $/; # enable slurp mode
    my $content = <$fh>;
    close $fh;

since some other module, may want to read data from some file in the
default "line mode", so if the code we have just presented has been
executed, the global value of C<$/> is now changed for any other code
running inside the same Perl interpreter.

Usually when a variable is localized you want to make sure that this
change affects the shortest scope possible. So unless you are already
inside some short C<{}> block, you should create one yourself. For
example:

    my $content = '';
    open my $fh, "foo" or die $!;
    {
        local $/;
        $content = <$fh>;
    }
    close $fh;

Here is an example of how your own code can go broken:

    for (1..5){
        nasty_break();
        print "$_ ";
    }
    sub nasty_break {
        $_ = 5;
        # do something with $_
    }

You probably expect this code to print:

    1 2 3 4 5

but instead you get:

    5 5 5 5 5

Why? Because nasty_break() modifies C<$_> without localizing it
first. The fix is to add local():

        local $_ = 5;

It's easy to notice the problem in such a short example, but in more
complicated code you are looking for trouble if you don't localize
changes to the special variables.

a113 15
=item $a

=item $b

Special package variables when using sort(), see L<perlfunc/sort>.
Because of this specialness $a and $b don't need to be declared
(using local(), use vars, or our()) even when using the strict
vars pragma.  Don't lexicalize them with C<my $a> or C<my $b>
if you want to be able to use them in the sort() comparison block
or function.

=back

=over 8

d132 1
a132 1
performance penalty on all regular expression matches.  See L</BUGS>.
d144 1
a144 1
performance penalty on all regular expression matches.  See L</BUGS>.
d155 1
a155 1
    local $_ = 'abcdefghi';
d162 1
a162 1
performance penalty on all regular expression matches.  See L</BUGS>.
d168 3
a170 3
The text matched by the last bracket of the last successful search pattern.
This is useful if you don't know which one of a set of alternative patterns
matched. For example:
a176 18
=item $^N

The text matched by the used group most-recently closed (i.e. the group
with the rightmost closing parenthesis) of the last successful search
pattern.  (Mnemonic: the (possibly) Nested parenthesis that most
recently closed.)

This is primarily used inside C<(?{...})> blocks for examining text
recently matched. For example, to effectively capture text to a variable
(in addition to C<$1>, C<$2>, etc.), replace C<(...)> with

     (?:(...)(?{ $var = $^N }))

By setting and then using C<$var> in this way relieves you from having to
worry about exactly which numbered set of parentheses they are.

This variable is dynamically scoped to the current BLOCK.

d212 1
a212 1
=item HANDLE->input_line_number(EXPR)
d220 12
a231 1
Current line number for the last filehandle accessed. 
d233 1
a233 25
Each filehandle in Perl counts the number of lines that have been read
from it.  (Depending on the value of C<$/>, Perl's idea of what
constitutes a line may not match yours.)  When a line is read from a
filehandle (via readline() or C<< <> >>), or when tell() or seek() is
called on it, C<$.> becomes an alias to the line counter for that
filehandle.

You can adjust the counter by assigning to C<$.>, but this will not
actually move the seek pointer.  I<Localizing C<$.> will not localize
the filehandle's line count>.  Instead, it will localize perl's notion
of which filehandle C<$.> is currently aliased to.

C<$.> is reset when the filehandle is closed, but B<not> when an open
filehandle is reopened without an intervening close().  For more
details, see L<perlop/"IE<sol>O Operators">.  Because C<< <> >> never does
an explicit close, line numbers increase across ARGV files (but see
examples in L<perlfunc/eof>).

You can also use C<< HANDLE->input_line_number(EXPR) >> to access the
line counter for a given filehandle without having to worry about
which handle you last accessed.

(Mnemonic: many programs use "." to mean the current line number.)

=item IO::Handle->input_record_separator(EXPR)
d255 2
a256 2
    local $/;           # enable "slurp" mode
    local $_ = <FH>;    # whole file now here
d267 3
a269 3
    local $/ = \32768; # or \"32768", or \$var_containing_32768
    open my $fh, $myfile or die $!;
    local $_ = <$fh>;
d286 1
a286 1
=item HANDLE->autoflush(EXPR)
d304 1
a304 1
=item IO::Handle->output_field_separator EXPR
d319 1
a319 1
=item IO::Handle->output_record_separator EXPR
d390 1
a390 1
=item HANDLE->format_page_number(EXPR)
d400 1
a400 1
=item HANDLE->format_lines_per_page(EXPR)
d411 1
a411 1
=item HANDLE->format_lines_left(EXPR)
d442 4
a445 2
of the I<n>th submatch, so C<$-[1]> is the offset where $1
begins, C<$-[2]> the offset where $2 begins, and so on.
d465 1
a465 1
=item HANDLE->format_name(EXPR)
d475 1
a475 1
=item HANDLE->format_top_name(EXPR)
d485 1
a485 1
=item IO::Handle->format_line_break_characters EXPR
d496 1
a496 1
=item IO::Handle->format_formfeed EXPR
d544 1
a544 1
status; see L<perlvms/$?> for details.
a547 8
=item ${^ENCODING}

The I<object reference> to the Encode object that is used to convert
the source code to Unicode.  Thanks to this variable your perl script
does not have to be written in UTF-8.  Default is I<undef>.  The direct
manipulation of this variable is highly discouraged.  See L<encoding>
for more details.

d555 3
a557 19
variable, or in other words, if a system or library call fails, it
sets this variable.  This means that the value of C<$!> is meaningful
only I<immediately> after a B<failure>:

    if (open(FH, $filename)) {
	# Here $! is meaningless.
	...
    } else {
	# ONLY here is $! meaningful.
	...
	# Already here $! might be meaningless.
    }
    # Since here we might have either success or failure,
    # here $! is meaningless.

In the above I<meaningless> stands for anything: zero, non-zero,
C<undef>.  A successful system or library call does B<not> set
the variable to zero.

a565 12
=item %!

Each element of C<%!> has a true value only if C<$!> is set to that
value.  For example, C<$!{ENOENT}> is true if and only if the current
value of C<$!> is C<ENOENT>; that is, if the most recent error was
"No such file or directory" (or its moral equivalent: not all operating
systems give that exact error, and certainly not all languages).
To check if a particular key is meaningful on your system, use
C<exists $!{the_key}>; for a list of legal keys, use C<keys %!>.
See L<Errno> for more information, and also see above for the
validity of C<$!>.

d599 4
a602 4
The Perl syntax error message from the last eval() operator.
If $@@ is the null string, the last eval() parsed and executed
correctly (although the operations you invoked may have failed in the
normal fashion).  (Mnemonic: Where was the syntax error "at"?)
d627 1
a627 2
if you're running setuid.)  You can change both the real uid and
the effective uid at the same time by using POSIX::setuid().
a639 3
You can change both the effective uid and the real uid at the same
time by using POSIX::setuid().

a659 3
You can change both the real gid and the effective gid at the same
time by using POSIX::setgid().

a681 3
You can change both the effective gid and the real gid at the same
time by using POSIX::setgid() (use only a single numeric argument).

d728 4
a731 3
The floating point representation can sometimes lead to inaccurate
numeric comparisons.  See C<$^V> for a more modern representation of
the Perl version that allows accurate string comparisons.
a844 12
In Windows platforms, $^O is not very helpful: since it is always
C<MSWin32>, it doesn't tell the difference between
95/98/ME/NT/2000/XP/CE/.NET.  Use Win32::GetOSName() or
Win32::GetOSVersion() (see L<Win32> and L<perlport>) to distinguish
between the variants.

=item ${^OPEN}

An internal variable used by PerlIO.  A string in two parts, separated
by a C<\0> byte, the first part describes the input layers, the second
part describes the output layers.

a922 5
=item ${^TAINT}

Reflects if taint mode is on or off (i.e. if the program was run with
B<-T> or not).  True for on, false for off.

a938 5
To convert C<$^V> into its string representation use sprintf()'s
C<"%vd"> conversion:

    printf "version is v%vd\n", $^V;  # Perl's version

d976 2
a977 57
The name used to execute the current copy of Perl, from C's
C<argv[0]>.

Depending on the host operating system, the value of $^X may be
a relative or absolute pathname of the perl program file, or may
be the string used to invoke perl but not the pathname of the
perl program file.  Also, most operating systems permit invoking
programs that are not in the PATH environment variable, so there
is no guarantee that the value of $^X is in PATH.  For VMS, the
value may or may not include a version number.

You usually can use the value of $^X to re-invoke an independent
copy of the same perl that is currently running, e.g.,

  @@first_run = `$^X -le "print int rand 100 for 1..100"`;

But recall that not all operating systems support forking or
capturing of the output of commands, so this complex statement
may not be portable.

It is not safe to use the value of $^X as a path name of a file,
as some operating systems that have a mandatory suffix on
executable files do not require use of the suffix when invoking
a command.  To convert the value of $^X to a path name, use the
following statements:

# Build up a set of file names (not command names).
  use Config;
  $this_perl = $^X;
  if ($^O ne 'VMS')
     {$this_perl .= $Config{_exe}
          unless $this_perl =~ m/$Config{_exe}$/i;}

Because many operating systems permit anyone with read access to
the Perl program file to make a copy of it, patch the copy, and
then execute the copy, the security-conscious Perl programmer
should take care to invoke the installed copy of perl, not the
copy referenced by $^X.  The following statements accomplish
this goal, and produce a pathname that can be invoked as a
command or referenced as a file.

  use Config;
  $secure_perl_path = $Config{perlpath};
  if ($^O ne 'VMS')
     {$secure_perl_path .= $Config{_exe}
          unless $secure_perl_path =~ m/$Config{_exe}$/i;}

=item ARGV

The special filehandle that iterates over command-line filenames in
C<@@ARGV>. Usually written as the null filehandle in the angle operator
C<< <> >>. Note that currently C<ARGV> only has its magical effect
within the C<< <> >> operator; elsewhere it is just a plain filehandle
corresponding to the last file opened by C<< <> >>. In particular,
passing C<\*ARGV> as a parameter to a function that expects a filehandle
may not cause your function to automatically read the contents of all the
files in C<@@ARGV>.
a989 14
=item ARGVOUT

The special filehandle that points to the currently open output file
when doing edit-in-place processing with B<-i>.  Useful when you have
to do a lot of inserting and don't want to keep modifying $_.  See
L<perlrun> for the B<-i> switch.

=item @@F

The array @@F contains the fields of each line read in when autosplit
mode is turned on.  See L<perlrun> for the B<-a> switch.  This array
is package-specific, and must be declared or given a full package name
if not in package main when running under C<strict 'vars'>.

d997 1
a997 2
directory.  ("." will not be appended if taint checks are enabled, either by
C<-T> or by C<-t>.)  If you need to modify this at runtime, you should use
a1003 4
You can also insert hooks into the file inclusion system by putting Perl
code directly into @@INC.  Those hooks may be subroutine references, array
references or blessed objects.  See L<perlfunc/require> for details.

a1017 6
If the file was loaded via a hook (e.g. a subroutine reference, see
L<perlfunc/require> for a description of these hooks), this hook is
by default inserted into %INC in place of a filename.  Note, however,
that the hook may have set the %INC entry by itself to provide some more
specific info.

d1137 3
a1139 3
	open my $pipe, "/cdrom/install |" or die $!;
	my @@res = <$pipe>;
	close $pipe or die "bad pipe: $?, $!";
d1228 1
a1228 1
( http://www.cpan.org/modules/by-module/Devel/ )
@


1.1.1.6
log
@perl 5.8.2 from CPAN
@
text
@d192 4
a195 3
(using use vars, or our()) even when using the C<strict 'vars'> pragma.
Don't lexicalize them with C<my $a> or C<my $b> if you want to be
able to use them in the sort() comparison block or function.
d297 2
d494 2
d698 1
a698 1
If used as a string, yields the corresponding system error string.
a771 6
Note for Linux users: on Linux, the C functions C<getpid()> and
C<getppid()> return different values from different threads. In order to
be portable, this behavior is not reflected by C<$$>, whose value remains
consistent across threads. If you want to call the underlying C<getpid()>,
you may use the CPAN module C<Linux::Pid>.

d855 5
a859 18
Contains the name of the program being executed.

On some (read: not all) operating systems assigning to C<$0> modifies
the argument area that the C<ps> program sees.  On some platforms you
may have to use special C<ps> options or a different C<ps> to see the
changes.  Modifying the $0 is more useful as a way of indicating the
current program state than it is for hiding the program you're
running.  (Mnemonic: same as B<sh> and B<ksh>.)

Note that there are platform specific limitations on the the maximum
length of C<$0>.  In the most extreme case it may be limited to the
space occupied by the original C<$0>.

In some platforms there may be arbitrary amount of padding, for
example space characters, after the modified name as shown by C<ps>.
In some platforms this padding may extend all the way to the original
length of the argument area, no matter what you do (this is the case
for example with Linux 2.2).
d862 3
a864 10
from the ps(1) output.  For example, setting C<$0> to C<"foobar"> may
result in C<"perl: foobar (perl)"> (whether both the C<"perl: "> prefix
and the " (perl)" suffix are shown depends on your exact BSD variant
and version).  This is an operating system feature, Perl cannot help it.

In multithreaded scripts Perl coordinates the threads so that any
thread may modify its copy of the C<$0> and the change becomes visible
to ps(1) (assuming the operating system plays along).  Note that the
the view of C<$0> the other threads have will not change since they
have their own copies of it.
a875 1
(That's why you can only assign compile-time constants to it.)
a877 5
Note that, unlike other compile-time directives (such as L<strict>),
assignment to $[ can be seen from outer lexical scopes in the same file.
However, you can use local() on it to strictly bound its value to a
lexical block.

a889 5
When testing the variable, to steer clear of floating point
inaccuracies you might want to prefer the inequality tests C<< < >>
and C<< > >> to the tests containing equivalence: C<< <= >>, C<< == >>,
and C<< >= >>.

d909 1
a909 2
switch.) May be read or set. Like its command-line equivalent, you can use
numeric or symbolic values, eg C<$^D = 10> or C<$^D = "st">.
a1067 4
=item 0x400

Debug assertion subroutines enter/exit.

d1084 3
a1086 9
Current state of the interpreter.

    $^S         State
    ---------   -------------------
    undef       Parsing module/eval
    true (1)    Executing an eval
    false (0)   Otherwise

The first state may happen in $SIG{__DIE__} and $SIG{__WARN__} handlers.
d1098 2
a1099 10
Reflects if taint mode is on or off.  1 for on (the program was run with
B<-T>), 0 for off, -1 when only taint warnings are enabled (i.e. with
B<-t> or B<-TU>).

=item ${^UNICODE}

Reflects certain Unicode settings of Perl.  See L<perlrun>
documentation for the C<-C> switch for more information about
the possible values. This variable is set during Perl startup
and is thereafter read-only.
d1140 15
d1323 12
a1334 1
installed using it.  This means you get reliable signal handling.
d1336 1
a1336 3
The default delivery policy of signals changed in Perl 5.8.0 from 
immediate (also known as "unsafe") to deferred, also known as 
"safe signals".  See L<perlipc> for more information.
d1470 2
a1471 3
declaration and are always forced to be in package C<main>; they are
also exempt from C<strict 'vars'> errors.  A few other names are also
exempt in these ways:
d1476 1
a1476 1
	ARGVOUT		_
d1481 1
a1481 1
presently in scope.  
@


1.1.1.7
log
@Import of stock perl 5.8.5
@
text
@d865 1
a865 1
Note that there are platform specific limitations on the maximum
@


1.1.1.8
log
@perl 5.8.6 from CPAN
@
text
@d781 1
a781 3
the effective uid at the same time by using POSIX::setuid().  Since
changes to $< require a system call, check $! after a change attempt to 
detect any possible errors.
d795 1
a795 2
time by using POSIX::setuid().  Changes to $> require a check to $!
to detect any possible errors after an attempted change. 
d818 1
a818 2
time by using POSIX::setgid().  Changes to $( require a check to $!
to detect any possible errors after an attempted change.
a843 2
Changes to $) require a check to $! to detect any possible errors
after an attempted change.
d865 1
a865 1
Note that there are platform specific limitations on the the maximum
@


1.1.1.9
log
@perl 5.8.8 import
@
text
@d427 6
a432 3
The output field separator for the print operator.  If defined, this
value is printed between each of print's arguments.  Default is C<undef>.
(Mnemonic: what is printed when there is a "," in your print statement.)
d442 8
a449 4
The output record separator for the print operator.  If defined, this
value is printed after the last of print's arguments.  Default is C<undef>.
(Mnemonic: you set C<$\> instead of adding "\n" at the end of the print.
Also, it's just like C<$/>, but it's what you get "back" from Perl.)
d544 3
a546 3
$+[0] - $-[0]>.  Similarly, $I<n> coincides with C<substr $_, $-[n],
$+[n] - $-[n]> if C<$-[n]> is defined, and $+ coincides with
C<substr $_, $-[$#-], $+[$#-] - $-[$#-]>.  One can use C<$#-> to find the last
d572 1
a572 1
=item C<$3> is the same as C<substr($var, $-[3], $+[3] - $-[3])>
d871 1
a871 1
Note that there are platform specific limitations on the maximum
d889 1
a889 1
to ps(1) (assuming the operating system plays along).  Note that
d907 2
a908 2
assignment to C<$[> can be seen from outer lexical scopes in the same file.
However, you can use local() on it to strictly bind its value to a
d1026 1
a1026 1
were compiled with C<-DPERL_EMERGENCY_SBRK> and used Perl's malloc.
d1033 2
a1034 3
add custom C compilation flags when compiling perl.  To discourage casual
use of this advanced feature, there is no L<English|English> long name for
this variable.
a1157 7
=item ${^UTF8LOCALE}

This variable indicates whether an UTF-8 locale was detected by perl at
startup. This information is used by perl when it's in
adjust-utf8ness-to-locale mode (as when run with the C<-CL> command-line
switch); see L<perlrun> for more info on this.

d1202 1
a1202 1
C<argv[0]> or (where supported) F</proc/self/exe>.
d1227 1
a1227 1
  # Build up a set of file names (not command names).
d1444 1
a1444 1
(which will interpolate C<$!> and C<$?>).  (See also L<Fatal>,
@


1.1.1.10
log
@import perl 5.10.0 from CPAN
@
text
@a126 1
X<$_> X<$ARG>
a179 5
As C<$_> is a global variable, this may lead in some cases to unwanted
side-effects.  As of perl 5.9.1, you can now use a lexical version of
C<$_> by declaring it in a file or in a block with C<my>.  Moreover,
declaring C<our $_> restores the global C<$_> in the current scope.

a188 1
X<$a> X<$b>
a200 1
X<$1> X<$2> X<$3>
a210 1
X<$&> X<$MATCH>
a219 10
See L</@@-> for a replacement.

=item ${^MATCH}
X<${^MATCH}>

This is similar to C<$&> (C<$POSTMATCH>) except that it does not incur the
performance penalty associated with that variable, and is only guaranteed
to return a defined value when the pattern was compiled or executed with
the C</p> modifier.

a222 1
X<$`> X<$PREMATCH>
a231 10
See L</@@-> for a replacement.

=item ${^PREMATCH}
X<${^PREMATCH}>

This is similar to C<$`> ($PREMATCH) except that it does not incur the
performance penalty associated with that variable, and is only guaranteed
to return a defined value when the pattern was compiled or executed with
the C</p> modifier.

a234 1
X<$'> X<$POSTMATCH>
a249 10
See L</@@-> for a replacement.

=item ${^POSTMATCH}
X<${^POSTMATCH}>

This is similar to C<$'> (C<$POSTMATCH>) except that it does not incur the
performance penalty associated with that variable, and is only guaranteed
to return a defined value when the pattern was compiled or executed with
the C</p> modifier.

a252 1
X<$+> X<$LAST_PAREN_MATCH>
a262 2
=item $LAST_SUBMATCH_RESULT

a263 1
X<$^N>
a283 1
X<@@+> X<@@LAST_MATCH_END>
d296 1
a296 6
=item %+
X<%+>

Similar to C<@@+>, the C<%+> hash allows access to the named capture
buffers, should they exist, in the last successful match in the
currently active dynamic scope.
d298 15
a312 15
For example, C<$+{foo}> is equivalent to C<$1> after the following match:

  'foo' =~ /(?<foo>foo)/;

The keys of the C<%+> hash list only the names of buffers that have
captured (and that are thus associated to defined values).

The underlying behaviour of C<%+> is provided by the
L<Tie::Hash::NamedCapture> module.

B<Note:> C<%-> and C<%+> are tied views into a common internal hash
associated with the last successful regular expression. Therefore mixing
iterative access to them via C<each> may have unpredictable results.
Likewise, if the last successful match changes, then the results may be
surprising.
a320 1
X<$.> X<$NR> X<$INPUT_LINE_NUMBER> X<line number>
d322 1
a322 1
Current line number for the last filehandle accessed.
a354 1
X<$/> X<$RS> X<$INPUT_RECORD_SEPARATOR>
d390 1
a390 2
set, you'll get the record back in pieces.  Trying to set the record
size to zero or less will cause reading in the (rest of the) whole file.
a405 1
X<$|> X<autoflush> X<flush> X<$OUTPUT_AUTOFLUSH>
a425 1
X<$,> X<$OFS> X<$OUTPUT_FIELD_SEPARATOR>
a437 1
X<$\> X<$ORS> X<$OUTPUT_RECORD_SEPARATOR>
a446 1
X<$"> X<$LIST_SEPARATOR>
a456 1
X<$;> X<$SUBSEP> X<SUBSCRIPT_SEPARATOR>
d484 12
a500 1
X<$%> X<$FORMAT_PAGE_NUMBER>
a510 1
X<$=> X<$FORMAT_LINES_PER_PAGE>
a521 1
X<$-> X<$FORMAT_LINES_LEFT>
a530 1
X<@@-> X<@@LAST_MATCH_START>
a568 42
=item %-
X<%->

Similar to C<%+>, this variable allows access to the named capture buffers
in the last successful match in the currently active dynamic scope. To
each capture buffer name found in the regular expression, it associates a
reference to an array containing the list of values captured by all
buffers with that name (should there be several of them), in the order
where they appear.

Here's an example:

    if ('1234' =~ /(?<A>1)(?<B>2)(?<A>3)(?<B>4)/) {
        foreach my $bufname (sort keys %-) {
            my $ary = $-{$bufname};
            foreach my $idx (0..$#$ary) {
                print "\$-{$bufname}[$idx] : ",
                      (defined($ary->[$idx]) ? "'$ary->[$idx]'" : "undef"),
                      "\n";
            }
        }
    }

would print out:

    $-{A}[0] : '1'
    $-{A}[1] : '3'
    $-{B}[0] : '2'
    $-{B}[1] : '4'

The keys of the C<%-> hash correspond to all buffer names found in
the regular expression.

The behaviour of C<%-> is implemented via the
L<Tie::Hash::NamedCapture> module.

B<Note:> C<%-> and C<%+> are tied views into a common internal hash
associated with the last successful regular expression. Therefore mixing
iterative access to them via C<each> may have unpredictable results.
Likewise, if the last successful match changes, then the results may be
surprising.

a573 1
X<$~> X<$FORMAT_NAME>
a583 1
X<$^> X<$FORMAT_TOP_NAME>
a593 1
X<$:> X<FORMAT_LINE_BREAK_CHARACTERS>
a604 1
X<$^L> X<$FORMAT_FORMFEED>
a610 1
X<$^A> X<$ACCUMULATOR>
a621 1
X<$?> X<$CHILD_ERROR>
d626 1
a626 1
traditional Unix wait() system call (or else is made up to look like it).  Thus, the
a651 12
=item ${^CHILD_ERROR_NATIVE}
X<$^CHILD_ERROR_NATIVE>

The native status returned by the last pipe close, backtick (C<``>)
command, successful call to wait() or waitpid(), or from the system()
operator.  On POSIX-like systems this value can be decoded with the
WIFEXITED, WEXITSTATUS, WIFSIGNALED, WTERMSIG, WIFSTOPPED, WSTOPSIG
and WIFCONTINUED functions provided by the L<POSIX> module.

Under VMS this reflects the actual VMS exit status; i.e. it is the same
as $? when the pragma C<use vmsish 'status'> is in effect.

a652 1
X<$^ENCODING>
d657 2
a658 1
manipulation of this variable is highly discouraged.
a664 1
X<$!> X<$ERRNO> X<$OS_ERROR>
a693 4
=item %OS_ERROR

=item %ERRNO

a694 1
X<%!>
a708 1
X<$^E> X<$EXTENDED_OS_ERROR>
a737 1
X<$@@> X<$EVAL_ERROR>
a754 1
X<$$> X<$PID> X<$PROCESS_ID>
a770 1
X<< $< >> X<$UID> X<$REAL_USER_ID>
a782 1
X<< $> >> X<$EUID> X<$EFFECTIVE_USER_ID>
a801 1
X<$(> X<$GID> X<$REAL_GROUP_ID>
d811 1
a811 3
back to C<$(> without being forced numeric, such as by adding zero. Note
that this is different to the effective gid (C<$)>) which does take a
list.
a824 1
X<$)> X<$EGID> X<$EFFECTIVE_GROUP_ID>
a853 1
X<$0> X<$PROGRAM_NAME>
a886 1
X<$[>
a904 1
X<$]>
d916 5
a927 1
X<$^C> X<$COMPILING>
d932 1
a932 1
time rather than normal, deferred loading.  Setting
a937 1
X<$^D> X<$DEBUGGING>
a942 15
=item ${^RE_DEBUG_FLAGS}

The current value of the regex debugging flags. Set to 0 for no debug output
even when the re 'debug' module is loaded. See L<re> for details.

=item ${^RE_TRIE_MAXBUF}

Controls how certain regex optimisations are applied and how much memory they
utilize. This value by default is 65536 which corresponds to a 512kB temporary
cache. Set this to a higher value to trade memory for speed when matching
large alternations. Set it to a lower value if you want the optimisations to
be as conservative of memory as possible but still occur, and set it to a
negative value to prevent the optimisation and conserve the most memory.
Under normal situations this variable should be of no interest to you.

a945 1
X<$^F> X<$SYSTEM_FD_MAX>
d1001 3
d1005 1
a1005 1
useful for implementation of lexically scoped pragmas. See L<perlpragma>.
a1009 1
X<$^I> X<$INPLACE_EDIT>
a1014 1
X<$^M>
a1032 1
X<$^O> X<$OSNAME>
a1053 1
X<$^P> X<$PERLDB>
a1112 1
X<$^R> X<$LAST_REGEXP_CODE_RESULT>
a1119 1
X<$^S> X<$EXCEPTIONS_BEING_CAUGHT>
a1133 1
X<$^T> X<$BASETIME>
d1143 1
a1143 1
B<-t> or B<-TU>).  This variable is read-only.
a1151 6
=item ${^UTF8CACHE}

This variable controls the state of the internal UTF-8 offset caching code.
1 for on (the default), 0 for off, -1 to debug the caching code by checking
all its results against linear scans, and panicking on any discrepancy.

a1161 1
X<$^V> X<$PERL_VERSION>
d1164 4
a1167 4
as a C<version> object.

This variable first appeared in perl 5.6.0; earlier versions of perl will
see an undefined value. Before perl 5.10.0 $^V was represented as a v-string.
d1169 1
a1169 1
$^V can be used to determine whether the Perl interpreter executing a
d1173 1
a1173 1
    warn "Hashes not randomized!\n" if !$^V or $^V lt v5.8.1
a1187 1
X<$^W> X<$WARNING>
a1197 13
=item ${^WIN32_SLOPPY_STAT}

If this variable is set to a true value, then stat() on Windows will
not try to open the file. This means that the link count cannot be
determined and file attributes may be out of date if additional
hardlinks to the file exist. On the other hand, not opening the file
is considerably faster, especially for files on network drives.

This variable could be set in the F<sitecustomize.pl> file to
configure the local Perl installation to use "sloppy" stat() by
default.  See L<perlrun> for more information about site
customization.

a1200 1
X<$^X> X<$EXECUTABLE_NAME>
a1249 1
X<ARGV>
a1260 1
X<$ARGV>
a1264 1
X<@@ARGV>
a1271 1
X<ARGVOUT>
a1278 1
X<@@F>
a1285 1
X<@@INC>
a1303 2
=item @@ARG

a1304 1
X<@@_> X<@@ARG>
a1309 1
X<%INC>
a1326 1
X<%ENV>
a1334 1
X<%SIG>
d1336 1
a1336 1
The hash C<%SIG> contains signal handlers for signals.  For example:
d1375 2
a1376 2
argument.  The presence of a C<__WARN__> hook causes the ordinary printing
of warnings to C<STDERR> to be suppressed.  You can use this to save warnings
a1381 5
As the C<'IGNORE'> hook is not supported by C<__WARN__>, you can
disable warnings using the empty subroutine:

    local $SIG{__WARN__} = sub {};

d1384 1
a1384 1
argument.  When a C<__DIE__> hook routine returns, the exception
d1386 1
a1386 1
unless the hook routine itself exits via a C<goto>, a loop exit, or a C<die()>.
d1392 1
a1392 1
in C<$@@>, or as a bizarre substitute for overriding C<CORE::GLOBAL::die()>.
a1420 1
X<error> X<exception>
d1527 1
a1527 2
for more information. Writing C<use English '-no_match_vars';>
avoids the performance penalty.
@


1.1.1.11
log
@import perl 5.10.1
@
text
@d61 1
a61 1
    open my $fh, "<", "foo" or die $!;
d68 1
a68 1
    open my $fh, "<", "foo" or die $!;
d84 1
a84 1
    open my $fh, "<", "foo" or die $!;
d151 3
a153 7
The following functions:

abs, alarm, chomp, chop, chr, chroot, cos, defined, eval, exp, glob,
hex, int, lc, lcfirst, length, log, lstat, mkdir, oct, ord, pos, print,
quotemeta, readlink, readpipe, ref, require, reverse (in scalar context only),
rmdir, sin, split (on its second argument), sqrt, stat, study, uc, ucfirst, 
unlink, unpack.
d157 1
a157 3
All file tests (C<-f>, C<-d>) except for C<-t>, which defaults to STDIN.
See L<perlfunc/-X>

d161 2
a162 2
The pattern matching operations C<m//>, C<s///> and C<tr///> (aka C<y///>)
when used without an C<=~> operator.
a174 4
The implicit variable of given().

=item *

d234 1
a234 1
This is similar to C<$&> (C<$MATCH>) except that it does not incur the
a341 2
=item %LAST_PAREN_MATCH

d436 1
a436 1
    open my $fh, "<", $myfile or die $!;
d472 1
a472 2
for that.  See L<perldoc/select> on how to select the output channel. 
See also L<IO::Handle>. (Mnemonic: when you want your pipes to be piping hot.)
d783 1
a783 1
    if (open my $fh, "<", $filename) {
a1012 3
If the program has been given to perl via the switches C<-e> or C<-E>,
C<$0> will contain the string C<"-e">.

d1209 1
a1209 2
Line-by-line debugging. Causes DB::DB() subroutine to be called for each
statement executed. Also causes saving source code lines (like 0x400).
d1246 1
a1246 1
Save source code lines into C<@@{"_<$filename"}>.
a1251 1
See also L<perldebguts>.
@


1.1.1.12
log
@Perl 5.12.2 from CPAN
@
text
@d217 1
a217 1
=item $<I<digits>> ($1, $2, ...)
d221 1
a221 1
parentheses from the last successful pattern match, not counting patterns
d1040 2
a1041 2
(That's why you can only assign compile-time constants to it.)  Its
use is deprecated, and by default will trigger a warning.
d1193 3
a1195 5
built, as determined during the configuration process. For examples
see L<perlport/PLATFORMS>.

The value is identical to C<$Config{'osname'}>.  See also L<Config>
and the B<-V> command-line switch documented in L<perlrun>.
d1324 1
a1324 1
This variable indicates whether a UTF-8 locale was detected by perl at
a1370 1
X<sitecustomize> X<sitecustomize.pl>
d1380 1
a1380 2
default.  See the documentation for B<-f> in
L<perlrun|perlrun/"Command Switches"> for more information about site
a1619 39

=back

=head2 Names that are no longer special

These variables had special meaning in prior versions of Perl but now
have no effect and will cause warnings if used.  They are included
here for historical reference.

=over 8

=item $#
X<$#>

C<$#> used to be a variable that could be used to format printed numbers.
After a deprecation cycle, its magic was removed in Perl 5.10 and using it
now triggers a warning: C<$# is no longer supported>.

C<$#> is also used as sigil, which, when prepended on the name of an
array, gives the index of the last element in that array.

    my @@array        = ("a", "b", "c");
    my $last_index   = $#array;   # $last_index is 2

    for my $i (0 .. $#array) {
        print "The value of index $i is $array[$i]\n";
    }

Also see L<perldata>.

=item $*
X<$*>

C<$*> used to be a variable that enabled multiline matching.
After a deprecation cycle, its magic was removed in Perl 5.10.
Using it now triggers a warning: C<$* is no longer supported>.
Use the C</s> and C</m> regexp modifiers instead.

Also see L<perlre>.
@


1.1.1.13
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d7 1
a7 1
=head2 The Syntax of Variable Names
d9 68
a76 6
Variable names in Perl can have several formats.  Usually, they
must begin with a letter or underscore, in which case they can be
arbitrarily long (up to an internal limit of 251 characters) and
may contain letters, digits, underscores, or the special sequence
C<::> or C<'>.  In this case, the part before the last C<::> or
C<'> is taken to be a I<package qualifier>; see L<perlmod>.
d78 4
a81 10
Perl variable names may also be a sequence of digits or a single
punctuation or control character.  These names are all reserved for
special uses by Perl; for example, the all-digits names are used
to hold data captured by backreferences after a regular expression
match.  Perl has a special syntax for the single-control-character
names: It understands C<^X> (caret C<X>) to mean the control-C<X>
character.  For example, the notation C<$^W> (dollar-sign caret
C<W>) is the scalar variable whose name is the single character
control-C<W>.  This is better than typing a literal control-C<W>
into your program.
d83 7
a89 10
Since Perl 5.6, Perl variable names may be alphanumeric
strings that begin with control characters (or better yet, a caret).
These variables must be written in the form C<${^Foo}>; the braces
are not optional.  C<${^Foo}> denotes the scalar variable whose
name is a control-C<F> followed by two C<o>'s.  These variables are
reserved for future special uses by Perl, except for the ones that
begin with C<^_> (control-underscore or caret-underscore).  No
control-character name that begins with C<^_> will acquire a special
meaning in any future version of Perl; such names may therefore be
used safely in programs.  C<$^_> itself, however, I<is> reserved.
d91 1
a91 5
Perl identifiers that begin with digits, control characters, or
punctuation characters are exempt from the effects of the C<package>
declaration and are always forced to be in package C<main>; they are
also exempt from C<strict 'vars'> errors.  A few other names are also
exempt in these ways:
d93 8
a100 5
    ENV      STDIN
    INC      STDOUT
    ARGV     STDERR
    ARGVOUT
    SIG
d102 1
a102 3
In particular, the special C<${^_XYZ}> variables are always taken
to be in package C<main>, regardless of any C<package> declarations
presently in scope.
d104 1
a104 1
=head1 SPECIAL VARIABLES
d106 1
a106 3
The following names have special meaning to Perl.  Most punctuation
names have reasonable mnemonics, or analogs in the shells.
Nevertheless, if you wish to use long variable names, you need only say:
d108 1
a108 1
    use English;
d110 2
a111 5
at the top of your program.  This aliases all the short names to the long
names in the current package.  Some even have medium names, generally
borrowed from B<awk>.  To avoid a performance hit, if you don't need the
C<$PREMATCH>, C<$MATCH>, or C<$POSTMATCH> it's best to use the C<English>
module without them:
d113 1
a113 1
    use English '-no_match_vars';
d115 3
a117 6
Before you continue, note the sort order for variables.  In general, we
first list the variables in case-insensitive, almost-lexigraphical
order (ignoring the C<{> or C<^> preceding words, as in C<${^UNICODE}>
or C<$^T>), although C<$_> and C<@@_> move up to the top of the pile.
For variables with the same identifier, we list it in order of scalar,
array, hash, and bareword.
d119 2
a120 1
=head2 General Variables
d132 1
a132 1
    while (<>) {...}    # equivalent only in while!
d144 2
a145 1
Here are the places where Perl will assume C<$_> even if you don't use it:
d151 1
a151 1
The following functions use C<$_> as a default argument:
d153 1
a153 2
abs, alarm, chomp, chop, chr, chroot,
cos, defined, eval, evalbytes, exp, glob,
d156 1
a156 1
rmdir, sin, split (on its second argument), sqrt, stat, study, uc, ucfirst,
d164 1
d177 1
a177 1
The implicit iterator variable in the C<grep()> and C<map()> functions.
d181 1
a181 1
The implicit variable of C<given()>.
d192 1
a192 1
side-effects.  As of perl 5.10, you can now use a lexical version of
d196 1
a196 1
Mnemonic: underline is understood in certain operations.
d198 1
a198 1
=item @@ARG
d200 1
a200 2
=item @@_
X<@@_> X<@@ARG>
d202 1
a202 3
Within a subroutine the array C<@@_> contains the parameters passed to
that subroutine.  Inside a subroutine, C<@@_> is the default array for
the array operators C<push>, C<pop>, C<shift>, and C<unshift>.
d204 2
a205 1
See L<perlsub>.
d207 5
a211 1
=item $LIST_SEPARATOR
d213 1
a213 2
=item $"
X<$"> X<$LIST_SEPARATOR>
d215 1
a215 3
When an array or an array slice is interpolated into a double-quoted
string or a similar context such as C</.../>, its elements are
separated by this value.  Default is a space.  For example, this:
d217 2
a218 1
    print "The array is: @@array\n";
d220 5
a224 1
is equivalent to this:
d226 1
a226 1
    print "The array is: " . join($", @@array) . "\n";
d228 2
a229 1
Mnemonic: works in double-quoted context.
d231 4
a234 1
=item $PROCESS_ID
d236 2
a237 1
=item $PID
d239 1
a239 2
=item $$
X<$$> X<$PID> X<$PROCESS_ID>
d241 2
a242 22
The process number of the Perl running this script.  Though you I<can> set
this variable, doing so is generally discouraged, although it can be
invaluable for some testing purposes.  It will be reset automatically
across C<fork()> calls.

Note for Linux and Debian GNU/kFreeBSD users: Before Perl v5.16.0 perl
would emulate POSIX semantics on Linux systems using LinuxThreads, a
partial implementation of POSIX Threads that has since been superseded
by the Native POSIX Thread Library (NPTL).

LinuxThreads is now obsolete on Linux, and and caching C<getpid()>
like this made embedding perl unnecessarily complex (since you'd have
to manually update the value of $$), so now C<$$> and C<getppid()>
will always return the same values as the underlying C library.

Debian GNU/kFreeBSD systems also used LinuxThreads up until and
including the 6.0 release, but after that moved to FreeBSD thread
semantics, which are POSIX-like.

To see if your system is affected by this discrepancy check if
C<getconf GNU_LIBPTHREAD_VERSION | grep -q NPTL> returns a false
value. NTPL threads preserve the POSIX semantics.
d244 4
a247 1
Mnemonic: same as shells.
d249 1
a249 1
=item $PROGRAM_NAME
d251 2
a252 2
=item $0
X<$0> X<$PROGRAM_NAME>
d254 4
a257 1
Contains the name of the program being executed.
d259 2
a260 6
On some (but not all) operating systems assigning to C<$0> modifies
the argument area that the C<ps> program sees.  On some platforms you
may have to use special C<ps> options or a different C<ps> to see the
changes.  Modifying the C<$0> is more useful as a way of indicating the
current program state than it is for hiding the program you're
running.
d262 1
a262 3
Note that there are platform-specific limitations on the maximum
length of C<$0>.  In the most extreme case it may be limited to the
space occupied by the original C<$0>.
d264 2
a265 5
In some platforms there may be arbitrary amount of padding, for
example space characters, after the modified name as shown by C<ps>.
In some platforms this padding may extend all the way to the original
length of the argument area, no matter what you do (this is the case
for example with Linux 2.2).
d267 4
a270 5
Note for BSD users: setting C<$0> does not completely remove "perl"
from the ps(1) output.  For example, setting C<$0> to C<"foobar"> may
result in C<"perl: foobar (perl)"> (whether both the C<"perl: "> prefix
and the " (perl)" suffix are shown depends on your exact BSD variant
and version).  This is an operating system feature, Perl cannot help it.
d272 1
a272 5
In multithreaded scripts Perl coordinates the threads so that any
thread may modify its copy of the C<$0> and the change becomes visible
to ps(1) (assuming the operating system plays along).  Note that
the view of C<$0> the other threads have will not change since they
have their own copies of it.
d274 2
a275 2
If the program has been given to perl via the switches C<-e> or C<-E>,
C<$0> will contain the string C<"-e">.
d277 4
a280 6
On Linux as of perl 5.14 the legacy process name will be set with
C<prctl(2)>, in addition to altering the POSIX name via C<argv[0]> as
perl has done since version 4.000.  Now system utilities that read the
legacy process name such as ps, top and killall will recognize the
name you set when assigning to C<$0>.  The string you supply will be
cut off at 16 bytes, this is a limitation imposed by Linux.
d282 3
a284 1
Mnemonic: same as B<sh> and B<ksh>.
d286 1
a286 1
=item $REAL_GROUP_ID
d288 2
a289 1
=item $GID
d291 1
a291 2
=item $(
X<$(> X<$GID> X<$REAL_GROUP_ID>
d293 2
a294 5
The real gid of this process.  If you are on a machine that supports
membership in multiple groups simultaneously, gives a space separated
list of groups you are in.  The first number is the one returned by
C<getgid()>, and the subsequent ones by C<getgroups()>, one of which may be
the same as the first number.
d296 4
a299 5
However, a value assigned to C<$(> must be a single number used to
set the real gid.  So the value given by C<$(> should I<not> be assigned
back to C<$(> without being forced numeric, such as by adding zero.  Note
that this is different to the effective gid (C<$)>) which does take a
list.
d301 1
a301 4
You can change both the real gid and the effective gid at the same
time by using C<POSIX::setgid()>.  Changes
to C<$(> require a check to C<$!>
to detect any possible errors after an attempted change.
d303 2
a304 2
Mnemonic: parentheses are used to I<group> things.  The real gid is the
group you I<left>, if you're running setgid.
d306 3
a308 1
=item $EFFECTIVE_GROUP_ID
d310 1
a310 1
=item $EGID
d312 2
a313 2
=item $)
X<$)> X<$EGID> X<$EFFECTIVE_GROUP_ID>
d315 1
a315 5
The effective gid of this process.  If you are on a machine that
supports membership in multiple groups simultaneously, gives a space
separated list of groups you are in.  The first number is the one
returned by C<getegid()>, and the subsequent ones by C<getgroups()>,
one of which may be the same as the first number.
d317 2
a318 6
Similarly, a value assigned to C<$)> must also be a space-separated
list of numbers.  The first number sets the effective gid, and
the rest (if any) are passed to C<setgroups()>.  To get the effect of an
empty list for C<setgroups()>, just repeat the new effective gid; that is,
to force an effective gid of 5 and an effectively empty C<setgroups()>
list, say C< $) = "5 5" >.
d320 4
a323 4
You can change both the effective gid and the real gid at the same
time by using C<POSIX::setgid()> (use only a single numeric argument).
Changes to C<$)> require a check to C<$!> to detect any possible errors
after an attempted change.
d325 3
a327 3
C<< $< >>, C<< $> >>, C<$(> and C<$)> can be set only on
machines that support the corresponding I<set[re][ug]id()> routine.  C<$(>
and C<$)> can be swapped only on machines supporting C<setregid()>.
d329 1
a329 2
Mnemonic: parentheses are used to I<group> things.  The effective gid
is the group that's I<right> for you, if you're running setgid.
d331 2
a332 1
=item $REAL_USER_ID
d334 1
a334 1
=item $UID
d336 1
a336 2
=item $<
X<< $< >> X<$UID> X<$REAL_USER_ID>
d338 2
a339 4
The real uid of this process.  You can change both the real uid and the
effective uid at the same time by using C<POSIX::setuid()>.  Since
changes to C<< $< >> require a system call, check C<$!> after a change
attempt to detect any possible errors.
d341 10
a350 1
Mnemonic: it's the uid you came I<from>, if you're running setuid.
d352 1
a352 1
=item $EFFECTIVE_USER_ID
d354 2
a355 1
=item $EUID
d357 3
a359 2
=item $>
X<< $> >> X<$EUID> X<$EFFECTIVE_USER_ID>
d361 1
a361 1
The effective uid of this process.  For example:
d363 1
a363 2
    $< = $>;            # set real to effective uid
    ($<,$>) = ($>,$<);  # swap real and effective uids
d365 2
a366 3
You can change both the effective uid and the real uid at the same
time by using C<POSIX::setuid()>.  Changes to C<< $> >> require a check
to C<$!> to detect any possible errors after an attempted change.
d368 2
a369 2
C<< $< >> and C<< $> >> can be swapped only on machines
supporting C<setreuid()>.
d371 5
a375 1
Mnemonic: it's the uid you went I<to>, if you're running setuid.
d377 1
a377 1
=item $SUBSCRIPT_SEPARATOR
d379 1
a379 1
=item $SUBSEP
d381 1
a381 2
=item $;
X<$;> X<$SUBSEP> X<SUBSCRIPT_SEPARATOR>
d383 2
a384 2
The subscript separator for multidimensional array emulation.  If you
refer to a hash element as
d386 1
a386 1
    $foo{$a,$b,$c}
d388 6
a393 423
it really means

    $foo{join($;, $a, $b, $c)}

But don't put

    @@foo{$a,$b,$c}	# a slice--note the @@

which means

    ($foo{$a},$foo{$b},$foo{$c})

Default is "\034", the same as SUBSEP in B<awk>.  If your keys contain
binary data there might not be any safe value for C<$;>.

Consider using "real" multidimensional arrays as described
in L<perllol>.

Mnemonic: comma (the syntactic subscript separator) is a semi-semicolon.

=item $a

=item $b
X<$a> X<$b>

Special package variables when using C<sort()>, see L<perlfunc/sort>.
Because of this specialness C<$a> and C<$b> don't need to be declared
(using C<use vars>, or C<our()>) even when using the C<strict 'vars'>
pragma.  Don't lexicalize them with C<my $a> or C<my $b> if you want to
be able to use them in the C<sort()> comparison block or function.

=item %ENV
X<%ENV>

The hash C<%ENV> contains your current environment.  Setting a
value in C<ENV> changes the environment for any child processes
you subsequently C<fork()> off.

=item $SYSTEM_FD_MAX

=item $^F
X<$^F> X<$SYSTEM_FD_MAX>

The maximum system file descriptor, ordinarily 2.  System file
descriptors are passed to C<exec()>ed processes, while higher file
descriptors are not.  Also, during an
C<open()>, system file descriptors are
preserved even if the C<open()> fails (ordinary file descriptors are
closed before the C<open()> is attempted).  The close-on-exec
status of a file descriptor will be decided according to the value of
C<$^F> when the corresponding file, pipe, or socket was opened, not the
time of the C<exec()>.

=item @@F
X<@@F>

The array C<@@F> contains the fields of each line read in when autosplit
mode is turned on.  See L<perlrun> for the B<-a> switch.  This array
is package-specific, and must be declared or given a full package name
if not in package main when running under C<strict 'vars'>.

=item @@INC
X<@@INC>

The array C<@@INC> contains the list of places that the C<do EXPR>,
C<require>, or C<use> constructs look for their library files.  It
initially consists of the arguments to any B<-I> command-line
switches, followed by the default Perl library, probably
F</usr/local/lib/perl>, followed by ".", to represent the current
directory.  ("." will not be appended if taint checks are enabled,
either by C<-T> or by C<-t>.)  If you need to modify this at runtime,
you should use the C<use lib> pragma to get the machine-dependent
library properly loaded also:

    use lib '/mypath/libdir/';
    use SomeMod;

You can also insert hooks into the file inclusion system by putting Perl
code directly into C<@@INC>.  Those hooks may be subroutine references,
array references or blessed objects.  See L<perlfunc/require> for details.

=item %INC
X<%INC>

The hash C<%INC> contains entries for each filename included via the
C<do>, C<require>, or C<use> operators.  The key is the filename
you specified (with module names converted to pathnames), and the
value is the location of the file found.  The C<require>
operator uses this hash to determine whether a particular file has
already been included.

If the file was loaded via a hook (e.g. a subroutine reference, see
L<perlfunc/require> for a description of these hooks), this hook is
by default inserted into C<%INC> in place of a filename.  Note, however,
that the hook may have set the C<%INC> entry by itself to provide some more
specific info.

=item $INPLACE_EDIT

=item $^I
X<$^I> X<$INPLACE_EDIT>

The current value of the inplace-edit extension.  Use C<undef> to disable
inplace editing.

Mnemonic: value of B<-i> switch.

=item $^M
X<$^M>

By default, running out of memory is an untrappable, fatal error.
However, if suitably built, Perl can use the contents of C<$^M>
as an emergency memory pool after C<die()>ing.  Suppose that your Perl
were compiled with C<-DPERL_EMERGENCY_SBRK> and used Perl's malloc.
Then

    $^M = 'a' x (1 << 16);

would allocate a 64K buffer for use in an emergency.  See the
F<INSTALL> file in the Perl distribution for information on how to
add custom C compilation flags when compiling perl.  To discourage casual
use of this advanced feature, there is no L<English|English> long name for
this variable.

This variable was added in Perl 5.004.

=item $OSNAME

=item $^O
X<$^O> X<$OSNAME>

The name of the operating system under which this copy of Perl was
built, as determined during the configuration process.  For examples
see L<perlport/PLATFORMS>.

The value is identical to C<$Config{'osname'}>.  See also L<Config>
and the B<-V> command-line switch documented in L<perlrun>.

In Windows platforms, C<$^O> is not very helpful: since it is always
C<MSWin32>, it doesn't tell the difference between
95/98/ME/NT/2000/XP/CE/.NET.  Use C<Win32::GetOSName()> or
Win32::GetOSVersion() (see L<Win32> and L<perlport>) to distinguish
between the variants.

This variable was added in Perl 5.003.

=item %SIG
X<%SIG>

The hash C<%SIG> contains signal handlers for signals.  For example:

    sub handler {   # 1st argument is signal name
	my($sig) = @@_;
	print "Caught a SIG$sig--shutting down\n";
	close(LOG);
	exit(0);
	}

    $SIG{'INT'}  = \&handler;
    $SIG{'QUIT'} = \&handler;
    ...
    $SIG{'INT'}  = 'DEFAULT';   # restore default action
    $SIG{'QUIT'} = 'IGNORE';    # ignore SIGQUIT

Using a value of C<'IGNORE'> usually has the effect of ignoring the
signal, except for the C<CHLD> signal.  See L<perlipc> for more about
this special case.

Here are some other examples:

    $SIG{"PIPE"} = "Plumber";   # assumes main::Plumber (not
				# recommended)
    $SIG{"PIPE"} = \&Plumber;   # just fine; assume current
				# Plumber
    $SIG{"PIPE"} = *Plumber;    # somewhat esoteric
    $SIG{"PIPE"} = Plumber();   # oops, what did Plumber()
				# return??

Be sure not to use a bareword as the name of a signal handler,
lest you inadvertently call it.

If your system has the C<sigaction()> function then signal handlers
are installed using it.  This means you get reliable signal handling.

The default delivery policy of signals changed in Perl 5.8.0 from
immediate (also known as "unsafe") to deferred, also known as "safe
signals".  See L<perlipc> for more information.

Certain internal hooks can be also set using the C<%SIG> hash.  The
routine indicated by C<$SIG{__WARN__}> is called when a warning
message is about to be printed.  The warning message is passed as the
first argument.  The presence of a C<__WARN__> hook causes the
ordinary printing of warnings to C<STDERR> to be suppressed.  You can
use this to save warnings in a variable, or turn warnings into fatal
errors, like this:

    local $SIG{__WARN__} = sub { die $_[0] };
    eval $proggie;

As the C<'IGNORE'> hook is not supported by C<__WARN__>, you can
disable warnings using the empty subroutine:

    local $SIG{__WARN__} = sub {};

The routine indicated by C<$SIG{__DIE__}> is called when a fatal
exception is about to be thrown.  The error message is passed as the
first argument.  When a C<__DIE__> hook routine returns, the exception
processing continues as it would have in the absence of the hook,
unless the hook routine itself exits via a C<goto &sub>, a loop exit,
or a C<die()>.  The C<__DIE__> handler is explicitly disabled during
the call, so that you can die from a C<__DIE__> handler.  Similarly
for C<__WARN__>.

Due to an implementation glitch, the C<$SIG{__DIE__}> hook is called
even inside an C<eval()>.  Do not use this to rewrite a pending
exception in C<$@@>, or as a bizarre substitute for overriding
C<CORE::GLOBAL::die()>.  This strange action at a distance may be fixed
in a future release so that C<$SIG{__DIE__}> is only called if your
program is about to exit, as was the original intent.  Any other use is
deprecated.

C<__DIE__>/C<__WARN__> handlers are very special in one respect: they
may be called to report (probable) errors found by the parser.  In such
a case the parser may be in inconsistent state, so any attempt to
evaluate Perl code from such a handler will probably result in a
segfault.  This means that warnings or errors that result from parsing
Perl should be used with extreme caution, like this:

    require Carp if defined $^S;
    Carp::confess("Something wrong") if defined &Carp::confess;
    die "Something wrong, but could not load Carp to give "
      . "backtrace...\n\t"
      . "To see backtrace try starting Perl with -MCarp switch";

Here the first line will load C<Carp> I<unless> it is the parser who
called the handler.  The second line will print backtrace and die if
C<Carp> was available.  The third line will be executed only if C<Carp> was
not available.

Having to even think about the C<$^S> variable in your exception
handlers is simply wrong.  C<$SIG{__DIE__}> as currently implemented
invites grievous and difficult to track down errors.  Avoid it
and use an C<END{}> or CORE::GLOBAL::die override instead.

See L<perlfunc/die>, L<perlfunc/warn>, L<perlfunc/eval>, and
L<warnings> for additional information.

=item $BASETIME

=item $^T
X<$^T> X<$BASETIME>

The time at which the program began running, in seconds since the
epoch (beginning of 1970).  The values returned by the B<-M>, B<-A>,
and B<-C> filetests are based on this value.

=item $PERL_VERSION

=item $^V
X<$^V> X<$PERL_VERSION>

The revision, version, and subversion of the Perl interpreter,
represented as a C<version> object.

This variable first appeared in perl 5.6.0; earlier versions of perl
will see an undefined value.  Before perl 5.10.0 C<$^V> was represented
as a v-string.

C<$^V> can be used to determine whether the Perl interpreter executing
a script is in the right range of versions.  For example:

    warn "Hashes not randomized!\n" if !$^V or $^V lt v5.8.1

To convert C<$^V> into its string representation use C<sprintf()>'s
C<"%vd"> conversion:

    printf "version is v%vd\n", $^V;  # Perl's version

See the documentation of C<use VERSION> and C<require VERSION>
for a convenient way to fail if the running Perl interpreter is too old.

See also C<$]> for an older representation of the Perl version.

This variable was added in Perl 5.6.

Mnemonic: use ^V for Version Control.

=item ${^WIN32_SLOPPY_STAT}
X<${^WIN32_SLOPPY_STAT}> X<sitecustomize> X<sitecustomize.pl>

If this variable is set to a true value, then C<stat()> on Windows will
not try to open the file.  This means that the link count cannot be
determined and file attributes may be out of date if additional
hardlinks to the file exist.  On the other hand, not opening the file
is considerably faster, especially for files on network drives.

This variable could be set in the F<sitecustomize.pl> file to
configure the local Perl installation to use "sloppy" C<stat()> by
default.  See the documentation for B<-f> in
L<perlrun|perlrun/"Command Switches"> for more information about site
customization.

This variable was added in Perl 5.10.

=item $EXECUTABLE_NAME

=item $^X
X<$^X> X<$EXECUTABLE_NAME>

The name used to execute the current copy of Perl, from C's
C<argv[0]> or (where supported) F</proc/self/exe>.

Depending on the host operating system, the value of C<$^X> may be
a relative or absolute pathname of the perl program file, or may
be the string used to invoke perl but not the pathname of the
perl program file.  Also, most operating systems permit invoking
programs that are not in the PATH environment variable, so there
is no guarantee that the value of C<$^X> is in PATH.  For VMS, the
value may or may not include a version number.

You usually can use the value of C<$^X> to re-invoke an independent
copy of the same perl that is currently running, e.g.,

    @@first_run = `$^X -le "print int rand 100 for 1..100"`;

But recall that not all operating systems support forking or
capturing of the output of commands, so this complex statement
may not be portable.

It is not safe to use the value of C<$^X> as a path name of a file,
as some operating systems that have a mandatory suffix on
executable files do not require use of the suffix when invoking
a command.  To convert the value of C<$^X> to a path name, use the
following statements:

    # Build up a set of file names (not command names).
    use Config;
    my $this_perl = $^X;
    if ($^O ne 'VMS') {
	$this_perl .= $Config{_exe}
	  unless $this_perl =~ m/$Config{_exe}$/i;
	}

Because many operating systems permit anyone with read access to
the Perl program file to make a copy of it, patch the copy, and
then execute the copy, the security-conscious Perl programmer
should take care to invoke the installed copy of perl, not the
copy referenced by C<$^X>.  The following statements accomplish
this goal, and produce a pathname that can be invoked as a
command or referenced as a file.

    use Config;
    my $secure_perl_path = $Config{perlpath};
    if ($^O ne 'VMS') {
	$secure_perl_path .= $Config{_exe}
	    unless $secure_perl_path =~ m/$Config{_exe}$/i;
	}

=back

=head2 Variables related to regular expressions

Most of the special variables related to regular expressions are side
effects.  Perl sets these variables when it has a successful match, so
you should check the match result before using them.  For instance:

    if( /P(A)TT(ER)N/ ) {
	print "I found $1 and $2\n";
	}

These variables are read-only and dynamically-scoped, unless we note
otherwise.

The dynamic nature of the regular expression variables means that
their value is limited to the block that they are in, as demonstrated
by this bit of code:

    my $outer = 'Wallace and Grommit';
    my $inner = 'Mutt and Jeff';

    my $pattern = qr/(\S+) and (\S+)/;

    sub show_n { print "\$1 is $1; \$2 is $2\n" }

    {
    OUTER:
	show_n() if $outer =~ m/$pattern/;

	INNER: {
	    show_n() if $inner =~ m/$pattern/;
	    }

	show_n();
    }

The output shows that while in the C<OUTER> block, the values of C<$1>
and C<$2> are from the match against C<$outer>.  Inside the C<INNER>
block, the values of C<$1> and C<$2> are from the match against
C<$inner>, but only until the end of the block (i.e. the dynamic
scope).  After the C<INNER> block completes, the values of C<$1> and
C<$2> return to the values for the match against C<$outer> even though
we have not made another match:

    $1 is Wallace; $2 is Grommit
    $1 is Mutt; $2 is Jeff
    $1 is Wallace; $2 is Grommit

Due to an unfortunate accident of Perl's implementation, C<use
English> imposes a considerable performance penalty on all regular
expression matches in a program because it uses the C<$`>, C<$&>, and
C<$'>, regardless of whether they occur in the scope of C<use
English>.  For that reason, saying C<use English> in libraries is
strongly discouraged unless you import it without the match variables:

    use English '-no_match_vars'

The C<Devel::NYTProf> and C<Devel::FindAmpersand>
modules can help you find uses of these
problematic match variables in your code.

Since Perl 5.10, you can use the C</p> match operator flag and the
C<${^PREMATCH}>, C<${^MATCH}>, and C<${^POSTMATCH}> variables instead
so you only suffer the performance penalties.
d395 4
a398 1
=over 8
d400 5
a404 2
=item $<I<digits>> ($1, $2, ...)
X<$1> X<$2> X<$3>
d406 3
a408 3
Contains the subpattern from the corresponding set of capturing
parentheses from the last successful pattern match, not counting patterns
matched in nested blocks that have been exited already.
d410 1
a410 1
These variables are read-only and dynamically-scoped.
d412 1
a412 1
Mnemonic: like \digits.
d414 1
a414 1
=item $MATCH
d416 1
a416 2
=item $&
X<$&> X<$MATCH>
d418 2
a419 3
The string matched by the last successful pattern match (not counting
any matches hidden within a BLOCK or C<eval()> enclosed by the current
BLOCK).
d421 13
a433 5
The use of this variable anywhere in a program imposes a considerable
performance penalty on all regular expression matches.  To avoid this
penalty, you can extract the same substring by using L</@@->.  Starting
with Perl 5.10, you can use the C</p> match flag and the C<${^MATCH}>
variable to do the same thing for particular match operations.
d435 3
a437 1
This variable is read-only and dynamically-scoped.
d439 2
a440 1
Mnemonic: like C<&> in some editors.
d442 4
a445 2
=item ${^MATCH}
X<${^MATCH}>
d447 3
a449 4
This is similar to C<$&> (C<$MATCH>) except that it does not incur the
performance penalty associated with that variable, and is only guaranteed
to return a defined value when the pattern was compiled or executed with
the C</p> modifier.
d451 6
a456 1
This variable was added in Perl 5.10.
d458 6
a463 1
This variable is read-only and dynamically-scoped.
d465 1
a465 1
=item $PREMATCH
d467 1
a467 2
=item $`
X<$`> X<$PREMATCH> X<${^PREMATCH}>
d469 1
a469 3
The string preceding whatever was matched by the last successful
pattern match, not counting any matches hidden within a BLOCK or C<eval>
enclosed by the current BLOCK.
d471 2
a472 6
The use of this variable anywhere in a program imposes a considerable
performance penalty on all regular expression matches.  To avoid this
penalty, you can extract the same substring by using L</@@->.  Starting
with Perl 5.10, you can use the C</p> match flag and the
C<${^PREMATCH}> variable to do the same thing for particular match
operations.
d474 12
a485 1
This variable is read-only and dynamically-scoped.
d487 1
a487 1
Mnemonic: C<`> often precedes a quoted string.
d489 1
a489 2
=item ${^PREMATCH}
X<$`> X<${^PREMATCH}>
d491 1
a491 4
This is similar to C<$`> ($PREMATCH) except that it does not incur the
performance penalty associated with that variable, and is only guaranteed
to return a defined value when the pattern was compiled or executed with
the C</p> modifier.
d493 2
a494 1
This variable was added in Perl 5.10
d496 3
a498 1
This variable is read-only and dynamically-scoped.
d500 1
a500 1
=item $POSTMATCH
d502 1
a502 2
=item $'
X<$'> X<$POSTMATCH> X<${^POSTMATCH}> X<@@->
d504 1
a504 3
The string following whatever was matched by the last successful
pattern match (not counting any matches hidden within a BLOCK or C<eval()>
enclosed by the current BLOCK).  Example:
d506 2
a507 3
    local $_ = 'abcdefghi';
    /def/;
    print "$`:$&:$'\n";  	# prints abc:def:ghi
d509 4
a512 6
The use of this variable anywhere in a program imposes a considerable
performance penalty on all regular expression matches.
To avoid this penalty, you can extract the same substring by
using L</@@->.  Starting with Perl 5.10, you can use the C</p> match flag
and the C<${^POSTMATCH}> variable to do the same thing for particular
match operations.
d514 1
a514 1
This variable is read-only and dynamically-scoped.
d516 2
a517 1
Mnemonic: C<'> often follows a quoted string.
d519 3
a521 2
=item ${^POSTMATCH}
X<${^POSTMATCH}> X<$'> X<$POSTMATCH>
d523 1
a523 4
This is similar to C<$'> (C<$POSTMATCH>) except that it does not incur the
performance penalty associated with that variable, and is only guaranteed
to return a defined value when the pattern was compiled or executed with
the C</p> modifier.
d525 1
a525 1
This variable was added in Perl 5.10.
d527 2
a528 1
This variable is read-only and dynamically-scoped.
d530 2
a531 1
=item $LAST_PAREN_MATCH
d533 1
a533 2
=item $+
X<$+> X<$LAST_PAREN_MATCH>
d535 1
a535 3
The text matched by the last bracket of the last successful search pattern.
This is useful if you don't know which one of a set of alternative patterns
matched.  For example:
d537 1
a537 1
    /Version: (.*)|Revision: (.*)/ && ($rev = $+);
d539 1
a539 1
This variable is read-only and dynamically-scoped.
d541 1
a541 1
Mnemonic: be positive and forward looking.
d543 1
a543 1
=item $LAST_SUBMATCH_RESULT
d545 1
a545 2
=item $^N
X<$^N> X<$LAST_SUBMATCH_RESULT>
d547 5
a551 3
The text matched by the used group most-recently closed (i.e. the group
with the rightmost closing parenthesis) of the last successful search
pattern.
d553 2
a554 3
This is primarily used inside C<(?{...})> blocks for examining text
recently matched.  For example, to effectively capture text to a variable
(in addition to C<$1>, C<$2>, etc.), replace C<(...)> with
d556 1
a556 1
    (?:(...)(?{ $var = $^N }))
d558 1
a558 2
By setting and then using C<$var> in this way relieves you from having to
worry about exactly which numbered set of parentheses they are.
d560 2
a561 1
This variable was added in Perl 5.8.
d563 3
a565 1
Mnemonic: the (possibly) Nested parenthesis that most recently closed.
d567 1
a567 1
=item @@LAST_MATCH_END
d569 1
a569 2
=item @@+
X<@@+> X<@@LAST_MATCH_END>
d571 2
a572 10
This array holds the offsets of the ends of the last successful
submatches in the currently active dynamic scope.  C<$+[0]> is
the offset into the string of the end of the entire match.  This
is the same value as what the C<pos> function returns when called
on the variable that was matched against.  The I<n>th element
of this array holds the offset of the I<n>th submatch, so
C<$+[1]> is the offset past where C<$1> ends, C<$+[2]> the offset
past where C<$2> ends, and so on.  You can use C<$#+> to determine
how many subgroups were in the last successful match.  See the
examples given for the C<@@-> variable.
d574 4
a577 1
This variable was added in Perl 5.6.
d579 1
a579 1
=item %LAST_PAREN_MATCH
d581 1
a581 2
=item %+
X<%+> X<%LAST_PAREN_MATCH>
d583 2
a584 3
Similar to C<@@+>, the C<%+> hash allows access to the named capture
buffers, should they exist, in the last successful match in the
currently active dynamic scope.
d586 4
a589 19
For example, C<$+{foo}> is equivalent to C<$1> after the following match:

    'foo' =~ /(?<foo>foo)/;

The keys of the C<%+> hash list only the names of buffers that have
captured (and that are thus associated to defined values).

The underlying behaviour of C<%+> is provided by the
L<Tie::Hash::NamedCapture> module.

B<Note:> C<%-> and C<%+> are tied views into a common internal hash
associated with the last successful regular expression.  Therefore mixing
iterative access to them via C<each> may have unpredictable results.
Likewise, if the last successful match changes, then the results may be
surprising.

This variable was added in Perl 5.10.

This variable is read-only and dynamically-scoped.
d596 1
a596 1
C<$-[0]> is the offset of the start of the last successful match.
d600 1
a600 1
Thus, after a match against C<$_>, C<$&> coincides with C<substr $_, $-[0],
d603 2
a604 2
C<substr $_, $-[$#-], $+[$#-] - $-[$#-]>.  One can use C<$#-> to find the
last matched subgroup in the last successful match.  Contrast with
d612 2
a613 2
of the I<n>th submatch, so C<$-[1]> is the offset where C<$1>
begins, C<$-[2]> the offset where C<$2> begins, and so on.
d615 1
a615 1
After a match against some variable C<$var>:
d625 1
a625 1
=item C<$1> is the same as C<substr($var, $-[1], $+[1] - $-[1])>
a632 4
This variable was added in Perl 5.6.

=item %LAST_MATCH_START

d634 1
a634 148
X<%-> X<%LAST_MATCH_START>

Similar to C<%+>, this variable allows access to the named capture groups
in the last successful match in the currently active dynamic scope.  To
each capture group name found in the regular expression, it associates a
reference to an array containing the list of values captured by all
buffers with that name (should there be several of them), in the order
where they appear.

Here's an example:

    if ('1234' =~ /(?<A>1)(?<B>2)(?<A>3)(?<B>4)/) {
        foreach my $bufname (sort keys %-) {
            my $ary = $-{$bufname};
            foreach my $idx (0..$#$ary) {
                print "\$-{$bufname}[$idx] : ",
                      (defined($ary->[$idx])
                          ? "'$ary->[$idx]'"
                          : "undef"),
                      "\n";
            }
        }
    }

would print out:

    $-{A}[0] : '1'
    $-{A}[1] : '3'
    $-{B}[0] : '2'
    $-{B}[1] : '4'

The keys of the C<%-> hash correspond to all buffer names found in
the regular expression.

The behaviour of C<%-> is implemented via the
L<Tie::Hash::NamedCapture> module.

B<Note:> C<%-> and C<%+> are tied views into a common internal hash
associated with the last successful regular expression.  Therefore mixing
iterative access to them via C<each> may have unpredictable results.
Likewise, if the last successful match changes, then the results may be
surprising.

This variable was added in Perl 5.10

This variable is read-only and dynamically-scoped.

=item $LAST_REGEXP_CODE_RESULT

=item $^R
X<$^R> X<$LAST_REGEXP_CODE_RESULT>

The result of evaluation of the last successful C<(?{ code })>
regular expression assertion (see L<perlre>).  May be written to.

This variable was added in Perl 5.005.

=item ${^RE_DEBUG_FLAGS}
X<${^RE_DEBUG_FLAGS}>

The current value of the regex debugging flags.  Set to 0 for no debug output
even when the C<re 'debug'> module is loaded.  See L<re> for details.

This variable was added in Perl 5.10.

=item ${^RE_TRIE_MAXBUF}
X<${^RE_TRIE_MAXBUF}>

Controls how certain regex optimisations are applied and how much memory they
utilize.  This value by default is 65536 which corresponds to a 512kB
temporary cache.  Set this to a higher value to trade
memory for speed when matching large alternations.  Set
it to a lower value if you want the optimisations to
be as conservative of memory as possible but still occur, and set it to a
negative value to prevent the optimisation and conserve the most memory.
Under normal situations this variable should be of no interest to you.

This variable was added in Perl 5.10.

=back

=head2 Variables related to filehandles

Variables that depend on the currently selected filehandle may be set
by calling an appropriate object method on the C<IO::Handle> object,
although this is less efficient than using the regular built-in
variables.  (Summary lines below for this contain the word HANDLE.)
First you must say

    use IO::Handle;

after which you may use either

    method HANDLE EXPR

or more safely,

    HANDLE->method(EXPR)

Each method returns the old value of the C<IO::Handle> attribute.  The
methods each take an optional EXPR, which, if supplied, specifies the
new value for the C<IO::Handle> attribute in question.  If not
supplied, most methods do nothing to the current value--except for
C<autoflush()>, which will assume a 1 for you, just to be different.

Because loading in the C<IO::Handle> class is an expensive operation,
you should learn how to use the regular built-in variables.

A few of these variables are considered "read-only".  This means that
if you try to assign to this variable, either directly or indirectly
through a reference, you'll raise a run-time exception.

You should be very careful when modifying the default values of most
special variables described in this document.  In most cases you want
to localize these variables before changing them, since if you don't,
the change may affect other modules which rely on the default values
of the special variables that you have changed.  This is one of the
correct ways to read the whole file at once:

    open my $fh, "<", "foo" or die $!;
    local $/; # enable localized slurp mode
    my $content = <$fh>;
    close $fh;

But the following code is quite bad:

    open my $fh, "<", "foo" or die $!;
    undef $/; # enable slurp mode
    my $content = <$fh>;
    close $fh;

since some other module, may want to read data from some file in the
default "line mode", so if the code we have just presented has been
executed, the global value of C<$/> is now changed for any other code
running inside the same Perl interpreter.

Usually when a variable is localized you want to make sure that this
change affects the shortest scope possible.  So unless you are already
inside some short C<{}> block, you should create one yourself.  For
example:

    my $content = '';
    open my $fh, "<", "foo" or die $!;
    {
	local $/;
	$content = <$fh>;
    }
    close $fh;
d636 6
a641 1
Here is an example of how your own code can go broken:
d643 1
a643 5
    for ( 1..3 ){
	$\ = "\r\n";
	nasty_break();
	print "$_";
    }
d645 9
a653 3
    sub nasty_break {
	$\ = "\f";
	# do something with $_
d656 1
a656 1
You probably expect this code to print the equivalent of
d658 4
a661 1
    "1\r\n2\r\n3\r\n"
d663 2
a664 1
but instead you get:
d666 2
a667 1
    "1\f2\f3\f"
d669 5
a673 4
Why? Because C<nasty_break()> modifies C<$\> without localizing it
first.  The value you set in  C<nasty_break()> is still there when you
return.  The fix is to add C<local()> so the value doesn't leak out of
C<nasty_break()>:
d675 1
a675 1
    local $\ = "\f";
d677 1
a677 3
It's easy to notice the problem in such a short example, but in more
complicated code you are looking for trouble if you don't localize
changes to the special variables.
d679 2
a680 1
=over 8
d682 3
a684 2
=item $ARGV
X<$ARGV>
d686 1
a686 1
Contains the name of the current file when reading from C<< <> >>.
d688 1
a688 2
=item @@ARGV
X<@@ARGV>
d690 2
a691 4
The array C<@@ARGV> contains the command-line arguments intended for
the script.  C<$#ARGV> is generally the number of arguments minus
one, because C<$ARGV[0]> is the first argument, I<not> the program's
command name itself.  See L</$0> for the command name.
d693 3
a695 2
=item ARGV
X<ARGV>
d697 1
a697 8
The special filehandle that iterates over command-line filenames in
C<@@ARGV>.  Usually written as the null filehandle in the angle operator
C<< <> >>.  Note that currently C<ARGV> only has its magical effect
within the C<< <> >> operator; elsewhere it is just a plain filehandle
corresponding to the last file opened by C<< <> >>.  In particular,
passing C<\*ARGV> as a parameter to a function that expects a filehandle
may not cause your function to automatically read the contents of all the
files in C<@@ARGV>.
d699 1
a699 2
=item ARGVOUT
X<ARGVOUT>
d701 2
a702 4
The special filehandle that points to the currently open output file
when doing edit-in-place processing with B<-i>.  Useful when you have
to do a lot of inserting and don't want to keep modifying C<$_>.  See
L<perlrun> for the B<-i> switch.
d704 4
a707 1
=item Handle->output_field_separator( EXPR )
d709 1
a709 1
=item $OUTPUT_FIELD_SEPARATOR
d711 1
a711 1
=item $OFS
d713 2
a714 2
=item $,
X<$,> X<$OFS> X<$OUTPUT_FIELD_SEPARATOR>
d716 1
a716 2
The output field separator for the print operator.  If defined, this
value is printed between each of print's arguments.  Default is C<undef>.
d718 1
a718 1
Mnemonic: what is printed when there is a "," in your print statement.
d720 2
a721 1
=item HANDLE->input_line_number( EXPR )
d723 6
a728 1
=item $INPUT_LINE_NUMBER
d730 1
a730 1
=item $NR
d732 2
a733 2
=item $.
X<$.> X<$NR> X<$INPUT_LINE_NUMBER> X<line number>
d735 8
a742 1
Current line number for the last filehandle accessed.
d744 2
a745 6
Each filehandle in Perl counts the number of lines that have been read
from it.  (Depending on the value of C<$/>, Perl's idea of what
constitutes a line may not match yours.)  When a line is read from a
filehandle (via C<readline()> or C<< <> >>), or when C<tell()> or
C<seek()> is called on it, C<$.> becomes an alias to the line counter
for that filehandle.
d747 2
a748 4
You can adjust the counter by assigning to C<$.>, but this will not
actually move the seek pointer.  I<Localizing C<$.> will not localize
the filehandle's line count>.  Instead, it will localize perl's notion
of which filehandle C<$.> is currently aliased to.
d750 3
a752 5
C<$.> is reset when the filehandle is closed, but B<not> when an open
filehandle is reopened without an intervening C<close()>.  For more
details, see L<perlop/"IE<sol>O Operators">.  Because C<< <> >> never does
an explicit close, line numbers increase across C<ARGV> files (but see
examples in L<perlfunc/eof>).
d754 3
a756 3
You can also use C<< HANDLE->input_line_number(EXPR) >> to access the
line counter for a given filehandle without having to worry about
which handle you last accessed.
d758 3
a760 1
Mnemonic: many programs use "." to mean the current line number.
d762 1
a762 1
=item HANDLE->input_record_separator( EXPR )
d764 2
a765 1
=item $INPUT_RECORD_SEPARATOR
d767 5
a771 1
=item $RS
d773 2
a774 2
=item $/
X<$/> X<$RS> X<$INPUT_RECORD_SEPARATOR>
d776 2
a777 11
The input record separator, newline by default.  This influences Perl's
idea of what a "line" is.  Works like B<awk>'s RS variable, including
treating empty lines as a terminator if set to the null string (an
empty line cannot contain any spaces or tabs).  You may set it to a
multi-character string to match a multi-character terminator, or to
C<undef> to read through the end of file.  Setting it to C<"\n\n">
means something slightly different than setting to C<"">, if the file
contains consecutive empty lines.  Setting to C<""> will treat two or
more consecutive empty lines as a single empty line.  Setting to
C<"\n\n"> will blindly assume that the next input character belongs to
the next paragraph, even if it's a newline.
d779 4
a782 3
    local $/;           # enable "slurp" mode
    local $_ = <FH>;    # whole file now here
    s/\n[ \t]+/ /g;
d784 1
a784 2
Remember: the value of C<$/> is a string, not a regex.  B<awk> has to
be better for something. :-)
d786 1
a786 4
Setting C<$/> to a reference to an integer, scalar containing an
integer, or scalar that's convertible to an integer will attempt to
read records instead of lines, with the maximum record size being the
referenced integer.  So this:
d788 2
a789 3
    local $/ = \32768; # or \"32768", or \$var_containing_32768
    open my $fh, "<", $myfile or die $!;
    local $_ = <$fh>;
d791 4
a794 6
will read a record of no more than 32768 bytes from FILE.  If you're
not reading from a record-oriented file (or your OS doesn't have
record-oriented files), then you'll likely get a full chunk of data
with every read.  If a record is larger than the record size you've
set, you'll get the record back in pieces.  Trying to set the record
size to zero or less will cause reading in the (rest of the) whole file.
d796 10
a805 11
On VMS only, record reads bypass PerlIO layers and any associated
buffering,so you must not mix record and non-record reads on the
same filehandle.  Record mode mixes with line mode only when the
same buffering layer is in use for both modes.

If you perform a record read on a FILE with an encoding layer such as
C<:encoding(latin1)> or C<:utf8>, you may get an invalid string as a
result, may leave the FILE positioned between characters in the stream
and may not be reading the number of bytes from the underlying file
that you specified.  This behaviour may change without warning in a
future version of perl.
d807 9
a815 1
See also L<perlport/"Newlines">. Also see L</$.>.
d817 1
a817 1
Mnemonic: / delimits line boundaries when quoting poetry.
d819 1
a819 1
=item Handle->output_record_separator( EXPR )
d821 1
a821 1
=item $OUTPUT_RECORD_SEPARATOR
d823 2
a824 1
=item $ORS
d826 9
a834 2
=item $\
X<$\> X<$ORS> X<$OUTPUT_RECORD_SEPARATOR>
d836 1
a836 2
The output record separator for the print operator.  If defined, this
value is printed after the last of print's arguments.  Default is C<undef>.
d838 2
a839 2
Mnemonic: you set C<$\> instead of adding "\n" at the end of the print.
Also, it's just like C<$/>, but it's what you get "back" from Perl.
d841 19
a859 1
=item HANDLE->autoflush( EXPR )
d861 2
a862 1
=item $OUTPUT_AUTOFLUSH
d864 1
a864 2
=item $|
X<$|> X<autoflush> X<flush> X<$OUTPUT_AUTOFLUSH>
d866 1
a866 11
If set to nonzero, forces a flush right away and after every write or
print on the currently selected output channel.  Default is 0
(regardless of whether the channel is really buffered by the system or
not; C<$|> tells you only whether you've asked Perl explicitly to
flush after each write).  STDOUT will typically be line buffered if
output is to the terminal and block buffered otherwise.  Setting this
variable is useful primarily when you are outputting to a pipe or
socket, such as when you are running a Perl program under B<rsh> and
want to see the output as it's happening.  This has no effect on input
buffering.  See L<perlfunc/getc> for that.  See L<perlfunc/select> on
how to select the output channel.  See also L<IO::Handle>.
d868 2
a869 1
Mnemonic: when you want your pipes to be piping hot.
d871 8
a878 1
=back
d880 1
a880 1
=head3 Variables related to formats
d882 1
a882 3
The special variables for formats are a subset of those for
filehandles.  See L<perlform> for more information about Perl's
formats.
d884 1
a884 1
=over 8
d886 2
a887 1
=item $ACCUMULATOR
d889 9
a897 2
=item $^A
X<$^A> X<$ACCUMULATOR>
d899 1
a899 6
The current value of the C<write()> accumulator for C<format()> lines.
A format contains C<formline()> calls that put their result into
C<$^A>.  After calling its format, C<write()> prints out the contents
of C<$^A> and empties.  So you never really see the contents of C<$^A>
unless you call C<formline()> yourself and then look at it.  See
L<perlform> and L<perlfunc/"formline PICTURE,LIST">.
d901 1
a901 1
=item HANDLE->format_formfeed(EXPR)
d903 2
a904 1
=item $FORMAT_FORMFEED
d906 5
a910 2
=item $^L
X<$^L> X<$FORMAT_FORMFEED>
d912 1
a912 1
What formats output as a form feed.  The default is C<\f>.
d914 1
a914 1
=item HANDLE->format_page_number(EXPR)
d916 2
a917 1
=item $FORMAT_PAGE_NUMBER
d919 1
a919 2
=item $%
X<$%> X<$FORMAT_PAGE_NUMBER>
d921 2
a922 1
The current page number of the currently selected output channel.
d924 3
a926 1
Mnemonic: C<%> is page number in B<nroff>.
d928 3
a930 1
=item HANDLE->format_lines_left(EXPR)
d932 1
a932 1
=item $FORMAT_LINES_LEFT
d934 1
a934 2
=item $-
X<$-> X<$FORMAT_LINES_LEFT>
d936 2
a937 2
The number of lines left on the page of the currently selected output
channel.
d939 5
a943 1
Mnemonic: lines_on_page - lines_printed.
d945 5
a949 1
=item Handle->format_line_break_characters EXPR
d951 3
a953 1
=item $FORMAT_LINE_BREAK_CHARACTERS
d955 2
a956 2
=item $:
X<$:> X<FORMAT_LINE_BREAK_CHARACTERS>
d958 1
a958 3
The current set of characters after which a string may be broken to
fill continuation fields (starting with C<^>) in a format.  The default is
S<" \n-">, to break on a space, newline, or a hyphen.
d960 1
a960 1
Mnemonic: a "colon" in poetry is a part of a line.
d962 2
a963 1
=item HANDLE->format_lines_per_page(EXPR)
d965 5
a969 1
=item $FORMAT_LINES_PER_PAGE
d971 6
a976 2
=item $=
X<$=> X<$FORMAT_LINES_PER_PAGE>
d978 4
a981 2
The current page length (printable lines) of the currently selected
output channel.  The default is 60.
d983 2
a984 1
Mnemonic: = has horizontal lines.
d986 3
a988 1
=item HANDLE->format_top_name(EXPR)
d990 1
a990 1
=item $FORMAT_TOP_NAME
d992 2
a993 2
=item $^
X<$^> X<$FORMAT_TOP_NAME>
d995 1
a995 4
The name of the current top-of-page format for the currently selected
output channel.  The default is the name of the filehandle with C<_TOP>
appended.  For example, the default format top name for the C<STDOUT>
filehandle is C<STDOUT_TOP>.
d997 6
a1002 1
Mnemonic: points to top of page.
d1004 3
a1006 1
=item HANDLE->format_name(EXPR)
d1008 5
a1012 4
=item $FORMAT_NAME

=item $~
X<$~> X<$FORMAT_NAME>
d1014 5
a1018 4
The name of the current report format for the currently selected
output channel.  The default format name is the same as the filehandle
name.  For example, the default format name for the C<STDOUT>
filehandle is just C<STDOUT>.
d1020 5
a1024 1
Mnemonic: brother to C<$^>.
d1026 2
a1027 1
=back
d1029 2
a1030 2
=head2 Error Variables
X<error> X<exception>
d1032 5
a1036 7
The variables C<$@@>, C<$!>, C<$^E>, and C<$?> contain information
about different types of error conditions that may appear during
execution of a Perl program.  The variables are shown ordered by
the "distance" between the subsystem which reported the error and
the Perl process.  They correspond to errors detected by the Perl
interpreter, C library, operating system, or an external program,
respectively.
d1038 4
a1041 4
To illustrate the differences between these variables, consider the
following Perl expression, which uses a single-quoted string.  After
execution of this statement, perl may have set all four special error
variables:
d1043 4
a1046 5
    eval q{
	open my $pipe, "/cdrom/install |" or die $!;
	my @@res = <$pipe>;
	close $pipe or die "bad pipe: $?, $!";
    };
d1048 2
a1049 14
When perl executes the C<eval()> expression, it translates the
C<open()>, C<< <PIPE> >>, and C<close> calls in the C run-time library
and thence to the operating system kernel.  perl sets C<$!> to
the C library's C<errno> if one of these calls fails.

C<$@@> is set if the string to be C<eval>-ed did not compile (this may
happen if C<open> or C<close> were imported with bad prototypes), or
if Perl code executed during evaluation C<die()>d.  In these cases the
value of C<$@@> is the compile error, or the argument to C<die> (which
will interpolate C<$!> and C<$?>).  (See also L<Fatal>, though.)

Under a few operating systems, C<$^E> may contain a more verbose error
indicator, such as in this case, "CDROM tray not closed."  Systems that
do not support extended error messages leave C<$^E> the same as C<$!>.
d1051 4
a1054 9
Finally, C<$?> may be set to non-0 value if the external program
F</cdrom/install> fails.  The upper eight bits reflect specific error
conditions encountered by the program (the program's C<exit()> value).
The lower eight bits reflect mode of failure, like signal death and
core dump information.  See L<wait(2)> for details.  In contrast to
C<$!> and C<$^E>, which are set only if error condition is detected,
the variable C<$?> is set on each C<wait> or pipe C<close>,
overwriting the old value.  This is more like C<$@@>, which on every
C<eval()> is always set on failure and cleared on success.
d1056 1
a1056 2
For more details, see the individual descriptions at C<$@@>, C<$!>,
C<$^E>, and C<$?>.
d1058 2
a1059 1
=over 8
d1061 3
a1063 2
=item ${^CHILD_ERROR_NATIVE}
X<$^CHILD_ERROR_NATIVE>
d1065 1
a1065 5
The native status returned by the last pipe close, backtick (C<``>)
command, successful call to C<wait()> or C<waitpid()>, or from the
C<system()> operator.  On POSIX-like systems this value can be decoded
with the WIFEXITED, WEXITSTATUS, WIFSIGNALED, WTERMSIG, WIFSTOPPED,
WSTOPSIG and WIFCONTINUED functions provided by the L<POSIX> module.
d1067 2
a1068 2
Under VMS this reflects the actual VMS exit status; i.e. it is the
same as C<$?> when the pragma C<use vmsish 'status'> is in effect.
d1070 5
a1074 1
This variable was added in Perl 5.8.9.
d1076 1
a1076 1
=item $EXTENDED_OS_ERROR
d1078 2
a1079 2
=item $^E
X<$^E> X<$EXTENDED_OS_ERROR>
d1081 3
a1083 18
Error information specific to the current operating system.  At the
moment, this differs from C<$!> under only VMS, OS/2, and Win32 (and
for MacPerl).  On all other platforms, C<$^E> is always just the same
as C<$!>.

Under VMS, C<$^E> provides the VMS status value from the last system
error.  This is more specific information about the last system error
than that provided by C<$!>.  This is particularly important when C<$!>
is set to B<EVMSERR>.

Under OS/2, C<$^E> is set to the error code of the last call to OS/2
API either via CRT, or directly from perl.

Under Win32, C<$^E> always returns the last error information reported
by the Win32 call C<GetLastError()> which describes the last error
from within the Win32 API.  Most Win32-specific code will report errors
via C<$^E>.  ANSI C and Unix-like calls set C<errno> and so most
portable Perl code will report errors via C<$!>.
d1085 1
a1085 2
Caveats mentioned in the description of C<$!> generally apply to
C<$^E>, also.
d1087 2
a1088 1
This variable was added in Perl 5.003.
d1090 1
a1090 1
Mnemonic: Extra error explanation.
d1092 7
a1098 1
=item $EXCEPTIONS_BEING_CAUGHT
d1100 1
a1100 2
=item $^S
X<$^S> X<$EXCEPTIONS_BEING_CAUGHT>
d1102 2
a1103 1
Current state of the interpreter.
d1105 8
a1112 5
	$^S         State
	---------   -------------------
	undef       Parsing module/eval
	true (1)    Executing an eval
	false (0)   Otherwise
d1114 1
a1114 2
The first state may happen in C<$SIG{__DIE__}> and C<$SIG{__WARN__}>
handlers.
d1116 2
a1117 1
This variable was added in Perl 5.004.
d1119 3
a1121 1
=item $WARNING
d1123 6
a1128 2
=item $^W
X<$^W> X<$WARNING>
d1130 2
a1131 2
The current value of the warning switch, initially true if B<-w> was
used, false otherwise, but directly modifiable.
d1133 2
a1134 1
See also L<warnings>.
d1136 1
a1136 1
Mnemonic: related to the B<-w> switch.
d1138 4
a1141 2
=item ${^WARNING_BITS}
X<${^WARNING_BITS}>
d1143 4
a1146 4
The current set of warning checks enabled by the C<use warnings> pragma.
It has the same scoping as the C<$^H> and C<%^H> variables.  The exact
values are considered internal to the L<warnings> pragma and may change
between versions of Perl.
d1148 1
a1148 1
This variable was added in Perl 5.6.
d1150 1
a1150 1
=item $OS_ERROR
d1152 2
a1153 1
=item $ERRNO
d1155 1
a1155 2
=item $!
X<$!> X<$ERRNO> X<$OS_ERROR>
d1157 1
a1157 10
When referenced, C<$!> retrieves the current value
of the C C<errno> integer variable.
If C<$!> is assigned a numerical value, that value is stored in C<errno>.
When referenced as a string, C<$!> yields the system error string
corresponding to C<errno>.

Many system or library calls set C<errno> if they fail,
to indicate the cause of failure.  They usually do B<not>
set C<errno> to zero if they succeed.  This means C<errno>,
hence C<$!>, is meaningful only I<immediately> after a B<failure>:
d1159 2
a1160 11
    if (open my $fh, "<", $filename) {
		# Here $! is meaningless.
		...
    }
    else {
		# ONLY here is $! meaningful.
		...
		# Already here $! might be meaningless.
    }
    # Since here we might have either success or failure,
    # $! is meaningless.
d1162 1
a1162 5
Here, I<meaningless> means that C<$!> may be unrelated to the outcome
of the C<open()> operator.  Assignment to C<$!> is similarly ephemeral.
It can be used immediately before invoking the C<die()> operator,
to set the exit value, or to inspect the system error string
corresponding to error I<n>, or to restore C<$!> to a meaningful state.
d1164 2
a1165 1
Mnemonic: What just went bang?
d1167 2
a1168 1
=item %OS_ERROR
d1170 2
a1171 1
=item %ERRNO
d1173 5
a1177 2
=item %!
X<%!> X<%OS_ERROR> X<%ERRNO>
d1179 1
a1179 8
Each element of C<%!> has a true value only if C<$!> is set to that
value.  For example, C<$!{ENOENT}> is true if and only if the current
value of C<$!> is C<ENOENT>; that is, if the most recent error was "No
such file or directory" (or its moral equivalent: not all operating
systems give that exact error, and certainly not all languages).  To
check if a particular key is meaningful on your system, use C<exists
$!{the_key}>; for a list of legal keys, use C<keys %!>.  See L<Errno>
for more information, and also see L</$!>.
d1181 5
a1185 1
This variable was added in Perl 5.005.
d1187 1
a1187 1
=item $CHILD_ERROR
d1189 2
a1190 2
=item $?
X<$?> X<$CHILD_ERROR>
d1192 3
a1194 7
The status returned by the last pipe close, backtick (C<``>) command,
successful call to C<wait()> or C<waitpid()>, or from the C<system()>
operator.  This is just the 16-bit status word returned by the
traditional Unix C<wait()> system call (or else is made up to look
like it).  Thus, the exit value of the subprocess is really (C<<< $? >>
8 >>>), and C<$? & 127> gives which signal, if any, the process died
from, and C<$? & 128> reports whether there was a core dump.
d1196 2
a1197 2
Additionally, if the C<h_errno> variable is supported in C, its value
is returned via C<$?> if any C<gethost*()> function fails.
d1199 5
a1203 2
If you have installed a signal handler for C<SIGCHLD>, the
value of C<$?> will usually be wrong outside that handler.
d1205 1
a1205 3
Inside an C<END> subroutine C<$?> contains the value that is going to be
given to C<exit()>.  You can modify C<$?> in an C<END> subroutine to
change the exit status of your program.  For example:
d1207 3
a1209 3
    END {
	$? = 1 if $? == 255;  # die would make it 255
    }
d1211 1
a1211 3
Under VMS, the pragma C<use vmsish 'status'> makes C<$?> reflect the
actual VMS exit status, instead of the default emulation of POSIX
status; see L<perlvms/$?> for details.
d1213 2
a1214 1
Mnemonic: similar to B<sh> and B<ksh>.
d1216 2
a1217 1
=item $EVAL_ERROR
d1219 1
a1219 2
=item $@@
X<$@@> X<$EVAL_ERROR>
d1221 1
a1221 9
The Perl syntax error message from the
last C<eval()> operator.  If C<$@@> is
the null string, the last C<eval()> parsed and executed correctly
(although the operations you invoked may have failed in the normal
fashion).

Warning messages are not collected in this variable.  You can, however,
set up a routine to process warnings by setting C<$SIG{__WARN__}> as
described in L</%SIG>.
d1223 1
a1223 1
Mnemonic: Where was the syntax error "at"?
d1225 1
a1225 1
=back
d1227 2
a1228 1
=head2 Variables related to the interpreter state
d1230 1
a1230 1
These variables provide information about the current interpreter state.
d1232 1
a1232 1
=over 8
d1234 1
a1234 1
=item $COMPILING
d1236 1
a1236 2
=item $^C
X<$^C> X<$COMPILING>
d1238 1
a1238 5
The current value of the flag associated with the B<-c> switch.
Mainly of use with B<-MO=...> to allow code to alter its behavior
when being compiled, such as for example to C<AUTOLOAD> at compile
time rather than normal, deferred loading.  Setting
C<$^C = 1> is similar to calling C<B::minus_c>.
d1240 1
a1240 1
This variable was added in Perl 5.6.
d1242 1
a1242 1
=item $DEBUGGING
d1244 1
a1244 2
=item $^D
X<$^D> X<$DEBUGGING>
d1246 1
a1246 3
The current value of the debugging flags.  May be read or set.  Like its
command-line equivalent, you can use numeric or symbolic values, eg
C<$^D = 10> or C<$^D = "st">.
d1248 1
a1248 1
Mnemonic: value of B<-D> switch.
d1250 1
a1250 2
=item ${^ENCODING}
X<${^ENCODING}>
d1252 1
a1252 4
The I<object reference> to the C<Encode> object that is used to convert
the source code to Unicode.  Thanks to this variable your Perl script
does not have to be written in UTF-8.  Default is I<undef>.  The direct
manipulation of this variable is highly discouraged.
d1254 1
a1254 1
This variable was added in Perl 5.8.2.
d1256 1
a1256 2
=item ${^GLOBAL_PHASE}
X<${^GLOBAL_PHASE}>
d1258 1
a1258 1
The current phase of the perl interpreter.
d1260 2
a1261 1
Possible values are:
d1263 1
a1263 1
=over 8
d1265 1
a1265 1
=item CONSTRUCT
d1267 1
a1267 5
The C<PerlInterpreter*> is being constructed via C<perl_construct>.  This
value is mostly there for completeness and for use via the
underlying C variable C<PL_phase>.  It's not really possible for Perl
code to be executed unless construction of the interpreter is
finished.
d1269 3
a1271 1
=item START
d1273 1
a1273 3
This is the global compile-time.  That includes, basically, every
C<BEGIN> block executed directly or indirectly from during the
compile-time of the top-level program.
d1275 2
a1276 6
This phase is not called "BEGIN" to avoid confusion with
C<BEGIN>-blocks, as those are executed during compile-time of any
compilation unit, not just the top-level program.  A new, localised
compile-time entered at run-time, for example by constructs as
C<eval "use SomeModule"> are not global interpreter phases, and
therefore aren't reflected by C<${^GLOBAL_PHASE}>.
d1278 2
a1279 1
=item CHECK
d1281 1
a1281 1
Execution of any C<CHECK> blocks.
d1283 2
a1284 1
=item INIT
d1286 1
a1286 1
Similar to "CHECK", but for C<INIT>-blocks, not C<CHECK> blocks.
d1288 5
a1292 1
=item RUN
d1294 1
a1294 1
The main run-time, i.e. the execution of C<PL_main_root>.
d1296 1
a1296 1
=item END
d1298 2
a1299 1
Execution of any C<END> blocks.
d1301 3
a1303 1
=item DESTRUCT
d1305 1
a1305 1
Global destruction.
d1307 3
a1309 1
=back
d1311 1
a1311 3
Also note that there's no value for UNITCHECK-blocks.  That's because
those are run for each compilation unit individually, and therefore is
not a global interpreter phase.
d1313 4
a1316 3
Not every program has to go through each of the possible phases, but
transition from one phase to another can only happen in the order
described in the above list.
d1318 1
a1318 1
An example of all of the phases Perl code can see:
d1320 3
a1322 1
    BEGIN { print "compile-time: ${^GLOBAL_PHASE}\n" }
d1324 1
a1324 1
    INIT  { print "init-time: ${^GLOBAL_PHASE}\n" }
d1326 4
a1329 1
    CHECK { print "check-time: ${^GLOBAL_PHASE}\n" }
d1331 1
a1331 2
    {
        package Print::Phase;
d1333 2
a1334 10
        sub new {
            my ($class, $time) = @@_;
            return bless \$time, $class;
        }

        sub DESTROY {
            my $self = shift;
            print "$$self: ${^GLOBAL_PHASE}\n";
        }
    }
d1336 2
a1337 1
    print "run-time: ${^GLOBAL_PHASE}\n";
d1339 2
a1340 3
    my $runtime = Print::Phase->new(
        "lexical variables are garbage collected before END"
    );
d1342 3
a1344 1
    END   { print "end-time: ${^GLOBAL_PHASE}\n" }
d1346 1
a1346 3
    our $destruct = Print::Phase->new(
        "package variables are garbage collected after END"
    );
d1348 2
a1349 1
This will print out
d1351 1
a1351 7
    compile-time: START
    check-time: CHECK
    init-time: INIT
    run-time: RUN
    lexical variables are garbage collected before END: RUN
    end-time: END
    package variables are garbage collected after END: DESTRUCT
d1353 2
a1354 1
This variable was added in Perl 5.14.0.
d1356 1
a1356 2
=item $^H
X<$^H>
d1358 1
a1358 3
WARNING: This variable is strictly for
internal use only.  Its availability,
behavior, and contents are subject to change without notice.
d1360 2
a1361 3
This variable contains compile-time hints for the Perl interpreter.  At the
end of compilation of a BLOCK the value of this variable is restored to the
value when the interpreter started to compile the BLOCK.
d1363 3
a1365 6
When perl begins to parse any block construct that provides a lexical scope
(e.g., eval body, required file, subroutine body, loop body, or conditional
block), the existing value of C<$^H> is saved, but its value is left unchanged.
When the compilation of the block is completed, it regains the saved value.
Between the points where its value is saved and restored, code that
executes within BEGIN blocks is free to change the value of C<$^H>.
d1367 1
a1367 2
This behavior provides the semantic of lexical scoping, and is used in,
for instance, the C<use strict> pragma.
d1369 2
a1370 2
The contents should be an integer; different bits of it are used for
different pragmatic flags.  Here's an example:
d1372 2
a1373 1
    sub add_100 { $^H |= 0x100 }
d1375 5
a1379 4
    sub foo {
	BEGIN { add_100() }
	bar->baz($boon);
    }
d1381 5
a1385 5
Consider what happens during execution of the BEGIN block.  At this point
the BEGIN block has already been compiled, but the body of C<foo()> is still
being compiled.  The new value of C<$^H>
will therefore be visible only while
the body of C<foo()> is being compiled.
d1387 1
a1387 1
Substitution of C<BEGIN { add_100() }> block with:
d1389 2
a1390 1
    BEGIN { require strict; strict->import('vars') }
d1392 2
a1393 2
demonstrates how C<use strict 'vars'> is implemented.  Here's a conditional
version of the same lexical pragma:
d1395 7
a1401 3
    BEGIN {
	require strict; strict->import('vars') if $condition
    }
d1403 2
a1404 1
This variable was added in Perl 5.003.
d1406 1
a1406 2
=item %^H
X<%^H>
d1408 3
a1410 9
The C<%^H> hash provides the same scoping semantic as C<$^H>.  This makes
it useful for implementation of lexically scoped pragmas.  See
L<perlpragma>.

When putting items into C<%^H>, in order to avoid conflicting with other
users of the hash there is a convention regarding which keys to use.
A module should use only keys that begin with the module's name (the
name of its main package) and a "/" character.  For example, a module
C<Foo::Bar> should use keys such as C<Foo::Bar/baz>.
d1412 5
a1416 1
This variable was added in Perl 5.6.
d1418 6
a1423 2
=item ${^OPEN}
X<${^OPEN}>
d1425 7
a1431 3
An internal variable used by PerlIO.  A string in two parts, separated
by a C<\0> byte, the first part describes the input layers, the second
part describes the output layers.
d1433 5
a1437 1
This variable was added in Perl 5.8.0.
d1439 2
a1440 1
=item $PERLDB
d1442 8
a1449 2
=item $^P
X<$^P> X<$PERLDB>
d1451 2
a1452 2
The internal variable for debugging support.  The meanings of the
various bits are subject to change, but currently indicate:
d1454 1
a1454 1
=over 6
d1456 2
a1457 1
=item 0x01
d1459 4
a1462 1
Debug subroutine enter/exit.
d1464 2
a1465 1
=item 0x02
d1467 4
a1470 3
Line-by-line debugging.  Causes C<DB::DB()> subroutine to be called for
each statement executed.  Also causes saving source code lines (like
0x400).
d1472 2
a1473 1
=item 0x04
d1475 4
a1478 1
Switch off optimizations.
d1480 2
a1481 1
=item 0x08
d1483 9
a1491 1
Preserve more data for future interactive inspections.
d1493 2
a1494 1
=item 0x10
d1496 3
a1498 1
Keep info about source lines on which a subroutine is defined.
d1500 1
a1500 1
=item 0x20
d1502 2
a1503 1
Start with single-step on.
d1505 2
a1506 1
=item 0x40
d1508 2
a1509 1
Use subroutine address instead of name when reporting.
d1511 6
a1516 1
=item 0x80
d1518 5
a1522 1
Report C<goto &subroutine> as well.
d1524 1
a1524 1
=item 0x100
d1526 2
a1527 1
Provide informative "file" names for evals based on the place they were compiled.
d1529 3
a1531 1
=item 0x200
d1533 1
a1533 2
Provide informative names to anonymous subroutines based on the place they
were compiled.
d1535 2
a1536 1
=item 0x400
d1538 1
a1538 1
Save source code lines into C<@@{"_<$filename"}>.
d1540 6
a1545 1
=back
d1547 5
a1551 3
Some bits may be relevant at compile-time only, some at
run-time only.  This is a new mechanism and the details may change.
See also L<perldebguts>.
d1553 3
a1555 2
=item ${^TAINT}
X<${^TAINT}>
d1557 1
a1557 3
Reflects if taint mode is on or off.  1 for on (the program was run with
B<-T>), 0 for off, -1 when only taint warnings are enabled (i.e. with
B<-t> or B<-TU>).
d1559 4
a1562 1
This variable is read-only.
d1564 2
a1565 1
This variable was added in Perl 5.8.
d1567 2
a1568 2
=item ${^UNICODE}
X<${^UNICODE}>
d1570 10
a1579 3
Reflects certain Unicode settings of Perl.  See L<perlrun>
documentation for the C<-C> switch for more information about
the possible values.
d1581 2
a1582 1
This variable is set during Perl startup and is thereafter read-only.
d1584 2
a1585 1
This variable was added in Perl 5.8.2.
d1587 1
a1587 2
=item ${^UTF8CACHE}
X<${^UTF8CACHE}>
d1589 7
a1595 3
This variable controls the state of the internal UTF-8 offset caching code.
1 for on (the default), 0 for off, -1 to debug the caching code by checking
all its results against linear scans, and panicking on any discrepancy.
d1597 14
a1610 1
This variable was added in Perl 5.8.9.
d1612 4
a1615 2
=item ${^UTF8LOCALE}
X<${^UTF8LOCALE}>
d1617 4
a1620 4
This variable indicates whether a UTF-8 locale was detected by perl at
startup.  This information is used by perl when it's in
adjust-utf8ness-to-locale mode (as when run with the C<-CL> command-line
switch); see L<perlrun> for more info on this.
d1622 2
a1623 1
This variable was added in Perl 5.8.8.
d1627 1
a1627 6
=head2 Deprecated and removed variables

Deprecating a variable announces the intent of the perl maintainers to
eventually remove the variable from the language.  It may still be
available despite its status.  Using a deprecated variable triggers
a warning.
d1629 3
a1631 4
Once a variable is removed, its use triggers an error telling you
the variable is unsupported.

See L<perldiag> for details about error messages.
d1635 2
a1636 1
=item $OFMT
d1638 3
a1640 2
=item $#
X<$#> X<$OFMT>
d1642 2
a1643 3
C<$#> was a variable that could be used to format printed numbers.
After a deprecation cycle, its magic was removed in Perl 5.10 and
using it now triggers a warning: C<$# is no longer supported>.
d1645 2
a1646 3
This is not the sigil you use in front of an array name to get the
last index, like C<$#array>.  That's still how you get the last index
of an array in Perl.  The two have nothing to do with each other.
d1648 3
a1650 1
Deprecated in Perl 5.
d1652 1
a1652 1
Removed in Perl 5.10.
d1657 1
a1657 1
C<$*> was a variable that you could use to enable multiline matching.
d1660 1
a1660 1
You should use the C</s> and C</m> regexp modifiers instead.
d1662 1
a1662 1
Deprecated in Perl 5.
d1664 1
a1664 1
Removed in Perl 5.10.
d1666 2
a1667 1
=item $ARRAY_BASE
d1669 7
a1675 2
=item $[
X<$[> X<$ARRAY_BASE>
d1677 2
a1678 4
This variable stores the index of the first element in an array, and
of the first character in a substring.  The default is 0, but you could
theoretically set it to 1 to make Perl behave more like B<awk> (or Fortran)
when subscripting and when evaluating the index() and substr() functions.
d1680 5
a1684 4
As of release 5 of Perl, assignment to C<$[> is treated as a compiler
directive, and cannot influence the behavior of any other file.
(That's why you can only assign compile-time constants to it.)
Its use is highly discouraged.
d1686 1
a1686 4
Prior to Perl 5.10, assignment to C<$[> could be seen from outer lexical
scopes in the same file, unlike other compile-time directives (such as
L<strict>).  Using local() on it would bind its value strictly to a lexical
block.  Now it is always lexically scoped.
d1688 16
a1703 2
As of Perl 5.16, it is implemented by the L<arybase> module.  See
L<arybase> for more details on its behaviour.
d1705 9
a1713 3
Under C<use v5.16>, or C<no feature "array_base">, C<$[> no longer has any
effect, and always contains 0.  Assigning 0 to it is permitted, but any
other value will produce an error.
d1715 2
a1716 1
Mnemonic: [ begins subscripts.
d1718 1
a1718 1
Deprecated in Perl 5.12.
d1720 6
a1725 1
=item $OLD_PERL_VERSION
d1727 10
a1736 2
=item $]
X<$]> X<$OLD_PERL_VERSION>
d1738 10
a1747 2
See L</$^V> for a more modern representation of the Perl version that allows
accurate string comparisons.
d1749 5
a1753 5
The version + patchlevel / 1000 of the Perl interpreter.  This variable
can be used to determine whether the Perl interpreter executing a
script is in the right range of versions:

    warn "No checksumming!\n" if $] < 3.019;
d1755 5
a1759 2
The floating point representation can sometimes lead to inaccurate
numeric comparisons.
d1761 3
a1763 2
See also the documentation of C<use VERSION> and C<require VERSION>
for a convenient way to fail if the running Perl interpreter is too old.
d1765 1
a1765 1
Mnemonic: Is this version of perl in the right bracket?
d1767 9
a1775 1
=back
d1777 4
a1780 1
=cut
@


1.1.1.14
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d27 1
a27 1
Since Perl v5.6.0, Perl variable names may be alphanumeric
d110 2
a111 2
cos, defined, eval, evalbytes, exp, fc, glob, hex, int, lc,
lcfirst, length, log, lstat, mkdir, oct, ord, pos, print, printf,
d113 1
a113 2
rmdir, say, sin, split (for its second
argument), sqrt, stat, study, uc, ucfirst,
d141 1
a141 2
The default place to put the next value or input record
when a C<< <FH> >>, C<readline>, C<readdir> or C<each>
d147 2
a148 2
C<$_> is by default a global variable.  However, as
of perl v5.10.0, you can use a lexical version of
d150 1
a150 10
declaring C<our $_> restores the global C<$_> in the current scope.  Though
this seemed like a good idea at the time it was introduced, lexical C<$_>
actually causes more problems than it solves.  If you call a function that
expects to be passed information via C<$_>, it may or may not work,
depending on how the function is written, there not being any easy way to
solve this.  Just avoid lexical C<$_>, unless you are feeling particularly
masochistic.  For this reason lexical C<$_> is still experimental and will
produce a warning unless warnings have been disabled.  As with other
experimental features, the behavior of lexical C<$_> is subject to change
without notice, including change into a fatal error.
d199 1
a199 1
LinuxThreads is now obsolete on Linux, and caching C<getpid()>
d253 1
a253 1
On Linux as of perl v5.14.0 the legacy process name will be set with
d552 1
a552 1
The default delivery policy of signals changed in Perl v5.8.0 from
d632 2
a633 2
This variable first appeared in perl v5.6.0; earlier versions of perl
will see an undefined value.  Before perl v5.10.0 C<$^V> was represented
d651 1
a651 1
This variable was added in Perl v5.6.0.
d670 1
a670 1
This variable was added in Perl v5.10.0.
d788 1
a788 1
Since Perl v5.10.0, you can use the C</p> match operator flag and the
d817 1
a817 1
with Perl v5.10.0, you can use the C</p> match flag and the C<${^MATCH}>
d832 1
a832 1
This variable was added in Perl v5.10.0.
d848 1
a848 1
with Perl v5.10.0, you can use the C</p> match flag and the
d864 1
a864 1
This variable was added in Perl v5.10.0
d884 1
a884 1
using L</@@->.  Starting with Perl v5.10.0, you can use the C</p> match flag
d900 1
a900 1
This variable was added in Perl v5.10.0.
d937 1
a937 1
This variable was added in Perl v5.8.0.
d957 1
a957 1
This variable was added in Perl v5.6.0.
d984 1
a984 1
This variable was added in Perl v5.10.0.
d1030 1
a1030 1
This variable was added in Perl v5.6.0.
d1078 1
a1078 1
This variable was added in Perl v5.10.0.
d1098 1
a1098 1
This variable was added in Perl v5.10.0.
d1112 1
a1112 1
This variable was added in Perl v5.10.0.
d1251 1
a1251 1
=item IO::Handle->output_field_separator( EXPR )
a1262 3
You cannot call C<output_field_separator()> on a handle, only as a
static method.  See L<IO::Handle|IO::Handle>.

d1300 1
a1300 1
=item IO::Handle->input_record_separator( EXPR )
d1331 1
a1331 1
referenced integer number of characters.  So this:
d1337 1
a1337 1
will read a record of no more than 32768 characters from $fh.  If you're
d1345 1
a1345 1
buffering, so you must not mix record and non-record reads on the
d1349 6
a1354 2
You cannot call C<input_record_separator()> on a handle, only as a
static method.  See L<IO::Handle|IO::Handle>.
d1356 1
a1356 1
See also L<perlport/"Newlines">.  Also see L</$.>.
d1360 1
a1360 1
=item IO::Handle->output_record_separator( EXPR )
a1371 3
You cannot call C<output_record_separator()> on a handle, only as a
static method.  See L<IO::Handle|IO::Handle>.

a1395 11
=item ${^LAST_FH}
X<${^LAST_FH}>

This read-only variable contains a reference to the last-read filehandle.
This is set by C<< <HANDLE> >>, C<readline>, C<tell>, C<eof> and C<seek>.
This is the same handle that C<$.> and C<tell> and C<eof> without arguments
use.  It is also the handle used when Perl appends ", <STDIN> line 1" to
an error or warning message.

This variable was added in Perl v5.18.0.

d1418 1
a1418 1
=item IO::Handle->format_formfeed(EXPR)
a1426 3
You cannot call C<format_formfeed()> on a handle, only as a static
method.  See L<IO::Handle|IO::Handle>.

d1450 1
a1450 1
=item IO::Handle->format_line_break_characters EXPR
a1460 3
You cannot call C<format_line_break_characters()> on a handle, only as
a static method.  See L<IO::Handle|IO::Handle>.

d1569 1
a1569 1
This variable was added in Perl v5.10.0.
d1610 2
a1611 2
	---------   -------------------------------------
	undef       Parsing module, eval, or main program
a1617 4
The English name $EXCEPTIONS_BEING_CAUGHT is slightly misleading, because
the C<undef> value does not indicate whether exceptions are being caught,
since compilation of the main program does not catch exceptions.

d1640 1
a1640 1
This variable was added in Perl v5.6.0.
d1767 1
a1767 1
This variable was added in Perl v5.6.0.
d1959 1
a1959 1
This variable was added in Perl v5.6.0.
d1968 1
a1968 1
This variable was added in Perl v5.8.0.
d2042 1
a2042 1
This variable was added in Perl v5.8.0.
d2053 1
a2053 1
This variable was added in Perl v5.8.2.
d2062 1
a2062 3
This variable was added in Perl v5.8.9.  It is subject to change or
removal without notice, but is currently used to avoid recalculating the
boundaries of multi-byte UTF-8-encoded characters.
d2072 1
a2072 1
This variable was added in Perl v5.8.8.
d2096 1
a2096 1
After a deprecation cycle, its magic was removed in Perl v5.10.0 and
d2105 1
a2105 1
Removed in Perl v5.10.0.
d2111 1
a2111 1
After a deprecation cycle, its magic was removed in Perl v5.10.0.
d2117 1
a2117 1
Removed in Perl v5.10.0.
d2134 1
a2134 1
Prior to Perl v5.10.0, assignment to C<$[> could be seen from outer lexical
d2139 1
a2139 1
As of Perl v5.16.0, it is implemented by the L<arybase> module.  See
d2148 1
a2148 1
Deprecated in Perl v5.12.0.
@


1.1.1.15
log
@Import perl-5.20.1
@
text
@d64 5
a68 1
borrowed from B<awk>.  For more info, please see L<English>.
d221 1
a221 1
value.  NTPL threads preserve the POSIX semantics.
a416 22
As of v5.18.0, both keys and values stored in C<%ENV> are stringified.

    my $foo = 1;
    $ENV{'bar'} = \$foo;
    if( ref $ENV{'bar'} ) {
        say "Pre 5.18.0 Behaviour";
    } else {
        say "Post 5.18.0 Behaviour";
    }

Previously, only child processes received stringified values:

    my $foo = 1;
    $ENV{'bar'} = \$foo;

    # Always printed 'non ref'
    system($^X, '-e',
           q/print ( ref $ENV{'bar'}  ? 'ref' : 'non ref' ) /);

This happens because you can't really share arbitrary data structures with
foreign processes.

d786 16
a801 45
=head3 Performance issues

Traditionally in Perl, any use of any of the three variables  C<$`>, C<$&>
or C<$'> (or their C<use English> equivalents) anywhere in the code, caused
all subsequent successful pattern matches to make a copy of the matched
string, in case the code might subsequently access one of those variables.
This imposed a considerable performance penalty across the whole program,
so generally the use of these variables has been discouraged.

In Perl 5.6.0 the C<@@-> and C<@@+> dynamic arrays were introduced that
supply the indices of successful matches. So you could for example do
this:

    $str =~ /pattern/;

    print $`, $&, $'; # bad: perfomance hit

    print             # good: no perfomance hit
	substr($str, 0,     $-[0]),
	substr($str, $-[0], $+[0]-$-[0]),
	substr($str, $+[0]);

In Perl 5.10.0 the C</p> match operator flag and the C<${^PREMATCH}>,
C<${^MATCH}>, and C<${^POSTMATCH}> variables were introduced, that allowed
you to suffer the penalties only on patterns marked with C</p>.

In Perl 5.18.0 onwards, perl started noting the presence of each of the
three variables separately, and only copied that part of the string
required; so in

    $`; $&; "abcdefgh" =~ /d/

perl would only copy the "abcd" part of the string. That could make a big
difference in something like

    $str = 'x' x 1_000_000;
    $&; # whoops
    $str =~ /x/g # one char copied a million times, not a million chars

In Perl 5.20.0 a new copy-on-write system was enabled by default, which
finally fixes all performance issues with these three variables, and makes
them safe to use anywhere.

The C<Devel::NYTProf> and C<Devel::FindAmpersand> modules can help you
find uses of these problematic match variables in your code.
d825 5
a829 2
See L</Performance issues> above for the serious performance implications
of using this variable (even once) in your code.
d839 1
a839 5
performance penalty associated with that variable.

See L</Performance issues> above.

In Perl v5.18 and earlier, it is only guaranteed
d841 1
a841 2
the C</p> modifier.  In Perl v5.20, the C</p> modifier does nothing, so
C<${^MATCH}> does the same thing as C<$MATCH>.
d856 6
a861 2
See L</Performance issues> above for the serious performance implications
of using this variable (even once) in your code.
d871 1
a871 5
performance penalty associated with that variable.

See L</Performance issues> above.

In Perl v5.18 and earlier, it is only guaranteed
d873 1
a873 2
the C</p> modifier.  In Perl v5.20, the C</p> modifier does nothing, so
C<${^PREMATCH}> does the same thing as C<$PREMATCH>.
d875 1
a875 1
This variable was added in Perl v5.10.0.
d892 6
a897 2
See L</Performance issues> above for the serious performance implications
of using this variable (even once) in your code.
d907 1
a907 5
performance penalty associated with that variable.

See L</Performance issues> above.

In Perl v5.18 and earlier, it is only guaranteed
d909 1
a909 2
the C</p> modifier.  In Perl v5.20, the C</p> modifier does nothing, so
C<${^POSTMATCH}> does the same thing as C<$POSTMATCH>.
d1356 1
a1356 6
size to zero or less is deprecated and will cause $/ to have the value
of "undef", which will cause reading in the (rest of the) whole file.

As of 5.19.9 setting C<$/> to any other form of reference will throw a
fatal exception. This is in preparation for supporting new ways to set
C<$/> in the future.
a1711 4
Note that when stringified, the text is always returned as if both
S<L<C<"use locale">|perllocale>> and S<L<C<"use bytes">|bytes>> are in
effect.  This is likely to change in v5.22.

a2060 8
=item 0x800

When saving source, include evals that generate no subroutines.

=item 0x1000

When saving source, include source that did not compile.

d2126 2
d2129 1
a2129 1
X<$#>
d2155 2
d2158 1
a2158 1
X<$[>
d2186 2
d2189 1
a2189 1
X<$]>
d2198 1
a2198 1
    warn "No PerlIO!\n" if $] lt '5.008';
d2201 1
a2201 1
numeric comparisons, so string comparisons are recommended.
@


1.1.1.16
log
@Import perl-5.20.2
@
text
@d17 1
a17 2
punctuation or control character (with the literal control character
form deprecated).  These names are all reserved for
d373 1
a373 1
    $foo{$x,$y,$z}
d377 1
a377 1
    $foo{join($;, $x, $y, $z)}
d381 1
a381 1
    @@foo{$x,$y,$z}	# a slice--note the @@
d385 1
a385 1
    ($foo{$x},$foo{$y},$foo{$z})
@


