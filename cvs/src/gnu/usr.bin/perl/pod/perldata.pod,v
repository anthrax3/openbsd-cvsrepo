head	1.16;
access;
symbols
	OPENBSD_6_1_BASE:1.16
	OPENBSD_6_0:1.15.0.10
	OPENBSD_6_0_BASE:1.15
	OPENBSD_5_9:1.15.0.4
	OPENBSD_5_9_BASE:1.15
	OPENBSD_5_8:1.15.0.6
	OPENBSD_5_8_BASE:1.15
	PERL_5_20_2:1.1.1.14
	OPENBSD_5_7:1.15.0.2
	OPENBSD_5_7_BASE:1.15
	PERL_5_20_1:1.1.1.14
	OPENBSD_5_6:1.14.0.4
	OPENBSD_5_6_BASE:1.14
	PERL_5_18_2:1.1.1.13
	PERL:1.1.1
	OPENBSD_5_5:1.13.0.6
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.13.0.2
	OPENBSD_5_4_BASE:1.13
	PERL_5_16_3:1.1.1.12
	OPENBSD_5_3:1.12.0.10
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.8
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.6
	OPENBSD_5_0:1.12.0.4
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.2
	OPENBSD_4_9_BASE:1.12
	PERL_5_12_2:1.1.1.11
	OPENBSD_4_8:1.11.0.4
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.2
	OPENBSD_4_7_BASE:1.11
	PERL_5_10_1:1.1.1.10
	OPENBSD_4_6:1.10.0.6
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.2
	OPENBSD_4_5_BASE:1.10
	PERL_5_10_0:1.1.1.9
	OPENBSD_4_4:1.9.0.10
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.8
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.6
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.4
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.2
	OPENBSD_4_0_BASE:1.9
	PERL_5_8_8:1.1.1.8
	OPENBSD_3_9:1.8.0.6
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.4
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.2
	OPENBSD_3_7_BASE:1.8
	PERL_5_8_6:1.1.1.7
	OPENBSD_3_6:1.7.0.4
	OPENBSD_3_6_BASE:1.7
	PERL_5_8_5:1.1.1.6
	PERL_5_8_3:1.1.1.6
	OPENBSD_3_5:1.7.0.2
	OPENBSD_3_5_BASE:1.7
	PERL_5_8_2:1.1.1.6
	OPENBSD_3_4:1.6.0.4
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.6.0.2
	OPENBSD_3_3_BASE:1.6
	PERL_5_8_0:1.1.1.5
	OPENBSD_3_2:1.5.0.6
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.4
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	PERL_5_6_1:1.1.1.4
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	PERL_5_6_0:1.1.1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	PERL_500503:1.1.1.2
	CPAN:1.1.1
	OPENBSD_2_5:1.2.0.6
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.4
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	perl5003:1.1.1.1
	lwall:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.16
date	2017.02.05.00.32.18;	author afresh1;	state Exp;
branches;
next	1.15;
commitid	cxJ08BvJA9Pt2PTM;

1.15
date	2014.11.17.20.57.07;	author afresh1;	state Exp;
branches;
next	1.14;
commitid	QP75iYx42Uo7mMxO;

1.14
date	2014.03.24.15.05.32;	author afresh1;	state Exp;
branches;
next	1.13;

1.13
date	2013.03.25.20.40.58;	author sthen;	state Exp;
branches;
next	1.12;

1.12
date	2010.09.24.15.07.03;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2009.10.12.18.24.47;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2008.09.29.17.36.16;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2006.03.28.19.23.09;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2005.01.15.21.30.35;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2003.12.03.03.02.44;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.10.27.22.25.32;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.24.18.35.51;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.06.17.07.20;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	99.04.29.22.52.08;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.11.30.07.59.01;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.08.19.10.12.57;	author downsj;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.08.19.10.12.57;	author downsj;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.04.29.22.40.35;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2000.04.06.16.10.21;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2001.05.24.18.24.29;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2002.10.27.22.15.04;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2003.12.03.02.44.20;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2005.01.15.21.17.48;	author millert;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2006.03.28.18.49.16;	author millert;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2008.09.29.17.18.50;	author millert;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	2009.10.12.18.10.38;	author millert;	state Exp;
branches;
next	1.1.1.11;

1.1.1.11
date	2010.09.24.14.49.06;	author millert;	state Exp;
branches;
next	1.1.1.12;

1.1.1.12
date	2013.03.25.20.09.17;	author sthen;	state Exp;
branches;
next	1.1.1.13;

1.1.1.13
date	2014.03.24.14.59.07;	author afresh1;	state Exp;
branches;
next	1.1.1.14;

1.1.1.14
date	2014.11.17.20.53.13;	author afresh1;	state Exp;
branches;
next	;
commitid	B31cAbBIXiCqnL97;


desc
@@


1.16
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@=head1 NAME

perldata - Perl data types

=head1 DESCRIPTION

=head2 Variable names
X<variable, name> X<variable name> X<data type> X<type>

Perl has three built-in data types: scalars, arrays of scalars, and
associative arrays of scalars, known as "hashes".  A scalar is a 
single string (of any size, limited only by the available memory),
number, or a reference to something (which will be discussed
in L<perlref>).  Normal arrays are ordered lists of scalars indexed
by number, starting with 0.  Hashes are unordered collections of scalar 
values indexed by their associated string key.

Values are usually referred to by name, or through a named reference.
The first character of the name tells you to what sort of data
structure it refers.  The rest of the name tells you the particular
value to which it refers.  Usually this name is a single I<identifier>,
that is, a string beginning with a letter or underscore, and
containing letters, underscores, and digits.  In some cases, it may
be a chain of identifiers, separated by C<::> (or by the slightly
archaic C<'>); all but the last are interpreted as names of packages,
to locate the namespace in which to look up the final identifier
(see L<perlmod/Packages> for details).  For a more in-depth discussion
on identifiers, see L<Identifier parsing>.  It's possible to
substitute for a simple identifier, an expression that produces a reference
to the value at runtime.   This is described in more detail below
and in L<perlref>.
X<identifier>

Perl also has its own built-in variables whose names don't follow
these rules.  They have strange names so they don't accidentally
collide with one of your normal variables.  Strings that match
parenthesized parts of a regular expression are saved under names
containing only digits after the C<$> (see L<perlop> and L<perlre>).
In addition, several special variables that provide windows into
the inner working of Perl have names containing punctuation characters.
These are documented in L<perlvar>.
X<variable, built-in>

Scalar values are always named with '$', even when referring to a
scalar that is part of an array or a hash.  The '$' symbol works
semantically like the English word "the" in that it indicates a
single value is expected.
X<scalar>

    $days		# the simple scalar value "days"
    $days[28]		# the 29th element of array @@days
    $days{'Feb'}	# the 'Feb' value from hash %days
    $#days		# the last index of array @@days

Entire arrays (and slices of arrays and hashes) are denoted by '@@',
which works much as the word "these" or "those" does in English,
in that it indicates multiple values are expected.
X<array>

    @@days		# ($days[0], $days[1],... $days[n])
    @@days[3,4,5]	# same as ($days[3],$days[4],$days[5])
    @@days{'a','c'}	# same as ($days{'a'},$days{'c'})

Entire hashes are denoted by '%':
X<hash>

    %days		# (key1, val1, key2, val2 ...)

In addition, subroutines are named with an initial '&', though this
is optional when unambiguous, just as the word "do" is often redundant
in English.  Symbol table entries can be named with an initial '*',
but you don't really care about that yet (if ever :-).

Every variable type has its own namespace, as do several
non-variable identifiers.  This means that you can, without fear
of conflict, use the same name for a scalar variable, an array, or
a hash--or, for that matter, for a filehandle, a directory handle, a
subroutine name, a format name, or a label.  This means that $foo
and @@foo are two different variables.  It also means that C<$foo[1]>
is a part of @@foo, not a part of $foo.  This may seem a bit weird,
but that's okay, because it is weird.
X<namespace>

Because variable references always start with '$', '@@', or '%', the
"reserved" words aren't in fact reserved with respect to variable
names.  They I<are> reserved with respect to labels and filehandles,
however, which don't have an initial special character.  You can't
have a filehandle named "log", for instance.  Hint: you could say
C<open(LOG,'logfile')> rather than C<open(log,'logfile')>.  Using
uppercase filehandles also improves readability and protects you
from conflict with future reserved words.  Case I<is> significant--"FOO",
"Foo", and "foo" are all different names.  Names that start with a
letter or underscore may also contain digits and underscores.
X<identifier, case sensitivity>
X<case>

It is possible to replace such an alphanumeric name with an expression
that returns a reference to the appropriate type.  For a description
of this, see L<perlref>.

Names that start with a digit may contain only more digits.  Names
that do not start with a letter, underscore, digit or a caret are
limited to one character, e.g.,  C<$%> or
C<$$>.  (Most of these one character names have a predefined
significance to Perl.  For instance, C<$$> is the current process
id.  And all such names are reserved for Perl's possible use.)

=head2 Identifier parsing
X<identifiers>

Up until Perl 5.18, the actual rules of what a valid identifier
was were a bit fuzzy.  However, in general, anything defined here should
work on previous versions of Perl, while the opposite -- edge cases
that work in previous versions, but aren't defined here -- probably
won't work on newer versions.
As an important side note, please note that the following only applies
to bareword identifiers as found in Perl source code, not identifiers
introduced through symbolic references, which have much fewer
restrictions.
If working under the effect of the C<use utf8;> pragma, the following
rules apply:

    / (?[ ( \p{Word} & \p{XID_Start} ) + [_] ])
      (?[ ( \p{Word} & \p{XID_Continue} ) ]) *    /x

That is, a "start" character followed by any number of "continue"
characters.  Perl requires every character in an identifier to also
match C<\w> (this prevents some problematic cases); and Perl
additionally accepts identfier names beginning with an underscore.

If not under C<use utf8>, the source is treated as ASCII + 128 extra
generic characters, and identifiers should match

    / (?aa) (?!\d) \w+ /x

That is, any word character in the ASCII range, as long as the first
character is not a digit.

There are two package separators in Perl: A double colon (C<::>) and a single
quote (C<'>).  Normal identifiers can start or end with a double colon, and
can contain several parts delimited by double colons.
Single quotes have similar rules, but with the exception that they are not
legal at the end of an identifier: That is, C<$'foo> and C<$foo'bar> are
legal, but C<$foo'bar'> is not.

Additionally, if the identifier is preceded by a sigil --
that is, if the identifier is part of a variable name -- it
may optionally be enclosed in braces.

While you can mix double colons with singles quotes, the quotes must come
after the colons: C<$::::'foo> and C<$foo::'bar> are legal, but C<$::'::foo>
and C<$foo'::bar> are not.

Put together, a grammar to match a basic identifier becomes

 /
  (?(DEFINE)
      (?<variable>
          (?&sigil)
          (?:
                  (?&normal_identifier)
              |   \{ \s* (?&normal_identifier) \s* \}
          )
      )
      (?<normal_identifier>
          (?: :: )* '?
           (?&basic_identifier)
           (?: (?= (?: :: )+ '? | (?: :: )* ' ) (?&normal_identifier) )?
          (?: :: )*
      )
      (?<basic_identifier>
        # is use utf8 on?
          (?(?{ (caller(0))[8] & $utf8::hint_bits })
              (?&Perl_XIDS) (?&Perl_XIDC)*
            | (?aa) (?!\d) \w+
          )
      )
      (?<sigil> [&*\$\@@\%])
      (?<Perl_XIDS> (?[ ( \p{Word} & \p{XID_Start} ) + [_] ]) )
      (?<Perl_XIDC> (?[ \p{Word} & \p{XID_Continue} ]) )
  )
 /x

Meanwhile, special identifiers don't follow the above rules; For the most
part, all of the identifiers in this category have a special meaning given
by Perl.  Because they have special parsing rules, these generally can't be
fully-qualified.  They come in six forms (but don't use forms 5 and 6):

=over

=item 1.

A sigil, followed solely by digits matching C<\p{POSIX_Digit}>, like
C<$0>, C<$1>, or C<$10000>.

=item 2.

A sigil followed by a single character matching the C<\p{POSIX_Punct}>
property, like C<$!> or C<%+>, except the character C<"{"> doesn't work.

=item 3.

A sigil, followed by a caret and any one of the characters
C<[][A-Z^_?\]>, like C<$^V> or C<$^]>.

=item 4.

Similar to the above, a sigil, followed by bareword text in braces,
where the first character is a caret.  The next character is any one of
the characters C<[][A-Z^_?\]>, followed by ASCII word characters.  An
example is C<${^GLOBAL_PHASE}>.

=item 5.

A sigil, followed by any single character in the range C<[\x80-\xFF]>
when not under C<S<"use utf8">>.  (Under C<S<"use utf8">>, the normal
identifier rules given earlier in this section apply.)  Use of
non-graphic characters (the C1 controls, the NO-BREAK SPACE, and the
SOFT HYPHEN) is deprecated and will be forbidden in a future Perl
version.  The use of the other characters is unwise, as these are all
reserved to have special meaning to Perl, and none of them currently
do have special meaning, though this could change without notice.

Note that an implication of this form is that there are identifiers only
legal under C<S<"use utf8">>, and vice-versa, for example the identifier
C<$E<233>tat> is legal under C<S<"use utf8">>, but is otherwise
considered to be the single character variable C<$E<233>> followed by
the bareword C<"tat">, the combination of which is a syntax error.

=item 6.

This is a combination of the previous two forms.  It is valid only when
not under S<C<"use utf8">> (normal identifier rules apply when under
S<C<"use utf8">>).  The form is a sigil, followed by text in braces,
where the first character is any one of the characters in the range
C<[\x80-\xFF]> followed by ASCII word characters up to the trailing
brace.

The same caveats as the previous form apply:  The non-graphic characters
are deprecated, it is unwise to use this form at all, and utf8ness makes
a big difference.

=back

Prior to Perl v5.24, non-graphical ASCII control characters were also
allowed in some situations; this had been deprecated since v5.20.

=head2 Context
X<context> X<scalar context> X<list context>

The interpretation of operations and values in Perl sometimes depends
on the requirements of the context around the operation or value.
There are two major contexts: list and scalar.  Certain operations
return list values in contexts wanting a list, and scalar values
otherwise.  If this is true of an operation it will be mentioned in
the documentation for that operation.  In other words, Perl overloads
certain operations based on whether the expected return value is
singular or plural.  Some words in English work this way, like "fish"
and "sheep".

In a reciprocal fashion, an operation provides either a scalar or a
list context to each of its arguments.  For example, if you say

    int( <STDIN> )

the integer operation provides scalar context for the <>
operator, which responds by reading one line from STDIN and passing it
back to the integer operation, which will then find the integer value
of that line and return that.  If, on the other hand, you say

    sort( <STDIN> )

then the sort operation provides list context for <>, which
will proceed to read every line available up to the end of file, and
pass that list of lines back to the sort routine, which will then
sort those lines and return them as a list to whatever the context
of the sort was.

Assignment is a little bit special in that it uses its left argument
to determine the context for the right argument.  Assignment to a
scalar evaluates the right-hand side in scalar context, while
assignment to an array or hash evaluates the righthand side in list
context.  Assignment to a list (or slice, which is just a list
anyway) also evaluates the right-hand side in list context.

When you use the C<use warnings> pragma or Perl's B<-w> command-line 
option, you may see warnings
about useless uses of constants or functions in "void context".
Void context just means the value has been discarded, such as a
statement containing only C<"fred";> or C<getpwuid(0);>.  It still
counts as scalar context for functions that care whether or not
they're being called in list context.

User-defined subroutines may choose to care whether they are being
called in a void, scalar, or list context.  Most subroutines do not
need to bother, though.  That's because both scalars and lists are
automatically interpolated into lists.  See L<perlfunc/wantarray>
for how you would dynamically discern your function's calling
context.

=head2 Scalar values
X<scalar> X<number> X<string> X<reference>

All data in Perl is a scalar, an array of scalars, or a hash of
scalars.  A scalar may contain one single value in any of three
different flavors: a number, a string, or a reference.  In general,
conversion from one form to another is transparent.  Although a
scalar may not directly hold multiple values, it may contain a
reference to an array or hash which in turn contains multiple values.

Scalars aren't necessarily one thing or another.  There's no place
to declare a scalar variable to be of type "string", type "number",
type "reference", or anything else.  Because of the automatic
conversion of scalars, operations that return scalars don't need
to care (and in fact, cannot care) whether their caller is looking
for a string, a number, or a reference.  Perl is a contextually
polymorphic language whose scalars can be strings, numbers, or
references (which includes objects).  Although strings and numbers
are considered pretty much the same thing for nearly all purposes,
references are strongly-typed, uncastable pointers with builtin
reference-counting and destructor invocation.

A scalar value is interpreted as FALSE in the Boolean sense
if it is undefined, the null string or the number 0 (or its
string equivalent, "0"), and TRUE if it is anything else.  The
Boolean context is just a special kind of scalar context where no 
conversion to a string or a number is ever performed.
X<boolean> X<bool> X<true> X<false> X<truth>

There are actually two varieties of null strings (sometimes referred
to as "empty" strings), a defined one and an undefined one.  The
defined version is just a string of length zero, such as C<"">.
The undefined version is the value that indicates that there is
no real value for something, such as when there was an error, or
at end of file, or when you refer to an uninitialized variable or
element of an array or hash.  Although in early versions of Perl,
an undefined scalar could become defined when first used in a
place expecting a defined value, this no longer happens except for
rare cases of autovivification as explained in L<perlref>.  You can
use the defined() operator to determine whether a scalar value is
defined (this has no meaning on arrays or hashes), and the undef()
operator to produce an undefined value.
X<defined> X<undefined> X<undef> X<null> X<string, null>

To find out whether a given string is a valid non-zero number, it's
sometimes enough to test it against both numeric 0 and also lexical
"0" (although this will cause noises if warnings are on).  That's 
because strings that aren't numbers count as 0, just as they do in B<awk>:

    if ($str == 0 && $str ne "0")  {
	warn "That doesn't look like a number";
    }

That method may be best because otherwise you won't treat IEEE
notations like C<NaN> or C<Infinity> properly.  At other times, you
might prefer to determine whether string data can be used numerically
by calling the POSIX::strtod() function or by inspecting your string
with a regular expression (as documented in L<perlre>).

    warn "has nondigits"	if     /\D/;
    warn "not a natural number" unless /^\d+$/;             # rejects -3
    warn "not an integer"       unless /^-?\d+$/;           # rejects +3
    warn "not an integer"       unless /^[+-]?\d+$/;
    warn "not a decimal number" unless /^-?\d+\.?\d*$/;     # rejects .2
    warn "not a decimal number" unless /^-?(?:\d+(?:\.\d*)?|\.\d+)$/;
    warn "not a C float"
	unless /^([+-]?)(?=\d|\.\d)\d*(\.\d*)?([Ee]([+-]?\d+))?$/;

The length of an array is a scalar value.  You may find the length
of array @@days by evaluating C<$#days>, as in B<csh>.  However, this
isn't the length of the array; it's the subscript of the last element,
which is a different value since there is ordinarily a 0th element.
Assigning to C<$#days> actually changes the length of the array.
Shortening an array this way destroys intervening values.  Lengthening
an array that was previously shortened does not recover values
that were in those elements.
X<$#> X<array, length>

You can also gain some minuscule measure of efficiency by pre-extending
an array that is going to get big.  You can also extend an array
by assigning to an element that is off the end of the array.  You
can truncate an array down to nothing by assigning the null list
() to it.  The following are equivalent:

    @@whatever = ();
    $#whatever = -1;

If you evaluate an array in scalar context, it returns the length
of the array.  (Note that this is not true of lists, which return
the last value, like the C comma operator, nor of built-in functions,
which return whatever they feel like returning.)  The following is
always true:
X<array, length>

    scalar(@@whatever) == $#whatever + 1;

Some programmers choose to use an explicit conversion so as to 
leave nothing to doubt:

    $element_count = scalar(@@whatever);

If you evaluate a hash in scalar context, it returns false if the
hash is empty.  If there are any key/value pairs, it returns true;
more precisely, the value returned is a string consisting of the
number of used buckets and the number of allocated buckets, separated
by a slash.  This is pretty much useful only to find out whether
Perl's internal hashing algorithm is performing poorly on your data
set.  For example, you stick 10,000 things in a hash, but evaluating
%HASH in scalar context reveals C<"1/16">, which means only one out
of sixteen buckets has been touched, and presumably contains all
10,000 of your items.  This isn't supposed to happen.  If a tied hash
is evaluated in scalar context, the C<SCALAR> method is called (with a
fallback to C<FIRSTKEY>).
X<hash, scalar context> X<hash, bucket> X<bucket>

You can preallocate space for a hash by assigning to the keys() function.
This rounds up the allocated buckets to the next power of two:

    keys(%users) = 1000;		# allocate 1024 buckets

=head2 Scalar value constructors
X<scalar, literal> X<scalar, constant>

Numeric literals are specified in any of the following floating point or
integer formats:

 12345
 12345.67
 .23E-10             # a very small number
 3.14_15_92          # a very important number
 4_294_967_296       # underscore for legibility
 0xff                # hex
 0xdead_beef         # more hex
 0377                # octal (only numbers, begins with 0)
 0b011011            # binary
 0x1.999ap-4         # hexadecimal floating point (the 'p' is required)

You are allowed to use underscores (underbars) in numeric literals
between digits for legibility (but not multiple underscores in a row:
C<23__500> is not legal; C<23_500> is).
You could, for example, group binary
digits by threes (as for a Unix-style mode argument such as 0b110_100_100)
or by fours (to represent nibbles, as in 0b1010_0110) or in other groups.
X<number, literal>

String literals are usually delimited by either single or double
quotes.  They work much like quotes in the standard Unix shells:
double-quoted string literals are subject to backslash and variable
substitution; single-quoted strings are not (except for C<\'> and
C<\\>).  The usual C-style backslash rules apply for making
characters such as newline, tab, etc., as well as some more exotic
forms.  See L<perlop/"Quote and Quote-like Operators"> for a list.
X<string, literal>

Hexadecimal, octal, or binary, representations in string literals
(e.g. '0xff') are not automatically converted to their integer
representation.  The hex() and oct() functions make these conversions
for you.  See L<perlfunc/hex> and L<perlfunc/oct> for more details.

Hexadecimal floating point can start just like a hexadecimal literal,
and it can be followed by an optional fractional hexadecimal part,
but it must be followed by C<p>, an optional sign, and a power of two.
The format is useful for accurately presenting floating point values,
avoiding conversions to or from decimal floating point, and therefore
avoiding possible loss in precision.  Notice that while most current
platforms use the 64-bit IEEE 754 floating point, not all do.  Another
potential source of (low-order) differences are the floating point
rounding modes, which can differ between CPUs, operating systems,
and compilers, and which Perl doesn't control.

You can also embed newlines directly in your strings, i.e., they can end
on a different line than they begin.  This is nice, but if you forget
your trailing quote, the error will not be reported until Perl finds
another line containing the quote character, which may be much further
on in the script.  Variable substitution inside strings is limited to
scalar variables, arrays, and array or hash slices.  (In other words,
names beginning with $ or @@, followed by an optional bracketed
expression as a subscript.)  The following code segment prints out "The
price is $Z<>100."
X<interpolation>

    $Price = '$100';	# not interpolated
    print "The price is $Price.\n";	# interpolated

There is no double interpolation in Perl, so the C<$100> is left as is.

By default floating point numbers substituted inside strings use the
dot (".")  as the decimal separator.  If C<use locale> is in effect,
and POSIX::setlocale() has been called, the character used for the
decimal separator is affected by the LC_NUMERIC locale.
See L<perllocale> and L<POSIX>.

As in some shells, you can enclose the variable name in braces to
disambiguate it from following alphanumerics (and underscores).
You must also do
this when interpolating a variable into a string to separate the
variable name from a following double-colon or an apostrophe, since
these would be otherwise treated as a package separator:
X<interpolation>

    $who = "Larry";
    print PASSWD "${who}::0:0:Superuser:/:/bin/perl\n";
    print "We use ${who}speak when ${who}'s here.\n";

Without the braces, Perl would have looked for a $whospeak, a
C<$who::0>, and a C<$who's> variable.  The last two would be the
$0 and the $s variables in the (presumably) non-existent package
C<who>.

In fact, a simple identifier within such curlies is forced to be
a string, and likewise within a hash subscript.  Neither need
quoting.  Our earlier example, C<$days{'Feb'}> can be written as
C<$days{Feb}> and the quotes will be assumed automatically.  But
anything more complicated in the subscript will be interpreted as an
expression.  This means for example that C<$version{2.0}++> is
equivalent to C<$version{2}++>, not to C<$version{'2.0'}++>.

=head3 Special floating point: infinity (Inf) and not-a-number (NaN)

Floating point values include the special values C<Inf> and C<NaN>,
for infinity and not-a-number.  The infinity can be also negative.

The infinity is the result of certain math operations that overflow
the floating point range, like 9**9**9.  The not-a-number is the
result when the result is undefined or unrepresentable.  Though note
that you cannot get C<NaN> from some common "undefined" or
"out-of-range" operations like dividing by zero, or square root of
a negative number, since Perl generates fatal errors for those.

The infinity and not-a-number have their own special arithmetic rules.
The general rule is that they are "contagious": C<Inf> plus one is
C<Inf>, and C<NaN> plus one is C<NaN>.  Where things get interesting
is when you combine infinities and not-a-numbers: C<Inf> minus C<Inf>
and C<Inf> divided by C<INf> are C<NaN> (while C<Inf> plus C<Inf> is
C<Inf> and C<Inf> times C<Inf> is C<Inf>).  C<NaN> is also curious
in that it does not equal any number, I<including> itself:
C<NaN> != C<NaN>.

Perl doesn't understand C<Inf> and C<NaN> as numeric literals, but
you can have them as strings, and Perl will convert them as needed:
"Inf" + 1.  (You can, however, import them from the POSIX extension;
C<use POSIX qw(Inf NaN);> and then use them as literals.)

Note that on input (string to number) Perl accepts C<Inf> and C<NaN>
in many forms.   Case is ignored, and the Win32-specific forms like
C<1.#INF> are understood, but on output the values are normalized to
C<Inf> and C<NaN>.

=head3 Version Strings
X<version string> X<vstring> X<v-string>

A literal of the form C<v1.20.300.4000> is parsed as a string composed
of characters with the specified ordinals.  This form, known as
v-strings, provides an alternative, more readable way to construct
strings, rather than use the somewhat less readable interpolation form
C<"\x{1}\x{14}\x{12c}\x{fa0}">.  This is useful for representing
Unicode strings, and for comparing version "numbers" using the string
comparison operators, C<cmp>, C<gt>, C<lt> etc.  If there are two or
more dots in the literal, the leading C<v> may be omitted.

    print v9786;              # prints SMILEY, "\x{263a}"
    print v102.111.111;       # prints "foo"
    print 102.111.111;        # same

Such literals are accepted by both C<require> and C<use> for
doing a version check.  Note that using the v-strings for IPv4
addresses is not portable unless you also use the
inet_aton()/inet_ntoa() routines of the Socket package.

Note that since Perl 5.8.1 the single-number v-strings (like C<v65>)
are not v-strings before the C<< => >> operator (which is usually used
to separate a hash key from a hash value); instead they are interpreted
as literal strings ('v65').  They were v-strings from Perl 5.6.0 to
Perl 5.8.0, but that caused more confusion and breakage than good.
Multi-number v-strings like C<v65.66> and C<65.66.67> continue to
be v-strings always.

=head3 Special Literals
X<special literal> X<__END__> X<__DATA__> X<END> X<DATA>
X<end> X<data> X<^D> X<^Z>

The special literals __FILE__, __LINE__, and __PACKAGE__
represent the current filename, line number, and package name at that
point in your program.  __SUB__ gives a reference to the current
subroutine.  They may be used only as separate tokens; they
will not be interpolated into strings.  If there is no current package
(due to an empty C<package;> directive), __PACKAGE__ is the undefined
value.  (But the empty C<package;> is no longer supported, as of version
5.10.)  Outside of a subroutine, __SUB__ is the undefined value.  __SUB__
is only available in 5.16 or higher, and only with a C<use v5.16> or
C<use feature "current_sub"> declaration.
X<__FILE__> X<__LINE__> X<__PACKAGE__> X<__SUB__>
X<line> X<file> X<package>

The two control characters ^D and ^Z, and the tokens __END__ and __DATA__
may be used to indicate the logical end of the script before the actual
end of file.  Any following text is ignored.

Text after __DATA__ may be read via the filehandle C<PACKNAME::DATA>,
where C<PACKNAME> is the package that was current when the __DATA__
token was encountered.  The filehandle is left open pointing to the
line after __DATA__.  The program should C<close DATA> when it is done
reading from it.  (Leaving it open leaks filehandles if the module is
reloaded for any reason, so it's a safer practice to close it.)  For
compatibility with older scripts written before __DATA__ was
introduced, __END__ behaves like __DATA__ in the top level script (but
not in files loaded with C<require> or C<do>) and leaves the remaining
contents of the file accessible via C<main::DATA>.

See L<SelfLoader> for more description of __DATA__, and
an example of its use.  Note that you cannot read from the DATA
filehandle in a BEGIN block: the BEGIN block is executed as soon
as it is seen (during compilation), at which point the corresponding
__DATA__ (or __END__) token has not yet been seen.

=head3 Barewords
X<bareword>

A word that has no other interpretation in the grammar will
be treated as if it were a quoted string.  These are known as
"barewords".  As with filehandles and labels, a bareword that consists
entirely of lowercase letters risks conflict with future reserved
words, and if you use the C<use warnings> pragma or the B<-w> switch, 
Perl will warn you about any such words.  Perl limits barewords (like
identifiers) to about 250 characters.  Future versions of Perl are likely
to eliminate these arbitrary limitations.

Some people may wish to outlaw barewords entirely.  If you
say

    use strict 'subs';

then any bareword that would NOT be interpreted as a subroutine call
produces a compile-time error instead.  The restriction lasts to the
end of the enclosing block.  An inner block may countermand this
by saying C<no strict 'subs'>.

=head3 Array Interpolation
X<array, interpolation> X<interpolation, array> X<$">

Arrays and slices are interpolated into double-quoted strings
by joining the elements with the delimiter specified in the C<$">
variable (C<$LIST_SEPARATOR> if "use English;" is specified), 
space by default.  The following are equivalent:

    $temp = join($", @@ARGV);
    system "echo $temp";

    system "echo @@ARGV";

Within search patterns (which also undergo double-quotish substitution)
there is an unfortunate ambiguity:  Is C</$foo[bar]/> to be interpreted as
C</${foo}[bar]/> (where C<[bar]> is a character class for the regular
expression) or as C</${foo[bar]}/> (where C<[bar]> is the subscript to array
@@foo)?  If @@foo doesn't otherwise exist, then it's obviously a
character class.  If @@foo exists, Perl takes a good guess about C<[bar]>,
and is almost always right.  If it does guess wrong, or if you're just
plain paranoid, you can force the correct interpretation with curly
braces as above.

If you're looking for the information on how to use here-documents,
which used to be here, that's been moved to
L<perlop/Quote and Quote-like Operators>.

=head2 List value constructors
X<list>

List values are denoted by separating individual values by commas
(and enclosing the list in parentheses where precedence requires it):

    (LIST)

In a context not requiring a list value, the value of what appears
to be a list literal is simply the value of the final element, as
with the C comma operator.  For example,

    @@foo = ('cc', '-E', $bar);

assigns the entire list value to array @@foo, but

    $foo = ('cc', '-E', $bar);

assigns the value of variable $bar to the scalar variable $foo.
Note that the value of an actual array in scalar context is the
length of the array; the following assigns the value 3 to $foo:

    @@foo = ('cc', '-E', $bar);
    $foo = @@foo;                # $foo gets 3

You may have an optional comma before the closing parenthesis of a
list literal, so that you can say:

    @@foo = (
        1,
        2,
        3,
    );

To use a here-document to assign an array, one line per element,
you might use an approach like this:

    @@sauces = <<End_Lines =~ m/(\S.*\S)/g;
        normal tomato
        spicy tomato
        green chile
        pesto
        white wine
    End_Lines

LISTs do automatic interpolation of sublists.  That is, when a LIST is
evaluated, each element of the list is evaluated in list context, and
the resulting list value is interpolated into LIST just as if each
individual element were a member of LIST.  Thus arrays and hashes lose their
identity in a LIST--the list

    (@@foo,@@bar,&SomeSub,%glarch)

contains all the elements of @@foo followed by all the elements of @@bar,
followed by all the elements returned by the subroutine named SomeSub 
called in list context, followed by the key/value pairs of %glarch.
To make a list reference that does I<NOT> interpolate, see L<perlref>.

The null list is represented by ().  Interpolating it in a list
has no effect.  Thus ((),(),()) is equivalent to ().  Similarly,
interpolating an array with no elements is the same as if no
array had been interpolated at that point.

This interpolation combines with the facts that the opening
and closing parentheses are optional (except when necessary for
precedence) and lists may end with an optional comma to mean that
multiple commas within lists are legal syntax.  The list C<1,,3> is a
concatenation of two lists, C<1,> and C<3>, the first of which ends
with that optional comma.  C<1,,3> is C<(1,),(3)> is C<1,3> (And
similarly for C<1,,,3> is C<(1,),(,),3> is C<1,3> and so on.)  Not that
we'd advise you to use this obfuscation.

A list value may also be subscripted like a normal array.  You must
put the list in parentheses to avoid ambiguity.  For example:

    # Stat returns list value.
    $time = (stat($file))[8];

    # SYNTAX ERROR HERE.
    $time = stat($file)[8];  # OOPS, FORGOT PARENTHESES

    # Find a hex digit.
    $hexdigit = ('a','b','c','d','e','f')[$digit-10];

    # A "reverse comma operator".
    return (pop(@@foo),pop(@@foo))[0];

Lists may be assigned to only when each element of the list
is itself legal to assign to:

    ($a, $b, $c) = (1, 2, 3);

    ($map{'red'}, $map{'blue'}, $map{'green'}) = (0x00f, 0x0f0, 0xf00);

An exception to this is that you may assign to C<undef> in a list.
This is useful for throwing away some of the return values of a
function:

    ($dev, $ino, undef, undef, $uid, $gid) = stat($file);

As of Perl 5.22, you can also use C<(undef)x2> instead of C<undef, undef>.
(You can also do C<($x) x 2>, which is less useful, because it assigns to
the same variable twice, clobbering the first value assigned.)

List assignment in scalar context returns the number of elements
produced by the expression on the right side of the assignment:

    $x = (($foo,$bar) = (3,2,1));       # set $x to 3, not 2
    $x = (($foo,$bar) = f());           # set $x to f()'s return count

This is handy when you want to do a list assignment in a Boolean
context, because most list functions return a null list when finished,
which when assigned produces a 0, which is interpreted as FALSE.

It's also the source of a useful idiom for executing a function or
performing an operation in list context and then counting the number of
return values, by assigning to an empty list and then using that
assignment in scalar context.  For example, this code:

    $count = () = $string =~ /\d+/g;

will place into $count the number of digit groups found in $string.
This happens because the pattern match is in list context (since it
is being assigned to the empty list), and will therefore return a list
of all matching parts of the string.  The list assignment in scalar
context will translate that into the number of elements (here, the
number of times the pattern matched) and assign that to $count.  Note
that simply using

    $count = $string =~ /\d+/g;

would not have worked, since a pattern match in scalar context will
only return true or false, rather than a count of matches.

The final element of a list assignment may be an array or a hash:

    ($a, $b, @@rest) = split;
    my($a, $b, %rest) = @@_;

You can actually put an array or hash anywhere in the list, but the first one
in the list will soak up all the values, and anything after it will become
undefined.  This may be useful in a my() or local().

A hash can be initialized using a literal list holding pairs of
items to be interpreted as a key and a value:

    # same as map assignment above
    %map = ('red',0x00f,'blue',0x0f0,'green',0xf00);

While literal lists and named arrays are often interchangeable, that's
not the case for hashes.  Just because you can subscript a list value like
a normal array does not mean that you can subscript a list value as a
hash.  Likewise, hashes included as parts of other lists (including
parameters lists and return lists from functions) always flatten out into
key/value pairs.  That's why it's good to use references sometimes.

It is often more readable to use the C<< => >> operator between key/value
pairs.  The C<< => >> operator is mostly just a more visually distinctive
synonym for a comma, but it also arranges for its left-hand operand to be
interpreted as a string if it's a bareword that would be a legal simple
identifier.  C<< => >> doesn't quote compound identifiers, that contain
double colons.  This makes it nice for initializing hashes:

    %map = (
                 red   => 0x00f,
                 blue  => 0x0f0,
                 green => 0xf00,
   );

or for initializing hash references to be used as records:

    $rec = {
                witch => 'Mable the Merciless',
                cat   => 'Fluffy the Ferocious',
                date  => '10/31/1776',
    };

or for using call-by-named-parameter to complicated functions:

   $field = $query->radio_group(
               name      => 'group_name',
               values    => ['eenie','meenie','minie'],
               default   => 'meenie',
               linebreak => 'true',
               labels    => \%labels
   );

Note that just because a hash is initialized in that order doesn't
mean that it comes out in that order.  See L<perlfunc/sort> for examples
of how to arrange for an output ordering.

If a key appears more than once in the initializer list of a hash, the last
occurrence wins:

    %circle = (
                  center => [5, 10],
                  center => [27, 9],
                  radius => 100,
                  color => [0xDF, 0xFF, 0x00],
                  radius => 54,
    );

    # same as
    %circle = (
                  center => [27, 9],
                  color => [0xDF, 0xFF, 0x00],
                  radius => 54,
    );

This can be used to provide overridable configuration defaults:

    # values in %args take priority over %config_defaults
    %config = (%config_defaults, %args);

=head2 Subscripts

An array can be accessed one scalar at a
time by specifying a dollar sign (C<$>), then the
name of the array (without the leading C<@@>), then the subscript inside
square brackets.  For example:

    @@myarray = (5, 50, 500, 5000);
    print "The Third Element is", $myarray[2], "\n";

The array indices start with 0.  A negative subscript retrieves its 
value from the end.  In our example, C<$myarray[-1]> would have been 
5000, and C<$myarray[-2]> would have been 500.

Hash subscripts are similar, only instead of square brackets curly brackets
are used.  For example:

    %scientists = 
    (
        "Newton" => "Isaac",
        "Einstein" => "Albert",
        "Darwin" => "Charles",
        "Feynman" => "Richard",
    );

    print "Darwin's First Name is ", $scientists{"Darwin"}, "\n";

You can also subscript a list to get a single element from it:

    $dir = (getpwnam("daemon"))[7];

=head2 Multi-dimensional array emulation

Multidimensional arrays may be emulated by subscripting a hash with a
list.  The elements of the list are joined with the subscript separator
(see L<perlvar/$;>).

    $foo{$a,$b,$c}

is equivalent to

    $foo{join($;, $a, $b, $c)}

The default subscript separator is "\034", the same as SUBSEP in B<awk>.

=head2 Slices
X<slice> X<array, slice> X<hash, slice>

A slice accesses several elements of a list, an array, or a hash
simultaneously using a list of subscripts.  It's more convenient
than writing out the individual elements as a list of separate
scalar values.

    ($him, $her)   = @@folks[0,-1];              # array slice
    @@them          = @@folks[0 .. 3];            # array slice
    ($who, $home)  = @@ENV{"USER", "HOME"};      # hash slice
    ($uid, $dir)   = (getpwnam("daemon"))[2,7]; # list slice

Since you can assign to a list of variables, you can also assign to
an array or hash slice.

    @@days[3..5]    = qw/Wed Thu Fri/;
    @@colors{'red','blue','green'} 
                   = (0xff0000, 0x0000ff, 0x00ff00);
    @@folks[0, -1]  = @@folks[-1, 0];

The previous assignments are exactly equivalent to

    ($days[3], $days[4], $days[5]) = qw/Wed Thu Fri/;
    ($colors{'red'}, $colors{'blue'}, $colors{'green'})
                   = (0xff0000, 0x0000ff, 0x00ff00);
    ($folks[0], $folks[-1]) = ($folks[-1], $folks[0]);

Since changing a slice changes the original array or hash that it's
slicing, a C<foreach> construct will alter some--or even all--of the
values of the array or hash.

    foreach (@@array[ 4 .. 10 ]) { s/peter/paul/ } 

    foreach (@@hash{qw[key1 key2]}) {
        s/^\s+//;           # trim leading whitespace
        s/\s+$//;           # trim trailing whitespace
        s/(\w+)/\u\L$1/g;   # "titlecase" words
    }

As a special exception, when you slice a list (but not an array or a hash),
if the list evaluates to empty, then taking a slice of that empty list will
always yield the empty list in turn.  Thus:

    @@a = ()[0,1];          # @@a has no elements
    @@b = (@@a)[0,1];        # @@b has no elements
    @@c = (sub{}->())[0,1]; # @@c has no elements
    @@d = ('a','b')[0,1];   # @@d has two elements
    @@e = (@@d)[0,1,8,9];    # @@e has four elements
    @@f = (@@d)[8,9];        # @@f has two elements

This makes it easy to write loops that terminate when a null list
is returned:

    while ( ($home, $user) = (getpwent)[7,0] ) {
        printf "%-8s %s\n", $user, $home;
    }

As noted earlier in this document, the scalar sense of list assignment
is the number of elements on the right-hand side of the assignment.
The null list contains no elements, so when the password file is
exhausted, the result is 0, not 2.

Slices in scalar context return the last item of the slice.

    @@a = qw/first second third/;
    %h = (first => 'A', second => 'B');
    $t = @@a[0, 1];                  # $t is now 'second'
    $u = @@h{'first', 'second'};     # $u is now 'B'

If you're confused about why you use an '@@' there on a hash slice
instead of a '%', think of it like this.  The type of bracket (square
or curly) governs whether it's an array or a hash being looked at.
On the other hand, the leading symbol ('$' or '@@') on the array or
hash indicates whether you are getting back a singular value (a
scalar) or a plural one (a list).

=head3 Key/Value Hash Slices

Starting in Perl 5.20, a hash slice operation
with the % symbol is a variant of slice operation
returning a list of key/value pairs rather than just values:

    %h = (blonk => 2, foo => 3, squink => 5, bar => 8);
    %subset = %h{'foo', 'bar'}; # key/value hash slice
    # %subset is now (foo => 3, bar => 8)

However, the result of such a slice cannot be localized, deleted or used
in assignment.  These are otherwise very much consistent with hash slices
using the @@ symbol.

=head3 Index/Value Array Slices

Similar to key/value hash slices (and also introduced
in Perl 5.20), the % array slice syntax returns a list
of index/value pairs:

    @@a = "a".."z";
    @@list = %a[3,4,6];
    # @@list is now (3, "d", 4, "e", 6, "g")

=head2 Typeglobs and Filehandles
X<typeglob> X<filehandle> X<*>

Perl uses an internal type called a I<typeglob> to hold an entire
symbol table entry.  The type prefix of a typeglob is a C<*>, because
it represents all types.  This used to be the preferred way to
pass arrays and hashes by reference into a function, but now that
we have real references, this is seldom needed.  

The main use of typeglobs in modern Perl is create symbol table aliases.
This assignment:

    *this = *that;

makes $this an alias for $that, @@this an alias for @@that, %this an alias
for %that, &this an alias for &that, etc.  Much safer is to use a reference.
This:

    local *Here::blue = \$There::green;

temporarily makes $Here::blue an alias for $There::green, but doesn't
make @@Here::blue an alias for @@There::green, or %Here::blue an alias for
%There::green, etc.  See L<perlmod/"Symbol Tables"> for more examples
of this.  Strange though this may seem, this is the basis for the whole
module import/export system.

Another use for typeglobs is to pass filehandles into a function or
to create new filehandles.  If you need to use a typeglob to save away
a filehandle, do it this way:

    $fh = *STDOUT;

or perhaps as a real reference, like this:

    $fh = \*STDOUT;

See L<perlsub> for examples of using these as indirect filehandles
in functions.

Typeglobs are also a way to create a local filehandle using the local()
operator.  These last until their block is exited, but may be passed back.
For example:

    sub newopen {
        my $path = shift;
        local  *FH;  # not my!
        open   (FH, $path)          or  return undef;
        return *FH;
    }
    $fh = newopen('/etc/passwd');

Now that we have the C<*foo{THING}> notation, typeglobs aren't used as much
for filehandle manipulations, although they're still needed to pass brand
new file and directory handles into or out of functions.  That's because
C<*HANDLE{IO}> only works if HANDLE has already been used as a handle.
In other words, C<*FH> must be used to create new symbol table entries;
C<*foo{THING}> cannot.  When in doubt, use C<*FH>.

All functions that are capable of creating filehandles (open(),
opendir(), pipe(), socketpair(), sysopen(), socket(), and accept())
automatically create an anonymous filehandle if the handle passed to
them is an uninitialized scalar variable.  This allows the constructs
such as C<open(my $fh, ...)> and C<open(local $fh,...)> to be used to
create filehandles that will conveniently be closed automatically when
the scope ends, provided there are no other references to them.  This
largely eliminates the need for typeglobs when opening filehandles
that must be passed around, as in the following example:

    sub myopen {
        open my $fh, "@@_"
             or die "Can't open '@@_': $!";
        return $fh;
    }

    {
        my $f = myopen("</etc/motd");
        print <$f>;
        # $f implicitly closed here
    }

Note that if an initialized scalar variable is used instead the
result is different: C<my $fh='zzz'; open($fh, ...)> is equivalent
to C<open( *{'zzz'}, ...)>.
C<use strict 'refs'> forbids such practice.

Another way to create anonymous filehandles is with the Symbol
module or with the IO::Handle module and its ilk.  These modules
have the advantage of not hiding different types of the same name
during the local().  See the bottom of L<perlfunc/open> for an
example.

=head1 SEE ALSO

See L<perlvar> for a description of Perl's built-in variables and
a discussion of legal variable names.  See L<perlref>, L<perlsub>,
and L<perlmod/"Symbol Tables"> for more discussion on typeglobs and
the C<*foo{THING}> syntax.
@


1.15
log
@Fix merge conflicts, remove extra files, match upstream perl-5.20.1

ok deraadt@@ sthen@@ espie@@ miod@@
@
text
@d40 2
a41 2
the inner working of Perl have names containing punctuation characters
and control characters.  These are documented in L<perlvar>.
d102 2
a103 2
that do not start with a letter, underscore, digit or a caret (i.e.
a control character) are limited to one character, e.g.,  C<$%> or
d106 1
a106 1
id.)
d132 1
a132 1
controls, and identifiers should match
d187 1
a187 1
fully-qualified.  They come in four forms:
d191 1
a191 2
=item A sigil, followed solely by digits matching \p{POSIX_Digit}, like C<$0>,
C<$1>, or C<$10000>.
d193 2
a194 14
=item A sigil, followed by either a caret and a single POSIX uppercase letter,
like C<$^V> or C<$^W>, or a sigil followed by a literal control character
matching the C<\p{POSIX_Cntrl}> property.
Due to a historical oddity, if not
running under C<use utf8>, the 128 extra controls in the C<[0x80-0xff]> range
may also be used in length one variables.  The use of a literal control
character is deprecated.  Support for this form will be removed in a future
version of perl.

=item Similar to the above, a sigil, followed by bareword text in brackets,
where the first character is either a caret followed by an uppercase letter,
or a literal control, like C<${^GLOBAL_PHASE}> or C<${\7LOBAL_PHASE}>.  The use
of a literal control character is deprecated.  Support for this form will be
removed in a future version of perl.
d196 46
a241 2
=item A sigil followed by a single character matching the C<\p{POSIX_Punct}>
property, like C<$!> or C<%+>.
d245 2
a246 2
Note that as of Perl 5.20, literal control characters in variable names
are deprecated.
d427 10
a436 9
    12345
    12345.67
    .23E-10             # a very small number
    3.14_15_92          # a very important number
    4_294_967_296       # underscore for legibility
    0xff                # hex
    0xdead_beef         # more hex   
    0377                # octal (only numbers, begins with 0)
    0b011011            # binary
d460 11
d518 31
d765 4
d964 10
a973 15
A slice of an empty list is still an empty list.  Thus:

    @@a = ()[1,0];           # @@a has no elements
    @@b = (@@a)[0,1];         # @@b has no elements

But:

    @@a = (1)[1,0];          # @@a has two elements
    @@b = (1,undef)[1,0,2];  # @@b has three elements

More generally, a slice yields the empty list if it indexes only
beyond the end of a list:

    @@a = (1)[  1,2];        # @@a has no elements
    @@b = (1)[0,1,2];        # @@b has three elements
d978 1
a978 1
    while ( ($home, $user) = (getpwent)[7,0]) {
@


1.14
log
@Merge perl-5.18.2 plus local patches, remove old files

OK espie@@ sthen@@ deraadt@@
@
text
@d123 7
a129 1
    / (?[ ( \p{Word} & \p{XID_Start} ) + [_] ]) \p{XID_Continue}* /x
d144 1
a144 2
legal, but C<$foo'bar'> are not.

d146 1
a146 5
Finally, if the identifier is preceded by a sigil --
More so, normal identifiers can start or end with any number
of double colons (::), and can contain several parts delimited
by double colons.
And additionally, if the identifier is preceded by a sigil --
d174 1
a174 1
              (?&Perl_XIDS) \p{XID_Continue}*
d180 1
d196 2
a197 1
matching the C<\p{POSIX_Cntrl}> property. Due to a historical oddity, if not
d199 3
a201 1
may also be used in length one variables.
d205 3
a207 1
or a literal control, like C<${^GLOBAL_PHASE}> or C<${\7LOBAL_PHASE}>.
d214 3
d468 1
a468 1
a string, and likewise within a hash subscript. Neither need
d927 24
@


1.13
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@d27 3
a29 2
(see L<perlmod/Packages> for details).  It's possible to substitute
for a simple identifier, an expression that produces a reference
d108 99
d335 1
a335 2
that were in those elements.  (It used to do so in Perl 4, but we
had to break this to make sure destructors were called when expected.)
d457 2
a458 2
In fact, an identifier within such curlies is forced to be a string,
as is any simple identifier within a hash subscript.  Neither need
d504 1
a504 1
value. (But the empty C<package;> is no longer supported, as of version
d647 1
a647 1
multiple commas within lists are legal syntax. The list C<1,,3> is a
d694 1
a694 1
assignment in scalar context. For example, this code:
d701 1
a701 1
of all matching parts of the string. The list assignment in scalar
d703 1
a703 1
number of times the pattern matched) and assign that to $count. Note
d737 2
a738 2
identifier. C<< => >> doesn't quote compound identifiers, that contain
double colons. This makes it nice for initializing hashes:
d768 23
d801 1
a801 1
The array indices start with 0. A negative subscript retrieves its 
d806 1
a806 1
are used. For example:
d825 1
a825 1
list. The elements of the list are joined with the subscript separator
a879 1
    @@c = (0,1)[2,3];        # @@c has no elements
d886 6
d971 1
a971 1
new file and directory handles into or out of functions. That's because
d979 1
a979 1
them is an uninitialized scalar variable. This allows the constructs
d982 1
a982 1
the scope ends, provided there are no other references to them. This
@


1.12
log
@merge in perl 5.12.2 plus local changes
@
text
@d55 1
a55 1
which works much like the word "these" or "those" does in English,
d143 1
a143 1
anyway) also evaluates the righthand side in list context.
d182 3
a184 2
A scalar value is interpreted as TRUE in the Boolean sense if it is not
the null string or the number 0 (or its string equivalent, "0").  The
a254 8
    scalar(@@whatever) == $#whatever - $[ + 1;

Version 5 of Perl changed the semantics of C<$[>: files that don't set
the value of C<$[> no longer need to worry about whether another
file changed its value.  (In other words, use of C<$[> is deprecated.)
So in general you can assume that
X<$[>

d272 2
a273 2
is evaluated in scalar context, a fatal error will result, since this
bucket usage information is currently not available for tied hashes.
d298 3
a300 1
between digits for legibility.  You could, for example, group binary
d389 1
a389 1
to separate a hash key from a hash value), instead they are interpreted
d401 2
a402 1
point in your program.  They may be used only as separate tokens; they
d405 6
a410 2
value.
X<__FILE__> X<__LINE__> X<__PACKAGE__> X<line> X<file> X<package>
d419 7
a425 6
contents after __DATA__.  It is the program's responsibility to
C<close DATA> when it is done reading from it.  For compatibility with
older scripts written before __DATA__ was introduced, __END__ behaves
like __DATA__ in the top level script (but not in files loaded with
C<require> or C<do>) and leaves the remaining contents of the
file accessible via C<main::DATA>.
d455 1
a455 1
=head3 Array Joining Delimiter
d671 2
a672 1
An array is subscripted by specifying a dollar sign (C<$>), then the
d696 18
a716 7
A common way to access an array or a hash is one scalar element at a
time.  You can also subscript a list to get a single element from it.

    $whoami = $ENV{"USER"};             # one element from the hash
    $parent = $ISA[0];                  # one element from the array
    $dir    = (getpwnam("daemon"))[7];  # likewise, but with list

d777 7
d879 1
a879 1
during the local().  See the bottom of L<perlfunc/open()> for an
@


1.11
log
@Merge in perl 5.10.1
@
text
@a373 5
B<Note:> Version Strings (v-strings) have been deprecated.  They will
be removed in some future release after Perl 5.8.1.  The marginal
benefits of v-strings were greatly outweighed by the potential for
Surprise and Confusion.

d636 3
a638 3
interpreted as a string -- if it's a bareword that would be a legal simple
identifier (C<< => >> doesn't quote compound identifiers, that contain
double colons). This makes it nice for initializing hashes:
@


1.10
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@d421 1
a421 1
Text after __DATA__ but may be read via the filehandle C<PACKNAME::DATA>,
d445 5
a449 2
Perl will warn you about any
such words.  Some people may wish to outlaw barewords entirely.  If you
d680 1
a680 1
    print "Element Number 2 is", $myarray[2], "\n";
@


1.9
log
@merge in perl 5.8.8
@
text
@d278 3
a280 1
10,000 of your items.  This isn't supposed to happen.
d340 6
d375 3
a377 2
not be available after Perl 5.8.  The marginal benefits of v-strings
were greatly outweighed by the potential for Surprise and Confusion.
d388 1
a388 1
    print v9786;              # prints UTF-8 encoded SMILEY, "\x{263a}"
d393 3
a395 4
doing a version check.  The C<$^V> special variable also contains the
running Perl interpreter's version in this form.  See L<perlvar/$^V>.
Note that using the v-strings for IPv4 addresses is not portable unless
you also use the inet_aton()/inet_ntoa() routines of the Socket package.
d427 1
a427 1
like __DATA__ in the toplevel script (but not in files loaded with
@


1.8
log
@sync in-tree perl with 5.8.6
@
text
@d8 1
d31 1
d41 1
d47 1
d57 1
d64 1
d81 1
d93 2
d108 1
d161 1
d186 1
d201 1
d236 1
d252 1
d260 1
d279 1
d287 1
d299 1
a299 1
    0377                # octal
d306 1
d315 1
d331 1
d344 1
d359 3
a361 2
anything more complicated in the subscript will be interpreted as
an expression.
d364 1
d398 2
d407 1
d430 1
d449 1
d476 1
d689 1
d766 1
@


1.7
log
@Resolve conflicts for perl 5.8.2, remove old files, and add OpenBSD-specific scaffolding
@
text
@d634 1
a634 1
An array is subscripted by specifying a dollary sign (C<$>), then the
@


1.6
log
@Resolve conflicts, remove old files, merge local changes
@
text
@d10 6
a15 4
associative arrays of scalars, known as "hashes".  Normal arrays
are ordered lists of scalars indexed by number, starting with 0 and with
negative subscripts counting from the end.  Hashes are unordered
collections of scalar values indexed by their associated string key.
d192 2
a193 2
"0" (although this will cause B<-w> noises).  That's because strings
that aren't numbers count as 0, just as they do in B<awk>:
d312 4
a315 2
    $Price = '$100';	# not interpreted
    print "The price is $Price.\n";	# interpreted
d340 6
d365 10
d402 2
d420 2
d424 2
a425 2
variable (C<$LIST_SEPARATOR> in English), space by default.  The
following are equivalent:
d600 3
a602 2
interpreted as a string--if it's a bareword that would be a legal identifier.
This makes it nice for initializing hashes:
d632 26
d698 1
a698 1
    foreach (@@hash{keys %hash}) {
@


1.5
log
@merge in perl 5.6.1 with our local changes
@
text
@d90 5
a94 4
that do not start with a letter, underscore, or digit are limited to
one character, e.g.,  C<$%> or C<$$>.  (Most of these one character names
have a predefined significance to Perl.  For instance, C<$$> is the
current process id.)
d222 1
a222 1
You can also gain some miniscule measure of efficiency by pre-extending
d275 2
a276 1
    4_294_967_296       # underline for legibility
d278 1
d282 5
d337 7
a343 7
of characters with the specified ordinals.  This provides an alternative,
more readable way to construct strings, rather than use the somewhat less
readable interpolation form C<"\x{1}\x{14}\x{12c}\x{fa0}">.  This is useful
for representing Unicode strings, and for comparing version "numbers"
using the string comparison operators, C<cmp>, C<gt>, C<lt> etc.
If there are two or more dots in the literal, the leading C<v> may be
omitted.
d352 2
d418 3
a420 89
A line-oriented form of quoting is based on the shell "here-document"
syntax.  Following a C<< << >> you specify a string to terminate
the quoted material, and all lines following the current line down to
the terminating string are the value of the item.  The terminating
string may be either an identifier (a word), or some quoted text.  If
quoted, the type of quotes you use determines the treatment of the
text, just as in regular quoting.  An unquoted identifier works like
double quotes.  There must be no space between the C<< << >> and
the identifier, unless the identifier is quoted.  (If you put a space it
will be treated as a null identifier, which is valid, and matches the first
empty line.)  The terminating string must appear by itself (unquoted and
with no surrounding whitespace) on the terminating line.

	print <<EOF;
    The price is $Price.
    EOF

	print << "EOF";	# same as above
    The price is $Price.
    EOF

	print << `EOC`;	# execute commands
    echo hi there
    echo lo there
    EOC

	print <<"foo", <<"bar";	# you can stack them
    I said foo.
    foo
    I said bar.
    bar

	myfunc(<< "THIS", 23, <<'THAT');
    Here's a line
    or two.
    THIS
    and here's another.
    THAT

Just don't forget that you have to put a semicolon on the end
to finish the statement, as Perl doesn't know you're not going to
try to do this:

	print <<ABC
    179231
    ABC
	+ 20;

If you want your here-docs to be indented with the 
rest of the code, you'll need to remove leading whitespace
from each line manually:

    ($quote = <<'FINIS') =~ s/^\s+//gm;
	The Road goes ever on and on, 
	down from the door where it began.
    FINIS

If you use a here-doc within a delimited construct, such as in C<s///eg>,
the quoted material must come on the lines following the final delimiter.
So instead of

    s/this/<<E . 'that'
    the other
    E
     . 'more '/eg;

you have to write

    s/this/<<E . 'that' 
     . 'more '/eg; 
    the other 
    E 

If the terminating identifier is on the last line of the program, you
must be sure there is a newline after it; otherwise, Perl will give the
warning B<Can't find string terminator "END" anywhere before EOF...>.

Additionally, the quoting rules for the identifier are not related to
Perl's quoting rules -- C<q()>, C<qq()>, and the like are not supported
in place of C<''> and C<"">, and the only interpolation is for backslashing
the quoting character:

    print << "abc\"def";
    testing...
    abc"def

Finally, quoted strings cannot span multiple lines.  The general rule is
that the identifier must be a string literal.  Stick with that, and you
should be safe.
d444 1
a444 1
    $foo = @@foo;		# $foo gets 3
d450 3
a452 3
	1,
	2,
	3,
d459 5
a463 5
	normal tomato
	spicy tomato
	green chile
	pesto
	white wine
d485 1
a485 1
and closing parentheses are optional (except necessary for
d524 2
a525 2
    $x = (($foo,$bar) = (3,2,1));	# set $x to 3, not 2
    $x = (($foo,$bar) = f());	        # set $x to f()'s return count
d531 21
a551 1
The final element may be an array or a hash:
d580 3
a582 3
		 red   => 0x00f,
		 blue  => 0x0f0,
		 green => 0xf00,
d588 3
a590 3
		witch => 'Mable the Merciless',
		cat   => 'Fluffy the Ferocious',
		date  => '10/31/1776',
d596 1
a596 1
	       name      => 'group_name',
d612 3
a614 3
    $whoami = $ENV{"USER"};		# one element from the hash
    $parent = $ISA[0];		        # one element from the array
    $dir    = (getpwnam("daemon"))[7];	# likewise, but with list
d621 4
a624 4
    ($him, $her)   = @@folks[0,-1];		# array slice
    @@them          = @@folks[0 .. 3];		# array slice
    ($who, $home)  = @@ENV{"USER", "HOME"};	# hash slice
    ($uid, $dir)   = (getpwnam("daemon"))[2,7];	# list slice
d631 1
a631 1
		   = (0xff0000, 0x0000ff, 0x00ff00);
d638 2
a639 2
		   = (0xff0000, 0x0000ff, 0x00ff00);
    ($folks[0], $folks[-1]) = ($folks[0], $folks[-1]);
d648 3
a650 3
	s/^\s+//;	    # trim leading whitespace
	s/\s+$//;	    # trim trailing whitespace
	s/(\w+)/\u\L$1/g;   # "titlecase" words
d668 1
a668 1
	printf "%-8s %s\n", $user, $home;
d726 4
a729 4
	my $path = shift;
	local  *FH;  # not my!
	open   (FH, $path) 	    or  return undef;
	return *FH;
d752 2
a753 2
	     or die "Can't open '@@_': $!";
	return $fh;
d758 2
a759 2
	print <$f>;
	# $f implicitly closed here
d761 5
@


1.4
log
@perl-5.6.0 + local changes
@
text
@d212 3
a214 3
of array @@days by evaluating C<$#days>, as in B<csh>.  Technically
speaking, this isn't the length of the array; it's the subscript
of the last element, since there is ordinarily a 0th element.
d262 1
a262 1
This rounds up the allocated bucked to the next power of two:
d306 2
a307 1
disambiguate it from following alphanumerics.  You must also do
d416 4
a419 4
the identifier.  (If you put a space it will be treated as a null
identifier, which is valid, and matches the first empty line.)  The
terminating string must appear by itself (unquoted and with no
surrounding whitespace) on the terminating line.
d425 1
a425 1
	print <<"EOF";	# same as above
d429 1
a429 1
	print <<`EOC`;	# execute commands
d440 1
a440 1
	myfunc(<<"THIS", 23, <<'THAT');
d465 33
d559 9
@


1.3
log
@perl5.005_03 (stock)
@
text
@d9 5
a13 4
Perl has three data structures: scalars, arrays of scalars, and
associative arrays of scalars, known as "hashes".  Normal arrays are
indexed by number, starting with 0.  (Negative subscripts count from
the end.)  Hash arrays are indexed by string.
d15 1
a15 1
Values are usually referred to by name (or through a named reference).
d18 24
a41 22
value to which it refers.  Most often, it consists of a single
I<identifier>, that is, a string beginning with a letter or underscore,
and containing letters, underscores, and digits.  In some cases, it
may be a chain of identifiers, separated by C<::> (or by C<'>, but
that's deprecated); all but the last are interpreted as names of
packages, to locate the namespace in which to look
up the final identifier (see L<perlmod/Packages> for details).
It's possible to substitute for a simple identifier an expression
that produces a reference to the value at runtime; this is
described in more detail below, and in L<perlref>.

There are also special variables whose names don't follow these
rules, so that they don't accidentally collide with one of your
normal variables.  Strings that match parenthesized parts of a
regular expression are saved under names containing only digits after
the C<$> (see L<perlop> and L<perlre>).  In addition, several special
variables that provide windows into the inner working of Perl have names
containing punctuation characters (see L<perlvar>).

Scalar values are always named with '$', even when referring to a scalar
that is part of an array.  It works like the English word "the".  Thus
we have:
d48 3
a50 2
but entire arrays or array slices are denoted by '@@', which works much like
the word "these" or "those":
d53 1
a53 1
    @@days[3,4,5]	# same as @@days[3..5]
d56 1
a56 1
and entire hashes are denoted by '%':
d60 24
a83 22
In addition, subroutines are named with an initial '&', though this is
optional when it's otherwise unambiguous (just as "do" is often
redundant in English).  Symbol table entries can be named with an
initial '*', but you don't really care about that yet.

Every variable type has its own namespace.  You can, without fear of
conflict, use the same name for a scalar variable, an array, or a hash
(or, for that matter, a filehandle, a subroutine name, or a label).
This means that $foo and @@foo are two different variables.  It also
means that C<$foo[1]> is a part of @@foo, not a part of $foo.  This may
seem a bit weird, but that's okay, because it is weird.

Because variable and array references always start with '$', '@@', or '%',
the "reserved" words aren't in fact reserved with respect to variable
names.  (They ARE reserved with respect to labels and filehandles,
however, which don't have an initial special character.  You can't have
a filehandle named "log", for instance.  Hint: you could say
C<open(LOG,'logfile')> rather than C<open(log,'logfile')>.  Using uppercase
filehandles also improves readability and protects you from conflict
with future reserved words.)  Case I<IS> significant--"FOO", "Foo", and
"foo" are all different names.  Names that start with a letter or
underscore may also contain digits and underscores.
d86 1
a86 1
that returns a reference to an object of that type.  For a description
d99 1
a99 1
There are two major contexts: scalar and list.  Certain operations
d101 2
a102 2
otherwise.  (If this is true of an operation it will be mentioned in
the documentation for that operation.)  In other words, Perl overloads
d104 2
a105 2
singular or plural.  (Some words in English work this way, like "fish"
and "sheep".)
d112 1
a112 1
the integer operation provides a scalar context for the E<lt>STDINE<gt>
d119 1
a119 1
then the sort operation provides a list context for E<lt>STDINE<gt>, which
d125 21
a145 11
Assignment is a little bit special in that it uses its left argument to
determine the context for the right argument.  Assignment to a scalar
evaluates the righthand side in a scalar context, while assignment to
an array or array slice evaluates the righthand side in a list
context.  Assignment to a list also evaluates the righthand side in a
list context.

User defined subroutines may choose to care whether they are being
called in a scalar or list context, but most subroutines do not
need to care, because scalars are automatically interpolated into
lists.  See L<perlfunc/wantarray>.
d149 18
a166 17
All data in Perl is a scalar or an array of scalars or a hash of scalars.
Scalar variables may contain various kinds of singular data, such as
numbers, strings, and references.  In general, conversion from one form to
another is transparent.  (A scalar may not contain multiple values, but
may contain a reference to an array or hash containing multiple values.)
Because of the automatic conversion of scalars, operations, and functions
that return scalars don't need to care (and, in fact, can't care) whether
the context is looking for a string or a number.

Scalars aren't necessarily one thing or another.  There's no place to
declare a scalar variable to be of type "string", or of type "number", or
type "filehandle", or anything else.  Perl is a contextually polymorphic
language whose scalars can be strings, numbers, or references (which
includes objects).  While strings and numbers are considered pretty
much the same thing for nearly all purposes, references are strongly-typed
uncastable pointers with builtin reference-counting and destructor
invocation.
d170 2
a171 1
Boolean context is just a special kind of scalar context.
d173 18
a190 12
There are actually two varieties of null scalars: defined and
undefined.  Undefined null scalars are returned when there is no real
value for something, such as when there was an error, or at end of
file, or when you refer to an uninitialized variable or element of an
array.  An undefined null scalar may become defined the first time you
use it as if it were defined, but prior to that you can use the
defined() operator to determine whether the value is defined or not.

To find out whether a given string is a valid nonzero number, it's usually
enough to test it against both numeric 0 and also lexical "0" (although
this will cause B<-w> noises).  That's because strings that aren't
numbers count as 0, just as they do in B<awk>:
d196 5
a200 4
That's usually preferable because otherwise you won't treat IEEE notations
like C<NaN> or C<Infinity> properly.  At other times you might prefer to
use the POSIX::strtod function or a regular expression to check whether
data is numeric.  See L<perlre> for details on regular expressions.
d211 15
a225 13
The length of an array is a scalar value.  You may find the length of
array @@days by evaluating C<$#days>, as in B<csh>.  (Actually, it's not
the length of the array, it's the subscript of the last element, because
there is (ordinarily) a 0th element.)  Assigning to C<$#days> changes the
length of the array.  Shortening an array by this method destroys
intervening values.  Lengthening an array that was previously shortened
I<NO LONGER> recovers the values that were in those elements.  (It used to
in Perl 4, but we had to break this to make sure destructors were
called when expected.)  You can also gain some miniscule measure of efficiency by
pre-extending an array that is going to get big.  (You can also extend
an array by assigning to an element that is off the end of the array.)
You can truncate an array down to nothing by assigning the null list ()
to it.  The following are equivalent:
d230 5
a234 4
If you evaluate a named array in a scalar context, it returns the length of
the array.  (Note that this is not true of lists, which return the
last value, like the C comma operator, nor of built-in functions, which return
whatever they feel like returning.)  The following is always true:
d245 2
a246 2
Some programmers choose to use an explicit conversion so nothing's
left to doubt:
d250 10
a259 10
If you evaluate a hash in a scalar context, it returns a value that is
true if and only if the hash contains any key/value pairs.  (If there
are any key/value pairs, the value returned is a string consisting of
the number of used buckets and the number of allocated buckets, separated
by a slash.  This is pretty much useful only to find out whether Perl's
(compiled in) hashing algorithm is performing poorly on your data set.
For example, you stick 10,000 things in a hash, but evaluating %HASH in
scalar context reveals "1/16", which means only one out of sixteen buckets
has been touched, and presumably contains all 10,000 of your items.  This
isn't supposed to happen.)
d268 1
a268 1
Numeric literals are specified in any of the customary floating point or
d273 5
a277 4
    .23E-10
    0xffff		# hex
    0377		# octal
    4_294_967_296	# underline for legibility
d280 11
a290 11
quotes.  They work much like shell quotes: double-quoted string
literals are subject to backslash and variable substitution;
single-quoted strings are not (except for "C<\'>" and "C<\\>").
The usual Unix backslash rules apply for making characters such as
newline, tab, etc., as well as some more exotic forms.  See
L<perlop/"Quote and Quotelike Operators"> for a list.

Octal or hex representations in string literals (e.g. '0xffff') are not
automatically converted to their integer representation.  The hex() and
oct() functions make these conversions for you.  See L<perlfunc/hex> and
L<perlfunc/oct> for more details.
d297 1
a297 1
scalar variables, arrays, and array slices.  (In other words,
d305 38
a342 4
As in some shells, you can put curly brackets around the name to
delimit it from following alphanumerics.  In fact, an identifier
within such curlies is forced to be a string, as is any single
identifier within a hash subscript.  Our earlier example,
d344 1
a344 15
    $days{'Feb'}

can be written as

    $days{Feb}

and the quotes will be assumed automatically.  But anything more complicated
in the subscript will be interpreted as an expression.

Note that a
single-quoted string must be separated from a preceding word by a
space, because single quote is a valid (though deprecated) character in
a variable name (see L<perlmod/Packages>).

Three special literals are __FILE__, __LINE__, and __PACKAGE__, which
d348 2
a349 1
(due to an empty C<package;> directive), __PACKAGE__ is the undefined value.
d351 18
a368 9
The tokens __END__ and __DATA__ may be used to indicate the logical end
of the script before the actual end of file.  Any following text is
ignored, but may be read via a DATA filehandle: main::DATA for __END__,
or PACKNAME::DATA (where PACKNAME is the current package) for __DATA__.
The two control characters ^D and ^Z are synonyms for __END__ (or
__DATA__ in a module).  See L<SelfLoader> for more description of
__DATA__, and an example of its use.  Note that you cannot read from the
DATA filehandle in a BEGIN block: the BEGIN block is executed as soon as
it is seen (during compilation), at which point the corresponding
d375 2
a376 1
words, and if you use the B<-w> switch, Perl will warn you about any
d387 4
a390 4
Array variables are interpolated into double-quoted strings by joining all
the elements of the array with the delimiter specified in the C<$">
variable (C<$LIST_SEPARATOR> in English), space by default.  The following
are equivalent:
d392 1
a392 1
    $temp = join($",@@ARGV);
d398 1
a398 1
there is a bad ambiguity:  Is C</$foo[bar]/> to be interpreted as
d405 1
a405 1
brackets as above.
d407 2
a408 2
A line-oriented form of quoting is based on the shell "here-doc"
syntax.  Following a C<E<lt>E<lt>> you specify a string to terminate
d414 1
a414 1
double quotes.  There must be no space between the C<E<lt>E<lt>> and
d455 8
d471 3
a473 3
In a context not requiring a list value, the value of the list
literal is the value of the final element, as with the C comma operator.
For example,
d477 1
a477 1
assigns the entire list value to array foo, but
d481 3
a483 3
assigns the value of variable bar to variable foo.  Note that the value
of an actual array in a scalar context is the length of the array; the
following assigns the value 3 to $foo:
d497 11
d509 1
a509 1
evaluated, each element of the list is evaluated in a list context, and
d518 1
a518 1
called in a list context, followed by the key/value pairs of %glarch.
d541 2
a542 2
You may assign to C<undef> in a list.  This is useful for throwing
away some of the return values of a function:
d544 1
a544 1
    ($dev, $ino, undef, undef, $uid, $gid) = stat($file);
d546 1
a546 2
Lists may be assigned to if and only if each element of the list
is legal to assign to:
d548 3
a550 1
    ($a, $b, $c) = (1, 2, 3);
d552 1
a552 1
    ($map{'red'}, $map{'blue'}, $map{'green'}) = (0x00f, 0x0f0, 0xf00);
d554 1
a554 1
List assignment in a scalar context returns the number of elements
d560 1
a560 1
This is very handy when you want to do a list assignment in a Boolean
d570 2
a571 2
in the list will soak up all the values, and anything after it will get
a null value.  This may be useful in a local() or my().
d573 2
a574 2
A hash literal contains pairs of values to be interpreted
as a key and a value:
d579 1
a579 1
While literal lists and named arrays are usually interchangeable, that's
d586 2
a587 2
It is often more readable to use the C<=E<gt>> operator between key/value
pairs.  The C<=E<gt>> operator is mostly just a more visually distinctive
d620 76
d721 1
a721 1
Another use for typeglobs is to to pass filehandles into a function or
d740 1
a740 1
	local *FH;  # not my!
d746 1
a746 1
Now that we have the *foo{THING} notation, typeglobs aren't used as much
d749 25
a773 8
*HANDLE{IO} only works if HANDLE has already been used as a handle.
In other words, *FH can be used to create new symbol table entries,
but *foo{THING} cannot.

Another way to create anonymous filehandles is with the IO::Handle
module and its ilk.  These modules have the advantage of not hiding
different types of the same name during the local().  See the bottom of
L<perlfunc/open()> for an example.
d775 12
a786 2
See L<perlref>, L<perlsub>, and L<perlmod/"Symbol Tables"> for more
discussion on typeglobs and the *foo{THING} syntax.
@


1.2
log
@perl 5.004_04
@
text
@d25 1
a25 1
which produces a reference to the value at runtime; this is
d30 1
a30 1
normal variables.  Strings which match parenthesized parts of a
d33 1
a33 1
variables which provide windows into the inner working of Perl have names
d84 1
a84 1
which do not start with a letter, underscore,  or digit are limited to
d174 2
a175 2
use a regular expression to check whether data is numeric.  See L<perlre>
for details on regular expressions.
d178 5
a182 3
    warn "not a whole number"   unless /^\d+$/;
    warn "not an integer"       unless /^[+-]?\d+$/
    warn "not a decimal number" unless /^[+-]?\d+\.?\d*$/
d194 1
a194 1
called when expected.)  You can also gain some measure of efficiency by
d205 2
a206 1
last value, like the C comma operator.)  The following is always true:
d222 1
a222 1
If you evaluate a hash in a scalar context, it returns a value which is
d233 5
d256 1
a256 1
L<perlop/Quote and Quotelike Operators> for a list.
d299 1
a299 1
(due to a C<package;> directive), __PACKAGE__ is the undefined value.
d432 1
a432 1
individual element were a member of LIST.  Thus arrays lose their
d435 1
a435 1
    (@@foo,@@bar,&SomeSub)
d438 2
a439 2
followed by all the elements returned by the subroutine named SomeSub when
it's called in a list context.
d474 1
a474 1
Array assignment in a scalar context returns the number of elements
d487 1
a487 1
    local($a, $b, %rest) = @@_;
d509 1
a509 1
interpreted as a string, if it's a bareword which would be a legal identifier.
d546 6
a551 5
we have real references, this is seldom needed.  It also used to be the
preferred way to pass filehandles into a function, but now
that we have the *foo{THING} notation it isn't often needed for that,
either.  It is still needed to pass new filehandles into functions
(*HANDLE{IO} only works if HANDLE has already been used).
d553 15
a567 1
If you need to use a typeglob to save away a filehandle, do it this way:
d575 6
a580 1
This is also a way to create a local filehandle.  For example:
d585 1
a585 1
	open (FH, $path) || return undef;
d590 11
a600 2
Another way to create local filehandles is with IO::Handle and its ilk,
see the bottom of L<perlfunc/open()>.
d603 1
a603 1
discussion on typeglobs.
@


1.1
log
@Initial revision
@
text
@d14 22
d68 1
a68 1
Since variable and array references always start with '$', '@@', or '%',
d75 1
a75 1
with future reserved words.)  Case I<IS> significant--"FOO", "Foo" and
d83 1
a83 1
Names that start with a digit may only contain more digits.  Names
d85 1
a85 1
one character, e.g.  C<$%> or C<$$>.  (Most of these one character names
d106 1
a106 1
the integer operation provides a scalar context for the <STDIN>
d113 1
a113 1
then the sort operation provides a list context for <STDIN>, which
d138 1
a138 1
Because of the automatic conversion of scalars, operations and functions
d147 2
a148 2
much same thing for nearly all purposes, references are strongly-typed
uncastable pointers with built-in reference-counting and destructor
d153 1
a153 1
Boolean context is just a special kind of scalar context.  
d163 1
a163 1
To find out whether a given string is a valid non-zero number, it's usually
d166 1
a166 1
numbers count as 0, just as the do in I<awk>:
d170 1
a170 1
    } 
d179 3
a181 3
    warn "not an integer"       unless /^[+-]?\d+$/     
    warn "not a decimal number" unless /^[+-]?\d+\.?\d*$/ 
    warn "not a C float" 
d186 1
a186 1
the length of the array, it's the subscript of the last element, since
d191 1
a191 1
in Perl 4, but we had to break this make to make sure destructors were
d193 1
a193 1
preextending an array that is going to get big.  (You can also extend
d199 1
a199 1
    $#whatever = $[ - 1;
d207 4
a210 4
Version 5 of Perl changed the semantics of $[: files that don't set
the value of $[ no longer need to worry about whether another
file changed its value.  (In other words, use of $[ is deprecated.)
So in general you can just assume that
d223 1
a223 1
by a slash.  This is pretty much only useful to find out whether Perl's
d242 12
a253 6
String literals are usually delimited by either single or double quotes.  They
work much like shell quotes:  double-quoted string literals are subject
to backslash and variable substitution; single-quoted strings are not
(except for "C<\'>" and "C<\\>").  The usual Unix backslash rules apply for making
characters such as newline, tab, etc., as well as some more exotic
forms.  See L<perlop/qq> for a list.
d255 1
a255 1
You can also embed newlines directly in your strings, i.e. they can end
d261 1
a261 1
identifiers beginning with $ or @@, followed by an optional bracketed
d263 1
a263 1
price is $100."
d268 1
a268 1
As in some shells, you can put curly brackets around the identifier to
d284 2
a285 2
space, since single quote is a valid (though deprecated) character in
an identifier (see L<perlmod/Packages>).
d287 16
a302 10
Two special literals are __LINE__ and __FILE__, which represent the
current line number and filename at that point in your program.  They
may only be used as separate tokens; they will not be interpolated into
strings.  In addition, the token __END__ may be used to indicate the
logical end of the script before the actual end of file.  Any following
text is ignored, but may be read via the DATA filehandle.  (The DATA
filehandle may read data only from the main script, but not from any
required file or evaluated string.)  The two control characters ^D and
^Z are synonyms for __END__ (or __DATA__ in a module; see L<SelfLoader> for 
details on __DATA__).
d316 1
a316 1
end of the enclosing block.  An inner block may countermand this 
d321 1
a321 1
variable ($LIST_SEPARATOR in English), space by default.  The following
d339 12
a350 11
A line-oriented form of quoting is based on the shell "here-doc" syntax.
Following a C<E<lt>E<lt>> you specify a string to terminate the quoted material,
and all lines following the current line down to the terminating string
are the value of the item.  The terminating string may be either an
identifier (a word), or some quoted text.  If quoted, the type of
quotes you use determines the treatment of the text, just as in regular
quoting.  An unquoted identifier works like double quotes.  There must
be no space between the C<E<lt>E<lt>> and the identifier.  (If you put a space it
will be treated as a null identifier, which is valid, and matches the
first blank line.)  The terminating string must appear by itself 
(unquoted and with no surrounding whitespace) on the terminating line.
d352 1
a352 1
	print <<EOF;	
d375 1
a375 1
    and here another.
d378 2
a379 2
Just don't forget that you have to put a semicolon on the end 
to finish the statement, as Perl doesn't know you're not going to 
d407 1
a407 1
following assigns to $foo the value 3:
d412 1
a412 1
You may have an optional comma before the closing parenthesis of an
d440 1
a440 1
put the list in parentheses to avoid ambiguity.  Examples:
d446 1
a446 1
    $time = stat($file)[8];  # OOPS, FORGOT PARENS
d454 5
d473 1
a473 1
context, since most list functions return a null list when finished,
d500 3
a502 2
synonym for a comma, but it also quotes its left-hand operand, which makes
it nice for initializing hashes:
d520 1
a520 1
   $field = $query->radio_group( 
d532 1
a532 1
=head2 Typeglobs and FileHandles
d536 1
a536 1
it represents all types.  This used to be the preferred way to 
d538 5
a542 1
we have real references, this is seldom needed.
d544 1
a544 3
One place where you still use typeglobs (or references thereto)
is for passing or storing filehandles.  If you want to save away
a filehandle, do it this way:
d552 1
a552 1
This is also the way to create a local filehandle.  For example:
d558 1
a558 1
	return \*FH;
d562 5
a566 3
See L<perlref>, L<perlsub>, and L<perlmod/"Symbols Tables"> for more
discussion on typeglobs.  See L<perlfunc/open> for other ways of
generating filehandles.
@


1.1.1.1
log
@Import of Perl 5.003 into the tree.  Makefile.bsd-wrapper and
config.sh.OpenBSD are the only local changes.
@
text
@@


1.1.1.2
log
@perl5.005_03
@
text
@a13 22
Values are usually referred to by name (or through a named reference).
The first character of the name tells you to what sort of data
structure it refers.  The rest of the name tells you the particular
value to which it refers.  Most often, it consists of a single
I<identifier>, that is, a string beginning with a letter or underscore,
and containing letters, underscores, and digits.  In some cases, it
may be a chain of identifiers, separated by C<::> (or by C<'>, but
that's deprecated); all but the last are interpreted as names of
packages, to locate the namespace in which to look
up the final identifier (see L<perlmod/Packages> for details).
It's possible to substitute for a simple identifier an expression
that produces a reference to the value at runtime; this is
described in more detail below, and in L<perlref>.

There are also special variables whose names don't follow these
rules, so that they don't accidentally collide with one of your
normal variables.  Strings that match parenthesized parts of a
regular expression are saved under names containing only digits after
the C<$> (see L<perlop> and L<perlre>).  In addition, several special
variables that provide windows into the inner working of Perl have names
containing punctuation characters (see L<perlvar>).

d46 1
a46 1
Because variable and array references always start with '$', '@@', or '%',
d53 1
a53 1
with future reserved words.)  Case I<IS> significant--"FOO", "Foo", and
d61 3
a63 3
Names that start with a digit may contain only more digits.  Names
that do not start with a letter, underscore, or digit are limited to
one character, e.g.,  C<$%> or C<$$>.  (Most of these one character names
d84 1
a84 1
the integer operation provides a scalar context for the E<lt>STDINE<gt>
d91 1
a91 1
then the sort operation provides a list context for E<lt>STDINE<gt>, which
d116 1
a116 1
Because of the automatic conversion of scalars, operations, and functions
d125 2
a126 2
much the same thing for nearly all purposes, references are strongly-typed
uncastable pointers with builtin reference-counting and destructor
d131 1
a131 1
Boolean context is just a special kind of scalar context.
d141 1
a141 1
To find out whether a given string is a valid nonzero number, it's usually
d144 1
a144 1
numbers count as 0, just as they do in B<awk>:
d148 1
a148 1
    }
d152 2
a153 2
use the POSIX::strtod function or a regular expression to check whether
data is numeric.  See L<perlre> for details on regular expressions.
d156 4
a159 6
    warn "not a natural number" unless /^\d+$/;             # rejects -3
    warn "not an integer"       unless /^-?\d+$/;           # rejects +3
    warn "not an integer"       unless /^[+-]?\d+$/;
    warn "not a decimal number" unless /^-?\d+\.?\d*$/;     # rejects .2
    warn "not a decimal number" unless /^-?(?:\d+(?:\.\d*)?|\.\d+)$/;
    warn "not a C float"
d164 1
a164 1
the length of the array, it's the subscript of the last element, because
d169 3
a171 3
in Perl 4, but we had to break this to make sure destructors were
called when expected.)  You can also gain some miniscule measure of efficiency by
pre-extending an array that is going to get big.  (You can also extend
d177 1
a177 1
    $#whatever = -1;
d181 1
a181 2
last value, like the C comma operator, nor of built-in functions, which return
whatever they feel like returning.)  The following is always true:
d185 4
a188 4
Version 5 of Perl changed the semantics of C<$[>: files that don't set
the value of C<$[> no longer need to worry about whether another
file changed its value.  (In other words, use of C<$[> is deprecated.)
So in general you can assume that
d197 1
a197 1
If you evaluate a hash in a scalar context, it returns a value that is
d201 1
a201 1
by a slash.  This is pretty much useful only to find out whether Perl's
a207 5
You can preallocate space for a hash by assigning to the keys() function.
This rounds up the allocated bucked to the next power of two:

    keys(%users) = 1000;		# allocate 1024 buckets

d220 6
a225 12
String literals are usually delimited by either single or double
quotes.  They work much like shell quotes: double-quoted string
literals are subject to backslash and variable substitution;
single-quoted strings are not (except for "C<\'>" and "C<\\>").
The usual Unix backslash rules apply for making characters such as
newline, tab, etc., as well as some more exotic forms.  See
L<perlop/"Quote and Quotelike Operators"> for a list.

Octal or hex representations in string literals (e.g. '0xffff') are not
automatically converted to their integer representation.  The hex() and
oct() functions make these conversions for you.  See L<perlfunc/hex> and
L<perlfunc/oct> for more details.
d227 1
a227 1
You can also embed newlines directly in your strings, i.e., they can end
d233 1
a233 1
names beginning with $ or @@, followed by an optional bracketed
d235 1
a235 1
price is $Z<>100."
d240 1
a240 1
As in some shells, you can put curly brackets around the name to
d256 2
a257 2
space, because single quote is a valid (though deprecated) character in
a variable name (see L<perlmod/Packages>).
d259 10
a268 16
Three special literals are __FILE__, __LINE__, and __PACKAGE__, which
represent the current filename, line number, and package name at that
point in your program.  They may be used only as separate tokens; they
will not be interpolated into strings.  If there is no current package
(due to an empty C<package;> directive), __PACKAGE__ is the undefined value.

The tokens __END__ and __DATA__ may be used to indicate the logical end
of the script before the actual end of file.  Any following text is
ignored, but may be read via a DATA filehandle: main::DATA for __END__,
or PACKNAME::DATA (where PACKNAME is the current package) for __DATA__.
The two control characters ^D and ^Z are synonyms for __END__ (or
__DATA__ in a module).  See L<SelfLoader> for more description of
__DATA__, and an example of its use.  Note that you cannot read from the
DATA filehandle in a BEGIN block: the BEGIN block is executed as soon as
it is seen (during compilation), at which point the corresponding
__DATA__ (or __END__) token has not yet been seen.
d282 1
a282 1
end of the enclosing block.  An inner block may countermand this
d287 1
a287 1
variable (C<$LIST_SEPARATOR> in English), space by default.  The following
d305 11
a315 12
A line-oriented form of quoting is based on the shell "here-doc"
syntax.  Following a C<E<lt>E<lt>> you specify a string to terminate
the quoted material, and all lines following the current line down to
the terminating string are the value of the item.  The terminating
string may be either an identifier (a word), or some quoted text.  If
quoted, the type of quotes you use determines the treatment of the
text, just as in regular quoting.  An unquoted identifier works like
double quotes.  There must be no space between the C<E<lt>E<lt>> and
the identifier.  (If you put a space it will be treated as a null
identifier, which is valid, and matches the first empty line.)  The
terminating string must appear by itself (unquoted and with no
surrounding whitespace) on the terminating line.
d317 1
a317 1
	print <<EOF;
d340 1
a340 1
    and here's another.
d343 2
a344 2
Just don't forget that you have to put a semicolon on the end
to finish the statement, as Perl doesn't know you're not going to
d372 1
a372 1
following assigns the value 3 to $foo:
d377 1
a377 1
You may have an optional comma before the closing parenthesis of a
d389 1
a389 1
individual element were a member of LIST.  Thus arrays and hashes lose their
d392 1
a392 1
    (@@foo,@@bar,&SomeSub,%glarch)
d395 2
a396 2
followed by all the elements returned by the subroutine named SomeSub 
called in a list context, followed by the key/value pairs of %glarch.
d405 1
a405 1
put the list in parentheses to avoid ambiguity.  For example:
d411 1
a411 1
    $time = stat($file)[8];  # OOPS, FORGOT PARENTHESES
a418 5
You may assign to C<undef> in a list.  This is useful for throwing
away some of the return values of a function:

    ($dev, $ino, undef, undef, $uid, $gid) = stat($file);

d426 1
a426 1
List assignment in a scalar context returns the number of elements
d433 1
a433 1
context, because most list functions return a null list when finished,
d439 1
a439 1
    my($a, $b, %rest) = @@_;
d460 2
a461 3
synonym for a comma, but it also arranges for its left-hand operand to be
interpreted as a string--if it's a bareword that would be a legal identifier.
This makes it nice for initializing hashes:
d479 1
a479 1
   $field = $query->radio_group(
d491 1
a491 1
=head2 Typeglobs and Filehandles
d495 1
a495 1
it represents all types.  This used to be the preferred way to
d497 1
a497 4
we have real references, this is seldom needed.  

The main use of typeglobs in modern Perl is create symbol table aliases.
This assignment:
d499 2
a500 16
    *this = *that;

makes $this an alias for $that, @@this an alias for @@that, %this an alias
for %that, &this an alias for &that, etc.  Much safer is to use a reference.
This:

    local *Here::blue = \$There::green;

temporarily makes $Here::blue an alias for $There::green, but doesn't
make @@Here::blue an alias for @@There::green, or %Here::blue an alias for
%There::green, etc.  See L<perlmod/"Symbol Tables"> for more examples
of this.  Strange though this may seem, this is the basis for the whole
module import/export system.

Another use for typeglobs is to to pass filehandles into a function or
to create new filehandles.  If you need to use a typeglob to save away
d509 1
a509 6
See L<perlsub> for examples of using these as indirect filehandles
in functions.

Typeglobs are also a way to create a local filehandle using the local()
operator.  These last until their block is exited, but may be passed back.
For example:
d514 2
a515 2
	open   (FH, $path) 	    or  return undef;
	return *FH;
d519 3
a521 14
Now that we have the *foo{THING} notation, typeglobs aren't used as much
for filehandle manipulations, although they're still needed to pass brand
new file and directory handles into or out of functions. That's because
*HANDLE{IO} only works if HANDLE has already been used as a handle.
In other words, *FH can be used to create new symbol table entries,
but *foo{THING} cannot.

Another way to create anonymous filehandles is with the IO::Handle
module and its ilk.  These modules have the advantage of not hiding
different types of the same name during the local().  See the bottom of
L<perlfunc/open()> for an example.

See L<perlref>, L<perlsub>, and L<perlmod/"Symbol Tables"> for more
discussion on typeglobs and the *foo{THING} syntax.
@


1.1.1.3
log
@virgin perl 5.6.0
@
text
@d9 4
a12 5
Perl has three built-in data types: scalars, arrays of scalars, and
associative arrays of scalars, known as "hashes".  Normal arrays
are ordered lists of scalars indexed by number, starting with 0 and with
negative subscripts counting from the end.  Hashes are unordered
collections of scalar values indexed by their associated string key.
d14 1
a14 1
Values are usually referred to by name, or through a named reference.
d17 22
a38 24
value to which it refers.  Usually this name is a single I<identifier>,
that is, a string beginning with a letter or underscore, and
containing letters, underscores, and digits.  In some cases, it may
be a chain of identifiers, separated by C<::> (or by the slightly
archaic C<'>); all but the last are interpreted as names of packages,
to locate the namespace in which to look up the final identifier
(see L<perlmod/Packages> for details).  It's possible to substitute
for a simple identifier, an expression that produces a reference
to the value at runtime.   This is described in more detail below
and in L<perlref>.

Perl also has its own built-in variables whose names don't follow
these rules.  They have strange names so they don't accidentally
collide with one of your normal variables.  Strings that match
parenthesized parts of a regular expression are saved under names
containing only digits after the C<$> (see L<perlop> and L<perlre>).
In addition, several special variables that provide windows into
the inner working of Perl have names containing punctuation characters
and control characters.  These are documented in L<perlvar>.

Scalar values are always named with '$', even when referring to a
scalar that is part of an array or a hash.  The '$' symbol works
semantically like the English word "the" in that it indicates a
single value is expected.
d45 2
a46 3
Entire arrays (and slices of arrays and hashes) are denoted by '@@',
which works much like the word "these" or "those" does in English,
in that it indicates multiple values are expected.
d49 1
a49 1
    @@days[3,4,5]	# same as ($days[3],$days[4],$days[5])
d52 1
a52 1
Entire hashes are denoted by '%':
d56 22
a77 24
In addition, subroutines are named with an initial '&', though this
is optional when unambiguous, just as the word "do" is often redundant
in English.  Symbol table entries can be named with an initial '*',
but you don't really care about that yet (if ever :-).

Every variable type has its own namespace, as do several
non-variable identifiers.  This means that you can, without fear
of conflict, use the same name for a scalar variable, an array, or
a hash--or, for that matter, for a filehandle, a directory handle, a
subroutine name, a format name, or a label.  This means that $foo
and @@foo are two different variables.  It also means that C<$foo[1]>
is a part of @@foo, not a part of $foo.  This may seem a bit weird,
but that's okay, because it is weird.

Because variable references always start with '$', '@@', or '%', the
"reserved" words aren't in fact reserved with respect to variable
names.  They I<are> reserved with respect to labels and filehandles,
however, which don't have an initial special character.  You can't
have a filehandle named "log", for instance.  Hint: you could say
C<open(LOG,'logfile')> rather than C<open(log,'logfile')>.  Using
uppercase filehandles also improves readability and protects you
from conflict with future reserved words.  Case I<is> significant--"FOO",
"Foo", and "foo" are all different names.  Names that start with a
letter or underscore may also contain digits and underscores.
d80 1
a80 1
that returns a reference to the appropriate type.  For a description
d93 1
a93 1
There are two major contexts: list and scalar.  Certain operations
d95 2
a96 2
otherwise.  If this is true of an operation it will be mentioned in
the documentation for that operation.  In other words, Perl overloads
d98 2
a99 2
singular or plural.  Some words in English work this way, like "fish"
and "sheep".
d106 1
a106 1
the integer operation provides scalar context for the <>
d113 1
a113 1
then the sort operation provides list context for <>, which
d119 11
a129 21
Assignment is a little bit special in that it uses its left argument
to determine the context for the right argument.  Assignment to a
scalar evaluates the right-hand side in scalar context, while
assignment to an array or hash evaluates the righthand side in list
context.  Assignment to a list (or slice, which is just a list
anyway) also evaluates the righthand side in list context.

When you use the C<use warnings> pragma or Perl's B<-w> command-line 
option, you may see warnings
about useless uses of constants or functions in "void context".
Void context just means the value has been discarded, such as a
statement containing only C<"fred";> or C<getpwuid(0);>.  It still
counts as scalar context for functions that care whether or not
they're being called in list context.

User-defined subroutines may choose to care whether they are being
called in a void, scalar, or list context.  Most subroutines do not
need to bother, though.  That's because both scalars and lists are
automatically interpolated into lists.  See L<perlfunc/wantarray>
for how you would dynamically discern your function's calling
context.
d133 17
a149 18
All data in Perl is a scalar, an array of scalars, or a hash of
scalars.  A scalar may contain one single value in any of three
different flavors: a number, a string, or a reference.  In general,
conversion from one form to another is transparent.  Although a
scalar may not directly hold multiple values, it may contain a
reference to an array or hash which in turn contains multiple values.

Scalars aren't necessarily one thing or another.  There's no place
to declare a scalar variable to be of type "string", type "number",
type "reference", or anything else.  Because of the automatic
conversion of scalars, operations that return scalars don't need
to care (and in fact, cannot care) whether their caller is looking
for a string, a number, or a reference.  Perl is a contextually
polymorphic language whose scalars can be strings, numbers, or
references (which includes objects).  Although strings and numbers
are considered pretty much the same thing for nearly all purposes,
references are strongly-typed, uncastable pointers with builtin
reference-counting and destructor invocation.
d153 1
a153 2
Boolean context is just a special kind of scalar context where no 
conversion to a string or a number is ever performed.
d155 12
a166 18
There are actually two varieties of null strings (sometimes referred
to as "empty" strings), a defined one and an undefined one.  The
defined version is just a string of length zero, such as C<"">.
The undefined version is the value that indicates that there is
no real value for something, such as when there was an error, or
at end of file, or when you refer to an uninitialized variable or
element of an array or hash.  Although in early versions of Perl,
an undefined scalar could become defined when first used in a
place expecting a defined value, this no longer happens except for
rare cases of autovivification as explained in L<perlref>.  You can
use the defined() operator to determine whether a scalar value is
defined (this has no meaning on arrays or hashes), and the undef()
operator to produce an undefined value.

To find out whether a given string is a valid non-zero number, it's
sometimes enough to test it against both numeric 0 and also lexical
"0" (although this will cause B<-w> noises).  That's because strings
that aren't numbers count as 0, just as they do in B<awk>:
d172 4
a175 5
That method may be best because otherwise you won't treat IEEE
notations like C<NaN> or C<Infinity> properly.  At other times, you
might prefer to determine whether string data can be used numerically
by calling the POSIX::strtod() function or by inspecting your string
with a regular expression (as documented in L<perlre>).
d186 13
a198 15
The length of an array is a scalar value.  You may find the length
of array @@days by evaluating C<$#days>, as in B<csh>.  Technically
speaking, this isn't the length of the array; it's the subscript
of the last element, since there is ordinarily a 0th element.
Assigning to C<$#days> actually changes the length of the array.
Shortening an array this way destroys intervening values.  Lengthening
an array that was previously shortened does not recover values
that were in those elements.  (It used to do so in Perl 4, but we
had to break this to make sure destructors were called when expected.)

You can also gain some miniscule measure of efficiency by pre-extending
an array that is going to get big.  You can also extend an array
by assigning to an element that is off the end of the array.  You
can truncate an array down to nothing by assigning the null list
() to it.  The following are equivalent:
d203 4
a206 5
If you evaluate an array in scalar context, it returns the length
of the array.  (Note that this is not true of lists, which return
the last value, like the C comma operator, nor of built-in functions,
which return whatever they feel like returning.)  The following is
always true:
d217 2
a218 2
Some programmers choose to use an explicit conversion so as to 
leave nothing to doubt:
d222 10
a231 10
If you evaluate a hash in scalar context, it returns false if the
hash is empty.  If there are any key/value pairs, it returns true;
more precisely, the value returned is a string consisting of the
number of used buckets and the number of allocated buckets, separated
by a slash.  This is pretty much useful only to find out whether
Perl's internal hashing algorithm is performing poorly on your data
set.  For example, you stick 10,000 things in a hash, but evaluating
%HASH in scalar context reveals C<"1/16">, which means only one out
of sixteen buckets has been touched, and presumably contains all
10,000 of your items.  This isn't supposed to happen.
d240 1
a240 1
Numeric literals are specified in any of the following floating point or
d245 4
a248 5
    .23E-10             # a very small number
    4_294_967_296       # underline for legibility
    0xff                # hex
    0377                # octal
    0b011011            # binary
d251 11
a261 11
quotes.  They work much like quotes in the standard Unix shells:
double-quoted string literals are subject to backslash and variable
substitution; single-quoted strings are not (except for C<\'> and
C<\\>).  The usual C-style backslash rules apply for making
characters such as newline, tab, etc., as well as some more exotic
forms.  See L<perlop/"Quote and Quote-like Operators"> for a list.

Hexadecimal, octal, or binary, representations in string literals
(e.g. '0xff') are not automatically converted to their integer
representation.  The hex() and oct() functions make these conversions
for you.  See L<perlfunc/hex> and L<perlfunc/oct> for more details.
d268 1
a268 1
scalar variables, arrays, and array or hash slices.  (In other words,
d276 4
a279 38
As in some shells, you can enclose the variable name in braces to
disambiguate it from following alphanumerics.  You must also do
this when interpolating a variable into a string to separate the
variable name from a following double-colon or an apostrophe, since
these would be otherwise treated as a package separator:

    $who = "Larry";
    print PASSWD "${who}::0:0:Superuser:/:/bin/perl\n";
    print "We use ${who}speak when ${who}'s here.\n";

Without the braces, Perl would have looked for a $whospeak, a
C<$who::0>, and a C<$who's> variable.  The last two would be the
$0 and the $s variables in the (presumably) non-existent package
C<who>.

In fact, an identifier within such curlies is forced to be a string,
as is any simple identifier within a hash subscript.  Neither need
quoting.  Our earlier example, C<$days{'Feb'}> can be written as
C<$days{Feb}> and the quotes will be assumed automatically.  But
anything more complicated in the subscript will be interpreted as
an expression.

A literal of the form C<v1.20.300.4000> is parsed as a string composed
of characters with the specified ordinals.  This provides an alternative,
more readable way to construct strings, rather than use the somewhat less
readable interpolation form C<"\x{1}\x{14}\x{12c}\x{fa0}">.  This is useful
for representing Unicode strings, and for comparing version "numbers"
using the string comparison operators, C<cmp>, C<gt>, C<lt> etc.
If there are two or more dots in the literal, the leading C<v> may be
omitted.

    print v9786;              # prints UTF-8 encoded SMILEY, "\x{263a}"
    print v102.111.111;       # prints "foo"
    print 102.111.111;        # same

Such literals are accepted by both C<require> and C<use> for
doing a version check.  The C<$^V> special variable also contains the
running Perl interpreter's version in this form.  See L<perlvar/$^V>.
d281 15
a295 1
The special literals __FILE__, __LINE__, and __PACKAGE__
d299 1
a299 2
(due to an empty C<package;> directive), __PACKAGE__ is the undefined
value.
d301 9
a309 18
The two control characters ^D and ^Z, and the tokens __END__ and __DATA__
may be used to indicate the logical end of the script before the actual
end of file.  Any following text is ignored.

Text after __DATA__ but may be read via the filehandle C<PACKNAME::DATA>,
where C<PACKNAME> is the package that was current when the __DATA__
token was encountered.  The filehandle is left open pointing to the
contents after __DATA__.  It is the program's responsibility to
C<close DATA> when it is done reading from it.  For compatibility with
older scripts written before __DATA__ was introduced, __END__ behaves
like __DATA__ in the toplevel script (but not in files loaded with
C<require> or C<do>) and leaves the remaining contents of the
file accessible via C<main::DATA>.

See L<SelfLoader> for more description of __DATA__, and
an example of its use.  Note that you cannot read from the DATA
filehandle in a BEGIN block: the BEGIN block is executed as soon
as it is seen (during compilation), at which point the corresponding
d316 1
a316 2
words, and if you use the C<use warnings> pragma or the B<-w> switch, 
Perl will warn you about any
d327 4
a330 4
Arrays and slices are interpolated into double-quoted strings
by joining the elements with the delimiter specified in the C<$">
variable (C<$LIST_SEPARATOR> in English), space by default.  The
following are equivalent:
d332 1
a332 1
    $temp = join($", @@ARGV);
d338 1
a338 1
there is an unfortunate ambiguity:  Is C</$foo[bar]/> to be interpreted as
d345 1
a345 1
braces as above.
d347 2
a348 2
A line-oriented form of quoting is based on the shell "here-document"
syntax.  Following a C<< << >> you specify a string to terminate
d354 1
a354 1
double quotes.  There must be no space between the C<< << >> and
a394 8
If you want your here-docs to be indented with the 
rest of the code, you'll need to remove leading whitespace
from each line manually:

    ($quote = <<'FINIS') =~ s/^\s+//gm;
	The Road goes ever on and on, 
	down from the door where it began.
    FINIS
d403 3
a405 3
In a context not requiring a list value, the value of what appears
to be a list literal is simply the value of the final element, as
with the C comma operator.  For example,
d409 1
a409 1
assigns the entire list value to array @@foo, but
d413 3
a415 3
assigns the value of variable $bar to the scalar variable $foo.
Note that the value of an actual array in scalar context is the
length of the array; the following assigns the value 3 to $foo:
a428 11
To use a here-document to assign an array, one line per element,
you might use an approach like this:

    @@sauces = <<End_Lines =~ m/(\S.*\S)/g;
	normal tomato
	spicy tomato
	green chile
	pesto
	white wine
    End_Lines

d430 1
a430 1
evaluated, each element of the list is evaluated in list context, and
d439 1
a439 1
called in list context, followed by the key/value pairs of %glarch.
d462 7
a468 2
Lists may be assigned to only when each element of the list
is itself legal to assign to:
d474 1
a474 7
An exception to this is that you may assign to C<undef> in a list.
This is useful for throwing away some of the return values of a
function:

    ($dev, $ino, undef, undef, $uid, $gid) = stat($file);

List assignment in scalar context returns the number of elements
d480 1
a480 1
This is handy when you want to do a list assignment in a Boolean
d490 2
a491 2
in the list will soak up all the values, and anything after it will become
undefined.  This may be useful in a my() or local().
d493 2
a494 2
A hash can be initialized using a literal list holding pairs of
items to be interpreted as a key and a value:
d499 1
a499 1
While literal lists and named arrays are often interchangeable, that's
d506 2
a507 2
It is often more readable to use the C<< => >> operator between key/value
pairs.  The C<< => >> operator is mostly just a more visually distinctive
a539 76
=head2 Slices

A common way to access an array or a hash is one scalar element at a
time.  You can also subscript a list to get a single element from it.

    $whoami = $ENV{"USER"};		# one element from the hash
    $parent = $ISA[0];		        # one element from the array
    $dir    = (getpwnam("daemon"))[7];	# likewise, but with list

A slice accesses several elements of a list, an array, or a hash
simultaneously using a list of subscripts.  It's more convenient
than writing out the individual elements as a list of separate
scalar values.

    ($him, $her)   = @@folks[0,-1];		# array slice
    @@them          = @@folks[0 .. 3];		# array slice
    ($who, $home)  = @@ENV{"USER", "HOME"};	# hash slice
    ($uid, $dir)   = (getpwnam("daemon"))[2,7];	# list slice

Since you can assign to a list of variables, you can also assign to
an array or hash slice.

    @@days[3..5]    = qw/Wed Thu Fri/;
    @@colors{'red','blue','green'} 
		   = (0xff0000, 0x0000ff, 0x00ff00);
    @@folks[0, -1]  = @@folks[-1, 0];

The previous assignments are exactly equivalent to

    ($days[3], $days[4], $days[5]) = qw/Wed Thu Fri/;
    ($colors{'red'}, $colors{'blue'}, $colors{'green'})
		   = (0xff0000, 0x0000ff, 0x00ff00);
    ($folks[0], $folks[-1]) = ($folks[0], $folks[-1]);

Since changing a slice changes the original array or hash that it's
slicing, a C<foreach> construct will alter some--or even all--of the
values of the array or hash.

    foreach (@@array[ 4 .. 10 ]) { s/peter/paul/ } 

    foreach (@@hash{keys %hash}) {
	s/^\s+//;	    # trim leading whitespace
	s/\s+$//;	    # trim trailing whitespace
	s/(\w+)/\u\L$1/g;   # "titlecase" words
    }

A slice of an empty list is still an empty list.  Thus:

    @@a = ()[1,0];           # @@a has no elements
    @@b = (@@a)[0,1];         # @@b has no elements
    @@c = (0,1)[2,3];        # @@c has no elements

But:

    @@a = (1)[1,0];          # @@a has two elements
    @@b = (1,undef)[1,0,2];  # @@b has three elements

This makes it easy to write loops that terminate when a null list
is returned:

    while ( ($home, $user) = (getpwent)[7,0]) {
	printf "%-8s %s\n", $user, $home;
    }

As noted earlier in this document, the scalar sense of list assignment
is the number of elements on the right-hand side of the assignment.
The null list contains no elements, so when the password file is
exhausted, the result is 0, not 2.

If you're confused about why you use an '@@' there on a hash slice
instead of a '%', think of it like this.  The type of bracket (square
or curly) governs whether it's an array or a hash being looked at.
On the other hand, the leading symbol ('$' or '@@') on the array or
hash indicates whether you are getting back a singular value (a
scalar) or a plural one (a list).

d565 1
a565 1
Another use for typeglobs is to pass filehandles into a function or
d584 1
a584 1
	local  *FH;  # not my!
d590 1
a590 1
Now that we have the C<*foo{THING}> notation, typeglobs aren't used as much
d593 8
a600 25
C<*HANDLE{IO}> only works if HANDLE has already been used as a handle.
In other words, C<*FH> must be used to create new symbol table entries;
C<*foo{THING}> cannot.  When in doubt, use C<*FH>.

All functions that are capable of creating filehandles (open(),
opendir(), pipe(), socketpair(), sysopen(), socket(), and accept())
automatically create an anonymous filehandle if the handle passed to
them is an uninitialized scalar variable. This allows the constructs
such as C<open(my $fh, ...)> and C<open(local $fh,...)> to be used to
create filehandles that will conveniently be closed automatically when
the scope ends, provided there are no other references to them. This
largely eliminates the need for typeglobs when opening filehandles
that must be passed around, as in the following example:

    sub myopen {
        open my $fh, "@@_"
	     or die "Can't open '@@_': $!";
	return $fh;
    }

    {
        my $f = myopen("</etc/motd");
	print <$f>;
	# $f implicitly closed here
    }
d602 2
a603 12
Another way to create anonymous filehandles is with the Symbol
module or with the IO::Handle module and its ilk.  These modules
have the advantage of not hiding different types of the same name
during the local().  See the bottom of L<perlfunc/open()> for an
example.

=head1 SEE ALSO

See L<perlvar> for a description of Perl's built-in variables and
a discussion of legal variable names.  See L<perlref>, L<perlsub>,
and L<perlmod/"Symbol Tables"> for more discussion on typeglobs and
the C<*foo{THING}> syntax.
@


1.1.1.4
log
@stock perl 5.6.1
@
text
@d212 3
a214 3
of array @@days by evaluating C<$#days>, as in B<csh>.  However, this
isn't the length of the array; it's the subscript of the last element,
which is a different value since there is ordinarily a 0th element.
d262 1
a262 1
This rounds up the allocated buckets to the next power of two:
d306 1
a306 2
disambiguate it from following alphanumerics (and underscores).
You must also do
d415 4
a418 4
the identifier, unless the identifier is quoted.  (If you put a space it
will be treated as a null identifier, which is valid, and matches the first
empty line.)  The terminating string must appear by itself (unquoted and
with no surrounding whitespace) on the terminating line.
d424 1
a424 1
	print << "EOF";	# same as above
d428 1
a428 1
	print << `EOC`;	# execute commands
d439 1
a439 1
	myfunc(<< "THIS", 23, <<'THAT');
a463 33
If you use a here-doc within a delimited construct, such as in C<s///eg>,
the quoted material must come on the lines following the final delimiter.
So instead of

    s/this/<<E . 'that'
    the other
    E
     . 'more '/eg;

you have to write

    s/this/<<E . 'that' 
     . 'more '/eg; 
    the other 
    E 

If the terminating identifier is on the last line of the program, you
must be sure there is a newline after it; otherwise, Perl will give the
warning B<Can't find string terminator "END" anywhere before EOF...>.

Additionally, the quoting rules for the identifier are not related to
Perl's quoting rules -- C<q()>, C<qq()>, and the like are not supported
in place of C<''> and C<"">, and the only interpolation is for backslashing
the quoting character:

    print << "abc\"def";
    testing...
    abc"def

Finally, quoted strings cannot span multiple lines.  The general rule is
that the identifier must be a string literal.  Stick with that, and you
should be safe.

a524 9

This interpolation combines with the facts that the opening
and closing parentheses are optional (except necessary for
precedence) and lists may end with an optional comma to mean that
multiple commas within lists are legal syntax. The list C<1,,3> is a
concatenation of two lists, C<1,> and C<3>, the first of which ends
with that optional comma.  C<1,,3> is C<(1,),(3)> is C<1,3> (And
similarly for C<1,,,3> is C<(1,),(,),3> is C<1,3> and so on.)  Not that
we'd advise you to use this obfuscation.
@


1.1.1.5
log
@stock perl 5.8.0 from CPAN
@
text
@d90 4
a93 5
that do not start with a letter, underscore, digit or a caret (i.e.
a control character) are limited to one character, e.g.,  C<$%> or
C<$$>.  (Most of these one character names have a predefined
significance to Perl.  For instance, C<$$> is the current process
id.)
d221 1
a221 1
You can also gain some minuscule measure of efficiency by pre-extending
d274 1
a274 2
    3.14_15_92          # a very important number
    4_294_967_296       # underscore for legibility
a275 1
    0xdead_beef         # more hex   
a278 5
You are allowed to use underscores (underbars) in numeric literals
between digits for legibility.  You could, for example, group binary
digits by threes (as for a Unix-style mode argument such as 0b110_100_100)
or by fours (to represent nibbles, as in 0b1010_0110) or in other groups.

d329 7
a335 7
of characters with the specified ordinals.  This form, known as
v-strings, provides an alternative, more readable way to construct
strings, rather than use the somewhat less readable interpolation form
C<"\x{1}\x{14}\x{12c}\x{fa0}">.  This is useful for representing
Unicode strings, and for comparing version "numbers" using the string
comparison operators, C<cmp>, C<gt>, C<lt> etc.  If there are two or
more dots in the literal, the leading C<v> may be omitted.
a343 2
Note that using the v-strings for IPv4 addresses is not portable unless
you also use the inet_aton()/inet_ntoa() routines of the Socket package.
d408 89
a496 3
If you're looking for the information on how to use here-documents,
which used to be here, that's been moved to
L<perlop/Quote and Quote-like Operators>.
d520 1
a520 1
    $foo = @@foo;                # $foo gets 3
d526 3
a528 3
        1,
        2,
        3,
d535 5
a539 5
        normal tomato
        spicy tomato
        green chile
        pesto
        white wine
d561 1
a561 1
and closing parentheses are optional (except when necessary for
d600 2
a601 2
    $x = (($foo,$bar) = (3,2,1));       # set $x to 3, not 2
    $x = (($foo,$bar) = f());           # set $x to f()'s return count
d607 1
a607 21
It's also the source of a useful idiom for executing a function or
performing an operation in list context and then counting the number of
return values, by assigning to an empty list and then using that
assignment in scalar context. For example, this code:

    $count = () = $string =~ /\d+/g;

will place into $count the number of digit groups found in $string.
This happens because the pattern match is in list context (since it
is being assigned to the empty list), and will therefore return a list
of all matching parts of the string. The list assignment in scalar
context will translate that into the number of elements (here, the
number of times the pattern matched) and assign that to $count. Note
that simply using

    $count = $string =~ /\d+/g;

would not have worked, since a pattern match in scalar context will
only return true or false, rather than a count of matches.

The final element of a list assignment may be an array or a hash:
d636 3
a638 3
                 red   => 0x00f,
                 blue  => 0x0f0,
                 green => 0xf00,
d644 3
a646 3
                witch => 'Mable the Merciless',
                cat   => 'Fluffy the Ferocious',
                date  => '10/31/1776',
d652 1
a652 1
               name      => 'group_name',
d668 3
a670 3
    $whoami = $ENV{"USER"};             # one element from the hash
    $parent = $ISA[0];                  # one element from the array
    $dir    = (getpwnam("daemon"))[7];  # likewise, but with list
d677 4
a680 4
    ($him, $her)   = @@folks[0,-1];              # array slice
    @@them          = @@folks[0 .. 3];            # array slice
    ($who, $home)  = @@ENV{"USER", "HOME"};      # hash slice
    ($uid, $dir)   = (getpwnam("daemon"))[2,7]; # list slice
d687 1
a687 1
                   = (0xff0000, 0x0000ff, 0x00ff00);
d694 2
a695 2
                   = (0xff0000, 0x0000ff, 0x00ff00);
    ($folks[0], $folks[-1]) = ($folks[-1], $folks[0]);
d704 3
a706 3
        s/^\s+//;           # trim leading whitespace
        s/\s+$//;           # trim trailing whitespace
        s/(\w+)/\u\L$1/g;   # "titlecase" words
d724 1
a724 1
        printf "%-8s %s\n", $user, $home;
d782 4
a785 4
        my $path = shift;
        local  *FH;  # not my!
        open   (FH, $path)          or  return undef;
        return *FH;
d808 2
a809 2
             or die "Can't open '@@_': $!";
        return $fh;
d814 2
a815 2
        print <$f>;
        # $f implicitly closed here
a816 5

Note that if an initialized scalar variable is used instead the
result is different: C<my $fh='zzz'; open($fh, ...)> is equivalent
to C<open( *{'zzz'}, ...)>.
C<use strict 'refs'> forbids such practice.
@


1.1.1.6
log
@perl 5.8.2 from CPAN
@
text
@d10 4
a13 6
associative arrays of scalars, known as "hashes".  A scalar is a 
single string (of any size, limited only by the available memory),
number, or a reference to something (which will be discussed
in L<perlref>).  Normal arrays are ordered lists of scalars indexed
by number, starting with 0.  Hashes are unordered collections of scalar 
values indexed by their associated string key.
d190 2
a191 2
"0" (although this will cause noises if warnings are on).  That's 
because strings that aren't numbers count as 0, just as they do in B<awk>:
d310 2
a311 4
    $Price = '$100';	# not interpolated
    print "The price is $Price.\n";	# interpolated

There is no double interpolation in Perl, so the C<$100> is left as is.
a335 6
=head3 Version Strings

B<Note:> Version Strings (v-strings) have been deprecated.  They will
not be available after Perl 5.8.  The marginal benefits of v-strings
were greatly outweighed by the potential for Surprise and Confusion.

a354 10
Note that since Perl 5.8.1 the single-number v-strings (like C<v65>)
are not v-strings before the C<< => >> operator (which is usually used
to separate a hash key from a hash value), instead they are interpreted
as literal strings ('v65').  They were v-strings from Perl 5.6.0 to
Perl 5.8.0, but that caused more confusion and breakage than good.
Multi-number v-strings like C<v65.66> and C<65.66.67> continue to
be v-strings always.

=head3 Special Literals

a381 2
=head3 Barewords

a397 2
=head3 Array Joining Delimiter

d400 2
a401 2
variable (C<$LIST_SEPARATOR> if "use English;" is specified), 
space by default.  The following are equivalent:
d576 2
a577 3
interpreted as a string -- if it's a bareword that would be a legal simple
identifier (C<< => >> doesn't quote compound identifiers, that contain
double colons). This makes it nice for initializing hashes:
a606 26
=head2 Subscripts

An array is subscripted by specifying a dollary sign (C<$>), then the
name of the array (without the leading C<@@>), then the subscript inside
square brackets.  For example:

    @@myarray = (5, 50, 500, 5000);
    print "Element Number 2 is", $myarray[2], "\n";

The array indices start with 0. A negative subscript retrieves its 
value from the end.  In our example, C<$myarray[-1]> would have been 
5000, and C<$myarray[-2]> would have been 500.

Hash subscripts are similar, only instead of square brackets curly brackets
are used. For example:

    %scientists = 
    (
        "Newton" => "Isaac",
        "Einstein" => "Albert",
        "Darwin" => "Charles",
        "Feynman" => "Richard",
    );

    print "Darwin's First Name is ", $scientists{"Darwin"}, "\n";

d647 1
a647 1
    foreach (@@hash{qw[key1 key2]}) {
@


1.1.1.7
log
@perl 5.8.6 from CPAN
@
text
@d634 1
a634 1
An array is subscripted by specifying a dollar sign (C<$>), then the
@


1.1.1.8
log
@perl 5.8.8 import
@
text
@a7 1
X<variable, name> X<variable name> X<data type> X<type>
a29 1
X<identifier>
a38 1
X<variable, built-in>
a43 1
X<scalar>
a52 1
X<array>
a58 1
X<hash>
a74 1
X<namespace>
a85 2
X<identifier, case sensitivity>
X<case>
a98 1
X<context> X<scalar context> X<list context>
a150 1
X<scalar> X<number> X<string> X<reference>
a174 1
X<boolean> X<bool> X<true> X<false> X<truth>
a188 1
X<defined> X<undefined> X<undef> X<null> X<string, null>
a222 1
X<$#> X<array, length>
a237 1
X<array, length>
a244 1
X<$[>
a262 1
X<hash, scalar context> X<hash, bucket> X<bucket>
a269 1
X<scalar, literal> X<scalar, constant>
d281 1
a281 1
    0377                # octal (only numbers, begins with 0)
a287 1
X<number, literal>
a295 1
X<string, literal>
a310 1
X<interpolation>
a322 1
X<interpolation>
d337 2
a338 3
anything more complicated in the subscript will be interpreted as an
expression.  This means for example that C<$version{2.0}++> is
equivalent to C<$version{2}++>, not to C<$version{'2.0'}++>.
a340 1
X<version string> X<vstring> X<v-string>
a373 2
X<special literal> X<__END__> X<__DATA__> X<END> X<DATA>
X<end> X<data> X<^D> X<^Z>
a380 1
X<__FILE__> X<__LINE__> X<__PACKAGE__> X<line> X<file> X<package>
a402 1
X<bareword>
a420 1
X<array, interpolation> X<interpolation, array> X<$">
a446 1
X<list>
a658 1
X<slice> X<array, slice> X<hash, slice>
a734 1
X<typeglob> X<filehandle> X<*>
@


1.1.1.9
log
@import perl 5.10.0 from CPAN
@
text
@d278 1
a278 3
10,000 of your items.  This isn't supposed to happen.  If a tied hash
is evaluated in scalar context, a fatal error will result, since this
bucket usage information is currently not available for tied hashes.
a337 6
By default floating point numbers substituted inside strings use the
dot (".")  as the decimal separator.  If C<use locale> is in effect,
and POSIX::setlocale() has been called, the character used for the
decimal separator is affected by the LC_NUMERIC locale.
See L<perllocale> and L<POSIX>.

d367 2
a368 3
be removed in some future release after Perl 5.8.1.  The marginal
benefits of v-strings were greatly outweighed by the potential for
Surprise and Confusion.
d379 1
a379 1
    print v9786;              # prints SMILEY, "\x{263a}"
d384 4
a387 3
doing a version check.  Note that using the v-strings for IPv4
addresses is not portable unless you also use the
inet_aton()/inet_ntoa() routines of the Socket package.
d419 1
a419 1
like __DATA__ in the top level script (but not in files loaded with
@


1.1.1.10
log
@import perl 5.10.1
@
text
@d421 1
a421 1
Text after __DATA__ may be read via the filehandle C<PACKNAME::DATA>,
d445 2
a446 5
Perl will warn you about any such words.  Perl limits barewords (like
identifiers) to about 250 characters.  Future versions of Perl are likely
to eliminate these arbitrary limitations.

Some people may wish to outlaw barewords entirely.  If you
d677 1
a677 1
    print "The Third Element is", $myarray[2], "\n";
@


1.1.1.11
log
@Perl 5.12.2 from CPAN
@
text
@d374 5
d641 3
a643 3
interpreted as a string if it's a bareword that would be a legal simple
identifier. C<< => >> doesn't quote compound identifiers, that contain
double colons. This makes it nice for initializing hashes:
@


1.1.1.12
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d55 1
a55 1
which works much as the word "these" or "those" does in English,
d143 1
a143 1
anyway) also evaluates the right-hand side in list context.
d182 2
a183 3
A scalar value is interpreted as FALSE in the Boolean sense
if it is undefined, the null string or the number 0 (or its
string equivalent, "0"), and TRUE if it is anything else.  The
d254 8
d279 2
a280 2
is evaluated in scalar context, the C<SCALAR> method is called (with a
fallback to C<FIRSTKEY>).
d305 1
a305 3
between digits for legibility (but not multiple underscores in a row:
C<23__500> is not legal; C<23_500> is).
You could, for example, group binary
d394 1
a394 1
to separate a hash key from a hash value); instead they are interpreted
d406 1
a406 2
point in your program.  __SUB__ gives a reference to the current
subroutine.  They may be used only as separate tokens; they
d409 2
a410 6
value. (But the empty C<package;> is no longer supported, as of version
5.10.)  Outside of a subroutine, __SUB__ is the undefined value.  __SUB__
is only available in 5.16 or higher, and only with a C<use v5.16> or
C<use feature "current_sub"> declaration.
X<__FILE__> X<__LINE__> X<__PACKAGE__> X<__SUB__>
X<line> X<file> X<package>
d419 6
a424 7
line after __DATA__.  The program should C<close DATA> when it is done
reading from it.  (Leaving it open leaks filehandles if the module is
reloaded for any reason, so it's a safer practice to close it.)  For
compatibility with older scripts written before __DATA__ was
introduced, __END__ behaves like __DATA__ in the top level script (but
not in files loaded with C<require> or C<do>) and leaves the remaining
contents of the file accessible via C<main::DATA>.
d454 1
a454 1
=head3 Array Interpolation
d670 1
a670 2
An array can be accessed one scalar at a
time by specifying a dollar sign (C<$>), then the
d694 2
a695 9
You can also subscript a list to get a single element from it:

    $dir = (getpwnam("daemon"))[7];

=head2 Multi-dimensional array emulation

Multidimensional arrays may be emulated by subscripting a hash with a
list. The elements of the list are joined with the subscript separator
(see L<perlvar/$;>).
d697 2
a698 1
    $foo{$a,$b,$c}
d700 3
a702 8
is equivalent to

    $foo{join($;, $a, $b, $c)}

The default subscript separator is "\034", the same as SUBSEP in B<awk>.

=head2 Slices
X<slice> X<array, slice> X<hash, slice>
a763 7
Slices in scalar context return the last item of the slice.

    @@a = qw/first second third/;
    %h = (first => 'A', second => 'B');
    $t = @@a[0, 1];                  # $t is now 'second'
    $u = @@h{'first', 'second'};     # $u is now 'B'

d859 1
a859 1
during the local().  See the bottom of L<perlfunc/open> for an
@


1.1.1.13
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d27 2
a28 3
(see L<perlmod/Packages> for details).  For a more in-depth discussion
on identifiers, see L<Identifier parsing>.  It's possible to
substitute for a simple identifier, an expression that produces a reference
a106 99
=head2 Identifier parsing
X<identifiers>

Up until Perl 5.18, the actual rules of what a valid identifier
was were a bit fuzzy.  However, in general, anything defined here should
work on previous versions of Perl, while the opposite -- edge cases
that work in previous versions, but aren't defined here -- probably
won't work on newer versions.
As an important side note, please note that the following only applies
to bareword identifiers as found in Perl source code, not identifiers
introduced through symbolic references, which have much fewer
restrictions.
If working under the effect of the C<use utf8;> pragma, the following
rules apply:

    / (?[ ( \p{Word} & \p{XID_Start} ) + [_] ]) \p{XID_Continue}* /x

If not under C<use utf8>, the source is treated as ASCII + 128 extra
controls, and identifiers should match

    / (?aa) (?!\d) \w+ /x

That is, any word character in the ASCII range, as long as the first
character is not a digit.

There are two package separators in Perl: A double colon (C<::>) and a single
quote (C<'>).  Normal identifiers can start or end with a double colon, and
can contain several parts delimited by double colons.
Single quotes have similar rules, but with the exception that they are not
legal at the end of an identifier: That is, C<$'foo> and C<$foo'bar> are
legal, but C<$foo'bar'> are not.


Finally, if the identifier is preceded by a sigil --
More so, normal identifiers can start or end with any number
of double colons (::), and can contain several parts delimited
by double colons.
And additionally, if the identifier is preceded by a sigil --
that is, if the identifier is part of a variable name -- it
may optionally be enclosed in braces.

While you can mix double colons with singles quotes, the quotes must come
after the colons: C<$::::'foo> and C<$foo::'bar> are legal, but C<$::'::foo>
and C<$foo'::bar> are not.

Put together, a grammar to match a basic identifier becomes

 /
  (?(DEFINE)
      (?<variable>
          (?&sigil)
          (?:
                  (?&normal_identifier)
              |   \{ \s* (?&normal_identifier) \s* \}
          )
      )
      (?<normal_identifier>
          (?: :: )* '?
           (?&basic_identifier)
           (?: (?= (?: :: )+ '? | (?: :: )* ' ) (?&normal_identifier) )?
          (?: :: )*
      )
      (?<basic_identifier>
        # is use utf8 on?
          (?(?{ (caller(0))[8] & $utf8::hint_bits })
              (?&Perl_XIDS) \p{XID_Continue}*
            | (?aa) (?!\d) \w+
          )
      )
      (?<sigil> [&*\$\@@\%])
      (?<Perl_XIDS> (?[ ( \p{Word} & \p{XID_Start} ) + [_] ]) )
  )
 /x

Meanwhile, special identifiers don't follow the above rules; For the most
part, all of the identifiers in this category have a special meaning given
by Perl.  Because they have special parsing rules, these generally can't be
fully-qualified.  They come in four forms:

=over

=item A sigil, followed solely by digits matching \p{POSIX_Digit}, like C<$0>,
C<$1>, or C<$10000>.

=item A sigil, followed by either a caret and a single POSIX uppercase letter,
like C<$^V> or C<$^W>, or a sigil followed by a literal control character
matching the C<\p{POSIX_Cntrl}> property. Due to a historical oddity, if not
running under C<use utf8>, the 128 extra controls in the C<[0x80-0xff]> range
may also be used in length one variables.

=item Similar to the above, a sigil, followed by bareword text in brackets,
where the first character is either a caret followed by an uppercase letter,
or a literal control, like C<${^GLOBAL_PHASE}> or C<${\7LOBAL_PHASE}>.

=item A sigil followed by a single character matching the C<\p{POSIX_Punct}>
property, like C<$!> or C<%+>.

=back

d235 2
a236 1
that were in those elements.
d358 2
a359 2
In fact, a simple identifier within such curlies is forced to be
a string, and likewise within a hash subscript. Neither need
d405 1
a405 1
value.  (But the empty C<package;> is no longer supported, as of version
d548 1
a548 1
multiple commas within lists are legal syntax.  The list C<1,,3> is a
d595 1
a595 1
assignment in scalar context.  For example, this code:
d602 1
a602 1
of all matching parts of the string.  The list assignment in scalar
d604 1
a604 1
number of times the pattern matched) and assign that to $count.  Note
d638 2
a639 2
identifier.  C<< => >> doesn't quote compound identifiers, that contain
double colons.  This makes it nice for initializing hashes:
a668 23
If a key appears more than once in the initializer list of a hash, the last
occurrence wins:

    %circle = (
                  center => [5, 10],
                  center => [27, 9],
                  radius => 100,
                  color => [0xDF, 0xFF, 0x00],
                  radius => 54,
    );

    # same as
    %circle = (
                  center => [27, 9],
                  color => [0xDF, 0xFF, 0x00],
                  radius => 54,
    );

This can be used to provide overridable configuration defaults:

    # values in %args take priority over %config_defaults
    %config = (%config_defaults, %args);

d679 1
a679 1
The array indices start with 0.  A negative subscript retrieves its 
d684 1
a684 1
are used.  For example:
d703 1
a703 1
list.  The elements of the list are joined with the subscript separator
d758 1
a764 6
More generally, a slice yields the empty list if it indexes only
beyond the end of a list:

    @@a = (1)[  1,2];        # @@a has no elements
    @@b = (1)[0,1,2];        # @@b has three elements

d844 1
a844 1
new file and directory handles into or out of functions.  That's because
d852 1
a852 1
them is an uninitialized scalar variable.  This allows the constructs
d855 1
a855 1
the scope ends, provided there are no other references to them.  This
@


1.1.1.14
log
@Import perl-5.20.1
@
text
@d123 1
a123 7
    / (?[ ( \p{Word} & \p{XID_Start} ) + [_] ])
      (?[ ( \p{Word} & \p{XID_Continue} ) ]) *    /x

That is, a "start" character followed by any number of "continue"
characters.  Perl requires every character in an identifier to also
match C<\w> (this prevents some problematic cases); and Perl
additionally accepts identfier names beginning with an underscore.
d138 2
a139 1
legal, but C<$foo'bar'> is not.
d141 5
a145 1
Additionally, if the identifier is preceded by a sigil --
d173 1
a173 1
              (?&Perl_XIDS) (?&Perl_XIDC)*
a178 1
      (?<Perl_XIDC> (?[ \p{Word} & \p{XID_Continue} ]) )
d194 1
a194 2
matching the C<\p{POSIX_Cntrl}> property.
Due to a historical oddity, if not
d196 1
a196 3
may also be used in length one variables.  The use of a literal control
character is deprecated.  Support for this form will be removed in a future
version of perl.
d200 1
a200 3
or a literal control, like C<${^GLOBAL_PHASE}> or C<${\7LOBAL_PHASE}>.  The use
of a literal control character is deprecated.  Support for this form will be
removed in a future version of perl.
a206 3
Note that as of Perl 5.20, literal control characters in variable names
are deprecated.

d458 1
a458 1
a string, and likewise within a hash subscript.  Neither need
a916 24

=head3 Key/Value Hash Slices

Starting in Perl 5.20, a hash slice operation
with the % symbol is a variant of slice operation
returning a list of key/value pairs rather than just values:

    %h = (blonk => 2, foo => 3, squink => 5, bar => 8);
    %subset = %h{'foo', 'bar'}; # key/value hash slice
    # %subset is now (foo => 3, bar => 8)

However, the result of such a slice cannot be localized, deleted or used
in assignment.  These are otherwise very much consistent with hash slices
using the @@ symbol.

=head3 Index/Value Array Slices

Similar to key/value hash slices (and also introduced
in Perl 5.20), the % array slice syntax returns a list
of index/value pairs:

    @@a = "a".."z";
    @@list = %a[3,4,6];
    # @@list is now (3, "d", 4, "e", 6, "g")
@


