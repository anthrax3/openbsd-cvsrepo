head	1.19;
access;
symbols
	OPENBSD_6_2:1.19.0.6
	OPENBSD_6_2_BASE:1.19
	PERL_5_24_2:1.1.1.16
	OPENBSD_6_1:1.19.0.4
	OPENBSD_6_1_BASE:1.19
	OPENBSD_6_0:1.18.0.10
	OPENBSD_6_0_BASE:1.18
	OPENBSD_5_9:1.18.0.4
	OPENBSD_5_9_BASE:1.18
	OPENBSD_5_8:1.18.0.6
	OPENBSD_5_8_BASE:1.18
	PERL_5_20_2:1.1.1.15
	OPENBSD_5_7:1.18.0.2
	OPENBSD_5_7_BASE:1.18
	PERL_5_20_1:1.1.1.15
	OPENBSD_5_6:1.17.0.4
	OPENBSD_5_6_BASE:1.17
	PERL_5_18_2:1.1.1.14
	PERL:1.1.1
	OPENBSD_5_5:1.16.0.6
	OPENBSD_5_5_BASE:1.16
	OPENBSD_5_4:1.16.0.2
	OPENBSD_5_4_BASE:1.16
	PERL_5_16_3:1.1.1.13
	OPENBSD_5_3:1.15.0.10
	OPENBSD_5_3_BASE:1.15
	OPENBSD_5_2:1.15.0.8
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.15
	OPENBSD_5_1:1.15.0.6
	OPENBSD_5_0:1.15.0.4
	OPENBSD_5_0_BASE:1.15
	OPENBSD_4_9:1.15.0.2
	OPENBSD_4_9_BASE:1.15
	PERL_5_12_2:1.1.1.12
	OPENBSD_4_8:1.14.0.4
	OPENBSD_4_8_BASE:1.14
	OPENBSD_4_7:1.14.0.2
	OPENBSD_4_7_BASE:1.14
	PERL_5_10_1:1.1.1.11
	OPENBSD_4_6:1.12.0.6
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.12.0.2
	OPENBSD_4_5_BASE:1.12
	PERL_5_10_0:1.1.1.10
	OPENBSD_4_4:1.11.0.10
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.8
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.11.0.6
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.11.0.4
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.11.0.2
	OPENBSD_4_0_BASE:1.11
	PERL_5_8_8:1.1.1.9
	OPENBSD_3_9:1.9.0.6
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.4
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.2
	OPENBSD_3_7_BASE:1.9
	PERL_5_8_6:1.1.1.8
	OPENBSD_3_6:1.8.0.2
	OPENBSD_3_6_BASE:1.8
	PERL_5_8_5:1.1.1.7
	PERL_5_8_3:1.1.1.7
	OPENBSD_3_5:1.7.0.2
	OPENBSD_3_5_BASE:1.7
	PERL_5_8_2:1.1.1.6
	OPENBSD_3_4:1.6.0.4
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.6.0.2
	OPENBSD_3_3_BASE:1.6
	PERL_5_8_0:1.1.1.5
	OPENBSD_3_2:1.5.0.6
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.4
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	PERL_5_6_1:1.1.1.4
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	PERL_5_6_0:1.1.1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	PERL_500503:1.1.1.2
	CPAN:1.1.1
	OPENBSD_2_5:1.2.0.6
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.4
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	perl5003:1.1.1.1
	lwall:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.19
date	2017.02.05.00.32.18;	author afresh1;	state Exp;
branches;
next	1.18;
commitid	cxJ08BvJA9Pt2PTM;

1.18
date	2014.11.17.20.57.07;	author afresh1;	state Exp;
branches;
next	1.17;
commitid	QP75iYx42Uo7mMxO;

1.17
date	2014.03.24.15.05.33;	author afresh1;	state Exp;
branches;
next	1.16;

1.16
date	2013.03.25.20.40.59;	author sthen;	state Exp;
branches;
next	1.15;

1.15
date	2010.09.24.15.07.04;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	2009.10.13.01.25.48;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	2009.10.12.18.24.47;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2008.09.29.17.36.17;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2006.04.01.21.24.36;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2006.03.28.19.23.11;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2005.01.15.21.30.37;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2004.04.07.21.33.09;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2003.12.03.03.02.46;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.10.27.22.25.33;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.24.18.35.58;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.06.17.07.37;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	99.04.29.22.52.18;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.11.30.07.59.24;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.08.19.10.13.04;	author downsj;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.08.19.10.13.04;	author downsj;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.04.29.22.40.57;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2000.04.06.16.10.29;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2001.05.24.18.24.45;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2002.10.27.22.15.06;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2003.12.03.02.44.24;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2004.04.07.21.13.35;	author millert;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2005.01.15.21.17.57;	author millert;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2006.03.28.18.49.23;	author millert;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	2008.09.29.17.18.53;	author millert;	state Exp;
branches;
next	1.1.1.11;

1.1.1.11
date	2009.10.12.18.10.40;	author millert;	state Exp;
branches;
next	1.1.1.12;

1.1.1.12
date	2010.09.24.14.49.09;	author millert;	state Exp;
branches;
next	1.1.1.13;

1.1.1.13
date	2013.03.25.20.09.24;	author sthen;	state Exp;
branches;
next	1.1.1.14;

1.1.1.14
date	2014.03.24.14.59.08;	author afresh1;	state Exp;
branches;
next	1.1.1.15;

1.1.1.15
date	2014.11.17.20.53.15;	author afresh1;	state Exp;
branches;
next	1.1.1.16;
commitid	B31cAbBIXiCqnL97;

1.1.1.16
date	2017.08.14.13.46.21;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.19
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@=head1 NAME
X<regular expression> X<regex> X<regexp>

perlre - Perl regular expressions

=head1 DESCRIPTION

This page describes the syntax of regular expressions in Perl.

If you haven't used regular expressions before, a quick-start
introduction is available in L<perlrequick>, and a longer tutorial
introduction is available in L<perlretut>.

For reference on how regular expressions are used in matching
operations, plus various examples of the same, see discussions of
C<m//>, C<s///>, C<qr//> and C<"??"> in L<perlop/"Regexp Quote-Like
Operators">.

New in v5.22, L<C<use re 'strict'>|re/'strict' mode> applies stricter
rules than otherwise when compiling regular expression patterns.  It can
find things that, while legal, may not be what you intended.

=head2 Modifiers

=head3 Overview

Matching operations can have various modifiers.  Modifiers
that relate to the interpretation of the regular expression inside
are listed below.  Modifiers that alter the way a regular expression
is used by Perl are detailed in L<perlop/"Regexp Quote-Like Operators"> and
L<perlop/"Gory details of parsing quoted constructs">.

=over 4

=item B<C<m>>
X</m> X<regex, multiline> X<regexp, multiline> X<regular expression, multiline>

Treat the string as multiple lines.  That is, change C<"^"> and C<"$"> from matching
the start of the string's first line and the end of its last line to
matching the start and end of each line within the string.

=item B<C<s>>
X</s> X<regex, single-line> X<regexp, single-line>
X<regular expression, single-line>

Treat the string as single line.  That is, change C<"."> to match any character
whatsoever, even a newline, which normally it would not match.

Used together, as C</ms>, they let the C<"."> match any character whatsoever,
while still allowing C<"^"> and C<"$"> to match, respectively, just after
and just before newlines within the string.

=item B<C<i>>
X</i> X<regex, case-insensitive> X<regexp, case-insensitive>
X<regular expression, case-insensitive>

Do case-insensitive pattern matching.  For example, "A" will match "a"
under C</i>.

If locale matching rules are in effect, the case map is taken from the
current
locale for code points less than 255, and from Unicode rules for larger
code points.  However, matches that would cross the Unicode
rules/non-Unicode rules boundary (ords 255/256) will not succeed, unless
the locale is a UTF-8 one.  See L<perllocale>.

There are a number of Unicode characters that match a sequence of
multiple characters under C</i>.  For example,
C<LATIN SMALL LIGATURE FI> should match the sequence C<fi>.  Perl is not
currently able to do this when the multiple characters are in the pattern and
are split between groupings, or when one or more are quantified.  Thus

 "\N{LATIN SMALL LIGATURE FI}" =~ /fi/i;          # Matches
 "\N{LATIN SMALL LIGATURE FI}" =~ /[fi][fi]/i;    # Doesn't match!
 "\N{LATIN SMALL LIGATURE FI}" =~ /fi*/i;         # Doesn't match!

 # The below doesn't match, and it isn't clear what $1 and $2 would
 # be even if it did!!
 "\N{LATIN SMALL LIGATURE FI}" =~ /(f)(i)/i;      # Doesn't match!

Perl doesn't match multiple characters in a bracketed
character class unless the character that maps to them is explicitly
mentioned, and it doesn't match them at all if the character class is
inverted, which otherwise could be highly confusing.  See
L<perlrecharclass/Bracketed Character Classes>, and
L<perlrecharclass/Negation>.

=item B<C<x>>
X</x>

Extend your pattern's legibility by permitting whitespace and comments.
Details in L</"/x">

=item B<C<p>>
X</p> X<regex, preserve> X<regexp, preserve>

Preserve the string matched such that C<${^PREMATCH}>, C<${^MATCH}>, and
C<${^POSTMATCH}> are available for use after matching.

In Perl 5.20 and higher this is ignored. Due to a new copy-on-write
mechanism, C<${^PREMATCH}>, C<${^MATCH}>, and C<${^POSTMATCH}> will be available
after the match regardless of the modifier.

=item B<C<a>>, B<C<d>>, B<C<l>>, and B<C<u>>
X</a> X</d> X</l> X</u>

These modifiers, all new in 5.14, affect which character-set rules
(Unicode, etc.) are used, as described below in
L</Character set modifiers>.

=item B<C<n>>
X</n> X<regex, non-capture> X<regexp, non-capture>
X<regular expression, non-capture>

Prevent the grouping metacharacters C<()> from capturing. This modifier,
new in 5.22, will stop C<$1>, C<$2>, etc... from being filled in.

  "hello" =~ /(hi|hello)/;   # $1 is "hello"
  "hello" =~ /(hi|hello)/n;  # $1 is undef

This is equivalent to putting C<?:> at the beginning of every capturing group:

  "hello" =~ /(?:hi|hello)/; # $1 is undef

C</n> can be negated on a per-group basis. Alternatively, named captures
may still be used.

  "hello" =~ /(?-n:(hi|hello))/n;   # $1 is "hello"
  "hello" =~ /(?<greet>hi|hello)/n; # $1 is "hello", $+{greet} is
                                    # "hello"

=item Other Modifiers

There are a number of flags that can be found at the end of regular
expression constructs that are I<not> generic regular expression flags, but
apply to the operation being performed, like matching or substitution (C<m//>
or C<s///> respectively).

Flags described further in
L<perlretut/"Using regular expressions in Perl"> are:

  c  - keep the current position during repeated matching
  g  - globally match the pattern repeatedly in the string

Substitution-specific modifiers described in

L<perlop/"s/PATTERN/REPLACEMENT/msixpodualngcer"> are:

  e  - evaluate the right-hand side as an expression
  ee - evaluate the right side as a string then eval the result
  o  - pretend to optimize your code, but actually introduce bugs
  r  - perform non-destructive substitution and return the new value

=back

Regular expression modifiers are usually written in documentation
as e.g., "the C</x> modifier", even though the delimiter
in question might not really be a slash.  The modifiers C</imnsxadlup>
may also be embedded within the regular expression itself using
the C<(?...)> construct, see L</Extended Patterns> below.

=head3 Details on some modifiers

Some of the modifiers require more explanation than given in the
L</Overview> above.

=head4 /x

C</x> tells
the regular expression parser to ignore most whitespace that is neither
backslashed nor within a bracketed character class.  You can use this to
break up your regular expression into (slightly) more readable parts.
Also, the C<"#"> character is treated as a metacharacter introducing a
comment that runs up to the pattern's closing delimiter, or to the end
of the current line if the pattern extends onto the next line.  Hence,
this is very much like an ordinary Perl code comment.  (You can include
the closing delimiter within the comment only if you precede it with a
backslash, so be careful!)

Use of C</x> means that if you want real
whitespace or C<"#"> characters in the pattern (outside a bracketed character
class, which is unaffected by C</x>), then you'll either have to
escape them (using backslashes or C<\Q...\E>) or encode them using octal,
hex, or C<\N{}> escapes.
It is ineffective to try to continue a comment onto the next line by
escaping the C<\n> with a backslash or C<\Q>.

You can use L</(?#text)> to create a comment that ends earlier than the
end of the current line, but C<text> also can't contain the closing
delimiter unless escaped with a backslash.

Taken together, these features go a long way towards
making Perl's regular expressions more readable.  Here's an example:

    # Delete (most) C comments.
    $program =~ s {
	/\*	# Match the opening delimiter.
	.*?	# Match a minimal number of characters.
	\*/	# Match the closing delimiter.
    } []gsx;

Note that anything inside
a C<\Q...\E> stays unaffected by C</x>.  And note that C</x> doesn't affect
space interpretation within a single multi-character construct.  For
example in C<\x{...}>, regardless of the C</x> modifier, there can be no
spaces.  Same for a L<quantifier|/Quantifiers> such as C<{3}> or
C<{5,}>.  Similarly, C<(?:...)> can't have a space between the C<"{">,
C<"?">, and C<":">.  Within any delimiters for such a
construct, allowed spaces are not affected by C</x>, and depend on the
construct.  For example, C<\x{...}> can't have spaces because hexadecimal
numbers don't have spaces in them.  But, Unicode properties can have spaces, so
in C<\p{...}> there can be spaces that follow the Unicode rules, for which see
L<perluniprops/Properties accessible through \p{} and \P{}>.
X</x>

The set of characters that are deemed whitespace are those that Unicode
calls "Pattern White Space", namely:

 U+0009 CHARACTER TABULATION
 U+000A LINE FEED
 U+000B LINE TABULATION
 U+000C FORM FEED
 U+000D CARRIAGE RETURN
 U+0020 SPACE
 U+0085 NEXT LINE
 U+200E LEFT-TO-RIGHT MARK
 U+200F RIGHT-TO-LEFT MARK
 U+2028 LINE SEPARATOR
 U+2029 PARAGRAPH SEPARATOR

=head4 Character set modifiers

C</d>, C</u>, C</a>, and C</l>, available starting in 5.14, are called
the character set modifiers; they affect the character set rules
used for the regular expression.

The C</d>, C</u>, and C</l> modifiers are not likely to be of much use
to you, and so you need not worry about them very much.  They exist for
Perl's internal use, so that complex regular expression data structures
can be automatically serialized and later exactly reconstituted,
including all their nuances.  But, since Perl can't keep a secret, and
there may be rare instances where they are useful, they are documented
here.

The C</a> modifier, on the other hand, may be useful.  Its purpose is to
allow code that is to work mostly on ASCII data to not have to concern
itself with Unicode.

Briefly, C</l> sets the character set to that of whatever B<L>ocale is in
effect at the time of the execution of the pattern match.

C</u> sets the character set to B<U>nicode.

C</a> also sets the character set to Unicode, BUT adds several
restrictions for B<A>SCII-safe matching.

C</d> is the old, problematic, pre-5.14 B<D>efault character set
behavior.  Its only use is to force that old behavior.

At any given time, exactly one of these modifiers is in effect.  Their
existence allows Perl to keep the originally compiled behavior of a
regular expression, regardless of what rules are in effect when it is
actually executed.  And if it is interpolated into a larger regex, the
original's rules continue to apply to it, and only it.

The C</l> and C</u> modifiers are automatically selected for
regular expressions compiled within the scope of various pragmas,
and we recommend that in general, you use those pragmas instead of
specifying these modifiers explicitly.  For one thing, the modifiers
affect only pattern matching, and do not extend to even any replacement
done, whereas using the pragmas gives consistent results for all
appropriate operations within their scopes.  For example,

 s/foo/\Ubar/il

will match "foo" using the locale's rules for case-insensitive matching,
but the C</l> does not affect how the C<\U> operates.  Most likely you
want both of them to use locale rules.  To do this, instead compile the
regular expression within the scope of C<use locale>.  This both
implicitly adds the C</l>, and applies locale rules to the C<\U>.   The
lesson is to C<use locale>, and not C</l> explicitly.

Similarly, it would be better to use C<use feature 'unicode_strings'>
instead of,

 s/foo/\Lbar/iu

to get Unicode rules, as the C<\L> in the former (but not necessarily
the latter) would also use Unicode rules.

More detail on each of the modifiers follows.  Most likely you don't
need to know this detail for C</l>, C</u>, and C</d>, and can skip ahead
to L<E<sol>a|/E<sol>a (and E<sol>aa)>.

=head4 /l

means to use the current locale's rules (see L<perllocale>) when pattern
matching.  For example, C<\w> will match the "word" characters of that
locale, and C<"/i"> case-insensitive matching will match according to
the locale's case folding rules.  The locale used will be the one in
effect at the time of execution of the pattern match.  This may not be
the same as the compilation-time locale, and can differ from one match
to another if there is an intervening call of the
L<setlocale() function|perllocale/The setlocale function>.

Prior to v5.20, Perl did not support multi-byte locales.  Starting then,
UTF-8 locales are supported.  No other multi byte locales are ever
likely to be supported.  However, in all locales, one can have code
points above 255 and these will always be treated as Unicode no matter
what locale is in effect.

Under Unicode rules, there are a few case-insensitive matches that cross
the 255/256 boundary.  Except for UTF-8 locales in Perls v5.20 and
later, these are disallowed under C</l>.  For example, 0xFF (on ASCII
platforms) does not caselessly match the character at 0x178, C<LATIN
CAPITAL LETTER Y WITH DIAERESIS>, because 0xFF may not be C<LATIN SMALL
LETTER Y WITH DIAERESIS> in the current locale, and Perl has no way of
knowing if that character even exists in the locale, much less what code
point it is.

In a UTF-8 locale in v5.20 and later, the only visible difference
between locale and non-locale in regular expressions should be tainting
(see L<perlsec>).

This modifier may be specified to be the default by C<use locale>, but
see L</Which character set modifier is in effect?>.
X</l>

=head4 /u

means to use Unicode rules when pattern matching.  On ASCII platforms,
this means that the code points between 128 and 255 take on their
Latin-1 (ISO-8859-1) meanings (which are the same as Unicode's).
(Otherwise Perl considers their meanings to be undefined.)  Thus,
under this modifier, the ASCII platform effectively becomes a Unicode
platform; and hence, for example, C<\w> will match any of the more than
100_000 word characters in Unicode.

Unlike most locales, which are specific to a language and country pair,
Unicode classifies all the characters that are letters I<somewhere> in
the world as
C<\w>.  For example, your locale might not think that C<LATIN SMALL
LETTER ETH> is a letter (unless you happen to speak Icelandic), but
Unicode does.  Similarly, all the characters that are decimal digits
somewhere in the world will match C<\d>; this is hundreds, not 10,
possible matches.  And some of those digits look like some of the 10
ASCII digits, but mean a different number, so a human could easily think
a number is a different quantity than it really is.  For example,
C<BENGALI DIGIT FOUR> (U+09EA) looks very much like an
C<ASCII DIGIT EIGHT> (U+0038).  And, C<\d+>, may match strings of digits
that are a mixture from different writing systems, creating a security
issue.  L<Unicode::UCD/num()> can be used to sort
this out.  Or the C</a> modifier can be used to force C<\d> to match
just the ASCII 0 through 9.

Also, under this modifier, case-insensitive matching works on the full
set of Unicode
characters.  The C<KELVIN SIGN>, for example matches the letters "k" and
"K"; and C<LATIN SMALL LIGATURE FF> matches the sequence "ff", which,
if you're not prepared, might make it look like a hexadecimal constant,
presenting another potential security issue.  See
L<http://unicode.org/reports/tr36> for a detailed discussion of Unicode
security issues.

This modifier may be specified to be the default by C<use feature
'unicode_strings>, C<use locale ':not_characters'>, or
C<L<use 5.012|perlfunc/use VERSION>> (or higher),
but see L</Which character set modifier is in effect?>.
X</u>

=head4 /d

This modifier means to use the "Default" native rules of the platform
except when there is cause to use Unicode rules instead, as follows:

=over 4

=item 1

the target string is encoded in UTF-8; or

=item 2

the pattern is encoded in UTF-8; or

=item 3

the pattern explicitly mentions a code point that is above 255 (say by
C<\x{100}>); or

=item 4

the pattern uses a Unicode name (C<\N{...}>);  or

=item 5

the pattern uses a Unicode property (C<\p{...}> or C<\P{...}>); or

=item 6

the pattern uses a Unicode break (C<\b{...}> or C<\B{...}>); or

=item 7

the pattern uses L</C<(?[ ])>>

=back

Another mnemonic for this modifier is "Depends", as the rules actually
used depend on various things, and as a result you can get unexpected
results.  See L<perlunicode/The "Unicode Bug">.  The Unicode Bug has
become rather infamous, leading to yet another (printable) name for this
modifier, "Dodgy".

Unless the pattern or string are encoded in UTF-8, only ASCII characters
can match positively.

Here are some examples of how that works on an ASCII platform:

 $str =  "\xDF";      # $str is not in UTF-8 format.
 $str =~ /^\w/;       # No match, as $str isn't in UTF-8 format.
 $str .= "\x{0e0b}";  # Now $str is in UTF-8 format.
 $str =~ /^\w/;       # Match! $str is now in UTF-8 format.
 chop $str;
 $str =~ /^\w/;       # Still a match! $str remains in UTF-8 format.

This modifier is automatically selected by default when none of the
others are, so yet another name for it is "Default".

Because of the unexpected behaviors associated with this modifier, you
probably should only explicitly use it to maintain weird backward
compatibilities.

=head4 /a (and /aa)

This modifier stands for ASCII-restrict (or ASCII-safe).  This modifier,
unlike the others, may be doubled-up to increase its effect.

When it appears singly, it causes the sequences C<\d>, C<\s>, C<\w>, and
the Posix character classes to match only in the ASCII range.  They thus
revert to their pre-5.6, pre-Unicode meanings.  Under C</a>,  C<\d>
always means precisely the digits C<"0"> to C<"9">; C<\s> means the five
characters C<[ \f\n\r\t]>, and starting in Perl v5.18, the vertical tab;
C<\w> means the 63 characters
C<[A-Za-z0-9_]>; and likewise, all the Posix classes such as
C<[[:print:]]> match only the appropriate ASCII-range characters.

This modifier is useful for people who only incidentally use Unicode,
and who do not wish to be burdened with its complexities and security
concerns.

With C</a>, one can write C<\d> with confidence that it will only match
ASCII characters, and should the need arise to match beyond ASCII, you
can instead use C<\p{Digit}> (or C<\p{Word}> for C<\w>).  There are
similar C<\p{...}> constructs that can match beyond ASCII both white
space (see L<perlrecharclass/Whitespace>), and Posix classes (see
L<perlrecharclass/POSIX Character Classes>).  Thus, this modifier
doesn't mean you can't use Unicode, it means that to get Unicode
matching you must explicitly use a construct (C<\p{}>, C<\P{}>) that
signals Unicode.

As you would expect, this modifier causes, for example, C<\D> to mean
the same thing as C<[^0-9]>; in fact, all non-ASCII characters match
C<\D>, C<\S>, and C<\W>.  C<\b> still means to match at the boundary
between C<\w> and C<\W>, using the C</a> definitions of them (similarly
for C<\B>).

Otherwise, C</a> behaves like the C</u> modifier, in that
case-insensitive matching uses Unicode rules; for example, "k" will
match the Unicode C<\N{KELVIN SIGN}> under C</i> matching, and code
points in the Latin1 range, above ASCII will have Unicode rules when it
comes to case-insensitive matching.

To forbid ASCII/non-ASCII matches (like "k" with C<\N{KELVIN SIGN}>),
specify the C<"a"> twice, for example C</aai> or C</aia>.  (The first
occurrence of C<"a"> restricts the C<\d>, etc., and the second occurrence
adds the C</i> restrictions.)  But, note that code points outside the
ASCII range will use Unicode rules for C</i> matching, so the modifier
doesn't really restrict things to just ASCII; it just forbids the
intermixing of ASCII and non-ASCII.

To summarize, this modifier provides protection for applications that
don't wish to be exposed to all of Unicode.  Specifying it twice
gives added protection.

This modifier may be specified to be the default by C<use re '/a'>
or C<use re '/aa'>.  If you do so, you may actually have occasion to use
the C</u> modifier explicitly if there are a few regular expressions
where you do want full Unicode rules (but even here, it's best if
everything were under feature C<"unicode_strings">, along with the
C<use re '/aa'>).  Also see L</Which character set modifier is in
effect?>.
X</a>
X</aa>

=head4 Which character set modifier is in effect?

Which of these modifiers is in effect at any given point in a regular
expression depends on a fairly complex set of interactions.  These have
been designed so that in general you don't have to worry about it, but
this section gives the gory details.  As
explained below in L</Extended Patterns> it is possible to explicitly
specify modifiers that apply only to portions of a regular expression.
The innermost always has priority over any outer ones, and one applying
to the whole expression has priority over any of the default settings that are
described in the remainder of this section.

The C<L<use re 'E<sol>foo'|re/"'/flags' mode">> pragma can be used to set
default modifiers (including these) for regular expressions compiled
within its scope.  This pragma has precedence over the other pragmas
listed below that also change the defaults.

Otherwise, C<L<use locale|perllocale>> sets the default modifier to C</l>;
and C<L<use feature 'unicode_strings|feature>>, or
C<L<use 5.012|perlfunc/use VERSION>> (or higher) set the default to
C</u> when not in the same scope as either C<L<use locale|perllocale>>
or C<L<use bytes|bytes>>.
(C<L<use locale ':not_characters'|perllocale/Unicode and UTF-8>> also
sets the default to C</u>, overriding any plain C<use locale>.)
Unlike the mechanisms mentioned above, these
affect operations besides regular expressions pattern matching, and so
give more consistent results with other operators, including using
C<\U>, C<\l>, etc. in substitution replacements.

If none of the above apply, for backwards compatibility reasons, the
C</d> modifier is the one in effect by default.  As this can lead to
unexpected results, it is best to specify which other rule set should be
used.

=head4 Character set modifier behavior prior to Perl 5.14

Prior to 5.14, there were no explicit modifiers, but C</l> was implied
for regexes compiled within the scope of C<use locale>, and C</d> was
implied otherwise.  However, interpolating a regex into a larger regex
would ignore the original compilation in favor of whatever was in effect
at the time of the second compilation.  There were a number of
inconsistencies (bugs) with the C</d> modifier, where Unicode rules
would be used when inappropriate, and vice versa.  C<\p{}> did not imply
Unicode rules, and neither did all occurrences of C<\N{}>, until 5.12.

=head2 Regular Expressions

=head3 Metacharacters

The patterns used in Perl pattern matching evolved from those supplied in
the Version 8 regex routines.  (The routines are derived
(distantly) from Henry Spencer's freely redistributable reimplementation
of the V8 routines.)  See L<Version 8 Regular Expressions> for
details.

In particular the following metacharacters have their standard I<egrep>-ish
meanings:
X<metacharacter>
X<\> X<^> X<.> X<$> X<|> X<(> X<()> X<[> X<[]>


    \        Quote the next metacharacter
    ^        Match the beginning of the line
    .        Match any character (except newline)
    $        Match the end of the string (or before newline at the end
             of the string)
    |        Alternation
    ()       Grouping
    []       Bracketed Character class

By default, the C<"^"> character is guaranteed to match only the
beginning of the string, the C<"$"> character only the end (or before the
newline at the end), and Perl does certain optimizations with the
assumption that the string contains only one line.  Embedded newlines
will not be matched by C<"^"> or C<"$">.  You may, however, wish to treat a
string as a multi-line buffer, such that the C<"^"> will match after any
newline within the string (except if the newline is the last character in
the string), and C<"$"> will match before any newline.  At the
cost of a little more overhead, you can do this by using the /m modifier
on the pattern match operator.  (Older programs did this by setting C<$*>,
but this option was removed in perl 5.10.)
X<^> X<$> X</m>

To simplify multi-line substitutions, the C<"."> character never matches a
newline unless you use the C</s> modifier, which in effect tells Perl to pretend
the string is a single line--even if it isn't.
X<.> X</s>

=head3 Quantifiers

The following standard quantifiers are recognized:
X<metacharacter> X<quantifier> X<*> X<+> X<?> X<{n}> X<{n,}> X<{n,m}>

    *           Match 0 or more times
    +           Match 1 or more times
    ?           Match 1 or 0 times
    {n}         Match exactly n times
    {n,}        Match at least n times
    {n,m}       Match at least n but not more than m times

(If a curly bracket occurs in a context other than one of the
quantifiers listed above, where it does not form part of a backslashed
sequence like C<\x{...}>, it is treated as a regular character.
However, a deprecation warning is raised for these
occurrences, and in Perl v5.26, literal uses of a curly bracket will be
required to be escaped, say by preceding them with a backslash (C<"\{">)
or enclosing them within square brackets  (C<"[{]">).  This change will
allow for future syntax extensions (like making the lower bound of a
quantifier optional), and better error checking of quantifiers.)

The C<"*"> quantifier is equivalent to C<{0,}>, the C<"+">
quantifier to C<{1,}>, and the C<"?"> quantifier to C<{0,1}>.  I<n> and I<m> are limited
to non-negative integral values less than a preset limit defined when perl is built.
This is usually 32766 on the most common platforms.  The actual limit can
be seen in the error message generated by code such as this:

    $_ **= $_ , / {$_} / for 2 .. 42;

By default, a quantified subpattern is "greedy", that is, it will match as
many times as possible (given a particular starting location) while still
allowing the rest of the pattern to match.  If you want it to match the
minimum number of times possible, follow the quantifier with a C<"?">.  Note
that the meanings don't change, just the "greediness":
X<metacharacter> X<greedy> X<greediness>
X<?> X<*?> X<+?> X<??> X<{n}?> X<{n,}?> X<{n,m}?>

    *?        Match 0 or more times, not greedily
    +?        Match 1 or more times, not greedily
    ??        Match 0 or 1 time, not greedily
    {n}?      Match exactly n times, not greedily (redundant)
    {n,}?     Match at least n times, not greedily
    {n,m}?    Match at least n but not more than m times, not greedily

Normally when a quantified subpattern does not allow the rest of the
overall pattern to match, Perl will backtrack. However, this behaviour is
sometimes undesirable. Thus Perl provides the "possessive" quantifier form
as well.

 *+     Match 0 or more times and give nothing back
 ++     Match 1 or more times and give nothing back
 ?+     Match 0 or 1 time and give nothing back
 {n}+   Match exactly n times and give nothing back (redundant)
 {n,}+  Match at least n times and give nothing back
 {n,m}+ Match at least n but not more than m times and give nothing back

For instance,

   'aaaa' =~ /a++a/

will never match, as the C<a++> will gobble up all the C<a>'s in the
string and won't leave any for the remaining part of the pattern. This
feature can be extremely useful to give perl hints about where it
shouldn't backtrack. For instance, the typical "match a double-quoted
string" problem can be most efficiently performed when written as:

   /"(?:[^"\\]++|\\.)*+"/

as we know that if the final quote does not match, backtracking will not
help. See the independent subexpression
L</C<< (?>pattern) >>> for more details;
possessive quantifiers are just syntactic sugar for that construct. For
instance the above example could also be written as follows:

   /"(?>(?:(?>[^"\\]+)|\\.)*)"/

Note that the possessive quantifier modifier can not be be combined
with the non-greedy modifier. This is because it would make no sense.
Consider the follow equivalency table:

    Illegal         Legal
    ------------    ------
    X??+            X{0}
    X+?+            X{1}
    X{min,max}?+    X{min}

=head3 Escape sequences

Because patterns are processed as double-quoted strings, the following
also work:

 \t          tab                   (HT, TAB)
 \n          newline               (LF, NL)
 \r          return                (CR)
 \f          form feed             (FF)
 \a          alarm (bell)          (BEL)
 \e          escape (think troff)  (ESC)
 \cK         control char          (example: VT)
 \x{}, \x00  character whose ordinal is the given hexadecimal number
 \N{name}    named Unicode character or character sequence
 \N{U+263D}  Unicode character     (example: FIRST QUARTER MOON)
 \o{}, \000  character whose ordinal is the given octal number
 \l          lowercase next char (think vi)
 \u          uppercase next char (think vi)
 \L          lowercase until \E (think vi)
 \U          uppercase until \E (think vi)
 \Q          quote (disable) pattern metacharacters until \E
 \E          end either case modification or quoted section, think vi

Details are in L<perlop/Quote and Quote-like Operators>.

=head3 Character Classes and other Special Escapes

In addition, Perl defines the following:
X<\g> X<\k> X<\K> X<backreference>

 Sequence   Note    Description
  [...]     [1]  Match a character according to the rules of the
                   bracketed character class defined by the "...".
                   Example: [a-z] matches "a" or "b" or "c" ... or "z"
  [[:...:]] [2]  Match a character according to the rules of the POSIX
                   character class "..." within the outer bracketed
                   character class.  Example: [[:upper:]] matches any
                   uppercase character.
  (?[...])  [8]  Extended bracketed character class
  \w        [3]  Match a "word" character (alphanumeric plus "_", plus
                   other connector punctuation chars plus Unicode
                   marks)
  \W        [3]  Match a non-"word" character
  \s        [3]  Match a whitespace character
  \S        [3]  Match a non-whitespace character
  \d        [3]  Match a decimal digit character
  \D        [3]  Match a non-digit character
  \pP       [3]  Match P, named property.  Use \p{Prop} for longer names
  \PP       [3]  Match non-P
  \X        [4]  Match Unicode "eXtended grapheme cluster"
  \1        [5]  Backreference to a specific capture group or buffer.
                   '1' may actually be any positive integer.
  \g1       [5]  Backreference to a specific or previous group,
  \g{-1}    [5]  The number may be negative indicating a relative
                   previous group and may optionally be wrapped in
                   curly brackets for safer parsing.
  \g{name}  [5]  Named backreference
  \k<name>  [5]  Named backreference
  \K        [6]  Keep the stuff left of the \K, don't include it in $&
  \N        [7]  Any character but \n.  Not affected by /s modifier
  \v        [3]  Vertical whitespace
  \V        [3]  Not vertical whitespace
  \h        [3]  Horizontal whitespace
  \H        [3]  Not horizontal whitespace
  \R        [4]  Linebreak

=over 4

=item [1]

See L<perlrecharclass/Bracketed Character Classes> for details.

=item [2]

See L<perlrecharclass/POSIX Character Classes> for details.

=item [3]

See L<perlrecharclass/Backslash sequences> for details.

=item [4]

See L<perlrebackslash/Misc> for details.

=item [5]

See L</Capture groups> below for details.

=item [6]

See L</Extended Patterns> below for details.

=item [7]

Note that C<\N> has two meanings.  When of the form C<\N{NAME}>, it matches the
character or character sequence whose name is C<NAME>; and similarly
when of the form C<\N{U+I<hex>}>, it matches the character whose Unicode
code point is I<hex>.  Otherwise it matches any character but C<\n>.

=item [8]

See L<perlrecharclass/Extended Bracketed Character Classes> for details.

=back

=head3 Assertions

Perl defines the following zero-width assertions:
X<zero-width assertion> X<assertion> X<regex, zero-width assertion>
X<regexp, zero-width assertion>
X<regular expression, zero-width assertion>
X<\b> X<\B> X<\A> X<\Z> X<\z> X<\G>

    \b{} Match at Unicode boundary of specified type
    \B{} Match where corresponding \b{} doesn't match
    \b  Match a word boundary
    \B  Match except at a word boundary
    \A  Match only at beginning of string
    \Z  Match only at end of string, or before newline at the end
    \z  Match only at end of string
    \G  Match only at pos() (e.g. at the end-of-match position
        of prior m//g)

A Unicode boundary (C<\b{}>), available starting in v5.22, is a spot
between two characters, or before the first character in the string, or
after the final character in the string where certain criteria defined
by Unicode are met.  See L<perlrebackslash/\b{}, \b, \B{}, \B> for
details.

A word boundary (C<\b>) is a spot between two characters
that has a C<\w> on one side of it and a C<\W> on the other side
of it (in either order), counting the imaginary characters off the
beginning and end of the string as matching a C<\W>.  (Within
character classes C<\b> represents backspace rather than a word
boundary, just as it normally does in any double-quoted string.)
The C<\A> and C<\Z> are just like C<"^"> and C<"$">, except that they
won't match multiple times when the C</m> modifier is used, while
C<"^"> and C<"$"> will match at every internal line boundary.  To match
the actual end of the string and not ignore an optional trailing
newline, use C<\z>.
X<\b> X<\A> X<\Z> X<\z> X</m>

The C<\G> assertion can be used to chain global matches (using
C<m//g>), as described in L<perlop/"Regexp Quote-Like Operators">.
It is also useful when writing C<lex>-like scanners, when you have
several patterns that you want to match against consequent substrings
of your string; see the previous reference.  The actual location
where C<\G> will match can also be influenced by using C<pos()> as
an lvalue: see L<perlfunc/pos>. Note that the rule for zero-length
matches (see L</"Repeated Patterns Matching a Zero-length Substring">)
is modified somewhat, in that contents to the left of C<\G> are
not counted when determining the length of the match. Thus the following
will not match forever:
X<\G>

     my $string = 'ABC';
     pos($string) = 1;
     while ($string =~ /(.\G)/g) {
         print $1;
     }

It will print 'A' and then terminate, as it considers the match to
be zero-width, and thus will not match at the same position twice in a
row.

It is worth noting that C<\G> improperly used can result in an infinite
loop. Take care when using patterns that include C<\G> in an alternation.

Note also that C<s///> will refuse to overwrite part of a substitution
that has already been replaced; so for example this will stop after the
first iteration, rather than iterating its way backwards through the
string:

    $_ = "123456789";
    pos = 6;
    s/.(?=.\G)/X/g;
    print; 	# prints 1234X6789, not XXXXX6789


=head3 Capture groups

The bracketing construct C<( ... )> creates capture groups (also referred to as
capture buffers). To refer to the current contents of a group later on, within
the same pattern, use C<\g1> (or C<\g{1}>) for the first, C<\g2> (or C<\g{2}>)
for the second, and so on.
This is called a I<backreference>.
X<regex, capture buffer> X<regexp, capture buffer>
X<regex, capture group> X<regexp, capture group>
X<regular expression, capture buffer> X<backreference>
X<regular expression, capture group> X<backreference>
X<\g{1}> X<\g{-1}> X<\g{name}> X<relative backreference> X<named backreference>
X<named capture buffer> X<regular expression, named capture buffer>
X<named capture group> X<regular expression, named capture group>
X<%+> X<$+{name}> X<< \k<name> >>
There is no limit to the number of captured substrings that you may use.
Groups are numbered with the leftmost open parenthesis being number 1, etc.  If
a group did not match, the associated backreference won't match either. (This
can happen if the group is optional, or in a different branch of an
alternation.)
You can omit the C<"g">, and write C<"\1">, etc, but there are some issues with
this form, described below.

You can also refer to capture groups relatively, by using a negative number, so
that C<\g-1> and C<\g{-1}> both refer to the immediately preceding capture
group, and C<\g-2> and C<\g{-2}> both refer to the group before it.  For
example:

        /
         (Y)            # group 1
         (              # group 2
            (X)         # group 3
            \g{-1}      # backref to group 3
            \g{-3}      # backref to group 1
         )
        /x

would match the same as C</(Y) ( (X) \g3 \g1 )/x>.  This allows you to
interpolate regexes into larger regexes and not have to worry about the
capture groups being renumbered.

You can dispense with numbers altogether and create named capture groups.
The notation is C<(?E<lt>I<name>E<gt>...)> to declare and C<\g{I<name>}> to
reference.  (To be compatible with .Net regular expressions, C<\g{I<name>}> may
also be written as C<\k{I<name>}>, C<\kE<lt>I<name>E<gt>> or C<\k'I<name>'>.)
I<name> must not begin with a number, nor contain hyphens.
When different groups within the same pattern have the same name, any reference
to that name assumes the leftmost defined group.  Named groups count in
absolute and relative numbering, and so can also be referred to by those
numbers.
(It's possible to do things with named capture groups that would otherwise
require C<(??{})>.)

Capture group contents are dynamically scoped and available to you outside the
pattern until the end of the enclosing block or until the next successful
match, whichever comes first.  (See L<perlsyn/"Compound Statements">.)
You can refer to them by absolute number (using C<"$1"> instead of C<"\g1">,
etc); or by name via the C<%+> hash, using C<"$+{I<name>}">.

Braces are required in referring to named capture groups, but are optional for
absolute or relative numbered ones.  Braces are safer when creating a regex by
concatenating smaller strings.  For example if you have C<qr/$a$b/>, and C<$a>
contained C<"\g1">, and C<$b> contained C<"37">, you would get C</\g137/> which
is probably not what you intended.

The C<\g> and C<\k> notations were introduced in Perl 5.10.0.  Prior to that
there were no named nor relative numbered capture groups.  Absolute numbered
groups were referred to using C<\1>,
C<\2>, etc., and this notation is still
accepted (and likely always will be).  But it leads to some ambiguities if
there are more than 9 capture groups, as C<\10> could mean either the tenth
capture group, or the character whose ordinal in octal is 010 (a backspace in
ASCII).  Perl resolves this ambiguity by interpreting C<\10> as a backreference
only if at least 10 left parentheses have opened before it.  Likewise C<\11> is
a backreference only if at least 11 left parentheses have opened before it.
And so on.  C<\1> through C<\9> are always interpreted as backreferences.
There are several examples below that illustrate these perils.  You can avoid
the ambiguity by always using C<\g{}> or C<\g> if you mean capturing groups;
and for octal constants always using C<\o{}>, or for C<\077> and below, using 3
digits padded with leading zeros, since a leading zero implies an octal
constant.

The C<\I<digit>> notation also works in certain circumstances outside
the pattern.  See L</Warning on \1 Instead of $1> below for details.

Examples:

    s/^([^ ]*) *([^ ]*)/$2 $1/;     # swap first two words

    /(.)\g1/                        # find first doubled char
         and print "'$1' is the first doubled character\n";

    /(?<char>.)\k<char>/            # ... a different way
         and print "'$+{char}' is the first doubled character\n";

    /(?'char'.)\g1/                 # ... mix and match
         and print "'$1' is the first doubled character\n";

    if (/Time: (..):(..):(..)/) {   # parse out values
        $hours = $1;
        $minutes = $2;
        $seconds = $3;
    }

    /(.)(.)(.)(.)(.)(.)(.)(.)(.)\g10/   # \g10 is a backreference
    /(.)(.)(.)(.)(.)(.)(.)(.)(.)\10/    # \10 is octal
    /((.)(.)(.)(.)(.)(.)(.)(.)(.))\10/  # \10 is a backreference
    /((.)(.)(.)(.)(.)(.)(.)(.)(.))\010/ # \010 is octal

    $a = '(.)\1';        # Creates problems when concatenated.
    $b = '(.)\g{1}';     # Avoids the problems.
    "aa" =~ /${a}/;      # True
    "aa" =~ /${b}/;      # True
    "aa0" =~ /${a}0/;    # False!
    "aa0" =~ /${b}0/;    # True
    "aa\x08" =~ /${a}0/;  # True!
    "aa\x08" =~ /${b}0/;  # False

Several special variables also refer back to portions of the previous
match.  C<$+> returns whatever the last bracket match matched.
C<$&> returns the entire matched string.  (At one point C<$0> did
also, but now it returns the name of the program.)  C<$`> returns
everything before the matched string.  C<$'> returns everything
after the matched string. And C<$^N> contains whatever was matched by
the most-recently closed group (submatch). C<$^N> can be used in
extended patterns (see below), for example to assign a submatch to a
variable.
X<$+> X<$^N> X<$&> X<$`> X<$'>

These special variables, like the C<%+> hash and the numbered match variables
(C<$1>, C<$2>, C<$3>, etc.) are dynamically scoped
until the end of the enclosing block or until the next successful
match, whichever comes first.  (See L<perlsyn/"Compound Statements">.)
X<$+> X<$^N> X<$&> X<$`> X<$'>
X<$1> X<$2> X<$3> X<$4> X<$5> X<$6> X<$7> X<$8> X<$9>

B<NOTE>: Failed matches in Perl do not reset the match variables,
which makes it easier to write code that tests for a series of more
specific cases and remembers the best match.

B<WARNING>: If your code is to run on Perl 5.16 or earlier,
beware that once Perl sees that you need one of C<$&>, C<$`>, or
C<$'> anywhere in the program, it has to provide them for every
pattern match.  This may substantially slow your program.

Perl uses the same mechanism to produce C<$1>, C<$2>, etc, so you also
pay a price for each pattern that contains capturing parentheses.
(To avoid this cost while retaining the grouping behaviour, use the
extended regular expression C<(?: ... )> instead.)  But if you never
use C<$&>, C<$`> or C<$'>, then patterns I<without> capturing
parentheses will not be penalized.  So avoid C<$&>, C<$'>, and C<$`>
if you can, but if you can't (and some algorithms really appreciate
them), once you've used them once, use them at will, because you've
already paid the price.
X<$&> X<$`> X<$'>

Perl 5.16 introduced a slightly more efficient mechanism that notes
separately whether each of C<$`>, C<$&>, and C<$'> have been seen, and
thus may only need to copy part of the string.  Perl 5.20 introduced a
much more efficient copy-on-write mechanism which eliminates any slowdown.

As another workaround for this problem, Perl 5.10.0 introduced C<${^PREMATCH}>,
C<${^MATCH}> and C<${^POSTMATCH}>, which are equivalent to C<$`>, C<$&>
and C<$'>, B<except> that they are only guaranteed to be defined after a
successful match that was executed with the C</p> (preserve) modifier.
The use of these variables incurs no global performance penalty, unlike
their punctuation character equivalents, however at the trade-off that you
have to tell perl when you want to use them.  As of Perl 5.20, these three
variables are equivalent to C<$`>, C<$&> and C<$'>, and C</p> is ignored.
X</p> X<p modifier>

=head2 Quoting metacharacters

Backslashed metacharacters in Perl are alphanumeric, such as C<\b>,
C<\w>, C<\n>.  Unlike some other regular expression languages, there
are no backslashed symbols that aren't alphanumeric.  So anything
that looks like C<\\>, C<\(>, C<\)>, C<\[>, C<\]>, C<\{>, or C<\}> is
always
interpreted as a literal character, not a metacharacter.  This was
once used in a common idiom to disable or quote the special meanings
of regular expression metacharacters in a string that you want to
use for a pattern. Simply quote all non-"word" characters:

    $pattern =~ s/(\W)/\\$1/g;

(If C<use locale> is set, then this depends on the current locale.)
Today it is more common to use the C<L<quotemeta()|perlfunc/quotemeta>>
function or the C<\Q> metaquoting escape sequence to disable all
metacharacters' special meanings like this:

    /$unquoted\Q$quoted\E$unquoted/

Beware that if you put literal backslashes (those not inside
interpolated variables) between C<\Q> and C<\E>, double-quotish
backslash interpolation may lead to confusing results.  If you
I<need> to use literal backslashes within C<\Q...\E>,
consult L<perlop/"Gory details of parsing quoted constructs">.

C<quotemeta()> and C<\Q> are fully described in L<perlfunc/quotemeta>.

=head2 Extended Patterns

Perl also defines a consistent extension syntax for features not
found in standard tools like B<awk> and
B<lex>.  The syntax for most of these is a
pair of parentheses with a question mark as the first thing within
the parentheses.  The character after the question mark indicates
the extension.

The stability of these extensions varies widely.  Some have been
part of the core language for many years.  Others are experimental
and may change without warning or be completely removed.  Check
the documentation on an individual feature to verify its current
status.

A question mark was chosen for this and for the minimal-matching
construct because 1) question marks are rare in older regular
expressions, and 2) whenever you see one, you should stop and
"question" exactly what is going on.  That's psychology....

=over 4

=item C<(?#text)>
X<(?#)>

A comment.  The text is ignored.
Note that Perl closes
the comment as soon as it sees a C<")">, so there is no way to put a literal
C<")"> in the comment.  The pattern's closing delimiter must be escaped by
a backslash if it appears in the comment.

See L</E<sol>x> for another way to have comments in patterns.

=item C<(?adlupimnsx-imnsx)>

=item C<(?^alupimnsx)>
X<(?)> X<(?^)>

One or more embedded pattern-match modifiers, to be turned on (or
turned off, if preceded by C<"-">) for the remainder of the pattern or
the remainder of the enclosing pattern group (if any).

This is particularly useful for dynamic patterns, such as those read in from a
configuration file, taken from an argument, or specified in a table
somewhere.  Consider the case where some patterns want to be
case-sensitive and some do not:  The case-insensitive ones merely need to
include C<(?i)> at the front of the pattern.  For example:

    $pattern = "foobar";
    if ( /$pattern/i ) { }

    # more flexible:

    $pattern = "(?i)foobar";
    if ( /$pattern/ ) { }

These modifiers are restored at the end of the enclosing group. For example,

    ( (?i) blah ) \s+ \g1

will match C<blah> in any case, some spaces, and an exact (I<including the case>!)
repetition of the previous word, assuming the C</x> modifier, and no C</i>
modifier outside this group.

These modifiers do not carry over into named subpatterns called in the
enclosing group. In other words, a pattern such as C<((?i)(?&NAME))> does not
change the case-sensitivity of the C<"NAME"> pattern.

Any of these modifiers can be set to apply globally to all regular
expressions compiled within the scope of a C<use re>.  See
L<re/"'/flags' mode">.

Starting in Perl 5.14, a C<"^"> (caret or circumflex accent) immediately
after the C<"?"> is a shorthand equivalent to C<d-imnsx>.  Flags (except
C<"d">) may follow the caret to override it.
But a minus sign is not legal with it.

Note that the C<a>, C<d>, C<l>, C<p>, and C<u> modifiers are special in
that they can only be enabled, not disabled, and the C<a>, C<d>, C<l>, and
C<u> modifiers are mutually exclusive: specifying one de-specifies the
others, and a maximum of one (or two C<a>'s) may appear in the
construct.  Thus, for
example, C<(?-p)> will warn when compiled under C<use warnings>;
C<(?-d:...)> and C<(?dl:...)> are fatal errors.

Note also that the C<p> modifier is special in that its presence
anywhere in a pattern has a global effect.

=item C<(?:pattern)>
X<(?:)>

=item C<(?adluimnsx-imnsx:pattern)>

=item C<(?^aluimnsx:pattern)>
X<(?^:)>

This is for clustering, not capturing; it groups subexpressions like
C<"()">, but doesn't make backreferences as C<"()"> does.  So

    @@fields = split(/\b(?:a|b|c)\b/)

is like

    @@fields = split(/\b(a|b|c)\b/)

but doesn't spit out extra fields.  It's also cheaper not to capture
characters if you don't need to.

Any letters between C<"?"> and C<":"> act as flags modifiers as with
C<(?adluimnsx-imnsx)>.  For example,

    /(?s-i:more.*than).*million/i

is equivalent to the more verbose

    /(?:(?s-i)more.*than).*million/i

Note that any C<()> constructs enclosed within this one will still
capture unless the C</n> modifier is in effect.

Starting in Perl 5.14, a C<"^"> (caret or circumflex accent) immediately
after the C<"?"> is a shorthand equivalent to C<d-imnsx>.  Any positive
flags (except C<"d">) may follow the caret, so

    (?^x:foo)

is equivalent to

    (?x-imns:foo)

The caret tells Perl that this cluster doesn't inherit the flags of any
surrounding pattern, but uses the system defaults (C<d-imnsx>),
modified by any flags specified.

The caret allows for simpler stringification of compiled regular
expressions.  These look like

    (?^:pattern)

with any non-default flags appearing between the caret and the colon.
A test that looks at such stringification thus doesn't need to have the
system default flags hard-coded in it, just the caret.  If new flags are
added to Perl, the meaning of the caret's expansion will change to include
the default for those flags, so the test will still work, unchanged.

Specifying a negative flag after the caret is an error, as the flag is
redundant.

Mnemonic for C<(?^...)>:  A fresh beginning since the usual use of a caret is
to match at the beginning.

=item C<(?|pattern)>
X<(?|)> X<Branch reset>

This is the "branch reset" pattern, which has the special property
that the capture groups are numbered from the same starting point
in each alternation branch. It is available starting from perl 5.10.0.

Capture groups are numbered from left to right, but inside this
construct the numbering is restarted for each branch.

The numbering within each branch will be as normal, and any groups
following this construct will be numbered as though the construct
contained only one branch, that being the one with the most capture
groups in it.

This construct is useful when you want to capture one of a
number of alternative matches.

Consider the following pattern.  The numbers underneath show in
which group the captured content will be stored.


    # before  ---------------branch-reset----------- after        
    / ( a )  (?| x ( y ) z | (p (q) r) | (t) u (v) ) ( z ) /x
    # 1            2         2  3        2     3     4  

Be careful when using the branch reset pattern in combination with 
named captures. Named captures are implemented as being aliases to 
numbered groups holding the captures, and that interferes with the
implementation of the branch reset pattern. If you are using named
captures in a branch reset pattern, it's best to use the same names,
in the same order, in each of the alternations:

   /(?|  (?<a> x ) (?<b> y )
      |  (?<a> z ) (?<b> w )) /x

Not doing so may lead to surprises:

  "12" =~ /(?| (?<a> \d+ ) | (?<b> \D+))/x;
  say $+ {a};   # Prints '12'
  say $+ {b};   # *Also* prints '12'.

The problem here is that both the group named C<< a >> and the group
named C<< b >> are aliases for the group belonging to C<< $1 >>.

=item Lookaround Assertions
X<look-around assertion> X<lookaround assertion> X<look-around> X<lookaround>

Lookaround assertions are zero-width patterns which match a specific
pattern without including it in C<$&>. Positive assertions match when
their subpattern matches, negative assertions match when their subpattern
fails. Lookbehind matches text up to the current match position,
lookahead matches text following the current match position.

=over 4

=item C<(?=pattern)>
X<(?=)> X<look-ahead, positive> X<lookahead, positive>

A zero-width positive lookahead assertion.  For example, C</\w+(?=\t)/>
matches a word followed by a tab, without including the tab in C<$&>.

=item C<(?!pattern)>
X<(?!)> X<look-ahead, negative> X<lookahead, negative>

A zero-width negative lookahead assertion.  For example C</foo(?!bar)/>
matches any occurrence of "foo" that isn't followed by "bar".  Note
however that lookahead and lookbehind are NOT the same thing.  You cannot
use this for lookbehind.

If you are looking for a "bar" that isn't preceded by a "foo", C</(?!foo)bar/>
will not do what you want.  That's because the C<(?!foo)> is just saying that
the next thing cannot be "foo"--and it's not, it's a "bar", so "foobar" will
match.  Use lookbehind instead (see below).

=item C<(?<=pattern)> C<\K>
X<(?<=)> X<look-behind, positive> X<lookbehind, positive> X<\K>

A zero-width positive lookbehind assertion.  For example, C</(?<=\t)\w+/>
matches a word that follows a tab, without including the tab in C<$&>.
Works only for fixed-width lookbehind.

There is a special form of this construct, called C<\K> (available since
Perl 5.10.0), which causes the
regex engine to "keep" everything it had matched prior to the C<\K> and
not include it in C<$&>. This effectively provides variable-length
lookbehind. The use of C<\K> inside of another lookaround assertion
is allowed, but the behaviour is currently not well defined.

For various reasons C<\K> may be significantly more efficient than the
equivalent C<< (?<=...) >> construct, and it is especially useful in
situations where you want to efficiently remove something following
something else in a string. For instance

  s/(foo)bar/$1/g;

can be rewritten as the much more efficient

  s/foo\Kbar//g;

=item C<(?<!pattern)>
X<(?<!)> X<look-behind, negative> X<lookbehind, negative>

A zero-width negative lookbehind assertion.  For example C</(?<!bar)foo/>
matches any occurrence of "foo" that does not follow "bar".  Works
only for fixed-width lookbehind.

=back

=item C<(?'NAME'pattern)>

=item C<< (?<NAME>pattern) >>
X<< (?<NAME>) >> X<(?'NAME')> X<named capture> X<capture>

A named capture group. Identical in every respect to normal capturing
parentheses C<()> but for the additional fact that the group
can be referred to by name in various regular expression
constructs (like C<\g{NAME}>) and can be accessed by name
after a successful match via C<%+> or C<%->. See L<perlvar>
for more details on the C<%+> and C<%-> hashes.

If multiple distinct capture groups have the same name then the
C<$+{NAME}> will refer to the leftmost defined group in the match.

The forms C<(?'NAME'pattern)> and C<< (?<NAME>pattern) >> are equivalent.

B<NOTE:> While the notation of this construct is the same as the similar
function in .NET regexes, the behavior is not. In Perl the groups are
numbered sequentially regardless of being named or not. Thus in the
pattern

  /(x)(?<foo>y)(z)/

C<$+{I<foo>}> will be the same as C<$2>, and C<$3> will contain 'z' instead of
the opposite which is what a .NET regex hacker might expect.

Currently I<NAME> is restricted to simple identifiers only.
In other words, it must match C</^[_A-Za-z][_A-Za-z0-9]*\z/> or
its Unicode extension (see L<utf8>),
though it isn't extended by the locale (see L<perllocale>).

B<NOTE:> In order to make things easier for programmers with experience
with the Python or PCRE regex engines, the pattern C<< (?PE<lt>NAMEE<gt>pattern) >>
may be used instead of C<< (?<NAME>pattern) >>; however this form does not
support the use of single quotes as a delimiter for the name.

=item C<< \k<NAME> >>

=item C<< \k'NAME' >>

Named backreference. Similar to numeric backreferences, except that
the group is designated by name and not number. If multiple groups
have the same name then it refers to the leftmost defined group in
the current match.

It is an error to refer to a name not defined by a C<< (?<NAME>) >>
earlier in the pattern.

Both forms are equivalent.

B<NOTE:> In order to make things easier for programmers with experience
with the Python or PCRE regex engines, the pattern C<< (?P=NAME) >>
may be used instead of C<< \k<NAME> >>.

=item C<(?{ code })>
X<(?{})> X<regex, code in> X<regexp, code in> X<regular expression, code in>

B<WARNING>: Using this feature safely requires that you understand its
limitations.  Code executed that has side effects may not perform identically
from version to version due to the effect of future optimisations in the regex
engine.  For more information on this, see L</Embedded Code Execution
Frequency>.

This zero-width assertion executes any embedded Perl code.  It always
succeeds, and its return value is set as C<$^R>.

In literal patterns, the code is parsed at the same time as the
surrounding code. While within the pattern, control is passed temporarily
back to the perl parser, until the logically-balancing closing brace is
encountered. This is similar to the way that an array index expression in
a literal string is handled, for example

    "abc$array[ 1 + f('[') + g()]def"

In particular, braces do not need to be balanced:

    s/abc(?{ f('{'); })/def/

Even in a pattern that is interpolated and compiled at run-time, literal
code blocks will be compiled once, at perl compile time; the following
prints "ABCD":

    print "D";
    my $qr = qr/(?{ BEGIN { print "A" } })/;
    my $foo = "foo";
    /$foo$qr(?{ BEGIN { print "B" } })/;
    BEGIN { print "C" }

In patterns where the text of the code is derived from run-time
information rather than appearing literally in a source code /pattern/,
the code is compiled at the same time that the pattern is compiled, and
for reasons of security, C<use re 'eval'> must be in scope. This is to
stop user-supplied patterns containing code snippets from being
executable.

In situations where you need to enable this with C<use re 'eval'>, you should
also have taint checking enabled.  Better yet, use the carefully
constrained evaluation within a Safe compartment.  See L<perlsec> for
details about both these mechanisms.

From the viewpoint of parsing, lexical variable scope and closures,

    /AAA(?{ BBB })CCC/

behaves approximately like

    /AAA/ && do { BBB } && /CCC/

Similarly,

    qr/AAA(?{ BBB })CCC/

behaves approximately like

    sub { /AAA/ && do { BBB } && /CCC/ }

In particular:

    { my $i = 1; $r = qr/(?{ print $i })/ }
    my $i = 2;
    /$r/; # prints "1"

Inside a C<(?{...})> block, C<$_> refers to the string the regular
expression is matching against. You can also use C<pos()> to know what is
the current position of matching within this string.

The code block introduces a new scope from the perspective of lexical
variable declarations, but B<not> from the perspective of C<local> and
similar localizing behaviours. So later code blocks within the same
pattern will still see the values which were localized in earlier blocks.
These accumulated localizations are undone either at the end of a
successful match, or if the assertion is backtracked (compare
L<"Backtracking">). For example,

  $_ = 'a' x 8;
  m<
     (?{ $cnt = 0 })               # Initialize $cnt.
     (
       a
       (?{
           local $cnt = $cnt + 1;  # Update $cnt,
                                   # backtracking-safe.
       })
     )*
     aaaa
     (?{ $res = $cnt })            # On success copy to
                                   # non-localized location.
   >x;

will initially increment C<$cnt> up to 8; then during backtracking, its
value will be unwound back to 4, which is the value assigned to C<$res>.
At the end of the regex execution, C<$cnt> will be wound back to its initial
value of 0.

This assertion may be used as the condition in a

    (?(condition)yes-pattern|no-pattern)

switch.  If I<not> used in this way, the result of evaluation of C<code>
is put into the special variable C<$^R>.  This happens immediately, so
C<$^R> can be used from other C<(?{ code })> assertions inside the same
regular expression.

The assignment to C<$^R> above is properly localized, so the old
value of C<$^R> is restored if the assertion is backtracked; compare
L<"Backtracking">.

Note that the special variable C<$^N>  is particularly useful with code
blocks to capture the results of submatches in variables without having to
keep track of the number of nested parentheses. For example:

  $_ = "The brown fox jumps over the lazy dog";
  /the (\S+)(?{ $color = $^N }) (\S+)(?{ $animal = $^N })/i;
  print "color = $color, animal = $animal\n";


=item C<(??{ code })>
X<(??{})>
X<regex, postponed> X<regexp, postponed> X<regular expression, postponed>

B<WARNING>: Using this feature safely requires that you understand its
limitations.  Code executed that has side effects may not perform
identically from version to version due to the effect of future
optimisations in the regex engine.  For more information on this, see
L</Embedded Code Execution Frequency>.

This is a "postponed" regular subexpression.  It behaves in I<exactly> the
same way as a C<(?{ code })> code block as described above, except that
its return value, rather than being assigned to C<$^R>, is treated as a
pattern, compiled if it's a string (or used as-is if its a qr// object),
then matched as if it were inserted instead of this construct.

During the matching of this sub-pattern, it has its own set of
captures which are valid during the sub-match, but are discarded once
control returns to the main pattern. For example, the following matches,
with the inner pattern capturing "B" and matching "BB", while the outer
pattern captures "A";

    my $inner = '(.)\1';
    "ABBA" =~ /^(.)(??{ $inner })\1/;
    print $1; # prints "A";

Note that this means that  there is no way for the inner pattern to refer
to a capture group defined outside.  (The code block itself can use C<$1>,
etc., to refer to the enclosing pattern's capture groups.)  Thus, although

    ('a' x 100)=~/(??{'(.)' x 100})/

I<will> match, it will I<not> set C<$1> on exit.

The following pattern matches a parenthesized group:

 $re = qr{
            \(
            (?:
               (?> [^()]+ )  # Non-parens without backtracking
             |
               (??{ $re })   # Group with matching parens
            )*
            \)
         }x;

See also
L<C<(?I<PARNO>)>|/(?PARNO) (?-PARNO) (?+PARNO) (?R) (?0)>
for a different, more efficient way to accomplish
the same task.

Executing a postponed regular expression 50 times without consuming any
input string will result in a fatal error.  The maximum depth is compiled
into perl, so changing it requires a custom build.

=item C<(?I<PARNO>)> C<(?-I<PARNO>)> C<(?+I<PARNO>)> C<(?R)> C<(?0)>
X<(?PARNO)> X<(?1)> X<(?R)> X<(?0)> X<(?-1)> X<(?+1)> X<(?-PARNO)> X<(?+PARNO)>
X<regex, recursive> X<regexp, recursive> X<regular expression, recursive>
X<regex, relative recursion> X<GOSUB> X<GOSTART>

Recursive subpattern. Treat the contents of a given capture buffer in the
current pattern as an independent subpattern and attempt to match it at
the current position in the string. Information about capture state from
the caller for things like backreferences is available to the subpattern,
but capture buffers set by the subpattern are not visible to the caller.

Similar to C<(??{ code })> except that it does not involve executing any
code or potentially compiling a returned pattern string; instead it treats
the part of the current pattern contained within a specified capture group
as an independent pattern that must match at the current position. Also
different is the treatment of capture buffers, unlike C<(??{ code })>
recursive patterns have access to their caller's match state, so one can
use backreferences safely.

I<PARNO> is a sequence of digits (not starting with 0) whose value reflects
the paren-number of the capture group to recurse to. C<(?R)> recurses to
the beginning of the whole pattern. C<(?0)> is an alternate syntax for
C<(?R)>. If I<PARNO> is preceded by a plus or minus sign then it is assumed
to be relative, with negative numbers indicating preceding capture groups
and positive ones following. Thus C<(?-1)> refers to the most recently
declared group, and C<(?+1)> indicates the next group to be declared.
Note that the counting for relative recursion differs from that of
relative backreferences, in that with recursion unclosed groups B<are>
included.

The following pattern matches a function C<foo()> which may contain
balanced parentheses as the argument.

  $re = qr{ (                   # paren group 1 (full function)
              foo
              (                 # paren group 2 (parens)
                \(
                  (             # paren group 3 (contents of parens)
                  (?:
                   (?> [^()]+ ) # Non-parens without backtracking
                  |
                   (?2)         # Recurse to start of paren group 2
                  )*
                  )
                \)
              )
            )
          }x;

If the pattern was used as follows

    'foo(bar(baz)+baz(bop))'=~/$re/
        and print "\$1 = $1\n",
                  "\$2 = $2\n",
                  "\$3 = $3\n";

the output produced should be the following:

    $1 = foo(bar(baz)+baz(bop))
    $2 = (bar(baz)+baz(bop))
    $3 = bar(baz)+baz(bop)

If there is no corresponding capture group defined, then it is a
fatal error.  Recursing deeper than 50 times without consuming any input
string will also result in a fatal error.  The maximum depth is compiled
into perl, so changing it requires a custom build.

The following shows how using negative indexing can make it
easier to embed recursive patterns inside of a C<qr//> construct
for later use:

    my $parens = qr/(\((?:[^()]++|(?-1))*+\))/;
    if (/foo $parens \s+ \+ \s+ bar $parens/x) {
       # do something here...
    }

B<Note> that this pattern does not behave the same way as the equivalent
PCRE or Python construct of the same form. In Perl you can backtrack into
a recursed group, in PCRE and Python the recursed into group is treated
as atomic. Also, modifiers are resolved at compile time, so constructs
like C<(?i:(?1))> or C<(?:(?i)(?1))> do not affect how the sub-pattern will
be processed.

=item C<(?&NAME)>
X<(?&NAME)>

Recurse to a named subpattern. Identical to C<(?I<PARNO>)> except that the
parenthesis to recurse to is determined by name. If multiple parentheses have
the same name, then it recurses to the leftmost.

It is an error to refer to a name that is not declared somewhere in the
pattern.

B<NOTE:> In order to make things easier for programmers with experience
with the Python or PCRE regex engines the pattern C<< (?P>NAME) >>
may be used instead of C<< (?&NAME) >>.

=item C<(?(condition)yes-pattern|no-pattern)>
X<(?()>

=item C<(?(condition)yes-pattern)>

Conditional expression. Matches C<yes-pattern> if C<condition> yields
a true value, matches C<no-pattern> otherwise. A missing pattern always
matches.

C<(condition)> should be one of:

=over 4

=item an integer in parentheses

(which is valid if the corresponding pair of parentheses
matched);

=item a lookahead/lookbehind/evaluate zero-width assertion;

=item a name in angle brackets or single quotes

(which is valid if a group with the given name matched);

=item the special symbol C<(R)>

(true when evaluated inside of recursion or eval).  Additionally the
C<R> may be
followed by a number, (which will be true when evaluated when recursing
inside of the appropriate group), or by C<&NAME>, in which case it will
be true only when evaluated during recursion in the named group.

=back

Here's a summary of the possible predicates:

=over 4

=item C<(1)> C<(2)> ...

Checks if the numbered capturing group has matched something.

=item C<(E<lt>I<NAME>E<gt>)> C<('I<NAME>')>

Checks if a group with the given name has matched something.

=item C<(?=...)> C<(?!...)> C<(?<=...)> C<(?<!...)>

Checks whether the pattern matches (or does not match, for the C<"!">
variants).

=item C<(?{ I<CODE> })>

Treats the return value of the code block as the condition.

=item C<(R)>

Checks if the expression has been evaluated inside of recursion.

=item C<(R1)> C<(R2)> ...

Checks if the expression has been evaluated while executing directly
inside of the n-th capture group. This check is the regex equivalent of

  if ((caller(0))[3] eq 'subname') { ... }

In other words, it does not check the full recursion stack.

=item C<(R&I<NAME>)>

Similar to C<(R1)>, this predicate checks to see if we're executing
directly inside of the leftmost group with a given name (this is the same
logic used by C<(?&I<NAME>)> to disambiguate). It does not check the full
stack, but only the name of the innermost active recursion.

=item C<(DEFINE)>

In this case, the yes-pattern is never directly executed, and no
no-pattern is allowed. Similar in spirit to C<(?{0})> but more efficient.
See below for details.

=back

For example:

    m{ ( \( )?
       [^()]+
       (?(1) \) )
     }x

matches a chunk of non-parentheses, possibly included in parentheses
themselves.

A special form is the C<(DEFINE)> predicate, which never executes its
yes-pattern directly, and does not allow a no-pattern. This allows one to
define subpatterns which will be executed only by the recursion mechanism.
This way, you can define a set of regular expression rules that can be
bundled into any pattern you choose.

It is recommended that for this usage you put the DEFINE block at the
end of the pattern, and that you name any subpatterns defined within it.

Also, it's worth noting that patterns defined this way probably will
not be as efficient, as the optimizer is not very clever about
handling them.

An example of how this might be used is as follows:

  /(?<NAME>(?&NAME_PAT))(?<ADDR>(?&ADDRESS_PAT))
   (?(DEFINE)
     (?<NAME_PAT>....)
     (?<ADDRESS_PAT>....)
   )/x

Note that capture groups matched inside of recursion are not accessible
after the recursion returns, so the extra layer of capturing groups is
necessary. Thus C<$+{NAME_PAT}> would not be defined even though
C<$+{NAME}> would be.

Finally, keep in mind that subpatterns created inside a DEFINE block
count towards the absolute and relative number of captures, so this:

    my @@captures = "a" =~ /(.)                  # First capture
                           (?(DEFINE)
                               (?<EXAMPLE> 1 )  # Second capture
                           )/x;
    say scalar @@captures;

Will output 2, not 1. This is particularly important if you intend to
compile the definitions with the C<qr//> operator, and later
interpolate them in another pattern.

=item C<< (?>pattern) >>
X<backtrack> X<backtracking> X<atomic> X<possessive>

An "independent" subexpression, one which matches the substring
that a I<standalone> C<pattern> would match if anchored at the given
position, and it matches I<nothing other than this substring>.  This
construct is useful for optimizations of what would otherwise be
"eternal" matches, because it will not backtrack (see L<"Backtracking">).
It may also be useful in places where the "grab all you can, and do not
give anything back" semantic is desirable.

For example: C<< ^(?>a*)ab >> will never match, since C<< (?>a*) >>
(anchored at the beginning of string, as above) will match I<all>
characters C<a> at the beginning of string, leaving no C<a> for
C<ab> to match.  In contrast, C<a*ab> will match the same as C<a+b>,
since the match of the subgroup C<a*> is influenced by the following
group C<ab> (see L<"Backtracking">).  In particular, C<a*> inside
C<a*ab> will match fewer characters than a standalone C<a*>, since
this makes the tail match.

C<< (?>pattern) >> does not disable backtracking altogether once it has
matched. It is still possible to backtrack past the construct, but not
into it. So C<< ((?>a*)|(?>b*))ar >> will still match "bar".

An effect similar to C<< (?>pattern) >> may be achieved by writing
C<(?=(pattern))\g{-1}>.  This matches the same substring as a standalone
C<a+>, and the following C<\g{-1}> eats the matched string; it therefore
makes a zero-length assertion into an analogue of C<< (?>...) >>.
(The difference between these two constructs is that the second one
uses a capturing group, thus shifting ordinals of backreferences
in the rest of a regular expression.)

Consider this pattern:

    m{ \(
          (
            [^()]+           # x+
          |
            \( [^()]* \)
          )+
       \)
     }x

That will efficiently match a nonempty group with matching parentheses
two levels deep or less.  However, if there is no such group, it
will take virtually forever on a long string.  That's because there
are so many different ways to split a long string into several
substrings.  This is what C<(.+)+> is doing, and C<(.+)+> is similar
to a subpattern of the above pattern.  Consider how the pattern
above detects no-match on C<((()aaaaaaaaaaaaaaaaaa> in several
seconds, but that each extra letter doubles this time.  This
exponential performance will make it appear that your program has
hung.  However, a tiny change to this pattern

    m{ \(
          (
            (?> [^()]+ )        # change x+ above to (?> x+ )
          |
            \( [^()]* \)
          )+
       \)
     }x

which uses C<< (?>...) >> matches exactly when the one above does (verifying
this yourself would be a productive exercise), but finishes in a fourth
the time when used on a similar string with 1000000 C<a>s.  Be aware,
however, that, when this construct is followed by a
quantifier, it currently triggers a warning message under
the C<use warnings> pragma or B<-w> switch saying it
C<"matches null string many times in regex">.

On simple groups, such as the pattern C<< (?> [^()]+ ) >>, a comparable
effect may be achieved by negative lookahead, as in C<[^()]+ (?! [^()] )>.
This was only 4 times slower on a string with 1000000 C<a>s.

The "grab all you can, and do not give anything back" semantic is desirable
in many situations where on the first sight a simple C<()*> looks like
the correct solution.  Suppose we parse text with comments being delimited
by C<"#"> followed by some optional (horizontal) whitespace.  Contrary to
its appearance, C<#[ \t]*> I<is not> the correct subexpression to match
the comment delimiter, because it may "give up" some whitespace if
the remainder of the pattern can be made to match that way.  The correct
answer is either one of these:

    (?>#[ \t]*)
    #[ \t]*(?![ \t])

For example, to grab non-empty comments into C<$1>, one should use either
one of these:

    / (?> \# [ \t]* ) (        .+ ) /x;
    /     \# [ \t]*   ( [^ \t] .* ) /x;

Which one you pick depends on which of these expressions better reflects
the above specification of comments.

In some literature this construct is called "atomic matching" or
"possessive matching".

Possessive quantifiers are equivalent to putting the item they are applied
to inside of one of these constructs. The following equivalences apply:

    Quantifier Form     Bracketing Form
    ---------------     ---------------
    PAT*+               (?>PAT*)
    PAT++               (?>PAT+)
    PAT?+               (?>PAT?)
    PAT{min,max}+       (?>PAT{min,max})

=item C<(?[ ])>

See L<perlrecharclass/Extended Bracketed Character Classes>.

=back

=head2 Special Backtracking Control Verbs

These special patterns are generally of the form C<(*I<VERB>:I<ARG>)>. Unless
otherwise stated the I<ARG> argument is optional; in some cases, it is
mandatory.

Any pattern containing a special backtracking verb that allows an argument
has the special behaviour that when executed it sets the current package's
C<$REGERROR> and C<$REGMARK> variables. When doing so the following
rules apply:

On failure, the C<$REGERROR> variable will be set to the I<ARG> value of the
verb pattern, if the verb was involved in the failure of the match. If the
I<ARG> part of the pattern was omitted, then C<$REGERROR> will be set to the
name of the last C<(*MARK:NAME)> pattern executed, or to TRUE if there was
none. Also, the C<$REGMARK> variable will be set to FALSE.

On a successful match, the C<$REGERROR> variable will be set to FALSE, and
the C<$REGMARK> variable will be set to the name of the last
C<(*MARK:NAME)> pattern executed.  See the explanation for the
C<(*MARK:NAME)> verb below for more details.

B<NOTE:> C<$REGERROR> and C<$REGMARK> are not magic variables like C<$1>
and most other regex-related variables. They are not local to a scope, nor
readonly, but instead are volatile package variables similar to C<$AUTOLOAD>.
Use C<local> to localize changes to them to a specific scope if necessary.

If a pattern does not contain a special backtracking verb that allows an
argument, then C<$REGERROR> and C<$REGMARK> are not touched at all.

=over 3

=item Verbs

=over 4

=item C<(*PRUNE)> C<(*PRUNE:NAME)>
X<(*PRUNE)> X<(*PRUNE:NAME)>

This zero-width pattern prunes the backtracking tree at the current point
when backtracked into on failure. Consider the pattern C<I<A> (*PRUNE) I<B>>,
where I<A> and I<B> are complex patterns. Until the C<(*PRUNE)> verb is reached,
I<A> may backtrack as necessary to match. Once it is reached, matching
continues in I<B>, which may also backtrack as necessary; however, should B
not match, then no further backtracking will take place, and the pattern
will fail outright at the current starting position.

The following example counts all the possible matching strings in a
pattern (without actually matching any of them).

    'aaab' =~ /a+b?(?{print "$&\n"; $count++})(*FAIL)/;
    print "Count=$count\n";

which produces:

    aaab
    aaa
    aa
    a
    aab
    aa
    a
    ab
    a
    Count=9

If we add a C<(*PRUNE)> before the count like the following

    'aaab' =~ /a+b?(*PRUNE)(?{print "$&\n"; $count++})(*FAIL)/;
    print "Count=$count\n";

we prevent backtracking and find the count of the longest matching string
at each matching starting point like so:

    aaab
    aab
    ab
    Count=3

Any number of C<(*PRUNE)> assertions may be used in a pattern.

See also C<< (?>pattern) >> and possessive quantifiers for other ways to
control backtracking. In some cases, the use of C<(*PRUNE)> can be
replaced with a C<< (?>pattern) >> with no functional difference; however,
C<(*PRUNE)> can be used to handle cases that cannot be expressed using a
C<< (?>pattern) >> alone.

=item C<(*SKIP)> C<(*SKIP:NAME)>
X<(*SKIP)>

This zero-width pattern is similar to C<(*PRUNE)>, except that on
failure it also signifies that whatever text that was matched leading up
to the C<(*SKIP)> pattern being executed cannot be part of I<any> match
of this pattern. This effectively means that the regex engine "skips" forward
to this position on failure and tries to match again, (assuming that
there is sufficient room to match).

The name of the C<(*SKIP:NAME)> pattern has special significance. If a
C<(*MARK:NAME)> was encountered while matching, then it is that position
which is used as the "skip point". If no C<(*MARK)> of that name was
encountered, then the C<(*SKIP)> operator has no effect. When used
without a name the "skip point" is where the match point was when
executing the C<(*SKIP)> pattern.

Compare the following to the examples in C<(*PRUNE)>; note the string
is twice as long:

 'aaabaaab' =~ /a+b?(*SKIP)(?{print "$&\n"; $count++})(*FAIL)/;
 print "Count=$count\n";

outputs

    aaab
    aaab
    Count=2

Once the 'aaab' at the start of the string has matched, and the C<(*SKIP)>
executed, the next starting point will be where the cursor was when the
C<(*SKIP)> was executed.

=item C<(*MARK:NAME)> C<(*:NAME)>
X<(*MARK)> X<(*MARK:NAME)> X<(*:NAME)>

This zero-width pattern can be used to mark the point reached in a string
when a certain part of the pattern has been successfully matched. This
mark may be given a name. A later C<(*SKIP)> pattern will then skip
forward to that point if backtracked into on failure. Any number of
C<(*MARK)> patterns are allowed, and the I<NAME> portion may be duplicated.

In addition to interacting with the C<(*SKIP)> pattern, C<(*MARK:NAME)>
can be used to "label" a pattern branch, so that after matching, the
program can determine which branches of the pattern were involved in the
match.

When a match is successful, the C<$REGMARK> variable will be set to the
name of the most recently executed C<(*MARK:NAME)> that was involved
in the match.

This can be used to determine which branch of a pattern was matched
without using a separate capture group for each branch, which in turn
can result in a performance improvement, as perl cannot optimize
C</(?:(x)|(y)|(z))/> as efficiently as something like
C</(?:x(*MARK:x)|y(*MARK:y)|z(*MARK:z))/>.

When a match has failed, and unless another verb has been involved in
failing the match and has provided its own name to use, the C<$REGERROR>
variable will be set to the name of the most recently executed
C<(*MARK:NAME)>.

See L</(*SKIP)> for more details.

As a shortcut C<(*MARK:NAME)> can be written C<(*:NAME)>.

=item C<(*THEN)> C<(*THEN:NAME)>

This is similar to the "cut group" operator C<::> from Perl 6.  Like
C<(*PRUNE)>, this verb always matches, and when backtracked into on
failure, it causes the regex engine to try the next alternation in the
innermost enclosing group (capturing or otherwise) that has alternations.
The two branches of a C<(?(condition)yes-pattern|no-pattern)> do not
count as an alternation, as far as C<(*THEN)> is concerned.

Its name comes from the observation that this operation combined with the
alternation operator (C<"|">) can be used to create what is essentially a
pattern-based if/then/else block:

  ( COND (*THEN) FOO | COND2 (*THEN) BAR | COND3 (*THEN) BAZ )

Note that if this operator is used and NOT inside of an alternation then
it acts exactly like the C<(*PRUNE)> operator.

  / A (*PRUNE) B /

is the same as

  / A (*THEN) B /

but

  / ( A (*THEN) B | C ) /

is not the same as

  / ( A (*PRUNE) B | C ) /

as after matching the I<A> but failing on the I<B> the C<(*THEN)> verb will
backtrack and try I<C>; but the C<(*PRUNE)> verb will simply fail.

=item C<(*COMMIT)> C<(*COMMIT:args)>
X<(*COMMIT)>

This is the Perl 6 "commit pattern" C<< <commit> >> or C<:::>. It's a
zero-width pattern similar to C<(*SKIP)>, except that when backtracked
into on failure it causes the match to fail outright. No further attempts
to find a valid match by advancing the start pointer will occur again.
For example,

 'aaabaaab' =~ /a+b?(*COMMIT)(?{print "$&\n"; $count++})(*FAIL)/;
 print "Count=$count\n";

outputs

    aaab
    Count=1

In other words, once the C<(*COMMIT)> has been entered, and if the pattern
does not match, the regex engine will not try any further matching on the
rest of the string.

=item C<(*FAIL)> C<(*F)> C<(*FAIL:arg)>
X<(*FAIL)> X<(*F)>

This pattern matches nothing and always fails. It can be used to force the
engine to backtrack. It is equivalent to C<(?!)>, but easier to read. In
fact, C<(?!)> gets optimised into C<(*FAIL)> internally. You can provide
an argument so that if the match fails because of this C<FAIL> directive
the argument can be obtained from C<$REGERROR>.

It is probably useful only when combined with C<(?{})> or C<(??{})>.

=item C<(*ACCEPT)> C<(*ACCEPT:arg)>
X<(*ACCEPT)>

This pattern matches nothing and causes the end of successful matching at
the point at which the C<(*ACCEPT)> pattern was encountered, regardless of
whether there is actually more to match in the string. When inside of a
nested pattern, such as recursion, or in a subpattern dynamically generated
via C<(??{})>, only the innermost pattern is ended immediately.

If the C<(*ACCEPT)> is inside of capturing groups then the groups are
marked as ended at the point at which the C<(*ACCEPT)> was encountered.
For instance:

  'AB' =~ /(A (A|B(*ACCEPT)|C) D)(E)/x;

will match, and C<$1> will be C<AB> and C<$2> will be C<B>, C<$3> will not
be set. If another branch in the inner parentheses was matched, such as in the
string 'ACDE', then the C<D> and C<E> would have to be matched as well.

You can provide an argument, which will be available in the var
C<$REGMARK> after the match completes.

=back

=back

=head2 Backtracking
X<backtrack> X<backtracking>

NOTE: This section presents an abstract approximation of regular
expression behavior.  For a more rigorous (and complicated) view of
the rules involved in selecting a match among possible alternatives,
see L<Combining RE Pieces>.

A fundamental feature of regular expression matching involves the
notion called I<backtracking>, which is currently used (when needed)
by all regular non-possessive expression quantifiers, namely C<"*">, C<"*?">, C<"+">,
C<"+?">, C<{n,m}>, and C<{n,m}?>.  Backtracking is often optimized
internally, but the general principle outlined here is valid.

For a regular expression to match, the I<entire> regular expression must
match, not just part of it.  So if the beginning of a pattern containing a
quantifier succeeds in a way that causes later parts in the pattern to
fail, the matching engine backs up and recalculates the beginning
part--that's why it's called backtracking.

Here is an example of backtracking:  Let's say you want to find the
word following "foo" in the string "Food is on the foo table.":

    $_ = "Food is on the foo table.";
    if ( /\b(foo)\s+(\w+)/i ) {
        print "$2 follows $1.\n";
    }

When the match runs, the first part of the regular expression (C<\b(foo)>)
finds a possible match right at the beginning of the string, and loads up
C<$1> with "Foo".  However, as soon as the matching engine sees that there's
no whitespace following the "Foo" that it had saved in C<$1>, it realizes its
mistake and starts over again one character after where it had the
tentative match.  This time it goes all the way until the next occurrence
of "foo". The complete regular expression matches this time, and you get
the expected output of "table follows foo."

Sometimes minimal matching can help a lot.  Imagine you'd like to match
everything between "foo" and "bar".  Initially, you write something
like this:

    $_ =  "The food is under the bar in the barn.";
    if ( /foo(.*)bar/ ) {
        print "got <$1>\n";
    }

Which perhaps unexpectedly yields:

  got <d is under the bar in the >

That's because C<.*> was greedy, so you get everything between the
I<first> "foo" and the I<last> "bar".  Here it's more effective
to use minimal matching to make sure you get the text between a "foo"
and the first "bar" thereafter.

    if ( /foo(.*?)bar/ ) { print "got <$1>\n" }
  got <d is under the >

Here's another example. Let's say you'd like to match a number at the end
of a string, and you also want to keep the preceding part of the match.
So you write this:

    $_ = "I have 2 numbers: 53147";
    if ( /(.*)(\d*)/ ) {                                # Wrong!
        print "Beginning is <$1>, number is <$2>.\n";
    }

That won't work at all, because C<.*> was greedy and gobbled up the
whole string. As C<\d*> can match on an empty string the complete
regular expression matched successfully.

    Beginning is <I have 2 numbers: 53147>, number is <>.

Here are some variants, most of which don't work:

    $_ = "I have 2 numbers: 53147";
    @@pats = qw{
        (.*)(\d*)
        (.*)(\d+)
        (.*?)(\d*)
        (.*?)(\d+)
        (.*)(\d+)$
        (.*?)(\d+)$
        (.*)\b(\d+)$
        (.*\D)(\d+)$
    };

    for $pat (@@pats) {
        printf "%-12s ", $pat;
        if ( /$pat/ ) {
            print "<$1> <$2>\n";
        } else {
            print "FAIL\n";
        }
    }

That will print out:

    (.*)(\d*)    <I have 2 numbers: 53147> <>
    (.*)(\d+)    <I have 2 numbers: 5314> <7>
    (.*?)(\d*)   <> <>
    (.*?)(\d+)   <I have > <2>
    (.*)(\d+)$   <I have 2 numbers: 5314> <7>
    (.*?)(\d+)$  <I have 2 numbers: > <53147>
    (.*)\b(\d+)$ <I have 2 numbers: > <53147>
    (.*\D)(\d+)$ <I have 2 numbers: > <53147>

As you see, this can be a bit tricky.  It's important to realize that a
regular expression is merely a set of assertions that gives a definition
of success.  There may be 0, 1, or several different ways that the
definition might succeed against a particular string.  And if there are
multiple ways it might succeed, you need to understand backtracking to
know which variety of success you will achieve.

When using lookahead assertions and negations, this can all get even
trickier.  Imagine you'd like to find a sequence of non-digits not
followed by "123".  You might try to write that as

    $_ = "ABC123";
    if ( /^\D*(?!123)/ ) {                # Wrong!
        print "Yup, no 123 in $_\n";
    }

But that isn't going to match; at least, not the way you're hoping.  It
claims that there is no 123 in the string.  Here's a clearer picture of
why that pattern matches, contrary to popular expectations:

    $x = 'ABC123';
    $y = 'ABC445';

    print "1: got $1\n" if $x =~ /^(ABC)(?!123)/;
    print "2: got $1\n" if $y =~ /^(ABC)(?!123)/;

    print "3: got $1\n" if $x =~ /^(\D*)(?!123)/;
    print "4: got $1\n" if $y =~ /^(\D*)(?!123)/;

This prints

    2: got ABC
    3: got AB
    4: got ABC

You might have expected test 3 to fail because it seems to a more
general purpose version of test 1.  The important difference between
them is that test 3 contains a quantifier (C<\D*>) and so can use
backtracking, whereas test 1 will not.  What's happening is
that you've asked "Is it true that at the start of C<$x>, following 0 or more
non-digits, you have something that's not 123?"  If the pattern matcher had
let C<\D*> expand to "ABC", this would have caused the whole pattern to
fail.

The search engine will initially match C<\D*> with "ABC".  Then it will
try to match C<(?!123)> with "123", which fails.  But because
a quantifier (C<\D*>) has been used in the regular expression, the
search engine can backtrack and retry the match differently
in the hope of matching the complete regular expression.

The pattern really, I<really> wants to succeed, so it uses the
standard pattern back-off-and-retry and lets C<\D*> expand to just "AB" this
time.  Now there's indeed something following "AB" that is not
"123".  It's "C123", which suffices.

We can deal with this by using both an assertion and a negation.
We'll say that the first part in C<$1> must be followed both by a digit
and by something that's not "123".  Remember that the lookaheads
are zero-width expressions--they only look, but don't consume any
of the string in their match.  So rewriting this way produces what
you'd expect; that is, case 5 will fail, but case 6 succeeds:

    print "5: got $1\n" if $x =~ /^(\D*)(?=\d)(?!123)/;
    print "6: got $1\n" if $y =~ /^(\D*)(?=\d)(?!123)/;

    6: got ABC

In other words, the two zero-width assertions next to each other work as though
they're ANDed together, just as you'd use any built-in assertions:  C</^$/>
matches only if you're at the beginning of the line AND the end of the
line simultaneously.  The deeper underlying truth is that juxtaposition in
regular expressions always means AND, except when you write an explicit OR
using the vertical bar.  C</ab/> means match "a" AND (then) match "b",
although the attempted matches are made at different positions because "a"
is not a zero-width assertion, but a one-width assertion.

B<WARNING>: Particularly complicated regular expressions can take
exponential time to solve because of the immense number of possible
ways they can use backtracking to try for a match.  For example, without
internal optimizations done by the regular expression engine, this will
take a painfully long time to run:

    'aaaaaaaaaaaa' =~ /((a{0,5}){0,5})*[c]/

And if you used C<"*">'s in the internal groups instead of limiting them
to 0 through 5 matches, then it would take forever--or until you ran
out of stack space.  Moreover, these internal optimizations are not
always applicable.  For example, if you put C<{0,5}> instead of C<"*">
on the external group, no current optimization is applicable, and the
match takes a long time to finish.

A powerful tool for optimizing such beasts is what is known as an
"independent group",
which does not backtrack (see L</C<< (?>pattern) >>>).  Note also that
zero-length lookahead/lookbehind assertions will not backtrack to make
the tail match, since they are in "logical" context: only
whether they match is considered relevant.  For an example
where side-effects of lookahead I<might> have influenced the
following match, see L</C<< (?>pattern) >>>.

=head2 Version 8 Regular Expressions
X<regular expression, version 8> X<regex, version 8> X<regexp, version 8>

In case you're not familiar with the "regular" Version 8 regex
routines, here are the pattern-matching rules not described above.

Any single character matches itself, unless it is a I<metacharacter>
with a special meaning described here or above.  You can cause
characters that normally function as metacharacters to be interpreted
literally by prefixing them with a C<"\"> (e.g., C<"\."> matches a C<".">, not any
character; "\\" matches a C<"\">). This escape mechanism is also required
for the character used as the pattern delimiter.

A series of characters matches that series of characters in the target
string, so the pattern C<blurfl> would match "blurfl" in the target
string.

You can specify a character class, by enclosing a list of characters
in C<[]>, which will match any character from the list.  If the
first character after the C<"["> is C<"^">, the class matches any character not
in the list.  Within a list, the C<"-"> character specifies a
range, so that C<a-z> represents all characters between "a" and "z",
inclusive.  If you want either C<"-"> or C<"]"> itself to be a member of a
class, put it at the start of the list (possibly after a C<"^">), or
escape it with a backslash.  C<"-"> is also taken literally when it is
at the end of the list, just before the closing C<"]">.  (The
following all specify the same class of three characters: C<[-az]>,
C<[az-]>, and C<[a\-z]>.  All are different from C<[a-z]>, which
specifies a class containing twenty-six characters, even on EBCDIC-based
character sets.)  Also, if you try to use the character
classes C<\w>, C<\W>, C<\s>, C<\S>, C<\d>, or C<\D> as endpoints of
a range, the C<"-"> is understood literally.

Note also that the whole range idea is rather unportable between
character sets, except for four situations that Perl handles specially.
Any subset of the ranges C<[A-Z]>, C<[a-z]>, and C<[0-9]> are guaranteed
to match the expected subset of ASCII characters, no matter what
character set the platform is running.  The fourth portable way to
specify ranges is to use the C<\N{...}> syntax to specify either end
point of the range.  For example, C<[\N{U+04}-\N{U+07}]> means to match
the Unicode code points C<\N{U+04}>, C<\N{U+05}>, C<\N{U+06}>, and
C<\N{U+07}>, whatever their native values may be on the platform.  Under
L<use re 'strict'|re/'strict' mode> or within a L</C<(?[ ])>>, a warning
is raised, if enabled, and the other end point of a range which has a
C<\N{...}> endpoint is not portably specified.  For example,

 [\N{U+00}-\x06]    # Warning under "use re 'strict'".

It is hard to understand without digging what exactly matches ranges
other than subsets of C<[A-Z]>, C<[a-z]>, and C<[0-9]>.  A sound
principle is to use only ranges that begin from and end at either
alphabetics of equal case ([a-e], [A-E]), or digits ([0-9]).  Anything
else is unsafe or unclear.  If in doubt, spell out the range in full.

Characters may be specified using a metacharacter syntax much like that
used in C: "\n" matches a newline, "\t" a tab, "\r" a carriage return,
"\f" a form feed, etc.  More generally, \I<nnn>, where I<nnn> is a string
of three octal digits, matches the character whose coded character set value
is I<nnn>.  Similarly, \xI<nn>, where I<nn> are hexadecimal digits,
matches the character whose ordinal is I<nn>. The expression \cI<x>
matches the character control-I<x>.  Finally, the C<"."> metacharacter
matches any character except "\n" (unless you use C</s>).

You can specify a series of alternatives for a pattern using C<"|"> to
separate them, so that C<fee|fie|foe> will match any of "fee", "fie",
or "foe" in the target string (as would C<f(e|i|o)e>).  The
first alternative includes everything from the last pattern delimiter
(C<"(">, "(?:", etc. or the beginning of the pattern) up to the first C<"|">, and
the last alternative contains everything from the last C<"|"> to the next
closing pattern delimiter.  That's why it's common practice to include
alternatives in parentheses: to minimize confusion about where they
start and end.

Alternatives are tried from left to right, so the first
alternative found for which the entire expression matches, is the one that
is chosen. This means that alternatives are not necessarily greedy. For
example: when matching C<foo|foot> against "barefoot", only the "foo"
part will match, as that is the first alternative tried, and it successfully
matches the target string. (This might not seem important, but it is
important when you are capturing matched text using parentheses.)

Also remember that C<"|"> is interpreted as a literal within square brackets,
so if you write C<[fee|fie|foe]> you're really only matching C<[feio|]>.

Within a pattern, you may designate subpatterns for later reference
by enclosing them in parentheses, and you may refer back to the
I<n>th subpattern later in the pattern using the metacharacter
\I<n> or \gI<n>.  Subpatterns are numbered based on the left to right order
of their opening parenthesis.  A backreference matches whatever
actually matched the subpattern in the string being examined, not
the rules for that subpattern.  Therefore, C<(0|0x)\d*\s\g1\d*> will
match "0x1234 0x4321", but not "0x1234 01234", because subpattern
1 matched "0x", even though the rule C<0|0x> could potentially match
the leading 0 in the second number.

=head2 Warning on C<\1> Instead of C<$1>

Some people get too used to writing things like:

    $pattern =~ s/(\W)/\\\1/g;

This is grandfathered (for \1 to \9) for the RHS of a substitute to avoid
shocking the
B<sed> addicts, but it's a dirty habit to get into.  That's because in
PerlThink, the righthand side of an C<s///> is a double-quoted string.  C<\1> in
the usual double-quoted string means a control-A.  The customary Unix
meaning of C<\1> is kludged in for C<s///>.  However, if you get into the habit
of doing that, you get yourself into trouble if you then add an C</e>
modifier.

    s/(\d+)/ \1 + 1 /eg;            # causes warning under -w

Or if you try to do

    s/(\d+)/\1000/;

You can't disambiguate that by saying C<\{1}000>, whereas you can fix it with
C<${1}000>.  The operation of interpolation should not be confused
with the operation of matching a backreference.  Certainly they mean two
different things on the I<left> side of the C<s///>.

=head2 Repeated Patterns Matching a Zero-length Substring

B<WARNING>: Difficult material (and prose) ahead.  This section needs a rewrite.

Regular expressions provide a terse and powerful programming language.  As
with most other power tools, power comes together with the ability
to wreak havoc.

A common abuse of this power stems from the ability to make infinite
loops using regular expressions, with something as innocuous as:

    'foo' =~ m{ ( o? )* }x;

The C<o?> matches at the beginning of C<'foo'>, and since the position
in the string is not moved by the match, C<o?> would match again and again
because of the C<"*"> quantifier.  Another common way to create a similar cycle
is with the looping modifier C<//g>:

    @@matches = ( 'foo' =~ m{ o? }xg );

or

    print "match: <$&>\n" while 'foo' =~ m{ o? }xg;

or the loop implied by C<split()>.

However, long experience has shown that many programming tasks may
be significantly simplified by using repeated subexpressions that
may match zero-length substrings.  Here's a simple example being:

    @@chars = split //, $string;           # // is not magic in split
    ($whitewashed = $string) =~ s/()/ /g; # parens avoid magic s// /

Thus Perl allows such constructs, by I<forcefully breaking
the infinite loop>.  The rules for this are different for lower-level
loops given by the greedy quantifiers C<*+{}>, and for higher-level
ones like the C</g> modifier or C<split()> operator.

The lower-level loops are I<interrupted> (that is, the loop is
broken) when Perl detects that a repeated expression matched a
zero-length substring.   Thus

   m{ (?: NON_ZERO_LENGTH | ZERO_LENGTH )* }x;

is made equivalent to

   m{ (?: NON_ZERO_LENGTH )* (?: ZERO_LENGTH )? }x;

For example, this program

   #!perl -l
   "aaaaab" =~ /
     (?:
        a                 # non-zero
        |                 # or
       (?{print "hello"}) # print hello whenever this
                          #    branch is tried
       (?=(b))            # zero-width assertion
     )*  # any number of times
    /x;
   print $&;
   print $1;

prints

   hello
   aaaaa
   b

Notice that "hello" is only printed once, as when Perl sees that the sixth
iteration of the outermost C<(?:)*> matches a zero-length string, it stops
the C<"*">.

The higher-level loops preserve an additional state between iterations:
whether the last match was zero-length.  To break the loop, the following
match after a zero-length match is prohibited to have a length of zero.
This prohibition interacts with backtracking (see L<"Backtracking">),
and so the I<second best> match is chosen if the I<best> match is of
zero length.

For example:

    $_ = 'bar';
    s/\w??/<$&>/g;

results in C<< <><b><><a><><r><> >>.  At each position of the string the best
match given by non-greedy C<??> is the zero-length match, and the I<second
best> match is what is matched by C<\w>.  Thus zero-length matches
alternate with one-character-long matches.

Similarly, for repeated C<m/()/g> the second-best match is the match at the
position one notch further in the string.

The additional state of being I<matched with zero-length> is associated with
the matched string, and is reset by each assignment to C<pos()>.
Zero-length matches at the end of the previous match are ignored
during C<split>.

=head2 Combining RE Pieces

Each of the elementary pieces of regular expressions which were described
before (such as C<ab> or C<\Z>) could match at most one substring
at the given position of the input string.  However, in a typical regular
expression these elementary pieces are combined into more complicated
patterns using combining operators C<ST>, C<S|T>, C<S*> etc.
(in these examples C<S> and C<T> are regular subexpressions).

Such combinations can include alternatives, leading to a problem of choice:
if we match a regular expression C<a|ab> against C<"abc">, will it match
substring C<"a"> or C<"ab">?  One way to describe which substring is
actually matched is the concept of backtracking (see L<"Backtracking">).
However, this description is too low-level and makes you think
in terms of a particular implementation.

Another description starts with notions of "better"/"worse".  All the
substrings which may be matched by the given regular expression can be
sorted from the "best" match to the "worst" match, and it is the "best"
match which is chosen.  This substitutes the question of "what is chosen?"
by the question of "which matches are better, and which are worse?".

Again, for elementary pieces there is no such question, since at most
one match at a given position is possible.  This section describes the
notion of better/worse for combining operators.  In the description
below C<S> and C<T> are regular subexpressions.

=over 4

=item C<ST>

Consider two possible matches, C<AB> and C<A'B'>, C<A> and C<A'> are
substrings which can be matched by C<S>, C<B> and C<B'> are substrings
which can be matched by C<T>.

If C<A> is a better match for C<S> than C<A'>, C<AB> is a better
match than C<A'B'>.

If C<A> and C<A'> coincide: C<AB> is a better match than C<AB'> if
C<B> is a better match for C<T> than C<B'>.

=item C<S|T>

When C<S> can match, it is a better match than when only C<T> can match.

Ordering of two matches for C<S> is the same as for C<S>.  Similar for
two matches for C<T>.

=item C<S{REPEAT_COUNT}>

Matches as C<SSS...S> (repeated as many times as necessary).

=item C<S{min,max}>

Matches as C<S{max}|S{max-1}|...|S{min+1}|S{min}>.

=item C<S{min,max}?>

Matches as C<S{min}|S{min+1}|...|S{max-1}|S{max}>.

=item C<S?>, C<S*>, C<S+>

Same as C<S{0,1}>, C<S{0,BIG_NUMBER}>, C<S{1,BIG_NUMBER}> respectively.

=item C<S??>, C<S*?>, C<S+?>

Same as C<S{0,1}?>, C<S{0,BIG_NUMBER}?>, C<S{1,BIG_NUMBER}?> respectively.

=item C<< (?>S) >>

Matches the best match for C<S> and only that.

=item C<(?=S)>, C<(?<=S)>

Only the best match for C<S> is considered.  (This is important only if
C<S> has capturing parentheses, and backreferences are used somewhere
else in the whole regular expression.)

=item C<(?!S)>, C<(?<!S)>

For this grouping operator there is no need to describe the ordering, since
only whether or not C<S> can match is important.

=item C<(??{ EXPR })>, C<(?I<PARNO>)>

The ordering is the same as for the regular expression which is
the result of EXPR, or the pattern contained by capture group I<PARNO>.

=item C<(?(condition)yes-pattern|no-pattern)>

Recall that which of C<yes-pattern> or C<no-pattern> actually matches is
already determined.  The ordering of the matches is the same as for the
chosen subexpression.

=back

The above recipes describe the ordering of matches I<at a given position>.
One more rule is needed to understand how a match is determined for the
whole regular expression: a match at an earlier position is always better
than a match at a later position.

=head2 Creating Custom RE Engines

As of Perl 5.10.0, one can create custom regular expression engines.  This
is not for the faint of heart, as they have to plug in at the C level.  See
L<perlreapi> for more details.

As an alternative, overloaded constants (see L<overload>) provide a simple
way to extend the functionality of the RE engine, by substituting one
pattern for another.

Suppose that we want to enable a new RE escape-sequence C<\Y|> which
matches at a boundary between whitespace characters and non-whitespace
characters.  Note that C<(?=\S)(?<!\S)|(?!\S)(?<=\S)> matches exactly
at these positions, so we want to have each C<\Y|> in the place of the
more complicated version.  We can create a module C<customre> to do
this:

    package customre;
    use overload;

    sub import {
      shift;
      die "No argument to customre::import allowed" if @@_;
      overload::constant 'qr' => \&convert;
    }

    sub invalid { die "/$_[0]/: invalid escape '\\$_[1]'"}

    # We must also take care of not escaping the legitimate \\Y|
    # sequence, hence the presence of '\\' in the conversion rules.
    my %rules = ( '\\' => '\\\\',
                  'Y|' => qr/(?=\S)(?<!\S)|(?!\S)(?<=\S)/ );
    sub convert {
      my $re = shift;
      $re =~ s{
                \\ ( \\ | Y . )
              }
              { $rules{$1} or invalid($re,$1) }sgex;
      return $re;
    }

Now C<use customre> enables the new escape in constant regular
expressions, i.e., those without any runtime variable interpolations.
As documented in L<overload>, this conversion will work only over
literal parts of regular expressions.  For C<\Y|$re\Y|> the variable
part of this regular expression needs to be converted explicitly
(but only if the special meaning of C<\Y|> should be enabled inside C<$re>):

    use customre;
    $re = <>;
    chomp $re;
    $re = customre::convert $re;
    /\Y|$re\Y|/;

=head2 Embedded Code Execution Frequency

The exact rules for how often (??{}) and (?{}) are executed in a pattern
are unspecified.  In the case of a successful match you can assume that
they DWIM and will be executed in left to right order the appropriate
number of times in the accepting path of the pattern as would any other
meta-pattern.  How non-accepting pathways and match failures affect the
number of times a pattern is executed is specifically unspecified and
may vary depending on what optimizations can be applied to the pattern
and is likely to change from version to version.

For instance in

  "aaabcdeeeee"=~/a(?{print "a"})b(?{print "b"})cde/;

the exact number of times "a" or "b" are printed out is unspecified for
failure, but you may assume they will be printed at least once during
a successful match, additionally you may assume that if "b" is printed,
it will be preceded by at least one "a".

In the case of branching constructs like the following:

  /a(b|(?{ print "a" }))c(?{ print "c" })/;

you can assume that the input "ac" will output "ac", and that "abc"
will output only "c".

When embedded code is quantified, successful matches will call the
code once for each matched iteration of the quantifier.  For
example:

  "good" =~ /g(?:o(?{print "o"}))*d/;

will output "o" twice.

=head2 PCRE/Python Support

As of Perl 5.10.0, Perl supports several Python/PCRE-specific extensions
to the regex syntax. While Perl programmers are encouraged to use the
Perl-specific syntax, the following are also accepted:

=over 4

=item C<< (?PE<lt>NAMEE<gt>pattern) >>

Define a named capture group. Equivalent to C<< (?<NAME>pattern) >>.

=item C<< (?P=NAME) >>

Backreference to a named capture group. Equivalent to C<< \g{NAME} >>.

=item C<< (?P>NAME) >>

Subroutine call to a named capture group. Equivalent to C<< (?&NAME) >>.

=back

=head1 BUGS

There are a number of issues with regard to case-insensitive matching
in Unicode rules.  See C<i> under L</Modifiers> above.

This document varies from difficult to understand to completely
and utterly opaque.  The wandering prose riddled with jargon is
hard to fathom in several places.

This document needs a rewrite that separates the tutorial content
from the reference content.

=head1 SEE ALSO

L<perlrequick>.

L<perlretut>.

L<perlop/"Regexp Quote-Like Operators">.

L<perlop/"Gory details of parsing quoted constructs">.

L<perlfaq6>.

L<perlfunc/pos>.

L<perllocale>.

L<perlebcdic>.

I<Mastering Regular Expressions> by Jeffrey Friedl, published
by O'Reilly and Associates.
@


1.18
log
@Fix merge conflicts, remove extra files, match upstream perl-5.20.1

ok deraadt@@ sthen@@ espie@@ miod@@
@
text
@d16 1
a16 1
C<m//>, C<s///>, C<qr//> and C<??> in L<perlop/"Regexp Quote-Like
d19 3
d25 2
d35 1
a35 1
=item m
d38 1
a38 1
Treat string as multiple lines.  That is, change "^" and "$" from matching
d42 1
a42 1
=item s
d46 1
a46 1
Treat string as single line.  That is, change "." to match any character
d49 2
a50 2
Used together, as C</ms>, they let the "." match any character whatsoever,
while still allowing "^" and "$" to match, respectively, just after
d53 1
a53 1
=item i
d57 2
a58 1
Do case-insensitive pattern matching.
d64 2
a65 2
rules/non-Unicode rules boundary (ords 255/256) will not succeed.  See
L<perllocale>.
d67 3
a69 3
There are a number of Unicode characters that match multiple characters
under C</i>.  For example, C<LATIN SMALL LIGATURE FI>
should match the sequence C<fi>.  Perl is not
d88 1
a88 1
=item x
d94 1
a94 1
=item p
d97 2
a98 2
Preserve the string matched such that ${^PREMATCH}, ${^MATCH}, and
${^POSTMATCH} are available for use after matching.
d101 1
a101 1
mechanism, ${^PREMATCH}, ${^MATCH}, and ${^POSTMATCH} will be available
d104 1
a104 1
=item a, d, l and u
d111 21
d147 1
a147 1
L<perlop/"s/PATTERN/REPLACEMENT/msixpodualgcer"> are:
d158 1
a158 1
in question might not really be a slash.  The modifiers C</imsxadlup>
d162 6
a167 1
=head3 /x
d173 1
a173 1
Also, the C<#> character is treated as a metacharacter introducing a
d181 1
a181 1
whitespace or C<#> characters in the pattern (outside a bracketed character
d207 2
a208 2
C<{5,}>.  Similarly, C<(?:...)> can't have a space between the C<(>,
C<?>, and C<:>.  Within any delimiters for such a
d216 16
a231 1
=head3 Character set modifiers
d271 1
a271 1
done, whereas using the pragmas give consistent results for all
d280 2
a281 2
implicitly adds the C</l> and applies locale rules to the C<\U>.   The
lesson is to C<use locale> and not C</l> explicitly.
d306 5
a310 3
The only non-single-byte locale Perl supports is (starting in v5.20)
UTF-8.  This means that code points above 255 are treated as Unicode no
matter what locale is in effect (since UTF-8 implies Unicode).
d397 1
a397 1
the pattern uses a Unicode property (C<\p{...}>); or
d401 4
d431 2
a432 1
probably should only use it to maintain weird backward compatibilities.
d443 2
a444 2
characters C<[ \f\n\r\t]>, and starting in Perl v5.18, experimentally,
the vertical tab; C<\w> means the 63 characters
d475 2
a476 2
specify the "a" twice, for example C</aai> or C</aia>.  (The first
occurrence of "a" restricts the C<\d>, etc., and the second occurrence
d566 2
a567 2
By default, the "^" character is guaranteed to match only the
beginning of the string, the "$" character only the end (or before the
d570 2
a571 2
will not be matched by "^" or "$".  You may, however, wish to treat a
string as a multi-line buffer, such that the "^" will match after any
d573 1
a573 1
the string), and "$" will match before any newline.  At the
d579 1
a579 1
To simplify multi-line substitutions, the "." character never matches a
d596 9
a604 16
(If a curly bracket occurs in any other context and does not form part of
a backslashed sequence like C<\x{...}>, it is treated as a regular
character.  In particular, the lower quantifier bound is not optional,
and a typo in a quantifier silently causes it to be treated as the
literal characters.  For example,

    /o{4,a}/

compiles to match the sequence of six characters
S<C<"o { 4 , a }">>.  It is planned to eventually require literal uses
of curly brackets to be escaped, say by preceding them with a backslash
or enclosing them within square brackets, (C<"\{"> or C<"[{]">).  This
change will allow for future syntax extensions (like making the lower
bound of a quantifier optional), and better error checking.  In the
meantime, you should get in the habit of escaping all instances where
you mean a literal "{".)
d606 2
a607 2
The "*" quantifier is equivalent to C<{0,}>, the "+"
quantifier to C<{1,}>, and the "?" quantifier to C<{0,1}>.  n and m are limited
d617 1
a617 1
minimum number of times possible, follow the quantifier with a "?".  Note
a720 5
  \C             Match a single C-language char (octet) even if that is
                   part of a larger UTF-8 character.  Thus it breaks up
                   characters into their UTF-8 bytes, so you may end up
                   with malformed pieces of UTF-8.  Unsupported in
                   lookbehind. (Deprecated.)
d784 2
d794 6
d806 1
a806 1
The C<\A> and C<\Z> are just like "^" and "$", except that they
d808 1
a808 1
"^" and "$" will match at every internal line boundary.  To match
d1016 1
a1016 1
their punctuation char equivalents, however at the trade-off that you
d1026 2
a1027 1
that looks like \\, \(, \), \[, \], \{, or \} is always
d1036 3
a1038 3
Today it is more common to use the quotemeta() function or the C<\Q>
metaquoting escape sequence to disable all metacharacters' special
meanings like this:
d1077 2
a1078 2
the comment as soon as it sees a C<)>, so there is no way to put a literal
C<)> in the comment.  The pattern's closing delimiter must be escaped by
d1083 1
a1083 1
=item C<(?adlupimsx-imsx)>
d1085 1
a1085 1
=item C<(?^alupimsx)>
d1089 1
a1089 1
turned off, if preceded by C<->) for the remainder of the pattern or
d1116 1
a1116 1
change the case-sensitivity of the "NAME" pattern.
d1123 1
a1123 1
after the C<"?"> is a shorthand equivalent to C<d-imsx>.  Flags (except
d1141 1
a1141 1
=item C<(?adluimsx-imsx:pattern)>
d1143 1
a1143 1
=item C<(?^aluimsx:pattern)>
d1147 1
a1147 1
"()", but doesn't make backreferences as "()" does.  So
d1158 2
a1159 2
Any letters between C<?> and C<:> act as flags modifiers as with
C<(?adluimsx-imsx)>.  For example,
d1167 3
d1171 1
a1171 1
after the C<"?"> is a shorthand equivalent to C<d-imsx>.  Any positive
d1178 1
a1178 1
    (?x-ims:foo)
d1181 1
a1181 1
surrounding pattern, but uses the system defaults (C<d-imsx>),
d1246 1
a1246 1
=item Look-Around Assertions
d1249 1
a1249 1
Look-around assertions are zero-width patterns which match a specific
d1252 2
a1253 2
fails. Look-behind matches text up to the current match position,
look-ahead matches text following the current match position.
d1260 1
a1260 1
A zero-width positive look-ahead assertion.  For example, C</\w+(?=\t)/>
d1266 1
a1266 1
A zero-width negative look-ahead assertion.  For example C</foo(?!bar)/>
d1268 2
a1269 2
however that look-ahead and look-behind are NOT the same thing.  You cannot
use this for look-behind.
d1274 1
a1274 1
match.  Use look-behind instead (see below).
d1279 1
a1279 1
A zero-width positive look-behind assertion.  For example, C</(?<=\t)\w+/>
d1281 1
a1281 1
Works only for fixed-width look-behind.
d1287 1
a1287 1
look-behind. The use of C<\K> inside of another look-around assertion
d1304 1
a1304 1
A zero-width negative look-behind assertion.  For example C</(?<!bar)foo/>
d1306 1
a1306 1
only for fixed-width look-behind.
d1323 1
a1323 1
$+{NAME} will refer to the leftmost defined group in the match.
d1334 1
a1334 1
$+{foo} will be the same as $2, and $3 will contain 'z' instead of
d1337 1
a1337 1
Currently NAME is restricted to simple identifiers only.
d1462 1
a1462 1
At the end of the regex execution, $cnt will be wound back to its initial
d1519 1
a1519 1
I<will> match, it will I<not> set $1 on exit.
d1558 1
a1558 1
recursive patterns have access to their callers match state, so one can
d1572 1
a1572 1
The following pattern matches a function foo() which may contain
d1622 1
a1622 1
like (?i:(?1)) or (?:(?i)(?1)) do not affect how the sub-pattern will
d1648 19
a1666 6
C<(condition)> should be one of: 1) an integer in
parentheses (which is valid if the corresponding pair of parentheses
matched); 2) a look-ahead/look-behind/evaluate zero-width assertion; 3) a
name in angle brackets or single quotes (which is valid if a group
with the given name matched); or 4) the special symbol (R) (true when
evaluated inside of recursion or eval). Additionally the R may be
d1671 2
d1677 1
a1677 1
=item (1) (2) ...
d1681 1
a1681 1
=item (<NAME>) ('NAME')
d1685 1
a1685 1
=item (?=...) (?!...) (?<=...) (?<!...)
d1687 1
a1687 1
Checks whether the pattern matches (or does not match, for the '!'
d1690 1
a1690 1
=item (?{ CODE })
d1694 1
a1694 1
=item (R)
d1698 1
a1698 1
=item (R1) (R2) ...
d1707 1
a1707 1
=item (R&NAME)
d1711 1
a1711 1
logic used by C<(?&NAME)> to disambiguate). It does not check the full
d1714 1
a1714 1
=item (DEFINE)
d1843 1
a1843 1
effect may be achieved by negative look-ahead, as in C<[^()]+ (?! [^()] )>.
d1849 1
a1849 1
by C<#> followed by some optional (horizontal) whitespace.  Contrary to
d1858 1
a1858 1
For example, to grab non-empty comments into $1, one should use either
d1888 3
a1890 3
These special patterns are generally of the form C<(*VERB:ARG)>. Unless
otherwise stated the ARG argument is optional; in some cases, it is
forbidden.
d1897 1
a1897 1
On failure, the C<$REGERROR> variable will be set to the ARG value of the
d1899 1
a1899 1
ARG part of the pattern was omitted, then C<$REGERROR> will be set to the
d1918 1
a1918 1
=item Verbs that take an argument
d1926 4
a1929 4
when backtracked into on failure. Consider the pattern C<A (*PRUNE) B>,
where A and B are complex patterns. Until the C<(*PRUNE)> verb is reached,
A may backtrack as necessary to match. Once it is reached, matching
continues in B, which may also backtrack as necessary; however, should B
d1988 1
a1988 1
executing the (*SKIP) pattern.
d2013 1
a2013 1
C<(*MARK)> patterns are allowed, and the NAME portion may be duplicated.
d2049 1
a2049 1
alternation operator (C<|>) can be used to create what is essentially a
d2071 2
a2072 6
as after matching the A but failing on the B the C<(*THEN)> verb will
backtrack and try C; but the C<(*PRUNE)> verb will simply fail.

=back

=item Verbs without an argument
d2074 1
a2074 3
=over 4

=item C<(*COMMIT)>
d2095 1
a2095 1
=item C<(*FAIL)> C<(*F)>
d2100 3
a2102 1
fact, C<(?!)> gets optimised into C<(*FAIL)> internally.
d2106 1
a2106 1
=item C<(*ACCEPT)>
d2125 3
d2142 2
a2143 2
by all regular non-possessive expression quantifiers, namely C<*>, C<*?>, C<+>,
C<+?>, C<{n,m}>, and C<{n,m}?>.  Backtracking is often optimized
d2162 2
a2163 2
$1 with "Foo".  However, as soon as the matching engine sees that there's
no whitespace following the "Foo" that it had saved in $1, it realizes its
d2246 1
a2246 1
When using look-ahead assertions and negations, this can all get even
d2278 1
a2278 1
that you've asked "Is it true that at the start of $x, following 0 or more
d2295 2
a2296 2
We'll say that the first part in $1 must be followed both by a digit
and by something that's not "123".  Remember that the look-aheads
d2323 1
a2323 1
And if you used C<*>'s in the internal groups instead of limiting them
d2326 1
a2326 1
always applicable.  For example, if you put C<{0,5}> instead of C<*>
d2333 1
a2333 1
zero-length look-ahead/look-behind assertions will not backtrack to make
d2336 1
a2336 1
where side-effects of look-ahead I<might> have influenced the
d2348 2
a2349 2
literally by prefixing them with a "\" (e.g., "\." matches a ".", not any
character; "\\" matches a "\"). This escape mechanism is also required
d2358 2
a2359 2
first character after the "[" is "^", the class matches any character not
in the list.  Within a list, the "-" character specifies a
d2361 4
a2364 4
inclusive.  If you want either "-" or "]" itself to be a member of a
class, put it at the start of the list (possibly after a "^"), or
escape it with a backslash.  "-" is also taken literally when it is
at the end of the list, just before the closing "]".  (The
d2370 1
a2370 1
a range, the "-" is understood literally.
d2373 19
a2391 5
character sets--and even within character sets they may cause results
you probably didn't expect.  A sound principle is to use only ranges
that begin from and end at either alphabetics of equal case ([a-e],
[A-E]), or digits ([0-9]).  Anything else is unsafe.  If in doubt,
spell out the character sets in full.
d2399 1
a2399 1
matches the character control-I<x>.  Finally, the "." metacharacter
d2402 1
a2402 1
You can specify a series of alternatives for a pattern using "|" to
d2406 2
a2407 2
("(", "(?:", etc. or the beginning of the pattern) up to the first "|", and
the last alternative contains everything from the last "|" to the next
d2420 1
a2420 1
Also remember that "|" is interpreted as a literal within square brackets,
d2434 1
a2434 1
=head2 Warning on \1 Instead of $1
d2475 1
a2475 1
because of the C<*> quantifier.  Another common way to create a similar cycle
d2484 1
a2484 1
or the loop implied by split().
d2496 1
a2496 1
ones like the C</g> modifier or split() operator.
d2531 1
a2531 1
the C<*>.
d2554 1
a2554 1
the matched string, and is reset by each assignment to pos().
d2705 1
a2705 1
(but only if the special meaning of C<\Y|> should be enabled inside $re):
a2770 2

Many regular expression constructs don't work on EBCDIC platforms.
@


1.17
log
@Merge perl-5.18.2 plus local patches, remove old files

OK espie@@ sthen@@ deraadt@@
@
text
@d34 2
a35 2
the start or end of line only at the left and right ends of the string to
matching them anywhere within the string.
d94 3
a96 8
=item g and c
X</g> X</c>

Global matching, and keep the Current position after failed matching.
Unlike i, m, s and x, these two flags affect the way the regex is used
rather than the regex itself. See
L<perlretut/"Using regular expressions in Perl"> for further explanation
of the g and c modifiers.
d101 1
a101 1
These modifiers, all new in 5.14, affect which character-set semantics
d105 22
d139 12
a150 6
backslashed nor within a character class.  You can use this to break up
your regular expression into (slightly) more readable parts.  The C<#>
character is also treated as a metacharacter introducing a comment,
just as in ordinary Perl code.  This also means that if you want real
whitespace or C<#> characters in the pattern (outside a character
class, where they are unaffected by C</x>), then you'll either have to
d152 19
a170 5
hex, or C<\N{}> escapes.  Taken together, these features go a long way towards
making Perl's regular expressions more readable.  Note that you have to
be careful not to include the pattern delimiter in the comment--perl has
no way of knowing you did not intend to close the pattern early.  See
the C-comment deletion code in L<perlop>.  Also note that anything inside
d187 1
a187 1
the character set modifiers; they affect the character set semantics
d259 4
a262 2
Perl only supports single-byte locales.  This means that code points
above 255 are treated as Unicode no matter what locale is in effect.
d264 11
a274 6
the 255/256 boundary.  These are disallowed under C</l>.  For example,
0xFF (on ASCII platforms) does not caselessly match the character at
0x178, C<LATIN CAPITAL LETTER Y WITH DIAERESIS>, because 0xFF may not be
C<LATIN SMALL LETTER Y WITH DIAERESIS> in the current locale, and Perl
has no way of knowing if that character even exists in the locale, much
less what code point it is.
d415 1
a415 1
case-insensitive matching uses Unicode semantics; for example, "k" will
d434 1
a434 1
the C</u> modifier explictly if there are a few regular expressions
d506 2
a507 1
    $        Match the end of the line (or before newline at the end)
d548 1
a548 1
    /o{4,3}/
d550 2
a551 3
looks like a quantifier that matches 0 times, since 4 is greater than 3,
but it really means to match the sequence of six characters
S<C<"o { 4 , 3 }">>.  It is planned to eventually require literal uses
d582 1
a582 1
By default, when a quantified subpattern does not allow the rest of the
d614 10
d642 3
a644 3
 \L          lowercase till \E (think vi)
 \U          uppercase till \E (think vi)
 \Q          quote (disable) pattern metacharacters till \E
d678 1
a678 1
                   lookbehind.
d789 11
d940 2
a941 1
B<WARNING>: Once Perl sees that you need one of C<$&>, C<$`>, or
d943 5
a947 4
pattern match.  This may substantially slow your program.  Perl
uses the same mechanism to produce C<$1>, C<$2>, etc, so you also pay a
price for each pattern that contains capturing parentheses.  (To
avoid this cost while retaining the grouping behaviour, use the
d953 1
a953 4
already paid the price.  As of 5.17.4, the presence of each of the three
variables in a program is recorded separately, and depending on
circumstances, perl may be able be more efficient knowing that only C<$&>
rather than all three have been seen, for example.
d956 6
a961 1
As a workaround for this problem, Perl 5.10.0 introduces C<${^PREMATCH}>,
d967 2
a968 1
have to tell perl when you want to use them.
d1024 2
a1025 2
A comment.  The text is ignored.  If the C</x> modifier enables
whitespace formatting, a simple C<#> will suffice.  Note that Perl closes
d1027 4
a1030 1
C<)> in the comment.
d1229 2
a1230 1
There is a special form of this construct, called C<\K>, which causes the
d1314 5
a1318 8
B<WARNING>: This extended regular expression feature is considered
experimental, and may be changed without notice. Code executed that
has side effects may not perform identically from version to version
due to the effect of future optimisations in the regex engine. The
implementation of this feature was radically overhauled for the 5.18.0
release, and its behaviour in earlier versions of perl was much buggier,
especially in relation to parsing, lexical vars, scoping, recursion and
reentrancy.
d1437 5
a1441 4
B<WARNING>: This extended regular expression feature is considered
experimental, and may be changed without notice. Code executed that
has side effects may not perform identically from version to version
due to the effect of future optimisations in the regex engine.
d1491 7
a1497 1
X<regex, relative recursion>
d1502 4
a1505 3
as an independent pattern that must match at the current position.
Capture groups contained by the pattern will have the value as determined
by the outermost recursion.
d1673 1
a1673 1
not be as efficient, as the optimiser is not very clever about
d1681 1
a1681 1
     (?<ADRESS_PAT>....)
a1818 4
B<WARNING:> These patterns are experimental and subject to change or
removal in a future version of Perl. Their usage in production code should
be noted to avoid problems during upgrades.

a2043 3
B<WARNING:> This feature is highly experimental. It is not recommended
for production code.

d2630 35
@


1.16
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@d34 2
a35 2
the start or end of the string to matching the start or end of any
line anywhere within the string.
d75 5
a79 2
Perl doesn't match multiple characters in an inverted bracketed
character class, which otherwise could be highly confusing.  See
a81 17
Another bug involves character classes that match both a sequence of
multiple characters, and an initial sub-string of that sequence.  For
example,

 /[s\xDF]/i

should match both a single and a double "s", since C<\xDF> (on ASCII
platforms) matches "ss".  However, this bug
(L<[perl #89774]|https://rt.perl.org/rt3/Ticket/Display.html?id=89774>)
causes it to only match a single "s", even if the final larger match
fails, and matching the double "ss" would have succeeded.

Also, Perl matching doesn't fully conform to the current Unicode C</i>
recommendations, which ask that the matching be made upon the NFD
(Normalization Form Decomposed) of the text.  However, Unicode is
in the process of reconsidering and revising their recommendations.

d138 2
a139 2
C<{5,}>.  Similarly, C<(?:...)> can't have a space between the C<?> and C<:>,
but can between the C<(> and C<?>.  Within any delimiters for such a
a271 8
On the EBCDIC platforms that Perl handles, the native character set is
equivalent to Latin-1.  Thus this modifier changes behavior only when
the C<"/i"> modifier is also specified, and it turns out it affects only
two characters, giving them full Unicode semantics: the C<MICRO SIGN>
will match the Greek capital and small letters C<MU>, otherwise not; and
the C<LATIN CAPITAL LETTER SHARP S> will match any of C<SS>, C<Ss>,
C<sS>, and C<ss>, otherwise not.

d304 5
a308 1
the pattern uses a Unicode property (C<\p{...}>)
d318 2
a319 2
On ASCII platforms, the native rules are ASCII, and on EBCDIC platforms
(at least the ones that Perl handles), they are Latin-1.
d345 2
a346 1
characters C<[ \f\n\r\t]>; C<\w> means the 63 characters
d477 1
a477 1
but this option was removed in perl 5.9.)
d498 4
a501 10
a backslashed sequence like C<\x{...}>, it is treated
as a regular character.  In particular, the lower quantifier bound
is not optional.  However, in Perl v5.18, it is planned to issue a
deprecation warning for all such occurrences, and in Perl v5.20 to
require literal uses of a curly bracket to be escaped, say by preceding
them with a backslash or enclosing them within square brackets, (C<"\{">
or C<"[{]">).  This change will allow for future syntax extensions (like
making the lower bound of a quantifier optional), and better error
checking of quantifiers.  Now, a typo in a quantifier silently causes
it to be treated as the literal characters.  For example,
d507 7
a513 1
S<C<"o { 4 , 3 }">>.)
d608 1
d634 1
a634 2
  \N        [7]  Any character but \n (experimental).  Not affected by
                   /s modifier
d674 4
d886 4
a889 2
already paid the price.  As of 5.005, C<$&> is not so costly as the
other two.
d906 1
a906 1
that looks like \\, \(, \), \<, \>, \{, or \} is always
d1243 58
a1300 1
due to the effect of future optimisations in the regex engine.
d1302 1
a1302 7
This zero-width assertion evaluates any embedded Perl code.  It
always succeeds, and its C<code> is not interpolated.  Currently,
the rules to determine where the C<code> ends are somewhat convoluted.

This feature can be used together with the special variable C<$^N> to
capture the results of submatches in variables without having to keep
track of the number of nested parentheses. For example:
d1304 3
a1306 3
  $_ = "The brown fox jumps over the lazy dog";
  /the (\S+)(?{ $color = $^N }) (\S+)(?{ $animal = $^N })/i;
  print "color = $color, animal = $animal\n";
d1308 1
a1308 1
Inside the C<(?{...})> block, C<$_> refers to the string the regular
d1312 7
a1318 3
The C<code> is properly scoped in the following sense: If the assertion
is backtracked (compare L<"Backtracking">), all changes introduced after
C<local>ization are undone, so that
d1335 13
a1347 9
will set C<$res = 4>.  Note that after the match, C<$cnt> returns to the globally
introduced value, because the scopes that restrict C<local> operators
are unwound.

This assertion may be used as a C<(?(condition)yes-pattern|no-pattern)>
switch.  If I<not> used in this way, the result of evaluation of
C<code> is put into the special variable C<$^R>.  This happens
immediately, so C<$^R> can be used from other C<(?{ code })> assertions
inside the same regular expression.
d1353 8
a1360 31
For reasons of security, this construct is forbidden if the regular
expression involves run-time interpolation of variables, unless the
perilous C<use re 'eval'> pragma has been used (see L<re>), or the
variables contain results of the C<qr//> operator (see
L<perlop/"qr/STRINGE<sol>msixpodual">).

This restriction is due to the wide-spread and remarkably convenient
custom of using run-time determined strings as patterns.  For example:

    $re = <>;
    chomp $re;
    $string =~ /$re/;

Before Perl knew how to execute interpolated code within a pattern,
this operation was completely safe from a security point of view,
although it could raise an exception from an illegal pattern.  If
you turn on the C<use re 'eval'>, though, it is no longer secure,
so you should only do so if you are also using taint checking.
Better yet, use the carefully constrained evaluation within a Safe
compartment.  See L<perlsec> for details about both these mechanisms.

B<WARNING>: Use of lexical (C<my>) variables in these blocks is
broken. The result is unpredictable and will make perl unstable. The
workaround is to use global (C<our>) variables.

B<WARNING>: In perl 5.12.x and earlier, the regex engine
was not re-entrant, so interpolated code could not
safely invoke the regex engine either directly with
C<m//> or C<s///>), or indirectly with functions such as
C<split>. Invoking the regex engine in these blocks would make perl
unstable.
d1371 19
a1389 9
This is a "postponed" regular subexpression.  The C<code> is evaluated
at run time, at the moment this subexpression may match.  The result
of evaluation is considered a regular expression and matched as
if it were inserted instead of this construct.  Note that this means
that the contents of capture groups defined inside an eval'ed pattern
are not available outside of the pattern, and vice versa, there is no
way for the inner pattern returned from the code block to refer to a
capture group defined outside.  (The code block itself can use C<$1>, etc.,
to refer to the enclosing pattern's capture groups.)  Thus,
d1393 1
a1393 4
B<will> match, it will B<not> set $1.

The C<code> is not interpolated.  As before, the rules to determine
where the C<code> ends are currently somewhat convoluted.
d1407 3
a1409 1
See also C<(?PARNO)> for a different, more efficient way to accomplish
d1412 3
a1414 13
For reasons of security, this construct is forbidden if the regular
expression involves run-time interpolation of variables, unless the
perilous C<use re 'eval'> pragma has been used (see L<re>), or the
variables contain results of the C<qr//> operator (see
L<perlop/"qrE<sol>STRINGE<sol>msixpodual">).

In perl 5.12.x and earlier, because the regex engine was not re-entrant,
delayed code could not safely invoke the regex engine either directly with
C<m//> or C<s///>), or indirectly with functions such as C<split>.

Recursing deeper than 50 times without consuming any input string will
result in a fatal error.  The maximum depth is compiled into perl, so
changing it requires a custom build.
d1416 1
a1416 1
=item C<(?PARNO)> C<(?-PARNO)> C<(?+PARNO)> C<(?R)> C<(?0)>
d1421 6
a1426 5
Similar to C<(??{ code })> except it does not involve compiling any code,
instead it treats the contents of a capture group as an independent
pattern that must match at the current position.  Capture groups
contained by the pattern will have the value as determined by the
outermost recursion.
d1428 1
a1428 1
PARNO is a sequence of digits (not starting with 0) whose value reflects
d1431 1
a1431 1
C<(?R)>. If PARNO is preceded by a plus or minus sign then it is assumed
d1481 1
a1481 1
    if (/foo $parens \s+ + \s+ bar $parens/x) {
d1495 1
a1495 1
Recurse to a named subpattern. Identical to C<(?PARNO)> except that the
d1515 1
a1515 1
C<(condition)> should be either an integer in
d1517 1
a1517 1
matched), a look-ahead/look-behind/evaluate zero-width assertion, a
d1519 1
a1519 1
with the given name matched), or the special symbol (R) (true when
d1732 4
d1921 1
a1921 1
  / ( A (*THEN) B | C (*THEN) D ) /
d1925 1
a1925 1
  / ( A (*PRUNE) B | C (*PRUNE) D ) /
d2487 1
a2487 1
=item C<(??{ EXPR })>, C<(?PARNO)>
d2490 1
a2490 1
the result of EXPR, or the pattern contained by capture group PARNO.
@


1.15
log
@merge in perl 5.12.2 plus local changes
@
text
@d54 41
a94 2
If C<use locale> is in effect, the case map is taken from the current
locale.  See L<perllocale>.
d100 1
d117 7
d126 5
a130 4
These are usually written as "the C</x> modifier", even though the delimiter
in question might not really be a slash.  Any of these
modifiers may also be embedded within the regular expression itself using
the C<(?...)> construct.  See below.
d132 3
a134 1
The C</x> modifier itself needs a little more explanation.  It tells
d149 1
a149 1
whether space interpretation within a single multi-character construct.  For
d151 1
a151 1
spaces.  Same for a L<quantifier|Quantifiers> such as C<{3}> or
d157 2
a158 2
in C<\p{...}>  there can be spaces that follow the Unicode rules, for which see
L<perluniprops.pod/Properties accessible through \p{} and \P{}>.
d161 299
d476 7
a482 7
    \	Quote the next metacharacter
    ^	Match the beginning of the line
    .	Match any character (except newline)
    $	Match the end of the line (or before newline at the end)
    |	Alternation
    ()	Grouping
    []	Character class
d494 1
a494 1
but this practice has been removed in perl 5.9.)
d507 26
a532 10
    *	   Match 0 or more times
    +	   Match 1 or more times
    ?	   Match 1 or 0 times
    {n}    Match exactly n times
    {n,}   Match at least n times
    {n,m}  Match at least n but not more than m times

(If a curly bracket occurs in any other context, it is treated
as a regular character.  In particular, the lower bound
is not optional.)  The "*" quantifier is equivalent to C<{0,}>, the "+"
d548 6
a553 6
    *?     Match 0 or more times, not greedily
    +?     Match 1 or more times, not greedily
    ??     Match 0 or 1 time, not greedily
    {n}?   Match exactly n times, not greedily
    {n,}?  Match at least n times, not greedily
    {n,m}? Match at least n but not more than m times, not greedily
d560 6
a565 6
    *+     Match 0 or more times and give nothing back
    ++     Match 1 or more times and give nothing back
    ?+     Match 0 or 1 time and give nothing back
    {n}+   Match exactly n times and give nothing back (redundant)
    {n,}+  Match at least n times and give nothing back
    {n,m}+ Match at least n but not more than m times and give nothing back
d580 2
a581 1
help. See the independent subexpression C<< (?>...) >> for more details;
d589 1
a589 1
Because patterns are processed as double quoted strings, the following
a590 2
X<\t> X<\r> X<\f> X<\e> X<\a> X<\l> X<\u> X<\L> X<\U> X<\E> X<\Q>
X<\0> X<\c> X<\N{}> X<\x>
d592 19
a610 27
    \t		tab                   (HT, TAB)
    \n		newline               (LF, NL)
    \r		return                (CR)
    \f		form feed             (FF)
    \a		alarm (bell)          (BEL)
    \e		escape (think troff)  (ESC)
    \033	octal char            (example: ESC)
    \x1B	hex char              (example: ESC)
    \x{263a}	long hex char         (example: Unicode SMILEY)
    \cK		control char          (example: VT)
    \N{name}	named Unicode character
    \N{U+263D}	Unicode character     (example: FIRST QUARTER MOON)
    \l		lowercase next char (think vi)
    \u		uppercase next char (think vi)
    \L		lowercase till \E (think vi)
    \U		uppercase till \E (think vi)
    \E		end case modification (think vi)
    \Q		quote (disable) pattern metacharacters till \E

If C<use locale> is in effect, the case map used by C<\l>, C<\L>, C<\u>
and C<\U> is taken from the current locale.  See L<perllocale>.  For
documentation of C<\N{name}>, see L<charnames>.

You cannot include a literal C<$> or C<@@> within a C<\Q> sequence.
An unescaped C<$> or C<@@> interpolates the corresponding variable,
while escaping will cause the literal string C<\$> to be matched.
You'll need to write something like C<m/\Quser\E\@@\Qhost/>.
d617 68
a684 32
    \w	     Match a "word" character (alphanumeric plus "_")
    \W	     Match a non-"word" character
    \s	     Match a whitespace character
    \S	     Match a non-whitespace character
    \d	     Match a digit character
    \D	     Match a non-digit character
    \pP	     Match P, named property.  Use \p{Prop} for longer names.
    \PP	     Match non-P
    \X	     Match Unicode "eXtended grapheme cluster"
    \C	     Match a single C char (octet) even under Unicode.
	     NOTE: breaks up characters into their UTF-8 bytes,
	     so you may end up with malformed pieces of UTF-8.
	     Unsupported in lookbehind.
    \1       Backreference to a specific group.
	     '1' may actually be any positive integer.
    \g1      Backreference to a specific or previous group,
    \g{-1}   number may be negative indicating a previous buffer and may
             optionally be wrapped in curly brackets for safer parsing.
    \g{name} Named backreference
    \k<name> Named backreference
    \K       Keep the stuff left of the \K, don't include it in $&
    \N       Any character but \n (experimental)
    \v       Vertical whitespace
    \V       Not vertical whitespace
    \h       Horizontal whitespace
    \H       Not horizontal whitespace
    \R       Linebreak

See L<perlrecharclass/Backslashed sequences> for details on
C<\w>, C<\W>, C<\s>, C<\S>, C<\d>, C<\D>, C<\p>, C<\P>, C<\N>, C<\v>, C<\V>,
C<\h>, and C<\H>.
See L<perlrebackslash/Misc> for details on C<\R> and C<\X>.
d687 3
a689 41
character whose name is C<NAME>; and similarly when of the form
C<\N{U+I<wide hex char>}>, it matches the character whose Unicode ordinal is
I<wide hex char>.  Otherwise it matches any character but C<\n>.

The POSIX character class syntax
X<character class>

    [:class:]

is also available.  Note that the C<[> and C<]> brackets are I<literal>;
they must always be used within a character class expression.

    # this is correct:
    $string =~ /[[:alpha:]]/;

    # this is not, and will generate a warning:
    $string =~ /[:alpha:]/;

The following Posix-style character classes are available:

 [[:alpha:]]  Any alphabetical character.
 [[:alnum:]]  Any alphanumerical character.
 [[:ascii:]]  Any character in the ASCII character set.
 [[:blank:]]  A GNU extension, equal to a space or a horizontal tab
 [[:cntrl:]]  Any control character.
 [[:digit:]]  Any decimal digit, equivalent to "\d".
 [[:graph:]]  Any printable character, excluding a space.
 [[:lower:]]  Any lowercase character.
 [[:print:]]  Any printable character, including a space.
 [[:punct:]]  Any graphical character excluding "word" characters.
 [[:space:]]  Any whitespace character. "\s" plus vertical tab ("\cK").
 [[:upper:]]  Any uppercase character.
 [[:word:]]   A Perl extension, equivalent to "\w".
 [[:xdigit:]] Any hexadecimal digit.

You can negate the [::] character classes by prefixing the class name
with a '^'. This is a Perl extension.

The POSIX character classes
[.cc.] and [=cc=] are recognized but B<not> supported and trying to
use them will cause an error.
d691 1
a691 2
Details on POSIX character classes are in
L<perlrecharclass/Posix Character Classes>.
d701 6
a706 6
    \b	Match a word boundary
    \B	Match except at a word boundary
    \A	Match only at beginning of string
    \Z	Match only at end of string, or before newline at the end
    \z	Match only at end of string
    \G	Match only at pos() (e.g. at the end-of-match position
d726 1
a726 1
of your string, see the previous reference.  The actual location
d729 2
a730 1
matches is modified somewhat, in that contents to the left of C<\G> is
d735 5
a739 5
    $str = 'ABC';
    pos($str) = 1;
    while (/.\G/g) {
        print $&;
    }
d748 1
a748 1
=head3 Capture buffers
d750 5
a754 8
The bracketing construct C<( ... )> creates capture buffers. To refer
to the current contents of a buffer later on, within the same pattern,
use \1 for the first, \2 for the second, and so on.
Outside the match use "$" instead of "\".  (The
\<digit> notation works in certain circumstances outside
the match.  See the warning below about \1 vs $1 for details.)
Referring back to another part of the match is called a
I<backreference>.
d756 1
d758 1
a758 15

There is no limit to the number of captured substrings that you may
use.  However Perl also uses \10, \11, etc. as aliases for \010,
\011, etc.  (Recall that 0 means octal, so \011 is the character at
number 9 in your coded character set; which would be the 10th character,
a horizontal tab under ASCII.)  Perl resolves this
ambiguity by interpreting \10 as a backreference only if at least 10
left parentheses have opened before it.  Likewise \11 is a
backreference only if at least 11 left parentheses have opened
before it.  And so on.  \1 through \9 are always interpreted as
backreferences.
If the bracketing group did not match, the associated backreference won't
match either. (This can happen if the bracketing group is optional, or
in a different branch of an alternation.)

d760 15
a774 12
In order to provide a safer and easier way to construct patterns using
backreferences, Perl provides the C<\g{N}> notation (starting with perl
5.10.0). The curly brackets are optional, however omitting them is less
safe as the meaning of the pattern can be changed by text (such as digits)
following it. When N is a positive integer the C<\g{N}> notation is
exactly equivalent to using normal backreferences. When N is a negative
integer then it is a relative backreference referring to the previous N'th
capturing group. When the bracket form is used and N is not an integer, it
is treated as a reference to a named buffer.

Thus C<\g{-1}> refers to the last buffer, C<\g{-2}> refers to the
buffer before that. For example:
d777 5
a781 5
         (Y)            # buffer 1
         (              # buffer 2
            (X)         # buffer 3
            \g{-1}      # backref to buffer 3
            \g{-3}      # backref to buffer 1
d785 44
a828 1
and would match the same as C</(Y) ( (X) \3 \1 )/x>.
d830 2
a831 12
Additionally, as of Perl 5.10.0 you may use named capture buffers and named
backreferences. The notation is C<< (?<name>...) >> to declare and C<< \k<name> >>
to reference. You may also use apostrophes instead of angle brackets to delimit the
name; and you may use the bracketed C<< \g{name} >> backreference syntax.
It's possible to refer to a named capture buffer by absolute and relative number as well.
Outside the pattern, a named capture buffer is available via the C<%+> hash.
When different buffers within the same pattern have the same name, C<$+{name}>
and C<< \k<name> >> refer to the leftmost defined group. (Thus it's possible
to do things with named capture buffers that would otherwise require C<(??{})>
code to accomplish.)
X<named capture buffer> X<regular expression, named capture buffer>
X<%+> X<$+{name}> X<< \k<name> >>
d837 1
a837 1
    /(.)\1/                         # find first doubled char
d843 1
a843 1
    /(?'char'.)\1/                  # ... mix and match
d847 3
a849 3
	$hours = $1;
	$minutes = $2;
	$seconds = $3;
d852 14
d877 2
a878 2
The numbered match variables ($1, $2, $3, etc.) and the related punctuation
set (C<$+>, C<$&>, C<$`>, C<$'>, and C<$^N>) are all dynamically scoped
a883 1

d891 1
a891 1
uses the same mechanism to produce $1, $2, etc, so you also pay a
d912 2
d938 2
d943 2
a944 1
found in standard tools like B<awk> and B<lex>.  The syntax is a
d958 1
a958 1
"question" exactly what is going on.  That's psychology...
d960 1
a960 1
=over 10
d970 4
a973 2
=item C<(?pimsx-imsx)>
X<(?)>
d977 3
a979 2
the remainder of the enclosing pattern group (if any). This is
particularly useful for dynamic patterns, such as those read in from a
d981 2
a982 2
somewhere.  Consider the case where some patterns want to be case
sensitive and some do not:  The case insensitive ones merely need to
d995 1
a995 1
    ( (?i) blah ) \s+ \1
d1002 1
a1002 1
enclosing group. In other words, a pattern such as C<((?i)(&NAME))> does not
d1005 19
a1023 4
Note that the C<p> modifier is special in that it can only be enabled,
not disabled, and that its presence anywhere in a pattern has a global
effect. Thus C<(?-p)> and C<(?-p:...)> are meaningless and will warn
when executed under C<use warnings>.
d1028 4
a1031 1
=item C<(?imsx-imsx:pattern)>
d1046 1
a1046 1
C<(?imsx-imsx)>.  For example,
d1054 31
d1089 1
a1089 1
that the capture buffers are numbered from the same starting point
d1092 1
a1092 1
Capture buffers are numbered from left to right, but inside this
d1095 1
a1095 1
The numbering within each branch will be as normal, and any buffers
d1098 1
a1098 1
buffers in it.
d1100 1
a1100 1
This construct will be useful when you want to capture one of a
d1104 1
a1104 1
which buffer the captured content will be stored.
d1113 1
a1113 1
numbered buffers holding the captures, and that interferes with the
d1127 2
a1128 2
The problem here is that both the buffer named C<< a >> and the buffer
named C<< b >> are aliases for the buffer belonging to C<< $1 >>.
d1133 1
a1133 1
Look-around assertions are zero width patterns which match a specific
d1158 1
a1158 8
match.  You would have to do something like C</(?!foo)...bar/> for that.   We
say "like" because there's the case of your "bar" not having three characters
before it.  You could cover that this way: C</(?:(?!foo)...|^.{0,2})bar/>.
Sometimes it's still easier just to say:

    if (/bar/ && $` !~ /foo$/)

For look-behind see below.
d1169 1
a1169 1
not include it in C<$&>. This effectively provides variable length
d1198 5
a1202 3
A named capture buffer. Identical in every respect to normal capturing
parentheses C<()> but for the additional fact that C<%+> or C<%-> may be
used after a successful match to refer to a named buffer. See C<perlvar>
d1205 2
a1206 2
If multiple distinct capture buffers have the same name then the
$+{NAME} will refer to the leftmost defined buffer in the match.
d1211 1
a1211 1
function in .NET regexes, the behavior is not. In Perl the buffers are
d1278 1
a1278 1
     (?{ $cnt = 0 })			# Initialize $cnt.
d1282 2
a1283 1
           local $cnt = $cnt + 1;	# Update $cnt, backtracking-safe.
d1287 2
a1288 2
     (?{ $res = $cnt })			# On success copy to non-localized
					# location.
d1308 2
a1309 2
variables contain results of C<qr//> operator (see
L<perlop/"qr/STRING/imosx">).
d1330 3
a1332 2
B<WARNING>: Because Perl's regex engine is currently not re-entrant,
interpolated code may not invoke the regex engine either directly with
d1334 1
a1334 1
C<split>. Invoking the regex engine in these blocks will make perl
d1348 1
a1348 1
of evaluation is considered as a regular expression and matched as
d1350 1
a1350 1
that the contents of capture buffers defined inside an eval'ed pattern
d1352 3
a1354 2
way for the inner pattern to refer to a capture buffer defined outside.
Thus,
d1365 9
a1373 9
  $re = qr{
	     \(
	     (?:
		(?> [^()]+ )	# Non-parens without backtracking
	      |
		(??{ $re })	# Group with matching parens
	     )*
	     \)
	  }x;
d1381 2
a1382 2
variables contain results of C<qr//> operator (see
L<perlop/"qr/STRING/imosx">).
d1384 3
a1386 3
Because perl's regex engine is not currently re-entrant, delayed
code may not invoke the regex engine either directly with C<m//> or C<s///>),
or indirectly with functions such as C<split>.
d1398 2
a1399 2
instead it treats the contents of a capture buffer as an independent
pattern that must match at the current position.  Capture buffers
d1404 1
a1404 1
the paren-number of the capture buffer to recurse to. C<(?R)> recurses to
d1407 1
a1407 1
to be relative, with negative numbers indicating preceding capture buffers
d1409 1
a1409 1
declared buffer, and C<(?+1)> indicates the next buffer to be declared.
d1411 1
a1411 1
relative backreferences, in that with recursion unclosed buffers B<are>
d1417 1
a1417 1
  $re = qr{ (                    # paren group 1 (full function)
d1419 1
a1419 1
              (                  # paren group 2 (parens)
d1421 1
a1421 1
                  (              # paren group 3 (contents of parens)
d1423 1
a1423 1
                   (?> [^()]+ )  # Non-parens without backtracking
d1425 1
a1425 1
                   (?2)          # Recurse to start of paren group 2
d1446 1
a1446 1
If there is no corresponding capture buffer defined, then it is a
d1486 5
a1490 1
Conditional expression.  C<(condition)> should be either an integer in
d1493 1
a1493 1
name in angle brackets or single quotes (which is valid if a buffer
d1506 1
a1506 1
Checks if the numbered capturing buffer has matched something.
d1510 6
a1515 1
Checks if a buffer with the given name has matched something.
d1519 1
a1519 1
Treats the code block as the condition.
d1559 3
a1561 3
A special form is the C<(DEFINE)> predicate, which never executes directly
its yes-pattern, and does not allow a no-pattern. This allows to define
subpatterns which will be executed only by using the recursion mechanism.
d1580 2
a1581 2
Note that capture buffers matched inside of recursion are not accessible
after the recursion returns, so the extra layer of capturing buffers is
d1585 13
d1618 4
d1623 2
a1624 2
C<(?=(pattern))\1>.  This matches the same substring as a standalone
C<a+>, and the following C<\1> eats the matched string; it therefore
d1634 1
a1634 1
            [^()]+		# x+
d1654 1
a1654 1
            (?> [^()]+ )	# change x+ above to (?> x+ )
d1664 2
a1665 1
however, that this pattern currently triggers a warning message under
d1736 1
a1736 1
and most other regex related variables. They are not local to a scope, nor
d1743 1
a1743 1
=over 4
d1784 1
a1784 1
we prevent backtracking and find the count of the longest matching
a1799 1

d1817 1
a1817 1
Compare the following to the examples in C<(*PRUNE)>, note the string
d1820 2
a1821 2
    'aaabaaab' =~ /a+b?(*SKIP)(?{print "$&\n"; $count++})(*FAIL)/;
    print "Count=$count\n";
d1834 1
a1834 1
X<(*MARK)> C<(*MARK:NAME)> C<(*:NAME)>
d1852 1
a1852 1
without using a separate capture buffer for each branch, which in turn
d1862 1
a1862 1
See C<(*SKIP)> for more details.
d1868 1
a1868 1
This is similar to the "cut group" operator C<::> from Perl 6. Like
d1871 3
a1873 1
innermost enclosing group (capturing or otherwise).
d1901 6
d1916 2
a1917 2
    'aaabaaab' =~ /a+b?(*COMMIT)(?{print "$&\n"; $count++})(*FAIL)/;
    print "Count=$count\n";
a1927 6
=back

=item Verbs without an argument

=over 4

d1949 1
a1949 1
If the C<(*ACCEPT)> is inside of capturing buffers then the buffers are
d1956 1
a1956 1
be set. If another branch in the inner parentheses were matched, such as in the
d1988 1
a1988 1
	print "$2 follows $1.\n";
d2006 1
a2006 1
	print "got <$1>\n";
d2026 2
a2027 2
    if ( /(.*)(\d*)/ ) {				# Wrong!
	print "Beginning is <$1>, number is <$2>.\n";
d2040 8
a2047 8
	(.*)(\d*)
	(.*)(\d+)
	(.*?)(\d*)
	(.*?)(\d+)
	(.*)(\d+)$
	(.*?)(\d+)$
	(.*)\b(\d+)$
	(.*\D)(\d+)$
d2051 6
a2056 6
	printf "%-12s ", $pat;
	if ( /$pat/ ) {
	    print "<$1> <$2>\n";
	} else {
	    print "FAIL\n";
	}
d2082 2
a2083 2
    if ( /^\D*(?!123)/ ) {		# Wrong!
	print "Yup, no 123 in $_\n";
d2115 1
a2115 1
try to match C<(?!123> with "123", which fails.  But because
d2163 1
a2163 1
which does not backtrack (see L<C<< (?>pattern) >>>).  Note also that
d2168 1
a2168 1
following match, see L<C<< (?>pattern) >>>.
d2184 1
a2184 1
string, so the pattern  C<blurfl> would match "blurfl" in the target
d2213 1
a2213 1
of octal digits, matches the character whose coded character set value
d2215 1
a2215 1
matches the character whose numeric value is I<nn>. The expression \cI<x>
d2223 1
a2223 1
("(", "[", or the beginning of the pattern) up to the first "|", and
d2225 1
a2225 1
pattern delimiter.  That's why it's common practice to include
d2243 1
a2243 1
\I<n>.  Subpatterns are numbered based on the left to right order
d2246 1
a2246 1
the rules for that subpattern.  Therefore, C<(0|0x)\d*\s\1\d*> will
d2257 2
a2258 1
This is grandfathered for the RHS of a substitute to avoid shocking the
d2266 1
a2266 1
    s/(\d+)/ \1 + 1 /eg;    	# causes warning under -w
d2307 1
a2307 1
    @@chars = split //, $string;		  # // is not magic in split
d2323 3
a2325 4
   m{   (?: NON_ZERO_LENGTH )*
      |
        (?: ZERO_LENGTH )?
    }x;
d2327 24
a2350 1
The higher level-loops preserve an additional state between iterations:
d2381 1
a2381 1
patterns using combining operators C<ST>, C<S|T>, C<S*> etc
d2410 1
a2410 1
If C<A> is better match for C<S> than C<A'>, C<AB> is a better
d2414 1
a2414 1
C<B> is better match for C<T> than C<B'>.
d2461 1
a2461 1
the result of EXPR, or the pattern contained by capture buffer PARNO.
d2478 7
a2484 2
Overloaded constants (see L<overload>) provide a simple way to extend
the functionality of the RE engine.
d2507 1
a2507 1
		  'Y|' => qr/(?=\S)(?<!\S)|(?!\S)(?<=\S)/ );
d2530 1
a2530 1
=head1 PCRE/Python Support
d2532 1
a2532 1
As of Perl 5.10.0, Perl supports several Python/PCRE specific extensions
d2534 1
a2534 1
Perl specific syntax, the following are also accepted:
d2540 1
a2540 1
Define a named capture buffer. Equivalent to C<< (?<NAME>pattern) >>.
d2544 1
a2544 1
Backreference to a named capture buffer. Equivalent to C<< \g{NAME} >>.
d2548 1
a2548 1
Subroutine call to a named capture buffer. Equivalent to C<< (?&NAME) >>.
d2554 1
a2554 8
There are numerous problems with case insensitive matching of characters
outside the ASCII range, especially with those whose folds are multiple
characters, such as ligatures like C<LATIN SMALL LIGATURE FF>.

In a bracketed character class with case insensitive matching, ranges only work
for ASCII characters.  For example,
C<m/[\N{CYRILLIC CAPITAL LETTER A}-\N{CYRILLIC CAPITAL LETTER YA}]/i>
doesn't match all the Russian upper and lower case letters.
d2556 2
a2557 1
Many regular expression constructs don't work on EBCDIC platforms.
@


1.14
log
@Merge in some local changes that got lost.
@
text
@d44 1
a44 1
Used together, as /ms, they let the "." match any character whatsoever,
d65 1
a65 1
Preserve the string matched such that ${^PREMATCH}, {$^MATCH}, and
d85 1
a85 1
the regular expression parser to ignore whitespace that is neither
d92 2
a93 2
escape them (using backslashes or C<\Q...\E>) or encode them using octal
or hex escapes.  Taken together, these features go a long way towards
d98 11
a108 1
a C<\Q...\E> stays unaffected by C</x>.
d169 1
a169 1
to integral values less than a preset limit defined when perl is built.
d226 1
a226 1
X<\0> X<\c> X<\N> X<\x>
d239 1
d259 1
a259 3
X<\w> X<\W> X<\s> X<\S> X<\d> X<\D> X<\X> X<\p> X<\P> X<\C>
X<\g> X<\k> X<\N> X<\K> X<\v> X<\V> X<\h> X<\H>
X<word> X<whitespace> X<character class> X<backreference>
d269 1
a269 2
    \X	     Match eXtended Unicode "combining character sequence",
             equivalent to (?>\PM\pM*)
d282 1
d289 9
a297 23
A C<\w> matches a single alphanumeric character (an alphabetic
character, or a decimal digit) or C<_>, not a whole word.  Use C<\w+>
to match a string of Perl-identifier characters (which isn't the same
as matching an English word).  If C<use locale> is in effect, the list
of alphabetic characters generated by C<\w> is taken from the current
locale.  See L<perllocale>.  You may use C<\w>, C<\W>, C<\s>, C<\S>,
C<\d>, and C<\D> within character classes, but they aren't usable
as either end of a range. If any of them precedes or follows a "-",
the "-" is understood literally. If Unicode is in effect, C<\s> matches
also "\x{85}", "\x{2028}", and "\x{2029}". See L<perlunicode> for more
details about C<\pP>, C<\PP>, C<\X> and the possibility of defining
your own C<\p> and C<\P> properties, and L<perluniintro> about Unicode
in general.
X<\w> X<\W> X<word>

C<\R> will atomically match a linebreak, including the network line-ending
"\x0D\x0A".  Specifically, X<\R> is exactly equivalent to

  (?>\x0D\x0A?|[\x0A-\x0C\x85\x{2028}\x{2029}])

B<Note:> C<\R> has no special meaning inside of a character class;
use C<\v> instead (vertical whitespace).
X<\R>
d313 1
a313 132
The available classes and their backslash equivalents (if available) are
as follows:
X<character class>
X<alpha> X<alnum> X<ascii> X<blank> X<cntrl> X<digit> X<graph>
X<lower> X<print> X<punct> X<space> X<upper> X<word> X<xdigit>

    alpha
    alnum
    ascii
    blank		[1]
    cntrl
    digit       \d
    graph
    lower
    print
    punct
    space       \s	[2]
    upper
    word        \w	[3]
    xdigit

=over

=item [1]

A GNU extension equivalent to C<[ \t]>, "all horizontal whitespace".

=item [2]

Not exactly equivalent to C<\s> since the C<[[:space:]]> includes
also the (very rare) "vertical tabulator", "\cK" or chr(11) in ASCII.

=item [3]

A Perl extension, see above.

=back

For example use C<[:upper:]> to match all the uppercase characters.
Note that the C<[]> are part of the C<[::]> construct, not part of the
whole character class.  For example:

    [01[:alpha:]%]

matches zero, one, any alphabetic character, and the percent sign.

The following equivalences to Unicode \p{} constructs and equivalent
backslash character classes (if available), will hold:
X<character class> X<\p> X<\p{}>

    [[:...:]]	\p{...}		backslash

    alpha       IsAlpha
    alnum       IsAlnum
    ascii       IsASCII
    blank
    cntrl       IsCntrl
    digit       IsDigit        \d
    graph       IsGraph
    lower       IsLower
    print       IsPrint		(but see [2] below)
    punct       IsPunct		(but see [3] below)
    space       IsSpace
                IsSpacePerl    \s
    upper       IsUpper
    word        IsWord         \w
    xdigit      IsXDigit

For example C<[[:lower:]]> and C<\p{IsLower}> are equivalent.

However, the equivalence between C<[[:xxxxx:]]> and C<\p{IsXxxxx}>
is not exact.

=over 4

=item [1]

If the C<utf8> pragma is not used but the C<locale> pragma is, the
classes correlate with the usual isalpha(3) interface (except for
"word" and "blank").

But if the C<locale> or C<encoding> pragmas are not used and
the string is not C<utf8>, then C<[[:xxxxx:]]> (and C<\w>, etc.)
will not match characters 0x80-0xff; whereas C<\p{IsXxxxx}> will
force the string to C<utf8> and can match these characters
(as Unicode).

=item [2]

C<\p{IsPrint}> matches characters 0x09-0x0d but C<[[:print:]]> does not.

=item [3]

C<[[:punct::]]> matches the following but C<\p{IsPunct}> does not,
because they are classed as symbols (not punctuation) in Unicode.

=over 4

=item C<$>

Currency symbol

=item C<+> C<< < >> C<=> C<< > >> C<|> C<~>

Mathematical symbols

=item C<^> C<`>

Modifier symbols (accents)

=back

=back

The other named classes are:

=over 4

=item cntrl
X<cntrl>

Any control character.  Usually characters that don't produce output as
such but instead control the terminal somehow: for example newline and
backspace are control characters.  All characters with ord() less than
32 are usually classified as control characters (assuming ASCII,
the ISO Latin character sets, and Unicode), as is the character with
the ord() value of 127 (C<DEL>).

=item graph
X<graph>

Any alphanumeric or punctuation (special) character.
d315 14
a328 17
=item print
X<print>

Any alphanumeric or punctuation (special) character or the space character.

=item punct
X<punct>

Any punctuation (special) character.

=item xdigit
X<xdigit>

Any hexadecimal digit.  Though this may feel silly ([0-9A-Fa-f] would
work just fine) it is included for completeness.

=back
d331 1
a331 4
with a '^'. This is a Perl extension.  For example:
X<character class, negation>

    POSIX         traditional  Unicode
d333 1
a333 6
    [[:^digit:]]    \D         \P{IsDigit}
    [[:^space:]]    \S         \P{IsSpace}
    [[:^word:]]	    \W         \P{IsWord}

Perl respects the POSIX standard in that POSIX character classes are
only supported within a character class.  The POSIX character classes
d337 3
d417 3
d606 4
d667 18
a684 2
Note: as of Perl 5.10.0, branch resets interfere with the contents of
the C<%+> hash, that holds named captures. Consider using C<%-> instead.
a864 7
Due to an unfortunate implementation issue, the Perl code contained in these
blocks is treated as a compile time closure that can have seemingly bizarre
consequences when used with lexically scoped variables inside of subroutines
or loops.  There are various workarounds for this, including simply using
global variables instead.  If you are using this construct and strange results
occur then check for the use of lexically scoped variables.

d886 9
a894 3
Because Perl's regex engine is currently not re-entrant, interpolated
code may not invoke the regex engine either directly with C<m//> or C<s///>),
or indirectly with functions such as C<split>.
d936 6
d1251 1
a1251 1
has the special behaviour that when executed it sets the current packages'
d1372 1
a1372 2
C<(*MARK)> patterns are allowed, and the NAME portion is optional and may
be duplicated.
d2055 11
@


1.13
log
@Merge in perl 5.10.1
@
text
@d215 1
a215 1
X<\t> X<\n> X<\r> X<\f> X<\e> X<\a> X<\l> X<\u> X<\L> X<\U> X<\E> X<\Q>
@


1.12
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@d105 1
a105 1
The patterns used in Perl pattern matching evolved from the ones supplied in
d215 1
a215 1
X<\t> X<\r> X<\f> X<\e> X<\a> X<\l> X<\u> X<\L> X<\U> X<\E> X<\Q>
d261 1
a261 1
             equivalent to (?:\PM\pM*)
d378 2
a379 2
    print       IsPrint
    punct       IsPunct
d383 1
a383 1
    word        IsWord
d388 7
d398 33
@


1.11
log
@Remove index entries for \n since nroff will try to expand this.
No one uses the index entries anyway...
@
text
@d8 1
a8 1
This page describes the syntax of regular expressions in Perl.  
d19 3
d25 1
a25 1
is used by Perl are detailed in L<perlop/"Regexp Quote-Like Operators"> and 
a29 9
=item i
X</i> X<regex, case-insensitive> X<regexp, case-insensitive>
X<regular expression, case-insensitive>

Do case-insensitive pattern matching.

If C<use locale> is in effect, the case map is taken from the current
locale.  See L<perllocale>.

d44 1
a44 5
The C</s> and C</m> modifiers both override the C<$*> setting.  That
is, no matter what C<$*> contains, C</s> without C</m> will force
"^" to match only at the beginning of the string and "$" to match
only at the end (or just before a newline at the end) of the string.
Together, as /ms, they let the "." match any character whatsoever,
d48 9
d62 15
d91 8
a98 7
class, where they are unaffected by C</x>), that you'll either have to 
escape them or encode them using octal or hex escapes.  Taken together,
these features go a long way towards making Perl's regular expressions
more readable.  Note that you have to be careful not to include the
pattern delimiter in the comment--perl has no way of knowing you did
not intend to close the pattern early.  See the C-comment deletion code
in L<perlop>.
d103 3
a105 1
The patterns used in Perl pattern matching derive from supplied in
d131 2
a132 1
newline within the string, and "$" will match before any newline.  At the
d135 1
a135 1
but this practice is now deprecated.)
d140 1
a140 3
the string is a single line--even if it isn't.  The C</s> modifier also
overrides the setting of C<$*>, in case you have some (badly behaved) older
code that sets it in another module.
d143 2
d157 2
a158 2
is not optional.)  The "*" modifier is equivalent to C<{0,}>, the "+"
modifier to C<{1,}>, and the "?" modifier to C<{0,1}>.  n and m are limited
d170 1
a170 1
X<metacharacter> X<greedy> X<greedyness>
d173 39
a211 6
    *?	   Match 0 or more times
    +?	   Match 1 or more times
    ??	   Match 0 or 1 time
    {n}?   Match exactly n times
    {n,}?  Match at least n times
    {n,m}? Match at least n but not more than m times
d215 1
a215 1
X<\t> X<\r> X<\f> X<\a> X<\l> X<\u> X<\L> X<\U> X<\E> X<\Q>
d224 5
a228 5
    \033	octal char (think of a PDP-11)
    \x1B	hex char
    \x{263a}	wide hex char         (Unicode SMILEY)
    \c[		control char
    \N{name}	named char
d245 2
a247 1
X<metacharacter>
d249 2
a250 1
X<word> X<whitespace>
d252 27
a278 14
    \w	Match a "word" character (alphanumeric plus "_")
    \W	Match a non-"word" character
    \s	Match a whitespace character
    \S	Match a non-whitespace character
    \d	Match a digit character
    \D	Match a non-digit character
    \pP	Match P, named property.  Use \p{Prop} for longer names.
    \PP	Match non-P
    \X	Match eXtended Unicode "combining character sequence",
        equivalent to (?:\PM\pM*)
    \C	Match a single C char (octet) even under Unicode.
	NOTE: breaks up characters into their UTF-8 bytes,
	so you may end up with malformed pieces of UTF-8.
	Unsupported in lookbehind.
d286 7
a292 6
C<\d>, and C<\D> within character classes, but if you try to use them
as endpoints of a range, that's not a range, the "-" is understood
literally.  If Unicode is in effect, C<\s> matches also "\x{85}",
"\x{2028}, and "\x{2029}", see L<perlunicode> for more details about
C<\pP>, C<\PP>, and C<\X>, and L<perluniintro> about Unicode in general.
You can define your own C<\p> and C<\P> properties, see L<perlunicode>.
d295 9
d309 11
a319 2
is also available.  The available classes and their backslash
equivalents (if available) are as follows:
d348 1
a348 1
also the (very rare) "vertical tabulator", "\ck", chr(11).
d362 1
a362 1
matches zero, one, any alphabetic character, and the percentage sign.
d368 1
a368 1
    [:...:]	\p{...}		backslash
d373 1
a373 1
    blank       IsSpace
d386 1
a386 1
For example C<[:lower:]> and C<\p{IsLower}> are equivalent.
d392 1
a392 1
The assumedly non-obviously named classes are:
d402 1
a402 1
32 are most often classified as control characters (assuming ASCII,
d433 1
a433 1
    POSIX	traditional Unicode
d435 3
a437 3
    [:^digit:]      \D      \P{IsDigit}
    [:^space:]	    \S	    \P{IsSpace}
    [:^word:]	    \W	    \P{IsWord}
d444 2
d453 1
a453 1
    \B	Match a non-(word boundary)
d479 4
a482 5
an lvalue: see L<perlfunc/pos>. Currently C<\G> is only fully
supported when anchored to the start of the pattern; while it
is permitted to use it elsewhere, as in C</(?<=\G..)./g>, some
such uses (C</.\G/g>, for example) currently cause problems, and
it is recommended that you avoid such usage for now.
d485 20
a504 4
The bracketing construct C<( ... )> creates capture buffers.  To
refer to the digit'th buffer use \<digit> within the
match.  Outside the match use "$" instead of "\".  (The
\<digit> notation works in certain circumstances outside 
d515 5
a519 5
a horizontal tab under ASCII.)  Perl resolves this 
ambiguity by interpreting \10 as a backreference only if at least 10 
left parentheses have opened before it.  Likewise \11 is a 
backreference only if at least 11 left parentheses have opened 
before it.  And so on.  \1 through \9 are always interpreted as 
d522 38
d564 8
a571 3
     if (/(.)\1/) {                 # find first doubled char
         print "'$1' is the first doubled character\n";
     }
d587 1
a587 1
variable. 
d598 1
a598 1
B<NOTE>: failed matches in Perl do not reset the match variables,
d617 9
d679 1
a679 1
=item C<(?imsx-imsx)>
d686 4
a689 4
configuration file, read in as an argument, are specified in a table
somewhere, etc.  Consider the case that some of which want to be case
sensitive and some do not.  The case insensitive ones need to include
merely C<(?i)> at the front of the pattern.  For example:
d692 1
a692 1
    if ( /$pattern/i ) { } 
d697 1
a697 1
    if ( /$pattern/ ) { } 
d703 8
a710 3
will match a repeated (I<including the case>!) word C<blah> in any
case, assuming C<x> modifier, and no C<i> modifier outside this
group.
d730 1
a730 1
C<(?imsx-imsx)>.  For example, 
d738 40
d804 2
a805 2
=item C<(?<=pattern)>
X<(?<=)> X<look-behind, positive> X<lookbehind, positive>
d811 17
d835 55
d894 3
a896 1
highly experimental, and may be changed or deleted without notice.
d919 1
a919 1
  m< 
d922 1
a922 1
       a 
d926 1
a926 1
     )*  
d932 1
a932 1
will set C<$res = 4>.  Note that after the match, $cnt returns to the globally
d946 7
d957 1
a957 1
L<perlop/"qr/STRING/imosx">).  
d959 1
a959 1
This restriction is because of the wide-spread and remarkably convenient
d974 4
a980 1
X<regex, recursive> X<regexp, recursive> X<regular expression, recursive>
d983 3
a985 3
highly experimental, and may be changed or deleted without notice.
A simplified version of the syntax may be introduced for commonly
used idioms.
d990 9
a998 1
if it were inserted instead of this construct.
d1015 195
d1211 1
a1211 4
X<backtrack> X<backtracking>

B<WARNING>: This extended regular expression feature is considered
highly experimental, and may be changed or deleted without notice.
d1241 3
a1243 3
	  ( 
	    [^()]+		# x+
          | 
d1246 1
a1246 1
       \) 
d1260 4
a1263 4
    m{ \( 
	  ( 
	    (?> [^()]+ )	# change x+ above to (?> x+ )
          | 
d1266 1
a1266 1
       \) 
d1301 245
a1545 2
=item C<(?(condition)yes-pattern|no-pattern)>
X<(?()>
d1547 2
a1548 1
=item C<(?(condition)yes-pattern)>
d1550 5
a1554 2
B<WARNING>: This extended regular expression feature is considered
highly experimental, and may be changed or deleted without notice.
d1556 3
a1558 3
Conditional expression.  C<(condition)> should be either an integer in
parentheses (which is valid if the corresponding pair of parentheses
matched), or look-ahead/look-behind/evaluate zero-width assertion.
d1560 1
a1560 1
For example:
d1562 3
a1564 4
    m{ ( \( )? 
       [^()]+ 
       (?(1) \) ) 
     }x
d1566 1
a1566 2
matches a chunk of non-parentheses, possibly included in parentheses
themselves.
d1576 1
a1576 1
see L<Combining pieces together>.
d1580 1
a1580 1
by all regular expression quantifiers, namely C<*>, C<*?>, C<+>,
d1628 1
a1628 1
Here's another example: let's say you'd like to match a number at the end
d1753 1
a1753 1
B<WARNING>: particularly complicated regular expressions can take
d1755 1
a1755 1
ways they can use backtracking to try match.  For example, without
d1772 1
a1772 1
the tail match, since they are in "logical" context: only 
d1787 6
a1792 3
character; "\\" matches a "\").  A series of characters matches that
series of characters in the target string, so the pattern C<blurfl>
would match "blurfl" in the target string.
d1795 1
a1795 1
in C<[]>, which will match any one character from the list.  If the
d1805 4
a1808 4
specifies a class containing twenty-six characters, even on EBCDIC
based coded character sets.)  Also, if you try to use the character 
classes C<\w>, C<\W>, C<\s>, C<\S>, C<\d>, or C<\D> as endpoints of 
a range, that's not a range, the "-" is understood literally.
d1813 1
a1813 1
that begin from and end at either alphabets of equal case ([a-e],
d1820 4
a1823 4
of octal digits, matches the character whose coded character set value 
is I<nnn>.  Similarly, \xI<nn>, where I<nn> are hexadecimal digits, 
matches the character whose numeric value is I<nn>. The expression \cI<x> 
matches the character control-I<x>.  Finally, the "." metacharacter 
d1858 1
a1858 1
=head2 Warning on \1 vs $1
d1883 1
a1883 1
=head2 Repeated patterns matching zero-length substring
d1896 1
a1896 1
The C<o?> can match at the beginning of C<'foo'>, and since the position
d1898 1
a1898 1
because of the C<*> modifier.  Another common way to create a similar cycle
d1918 1
a1918 1
loops given by the greedy modifiers C<*+{}>, and for higher-level
d1927 1
a1927 1
is made equivalent to 
d1929 3
a1931 3
   m{   (?: NON_ZERO_LENGTH )* 
      | 
        (?: ZERO_LENGTH )? 
d1935 1
a1935 1
whether the last match was zero-length.  To break the loop, the following 
d1937 1
a1937 1
This prohibition interacts with backtracking (see L<"Backtracking">), 
d1947 1
a1947 1
match given by non-greedy C<??> is the zero-length match, and the I<second 
d1951 1
a1951 1
Similarly, for repeated C<m/()/g> the second-best match is the match at the 
d1959 1
a1959 1
=head2 Combining pieces together
d1992 1
a1992 1
which can be matched by C<T>. 
d2042 1
a2042 1
=item C<(??{ EXPR })>
d2045 1
a2045 1
the result of EXPR.
d2060 1
a2060 1
=head2 Creating custom RE engines
d2066 1
a2066 1
matches at boundary between whitespace characters and non-whitespace
d2085 1
a2085 1
    my %rules = ( '\\' => '\\\\', 
d2089 1
a2089 1
      $re =~ s{ 
d2092 1
a2092 1
              { $rules{$1} or invalid($re,$1) }sgex; 
d2108 22
@


1.10
log
@merge in perl 5.8.8
@
text
@d164 1
a164 1
X<\t> X<\n> X<\r> X<\f> X<\a> X<\l> X<\u> X<\L> X<\U> X<\E> X<\Q>
@


1.9
log
@sync in-tree perl with 5.8.6
@
text
@d2 1
d28 2
d37 1
d44 2
d59 1
d84 1
d96 3
d118 1
d125 1
d128 1
d152 2
d164 2
d195 3
d226 1
d229 1
d235 3
d258 1
a258 1
A GNU extension equivalent to C<[ \t]>, `all horizontal whitespace'.
d263 1
a263 1
also the (very rare) `vertical tabulator', "\ck", chr(11).
d281 1
d288 1
a288 1
    blank	IsSpace
d305 1
a305 1
`word' and `blank').
d312 1
d322 1
d327 1
d332 1
d337 1
d346 1
d360 4
d384 1
d397 1
d406 2
d443 1
d449 3
d454 1
a454 1
which makes easier to write code that tests for a series of more
d470 1
d518 1
d526 1
d554 1
d580 1
d586 1
d606 1
d613 1
d620 1
d695 3
d725 1
d819 1
d843 1
d969 2
a970 2
    $x = 'ABC123' ;
    $y = 'ABC445' ;
d972 2
a973 2
    print "1: got $1\n" if $x =~ /^(ABC)(?!123)/ ;
    print "2: got $1\n" if $y =~ /^(ABC)(?!123)/ ;
d975 2
a976 2
    print "3: got $1\n" if $x =~ /^(\D*)(?!123)/ ;
    print "4: got $1\n" if $y =~ /^(\D*)(?!123)/ ;
d1011 2
a1012 2
    print "5: got $1\n" if $x =~ /^(\D*)(?=\d)(?!123)/ ;
    print "6: got $1\n" if $y =~ /^(\D*)(?=\d)(?!123)/ ;
d1050 1
d1335 1
a1335 1
matches at boundary between white-space characters and non-whitespace
d1352 3
a1354 1
    my %rules = ( '\\' => '\\', 
@


1.8
log
@merge local changes into perl-5.8.3
@
text
@d204 1
a204 1
You can define your own C<\p> and C<\P> propreties, see L<perlunicode>.
d585 1
a585 1
the current position of matching withing this string.
@


1.7
log
@Resolve conflicts for perl 5.8.2, remove old files, and add OpenBSD-specific scaffolding
@
text
@d583 4
@


1.6
log
@Resolve conflicts, remove old files, merge local changes
@
text
@d9 1
a9 1
if you haven't used regular expressions before, a quick-start
d124 2
a125 1
as a regular character.)  The "*" modifier is equivalent to C<{0,}>, the "+"
d191 1
d403 1
a403 1
The numbered variables ($1, $2, $3, etc.) and the related punctuation
d408 4
d571 1
a571 1
This zero-width assertion evaluate any embedded Perl code.  It
d634 1
a634 1
module.  See L<perlsec> for details about both these mechanisms.
@


1.5
log
@merge in perl 5.6.1 with our local changes
@
text
@d7 10
a16 4
This page describes the syntax of regular expressions in Perl.  For a
description of how to I<use> regular expressions in matching
operations, plus various examples of the same, see discussions
of C<m//>, C<s///>, C<qr//> and C<??> in L<perlop/"Regexp Quote-Like Operators">.
d186 11
a196 8
        equivalent to C<(?:\PM\pM*)>
    \C	Match a single C char (octet) even under utf8.

A C<\w> matches a single alphanumeric character or C<_>, not a whole word.
Use C<\w+> to match a string of Perl-identifier characters (which isn't 
the same as matching an English word).  If C<use locale> is in effect, the
list of alphabetic characters generated by C<\w> is taken from the
current locale.  See L<perllocale>.  You may use C<\w>, C<\W>, C<\s>, C<\S>,
d198 5
a202 2
as endpoints of a range, that's not a range, the "-" is understood literally.
See L<utf8> for details about C<\pP>, C<\PP>, and C<\X>.
d226 16
a241 4
  [1] A GNU extension equivalent to C<[ \t]>, `all horizontal whitespace'.
  [2] Not I<exactly equivalent> to C<\s> since the C<[[:space:]]> includes
      also the (very rare) `vertical tabulator', "\ck", chr(11).
  [3] A Perl extension. 
d251 4
a254 3
If the C<utf8> pragma is used, the following equivalences to Unicode
\p{} constructs and equivalent backslash character classes (if available),
will hold:
d288 2
a289 1
the ISO Latin character sets, and Unicode).
d297 1
a297 1
Any alphanumeric or punctuation (special) character or space.
d313 1
a313 1
    POSIX	trad. Perl  utf8 Perl
d319 4
a322 2
The POSIX character classes [.cc.] and [=cc=] are recognized but
B<not> supported and trying to use them will cause an error.
d352 5
a356 1
an lvalue.  See L<perlfunc/pos>.
d395 5
a399 2
everything before the matched string.  And C<$'> returns everything
after the matched string.
d402 1
a402 1
set (C<$+>, C<$&>, C<$`>, and C<$'>) are all dynamically scoped
d474 8
a481 6
One or more embedded pattern-match modifiers.  This is particularly
useful for dynamic patterns, such as those read in from a configuration
file, read in as an argument, are specified in a table somewhere,
etc.  Consider the case that some of which want to be case sensitive
and some do not.  The case insensitive ones need to include merely
C<(?i)> at the front of the pattern.  For example:
d491 1
a491 2
Letters after a C<-> turn those modifiers off.  These modifiers are
localized inside an enclosing group (if any).  For example,
d569 8
d723 1
a723 1
C<"matches the null string many times">):
d831 1
a831 1
of a string, and you also want to keep the preceding part the match.
d887 1
a887 1
tricker.  Imagine you'd like to find a sequence of non-digits not
d897 1
a897 1
why it that pattern matches, contrary to popular expectations:
d1064 1
a1064 1
PerlThink, the righthand side of a C<s///> is a double-quoted string.  C<\1> in
d1315 4
@


1.4
log
@perl-5.6.0 + local changes
@
text
@d43 1
a43 1
while yet allowing "^" and "$" to match, respectively, just after
d172 1
a172 1
    \W	Match a non-word character
d183 1
a183 1
A C<\w> matches a single alphanumeric character, not a whole word.
d202 1
d209 1
a209 1
    space       \s
d211 1
a211 1
    word        \w
d214 5
d220 2
a221 2
Note that the C<[]> are part of the C<[::]> construct, not part of the whole
character class.  For example:
d225 1
a225 1
matches one, zero, any alphabetic character, and the percentage sign.
d228 2
a229 1
\p{} constructs hold:
d234 1
d236 1
a236 1
    digit       IsDigit
d242 1
d250 2
a251 2
classes correlate with the isalpha(3) interface (except for `word',
which is a Perl extension, mirroring C<\w>).
d262 2
a263 1
32 are most often classified as control characters.
d267 1
a267 1
Any alphanumeric or punctuation character.
d271 1
a271 1
Any alphanumeric or punctuation character or space.
d275 1
a275 1
Any punctuation character.
d279 1
a279 1
Any hexadecimal digit.  Though this may feel silly (/0-9a-f/i would
d336 8
a343 6
\011, etc.  (Recall that 0 means octal, so \011 is the 9'th ASCII
character, a tab.)  Perl resolves this ambiguity by interpreting
\10 as a backreference only if at least 10 left parentheses have
opened before it.  Likewise \11 is a backreference only if at least
11 left parentheses have opened before it.  And so on.  \1 through
\9 are always interpreted as backreferences."
d367 1
a367 1
set (C<<$+>, C<$&>, C<$`>, and C<$'>) are all dynamically scoped
d392 1
a392 1
use for a pattern. Simply quote all non-alphanumeric characters:
d396 1
d689 1
a689 1
its appearence, C<#[ \t]*> I<is not> the correct subexpression to match
d917 1
a917 1
    'aaaaaaaaaaaa' =~ /((a{0,5}){0,5}){0,5}[c]/
d919 6
a924 2
And if you used C<*>'s instead of limiting it to 0 through 5 matches,
then it would take forever--or until you ran out of stack space.
d959 4
a962 4
specifies a class containing twenty-six characters.)
Also, if you try to use the character classes C<\w>, C<\W>, C<\s>,
C<\S>, C<\d>, or C<\D> as endpoints of a range, that's not a range,
the "-" is understood literally.
d974 5
a978 5
of octal digits, matches the character whose ASCII value is I<nnn>.
Similarly, \xI<nn>, where I<nn> are hexadecimal digits, matches the
character whose ASCII value is I<nn>. The expression \cI<x> matches the
ASCII character control-I<x>.  Finally, the "." metacharacter matches any
character except "\n" (unless you use C</s>).
d1100 1
a1100 1
results in C<"<><b><><a><><r><>">.  At each position of the string the best
d1140 1
a1140 1
=over
d1281 2
@


1.3
log
@perl5.005_03 (stock)
@
text
@d9 1
a9 1
operations, plus various examples of the same, see discussion
d12 1
a12 1
The matching operations can have various modifiers.  The modifiers
d14 2
a15 2
are listed below.  For the modifiers that alter the way a regular expression
is used by Perl, see L<perlop/"Regexp Quote-Like Operators"> and 
d30 2
a31 2
at only the very start or end of the string to the start or end of any
line anywhere within the string,
d36 1
a36 1
whatsoever, even a newline, which it normally would not match.
d38 7
a44 6
The C</s> and C</m> modifiers both override the C<$*> setting.  That is, no matter
what C<$*> contains, C</s> without C</m> will force "^" to match only at the
beginning of the string and "$" to match only at the end (or just before a
newline at the end) of the string.  Together, as /ms, they let the "." match
any character whatsoever, while yet allowing "^" and "$" to match,
respectively, just after and just before newlines within the string.
d53 1
a53 1
in question might not actually be a slash.  In fact, any of these
d55 1
a55 1
the new C<(?...)> construct.  See below.
d63 1
a63 1
whitespace or C<#> characters in the pattern (outside of a character
d74 5
a78 5
The patterns used in pattern matching are regular expressions such as
those supplied in the Version 8 regex routines.  (In fact, the
routines are derived (distantly) from Henry Spencer's freely
redistributable reimplementation of the V8 routines.)
See L<Version 8 Regular Expressions> for details.
d91 3
a93 3
By default, the "^" character is guaranteed to match at only the
beginning of the string, the "$" character at only the end (or before the
newline at the end) and Perl does certain optimizations with the
d102 1
a102 1
To facilitate multi-line substitutions, the "." character never matches a
d124 1
a124 1
	$_ **= $_ , / {$_} / for 2 .. 42;
d150 1
d152 1
d161 2
a162 1
and C<\U> is taken from the current locale.  See L<perllocale>.
d177 66
d244 41
a284 6
A C<\w> matches a single alphanumeric character, not a whole
word.  To match a word you'd need to say C<\w+>.  If C<use locale> is in
effect, the list of alphabetic characters generated by C<\w> is taken
from the current locale.  See L<perllocale>. You may use C<\w>, C<\W>,
C<\s>, C<\S>, C<\d>, and C<\D> within character classes (though not as
either end of a range).
d293 2
a294 1
    \G	Match only where previous m//g left off (works only with /g)
d296 36
a331 11
A word boundary (C<\b>) is defined as a spot between two characters that
has a C<\w> on one side of it and a C<\W> on the other side of it (in
either order), counting the imaginary characters off the beginning and
end of the string as matching a C<\W>.  (Within character classes C<\b>
represents backspace rather than a word boundary.)  The C<\A> and C<\Z> are
just like "^" and "$", except that they won't match multiple times when the
C</m> modifier is used, while "^" and "$" will match at every internal line
boundary.  To match the actual end of the string, not ignoring newline,
you can use C<\z>.  The C<\G> assertion can be used to chain global
matches (using C<m//g>), as described in
L<perlop/"Regexp Quote-Like Operators">.
d333 1
a333 28
It is also useful when writing C<lex>-like scanners, when you have several
patterns that you want to match against consequent substrings of your
string, see the previous reference.
The actual location where C<\G> will match can also be influenced
by using C<pos()> as an lvalue.  See L<perlfunc/pos>.

When the bracketing construct C<( ... )> is used, \E<lt>digitE<gt> matches the
digit'th substring.  Outside of the pattern, always use "$" instead of "\"
in front of the digit.  (While the \E<lt>digitE<gt> notation can on rare occasion work
outside the current pattern, this should not be relied upon.  See the
WARNING below.) The scope of $E<lt>digitE<gt> (and C<$`>, C<$&>, and C<$'>)
extends to the end of the enclosing BLOCK or eval string, or to the next
successful pattern match, whichever comes first.  If you want to use
parentheses to delimit a subpattern (e.g., a set of alternatives) without
saving it as a subpattern, follow the ( with a ?:.

You may have as many parentheses as you wish.  If you have more
than 9 substrings, the variables $10, $11, ... refer to the
corresponding substring.  Within the pattern, \10, \11, etc. refer back
to substrings if there have been at least that many left parentheses before
the backreference.  Otherwise (for backward compatibility) \10 is the
same as \010, a backspace, and \11 the same as \011, a tab.  And so
on.  (\1 through \9 are always backreferences.)

C<$+> returns whatever the last bracket match matched.  C<$&> returns the
entire matched string.  (C<$0> used to return the same thing, but not any
more.)  C<$`> returns everything before the matched string.  C<$'> returns
everything after the matched string.  Examples:
d337 5
a341 1
    if (/Time: (..):(..):(..)/) {
d347 34
a380 20
Once perl sees that you need one of C<$&>, C<$`> or C<$'> anywhere in
the program, it has to provide them on each and every pattern match.
This can slow your program down.  The same mechanism that handles
these provides for the use of $1, $2, etc., so you pay the same price
for each pattern that contains capturing parentheses. But if you never
use $&, etc., in your script, then patterns I<without> capturing
parentheses won't be penalized. So avoid $&, $', and $` if you can,
but if you can't (and some algorithms really appreciate them), once
you've used them once, use them at will, because you've already paid
the price.  As of 5.005, $& is not so costly as the other two.

Backslashed metacharacters in Perl are
alphanumeric, such as C<\b>, C<\w>, C<\n>.  Unlike some other regular
expression languages, there are no backslashed symbols that aren't
alphanumeric.  So anything that looks like \\, \(, \), \E<lt>, \E<gt>,
\{, or \} is always interpreted as a literal character, not a
metacharacter.  This was once used in a common idiom to disable or
quote the special meanings of regular expression metacharacters in a
string that you want to use for a pattern. Simply quote all
non-alphanumeric characters:
d384 2
a385 2
Now it is much more common to see either the quotemeta() function or
the C<\Q> escape sequence used to disable all metacharacters' special
d390 24
a413 5
Perl defines a consistent extension syntax for regular expressions.
The syntax is a pair of parentheses with a question mark as the first
thing within the parentheses (this was a syntax error in older
versions of Perl).  The character after the question mark gives the
function of the extension.  Several extensions are already supported:
d419 2
a420 2
A comment.  The text is ignored.  If the C</x> switch is used to enable
whitespace formatting, a simple C<#> will suffice.  Note that perl closes
d424 26
d463 2
a464 1
but doesn't spit out extra fields.
d466 2
a467 2
The letters between C<?> and C<:> act as flags modifiers, see
L<C<(?imsx-imsx)>>.  In particular,
d471 1
a471 1
is equivalent to more verbose
d477 1
a477 1
A zero-width positive lookahead assertion.  For example, C</\w+(?=\t)/>
d482 1
a482 1
A zero-width negative lookahead assertion.  For example C</foo(?!bar)/>
d484 2
a485 2
however that lookahead and lookbehind are NOT the same thing.  You cannot
use this for lookbehind.
d497 1
a497 1
For lookbehind see below.
d499 1
a499 1
=item C<(?E<lt>=pattern)>
d501 3
a503 3
A zero-width positive lookbehind assertion.  For example, C</(?E<lt>=\t)\w+/>
matches a word following a tab, without including the tab in C<$&>.
Works only for fixed-width lookbehind.
d507 3
a509 3
A zero-width negative lookbehind assertion.  For example C</(?<!bar)foo/>
matches any occurrence of "foo" that isn't following "bar".  
Works only for fixed-width lookbehind.
d513 10
a522 7
Experimental "evaluate any Perl code" zero-width assertion.  Always
succeeds.  C<code> is not interpolated.  Currently the rules to
determine where the C<code> ends are somewhat convoluted.

The C<code> is properly scoped in the following sense: if the assertion
is backtracked (compare L<"Backtracking">), all the changes introduced after
C<local>isation are undone, so
d538 2
a539 2
will set C<$res = 4>.  Note that after the match $cnt returns to the globally
introduced value 0, since the scopes which restrict C<local> statements
d542 15
a556 12
This assertion may be used as L<C<(?(condition)yes-pattern|no-pattern)>>
switch.  If I<not> used in this way, the result of evaluation of C<code>
is put into variable $^R.  This happens immediately, so $^R can be used from
other C<(?{ code })> assertions inside the same regular expression.

The above assignment to $^R is properly localized, thus the old value of $^R
is restored if the assertion is backtracked (compare L<"Backtracking">).

Due to security concerns, this construction is not allowed if the regular
expression involves run-time interpolation of variables, unless 
C<use re 'eval'> pragma is used (see L<re>), or the variables contain
results of qr() operator (see L<perlop/"qr/STRING/imosx">).
d558 2
a559 2
This restriction is due to the wide-spread (questionable) practice of 
using the construct
d565 64
a628 34
without tainting.  While this code is frowned upon from security point
of view, when C<(?{})> was introduced, it was considered bad to add 
I<new> security holes to existing scripts.

B<NOTE:>  Use of the above insecure snippet without also enabling taint mode
is to be severely frowned upon.  C<use re 'eval'> does not disable tainting
checks, thus to allow $re in the above snippet to contain C<(?{})>
I<with tainting enabled>, one needs both C<use re 'eval'> and untaint
the $re.

=item C<(?E<gt>pattern)>

An "independent" subexpression.  Matches the substring that a
I<standalone> C<pattern> would match if anchored at the given position,
B<and only this substring>.

Say, C<^(?E<gt>a*)ab> will never match, since C<(?E<gt>a*)> (anchored
at the beginning of string, as above) will match I<all> characters
C<a> at the beginning of string, leaving no C<a> for C<ab> to match.
In contrast, C<a*ab> will match the same as C<a+b>, since the match of
the subgroup C<a*> is influenced by the following group C<ab> (see
L<"Backtracking">).  In particular, C<a*> inside C<a*ab> will match
fewer characters than a standalone C<a*>, since this makes the tail match.

An effect similar to C<(?E<gt>pattern)> may be achieved by

   (?=(pattern))\1

since the lookahead is in I<"logical"> context, thus matches the same
substring as a standalone C<a+>.  The following C<\1> eats the matched
string, thus making a zero-length assertion into an analogue of
C<(?E<gt>...)>.  (The difference between these two constructs is that the
second one uses a catching group, thus shifting ordinals of
backreferences in the rest of a regular expression.)
d630 1
a630 2
This construct is useful for optimizations of "eternal"
matches, because it will not backtrack (see L<"Backtracking">).  
d634 1
a634 1
	    [^()]+ 
d641 10
a650 11
That will efficiently match a nonempty group with matching
two-or-less-level-deep parentheses.  However, if there is no such group,
it will take virtually forever on a long string.  That's because there are
so many different ways to split a long string into several substrings.
This is what C<(.+)+> is doing, and C<(.+)+> is similar to a subpattern
of the above pattern.  Consider that the above pattern detects no-match
on C<((()aaaaaaaaaaaaaaaaaa> in several seconds, but that  each extra
letter doubles this time.  This exponential performance will make it
appear that your program has hung.

However, a tiny modification of this pattern 
d654 1
a654 1
	    (?> [^()]+ )
d661 1
a661 1
which uses C<(?E<gt>...)> matches exactly when the one above does (verifying
d665 2
a666 1
B<-w> saying it C<"matches the null string many times">):
d668 2
a669 2
On simple groups, such as the pattern C<(?E<gt> [^()]+ )>, a comparable
effect may be achieved by negative lookahead, as in C<[^()]+ (?! [^()] )>.
d672 21
d697 3
d702 1
a702 1
matched), or lookahead/lookbehind/evaluate zero-width assertion.
d704 1
a704 1
Say,
a713 26
=item C<(?imsx-imsx)>

One or more embedded pattern-match modifiers.  This is particularly
useful for patterns that are specified in a table somewhere, some of
which want to be case sensitive, and some of which don't.  The case
insensitive ones need to include merely C<(?i)> at the front of the
pattern.  For example:

    $pattern = "foobar";
    if ( /$pattern/i ) { } 

    # more flexible:

    $pattern = "(?i)foobar";
    if ( /$pattern/ ) { } 

Letters after C<-> switch modifiers off.

These modifiers are localized inside an enclosing group (if any).  Say,

    ( (?i) blah ) \s+ \1

(assuming C<x> modifier, and no C<i> modifier outside of this group)
will match a repeated (I<including the case>!) word C<blah> in any
case.

d716 1
a716 4
A question mark was chosen for this and for the new minimal-matching
construct because 1) question mark is pretty rare in older regular
expressions, and 2) whenever you see one, you should stop and "question"
exactly what is going on.  That's psychology...
d718 4
a721 1
=head2 Backtracking
d726 2
a727 1
C<+?>, C<{n,m}>, and C<{n,m}?>.
d766 1
a766 1
I<first> "foo" and the I<last> "bar".  In this case, it's more effective
d829 1
a829 1
When using lookahead assertions and negations, this can all get even
d865 1
d867 1
a867 1
try to match C<(?!123> with "123", which of course fails.  But because
d875 1
a875 1
"123".  It's in fact "C123", which suffices.
d877 5
a881 5
We can deal with this by using both an assertion and a negation.  We'll
say that the first part in $1 must be followed by a digit, and in fact, it
must also be followed by something that's not "123".  Remember that the
lookaheads are zero-width expressions--they only look, but don't consume
any of the string in their match.  So rewriting this way produces what
d890 1
a890 1
they're ANDed together, just as you'd use any builtin assertions:  C</^$/>
d898 19
a916 17
One warning: particularly complicated regular expressions can take
exponential time to solve due to the immense number of possible ways they
can use backtracking to try match.  For example this will take a very long
time to run

    /((a{0,5}){0,5}){0,5}/

And if you used C<*>'s instead of limiting it to 0 through 5 matches, then
it would take literally forever--or until you ran out of stack space.

A powerful tool for optimizing such beasts is "independent" groups,
which do not backtrace (see L<C<(?E<gt>pattern)>>).  Note also that
zero-length lookahead/lookbehind assertions will not backtrace to make
the tail match, since they are in "logical" context: only the fact
whether they match or not is considered relevant.  For an example
where side-effects of a lookahead I<might> have influenced the
following match, see L<C<(?E<gt>pattern)>>.
d934 1
a934 1
in the list.  Within a list, the "-" character is used to specify a
d936 4
a939 2
inclusive.  If you want "-" itself to be a member of a class, put it
at the start or end of the list, or escape it with a backslash.  (The
d943 3
d969 2
a970 2
pattern delimiter.  For this reason, it's common practice to include
alternatives in parentheses, to minimize confusion about where they
d984 10
a993 10
Within a pattern, you may designate subpatterns for later reference by
enclosing them in parentheses, and you may refer back to the I<n>th
subpattern later in the pattern using the metacharacter \I<n>.
Subpatterns are numbered based on the left to right order of their
opening parenthesis.  A backreference matches whatever
actually matched the subpattern in the string being examined, not the
rules for that subpattern.  Therefore, C<(0|0x)\d*\s\1\d*> will
match "0x1234 0x4321", but not "0x1234 01234", because subpattern 1
actually matched "0x", even though the rule C<0|0x> could
potentially match the leading 0 in the second number.
d995 1
a995 1
=head2 WARNING on \1 vs $1
d1016 1
a1016 1
C<${1}000>.  Basically, the operation of interpolation should not be confused
d1022 1
a1022 1
WARNING: Difficult material (and prose) ahead.  This section needs a rewrite.
d1035 1
a1035 1
due to the C<*> modifier.  Another common way to create a similar cycle
d1047 2
a1048 2
be significantly simplified by using repeated subexpressions which
may match zero-length substrings, with a simple example being:
d1053 1
a1053 1
Thus Perl allows the C</()/> construct, which I<forcefully breaks
d1058 3
a1060 2
The lower-level loops are I<interrupted> when it is detected that a 
repeated expression did match a zero-length substring, thus
d1078 1
a1078 1
Say,
d1091 1
a1091 1
The additional state of being I<matched with zero-length> is associated to
d1093 103
d1244 10
a1253 1
=head2 SEE ALSO
d1259 2
d1265 2
a1266 1
I<Mastering Regular Expressions> (see L<perlbook>) by Jeffrey Friedl.
@


1.2
log
@perl 5.004_04
@
text
@d9 2
a10 2
operations, plus various examples of the same, see C<m//> and C<s///> in
L<perlop>.
d13 4
a16 3
which relate to the interpretation of the regular expression inside
are listed below.  For the modifiers that alter the behaviour of the
operation, see L<perlop/"m//"> and L<perlop/"s//">.
d38 7
d62 2
a63 1
whitespace or C<#> characters in the pattern that you'll have to either
d66 4
a69 1
more readable.  See the C comment deletion code in L<perlop>.
d74 1
a74 1
those supplied in the Version 8 regexp routines.  (In fact, the
d119 5
a123 1
to integral values less than 65536.
d155 1
a155 1
    \Q		quote (disable) regexp metacharacters till \E
d158 6
a163 1
and <\U> is taken from the current locale.  See L<perllocale>.
d174 1
a174 1
Note that C<\w> matches a single alphanumeric character, not a whole
d185 3
a187 2
    \A	Match at only beginning of string
    \Z	Match at only end of string (or before newline at the end)
d195 1
a195 1
just like "^" and "$" except that they won't match multiple times when the
d198 1
a198 1
you can use C<\Z(?!\n)>.  The C<\G> assertion can be used to chain global
d203 1
a203 1
regexps which you want to match against consequent substrings of your
d243 2
a244 2
for each regexp that contains capturing parentheses. But if you never
use $&, etc., in your script, then regexps I<without> capturing
d248 1
a248 1
the price.
d250 1
a250 1
You will note that all backslashed metacharacters in Perl are
d257 1
a257 1
string that you want to use for a pattern. Simply quote all the
d263 1
a263 1
the \Q escape sequence used to disable the metacharacters special
d276 1
a276 1
=item (?#text)
d279 5
a283 1
whitespace formatting, a simple C<#> will suffice.
d285 1
a285 1
=item (?:regexp)
d287 2
a288 1
This groups things like "()" but doesn't make backreferences like "()" does.  So
d290 1
a290 1
    split(/\b(?:a|b|c)\b/)
d294 1
a294 1
    split(/\b(a|b|c)\b/)
d298 10
a307 1
=item (?=regexp)
d312 1
a312 1
=item (?!regexp)
d317 1
a317 8
use this for lookbehind: C</(?!foo)bar/> will not find an occurrence of
"bar" that is preceded by something which is not "foo".  That's because
the C<(?!foo)> is just saying that the next thing cannot be "foo"--and
it's not, it's a "bar", so "foobar" will match.  You would have to do
something like C</(?!foo)...bar/> for that.   We say "like" because there's
the case of your "bar" not having three characters before it.  You could
cover that this way: C</(?:(?!foo)...|^..?)bar/>.  Sometimes it's still
easier just to say:
d319 164
a482 1
    if (/foo/ && $` =~ /bar$/)
d484 2
d487 1
a487 1
=item (?imsx)
d496 1
a496 1
    if ( /$pattern/i )
d501 11
a511 1
    if ( /$pattern/ )
d515 4
a518 4
The specific choice of question mark for this and the new minimal
matching construct was because 1) question mark is pretty rare in older
regular expressions, and 2) whenever you see one, you should stop
and "question" exactly what is going on.  That's psychology...
d522 4
a525 4
A fundamental feature of regular expression matching involves the notion
called I<backtracking>.  which is used (when needed) by all regular
expression quantifiers, namely C<*>, C<*?>, C<+>, C<+?>, C<{n,m}>, and
C<{n,m}?>.
d624 2
a625 1
multiple ways it might succeed, you need to understand backtracking to know which variety of success you will achieve.
d631 4
a634 4
	$_ = "ABC123";
	if ( /^\D*(?!123)/ ) {				# Wrong!
	    print "Yup, no 123 in $_\n";
	}
d664 1
a664 1
try to match C<(?!123> with "123" which, of course, fails.  But because
d669 2
a670 3
Well now,
the pattern really, I<really> wants to succeed, so it uses the
standard regexp back-off-and-retry and lets C<\D*> expand to just "AB" this
d686 1
a686 1
In other words, the two zero-width assertions next to each other work like
d705 8
d715 1
a715 1
In case you're not familiar with the "regular" Version 8 regexp
d720 1
a720 1
characters which normally function as metacharacters to be interpreted
d727 1
a727 1
in C<[]>, which will match any one of the characters in the list.  If the
d730 1
a730 1
range, so that C<a-z> represents all the characters between "a" and "z",
d737 7
d755 1
a755 1
or "foe" in the target string (as would C<f(e|i|o)e>).  Note that the
d761 12
a772 3
start and end.  Note however that "|" is interpreted as a literal with
square brackets, so if you write C<[fee|fie|foe]> you're really only
matching C<[feio|]>.
d778 1
a778 1
opening parenthesis.  Note that a backreference matches whatever
d781 1
a781 1
match "0x1234 0x4321",but not "0x1234 01234", because subpattern 1
d787 1
a787 1
Some people get too used to writing things like
d799 1
a799 1
    s/(\d+)/ \1 + 1 /eg;
d810 120
d932 9
a940 1
"Mastering Regular Expressions" (see L<perlbook>) by Jeffrey Friedl.
@


1.1
log
@Initial revision
@
text
@d8 1
a8 1
description of how to actually I<use> regular expressions in matching
d12 30
a41 8
The matching operations can
have various modifiers, some of which relate to the interpretation of
the regular expression inside.  These are:

    i   Do case-insensitive pattern matching.
    m   Treat string as multiple lines.
    s   Treat string as single line.
    x   Extend your pattern's legibility with whitespace and comments.
d49 2
a50 2
the regular expression parser to ignore whitespace that is not
backslashed or within a character class.  You can use this to break up
d53 5
a57 3
just as in ordinary Perl code.  Taken together, these features go a
long way towards making Perl 5 a readable language.  See the C comment
deletion code in L<perlop>.
d78 2
a79 2
By default, the "^" character is guaranteed to match only at the
beginning of the string, the "$" character only at the end (or before the
d87 1
a87 1
but this practice is deprecated in Perl 5.)
d90 1
a90 1
newline unless you use the C</s> modifier, which tells Perl to pretend
d110 4
a113 6
many times as possible without causing the rest of the pattern not to match.  
The standard quantifiers are all "greedy", in that they match as many
occurrences as possible (given a particular starting location) without
causing the pattern to fail.  If you want it to match the minimum number
of times possible, follow the quantifier with a "?" after any of them.
Note that the meanings don't change, just the "gravity":
d122 1
a122 1
Since patterns are processed as double quoted strings, the following
d125 6
a130 6
    \t		tab
    \n		newline
    \r		return
    \f		form feed
    \a		alarm (bell)
    \e		escape (think troff)
d139 4
a142 1
    \Q		quote regexp metacharacters till \E
d154 5
a158 3
word.  To match a word you'd need to say C<\w+>.  You may use C<\w>,
C<\W>, C<\s>, C<\S>, C<\d> and C<\D> within character classes (though not
as either end of a range).
d164 3
a166 3
    \A	Match only at beginning of string
    \Z	Match only at end of string (or before newline at the end)
    \G	Match only where previous m//g left off
d169 1
a169 1
has a C<\w> on one side of it and and a C<\W> on the other side of it (in
d176 9
a184 1
you can use C<\Z(?!\n)>.
d186 1
a186 1
When the bracketing construct C<( ... )> is used, \<digit> matches the
d188 1
a188 1
in front of the digit.  (While the \<digit> notation can on rare occasion work
d190 1
a190 1
WARNING below.) The scope of $<digit> (and C<$`>, C<$&>, and C<$'>)
d193 2
a194 2
parentheses to delimit a subpattern (e.g. a set of alternatives) without
saving it as a subpattern, follow the ( with a ?.
d199 1
a199 1
to substrings if there have been at least that many left parens before
d205 1
a205 1
entire matched string.  ($0 used to return the same thing, but not any
d217 11
d229 7
a235 6
alphanumeric, such as C<\b>, C<\w>, C<\n>.  Unlike some other regular expression
languages, there are no backslashed symbols that aren't alphanumeric.
So anything that looks like \\, \(, \), \<, \>, \{, or \} is always
interpreted as a literal character, not a metacharacter.  This makes it
simple to quote a string that you want to use for a pattern but that
you are afraid might contain metacharacters.  Simply quote all the
d240 3
a242 3
You can also use the built-in quotemeta() function to do this.
An even easier way to quote metacharacters right in the match operator
is to say
d246 5
a250 5
Perl 5 defines a consistent extension syntax for regular expressions.
The syntax is a pair of parens with a question mark as the first thing
within the parens (this was a syntax error in Perl 4).  The character
after the question mark gives the function of the extension.  Several
extensions are already supported:
d261 1
a261 1
This groups things like "()" but doesn't make backrefences like "()" does.  So
d285 1
a285 1
something like C</(?foo)...bar/> for that.   We say "like" because there's
d298 1
a298 1
insensitive ones merely need to include C<(?i)> at the front of the
d341 1
a341 1
mistake and starts over again one character after where it had had the
d380 1
a380 1
    Beginning is <I have 2: 53147>, number is <>.
d420 1
a420 2
multiple ways it might succeed, you need to understand backtracking in
order to know which variety of success you will achieve.
d423 1
a423 1
tricker.  Imagine you'd like to find a sequence of nondigits not 
d450 1
a450 1
You might have expected test 3 to fail because it just seems to a more
d455 1
a455 1
nondigits, you have something that's not 123?"  If the pattern matcher had
d457 1
a457 1
fail.  
d462 1
a462 1
in the hope of matching the complete regular expression.  
d464 1
a464 1
Well now, 
d466 1
a466 1
standard regexp backoff-and-retry and lets C<\D*> expand to just "AB" this
d509 1
a509 1
literally by prefixing them with a "\" (e.g. "\." matches a ".", not any
d519 5
a523 1
inclusive.
d529 1
a529 1
Similarly, \xI<nn>, where I<nn> are hexidecimal digits, matches the
d553 1
a553 1
match "0x1234 0x4321",but not "0x1234 01234", since subpattern 1
d565 1
a565 1
PerlThink, the right-hand side of a C<s///> is a double-quoted string.  C<\1> in
d581 4
@


1.1.1.1
log
@Import of Perl 5.003 into the tree.  Makefile.bsd-wrapper and
config.sh.OpenBSD are the only local changes.
@
text
@@


1.1.1.2
log
@perl5.005_03
@
text
@d8 12
a19 42
description of how to I<use> regular expressions in matching
operations, plus various examples of the same, see discussion
of C<m//>, C<s///>, C<qr//> and C<??> in L<perlop/"Regexp Quote-Like Operators">.

The matching operations can have various modifiers.  The modifiers
that relate to the interpretation of the regular expression inside
are listed below.  For the modifiers that alter the way a regular expression
is used by Perl, see L<perlop/"Regexp Quote-Like Operators"> and 
L<perlop/"Gory details of parsing quoted constructs">.

=over 4

=item i

Do case-insensitive pattern matching.

If C<use locale> is in effect, the case map is taken from the current
locale.  See L<perllocale>.

=item m

Treat string as multiple lines.  That is, change "^" and "$" from matching
at only the very start or end of the string to the start or end of any
line anywhere within the string,

=item s

Treat string as single line.  That is, change "." to match any character
whatsoever, even a newline, which it normally would not match.

The C</s> and C</m> modifiers both override the C<$*> setting.  That is, no matter
what C<$*> contains, C</s> without C</m> will force "^" to match only at the
beginning of the string and "$" to match only at the end (or just before a
newline at the end) of the string.  Together, as /ms, they let the "." match
any character whatsoever, while yet allowing "^" and "$" to match,
respectively, just after and just before newlines within the string.

=item x

Extend your pattern's legibility by permitting whitespace and comments.

=back
d27 2
a28 2
the regular expression parser to ignore whitespace that is neither
backslashed nor within a character class.  You can use this to break up
d31 3
a33 9
just as in ordinary Perl code.  This also means that if you want real
whitespace or C<#> characters in the pattern (outside of a character
class, where they are unaffected by C</x>), that you'll either have to 
escape them or encode them using octal or hex escapes.  Taken together,
these features go a long way towards making Perl's regular expressions
more readable.  Note that you have to be careful not to include the
pattern delimiter in the comment--perl has no way of knowing you did
not intend to close the pattern early.  See the C-comment deletion code
in L<perlop>.
d38 1
a38 1
those supplied in the Version 8 regex routines.  (In fact, the
d54 2
a55 2
By default, the "^" character is guaranteed to match at only the
beginning of the string, the "$" character at only the end (or before the
d63 1
a63 1
but this practice is now deprecated.)
d66 1
a66 1
newline unless you use the C</s> modifier, which in effect tells Perl to pretend
d83 1
a83 5
to integral values less than a preset limit defined when perl is built.
This is usually 32766 on the most common platforms.  The actual limit can
be seen in the error message generated by code such as this:

	$_ **= $_ , / {$_} / for 2 .. 42;
d86 6
a91 4
many times as possible (given a particular starting location) while still
allowing the rest of the pattern to match.  If you want it to match the
minimum number of times possible, follow the quantifier with a "?".  Note
that the meanings don't change, just the "greediness":
d100 1
a100 1
Because patterns are processed as double quoted strings, the following
d103 6
a108 6
    \t		tab                   (HT, TAB)
    \n		newline               (LF, NL)
    \r		return                (CR)
    \f		form feed             (FF)
    \a		alarm (bell)          (BEL)
    \e		escape (think troff)  (ESC)
d117 1
a117 9
    \Q		quote (disable) pattern metacharacters till \E

If C<use locale> is in effect, the case map used by C<\l>, C<\L>, C<\u>
and C<\U> is taken from the current locale.  See L<perllocale>.

You cannot include a literal C<$> or C<@@> within a C<\Q> sequence.
An unescaped C<$> or C<@@> interpolates the corresponding variable,
while escaping will cause the literal string C<\$> to be matched.
You'll need to write something like C<m/\Quser\E\@@\Qhost/>.
d128 4
a131 6
A C<\w> matches a single alphanumeric character, not a whole
word.  To match a word you'd need to say C<\w+>.  If C<use locale> is in
effect, the list of alphabetic characters generated by C<\w> is taken
from the current locale.  See L<perllocale>. You may use C<\w>, C<\W>,
C<\s>, C<\S>, C<\d>, and C<\D> within character classes (though not as
either end of a range).
d138 2
a139 3
    \Z	Match only at end of string, or before newline at the end
    \z	Match only at end of string
    \G	Match only where previous m//g left off (works only with /g)
d142 1
a142 1
has a C<\w> on one side of it and a C<\W> on the other side of it (in
d146 1
a146 1
just like "^" and "$", except that they won't match multiple times when the
d149 1
a149 9
you can use C<\z>.  The C<\G> assertion can be used to chain global
matches (using C<m//g>), as described in
L<perlop/"Regexp Quote-Like Operators">.

It is also useful when writing C<lex>-like scanners, when you have several
patterns that you want to match against consequent substrings of your
string, see the previous reference.
The actual location where C<\G> will match can also be influenced
by using C<pos()> as an lvalue.  See L<perlfunc/pos>.
d151 1
a151 1
When the bracketing construct C<( ... )> is used, \E<lt>digitE<gt> matches the
d153 1
a153 1
in front of the digit.  (While the \E<lt>digitE<gt> notation can on rare occasion work
d155 1
a155 1
WARNING below.) The scope of $E<lt>digitE<gt> (and C<$`>, C<$&>, and C<$'>)
d158 2
a159 2
parentheses to delimit a subpattern (e.g., a set of alternatives) without
saving it as a subpattern, follow the ( with a ?:.
d164 1
a164 1
to substrings if there have been at least that many left parentheses before
d170 1
a170 1
entire matched string.  (C<$0> used to return the same thing, but not any
d182 7
a188 19
Once perl sees that you need one of C<$&>, C<$`> or C<$'> anywhere in
the program, it has to provide them on each and every pattern match.
This can slow your program down.  The same mechanism that handles
these provides for the use of $1, $2, etc., so you pay the same price
for each pattern that contains capturing parentheses. But if you never
use $&, etc., in your script, then patterns I<without> capturing
parentheses won't be penalized. So avoid $&, $', and $` if you can,
but if you can't (and some algorithms really appreciate them), once
you've used them once, use them at will, because you've already paid
the price.  As of 5.005, $& is not so costly as the other two.

Backslashed metacharacters in Perl are
alphanumeric, such as C<\b>, C<\w>, C<\n>.  Unlike some other regular
expression languages, there are no backslashed symbols that aren't
alphanumeric.  So anything that looks like \\, \(, \), \E<lt>, \E<gt>,
\{, or \} is always interpreted as a literal character, not a
metacharacter.  This was once used in a common idiom to disable or
quote the special meanings of regular expression metacharacters in a
string that you want to use for a pattern. Simply quote all
d193 3
a195 3
Now it is much more common to see either the quotemeta() function or
the C<\Q> escape sequence used to disable all metacharacters' special
meanings like this:
d199 5
a203 5
Perl defines a consistent extension syntax for regular expressions.
The syntax is a pair of parentheses with a question mark as the first
thing within the parentheses (this was a syntax error in older
versions of Perl).  The character after the question mark gives the
function of the extension.  Several extensions are already supported:
d207 1
a207 1
=item C<(?#text)>
d210 1
a210 5
whitespace formatting, a simple C<#> will suffice.  Note that perl closes
the comment as soon as it sees a C<)>, so there is no way to put a literal
C<)> in the comment.

=item C<(?:pattern)>
d212 1
a212 1
=item C<(?imsx-imsx:pattern)>
d214 1
a214 2
This is for clustering, not capturing; it groups subexpressions like
"()", but doesn't make backreferences as "()" does.  So
d216 1
a216 1
    @@fields = split(/\b(?:a|b|c)\b/)
d220 1
a220 1
    @@fields = split(/\b(a|b|c)\b/)
d224 1
a224 10
The letters between C<?> and C<:> act as flags modifiers, see
L<C<(?imsx-imsx)>>.  In particular,

    /(?s-i:more.*than).*million/i

is equivalent to more verbose

    /(?:(?s-i)more.*than).*million/i

=item C<(?=pattern)>
d229 1
a229 1
=item C<(?!pattern)>
d234 8
a241 1
use this for lookbehind.
d243 1
a243 164
If you are looking for a "bar" that isn't preceded by a "foo", C</(?!foo)bar/>
will not do what you want.  That's because the C<(?!foo)> is just saying that
the next thing cannot be "foo"--and it's not, it's a "bar", so "foobar" will
match.  You would have to do something like C</(?!foo)...bar/> for that.   We
say "like" because there's the case of your "bar" not having three characters
before it.  You could cover that this way: C</(?:(?!foo)...|^.{0,2})bar/>.
Sometimes it's still easier just to say:

    if (/bar/ && $` !~ /foo$/)

For lookbehind see below.

=item C<(?E<lt>=pattern)>

A zero-width positive lookbehind assertion.  For example, C</(?E<lt>=\t)\w+/>
matches a word following a tab, without including the tab in C<$&>.
Works only for fixed-width lookbehind.

=item C<(?<!pattern)>

A zero-width negative lookbehind assertion.  For example C</(?<!bar)foo/>
matches any occurrence of "foo" that isn't following "bar".  
Works only for fixed-width lookbehind.

=item C<(?{ code })>

Experimental "evaluate any Perl code" zero-width assertion.  Always
succeeds.  C<code> is not interpolated.  Currently the rules to
determine where the C<code> ends are somewhat convoluted.

The C<code> is properly scoped in the following sense: if the assertion
is backtracked (compare L<"Backtracking">), all the changes introduced after
C<local>isation are undone, so

  $_ = 'a' x 8;
  m< 
     (?{ $cnt = 0 })			# Initialize $cnt.
     (
       a 
       (?{
           local $cnt = $cnt + 1;	# Update $cnt, backtracking-safe.
       })
     )*  
     aaaa
     (?{ $res = $cnt })			# On success copy to non-localized
					# location.
   >x;

will set C<$res = 4>.  Note that after the match $cnt returns to the globally
introduced value 0, since the scopes which restrict C<local> statements
are unwound.

This assertion may be used as L<C<(?(condition)yes-pattern|no-pattern)>>
switch.  If I<not> used in this way, the result of evaluation of C<code>
is put into variable $^R.  This happens immediately, so $^R can be used from
other C<(?{ code })> assertions inside the same regular expression.

The above assignment to $^R is properly localized, thus the old value of $^R
is restored if the assertion is backtracked (compare L<"Backtracking">).

Due to security concerns, this construction is not allowed if the regular
expression involves run-time interpolation of variables, unless 
C<use re 'eval'> pragma is used (see L<re>), or the variables contain
results of qr() operator (see L<perlop/"qr/STRING/imosx">).

This restriction is due to the wide-spread (questionable) practice of 
using the construct

    $re = <>;
    chomp $re;
    $string =~ /$re/;

without tainting.  While this code is frowned upon from security point
of view, when C<(?{})> was introduced, it was considered bad to add 
I<new> security holes to existing scripts.

B<NOTE:>  Use of the above insecure snippet without also enabling taint mode
is to be severely frowned upon.  C<use re 'eval'> does not disable tainting
checks, thus to allow $re in the above snippet to contain C<(?{})>
I<with tainting enabled>, one needs both C<use re 'eval'> and untaint
the $re.

=item C<(?E<gt>pattern)>

An "independent" subexpression.  Matches the substring that a
I<standalone> C<pattern> would match if anchored at the given position,
B<and only this substring>.

Say, C<^(?E<gt>a*)ab> will never match, since C<(?E<gt>a*)> (anchored
at the beginning of string, as above) will match I<all> characters
C<a> at the beginning of string, leaving no C<a> for C<ab> to match.
In contrast, C<a*ab> will match the same as C<a+b>, since the match of
the subgroup C<a*> is influenced by the following group C<ab> (see
L<"Backtracking">).  In particular, C<a*> inside C<a*ab> will match
fewer characters than a standalone C<a*>, since this makes the tail match.

An effect similar to C<(?E<gt>pattern)> may be achieved by

   (?=(pattern))\1

since the lookahead is in I<"logical"> context, thus matches the same
substring as a standalone C<a+>.  The following C<\1> eats the matched
string, thus making a zero-length assertion into an analogue of
C<(?E<gt>...)>.  (The difference between these two constructs is that the
second one uses a catching group, thus shifting ordinals of
backreferences in the rest of a regular expression.)

This construct is useful for optimizations of "eternal"
matches, because it will not backtrack (see L<"Backtracking">).  

    m{ \(
	  ( 
	    [^()]+ 
          | 
            \( [^()]* \)
          )+
       \) 
     }x

That will efficiently match a nonempty group with matching
two-or-less-level-deep parentheses.  However, if there is no such group,
it will take virtually forever on a long string.  That's because there are
so many different ways to split a long string into several substrings.
This is what C<(.+)+> is doing, and C<(.+)+> is similar to a subpattern
of the above pattern.  Consider that the above pattern detects no-match
on C<((()aaaaaaaaaaaaaaaaaa> in several seconds, but that  each extra
letter doubles this time.  This exponential performance will make it
appear that your program has hung.

However, a tiny modification of this pattern 

    m{ \( 
	  ( 
	    (?> [^()]+ )
          | 
            \( [^()]* \)
          )+
       \) 
     }x

which uses C<(?E<gt>...)> matches exactly when the one above does (verifying
this yourself would be a productive exercise), but finishes in a fourth
the time when used on a similar string with 1000000 C<a>s.  Be aware,
however, that this pattern currently triggers a warning message under
B<-w> saying it C<"matches the null string many times">):

On simple groups, such as the pattern C<(?E<gt> [^()]+ )>, a comparable
effect may be achieved by negative lookahead, as in C<[^()]+ (?! [^()] )>.
This was only 4 times slower on a string with 1000000 C<a>s.

=item C<(?(condition)yes-pattern|no-pattern)>

=item C<(?(condition)yes-pattern)>

Conditional expression.  C<(condition)> should be either an integer in
parentheses (which is valid if the corresponding pair of parentheses
matched), or lookahead/lookbehind/evaluate zero-width assertion.

Say,

    m{ ( \( )? 
       [^()]+ 
       (?(1) \) ) 
     }x
a244 2
matches a chunk of non-parentheses, possibly included in parentheses
themselves.
d246 1
a246 1
=item C<(?imsx-imsx)>
d251 1
a251 1
insensitive ones need to include merely C<(?i)> at the front of the
d255 1
a255 1
    if ( /$pattern/i ) { } 
d260 1
a260 11
    if ( /$pattern/ ) { } 

Letters after C<-> switch modifiers off.

These modifiers are localized inside an enclosing group (if any).  Say,

    ( (?i) blah ) \s+ \1

(assuming C<x> modifier, and no C<i> modifier outside of this group)
will match a repeated (I<including the case>!) word C<blah> in any
case.
d264 4
a267 4
A question mark was chosen for this and for the new minimal-matching
construct because 1) question mark is pretty rare in older regular
expressions, and 2) whenever you see one, you should stop and "question"
exactly what is going on.  That's psychology...
d271 4
a274 4
A fundamental feature of regular expression matching involves the
notion called I<backtracking>, which is currently used (when needed)
by all regular expression quantifiers, namely C<*>, C<*?>, C<+>,
C<+?>, C<{n,m}>, and C<{n,m}?>.
d294 1
a294 1
mistake and starts over again one character after where it had the
d333 1
a333 1
    Beginning is <I have 2 numbers: 53147>, number is <>.
d373 2
a374 2
multiple ways it might succeed, you need to understand backtracking to
know which variety of success you will achieve.
d377 1
a377 1
tricker.  Imagine you'd like to find a sequence of non-digits not
d380 4
a383 4
    $_ = "ABC123";
    if ( /^\D*(?!123)/ ) {		# Wrong!
	print "Yup, no 123 in $_\n";
    }
d404 1
a404 1
You might have expected test 3 to fail because it seems to a more
d409 1
a409 1
non-digits, you have something that's not 123?"  If the pattern matcher had
d411 1
a411 1
fail.
d413 1
a413 1
try to match C<(?!123> with "123", which of course fails.  But because
d416 1
a416 1
in the hope of matching the complete regular expression.
d418 3
a420 2
The pattern really, I<really> wants to succeed, so it uses the
standard pattern back-off-and-retry and lets C<\D*> expand to just "AB" this
d436 1
a436 1
In other words, the two zero-width assertions next to each other work as though
a454 8
A powerful tool for optimizing such beasts is "independent" groups,
which do not backtrace (see L<C<(?E<gt>pattern)>>).  Note also that
zero-length lookahead/lookbehind assertions will not backtrace to make
the tail match, since they are in "logical" context: only the fact
whether they match or not is considered relevant.  For an example
where side-effects of a lookahead I<might> have influenced the
following match, see L<C<(?E<gt>pattern)>>.

d457 1
a457 1
In case you're not familiar with the "regular" Version 8 regex
d462 2
a463 2
characters that normally function as metacharacters to be interpreted
literally by prefixing them with a "\" (e.g., "\." matches a ".", not any
d469 1
a469 1
in C<[]>, which will match any one character from the list.  If the
d472 2
a473 13
range, so that C<a-z> represents all characters between "a" and "z",
inclusive.  If you want "-" itself to be a member of a class, put it
at the start or end of the list, or escape it with a backslash.  (The
following all specify the same class of three characters: C<[-az]>,
C<[az-]>, and C<[a\-z]>.  All are different from C<[a-z]>, which
specifies a class containing twenty-six characters.)

Note also that the whole range idea is rather unportable between
character sets--and even within character sets they may cause results
you probably didn't expect.  A sound principle is to use only ranges
that begin from and end at either alphabets of equal case ([a-e],
[A-E]), or digits ([0-9]).  Anything else is unsafe.  If in doubt,
spell out the character sets in full.
d479 1
a479 1
Similarly, \xI<nn>, where I<nn> are hexadecimal digits, matches the
d486 1
a486 1
or "foe" in the target string (as would C<f(e|i|o)e>).  The
d492 3
a494 12
start and end.

Alternatives are tried from left to right, so the first
alternative found for which the entire expression matches, is the one that
is chosen. This means that alternatives are not necessarily greedy. For
example: when matching C<foo|foot> against "barefoot", only the "foo"
part will match, as that is the first alternative tried, and it successfully
matches the target string. (This might not seem important, but it is
important when you are capturing matched text using parentheses.)

Also remember that "|" is interpreted as a literal within square brackets,
so if you write C<[fee|fie|foe]> you're really only matching C<[feio|]>.
d500 1
a500 1
opening parenthesis.  A backreference matches whatever
d503 1
a503 1
match "0x1234 0x4321", but not "0x1234 01234", because subpattern 1
d509 1
a509 1
Some people get too used to writing things like:
d515 1
a515 1
PerlThink, the righthand side of a C<s///> is a double-quoted string.  C<\1> in
d521 1
a521 1
    s/(\d+)/ \1 + 1 /eg;    	# causes warning under -w
a530 132

=head2 Repeated patterns matching zero-length substring

WARNING: Difficult material (and prose) ahead.  This section needs a rewrite.

Regular expressions provide a terse and powerful programming language.  As
with most other power tools, power comes together with the ability
to wreak havoc.

A common abuse of this power stems from the ability to make infinite
loops using regular expressions, with something as innocuous as:

    'foo' =~ m{ ( o? )* }x;

The C<o?> can match at the beginning of C<'foo'>, and since the position
in the string is not moved by the match, C<o?> would match again and again
due to the C<*> modifier.  Another common way to create a similar cycle
is with the looping modifier C<//g>:

    @@matches = ( 'foo' =~ m{ o? }xg );

or

    print "match: <$&>\n" while 'foo' =~ m{ o? }xg;

or the loop implied by split().

However, long experience has shown that many programming tasks may
be significantly simplified by using repeated subexpressions which
may match zero-length substrings, with a simple example being:

    @@chars = split //, $string;		  # // is not magic in split
    ($whitewashed = $string) =~ s/()/ /g; # parens avoid magic s// /

Thus Perl allows the C</()/> construct, which I<forcefully breaks
the infinite loop>.  The rules for this are different for lower-level
loops given by the greedy modifiers C<*+{}>, and for higher-level
ones like the C</g> modifier or split() operator.

The lower-level loops are I<interrupted> when it is detected that a 
repeated expression did match a zero-length substring, thus

   m{ (?: NON_ZERO_LENGTH | ZERO_LENGTH )* }x;

is made equivalent to 

   m{   (?: NON_ZERO_LENGTH )* 
      | 
        (?: ZERO_LENGTH )? 
    }x;

The higher level-loops preserve an additional state between iterations:
whether the last match was zero-length.  To break the loop, the following 
match after a zero-length match is prohibited to have a length of zero.
This prohibition interacts with backtracking (see L<"Backtracking">), 
and so the I<second best> match is chosen if the I<best> match is of
zero length.

Say,

    $_ = 'bar';
    s/\w??/<$&>/g;

results in C<"<><b><><a><><r><>">.  At each position of the string the best
match given by non-greedy C<??> is the zero-length match, and the I<second 
best> match is what is matched by C<\w>.  Thus zero-length matches
alternate with one-character-long matches.

Similarly, for repeated C<m/()/g> the second-best match is the match at the 
position one notch further in the string.

The additional state of being I<matched with zero-length> is associated to
the matched string, and is reset by each assignment to pos().

=head2 Creating custom RE engines

Overloaded constants (see L<overload>) provide a simple way to extend
the functionality of the RE engine.

Suppose that we want to enable a new RE escape-sequence C<\Y|> which
matches at boundary between white-space characters and non-whitespace
characters.  Note that C<(?=\S)(?<!\S)|(?!\S)(?<=\S)> matches exactly
at these positions, so we want to have each C<\Y|> in the place of the
more complicated version.  We can create a module C<customre> to do
this:

    package customre;
    use overload;

    sub import {
      shift;
      die "No argument to customre::import allowed" if @@_;
      overload::constant 'qr' => \&convert;
    }

    sub invalid { die "/$_[0]/: invalid escape '\\$_[1]'"}

    my %rules = ( '\\' => '\\', 
		  'Y|' => qr/(?=\S)(?<!\S)|(?!\S)(?<=\S)/ );
    sub convert {
      my $re = shift;
      $re =~ s{ 
                \\ ( \\ | Y . )
              }
              { $rules{$1} or invalid($re,$1) }sgex; 
      return $re;
    }

Now C<use customre> enables the new escape in constant regular
expressions, i.e., those without any runtime variable interpolations.
As documented in L<overload>, this conversion will work only over
literal parts of regular expressions.  For C<\Y|$re\Y|> the variable
part of this regular expression needs to be converted explicitly
(but only if the special meaning of C<\Y|> should be enabled inside $re):

    use customre;
    $re = <>;
    chomp $re;
    $re = customre::convert $re;
    /\Y|$re\Y|/;

=head2 SEE ALSO

L<perlop/"Regexp Quote-Like Operators">.

L<perlop/"Gory details of parsing quoted constructs">.

L<perlfunc/pos>.

L<perllocale>.

I<Mastering Regular Expressions> (see L<perlbook>) by Jeffrey Friedl.
@


1.1.1.3
log
@virgin perl 5.6.0
@
text
@d9 1
a9 1
operations, plus various examples of the same, see discussions
d12 1
a12 1
Matching operations can have various modifiers.  Modifiers
d14 2
a15 2
are listed below.  Modifiers that alter the way a regular expression
is used by Perl are detailed in L<perlop/"Regexp Quote-Like Operators"> and 
d30 2
a31 2
the start or end of the string to matching the start or end of any
line anywhere within the string.
d36 1
a36 1
whatsoever, even a newline, which normally it would not match.
d38 6
a43 7
The C</s> and C</m> modifiers both override the C<$*> setting.  That
is, no matter what C<$*> contains, C</s> without C</m> will force
"^" to match only at the beginning of the string and "$" to match
only at the end (or just before a newline at the end) of the string.
Together, as /ms, they let the "." match any character whatsoever,
while yet allowing "^" and "$" to match, respectively, just after
and just before newlines within the string.
d52 1
a52 1
in question might not really be a slash.  Any of these
d54 1
a54 1
the C<(?...)> construct.  See below.
d62 1
a62 1
whitespace or C<#> characters in the pattern (outside a character
d73 5
a77 5
The patterns used in Perl pattern matching derive from supplied in
the Version 8 regex routines.  (The routines are derived
(distantly) from Henry Spencer's freely redistributable reimplementation
of the V8 routines.)  See L<Version 8 Regular Expressions> for
details.
d90 3
a92 3
By default, the "^" character is guaranteed to match only the
beginning of the string, the "$" character only the end (or before the
newline at the end), and Perl does certain optimizations with the
d101 1
a101 1
To simplify multi-line substitutions, the "." character never matches a
d123 1
a123 1
    $_ **= $_ , / {$_} / for 2 .. 42;
a148 1
    \x{263a}	wide hex char         (Unicode SMILEY)
a149 1
    \N{name}	named char
d158 1
a158 2
and C<\U> is taken from the current locale.  See L<perllocale>.  For
documentation of C<\N{name}>, see L<charnames>.
a172 66
    \pP	Match P, named property.  Use \p{Prop} for longer names.
    \PP	Match non-P
    \X	Match eXtended Unicode "combining character sequence",
        equivalent to C<(?:\PM\pM*)>
    \C	Match a single C char (octet) even under utf8.

A C<\w> matches a single alphanumeric character, not a whole word.
Use C<\w+> to match a string of Perl-identifier characters (which isn't 
the same as matching an English word).  If C<use locale> is in effect, the
list of alphabetic characters generated by C<\w> is taken from the
current locale.  See L<perllocale>.  You may use C<\w>, C<\W>, C<\s>, C<\S>,
C<\d>, and C<\D> within character classes, but if you try to use them
as endpoints of a range, that's not a range, the "-" is understood literally.
See L<utf8> for details about C<\pP>, C<\PP>, and C<\X>.

The POSIX character class syntax

    [:class:]

is also available.  The available classes and their backslash
equivalents (if available) are as follows:

    alpha
    alnum
    ascii
    cntrl
    digit       \d
    graph
    lower
    print
    punct
    space       \s
    upper
    word        \w
    xdigit

For example use C<[:upper:]> to match all the uppercase characters.
Note that the C<[]> are part of the C<[::]> construct, not part of the whole
character class.  For example:

    [01[:alpha:]%]

matches one, zero, any alphabetic character, and the percentage sign.

If the C<utf8> pragma is used, the following equivalences to Unicode
\p{} constructs hold:

    alpha       IsAlpha
    alnum       IsAlnum
    ascii       IsASCII
    cntrl       IsCntrl
    digit       IsDigit
    graph       IsGraph
    lower       IsLower
    print       IsPrint
    punct       IsPunct
    space       IsSpace
    upper       IsUpper
    word        IsWord
    xdigit      IsXDigit

For example C<[:lower:]> and C<\p{IsLower}> are equivalent.

If the C<utf8> pragma is not used but the C<locale> pragma is, the
classes correlate with the isalpha(3) interface (except for `word',
which is a Perl extension, mirroring C<\w>).
d174 6
a179 41
The assumedly non-obviously named classes are:

=over 4

=item cntrl

Any control character.  Usually characters that don't produce output as
such but instead control the terminal somehow: for example newline and
backspace are control characters.  All characters with ord() less than
32 are most often classified as control characters.

=item graph

Any alphanumeric or punctuation character.

=item print

Any alphanumeric or punctuation character or space.

=item punct

Any punctuation character.

=item xdigit

Any hexadecimal digit.  Though this may feel silly (/0-9a-f/i would
work just fine) it is included for completeness.

=back

You can negate the [::] character classes by prefixing the class name
with a '^'. This is a Perl extension.  For example:

    POSIX	trad. Perl  utf8 Perl

    [:^digit:]      \D      \P{IsDigit}
    [:^space:]	    \S	    \P{IsSpace}
    [:^word:]	    \W	    \P{IsWord}

The POSIX character classes [.cc.] and [=cc=] are recognized but
B<not> supported and trying to use them will cause an error.
d188 1
a188 2
    \G	Match only at pos() (e.g. at the end-of-match position
        of prior m//g)
d190 11
a200 36
A word boundary (C<\b>) is a spot between two characters
that has a C<\w> on one side of it and a C<\W> on the other side
of it (in either order), counting the imaginary characters off the
beginning and end of the string as matching a C<\W>.  (Within
character classes C<\b> represents backspace rather than a word
boundary, just as it normally does in any double-quoted string.)
The C<\A> and C<\Z> are just like "^" and "$", except that they
won't match multiple times when the C</m> modifier is used, while
"^" and "$" will match at every internal line boundary.  To match
the actual end of the string and not ignore an optional trailing
newline, use C<\z>.

The C<\G> assertion can be used to chain global matches (using
C<m//g>), as described in L<perlop/"Regexp Quote-Like Operators">.
It is also useful when writing C<lex>-like scanners, when you have
several patterns that you want to match against consequent substrings
of your string, see the previous reference.  The actual location
where C<\G> will match can also be influenced by using C<pos()> as
an lvalue.  See L<perlfunc/pos>.

The bracketing construct C<( ... )> creates capture buffers.  To
refer to the digit'th buffer use \<digit> within the
match.  Outside the match use "$" instead of "\".  (The
\<digit> notation works in certain circumstances outside 
the match.  See the warning below about \1 vs $1 for details.)
Referring back to another part of the match is called a
I<backreference>.

There is no limit to the number of captured substrings that you may
use.  However Perl also uses \10, \11, etc. as aliases for \010,
\011, etc.  (Recall that 0 means octal, so \011 is the 9'th ASCII
character, a tab.)  Perl resolves this ambiguity by interpreting
\10 as a backreference only if at least 10 left parentheses have
opened before it.  Likewise \11 is a backreference only if at least
11 left parentheses have opened before it.  And so on.  \1 through
\9 are always interpreted as backreferences."
d202 28
a229 1
Examples:
d233 1
a233 5
     if (/(.)\1/) {                 # find first doubled char
         print "'$1' is the first doubled character\n";
     }

    if (/Time: (..):(..):(..)/) {   # parse out values
d239 20
a258 34
Several special variables also refer back to portions of the previous
match.  C<$+> returns whatever the last bracket match matched.
C<$&> returns the entire matched string.  (At one point C<$0> did
also, but now it returns the name of the program.)  C<$`> returns
everything before the matched string.  And C<$'> returns everything
after the matched string.

The numbered variables ($1, $2, $3, etc.) and the related punctuation
set (C<<$+>, C<$&>, C<$`>, and C<$'>) are all dynamically scoped
until the end of the enclosing block or until the next successful
match, whichever comes first.  (See L<perlsyn/"Compound Statements">.)

B<WARNING>: Once Perl sees that you need one of C<$&>, C<$`>, or
C<$'> anywhere in the program, it has to provide them for every
pattern match.  This may substantially slow your program.  Perl
uses the same mechanism to produce $1, $2, etc, so you also pay a
price for each pattern that contains capturing parentheses.  (To
avoid this cost while retaining the grouping behaviour, use the
extended regular expression C<(?: ... )> instead.)  But if you never
use C<$&>, C<$`> or C<$'>, then patterns I<without> capturing
parentheses will not be penalized.  So avoid C<$&>, C<$'>, and C<$`>
if you can, but if you can't (and some algorithms really appreciate
them), once you've used them once, use them at will, because you've
already paid the price.  As of 5.005, C<$&> is not so costly as the
other two.

Backslashed metacharacters in Perl are alphanumeric, such as C<\b>,
C<\w>, C<\n>.  Unlike some other regular expression languages, there
are no backslashed symbols that aren't alphanumeric.  So anything
that looks like \\, \(, \), \<, \>, \{, or \} is always
interpreted as a literal character, not a metacharacter.  This was
once used in a common idiom to disable or quote the special meanings
of regular expression metacharacters in a string that you want to
use for a pattern. Simply quote all non-alphanumeric characters:
d262 2
a263 2
Today it is more common to use the quotemeta() function or the C<\Q>
metaquoting escape sequence to disable all metacharacters' special
d268 5
a272 24
Beware that if you put literal backslashes (those not inside
interpolated variables) between C<\Q> and C<\E>, double-quotish
backslash interpolation may lead to confusing results.  If you
I<need> to use literal backslashes within C<\Q...\E>,
consult L<perlop/"Gory details of parsing quoted constructs">.

=head2 Extended Patterns

Perl also defines a consistent extension syntax for features not
found in standard tools like B<awk> and B<lex>.  The syntax is a
pair of parentheses with a question mark as the first thing within
the parentheses.  The character after the question mark indicates
the extension.

The stability of these extensions varies widely.  Some have been
part of the core language for many years.  Others are experimental
and may change without warning or be completely removed.  Check
the documentation on an individual feature to verify its current
status.

A question mark was chosen for this and for the minimal-matching
construct because 1) question marks are rare in older regular
expressions, and 2) whenever you see one, you should stop and
"question" exactly what is going on.  That's psychology...
d278 2
a279 2
A comment.  The text is ignored.  If the C</x> modifier enables
whitespace formatting, a simple C<#> will suffice.  Note that Perl closes
a282 26
=item C<(?imsx-imsx)>

One or more embedded pattern-match modifiers.  This is particularly
useful for dynamic patterns, such as those read in from a configuration
file, read in as an argument, are specified in a table somewhere,
etc.  Consider the case that some of which want to be case sensitive
and some do not.  The case insensitive ones need to include merely
C<(?i)> at the front of the pattern.  For example:

    $pattern = "foobar";
    if ( /$pattern/i ) { } 

    # more flexible:

    $pattern = "(?i)foobar";
    if ( /$pattern/ ) { } 

Letters after a C<-> turn those modifiers off.  These modifiers are
localized inside an enclosing group (if any).  For example,

    ( (?i) blah ) \s+ \1

will match a repeated (I<including the case>!) word C<blah> in any
case, assuming C<x> modifier, and no C<i> modifier outside this
group.

d296 1
a296 2
but doesn't spit out extra fields.  It's also cheaper not to capture
characters if you don't need to.
d298 2
a299 2
Any letters between C<?> and C<:> act as flags modifiers as with
C<(?imsx-imsx)>.  For example, 
d303 1
a303 1
is equivalent to the more verbose
d309 1
a309 1
A zero-width positive look-ahead assertion.  For example, C</\w+(?=\t)/>
d314 1
a314 1
A zero-width negative look-ahead assertion.  For example C</foo(?!bar)/>
d316 2
a317 2
however that look-ahead and look-behind are NOT the same thing.  You cannot
use this for look-behind.
d329 1
a329 1
For look-behind see below.
d331 1
a331 1
=item C<(?<=pattern)>
d333 3
a335 3
A zero-width positive look-behind assertion.  For example, C</(?<=\t)\w+/>
matches a word that follows a tab, without including the tab in C<$&>.
Works only for fixed-width look-behind.
d339 3
a341 3
A zero-width negative look-behind assertion.  For example C</(?<!bar)foo/>
matches any occurrence of "foo" that does not follow "bar".  Works
only for fixed-width look-behind.
d345 7
a351 10
B<WARNING>: This extended regular expression feature is considered
highly experimental, and may be changed or deleted without notice.

This zero-width assertion evaluate any embedded Perl code.  It
always succeeds, and its C<code> is not interpolated.  Currently,
the rules to determine where the C<code> ends are somewhat convoluted.

The C<code> is properly scoped in the following sense: If the assertion
is backtracked (compare L<"Backtracking">), all changes introduced after
C<local>ization are undone, so that
d367 2
a368 2
will set C<$res = 4>.  Note that after the match, $cnt returns to the globally
introduced value, because the scopes that restrict C<local> operators
d371 12
a382 15
This assertion may be used as a C<(?(condition)yes-pattern|no-pattern)>
switch.  If I<not> used in this way, the result of evaluation of
C<code> is put into the special variable C<$^R>.  This happens
immediately, so C<$^R> can be used from other C<(?{ code })> assertions
inside the same regular expression.

The assignment to C<$^R> above is properly localized, so the old
value of C<$^R> is restored if the assertion is backtracked; compare
L<"Backtracking">.

For reasons of security, this construct is forbidden if the regular
expression involves run-time interpolation of variables, unless the
perilous C<use re 'eval'> pragma has been used (see L<re>), or the
variables contain results of C<qr//> operator (see
L<perlop/"qr/STRING/imosx">).  
d384 2
a385 2
This restriction is because of the wide-spread and remarkably convenient
custom of using run-time determined strings as patterns.  For example:
d391 34
a424 64
Before Perl knew how to execute interpolated code within a pattern,
this operation was completely safe from a security point of view,
although it could raise an exception from an illegal pattern.  If
you turn on the C<use re 'eval'>, though, it is no longer secure,
so you should only do so if you are also using taint checking.
Better yet, use the carefully constrained evaluation within a Safe
module.  See L<perlsec> for details about both these mechanisms.

=item C<(??{ code })>

B<WARNING>: This extended regular expression feature is considered
highly experimental, and may be changed or deleted without notice.
A simplified version of the syntax may be introduced for commonly
used idioms.

This is a "postponed" regular subexpression.  The C<code> is evaluated
at run time, at the moment this subexpression may match.  The result
of evaluation is considered as a regular expression and matched as
if it were inserted instead of this construct.

The C<code> is not interpolated.  As before, the rules to determine
where the C<code> ends are currently somewhat convoluted.

The following pattern matches a parenthesized group:

  $re = qr{
	     \(
	     (?:
		(?> [^()]+ )	# Non-parens without backtracking
	      |
		(??{ $re })	# Group with matching parens
	     )*
	     \)
	  }x;

=item C<< (?>pattern) >>

B<WARNING>: This extended regular expression feature is considered
highly experimental, and may be changed or deleted without notice.

An "independent" subexpression, one which matches the substring
that a I<standalone> C<pattern> would match if anchored at the given
position, and it matches I<nothing other than this substring>.  This
construct is useful for optimizations of what would otherwise be
"eternal" matches, because it will not backtrack (see L<"Backtracking">).
It may also be useful in places where the "grab all you can, and do not
give anything back" semantic is desirable.

For example: C<< ^(?>a*)ab >> will never match, since C<< (?>a*) >>
(anchored at the beginning of string, as above) will match I<all>
characters C<a> at the beginning of string, leaving no C<a> for
C<ab> to match.  In contrast, C<a*ab> will match the same as C<a+b>,
since the match of the subgroup C<a*> is influenced by the following
group C<ab> (see L<"Backtracking">).  In particular, C<a*> inside
C<a*ab> will match fewer characters than a standalone C<a*>, since
this makes the tail match.

An effect similar to C<< (?>pattern) >> may be achieved by writing
C<(?=(pattern))\1>.  This matches the same substring as a standalone
C<a+>, and the following C<\1> eats the matched string; it therefore
makes a zero-length assertion into an analogue of C<< (?>...) >>.
(The difference between these two constructs is that the second one
uses a capturing group, thus shifting ordinals of backreferences
in the rest of a regular expression.)
d426 2
a427 1
Consider this pattern:
d431 1
a431 1
	    [^()]+		# x+
d438 11
a448 10
That will efficiently match a nonempty group with matching parentheses
two levels deep or less.  However, if there is no such group, it
will take virtually forever on a long string.  That's because there
are so many different ways to split a long string into several
substrings.  This is what C<(.+)+> is doing, and C<(.+)+> is similar
to a subpattern of the above pattern.  Consider how the pattern
above detects no-match on C<((()aaaaaaaaaaaaaaaaaa> in several
seconds, but that each extra letter doubles this time.  This
exponential performance will make it appear that your program has
hung.  However, a tiny change to this pattern
d452 1
a452 1
	    (?> [^()]+ )	# change x+ above to (?> x+ )
d459 1
a459 1
which uses C<< (?>...) >> matches exactly when the one above does (verifying
d463 1
a463 2
the C<use warnings> pragma or B<-w> switch saying it
C<"matches the null string many times">):
d465 2
a466 2
On simple groups, such as the pattern C<< (?> [^()]+ ) >>, a comparable
effect may be achieved by negative look-ahead, as in C<[^()]+ (?! [^()] )>.
a468 21
The "grab all you can, and do not give anything back" semantic is desirable
in many situations where on the first sight a simple C<()*> looks like
the correct solution.  Suppose we parse text with comments being delimited
by C<#> followed by some optional (horizontal) whitespace.  Contrary to
its appearence, C<#[ \t]*> I<is not> the correct subexpression to match
the comment delimiter, because it may "give up" some whitespace if
the remainder of the pattern can be made to match that way.  The correct
answer is either one of these:

    (?>#[ \t]*)
    #[ \t]*(?![ \t])

For example, to grab non-empty comments into $1, one should use either
one of these:

    / (?> \# [ \t]* ) (        .+ ) /x;
    /     \# [ \t]*   ( [^ \t] .* ) /x;

Which one you pick depends on which of these expressions better reflects
the above specification of comments.

a472 3
B<WARNING>: This extended regular expression feature is considered
highly experimental, and may be changed or deleted without notice.

d475 1
a475 1
matched), or look-ahead/look-behind/evaluate zero-width assertion.
d477 1
a477 1
For example:
d487 26
d515 5
a521 5
NOTE: This section presents an abstract approximation of regular
expression behavior.  For a more rigorous (and complicated) view of
the rules involved in selecting a match among possible alternatives,
see L<Combining pieces together>.

d525 1
a525 2
C<+?>, C<{n,m}>, and C<{n,m}?>.  Backtracking is often optimized
internally, but the general principle outlined here is valid.
d564 1
a564 1
I<first> "foo" and the I<last> "bar".  Here it's more effective
d627 1
a627 1
When using look-ahead assertions and negations, this can all get even
a662 1

d664 1
a664 1
try to match C<(?!123> with "123", which fails.  But because
d672 1
a672 1
"123".  It's "C123", which suffices.
d674 5
a678 5
We can deal with this by using both an assertion and a negation.
We'll say that the first part in $1 must be followed both by a digit
and by something that's not "123".  Remember that the look-aheads
are zero-width expressions--they only look, but don't consume any
of the string in their match.  So rewriting this way produces what
d687 1
a687 1
they're ANDed together, just as you'd use any built-in assertions:  C</^$/>
d695 17
a711 19
B<WARNING>: particularly complicated regular expressions can take
exponential time to solve because of the immense number of possible
ways they can use backtracking to try match.  For example, without
internal optimizations done by the regular expression engine, this will
take a painfully long time to run:

    'aaaaaaaaaaaa' =~ /((a{0,5}){0,5}){0,5}[c]/

And if you used C<*>'s instead of limiting it to 0 through 5 matches,
then it would take forever--or until you ran out of stack space.

A powerful tool for optimizing such beasts is what is known as an
"independent group",
which does not backtrack (see L<C<< (?>pattern) >>>).  Note also that
zero-length look-ahead/look-behind assertions will not backtrack to make
the tail match, since they are in "logical" context: only 
whether they match is considered relevant.  For an example
where side-effects of look-ahead I<might> have influenced the
following match, see L<C<< (?>pattern) >>>.
d729 1
a729 1
in the list.  Within a list, the "-" character specifies a
d731 2
a732 4
inclusive.  If you want either "-" or "]" itself to be a member of a
class, put it at the start of the list (possibly after a "^"), or
escape it with a backslash.  "-" is also taken literally when it is
at the end of the list, just before the closing "]".  (The
a735 3
Also, if you try to use the character classes C<\w>, C<\W>, C<\s>,
C<\S>, C<\d>, or C<\D> as endpoints of a range, that's not a range,
the "-" is understood literally.
d759 2
a760 2
pattern delimiter.  That's why it's common practice to include
alternatives in parentheses: to minimize confusion about where they
d774 10
a783 10
Within a pattern, you may designate subpatterns for later reference
by enclosing them in parentheses, and you may refer back to the
I<n>th subpattern later in the pattern using the metacharacter
\I<n>.  Subpatterns are numbered based on the left to right order
of their opening parenthesis.  A backreference matches whatever
actually matched the subpattern in the string being examined, not
the rules for that subpattern.  Therefore, C<(0|0x)\d*\s\1\d*> will
match "0x1234 0x4321", but not "0x1234 01234", because subpattern
1 matched "0x", even though the rule C<0|0x> could potentially match
the leading 0 in the second number.
d785 1
a785 1
=head2 Warning on \1 vs $1
d806 1
a806 1
C<${1}000>.  The operation of interpolation should not be confused
d812 1
a812 1
B<WARNING>: Difficult material (and prose) ahead.  This section needs a rewrite.
d825 1
a825 1
because of the C<*> modifier.  Another common way to create a similar cycle
d837 2
a838 2
be significantly simplified by using repeated subexpressions that
may match zero-length substrings.  Here's a simple example being:
d843 1
a843 1
Thus Perl allows such constructs, by I<forcefully breaking
d848 2
a849 3
The lower-level loops are I<interrupted> (that is, the loop is
broken) when Perl detects that a repeated expression matched a
zero-length substring.   Thus
d867 1
a867 1
For example:
d880 1
a880 1
The additional state of being I<matched with zero-length> is associated with
a881 103
Zero-length matches at the end of the previous match are ignored
during C<split>.

=head2 Combining pieces together

Each of the elementary pieces of regular expressions which were described
before (such as C<ab> or C<\Z>) could match at most one substring
at the given position of the input string.  However, in a typical regular
expression these elementary pieces are combined into more complicated
patterns using combining operators C<ST>, C<S|T>, C<S*> etc
(in these examples C<S> and C<T> are regular subexpressions).

Such combinations can include alternatives, leading to a problem of choice:
if we match a regular expression C<a|ab> against C<"abc">, will it match
substring C<"a"> or C<"ab">?  One way to describe which substring is
actually matched is the concept of backtracking (see L<"Backtracking">).
However, this description is too low-level and makes you think
in terms of a particular implementation.

Another description starts with notions of "better"/"worse".  All the
substrings which may be matched by the given regular expression can be
sorted from the "best" match to the "worst" match, and it is the "best"
match which is chosen.  This substitutes the question of "what is chosen?"
by the question of "which matches are better, and which are worse?".

Again, for elementary pieces there is no such question, since at most
one match at a given position is possible.  This section describes the
notion of better/worse for combining operators.  In the description
below C<S> and C<T> are regular subexpressions.

=over

=item C<ST>

Consider two possible matches, C<AB> and C<A'B'>, C<A> and C<A'> are
substrings which can be matched by C<S>, C<B> and C<B'> are substrings
which can be matched by C<T>. 

If C<A> is better match for C<S> than C<A'>, C<AB> is a better
match than C<A'B'>.

If C<A> and C<A'> coincide: C<AB> is a better match than C<AB'> if
C<B> is better match for C<T> than C<B'>.

=item C<S|T>

When C<S> can match, it is a better match than when only C<T> can match.

Ordering of two matches for C<S> is the same as for C<S>.  Similar for
two matches for C<T>.

=item C<S{REPEAT_COUNT}>

Matches as C<SSS...S> (repeated as many times as necessary).

=item C<S{min,max}>

Matches as C<S{max}|S{max-1}|...|S{min+1}|S{min}>.

=item C<S{min,max}?>

Matches as C<S{min}|S{min+1}|...|S{max-1}|S{max}>.

=item C<S?>, C<S*>, C<S+>

Same as C<S{0,1}>, C<S{0,BIG_NUMBER}>, C<S{1,BIG_NUMBER}> respectively.

=item C<S??>, C<S*?>, C<S+?>

Same as C<S{0,1}?>, C<S{0,BIG_NUMBER}?>, C<S{1,BIG_NUMBER}?> respectively.

=item C<< (?>S) >>

Matches the best match for C<S> and only that.

=item C<(?=S)>, C<(?<=S)>

Only the best match for C<S> is considered.  (This is important only if
C<S> has capturing parentheses, and backreferences are used somewhere
else in the whole regular expression.)

=item C<(?!S)>, C<(?<!S)>

For this grouping operator there is no need to describe the ordering, since
only whether or not C<S> can match is important.

=item C<(??{ EXPR })>

The ordering is the same as for the regular expression which is
the result of EXPR.

=item C<(?(condition)yes-pattern|no-pattern)>

Recall that which of C<yes-pattern> or C<no-pattern> actually matches is
already determined.  The ordering of the matches is the same as for the
chosen subexpression.

=back

The above recipes describe the ordering of matches I<at a given position>.
One more rule is needed to understand how a match is determined for the
whole regular expression: a match at an earlier position is always better
than a match at a later position.
d930 1
a930 10
=head1 BUGS

This document varies from difficult to understand to completely
and utterly opaque.  The wandering prose riddled with jargon is
hard to fathom in several places.

This document needs a rewrite that separates the tutorial content
from the reference content.

=head1 SEE ALSO
a935 2
L<perlfaq6>.

d940 1
a940 2
I<Mastering Regular Expressions> by Jeffrey Friedl, published
by O'Reilly and Associates.
@


1.1.1.4
log
@stock perl 5.6.1
@
text
@d43 1
a43 1
while still allowing "^" and "$" to match, respectively, just after
d172 1
a172 1
    \W	Match a non-"word" character
d183 1
a183 1
A C<\w> matches a single alphanumeric character or C<_>, not a whole word.
a201 1
    blank		[1]
d208 1
a208 1
    space       \s	[2]
d210 1
a210 1
    word        \w	[3]
a212 5
  [1] A GNU extension equivalent to C<[ \t]>, `all horizontal whitespace'.
  [2] Not I<exactly equivalent> to C<\s> since the C<[[:space:]]> includes
      also the (very rare) `vertical tabulator', "\ck", chr(11).
  [3] A Perl extension. 

d214 2
a215 2
Note that the C<[]> are part of the C<[::]> construct, not part of the
whole character class.  For example:
d219 1
a219 1
matches zero, one, any alphabetic character, and the percentage sign.
d222 1
a222 2
\p{} constructs and equivalent backslash character classes (if available),
will hold:
a226 1
    blank	IsSpace
d228 1
a228 1
    digit       IsDigit        \d
a233 1
                IsSpacePerl    \s
d241 2
a242 2
classes correlate with the usual isalpha(3) interface (except for
`word' and `blank').
d253 1
a253 2
32 are most often classified as control characters (assuming ASCII,
the ISO Latin character sets, and Unicode).
d257 1
a257 1
Any alphanumeric or punctuation (special) character.
d261 1
a261 1
Any alphanumeric or punctuation (special) character or space.
d265 1
a265 1
Any punctuation (special) character.
d269 1
a269 1
Any hexadecimal digit.  Though this may feel silly ([0-9A-Fa-f] would
d326 6
a331 8
\011, etc.  (Recall that 0 means octal, so \011 is the character at
number 9 in your coded character set; which would be the 10th character,
a horizontal tab under ASCII.)  Perl resolves this 
ambiguity by interpreting \10 as a backreference only if at least 10 
left parentheses have opened before it.  Likewise \11 is a 
backreference only if at least 11 left parentheses have opened 
before it.  And so on.  \1 through \9 are always interpreted as 
backreferences.
d355 1
a355 1
set (C<$+>, C<$&>, C<$`>, and C<$'>) are all dynamically scoped
d380 1
a380 1
use for a pattern. Simply quote all non-"word" characters:
a383 1
(If C<use locale> is set, then this depends on the current locale.)
d676 1
a676 1
its appearance, C<#[ \t]*> I<is not> the correct subexpression to match
d904 1
a904 1
    'aaaaaaaaaaaa' =~ /((a{0,5}){0,5})*[c]/
d906 2
a907 6
And if you used C<*>'s in the internal groups instead of limiting them
to 0 through 5 matches, then it would take forever--or until you ran
out of stack space.  Moreover, these internal optimizations are not
always applicable.  For example, if you put C<{0,5}> instead of C<*>
on the external group, no current optimization is applicable, and the
match takes a long time to finish.
d942 4
a945 4
specifies a class containing twenty-six characters, even on EBCDIC
based coded character sets.)  Also, if you try to use the character 
classes C<\w>, C<\W>, C<\s>, C<\S>, C<\d>, or C<\D> as endpoints of 
a range, that's not a range, the "-" is understood literally.
d957 5
a961 5
of octal digits, matches the character whose coded character set value 
is I<nnn>.  Similarly, \xI<nn>, where I<nn> are hexadecimal digits, 
matches the character whose numeric value is I<nn>. The expression \cI<x> 
matches the character control-I<x>.  Finally, the "." metacharacter 
matches any character except "\n" (unless you use C</s>).
d1083 1
a1083 1
results in C<< <><b><><a><><r><> >>.  At each position of the string the best
d1123 1
a1123 1
=over 4
a1263 2

L<perlebcdic>.
@


1.1.1.5
log
@stock perl 5.8.0 from CPAN
@
text
@d7 4
a10 10
This page describes the syntax of regular expressions in Perl.  

if you haven't used regular expressions before, a quick-start
introduction is available in L<perlrequick>, and a longer tutorial
introduction is available in L<perlretut>.

For reference on how regular expressions are used in matching
operations, plus various examples of the same, see discussions of
C<m//>, C<s///>, C<qr//> and C<??> in L<perlop/"Regexp Quote-Like
Operators">.
d180 8
a187 11
        equivalent to (?:\PM\pM*)
    \C	Match a single C char (octet) even under Unicode.
	NOTE: breaks up characters into their UTF-8 bytes,
	so you may end up with malformed pieces of UTF-8.

A C<\w> matches a single alphanumeric character (an alphabetic
character, or a decimal digit) or C<_>, not a whole word.  Use C<\w+>
to match a string of Perl-identifier characters (which isn't the same
as matching an English word).  If C<use locale> is in effect, the list
of alphabetic characters generated by C<\w> is taken from the current
locale.  See L<perllocale>.  You may use C<\w>, C<\W>, C<\s>, C<\S>,
d189 2
a190 5
as endpoints of a range, that's not a range, the "-" is understood
literally.  If Unicode is in effect, C<\s> matches also "\x{85}",
"\x{2028}, and "\x{2029}", see L<perlunicode> for more details about
C<\pP>, C<\PP>, and C<\X>, and L<perluniintro> about Unicode in general.
You can define your own C<\p> and C<\P> propreties, see L<perlunicode>.
d214 4
a217 16
=over

=item [1]

A GNU extension equivalent to C<[ \t]>, `all horizontal whitespace'.

=item [2]

Not exactly equivalent to C<\s> since the C<[[:space:]]> includes
also the (very rare) `vertical tabulator', "\ck", chr(11).

=item [3]

A Perl extension, see above.

=back
d227 3
a229 4
The following equivalences to Unicode \p{} constructs and equivalent
backslash character classes (if available), will hold:

    [:...:]	\p{...}		backslash
d263 1
a263 2
the ISO Latin character sets, and Unicode), as is the character with
the ord() value of 127 (C<DEL>).
d271 1
a271 1
Any alphanumeric or punctuation (special) character or the space character.
d287 1
a287 1
    POSIX	traditional Unicode
d293 2
a294 4
Perl respects the POSIX standard in that POSIX character classes are
only supported within a character class.  The POSIX character classes
[.cc.] and [=cc=] are recognized but B<not> supported and trying to
use them will cause an error.
d324 1
a324 5
an lvalue: see L<perlfunc/pos>. Currently C<\G> is only fully
supported when anchored to the start of the pattern; while it
is permitted to use it elsewhere, as in C</(?<=\G..)./g>, some
such uses (C</.\G/g>, for example) currently cause problems, and
it is recommended that you avoid such usage for now.
d363 2
a364 5
everything before the matched string.  C<$'> returns everything
after the matched string. And C<$^N> contains whatever was matched by
the most-recently closed group (submatch). C<$^N> can be used in
extended patterns (see below), for example to assign a submatch to a
variable. 
d367 1
a367 1
set (C<$+>, C<$&>, C<$`>, C<$'>, and C<$^N>) are all dynamically scoped
d439 6
a444 8
One or more embedded pattern-match modifiers, to be turned on (or
turned off, if preceded by C<->) for the remainder of the pattern or
the remainder of the enclosing pattern group (if any). This is
particularly useful for dynamic patterns, such as those read in from a
configuration file, read in as an argument, are specified in a table
somewhere, etc.  Consider the case that some of which want to be case
sensitive and some do not.  The case insensitive ones need to include
merely C<(?i)> at the front of the pattern.  For example:
d454 2
a455 1
These modifiers are restored at the end of the enclosing group. For example,
a532 8
This feature can be used together with the special variable C<$^N> to
capture the results of submatches in variables without having to keep
track of the number of nested parentheses. For example:

  $_ = "The brown fox jumps over the lazy dog";
  /the (\S+)(?{ $color = $^N }) (\S+)(?{ $animal = $^N })/i;
  print "color = $color, animal = $animal\n";

d679 1
a679 1
C<"matches null string many times in regex">.
d787 1
a787 1
of a string, and you also want to keep the preceding part of the match.
d843 1
a843 1
trickier.  Imagine you'd like to find a sequence of non-digits not
d853 1
a853 1
why that pattern matches, contrary to popular expectations:
d1020 1
a1020 1
PerlThink, the righthand side of an C<s///> is a double-quoted string.  C<\1> in
a1270 4

L<perlrequick>.

L<perlretut>.
@


1.1.1.6
log
@perl 5.8.2 from CPAN
@
text
@d9 1
a9 1
If you haven't used regular expressions before, a quick-start
d124 1
a124 2
as a regular character.  In particular, the lower bound
is not optional.)  The "*" modifier is equivalent to C<{0,}>, the "+"
a189 1
	Unsupported in lookbehind.
d401 1
a401 1
The numbered match variables ($1, $2, $3, etc.) and the related punctuation
a405 4
B<NOTE>: failed matches in Perl do not reset the match variables,
which makes easier to write code that tests for a series of more
specific cases and remembers the best match.

d565 1
a565 1
This zero-width assertion evaluates any embedded Perl code.  It
d628 1
a628 1
compartment.  See L<perlsec> for details about both these mechanisms.
@


1.1.1.7
log
@perl 5.8.3 from CPAN
@
text
@a582 4
Inside the C<(?{...})> block, C<$_> refers to the string the regular
expression is matching against. You can also use C<pos()> to know what is
the current position of matching withing this string.

@


1.1.1.8
log
@perl 5.8.6 from CPAN
@
text
@d204 1
a204 1
You can define your own C<\p> and C<\P> properties, see L<perlunicode>.
d585 1
a585 1
the current position of matching within this string.
@


1.1.1.9
log
@perl 5.8.8 import
@
text
@a1 1
X<regular expression> X<regex> X<regexp>
a26 2
X</i> X<regex, case-insensitive> X<regexp, case-insensitive>
X<regular expression, case-insensitive>
a33 1
X</m> X<regex, multiline> X<regexp, multiline> X<regular expression, multiline>
a39 2
X</s> X<regex, single-line> X<regexp, single-line>
X<regular expression, single-line>
a52 1
X</x>
a76 1
X</x>
a87 3
X<metacharacter>
X<\> X<^> X<.> X<$> X<|> X<(> X<()> X<[> X<[]>

a106 1
X<^> X<$> X</m>
a112 1
X<.> X</s>
a114 1
X<metacharacter> X<quantifier> X<*> X<+> X<?> X<{n}> X<{n,}> X<{n,m}>
a137 2
X<metacharacter> X<greedy> X<greedyness>
X<?> X<*?> X<+?> X<??> X<{n}?> X<{n,}?> X<{n,m}?>
a147 2
X<\t> X<\n> X<\r> X<\f> X<\a> X<\l> X<\u> X<\L> X<\U> X<\E> X<\Q>
X<\0> X<\c> X<\N> X<\x>
a176 3
X<metacharacter>
X<\w> X<\W> X<\s> X<\S> X<\d> X<\D> X<\X> X<\p> X<\P> X<\C>
X<word> X<whitespace>
a204 1
X<\w> X<\W> X<word>
a206 1
X<character class>
a211 3
X<character class>
X<alpha> X<alnum> X<ascii> X<blank> X<cntrl> X<digit> X<graph>
X<lower> X<print> X<punct> X<space> X<upper> X<word> X<xdigit>
d232 1
a232 1
A GNU extension equivalent to C<[ \t]>, "all horizontal whitespace".
d237 1
a237 1
also the (very rare) "vertical tabulator", "\ck", chr(11).
a254 1
X<character class> X<\p> X<\p{}>
d261 1
a261 1
    blank       IsSpace
d278 1
a278 1
"word" and "blank").
a284 1
X<cntrl>
a293 1
X<graph>
a297 1
X<print>
a301 1
X<punct>
a305 1
X<xdigit>
a313 1
X<character class, negation>
a326 4
X<zero-width assertion> X<assertion> X<regex, zero-width assertion>
X<regexp, zero-width assertion>
X<regular expression, zero-width assertion>
X<\b> X<\B> X<\A> X<\Z> X<\z> X<\G>
a346 1
X<\b> X<\A> X<\Z> X<\z> X</m>
a358 1
X<\G>
a366 2
X<regex, capture buffer> X<regexp, capture buffer>
X<regular expression, capture buffer> X<backreference>
a401 1
X<$+> X<$^N> X<$&> X<$`> X<$'>
a406 3
X<$+> X<$^N> X<$&> X<$`> X<$'>
X<$1> X<$2> X<$3> X<$4> X<$5> X<$6> X<$7> X<$8> X<$9>

d409 1
a409 1
which makes it easier to write code that tests for a series of more
a424 1
X<$&> X<$`> X<$'>
a471 1
X<(?#)>
a478 1
X<(?)>
a505 1
X<(?:)>
a530 1
X<(?=)> X<look-ahead, positive> X<lookahead, positive>
a535 1
X<(?!)> X<look-ahead, negative> X<lookahead, negative>
a554 1
X<(?<=)> X<look-behind, positive> X<lookbehind, positive>
a560 1
X<(?<!)> X<look-behind, negative> X<lookbehind, negative>
a566 1
X<(?{})> X<regex, code in> X<regexp, code in> X<regular expression, code in>
a640 3
X<(??{})>
X<regex, postponed> X<regexp, postponed> X<regular expression, postponed>
X<regex, recursive> X<regexp, recursive> X<regular expression, recursive>
a667 1
X<backtrack> X<backtracking>
a760 1
X<(?()>
a783 1
X<backtrack> X<backtracking>
d909 2
a910 2
    $x = 'ABC123';
    $y = 'ABC445';
d912 2
a913 2
    print "1: got $1\n" if $x =~ /^(ABC)(?!123)/;
    print "2: got $1\n" if $y =~ /^(ABC)(?!123)/;
d915 2
a916 2
    print "3: got $1\n" if $x =~ /^(\D*)(?!123)/;
    print "4: got $1\n" if $y =~ /^(\D*)(?!123)/;
d951 2
a952 2
    print "5: got $1\n" if $x =~ /^(\D*)(?=\d)(?!123)/;
    print "6: got $1\n" if $y =~ /^(\D*)(?=\d)(?!123)/;
a989 1
X<regular expression, version 8> X<regex, version 8> X<regexp, version 8>
d1274 1
a1274 1
matches at boundary between whitespace characters and non-whitespace
d1291 1
a1291 3
    # We must also take care of not escaping the legitimate \\Y|
    # sequence, hence the presence of '\\' in the conversion rules.
    my %rules = ( '\\' => '\\\\', 
@


1.1.1.10
log
@import perl 5.10.0 from CPAN
@
text
@d8 1
a8 1
This page describes the syntax of regular expressions in Perl.
a18 3

=head2 Modifiers

d22 1
a22 1
is used by Perl are detailed in L<perlop/"Regexp Quote-Like Operators"> and
d27 9
d50 5
a54 1
Used together, as /ms, they let the "." match any character whatsoever,
a57 9
=item i
X</i> X<regex, case-insensitive> X<regexp, case-insensitive>
X<regular expression, case-insensitive>

Do case-insensitive pattern matching.

If C<use locale> is in effect, the case map is taken from the current
locale.  See L<perllocale>.

a62 15
=item p
X</p> X<regex, preserve> X<regexp, preserve>

Preserve the string matched such that ${^PREMATCH}, {$^MATCH}, and
${^POSTMATCH} are available for use after matching.

=item g and c
X</g> X</c>

Global matching, and keep the Current position after failed matching.
Unlike i, m, s and x, these two flags affect the way the regex is used
rather than the regex itself. See
L<perlretut/"Using regular expressions in Perl"> for further explanation
of the g and c modifiers.

d77 7
a83 8
class, where they are unaffected by C</x>), then you'll either have to
escape them (using backslashes or C<\Q...\E>) or encode them using octal
or hex escapes.  Taken together, these features go a long way towards
making Perl's regular expressions more readable.  Note that you have to
be careful not to include the pattern delimiter in the comment--perl has
no way of knowing you did not intend to close the pattern early.  See
the C-comment deletion code in L<perlop>.  Also note that anything inside
a C<\Q...\E> stays unaffected by C</x>.
d88 1
a88 3
=head3 Metacharacters

The patterns used in Perl pattern matching evolved from the ones supplied in
d114 1
a114 2
newline within the string (except if the newline is the last character in
the string), and "$" will match before any newline.  At the
d117 1
a117 1
but this practice has been removed in perl 5.9.)
d122 3
a124 1
the string is a single line--even if it isn't.
a126 2
=head3 Quantifiers

d139 2
a140 2
is not optional.)  The "*" quantifier is equivalent to C<{0,}>, the "+"
quantifier to C<{1,}>, and the "?" quantifier to C<{0,1}>.  n and m are limited
d152 1
a152 1
X<metacharacter> X<greedy> X<greediness>
d155 6
a160 39
    *?     Match 0 or more times, not greedily
    +?     Match 1 or more times, not greedily
    ??     Match 0 or 1 time, not greedily
    {n}?   Match exactly n times, not greedily
    {n,}?  Match at least n times, not greedily
    {n,m}? Match at least n but not more than m times, not greedily

By default, when a quantified subpattern does not allow the rest of the
overall pattern to match, Perl will backtrack. However, this behaviour is
sometimes undesirable. Thus Perl provides the "possessive" quantifier form
as well.

    *+     Match 0 or more times and give nothing back
    ++     Match 1 or more times and give nothing back
    ?+     Match 0 or 1 time and give nothing back
    {n}+   Match exactly n times and give nothing back (redundant)
    {n,}+  Match at least n times and give nothing back
    {n,m}+ Match at least n but not more than m times and give nothing back

For instance,

   'aaaa' =~ /a++a/

will never match, as the C<a++> will gobble up all the C<a>'s in the
string and won't leave any for the remaining part of the pattern. This
feature can be extremely useful to give perl hints about where it
shouldn't backtrack. For instance, the typical "match a double-quoted
string" problem can be most efficiently performed when written as:

   /"(?:[^"\\]++|\\.)*+"/

as we know that if the final quote does not match, backtracking will not
help. See the independent subexpression C<< (?>...) >> for more details;
possessive quantifiers are just syntactic sugar for that construct. For
instance the above example could also be written as follows:

   /"(?>(?:(?>[^"\\]+)|\\.)*)"/

=head3 Escape sequences
d164 1
a164 1
X<\t> X<\n> X<\r> X<\f> X<\e> X<\a> X<\l> X<\u> X<\L> X<\U> X<\E> X<\Q>
d173 5
a177 5
    \033	octal char            (example: ESC)
    \x1B	hex char              (example: ESC)
    \x{263a}	long hex char         (example: Unicode SMILEY)
    \cK		control char          (example: VT)
    \N{name}	named Unicode character
a193 2
=head3 Character Classes and other Special Escapes

d195 1
d197 1
a197 2
X<\g> X<\k> X<\N> X<\K> X<\v> X<\V> X<\h> X<\H>
X<word> X<whitespace> X<character class> X<backreference>
d199 14
a212 27
    \w	     Match a "word" character (alphanumeric plus "_")
    \W	     Match a non-"word" character
    \s	     Match a whitespace character
    \S	     Match a non-whitespace character
    \d	     Match a digit character
    \D	     Match a non-digit character
    \pP	     Match P, named property.  Use \p{Prop} for longer names.
    \PP	     Match non-P
    \X	     Match eXtended Unicode "combining character sequence",
             equivalent to (?:\PM\pM*)
    \C	     Match a single C char (octet) even under Unicode.
	     NOTE: breaks up characters into their UTF-8 bytes,
	     so you may end up with malformed pieces of UTF-8.
	     Unsupported in lookbehind.
    \1       Backreference to a specific group.
	     '1' may actually be any positive integer.
    \g1      Backreference to a specific or previous group,
    \g{-1}   number may be negative indicating a previous buffer and may
             optionally be wrapped in curly brackets for safer parsing.
    \g{name} Named backreference
    \k<name> Named backreference
    \K       Keep the stuff left of the \K, don't include it in $&
    \v       Vertical whitespace
    \V       Not vertical whitespace
    \h       Horizontal whitespace
    \H       Not horizontal whitespace
    \R       Linebreak
d220 6
a225 7
C<\d>, and C<\D> within character classes, but they aren't usable
as either end of a range. If any of them precedes or follows a "-",
the "-" is understood literally. If Unicode is in effect, C<\s> matches
also "\x{85}", "\x{2028}", and "\x{2029}". See L<perlunicode> for more
details about C<\pP>, C<\PP>, C<\X> and the possibility of defining
your own C<\p> and C<\P> properties, and L<perluniintro> about Unicode
in general.
a227 9
C<\R> will atomically match a linebreak, including the network line-ending
"\x0D\x0A".  Specifically, X<\R> is exactly equivalent to

  (?>\x0D\x0A?|[\x0A-\x0C\x85\x{2028}\x{2029}])

B<Note:> C<\R> has no special meaning inside of a character class;
use C<\v> instead (vertical whitespace).
X<\R>

d233 2
a234 11
is also available.  Note that the C<[> and C<]> brackets are I<literal>;
they must always be used within a character class expression.

    # this is correct:
    $string =~ /[[:alpha:]]/;

    # this is not, and will generate a warning:
    $string =~ /[:alpha:]/;

The available classes and their backslash equivalents (if available) are
as follows:
d263 1
a263 1
also the (very rare) "vertical tabulator", "\cK" or chr(11) in ASCII.
d277 1
a277 1
matches zero, one, any alphabetic character, and the percent sign.
d283 1
a283 1
    [[:...:]]	\p{...}		backslash
d288 1
a288 1
    blank
d301 1
a301 1
For example C<[[:lower:]]> and C<\p{IsLower}> are equivalent.
d307 1
a307 1
The other named classes are:
d317 1
a317 1
32 are usually classified as control characters (assuming ASCII,
d348 1
a348 1
    POSIX         traditional  Unicode
d350 3
a352 3
    [[:^digit:]]    \D         \P{IsDigit}
    [[:^space:]]    \S         \P{IsSpace}
    [[:^word:]]	    \W         \P{IsWord}
a358 2
=head3 Assertions

d366 1
a366 1
    \B	Match except at a word boundary
d392 5
a396 4
an lvalue: see L<perlfunc/pos>. Note that the rule for zero-length
matches is modified somewhat, in that contents to the left of C<\G> is
not counted when determining the length of the match. Thus the following
will not match forever:
d399 4
a402 20
    $str = 'ABC';
    pos($str) = 1;
    while (/.\G/g) {
        print $&;
    }

It will print 'A' and then terminate, as it considers the match to
be zero-width, and thus will not match at the same position twice in a
row.

It is worth noting that C<\G> improperly used can result in an infinite
loop. Take care when using patterns that include C<\G> in an alternation.

=head3 Capture buffers

The bracketing construct C<( ... )> creates capture buffers. To refer
to the current contents of a buffer later on, within the same pattern,
use \1 for the first, \2 for the second, and so on.
Outside the match use "$" instead of "\".  (The
\<digit> notation works in certain circumstances outside
d413 5
a417 5
a horizontal tab under ASCII.)  Perl resolves this
ambiguity by interpreting \10 as a backreference only if at least 10
left parentheses have opened before it.  Likewise \11 is a
backreference only if at least 11 left parentheses have opened
before it.  And so on.  \1 through \9 are always interpreted as
a419 38
X<\g{1}> X<\g{-1}> X<\g{name}> X<relative backreference> X<named backreference>
In order to provide a safer and easier way to construct patterns using
backreferences, Perl provides the C<\g{N}> notation (starting with perl
5.10.0). The curly brackets are optional, however omitting them is less
safe as the meaning of the pattern can be changed by text (such as digits)
following it. When N is a positive integer the C<\g{N}> notation is
exactly equivalent to using normal backreferences. When N is a negative
integer then it is a relative backreference referring to the previous N'th
capturing group. When the bracket form is used and N is not an integer, it
is treated as a reference to a named buffer.

Thus C<\g{-1}> refers to the last buffer, C<\g{-2}> refers to the
buffer before that. For example:

        /
         (Y)            # buffer 1
         (              # buffer 2
            (X)         # buffer 3
            \g{-1}      # backref to buffer 3
            \g{-3}      # backref to buffer 1
         )
        /x

and would match the same as C</(Y) ( (X) \3 \1 )/x>.

Additionally, as of Perl 5.10.0 you may use named capture buffers and named
backreferences. The notation is C<< (?<name>...) >> to declare and C<< \k<name> >>
to reference. You may also use apostrophes instead of angle brackets to delimit the
name; and you may use the bracketed C<< \g{name} >> backreference syntax.
It's possible to refer to a named capture buffer by absolute and relative number as well.
Outside the pattern, a named capture buffer is available via the C<%+> hash.
When different buffers within the same pattern have the same name, C<$+{name}>
and C<< \k<name> >> refer to the leftmost defined group. (Thus it's possible
to do things with named capture buffers that would otherwise require C<(??{})>
code to accomplish.)
X<named capture buffer> X<regular expression, named capture buffer>
X<%+> X<$+{name}> X<< \k<name> >>

d424 3
a426 8
    /(.)\1/                         # find first doubled char
         and print "'$1' is the first doubled character\n";

    /(?<char>.)\k<char>/            # ... a different way
         and print "'$+{char}' is the first doubled character\n";

    /(?'char'.)\1/                  # ... mix and match
         and print "'$1' is the first doubled character\n";
d442 1
a442 1
variable.
d453 1
a453 1
B<NOTE>: Failed matches in Perl do not reset the match variables,
a471 9
As a workaround for this problem, Perl 5.10.0 introduces C<${^PREMATCH}>,
C<${^MATCH}> and C<${^POSTMATCH}>, which are equivalent to C<$`>, C<$&>
and C<$'>, B<except> that they are only guaranteed to be defined after a
successful match that was executed with the C</p> (preserve) modifier.
The use of these variables incurs no global performance penalty, unlike
their punctuation char equivalents, however at the trade-off that you
have to tell perl when you want to use them.
X</p> X<p modifier>

d525 1
a525 1
=item C<(?pimsx-imsx)>
d532 4
a535 4
configuration file, taken from an argument, or specified in a table
somewhere.  Consider the case where some patterns want to be case
sensitive and some do not:  The case insensitive ones merely need to
include C<(?i)> at the front of the pattern.  For example:
d538 1
a538 1
    if ( /$pattern/i ) { }
d543 1
a543 1
    if ( /$pattern/ ) { }
d549 3
a551 8
will match C<blah> in any case, some spaces, and an exact (I<including the case>!)
repetition of the previous word, assuming the C</x> modifier, and no C</i>
modifier outside this group.

Note that the C<p> modifier is special in that it can only be enabled,
not disabled, and that its presence anywhere in a pattern has a global
effect. Thus C<(?-p)> and C<(?-p:...)> are meaningless and will warn
when executed under C<use warnings>.
d571 1
a571 1
C<(?imsx-imsx)>.  For example,
a578 40
=item C<(?|pattern)>
X<(?|)> X<Branch reset>

This is the "branch reset" pattern, which has the special property
that the capture buffers are numbered from the same starting point
in each alternation branch. It is available starting from perl 5.10.0.

Capture buffers are numbered from left to right, but inside this
construct the numbering is restarted for each branch.

The numbering within each branch will be as normal, and any buffers
following this construct will be numbered as though the construct
contained only one branch, that being the one with the most capture
buffers in it.

This construct will be useful when you want to capture one of a
number of alternative matches.

Consider the following pattern.  The numbers underneath show in
which buffer the captured content will be stored.


    # before  ---------------branch-reset----------- after        
    / ( a )  (?| x ( y ) z | (p (q) r) | (t) u (v) ) ( z ) /x
    # 1            2         2  3        2     3     4  

Note: as of Perl 5.10.0, branch resets interfere with the contents of
the C<%+> hash, that holds named captures. Consider using C<%-> instead.

=item Look-Around Assertions
X<look-around assertion> X<lookaround assertion> X<look-around> X<lookaround>

Look-around assertions are zero width patterns which match a specific
pattern without including it in C<$&>. Positive assertions match when
their subpattern matches, negative assertions match when their subpattern
fails. Look-behind matches text up to the current match position,
look-ahead matches text following the current match position.

=over 4

d605 2
a606 2
=item C<(?<=pattern)> C<\K>
X<(?<=)> X<look-behind, positive> X<lookbehind, positive> X<\K>
a611 17
There is a special form of this construct, called C<\K>, which causes the
regex engine to "keep" everything it had matched prior to the C<\K> and
not include it in C<$&>. This effectively provides variable length
look-behind. The use of C<\K> inside of another look-around assertion
is allowed, but the behaviour is currently not well defined.

For various reasons C<\K> may be significantly more efficient than the
equivalent C<< (?<=...) >> construct, and it is especially useful in
situations where you want to efficiently remove something following
something else in a string. For instance

  s/(foo)bar/$1/g;

can be rewritten as the much more efficient

  s/foo\Kbar//g;

a618 55
=back

=item C<(?'NAME'pattern)>

=item C<< (?<NAME>pattern) >>
X<< (?<NAME>) >> X<(?'NAME')> X<named capture> X<capture>

A named capture buffer. Identical in every respect to normal capturing
parentheses C<()> but for the additional fact that C<%+> or C<%-> may be
used after a successful match to refer to a named buffer. See C<perlvar>
for more details on the C<%+> and C<%-> hashes.

If multiple distinct capture buffers have the same name then the
$+{NAME} will refer to the leftmost defined buffer in the match.

The forms C<(?'NAME'pattern)> and C<< (?<NAME>pattern) >> are equivalent.

B<NOTE:> While the notation of this construct is the same as the similar
function in .NET regexes, the behavior is not. In Perl the buffers are
numbered sequentially regardless of being named or not. Thus in the
pattern

  /(x)(?<foo>y)(z)/

$+{foo} will be the same as $2, and $3 will contain 'z' instead of
the opposite which is what a .NET regex hacker might expect.

Currently NAME is restricted to simple identifiers only.
In other words, it must match C</^[_A-Za-z][_A-Za-z0-9]*\z/> or
its Unicode extension (see L<utf8>),
though it isn't extended by the locale (see L<perllocale>).

B<NOTE:> In order to make things easier for programmers with experience
with the Python or PCRE regex engines, the pattern C<< (?PE<lt>NAMEE<gt>pattern) >>
may be used instead of C<< (?<NAME>pattern) >>; however this form does not
support the use of single quotes as a delimiter for the name.

=item C<< \k<NAME> >>

=item C<< \k'NAME' >>

Named backreference. Similar to numeric backreferences, except that
the group is designated by name and not number. If multiple groups
have the same name then it refers to the leftmost defined group in
the current match.

It is an error to refer to a name not defined by a C<< (?<NAME>) >>
earlier in the pattern.

Both forms are equivalent.

B<NOTE:> In order to make things easier for programmers with experience
with the Python or PCRE regex engines, the pattern C<< (?P=NAME) >>
may be used instead of C<< \k<NAME> >>.

d623 1
a623 3
experimental, and may be changed without notice. Code executed that
has side effects may not perform identically from version to version
due to the effect of future optimisations in the regex engine.
d646 1
a646 1
  m<
d649 1
a649 1
       a
d653 1
a653 1
     )*
d659 1
a659 1
will set C<$res = 4>.  Note that after the match, C<$cnt> returns to the globally
a672 7
Due to an unfortunate implementation issue, the Perl code contained in these
blocks is treated as a compile time closure that can have seemingly bizarre
consequences when used with lexically scoped variables inside of subroutines
or loops.  There are various workarounds for this, including simply using
global variables instead.  If you are using this construct and strange results
occur then check for the use of lexically scoped variables.

d677 1
a677 1
L<perlop/"qr/STRING/imosx">).
d679 1
a679 1
This restriction is due to the wide-spread and remarkably convenient
a693 4
Because Perl's regex engine is currently not re-entrant, interpolated
code may not invoke the regex engine either directly with C<m//> or C<s///>),
or indirectly with functions such as C<split>.

d697 1
d700 3
a702 3
experimental, and may be changed without notice. Code executed that
has side effects may not perform identically from version to version
due to the effect of future optimisations in the regex engine.
d707 1
a707 9
if it were inserted instead of this construct.  Note that this means
that the contents of capture buffers defined inside an eval'ed pattern
are not available outside of the pattern, and vice versa, there is no
way for the inner pattern to refer to a capture buffer defined outside.
Thus,

    ('a' x 100)=~/(??{'(.)' x 100})/

B<will> match, it will B<not> set $1.
d724 2
a725 2
See also C<(?PARNO)> for a different, more efficient way to accomplish
the same task.
d727 2
a728 194
Because perl's regex engine is not currently re-entrant, delayed
code may not invoke the regex engine either directly with C<m//> or C<s///>),
or indirectly with functions such as C<split>.

Recursing deeper than 50 times without consuming any input string will
result in a fatal error.  The maximum depth is compiled into perl, so
changing it requires a custom build.

=item C<(?PARNO)> C<(?-PARNO)> C<(?+PARNO)> C<(?R)> C<(?0)>
X<(?PARNO)> X<(?1)> X<(?R)> X<(?0)> X<(?-1)> X<(?+1)> X<(?-PARNO)> X<(?+PARNO)>
X<regex, recursive> X<regexp, recursive> X<regular expression, recursive>
X<regex, relative recursion>

Similar to C<(??{ code })> except it does not involve compiling any code,
instead it treats the contents of a capture buffer as an independent
pattern that must match at the current position.  Capture buffers
contained by the pattern will have the value as determined by the
outermost recursion.

PARNO is a sequence of digits (not starting with 0) whose value reflects
the paren-number of the capture buffer to recurse to. C<(?R)> recurses to
the beginning of the whole pattern. C<(?0)> is an alternate syntax for
C<(?R)>. If PARNO is preceded by a plus or minus sign then it is assumed
to be relative, with negative numbers indicating preceding capture buffers
and positive ones following. Thus C<(?-1)> refers to the most recently
declared buffer, and C<(?+1)> indicates the next buffer to be declared.
Note that the counting for relative recursion differs from that of
relative backreferences, in that with recursion unclosed buffers B<are>
included.

The following pattern matches a function foo() which may contain
balanced parentheses as the argument.

  $re = qr{ (                    # paren group 1 (full function)
              foo
              (                  # paren group 2 (parens)
                \(
                  (              # paren group 3 (contents of parens)
                  (?:
                   (?> [^()]+ )  # Non-parens without backtracking
                  |
                   (?2)          # Recurse to start of paren group 2
                  )*
                  )
                \)
              )
            )
          }x;

If the pattern was used as follows

    'foo(bar(baz)+baz(bop))'=~/$re/
        and print "\$1 = $1\n",
                  "\$2 = $2\n",
                  "\$3 = $3\n";

the output produced should be the following:

    $1 = foo(bar(baz)+baz(bop))
    $2 = (bar(baz)+baz(bop))
    $3 = bar(baz)+baz(bop)

If there is no corresponding capture buffer defined, then it is a
fatal error.  Recursing deeper than 50 times without consuming any input
string will also result in a fatal error.  The maximum depth is compiled
into perl, so changing it requires a custom build.

The following shows how using negative indexing can make it
easier to embed recursive patterns inside of a C<qr//> construct
for later use:

    my $parens = qr/(\((?:[^()]++|(?-1))*+\))/;
    if (/foo $parens \s+ + \s+ bar $parens/x) {
       # do something here...
    }

B<Note> that this pattern does not behave the same way as the equivalent
PCRE or Python construct of the same form. In Perl you can backtrack into
a recursed group, in PCRE and Python the recursed into group is treated
as atomic. Also, modifiers are resolved at compile time, so constructs
like (?i:(?1)) or (?:(?i)(?1)) do not affect how the sub-pattern will
be processed.

=item C<(?&NAME)>
X<(?&NAME)>

Recurse to a named subpattern. Identical to C<(?PARNO)> except that the
parenthesis to recurse to is determined by name. If multiple parentheses have
the same name, then it recurses to the leftmost.

It is an error to refer to a name that is not declared somewhere in the
pattern.

B<NOTE:> In order to make things easier for programmers with experience
with the Python or PCRE regex engines the pattern C<< (?P>NAME) >>
may be used instead of C<< (?&NAME) >>.

=item C<(?(condition)yes-pattern|no-pattern)>
X<(?()>

=item C<(?(condition)yes-pattern)>

Conditional expression.  C<(condition)> should be either an integer in
parentheses (which is valid if the corresponding pair of parentheses
matched), a look-ahead/look-behind/evaluate zero-width assertion, a
name in angle brackets or single quotes (which is valid if a buffer
with the given name matched), or the special symbol (R) (true when
evaluated inside of recursion or eval). Additionally the R may be
followed by a number, (which will be true when evaluated when recursing
inside of the appropriate group), or by C<&NAME>, in which case it will
be true only when evaluated during recursion in the named group.

Here's a summary of the possible predicates:

=over 4

=item (1) (2) ...

Checks if the numbered capturing buffer has matched something.

=item (<NAME>) ('NAME')

Checks if a buffer with the given name has matched something.

=item (?{ CODE })

Treats the code block as the condition.

=item (R)

Checks if the expression has been evaluated inside of recursion.

=item (R1) (R2) ...

Checks if the expression has been evaluated while executing directly
inside of the n-th capture group. This check is the regex equivalent of

  if ((caller(0))[3] eq 'subname') { ... }

In other words, it does not check the full recursion stack.

=item (R&NAME)

Similar to C<(R1)>, this predicate checks to see if we're executing
directly inside of the leftmost group with a given name (this is the same
logic used by C<(?&NAME)> to disambiguate). It does not check the full
stack, but only the name of the innermost active recursion.

=item (DEFINE)

In this case, the yes-pattern is never directly executed, and no
no-pattern is allowed. Similar in spirit to C<(?{0})> but more efficient.
See below for details.

=back

For example:

    m{ ( \( )?
       [^()]+
       (?(1) \) )
     }x

matches a chunk of non-parentheses, possibly included in parentheses
themselves.

A special form is the C<(DEFINE)> predicate, which never executes directly
its yes-pattern, and does not allow a no-pattern. This allows to define
subpatterns which will be executed only by using the recursion mechanism.
This way, you can define a set of regular expression rules that can be
bundled into any pattern you choose.

It is recommended that for this usage you put the DEFINE block at the
end of the pattern, and that you name any subpatterns defined within it.

Also, it's worth noting that patterns defined this way probably will
not be as efficient, as the optimiser is not very clever about
handling them.

An example of how this might be used is as follows:

  /(?<NAME>(?&NAME_PAT))(?<ADDR>(?&ADDRESS_PAT))
   (?(DEFINE)
     (?<NAME_PAT>....)
     (?<ADRESS_PAT>....)
   )/x

Note that capture buffers matched inside of recursion are not accessible
after the recursion returns, so the extra layer of capturing buffers is
necessary. Thus C<$+{NAME_PAT}> would not be defined even though
C<$+{NAME}> would be.

=item C<< (?>pattern) >>
X<backtrack> X<backtracking> X<atomic> X<possessive>
d758 3
a760 3
          (
            [^()]+		# x+
          |
d763 1
a763 1
       \)
d777 4
a780 4
    m{ \(
          (
            (?> [^()]+ )	# change x+ above to (?> x+ )
          |
d783 1
a783 1
       \)
d818 2
a819 2
In some literature this construct is called "atomic matching" or
"possessive matching".
d821 1
a821 2
Possessive quantifiers are equivalent to putting the item they are applied
to inside of one of these constructs. The following equivalences apply:
d823 2
a824 6
    Quantifier Form     Bracketing Form
    ---------------     ---------------
    PAT*+               (?>PAT*)
    PAT++               (?>PAT+)
    PAT?+               (?>PAT?)
    PAT{min,max}+       (?>PAT{min,max})
d826 3
a828 1
=back
d830 1
a830 1
=head2 Special Backtracking Control Verbs
d832 4
a835 28
B<WARNING:> These patterns are experimental and subject to change or
removal in a future version of Perl. Their usage in production code should
be noted to avoid problems during upgrades.

These special patterns are generally of the form C<(*VERB:ARG)>. Unless
otherwise stated the ARG argument is optional; in some cases, it is
forbidden.

Any pattern containing a special backtracking verb that allows an argument
has the special behaviour that when executed it sets the current packages'
C<$REGERROR> and C<$REGMARK> variables. When doing so the following
rules apply:

On failure, the C<$REGERROR> variable will be set to the ARG value of the
verb pattern, if the verb was involved in the failure of the match. If the
ARG part of the pattern was omitted, then C<$REGERROR> will be set to the
name of the last C<(*MARK:NAME)> pattern executed, or to TRUE if there was
none. Also, the C<$REGMARK> variable will be set to FALSE.

On a successful match, the C<$REGERROR> variable will be set to FALSE, and
the C<$REGMARK> variable will be set to the name of the last
C<(*MARK:NAME)> pattern executed.  See the explanation for the
C<(*MARK:NAME)> verb below for more details.

B<NOTE:> C<$REGERROR> and C<$REGMARK> are not magic variables like C<$1>
and most other regex related variables. They are not local to a scope, nor
readonly, but instead are volatile package variables similar to C<$AUTOLOAD>.
Use C<local> to localize changes to them to a specific scope if necessary.
d837 2
a838 220
If a pattern does not contain a special backtracking verb that allows an
argument, then C<$REGERROR> and C<$REGMARK> are not touched at all.

=over 4

=item Verbs that take an argument

=over 4

=item C<(*PRUNE)> C<(*PRUNE:NAME)>
X<(*PRUNE)> X<(*PRUNE:NAME)>

This zero-width pattern prunes the backtracking tree at the current point
when backtracked into on failure. Consider the pattern C<A (*PRUNE) B>,
where A and B are complex patterns. Until the C<(*PRUNE)> verb is reached,
A may backtrack as necessary to match. Once it is reached, matching
continues in B, which may also backtrack as necessary; however, should B
not match, then no further backtracking will take place, and the pattern
will fail outright at the current starting position.

The following example counts all the possible matching strings in a
pattern (without actually matching any of them).

    'aaab' =~ /a+b?(?{print "$&\n"; $count++})(*FAIL)/;
    print "Count=$count\n";

which produces:

    aaab
    aaa
    aa
    a
    aab
    aa
    a
    ab
    a
    Count=9

If we add a C<(*PRUNE)> before the count like the following

    'aaab' =~ /a+b?(*PRUNE)(?{print "$&\n"; $count++})(*FAIL)/;
    print "Count=$count\n";

we prevent backtracking and find the count of the longest matching
at each matching starting point like so:

    aaab
    aab
    ab
    Count=3

Any number of C<(*PRUNE)> assertions may be used in a pattern.

See also C<< (?>pattern) >> and possessive quantifiers for other ways to
control backtracking. In some cases, the use of C<(*PRUNE)> can be
replaced with a C<< (?>pattern) >> with no functional difference; however,
C<(*PRUNE)> can be used to handle cases that cannot be expressed using a
C<< (?>pattern) >> alone.


=item C<(*SKIP)> C<(*SKIP:NAME)>
X<(*SKIP)>

This zero-width pattern is similar to C<(*PRUNE)>, except that on
failure it also signifies that whatever text that was matched leading up
to the C<(*SKIP)> pattern being executed cannot be part of I<any> match
of this pattern. This effectively means that the regex engine "skips" forward
to this position on failure and tries to match again, (assuming that
there is sufficient room to match).

The name of the C<(*SKIP:NAME)> pattern has special significance. If a
C<(*MARK:NAME)> was encountered while matching, then it is that position
which is used as the "skip point". If no C<(*MARK)> of that name was
encountered, then the C<(*SKIP)> operator has no effect. When used
without a name the "skip point" is where the match point was when
executing the (*SKIP) pattern.

Compare the following to the examples in C<(*PRUNE)>, note the string
is twice as long:

    'aaabaaab' =~ /a+b?(*SKIP)(?{print "$&\n"; $count++})(*FAIL)/;
    print "Count=$count\n";

outputs

    aaab
    aaab
    Count=2

Once the 'aaab' at the start of the string has matched, and the C<(*SKIP)>
executed, the next starting point will be where the cursor was when the
C<(*SKIP)> was executed.

=item C<(*MARK:NAME)> C<(*:NAME)>
X<(*MARK)> C<(*MARK:NAME)> C<(*:NAME)>

This zero-width pattern can be used to mark the point reached in a string
when a certain part of the pattern has been successfully matched. This
mark may be given a name. A later C<(*SKIP)> pattern will then skip
forward to that point if backtracked into on failure. Any number of
C<(*MARK)> patterns are allowed, and the NAME portion is optional and may
be duplicated.

In addition to interacting with the C<(*SKIP)> pattern, C<(*MARK:NAME)>
can be used to "label" a pattern branch, so that after matching, the
program can determine which branches of the pattern were involved in the
match.

When a match is successful, the C<$REGMARK> variable will be set to the
name of the most recently executed C<(*MARK:NAME)> that was involved
in the match.

This can be used to determine which branch of a pattern was matched
without using a separate capture buffer for each branch, which in turn
can result in a performance improvement, as perl cannot optimize
C</(?:(x)|(y)|(z))/> as efficiently as something like
C</(?:x(*MARK:x)|y(*MARK:y)|z(*MARK:z))/>.

When a match has failed, and unless another verb has been involved in
failing the match and has provided its own name to use, the C<$REGERROR>
variable will be set to the name of the most recently executed
C<(*MARK:NAME)>.

See C<(*SKIP)> for more details.

As a shortcut C<(*MARK:NAME)> can be written C<(*:NAME)>.

=item C<(*THEN)> C<(*THEN:NAME)>

This is similar to the "cut group" operator C<::> from Perl 6. Like
C<(*PRUNE)>, this verb always matches, and when backtracked into on
failure, it causes the regex engine to try the next alternation in the
innermost enclosing group (capturing or otherwise).

Its name comes from the observation that this operation combined with the
alternation operator (C<|>) can be used to create what is essentially a
pattern-based if/then/else block:

  ( COND (*THEN) FOO | COND2 (*THEN) BAR | COND3 (*THEN) BAZ )

Note that if this operator is used and NOT inside of an alternation then
it acts exactly like the C<(*PRUNE)> operator.

  / A (*PRUNE) B /

is the same as

  / A (*THEN) B /

but

  / ( A (*THEN) B | C (*THEN) D ) /

is not the same as

  / ( A (*PRUNE) B | C (*PRUNE) D ) /

as after matching the A but failing on the B the C<(*THEN)> verb will
backtrack and try C; but the C<(*PRUNE)> verb will simply fail.

=item C<(*COMMIT)>
X<(*COMMIT)>

This is the Perl 6 "commit pattern" C<< <commit> >> or C<:::>. It's a
zero-width pattern similar to C<(*SKIP)>, except that when backtracked
into on failure it causes the match to fail outright. No further attempts
to find a valid match by advancing the start pointer will occur again.
For example,

    'aaabaaab' =~ /a+b?(*COMMIT)(?{print "$&\n"; $count++})(*FAIL)/;
    print "Count=$count\n";

outputs

    aaab
    Count=1

In other words, once the C<(*COMMIT)> has been entered, and if the pattern
does not match, the regex engine will not try any further matching on the
rest of the string.

=back

=item Verbs without an argument

=over 4

=item C<(*FAIL)> C<(*F)>
X<(*FAIL)> X<(*F)>

This pattern matches nothing and always fails. It can be used to force the
engine to backtrack. It is equivalent to C<(?!)>, but easier to read. In
fact, C<(?!)> gets optimised into C<(*FAIL)> internally.

It is probably useful only when combined with C<(?{})> or C<(??{})>.

=item C<(*ACCEPT)>
X<(*ACCEPT)>

B<WARNING:> This feature is highly experimental. It is not recommended
for production code.

This pattern matches nothing and causes the end of successful matching at
the point at which the C<(*ACCEPT)> pattern was encountered, regardless of
whether there is actually more to match in the string. When inside of a
nested pattern, such as recursion, or in a subpattern dynamically generated
via C<(??{})>, only the innermost pattern is ended immediately.

If the C<(*ACCEPT)> is inside of capturing buffers then the buffers are
marked as ended at the point at which the C<(*ACCEPT)> was encountered.
For instance:

  'AB' =~ /(A (A|B(*ACCEPT)|C) D)(E)/x;

will match, and C<$1> will be C<AB> and C<$2> will be C<B>, C<$3> will not
be set. If another branch in the inner parentheses were matched, such as in the
string 'ACDE', then the C<D> and C<E> would have to be matched as well.

=back
d848 1
a848 1
see L<Combining RE Pieces>.
d852 1
a852 1
by all regular non-possessive expression quantifiers, namely C<*>, C<*?>, C<+>,
d900 1
a900 1
Here's another example. Let's say you'd like to match a number at the end
d1025 1
a1025 1
B<WARNING>: Particularly complicated regular expressions can take
d1027 1
a1027 1
ways they can use backtracking to try for a match.  For example, without
d1044 1
a1044 1
the tail match, since they are in "logical" context: only
d1059 3
a1061 6
character; "\\" matches a "\"). This escape mechanism is also required
for the character used as the pattern delimiter.

A series of characters matches that series of characters in the target
string, so the pattern  C<blurfl> would match "blurfl" in the target
string.
d1064 1
a1064 1
in C<[]>, which will match any character from the list.  If the
d1074 4
a1077 4
specifies a class containing twenty-six characters, even on EBCDIC-based
character sets.)  Also, if you try to use the character
classes C<\w>, C<\W>, C<\s>, C<\S>, C<\d>, or C<\D> as endpoints of
a range, the "-" is understood literally.
d1082 1
a1082 1
that begin from and end at either alphabetics of equal case ([a-e],
d1089 4
a1092 4
of octal digits, matches the character whose coded character set value
is I<nnn>.  Similarly, \xI<nn>, where I<nn> are hexadecimal digits,
matches the character whose numeric value is I<nn>. The expression \cI<x>
matches the character control-I<x>.  Finally, the "." metacharacter
d1127 1
a1127 1
=head2 Warning on \1 Instead of $1
d1152 1
a1152 1
=head2 Repeated Patterns Matching a Zero-length Substring
d1165 1
a1165 1
The C<o?> matches at the beginning of C<'foo'>, and since the position
d1167 1
a1167 1
because of the C<*> quantifier.  Another common way to create a similar cycle
d1187 1
a1187 1
loops given by the greedy quantifiers C<*+{}>, and for higher-level
d1196 1
a1196 1
is made equivalent to
d1198 3
a1200 3
   m{   (?: NON_ZERO_LENGTH )*
      |
        (?: ZERO_LENGTH )?
d1204 1
a1204 1
whether the last match was zero-length.  To break the loop, the following
d1206 1
a1206 1
This prohibition interacts with backtracking (see L<"Backtracking">),
d1216 1
a1216 1
match given by non-greedy C<??> is the zero-length match, and the I<second
d1220 1
a1220 1
Similarly, for repeated C<m/()/g> the second-best match is the match at the
d1228 1
a1228 1
=head2 Combining RE Pieces
d1261 1
a1261 1
which can be matched by C<T>.
d1311 1
a1311 1
=item C<(??{ EXPR })>, C<(?PARNO)>
d1314 1
a1314 1
the result of EXPR, or the pattern contained by capture buffer PARNO.
d1329 1
a1329 1
=head2 Creating Custom RE Engines
d1335 1
a1335 1
matches at a boundary between whitespace characters and non-whitespace
d1354 1
a1354 1
    my %rules = ( '\\' => '\\\\',
d1358 1
a1358 1
      $re =~ s{
d1361 1
a1361 1
              { $rules{$1} or invalid($re,$1) }sgex;
a1376 22

=head1 PCRE/Python Support

As of Perl 5.10.0, Perl supports several Python/PCRE specific extensions
to the regex syntax. While Perl programmers are encouraged to use the
Perl specific syntax, the following are also accepted:

=over 4

=item C<< (?PE<lt>NAMEE<gt>pattern) >>

Define a named capture buffer. Equivalent to C<< (?<NAME>pattern) >>.

=item C<< (?P=NAME) >>

Backreference to a named capture buffer. Equivalent to C<< \g{NAME} >>.

=item C<< (?P>NAME) >>

Subroutine call to a named capture buffer. Equivalent to C<< (?&NAME) >>.

=back
@


1.1.1.11
log
@import perl 5.10.1
@
text
@d105 1
a105 1
The patterns used in Perl pattern matching evolved from those supplied in
d261 1
a261 1
             equivalent to (?>\PM\pM*)
d378 2
a379 2
    print       IsPrint		(but see [2] below)
    punct       IsPunct		(but see [3] below)
d383 1
a383 1
    word        IsWord         \w
a387 7
However, the equivalence between C<[[:xxxxx:]]> and C<\p{IsXxxxx}>
is not exact.

=over 4

=item [1]

a390 33

But if the C<locale> or C<encoding> pragmas are not used and
the string is not C<utf8>, then C<[[:xxxxx:]]> (and C<\w>, etc.)
will not match characters 0x80-0xff; whereas C<\p{IsXxxxx}> will
force the string to C<utf8> and can match these characters
(as Unicode).

=item [2]

C<\p{IsPrint}> matches characters 0x09-0x0d but C<[[:print:]]> does not.

=item [3]

C<[[:punct::]]> matches the following but C<\p{IsPunct}> does not,
because they are classed as symbols (not punctuation) in Unicode.

=over 4

=item C<$>

Currency symbol

=item C<+> C<< < >> C<=> C<< > >> C<|> C<~>

Mathematical symbols

=item C<^> C<`>

Modifier symbols (accents)

=back

=back
@


1.1.1.12
log
@Perl 5.12.2 from CPAN
@
text
@d44 1
a44 1
Used together, as C</ms>, they let the "." match any character whatsoever,
d65 1
a65 1
Preserve the string matched such that ${^PREMATCH}, ${^MATCH}, and
d85 1
a85 1
the regular expression parser to ignore most whitespace that is neither
d92 2
a93 2
escape them (using backslashes or C<\Q...\E>) or encode them using octal,
hex, or C<\N{}> escapes.  Taken together, these features go a long way towards
d98 1
a98 11
a C<\Q...\E> stays unaffected by C</x>.  And note that C</x> doesn't affect
whether space interpretation within a single multi-character construct.  For
example in C<\x{...}>, regardless of the C</x> modifier, there can be no
spaces.  Same for a L<quantifier|Quantifiers> such as C<{3}> or
C<{5,}>.  Similarly, C<(?:...)> can't have a space between the C<?> and C<:>,
but can between the C<(> and C<?>.  Within any delimiters for such a
construct, allowed spaces are not affected by C</x>, and depend on the
construct.  For example, C<\x{...}> can't have spaces because hexadecimal
numbers don't have spaces in them.  But, Unicode properties can have spaces, so
in C<\p{...}>  there can be spaces that follow the Unicode rules, for which see
L<perluniprops.pod/Properties accessible through \p{} and \P{}>.
d159 1
a159 1
to non-negative integral values less than a preset limit defined when perl is built.
d216 1
a216 1
X<\0> X<\c> X<\N{}> X<\x>
a228 1
    \N{U+263D}	Unicode character     (example: FIRST QUARTER MOON)
d248 3
a250 1
X<\g> X<\k> X<\K> X<backreference>
d260 2
a261 1
    \X	     Match Unicode "eXtended grapheme cluster"
a273 1
    \N       Any character but \n (experimental)
d280 23
a302 9
See L<perlrecharclass/Backslashed sequences> for details on
C<\w>, C<\W>, C<\s>, C<\S>, C<\d>, C<\D>, C<\p>, C<\P>, C<\N>, C<\v>, C<\V>,
C<\h>, and C<\H>.
See L<perlrebackslash/Misc> for details on C<\R> and C<\X>.

Note that C<\N> has two meanings.  When of the form C<\N{NAME}>, it matches the
character whose name is C<NAME>; and similarly when of the form
C<\N{U+I<wide hex char>}>, it matches the character whose Unicode ordinal is
I<wide hex char>.  Otherwise it matches any character but C<\n>.
d318 132
a449 1
The following Posix-style character classes are available:
d451 17
a467 14
 [[:alpha:]]  Any alphabetical character.
 [[:alnum:]]  Any alphanumerical character.
 [[:ascii:]]  Any character in the ASCII character set.
 [[:blank:]]  A GNU extension, equal to a space or a horizontal tab
 [[:cntrl:]]  Any control character.
 [[:digit:]]  Any decimal digit, equivalent to "\d".
 [[:graph:]]  Any printable character, excluding a space.
 [[:lower:]]  Any lowercase character.
 [[:print:]]  Any printable character, including a space.
 [[:punct:]]  Any graphical character excluding "word" characters.
 [[:space:]]  Any whitespace character. "\s" plus vertical tab ("\cK").
 [[:upper:]]  Any uppercase character.
 [[:word:]]   A Perl extension, equivalent to "\w".
 [[:xdigit:]] Any hexadecimal digit.
d470 4
a473 1
with a '^'. This is a Perl extension.
d475 6
a480 1
The POSIX character classes
a483 3
Details on POSIX character classes are in
L<perlrecharclass/Posix Character Classes>.

a560 3
If the bracketing group did not match, the associated backreference won't
match either. (This can happen if the bracketing group is optional, or
in a different branch of an alternation.)
a746 4
These modifiers do not carry over into named subpatterns called in the
enclosing group. In other words, a pattern such as C<((?i)(&NAME))> does not
change the case-sensitivity of the "NAME" pattern.

d804 2
a805 18
Be careful when using the branch reset pattern in combination with 
named captures. Named captures are implemented as being aliases to 
numbered buffers holding the captures, and that interferes with the
implementation of the branch reset pattern. If you are using named
captures in a branch reset pattern, it's best to use the same names,
in the same order, in each of the alternations:

   /(?|  (?<a> x ) (?<b> y )
      |  (?<a> z ) (?<b> w )) /x

Not doing so may lead to surprises:

  "12" =~ /(?| (?<a> \d+ ) | (?<b> \D+))/x;
  say $+ {a};   # Prints '12'
  say $+ {b};   # *Also* prints '12'.

The problem here is that both the buffer named C<< a >> and the buffer
named C<< b >> are aliases for the buffer belonging to C<< $1 >>.
d986 7
d1014 3
a1016 9
B<WARNING>: Use of lexical (C<my>) variables in these blocks is
broken. The result is unpredictable and will make perl unstable. The
workaround is to use global (C<our>) variables.

B<WARNING>: Because Perl's regex engine is currently not re-entrant,
interpolated code may not invoke the regex engine either directly with
C<m//> or C<s///>), or indirectly with functions such as
C<split>. Invoking the regex engine in these blocks will make perl
unstable.
a1057 6
For reasons of security, this construct is forbidden if the regular
expression involves run-time interpolation of variables, unless the
perilous C<use re 'eval'> pragma has been used (see L<re>), or the
variables contain results of C<qr//> operator (see
L<perlop/"qr/STRING/imosx">).

d1367 1
a1367 1
has the special behaviour that when executed it sets the current package's
d1488 2
a1489 1
C<(*MARK)> patterns are allowed, and the NAME portion may be duplicated.
a2171 11

There are numerous problems with case insensitive matching of characters
outside the ASCII range, especially with those whose folds are multiple
characters, such as ligatures like C<LATIN SMALL LIGATURE FF>.

In a bracketed character class with case insensitive matching, ranges only work
for ASCII characters.  For example,
C<m/[\N{CYRILLIC CAPITAL LETTER A}-\N{CYRILLIC CAPITAL LETTER YA}]/i>
doesn't match all the Russian upper and lower case letters.

Many regular expression constructs don't work on EBCDIC platforms.
@


1.1.1.13
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d54 2
a55 41
If locale matching rules are in effect, the case map is taken from the
current
locale for code points less than 255, and from Unicode rules for larger
code points.  However, matches that would cross the Unicode
rules/non-Unicode rules boundary (ords 255/256) will not succeed.  See
L<perllocale>.

There are a number of Unicode characters that match multiple characters
under C</i>.  For example, C<LATIN SMALL LIGATURE FI>
should match the sequence C<fi>.  Perl is not
currently able to do this when the multiple characters are in the pattern and
are split between groupings, or when one or more are quantified.  Thus

 "\N{LATIN SMALL LIGATURE FI}" =~ /fi/i;          # Matches
 "\N{LATIN SMALL LIGATURE FI}" =~ /[fi][fi]/i;    # Doesn't match!
 "\N{LATIN SMALL LIGATURE FI}" =~ /fi*/i;         # Doesn't match!

 # The below doesn't match, and it isn't clear what $1 and $2 would
 # be even if it did!!
 "\N{LATIN SMALL LIGATURE FI}" =~ /(f)(i)/i;      # Doesn't match!

Perl doesn't match multiple characters in an inverted bracketed
character class, which otherwise could be highly confusing.  See
L<perlrecharclass/Negation>.

Another bug involves character classes that match both a sequence of
multiple characters, and an initial sub-string of that sequence.  For
example,

 /[s\xDF]/i

should match both a single and a double "s", since C<\xDF> (on ASCII
platforms) matches "ss".  However, this bug
(L<[perl #89774]|https://rt.perl.org/rt3/Ticket/Display.html?id=89774>)
causes it to only match a single "s", even if the final larger match
fails, and matching the double "ss" would have succeeded.

Also, Perl matching doesn't fully conform to the current Unicode C</i>
recommendations, which ask that the matching be made upon the NFD
(Normalization Form Decomposed) of the text.  However, Unicode is
in the process of reconsidering and revising their recommendations.
a60 1
Details in L</"/x">
a76 7
=item a, d, l and u
X</a> X</d> X</l> X</u>

These modifiers, all new in 5.14, affect which character-set semantics
(Unicode, etc.) are used, as described below in
L</Character set modifiers>.

d79 4
a82 5
Regular expression modifiers are usually written in documentation
as e.g., "the C</x> modifier", even though the delimiter
in question might not really be a slash.  The modifiers C</imsxadlup>
may also be embedded within the regular expression itself using
the C<(?...)> construct, see L</Extended Patterns> below.
d84 1
a84 3
=head3 /x

C</x> tells
d99 1
a99 1
space interpretation within a single multi-character construct.  For
d101 1
a101 1
spaces.  Same for a L<quantifier|/Quantifiers> such as C<{3}> or
d107 2
a108 2
in C<\p{...}> there can be spaces that follow the Unicode rules, for which see
L<perluniprops/Properties accessible through \p{} and \P{}>.
a110 299
=head3 Character set modifiers

C</d>, C</u>, C</a>, and C</l>, available starting in 5.14, are called
the character set modifiers; they affect the character set semantics
used for the regular expression.

The C</d>, C</u>, and C</l> modifiers are not likely to be of much use
to you, and so you need not worry about them very much.  They exist for
Perl's internal use, so that complex regular expression data structures
can be automatically serialized and later exactly reconstituted,
including all their nuances.  But, since Perl can't keep a secret, and
there may be rare instances where they are useful, they are documented
here.

The C</a> modifier, on the other hand, may be useful.  Its purpose is to
allow code that is to work mostly on ASCII data to not have to concern
itself with Unicode.

Briefly, C</l> sets the character set to that of whatever B<L>ocale is in
effect at the time of the execution of the pattern match.

C</u> sets the character set to B<U>nicode.

C</a> also sets the character set to Unicode, BUT adds several
restrictions for B<A>SCII-safe matching.

C</d> is the old, problematic, pre-5.14 B<D>efault character set
behavior.  Its only use is to force that old behavior.

At any given time, exactly one of these modifiers is in effect.  Their
existence allows Perl to keep the originally compiled behavior of a
regular expression, regardless of what rules are in effect when it is
actually executed.  And if it is interpolated into a larger regex, the
original's rules continue to apply to it, and only it.

The C</l> and C</u> modifiers are automatically selected for
regular expressions compiled within the scope of various pragmas,
and we recommend that in general, you use those pragmas instead of
specifying these modifiers explicitly.  For one thing, the modifiers
affect only pattern matching, and do not extend to even any replacement
done, whereas using the pragmas give consistent results for all
appropriate operations within their scopes.  For example,

 s/foo/\Ubar/il

will match "foo" using the locale's rules for case-insensitive matching,
but the C</l> does not affect how the C<\U> operates.  Most likely you
want both of them to use locale rules.  To do this, instead compile the
regular expression within the scope of C<use locale>.  This both
implicitly adds the C</l> and applies locale rules to the C<\U>.   The
lesson is to C<use locale> and not C</l> explicitly.

Similarly, it would be better to use C<use feature 'unicode_strings'>
instead of,

 s/foo/\Lbar/iu

to get Unicode rules, as the C<\L> in the former (but not necessarily
the latter) would also use Unicode rules.

More detail on each of the modifiers follows.  Most likely you don't
need to know this detail for C</l>, C</u>, and C</d>, and can skip ahead
to L<E<sol>a|/E<sol>a (and E<sol>aa)>.

=head4 /l

means to use the current locale's rules (see L<perllocale>) when pattern
matching.  For example, C<\w> will match the "word" characters of that
locale, and C<"/i"> case-insensitive matching will match according to
the locale's case folding rules.  The locale used will be the one in
effect at the time of execution of the pattern match.  This may not be
the same as the compilation-time locale, and can differ from one match
to another if there is an intervening call of the
L<setlocale() function|perllocale/The setlocale function>.

Perl only supports single-byte locales.  This means that code points
above 255 are treated as Unicode no matter what locale is in effect.
Under Unicode rules, there are a few case-insensitive matches that cross
the 255/256 boundary.  These are disallowed under C</l>.  For example,
0xFF (on ASCII platforms) does not caselessly match the character at
0x178, C<LATIN CAPITAL LETTER Y WITH DIAERESIS>, because 0xFF may not be
C<LATIN SMALL LETTER Y WITH DIAERESIS> in the current locale, and Perl
has no way of knowing if that character even exists in the locale, much
less what code point it is.

This modifier may be specified to be the default by C<use locale>, but
see L</Which character set modifier is in effect?>.
X</l>

=head4 /u

means to use Unicode rules when pattern matching.  On ASCII platforms,
this means that the code points between 128 and 255 take on their
Latin-1 (ISO-8859-1) meanings (which are the same as Unicode's).
(Otherwise Perl considers their meanings to be undefined.)  Thus,
under this modifier, the ASCII platform effectively becomes a Unicode
platform; and hence, for example, C<\w> will match any of the more than
100_000 word characters in Unicode.

Unlike most locales, which are specific to a language and country pair,
Unicode classifies all the characters that are letters I<somewhere> in
the world as
C<\w>.  For example, your locale might not think that C<LATIN SMALL
LETTER ETH> is a letter (unless you happen to speak Icelandic), but
Unicode does.  Similarly, all the characters that are decimal digits
somewhere in the world will match C<\d>; this is hundreds, not 10,
possible matches.  And some of those digits look like some of the 10
ASCII digits, but mean a different number, so a human could easily think
a number is a different quantity than it really is.  For example,
C<BENGALI DIGIT FOUR> (U+09EA) looks very much like an
C<ASCII DIGIT EIGHT> (U+0038).  And, C<\d+>, may match strings of digits
that are a mixture from different writing systems, creating a security
issue.  L<Unicode::UCD/num()> can be used to sort
this out.  Or the C</a> modifier can be used to force C<\d> to match
just the ASCII 0 through 9.

Also, under this modifier, case-insensitive matching works on the full
set of Unicode
characters.  The C<KELVIN SIGN>, for example matches the letters "k" and
"K"; and C<LATIN SMALL LIGATURE FF> matches the sequence "ff", which,
if you're not prepared, might make it look like a hexadecimal constant,
presenting another potential security issue.  See
L<http://unicode.org/reports/tr36> for a detailed discussion of Unicode
security issues.

On the EBCDIC platforms that Perl handles, the native character set is
equivalent to Latin-1.  Thus this modifier changes behavior only when
the C<"/i"> modifier is also specified, and it turns out it affects only
two characters, giving them full Unicode semantics: the C<MICRO SIGN>
will match the Greek capital and small letters C<MU>, otherwise not; and
the C<LATIN CAPITAL LETTER SHARP S> will match any of C<SS>, C<Ss>,
C<sS>, and C<ss>, otherwise not.

This modifier may be specified to be the default by C<use feature
'unicode_strings>, C<use locale ':not_characters'>, or
C<L<use 5.012|perlfunc/use VERSION>> (or higher),
but see L</Which character set modifier is in effect?>.
X</u>

=head4 /d

This modifier means to use the "Default" native rules of the platform
except when there is cause to use Unicode rules instead, as follows:

=over 4

=item 1

the target string is encoded in UTF-8; or

=item 2

the pattern is encoded in UTF-8; or

=item 3

the pattern explicitly mentions a code point that is above 255 (say by
C<\x{100}>); or

=item 4

the pattern uses a Unicode name (C<\N{...}>);  or

=item 5

the pattern uses a Unicode property (C<\p{...}>)

=back

Another mnemonic for this modifier is "Depends", as the rules actually
used depend on various things, and as a result you can get unexpected
results.  See L<perlunicode/The "Unicode Bug">.  The Unicode Bug has
become rather infamous, leading to yet another (printable) name for this
modifier, "Dodgy".

On ASCII platforms, the native rules are ASCII, and on EBCDIC platforms
(at least the ones that Perl handles), they are Latin-1.

Here are some examples of how that works on an ASCII platform:

 $str =  "\xDF";      # $str is not in UTF-8 format.
 $str =~ /^\w/;       # No match, as $str isn't in UTF-8 format.
 $str .= "\x{0e0b}";  # Now $str is in UTF-8 format.
 $str =~ /^\w/;       # Match! $str is now in UTF-8 format.
 chop $str;
 $str =~ /^\w/;       # Still a match! $str remains in UTF-8 format.

This modifier is automatically selected by default when none of the
others are, so yet another name for it is "Default".

Because of the unexpected behaviors associated with this modifier, you
probably should only use it to maintain weird backward compatibilities.

=head4 /a (and /aa)

This modifier stands for ASCII-restrict (or ASCII-safe).  This modifier,
unlike the others, may be doubled-up to increase its effect.

When it appears singly, it causes the sequences C<\d>, C<\s>, C<\w>, and
the Posix character classes to match only in the ASCII range.  They thus
revert to their pre-5.6, pre-Unicode meanings.  Under C</a>,  C<\d>
always means precisely the digits C<"0"> to C<"9">; C<\s> means the five
characters C<[ \f\n\r\t]>; C<\w> means the 63 characters
C<[A-Za-z0-9_]>; and likewise, all the Posix classes such as
C<[[:print:]]> match only the appropriate ASCII-range characters.

This modifier is useful for people who only incidentally use Unicode,
and who do not wish to be burdened with its complexities and security
concerns.

With C</a>, one can write C<\d> with confidence that it will only match
ASCII characters, and should the need arise to match beyond ASCII, you
can instead use C<\p{Digit}> (or C<\p{Word}> for C<\w>).  There are
similar C<\p{...}> constructs that can match beyond ASCII both white
space (see L<perlrecharclass/Whitespace>), and Posix classes (see
L<perlrecharclass/POSIX Character Classes>).  Thus, this modifier
doesn't mean you can't use Unicode, it means that to get Unicode
matching you must explicitly use a construct (C<\p{}>, C<\P{}>) that
signals Unicode.

As you would expect, this modifier causes, for example, C<\D> to mean
the same thing as C<[^0-9]>; in fact, all non-ASCII characters match
C<\D>, C<\S>, and C<\W>.  C<\b> still means to match at the boundary
between C<\w> and C<\W>, using the C</a> definitions of them (similarly
for C<\B>).

Otherwise, C</a> behaves like the C</u> modifier, in that
case-insensitive matching uses Unicode semantics; for example, "k" will
match the Unicode C<\N{KELVIN SIGN}> under C</i> matching, and code
points in the Latin1 range, above ASCII will have Unicode rules when it
comes to case-insensitive matching.

To forbid ASCII/non-ASCII matches (like "k" with C<\N{KELVIN SIGN}>),
specify the "a" twice, for example C</aai> or C</aia>.  (The first
occurrence of "a" restricts the C<\d>, etc., and the second occurrence
adds the C</i> restrictions.)  But, note that code points outside the
ASCII range will use Unicode rules for C</i> matching, so the modifier
doesn't really restrict things to just ASCII; it just forbids the
intermixing of ASCII and non-ASCII.

To summarize, this modifier provides protection for applications that
don't wish to be exposed to all of Unicode.  Specifying it twice
gives added protection.

This modifier may be specified to be the default by C<use re '/a'>
or C<use re '/aa'>.  If you do so, you may actually have occasion to use
the C</u> modifier explictly if there are a few regular expressions
where you do want full Unicode rules (but even here, it's best if
everything were under feature C<"unicode_strings">, along with the
C<use re '/aa'>).  Also see L</Which character set modifier is in
effect?>.
X</a>
X</aa>

=head4 Which character set modifier is in effect?

Which of these modifiers is in effect at any given point in a regular
expression depends on a fairly complex set of interactions.  These have
been designed so that in general you don't have to worry about it, but
this section gives the gory details.  As
explained below in L</Extended Patterns> it is possible to explicitly
specify modifiers that apply only to portions of a regular expression.
The innermost always has priority over any outer ones, and one applying
to the whole expression has priority over any of the default settings that are
described in the remainder of this section.

The C<L<use re 'E<sol>foo'|re/"'/flags' mode">> pragma can be used to set
default modifiers (including these) for regular expressions compiled
within its scope.  This pragma has precedence over the other pragmas
listed below that also change the defaults.

Otherwise, C<L<use locale|perllocale>> sets the default modifier to C</l>;
and C<L<use feature 'unicode_strings|feature>>, or
C<L<use 5.012|perlfunc/use VERSION>> (or higher) set the default to
C</u> when not in the same scope as either C<L<use locale|perllocale>>
or C<L<use bytes|bytes>>.
(C<L<use locale ':not_characters'|perllocale/Unicode and UTF-8>> also
sets the default to C</u>, overriding any plain C<use locale>.)
Unlike the mechanisms mentioned above, these
affect operations besides regular expressions pattern matching, and so
give more consistent results with other operators, including using
C<\U>, C<\l>, etc. in substitution replacements.

If none of the above apply, for backwards compatibility reasons, the
C</d> modifier is the one in effect by default.  As this can lead to
unexpected results, it is best to specify which other rule set should be
used.

=head4 Character set modifier behavior prior to Perl 5.14

Prior to 5.14, there were no explicit modifiers, but C</l> was implied
for regexes compiled within the scope of C<use locale>, and C</d> was
implied otherwise.  However, interpolating a regex into a larger regex
would ignore the original compilation in favor of whatever was in effect
at the time of the second compilation.  There were a number of
inconsistencies (bugs) with the C</d> modifier, where Unicode rules
would be used when inappropriate, and vice versa.  C<\p{}> did not imply
Unicode rules, and neither did all occurrences of C<\N{}>, until 5.12.

d127 7
a133 7
    \        Quote the next metacharacter
    ^        Match the beginning of the line
    .        Match any character (except newline)
    $        Match the end of the line (or before newline at the end)
    |        Alternation
    ()       Grouping
    []       Bracketed Character class
d145 1
a145 1
but this option was removed in perl 5.9.)
d158 10
a167 26
    *           Match 0 or more times
    +           Match 1 or more times
    ?           Match 1 or 0 times
    {n}         Match exactly n times
    {n,}        Match at least n times
    {n,m}       Match at least n but not more than m times

(If a curly bracket occurs in any other context and does not form part of
a backslashed sequence like C<\x{...}>, it is treated
as a regular character.  In particular, the lower quantifier bound
is not optional.  However, in Perl v5.18, it is planned to issue a
deprecation warning for all such occurrences, and in Perl v5.20 to
require literal uses of a curly bracket to be escaped, say by preceding
them with a backslash or enclosing them within square brackets, (C<"\{">
or C<"[{]">).  This change will allow for future syntax extensions (like
making the lower bound of a quantifier optional), and better error
checking of quantifiers.  Now, a typo in a quantifier silently causes
it to be treated as the literal characters.  For example,

    /o{4,3}/

looks like a quantifier that matches 0 times, since 4 is greater than 3,
but it really means to match the sequence of six characters
S<C<"o { 4 , 3 }">>.)

The "*" quantifier is equivalent to C<{0,}>, the "+"
d183 6
a188 6
    *?        Match 0 or more times, not greedily
    +?        Match 1 or more times, not greedily
    ??        Match 0 or 1 time, not greedily
    {n}?      Match exactly n times, not greedily (redundant)
    {n,}?     Match at least n times, not greedily
    {n,m}?    Match at least n but not more than m times, not greedily
d195 6
a200 6
 *+     Match 0 or more times and give nothing back
 ++     Match 1 or more times and give nothing back
 ?+     Match 0 or 1 time and give nothing back
 {n}+   Match exactly n times and give nothing back (redundant)
 {n,}+  Match at least n times and give nothing back
 {n,m}+ Match at least n but not more than m times and give nothing back
d215 1
a215 2
help. See the independent subexpression
L</C<< (?>pattern) >>> for more details;
d223 1
a223 1
Because patterns are processed as double-quoted strings, the following
d225 2
d228 27
a254 19
 \t          tab                   (HT, TAB)
 \n          newline               (LF, NL)
 \r          return                (CR)
 \f          form feed             (FF)
 \a          alarm (bell)          (BEL)
 \e          escape (think troff)  (ESC)
 \cK         control char          (example: VT)
 \x{}, \x00  character whose ordinal is the given hexadecimal number
 \N{name}    named Unicode character or character sequence
 \N{U+263D}  Unicode character     (example: FIRST QUARTER MOON)
 \o{}, \000  character whose ordinal is the given octal number
 \l          lowercase next char (think vi)
 \u          uppercase next char (think vi)
 \L          lowercase till \E (think vi)
 \U          uppercase till \E (think vi)
 \Q          quote (disable) pattern metacharacters till \E
 \E          end either case modification or quoted section, think vi

Details are in L<perlop/Quote and Quote-like Operators>.
d261 32
a292 68
 Sequence   Note    Description
  [...]     [1]  Match a character according to the rules of the
                   bracketed character class defined by the "...".
                   Example: [a-z] matches "a" or "b" or "c" ... or "z"
  [[:...:]] [2]  Match a character according to the rules of the POSIX
                   character class "..." within the outer bracketed
                   character class.  Example: [[:upper:]] matches any
                   uppercase character.
  \w        [3]  Match a "word" character (alphanumeric plus "_", plus
                   other connector punctuation chars plus Unicode
                   marks)
  \W        [3]  Match a non-"word" character
  \s        [3]  Match a whitespace character
  \S        [3]  Match a non-whitespace character
  \d        [3]  Match a decimal digit character
  \D        [3]  Match a non-digit character
  \pP       [3]  Match P, named property.  Use \p{Prop} for longer names
  \PP       [3]  Match non-P
  \X        [4]  Match Unicode "eXtended grapheme cluster"
  \C             Match a single C-language char (octet) even if that is
                   part of a larger UTF-8 character.  Thus it breaks up
                   characters into their UTF-8 bytes, so you may end up
                   with malformed pieces of UTF-8.  Unsupported in
                   lookbehind.
  \1        [5]  Backreference to a specific capture group or buffer.
                   '1' may actually be any positive integer.
  \g1       [5]  Backreference to a specific or previous group,
  \g{-1}    [5]  The number may be negative indicating a relative
                   previous group and may optionally be wrapped in
                   curly brackets for safer parsing.
  \g{name}  [5]  Named backreference
  \k<name>  [5]  Named backreference
  \K        [6]  Keep the stuff left of the \K, don't include it in $&
  \N        [7]  Any character but \n (experimental).  Not affected by
                   /s modifier
  \v        [3]  Vertical whitespace
  \V        [3]  Not vertical whitespace
  \h        [3]  Horizontal whitespace
  \H        [3]  Not horizontal whitespace
  \R        [4]  Linebreak

=over 4

=item [1]

See L<perlrecharclass/Bracketed Character Classes> for details.

=item [2]

See L<perlrecharclass/POSIX Character Classes> for details.

=item [3]

See L<perlrecharclass/Backslash sequences> for details.

=item [4]

See L<perlrebackslash/Misc> for details.

=item [5]

See L</Capture groups> below for details.

=item [6]

See L</Extended Patterns> below for details.

=item [7]
d295 41
a335 3
character or character sequence whose name is C<NAME>; and similarly
when of the form C<\N{U+I<hex>}>, it matches the character whose Unicode
code point is I<hex>.  Otherwise it matches any character but C<\n>.
d337 2
a338 1
=back
d348 6
a353 6
    \b  Match a word boundary
    \B  Match except at a word boundary
    \A  Match only at beginning of string
    \Z  Match only at end of string, or before newline at the end
    \z  Match only at end of string
    \G  Match only at pos() (e.g. at the end-of-match position
d373 1
a373 1
of your string; see the previous reference.  The actual location
d376 1
a376 2
matches (see L</"Repeated Patterns Matching a Zero-length Substring">)
is modified somewhat, in that contents to the left of C<\G> are
d381 5
a385 5
     my $string = 'ABC';
     pos($string) = 1;
     while ($string =~ /(.\G)/g) {
         print $1;
     }
d394 1
a394 1
=head3 Capture groups
d396 8
a403 5
The bracketing construct C<( ... )> creates capture groups (also referred to as
capture buffers). To refer to the current contents of a group later on, within
the same pattern, use C<\g1> (or C<\g{1}>) for the first, C<\g2> (or C<\g{2}>)
for the second, and so on.
This is called a I<backreference>.
a404 1
X<regex, capture group> X<regexp, capture group>
d406 15
a420 1
X<regular expression, capture group> X<backreference>
d422 12
a433 15
X<named capture buffer> X<regular expression, named capture buffer>
X<named capture group> X<regular expression, named capture group>
X<%+> X<$+{name}> X<< \k<name> >>
There is no limit to the number of captured substrings that you may use.
Groups are numbered with the leftmost open parenthesis being number 1, etc.  If
a group did not match, the associated backreference won't match either. (This
can happen if the group is optional, or in a different branch of an
alternation.)
You can omit the C<"g">, and write C<"\1">, etc, but there are some issues with
this form, described below.

You can also refer to capture groups relatively, by using a negative number, so
that C<\g-1> and C<\g{-1}> both refer to the immediately preceding capture
group, and C<\g-2> and C<\g{-2}> both refer to the group before it.  For
example:
d436 5
a440 5
         (Y)            # group 1
         (              # group 2
            (X)         # group 3
            \g{-1}      # backref to group 3
            \g{-3}      # backref to group 1
d444 1
a444 15
would match the same as C</(Y) ( (X) \g3 \g1 )/x>.  This allows you to
interpolate regexes into larger regexes and not have to worry about the
capture groups being renumbered.

You can dispense with numbers altogether and create named capture groups.
The notation is C<(?E<lt>I<name>E<gt>...)> to declare and C<\g{I<name>}> to
reference.  (To be compatible with .Net regular expressions, C<\g{I<name>}> may
also be written as C<\k{I<name>}>, C<\kE<lt>I<name>E<gt>> or C<\k'I<name>'>.)
I<name> must not begin with a number, nor contain hyphens.
When different groups within the same pattern have the same name, any reference
to that name assumes the leftmost defined group.  Named groups count in
absolute and relative numbering, and so can also be referred to by those
numbers.
(It's possible to do things with named capture groups that would otherwise
require C<(??{})>.)
d446 12
a457 31
Capture group contents are dynamically scoped and available to you outside the
pattern until the end of the enclosing block or until the next successful
match, whichever comes first.  (See L<perlsyn/"Compound Statements">.)
You can refer to them by absolute number (using C<"$1"> instead of C<"\g1">,
etc); or by name via the C<%+> hash, using C<"$+{I<name>}">.

Braces are required in referring to named capture groups, but are optional for
absolute or relative numbered ones.  Braces are safer when creating a regex by
concatenating smaller strings.  For example if you have C<qr/$a$b/>, and C<$a>
contained C<"\g1">, and C<$b> contained C<"37">, you would get C</\g137/> which
is probably not what you intended.

The C<\g> and C<\k> notations were introduced in Perl 5.10.0.  Prior to that
there were no named nor relative numbered capture groups.  Absolute numbered
groups were referred to using C<\1>,
C<\2>, etc., and this notation is still
accepted (and likely always will be).  But it leads to some ambiguities if
there are more than 9 capture groups, as C<\10> could mean either the tenth
capture group, or the character whose ordinal in octal is 010 (a backspace in
ASCII).  Perl resolves this ambiguity by interpreting C<\10> as a backreference
only if at least 10 left parentheses have opened before it.  Likewise C<\11> is
a backreference only if at least 11 left parentheses have opened before it.
And so on.  C<\1> through C<\9> are always interpreted as backreferences.
There are several examples below that illustrate these perils.  You can avoid
the ambiguity by always using C<\g{}> or C<\g> if you mean capturing groups;
and for octal constants always using C<\o{}>, or for C<\077> and below, using 3
digits padded with leading zeros, since a leading zero implies an octal
constant.

The C<\I<digit>> notation also works in certain circumstances outside
the pattern.  See L</Warning on \1 Instead of $1> below for details.
d463 1
a463 1
    /(.)\g1/                        # find first doubled char
d469 1
a469 1
    /(?'char'.)\g1/                 # ... mix and match
d473 3
a475 3
        $hours = $1;
        $minutes = $2;
        $seconds = $3;
a477 14
    /(.)(.)(.)(.)(.)(.)(.)(.)(.)\g10/   # \g10 is a backreference
    /(.)(.)(.)(.)(.)(.)(.)(.)(.)\10/    # \10 is octal
    /((.)(.)(.)(.)(.)(.)(.)(.)(.))\10/  # \10 is a backreference
    /((.)(.)(.)(.)(.)(.)(.)(.)(.))\010/ # \010 is octal

    $a = '(.)\1';        # Creates problems when concatenated.
    $b = '(.)\g{1}';     # Avoids the problems.
    "aa" =~ /${a}/;      # True
    "aa" =~ /${b}/;      # True
    "aa0" =~ /${a}0/;    # False!
    "aa0" =~ /${b}0/;    # True
    "aa\x08" =~ /${a}0/;  # True!
    "aa\x08" =~ /${b}0/;  # False

d489 2
a490 2
These special variables, like the C<%+> hash and the numbered match variables
(C<$1>, C<$2>, C<$3>, etc.) are dynamically scoped
d496 1
d504 1
a504 1
uses the same mechanism to produce C<$1>, C<$2>, etc, so you also pay a
a524 2
=head2 Quoting metacharacters

a548 2
C<quotemeta()> and C<\Q> are fully described in L<perlfunc/quotemeta>.

d552 1
a552 2
found in standard tools like B<awk> and
B<lex>.  The syntax for most of these is a
d566 1
a566 1
"question" exactly what is going on.  That's psychology....
d568 1
a568 1
=over 4
d578 2
a579 4
=item C<(?adlupimsx-imsx)>

=item C<(?^alupimsx)>
X<(?)> X<(?^)>
d583 2
a584 3
the remainder of the enclosing pattern group (if any).

This is particularly useful for dynamic patterns, such as those read in from a
d586 2
a587 2
somewhere.  Consider the case where some patterns want to be
case-sensitive and some do not:  The case-insensitive ones merely need to
d600 1
a600 1
    ( (?i) blah ) \s+ \g1
d607 1
a607 1
enclosing group. In other words, a pattern such as C<((?i)(?&NAME))> does not
d610 4
a613 19
Any of these modifiers can be set to apply globally to all regular
expressions compiled within the scope of a C<use re>.  See
L<re/"'/flags' mode">.

Starting in Perl 5.14, a C<"^"> (caret or circumflex accent) immediately
after the C<"?"> is a shorthand equivalent to C<d-imsx>.  Flags (except
C<"d">) may follow the caret to override it.
But a minus sign is not legal with it.

Note that the C<a>, C<d>, C<l>, C<p>, and C<u> modifiers are special in
that they can only be enabled, not disabled, and the C<a>, C<d>, C<l>, and
C<u> modifiers are mutually exclusive: specifying one de-specifies the
others, and a maximum of one (or two C<a>'s) may appear in the
construct.  Thus, for
example, C<(?-p)> will warn when compiled under C<use warnings>;
C<(?-d:...)> and C<(?dl:...)> are fatal errors.

Note also that the C<p> modifier is special in that its presence
anywhere in a pattern has a global effect.
d618 1
a618 4
=item C<(?adluimsx-imsx:pattern)>

=item C<(?^aluimsx:pattern)>
X<(?^:)>
d633 1
a633 1
C<(?adluimsx-imsx)>.  For example,
a640 31
Starting in Perl 5.14, a C<"^"> (caret or circumflex accent) immediately
after the C<"?"> is a shorthand equivalent to C<d-imsx>.  Any positive
flags (except C<"d">) may follow the caret, so

    (?^x:foo)

is equivalent to

    (?x-ims:foo)

The caret tells Perl that this cluster doesn't inherit the flags of any
surrounding pattern, but uses the system defaults (C<d-imsx>),
modified by any flags specified.

The caret allows for simpler stringification of compiled regular
expressions.  These look like

    (?^:pattern)

with any non-default flags appearing between the caret and the colon.
A test that looks at such stringification thus doesn't need to have the
system default flags hard-coded in it, just the caret.  If new flags are
added to Perl, the meaning of the caret's expansion will change to include
the default for those flags, so the test will still work, unchanged.

Specifying a negative flag after the caret is an error, as the flag is
redundant.

Mnemonic for C<(?^...)>:  A fresh beginning since the usual use of a caret is
to match at the beginning.

d645 1
a645 1
that the capture groups are numbered from the same starting point
d648 1
a648 1
Capture groups are numbered from left to right, but inside this
d651 1
a651 1
The numbering within each branch will be as normal, and any groups
d654 1
a654 1
groups in it.
d656 1
a656 1
This construct is useful when you want to capture one of a
d660 1
a660 1
which group the captured content will be stored.
d669 1
a669 1
numbered groups holding the captures, and that interferes with the
d683 2
a684 2
The problem here is that both the group named C<< a >> and the group
named C<< b >> are aliases for the group belonging to C<< $1 >>.
d689 1
a689 1
Look-around assertions are zero-width patterns which match a specific
d714 8
a721 1
match.  Use look-behind instead (see below).
d732 1
a732 1
not include it in C<$&>. This effectively provides variable-length
d761 3
a763 5
A named capture group. Identical in every respect to normal capturing
parentheses C<()> but for the additional fact that the group
can be referred to by name in various regular expression
constructs (like C<\g{NAME}>) and can be accessed by name
after a successful match via C<%+> or C<%->. See L<perlvar>
d766 2
a767 2
If multiple distinct capture groups have the same name then the
$+{NAME} will refer to the leftmost defined group in the match.
d772 1
a772 1
function in .NET regexes, the behavior is not. In Perl the groups are
d839 1
a839 1
     (?{ $cnt = 0 })               # Initialize $cnt.
d843 1
a843 2
           local $cnt = $cnt + 1;  # Update $cnt,
                                   # backtracking-safe.
d847 2
a848 2
     (?{ $res = $cnt })            # On success copy to
                                   # non-localized location.
d868 2
a869 2
variables contain results of the C<qr//> operator (see
L<perlop/"qr/STRINGE<sol>msixpodual">).
d890 2
a891 3
B<WARNING>: In perl 5.12.x and earlier, the regex engine
was not re-entrant, so interpolated code could not
safely invoke the regex engine either directly with
d893 1
a893 1
C<split>. Invoking the regex engine in these blocks would make perl
d907 1
a907 1
of evaluation is considered a regular expression and matched as
d909 1
a909 1
that the contents of capture groups defined inside an eval'ed pattern
d911 2
a912 3
way for the inner pattern returned from the code block to refer to a
capture group defined outside.  (The code block itself can use C<$1>, etc.,
to refer to the enclosing pattern's capture groups.)  Thus,
d923 9
a931 9
 $re = qr{
            \(
            (?:
               (?> [^()]+ )  # Non-parens without backtracking
             |
               (??{ $re })   # Group with matching parens
            )*
            \)
         }x;
d939 2
a940 2
variables contain results of the C<qr//> operator (see
L<perlop/"qrE<sol>STRINGE<sol>msixpodual">).
d942 3
a944 3
In perl 5.12.x and earlier, because the regex engine was not re-entrant,
delayed code could not safely invoke the regex engine either directly with
C<m//> or C<s///>), or indirectly with functions such as C<split>.
d956 2
a957 2
instead it treats the contents of a capture group as an independent
pattern that must match at the current position.  Capture groups
d962 1
a962 1
the paren-number of the capture group to recurse to. C<(?R)> recurses to
d965 1
a965 1
to be relative, with negative numbers indicating preceding capture groups
d967 1
a967 1
declared group, and C<(?+1)> indicates the next group to be declared.
d969 1
a969 1
relative backreferences, in that with recursion unclosed groups B<are>
d975 1
a975 1
  $re = qr{ (                   # paren group 1 (full function)
d977 1
a977 1
              (                 # paren group 2 (parens)
d979 1
a979 1
                  (             # paren group 3 (contents of parens)
d981 1
a981 1
                   (?> [^()]+ ) # Non-parens without backtracking
d983 1
a983 1
                   (?2)         # Recurse to start of paren group 2
d1004 1
a1004 1
If there is no corresponding capture group defined, then it is a
d1044 1
a1044 5
Conditional expression. Matches C<yes-pattern> if C<condition> yields
a true value, matches C<no-pattern> otherwise. A missing pattern always
matches.

C<(condition)> should be either an integer in
d1047 1
a1047 1
name in angle brackets or single quotes (which is valid if a group
d1060 1
a1060 1
Checks if the numbered capturing group has matched something.
d1064 1
a1064 6
Checks if a group with the given name has matched something.

=item (?=...) (?!...) (?<=...) (?<!...)

Checks whether the pattern matches (or does not match, for the '!'
variants).
d1068 1
a1068 1
Treats the return value of the code block as the condition.
d1108 3
a1110 3
A special form is the C<(DEFINE)> predicate, which never executes its
yes-pattern directly, and does not allow a no-pattern. This allows one to
define subpatterns which will be executed only by the recursion mechanism.
d1129 2
a1130 2
Note that capture groups matched inside of recursion are not accessible
after the recursion returns, so the extra layer of capturing groups is
a1133 13
Finally, keep in mind that subpatterns created inside a DEFINE block
count towards the absolute and relative number of captures, so this:

    my @@captures = "a" =~ /(.)                  # First capture
                           (?(DEFINE)
                               (?<EXAMPLE> 1 )  # Second capture
                           )/x;
    say scalar @@captures;

Will output 2, not 1. This is particularly important if you intend to
compile the definitions with the C<qr//> operator, and later
interpolate them in another pattern.

a1153 4
C<< (?>pattern) >> does not disable backtracking altogether once it has
matched. It is still possible to backtrack past the construct, but not
into it. So C<< ((?>a*)|(?>b*))ar >> will still match "bar".

d1155 2
a1156 2
C<(?=(pattern))\g{-1}>.  This matches the same substring as a standalone
C<a+>, and the following C<\g{-1}> eats the matched string; it therefore
d1166 1
a1166 1
            [^()]+           # x+
d1186 1
a1186 1
            (?> [^()]+ )        # change x+ above to (?> x+ )
d1196 1
a1196 2
however, that, when this construct is followed by a
quantifier, it currently triggers a warning message under
d1267 1
a1267 1
and most other regex-related variables. They are not local to a scope, nor
d1274 1
a1274 1
=over 3
d1315 1
a1315 1
we prevent backtracking and find the count of the longest matching string
d1331 1
d1349 1
a1349 1
Compare the following to the examples in C<(*PRUNE)>; note the string
d1352 2
a1353 2
 'aaabaaab' =~ /a+b?(*SKIP)(?{print "$&\n"; $count++})(*FAIL)/;
 print "Count=$count\n";
d1366 1
a1366 1
X<(*MARK)> X<(*MARK:NAME)> X<(*:NAME)>
d1384 1
a1384 1
without using a separate capture group for each branch, which in turn
d1394 1
a1394 1
See L</(*SKIP)> for more details.
d1400 1
a1400 1
This is similar to the "cut group" operator C<::> from Perl 6.  Like
d1403 1
a1403 3
innermost enclosing group (capturing or otherwise) that has alternations.
The two branches of a C<(?(condition)yes-pattern|no-pattern)> do not
count as an alternation, as far as C<(*THEN)> is concerned.
a1430 6
=back

=item Verbs without an argument

=over 4

d1440 2
a1441 2
 'aaabaaab' =~ /a+b?(*COMMIT)(?{print "$&\n"; $count++})(*FAIL)/;
 print "Count=$count\n";
d1452 6
d1479 1
a1479 1
If the C<(*ACCEPT)> is inside of capturing groups then the groups are
d1486 1
a1486 1
be set. If another branch in the inner parentheses was matched, such as in the
d1518 1
a1518 1
        print "$2 follows $1.\n";
d1536 1
a1536 1
        print "got <$1>\n";
d1556 2
a1557 2
    if ( /(.*)(\d*)/ ) {                                # Wrong!
        print "Beginning is <$1>, number is <$2>.\n";
d1570 8
a1577 8
        (.*)(\d*)
        (.*)(\d+)
        (.*?)(\d*)
        (.*?)(\d+)
        (.*)(\d+)$
        (.*?)(\d+)$
        (.*)\b(\d+)$
        (.*\D)(\d+)$
d1581 6
a1586 6
        printf "%-12s ", $pat;
        if ( /$pat/ ) {
            print "<$1> <$2>\n";
        } else {
            print "FAIL\n";
        }
d1612 2
a1613 2
    if ( /^\D*(?!123)/ ) {                # Wrong!
        print "Yup, no 123 in $_\n";
d1645 1
a1645 1
try to match C<(?!123)> with "123", which fails.  But because
d1693 1
a1693 1
which does not backtrack (see L</C<< (?>pattern) >>>).  Note also that
d1698 1
a1698 1
following match, see L</C<< (?>pattern) >>>.
d1714 1
a1714 1
string, so the pattern C<blurfl> would match "blurfl" in the target
d1743 1
a1743 1
of three octal digits, matches the character whose coded character set value
d1745 1
a1745 1
matches the character whose ordinal is I<nn>. The expression \cI<x>
d1753 1
a1753 1
("(", "(?:", etc. or the beginning of the pattern) up to the first "|", and
d1755 1
a1755 1
closing pattern delimiter.  That's why it's common practice to include
d1773 1
a1773 1
\I<n> or \gI<n>.  Subpatterns are numbered based on the left to right order
d1776 1
a1776 1
the rules for that subpattern.  Therefore, C<(0|0x)\d*\s\g1\d*> will
d1787 1
a1787 2
This is grandfathered (for \1 to \9) for the RHS of a substitute to avoid
shocking the
d1795 1
a1795 1
    s/(\d+)/ \1 + 1 /eg;            # causes warning under -w
d1836 1
a1836 1
    @@chars = split //, $string;           # // is not magic in split
d1852 4
a1855 3
   m{ (?: NON_ZERO_LENGTH )* (?: ZERO_LENGTH )? }x;

For example, this program
d1857 1
a1857 24
   #!perl -l
   "aaaaab" =~ /
     (?:
        a                 # non-zero
        |                 # or
       (?{print "hello"}) # print hello whenever this
                          #    branch is tried
       (?=(b))            # zero-width assertion
     )*  # any number of times
    /x;
   print $&;
   print $1;

prints

   hello
   aaaaa
   b

Notice that "hello" is only printed once, as when Perl sees that the sixth
iteration of the outermost C<(?:)*> matches a zero-length string, it stops
the C<*>.

The higher-level loops preserve an additional state between iterations:
d1888 1
a1888 1
patterns using combining operators C<ST>, C<S|T>, C<S*> etc.
d1917 1
a1917 1
If C<A> is a better match for C<S> than C<A'>, C<AB> is a better
d1921 1
a1921 1
C<B> is a better match for C<T> than C<B'>.
d1968 1
a1968 1
the result of EXPR, or the pattern contained by capture group PARNO.
d1985 2
a1986 7
As of Perl 5.10.0, one can create custom regular expression engines.  This
is not for the faint of heart, as they have to plug in at the C level.  See
L<perlreapi> for more details.

As an alternative, overloaded constants (see L<overload>) provide a simple
way to extend the functionality of the RE engine, by substituting one
pattern for another.
d2009 1
a2009 1
                  'Y|' => qr/(?=\S)(?<!\S)|(?!\S)(?<=\S)/ );
d2032 1
a2032 1
=head2 PCRE/Python Support
d2034 1
a2034 1
As of Perl 5.10.0, Perl supports several Python/PCRE-specific extensions
d2036 1
a2036 1
Perl-specific syntax, the following are also accepted:
d2042 1
a2042 1
Define a named capture group. Equivalent to C<< (?<NAME>pattern) >>.
d2046 1
a2046 1
Backreference to a named capture group. Equivalent to C<< \g{NAME} >>.
d2050 1
a2050 1
Subroutine call to a named capture group. Equivalent to C<< (?&NAME) >>.
d2056 9
a2065 3

There are a number of issues with regard to case-insensitive matching
in Unicode rules.  See C<i> under L</Modifiers> above.
@


1.1.1.14
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d34 2
a35 2
the start or end of line only at the left and right ends of the string to
matching them anywhere within the string.
d75 2
a76 5
Perl doesn't match multiple characters in a bracketed
character class unless the character that maps to them is explicitly
mentioned, and it doesn't match them at all if the character class is
inverted, which otherwise could be highly confusing.  See
L<perlrecharclass/Bracketed Character Classes>, and
d79 17
d152 2
a153 2
C<{5,}>.  Similarly, C<(?:...)> can't have a space between the C<(>,
C<?>, and C<:>.  Within any delimiters for such a
d286 8
d326 1
a326 5
the pattern uses a Unicode property (C<\p{...}>); or

=item 6

the pattern uses L</C<(?[ ])>>
d336 2
a337 2
Unless the pattern or string are encoded in UTF-8, only ASCII characters
can match positively.
d363 1
a363 2
characters C<[ \f\n\r\t]>, and starting in Perl v5.18, experimentally,
the vertical tab; C<\w> means the 63 characters
d494 1
a494 1
but this option was removed in perl 5.10.)
d515 10
a524 4
a backslashed sequence like C<\x{...}>, it is treated as a regular
character.  In particular, the lower quantifier bound is not optional,
and a typo in a quantifier silently causes it to be treated as the
literal characters.  For example,
d530 1
a530 7
S<C<"o { 4 , 3 }">>.  It is planned to eventually require literal uses
of curly brackets to be escaped, say by preceding them with a backslash
or enclosing them within square brackets, (C<"\{"> or C<"[{]">).  This
change will allow for future syntax extensions (like making the lower
bound of a quantifier optional), and better error checking.  In the
meantime, you should get in the habit of escaping all instances where
you mean a literal "{".)
a624 1
  (?[...])  [8]  Extended bracketed character class
d650 2
a651 1
  \N        [7]  Any character but \n.  Not affected by /s modifier
a690 4
=item [8]

See L<perlrecharclass/Extended Bracketed Character Classes> for details.

d899 2
a900 4
already paid the price.  As of 5.17.4, the presence of each of the three
variables in a program is recorded separately, and depending on
circumstances, perl may be able be more efficient knowing that only C<$&>
rather than all three have been seen, for example.
d917 1
a917 1
that looks like \\, \(, \), \[, \], \{, or \} is always
d1254 1
a1254 5
due to the effect of future optimisations in the regex engine. The
implementation of this feature was radically overhauled for the 5.18.0
release, and its behaviour in earlier versions of perl was much buggier,
especially in relation to parsing, lexical vars, scoping, recursion and
reentrancy.
d1256 7
a1262 2
This zero-width assertion executes any embedded Perl code.  It always
succeeds, and its return value is set as C<$^R>.
d1264 3
a1266 35
In literal patterns, the code is parsed at the same time as the
surrounding code. While within the pattern, control is passed temporarily
back to the perl parser, until the logically-balancing closing brace is
encountered. This is similar to the way that an array index expression in
a literal string is handled, for example

    "abc$array[ 1 + f('[') + g()]def"

In particular, braces do not need to be balanced:

    s/abc(?{ f('{'); })/def/

Even in a pattern that is interpolated and compiled at run-time, literal
code blocks will be compiled once, at perl compile time; the following
prints "ABCD":

    print "D";
    my $qr = qr/(?{ BEGIN { print "A" } })/;
    my $foo = "foo";
    /$foo$qr(?{ BEGIN { print "B" } })/;
    BEGIN { print "C" }

In patterns where the text of the code is derived from run-time
information rather than appearing literally in a source code /pattern/,
the code is compiled at the same time that the pattern is compiled, and
for reasons of security, C<use re 'eval'> must be in scope. This is to
stop user-supplied patterns containing code snippets from being
executable.

In situations where you need to enable this with C<use re 'eval'>, you should
also have taint checking enabled.  Better yet, use the carefully
constrained evaluation within a Safe compartment.  See L<perlsec> for
details about both these mechanisms.

From the viewpoint of parsing, lexical variable scope and closures,
d1268 1
a1268 21
    /AAA(?{ BBB })CCC/

behaves approximately like

    /AAA/ && do { BBB } && /CCC/

Similarly,

    qr/AAA(?{ BBB })CCC/

behaves approximately like

    sub { /AAA/ && do { BBB } && /CCC/ }

In particular:

    { my $i = 1; $r = qr/(?{ print $i })/ }
    my $i = 2;
    /$r/; # prints "1"

Inside a C<(?{...})> block, C<$_> refers to the string the regular
d1272 3
a1274 7
The code block introduces a new scope from the perspective of lexical
variable declarations, but B<not> from the perspective of C<local> and
similar localizing behaviours. So later code blocks within the same
pattern will still see the values which were localized in earlier blocks.
These accumulated localizations are undone either at the end of a
successful match, or if the assertion is backtracked (compare
L<"Backtracking">). For example,
d1291 9
a1299 13
will initially increment C<$cnt> up to 8; then during backtracking, its
value will be unwound back to 4, which is the value assigned to C<$res>.
At the end of the regex execution, $cnt will be wound back to its initial
value of 0.

This assertion may be used as the condition in a

    (?(condition)yes-pattern|no-pattern)

switch.  If I<not> used in this way, the result of evaluation of C<code>
is put into the special variable C<$^R>.  This happens immediately, so
C<$^R> can be used from other C<(?{ code })> assertions inside the same
regular expression.
d1305 31
a1335 8
Note that the special variable C<$^N>  is particularly useful with code
blocks to capture the results of submatches in variables without having to
keep track of the number of nested parentheses. For example:

  $_ = "The brown fox jumps over the lazy dog";
  /the (\S+)(?{ $color = $^N }) (\S+)(?{ $animal = $^N })/i;
  print "color = $color, animal = $animal\n";

d1346 9
a1354 19
This is a "postponed" regular subexpression.  It behaves in I<exactly> the
same way as a C<(?{ code })> code block as described above, except that
its return value, rather than being assigned to C<$^R>, is treated as a
pattern, compiled if it's a string (or used as-is if its a qr// object),
then matched as if it were inserted instead of this construct.

During the matching of this sub-pattern, it has its own set of
captures which are valid during the sub-match, but are discarded once
control returns to the main pattern. For example, the following matches,
with the inner pattern capturing "B" and matching "BB", while the outer
pattern captures "A";

    my $inner = '(.)\1';
    "ABBA" =~ /^(.)(??{ $inner })\1/;
    print $1; # prints "A";

Note that this means that  there is no way for the inner pattern to refer
to a capture group defined outside.  (The code block itself can use C<$1>,
etc., to refer to the enclosing pattern's capture groups.)  Thus, although
d1358 4
a1361 1
I<will> match, it will I<not> set $1 on exit.
d1375 1
a1375 3
See also
L<C<(?I<PARNO>)>|/(?PARNO) (?-PARNO) (?+PARNO) (?R) (?0)>
for a different, more efficient way to accomplish
d1378 13
a1390 3
Executing a postponed regular expression 50 times without consuming any
input string will result in a fatal error.  The maximum depth is compiled
into perl, so changing it requires a custom build.
d1392 1
a1392 1
=item C<(?I<PARNO>)> C<(?-I<PARNO>)> C<(?+I<PARNO>)> C<(?R)> C<(?0)>
d1397 5
a1401 6
Similar to C<(??{ code })> except that it does not involve executing any
code or potentially compiling a returned pattern string; instead it treats
the part of the current pattern contained within a specified capture group
as an independent pattern that must match at the current position.
Capture groups contained by the pattern will have the value as determined
by the outermost recursion.
d1403 1
a1403 1
I<PARNO> is a sequence of digits (not starting with 0) whose value reflects
d1406 1
a1406 1
C<(?R)>. If I<PARNO> is preceded by a plus or minus sign then it is assumed
d1456 1
a1456 1
    if (/foo $parens \s+ \+ \s+ bar $parens/x) {
d1470 1
a1470 1
Recurse to a named subpattern. Identical to C<(?I<PARNO>)> except that the
d1490 1
a1490 1
C<(condition)> should be one of: 1) an integer in
d1492 1
a1492 1
matched); 2) a look-ahead/look-behind/evaluate zero-width assertion; 3) a
d1494 1
a1494 1
with the given name matched); or 4) the special symbol (R) (true when
a1706 4
=item C<(?[ ])>

See L<perlrecharclass/Extended Bracketed Character Classes>.

d1892 1
a1892 1
  / ( A (*THEN) B | C ) /
d1896 1
a1896 1
  / ( A (*PRUNE) B | C ) /
d2458 1
a2458 1
=item C<(??{ EXPR })>, C<(?I<PARNO>)>
d2461 1
a2461 1
the result of EXPR, or the pattern contained by capture group I<PARNO>.
@


1.1.1.15
log
@Import perl-5.20.1
@
text
@d34 2
a35 2
the start of the string's first line and the end of its last line to
matching the start and end of each line within the string.
d94 8
a101 3
In Perl 5.20 and higher this is ignored. Due to a new copy-on-write
mechanism, ${^PREMATCH}, ${^MATCH}, and ${^POSTMATCH} will be available
after the match regardless of the modifier.
d106 1
a106 1
These modifiers, all new in 5.14, affect which character-set rules
a109 22
=item Other Modifiers

There are a number of flags that can be found at the end of regular
expression constructs that are I<not> generic regular expression flags, but
apply to the operation being performed, like matching or substitution (C<m//>
or C<s///> respectively).

Flags described further in
L<perlretut/"Using regular expressions in Perl"> are:

  c  - keep the current position during repeated matching
  g  - globally match the pattern repeatedly in the string

Substitution-specific modifiers described in

L<perlop/"s/PATTERN/REPLACEMENT/msixpodualgcer"> are:

  e  - evaluate the right-hand side as an expression
  ee - evaluate the right side as a string then eval the result
  o  - pretend to optimize your code, but actually introduce bugs
  r  - perform non-destructive substitution and return the new value

d122 6
a127 12
backslashed nor within a bracketed character class.  You can use this to
break up your regular expression into (slightly) more readable parts.
Also, the C<#> character is treated as a metacharacter introducing a
comment that runs up to the pattern's closing delimiter, or to the end
of the current line if the pattern extends onto the next line.  Hence,
this is very much like an ordinary Perl code comment.  (You can include
the closing delimiter within the comment only if you precede it with a
backslash, so be careful!)

Use of C</x> means that if you want real
whitespace or C<#> characters in the pattern (outside a bracketed character
class, which is unaffected by C</x>), then you'll either have to
d129 5
a133 19
hex, or C<\N{}> escapes.
It is ineffective to try to continue a comment onto the next line by
escaping the C<\n> with a backslash or C<\Q>.

You can use L</(?#text)> to create a comment that ends earlier than the
end of the current line, but C<text> also can't contain the closing
delimiter unless escaped with a backslash.

Taken together, these features go a long way towards
making Perl's regular expressions more readable.  Here's an example:

    # Delete (most) C comments.
    $program =~ s {
	/\*	# Match the opening delimiter.
	.*?	# Match a minimal number of characters.
	\*/	# Match the closing delimiter.
    } []gsx;

Note that anything inside
d150 1
a150 1
the character set modifiers; they affect the character set rules
d222 2
a223 4
The only non-single-byte locale Perl supports is (starting in v5.20)
UTF-8.  This means that code points above 255 are treated as Unicode no
matter what locale is in effect (since UTF-8 implies Unicode).

d225 6
a230 11
the 255/256 boundary.  Except for UTF-8 locales in Perls v5.20 and
later, these are disallowed under C</l>.  For example, 0xFF (on ASCII
platforms) does not caselessly match the character at 0x178, C<LATIN
CAPITAL LETTER Y WITH DIAERESIS>, because 0xFF may not be C<LATIN SMALL
LETTER Y WITH DIAERESIS> in the current locale, and Perl has no way of
knowing if that character even exists in the locale, much less what code
point it is.

In a UTF-8 locale in v5.20 and later, the only visible difference
between locale and non-locale in regular expressions should be tainting
(see L<perlsec>).
d371 1
a371 1
case-insensitive matching uses Unicode rules; for example, "k" will
d390 1
a390 1
the C</u> modifier explicitly if there are a few regular expressions
d462 1
a462 2
    $        Match the end of the string (or before newline at the end
             of the string)
d503 1
a503 1
    /o{4,a}/
d505 3
a507 2
compiles to match the sequence of six characters
S<C<"o { 4 , a }">>.  It is planned to eventually require literal uses
d538 1
a538 1
Normally when a quantified subpattern does not allow the rest of the
a569 10
Note that the possessive quantifier modifier can not be be combined
with the non-greedy modifier. This is because it would make no sense.
Consider the follow equivalency table:

    Illegal         Legal
    ------------    ------
    X??+            X{0}
    X+?+            X{1}
    X{min,max}?+    X{min}

d588 3
a590 3
 \L          lowercase until \E (think vi)
 \U          uppercase until \E (think vi)
 \Q          quote (disable) pattern metacharacters until \E
d624 1
a624 1
                   lookbehind. (Deprecated.)
a734 11
Note also that C<s///> will refuse to overwrite part of a substitution
that has already been replaced; so for example this will stop after the
first iteration, rather than iterating its way backwards through the
string:

    $_ = "123456789";
    pos = 6;
    s/.(?=.\G)/X/g;
    print; 	# prints 1234X6789, not XXXXX6789


d875 1
a875 2
B<WARNING>: If your code is to run on Perl 5.16 or earlier,
beware that once Perl sees that you need one of C<$&>, C<$`>, or
d877 4
a880 5
pattern match.  This may substantially slow your program.

Perl uses the same mechanism to produce C<$1>, C<$2>, etc, so you also
pay a price for each pattern that contains capturing parentheses.
(To avoid this cost while retaining the grouping behaviour, use the
d886 4
a889 1
already paid the price.
d892 1
a892 6
Perl 5.16 introduced a slightly more efficient mechanism that notes
separately whether each of C<$`>, C<$&>, and C<$'> have been seen, and
thus may only need to copy part of the string.  Perl 5.20 introduced a
much more efficient copy-on-write mechanism which eliminates any slowdown.

As another workaround for this problem, Perl 5.10.0 introduced C<${^PREMATCH}>,
d898 1
a898 2
have to tell perl when you want to use them.  As of Perl 5.20, these three
variables are equivalent to C<$`>, C<$&> and C<$'>, and C</p> is ignored.
d954 2
a955 2
A comment.  The text is ignored.
Note that Perl closes
d957 1
a957 4
C<)> in the comment.  The pattern's closing delimiter must be escaped by
a backslash if it appears in the comment.

See L</E<sol>x> for another way to have comments in patterns.
d1156 1
a1156 2
There is a special form of this construct, called C<\K> (available since
Perl 5.10.0), which causes the
d1240 8
a1247 5
B<WARNING>: Using this feature safely requires that you understand its
limitations.  Code executed that has side effects may not perform identically
from version to version due to the effect of future optimisations in the regex
engine.  For more information on this, see L</Embedded Code Execution
Frequency>.
d1366 4
a1369 5
B<WARNING>: Using this feature safely requires that you understand its
limitations.  Code executed that has side effects may not perform
identically from version to version due to the effect of future
optimisations in the regex engine.  For more information on this, see
L</Embedded Code Execution Frequency>.
d1419 1
a1419 7
X<regex, relative recursion> X<GOSUB> X<GOSTART>

Recursive subpattern. Treat the contents of a given capture buffer in the
current pattern as an independent subpattern and attempt to match it at
the current position in the string. Information about capture state from
the caller for things like backreferences is available to the subpattern,
but capture buffers set by the subpattern are not visible to the caller.
d1424 3
a1426 4
as an independent pattern that must match at the current position. Also
different is the treatment of capture buffers, unlike C<(??{ code })>
recursive patterns have access to their callers match state, so one can
use backreferences safely.
d1594 1
a1594 1
not be as efficient, as the optimizer is not very clever about
d1602 1
a1602 1
     (?<ADDRESS_PAT>....)
d1740 4
d1969 3
a2557 35

=head2 Embedded Code Execution Frequency

The exact rules for how often (??{}) and (?{}) are executed in a pattern
are unspecified.  In the case of a successful match you can assume that
they DWIM and will be executed in left to right order the appropriate
number of times in the accepting path of the pattern as would any other
meta-pattern.  How non-accepting pathways and match failures affect the
number of times a pattern is executed is specifically unspecified and
may vary depending on what optimizations can be applied to the pattern
and is likely to change from version to version.

For instance in

  "aaabcdeeeee"=~/a(?{print "a"})b(?{print "b"})cde/;

the exact number of times "a" or "b" are printed out is unspecified for
failure, but you may assume they will be printed at least once during
a successful match, additionally you may assume that if "b" is printed,
it will be preceded by at least one "a".

In the case of branching constructs like the following:

  /a(b|(?{ print "a" }))c(?{ print "c" })/;

you can assume that the input "ac" will output "ac", and that "abc"
will output only "c".

When embedded code is quantified, successful matches will call the
code once for each matched iteration of the quantifier.  For
example:

  "good" =~ /g(?:o(?{print "o"}))*d/;

will output "o" twice.
@


1.1.1.16
log
@Import perl-5.24.2
@
text
@d16 1
a16 1
C<m//>, C<s///>, C<qr//> and C<"??"> in L<perlop/"Regexp Quote-Like
a18 3
New in v5.22, L<C<use re 'strict'>|re/'strict' mode> applies stricter
rules than otherwise when compiling regular expression patterns.  It can
find things that, while legal, may not be what you intended.
a21 2
=head3 Overview

d30 1
a30 1
=item B<C<m>>
d33 1
a33 1
Treat the string as multiple lines.  That is, change C<"^"> and C<"$"> from matching
d37 1
a37 1
=item B<C<s>>
d41 1
a41 1
Treat the string as single line.  That is, change C<"."> to match any character
d44 2
a45 2
Used together, as C</ms>, they let the C<"."> match any character whatsoever,
while still allowing C<"^"> and C<"$"> to match, respectively, just after
d48 1
a48 1
=item B<C<i>>
d52 1
a52 2
Do case-insensitive pattern matching.  For example, "A" will match "a"
under C</i>.
d58 2
a59 2
rules/non-Unicode rules boundary (ords 255/256) will not succeed, unless
the locale is a UTF-8 one.  See L<perllocale>.
d61 3
a63 3
There are a number of Unicode characters that match a sequence of
multiple characters under C</i>.  For example,
C<LATIN SMALL LIGATURE FI> should match the sequence C<fi>.  Perl is not
d82 1
a82 1
=item B<C<x>>
d88 1
a88 1
=item B<C<p>>
d91 2
a92 2
Preserve the string matched such that C<${^PREMATCH}>, C<${^MATCH}>, and
C<${^POSTMATCH}> are available for use after matching.
d95 1
a95 1
mechanism, C<${^PREMATCH}>, C<${^MATCH}>, and C<${^POSTMATCH}> will be available
d98 1
a98 1
=item B<C<a>>, B<C<d>>, B<C<l>>, and B<C<u>>
a104 21
=item B<C<n>>
X</n> X<regex, non-capture> X<regexp, non-capture>
X<regular expression, non-capture>

Prevent the grouping metacharacters C<()> from capturing. This modifier,
new in 5.22, will stop C<$1>, C<$2>, etc... from being filled in.

  "hello" =~ /(hi|hello)/;   # $1 is "hello"
  "hello" =~ /(hi|hello)/n;  # $1 is undef

This is equivalent to putting C<?:> at the beginning of every capturing group:

  "hello" =~ /(?:hi|hello)/; # $1 is undef

C</n> can be negated on a per-group basis. Alternatively, named captures
may still be used.

  "hello" =~ /(?-n:(hi|hello))/n;   # $1 is "hello"
  "hello" =~ /(?<greet>hi|hello)/n; # $1 is "hello", $+{greet} is
                                    # "hello"

d120 1
a120 1
L<perlop/"s/PATTERN/REPLACEMENT/msixpodualngcer"> are:
d131 1
a131 1
in question might not really be a slash.  The modifiers C</imnsxadlup>
d135 1
a135 6
=head3 Details on some modifiers

Some of the modifiers require more explanation than given in the
L</Overview> above.

=head4 /x
d141 1
a141 1
Also, the C<"#"> character is treated as a metacharacter introducing a
d149 1
a149 1
whitespace or C<"#"> characters in the pattern (outside a bracketed character
d175 2
a176 2
C<{5,}>.  Similarly, C<(?:...)> can't have a space between the C<"{">,
C<"?">, and C<":">.  Within any delimiters for such a
d184 1
a184 16
The set of characters that are deemed whitespace are those that Unicode
calls "Pattern White Space", namely:

 U+0009 CHARACTER TABULATION
 U+000A LINE FEED
 U+000B LINE TABULATION
 U+000C FORM FEED
 U+000D CARRIAGE RETURN
 U+0020 SPACE
 U+0085 NEXT LINE
 U+200E LEFT-TO-RIGHT MARK
 U+200F RIGHT-TO-LEFT MARK
 U+2028 LINE SEPARATOR
 U+2029 PARAGRAPH SEPARATOR

=head4 Character set modifiers
d224 1
a224 1
done, whereas using the pragmas gives consistent results for all
d233 2
a234 2
implicitly adds the C</l>, and applies locale rules to the C<\U>.   The
lesson is to C<use locale>, and not C</l> explicitly.
d259 3
a261 5
Prior to v5.20, Perl did not support multi-byte locales.  Starting then,
UTF-8 locales are supported.  No other multi byte locales are ever
likely to be supported.  However, in all locales, one can have code
points above 255 and these will always be treated as Unicode no matter
what locale is in effect.
d348 1
a348 1
the pattern uses a Unicode property (C<\p{...}> or C<\P{...}>); or
a351 4
the pattern uses a Unicode break (C<\b{...}> or C<\B{...}>); or

=item 7

d378 1
a378 2
probably should only explicitly use it to maintain weird backward
compatibilities.
d389 2
a390 2
characters C<[ \f\n\r\t]>, and starting in Perl v5.18, the vertical tab;
C<\w> means the 63 characters
d421 2
a422 2
specify the C<"a"> twice, for example C</aai> or C</aia>.  (The first
occurrence of C<"a"> restricts the C<\d>, etc., and the second occurrence
d512 2
a513 2
By default, the C<"^"> character is guaranteed to match only the
beginning of the string, the C<"$"> character only the end (or before the
d516 2
a517 2
will not be matched by C<"^"> or C<"$">.  You may, however, wish to treat a
string as a multi-line buffer, such that the C<"^"> will match after any
d519 1
a519 1
the string), and C<"$"> will match before any newline.  At the
d525 1
a525 1
To simplify multi-line substitutions, the C<"."> character never matches a
d542 16
a557 9
(If a curly bracket occurs in a context other than one of the
quantifiers listed above, where it does not form part of a backslashed
sequence like C<\x{...}>, it is treated as a regular character.
However, a deprecation warning is raised for these
occurrences, and in Perl v5.26, literal uses of a curly bracket will be
required to be escaped, say by preceding them with a backslash (C<"\{">)
or enclosing them within square brackets  (C<"[{]">).  This change will
allow for future syntax extensions (like making the lower bound of a
quantifier optional), and better error checking of quantifiers.)
d559 2
a560 2
The C<"*"> quantifier is equivalent to C<{0,}>, the C<"+">
quantifier to C<{1,}>, and the C<"?"> quantifier to C<{0,1}>.  I<n> and I<m> are limited
d570 1
a570 1
minimum number of times possible, follow the quantifier with a C<"?">.  Note
d674 5
a741 2
    \b{} Match at Unicode boundary of specified type
    \B{} Match where corresponding \b{} doesn't match
a749 6
A Unicode boundary (C<\b{}>), available starting in v5.22, is a spot
between two characters, or before the first character in the string, or
after the final character in the string where certain criteria defined
by Unicode are met.  See L<perlrebackslash/\b{}, \b, \B{}, \B> for
details.

d756 1
a756 1
The C<\A> and C<\Z> are just like C<"^"> and C<"$">, except that they
d758 1
a758 1
C<"^"> and C<"$"> will match at every internal line boundary.  To match
d966 1
a966 1
their punctuation character equivalents, however at the trade-off that you
d976 1
a976 2
that looks like C<\\>, C<\(>, C<\)>, C<\[>, C<\]>, C<\{>, or C<\}> is
always
d985 3
a987 3
Today it is more common to use the C<L<quotemeta()|perlfunc/quotemeta>>
function or the C<\Q> metaquoting escape sequence to disable all
metacharacters' special meanings like this:
d1026 2
a1027 2
the comment as soon as it sees a C<")">, so there is no way to put a literal
C<")"> in the comment.  The pattern's closing delimiter must be escaped by
d1032 1
a1032 1
=item C<(?adlupimnsx-imnsx)>
d1034 1
a1034 1
=item C<(?^alupimnsx)>
d1038 1
a1038 1
turned off, if preceded by C<"-">) for the remainder of the pattern or
d1065 1
a1065 1
change the case-sensitivity of the C<"NAME"> pattern.
d1072 1
a1072 1
after the C<"?"> is a shorthand equivalent to C<d-imnsx>.  Flags (except
d1090 1
a1090 1
=item C<(?adluimnsx-imnsx:pattern)>
d1092 1
a1092 1
=item C<(?^aluimnsx:pattern)>
d1096 1
a1096 1
C<"()">, but doesn't make backreferences as C<"()"> does.  So
d1107 2
a1108 2
Any letters between C<"?"> and C<":"> act as flags modifiers as with
C<(?adluimnsx-imnsx)>.  For example,
a1115 3
Note that any C<()> constructs enclosed within this one will still
capture unless the C</n> modifier is in effect.

d1117 1
a1117 1
after the C<"?"> is a shorthand equivalent to C<d-imnsx>.  Any positive
d1124 1
a1124 1
    (?x-imns:foo)
d1127 1
a1127 1
surrounding pattern, but uses the system defaults (C<d-imnsx>),
d1192 1
a1192 1
=item Lookaround Assertions
d1195 1
a1195 1
Lookaround assertions are zero-width patterns which match a specific
d1198 2
a1199 2
fails. Lookbehind matches text up to the current match position,
lookahead matches text following the current match position.
d1206 1
a1206 1
A zero-width positive lookahead assertion.  For example, C</\w+(?=\t)/>
d1212 1
a1212 1
A zero-width negative lookahead assertion.  For example C</foo(?!bar)/>
d1214 2
a1215 2
however that lookahead and lookbehind are NOT the same thing.  You cannot
use this for lookbehind.
d1220 1
a1220 1
match.  Use lookbehind instead (see below).
d1225 1
a1225 1
A zero-width positive lookbehind assertion.  For example, C</(?<=\t)\w+/>
d1227 1
a1227 1
Works only for fixed-width lookbehind.
d1233 1
a1233 1
lookbehind. The use of C<\K> inside of another lookaround assertion
d1250 1
a1250 1
A zero-width negative lookbehind assertion.  For example C</(?<!bar)foo/>
d1252 1
a1252 1
only for fixed-width lookbehind.
d1269 1
a1269 1
C<$+{NAME}> will refer to the leftmost defined group in the match.
d1280 1
a1280 1
C<$+{I<foo>}> will be the same as C<$2>, and C<$3> will contain 'z' instead of
d1283 1
a1283 1
Currently I<NAME> is restricted to simple identifiers only.
d1408 1
a1408 1
At the end of the regex execution, C<$cnt> will be wound back to its initial
d1465 1
a1465 1
I<will> match, it will I<not> set C<$1> on exit.
d1504 1
a1504 1
recursive patterns have access to their caller's match state, so one can
d1518 1
a1518 1
The following pattern matches a function C<foo()> which may contain
d1568 1
a1568 1
like C<(?i:(?1))> or C<(?:(?i)(?1))> do not affect how the sub-pattern will
d1594 6
a1599 19
C<(condition)> should be one of:

=over 4

=item an integer in parentheses

(which is valid if the corresponding pair of parentheses
matched);

=item a lookahead/lookbehind/evaluate zero-width assertion;

=item a name in angle brackets or single quotes

(which is valid if a group with the given name matched);

=item the special symbol C<(R)>

(true when evaluated inside of recursion or eval).  Additionally the
C<R> may be
a1603 2
=back

d1608 1
a1608 1
=item C<(1)> C<(2)> ...
d1612 1
a1612 1
=item C<(E<lt>I<NAME>E<gt>)> C<('I<NAME>')>
d1616 1
a1616 1
=item C<(?=...)> C<(?!...)> C<(?<=...)> C<(?<!...)>
d1618 1
a1618 1
Checks whether the pattern matches (or does not match, for the C<"!">
d1621 1
a1621 1
=item C<(?{ I<CODE> })>
d1625 1
a1625 1
=item C<(R)>
d1629 1
a1629 1
=item C<(R1)> C<(R2)> ...
d1638 1
a1638 1
=item C<(R&I<NAME>)>
d1642 1
a1642 1
logic used by C<(?&I<NAME>)> to disambiguate). It does not check the full
d1645 1
a1645 1
=item C<(DEFINE)>
d1774 1
a1774 1
effect may be achieved by negative lookahead, as in C<[^()]+ (?! [^()] )>.
d1780 1
a1780 1
by C<"#"> followed by some optional (horizontal) whitespace.  Contrary to
d1789 1
a1789 1
For example, to grab non-empty comments into C<$1>, one should use either
d1819 3
a1821 3
These special patterns are generally of the form C<(*I<VERB>:I<ARG>)>. Unless
otherwise stated the I<ARG> argument is optional; in some cases, it is
mandatory.
d1828 1
a1828 1
On failure, the C<$REGERROR> variable will be set to the I<ARG> value of the
d1830 1
a1830 1
I<ARG> part of the pattern was omitted, then C<$REGERROR> will be set to the
d1849 1
a1849 1
=item Verbs
d1857 4
a1860 4
when backtracked into on failure. Consider the pattern C<I<A> (*PRUNE) I<B>>,
where I<A> and I<B> are complex patterns. Until the C<(*PRUNE)> verb is reached,
I<A> may backtrack as necessary to match. Once it is reached, matching
continues in I<B>, which may also backtrack as necessary; however, should B
d1919 1
a1919 1
executing the C<(*SKIP)> pattern.
d1944 1
a1944 1
C<(*MARK)> patterns are allowed, and the I<NAME> portion may be duplicated.
d1980 1
a1980 1
alternation operator (C<"|">) can be used to create what is essentially a
d2002 6
a2007 2
as after matching the I<A> but failing on the I<B> the C<(*THEN)> verb will
backtrack and try I<C>; but the C<(*PRUNE)> verb will simply fail.
d2009 3
a2011 1
=item C<(*COMMIT)> C<(*COMMIT:args)>
d2032 1
a2032 1
=item C<(*FAIL)> C<(*F)> C<(*FAIL:arg)>
d2037 1
a2037 3
fact, C<(?!)> gets optimised into C<(*FAIL)> internally. You can provide
an argument so that if the match fails because of this C<FAIL> directive
the argument can be obtained from C<$REGERROR>.
d2041 1
a2041 1
=item C<(*ACCEPT)> C<(*ACCEPT:arg)>
a2059 3
You can provide an argument, which will be available in the var
C<$REGMARK> after the match completes.

d2074 2
a2075 2
by all regular non-possessive expression quantifiers, namely C<"*">, C<"*?">, C<"+">,
C<"+?">, C<{n,m}>, and C<{n,m}?>.  Backtracking is often optimized
d2094 2
a2095 2
C<$1> with "Foo".  However, as soon as the matching engine sees that there's
no whitespace following the "Foo" that it had saved in C<$1>, it realizes its
d2178 1
a2178 1
When using lookahead assertions and negations, this can all get even
d2210 1
a2210 1
that you've asked "Is it true that at the start of C<$x>, following 0 or more
d2227 2
a2228 2
We'll say that the first part in C<$1> must be followed both by a digit
and by something that's not "123".  Remember that the lookaheads
d2255 1
a2255 1
And if you used C<"*">'s in the internal groups instead of limiting them
d2258 1
a2258 1
always applicable.  For example, if you put C<{0,5}> instead of C<"*">
d2265 1
a2265 1
zero-length lookahead/lookbehind assertions will not backtrack to make
d2268 1
a2268 1
where side-effects of lookahead I<might> have influenced the
d2280 2
a2281 2
literally by prefixing them with a C<"\"> (e.g., C<"\."> matches a C<".">, not any
character; "\\" matches a C<"\">). This escape mechanism is also required
d2290 2
a2291 2
first character after the C<"["> is C<"^">, the class matches any character not
in the list.  Within a list, the C<"-"> character specifies a
d2293 4
a2296 4
inclusive.  If you want either C<"-"> or C<"]"> itself to be a member of a
class, put it at the start of the list (possibly after a C<"^">), or
escape it with a backslash.  C<"-"> is also taken literally when it is
at the end of the list, just before the closing C<"]">.  (The
d2302 1
a2302 1
a range, the C<"-"> is understood literally.
d2305 5
a2309 19
character sets, except for four situations that Perl handles specially.
Any subset of the ranges C<[A-Z]>, C<[a-z]>, and C<[0-9]> are guaranteed
to match the expected subset of ASCII characters, no matter what
character set the platform is running.  The fourth portable way to
specify ranges is to use the C<\N{...}> syntax to specify either end
point of the range.  For example, C<[\N{U+04}-\N{U+07}]> means to match
the Unicode code points C<\N{U+04}>, C<\N{U+05}>, C<\N{U+06}>, and
C<\N{U+07}>, whatever their native values may be on the platform.  Under
L<use re 'strict'|re/'strict' mode> or within a L</C<(?[ ])>>, a warning
is raised, if enabled, and the other end point of a range which has a
C<\N{...}> endpoint is not portably specified.  For example,

 [\N{U+00}-\x06]    # Warning under "use re 'strict'".

It is hard to understand without digging what exactly matches ranges
other than subsets of C<[A-Z]>, C<[a-z]>, and C<[0-9]>.  A sound
principle is to use only ranges that begin from and end at either
alphabetics of equal case ([a-e], [A-E]), or digits ([0-9]).  Anything
else is unsafe or unclear.  If in doubt, spell out the range in full.
d2317 1
a2317 1
matches the character control-I<x>.  Finally, the C<"."> metacharacter
d2320 1
a2320 1
You can specify a series of alternatives for a pattern using C<"|"> to
d2324 2
a2325 2
(C<"(">, "(?:", etc. or the beginning of the pattern) up to the first C<"|">, and
the last alternative contains everything from the last C<"|"> to the next
d2338 1
a2338 1
Also remember that C<"|"> is interpreted as a literal within square brackets,
d2352 1
a2352 1
=head2 Warning on C<\1> Instead of C<$1>
d2393 1
a2393 1
because of the C<"*"> quantifier.  Another common way to create a similar cycle
d2402 1
a2402 1
or the loop implied by C<split()>.
d2414 1
a2414 1
ones like the C</g> modifier or C<split()> operator.
d2449 1
a2449 1
the C<"*">.
d2472 1
a2472 1
the matched string, and is reset by each assignment to C<pos()>.
d2623 1
a2623 1
(but only if the special meaning of C<\Y|> should be enabled inside C<$re>):
d2689 2
@


