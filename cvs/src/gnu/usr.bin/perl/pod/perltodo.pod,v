head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_0:1.1.1.13.0.10
	OPENBSD_6_0_BASE:1.1.1.13
	OPENBSD_5_9:1.1.1.13.0.4
	OPENBSD_5_9_BASE:1.1.1.13
	OPENBSD_5_8:1.1.1.13.0.6
	OPENBSD_5_8_BASE:1.1.1.13
	PERL_5_20_2:1.1.1.13
	OPENBSD_5_7:1.1.1.13.0.2
	OPENBSD_5_7_BASE:1.1.1.13
	PERL_5_20_1:1.1.1.13
	OPENBSD_5_6:1.1.1.12.0.8
	OPENBSD_5_6_BASE:1.1.1.12
	PERL_5_18_2:1.1.1.12
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.12.0.6
	OPENBSD_5_5_BASE:1.1.1.12
	OPENBSD_5_4:1.1.1.12.0.2
	OPENBSD_5_4_BASE:1.1.1.12
	PERL_5_16_3:1.1.1.12
	OPENBSD_5_3:1.1.1.11.0.10
	OPENBSD_5_3_BASE:1.1.1.11
	OPENBSD_5_2:1.1.1.11.0.8
	OPENBSD_5_2_BASE:1.1.1.11
	OPENBSD_5_1_BASE:1.1.1.11
	OPENBSD_5_1:1.1.1.11.0.6
	OPENBSD_5_0:1.1.1.11.0.4
	OPENBSD_5_0_BASE:1.1.1.11
	OPENBSD_4_9:1.1.1.11.0.2
	OPENBSD_4_9_BASE:1.1.1.11
	PERL_5_12_2:1.1.1.11
	OPENBSD_4_8:1.1.1.10.0.4
	OPENBSD_4_8_BASE:1.1.1.10
	OPENBSD_4_7:1.1.1.10.0.2
	OPENBSD_4_7_BASE:1.1.1.10
	PERL_5_10_1:1.1.1.10
	OPENBSD_4_6:1.1.1.9.0.6
	OPENBSD_4_6_BASE:1.1.1.9
	OPENBSD_4_5:1.1.1.9.0.2
	OPENBSD_4_5_BASE:1.1.1.9
	PERL_5_10_0:1.1.1.9
	OPENBSD_4_4:1.1.1.8.0.10
	OPENBSD_4_4_BASE:1.1.1.8
	OPENBSD_4_3:1.1.1.8.0.8
	OPENBSD_4_3_BASE:1.1.1.8
	OPENBSD_4_2:1.1.1.8.0.6
	OPENBSD_4_2_BASE:1.1.1.8
	OPENBSD_4_1:1.1.1.8.0.4
	OPENBSD_4_1_BASE:1.1.1.8
	OPENBSD_4_0:1.1.1.8.0.2
	OPENBSD_4_0_BASE:1.1.1.8
	PERL_5_8_8:1.1.1.8
	OPENBSD_3_9:1.1.1.7.0.6
	OPENBSD_3_9_BASE:1.1.1.7
	OPENBSD_3_8:1.1.1.7.0.4
	OPENBSD_3_8_BASE:1.1.1.7
	OPENBSD_3_7:1.1.1.7.0.2
	OPENBSD_3_7_BASE:1.1.1.7
	PERL_5_8_6:1.1.1.7
	OPENBSD_3_6:1.1.1.6.0.2
	OPENBSD_3_6_BASE:1.1.1.6
	PERL_5_8_5:1.1.1.6
	PERL_5_8_3:1.1.1.5
	OPENBSD_3_5:1.1.1.4.0.2
	OPENBSD_3_5_BASE:1.1.1.4
	PERL_5_8_2:1.1.1.4
	OPENBSD_3_4:1.1.1.3.0.4
	OPENBSD_3_4_BASE:1.1.1.3
	OPENBSD_3_3:1.1.1.3.0.2
	OPENBSD_3_3_BASE:1.1.1.3
	PERL_5_8_0:1.1.1.3
	OPENBSD_3_2:1.1.1.2.0.6
	OPENBSD_3_2_BASE:1.1.1.2
	OPENBSD_3_1:1.1.1.2.0.4
	OPENBSD_3_1_BASE:1.1.1.2
	OPENBSD_3_0:1.1.1.2.0.2
	OPENBSD_3_0_BASE:1.1.1.2
	PERL_5_6_1:1.1.1.2
	OPENBSD_2_9:1.1.1.1.0.6
	OPENBSD_2_9_BASE:1.1.1.1
	OPENBSD_2_8:1.1.1.1.0.4
	OPENBSD_2_8_BASE:1.1.1.1
	OPENBSD_2_7:1.1.1.1.0.2
	OPENBSD_2_7_BASE:1.1.1.1
	PERL_5_6_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2000.04.06.16.10.32;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.04.06.16.10.32;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.05.24.18.24.52;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.10.27.22.15.08;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2003.12.03.02.44.28;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2004.04.07.21.13.40;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2004.08.09.17.48.29;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2005.01.15.21.18.10;	author millert;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2006.03.28.18.49.36;	author millert;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2008.09.29.17.18.56;	author millert;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	2009.10.12.18.10.40;	author millert;	state Exp;
branches;
next	1.1.1.11;

1.1.1.11
date	2010.09.24.14.49.09;	author millert;	state Exp;
branches;
next	1.1.1.12;

1.1.1.12
date	2013.03.25.20.09.26;	author sthen;	state Exp;
branches;
next	1.1.1.13;

1.1.1.13
date	2014.11.17.20.53.15;	author afresh1;	state Exp;
branches;
next	;
commitid	B31cAbBIXiCqnL97;


desc
@@


1.1
log
@Initial revision
@
text
@=head1 NAME

perltodo - Perl TO-DO List

=head1 DESCRIPTION

This is a list of wishes for Perl.  It is maintained by Nathan
Torkington for the Perl porters.  Send updates to
I<perl5-porters@@perl.org>.  If you want to work on any of these
projects, be sure to check the perl5-porters archives for past ideas,
flames, and propaganda.  This will save you time and also prevent you
from implementing something that Larry has already vetoed.  One set
of archives may be found at:

    http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/


=head1 Infrastructure

=head2 Mailing list archives

Chaim suggests contacting egroup and asking them to archive the other
perl.org mailing lists.  Probably not advocacy, but definitely
perl6-porters, etc.

=head2 Bug tracking system

Richard Foley I<richard@@perl.org> is writing one.  We looked at
several, like gnats and the Debian system, but at the time we
investigated them, none met our needs.  Since then, Jitterbug has
matured, and may be worth reinvestigation.

The system we've developed is the recipient of perlbug mail, and any
followups it generates from perl5-porters.  New bugs are entered
into a mysql database, and sent on to
perl5-porters with the subject line rewritten to include a "ticket
number" (unique ID for the new bug).  If the incoming message already
had a ticket number in the subject line, then the message is logged
against that bug.  There is a separate email interface (not forwarding
to p5p) that permits porters to claim, categorize, and close tickets.

There is also a web interface to the system at http://bugs.perl.org.

The current delay in implementation is caused by perl.org lockups.
One suspect is the mail handling system, possibly going into loops.

We still desperately need a bugmaster, someone who will look at
every new "bug" and kill those that we already know about, those
that are not bugs at all, etc.

=head2 Regression Tests

The test suite for Perl serves two needs: ensuring features work, and
ensuring old bugs have not been reintroduced.  Both need work.

Brent LaVelle (lavelle@@metronet.com) has stepped forward to work on
performance tests and improving the size of the test suite.

=over 4

=item Coverage

Do the tests that come with Perl exercise every line (or every block,
or ...)  of the Perl interpreter, and if not then how can we make them
do so?

=item Regression

No bug fixes should be made without a corresponding testsuite addition.
This needs a dedicated enforcer, as the current pumpking is either too
lazy or too stupid or both and lets enforcement wander all over the
map.  :-)

=item __DIE__

Tests that fail need to be of a form that can be readily mailed
to perlbug and diagnosed with minimal back-and-forth's to determine
which test failed, due to what cause, etc.

=item suidperl

We need regression/sanity tests for suidperl

=item The 25% slowdown from perl4 to perl5

This value may or may not be accurate, but it certainly is
eye-catching.  For some things perl5 is faster than perl4, but often
the reliability and extensability have come at a cost of speed.  The
benchmark suite that Gisle released earlier has been hailed as both a
fantastic solution and as a source of entirely meaningless figures.
Do we need to test "real applications"?  Can you do so?  Anyone have
machines to dedicate to the task?  Identify the things that have grown
slower, and see if there's a way to make them faster.

=back

=head1 Configure

Andy Dougherty maintain(ed|s) a list of "todo" items for the configure
that comes with Perl.  See Porting/pumpkin.pod in the latest
source release.

=head2 Install HTML

Have "make install" give you the option to install HTML as well.  This
would be part of Configure.  Andy Wardley (certified Perl studmuffin)
will look into the current problems of HTML installation--is
'installhtml' preventing this from happening cleanly, or is pod2html
the problem?  If the latter, Brad Appleton's pod work may fix the
problem for free.

=head1 Perl Language

=head2 our ($var)

Declare global variables (lexically or otherwise).

=head2 64-bit Perl

Verify complete 64 bit support so that the value of sysseek, or C<-s>, or
stat(), or tell can fit into a perl number without losing precision.
Work with the perl-64bit mailing list on perl.org.

=head2 Prototypes

=over 4

=item Named prototypes

Add proper named prototypes that actually work usefully.

=item Indirect objects

Fix prototype bug that forgets indirect objects.

=item Method calls

Prototypes for method calls.

=item Context

Return context prototype declarations.

=item Scoped subs

lexically-scoped subs, e.g. my sub

=back

=head1 Perl Internals

=head2 magic_setisa

C<magic_setisa> should be made to update %FIELDS [???]

=head2 Garbage Collection

There was talk of a mark-and-sweep garbage collector at TPC2, but the
(to users) unpredictable nature of its behaviour put some off.
Sarathy, I believe, did the work.  Here's what he has to say:

Yeah, I hope to implement it someday too.  The points that were
raised in TPC2 were all to do with calling DESTROY() methods, but
I think we can accomodate that by extending bless() to stash
extra information for objects so we track their lifetime accurately
for those that want their DESTROY() to be predictable (this will be
a speed hit, naturally, and will therefore be optional, naturally. :)

[N.B. Don't even ask me about this now!  When I have the time to
write a cogent summary, I'll post it.]

=head2 Reliable signals

Sarathy and Dan Sugalski are working on this.  Chip posted a patch
earlier, but it was not accepted into 5.005.  The issue is tricky,
because it has the potential to greatly slow down the core.

There are at least three things to consider:

=over 4

=item Alternate runops() for signal despatch

Sarathy and Dan are discussed this on perl5-porters.

=item Figure out how to die() in delayed sighandler

=item Add tests for Thread::Signal

=item Automatic tests against CPAN

Is there some way to automatically build all/most of CPAN with
the new Perl and check that the modules there pass all the tests?

=back

=head2 Interpolated regex performance bugs

  while (<>) {
    $found = 0;
    foreach $pat (@@patterns) {
      $found++ if /$pat/o;
    }
    print if $found;
  }

The qr// syntax added in 5.005 has solved this problem, but
it needs more thorough documentation.

=head2 Memory leaks from failed eval/regcomp

The only known memory leaks in Perl are in failed code or regexp
compilation.  Fix this.  Hugo Van Der Sanden will attempt this but
won't have tuits until January 1999.

=head2 Make XS easier to use

There was interest in SWIG from porters, but nothing has happened
lately.

=head2 Make embedded Perl easier to use

This is probably difficult for the same reasons that "XS For Dummies"
will be difficult.

=head2 Namespace cleanup

    CPP-space:    restrict CPP symbols exported from headers
    header-space: move into CORE/perl/
    API-space:    begin list of things that constitute public api
    env-space:    Configure should use PERL_CONFIG instead of CONFIG etc.

=head2 MULTIPLICITY

Complete work on safe recursive interpreters C<Perl-E<gt>new()>.
Sarathy says that a reference implementation exists.

=head2 MacPerl

Chris Nandor and Matthias Neeracher are working on better integrating
MacPerl into the Perl distribution.

=head1 Documentation

There's a lot of documentation that comes with Perl.  The quantity of
documentation makes it difficult for users to know which section of
which manpage to read in order to solve their problem.  Tom
Christiansen has done much of the documentation work in the past.

=head2 A clear division into tutorial and reference

Some manpages (e.g., perltoot and perlreftut) clearly set out to
educate the reader about a subject.  Other manpages (e.g., perlsub)
are references for which there is no tutorial, or are references with
a slight tutorial bent.  If things are either tutorial or reference,
then the reader knows which manpage to read to learn about a subject,
and which manpage to read to learn all about an aspect of that
subject.  Part of the solution to this is:

=head2 Remove the artificial distinction between operators and functions

History shows us that users, and often porters, aren't clear on the
operator-function distinction.  The present split in reference
material between perlfunc and perlop hinders user navigation.  Given
that perlfunc is by far the larger of the two, move operator reference
into perlfunc.

=head2 More tutorials

More documents of a tutorial nature could help.  Here are some
candidates:

=over 4

=item Regular expressions

Robin Berjon (r.berjon@@ltconsulting.net) has volunteered.

=item I/O

Mark-Jason Dominus (mjd@@plover.com) has an outline for perliotut.

=item pack/unpack

This is badly needed.  There has been some discussion on the
subject on perl5-porters.

=item Debugging

Ronald Kimball (rjk@@linguist.dartmouth.edu) has volunteered.

=back

=head2 Include a search tool

perldoc should be able to 'grep' fulltext indices of installed POD
files.  This would let people say:

  perldoc -find printing numbers with commas

and get back the perlfaq entry on 'commify'.

This solution, however, requires documentation to contain the keywords
the user is searching for.  Even when the users know what they're
looking for, often they can't spell it.

=head2 Include a locate tool

perldoc should be able to help people find the manpages on a
particular high-level subject:

  perldoc -find web

would tell them manpages, web pages, and books with material on web
programming.  Similarly C<perldoc -find databases>, C<perldoc -find
references> and so on.

We need something in the vicinity of:

  % perl -help random stuff
  No documentation for perl function `random stuff' found
  The following entry in perlfunc.pod matches /random/a:
    =item rand EXPR

    =item rand

    Returns a random fractional number greater than or equal to C<0> and less
    than the value of EXPR.  (EXPR should be positive.)  If EXPR is
    omitted, the value C<1> is used.  Automatically calls C<srand()> unless
    C<srand()> has already been called.  See also C<srand()>.

    (Note: If your rand function consistently returns numbers that are too
    large or too small, then your version of Perl was probably compiled
    with the wrong number of RANDBITS.)
  The following pod pages seem to have /stuff/a:
    perlfunc.pod	(7 hits)
    perlfaq7.pod	(6 hits)
    perlmod.pod		(4 hits)
    perlsyn.pod		(3 hits)
    perlfaq8.pod	(2 hits)
    perlipc.pod		(2 hits)
    perl5004delta.pod	(1 hit)
    perl5005delta.pod	(1 hit)
    perlcall.pod	(1 hit)
    perldelta.pod	(1 hit)
    perlfaq3.pod	(1 hit)
    perlfaq5.pod	(1 hit)
    perlhist.pod	(1 hit)
    perlref.pod		(1 hit)
    perltoc.pod		(1 hit)
    perltrap.pod	(1 hit)
  Proceed to open perlfunc.pod? [y] n
  Do you want to speak perl interactively? [y] n
  Should I dial 911? [y] n
  Do you need psychiatric help? [y] y
  <PELIZA> Hi, what bothers you today?
           A Python programmer in the next cubby is driving me nuts!
  <PELIZA> Hmm, thats fixable.  Just [rest censored]

=head2 Separate function manpages by default

Perl should install 'manpages' for every function/operator into the
3pl or 3p manual section.  By default.  The splitman program in the
Perl source distribution does the work of turning big perlfunc into
little 3p pages.

=head2 Users can't find the manpages

Make C<perldoc> tell users what they need to add to their .login or
.cshrc to set their MANPATH correctly.

=head2 Install ALL Documentation

Make the standard documentation kit include the VMS, OS/2, Win32,
Threads, etc information.  installperl and pod/Makefile should know
enough to copy README.foo to perlfoo.pod before building everything,
when appropriate.

=head2 Outstanding issues to be documented

Tom has a list of 5.005_5* features or changes that require
documentation.

Create one document that coherently explains the delta between the
last camel release and the current release.  perldelta was supposed
to be that, but no longer.  The things in perldelta never seemed to
get placed in the right places in the real manpages, either.  This
needs work.

=head2 Adapt www.linuxhq.com for Perl

This should help glorify documentation and get more people involved in
perl development.

=head2 Replace man with a perl program

Can we reimplement man in Perl?  Tom has a start.  I believe some of
the Linux systems distribute a manalike.  Alternatively, build on
perldoc to remove the unfeatures like "is slow" and "has no apropos".

=head2 Unicode tutorial

We could use more work on helping people understand Perl's new
Unicode support that Larry has created.

=head1 Modules

=head2 Update the POSIX extension to conform with the POSIX 1003.1 Edition 2

The current state of the POSIX extension is as of Edition 1, 1991,
whereas the Edition 2 came out in 1996.  ISO/IEC 9945:1-1996(E),
ANSI/IEEE Std 1003.1, 1996 Edition. ISBN 1-55937-573-6.  The updates
were legion: threads, IPC, and real time extensions.

=head2 Module versions

Automate the checking of versions in the standard distribution so
it's easy for a pumpking to check whether CPAN has a newer version
that we should be including?

=head2 New modules

Which modules should be added to the standard distribution?  This ties
in with the SDK discussed on the perl-sdk list at perl.org.

=head2 Profiler

Make the profiler (Devel::DProf) part of the standard release, and
document it well.

=head2 Tie Modules

=over 4

=item VecArray

Implement array using vec().  Nathan Torkington has working code to
do this.

=item SubstrArray

Implement array using substr()

=item VirtualArray

Implement array using a file

=item ShiftSplice

Defines shift et al in terms of splice method

=back

=head2 Procedural options

Support procedural interfaces for the common cases of Perl's
gratuitously OOO modules.  Tom objects to "use IO::File" reading many
thousands of lines of code.

=head2 RPC

Write a module for transparent, portable remote procedure calls.  (Not
core).  This touches on the CORBA and ILU work.

=head2 y2k localtime/gmtime

Write a module, Y2k::Catch, which overloads localtime and gmtime's
returned year value and catches "bad" attempts to use it.

=head2 Export File::Find variables

Make File::Find export C<$name> etc manually, at least if asked to.

=head2 Ioctl

Finish a proper Ioctl module.

=head2 Debugger attach/detach

Permit a user to debug an already-running program.

=head2 Regular Expression debugger

Create a visual profiler/debugger tool that stepped you through the
execution of a regular expression point by point.  Ilya has a module
to color-code and display regular expression parses and executions.
There's something at http://tkworld.org/ that might be a good start,
it's a Tk/Tcl RE wizard, that builds regexen of many flavours.

=head2 Alternative RE Syntax

Make an alternative regular expression syntax that is accessed through
a module.  For instance,

  use RE;
  $re = start_of_line()
      ->literal("1998/10/08")
      ->optional( whitespace() )
      ->literal("[")
      ->remember( many( or( "-", digit() ) ) );

  if (/$re/) {
    print "time is $1\n";
  }

Newbies to regular expressions typically only use a subset of the full
language.  Perhaps you wouldn't have to implement the full feature set.

=head2 Bundled modules

Nicholas Clark (nick@@flirble.org) had a patch for storing modules in
zipped format.  This needs exploring and concluding.

=head2 Expect

Adopt IO::Tty, make it as portable as Don Libes' "expect" (can we link
against expect code?), and perfect a Perl version of expect.  IO::Tty
and expect could then be distributed as part of the core distribution,
replacing Comm.pl and other hacks.

=head2 GUI::Native

A simple-to-use interface to native graphical abilities would
be welcomed.  Oh, Perl's access Tk is nice enough, and reasonably
portable, but it's not particularly as fast as one would like.
Simple access to the mouse's cut buffer or mouse-presses shouldn't
required loading a few terabytes of Tk code.

=head2 Update semibroken auxiliary tools; h2ph, a2p, etc.

Kurt Starsinic is working on h2ph.  mjd has fixed bugs in a2p in the
past.  a2p apparently doesn't work on nawk and gawk extensions.
Graham Barr has an Include module that does h2ph work at runtime.

=head2 POD Converters

Brad's PodParser code needs to become part of the core, and the Pod::*
and pod2* programs rewritten to use this standard parser.  Currently
the converters take different options, some behave in different
fashions, and some are more picky than others in terms of the POD
files they accept.

=head2 pod2html

A short-term fix: pod2html generates absolute HTML links.  Make it
generate relative links.

=head2 Podchecker

Something like lint for Pod would be good.  Something that catches
common errors as well as gross ones.  Brad Appleton is putting
together something as part of his PodParser work.

=head1 Tom's Wishes

=head2 Webperl

Design a webperl environment that's as tightly integrated and as
easy-to-use as Perl's current command-line environment.

=head2 Mobile agents

More work on a safe and secure execution environment for mobile
agents would be neat; the Safe.pm module is a start, but there's a
still a lot to be done in that area.  Adopt Penguin?

=head2 POSIX on non-POSIX

Standard programming constructs for non-POSIX systems would help a
lot of programmers stuck on primitive, legacy systems.  For example,
Microsoft still hasn't made a usable POSIX interface on their clunky
systems, which means that standard operations such as alarm() and
fork(), both critical for sophisticated client-server programming,
must both be kludged around.

I'm unsure whether Tom means to emulate alarm( )and fork(), or merely
to provide a document like perlport.pod to say which features are
portable and which are not.

=head2 Portable installations

Figure out a portable semi-gelled installation, that is, one without
full paths.  Larry has said that he's thinking about this.  Ilya
pointed out that perllib_mangle() is good for this.

=head1 Win32 Stuff

=head2 Rename new headers to be consistent with the rest

=head2 Sort out the spawnvp() mess

=head2 Work out DLL versioning

=head2 Style-check

=head1 Would be nice to have

=over 4

=item C<pack "(stuff)*">

=item Contiguous bitfields in pack/unpack

=item lexperl

=item Bundled perl preprocessor

=item Use posix calls internally where possible

=item format BOTTOM

=item -i rename file only when successfully changed

=item All ARGV input should act like <>

=item report HANDLE [formats].

=item support in perlmain to rerun debugger

=item lvalue functions

Tuomas Lukka, on behalf of the PDL project, greatly desires this and
Ilya has a patch for it (probably against an older version of Perl).
Tuomas points out that what PDL really wants is lvalue I<methods>,
not just subs.

=back

=head1 Possible pragmas

=head2 'less'

(use less memory, CPU)

=head1 Optimizations

=head2 constant function cache

=head2 foreach(reverse...)

=head2 Cache eval tree

Unless lexical outer scope used (mark in &compiling?).

=head2 rcatmaybe

=head2 Shrink opcode tables

Via multiple implementations selected in peep.

=head2 Cache hash value

Not a win, according to Guido.

=head2 Optimize away @@_ where possible

=head2 Optimize sort by { $a <=> $b }

Greg Bacon added several more sort optimizations.  These have
made it into 5.005_55, thanks to Hans Mulder.

=head2 Rewrite regexp parser for better integrated optimization

The regexp parser was rewritten for 5.005.  Ilya's the regexp guru.

=head1 Vague possibilities

=over 4

=item ref function in list context

This seems impossible to do without substantially breaking code.

=item make tr/// return histogram in list context?

=item Loop control on do{} et al

=item Explicit switch statements

Nobody has yet managed to come up with a switch syntax that would
allow for mixed hash, constant, regexp checks.  Submit implementation
with syntax, please.

=item compile to real threaded code

=item structured types

=item Modifiable $1 et al

The intent is for this to be a means of editing the matched portions of
the target string.

=back

=head1 To Do Or Not To Do

These are things that have been discussed in the past and roundly
criticized for being of questionable value.

=head2 Making my() work on "package" variables

Being able to say my($Foo::Bar), something that sounds ludicrous and
the 5.6 pumpking has mocked.

=head2 "or" testing defined not truth

We tell people that C<||> can be used to give a default value to a
variable:

    $children = shift || 5;		# default is 5 children

which is almost (but not):

    $children = shift;
    $children = 5 unless $children;

but if the first argument was given and is "0", then it will be
considered false by C<||> and C<5> used instead.  Really we want
an C<||>-like operator that behaves like:

    $children = shift;
    $children = 5 unless defined $children;

Namely, a C<||> that tests defined-ness rather than truth.  One was
discussed, and a patch submitted, but the objections were many.  While
there were objections, many still feel the need.  At least it was
decided that C<??> is the best name for the operator.

=head2 "dynamic" lexicals

  my $x;
  sub foo {
    local $x;
  }

Localizing, as Tim Bunce points out, is a separate concept from
whether the variable is global or lexical.  Chip Salzenberg had
an implementation once, but Larry thought it had potential to
confuse.

=head2 "class"-based, rather than package-based "lexicals"

This is like what the Alias module provides, but the variables would
be lexicals reserved by perl at compile-time, which really are indices
pointing into the pseudo-hash object visible inside every method so
declared.

=head1 Threading

=head2 Modules

Which of the standard modules are thread-safe?  Which CPAN modules?
How easy is it to fix those non-safe modules?

=head2 Testing

Threading is still experimental.  Every reproducible bug identifies
something else for us to fix.  Find and submit more of these problems.

=head2 $AUTOLOAD

=head2 exit/die

Consistent semantics for exit/die in threads.

=head2 External threads

Better support for externally created threads.

=head2 Thread::Pool

=head2 thread-safety

Spot-check globals like statcache and global GVs for thread-safety.
"B<Part done>", says Sarathy.

=head2 Per-thread GVs

According to Sarathy, this would make @@_ be the same in threaded
and non-threaded, as well as helping solve problems like filehandles
(the same filehandle currently cannot be used in two threads).

=head1 Compiler

=head2 Optimization

The compiler's back-end code-generators for creating bytecode or
compilable C code could use optimization work.

=head2 Byteperl

Figure out how and where byteperl will be built for the various
platforms.

=head2 Precompiled modules

Save byte-compiled modules on disk.

=head2 Executables

Auto-produce executable.

=head2 Typed lexicals

Typed lexicals should affect B::CC::load_pad.

=head2 Win32

Workarounds to help Win32 dynamic loading.

=head2 END blocks

END blocks need saving in compiled output, now that CHECK blocks
are available.

=head2 _AUTOLOAD

_AUTOLOAD prodding.

=head2 comppadlist

Fix comppadlist (names in comppad_name can have fake SvCUR
from where newASSIGNOP steals the field).

=head2 Cached compilation

Can we install modules as bytecode?

=head1 Recently Finished Tasks

=head2 Figure a way out of $^(capital letter)

Figure out a clean way to extend $^(capital letter) beyond
the 26 alphabets.  (${^WORD} maybe?)

Mark-Jason Dominus sent a patch which went into 5.005_56.

=head2 Filenames

Keep filenames in the distribution and in the standard module set
be 8.3 friendly where feasible.  Good luck changing the standard
modules, though.

=head2 Foreign lines

Perl should be more generous in accepting foreign line terminations.
Mostly B<done> in 5.005.

=head2 Namespace cleanup

    symbol-space: "pl_" prefix for all global vars
                  "Perl_" prefix for all functions

    CPP-space:	  stop malloc()/free() pollution unless asked

=head2 ISA.pm

Rename and alter ISA.pm.  B<Done>.  It is now base.pm.

=head2 gettimeofday

See Time::HiRes.

=head2 autocroak?

This is the Fatal.pm module, so any builtin that that does
not return success automatically die()s.  If you're feeling brave, tie
this in with the unified exceptions scheme.

=cut
@


1.1.1.1
log
@virgin perl 5.6.0
@
text
@@


1.1.1.2
log
@stock perl 5.6.1
@
text
@d88 1
a88 1
the reliability and extensibility have come at a cost of speed.  The
d114 4
d164 1
a164 1
I think we can accommodate that by extending bless() to stash
d535 8
d866 1
a866 1
This is the Fatal.pm module, so any builtin that does
@


1.1.1.3
log
@stock perl 5.8.0 from CPAN
@
text
@d7 2
a8 1
This is a list of wishes for Perl.  Send updates to
a16 1
=head1 To do during 5.6.x
d18 1
a18 1
=head2 Support for I/O disciplines
d20 1
a20 19
C<perlio> provides this, but the interface could be a lot more
straightforward.

=head2 Autoload bytes.pm

When the lexer sees, for instance, C<bytes::length>, it should
automatically load the C<bytes> pragma.

=head2 Make "\u{XXXX}" et al work

Danger, Will Robinson! Discussing the semantics of C<"\x{F00}">,
C<"\xF00"> and C<"\U{F00}"> on P5P I<will> lead to a long and boring
flamewar.

=head2 Create a char *sv_pvprintify(sv, STRLEN *lenp, UV flags)

For displaying PVs with control characters, embedded nulls, and Unicode.
This would be useful for printing warnings, or data and regex dumping,
not_a_number(), and so on.
d22 28
a49 4
Requirements: should handle both byte and UTF8 strings.  isPRINT()
characters printed as-is, character less than 256 as \xHH, Unicode
characters as \x{HHH}.  Don't assume ASCII-like, either, get somebody
on EBCDIC to test the output.
d51 1
a51 11
Possible options, controlled by the flags:
- whitespace (other than ' ' of isPRINT()) printed as-is
- use isPRINT_LC() instead of isPRINT()
- print control characters like this: "\cA"
- print control characters like this: "^A"
- non-PRINTables printed as '.' instead of \xHH
- use \OOO instead of \xHH
- use the C/Perl-metacharacters like \n, \t
- have a maximum length for the produced string (read it from *lenp)
- append a "..." to the produced string if the maximum length is exceeded
- really fancy: print unicode characters as \N{...}
d53 2
a54 2
NOTE: pv_display(), pv_uni_display(), sv_uni_display() are already
doing something like the above.
d56 2
a57 8
=head2 Overloadable regex assertions

This may or may not be possible with the current regular expression
engine. The idea is that, for instance, C<\b> needs to be
algorithmically computed if you're dealing with Thai text. Hence, the
B<\b> assertion wants to be overloaded by a function.

=head2 Unicode
d61 1
a61 7
=item *

Allow for long form of the General Category Properties, e.g
C<\p{IsOpenPunctuation}>, not just the abbreviated form, e.g.
C<\p{IsPs}>.

=item *
d63 3
a65 3
Allow for the metaproperties: C<XID Start>, C<XID Continue>,
C<NF*_NO>, C<NF*_MAYBE> (require the DerivedCoreProperties and
DerviceNormalizationProperties files).
d67 1
a67 2
There are also multiple value properties still unimplemented:
C<Numeric Type>, C<East Asian Width>.
d69 4
a72 1
=item *
d74 1
a74 1
    Case Mappings? http://www.unicode.org/unicode/reports/tr21/
d76 3
a78 2
Mostly implemented (all of 1:1, 1:N, N:1), only the "final sigma"
and locale-specific rules of SpecCase are not implemented.
d80 1
a80 1
=item *
d82 1
a82 1
UTF-8 identifier names should probably be canonicalized: NFC?
d84 1
a84 1
=item *
d86 8
a93 21
UTF-8 in package names and sub names?  The first is problematic
because of the mapping to pathnames, ditto for the second one if
one does autosplitting, for example.  Some of this works already
in 5.8.0, but essentially it is unsupported.  Constructs to consider,
at the very least:

	use utf8;
	package UnicodePackage;
	sub new { bless {}, shift };
	sub UnicodeMethod1 { ... $_[0]->UnicodeMethod2(...) ... }
	sub UnicodeMethod2 { ... } # in here caller(0) should contain Unicode
	...
	package main;
	my $x = UnicodePackage->new;
	print ref $x, "\n";  # should be Unicode
	$x->UnicodeMethod1(...);
	my $y = UnicodeMethod3 UnicodePackage ...;

In the above all I<UnicodeXxx> contain (identifier-worthy) characters
beyond the code point 255, for example 256.  Wherever package/class or
subroutine names can be returned needs to be checked for Unicodeness.
d97 1
a97 5
See L<perlunicode/UNICODE REGULAR EXPRESSION SUPPORT LEVEL> for what's
there and what's missing.  Almost all of Levels 2 and 3 is missing,
and as of 5.8.0 not even all of Level 1 is there.
They have some tricks Perl doesn't yet implement, such as character
class subtraction.
d99 3
a101 1
	http://www.unicode.org/unicode/reports/tr18/
d103 1
a103 1
=head2 Work out exit/die semantics for threads
d105 14
a118 3
There are some suggestions to use for example something like this:
default to "(thread exiting first will) wait for the other threads
until up to 60 seconds".  Other possibilities:
d120 1
a120 1
    use threads wait => 0;
d122 1
a122 1
Do not wait.
d124 1
a124 1
    use threads wait_for => 10;
d126 1
a126 1
Wait up to 10 seconds.
d128 1
a128 1
    use threads wait_for => -1;
d130 1
a130 1
Wait for ever.
d132 1
a132 1
http://archive.develooper.com/perl5-porters@@perl.org/msg79618.html
d134 1
a134 1
=head2 Better support for nonpreemptive threading systems like GNU pth
d136 1
a136 5
To better support nonpreemptive threading systems, perhaps some of the
blocking functions internally in Perl should do a yield() before a
blocking call.  (Now certain threads tests ({basic,list,thread.t})
simply do a yield() before they sleep() to give nonpreemptive thread
implementations a chance).
d138 1
a138 3
In some cases, like the GNU pth, which has replacement functions that
are nonblocking (pth_select instead of select), maybe Perl should be
using them instead when built for threading.
d140 1
a140 1
=head2 Typed lexicals for compiler
d142 1
a142 1
=head2 Compiler workarounds for Win32
d144 1
a144 1
=head2 AUTOLOADing in the compiler
d146 1
a146 1
=head2 Fixing comppadlist when compiling
d148 1
a148 1
=head2 Cleaning up exported namespace
d150 1
a150 1
=head2 Complete signal handling
d152 1
a152 2
Add C<PERL_ASYNC_CHECK> to opcodes which loop; replace C<sigsetjmp> with
C<sigjmp>; check C<wait> for signal safety.
d154 3
a156 1
=head2 Out-of-source builds
d158 6
a163 1
This was done for 5.6.0, but needs reworking for 5.7.x
d165 2
a166 1
=head2 POSIX realtime support
d168 1
a168 3
POSIX 1003.1 1996 Edition support--realtime stuff: POSIX semaphores,
message queues, shared memory, realtime clocks, timers, signals (the
metaconfig units mostly already exist for these)
d170 3
a172 1
=head2 UNIX98 support
d174 1
a174 1
Reader-writer locks, realtime/asynchronous IO
d176 1
a176 1
=head2 IPv6 Support
d178 1
a178 3
There are non-core modules, such as C<Socket6>, but these will need
integrating when IPv6 actually starts to really happen.  See RFC 2292
and RFC 2553.
d180 1
a180 1
=head2 Long double conversion
d182 1
a182 1
Floating point formatting is still causing some weird test failures.
d184 1
a184 1
=head2 Locales
d186 1
a186 2
Locales and Unicode interact with each other in unpleasant ways.
One possible solution would be to adopt/support ICU:
d188 2
a189 1
	http://oss.software.ibm.com/developerworks/opensource/icu/project/
d191 1
a191 1
=head2 Arithmetic on non-Arabic numerals
d193 1
a193 1
C<[1234567890]> aren't the only numerals any more.
d195 7
a201 1
=head2 POSIX Unicode character classes
d203 2
a204 2
(C<[=a=]> for equivalence classes, C<[.ch.]> for collation.)
These are dependent on Unicode normalization and collation.
d206 1
a206 1
=head2 Factoring out common suffices/prefices in regexps (trie optimization)
d208 3
a210 2
Currently, the user has to optimize C<foo|far> and C<foo|goo> into
C<f(?:oo|ar)> and C<[fg]oo> by hand; this could be done automatically.
d212 1
a212 1
=head2 Security audit shipped utilities
d214 2
a215 2
All the code we ship with Perl needs to be sensible about temporary file
handling, locking, input validation, and so on.
d217 1
a217 1
=head2 Sort out the uid-setting mess
d219 2
a220 13
Currently there are several problems with the setting of uids ($<, $>
for the real and effective uids).  Firstly, what exactly setuid() call
gets invoked in which platform is simply a big mess that needs to be
untangled.  Secondly, the effects are apparently not standard across
platforms, (if you first set $< and then $>, or vice versa, being
uid == euid == zero, or just euid == zero, or as a normal user, what are
the results?).  The test suite not (usually) being run as root means
that these things do not get much testing.  Thirdly, there's quite
often a third uid called saved uid, and Perl has no knowledge of that
feature in any way.  (If one has the saved uid of zero, one can get
back any real and effective uids.)  As an example, to change also the
saved uid, one needs to set the real and effective uids B<twice>-- in
most systems, that is: in HP-UX that doesn't seem to work.
d222 1
a222 1
=head2 Custom opcodes
d224 4
a227 3
Have a way to introduce user-defined opcodes without the subroutine call
overhead of an XSUB; the user should be able to create PP code. Simon
Cozens has some ideas on this.
d229 1
a229 1
=head2 DLL Versioning
d231 2
a232 2
Windows needs a way to know what version of an XS or C<libperl> DLL it's
loading.
d234 1
a234 1
=head2 Introduce @@( and @@)
d236 2
a237 3
C<$(> may return "foo bar baz". Unfortunately, since groups can
theoretically have spaces in their names, this could be one, two or
three groups.
d239 1
a239 1
=head2 Floating point handling
d241 4
a244 7
C<NaN> and C<inf> support is particularly troublesome.
(fp_classify(), fp_class(), fp_class_d(), class(), isinf(),
isfinite(), finite(), isnormal(), unordered(), <ieeefp.h>,
<fp_class.h> (there are metaconfig units for all these) (I think),
fp_setmask(), fp_getmask(), fp_setround(), fp_getround()
(no metaconfig units yet for these).  Don't forget finitel(), fp_classl(),
fp_class_l(), (yes, both do, unfortunately, exist), and unorderedl().)
d246 1
a246 1
As of Perl 5.6.1, there is a Perl macro, Perl_isnan().
d248 7
a254 1
=head2 IV/UV preservation
d256 1
a256 3
Nicholas Clark has done a lot of work on this, but work is continuing.
C<+>, C<-> and C<*> work, but guards need to be in place for C<%>, C</>,
C<&>, C<oct>, C<hex> and C<pack>.
d258 5
a262 1
=head2 Replace pod2html with something using Pod::Parser
d264 1
a264 4
The CPAN module C<Marek::Pod::Html> may be a more suitable basis for a
C<pod2html> converter; the current one duplicates the functionality
abstracted in C<Pod::Parser>, which makes updating the POD language
difficult.
d266 2
a267 1
=head2 Automate module testing on CPAN
d269 1
a269 3
When a new Perl is being beta tested, porters have to manually grab
their favourite CPAN modules and test them - this should be done
automatically.
d271 1
a271 1
=head2 sendmsg and recvmsg
d273 1
a273 4
We have all the other BSD socket functions but these. There are
metaconfig units for these functions which can be added. To avoid these
being new opcodes, a solution similar to the way C<sockatmark> was added
would be preferable. (Autoload the C<IO::whatever> module.)
d275 1
a275 1
=head2 Rewrite perlre documentation
d277 1
a277 2
The new-style patterns need full documentation, and the whole document
needs to be a lot clearer.
d279 1
a279 1
=head2 Convert example code to IO::Handle filehandles
d281 2
a282 1
=head2 Document Win32 choices
d284 1
a284 1
=head2 Check new modules
d286 1
a286 1
=head2 Make roffitall find pods and libs itself
d288 1
a288 1
Simon Cozens has done some work on this but it needs a rethink.
d290 1
a290 1
=head1 To do at some point
d292 2
a293 2
These are ideas that have been regularly tossed around, that most
people believe should be done maybe during 5.8.x
d295 1
a295 1
=head2 Remove regular expression recursion
d297 1
a297 5
Because the regular expression engine is recursive, badly designed
expressions can lead to lots of recursion filling up the stack. Ilya
claims that it is easy to convert the engine to being iterative, but
this has still not yet been done. There may be a regular expression
engine hit squad meeting at TPC5.
d299 97
a395 1
=head2 Memory leaks after failed eval
d397 1
a397 5
Perl will leak memory if you C<eval "hlagh hlagh hlagh hlagh">. This is
partially because it attempts to build up an op tree for that code and
doesn't properly free it. The same goes for non-syntactically-correct
regular expressions. Hugo looked into this, but decided it needed a
mark-and-sweep GC implementation. 
d399 2
a400 6
Alan notes that: The basic idea was to extend the parser token stack
(C<YYSTYPE>) to include a type field so we knew what sort of thing each
element of the stack was.  The F<perly.c> code would then have to be
postprocessed to record the type of each entry on the stack as it was
created, and the parser patched so that it could unroll the stack
properly on error.
d402 1
a402 2
This is possible to do, but would be pretty messy to implement, as it
would rely on even more sed hackery in F<perly.fixer>.
d404 1
a404 1
=head2 bitfields in pack
d406 4
a409 1
=head2 Cross compilation
d411 1
a411 8
Make Perl buildable with a cross-compiler. This will play havoc with
Configure, which needs to know how the target system will respond to
its tests; maybe C<microperl> will be a good starting point here.
(Indeed, Bart Schuller reports that he compiled up C<microperl> for
the Agenda PDA and it works fine.)  A really big spanner in the works
is the bootstrapping build process of Perl: if the filesystem the
target systems sees is not the same what the build host sees, various
input, output, and (Perl) library files need to be copied back and forth.
d413 3
a415 5
As of 5.8.0 Configure mostly works for cross-compilation
(used successfully for iPAQ Linux), miniperl gets built,
but then building DynaLoader (and other extensions) fails
since MakeMaker knows nothing of cross-compilation.
(See INSTALL/Cross-compilation for the state of things.)
d417 1
a417 1
=head2 Perl preprocessor / macros
d419 2
a420 3
Source filters help with this, but do not get us all the way. For
instance, it should be possible to implement the C<??> operator somehow;
source filters don't (quite) cut it.
d422 1
a422 1
=head2 Perl lexer in Perl
d424 2
a425 1
Damian Conway is planning to work on this, but it hasn't happened yet.
d427 1
a427 1
=head2 Using POSIX calls internally
d429 1
a429 5
When faced with a BSD vs. SysV -style interface to some library or
system function, perl's roots show in that it typically prefers the BSD
interface (but falls back to the SysV one).  One example is getpgrp().
Other examples include C<memcpy> vs. C<bcopy>.  There are others, mostly in
F<pp_sys.c>.
d431 1
a431 3
Mostly, this item is a suggestion for which way to start a journey into
an C<#ifdef> forest.  It is not primarily a suggestion to eliminate any of
the C<#ifdef> forests.
d433 2
a434 4
POSIX calls are perhaps more likely to be portable to unexpected
architectures. They are also perhaps more likely to be actively
maintained by a current vendor.  They are also perhaps more likely to be
available in thread-safe versions, if appropriate.
d436 1
a436 1
=head2 -i rename file when changed
d438 1
a438 2
It's only necessary to rename a file when inplace editing when the file
has changed. Detecting a change is perhaps the difficult bit.
d440 1
a440 1
=head2 All ARGV input should act like E<lt>E<gt>
d442 1
a442 1
eg C<read(ARGV, ...)> doesn't currently read across multiple files.
d444 1
a444 1
=head2 Support for rerunning debugger
d446 1
a446 1
There should be a way of restarting the debugger on demand.
d448 1
a448 5
=head2 Test Suite for the Debugger

The debugger is a complex piece of software and fixing something
here may inadvertently break something else over there.  To tame
this chaotic behaviour, a test suite is necessary. 
d450 1
a450 1
=head2 my sub foo { }
d452 3
a454 3
The basic principle is sound, but there are problems with the semantics
of self-referential and mutually referential lexical subs: how to
declare the subs?
d456 1
a456 1
=head2 One-pass global destruction
d458 2
a459 3
Sweeping away all the allocated memory in one go is a laudable goal, but
it's difficult and in most cases, it's easier to let the memory get
freed by exiting.
d461 1
a461 1
=head2 Rewrite regexp parser
d463 2
a464 3
There has been talk recently of rewriting the regular expression parser
to produce an optree instead of a chain of opcodes; it's unclear whether
or not this would be a win. 
d466 1
a466 1
=head2 Cache recently used regexps
d468 1
a468 1
This is to speed up 
d470 1
a470 36
    for my $re (@@regexps) {
        $matched++ if /$re/
    }

C<qr//> already gives us a way of saving compiled regexps, but it should
be done automatically.

=head2 Cross-compilation support

Bart Schuller reports that using C<microperl> and a cross-compiler, he
got Perl working on the Agenda PDA. However, one cannot build a full
Perl because Configure needs to get the results for the target platform,
for the host.

=head2 Bit-shifting bitvectors

Given:

    vec($v, 1000, 1) = 1;

One should be able to do

    $v <<= 1;

and have the 999'th bit set.

Currently if you try with shift bitvectors you shift the NV/UV, instead
of the bits in the PV.  Not very logical.

=head2 debugger pragma

The debugger is implemented in Perl in F<perl5db.pl>; turning it into a
pragma should be easy, but making it work lexically might be more
difficult. Fiddling with C<$^P> would be necessary.

=head2 use less pragma
d472 1
a472 2
Identify areas where speed/memory tradeoffs can be made and have a hint
to switch between them.
d474 1
a474 1
=head2 switch structures
d476 1
a476 3
Although we have C<Switch.pm> in core, Larry points to the dormant
C<nswitch> and C<cswitch> ops in F<pp.c>; using these opcodes would be
much faster.
d478 1
a478 9
=head2 Cache eval tree

=head2 rcatmaybe

=head2 Shrink opcode tables

=head2 Optimize away @@_

Look at the "reification" code in C<av.c>
d480 5
a484 1
=head2 Prototypes versus indirect objects
d486 1
a486 12
Currently, indirect object syntax bypasses prototype checks.

=head2 Install HTML

HTML versions of the documentation need to be installed by default; a
call to C<installhtml> from C<installperl> may be all that's necessary.

=head2 Prototype method calls

=head2 Return context prototype declarations

=head2 magic_setisa
d488 2
a489 1
=head2 Garbage collection
d491 6
a496 2
There have been persistent mumblings about putting a mark-and-sweep
garbage detector into Perl; Alan Burlison has some ideas about this.
d498 3
a500 1
=head2 IO tutorial
d502 2
a503 1
Mark-Jason Dominus has the beginnings of one of these.
d505 1
a505 1
=head2 Rewrite perldoc
d507 2
a508 3
There are a few suggestions for what to do with C<perldoc>: maybe a
full-text search, an index function, locating pages on a particular
high-level subject, and so on.
d510 1
a510 1
=head2 Install .3p manpages
d512 4
a515 100
This is a bone of contention; we can create C<.3p> manpages for each
built-in function, but should we install them by default? Tcl does this,
and it clutters up C<apropos>.

=head2 Unicode tutorial

Simon Cozens promises to do this before he gets old.

=head2 Update POSIX.pm for 1003.1-2

=head2 Retargetable installation

Allow C<@@INC> to be changed after Perl is built.

=head2 POSIX emulation on non-POSIX systems

Make C<POSIX.pm> behave as POSIXly as possible everywhere, meaning we
have to implement POSIX equivalents for some functions if necessary.

=head2 Rename Win32 headers

=head2 Finish off lvalue functions

They don't work in the debugger, and they don't work for list or hash
slices.

=head2 Update sprintf documentation

Hugo van der Sanden plans to look at this.

=head2 Use fchown/fchmod internally

This has been done in places, but needs a thorough code review.
Also fchdir is available in some platforms.

=head2 Make v-strings overloaded objects

Instead of having to guess whether a string is a v-string and thus
needs to be displayed with %vd, make v-strings (readonly) objects
(class "vstring"?) with a stringify overload.

=head2 Allow restricted hash assignment

Currently you're not allowed to assign to a restricted hash at all,
even with the same keys.

    %restricted = (foo => 42);  # error

This should be allowed if the new keyset is a subset of the old
keyset.  May require more extra code than we'd like in pp_aassign.

=head2 Should overload be inheritable?

Should overload be 'contagious' through @@ISA so that derived classes
would inherit their base classes' overload definitions?  What to do
in case of overload conflicts?

=head2 Taint rethink

Should taint be stopped from affecting control flow, if ($tainted)?
Should tainted symbolic method calls and subref calls be stopped?
(Look at Ruby's $SAFE levels for inspiration?)

=head1 Vague ideas

Ideas which have been discussed, and which may or may not happen.

=head2 ref() in list context

It's unclear what this should do or how to do it without breaking old
code.

=head2 Make tr/// return histogram of characters in list context

There is a patch for this, but it may require Unicodification.

=head2 Compile to real threaded code

=head2 Structured types

=head2 Modifiable $1 et al.

    ($x = "elephant") =~ /e(ph)/;
    $1 = "g"; # $x = "elegant"

What happens if there are multiple (nested?) brackets? What if the
string changes between the match and the assignment?

=head2 Procedural interfaces for IO::*, etc.

Some core modules have been accused of being overly-OO. Adding
procedural interfaces could demystify them.

=head2 RPC modules

=head2 Attach/detach debugger from running program

With C<gdb>, you can attach the debugger to a running program if you
pass the process ID. It would be good to do this with the Perl debugger
on a running Perl program, although I'm not sure how it would be done.
d519 5
a523 2
A non-core module that would use "native" GUI to create graphical
applications.
d525 1
a525 1
=head2 foreach(reverse ...)
d527 3
a529 1
Currently
d531 1
a531 1
    foreach (reverse @@_) { ... }
d533 2
a534 3
puts C<@@_> on the stack, reverses it putting the reversed version on the
stack, then iterates forwards. Instead, it could be special-cased to put
C<@@_> on the stack then iterate backwards.
d536 1
a536 1
=head2 Constant function cache
d538 3
a540 1
=head2 Approximate regular expression matching
d542 1
a542 1
=head1 Ongoing
d544 1
a544 1
These items B<always> need doing:
d546 2
a547 1
=head2 Update guts documentation
d549 1
a549 2
Simon Cozens tries to do this when possible, and contributions to the
C<perlapi> documentation is welcome.
d551 3
a553 1
=head2 Add more tests
d555 1
a555 2
Michael Schwern will donate $500 to Yet Another Society when all core
modules have tests.
d557 6
a562 1
=head2 Update auxiliary tools
d564 3
a566 1
The code we ship with Perl should look like good Perl 5.
d568 1
a568 1
=head2 Create debugging macros
d570 3
a572 3
Debugging macros (like printsv, dump) can make debugging perl inside a
C debugger much easier.  A good set for gdb comes with mod_perl.
Something similar should be distributed with perl.
d574 1
a574 2
The proper way to do this is to use and extend Devel::DebugInit.
Devel::DebugInit also needs to be extended to support threads.
d576 1
a576 2
See p5p archives for late May/early June 2001 for a recent discussion
on this topic.
d578 1
a578 1
=head2 truncate to the people
d580 1
a580 3
One can emulate ftruncate() using F_FREESP and F_CHSIZ fcntls
(see the UNIX FAQ for details).  This needs to go somewhere near
pp_sys.c:pp_truncate().
d582 1
a582 2
One can emulate truncate() easily if one has ftruncate().
This emulation should also go near pp_sys.pp_truncate().
d584 1
a584 1
=head2 Unicode in Filenames
d586 1
a586 7
chdir, chmod, chown, chroot, exec, glob, link, lstat, mkdir, open,
opendir, qx, readdir, readlink, rename, rmdir, stat, symlink, sysopen,
system, truncate, unlink, utime.  All these could potentially accept
Unicode filenames either as input or output (and in the case of system
and qx Unicode in general, as input or output to/from the shell).
Whether a filesystem - an operating system pair understands Unicode in
filenames varies.
d588 1
a588 8
Known combinations that have some level of understanding include
Microsoft NTFS, Apple HFS+ (In Mac OS 9 and X) and Apple UFS (in Mac
OS X), NFS v4 is rumored to be Unicode, and of course Plan 9.  How to
create Unicode filenames, what forms of Unicode are accepted and used
(UCS-2, UTF-16, UTF-8), what (if any) is the normalization form used,
and so on, varies.  Finding the right level of interfacing to Perl
requires some thought.  Remember that an OS does not implicate a
filesystem.
d590 1
a590 4
Note that in Windows the -C command line flag already does quite
a bit of the above (but even there the support is not complete:
for example the exec/spawn are not Unicode-aware) by turning on
the so-called "wide API support". 
d592 1
a592 1
=head1 Recently done things
d594 1
a594 2
These are things which have been on the todo lists in previous releases
but have recently been completed.
d596 1
a596 1
=head2 Alternative RE syntax module
d598 1
a598 1
The C<Regexp::English> module, available from the CPAN, provides this:
d600 1
a600 10
    my $re = Regexp::English
    -> start_of_line
    -> literal('Flippers')
    -> literal(':')
    -> optional
        -> whitespace_char
    -> end
    -> remember
        -> multiple
            -> digit;
d602 1
a602 1
    /$re/;
d604 1
a604 1
=head2 Safe signal handling
d606 1
a606 4
A new signal model went into 5.7.1 without much fanfare. Operations and
C<malloc>s are no longer interrupted by signals, which are handled
between opcodes. This means that C<PERL_ASYNC_CHECK> now actually does
something. However, there are still a few things that need to be done.
d608 1
a608 1
=head2 Tie Modules
d610 4
a613 2
Modules which implement arrays in terms of strings, substrings or files
can be found on the CPAN.
d615 1
a615 1
=head2 gettimeofday
d617 1
a617 1
C<Time::HiRes> has been integrated into the core.
d619 1
a619 1
=head2 setitimer and getimiter
d621 1
a621 1
Adding C<Time::HiRes> got us this too.
d623 1
a623 1
=head2 Testing __DIE__ hook
d625 1
a625 1
Tests have been added.
d627 1
a627 1
=head2 CPP equivalent in Perl
d629 1
a629 3
A C Yardley will probably have done this by the time you can read this.
This allows for a generalization of the C constant detection used in
building C<Errno.pm>.
d631 1
a631 1
=head2 Explicit switch statements
d633 1
a633 2
C<Switch.pm> has been integrated into the core to give you all manner of
C<switch...case> semantics.
d635 1
a635 1
=head2 autocroak
d637 1
a637 1
This is C<Fatal.pm>.
d639 1
a639 1
=head2 UTF/EBCDIC
d641 1
a641 1
Nick Ing-Simmons has made UTF-EBCDIC (UTR13) work with Perl.
d643 1
a643 1
    EBCDIC?        http://www.unicode.org/unicode/reports/tr16/
d645 1
a645 1
=head2 UTF Regexes
d647 2
a648 3
Although there are probably some small bugs to be rooted out, Jarkko
Hietaniemi has made regular expressions polymorphic between bytes and
characters.
d650 1
a650 1
=head2 perlcc to produce executable
d652 1
a652 2
C<perlcc> was recently rewritten, and can now produce standalone
executables.
d654 1
a654 1
=head2 END blocks saved in compiled output
d656 1
a656 1
=head2 Secure temporary file module
d658 1
a658 1
Tim Jenness' C<File::Temp> is now in core.
d660 1
a660 1
=head2 Integrate Time::HiRes
d662 1
a662 1
This module is now part of core.
d664 1
a664 1
=head2 Turn Cwd into XS
d666 1
a666 1
Benjamin Sugars has done this.
d668 3
a670 1
=head2 Mmap for input
d672 1
a672 1
Nick Ing-Simmons' C<perlio> supports an C<mmap> IO method.
d674 1
a674 1
=head2 Byte to/from UTF8 and UTF8 to/from local conversion
d676 1
a676 1
C<Encode> provides this.
d678 2
a679 1
=head2 Add sockatmark support
d681 1
a681 3
Added in 5.7.1

=head2 Mailing list archives
d683 1
a683 1
http://lists.perl.org/ , http://archive.develooper.com/
d685 2
a686 1
=head2 Bug tracking
d688 1
a688 1
Richard Foley has written the bug tracking system at http://bugs.perl.org/
d690 2
a691 1
=head2 Integrate MacPerl
d693 1
a693 2
Chris Nandor and Matthias Neeracher have integrated the MacPerl changes
into 5.6.0.
d695 2
a696 1
=head2 Web "nerve center" for Perl
d698 1
a698 1
http://use.perl.org/ is what you're looking for.
d700 1
a700 1
=head2 Regular expression tutorial
d702 2
a703 1
C<perlretut>, provided by Mark Kvale.
d705 3
a707 1
=head2 Debugging Tutorial
d709 2
a710 1
C<perldebtut>, written by Richard Foley.
d712 4
a715 1
=head2 Integrate new modules
d717 1
a717 1
Jarkko has been integrating madly into 5.7.x
d719 4
a722 1
=head2 Integrate profiler
d724 4
a727 1
C<Devel::DProf> is now a core module.
d729 1
a729 1
=head2 Y2K error detection
d731 4
a734 2
There's a configure option to detect unsafe concatenation with "19", and
a CPAN module. (C<D'oh::Year>)
d736 1
a736 1
=head2 Regular expression debugger
d738 1
a738 3
While not part of core, Mark-Jason Dominus has written C<Rx> and has
also come up with a generalised strategy for regular expression
debugging.
d740 2
a741 1
=head2 POD checker
d743 1
a743 1
That's, uh, F<podchecker>
d745 2
a746 1
=head2 "Dynamic" lexicals
d748 1
a748 1
=head2 Cache precompiled modules
d750 1
a750 1
=head1 Deprecated Wishes
d752 1
a752 2
These are items which used to be in the todo file, but have been
deprecated for some reason.
d754 1
a754 1
=head2 Loop control on do{}
d756 1
a756 1
This would break old code; use C<do{{ }}> instead.
d758 1
a758 1
=head2 Lexically scoped typeglobs
d760 1
a760 1
Not needed now we have lexical IO handles.
d762 2
a763 1
=head2 format BOTTOM
d765 1
a765 1
=head2 report HANDLE
d767 3
a769 1
Damian Conway's text formatting modules seem to be the Way To Go.
d771 1
a771 1
=head2 Generalised want()/caller())
d773 1
a773 1
Robin Houston's C<Want> module does this.
d775 2
a776 1
=head2 Named prototypes
d778 1
a778 1
This seems to be delayed until Perl 6.
d780 2
a781 1
=head2 Built-in globbing
d783 1
a783 1
The C<File::Glob> module has been used to replace the C<glob> function.
d785 1
a785 1
=head2 Regression tests for suidperl
d787 1
a787 1
C<suidperl> is deprecated in favour of common sense.
d789 1
a789 1
=head2 Cached hash values
d791 1
a791 1
We have shared hash keys, which perform the same job.
d793 1
a793 1
=head2 Add compression modules
d795 1
a795 3
The compression modules are a little heavy; meanwhile, Nick Clark is
working on experimental pragmata to do transparent decompression on
input.
d797 1
a797 1
=head2 Reorganise documentation into tutorials/references
d799 1
a799 1
Could not get consensus on P5P about this.
d801 2
a802 1
=head2 Remove distinction between functions and operators
d804 1
a804 1
Caution: highly flammable.
d806 1
a806 1
=head2 Make XS easier to use
d808 1
a808 1
Use C<Inline> instead, or SWIG.
d810 2
a811 1
=head2 Make embedding easier to use
d813 1
a813 1
Use C<Inline::CPR>.
d815 1
a815 1
=head2 man for perl
d817 1
a817 1
See the Perl Power Tools. ( http://language.perl.com/ppt/ )
d819 1
a819 1
=head2 my $Package::variable
d821 2
a822 1
Use C<our> instead.
d824 1
a824 1
=head2 "or" tests defined, not truth
d826 1
a826 1
Suggesting this on P5P B<will> cause a boring and interminable flamewar.
d828 3
a830 1
=head2 "class"-based lexicals
d832 1
a832 2
Use flyweight objects, secure hashes or, dare I say it, pseudo-hashes instead.
(Or whatever will replace pseudohashes in 5.10.)
d834 2
a835 1
=head2 byteperl
d837 1
a837 1
C<ByteLoader> covers this.
d839 2
a840 1
=head2 Lazy evaluation / tail recursion removal
d842 1
a842 5
C<List::Util> gives first() (a short-circuiting grep); tail recursion
removal is done manually, with C<goto &whoami;>. (However, MJD has
found that C<goto &whoami> introduces a performance penalty, so maybe
there should be a way to do this after all: C<sub foo {START: ... goto
START;> is better.)
d844 1
a844 1
=head2 Make "use utf8" the default
d846 1
a846 6
Because of backward compatibility this is difficult: scripts could not
contain B<any legacy eight-bit data> (like Latin-1) anymore, even in
string literals or pod.  Also would introduce a measurable slowdown of
at least few percentages since all regular expression operations would
be done in full UTF-8.  But if you want to try this, add
-DUSE_UTF8_SCRIPTS to your compilation flags.
d848 1
a848 4
=head2 Unicode collation and normalization

The Unicode::Collate and Unicode::Normalize modules
by SADAHIRO Tomoyuki have been included since 5.8.0.
d850 1
a850 2
    Collation?     http://www.unicode.org/unicode/reports/tr10/
    Normalization? http://www.unicode.org/unicode/reports/tr15/
d852 1
a852 1
=head2 pack/unpack tutorial
d854 3
a856 1
Wolfgang Laun finished what Simon Cozens started.
@


1.1.1.4
log
@perl 5.8.2 from CPAN
@
text
@d40 1
a40 1
Requirements: should handle both byte and UTF-8 strings.  isPRINT()
d207 1
a207 1
	http://oss.software.ibm.com/icu/index.html
a582 7
=head2 Perform correctly when XSUBs call subroutines that exit via goto(LABEL) and friends

If an XSUB calls a subroutine that exits using goto(LABEL),
last(LABEL) or next(LABEL), then the interpreter will very probably crash
with a segfault because the execution resumes in the XSUB instead of
never returning there.

d698 4
a701 7
(The Windows -C command flag "wide API support" has been at least
temporarily retired in 5.8.1, and the -C has been repurposed, see
L<perlrun>.)

=head1 Unicode in %ENV

Currently the %ENV entries are always byte strings.
d799 1
a799 1
=head2 Byte to/from UTF-8 and UTF-8 to/from local conversion
d813 1
a813 2
Since 5.8.0 perl uses the RT bug tracking system from Jesse Vincent,
implemented by Robert Spier at http://bugs.perl.org/
@


1.1.1.5
log
@perl 5.8.3 from CPAN
@
text
@d690 1
a690 1
system, truncate, unlink, utime, -X.  All these could potentially accept
@


1.1.1.6
log
@Import of stock perl 5.8.5
@
text
@d16 1
a16 1
=head1 assertions
d18 1
a18 1
Clean up and finish support for assertions. See L<assertions>.
d20 2
a21 1
=head1 iCOW
d23 1
a23 3
Sarathy and Arthur have a proposal for an improved Copy On Write which
specifically will be able to COW new ithreads. If this can be implemented
it would be a good thing.
d25 2
a26 1
=head1 (?{...}) closures in regexps
d28 1
a28 1
Fix (or rewrite) the implementation of the C</(?{...})/> closures.
d30 3
a32 1
=head1 A re-entrant regexp engine
d34 1
a34 2
This will allow the use of a regex from inside (?{ }), (??{ }) and
(?(?{ })|) constructs.
d36 3
a38 1
=head1 pragmata
d40 4
a43 1
=head2 lexical pragmas
d45 11
a55 4
Reimplement the mechanism of lexical pragmas to be more extensible. Fix
current pragmas that don't work well (or at all) with lexical scopes or in
run-time eval(STRING) (C<sort>, C<re>, C<encoding> for example). MJD has a
preliminary patch that implements this.
d57 2
a58 1
=head2 use less 'memory'
d60 1
a60 2
Investigate trade offs to switch out perl's choices on memory usage.
Particularly perl should be able to give memory back.
d62 4
a65 1
=head1 prototypes and functions
d67 1
a67 1
=head2 _ prototype character
d69 1
a69 2
Study the possibility of adding a new prototype character, C<_>, meaning
"this argument defaults to $_".
d71 1
a71 1
=head2 inlining autoloaded constants
d73 467
a539 7
Currently the optimiser can inline constants when expressed as subroutines
with prototype ($) that return a constant. Likewise, many packages wrapping
C libraries export lots of constants as subroutines which are AUTOLOADed on
demand. However, these have no prototypes, so can't be seen as constants by
the optimiser. Some way of cheaply (low syntax, low memory overhead) to the
perl compiler that a name is a constant would be great, so that it knows to
call the AUTOLOAD routine at compile time, and then inline the constant.
d543 89
a631 2
The old perltodo notes "They don't work in the debugger, and they don't work for
list or hash slices."
d633 1
a633 1
=head1 Unicode and UTF8
d635 1
a635 1
=head2 Implicit Latin 1 => Unicode translation
d637 1
a637 6
Conversions from byte strings to UTF-8 currently map high bit characters
to Unicode without translation (or, depending on how you look at it, by
implicitly assuming that the byte strings are in Latin-1). As perl assumes
the C locale by default, upgrading a string to UTF-8 may change the
meaning of its contents regarding character classes, case mapping, etc.
This should probably emit a warning (at least).
d639 3
a641 1
=head2 UTF8 caching code
d643 42
a684 1
The string position/offset cache is not optional. It should be.
d709 1
a709 1
=head2 Unicode in %ENV
d713 51
a763 1
=head1 Regexps
d765 1
a765 1
=head2 regexp optimiser optional
d767 2
a768 2
The regexp optimiser is not optional. It should configurable to be, to allow
its performance to be measured, and its bugs to be easily demonstrated.
d770 1
a770 1
=head2 common suffices/prefices in regexps (trie optimization)
d772 62
a833 2
Currently, the user has to optimize C<foo|far> and C<foo|goo> into
C<f(?:oo|ar)> and C<[fg]oo> by hand; this could be done automatically.
d835 1
a835 1
=head1 POD
d837 1
a837 1
=head2 POD -> HTML conversion still sucks
d839 1
a839 2
Which is crazy given just how simple POD purports to be, and how simple HTML
can be.
d841 1
a841 1
=head1 Misc medium sized projects
d843 1
a843 1
=head2 UNITCHECK
d845 1
a845 4
Introduce a new special block, UNITCHECK, which is run at the end of a
compilation unit (module, file, eval(STRING) block). This will correspond to
the Perl 6 CHECK. Perl 5's CHECK cannot be changed or removed because the
O.pm/B.pm backend framework depends on it.
d847 1
a847 1
=head2 optional optimizer
d849 1
a849 1
Make the peephole optimizer optional.
d851 1
a851 1
=head2 You WANT *how* many
d853 2
a854 5
Currently contexts are void, scalar and list. split has a special mechanism in
place to pass in the number of return values wanted. It would be useful to
have a general mechanism for this, backwards compatible and little speed hit.
This would allow proposals such as short circuiting sort to be implemented
as a module on CPAN.
d856 1
a856 1
=head2 lexical aliases
d858 3
a860 1
Allow lexical aliases (maybe via the syntax C<my \$alias = \$foo>.
d862 1
a862 1
=head2 no 6
d864 1
a864 1
Make C<no 6> and C<no v6> work (opposite of C<use 5.005>, etc.).
d866 1
a866 1
=head2 IPv6
d868 1
a868 1
Clean this up. Check everything in core works
d870 1
a870 1
=head2 entersub XS vs Perl
d872 2
a873 4
At the moment pp_entersub is huge, and has code to deal with entering both
perl and and XS subroutines. Subroutine implementations rarely change between 
perl and XS at run time, so investigate using 2 ops to enter subs (one for
XS, one for perl) and swap between if a sub is redefined.
d875 1
a875 1
=head2 @@INC source filter to Filter::Simple
d877 1
a877 2
The second return value from a sub in @@INC can be a source filter. This isn't
documented. It should be changed to use Filter::Simple, tested and documented.
d879 1
a879 1
=head2 bincompat functions
d881 1
a881 2
There are lots of functions which are retained for binary compatibility.
Clean these up. Move them to mathom.c, and don't compile for blead?
d883 1
a883 1
=head2 Use fchown/fchmod internally
d885 1
a885 2
The old perltodo notes "This has been done in places, but needs a thorough
code review. Also fchdir is available in some platforms."
d887 1
a887 1
=head1 Tests
d889 1
a889 1
=head2 Make Schwern poorer
d891 1
a891 1
Tests for everything, At which point Schwern coughs up $500 to TPF.
d893 1
a893 1
=head2 test B
d895 1
a895 1
A test suite for the B module would be nice.
d897 1
a897 1
=head2 Improve tests for Config.pm
d899 1
a899 1
Config.pm doesn't appear to be well tested.
d901 1
a901 1
=head2 common test code for timed bailout
d903 1
a903 3
Write portable self destruct code for tests to stop them burning CPU in
infinite loops. Needs to avoid using alarm, as some of the tests are testing
alarm/sleep or timers.
d905 1
a905 1
=head1 Installation
d907 1
a907 1
=head2 compressed man pages
d909 1
a909 1
Be able to install them
d911 3
a913 1
=head2 Make Config.pm cope with differences between build and installed perl
d915 1
a915 1
=head2 Relocatable perl
d917 1
a917 2
Make it possible to create a relocatable perl binary. Will need some collusion
with Config.pm. We could use a syntax of ... for location of current binary?
d919 1
a919 1
=head2 make HTML install work
d921 1
a921 1
=head2 put patchlevel in -v
d923 1
a923 6
Currently perl from p4/rsync ships with a patchlevel.h file that usually
defines one local patch, of the form "MAINT12345" or "RC1". The output of
perl -v doesn't report that a perl isn't an official release, and this
information can get lost in bugs reports. Because of this, the minor version
isn't bumped up util RC time, to minimise the possibility of versions of perl
escaping that believe themselves to be newer than they actually are.
d925 1
a925 7
It would be useful to find an elegant way to have the "this is an interim
maintenance release" or "this is a release candidate" in the terse -v output,
and have it so that it's easy for the pumpking to remove this just as the
release tarball is rolled up. This way the version pulled out of rsync would
always say "I'm a development release" and it would be safe to bump the
reported minor version as soon as a release ships, which would aid perl
developers.
d927 1
a927 1
=head1 Incremental things
d929 1
a929 1
Some tasks that don't need to get done in one big hit.
d931 1
a931 1
=head2 autovivification
d933 1
a933 1
Make all autovivification consistent w.r.t LVALUE/RVALUE and strict/no strict;
d935 1
a935 1
=head2 fix tainting bugs
d937 1
a937 2
Fix the bugs revealed by running the test suite with the C<-t> switch (via
C<make test.taintwarn>).
d939 1
a939 1
=head2 Make tainting consistent
d941 1
a941 2
Tainting would be easier to use if it didn't take documented shortcuts and allow
taint to "leak" everywhere within an expression.
d943 1
a943 1
=head2 Dual life everything
d945 2
a946 2
As part of the "dists" plan, anything that doesn't belong in the smallest perl
distribution needs to be dual lifed. Anything else can be too.
d948 1
a948 1
=head1 Vague things
d950 1
a950 1
Some more nebulous ideas
d952 1
a952 1
=head2 threads
d954 5
a958 1
Make threads more robust.
d960 1
a960 1
=head2 POSIX memory footprint
d962 6
a967 3
Ilya observed that use POSIX; eats memory like there's no tomorrow, and at
various times worked to cut it down. There is probably still fat to cut out -
for example POSIX passes Exporter some very memory hungry data structures.
d969 1
a969 1
=head2 Optimize away @@_
d971 2
a972 1
The old perltodo notes "Look at the "reification" code in C<av.c>"
d974 2
a975 1
=head2 switch ops
d977 1
a977 3
The old perltodo notes "Although we have C<Switch.pm> in core, Larry points to
the dormant C<nswitch> and C<cswitch> ops in F<pp.c>; using these opcodes would
be much faster."
d979 1
a979 1
=head2 Attach/detach debugger from running program
d981 1
a981 12
The old perltodo notes "With C<gdb>, you can attach the debugger to a running
program if you pass the process ID. It would be good to do this with the Perl
debugger on a running Perl program, although I'm not sure how it would be done."
ssh and screen do this with named pipes in tmp. Maybe we can too.

=head2 A decent benchmark

perlbench seems impervious to any recent changes made to the perl core. It would
be useful to have a reasonable general benchmarking suite that roughly
represented what current perl programs do, and measurably reported whether
tweaks to the core improve, degrade or don't really affect performance, to
guide people attempting to optimise the guts of perl.
@


1.1.1.7
log
@perl 5.8.6 from CPAN
@
text
@d228 1
a228 1
isn't bumped up until RC time, to minimise the possibility of versions of perl
d278 1
a278 1
The old perltodo notes "Look at the "reification" code in C<av.c>".
a299 6

=head2 readpipe(LIST)

system() accepts a LIST syntax (and a PROGRAM LIST syntax) to avoid
running a shell. readpipe() (the function behind qx//) could be similarly
extended.
@


1.1.1.8
log
@perl 5.8.8 import
@
text
@d7 6
a12 8
This is a list of wishes for Perl. The tasks we think are smaller or easier
are listed first. Anyone is welcome to work on any of these, but it's a good
idea to first contact I<perl5-porters@@perl.org> to avoid duplication of
effort. By all means contact a pumpking privately first if you prefer.

Whilst patches to make the list shorter are most welcome, ideas to add to
the list are also encouraged. Check the perl5-porters archives for past
ideas, and any discussion about them. One set of archives may be found at:
d16 1
a16 4
What can we offer you in return? Fame, fortune, and everlasting glory? Maybe
not, but if your patch is incorporated, then we'll add your name to the
F<AUTHORS> file, which ships in the official distribution. How many other
programming languages offer you 1 line of immortality?
d18 1
a18 1
=head1 The roadmap to 5.10
d20 1
a20 2
The roadmap to 5.10 envisages feature based releases, as various items in this
TODO are completed.
d22 3
a24 1
=head2 Needed for a 5.9.4 release
d26 1
a26 1
=over
d28 1
a28 1
=item *
d30 1
a30 2
Review assertions. Review syntax to combine assertions. Assertions could take
advantage of the lexical pragmas work. L</What hooks would assertions need?>
d32 2
a33 1
=back
d35 1
a35 1
=head2 Needed for a 5.9.5 release
d37 1
a37 1
=over
d39 4
a42 2
=item *
Implement L</_ prototype character>
d44 1
a44 2
=item *
Implement L</state variables>
d46 2
a47 1
=back
d49 1
a49 1
=head2 Needed for a 5.9.6 release
d51 1
a51 1
Stabilisation. If all goes well, this will be the equivalent of a 5.10-beta.
d53 2
a54 310
=head1 Tasks that only need Perl knowledge

=head2 common test code for timed bail out

Write portable self destruct code for tests to stop them burning CPU in
infinite loops. This needs to avoid using alarm, as some of the tests are
testing alarm/sleep or timers.

=head2 POD -> HTML conversion in the core still sucks

Which is crazy given just how simple POD purports to be, and how simple HTML
can be. It's not actually I<as> simple as it sounds, particularly with the
flexibility POD allows for C<=item>, but it would be good to improve the
visual appeal of the HTML generated, and to avoid it having any validation
errors. See also L</make HTML install work>, as the layout of installation tree
is needed to improve the cross-linking.

The addition of C<Pod::Simple> and its related modules may make this task
easier to complete.

=head2 Parallel testing

The core regression test suite is getting ever more comprehensive, which has
the side effect that it takes longer to run. This isn't so good. Investigate
whether it would be feasible to give the harness script the B<option> of
running sets of tests in parallel. This would be useful for tests in
F<t/op/*.t> and F<t/uni/*.t> and maybe some sets of tests in F<lib/>.

Questions to answer

=over 4

=item 1

How does screen layout work when you're running more than one test?

=item 2

How does the caller of test specify how many tests to run in parallel?

=item 3

How do setup/teardown tests identify themselves?

=back

Pugs already does parallel testing - can their approach be re-used?

=head2 Make Schwern poorer

We should have for everything. When all the core's modules are tested,
Schwern has promised to donate to $500 to TPF. We may need volunteers to
hold him upside down and shake vigorously in order to actually extract the
cash.

See F<t/lib/1_compile.t> for the 3 remaining modules that need tests.

=head2 Improve the coverage of the core tests

Use Devel::Cover to ascertain the core's test coverage, then add tests that
are currently missing.

=head2 test B

A full test suite for the B module would be nice.

=head2 A decent benchmark

C<perlbench> seems impervious to any recent changes made to the perl core. It
would be useful to have a reasonable general benchmarking suite that roughly
represented what current perl programs do, and measurably reported whether
tweaks to the core improve, degrade or don't really affect performance, to
guide people attempting to optimise the guts of perl. Gisle would welcome
new tests for perlbench.

=head2 fix tainting bugs

Fix the bugs revealed by running the test suite with the C<-t> switch (via
C<make test.taintwarn>).

=head2 Dual life everything

As part of the "dists" plan, anything that doesn't belong in the smallest perl
distribution needs to be dual lifed. Anything else can be too. Figure out what
changes would be needed to package that module and its tests up for CPAN, and
do so. Test it with older perl releases, and fix the problems you find.

=head2 Improving C<threads::shared>

Investigate whether C<threads::shared> could share aggregates properly with
only Perl level changes to shared.pm

=head2 POSIX memory footprint

Ilya observed that use POSIX; eats memory like there's no tomorrow, and at
various times worked to cut it down. There is probably still fat to cut out -
for example POSIX passes Exporter some very memory hungry data structures.







=head1 Tasks that need a little sysadmin-type knowledge

Or if you prefer, tasks that you would learn from, and broaden your skills
base...

=head2 Relocatable perl

The C level patches needed to create a relocatable perl binary are done, as
is the work on F<Config.pm>. All that's left to do is the C<Configure> tweaking
to let people specify how they want to do the install.

=head2 make HTML install work

There is an C<installhtml> target in the Makefile. It's marked as
"experimental". It would be good to get this tested, make it work reliably, and
remove the "experimental" tag. This would include

=over 4

=item 1

Checking that cross linking between various parts of the documentation works.
In particular that links work between the modules (files with POD in F<lib/>)
and the core documentation (files in F<pod/>)

=item 2

Work out how to split C<perlfunc> into chunks, preferably one per function
group, preferably with general case code that could be used elsewhere.
Challenges here are correctly identifying the groups of functions that go
together, and making the right named external cross-links point to the right
page. Things to be aware of are C<-X>, groups such as C<getpwnam> to
C<endservent>, two or more C<=items> giving the different parameter lists, such
as

    =item substr EXPR,OFFSET,LENGTH,REPLACEMENT
    
    =item substr EXPR,OFFSET,LENGTH
    
    =item substr EXPR,OFFSET

and different parameter lists having different meanings. (eg C<select>)

=back

=head2 compressed man pages

Be able to install them. This would probably need a configure test to see how
the system does compressed man pages (same directory/different directory?
same filename/different filename), as well as tweaking the F<installman> script
to compress as necessary.

=head2 Add a code coverage target to the Makefile

Make it easy for anyone to run Devel::Cover on the core's tests. The steps
to do this manually are roughly

=over 4

=item *

do a normal C<Configure>, but include Devel::Cover as a module to install
(see F<INSTALL> for how to do this)

=item *

    make perl

=item *

    cd t; HARNESS_PERL_SWITCHES=-MDevel::Cover ./perl -I../lib harness

=item *

Process the resulting Devel::Cover database

=back

This just give you the coverage of the F<.pm>s. To also get the C level
coverage you need to

=over 4

=item *

Additionally tell C<Configure> to use the appropriate C compiler flags for
C<gcov>

=item *

    make perl.gcov

(instead of C<make perl>)

=item *

After running the tests run C<gcov> to generate all the F<.gcov> files.
(Including down in the subdirectories of F<ext/>

=item *

(From the top level perl directory) run C<gcov2perl> on all the C<.gcov> files
to get their stats into the cover_db directory.

=item *

Then process the Devel::Cover database

=back

It would be good to add a single switch to C<Configure> to specify that you
wanted to perform perl level coverage, and another to specify C level
coverage, and have C<Configure> and the F<Makefile> do all the right things
automatically.

=head2 Make Config.pm cope with differences between build and installed perl

Quite often vendors ship a perl binary compiled with their (pay-for)
compilers.  People install a free compiler, such as gcc. To work out how to
build extensions, Perl interrogates C<%Config>, so in this situation
C<%Config> describes compilers that aren't there, and extension building
fails. This forces people into choosing between re-compiling perl themselves
using the compiler they have, or only using modules that the vendor ships.

It would be good to find a way teach C<Config.pm> about the installation setup,
possibly involving probing at install time or later, so that the C<%Config> in
a binary distribution better describes the installed machine, when the
installed machine differs from the build machine in some significant way.

=head2 make parallel builds work

Currently parallel builds (such as C<make -j3>) don't work reliably. We believe
that this is due to incomplete dependency specification in the F<Makefile>.
It would be good if someone were able to track down the causes of these
problems, so that parallel builds worked properly.

=head2 linker specification files

Some platforms mandate that you provide a list of a shared library's external
symbols to the linker, so the core already has the infrastructure in place to
do this for generating shared perl libraries. My understanding is that the
GNU toolchain can accept an optional linker specification file, and restrict
visibility just to symbols declared in that file. It would be good to extend
F<makedef.pl> to support this format, and to provide a means within
C<Configure> to enable it. This would allow Unix users to test that the
export list is correct, and to build a perl that does not pollute the global
namespace with private symbols.




=head1 Tasks that need a little C knowledge

These tasks would need a little C knowledge, but don't need any specific
background or experience with XS, or how the Perl interpreter works

=head2 Make it clear from -v if this is the exact official release

Currently perl from C<p4>/C<rsync> ships with a F<patchlevel.h> file that
usually defines one local patch, of the form "MAINT12345" or "RC1". The output
of perl -v doesn't report that a perl isn't an official release, and this
information can get lost in bugs reports. Because of this, the minor version
isn't bumped up until RC time, to minimise the possibility of versions of perl
escaping that believe themselves to be newer than they actually are.

It would be useful to find an elegant way to have the "this is an interim
maintenance release" or "this is a release candidate" in the terse -v output,
and have it so that it's easy for the pumpking to remove this just as the
release tarball is rolled up. This way the version pulled out of rsync would
always say "I'm a development release" and it would be safe to bump the
reported minor version as soon as a release ships, which would aid perl
developers.

This task is really about thinking of an elegant way to arrange the C source
such that it's trivial for the Pumpking to flag "this is an official release"
when making a tarball, yet leave the default source saying "I'm not the
official release".

=head2 Tidy up global variables

There's a note in F<intrpvar.h>

  /* These two variables are needed to preserve 5.8.x bincompat because
     we can't change function prototypes of two exported functions.
     Probably should be taken out of blead soon, and relevant prototypes
     changed.  */

So doing this, and removing any of the unused variables still present would
be good.

=head2 Ordering of "global" variables.

F<thrdvar.h> and F<intrpvarh> define the "global" variables that need to be
per-thread under ithreads, where the variables are actually elements in a
structure. As C dictates, the variables must be laid out in order of
declaration. There is a comment
C</* Important ones in the first cache line (if alignment is done right) */>
which implies that at some point in the past the ordering was carefully chosen
(at least in part). However, it's clear that the ordering is less than perfect,
as currently there are things such as 7 C<bool>s in a row, then something
typically requiring 4 byte alignment, and then an odd C<bool> later on.
(C<bool>s are typically defined as C<char>s). So it would be good for someone
to review the ordering of the variables, to see how much alignment padding can
be removed.

=head2 bincompat functions
d56 1
a56 2
There are lots of functions which are retained for binary compatibility.
Clean these up. Move them to mathom.c, and don't compile for blead?
d58 7
a64 1
=head2 am I hot or not?
d66 1
a66 62
The idea of F<pp_hot.c> is that it contains the I<hot> ops, the ops that are
most commonly used. The idea is that by grouping them, their object code will
be adjacent in the executable, so they have a greater chance of already being
in the CPU cache (or swapped in) due to being near another op already in use.

Except that it's not clear if these really are the most commonly used ops. So
anyone feeling like exercising their skill with coverage and profiling tools
might want to determine what ops I<really> are the most commonly used. And in
turn suggest evictions and promotions to achieve a better F<pp_hot.c>.

=head2 emulate the per-thread memory pool on Unix

For Windows, ithreads allocates memory for each thread from a separate pool,
which it discards at thread exit. It also checks that memory is free()d to
the correct pool. Neither check is done on Unix, so code developed there won't
be subject to such strictures, so can harbour bugs that only show up when the
code reaches Windows.

It would be good to be able to optionally emulate the Window pool system on
Unix, to let developers who only have access to Unix, or want to use
Unix-specific debugging tools, check for these problems. To do this would
involve figuring out how the C<PerlMem_*> macros wrap C<malloc()> access, and
providing a layer that records/checks the identity of the thread making the
call, and recording all the memory allocated by each thread via this API so
that it can be summarily free()d at thread exit. One implementation idea
would be to increase the size of allocation, and store the C<my_perl> pointer
(to identify the thread) at the start, along with pointers to make a linked
list of blocks for this thread. To avoid alignment problems it would be
necessary to do something like

  union memory_header_padded {
    struct memory_header {
      void *thread_id;   /* For my_perl */
      void *next;        /* Pointer to next block for this thread */
    } data;
    long double padding; /* whatever type has maximal alignment constraint */
  };


although C<long double> might not be the only type to add to the padding
union.

=head2 reduce duplication in sv_setsv_flags

C<Perl_sv_setsv_flags> has a comment
C</* There's a lot of redundancy below but we're going for speed here */>

Whilst this was true 10 years ago, the growing disparity between RAM and CPU
speeds mean that the trade offs have changed. In addition, the duplicate code
adds to the maintenance burden. It would be good to see how much of the
redundancy can be pruned, particular in the less common paths. (Profiling
tools at the ready...). For example, why does the test for
"Can't redefine active sort subroutine" need to occur in two places?




=head1 Tasks that need a knowledge of XS

These tasks would need C knowledge, and roughly the level of knowledge of
the perl API that comes from writing modules that use XS to interface to
C.
d68 2
a69 22
=head2 IPv6

Clean this up. Check everything in core works

=head2 shrink C<GV>s, C<CV>s

By removing unused elements and careful re-ordering, the structures for C<AV>s
and C<HV>s have recently been shrunk considerably. It's probable that the same
approach would find savings in C<GV>s and C<CV>s, if not all the other
larger-than-C<PVMG> types.

=head2 merge Perl_sv_2[inpu]v

There's a lot of code shared between C<Perl_sv_2iv_flags>,
C<Perl_sv_2uv_flags>, C<Perl_sv_2nv>, and C<Perl_sv_2pv_flags>. It would be
interesting to see if some of it can be merged into common shared static
functions. In particular, C<Perl_sv_2uv_flags> started out as a cut&paste
from C<Perl_sv_2iv_flags> around 5.005_50 time, and it may be possible to
replace both with a single function that returns a value or union which is
split out by the macros in F<sv.h>

=head2 UTF8 caching code
d71 1
a71 1
The string position/offset cache is not optional. It should be.
d82 1
a82 1
This task is incremental - even a little bit of work on it will help.
d84 1
a84 5
=head2 autovivification

Make all autovivification consistent w.r.t LVALUE/RVALUE and strict/no strict;

This task is incremental - even a little bit of work on it will help.
d113 27
a139 1
=head2 use less 'memory'
d141 1
a141 2
Investigate trade offs to switch out perl's choices on memory usage.
Particularly perl should be able to give memory back.
d143 1
a143 1
This task is incremental - even a little bit of work on it will help.
d145 1
a145 1
=head2 Re-implement C<:unique> in a way that is actually thread-safe
d147 5
a151 4
The old implementation made bad assumptions on several levels. A good 90%
solution might be just to make C<:unique> work to share the string buffer
of SvPVs. That way large constant strings can be shared between ithreads,
such as the configuration information in F<Config>.
d153 1
a153 1
=head2 Make tainting consistent
d155 1
a155 2
Tainting would be easier to use if it didn't take documented shortcuts and
allow taint to "leak" everywhere within an expression.
d157 1
a157 1
=head2 readpipe(LIST)
d159 1
a159 3
system() accepts a LIST syntax (and a PROGRAM LIST syntax) to avoid
running a shell. readpipe() (the function behind qx//) could be similarly
extended.
d161 1
d163 1
d165 1
d167 4
d172 1
a172 1
=head1 Tasks that need a knowledge of the interpreter
d174 2
a175 2
These tasks would need C knowledge, and knowledge of how the interpreter works,
or a willingness to learn.
d177 1
a177 1
=head2 lexical pragmas
d179 2
a180 2
Document the new support for lexical pragmas in 5.9.3 and how %^H works.
Maybe C<re>, C<encoding>, maybe other pragmas could be made lexical.
d182 1
a182 1
=head2 Attach/detach debugger from running program
d184 2
a185 4
The old perltodo notes "With C<gdb>, you can attach the debugger to a running
program if you pass the process ID. It would be good to do this with the Perl
debugger on a running Perl program, although I'm not sure how it would be
done." ssh and screen do this with named pipes in /tmp. Maybe we can too.
d187 1
a187 1
=head2 Constant folding
d189 1
a189 4
The peephole optimiser should trap errors during constant folding, and give
up on the folding, rather than bailing out at compile time.  It is quite
possible that the unfoldable constant is in unreachable code, eg something
akin to C<$a = 0/0 if 0;>
d191 1
a191 1
=head2 LVALUE functions for lists
d193 1
a193 2
The old perltodo notes that lvalue functions don't work for list or hash
slices. This would be good to fix.
d195 1
a195 1
=head2 LVALUE functions in the debugger
d197 1
a197 2
The old perltodo notes that lvalue functions don't work in the debugger. This
would be good to fix.
d199 1
a199 1
=head2 _ prototype character
d201 1
a201 2
Study the possibility of adding a new prototype character, C<_>, meaning
"this argument defaults to $_".
d203 3
a205 1
=head2 state variables
d207 1
a207 2
C<my $foo if 0;> is deprecated, and should be replaced with
C<state $x = "initial value\n";> the syntax from Perl 6.
d209 1
a209 1
=head2 @@INC source filter to Filter::Simple
d211 1
a211 2
The second return value from a sub in @@INC can be a source filter. This isn't
documented. It should be changed to use Filter::Simple, tested and documented.
d213 1
a213 1
=head2 regexp optimiser optional
d215 1
a215 2
The regexp optimiser is not optional. It should configurable to be, to allow
its performance to be measured, and its bugs to be easily demonstrated.
d217 2
a218 1
=head2 UNITCHECK
d220 1
a220 4
Introduce a new special block, UNITCHECK, which is run at the end of a
compilation unit (module, file, eval(STRING) block). This will correspond to
the Perl 6 CHECK. Perl 5's CHECK cannot be changed or removed because the
O.pm/B.pm backend framework depends on it.
d222 1
a222 1
=head2 optional optimizer
d224 6
a229 4
Make the peephole optimizer optional. Currently it performs two tasks as
it walks the optree - genuine peephole optimisations, and necessary fixups of
ops. It would be good to find an efficient way to switch out the
optimisations whilst keeping the fixups.
d231 7
a237 1
=head2 You WANT *how* many
d239 1
a239 5
Currently contexts are void, scalar and list. split has a special mechanism in
place to pass in the number of return values wanted. It would be useful to
have a general mechanism for this, backwards compatible and little speed hit.
This would allow proposals such as short circuiting sort to be implemented
as a module on CPAN.
d241 1
a241 1
=head2 lexical aliases
d243 1
a243 1
Allow lexical aliases (maybe via the syntax C<my \$alias = \$foo>.
d245 1
a245 1
=head2 entersub XS vs Perl
d247 1
a247 4
At the moment pp_entersub is huge, and has code to deal with entering both
perl and XS subroutines. Subroutine implementations rarely change between 
perl and XS at run time, so investigate using 2 ops to enter subs (one for
XS, one for perl) and swap between if a sub is redefined.
d249 2
a250 1
=head2 Self ties
d252 1
a252 3
self ties are currently illegal because they caused too many segfaults. Maybe
the causes of these could be tracked down and self-ties on all types re-
instated.
d254 2
a255 1
=head2 Optimize away @@_
d257 1
a257 1
The old perltodo notes "Look at the "reification" code in C<av.c>".
d259 2
a260 1
=head2 What hooks would assertions need?
d262 1
a262 6
Assertions are in the core, and work. However, assertions needed to be added
as a core patch, rather than an XS module in ext, or a CPAN module, because
the core has no hooks in the necessary places. It would be useful to
investigate what hooks would need to be added to make it possible to provide
the full assertion support from a CPAN module, so that we aren't constraining
the imagination of future CPAN authors.
d264 1
d266 1
d268 1
d270 1
d272 3
a274 1
=head1 Big projects
d276 1
a276 2
Tasks that will get your name mentioned in the description of the "Highlights
of 5.10"
d278 1
a278 1
=head2 make ithreads more robust
d280 1
a280 1
Generally make ithreads more robust. See also L</iCOW>
d282 3
a284 2
This task is incremental - even a little bit of work on it will help, and
will be greatly appreciated.
d286 1
a286 1
=head2 iCOW
d288 4
a291 3
Sarathy and Arthur have a proposal for an improved Copy On Write which
specifically will be able to COW new ithreads. If this can be implemented
it would be a good thing.
d293 1
a293 1
=head2 (?{...}) closures in regexps
d295 5
a299 1
Fix (or rewrite) the implementation of the C</(?{...})/> closures.
d301 1
a301 1
=head2 A re-entrant regexp engine
d303 3
a305 2
This will allow the use of a regex from inside (?{ }), (??{ }) and
(?(?{ })|) constructs.
@


1.1.1.9
log
@import perl 5.10.0 from CPAN
@
text
@d23 27
a49 1
=head1 Tasks that only need Perl knowledge
d51 1
a51 1
=head2 Remove duplication of test setup.
d53 3
a55 13
Schwern notes, that there's duplication of code - lots and lots of tests have
some variation on the big block of C<$Is_Foo> checks.  We can safely put this
into a file, change it to build an C<%Is> hash and require it.  Maybe just put
it into F<test.pl>. Throw in the handy tainting subroutines.

=head2 merge common code in installperl and installman

There are some common subroutines and a common C<BEGIN> block in F<installperl>
and F<installman>. These should probably be merged. It would also be good to
check for duplication in all the utility scripts supplied in the source
tarball. It might be good to move them all to a subdirectory, but this would
require careful checking to find all places that call them, and change those
correctly.
d63 1
a63 1
=head2 POD -E<gt> HTML conversion in the core still sucks
a74 13
=head2 merge checkpods and podchecker

F<pod/checkpods.PL> (and C<make check> in the F<pod/> subdirectory)
implements a very basic check for pod files, but the errors it discovers
aren't found by podchecker. Add this check to podchecker, get rid of
checkpods and have C<make check> use podchecker.

=head2 perlmodlib.PL rewrite

Currently perlmodlib.PL needs to be run from a source directory where perl
has been built, or some modules won't be found, and others will be
skipped. Make it run from a clean perl source tree (so it's reproducible).

a76 3
(This probably impacts much more than the core: also the Test::Harness
and TAP::* modules on CPAN.)

d105 1
a105 1
We should have tests for everything. When all the core's modules are tested,
d110 2
d114 2
a115 2
Use Devel::Cover to ascertain the core modules's test coverage, then add
tests that are currently missing.
a120 22
=head2 Deparse inlined constants

Code such as this

    use constant PI => 4;
    warn PI

will currently deparse as

    use constant ('PI', 4);
    warn 4;

because the tokenizer inlines the value of the constant subroutine C<PI>.
This allows various compile time optimisations, such as constant folding
and dead code elimination. Where these haven't happened (such as the example
above) it ought be possible to make B::Deparse work out the name of the
original constant, because just enough information survives in the symbol
table to do this. Specifically, the same scalar is used for the constant in
the optree as is used for the constant subroutine, so by iterating over all
symbol tables and generating a mapping of SV address to constant name, it
would be possible to provide B::Deparse with this functionality.

a141 3
To make a minimal perl distribution, it's useful to look at
F<t/lib/commonsense.t>.

a152 1
=head2 embed.pl/makedef.pl
a153 26
There is a script F<embed.pl> that generates several header files to prefix
all of Perl's symbols in a consistent way, to provide some semblance of
namespace support in C<C>. Functions are declared in F<embed.fnc>, variables
in F<interpvar.h>. Quite a few of the functions and variables
are conditionally declared there, using C<#ifdef>. However, F<embed.pl>
doesn't understand the C macros, so the rules about which symbols are present
when is duplicated in F<makedef.pl>. Writing things twice is bad, m'kay.
It would be good to teach C<embed.pl> to understand the conditional
compilation, and hence remove the duplication, and the mistakes it has caused.

=head2 use strict; and AutoLoad

Currently if you write

    package Whack;
    use AutoLoader 'AUTOLOAD';
    use strict;
    1;
    __END__
    sub bloop {
        print join (' ', No, strict, here), "!\n";
    }

then C<use strict;> isn't in force within the autoloaded subroutines. It would
be more consistent (and less surprising) to arrange for all lexical pragmas
in force at the __END__ block to be in force within each autoloaded subroutine.
d155 3
a157 1
There's a similar problem with SelfLoader.
d164 6
d195 1
d197 1
d274 1
a274 1
=head2 Make Config.pm cope with differences between built and installed perl
d288 7
a306 18
=head2 Cross-compile support

Currently C<Configure> understands C<-Dusecrosscompile> option. This option
arranges for building C<miniperl> for TARGET machine, so this C<miniperl> is
assumed then to be copied to TARGET machine and used as a replacement of full
C<perl> executable.

This could be done little differently. Namely C<miniperl> should be built for
HOST and then full C<perl> with extensions should be compiled for TARGET.
This, however, might require extra trickery for %Config: we have one config
first for HOST and then another for TARGET.  Tools like MakeMaker will be
mightily confused.  Having around two different types of executables and
libraries (HOST and TARGET) makes life interesting for Makefiles and
shell (and Perl) scripts.  There is $Config{run}, normally empty, which
can be used as an execution wrapper.  Also note that in some
cross-compilation/execution environments the HOST and the TARGET do
not see the same filesystem(s), the $Config{run} may need to do some
file/directory copying back and forth.
a307 1
=head2 roffitall
a308 1
Make F<pod/roffitall> be updated by F<pod/buildtoc>.
a314 21
=head2 Exterminate PL_na!

C<PL_na> festers still in the darkest corners of various typemap files.
It needs to be exterminated, replaced by a local variable of type C<STRLEN>.

=head2 Modernize the order of directories in @@INC

The way @@INC is laid out by default, one cannot upgrade core (dual-life)
modules without overwriting files. This causes problems for binary
package builders.  One possible proposal is laid out in this
message:
L<http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2002-04/msg02380.html>.

=head2 -Duse32bit*

Natively 64-bit systems need neither -Duse64bitint nor -Duse64bitall.
On these systems, it might be the default compilation mode, and there
is currently no guarantee that passing no use64bitall option to the
Configure process will build a 32bit perl. Implementing -Duse32bit*
options would be nice for perl 5.12.

d337 3
a339 1
=head2 Profile Perl - am I hot or not?
d341 34
a374 10
The Perl source code is stable enough that it makes sense to profile it,
identify and optimise the hotspots. It would be good to measure the
performance of the Perl interpreter using free tools such as cachegrind,
gprof, and dtrace, and work to reduce the bottlenecks they reveal.

As part of this, the idea of F<pp_hot.c> is that it contains the I<hot> ops,
the ops that are most commonly used. The idea is that by grouping them, their
object code will be adjacent in the executable, so they have a greater chance
of already being in the CPU cache (or swapped in) due to being near another op
already in use.
d377 47
a423 16
as part of exercising your skills with coverage and profiling tools you might
want to determine what ops I<really> are the most commonly used. And in turn
suggest evictions and promotions to achieve a better F<pp_hot.c>.

=head2 Allocate OPs from arenas

Currently all new OP structures are individually malloc()ed and free()d.
All C<malloc> implementations have space overheads, and are now as fast as
custom allocates so it would both use less memory and less CPU to allocate
the various OP structures from arenas. The SV arena code can probably be
re-used for this.

Note that Configuring perl with C<-Accflags=-DPL_OP_SLAB_ALLOC> will use
Perl_Slab_alloc() to pack optrees into a contiguous block, which is
probably superior to the use of OP arenas, esp. from a cache locality
standpoint.  See L<Profile Perl - am I hot or not?>.
a424 1
=head2 Improve win32/wince.c
a425 3
Currently, numerous functions look virtually, if not completely,
identical in both C<win32/wince.c> and C<win32/win32.c> files, which can't
be good.
a426 1
=head2 Use secure CRT functions when building with VC8 on Win32
d428 1
a428 3
Visual C++ 2005 (VC++ 8.x) deprecated a number of CRT functions on the basis
that they were "unsafe" and introduced differently named secure versions of
them as replacements, e.g. instead of writing
d430 3
a432 1
    FILE* f = fopen(__FILE__, "r");
d434 1
a434 1
one should now write
d436 1
a436 2
    FILE* f;
    errno_t err = fopen_s(&f, __FILE__, "r"); 
d438 1
a438 3
Currently, the warnings about these deprecations have been disabled by adding
-D_CRT_SECURE_NO_DEPRECATE to the CFLAGS. It would be nice to remove that
warning suppressant and actually make use of the new secure CRT functions.
d440 4
a443 5
There is also a similar issue with POSIX CRT function names like fileno having
been deprecated in favour of ISO C++ conformant names like _fileno. These
warnings are also currently suppressed by adding -D_CRT_NONSTDC_NO_DEPRECATE. It
might be nice to do as Microsoft suggest here too, although, unlike the secure
functions issue, there is presumably little or no benefit in this case.
d445 1
a445 1
=head2 strcat(), strcpy(), strncat(), strncpy(), sprintf(), vsprintf()
d447 7
a453 3
Maybe create a utility that checks after each libperl.a creation that
none of the above (nor sprintf(), vsprintf(), or *SHUDDER* gets())
ever creep back to libperl.a.
d455 1
a455 1
  nm libperl.a | ./miniperl -alne '$o = $F[0] if /:$/; print "$o $F[1]" if $F[0] eq "U" && $F[1] =~ /^(?:strn?c(?:at|py)|v?sprintf|gets)$/'
d457 1
a457 2
Note, of course, that this will only tell whether B<your> platform
is using those naughty interfaces.
d459 1
a459 1
=head2 -D_FORTIFY_SOURCE=2, -fstack-protector
d461 6
a466 6
Recent glibcs support C<-D_FORTIFY_SOURCE=2> and recent gcc
(4.1 onwards?) supports C<-fstack-protector>, both of which give
protection against various kinds of buffer overflow problems.
These should probably be used for compiling Perl whenever available,
Configure and/or hints files should be adjusted to probe for the
availability of these features and enable them as appropriate.
d468 1
a468 5
=head1 Tasks that need a knowledge of XS

These tasks would need C knowledge, and roughly the level of knowledge of
the perl API that comes from writing modules that use XS to interface to
C.
a498 3
Most probably the right way to do this would be this:
L</"Virtualize operating system access">.

a501 12
See L</"Virtualize operating system access">.

=head2 Unicode and glob()

Currently glob patterns and filenames returned from File::Glob::glob()
are always byte strings.  See L</"Virtualize operating system access">.

=head2 Unicode and lc/uc operators

Some built-in operators (C<lc>, C<uc>, etc.) behave differently, based on
what the internal encoding of their argument is. That should not be the
case. Maybe add a pragma to switch behaviour.
a527 25
=head2 Audit the code for destruction ordering assumptions

Change 25773 notes

    /* Need to check SvMAGICAL, as during global destruction it may be that
       AvARYLEN(av) has been freed before av, and hence the SvANY() pointer
       is now part of the linked list of SV heads, rather than pointing to
       the original body.  */
    /* FIXME - audit the code for other bugs like this one.  */

adding the C<SvMAGICAL> check to

    if (AvARYLEN(av) && SvMAGICAL(AvARYLEN(av))) {
        MAGIC *mg = mg_find (AvARYLEN(av), PERL_MAGIC_arylen);

Go through the core and look for similar assumptions that SVs have particular
types, as all bets are off during global destruction.

=head2 Extend PerlIO and PerlIO::Scalar

PerlIO::Scalar doesn't know how to truncate().  Implementing this
would require extending the PerlIO vtable.

Similarly the PerlIO vtable doesn't know about formats (write()), or
about stat(), or chmod()/chown(), utime(), or flock().
a528 2
(For PerlIO::Scalar it's hard to see what e.g. mode bits or ownership
would mean.)
a529 3
PerlIO doesn't do directories or symlinks, either: mkdir(), rmdir(),
opendir(), closedir(), seekdir(), rewinddir(), glob(); symlink(),
readlink().
a530 61
See also L</"Virtualize operating system access">.

=head2 -C on the #! line

It should be possible to make -C work correctly if found on the #! line,
given that all perl command line options are strict ASCII, and -C changes
only the interpretation of non-ASCII characters, and not for the script file
handle. To make it work needs some investigation of the ordering of function
calls during startup, and (by implication) a bit of tweaking of that order.

=head2 Propagate const outwards from Perl_moreswitches()

Change 32057 changed the parameter and return value of C<Perl_moreswitches()>
from <char *> to <const char *>. It should now be possible to propagate
const-correctness outwards to C<S_parse_body()>, C<Perl_moreswitches()>
and C<Perl_yylex()>.

=head2 Duplicate logic in S_method_common() and Perl_gv_fetchmethod_autoload()

A comment in C<S_method_common> notes

	/* This code tries to figure out just what went wrong with
	   gv_fetchmethod.  It therefore needs to duplicate a lot of
	   the internals of that function.  We can't move it inside
	   Perl_gv_fetchmethod_autoload(), however, since that would
	   cause UNIVERSAL->can("NoSuchPackage::foo") to croak, and we
	   don't want that.
	*/

If C<Perl_gv_fetchmethod_autoload> gets rewritten to take (more) flag bits,
then it ought to be possible to move the logic from C<S_method_common> to
the "right" place. When making this change it would probably be good to also
pass in at least the method name length, if not also pre-computed hash values
when known. (I'm contemplating a plan to pre-compute hash values for common
fixed strings such as C<ISA> and pass them in to functions.)

=head2 Organize error messages

Perl's diagnostics (error messages, see L<perldiag>) could use
reorganizing and formalizing so that each error message has its
stable-for-all-eternity unique id, categorized by severity, type, and
subsystem.  (The error messages would be listed in a datafile outside
of the Perl source code, and the source code would only refer to the
messages by the id.)  This clean-up and regularizing should apply
for all croak() messages.

This would enable all sorts of things: easier translation/localization
of the messages (though please do keep in mind the caveats of
L<Locale::Maketext> about too straightforward approaches to
translation), filtering by severity, and instead of grepping for a
particular error message one could look for a stable error id.  (Of
course, changing the error messages by default would break all the
existing software depending on some particular error message...)

This kind of functionality is known as I<message catalogs>.  Look for
inspiration for example in the catgets() system, possibly even use it
if available-- but B<only> if available, all platforms will B<not>
have catgets().

For the really pure at heart, consider extending this item to cover
also the warning messages (see L<perllexwarn>, C<warnings.pl>).
d537 1
a537 7
=head2 UTF-8 revamp

The handling of Unicode is unclean in many places. For example, the regexp
engine matches in Unicode semantics whenever the string or the pattern is
flagged as UTF-8, but that should not be dependent on an internal storage
detail of the string. Likewise, case folding behaviour is dependent on the
UTF8 internal flag being on or off.
d539 2
a540 37
=head2 Properly Unicode safe tokeniser and pads.

The tokeniser isn't actually very UTF-8 clean. C<use utf8;> is a hack -
variable names are stored in stashes as raw bytes, without the utf-8 flag
set. The pad API only takes a C<char *> pointer, so that's all bytes too. The
tokeniser ignores the UTF-8-ness of C<PL_rsfp>, or any SVs returned from
source filters.  All this could be fixed.

=head2 state variable initialization in list context

Currently this is illegal:

    state ($a, $b) = foo(); 

In Perl 6, C<state ($a) = foo();> and C<(state $a) = foo();> have different
semantics, which is tricky to implement in Perl 5 as currently they produce
the same opcode trees. The Perl 6 design is firm, so it would be good to
implement the necessary code in Perl 5. There are comments in
C<Perl_newASSIGNOP()> that show the code paths taken by various assignment
constructions involving state variables.

=head2 Implement $value ~~ 0 .. $range

It would be nice to extend the syntax of the C<~~> operator to also
understand numeric (and maybe alphanumeric) ranges.

=head2 A does() built-in

Like ref(), only useful. It would call the C<DOES> method on objects; it
would also tell whether something can be dereferenced as an
array/hash/etc., or used as a regexp, etc.
L<http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2007-03/msg00481.html>

=head2 Tied filehandles and write() don't mix

There is no method on tied filehandles to allow them to be called back by
formats.
d549 1
a549 1
=head2 Optimize away empty destructors
d551 4
a554 3
Defining an empty DESTROY method might be useful (notably in
AUTOLOAD-enabled classes), but it's still a bit expensive to call. That
could probably be optimized.
d566 6
a571 1
=head2 regexp optimiser optional
d573 2
a574 2
The regexp optimiser is not optional. It should configurable to be, to allow
its performance to be measured, and its bugs to be easily demonstrated.
d576 1
a576 1
=head2 delete &function
d578 2
a579 2
Allow to delete functions. One can already undef them, but they're still
in the stash.
d581 1
a581 1
=head2 C</w> regex modifier
d583 2
a584 2
That flag would enable to match whole words, and also to interpolate
arrays as alternations. With it, C</P/w> would be roughly equivalent to:
d586 1
a586 1
    do { local $"='|'; /\b(?:P)\b/ }
d588 4
a591 2
See L<http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2007-01/msg00400.html>
for the discussion.
d619 1
a619 1
=head2 Self-ties
d621 3
a623 3
Self-ties are currently illegal because they caused too many segfaults. Maybe
the causes of these could be tracked down and self-ties on all types
reinstated.
d629 10
a638 1
=head2 The yada yada yada operators
a639 1
Perl 6's Synopsis 3 says:
a640 46
I<The ... operator is the "yada, yada, yada" list operator, which is used as
the body in function prototypes. It complains bitterly (by calling fail)
if it is ever executed. Variant ??? calls warn, and !!! calls die.>

Those would be nice to add to Perl 5. That could be done without new ops.

=head2 Virtualize operating system access

Implement a set of "vtables" that virtualizes operating system access
(open(), mkdir(), unlink(), readdir(), getenv(), etc.)  At the very
least these interfaces should take SVs as "name" arguments instead of
bare char pointers; probably the most flexible and extensible way
would be for the Perl-facing interfaces to accept HVs.  The system
needs to be per-operating-system and per-file-system
hookable/filterable, preferably both from XS and Perl level
(L<perlport/"Files and Filesystems"> is good reading at this point,
in fact, all of L<perlport> is.)

This has actually already been implemented (but only for Win32),
take a look at F<iperlsys.h> and F<win32/perlhost.h>.  While all Win32
variants go through a set of "vtables" for operating system access,
non-Win32 systems currently go straight for the POSIX/UNIX-style
system/library call.  Similar system as for Win32 should be
implemented for all platforms.  The existing Win32 implementation
probably does not need to survive alongside this proposed new
implementation, the approaches could be merged.

What would this give us?  One often-asked-for feature this would
enable is using Unicode for filenames, and other "names" like %ENV,
usernames, hostnames, and so forth.
(See L<perlunicode/"When Unicode Does Not Happen">.)

But this kind of virtualization would also allow for things like
virtual filesystems, virtual networks, and "sandboxes" (though as long
as dynamic loading of random object code is allowed, not very safe
sandboxes since external code of course know not of Perl's vtables).
An example of a smaller "sandbox" is that this feature can be used to
implement per-thread working directories: Win32 already does this.

See also L</"Extend PerlIO and PerlIO::Scalar">.

=head2 Investigate PADTMP hash pessimisation

The peephole optimier converts constants used for hash key lookups to shared
hash key scalars. Under ithreads, something is undoing this work. See
See http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2007-09/msg00793.html
d645 1
a645 1
of 5.12"
a653 4
One bit would be to write the missing code in sv.c:Perl_dirp_dup.

Fix Perl_sv_dup, et al so that threads can return objects.

a667 6

=head2 Add class set operations to regexp engine

Apparently these are quite useful. Anyway, Jeffery Friedl wants them.

demerphq has this on his todo list, but right at the bottom.  
@


1.1.1.10
log
@import perl 5.10.1
@
text
@d7 4
a10 8
This is a list of wishes for Perl. The most up to date version of this file
is at http://perl5.git.perl.org/perl.git/blob_plain/HEAD:/pod/perltodo.pod

The tasks we think are smaller or easier are listed first. Anyone is welcome
to work on any of these, but it's a good idea to first contact
I<perl5-porters@@perl.org> to avoid duplication of effort, and to learn from
any previous attempts. By all means contact a pumpking privately first if you
prefer.
a24 4
=head2 Remove macperl references from tests

MacPerl is gone. The tests don't need to be there.

d32 15
d59 23
a81 1
=head2 Make ExtUtils::ParseXS use strict;
d83 3
a85 1
F<lib/ExtUtils/ParseXS.pm> contains this line
d87 5
a91 1
    # use strict;  # One of these days...
d93 1
a93 1
Simply uncomment it, and fix all the resulting issues :-)
d95 1
a95 3
The more practical approach, to break the task down into manageable chunks, is
to work your way though the code from bottom to top, or if necessary adding
extra C<{ ... }> blocks, and turning on strict within them.
d97 1
a97 1
=head2 Parallel testing
d99 1
a99 2
(This probably impacts much more than the core: also the Test::Harness
and TAP::* modules on CPAN.)
d101 1
a101 6
All of the tests in F<t/> can now be run in parallel, if C<$ENV{TEST_JOBS}>
is set. However, tests within each directory in F<ext> and F<lib> are still
run in series, with directories run in parallel. This is an adequate
heuristic, but it might be possible to relax it further, and get more
throughput. Specifically, it would be good to audit all of F<lib/*.t>, and
make them use C<File::Temp>.
d119 22
d165 1
a165 1
=head2 Bundle dual life modules in ext/
d167 2
a168 3
For maintenance (and branch merging) reasons, it would be useful to move
some architecture-independent dual-life modules from lib/ to ext/, if this
has no negative impact on the build of perl itself.
a206 7
=head2 profile installman

The F<installman> script is slow. All it is doing text processing, which we're
told is something Perl is good at. So it would be nice to know what it is doing
that is taking so much CPU, and where possible address it.


a362 71
=head2 Split "linker" from "compiler"

Right now, Configure probes for two commands, and sets two variables:

=over 4

=item * C<cc> (in F<cc.U>)

This variable holds the name of a command to execute a C compiler which
can resolve multiple global references that happen to have the same
name.  Usual values are F<cc> and F<gcc>.
Fervent ANSI compilers may be called F<c89>.  AIX has F<xlc>.

=item * C<ld> (in F<dlsrc.U>)

This variable indicates the program to be used to link
libraries for dynamic loading.  On some systems, it is F<ld>.
On ELF systems, it should be C<$cc>.  Mostly, we'll try to respect
the hint file setting.

=back

There is an implicit historical assumption from around Perl5.000alpha
something, that C<$cc> is also the correct command for linking object files
together to make an executable. This may be true on Unix, but it's not true
on other platforms, and there are a maze of work arounds in other places (such
as F<Makefile.SH>) to cope with this.

Ideally, we should create a new variable to hold the name of the executable
linker program, probe for it in F<Configure>, and centralise all the special
case logic there or in hints files.

A small bikeshed issue remains - what to call it, given that C<$ld> is already
taken (arguably for the wrong thing now, but on SunOS 4.1 it is the command
for creating dynamically-loadable modules) and C<$link> could be confused with
the Unix command line executable of the same name, which does something
completely different. Andy Dougherty makes the counter argument "In parrot, I
tried to call the command used to link object files and  libraries into an
executable F<link>, since that's what my vaguely-remembered DOS and VMS
experience suggested. I don't think any real confusion has ensued, so it's
probably a reasonable name for perl5 to use."

"Alas, I've always worried that introducing it would make things worse, 
since now the module building utilities would have to look for 
C<$Config{link}> and institute a fall-back plan if it weren't found."
Although I can see that as confusing, given that C<$Config{d_link}> is true
when (hard) links are available.

=head2 Configure Windows using PowerShell

Currently, Windows uses hard-coded config files based to build the
config.h for compiling Perl.  Makefiles are also hard-coded and need to be 
hand edited prior to building Perl. While this makes it easy to create a perl.exe 
that works across multiple Windows versions, being able to accurately
configure a perl.exe for a specific Windows versions and VS C++ would be
a nice enhancement.  With PowerShell available on Windows XP and up, this 
may now be possible.  Step 1 might be to investigate whether this is possible
and use this to clean up our current makefile situation.  Step 2 would be to 
see if there would be a way to use our existing metaconfig units to configure a
Windows Perl or whether we go in a separate direction and make it so.  Of 
course, we all know what step 3 is.

=head2 decouple -g and -DDEBUGGING

Currently F<Configure> automatically adds C<-DDEBUGGING> to the C compiler
flags if it spots C<-g> in the optimiser flags. The pre-processor directive
C<DEBUGGING> enables F<perl>'s command line <-D> options, but in the process
makes F<perl> slower. It would be good to disentangle this logic, so that
C-level debugging with C<-g> and Perl level debugging with C<-D> can easily
be enabled independently.

d368 1
a368 15
=head2 Weed out needless PERL_UNUSED_ARG

The C code uses the macro C<PERL_UNUSED_ARG> to stop compilers warning about
unused arguments. Often the arguments can't be removed, as there is an
external constraint that determines the prototype of the function, so this
approach is valid. However, there are some cases where C<PERL_UNUSED_ARG>
could be removed. Specifically

=over 4

=item *

The prototypes of (nearly all) static functions can be changed

=item *
d370 2
a371 4
Unused arguments generated by short cut macros are wasteful - the short cut
macro used can be changed.

=back
d389 22
a428 2
One piece of Perl code that might make a good testbed is F<installman>.

a470 25
=head2 Fix POSIX::access() and chdir() on Win32

These functions currently take no account of DACLs and therefore do not behave
correctly in situations where access is restricted by DACLs (as opposed to the
read-only attribute).

Furthermore, POSIX::access() behaves differently for directories having the
read-only attribute set depending on what CRT library is being used. For
example, the _access() function in the VC6 and VC7 CRTs (wrongly) claim that
such directories are not writable, whereas in fact all directories are writable
unless access is denied by DACLs. (In the case of directories, the read-only
attribute actually only means that the directory cannot be deleted.) This CRT
bug is fixed in the VC8 and VC9 CRTs (but, of course, the directory may still
not actually be writable if access is indeed denied by DACLs).

For the chdir() issue, see ActiveState bug #74552:
http://bugs.activestate.com/show_bug.cgi?id=74552

Therefore, DACLs should be checked both for consistency across CRTs and for
the correct answer.

(Note that perl's -w operator should not be modified to check DACLs. It has
been written so that it reflects the state of the read-only attribute, even
for directories (whatever CRT is being used), for symmetry with chmod().)

a490 20
=head2 Arenas for GPs? For MAGIC?

C<struct gp> and C<struct magic> are both currently allocated by C<malloc>.
It might be a speed or memory saving to change to using arenas. Or it might
not. It would need some suitable benchmarking first. In particular, C<GP>s
can probably be changed with minimal compatibility impact (probably nothing
outside of the core, or even outside of F<gv.c> allocates them), but they
probably aren't allocated/deallocated often enough for a speed saving. Whereas
C<MAGIC> is allocated/deallocated more often, but in turn, is also something
more externally visible, so changing the rules here may bite external code.

=head2 Shared arenas

Several SV body structs are now the same size, notably PVMG and PVGV, PVAV and
PVHV, and PVCV and PVFM. It should be possible to allocate and return same
sized bodies from the same actual arena, rather than maintaining one arena for
each. This could save 4-6K per thread, of memory no longer tied up in the
not-yet-allocated part of an arena.


a496 96
=head2 Remove the use of SVs as temporaries in dump.c

F<dump.c> contains debugging routines to dump out the contains of perl data
structures, such as C<SV>s, C<AV>s and C<HV>s. Currently, the dumping code
B<uses> C<SV>s for its temporary buffers, which was a logical initial
implementation choice, as they provide ready made memory handling.

However, they also lead to a lot of confusion when it happens that what you're
trying to debug is seen by the code in F<dump.c>, correctly or incorrectly, as
a temporary scalar it can use for a temporary buffer. It's also not possible
to dump scalars before the interpreter is properly set up, such as during
ithreads cloning. It would be good to progressively replace the use of scalars
as string accumulation buffers with something much simpler, directly allocated
by C<malloc>. The F<dump.c> code is (or should be) only producing 7 bit
US-ASCII, so output character sets are not an issue.

Producing and proving an internal simple buffer allocation would make it easier
to re-write the internals of the PerlIO subsystem to avoid using C<SV>s for
B<its> buffers, use of which can cause problems similar to those of F<dump.c>,
at similar times.

=head2 safely supporting POSIX SA_SIGINFO

Some years ago Jarkko supplied patches to provide support for the POSIX
SA_SIGINFO feature in Perl, passing the extra data to the Perl signal handler.

Unfortunately, it only works with "unsafe" signals, because under safe
signals, by the time Perl gets to run the signal handler, the extra
information has been lost. Moreover, it's not easy to store it somewhere,
as you can't call mutexs, or do anything else fancy, from inside a signal
handler.

So it strikes me that we could provide safe SA_SIGINFO support

=over 4

=item 1

Provide global variables for two file descriptors

=item 2

When the first request is made via C<sigaction> for C<SA_SIGINFO>, create a
pipe, store the reader in one, the writer in the other

=item 3

In the "safe" signal handler (C<Perl_csighandler()>/C<S_raise_signal()>), if
the C<siginfo_t> pointer non-C<NULL>, and the writer file handle is open,

=over 8

=item 1

serialise signal number, C<struct siginfo_t> (or at least the parts we care
about) into a small auto char buff

=item 2

C<write()> that (non-blocking) to the writer fd

=over 12

=item 1

if it writes 100%, flag the signal in a counter of "signals on the pipe" akin
to the current per-signal-number counts

=item 2

if it writes 0%, assume the pipe is full. Flag the data as lost?

=item 3

if it writes partially, croak a panic, as your OS is broken.

=back

=back

=item 4

in the regular C<PERL_ASYNC_CHECK()> processing, if there are "signals on
the pipe", read the data out, deserialise, build the Perl structures on
the stack (code in C<Perl_sighandler()>, the "unsafe" handler), and call as
usual.

=back

I think that this gets us decent C<SA_SIGINFO> support, without the current risk
of running Perl code inside the signal handler context. (With all the dangers
of things like C<malloc> corruption that that currently offers us)

For more information see the thread starting with this message:
http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2008-03/msg00305.html

d613 7
a669 53
=head2 forbid labels with keyword names

Currently C<goto keyword> "computes" the label value:

    $ perl -e 'goto print'
    Can't find label 1 at -e line 1.

It would be nice to forbid labels with keyword names, to avoid confusion.

=head2 truncate() prototype

The prototype of truncate() is currently C<$$>. It should probably
be C<*$> instead. (This is changed in F<opcode.pl>)

=head2 decapsulation of smart match argument

Currently C<$foo ~~ $object> will die with the message "Smart matching a
non-overloaded object breaks encapsulation". It would be nice to allow
to bypass this by using explictly the syntax C<$foo ~~ %$object> or
C<$foo ~~ @@$object>.

=head2 error reporting of [$a ; $b]

Using C<;> inside brackets is a syntax error, and we don't propose to change
that by giving it any meaning. However, it's not reported very helpfully:

    $ perl -e '$a = [$b; $c];'
    syntax error at -e line 1, near "$b;"
    syntax error at -e line 1, near "$c]"
    Execution of -e aborted due to compilation errors.

It should be possible to hook into the tokeniser or the lexer, so that when a
C<;> is parsed where it is not legal as a statement terminator (ie inside
C<{}> used as a hashref, C<[]> or C<()>) it issues an error something like
I<';' isn't legal inside an expression - if you need multiple statements use a
do {...} block>. See the thread starting at
http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2008-09/msg00573.html

=head2 lexicals used only once

This warns:

    $ perl -we '$pie = 42'
    Name "main::pie" used only once: possible typo at -e line 1.

This does not:

    $ perl -we 'my $pie = 42'

Logically all lexicals used only once should warn, if the user asks for
warnings.  An unworked RT ticket (#5087) has been open for almost seven
years for this discrepancy.

a715 9
=head2 Propagate compilation hints to the debugger

Currently a debugger started with -dE on the command-line doesn't see the
features enabled by -E. More generally hints (C<$^H> and C<%^H>) aren't
propagated to the debugger. Probably it would be a good thing to propagate
hints from the innermost non-C<DB::> scope: this would make code eval'ed
in the debugger see the features (and strictures, etc.) currently in
scope.

d723 6
d734 5
d842 2
a843 2
The peephole optimiser converts constants used for hash key lookups to shared
hash key scalars. Under ithreads, something is undoing this work.
a845 116
=head2 Store the current pad in the OP slab allocator

=for clarification
I hope that I got that "current pad" part correct

Currently we leak ops in various cases of parse failure. I suggested that we
could solve this by always using the op slab allocator, and walking it to
free ops. Dave comments that as some ops are already freed during optree
creation one would have to mark which ops are freed, and not double free them
when walking the slab. He notes that one problem with this is that for some ops
you have to know which pad was current at the time of allocation, which does
change. I suggested storing a pointer to the current pad in the memory allocated
for the slab, and swapping to a new slab each time the pad changes. Dave thinks
that this would work.

=head2 repack the optree

Repacking the optree after execution order is determined could allow
removal of NULL ops, and optimal ordering of OPs with respect to cache-line
filling.  The slab allocator could be reused for this purpose.  I think that
the best way to do this is to make it an optional step just before the
completed optree is attached to anything else, and to use the slab allocator
unchanged, so that freeing ops is identical whether or not this step runs.
Note that the slab allocator allocates ops downwards in memory, so one would
have to actually "allocate" the ops in reverse-execution order to get them
contiguous in memory in execution order.

See http://www.nntp.perl.org/group/perl.perl5.porters/2007/12/msg131975.html

Note that running this copy, and then freeing all the old location ops would
cause their slabs to be freed, which would eliminate possible memory wastage if
the previous suggestion is implemented, and we swap slabs more frequently.

=head2 eliminate incorrect line numbers in warnings

This code

    use warnings;
    my $undef;
    
    if ($undef == 3) {
    } elsif ($undef == 0) {
    }

used to produce this output:

    Use of uninitialized value in numeric eq (==) at wrong.pl line 4.
    Use of uninitialized value in numeric eq (==) at wrong.pl line 4.

where the line of the second warning was misreported - it should be line 5.
Rafael fixed this - the problem arose because there was no nextstate OP
between the execution of the C<if> and the C<elsif>, hence C<PL_curcop> still
reports that the currently executing line is line 4. The solution was to inject
a nextstate OPs for each C<elsif>, although it turned out that the nextstate
OP needed to be a nulled OP, rather than a live nextstate OP, else other line
numbers became misreported. (Jenga!)

The problem is more general than C<elsif> (although the C<elsif> case is the
most common and the most confusing). Ideally this code

    use warnings;
    my $undef;
    
    my $a = $undef + 1;
    my $b
      = $undef
      + 1;

would produce this output

    Use of uninitialized value $undef in addition (+) at wrong.pl line 4.
    Use of uninitialized value $undef in addition (+) at wrong.pl line 7.

(rather than lines 4 and 5), but this would seem to require every OP to carry
(at least) line number information.

What might work is to have an optional line number in memory just before the
BASEOP structure, with a flag bit in the op to say whether it's present.
Initially during compile every OP would carry its line number. Then add a late
pass to the optimiser (potentially combined with L</repack the optree>) which
looks at the two ops on every edge of the graph of the execution path. If
the line number changes, flags the destination OP with this information.
Once all paths are traced, replace every op with the flag with a
nextstate-light op (that just updates C<PL_curcop>), which in turn then passes
control on to the true op. All ops would then be replaced by variants that
do not store the line number. (Which, logically, why it would work best in
conjunction with L</repack the optree>, as that is already copying/reallocating
all the OPs)

(Although I should note that we're not certain that doing this for the general
case is worth it)

=head2 optimize tail-calls

Tail-calls present an opportunity for broadly applicable optimization;
anywhere that C<< return foo(...) >> is called, the outer return can
be replaced by a goto, and foo will return directly to the outer
caller, saving (conservatively) 25% of perl's call&return cost, which
is relatively higher than in C.  The scheme language is known to do
this heavily.  B::Concise provides good insight into where this
optimization is possible, ie anywhere entersub,leavesub op-sequence
occurs.

 perl -MO=Concise,-exec,a,b,-main -e 'sub a{ 1 }; sub b {a()}; b(2)'

Bottom line on this is probably a new pp_tailcall function which
combines the code in pp_entersub, pp_leavesub.  This should probably
be done 1st in XS, and using B::Generate to patch the new OP into the
optrees.

=head2 C<\N>

It should be possible to add a C<\N> regex assertion, meaning "every
character except C<\n>° independently of the context. That would
of course imply that C<\N> couldn't be followed by an opening C<{>.

a881 21


=head1 Tasks for microperl


[ Each and every one of these may be obsolete, but they were listed
  in the old Todo.micro file]


=head2 make creating uconfig.sh automatic 

=head2 make creating Makefile.micro automatic

=head2 do away with fork/exec/wait?

(system, popen should be enough?)

=head2 some of the uconfig.sh really needs to be probed (using cc) in buildtime:

(uConfigure? :-) native datatype widths and endianness come to mind

@


1.1.1.11
log
@Perl 5.12.2 from CPAN
@
text
@d29 1
a29 1
=head2 Improve Porting/cmpVERSION.pl to work from git tags
d31 1
a31 50
See F<Porting/release_managers_guide.pod> for a bit more detail.

=head2 Migrate t/ from custom TAP generation

Many tests below F<t/> still generate TAP by "hand", rather than using library
functions. As explained in L<perlhack/Writing a test>, tests in F<t/> are
written in a particular way to test that more complex constructions actually
work before using them routinely. Hence they don't use C<Test::More>, but
instead there is an intentionally simpler library, F<t/test.pl>. However,
quite a few tests in F<t/> have not been refactored to use it. Refactoring
any of these tests, one at a time, is a useful thing TODO.

The subdirectories F<base>, F<cmd> and F<comp>, that contain the most
basic tests, should be excluded from this task.

=head2 Test that regen.pl was run

There are various generated files shipped with the perl distribution, for
things like header files generate from data. The generation scripts are
written in perl, and all can be run by F<regen.pl>. However, because they're
written in perl, we can't run them before we've built perl. We can't run them
as part of the F<Makefile>, because changing files underneath F<make> confuses
it completely, and we don't want to run them automatically anyway, as they
change files shipped by the distribution, something we seek not do to.

If someone changes the data, but forgets to re-run F<regen.pl> then the
generated files are out of sync. It would be good to have a test in
F<t/porting> that checks that the generated files are in sync, and fails
otherwise, to alert someone before they make a poor commit. I suspect that this
would require adapting the scripts run from F<regen.pl> to have dry-run
options, and invoking them with these, or by refactoring them into a library
that does the generation, which can be called by the scripts, and by the test.

=head2 Automate perldelta generation

The perldelta file accompanying each release summaries the major changes.
It's mostly manually generated currently, but some of that could be
automated with a bit of perl, specifically the generation of

=over

=item Modules and Pragmata

=item New Documentation

=item New Tests

=back

See F<Porting/how_to_write_a_perldelta.pod> for details.
d64 12
d85 1
a85 1
Use Devel::Cover to ascertain the core modules' test coverage, then add
d116 1
a116 1
=head2 Move dual-life pod/*.PL into ext
d118 3
a120 5
Nearly all the dual-life modules have been moved to F<ext>. However, we
still  need to move F<pod/*.PL> into their respective directories
in F<ext/>. They're referenced by (at least) C<plextract> in F<Makefile.SH>
and C<utils> in F<win32/Makefile> and F<win32/makefile.ml>, and listed
explicitly in F<win32/pod.mak>, F<vms/descrip_mms.template> and F<utils.lst>
a164 5
=head2 enable lexical enabling/disabling of inidvidual warnings

Currently, warnings can only be enabled or disabled by category. There
are times when it would be useful to quash a single warning, not a
whole category.
d388 1
a388 1
C<DEBUGGING> enables F<perl>'s command line C<-D> options, but in the process
a567 74
=head2 Write an XS cookbook

Create pod/perlxscookbook.pod with short, task-focused 'recipes' in XS that
demonstrate common tasks and good practices.  (Some of these might be
extracted from perlguts.) The target audience should be XS novices, who need
more examples than perlguts but something less overwhelming than perlapi.
Recipes should provide "one pretty good way to do it" instead of TIMTOWTDI.

Rather than focusing on interfacing Perl to C libraries, such a cookbook
should probably focus on how to optimize Perl routines by re-writing them
in XS.  This will likely be more motivating to those who mostly work in
Perl but are looking to take the next step into XS.

Deconstructing and explaining some simpler XS modules could be one way to
bootstrap a cookbook.  (List::Util? Class::XSAccessor? Tree::Ternary_XS?)
Another option could be deconstructing the implementation of some simpler
functions in op.c.

=head2 Allow XSUBs to inline themselves as OPs

For a simple XSUB, often the subroutine dispatch takes more time than the
XSUB itself. The tokeniser already has the ability to inline constant
subroutines - it would be good to provide a way to inline other subroutines.

Specifically, simplest approach looks to be to allow an XSUB to provide an
alternative implementation of itself as a custom OP. A new flag bit in
C<CvFLAGS()> would signal to the peephole optimiser to take an optree
such as this:

    b  <@@> leave[1 ref] vKP/REFC ->(end)
    1     <0> enter ->2
    2     <;> nextstate(main 1 -e:1) v:{ ->3
    a     <2> sassign vKS/2 ->b
    8        <1> entersub[t2] sKS/TARG,1 ->9
    -           <1> ex-list sK ->8
    3              <0> pushmark s ->4
    4              <$> const(IV 1) sM ->5
    6              <1> rv2av[t1] lKM/1 ->7
    5                 <$> gv(*a) s ->6
    -              <1> ex-rv2cv sK ->-
    7                 <$> gv(*x) s/EARLYCV ->8
    -        <1> ex-rv2sv sKRM*/1 ->a
    9           <$> gvsv(*b) s ->a

perform the symbol table lookup of C<rv2cv> and C<gv(*x)>, locate the
pointer to the custom OP that provides the direct implementation, and re-
write the optree something like:

    b  <@@> leave[1 ref] vKP/REFC ->(end)
    1     <0> enter ->2
    2     <;> nextstate(main 1 -e:1) v:{ ->3
    a     <2> sassign vKS/2 ->b
    7        <1> custom_x -> 8
    -           <1> ex-list sK ->7
    3              <0> pushmark s ->4
    4              <$> const(IV 1) sM ->5
    6              <1> rv2av[t1] lKM/1 ->7
    5                 <$> gv(*a) s ->6
    -              <1> ex-rv2cv sK ->-
    -                 <$> ex-gv(*x) s/EARLYCV ->7
    -        <1> ex-rv2sv sKRM*/1 ->a
    8           <$> gvsv(*b) s ->a

I<i.e.> the C<gv(*)> OP has been nulled and spliced out of the execution
path, and the C<entersub> OP has been replaced by the custom op.

This approach should provide a measurable speed up to simple XSUBs inside
tight loops. Initially one would have to write the OP alternative
implementation by hand, but it's likely that this should be reasonably
straightforward for the type of XSUB that would benefit the most. Longer
term, once the run-time implementation is proven, it should be possible to
progressively update ExtUtils::ParseXS to generate OP implementations for
some XSUBs.

d706 6
d780 19
d837 1
a837 3
It is controversial if the right way to avoid the confusion is to forbid
labels with keyword names, or if it would be better to always treat
bareword expressions after a "goto" as a label and never as a keyword.
d888 2
a889 1
detail of the string.
d955 5
d1006 10
d1031 1
a1031 1
non-Win32 systems currently go straight for the POSIX/Unix-style
d1166 6
@


1.1.1.12
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d7 1296
a1302 4
We no longer install the Perl 5 to-do list as a manpage, as installing
snapshot that becomes increasingly out of date isn't that useful to anyone.
The current Perl 5 to-do list is maintained in the git repository, and can
be viewed at L<http://perl5.git.perl.org/perl.git/blob/HEAD:/Porting/todo.pod>
@


1.1.1.13
log
@Import perl-5.20.1
@
text
@d3 1
a3 1
perltodo - Link to the Perl to-do list
d7 3
a9 1
The Perl 5 to-do list is maintained in the git repository, and can
a10 3

(The to-do list used to be here in perltodo. That has stopped, as installing a
snapshot that becomes increasingly out of date isn't that useful to anyone.)
@


