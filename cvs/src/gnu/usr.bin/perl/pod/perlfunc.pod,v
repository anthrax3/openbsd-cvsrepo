head	1.21;
access;
symbols
	OPENBSD_6_2_BASE:1.21
	PERL_5_24_2:1.1.1.18
	OPENBSD_6_1:1.21.0.4
	OPENBSD_6_1_BASE:1.21
	OPENBSD_6_0:1.20.0.4
	OPENBSD_6_0_BASE:1.20
	OPENBSD_5_9:1.19.0.2
	OPENBSD_5_9_BASE:1.19
	OPENBSD_5_8:1.19.0.4
	OPENBSD_5_8_BASE:1.19
	PERL_5_20_2:1.1.1.17
	OPENBSD_5_7:1.18.0.2
	OPENBSD_5_7_BASE:1.18
	PERL_5_20_1:1.1.1.16
	OPENBSD_5_6:1.17.0.4
	OPENBSD_5_6_BASE:1.17
	PERL_5_18_2:1.1.1.15
	PERL:1.1.1
	OPENBSD_5_5:1.16.0.6
	OPENBSD_5_5_BASE:1.16
	OPENBSD_5_4:1.16.0.2
	OPENBSD_5_4_BASE:1.16
	PERL_5_16_3:1.1.1.14
	OPENBSD_5_3:1.15.0.10
	OPENBSD_5_3_BASE:1.15
	OPENBSD_5_2:1.15.0.8
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.15
	OPENBSD_5_1:1.15.0.6
	OPENBSD_5_0:1.15.0.4
	OPENBSD_5_0_BASE:1.15
	OPENBSD_4_9:1.15.0.2
	OPENBSD_4_9_BASE:1.15
	PERL_5_12_2:1.1.1.13
	OPENBSD_4_8:1.14.0.4
	OPENBSD_4_8_BASE:1.14
	OPENBSD_4_7:1.14.0.2
	OPENBSD_4_7_BASE:1.14
	PERL_5_10_1:1.1.1.12
	OPENBSD_4_6:1.13.0.6
	OPENBSD_4_6_BASE:1.13
	OPENBSD_4_5:1.13.0.2
	OPENBSD_4_5_BASE:1.13
	PERL_5_10_0:1.1.1.11
	OPENBSD_4_4:1.12.0.10
	OPENBSD_4_4_BASE:1.12
	OPENBSD_4_3:1.12.0.8
	OPENBSD_4_3_BASE:1.12
	OPENBSD_4_2:1.12.0.6
	OPENBSD_4_2_BASE:1.12
	OPENBSD_4_1:1.12.0.4
	OPENBSD_4_1_BASE:1.12
	OPENBSD_4_0:1.12.0.2
	OPENBSD_4_0_BASE:1.12
	PERL_5_8_8:1.1.1.10
	OPENBSD_3_9:1.11.0.6
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.11.0.4
	OPENBSD_3_8_BASE:1.11
	OPENBSD_3_7:1.11.0.2
	OPENBSD_3_7_BASE:1.11
	PERL_5_8_6:1.1.1.9
	OPENBSD_3_6:1.10.0.2
	OPENBSD_3_6_BASE:1.10
	PERL_5_8_5:1.1.1.8
	PERL_5_8_3:1.1.1.7
	OPENBSD_3_5:1.8.0.2
	OPENBSD_3_5_BASE:1.8
	PERL_5_8_2:1.1.1.6
	OPENBSD_3_4:1.7.0.4
	OPENBSD_3_4_BASE:1.7
	OPENBSD_3_3:1.7.0.2
	OPENBSD_3_3_BASE:1.7
	PERL_5_8_0:1.1.1.5
	OPENBSD_3_2:1.5.0.6
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.4
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	PERL_5_6_1:1.1.1.4
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	PERL_5_6_0:1.1.1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	PERL_500503:1.1.1.2
	CPAN:1.1.1
	OPENBSD_2_5:1.2.0.6
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.4
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	perl5003:1.1.1.1
	lwall:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.21
date	2017.02.05.00.32.18;	author afresh1;	state Exp;
branches;
next	1.20;
commitid	cxJ08BvJA9Pt2PTM;

1.20
date	2016.07.03.01.08.03;	author afresh1;	state Exp;
branches;
next	1.19;
commitid	GzHqjSTnBjdF7Wcw;

1.19
date	2015.04.25.19.14.47;	author afresh1;	state Exp;
branches;
next	1.18;
commitid	XRK22kO4se3v2i2I;

1.18
date	2014.11.17.20.57.07;	author afresh1;	state Exp;
branches;
next	1.17;
commitid	QP75iYx42Uo7mMxO;

1.17
date	2014.03.24.15.05.33;	author afresh1;	state Exp;
branches;
next	1.16;

1.16
date	2013.03.25.20.40.58;	author sthen;	state Exp;
branches;
next	1.15;

1.15
date	2010.09.24.15.07.04;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	2009.10.12.18.24.47;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	2008.09.29.17.36.16;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2006.03.28.19.23.10;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2005.01.15.21.30.36;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2004.08.09.18.10.15;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2004.04.07.21.33.08;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2003.12.03.03.02.45;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2002.10.27.22.25.33;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.10.08.18.34.11;	author wcobb;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.24.18.35.55;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.06.17.07.28;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	99.04.29.22.52.12;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.11.30.07.59.14;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.08.19.10.12.59;	author downsj;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.08.19.10.12.59;	author downsj;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.04.29.22.40.46;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2000.04.06.16.10.26;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2001.05.24.18.24.38;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2002.10.27.22.15.05;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2003.12.03.02.44.22;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2004.04.07.21.13.33;	author millert;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2004.08.09.17.48.14;	author millert;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2005.01.15.21.17.54;	author millert;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	2006.03.28.18.49.19;	author millert;	state Exp;
branches;
next	1.1.1.11;

1.1.1.11
date	2008.09.29.17.18.51;	author millert;	state Exp;
branches;
next	1.1.1.12;

1.1.1.12
date	2009.10.12.18.10.39;	author millert;	state Exp;
branches;
next	1.1.1.13;

1.1.1.13
date	2010.09.24.14.49.07;	author millert;	state Exp;
branches;
next	1.1.1.14;

1.1.1.14
date	2013.03.25.20.09.20;	author sthen;	state Exp;
branches;
next	1.1.1.15;

1.1.1.15
date	2014.03.24.14.59.07;	author afresh1;	state Exp;
branches;
next	1.1.1.16;

1.1.1.16
date	2014.11.17.20.53.14;	author afresh1;	state Exp;
branches;
next	1.1.1.17;
commitid	B31cAbBIXiCqnL97;

1.1.1.17
date	2015.04.25.19.10.43;	author afresh1;	state Exp;
branches;
next	1.1.1.18;
commitid	Wpcs5S8qILgEZC7F;

1.1.1.18
date	2017.08.14.13.46.19;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.21
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@=head1 NAME
X<function>

perlfunc - Perl builtin functions

=head1 DESCRIPTION

The functions in this section can serve as terms in an expression.
They fall into two major categories: list operators and named unary
operators.  These differ in their precedence relationship with a
following comma.  (See the precedence table in L<perlop>.)  List
operators take more than one argument, while unary operators can never
take more than one argument.  Thus, a comma terminates the argument of
a unary operator, but merely separates the arguments of a list
operator.  A unary operator generally provides scalar context to its
argument, while a list operator may provide either scalar or list
contexts for its arguments.  If it does both, scalar arguments
come first and list argument follow, and there can only ever
be one such list argument.  For instance,
L<C<splice>|/splice ARRAY,OFFSET,LENGTH,LIST> has three scalar arguments
followed by a list, whereas L<C<gethostbyname>|/gethostbyname NAME> has
four scalar arguments.

In the syntax descriptions that follow, list operators that expect a
list (and provide list context for elements of the list) are shown
with LIST as an argument.  Such a list may consist of any combination
of scalar arguments or list values; the list values will be included
in the list as if each individual element were interpolated at that
point in the list, forming a longer single-dimensional list value.
Commas should separate literal elements of the LIST.

Any function in the list below may be used either with or without
parentheses around its arguments.  (The syntax descriptions omit the
parentheses.)  If you use parentheses, the simple but occasionally
surprising rule is this: It I<looks> like a function, therefore it I<is> a
function, and precedence doesn't matter.  Otherwise it's a list
operator or unary operator, and precedence does matter.  Whitespace
between the function and left parenthesis doesn't count, so sometimes
you need to be careful:

    print 1+2+4;      # Prints 7.
    print(1+2) + 4;   # Prints 3.
    print (1+2)+4;    # Also prints 3!
    print +(1+2)+4;   # Prints 7.
    print ((1+2)+4);  # Prints 7.

If you run Perl with the L<C<use warnings>|warnings> pragma, it can warn
you about this.  For example, the third line above produces:

    print (...) interpreted as function at - line 1.
    Useless use of integer addition in void context at - line 1.

A few functions take no arguments at all, and therefore work as neither
unary nor list operators.  These include such functions as
L<C<time>|/time> and L<C<endpwent>|/endpwent>.  For example,
C<time+86_400> always means C<time() + 86_400>.

For functions that can be used in either a scalar or list context,
nonabortive failure is generally indicated in scalar context by
returning the undefined value, and in list context by returning the
empty list.

Remember the following important rule: There is B<no rule> that relates
the behavior of an expression in list context to its behavior in scalar
context, or vice versa.  It might do two totally different things.
Each operator and function decides which sort of value would be most
appropriate to return in scalar context.  Some operators return the
length of the list that would have been returned in list context.  Some
operators return the first value in the list.  Some operators return the
last value in the list.  Some operators return a count of successful
operations.  In general, they do what you want, unless you want
consistency.
X<context>

A named array in scalar context is quite different from what would at
first glance appear to be a list in scalar context.  You can't get a list
like C<(1,2,3)> into being in scalar context, because the compiler knows
the context at compile time.  It would generate the scalar comma operator
there, not the list concatenation version of the comma.  That means it
was never a list to start with.

In general, functions in Perl that serve as wrappers for system calls
("syscalls") of the same name (like L<chown(2)>, L<fork(2)>,
L<closedir(2)>, etc.) return true when they succeed and
L<C<undef>|/undef EXPR> otherwise, as is usually mentioned in the
descriptions below.  This is different from the C interfaces, which
return C<-1> on failure.  Exceptions to this rule include
L<C<wait>|/wait>, L<C<waitpid>|/waitpid PID,FLAGS>, and
L<C<syscall>|/syscall NUMBER, LIST>.  System calls also set the special
L<C<$!>|perlvar/$!> variable on failure.  Other functions do not, except
accidentally.

Extension modules can also hook into the Perl parser to define new
kinds of keyword-headed expression.  These may look like functions, but
may also look completely different.  The syntax following the keyword
is defined entirely by the extension.  If you are an implementor, see
L<perlapi/PL_keyword_plugin> for the mechanism.  If you are using such
a module, see the module's documentation for details of the syntax that
it defines.

=head2 Perl Functions by Category
X<function>

Here are Perl's functions (including things that look like
functions, like some keywords and named operators)
arranged by category.  Some functions appear in more
than one place.

=over 4

=item Functions for SCALARs or strings
X<scalar> X<string> X<character>

=for Pod::Functions =String

L<C<chomp>|/chomp VARIABLE>, L<C<chop>|/chop VARIABLE>,
L<C<chr>|/chr NUMBER>, L<C<crypt>|/crypt PLAINTEXT,SALT>,
L<C<fc>|/fc EXPR>, L<C<hex>|/hex EXPR>,
L<C<index>|/index STR,SUBSTR,POSITION>, L<C<lc>|/lc EXPR>,
L<C<lcfirst>|/lcfirst EXPR>, L<C<length>|/length EXPR>,
L<C<oct>|/oct EXPR>, L<C<ord>|/ord EXPR>,
L<C<pack>|/pack TEMPLATE,LIST>,
L<C<qE<sol>E<sol>>|/qE<sol>STRINGE<sol>>,
L<C<qqE<sol>E<sol>>|/qqE<sol>STRINGE<sol>>, L<C<reverse>|/reverse LIST>,
L<C<rindex>|/rindex STR,SUBSTR,POSITION>,
L<C<sprintf>|/sprintf FORMAT, LIST>,
L<C<substr>|/substr EXPR,OFFSET,LENGTH,REPLACEMENT>,
L<C<trE<sol>E<sol>E<sol>>|/trE<sol>E<sol>E<sol>>, L<C<uc>|/uc EXPR>,
L<C<ucfirst>|/ucfirst EXPR>,
L<C<yE<sol>E<sol>E<sol>>|/yE<sol>E<sol>E<sol>>

L<C<fc>|/fc EXPR> is available only if the
L<C<"fc"> feature|feature/The 'fc' feature> is enabled or if it is
prefixed with C<CORE::>.  The
L<C<"fc"> feature|feature/The 'fc' feature> is enabled automatically
with a C<use v5.16> (or higher) declaration in the current scope.

=item Regular expressions and pattern matching
X<regular expression> X<regex> X<regexp>

=for Pod::Functions =Regexp

L<C<mE<sol>E<sol>>|/mE<sol>E<sol>>, L<C<pos>|/pos SCALAR>,
L<C<qrE<sol>E<sol>>|/qrE<sol>STRINGE<sol>>,
L<C<quotemeta>|/quotemeta EXPR>,
L<C<sE<sol>E<sol>E<sol>>|/sE<sol>E<sol>E<sol>>,
L<C<split>|/split E<sol>PATTERNE<sol>,EXPR,LIMIT>,
L<C<study>|/study SCALAR>

=item Numeric functions
X<numeric> X<number> X<trigonometric> X<trigonometry>

=for Pod::Functions =Math

L<C<abs>|/abs VALUE>, L<C<atan2>|/atan2 Y,X>, L<C<cos>|/cos EXPR>,
L<C<exp>|/exp EXPR>, L<C<hex>|/hex EXPR>, L<C<int>|/int EXPR>,
L<C<log>|/log EXPR>, L<C<oct>|/oct EXPR>, L<C<rand>|/rand EXPR>,
L<C<sin>|/sin EXPR>, L<C<sqrt>|/sqrt EXPR>, L<C<srand>|/srand EXPR>

=item Functions for real @@ARRAYs
X<array>

=for Pod::Functions =ARRAY

L<C<each>|/each HASH>, L<C<keys>|/keys HASH>, L<C<pop>|/pop ARRAY>,
L<C<push>|/push ARRAY,LIST>, L<C<shift>|/shift ARRAY>,
L<C<splice>|/splice ARRAY,OFFSET,LENGTH,LIST>,
L<C<unshift>|/unshift ARRAY,LIST>, L<C<values>|/values HASH>

=item Functions for list data
X<list>

=for Pod::Functions =LIST

L<C<grep>|/grep BLOCK LIST>, L<C<join>|/join EXPR,LIST>,
L<C<map>|/map BLOCK LIST>, L<C<qwE<sol>E<sol>>|/qwE<sol>STRINGE<sol>>,
L<C<reverse>|/reverse LIST>, L<C<sort>|/sort SUBNAME LIST>,
L<C<unpack>|/unpack TEMPLATE,EXPR>

=item Functions for real %HASHes
X<hash>

=for Pod::Functions =HASH

L<C<delete>|/delete EXPR>, L<C<each>|/each HASH>,
L<C<exists>|/exists EXPR>, L<C<keys>|/keys HASH>,
L<C<values>|/values HASH>

=item Input and output functions
X<I/O> X<input> X<output> X<dbm>

=for Pod::Functions =I/O

L<C<binmode>|/binmode FILEHANDLE, LAYER>, L<C<close>|/close FILEHANDLE>,
L<C<closedir>|/closedir DIRHANDLE>, L<C<dbmclose>|/dbmclose HASH>,
L<C<dbmopen>|/dbmopen HASH,DBNAME,MASK>, L<C<die>|/die LIST>,
L<C<eof>|/eof FILEHANDLE>, L<C<fileno>|/fileno FILEHANDLE>,
L<C<flock>|/flock FILEHANDLE,OPERATION>, L<C<format>|/format>,
L<C<getc>|/getc FILEHANDLE>, L<C<print>|/print FILEHANDLE LIST>,
L<C<printf>|/printf FILEHANDLE FORMAT, LIST>,
L<C<read>|/read FILEHANDLE,SCALAR,LENGTH,OFFSET>,
L<C<readdir>|/readdir DIRHANDLE>, L<C<readline>|/readline EXPR>
L<C<rewinddir>|/rewinddir DIRHANDLE>, L<C<say>|/say FILEHANDLE LIST>,
L<C<seek>|/seek FILEHANDLE,POSITION,WHENCE>,
L<C<seekdir>|/seekdir DIRHANDLE,POS>,
L<C<select>|/select RBITS,WBITS,EBITS,TIMEOUT>,
L<C<syscall>|/syscall NUMBER, LIST>,
L<C<sysread>|/sysread FILEHANDLE,SCALAR,LENGTH,OFFSET>,
L<C<sysseek>|/sysseek FILEHANDLE,POSITION,WHENCE>,
L<C<syswrite>|/syswrite FILEHANDLE,SCALAR,LENGTH,OFFSET>,
L<C<tell>|/tell FILEHANDLE>, L<C<telldir>|/telldir DIRHANDLE>,
L<C<truncate>|/truncate FILEHANDLE,LENGTH>, L<C<warn>|/warn LIST>,
L<C<write>|/write FILEHANDLE>

L<C<say>|/say FILEHANDLE LIST> is available only if the
L<C<"say"> feature|feature/The 'say' feature> is enabled or if it is
prefixed with C<CORE::>.  The
L<C<"say"> feature|feature/The 'say' feature> is enabled automatically
with a C<use v5.10> (or higher) declaration in the current scope.

=item Functions for fixed-length data or records

=for Pod::Functions =Binary

L<C<pack>|/pack TEMPLATE,LIST>,
L<C<read>|/read FILEHANDLE,SCALAR,LENGTH,OFFSET>,
L<C<syscall>|/syscall NUMBER, LIST>,
L<C<sysread>|/sysread FILEHANDLE,SCALAR,LENGTH,OFFSET>,
L<C<sysseek>|/sysseek FILEHANDLE,POSITION,WHENCE>,
L<C<syswrite>|/syswrite FILEHANDLE,SCALAR,LENGTH,OFFSET>,
L<C<unpack>|/unpack TEMPLATE,EXPR>, L<C<vec>|/vec EXPR,OFFSET,BITS>

=item Functions for filehandles, files, or directories
X<file> X<filehandle> X<directory> X<pipe> X<link> X<symlink>

=for Pod::Functions =File

L<C<-I<X>>|/-X FILEHANDLE>, L<C<chdir>|/chdir EXPR>,
L<C<chmod>|/chmod LIST>, L<C<chown>|/chown LIST>,
L<C<chroot>|/chroot FILENAME>,
L<C<fcntl>|/fcntl FILEHANDLE,FUNCTION,SCALAR>, L<C<glob>|/glob EXPR>,
L<C<ioctl>|/ioctl FILEHANDLE,FUNCTION,SCALAR>,
L<C<link>|/link OLDFILE,NEWFILE>, L<C<lstat>|/lstat FILEHANDLE>,
L<C<mkdir>|/mkdir FILENAME,MASK>, L<C<open>|/open FILEHANDLE,EXPR>,
L<C<opendir>|/opendir DIRHANDLE,EXPR>, L<C<readlink>|/readlink EXPR>,
L<C<rename>|/rename OLDNAME,NEWNAME>, L<C<rmdir>|/rmdir FILENAME>,
L<C<select>|/select FILEHANDLE>, L<C<stat>|/stat FILEHANDLE>,
L<C<symlink>|/symlink OLDFILE,NEWFILE>,
L<C<sysopen>|/sysopen FILEHANDLE,FILENAME,MODE>,
L<C<umask>|/umask EXPR>, L<C<unlink>|/unlink LIST>,
L<C<utime>|/utime LIST>

=item Keywords related to the control flow of your Perl program
X<control flow>

=for Pod::Functions =Flow

L<C<break>|/break>, L<C<caller>|/caller EXPR>,
L<C<continue>|/continue BLOCK>, L<C<die>|/die LIST>, L<C<do>|/do BLOCK>,
L<C<dump>|/dump LABEL>, L<C<eval>|/eval EXPR>,
L<C<evalbytes>|/evalbytes EXPR> L<C<exit>|/exit EXPR>,
L<C<__FILE__>|/__FILE__>, L<C<goto>|/goto LABEL>,
L<C<last>|/last LABEL>, L<C<__LINE__>|/__LINE__>,
L<C<next>|/next LABEL>, L<C<__PACKAGE__>|/__PACKAGE__>,
L<C<redo>|/redo LABEL>, L<C<return>|/return EXPR>,
L<C<sub>|/sub NAME BLOCK>, L<C<__SUB__>|/__SUB__>,
L<C<wantarray>|/wantarray>

L<C<break>|/break> is available only if you enable the experimental
L<C<"switch"> feature|feature/The 'switch' feature> or use the C<CORE::>
prefix.  The L<C<"switch"> feature|feature/The 'switch' feature> also
enables the C<default>, C<given> and C<when> statements, which are
documented in L<perlsyn/"Switch Statements">.
The L<C<"switch"> feature|feature/The 'switch' feature> is enabled
automatically with a C<use v5.10> (or higher) declaration in the current
scope.  In Perl v5.14 and earlier, L<C<continue>|/continue BLOCK>
required the L<C<"switch"> feature|feature/The 'switch' feature>, like
the other keywords.

L<C<evalbytes>|/evalbytes EXPR> is only available with the
L<C<"evalbytes"> feature|feature/The 'unicode_eval' and 'evalbytes' features>
(see L<feature>) or if prefixed with C<CORE::>.  L<C<__SUB__>|/__SUB__>
is only available with the
L<C<"current_sub"> feature|feature/The 'current_sub' feature> or if
prefixed with C<CORE::>.  Both the
L<C<"evalbytes">|feature/The 'unicode_eval' and 'evalbytes' features>
and L<C<"current_sub">|feature/The 'current_sub' feature> features are
enabled automatically with a C<use v5.16> (or higher) declaration in the
current scope.

=item Keywords related to scoping

=for Pod::Functions =Namespace

L<C<caller>|/caller EXPR>, L<C<import>|/import LIST>,
L<C<local>|/local EXPR>, L<C<my>|/my VARLIST>, L<C<our>|/our VARLIST>,
L<C<package>|/package NAMESPACE>, L<C<state>|/state VARLIST>,
L<C<use>|/use Module VERSION LIST>

L<C<state>|/state VARLIST> is available only if the
L<C<"state"> feature|feature/The 'state' feature> is enabled or if it is
prefixed with C<CORE::>.  The
L<C<"state"> feature|feature/The 'state' feature> is enabled
automatically with a C<use v5.10> (or higher) declaration in the current
scope.

=item Miscellaneous functions

=for Pod::Functions =Misc

L<C<defined>|/defined EXPR>, L<C<formline>|/formline PICTURE,LIST>,
L<C<lock>|/lock THING>, L<C<prototype>|/prototype FUNCTION>,
L<C<reset>|/reset EXPR>, L<C<scalar>|/scalar EXPR>,
L<C<undef>|/undef EXPR>

=item Functions for processes and process groups
X<process> X<pid> X<process id>

=for Pod::Functions =Process

L<C<alarm>|/alarm SECONDS>, L<C<exec>|/exec LIST>, L<C<fork>|/fork>,
L<C<getpgrp>|/getpgrp PID>, L<C<getppid>|/getppid>,
L<C<getpriority>|/getpriority WHICH,WHO>, L<C<kill>|/kill SIGNAL, LIST>,
L<C<pipe>|/pipe READHANDLE,WRITEHANDLE>,
L<C<qxE<sol>E<sol>>|/qxE<sol>STRINGE<sol>>,
L<C<readpipe>|/readpipe EXPR>, L<C<setpgrp>|/setpgrp PID,PGRP>,
L<C<setpriority>|/setpriority WHICH,WHO,PRIORITY>,
L<C<sleep>|/sleep EXPR>, L<C<system>|/system LIST>, L<C<times>|/times>,
L<C<wait>|/wait>, L<C<waitpid>|/waitpid PID,FLAGS>

=item Keywords related to Perl modules
X<module>

=for Pod::Functions =Modules

L<C<do>|/do EXPR>, L<C<import>|/import LIST>,
L<C<no>|/no MODULE VERSION LIST>, L<C<package>|/package NAMESPACE>,
L<C<require>|/require VERSION>, L<C<use>|/use Module VERSION LIST>

=item Keywords related to classes and object-orientation
X<object> X<class> X<package>

=for Pod::Functions =Objects

L<C<bless>|/bless REF,CLASSNAME>, L<C<dbmclose>|/dbmclose HASH>,
L<C<dbmopen>|/dbmopen HASH,DBNAME,MASK>,
L<C<package>|/package NAMESPACE>, L<C<ref>|/ref EXPR>,
L<C<tie>|/tie VARIABLE,CLASSNAME,LIST>, L<C<tied>|/tied VARIABLE>,
L<C<untie>|/untie VARIABLE>, L<C<use>|/use Module VERSION LIST>

=item Low-level socket functions
X<socket> X<sock>

=for Pod::Functions =Socket

L<C<accept>|/accept NEWSOCKET,GENERICSOCKET>,
L<C<bind>|/bind SOCKET,NAME>, L<C<connect>|/connect SOCKET,NAME>,
L<C<getpeername>|/getpeername SOCKET>,
L<C<getsockname>|/getsockname SOCKET>,
L<C<getsockopt>|/getsockopt SOCKET,LEVEL,OPTNAME>,
L<C<listen>|/listen SOCKET,QUEUESIZE>,
L<C<recv>|/recv SOCKET,SCALAR,LENGTH,FLAGS>,
L<C<send>|/send SOCKET,MSG,FLAGS,TO>,
L<C<setsockopt>|/setsockopt SOCKET,LEVEL,OPTNAME,OPTVAL>,
L<C<shutdown>|/shutdown SOCKET,HOW>,
L<C<socket>|/socket SOCKET,DOMAIN,TYPE,PROTOCOL>,
L<C<socketpair>|/socketpair SOCKET1,SOCKET2,DOMAIN,TYPE,PROTOCOL>

=item System V interprocess communication functions
X<IPC> X<System V> X<semaphore> X<shared memory> X<memory> X<message>

=for Pod::Functions =SysV

L<C<msgctl>|/msgctl ID,CMD,ARG>, L<C<msgget>|/msgget KEY,FLAGS>,
L<C<msgrcv>|/msgrcv ID,VAR,SIZE,TYPE,FLAGS>,
L<C<msgsnd>|/msgsnd ID,MSG,FLAGS>,
L<C<semctl>|/semctl ID,SEMNUM,CMD,ARG>,
L<C<semget>|/semget KEY,NSEMS,FLAGS>, L<C<semop>|/semop KEY,OPSTRING>,
L<C<shmctl>|/shmctl ID,CMD,ARG>, L<C<shmget>|/shmget KEY,SIZE,FLAGS>,
L<C<shmread>|/shmread ID,VAR,POS,SIZE>,
L<C<shmwrite>|/shmwrite ID,STRING,POS,SIZE>

=item Fetching user and group info
X<user> X<group> X<password> X<uid> X<gid>  X<passwd> X</etc/passwd>

=for Pod::Functions =User

L<C<endgrent>|/endgrent>, L<C<endhostent>|/endhostent>,
L<C<endnetent>|/endnetent>, L<C<endpwent>|/endpwent>,
L<C<getgrent>|/getgrent>, L<C<getgrgid>|/getgrgid GID>,
L<C<getgrnam>|/getgrnam NAME>, L<C<getlogin>|/getlogin>,
L<C<getpwent>|/getpwent>, L<C<getpwnam>|/getpwnam NAME>,
L<C<getpwuid>|/getpwuid UID>, L<C<setgrent>|/setgrent>,
L<C<setpwent>|/setpwent>

=item Fetching network info
X<network> X<protocol> X<host> X<hostname> X<IP> X<address> X<service>

=for Pod::Functions =Network

L<C<endprotoent>|/endprotoent>, L<C<endservent>|/endservent>,
L<C<gethostbyaddr>|/gethostbyaddr ADDR,ADDRTYPE>,
L<C<gethostbyname>|/gethostbyname NAME>, L<C<gethostent>|/gethostent>,
L<C<getnetbyaddr>|/getnetbyaddr ADDR,ADDRTYPE>,
L<C<getnetbyname>|/getnetbyname NAME>, L<C<getnetent>|/getnetent>,
L<C<getprotobyname>|/getprotobyname NAME>,
L<C<getprotobynumber>|/getprotobynumber NUMBER>,
L<C<getprotoent>|/getprotoent>,
L<C<getservbyname>|/getservbyname NAME,PROTO>,
L<C<getservbyport>|/getservbyport PORT,PROTO>,
L<C<getservent>|/getservent>, L<C<sethostent>|/sethostent STAYOPEN>,
L<C<setnetent>|/setnetent STAYOPEN>,
L<C<setprotoent>|/setprotoent STAYOPEN>,
L<C<setservent>|/setservent STAYOPEN>

=item Time-related functions
X<time> X<date>

=for Pod::Functions =Time

L<C<gmtime>|/gmtime EXPR>, L<C<localtime>|/localtime EXPR>,
L<C<time>|/time>, L<C<times>|/times>

=item Non-function keywords

=for Pod::Functions =!Non-functions

C<and>, C<AUTOLOAD>, C<BEGIN>, C<CHECK>, C<cmp>, C<CORE>, C<__DATA__>,
C<default>, C<DESTROY>, C<else>, C<elseif>, C<elsif>, C<END>, C<__END__>,
C<eq>, C<for>, C<foreach>, C<ge>, C<given>, C<gt>, C<if>, C<INIT>, C<le>,
C<lt>, C<ne>, C<not>, C<or>, C<UNITCHECK>, C<unless>, C<until>, C<when>,
C<while>, C<x>, C<xor>

=back

=head2 Portability
X<portability> X<Unix> X<portable>

Perl was born in Unix and can therefore access all common Unix
system calls.  In non-Unix environments, the functionality of some
Unix system calls may not be available or details of the available
functionality may differ slightly.  The Perl functions affected
by this are:

L<C<-I<X>>|/-X FILEHANDLE>, L<C<binmode>|/binmode FILEHANDLE, LAYER>,
L<C<chmod>|/chmod LIST>, L<C<chown>|/chown LIST>,
L<C<chroot>|/chroot FILENAME>, L<C<crypt>|/crypt PLAINTEXT,SALT>,
L<C<dbmclose>|/dbmclose HASH>, L<C<dbmopen>|/dbmopen HASH,DBNAME,MASK>,
L<C<dump>|/dump LABEL>, L<C<endgrent>|/endgrent>,
L<C<endhostent>|/endhostent>, L<C<endnetent>|/endnetent>,
L<C<endprotoent>|/endprotoent>, L<C<endpwent>|/endpwent>,
L<C<endservent>|/endservent>, L<C<exec>|/exec LIST>,
L<C<fcntl>|/fcntl FILEHANDLE,FUNCTION,SCALAR>,
L<C<flock>|/flock FILEHANDLE,OPERATION>, L<C<fork>|/fork>,
L<C<getgrent>|/getgrent>, L<C<getgrgid>|/getgrgid GID>,
L<C<gethostbyname>|/gethostbyname NAME>, L<C<gethostent>|/gethostent>,
L<C<getlogin>|/getlogin>,
L<C<getnetbyaddr>|/getnetbyaddr ADDR,ADDRTYPE>,
L<C<getnetbyname>|/getnetbyname NAME>, L<C<getnetent>|/getnetent>,
L<C<getppid>|/getppid>, L<C<getpgrp>|/getpgrp PID>,
L<C<getpriority>|/getpriority WHICH,WHO>,
L<C<getprotobynumber>|/getprotobynumber NUMBER>,
L<C<getprotoent>|/getprotoent>, L<C<getpwent>|/getpwent>,
L<C<getpwnam>|/getpwnam NAME>, L<C<getpwuid>|/getpwuid UID>,
L<C<getservbyport>|/getservbyport PORT,PROTO>,
L<C<getservent>|/getservent>,
L<C<getsockopt>|/getsockopt SOCKET,LEVEL,OPTNAME>,
L<C<glob>|/glob EXPR>, L<C<ioctl>|/ioctl FILEHANDLE,FUNCTION,SCALAR>,
L<C<kill>|/kill SIGNAL, LIST>, L<C<link>|/link OLDFILE,NEWFILE>,
L<C<lstat>|/lstat FILEHANDLE>, L<C<msgctl>|/msgctl ID,CMD,ARG>,
L<C<msgget>|/msgget KEY,FLAGS>,
L<C<msgrcv>|/msgrcv ID,VAR,SIZE,TYPE,FLAGS>,
L<C<msgsnd>|/msgsnd ID,MSG,FLAGS>, L<C<open>|/open FILEHANDLE,EXPR>,
L<C<pipe>|/pipe READHANDLE,WRITEHANDLE>, L<C<readlink>|/readlink EXPR>,
L<C<rename>|/rename OLDNAME,NEWNAME>,
L<C<select>|/select RBITS,WBITS,EBITS,TIMEOUT>,
L<C<semctl>|/semctl ID,SEMNUM,CMD,ARG>,
L<C<semget>|/semget KEY,NSEMS,FLAGS>, L<C<semop>|/semop KEY,OPSTRING>,
L<C<setgrent>|/setgrent>, L<C<sethostent>|/sethostent STAYOPEN>,
L<C<setnetent>|/setnetent STAYOPEN>, L<C<setpgrp>|/setpgrp PID,PGRP>,
L<C<setpriority>|/setpriority WHICH,WHO,PRIORITY>,
L<C<setprotoent>|/setprotoent STAYOPEN>, L<C<setpwent>|/setpwent>,
L<C<setservent>|/setservent STAYOPEN>,
L<C<setsockopt>|/setsockopt SOCKET,LEVEL,OPTNAME,OPTVAL>,
L<C<shmctl>|/shmctl ID,CMD,ARG>, L<C<shmget>|/shmget KEY,SIZE,FLAGS>,
L<C<shmread>|/shmread ID,VAR,POS,SIZE>,
L<C<shmwrite>|/shmwrite ID,STRING,POS,SIZE>,
L<C<socket>|/socket SOCKET,DOMAIN,TYPE,PROTOCOL>,
L<C<socketpair>|/socketpair SOCKET1,SOCKET2,DOMAIN,TYPE,PROTOCOL>,
L<C<stat>|/stat FILEHANDLE>, L<C<symlink>|/symlink OLDFILE,NEWFILE>,
L<C<syscall>|/syscall NUMBER, LIST>,
L<C<sysopen>|/sysopen FILEHANDLE,FILENAME,MODE>,
L<C<system>|/system LIST>, L<C<times>|/times>,
L<C<truncate>|/truncate FILEHANDLE,LENGTH>, L<C<umask>|/umask EXPR>,
L<C<unlink>|/unlink LIST>, L<C<utime>|/utime LIST>, L<C<wait>|/wait>,
L<C<waitpid>|/waitpid PID,FLAGS>

For more information about the portability of these functions, see
L<perlport> and other available platform-specific documentation.

=head2 Alphabetical Listing of Perl Functions

=over

=item -X FILEHANDLE
X<-r>X<-w>X<-x>X<-o>X<-R>X<-W>X<-X>X<-O>X<-e>X<-z>X<-s>X<-f>X<-d>X<-l>X<-p>
X<-S>X<-b>X<-c>X<-t>X<-u>X<-g>X<-k>X<-T>X<-B>X<-M>X<-A>X<-C>

=item -X EXPR

=item -X DIRHANDLE

=item -X

=for Pod::Functions a file test (-r, -x, etc)

A file test, where X is one of the letters listed below.  This unary
operator takes one argument, either a filename, a filehandle, or a dirhandle,
and tests the associated file to see if something is true about it.  If the
argument is omitted, tests L<C<$_>|perlvar/$_>, except for C<-t>, which
tests STDIN.  Unless otherwise documented, it returns C<1> for true and
C<''> for false.  If the file doesn't exist or can't be examined, it
returns L<C<undef>|/undef EXPR> and sets L<C<$!>|perlvar/$!> (errno).
Despite the funny names, precedence is the same as any other named unary
operator.  The operator may be any of:

    -r  File is readable by effective uid/gid.
    -w  File is writable by effective uid/gid.
    -x  File is executable by effective uid/gid.
    -o  File is owned by effective uid.

    -R  File is readable by real uid/gid.
    -W  File is writable by real uid/gid.
    -X  File is executable by real uid/gid.
    -O  File is owned by real uid.

    -e  File exists.
    -z  File has zero size (is empty).
    -s  File has nonzero size (returns size in bytes).

    -f  File is a plain file.
    -d  File is a directory.
    -l  File is a symbolic link (false if symlinks aren't
        supported by the file system).
    -p  File is a named pipe (FIFO), or Filehandle is a pipe.
    -S  File is a socket.
    -b  File is a block special file.
    -c  File is a character special file.
    -t  Filehandle is opened to a tty.

    -u  File has setuid bit set.
    -g  File has setgid bit set.
    -k  File has sticky bit set.

    -T  File is an ASCII or UTF-8 text file (heuristic guess).
    -B  File is a "binary" file (opposite of -T).

    -M  Script start time minus file modification time, in days.
    -A  Same for access time.
    -C  Same for inode change time (Unix, may differ for other
	platforms)

Example:

    while (<>) {
        chomp;
        next unless -f $_;  # ignore specials
        #...
    }

Note that C<-s/a/b/> does not do a negated substitution.  Saying
C<-exp($foo)> still works as expected, however: only single letters
following a minus are interpreted as file tests.

These operators are exempt from the "looks like a function rule" described
above.  That is, an opening parenthesis after the operator does not affect
how much of the following code constitutes the argument.  Put the opening
parentheses before the operator to separate it from code that follows (this
applies only to operators with higher precedence than unary operators, of
course):

    -s($file) + 1024   # probably wrong; same as -s($file + 1024)
    (-s $file) + 1024  # correct

The interpretation of the file permission operators C<-r>, C<-R>,
C<-w>, C<-W>, C<-x>, and C<-X> is by default based solely on the mode
of the file and the uids and gids of the user.  There may be other
reasons you can't actually read, write, or execute the file: for
example network filesystem access controls, ACLs (access control lists),
read-only filesystems, and unrecognized executable formats.  Note
that the use of these six specific operators to verify if some operation
is possible is usually a mistake, because it may be open to race
conditions.

Also note that, for the superuser on the local filesystems, the C<-r>,
C<-R>, C<-w>, and C<-W> tests always return 1, and C<-x> and C<-X> return 1
if any execute bit is set in the mode.  Scripts run by the superuser
may thus need to do a L<C<stat>|/stat FILEHANDLE> to determine the
actual mode of the file, or temporarily set their effective uid to
something else.

If you are using ACLs, there is a pragma called L<C<filetest>|filetest>
that may produce more accurate results than the bare
L<C<stat>|/stat FILEHANDLE> mode bits.
When under C<use filetest 'access'>, the above-mentioned filetests
test whether the permission can(not) be granted using the L<access(2)>
family of system calls.  Also note that the C<-x> and C<-X> tests may
under this pragma return true even if there are no execute permission
bits set (nor any extra execute permission ACLs).  This strangeness is
due to the underlying system calls' definitions.  Note also that, due to
the implementation of C<use filetest 'access'>, the C<_> special
filehandle won't cache the results of the file tests when this pragma is
in effect.  Read the documentation for the L<C<filetest>|filetest>
pragma for more information.

The C<-T> and C<-B> tests work as follows.  The first block or so of
the file is examined to see if it is valid UTF-8 that includes non-ASCII
characters.  If so, it's a C<-T> file.  Otherwise, that same portion of
the file is examined for odd characters such as strange control codes or
characters with the high bit set.  If more than a third of the
characters are strange, it's a C<-B> file; otherwise it's a C<-T> file.
Also, any file containing a zero byte in the examined portion is
considered a binary file.  (If executed within the scope of a L<S<use
locale>|perllocale> which includes C<LC_CTYPE>, odd characters are
anything that isn't a printable nor space in the current locale.)  If
C<-T> or C<-B> is used on a filehandle, the current IO buffer is
examined
rather than the first block.  Both C<-T> and C<-B> return true on an empty
file, or a file at EOF when testing a filehandle.  Because you have to
read a file to do the C<-T> test, on most occasions you want to use a C<-f>
against the file first, as in C<next unless -f $file && -T $file>.

If any of the file tests (or either the L<C<stat>|/stat FILEHANDLE> or
L<C<lstat>|/lstat FILEHANDLE> operator) is given the special filehandle
consisting of a solitary underline, then the stat structure of the
previous file test (or L<C<stat>|/stat FILEHANDLE> operator) is used,
saving a system call.  (This doesn't work with C<-t>, and you need to
remember that L<C<lstat>|/lstat FILEHANDLE> and C<-l> leave values in
the stat structure for the symbolic link, not the real file.)  (Also, if
the stat buffer was filled by an L<C<lstat>|/lstat FILEHANDLE> call,
C<-T> and C<-B> will reset it with the results of C<stat _>).
Example:

    print "Can do.\n" if -r $a || -w _ || -x _;

    stat($filename);
    print "Readable\n" if -r _;
    print "Writable\n" if -w _;
    print "Executable\n" if -x _;
    print "Setuid\n" if -u _;
    print "Setgid\n" if -g _;
    print "Sticky\n" if -k _;
    print "Text\n" if -T _;
    print "Binary\n" if -B _;

As of Perl 5.10.0, as a form of purely syntactic sugar, you can stack file
test operators, in a way that C<-f -w -x $file> is equivalent to
C<-x $file && -w _ && -f _>.  (This is only fancy syntax: if you use
the return value of C<-f $file> as an argument to another filetest
operator, no special magic will happen.)

Portability issues: L<perlport/-X>.

To avoid confusing would-be users of your code with mysterious
syntax errors, put something like this at the top of your script:

    use 5.010;  # so filetest ops can stack

=item abs VALUE
X<abs> X<absolute>

=item abs

=for Pod::Functions absolute value function

Returns the absolute value of its argument.
If VALUE is omitted, uses L<C<$_>|perlvar/$_>.

=item accept NEWSOCKET,GENERICSOCKET
X<accept>

=for Pod::Functions accept an incoming socket connect

Accepts an incoming socket connect, just as L<accept(2)>
does.  Returns the packed address if it succeeded, false otherwise.
See the example in L<perlipc/"Sockets: Client/Server Communication">.

On systems that support a close-on-exec flag on files, the flag will
be set for the newly opened file descriptor, as determined by the
value of L<C<$^F>|perlvar/$^F>.  See L<perlvar/$^F>.

=item alarm SECONDS
X<alarm>
X<SIGALRM>
X<timer>

=item alarm

=for Pod::Functions schedule a SIGALRM

Arranges to have a SIGALRM delivered to this process after the
specified number of wallclock seconds has elapsed.  If SECONDS is not
specified, the value stored in L<C<$_>|perlvar/$_> is used.  (On some
machines, unfortunately, the elapsed time may be up to one second less
or more than you specified because of how seconds are counted, and
process scheduling may delay the delivery of the signal even further.)

Only one timer may be counting at once.  Each call disables the
previous timer, and an argument of C<0> may be supplied to cancel the
previous timer without starting a new one.  The returned value is the
amount of time remaining on the previous timer.

For delays of finer granularity than one second, the L<Time::HiRes> module
(from CPAN, and starting from Perl 5.8 part of the standard
distribution) provides
L<C<ualarm>|Time::HiRes/ualarm ( $useconds [, $interval_useconds ] )>.
You may also use Perl's four-argument version of
L<C<select>|/select RBITS,WBITS,EBITS,TIMEOUT> leaving the first three
arguments undefined, or you might be able to use the
L<C<syscall>|/syscall NUMBER, LIST> interface to access L<setitimer(2)>
if your system supports it.  See L<perlfaq8> for details.

It is usually a mistake to intermix L<C<alarm>|/alarm SECONDS> and
L<C<sleep>|/sleep EXPR> calls, because L<C<sleep>|/sleep EXPR> may be
internally implemented on your system with L<C<alarm>|/alarm SECONDS>.

If you want to use L<C<alarm>|/alarm SECONDS> to time out a system call
you need to use an L<C<eval>|/eval EXPR>/L<C<die>|/die LIST> pair.  You
can't rely on the alarm causing the system call to fail with
L<C<$!>|perlvar/$!> set to C<EINTR> because Perl sets up signal handlers
to restart system calls on some systems.  Using
L<C<eval>|/eval EXPR>/L<C<die>|/die LIST> always works, modulo the
caveats given in L<perlipc/"Signals">.

    eval {
        local $SIG{ALRM} = sub { die "alarm\n" }; # NB: \n required
        alarm $timeout;
        my $nread = sysread $socket, $buffer, $size;
        alarm 0;
    };
    if ($@@) {
        die unless $@@ eq "alarm\n";   # propagate unexpected errors
        # timed out
    }
    else {
        # didn't
    }

For more information see L<perlipc>.

Portability issues: L<perlport/alarm>.

=item atan2 Y,X
X<atan2> X<arctangent> X<tan> X<tangent>

=for Pod::Functions arctangent of Y/X in the range -PI to PI

Returns the arctangent of Y/X in the range -PI to PI.

For the tangent operation, you may use the
L<C<Math::Trig::tan>|Math::Trig/B<tan>> function, or use the familiar
relation:

    sub tan { sin($_[0]) / cos($_[0])  }

The return value for C<atan2(0,0)> is implementation-defined; consult
your L<atan2(3)> manpage for more information.

Portability issues: L<perlport/atan2>.

=item bind SOCKET,NAME
X<bind>

=for Pod::Functions binds an address to a socket

Binds a network address to a socket, just as L<bind(2)>
does.  Returns true if it succeeded, false otherwise.  NAME should be a
packed address of the appropriate type for the socket.  See the examples in
L<perlipc/"Sockets: Client/Server Communication">.

=item binmode FILEHANDLE, LAYER
X<binmode> X<binary> X<text> X<DOS> X<Windows>

=item binmode FILEHANDLE

=for Pod::Functions prepare binary files for I/O

Arranges for FILEHANDLE to be read or written in "binary" or "text"
mode on systems where the run-time libraries distinguish between
binary and text files.  If FILEHANDLE is an expression, the value is
taken as the name of the filehandle.  Returns true on success,
otherwise it returns L<C<undef>|/undef EXPR> and sets
L<C<$!>|perlvar/$!> (errno).

On some systems (in general, DOS- and Windows-based systems)
L<C<binmode>|/binmode FILEHANDLE, LAYER> is necessary when you're not
working with a text file.  For the sake of portability it is a good idea
always to use it when appropriate, and never to use it when it isn't
appropriate.  Also, people can set their I/O to be by default
UTF8-encoded Unicode, not bytes.

In other words: regardless of platform, use
L<C<binmode>|/binmode FILEHANDLE, LAYER> on binary data, like images,
for example.

If LAYER is present it is a single string, but may contain multiple
directives.  The directives alter the behaviour of the filehandle.
When LAYER is present, using binmode on a text file makes sense.

If LAYER is omitted or specified as C<:raw> the filehandle is made
suitable for passing binary data.  This includes turning off possible CRLF
translation and marking it as bytes (as opposed to Unicode characters).
Note that, despite what may be implied in I<"Programming Perl"> (the
Camel, 3rd edition) or elsewhere, C<:raw> is I<not> simply the inverse of C<:crlf>.
Other layers that would affect the binary nature of the stream are
I<also> disabled.  See L<PerlIO>, L<perlrun>, and the discussion about the
PERLIO environment variable.

The C<:bytes>, C<:crlf>, C<:utf8>, and any other directives of the
form C<:...>, are called I/O I<layers>.  The L<open> pragma can be used to
establish default I/O layers.

I<The LAYER parameter of the L<C<binmode>|/binmode FILEHANDLE, LAYER>
function is described as "DISCIPLINE" in "Programming Perl, 3rd
Edition".  However, since the publishing of this book, by many known as
"Camel III", the consensus of the naming of this functionality has moved
from "discipline" to "layer".  All documentation of this version of Perl
therefore refers to "layers" rather than to "disciplines".  Now back to
the regularly scheduled documentation...>

To mark FILEHANDLE as UTF-8, use C<:utf8> or C<:encoding(UTF-8)>.
C<:utf8> just marks the data as UTF-8 without further checking,
while C<:encoding(UTF-8)> checks the data for actually being valid
UTF-8.  More details can be found in L<PerlIO::encoding>.

In general, L<C<binmode>|/binmode FILEHANDLE, LAYER> should be called
after L<C<open>|/open FILEHANDLE,EXPR> but before any I/O is done on the
filehandle.  Calling L<C<binmode>|/binmode FILEHANDLE, LAYER> normally
flushes any pending buffered output data (and perhaps pending input
data) on the handle.  An exception to this is the C<:encoding> layer
that changes the default character encoding of the handle.
The C<:encoding> layer sometimes needs to be called in
mid-stream, and it doesn't flush the stream.  C<:encoding>
also implicitly pushes on top of itself the C<:utf8> layer because
internally Perl operates on UTF8-encoded Unicode characters.

The operating system, device drivers, C libraries, and Perl run-time
system all conspire to let the programmer treat a single
character (C<\n>) as the line terminator, irrespective of external
representation.  On many operating systems, the native text file
representation matches the internal representation, but on some
platforms the external representation of C<\n> is made up of more than
one character.

All variants of Unix, Mac OS (old and new), and Stream_LF files on VMS use
a single character to end each line in the external representation of text
(even though that single character is CARRIAGE RETURN on old, pre-Darwin
flavors of Mac OS, and is LINE FEED on Unix and most VMS files).  In other
systems like OS/2, DOS, and the various flavors of MS-Windows, your program
sees a C<\n> as a simple C<\cJ>, but what's stored in text files are the
two characters C<\cM\cJ>.  That means that if you don't use
L<C<binmode>|/binmode FILEHANDLE, LAYER> on these systems, C<\cM\cJ>
sequences on disk will be converted to C<\n> on input, and any C<\n> in
your program will be converted back to C<\cM\cJ> on output.  This is
what you want for text files, but it can be disastrous for binary files.

Another consequence of using L<C<binmode>|/binmode FILEHANDLE, LAYER>
(on some systems) is that special end-of-file markers will be seen as
part of the data stream.  For systems from the Microsoft family this
means that, if your binary data contain C<\cZ>, the I/O subsystem will
regard it as the end of the file, unless you use
L<C<binmode>|/binmode FILEHANDLE, LAYER>.

L<C<binmode>|/binmode FILEHANDLE, LAYER> is important not only for
L<C<readline>|/readline EXPR> and L<C<print>|/print FILEHANDLE LIST>
operations, but also when using
L<C<read>|/read FILEHANDLE,SCALAR,LENGTH,OFFSET>,
L<C<seek>|/seek FILEHANDLE,POSITION,WHENCE>,
L<C<sysread>|/sysread FILEHANDLE,SCALAR,LENGTH,OFFSET>,
L<C<syswrite>|/syswrite FILEHANDLE,SCALAR,LENGTH,OFFSET> and
L<C<tell>|/tell FILEHANDLE> (see L<perlport> for more details).  See the
L<C<$E<sol>>|perlvar/$E<sol>> and L<C<$\>|perlvar/$\> variables in
L<perlvar> for how to manually set your input and output
line-termination sequences.

Portability issues: L<perlport/binmode>.

=item bless REF,CLASSNAME
X<bless>

=item bless REF

=for Pod::Functions create an object

This function tells the thingy referenced by REF that it is now an object
in the CLASSNAME package.  If CLASSNAME is omitted, the current package
is used.  Because a L<C<bless>|/bless REF,CLASSNAME> is often the last
thing in a constructor, it returns the reference for convenience.
Always use the two-argument version if a derived class might inherit the
method doing the blessing.  See L<perlobj> for more about the blessing
(and blessings) of objects.

Consider always blessing objects in CLASSNAMEs that are mixed case.
Namespaces with all lowercase names are considered reserved for
Perl pragmas.  Builtin types have all uppercase names.  To prevent
confusion, you may wish to avoid such package names as well.  Make sure
that CLASSNAME is a true value.

See L<perlmod/"Perl Modules">.

=item break

=for Pod::Functions +switch break out of a C<given> block

Break out of a C<given> block.

L<C<break>|/break> is available only if the
L<C<"switch"> feature|feature/The 'switch' feature> is enabled or if it
is prefixed with C<CORE::>. The
L<C<"switch"> feature|feature/The 'switch' feature> is enabled
automatically with a C<use v5.10> (or higher) declaration in the current
scope.

=item caller EXPR
X<caller> X<call stack> X<stack> X<stack trace>

=item caller

=for Pod::Functions get context of the current subroutine call

Returns the context of the current pure perl subroutine call.  In scalar
context, returns the caller's package name if there I<is> a caller (that is, if
we're in a subroutine or L<C<eval>|/eval EXPR> or
L<C<require>|/require VERSION>) and the undefined value otherwise.
caller never returns XS subs and they are skipped.  The next pure perl
sub will appear instead of the XS sub in caller's return values.  In
list context, caller returns

       # 0         1          2
    my ($package, $filename, $line) = caller;

With EXPR, it returns some extra information that the debugger uses to
print a stack trace.  The value of EXPR indicates how many call frames
to go back before the current one.

    #  0         1          2      3            4
 my ($package, $filename, $line, $subroutine, $hasargs,

    #  5          6          7            8       9         10
    $wantarray, $evaltext, $is_require, $hints, $bitmask, $hinthash)
  = caller($i);

Here, $subroutine is the function that the caller called (rather than the
function containing the caller).  Note that $subroutine may be C<(eval)> if
the frame is not a subroutine call, but an L<C<eval>|/eval EXPR>.  In
such a case additional elements $evaltext and C<$is_require> are set:
C<$is_require> is true if the frame is created by a
L<C<require>|/require VERSION> or L<C<use>|/use Module VERSION LIST>
statement, $evaltext contains the text of the C<eval EXPR> statement.
In particular, for an C<eval BLOCK> statement, $subroutine is C<(eval)>,
but $evaltext is undefined.  (Note also that each
L<C<use>|/use Module VERSION LIST> statement creates a
L<C<require>|/require VERSION> frame inside an C<eval EXPR> frame.)
$subroutine may also be C<(unknown)> if this particular subroutine
happens to have been deleted from the symbol table.  C<$hasargs> is true
if a new instance of L<C<@@_>|perlvar/@@_> was set up for the frame.
C<$hints> and C<$bitmask> contain pragmatic hints that the caller was
compiled with.  C<$hints> corresponds to L<C<$^H>|perlvar/$^H>, and
C<$bitmask> corresponds to
L<C<${^WARNING_BITS}>|perlvar/${^WARNING_BITS}>.  The C<$hints> and
C<$bitmask> values are subject to change between versions of Perl, and
are not meant for external use.

C<$hinthash> is a reference to a hash containing the value of
L<C<%^H>|perlvar/%^H> when the caller was compiled, or
L<C<undef>|/undef EXPR> if L<C<%^H>|perlvar/%^H> was empty.  Do not
modify the values of this hash, as they are the actual values stored in
the optree.

Furthermore, when called from within the DB package in
list context, and with an argument, caller returns more
detailed information: it sets the list variable C<@@DB::args> to be the
arguments with which the subroutine was invoked.

Be aware that the optimizer might have optimized call frames away before
L<C<caller>|/caller EXPR> had a chance to get the information.  That
means that C<caller(N)> might not return information about the call
frame you expect it to, for C<< N > 1 >>.  In particular, C<@@DB::args>
might have information from the previous time L<C<caller>|/caller EXPR>
was called.

Be aware that setting C<@@DB::args> is I<best effort>, intended for
debugging or generating backtraces, and should not be relied upon.  In
particular, as L<C<@@_>|perlvar/@@_> contains aliases to the caller's
arguments, Perl does not take a copy of L<C<@@_>|perlvar/@@_>, so
C<@@DB::args> will contain modifications the subroutine makes to
L<C<@@_>|perlvar/@@_> or its contents, not the original values at call
time.  C<@@DB::args>, like L<C<@@_>|perlvar/@@_>, does not hold explicit
references to its elements, so under certain cases its elements may have
become freed and reallocated for other variables or temporary values.
Finally, a side effect of the current implementation is that the effects
of C<shift @@_> can I<normally> be undone (but not C<pop @@_> or other
splicing, I<and> not if a reference to L<C<@@_>|perlvar/@@_> has been
taken, I<and> subject to the caveat about reallocated elements), so
C<@@DB::args> is actually a hybrid of the current state and initial state
of L<C<@@_>|perlvar/@@_>.  Buyer beware.

=item chdir EXPR
X<chdir>
X<cd>
X<directory, change>

=item chdir FILEHANDLE

=item chdir DIRHANDLE

=item chdir

=for Pod::Functions change your current working directory

Changes the working directory to EXPR, if possible.  If EXPR is omitted,
changes to the directory specified by C<$ENV{HOME}>, if set; if not,
changes to the directory specified by C<$ENV{LOGDIR}>.  (Under VMS, the
variable C<$ENV{'SYS$LOGIN'}> is also checked, and used if it is set.)  If
neither is set, L<C<chdir>|/chdir EXPR> does nothing and fails.  It
returns true on success, false otherwise.  See the example under
L<C<die>|/die LIST>.

On systems that support L<fchdir(2)>, you may pass a filehandle or
directory handle as the argument.  On systems that don't support L<fchdir(2)>,
passing handles raises an exception.

=item chmod LIST
X<chmod> X<permission> X<mode>

=for Pod::Functions changes the permissions on a list of files

Changes the permissions of a list of files.  The first element of the
list must be the numeric mode, which should probably be an octal
number, and which definitely should I<not> be a string of octal digits:
C<0644> is okay, but C<"0644"> is not.  Returns the number of files
successfully changed.  See also L<C<oct>|/oct EXPR> if all you have is a
string.

    my $cnt = chmod 0755, "foo", "bar";
    chmod 0755, @@executables;
    my $mode = "0644"; chmod $mode, "foo";      # !!! sets mode to
                                                # --w----r-T
    my $mode = "0644"; chmod oct($mode), "foo"; # this is better
    my $mode = 0644;   chmod $mode, "foo";      # this is best

On systems that support L<fchmod(2)>, you may pass filehandles among the
files.  On systems that don't support L<fchmod(2)>, passing filehandles raises
an exception.  Filehandles must be passed as globs or glob references to be
recognized; barewords are considered filenames.

    open(my $fh, "<", "foo");
    my $perm = (stat $fh)[2] & 07777;
    chmod($perm | 0600, $fh);

You can also import the symbolic C<S_I*> constants from the
L<C<Fcntl>|Fcntl> module:

    use Fcntl qw( :mode );
    chmod S_IRWXU|S_IRGRP|S_IXGRP|S_IROTH|S_IXOTH, @@executables;
    # Identical to the chmod 0755 of the example above.

Portability issues: L<perlport/chmod>.

=item chomp VARIABLE
X<chomp> X<INPUT_RECORD_SEPARATOR> X<$/> X<newline> X<eol>

=item chomp( LIST )

=item chomp

=for Pod::Functions remove a trailing record separator from a string

This safer version of L<C<chop>|/chop VARIABLE> removes any trailing
string that corresponds to the current value of
L<C<$E<sol>>|perlvar/$E<sol>> (also known as C<$INPUT_RECORD_SEPARATOR>
in the L<C<English>|English> module).  It returns the total
number of characters removed from all its arguments.  It's often used to
remove the newline from the end of an input record when you're worried
that the final record may be missing its newline.  When in paragraph
mode (C<$/ = ''>), it removes all trailing newlines from the string.
When in slurp mode (C<$/ = undef>) or fixed-length record mode
(L<C<$E<sol>>|perlvar/$E<sol>> is a reference to an integer or the like;
see L<perlvar>), L<C<chomp>|/chomp VARIABLE> won't remove anything.
If VARIABLE is omitted, it chomps L<C<$_>|perlvar/$_>.  Example:

    while (<>) {
        chomp;  # avoid \n on last field
        my @@array = split(/:/);
        # ...
    }

If VARIABLE is a hash, it chomps the hash's values, but not its keys,
resetting the L<C<each>|/each HASH> iterator in the process.

You can actually chomp anything that's an lvalue, including an assignment:

    chomp(my $cwd = `pwd`);
    chomp(my $answer = <STDIN>);

If you chomp a list, each element is chomped, and the total number of
characters removed is returned.

Note that parentheses are necessary when you're chomping anything
that is not a simple variable.  This is because C<chomp $cwd = `pwd`;>
is interpreted as C<(chomp $cwd) = `pwd`;>, rather than as
C<chomp( $cwd = `pwd` )> which you might expect.  Similarly,
C<chomp $a, $b> is interpreted as C<chomp($a), $b> rather than
as C<chomp($a, $b)>.

=item chop VARIABLE
X<chop>

=item chop( LIST )

=item chop

=for Pod::Functions remove the last character from a string

Chops off the last character of a string and returns the character
chopped.  It is much more efficient than C<s/.$//s> because it neither
scans nor copies the string.  If VARIABLE is omitted, chops
L<C<$_>|perlvar/$_>.
If VARIABLE is a hash, it chops the hash's values, but not its keys,
resetting the L<C<each>|/each HASH> iterator in the process.

You can actually chop anything that's an lvalue, including an assignment.

If you chop a list, each element is chopped.  Only the value of the
last L<C<chop>|/chop VARIABLE> is returned.

Note that L<C<chop>|/chop VARIABLE> returns the last character.  To
return all but the last character, use C<substr($string, 0, -1)>.

See also L<C<chomp>|/chomp VARIABLE>.

=item chown LIST
X<chown> X<owner> X<user> X<group>

=for Pod::Functions change the ownership on a list of files

Changes the owner (and group) of a list of files.  The first two
elements of the list must be the I<numeric> uid and gid, in that
order.  A value of -1 in either position is interpreted by most
systems to leave that value unchanged.  Returns the number of files
successfully changed.

    my $cnt = chown $uid, $gid, 'foo', 'bar';
    chown $uid, $gid, @@filenames;

On systems that support L<fchown(2)>, you may pass filehandles among the
files.  On systems that don't support L<fchown(2)>, passing filehandles raises
an exception.  Filehandles must be passed as globs or glob references to be
recognized; barewords are considered filenames.

Here's an example that looks up nonnumeric uids in the passwd file:

    print "User: ";
    chomp(my $user = <STDIN>);
    print "Files: ";
    chomp(my $pattern = <STDIN>);

    my ($login,$pass,$uid,$gid) = getpwnam($user)
        or die "$user not in passwd file";

    my @@ary = glob($pattern);  # expand filenames
    chown $uid, $gid, @@ary;

On most systems, you are not allowed to change the ownership of the
file unless you're the superuser, although you should be able to change
the group to any of your secondary groups.  On insecure systems, these
restrictions may be relaxed, but this is not a portable assumption.
On POSIX systems, you can detect this condition this way:

    use POSIX qw(sysconf _PC_CHOWN_RESTRICTED);
    my $can_chown_giveaway = ! sysconf(_PC_CHOWN_RESTRICTED);

Portability issues: L<perlport/chown>.

=item chr NUMBER
X<chr> X<character> X<ASCII> X<Unicode>

=item chr

=for Pod::Functions get character this number represents

Returns the character represented by that NUMBER in the character set.
For example, C<chr(65)> is C<"A"> in either ASCII or Unicode, and
chr(0x263a) is a Unicode smiley face.

Negative values give the Unicode replacement character (chr(0xfffd)),
except under the L<bytes> pragma, where the low eight bits of the value
(truncated to an integer) are used.

If NUMBER is omitted, uses L<C<$_>|perlvar/$_>.

For the reverse, use L<C<ord>|/ord EXPR>.

Note that characters from 128 to 255 (inclusive) are by default
internally not encoded as UTF-8 for backward compatibility reasons.

See L<perlunicode> for more about Unicode.

=item chroot FILENAME
X<chroot> X<root>

=item chroot

=for Pod::Functions make directory new root for path lookups

This function works like the system call by the same name: it makes the
named directory the new root directory for all further pathnames that
begin with a C</> by your process and all its children.  (It doesn't
change your current working directory, which is unaffected.)  For security
reasons, this call is restricted to the superuser.  If FILENAME is
omitted, does a L<C<chroot>|/chroot FILENAME> to L<C<$_>|perlvar/$_>.

B<NOTE:>  It is good security practice to do C<chdir("/")>
(L<C<chdir>|/chdir EXPR> to the root directory) immediately after a
L<C<chroot>|/chroot FILENAME>.

Portability issues: L<perlport/chroot>.

=item close FILEHANDLE
X<close>

=item close

=for Pod::Functions close file (or pipe or socket) handle

Closes the file or pipe associated with the filehandle, flushes the IO
buffers, and closes the system file descriptor.  Returns true if those
operations succeed and if no error was reported by any PerlIO
layer.  Closes the currently selected filehandle if the argument is
omitted.

You don't have to close FILEHANDLE if you are immediately going to do
another L<C<open>|/open FILEHANDLE,EXPR> on it, because
L<C<open>|/open FILEHANDLE,EXPR> closes it for you.  (See
L<C<open>|/open FILEHANDLE,EXPR>.) However, an explicit
L<C<close>|/close FILEHANDLE> on an input file resets the line counter
(L<C<$.>|perlvar/$.>), while the implicit close done by
L<C<open>|/open FILEHANDLE,EXPR> does not.

If the filehandle came from a piped open, L<C<close>|/close FILEHANDLE>
returns false if one of the other syscalls involved fails or if its
program exits with non-zero status.  If the only problem was that the
program exited non-zero, L<C<$!>|perlvar/$!> will be set to C<0>.
Closing a pipe also waits for the process executing on the pipe to
exit--in case you wish to look at the output of the pipe afterwards--and
implicitly puts the exit status value of that command into
L<C<$?>|perlvar/$?> and
L<C<${^CHILD_ERROR_NATIVE}>|perlvar/${^CHILD_ERROR_NATIVE}>.

If there are multiple threads running, L<C<close>|/close FILEHANDLE> on
a filehandle from a piped open returns true without waiting for the
child process to terminate, if the filehandle is still open in another
thread.

Closing the read end of a pipe before the process writing to it at the
other end is done writing results in the writer receiving a SIGPIPE.  If
the other end can't handle that, be sure to read all the data before
closing the pipe.

Example:

    open(OUTPUT, '|sort >foo')  # pipe to sort
        or die "Can't start sort: $!";
    #...                        # print stuff to output
    close OUTPUT                # wait for sort to finish
        or warn $! ? "Error closing sort pipe: $!"
                   : "Exit status $? from sort";
    open(INPUT, 'foo')          # get sort's results
        or die "Can't open 'foo' for input: $!";

FILEHANDLE may be an expression whose value can be used as an indirect
filehandle, usually the real filehandle name or an autovivified handle.

=item closedir DIRHANDLE
X<closedir>

=for Pod::Functions close directory handle

Closes a directory opened by L<C<opendir>|/opendir DIRHANDLE,EXPR> and
returns the success of that system call.

=item connect SOCKET,NAME
X<connect>

=for Pod::Functions connect to a remote socket

Attempts to connect to a remote socket, just like L<connect(2)>.
Returns true if it succeeded, false otherwise.  NAME should be a
packed address of the appropriate type for the socket.  See the examples in
L<perlipc/"Sockets: Client/Server Communication">.

=item continue BLOCK
X<continue>

=item continue

=for Pod::Functions optional trailing block in a while or foreach

When followed by a BLOCK, L<C<continue>|/continue BLOCK> is actually a
flow control statement rather than a function.  If there is a
L<C<continue>|/continue BLOCK> BLOCK attached to a BLOCK (typically in a
C<while> or C<foreach>), it is always executed just before the
conditional is about to be evaluated again, just like the third part of
a C<for> loop in C.  Thus it can be used to increment a loop variable,
even when the loop has been continued via the L<C<next>|/next LABEL>
statement (which is similar to the C L<C<continue>|/continue BLOCK>
statement).

L<C<last>|/last LABEL>, L<C<next>|/next LABEL>, or
L<C<redo>|/redo LABEL> may appear within a
L<C<continue>|/continue BLOCK> block; L<C<last>|/last LABEL> and
L<C<redo>|/redo LABEL> behave as if they had been executed within the
main block.  So will L<C<next>|/next LABEL>, but since it will execute a
L<C<continue>|/continue BLOCK> block, it may be more entertaining.

    while (EXPR) {
        ### redo always comes here
        do_something;
    } continue {
        ### next always comes here
        do_something_else;
        # then back the top to re-check EXPR
    }
    ### last always comes here

Omitting the L<C<continue>|/continue BLOCK> section is equivalent to
using an empty one, logically enough, so L<C<next>|/next LABEL> goes
directly back to check the condition at the top of the loop.

When there is no BLOCK, L<C<continue>|/continue BLOCK> is a function
that falls through the current C<when> or C<default> block instead of
iterating a dynamically enclosing C<foreach> or exiting a lexically
enclosing C<given>.  In Perl 5.14 and earlier, this form of
L<C<continue>|/continue BLOCK> was only available when the
L<C<"switch"> feature|feature/The 'switch' feature> was enabled.  See
L<feature> and L<perlsyn/"Switch Statements"> for more information.

=item cos EXPR
X<cos> X<cosine> X<acos> X<arccosine>

=item cos

=for Pod::Functions cosine function

Returns the cosine of EXPR (expressed in radians).  If EXPR is omitted,
takes the cosine of L<C<$_>|perlvar/$_>.

For the inverse cosine operation, you may use the
L<C<Math::Trig::acos>|Math::Trig> function, or use this relation:

    sub acos { atan2( sqrt(1 - $_[0] * $_[0]), $_[0] ) }

=item crypt PLAINTEXT,SALT
X<crypt> X<digest> X<hash> X<salt> X<plaintext> X<password>
X<decrypt> X<cryptography> X<passwd> X<encrypt>

=for Pod::Functions one-way passwd-style encryption

Creates a digest string exactly like the L<crypt(3)> function in the C
library (assuming that you actually have a version there that has not
been extirpated as a potential munition).

L<C<crypt>|/crypt PLAINTEXT,SALT> is a one-way hash function.  The
PLAINTEXT and SALT are turned
into a short string, called a digest, which is returned.  The same
PLAINTEXT and SALT will always return the same string, but there is no
(known) way to get the original PLAINTEXT from the hash.  Small
changes in the PLAINTEXT or SALT will result in large changes in the
digest.

There is no decrypt function.  This function isn't all that useful for
cryptography (for that, look for F<Crypt> modules on your nearby CPAN
mirror) and the name "crypt" is a bit of a misnomer.  Instead it is
primarily used to check if two pieces of text are the same without
having to transmit or store the text itself.  An example is checking
if a correct password is given.  The digest of the password is stored,
not the password itself.  The user types in a password that is
L<C<crypt>|/crypt PLAINTEXT,SALT>'d with the same salt as the stored
digest.  If the two digests match, the password is correct.

When verifying an existing digest string you should use the digest as
the salt (like C<crypt($plain, $digest) eq $digest>).  The SALT used
to create the digest is visible as part of the digest.  This ensures
L<C<crypt>|/crypt PLAINTEXT,SALT> will hash the new string with the same
salt as the digest.  This allows your code to work with the standard
L<C<crypt>|/crypt PLAINTEXT,SALT> and with more exotic implementations.
In other words, assume nothing about the returned string itself nor
about how many bytes of SALT may matter.

Traditionally the result is a string of 13 bytes: two first bytes of
the salt, followed by 11 bytes from the set C<[./0-9A-Za-z]>, and only
the first eight bytes of PLAINTEXT mattered.  But alternative
hashing schemes (like MD5), higher level security schemes (like C2),
and implementations on non-Unix platforms may produce different
strings.

When choosing a new salt create a random two character string whose
characters come from the set C<[./0-9A-Za-z]> (like C<join '', ('.',
'/', 0..9, 'A'..'Z', 'a'..'z')[rand 64, rand 64]>).  This set of
characters is just a recommendation; the characters allowed in
the salt depend solely on your system's crypt library, and Perl can't
restrict what salts L<C<crypt>|/crypt PLAINTEXT,SALT> accepts.

Here's an example that makes sure that whoever runs this program knows
their password:

    my $pwd = (getpwuid($<))[1];

    system "stty -echo";
    print "Password: ";
    chomp(my $word = <STDIN>);
    print "\n";
    system "stty echo";

    if (crypt($word, $pwd) ne $pwd) {
        die "Sorry...\n";
    } else {
        print "ok\n";
    }

Of course, typing in your own password to whoever asks you
for it is unwise.

The L<C<crypt>|/crypt PLAINTEXT,SALT> function is unsuitable for hashing
large quantities of data, not least of all because you can't get the
information back.  Look at the L<Digest> module for more robust
algorithms.

If using L<C<crypt>|/crypt PLAINTEXT,SALT> on a Unicode string (which
I<potentially> has characters with codepoints above 255), Perl tries to
make sense of the situation by trying to downgrade (a copy of) the
string back to an eight-bit byte string before calling
L<C<crypt>|/crypt PLAINTEXT,SALT> (on that copy).  If that works, good.
If not, L<C<crypt>|/crypt PLAINTEXT,SALT> dies with
L<C<Wide character in crypt>|perldiag/Wide character in %s>.

Portability issues: L<perlport/crypt>.

=item dbmclose HASH
X<dbmclose>

=for Pod::Functions breaks binding on a tied dbm file

[This function has been largely superseded by the
L<C<untie>|/untie VARIABLE> function.]

Breaks the binding between a DBM file and a hash.

Portability issues: L<perlport/dbmclose>.

=item dbmopen HASH,DBNAME,MASK
X<dbmopen> X<dbm> X<ndbm> X<sdbm> X<gdbm>

=for Pod::Functions create binding on a tied dbm file

[This function has been largely superseded by the
L<C<tie>|/tie VARIABLE,CLASSNAME,LIST> function.]

This binds a L<dbm(3)>, L<ndbm(3)>, L<sdbm(3)>, L<gdbm(3)>, or Berkeley
DB file to a hash.  HASH is the name of the hash.  (Unlike normal
L<C<open>|/open FILEHANDLE,EXPR>, the first argument is I<not> a
filehandle, even though it looks like one).  DBNAME is the name of the
database (without the F<.dir> or F<.pag> extension if any).  If the
database does not exist, it is created with protection specified by MASK
(as modified by the L<C<umask>|/umask EXPR>).  To prevent creation of
the database if it doesn't exist, you may specify a MODE of 0, and the
function will return a false value if it can't find an existing
database.  If your system supports only the older DBM functions, you may
make only one L<C<dbmopen>|/dbmopen HASH,DBNAME,MASK> call in your
program.  In older versions of Perl, if your system had neither DBM nor
ndbm, calling L<C<dbmopen>|/dbmopen HASH,DBNAME,MASK> produced a fatal
error; it now falls back to L<sdbm(3)>.

If you don't have write access to the DBM file, you can only read hash
variables, not set them.  If you want to test whether you can write,
either use file tests or try setting a dummy hash entry inside an
L<C<eval>|/eval EXPR> to trap the error.

Note that functions such as L<C<keys>|/keys HASH> and
L<C<values>|/values HASH> may return huge lists when used on large DBM
files.  You may prefer to use the L<C<each>|/each HASH> function to
iterate over large DBM files.  Example:

    # print out history file offsets
    dbmopen(%HIST,'/usr/lib/news/history',0666);
    while (($key,$val) = each %HIST) {
        print $key, ' = ', unpack('L',$val), "\n";
    }
    dbmclose(%HIST);

See also L<AnyDBM_File> for a more general description of the pros and
cons of the various dbm approaches, as well as L<DB_File> for a particularly
rich implementation.

You can control which DBM library you use by loading that library
before you call L<C<dbmopen>|/dbmopen HASH,DBNAME,MASK>:

    use DB_File;
    dbmopen(%NS_Hist, "$ENV{HOME}/.netscape/history.db")
        or die "Can't open netscape history file: $!";

Portability issues: L<perlport/dbmopen>.

=item defined EXPR
X<defined> X<undef> X<undefined>

=item defined

=for Pod::Functions test whether a value, variable, or function is defined

Returns a Boolean value telling whether EXPR has a value other than the
undefined value L<C<undef>|/undef EXPR>.  If EXPR is not present,
L<C<$_>|perlvar/$_> is checked.

Many operations return L<C<undef>|/undef EXPR> to indicate failure, end
of file, system error, uninitialized variable, and other exceptional
conditions.  This function allows you to distinguish
L<C<undef>|/undef EXPR> from other values.  (A simple Boolean test will
not distinguish among L<C<undef>|/undef EXPR>, zero, the empty string,
and C<"0">, which are all equally false.)  Note that since
L<C<undef>|/undef EXPR> is a valid scalar, its presence doesn't
I<necessarily> indicate an exceptional condition: L<C<pop>|/pop ARRAY>
returns L<C<undef>|/undef EXPR> when its argument is an empty array,
I<or> when the element to return happens to be L<C<undef>|/undef EXPR>.

You may also use C<defined(&func)> to check whether subroutine C<func>
has ever been defined.  The return value is unaffected by any forward
declarations of C<func>.  A subroutine that is not defined
may still be callable: its package may have an C<AUTOLOAD> method that
makes it spring into existence the first time that it is called; see
L<perlsub>.

Use of L<C<defined>|/defined EXPR> on aggregates (hashes and arrays) is
deprecated.  It
used to report whether memory for that aggregate had ever been
allocated.  This behavior may disappear in future versions of Perl.
You should instead use a simple test for size:

    if (@@an_array) { print "has array elements\n" }
    if (%a_hash)   { print "has hash members\n"   }

When used on a hash element, it tells you whether the value is defined,
not whether the key exists in the hash.  Use L<C<exists>|/exists EXPR>
for the latter purpose.

Examples:

    print if defined $switch{D};
    print "$val\n" while defined($val = pop(@@ary));
    die "Can't readlink $sym: $!"
        unless defined($value = readlink $sym);
    sub foo { defined &$bar ? $bar->(@@_) : die "No bar"; }
    $debugging = 0 unless defined $debugging;

Note:  Many folks tend to overuse L<C<defined>|/defined EXPR> and are
then surprised to discover that the number C<0> and C<""> (the
zero-length string) are, in fact, defined values.  For example, if you
say

    "ab" =~ /a(.*)b/;

The pattern match succeeds and C<$1> is defined, although it
matched "nothing".  It didn't really fail to match anything.  Rather, it
matched something that happened to be zero characters long.  This is all
very above-board and honest.  When a function returns an undefined value,
it's an admission that it couldn't give you an honest answer.  So you
should use L<C<defined>|/defined EXPR> only when questioning the
integrity of what you're trying to do.  At other times, a simple
comparison to C<0> or C<""> is what you want.

See also L<C<undef>|/undef EXPR>, L<C<exists>|/exists EXPR>,
L<C<ref>|/ref EXPR>.

=item delete EXPR
X<delete>

=for Pod::Functions deletes a value from a hash

Given an expression that specifies an element or slice of a hash,
L<C<delete>|/delete EXPR> deletes the specified elements from that hash
so that L<C<exists>|/exists EXPR> on that element no longer returns
true.  Setting a hash element to the undefined value does not remove its
key, but deleting it does; see L<C<exists>|/exists EXPR>.

In list context, returns the value or values deleted, or the last such
element in scalar context.  The return list's length always matches that of
the argument list: deleting non-existent elements returns the undefined value
in their corresponding positions.

L<C<delete>|/delete EXPR> may also be used on arrays and array slices,
but its behavior is less straightforward.  Although
L<C<exists>|/exists EXPR> will return false for deleted entries,
deleting array elements never changes indices of existing values; use
L<C<shift>|/shift ARRAY> or L<C<splice>|/splice
ARRAY,OFFSET,LENGTH,LIST> for that.  However, if any deleted elements
fall at the end of an array, the array's size shrinks to the position of
the highest element that still tests true for L<C<exists>|/exists EXPR>,
or to 0 if none do.  In other words, an array won't have trailing
nonexistent elements after a delete.

B<WARNING:> Calling L<C<delete>|/delete EXPR> on array values is
strongly discouraged.  The
notion of deleting or checking the existence of Perl array elements is not
conceptually coherent, and can lead to surprising behavior.

Deleting from L<C<%ENV>|perlvar/%ENV> modifies the environment.
Deleting from a hash tied to a DBM file deletes the entry from the DBM
file.  Deleting from a L<C<tied>|/tied VARIABLE> hash or array may not
necessarily return anything; it depends on the implementation of the
L<C<tied>|/tied VARIABLE> package's DELETE method, which may do whatever
it pleases.

The C<delete local EXPR> construct localizes the deletion to the current
block at run time.  Until the block exits, elements locally deleted
temporarily no longer exist.  See L<perlsub/"Localized deletion of elements
of composite types">.

    my %hash = (foo => 11, bar => 22, baz => 33);
    my $scalar = delete $hash{foo};         # $scalar is 11
    $scalar = delete @@hash{qw(foo bar)}; # $scalar is 22
    my @@array  = delete @@hash{qw(foo baz)}; # @@array  is (undef,33)

The following (inefficiently) deletes all the values of %HASH and @@ARRAY:

    foreach my $key (keys %HASH) {
        delete $HASH{$key};
    }

    foreach my $index (0 .. $#ARRAY) {
        delete $ARRAY[$index];
    }

And so do these:

    delete @@HASH{keys %HASH};

    delete @@ARRAY[0 .. $#ARRAY];

But both are slower than assigning the empty list
or undefining %HASH or @@ARRAY, which is the customary
way to empty out an aggregate:

    %HASH = ();     # completely empty %HASH
    undef %HASH;    # forget %HASH ever existed

    @@ARRAY = ();    # completely empty @@ARRAY
    undef @@ARRAY;   # forget @@ARRAY ever existed

The EXPR can be arbitrarily complicated provided its
final operation is an element or slice of an aggregate:

    delete $ref->[$x][$y]{$key};
    delete @@{$ref->[$x][$y]}{$key1, $key2, @@morekeys};

    delete $ref->[$x][$y][$index];
    delete @@{$ref->[$x][$y]}[$index1, $index2, @@moreindices];

=item die LIST
X<die> X<throw> X<exception> X<raise> X<$@@> X<abort>

=for Pod::Functions raise an exception or bail out

L<C<die>|/die LIST> raises an exception.  Inside an
L<C<eval>|/eval EXPR> the error message is stuffed into
L<C<$@@>|perlvar/$@@> and the L<C<eval>|/eval EXPR> is terminated with the
undefined value.  If the exception is outside of all enclosing
L<C<eval>|/eval EXPR>s, then the uncaught exception prints LIST to
C<STDERR> and exits with a non-zero value.  If you need to exit the
process with a specific exit code, see L<C<exit>|/exit EXPR>.

Equivalent examples:

    die "Can't cd to spool: $!\n" unless chdir '/usr/spool/news';
    chdir '/usr/spool/news' or die "Can't cd to spool: $!\n"

If the last element of LIST does not end in a newline, the current
script line number and input line number (if any) are also printed,
and a newline is supplied.  Note that the "input line number" (also
known as "chunk") is subject to whatever notion of "line" happens to
be currently in effect, and is also available as the special variable
L<C<$.>|perlvar/$.>.  See L<perlvar/"$/"> and L<perlvar/"$.">.

Hint: sometimes appending C<", stopped"> to your message will cause it
to make better sense when the string C<"at foo line 123"> is appended.
Suppose you are running script "canasta".

    die "/etc/games is no good";
    die "/etc/games is no good, stopped";

produce, respectively

    /etc/games is no good at canasta line 123.
    /etc/games is no good, stopped at canasta line 123.

If the output is empty and L<C<$@@>|perlvar/$@@> already contains a value
(typically from a previous eval) that value is reused after appending
C<"\t...propagated">.  This is useful for propagating exceptions:

    eval { ... };
    die unless $@@ =~ /Expected exception/;

If the output is empty and L<C<$@@>|perlvar/$@@> contains an object
reference that has a C<PROPAGATE> method, that method will be called
with additional file and line number parameters.  The return value
replaces the value in L<C<$@@>|perlvar/$@@>;  i.e., as if
C<< $@@ = eval { $@@->PROPAGATE(__FILE__, __LINE__) }; >> were called.

If L<C<$@@>|perlvar/$@@> is empty, then the string C<"Died"> is used.

If an uncaught exception results in interpreter exit, the exit code is
determined from the values of L<C<$!>|perlvar/$!> and
L<C<$?>|perlvar/$?> with this pseudocode:

    exit $! if $!;              # errno
    exit $? >> 8 if $? >> 8;    # child exit status
    exit 255;                   # last resort

As with L<C<exit>|/exit EXPR>, L<C<$?>|perlvar/$?> is set prior to
unwinding the call stack; any C<DESTROY> or C<END> handlers can then
alter this value, and thus Perl's exit code.

The intent is to squeeze as much possible information about the likely cause
into the limited space of the system exit code.  However, as
L<C<$!>|perlvar/$!> is the value of C's C<errno>, which can be set by
any system call, this means that the value of the exit code used by
L<C<die>|/die LIST> can be non-predictable, so should not be relied
upon, other than to be non-zero.

You can also call L<C<die>|/die LIST> with a reference argument, and if
this is trapped within an L<C<eval>|/eval EXPR>, L<C<$@@>|perlvar/$@@>
contains that reference.  This permits more elaborate exception handling
using objects that maintain arbitrary state about the exception.  Such a
scheme is sometimes preferable to matching particular string values of
L<C<$@@>|perlvar/$@@> with regular expressions.  Because
L<C<$@@>|perlvar/$@@> is a global variable and L<C<eval>|/eval EXPR> may
be used within object implementations, be careful that analyzing the
error object doesn't replace the reference in the global variable.  It's
easiest to make a local copy of the reference before any manipulations.
Here's an example:

    use Scalar::Util "blessed";

    eval { ... ; die Some::Module::Exception->new( FOO => "bar" ) };
    if (my $ev_err = $@@) {
        if (blessed($ev_err)
            && $ev_err->isa("Some::Module::Exception")) {
            # handle Some::Module::Exception
        }
        else {
            # handle all other possible exceptions
        }
    }

Because Perl stringifies uncaught exception messages before display,
you'll probably want to overload stringification operations on
exception objects.  See L<overload> for details about that.

You can arrange for a callback to be run just before the
L<C<die>|/die LIST> does its deed, by setting the
L<C<$SIG{__DIE__}>|perlvar/%SIG> hook.  The associated handler is called
with the error text and can change the error message, if it sees fit, by
calling L<C<die>|/die LIST> again.  See L<perlvar/%SIG> for details on
setting L<C<%SIG>|perlvar/%SIG> entries, and L<C<eval>|/eval EXPR> for some
examples.  Although this feature was to be run only right before your
program was to exit, this is not currently so: the
L<C<$SIG{__DIE__}>|perlvar/%SIG> hook is currently called even inside
L<C<eval>|/eval EXPR>ed blocks/strings!  If one wants the hook to do
nothing in such situations, put

    die @@_ if $^S;

as the first line of the handler (see L<perlvar/$^S>).  Because
this promotes strange action at a distance, this counterintuitive
behavior may be fixed in a future release.

See also L<C<exit>|/exit EXPR>, L<C<warn>|/warn LIST>, and the L<Carp>
module.

=item do BLOCK
X<do> X<block>

=for Pod::Functions turn a BLOCK into a TERM

Not really a function.  Returns the value of the last command in the
sequence of commands indicated by BLOCK.  When modified by the C<while> or
C<until> loop modifier, executes the BLOCK once before testing the loop
condition.  (On other statements the loop modifiers test the conditional
first.)

C<do BLOCK> does I<not> count as a loop, so the loop control statements
L<C<next>|/next LABEL>, L<C<last>|/last LABEL>, or
L<C<redo>|/redo LABEL> cannot be used to leave or restart the block.
See L<perlsyn> for alternative strategies.

=item do EXPR
X<do>

Uses the value of EXPR as a filename and executes the contents of the
file as a Perl script.

    do 'stat.pl';

is largely like

    eval `cat stat.pl`;

except that it's more concise, runs no external processes, keeps track of
the current filename for error messages, searches the
L<C<@@INC>|perlvar/@@INC> directories, and updates L<C<%INC>|perlvar/%INC>
if the file is found.  See L<perlvar/@@INC> and L<perlvar/%INC> for these
variables.  It also differs in that code evaluated with C<do FILE>
cannot see lexicals in the enclosing scope; C<eval STRING> does.  It's
the same, however, in that it does reparse the file every time you call
it, so you probably don't want to do this inside a loop.

If L<C<do>|/do EXPR> can read the file but cannot compile it, it
returns L<C<undef>|/undef EXPR> and sets an error message in
L<C<$@@>|perlvar/$@@>.  If L<C<do>|/do EXPR> cannot read the file, it
returns undef and sets L<C<$!>|perlvar/$!> to the error.  Always check
L<C<$@@>|perlvar/$@@> first, as compilation could fail in a way that also
sets L<C<$!>|perlvar/$!>.  If the file is successfully compiled,
L<C<do>|/do EXPR> returns the value of the last expression evaluated.

Inclusion of library modules is better done with the
L<C<use>|/use Module VERSION LIST> and L<C<require>|/require VERSION>
operators, which also do automatic error checking and raise an exception
if there's a problem.

You might like to use L<C<do>|/do EXPR> to read in a program
configuration file.  Manual error checking can be done this way:

    # read in config files: system first, then user
    for $file ("/share/prog/defaults.rc",
               "$ENV{HOME}/.someprogrc")
    {
        unless ($return = do $file) {
            warn "couldn't parse $file: $@@" if $@@;
            warn "couldn't do $file: $!"    unless defined $return;
            warn "couldn't run $file"       unless $return;
        }
    }

=item dump LABEL
X<dump> X<core> X<undump>

=item dump EXPR

=item dump

=for Pod::Functions create an immediate core dump

This function causes an immediate core dump.  See also the B<-u>
command-line switch in L<perlrun>, which does the same thing.
Primarily this is so that you can use the B<undump> program (not
supplied) to turn your core dump into an executable binary after
having initialized all your variables at the beginning of the
program.  When the new binary is executed it will begin by executing
a C<goto LABEL> (with all the restrictions that L<C<goto>|/goto LABEL>
suffers).
Think of it as a goto with an intervening core dump and reincarnation.
If C<LABEL> is omitted, restarts the program from the top.  The
C<dump EXPR> form, available starting in Perl 5.18.0, allows a name to be
computed at run time, being otherwise identical to C<dump LABEL>.

B<WARNING>: Any files opened at the time of the dump will I<not>
be open any more when the program is reincarnated, with possible
resulting confusion by Perl.

This function is now largely obsolete, mostly because it's very hard to
convert a core file into an executable.  That's why you should now invoke
it as C<CORE::dump()> if you don't want to be warned against a possible
typo.

Unlike most named operators, this has the same precedence as assignment.
It is also exempt from the looks-like-a-function rule, so
C<dump ("foo")."bar"> will cause "bar" to be part of the argument to
L<C<dump>|/dump LABEL>.

Portability issues: L<perlport/dump>.

=item each HASH
X<each> X<hash, iterator>

=item each ARRAY
X<array, iterator>

=for Pod::Functions retrieve the next key/value pair from a hash

When called on a hash in list context, returns a 2-element list
consisting of the key and value for the next element of a hash.  In Perl
5.12 and later only, it will also return the index and value for the next
element of an array so that you can iterate over it; older Perls consider
this a syntax error.  When called in scalar context, returns only the key
(not the value) in a hash, or the index in an array.

Hash entries are returned in an apparently random order.  The actual random
order is specific to a given hash; the exact same series of operations
on two hashes may result in a different order for each hash.  Any insertion
into the hash may change the order, as will any deletion, with the exception
that the most recent key returned by L<C<each>|/each HASH> or
L<C<keys>|/keys HASH> may be deleted without changing the order.  So
long as a given hash is unmodified you may rely on
L<C<keys>|/keys HASH>, L<C<values>|/values HASH> and
L<C<each>|/each HASH> to repeatedly return the same order
as each other.  See L<perlsec/"Algorithmic Complexity Attacks"> for
details on why hash order is randomized.  Aside from the guarantees
provided here the exact details of Perl's hash algorithm and the hash
traversal order are subject to change in any release of Perl.

After L<C<each>|/each HASH> has returned all entries from the hash or
array, the next call to L<C<each>|/each HASH> returns the empty list in
list context and L<C<undef>|/undef EXPR> in scalar context; the next
call following I<that> one restarts iteration.  Each hash or array has
its own internal iterator, accessed by L<C<each>|/each HASH>,
L<C<keys>|/keys HASH>, and L<C<values>|/values HASH>.  The iterator is
implicitly reset when L<C<each>|/each HASH> has reached the end as just
described; it can be explicitly reset by calling L<C<keys>|/keys HASH>
or L<C<values>|/values HASH> on the hash or array.  If you add or delete
a hash's elements while iterating over it, the effect on the iterator is
unspecified; for example, entries may be skipped or duplicated--so don't
do that.  Exception: It is always safe to delete the item most recently
returned by L<C<each>|/each HASH>, so the following code works properly:

    while (my ($key, $value) = each %hash) {
        print $key, "\n";
        delete $hash{$key};   # This is safe
    }

Tied hashes may have a different ordering behaviour to perl's hash
implementation.

This prints out your environment like the L<printenv(1)> program,
but in a different order:

    while (my ($key,$value) = each %ENV) {
        print "$key=$value\n";
    }

Starting with Perl 5.14, an experimental feature allowed
L<C<each>|/each HASH> to take a scalar expression. This experiment has
been deemed unsuccessful, and was removed as of Perl 5.24.

As of Perl 5.18 you can use a bare L<C<each>|/each HASH> in a C<while>
loop, which will set L<C<$_>|perlvar/$_> on every iteration.

    while (each %ENV) {
	print "$_=$ENV{$_}\n";
    }

To avoid confusing would-be users of your code who are running earlier
versions of Perl with mysterious syntax errors, put this sort of thing at
the top of your file to signal that your code will work I<only> on Perls of
a recent vintage:

    use 5.012;	# so keys/values/each work on arrays
    use 5.018;	# so each assigns to $_ in a lone while test

See also L<C<keys>|/keys HASH>, L<C<values>|/values HASH>, and
L<C<sort>|/sort SUBNAME LIST>.

=item eof FILEHANDLE
X<eof>
X<end of file>
X<end-of-file>

=item eof ()

=item eof

=for Pod::Functions test a filehandle for its end

Returns 1 if the next read on FILEHANDLE will return end of file I<or> if
FILEHANDLE is not open.  FILEHANDLE may be an expression whose value
gives the real filehandle.  (Note that this function actually
reads a character and then C<ungetc>s it, so isn't useful in an
interactive context.)  Do not read from a terminal file (or call
C<eof(FILEHANDLE)> on it) after end-of-file is reached.  File types such
as terminals may lose the end-of-file condition if you do.

An L<C<eof>|/eof FILEHANDLE> without an argument uses the last file
read.  Using L<C<eof()>|/eof FILEHANDLE> with empty parentheses is
different.  It refers to the pseudo file formed from the files listed on
the command line and accessed via the C<< <> >> operator.  Since
C<< <> >> isn't explicitly opened, as a normal filehandle is, an
L<C<eof()>|/eof FILEHANDLE> before C<< <> >> has been used will cause
L<C<@@ARGV>|perlvar/@@ARGV> to be examined to determine if input is
available.   Similarly, an L<C<eof()>|/eof FILEHANDLE> after C<< <> >>
has returned end-of-file will assume you are processing another
L<C<@@ARGV>|perlvar/@@ARGV> list, and if you haven't set
L<C<@@ARGV>|perlvar/@@ARGV>, will read input from C<STDIN>; see
L<perlop/"I/O Operators">.

In a C<< while (<>) >> loop, L<C<eof>|/eof FILEHANDLE> or C<eof(ARGV)>
can be used to detect the end of each file, whereas
L<C<eof()>|/eof FILEHANDLE> will detect the end of the very last file
only.  Examples:

    # reset line numbering on each input file
    while (<>) {
        next if /^\s*#/;  # skip comments
        print "$.\t$_";
    } continue {
        close ARGV if eof;  # Not eof()!
    }

    # insert dashes just before last line of last file
    while (<>) {
        if (eof()) {  # check for end of last file
            print "--------------\n";
        }
        print;
        last if eof();     # needed if we're reading from a terminal
    }

Practical hint: you almost never need to use L<C<eof>|/eof FILEHANDLE>
in Perl, because the input operators typically return L<C<undef>|/undef
EXPR> when they run out of data or encounter an error.

=item eval EXPR
X<eval> X<try> X<catch> X<evaluate> X<parse> X<execute>
X<error, handling> X<exception, handling>

=item eval BLOCK

=item eval

=for Pod::Functions catch exceptions or compile and run code

In the first form, often referred to as a "string eval", the return
value of EXPR is parsed and executed as if it
were a little Perl program.  The value of the expression (which is itself
determined within scalar context) is first parsed, and if there were no
errors, executed as a block within the lexical context of the current Perl
program.  This means, that in particular, any outer lexical variables are
visible to it, and any package variable settings or subroutine and format
definitions remain afterwards.

Note that the value is parsed every time the L<C<eval>|/eval EXPR>
executes.  If EXPR is omitted, evaluates L<C<$_>|perlvar/$_>.  This form
is typically used to delay parsing and subsequent execution of the text
of EXPR until run time.

If the
L<C<"unicode_eval"> feature|feature/The 'unicode_eval' and 'evalbytes' features>
is enabled (which is the default under a
C<use 5.16> or higher declaration), EXPR or L<C<$_>|perlvar/$_> is
treated as a string of characters, so L<C<use utf8>|utf8> declarations
have no effect, and source filters are forbidden.  In the absence of the
L<C<"unicode_eval"> feature|feature/The 'unicode_eval' and 'evalbytes' features>,
will sometimes be treated as characters and sometimes as bytes,
depending on the internal encoding, and source filters activated within
the L<C<eval>|/eval EXPR> exhibit the erratic, but historical, behaviour
of affecting some outer file scope that is still compiling.  See also
the L<C<evalbytes>|/evalbytes EXPR> operator, which always treats its
input as a byte stream and works properly with source filters, and the
L<feature> pragma.

Problems can arise if the string expands a scalar containing a floating
point number.  That scalar can expand to letters, such as C<"NaN"> or
C<"Infinity">; or, within the scope of a L<C<use locale>|locale>, the
decimal point character may be something other than a dot (such as a
comma).  None of these are likely to parse as you are likely expecting.

In the second form, the code within the BLOCK is parsed only once--at the
same time the code surrounding the L<C<eval>|/eval EXPR> itself was
parsed--and executed
within the context of the current Perl program.  This form is typically
used to trap exceptions more efficiently than the first (see below), while
also providing the benefit of checking the code within BLOCK at compile
time.

The final semicolon, if any, may be omitted from the value of EXPR or within
the BLOCK.

In both forms, the value returned is the value of the last expression
evaluated inside the mini-program; a return statement may be also used, just
as with subroutines.  The expression providing the return value is evaluated
in void, scalar, or list context, depending on the context of the
L<C<eval>|/eval EXPR> itself.  See L<C<wantarray>|/wantarray> for more
on how the evaluation context can be determined.

If there is a syntax error or runtime error, or a L<C<die>|/die LIST>
statement is executed, L<C<eval>|/eval EXPR> returns
L<C<undef>|/undef EXPR> in scalar context or an empty list in list
context, and L<C<$@@>|perlvar/$@@> is set to the error message.  (Prior to
5.16, a bug caused L<C<undef>|/undef EXPR> to be returned in list
context for syntax errors, but not for runtime errors.) If there was no
error, L<C<$@@>|perlvar/$@@> is set to the empty string.  A control flow
operator like L<C<last>|/last LABEL> or L<C<goto>|/goto LABEL> can
bypass the setting of L<C<$@@>|perlvar/$@@>.  Beware that using
L<C<eval>|/eval EXPR> neither silences Perl from printing warnings to
STDERR, nor does it stuff the text of warning messages into
L<C<$@@>|perlvar/$@@>.  To do either of those, you have to use the
L<C<$SIG{__WARN__}>|perlvar/%SIG> facility, or turn off warnings inside
the BLOCK or EXPR using S<C<no warnings 'all'>>.  See
L<C<warn>|/warn LIST>, L<perlvar>, and L<warnings>.

Note that, because L<C<eval>|/eval EXPR> traps otherwise-fatal errors,
it is useful for determining whether a particular feature (such as
L<C<socket>|/socket SOCKET,DOMAIN,TYPE,PROTOCOL> or
L<C<symlink>|/symlink OLDFILE,NEWFILE>) is implemented.  It is also
Perl's exception-trapping mechanism, where the L<C<die>|/die LIST>
operator is used to raise exceptions.

If you want to trap errors when loading an XS module, some problems with
the binary interface (such as Perl version skew) may be fatal even with
L<C<eval>|/eval EXPR> unless C<$ENV{PERL_DL_NONLAZY}> is set.  See
L<perlrun>.

If the code to be executed doesn't vary, you may use the eval-BLOCK
form to trap run-time errors without incurring the penalty of
recompiling each time.  The error, if any, is still returned in
L<C<$@@>|perlvar/$@@>.
Examples:

    # make divide-by-zero nonfatal
    eval { $answer = $a / $b; }; warn $@@ if $@@;

    # same thing, but less efficient
    eval '$answer = $a / $b'; warn $@@ if $@@;

    # a compile-time error
    eval { $answer = }; # WRONG

    # a run-time error
    eval '$answer =';   # sets $@@

Using the C<eval {}> form as an exception trap in libraries does have some
issues.  Due to the current arguably broken state of C<__DIE__> hooks, you
may wish not to trigger any C<__DIE__> hooks that user code may have installed.
You can use the C<local $SIG{__DIE__}> construct for this purpose,
as this example shows:

    # a private exception trap for divide-by-zero
    eval { local $SIG{'__DIE__'}; $answer = $a / $b; };
    warn $@@ if $@@;

This is especially significant, given that C<__DIE__> hooks can call
L<C<die>|/die LIST> again, which has the effect of changing their error
messages:

    # __DIE__ hooks may modify error messages
    {
       local $SIG{'__DIE__'} =
              sub { (my $x = $_[0]) =~ s/foo/bar/g; die $x };
       eval { die "foo lives here" };
       print $@@ if $@@;                # prints "bar lives here"
    }

Because this promotes action at a distance, this counterintuitive behavior
may be fixed in a future release.

With an L<C<eval>|/eval EXPR>, you should be especially careful to
remember what's being looked at when:

    eval $x;        # CASE 1
    eval "$x";      # CASE 2

    eval '$x';      # CASE 3
    eval { $x };    # CASE 4

    eval "\$$x++";  # CASE 5
    $$x++;          # CASE 6

Cases 1 and 2 above behave identically: they run the code contained in
the variable $x.  (Although case 2 has misleading double quotes making
the reader wonder what else might be happening (nothing is).)  Cases 3
and 4 likewise behave in the same way: they run the code C<'$x'>, which
does nothing but return the value of $x.  (Case 4 is preferred for
purely visual reasons, but it also has the advantage of compiling at
compile-time instead of at run-time.)  Case 5 is a place where
normally you I<would> like to use double quotes, except that in this
particular situation, you can just use symbolic references instead, as
in case 6.

Before Perl 5.14, the assignment to L<C<$@@>|perlvar/$@@> occurred before
restoration
of localized variables, which means that for your code to run on older
versions, a temporary is required if you want to mask some but not all
errors:

    # alter $@@ on nefarious repugnancy only
    {
       my $e;
       {
         local $@@; # protect existing $@@
         eval { test_repugnancy() };
         # $@@ =~ /nefarious/ and die $@@; # Perl 5.14 and higher only
         $@@ =~ /nefarious/ and $e = $@@;
       }
       die $e if defined $e
    }

C<eval BLOCK> does I<not> count as a loop, so the loop control statements
L<C<next>|/next LABEL>, L<C<last>|/last LABEL>, or
L<C<redo>|/redo LABEL> cannot be used to leave or restart the block.

An C<eval ''> executed within a subroutine defined
in the C<DB> package doesn't see the usual
surrounding lexical scope, but rather the scope of the first non-DB piece
of code that called it.  You don't normally need to worry about this unless
you are writing a Perl debugger.

=item evalbytes EXPR
X<evalbytes>

=item evalbytes

=for Pod::Functions +evalbytes similar to string eval, but intend to parse a bytestream

This function is like L<C<eval>|/eval EXPR> with a string argument,
except it always parses its argument, or L<C<$_>|perlvar/$_> if EXPR is
omitted, as a string of bytes.  A string containing characters whose
ordinal value exceeds 255 results in an error.  Source filters activated
within the evaluated code apply to the code itself.

L<C<evalbytes>|/evalbytes EXPR> is available only if the
L<C<"evalbytes"> feature|feature/The 'unicode_eval' and 'evalbytes' features>
is enabled or if it is prefixed with C<CORE::>.  The
L<C<"evalbytes"> feature|feature/The 'unicode_eval' and 'evalbytes' features>
is enabled automatically with a C<use v5.16> (or higher) declaration in
the current scope.

=item exec LIST
X<exec> X<execute>

=item exec PROGRAM LIST

=for Pod::Functions abandon this program to run another

The L<C<exec>|/exec LIST> function executes a system command I<and never
returns>; use L<C<system>|/system LIST> instead of L<C<exec>|/exec LIST>
if you want it to return.  It fails and
returns false only if the command does not exist I<and> it is executed
directly instead of via your system's command shell (see below).

Since it's a common mistake to use L<C<exec>|/exec LIST> instead of
L<C<system>|/system LIST>, Perl warns you if L<C<exec>|/exec LIST> is
called in void context and if there is a following statement that isn't
L<C<die>|/die LIST>, L<C<warn>|/warn LIST>, or L<C<exit>|/exit EXPR> (if
L<warnings> are enabled--but you always do that, right?).  If you
I<really> want to follow an L<C<exec>|/exec LIST> with some other
statement, you can use one of these styles to avoid the warning:

    exec ('foo')   or print STDERR "couldn't exec foo: $!";
    { exec ('foo') }; print STDERR "couldn't exec foo: $!";

If there is more than one argument in LIST, this calls L<execvp(3)> with the
arguments in LIST.  If there is only one element in LIST, the argument is
checked for shell metacharacters, and if there are any, the entire
argument is passed to the system's command shell for parsing (this is
C</bin/sh -c> on Unix platforms, but varies on other platforms).  If
there are no shell metacharacters in the argument, it is split into words
and passed directly to C<execvp>, which is more efficient.  Examples:

    exec '/bin/echo', 'Your arguments are: ', @@ARGV;
    exec "sort $outfile | uniq";

If you don't really want to execute the first argument, but want to lie
to the program you are executing about its own name, you can specify
the program you actually want to run as an "indirect object" (without a
comma) in front of the LIST, as in C<exec PROGRAM LIST>.  (This always
forces interpretation of the LIST as a multivalued list, even if there
is only a single scalar in the list.)  Example:

    my $shell = '/bin/csh';
    exec $shell '-sh';    # pretend it's a login shell

or, more directly,

    exec {'/bin/csh'} '-sh';  # pretend it's a login shell

When the arguments get executed via the system shell, results are
subject to its quirks and capabilities.  See L<perlop/"`STRING`">
for details.

Using an indirect object with L<C<exec>|/exec LIST> or
L<C<system>|/system LIST> is also more secure.  This usage (which also
works fine with L<C<system>|/system LIST>) forces
interpretation of the arguments as a multivalued list, even if the
list had just one argument.  That way you're safe from the shell
expanding wildcards or splitting up words with whitespace in them.

    my @@args = ( "echo surprise" );

    exec @@args;               # subject to shell escapes
                                # if @@args == 1
    exec { $args[0] } @@args;  # safe even with one-arg list

The first version, the one without the indirect object, ran the I<echo>
program, passing it C<"surprise"> an argument.  The second version didn't;
it tried to run a program named I<"echo surprise">, didn't find it, and set
L<C<$?>|perlvar/$?> to a non-zero value indicating failure.

On Windows, only the C<exec PROGRAM LIST> indirect object syntax will
reliably avoid using the shell; C<exec LIST>, even with more than one
element, will fall back to the shell if the first spawn fails.

Perl attempts to flush all files opened for output before the exec,
but this may not be supported on some platforms (see L<perlport>).
To be safe, you may need to set L<C<$E<verbar>>|perlvar/$E<verbar>>
(C<$AUTOFLUSH> in L<English>) or call the C<autoflush> method of
L<C<IO::Handle>|IO::Handle/METHODS> on any open handles to avoid lost
output.

Note that L<C<exec>|/exec LIST> will not call your C<END> blocks, nor
will it invoke C<DESTROY> methods on your objects.

Portability issues: L<perlport/exec>.

=item exists EXPR
X<exists> X<autovivification>

=for Pod::Functions test whether a hash key is present

Given an expression that specifies an element of a hash, returns true if the
specified element in the hash has ever been initialized, even if the
corresponding value is undefined.

    print "Exists\n"    if exists $hash{$key};
    print "Defined\n"   if defined $hash{$key};
    print "True\n"      if $hash{$key};

exists may also be called on array elements, but its behavior is much less
obvious and is strongly tied to the use of L<C<delete>|/delete EXPR> on
arrays.

B<WARNING:> Calling L<C<exists>|/exists EXPR> on array values is
strongly discouraged.  The
notion of deleting or checking the existence of Perl array elements is not
conceptually coherent, and can lead to surprising behavior.

    print "Exists\n"    if exists $array[$index];
    print "Defined\n"   if defined $array[$index];
    print "True\n"      if $array[$index];

A hash or array element can be true only if it's defined and defined only if
it exists, but the reverse doesn't necessarily hold true.

Given an expression that specifies the name of a subroutine,
returns true if the specified subroutine has ever been declared, even
if it is undefined.  Mentioning a subroutine name for exists or defined
does not count as declaring it.  Note that a subroutine that does not
exist may still be callable: its package may have an C<AUTOLOAD>
method that makes it spring into existence the first time that it is
called; see L<perlsub>.

    print "Exists\n"  if exists &subroutine;
    print "Defined\n" if defined &subroutine;

Note that the EXPR can be arbitrarily complicated as long as the final
operation is a hash or array key lookup or subroutine name:

    if (exists $ref->{A}->{B}->{$key})  { }
    if (exists $hash{A}{B}{$key})       { }

    if (exists $ref->{A}->{B}->[$ix])   { }
    if (exists $hash{A}{B}[$ix])        { }

    if (exists &{$ref->{A}{B}{$key}})   { }

Although the most deeply nested array or hash element will not spring into
existence just because its existence was tested, any intervening ones will.
Thus C<< $ref->{"A"} >> and C<< $ref->{"A"}->{"B"} >> will spring
into existence due to the existence test for the C<$key> element above.
This happens anywhere the arrow operator is used, including even here:

    undef $ref;
    if (exists $ref->{"Some key"})    { }
    print $ref;  # prints HASH(0x80d3d5c)

This surprising autovivification in what does not at first--or even
second--glance appear to be an lvalue context may be fixed in a future
release.

Use of a subroutine call, rather than a subroutine name, as an argument
to L<C<exists>|/exists EXPR> is an error.

    exists &sub;    # OK
    exists &sub();  # Error

=item exit EXPR
X<exit> X<terminate> X<abort>

=item exit

=for Pod::Functions terminate this program

Evaluates EXPR and exits immediately with that value.    Example:

    my $ans = <STDIN>;
    exit 0 if $ans =~ /^[Xx]/;

See also L<C<die>|/die LIST>.  If EXPR is omitted, exits with C<0>
status.  The only
universally recognized values for EXPR are C<0> for success and C<1>
for error; other values are subject to interpretation depending on the
environment in which the Perl program is running.  For example, exiting
69 (EX_UNAVAILABLE) from a I<sendmail> incoming-mail filter will cause
the mailer to return the item undelivered, but that's not true everywhere.

Don't use L<C<exit>|/exit EXPR> to abort a subroutine if there's any
chance that someone might want to trap whatever error happened.  Use
L<C<die>|/die LIST> instead, which can be trapped by an
L<C<eval>|/eval EXPR>.

The L<C<exit>|/exit EXPR> function does not always exit immediately.  It
calls any defined C<END> routines first, but these C<END> routines may
not themselves abort the exit.  Likewise any object destructors that
need to be called are called before the real exit.  C<END> routines and
destructors can change the exit status by modifying L<C<$?>|perlvar/$?>.
If this is a problem, you can call
L<C<POSIX::_exit($status)>|POSIX/C<_exit>> to avoid C<END> and destructor
processing.  See L<perlmod> for details.

Portability issues: L<perlport/exit>.

=item exp EXPR
X<exp> X<exponential> X<antilog> X<antilogarithm> X<e>

=item exp

=for Pod::Functions raise I<e> to a power

Returns I<e> (the natural logarithm base) to the power of EXPR.
If EXPR is omitted, gives C<exp($_)>.

=item fc EXPR
X<fc> X<foldcase> X<casefold> X<fold-case> X<case-fold>

=item fc

=for Pod::Functions +fc return casefolded version of a string

Returns the casefolded version of EXPR.  This is the internal function
implementing the C<\F> escape in double-quoted strings.

Casefolding is the process of mapping strings to a form where case
differences are erased; comparing two strings in their casefolded
form is effectively a way of asking if two strings are equal,
regardless of case.

Roughly, if you ever found yourself writing this

    lc($this) eq lc($that)    # Wrong!
        # or
    uc($this) eq uc($that)    # Also wrong!
        # or
    $this =~ /^\Q$that\E\z/i  # Right!

Now you can write

    fc($this) eq fc($that)

And get the correct results.

Perl only implements the full form of casefolding, but you can access
the simple folds using L<Unicode::UCD/B<casefold()>> and
L<Unicode::UCD/B<prop_invmap()>>.
For further information on casefolding, refer to
the Unicode Standard, specifically sections 3.13 C<Default Case Operations>,
4.2 C<Case-Normative>, and 5.18 C<Case Mappings>,
available at L<http://www.unicode.org/versions/latest/>, as well as the
Case Charts available at L<http://www.unicode.org/charts/case/>.

If EXPR is omitted, uses L<C<$_>|perlvar/$_>.

This function behaves the same way under various pragmas, such as within
L<S<C<"use feature 'unicode_strings">>|feature/The 'unicode_strings' feature>,
as L<C<lc>|/lc EXPR> does, with the single exception of
L<C<fc>|/fc EXPR> of I<LATIN CAPITAL LETTER SHARP S> (U+1E9E) within the
scope of L<S<C<use locale>>|locale>.  The foldcase of this character
would normally be C<"ss">, but as explained in the L<C<lc>|/lc EXPR>
section, case
changes that cross the 255/256 boundary are problematic under locales,
and are hence prohibited.  Therefore, this function under locale returns
instead the string C<"\x{17F}\x{17F}">, which is the I<LATIN SMALL LETTER
LONG S>.  Since that character itself folds to C<"s">, the string of two
of them together should be equivalent to a single U+1E9E when foldcased.

While the Unicode Standard defines two additional forms of casefolding,
one for Turkic languages and one that never maps one character into multiple
characters, these are not provided by the Perl core.  However, the CPAN module
L<C<Unicode::Casing>|Unicode::Casing> may be used to provide an implementation.

L<C<fc>|/fc EXPR> is available only if the
L<C<"fc"> feature|feature/The 'fc' feature> is enabled or if it is
prefixed with C<CORE::>.  The
L<C<"fc"> feature|feature/The 'fc' feature> is enabled automatically
with a C<use v5.16> (or higher) declaration in the current scope.

=item fcntl FILEHANDLE,FUNCTION,SCALAR
X<fcntl>

=for Pod::Functions file control system call

Implements the L<fcntl(2)> function.  You'll probably have to say

    use Fcntl;

first to get the correct constant definitions.  Argument processing and
value returned work just like L<C<ioctl>|/ioctl
FILEHANDLE,FUNCTION,SCALAR> below.  For example:

    use Fcntl;
    my $flags = fcntl($filehandle, F_GETFL, 0)
        or die "Can't fcntl F_GETFL: $!";

You don't have to check for L<C<defined>|/defined EXPR> on the return
from L<C<fcntl>|/fcntl FILEHANDLE,FUNCTION,SCALAR>.  Like
L<C<ioctl>|/ioctl FILEHANDLE,FUNCTION,SCALAR>, it maps a C<0> return
from the system call into C<"0 but true"> in Perl.  This string is true
in boolean context and C<0> in numeric context.  It is also exempt from
the normal
L<C<Argument "..." isn't numeric>|perldiag/Argument "%s" isn't numeric%s>
L<warnings> on improper numeric conversions.

Note that L<C<fcntl>|/fcntl FILEHANDLE,FUNCTION,SCALAR> raises an
exception if used on a machine that doesn't implement L<fcntl(2)>.  See
the L<Fcntl> module or your L<fcntl(2)> manpage to learn what functions
are available on your system.

Here's an example of setting a filehandle named C<$REMOTE> to be
non-blocking at the system level.  You'll have to negotiate
L<C<$E<verbar>>|perlvar/$E<verbar>> on your own, though.

    use Fcntl qw(F_GETFL F_SETFL O_NONBLOCK);

    my $flags = fcntl($REMOTE, F_GETFL, 0)
        or die "Can't get flags for the socket: $!\n";

    fcntl($REMOTE, F_SETFL, $flags | O_NONBLOCK)
        or die "Can't set flags for the socket: $!\n";

Portability issues: L<perlport/fcntl>.

=item __FILE__
X<__FILE__>

=for Pod::Functions the name of the current source file

A special token that returns the name of the file in which it occurs.

=item fileno FILEHANDLE
X<fileno>

=for Pod::Functions return file descriptor from filehandle

Returns the file descriptor for a filehandle, or undefined if the
filehandle is not open.  If there is no real file descriptor at the OS
level, as can happen with filehandles connected to memory objects via
L<C<open>|/open FILEHANDLE,EXPR> with a reference for the third
argument, -1 is returned.

This is mainly useful for constructing bitmaps for
L<C<select>|/select RBITS,WBITS,EBITS,TIMEOUT> and low-level POSIX
tty-handling operations.
If FILEHANDLE is an expression, the value is taken as an indirect
filehandle, generally its name.

You can use this to find out whether two handles refer to the
same underlying descriptor:

    if (fileno($this) != -1 && fileno($this) == fileno($that)) {
        print "\$this and \$that are dups\n";
    } elsif (fileno($this) != -1 && fileno($that) != -1) {
        print "\$this and \$that have different " .
            "underlying file descriptors\n";
    } else {
        print "At least one of \$this and \$that does " .
            "not have a real file descriptor\n";
    }

The behavior of L<C<fileno>|/fileno FILEHANDLE> on a directory handle
depends on the operating system.  On a system with L<dirfd(3)> or
similar, L<C<fileno>|/fileno FILEHANDLE> on a directory
handle returns the underlying file descriptor associated with the
handle; on systems with no such support, it returns the undefined value,
and sets L<C<$!>|perlvar/$!> (errno).

=item flock FILEHANDLE,OPERATION
X<flock> X<lock> X<locking>

=for Pod::Functions lock an entire file with an advisory lock

Calls L<flock(2)>, or an emulation of it, on FILEHANDLE.  Returns true
for success, false on failure.  Produces a fatal error if used on a
machine that doesn't implement L<flock(2)>, L<fcntl(2)> locking, or
L<lockf(3)>.  L<C<flock>|/flock FILEHANDLE,OPERATION> is Perl's portable
file-locking interface, although it locks entire files only, not
records.

Two potentially non-obvious but traditional L<C<flock>|/flock
FILEHANDLE,OPERATION> semantics are
that it waits indefinitely until the lock is granted, and that its locks
are B<merely advisory>.  Such discretionary locks are more flexible, but
offer fewer guarantees.  This means that programs that do not also use
L<C<flock>|/flock FILEHANDLE,OPERATION> may modify files locked with
L<C<flock>|/flock FILEHANDLE,OPERATION>.  See L<perlport>,
your port's specific documentation, and your system-specific local manpages
for details.  It's best to assume traditional behavior if you're writing
portable programs.  (But if you're not, you should as always feel perfectly
free to write for your own system's idiosyncrasies (sometimes called
"features").  Slavish adherence to portability concerns shouldn't get
in the way of your getting your job done.)

OPERATION is one of LOCK_SH, LOCK_EX, or LOCK_UN, possibly combined with
LOCK_NB.  These constants are traditionally valued 1, 2, 8 and 4, but
you can use the symbolic names if you import them from the L<Fcntl> module,
either individually, or as a group using the C<:flock> tag.  LOCK_SH
requests a shared lock, LOCK_EX requests an exclusive lock, and LOCK_UN
releases a previously requested lock.  If LOCK_NB is bitwise-or'ed with
LOCK_SH or LOCK_EX, then L<C<flock>|/flock FILEHANDLE,OPERATION> returns
immediately rather than blocking waiting for the lock; check the return
status to see if you got it.

To avoid the possibility of miscoordination, Perl now flushes FILEHANDLE
before locking or unlocking it.

Note that the emulation built with L<lockf(3)> doesn't provide shared
locks, and it requires that FILEHANDLE be open with write intent.  These
are the semantics that L<lockf(3)> implements.  Most if not all systems
implement L<lockf(3)> in terms of L<fcntl(2)> locking, though, so the
differing semantics shouldn't bite too many people.

Note that the L<fcntl(2)> emulation of L<flock(3)> requires that FILEHANDLE
be open with read intent to use LOCK_SH and requires that it be open
with write intent to use LOCK_EX.

Note also that some versions of L<C<flock>|/flock FILEHANDLE,OPERATION>
cannot lock things over the network; you would need to use the more
system-specific L<C<fcntl>|/fcntl FILEHANDLE,FUNCTION,SCALAR> for
that.  If you like you can force Perl to ignore your system's L<flock(2)>
function, and so provide its own L<fcntl(2)>-based emulation, by passing
the switch C<-Ud_flock> to the F<Configure> program when you configure
and build a new Perl.

Here's a mailbox appender for BSD systems.

    # import LOCK_* and SEEK_END constants
    use Fcntl qw(:flock SEEK_END);

    sub lock {
        my ($fh) = @@_;
        flock($fh, LOCK_EX) or die "Cannot lock mailbox - $!\n";

        # and, in case someone appended while we were waiting...
        seek($fh, 0, SEEK_END) or die "Cannot seek - $!\n";
    }

    sub unlock {
        my ($fh) = @@_;
        flock($fh, LOCK_UN) or die "Cannot unlock mailbox - $!\n";
    }

    open(my $mbox, ">>", "/usr/spool/mail/$ENV{'USER'}")
        or die "Can't open mailbox: $!";

    lock($mbox);
    print $mbox $msg,"\n\n";
    unlock($mbox);

On systems that support a real L<flock(2)>, locks are inherited across
L<C<fork>|/fork> calls, whereas those that must resort to the more
capricious L<fcntl(2)> function lose their locks, making it seriously
harder to write servers.

See also L<DB_File> for other L<C<flock>|/flock FILEHANDLE,OPERATION>
examples.

Portability issues: L<perlport/flock>.

=item fork
X<fork> X<child> X<parent>

=for Pod::Functions create a new process just like this one

Does a L<fork(2)> system call to create a new process running the
same program at the same point.  It returns the child pid to the
parent process, C<0> to the child process, or L<C<undef>|/undef EXPR> if
the fork is
unsuccessful.  File descriptors (and sometimes locks on those descriptors)
are shared, while everything else is copied.  On most systems supporting
L<fork(2)>, great care has gone into making it extremely efficient (for
example, using copy-on-write technology on data pages), making it the
dominant paradigm for multitasking over the last few decades.

Perl attempts to flush all files opened for output before forking the
child process, but this may not be supported on some platforms (see
L<perlport>).  To be safe, you may need to set
L<C<$E<verbar>>|perlvar/$E<verbar>> (C<$AUTOFLUSH> in L<English>) or
call the C<autoflush> method of L<C<IO::Handle>|IO::Handle/METHODS> on
any open handles to avoid duplicate output.

If you L<C<fork>|/fork> without ever waiting on your children, you will
accumulate zombies.  On some systems, you can avoid this by setting
L<C<$SIG{CHLD}>|perlvar/%SIG> to C<"IGNORE">.  See also L<perlipc> for
more examples of forking and reaping moribund children.

Note that if your forked child inherits system file descriptors like
STDIN and STDOUT that are actually connected by a pipe or socket, even
if you exit, then the remote server (such as, say, a CGI script or a
backgrounded job launched from a remote shell) won't think you're done.
You should reopen those to F</dev/null> if it's any issue.

On some platforms such as Windows, where the L<fork(2)> system call is
not available, Perl can be built to emulate L<C<fork>|/fork> in the Perl
interpreter.  The emulation is designed, at the level of the Perl
program, to be as compatible as possible with the "Unix" L<fork(2)>.
However it has limitations that have to be considered in code intended
to be portable.  See L<perlfork> for more details.

Portability issues: L<perlport/fork>.

=item format
X<format>

=for Pod::Functions declare a picture format with use by the write() function

Declare a picture format for use by the L<C<write>|/write FILEHANDLE>
function.  For example:

    format Something =
        Test: @@<<<<<<<< @@||||| @@>>>>>
              $str,     $%,    '$' . int($num)
    .

    $str = "widget";
    $num = $cost/$quantity;
    $~ = 'Something';
    write;

See L<perlform> for many details and examples.

=item formline PICTURE,LIST
X<formline>

=for Pod::Functions internal function used for formats

This is an internal function used by L<C<format>|/format>s, though you
may call it, too.  It formats (see L<perlform>) a list of values
according to the contents of PICTURE, placing the output into the format
output accumulator, L<C<$^A>|perlvar/$^A> (or C<$ACCUMULATOR> in
L<English>).  Eventually, when a L<C<write>|/write FILEHANDLE> is done,
the contents of L<C<$^A>|perlvar/$^A> are written to some filehandle.
You could also read L<C<$^A>|perlvar/$^A> and then set
L<C<$^A>|perlvar/$^A> back to C<"">.  Note that a format typically does
one L<C<formline>|/formline PICTURE,LIST> per line of form, but the
L<C<formline>|/formline PICTURE,LIST> function itself doesn't care how
many newlines are embedded in the PICTURE.  This means that the C<~> and
C<~~> tokens treat the entire PICTURE as a single line.  You may
therefore need to use multiple formlines to implement a single record
format, just like the L<C<format>|/format> compiler.

Be careful if you put double quotes around the picture, because an C<@@>
character may be taken to mean the beginning of an array name.
L<C<formline>|/formline PICTURE,LIST> always returns true.  See
L<perlform> for other examples.

If you are trying to use this instead of L<C<write>|/write FILEHANDLE>
to capture the output, you may find it easier to open a filehandle to a
scalar (C<< open my $fh, ">", \$output >>) and write to that instead.

=item getc FILEHANDLE
X<getc> X<getchar> X<character> X<file, read>

=item getc

=for Pod::Functions get the next character from the filehandle

Returns the next character from the input file attached to FILEHANDLE,
or the undefined value at end of file or if there was an error (in
the latter case L<C<$!>|perlvar/$!> is set).  If FILEHANDLE is omitted,
reads from
STDIN.  This is not particularly efficient.  However, it cannot be
used by itself to fetch single characters without waiting for the user
to hit enter.  For that, try something more like:

    if ($BSD_STYLE) {
        system "stty cbreak </dev/tty >/dev/tty 2>&1";
    }
    else {
        system "stty", '-icanon', 'eol', "\001";
    }

    my $key = getc(STDIN);

    if ($BSD_STYLE) {
        system "stty -cbreak </dev/tty >/dev/tty 2>&1";
    }
    else {
        system 'stty', 'icanon', 'eol', '^@@'; # ASCII NUL
    }
    print "\n";

Determination of whether C<$BSD_STYLE> should be set is left as an
exercise to the reader.

The L<C<POSIX::getattr>|POSIX/C<getattr>> function can do this more
portably on systems purporting POSIX compliance.  See also the
L<C<Term::ReadKey>|Term::ReadKey> module on CPAN.

=item getlogin
X<getlogin> X<login>

=for Pod::Functions return who logged in at this tty

This implements the C library function of the same name, which on most
systems returns the current login from F</etc/utmp>, if any.  If it
returns the empty string, use L<C<getpwuid>|/getpwuid UID>.

    my $login = getlogin || getpwuid($<) || "Kilroy";

Do not consider L<C<getlogin>|/getlogin> for authentication: it is not
as secure as L<C<getpwuid>|/getpwuid UID>.

Portability issues: L<perlport/getlogin>.

=item getpeername SOCKET
X<getpeername> X<peer>

=for Pod::Functions find the other end of a socket connection

Returns the packed sockaddr address of the other end of the SOCKET
connection.

    use Socket;
    my $hersockaddr    = getpeername($sock);
    my ($port, $iaddr) = sockaddr_in($hersockaddr);
    my $herhostname    = gethostbyaddr($iaddr, AF_INET);
    my $herstraddr     = inet_ntoa($iaddr);

=item getpgrp PID
X<getpgrp> X<group>

=for Pod::Functions get process group

Returns the current process group for the specified PID.  Use
a PID of C<0> to get the current process group for the
current process.  Will raise an exception if used on a machine that
doesn't implement L<getpgrp(2)>.  If PID is omitted, returns the process
group of the current process.  Note that the POSIX version of
L<C<getpgrp>|/getpgrp PID> does not accept a PID argument, so only
C<PID==0> is truly portable.

Portability issues: L<perlport/getpgrp>.

=item getppid
X<getppid> X<parent> X<pid>

=for Pod::Functions get parent process ID

Returns the process id of the parent process.

Note for Linux users: Between v5.8.1 and v5.16.0 Perl would work
around non-POSIX thread semantics the minority of Linux systems (and
Debian GNU/kFreeBSD systems) that used LinuxThreads, this emulation
has since been removed.  See the documentation for L<$$|perlvar/$$> for
details.

Portability issues: L<perlport/getppid>.

=item getpriority WHICH,WHO
X<getpriority> X<priority> X<nice>

=for Pod::Functions get current nice value

Returns the current priority for a process, a process group, or a user.
(See L<getpriority(2)>.)  Will raise a fatal exception if used on a
machine that doesn't implement L<getpriority(2)>.

Portability issues: L<perlport/getpriority>.

=item getpwnam NAME
X<getpwnam> X<getgrnam> X<gethostbyname> X<getnetbyname> X<getprotobyname>
X<getpwuid> X<getgrgid> X<getservbyname> X<gethostbyaddr> X<getnetbyaddr>
X<getprotobynumber> X<getservbyport> X<getpwent> X<getgrent> X<gethostent>
X<getnetent> X<getprotoent> X<getservent> X<setpwent> X<setgrent> X<sethostent>
X<setnetent> X<setprotoent> X<setservent> X<endpwent> X<endgrent> X<endhostent>
X<endnetent> X<endprotoent> X<endservent>

=for Pod::Functions get passwd record given user login name

=item getgrnam NAME

=for Pod::Functions get group record given group name

=item gethostbyname NAME

=for Pod::Functions get host record given name

=item getnetbyname NAME

=for Pod::Functions get networks record given name

=item getprotobyname NAME

=for Pod::Functions get protocol record given name

=item getpwuid UID

=for Pod::Functions get passwd record given user ID

=item getgrgid GID

=for Pod::Functions get group record given group user ID

=item getservbyname NAME,PROTO

=for Pod::Functions get services record given its name

=item gethostbyaddr ADDR,ADDRTYPE

=for Pod::Functions get host record given its address

=item getnetbyaddr ADDR,ADDRTYPE

=for Pod::Functions get network record given its address

=item getprotobynumber NUMBER

=for Pod::Functions get protocol record numeric protocol

=item getservbyport PORT,PROTO

=for Pod::Functions get services record given numeric port

=item getpwent

=for Pod::Functions get next passwd record

=item getgrent

=for Pod::Functions get next group record

=item gethostent

=for Pod::Functions get next hosts record

=item getnetent

=for Pod::Functions get next networks record

=item getprotoent

=for Pod::Functions get next protocols record

=item getservent

=for Pod::Functions get next services record

=item setpwent

=for Pod::Functions prepare passwd file for use

=item setgrent

=for Pod::Functions prepare group file for use

=item sethostent STAYOPEN

=for Pod::Functions prepare hosts file for use

=item setnetent STAYOPEN

=for Pod::Functions prepare networks file for use

=item setprotoent STAYOPEN

=for Pod::Functions prepare protocols file for use

=item setservent STAYOPEN

=for Pod::Functions prepare services file for use

=item endpwent

=for Pod::Functions be done using passwd file

=item endgrent

=for Pod::Functions be done using group file

=item endhostent

=for Pod::Functions be done using hosts file

=item endnetent

=for Pod::Functions be done using networks file

=item endprotoent

=for Pod::Functions be done using protocols file

=item endservent

=for Pod::Functions be done using services file

These routines are the same as their counterparts in the
system C library.  In list context, the return values from the
various get routines are as follows:

 #    0        1          2           3         4
 my ( $name,   $passwd,   $gid,       $members  ) = getgr*
 my ( $name,   $aliases,  $addrtype,  $net      ) = getnet*
 my ( $name,   $aliases,  $port,      $proto    ) = getserv*
 my ( $name,   $aliases,  $proto                ) = getproto*
 my ( $name,   $aliases,  $addrtype,  $length,  @@addrs ) = gethost*
 my ( $name,   $passwd,   $uid,       $gid,     $quota,
    $comment,  $gcos,     $dir,       $shell,   $expire ) = getpw*
 #    5        6          7           8         9

(If the entry doesn't exist, the return value is a single meaningless true
value.)

The exact meaning of the $gcos field varies but it usually contains
the real name of the user (as opposed to the login name) and other
information pertaining to the user.  Beware, however, that in many
system users are able to change this information and therefore it
cannot be trusted and therefore the $gcos is tainted (see
L<perlsec>).  The $passwd and $shell, user's encrypted password and
login shell, are also tainted, for the same reason.

In scalar context, you get the name, unless the function was a
lookup by name, in which case you get the other thing, whatever it is.
(If the entry doesn't exist you get the undefined value.)  For example:

    my $uid   = getpwnam($name);
    my $name  = getpwuid($num);
    my $name  = getpwent();
    my $gid   = getgrnam($name);
    my $name  = getgrgid($num);
    my $name  = getgrent();
    # etc.

In I<getpw*()> the fields $quota, $comment, and $expire are special
in that they are unsupported on many systems.  If the
$quota is unsupported, it is an empty scalar.  If it is supported, it
usually encodes the disk quota.  If the $comment field is unsupported,
it is an empty scalar.  If it is supported it usually encodes some
administrative comment about the user.  In some systems the $quota
field may be $change or $age, fields that have to do with password
aging.  In some systems the $comment field may be $class.  The $expire
field, if present, encodes the expiration period of the account or the
password.  For the availability and the exact meaning of these fields
in your system, please consult L<getpwnam(3)> and your system's
F<pwd.h> file.  You can also find out from within Perl what your
$quota and $comment fields mean and whether you have the $expire field
by using the L<C<Config>|Config> module and the values C<d_pwquota>, C<d_pwage>,
C<d_pwchange>, C<d_pwcomment>, and C<d_pwexpire>.  Shadow password
files are supported only if your vendor has implemented them in the
intuitive fashion that calling the regular C library routines gets the
shadow versions if you're running under privilege or if there exists
the L<shadow(3)> functions as found in System V (this includes Solaris
and Linux).  Those systems that implement a proprietary shadow password
facility are unlikely to be supported.

The $members value returned by I<getgr*()> is a space-separated list of
the login names of the members of the group.

For the I<gethost*()> functions, if the C<h_errno> variable is supported in
C, it will be returned to you via L<C<$?>|perlvar/$?> if the function
call fails.  The
C<@@addrs> value returned by a successful call is a list of raw
addresses returned by the corresponding library call.  In the
Internet domain, each address is four bytes long; you can unpack it
by saying something like:

    my ($w,$x,$y,$z) = unpack('W4',$addr[0]);

The Socket library makes this slightly easier:

    use Socket;
    my $iaddr = inet_aton("127.1"); # or whatever address
    my $name  = gethostbyaddr($iaddr, AF_INET);

    # or going the other way
    my $straddr = inet_ntoa($iaddr);

In the opposite way, to resolve a hostname to the IP address
you can write this:

    use Socket;
    my $packed_ip = gethostbyname("www.perl.org");
    my $ip_address;
    if (defined $packed_ip) {
        $ip_address = inet_ntoa($packed_ip);
    }

Make sure L<C<gethostbyname>|/gethostbyname NAME> is called in SCALAR
context and that its return value is checked for definedness.

The L<C<getprotobynumber>|/getprotobynumber NUMBER> function, even
though it only takes one argument, has the precedence of a list
operator, so beware:

    getprotobynumber $number eq 'icmp'   # WRONG
    getprotobynumber($number eq 'icmp')  # actually means this
    getprotobynumber($number) eq 'icmp'  # better this way

If you get tired of remembering which element of the return list
contains which return value, by-name interfaces are provided in standard
modules: L<C<File::stat>|File::stat>, L<C<Net::hostent>|Net::hostent>,
L<C<Net::netent>|Net::netent>, L<C<Net::protoent>|Net::protoent>,
L<C<Net::servent>|Net::servent>, L<C<Time::gmtime>|Time::gmtime>,
L<C<Time::localtime>|Time::localtime>, and
L<C<User::grent>|User::grent>.  These override the normal built-ins,
supplying versions that return objects with the appropriate names for
each field.  For example:

   use File::stat;
   use User::pwent;
   my $is_his = (stat($filename)->uid == pwent($whoever)->uid);

Even though it looks as though they're the same method calls (uid),
they aren't, because a C<File::stat> object is different from
a C<User::pwent> object.

Portability issues: L<perlport/getpwnam> to L<perlport/endservent>.

=item getsockname SOCKET
X<getsockname>

=for Pod::Functions retrieve the sockaddr for a given socket

Returns the packed sockaddr address of this end of the SOCKET connection,
in case you don't know the address because you have several different
IPs that the connection might have come in on.

    use Socket;
    my $mysockaddr = getsockname($sock);
    my ($port, $myaddr) = sockaddr_in($mysockaddr);
    printf "Connect to %s [%s]\n",
       scalar gethostbyaddr($myaddr, AF_INET),
       inet_ntoa($myaddr);

=item getsockopt SOCKET,LEVEL,OPTNAME
X<getsockopt>

=for Pod::Functions get socket options on a given socket

Queries the option named OPTNAME associated with SOCKET at a given LEVEL.
Options may exist at multiple protocol levels depending on the socket
type, but at least the uppermost socket level SOL_SOCKET (defined in the
L<C<Socket>|Socket> module) will exist.  To query options at another
level the protocol number of the appropriate protocol controlling the
option should be supplied.  For example, to indicate that an option is
to be interpreted by the TCP protocol, LEVEL should be set to the
protocol number of TCP, which you can get using
L<C<getprotobyname>|/getprotobyname NAME>.

The function returns a packed string representing the requested socket
option, or L<C<undef>|/undef EXPR> on error, with the reason for the
error placed in L<C<$!>|perlvar/$!>.  Just what is in the packed string
depends on LEVEL and OPTNAME; consult L<getsockopt(2)> for details.  A
common case is that the option is an integer, in which case the result
is a packed integer, which you can decode using
L<C<unpack>|/unpack TEMPLATE,EXPR> with the C<i> (or C<I>) format.

Here's an example to test whether Nagle's algorithm is enabled on a socket:

    use Socket qw(:all);

    defined(my $tcp = getprotobyname("tcp"))
        or die "Could not determine the protocol number for tcp";
    # my $tcp = IPPROTO_TCP; # Alternative
    my $packed = getsockopt($socket, $tcp, TCP_NODELAY)
        or die "getsockopt TCP_NODELAY: $!";
    my $nodelay = unpack("I", $packed);
    print "Nagle's algorithm is turned ",
           $nodelay ? "off\n" : "on\n";

Portability issues: L<perlport/getsockopt>.

=item glob EXPR
X<glob> X<wildcard> X<filename, expansion> X<expand>

=item glob

=for Pod::Functions expand filenames using wildcards

In list context, returns a (possibly empty) list of filename expansions on
the value of EXPR such as the standard Unix shell F</bin/csh> would do.  In
scalar context, glob iterates through such filename expansions, returning
undef when the list is exhausted.  This is the internal function
implementing the C<< <*.c> >> operator, but you can use it directly.  If
EXPR is omitted, L<C<$_>|perlvar/$_> is used.  The C<< <*.c> >> operator
is discussed in more detail in L<perlop/"I/O Operators">.

Note that L<C<glob>|/glob EXPR> splits its arguments on whitespace and
treats
each segment as separate pattern.  As such, C<glob("*.c *.h")>
matches all files with a F<.c> or F<.h> extension.  The expression
C<glob(".* *")> matches all files in the current working directory.
If you want to glob filenames that might contain whitespace, you'll
have to use extra quotes around the spacey filename to protect it.
For example, to glob filenames that have an C<e> followed by a space
followed by an C<f>, use one of:

    my @@spacies = <"*e f*">;
    my @@spacies = glob '"*e f*"';
    my @@spacies = glob q("*e f*");

If you had to get a variable through, you could do this:

    my @@spacies = glob "'*${var}e f*'";
    my @@spacies = glob qq("*${var}e f*");

If non-empty braces are the only wildcard characters used in the
L<C<glob>|/glob EXPR>, no filenames are matched, but potentially many
strings are returned.  For example, this produces nine strings, one for
each pairing of fruits and colors:

    my @@many = glob "{apple,tomato,cherry}={green,yellow,red}";

This operator is implemented using the standard C<File::Glob> extension.
See L<File::Glob> for details, including
L<C<bsd_glob>|File::Glob/C<bsd_glob>>, which does not treat whitespace
as a pattern separator.

Portability issues: L<perlport/glob>.

=item gmtime EXPR
X<gmtime> X<UTC> X<Greenwich>

=item gmtime

=for Pod::Functions convert UNIX time into record or string using Greenwich time

Works just like L<C<localtime>|/localtime EXPR> but the returned values
are localized for the standard Greenwich time zone.

Note: When called in list context, $isdst, the last value
returned by gmtime, is always C<0>.  There is no
Daylight Saving Time in GMT.

Portability issues: L<perlport/gmtime>.

=item goto LABEL
X<goto> X<jump> X<jmp>

=item goto EXPR

=item goto &NAME

=for Pod::Functions create spaghetti code

The C<goto LABEL> form finds the statement labeled with LABEL and
resumes execution there.  It can't be used to get out of a block or
subroutine given to L<C<sort>|/sort SUBNAME LIST>.  It can be used to go
almost anywhere else within the dynamic scope, including out of
subroutines, but it's usually better to use some other construct such as
L<C<last>|/last LABEL> or L<C<die>|/die LIST>.  The author of Perl has
never felt the need to use this form of L<C<goto>|/goto LABEL> (in Perl,
that is; C is another matter).  (The difference is that C does not offer
named loops combined with loop control.  Perl does, and this replaces
most structured uses of L<C<goto>|/goto LABEL> in other languages.)

The C<goto EXPR> form expects to evaluate C<EXPR> to a code reference or
a label name.  If it evaluates to a code reference, it will be handled
like C<goto &NAME>, below.  This is especially useful for implementing
tail recursion via C<goto __SUB__>.

If the expression evaluates to a label name, its scope will be resolved
dynamically.  This allows for computed L<C<goto>|/goto LABEL>s per
FORTRAN, but isn't necessarily recommended if you're optimizing for
maintainability:

    goto ("FOO", "BAR", "GLARCH")[$i];

As shown in this example, C<goto EXPR> is exempt from the "looks like a
function" rule.  A pair of parentheses following it does not (necessarily)
delimit its argument.  C<goto("NE")."XT"> is equivalent to C<goto NEXT>.
Also, unlike most named operators, this has the same precedence as
assignment.

Use of C<goto LABEL> or C<goto EXPR> to jump into a construct is
deprecated and will issue a warning.  Even then, it may not be used to
go into any construct that requires initialization, such as a
subroutine or a C<foreach> loop.  It also can't be used to go into a
construct that is optimized away.

The C<goto &NAME> form is quite different from the other forms of
L<C<goto>|/goto LABEL>.  In fact, it isn't a goto in the normal sense at
all, and doesn't have the stigma associated with other gotos.  Instead,
it exits the current subroutine (losing any changes set by
L<C<local>|/local EXPR>) and immediately calls in its place the named
subroutine using the current value of L<C<@@_>|perlvar/@@_>.  This is used
by C<AUTOLOAD> subroutines that wish to load another subroutine and then
pretend that the other subroutine had been called in the first place
(except that any modifications to L<C<@@_>|perlvar/@@_> in the current
subroutine are propagated to the other subroutine.) After the
L<C<goto>|/goto LABEL>, not even L<C<caller>|/caller EXPR> will be able
to tell that this routine was called first.

NAME needn't be the name of a subroutine; it can be a scalar variable
containing a code reference or a block that evaluates to a code
reference.

=item grep BLOCK LIST
X<grep>

=item grep EXPR,LIST

=for Pod::Functions locate elements in a list test true against a given criterion

This is similar in spirit to, but not the same as, L<grep(1)> and its
relatives.  In particular, it is not limited to using regular expressions.

Evaluates the BLOCK or EXPR for each element of LIST (locally setting
L<C<$_>|perlvar/$_> to each element) and returns the list value
consisting of those
elements for which the expression evaluated to true.  In scalar
context, returns the number of times the expression was true.

    my @@foo = grep(!/^#/, @@bar);    # weed out comments

or equivalently,

    my @@foo = grep {!/^#/} @@bar;    # weed out comments

Note that L<C<$_>|perlvar/$_> is an alias to the list value, so it can
be used to
modify the elements of the LIST.  While this is useful and supported,
it can cause bizarre results if the elements of LIST are not variables.
Similarly, grep returns aliases into the original list, much as a for
loop's index variable aliases the list elements.  That is, modifying an
element of a list returned by grep (for example, in a C<foreach>,
L<C<map>|/map BLOCK LIST> or another L<C<grep>|/grep BLOCK LIST>)
actually modifies the element in the original list.
This is usually something to be avoided when writing clear code.

See also L<C<map>|/map BLOCK LIST> for a list composed of the results of
the BLOCK or EXPR.

=item hex EXPR
X<hex> X<hexadecimal>

=item hex

=for Pod::Functions convert a hexadecimal string to a number

Interprets EXPR as a hex string and returns the corresponding numeric value.
If EXPR is omitted, uses L<C<$_>|perlvar/$_>.

    print hex '0xAf'; # prints '175'
    print hex 'aF';   # same
    $valid_input =~ /\A(?:0?[xX])?(?:_?[0-9a-fA-F])*\z/

A hex string consists of hex digits and an optional C<0x> or C<x> prefix.
Each hex digit may be preceded by a single underscore, which will be ignored.
Any other character triggers a warning and causes the rest of the string
to be ignored (even leading whitespace, unlike L<C<oct>|/oct EXPR>).
Only integers can be represented, and integer overflow triggers a warning.

To convert strings that might start with any of C<0>, C<0x>, or C<0b>,
see L<C<oct>|/oct EXPR>.  To present something as hex, look into
L<C<printf>|/printf FILEHANDLE FORMAT, LIST>,
L<C<sprintf>|/sprintf FORMAT, LIST>, and
L<C<unpack>|/unpack TEMPLATE,EXPR>.

=item import LIST
X<import>

=for Pod::Functions patch a module's namespace into your own

There is no builtin L<C<import>|/import LIST> function.  It is just an
ordinary method (subroutine) defined (or inherited) by modules that wish
to export names to another module.  The
L<C<use>|/use Module VERSION LIST> function calls the
L<C<import>|/import LIST> method for the package used.  See also
L<C<use>|/use Module VERSION LIST>, L<perlmod>, and L<Exporter>.

=item index STR,SUBSTR,POSITION
X<index> X<indexOf> X<InStr>

=item index STR,SUBSTR

=for Pod::Functions find a substring within a string

The index function searches for one string within another, but without
the wildcard-like behavior of a full regular-expression pattern match.
It returns the position of the first occurrence of SUBSTR in STR at
or after POSITION.  If POSITION is omitted, starts searching from the
beginning of the string.  POSITION before the beginning of the string
or after its end is treated as if it were the beginning or the end,
respectively.  POSITION and the return value are based at zero.
If the substring is not found, L<C<index>|/index STR,SUBSTR,POSITION>
returns -1.

=item int EXPR
X<int> X<integer> X<truncate> X<trunc> X<floor>

=item int

=for Pod::Functions get the integer portion of a number

Returns the integer portion of EXPR.  If EXPR is omitted, uses
L<C<$_>|perlvar/$_>.
You should not use this function for rounding: one because it truncates
towards C<0>, and two because machine representations of floating-point
numbers can sometimes produce counterintuitive results.  For example,
C<int(-6.725/0.025)> produces -268 rather than the correct -269; that's
because it's really more like -268.99999999999994315658 instead.  Usually,
the L<C<sprintf>|/sprintf FORMAT, LIST>,
L<C<printf>|/printf FILEHANDLE FORMAT, LIST>, or the
L<C<POSIX::floor>|POSIX/C<floor>> and L<C<POSIX::ceil>|POSIX/C<ceil>>
functions will serve you better than will L<C<int>|/int EXPR>.

=item ioctl FILEHANDLE,FUNCTION,SCALAR
X<ioctl>

=for Pod::Functions system-dependent device control system call

Implements the L<ioctl(2)> function.  You'll probably first have to say

    require "sys/ioctl.ph";  # probably in
                             # $Config{archlib}/sys/ioctl.ph

to get the correct function definitions.  If F<sys/ioctl.ph> doesn't
exist or doesn't have the correct definitions you'll have to roll your
own, based on your C header files such as F<< <sys/ioctl.h> >>.
(There is a Perl script called B<h2ph> that comes with the Perl kit that
may help you in this, but it's nontrivial.)  SCALAR will be read and/or
written depending on the FUNCTION; a C pointer to the string value of SCALAR
will be passed as the third argument of the actual
L<C<ioctl>|/ioctl FILEHANDLE,FUNCTION,SCALAR> call.  (If SCALAR
has no string value but does have a numeric value, that value will be
passed rather than a pointer to the string value.  To guarantee this to be
true, add a C<0> to the scalar before using it.)  The
L<C<pack>|/pack TEMPLATE,LIST> and L<C<unpack>|/unpack TEMPLATE,EXPR>
functions may be needed to manipulate the values of structures used by
L<C<ioctl>|/ioctl FILEHANDLE,FUNCTION,SCALAR>.

The return value of L<C<ioctl>|/ioctl FILEHANDLE,FUNCTION,SCALAR> (and
L<C<fcntl>|/fcntl FILEHANDLE,FUNCTION,SCALAR>) is as follows:

    if OS returns:      then Perl returns:
        -1               undefined value
         0              string "0 but true"
    anything else           that number

Thus Perl returns true on success and false on failure, yet you can
still easily determine the actual value returned by the operating
system:

    my $retval = ioctl(...) || -1;
    printf "System returned %d\n", $retval;

The special string C<"0 but true"> is exempt from
L<C<Argument "..." isn't numeric>|perldiag/Argument "%s" isn't numeric%s>
L<warnings> on improper numeric conversions.

Portability issues: L<perlport/ioctl>.

=item join EXPR,LIST
X<join>

=for Pod::Functions join a list into a string using a separator

Joins the separate strings of LIST into a single string with fields
separated by the value of EXPR, and returns that new string.  Example:

   my $rec = join(':', $login,$passwd,$uid,$gid,$gcos,$home,$shell);

Beware that unlike L<C<split>|/split E<sol>PATTERNE<sol>,EXPR,LIMIT>,
L<C<join>|/join EXPR,LIST> doesn't take a pattern as its first argument.
Compare L<C<split>|/split E<sol>PATTERNE<sol>,EXPR,LIMIT>.

=item keys HASH
X<keys> X<key>

=item keys ARRAY

=for Pod::Functions retrieve list of indices from a hash

Called in list context, returns a list consisting of all the keys of the
named hash, or in Perl 5.12 or later only, the indices of an array.  Perl
releases prior to 5.12 will produce a syntax error if you try to use an
array argument.  In scalar context, returns the number of keys or indices.

Hash entries are returned in an apparently random order.  The actual random
order is specific to a given hash; the exact same series of operations
on two hashes may result in a different order for each hash.  Any insertion
into the hash may change the order, as will any deletion, with the exception
that the most recent key returned by L<C<each>|/each HASH> or
L<C<keys>|/keys HASH> may be deleted without changing the order.  So
long as a given hash is unmodified you may rely on
L<C<keys>|/keys HASH>, L<C<values>|/values HASH> and L<C<each>|/each
HASH> to repeatedly return the same order
as each other.  See L<perlsec/"Algorithmic Complexity Attacks"> for
details on why hash order is randomized.  Aside from the guarantees
provided here the exact details of Perl's hash algorithm and the hash
traversal order are subject to change in any release of Perl.  Tied hashes
may behave differently to Perl's hashes with respect to changes in order on
insertion and deletion of items.

As a side effect, calling L<C<keys>|/keys HASH> resets the internal
iterator of the HASH or ARRAY (see L<C<each>|/each HASH>).  In
particular, calling L<C<keys>|/keys HASH> in void context resets the
iterator with no other overhead.

Here is yet another way to print your environment:

    my @@keys = keys %ENV;
    my @@values = values %ENV;
    while (@@keys) {
        print pop(@@keys), '=', pop(@@values), "\n";
    }

or how about sorted by key:

    foreach my $key (sort(keys %ENV)) {
        print $key, '=', $ENV{$key}, "\n";
    }

The returned values are copies of the original keys in the hash, so
modifying them will not affect the original hash.  Compare
L<C<values>|/values HASH>.

To sort a hash by value, you'll need to use a
L<C<sort>|/sort SUBNAME LIST> function.  Here's a descending numeric
sort of a hash by its values:

    foreach my $key (sort { $hash{$b} <=> $hash{$a} } keys %hash) {
        printf "%4d %s\n", $hash{$key}, $key;
    }

Used as an lvalue, L<C<keys>|/keys HASH> allows you to increase the
number of hash buckets
allocated for the given hash.  This can gain you a measure of efficiency if
you know the hash is going to get big.  (This is similar to pre-extending
an array by assigning a larger number to $#array.)  If you say

    keys %hash = 200;

then C<%hash> will have at least 200 buckets allocated for it--256 of them,
in fact, since it rounds up to the next power of two.  These
buckets will be retained even if you do C<%hash = ()>, use C<undef
%hash> if you want to free the storage while C<%hash> is still in scope.
You can't shrink the number of buckets allocated for the hash using
L<C<keys>|/keys HASH> in this way (but you needn't worry about doing
this by accident, as trying has no effect).  C<keys @@array> in an lvalue
context is a syntax error.

Starting with Perl 5.14, an experimental feature allowed
L<C<keys>|/keys HASH> to take a scalar expression. This experiment has
been deemed unsuccessful, and was removed as of Perl 5.24.

To avoid confusing would-be users of your code who are running earlier
versions of Perl with mysterious syntax errors, put this sort of thing at
the top of your file to signal that your code will work I<only> on Perls of
a recent vintage:

    use 5.012;	# so keys/values/each work on arrays

See also L<C<each>|/each HASH>, L<C<values>|/values HASH>, and
L<C<sort>|/sort SUBNAME LIST>.

=item kill SIGNAL, LIST

=item kill SIGNAL
X<kill> X<signal>

=for Pod::Functions send a signal to a process or process group

Sends a signal to a list of processes.  Returns the number of arguments
that were successfully used to signal (which is not necessarily the same
as the number of processes actually killed, e.g. where a process group is
killed).

    my $cnt = kill 'HUP', $child1, $child2;
    kill 'KILL', @@goners;

SIGNAL may be either a signal name (a string) or a signal number.  A signal
name may start with a C<SIG> prefix, thus C<FOO> and C<SIGFOO> refer to the
same signal.  The string form of SIGNAL is recommended for portability because
the same signal may have different numbers in different operating systems.

A list of signal names supported by the current platform can be found in
C<$Config{sig_name}>, which is provided by the L<C<Config>|Config>
module.  See L<Config> for more details.

A negative signal name is the same as a negative signal number, killing process
groups instead of processes.  For example, C<kill '-KILL', $pgrp> and
C<kill -9, $pgrp> will send C<SIGKILL> to
the entire process group specified.  That
means you usually want to use positive not negative signals.

If SIGNAL is either the number 0 or the string C<ZERO> (or C<SIGZERO>),
no signal is sent to the process, but L<C<kill>|/kill SIGNAL, LIST>
checks whether it's I<possible> to send a signal to it
(that means, to be brief, that the process is owned by the same user, or we are
the super-user).  This is useful to check that a child process is still
alive (even if only as a zombie) and hasn't changed its UID.  See
L<perlport> for notes on the portability of this construct.

The behavior of kill when a I<PROCESS> number is zero or negative depends on
the operating system.  For example, on POSIX-conforming systems, zero will
signal the current process group, -1 will signal all processes, and any
other negative PROCESS number will act as a negative signal number and
kill the entire process group specified.

If both the SIGNAL and the PROCESS are negative, the results are undefined.
A warning may be produced in a future version.

See L<perlipc/"Signals"> for more details.

On some platforms such as Windows where the L<fork(2)> system call is not
available, Perl can be built to emulate L<C<fork>|/fork> at the
interpreter level.
This emulation has limitations related to kill that have to be considered,
for code running on Windows and in code intended to be portable.

See L<perlfork> for more details.

If there is no I<LIST> of processes, no signal is sent, and the return
value is 0.  This form is sometimes used, however, because it causes
tainting checks to be run.  But see
L<perlsec/Laundering and Detecting Tainted Data>.

Portability issues: L<perlport/kill>.

=item last LABEL
X<last> X<break>

=item last EXPR

=item last

=for Pod::Functions exit a block prematurely

The L<C<last>|/last LABEL> command is like the C<break> statement in C
(as used in
loops); it immediately exits the loop in question.  If the LABEL is
omitted, the command refers to the innermost enclosing
loop.  The C<last EXPR> form, available starting in Perl
5.18.0, allows a label name to be computed at run time,
and is otherwise identical to C<last LABEL>.  The
L<C<continue>|/continue BLOCK> block, if any, is not executed:

    LINE: while (<STDIN>) {
        last LINE if /^$/;  # exit when done with header
        #...
    }

L<C<last>|/last LABEL> cannot be used to exit a block that returns a
value such as C<eval {}>, C<sub {}>, or C<do {}>, and should not be used
to exit a L<C<grep>|/grep BLOCK LIST> or L<C<map>|/map BLOCK LIST>
operation.

Note that a block by itself is semantically identical to a loop
that executes once.  Thus L<C<last>|/last LABEL> can be used to effect
an early exit out of such a block.

See also L<C<continue>|/continue BLOCK> for an illustration of how
L<C<last>|/last LABEL>, L<C<next>|/next LABEL>, and
L<C<redo>|/redo LABEL> work.

Unlike most named operators, this has the same precedence as assignment.
It is also exempt from the looks-like-a-function rule, so
C<last ("foo")."bar"> will cause "bar" to be part of the argument to
L<C<last>|/last LABEL>.

=item lc EXPR
X<lc> X<lowercase>

=item lc

=for Pod::Functions return lower-case version of a string

Returns a lowercased version of EXPR.  This is the internal function
implementing the C<\L> escape in double-quoted strings.

If EXPR is omitted, uses L<C<$_>|perlvar/$_>.

What gets returned depends on several factors:

=over

=item If C<use bytes> is in effect:

The results follow ASCII rules.  Only the characters C<A-Z> change,
to C<a-z> respectively.

=item Otherwise, if C<use locale> for C<LC_CTYPE> is in effect:

Respects current C<LC_CTYPE> locale for code points < 256; and uses Unicode
rules for the remaining code points (this last can only happen if
the UTF8 flag is also set).  See L<perllocale>.

Starting in v5.20, Perl uses full Unicode rules if the locale is
UTF-8.  Otherwise, there is a deficiency in this scheme, which is that
case changes that cross the 255/256
boundary are not well-defined.  For example, the lower case of LATIN CAPITAL
LETTER SHARP S (U+1E9E) in Unicode rules is U+00DF (on ASCII
platforms).   But under C<use locale> (prior to v5.20 or not a UTF-8
locale), the lower case of U+1E9E is
itself, because 0xDF may not be LATIN SMALL LETTER SHARP S in the
current locale, and Perl has no way of knowing if that character even
exists in the locale, much less what code point it is.  Perl returns
a result that is above 255 (almost always the input character unchanged),
for all instances (and there aren't many) where the 255/256 boundary
would otherwise be crossed; and starting in v5.22, it raises a
L<locale|perldiag/Can't do %s("%s") on non-UTF-8 locale; resolved to "%s".> warning.

=item Otherwise, If EXPR has the UTF8 flag set:

Unicode rules are used for the case change.

=item Otherwise, if C<use feature 'unicode_strings'> or C<use locale ':not_characters'> is in effect:

Unicode rules are used for the case change.

=item Otherwise:

ASCII rules are used for the case change.  The lowercase of any character
outside the ASCII range is the character itself.

=back

=item lcfirst EXPR
X<lcfirst> X<lowercase>

=item lcfirst

=for Pod::Functions return a string with just the next letter in lower case

Returns the value of EXPR with the first character lowercased.  This
is the internal function implementing the C<\l> escape in
double-quoted strings.

If EXPR is omitted, uses L<C<$_>|perlvar/$_>.

This function behaves the same way under various pragmas, such as in a locale,
as L<C<lc>|/lc EXPR> does.

=item length EXPR
X<length> X<size>

=item length

=for Pod::Functions return the number of characters in a string

Returns the length in I<characters> of the value of EXPR.  If EXPR is
omitted, returns the length of L<C<$_>|perlvar/$_>.  If EXPR is
undefined, returns L<C<undef>|/undef EXPR>.

This function cannot be used on an entire array or hash to find out how
many elements these have.  For that, use C<scalar @@array> and C<scalar keys
%hash>, respectively.

Like all Perl character operations, L<C<length>|/length EXPR> normally
deals in logical
characters, not physical bytes.  For how many bytes a string encoded as
UTF-8 would take up, use C<length(Encode::encode_utf8(EXPR))> (you'll have
to C<use Encode> first).  See L<Encode> and L<perlunicode>.

=item __LINE__
X<__LINE__>

=for Pod::Functions the current source line number

A special token that compiles to the current line number.

=item link OLDFILE,NEWFILE
X<link>

=for Pod::Functions create a hard link in the filesystem

Creates a new filename linked to the old filename.  Returns true for
success, false otherwise.

Portability issues: L<perlport/link>.

=item listen SOCKET,QUEUESIZE
X<listen>

=for Pod::Functions register your socket as a server

Does the same thing that the L<listen(2)> system call does.  Returns true if
it succeeded, false otherwise.  See the example in
L<perlipc/"Sockets: Client/Server Communication">.

=item local EXPR
X<local>

=for Pod::Functions create a temporary value for a global variable (dynamic scoping)

You really probably want to be using L<C<my>|/my VARLIST> instead,
because L<C<local>|/local EXPR> isn't what most people think of as
"local".  See L<perlsub/"Private Variables via my()"> for details.

A local modifies the listed variables to be local to the enclosing
block, file, or eval.  If more than one value is listed, the list must
be placed in parentheses.  See L<perlsub/"Temporary Values via local()">
for details, including issues with tied arrays and hashes.

The C<delete local EXPR> construct can also be used to localize the deletion
of array/hash elements to the current block.
See L<perlsub/"Localized deletion of elements of composite types">.

=item localtime EXPR
X<localtime> X<ctime>

=item localtime

=for Pod::Functions convert UNIX time into record or string using local time

Converts a time as returned by the time function to a 9-element list
with the time analyzed for the local time zone.  Typically used as
follows:

    #     0    1    2     3     4    5     6     7     8
    my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) =
                                                localtime(time);

All list elements are numeric and come straight out of the C `struct
tm'.  C<$sec>, C<$min>, and C<$hour> are the seconds, minutes, and hours
of the specified time.

C<$mday> is the day of the month and C<$mon> the month in
the range C<0..11>, with 0 indicating January and 11 indicating December.
This makes it easy to get a month name from a list:

    my @@abbr = qw(Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec);
    print "$abbr[$mon] $mday";
    # $mon=9, $mday=18 gives "Oct 18"

C<$year> contains the number of years since 1900.  To get a 4-digit
year write:

    $year += 1900;

To get the last two digits of the year (e.g., "01" in 2001) do:

    $year = sprintf("%02d", $year % 100);

C<$wday> is the day of the week, with 0 indicating Sunday and 3 indicating
Wednesday.  C<$yday> is the day of the year, in the range C<0..364>
(or C<0..365> in leap years.)

C<$isdst> is true if the specified time occurs during Daylight Saving
Time, false otherwise.

If EXPR is omitted, L<C<localtime>|/localtime EXPR> uses the current
time (as returned by L<C<time>|/time>).

In scalar context, L<C<localtime>|/localtime EXPR> returns the
L<ctime(3)> value:

    my $now_string = localtime;  # e.g., "Thu Oct 13 04:54:34 1994"

The format of this scalar value is B<not> locale-dependent but built
into Perl.  For GMT instead of local time use the
L<C<gmtime>|/gmtime EXPR> builtin.  See also the
L<C<Time::Local>|Time::Local> module (for converting seconds, minutes,
hours, and such back to the integer value returned by L<C<time>|/time>),
and the L<POSIX> module's L<C<strftime>|POSIX/C<strftime>> and
L<C<mktime>|POSIX/C<mktime>> functions.

To get somewhat similar but locale-dependent date strings, set up your
locale environment variables appropriately (please see L<perllocale>) and
try for example:

    use POSIX qw(strftime);
    my $now_string = strftime "%a %b %e %H:%M:%S %Y", localtime;
    # or for GMT formatted appropriately for your locale:
    my $now_string = strftime "%a %b %e %H:%M:%S %Y", gmtime;

Note that C<%a> and C<%b>, the short forms of the day of the week
and the month of the year, may not necessarily be three characters wide.

The L<Time::gmtime> and L<Time::localtime> modules provide a convenient,
by-name access mechanism to the L<C<gmtime>|/gmtime EXPR> and
L<C<localtime>|/localtime EXPR> functions, respectively.

For a comprehensive date and time representation look at the
L<DateTime> module on CPAN.

Portability issues: L<perlport/localtime>.

=item lock THING
X<lock>

=for Pod::Functions +5.005 get a thread lock on a variable, subroutine, or method

This function places an advisory lock on a shared variable or referenced
object contained in I<THING> until the lock goes out of scope.

The value returned is the scalar itself, if the argument is a scalar, or a
reference, if the argument is a hash, array or subroutine.

L<C<lock>|/lock THING> is a "weak keyword"; this means that if you've
defined a function
by this name (before any calls to it), that function will be called
instead.  If you are not under C<use threads::shared> this does nothing.
See L<threads::shared>.

=item log EXPR
X<log> X<logarithm> X<e> X<ln> X<base>

=item log

=for Pod::Functions retrieve the natural logarithm for a number

Returns the natural logarithm (base I<e>) of EXPR.  If EXPR is omitted,
returns the log of L<C<$_>|perlvar/$_>.  To get the
log of another base, use basic algebra:
The base-N log of a number is equal to the natural log of that number
divided by the natural log of N.  For example:

    sub log10 {
        my $n = shift;
        return log($n)/log(10);
    }

See also L<C<exp>|/exp EXPR> for the inverse operation.

=item lstat FILEHANDLE
X<lstat>

=item lstat EXPR

=item lstat DIRHANDLE

=item lstat

=for Pod::Functions stat a symbolic link

Does the same thing as the L<C<stat>|/stat FILEHANDLE> function
(including setting the special C<_> filehandle) but stats a symbolic
link instead of the file the symbolic link points to.  If symbolic links
are unimplemented on your system, a normal L<C<stat>|/stat FILEHANDLE>
is done.  For much more detailed information, please see the
documentation for L<C<stat>|/stat FILEHANDLE>.

If EXPR is omitted, stats L<C<$_>|perlvar/$_>.

Portability issues: L<perlport/lstat>.

=item m//

=for Pod::Functions match a string with a regular expression pattern

The match operator.  See L<perlop/"Regexp Quote-Like Operators">.

=item map BLOCK LIST
X<map>

=item map EXPR,LIST

=for Pod::Functions apply a change to a list to get back a new list with the changes

Evaluates the BLOCK or EXPR for each element of LIST (locally setting
L<C<$_>|perlvar/$_> to each element) and returns the list value composed
of the
results of each such evaluation.  In scalar context, returns the
total number of elements so generated.  Evaluates BLOCK or EXPR in
list context, so each element of LIST may produce zero, one, or
more elements in the returned value.

    my @@chars = map(chr, @@numbers);

translates a list of numbers to the corresponding characters.

    my @@squares = map { $_ * $_ } @@numbers;

translates a list of numbers to their squared values.

    my @@squares = map { $_ > 5 ? ($_ * $_) : () } @@numbers;

shows that number of returned elements can differ from the number of
input elements.  To omit an element, return an empty list ().
This could also be achieved by writing

    my @@squares = map { $_ * $_ } grep { $_ > 5 } @@numbers;

which makes the intention more clear.

Map always returns a list, which can be
assigned to a hash such that the elements
become key/value pairs.  See L<perldata> for more details.

    my %hash = map { get_a_key_for($_) => $_ } @@array;

is just a funny way to write

    my %hash;
    foreach (@@array) {
        $hash{get_a_key_for($_)} = $_;
    }

Note that L<C<$_>|perlvar/$_> is an alias to the list value, so it can
be used to modify the elements of the LIST.  While this is useful and
supported, it can cause bizarre results if the elements of LIST are not
variables.  Using a regular C<foreach> loop for this purpose would be
clearer in most cases.  See also L<C<grep>|/grep BLOCK LIST> for an
array composed of those items of the original list for which the BLOCK
or EXPR evaluates to true.

C<{> starts both hash references and blocks, so C<map { ...> could be either
the start of map BLOCK LIST or map EXPR, LIST.  Because Perl doesn't look
ahead for the closing C<}> it has to take a guess at which it's dealing with
based on what it finds just after the
C<{>.  Usually it gets it right, but if it
doesn't it won't realize something is wrong until it gets to the C<}> and
encounters the missing (or unexpected) comma.  The syntax error will be
reported close to the C<}>, but you'll need to change something near the C<{>
such as using a unary C<+> or semicolon to give Perl some help:

 my %hash = map {  "\L$_" => 1  } @@array # perl guesses EXPR. wrong
 my %hash = map { +"\L$_" => 1  } @@array # perl guesses BLOCK. right
 my %hash = map {; "\L$_" => 1  } @@array # this also works
 my %hash = map { ("\L$_" => 1) } @@array # as does this
 my %hash = map {  lc($_) => 1  } @@array # and this.
 my %hash = map +( lc($_) => 1 ), @@array # this is EXPR and works!

 my %hash = map  ( lc($_), 1 ),   @@array # evaluates to (1, @@array)

or to force an anon hash constructor use C<+{>:

    my @@hashes = map +{ lc($_) => 1 }, @@array # EXPR, so needs
                                              # comma at end

to get a list of anonymous hashes each with only one entry apiece.

=item mkdir FILENAME,MASK
X<mkdir> X<md> X<directory, create>

=item mkdir FILENAME

=item mkdir

=for Pod::Functions create a directory

Creates the directory specified by FILENAME, with permissions
specified by MASK (as modified by L<C<umask>|/umask EXPR>).  If it
succeeds it returns true; otherwise it returns false and sets
L<C<$!>|perlvar/$!> (errno).
MASK defaults to 0777 if omitted, and FILENAME defaults
to L<C<$_>|perlvar/$_> if omitted.

In general, it is better to create directories with a permissive MASK
and let the user modify that with their L<C<umask>|/umask EXPR> than it
is to supply
a restrictive MASK and give the user no way to be more permissive.
The exceptions to this rule are when the file or directory should be
kept private (mail files, for instance).  The documentation for
L<C<umask>|/umask EXPR> discusses the choice of MASK in more detail.

Note that according to the POSIX 1003.1-1996 the FILENAME may have any
number of trailing slashes.  Some operating and filesystems do not get
this right, so Perl automatically removes all trailing slashes to keep
everyone happy.

To recursively create a directory structure, look at
the L<C<make_path>|File::Path/make_path( $dir1, $dir2, .... )> function
of the L<File::Path> module.

=item msgctl ID,CMD,ARG
X<msgctl>

=for Pod::Functions SysV IPC message control operations

Calls the System V IPC function L<msgctl(2)>.  You'll probably have to say

    use IPC::SysV;

first to get the correct constant definitions.  If CMD is C<IPC_STAT>,
then ARG must be a variable that will hold the returned C<msqid_ds>
structure.  Returns like L<C<ioctl>|/ioctl FILEHANDLE,FUNCTION,SCALAR>:
the undefined value for error, C<"0 but true"> for zero, or the actual
return value otherwise.  See also L<perlipc/"SysV IPC"> and the
documentation for L<C<IPC::SysV>|IPC::SysV> and
L<C<IPC::Semaphore>|IPC::Semaphore>.

Portability issues: L<perlport/msgctl>.

=item msgget KEY,FLAGS
X<msgget>

=for Pod::Functions get SysV IPC message queue

Calls the System V IPC function L<msgget(2)>.  Returns the message queue
id, or L<C<undef>|/undef EXPR> on error.  See also L<perlipc/"SysV IPC">
and the documentation for L<C<IPC::SysV>|IPC::SysV> and
L<C<IPC::Msg>|IPC::Msg>.

Portability issues: L<perlport/msgget>.

=item msgrcv ID,VAR,SIZE,TYPE,FLAGS
X<msgrcv>

=for Pod::Functions receive a SysV IPC message from a message queue

Calls the System V IPC function msgrcv to receive a message from
message queue ID into variable VAR with a maximum message size of
SIZE.  Note that when a message is received, the message type as a
native long integer will be the first thing in VAR, followed by the
actual message.  This packing may be opened with C<unpack("l! a*")>.
Taints the variable.  Returns true if successful, false
on error.  See also L<perlipc/"SysV IPC"> and the documentation for
L<C<IPC::SysV>|IPC::SysV> and L<C<IPC::Msg>|IPC::Msg>.

Portability issues: L<perlport/msgrcv>.

=item msgsnd ID,MSG,FLAGS
X<msgsnd>

=for Pod::Functions send a SysV IPC message to a message queue

Calls the System V IPC function msgsnd to send the message MSG to the
message queue ID.  MSG must begin with the native long integer message
type, be followed by the length of the actual message, and then finally
the message itself.  This kind of packing can be achieved with
C<pack("l! a*", $type, $message)>.  Returns true if successful,
false on error.  See also L<perlipc/"SysV IPC"> and the documentation
for L<C<IPC::SysV>|IPC::SysV> and L<C<IPC::Msg>|IPC::Msg>.

Portability issues: L<perlport/msgsnd>.

=item my VARLIST
X<my>

=item my TYPE VARLIST

=item my VARLIST : ATTRS

=item my TYPE VARLIST : ATTRS

=for Pod::Functions declare and assign a local variable (lexical scoping)

A L<C<my>|/my VARLIST> declares the listed variables to be local
(lexically) to the enclosing block, file, or L<C<eval>|/eval EXPR>.  If
more than one variable is listed, the list must be placed in
parentheses.

The exact semantics and interface of TYPE and ATTRS are still
evolving.  TYPE may be a bareword, a constant declared
with L<C<use constant>|constant>, or L<C<__PACKAGE__>|/__PACKAGE__>.  It
is
currently bound to the use of the L<fields> pragma,
and attributes are handled using the L<attributes> pragma, or starting
from Perl 5.8.0 also via the L<Attribute::Handlers> module.  See
L<perlsub/"Private Variables via my()"> for details.

Note that with a parenthesised list, L<C<undef>|/undef EXPR> can be used
as a dummy placeholder, for example to skip assignment of initial
values:

    my ( undef, $min, $hour ) = localtime;

=item next LABEL
X<next> X<continue>

=item next EXPR

=item next

=for Pod::Functions iterate a block prematurely

The L<C<next>|/next LABEL> command is like the C<continue> statement in
C; it starts the next iteration of the loop:

    LINE: while (<STDIN>) {
        next LINE if /^#/;  # discard comments
        #...
    }

Note that if there were a L<C<continue>|/continue BLOCK> block on the
above, it would get
executed even on discarded lines.  If LABEL is omitted, the command
refers to the innermost enclosing loop.  The C<next EXPR> form, available
as of Perl 5.18.0, allows a label name to be computed at run time, being
otherwise identical to C<next LABEL>.

L<C<next>|/next LABEL> cannot be used to exit a block which returns a
value such as C<eval {}>, C<sub {}>, or C<do {}>, and should not be used
to exit a L<C<grep>|/grep BLOCK LIST> or L<C<map>|/map BLOCK LIST>
operation.

Note that a block by itself is semantically identical to a loop
that executes once.  Thus L<C<next>|/next LABEL> will exit such a block
early.

See also L<C<continue>|/continue BLOCK> for an illustration of how
L<C<last>|/last LABEL>, L<C<next>|/next LABEL>, and
L<C<redo>|/redo LABEL> work.

Unlike most named operators, this has the same precedence as assignment.
It is also exempt from the looks-like-a-function rule, so
C<next ("foo")."bar"> will cause "bar" to be part of the argument to
L<C<next>|/next LABEL>.

=item no MODULE VERSION LIST
X<no declarations>
X<unimporting>

=item no MODULE VERSION

=item no MODULE LIST

=item no MODULE

=item no VERSION

=for Pod::Functions unimport some module symbols or semantics at compile time

See the L<C<use>|/use Module VERSION LIST> function, of which
L<C<no>|/no MODULE VERSION LIST> is the opposite.

=item oct EXPR
X<oct> X<octal> X<hex> X<hexadecimal> X<binary> X<bin>

=item oct

=for Pod::Functions convert a string to an octal number

Interprets EXPR as an octal string and returns the corresponding
value.  (If EXPR happens to start off with C<0x>, interprets it as a
hex string.  If EXPR starts off with C<0b>, it is interpreted as a
binary string.  Leading whitespace is ignored in all three cases.)
The following will handle decimal, binary, octal, and hex in standard
Perl notation:

    $val = oct($val) if $val =~ /^0/;

If EXPR is omitted, uses L<C<$_>|perlvar/$_>.   To go the other way
(produce a number in octal), use L<C<sprintf>|/sprintf FORMAT, LIST> or
L<C<printf>|/printf FILEHANDLE FORMAT, LIST>:

    my $dec_perms = (stat("filename"))[2] & 07777;
    my $oct_perm_str = sprintf "%o", $perms;

The L<C<oct>|/oct EXPR> function is commonly used when a string such as
C<644> needs
to be converted into a file mode, for example.  Although Perl
automatically converts strings into numbers as needed, this automatic
conversion assumes base 10.

Leading white space is ignored without warning, as too are any trailing
non-digits, such as a decimal point (L<C<oct>|/oct EXPR> only handles
non-negative integers, not negative integers or floating point).

=item open FILEHANDLE,EXPR
X<open> X<pipe> X<file, open> X<fopen>

=item open FILEHANDLE,MODE,EXPR

=item open FILEHANDLE,MODE,EXPR,LIST

=item open FILEHANDLE,MODE,REFERENCE

=item open FILEHANDLE

=for Pod::Functions open a file, pipe, or descriptor

Opens the file whose filename is given by EXPR, and associates it with
FILEHANDLE.

Simple examples to open a file for reading:

    open(my $fh, "<", "input.txt")
	or die "Can't open < input.txt: $!";

and for writing:

    open(my $fh, ">", "output.txt")
	or die "Can't open > output.txt: $!";

(The following is a comprehensive reference to
L<C<open>|/open FILEHANDLE,EXPR>: for a gentler introduction you may
consider L<perlopentut>.)

If FILEHANDLE is an undefined scalar variable (or array or hash element), a
new filehandle is autovivified, meaning that the variable is assigned a
reference to a newly allocated anonymous filehandle.  Otherwise if
FILEHANDLE is an expression, its value is the real filehandle.  (This is
considered a symbolic reference, so C<use strict "refs"> should I<not> be
in effect.)

If three (or more) arguments are specified, the open mode (including
optional encoding) in the second argument are distinct from the filename in
the third.  If MODE is C<< < >> or nothing, the file is opened for input.
If MODE is C<< > >>, the file is opened for output, with existing files
first being truncated ("clobbered") and nonexisting files newly created.
If MODE is C<<< >> >>>, the file is opened for appending, again being
created if necessary.

You can put a C<+> in front of the C<< > >> or C<< < >> to
indicate that you want both read and write access to the file; thus
C<< +< >> is almost always preferred for read/write updates--the
C<< +> >> mode would clobber the file first.  You can't usually use
either read-write mode for updating textfiles, since they have
variable-length records.  See the B<-i> switch in L<perlrun> for a
better approach.  The file is created with permissions of C<0666>
modified by the process's L<C<umask>|/umask EXPR> value.

These various prefixes correspond to the L<fopen(3)> modes of C<r>,
C<r+>, C<w>, C<w+>, C<a>, and C<a+>.

In the one- and two-argument forms of the call, the mode and filename
should be concatenated (in that order), preferably separated by white
space.  You can--but shouldn't--omit the mode in these forms when that mode
is C<< < >>.  It is safe to use the two-argument form of
L<C<open>|/open FILEHANDLE,EXPR> if the filename argument is a known literal.

For three or more arguments if MODE is C<|->, the filename is
interpreted as a command to which output is to be piped, and if MODE
is C<-|>, the filename is interpreted as a command that pipes
output to us.  In the two-argument (and one-argument) form, one should
replace dash (C<->) with the command.
See L<perlipc/"Using open() for IPC"> for more examples of this.
(You are not allowed to L<C<open>|/open FILEHANDLE,EXPR> to a command
that pipes both in I<and> out, but see L<IPC::Open2>, L<IPC::Open3>, and
L<perlipc/"Bidirectional Communication with Another Process"> for
alternatives.)

In the form of pipe opens taking three or more arguments, if LIST is specified
(extra arguments after the command name) then LIST becomes arguments
to the command invoked if the platform supports it.  The meaning of
L<C<open>|/open FILEHANDLE,EXPR> with more than three arguments for
non-pipe modes is not yet defined, but experimental "layers" may give
extra LIST arguments meaning.

In the two-argument (and one-argument) form, opening C<< <- >>
or C<-> opens STDIN and opening C<< >- >> opens STDOUT.

You may (and usually should) use the three-argument form of open to specify
I/O layers (sometimes referred to as "disciplines") to apply to the handle
that affect how the input and output are processed (see L<open> and
L<PerlIO> for more details).  For example:

  open(my $fh, "<:encoding(UTF-8)", $filename)
    || die "Can't open UTF-8 encoded $filename: $!";

opens the UTF8-encoded file containing Unicode characters;
see L<perluniintro>.  Note that if layers are specified in the
three-argument form, then default layers stored in ${^OPEN} (see L<perlvar>;
usually set by the L<open> pragma or the switch C<-CioD>) are ignored.
Those layers will also be ignored if you specifying a colon with no name
following it.  In that case the default layer for the operating system
(:raw on Unix, :crlf on Windows) is used.

Open returns nonzero on success, the undefined value otherwise.  If
the L<C<open>|/open FILEHANDLE,EXPR> involved a pipe, the return value
happens to be the pid of the subprocess.

On some systems (in general, DOS- and Windows-based systems)
L<C<binmode>|/binmode FILEHANDLE, LAYER> is necessary when you're not
working with a text file.  For the sake of portability it is a good idea
always to use it when appropriate, and never to use it when it isn't
appropriate.  Also, people can set their I/O to be by default
UTF8-encoded Unicode, not bytes.

When opening a file, it's seldom a good idea to continue
if the request failed, so L<C<open>|/open FILEHANDLE,EXPR> is frequently
used with L<C<die>|/die LIST>.  Even if L<C<die>|/die LIST> won't do
what you want (say, in a CGI script,
where you want to format a suitable error message (but there are
modules that can help with that problem)) always check
the return value from opening a file.

The filehandle will be closed when its reference count reaches zero.
If it is a lexically scoped variable declared with L<C<my>|/my VARLIST>,
that usually
means the end of the enclosing scope.  However, this automatic close
does not check for errors, so it is better to explicitly close
filehandles, especially those used for writing:

    close($handle)
       || warn "close failed: $!";

An older style is to use a bareword as the filehandle, as

    open(FH, "<", "input.txt")
       or die "Can't open < input.txt: $!";

Then you can use C<FH> as the filehandle, in C<< close FH >> and C<<
<FH> >> and so on.  Note that it's a global variable, so this form is
not recommended in new code.

As a shortcut a one-argument call takes the filename from the global
scalar variable of the same name as the filehandle:

    $ARTICLE = 100;
    open(ARTICLE) or die "Can't find article $ARTICLE: $!\n";

Here C<$ARTICLE> must be a global (package) scalar variable - not one
declared with L<C<my>|/my VARLIST> or L<C<state>|/state VARLIST>.

As a special case the three-argument form with a read/write mode and the third
argument being L<C<undef>|/undef EXPR>:

    open(my $tmp, "+>", undef) or die ...

opens a filehandle to an anonymous temporary file.  Also using C<< +< >>
works for symmetry, but you really should consider writing something
to the temporary file first.  You will need to
L<C<seek>|/seek FILEHANDLE,POSITION,WHENCE> to do the reading.

Perl is built using PerlIO by default.  Unless you've
changed this (such as building Perl with C<Configure -Uuseperlio>), you can
open filehandles directly to Perl scalars via:

    open(my $fh, ">", \$variable) || ..

To (re)open C<STDOUT> or C<STDERR> as an in-memory file, close it first:

    close STDOUT;
    open(STDOUT, ">", \$variable)
	or die "Can't open STDOUT: $!";

See L<perliol> for detailed info on PerlIO.

General examples:

 open(my $log, ">>", "/usr/spool/news/twitlog");
 # if the open fails, output is discarded

 open(my $dbase, "+<", "dbase.mine")      # open for update
     or die "Can't open 'dbase.mine' for update: $!";

 open(my $dbase, "+<dbase.mine")          # ditto
     or die "Can't open 'dbase.mine' for update: $!";

 open(my $article_fh, "-|", "caesar <$article")  # decrypt
                                                 # article
     or die "Can't start caesar: $!";

 open(my $article_fh, "caesar <$article |")      # ditto
     or die "Can't start caesar: $!";

 open(my $out_fh, "|-", "sort >Tmp$$")    # $$ is our process id
     or die "Can't start sort: $!";

 # in-memory files
 open(my $memory, ">", \$var)
     or die "Can't open memory file: $!";
 print $memory "foo!\n";              # output will appear in $var

You may also, in the Bourne shell tradition, specify an EXPR beginning
with C<< >& >>, in which case the rest of the string is interpreted
as the name of a filehandle (or file descriptor, if numeric) to be
duped (as in L<dup(2)>) and opened.  You may use C<&> after C<< > >>,
C<<< >> >>>, C<< < >>, C<< +> >>, C<<< +>> >>>, and C<< +< >>.
The mode you specify should match the mode of the original filehandle.
(Duping a filehandle does not take into account any existing contents
of IO buffers.)  If you use the three-argument
form, then you can pass either a
number, the name of a filehandle, or the normal "reference to a glob".

Here is a script that saves, redirects, and restores C<STDOUT> and
C<STDERR> using various methods:

    #!/usr/bin/perl
    open(my $oldout, ">&STDOUT")     or die "Can't dup STDOUT: $!";
    open(OLDERR,     ">&", \*STDERR) or die "Can't dup STDERR: $!";

    open(STDOUT, '>', "foo.out") or die "Can't redirect STDOUT: $!";
    open(STDERR, ">&STDOUT")     or die "Can't dup STDOUT: $!";

    select STDERR; $| = 1;  # make unbuffered
    select STDOUT; $| = 1;  # make unbuffered

    print STDOUT "stdout 1\n";  # this works for
    print STDERR "stderr 1\n";  # subprocesses too

    open(STDOUT, ">&", $oldout) or die "Can't dup \$oldout: $!";
    open(STDERR, ">&OLDERR")    or die "Can't dup OLDERR: $!";

    print STDOUT "stdout 2\n";
    print STDERR "stderr 2\n";

If you specify C<< '<&=X' >>, where C<X> is a file descriptor number
or a filehandle, then Perl will do an equivalent of C's L<fdopen(3)> of
that file descriptor (and not call L<dup(2)>); this is more
parsimonious of file descriptors.  For example:

    # open for input, reusing the fileno of $fd
    open(my $fh, "<&=", $fd)

or

    open(my $fh, "<&=$fd")

or

    # open for append, using the fileno of $oldfh
    open(my $fh, ">>&=", $oldfh)

Being parsimonious on filehandles is also useful (besides being
parsimonious) for example when something is dependent on file
descriptors, like for example locking using
L<C<flock>|/flock FILEHANDLE,OPERATION>.  If you do just
C<< open(my $A, ">>&", $B) >>, the filehandle C<$A> will not have the
same file descriptor as C<$B>, and therefore C<flock($A)> will not
C<flock($B)> nor vice versa.  But with C<< open(my $A, ">>&=", $B) >>,
the filehandles will share the same underlying system file descriptor.

Note that under Perls older than 5.8.0, Perl uses the standard C library's'
L<fdopen(3)> to implement the C<=> functionality.  On many Unix systems,
L<fdopen(3)> fails when file descriptors exceed a certain value, typically 255.
For Perls 5.8.0 and later, PerlIO is (most often) the default.

You can see whether your Perl was built with PerlIO by running
C<perl -V:useperlio>.  If it says C<'define'>, you have PerlIO;
otherwise you don't.

If you open a pipe on the command C<-> (that is, specify either C<|-> or C<-|>
with the one- or two-argument forms of
L<C<open>|/open FILEHANDLE,EXPR>), an implicit L<C<fork>|/fork> is done,
so L<C<open>|/open FILEHANDLE,EXPR> returns twice: in the parent process
it returns the pid
of the child process, and in the child process it returns (a defined) C<0>.
Use C<defined($pid)> or C<//> to determine whether the open was successful.

For example, use either

   my $child_pid = open(my $from_kid, "-|") // die "Can't fork: $!";

or

   my $child_pid = open(my $to_kid,   "|-") // die "Can't fork: $!";

followed by

    if ($child_pid) {
	# am the parent:
	# either write $to_kid or else read $from_kid
	...
       waitpid $child_pid, 0;
    } else {
	# am the child; use STDIN/STDOUT normally
	...
	exit;
    }

The filehandle behaves normally for the parent, but I/O to that
filehandle is piped from/to the STDOUT/STDIN of the child process.
In the child process, the filehandle isn't opened--I/O happens from/to
the new STDOUT/STDIN.  Typically this is used like the normal
piped open when you want to exercise more control over just how the
pipe command gets executed, such as when running setuid and
you don't want to have to scan shell commands for metacharacters.

The following blocks are more or less equivalent:

    open(my $fh, "|tr '[a-z]' '[A-Z]'");
    open(my $fh, "|-", "tr '[a-z]' '[A-Z]'");
    open(my $fh, "|-") || exec 'tr', '[a-z]', '[A-Z]';
    open(my $fh, "|-", "tr", '[a-z]', '[A-Z]');

    open(my $fh, "cat -n '$file'|");
    open(my $fh, "-|", "cat -n '$file'");
    open(my $fh, "-|") || exec "cat", "-n", $file;
    open(my $fh, "-|", "cat", "-n", $file);

The last two examples in each block show the pipe as "list form", which is
not yet supported on all platforms.  A good rule of thumb is that if
your platform has a real L<C<fork>|/fork> (in other words, if your platform is
Unix, including Linux and MacOS X), you can use the list form.  You would
want to use the list form of the pipe so you can pass literal arguments
to the command without risk of the shell interpreting any shell metacharacters
in them.  However, this also bars you from opening pipes to commands
that intentionally contain shell metacharacters, such as:

    open(my $fh, "|cat -n | expand -4 | lpr")
	|| die "Can't open pipeline to lpr: $!";

See L<perlipc/"Safe Pipe Opens"> for more examples of this.

Perl will attempt to flush all files opened for
output before any operation that may do a fork, but this may not be
supported on some platforms (see L<perlport>).  To be safe, you may need
to set L<C<$E<verbar>>|perlvar/$E<verbar>> (C<$AUTOFLUSH> in L<English>)
or call the C<autoflush> method of L<C<IO::Handle>|IO::Handle/METHODS>
on any open handles.

On systems that support a close-on-exec flag on files, the flag will
be set for the newly opened file descriptor as determined by the value
of L<C<$^F>|perlvar/$^F>.  See L<perlvar/$^F>.

Closing any piped filehandle causes the parent process to wait for the
child to finish, then returns the status value in L<C<$?>|perlvar/$?> and
L<C<${^CHILD_ERROR_NATIVE}>|perlvar/${^CHILD_ERROR_NATIVE}>.

The filename passed to the one- and two-argument forms of
L<C<open>|/open FILEHANDLE,EXPR> will
have leading and trailing whitespace deleted and normal
redirection characters honored.  This property, known as "magic open",
can often be used to good effect.  A user could specify a filename of
F<"rsh cat file |">, or you could change certain filenames as needed:

    $filename =~ s/(.*\.gz)\s*$/gzip -dc < $1|/;
    open(my $fh, $filename) or die "Can't open $filename: $!";

Use the three-argument form to open a file with arbitrary weird characters in it,

    open(my $fh, "<", $file)
	|| die "Can't open $file: $!";

otherwise it's necessary to protect any leading and trailing whitespace:

    $file =~ s#^(\s)#./$1#;
    open(my $fh, "< $file\0")
	|| die "Can't open $file: $!";

(this may not work on some bizarre filesystems).  One should
conscientiously choose between the I<magic> and I<three-argument> form
of L<C<open>|/open FILEHANDLE,EXPR>:

    open(my $in, $ARGV[0]) || die "Can't open $ARGV[0]: $!";

will allow the user to specify an argument of the form C<"rsh cat file |">,
but will not work on a filename that happens to have a trailing space, while

    open(my $in, "<", $ARGV[0])
	|| die "Can't open $ARGV[0]: $!";

will have exactly the opposite restrictions. (However, some shells
support the syntax C<< perl your_program.pl <( rsh cat file ) >>, which
produces a filename that can be opened normally.)

If you want a "real" C L<open(2)>, then you should use the
L<C<sysopen>|/sysopen FILEHANDLE,FILENAME,MODE> function, which involves
no such magic (but uses different filemodes than Perl
L<C<open>|/open FILEHANDLE,EXPR>, which corresponds to C L<fopen(3)>).
This is another way to protect your filenames from interpretation.  For
example:

    use IO::Handle;
    sysopen(my $fh, $path, O_RDWR|O_CREAT|O_EXCL)
        or die "Can't open $path: $!";
    $fh->autoflush(1);
    print $fh "stuff $$\n";
    seek($fh, 0, 0);
    print "File contains: ", readline($fh);

See L<C<seek>|/seek FILEHANDLE,POSITION,WHENCE> for some details about
mixing reading and writing.

Portability issues: L<perlport/open>.

=item opendir DIRHANDLE,EXPR
X<opendir>

=for Pod::Functions open a directory

Opens a directory named EXPR for processing by
L<C<readdir>|/readdir DIRHANDLE>, L<C<telldir>|/telldir DIRHANDLE>,
L<C<seekdir>|/seekdir DIRHANDLE,POS>,
L<C<rewinddir>|/rewinddir DIRHANDLE>, and
L<C<closedir>|/closedir DIRHANDLE>.  Returns true if successful.
DIRHANDLE may be an expression whose value can be used as an indirect
dirhandle, usually the real dirhandle name.  If DIRHANDLE is an undefined
scalar variable (or array or hash element), the variable is assigned a
reference to a new anonymous dirhandle; that is, it's autovivified.
DIRHANDLEs have their own namespace separate from FILEHANDLEs.

See the example at L<C<readdir>|/readdir DIRHANDLE>.

=item ord EXPR
X<ord> X<encoding>

=item ord

=for Pod::Functions find a character's numeric representation

Returns the numeric value of the first character of EXPR.
If EXPR is an empty string, returns 0.  If EXPR is omitted, uses
L<C<$_>|perlvar/$_>.
(Note I<character>, not byte.)

For the reverse, see L<C<chr>|/chr NUMBER>.
See L<perlunicode> for more about Unicode.

=item our VARLIST
X<our> X<global>

=item our TYPE VARLIST

=item our VARLIST : ATTRS

=item our TYPE VARLIST : ATTRS

=for Pod::Functions +5.6.0 declare and assign a package variable (lexical scoping)

L<C<our>|/our VARLIST> makes a lexical alias to a package (i.e. global)
variable of the same name in the current package for use within the
current lexical scope.

L<C<our>|/our VARLIST> has the same scoping rules as
L<C<my>|/my VARLIST> or L<C<state>|/state VARLIST>, meaning that it is
only valid within a lexical scope.  Unlike L<C<my>|/my VARLIST> and
L<C<state>|/state VARLIST>, which both declare new (lexical) variables,
L<C<our>|/our VARLIST> only creates an alias to an existing variable: a
package variable of the same name.

This means that when C<use strict 'vars'> is in effect, L<C<our>|/our
VARLIST> lets you use a package variable without qualifying it with the
package name, but only within the lexical scope of the
L<C<our>|/our VARLIST> declaration.  This applies immediately--even
within the same statement.

    package Foo;
    use strict;

    $Foo::foo = 23;

    {
        our $foo;   # alias to $Foo::foo
        print $foo; # prints 23
    }

    print $Foo::foo; # prints 23

    print $foo; # ERROR: requires explicit package name

This works even if the package variable has not been used before, as
package variables spring into existence when first used.

    package Foo;
    use strict;

    our $foo = 23;   # just like $Foo::foo = 23

    print $Foo::foo; # prints 23

Because the variable becomes legal immediately under C<use strict 'vars'>, so
long as there is no variable with that name is already in scope, you can then
reference the package variable again even within the same statement.

    package Foo;
    use strict;

    my  $foo = $foo; # error, undeclared $foo on right-hand side
    our $foo = $foo; # no errors

If more than one variable is listed, the list must be placed
in parentheses.

    our($bar, $baz);

An L<C<our>|/our VARLIST> declaration declares an alias for a package
variable that will be visible
across its entire lexical scope, even across package boundaries.  The
package in which the variable is entered is determined at the point
of the declaration, not at the point of use.  This means the following
behavior holds:

    package Foo;
    our $bar;      # declares $Foo::bar for rest of lexical scope
    $bar = 20;

    package Bar;
    print $bar;    # prints 20, as it refers to $Foo::bar

Multiple L<C<our>|/our VARLIST> declarations with the same name in the
same lexical
scope are allowed if they are in different packages.  If they happen
to be in the same package, Perl will emit warnings if you have asked
for them, just like multiple L<C<my>|/my VARLIST> declarations.  Unlike
a second L<C<my>|/my VARLIST> declaration, which will bind the name to a
fresh variable, a second L<C<our>|/our VARLIST> declaration in the same
package, in the same scope, is merely redundant.

    use warnings;
    package Foo;
    our $bar;      # declares $Foo::bar for rest of lexical scope
    $bar = 20;

    package Bar;
    our $bar = 30; # declares $Bar::bar for rest of lexical scope
    print $bar;    # prints 30

    our $bar;      # emits warning but has no other effect
    print $bar;    # still prints 30

An L<C<our>|/our VARLIST> declaration may also have a list of attributes
associated with it.

The exact semantics and interface of TYPE and ATTRS are still
evolving.  TYPE is currently bound to the use of the L<fields> pragma,
and attributes are handled using the L<attributes> pragma, or, starting
from Perl 5.8.0, also via the L<Attribute::Handlers> module.  See
L<perlsub/"Private Variables via my()"> for details.

Note that with a parenthesised list, L<C<undef>|/undef EXPR> can be used
as a dummy placeholder, for example to skip assignment of initial
values:

    our ( undef, $min, $hour ) = localtime;

L<C<our>|/our VARLIST> differs from L<C<use vars>|vars>, which allows
use of an unqualified name I<only> within the affected package, but
across scopes.

=item pack TEMPLATE,LIST
X<pack>

=for Pod::Functions convert a list into a binary representation

Takes a LIST of values and converts it into a string using the rules
given by the TEMPLATE.  The resulting string is the concatenation of
the converted values.  Typically, each converted value looks
like its machine-level representation.  For example, on 32-bit machines
an integer may be represented by a sequence of 4 bytes, which  will in
Perl be presented as a string that's 4 characters long.

See L<perlpacktut> for an introduction to this function.

The TEMPLATE is a sequence of characters that give the order and type
of values, as follows:

    a  A string with arbitrary binary data, will be null padded.
    A  A text (ASCII) string, will be space padded.
    Z  A null-terminated (ASCIZ) string, will be null padded.

    b  A bit string (ascending bit order inside each byte,
       like vec()).
    B  A bit string (descending bit order inside each byte).
    h  A hex string (low nybble first).
    H  A hex string (high nybble first).

    c  A signed char (8-bit) value.
    C  An unsigned char (octet) value.
    W  An unsigned char value (can be greater than 255).

    s  A signed short (16-bit) value.
    S  An unsigned short value.

    l  A signed long (32-bit) value.
    L  An unsigned long value.

    q  A signed quad (64-bit) value.
    Q  An unsigned quad value.
         (Quads are available only if your system supports 64-bit
          integer values _and_ if Perl has been compiled to support
          those.  Raises an exception otherwise.)

    i  A signed integer value.
    I  A unsigned integer value.
         (This 'integer' is _at_least_ 32 bits wide.  Its exact
          size depends on what a local C compiler calls 'int'.)

    n  An unsigned short (16-bit) in "network" (big-endian) order.
    N  An unsigned long (32-bit) in "network" (big-endian) order.
    v  An unsigned short (16-bit) in "VAX" (little-endian) order.
    V  An unsigned long (32-bit) in "VAX" (little-endian) order.

    j  A Perl internal signed integer value (IV).
    J  A Perl internal unsigned integer value (UV).

    f  A single-precision float in native format.
    d  A double-precision float in native format.

    F  A Perl internal floating-point value (NV) in native format
    D  A float of long-double precision in native format.
         (Long doubles are available only if your system supports
          long double values _and_ if Perl has been compiled to
          support those.  Raises an exception otherwise.
          Note that there are different long double formats.)

    p  A pointer to a null-terminated string.
    P  A pointer to a structure (fixed-length string).

    u  A uuencoded string.
    U  A Unicode character number.  Encodes to a character in char-
       acter mode and UTF-8 (or UTF-EBCDIC in EBCDIC platforms) in
       byte mode.

    w  A BER compressed integer (not an ASN.1 BER, see perlpacktut
       for details).  Its bytes represent an unsigned integer in
       base 128, most significant digit first, with as few digits
       as possible.  Bit eight (the high bit) is set on each byte
       except the last.

    x  A null byte (a.k.a ASCII NUL, "\000", chr(0))
    X  Back up a byte.
    @@  Null-fill or truncate to absolute position, counted from the
       start of the innermost ()-group.
    .  Null-fill or truncate to absolute position specified by
       the value.
    (  Start of a ()-group.

One or more modifiers below may optionally follow certain letters in the
TEMPLATE (the second column lists letters for which the modifier is valid):

    !   sSlLiI     Forces native (short, long, int) sizes instead
                   of fixed (16-/32-bit) sizes.

    !   xX         Make x and X act as alignment commands.

    !   nNvV       Treat integers as signed instead of unsigned.

    !   @@.         Specify position as byte offset in the internal
                   representation of the packed string.  Efficient
                   but dangerous.

    >   sSiIlLqQ   Force big-endian byte-order on the type.
        jJfFdDpP   (The "big end" touches the construct.)

    <   sSiIlLqQ   Force little-endian byte-order on the type.
        jJfFdDpP   (The "little end" touches the construct.)

The C<< > >> and C<< < >> modifiers can also be used on C<()> groups
to force a particular byte-order on all components in that group,
including all its subgroups.

=begin comment

Larry recalls that the hex and bit string formats (H, h, B, b) were added to
pack for processing data from NASA's Magellan probe.  Magellan was in an
elliptical orbit, using the antenna for the radar mapping when close to
Venus and for communicating data back to Earth for the rest of the orbit.
There were two transmission units, but one of these failed, and then the
other developed a fault whereby it would randomly flip the sense of all the
bits. It was easy to automatically detect complete records with the correct
sense, and complete records with all the bits flipped. However, this didn't
recover the records where the sense flipped midway. A colleague of Larry's
was able to pretty much eyeball where the records flipped, so they wrote an
editor named kybble (a pun on the dog food Kibbles 'n Bits) to enable him to
manually correct the records and recover the data. For this purpose pack
gained the hex and bit string format specifiers.

git shows that they were added to perl 3.0 in patch #44 (Jan 1991, commit
27e2fb84680b9cc1), but the patch description makes no mention of their
addition, let alone the story behind them.

=end comment

The following rules apply:

=over

=item *

Each letter may optionally be followed by a number indicating the repeat
count.  A numeric repeat count may optionally be enclosed in brackets, as
in C<pack("C[80]", @@arr)>.  The repeat count gobbles that many values from
the LIST when used with all format types other than C<a>, C<A>, C<Z>, C<b>,
C<B>, C<h>, C<H>, C<@@>, C<.>, C<x>, C<X>, and C<P>, where it means
something else, described below.  Supplying a C<*> for the repeat count
instead of a number means to use however many items are left, except for:

=over

=item *

C<@@>, C<x>, and C<X>, where it is equivalent to C<0>.

=item *

<.>, where it means relative to the start of the string.

=item *

C<u>, where it is equivalent to 1 (or 45, which here is equivalent).

=back

One can replace a numeric repeat count with a template letter enclosed in
brackets to use the packed byte length of the bracketed template for the
repeat count.

For example, the template C<x[L]> skips as many bytes as in a packed long,
and the template C<"$t X[$t] $t"> unpacks twice whatever $t (when
variable-expanded) unpacks.  If the template in brackets contains alignment
commands (such as C<x![d]>), its packed length is calculated as if the
start of the template had the maximal possible alignment.

When used with C<Z>, a C<*> as the repeat count is guaranteed to add a
trailing null byte, so the resulting string is always one byte longer than
the byte length of the item itself.

When used with C<@@>, the repeat count represents an offset from the start
of the innermost C<()> group.

When used with C<.>, the repeat count determines the starting position to
calculate the value offset as follows:

=over

=item *

If the repeat count is C<0>, it's relative to the current position.

=item *

If the repeat count is C<*>, the offset is relative to the start of the
packed string.

=item *

And if it's an integer I<n>, the offset is relative to the start of the
I<n>th innermost C<( )> group, or to the start of the string if I<n> is
bigger then the group level.

=back

The repeat count for C<u> is interpreted as the maximal number of bytes
to encode per line of output, with 0, 1 and 2 replaced by 45.  The repeat
count should not be more than 65.

=item *

The C<a>, C<A>, and C<Z> types gobble just one value, but pack it as a
string of length count, padding with nulls or spaces as needed.  When
unpacking, C<A> strips trailing whitespace and nulls, C<Z> strips everything
after the first null, and C<a> returns data with no stripping at all.

If the value to pack is too long, the result is truncated.  If it's too
long and an explicit count is provided, C<Z> packs only C<$count-1> bytes,
followed by a null byte.  Thus C<Z> always packs a trailing null, except
when the count is 0.

=item *

Likewise, the C<b> and C<B> formats pack a string that's that many bits long.
Each such format generates 1 bit of the result.  These are typically followed
by a repeat count like C<B8> or C<B64>.

Each result bit is based on the least-significant bit of the corresponding
input character, i.e., on C<ord($char)%2>.  In particular, characters C<"0">
and C<"1"> generate bits 0 and 1, as do characters C<"\000"> and C<"\001">.

Starting from the beginning of the input string, each 8-tuple
of characters is converted to 1 character of output.  With format C<b>,
the first character of the 8-tuple determines the least-significant bit of a
character; with format C<B>, it determines the most-significant bit of
a character.

If the length of the input string is not evenly divisible by 8, the
remainder is packed as if the input string were padded by null characters
at the end.  Similarly during unpacking, "extra" bits are ignored.

If the input string is longer than needed, remaining characters are ignored.

A C<*> for the repeat count uses all characters of the input field.
On unpacking, bits are converted to a string of C<0>s and C<1>s.

=item *

The C<h> and C<H> formats pack a string that many nybbles (4-bit groups,
representable as hexadecimal digits, C<"0".."9"> C<"a".."f">) long.

For each such format, L<C<pack>|/pack TEMPLATE,LIST> generates 4 bits of result.
With non-alphabetical characters, the result is based on the 4 least-significant
bits of the input character, i.e., on C<ord($char)%16>.  In particular,
characters C<"0"> and C<"1"> generate nybbles 0 and 1, as do bytes
C<"\000"> and C<"\001">.  For characters C<"a".."f"> and C<"A".."F">, the result
is compatible with the usual hexadecimal digits, so that C<"a"> and
C<"A"> both generate the nybble C<0xA==10>.  Use only these specific hex
characters with this format.

Starting from the beginning of the template to
L<C<pack>|/pack TEMPLATE,LIST>, each pair
of characters is converted to 1 character of output.  With format C<h>, the
first character of the pair determines the least-significant nybble of the
output character; with format C<H>, it determines the most-significant
nybble.

If the length of the input string is not even, it behaves as if padded by
a null character at the end.  Similarly, "extra" nybbles are ignored during
unpacking.

If the input string is longer than needed, extra characters are ignored.

A C<*> for the repeat count uses all characters of the input field.  For
L<C<unpack>|/unpack TEMPLATE,EXPR>, nybbles are converted to a string of
hexadecimal digits.

=item *

The C<p> format packs a pointer to a null-terminated string.  You are
responsible for ensuring that the string is not a temporary value, as that
could potentially get deallocated before you got around to using the packed
result.  The C<P> format packs a pointer to a structure of the size indicated
by the length.  A null pointer is created if the corresponding value for
C<p> or C<P> is L<C<undef>|/undef EXPR>; similarly with
L<C<unpack>|/unpack TEMPLATE,EXPR>, where a null pointer unpacks into
L<C<undef>|/undef EXPR>.

If your system has a strange pointer size--meaning a pointer is neither as
big as an int nor as big as a long--it may not be possible to pack or
unpack pointers in big- or little-endian byte order.  Attempting to do
so raises an exception.

=item *

The C</> template character allows packing and unpacking of a sequence of
items where the packed structure contains a packed item count followed by
the packed items themselves.  This is useful when the structure you're
unpacking has encoded the sizes or repeat counts for some of its fields
within the structure itself as separate fields.

For L<C<pack>|/pack TEMPLATE,LIST>, you write
I<length-item>C</>I<sequence-item>, and the
I<length-item> describes how the length value is packed.  Formats likely
to be of most use are integer-packing ones like C<n> for Java strings,
C<w> for ASN.1 or SNMP, and C<N> for Sun XDR.

For L<C<pack>|/pack TEMPLATE,LIST>, I<sequence-item> may have a repeat
count, in which case
the minimum of that and the number of available items is used as the argument
for I<length-item>.  If it has no repeat count or uses a '*', the number
of available items is used.

For L<C<unpack>|/unpack TEMPLATE,EXPR>, an internal stack of integer
arguments unpacked so far is
used.  You write C</>I<sequence-item> and the repeat count is obtained by
popping off the last element from the stack.  The I<sequence-item> must not
have a repeat count.

If I<sequence-item> refers to a string type (C<"A">, C<"a">, or C<"Z">),
the I<length-item> is the string length, not the number of strings.  With
an explicit repeat count for pack, the packed string is adjusted to that
length.  For example:

 This code:                             gives this result:

 unpack("W/a", "\004Gurusamy")          ("Guru")
 unpack("a3/A A*", "007 Bond  J ")      (" Bond", "J")
 unpack("a3 x2 /A A*", "007: Bond, J.") ("Bond, J", ".")

 pack("n/a* w/a","hello,","world")     "\000\006hello,\005world"
 pack("a/W2", ord("a") .. ord("z"))    "2ab"

The I<length-item> is not returned explicitly from
L<C<unpack>|/unpack TEMPLATE,EXPR>.

Supplying a count to the I<length-item> format letter is only useful with
C<A>, C<a>, or C<Z>.  Packing with a I<length-item> of C<a> or C<Z> may
introduce C<"\000"> characters, which Perl does not regard as legal in
numeric strings.

=item *

The integer types C<s>, C<S>, C<l>, and C<L> may be
followed by a C<!> modifier to specify native shorts or
longs.  As shown in the example above, a bare C<l> means
exactly 32 bits, although the native C<long> as seen by the local C compiler
may be larger.  This is mainly an issue on 64-bit platforms.  You can
see whether using C<!> makes any difference this way:

    printf "format s is %d, s! is %d\n",
	length pack("s"), length pack("s!");

    printf "format l is %d, l! is %d\n",
	length pack("l"), length pack("l!");


C<i!> and C<I!> are also allowed, but only for completeness' sake:
they are identical to C<i> and C<I>.

The actual sizes (in bytes) of native shorts, ints, longs, and long
longs on the platform where Perl was built are also available from
the command line:

    $ perl -V:{short,int,long{,long}}size
    shortsize='2';
    intsize='4';
    longsize='4';
    longlongsize='8';

or programmatically via the L<C<Config>|Config> module:

       use Config;
       print $Config{shortsize},    "\n";
       print $Config{intsize},      "\n";
       print $Config{longsize},     "\n";
       print $Config{longlongsize}, "\n";

C<$Config{longlongsize}> is undefined on systems without
long long support.

=item *

The integer formats C<s>, C<S>, C<i>, C<I>, C<l>, C<L>, C<j>, and C<J> are
inherently non-portable between processors and operating systems because
they obey native byteorder and endianness.  For example, a 4-byte integer
0x12345678 (305419896 decimal) would be ordered natively (arranged in and
handled by the CPU registers) into bytes as

    0x12 0x34 0x56 0x78  # big-endian
    0x78 0x56 0x34 0x12  # little-endian

Basically, Intel and VAX CPUs are little-endian, while everybody else,
including Motorola m68k/88k, PPC, Sparc, HP PA, Power, and Cray, are
big-endian.  Alpha and MIPS can be either: Digital/Compaq uses (well, used)
them in little-endian mode, but SGI/Cray uses them in big-endian mode.

The names I<big-endian> and I<little-endian> are comic references to the
egg-eating habits of the little-endian Lilliputians and the big-endian
Blefuscudians from the classic Jonathan Swift satire, I<Gulliver's Travels>.
This entered computer lingo via the paper "On Holy Wars and a Plea for
Peace" by Danny Cohen, USC/ISI IEN 137, April 1, 1980.

Some systems may have even weirder byte orders such as

   0x56 0x78 0x12 0x34
   0x34 0x12 0x78 0x56

These are called mid-endian, middle-endian, mixed-endian, or just weird.

You can determine your system endianness with this incantation:

   printf("%#02x ", $_) for unpack("W*", pack L=>0x12345678);

The byteorder on the platform where Perl was built is also available
via L<Config>:

    use Config;
    print "$Config{byteorder}\n";

or from the command line:

    $ perl -V:byteorder

Byteorders C<"1234"> and C<"12345678"> are little-endian; C<"4321">
and C<"87654321"> are big-endian.  Systems with multiarchitecture binaries
will have C<"ffff">, signifying that static information doesn't work,
one must use runtime probing.

For portably packed integers, either use the formats C<n>, C<N>, C<v>,
and C<V> or else use the C<< > >> and C<< < >> modifiers described
immediately below.  See also L<perlport>.

=item *

Also floating point numbers have endianness.  Usually (but not always)
this agrees with the integer endianness.  Even though most platforms
these days use the IEEE 754 binary format, there are differences,
especially if the long doubles are involved.  You can see the
C<Config> variables C<doublekind> and C<longdblkind> (also C<doublesize>,
C<longdblsize>): the "kind" values are enums, unlike C<byteorder>.

Portability-wise the best option is probably to keep to the IEEE 754
64-bit doubles, and of agreed-upon endianness.  Another possibility
is the C<"%a">) format of L<C<printf>|/printf FILEHANDLE FORMAT, LIST>.

=item *

Starting with Perl 5.10.0, integer and floating-point formats, along with
the C<p> and C<P> formats and C<()> groups, may all be followed by the
C<< > >> or C<< < >> endianness modifiers to respectively enforce big-
or little-endian byte-order.  These modifiers are especially useful
given how C<n>, C<N>, C<v>, and C<V> don't cover signed integers,
64-bit integers, or floating-point values.

Here are some concerns to keep in mind when using an endianness modifier:

=over

=item *

Exchanging signed integers between different platforms works only
when all platforms store them in the same format.  Most platforms store
signed integers in two's-complement notation, so usually this is not an issue.

=item *

The C<< > >> or C<< < >> modifiers can only be used on floating-point
formats on big- or little-endian machines.  Otherwise, attempting to
use them raises an exception.

=item *

Forcing big- or little-endian byte-order on floating-point values for
data exchange can work only if all platforms use the same
binary representation such as IEEE floating-point.  Even if all
platforms are using IEEE, there may still be subtle differences.  Being able
to use C<< > >> or C<< < >> on floating-point values can be useful,
but also dangerous if you don't know exactly what you're doing.
It is not a general way to portably store floating-point values.

=item *

When using C<< > >> or C<< < >> on a C<()> group, this affects
all types inside the group that accept byte-order modifiers,
including all subgroups.  It is silently ignored for all other
types.  You are not allowed to override the byte-order within a group
that already has a byte-order modifier suffix.

=back

=item *

Real numbers (floats and doubles) are in native machine format only.
Due to the multiplicity of floating-point formats and the lack of a
standard "network" representation for them, no facility for interchange has been
made.  This means that packed floating-point data written on one machine
may not be readable on another, even if both use IEEE floating-point
arithmetic (because the endianness of the memory representation is not part
of the IEEE spec).  See also L<perlport>.

If you know I<exactly> what you're doing, you can use the C<< > >> or C<< < >>
modifiers to force big- or little-endian byte-order on floating-point values.

Because Perl uses doubles (or long doubles, if configured) internally for
all numeric calculation, converting from double into float and thence
to double again loses precision, so C<unpack("f", pack("f", $foo)>)
will not in general equal $foo.

=item *

Pack and unpack can operate in two modes: character mode (C<C0> mode) where
the packed string is processed per character, and UTF-8 byte mode (C<U0> mode)
where the packed string is processed in its UTF-8-encoded Unicode form on
a byte-by-byte basis.  Character mode is the default
unless the format string starts with C<U>.  You
can always switch mode mid-format with an explicit
C<C0> or C<U0> in the format.  This mode remains in effect until the next
mode change, or until the end of the C<()> group it (directly) applies to.

Using C<C0> to get Unicode characters while using C<U0> to get I<non>-Unicode
bytes is not necessarily obvious.   Probably only the first of these
is what you want:

    $ perl -CS -E 'say "\x{3B1}\x{3C9}"' |
      perl -CS -ne 'printf "%v04X\n", $_ for unpack("C0A*", $_)'
    03B1.03C9
    $ perl -CS -E 'say "\x{3B1}\x{3C9}"' |
      perl -CS -ne 'printf "%v02X\n", $_ for unpack("U0A*", $_)'
    CE.B1.CF.89
    $ perl -CS -E 'say "\x{3B1}\x{3C9}"' |
      perl -C0 -ne 'printf "%v02X\n", $_ for unpack("C0A*", $_)'
    CE.B1.CF.89
    $ perl -CS -E 'say "\x{3B1}\x{3C9}"' |
      perl -C0 -ne 'printf "%v02X\n", $_ for unpack("U0A*", $_)'
    C3.8E.C2.B1.C3.8F.C2.89

Those examples also illustrate that you should not try to use
L<C<pack>|/pack TEMPLATE,LIST>/L<C<unpack>|/unpack TEMPLATE,EXPR> as a
substitute for the L<Encode> module.

=item *

You must yourself do any alignment or padding by inserting, for example,
enough C<"x">es while packing.  There is no way for
L<C<pack>|/pack TEMPLATE,LIST> and L<C<unpack>|/unpack TEMPLATE,EXPR>
to know where characters are going to or coming from, so they
handle their output and input as flat sequences of characters.

=item *

A C<()> group is a sub-TEMPLATE enclosed in parentheses.  A group may
take a repeat count either as postfix, or for
L<C<unpack>|/unpack TEMPLATE,EXPR>, also via the C</>
template character.  Within each repetition of a group, positioning with
C<@@> starts over at 0.  Therefore, the result of

    pack("@@1A((@@2A)@@3A)", qw[X Y Z])

is the string C<"\0X\0\0YZ">.

=item *

C<x> and C<X> accept the C<!> modifier to act as alignment commands: they
jump forward or back to the closest position aligned at a multiple of C<count>
characters.  For example, to L<C<pack>|/pack TEMPLATE,LIST> or
L<C<unpack>|/unpack TEMPLATE,EXPR> a C structure like

    struct {
	char   c;    /* one signed, 8-bit character */
	double d;
	char   cc[2];
    }

one may need to use the template C<c x![d] d c[2]>.  This assumes that
doubles must be aligned to the size of double.

For alignment commands, a C<count> of 0 is equivalent to a C<count> of 1;
both are no-ops.

=item *

C<n>, C<N>, C<v> and C<V> accept the C<!> modifier to
represent signed 16-/32-bit integers in big-/little-endian order.
This is portable only when all platforms sharing packed data use the
same binary representation for signed integers; for example, when all
platforms use two's-complement representation.

=item *

Comments can be embedded in a TEMPLATE using C<#> through the end of line.
White space can separate pack codes from each other, but modifiers and
repeat counts must follow immediately.  Breaking complex templates into
individual line-by-line components, suitably annotated, can do as much to
improve legibility and maintainability of pack/unpack formats as C</x> can
for complicated pattern matches.

=item *

If TEMPLATE requires more arguments than L<C<pack>|/pack TEMPLATE,LIST>
is given, L<C<pack>|/pack TEMPLATE,LIST>
assumes additional C<""> arguments.  If TEMPLATE requires fewer arguments
than given, extra arguments are ignored.

=item *

Attempting to pack the special floating point values C<Inf> and C<NaN>
(infinity, also in negative, and not-a-number) into packed integer values
(like C<"L">) is a fatal error.  The reason for this is that there simply
isn't any sensible mapping for these special values into integers.

=back

Examples:

    $foo = pack("WWWW",65,66,67,68);
    # foo eq "ABCD"
    $foo = pack("W4",65,66,67,68);
    # same thing
    $foo = pack("W4",0x24b6,0x24b7,0x24b8,0x24b9);
    # same thing with Unicode circled letters.
    $foo = pack("U4",0x24b6,0x24b7,0x24b8,0x24b9);
    # same thing with Unicode circled letters.  You don't get the
    # UTF-8 bytes because the U at the start of the format caused
    # a switch to U0-mode, so the UTF-8 bytes get joined into
    # characters
    $foo = pack("C0U4",0x24b6,0x24b7,0x24b8,0x24b9);
    # foo eq "\xe2\x92\xb6\xe2\x92\xb7\xe2\x92\xb8\xe2\x92\xb9"
    # This is the UTF-8 encoding of the string in the
    # previous example

    $foo = pack("ccxxcc",65,66,67,68);
    # foo eq "AB\0\0CD"

    # NOTE: The examples above featuring "W" and "c" are true
    # only on ASCII and ASCII-derived systems such as ISO Latin 1
    # and UTF-8.  On EBCDIC systems, the first example would be
    #      $foo = pack("WWWW",193,194,195,196);

    $foo = pack("s2",1,2);
    # "\001\000\002\000" on little-endian
    # "\000\001\000\002" on big-endian

    $foo = pack("a4","abcd","x","y","z");
    # "abcd"

    $foo = pack("aaaa","abcd","x","y","z");
    # "axyz"

    $foo = pack("a14","abcdefg");
    # "abcdefg\0\0\0\0\0\0\0"

    $foo = pack("i9pl", gmtime);
    # a real struct tm (on my system anyway)

    $utmp_template = "Z8 Z8 Z16 L";
    $utmp = pack($utmp_template, @@utmp1);
    # a struct utmp (BSDish)

    @@utmp2 = unpack($utmp_template, $utmp);
    # "@@utmp1" eq "@@utmp2"

    sub bintodec {
        unpack("N", pack("B32", substr("0" x 32 . shift, -32)));
    }

    $foo = pack('sx2l', 12, 34);
    # short 12, two zero bytes padding, long 34
    $bar = pack('s@@4l', 12, 34);
    # short 12, zero fill to position 4, long 34
    # $foo eq $bar
    $baz = pack('s.l', 12, 4, 34);
    # short 12, zero fill to position 4, long 34

    $foo = pack('nN', 42, 4711);
    # pack big-endian 16- and 32-bit unsigned integers
    $foo = pack('S>L>', 42, 4711);
    # exactly the same
    $foo = pack('s<l<', -42, 4711);
    # pack little-endian 16- and 32-bit signed integers
    $foo = pack('(sl)<', -42, 4711);
    # exactly the same

The same template may generally also be used in
L<C<unpack>|/unpack TEMPLATE,EXPR>.

=item package NAMESPACE

=item package NAMESPACE VERSION
X<package> X<module> X<namespace> X<version>

=item package NAMESPACE BLOCK

=item package NAMESPACE VERSION BLOCK
X<package> X<module> X<namespace> X<version>

=for Pod::Functions declare a separate global namespace

Declares the BLOCK or the rest of the compilation unit as being in the
given namespace.  The scope of the package declaration is either the
supplied code BLOCK or, in the absence of a BLOCK, from the declaration
itself through the end of current scope (the enclosing block, file, or
L<C<eval>|/eval EXPR>).  That is, the forms without a BLOCK are
operative through the end of the current scope, just like the
L<C<my>|/my VARLIST>, L<C<state>|/state VARLIST>, and
L<C<our>|/our VARLIST> operators.  All unqualified dynamic identifiers
in this scope will be in the given namespace, except where overridden by
another L<C<package>|/package NAMESPACE> declaration or
when they're one of the special identifiers that qualify into C<main::>,
like C<STDOUT>, C<ARGV>, C<ENV>, and the punctuation variables.

A package statement affects dynamic variables only, including those
you've used L<C<local>|/local EXPR> on, but I<not> lexically-scoped
variables, which are created with L<C<my>|/my VARLIST>,
L<C<state>|/state VARLIST>, or L<C<our>|/our VARLIST>.  Typically it
would be the first declaration in a file included by
L<C<require>|/require VERSION> or L<C<use>|/use Module VERSION LIST>.
You can switch into a
package in more than one place, since this only determines which default
symbol table the compiler uses for the rest of that block.  You can refer to
identifiers in other packages than the current one by prefixing the identifier
with the package name and a double colon, as in C<$SomePack::var>
or C<ThatPack::INPUT_HANDLE>.  If package name is omitted, the C<main>
package as assumed.  That is, C<$::sail> is equivalent to
C<$main::sail> (as well as to C<$main'sail>, still seen in ancient
code, mostly from Perl 4).

If VERSION is provided, L<C<package>|/package NAMESPACE> sets the
C<$VERSION> variable in the given
namespace to a L<version> object with the VERSION provided.  VERSION must be a
"strict" style version number as defined by the L<version> module: a positive
decimal number (integer or decimal-fraction) without exponentiation or else a
dotted-decimal v-string with a leading 'v' character and at least three
components.  You should set C<$VERSION> only once per package.

See L<perlmod/"Packages"> for more information about packages, modules,
and classes.  See L<perlsub> for other scoping issues.

=item __PACKAGE__
X<__PACKAGE__>

=for Pod::Functions +5.004 the current package

A special token that returns the name of the package in which it occurs.

=item pipe READHANDLE,WRITEHANDLE
X<pipe>

=for Pod::Functions open a pair of connected filehandles

Opens a pair of connected pipes like the corresponding system call.
Note that if you set up a loop of piped processes, deadlock can occur
unless you are very careful.  In addition, note that Perl's pipes use
IO buffering, so you may need to set L<C<$E<verbar>>|perlvar/$E<verbar>>
to flush your WRITEHANDLE after each command, depending on the
application.

Returns true on success.

See L<IPC::Open2>, L<IPC::Open3>, and
L<perlipc/"Bidirectional Communication with Another Process">
for examples of such things.

On systems that support a close-on-exec flag on files, that flag is set
on all newly opened file descriptors whose
L<C<fileno>|/fileno FILEHANDLE>s are I<higher> than the current value of
L<C<$^F>|perlvar/$^F> (by default 2 for C<STDERR>).  See L<perlvar/$^F>.

=item pop ARRAY
X<pop> X<stack>

=item pop

=for Pod::Functions remove the last element from an array and return it

Pops and returns the last value of the array, shortening the array by
one element.

Returns the undefined value if the array is empty, although this may
also happen at other times.  If ARRAY is omitted, pops the
L<C<@@ARGV>|perlvar/@@ARGV> array in the main program, but the
L<C<@@_>|perlvar/@@_> array in subroutines, just like
L<C<shift>|/shift ARRAY>.

Starting with Perl 5.14, an experimental feature allowed
L<C<pop>|/pop ARRAY> to take a
scalar expression. This experiment has been deemed unsuccessful, and was
removed as of Perl 5.24.

=item pos SCALAR
X<pos> X<match, position>

=item pos

=for Pod::Functions find or set the offset for the last/next m//g search

Returns the offset of where the last C<m//g> search left off for the
variable in question (L<C<$_>|perlvar/$_> is used when the variable is not
specified).  Note that 0 is a valid match offset.
L<C<undef>|/undef EXPR> indicates
that the search position is reset (usually due to match failure, but
can also be because no match has yet been run on the scalar).

L<C<pos>|/pos SCALAR> directly accesses the location used by the regexp
engine to store the offset, so assigning to L<C<pos>|/pos SCALAR> will
change that offset, and so will also influence the C<\G> zero-width
assertion in regular expressions.  Both of these effects take place for
the next match, so you can't affect the position with
L<C<pos>|/pos SCALAR> during the current match, such as in
C<(?{pos() = 5})> or C<s//pos() = 5/e>.

Setting L<C<pos>|/pos SCALAR> also resets the I<matched with
zero-length> flag, described
under L<perlre/"Repeated Patterns Matching a Zero-length Substring">.

Because a failed C<m//gc> match doesn't reset the offset, the return
from L<C<pos>|/pos SCALAR> won't change either in this case.  See
L<perlre> and L<perlop>.

=item print FILEHANDLE LIST
X<print>

=item print FILEHANDLE

=item print LIST

=item print

=for Pod::Functions output a list to a filehandle

Prints a string or a list of strings.  Returns true if successful.
FILEHANDLE may be a scalar variable containing the name of or a reference
to the filehandle, thus introducing one level of indirection.  (NOTE: If
FILEHANDLE is a variable and the next token is a term, it may be
misinterpreted as an operator unless you interpose a C<+> or put
parentheses around the arguments.)  If FILEHANDLE is omitted, prints to the
last selected (see L<C<select>|/select FILEHANDLE>) output handle.  If
LIST is omitted, prints L<C<$_>|perlvar/$_> to the currently selected
output handle.  To use FILEHANDLE alone to print the content of
L<C<$_>|perlvar/$_> to it, you must use a bareword filehandle like
C<FH>, not an indirect one like C<$fh>.  To set the default output handle
to something other than STDOUT, use the select operation.

The current value of L<C<$,>|perlvar/$,> (if any) is printed between
each LIST item.  The current value of L<C<$\>|perlvar/$\> (if any) is
printed after the entire LIST has been printed.  Because print takes a
LIST, anything in the LIST is evaluated in list context, including any
subroutines whose return lists you pass to
L<C<print>|/print FILEHANDLE LIST>.  Be careful not to follow the print
keyword with a left
parenthesis unless you want the corresponding right parenthesis to
terminate the arguments to the print; put parentheses around all arguments
(or interpose a C<+>, but that doesn't look as good).

If you're storing handles in an array or hash, or in general whenever
you're using any expression more complex than a bareword handle or a plain,
unsubscripted scalar variable to retrieve it, you will have to use a block
returning the filehandle value instead, in which case the LIST may not be
omitted:

    print { $files[$i] } "stuff\n";
    print { $OK ? STDOUT : STDERR } "stuff\n";

Printing to a closed pipe or socket will generate a SIGPIPE signal.  See
L<perlipc> for more on signal handling.

=item printf FILEHANDLE FORMAT, LIST
X<printf>

=item printf FILEHANDLE

=item printf FORMAT, LIST

=item printf

=for Pod::Functions output a formatted list to a filehandle

Equivalent to C<print FILEHANDLE sprintf(FORMAT, LIST)>, except that
L<C<$\>|perlvar/$\> (the output record separator) is not appended.  The
FORMAT and the LIST are actually parsed as a single list.  The first
argument of the list will be interpreted as the
L<C<printf>|/printf FILEHANDLE FORMAT, LIST> format.  This means that
C<printf(@@_)> will use C<$_[0]> as the format.  See
L<sprintf|/sprintf FORMAT, LIST> for an explanation of the format
argument.  If C<use locale> (including C<use locale ':not_characters'>)
is in effect and L<C<POSIX::setlocale>|POSIX/C<setlocale>> has been
called, the character used for the decimal separator in formatted
floating-point numbers is affected by the C<LC_NUMERIC> locale setting.
See L<perllocale> and L<POSIX>.

For historical reasons, if you omit the list, L<C<$_>|perlvar/$_> is
used as the format;
to use FILEHANDLE without a list, you must use a bareword filehandle like
C<FH>, not an indirect one like C<$fh>.  However, this will rarely do what
you want; if L<C<$_>|perlvar/$_> contains formatting codes, they will be
replaced with the empty string and a warning will be emitted if
L<warnings> are enabled.  Just use L<C<print>|/print FILEHANDLE LIST> if
you want to print the contents of L<C<$_>|perlvar/$_>.

Don't fall into the trap of using a
L<C<printf>|/printf FILEHANDLE FORMAT, LIST> when a simple
L<C<print>|/print FILEHANDLE LIST> would do.  The
L<C<print>|/print FILEHANDLE LIST> is more efficient and less error
prone.

=item prototype FUNCTION
X<prototype>

=item prototype

=for Pod::Functions +5.002 get the prototype (if any) of a subroutine

Returns the prototype of a function as a string (or
L<C<undef>|/undef EXPR> if the
function has no prototype).  FUNCTION is a reference to, or the name of,
the function whose prototype you want to retrieve.  If FUNCTION is omitted,
L<C<$_>|perlvar/$_> is used.

If FUNCTION is a string starting with C<CORE::>, the rest is taken as a
name for a Perl builtin.  If the builtin's arguments
cannot be adequately expressed by a prototype
(such as L<C<system>|/system LIST>), L<C<prototype>|/prototype FUNCTION>
returns L<C<undef>|/undef EXPR>, because the builtin
does not really behave like a Perl function.  Otherwise, the string
describing the equivalent prototype is returned.

=item push ARRAY,LIST
X<push> X<stack>

=for Pod::Functions append one or more elements to an array

Treats ARRAY as a stack by appending the values of LIST to the end of
ARRAY.  The length of ARRAY increases by the length of LIST.  Has the same
effect as

    for my $value (LIST) {
        $ARRAY[++$#ARRAY] = $value;
    }

but is more efficient.  Returns the number of elements in the array following
the completed L<C<push>|/push ARRAY,LIST>.

Starting with Perl 5.14, an experimental feature allowed
L<C<push>|/push ARRAY,LIST> to take a
scalar expression. This experiment has been deemed unsuccessful, and was
removed as of Perl 5.24.

=item q/STRING/

=for Pod::Functions singly quote a string

=item qq/STRING/

=for Pod::Functions doubly quote a string

=item qw/STRING/

=for Pod::Functions quote a list of words

=item qx/STRING/

=for Pod::Functions backquote quote a string

Generalized quotes.  See L<perlop/"Quote-Like Operators">.

=item qr/STRING/

=for Pod::Functions +5.005 compile pattern

Regexp-like quote.  See L<perlop/"Regexp Quote-Like Operators">.

=item quotemeta EXPR
X<quotemeta> X<metacharacter>

=item quotemeta

=for Pod::Functions quote regular expression magic characters

Returns the value of EXPR with all the ASCII non-"word"
characters backslashed.  (That is, all ASCII characters not matching
C</[A-Za-z_0-9]/> will be preceded by a backslash in the
returned string, regardless of any locale settings.)
This is the internal function implementing
the C<\Q> escape in double-quoted strings.
(See below for the behavior on non-ASCII code points.)

If EXPR is omitted, uses L<C<$_>|perlvar/$_>.

quotemeta (and C<\Q> ... C<\E>) are useful when interpolating strings into
regular expressions, because by default an interpolated variable will be
considered a mini-regular expression.  For example:

    my $sentence = 'The quick brown fox jumped over the lazy dog';
    my $substring = 'quick.*?fox';
    $sentence =~ s{$substring}{big bad wolf};

Will cause C<$sentence> to become C<'The big bad wolf jumped over...'>.

On the other hand:

    my $sentence = 'The quick brown fox jumped over the lazy dog';
    my $substring = 'quick.*?fox';
    $sentence =~ s{\Q$substring\E}{big bad wolf};

Or:

    my $sentence = 'The quick brown fox jumped over the lazy dog';
    my $substring = 'quick.*?fox';
    my $quoted_substring = quotemeta($substring);
    $sentence =~ s{$quoted_substring}{big bad wolf};

Will both leave the sentence as is.
Normally, when accepting literal string input from the user,
L<C<quotemeta>|/quotemeta EXPR> or C<\Q> must be used.

In Perl v5.14, all non-ASCII characters are quoted in non-UTF-8-encoded
strings, but not quoted in UTF-8 strings.

Starting in Perl v5.16, Perl adopted a Unicode-defined strategy for
quoting non-ASCII characters; the quoting of ASCII characters is
unchanged.

Also unchanged is the quoting of non-UTF-8 strings when outside the
scope of a
L<C<use feature 'unicode_strings'>|feature/The 'unicode_strings' feature>,
which is to quote all
characters in the upper Latin1 range.  This provides complete backwards
compatibility for old programs which do not use Unicode.  (Note that
C<unicode_strings> is automatically enabled within the scope of a
S<C<use v5.12>> or greater.)

Within the scope of L<C<use locale>|locale>, all non-ASCII Latin1 code
points
are quoted whether the string is encoded as UTF-8 or not.  As mentioned
above, locale does not affect the quoting of ASCII-range characters.
This protects against those locales where characters such as C<"|"> are
considered to be word characters.

Otherwise, Perl quotes non-ASCII characters using an adaptation from
Unicode (see L<http://www.unicode.org/reports/tr31/>).
The only code points that are quoted are those that have any of the
Unicode properties:  Pattern_Syntax, Pattern_White_Space, White_Space,
Default_Ignorable_Code_Point, or General_Category=Control.

Of these properties, the two important ones are Pattern_Syntax and
Pattern_White_Space.  They have been set up by Unicode for exactly this
purpose of deciding which characters in a regular expression pattern
should be quoted.  No character that can be in an identifier has these
properties.

Perl promises, that if we ever add regular expression pattern
metacharacters to the dozen already defined
(C<\ E<verbar> ( ) [ { ^ $ * + ? .>), that we will only use ones that have the
Pattern_Syntax property.  Perl also promises, that if we ever add
characters that are considered to be white space in regular expressions
(currently mostly affected by C</x>), they will all have the
Pattern_White_Space property.

Unicode promises that the set of code points that have these two
properties will never change, so something that is not quoted in v5.16
will never need to be quoted in any future Perl release.  (Not all the
code points that match Pattern_Syntax have actually had characters
assigned to them; so there is room to grow, but they are quoted
whether assigned or not.  Perl, of course, would never use an
unassigned code point as an actual metacharacter.)

Quoting characters that have the other 3 properties is done to enhance
the readability of the regular expression and not because they actually
need to be quoted for regular expression purposes (characters with the
White_Space property are likely to be indistinguishable on the page or
screen from those with the Pattern_White_Space property; and the other
two properties contain non-printing characters).

=item rand EXPR
X<rand> X<random>

=item rand

=for Pod::Functions retrieve the next pseudorandom number

Returns a random fractional number greater than or equal to C<0> and less
than the value of EXPR.  (EXPR should be positive.)  If EXPR is
omitted, the value C<1> is used.  Currently EXPR with the value C<0> is
also special-cased as C<1> (this was undocumented before Perl 5.8.0
and is subject to change in future versions of Perl).  Automatically calls
L<C<srand>|/srand EXPR> unless L<C<srand>|/srand EXPR> has already been
called.  See also L<C<srand>|/srand EXPR>.

Apply L<C<int>|/int EXPR> to the value returned by L<C<rand>|/rand EXPR>
if you want random integers instead of random fractional numbers.  For
example,

    int(rand(10))

returns a random integer between C<0> and C<9>, inclusive.

(Note: If your rand function consistently returns numbers that are too
large or too small, then your version of Perl was probably compiled
with the wrong number of RANDBITS.)

B<L<C<rand>|/rand EXPR> is not cryptographically secure.  You should not rely
on it in security-sensitive situations.>  As of this writing, a
number of third-party CPAN modules offer random number generators
intended by their authors to be cryptographically secure,
including: L<Data::Entropy>, L<Crypt::Random>, L<Math::Random::Secure>,
and L<Math::TrulyRandom>.

=item read FILEHANDLE,SCALAR,LENGTH,OFFSET
X<read> X<file, read>

=item read FILEHANDLE,SCALAR,LENGTH

=for Pod::Functions fixed-length buffered input from a filehandle

Attempts to read LENGTH I<characters> of data into variable SCALAR
from the specified FILEHANDLE.  Returns the number of characters
actually read, C<0> at end of file, or undef if there was an error (in
the latter case L<C<$!>|perlvar/$!> is also set).  SCALAR will be grown
or shrunk
so that the last character actually read is the last character of the
scalar after the read.

An OFFSET may be specified to place the read data at some place in the
string other than the beginning.  A negative OFFSET specifies
placement at that many characters counting backwards from the end of
the string.  A positive OFFSET greater than the length of SCALAR
results in the string being padded to the required size with C<"\0">
bytes before the result of the read is appended.

The call is implemented in terms of either Perl's or your system's native
L<fread(3)> library function.  To get a true L<read(2)> system call, see
L<sysread|/sysread FILEHANDLE,SCALAR,LENGTH,OFFSET>.

Note the I<characters>: depending on the status of the filehandle,
either (8-bit) bytes or characters are read.  By default, all
filehandles operate on bytes, but for example if the filehandle has
been opened with the C<:utf8> I/O layer (see
L<C<open>|/open FILEHANDLE,EXPR>, and the L<open>
pragma), the I/O will operate on UTF8-encoded Unicode
characters, not bytes.  Similarly for the C<:encoding> layer:
in that case pretty much any characters can be read.

=item readdir DIRHANDLE
X<readdir>

=for Pod::Functions get a directory from a directory handle

Returns the next directory entry for a directory opened by
L<C<opendir>|/opendir DIRHANDLE,EXPR>.
If used in list context, returns all the rest of the entries in the
directory.  If there are no more entries, returns the undefined value in
scalar context and the empty list in list context.

If you're planning to filetest the return values out of a
L<C<readdir>|/readdir DIRHANDLE>, you'd better prepend the directory in
question.  Otherwise, because we didn't L<C<chdir>|/chdir EXPR> there,
it would have been testing the wrong file.

    opendir(my $dh, $some_dir) || die "Can't opendir $some_dir: $!";
    my @@dots = grep { /^\./ && -f "$some_dir/$_" } readdir($dh);
    closedir $dh;

As of Perl 5.12 you can use a bare L<C<readdir>|/readdir DIRHANDLE> in a
C<while> loop, which will set L<C<$_>|perlvar/$_> on every iteration.

    opendir(my $dh, $some_dir) || die "Can't open $some_dir: $!";
    while (readdir $dh) {
        print "$some_dir/$_\n";
    }
    closedir $dh;

To avoid confusing would-be users of your code who are running earlier
versions of Perl with mysterious failures, put this sort of thing at the
top of your file to signal that your code will work I<only> on Perls of a
recent vintage:

    use 5.012; # so readdir assigns to $_ in a lone while test

=item readline EXPR

=item readline
X<readline> X<gets> X<fgets>

=for Pod::Functions fetch a record from a file

Reads from the filehandle whose typeglob is contained in EXPR (or from
C<*ARGV> if EXPR is not provided).  In scalar context, each call reads and
returns the next line until end-of-file is reached, whereupon the
subsequent call returns L<C<undef>|/undef EXPR>.  In list context, reads
until end-of-file is reached and returns a list of lines.  Note that the
notion of "line" used here is whatever you may have defined with
L<C<$E<sol>>|perlvar/$E<sol>> (or C<$INPUT_RECORD_SEPARATOR> in
L<English>).  See L<perlvar/"$/">.

When L<C<$E<sol>>|perlvar/$E<sol>> is set to L<C<undef>|/undef EXPR>,
when L<C<readline>|/readline EXPR> is in scalar context (i.e., file
slurp mode), and when an empty file is read, it returns C<''> the first
time, followed by L<C<undef>|/undef EXPR> subsequently.

This is the internal function implementing the C<< <EXPR> >>
operator, but you can use it directly.  The C<< <EXPR> >>
operator is discussed in more detail in L<perlop/"I/O Operators">.

    my $line = <STDIN>;
    my $line = readline(STDIN);    # same thing

If L<C<readline>|/readline EXPR> encounters an operating system error,
L<C<$!>|perlvar/$!> will be set with the corresponding error message.
It can be helpful to check L<C<$!>|perlvar/$!> when you are reading from
filehandles you don't trust, such as a tty or a socket.  The following
example uses the operator form of L<C<readline>|/readline EXPR> and dies
if the result is not defined.

    while ( ! eof($fh) ) {
        defined( $_ = readline $fh ) or die "readline failed: $!";
        ...
    }

Note that you have can't handle L<C<readline>|/readline EXPR> errors
that way with the C<ARGV> filehandle.  In that case, you have to open
each element of L<C<@@ARGV>|perlvar/@@ARGV> yourself since
L<C<eof>|/eof FILEHANDLE> handles C<ARGV> differently.

    foreach my $arg (@@ARGV) {
        open(my $fh, $arg) or warn "Can't open $arg: $!";

        while ( ! eof($fh) ) {
            defined( $_ = readline $fh )
                or die "readline failed for $arg: $!";
            ...
        }
    }

=item readlink EXPR
X<readlink>

=item readlink

=for Pod::Functions determine where a symbolic link is pointing

Returns the value of a symbolic link, if symbolic links are
implemented.  If not, raises an exception.  If there is a system
error, returns the undefined value and sets L<C<$!>|perlvar/$!> (errno).
If EXPR is omitted, uses L<C<$_>|perlvar/$_>.

Portability issues: L<perlport/readlink>.

=item readpipe EXPR

=item readpipe
X<readpipe>

=for Pod::Functions execute a system command and collect standard output

EXPR is executed as a system command.
The collected standard output of the command is returned.
In scalar context, it comes back as a single (potentially
multi-line) string.  In list context, returns a list of lines
(however you've defined lines with L<C<$E<sol>>|perlvar/$E<sol>> (or
C<$INPUT_RECORD_SEPARATOR> in L<English>)).
This is the internal function implementing the C<qx/EXPR/>
operator, but you can use it directly.  The C<qx/EXPR/>
operator is discussed in more detail in L<perlop/"I/O Operators">.
If EXPR is omitted, uses L<C<$_>|perlvar/$_>.

=item recv SOCKET,SCALAR,LENGTH,FLAGS
X<recv>

=for Pod::Functions receive a message over a Socket

Receives a message on a socket.  Attempts to receive LENGTH characters
of data into variable SCALAR from the specified SOCKET filehandle.
SCALAR will be grown or shrunk to the length actually read.  Takes the
same flags as the system call of the same name.  Returns the address
of the sender if SOCKET's protocol supports this; returns an empty
string otherwise.  If there's an error, returns the undefined value.
This call is actually implemented in terms of the L<recvfrom(2)> system call.
See L<perlipc/"UDP: Message Passing"> for examples.

Note the I<characters>: depending on the status of the socket, either
(8-bit) bytes or characters are received.  By default all sockets
operate on bytes, but for example if the socket has been changed using
L<C<binmode>|/binmode FILEHANDLE, LAYER> to operate with the
C<:encoding(utf8)> I/O layer (see the L<open> pragma), the I/O will
operate on UTF8-encoded Unicode
characters, not bytes.  Similarly for the C<:encoding> layer: in that
case pretty much any characters can be read.

=item redo LABEL
X<redo>

=item redo EXPR

=item redo

=for Pod::Functions start this loop iteration over again

The L<C<redo>|/redo LABEL> command restarts the loop block without
evaluating the conditional again.  The L<C<continue>|/continue BLOCK>
block, if any, is not executed.  If
the LABEL is omitted, the command refers to the innermost enclosing
loop.  The C<redo EXPR> form, available starting in Perl 5.18.0, allows a
label name to be computed at run time, and is otherwise identical to C<redo
LABEL>.  Programs that want to lie to themselves about what was just input
normally use this command:

    # a simpleminded Pascal comment stripper
    # (warning: assumes no { or } in strings)
    LINE: while (<STDIN>) {
        while (s|({.*}.*){.*}|$1 |) {}
        s|{.*}| |;
        if (s|{.*| |) {
            my $front = $_;
            while (<STDIN>) {
                if (/}/) {  # end of comment?
                    s|^|$front\{|;
                    redo LINE;
                }
            }
        }
        print;
    }

L<C<redo>|/redo LABEL> cannot be used to retry a block that returns a
value such as C<eval {}>, C<sub {}>, or C<do {}>, and should not be used
to exit a L<C<grep>|/grep BLOCK LIST> or L<C<map>|/map BLOCK LIST>
operation.

Note that a block by itself is semantically identical to a loop
that executes once.  Thus L<C<redo>|/redo LABEL> inside such a block
will effectively turn it into a looping construct.

See also L<C<continue>|/continue BLOCK> for an illustration of how
L<C<last>|/last LABEL>, L<C<next>|/next LABEL>, and
L<C<redo>|/redo LABEL> work.

Unlike most named operators, this has the same precedence as assignment.
It is also exempt from the looks-like-a-function rule, so
C<redo ("foo")."bar"> will cause "bar" to be part of the argument to
L<C<redo>|/redo LABEL>.

=item ref EXPR
X<ref> X<reference>

=item ref

=for Pod::Functions find out the type of thing being referenced

Returns a non-empty string if EXPR is a reference, the empty
string otherwise.  If EXPR is not specified, L<C<$_>|perlvar/$_> will be
used.  The value returned depends on the type of thing the reference is
a reference to.

Builtin types include:

    SCALAR
    ARRAY
    HASH
    CODE
    REF
    GLOB
    LVALUE
    FORMAT
    IO
    VSTRING
    Regexp

You can think of L<C<ref>|/ref EXPR> as a C<typeof> operator.

    if (ref($r) eq "HASH") {
        print "r is a reference to a hash.\n";
    }
    unless (ref($r)) {
        print "r is not a reference at all.\n";
    }

The return value C<LVALUE> indicates a reference to an lvalue that is not
a variable.  You get this from taking the reference of function calls like
L<C<pos>|/pos SCALAR> or
L<C<substr>|/substr EXPR,OFFSET,LENGTH,REPLACEMENT>.  C<VSTRING> is
returned if the reference points to a
L<version string|perldata/"Version Strings">.

The result C<Regexp> indicates that the argument is a regular expression
resulting from L<C<qrE<sol>E<sol>>|/qrE<sol>STRINGE<sol>>.

If the referenced object has been blessed into a package, then that package
name is returned instead.  But don't use that, as it's now considered
"bad practice".  For one reason, an object could be using a class called
C<Regexp> or C<IO>, or even C<HASH>.  Also, L<C<ref>|/ref EXPR> doesn't
take into account subclasses, like
L<C<isa>|UNIVERSAL/C<< $obj->isa( TYPE ) >>> does.

Instead, use L<C<blessed>|Scalar::Util/blessed> (in the L<Scalar::Util>
module) for boolean checks, L<C<isa>|UNIVERSAL/C<< $obj->isa( TYPE ) >>>
for specific class checks and L<C<reftype>|Scalar::Util/reftype> (also
from L<Scalar::Util>) for type checks.  (See L<perlobj> for details and
a L<C<blessed>|Scalar::Util/blessed>/L<C<isa>|UNIVERSAL/C<< $obj->isa( TYPE ) >>>
example.)

See also L<perlref>.

=item rename OLDNAME,NEWNAME
X<rename> X<move> X<mv> X<ren>

=for Pod::Functions change a filename

Changes the name of a file; an existing file NEWNAME will be
clobbered.  Returns true for success, false otherwise.

Behavior of this function varies wildly depending on your system
implementation.  For example, it will usually not work across file system
boundaries, even though the system I<mv> command sometimes compensates
for this.  Other restrictions include whether it works on directories,
open files, or pre-existing files.  Check L<perlport> and either the
L<rename(2)> manpage or equivalent system documentation for details.

For a platform independent L<C<move>|File::Copy/move> function look at
the L<File::Copy> module.

Portability issues: L<perlport/rename>.

=item require VERSION
X<require>

=item require EXPR

=item require

=for Pod::Functions load in external functions from a library at runtime

Demands a version of Perl specified by VERSION, or demands some semantics
specified by EXPR or by L<C<$_>|perlvar/$_> if EXPR is not supplied.

VERSION may be either a numeric argument such as 5.006, which will be
compared to L<C<$]>|perlvar/$]>, or a literal of the form v5.6.1, which
will be compared to L<C<$^V>|perlvar/$^V> (or C<$PERL_VERSION> in
L<English>).  An exception is raised if VERSION is greater than the
version of the current Perl interpreter.  Compare with
L<C<use>|/use Module VERSION LIST>, which can do a similar check at
compile time.

Specifying VERSION as a literal of the form v5.6.1 should generally be
avoided, because it leads to misleading error messages under earlier
versions of Perl that do not support this syntax.  The equivalent numeric
version should be used instead.

    require v5.6.1;     # run time version check
    require 5.6.1;      # ditto
    require 5.006_001;  # ditto; preferred for backwards
                          compatibility

Otherwise, L<C<require>|/require VERSION> demands that a library file be
included if it hasn't already been included.  The file is included via
the do-FILE mechanism, which is essentially just a variety of
L<C<eval>|/eval EXPR> with the
caveat that lexical variables in the invoking script will be invisible
to the included code.  If it were implemented in pure Perl, it
would have semantics similar to the following:

    use Carp 'croak';
    use version;

    sub require {
        my ($filename) = @@_;
        if ( my $version = eval { version->parse($filename) } ) {
            if ( $version > $^V ) {
               my $vn = $version->normal;
               croak "Perl $vn required--this is only $^V, stopped";
            }
            return 1;
        }

        if (exists $INC{$filename}) {
            return 1 if $INC{$filename};
            croak "Compilation failed in require";
        }

        foreach $prefix (@@INC) {
            if (ref($prefix)) {
                #... do other stuff - see text below ....
            }
            # (see text below about possible appending of .pmc
            # suffix to $filename)
            my $realfilename = "$prefix/$filename";
            next if ! -e $realfilename || -d _ || -b _;
            $INC{$filename} = $realfilename;
            my $result = do($realfilename);
                         # but run in caller's namespace

            if (!defined $result) {
                $INC{$filename} = undef;
                croak $@@ ? "$@@Compilation failed in require"
                         : "Can't locate $filename: $!\n";
            }
            if (!$result) {
                delete $INC{$filename};
                croak "$filename did not return true value";
            }
            $! = 0;
            return $result;
        }
        croak "Can't locate $filename in \@@INC ...";
    }

Note that the file will not be included twice under the same specified
name.

The file must return true as the last statement to indicate
successful execution of any initialization code, so it's customary to
end such a file with C<1;> unless you're sure it'll return true
otherwise.  But it's better just to put the C<1;>, in case you add more
statements.

If EXPR is a bareword, L<C<require>|/require VERSION> assumes a F<.pm>
extension and replaces C<::> with C</> in the filename for you,
to make it easy to load standard modules.  This form of loading of
modules does not risk altering your namespace.

In other words, if you try this:

        require Foo::Bar;     # a splendid bareword

The require function will actually look for the F<Foo/Bar.pm> file in the
directories specified in the L<C<@@INC>|perlvar/@@INC> array.

But if you try this:

        my $class = 'Foo::Bar';
        require $class;       # $class is not a bareword
    #or
        require "Foo::Bar";   # not a bareword because of the ""

The require function will look for the F<Foo::Bar> file in the
L<C<@@INC>|perlvar/@@INC>  array and
will complain about not finding F<Foo::Bar> there.  In this case you can do:

        eval "require $class";

Now that you understand how L<C<require>|/require VERSION> looks for
files with a bareword argument, there is a little extra functionality
going on behind the scenes.  Before L<C<require>|/require VERSION> looks
for a F<.pm> extension, it will first look for a similar filename with a
F<.pmc> extension.  If this file is found, it will be loaded in place of
any file ending in a F<.pm> extension.

You can also insert hooks into the import facility by putting Perl code
directly into the L<C<@@INC>|perlvar/@@INC> array.  There are three forms
of hooks: subroutine references, array references, and blessed objects.

Subroutine references are the simplest case.  When the inclusion system
walks through L<C<@@INC>|perlvar/@@INC> and encounters a subroutine, this
subroutine gets called with two parameters, the first a reference to
itself, and the second the name of the file to be included (e.g.,
F<Foo/Bar.pm>).  The subroutine should return either nothing or else a
list of up to four values in the following order:

=over

=item 1

A reference to a scalar, containing any initial source code to prepend to
the file or generator output.

=item 2

A filehandle, from which the file will be read.

=item 3

A reference to a subroutine.  If there is no filehandle (previous item),
then this subroutine is expected to generate one line of source code per
call, writing the line into L<C<$_>|perlvar/$_> and returning 1, then
finally at end of file returning 0.  If there is a filehandle, then the
subroutine will be called to act as a simple source filter, with the
line as read in L<C<$_>|perlvar/$_>.
Again, return 1 for each valid line, and 0 after all lines have been
returned.

=item 4

Optional state for the subroutine.  The state is passed in as C<$_[1]>.  A
reference to the subroutine itself is passed in as C<$_[0]>.

=back

If an empty list, L<C<undef>|/undef EXPR>, or nothing that matches the
first 3 values above is returned, then L<C<require>|/require VERSION>
looks at the remaining elements of L<C<@@INC>|perlvar/@@INC>.
Note that this filehandle must be a real filehandle (strictly a typeglob
or reference to a typeglob, whether blessed or unblessed); tied filehandles
will be ignored and processing will stop there.

If the hook is an array reference, its first element must be a subroutine
reference.  This subroutine is called as above, but the first parameter is
the array reference.  This lets you indirectly pass arguments to
the subroutine.

In other words, you can write:

    push @@INC, \&my_sub;
    sub my_sub {
        my ($coderef, $filename) = @@_;  # $coderef is \&my_sub
        ...
    }

or:

    push @@INC, [ \&my_sub, $x, $y, ... ];
    sub my_sub {
        my ($arrayref, $filename) = @@_;
        # Retrieve $x, $y, ...
        my (undef, @@parameters) = @@$arrayref;
        ...
    }

If the hook is an object, it must provide an C<INC> method that will be
called as above, the first parameter being the object itself.  (Note that
you must fully qualify the sub's name, as unqualified C<INC> is always forced
into package C<main>.)  Here is a typical code layout:

    # In Foo.pm
    package Foo;
    sub new { ... }
    sub Foo::INC {
        my ($self, $filename) = @@_;
        ...
    }

    # In the main program
    push @@INC, Foo->new(...);

These hooks are also permitted to set the L<C<%INC>|perlvar/%INC> entry
corresponding to the files they have loaded.  See L<perlvar/%INC>.

For a yet-more-powerful import facility, see
L<C<use>|/use Module VERSION LIST> and L<perlmod>.

=item reset EXPR
X<reset>

=item reset

=for Pod::Functions clear all variables of a given name

Generally used in a L<C<continue>|/continue BLOCK> block at the end of a
loop to clear variables and reset C<m?pattern?> searches so that they
work again.  The
expression is interpreted as a list of single characters (hyphens
allowed for ranges).  All variables and arrays beginning with one of
those letters are reset to their pristine state.  If the expression is
omitted, one-match searches (C<m?pattern?>) are reset to match again.
Only resets variables or searches in the current package.  Always returns
1.  Examples:

    reset 'X';      # reset all X variables
    reset 'a-z';    # reset lower case variables
    reset;          # just reset m?one-time? searches

Resetting C<"A-Z"> is not recommended because you'll wipe out your
L<C<@@ARGV>|perlvar/@@ARGV> and L<C<@@INC>|perlvar/@@INC> arrays and your
L<C<%ENV>|perlvar/%ENV> hash.
Resets only package variables; lexical variables are unaffected, but
they clean themselves up on scope exit anyway, so you'll probably want
to use them instead.  See L<C<my>|/my VARLIST>.

=item return EXPR
X<return>

=item return

=for Pod::Functions get out of a function early

Returns from a subroutine, L<C<eval>|/eval EXPR>,
L<C<do FILE>|/do EXPR>, L<C<sort>|/sort SUBNAME LIST> block or regex
eval block (but not a L<C<grep>|/grep BLOCK LIST> or
L<C<map>|/map BLOCK LIST> block) with the value
given in EXPR.  Evaluation of EXPR may be in list, scalar, or void
context, depending on how the return value will be used, and the context
may vary from one execution to the next (see
L<C<wantarray>|/wantarray>).  If no EXPR
is given, returns an empty list in list context, the undefined value in
scalar context, and (of course) nothing at all in void context.

(In the absence of an explicit L<C<return>|/return EXPR>, a subroutine,
L<C<eval>|/eval EXPR>,
or L<C<do FILE>|/do EXPR> automatically returns the value of the last expression
evaluated.)

Unlike most named operators, this is also exempt from the
looks-like-a-function rule, so C<return ("foo")."bar"> will
cause C<"bar"> to be part of the argument to L<C<return>|/return EXPR>.

=item reverse LIST
X<reverse> X<rev> X<invert>

=for Pod::Functions flip a string or a list

In list context, returns a list value consisting of the elements
of LIST in the opposite order.  In scalar context, concatenates the
elements of LIST and returns a string value with all characters
in the opposite order.

    print join(", ", reverse "world", "Hello"); # Hello, world

    print scalar reverse "dlrow ,", "olleH";    # Hello, world

Used without arguments in scalar context, L<C<reverse>|/reverse LIST>
reverses L<C<$_>|perlvar/$_>.

    $_ = "dlrow ,olleH";
    print reverse;                         # No output, list context
    print scalar reverse;                  # Hello, world

Note that reversing an array to itself (as in C<@@a = reverse @@a>) will
preserve non-existent elements whenever possible; i.e., for non-magical
arrays or for tied arrays with C<EXISTS> and C<DELETE> methods.

This operator is also handy for inverting a hash, although there are some
caveats.  If a value is duplicated in the original hash, only one of those
can be represented as a key in the inverted hash.  Also, this has to
unwind one hash and build a whole new one, which may take some time
on a large hash, such as from a DBM file.

    my %by_name = reverse %by_address;  # Invert the hash

=item rewinddir DIRHANDLE
X<rewinddir>

=for Pod::Functions reset directory handle

Sets the current position to the beginning of the directory for the
L<C<readdir>|/readdir DIRHANDLE> routine on DIRHANDLE.

Portability issues: L<perlport/rewinddir>.

=item rindex STR,SUBSTR,POSITION
X<rindex>

=item rindex STR,SUBSTR

=for Pod::Functions right-to-left substring search

Works just like L<C<index>|/index STR,SUBSTR,POSITION> except that it
returns the position of the I<last>
occurrence of SUBSTR in STR.  If POSITION is specified, returns the
last occurrence beginning at or before that position.

=item rmdir FILENAME
X<rmdir> X<rd> X<directory, remove>

=item rmdir

=for Pod::Functions remove a directory

Deletes the directory specified by FILENAME if that directory is
empty.  If it succeeds it returns true; otherwise it returns false and
sets L<C<$!>|perlvar/$!> (errno).  If FILENAME is omitted, uses
L<C<$_>|perlvar/$_>.

To remove a directory tree recursively (C<rm -rf> on Unix) look at
the L<C<rmtree>|File::Path/rmtree( $dir )> function of the L<File::Path>
module.

=item s///

=for Pod::Functions replace a pattern with a string

The substitution operator.  See L<perlop/"Regexp Quote-Like Operators">.

=item say FILEHANDLE LIST
X<say>

=item say FILEHANDLE

=item say LIST

=item say

=for Pod::Functions +say output a list to a filehandle, appending a newline

Just like L<C<print>|/print FILEHANDLE LIST>, but implicitly appends a
newline.  C<say LIST> is simply an abbreviation for
C<{ local $\ = "\n"; print LIST }>.  To use FILEHANDLE without a LIST to
print the contents of L<C<$_>|perlvar/$_> to it, you must use a bareword
filehandle like C<FH>, not an indirect one like C<$fh>.

L<C<say>|/say FILEHANDLE LIST> is available only if the
L<C<"say"> feature|feature/The 'say' feature> is enabled or if it is
prefixed with C<CORE::>.  The
L<C<"say"> feature|feature/The 'say' feature> is enabled automatically
with a C<use v5.10> (or higher) declaration in the current scope.

=item scalar EXPR
X<scalar> X<context>

=for Pod::Functions force a scalar context

Forces EXPR to be interpreted in scalar context and returns the value
of EXPR.

    my @@counts = ( scalar @@a, scalar @@b, scalar @@c );

There is no equivalent operator to force an expression to
be interpolated in list context because in practice, this is never
needed.  If you really wanted to do so, however, you could use
the construction C<@@{[ (some expression) ]}>, but usually a simple
C<(some expression)> suffices.

Because L<C<scalar>|/scalar EXPR> is a unary operator, if you
accidentally use a
parenthesized list for the EXPR, this behaves as a scalar comma expression,
evaluating all but the last element in void context and returning the final
element evaluated in scalar context.  This is seldom what you want.

The following single statement:

    print uc(scalar(foo(), $bar)), $baz;

is the moral equivalent of these two:

    foo();
    print(uc($bar), $baz);

See L<perlop> for more details on unary operators and the comma operator,
and L<perldata> for details on evaluating a hash in scalar contex.

=item seek FILEHANDLE,POSITION,WHENCE
X<seek> X<fseek> X<filehandle, position>

=for Pod::Functions reposition file pointer for random-access I/O

Sets FILEHANDLE's position, just like the L<fseek(3)> call of C C<stdio>.
FILEHANDLE may be an expression whose value gives the name of the
filehandle.  The values for WHENCE are C<0> to set the new position
I<in bytes> to POSITION; C<1> to set it to the current position plus
POSITION; and C<2> to set it to EOF plus POSITION, typically
negative.  For WHENCE you may use the constants C<SEEK_SET>,
C<SEEK_CUR>, and C<SEEK_END> (start of the file, current position, end
of the file) from the L<Fcntl> module.  Returns C<1> on success, false
otherwise.

Note the I<in bytes>: even if the filehandle has been set to
operate on characters (for example by using the C<:encoding(utf8)> open
layer), L<C<tell>|/tell FILEHANDLE> will return byte offsets, not
character offsets (because implementing that would render
L<C<seek>|/seek FILEHANDLE,POSITION,WHENCE> and
L<C<tell>|/tell FILEHANDLE> rather slow).

If you want to position the file for
L<C<sysread>|/sysread FILEHANDLE,SCALAR,LENGTH,OFFSET> or
L<C<syswrite>|/syswrite FILEHANDLE,SCALAR,LENGTH,OFFSET>, don't use
L<C<seek>|/seek FILEHANDLE,POSITION,WHENCE>, because buffering makes its
effect on the file's read-write position unpredictable and non-portable.
Use L<C<sysseek>|/sysseek FILEHANDLE,POSITION,WHENCE> instead.

Due to the rules and rigors of ANSI C, on some systems you have to do a
seek whenever you switch between reading and writing.  Amongst other
things, this may have the effect of calling stdio's L<clearerr(3)>.
A WHENCE of C<1> (C<SEEK_CUR>) is useful for not moving the file position:

    seek($fh, 0, 1);

This is also useful for applications emulating C<tail -f>.  Once you hit
EOF on your read and then sleep for a while, you (probably) have to stick in a
dummy L<C<seek>|/seek FILEHANDLE,POSITION,WHENCE> to reset things.  The
L<C<seek>|/seek FILEHANDLE,POSITION,WHENCE> doesn't change the position,
but it I<does> clear the end-of-file condition on the handle, so that the
next C<readline FILE> makes Perl try again to read something.  (We hope.)

If that doesn't work (some I/O implementations are particularly
cantankerous), you might need something like this:

    for (;;) {
        for ($curpos = tell($fh); $_ = readline($fh);
             $curpos = tell($fh)) {
            # search for some stuff and put it into files
        }
        sleep($for_a_while);
        seek($fh, $curpos, 0);
    }

=item seekdir DIRHANDLE,POS
X<seekdir>

=for Pod::Functions reposition directory pointer

Sets the current position for the L<C<readdir>|/readdir DIRHANDLE>
routine on DIRHANDLE.  POS must be a value returned by
L<C<telldir>|/telldir DIRHANDLE>.  L<C<seekdir>|/seekdir DIRHANDLE,POS>
also has the same caveats about possible directory compaction as the
corresponding system library routine.

=item select FILEHANDLE
X<select> X<filehandle, default>

=item select

=for Pod::Functions reset default output or do I/O multiplexing

Returns the currently selected filehandle.  If FILEHANDLE is supplied,
sets the new current default filehandle for output.  This has two
effects: first, a L<C<write>|/write FILEHANDLE> or a L<C<print>|/print
FILEHANDLE LIST> without a filehandle
default to this FILEHANDLE.  Second, references to variables related to
output will refer to this output channel.

For example, to set the top-of-form format for more than one
output channel, you might do the following:

    select(REPORT1);
    $^ = 'report1_top';
    select(REPORT2);
    $^ = 'report2_top';

FILEHANDLE may be an expression whose value gives the name of the
actual filehandle.  Thus:

    my $oldfh = select(STDERR); $| = 1; select($oldfh);

Some programmers may prefer to think of filehandles as objects with
methods, preferring to write the last example as:

    STDERR->autoflush(1);

(Prior to Perl version 5.14, you have to C<use IO::Handle;> explicitly
first.)

Portability issues: L<perlport/select>.

=item select RBITS,WBITS,EBITS,TIMEOUT
X<select>

This calls the L<select(2)> syscall with the bit masks specified, which
can be constructed using L<C<fileno>|/fileno FILEHANDLE> and
L<C<vec>|/vec EXPR,OFFSET,BITS>, along these lines:

    my $rin = my $win = my $ein = '';
    vec($rin, fileno(STDIN),  1) = 1;
    vec($win, fileno(STDOUT), 1) = 1;
    $ein = $rin | $win;

If you want to select on many filehandles, you may wish to write a
subroutine like this:

    sub fhbits {
        my @@fhlist = @@_;
        my $bits = "";
        for my $fh (@@fhlist) {
            vec($bits, fileno($fh), 1) = 1;
        }
        return $bits;
    }
    my $rin = fhbits(\*STDIN, $tty, $mysock);

The usual idiom is:

 my ($nfound, $timeleft) =
   select(my $rout = $rin, my $wout = $win, my $eout = $ein,
                                                          $timeout);

or to block until something becomes ready just do this

 my $nfound =
   select(my $rout = $rin, my $wout = $win, my $eout = $ein, undef);

Most systems do not bother to return anything useful in C<$timeleft>, so
calling L<C<select>|/select RBITS,WBITS,EBITS,TIMEOUT> in scalar context
just returns C<$nfound>.

Any of the bit masks can also be L<C<undef>|/undef EXPR>.  The timeout,
if specified, is
in seconds, which may be fractional.  Note: not all implementations are
capable of returning the C<$timeleft>.  If not, they always return
C<$timeleft> equal to the supplied C<$timeout>.

You can effect a sleep of 250 milliseconds this way:

    select(undef, undef, undef, 0.25);

Note that whether L<C<select>|/select RBITS,WBITS,EBITS,TIMEOUT> gets
restarted after signals (say, SIGALRM) is implementation-dependent.  See
also L<perlport> for notes on the portability of
L<C<select>|/select RBITS,WBITS,EBITS,TIMEOUT>.

On error, L<C<select>|/select RBITS,WBITS,EBITS,TIMEOUT> behaves just
like L<select(2)>: it returns C<-1> and sets L<C<$!>|perlvar/$!>.

On some Unixes, L<select(2)> may report a socket file descriptor as
"ready for reading" even when no data is available, and thus any
subsequent L<C<read>|/read FILEHANDLE,SCALAR,LENGTH,OFFSET> would block.
This can be avoided if you always use C<O_NONBLOCK> on the socket.  See
L<select(2)> and L<fcntl(2)> for further details.

The standard L<C<IO::Select>|IO::Select> module provides a
user-friendlier interface to
L<C<select>|/select RBITS,WBITS,EBITS,TIMEOUT>, mostly because it does
all the bit-mask work for you.

B<WARNING>: One should not attempt to mix buffered I/O (like
L<C<read>|/read FILEHANDLE,SCALAR,LENGTH,OFFSET> or
L<C<readline>|/readline EXPR>) with
L<C<select>|/select RBITS,WBITS,EBITS,TIMEOUT>, except as permitted by
POSIX, and even then only on POSIX systems.  You have to use
L<C<sysread>|/sysread FILEHANDLE,SCALAR,LENGTH,OFFSET> instead.

Portability issues: L<perlport/select>.

=item semctl ID,SEMNUM,CMD,ARG
X<semctl>

=for Pod::Functions SysV semaphore control operations

Calls the System V IPC function L<semctl(2)>.  You'll probably have to say

    use IPC::SysV;

first to get the correct constant definitions.  If CMD is IPC_STAT or
GETALL, then ARG must be a variable that will hold the returned
semid_ds structure or semaphore value array.  Returns like
L<C<ioctl>|/ioctl FILEHANDLE,FUNCTION,SCALAR>:
the undefined value for error, "C<0 but true>" for zero, or the actual
return value otherwise.  The ARG must consist of a vector of native
short integers, which may be created with C<pack("s!",(0)x$nsem)>.
See also L<perlipc/"SysV IPC"> and the documentation for
L<C<IPC::SysV>|IPC::SysV> and L<C<IPC::Semaphore>|IPC::Semaphore>.

Portability issues: L<perlport/semctl>.

=item semget KEY,NSEMS,FLAGS
X<semget>

=for Pod::Functions get set of SysV semaphores

Calls the System V IPC function L<semget(2)>.  Returns the semaphore id, or
the undefined value on error.  See also
L<perlipc/"SysV IPC"> and the documentation for
L<C<IPC::SysV>|IPC::SysV> and L<C<IPC::Semaphore>|IPC::Semaphore>.

Portability issues: L<perlport/semget>.

=item semop KEY,OPSTRING
X<semop>

=for Pod::Functions SysV semaphore operations

Calls the System V IPC function L<semop(2)> for semaphore operations
such as signalling and waiting.  OPSTRING must be a packed array of
semop structures.  Each semop structure can be generated with
C<pack("s!3", $semnum, $semop, $semflag)>.  The length of OPSTRING
implies the number of semaphore operations.  Returns true if
successful, false on error.  As an example, the
following code waits on semaphore $semnum of semaphore id $semid:

    my $semop = pack("s!3", $semnum, -1, 0);
    die "Semaphore trouble: $!\n" unless semop($semid, $semop);

To signal the semaphore, replace C<-1> with C<1>.  See also
L<perlipc/"SysV IPC"> and the documentation for
L<C<IPC::SysV>|IPC::SysV> and L<C<IPC::Semaphore>|IPC::Semaphore>.

Portability issues: L<perlport/semop>.

=item send SOCKET,MSG,FLAGS,TO
X<send>

=item send SOCKET,MSG,FLAGS

=for Pod::Functions send a message over a socket

Sends a message on a socket.  Attempts to send the scalar MSG to the SOCKET
filehandle.  Takes the same flags as the system call of the same name.  On
unconnected sockets, you must specify a destination to I<send to>, in which
case it does a L<sendto(2)> syscall.  Returns the number of characters sent,
or the undefined value on error.  The L<sendmsg(2)> syscall is currently
unimplemented.  See L<perlipc/"UDP: Message Passing"> for examples.

Note the I<characters>: depending on the status of the socket, either
(8-bit) bytes or characters are sent.  By default all sockets operate
on bytes, but for example if the socket has been changed using
L<C<binmode>|/binmode FILEHANDLE, LAYER> to operate with the
C<:encoding(utf8)> I/O layer (see L<C<open>|/open FILEHANDLE,EXPR>, or
the L<open> pragma), the I/O will operate on UTF-8
encoded Unicode characters, not bytes.  Similarly for the C<:encoding>
layer: in that case pretty much any characters can be sent.

=item setpgrp PID,PGRP
X<setpgrp> X<group>

=for Pod::Functions set the process group of a process

Sets the current process group for the specified PID, C<0> for the current
process.  Raises an exception when used on a machine that doesn't
implement POSIX L<setpgid(2)> or BSD L<setpgrp(2)>.  If the arguments
are omitted, it defaults to C<0,0>.  Note that the BSD 4.2 version of
L<C<setpgrp>|/setpgrp PID,PGRP> does not accept any arguments, so only
C<setpgrp(0,0)> is portable.  See also
L<C<POSIX::setsid()>|POSIX/C<setsid>>.

Portability issues: L<perlport/setpgrp>.

=item setpriority WHICH,WHO,PRIORITY
X<setpriority> X<priority> X<nice> X<renice>

=for Pod::Functions set a process's nice value

Sets the current priority for a process, a process group, or a user.
(See L<setpriority(2)>.)  Raises an exception when used on a machine
that doesn't implement L<setpriority(2)>.

Portability issues: L<perlport/setpriority>.

=item setsockopt SOCKET,LEVEL,OPTNAME,OPTVAL
X<setsockopt>

=for Pod::Functions set some socket options

Sets the socket option requested.  Returns L<C<undef>|/undef EXPR> on
error.  Use integer constants provided by the L<C<Socket>|Socket> module
for
LEVEL and OPNAME.  Values for LEVEL can also be obtained from
getprotobyname.  OPTVAL might either be a packed string or an integer.
An integer OPTVAL is shorthand for pack("i", OPTVAL).

An example disabling Nagle's algorithm on a socket:

    use Socket qw(IPPROTO_TCP TCP_NODELAY);
    setsockopt($socket, IPPROTO_TCP, TCP_NODELAY, 1);

Portability issues: L<perlport/setsockopt>.

=item shift ARRAY
X<shift>

=item shift

=for Pod::Functions remove the first element of an array, and return it

Shifts the first value of the array off and returns it, shortening the
array by 1 and moving everything down.  If there are no elements in the
array, returns the undefined value.  If ARRAY is omitted, shifts the
L<C<@@_>|perlvar/@@_> array within the lexical scope of subroutines and
formats, and the L<C<@@ARGV>|perlvar/@@ARGV> array outside a subroutine
and also within the lexical scopes
established by the C<eval STRING>, C<BEGIN {}>, C<INIT {}>, C<CHECK {}>,
C<UNITCHECK {}>, and C<END {}> constructs.

Starting with Perl 5.14, an experimental feature allowed
L<C<shift>|/shift ARRAY> to take a
scalar expression. This experiment has been deemed unsuccessful, and was
removed as of Perl 5.24.

See also L<C<unshift>|/unshift ARRAY,LIST>, L<C<push>|/push ARRAY,LIST>,
and L<C<pop>|/pop ARRAY>.  L<C<shift>|/shift ARRAY> and
L<C<unshift>|/unshift ARRAY,LIST> do the same thing to the left end of
an array that L<C<pop>|/pop ARRAY> and L<C<push>|/push ARRAY,LIST> do to
the right end.

=item shmctl ID,CMD,ARG
X<shmctl>

=for Pod::Functions SysV shared memory operations

Calls the System V IPC function shmctl.  You'll probably have to say

    use IPC::SysV;

first to get the correct constant definitions.  If CMD is C<IPC_STAT>,
then ARG must be a variable that will hold the returned C<shmid_ds>
structure.  Returns like ioctl: L<C<undef>|/undef EXPR> for error; "C<0>
but true" for zero; and the actual return value otherwise.
See also L<perlipc/"SysV IPC"> and the documentation for
L<C<IPC::SysV>|IPC::SysV>.

Portability issues: L<perlport/shmctl>.

=item shmget KEY,SIZE,FLAGS
X<shmget>

=for Pod::Functions get SysV shared memory segment identifier

Calls the System V IPC function shmget.  Returns the shared memory
segment id, or L<C<undef>|/undef EXPR> on error.
See also L<perlipc/"SysV IPC"> and the documentation for
L<C<IPC::SysV>|IPC::SysV>.

Portability issues: L<perlport/shmget>.

=item shmread ID,VAR,POS,SIZE
X<shmread>
X<shmwrite>

=for Pod::Functions read SysV shared memory

=item shmwrite ID,STRING,POS,SIZE

=for Pod::Functions write SysV shared memory

Reads or writes the System V shared memory segment ID starting at
position POS for size SIZE by attaching to it, copying in/out, and
detaching from it.  When reading, VAR must be a variable that will
hold the data read.  When writing, if STRING is too long, only SIZE
bytes are used; if STRING is too short, nulls are written to fill out
SIZE bytes.  Return true if successful, false on error.
L<C<shmread>|/shmread ID,VAR,POS,SIZE> taints the variable.  See also
L<perlipc/"SysV IPC"> and the documentation for
L<C<IPC::SysV>|IPC::SysV> and the L<C<IPC::Shareable>|IPC::Shareable>
module from CPAN.

Portability issues: L<perlport/shmread> and L<perlport/shmwrite>.

=item shutdown SOCKET,HOW
X<shutdown>

=for Pod::Functions close down just half of a socket connection

Shuts down a socket connection in the manner indicated by HOW, which
has the same interpretation as in the syscall of the same name.

    shutdown($socket, 0);    # I/we have stopped reading data
    shutdown($socket, 1);    # I/we have stopped writing data
    shutdown($socket, 2);    # I/we have stopped using this socket

This is useful with sockets when you want to tell the other
side you're done writing but not done reading, or vice versa.
It's also a more insistent form of close because it also
disables the file descriptor in any forked copies in other
processes.

Returns C<1> for success; on error, returns L<C<undef>|/undef EXPR> if
the first argument is not a valid filehandle, or returns C<0> and sets
L<C<$!>|perlvar/$!> for any other failure.

=item sin EXPR
X<sin> X<sine> X<asin> X<arcsine>

=item sin

=for Pod::Functions return the sine of a number

Returns the sine of EXPR (expressed in radians).  If EXPR is omitted,
returns sine of L<C<$_>|perlvar/$_>.

For the inverse sine operation, you may use the C<Math::Trig::asin>
function, or use this relation:

    sub asin { atan2($_[0], sqrt(1 - $_[0] * $_[0])) }

=item sleep EXPR
X<sleep> X<pause>

=item sleep

=for Pod::Functions block for some number of seconds

Causes the script to sleep for (integer) EXPR seconds, or forever if no
argument is given.  Returns the integer number of seconds actually slept.

May be interrupted if the process receives a signal such as C<SIGALRM>.

    eval {
        local $SIG{ALRM} = sub { die "Alarm!\n" };
        sleep;
    };
    die $@@ unless $@@ eq "Alarm!\n";

You probably cannot mix L<C<alarm>|/alarm SECONDS> and
L<C<sleep>|/sleep EXPR> calls, because L<C<sleep>|/sleep EXPR> is often
implemented using L<C<alarm>|/alarm SECONDS>.

On some older systems, it may sleep up to a full second less than what
you requested, depending on how it counts seconds.  Most modern systems
always sleep the full amount.  They may appear to sleep longer than that,
however, because your process might not be scheduled right away in a
busy multitasking system.

For delays of finer granularity than one second, the L<Time::HiRes>
module (from CPAN, and starting from Perl 5.8 part of the standard
distribution) provides L<C<usleep>|Time::HiRes/usleep ( $useconds )>.
You may also use Perl's four-argument
version of L<C<select>|/select RBITS,WBITS,EBITS,TIMEOUT> leaving the
first three arguments undefined, or you might be able to use the
L<C<syscall>|/syscall NUMBER, LIST> interface to access L<setitimer(2)>
if your system supports it.  See L<perlfaq8> for details.

See also the L<POSIX> module's L<C<pause>|POSIX/C<pause>> function.

=item socket SOCKET,DOMAIN,TYPE,PROTOCOL
X<socket>

=for Pod::Functions create a socket

Opens a socket of the specified kind and attaches it to filehandle
SOCKET.  DOMAIN, TYPE, and PROTOCOL are specified the same as for
the syscall of the same name.  You should C<use Socket> first
to get the proper definitions imported.  See the examples in
L<perlipc/"Sockets: Client/Server Communication">.

On systems that support a close-on-exec flag on files, the flag will
be set for the newly opened file descriptor, as determined by the
value of L<C<$^F>|perlvar/$^F>.  See L<perlvar/$^F>.

=item socketpair SOCKET1,SOCKET2,DOMAIN,TYPE,PROTOCOL
X<socketpair>

=for Pod::Functions create a pair of sockets

Creates an unnamed pair of sockets in the specified domain, of the
specified type.  DOMAIN, TYPE, and PROTOCOL are specified the same as
for the syscall of the same name.  If unimplemented, raises an exception.
Returns true if successful.

On systems that support a close-on-exec flag on files, the flag will
be set for the newly opened file descriptors, as determined by the value
of L<C<$^F>|perlvar/$^F>.  See L<perlvar/$^F>.

Some systems define L<C<pipe>|/pipe READHANDLE,WRITEHANDLE> in terms of
L<C<socketpair>|/socketpair SOCKET1,SOCKET2,DOMAIN,TYPE,PROTOCOL>, in
which a call to C<pipe($rdr, $wtr)> is essentially:

    use Socket;
    socketpair(my $rdr, my $wtr, AF_UNIX, SOCK_STREAM, PF_UNSPEC);
    shutdown($rdr, 1);        # no more writing for reader
    shutdown($wtr, 0);        # no more reading for writer

See L<perlipc> for an example of socketpair use.  Perl 5.8 and later will
emulate socketpair using IP sockets to localhost if your system implements
sockets but not socketpair.

Portability issues: L<perlport/socketpair>.

=item sort SUBNAME LIST
X<sort> X<qsort> X<quicksort> X<mergesort>

=item sort BLOCK LIST

=item sort LIST

=for Pod::Functions sort a list of values

In list context, this sorts the LIST and returns the sorted list value.
In scalar context, the behaviour of L<C<sort>|/sort SUBNAME LIST> is
undefined.

If SUBNAME or BLOCK is omitted, L<C<sort>|/sort SUBNAME LIST>s in
standard string comparison
order.  If SUBNAME is specified, it gives the name of a subroutine
that returns an integer less than, equal to, or greater than C<0>,
depending on how the elements of the list are to be ordered.  (The
C<< <=> >> and C<cmp> operators are extremely useful in such routines.)
SUBNAME may be a scalar variable name (unsubscripted), in which case
the value provides the name of (or a reference to) the actual
subroutine to use.  In place of a SUBNAME, you can provide a BLOCK as
an anonymous, in-line sort subroutine.

If the subroutine's prototype is C<($$)>, the elements to be compared are
passed by reference in L<C<@@_>|perlvar/@@_>, as for a normal subroutine.
This is slower than unprototyped subroutines, where the elements to be
compared are passed into the subroutine as the package global variables
C<$a> and C<$b> (see example below).  Note that in the latter case, it
is usually highly counter-productive to declare C<$a> and C<$b> as
lexicals.

If the subroutine is an XSUB, the elements to be compared are pushed on
to the stack, the way arguments are usually passed to XSUBs.  C<$a> and
C<$b> are not set.

The values to be compared are always passed by reference and should not
be modified.

You also cannot exit out of the sort block or subroutine using any of the
loop control operators described in L<perlsyn> or with
L<C<goto>|/goto LABEL>.

When L<C<use locale>|locale> (but not C<use locale ':not_characters'>)
is in effect, C<sort LIST> sorts LIST according to the
current collation locale.  See L<perllocale>.

L<C<sort>|/sort SUBNAME LIST> returns aliases into the original list,
much as a for loop's index variable aliases the list elements.  That is,
modifying an element of a list returned by L<C<sort>|/sort SUBNAME LIST>
(for example, in a C<foreach>, L<C<map>|/map BLOCK LIST> or
L<C<grep>|/grep BLOCK LIST>)
actually modifies the element in the original list.  This is usually
something to be avoided when writing clear code.

Perl 5.6 and earlier used a quicksort algorithm to implement sort.
That algorithm was not stable and I<could> go quadratic.  (A I<stable> sort
preserves the input order of elements that compare equal.  Although
quicksort's run time is O(NlogN) when averaged over all arrays of
length N, the time can be O(N**2), I<quadratic> behavior, for some
inputs.)  In 5.7, the quicksort implementation was replaced with
a stable mergesort algorithm whose worst-case behavior is O(NlogN).
But benchmarks indicated that for some inputs, on some platforms,
the original quicksort was faster.  5.8 has a L<sort> pragma for
limited control of the sort.  Its rather blunt control of the
underlying algorithm may not persist into future Perls, but the
ability to characterize the input or output in implementation
independent ways quite probably will.

Examples:

    # sort lexically
    my @@articles = sort @@files;

    # same thing, but with explicit sort routine
    my @@articles = sort {$a cmp $b} @@files;

    # now case-insensitively
    my @@articles = sort {fc($a) cmp fc($b)} @@files;

    # same thing in reversed order
    my @@articles = sort {$b cmp $a} @@files;

    # sort numerically ascending
    my @@articles = sort {$a <=> $b} @@files;

    # sort numerically descending
    my @@articles = sort {$b <=> $a} @@files;

    # this sorts the %age hash by value instead of key
    # using an in-line function
    my @@eldest = sort { $age{$b} <=> $age{$a} } keys %age;

    # sort using explicit subroutine name
    sub byage {
        $age{$a} <=> $age{$b};  # presuming numeric
    }
    my @@sortedclass = sort byage @@class;

    sub backwards { $b cmp $a }
    my @@harry  = qw(dog cat x Cain Abel);
    my @@george = qw(gone chased yz Punished Axed);
    print sort @@harry;
        # prints AbelCaincatdogx
    print sort backwards @@harry;
        # prints xdogcatCainAbel
    print sort @@george, 'to', @@harry;
        # prints AbelAxedCainPunishedcatchaseddoggonetoxyz

    # inefficiently sort by descending numeric compare using
    # the first integer after the first = sign, or the
    # whole record case-insensitively otherwise

    my @@new = sort {
        ($b =~ /=(\d+)/)[0] <=> ($a =~ /=(\d+)/)[0]
                            ||
                    fc($a)  cmp  fc($b)
    } @@old;

    # same thing, but much more efficiently;
    # we'll build auxiliary indices instead
    # for speed
    my (@@nums, @@caps);
    for (@@old) {
        push @@nums, ( /=(\d+)/ ? $1 : undef );
        push @@caps, fc($_);
    }

    my @@new = @@old[ sort {
                           $nums[$b] <=> $nums[$a]
                                    ||
                           $caps[$a] cmp $caps[$b]
                         } 0..$#old
                  ];

    # same thing, but without any temps
    my @@new = map { $_->[0] }
           sort { $b->[1] <=> $a->[1]
                           ||
                  $a->[2] cmp $b->[2]
           } map { [$_, /=(\d+)/, fc($_)] } @@old;

    # using a prototype allows you to use any comparison subroutine
    # as a sort subroutine (including other package's subroutines)
    package Other;
    sub backwards ($$) { $_[1] cmp $_[0]; }  # $a and $b are
                                             # not set here
    package main;
    my @@new = sort Other::backwards @@old;

    # guarantee stability, regardless of algorithm
    use sort 'stable';
    my @@new = sort { substr($a, 3, 5) cmp substr($b, 3, 5) } @@old;

    # force use of mergesort (not portable outside Perl 5.8)
    use sort '_mergesort';  # note discouraging _
    my @@new = sort { substr($a, 3, 5) cmp substr($b, 3, 5) } @@old;

Warning: syntactical care is required when sorting the list returned from
a function.  If you want to sort the list returned by the function call
C<find_records(@@key)>, you can use:

    my @@contact = sort { $a cmp $b } find_records @@key;
    my @@contact = sort +find_records(@@key);
    my @@contact = sort &find_records(@@key);
    my @@contact = sort(find_records(@@key));

If instead you want to sort the array C<@@key> with the comparison routine
C<find_records()> then you can use:

    my @@contact = sort { find_records() } @@key;
    my @@contact = sort find_records(@@key);
    my @@contact = sort(find_records @@key);
    my @@contact = sort(find_records (@@key));

You I<must not> declare C<$a>
and C<$b> as lexicals.  They are package globals.  That means
that if you're in the C<main> package and type

    my @@articles = sort {$b <=> $a} @@files;

then C<$a> and C<$b> are C<$main::a> and C<$main::b> (or C<$::a> and C<$::b>),
but if you're in the C<FooPack> package, it's the same as typing

    my @@articles = sort {$FooPack::b <=> $FooPack::a} @@files;

The comparison function is required to behave.  If it returns
inconsistent results (sometimes saying C<$x[1]> is less than C<$x[2]> and
sometimes saying the opposite, for example) the results are not
well-defined.

Because C<< <=> >> returns L<C<undef>|/undef EXPR> when either operand
is C<NaN> (not-a-number), be careful when sorting with a
comparison function like C<< $a <=> $b >> any lists that might contain a
C<NaN>.  The following example takes advantage that C<NaN != NaN> to
eliminate any C<NaN>s from the input list.

    my @@result = sort { $a <=> $b } grep { $_ == $_ } @@input;

=item splice ARRAY,OFFSET,LENGTH,LIST
X<splice>

=item splice ARRAY,OFFSET,LENGTH

=item splice ARRAY,OFFSET

=item splice ARRAY

=for Pod::Functions add or remove elements anywhere in an array

Removes the elements designated by OFFSET and LENGTH from an array, and
replaces them with the elements of LIST, if any.  In list context,
returns the elements removed from the array.  In scalar context,
returns the last element removed, or L<C<undef>|/undef EXPR> if no
elements are
removed.  The array grows or shrinks as necessary.
If OFFSET is negative then it starts that far from the end of the array.
If LENGTH is omitted, removes everything from OFFSET onward.
If LENGTH is negative, removes the elements from OFFSET onward
except for -LENGTH elements at the end of the array.
If both OFFSET and LENGTH are omitted, removes everything.  If OFFSET is
past the end of the array and a LENGTH was provided, Perl issues a warning,
and splices at the end of the array.

The following equivalences hold (assuming C<< $#a >= $i >> )

    push(@@a,$x,$y)      splice(@@a,@@a,0,$x,$y)
    pop(@@a)             splice(@@a,-1)
    shift(@@a)           splice(@@a,0,1)
    unshift(@@a,$x,$y)   splice(@@a,0,0,$x,$y)
    $a[$i] = $y         splice(@@a,$i,1,$y)

L<C<splice>|/splice ARRAY,OFFSET,LENGTH,LIST> can be used, for example,
to implement n-ary queue processing:

    sub nary_print {
      my $n = shift;
      while (my @@next_n = splice @@_, 0, $n) {
        say join q{ -- }, @@next_n;
      }
    }

    nary_print(3, qw(a b c d e f g h));
    # prints:
    #   a -- b -- c
    #   d -- e -- f
    #   g -- h

Starting with Perl 5.14, an experimental feature allowed
L<C<splice>|/splice ARRAY,OFFSET,LENGTH,LIST> to take a
scalar expression. This experiment has been deemed unsuccessful, and was
removed as of Perl 5.24.

=item split /PATTERN/,EXPR,LIMIT
X<split>

=item split /PATTERN/,EXPR

=item split /PATTERN/

=item split

=for Pod::Functions split up a string using a regexp delimiter

Splits the string EXPR into a list of strings and returns the
list in list context, or the size of the list in scalar context.

If only PATTERN is given, EXPR defaults to L<C<$_>|perlvar/$_>.

Anything in EXPR that matches PATTERN is taken to be a separator
that separates the EXPR into substrings (called "I<fields>") that
do B<not> include the separator.  Note that a separator may be
longer than one character or even have no characters at all (the
empty string, which is a zero-width match).

The PATTERN need not be constant; an expression may be used
to specify a pattern that varies at runtime.

If PATTERN matches the empty string, the EXPR is split at the match
position (between characters).  As an example, the following:

    print join(':', split(/b/, 'abc')), "\n";

uses the C<b> in C<'abc'> as a separator to produce the output C<a:c>.
However, this:

    print join(':', split(//, 'abc')), "\n";

uses empty string matches as separators to produce the output
C<a:b:c>; thus, the empty string may be used to split EXPR into a
list of its component characters.

As a special case for L<C<split>|/split E<sol>PATTERNE<sol>,EXPR,LIMIT>,
the empty pattern given in
L<match operator|perlop/"m/PATTERN/msixpodualngc"> syntax (C<//>)
specifically matches the empty string, which is contrary to its usual
interpretation as the last successful match.

If PATTERN is C</^/>, then it is treated as if it used the
L<multiline modifier|perlreref/OPERATORS> (C</^/m>), since it
isn't much use otherwise.

As another special case,
L<C<split>|/split E<sol>PATTERNE<sol>,EXPR,LIMIT> emulates the default
behavior of the
command line tool B<awk> when the PATTERN is either omitted or a
string composed of a single space character (such as S<C<' '>> or
S<C<"\x20">>, but not e.g. S<C</ />>).  In this case, any leading
whitespace in EXPR is removed before splitting occurs, and the PATTERN is
instead treated as if it were C</\s+/>; in particular, this means that
I<any> contiguous whitespace (not just a single space character) is used as
a separator.  However, this special treatment can be avoided by specifying
the pattern S<C</ />> instead of the string S<C<" ">>, thereby allowing
only a single space character to be a separator.  In earlier Perls this
special case was restricted to the use of a plain S<C<" ">> as the
pattern argument to split; in Perl 5.18.0 and later this special case is
triggered by any expression which evaluates to the simple string S<C<" ">>.

If omitted, PATTERN defaults to a single space, S<C<" ">>, triggering
the previously described I<awk> emulation.

If LIMIT is specified and positive, it represents the maximum number
of fields into which the EXPR may be split; in other words, LIMIT is
one greater than the maximum number of times EXPR may be split.  Thus,
the LIMIT value C<1> means that EXPR may be split a maximum of zero
times, producing a maximum of one field (namely, the entire value of
EXPR).  For instance:

    print join(':', split(//, 'abc', 1)), "\n";

produces the output C<abc>, and this:

    print join(':', split(//, 'abc', 2)), "\n";

produces the output C<a:bc>, and each of these:

    print join(':', split(//, 'abc', 3)), "\n";
    print join(':', split(//, 'abc', 4)), "\n";

produces the output C<a:b:c>.

If LIMIT is negative, it is treated as if it were instead arbitrarily
large; as many fields as possible are produced.

If LIMIT is omitted (or, equivalently, zero), then it is usually
treated as if it were instead negative but with the exception that
trailing empty fields are stripped (empty leading fields are always
preserved); if all fields are empty, then all fields are considered to
be trailing (and are thus stripped in this case).  Thus, the following:

    print join(':', split(/,/, 'a,b,c,,,')), "\n";

produces the output C<a:b:c>, but the following:

    print join(':', split(/,/, 'a,b,c,,,', -1)), "\n";

produces the output C<a:b:c:::>.

In time-critical applications, it is worthwhile to avoid splitting
into more fields than necessary.  Thus, when assigning to a list,
if LIMIT is omitted (or zero), then LIMIT is treated as though it
were one larger than the number of variables in the list; for the
following, LIMIT is implicitly 3:

    my ($login, $passwd) = split(/:/);

Note that splitting an EXPR that evaluates to the empty string always
produces zero fields, regardless of the LIMIT specified.

An empty leading field is produced when there is a positive-width
match at the beginning of EXPR.  For instance:

    print join(':', split(/ /, ' abc')), "\n";

produces the output C<:abc>.  However, a zero-width match at the
beginning of EXPR never produces an empty field, so that:

    print join(':', split(//, ' abc'));

produces the output S<C< :a:b:c>> (rather than S<C<: :a:b:c>>).

An empty trailing field, on the other hand, is produced when there is a
match at the end of EXPR, regardless of the length of the match
(of course, unless a non-zero LIMIT is given explicitly, such fields are
removed, as in the last example).  Thus:

    print join(':', split(//, ' abc', -1)), "\n";

produces the output S<C< :a:b:c:>>.

If the PATTERN contains
L<capturing groups|perlretut/Grouping things and hierarchical matching>,
then for each separator, an additional field is produced for each substring
captured by a group (in the order in which the groups are specified,
as per L<backreferences|perlretut/Backreferences>); if any group does not
match, then it captures the L<C<undef>|/undef EXPR> value instead of a
substring.  Also,
note that any such additional field is produced whenever there is a
separator (that is, whenever a split occurs), and such an additional field
does B<not> count towards the LIMIT.  Consider the following expressions
evaluated in list context (each returned list is provided in the associated
comment):

    split(/-|,/, "1-10,20", 3)
    # ('1', '10', '20')

    split(/(-|,)/, "1-10,20", 3)
    # ('1', '-', '10', ',', '20')

    split(/-|(,)/, "1-10,20", 3)
    # ('1', undef, '10', ',', '20')

    split(/(-)|,/, "1-10,20", 3)
    # ('1', '-', '10', undef, '20')

    split(/(-)|(,)/, "1-10,20", 3)
    # ('1', '-', undef, '10', undef, ',', '20')

=item sprintf FORMAT, LIST
X<sprintf>

=for Pod::Functions formatted print into a string

Returns a string formatted by the usual
L<C<printf>|/printf FILEHANDLE FORMAT, LIST> conventions of the C
library function L<C<sprintf>|/sprintf FORMAT, LIST>.  See below for
more details and see L<sprintf(3)> or L<printf(3)> on your system for an
explanation of the general principles.

For example:

        # Format number with up to 8 leading zeroes
        my $result = sprintf("%08d", $number);

        # Round number to 3 digits after decimal point
        my $rounded = sprintf("%.3f", $number);

Perl does its own L<C<sprintf>|/sprintf FORMAT, LIST> formatting: it
emulates the C
function L<sprintf(3)>, but doesn't use it except for floating-point
numbers, and even then only standard modifiers are allowed.
Non-standard extensions in your local L<sprintf(3)> are
therefore unavailable from Perl.

Unlike L<C<printf>|/printf FILEHANDLE FORMAT, LIST>,
L<C<sprintf>|/sprintf FORMAT, LIST> does not do what you probably mean
when you pass it an array as your first argument.
The array is given scalar context,
and instead of using the 0th element of the array as the format, Perl will
use the count of elements in the array as the format, which is almost never
useful.

Perl's L<C<sprintf>|/sprintf FORMAT, LIST> permits the following
universally-known conversions:

   %%    a percent sign
   %c    a character with the given number
   %s    a string
   %d    a signed integer, in decimal
   %u    an unsigned integer, in decimal
   %o    an unsigned integer, in octal
   %x    an unsigned integer, in hexadecimal
   %e    a floating-point number, in scientific notation
   %f    a floating-point number, in fixed decimal notation
   %g    a floating-point number, in %e or %f notation

In addition, Perl permits the following widely-supported conversions:

   %X    like %x, but using upper-case letters
   %E    like %e, but using an upper-case "E"
   %G    like %g, but with an upper-case "E" (if applicable)
   %b    an unsigned integer, in binary
   %B    like %b, but using an upper-case "B" with the # flag
   %p    a pointer (outputs the Perl value's address in hexadecimal)
   %n    special: *stores* the number of characters output so far
         into the next argument in the parameter list
   %a    hexadecimal floating point
   %A    like %a, but using upper-case letters

Finally, for backward (and we do mean "backward") compatibility, Perl
permits these unnecessary but widely-supported conversions:

   %i    a synonym for %d
   %D    a synonym for %ld
   %U    a synonym for %lu
   %O    a synonym for %lo
   %F    a synonym for %f

Note that the number of exponent digits in the scientific notation produced
by C<%e>, C<%E>, C<%g> and C<%G> for numbers with the modulus of the
exponent less than 100 is system-dependent: it may be three or less
(zero-padded as necessary).  In other words, 1.23 times ten to the
99th may be either "1.23e99" or "1.23e099".  Similarly for C<%a> and C<%A>:
the exponent or the hexadecimal digits may float: especially the
"long doubles" Perl configuration option may cause surprises.

Between the C<%> and the format letter, you may specify several
additional attributes controlling the interpretation of the format.
In order, these are:

=over 4

=item format parameter index

An explicit format parameter index, such as C<2$>.  By default sprintf
will format the next unused argument in the list, but this allows you
to take the arguments out of order:

  printf '%2$d %1$d', 12, 34;      # prints "34 12"
  printf '%3$d %d %1$d', 1, 2, 3;  # prints "3 1 1"

=item flags

one or more of:

   space   prefix non-negative number with a space
   +       prefix non-negative number with a plus sign
   -       left-justify within the field
   0       use zeros, not spaces, to right-justify
   #       ensure the leading "0" for any octal,
           prefix non-zero hexadecimal with "0x" or "0X",
           prefix non-zero binary with "0b" or "0B"

For example:

  printf '<% d>',  12;   # prints "< 12>"
  printf '<% d>',   0;   # prints "< 0>"
  printf '<% d>', -12;   # prints "<-12>"
  printf '<%+d>',  12;   # prints "<+12>"
  printf '<%+d>',   0;   # prints "<+0>"
  printf '<%+d>', -12;   # prints "<-12>"
  printf '<%6s>',  12;   # prints "<    12>"
  printf '<%-6s>', 12;   # prints "<12    >"
  printf '<%06s>', 12;   # prints "<000012>"
  printf '<%#o>',  12;   # prints "<014>"
  printf '<%#x>',  12;   # prints "<0xc>"
  printf '<%#X>',  12;   # prints "<0XC>"
  printf '<%#b>',  12;   # prints "<0b1100>"
  printf '<%#B>',  12;   # prints "<0B1100>"

When a space and a plus sign are given as the flags at once,
the space is ignored.

  printf '<%+ d>', 12;   # prints "<+12>"
  printf '<% +d>', 12;   # prints "<+12>"

When the # flag and a precision are given in the %o conversion,
the precision is incremented if it's necessary for the leading "0".

  printf '<%#.5o>', 012;      # prints "<00012>"
  printf '<%#.5o>', 012345;   # prints "<012345>"
  printf '<%#.0o>', 0;        # prints "<0>"

=item vector flag

This flag tells Perl to interpret the supplied string as a vector of
integers, one for each character in the string.  Perl applies the format to
each integer in turn, then joins the resulting strings with a separator (a
dot C<.> by default).  This can be useful for displaying ordinal values of
characters in arbitrary strings:

  printf "%vd", "AB\x{100}";           # prints "65.66.256"
  printf "version is v%vd\n", $^V;     # Perl's version

Put an asterisk C<*> before the C<v> to override the string to
use to separate the numbers:

  printf "address is %*vX\n", ":", $addr;   # IPv6 address
  printf "bits are %0*v8b\n", " ", $bits;   # random bitstring

You can also explicitly specify the argument number to use for
the join string using something like C<*2$v>; for example:

  printf '%*4$vX %*4$vX %*4$vX',       # 3 IPv6 addresses
          @@addr[1..3], ":";

=item (minimum) width

Arguments are usually formatted to be only as wide as required to
display the given value.  You can override the width by putting
a number here, or get the width from the next argument (with C<*>)
or from a specified argument (e.g., with C<*2$>):

 printf "<%s>", "a";       # prints "<a>"
 printf "<%6s>", "a";      # prints "<     a>"
 printf "<%*s>", 6, "a";   # prints "<     a>"
 printf '<%*2$s>', "a", 6; # prints "<     a>"
 printf "<%2s>", "long";   # prints "<long>" (does not truncate)

If a field width obtained through C<*> is negative, it has the same
effect as the C<-> flag: left-justification.

=item precision, or maximum width
X<precision>

You can specify a precision (for numeric conversions) or a maximum
width (for string conversions) by specifying a C<.> followed by a number.
For floating-point formats except C<g> and C<G>, this specifies
how many places right of the decimal point to show (the default being 6).
For example:

  # these examples are subject to system-specific variation
  printf '<%f>', 1;    # prints "<1.000000>"
  printf '<%.1f>', 1;  # prints "<1.0>"
  printf '<%.0f>', 1;  # prints "<1>"
  printf '<%e>', 10;   # prints "<1.000000e+01>"
  printf '<%.1e>', 10; # prints "<1.0e+01>"

For "g" and "G", this specifies the maximum number of digits to show,
including those prior to the decimal point and those after it; for
example:

  # These examples are subject to system-specific variation.
  printf '<%g>', 1;        # prints "<1>"
  printf '<%.10g>', 1;     # prints "<1>"
  printf '<%g>', 100;      # prints "<100>"
  printf '<%.1g>', 100;    # prints "<1e+02>"
  printf '<%.2g>', 100.01; # prints "<1e+02>"
  printf '<%.5g>', 100.01; # prints "<100.01>"
  printf '<%.4g>', 100.01; # prints "<100>"

For integer conversions, specifying a precision implies that the
output of the number itself should be zero-padded to this width,
where the 0 flag is ignored:

  printf '<%.6d>', 1;      # prints "<000001>"
  printf '<%+.6d>', 1;     # prints "<+000001>"
  printf '<%-10.6d>', 1;   # prints "<000001    >"
  printf '<%10.6d>', 1;    # prints "<    000001>"
  printf '<%010.6d>', 1;   # prints "<    000001>"
  printf '<%+10.6d>', 1;   # prints "<   +000001>"

  printf '<%.6x>', 1;      # prints "<000001>"
  printf '<%#.6x>', 1;     # prints "<0x000001>"
  printf '<%-10.6x>', 1;   # prints "<000001    >"
  printf '<%10.6x>', 1;    # prints "<    000001>"
  printf '<%010.6x>', 1;   # prints "<    000001>"
  printf '<%#10.6x>', 1;   # prints "<  0x000001>"

For string conversions, specifying a precision truncates the string
to fit the specified width:

  printf '<%.5s>', "truncated";   # prints "<trunc>"
  printf '<%10.5s>', "truncated"; # prints "<     trunc>"

You can also get the precision from the next argument using C<.*>, or from a
specified argument (e.g., with C<.*2$>):

  printf '<%.6x>', 1;       # prints "<000001>"
  printf '<%.*x>', 6, 1;    # prints "<000001>"

  printf '<%.*2$x>', 1, 6;  # prints "<000001>"

  printf '<%6.*2$x>', 1, 4; # prints "<  0001>"

If a precision obtained through C<*> is negative, it counts
as having no precision at all.

  printf '<%.*s>',  7, "string";   # prints "<string>"
  printf '<%.*s>',  3, "string";   # prints "<str>"
  printf '<%.*s>',  0, "string";   # prints "<>"
  printf '<%.*s>', -1, "string";   # prints "<string>"

  printf '<%.*d>',  1, 0;   # prints "<0>"
  printf '<%.*d>',  0, 0;   # prints "<>"
  printf '<%.*d>', -1, 0;   # prints "<0>"

=item size

For numeric conversions, you can specify the size to interpret the
number as using C<l>, C<h>, C<V>, C<q>, C<L>, or C<ll>.  For integer
conversions (C<d u o x X b i D U O>), numbers are usually assumed to be
whatever the default integer size is on your platform (usually 32 or 64
bits), but you can override this to use instead one of the standard C types,
as supported by the compiler used to build Perl:

   hh          interpret integer as C type "char" or "unsigned
               char" on Perl 5.14 or later
   h           interpret integer as C type "short" or
               "unsigned short"
   j           interpret integer as C type "intmax_t" on Perl
               5.14 or later, and only with a C99 compiler
               (unportable)
   l           interpret integer as C type "long" or
               "unsigned long"
   q, L, or ll interpret integer as C type "long long",
               "unsigned long long", or "quad" (typically
               64-bit integers)
   t           interpret integer as C type "ptrdiff_t" on Perl
               5.14 or later
   z           interpret integer as C type "size_t" on Perl 5.14
               or later

As of 5.14, none of these raises an exception if they are not supported on
your platform.  However, if warnings are enabled, a warning of the
L<C<printf>|warnings> warning class is issued on an unsupported
conversion flag.  Should you instead prefer an exception, do this:

    use warnings FATAL => "printf";

If you would like to know about a version dependency before you
start running the program, put something like this at its top:

    use 5.014;  # for hh/j/t/z/ printf modifiers

You can find out whether your Perl supports quads via L<Config>:

    use Config;
    if ($Config{use64bitint} eq "define"
        || $Config{longsize} >= 8) {
        print "Nice quads!\n";
    }

For floating-point conversions (C<e f g E F G>), numbers are usually assumed
to be the default floating-point size on your platform (double or long double),
but you can force "long double" with C<q>, C<L>, or C<ll> if your
platform supports them.  You can find out whether your Perl supports long
doubles via L<Config>:

    use Config;
    print "long doubles\n" if $Config{d_longdbl} eq "define";

You can find out whether Perl considers "long double" to be the default
floating-point size to use on your platform via L<Config>:

    use Config;
    if ($Config{uselongdouble} eq "define") {
        print "long doubles by default\n";
    }

It can also be that long doubles and doubles are the same thing:

        use Config;
        ($Config{doublesize} == $Config{longdblsize}) &&
                print "doubles are long doubles\n";

The size specifier C<V> has no effect for Perl code, but is supported for
compatibility with XS code.  It means "use the standard size for a Perl
integer or floating-point number", which is the default.

=item order of arguments

Normally, L<C<sprintf>|/sprintf FORMAT, LIST> takes the next unused
argument as the value to
format for each format specification.  If the format specification
uses C<*> to require additional arguments, these are consumed from
the argument list in the order they appear in the format
specification I<before> the value to format.  Where an argument is
specified by an explicit index, this does not affect the normal
order for the arguments, even when the explicitly specified index
would have been the next argument.

So:

    printf "<%*.*s>", $a, $b, $c;

uses C<$a> for the width, C<$b> for the precision, and C<$c>
as the value to format; while:

  printf '<%*1$.*s>', $a, $b;

would use C<$a> for the width and precision, and C<$b> as the
value to format.

Here are some more examples; be aware that when using an explicit
index, the C<$> may need escaping:

 printf "%2\$d %d\n",      12, 34;     # will print "34 12\n"
 printf "%2\$d %d %d\n",   12, 34;     # will print "34 12 34\n"
 printf "%3\$d %d %d\n",   12, 34, 56; # will print "56 12 34\n"
 printf "%2\$*3\$d %d\n",  12, 34,  3; # will print " 34 12\n"
 printf "%*1\$.*f\n",       4,  5, 10; # will print "5.0000\n"

=back

If L<C<use locale>|locale> (including C<use locale ':not_characters'>)
is in effect and L<C<POSIX::setlocale>|POSIX/C<setlocale>> has been
called,
the character used for the decimal separator in formatted floating-point
numbers is affected by the C<LC_NUMERIC> locale.  See L<perllocale>
and L<POSIX>.

=item sqrt EXPR
X<sqrt> X<root> X<square root>

=item sqrt

=for Pod::Functions square root function

Return the positive square root of EXPR.  If EXPR is omitted, uses
L<C<$_>|perlvar/$_>.  Works only for non-negative operands unless you've
loaded the L<C<Math::Complex>|Math::Complex> module.

    use Math::Complex;
    print sqrt(-4);    # prints 2i

=item srand EXPR
X<srand> X<seed> X<randseed>

=item srand

=for Pod::Functions seed the random number generator

Sets and returns the random number seed for the L<C<rand>|/rand EXPR>
operator.

The point of the function is to "seed" the L<C<rand>|/rand EXPR>
function so that L<C<rand>|/rand EXPR> can produce a different sequence
each time you run your program.  When called with a parameter,
L<C<srand>|/srand EXPR> uses that for the seed; otherwise it
(semi-)randomly chooses a seed.  In either case, starting with Perl 5.14,
it returns the seed.  To signal that your code will work I<only> on Perls
of a recent vintage:

    use 5.014;	# so srand returns the seed

If L<C<srand>|/srand EXPR> is not called explicitly, it is called
implicitly without a parameter at the first use of the
L<C<rand>|/rand EXPR> operator.  However, there are a few situations
where programs are likely to want to call L<C<srand>|/srand EXPR>.  One
is for generating predictable results, generally for testing or
debugging.  There, you use C<srand($seed)>, with the same C<$seed> each
time.  Another case is that you may want to call L<C<srand>|/srand EXPR>
after a L<C<fork>|/fork> to avoid child processes sharing the same seed
value as the parent (and consequently each other).

Do B<not> call C<srand()> (i.e., without an argument) more than once per
process.  The internal state of the random number generator should
contain more entropy than can be provided by any seed, so calling
L<C<srand>|/srand EXPR> again actually I<loses> randomness.

Most implementations of L<C<srand>|/srand EXPR> take an integer and will
silently
truncate decimal numbers.  This means C<srand(42)> will usually
produce the same results as C<srand(42.1)>.  To be safe, always pass
L<C<srand>|/srand EXPR> an integer.

A typical use of the returned seed is for a test program which has too many
combinations to test comprehensively in the time available to it each run.  It
can test a random subset each time, and should there be a failure, log the seed
used for that run so that it can later be used to reproduce the same results.

B<L<C<rand>|/rand EXPR> is not cryptographically secure.  You should not rely
on it in security-sensitive situations.>  As of this writing, a
number of third-party CPAN modules offer random number generators
intended by their authors to be cryptographically secure,
including: L<Data::Entropy>, L<Crypt::Random>, L<Math::Random::Secure>,
and L<Math::TrulyRandom>.

=item stat FILEHANDLE
X<stat> X<file, status> X<ctime>

=item stat EXPR

=item stat DIRHANDLE

=item stat

=for Pod::Functions get a file's status information

Returns a 13-element list giving the status info for a file, either
the file opened via FILEHANDLE or DIRHANDLE, or named by EXPR.  If EXPR is
omitted, it stats L<C<$_>|perlvar/$_> (not C<_>!).  Returns the empty
list if L<C<stat>|/stat FILEHANDLE> fails.  Typically
used as follows:

    my ($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$size,
        $atime,$mtime,$ctime,$blksize,$blocks)
           = stat($filename);

Not all fields are supported on all filesystem types.  Here are the
meanings of the fields:

  0 dev      device number of filesystem
  1 ino      inode number
  2 mode     file mode  (type and permissions)
  3 nlink    number of (hard) links to the file
  4 uid      numeric user ID of file's owner
  5 gid      numeric group ID of file's owner
  6 rdev     the device identifier (special files only)
  7 size     total size of file, in bytes
  8 atime    last access time in seconds since the epoch
  9 mtime    last modify time in seconds since the epoch
 10 ctime    inode change time in seconds since the epoch (*)
 11 blksize  preferred I/O size in bytes for interacting with the
             file (may vary from file to file)
 12 blocks   actual number of system-specific blocks allocated
             on disk (often, but not always, 512 bytes each)

(The epoch was at 00:00 January 1, 1970 GMT.)

(*) Not all fields are supported on all filesystem types.  Notably, the
ctime field is non-portable.  In particular, you cannot expect it to be a
"creation time"; see L<perlport/"Files and Filesystems"> for details.

If L<C<stat>|/stat FILEHANDLE> is passed the special filehandle
consisting of an underline, no stat is done, but the current contents of
the stat structure from the last L<C<stat>|/stat FILEHANDLE>,
L<C<lstat>|/lstat FILEHANDLE>, or filetest are returned.  Example:

    if (-x $file && (($d) = stat(_)) && $d < 0) {
        print "$file is executable NFS file\n";
    }

(This works on machines only for which the device number is negative
under NFS.)

Because the mode contains both the file type and its permissions, you
should mask off the file type portion and (s)printf using a C<"%o">
if you want to see the real permissions.

    my $mode = (stat($filename))[2];
    printf "Permissions are %04o\n", $mode & 07777;

In scalar context, L<C<stat>|/stat FILEHANDLE> returns a boolean value
indicating success
or failure, and, if successful, sets the information associated with
the special filehandle C<_>.

The L<File::stat> module provides a convenient, by-name access mechanism:

    use File::stat;
    my $sb = stat($filename);
    printf "File is %s, size is %s, perm %04o, mtime %s\n",
           $filename, $sb->size, $sb->mode & 07777,
           scalar localtime $sb->mtime;

You can import symbolic mode constants (C<S_IF*>) and functions
(C<S_IS*>) from the L<Fcntl> module:

    use Fcntl ':mode';

    my $mode = (stat($filename))[2];

    my $user_rwx      = ($mode & S_IRWXU) >> 6;
    my $group_read    = ($mode & S_IRGRP) >> 3;
    my $other_execute =  $mode & S_IXOTH;

    printf "Permissions are %04o\n", S_IMODE($mode), "\n";

    my $is_setuid     =  $mode & S_ISUID;
    my $is_directory  =  S_ISDIR($mode);

You could write the last two using the C<-u> and C<-d> operators.
Commonly available C<S_IF*> constants are:

    # Permissions: read, write, execute, for user, group, others.

    S_IRWXU S_IRUSR S_IWUSR S_IXUSR
    S_IRWXG S_IRGRP S_IWGRP S_IXGRP
    S_IRWXO S_IROTH S_IWOTH S_IXOTH

    # Setuid/Setgid/Stickiness/SaveText.
    # Note that the exact meaning of these is system-dependent.

    S_ISUID S_ISGID S_ISVTX S_ISTXT

    # File types.  Not all are necessarily available on
    # your system.

    S_IFREG S_IFDIR S_IFLNK S_IFBLK S_IFCHR
    S_IFIFO S_IFSOCK S_IFWHT S_ENFMT

    # The following are compatibility aliases for S_IRUSR,
    # S_IWUSR, and S_IXUSR.

    S_IREAD S_IWRITE S_IEXEC

and the C<S_IF*> functions are

    S_IMODE($mode)    the part of $mode containing the permission
                      bits and the setuid/setgid/sticky bits

    S_IFMT($mode)     the part of $mode containing the file type
                      which can be bit-anded with (for example)
                      S_IFREG or with the following functions

    # The operators -f, -d, -l, -b, -c, -p, and -S.

    S_ISREG($mode) S_ISDIR($mode) S_ISLNK($mode)
    S_ISBLK($mode) S_ISCHR($mode) S_ISFIFO($mode) S_ISSOCK($mode)

    # No direct -X operator counterpart, but for the first one
    # the -g operator is often equivalent.  The ENFMT stands for
    # record flocking enforcement, a platform-dependent feature.

    S_ISENFMT($mode) S_ISWHT($mode)

See your native L<chmod(2)> and L<stat(2)> documentation for more details
about the C<S_*> constants.  To get status info for a symbolic link
instead of the target file behind the link, use the
L<C<lstat>|/lstat FILEHANDLE> function.

Portability issues: L<perlport/stat>.

=item state VARLIST
X<state>

=item state TYPE VARLIST

=item state VARLIST : ATTRS

=item state TYPE VARLIST : ATTRS

=for Pod::Functions +state declare and assign a persistent lexical variable

L<C<state>|/state VARLIST> declares a lexically scoped variable, just
like L<C<my>|/my VARLIST>.
However, those variables will never be reinitialized, contrary to
lexical variables that are reinitialized each time their enclosing block
is entered.
See L<perlsub/"Persistent Private Variables"> for details.

If more than one variable is listed, the list must be placed in
parentheses.  With a parenthesised list, L<C<undef>|/undef EXPR> can be
used as a
dummy placeholder.  However, since initialization of state variables in
list context is currently not possible this would serve no purpose.

L<C<state>|/state VARLIST> is available only if the
L<C<"state"> feature|feature/The 'state' feature> is enabled or if it is
prefixed with C<CORE::>.  The
L<C<"state"> feature|feature/The 'state' feature> is enabled
automatically with a C<use v5.10> (or higher) declaration in the current
scope.


=item study SCALAR
X<study>

=item study

=for Pod::Functions optimize input data for repeated searches

B<Note that since Perl version 5.16 this function has been a no-op, but
this might change in a future release.>

May take extra time to study SCALAR (L<C<$_>|perlvar/$_> if unspecified)
in anticipation
of doing many pattern matches on the string before it is next modified.
This may or may not save time, depending on the nature and number of
patterns you are searching and the distribution of character
frequencies in the string to be searched; you probably want to compare
run times with and without it to see which is faster.  Those loops
that scan for many short constant strings (including the constant
parts of more complex patterns) will benefit most.

(The way L<C<study>|/study SCALAR> used to work is this: a linked list
of every
character in the string to be searched is made, so we know, for
example, where all the C<'k'> characters are.  From each search string,
the rarest character is selected, based on some static frequency tables
constructed from some C programs and English text.  Only those places
that contain this "rarest" character are examined.)

For example, here is a loop that inserts index producing entries
before any line containing a certain pattern:

    while (<>) {
        study;
        print ".IX foo\n"    if /\bfoo\b/;
        print ".IX bar\n"    if /\bbar\b/;
        print ".IX blurfl\n" if /\bblurfl\b/;
        # ...
        print;
    }

In searching for C</\bfoo\b/>, only locations in L<C<$_>|perlvar/$_>
that contain C<f>
will be looked at, because C<f> is rarer than C<o>.  In general, this is
a big win except in pathological cases.  The only question is whether
it saves you more time than it took to build the linked list in the
first place.

Note that if you have to look for strings that you don't know till
runtime, you can build an entire loop as a string and L<C<eval>|/eval
EXPR> that to avoid recompiling all your patterns all the time.
Together with undefining L<C<$E<sol>>|perlvar/$E<sol>> to input entire
files as one record, this can be quite
fast, often faster than specialized programs like L<fgrep(1)>.  The following
scans a list of files (C<@@files>) for a list of words (C<@@words>), and prints
out the names of those files that contain a match:

    my $search = 'local $/; while (<>) { study;';
    foreach my $word (@@words) {
        $search .= "++\$seen{\$ARGV} if /\\b$word\\b/;\n";
    }
    $search .= "}";
    @@ARGV = @@files;
    my %seen;
    eval $search;        # this screams
    foreach my $file (sort keys(%seen)) {
        print $file, "\n";
    }

=item sub NAME BLOCK
X<sub>

=item sub NAME (PROTO) BLOCK

=item sub NAME : ATTRS BLOCK

=item sub NAME (PROTO) : ATTRS BLOCK

=for Pod::Functions declare a subroutine, possibly anonymously

This is subroutine definition, not a real function I<per se>.  Without a
BLOCK it's just a forward declaration.  Without a NAME, it's an anonymous
function declaration, so does return a value: the CODE ref of the closure
just created.

See L<perlsub> and L<perlref> for details about subroutines and
references; see L<attributes> and L<Attribute::Handlers> for more
information about attributes.

=item __SUB__
X<__SUB__>

=for Pod::Functions +current_sub the current subroutine, or C<undef> if not in a subroutine

A special token that returns a reference to the current subroutine, or
L<C<undef>|/undef EXPR> outside of a subroutine.

The behaviour of L<C<__SUB__>|/__SUB__> within a regex code block (such
as C</(?{...})/>) is subject to change.

This token is only available under C<use v5.16> or the
L<C<"current_sub"> feature|feature/The 'current_sub' feature>.
See L<feature>.

=item substr EXPR,OFFSET,LENGTH,REPLACEMENT
X<substr> X<substring> X<mid> X<left> X<right>

=item substr EXPR,OFFSET,LENGTH

=item substr EXPR,OFFSET

=for Pod::Functions get or alter a portion of a string

Extracts a substring out of EXPR and returns it.  First character is at
offset zero.  If OFFSET is negative, starts
that far back from the end of the string.  If LENGTH is omitted, returns
everything through the end of the string.  If LENGTH is negative, leaves that
many characters off the end of the string.

    my $s = "The black cat climbed the green tree";
    my $color  = substr $s, 4, 5;      # black
    my $middle = substr $s, 4, -11;    # black cat climbed the
    my $end    = substr $s, 14;        # climbed the green tree
    my $tail   = substr $s, -4;        # tree
    my $z      = substr $s, -4, 2;     # tr

You can use the L<C<substr>|/substr EXPR,OFFSET,LENGTH,REPLACEMENT>
function as an lvalue, in which case EXPR
must itself be an lvalue.  If you assign something shorter than LENGTH,
the string will shrink, and if you assign something longer than LENGTH,
the string will grow to accommodate it.  To keep the string the same
length, you may need to pad or chop your value using
L<C<sprintf>|/sprintf FORMAT, LIST>.

If OFFSET and LENGTH specify a substring that is partly outside the
string, only the part within the string is returned.  If the substring
is beyond either end of the string,
L<C<substr>|/substr EXPR,OFFSET,LENGTH,REPLACEMENT> returns the undefined
value and produces a warning.  When used as an lvalue, specifying a
substring that is entirely outside the string raises an exception.
Here's an example showing the behavior for boundary cases:

    my $name = 'fred';
    substr($name, 4) = 'dy';         # $name is now 'freddy'
    my $null = substr $name, 6, 2;   # returns "" (no warning)
    my $oops = substr $name, 7;      # returns undef, with warning
    substr($name, 7) = 'gap';        # raises an exception

An alternative to using
L<C<substr>|/substr EXPR,OFFSET,LENGTH,REPLACEMENT> as an lvalue is to
specify the
replacement string as the 4th argument.  This allows you to replace
parts of the EXPR and return what was there before in one operation,
just as you can with
L<C<splice>|/splice ARRAY,OFFSET,LENGTH,LIST>.

    my $s = "The black cat climbed the green tree";
    my $z = substr $s, 14, 7, "jumped from";    # climbed
    # $s is now "The black cat jumped from the green tree"

Note that the lvalue returned by the three-argument version of
L<C<substr>|/substr EXPR,OFFSET,LENGTH,REPLACEMENT> acts as
a 'magic bullet'; each time it is assigned to, it remembers which part
of the original string is being modified; for example:

    my $x = '1234';
    for (substr($x,1,2)) {
        $_ = 'a';   print $x,"\n";    # prints 1a4
        $_ = 'xyz'; print $x,"\n";    # prints 1xyz4
        $x = '56789';
        $_ = 'pq';  print $x,"\n";    # prints 5pq9
    }

With negative offsets, it remembers its position from the end of the string
when the target string is modified:

    my $x = '1234';
    for (substr($x, -3, 2)) {
        $_ = 'a';   print $x,"\n";    # prints 1a4, as above
        $x = 'abcdefg';
        print $_,"\n";                # prints f
    }

Prior to Perl version 5.10, the result of using an lvalue multiple times was
unspecified.  Prior to 5.16, the result with negative offsets was
unspecified.

=item symlink OLDFILE,NEWFILE
X<symlink> X<link> X<symbolic link> X<link, symbolic>

=for Pod::Functions create a symbolic link to a file

Creates a new filename symbolically linked to the old filename.
Returns C<1> for success, C<0> otherwise.  On systems that don't support
symbolic links, raises an exception.  To check for that,
use eval:

    my $symlink_exists = eval { symlink("",""); 1 };

Portability issues: L<perlport/symlink>.

=item syscall NUMBER, LIST
X<syscall> X<system call>

=for Pod::Functions execute an arbitrary system call

Calls the system call specified as the first element of the list,
passing the remaining elements as arguments to the system call.  If
unimplemented, raises an exception.  The arguments are interpreted
as follows: if a given argument is numeric, the argument is passed as
an int.  If not, the pointer to the string value is passed.  You are
responsible to make sure a string is pre-extended long enough to
receive any result that might be written into a string.  You can't use a
string literal (or other read-only string) as an argument to
L<C<syscall>|/syscall NUMBER, LIST> because Perl has to assume that any
string pointer might be written through.  If your
integer arguments are not literals and have never been interpreted in a
numeric context, you may need to add C<0> to them to force them to look
like numbers.  This emulates the
L<C<syswrite>|/syswrite FILEHANDLE,SCALAR,LENGTH,OFFSET> function (or
vice versa):

    require 'syscall.ph';        # may need to run h2ph
    my $s = "hi there\n";
    syscall(SYS_write(), fileno(STDOUT), $s, length $s);

Note that Perl supports passing of up to only 14 arguments to your syscall,
which in practice should (usually) suffice.

Syscall returns whatever value returned by the system call it calls.
If the system call fails, L<C<syscall>|/syscall NUMBER, LIST> returns
C<-1> and sets L<C<$!>|perlvar/$!> (errno).
Note that some system calls I<can> legitimately return C<-1>.  The proper
way to handle such calls is to assign C<$! = 0> before the call, then
check the value of L<C<$!>|perlvar/$!> if
L<C<syscall>|/syscall NUMBER, LIST> returns C<-1>.

There's a problem with C<syscall(SYS_pipe())>: it returns the file
number of the read end of the pipe it creates, but there is no way
to retrieve the file number of the other end.  You can avoid this
problem by using L<C<pipe>|/pipe READHANDLE,WRITEHANDLE> instead.

Portability issues: L<perlport/syscall>.

=item sysopen FILEHANDLE,FILENAME,MODE
X<sysopen>

=item sysopen FILEHANDLE,FILENAME,MODE,PERMS

=for Pod::Functions +5.002 open a file, pipe, or descriptor

Opens the file whose filename is given by FILENAME, and associates it with
FILEHANDLE.  If FILEHANDLE is an expression, its value is used as the real
filehandle wanted; an undefined scalar will be suitably autovivified.  This
function calls the underlying operating system's L<open(2)> function with the
parameters FILENAME, MODE, and PERMS.

Returns true on success and L<C<undef>|/undef EXPR> otherwise.

The possible values and flag bits of the MODE parameter are
system-dependent; they are available via the standard module
L<C<Fcntl>|Fcntl>.  See the documentation of your operating system's
L<open(2)> syscall to see
which values and flag bits are available.  You may combine several flags
using the C<|>-operator.

Some of the most common values are C<O_RDONLY> for opening the file in
read-only mode, C<O_WRONLY> for opening the file in write-only mode,
and C<O_RDWR> for opening the file in read-write mode.
X<O_RDONLY> X<O_RDWR> X<O_WRONLY>

For historical reasons, some values work on almost every system
supported by Perl: 0 means read-only, 1 means write-only, and 2
means read/write.  We know that these values do I<not> work under
OS/390 and on the Macintosh; you probably don't want to
use them in new code.

If the file named by FILENAME does not exist and the
L<C<open>|/open FILEHANDLE,EXPR> call creates
it (typically because MODE includes the C<O_CREAT> flag), then the value of
PERMS specifies the permissions of the newly created file.  If you omit
the PERMS argument to L<C<sysopen>|/sysopen FILEHANDLE,FILENAME,MODE>,
Perl uses the octal value C<0666>.
These permission values need to be in octal, and are modified by your
process's current L<C<umask>|/umask EXPR>.
X<O_CREAT>

In many systems the C<O_EXCL> flag is available for opening files in
exclusive mode.  This is B<not> locking: exclusiveness means here that
if the file already exists,
L<C<sysopen>|/sysopen FILEHANDLE,FILENAME,MODE> fails.  C<O_EXCL> may
not work
on network filesystems, and has no effect unless the C<O_CREAT> flag
is set as well.  Setting C<O_CREAT|O_EXCL> prevents the file from
being opened if it is a symbolic link.  It does not protect against
symbolic links in the file's path.
X<O_EXCL>

Sometimes you may want to truncate an already-existing file.  This
can be done using the C<O_TRUNC> flag.  The behavior of
C<O_TRUNC> with C<O_RDONLY> is undefined.
X<O_TRUNC>

You should seldom if ever use C<0644> as argument to
L<C<sysopen>|/sysopen FILEHANDLE,FILENAME,MODE>, because
that takes away the user's option to have a more permissive umask.
Better to omit it.  See L<C<umask>|/umask EXPR> for more on this.

Note that under Perls older than 5.8.0,
L<C<sysopen>|/sysopen FILEHANDLE,FILENAME,MODE> depends on the
L<fdopen(3)> C library function.  On many Unix systems, L<fdopen(3)> is known
to fail when file descriptors exceed a certain value, typically 255.  If
you need more file descriptors than that, consider using the
L<C<POSIX::open>|POSIX/C<open>> function.  For Perls 5.8.0 and later,
PerlIO is (most often) the default.

See L<perlopentut> for a kinder, gentler explanation of opening files.

Portability issues: L<perlport/sysopen>.

=item sysread FILEHANDLE,SCALAR,LENGTH,OFFSET
X<sysread>

=item sysread FILEHANDLE,SCALAR,LENGTH

=for Pod::Functions fixed-length unbuffered input from a filehandle

Attempts to read LENGTH bytes of data into variable SCALAR from the
specified FILEHANDLE, using L<read(2)>.  It bypasses
buffered IO, so mixing this with other kinds of reads,
L<C<print>|/print FILEHANDLE LIST>, L<C<write>|/write FILEHANDLE>,
L<C<seek>|/seek FILEHANDLE,POSITION,WHENCE>,
L<C<tell>|/tell FILEHANDLE>, or L<C<eof>|/eof FILEHANDLE> can cause
confusion because the
perlio or stdio layers usually buffer data.  Returns the number of
bytes actually read, C<0> at end of file, or undef if there was an
error (in the latter case L<C<$!>|perlvar/$!> is also set).  SCALAR will
be grown or
shrunk so that the last byte actually read is the last byte of the
scalar after the read.

An OFFSET may be specified to place the read data at some place in the
string other than the beginning.  A negative OFFSET specifies
placement at that many characters counting backwards from the end of
the string.  A positive OFFSET greater than the length of SCALAR
results in the string being padded to the required size with C<"\0">
bytes before the result of the read is appended.

There is no syseof() function, which is ok, since
L<C<eof>|/eof FILEHANDLE> doesn't work well on device files (like ttys)
anyway.  Use L<C<sysread>|/sysread FILEHANDLE,SCALAR,LENGTH,OFFSET> and
check for a return value for 0 to decide whether you're done.

Note that if the filehandle has been marked as C<:utf8>, Unicode
characters are read instead of bytes (the LENGTH, OFFSET, and the
return value of L<C<sysread>|/sysread FILEHANDLE,SCALAR,LENGTH,OFFSET>
are in Unicode characters).  The C<:encoding(...)> layer implicitly
introduces the C<:utf8> layer.  See
L<C<binmode>|/binmode FILEHANDLE, LAYER>,
L<C<open>|/open FILEHANDLE,EXPR>, and the L<open> pragma.

=item sysseek FILEHANDLE,POSITION,WHENCE
X<sysseek> X<lseek>

=for Pod::Functions +5.004 position I/O pointer on handle used with sysread and syswrite

Sets FILEHANDLE's system position in bytes using L<lseek(2)>.  FILEHANDLE may
be an expression whose value gives the name of the filehandle.  The values
for WHENCE are C<0> to set the new position to POSITION; C<1> to set the it
to the current position plus POSITION; and C<2> to set it to EOF plus
POSITION, typically negative.

Note the I<in bytes>: even if the filehandle has been set to operate
on characters (for example by using the C<:encoding(utf8)> I/O layer),
L<C<tell>|/tell FILEHANDLE> will return byte offsets, not character
offsets (because implementing that would render
L<C<sysseek>|/sysseek FILEHANDLE,POSITION,WHENCE> unacceptably slow).

L<C<sysseek>|/sysseek FILEHANDLE,POSITION,WHENCE> bypasses normal
buffered IO, so mixing it with reads other than
L<C<sysread>|/sysread FILEHANDLE,SCALAR,LENGTH,OFFSET> (for example
L<C<readline>|/readline EXPR> or
L<C<read>|/read FILEHANDLE,SCALAR,LENGTH,OFFSET>),
L<C<print>|/print FILEHANDLE LIST>, L<C<write>|/write FILEHANDLE>,
L<C<seek>|/seek FILEHANDLE,POSITION,WHENCE>,
L<C<tell>|/tell FILEHANDLE>, or L<C<eof>|/eof FILEHANDLE> may cause
confusion.

For WHENCE, you may also use the constants C<SEEK_SET>, C<SEEK_CUR>,
and C<SEEK_END> (start of the file, current position, end of the file)
from the L<Fcntl> module.  Use of the constants is also more portable
than relying on 0, 1, and 2.  For example to define a "systell" function:

    use Fcntl 'SEEK_CUR';
    sub systell { sysseek($_[0], 0, SEEK_CUR) }

Returns the new position, or the undefined value on failure.  A position
of zero is returned as the string C<"0 but true">; thus
L<C<sysseek>|/sysseek FILEHANDLE,POSITION,WHENCE> returns
true on success and false on failure, yet you can still easily determine
the new position.

=item system LIST
X<system> X<shell>

=item system PROGRAM LIST

=for Pod::Functions run a separate program

Does exactly the same thing as L<C<exec>|/exec LIST>, except that a fork is
done first and the parent process waits for the child process to
exit.  Note that argument processing varies depending on the
number of arguments.  If there is more than one argument in LIST,
or if LIST is an array with more than one value, starts the program
given by the first element of the list with arguments given by the
rest of the list.  If there is only one scalar argument, the argument
is checked for shell metacharacters, and if there are any, the
entire argument is passed to the system's command shell for parsing
(this is C</bin/sh -c> on Unix platforms, but varies on other
platforms).  If there are no shell metacharacters in the argument,
it is split into words and passed directly to C<execvp>, which is
more efficient.  On Windows, only the C<system PROGRAM LIST> syntax will
reliably avoid using the shell; C<system LIST>, even with more than one
element, will fall back to the shell if the first spawn fails.

Perl will attempt to flush all files opened for
output before any operation that may do a fork, but this may not be
supported on some platforms (see L<perlport>).  To be safe, you may need
to set L<C<$E<verbar>>|perlvar/$E<verbar>> (C<$AUTOFLUSH> in L<English>)
or call the C<autoflush> method of L<C<IO::Handle>|IO::Handle/METHODS>
on any open handles.

The return value is the exit status of the program as returned by the
L<C<wait>|/wait> call.  To get the actual exit value, shift right by
eight (see below).  See also L<C<exec>|/exec LIST>.  This is I<not> what
you want to use to capture the output from a command; for that you
should use merely backticks or
L<C<qxE<sol>E<sol>>|/qxE<sol>STRINGE<sol>>, as described in
L<perlop/"`STRING`">.  Return value of -1 indicates a failure to start
the program or an error of the L<wait(2)> system call (inspect
L<C<$!>|perlvar/$!> for the reason).

If you'd like to make L<C<system>|/system LIST> (and many other bits of
Perl) die on error, have a look at the L<autodie> pragma.

Like L<C<exec>|/exec LIST>, L<C<system>|/system LIST> allows you to lie
to a program about its name if you use the C<system PROGRAM LIST>
syntax.  Again, see L<C<exec>|/exec LIST>.

Since C<SIGINT> and C<SIGQUIT> are ignored during the execution of
L<C<system>|/system LIST>, if you expect your program to terminate on
receipt of these signals you will need to arrange to do so yourself
based on the return value.

    my @@args = ("command", "arg1", "arg2");
    system(@@args) == 0
        or die "system @@args failed: $?";

If you'd like to manually inspect L<C<system>|/system LIST>'s failure,
you can check all possible failure modes by inspecting
L<C<$?>|perlvar/$?> like this:

    if ($? == -1) {
        print "failed to execute: $!\n";
    }
    elsif ($? & 127) {
        printf "child died with signal %d, %s coredump\n",
            ($? & 127),  ($? & 128) ? 'with' : 'without';
    }
    else {
        printf "child exited with value %d\n", $? >> 8;
    }

Alternatively, you may inspect the value of
L<C<${^CHILD_ERROR_NATIVE}>|perlvar/${^CHILD_ERROR_NATIVE}> with the
L<C<W*()>|POSIX/C<WIFEXITED>> calls from the L<POSIX> module.

When L<C<system>|/system LIST>'s arguments are executed indirectly by
the shell, results and return codes are subject to its quirks.
See L<perlop/"`STRING`"> and L<C<exec>|/exec LIST> for details.

Since L<C<system>|/system LIST> does a L<C<fork>|/fork> and
L<C<wait>|/wait> it may affect a C<SIGCHLD> handler.  See L<perlipc> for
details.

Portability issues: L<perlport/system>.

=item syswrite FILEHANDLE,SCALAR,LENGTH,OFFSET
X<syswrite>

=item syswrite FILEHANDLE,SCALAR,LENGTH

=item syswrite FILEHANDLE,SCALAR

=for Pod::Functions fixed-length unbuffered output to a filehandle

Attempts to write LENGTH bytes of data from variable SCALAR to the
specified FILEHANDLE, using L<write(2)>.  If LENGTH is
not specified, writes whole SCALAR.  It bypasses buffered IO, so
mixing this with reads (other than C<sysread)>),
L<C<print>|/print FILEHANDLE LIST>, L<C<write>|/write FILEHANDLE>,
L<C<seek>|/seek FILEHANDLE,POSITION,WHENCE>,
L<C<tell>|/tell FILEHANDLE>, or L<C<eof>|/eof FILEHANDLE> may cause
confusion because the perlio and stdio layers usually buffer data.
Returns the number of bytes actually written, or L<C<undef>|/undef EXPR>
if there was an error (in this case the errno variable
L<C<$!>|perlvar/$!> is also set).  If the LENGTH is greater than the
data available in the SCALAR after the OFFSET, only as much data as is
available will be written.

An OFFSET may be specified to write the data from some part of the
string other than the beginning.  A negative OFFSET specifies writing
that many characters counting backwards from the end of the string.
If SCALAR is of length zero, you can only use an OFFSET of 0.

B<WARNING>: If the filehandle is marked C<:utf8>, Unicode characters
encoded in UTF-8 are written instead of bytes, and the LENGTH, OFFSET, and
return value of L<C<syswrite>|/syswrite FILEHANDLE,SCALAR,LENGTH,OFFSET>
are in (UTF8-encoded Unicode) characters.
The C<:encoding(...)> layer implicitly introduces the C<:utf8> layer.
Alternately, if the handle is not marked with an encoding but you
attempt to write characters with code points over 255, raises an exception.
See L<C<binmode>|/binmode FILEHANDLE, LAYER>,
L<C<open>|/open FILEHANDLE,EXPR>, and the L<open> pragma.

=item tell FILEHANDLE
X<tell>

=item tell

=for Pod::Functions get current seekpointer on a filehandle

Returns the current position I<in bytes> for FILEHANDLE, or -1 on
error.  FILEHANDLE may be an expression whose value gives the name of
the actual filehandle.  If FILEHANDLE is omitted, assumes the file
last read.

Note the I<in bytes>: even if the filehandle has been set to
operate on characters (for example by using the C<:encoding(utf8)> open
layer), L<C<tell>|/tell FILEHANDLE> will return byte offsets, not
character offsets (because that would render
L<C<seek>|/seek FILEHANDLE,POSITION,WHENCE> and
L<C<tell>|/tell FILEHANDLE> rather slow).

The return value of L<C<tell>|/tell FILEHANDLE> for the standard streams
like the STDIN depends on the operating system: it may return -1 or
something else.  L<C<tell>|/tell FILEHANDLE> on pipes, fifos, and
sockets usually returns -1.

There is no C<systell> function.  Use C<sysseek($fh, 0, 1)> for that.

Do not use L<C<tell>|/tell FILEHANDLE> (or other buffered I/O
operations) on a filehandle that has been manipulated by
L<C<sysread>|/sysread FILEHANDLE,SCALAR,LENGTH,OFFSET>,
L<C<syswrite>|/syswrite FILEHANDLE,SCALAR,LENGTH,OFFSET>, or
L<C<sysseek>|/sysseek FILEHANDLE,POSITION,WHENCE>.  Those functions
ignore the buffering, while L<C<tell>|/tell FILEHANDLE> does not.

=item telldir DIRHANDLE
X<telldir>

=for Pod::Functions get current seekpointer on a directory handle

Returns the current position of the L<C<readdir>|/readdir DIRHANDLE>
routines on DIRHANDLE.  Value may be given to
L<C<seekdir>|/seekdir DIRHANDLE,POS> to access a particular location in
a directory.  L<C<telldir>|/telldir DIRHANDLE> has the same caveats
about possible directory compaction as the corresponding system library
routine.

=item tie VARIABLE,CLASSNAME,LIST
X<tie>

=for Pod::Functions +5.002 bind a variable to an object class

This function binds a variable to a package class that will provide the
implementation for the variable.  VARIABLE is the name of the variable
to be enchanted.  CLASSNAME is the name of a class implementing objects
of correct type.  Any additional arguments are passed to the
appropriate constructor
method of the class (meaning C<TIESCALAR>, C<TIEHANDLE>, C<TIEARRAY>,
or C<TIEHASH>).  Typically these are arguments such as might be passed
to the L<dbm_open(3)> function of C.  The object returned by the
constructor is also returned by the
L<C<tie>|/tie VARIABLE,CLASSNAME,LIST> function, which would be useful
if you want to access other methods in CLASSNAME.

Note that functions such as L<C<keys>|/keys HASH> and
L<C<values>|/values HASH> may return huge lists when used on large
objects, like DBM files.  You may prefer to use the L<C<each>|/each
HASH> function to iterate over such.  Example:

    # print out history file offsets
    use NDBM_File;
    tie(my %HIST, 'NDBM_File', '/usr/lib/news/history', 1, 0);
    while (my ($key,$val) = each %HIST) {
        print $key, ' = ', unpack('L', $val), "\n";
    }

A class implementing a hash should have the following methods:

    TIEHASH classname, LIST
    FETCH this, key
    STORE this, key, value
    DELETE this, key
    CLEAR this
    EXISTS this, key
    FIRSTKEY this
    NEXTKEY this, lastkey
    SCALAR this
    DESTROY this
    UNTIE this

A class implementing an ordinary array should have the following methods:

    TIEARRAY classname, LIST
    FETCH this, key
    STORE this, key, value
    FETCHSIZE this
    STORESIZE this, count
    CLEAR this
    PUSH this, LIST
    POP this
    SHIFT this
    UNSHIFT this, LIST
    SPLICE this, offset, length, LIST
    EXTEND this, count
    DELETE this, key
    EXISTS this, key
    DESTROY this
    UNTIE this

A class implementing a filehandle should have the following methods:

    TIEHANDLE classname, LIST
    READ this, scalar, length, offset
    READLINE this
    GETC this
    WRITE this, scalar, length, offset
    PRINT this, LIST
    PRINTF this, format, LIST
    BINMODE this
    EOF this
    FILENO this
    SEEK this, position, whence
    TELL this
    OPEN this, mode, LIST
    CLOSE this
    DESTROY this
    UNTIE this

A class implementing a scalar should have the following methods:

    TIESCALAR classname, LIST
    FETCH this,
    STORE this, value
    DESTROY this
    UNTIE this

Not all methods indicated above need be implemented.  See L<perltie>,
L<Tie::Hash>, L<Tie::Array>, L<Tie::Scalar>, and L<Tie::Handle>.

Unlike L<C<dbmopen>|/dbmopen HASH,DBNAME,MASK>, the
L<C<tie>|/tie VARIABLE,CLASSNAME,LIST> function will not
L<C<use>|/use Module VERSION LIST> or L<C<require>|/require VERSION> a
module for you; you need to do that explicitly yourself.  See L<DB_File>
or the L<Config> module for interesting
L<C<tie>|/tie VARIABLE,CLASSNAME,LIST> implementations.

For further details see L<perltie>, L<C<tied>|/tied VARIABLE>.

=item tied VARIABLE
X<tied>

=for Pod::Functions get a reference to the object underlying a tied variable

Returns a reference to the object underlying VARIABLE (the same value
that was originally returned by the
L<C<tie>|/tie VARIABLE,CLASSNAME,LIST> call that bound the variable
to a package.)  Returns the undefined value if VARIABLE isn't tied to a
package.

=item time
X<time> X<epoch>

=for Pod::Functions return number of seconds since 1970

Returns the number of non-leap seconds since whatever time the system
considers to be the epoch, suitable for feeding to
L<C<gmtime>|/gmtime EXPR> and L<C<localtime>|/localtime EXPR>.  On most
systems the epoch is 00:00:00 UTC, January 1, 1970;
a prominent exception being Mac OS Classic which uses 00:00:00, January 1,
1904 in the current local time zone for its epoch.

For measuring time in better granularity than one second, use the
L<Time::HiRes> module from Perl 5.8 onwards (or from CPAN before then), or,
if you have L<gettimeofday(2)>, you may be able to use the
L<C<syscall>|/syscall NUMBER, LIST> interface of Perl.  See L<perlfaq8>
for details.

For date and time processing look at the many related modules on CPAN.
For a comprehensive date and time representation look at the
L<DateTime> module.

=item times
X<times>

=for Pod::Functions return elapsed time for self and child processes

Returns a four-element list giving the user and system times in
seconds for this process and any exited children of this process.

    my ($user,$system,$cuser,$csystem) = times;

In scalar context, L<C<times>|/times> returns C<$user>.

Children's times are only included for terminated children.

Portability issues: L<perlport/times>.

=item tr///

=for Pod::Functions transliterate a string

The transliteration operator.  Same as
L<C<yE<sol>E<sol>E<sol>>|/yE<sol>E<sol>E<sol>>.  See
L<perlop/"Quote-Like Operators">.

=item truncate FILEHANDLE,LENGTH
X<truncate>

=item truncate EXPR,LENGTH

=for Pod::Functions shorten a file

Truncates the file opened on FILEHANDLE, or named by EXPR, to the
specified length.  Raises an exception if truncate isn't implemented
on your system.  Returns true if successful, L<C<undef>|/undef EXPR> on
error.

The behavior is undefined if LENGTH is greater than the length of the
file.

The position in the file of FILEHANDLE is left unchanged.  You may want to
call L<seek|/"seek FILEHANDLE,POSITION,WHENCE"> before writing to the
file.

Portability issues: L<perlport/truncate>.

=item uc EXPR
X<uc> X<uppercase> X<toupper>

=item uc

=for Pod::Functions return upper-case version of a string

Returns an uppercased version of EXPR.  This is the internal function
implementing the C<\U> escape in double-quoted strings.
It does not attempt to do titlecase mapping on initial letters.  See
L<C<ucfirst>|/ucfirst EXPR> for that.

If EXPR is omitted, uses L<C<$_>|perlvar/$_>.

This function behaves the same way under various pragmas, such as in a locale,
as L<C<lc>|/lc EXPR> does.

=item ucfirst EXPR
X<ucfirst> X<uppercase>

=item ucfirst

=for Pod::Functions return a string with just the next letter in upper case

Returns the value of EXPR with the first character in uppercase
(titlecase in Unicode).  This is the internal function implementing
the C<\u> escape in double-quoted strings.

If EXPR is omitted, uses L<C<$_>|perlvar/$_>.

This function behaves the same way under various pragmas, such as in a locale,
as L<C<lc>|/lc EXPR> does.

=item umask EXPR
X<umask>

=item umask

=for Pod::Functions set file creation mode mask

Sets the umask for the process to EXPR and returns the previous value.
If EXPR is omitted, merely returns the current umask.

The Unix permission C<rwxr-x---> is represented as three sets of three
bits, or three octal digits: C<0750> (the leading 0 indicates octal
and isn't one of the digits).  The L<C<umask>|/umask EXPR> value is such
a number representing disabled permissions bits.  The permission (or
"mode") values you pass L<C<mkdir>|/mkdir FILENAME,MASK> or
L<C<sysopen>|/sysopen FILEHANDLE,FILENAME,MODE> are modified by your
umask, so even if you tell
L<C<sysopen>|/sysopen FILEHANDLE,FILENAME,MODE> to create a file with
permissions C<0777>, if your umask is C<0022>, then the file will
actually be created with permissions C<0755>.  If your
L<C<umask>|/umask EXPR> were C<0027> (group can't write; others can't
read, write, or execute), then passing
L<C<sysopen>|/sysopen FILEHANDLE,FILENAME,MODE> C<0666> would create a
file with mode C<0640> (because C<0666 &~ 027> is C<0640>).

Here's some advice: supply a creation mode of C<0666> for regular
files (in L<C<sysopen>|/sysopen FILEHANDLE,FILENAME,MODE>) and one of
C<0777> for directories (in L<C<mkdir>|/mkdir FILENAME,MASK>) and
executable files.  This gives users the freedom of
choice: if they want protected files, they might choose process umasks
of C<022>, C<027>, or even the particularly antisocial mask of C<077>.
Programs should rarely if ever make policy decisions better left to
the user.  The exception to this is when writing files that should be
kept private: mail files, web browser cookies, F<.rhosts> files, and
so on.

If L<umask(2)> is not implemented on your system and you are trying to
restrict access for I<yourself> (i.e., C<< (EXPR & 0700) > 0 >>),
raises an exception.  If L<umask(2)> is not implemented and you are
not trying to restrict access for yourself, returns
L<C<undef>|/undef EXPR>.

Remember that a umask is a number, usually given in octal; it is I<not> a
string of octal digits.  See also L<C<oct>|/oct EXPR>, if all you have
is a string.

Portability issues: L<perlport/umask>.

=item undef EXPR
X<undef> X<undefine>

=item undef

=for Pod::Functions remove a variable or function definition

Undefines the value of EXPR, which must be an lvalue.  Use only on a
scalar value, an array (using C<@@>), a hash (using C<%>), a subroutine
(using C<&>), or a typeglob (using C<*>).  Saying C<undef $hash{$key}>
will probably not do what you expect on most predefined variables or
DBM list values, so don't do that; see L<C<delete>|/delete EXPR>.
Always returns the undefined value.
You can omit the EXPR, in which case nothing is
undefined, but you still get an undefined value that you could, for
instance, return from a subroutine, assign to a variable, or pass as a
parameter.  Examples:

    undef $foo;
    undef $bar{'blurfl'};      # Compare to: delete $bar{'blurfl'};
    undef @@ary;
    undef %hash;
    undef &mysub;
    undef *xyz;       # destroys $xyz, @@xyz, %xyz, &xyz, etc.
    return (wantarray ? (undef, $errmsg) : undef) if $they_blew_it;
    select undef, undef, undef, 0.25;
    my ($x, $y, undef, $z) = foo();    # Ignore third value returned

Note that this is a unary operator, not a list operator.

=item unlink LIST
X<unlink> X<delete> X<remove> X<rm> X<del>

=item unlink

=for Pod::Functions remove one link to a file

Deletes a list of files.  On success, it returns the number of files
it successfully deleted.  On failure, it returns false and sets
L<C<$!>|perlvar/$!> (errno):

    my $unlinked = unlink 'a', 'b', 'c';
    unlink @@goners;
    unlink glob "*.bak";

On error, L<C<unlink>|/unlink LIST> will not tell you which files it
could not remove.
If you want to know which files you could not remove, try them one
at a time:

     foreach my $file ( @@goners ) {
         unlink $file or warn "Could not unlink $file: $!";
     }

Note: L<C<unlink>|/unlink LIST> will not attempt to delete directories
unless you are
superuser and the B<-U> flag is supplied to Perl.  Even if these
conditions are met, be warned that unlinking a directory can inflict
damage on your filesystem.  Finally, using L<C<unlink>|/unlink LIST> on
directories is not supported on many operating systems.  Use
L<C<rmdir>|/rmdir FILENAME> instead.

If LIST is omitted, L<C<unlink>|/unlink LIST> uses L<C<$_>|perlvar/$_>.

=item unpack TEMPLATE,EXPR
X<unpack>

=item unpack TEMPLATE

=for Pod::Functions convert binary structure into normal perl variables

L<C<unpack>|/unpack TEMPLATE,EXPR> does the reverse of
L<C<pack>|/pack TEMPLATE,LIST>: it takes a string
and expands it out into a list of values.
(In scalar context, it returns merely the first value produced.)

If EXPR is omitted, unpacks the L<C<$_>|perlvar/$_> string.
See L<perlpacktut> for an introduction to this function.

The string is broken into chunks described by the TEMPLATE.  Each chunk
is converted separately to a value.  Typically, either the string is a result
of L<C<pack>|/pack TEMPLATE,LIST>, or the characters of the string
represent a C structure of some kind.

The TEMPLATE has the same format as in the
L<C<pack>|/pack TEMPLATE,LIST> function.
Here's a subroutine that does substring:

    sub substr {
        my ($what, $where, $howmuch) = @@_;
        unpack("x$where a$howmuch", $what);
    }

and then there's

    sub ordinal { unpack("W",$_[0]); } # same as ord()

In addition to fields allowed in L<C<pack>|/pack TEMPLATE,LIST>, you may
prefix a field with a %<number> to indicate that
you want a <number>-bit checksum of the items instead of the items
themselves.  Default is a 16-bit checksum.  The checksum is calculated by
summing numeric values of expanded values (for string fields the sum of
C<ord($char)> is taken; for bit fields the sum of zeroes and ones).

For example, the following
computes the same number as the System V sum program:

    my $checksum = do {
        local $/;  # slurp!
        unpack("%32W*", readline) % 65535;
    };

The following efficiently counts the number of set bits in a bit vector:

    my $setbits = unpack("%32b*", $selectmask);

The C<p> and C<P> formats should be used with care.  Since Perl
has no way of checking whether the value passed to
L<C<unpack>|/unpack TEMPLATE,EXPR>
corresponds to a valid memory location, passing a pointer value that's
not known to be valid is likely to have disastrous consequences.

If there are more pack codes or if the repeat count of a field or a group
is larger than what the remainder of the input string allows, the result
is not well defined: the repeat count may be decreased, or
L<C<unpack>|/unpack TEMPLATE,EXPR> may produce empty strings or zeros,
or it may raise an exception.
If the input string is longer than one described by the TEMPLATE,
the remainder of that input string is ignored.

See L<C<pack>|/pack TEMPLATE,LIST> for more examples and notes.

=item unshift ARRAY,LIST
X<unshift>

=for Pod::Functions prepend more elements to the beginning of a list

Does the opposite of a L<C<shift>|/shift ARRAY>.  Or the opposite of a
L<C<push>|/push ARRAY,LIST>,
depending on how you look at it.  Prepends list to the front of the
array and returns the new number of elements in the array.

    unshift(@@ARGV, '-e') unless $ARGV[0] =~ /^-/;

Note the LIST is prepended whole, not one element at a time, so the
prepended elements stay in the same order.  Use
L<C<reverse>|/reverse LIST> to do the reverse.

Starting with Perl 5.14, an experimental feature allowed
L<C<unshift>|/unshift ARRAY,LIST> to take
a scalar expression. This experiment has been deemed unsuccessful, and was
removed as of Perl 5.24.

=item untie VARIABLE
X<untie>

=for Pod::Functions break a tie binding to a variable

Breaks the binding between a variable and a package.
(See L<tie|/tie VARIABLE,CLASSNAME,LIST>.)
Has no effect if the variable is not tied.

=item use Module VERSION LIST
X<use> X<module> X<import>

=item use Module VERSION

=item use Module LIST

=item use Module

=item use VERSION

=for Pod::Functions load in a module at compile time and import its namespace

Imports some semantics into the current package from the named module,
generally by aliasing certain subroutine or variable names into your
package.  It is exactly equivalent to

    BEGIN { require Module; Module->import( LIST ); }

except that Module I<must> be a bareword.
The importation can be made conditional by using the L<if> module.

In the peculiar C<use VERSION> form, VERSION may be either a positive
decimal fraction such as 5.006, which will be compared to
L<C<$]>|perlvar/$]>, or a v-string of the form v5.6.1, which will be
compared to L<C<$^V>|perlvar/$^V> (aka $PERL_VERSION).  An
exception is raised if VERSION is greater than the version of the
current Perl interpreter; Perl will not attempt to parse the rest of the
file.  Compare with L<C<require>|/require VERSION>, which can do a
similar check at run time.
Symmetrically, C<no VERSION> allows you to specify that you want a version
of Perl older than the specified one.

Specifying VERSION as a literal of the form v5.6.1 should generally be
avoided, because it leads to misleading error messages under earlier
versions of Perl (that is, prior to 5.6.0) that do not support this
syntax.  The equivalent numeric version should be used instead.

    use v5.6.1;     # compile time version check
    use 5.6.1;      # ditto
    use 5.006_001;  # ditto; preferred for backwards compatibility

This is often useful if you need to check the current Perl version before
L<C<use>|/use Module VERSION LIST>ing library modules that won't work
with older versions of Perl.
(We try not to do this more than we have to.)

C<use VERSION> also lexically enables all features available in the requested
version as defined by the L<feature> pragma, disabling any features
not in the requested version's feature bundle.  See L<feature>.
Similarly, if the specified Perl version is greater than or equal to
5.12.0, strictures are enabled lexically as
with L<C<use strict>|strict>.  Any explicit use of
C<use strict> or C<no strict> overrides C<use VERSION>, even if it comes
before it.  Later use of C<use VERSION>
will override all behavior of a previous
C<use VERSION>, possibly removing the C<strict> and C<feature> added by
C<use VERSION>.  C<use VERSION> does not
load the F<feature.pm> or F<strict.pm>
files.

The C<BEGIN> forces the L<C<require>|/require VERSION> and
L<C<import>|/import LIST> to happen at compile time.  The
L<C<require>|/require VERSION> makes sure the module is loaded into
memory if it hasn't been yet.  The L<C<import>|/import LIST> is not a
builtin; it's just an ordinary static method
call into the C<Module> package to tell the module to import the list of
features back into the current package.  The module can implement its
L<C<import>|/import LIST> method any way it likes, though most modules
just choose to derive their L<C<import>|/import LIST> method via
inheritance from the C<Exporter> class that is defined in the
L<C<Exporter>|Exporter> module.  See L<Exporter>.  If no
L<C<import>|/import LIST> method can be found, then the call is skipped,
even if there is an AUTOLOAD method.

If you do not want to call the package's L<C<import>|/import LIST>
method (for instance,
to stop your namespace from being altered), explicitly supply the empty list:

    use Module ();

That is exactly equivalent to

    BEGIN { require Module }

If the VERSION argument is present between Module and LIST, then the
L<C<use>|/use Module VERSION LIST> will call the C<VERSION> method in
class Module with the given version as an argument:

    use Module 12.34;

is equivalent to:

    BEGIN { require Module; Module->VERSION(12.34) }

The L<default C<VERSION> method|UNIVERSAL/C<VERSION ( [ REQUIRE ] )>>,
inherited from the L<C<UNIVERSAL>|UNIVERSAL> class, croaks if the given
version is larger than the value of the variable C<$Module::VERSION>.

Again, there is a distinction between omitting LIST (L<C<import>|/import
LIST> called with no arguments) and an explicit empty LIST C<()>
(L<C<import>|/import LIST> not called).  Note that there is no comma
after VERSION!

Because this is a wide-open interface, pragmas (compiler directives)
are also implemented this way.  Some of the currently implemented
pragmas are:

    use constant;
    use diagnostics;
    use integer;
    use sigtrap  qw(SEGV BUS);
    use strict   qw(subs vars refs);
    use subs     qw(afunc blurfl);
    use warnings qw(all);
    use sort     qw(stable _quicksort _mergesort);

Some of these pseudo-modules import semantics into the current
block scope (like L<C<strict>|strict> or L<C<integer>|integer>, unlike
ordinary modules, which import symbols into the current package (which
are effective through the end of the file).

Because L<C<use>|/use Module VERSION LIST> takes effect at compile time,
it doesn't respect the ordinary flow control of the code being compiled.
In particular, putting a L<C<use>|/use Module VERSION LIST> inside the
false branch of a conditional doesn't prevent it
from being processed.  If a module or pragma only needs to be loaded
conditionally, this can be done using the L<if> pragma:

    use if $] < 5.008, "utf8";
    use if WANT_WARNINGS, warnings => qw(all);

There's a corresponding L<C<no>|/no MODULE VERSION LIST> declaration
that unimports meanings imported by L<C<use>|/use Module VERSION LIST>,
i.e., it calls C<< Module->unimport(LIST) >> instead of
L<C<import>|/import LIST>.  It behaves just as L<C<import>|/import LIST>
does with VERSION, an omitted or empty LIST,
or no unimport method being found.

    no integer;
    no strict 'refs';
    no warnings;

Care should be taken when using the C<no VERSION> form of L<C<no>|/no
MODULE VERSION LIST>.  It is
I<only> meant to be used to assert that the running Perl is of a earlier
version than its argument and I<not> to undo the feature-enabling side effects
of C<use VERSION>.

See L<perlmodlib> for a list of standard modules and pragmas.  See L<perlrun>
for the C<-M> and C<-m> command-line options to Perl that give
L<C<use>|/use Module VERSION LIST> functionality from the command-line.

=item utime LIST
X<utime>

=for Pod::Functions set a file's last access and modify times

Changes the access and modification times on each file of a list of
files.  The first two elements of the list must be the NUMERIC access
and modification times, in that order.  Returns the number of files
successfully changed.  The inode change time of each file is set
to the current time.  For example, this code has the same effect as the
Unix L<touch(1)> command when the files I<already exist> and belong to
the user running the program:

    #!/usr/bin/perl
    my $atime = my $mtime = time;
    utime $atime, $mtime, @@ARGV;

Since Perl 5.8.0, if the first two elements of the list are
L<C<undef>|/undef EXPR>,
the L<utime(2)> syscall from your C library is called with a null second
argument.  On most systems, this will set the file's access and
modification times to the current time (i.e., equivalent to the example
above) and will work even on files you don't own provided you have write
permission:

    for my $file (@@ARGV) {
	utime(undef, undef, $file)
	    || warn "Couldn't touch $file: $!";
    }

Under NFS this will use the time of the NFS server, not the time of
the local machine.  If there is a time synchronization problem, the
NFS server and local machine will have different times.  The Unix
L<touch(1)> command will in fact normally use this form instead of the
one shown in the first example.

Passing only one of the first two elements as L<C<undef>|/undef EXPR> is
equivalent to passing a 0 and will not have the effect described when
both are L<C<undef>|/undef EXPR>.  This also triggers an
uninitialized warning.

On systems that support L<futimes(2)>, you may pass filehandles among the
files.  On systems that don't support L<futimes(2)>, passing filehandles raises
an exception.  Filehandles must be passed as globs or glob references to be
recognized; barewords are considered filenames.

Portability issues: L<perlport/utime>.

=item values HASH
X<values>

=item values ARRAY

=for Pod::Functions return a list of the values in a hash

In list context, returns a list consisting of all the values of the named
hash.  In Perl 5.12 or later only, will also return a list of the values of
an array; prior to that release, attempting to use an array argument will
produce a syntax error.  In scalar context, returns the number of values.

Hash entries are returned in an apparently random order.  The actual random
order is specific to a given hash; the exact same series of operations
on two hashes may result in a different order for each hash.  Any insertion
into the hash may change the order, as will any deletion, with the exception
that the most recent key returned by L<C<each>|/each HASH> or
L<C<keys>|/keys HASH> may be deleted without changing the order.  So
long as a given hash is unmodified you may rely on
L<C<keys>|/keys HASH>, L<C<values>|/values HASH> and
L<C<each>|/each HASH> to repeatedly return the same order
as each other.  See L<perlsec/"Algorithmic Complexity Attacks"> for
details on why hash order is randomized.  Aside from the guarantees
provided here the exact details of Perl's hash algorithm and the hash
traversal order are subject to change in any release of Perl.  Tied hashes
may behave differently to Perl's hashes with respect to changes in order on
insertion and deletion of items.

As a side effect, calling L<C<values>|/values HASH> resets the HASH or
ARRAY's internal iterator, see L<C<each>|/each HASH>.  (In particular,
calling L<C<values>|/values HASH> in void context resets the iterator
with no other overhead.  Apart from resetting the iterator,
C<values @@array> in list context is the same as plain C<@@array>.
(We recommend that you use void context C<keys @@array> for this, but
reasoned that taking C<values @@array> out would require more
documentation than leaving it in.)

Note that the values are not copied, which means modifying them will
modify the contents of the hash:

    for (values %hash)      { s/foo/bar/g }  # modifies %hash values
    for (@@hash{keys %hash}) { s/foo/bar/g }  # same

Starting with Perl 5.14, an experimental feature allowed
L<C<values>|/values HASH> to take a
scalar expression. This experiment has been deemed unsuccessful, and was
removed as of Perl 5.24.

To avoid confusing would-be users of your code who are running earlier
versions of Perl with mysterious syntax errors, put this sort of thing at
the top of your file to signal that your code will work I<only> on Perls of
a recent vintage:

    use 5.012;	# so keys/values/each work on arrays

See also L<C<keys>|/keys HASH>, L<C<each>|/each HASH>, and
L<C<sort>|/sort SUBNAME LIST>.

=item vec EXPR,OFFSET,BITS
X<vec> X<bit> X<bit vector>

=for Pod::Functions test or set particular bits in a string

Treats the string in EXPR as a bit vector made up of elements of
width BITS and returns the value of the element specified by OFFSET
as an unsigned integer.  BITS therefore specifies the number of bits
that are reserved for each element in the bit vector.  This must
be a power of two from 1 to 32 (or 64, if your platform supports
that).

If BITS is 8, "elements" coincide with bytes of the input string.

If BITS is 16 or more, bytes of the input string are grouped into chunks
of size BITS/8, and each group is converted to a number as with
L<C<pack>|/pack TEMPLATE,LIST>/L<C<unpack>|/unpack TEMPLATE,EXPR> with
big-endian formats C<n>/C<N> (and analogously for BITS==64).  See
L<C<pack>|/pack TEMPLATE,LIST> for details.

If bits is 4 or less, the string is broken into bytes, then the bits
of each byte are broken into 8/BITS groups.  Bits of a byte are
numbered in a little-endian-ish way, as in C<0x01>, C<0x02>,
C<0x04>, C<0x08>, C<0x10>, C<0x20>, C<0x40>, C<0x80>.  For example,
breaking the single input byte C<chr(0x36)> into two groups gives a list
C<(0x6, 0x3)>; breaking it into 4 groups gives C<(0x2, 0x1, 0x3, 0x0)>.

L<C<vec>|/vec EXPR,OFFSET,BITS> may also be assigned to, in which case
parentheses are needed
to give the expression the correct precedence as in

    vec($image, $max_x * $x + $y, 8) = 3;

If the selected element is outside the string, the value 0 is returned.
If an element off the end of the string is written to, Perl will first
extend the string with sufficiently many zero bytes.   It is an error
to try to write off the beginning of the string (i.e., negative OFFSET).

If the string happens to be encoded as UTF-8 internally (and thus has
the UTF8 flag set), this is ignored by L<C<vec>|/vec EXPR,OFFSET,BITS>,
and it operates on the
internal byte string, not the conceptual character string, even if you
only have characters with values less than 256.

Strings created with L<C<vec>|/vec EXPR,OFFSET,BITS> can also be
manipulated with the logical
operators C<|>, C<&>, C<^>, and C<~>.  These operators will assume a bit
vector operation is desired when both operands are strings.
See L<perlop/"Bitwise String Operators">.

The following code will build up an ASCII string saying C<'PerlPerlPerl'>.
The comments show the string after each step.  Note that this code works
in the same way on big-endian or little-endian machines.

    my $foo = '';
    vec($foo,  0, 32) = 0x5065726C; # 'Perl'

    # $foo eq "Perl" eq "\x50\x65\x72\x6C", 32 bits
    print vec($foo, 0, 8);  # prints 80 == 0x50 == ord('P')

    vec($foo,  2, 16) = 0x5065; # 'PerlPe'
    vec($foo,  3, 16) = 0x726C; # 'PerlPerl'
    vec($foo,  8,  8) = 0x50;   # 'PerlPerlP'
    vec($foo,  9,  8) = 0x65;   # 'PerlPerlPe'
    vec($foo, 20,  4) = 2;      # 'PerlPerlPe'   . "\x02"
    vec($foo, 21,  4) = 7;      # 'PerlPerlPer'
                                   # 'r' is "\x72"
    vec($foo, 45,  2) = 3;      # 'PerlPerlPer'  . "\x0c"
    vec($foo, 93,  1) = 1;      # 'PerlPerlPer'  . "\x2c"
    vec($foo, 94,  1) = 1;      # 'PerlPerlPerl'
                                   # 'l' is "\x6c"

To transform a bit vector into a string or list of 0's and 1's, use these:

    my $bits = unpack("b*", $vector);
    my @@bits = split(//, unpack("b*", $vector));

If you know the exact length in bits, it can be used in place of the C<*>.

Here is an example to illustrate how the bits actually fall in place:

  #!/usr/bin/perl -wl

  print <<'EOT';
                                    0         1         2         3
                     unpack("V",$_) 01234567890123456789012345678901
  ------------------------------------------------------------------
  EOT

  for $w (0..3) {
      $width = 2**$w;
      for ($shift=0; $shift < $width; ++$shift) {
          for ($off=0; $off < 32/$width; ++$off) {
              $str = pack("B*", "0"x32);
              $bits = (1<<$shift);
              vec($str, $off, $width) = $bits;
              $res = unpack("b*",$str);
              $val = unpack("V", $str);
              write;
          }
      }
  }

  format STDOUT =
  vec($_,@@#,@@#) = @@<< == @@######### @@>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
  $off, $width, $bits, $val, $res
  .
  __END__

Regardless of the machine architecture on which it runs, the
example above should print the following table:

                                    0         1         2         3
                     unpack("V",$_) 01234567890123456789012345678901
  ------------------------------------------------------------------
  vec($_, 0, 1) = 1   ==          1 10000000000000000000000000000000
  vec($_, 1, 1) = 1   ==          2 01000000000000000000000000000000
  vec($_, 2, 1) = 1   ==          4 00100000000000000000000000000000
  vec($_, 3, 1) = 1   ==          8 00010000000000000000000000000000
  vec($_, 4, 1) = 1   ==         16 00001000000000000000000000000000
  vec($_, 5, 1) = 1   ==         32 00000100000000000000000000000000
  vec($_, 6, 1) = 1   ==         64 00000010000000000000000000000000
  vec($_, 7, 1) = 1   ==        128 00000001000000000000000000000000
  vec($_, 8, 1) = 1   ==        256 00000000100000000000000000000000
  vec($_, 9, 1) = 1   ==        512 00000000010000000000000000000000
  vec($_,10, 1) = 1   ==       1024 00000000001000000000000000000000
  vec($_,11, 1) = 1   ==       2048 00000000000100000000000000000000
  vec($_,12, 1) = 1   ==       4096 00000000000010000000000000000000
  vec($_,13, 1) = 1   ==       8192 00000000000001000000000000000000
  vec($_,14, 1) = 1   ==      16384 00000000000000100000000000000000
  vec($_,15, 1) = 1   ==      32768 00000000000000010000000000000000
  vec($_,16, 1) = 1   ==      65536 00000000000000001000000000000000
  vec($_,17, 1) = 1   ==     131072 00000000000000000100000000000000
  vec($_,18, 1) = 1   ==     262144 00000000000000000010000000000000
  vec($_,19, 1) = 1   ==     524288 00000000000000000001000000000000
  vec($_,20, 1) = 1   ==    1048576 00000000000000000000100000000000
  vec($_,21, 1) = 1   ==    2097152 00000000000000000000010000000000
  vec($_,22, 1) = 1   ==    4194304 00000000000000000000001000000000
  vec($_,23, 1) = 1   ==    8388608 00000000000000000000000100000000
  vec($_,24, 1) = 1   ==   16777216 00000000000000000000000010000000
  vec($_,25, 1) = 1   ==   33554432 00000000000000000000000001000000
  vec($_,26, 1) = 1   ==   67108864 00000000000000000000000000100000
  vec($_,27, 1) = 1   ==  134217728 00000000000000000000000000010000
  vec($_,28, 1) = 1   ==  268435456 00000000000000000000000000001000
  vec($_,29, 1) = 1   ==  536870912 00000000000000000000000000000100
  vec($_,30, 1) = 1   == 1073741824 00000000000000000000000000000010
  vec($_,31, 1) = 1   == 2147483648 00000000000000000000000000000001
  vec($_, 0, 2) = 1   ==          1 10000000000000000000000000000000
  vec($_, 1, 2) = 1   ==          4 00100000000000000000000000000000
  vec($_, 2, 2) = 1   ==         16 00001000000000000000000000000000
  vec($_, 3, 2) = 1   ==         64 00000010000000000000000000000000
  vec($_, 4, 2) = 1   ==        256 00000000100000000000000000000000
  vec($_, 5, 2) = 1   ==       1024 00000000001000000000000000000000
  vec($_, 6, 2) = 1   ==       4096 00000000000010000000000000000000
  vec($_, 7, 2) = 1   ==      16384 00000000000000100000000000000000
  vec($_, 8, 2) = 1   ==      65536 00000000000000001000000000000000
  vec($_, 9, 2) = 1   ==     262144 00000000000000000010000000000000
  vec($_,10, 2) = 1   ==    1048576 00000000000000000000100000000000
  vec($_,11, 2) = 1   ==    4194304 00000000000000000000001000000000
  vec($_,12, 2) = 1   ==   16777216 00000000000000000000000010000000
  vec($_,13, 2) = 1   ==   67108864 00000000000000000000000000100000
  vec($_,14, 2) = 1   ==  268435456 00000000000000000000000000001000
  vec($_,15, 2) = 1   == 1073741824 00000000000000000000000000000010
  vec($_, 0, 2) = 2   ==          2 01000000000000000000000000000000
  vec($_, 1, 2) = 2   ==          8 00010000000000000000000000000000
  vec($_, 2, 2) = 2   ==         32 00000100000000000000000000000000
  vec($_, 3, 2) = 2   ==        128 00000001000000000000000000000000
  vec($_, 4, 2) = 2   ==        512 00000000010000000000000000000000
  vec($_, 5, 2) = 2   ==       2048 00000000000100000000000000000000
  vec($_, 6, 2) = 2   ==       8192 00000000000001000000000000000000
  vec($_, 7, 2) = 2   ==      32768 00000000000000010000000000000000
  vec($_, 8, 2) = 2   ==     131072 00000000000000000100000000000000
  vec($_, 9, 2) = 2   ==     524288 00000000000000000001000000000000
  vec($_,10, 2) = 2   ==    2097152 00000000000000000000010000000000
  vec($_,11, 2) = 2   ==    8388608 00000000000000000000000100000000
  vec($_,12, 2) = 2   ==   33554432 00000000000000000000000001000000
  vec($_,13, 2) = 2   ==  134217728 00000000000000000000000000010000
  vec($_,14, 2) = 2   ==  536870912 00000000000000000000000000000100
  vec($_,15, 2) = 2   == 2147483648 00000000000000000000000000000001
  vec($_, 0, 4) = 1   ==          1 10000000000000000000000000000000
  vec($_, 1, 4) = 1   ==         16 00001000000000000000000000000000
  vec($_, 2, 4) = 1   ==        256 00000000100000000000000000000000
  vec($_, 3, 4) = 1   ==       4096 00000000000010000000000000000000
  vec($_, 4, 4) = 1   ==      65536 00000000000000001000000000000000
  vec($_, 5, 4) = 1   ==    1048576 00000000000000000000100000000000
  vec($_, 6, 4) = 1   ==   16777216 00000000000000000000000010000000
  vec($_, 7, 4) = 1   ==  268435456 00000000000000000000000000001000
  vec($_, 0, 4) = 2   ==          2 01000000000000000000000000000000
  vec($_, 1, 4) = 2   ==         32 00000100000000000000000000000000
  vec($_, 2, 4) = 2   ==        512 00000000010000000000000000000000
  vec($_, 3, 4) = 2   ==       8192 00000000000001000000000000000000
  vec($_, 4, 4) = 2   ==     131072 00000000000000000100000000000000
  vec($_, 5, 4) = 2   ==    2097152 00000000000000000000010000000000
  vec($_, 6, 4) = 2   ==   33554432 00000000000000000000000001000000
  vec($_, 7, 4) = 2   ==  536870912 00000000000000000000000000000100
  vec($_, 0, 4) = 4   ==          4 00100000000000000000000000000000
  vec($_, 1, 4) = 4   ==         64 00000010000000000000000000000000
  vec($_, 2, 4) = 4   ==       1024 00000000001000000000000000000000
  vec($_, 3, 4) = 4   ==      16384 00000000000000100000000000000000
  vec($_, 4, 4) = 4   ==     262144 00000000000000000010000000000000
  vec($_, 5, 4) = 4   ==    4194304 00000000000000000000001000000000
  vec($_, 6, 4) = 4   ==   67108864 00000000000000000000000000100000
  vec($_, 7, 4) = 4   == 1073741824 00000000000000000000000000000010
  vec($_, 0, 4) = 8   ==          8 00010000000000000000000000000000
  vec($_, 1, 4) = 8   ==        128 00000001000000000000000000000000
  vec($_, 2, 4) = 8   ==       2048 00000000000100000000000000000000
  vec($_, 3, 4) = 8   ==      32768 00000000000000010000000000000000
  vec($_, 4, 4) = 8   ==     524288 00000000000000000001000000000000
  vec($_, 5, 4) = 8   ==    8388608 00000000000000000000000100000000
  vec($_, 6, 4) = 8   ==  134217728 00000000000000000000000000010000
  vec($_, 7, 4) = 8   == 2147483648 00000000000000000000000000000001
  vec($_, 0, 8) = 1   ==          1 10000000000000000000000000000000
  vec($_, 1, 8) = 1   ==        256 00000000100000000000000000000000
  vec($_, 2, 8) = 1   ==      65536 00000000000000001000000000000000
  vec($_, 3, 8) = 1   ==   16777216 00000000000000000000000010000000
  vec($_, 0, 8) = 2   ==          2 01000000000000000000000000000000
  vec($_, 1, 8) = 2   ==        512 00000000010000000000000000000000
  vec($_, 2, 8) = 2   ==     131072 00000000000000000100000000000000
  vec($_, 3, 8) = 2   ==   33554432 00000000000000000000000001000000
  vec($_, 0, 8) = 4   ==          4 00100000000000000000000000000000
  vec($_, 1, 8) = 4   ==       1024 00000000001000000000000000000000
  vec($_, 2, 8) = 4   ==     262144 00000000000000000010000000000000
  vec($_, 3, 8) = 4   ==   67108864 00000000000000000000000000100000
  vec($_, 0, 8) = 8   ==          8 00010000000000000000000000000000
  vec($_, 1, 8) = 8   ==       2048 00000000000100000000000000000000
  vec($_, 2, 8) = 8   ==     524288 00000000000000000001000000000000
  vec($_, 3, 8) = 8   ==  134217728 00000000000000000000000000010000
  vec($_, 0, 8) = 16  ==         16 00001000000000000000000000000000
  vec($_, 1, 8) = 16  ==       4096 00000000000010000000000000000000
  vec($_, 2, 8) = 16  ==    1048576 00000000000000000000100000000000
  vec($_, 3, 8) = 16  ==  268435456 00000000000000000000000000001000
  vec($_, 0, 8) = 32  ==         32 00000100000000000000000000000000
  vec($_, 1, 8) = 32  ==       8192 00000000000001000000000000000000
  vec($_, 2, 8) = 32  ==    2097152 00000000000000000000010000000000
  vec($_, 3, 8) = 32  ==  536870912 00000000000000000000000000000100
  vec($_, 0, 8) = 64  ==         64 00000010000000000000000000000000
  vec($_, 1, 8) = 64  ==      16384 00000000000000100000000000000000
  vec($_, 2, 8) = 64  ==    4194304 00000000000000000000001000000000
  vec($_, 3, 8) = 64  == 1073741824 00000000000000000000000000000010
  vec($_, 0, 8) = 128 ==        128 00000001000000000000000000000000
  vec($_, 1, 8) = 128 ==      32768 00000000000000010000000000000000
  vec($_, 2, 8) = 128 ==    8388608 00000000000000000000000100000000
  vec($_, 3, 8) = 128 == 2147483648 00000000000000000000000000000001

=item wait
X<wait>

=for Pod::Functions wait for any child process to die

Behaves like L<wait(2)> on your system: it waits for a child
process to terminate and returns the pid of the deceased process, or
C<-1> if there are no child processes.  The status is returned in
L<C<$?>|perlvar/$?> and
L<C<${^CHILD_ERROR_NATIVE}>|perlvar/${^CHILD_ERROR_NATIVE}>.
Note that a return value of C<-1> could mean that child processes are
being automatically reaped, as described in L<perlipc>.

If you use L<C<wait>|/wait> in your handler for
L<C<$SIG{CHLD}>|perlvar/%SIG>, it may accidentally wait for the child
created by L<C<qx>|/qxE<sol>STRINGE<sol>> or L<C<system>|/system LIST>.
See L<perlipc> for details.

Portability issues: L<perlport/wait>.

=item waitpid PID,FLAGS
X<waitpid>

=for Pod::Functions wait for a particular child process to die

Waits for a particular child process to terminate and returns the pid of
the deceased process, or C<-1> if there is no such child process.  A
non-blocking wait (with L<WNOHANG|POSIX/C<WNOHANG>> in FLAGS) can return 0 if
there are child processes matching PID but none have terminated yet.
The status is returned in L<C<$?>|perlvar/$?> and
L<C<${^CHILD_ERROR_NATIVE}>|perlvar/${^CHILD_ERROR_NATIVE}>.

A PID of C<0> indicates to wait for any child process whose process group ID is
equal to that of the current process.  A PID of less than C<-1> indicates to
wait for any child process whose process group ID is equal to -PID.  A PID of
C<-1> indicates to wait for any child process.

If you say

    use POSIX ":sys_wait_h";

    my $kid;
    do {
        $kid = waitpid(-1, WNOHANG);
    } while $kid > 0;

or

    1 while waitpid(-1, WNOHANG) > 0;

then you can do a non-blocking wait for all pending zombie processes (see
L<POSIX/WAIT>).
Non-blocking wait is available on machines supporting either the
L<waitpid(2)> or L<wait4(2)> syscalls.  However, waiting for a particular
pid with FLAGS of C<0> is implemented everywhere.  (Perl emulates the
system call by remembering the status values of processes that have
exited but have not been harvested by the Perl script yet.)

Note that on some systems, a return value of C<-1> could mean that child
processes are being automatically reaped.  See L<perlipc> for details,
and for other examples.

Portability issues: L<perlport/waitpid>.

=item wantarray
X<wantarray> X<context>

=for Pod::Functions get void vs scalar vs list context of current subroutine call

Returns true if the context of the currently executing subroutine or
L<C<eval>|/eval EXPR> is looking for a list value.  Returns false if the
context is
looking for a scalar.  Returns the undefined value if the context is
looking for no value (void context).

    return unless defined wantarray; # don't bother doing more
    my @@a = complex_calculation();
    return wantarray ? @@a : "@@a";

L<C<wantarray>|/wantarray>'s result is unspecified in the top level of a file,
in a C<BEGIN>, C<UNITCHECK>, C<CHECK>, C<INIT> or C<END> block, or
in a C<DESTROY> method.

This function should have been named wantlist() instead.

=item warn LIST
X<warn> X<warning> X<STDERR>

=for Pod::Functions print debugging info

Prints the value of LIST to STDERR.  If the last element of LIST does
not end in a newline, it appends the same file/line number text as
L<C<die>|/die LIST> does.

If the output is empty and L<C<$@@>|perlvar/$@@> already contains a value
(typically from a previous eval) that value is used after appending
C<"\t...caught"> to L<C<$@@>|perlvar/$@@>.  This is useful for staying
almost, but not entirely similar to L<C<die>|/die LIST>.

If L<C<$@@>|perlvar/$@@> is empty, then the string
C<"Warning: Something's wrong"> is used.

No message is printed if there is a L<C<$SIG{__WARN__}>|perlvar/%SIG>
handler
installed.  It is the handler's responsibility to deal with the message
as it sees fit (like, for instance, converting it into a
L<C<die>|/die LIST>).  Most
handlers must therefore arrange to actually display the
warnings that they are not prepared to deal with, by calling
L<C<warn>|/warn LIST>
again in the handler.  Note that this is quite safe and will not
produce an endless loop, since C<__WARN__> hooks are not called from
inside one.

You will find this behavior is slightly different from that of
L<C<$SIG{__DIE__}>|perlvar/%SIG> handlers (which don't suppress the
error text, but can instead call L<C<die>|/die LIST> again to change
it).

Using a C<__WARN__> handler provides a powerful way to silence all
warnings (even the so-called mandatory ones).  An example:

    # wipe out *all* compile-time warnings
    BEGIN { $SIG{'__WARN__'} = sub { warn $_[0] if $DOWARN } }
    my $foo = 10;
    my $foo = 20;          # no warning about duplicate my $foo,
                           # but hey, you asked for it!
    # no compile-time or run-time warnings before here
    $DOWARN = 1;

    # run-time warnings enabled after here
    warn "\$foo is alive and $foo!";     # does show up

See L<perlvar> for details on setting L<C<%SIG>|perlvar/%SIG> entries
and for more
examples.  See the L<Carp> module for other kinds of warnings using its
C<carp> and C<cluck> functions.

=item write FILEHANDLE
X<write>

=item write EXPR

=item write

=for Pod::Functions print a picture record

Writes a formatted record (possibly multi-line) to the specified FILEHANDLE,
using the format associated with that file.  By default the format for
a file is the one having the same name as the filehandle, but the
format for the current output channel (see the
L<C<select>|/select FILEHANDLE> function) may be set explicitly by
assigning the name of the format to the L<C<$~>|perlvar/$~> variable.

Top of form processing is handled automatically:  if there is insufficient
room on the current page for the formatted record, the page is advanced by
writing a form feed and a special top-of-page
format is used to format the new
page header before the record is written.  By default, the top-of-page
format is the name of the filehandle with C<_TOP> appended, or C<top>
in the current package if the former does not exist.  This would be a
problem with autovivified filehandles, but it may be dynamically set to the
format of your choice by assigning the name to the L<C<$^>|perlvar/$^>
variable while that filehandle is selected.  The number of lines
remaining on the current page is in variable L<C<$->|perlvar/$->, which
can be set to C<0> to force a new page.

If FILEHANDLE is unspecified, output goes to the current default output
channel, which starts out as STDOUT but may be changed by the
L<C<select>|/select FILEHANDLE> operator.  If the FILEHANDLE is an EXPR,
then the expression
is evaluated and the resulting string is used to look up the name of
the FILEHANDLE at run time.  For more on formats, see L<perlform>.

Note that write is I<not> the opposite of
L<C<read>|/read FILEHANDLE,SCALAR,LENGTH,OFFSET>.  Unfortunately.

=item y///

=for Pod::Functions transliterate a string

The transliteration operator.  Same as
L<C<trE<sol>E<sol>E<sol>>|/trE<sol>E<sol>E<sol>>.  See
L<perlop/"Quote-Like Operators">.

=back

=head2 Non-function Keywords by Cross-reference

=head3 perldata

=over

=item __DATA__

=item __END__

These keywords are documented in L<perldata/"Special Literals">.

=back

=head3 perlmod

=over

=item BEGIN

=item CHECK

=item END

=item INIT

=item UNITCHECK

These compile phase keywords are documented in L<perlmod/"BEGIN, UNITCHECK, CHECK, INIT and END">.

=back

=head3 perlobj

=over

=item DESTROY

This method keyword is documented in L<perlobj/"Destructors">.

=back

=head3 perlop

=over

=item and

=item cmp

=item eq

=item ge

=item gt

=item le

=item lt

=item ne

=item not

=item or

=item x

=item xor

These operators are documented in L<perlop>.

=back

=head3 perlsub

=over

=item AUTOLOAD

This keyword is documented in L<perlsub/"Autoloading">.

=back

=head3 perlsyn

=over

=item else

=item elsif

=item for

=item foreach

=item if

=item unless

=item until

=item while

These flow-control keywords are documented in L<perlsyn/"Compound Statements">.

=item elseif

The "else if" keyword is spelled C<elsif> in Perl.  There's no C<elif>
or C<else if> either.  It does parse C<elseif>, but only to warn you
about not using it.

See the documentation for flow-control keywords in L<perlsyn/"Compound
Statements">.

=back

=over

=item default

=item given

=item when

These flow-control keywords related to the experimental switch feature are
documented in L<perlsyn/"Switch Statements">.

=back

=cut
@


1.20
log
@Update to perl 5.20.3

OK bluhm@@
@
text
@d17 1
a17 1
contexts for its arguments.  If it does both, scalar arguments 
d19 4
a22 3
be one such list argument.  For instance, splice() has three scalar
arguments followed by a list, whereas gethostbyname() has four scalar
arguments.
d34 1
a34 1
parentheses.)  If you use parentheses, the simple but occasionally 
d47 2
a48 2
If you run Perl with the B<-w> switch it can warn you about this.  For
example, the third line above produces:
d54 3
a56 3
unary nor list operators.  These include such functions as C<time>
and C<endpwent>.  For example, C<time+86_400> always means
C<time() + 86_400>.
d79 1
a79 1
there, not the list construction version of the comma.  That means it
d82 10
a91 7
In general, functions in Perl that serve as wrappers for system calls ("syscalls")
of the same name (like chown(2), fork(2), closedir(2), etc.) return
true when they succeed and C<undef> otherwise, as is usually mentioned
in the descriptions below.  This is different from the C interfaces,
which return C<-1> on failure.  Exceptions to this rule include C<wait>,
C<waitpid>, and C<syscall>.  System calls also set the special C<$!>
variable on failure.  Other functions do not, except accidentally.
d116 20
a135 6
C<chomp>, C<chop>, C<chr>, C<crypt>, C<fc>, C<hex>, C<index>, C<lc>,
C<lcfirst>, C<length>, C<oct>, C<ord>, C<pack>, C<q//>, C<qq//>, C<reverse>,
C<rindex>, C<sprintf>, C<substr>, C<tr///>, C<uc>, C<ucfirst>, C<y///>

C<fc> is available only if the C<"fc"> feature is enabled or if it is
prefixed with C<CORE::>.  The C<"fc"> feature is enabled automatically
a137 1

d143 6
a148 1
C<m//>, C<pos>, C<qr//>, C<quotemeta>, C<s///>, C<split>, C<study>
d155 4
a158 2
C<abs>, C<atan2>, C<cos>, C<exp>, C<hex>, C<int>, C<log>, C<oct>, C<rand>,
C<sin>, C<sqrt>, C<srand>
d165 4
a168 1
C<each>, C<keys>, C<pop>, C<push>, C<shift>, C<splice>, C<unshift>, C<values>
d175 4
a178 1
C<grep>, C<join>, C<map>, C<qw//>, C<reverse>, C<sort>, C<unpack>
d185 3
a187 1
C<delete>, C<each>, C<exists>, C<keys>, C<values>
d194 25
a218 8
C<binmode>, C<close>, C<closedir>, C<dbmclose>, C<dbmopen>, C<die>, C<eof>,
C<fileno>, C<flock>, C<format>, C<getc>, C<print>, C<printf>, C<read>,
C<readdir>, C<readline> C<rewinddir>, C<say>, C<seek>, C<seekdir>, C<select>,
C<syscall>, C<sysread>, C<sysseek>, C<syswrite>, C<tell>, C<telldir>,
C<truncate>, C<warn>, C<write>

C<say> is available only if the C<"say"> feature is enabled or if it is
prefixed with C<CORE::>.  The C<"say"> feature is enabled automatically
d225 7
a231 2
C<pack>, C<read>, C<syscall>, C<sysread>, C<sysseek>, C<syswrite>, C<unpack>,
C<vec>
d238 14
a251 4
C<-I<X>>, C<chdir>, C<chmod>, C<chown>, C<chroot>, C<fcntl>, C<glob>,
C<ioctl>, C<link>, C<lstat>, C<mkdir>, C<open>, C<opendir>,
C<readlink>, C<rename>, C<rmdir>, C<stat>, C<symlink>, C<sysopen>,
C<umask>, C<unlink>, C<utime>
d258 17
a274 9
C<break>, C<caller>, C<continue>, C<die>, C<do>,
C<dump>, C<eval>, C<evalbytes> C<exit>,
C<__FILE__>, C<goto>, C<last>, C<__LINE__>, C<next>, C<__PACKAGE__>,
C<redo>, C<return>, C<sub>, C<__SUB__>, C<wantarray>

C<break> is available only if you enable the experimental C<"switch">
feature or use the C<CORE::> prefix.  The C<"switch"> feature also enables
the C<default>, C<given> and C<when> statements, which are documented in
L<perlsyn/"Switch Statements">.  The C<"switch"> feature is enabled
d276 14
a289 8
scope.  In Perl v5.14 and earlier, C<continue> required the C<"switch">
feature, like the other keywords.

C<evalbytes> is only available with the C<"evalbytes"> feature (see
L<feature>) or if prefixed with C<CORE::>.  C<__SUB__> is only available
with the C<"current_sub"> feature or if prefixed with C<CORE::>.  Both
the C<"evalbytes"> and C<"current_sub"> features are enabled automatically
with a C<use v5.16> (or higher) declaration in the current scope.
d295 11
a305 5
C<caller>, C<import>, C<local>, C<my>, C<our>, C<package>, C<state>, C<use>

C<state> is available only if the C<"state"> feature is enabled or if it is
prefixed with C<CORE::>.  The C<"state"> feature is enabled automatically
with a C<use v5.10> (or higher) declaration in the current scope.
d311 4
a314 1
C<defined>, C<formline>, C<lock>, C<prototype>, C<reset>, C<scalar>, C<undef>
d321 9
a329 4
C<alarm>, C<exec>, C<fork>, C<getpgrp>, C<getppid>, C<getpriority>, C<kill>,
C<pipe>, C<qx//>, C<readpipe>, C<setpgrp>,
C<setpriority>, C<sleep>, C<system>,
C<times>, C<wait>, C<waitpid>
d336 3
a338 1
C<do>, C<import>, C<no>, C<package>, C<require>, C<use>
d345 5
a349 2
C<bless>, C<dbmclose>, C<dbmopen>, C<package>, C<ref>, C<tie>, C<tied>,
C<untie>, C<use>
d356 12
a367 3
C<accept>, C<bind>, C<connect>, C<getpeername>, C<getsockname>,
C<getsockopt>, C<listen>, C<recv>, C<send>, C<setsockopt>, C<shutdown>,
C<socket>, C<socketpair>
d374 8
a381 2
C<msgctl>, C<msgget>, C<msgrcv>, C<msgsnd>, C<semctl>, C<semget>, C<semop>,
C<shmctl>, C<shmget>, C<shmread>, C<shmwrite>
d388 7
a394 3
C<endgrent>, C<endhostent>, C<endnetent>, C<endpwent>, C<getgrent>,
C<getgrgid>, C<getgrnam>, C<getlogin>, C<getpwent>, C<getpwnam>,
C<getpwuid>, C<setgrent>, C<setpwent>
d401 14
a414 5
C<endprotoent>, C<endservent>, C<gethostbyaddr>, C<gethostbyname>,
C<gethostent>, C<getnetbyaddr>, C<getnetbyname>, C<getnetent>,
C<getprotobyname>, C<getprotobynumber>, C<getprotoent>,
C<getservbyname>, C<getservbyport>, C<getservent>, C<sethostent>,
C<setnetent>, C<setprotoent>, C<setservent>
d421 2
a422 1
C<gmtime>, C<localtime>, C<time>, C<times>
d445 52
a496 17
C<-X>, C<binmode>, C<chmod>, C<chown>, C<chroot>, C<crypt>,
C<dbmclose>, C<dbmopen>, C<dump>, C<endgrent>, C<endhostent>,
C<endnetent>, C<endprotoent>, C<endpwent>, C<endservent>, C<exec>,
C<fcntl>, C<flock>, C<fork>, C<getgrent>, C<getgrgid>, C<gethostbyname>,
C<gethostent>, C<getlogin>, C<getnetbyaddr>, C<getnetbyname>, C<getnetent>,
C<getppid>, C<getpgrp>, C<getpriority>, C<getprotobynumber>,
C<getprotoent>, C<getpwent>, C<getpwnam>, C<getpwuid>,
C<getservbyport>, C<getservent>, C<getsockopt>, C<glob>, C<ioctl>,
C<kill>, C<link>, C<lstat>, C<msgctl>, C<msgget>, C<msgrcv>,
C<msgsnd>, C<open>, C<pipe>, C<readlink>, C<rename>, C<select>, C<semctl>,
C<semget>, C<semop>, C<setgrent>, C<sethostent>, C<setnetent>,
C<setpgrp>, C<setpriority>, C<setprotoent>, C<setpwent>,
C<setservent>, C<setsockopt>, C<shmctl>, C<shmget>, C<shmread>,
C<shmwrite>, C<socket>, C<socketpair>,
C<stat>, C<symlink>, C<syscall>, C<sysopen>, C<system>,
C<times>, C<truncate>, C<umask>, C<unlink>,
C<utime>, C<wait>, C<waitpid>
d503 1
a503 1
=over 
d518 1
a518 1
operator takes one argument, either a filename, a filehandle, or a dirhandle, 
d520 6
a525 5
argument is omitted, tests C<$_>, except for C<-t>, which tests STDIN.
Unless otherwise documented, it returns C<1> for true and C<''> for false.
If the file doesn't exist or can't be examined, it returns C<undef> and
sets C<$!> (errno).  Despite the funny names, precedence is the same as any
other named unary operator.  The operator may be any of:
d598 10
a607 8
may thus need to do a stat() to determine the actual mode of the file,
or temporarily set their effective uid to something else.

If you are using ACLs, there is a pragma called C<filetest> that may
produce more accurate results than the bare stat() mode bits.
When under C<use filetest 'access'> the above-mentioned filetests
test whether the permission can(not) be granted using the
access(2) family of system calls.  Also note that the C<-x> and C<-X> may
d613 2
a614 2
in effect.  Read the documentation for the C<filetest> pragma for more
information.
d616 1
a616 1
The C<-T> and C<-B> switches work as follows.  The first block or so of
d618 1
a618 1
characters.  If, so it's a C<-T> file.  Otherwise, that same portion of
d633 9
a641 7
If any of the file tests (or either the C<stat> or C<lstat> operator) is given
the special filehandle consisting of a solitary underline, then the stat
structure of the previous file test (or stat operator) is used, saving
a system call.  (This doesn't work with C<-t>, and you need to remember
that lstat() and C<-l> leave values in the stat structure for the
symbolic link, not the real file.)  (Also, if the stat buffer was filled by
an C<lstat> call, C<-T> and C<-B> will reset it with the results of C<stat _>).
d677 1
a677 1
If VALUE is omitted, uses C<$_>.
d684 1
a684 1
Accepts an incoming socket connect, just as accept(2) 
d690 1
a690 1
value of $^F.  See L<perlvar/$^F>.
d703 4
a706 4
specified, the value stored in C<$_> is used.  (On some machines,
unfortunately, the elapsed time may be up to one second less or more
than you specified because of how seconds are counted, and process
scheduling may delay the delivery of the signal even further.)
d713 1
a713 1
For delays of finer granularity than one second, the Time::HiRes module
d715 19
a733 13
distribution) provides ualarm().  You may also use Perl's four-argument
version of select() leaving the first three arguments undefined, or you
might be able to use the C<syscall> interface to access setitimer(2) if
your system supports it.  See L<perlfaq8> for details.

It is usually a mistake to intermix C<alarm> and C<sleep> calls, because
C<sleep> may be internally implemented on your system with C<alarm>.

If you want to use C<alarm> to time out a system call you need to use an
C<eval>/C<die> pair.  You can't rely on the alarm causing the system call to
fail with C<$!> set to C<EINTR> because Perl sets up signal handlers to
restart system calls on some systems.  Using C<eval>/C<die> always works,
modulo the caveats given in L<perlipc/"Signals">.
d738 1
a738 1
        $nread = sysread SOCKET, $buffer, $size;
d760 3
a762 2
For the tangent operation, you may use the C<Math::Trig::tan>
function, or use the familiar relation:
d767 1
a767 1
your atan2(3) manpage for more information.
d776 1
a776 1
Binds a network address to a socket, just as bind(2)
d792 2
a793 7
otherwise it returns C<undef> and sets C<$!> (errno).

On some systems (in general, DOS- and Windows-based systems) binmode()
is necessary when you're not working with a text file.  For the sake
of portability it is a good idea always to use it when appropriate,
and never to use it when it isn't appropriate.  Also, people can
set their I/O to be by default UTF8-encoded Unicode, not bytes.
d795 10
a804 2
In other words: regardless of platform, use binmode() on binary data,
like images, for example.
d820 2
a821 2
form C<:...>, are called I/O I<layers>.  The C<open> pragma can be used to
establish default I/O layers.  See L<open>.
d823 7
a829 6
I<The LAYER parameter of the binmode() function is described as "DISCIPLINE"
in "Programming Perl, 3rd Edition".  However, since the publishing of this
book, by many known as "Camel III", the consensus of the naming of this
functionality has moved from "discipline" to "layer".  All documentation
of this version of Perl therefore refers to "layers" rather than to
"disciplines".  Now back to the regularly scheduled documentation...>
d836 6
a841 5
In general, binmode() should be called after open() but before any I/O
is done on the filehandle.  Calling binmode() normally flushes any
pending buffered output data (and perhaps pending input data) on the
handle.  An exception to this is the C<:encoding> layer that
changes the default character encoding of the handle; see L</open>.
d843 1
a843 1
mid-stream, and it doesn't flush the stream.  The C<:encoding>
d861 23
a883 16
two characters C<\cM\cJ>.  That means that if you don't use binmode() on
these systems, C<\cM\cJ> sequences on disk will be converted to C<\n> on
input, and any C<\n> in your program will be converted back to C<\cM\cJ> on
output.  This is what you want for text files, but it can be disastrous for
binary files.

Another consequence of using binmode() (on some systems) is that
special end-of-file markers will be seen as part of the data stream.
For systems from the Microsoft family this means that, if your binary
data contain C<\cZ>, the I/O subsystem will regard it as the end of
the file, unless you use binmode().

binmode() is important not only for readline() and print() operations,
but also when using read(), seek(), sysread(), syswrite() and tell()
(see L<perlport> for more details).  See the C<$/> and C<$\> variables
in L<perlvar> for how to manually set your input and output
d897 5
a901 4
is used.  Because a C<bless> is often the last thing in a constructor,
it returns the reference for convenience.  Always use the two-argument
version if a derived class might inherit the function doing the blessing.
See L<perlobj> for more about the blessing (and blessings) of objects.
d905 1
a905 1
Perl pragmata.  Builtin types have all uppercase names.  To prevent
d915 1
a915 1
Break out of a C<given()> block.
d917 6
a922 4
This keyword is enabled by the C<"switch"> feature; see L<feature> for
more information on C<"switch">.  You can also access it by prefixing it
with C<CORE::>.  Alternatively, include a C<use v5.10> or later to the
current scope.
d933 5
a937 5
we're in a subroutine or C<eval> or C<require>) and the undefined value
otherwise.  caller never returns XS subs and they are skipped.  The next pure
perl sub will appear instead of the XS
sub in caller's return values.  In list
context, caller returns
d939 2
a940 2
    # 0         1          2
    ($package, $filename, $line) = caller;
d947 1
a947 1
    ($package, $filename, $line, $subroutine, $hasargs,
d951 1
a951 1
     = caller($i);
d955 12
a966 10
the frame is not a subroutine call, but an C<eval>.  In such a case
additional elements $evaltext and
C<$is_require> are set: C<$is_require> is true if the frame is created by a
C<require> or C<use> statement, $evaltext contains the text of the
C<eval EXPR> statement.  In particular, for an C<eval BLOCK> statement,
$subroutine is C<(eval)>, but $evaltext is undefined.  (Note also that
each C<use> statement creates a C<require> frame inside an C<eval EXPR>
frame.)  $subroutine may also be C<(unknown)> if this particular
subroutine happens to have been deleted from the symbol table.
C<$hasargs> is true if a new instance of C<@@_> was set up for the frame.
d968 11
a978 8
compiled with.  C<$hints> corresponds to C<$^H>, and C<$bitmask>
corresponds to C<${^WARNING_BITS}>.  The
C<$hints> and C<$bitmask> values are subject
to change between versions of Perl, and are not meant for external use.

C<$hinthash> is a reference to a hash containing the value of C<%^H> when the
caller was compiled, or C<undef> if C<%^H> was empty.  Do not modify the values
of this hash, as they are the actual values stored in the optree.
d986 5
a990 4
C<caller> had a chance to get the information.  That means that C<caller(N)>
might not return information about the call frame you expect it to, for
C<< N > 1 >>.  In particular, C<@@DB::args> might have information from the
previous time C<caller> was called.
d994 13
a1006 11
particular, as C<@@_> contains aliases to the caller's arguments, Perl does
not take a copy of C<@@_>, so C<@@DB::args> will contain modifications the
subroutine makes to C<@@_> or its contents, not the original values at call
time.  C<@@DB::args>, like C<@@_>, does not hold explicit references to its
elements, so under certain cases its elements may have become freed and
reallocated for other variables or temporary values.  Finally, a side effect
of the current implementation is that the effects of C<shift @@_> can
I<normally> be undone (but not C<pop @@_> or other splicing, I<and> not if a
reference to C<@@_> has been taken, I<and> subject to the caveat about reallocated
elements), so C<@@DB::args> is actually a hybrid of the current state and
initial state of C<@@_>.  Buyer beware.
d1024 4
a1027 3
variable C<$ENV{SYS$LOGIN}> is also checked, and used if it is set.)  If
neither is set, C<chdir> does nothing.  It returns true on success,
false otherwise.  See the example under C<die>.
d1029 2
a1030 2
On systems that support fchdir(2), you may pass a filehandle or
directory handle as the argument.  On systems that don't support fchdir(2),
d1042 2
a1043 1
successfully changed.  See also L</oct> if all you have is a string.
d1045 1
a1045 1
    $cnt = chmod 0755, "foo", "bar";
d1047 4
a1050 4
    $mode = "0644"; chmod $mode, "foo";      # !!! sets mode to
                                             # --w----r-T
    $mode = "0644"; chmod oct($mode), "foo"; # this is better
    $mode = 0644;   chmod $mode, "foo";      # this is best
d1052 2
a1053 2
On systems that support fchmod(2), you may pass filehandles among the
files.  On systems that don't support fchmod(2), passing filehandles raises
d1061 2
a1062 2
You can also import the symbolic C<S_I*> constants from the C<Fcntl>
module:
d1079 4
a1082 3
This safer version of L</chop> removes any trailing string
that corresponds to the current value of C<$/> (also known as
$INPUT_RECORD_SEPARATOR in the C<English> module).  It returns the total
d1086 5
a1090 5
mode (C<$/ = "">), it removes all trailing newlines from the string.
When in slurp mode (C<$/ = undef>) or fixed-length record mode (C<$/> is
a reference to an integer or the like; see L<perlvar>) chomp() won't
remove anything.
If VARIABLE is omitted, it chomps C<$_>.  Example:
d1094 1
a1094 1
        @@array = split(/:/);
d1099 1
a1099 1
resetting the C<each> iterator in the process.
d1103 2
a1104 2
    chomp($cwd = `pwd`);
    chomp($answer = <STDIN>);
d1127 2
a1128 1
scans nor copies the string.  If VARIABLE is omitted, chops C<$_>.
d1130 1
a1130 1
resetting the C<each> iterator in the process.
d1135 1
a1135 1
last C<chop> is returned.
d1137 2
a1138 2
Note that C<chop> returns the last character.  To return all but the last
character, use C<substr($string, 0, -1)>.
d1140 1
a1140 1
See also L</chomp>.
d1153 1
a1153 1
    $cnt = chown $uid, $gid, 'foo', 'bar';
d1156 2
a1157 2
On systems that support fchown(2), you may pass filehandles among the
files.  On systems that don't support fchown(2), passing filehandles raises
d1164 1
a1164 1
    chomp($user = <STDIN>);
d1166 1
a1166 1
    chomp($pattern = <STDIN>);
d1168 1
a1168 1
    ($login,$pass,$uid,$gid) = getpwnam($user)
d1171 1
a1171 1
    @@ary = glob($pattern);  # expand filenames
d1181 1
a1181 1
    $can_chown_giveaway = not sysconf(_PC_CHOWN_RESTRICTED);
d1194 1
a1194 1
chr(0x263a) is a Unicode smiley face.  
d1200 1
a1200 1
If NUMBER is omitted, uses C<$_>.
d1202 1
a1202 1
For the reverse, use L</ord>.
d1221 1
a1221 1
omitted, does a C<chroot> to C<$_>.
d1223 3
a1225 2
B<NOTE:>  It is good security practice to do C<chdir("/")> (to the root
directory) immediately after a C<chroot()>.
d1243 21
a1263 15
another C<open> on it, because C<open> closes it for you.  (See
L<open|/open FILEHANDLE>.)  However, an explicit C<close> on an input file resets the line
counter (C<$.>), while the implicit close done by C<open> does not.

If the filehandle came from a piped open, C<close> returns false if one of
the other syscalls involved fails or if its program exits with non-zero
status.  If the only problem was that the program exited non-zero, C<$!>
will be set to C<0>.  Closing a pipe also waits for the process executing
on the pipe to exit--in case you wish to look at the output of the pipe
afterwards--and implicitly puts the exit status value of that command into
C<$?> and C<${^CHILD_ERROR_NATIVE}>.

If there are multiple threads running, C<close> on a filehandle from a
piped open returns true without waiting for the child process to terminate,
if the filehandle is still open in another thread.
d1289 2
a1290 2
Closes a directory opened by C<opendir> and returns the success of that
system call.
d1297 1
a1297 1
Attempts to connect to a remote socket, just like connect(2).
d1309 8
a1316 7
When followed by a BLOCK, C<continue> is actually a
flow control statement rather than a function.  If
there is a C<continue> BLOCK attached to a BLOCK (typically in a C<while> or
C<foreach>), it is always executed just before the conditional is about to
be evaluated again, just like the third part of a C<for> loop in C.  Thus
it can be used to increment a loop variable, even when the loop has been
continued via the C<next> statement (which is similar to the C C<continue>
d1319 6
a1324 4
C<last>, C<next>, or C<redo> may appear within a C<continue>
block; C<last> and C<redo> behave as if they had been executed within
the main block.  So will C<next>, but since it will execute a C<continue>
block, it may be more entertaining.
d1336 11
a1346 11
Omitting the C<continue> section is equivalent to using an
empty one, logically enough, so C<next> goes directly back
to check the condition at the top of the loop.

When there is no BLOCK, C<continue> is a function that
falls through the current C<when> or C<default> block instead of iterating
a dynamically enclosing C<foreach> or exiting a lexically enclosing C<given>.
In Perl 5.14 and earlier, this form of C<continue> was
only available when the C<"switch"> feature was enabled.
See L<feature> and L<perlsyn/"Switch Statements"> for more
information.
d1356 1
a1356 1
takes the cosine of C<$_>.
d1358 2
a1359 2
For the inverse cosine operation, you may use the C<Math::Trig::acos()>
function, or use this relation:
d1369 1
a1369 1
Creates a digest string exactly like the crypt(3) function in the C
d1373 2
a1374 1
crypt() is a one-way hash function.  The PLAINTEXT and SALT are turned
d1388 2
a1389 2
crypt()'d with the same salt as the stored digest.  If the two digests
match, the password is correct.
d1394 5
a1398 5
crypt() will hash the new string with the same salt as the digest.
This allows your code to work with the standard L<crypt|/crypt> and
with more exotic implementations.  In other words, assume
nothing about the returned string itself nor about how many bytes 
of SALT may matter.
d1412 1
a1412 1
restrict what salts C<crypt()> accepts.
d1417 1
a1417 1
    $pwd = (getpwuid($<))[1];
d1421 1
a1421 1
    chomp($word = <STDIN>);
d1434 12
a1445 10
The L<crypt|/crypt> function is unsuitable for hashing large quantities
of data, not least of all because you can't get the information
back.  Look at the L<Digest> module for more robust algorithms.

If using crypt() on a Unicode string (which I<potentially> has
characters with codepoints above 255), Perl tries to make sense
of the situation by trying to downgrade (a copy of)
the string back to an eight-bit byte string before calling crypt()
(on that copy).  If that works, good.  If not, crypt() dies with
C<Wide character in crypt>.
d1454 2
a1455 1
[This function has been largely superseded by the C<untie> function.]
d1467 1
a1467 1
L<tie|/tie VARIABLE,CLASSNAME,LIST> function.]
d1469 11
a1479 10
This binds a dbm(3), ndbm(3), sdbm(3), gdbm(3), or Berkeley DB file to a
hash.  HASH is the name of the hash.  (Unlike normal C<open>, the first
argument is I<not> a filehandle, even though it looks like one).  DBNAME
is the name of the database (without the F<.dir> or F<.pag> extension if
any).  If the database does not exist, it is created with protection
specified by MASK (as modified by the C<umask>).  To prevent creation of
the database if it doesn't exist, you may specify a MODE
of 0, and the function will return a false value if it
can't find an existing database.  If your system supports
only the older DBM functions, you may make only one C<dbmopen> call in your
d1481 2
a1482 2
ndbm, calling C<dbmopen> produced a fatal error; it now falls back to
sdbm(3).
d1486 2
a1487 2
either use file tests or try setting a dummy hash entry inside an C<eval> 
to trap the error.
d1489 4
a1492 3
Note that functions such as C<keys> and C<values> may return huge lists
when used on large DBM files.  You may prefer to use the C<each>
function to iterate over large DBM files.  Example:
d1506 1
a1506 1
before you call dbmopen():
d1521 14
a1534 13
Returns a Boolean value telling whether EXPR has a value other than
the undefined value C<undef>.  If EXPR is not present, C<$_> is
checked.

Many operations return C<undef> to indicate failure, end of file,
system error, uninitialized variable, and other exceptional
conditions.  This function allows you to distinguish C<undef> from
other values.  (A simple Boolean test will not distinguish among
C<undef>, zero, the empty string, and C<"0">, which are all equally
false.)  Note that since C<undef> is a valid scalar, its presence
doesn't I<necessarily> indicate an exceptional condition: C<pop>
returns C<undef> when its argument is an empty array, I<or> when the
element to return happens to be C<undef>.
d1536 1
a1536 1
You may also use C<defined(&func)> to check whether subroutine C<&func>
d1538 1
a1538 1
declarations of C<&func>.  A subroutine that is not defined
d1543 2
a1544 1
Use of C<defined> on aggregates (hashes and arrays) is deprecated.  It
d1553 2
a1554 2
not whether the key exists in the hash.  Use L</exists> for the latter
purpose.
d1562 1
a1562 1
    sub foo { defined &$bar ? &$bar(@@_) : die "No bar"; }
d1565 4
a1568 3
Note:  Many folks tend to overuse C<defined> and are then surprised to
discover that the number C<0> and C<""> (the zero-length string) are, in fact,
defined values.  For example, if you say
d1577 3
a1579 3
should use C<defined> only when questioning the integrity of what
you're trying to do.  At other times, a simple comparison to C<0> or C<""> is
what you want.
d1581 2
a1582 1
See also L</undef>, L</exists>, L</ref>.
d1589 5
a1593 4
Given an expression that specifies an element or slice of a hash, C<delete>
deletes the specified elements from that hash so that exists() on that element
no longer returns true.  Setting a hash element to the undefined value does
not remove its key, but deleting it does; see L</exists>.
d1600 10
a1609 7
delete() may also be used on arrays and array slices, but its behavior is less
straightforward.  Although exists() will return false for deleted entries,
deleting array elements never changes indices of existing values; use shift()
or splice() for that.  However, if any deleted elements fall at the end of an
array, the array's size shrinks to the position of the highest element that
still tests true for exists(), or to 0 if none do.  In other words, an
array won't have trailing nonexistent elements after a delete.
d1611 2
a1612 1
B<WARNING:> Calling C<delete> on array values is strongly discouraged.  The
d1616 6
a1621 4
Deleting from C<%ENV> modifies the environment.  Deleting from a hash tied to
a DBM file deletes the entry from the DBM file.  Deleting from a C<tied> hash
or array may not necessarily return anything; it depends on the implementation
of the C<tied> package's DELETE method, which may do whatever it pleases.
d1628 2
a1629 2
    %hash = (foo => 11, bar => 22, baz => 33);
    $scalar = delete $hash{foo};         # $scalar is 11
d1631 1
a1631 1
    @@array  = delete @@hash{qw(foo baz)}; # @@array  is (undef,33)
d1635 1
a1635 1
    foreach $key (keys %HASH) {
d1639 1
a1639 1
    foreach $index (0 .. $#ARRAY) {
d1650 1
a1650 1
or undefining %HASH or @@ARRAY, which is the customary 
d1673 7
a1679 5
C<die> raises an exception.  Inside an C<eval> the error message is stuffed
into C<$@@> and the C<eval> is terminated with the undefined value.
If the exception is outside of all enclosing C<eval>s, then the uncaught
exception prints LIST to C<STDERR> and exits with a non-zero value.  If you
need to exit the process with a specific exit code, see L</exit>.
d1691 1
a1691 1
C<$.>.  See L<perlvar/"$/"> and L<perlvar/"$.">.
d1705 3
a1707 3
If the output is empty and C<$@@> already contains a value (typically from a
previous eval) that value is reused after appending C<"\t...propagated">.
This is useful for propagating exceptions:
d1712 5
a1716 5
If the output is empty and C<$@@> contains an object reference that has a
C<PROPAGATE> method, that method will be called with additional file
and line number parameters.  The return value replaces the value in
C<$@@>;  i.e., as if C<< $@@ = eval { $@@->PROPAGATE(__FILE__, __LINE__) }; >>
were called.
d1718 1
a1718 1
If C<$@@> is empty then the string C<"Died"> is used.
d1721 2
a1722 1
determined from the values of C<$!> and C<$?> with this pseudocode:
d1728 4
d1733 4
a1736 4
into the limited space of the system exit
code.  However, as C<$!> is the value
of C's C<errno>, which can be set by any system call, this means that the value
of the exit code used by C<die> can be non-predictable, so should not be relied
d1739 11
a1749 9
You can also call C<die> with a reference argument, and if this is trapped
within an C<eval>, C<$@@> contains that reference.  This permits more
elaborate exception handling using objects that maintain arbitrary state
about the exception.  Such a scheme is sometimes preferable to matching
particular string values of C<$@@> with regular expressions.  Because C<$@@> 
is a global variable and C<eval> may be used within object implementations,
be careful that analyzing the error object doesn't replace the reference in
the global variable.  It's easiest to make a local copy of the reference
before any manipulations.  Here's an example:
d1768 10
a1777 9
You can arrange for a callback to be run just before the C<die>
does its deed, by setting the C<$SIG{__DIE__}> hook.  The associated
handler is called with the error text and can change the error
message, if it sees fit, by calling C<die> again.  See
L<perlvar/%SIG> for details on setting C<%SIG> entries, and
L<"eval BLOCK"> for some examples.  Although this feature was 
to be run only right before your program was to exit, this is not
currently so: the C<$SIG{__DIE__}> hook is currently called
even inside eval()ed blocks/strings!  If one wants the hook to do
d1786 2
a1787 1
See also exit(), warn(), and the Carp module.
d1801 2
a1802 1
C<next>, C<last>, or C<redo> cannot be used to leave or restart the block.
d1818 15
a1832 13
the current
filename for error messages, searches the C<@@INC> directories, and updates
C<%INC> if the file is found.  See L<perlvar/@@INC> and L<perlvar/%INC> for
these variables.  It also differs in that code evaluated with C<do FILENAME>
cannot see lexicals in the enclosing scope; C<eval STRING> does.  It's the
same, however, in that it does reparse the file every time you call it,
so you probably don't want to do this inside a loop.

If C<do> can read the file but cannot compile it, it returns C<undef> and sets
an error message in C<$@@>.  If C<do> cannot read the file, it returns undef
and sets C<$!> to the error.  Always check C<$@@> first, as compilation
could fail in a way that also sets C<$!>.  If the file is successfully
compiled, C<do> returns the value of the last expression evaluated.
d1835 3
a1837 2
C<use> and C<require> operators, which also do automatic error checking
and raise an exception if there's a problem.
d1839 2
a1840 2
You might like to use C<do> to read in a program configuration
file.  Manual error checking can be done this way:
d1868 2
a1869 1
a C<goto LABEL> (with all the restrictions that C<goto> suffers).
d1881 1
a1881 1
it as C<CORE::dump()>, if you don't want to be warned against a possible
d1887 1
a1887 1
C<dump>.
a1896 2
=item each EXPR

d1910 5
a1914 3
that the most recent key returned by C<each> or C<keys> may be deleted
without changing the order.  So long as a given hash is unmodified you may
rely on C<keys>, C<values> and C<each> to repeatedly return the same order
d1920 10
a1929 8
After C<each> has returned all entries from the hash or array, the next
call to C<each> returns the empty list in list context and C<undef> in
scalar context; the next call following I<that> one restarts iteration.
Each hash or array has its own internal iterator, accessed by C<each>,
C<keys>, and C<values>.  The iterator is implicitly reset when C<each> has
reached the end as just described; it can be explicitly reset by calling
C<keys> or C<values> on the hash or array.  If you add or delete a hash's
elements while iterating over it, the effect on the iterator is
d1932 1
a1932 1
returned by C<each()>, so the following code works properly:
d1934 4
a1937 4
        while (($key, $value) = each %hash) {
          print $key, "\n";
          delete $hash{$key};   # This is safe
        }
d1942 1
a1942 1
This prints out your environment like the printenv(1) program,
d1945 1
a1945 1
    while (($key,$value) = each %ENV) {
d1949 3
a1951 6
Starting with Perl 5.14, C<each> can take a scalar EXPR, which must hold
reference to an unblessed hash or array.  The argument will be dereferenced
automatically.  This aspect of C<each> is considered highly experimental.
The exact behaviour may change in a future version of Perl.

    while (($key,$value) = each $hashref) { ... }
d1953 2
a1954 2
As of Perl 5.18 you can use a bare C<each> in a C<while> loop,
which will set C<$_> on every iteration.
d1956 1
a1956 1
    while(each %ENV) {
a1965 1
    use 5.014;	# so keys/values/each work on scalars (experimental)
d1968 2
a1969 1
See also C<keys>, C<values>, and C<sort>.
d1990 17
a2006 14
An C<eof> without an argument uses the last file read.  Using C<eof()>
with empty parentheses is different.  It refers to the pseudo file
formed from the files listed on the command line and accessed via the
C<< <> >> operator.  Since C<< <> >> isn't explicitly opened,
as a normal filehandle is, an C<eof()> before C<< <> >> has been
used will cause C<@@ARGV> to be examined to determine if input is
available.   Similarly, an C<eof()> after C<< <> >> has returned
end-of-file will assume you are processing another C<@@ARGV> list,
and if you haven't set C<@@ARGV>, will read input from C<STDIN>;
see L<perlop/"I/O Operators">.

In a C<< while (<>) >> loop, C<eof> or C<eof(ARGV)> can be used to
detect the end of each file, whereas C<eof()> will detect the end 
of the very last file only.  Examples:
d2025 3
a2027 3
Practical hint: you almost never need to use C<eof> in Perl, because the
input operators typically return C<undef> when they run out of data or 
encounter an error.
d2048 19
a2066 14
Note that the value is parsed every time the C<eval> executes.
If EXPR is omitted, evaluates C<$_>.  This form is typically used to
delay parsing and subsequent execution of the text of EXPR until run time.

If the C<unicode_eval> feature is enabled (which is the default under a
C<use 5.16> or higher declaration), EXPR or C<$_> is treated as a string of
characters, so C<use utf8> declarations have no effect, and source filters
are forbidden.  In the absence of the C<unicode_eval> feature, the string
will sometimes be treated as characters and sometimes as bytes, depending
on the internal encoding, and source filters activated within the C<eval>
exhibit the erratic, but historical, behaviour of affecting some outer file
scope that is still compiling.  See also the L</evalbytes> keyword, which
always treats its input as a byte stream and works properly with source
filters, and the L<feature> pragma.
d2070 3
a2072 3
C<"Infinity">; or, within the scope of a C<use locale>, the decimal
point character may be something other than a dot (such as a comma).
None of these are likely to parse as you are likely expecting.
d2075 2
a2076 1
same time the code surrounding the C<eval> itself was parsed--and executed
d2088 26
a2113 21
in void, scalar, or list context, depending on the context of the C<eval> 
itself.  See L</wantarray> for more on how the evaluation context can be 
determined.

If there is a syntax error or runtime error, or a C<die> statement is
executed, C<eval> returns C<undef> in scalar context
or an empty list in list context, and C<$@@> is set to the error
message.  (Prior to 5.16, a bug caused C<undef> to be returned
in list context for syntax errors, but not for runtime errors.)
If there was no error, C<$@@> is set to the empty string.  A
control flow operator like C<last> or C<goto> can bypass the setting of
C<$@@>.  Beware that using C<eval> neither silences Perl from printing
warnings to STDERR, nor does it stuff the text of warning messages into C<$@@>.
To do either of those, you have to use the C<$SIG{__WARN__}> facility, or
turn off warnings inside the BLOCK or EXPR using S<C<no warnings 'all'>>.
See L</warn>, L<perlvar>, and L<warnings>.

Note that, because C<eval> traps otherwise-fatal errors, it is useful for
determining whether a particular feature (such as C<socket> or C<symlink>)
is implemented.  It is also Perl's exception-trapping mechanism, where
the die operator is used to raise exceptions.
d2117 2
a2118 1
C<eval> unless C<$ENV{PERL_DL_NONLAZY}> is set.  See L<perlrun>.
d2122 2
a2123 1
recompiling each time.  The error, if any, is still returned in C<$@@>.
d2138 1
a2138 1
Using the C<eval{}> form as an exception trap in libraries does have some
d2149 2
a2150 1
C<die> again, which has the effect of changing their error messages:
d2163 2
a2164 2
With an C<eval>, you should be especially careful to remember what's
being looked at when:
d2186 2
a2187 1
Before Perl 5.14, the assignment to C<$@@> occurred before restoration 
d2205 2
a2206 1
C<next>, C<last>, or C<redo> cannot be used to leave or restart the block.
d2221 12
a2232 9
This function is like L</eval> with a string argument, except it always
parses its argument, or C<$_> if EXPR is omitted, as a string of bytes.  A
string containing characters whose ordinal value exceeds 255 results in an
error.  Source filters activated within the evaluated code apply to the
code itself.

This function is only available under the C<evalbytes> feature, a
C<use v5.16> (or higher) declaration, or with a C<CORE::> prefix.  See
L<feature> for more information.
d2241 3
a2243 2
The C<exec> function executes a system command I<and never returns>;
use C<system> instead of C<exec> if you want it to return.  It fails and
d2247 7
a2253 5
Since it's a common mistake to use C<exec> instead of C<system>, Perl
warns you if C<exec> is called in void context and if there is a following
statement that isn't C<die>, C<warn>, or C<exit> (if C<-w> is set--but
you always do that, right?).  If you I<really> want to follow an C<exec>
with some other statement, you can use one of these styles to avoid the warning:
d2258 1
a2258 1
If there is more than one argument in LIST, this calls execvp(3) with the
d2276 1
a2276 1
    $shell = '/bin/csh';
d2287 3
a2289 2
Using an indirect object with C<exec> or C<system> is also more
secure.  This usage (which also works fine with system()) forces
d2294 1
a2294 1
    @@args = ( "echo surprise" );
d2303 1
a2303 1
C<$?> to a non-zero value indicating failure.
d2311 4
a2314 3
To be safe, you may need to set C<$|> ($AUTOFLUSH in English) or
call the C<autoflush()> method of C<IO::Handle> on any open handles
to avoid lost output.
d2316 2
a2317 2
Note that C<exec> will not call your C<END> blocks, nor will it invoke
C<DESTROY> methods on your objects.
d2335 2
a2336 1
obvious and is strongly tied to the use of L</delete> on arrays.
d2338 2
a2339 1
B<WARNING:> Calling C<exists> on array values is strongly discouraged.  The
d2375 1
a2375 1
into existence due to the existence test for the $key element above.
d2387 1
a2387 1
to exists() is an error.
d2401 1
a2401 1
    $ans = <STDIN>;
d2404 2
a2405 1
See also C<die>.  If EXPR is omitted, exits with C<0> status.  The only
d2412 13
a2424 11
Don't use C<exit> to abort a subroutine if there's any chance that
someone might want to trap whatever error happened.  Use C<die> instead,
which can be trapped by an C<eval>.

The exit() function does not always exit immediately.  It calls any
defined C<END> routines first, but these C<END> routines may not
themselves abort the exit.  Likewise any object destructors that need to
be called are called before the real exit.  C<END> routines and destructors
can change the exit status by modifying C<$?>.  If this is a problem, you
can call C<POSIX::_exit($status)> to avoid END and destructor processing.
See L<perlmod> for details.
d2467 3
a2469 3
Perl only implements the full form of casefolding,
but you can access the simple folds using L<Unicode::UCD/casefold()> and
L<Unicode::UCD/prop_invmap()>.
d2476 1
a2476 1
If EXPR is omitted, uses C<$_>.
d2478 7
a2484 5
This function behaves the same way under various pragma, such as within
S<C<"use feature 'unicode_strings">>, as L</lc> does, with the single
exception of C<fc> of LATIN CAPITAL LETTER SHARP S (U+1E9E) within the
scope of S<C<use locale>>.  The foldcase of this character would
normally be C<"ss">, but as explained in the L</lc> section, case
d2487 2
a2488 2
instead the string C<"\x{17F}\x{17F}">, which is the LATIN SMALL LETTER
LONG S.  Since that character itself folds to C<"s">, the string of two
d2493 2
a2494 2
characters, these are not provided by the Perl core; However, the CPAN module
C<Unicode::Casing> may be used to provide an implementation.
d2496 5
a2500 3
This keyword is available only when the C<"fc"> feature is enabled,
or when prefixed with C<CORE::>; See L<feature>.  Alternately,
include a C<use v5.16> or later to the current scope.
d2507 1
a2507 1
Implements the fcntl(2) function.  You'll probably have to say
d2512 2
a2513 2
value returned work just like C<ioctl> below.
For example:
d2516 2
a2517 2
    fcntl($filehandle, F_GETFL, $packed_return_buffer)
        or die "can't fcntl F_GETFL: $!";
d2519 17
a2535 13
You don't have to check for C<defined> on the return from C<fcntl>.
Like C<ioctl>, it maps a C<0> return from the system call into
C<"0 but true"> in Perl.  This string is true in boolean context and C<0>
in numeric context.  It is also exempt from the normal B<-w> warnings
on improper numeric conversions.

Note that C<fcntl> raises an exception if used on a machine that
doesn't implement fcntl(2).  See the Fcntl module or your fcntl(2)
manpage to learn what functions are available on your system.

Here's an example of setting a filehandle named C<REMOTE> to be
non-blocking at the system level.  You'll have to negotiate C<$|>
on your own, though.
d2539 2
a2540 2
    $flags = fcntl(REMOTE, F_GETFL, 0)
                or die "Can't get flags for the socket: $!\n";
d2542 2
a2543 2
    $flags = fcntl(REMOTE, F_SETFL, $flags | O_NONBLOCK)
                or die "Can't set flags for the socket: $!\n";
d2562 2
a2563 1
C<open> with a reference for the third argument, -1 is returned.
d2565 3
a2567 2
This is mainly useful for constructing
bitmaps for C<select> and low-level POSIX tty-handling operations.
d2574 4
a2577 4
    if (fileno(THIS) != -1 && fileno(THIS) == fileno(THAT)) {
        print "THIS and THAT are dups\n";
    } elsif (fileno(THIS) != -1 && fileno(THAT) != -1) {
        print "THIS and THAT have different " .
d2580 1
a2580 1
        print "At least one of THIS and THAT does " .
d2584 7
d2596 1
a2596 1
Calls flock(2), or an emulation of it, on FILEHANDLE.  Returns true
d2598 4
a2601 3
machine that doesn't implement flock(2), fcntl(2) locking, or lockf(3).
C<flock> is Perl's portable file-locking interface, although it locks
entire files only, not records.
d2603 2
a2604 1
Two potentially non-obvious but traditional C<flock> semantics are
d2608 2
a2609 1
C<flock> may modify files locked with C<flock>.  See L<perlport>, 
d2623 3
a2625 2
LOCK_SH or LOCK_EX, then C<flock> returns immediately rather than blocking
waiting for the lock; check the return status to see if you got it.
d2630 1
a2630 1
Note that the emulation built with lockf(3) doesn't provide shared
d2632 2
a2633 2
are the semantics that lockf(3) implements.  Most if not all systems
implement lockf(3) in terms of fcntl(2) locking, though, so the
d2636 1
a2636 1
Note that the fcntl(2) emulation of flock(3) requires that FILEHANDLE
d2640 5
a2644 4
Note also that some versions of C<flock> cannot lock things over the
network; you would need to use the more system-specific C<fcntl> for
that.  If you like you can force Perl to ignore your system's flock(2)
function, and so provide its own fcntl(2)-based emulation, by passing
d2673 4
a2676 3
On systems that support a real flock(2), locks are inherited across fork()
calls, whereas those that must resort to the more capricious fcntl(2)
function lose their locks, making it seriously harder to write servers.
d2678 2
a2679 1
See also L<DB_File> for other flock() examples.
d2688 1
a2688 1
Does a fork(2) system call to create a new process running the
d2690 2
a2691 1
parent process, C<0> to the child process, or C<undef> if the fork is
d2694 1
a2694 1
fork(), great care has gone into making it extremely efficient (for
d2698 6
a2703 5
Perl attempts to flush all files opened for
output before forking the child process, but this may not be supported
on some platforms (see L<perlport>).  To be safe, you may need to set
C<$|> ($AUTOFLUSH in English) or call the C<autoflush()> method of
C<IO::Handle> on any open handles to avoid duplicate output.
d2705 1
a2705 1
If you C<fork> without ever waiting on your children, you will
d2707 2
a2708 2
C<$SIG{CHLD}> to C<"IGNORE">.  See also L<perlipc> for more examples of
forking and reaping moribund children.
d2716 6
a2721 6
On some platforms such as Windows, where the fork() system call is not available,
Perl can be built to emulate fork() in the Perl interpreter.
The emulation is designed, at the level of the Perl program,
to be as compatible as possible with the "Unix" fork().
However it has limitations that have to be considered in code intended to be portable.
See L<perlfork> for more details.
d2730 2
a2731 2
Declare a picture format for use by the C<write> function.  For
example:
d2750 14
a2763 12
This is an internal function used by C<format>s, though you may call it,
too.  It formats (see L<perlform>) a list of values according to the
contents of PICTURE, placing the output into the format output
accumulator, C<$^A> (or C<$ACCUMULATOR> in English).
Eventually, when a C<write> is done, the contents of
C<$^A> are written to some filehandle.  You could also read C<$^A>
and then set C<$^A> back to C<"">.  Note that a format typically
does one C<formline> per line of form, but the C<formline> function itself
doesn't care how many newlines are embedded in the PICTURE.  This means
that the C<~> and C<~~> tokens treat the entire PICTURE as a single line.
You may therefore need to use multiple formlines to implement a single
record format, just like the C<format> compiler.
d2767 2
a2768 1
C<formline> always returns true.  See L<perlform> for other examples.
d2770 3
a2772 3
If you are trying to use this instead of C<write> to capture the output,
you may find it easier to open a filehandle to a scalar
(C<< open $fh, ">", \$output >>) and write to that instead.
d2783 2
a2784 1
the latter case C<$!> is set).  If FILEHANDLE is omitted, reads from
d2796 1
a2796 1
    $key = getc(STDIN);
d2806 2
a2807 2
Determination of whether $BSD_STYLE should be set
is left as an exercise to the reader.
d2809 3
a2811 3
The C<POSIX::getattr> function can do this more portably on
systems purporting POSIX compliance.  See also the C<Term::ReadKey>
module from your nearest L<CPAN|http://www.cpan.org> site.
d2820 1
a2820 1
returns the empty string, use C<getpwuid>.
d2822 1
a2822 1
    $login = getlogin || getpwuid($<) || "Kilroy";
d2824 2
a2825 2
Do not consider C<getlogin> for authentication: it is not as
secure as C<getpwuid>.
d2838 4
a2841 4
    $hersockaddr    = getpeername(SOCK);
    ($port, $iaddr) = sockaddr_in($hersockaddr);
    $herhostname    = gethostbyaddr($iaddr, AF_INET);
    $herstraddr     = inet_ntoa($iaddr);
d2851 4
a2854 3
doesn't implement getpgrp(2).  If PID is omitted, returns the process
group of the current process.  Note that the POSIX version of C<getpgrp>
does not accept a PID argument, so only C<PID==0> is truly portable.
d2880 1
a2880 1
machine that doesn't implement getpriority(2).
d2890 1
a2890 1
X<endnetent> X<endprotoent> X<endservent> 
d3014 9
a3022 9
 # 0        1          2           3         4
 ( $name,   $passwd,   $gid,       $members  ) = getgr*
 ( $name,   $aliases,  $addrtype,  $net      ) = getnet*
 ( $name,   $aliases,  $port,      $proto    ) = getserv*
 ( $name,   $aliases,  $proto                ) = getproto*
 ( $name,   $aliases,  $addrtype,  $length,  @@addrs ) = gethost*
 ( $name,   $passwd,   $uid,       $gid,     $quota,
 $comment,  $gcos,     $dir,       $shell,   $expire ) = getpw*
 # 5        6          7           8         9
d3024 2
a3025 1
(If the entry doesn't exist you get an empty list.)
d3039 7
a3045 7
    $uid   = getpwnam($name);
    $name  = getpwuid($num);
    $name  = getpwent();
    $gid   = getgrnam($name);
    $name  = getgrgid($num);
    $name  = getgrent();
    #etc.
d3057 1
a3057 1
in your system, please consult getpwnam(3) and your system's 
d3060 1
a3060 1
by using the C<Config> module and the values C<d_pwquota>, C<d_pwage>,
d3065 1
a3065 1
the shadow(3) functions as found in System V (this includes Solaris
d3073 2
a3074 1
C, it will be returned to you via C<$?> if the function call fails.  The
d3080 1
a3080 1
    ($a,$b,$c,$d) = unpack('W4',$addr[0]);
d3085 2
a3086 2
    $iaddr = inet_aton("127.1"); # or whatever address
    $name  = gethostbyaddr($iaddr, AF_INET);
d3089 1
a3089 1
    $straddr = inet_ntoa($iaddr);
d3095 2
a3096 1
    $packed_ip = gethostbyname("www.perl.org");
d3101 2
a3102 2
Make sure C<gethostbyname()> is called in SCALAR context and that
its return value is checked for definedness.
d3104 3
a3106 2
The C<getprotobynumber> function, even though it only takes one argument,
has the precedence of a list operator, so beware:
d3113 8
a3120 6
contains which return value, by-name interfaces are provided
in standard modules: C<File::stat>, C<Net::hostent>, C<Net::netent>,
C<Net::protoent>, C<Net::servent>, C<Time::gmtime>, C<Time::localtime>,
and C<User::grent>.  These override the normal built-ins, supplying
versions that return objects with the appropriate names
for each field.  For example:
d3124 1
a3124 1
   $is_his = (stat($filename)->uid == pwent($whoever)->uid);
d3142 2
a3143 2
    $mysockaddr = getsockname(SOCK);
    ($port, $myaddr) = sockaddr_in($mysockaddr);
d3156 6
a3161 5
C<Socket> module) will exist.  To query options at another level the
protocol number of the appropriate protocol controlling the option
should be supplied.  For example, to indicate that an option is to be
interpreted by the TCP protocol, LEVEL should be set to the protocol
number of TCP, which you can get using C<getprotobyname>.
d3164 6
a3169 5
option, or C<undef> on error, with the reason for the error placed in
C<$!>.  Just what is in the packed string depends on LEVEL and OPTNAME;
consult getsockopt(2) for details.  A common case is that the option is an
integer, in which case the result is a packed integer, which you can decode
using C<unpack> with the C<i> (or C<I>) format.
d3198 2
a3199 2
EXPR is omitted, C<$_> is used.  The C<< <*.c> >> operator is discussed in
more detail in L<perlop/"I/O Operators">.
d3201 3
a3203 2
Note that C<glob> splits its arguments on whitespace and treats
each segment as separate pattern.  As such, C<glob("*.c *.h")> 
d3209 1
a3209 1
followed by an C<f>, use either of:
d3211 3
a3213 3
    @@spacies = <"*e f*">;
    @@spacies = glob '"*e f*"';
    @@spacies = glob q("*e f*");
d3217 2
a3218 2
    @@spacies = glob "'*${var}e f*'";
    @@spacies = glob qq("*${var}e f*");
d3221 2
a3222 2
C<glob>, no filenames are matched, but potentially many strings
are returned.  For example, this produces nine strings, one for
d3225 1
a3225 1
    @@many =  glob "{apple,tomato,cherry}={green,yellow,red}";
d3227 4
a3230 3
This operator is implemented using the standard
C<File::Glob> extension.  See L<File::Glob> for details, including
C<bsd_glob> which does not treat whitespace as a pattern separator.
d3241 2
a3242 2
Works just like L</localtime> but the returned values are
localized for the standard Greenwich time zone.
d3261 8
a3268 7
subroutine given to C<sort>.  It can be used to go almost anywhere
else within the dynamic scope, including out of subroutines, but it's
usually better to use some other construct such as C<last> or C<die>.
The author of Perl has never felt the need to use this form of C<goto>
(in Perl, that is; C is another matter).  (The difference is that C
does not offer named loops combined with loop control.  Perl does, and
this replaces most structured uses of C<goto> in other languages.)
d3276 3
a3278 2
dynamically.  This allows for computed C<goto>s per FORTRAN, but isn't
necessarily recommended if you're optimizing for maintainability:
d3295 11
a3305 10
C<goto>.  In fact, it isn't a goto in the normal sense at all, and
doesn't have the stigma associated with other gotos.  Instead, it
exits the current subroutine (losing any changes set by local()) and
immediately calls in its place the named subroutine using the current
value of @@_.  This is used by C<AUTOLOAD> subroutines that wish to
load another subroutine and then pretend that the other subroutine had
been called in the first place (except that any modifications to C<@@_>
in the current subroutine are propagated to the other subroutine.)
After the C<goto>, not even C<caller> will be able to tell that this
routine was called first.
d3318 1
a3318 1
This is similar in spirit to, but not the same as, grep(1) and its
d3322 2
a3323 1
C<$_> to each element) and returns the list value consisting of those
d3327 1
a3327 1
    @@foo = grep(!/^#/, @@bar);    # weed out comments
d3331 1
a3331 1
    @@foo = grep {!/^#/} @@bar;    # weed out comments
d3333 2
a3334 1
Note that C<$_> is an alias to the list value, so it can be used to
d3339 3
a3341 2
element of a list returned by grep (for example, in a C<foreach>, C<map>
or another C<grep>) actually modifies the element in the original list.
d3344 2
a3345 7
If C<$_> is lexical in the scope where the C<grep> appears (because it has
been declared with the deprecated C<my $_> construct)
then, in addition to being locally aliased to
the list elements, C<$_> keeps being lexical inside the block; i.e., it
can't be seen from the outside, avoiding any potential side-effects.

See also L</map> for a list composed of the results of the BLOCK or EXPR.
d3352 1
a3352 1
=for Pod::Functions convert a string to a hexadecimal number
d3354 2
a3355 3
Interprets EXPR as a hex string and returns the corresponding value.
(To convert strings that might start with either C<0>, C<0x>, or C<0b>, see
L</oct>.)  If EXPR is omitted, uses C<$_>.
d3359 1
d3361 11
a3371 4
Hex strings may only represent integers.  Strings that would cause
integer overflow trigger a warning.  Leading whitespace is not stripped,
unlike oct().  To present something as hex, look into L</printf>,
L</sprintf>, and L</unpack>.
d3378 6
a3383 4
There is no builtin C<import> function.  It is just an ordinary
method (subroutine) defined (or inherited) by modules that wish to export
names to another module.  The C<use> function calls the C<import> method
for the package used.  See also L</use>, L<perlmod>, and L<Exporter>.
d3399 2
a3400 1
If the substring is not found, C<index> returns -1.
d3409 2
a3410 1
Returns the integer portion of EXPR.  If EXPR is omitted, uses C<$_>.
d3416 4
a3419 2
the C<sprintf>, C<printf>, or the C<POSIX::floor> and C<POSIX::ceil>
functions will serve you better than will int().
d3426 1
a3426 1
Implements the ioctl(2) function.  You'll probably first have to say
d3437 2
a3438 1
will be passed as the third argument of the actual C<ioctl> call.  (If SCALAR
d3441 2
a3442 1
true, add a C<0> to the scalar before using it.)  The C<pack> and C<unpack>
d3444 1
a3444 1
C<ioctl>.
d3446 2
a3447 1
The return value of C<ioctl> (and C<fcntl>) is as follows:
d3458 1
a3458 1
    $retval = ioctl(...) || -1;
d3461 3
a3463 2
The special string C<"0 but true"> is exempt from B<-w> complaints
about improper numeric conversions.
d3475 1
a3475 1
    $rec = join(':', $login,$passwd,$uid,$gid,$gcos,$home,$shell);
d3477 3
a3479 2
Beware that unlike C<split>, C<join> doesn't take a pattern as its
first argument.  Compare L</split>.
a3485 2
=item keys EXPR

d3497 5
a3501 3
that the most recent key returned by C<each> or C<keys> may be deleted
without changing the order.  So long as a given hash is unmodified you may
rely on C<keys>, C<values> and C<each> to repeatedly return the same order
d3509 4
a3512 3
As a side effect, calling keys() resets the internal iterator of the HASH or
ARRAY (see L</each>).  In particular, calling keys() in void context resets
the iterator with no other overhead.
d3516 2
a3517 2
    @@keys = keys %ENV;
    @@values = values %ENV;
d3524 1
a3524 1
    foreach $key (sort(keys %ENV)) {
d3529 2
a3530 1
modifying them will not affect the original hash.  Compare L</values>.
d3532 3
a3534 2
To sort a hash by value, you'll need to use a C<sort> function.
Here's a descending numeric sort of a hash by its values:
d3536 1
a3536 1
    foreach $key (sort { $hash{$b} <=> $hash{$a} } keys %hash) {
d3540 2
a3541 1
Used as an lvalue, C<keys> allows you to increase the number of hash buckets
d3553 7
a3559 11
C<keys> in this way (but you needn't worry about doing this by accident,
as trying has no effect).  C<keys @@array> in an lvalue context is a syntax
error.

Starting with Perl 5.14, C<keys> can take a scalar EXPR, which must contain
a reference to an unblessed hash or array.  The argument will be
dereferenced automatically.  This aspect of C<keys> is considered highly
experimental.  The exact behaviour may change in a future version of Perl.

    for (keys $hashref) { ... }
    for (keys $obj->get_arrayref) { ... }
a3566 1
    use 5.014;	# so keys/values/each work on scalars (experimental)
d3568 2
a3569 1
See also C<each>, C<values>, and C<sort>.
d3583 1
a3583 1
    $cnt = kill 'HUP', $child1, $child2;
d3592 2
a3593 2
C<$Config{sig_name}>, which is provided by the C<Config> module.  See L<Config>
for more details.
d3602 2
a3603 2
no signal is sent to
the process, but C<kill> checks whether it's I<possible> to send a signal to it
d3620 3
a3622 2
On some platforms such as Windows where the fork() system call is not
available, Perl can be built to emulate fork() at the interpreter level.
d3644 2
a3645 1
The C<last> command is like the C<break> statement in C (as used in
d3651 1
a3651 1
C<continue> block, if any, is not executed:
d3658 4
a3661 3
C<last> cannot be used to exit a block that returns a value such as
C<eval {}>, C<sub {}>, or C<do {}>, and should not be used to exit
a grep() or map() operation.
d3664 2
a3665 2
that executes once.  Thus C<last> can be used to effect an early
exit out of such a block.
d3667 3
a3669 2
See also L</continue> for an illustration of how C<last>, C<next>, and
C<redo> work.
d3674 1
a3674 1
C<last>.
d3686 1
a3686 1
If EXPR is omitted, uses C<$_>.
d3697 1
a3697 1
=item Otherwise, if C<use locale> (but not C<use locale ':not_characters'>) is in effect:
d3699 1
a3699 1
Respects current LC_CTYPE locale for code points < 256; and uses Unicode
d3713 4
a3716 2
the input character unchanged, for all instances (and there aren't
many) where the 255/256 boundary would otherwise be crossed.
d3744 1
a3744 1
If EXPR is omitted, uses C<$_>.
d3746 2
a3747 2
This function behaves the same way under various pragmata, such as in a locale,
as L</lc> does.
d3757 2
a3758 2
omitted, returns the length of C<$_>.  If EXPR is undefined, returns
C<undef>.
d3764 2
a3765 1
Like all Perl character operations, length() normally deals in logical
d3792 1
a3792 1
Does the same thing that the listen(2) system call does.  Returns true if
d3801 3
a3803 3
You really probably want to be using C<my> instead, because C<local> isn't
what most people think of as "local".  See
L<perlsub/"Private Variables via my()"> for details.
d3825 2
a3826 2
    #  0    1    2     3     4    5     6     7     8
    ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) =
d3857 2
a3858 2
If EXPR is omitted, C<localtime()> uses the current time (as returned
by time(3)).
d3860 2
a3861 1
In scalar context, C<localtime()> returns the ctime(3) value:
d3863 1
a3863 1
    $now_string = localtime;  # e.g., "Thu Oct 13 04:54:34 1994"
d3865 7
a3871 6
The format of this scalar value is B<not> locale-dependent
but built into Perl.  For GMT instead of local
time use the L</gmtime> builtin.  See also the
C<Time::Local> module (for converting seconds, minutes, hours, and such back to
the integer value returned by time()), and the L<POSIX> module's strftime(3)
and mktime(3) functions.
d3878 1
a3878 1
    $now_string = strftime "%a %b %e %H:%M:%S %Y", localtime;
d3880 1
a3880 1
    $now_string = strftime "%a %b %e %H:%M:%S %Y", gmtime;
d3882 1
a3882 1
Note that the C<%a> and C<%b>, the short forms of the day of the week
d3886 2
a3887 2
by-name access mechanism to the gmtime() and localtime() functions,
respectively.
d3905 2
a3906 1
lock() is a "weak keyword" : this means that if you've defined a function
d3919 1
a3919 1
returns the log of C<$_>.  To get the
d3929 1
a3929 1
See also L</exp> for the inverse operation.
d3942 6
a3947 5
Does the same thing as the C<stat> function (including setting the
special C<_> filehandle) but stats a symbolic link instead of the file
the symbolic link points to.  If symbolic links are unimplemented on
your system, a normal C<stat> is done.  For much more detailed
information, please see the documentation for C<stat>.
d3949 1
a3949 1
If EXPR is omitted, stats C<$_>.
d3967 2
a3968 1
C<$_> to each element) and returns the list value composed of the
d3974 1
a3974 1
    @@chars = map(chr, @@numbers);
d3996 1
a3996 1
    %hash = map { get_a_key_for($_) => $_ } @@array;
d4000 1
a4000 1
    %hash = ();
d4005 7
a4011 12
Note that C<$_> is an alias to the list value, so it can be used to
modify the elements of the LIST.  While this is useful and supported,
it can cause bizarre results if the elements of LIST are not variables.
Using a regular C<foreach> loop for this purpose would be clearer in
most cases.  See also L</grep> for an array composed of those items of
the original list for which the BLOCK or EXPR evaluates to true.

If C<$_> is lexical in the scope where the C<map> appears (because it has
been declared with the deprecated C<my $_> construct),
then, in addition to being locally aliased to
the list elements, C<$_> keeps being lexical inside the block; that is, it
can't be seen from the outside, avoiding any potential side-effects.
d4023 6
a4028 6
    %hash = map {  "\L$_" => 1  } @@array # perl guesses EXPR. wrong
    %hash = map { +"\L$_" => 1  } @@array # perl guesses BLOCK. right
    %hash = map {; "\L$_" => 1  } @@array # this also works
    %hash = map { ("\L$_" => 1) } @@array # as does this
    %hash = map {  lc($_) => 1  } @@array # and this.
    %hash = map +( lc($_) => 1 ), @@array # this is EXPR and works!
d4030 1
a4030 1
    %hash = map  ( lc($_), 1 ),   @@array # evaluates to (1, @@array)
d4034 2
a4035 2
    @@hashes = map +{ lc($_) => 1 }, @@array # EXPR, so needs
                                           # comma at end
d4049 3
a4051 2
specified by MASK (as modified by C<umask>).  If it succeeds it
returns true; otherwise it returns false and sets C<$!> (errno).
d4053 1
a4053 1
to C<$_> if omitted.
d4056 2
a4057 1
and let the user modify that with their C<umask> than it is to supply
d4060 2
a4061 2
kept private (mail files, for instance).  The perlfunc(1) entry on
C<umask> discusses the choice of MASK in more detail.
d4069 2
a4070 1
the C<make_path> function of the L<File::Path> module.
d4077 1
a4077 1
Calls the System V IPC function msgctl(2).  You'll probably have to say
d4083 5
a4087 4
structure.  Returns like C<ioctl>: the undefined value for error,
C<"0 but true"> for zero, or the actual return value otherwise.  See also
L<perlipc/"SysV IPC"> and the documentation for C<IPC::SysV> and
C<IPC::Semaphore>.
d4096 4
a4099 4
Calls the System V IPC function msgget(2).  Returns the message queue
id, or C<undef> on error.  See also
L<perlipc/"SysV IPC"> and the documentation for C<IPC::SysV> and
C<IPC::Msg>.
d4113 1
a4113 1
Taints the variable.  Returns true if successful, false 
d4115 1
a4115 1
C<IPC::SysV> and C<IPC::SysV::Msg>.
d4129 2
a4130 2
false on error.  See also the C<IPC::SysV>
and C<IPC::SysV::Msg> documentation.
d4145 4
a4148 3
A C<my> declares the listed variables to be local (lexically) to the
enclosing block, file, or C<eval>.  If more than one variable is listed,
the list must be placed in parentheses.
d4152 6
a4157 6
with C<use constant>, or C<__PACKAGE__>.  It is
currently bound to the use of the C<fields> pragma,
and attributes are handled using the C<attributes> pragma, or starting
from Perl 5.8.0 also via the C<Attribute::Handlers> module.  See
L<perlsub/"Private Variables via my()"> for details, and L<fields>,
L<attributes>, and L<Attribute::Handlers>.
d4159 3
a4161 2
Note that with a parenthesised list, C<undef> can be used as a dummy
placeholder, for example to skip assignment of initial values:
d4174 2
a4175 2
The C<next> command is like the C<continue> statement in C; it starts
the next iteration of the loop:
d4182 2
a4183 1
Note that if there were a C<continue> block on the above, it would get
d4189 4
a4192 3
C<next> cannot be used to exit a block which returns a value such as
C<eval {}>, C<sub {}>, or C<do {}>, and should not be used to exit
a grep() or map() operation.
d4195 2
a4196 1
that executes once.  Thus C<next> will exit such a block early.
d4198 3
a4200 2
See also L</continue> for an illustration of how C<last>, C<next>, and
C<redo> work.
d4205 1
a4205 1
C<next>.
d4221 2
a4222 1
See the C<use> function, of which C<no> is the opposite.
d4240 10
a4249 8
If EXPR is omitted, uses C<$_>.   To go the other way (produce a number
in octal), use sprintf() or printf():

    $dec_perms = (stat("filename"))[2] & 07777;
    $oct_perm_str = sprintf "%o", $perms;

The oct() function is commonly used when a string such as C<644> needs
to be converted into a file mode, for example.  Although Perl 
d4253 3
a4255 3
Leading white space is ignored without warning, as too are any trailing 
non-digits, such as a decimal point (C<oct> only handles non-negative
integers, not negative integers or floating point).
d4275 2
a4276 2
    open(my $fh, "<", "input.txt") 
	or die "cannot open < input.txt: $!";
d4280 2
a4281 2
    open(my $fh, ">", "output.txt") 
	or die "cannot open > output.txt: $!";
d4283 3
a4285 2
(The following is a comprehensive reference to open(): for a gentler
introduction you may consider L<perlopentut>.)
d4304 1
a4304 1
C<< +< >> is almost always preferred for read/write updates--the 
d4309 1
a4309 1
modified by the process's C<umask> value.
d4311 1
a4311 1
These various prefixes correspond to the fopen(3) modes of C<r>,
d4317 2
a4318 2
is C<< < >>.  It is always safe to use the two-argument form of C<open> if
the filename argument is a known literal.
d4326 2
a4327 2
(You are not allowed to C<open> to a command that pipes both in I<and>
out, but see L<IPC::Open2>, L<IPC::Open3>, and
d4334 3
a4336 3
C<open> with more than three arguments for non-pipe modes is not yet
defined, but experimental "layers" may give extra LIST arguments
meaning.
d4338 1
a4338 1
In the two-argument (and one-argument) form, opening C<< <- >> 
d4346 2
a4347 2
  open(my $fh, "<:encoding(UTF-8)", "filename")
    || die "can't open UTF-8 encoded filename: $!";
d4352 1
a4352 1
usually set by the B<open> pragma or the switch B<-CioD>) are ignored.
d4358 2
a4359 2
the C<open> involved a pipe, the return value happens to be the pid of
the subprocess.
d4361 11
a4371 11
If you're running Perl on a system that distinguishes between text
files and binary files, then you should check out L</binmode> for tips
for dealing with this.  The key distinction between systems that need
C<binmode> and those that don't is their text file formats.  Systems
like Unix, Mac OS, and Plan 9, that end lines with a single
character and encode that character in C as C<"\n"> do not
need C<binmode>.  The rest need it.

When opening a file, it's seldom a good idea to continue 
if the request failed, so C<open> is frequently used with
C<die>.  Even if C<die> won't do what you want (say, in a CGI script,
d4374 1
a4374 1
the return value from opening a file.  
d4377 2
a4378 1
If it is a lexically scoped variable declared with C<my>, that usually
d4389 1
a4389 1
       or die "cannot open < input.txt: $!";
d4402 1
a4402 1
declared with C<my> or C<state>.
d4405 1
a4405 1
argument being C<undef>:
d4411 2
a4412 2
to the temporary file first.  You will need to seek() to do the
reading.
d4414 1
a4414 1
Perl is built using PerlIO by default; Unless you've
d4418 1
a4418 1
    open($fh, ">", \$variable) || ..
d4426 2
d4430 2
a4431 2
    open(LOG, ">>/usr/spool/news/twitlog");  # (log is reserved)
    # if the open fails, output is discarded
d4433 2
a4434 2
    open(my $dbase, "+<", "dbase.mine")      # open for update
        or die "Can't open 'dbase.mine' for update: $!";
d4436 2
a4437 2
    open(my $dbase, "+<dbase.mine")          # ditto
        or die "Can't open 'dbase.mine' for update: $!";
d4439 3
a4441 2
    open(ARTICLE, "-|", "caesar <$article")  # decrypt article
        or die "Can't start caesar: $!";
d4443 2
a4444 2
    open(ARTICLE, "caesar <$article |")      # ditto
        or die "Can't start caesar: $!";
d4446 2
a4447 2
    open(EXTRACT, "|sort >Tmp$$")            # $$ is our process id
        or die "Can't start sort: $!";
d4449 4
a4452 30
    # in-memory files
    open(MEMORY, ">", \$var)
        or die "Can't open memory file: $!";
    print MEMORY "foo!\n";              # output will appear in $var

    # process argument list of files along with any includes

    foreach $file (@@ARGV) {
        process($file, "fh00");
    }

    sub process {
        my($filename, $input) = @@_;
        $input++;    # this is a string increment
        unless (open($input, "<", $filename)) {
            print STDERR "Can't open $filename: $!\n";
            return;
        }

        local $_;
        while (<$input>) {    # note use of indirection
            if (/^#include "(.*)"/) {
                process($1, $input);
                next;
            }
            #...          # whatever
        }
    }

See L<perliol> for detailed info on PerlIO.
d4457 1
a4457 1
duped (as C<dup(2)>) and opened.  You may use C<&> after C<< > >>,
d4488 2
a4489 2
or a filehandle, then Perl will do an equivalent of C's C<fdopen> of
that file descriptor (and not call C<dup(2)>); this is more
d4493 1
a4493 1
    open(FILEHANDLE, "<&=$fd")
d4497 1
a4497 1
    open(FILEHANDLE, "<&=", $fd)
d4501 2
a4502 6
    # open for append, using the fileno of OLDFH
    open(FH, ">>&=", OLDFH)

or

    open(FH, ">>&=OLDFH")
d4506 6
a4511 5
descriptors, like for example locking using flock().  If you do just
C<< open(A, ">>&B") >>, the filehandle A will not have the same file
descriptor as B, and therefore flock(A) will not flock(B) nor vice
versa.  But with C<< open(A, ">>&=B") >>, the filehandles will share
the same underlying system file descriptor.
d4514 2
a4515 2
fdopen() to implement the C<=> functionality.  On many Unix systems,
fdopen() fails when file descriptors exceed a certain value, typically 255.
d4518 3
a4520 3
You can see whether your Perl was built with PerlIO by running C<perl -V>
and looking for the C<useperlio=> line.  If C<useperlio> is C<define>, you
have PerlIO; otherwise you don't.
d4523 4
a4526 3
with the one- or two-argument forms of C<open>), 
an implicit C<fork> is done, so C<open> returns twice: in the parent
process it returns the pid
d4532 1
a4532 1
    $child_pid = open(FROM_KID, "-|") 	// die "can't fork: $!";
d4536 1
a4536 1
    $child_pid = open(TO_KID,   "|-") 	// die "can't fork: $!";
d4538 1
a4538 1
followed by 
d4542 1
a4542 1
	# either write TO_KID or else read FROM_KID
d4549 1
a4549 1
    } 
d4561 9
a4569 9
    open(FOO, "|tr '[a-z]' '[A-Z]'");
    open(FOO, "|-", "tr '[a-z]' '[A-Z]'");
    open(FOO, "|-") || exec 'tr', '[a-z]', '[A-Z]';
    open(FOO, "|-", "tr", '[a-z]', '[A-Z]');

    open(FOO, "cat -n '$file'|");
    open(FOO, "-|", "cat -n '$file'");
    open(FOO, "-|") || exec "cat", "-n", $file;
    open(FOO, "-|", "cat", "-n", $file);
d4573 2
a4574 2
your platform has a real C<fork()> (in other words, if your platform is
Unix, including Linux and MacOS X), you can use the list form.  You would 
d4580 2
a4581 2
    open(FOO, "|cat -n | expand -4 | lpr")
	// die "Can't open pipeline to lpr: $!";
d4588 3
a4590 2
to set C<$|> ($AUTOFLUSH in English) or call the C<autoflush()> method
of C<IO::Handle> on any open handles.
d4594 1
a4594 1
of C<$^F>.  See L<perlvar/$^F>.
d4597 2
a4598 2
child to finish, then returns the status value in C<$?> and
C<${^CHILD_ERROR_NATIVE}>.
d4600 2
a4601 1
The filename passed to the one- and two-argument forms of open() will
d4608 1
a4608 1
    open(FH, $filename) or die "Can't open $filename: $!";
d4612 2
a4613 2
    open(FOO, "<", $file)
	|| die "can't open < $file: $!";
d4618 2
a4619 2
    open(FOO, "< $file\0")
	|| die "open failed: $!";
d4623 1
a4623 1
of open():
d4625 1
a4625 1
    open(IN, $ARGV[0]) || die "can't open $ARGV[0]: $!";
d4630 2
a4631 2
    open(IN, "<", $ARGV[0])
	|| die "can't open < $ARGV[0]: $!";
d4633 10
a4642 7
will have exactly the opposite restrictions.

If you want a "real" C C<open> (see L<open(2)> on your system), then you
should use the C<sysopen> function, which involves no such magic (but may
use subtly different filemodes than Perl open(), which is mapped to C
fopen()).  This is another way to protect your filenames from
interpretation.  For example:
d4645 6
a4650 6
    sysopen(HANDLE, $path, O_RDWR|O_CREAT|O_EXCL)
        or die "sysopen $path: $!";
    $oldfh = select(HANDLE); $| = 1; select($oldfh);
    print HANDLE "stuff $$\n";
    seek(HANDLE, 0, 0);
    print "File contains: ", <HANDLE>;
d4652 2
a4653 1
See L</seek> for some details about mixing reading and writing.
d4662 5
a4666 2
Opens a directory named EXPR for processing by C<readdir>, C<telldir>,
C<seekdir>, C<rewinddir>, and C<closedir>.  Returns true if successful.
d4673 1
a4673 1
See the example at C<readdir>.
d4683 2
a4684 1
If EXPR is an empty string, returns 0.  If EXPR is omitted, uses C<$_>.
d4687 1
a4687 1
For the reverse, see L</chr>.
d4701 15
a4715 11
C<our> makes a lexical alias to a package (i.e. global) variable of the
same name in the current package for use within the current lexical scope.

C<our> has the same scoping rules as C<my> or C<state>, meaning that it is
only valid within a lexical scope.  Unlike C<my> and C<state>, which both
declare new (lexical) variables, C<our> only creates an alias to an
existing variable: a package variable of the same name.

This means that when C<use strict 'vars'> is in effect, C<our> lets you use
a package variable without qualifying it with the package name, but only within
the lexical scope of the C<our> declaration. This applies immediately--even
d4757 2
a4758 1
An C<our> declaration declares an alias for a package variable that will be visible
d4771 2
a4772 1
Multiple C<our> declarations with the same name in the same lexical
d4775 4
a4778 4
for them, just like multiple C<my> declarations.  Unlike a second
C<my> declaration, which will bind the name to a fresh variable, a
second C<our> declaration in the same package, in the same scope, is
merely redundant.
d4792 2
a4793 2
An C<our> declaration may also have a list of attributes associated
with it.
d4796 4
a4799 5
evolving.  TYPE is currently bound to the use of the C<fields> pragma,
and attributes are handled using the C<attributes> pragma, or, starting
from Perl 5.8.0, also via the C<Attribute::Handlers> module.  See
L<perlsub/"Private Variables via my()"> for details, and L<fields>,
L<attributes>, and L<Attribute::Handlers>.
d4801 3
a4803 2
Note that with a parenthesised list, C<undef> can be used as a dummy
placeholder, for example to skip assignment of initial values:
d4807 3
a4809 2
C<our> differs from C<use vars>, which allows use of an unqualified name
I<only> within the affected package, but across scopes.
d4821 1
a4821 1
Perl be presented as a string that's 4 characters long. 
d4874 2
a4875 1
          support those.  Raises an exception otherwise.)
d4919 2
a4920 2
The C<< > >> and C<< < >> modifiers can also be used on C<()> groups 
to force a particular byte-order on all components in that group, 
d4947 1
a4947 1
=over 
d4959 1
a4959 1
=over 
d4961 1
a4961 1
=item * 
d4965 1
a4965 1
=item * 
d4969 1
a4969 1
=item * 
d4973 1
a4973 1
=back 
d4995 1
a4995 1
=over 
d5015 1
a5015 1
to encode per line of output, with 0, 1 and 2 replaced by 45.  The repeat 
d5052 1
a5052 1
A C<*> for the repeat count uses all characters of the input field.  
d5060 1
a5060 1
For each such format, pack() generates 4 bits of result.
d5066 1
a5066 1
C<"A"> both generate the nybble C<0xA==10>.  Use only these specific hex 
d5069 2
a5070 1
Starting from the beginning of the template to pack(), each pair
d5083 2
a5084 1
unpack(), nybbles are converted to a string of hexadecimal digits.
d5093 3
a5095 2
C<p> or C<P> is C<undef>; similarly with unpack(), where a null pointer
unpacks into C<undef>.
d5110 2
a5111 1
For C<pack>, you write I<length-item>C</>I<sequence-item>, and the
d5116 2
a5117 1
For C<pack>, I<sequence-item> may have a repeat count, in which case
d5122 2
a5123 1
For C<unpack>, an internal stack of integer arguments unpacked so far is
d5142 2
a5143 1
The I<length-item> is not returned explicitly from C<unpack>.
d5159 1
a5159 1
    printf "format s is %d, s! is %d\n", 
d5162 1
a5162 1
    printf "format l is %d, l! is %d\n", 
d5179 1
a5179 1
or programmatically via the C<Config> module:
d5187 1
a5187 1
C<$Config{longlongsize}> is undefined on systems without 
d5203 1
a5203 1
big-endian.  Alpha and MIPS can be either: Digital/Compaq uses (well, used) 
d5217 2
d5221 1
a5221 1
   printf("%#02x ", $_) for unpack("W*", pack L=>0x12345678); 
d5234 3
a5236 1
and C<"87654321"> are big-endian.
d5238 1
a5238 1
For portably packed integers, either use the formats C<n>, C<N>, C<v>, 
d5244 13
d5258 1
a5258 1
the C<p> and C<P> formats and C<()> groups, may all be followed by the 
d5260 2
a5261 2
or little-endian byte-order.  These modifiers are especially useful 
given how C<n>, C<N>, C<v>, and C<V> don't cover signed integers, 
d5268 1
a5268 1
=item * 
d5270 1
a5270 1
Exchanging signed integers between different platforms works only 
d5274 1
a5274 1
=item * 
d5280 1
a5280 1
=item * 
d5290 1
a5290 1
=item * 
d5314 1
a5314 1
all numeric calculation, converting from double into float and thence 
d5321 1
a5321 1
the packed string is processed per character, and UTF-8 mode (C<U0> mode)
d5325 2
a5326 2
can always switch mode mid-format with an explicit 
C<C0> or C<U0> in the format.  This mode remains in effect until the next 
d5329 1
a5329 1
Using C<C0> to get Unicode characters while using C<U0> to get I<non>-Unicode 
d5333 1
a5333 1
    $ perl -CS -E 'say "\x{3B1}\x{3C9}"' | 
d5336 1
a5336 1
    $ perl -CS -E 'say "\x{3B1}\x{3C9}"' | 
d5339 1
a5339 1
    $ perl -CS -E 'say "\x{3B1}\x{3C9}"' | 
d5342 1
a5342 1
    $ perl -CS -E 'say "\x{3B1}\x{3C9}"' | 
d5347 2
a5348 1
C<pack>/C<unpack> as a substitute for the L<Encode> module.
d5353 3
a5355 2
enough C<"x">es while packing.  There is no way for pack() and unpack()
to know where characters are going to or coming from, so they 
d5361 2
a5362 1
take a repeat count either as postfix, or for unpack(), also via the C</>
d5374 2
a5375 1
characters.  For example, to pack() or unpack() a C structure like
d5379 1
a5379 1
	double d; 
d5408 2
a5409 1
If TEMPLATE requires more arguments than pack() is given, pack()
d5413 7
d5492 2
a5493 1
The same template may generally also be used in unpack().
d5511 6
a5516 4
C<eval>).  That is, the forms without a BLOCK are operative through the end
of the current scope, just like the C<my>, C<state>, and C<our> operators.
All unqualified dynamic identifiers in this scope will be in the given
namespace, except where overridden by another C<package> declaration or
d5521 7
a5527 4
you've used C<local> on, but I<not> lexically-scoped variables, which are created
with C<my>, C<state>, or C<our>.  Typically it would be the first 
declaration in a file included by C<require> or C<use>.  You can switch into a
package in more than one place, since this only determines which default 
d5536 2
a5537 1
If VERSION is provided, C<package> sets the C<$VERSION> variable in the given
d5562 3
a5564 2
IO buffering, so you may need to set C<$|> to flush your WRITEHANDLE
after each command, depending on the application.
d5573 3
a5575 2
on all newly opened file descriptors whose C<fileno>s are I<higher> than 
the current value of $^F (by default 2 for C<STDERR>).  See L<perlvar/$^F>.
a5579 2
=item pop EXPR

d5587 10
a5596 15
Returns the undefined value if the array is empty, although this may also
happen at other times.  If ARRAY is omitted, pops the C<@@ARGV> array in the
main program, but the C<@@_> array in subroutines, just like C<shift>.

Starting with Perl 5.14, C<pop> can take a scalar EXPR, which must hold a
reference to an unblessed array.  The argument will be dereferenced
automatically.  This aspect of C<pop> is considered highly experimental.
The exact behaviour may change in a future version of Perl.

To avoid confusing would-be users of your code who are running earlier
versions of Perl with mysterious syntax errors, put this sort of thing at
the top of your file to signal that your code will work I<only> on Perls of
a recent vintage:

    use 5.014;	# so push/pop/etc work on scalars (experimental)
d5606 3
a5608 2
variable in question (C<$_> is used when the variable is not
specified).  Note that 0 is a valid match offset.  C<undef> indicates
d5612 7
a5618 6
C<pos> directly accesses the location used by the regexp engine to
store the offset, so assigning to C<pos> will change that offset, and
so will also influence the C<\G> zero-width assertion in regular
expressions.  Both of these effects take place for the next match, so
you can't affect the position with C<pos> during the current match,
such as in C<(?{pos() = 5})> or C<s//pos() = 5/e>.
d5620 2
a5621 1
Setting C<pos> also resets the I<matched with zero-length> flag, described
d5625 2
a5626 2
from C<pos> won't change either in this case.  See L<perlre> and
L<perlop>.
d5645 4
a5648 3
last selected (see L</select>) output handle.  If LIST is omitted, prints
C<$_> to the currently selected output handle.  To use FILEHANDLE alone to
print the content of C<$_> to it, you must use a real filehandle like
d5652 7
a5658 5
The current value of C<$,> (if any) is printed between each LIST item.  The
current value of C<$\> (if any) is printed after the entire LIST has been
printed.  Because print takes a LIST, anything in the LIST is evaluated in
list context, including any subroutines whose return lists you pass to
C<print>.  Be careful not to follow the print keyword with a left
d5686 16
a5701 14
Equivalent to C<print FILEHANDLE sprintf(FORMAT, LIST)>, except that C<$\>
(the output record separator) is not appended.  The FORMAT and the
LIST are actually parsed as a single list.  The first argument
of the list will be interpreted as the C<printf> format.  This
means that C<printf(@@_)> will use C<$_[0]> as the format.  See
L<sprintf|/sprintf FORMAT, LIST> for an
explanation of the format argument.  If C<use locale> (including
C<use locale ':not_characters'>) is in effect and
POSIX::setlocale() has been called, the character used for the decimal
separator in formatted floating-point numbers is affected by the LC_NUMERIC
locale setting.  See L<perllocale> and L<POSIX>.

For historical reasons, if you omit the list, C<$_> is used as the format;
to use FILEHANDLE without a list, you must use a real filehandle like
d5703 10
a5712 7
you want; if $_ contains formatting codes, they will be replaced with the
empty string and a warning will be emitted if warnings are enabled.  Just
use C<print> if you want to print the contents of $_.

Don't fall into the trap of using a C<printf> when a simple
C<print> would do.  The C<print> is more efficient and less
error prone.
d5717 2
d5721 2
a5722 1
Returns the prototype of a function as a string (or C<undef> if the
d5724 2
a5725 1
the function whose prototype you want to retrieve.
d5730 2
a5731 1
(such as C<system>), prototype() returns C<undef>, because the builtin
a5737 2
=item push EXPR,LIST

d5744 1
a5744 1
    for $value (LIST) {
d5749 1
a5749 1
the completed C<push>.
d5751 4
a5754 11
Starting with Perl 5.14, C<push> can take a scalar EXPR, which must hold a
reference to an unblessed array.  The argument will be dereferenced
automatically.  This aspect of C<push> is considered highly experimental.
The exact behaviour may change in a future version of Perl.

To avoid confusing would-be users of your code who are running earlier
versions of Perl with mysterious syntax errors, put this sort of thing at
the top of your file to signal that your code will work I<only> on Perls of
a recent vintage:

    use 5.014;	# so push/pop/etc work on scalars (experimental)
d5795 1
a5795 1
If EXPR is omitted, uses C<$_>.
d5821 2
a5822 2
Normally, when accepting literal string
input from the user, quotemeta() or C<\Q> must be used.
d5832 3
a5834 1
scope of a C<use feature 'unicode_strings'>, which is to quote all
d5840 2
a5841 1
Within the scope of C<use locale>, all non-ASCII Latin1 code points
d5894 2
a5895 1
C<srand> unless C<srand> has already been called.  See also C<srand>.
d5897 3
a5899 2
Apply C<int()> to the value returned by C<rand()> if you want random
integers instead of random fractional numbers.  For example,
d5909 1
a5909 1
B<C<rand()> is not cryptographically secure.  You should not rely
d5926 2
a5927 1
the latter case C<$!> is also set).  SCALAR will be grown or shrunk 
d5939 1
a5939 1
fread(3) library function.  To get a true read(2) system call, see
d5945 4
a5948 3
been opened with the C<:utf8> I/O layer (see L</open>, and the C<open>
pragma, L<open>), the I/O will operate on UTF8-encoded Unicode
characters, not bytes.  Similarly for the C<:encoding> pragma:
d5956 2
a5957 1
Returns the next directory entry for a directory opened by C<opendir>.
d5962 4
a5965 3
If you're planning to filetest the return values out of a C<readdir>, you'd
better prepend the directory in question.  Otherwise, because we didn't
C<chdir> there, it would have been testing the wrong file.
d5967 2
a5968 2
    opendir(my $dh, $some_dir) || die "can't opendir $some_dir: $!";
    @@dots = grep { /^\./ && -f "$some_dir/$_" } readdir($dh);
d5971 2
a5972 2
As of Perl 5.12 you can use a bare C<readdir> in a C<while> loop,
which will set C<$_> on every iteration.
d5974 2
a5975 2
    opendir(my $dh, $some_dir) || die;
    while(readdir $dh) {
d5997 10
a6006 8
subsequent call returns C<undef>.  In list context, reads until end-of-file
is reached and returns a list of lines.  Note that the notion of "line"
used here is whatever you may have defined with C<$/> or
C<$INPUT_RECORD_SEPARATOR>).  See L<perlvar/"$/">.

When C<$/> is set to C<undef>, when C<readline> is in scalar
context (i.e., file slurp mode), and when an empty file is read, it
returns C<''> the first time, followed by C<undef> subsequently.
d6012 2
a6013 2
    $line = <STDIN>;
    $line = readline(*STDIN);    # same thing
d6015 6
a6020 5
If C<readline> encounters an operating system error, C<$!> will be set
with the corresponding error message.  It can be helpful to check
C<$!> when you are reading from filehandles you don't trust, such as a
tty or a socket.  The following example uses the operator form of
C<readline> and dies if the result is not defined.
d6023 1
a6023 1
        defined( $_ = <$fh> ) or die "readline failed: $!";
d6027 4
a6030 3
Note that you have can't handle C<readline> errors that way with the
C<ARGV> filehandle.  In that case, you have to open each element of
C<@@ARGV> yourself since C<eof> handles C<ARGV> differently.
d6036 1
a6036 1
            defined( $_ = <$fh> )
d6051 2
a6052 2
error, returns the undefined value and sets C<$!> (errno).  If EXPR is
omitted, uses C<$_>.
d6067 2
a6068 1
(however you've defined lines with C<$/> or C<$INPUT_RECORD_SEPARATOR>).
d6072 1
a6072 1
If EXPR is omitted, uses C<$_>.
d6085 1
a6085 1
This call is actually implemented in terms of recvfrom(2) system call.
d6091 4
a6094 3
binmode() to operate with the C<:encoding(utf8)> I/O layer (see the
C<open> pragma, L<open>), the I/O will operate on UTF8-encoded Unicode
characters, not bytes.  Similarly for the C<:encoding> pragma: in that
d6106 3
a6108 2
The C<redo> command restarts the loop block without evaluating the
conditional again.  The C<continue> block, if any, is not executed.  If
d6112 1
a6112 1
LABEL>.  Programs that want to lie to themselves about what was just input 
d6121 1
a6121 1
            $front = $_;
d6132 4
a6135 3
C<redo> cannot be used to retry a block that returns a value such as
C<eval {}>, C<sub {}>, or C<do {}>, and should not be used to exit
a grep() or map() operation.
d6138 2
a6139 2
that executes once.  Thus C<redo> inside such a block will effectively
turn it into a looping construct.
d6141 3
a6143 2
See also L</continue> for an illustration of how C<last>, C<next>, and
C<redo> work.
d6148 1
a6148 1
C<redo>.
d6158 3
a6160 2
string otherwise.  If EXPR is not specified, C<$_> will be used.  The
value returned depends on the type of thing the reference is a reference to.
d6176 1
a6176 1
You can think of C<ref> as a C<typeof> operator.
d6187 4
a6190 2
C<pos()> or C<substr()>.  C<VSTRING> is returned if the reference points
to a L<version string|perldata/"Version Strings">.
d6193 1
a6193 1
resulting from C<qr//>.
d6198 10
a6207 7
C<Regexp> or C<IO>, or even C<HASH>.  Also, C<ref> doesn't take into account
subclasses, like C<isa> does.

Instead, use C<blessed> (in the L<Scalar::Util> module) for boolean
checks, C<isa> for specific class checks and C<reftype> (also from
L<Scalar::Util>) for type checks.  (See L<perlobj> for details and a
C<blessed/isa> example.)
d6224 1
a6224 1
rename(2) manpage or equivalent system documentation for details.
d6226 2
a6227 2
For a platform independent C<move> function look at the L<File::Copy>
module.
d6241 1
a6241 1
specified by EXPR or by C<$_> if EXPR is not supplied.
d6244 6
a6249 4
compared to C<$]>, or a literal of the form v5.6.1, which will be compared
to C<$^V> (aka $PERL_VERSION).  An exception is raised if
VERSION is greater than the version of the current Perl interpreter.
Compare with L</use>, which can do a similar check at compile time.
d6261 4
a6264 3
Otherwise, C<require> demands that a library file be included if it
hasn't already been included.  The file is included via the do-FILE
mechanism, which is essentially just a variety of C<eval> with the
d6323 2
a6324 2
If EXPR is a bareword, the require assumes a "F<.pm>" extension and
replaces "F<::>" with "F</>" in the filename for you,
d6332 2
a6333 2
The require function will actually look for the "F<Foo/Bar.pm>" file in the
directories specified in the C<@@INC> array.
d6337 1
a6337 1
        $class = 'Foo::Bar';
d6342 3
a6344 2
The require function will look for the "F<Foo::Bar>" file in the @@INC array and
will complain about not finding "F<Foo::Bar>" there.  In this case you can do:
d6348 6
a6353 6
Now that you understand how C<require> looks for files with a
bareword argument, there is a little extra functionality going on behind
the scenes.  Before C<require> looks for a "F<.pm>" extension, it will
first look for a similar filename with a "F<.pmc>" extension.  If this file
is found, it will be loaded in place of any file ending in a "F<.pm>"
extension.
d6356 2
a6357 2
directly into the @@INC array.  There are three forms of hooks: subroutine
references, array references, and blessed objects.
d6360 5
a6364 5
walks through @@INC and encounters a subroutine, this subroutine gets
called with two parameters, the first a reference to itself, and the
second the name of the file to be included (e.g., "F<Foo/Bar.pm>").  The
subroutine should return either nothing or else a list of up to four 
values in the following order:
d6375 1
a6375 1
A filehandle, from which the file will be read.  
d6381 4
a6384 3
call, writing the line into C<$_> and returning 1, then finally at end of
file returning 0.  If there is a filehandle, then the subroutine will be
called to act as a simple source filter, with the line as read in C<$_>.
d6395 3
a6397 2
If an empty list, C<undef>, or nothing that matches the first 3 values above
is returned, then C<require> looks at the remaining elements of @@INC.
d6399 1
a6399 1
or reference to a typeglob, whether blessed or unblessed); tied filehandles 
d6421 1
a6421 1
        my @@parameters = @@$arrayref[1..$#$arrayref];
d6425 1
a6425 1
If the hook is an object, it must provide an INC method that will be
d6441 1
a6441 1
These hooks are also permitted to set the %INC entry
d6444 2
a6445 1
For a yet-more-powerful import facility, see L</use> and L<perlmod>.
d6454 3
a6456 2
Generally used in a C<continue> block at the end of a loop to clear
variables and reset C<??> searches so that they work again.  The
d6460 1
a6460 1
omitted, one-match searches (C<?pattern?>) are reset to match again.  
d6466 1
a6466 1
    reset;          # just reset ?one-time? searches
d6469 5
a6473 4
C<@@ARGV> and C<@@INC> arrays and your C<%ENV> hash.  Resets only package
variables; lexical variables are unaffected, but they clean themselves
up on scope exit anyway, so you'll probably want to use them instead.
See L</my>.
d6482 4
a6485 1
Returns from a subroutine, C<eval>, or C<do FILE> with the value
d6488 2
a6489 1
may vary from one execution to the next (see L</wantarray>).  If no EXPR
d6493 3
a6495 2
(In the absence of an explicit C<return>, a subroutine, eval,
or do FILE automatically returns the value of the last expression
d6500 1
a6500 1
cause "bar" to be part of the argument to C<return>.
d6516 2
a6517 1
Used without arguments in scalar context, reverse() reverses C<$_>.
d6533 1
a6533 1
    %by_name = reverse %by_address;  # Invert the hash
d6541 1
a6541 1
C<readdir> routine on DIRHANDLE.
d6552 2
a6553 1
Works just like index() except that it returns the position of the I<last>
d6566 2
a6567 1
sets C<$!> (errno).  If FILENAME is omitted, uses C<$_>.
d6570 2
a6571 1
the C<rmtree> function of the L<File::Path> module.
d6590 11
a6600 9
Just like C<print>, but implicitly appends a newline.  C<say LIST> is
simply an abbreviation for C<{ local $\ = "\n"; print LIST }>.  To use
FILEHANDLE without a LIST to print the contents of C<$_> to it, you must
use a real filehandle like C<FH>, not an indirect one like C<$fh>.

This keyword is available only when the C<"say"> feature
is enabled, or when prefixed with C<CORE::>; see
L<feature>.  Alternately, include a C<use v5.10> or later to the current
scope.
d6610 1
a6610 1
    @@counts = ( scalar @@a, scalar @@b, scalar @@c );
d6618 2
a6619 1
Because C<scalar> is a unary operator, if you accidentally use a
d6626 1
a6626 1
    print uc(scalar(&foo,$bar)),$baz;
d6630 2
a6631 2
    &foo;
    print(uc($bar),$baz);
d6633 2
a6634 1
See L<perlop> for more details on unary operators and the comma operator.
d6641 1
a6641 1
Sets FILEHANDLE's position, just like the C<fseek> call of C<stdio>.
d6653 11
a6663 6
layer), tell() will return byte offsets, not character offsets
(because implementing that would render seek() and tell() rather slow).

If you want to position the file for C<sysread> or C<syswrite>, don't use
C<seek>, because buffering makes its effect on the file's read-write position
unpredictable and non-portable.  Use C<sysseek> instead.
d6667 1
a6667 1
things, this may have the effect of calling stdio's clearerr(3).
d6670 1
a6670 1
    seek(TEST,0,1);
d6674 2
a6675 1
dummy seek() to reset things.  The C<seek> doesn't change the position,
d6677 1
a6677 1
next C<< <FILE> >> makes Perl try again to read something.  (We hope.)
d6683 2
a6684 2
        for ($curpos = tell(FILE); $_ = <FILE>;
             $curpos = tell(FILE)) {
d6688 1
a6688 1
        seek(FILE, $curpos, 0);
d6696 5
a6700 4
Sets the current position for the C<readdir> routine on DIRHANDLE.  POS
must be a value returned by C<telldir>.  C<seekdir> also has the same caveats
about possible directory compaction as the corresponding system library
routine.
d6711 2
a6712 1
effects: first, a C<write> or a C<print> without a filehandle 
d6714 1
a6714 1
output will refer to this output channel.  
d6727 1
a6727 1
    $oldfh = select(STDERR); $| = 1; select($oldfh);
a6731 1
    use IO::Handle;
d6734 3
d6742 3
a6744 2
This calls the select(2) syscall with the bit masks specified, which
can be constructed using C<fileno> and C<vec>, along these lines:
d6746 1
a6746 1
    $rin = $win = $ein = '';
d6762 1
a6762 1
    $rin = fhbits(*STDIN, *TTY, *MYSOCK);
d6766 3
a6768 2
    ($nfound,$timeleft) =
      select($rout=$rin, $wout=$win, $eout=$ein, $timeout);
d6772 2
a6773 1
    $nfound = select($rout=$rin, $wout=$win, $eout=$ein, undef);
d6775 3
a6777 2
Most systems do not bother to return anything useful in $timeleft, so
calling select() in scalar context just returns $nfound.
d6779 2
a6780 1
Any of the bit masks can also be undef.  The timeout, if specified, is
d6782 2
a6783 2
capable of returning the $timeleft.  If not, they always return
$timeleft equal to the supplied $timeout.
d6789 25
a6813 18
Note that whether C<select> gets restarted after signals (say, SIGALRM)
is implementation-dependent.  See also L<perlport> for notes on the
portability of C<select>.

On error, C<select> behaves just like select(2): it returns
-1 and sets C<$!>.

On some Unixes, select(2) may report a socket file descriptor as "ready for
reading" even when no data is available, and thus any subsequent C<read>
would block.  This can be avoided if you always use O_NONBLOCK on the
socket.  See select(2) and fcntl(2) for further details.

The standard C<IO::Select> module provides a user-friendlier interface
to C<select>, mostly because it does all the bit-mask work for you.

B<WARNING>: One should not attempt to mix buffered I/O (like C<read>
or <FH>) with C<select>, except as permitted by POSIX, and even
then only on POSIX systems.  You have to use C<sysread> instead.
d6822 1
a6822 1
Calls the System V IPC function semctl(2).  You'll probably have to say
d6828 2
a6829 1
semid_ds structure or semaphore value array.  Returns like C<ioctl>:
d6833 2
a6834 2
See also L<perlipc/"SysV IPC">, C<IPC::SysV>, C<IPC::Semaphore>
documentation.
d6843 1
a6843 1
Calls the System V IPC function semget(2).  Returns the semaphore id, or
d6845 2
a6846 2
L<perlipc/"SysV IPC">, C<IPC::SysV>, C<IPC::SysV::Semaphore>
documentation.
d6855 1
a6855 1
Calls the System V IPC function semop(2) for semaphore operations
d6858 1
a6858 1
C<pack("s!3", $semnum, $semop, $semflag)>.  The length of OPSTRING 
d6863 1
a6863 1
    $semop = pack("s!3", $semnum, -1, 0);
d6867 2
a6868 2
L<perlipc/"SysV IPC">, C<IPC::SysV>, and C<IPC::SysV::Semaphore>
documentation.
d6882 2
a6883 2
case it does a sendto(2) syscall.  Returns the number of characters sent,
or the undefined value on error.  The sendmsg(2) syscall is currently
d6889 3
a6891 2
binmode() to operate with the C<:encoding(utf8)> I/O layer (see
L</open>, or the C<open> pragma, L<open>), the I/O will operate on UTF-8
d6893 1
a6893 1
pragma: in that case pretty much any characters can be sent.
d6902 5
a6906 4
implement POSIX setpgid(2) or BSD setpgrp(2).  If the arguments are omitted,
it defaults to C<0,0>.  Note that the BSD 4.2 version of C<setpgrp> does not
accept any arguments, so only C<setpgrp(0,0)> is portable.  See also
C<POSIX::setsid()>.
d6916 2
a6917 2
(See setpriority(2).)  Raises an exception when used on a machine
that doesn't implement setpriority(2).
d6926 3
a6928 2
Sets the socket option requested.  Returns C<undef> on error.
Use integer constants provided by the C<Socket> module for
a6942 2
=item shift EXPR

d6950 3
a6952 2
C<@@_> array within the lexical scope of subroutines and formats, and the
C<@@ARGV> array outside a subroutine and also within the lexical scopes
d6956 10
a6965 15
Starting with Perl 5.14, C<shift> can take a scalar EXPR, which must hold a
reference to an unblessed array.  The argument will be dereferenced
automatically.  This aspect of C<shift> is considered highly experimental.
The exact behaviour may change in a future version of Perl.

To avoid confusing would-be users of your code who are running earlier
versions of Perl with mysterious syntax errors, put this sort of thing at
the top of your file to signal that your code will work I<only> on Perls of
a recent vintage:

    use 5.014;	# so push/pop/etc work on scalars (experimental)

See also C<unshift>, C<push>, and C<pop>.  C<shift> and C<unshift> do the
same thing to the left end of an array that C<pop> and C<push> do to the
right end.
d6978 4
a6981 3
structure.  Returns like ioctl: C<undef> for error; "C<0> but
true" for zero; and the actual return value otherwise.
See also L<perlipc/"SysV IPC"> and C<IPC::SysV> documentation.
d6991 3
a6993 2
segment id, or C<undef> on error.
See also L<perlipc/"SysV IPC"> and C<IPC::SysV> documentation.
d7013 4
a7016 2
shmread() taints the variable.  See also L<perlipc/"SysV IPC">,
C<IPC::SysV>, and the C<IPC::Shareable> module from CPAN.
d7028 3
a7030 3
    shutdown(SOCKET, 0);    # I/we have stopped reading data
    shutdown(SOCKET, 1);    # I/we have stopped writing data
    shutdown(SOCKET, 2);    # I/we have stopped using this socket
d7038 1
a7038 1
Returns C<1> for success; on error, returns C<undef> if
d7040 1
a7040 1
C<$!> for any other failure.
d7050 1
a7050 1
returns sine of C<$_>.
d7064 2
a7065 2
Causes the script to sleep for (integer) EXPR seconds, or forever if no 
argument is given.  Returns the integer number of seconds actually slept.  
d7070 1
a7070 1
        local $SIG{ALARM} = sub { die "Alarm!\n" };
d7075 3
a7077 2
You probably cannot mix C<alarm> and C<sleep> calls, because C<sleep>
is often implemented using C<alarm>.
d7085 8
a7092 6
For delays of finer granularity than one second, the Time::HiRes module
(from CPAN, and starting from Perl 5.8 part of the standard
distribution) provides usleep().  You may also use Perl's four-argument
version of select() leaving the first three arguments undefined, or you
might be able to use the C<syscall> interface to access setitimer(2) if
your system supports it.  See L<perlfaq8> for details.
d7094 1
a7094 1
See also the POSIX module's C<pause> function.
d7109 1
a7109 1
value of $^F.  See L<perlvar/$^F>.
d7123 1
a7123 1
of $^F.  See L<perlvar/$^F>.
d7125 3
a7127 2
Some systems defined C<pipe> in terms of C<socketpair>, in which a call
to C<pipe(Rdr, Wtr)> is essentially:
d7130 3
a7132 3
    socketpair(Rdr, Wtr, AF_UNIX, SOCK_STREAM, PF_UNSPEC);
    shutdown(Rdr, 1);        # no more writing for reader
    shutdown(Wtr, 0);        # no more reading for writer
d7150 2
a7151 1
In scalar context, the behaviour of C<sort()> is undefined.
d7153 2
a7154 1
If SUBNAME or BLOCK is omitted, C<sort>s in standard string comparison
d7157 1
a7157 1
depending on how the elements of the list are to be ordered.  (The 
d7165 10
a7174 9
passed by reference in C<@@_>, as for a normal subroutine.  This is slower
than unprototyped subroutines, where the elements to be compared are passed
into the subroutine as the package global variables $a and $b (see example
below).  Note that in the latter case, it is usually highly counter-productive
to declare $a and $b as lexicals.

If the subroutine is an XSUB, the elements to be compared are pushed on to
the stack, the way arguments are usually passed to XSUBs.  $a and $b are
not set.
d7180 2
a7181 1
loop control operators described in L<perlsyn> or with C<goto>.
d7183 2
a7184 2
When C<use locale> (but not C<use locale 'not_characters'>) is in
effect, C<sort LIST> sorts LIST according to the
d7187 5
a7191 3
sort() returns aliases into the original list, much as a for loop's index
variable aliases the list elements.  That is, modifying an element of a
list returned by sort() (for example, in a C<foreach>, C<map> or C<grep>)
d7196 1
a7196 1
That algorithm was not stable, so I<could> go quadratic.  (A I<stable> sort
d7203 1
a7203 1
the original quicksort was faster.  5.8 has a sort pragma for
d7207 1
a7207 1
independent ways quite probably will.  See L<the sort pragma|sort>.
d7212 1
a7212 1
    @@articles = sort @@files;
d7215 1
a7215 1
    @@articles = sort {$a cmp $b} @@files;
d7218 1
a7218 1
    @@articles = sort {fc($a) cmp fc($b)} @@files;
d7221 1
a7221 1
    @@articles = sort {$b cmp $a} @@files;
d7224 1
a7224 1
    @@articles = sort {$a <=> $b} @@files;
d7227 1
a7227 1
    @@articles = sort {$b <=> $a} @@files;
d7231 1
a7231 1
    @@eldest = sort { $age{$b} <=> $age{$a} } keys %age;
d7237 1
a7237 1
    @@sortedclass = sort byage @@class;
d7240 2
a7241 2
    @@harry  = qw(dog cat x Cain Abel);
    @@george = qw(gone chased yz Punished Axed);
d7262 1
a7262 1
    my @@nums = @@caps = ();
d7276 1
a7276 1
    @@new = map { $_->[0] }
d7284 1
a7284 1
    package other;
d7286 1
a7286 1
                                             # not set here    
d7288 1
a7288 1
    @@new = sort other::backwards @@old;
d7292 1
a7292 1
    @@new = sort { substr($a, 3, 5) cmp substr($b, 3, 5) } @@old;
d7296 1
a7296 1
    @@new = sort { substr($a, 3, 5) cmp substr($b, 3, 5) } @@old;
d7302 4
a7305 4
    @@contact = sort { $a cmp $b } find_records @@key;
    @@contact = sort +find_records(@@key);
    @@contact = sort &find_records(@@key);
    @@contact = sort(find_records(@@key));
d7307 1
a7307 1
If instead you want to sort the array @@key with the comparison routine
d7310 4
a7313 4
    @@contact = sort { find_records() } @@key;
    @@contact = sort find_records(@@key);
    @@contact = sort(find_records @@key);
    @@contact = sort(find_records (@@key));
d7315 2
a7316 2
If you're using strict, you I<must not> declare $a
and $b as lexicals.  They are package globals.  That means
d7319 1
a7319 1
    @@articles = sort {$b <=> $a} @@files;
d7324 1
a7324 1
    @@articles = sort {$FooPack::b <=> $FooPack::a} @@files;
d7331 2
a7332 2
Because C<< <=> >> returns C<undef> when either operand is C<NaN>
(not-a-number), be careful when sorting with a
d7337 1
a7337 1
    @@result = sort { $a <=> $b } grep { $_ == $_ } @@input;
d7339 1
a7339 1
=item splice ARRAY or EXPR,OFFSET,LENGTH,LIST
d7342 1
a7342 1
=item splice ARRAY or EXPR,OFFSET,LENGTH
d7344 1
a7344 1
=item splice ARRAY or EXPR,OFFSET
d7346 1
a7346 1
=item splice ARRAY or EXPR
d7353 2
a7354 1
returns the last element removed, or C<undef> if no elements are
d7372 2
a7373 1
C<splice> can be used, for example, to implement n-ary queue processing:
d7388 4
a7391 11
Starting with Perl 5.14, C<splice> can take scalar EXPR, which must hold a
reference to an unblessed array.  The argument will be dereferenced
automatically.  This aspect of C<splice> is considered highly experimental.
The exact behaviour may change in a future version of Perl.

To avoid confusing would-be users of your code who are running earlier
versions of Perl with mysterious syntax errors, put this sort of thing at
the top of your file to signal that your code will work I<only> on Perls of
a recent vintage:

    use 5.014;	# so push/pop/etc work on scalars (experimental)
d7407 1
a7407 1
If only PATTERN is given, EXPR defaults to C<$_>.
d7421 1
a7421 1
    print join(':', split('b', 'abc')), "\n";
d7423 1
a7423 1
uses the 'b' in 'abc' as a separator to produce the output 'a:c'.
d7426 1
a7426 1
    print join(':', split('', 'abc')), "\n";
d7429 1
a7429 1
'a:b:c'; thus, the empty string may be used to split EXPR into a
d7432 4
a7435 2
As a special case for C<split>, the empty pattern given in
L<match operator|perlop/"m/PATTERN/msixpodualgc"> syntax (C<//>) specifically matches the empty string, which is contrary to its usual
d7442 5
a7446 3
As another special case, C<split> emulates the default behavior of the
command line tool B<awk> when the PATTERN is either omitted or a I<literal
string> composed of a single space character (such as S<C<' '>> or
d7455 2
a7456 2
pattern argument to split, in Perl 5.18.0 and later this special case is
triggered by any expression which evaluates as the simple string S<C<" ">>.
d7470 1
a7470 1
produces the output 'abc', and this:
d7474 1
a7474 1
produces the output 'a:bc', and each of these:
d7479 1
a7479 1
produces the output 'a:b:c'.
d7490 1
a7490 1
    print join(':', split(',', 'a,b,c,,,')), "\n";
d7492 1
a7492 1
produces the output 'a:b:c', but the following:
d7494 1
a7494 1
    print join(':', split(',', 'a,b,c,,,', -1)), "\n";
d7496 1
a7496 1
produces the output 'a:b:c:::'.
d7504 1
a7504 1
    ($login, $passwd) = split(/:/);
d7514 1
a7514 1
produces the output ':abc'.  However, a zero-width match at the
d7519 1
a7519 1
produces the output S<' :a:b:c'> (rather than S<': :a:b:c'>).
d7528 1
a7528 1
produces the output S<' :a:b:c:'>.
d7535 2
a7536 1
match, then it captures the C<undef> value instead of a substring.  Also,
d7563 5
a7567 4
Returns a string formatted by the usual C<printf> conventions of the C
library function C<sprintf>.  See below for more details
and see L<sprintf(3)> or L<printf(3)> on your system for an explanation of
the general principles.
d7572 1
a7572 1
        $result = sprintf("%08d", $number);
d7575 1
a7575 1
        $rounded = sprintf("%.3f", $number);
d7577 5
a7581 4
Perl does its own C<sprintf> formatting: it emulates the C
function sprintf(3), but doesn't use it except for floating-point
numbers, and even then only standard modifiers are allowed.  
Non-standard extensions in your local sprintf(3) are 
d7584 3
a7586 2
Unlike C<printf>, C<sprintf> does not do what you probably mean when you
pass it an array as your first argument. 
d7592 2
a7593 1
Perl's C<sprintf> permits the following universally-known conversions:
d7616 2
d7632 3
a7634 1
99th may be either "1.23e99" or "1.23e099".
d7666 2
d7669 2
d7681 1
a7681 1
a plus sign is used to prefix a positive number.
d7749 1
a7749 1
including those prior to the decimal point and those after it; for 
d7785 2
a7786 1
You can also get the precision from the next argument using C<.*>:
d7791 4
a7806 7
You cannot currently get the precision from a specified number,
but it is intended that this will be possible in the future, for
example using C<.*2$>:

  printf '<%.*2$x>', 1, 6;   # INVALID, but in future will print
                             # "<000001>"

d7835 2
a7836 2
C<printf> warning class is issued on an unsupported conversion flag.  
Should you instead prefer an exception, do this:
d7882 2
a7883 1
Normally, sprintf() takes the next unused argument as the value to
d7907 5
a7911 4
  printf "%2\$d %d\n",    12, 34;      # will print "34 12\n"
  printf "%2\$d %d %d\n", 12, 34;      # will print "34 12 34\n"
  printf "%3\$d %d %d\n", 12, 34, 56;  # will print "56 12 34\n"
  printf "%2\$*3\$d %d\n", 12, 34, 3;  # will print " 34 12\n"
d7915 3
a7917 2
If C<use locale> (including C<use locale 'not_characters'>) is in effect
and POSIX::setlocale() has been called,
d7919 1
a7919 1
numbers is affected by the LC_NUMERIC locale.  See L<perllocale>
d7930 2
a7931 2
C<$_>.  Works only for non-negative operands unless you've
loaded the C<Math::Complex> module.
d7943 2
a7944 1
Sets and returns the random number seed for the C<rand> operator.
d7946 4
a7949 3
The point of the function is to "seed" the C<rand> function so that C<rand>
can produce a different sequence each time you run your program.  When
called with a parameter, C<srand> uses that for the seed; otherwise it
d7956 9
a7964 8
If C<srand()> is not called explicitly, it is called implicitly without a
parameter at the first use of the C<rand> operator.
However, there are a few situations where programs are likely to
want to call C<srand>.  One is for generating predictable results, generally for
testing or debugging.  There, you use C<srand($seed)>, with the same C<$seed>
each time.  Another case is that you may want to call C<srand()>
after a C<fork()> to avoid child processes sharing the same seed value as the
parent (and consequently each other).
d7969 1
a7969 1
C<srand()> again actually I<loses> randomness.
d7971 2
a7972 1
Most implementations of C<srand> take an integer and will silently
d7975 1
a7975 1
C<srand> an integer.
d7982 1
a7982 1
B<C<rand()> is not cryptographically secure.  You should not rely
d8001 3
a8003 2
the file opened via FILEHANDLE or DIRHANDLE, or named by EXPR.  If EXPR is 
omitted, it stats C<$_> (not C<_>!).  Returns the empty list if C<stat> fails.  Typically
d8006 2
a8007 2
    ($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$size,
       $atime,$mtime,$ctime,$blksize,$blocks)
d8035 4
a8038 3
If C<stat> is passed the special filehandle consisting of an underline, no
stat is done, but the current contents of the stat structure from the
last C<stat>, C<lstat>, or filetest are returned.  Example:
d8051 1
a8051 1
    $mode = (stat($filename))[2];
d8054 2
a8055 1
In scalar context, C<stat> returns a boolean value indicating success
d8062 1
a8062 1
    $sb = stat($filename);
d8068 1
a8068 1
(C<S_IS*>) from the Fcntl module:
d8072 1
a8072 1
    $mode = (stat($filename))[2];
d8074 3
a8076 3
    $user_rwx      = ($mode & S_IRWXU) >> 6;
    $group_read    = ($mode & S_IRGRP) >> 3;
    $other_execute =  $mode & S_IXOTH;
d8080 2
a8081 2
    $is_setuid     =  $mode & S_ISUID;
    $is_directory  =  S_ISDIR($mode);
d8128 1
a8128 1
See your native chmod(2) and stat(2) documentation for more details
d8130 2
a8131 1
instead of the target file behind the link, use the C<lstat> function.
d8146 2
a8147 1
C<state> declares a lexically scoped variable, just like C<my>.
d8154 2
a8155 1
parentheses.  With a parenthesised list, C<undef> can be used as a
d8159 7
a8165 4
C<state> variables are enabled only when the C<use feature "state"> pragma 
is in effect, unless the keyword is written as C<CORE::state>.
See also L<feature>. Alternately, include a C<use v5.10> or later to the
current scope.
d8174 5
a8178 1
May take extra time to study SCALAR (C<$_> if unspecified) in anticipation
d8187 2
a8188 4
Note that since Perl version 5.16 this function has been a no-op, but
this might change in a future release.

(The way C<study> works is this: a linked list of every
d8207 2
a8208 1
In searching for C</\bfoo\b/>, only locations in C<$_> that contain C<f>
d8215 5
a8219 4
runtime, you can build an entire loop as a string and C<eval> that to
avoid recompiling all your patterns all the time.  Together with
undefining C<$/> to input entire files as one record, this can be quite
fast, often faster than specialized programs like fgrep(1).  The following
d8223 2
a8224 2
    $search = 'while (<>) { study;';
    foreach $word (@@words) {
d8229 1
a8229 1
    undef $/;
d8231 1
a8231 2
    $/ = "\n";        # put back to normal input delimiter
    foreach $file (sort keys(%seen)) {
d8261 1
a8261 1
C<undef> outside of a subroutine.
d8263 2
a8264 2
The behaviour of C<__SUB__> within a regex code block (such as C</(?{...})/>)
is subject to change.
d8266 3
a8268 2
This token is only available under C<use v5.16> or the "current_sub"
feature.  See L<feature>.
d8292 2
a8293 1
You can use the substr() function as an lvalue, in which case EXPR
d8297 2
a8298 1
length, you may need to pad or chop your value using C<sprintf>.
d8302 2
a8303 1
is beyond either end of the string, substr() returns the undefined
d8314 3
a8316 1
An alternative to using substr() as an lvalue is to specify the
d8319 2
a8320 1
just as you can with splice().
d8326 2
a8327 1
Note that the lvalue returned by the three-argument version of substr() acts as
d8331 1
a8331 1
    $x = '1234';
d8342 1
a8342 1
    $x = '1234';
d8363 1
a8363 1
    $symlink_exists = eval { symlink("",""); 1 };
d8379 3
a8381 3
string literal (or other read-only string) as an argument to C<syscall>
because Perl has to assume that any string pointer might be written
through.  If your
d8384 3
a8386 1
like numbers.  This emulates the C<syswrite> function (or vice versa):
d8389 2
a8390 2
    $s = "hi there\n";
    syscall(&SYS_write, fileno(STDOUT), $s, length $s);
d8396 2
a8397 1
If the system call fails, C<syscall> returns C<-1> and sets C<$!> (errno).
d8399 3
a8401 2
way to handle such calls is to assign C<$!=0> before the call, then
check the value of C<$!> if C<syscall> returns C<-1>.
d8403 1
a8403 1
There's a problem with C<syscall(&SYS_pipe)>: it returns the file
d8406 1
a8406 1
problem by using C<pipe> instead.
d8420 1
a8420 1
function calls the underlying operating system's I<open>(2) function with the
d8423 2
d8426 3
a8428 2
system-dependent; they are available via the standard module C<Fcntl>.  See
the documentation of your operating system's I<open>(2) syscall to see
d8443 2
a8444 1
If the file named by FILENAME does not exist and the C<open> call creates
d8447 2
a8448 1
the PERMS argument to C<sysopen>, Perl uses the octal value C<0666>.
d8450 1
a8450 1
process's current C<umask>.
d8455 3
a8457 1
if the file already exists, sysopen() fails.  C<O_EXCL> may not work
d8469 2
a8470 1
You should seldom if ever use C<0644> as argument to C<sysopen>, because
d8472 1
a8472 2
Better to omit it.  See the perlfunc(1) entry on C<umask> for more
on this.
d8474 7
a8480 4
Note that C<sysopen> depends on the fdopen() C library function.
On many Unix systems, fdopen() is known to fail when file descriptors
exceed a certain value, typically 255.  If you need more file
descriptors than that, consider using the POSIX::open() function.
d8494 7
a8500 4
specified FILEHANDLE, using the read(2).  It bypasses
buffered IO, so mixing this with other kinds of reads, C<print>,
C<write>, C<seek>, C<tell>, or C<eof> can cause confusion because the
perlio or stdio layers usually buffers data.  Returns the number of
d8502 2
a8503 1
error (in the latter case C<$!> is also set).  SCALAR will be grown or
d8514 4
a8517 3
There is no syseof() function, which is ok, since eof() doesn't work
well on device files (like ttys) anyway.  Use sysread() and check
for a return value for 0 to decide whether you're done.
d8519 1
a8519 1
Note that if the filehandle has been marked as C<:utf8> Unicode
d8521 5
a8525 3
return value of sysread() are in Unicode characters).
The C<:encoding(...)> layer implicitly introduces the C<:utf8> layer.
See L</binmode>, L</open>, and the C<open> pragma, L<open>.
d8532 1
a8532 1
Sets FILEHANDLE's system position in bytes using lseek(2).  FILEHANDLE may
d8540 13
a8552 6
tell() will return byte offsets, not character offsets (because
implementing that would render sysseek() unacceptably slow).

sysseek() bypasses normal buffered IO, so mixing it with reads other
than C<sysread> (for example C<< <> >> or read()) C<print>, C<write>,
C<seek>, C<tell>, or C<eof> may cause confusion.
d8556 1
a8556 1
from the Fcntl module.  Use of the constants is also more portable
d8563 2
a8564 1
of zero is returned as the string C<"0 but true">; thus C<sysseek> returns
d8575 1
a8575 1
Does exactly the same thing as C<exec LIST>, except that a fork is
d8594 3
a8596 2
to set C<$|> ($AUTOFLUSH in English) or call the C<autoflush()> method
of C<IO::Handle> on any open handles.
d8599 15
a8613 12
C<wait> call.  To get the actual exit value, shift right by eight (see
below).  See also L</exec>.  This is I<not> what you want to use to capture
the output from a command; for that you should use merely backticks or
C<qx//>, as described in L<perlop/"`STRING`">.  Return value of -1
indicates a failure to start the program or an error of the wait(2) system
call (inspect $! for the reason).

If you'd like to make C<system> (and many other bits of Perl) die on error,
have a look at the L<autodie> pragma.

Like C<exec>, C<system> allows you to lie to a program about its name if
you use the C<system PROGRAM LIST> syntax.  Again, see L</exec>.
d8616 3
a8618 3
C<system>, if you expect your program to terminate on receipt of these
signals you will need to arrange to do so yourself based on the return
value.
d8620 1
a8620 1
    @@args = ("command", "arg1", "arg2");
d8622 1
a8622 1
        or die "system @@args failed: $?"
d8624 3
a8626 2
If you'd like to manually inspect C<system>'s failure, you can check all
possible failure modes by inspecting C<$?> like this:
d8639 7
a8645 2
Alternatively, you may inspect the value of C<${^CHILD_ERROR_NATIVE}>
with the C<W*()> calls from the POSIX module.
d8647 3
a8649 6
When C<system>'s arguments are executed indirectly by the shell, 
results and return codes are subject to its quirks.
See L<perlop/"`STRING`"> and L</exec> for details.

Since C<system> does a C<fork> and C<wait> it may affect a C<SIGCHLD>
handler.  See L<perlipc> for details.
d8663 1
a8663 1
specified FILEHANDLE, using write(2).  If LENGTH is
d8665 8
a8672 5
mixing this with reads (other than C<sysread())>, C<print>, C<write>,
C<seek>, C<tell>, or C<eof> may cause confusion because the perlio and
stdio layers usually buffer data.  Returns the number of bytes
actually written, or C<undef> if there was an error (in this case the
errno variable C<$!> is also set).  If the LENGTH is greater than the
d8683 2
a8684 1
return value of syswrite() are in (UTF8-encoded Unicode) characters.
d8688 2
a8689 1
See L</binmode>, L</open>, and the C<open> pragma, L<open>.
d8705 18
a8722 12
layer), tell() will return byte offsets, not character offsets (because
that would render seek() and tell() rather slow).

The return value of tell() for the standard streams like the STDIN
depends on the operating system: it may return -1 or something else.
tell() on pipes, fifos, and sockets usually returns -1.

There is no C<systell> function.  Use C<sysseek(FH, 0, 1)> for that.

Do not use tell() (or other buffered I/O operations) on a filehandle
that has been manipulated by sysread(), syswrite(), or sysseek().
Those functions ignore the buffering, while tell() does not.
d8729 6
a8734 4
Returns the current position of the C<readdir> routines on DIRHANDLE.
Value may be given to C<seekdir> to access a particular location in a
directory.  C<telldir> has the same caveats about possible directory
compaction as the corresponding system library routine.
d8748 3
a8750 2
to the C<dbm_open()> function of C.  The object returned by the
constructor is also returned by the C<tie> function, which would be useful
d8753 4
a8756 3
Note that functions such as C<keys> and C<values> may return huge lists
when used on large objects, like DBM files.  You may prefer to use the
C<each> function to iterate over such.  Example:
d8760 3
a8762 3
    tie(%HIST, 'NDBM_File', '/usr/lib/news/history', 1, 0);
    while (($key,$val) = each %HIST) {
        print $key, ' = ', unpack('L',$val), "\n";
a8763 1
    untie(%HIST);
d8828 6
a8833 3
Unlike C<dbmopen>, the C<tie> function will not C<use> or C<require> a module
for you; you need to do that explicitly yourself.  See L<DB_File>
or the F<Config> module for interesting C<tie> implementations.
d8835 1
a8835 1
For further details see L<perltie>, L<"tied VARIABLE">.
d8843 2
a8844 1
that was originally returned by the C<tie> call that bound the variable
d8854 3
a8856 2
considers to be the epoch, suitable for feeding to C<gmtime> and
C<localtime>.  On most systems the epoch is 00:00:00 UTC, January 1, 1970;
d8862 3
a8864 2
if you have gettimeofday(2), you may be able to use the C<syscall>
interface of Perl.  See L<perlfaq8> for details.
d8878 1
a8878 1
    ($user,$system,$cuser,$csystem) = times;
d8880 1
a8880 1
In scalar context, C<times> returns C<$user>.
d8890 2
a8891 1
The transliteration operator.  Same as C<y///>.  See
d8903 2
a8904 1
on your system.  Returns true if successful, C<undef> on error.
d8910 2
a8911 1
call L<seek|/"seek FILEHANDLE,POSITION,WHENCE"> before writing to the file.
d8925 1
a8925 1
L</ucfirst> for that.
d8927 1
a8927 1
If EXPR is omitted, uses C<$_>.
d8929 2
a8930 2
This function behaves the same way under various pragma, such as in a locale,
as L</lc> does.
d8943 1
a8943 1
If EXPR is omitted, uses C<$_>.
d8945 2
a8946 2
This function behaves the same way under various pragma, such as in a locale,
as L</lc> does.
d8960 12
a8971 9
and isn't one of the digits).  The C<umask> value is such a number
representing disabled permissions bits.  The permission (or "mode")
values you pass C<mkdir> or C<sysopen> are modified by your umask, so
even if you tell C<sysopen> to create a file with permissions C<0777>,
if your umask is C<0022>, then the file will actually be created with
permissions C<0755>.  If your C<umask> were C<0027> (group can't
write; others can't read, write, or execute), then passing
C<sysopen> C<0666> would create a file with mode C<0640> (because 
C<0666 &~ 027> is C<0640>).
d8974 3
a8976 2
files (in C<sysopen>) and one of C<0777> for directories (in
C<mkdir>) and executable files.  This gives users the freedom of
d8981 1
a8981 1
kept private: mail files, web browser cookies, I<.rhosts> files, and
d8984 5
a8988 4
If umask(2) is not implemented on your system and you are trying to
restrict access for I<yourself> (i.e., C<< (EXPR & 0700) > 0 >>), 
raises an exception.  If umask(2) is not implemented and you are
not trying to restrict access for yourself, returns C<undef>.
d8991 2
a8992 1
string of octal digits.  See also L</oct>, if all you have is a string.
d9007 3
a9009 2
DBM list values, so don't do that; see L</delete>.  Always returns the
undefined value.  You can omit the EXPR, in which case nothing is
d9022 1
a9022 1
    ($a, $b, undef, $c) = &foo;       # Ignore third value returned
d9034 2
a9035 2
it successfully deleted.  On failure, it returns false and sets C<$!>
(errno):
d9041 2
a9042 1
On error, C<unlink> will not tell you which files it could not remove.
d9050 2
a9051 1
Note: C<unlink> will not attempt to delete directories unless you are
d9054 3
a9056 2
damage on your filesystem.  Finally, using C<unlink> on directories is
not supported on many operating systems.  Use C<rmdir> instead.
d9058 1
a9058 1
If LIST is omitted, C<unlink> uses C<$_>.
d9067 2
a9068 1
C<unpack> does the reverse of C<pack>: it takes a string
d9072 1
a9072 1
If EXPR is omitted, unpacks the C<$_> string.
d9077 2
a9078 2
of C<pack>, or the characters of the string represent a C structure of some
kind.
d9080 2
a9081 1
The TEMPLATE has the same format as in the C<pack> function.
d9085 1
a9085 1
        my($what,$where,$howmuch) = @@_;
d9093 2
a9094 2
In addition to fields allowed in pack(), you may prefix a field with
a %<number> to indicate that
d9096 1
a9096 1
themselves.  Default is a 16-bit checksum.  Checksum is calculated by
d9103 1
a9103 1
    $checksum = do {
d9105 1
a9105 1
        unpack("%32W*",<>) % 65535;
d9110 1
a9110 1
    $setbits = unpack("%32b*", $selectmask);
d9113 2
a9114 1
has no way of checking whether the value passed to C<unpack()>
d9121 2
a9122 1
C<unpack()> may produce empty strings or zeros, or it may raise an exception.
d9126 1
a9126 1
See L</pack> for more examples and notes.
a9130 2
=item unshift EXPR,LIST

d9133 2
a9134 1
Does the opposite of a C<shift>.  Or the opposite of a C<push>,
d9141 2
a9142 12
prepended elements stay in the same order.  Use C<reverse> to do the
reverse.

Starting with Perl 5.14, C<unshift> can take a scalar EXPR, which must hold
a reference to an unblessed array.  The argument will be dereferenced
automatically.  This aspect of C<unshift> is considered highly
experimental.  The exact behaviour may change in a future version of Perl.

To avoid confusing would-be users of your code who are running earlier
versions of Perl with mysterious syntax errors, put this sort of thing at
the top of your file to signal that your code will work I<only> on Perls of
a recent vintage:
d9144 4
a9147 1
    use 5.014;	# so push/pop/etc work on scalars (experimental)
d9181 3
a9183 2
decimal fraction such as 5.006, which will be compared to C<$]>, or a v-string
of the form v5.6.1, which will be compared to C<$^V> (aka $PERL_VERSION).  An
d9186 2
a9187 1
file.  Compare with L</require>, which can do a similar check at run time.
d9201 2
a9202 1
C<use>ing library modules that won't work with older versions of Perl.
d9206 1
a9206 1
version as defined by the C<feature> pragma, disabling any features
d9210 1
a9210 1
with C<use strict>.  Any explicit use of
d9219 5
a9223 3
The C<BEGIN> forces the C<require> and C<import> to happen at compile time.  The
C<require> makes sure the module is loaded into memory if it hasn't been
yet.  The C<import> is not a builtin; it's just an ordinary static method
d9226 6
a9231 5
C<import> method any way it likes, though most modules just choose to
derive their C<import> method via inheritance from the C<Exporter> class that
is defined in the C<Exporter> module.  See L<Exporter>.  If no C<import>
method can be found then the call is skipped, even if there is an AUTOLOAD
method.
d9233 2
a9234 1
If you do not want to call the package's C<import> method (for instance,
d9244 17
a9260 8
C<use> will call the VERSION method in class Module with the given
version as an argument.  The default VERSION method, inherited from
the UNIVERSAL class, croaks if the given version is larger than the
value of the variable C<$Module::VERSION>.

Again, there is a distinction between omitting LIST (C<import> called
with no arguments) and an explicit empty LIST C<()> (C<import> not
called).  Note that there is no comma after VERSION!
d9263 2
a9264 1
are also implemented this way.  Currently implemented pragmas are:
d9276 9
a9284 8
block scope (like C<strict> or C<integer>, unlike ordinary modules,
which import symbols into the current package (which are effective
through the end of the file).

Because C<use> takes effect at compile time, it doesn't respect the
ordinary flow control of the code being compiled.  In particular, putting
a C<use> inside the false branch of a conditional doesn't prevent it
from being processed.  If a module or pragma only needs to be loaded 
d9290 5
a9294 3
There's a corresponding C<no> declaration that unimports meanings imported
by C<use>, i.e., it calls C<unimport Module LIST> instead of C<import>.
It behaves just as C<import> does with VERSION, an omitted or empty LIST, 
d9301 2
a9302 1
Care should be taken when using the C<no VERSION> form of C<no>.  It is
d9308 2
a9309 2
for the C<-M> and C<-m> command-line options to Perl that give C<use>
functionality from the command-line.
d9321 1
a9321 1
Unix touch(1) command when the files I<already exist> and belong to
d9325 1
a9325 1
    $atime = $mtime = time;
d9328 3
a9330 2
Since Perl 5.8.0, if the first two elements of the list are C<undef>, 
the utime(2) syscall from your C library is called with a null second
d9336 4
a9339 4
    for $file (@@ARGV) {
	utime(undef, undef, $file) 
	    || warn "couldn't touch $file: $!";
    } 
d9344 1
a9344 1
touch(1) command will in fact normally use this form instead of the
d9347 3
a9349 3
Passing only one of the first two elements as C<undef> is
equivalent to passing a 0 and will not have the effect 
described when both are C<undef>.  This also triggers an
d9352 2
a9353 2
On systems that support futimes(2), you may pass filehandles among the
files.  On systems that don't support futimes(2), passing filehandles raises
a9363 2
=item values EXPR

d9375 5
a9379 3
that the most recent key returned by C<each> or C<keys> may be deleted
without changing the order.  So long as a given hash is unmodified you may
rely on C<keys>, C<values> and C<each> to repeatedly return the same order
d9387 5
a9391 4
As a side effect, calling values() resets the HASH or ARRAY's internal
iterator, see L</each>.  (In particular, calling values() in void context
resets the iterator with no other overhead.  Apart from resetting the
iterator, C<values @@array> in list context is the same as plain C<@@array>.
d9402 4
a9405 7
Starting with Perl 5.14, C<values> can take a scalar EXPR, which must hold
a reference to an unblessed hash or array.  The argument will be
dereferenced automatically.  This aspect of C<values> is considered highly
experimental.  The exact behaviour may change in a future version of Perl.

    for (values $hashref) { ... }
    for (values $obj->get_arrayref) { ... }
a9412 1
    use 5.014;	# so keys/values/each work on scalars (experimental)
d9414 2
a9415 1
See also C<keys>, C<each>, and C<sort>.
d9433 3
a9435 2
pack()/unpack() with big-endian formats C<n>/C<N> (and analogously
for BITS==64).  See L<"pack"> for details.
d9444 2
a9445 1
C<vec> may also be assigned to, in which case parentheses are needed
d9456 2
a9457 1
the UTF8 flag set), this is ignored by C<vec>, and it operates on the
d9459 1
a9459 1
only have characters with values less than 256. 
d9461 2
a9462 1
Strings created with C<vec> can also be manipulated with the logical
d9491 2
a9492 2
    $bits = unpack("b*", $vector);
    @@bits = split(//, unpack("b*", $vector));
d9526 1
a9526 1
Regardless of the machine architecture on which it runs, the 
d9666 1
a9666 1
Behaves like wait(2) on your system: it waits for a child
d9668 3
a9670 2
C<-1> if there are no child processes.  The status is returned in C<$?>
and C<${^CHILD_ERROR_NATIVE}>.
d9674 4
a9677 2
If you use C<wait> in your handler for $SIG{CHLD}, it may accidentally wait
for the child created by qx() or system().  See L<perlipc> for details.
d9687 12
a9698 3
the deceased process, or C<-1> if there is no such child process.  On some
systems, a value of 0 indicates that there are processes still running.
The status is returned in C<$?> and C<${^CHILD_ERROR_NATIVE}>.  If you say
d9701 2
a9702 1
    #...
d9707 6
a9712 1
then you can do a non-blocking wait for all pending zombie processes.
d9714 1
a9714 1
waitpid(2) or wait4(2) syscalls.  However, waiting for a particular
d9731 2
a9732 1
C<eval> is looking for a list value.  Returns false if the context is
d9740 1
a9740 1
C<wantarray()>'s result is unspecified in the top level of a file,
d9752 2
a9753 2
not end in a newline, it appends the same file/line number text as C<die>
does.
d9755 4
a9758 4
If the output is empty and C<$@@> already contains a value (typically from a
previous eval) that value is used after appending C<"\t...caught">
to C<$@@>.  This is useful for staying almost, but not entirely similar to
C<die>.
d9760 2
a9761 1
If C<$@@> is empty then the string C<"Warning: Something's wrong"> is used.
d9763 2
a9764 1
No message is printed if there is a C<$SIG{__WARN__}> handler
d9766 2
a9767 1
as it sees fit (like, for instance, converting it into a C<die>).  Most
d9769 2
a9770 1
warnings that they are not prepared to deal with, by calling C<warn>
d9776 3
a9778 2
C<$SIG{__DIE__}> handlers (which don't suppress the error text, but can
instead call C<die> again to change it).
d9794 4
a9797 3
See L<perlvar> for details on setting C<%SIG> entries and for more
examples.  See the Carp module for other kinds of warnings using its
carp() and cluck() functions.
d9811 3
a9813 2
format for the current output channel (see the C<select> function) may be set
explicitly by assigning the name of the format to the C<$~> variable.
d9820 1
a9820 1
format is the name of the filehandle with "_TOP" appended, or "top"
d9823 4
a9826 3
format of your choice by assigning the name to the C<$^> variable while
that filehandle is selected.  The number of lines remaining on the current
page is in variable C<$->, which can be set to C<0> to force a new page.
d9830 2
a9831 1
C<select> operator.  If the FILEHANDLE is an EXPR, then the expression
d9835 2
a9836 1
Note that write is I<not> the opposite of C<read>.  Unfortunately.
d9842 2
a9843 1
The transliteration operator.  Same as C<tr///>.  See
@


1.19
log
@Fix merge issues, remove excess files - match perl-5.20.2 dist
@
text
@d7674 2
a7675 2
Takes extra time to study SCALAR (C<$_> if unspecified) in anticipation of
doing many pattern matches on the string before it is next modified.
d7682 4
@


1.18
log
@Fix merge conflicts, remove extra files, match upstream perl-5.20.1

ok deraadt@@ sthen@@ espie@@ miod@@
@
text
@d461 1
a461 1
anything that isn't a printable nor space in the current locale.) If
d747 2
a748 1
perl sub will appear instead of the XS sub in caller's return values. In list
d766 1
a766 1
function containing the caller). Note that $subroutine may be C<(eval)> if
d1384 1
a1384 1
still tests true for exists(), or to 0 if none do. In other words, an
d1387 3
a1389 2
B<WARNING:> Calling delete on array values is deprecated and likely to
be removed in a future version of Perl.
d2066 5
a2070 3
obvious and is strongly tied to the use of L</delete> on arrays.  B<Be aware>
that calling exists on array values is deprecated and likely to be removed in
a future version of Perl.
d3365 1
a3365 1
Starting in v5.20, Perl wil use full Unicode rules if the locale is
d3680 1
a3680 1
such as using a unary C<+> to give Perl some help:
d3684 3
a3686 2
    %hash = map { ("\L$_" => 1) } @@array # this also works
    %hash = map {  lc($_) => 1  } @@array # as does this.
d4370 2
a4371 1
the lexical scope of the C<our> declaration.
d4397 10
d7664 2
a7665 1
See also L<feature>.
d8622 1
a8622 1
C<use VERSION> also enables all features available in the requested
d8629 6
a8634 2
before it.  In both cases, the F<feature.pm> and F<strict.pm> files are
not actually loaded.
d9069 2
a9070 2
If you use wait in your handler for $SIG{CHLD} it may accidentally for the
child created by qx() or system().  See L<perlipc> for details.
a9303 2
=item elseif

d9319 9
@


1.17
log
@Merge perl-5.18.2 plus local patches, remove old files

OK espie@@ sthen@@ deraadt@@
@
text
@d200 1
a200 1
feature or use the C<CORE::> prefix. The C<"switch"> feature also enables
d202 1
a202 1
L<perlsyn/"Switch Statements">. The C<"switch"> feature is enabled
d204 1
a204 1
scope. In Perl v5.14 and earlier, C<continue> required the C<"switch">
d209 1
a209 1
with the C<"current_sub"> feature or if prefixed with C<CORE::>. Both
d360 4
a363 4
Unless otherwise documented, it returns C<1> for true and C<''> for false, or
the undefined value if the file doesn't exist.  Despite the funny
names, precedence is the same as any other named unary operator.  The
operator may be any of:
d381 2
a382 1
    -l  File is a symbolic link.
d393 1
a393 1
    -T  File is an ASCII text file (heuristic guess).
d452 12
a463 6
The C<-T> and C<-B> switches work as follows.  The first block or so of the
file is examined for odd characters such as strange control codes or
characters with the high bit set.  If too many strange characters (>30%)
are found, it's a C<-B> file; otherwise it's a C<-T> file.  Also, any file
containing a zero byte in the first block is considered a binary file.  If C<-T>
or C<-B> is used on a filehandle, the current IO buffer is examined
d492 1
a492 1
C<-x $file && -w _ && -f _>.  (This is only fancy fancy: if you use
d743 2
a744 2
Returns the context of the current subroutine call.  In scalar context,
returns the caller's package name if there I<is> a caller (that is, if
d746 3
a748 1
otherwise.  In list context, returns
d764 4
a767 2
Here $subroutine may be C<(eval)> if the frame is not a subroutine
call, but an C<eval>.  In such a case additional elements $evaltext and
d898 2
a899 1
If VARIABLE is a hash, it chomps the hash's values, but not its keys.
d928 2
a929 1
If VARIABLE is a hash, it chops the hash's values, but not its keys.
d982 1
a982 1
Portability issues: L<perlport/chmod>.
d1022 3
d1381 1
a1381 1
or splice() for that.  However, if all deleted elements fall at the end of an
d1383 2
a1384 1
still tests true for exists(), or to 0 if none do.
a1563 6
=item do SUBROUTINE(LIST)
X<do>

This form of subroutine call is deprecated.  SUBROUTINE can be a bareword
or scalar variable.

d1665 1
a1665 1
on two hashes may result in a different order for each hash. Any insertion
d1668 1
a1668 1
without changing the order. So long as a given hash is unmodified you may
d1670 2
a1671 2
as each other. See L<perlsec/"Algorithmic Complexity Attacks"> for
details on why hash order is randomized. Aside from the guarantees
d1682 4
a1685 4
elements while iterating over it, entries may be skipped or duplicated--so
don't do that.  Exception: In the current implementation, it is always safe
to delete the item most recently returned by C<each()>, so the following
code works properly:
d1692 3
d1792 2
a1793 1
In the first form, the return value of EXPR is parsed and executed as if it
d1816 6
d1850 1
a1850 1
See L</warn>, L<perlvar>, L<warnings> and L<perllexwarn>.
d1989 7
a1995 9
If there is more than one argument in LIST, or if LIST is an array
with more than one value, calls execvp(3) with the arguments in LIST.
If there is only one scalar argument or an array with one element in it,
the argument is checked for shell metacharacters, and if there are any,
the entire argument is passed to the system's command shell for parsing
(this is C</bin/sh -c> on Unix platforms, but varies on other platforms).
If there are no shell metacharacters in the argument, it is split into
words and passed directly to C<execvp>, which is more efficient.
Examples:
d2003 3
a2005 3
comma) in front of the LIST.  (This always forces interpretation of the
LIST as a multivalued list, even if there is only a single scalar in
the list.)  Example:
d2035 4
d2200 10
a2209 2
This function behaves the same way under various pragma, such as in a locale,
as L</lc> does.
d2217 1
a2217 1
or when prefixed with C<CORE::>; See L<feature>. Alternately,
d2286 1
a2286 1
    if (fileno(THIS) == fileno(THAT)) {
d2288 6
d2503 1
a2503 2
module from your nearest CPAN site; details on CPAN can be found under
L<perlmodlib/CPAN>.
d2559 1
a2559 1
has since been removed. See the documentation for L<$$|perlvar/$$> for
d2705 9
a2713 7
    ($name,$passwd,$uid,$gid,
       $quota,$comment,$gcos,$dir,$shell,$expire) = getpw*
    ($name,$passwd,$gid,$members) = getgr*
    ($name,$aliases,$addrtype,$length,@@addrs) = gethost*
    ($name,$aliases,$addrtype,$net) = getnet*
    ($name,$aliases,$proto) = getproto*
    ($name,$aliases,$port,$proto) = getserv*
d2940 1
a2940 1
The C<goto-LABEL> form finds the statement labeled with LABEL and
d2950 6
a2955 1
The C<goto-EXPR> form expects a label name, whose scope will be resolved
d2961 1
a2961 1
As shown in this example, C<goto-EXPR> is exempt from the "looks like a
d2967 1
a2967 1
Use of C<goto-LABEL> or C<goto-EXPR> to jump into a construct is
d2973 1
a2973 1
The C<goto-&NAME> form is quite different from the other forms of
d3159 1
a3159 1
on two hashes may result in a different order for each hash. Any insertion
d3162 1
a3162 1
without changing the order. So long as a given hash is unmodified you may
d3164 2
a3165 2
as each other. See L<perlsec/"Algorithmic Complexity Attacks"> for
details on why hash order is randomized. Aside from the guarantees
d3167 3
a3169 1
traversal order are subject to change in any release of Perl.
d3240 4
a3243 3
Sends a signal to a list of processes.  Returns the number of
processes successfully signaled (which is not necessarily the
same as the number actually killed).
d3254 1
a3254 1
C<$Config{sig_name}>, which is provided by the C<Config> module. See L<Config>
d3259 2
a3260 1
C<kill -9, $pgrp> will send C<SIGKILL> to the entire process group specified. That
d3263 1
a3263 1
If SIGNAL is either the number 0 or the string C<ZERO> (or C<SIGZZERO>),
d3282 2
a3283 2
On some platforms such as Windows where the fork() system call is not available.
Perl can be built to emulate fork() at the interpreter level.
d3352 2
a3353 2
The results follow ASCII semantics.  Only characters C<A-Z> change, to C<a-z>
respectively.
d3358 1
a3358 1
semantics for the remaining code points (this last can only happen if
d3361 3
a3363 1
A deficiency in this is that case changes that cross the 255/256
d3365 3
a3367 2
LETTER SHARP S (U+1E9E) in Unicode semantics is U+00DF (on ASCII
platforms).   But under C<use locale>, the lower case of U+1E9E is
d3376 1
a3376 1
Unicode semantics are used for the case change.
d3380 1
a3380 1
Unicode semantics are used for the case change.
d3384 1
a3384 1
ASCII semantics are used for the case change.  The lowercase of any character
d3721 1
a3721 1
the C<mkpath> function of the L<File::Path> module.
d3784 1
a3784 1
=item my EXPR
d3787 1
a3787 1
=item my TYPE EXPR
d3789 1
a3789 1
=item my EXPR : ATTRS
d3791 1
a3791 1
=item my TYPE EXPR : ATTRS
d3796 1
a3796 1
enclosing block, file, or C<eval>.  If more than one value is listed,
d3800 3
a3802 1
evolving.  TYPE is currently bound to the use of the C<fields> pragma,
d3808 5
a3933 6
If EXPR is omitted, the global (package) scalar variable of the same
name as the FILEHANDLE contains the filename.  (Note that lexical 
variables--those declared with C<my> or C<state>--will not work for this
purpose; so if you're using C<my> or C<state>, specify EXPR in your
call to open.)

d4016 27
a4066 4
    $ARTICLE = 100;
    open(ARTICLE) or die "Can't find article $ARTICLE: $!\n";
    while (<ARTICLE>) {...

a4310 28
Using the constructor from the C<IO::Handle> package (or one of its
subclasses, such as C<IO::File> or C<IO::Socket>), you can generate anonymous
filehandles that have the scope of the variables used to hold them, then
automatically (but silently) close once their reference counts become
zero, typically at scope exit:

    use IO::File;
    #...
    sub read_myfile_munged {
        my $ALL = shift;
	# or just leave it undef to autoviv
        my $handle = IO::File->new;
        open($handle, "<", "myfile") or die "myfile: $!";
        $first = <$handle>
            or return ();     # Automatically closed here.
        mung($first) or die "mung failed";  # Or here.
        return (first, <$handle>) if $ALL;  # Or here.
        return $first;                      # Or here.
    }

B<WARNING:> The previous example has a bug because the automatic
close that happens when the refcount on C<handle> reaches zero does not
properly detect and report failures.  I<Always> close the handle
yourself and inspect the return value.

    close($handle) 
	|| warn "close failed: $!";

d4344 1
a4344 1
=item our EXPR
d4347 1
a4347 1
=item our TYPE EXPR
d4349 1
a4349 1
=item our EXPR : ATTRS
d4351 1
a4351 1
=item our TYPE EXPR : ATTRS
d4355 2
a4356 2
C<our> makes a lexical alias to a package variable of the same name in the current
package for use within the current lexical scope.
d4358 4
a4361 3
C<our> has the same scoping rules as C<my> or C<state>, but C<our> only
declares an alias, whereas C<my> or C<state> both declare a variable name and
allocate storage for that name within the current scope.
d4365 15
a4379 3
the lexical scope of the C<our> declaration.  In this way, C<our> differs from
C<use vars>, which allows use of an unqualified name I<only> within the
affected package, but across scopes.
d4381 11
a4391 1
If more than one value is listed, the list must be placed
a4393 1
    our $foo;
d4439 8
d4540 1
a4540 1
        xX         Make x and X act as alignment commands.
d4542 1
a4542 1
        nNvV       Treat integers as signed instead of unsigned.
d4544 1
a4544 1
        @@.         Specify position as byte offset in the internal
d4561 1
a4561 1
pack for processing data from NASA's Magellan probe. Magellan was in an
d5730 3
a5732 3
string otherwise.  If EXPR
is not specified, C<$_> will be used.  The value returned depends on the
type of thing the reference is a reference to.
d5747 1
a5747 2
If the referenced object has been blessed into a package, then that package
name is returned instead.  You can think of C<ref> as a C<typeof> operator.
d5764 11
d5829 5
a5833 1
to the included code.  Has semantics similar to the following subroutine:
d5836 39
a5874 26
       my ($filename) = @@_;
       if (exists $INC{$filename}) {
           return 1 if $INC{$filename};
           die "Compilation failed in require";
       }
       my ($realfilename,$result);
       ITER: {
           foreach $prefix (@@INC) {
               $realfilename = "$prefix/$filename";
               if (-f $realfilename) {
                   $INC{$filename} = $realfilename;
                   $result = do $realfilename;
                   last ITER;
               }
           }
           die "Can't find $filename in \@@INC";
       }
       if ($@@) {
           $INC{$filename} = undef;
           die $@@;
       } elsif (!$result) {
           delete $INC{$filename};
           die "$filename did not return true value";
       } else {
           return $result;
       }
d5925 1
a5925 1
subroutine should return either nothing or else a list of up to three 
d5932 5
d5939 1
a5939 1
=item 2
d5949 1
a5949 1
=item 3
d6870 2
a6871 2
past the end of the array, Perl issues a warning, and splices at the
end of the array.
d6881 1
a6881 1
Example, assuming array lengths are passed before arrays:
d6883 5
a6887 8
    sub aeq {  # compare two list values
        my(@@a) = splice(@@_,0,shift);
        my(@@b) = splice(@@_,0,shift);
        return 0 unless @@a == @@b;  # same len?
        while (@@a) {
            return 0 if pop(@@a) ne pop(@@b);
        }
        return 1;
d6889 6
a6894 1
    if (&aeq($len,@@foo[1..$len],0+@@bar,@@bar)) { ... }
d6964 1
a6964 1
only a single space character to be a separator. In earlier Perl's this
d7624 1
a7624 1
=item state EXPR
d7627 1
a7627 1
=item state TYPE EXPR
d7629 1
a7629 1
=item state EXPR : ATTRS
d7631 1
a7631 1
=item state TYPE EXPR : ATTRS
d7641 5
d7934 1
a7934 2
descriptors than that, consider rebuilding Perl to use the C<sfio>
library, or perhaps using the POSIX::open() function.
d8026 3
a8028 1
more efficient.
d8303 1
a8303 1
L<perlop/"Quote and Quote-like Operators">.
d8752 1
a8752 1
on two hashes may result in a different order for each hash. Any insertion
d8755 1
a8755 1
without changing the order. So long as a given hash is unmodified you may
d8757 2
a8758 2
as each other. See L<perlsec/"Algorithmic Complexity Attacks"> for
details on why hash order is randomized. Aside from the guarantees
d8760 3
a8762 1
traversal order are subject to change in any release of Perl.
d9166 2
a9167 1
writing a form feed, a special top-of-page format is used to format the new
d9169 2
a9170 1
format is the name of the filehandle with "_TOP" appended.  This would be a
d9189 1
a9189 1
L<perlop/"Quote and Quote-like Operators">.
a9248 2
=item if

d9291 2
d9312 1
a9312 1
documented in L<perlsyn/"Switch Statements"> .
@


1.16
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@d207 1
a207 1
C<evalbytes> is only available with with the C<"evalbytes"> feature (see
d209 1
a209 1
with with the C<"current_sub"> feature or if prefixed with C<CORE::>. Both
d397 2
a398 1
    -C  Same for inode change time (Unix, may differ for other platforms)
d483 1
a483 1
As of Perl 5.9.1, as a form of purely syntactic sugar, you can stack file
d708 1
a708 1
SeeL<perlobj> for more about the blessing (and blessings) of objects.
d724 4
a727 4
This keyword is enabled by the C<"switch"> feature: see
L<feature> for more information.  You can also access it by
prefixing it with C<CORE::>.  Alternately, include a C<use
v5.10> or later to the current scope.
d766 4
a769 2
compiled with.  The C<$hints> and C<$bitmask> values are subject to change
between versions of Perl, and are not meant for external use.
d1383 3
a1385 3
    $scalar = delete $hash{foo};             # $scalar is 11
    $scalar = delete @@hash{qw(foo bar)};     # $scalar is 22
    @@array  = delete @@hash{qw(foo bar baz)}; # @@array  is (undef,undef,33)
d1500 2
a1501 1
        if (blessed($ev_err) && $ev_err->isa("Some::Module::Exception")) {
d1550 2
a1551 2
This form of subroutine call is deprecated.  SUBROUTINE can be a bareword,
a scalar variable or a subroutine beginning with C<&>.
d1561 1
a1561 1
is just like
d1565 2
a1566 1
except that it's more efficient and concise, keeps track of the current
d1601 2
d1615 3
a1617 1
If C<LABEL> is omitted, restarts the program from the top.
d1628 5
d1653 10
a1662 5
order is subject to change in future versions of Perl, but it is
guaranteed to be in the same order as either the C<keys> or C<values>
function would produce on the same (unmodified) hash.  Since Perl
5.8.2 the ordering can be different even between different runs of Perl
for security reasons (see L<perlsec/"Algorithmic Complexity Attacks">).
d1695 7
d1709 1
d1761 1
a1761 1
        last if eof();      # needed if we're reading from a terminal
d1913 4
a1916 4
          local $@@; # protect existing $@@
          eval { test_repugnancy() };
          # $@@ =~ /nefarious/ and die $@@; # Perl 5.14 and higher only
          $@@ =~ /nefarious/ and $e = $@@;
d1924 2
a1925 1
An C<eval ''> executed within the C<DB> package doesn't see the usual
d2016 5
a2020 5
Beginning with v5.6.0, Perl attempts to flush all files opened for
output before the exec, but this may not be supported on some platforms
(see L<perlport>).  To be safe, you may need to set C<$|> ($AUTOFLUSH
in English) or call the C<autoflush()> method of C<IO::Handle> on any
open handles to avoid lost output.
d2154 1
a2154 1
    lc($this) eq lc($that)  # Wrong!
d2156 1
a2156 1
    uc($this) eq uc($that)  # Also wrong!
d2158 1
a2158 1
    $this =~ /\Q$that/i     # Right!
d2166 3
a2168 1
Perl only implements the full form of casefolding.
d2313 2
a2314 1
    use Fcntl qw(:flock SEEK_END); # import LOCK_* and SEEK_END constants
d2358 1
a2358 1
Beginning with v5.6.0, Perl attempts to flush all files opened for
d2826 2
a2827 1
    print "Nagle's algorithm is turned ", $nodelay ? "off\n" : "on\n";
d2871 1
a2871 1
Beginning with v5.6.0, this operator is implemented using the standard
d2921 2
d2977 2
a2978 1
been declared with C<my $_>) then, in addition to being locally aliased to
d3052 2
a3053 1
    require "sys/ioctl.ph";  # probably in $Config{archlib}/sys/ioctl.ph
d3114 11
a3124 7
The keys of a hash are returned in an apparently random order.  The actual
random order is subject to change in future versions of Perl, but it
is guaranteed to be the same order as either the C<values> or C<each>
function produces (given that the hash has not been modified).  Since
Perl 5.8.1 the ordering can be different even between different runs of
Perl for security reasons (see L<perlsec/"Algorithmic Complexity
Attacks">).
d3126 2
a3127 2
As a side effect, calling keys() resets the internal interator of the HASH or ARRAY
(see L</each>).  In particular, calling keys() in void context resets
d3199 2
a3200 2
    $cnt = kill 1, $child1, $child2;
    kill 9, @@goners;
d3202 18
a3219 3
If SIGNAL is zero, no signal is sent to the process, but C<kill>
checks whether it's I<possible> to send a signal to it (that
means, to be brief, that the process is owned by the same user, or we are
a3223 5
Unlike in the shell, if SIGNAL is negative, it kills process groups instead
of processes.  That means you usually
want to use positive not negative signals.
You may also use a signal name in quotes.

d3226 6
a3231 1
signal the current process group and -1 will signal all processes.
d3252 2
d3260 4
a3263 1
omitted, the command refers to the innermost enclosing loop.  The
d3282 5
a3304 8
=over

=item On EBCDIC platforms

The results are what the C language system call C<tolower()> returns.

=item On ASCII platforms

a3307 2
=back

d3328 1
a3328 1
=item Otherwise, if C<use feature 'unicode_strings'> or C<use locale ':not_characters'>) is in effect:
a3333 8
=over

=item On EBCDIC platforms

The results are what the C language system call C<tolower()> returns.

=item On ASCII platforms

a3338 2
=back

d3360 1
a3360 1
=for Pod::Functions return the number of bytes in a string
d3442 1
a3442 1
    my @@abbr = qw( Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec );
d3613 2
a3614 1
been declared with C<my $_>), then, in addition to being locally aliased to
d3628 5
a3632 5
    %hash = map {  "\L$_" => 1  } @@array  # perl guesses EXPR.  wrong
    %hash = map { +"\L$_" => 1  } @@array  # perl guesses BLOCK. right
    %hash = map { ("\L$_" => 1) } @@array  # this also works
    %hash = map {  lc($_) => 1  } @@array  # as does this.
    %hash = map +( lc($_) => 1 ), @@array  # this is EXPR and works!
d3634 1
a3634 1
    %hash = map  ( lc($_), 1 ),   @@array  # evaluates to (1, @@array)
d3638 2
a3639 1
   @@hashes = map +{ lc($_) => 1 }, @@array # EXPR, so needs comma at end
d3759 2
d3775 3
a3777 1
refers to the innermost enclosing loop.
d3789 5
d3975 1
a3975 1
Since v5.8.0, Perl has built using PerlIO by default.  Unless you've
d4014 1
a4014 1
    print MEMORY "foo!\n";                   # output will appear in $var
d4125 1
d4134 1
a4134 1
	wait $child_pid;
d4175 1
a4175 1
Beginning with v5.6.0, Perl will attempt to flush all files opened for
d4258 1
a4258 1
close that happens when the refcount on C<handle> does not
d4309 12
a4320 12
C<our> associates a simple name with a package variable in the current
package for use within the current scope.  When C<use strict 'vars'> is in
effect, C<our> lets you use declared global variables without qualifying
them with package names, within the lexical scope of the C<our> declaration.
In this way C<our> differs from C<use vars>, which is package-scoped.

Unlike C<my> or C<state>, which allocates storage for a variable and
associates a simple name with that storage for use within the current
scope, C<our> associates a simple name with a package (read: global)
variable in the current package, for use within the current lexical scope.
In other words, C<our> has the same scoping rules as C<my> or C<state>, but
does not necessarily create a variable.
d4328 1
a4328 1
An C<our> declaration declares a global variable that will be visible
d4482 22
d4686 1
a4686 5
 This code:                              gives this result:
 
  unpack("W/a", "\004Gurusamy")          ("Guru")
  unpack("a3/A A*", "007 Bond  J ")      (" Bond", "J")
  unpack("a3 x2 /A A*", "007: Bond, J.") ("Bond, J", ".")
d4688 6
a4693 2
  pack("n/a* w/a","hello,","world")     "\000\006hello,\005world"
  pack("a/W2", ord("a") .. ord("z"))    "2ab"
d4792 1
a4792 1
Starting with Perl 5.9.2, integer and floating-point formats, along with
d5041 1
a5041 1
you've used C<local> on, but I<not> lexical variables, which are created
d5081 2
d5202 4
a5205 2
(the output record separator) is not appended.  The first argument of the
list will be interpreted as the C<printf> format.  See
d5207 1
a5207 3
explanation of the format argument.  If you omit the LIST, C<$_> is used;
to use FILEHANDLE without a LIST, you must use a real filehandle like
C<FH>, not an indirect one like C<$fh>.  If C<use locale> (including
d5213 7
d5234 2
a5235 2
name for a Perl builtin.  If the builtin is not I<overridable> (such as
C<qw//>) or if its arguments cannot be adequately expressed by a prototype
d5359 1
a5359 1
Unicode (see L<http://www.unicode.org/reports/tr31/>.)
d5476 1
a5476 1
As of Perl 5.11.2 you can use a bare C<readdir> in a C<while> loop,
d5599 2
d5608 3
a5610 1
loop.  Programs that want to lie to themselves about what was just input 
d5641 5
d5736 2
a5737 1
    require 5.006_001;  # ditto; preferred for backwards compatibility
d5942 4
d5963 2
a5964 2
    print reverse;                              # No output, list context
    print scalar reverse;                       # Hello, world
d5967 2
a5968 2
preserve non-existent elements whenever possible, i.e., for non magical
arrays or tied arrays with C<EXISTS> and C<DELETE> methods.
d6615 1
a6615 1
    
d6618 1
a6618 1
    
d6621 1
a6621 1
    
d6624 1
a6624 1
    
d6627 1
a6627 1
    
d6630 1
a6630 1
    
d6634 1
a6634 1
    
d6640 1
a6640 1
    
d6687 2
a6688 2
    sub backwards ($$) { $_[1] cmp $_[0]; }  # $a and $b are not set here
    
d6691 1
a6691 1
    
d6695 1
a6695 1
    
d6854 4
a6857 1
only a single space character to be a separator.
d6903 1
a6903 1
following, LIMIT is implicitly 4:
d6905 1
a6905 1
    ($login, $passwd, $remainder) = split(/:/);
d7101 2
a7102 1
  printf '%*4$vX %*4$vX %*4$vX', @@addr[1..3], ":";   # 3 IPv6 addresses
d7111 5
a7115 5
  printf "<%s>", "a";       # prints "<a>"
  printf "<%6s>", "a";      # prints "<     a>"
  printf "<%*s>", 6, "a";   # prints "<     a>"
  printf "<%*2$s>", "a", 6; # prints "<     a>"
  printf "<%2s>", "long";   # prints "<long>" (does not truncate)
d7194 2
a7195 1
  printf "<%.*2$x>", 1, 6;   # INVALID, but in future will print "<000001>"
d7206 16
a7221 10
   hh          interpret integer as C type "char" or "unsigned char"
	       on Perl 5.14 or later
   h           interpret integer as C type "short" or "unsigned short"
   j	       interpret integer as C type "intmax_t" on Perl 5.14 
	       or later, and only with a C99 compiler (unportable)
   l           interpret integer as C type "long" or "unsigned long"
   q, L, or ll interpret integer as C type "long long", "unsigned long long",
               or "quad" (typically 64-bit integers)
   t	       interpret integer as C type "ptrdiff_t" on Perl 5.14 or later
   z	       interpret integer as C type "size_t" on Perl 5.14 or later
d7238 2
a7239 1
    if ($Config{use64bitint} eq "define" || $Config{longsize} >= 8) {
d7257 1
a7257 1
	print "long doubles by default\n";
d7288 1
a7288 1
  printf "<%*1$.*s>", $a, $b;
d7296 4
a7299 4
  printf "%2\$d %d\n",    12, 34;        # will print "34 12\n"
  printf "%2\$d %d %d\n", 12, 34;        # will print "34 12 34\n"
  printf "%3\$d %d %d\n", 12, 34, 56;    # will print "56 12 34\n"
  printf "%2\$*3\$d %d\n", 12, 34, 3;    # will print " 34 12\n"
d7342 3
a7344 7
parameter at the first use of the C<rand> operator.  However, this was not true
of versions of Perl before 5.004, so if your script will run under older
Perl versions, it should call C<srand>; otherwise most programs won't call
C<srand()> at all.

But there are a few situations in recent Perls where programs are likely to
want to call C<srand>.  One is for generating predictable results generally for
a7359 15
In versions of Perl prior to 5.004 the default seed was just the
current C<time>.  This isn't a particularly good seed, so many old
programs supply their own seed value (often C<time ^ $$> or C<time ^
($$ + ($$ << 15))>), but that isn't necessary any more.

Frequently called programs (like CGI scripts) that simply use

    time ^ $$

for a seed can fall prey to the mathematical property that

    a^b == (a+1)^(b+1)

one-third of the time.  So don't do that.

d7406 4
a7409 2
 11 blksize  preferred block size for file system I/O
 12 blocks   actual number of blocks allocated
d7621 1
a7621 1
A special token that returns the a reference to the current subroutine, or
d7624 3
d7786 1
a7786 1
OS/390 & VM/ESA Unix and on the Macintosh; you probably don't want to
d7914 1
a7914 1
Beginning with v5.6.0, Perl will attempt to flush all files opened for
d8047 2
a8048 1
of correct type.  Any additional arguments are passed to the C<new>
d8051 2
a8052 2
to the C<dbm_open()> function of C.  The object returned by the C<new>
method is also returned by the C<tie> function, which would be useful
d8095 2
d8465 1
a8465 1
The importation can be made conditional; see L<if>.
d8493 1
a8493 1
5.11.0, strictures are enabled lexically as
d8590 1
a8590 1
Since Perl 5.7.2, if the first two elements of the list are C<undef>, 
d8634 11
a8644 6
When called on a hash, the values are returned in an apparently random
order.  The actual random order is subject to change in future versions of
Perl, but it is guaranteed to be the same order as either the C<keys> or
C<each> function would produce on the same (unmodified) hash.  Since Perl
5.8.1 the ordering is different even between different runs of Perl for
security reasons (see L<perlsec/"Algorithmic Complexity Attacks">).
d8657 2
a8658 2
    for (values %hash)      { s/foo/bar/g }   # modifies %hash values
    for (@@hash{keys %hash}) { s/foo/bar/g }   # same
d8755 1
a8755 21
    #!/usr/bin/perl -wl

    print <<'EOT';
                                      0         1         2         3
                       unpack("V",$_) 01234567890123456789012345678901
    ------------------------------------------------------------------
    EOT

    for $w (0..3) {
        $width = 2**$w;
        for ($shift=0; $shift < $width; ++$shift) {
            for ($off=0; $off < 32/$width; ++$off) {
                $str = pack("B*", "0"x32);
                $bits = (1<<$shift);
                vec($str, $off, $width) = $bits;
                $res = unpack("b*",$str);
                $val = unpack("V", $str);
                write;
            }
        }
    }
d8757 25
a8781 5
    format STDOUT =
    vec($_,@@#,@@#) = @@<< == @@######### @@>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    $off, $width, $bits, $val, $res
    .
    __END__
d8786 131
a8916 131
                                      0         1         2         3
                       unpack("V",$_) 01234567890123456789012345678901
    ------------------------------------------------------------------
    vec($_, 0, 1) = 1   ==          1 10000000000000000000000000000000
    vec($_, 1, 1) = 1   ==          2 01000000000000000000000000000000
    vec($_, 2, 1) = 1   ==          4 00100000000000000000000000000000
    vec($_, 3, 1) = 1   ==          8 00010000000000000000000000000000
    vec($_, 4, 1) = 1   ==         16 00001000000000000000000000000000
    vec($_, 5, 1) = 1   ==         32 00000100000000000000000000000000
    vec($_, 6, 1) = 1   ==         64 00000010000000000000000000000000
    vec($_, 7, 1) = 1   ==        128 00000001000000000000000000000000
    vec($_, 8, 1) = 1   ==        256 00000000100000000000000000000000
    vec($_, 9, 1) = 1   ==        512 00000000010000000000000000000000
    vec($_,10, 1) = 1   ==       1024 00000000001000000000000000000000
    vec($_,11, 1) = 1   ==       2048 00000000000100000000000000000000
    vec($_,12, 1) = 1   ==       4096 00000000000010000000000000000000
    vec($_,13, 1) = 1   ==       8192 00000000000001000000000000000000
    vec($_,14, 1) = 1   ==      16384 00000000000000100000000000000000
    vec($_,15, 1) = 1   ==      32768 00000000000000010000000000000000
    vec($_,16, 1) = 1   ==      65536 00000000000000001000000000000000
    vec($_,17, 1) = 1   ==     131072 00000000000000000100000000000000
    vec($_,18, 1) = 1   ==     262144 00000000000000000010000000000000
    vec($_,19, 1) = 1   ==     524288 00000000000000000001000000000000
    vec($_,20, 1) = 1   ==    1048576 00000000000000000000100000000000
    vec($_,21, 1) = 1   ==    2097152 00000000000000000000010000000000
    vec($_,22, 1) = 1   ==    4194304 00000000000000000000001000000000
    vec($_,23, 1) = 1   ==    8388608 00000000000000000000000100000000
    vec($_,24, 1) = 1   ==   16777216 00000000000000000000000010000000
    vec($_,25, 1) = 1   ==   33554432 00000000000000000000000001000000
    vec($_,26, 1) = 1   ==   67108864 00000000000000000000000000100000
    vec($_,27, 1) = 1   ==  134217728 00000000000000000000000000010000
    vec($_,28, 1) = 1   ==  268435456 00000000000000000000000000001000
    vec($_,29, 1) = 1   ==  536870912 00000000000000000000000000000100
    vec($_,30, 1) = 1   == 1073741824 00000000000000000000000000000010
    vec($_,31, 1) = 1   == 2147483648 00000000000000000000000000000001
    vec($_, 0, 2) = 1   ==          1 10000000000000000000000000000000
    vec($_, 1, 2) = 1   ==          4 00100000000000000000000000000000
    vec($_, 2, 2) = 1   ==         16 00001000000000000000000000000000
    vec($_, 3, 2) = 1   ==         64 00000010000000000000000000000000
    vec($_, 4, 2) = 1   ==        256 00000000100000000000000000000000
    vec($_, 5, 2) = 1   ==       1024 00000000001000000000000000000000
    vec($_, 6, 2) = 1   ==       4096 00000000000010000000000000000000
    vec($_, 7, 2) = 1   ==      16384 00000000000000100000000000000000
    vec($_, 8, 2) = 1   ==      65536 00000000000000001000000000000000
    vec($_, 9, 2) = 1   ==     262144 00000000000000000010000000000000
    vec($_,10, 2) = 1   ==    1048576 00000000000000000000100000000000
    vec($_,11, 2) = 1   ==    4194304 00000000000000000000001000000000
    vec($_,12, 2) = 1   ==   16777216 00000000000000000000000010000000
    vec($_,13, 2) = 1   ==   67108864 00000000000000000000000000100000
    vec($_,14, 2) = 1   ==  268435456 00000000000000000000000000001000
    vec($_,15, 2) = 1   == 1073741824 00000000000000000000000000000010
    vec($_, 0, 2) = 2   ==          2 01000000000000000000000000000000
    vec($_, 1, 2) = 2   ==          8 00010000000000000000000000000000
    vec($_, 2, 2) = 2   ==         32 00000100000000000000000000000000
    vec($_, 3, 2) = 2   ==        128 00000001000000000000000000000000
    vec($_, 4, 2) = 2   ==        512 00000000010000000000000000000000
    vec($_, 5, 2) = 2   ==       2048 00000000000100000000000000000000
    vec($_, 6, 2) = 2   ==       8192 00000000000001000000000000000000
    vec($_, 7, 2) = 2   ==      32768 00000000000000010000000000000000
    vec($_, 8, 2) = 2   ==     131072 00000000000000000100000000000000
    vec($_, 9, 2) = 2   ==     524288 00000000000000000001000000000000
    vec($_,10, 2) = 2   ==    2097152 00000000000000000000010000000000
    vec($_,11, 2) = 2   ==    8388608 00000000000000000000000100000000
    vec($_,12, 2) = 2   ==   33554432 00000000000000000000000001000000
    vec($_,13, 2) = 2   ==  134217728 00000000000000000000000000010000
    vec($_,14, 2) = 2   ==  536870912 00000000000000000000000000000100
    vec($_,15, 2) = 2   == 2147483648 00000000000000000000000000000001
    vec($_, 0, 4) = 1   ==          1 10000000000000000000000000000000
    vec($_, 1, 4) = 1   ==         16 00001000000000000000000000000000
    vec($_, 2, 4) = 1   ==        256 00000000100000000000000000000000
    vec($_, 3, 4) = 1   ==       4096 00000000000010000000000000000000
    vec($_, 4, 4) = 1   ==      65536 00000000000000001000000000000000
    vec($_, 5, 4) = 1   ==    1048576 00000000000000000000100000000000
    vec($_, 6, 4) = 1   ==   16777216 00000000000000000000000010000000
    vec($_, 7, 4) = 1   ==  268435456 00000000000000000000000000001000
    vec($_, 0, 4) = 2   ==          2 01000000000000000000000000000000
    vec($_, 1, 4) = 2   ==         32 00000100000000000000000000000000
    vec($_, 2, 4) = 2   ==        512 00000000010000000000000000000000
    vec($_, 3, 4) = 2   ==       8192 00000000000001000000000000000000
    vec($_, 4, 4) = 2   ==     131072 00000000000000000100000000000000
    vec($_, 5, 4) = 2   ==    2097152 00000000000000000000010000000000
    vec($_, 6, 4) = 2   ==   33554432 00000000000000000000000001000000
    vec($_, 7, 4) = 2   ==  536870912 00000000000000000000000000000100
    vec($_, 0, 4) = 4   ==          4 00100000000000000000000000000000
    vec($_, 1, 4) = 4   ==         64 00000010000000000000000000000000
    vec($_, 2, 4) = 4   ==       1024 00000000001000000000000000000000
    vec($_, 3, 4) = 4   ==      16384 00000000000000100000000000000000
    vec($_, 4, 4) = 4   ==     262144 00000000000000000010000000000000
    vec($_, 5, 4) = 4   ==    4194304 00000000000000000000001000000000
    vec($_, 6, 4) = 4   ==   67108864 00000000000000000000000000100000
    vec($_, 7, 4) = 4   == 1073741824 00000000000000000000000000000010
    vec($_, 0, 4) = 8   ==          8 00010000000000000000000000000000
    vec($_, 1, 4) = 8   ==        128 00000001000000000000000000000000
    vec($_, 2, 4) = 8   ==       2048 00000000000100000000000000000000
    vec($_, 3, 4) = 8   ==      32768 00000000000000010000000000000000
    vec($_, 4, 4) = 8   ==     524288 00000000000000000001000000000000
    vec($_, 5, 4) = 8   ==    8388608 00000000000000000000000100000000
    vec($_, 6, 4) = 8   ==  134217728 00000000000000000000000000010000
    vec($_, 7, 4) = 8   == 2147483648 00000000000000000000000000000001
    vec($_, 0, 8) = 1   ==          1 10000000000000000000000000000000
    vec($_, 1, 8) = 1   ==        256 00000000100000000000000000000000
    vec($_, 2, 8) = 1   ==      65536 00000000000000001000000000000000
    vec($_, 3, 8) = 1   ==   16777216 00000000000000000000000010000000
    vec($_, 0, 8) = 2   ==          2 01000000000000000000000000000000
    vec($_, 1, 8) = 2   ==        512 00000000010000000000000000000000
    vec($_, 2, 8) = 2   ==     131072 00000000000000000100000000000000
    vec($_, 3, 8) = 2   ==   33554432 00000000000000000000000001000000
    vec($_, 0, 8) = 4   ==          4 00100000000000000000000000000000
    vec($_, 1, 8) = 4   ==       1024 00000000001000000000000000000000
    vec($_, 2, 8) = 4   ==     262144 00000000000000000010000000000000
    vec($_, 3, 8) = 4   ==   67108864 00000000000000000000000000100000
    vec($_, 0, 8) = 8   ==          8 00010000000000000000000000000000
    vec($_, 1, 8) = 8   ==       2048 00000000000100000000000000000000
    vec($_, 2, 8) = 8   ==     524288 00000000000000000001000000000000
    vec($_, 3, 8) = 8   ==  134217728 00000000000000000000000000010000
    vec($_, 0, 8) = 16  ==         16 00001000000000000000000000000000
    vec($_, 1, 8) = 16  ==       4096 00000000000010000000000000000000
    vec($_, 2, 8) = 16  ==    1048576 00000000000000000000100000000000
    vec($_, 3, 8) = 16  ==  268435456 00000000000000000000000000001000
    vec($_, 0, 8) = 32  ==         32 00000100000000000000000000000000
    vec($_, 1, 8) = 32  ==       8192 00000000000001000000000000000000
    vec($_, 2, 8) = 32  ==    2097152 00000000000000000000010000000000
    vec($_, 3, 8) = 32  ==  536870912 00000000000000000000000000000100
    vec($_, 0, 8) = 64  ==         64 00000010000000000000000000000000
    vec($_, 1, 8) = 64  ==      16384 00000000000000100000000000000000
    vec($_, 2, 8) = 64  ==    4194304 00000000000000000000001000000000
    vec($_, 3, 8) = 64  == 1073741824 00000000000000000000000000000010
    vec($_, 0, 8) = 128 ==        128 00000001000000000000000000000000
    vec($_, 1, 8) = 128 ==      32768 00000000000000010000000000000000
    vec($_, 2, 8) = 128 ==    8388608 00000000000000000000000100000000
    vec($_, 3, 8) = 128 == 2147483648 00000000000000000000000000000001
d8938 1
a8938 1
=for Pod::Functions wait for  a particular child process to die
@


1.15
log
@merge in perl 5.12.2 plus local changes
@
text
@d15 1
a15 1
operator.  A unary operator generally provides a scalar context to its
d58 2
a59 2
nonabortive failure is generally indicated in a scalar context by
returning the undefined value, and in a list context by returning the
d82 1
a82 1
of the same name (like chown(2), fork(2), closedir(2), etc.) all return
d85 1
a85 1
which return C<-1> on failure.  Exceptions to this rule are C<wait>,
d110 4
a113 2
C<chomp>, C<chop>, C<chr>, C<crypt>, C<hex>, C<index>, C<lc>, C<lcfirst>,
C<length>, C<oct>, C<ord>, C<pack>, C<q//>, C<qq//>, C<reverse>,
d116 5
d124 3
a126 1
C<m//>, C<pos>, C<quotemeta>, C<s///>, C<split>, C<study>, C<qr//>
d131 2
d139 3
a141 1
C<pop>, C<push>, C<shift>, C<splice>, C<unshift>
d146 2
d153 2
d160 2
d164 7
a170 3
C<readdir>, C<rewinddir>, C<say>, C<seek>, C<seekdir>, C<select>, C<syscall>,
C<sysread>, C<sysseek>, C<syswrite>, C<tell>, C<telldir>, C<truncate>,
C<warn>, C<write>
d172 1
a172 1
=item Functions for fixed length data or records
d174 4
a177 1
C<pack>, C<read>, C<syscall>, C<sysread>, C<syswrite>, C<unpack>, C<vec>
d182 2
d192 1
a192 2
C<caller>, C<continue>, C<die>, C<do>, C<dump>, C<eval>, C<exit>,
C<goto>, C<last>, C<next>, C<redo>, C<return>, C<sub>, C<wantarray>
d194 18
a211 1
=item Keywords related to switch
d213 1
a213 4
C<break>, C<continue>, C<given>, C<when>, C<default>

(These are available only if you enable the C<"switch"> feature.
See L<feature> and L<perlsyn/"Switch statements">.)
d215 1
a215 1
=item Keywords related to scoping
d217 1
a217 2
C<caller>, C<import>, C<local>, C<my>, C<our>, C<state>, C<package>,
C<use>
d219 3
a221 2
(C<state> is available only if the C<"state"> feature is enabled. See
L<feature>.)
d225 3
a227 2
C<defined>, C<dump>, C<eval>, C<formline>, C<local>, C<my>, C<our>,
C<reset>, C<scalar>, C<state>, C<undef>, C<wantarray>
d232 2
d235 2
a236 1
C<pipe>, C<qx//>, C<setpgrp>, C<setpriority>, C<sleep>, C<system>,
d242 2
d249 2
d257 2
d266 2
d274 2
d283 2
d294 2
d298 1
a298 2
=item Functions new in perl5
X<perl5>
d300 1
a300 5
C<abs>, C<bless>, C<break>, C<chomp>, C<chr>, C<continue>, C<default>, 
C<exists>, C<formline>, C<given>, C<glob>, C<import>, C<lc>, C<lcfirst>,
C<lock>, C<map>, C<my>, C<no>, C<our>, C<prototype>, C<qr//>, C<qw//>, C<qx//>,
C<readline>, C<readpipe>, C<ref>, C<sub>*, C<sysopen>, C<tie>, C<tied>, C<uc>,
C<ucfirst>, C<untie>, C<use>, C<when>
d302 5
a306 6
* C<sub> was a keyword in Perl 4, but in Perl 5 it is an
operator, which can be used in expressions.

=item Functions obsoleted in perl5

C<dbmclose>, C<dbmopen>
d315 1
a315 1
Unix system calls may not be available, or details of the available
d354 2
d407 14
d439 2
a440 2
When under the C<use filetest 'access'> the above-mentioned filetests
test whether the permission can (not) be granted using the
d444 1
a444 1
due to the underlying system calls' definitions. Note also that, due to
a449 4
Note that C<-s/a/b/> does not do a negated substitution.  Saying
C<-exp($foo)> still works as expected, however: only single letters
following a minus are interpreted as file tests.

d461 1
a461 1
If any of the file tests (or either the C<stat> or C<lstat> operators) are given
d484 1
a484 1
C<-x $file && -w _ && -f _>. (This is only fancy fancy: if you use
d488 7
d500 2
d508 2
d525 2
d529 1
a529 1
specified, the value stored in C<$_> is used. (On some machines,
d544 1
a544 1
your system supports it. See L<perlfaq8> for details.
d571 2
d576 2
d588 2
d593 2
d605 2
d613 1
a613 1
On some systems (in general, DOS and Windows-based systems) binmode()
d615 3
a617 3
of portability it is a good idea to always use it when appropriate,
and to never use it when it isn't appropriate.  Also, people can
set their I/O to be by default UTF-8 encoded Unicode, not bytes.
d620 1
a620 1
like for example images.
d623 2
a624 2
directives. The directives alter the behaviour of the filehandle.
When LAYER is present using binmode on a text file makes sense.
d627 1
a627 1
suitable for passing binary data. This includes turning off possible CRLF
d632 1
a632 1
I<also> disabled. See L<PerlIO>, L<perlrun>, and the discussion about the
d646 1
a646 1
To mark FILEHANDLE as UTF-8, use C<:utf8> or C<:encoding(utf8)>.
d648 2
a649 2
while C<:encoding(utf8)> checks the data for actually being valid
UTF-8. More details can be found in L<PerlIO::encoding>.
d655 1
a655 1
changes the default character encoding of the handle, see L<open>.
d662 2
a663 2
system all work together to let the programmer treat a single
character (C<\n>) as the line terminator, irrespective of the external
d669 11
a679 10
Mac OS, all variants of Unix, and Stream_LF files on VMS use a single
character to end each line in the external representation of text (even
though that single character is CARRIAGE RETURN on Mac OS and LINE FEED
on Unix and most VMS files). In other systems like OS/2, DOS and the
various flavors of MS-Windows your program sees a C<\n> as a simple C<\cJ>,
but what's stored in text files are the two characters C<\cM\cJ>.  That
means that, if you don't use binmode() on these systems, C<\cM\cJ>
sequences on disk will be converted to C<\n> on input, and any C<\n> in
your program will be converted back to C<\cM\cJ> on output.  This is what
you want for text files, but it can be disastrous for binary files.
d683 2
a684 2
For systems from the Microsoft family this means that if your binary
data contains C<\cZ>, the I/O subsystem will regard it as the end of
d693 2
d700 2
d707 1
a707 2
See L<perltoot> and L<perlobj> for more about the blessing (and blessings)
of objects.
d711 1
a711 1
Perl pragmata.  Builtin types have all uppercase names. To prevent
d719 2
d723 4
a726 2
This keyword is enabled by the C<"switch"> feature: see L<feature>
for more information.
d733 2
d769 1
a769 1
caller was compiled, or C<undef> if C<%^H> was empty. Do not modify the values
d772 2
a773 1
Furthermore, when called from within the DB package, caller returns more
d783 2
a784 2
Also be aware that setting C<@@DB::args> is I<best effort>, intended for
debugging or generating backtraces, and should not be relied upon. In
d788 1
a788 1
time. C<@@DB::args>, like C<@@_>, does not hold explicit references to its
d790 4
a793 4
reallocated for other variables or temporary values. Finally, a side effect
of the current implementation means that the effects of C<shift @@_> can
I<normally> be undone (but not C<pop @@_> or other splicing, and not if a
reference to C<@@_> has been taken, and subject to the caveat about reallocated
d795 1
a795 1
initial state of C<@@_>. Buyer beware.
d808 3
a810 1
Changes the working directory to EXPR, if possible. If EXPR is omitted,
d812 4
a815 4
changes to the directory specified by C<$ENV{LOGDIR}>. (Under VMS, the
variable C<$ENV{SYS$LOGIN}> is also checked, and used if it is set.) If
neither is set, C<chdir> does nothing. It returns true on success,
false otherwise. See the example under C<die>.
d818 1
a818 1
directory handle as argument.  On systems that don't support fchdir(2),
d824 2
d827 1
a827 1
list must be the numerical mode, which should probably be an octal
d830 1
a830 1
successfully changed.  See also L</oct>, if all you have is a string.
d855 2
d864 2
d874 1
a874 1
a reference to an integer or the like, see L<perlvar>) chomp() won't
d908 2
d928 2
d966 2
d973 2
d997 2
d1006 2
d1013 2
d1017 1
a1017 1
operations have succeeded and if no error was reported by any PerlIO
d1023 1
a1023 1
C<open>.)  However, an explicit C<close> on an input file resets the line
d1034 4
d1055 1
a1055 1
filehandle, usually the real filehandle name.
d1060 2
d1068 2
d1080 4
a1083 1
C<continue> is actually a flow control statement rather than a function.  If
d1110 7
a1116 5
If the C<"switch"> feature is enabled, C<continue> is also a
function that exits the current C<when> (or C<default>) block and
falls through to the next one.  See L<feature> and
L<perlsyn/"Switch statements"> for more information.

d1123 2
d1126 1
a1126 1
takes cosine of C<$_>.
d1137 2
d1143 1
a1143 1
crypt() is a one-way hash function.  The PLAINTEXT and SALT is turned
d1158 1
a1158 1
match the password is correct.
d1165 3
a1167 3
with more exotic implementations.  In other words, do not assume
anything about the returned string itself, or how many bytes in the
digest matter.
d1171 1
a1171 1
the first eight bytes of PLAINTEXT mattered. But alternative
d1209 1
a1209 1
of the situation by trying to downgrade (a copy of the string)
d1214 2
d1219 2
d1225 2
d1230 4
a1233 1
[This function has been largely superseded by the C<tie> function.]
d1240 4
a1243 1
specified by MASK (as modified by the C<umask>).  If your system supports
d1276 2
d1283 2
d1307 1
a1307 1
used to report whether memory for that aggregate has ever been
d1320 1
a1320 1
    print if defined $switch{'D'};
d1327 1
a1327 1
Note:  Many folks tend to overuse C<defined>, and then are surprised to
d1347 2
d1354 1
a1354 1
It returns the value or values deleted in list context, or the last such
d1366 1
a1366 1
B<Be aware> that calling delete on array values is deprecated and likely to
d1422 3
a1424 1
C<die> raises an exception. Inside an C<eval> the error message is stuffed
d1427 2
a1428 2
exception prints LIST to C<STDERR> and exits with a non-zero value. If you
need to exit the process with a specific exit code, see L<exit>.
d1464 1
a1464 1
C<$@@>.  i.e., as if C<< $@@ = eval { $@@->PROPAGATE(__FILE__, __LINE__) }; >>
d1477 2
a1478 1
into the limited space of the system exit code. However, as C<$!> is the value
d1513 1
a1513 1
L<perlvar/$SIG{expr}> for details on setting C<%SIG> entries, and
d1531 2
d1536 1
a1536 1
condition. (On other statements the loop modifiers test the conditional
d1546 2
a1547 1
This form of subroutine call is deprecated.  See L<perlsub>.
d1562 3
a1564 3
filename for error messages, searches the @@INC directories, and updates
C<%INC> if the file is found.  See L<perlvar/Predefined Names> for these
variables.  It also differs in that code evaluated with C<do FILENAME>
d1569 5
a1573 5
If C<do> cannot read the file, it returns undef and sets C<$!> to the
error.  If C<do> can read the file but cannot compile it, it
returns undef and sets an error message in C<$@@>.   If the file is
successfully compiled, C<do> returns the value of the last expression
evaluated.
d1598 2
d1615 1
a1615 1
convert a core file into an executable. That's why you should now invoke
d1619 2
d1627 10
a1636 5
When called in list context, returns a 2-element list consisting of the key
and value for the next element of a hash, or the index and value for the
next element of an array, so that you can iterate over it.  When called in
scalar context, returns only the key (not the value) in a hash, or the index
in an array.
d1647 9
a1655 8
scalar context.  The next call following that one restarts iteration.  Each
hash or array has its own internal iterator, accessed by C<each>, C<keys>,
and C<values>.  The iterator is implicitly reset when C<each> has reached
the end as just described; it can be explicitly reset by calling C<keys> or
C<values> on the hash or array.  If you add or delete a hash's elements
while iterating over it, entries may be skipped or duplicated--so don't do
that.  Exception: It is always safe to delete the item most recently
returned by C<each()>, so the following code works properly:
d1669 16
a1684 1
See also C<keys>, C<values> and C<sort>.
d1695 3
a1697 1
Returns 1 if the next read on FILEHANDLE will return end of file, or if
d1717 2
a1718 2
detect the end of each file, C<eof()> will detect the end of only the
last file.  Examples:
d1734 1
a1734 1
        last if eof();          # needed if we're reading from a terminal
d1738 2
a1739 2
input operators typically return C<undef> when they run out of data, or if
there was an error.
d1749 2
d1753 7
a1759 4
determined within scalar context) is first parsed, and if there weren't any
errors, executed in the lexical context of the current Perl program, so
that any variable settings or subroutine and format definitions remain
afterwards.  Note that the value is parsed every time the C<eval> executes.
d1763 11
d1792 7
a1798 4
executed, C<eval> returns an undefined value in scalar context
or an empty list in list context, and C<$@@> is set to the
error message.  If there was no error, C<$@@> is guaranteed to be the empty
string.  Beware that using C<eval> neither silences Perl from printing
d1806 1
a1806 1
is implemented.  It is also Perl's exception trapping mechanism, where
d1811 1
a1811 1
C<eval> unless C<$ENV{PERL_DL_NONLAZY}> is set. See L<perlrun>.
d1877 3
a1879 2
The assignment to C<$@@> occurs before restoration of localised variables,
which means a temporary is required if you want to mask some but not all
d1888 1
a1888 1
          # $@@ =~ /nefarious/ and die $@@; # DOES NOT WORK
d1899 1
a1899 1
of code that called it. You don't normally need to worry about this unless
d1902 17
d1924 2
d1932 4
a1935 4
warns you if there is a following statement that isn't C<die>, C<warn>,
or C<exit> (if C<-w> is set--but you always do that, right?).   If you
I<really> want to follow an C<exec> with some other statement, you
can use one of these styles to avoid the warning:
d1997 2
d2002 2
d2013 1
a2013 1
obvious, and is strongly tied to the use of L</delete> on arrays.  B<Be aware>
d2021 1
a2021 1
A hash or array element can be true only if it's defined, and defined if
d2046 1
a2046 1
Although the mostly deeply nested array or hash will not spring into
d2071 2
d2092 3
a2094 2
be called are called before the real exit.  If this is a problem, you
can call C<POSIX:_exit($status)> to avoid END and destructor processing.
d2097 2
d2104 2
d2109 50
d2162 2
d2198 9
d2210 2
d2213 5
a2217 1
filehandle is not open.  This is mainly useful for constructing
a2228 4
(Filehandles connected to memory objects via new features of C<open> may
return undefined even though they are open.)


d2232 2
d2237 1
a2237 1
C<flock> is Perl's portable file locking interface, although it locks
d2242 4
a2245 4
B<merely advisory>.  Such discretionary locks are more flexible, but offer
fewer guarantees.  This means that programs that do not also use C<flock>
may modify files locked with C<flock>.  See L<perlport>, 
your port's specific documentation, or your system-specific local manpages
d2254 2
a2255 2
you can use the symbolic names if you import them from the Fcntl module,
either individually, or as a group using the ':flock' tag.  LOCK_SH
d2258 1
a2258 1
LOCK_SH or LOCK_EX then C<flock> returns immediately rather than blocking
d2279 1
a2279 1
Perl.
d2311 2
d2316 2
d2344 9
d2356 2
d2376 2
d2395 4
d2404 2
d2435 1
a2435 1
module from your nearest CPAN site; details on CPAN can be found on
d2441 2
d2452 2
d2457 4
a2460 1
Returns the packed sockaddr address of other end of the SOCKET connection.
d2471 2
d2476 2
a2477 2
doesn't implement getpgrp(2).  If PID is omitted, returns process
group of current process.  Note that the POSIX version of C<getpgrp>
d2480 2
d2485 2
d2489 7
a2495 6
Note for Linux users: on Linux, the C functions C<getpid()> and
C<getppid()> return different values from different threads. In order to
be portable, this behavior is not reflected by the Perl-level function
C<getppid()>, that returns a consistent value across threads. If you want
to call the underlying C<getppid()>, you may use the CPAN module
C<Linux::Pid>.
d2500 2
d2503 1
a2503 1
(See C<getpriority(2)>.)  Will raise a fatal exception if used on a
d2506 2
d2516 2
d2520 2
d2524 2
d2528 2
d2532 2
d2536 2
d2540 2
d2544 2
d2548 2
d2552 2
d2556 2
d2560 2
d2564 2
d2568 2
d2572 2
d2576 2
d2580 2
d2584 2
d2588 2
d2592 2
d2596 2
d2600 2
d2604 2
d2608 2
d2612 2
d2616 2
d2620 2
d2624 2
d2628 2
d2632 2
d2654 1
a2654 1
login shell, are also tainted, because of the same reason.
d2678 1
a2678 1
in your system, please consult your getpwnam(3) documentation and your
d2687 1
a2687 1
and Linux.)  Those systems that implement a proprietary shadow password
d2690 1
a2690 1
The $members value returned by I<getgr*()> is a space separated list of
d2720 1
a2720 1
Make sure <gethostbyname()> is called in SCALAR context and that
d2723 7
d2742 1
a2742 1
Even though it looks like they're the same method calls (uid),
d2746 2
d2751 2
d2767 2
d2772 1
a2772 1
C<Socket> module) will exist. To query options at another level the
d2774 1
a2774 1
should be supplied. For example, to indicate that an option is to be
d2780 1
a2780 1
C<$!>). Just what is in the packed string depends on LEVEL and OPTNAME;
d2785 1
a2785 1
An example to test whether Nagle's algorithm is turned on on a socket:
d2797 1
d2804 2
d2807 1
a2807 1
the value of EXPR such as the standard Unix shell F</bin/csh> would do. In
d2809 2
a2810 2
undef when the list is exhausted. This is the internal function
implementing the C<< <*.c> >> operator, but you can use it directly. If
d2817 14
a2830 1
C<glob(".* *")> matchs all files in the current working directory.
d2843 2
d2850 3
a2852 1
Works just like L<localtime> but the returned values are
d2855 2
a2856 2
Note: when called in list context, $isdst, the last value
returned by gmtime is always C<0>.  There is no
d2859 1
a2859 1
See L<perlport/gmtime> for portability concerns.
d2868 2
d2871 1
a2871 1
resumes execution there. It can't be used to get out of a block or
d2886 4
d2909 1
a2909 1
containing a code reference, or a block that evaluates to a code
d2917 2
d2954 2
d2965 2
a2966 2
unlike oct(). To present something as hex, look into L</printf>,
L</sprintf>, or L</unpack>.
d2971 2
d2983 2
d2991 2
a2992 3
respectively.  POSITION and the return value are based at C<0> (or whatever
you've set the C<$[> variable to--but don't do that).  If the substring
is not found, C<index> returns one less than the base, ordinarily C<-1>.
d2999 2
d3013 2
d3049 2
d3054 2
d3069 8
a3076 2
Returns a list consisting of all the keys of the named hash, or the indices
of an array. (In scalar context, returns the number of keys or indices.)
d3082 1
a3082 1
Perl 5.8.1 the ordering is different even between different runs of
d3086 1
a3086 1
As a side effect, calling keys() resets the HASH or ARRAY's internal iterator
d3127 1
a3127 1
as trying has no effect). C<keys @@array> in an lvalue context is a syntax
d3130 17
a3146 1
See also C<each>, C<values> and C<sort>.
d3149 2
d3153 2
d3170 2
a3171 1
of processes. That means you usually want to use positive not negative signals.
d3180 14
d3199 2
d3212 1
a3212 1
C<eval {}>, C<sub {}> or C<do {}>, and should not be used to exit
d3227 2
d3253 5
a3257 1
=item Otherwise, If EXPR has the UTF8 flag set
d3259 9
a3267 3
If the current package has a subroutine named C<ToLower>, it will be used to
change the case (See L<perlunicode/User-Defined Case Mappings>.)
Otherwise Unicode semantics are used for the case change.
d3269 1
a3269 1
=item Otherwise, if C<use locale> is in effect
d3271 1
a3271 1
Respects current LC_CTYPE locale.  See L<perllocale>.
d3273 1
a3273 1
=item Otherwise, if C<use feature 'unicode_strings'> is in effect:
d3275 1
a3275 2
Unicode semantics are used for the case change.  Any subroutine named
C<ToLower> will not be used.
d3299 2
d3307 1
a3307 1
This function behaves the same way under various pragma, such as in a locale,
d3315 2
d3318 2
a3319 1
omitted, returns length of C<$_>.  If EXPR is undefined, returns C<undef>.
d3330 7
d3340 2
d3345 2
d3350 2
d3359 2
d3379 2
d3389 1
a3389 1
All list elements are numeric, and come straight out of the C `struct
d3393 2
a3394 2
C<$mday> is the day of the month, and C<$mon> is the month itself, in
the range C<0..11> with 0 indicating January and 11 indicating December.
d3401 2
a3402 3
C<$year> is the number of years since 1900, not just the last two digits
of the year.  That is, C<$year> is C<123> in year 2023.  The proper way
to get a 4-digit year is simply:
d3406 1
a3406 4
Otherwise you create non-Y2K-compliant programs--and you wouldn't want
to do that, would you?

To get the last two digits of the year (e.g., '01' in 2001) do:
d3424 4
a3427 3
This scalar value is B<not> locale dependent but is a Perl builtin. For GMT
instead of local time use the L</gmtime> builtin. See also the
C<Time::Local> module (to convert the second, minutes, hours, ... back to
d3431 1
a3431 1
To get somewhat similar but locale dependent date strings, set up your
d3443 1
a3443 3
See L<perlport/localtime> for portability concerns.

The L<Time::gmtime> and L<Time::localtime> modules provides a convenient,
d3450 2
d3455 3
a3457 1
This function places an advisory lock on a shared variable, or referenced
d3460 3
d3473 2
d3476 2
a3477 1
returns log of C<$_>.  To get the log of another base, use basic algebra:
d3488 3
d3492 2
a3493 1
X<lstat>
d3497 2
d3507 2
d3511 2
d3520 2
d3529 3
a3531 1
    @@chars = map(chr, @@nums);
d3533 17
a3549 1
translates a list of numbers to the corresponding characters.  And
d3573 1
a3573 1
the start of map BLOCK LIST or map EXPR, LIST. Because Perl doesn't look
d3575 2
a3576 1
based on what it finds just after the C<{>. Usually it gets it right, but if it
d3578 1
a3578 1
encounters the missing (or unexpected) comma. The syntax error will be
d3603 2
d3607 3
a3609 3
returns true, otherwise it returns false and sets C<$!> (errno).
If omitted, MASK defaults to 0777. If omitted, FILENAME defaults
to C<$_>.
d3611 2
a3612 2
In general, it is better to create directories with permissive MASK,
and let the user modify that with their C<umask>, than it is to supply
d3629 2
d3639 4
a3642 1
L<perlipc/"SysV IPC">, C<IPC::SysV>, and C<IPC::Semaphore> documentation.
d3647 2
d3650 5
a3654 2
id, or the undefined value if there is an error.  See also
L<perlipc/"SysV IPC"> and C<IPC::SysV> and C<IPC::Msg> documentation.
d3659 2
d3666 5
a3670 3
Taints the variable.  Returns true if successful, or false if there is
an error.  See also L<perlipc/"SysV IPC">, C<IPC::SysV>, and
C<IPC::SysV::Msg> documentation.
d3675 2
d3679 1
a3679 1
type, and be followed by the length of the actual message, and finally
d3682 1
a3682 1
or false if there is an error.  See also C<IPC::SysV>
d3685 2
d3696 2
d3703 1
a3703 1
evolving.  TYPE is currently bound to the use of C<fields> pragma,
d3714 2
d3729 1
a3729 1
C<eval {}>, C<sub {}> or C<do {}>, and should not be used to exit
d3750 2
d3759 2
d3796 2
d3803 2
a3804 1
    open(my $fh, '<', "input.txt") or die $!;
d3808 2
a3809 1
    open(my $fh, '>', "output.txt") or die $!;
d3814 20
a3833 16
If FILEHANDLE is an undefined scalar variable (or array or hash element)
the variable is assigned a reference to a new anonymous filehandle,
otherwise if FILEHANDLE is an expression, its value is used as the name of
the real filehandle wanted.  (This is considered a symbolic reference, so
C<use strict 'refs'> should I<not> be in effect.)

If EXPR is omitted, the scalar variable of the same name as the
FILEHANDLE contains the filename.  (Note that lexical variables--those
declared with C<my>--will not work for this purpose; so if you're
using C<my>, specify EXPR in your call to open.)

If three or more arguments are specified then the mode of opening and
the filename are separate. If MODE is C<< '<' >> or nothing, the file
is opened for input.  If MODE is C<< '>' >>, the file is truncated and
opened for output, being created if necessary.  If MODE is C<<< '>>' >>>,
the file is opened for appending, again being created if necessary.
d3835 1
a3835 1
You can put a C<'+'> in front of the C<< '>' >> or C<< '<' >> to
d3837 2
a3838 2
C<< '+<' >> is almost always preferred for read/write updates--the 
C<< '+>' >> mode would clobber the file first.  You can't usually use
d3840 1
a3840 1
variable length records.  See the B<-i> switch in L<perlrun> for a
d3844 2
a3845 2
These various prefixes correspond to the fopen(3) modes of C<'r'>,
C<'r+'>, C<'w'>, C<'w+'>, C<'a'>, and C<'a+'>.
d3847 5
a3851 13
In the two-argument (and one-argument) form of the call, the mode and
filename should be concatenated (in that order), possibly separated by
spaces.  You may omit the mode in these forms when that mode is
C<< '<' >>.

If the filename begins with C<'|'>, the filename is interpreted as a
command to which output is to be piped, and if the filename ends with a
C<'|'>, the filename is interpreted as a command that pipes output to
us.  See L<perlipc/"Using open() for IPC">
for more examples of this.  (You are not allowed to C<open> to a command
that pipes both in I<and> out, but see L<IPC::Open2>, L<IPC::Open3>,
and L<perlipc/"Bidirectional Communication with Another Process">
for alternatives.)
d3853 1
a3853 1
For three or more arguments if MODE is C<'|-'>, the filename is
d3855 1
a3855 1
is C<'-|'>, the filename is interpreted as a command that pipes
d3857 1
a3857 1
replace dash (C<'-'>) with the command.
d3861 2
a3862 1
L<perlipc/"Bidirectional Communication"> for alternatives.)
d3871 2
a3872 2
In the two-argument (and one-argument) form, opening C<< '<-' >> 
or C<'-'> opens STDIN and opening C<< '>-' >> opens STDOUT.
d3874 2
a3875 2
You may use the three-argument form of open to specify I/O layers
(sometimes referred to as "disciplines") to apply to the handle
d3877 1
a3877 1
L<PerlIO> for more details). For example:
d3882 2
a3883 2
opens the UTF-8 encoded file containing Unicode characters;
see L<perluniintro>. Note that if layers are specified in the
d3886 3
d3909 1
a3909 1
As a special case the 3-arg form with a read/write mode and the third
d3914 1
a3914 1
opens a filehandle to an anonymous temporary file.  Also using "+<"
d3920 2
a3921 2
changed this (i.e., Configure -Uuseperlio), you can open filehandles 
directly to Perl scalars via:
d3923 1
a3923 1
    open($fh, '>', \$variable) || ..
d3928 2
a3929 1
    open STDOUT, '>', \$variable or die "Can't open STDOUT: $!";
d3934 1
a3934 1
    open ARTICLE or die "Can't find article $ARTICLE: $!\n";
d3937 1
a3937 1
    open(LOG, '>>/usr/spool/news/twitlog');  # (log is reserved)
d3940 1
a3940 1
    open(my $dbase, '+<', 'dbase.mine')      # open for update
d3943 1
a3943 1
    open(my $dbase, '+<dbase.mine')          # ditto
d3946 1
a3946 1
    open(ARTICLE, '-|', "caesar <$article")  # decrypt article
d3956 1
a3956 1
    open(MEMORY,'>', \$var)
d3963 1
a3963 1
        process($file, 'fh00');
d3969 1
a3969 1
        unless (open($input, $filename)) {
d3987 1
a3987 1
with C<< '>&' >>, in which case the rest of the string is interpreted
d3993 3
a3995 2
of IO buffers.) If you use the 3-arg form then you can pass either a
number, the name of a filehandle or the normal "reference to a glob".
d4001 2
a4002 2
    open my $oldout, ">&STDOUT"     or die "Can't dup STDOUT: $!";
    open OLDERR,     ">&", \*STDERR or die "Can't dup STDERR: $!";
d4004 2
a4005 2
    open STDOUT, '>', "foo.out" or die "Can't redirect STDOUT: $!";
    open STDERR, ">&STDOUT"     or die "Can't dup STDOUT: $!";
d4013 2
a4014 2
    open STDOUT, ">&", $oldout or die "Can't dup \$oldout: $!";
    open STDERR, ">&OLDERR"    or die "Can't dup OLDERR: $!";
d4043 41
a4083 20
C<< open(A, '>>&B') >>, the filehandle A will not have the same file
descriptor as B, and therefore flock(A) will not flock(B), and vice
versa.  But with C<< open(A, '>>&=B') >> the filehandles will share
the same file descriptor.

Note that if you are using Perls older than 5.8.0, Perl will be using
the standard C libraries' fdopen() to implement the "=" functionality.
On many Unix systems fdopen() fails when file descriptors exceed a
certain value, typically 255.  For Perls 5.8.0 and later, PerlIO is
most often the default.

You can see whether Perl has been compiled with PerlIO or not by
running C<perl -V> and looking for C<useperlio=> line.  If C<useperlio>
is C<define>, you have PerlIO, otherwise you don't.

If you open a pipe on the command C<'-'>, i.e., either C<'|-'> or C<'-|'>
with 2-arguments (or 1-argument) form of open(), then
there is an implicit fork done, and the return value of open is the pid
of the child within the parent process, and C<0> within the child
process.  (Use C<defined($pid)> to determine whether the open was successful.)
d4092 1
a4092 1
The following triples are more or less equivalent:
d4095 3
a4097 3
    open(FOO, '|-', "tr '[a-z]' '[A-Z]'");
    open(FOO, '|-') || exec 'tr', '[a-z]', '[A-Z]';
    open(FOO, '|-', "tr", '[a-z]', '[A-Z]');
d4100 3
a4102 3
    open(FOO, '-|', "cat -n '$file'");
    open(FOO, '-|') || exec 'cat', '-n', $file;
    open(FOO, '-|', "cat", '-n', $file);
d4104 1
a4104 1
The last example in each block shows the pipe as "list form", which is
d4106 9
a4114 2
your platform has true C<fork()> (in other words, if your platform is
Unix) you can use the list form.
d4126 1
a4126 1
of $^F.  See L<perlvar/$^F>.
d4129 1
a4129 1
child to finish, and returns the status value in C<$?> and
d4132 2
a4133 2
The filename passed to 2-argument (or 1-argument) form of open() will
have leading and trailing whitespace deleted, and the normal
d4141 1
a4141 1
Use 3-argument form to open a file with arbitrary weird characters in it,
d4143 2
a4144 1
    open(FOO, '<', $file);
d4149 2
a4150 1
    open(FOO, "< $file\0");
d4153 1
a4153 1
conscientiously choose between the I<magic> and 3-arguments form
d4156 1
a4156 1
    open IN, $ARGV[0];
d4161 2
a4162 1
    open IN, '<', $ARGV[0];
d4166 5
a4170 5
If you want a "real" C C<open> (see C<open(2)> on your system), then you
should use the C<sysopen> function, which involves no such magic (but
may use subtly different filemodes than Perl open(), which is mapped
to C fopen()).  This is
another way to protect your filenames from interpretation.  For example:
d4182 3
a4184 2
filehandles that have the scope of whatever variables hold references to
them, and automatically close whenever and however you leave that scope:
d4190 1
d4192 1
a4192 1
        open($handle, "myfile") or die "myfile: $!";
d4195 3
a4197 3
        mung $first or die "mung failed";  # Or here.
        return $first, <$handle> if $ALL;  # Or here.
        $first;          # Or here.
d4200 8
d4210 2
d4215 2
d4222 1
a4222 1
reference to a new anonymous dirhandle.
d4225 1
a4225 1
See example at C<readdir>.
d4232 5
a4236 3
Returns the numeric (the native 8-bit encoding, like ASCII or EBCDIC,
or Unicode) value of the first character of EXPR.  If EXPR is omitted,
uses C<$_>.
d4250 2
d4256 1
a4256 1
In this way C<our> differs from C<use vars>, which is package scoped.
d4258 6
a4263 6
Unlike C<my>, which both allocates storage for a variable and associates
a simple name with that storage for use within the current scope, C<our>
associates a simple name with a package variable in the current package,
for use within the current scope.  In other words, C<our> has the same
scoping rules as C<my>, but does not necessarily create a
variable.
d4308 3
a4310 3
evolving.  TYPE is currently bound to the use of C<fields> pragma,
and attributes are handled using the C<attributes> pragma, or starting
from Perl 5.8.0 also via the C<Attribute::Handlers> module.  See
d4317 2
d4335 2
a4336 1
    b  A bit string (ascending bit order inside each byte, like vec()).
d4353 3
a4355 3
      (Quads are available only if your system supports 64-bit
       integer values _and_ if Perl has been compiled to support those.
           Raises an exception otherwise.)
d4359 2
a4360 2
      (This 'integer' is _at_least_ 32 bits wide.  Its exact
           size depends on what a local C compiler calls 'int'.)
d4367 2
a4368 2
    j   A Perl internal signed integer value (IV).
    J   A Perl internal unsigned integer value (UV).
d4375 3
a4377 3
      (Long doubles are available only if your system supports long
       double values _and_ if Perl has been compiled to support those.
           Raises an exception otherwise.)
d4383 9
a4391 7
    U  A Unicode character number.  Encodes to a character in character mode
        and UTF-8 (or UTF-EBCDIC in EBCDIC platforms) in byte mode.

    w  A BER compressed integer (not an ASN.1 BER, see perlpacktut for
       details).  Its bytes represent an unsigned integer in base 128,
       most significant digit first, with as few digits as possible.  Bit
       eight (the high bit) is set on each byte except the last.
d4397 2
a4398 1
    .  Null-fill or truncate to absolute position specified by the value.
d4412 2
a4413 2
                   representation of the packed string. Efficient but
                   dangerous.
d4436 1
a4436 1
something else, dscribed below.  Supplying a C<*> for the repeat count
d4489 1
a4489 1
I<n>th innermost C<()> group, or to the start of the string if I<n> is
d4495 1
a4495 1
to encode per line of output, with 0, 1 and 2 replaced by 45. The repeat 
d4503 1
a4503 1
after the first null, and C<a> returns data without any sort of trimming.
d4508 1
a4508 1
for when the count is 0.
d4513 2
a4514 1
Each such format generates 1 bit of the result.
d4533 1
a4533 1
On unpacking, bits are converted to a string of C<"0">s and C<"1">s.
d4540 1
a4540 1
For each such format, pack() generates 4 bits of the result.
d4544 1
a4544 1
C<"\0"> and C<"\1">.  For characters C<"a".."f"> and C<"A".."F">, the result
d4546 2
a4547 2
C<"A"> both generate the nybble C<0xa==10>.  Do not use any characters
but these with this format.
d4588 1
a4588 1
I<length-item> describes how the length value is packed. Formats likely
d4594 1
a4594 1
for I<length-item>. If it has no repeat count or uses a '*', the number
d4598 2
a4599 2
used. You write C</>I<sequence-item> and the repeat count is obtained by
popping off the last element from the stack. The I<sequence-item> must not
d4607 5
a4611 3
    unpack("W/a", "\04Gurusamy")            gives ("Guru")
    unpack("a3/A A*", "007 Bond  J ")       gives (" Bond", "J")
    unpack("a3 x2 /A A*", "007: Bond, J.")  gives ("Bond, J", ".")
d4613 2
a4614 2
    pack("n/a* w/a","hello,","world")       gives "\000\006hello,\005world"
    pack("a/W2", ord("a") .. ord("z"))      gives "2ab"
d4676 2
a4677 2
big-endian.  Alpha and MIPS can be either: Digital/Compaq used/uses them in
little-endian mode, but SGI/Cray uses them in big-endian mode.
d4717 1
a4717 1
given how C<n>, C<N>, C<v> and C<V> don't cover signed integers, 
d4720 1
a4720 1
Here are some concerns to keep in mind when using endianness modifier:
d4779 3
a4781 2
a byte-by-byte basis. Character mode is the default unless the format string 
starts with C<U>. You can always switch mode mid-format with an explicit 
d4785 20
d4817 1
a4817 1
C<@@> starts over at 0. Therefore, the result of
d4827 1
a4827 1
characters. For example, to pack() or unpack() a C structure like
d4860 1
a4860 1
If TEMPLATE requires more arguments that pack() is given, pack()
d4875 4
a4878 3
    # same thing with Unicode circled letters. You don't get the UTF-8
    # bytes because the U at the start of the format caused a switch to
    # U0-mode, so the UTF-8 bytes get joined into characters
d4881 2
a4882 1
    # This is the UTF-8 encoding of the string in the previous example
d4893 2
a4894 2
    # "\1\0\2\0" on little-endian
    # "\0\1\0\2" on big-endian
d4938 2
d4943 17
a4959 1
=item package NAMESPACE
a4960 4
Declares the compilation unit as being in the given namespace.  The scope
of the package declaration is from the declaration itself through the end
of the enclosing block, file, or eval (the same as the C<my> operator).
All further unqualified dynamic identifiers will be in this namespace.
d4963 1
a4963 1
with C<my> (or C<our> (or C<state>)).  Typically it would be the first 
d4984 7
d4994 2
d5002 2
a5003 1
See L<IPC::Open2>, L<IPC::Open3>, and L<perlipc/"Bidirectional Communication">
d5013 2
d5017 2
d5026 12
d5043 20
a5062 9
Returns the offset of where the last C<m//g> search left off for the variable
in question (C<$_> is used when the variable is not specified).  Note that
0 is a valid match offset.  C<undef> indicates that the search position
is reset (usually due to match failure, but can also be because no match has
yet been run on the scalar). C<pos> directly accesses the location used
by the regexp engine to store the offset, so assigning to C<pos> will change
that offset, and so will also influence the C<\G> zero-width assertion in
regular expressions. Because a failed C<m//gc> match doesn't reset the offset,
the return from C<pos> won't change either in this case.  See L<perlre> and
d5068 2
d5074 2
d5077 18
a5094 18
FILEHANDLE may be a scalar variable containing
the name of or a reference to the filehandle, thus introducing
one level of indirection.  (NOTE: If FILEHANDLE is a variable and
the next token is a term, it may be misinterpreted as an operator
unless you interpose a C<+> or put parentheses around the arguments.)
If FILEHANDLE is omitted, prints to standard output by default, or
to the last selected output channel; see L</select>.  If LIST is
also omitted, prints C<$_> to the currently selected output handle.
To set the default output handle to something other than STDOUT
use the select operation.  The current value of C<$,> (if any) is
printed between each LIST item.  The current value of C<$\> (if
any) is printed after the entire LIST has been printed.  Because
print takes a LIST, anything in the LIST is evaluated in list
context, and any subroutine that you call will have one or more of
its expressions evaluated in list context.  Also be careful not to
follow the print keyword with a left parenthesis unless you want
the corresponding right parenthesis to terminate the arguments to
the print; put parentheses around all the arguments 
d5097 5
a5101 3
Note that if you're storing FILEHANDLEs in an array, or if you're using
any other expression more complex than a scalar variable to retrieve it,
you will have to use a block returning the filehandle value instead:
d5112 2
d5116 4
d5121 8
a5128 4
(the output record separator) is not appended.  The first argument
of the list will be interpreted as the C<printf> format. See C<sprintf>
for an explanation of the format argument.  If C<use locale> is in effect,
and POSIX::setlocale() has been called, the character used for the decimal
d5130 1
a5130 1
locale.  See L<perllocale> and L<POSIX>.
d5139 2
d5155 7
a5161 3
Treats ARRAY as a stack, and pushes the values of LIST
onto the end of ARRAY.  The length of ARRAY increases by the length of
LIST.  Has the same effect as
d5170 12
d5184 2
d5188 6
d5196 1
a5196 1
=item qw/STRING/
d5202 2
d5211 4
a5214 2
Returns the value of EXPR with all non-"word"
characters backslashed.  (That is, all characters not matching
d5219 1
d5225 1
a5225 1
considered a mini-regular expression. For example:
d5246 58
a5303 2
Will both leave the sentence as is. Normally, when accepting string input from
the user, quotemeta() or C<\Q> must be used.
d5310 2
d5330 7
d5342 2
d5359 2
a5360 1
fread(3) library function.  To get a true read(2) system call, see C<sysread>.
d5363 1
a5363 1
either (8-bit) bytes or characters are read.  By default all
d5366 1
a5366 1
pragma, L<open>), the I/O will operate on UTF-8 encoded Unicode
d5373 2
d5397 7
d5409 2
d5412 1
a5412 1
*ARGV if EXPR is not provided).  In scalar context, each call reads and
d5442 1
a5442 1
C<ARGV> filehandle. In that case, you have to open each element of
d5460 2
d5467 2
d5474 2
d5489 2
d5504 1
a5504 1
C<open> pragma, L<open>), the I/O will operate on UTF-8 encoded Unicode
d5513 2
d5539 1
a5539 1
C<eval {}>, C<sub {}> or C<do {}>, and should not be used to exit
d5554 2
d5557 1
a5557 1
string otherwise. If EXPR
d5585 2
a5586 2
a variable. You get this from taking the reference of function calls like
C<pos()> or C<substr()>. C<VSTRING> is returned if the reference points
d5597 2
d5612 2
d5621 2
d5712 1
a5712 1
first look for a similar filename with a "F<.pmc>" extension. If this file
d5716 1
a5716 1
You can also insert hooks into the import facility, by putting Perl code
d5718 1
a5718 1
references, array references and blessed objects.
d5735 1
a5735 1
A reference to a subroutine. If there is no filehandle (previous item),
d5737 2
a5738 2
call, writing the line into C<$_> and returning 1, then returning 0 at
end of file.  If there is a filehandle, then the subroutine will be
d5745 1
a5745 1
Optional state for the subroutine. The state is passed in as C<$_[1]>. A
d5753 2
a5754 2
or reference to a typeglob, blessed or unblessed); tied filehandles will be
ignored and return value processing will stop there.
d5796 1
a5796 1
corresponding to the files they have loaded. See L<perlvar/%INC>.
d5805 2
d5831 2
d5836 1
a5836 1
may vary from one execution to the next (see C<wantarray>).  If no EXPR
d5847 2
d5879 2
d5884 2
d5891 2
d5902 2
d5905 1
a5905 1
empty.  If it succeeds it returns true, otherwise it returns false and
d5913 2
d5920 2
d5926 1
a5926 3
Just like C<print>, but implicitly appends a newline.
C<say LIST> is simply an abbreviation for C<{ local $\ = "\n"; print
LIST }>.
d5928 9
a5936 2
This keyword is available only when the "say" feature is
enabled: see L<feature>.
d5941 2
d5954 4
a5957 4
Because C<scalar> is a unary operator, if you accidentally use for EXPR a
parenthesized list, this behaves as a scalar comma expression, evaluating
all but the last element in void context and returning the final element
evaluated in scalar context.  This is seldom what you want.
d5973 2
d5978 3
a5980 3
I<in bytes> to POSITION, C<1> to set it to the current position plus
POSITION, and C<2> to set it to EOF plus POSITION (typically
negative).  For WHENCE you may use the constants C<SEEK_SET>,
d5982 1
a5982 1
of the file) from the Fcntl module.  Returns C<1> on success, C<0>
d6022 2
d6034 2
d6038 1
a6038 1
effects: first, a C<write> or a C<print> without a filehandle will
d6040 4
a6043 3
output will refer to this output channel.  For example, if you have to
set the top of form format for more than one output channel, you might
do the following:
d6061 2
d6070 2
a6071 2
    vec($rin,fileno(STDIN),1) = 1;
    vec($win,fileno(STDOUT),1) = 1;
d6078 4
a6081 4
        my(@@fhlist) = split(' ',$_[0]);
        my($bits);
        for (@@fhlist) {
            vec($bits,fileno($_),1) = 1;
d6083 1
a6083 1
        $bits;
d6085 1
a6085 1
    $rin = fhbits('STDIN TTY SOCK');
d6112 1
a6112 1
On error, C<select> behaves like select(2): it returns
d6115 7
a6121 5
On some Unixes, select(2) may report a socket file
descriptor as "ready for reading" when no data is available, and
thus a subsequent read blocks. This can be avoided if you always use 
O_NONBLOCK on the socket. See select(2) and fcntl(2) for further
details.
d6127 2
d6132 2
d6147 2
d6152 2
d6155 1
a6155 1
the undefined value if there is an error.  See also
d6159 2
d6164 2
d6171 1
a6171 1
successful, or false if there is an error.  As an example, the
d6181 2
d6188 2
d6208 2
d6217 2
d6222 2
d6228 2
d6233 4
a6236 2
Sets the socket option requested.  Returns undefined if there is an
error.  Use integer constants provided by the C<Socket> module for
d6246 2
d6251 2
d6255 2
d6263 13
a6275 1
C<UNITCHECK {}> and C<END {}> constructs.
d6284 2
d6292 2
a6293 2
structure.  Returns like ioctl: the undefined value for error, "C<0> but
true" for zero, or the actual return value otherwise.
d6296 2
d6301 2
d6304 1
a6304 1
segment id, or the undefined value if there is an error.
d6307 2
d6313 2
d6317 2
d6324 5
a6328 3
SIZE bytes.  Return true if successful, or false if there is an error.
shmread() taints the variable. See also L<perlipc/"SysV IPC">,
C<IPC::SysV> documentation, and the C<IPC::Shareable> module from CPAN.
d6333 2
d6357 2
d6372 2
d6399 1
a6399 1
your system supports it. See L<perlfaq8> for details.
d6406 2
d6421 2
d6444 2
d6453 2
d6468 10
a6477 7
If the subroutine's prototype is C<($$)>, the elements to be compared
are passed by reference in C<@@_>, as for a normal subroutine.  This is
slower than unprototyped subroutines, where the elements to be
compared are passed into the subroutine
as the package global variables $a and $b (see example below).  Note that
in the latter case, it is usually counter-productive to declare $a and
$b as lexicals.
d6485 2
a6486 1
When C<use locale> is in effect, C<sort LIST> sorts LIST according to the
d6496 1
a6496 1
That algorithm was not stable, and I<could> go quadratic.  (A I<stable> sort
d6518 1
a6518 1
    @@articles = sort {uc($a) cmp uc($b)} @@files;
d6535 1
a6535 1
    $age{$a} <=> $age{$b};  # presuming numeric
d6555 2
a6556 2
            ||
        uc($a)  cmp  uc($b)
d6565 1
a6565 1
        push @@caps, uc($_);
d6569 5
a6573 5
        $nums[$b] <=> $nums[$a]
            ||
        $caps[$a] cmp $caps[$b]
        } 0..$#old
    ];
d6578 3
a6580 3
               ||
           $a->[2] cmp $b->[2]
    } map { [$_, /=(\d+)/, uc($_)] } @@old;
d6599 1
a6599 1
a function. If you want to sort the list returned by the function call
d6632 3
a6634 4
(not-a-number), and because C<sort> raises an exception unless the
result of a comparison is defined, when sorting with a comparison function
like C<< $a <=> $b >>, be careful about lists that might contain a C<NaN>.
The following example takes advantage that C<NaN != NaN> to
d6639 1
a6639 1
=item splice ARRAY,OFFSET,LENGTH,LIST
d6642 1
a6642 1
=item splice ARRAY,OFFSET,LENGTH
d6644 1
a6644 1
=item splice ARRAY,OFFSET
d6646 3
a6648 1
=item splice ARRAY
d6659 1
a6659 1
If both OFFSET and LENGTH are omitted, removes everything. If OFFSET is
d6663 1
a6663 1
The following equivalences hold (assuming C<< $[ == 0 and $#a >= $i >> )
d6684 12
d6705 51
a6755 10
Splits the string EXPR into a list of strings and returns that list.  By
default, empty leading fields are preserved, and empty trailing ones are
deleted.  (If all fields are empty, they are considered to be trailing.)

In scalar context, returns the number of fields found.

If EXPR is omitted, splits the C<$_> string.  If PATTERN is also omitted,
splits on whitespace (after skipping any leading whitespace).  Anything
matching PATTERN is taken to be a delimiter separating the fields.  (Note
that the delimiter may be longer than one character.)
d6758 33
a6790 37
of fields the EXPR will be split into, though the actual number of
fields returned depends on the number of times PATTERN matches within
EXPR.  If LIMIT is unspecified or zero, trailing null fields are
stripped (which potential users of C<pop> would do well to remember).
If LIMIT is negative, it is treated as if an arbitrarily large LIMIT
had been specified.  Note that splitting an EXPR that evaluates to the
empty string always returns the empty list, regardless of the LIMIT
specified.

A pattern matching the empty string (not to be confused with
an empty pattern C<//>, which is just one member of the set of patterns
matching the epmty string), splits EXPR into individual
characters.  For example:

    print join(':', split(/ */, 'hi there')), "\n";

produces the output 'h:i:t:h:e:r:e'.

As a special case for C<split>, the empty pattern C<//> specifically
matches the empty string; this is not be confused with the normal use
of an empty pattern to mean the last successful match.  So to split
a string into individual characters, the following:

    print join(':', split(//, 'hi there')), "\n";

produces the output 'h:i: :t:h:e:r:e'.

Empty leading fields are produced when there are positive-width matches at
the beginning of the string; a zero-width match at the beginning of
the string does not produce an empty field. For example:

   print join(':', split(/(?=\w)/, 'hi there!'));

produces the output 'h:i :t:h:e:r:e!'. Empty trailing fields, on the other
hand, are produced when there is a match at the end of the string (and
when LIMIT is given and is not 0), regardless of the length of the match.
For example:
d6792 1
a6792 2
   print join(':', split(//,   'hi there!', -1)), "\n";
   print join(':', split(/\W/, 'hi there!', -1)), "\n";
d6794 5
a6798 2
produce the output 'h:i: :t:h:e:r:e:!:' and 'hi:there:', respectively,
both with an empty trailing field.
d6800 1
a6800 1
The LIMIT parameter can be used to split a line partially
d6802 2
a6803 1
    ($login, $passwd, $remainder) = split(/:/, $_, 3);
d6805 2
a6806 5
When assigning to a list, if LIMIT is omitted, or zero, Perl supplies
a LIMIT one larger than the number of variables in the list, to avoid
unnecessary work.  For the list above LIMIT would have been 4 by
default.  In time critical applications it behooves you not to split
into more fields than you really need.
d6808 1
a6808 2
If the PATTERN contains parentheses, additional list elements are
created from each matching substring in the delimiter.
d6810 2
a6811 1
    split(/([,-])/, "1-10,20", 3);
d6813 1
a6813 1
produces the list value
d6815 1
a6815 1
    (1, '-', 10, ',', 20)
d6817 4
a6820 2
If you had the entire header of a normal Unix email message in $header,
you could split it up into fields and their values this way:
d6822 1
a6822 2
    $header =~ s/\n(?=\s)//g;  # fix continuation lines
    %hdrs   =  (UNIX_FROM => split /^(\S*?):\s*/m, $header);
d6824 1
a6824 3
The pattern C</PATTERN/> may be replaced with an expression to specify
patterns that vary at runtime.  (To do runtime compilation only once,
use C</$variable/o>.)
d6826 11
a6836 7
As a special case, specifying a PATTERN of space (S<C<' '>>) will split on
white space just as C<split> with no arguments does.  Thus, S<C<split(' ')>> can
be used to emulate B<awk>'s default behavior, whereas S<C<split(/ /)>>
will give you as many initial null fields (empty string) as there are leading spaces.
A C<split> on C</\s+/> is like a S<C<split(' ')>> except that any leading
whitespace produces a null first field.  A C<split> with no arguments
really does a S<C<split(' ', $_)>> internally.
d6838 2
a6839 2
A PATTERN of C</^/> is treated as if it were C</^/m>, since it isn't
much use otherwise.
d6841 2
a6842 1
Example:
d6844 2
a6845 7
    open(PASSWD, '/etc/passwd');
    while (<PASSWD>) {
        chomp;
        ($login, $passwd, $uid, $gid,
         $gcos, $home, $shell) = split(/:/);
        #...
    }
d6847 2
a6848 2
As with regular pattern matching, any capturing parentheses that are not
matched in a C<split()> will be set to C<undef> when returned:
d6850 2
a6851 2
    @@fields = split /(A)|B/, "1A2B3";
    # @@fields is (1, 'A', 2, undef, 3)
d6856 2
d6860 1
a6860 1
and see C<sprintf(3)> or C<printf(3)> on your system for an explanation of
d6878 2
a6879 1
pass it an array as your first argument. The array is given scalar context,
d6906 1
a6906 1
        into the next variable in the parameter list
d6931 1
a6931 1
An explicit format parameter index, such as C<2$>. By default sprintf
d6979 1
a6979 1
integers, one for each character in the string. Perl applies the format to
d6981 1
a6981 1
dot C<.> by default). This can be useful for displaying ordinal values of
d7001 1
a7001 1
display the given value. You can override the width by putting
d7005 5
a7009 5
  printf '<%s>', "a";       # prints "<a>"
  printf '<%6s>', "a";      # prints "<     a>"
  printf '<%*s>', 6, "a";   # prints "<     a>"
  printf '<%*2$s>', "a", 6; # prints "<     a>"
  printf '<%2s>', "long";   # prints "<long>" (does not truncate)
d7019 1
a7019 1
For floating-point formats except 'g' and 'G', this specifies
d7031 1
a7031 1
including thoe prior to the decimal point and those after it; for 
d7093 1
a7093 1
number as using C<l>, C<h>, C<V>, C<q>, C<L>, or C<ll>. For integer
d7099 5
d7105 16
a7120 3
   h           interpret integer as C type "short" or "unsigned short"
   q, L or ll  interpret integer as C type "long long", "unsigned long long".
               or "quads" (typically 64-bit integers)
d7122 1
a7122 4
The last will raise an exception if Perl does not understand "quads" in your
installation. (This requires either that the platform natively support quads,
or that Perl were specifically compiled to support quads.) You can find out
whether your Perl supports quads via L<Config>:
d7132 1
a7132 1
platform supports them. You can find out whether your Perl supports long
d7159 1
a7159 1
format for each format specification. If the format specification
d7189 2
a7190 1
If C<use locale> is in effect and POSIX::setlocale() has been called,
d7200 2
d7214 1
a7214 1
Sets the random number seed for the C<rand> operator.
d7216 1
a7216 21
The point of the function is to "seed" the C<rand> function so that
C<rand> can produce a different sequence each time you run your
program.

If srand() is not called explicitly, it is called implicitly at the
first use of the C<rand> operator.  However, this was not true of
versions of Perl before 5.004, so if your script will run under older
Perl versions, it should call C<srand>.

Most programs won't even call srand() at all, except those that
need a cryptographically-strong starting point rather than the
generally acceptable default, which is based on time of day,
process ID, and memory allocation, or the F</dev/urandom> device
if available. You may also want to call srand() after a fork() to
avoid child processes sharing the same seed value as the parent (and
consequently each other).

You can call srand($seed) with the same $seed to reproduce the
I<same> sequence from rand(), but this is usually reserved for
generating predictable results for testing or debugging.
Otherwise, don't call srand() more than once in your program.
d7218 23
a7240 1
Do B<not> call srand() (i.e., without an argument) more than once per
d7243 1
a7243 1
srand() again actually I<loses> randomness.
a7254 10
For cryptographic purposes, however, you need something much more random 
than the default seed.  Checksumming the compressed output of one or more
rapidly changing operating system status programs is the usual method.  For
example:

    srand (time ^ $$ ^ unpack "%L*", `ps axww | gzip -f`);

If you're particularly concerned with this, search the CPAN for
random number generator modules instead of rolling out your own.

d7265 12
d7286 2
d7290 1
a7290 1
omitted, it stats C<$_>.  Returns the empty list if C<stat> fails.  Typically
d7316 1
a7316 1
(*) Not all fields are supported on all filesystem types. Notably, the
d7318 1
a7318 1
"creation time", see L<perlport/"Files and Filesystems"> for details.
d7376 1
a7376 1
    # Note that the exact meaning of these is system dependent.
d7380 2
a7381 1
    # File types.  Not necessarily all are available on your system.
d7383 2
a7384 1
    S_IFREG S_IFDIR S_IFLNK S_IFBLK S_IFCHR S_IFIFO S_IFSOCK S_IFWHT S_ENFMT
d7386 2
a7387 1
    # The following are compatibility aliases for S_IRUSR, S_IWUSR, S_IXUSR.
d7393 2
a7394 2
    S_IMODE($mode)    the part of $mode containing the permission bits
            and the setuid/setgid/sticky bits
d7396 3
a7398 3
    S_IFMT($mode)    the part of $mode containing the file type
            which can be bit-anded with (for example) S_IFREG
                        or with the following functions
d7415 2
d7426 3
a7428 1
C<state> declares a lexically scoped variable, just like C<my> does.
d7432 1
d7435 2
a7436 1
is in effect.  See L<feature>.
d7443 2
d7448 1
a7448 1
patterns you are searching on, and on the distribution of character
d7450 1
a7450 1
run times with and without it to see which runs faster.  Those loops
d7452 2
a7453 3
parts of more complex patterns) will benefit most.  You may have only
one C<study> active at a time: if you study a different scalar the first
is "unstudied".  (The way C<study> works is this: a linked list of every
d7508 6
a7513 4
This is subroutine definition, not a real function I<per se>.
Without a BLOCK it's just a forward declaration.  Without a NAME,
it's an anonymous function declaration, and does actually return
a value: the CODE ref of the closure you just created.
d7516 1
a7516 1
references, and L<attributes> and L<Attribute::Handlers> for more
d7519 11
d7537 2
d7540 3
a7542 4
offset C<0>, or whatever you've set C<$[> to (but don't do that).
If OFFSET is negative (or more precisely, less than C<$[>), starts
that far from the end of the string.  If LENGTH is omitted, returns
everything to the end of the string.  If LENGTH is negative, leaves that
d7580 1
a7580 1
Note that the lvalue returned by the 3-arg version of substr() acts as
d7592 12
a7603 1
Prior to Perl version 5.9.1, the result of using an lvalue multiple times was
d7609 2
d7618 2
d7623 2
d7648 3
a7650 3
Note that some system calls can legitimately return C<-1>.  The proper
way to handle such calls is to assign C<$!=0;> before the call and
check the value of C<$!> if syscall returns C<-1>.
d7653 1
a7653 1
number of the read end of the pipe it creates.  There is no way
d7657 2
d7664 7
a7670 5
Opens the file whose filename is given by FILENAME, and associates it
with FILEHANDLE.  If FILEHANDLE is an expression, its value is used as
the name of the real filehandle wanted.  This function calls the
underlying operating system's C<open> function with the parameters
FILENAME, MODE, PERMS.
d7673 3
a7675 3
system-dependent; they are available via the standard module C<Fcntl>.
See the documentation of your operating system's C<open> to see which
values and flag bits are available.  You may combine several flags
d7718 1
a7718 1
exceed a certain value, typically 255. If you need more file
d7724 2
d7731 2
d7763 7
a7769 6
Sets FILEHANDLE's system position in bytes using 
lseek(2).  FILEHANDLE may be an expression whose value gives the name
of the filehandle.  The values for WHENCE are C<0> to set the new
position to POSITION, C<1> to set the it to the current position plus
POSITION, and C<2> to set it to EOF plus POSITION (typically
negative).
d7776 2
a7777 2
sysseek() bypasses normal buffered IO, so mixing this with reads (other
than C<sysread>, for example C<< <> >> or read()) C<print>, C<write>,
d7798 2
d7801 1
a7801 1
done first, and the parent process waits for the child process to
d7822 2
a7823 2
below). See also L</exec>.  This is I<not> what you want to use to capture
the output from a command, for that you should use merely backticks or
d7865 3
a7867 1
handler. See L<perlipc> for details.
d7876 2
d7883 1
a7883 1
stdio layers usually buffers data.  Returns the number of bytes
d7894 1
a7894 1
B<Warning>: If the filehandle is marked C<:utf8>, Unicode characters
d7896 1
a7896 1
return value of syswrite() are in (UTF-8 encoded Unicode) characters.
d7898 2
d7907 2
d7926 1
a7926 1
that has been manipulated by sysread(), syswrite() or sysseek().
d7932 2
d7942 2
d8036 2
d8046 2
d8050 1
a8050 1
C<localtime>. On most systems the epoch is 00:00:00 UTC, January 1, 1970;
d8054 4
a8057 5
For measuring time in better granularity than one second,
you may use either the L<Time::HiRes> module (from CPAN, and starting from
Perl 5.8 part of the standard distribution), or if you have
gettimeofday(2), you may be able to use the C<syscall> interface of Perl.
See L<perlfaq8> for details.
d8066 4
a8069 2
Returns a four-element list giving the user and system times, in
seconds, for this process and the children of this process.
d8077 2
d8081 2
d8091 2
d8095 1
a8095 2
on your system.  Returns true if successful, the undefined value
otherwise.
d8101 3
a8103 1
call L<seek> before writing to the file.
d8110 2
d8127 2
d8143 2
d8154 1
a8154 1
if your umask is C<0022> then the file will actually be created with
d8157 2
a8158 2
C<sysopen> C<0666> would create a file with mode C<0640> (C<0666 &~
027> is C<0640>).
d8178 2
d8185 2
d8191 1
a8191 1
DBM list values, so don't do that; see L<delete>.  Always returns the
d8214 4
a8217 2
Deletes a list of files. On success, it returns the number of files
it successfully deleted. On failure, it returns false and sets C<$!>
d8233 1
a8233 1
superuser and the B<-U> flag is supplied to Perl. Even if these
d8245 2
d8276 1
a8276 1
C<ord($char)> is taken, for bit fields the sum of zeroes and ones).
d8304 2
a8305 2
=item untie VARIABLE
X<untie>
d8307 1
a8307 2
Breaks the binding between a variable and a package.  (See C<tie>.)
Has no effect if the variable is not tied.
d8309 1
a8309 2
=item unshift ARRAY,LIST
X<unshift>
d8313 1
a8313 1
array, and returns the new number of elements in the array.
d8321 21
d8353 2
d8362 1
d8386 3
a8388 3
Also, if the specified Perl version is greater than or equal to 5.9.5,
C<use VERSION> will also load the C<feature> pragma and enable all
features available in the requested version.  See L<feature>.
d8390 5
a8394 2
5.11.0, strictures are enabled lexically as with C<use strict> (except
that the F<strict.pm> file is not actually loaded).
d8452 1
a8452 1
There's a corresponding C<no> command that unimports meanings imported
d8462 1
a8462 1
I<only> meant to be used to assert that the running perl is of a earlier
d8473 2
d8476 1
a8476 1
files.  The first two elements of the list must be the NUMERICAL access
d8489 1
a8489 1
argument. On most systems, this will set the file's access and
d8515 2
d8522 3
a8524 2
Returns a list consisting of all the values of the named hash, or the values
of an array. (In a scalar context, returns the number of values.)
d8526 11
a8536 6
The values are returned in an apparently random order.  The actual
random order is subject to change in future versions of Perl, but it
is guaranteed to be the same order as either the C<keys> or C<each>
function would produce on the same (unmodified) hash.  Since Perl
5.8.1 the ordering is different even between different runs of Perl
for security reasons (see L<perlsec/"Algorithmic Complexity Attacks">).
d8539 6
a8544 8
iterator,
see L</each>. (In particular, calling values() in void context resets
the iterator with no other overhead. Apart from resetting the iterator,
C<values @@array> in list context is the same as plain C<@@array>.
We recommend that you use void context C<keys @@array> for this, but reasoned
that it taking C<values @@array> out would require more documentation than
leaving it in.)

d8552 16
d8573 2
d8576 1
a8576 1
width BITS, and returns the value of the element specified by OFFSET
d8813 2
d8822 4
a8825 2
If you use wait in your handler for $SIG{CHLD} it may accidently wait for the
child created by qx() or system(). See L<perlipc> for details.
d8830 2
d8854 2
d8859 2
d8879 2
d8919 1
a8919 1
See L<perlvar> for details on setting C<%SIG> entries, and for more
d8930 2
d8938 9
a8946 9
Top of form processing is handled automatically:  if there is
insufficient room on the current page for the formatted record, the
page is advanced by writing a form feed, a special top-of-page format
is used to format the new page header, and then the record is written.
By default the top-of-page format is the name of the filehandle with
"_TOP" appended, but it may be dynamically set to the format of your
choice by assigning the name to the C<$^> variable while the filehandle is
selected.  The number of lines remaining on the current page is in
variable C<$->, which can be set to C<0> to force a new page.
d8958 2
d8964 125
@


1.14
log
@Merge in perl 5.10.1
@
text
@d17 3
a19 3
contexts for its arguments.  If it does both, the scalar arguments will
be first, and the list argument will follow.  (Note that there can ever
be only one such list argument.)  For instance, splice() has three scalar
d24 1
a24 1
list (and provide list context for the elements of the list) are shown
d29 1
a29 1
Commas should separate elements of the LIST.
d33 2
a34 2
parentheses.)  If you use the parentheses, the simple (but occasionally
surprising) rule is this: It I<looks> like a function, therefore it I<is> a
d36 9
a44 9
operator or unary operator, and precedence does matter.  And whitespace
between the function and left parenthesis doesn't count--so you need to
be careful sometimes:

    print 1+2+4;	# Prints 7.
    print(1+2) + 4;	# Prints 3.
    print (1+2)+4;	# Also prints 3!
    print +(1+2)+4;	# Prints 7.
    print ((1+2)+4);	# Prints 7.
d60 1
a60 1
null list.
d65 1
a65 1
Each operator and function decides which sort of value it would be most
d81 1
a81 1
In general, functions in Perl that serve as wrappers for system calls
d89 8
d171 1
a171 1
(These are only available if you enable the "switch" feature.
d179 1
a179 1
(C<state> is only available if the "state" feature is enabled. See
d194 1
a194 1
=item Keywords related to perl modules
d248 1
a248 1
* - C<sub> was a keyword in perl4, but in perl5 it is an
d289 1
a289 1
=over 8
d310 33
a342 33
    -r	File is readable by effective uid/gid.
    -w	File is writable by effective uid/gid.
    -x	File is executable by effective uid/gid.
    -o	File is owned by effective uid.

    -R	File is readable by real uid/gid.
    -W	File is writable by real uid/gid.
    -X	File is executable by real uid/gid.
    -O	File is owned by real uid.

    -e	File exists.
    -z	File has zero size (is empty).
    -s	File has nonzero size (returns size in bytes).

    -f	File is a plain file.
    -d	File is a directory.
    -l	File is a symbolic link.
    -p	File is a named pipe (FIFO), or Filehandle is a pipe.
    -S	File is a socket.
    -b	File is a block special file.
    -c	File is a character special file.
    -t	Filehandle is opened to a tty.

    -u	File has setuid bit set.
    -g	File has setgid bit set.
    -k	File has sticky bit set.

    -T	File is an ASCII text file (heuristic guess).
    -B	File is a "binary" file (opposite of -T).

    -M	Script start time minus file modification time, in days.
    -A	Same for access time.
    -C	Same for inode change time (Unix, may differ for other platforms)
d347 3
a349 3
	chomp;
	next unless -f $_;	# ignore specials
	#...
d371 2
a372 2
will test whether the permission can (not) be granted using the
access() family of system calls.  Also note that the C<-x> and C<-X> may
d382 1
a382 1
C<-exp($foo)> still works as expected, however--only single letters
d389 1
a389 1
containing null in the first block is considered a binary file.  If C<-T>
d391 1
a391 1
rather than the first block.  Both C<-T> and C<-B> return true on a null
d400 1
a400 1
that lstat() and C<-l> will leave values in the stat structure for the
d419 1
a419 1
C<-x $file && -w _ && -f _>. (This is only syntax fancy: if you use
d434 1
a434 1
Accepts an incoming socket connect, just as the accept(2) system call
d468 2
a469 2
It is usually a mistake to intermix C<alarm> and C<sleep> calls.
(C<sleep> may be internally implemented in your system with C<alarm>)
d478 4
a481 4
	local $SIG{ALRM} = sub { die "alarm\n" }; # NB: \n required
	alarm $timeout;
	$nread = sysread SOCKET, $buffer, $size;
	alarm 0;
d484 2
a485 2
	die unless $@@ eq "alarm\n";   # propagate unexpected errors
    	# timed out
d488 1
a488 1
    	# didn't
d509 1
a509 1
Binds a network address to a socket, just as the bind system call
d535 1
a535 1
directives. The directives alter the behaviour of the file handle.
d542 3
a544 3
Camel) or elsewhere, C<:raw> is I<not> simply the inverse of C<:crlf>
-- other layers which would affect the binary nature of the stream are
I<also> disabled. See L<PerlIO>, L<perlrun> and the discussion about the
d547 1
a547 1
The C<:bytes>, C<:crlf>, and C<:utf8>, and any other directives of the
d564 1
a564 1
is done on the filehandle.  Calling binmode() will normally flush any
d571 1
a571 1
internally Perl will operate on UTF-8 encoded Unicode characters.
d598 1
a598 1
binmode() is not only important for readline() and print() operations,
d629 1
a629 1
This keyword is enabled by the "switch" feature: see L<feature>
d638 2
a639 2
returns the caller's package name if there is a caller, that is, if
we're in a subroutine or C<eval> or C<require>, and the undefined value
d680 1
a680 1
might not return information about the call frame you expect it do, for
d684 14
d713 1
a713 1
neither is set, C<chdir> does nothing. It returns true upon success,
d716 3
a718 3
On systems that support fchdir, you might pass a file handle or
directory handle as argument.  On systems that don't support fchdir,
passing handles produces a fatal error at run time.
d726 1
a726 1
C<0644> is okay, C<'0644'> is not.  Returns the number of files
d729 1
a729 1
    $cnt = chmod 0755, 'foo', 'bar';
d731 1
a731 1
    $mode = '0644'; chmod $mode, 'foo';      # !!! sets mode to
d733 2
a734 2
    $mode = '0644'; chmod oct($mode), 'foo'; # this is better
    $mode = 0644;   chmod $mode, 'foo';      # this is best
d736 4
a739 5
On systems that support fchmod, you might pass file handles among the
files.  On systems that don't support fchmod, passing file handles
produces a fatal error at run time.   The file handles must be passed
as globs or references to be recognized.  Barewords are considered
file names.
d745 1
a745 1
You can also import the symbolic C<S_I*> constants from the Fcntl
d748 1
a748 2
    use Fcntl ':mode';

d750 1
a750 1
    # This is identical to the chmod 0755 of the above example.
d772 3
a774 3
	chomp;	# avoid \n on last field
	@@array = split(/:/);
	# ...
d828 4
a831 5
On systems that support fchown, you might pass file handles among the
files.  On systems that don't support fchown, passing file handles
produces a fatal error at run time.  The file handles must be passed
as globs or references to be recognized.  Barewords are considered
file names.
d841 1
a841 1
	or die "$user not in passwd file";
d843 1
a843 1
    @@ary = glob($pattern);	# expand filenames
d865 1
a865 1
except under the L<bytes> pragma, where low eight bits of the value
d894 1
a894 1
Closes the file or pipe associated with the file handle, flushes the IO
d901 1
a901 1
another C<open> on it, because C<open> will close it for you.  (See
d905 12
a916 13
If the file handle came from a piped open, C<close> will additionally
return false if one of the other system calls involved fails, or if the
program exits with non-zero status.  (If the only problem was that the
program exited non-zero, C<$!> will be set to C<0>.)  Closing a pipe
also waits for the process executing on the pipe to complete, in case you
want to look at the output of the pipe afterwards, and
implicitly puts the exit status value of that command into C<$?> and
C<${^CHILD_ERROR_NATIVE}>.

Prematurely closing the read end of a pipe (i.e. before the process
writing to it at the other end has closed it) will result in a
SIGPIPE being delivered to the writer.  If the other end can't
handle that, be sure to read all the data before closing the pipe.
d922 2
a923 2
    #...			# print stuff to output
    close OUTPUT		# wait for sort to finish
d926 1
a926 1
    open(INPUT, 'foo')		# get sort's results
d941 2
a942 2
Attempts to connect to a remote socket, just as the connect system call
does.  Returns true if it succeeded, false otherwise.  NAME should be a
d960 1
a960 1
block.  C<last> and C<redo> will behave as if they had been executed within
d965 2
a966 2
	### redo always comes here
	do_something;
d968 3
a970 3
	### next always comes here
	do_something_else;
	# then back the top to re-check EXPR
d974 2
a975 2
Omitting the C<continue> section is semantically equivalent to using an
empty one, logically enough.  In that case, C<next> goes directly back
d978 3
a980 3
If the "switch" feature is enabled, C<continue> is also a
function that will break out of the current C<when> or C<default>
block, and fall through to the next case. See L<feature> and
d1035 1
a1035 1
and implementations on non-UNIX platforms may produce different
d1057 1
a1057 1
	die "Sorry...\n";
d1059 1
a1059 1
	print "ok\n";
d1094 1
a1094 1
only the older DBM functions, you may perform only one C<dbmopen> in your
d1101 2
a1102 2
either use file tests or try setting a dummy hash entry inside an C<eval>,
which will trap the error.
d1111 1
a1111 1
	print $key, ' = ', unpack('L',$val), "\n";
d1124 1
a1124 1
	or die "Can't open netscape history file: $!";
d1132 1
a1132 1
the undefined value C<undef>.  If EXPR is not present, C<$_> will be
d1147 1
a1147 1
declarations of C<&func>.  Note that a subroutine which is not defined
d1149 1
a1149 1
makes it spring into existence the first time that it is called -- see
d1169 1
a1169 1
	unless defined($value = readlink $sym);
d1179 1
a1179 1
The pattern match succeeds, and C<$1> is defined, despite the fact that it
d1184 1
a1184 1
should use C<defined> only when you're questioning the integrity of what
d1193 29
a1221 11
Given an expression that specifies a hash element, array element, hash slice,
or array slice, deletes the specified element(s) from the hash or array.
In the case of an array, if the array elements happen to be at the end,
the size of the array will shrink to the highest element that tests
true for exists() (or 0 if no such element exists).

Returns a list with the same number of elements as the number of elements
for which deletion was attempted.  Each element of that list consists of
either the value of the element deleted, or the undefined value.  In scalar
context, this means that you get the value of the last element deleted (or
the undefined value if that element did not exist).
a1227 10
Deleting from C<%ENV> modifies the environment.  Deleting from
a hash tied to a DBM file deletes the entry from the DBM file.  Deleting
from a C<tie>d hash or array may not necessarily return anything.

Deleting an array element effectively returns that position of the array
to its initial, uninitialized state.  Subsequently testing for the same
element with exists() will return false.  Also, deleting array elements
in the middle of an array will not shift the index of the elements
after them down.  Use splice() for that.  See L</exists>.

d1231 1
a1231 1
	delete $HASH{$key};
d1235 1
a1235 1
	delete $ARRAY[$index];
d1244 3
a1246 2
But both of these are slower than just assigning the empty list
or undefining %HASH or @@ARRAY:
d1248 2
a1249 2
    %HASH = ();		# completely empty %HASH
    undef %HASH;	# forget %HASH ever existed
d1251 2
a1252 2
    @@ARRAY = ();	# completely empty @@ARRAY
    undef @@ARRAY;	# forget @@ARRAY ever existed
d1254 2
a1255 3
Note that the EXPR can be arbitrarily complicated as long as the final
operation is a hash element, array element,  hash slice, or array slice
lookup:
d1266 5
a1270 7
Outside an C<eval>, prints the value of LIST to C<STDERR> and
exits with the current value of C<$!> (errno).  If C<$!> is C<0>,
exits with the value of C<<< ($? >> 8) >>> (backtick `command`
status).  If C<<< ($? >> 8) >>> is C<0>, exits with C<255>.  Inside
an C<eval(),> the error message is stuffed into C<$@@> and the
C<eval> is terminated with the undefined value.  This makes
C<die> the way to raise an exception.
d1296 1
a1296 3
See also exit(), warn(), and the Carp module.

If LIST is empty and C<$@@> already contains a value (typically from a
d1303 1
a1303 1
If LIST is empty and C<$@@> contains an object reference that has a
d1306 1
a1306 1
C<$@@>.  i.e. as if C<< $@@ = eval { $@@->PROPAGATE(__FILE__, __LINE__) }; >>
d1311 22
a1332 10
die() can also be called with a reference argument.  If this happens to be
trapped within an eval(), $@@ contains the reference.  This behavior permits
a more elaborate exception handling implementation using objects that
maintain arbitrary state about the nature of the exception.  Such a scheme
is sometimes preferable to matching particular string values of $@@ using
regular expressions.  Because $@@ is a global variable, and eval() may be
used within object implementations, care must be taken that analyzing the
error object doesn't replace the reference in the global variable.  The
easiest solution is to make a local copy of the reference before doing
other manipulations.  Here's an example:
d1334 1
a1334 1
    use Scalar::Util 'blessed';
d1346 2
a1347 2
Because perl will stringify uncaught exception messages before displaying
them, you may want to overload stringification operations on such custom
d1352 1
a1352 1
handler will be called with the error text and can change the error
d1357 1
a1357 1
currently the case--the C<$SIG{__DIE__}> hook is currently called
d1361 1
a1361 1
	die @@_ if $^S;
d1367 2
d1413 1
a1413 1
Note that inclusion of library modules is better done with the
d1423 6
a1428 6
   {
	unless ($return = do $file) {
	    warn "couldn't parse $file: $@@" if $@@;
	    warn "couldn't do $file: $!"    unless defined $return;
	    warn "couldn't run $file"       unless $return;
	}
d1448 1
a1448 1
resulting confusion on the part of Perl.
d1458 8
a1465 4
When called in list context, returns a 2-element list consisting of the
key and value for the next element of a hash, so that you can iterate over
it.  When called in scalar context, returns only the key for the next
element in the hash.
d1467 2
a1468 2
Entries are returned in an apparently random order.  The actual random
order is subject to change in future versions of perl, but it is
d1474 10
a1483 10
When the hash is entirely read, a null array is returned in list context
(which when assigned produces a false (C<0>) value), and C<undef> in
scalar context.  The next call to C<each> after that will start iterating
again.  There is a single iterator for each hash, shared by all C<each>,
C<keys>, and C<values> function calls in the program; it can be reset by
reading all the elements from the hash, or by evaluating C<keys HASH> or
C<values HASH>.  If you add or delete elements of a hash while you're
iterating over it, you may get entries skipped or duplicated, so
don't.  Exception: It is always safe to delete the item most recently
returned by C<each()>, which means that the following code will work:
d1490 2
a1491 2
The following prints out your environment like the printenv(1) program,
only in a different order:
d1494 1
a1494 1
	print "$key=$value\n";
d1511 1
a1511 1
reads a character and then C<ungetc>s it, so isn't very useful in an
d1517 1
a1517 1
with empty parentheses is very different.  It refers to the pseudo file
d1528 1
a1528 1
detect the end of each file, C<eof()> will only detect the end of the
d1533 2
a1534 2
	next if /^\s*#/;	# skip comments
	print "$.\t$_";
d1536 1
a1536 1
	close ARGV  if eof;	# Not eof()!
d1541 5
a1545 5
	if (eof()) {		# check for end of last file
	    print "--------------\n";
	}
	print;
	last if eof();          # needed if we're reading from a terminal
d1589 2
a1590 2
error message.  If there was no error, C<$@@> is guaranteed to be a null
string.  Beware that using C<eval> neither silences perl from printing
d1617 1
a1617 1
    eval { $answer = };			# WRONG
d1620 1
a1620 1
    eval '$answer =';	# sets $@@
d1626 1
a1626 1
as shown in this example:
d1628 1
a1628 1
    # a very private exception trap for divide-by-zero
d1649 2
a1650 2
    eval $x;		# CASE 1
    eval "$x";		# CASE 2
d1652 2
a1653 2
    eval '$x';		# CASE 3
    eval { $x };	# CASE 4
d1655 2
a1656 2
    eval "\$$x++";	# CASE 5
    $$x++;		# CASE 6
d1688 4
a1691 4
Note that as a very special case, an C<eval ''> executed within the C<DB>
package doesn't see the usual surrounding lexical scope, but rather the
scope of the first non-DB piece of code that called it. You don't normally
need to worry about this unless you are writing a Perl debugger.
d1698 1
a1698 1
The C<exec> function executes a system command I<and never returns>--
d1704 2
a1705 2
warns you if there is a following statement which isn't C<die>, C<warn>,
or C<exit> (if C<-w> is set  -  but you always do that).   If you
d1733 1
a1733 1
    exec $shell '-sh';		# pretend it's a login shell
d1737 1
a1737 1
    exec {'/bin/csh'} '-sh';	# pretend it's a login shell
d1739 2
a1740 2
When the arguments get executed via the system shell, results will
be subject to its quirks and capabilities.  See L<perlop/"`STRING`">
d1756 3
a1758 3
program, passing it C<"surprise"> an argument.  The second version
didn't--it tried to run a program literally called I<"echo surprise">,
didn't find it, and set C<$?> to a non-zero value indicating failure.
d1760 1
a1760 1
Beginning with v5.6.0, Perl will attempt to flush all files opened for
d1764 1
a1764 1
open handles in order to avoid lost output.
d1766 2
a1767 2
Note that C<exec> will not call your C<END> blocks, nor will it call
any C<DESTROY> methods in your objects.
d1772 3
a1774 3
Given an expression that specifies a hash element or array element,
returns true if the specified element in the hash or array has ever
been initialized, even if the corresponding value is undefined.
d1776 2
a1777 2
    print "Exists\n" 	if exists $hash{$key};
    print "Defined\n" 	if defined $hash{$key};
d1780 7
a1786 2
    print "Exists\n" 	if exists $array[$index];
    print "Defined\n" 	if defined $array[$index];
d1795 1
a1795 1
does not count as declaring it.  Note that a subroutine which does not
d1798 1
a1798 1
called -- see L<perlsub>.
d1800 2
a1801 2
    print "Exists\n" 	if exists &subroutine;
    print "Defined\n" 	if defined &subroutine;
d1806 2
a1807 2
    if (exists $ref->{A}->{B}->{$key}) 	{ }
    if (exists $hash{A}{B}{$key}) 	{ }
d1809 2
a1810 2
    if (exists $ref->{A}->{B}->[$ix]) 	{ }
    if (exists $hash{A}{B}[$ix]) 	{ }
d1814 2
a1815 2
Although the deepest nested array or hash will not spring into existence
just because its existence was tested, any intervening ones will.
d1818 1
a1818 1
This happens anywhere the arrow operator is used, including even:
d1821 2
a1822 2
    if (exists $ref->{"Some key"})	{ }
    print $ref; 	    # prints HASH(0x80d3d5c)
d1831 2
a1832 2
    exists &sub;	# OK
    exists &sub();	# Error
d1878 1
a1878 1
value return works just like C<ioctl> below.
d1883 1
a1883 1
	or die "can't fcntl F_GETFL: $!";
d1891 1
a1891 1
Note that C<fcntl> will produce a fatal error if used on a machine that
d1920 1
a1920 1
	print "THIS and THAT are dups\n";
d1934 1
a1934 1
only entire files, not records.
d1954 2
a1955 2
LOCK_SH or LOCK_EX then C<flock> will return immediately rather than blocking
waiting for the lock (check the return status to see if you got it).
d1975 1
a1975 1
perl.
d1982 2
a1983 2
	my ($fh) = @@_;
	flock($fh, LOCK_EX) or die "Cannot lock mailbox - $!\n";
d1985 2
a1986 2
	# and, in case someone appended while we were waiting...
	seek($fh, 0, SEEK_END) or die "Cannot seek - $!\n";
d1990 2
a1991 2
	my ($fh) = @@_;
	flock($fh, LOCK_UN) or die "Cannot unlock mailbox - $!\n";
d1995 1
a1995 1
	    or die "Can't open mailbox: $!";
d2001 3
a2003 3
On systems that support a real flock(), locks are inherited across fork()
calls, whereas those that must resort to the more capricious fcntl()
function lose the locks, making it harder to write servers.
d2019 1
a2019 1
Beginning with v5.6.0, Perl will attempt to flush all files opened for
d2023 1
a2023 1
C<IO::Handle> on any open handles in order to avoid duplicate output.
d2043 2
a2044 2
	Test: @@<<<<<<<< @@||||| @@>>>>>
	      $str,     $%,    '$' . int($num)
d2066 1
a2066 1
that the C<~> and C<~~> tokens will treat the entire PICTURE as a single line.
d2068 1
a2068 1
record format, just like the format compiler.
d2080 1
a2080 1
or the undefined value at end of file, or if there was an error (in
d2087 1
a2087 1
	system "stty cbreak </dev/tty >/dev/tty 2>&1";
d2090 1
a2090 1
	system "stty", '-icanon', 'eol', "\001";
d2096 1
a2096 1
	system "stty -cbreak </dev/tty >/dev/tty 2>&1";
d2099 1
a2099 1
	system "stty", 'icanon', 'eol', '^@@'; # ASCII null
d2115 2
a2116 2
systems returns the current login from F</etc/utmp>, if any.  If null,
use C<getpwuid>.
d2151 1
a2151 1
be portable, this behavior is not reflected by the perl-level function
d2229 2
a2230 2
These routines perform the same functions as their counterparts in the
system library.  In list context, the return values from the
d2241 1
a2241 1
(If the entry doesn't exist you get a null list.)
d2264 1
a2264 1
cases in the sense that in many systems they are unsupported.  If the
d2278 1
a2278 1
files are only supported if your vendor has implemented them in the
d2290 3
a2292 3
C<@@addrs> value returned by a successful call is a list of the raw
addresses returned by the corresponding system library call.  In the
Internet domain, each address is four bytes long and you can unpack it
d2358 1
a2358 1
number of TCP, which you can get using getprotobyname.
d2360 6
a2365 6
The call returns a packed string representing the requested socket option,
or C<undef> if there is an error (the error reason will be in $!). What
exactly is in the packed string depends in the LEVEL and OPTNAME, consult
your system documentation for details. A very common case however is that
the option is an integer, in which case the result will be a packed
integer which you can decode using unpack with the C<i> (or C<I>) format.
d2367 1
a2367 1
An example testing if Nagle's algorithm is turned on on a socket:
d2372 1
a2372 1
	or die "Could not determine the protocol number for tcp";
d2375 1
a2375 1
	or die "Could not query TCP_NODELAY socket option: $!";
d2393 11
a2403 4
Note that C<glob> will split its arguments on whitespace, treating
each segment as separate pattern.  As such, C<glob('*.c *.h')> would
match all files with a F<.c> or F<.h> extension.  The expression
C<glob('.* *')> would match all files in the current working directory.
d2430 9
a2438 12
The C<goto-LABEL> form finds the statement labeled with LABEL and resumes
execution there.  It may not be used to go into any construct that
requires initialization, such as a subroutine or a C<foreach> loop.  It
also can't be used to go into a construct that is optimized away,
or to get out of a block or subroutine given to C<sort>.
It can be used to go almost anywhere else within the dynamic scope,
including out of subroutines, but it's usually better to use some other
construct such as C<last> or C<die>.  The author of Perl has never felt the
need to use this form of C<goto> (in Perl, that is--C is another matter).
(The difference being that C does not offer named loops combined with
loop control.  Perl does, and this replaces most structured uses of C<goto>
in other languages.)
d2446 6
d2498 1
a2498 1
the list elements, C<$_> keeps being lexical inside the block; i.e. it
d2550 1
a2550 1
towards C<0>, and two because machine representations of floating point
d2562 1
a2562 1
    require "sys/ioctl.ph";	# probably in $Config{archlib}/sys/ioctl.ph
d2569 1
a2569 1
written depending on the FUNCTION--a pointer to the string value of SCALAR
d2579 4
a2582 4
	if OS returns:		then Perl returns:
	    -1	  		  undefined value
	     0	 		string "0 but true"
	anything else		    that number
d2608 1
a2608 2
Returns a list consisting of all the keys of the named hash.
(In scalar context, returns the number of keys.)
d2610 5
a2614 2
The keys are returned in an apparently random order.  The actual
random order is subject to change in future versions of perl, but it
d2621 1
a2621 1
As a side effect, calling keys() resets the HASH's internal iterator
d2630 1
a2630 1
	print pop(@@keys), '=', pop(@@values), "\n";
d2636 1
a2636 1
	print $key, '=', $ENV{$key}, "\n";
d2646 1
a2646 1
	printf "%4d %s\n", $hash{$key}, $key;
d2649 1
a2649 1
As an lvalue C<keys> allows you to increase the number of hash buckets
d2662 2
a2663 1
as trying has no effect).
d2677 2
a2678 2
If SIGNAL is zero, no signal is sent to the process, but the kill(2)
system call will check whether it's possible to send a signal to it (that
d2680 1
a2680 1
the super-user).  This is a useful way to check that a child process is
d2684 7
a2690 5
Unlike in the shell, if SIGNAL is negative, it kills
process groups instead of processes.  (On System V, a negative I<PROCESS>
number will also kill process groups, but that's not portable.)  That
means you usually want to use positive not negative signals.  You may also
use a signal name in quotes.
d2705 2
a2706 2
	last LINE if /^$/;	# exit when done with header
	#...
d2709 1
a2709 1
C<last> cannot be used to exit a block which returns a value such as
d2726 1
a2726 3
implementing the C<\L> escape in double-quoted strings.  Respects
current LC_CTYPE locale if C<use locale> in force.  See L<perllocale>
and L<perlunicode> for more details about locale and Unicode support.
d2730 51
d2788 1
a2788 3
double-quoted strings.  Respects current LC_CTYPE locale if C<use
locale> in force.  See L<perllocale> and L<perlunicode> for more
details about locale and Unicode support.
d2792 3
d2801 10
a2810 11
omitted, returns length of C<$_>.  Note that this cannot be used on
an entire array or hash to find out how many elements these have.
For that, use C<scalar @@array> and C<scalar keys %hash> respectively.

Note the I<characters>: if the EXPR is in Unicode, you will get the
number of characters, not the number of bytes.  To get the length
of the internal string in bytes, use C<bytes::length(EXPR)>, see
L<bytes>.  Note that the internal encoding is variable, and the number
of bytes usually meaningless.  To get the number of bytes that the
string would have when encoded as UTF-8, use
C<length(Encoding::encode_utf8(EXPR))>.
d2821 1
a2821 1
Does the same thing that the listen system call does.  Returns true if
d2837 4
d2868 1
a2868 1
to get a complete 4-digit year is simply:
d2928 2
a2929 2
instead. (However, if you've said C<use threads>, lock() is always a
keyword.) See L<threads>.
d2942 2
a2943 2
	my $n = shift;
	return log($n)/log(10);
d2987 1
a2987 1
	$hash{get_a_key_for($_)} = $_;
d3003 3
a3005 3
the start of map BLOCK LIST or map EXPR, LIST. Because perl doesn't look
ahead for the closing C<}> it has to take a guess at which its dealing with
based what it finds just after the C<{>. Usually it gets it right, but if it
d3008 2
a3009 2
reported close to the C<}> but you'll need to change something near the C<{>
such as using a unary C<+> to give perl some help:
d3011 5
a3015 5
    %hash = map {  "\L$_", 1  } @@array  # perl guesses EXPR.  wrong
    %hash = map { +"\L$_", 1  } @@array  # perl guesses BLOCK. right
    %hash = map { ("\L$_", 1) } @@array  # this also works
    %hash = map {  lc($_), 1  } @@array  # as does this.
    %hash = map +( lc($_), 1 ), @@array  # this is EXPR and works!
d3017 1
a3017 1
    %hash = map  ( lc($_), 1 ), @@array  # evaluates to (1, @@array)
d3021 1
a3021 1
   @@hashes = map +{ lc($_), 1 }, @@array # EXPR, so needs , at end
d3023 1
a3023 1
and you get list of anonymous hashes each with only 1 entry.
d3050 1
a3050 1
In order to recursively create a directory structure look at
d3125 2
a3126 2
	next LINE if /^#/;	# discard comments
	#...
d3130 1
a3130 1
executed even on discarded lines.  If the LABEL is omitted, the command
d3143 3
a3145 2
=item no Module VERSION LIST
X<no>
d3147 1
a3147 1
=item no Module VERSION
d3149 1
a3149 1
=item no Module LIST
d3151 1
a3151 1
=item no Module
d3166 2
a3167 2
The following will handle decimal, binary, octal, and hex in the standard
Perl or C notation:
d3174 2
a3175 2
    $perms = (stat("filename"))[2] & 07777;
    $oct_perms = sprintf "%lo", $perms;
d3178 7
a3184 3
to be converted into a file mode, for example. (Although perl will
automatically convert strings into numbers as needed, this automatic
conversion assumes base 10.)
d3223 1
a3223 1
the file name are separate. If MODE is C<< '<' >> or nothing, the file
d3230 2
a3231 2
C<< '+<' >> is almost always preferred for read/write updates--the C<<
'+>' >> mode would clobber the file first.  You can't usually use
d3235 1
a3235 1
modified by the process' C<umask> value.
d3240 3
a3242 3
In the 2-arguments (and 1-argument) form of the call the mode and
filename should be concatenated (in this order), possibly separated by
spaces.  It is possible to omit the mode in these forms if the mode is
d3247 1
a3247 1
C<'|'>, the filename is interpreted as a command which pipes output to
d3256 2
a3257 2
is C<'-|'>, the filename is interpreted as a command which pipes
output to us.  In the 2-arguments (and 1-argument) form one should
d3264 1
a3264 1
In the three-or-more argument form of pipe opens, if LIST is specified
d3268 1
a3268 1
specified. Experimental "layers" may give extra LIST arguments
d3271 2
a3272 2
In the 2-arguments (and 1-argument) form opening C<'-'> opens STDIN
and opening C<< '>-' >> opens STDOUT.
d3274 2
a3275 2
You may use the three-argument form of open to specify IO "layers"
(sometimes also referred to as "disciplines") to be applied to the handle
d3277 1
a3277 1
L<PerlIO> for more details). For example
d3279 2
a3280 1
  open(my $fh, "<:encoding(UTF-8)", "file")
d3282 1
a3282 1
will open the UTF-8 encoded file containing Unicode characters,
d3284 1
a3284 1
three-arg form then default layers stored in ${^OPEN} (see L<perlvar>;
d3287 1
a3287 1
Open returns nonzero upon success, the undefined value otherwise.  If
d3295 2
a3296 2
like Unix, Mac OS, and Plan 9, which delimit lines with a single
character, and which encode that character in C as C<"\n">, do not
d3299 2
a3300 2
When opening a file, it's usually a bad idea to continue normal execution
if the request failed, so C<open> is frequently used in connection with
d3302 3
a3304 4
where you want to make a nicely formatted error message (but there are
modules that can help with that problem)) you should always check
the return value from opening a file.  The infrequent exception is when
working with an unopened filehandle is actually what you want to do.
d3316 3
a3318 3
Since v5.8.0, perl has built using PerlIO by default.  Unless you've
changed this (i.e. Configure -Uuseperlio), you can open file handles to
"in memory" files held in Perl scalars via:
d3322 1
a3322 2
Though if you try to re-open C<STDOUT> or C<STDERR> as an "in memory"
file, you have to close it first:
d3327 1
a3327 1
Examples:
d3333 1
a3333 1
    open(LOG, '>>/usr/spool/news/twitlog');	# (log is reserved)
d3336 2
a3337 2
    open(my $dbase, '+<', 'dbase.mine')		# open for update
	or die "Can't open 'dbase.mine' for update: $!";
d3339 2
a3340 2
    open(my $dbase, '+<dbase.mine')			# ditto
	or die "Can't open 'dbase.mine' for update: $!";
d3342 2
a3343 2
    open(ARTICLE, '-|', "caesar <$article")     # decrypt article
	or die "Can't start caesar: $!";
d3345 2
a3346 2
    open(ARTICLE, "caesar <$article |")		# ditto
	or die "Can't start caesar: $!";
d3348 2
a3349 2
    open(EXTRACT, "|sort >Tmp$$")		# $$ is our process id
	or die "Can't start sort: $!";
d3351 1
a3351 1
    # in memory files
d3353 2
a3354 2
	or die "Can't open memory file: $!";
    print MEMORY "foo!\n";			# output will end up in $var
d3359 1
a3359 1
	process($file, 'fh00');
d3363 15
a3377 15
	my($filename, $input) = @@_;
	$input++;		# this is a string increment
	unless (open($input, $filename)) {
	    print STDERR "Can't open $filename: $!\n";
	    return;
	}

	local $_;
	while (<$input>) {		# note use of indirection
	    if (/^#include "(.*)"/) {
		process($1, $input);
		next;
	    }
	    #...		# whatever
	}
d3402 2
a3403 2
    select STDERR; $| = 1;	# make unbuffered
    select STDOUT; $| = 1;	# make unbuffered
d3405 2
a3406 2
    print STDOUT "stdout 1\n";	# this works for
    print STDERR "stderr 1\n"; 	# subprocesses too
d3445 1
a3445 1
On many UNIX systems fdopen() fails when file descriptors exceed a
d3458 1
a3458 1
The filehandle behaves normally for the parent, but i/o to that
d3460 2
a3461 2
In the child process the filehandle isn't opened--i/o happens from/to
the new STDOUT or STDIN.  Typically this is used like the normal
d3463 3
a3465 2
pipe command gets executed, such as when you are running setuid, and
don't want to have to scan shell commands for metacharacters.
d3481 1
a3481 1
UNIX) you can use the list form.
d3524 1
a3524 1
but will not work on a filename which happens to have a trailing space, while
d3538 1
a3538 1
	or die "sysopen $path: $!";
d3552 8
a3559 8
	my $ALL = shift;
	my $handle = IO::File->new;
	open($handle, "myfile") or die "myfile: $!";
	$first = <$handle>
	    or return ();     # Automatically closed here.
	mung $first or die "mung failed";	# Or here.
	return $first, <$handle> if $ALL;	# Or here.
	$first;					# Or here.
d3624 1
a3624 1
    our $bar;		# declares $Foo::bar for rest of lexical scope
d3628 1
a3628 1
    print $bar;		# prints 20, as it refers to $Foo::bar
d3640 1
a3640 1
    our $bar;		# declares $Foo::bar for rest of lexical scope
d3644 2
a3645 2
    our $bar = 30;	# declares $Bar::bar for rest of lexical scope
    print $bar;		# prints 30
d3647 2
a3648 2
    our $bar;		# emits warning but has no other effect
    print $bar;		# still prints 30
d3667 4
a3670 2
an integer may be represented by a sequence of 4 bytes that will be 
converted to a sequence of 4 characters.
d3675 28
a3702 28
    a	A string with arbitrary binary data, will be null padded.
    A	A text (ASCII) string, will be space padded.
    Z	A null terminated (ASCIZ) string, will be null padded.

    b	A bit string (ascending bit order inside each byte, like vec()).
    B	A bit string (descending bit order inside each byte).
    h	A hex string (low nybble first).
    H	A hex string (high nybble first).

    c	A signed char (8-bit) value.
    C	An unsigned char (octet) value.
    W   An unsigned char value (can be greater than 255).

    s	A signed short (16-bit) value.
    S	An unsigned short value.

    l	A signed long (32-bit) value.
    L	An unsigned long value.

    q	A signed quad (64-bit) value.
    Q	An unsigned quad value.
	  (Quads are available only if your system supports 64-bit
	   integer values _and_ if Perl has been compiled to support those.
           Causes a fatal error otherwise.)

    i	A signed integer value.
    I	A unsigned integer value.
	  (This 'integer' is _at_least_ 32 bits wide.  Its exact
d3705 4
a3708 4
    n	An unsigned short (16-bit) in "network" (big-endian) order.
    N	An unsigned long (32-bit) in "network" (big-endian) order.
    v	An unsigned short (16-bit) in "VAX" (little-endian) order.
    V	An unsigned long (32-bit) in "VAX" (little-endian) order.
d3713 2
a3714 2
    f	A single-precision float in the native format.
    d	A double-precision float in the native format.
d3716 5
a3720 5
    F	A Perl internal floating point value (NV) in the native format
    D	A long double-precision float in the native format.
	  (Long doubles are available only if your system supports long
	   double values _and_ if Perl has been compiled to support those.
           Causes a fatal error otherwise.)
d3722 2
a3723 2
    p	A pointer to a null-terminated string.
    P	A pointer to a structure (fixed-length string).
d3725 2
a3726 2
    u	A uuencoded string.
    U	A Unicode character number.  Encodes to a character in character mode
d3729 14
a3742 15
    w	A BER compressed integer (not an ASN.1 BER, see perlpacktut for
	details).  Its bytes represent an unsigned integer in base 128,
	most significant digit first, with as few digits as possible.  Bit
	eight (the high bit) is set on each byte except the last.

    x	A null byte.
    X	Back up a byte.
    @@	Null fill or truncate to absolute position, counted from the
        start of the innermost ()-group.
    .   Null fill or truncate to absolute position specified by value.
    (	Start of a ()-group.

One or more of the modifiers below may optionally follow some letters in the
TEMPLATE (the second column lists the letters for which the modifier is
valid):
d3761 3
a3763 3
The C<E<gt>> and C<E<lt>> modifiers can also be used on C<()>-groups,
in which case they force a certain byte-order on all components of
that group, including subgroups.
d3767 1
a3767 1
=over 8
d3771 37
a3807 21
Each letter may optionally be followed by a number giving a repeat
count.  With all types except C<a>, C<A>, C<Z>, C<b>, C<B>, C<h>,
C<H>, C<@@>, C<.>, C<x>, C<X> and C<P> the pack function will gobble up
that many values from the LIST.  A C<*> for the repeat count means to
use however many items are left, except for C<@@>, C<x>, C<X>, where it
is equivalent to C<0>, for <.> where it means relative to string start
and C<u>, where it is equivalent to 1 (or 45, which is the same).
A numeric repeat count may optionally be enclosed in brackets, as in
C<pack 'C[80]', @@arr>.

One can replace the numeric repeat count by a template enclosed in brackets;
then the packed length of this template in bytes is used as a count.
For example, C<x[L]> skips a long (it skips the number of bytes in a long);
the template C<$t X[$t] $t> unpack()s twice what $t unpacks.
If the template in brackets contains alignment commands (such as C<x![d]>),
its packed length is calculated as if the start of the template has the maximal
possible alignment.

When used with C<Z>, C<*> results in the addition of a trailing null
byte (so the packed result will be one longer than the byte C<length>
of the item).
d3810 4
a3813 1
of the innermost () group.
d3815 18
a3832 7
When used with C<.>, the repeat count is used to determine the starting
position from where the value offset is calculated. If the repeat count
is 0, it's relative to the current position. If the repeat count is C<*>,
the offset is relative to the start of the packed string. And if its an
integer C<n> the offset is relative to the start of the n-th innermost
() group (or the start of the string if C<n> is bigger then the group
level).
d3841 1
a3841 1
string of length count, padding with nulls or spaces as necessary.  When
d3843 1
a3843 1
after the first null, and C<a> returns data verbatim.
d3845 4
a3848 4
If the value-to-pack is too long, it is truncated.  If too long and an
explicit count is provided, C<Z> packs only C<$count-1> bytes, followed
by a null byte.  Thus C<Z> always packs a trailing null (except when the
count is 0).
d3852 3
a3854 2
Likewise, the C<b> and C<B> fields pack a string that many bits long.
Each character of the input field of pack() generates 1 bit of the result.
d3857 1
a3857 1
and C<"1"> generate bits 0 and 1, as do characters C<"\0"> and C<"\1">.
d3859 2
a3860 2
Starting from the beginning of the input string of pack(), each 8-tuple
of characters is converted to 1 character of output.  With format C<b>
d3862 1
a3862 1
character, and with format C<B> it determines the most-significant bit of
d3865 1
a3865 1
If the length of the input string is not exactly divisible by 8, the
d3867 3
a3869 1
at the end.  Similarly, during unpack()ing the "extra" bits are ignored.
d3871 2
a3872 4
If the input string of pack() is longer than needed, extra characters are 
ignored. A C<*> for the repeat count of pack() means to use all the 
characters of the input field.  On unpack()ing the bits are converted to a 
string of C<"0">s and C<"1">s.
d3876 2
a3877 2
The C<h> and C<H> fields pack a string that many nybbles (4-bit groups,
representable as hexadecimal digits, 0-9a-f) long.
d3879 2
a3880 2
Each character of the input field of pack() generates 4 bits of the result.
For non-alphabetical characters the result is based on the 4 least-significant
d3883 1
a3883 1
C<"\0"> and C<"\1">.  For characters C<"a".."f"> and C<"A".."F"> the result
d3885 2
a3886 2
C<"A"> both generate the nybble C<0xa==10>.  The result for characters
C<"g".."z"> and C<"G".."Z"> is not well-defined.
d3888 2
a3889 2
Starting from the beginning of the input string of pack(), each pair
of characters is converted to 1 character of output.  With format C<h> the
d3891 1
a3891 1
output character, and with format C<H> it determines the most-significant
d3894 8
a3901 9
If the length of the input string is not even, it behaves as if padded
by a null character at the end.  Similarly, during unpack()ing the "extra"
nybbles are ignored.

If the input string of pack() is longer than needed, extra characters are
ignored.
A C<*> for the repeat count of pack() means to use all the characters of
the input field.  On unpack()ing the nybbles are converted to a string
of hexadecimal digits.
d3905 7
a3911 6
The C<p> type packs a pointer to a null-terminated string.  You are
responsible for ensuring the string is not a temporary value (which can
potentially get deallocated before you get around to using the packed result).
The C<P> type packs a pointer to a structure of the size indicated by the
length.  A NULL pointer is created if the corresponding value for C<p> or
C<P> is C<undef>, similarly for unpack().
d3913 2
a3914 2
If your system has a strange pointer size (i.e. a pointer is neither as
big as an int nor as big as a long), it may not be possible to pack or
d3916 1
a3916 1
so will result in a fatal error.
d3921 13
a3933 11
items where the packed structure contains a packed item count followed by 
the packed items themselves.

For C<pack> you write I<length-item>C</>I<sequence-item> and the
I<length-item> describes how the length value is packed. The ones likely
to be of most use are integer-packing ones like C<n> (for Java strings),
C<w> (for ASN.1 or SNMP) and C<N> (for Sun XDR).

For C<pack>, the I<sequence-item> may have a repeat count, in which case
the minimum of that and the number of available items is used as argument
for the I<length-item>. If it has no repeat count or uses a '*', the number
d3936 1
a3936 1
For C<unpack> an internal stack of integer arguments unpacked so far is
d3941 11
a3951 10
If the I<sequence-item> refers to a string type (C<"A">, C<"a"> or C<"Z">),
the I<length-item> is a string length, not a number of strings. If there is
an explicit repeat count for pack, the packed string will be adjusted to that
given length.

    unpack 'W/a', "\04Gurusamy";            gives ('Guru')
    unpack 'a3/A A*', '007 Bond  J ';       gives (' Bond', 'J')
    unpack 'a3 x2 /A A*', '007: Bond, J.';  gives ('Bond, J', '.')
    pack 'n/a* w/a','hello,','world';       gives "\000\006hello,\005world"
    pack 'a/W2', ord('a') .. ord('z');      gives '2ab'
d3955 4
a3958 4
Adding a count to the I<length-item> letter is unlikely to do anything
useful, unless that letter is C<A>, C<a> or C<Z>.  Packing with a
I<length-item> of C<a> or C<Z> may introduce C<"\000"> characters,
which Perl does not regard as legal in numeric strings.
d3963 11
a3973 5
followed by a C<!> modifier to signify native shorts or
longs--as you can see from above for example a bare C<l> does mean
exactly 32 bits, the native C<long> (as seen by the local C compiler)
may be larger.  This is an issue mainly in 64-bit platforms.  You can
see whether using C<!> makes any difference by
a3974 2
	print length(pack("s")), " ", length(pack("s!")), "\n";
	print length(pack("l")), " ", length(pack("l!")), "\n";
d3976 1
a3976 1
C<i!> and C<I!> also work but only because of completeness;
d3980 10
a3989 2
longs on the platform where Perl was built are also available via
L<Config>:
d3997 2
a3998 2
(The C<$Config{longlongsize}> will be undefined if your system does
not support long longs.)
d4002 19
a4020 19
The integer formats C<s>, C<S>, C<i>, C<I>, C<l>, C<L>, C<j>, and C<J>
are inherently non-portable between processors and operating systems
because they obey the native byteorder and endianness.  For example a
4-byte integer 0x12345678 (305419896 decimal) would be ordered natively
(arranged in and handled by the CPU registers) into bytes as

 	0x12 0x34 0x56 0x78	# big-endian
 	0x78 0x56 0x34 0x12	# little-endian

Basically, the Intel and VAX CPUs are little-endian, while everybody
else, for example Motorola m68k/88k, PPC, Sparc, HP PA, Power, and
Cray are big-endian.  Alpha and MIPS can be either: Digital/Compaq
used/uses them in little-endian mode; SGI/Cray uses them in big-endian
mode.

The names `big-endian' and `little-endian' are comic references to
the classic "Gulliver's Travels" (via the paper "On Holy Wars and a
Plea for Peace" by Danny Cohen, USC/ISI IEN 137, April 1, 1980) and
the egg-eating habits of the Lilliputians.
d4024 2
a4025 2
 	0x56 0x78 0x12 0x34
 	0x34 0x12 0x78 0x56
d4027 1
a4027 1
You can see your system's preference with
d4029 1
a4029 2
 	print join(" ", map { sprintf "%#02x", $_ }
                            unpack("W*",pack("L",0x12345678))), "\n";
d4034 2
a4035 2
	use Config;
	print $Config{byteorder}, "\n";
d4037 1
a4037 2
Byteorders C<'1234'> and C<'12345678'> are little-endian, C<'4321'>
and C<'87654321'> are big-endian.
d4039 8
a4046 4
If you want portable packed integers you can either use the formats
C<n>, C<N>, C<v>, and C<V>, or you can use the C<E<gt>> and C<E<lt>>
modifiers.  These modifiers are only available as of perl 5.9.2.
See also L<perlport>.
d4050 18
a4067 10
All integer and floating point formats as well as C<p> and C<P> and
C<()>-groups may be followed by the C<E<gt>> or C<E<lt>> modifiers
to force big- or little- endian byte-order, respectively.
This is especially useful, since C<n>, C<N>, C<v> and C<V> don't cover
signed integers, 64-bit integers and floating point values.  However,
there are some things to keep in mind.

Exchanging signed integers between different platforms only works
if all platforms store them in the same format.  Most platforms store
signed integers in two's complement, so usually this is not an issue.
d4069 1
a4069 1
The C<E<gt>> or C<E<lt>> modifiers can only be used on floating point
d4071 1
a4071 1
do so will result in a fatal error.
d4073 15
a4087 12
Forcing big- or little-endian byte-order on floating point values for
data exchange can only work if all platforms are using the same
binary representation (e.g. IEEE floating point format).  Even if all
platforms are using IEEE, there may be subtle differences.  Being able
to use C<E<gt>> or C<E<lt>> on floating point values can be very useful,
but also very dangerous if you don't know exactly what you're doing.
It is definitely not a general way to portably store floating point
values.

When using C<E<gt>> or C<E<lt>> on an C<()>-group, this will affect
all types inside the group that accept the byte-order modifiers,
including all subgroups.  It will silently be ignored for all other
d4091 2
d4095 6
a4100 6
Real numbers (floats and doubles) are in the native machine format only;
due to the multiplicity of floating formats around, and the lack of a
standard "network" representation, no facility for interchange has been
made.  This means that packed floating point data written on one machine
may not be readable on another - even if both use IEEE floating point
arithmetic (as the endian-ness of the memory representation is not part
d4103 2
a4104 2
If you know exactly what you're doing, you can use the C<E<gt>> or C<E<lt>>
modifiers to force big- or little-endian byte-order on floating point values.
d4106 4
a4109 4
Note that Perl uses doubles (or long doubles, if configured) internally for
all numeric calculation, and converting from double into float and thence back
to double again will lose precision (i.e., C<unpack("f", pack("f", $foo)>)
will not in general equal $foo).
d4113 2
a4114 2
Pack and unpack can operate in two modes, character mode (C<C0> mode) where
the packed string is processed per character and UTF-8 mode (C<U0> mode)
d4116 4
a4119 4
a byte by byte basis. Character mode is the default unless the format string 
starts with an C<U>. You can switch mode at any moment with an explicit 
C<C0> or C<U0> in the format. A mode is in effect until the next mode switch 
or until the end of the ()-group in which it was entered.
d4123 4
a4126 5
You must yourself do any alignment or padding by inserting for example
enough C<'x'>es while packing.  There is no way to pack() and unpack()
could know where the characters are going to or coming from.  Therefore
C<pack> (and C<unpack>) handle their output and input as flat
sequences of characters.
d4130 4
a4133 4
A ()-group is a sub-TEMPLATE enclosed in parentheses.  A group may
take a repeat count, both as postfix, and for unpack() also via the C</>
template character. Within each repetition of a group, positioning with
C<@@> starts again at 0. Therefore, the result of
d4135 1
a4135 1
    pack( '@@1A((@@2A)@@3A)', 'a', 'b', 'c' )
d4137 1
a4137 1
is the string "\0a\0\0bc".
d4141 3
a4143 6
C<x> and C<X> accept C<!> modifier.  In this case they act as
alignment commands: they jump forward/back to the closest position
aligned at a multiple of C<count> characters. For example, to pack() or
unpack() C's C<struct {char c; double d; char cc[2]}> one may need to
use the template C<W x![d] d W[2]>; this assumes that doubles must be
aligned on the double's size.
d4145 11
a4155 2
For alignment commands C<count> of 0 is equivalent to C<count> of 1;
both result in no-ops.
d4159 5
a4163 5
C<n>, C<N>, C<v> and C<V> accept the C<!> modifier. In this case they
will represent signed 16-/32-bit integers in big-/little-endian order.
This is only portable if all platforms sharing the packed data use the
same binary representation for signed integers (e.g. all platforms are
using two's complement representation).
d4167 6
a4172 3
A comment in a TEMPLATE starts with C<#> and goes to the end of line.
White space may be used to separate pack codes from each other, but
modifiers and a repeat count must follow immediately.
d4176 1
a4176 1
If TEMPLATE requires more arguments to pack() than actually given, pack()
d4178 1
a4178 1
to pack() than actually given, extra arguments are ignored.
d4201 1
a4201 1
    # note: the above examples featuring "W" and "c" are true
d4203 2
a4204 2
    # and UTF-8.  In EBCDIC the first example would be
    # $foo = pack("WWWW",193,194,195,196);
d4230 1
a4230 1
	unpack("N", pack("B32", substr("0" x 32 . shift, -32)));
d4252 3
a4255 3
X<package> X<module> X<namespace>

=item package
d4261 19
a4279 11
A package statement affects only dynamic variables--including those
you've used C<local> on--but I<not> lexical variables, which are created
with C<my>.  Typically it would be the first declaration in a file to
be included by the C<require> or C<use> operator.  You can switch into a
package in more than one place; it merely influences which symbol table
is used by the compiler for the rest of that block.  You can refer to
variables and filehandles in other packages by prefixing the identifier
with the package name and a double colon:  C<$Package::Variable>.
If the package name is null, the C<main> package as assumed.  That is,
C<$::sail> is equivalent to C<$main::sail> (as well as to C<$main'sail>,
still seen in older code).
d4296 3
a4298 3
On systems that support a close-on-exec flag on files, the flag will be set
for the newly opened file descriptors as determined by the value of $^F.
See L<perlvar/$^F>.
d4308 3
a4310 4
If there are no elements in the array, returns the undefined value
(although this may happen at other times as well).  If ARRAY is
omitted, pops the C<@@ARGV> array in the main program, and the C<@@_>
array in subroutines, just like C<shift>.
d4321 1
a4321 1
yet been performed on the scalar). C<pos> directly accesses the location used
d4336 2
a4337 2
FILEHANDLE may be a scalar variable name, in which case the variable
contains the name of or a reference to the filehandle, thus introducing
d4341 4
a4344 4
If FILEHANDLE is omitted, prints by default to standard output (or
to the last selected output channel--see L</select>).  If LIST is
also omitted, prints C<$_> to the currently selected output channel.
To set the default output channel to something other than STDOUT
d4353 2
a4354 2
the print--interpose a C<+> or put parentheses around all the
arguments.
d4363 3
d4376 1
a4376 1
separator in formatted floating point numbers is affected by the LC_NUMERIC
d4391 1
a4391 1
name for Perl builtin.  If the builtin is not I<overridable> (such as
d4405 1
a4405 1
	$ARRAY[++$#ARRAY] = $value;
d4439 26
d4473 2
a4474 2
also special-cased as C<1> - this has not been documented before perl 5.8.0
and is subject to change in future versions of perl.  Automatically calls
d4507 2
a4508 2
The call is actually implemented in terms of either Perl's or system's
fread() call.  To get a true read(2) system call, see C<sysread>.
d4523 2
a4524 2
directory.  If there are no more entries, returns an undefined value in
scalar context or a null list in list context.
d4534 9
d4550 2
a4551 2
returns the next line, until end-of-file is reached, whereupon the
subsequent call returns undef.  In list context, reads until end-of-file
d4553 1
a4553 1
used here is however you may have defined it with C<$/> or
d4556 2
a4557 2
When C<$/> is set to C<undef>, when readline() is in scalar
context (i.e. file slurp mode), and when an empty file is read, it
d4565 1
a4565 7
    $line = readline(*STDIN);		# same thing

If readline encounters an operating system error, C<$!> will be set with the
corresponding error message.  It can be helpful to check C<$!> when you are
reading from filehandles you don't trust, such as a tty or a socket.  The
following example uses the operator form of C<readline>, and takes the necessary
steps to ensure that C<readline> was successful.
d4567 22
a4588 5
    for (;;) {
        undef $!;
        unless (defined( $line = <> )) {
            last if eof;
            die $! if $!;
a4589 1
        # ...
d4598 1
a4598 1
implemented.  If not, gives a fatal error.  If there is some system
d4651 12
a4662 12
	while (s|({.*}.*){.*}|$1 |) {}
	s|{.*}| |;
	if (s|{.*| |) {
	    $front = $_;
	    while (<STDIN>) {
		if (/}/) {	# end of comment?
		    s|^|$front\{|;
		    redo LINE;
		}
	    }
	}
	print;
d4665 1
a4665 1
C<redo> cannot be used to retry a block which returns a value such as
d4703 1
a4703 1
	print "r is a reference to a hash.\n";
d4706 1
a4706 1
	print "r is not a reference at all.\n";
d4747 1
a4747 1
to C<$^V> (aka $PERL_VERSION).  A fatal error is produced at run time if
d4756 3
a4758 3
    require v5.6.1;	# run time version check
    require 5.6.1;	# ditto
    require 5.006_001;	# ditto; preferred for backwards compatibility
d4811 1
a4811 1
        require Foo::Bar;    # a splendid bareword
d4819 1
a4819 1
        require $class;	     # $class is not a bareword
d4821 1
a4821 1
        require "Foo::Bar";  # not a bareword because of the ""
d4828 1
a4828 1
Now that you understand how C<require> looks for files in the case of a
d4835 2
a4836 2
You can also insert hooks into the import facility, by putting directly
Perl code into the @@INC array.  There are three forms of hooks: subroutine
d4841 4
a4844 4
called with two parameters, the first being a reference to itself, and the
second the name of the file to be included (e.g. "F<Foo/Bar.pm>").  The
subroutine should return nothing, or a list of up to three values in the
following order:
d4857 1
a4857 1
"end of file". If there is a filehandle, then the subroutine will be
d4870 3
a4872 3
is returned then C<require> will look at the remaining elements of @@INC.
Note that this file handle must be a real file handle (strictly a typeglob,
or reference to a typeglob, blessed or unblessed) - tied file handles will be
d4877 1
a4877 1
the array reference.  This enables to pass indirectly some arguments to
d4884 2
a4885 2
	my ($coderef, $filename) = @@_;	# $coderef is \&my_sub
	...
d4892 4
a4895 4
	my ($arrayref, $filename) = @@_;
	# Retrieve $x, $y, ...
	my @@parameters = @@$arrayref[1..$#$arrayref];
	...
d4907 2
a4908 2
	my ($self, $filename) = @@_;
	...
d4914 1
a4914 1
Note that these hooks are also permitted to set the %INC entry
d4929 2
a4930 2
omitted, one-match searches (C<?pattern?>) are reset to match again.  Resets
only variables or searches in the current package.  Always returns
d4933 3
a4935 3
    reset 'X';		# reset all X variables
    reset 'a-z';	# reset lower case variables
    reset;		# just reset ?one-time? searches
d4939 1
a4939 1
variables--lexical variables are unaffected, but they clean themselves
d4953 1
a4953 1
scalar context, and (of course) nothing at all in a void context.
d4955 2
a4956 2
(Note that in the absence of an explicit C<return>, a subroutine, eval,
or do FILE will automatically return the value of the last expression
d4977 4
d4987 1
a4987 1
    %by_name = reverse %by_address;	# Invert the hash
d5013 1
a5013 1
To remove a directory tree recursively (C<rm -rf> on unix) look at
d5031 1
a5031 1
This keyword is only available when the "say" feature is
d5048 1
a5048 1
Because C<scalar> is unary operator, if you accidentally use for EXPR a
d5055 1
a5055 1
	print uc(scalar(&foo,$bar)),$baz;
d5059 2
a5060 2
	&foo;
	print(uc($bar),$baz);
d5074 1
a5074 1
of the file) from the Fcntl module.  Returns C<1> upon success, C<0>
d5082 2
a5083 2
If you want to position file for C<sysread> or C<syswrite>, don't use
C<seek>--buffering makes its effect on the file's system position
d5094 2
a5095 2
EOF on your read, and then sleep for a while, you might have to stick in a
seek() to reset things.  The C<seek> doesn't change the current position,
d5097 1
a5097 1
next C<< <FILE> >> makes Perl try again to read something.  We hope.
d5099 2
a5100 2
If that doesn't work (some IO implementations are particularly
cantankerous), then you may need something more like this:
d5103 1
a5103 1
	for ($curpos = tell(FILE); $_ = <FILE>;
d5105 4
a5108 4
	    # search for some stuff and put it into files
	}
	sleep($for_a_while);
	seek(FILE, $curpos, 0);
d5151 1
a5151 1
This calls the select(2) system call with the bit masks specified, which
d5159 2
a5160 2
If you want to select on many filehandles you might wish to write a
subroutine:
d5163 6
a5168 6
	my(@@fhlist) = split(' ',$_[0]);
	my($bits);
	for (@@fhlist) {
	    vec($bits,fileno($_),1) = 1;
	}
	$bits;
d5197 1
a5197 1
On error, C<select> behaves like the select(2) system call : it returns
d5200 4
a5203 4
Note: on some Unixes, the select(2) system call may report a socket file
descriptor as "ready for reading", when actually no data is available,
thus a subsequent read blocks. It can be avoided using always the
O_NONBLOCK flag on the socket. See select(2) and fcntl(2) for further
d5213 1
a5213 1
Calls the System V IPC function C<semctl>.  You'll probably have to say
d5229 1
a5229 1
Calls the System V IPC function semget.  Returns the semaphore id, or
d5237 1
a5237 1
Calls the System V IPC function semop to perform semaphore operations
d5257 6
a5262 7
Sends a message on a socket.  Attempts to send the scalar MSG to the
SOCKET filehandle.  Takes the same flags as the system call of the
same name.  On unconnected sockets you must specify a destination to
send TO, in which case it does a C C<sendto>.  Returns the number of
characters sent, or the undefined value if there is an error.  The C
system call sendmsg(2) is currently unimplemented.  See
L<perlipc/"UDP: Message Passing"> for examples.
d5276 1
a5276 1
process.  Will produce a fatal error if used on a machine that doesn't
d5286 1
a5286 1
(See setpriority(2).)  Will produce a fatal error if used on a machine
d5298 1
a5298 1
An example disabling the Nagle's algorithm for a socket:
d5312 1
a5312 1
C<@@ARGV> array outside of a subroutine and also within the lexical scopes
d5359 1
a5359 1
has the same interpretation as in the system call of the same name.
d5371 1
a5371 1
Returns C<1> for success. In the case of error, returns C<undef> if
d5393 2
a5394 2
Causes the script to sleep for EXPR seconds, or forever if no EXPR.
Returns the number of seconds actually slept.  
d5427 1
a5427 1
the system call of the same name.  You should C<use Socket> first
d5440 2
a5441 2
for the system call of the same name.  If unimplemented, yields a fatal
error.  Returns true if successful.
d5472 2
a5473 2
depending on how the elements of the list are to be ordered.  (The C<<
<=> >> and C<cmp> operators are extremely useful in such routines.)
d5520 1
a5520 1

d5523 1
a5523 1

d5526 1
a5526 1

d5529 1
a5529 1

d5532 1
a5532 1

d5535 1
a5535 1

d5539 1
a5539 1

d5542 1
a5542 1
	$age{$a} <=> $age{$b};	# presuming numeric
d5545 1
a5545 1

d5550 1
a5550 1
	    # prints AbelCaincatdogx
d5552 1
a5552 1
	    # prints xdogcatCainAbel
d5554 1
a5554 1
	    # prints AbelAxedCainPunishedcatchaseddoggonetoxyz
d5560 4
a5563 4
    @@new = sort {
	($b =~ /=(\d+)/)[0] <=> ($a =~ /=(\d+)/)[0]
			    ||
	            uc($a)  cmp  uc($b)
d5569 1
a5569 1
    @@nums = @@caps = ();
d5571 2
a5572 2
	push @@nums, /=(\d+)/;
	push @@caps, uc($_);
d5575 6
a5580 6
    @@new = @@old[ sort {
			$nums[$b] <=> $nums[$a]
				 ||
			$caps[$a] cmp $caps[$b]
		       } 0..$#old
	       ];
d5585 3
a5587 3
                           ||
                  $a->[2] cmp $b->[2]
           } map { [$_, /=(\d+)/, uc($_)] } @@old;
d5592 2
a5593 2
    sub backwards ($$) { $_[1] cmp $_[0]; }	# $a and $b are not set here

d5596 1
a5596 1

d5600 1
a5600 1

d5639 1
a5639 1
(not-a-number), and because C<sort> will trigger a fatal error unless the
d5642 2
a5643 2
The following example takes advantage of the fact that C<NaN != NaN> to
eliminate any C<NaN>s from the input.
d5666 1
a5666 1
past the end of the array, perl issues a warning, and splices at the
d5671 5
a5675 5
    push(@@a,$x,$y)	splice(@@a,@@a,0,$x,$y)
    pop(@@a)		splice(@@a,-1)
    shift(@@a)		splice(@@a,0,1)
    unshift(@@a,$x,$y)	splice(@@a,0,0,$x,$y)
    $a[$i] = $y		splice(@@a,$i,1,$y)
d5679 8
a5686 8
    sub aeq {	# compare two list values
	my(@@a) = splice(@@_,0,shift);
	my(@@b) = splice(@@_,0,shift);
	return 0 unless @@a == @@b;	# same len?
	while (@@a) {
	    return 0 if pop(@@a) ne pop(@@b);
	}
	return 1;
d5703 1
a5703 4
In scalar context, returns the number of fields found. In scalar and void
context it splits into the C<@@_> array.  Use of split in scalar and void
context is deprecated, however, because it clobbers your subroutine
arguments.
d5720 4
a5723 4
A pattern matching the null string (not to be confused with
a null pattern C<//>, which is just one member of the set of patterns
matching a null string) will split the value of EXPR into separate
characters at each point it matches that way.  For example:
d5729 4
a5732 4
As a special case for C<split>, using the empty pattern C<//> specifically
matches only the null string, and is not be confused with the regular use
of C<//> to mean "the last successful pattern match".  So, for C<split>,
the following:
d5787 1
a5787 1
will give you as many null initial fields as there are leading spaces.
d5802 1
a5802 1
	#...
d5827 5
a5831 5
Perl does its own C<sprintf> formatting--it emulates the C
function C<sprintf>, but it doesn't use it (except for floating-point
numbers, and even then only the standard modifiers are allowed).  As a
result, any non-standard extensions in your local C<sprintf> are not
available from Perl.
d5841 10
a5850 10
   %%	a percent sign
   %c	a character with the given number
   %s	a string
   %d	a signed integer, in decimal
   %u	an unsigned integer, in decimal
   %o	an unsigned integer, in octal
   %x	an unsigned integer, in hexadecimal
   %e	a floating-point number, in scientific notation
   %f	a floating-point number, in fixed decimal notation
   %g	a floating-point number, in %e or %f notation
d5854 7
a5860 7
   %X	like %x, but using upper-case letters
   %E	like %e, but using an upper-case "E"
   %G	like %g, but with an upper-case "E" (if applicable)
   %b	an unsigned integer, in binary
   %B	like %b, but using an upper-case "B" with the # flag
   %p	a pointer (outputs the Perl value's address in hexadecimal)
   %n	special: *stores* the number of characters output so far
d5866 5
a5870 5
   %i	a synonym for %d
   %D	a synonym for %ld
   %U	a synonym for %lu
   %O	a synonym for %lo
   %F	a synonym for %f
d5878 1
a5878 1
Between the C<%> and the format letter, you may specify a number of
d5888 1
a5888 1
to take the arguments out of order, e.g.:
d5933 1
a5933 1
This flag tells perl to interpret the supplied string as a vector of
d5949 1
a5949 1
the join string using e.g. C<*2$v>:
d5958 1
a5958 1
or from a specified argument (with e.g. C<*2$>):
d5974 3
a5976 2
For floating point formats, with the exception of 'g' and 'G', this specifies
the number of decimal places to show (the default being 6), e.g.:
d5985 3
a5987 2
For 'g' and 'G', this specifies the maximum number of digits to show,
including prior to the decimal point as well as after it, e.g.:
d5989 1
a5989 1
  # these examples are subject to system-specific variation
d6017 1
a6017 1
to fit in the specified width:
d6027 2
a6028 2
If a precision obtained through C<*> is negative, it has the same
effect as no precision.
d6040 2
a6041 2
but it is intended that this will be possible in the future using
e.g. C<.*2$>:
d6043 1
a6043 1
  printf '<%.*2$x>', 1, 6;   # INVALID, but in future will print "<000001>"
d6059 3
a6061 3
The last will produce errors if Perl does not understand "quads" in your
installation. (This requires that either the platform natively supports quads
or Perl was specifically compiled to support quads.) You can find out
d6064 8
a6071 7
	use Config;
	($Config{use64bitint} eq 'define' || $Config{longsize} >= 8) &&
		print "quads\n";

For floating point conversions (C<e f g E F G>), numbers are usually assumed
to be the default floating point size on your platform (double or long double),
but you can force 'long double' with C<q>, C<L>, or C<ll> if your
d6075 2
a6076 2
	use Config;
	$Config{d_longdbl} eq 'define' && print "long doubles\n";
d6078 2
a6079 2
You can find out whether Perl considers 'long double' to be the default
floating point size to use on your platform via L<Config>:
d6081 4
a6084 3
        use Config;
        ($Config{uselongdouble} eq 'define') &&
                print "long doubles by default\n";
d6086 1
a6086 1
It can also be the case that long doubles and doubles are the same thing:
d6092 3
a6094 4
The size specifier C<V> has no effect for Perl code, but it is supported
for compatibility with XS code; it means 'use the standard size for
a Perl integer (or floating-point number)', which is already the
default for Perl code.
d6098 1
a6098 1
Normally, sprintf takes the next unused argument as the value to
d6101 5
a6105 5
the argument list in the order in which they appear in the format
specification I<before> the value to format. Where an argument is
specified using an explicit index, this does not affect the normal
order for the arguments (even when the explicitly specified index
would have been the next argument in any case).
d6109 1
a6109 1
  printf '<%*.*s>', $a, $b, $c;
d6111 2
a6112 2
would use C<$a> for the width, C<$b> for the precision and C<$c>
as the value to format, while:
d6114 1
a6114 1
  printf '<%*1$.*s>', $a, $b;
d6116 1
a6116 1
would use C<$a> for the width and the precision, and C<$b> as the
d6119 2
a6120 2
Here are some more examples - beware that when using an explicit
index, the C<$> may need to be escaped:
d6122 4
a6125 4
  printf "%2\$d %d\n",    12, 34;		# will print "34 12\n"
  printf "%2\$d %d %d\n", 12, 34;		# will print "34 12 34\n"
  printf "%3\$d %d %d\n", 12, 34, 56;		# will print "56 12 34\n"
  printf "%2\$*3\$d %d\n", 12, 34, 3;		# will print " 34 12\n"
d6129 3
a6131 3
If C<use locale> is in effect, and POSIX::setlocale() has been called,
the character used for the decimal separator in formatted floating
point numbers is affected by the LC_NUMERIC locale.  See L<perllocale>
d6139 3
a6141 3
Return the square root of EXPR.  If EXPR is omitted, returns square
root of C<$_>.  Only works on non-negative operands, unless you've
loaded the standard Math::Complex module.
d6144 1
a6144 1
    print sqrt(-2);    # prints 1.4142135623731i
d6158 1
a6158 1
first use of the C<rand> operator.  However, this was not the case in
d6165 4
a6168 2
process ID, and memory allocation, or the F</dev/urandom> device,
if available.
d6175 2
a6176 2
Do B<not> call srand() (i.e. without an argument) more than once in
a script.  The internal state of the random number generator should
d6197 2
a6198 2
If you're particularly concerned with this, see the C<Math::TrulyRandom>
module in CPAN.
d6221 1
a6221 1
omitted, it stats C<$_>.  Returns a null list if the stat fails.  Typically
d6256 1
a6256 1
	print "$file is executable NFS file\n";
d6278 2
a6279 2
	$filename, $sb->size, $sb->mode & 07777,
	scalar localtime $sb->mtime;
d6298 1
a6298 1
The commonly available C<S_IF*> constants are
d6321 2
a6322 2
    S_IMODE($mode)	the part of $mode containing the permission bits
			and the setuid/setgid/sticky bits
d6324 2
a6325 2
    S_IFMT($mode)	the part of $mode containing the file type
			which can be bit-anded with e.g. S_IFREG
d6357 2
a6358 2
C<state> variables are only enabled when the C<feature 'state'> pragma is
in effect.  See L<feature>.
d6369 1
a6369 1
frequencies in the string to be searched--you probably want to compare
d6373 1
a6373 1
one C<study> active at a time--if you study a different scalar the first
d6385 6
a6390 6
	study;
	print ".IX foo\n" 	if /\bfoo\b/;
	print ".IX bar\n" 	if /\bbar\b/;
	print ".IX blurfl\n" 	if /\bblurfl\b/;
	# ...
	print;
d6393 1
a6393 1
In searching for C</\bfoo\b/>, only those locations in C<$_> that contain C<f>
d6402 1
a6402 1
undefining C<$/> to input entire files as one record, this can be very
d6409 1
a6409 1
	$search .= "++\$seen{\$ARGV} if /\\b$word\\b/;\n";
d6414 2
a6415 2
    eval $search;		# this screams
    $/ = "\n";		# put back to normal input delimiter
d6417 1
a6417 1
	print $file, "\n";
d6453 5
a6457 5
    my $color  = substr $s, 4, 5;	# black
    my $middle = substr $s, 4, -11;	# black cat climbed the
    my $end    = substr $s, 14;		# climbed the green tree
    my $tail   = substr $s, -4;		# tree
    my $z      = substr $s, -4, 2;	# tr
d6463 1
a6463 1
length you may need to pad or chop your value using C<sprintf>.
d6469 1
a6469 1
substring that is entirely outside the string is a fatal error.
d6473 4
a6476 4
    substr($name, 4) = 'dy';		# $name is now 'freddy'
    my $null = substr $name, 6, 2;	# returns '' (no warning)
    my $oops = substr $name, 7;		# returns undef, with warning
    substr($name, 7) = 'gap';		# fatal error
d6484 1
a6484 1
    my $z = substr $s, 14, 7, "jumped from";	# climbed
d6493 2
a6494 2
        $_ = 'a';   print $x,"\n";	# prints 1a4
        $_ = 'xyz'; print $x,"\n";	# prints 1xyz4
d6496 1
a6496 1
        $_ = 'pq';  print $x,"\n";	# prints 5pq9
d6507 1
a6507 1
symbolic links, produces a fatal error at run time.  To check for that,
d6517 1
a6517 1
unimplemented, produces a fatal error.  The arguments are interpreted
d6529 1
a6529 1
    require 'syscall.ph';		# may need to run h2ph
d6533 2
a6534 2
Note that Perl supports passing of up to only 14 arguments to your system call,
which in practice should usually suffice.
d6570 1
a6570 1
supported by perl: zero means read-only, one means write-only, and two
d6603 1
a6603 1
On many UNIX systems, fdopen() is known to fail when file descriptors
d6616 1
a6616 1
specified FILEHANDLE, using the system call read(2).  It bypasses
d6633 1
a6633 1
very well on device files (like ttys) anyway.  Use sysread() and check
d6645 1
a6645 1
Sets FILEHANDLE's system position in bytes using the system call
d6655 1
a6655 1
implementing that would render sysseek() very slow).
d6666 2
a6667 2
	use Fcntl 'SEEK_CUR';
	sub systell { sysseek($_[0], 0, SEEK_CUR) }
d6681 1
a6681 1
complete.  Note that argument processing varies depending on the
d6720 1
a6720 1
	 or die "system @@args failed: $?"
d6726 1
a6726 1
	print "failed to execute: $!\n";
d6729 2
a6730 2
	printf "child died with signal %d, %s coredump\n",
	    ($? & 127),  ($? & 128) ? 'with' : 'without';
d6733 1
a6733 1
	printf "child exited with value %d\n", $? >> 8;
d6736 2
a6737 2
Alternatively you might inspect the value of C<${^CHILD_ERROR_NATIVE}>
with the W*() calls of the POSIX extension.
d6739 2
a6740 2
When the arguments get executed via the system shell, results
and return codes will be subject to its quirks and capabilities.
d6743 3
d6754 1
a6754 1
specified FILEHANDLE, using the system call write(2).  If LENGTH is
d6761 1
a6761 1
available data in the SCALAR after the OFFSET, only as much data as is
d6767 1
a6767 1
In the case the SCALAR is empty you can use OFFSET but only zero offset.
d6769 3
a6771 3
Note that if the filehandle has been marked as C<:utf8>, Unicode
characters are written instead of bytes (the LENGTH, OFFSET, and the
return value of syswrite() are in UTF-8 encoded Unicode characters).
d6796 1
a6796 1
Do not use tell() (or other buffered I/O operations) on a file handle
d6829 1
a6829 1
	print $key, ' = ', unpack('L',$val), "\n";
d6864 1
a6864 1
A class implementing a file handle should have the following methods:
d6894 2
a6895 2
Unlike C<dbmopen>, the C<tie> function will not use or require a module
for you--you need to do that explicitly yourself.  See L<DB_File>
d6937 1
a6937 1
Note that times for children are included only after they terminate.
d6950 1
a6950 1
specified length.  Produces a fatal error if truncate isn't implemented
d6966 1
a6966 3
implementing the C<\U> escape in double-quoted strings.  Respects
current LC_CTYPE locale if C<use locale> in force.  See L<perllocale>
and L<perlunicode> for more details about locale and Unicode support.
d6968 1
a6968 1
C<ucfirst> for that.
d6972 3
d6982 1
a6982 3
the C<\u> escape in double-quoted strings.  Respects current LC_CTYPE
locale if C<use locale> in force.  See L<perllocale> and L<perlunicode>
for more details about locale and Unicode support.
d6986 3
d7020 2
a7021 2
restrict access for I<yourself> (i.e., (EXPR & 0700) > 0), produces a
fatal error at run time.  If umask(2) is not implemented and you are
d7034 1
a7034 1
(using C<&>), or a typeglob (using C<*>).  (Saying C<undef $hash{$key}>
d7036 1
a7036 1
DBM list values, so don't do that; see L<delete>.)  Always returns the
d7039 1
a7039 1
instance, return from a subroutine, assign to a variable or pass as a
d7059 3
a7061 2
Deletes a list of files.  Returns the number of files successfully
deleted.
d7063 1
a7063 1
    $cnt = unlink 'a', 'b', 'c';
d7065 1
a7065 1
    unlink <*.bak>;
d7067 13
a7079 5
Note: C<unlink> will not attempt to delete directories unless you are superuser
and the B<-U> flag is supplied to Perl.  Even if these conditions are
met, be warned that unlinking a directory can inflict damage on your
filesystem.  Finally, using C<unlink> on directories is not supported on 
many operating systems.  Use C<rmdir> instead.
d7081 1
a7081 1
If LIST is omitted, uses C<$_>.
d7093 1
d7104 2
a7105 2
	my($what,$where,$howmuch) = @@_;
	unpack("x$where a$howmuch", $what);
d7123 2
a7124 2
	local $/;  # slurp!
	unpack("%32W*",<>) % 65535;
d7138 4
a7141 4
is not well defined: in some cases, the repeat count is decreased, or
C<unpack()> will produce null strings or zeroes, or terminate with an
error. If the input string is longer than one described by the TEMPLATE,
the rest is ignored.
d7183 4
a7186 4
In the peculiar C<use VERSION> form, VERSION may be either a numeric
argument such as 5.006, which will be compared to C<$]>, or a literal of
the form v5.6.1, which will be compared to C<$^V> (aka $PERL_VERSION).  A
fatal error is produced if VERSION is greater than the version of the
d7190 1
a7190 1
of perl older than the specified one.
d7197 3
a7199 3
    use v5.6.1;		# compile time version check
    use 5.6.1;		# ditto
    use 5.006_001;	# ditto; preferred for backwards compatibility
d7205 1
a7205 1
Also, if the specified perl version is greater than or equal to 5.9.5,
d7208 3
d7214 1
a7214 1
yet.  The C<import> is not a builtin--it's just an ordinary static method
d7259 9
d7270 2
a7271 2
It behaves exactly as C<import> does with respect to VERSION, an
omitted LIST, empty LIST, or no unimport method being found.
d7277 5
d7283 1
a7283 1
for the C<-M> and C<-m> command-line options to perl that give C<use>
d7301 2
a7302 2
Since perl 5.7.2, if the first two elements of the list are C<undef>, then
the utime(2) function in the C library will be called with a null second
d7304 2
a7305 2
modification times to the current time (i.e. equivalent to the example
above) and will even work on other users' files where you have write
d7308 4
a7311 1
    utime undef, undef, @@ARGV;
d7319 3
a7321 3
Note that only passing one of the first two elements as C<undef> will
be equivalent of passing it as 0 and will not have the same effect as
described when they are both C<undef>.  This case will also trigger an
d7324 4
a7327 5
On systems that support futimes, you might pass file handles among the
files.  On systems that don't support futimes, passing file handles
produces a fatal error at run time.  The file handles must be passed
as globs or references to be recognized.  Barewords are considered
file names.
d7332 4
a7335 2
Returns a list consisting of all the values of the named hash.
(In a scalar context, returns the number of values.)
d7338 1
a7338 1
random order is subject to change in future versions of perl, but it
d7344 2
a7345 1
As a side effect, calling values() resets the HASH's internal iterator,
d7347 6
a7352 1
the iterator with no other overhead.)
d7357 1
a7357 1
    for (values %hash) 	    { s/foo/bar/g }   # modifies %hash values
d7394 1
a7394 1
to try to write off the beginning of the string (i.e. negative OFFSET).
d7411 1
a7411 1
    vec($foo,  0, 32) = 0x5065726C;	# 'Perl'
d7414 1
a7414 1
    print vec($foo, 0, 8);		# prints 80 == 0x50 == ord('P')
d7416 11
a7426 11
    vec($foo,  2, 16) = 0x5065;		# 'PerlPe'
    vec($foo,  3, 16) = 0x726C;		# 'PerlPerl'
    vec($foo,  8,  8) = 0x50;		# 'PerlPerlP'
    vec($foo,  9,  8) = 0x65;		# 'PerlPerlPe'
    vec($foo, 20,  4) = 2;		# 'PerlPerlPe'   . "\x02"
    vec($foo, 21,  4) = 7;		# 'PerlPerlPer'
                                        # 'r' is "\x72"
    vec($foo, 45,  2) = 3;		# 'PerlPerlPer'  . "\x0c"
    vec($foo, 93,  1) = 1;		# 'PerlPerlPer'  . "\x2c"
    vec($foo, 94,  1) = 1;		# 'PerlPerlPerl'
                                        # 'l' is "\x6c"
d7465 2
a7466 2
Regardless of the machine architecture on which it is run, the above
example should print the following table:
d7603 1
a7603 1
Behaves like the wait(2) system call on your system: it waits for a child
d7610 3
d7624 1
a7624 1
	$kid = waitpid(-1, WNOHANG);
d7629 1
a7629 1
waitpid(2) or wait4(2) system calls.  However, waiting for a particular
d7646 1
a7646 1
    return unless defined wantarray;	# don't bother doing more
d7663 1
a7663 1
If LIST is empty and C<$@@> already contains a value (typically from a
d7673 1
a7673 1
handlers must therefore make arrangements to actually display the
@


1.13
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@d495 2
a496 1
Note that atan2(0, 0) is not well-defined.
d528 1
a528 1
When LAYER is present using binmode on text file makes sense.
d985 1
a985 1
been extirpated as a potential munitions).
d1015 1
a1015 1
the first eight bytes of the digest string mattered, but alternative
d1431 1
a1431 1
5.8.1 the ordering is different even between different runs of Perl
d1547 2
a1548 1
executed, an undefined value is returned by C<eval>, and C<$@@> is set to the
d1561 4
d1629 16
d1734 1
a1734 2
been initialized, even if the corresponding value is undefined.  The
element is not autovivified if it doesn't exist.
d1934 1
a1934 1
    use Fcntl ':flock'; # import LOCK_* constants
d1937 5
a1941 4
	flock(MBOX,LOCK_EX);
	# and, in case someone appended
	# while we were waiting...
	seek(MBOX, 0, 2);
d1945 2
a1946 1
	flock(MBOX,LOCK_UN);
d1949 1
a1949 1
    open(MBOX, ">>/usr/spool/mail/$ENV{'USER'}")
d1952 3
a1954 3
    lock();
    print MBOX $msg,"\n\n";
    unlock();
d2115 1
a2115 1
(See L<getpriority(2)>.)  Will raise a fatal exception if used on a
d2348 5
d2354 2
a2355 1
C<File::Glob> extension.  See L<File::Glob> for details.
d2773 2
a2774 1
If EXPR is omitted, C<localtime()> uses the current time (C<localtime(time)>).
d2850 1
a2850 1
The match operator.  See L<perlop>.
d3082 8
d3161 1
a3161 1
  open(FH, "<:encoding(UTF-8)", "file")
d3191 1
a3191 1
    open(TMP, "+>", undef) or die ...
d3219 1
a3219 1
    open(DBASE, '+<', 'dbase.mine')		# open for update
d3222 1
a3222 1
    open(DBASE, '+<dbase.mine')			# ditto
d3268 1
a3268 1
duped (as L<dup(2)>) and opened.  You may use C<&> after C<< > >>,
d3299 1
a3299 1
that file descriptor (and not call L<dup(2)>); this is more
d3412 1
a3412 1
If you want a "real" C C<open> (see L<open(2)> on your system), then you
d3435 1
a3435 1
	my $handle = new IO::File;
d3457 2
a4084 6
If NAMESPACE is omitted, then there is no current package, and all
identifiers must be fully qualified or lexicals.  However, you are
strongly advised not to make use of this feature. Its use can cause
unexpected behaviour, even crashing some versions of Perl. It is
deprecated, and will be removed from a future release.

a4216 2
=item qr/STRING/

d4221 5
a4225 1
Generalized quotes.  See L<perlop/"Regexp Quote-Like Operators">.
d4306 3
a4308 3
    opendir(DIR, $some_dir) || die "can't opendir $some_dir: $!";
    @@dots = grep { /^\./ && -f "$some_dir/$_" } readdir(DIR);
    closedir DIR;
d4343 1
a4344 1
            last; # reached EOF
d4615 1
a4615 1
called to act a simple source filter, with the line as read in C<$_>.
d4669 1
a4669 1
    push @@INC, new Foo(...);
d4724 1
a4724 1
    print reverse <>;		# line tac, last line first
d4726 1
a4726 2
    undef $/;			# for efficiency of <>
    print scalar reverse <>;	# character tac, last line tsrif
d4730 4
d4771 1
a4771 1
The substitution operator.  See L<perlop>.
d5125 4
d5148 2
d5151 9
a5159 3
Returns the number of seconds actually slept.  You probably cannot
mix C<alarm> and C<sleep> calls, because C<sleep> is often implemented
using C<alarm>.
d5268 1
a5268 1
independent ways quite probably will.  See L<sort>.
d5359 17
d5378 1
a5378 1
if you're in the C<main> package and type
d5457 4
a5460 3
In scalar context, returns the number of fields found and splits into
the C<@@_> array.  Use of split in scalar context is deprecated, however,
because it clobbers your subroutine arguments.
d5482 1
a5482 1
    print join(':', split(/ */, 'hi there'));
d5491 1
a5491 1
    print join(':', split(//, 'hi there'));
d5506 2
a5507 2
   print join(':', split(//,   'hi there!', -1));
   print join(':', split(/\W/, 'hi there!', -1));
d5534 1
a5534 1
    $header =~ s/\n\s+/ /g;  # fix continuation lines
d5573 1
a5573 1
and see L<sprintf(3)> or L<printf(3)> on your system for an explanation of
d5654 2
a5655 2
   space   prefix positive number with a space
   +       prefix positive number with a plus sign
d6459 3
d6474 2
a6475 2
You can check all the failure possibilities by inspecting
C<$?> like this:
d6690 2
a6691 1
The transliteration operator.  Same as C<y///>.  See L<perlop>.
d6931 2
a6932 7
versions of Perl that do not support this syntax.  The equivalent numeric
version should be used instead.

Alternatively, you can use a numeric version C<use 5.006> followed by a
v-string version like C<use v5.10.1>, to avoid the unintuitive C<use
5.010_001>. (older perl versions fail gracefully at the first C<use>,
later perl versions understand the v-string syntax in the second).
a6936 1
    use 5.006; use 5.6.1;	# ditto, for compatibility and readability
d6939 2
a6940 2
C<use>ing library modules that have changed in incompatible ways from
older versions of Perl.  (We try not to do this more than we have to.)
d7316 1
a7316 1
and C<{^CHILD_ERROR_NATIVE}>.
d7326 1
a7326 1
The status is returned in C<$?> and C<{^CHILD_ERROR_NATIVE}>.  If you say
d7441 2
a7442 1
The transliteration operator.  Same as C<tr///>.  See L<perlop>.
@


1.12
log
@merge in perl 5.8.8
@
text
@d103 1
a103 1
C<length>, C<oct>, C<ord>, C<pack>, C<q/STRING/>, C<qq/STRING/>, C<reverse>,
d125 1
a125 1
C<grep>, C<join>, C<map>, C<qw/STRING/>, C<reverse>, C<sort>, C<unpack>
d137 1
a137 1
C<readdir>, C<rewinddir>, C<seek>, C<seekdir>, C<select>, C<syscall>,
d159 7
d168 5
a172 1
C<caller>, C<import>, C<local>, C<my>, C<our>, C<package>, C<use>
d176 2
a177 2
C<defined>, C<dump>, C<eval>, C<formline>, C<local>, C<my>, C<our>, C<reset>,
C<scalar>, C<undef>, C<wantarray>
d183 1
a183 1
C<pipe>, C<qx/STRING/>, C<setpgrp>, C<setpriority>, C<sleep>, C<system>,
d191 1
a191 1
=item Keywords related to classes and object-orientedness
d234 5
a238 4
C<abs>, C<bless>, C<chomp>, C<chr>, C<exists>, C<formline>, C<glob>,
C<import>, C<lc>, C<lcfirst>, C<map>, C<my>, C<no>, C<our>, C<prototype>,
C<qx>, C<qw>, C<readline>, C<readpipe>, C<ref>, C<sub*>, C<sysopen>, C<tie>,
C<tied>, C<uc>, C<ucfirst>, C<untie>, C<use>
d289 2
d294 2
a295 2
operator takes one argument, either a filename or a filehandle, and
tests the associated file to see if something is true about it.  If the
d299 1
a299 2
names, precedence is the same as any other named unary operator, and
the argument may be parenthesized like any other unary operator.  The
d347 6
a352 4
reasons you can't actually read, write, or execute the file.  Such
reasons may be for example network filesystem access controls, ACLs
(access control lists), read-only filesystems, and unrecognized
executable formats.
d367 5
a371 2
due to the underlying system calls' definitions.  Read the
documentation for the C<filetest> pragma for more information.
d409 6
d453 6
a458 6
For delays of finer granularity than one second, you may use Perl's
four-argument version of select() leaving the first three arguments
undefined, or you might be able to use the C<syscall> interface to
access setitimer(2) if your system supports it.  The Time::HiRes
module (from CPAN, and starting from Perl 5.8 part of the standard
distribution) may also prove useful.
d533 2
a534 2
Camel) or elsewhere, C<:raw> is I<not> the simply inverse of C<:crlf>
-- other layers which would affect binary nature of the stream are
d549 4
a552 1
To mark FILEHANDLE as UTF-8, use C<:utf8>.
d616 7
d633 1
d640 1
d642 4
a645 1
    $wantarray, $evaltext, $is_require, $hints, $bitmask) = caller($i);
d652 1
a652 1
$filename is C<(eval)>, but $evaltext is undefined.  (Note also that
d661 4
d678 1
d715 3
a717 1
produces a fatal error at run time.
a765 4
If the C<encoding> pragma is in scope then the lengths returned are
calculated from the length of C<$/> in Unicode characters, which is not
always the same as the length of C<$/> in the native encoding.

d809 3
a811 1
produces a fatal error at run time.
d842 5
a846 3
chr(0x263a) is a Unicode smiley face.  Note that characters from 128
to 255 (inclusive) are by default not encoded in UTF-8 Unicode for
backward compatibility reasons (but see L<encoding>).
d852 2
a853 2
Note that under the C<bytes> pragma the NUMBER is masked to
the low eight bits.
d855 1
a855 1
See L<perlunicode> and L<encoding> for more about Unicode.
d874 5
a878 4
Closes the file or pipe associated with the file handle, returning
true only if IO buffers are successfully flushed and closes the system
file descriptor.  Closes the currently selected filehandle if the
argument is omitted.
d891 2
a892 1
implicitly puts the exit status value of that command into C<$?>.
d930 2
d959 6
d980 1
a980 1
X<decrypt> X<cryptography> X<passwd>
d1293 5
a1297 1
regular expressions.  Here's an example:
d1302 2
a1303 2
    if ($@@) {
        if (blessed($@@) && $@@->isa("Some::Module::Exception")) {
d1413 3
a1415 5
This function is now largely obsolete, partly because it's very
hard to convert a core file into an executable, and because the
real compiler backends for generating portable bytecode and compilable
C code have superseded it.  That's why you should now invoke it as
C<CORE::dump()>, if you don't want to be warned against a possible
a1417 7
If you're looking to use L<dump> to speed up your program, consider
generating bytecode or native C code as described in L<perlcc>.  If
you're just trying to accelerate a CGI script, consider using the
C<mod_perl> extension to B<Apache>, or the CPAN module, CGI::Fast.
You might also consider autoloading or selfloading, which at least
make your program I<appear> to run faster.

d1513 1
a1761 3
See L<perlref/"Pseudo-hashes: Using an array as a hash"> for specifics
on how exists() acts when used on a pseudo-hash.

d2007 1
a2007 1
X<getc> X<getchar>
d2227 1
a2227 1
    ($a,$b,$c,$d) = unpack('C4',$addr[0]);
d2238 12
d2333 2
a2334 27
Converts a time as returned by the time function to an 9-element list
with the time localized for the standard Greenwich time zone.
Typically used as follows:

    #  0    1    2     3     4    5     6     7     8
    ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) =
					    gmtime(time);

All list elements are numeric, and come straight out of the C `struct
tm'.  $sec, $min, and $hour are the seconds, minutes, and hours of the
specified time.  $mday is the day of the month, and $mon is the month
itself, in the range C<0..11> with 0 indicating January and 11
indicating December.  $year is the number of years since 1900.  That
is, $year is C<123> in year 2023.  $wday is the day of the week, with
0 indicating Sunday and 3 indicating Wednesday.  $yday is the day of
the year, in the range C<0..364> (or C<0..365> in leap years).  $isdst
is always C<0>.

Note that the $year element is I<not> simply the last two digits of
the year.  If you assume it is then you create non-Y2K-compliant
programs--and you wouldn't want to do that, would you?

The proper way to get a complete 4-digit year is simply:

	$year += 1900;

And to get the last two digits of the year (e.g., '01' in 2001) do:
d2336 3
a2338 15
	$year = sprintf("%02d", $year % 100);

If EXPR is omitted, C<gmtime()> uses the current time (C<gmtime(time)>).

In scalar context, C<gmtime()> returns the ctime(3) value:

    $now_string = gmtime;  # e.g., "Thu Oct 13 04:54:34 1994"

If you need local time instead of GMT use the L</localtime> builtin. 
See also the C<timegm> function provided by the C<Time::Local> module,
and the strftime(3) and mktime(3) functions available via the L<POSIX> module.

This scalar value is B<not> locale dependent (see L<perllocale>), but is
instead a Perl builtin.  To get somewhat similar but locale dependent date
strings, see the example in L</localtime>.
d2412 5
d2460 1
a2460 1
X<int> X<integer> X<truncate> X<trunc>
d2590 6
a2595 4
If SIGNAL is zero, no signal is sent to the process.  This is a
useful way to check that a child process is alive and hasn't changed
its UID.  See L<perlport> for notes on the portability of this
construct.
d2668 5
a2672 1
in bytes, use C<do { use bytes; length(EXPR) }>, see L<bytes>.
d2700 1
a2700 1
X<localtime>
d2730 3
d2770 7
d2814 1
a2814 1
information, please see the documentation for L</stat>.
d2838 1
a2838 1
    %hash = map { getkey($_) => $_ } @@array;
d2843 2
a2844 2
    foreach $_ (@@array) {
	$hash{getkey($_)} = $_;
d2854 5
d2876 1
a2876 1
or to force an anon hash constructor use C<+{>
d2887 2
d2892 2
a2893 1
If omitted, MASK defaults to 0777.
d2907 3
d3009 3
a3011 1
See the C<use> function, which C<no> is the opposite of.
d3123 1
a3123 1
  open(FH, "<:utf8", "file")
d3340 2
a3341 1
child to finish, and returns the status value in C<$?>.
d3429 1
a3429 1
See L<perlunicode> and L<encoding> for more about Unicode.
d3434 1
a3434 1
=item our EXPR TYPE
a3501 24
The only currently recognized C<our()> attribute is C<unique> which
indicates that a single copy of the global is to be used by all
interpreters should the program happen to be running in a
multi-interpreter environment. (The default behaviour would be for
each interpreter to have its own copy of the global.)  Examples:

    our @@EXPORT : unique = qw(foo);
    our %EXPORT_TAGS : unique = (bar => [qw(aa bb cc)]);
    our $VERSION : unique = "1.00";

Note that this attribute also has the effect of making the global
readonly when the first new interpreter is cloned (for example,
when the first new thread is created).

Multi-interpreter environments can come to being either through the
fork() emulation on Windows platforms, or by embedding perl in a
multi-threaded application.  The C<unique> attribute does nothing in
all other environments.

Warning: the current implementation of this attribute operates on the
typeglob associated with the variable; this means that C<our $x : unique>
also has the effect of C<our @@x : unique; our %x : unique>. This may be
subject to change.

d3509 2
a3510 1
a converted integer may be represented by a sequence of 4 bytes.
d3524 3
a3526 2
    c	A signed char value.
    C	An unsigned char value.  Only does bytes.  See U for Unicode.
d3528 1
a3528 1
    s	A signed short value.
a3529 10
	  (This 'short' is _exactly_ 16 bits, which may differ from
	   what a local C compiler calls 'short'.  If you want
	   native-length shorts, use the '!' suffix.)

    i	A signed integer value.
    I	An unsigned integer value.
	  (This 'integer' is _at_least_ 32 bits wide.  Its exact
           size depends on what a local C compiler calls 'int',
           and may even be larger than the 'long' described in
           the next item.)
d3531 1
a3531 1
    l	A signed long value.
a3532 10
	  (This 'long' is _exactly_ 32 bits, which may differ from
	   what a local C compiler calls 'long'.  If you want
	   native-length longs, use the '!' suffix.)

    n	An unsigned short in "network" (big-endian) order.
    N	An unsigned long in "network" (big-endian) order.
    v	An unsigned short in "VAX" (little-endian) order.
    V	An unsigned long in "VAX" (little-endian) order.
	  (These 'shorts' and 'longs' are _exactly_ 16 bits and
	   _exactly_ 32 bits, respectively.)
d3540 12
a3551 2
    j   A signed integer value (a Perl internal integer, IV).
    J   An unsigned integer value (a Perl internal unsigned integer, UV).
d3556 1
a3556 2
    F	A floating point value in the native native format
           (a Perl internal floating point value, NV).
d3566 2
a3567 2
    U	A Unicode character number.  Encodes to UTF-8 internally
	(or UTF-EBCDIC in EBCDIC platforms).
d3576 3
a3578 2
    @@	Null fill to absolute position, counted from the start of
        the innermost ()-group.
d3581 25
d3614 7
a3620 6
C<H>, C<@@>, C<x>, C<X> and C<P> the pack function will gobble up that
many values from the LIST.  A C<*> for the repeat count means to use
however many items are left, except for C<@@>, C<x>, C<X>, where it is
equivalent to C<0>, and C<u>, where it is equivalent to 1 (or 45, what
is the same).  A numeric repeat count may optionally be enclosed in
brackets, as in C<pack 'C[80]', @@arr>.
d3634 11
d3646 2
a3647 1
to encode per line of output, with 0 and 1 replaced by 45.
d3653 2
a3654 3
unpacking, C<A> strips trailing spaces and nulls, C<Z> strips everything
after the first null, and C<a> returns data verbatim.  When packing,
C<a>, and C<Z> are equivalent.
d3658 2
a3659 2
by a null byte.  Thus C<Z> always packs a trailing null byte under
all circumstances.
d3664 1
a3664 1
Each byte of the input field of pack() generates 1 bit of the result.
d3666 2
a3667 2
input byte, i.e., on C<ord($byte)%2>.  In particular, bytes C<"0"> and
C<"1"> generate bits 0 and 1, as do bytes C<"\0"> and C<"\1">.
d3670 4
a3673 4
of bytes is converted to 1 byte of output.  With format C<b>
the first byte of the 8-tuple determines the least-significant bit of a
byte, and with format C<B> it determines the most-significant bit of
a byte.
d3676 1
a3676 1
remainder is packed as if the input string were padded by null bytes
d3679 4
a3682 4
If the input string of pack() is longer than needed, extra bytes are ignored.
A C<*> for the repeat count of pack() means to use all the bytes of
the input field.  On unpack()ing the bits are converted to a string
of C<"0">s and C<"1">s.
d3689 5
a3693 5
Each byte of the input field of pack() generates 4 bits of the result.
For non-alphabetical bytes the result is based on the 4 least-significant
bits of the input byte, i.e., on C<ord($byte)%16>.  In particular,
bytes C<"0"> and C<"1"> generate nybbles 0 and 1, as do bytes
C<"\0"> and C<"\1">.  For bytes C<"a".."f"> and C<"A".."F"> the result
d3695 1
a3695 1
C<"A"> both generate the nybble C<0xa==10>.  The result for bytes
d3699 3
a3701 3
of bytes is converted to 1 byte of output.  With format C<h> the
first byte of the pair determines the least-significant nybble of the
output byte, and with format C<H> it determines the most-significant
d3705 1
a3705 1
by a null byte at the end.  Similarly, during unpack()ing the "extra"
d3708 4
a3711 3
If the input string of pack() is longer than needed, extra bytes are ignored.
A C<*> for the repeat count of pack() means to use all the bytes of
the input field.  On unpack()ing the bits are converted to a string
d3723 5
d3730 17
a3746 13
The C</> template character allows packing and unpacking of strings where
the packed structure contains a byte count followed by the string itself.
You write I<length-item>C</>I<string-item>.

The I<length-item> can be any C<pack> template letter, and describes
how the length value is packed.  The ones likely to be of most use are
integer-packing ones like C<n> (for Java strings), C<w> (for ASN.1 or
SNMP) and C<N> (for Sun XDR).

For C<pack>, the I<string-item> must, at present, be C<"A*">, C<"a*"> or
C<"Z*">. For C<unpack> the length of the string is obtained from the
I<length-item>, but if you put in the '*' it will be ignored. For all other
codes, C<unpack> applies the length value to the next item, which must not
d3749 10
a3758 3
    unpack 'C/a', "\04Gurusamy";        gives 'Guru'
    unpack 'a3/A* A*', '007 Bond  J ';  gives (' Bond','J')
    pack 'n/a* w/a*','hello,','world';  gives "\000\006hello,\005world"
d3770 1
a3770 1
immediately followed by a C<!> suffix to signify native shorts or
d3825 1
a3825 1
                            unpack("C*",pack("L",0x12345678))), "\n";
d3836 3
a3838 2
If you want portable packed integers use the formats C<n>, C<N>,
C<v>, and C<V>, their byte endianness and size are known.
d3843 32
d3883 7
a3889 4
Note that Perl uses doubles internally for all numeric calculation, and
converting from double into float and thence back to double again will
lose precision (i.e., C<unpack("f", pack("f", $foo)>) will not in general
equal $foo).
d3893 7
a3899 7
If the pattern begins with a C<U>, the resulting string will be
treated as UTF-8-encoded Unicode. You can force UTF-8 encoding on in a
string with an initial C<U0>, and the bytes that follow will be
interpreted as Unicode characters. If you don't want this to happen,
you can begin your pattern with C<C0> (or anything else) to force Perl
not to UTF-8 encode your string, and then follow this with a C<U*>
somewhere in your pattern.
d3905 1
a3905 1
could know where the bytes are going to or coming from.  Therefore
d3907 1
a3907 1
sequences of bytes.
a3919 1

d3924 1
a3924 1
aligned at a multiple of C<count> bytes.  For example, to pack() or
d3926 1
a3926 1
use the template C<C x![d] d C[2]>; this assumes that doubles must be
d3934 8
d3944 1
a3944 1
a C<!> modifier and a repeat count must follow immediately.
d3956 1
a3956 1
    $foo = pack("CCCC",65,66,67,68);
d3958 1
a3958 1
    $foo = pack("C4",65,66,67,68);
d3960 2
d3963 6
a3968 1
    # same thing with Unicode circled letters
d3973 1
a3973 1
    # note: the above examples featuring "C" and "c" are true
d3976 1
a3976 1
    # $foo = pack("CCCC",193,194,195,196);
d4010 11
d4076 1
a4076 3
one element.  Has an effect similar to

    $ARRAY[$#ARRAY--]
d4142 4
a4145 3
for an explanation of the format argument. If C<use locale> is in effect,
the character used for the decimal point in formatted real numbers is
affected by the LC_NUMERIC locale.  See L<perllocale>.
d4160 4
a4163 4
C<qw//>) or its arguments cannot be expressed by a prototype (such as
C<system>) returns C<undef> because the builtin does not really behave
like a Perl function.  Otherwise, the string describing the equivalent
prototype is returned.
d4166 1
a4166 1
X<push>, X<stack>
d4229 1
a4229 1
X<read>
d4275 2
d4279 7
a4285 6
Reads from the filehandle whose typeglob is contained in EXPR.  In scalar
context, each call reads and returns the next line, until end-of-file is
reached, whereupon the subsequent call returns undef.  In list context,
reads until end-of-file is reached and returns a list of lines.  Note that
the notion of "line" used here is however you may have defined it
with C<$/> or C<$INPUT_RECORD_SEPARATOR>).  See L<perlvar/"$/">.
d4324 2
d4336 1
d4353 4
a4356 4
binmode() to operate with the C<:utf8> I/O layer (see the C<open>
pragma, L<open>), the I/O will operate on UTF-8 encoded Unicode
characters, not bytes.  Similarly for the C<:encoding> pragma:
in that case pretty much any characters can be read.
d4415 4
d4430 8
d4453 3
d4483 3
a4485 2
mechanism, which is essentially just a variety of C<eval>.  Has
semantics similar to the following subroutine:
d4549 6
a4554 8
Now that you understand how C<require> looks for files in the case of
a bareword argument, there is a little extra functionality going on
behind the scenes.  Before C<require> looks for a "F<.pm>" extension,
it will first look for a filename with a "F<.pmc>" extension.  A file
with this extension is assumed to be Perl bytecode generated by
L<B::Bytecode|B::Bytecode>.  If this file is found, and its modification
time is newer than a coinciding "F<.pm>" non-compiled file, it will be
loaded in place of that non-compiled file ending in a "F<.pm>" extension.
d4564 31
a4594 3
subroutine should return C<undef> or a filehandle, from which the file to
include will be read.  If C<undef> is returned, C<require> will look at
the remaining elements of @@INC.
d4621 2
a4622 2
you must fully qualify the sub's name, as it is always forced into package
C<main>.)  Here is a typical code layout:
d4727 3
d4734 14
d4792 1
a4792 1
operate on characters (for example by using the C<:utf8> open
d4838 2
a4839 2
Returns the currently selected filehandle.  Sets the current default
filehandle for output, if FILEHANDLE is supplied.  This has two
d4982 4
a4985 4
binmode() to operate with the C<:utf8> I/O layer (see L</open>, or the
C<open> pragma, L<open>), the I/O will operate on UTF-8 encoded
Unicode characters, not bytes.  Similarly for the C<:encoding> pragma:
in that case pretty much any characters can be sent.
d5027 3
a5029 3
C<@@ARGV> array at file scopes or within the lexical scopes established by
the C<eval ''>, C<BEGIN {}>, C<INIT {}>, C<CHECK {}>, and C<END {}>
constructs.
d5116 6
a5121 5
For delays of finer granularity than one second, you may use Perl's
C<syscall> interface to access setitimer(2) if your system supports
it, or else see L</select> above.  The Time::HiRes module (from CPAN,
and starting from Perl 5.8 part of the standard distribution) may also
help.
d5190 2
a5191 2
In either case, the subroutine may not be recursive.  The values to be
compared are always passed by reference and should not be modified.
d5426 9
a5434 3
Empty leading (or trailing) fields are produced when there are positive
width matches at the beginning (or end) of the string; a zero-width match
at the beginning (or end) of the string does not produce an empty field.
d5437 2
a5438 1
   print join(':', split(/(?=\w)/, 'hi there!'));
d5440 2
a5441 1
produces the output 'h:i :t:h:e:r:e!'.
d5546 1
d5584 1
d5589 3
a5591 2
   #       prefix non-zero octal with "0", non-zero hex with "0x",
           non-zero binary with "0b"
d5595 23
a5617 6
  printf '<% d>', 12;   # prints "< 12>"
  printf '<%+d>', 12;   # prints "<+12>"
  printf '<%6s>', 12;   # prints "<    12>"
  printf '<%-6s>', 12;  # prints "<12    >"
  printf '<%06s>', 12;  # prints "<000012>"
  printf '<%#x>', 12;   # prints "<0xc>"
d5685 9
a5693 1
output of the number itself should be zero-padded to this width:
d5698 3
d5713 12
d5799 1
a5799 1
  print '<%*1$.*s>', $a, $b;
d5814 4
a5817 3
If C<use locale> is in effect, the character used for the decimal
point in formatted real numbers is affected by the LC_NUMERIC locale.
See L<perllocale>.
d5878 1
a5878 1
    srand (time ^ $$ ^ unpack "%L*", `ps axww | gzip`);
d5894 1
a5894 1
X<stat> X<file, status>
d5898 2
d5903 3
a5905 3
the file opened via FILEHANDLE, or named by EXPR.  If EXPR is omitted,
it stats C<$_>.  Returns a null list if the stat fails.  Typically used
as follows:
d5956 1
a5956 1
The File::stat module provides a convenient, by-name access mechanism:
d5978 1
a5978 1
    $is_setgid     =  S_ISDIR($mode);
d6026 17
d6135 7
d6166 18
d6336 3
a6338 3
on characters (for example by using the C<:utf8> I/O layer), tell()
will return byte offsets, not character offsets (because implementing
that would render sysseek() very slow).
d6416 2
a6417 2
or more portably by using the W*() calls of the POSIX extension;
see L<perlport> for more information.
d6463 3
a6465 3
operate on characters (for example by using the C<:utf8> open
layer), tell() will return byte offsets, not character offsets
(because that would render seek() and tell() rather slow).
d6595 1
a6595 1
you may use either the Time::HiRes module (from CPAN, and starting from
d6600 4
d6614 2
d6633 3
d6729 1
a6729 1
X<unlink> X<delete> X<remove> X<rm>
d6751 2
d6757 2
d6761 1
a6761 1
of C<pack>, or the bytes of the string represent a C structure of some
d6774 1
a6774 1
    sub ordinal { unpack("c",$_[0]); } # same as ord()
d6788 1
a6788 1
	unpack("%32C*",<>) % 65535;
d6843 1
a6843 1
    BEGIN { require Module; import Module LIST; }
d6847 8
a6854 6
VERSION may be either a numeric argument such as 5.006, which will be
compared to C<$]>, or a literal of the form v5.6.1, which will be compared
to C<$^V> (aka $PERL_VERSION.  A fatal error is produced if VERSION is
greater than the version of the current Perl interpreter; Perl will not
attempt to parse the rest of the file.  Compare with L</require>, which can
do a similar check at run time.
d6861 5
d6869 1
d6875 4
d6887 2
a6888 1
method can be found then the call is skipped.
d6928 2
d6974 6
d7039 4
a7042 7
The string should not contain any character with the value > 255 (which
can only happen if you're using UTF-8 encoding).  If it does, it will be
treated as something that is not UTF-8 encoded.  When the C<vec> was
assigned to, other parts of your program will also no longer consider the
string to be UTF-8 encoded.  In other words, if you do have such characters
in your string, vec() will operate on the actual byte string, and not the
conceptual character string.
d7248 2
a7249 1
C<-1> if there are no child processes.  The status is returned in C<$?>.
d7259 1
a7259 1
The status is returned in C<$?>.  If you say
d7265 1
a7265 1
    } until $kid > 0;
d7291 2
a7292 2
in a C<BEGIN>, C<CHECK>, C<INIT> or C<END> block, or in a C<DESTROY>
method.
d7299 3
a7301 2
Produces a message on STDERR just like C<die>, but doesn't exit or throw
an exception.
@


1.11
log
@sync in-tree perl with 5.8.6
@
text
@d2 1
d29 1
a29 1
Elements of the LIST should be separated by commas.
d72 1
d90 1
d100 1
d107 1
d112 1
d118 1
d123 1
d128 1
d133 1
d146 1
d153 2
a154 1
=item Keywords related to the control flow of your perl program
d169 1
d176 1
d181 1
d187 1
d194 1
d200 1
d207 1
d216 1
d221 1
d238 1
d251 1
a251 1
C<getppid>, C<getprgp>, C<getpriority>, C<getprotobynumber>,
d272 2
a287 2
X<-r>X<-w>X<-x>X<-o>X<-R>X<-W>X<-X>X<-O>X<-e>X<-z>X<-s>X<-f>X<-d>X<-l>X<-p>
X<-S>X<-b>X<-c>X<-t>X<-u>X<-g>X<-k>X<-T>X<-B>X<-M>X<-A>X<-C>
d362 1
a362 1
are found, it's a C<-B> file, otherwise it's a C<-T> file.  Also, any file
d376 1
a376 1
a C<lstat> call, C<-T> and C<-B> will reset it with the results of C<stat _>).
d392 1
d400 1
d411 3
d418 1
a418 1
specified number of wallclock seconds have elapsed.  If SECONDS is not
d462 1
d471 2
d474 1
d482 1
d569 1
d577 3
a579 3
version if the function doing the blessing might be inherited by a
derived class.  See L<perltoot> and L<perlobj> for more about the blessing
(and blessings) of objects.
d583 1
a583 1
Perl pragmata.  Builtin types have all uppercase names, so to prevent
d590 1
d633 8
d649 4
d654 1
d658 1
a658 1
number, and which definitely should I<not> a string of octal digits:
d669 8
d686 1
d732 1
d754 1
d765 4
d792 1
d812 1
d824 1
d866 1
d872 1
d880 1
d882 2
a883 2
Actually a flow control statement rather than a function.  If there is a
C<continue> BLOCK attached to a BLOCK (typically in a C<while> or
d910 1
d923 2
d926 29
a954 18
Encrypts a string exactly like the crypt(3) function in the C library
(assuming that you actually have a version there that has not been
extirpated as a potential munition).  This can prove useful for checking
the password file for lousy passwords, amongst other things.  Only the
guys wearing white hats should do this.

Note that L<crypt|/crypt> is intended to be a one-way function, much like
breaking eggs to make an omelette.  There is no (known) corresponding
decrypt function (in other words, the crypt() is a one-way hash
function).  As a result, this function isn't all that useful for
cryptography.  (For that, see your nearby CPAN mirror.)

When verifying an existing encrypted string you should use the
encrypted text as the salt (like C<crypt($plain, $crypted) eq
$crypted>).  This allows your code to work with the standard L<crypt|/crypt>
and with more exotic implementations.  In other words, do not assume
anything about the returned string itself, or how many bytes in
the encrypted string matter.
d958 4
a961 4
the first eight bytes of the encrypted string mattered, but
alternative hashing schemes (like MD5), higher level security schemes
(like C2), and implementations on non-UNIX platforms may produce
different strings.
d971 1
a971 1
their own password:
d990 1
a990 1
The L<crypt|/crypt> function is unsuitable for encrypting large quantities
d992 1
a992 3
back.  Look at the F<by-module/Crypt> and F<by-module/PGP> directories
on your favorite CPAN mirror for a slew of potentially useful
modules.
d1002 1
d1009 1
d1052 1
d1105 1
a1105 1
matched "nothing".  But it didn't really match nothing--rather, it
d1116 1
d1141 3
a1143 3
element with exists() will return false.  Note that deleting array
elements in the middle of an array will not shift the index of the ones
after them down--use splice() for that.  See L</exists>.
d1181 1
d1227 1
a1227 1
C<$@@>.  ie. as if C<< $@@ = eval { $@@->PROPAGATE(__FILE__, __LINE__) }; >>
d1239 2
d1243 1
a1243 1
        if (ref($@@) && UNIVERSAL::isa($@@,"Some::Module::Exception")) {
d1260 1
a1260 1
L<"eval BLOCK"> for some examples.  Although this feature was meant
d1273 1
d1276 4
a1279 3
sequence of commands indicated by BLOCK.  When modified by a loop
modifier, executes the BLOCK once before testing the loop condition.
(On other statements the loop modifiers test the conditional first.)
d1286 1
d1288 1
a1288 1
A deprecated form of subroutine call.  See L<perlsub>.
d1291 1
d1294 1
a1294 2
file as a Perl script.  Its primary use is to include subroutines
from a Perl subroutine library.
d1303 1
a1303 1
filename for error messages, searches the @@INC libraries, and updates
d1335 1
d1368 1
d1408 3
d1461 1
d1465 2
d1472 1
a1472 1
afterwards.  Note that the value is parsed every time the eval executes.
d1477 1
a1477 1
same time the code surrounding the eval itself was parsed--and executed
d1489 3
a1491 2
in void, scalar, or list context, depending on the context of the eval itself.
See L</wantarray> for more on how the evaluation context can be determined.
d1524 3
a1526 3
Due to the current arguably broken state of C<__DIE__> hooks, when using
the C<eval{}> form as an exception trap in libraries, you may wish not
to trigger any C<__DIE__> hooks that user code may have installed.
d1580 1
d1656 1
d1720 3
d1748 1
d1756 1
d1793 1
d1813 1
d1824 2
a1825 2
fewer guarantees.  This means that files locked with C<flock> may be
modified by programs that do not also use C<flock>.  See L<perlport>,
d1891 1
d1920 1
d1938 1
d1945 2
a1946 2
C<$^A> are written to some filehandle, but you could also read C<$^A>
yourself and then set C<$^A> back to C<"">.  Note that a format typically
d1958 1
d1995 1
d1997 1
a1997 1
Implements the C library function of the same name, which on most
d2007 1
d2018 1
d2028 1
d2040 1
d2047 6
d2164 2
a2165 2
the shadow(3) functions as found in System V ( this includes Solaris
and Linux.)  Those systems which implement a proprietary shadow password
d2206 1
d2220 1
d2235 1
a2235 1
the option is an integer, in which case the result will be an packed
d2240 1
a2240 1
    use Socket;
d2244 3
a2246 3
    # my $tcp = Socket::IPPROTO_TCP; # Alternative
    my $packed = getsockopt($socket, $tcp, Socket::TCP_NODELAY)
	or die "Could not query TCP_NODELAY SOCKEt option: $!";
d2252 1
d2268 1
d2270 3
a2272 1
Converts a time as returned by the time function to an 8-element list
d2276 2
a2277 2
    #  0    1    2     3     4    5     6     7
    ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday) =
d2287 2
a2288 1
the year, in the range C<0..364> (or C<0..365> in leap years.)
d2291 1
a2291 1
the year.  If you assume it is, then you create non-Y2K-compliant
d2316 2
d2319 1
d2357 1
a2357 1
containing a code reference, or a block which evaluates to a code
d2361 1
d2391 1
d2396 1
a2396 1
(To convert strings that might start with either 0, 0x, or 0b, see
d2404 2
a2405 1
unlike oct().
d2407 2
a2408 1
=item import
d2416 1
d2424 3
a2426 1
beginning of the string.  The return value is based at C<0> (or whatever
d2428 1
a2428 1
is not found, returns one less than the base, ordinarily C<-1>.
d2431 1
d2445 1
d2449 1
a2449 1
    require "ioctl.ph";	# probably in /usr/local/lib/perl/ioctl.ph
d2451 1
a2451 1
to get the correct function definitions.  If F<ioctl.ph> doesn't
d2482 1
d2493 1
d2506 3
a2508 3
As a side effect, calling keys() resets the HASH's internal iterator,
see L</each>. (In particular, calling keys() in void context resets
the iterator with no other overhead.)
d2552 1
d2575 1
d2601 1
d2613 1
d2626 1
d2640 1
d2646 1
d2653 1
d2665 3
d2675 1
a2675 1
						localtime(time);
d2678 14
a2691 9
tm'.  $sec, $min, and $hour are the seconds, minutes, and hours of the
specified time.  $mday is the day of the month, and $mon is the month
itself, in the range C<0..11> with 0 indicating January and 11
indicating December.  $year is the number of years since 1900.  That
is, $year is C<123> in year 2023.  $wday is the day of the week, with
0 indicating Sunday and 3 indicating Wednesday.  $yday is the day of
the year, in the range C<0..364> (or C<0..365> in leap years.)  $isdst
is true if the specified time occurs during daylight savings time,
false otherwise.
d2693 1
a2693 3
Note that the $year element is I<not> simply the last two digits of
the year.  If you assume it is, then you create non-Y2K-compliant
programs--and you wouldn't want to do that, would you?
d2695 1
a2695 1
The proper way to get a complete 4-digit year is simply:
d2697 1
a2697 1
	$year += 1900;
d2699 3
a2701 1
And to get the last two digits of the year (e.g., '01' in 2001) do:
d2703 2
a2704 1
	$year = sprintf("%02d", $year % 100);
d2730 2
d2733 1
d2744 1
d2761 1
d2778 1
d2833 1
d2855 1
d2862 1
a2862 1
then ARG must be a variable which will hold the returned C<msqid_ds>
d2868 1
d2875 1
d2887 1
d2898 1
d2918 1
d2945 1
d2956 1
d2981 1
d3068 3
a3070 3
see L<perluniintro>. (Note that if layers are specified in the
three-arg form then default layers set by the C<open> pragma are
ignored.)
d3092 1
a3092 1
As a special case the 3 arg form with a read/write mode and the third
d3103 1
a3103 1
changed this (ie Configure -Uuseperlio), you can open file handles to
d3167 1
a3167 1
See L<perliol/> for detailed info on PerlIO.
d3176 1
a3176 1
of IO buffers.) If you use the 3 arg form then you can pass either a
d3350 1
d3361 1
d3373 1
d3381 18
a3398 9
An C<our> declares the listed variables to be valid globals within
the enclosing block, file, or C<eval>.  That is, it has the same
scoping rules as a "my" declaration, but does not create a local
variable.  If more than one value is listed, the list must be placed
in parentheses.  The C<our> declaration has no semantic effect unless
"use strict vars" is in effect, in which case it lets you use the
declared global variable without qualifying it with a package name.
(But only within the lexical scope of the C<our> declaration.  In this
it differs from "use vars", which is package scoped.)
d3411 1
a3411 1
    print $bar;		# prints 20
d3413 7
a3419 3
Multiple C<our> declarations in the same lexical scope are allowed
if they are in different packages.  If they happened to be in the same
package, Perl will emit warnings if you have asked for them.
d3430 2
a3431 1
    our $bar;		# emits warning
d3468 1
d3543 4
a3546 4
    w	A BER compressed integer.  Its bytes represent an unsigned
	integer in base 128, most significant digit first, with as
        few digits as possible.  Bit eight (the high bit) is set
        on each byte except the last.
d3825 1
a3825 1
assumes additional C<""> arguments.  If TEMPLATE requires less arguments
d3883 1
d3913 1
d3929 1
d3944 1
d3950 1
a3950 1
0 is a valid match offset, while C<undef> indicates that the search position
d3960 1
d3987 3
a3989 2
Note that if you're storing FILEHANDLES in an array or other expression,
you will have to use a block returning its value instead:
d3995 1
d4011 1
d4025 1
d4035 2
a4036 1
but is more efficient.  Returns the new number of elements in the array.
d4051 1
d4065 1
d4088 1
d4118 1
d4134 1
d4170 1
d4180 1
d4192 1
d4212 1
d4219 2
a4220 2
loop.  This command is normally used by programs that want to lie to
themselves about what was just input:
d4251 1
a4277 3
    if (UNIVERSAL::isa($r, "HASH")) {  # for subclassing
	print "r is a reference to something that isa hash.\n";
    }
d4282 1
d4295 1
d4312 1
a4312 1
versions of Perl which do not support this syntax.  The equivalent numeric
d4319 4
a4322 4
Otherwise, demands that a library file be included if it hasn't already
been included.  The file is included via the do-FILE mechanism, which is
essentially just a variety of C<eval>.  Has semantics similar to the
following subroutine:
d4391 1
a4391 1
L<B::Bytecode|B::Bytecode>.  If this file is found, and it's modification
d4430 1
a4430 1
If the hook is an object, it must provide an INC method, that will be
d4452 1
d4476 1
d4492 1
d4515 1
d4521 1
d4525 1
a4525 1
Works just like index() except that it returns the position of the LAST
d4527 1
a4527 1
last occurrence at or before that position.
d4530 1
d4543 1
d4573 1
d4620 1
d4623 2
a4624 2
must be a value returned by C<telldir>.  Has the same caveats about
possible directory compaction as the corresponding system library
d4628 1
d4657 1
d4705 9
d4719 1
d4726 1
a4726 1
GETALL, then ARG must be a variable which will hold the returned
d4735 1
d4743 1
d4748 2
a4749 2
C<pack("s!3", $semnum, $semop, $semflag)>.  The number of semaphore
operations is implied by the length of OPSTRING.  Returns true if
d4761 1
d4782 1
d4792 1
d4799 1
d4802 9
a4810 2
error.  OPTVAL may be specified as C<undef> if you don't want to pass an
argument.
d4813 1
d4830 1
d4837 1
a4837 1
then ARG must be a variable which will hold the returned C<shmid_ds>
d4843 1
d4850 2
d4865 1
d4881 1
d4894 1
d4919 1
d4932 1
d4956 1
d4984 1
a4984 1
compared are always passed by reference, so don't modify them.
d4992 6
d5004 1
a5004 1
a stable mergesort algorithm whose worst case behavior is O(NlogN).
d5008 1
a5008 1
underlying algorithm may not persist into future perls, but the
d5127 1
d5170 1
d5210 13
a5222 8
Using the empty pattern C<//> specifically matches the null string, and is
not be confused with the use of C<//> to mean "the last successful pattern
match".

Empty leading (or trailing) fields are produced when there are positive width
matches at the beginning (or end) of the string; a zero-width match at the
beginning (or end) of the string does not produce an empty field.  For
example:
d5285 1
d5360 1
a5360 1
to take the arguments out of order. Eg:
d5386 5
a5390 5
The vector flag C<v>, optionally specifying the join string to use.
This flag tells perl to interpret the supplied string as a vector
of integers, one for each character in the string, separated by
a given string (a dot C<.> by default). This can be useful for
displaying ordinal values of characters in arbitrary strings:
d5392 1
d5402 1
a5402 1
the join string using eg C<*2$v>:
d5411 1
a5411 1
or from a specified argument (with eg C<*2$>):
d5423 1
d5428 1
a5428 1
the number of decimal places to show (the default being 6), eg:
d5438 1
a5438 1
including prior to the decimal point as well as after it, eg:
d5469 1
a5469 1
eg C<.*2$>:
d5561 1
d5573 1
d5614 2
a5615 2
Note that you need something much more random than the default seed for
cryptographic purposes.  Checksumming the compressed output of one or more
d5635 1
d5735 1
a5735 1
    S_IFREG S_IFDIR S_IFLNK S_IFBLK S_ISCHR S_IFIFO S_IFSOCK S_IFWHT S_ENFMT
d5766 1
d5776 1
a5776 1
which scan for many short constant strings (including the constant
d5826 1
d5844 1
a5880 9
If the lvalue returned by substr is used after the EXPR is changed in
any way, the behaviour may not be as expected and is subject to change.
This caveat includes code such as C<print(substr($foo,$a,$b)=$bar)> or
C<(substr($foo,$a,$b)=$bar)=$fud> (where $foo is changed via the
substring assignment, and then the substr is used again), or where a
substr() is aliased via a C<foreach> loop or passed as a parameter or
a reference to it is taken and then the alias, parameter, or deref'd
reference either is used after the original EXPR has been changed or
is assigned to and then used a second time.
d5883 1
d5893 1
d5928 1
d5947 1
d5961 1
d5970 1
d5975 1
d5991 1
d6023 1
d6038 1
a6038 1
than C<sysread>, for example &gt;&lt or read()) C<print>, C<write>,
d6055 1
d6080 2
a6081 2
C<wait> call.  To get the actual exit value shift right by eight (see below).
See also L</exec>.  This is I<not> what you want to use to capture
d6084 2
a6085 1
indicates a failure to start the program (inspect $! for the reason).
d6121 1
d6150 1
d6175 1
d6179 2
a6180 2
directory.  Has the same caveats about possible directory compaction as
the corresponding system library routine.
d6183 1
d6275 1
d6283 1
d6298 1
d6312 1
d6325 1
d6339 1
d6352 1
d6390 1
d6417 1
d6428 2
a6429 2
Note: C<unlink> will not delete directories unless you are superuser and
the B<-U> flag is supplied to Perl.  Even if these conditions are
d6431 2
a6432 1
filesystem.  Use C<rmdir> instead.
d6437 1
d6494 1
d6500 1
d6513 1
d6540 1
a6540 1
versions of Perl which do not support this syntax.  The equivalent numeric
d6609 1
d6644 1
d6669 1
d6704 1
a6704 1
treated as something which is not UTF-8 encoded.  When the C<vec> was
d6910 1
d6919 1
d6944 1
d6947 1
a6947 1
eval() block is looking for a list value.  Returns false if the context is
d6955 4
d6962 1
d7006 1
@


1.10
log
@merge 5.8.5 into HEAD
remove now-unused files
crank libperl shared library major number
update Makefile.bsd-wrapper
tweak openbsd hints file for arm and m68k
@
text
@d2925 3
a2927 1
File handles can be opened to "in memory" files held in Perl scalars via:
d2990 2
d3750 8
a3757 3
in question (C<$_> is used when the variable is not specified).  May be
modified to change that offset.  Such modification will also influence
the C<\G> zero-width assertion in regular expressions.  See L<perlre> and
d5391 3
a5393 3
(*) The ctime field is non-portable.  In particular, you cannot expect
it to be a "creation time", see L<perlport/"Files and Filesystems">
for details.
d5885 3
a5887 5
Do not use tell() on a filehandle that has been opened using
sysopen(), use sysseek() for that as described above.  Why?  Because
sysopen() creates unbuffered, "raw", filehandles, while open() creates
buffered filehandles.  sysseek() make sense only on the first kind,
tell() only makes sense on the second kind.
d6314 2
a6315 1
Unix touch(1) command when the files I<already exist>.
d6325 2
a6326 1
above.)
@


1.9
log
@merge local changes into perl-5.8.3
@
text
@d664 4
d773 2
a774 2
If the file handle came from a piped open C<close> will additionally
return false if one of the other system calls involved fails or if the
d776 1
a776 1
program exited non-zero C<$!> will be set to C<0>.)  Closing a pipe
d2097 28
a2124 1
Returns the socket option requested, or undef if there is an error.
d2178 7
a2184 16
Also see the C<timegm> function provided by the C<Time::Local> module,
and the strftime(3) function available via the POSIX module.

This scalar value is B<not> locale dependent (see L<perllocale>), but
is instead a Perl builtin.  Also see the C<Time::Local> module, and the
strftime(3) and mktime(3) functions available via the POSIX module.  To
get somewhat similar but locale dependent date strings, set up your
locale environment variables appropriately (please see L<perllocale>)
and try for example:

    use POSIX qw(strftime);
    $now_string = strftime "%a %b %e %H:%M:%S %Y", gmtime;

Note that the C<%a> and C<%b> escapes, which represent the short forms
of the day of the week and the month of the year, may not necessarily
be three characters wide in all locales.
d2551 9
a2559 8
This scalar value is B<not> locale dependent, see L<perllocale>, but
instead a Perl builtin.  Also see the C<Time::Local> module
(to convert the second, minutes, hours, ... back to seconds since the
stroke of midnight the 1st of January 1970, the value returned by
time()), and the strftime(3) and mktime(3) functions available via the
POSIX module.  To get somewhat similar but locale dependent date
strings, set up your locale environment variables appropriately
(please see L<perllocale>) and try for example:
d2563 2
d2956 1
a2956 1
    open(EXTRACT, "|sort >/tmp/Tmp$$")		# $$ is our process id
a3013 3
    close STDOUT;
    close STDERR;

d3264 5
d4278 2
d4468 2
a4469 1
is implementation-dependent.
d4902 3
a4904 2
Splits a string into a list of strings and returns that list.  By default,
empty leading fields are preserved, and empty trailing ones are deleted.
d5364 1
a5364 1
meaning of the fields:
d5382 1
a5382 1
(*) The ctime field is non-portable, in particular you cannot expect
d5386 1
a5386 1
If stat is passed the special filehandle consisting of an underline, no
d5388 1
a5388 1
last stat or filetest are returned.  Example:
d5433 1
a5433 1
The commonly available S_IF* constants are
d5454 1
a5454 1
and the S_IF* functions are
d5463 1
a5463 1
    # The operators -f, -d, -l, -b, -c, -p, and -s.
d5475 2
a5476 4
about the S_* constants.

To get status info for a symbolic link instead of the target file
behind the link, use the C<lstat> function, see L</stat>.
d5662 1
a5662 1
and C<O_RDWR> for opening the file in read-write mode, and.
d5679 9
a5687 4
if the file already exists, sysopen() fails.  The C<O_EXCL> wins
C<O_TRUNC>.

Sometimes you may want to truncate an already-existing file: C<O_TRUNC>.
d5798 4
a5801 3
Because C<system> and backticks block C<SIGINT> and C<SIGQUIT>,
killing the program they're running doesn't actually interrupt
your program.
a5820 1

d5990 4
a5993 3
considers to be the epoch (that's 00:00:00, January 1, 1904 for Mac OS,
and 00:00:00 UTC, January 1, 1970 for most other systems).
Suitable for feeding to C<gmtime> and C<localtime>.
d6630 4
a6633 4
Returns true if the context of the currently executing subroutine is
looking for a list value.  Returns false if the context is looking
for a scalar.  Returns the undefined value if the context is looking
for no value (void context).
@


1.8
log
@Resolve conflicts for perl 5.8.2, remove old files, and add OpenBSD-specific scaffolding
@
text
@d1036 12
a1047 2
Returns each element so deleted or the undefined value if there was no such
element.  Deleting from C<$ENV{}> modifies the environment.  Deleting from
d2341 2
a2342 1
see L</each>.
d5889 1
d6310 2
a6311 1
see L</each>.
@


1.7
log
@Resolve conflicts, remove old files, merge local changes
@
text
@d227 2
a228 2
C<fcntl>, C<flock>, C<fork>, C<getgrent>, C<getgrgid>, C<gethostent>,
C<getlogin>, C<getnetbyaddr>, C<getnetbyname>, C<getnetent>,
d249 1
a249 1
=item I<-X> FILEHANDLE
d251 1
a251 1
=item I<-X> EXPR
d253 1
a253 1
=item I<-X>
d432 2
d458 14
a471 1
C<undef> on failure.
d476 2
a477 2
Note that as desipite what may be implied in I<"Programming Perl">
(the Camel) or elsewhere C<:raw> is I<not> the simply inverse of C<:crlf>
d482 4
a492 13
On some systems (in general, DOS and Windows-based systems) binmode()
is necessary when you're not working with a text file.  For the sake
of portability it is a good idea to always use it when appropriate,
and to never use it when it isn't appropriate.

In other words: regardless of platform, use binmode() on binary files
(like for example images).

If LAYER is present it is a single string, but may contain
multiple directives. The directives alter the behaviour of the
file handle. When LAYER is present using binmode on text
file makes sense.

a494 4
The C<:bytes>, C<:crlf>, and C<:utf8>, and any other directives of the
form C<:...>, are called I/O I<layers>.  The C<open> pragma can be used to
establish default I/O layers.  See L<open>.

d501 3
a503 1
mid-stream, and it doesn't flush the stream.
d731 5
a735 3
chr(0x263a) is a Unicode smiley face.  Note that characters from 127
to 255 (inclusive) are by default not encoded in Unicode for backward
compatibility reasons (but see L<encoding>).
d738 4
a743 2
If NUMBER is omitted, uses C<$_>.

a800 3
DIRHANDLE may be an expression whose value can be used as an indirect
dirhandle, usually the real dirhandle name.

d857 1
a857 1
Note that C<crypt> is intended to be a one-way function, much like
d865 1
a865 1
$crypted>).  This allows your code to work with the standard C<crypt>
d879 4
a882 1
'/', 0..9, 'A'..'Z', 'a'..'z')[rand 64, rand 64]>).
d904 1
a904 1
The C<crypt> function is unsuitable for encrypting large quantities
d985 1
a985 1
declarations of C<&foo>.  Note that a subroutine which is not defined
d1128 1
a1128 1
C<$@@>.  ie. as if C<<$@@ = eval { $@@->PROPAGATE(__FILE__, __LINE__) };>>
d1270 5
a1274 3
order is subject to change in future versions of perl, but it is guaranteed
to be in the same order as either the C<keys> or C<values> function
would produce on the same (unmodified) hash.
d1340 1
a1340 1
	if (eof()) {		# check for end of current file
a1341 2
	    close(ARGV);	# close or last; is needed if we
				# are reading from the terminal
d1344 1
d1461 5
d1650 1
a1650 1
You don't have to check for C<defined> on the return from C<fnctl>.
d1660 12
d1837 5
a1841 5
or the undefined value at end of file, or if there was an error.
If FILEHANDLE is omitted, reads from STDIN.  This is not particularly
efficient.  However, it cannot be used by itself to fetch single
characters without waiting for the user to hit enter.  For that, try
something more like:
d1902 7
d2005 1
a2005 1
    $name  = getgrgid($num;
d2304 1
a2304 1
The special string "C<0> but true" is exempt from B<-w> complaints
a2306 12
Here's an example of setting a filehandle named C<REMOTE> to be
non-blocking at the system level.  You'll have to negotiate C<$|>
on your own, though.

    use Fcntl qw(F_GETFL F_SETFL O_NONBLOCK);

    $flags = fcntl(REMOTE, F_GETFL, 0)
                or die "Can't get flags for the socket: $!\n";

    $flags = fcntl(REMOTE, F_SETFL, $flags | O_NONBLOCK)
                or die "Can't set flags for the socket: $!\n";

d2319 13
a2331 7
Returns a list consisting of all the keys of the named hash.  (In
scalar context, returns the number of keys.)  The keys are returned in
an apparently random order.  The actual random order is subject to
change in future versions of perl, but it is guaranteed to be the same
order as either the C<values> or C<each> function produces (given
that the hash has not been modified).  As a side effect, it resets
HASH's iterator.
d2384 1
a2384 1
useful way to check that the process is alive and hasn't changed
d2392 3
a2394 1
use a signal name in quotes.  See L<perlipc/"Signals"> for details.
d2448 1
a2448 1
Returns the length in characters of the value of EXPR.  If EXPR is
d2453 4
d2566 2
a2567 1
your system, a normal C<stat> is done.
d2784 5
a2788 5
If FILEHANDLE is an undefined lexical (C<my>) variable the variable is
assigned a reference to a new anonymous filehandle, otherwise if
FILEHANDLE is an expression, its value is used as the name of the real
filehandle wanted.  (This is considered a symbolic reference, so C<use
strict 'refs'> should I<not> be in effect.)
d2884 4
a2887 1
opens a filehandle to an anonymous temporary file.
d2953 8
a2960 8
with C<< '>&' >>, in which case the rest of the string is interpreted as the
name of a filehandle (or file descriptor, if numeric) to be
duped and opened.  You may use C<&> after C<< > >>, C<<< >> >>>,
C<< < >>, C<< +> >>, C<<< +>> >>>, and C<< +< >>.  The
mode you specify should match the mode of the original filehandle.
(Duping a filehandle does not take into account any existing contents of
IO buffers.) If you use the 3 arg form then you can pass either a number,
the name of a filehandle or the normal "reference to a glob".
d2987 4
a2990 3
If you specify C<< '<&=N' >>, where C<N> is a number, then Perl will
do an equivalent of C's C<fdopen> of that file descriptor; this is
more parsimonious of file descriptors.  For example:
d2992 1
d2999 22
a3020 4
Note that if Perl is using the standard C libraries' fdopen() then on
many UNIX systems, fdopen() is known to fail when file descriptors
exceed a certain value, typically 255. If you need more file
descriptors than that, consider rebuilding Perl to use the C<PerlIO>.
d3139 4
d3313 2
a3314 1
    @@	Null fill to absolute position.
d3432 5
a3436 3
The I<string-item> must, at present, be C<"A*">, C<"a*"> or C<"Z*">.
For C<unpack> the length of the string is obtained from the I<length-item>,
but if you put in the '*' it will be ignored.
d3474 1
a3474 1
(The C<$Config{longlongsize}> will be undefine if your system does
d3539 7
a3545 6
If the pattern begins with a C<U>, the resulting string will be treated
as Unicode-encoded. You can force UTF8 encoding on in a string with an
initial C<U0>, and the bytes that follow will be interpreted as Unicode
characters. If you don't want this to happen, you can begin your pattern
with C<C0> (or anything else) to force Perl not to UTF8 encode your
string, and then follow this with a C<U*> somewhere in your pattern.
d3558 8
a3565 2
take a repeat count, both as postfix, and via the C</> template
character.
d3582 2
d3839 14
a3852 7
actually read, C<0> at end of file, or undef if there was an error.
SCALAR will be grown or shrunk to the length actually read.  If SCALAR
needs growing, the new bytes will be zero bytes.  An OFFSET may be
specified to place the read data into some other place in SCALAR than
the beginning.  The call is actually implemented in terms of either
Perl's or system's fread() call.  To get a true read(2) system call,
see C<sysread>.
d3858 3
a3860 1
pragma, L<open>), the I/O will operate on characters, not bytes.
d3897 15
d3947 3
a3949 1
pragma, L<open>), the I/O will operate on characters, not bytes.
d3993 2
a3994 1
Returns a true value if EXPR is a reference, false otherwise.  If EXPR
d4060 2
a4061 2
essentially just a variety of C<eval>.  Has semantics similar to the following
subroutine:
d4064 26
a4089 18
	my($filename) = @@_;
	return 1 if $INC{$filename};
	my($realfilename,$result);
	ITER: {
	    foreach $prefix (@@INC) {
		$realfilename = "$prefix/$filename";
		if (-f $realfilename) {
		    $INC{$filename} = $realfilename;
		    $result = do $realfilename;
		    last ITER;
		}
	    }
	    die "Can't find $filename in \@@INC";
	}
	delete $INC{$filename} if $@@ || !$result;
	die $@@ if $@@;
	die "$filename did not return true value" unless $result;
	return $result;
d4093 3
a4095 1
name.  The file must return true as the last statement to indicate
d4125 9
d4265 3
a4267 3
Deletes the directory specified by FILENAME if that directory is empty.  If it
succeeds it returns true, otherwise it returns false and sets C<$!> (errno).  If
FILENAME is omitted, uses C<$_>.
d4488 4
a4491 3
binmode() to operate with the C<:utf8> I/O layer (see L</open>, or
the C<open> pragma, L<open>), the I/O will operate on characters, not
bytes.
d4695 1
a4695 1
independent ways quite probably will.  See L</use>.
d4802 9
d4832 1
a4832 1
The following equivalences hold (assuming C<$[ == 0>):
d4838 1
a4838 1
    $a[$x] = $y		splice(@@a,$x,1,$y)
d4909 2
a4910 2
When assigning to a list, if LIMIT is omitted, Perl supplies a LIMIT
one larger than the number of variables in the list, to avoid
d4934 3
a4936 3
As a special case, specifying a PATTERN of space (C<' '>) will split on
white space just as C<split> with no arguments does.  Thus, C<split(' ')> can
be used to emulate B<awk>'s default behavior, whereas C<split(/ /)>
d4938 1
a4938 1
A C<split> on C</\s+/> is like a C<split(' ')> except that any leading
d4940 1
a4940 1
really does a C<split(' ', $_)> internally.
d5101 2
a5102 2
For floating point formats, this specifies the number of decimal places
to show (the default being 6), eg:
d5111 12
d5150 5
a5154 5
number as using C<l>, C<h>, C<V>, C<q>, C<L> or C<ll>. For integer
conversions, numbers are usually assumed to be whatever the default
integer size is on your platform (usually 32 or 64 bits), but you
can override this to use instead one of the standard C types, as
supported by the compiler used to build Perl:
d5158 17
a5174 2
   q, L or ll  interpret integer as C type "long long" or "unsigned long long"
               (if your platform supports such a type, else it is an error)
d5176 11
a5186 4
For floating point conversions, numbers are usually assumed to be
the default floating point size on your platform (double or long double),
but you can force 'long double' with C<q>, C<L> or C<ll> if your
platform supports them.
d5188 5
a5192 1
The size specifier 'V' has no effect for Perl code, but it supported
a5233 38
If Perl understands "quads" (64-bit integers) (this requires
either that the platform natively support quads or that Perl
be specifically compiled to support quads), the characters

	d u o x X b i D U O

print quads, and they may optionally be preceded by

	ll L q

For example

	%lld %16LX %qo

You can find out whether your Perl supports quads via L<Config>:

	use Config;
	($Config{use64bitint} eq 'define' || $Config{longsize} == 8) &&
		print "quads\n";

If Perl understands "long doubles" (this requires that the platform
support long doubles), the flags

	e f g E F G

may optionally be preceded by

	ll L

For example

	%llf %Lg

You can find out whether your Perl supports long doubles via L<Config>:

	use Config;
	$Config{d_longdbl} eq 'define' && print "long doubles\n";

d5385 1
a5385 1
    printf "Permissions are %04o\n", S_ISMODE($mode), "\n";
d5399 2
a5400 1
    # Setuid/Setgid/Stickiness.
d5414 1
a5414 1
    S_IFMODE($mode)	the part of $mode containing the permission bits
d5435 3
d5551 10
d5570 1
a5570 1
=item syscall LIST
d5661 2
a5662 2
Attempts to read LENGTH I<characters> of data into variable SCALAR from
the specified FILEHANDLE, using the system call read(2).  It bypasses
d5664 6
a5669 11
C<write>, C<seek>, C<tell>, or C<eof> can cause confusion because
stdio usually buffers data.  Returns the number of characters actually
read, C<0> at end of file, or undef if there was an error.  SCALAR
will be grown or shrunk so that the last byte actually read is the
last byte of the scalar after the read.

Note the I<characters>: depending on the status of the filehandle,
either (8-bit) bytes or characters are read.  By default all
filehandles operate on bytes, but for example if the filehandle has
been opened with the C<:utf8> I/O layer (see L</open>, and the C<open>
pragma, L<open>), the I/O will operate on characters, not bytes.
d5682 6
d5690 1
a5690 1
Sets FILEHANDLE's system position I<in bytes> using the system call
d5702 1
a5702 1
sysseek() bypasses normal buffered io, so mixing this with reads (other
d5711 1
a5711 1
	use Fnctl 'SEEK_CUR';
d5764 11
a5774 3
    $exit_value  = $? >> 8;
    $signal_num  = $? & 127;
    $dumped_core = $? & 128;
d5789 3
a5791 3
Attempts to write LENGTH characters of data from variable SCALAR to
the specified FILEHANDLE, using the system call write(2).  If LENGTH
is not specified, writes whole SCALAR.  It bypasses buffered IO, so
d5793 4
a5796 3
C<seek>, C<tell>, or C<eof> may cause confusion because stdio usually
buffers data.  Returns the number of characters actually written, or
C<undef> if there was an error.  If the LENGTH is greater than the
d5805 5
a5809 5
Note the I<characters>: depending on the status of the filehandle,
either (8-bit) bytes or characters are written.  By default all
filehandles operate on bytes, but for example if the filehandle has
been opened with the C<:utf8> I/O layer (see L</open>, and the open
pragma, L<open>), the I/O will operate on characters, not bytes.
d5949 4
a5952 3
you may use either the Time::HiRes module from CPAN, or
if you have gettimeofday(2), you may be able to use the
C<syscall> interface of Perl, see L<perlfaq8> for details.
d6047 1
a6047 1
(using C<&>), or a typeglob (using <*>).  (Saying C<undef $hash{$key}>
d6132 6
a6137 3
If the repeat count of a field is larger than what the remainder of
the input string allows, repeat count is decreased.  If the input string
is longer than one described by the TEMPLATE, the rest is ignored.
d6259 2
a6260 2
to the current time.  This code has the same effect as the C<touch>
command if the files already exist:
d6263 2
a6264 2
    $now = time;
    utime $now, $now, @@ARGV;
d6266 5
a6270 4
If the first two elements of the list are C<undef>, then the utime(2)
function in the C library will be called with a null second argument.
On most systems, this will set the file's access and modification
times to the current time.  (i.e. equivalent to the example above.)
d6274 11
d6287 12
a6298 6
Returns a list consisting of all the values of the named hash.  (In a
scalar context, returns the number of values.)  The values are
returned in an apparently random order.  The actual random order is
subject to change in future versions of perl, but it is guaranteed to
be the same order as either the C<keys> or C<each> function would
produce on the same (unmodified) hash.
a6305 1
As a side effect, calling values() resets the HASH's internal iterator.
d6342 2
a6343 2
can only happen if you're using UTF8 encoding).  If it does, it will be
treated as something which is not UTF8 encoded.  When the C<vec> was
d6345 1
a6345 1
string to be UTF8 encoded.  In other words, if you do have such characters
@


1.6
log
@fix two incorrect L<> calls; ok millert@@
@
text
@d72 1
a72 1
An named array in scalar context is quite different from what would at
d139 2
a140 2
C<readlink>, C<rename>, C<rmdir>, C<stat>, C<symlink>, C<umask>,
C<unlink>, C<utime>
d203 1
a203 1
C<import>, C<lc>, C<lcfirst>, C<map>, C<my>, C<no>, C<our>, C<prototype>, 
d237 3
a239 2
C<shmwrite>, C<socket>, C<socketpair>, C<stat>, C<symlink>, C<syscall>,
C<sysopen>, C<system>, C<times>, C<truncate>, C<umask>, C<unlink>,
d294 1
a294 1
    -T	File is an ASCII text file.
d297 1
a297 1
    -M	Age of file in days when script started.
d299 1
a299 1
    -C	Same for inode change time.
d342 1
a342 1
or C<-B> is used on a filehandle, the current stdio buffer is examined
d353 3
a355 1
symbolic link, not the real file.)  Example:
d391 10
a400 8
specified number of seconds have elapsed.  If SECONDS is not specified,
the value stored in C<$_> is used. (On some machines,
unfortunately, the elapsed time may be up to one second less than you
specified because of how seconds are counted.)  Only one timer may be
counting at once.  Each call disables the previous timer, and an
argument of C<0> may be supplied to cancel the previous timer without
starting a new one.  The returned value is the amount of time remaining
on the previous timer.
d405 3
a407 2
access setitimer(2) if your system supports it.  The Time::HiRes module
from CPAN may also prove useful.
d448 1
a448 1
=item binmode FILEHANDLE, DISCIPLINE
d452 48
a499 21
Arranges for FILEHANDLE to be read or written in "binary" or "text" mode
on systems where the run-time libraries distinguish between binary and
text files.  If FILEHANDLE is an expression, the value is taken as the
name of the filehandle.  DISCIPLINE can be either of C<":raw"> for
binary mode or C<":crlf"> for "text" mode.  If the DISCIPLINE is
omitted, it defaults to C<":raw">.

binmode() should be called after open() but before any I/O is done on
the filehandle.

On many systems binmode() currently has no effect, but in future, it
will be extended to support user-defined input and output disciplines.
On some systems binmode() is necessary when you're not working with a
text file.  For the sake of portability it is a good idea to always use
it when appropriate, and to never use it when it isn't appropriate.

In other words:  Regardless of platform, use binmode() on binary
files, and do not use binmode() on text files.

The C<open> pragma can be used to establish default disciplines.
See L<open>.
d509 10
a518 11
Mac OS and all variants of Unix use a single character to end each line
in the external representation of text (even though that single
character is not necessarily the same across these platforms).
Consequently binmode() has no effect on these operating systems.  In
other systems like VMS, MS-DOS and the various flavors of MS-Windows
your program sees a C<\n> as a simple C<\cJ>, but what's stored in text
files are the two characters C<\cM\cJ>.  That means that, if you don't
use binmode() on these systems, C<\cM\cJ> sequences on disk will be
converted to C<\n> on input, and any C<\n> in your program will be
converted back to C<\cM\cJ> on output.  This is what you want for text
files, but it can be disastrous for binary files.
d576 7
a582 5
each C<use> statement creates a C<require> frame inside an C<eval EXPR>)
frame.  C<$hasargs> is true if a new instance of C<@@_> was set up for the
frame.  C<$hints> and C<$bitmask> contain pragmatic hints that the caller
was compiled with.  The C<$hints> and C<$bitmask> values are subject to
change between versions of Perl, and are not meant for external use.
d591 1
a591 1
C<< N > 1 >>.  In particular, C<@@DB::args> might have information from the 
d596 1
a596 1
Changes the working directory to EXPR, if possible.  If EXPR is omitted,
d598 4
a601 3
changes to the directory specified by C<$ENV{LOGDIR}>.  If neither is
set, C<chdir> does nothing.  It returns true upon success, false
otherwise.  See the example under C<die>.
d628 1
a628 1
=item chomp LIST
d641 1
a641 1
remove anything.  
d660 7
d669 1
a669 1
=item chop LIST
d686 2
d727 6
a732 3
chr(0x263a) is a Unicode smiley face (but only within the scope of
a C<use utf8>).  For the reverse, use L</ord>.  
See L<utf8> for more about Unicode.
d751 4
a754 4
Closes the file or pipe associated with the file handle, returning true
only if stdio successfully flushes buffers and closes the system file
descriptor.  Closes the currently selected filehandle if the argument
is omitted.
d764 1
a764 1
program exited non-zero C<$!> will be set to C<0>.)  Closing a pipe 
d766 1
a766 1
want to look at the output of the pipe afterwards, and 
d852 4
a855 3
Note that C<crypt> is intended to be a one-way function, much like breaking
eggs to make an omelette.  There is no (known) corresponding decrypt
function.  As a result, this function isn't all that useful for
d858 17
a874 6
When verifying an existing encrypted string you should use the encrypted
text as the salt (like C<crypt($plain, $crypted) eq $crypted>).  This
allows your code to work with the standard C<crypt> and with more
exotic implementations.  When choosing a new salt create a random two
character string whose characters come from the set C<[./0-9A-Za-z]>
(like C<join '', ('.', '/', 0..9, 'A'..'Z', 'a'..'z')[rand 64, rand 64]>).
d902 7
d1025 1
a1025 1
the size of the array will shrink to the highest element that tests 
d1089 10
a1098 10
If the value of EXPR does not end in a newline, the current script line
number and input line number (if any) are also printed, and a newline
is supplied.  Note that the "input line number" (also known as "chunk")
is subject to whatever notion of "line" happens to be currently in
effect, and is also available as the special variable C<$.>.
See L<perlvar/"$/"> and L<perlvar/"$.">.

Hint: sometimes appending C<", stopped"> to your message
will cause it to make better sense when the string C<"at foo line 123"> is
appended.  Suppose you are running script "canasta".
d1117 6
d1161 1
a1161 1
behavior may be fixed in a future release.  
d1188 1
a1188 1
    scalar eval `cat stat.pl`;
d1211 1
a1211 1
    # read in config files: system first, then user 
d1213 1
a1213 1
               "$ENV{HOME}/.someprogrc") 
d1238 1
a1238 1
resulting confusion on the part of Perl.  
d1243 3
a1245 1
C code have superseded it.
d1250 1
a1250 1
C<mod_perl> extension to B<Apache>, or the CPAN module, Fast::CGI.
d1252 1
a1252 1
make your program I<appear> to run faster.  
d1311 4
a1314 1
available.
d1322 1
a1322 1
	next if /^\s*#/;	# skip comments 
d1376 3
a1378 2
To do either of those, you have to use the C<$SIG{__WARN__}> facility.  See
L</warn> and L<perlvar>.
d1477 1
a1477 1
words and passed directly to C<execvp>, which is more efficient.  
d1619 1
a1619 1
Returns I<e> (the natural logarithm base) to the power of EXPR.  
d1629 1
a1629 1
value return works just like C<ioctl> below.  
d1654 1
a1654 1
You can use this to find out whether two handles refer to the 
d1659 5
a1663 1
    } 
d1703 4
d2031 2
a2032 2
Even though it looks like they're the same method calls (uid), 
they aren't, because a C<File::stat> object is different from 
d2044 1
a2044 1
    printf "Connect to %s [%s]\n", 
d2056 7
a2062 5
Returns the value of EXPR with filename expansions such as the
standard Unix shell F</bin/csh> would do.  This is the internal function
implementing the C<< <*.c> >> operator, but you can use it directly.
If EXPR is omitted, C<$_> is used.  The C<< <*.c> >> operator is
discussed in more detail in L<perlop/"I/O Operators">.
d2069 1
a2069 1
Converts a time as returned by the time function to a 8-element list
d2073 1
a2073 1
    #  0    1    2     3     4    5     6     7  
d2084 1
a2084 1
the year, in the range C<0..364> (or C<0..365> in leap years.)  
d2136 3
d2146 8
a2153 7
The C<goto-&NAME> form is quite different from the other forms of C<goto>.
In fact, it isn't a goto in the normal sense at all, and doesn't have
the stigma associated with other gotos.  Instead, it
substitutes a call to the named subroutine for the currently running
subroutine.  This is used by C<AUTOLOAD> subroutines that wish to load
another subroutine and then pretend that the other subroutine had been
called in the first place (except that any modifications to C<@@_>
d2203 2
a2204 1
integer overflow trigger a warning.
d2255 1
a2255 1
C<ioctl>.  
d2310 1
a2310 1
    while (@@keys) { 
d2396 4
a2399 4
Returns an lowercased version of EXPR.  This is the internal function
implementing the C<\L> escape in double-quoted strings.
Respects current LC_CTYPE locale if C<use locale> in force.  See L<perllocale>
and L<utf8>.
d2407 5
a2411 3
Returns the value of EXPR with the first character lowercased.  This is
the internal function implementing the C<\l> escape in double-quoted strings.
Respects current LC_CTYPE locale if C<use locale> in force.  See L<perllocale>.
d2420 1
a2420 1
omitted, returns length of C<$_>.  Note that this cannot be used on 
d2427 1
a2427 1
success, false otherwise. 
d2432 1
a2432 1
it succeeded, false otherwise.  See the example in 
d2438 1
a2438 1
what most people think of as "local".  See 
d2500 1
a2500 1
=item lock
d2502 2
a2503 1
    lock I<THING>
d2505 4
a2508 6
This function places an advisory lock on a variable, subroutine,
or referenced object contained in I<THING> until the lock goes out
of scope.  This is a built-in function only if your version of Perl
was built with threading enabled, and if you've said C<use Threads>.
Otherwise a user-defined function by this name will be called.  See
L<Thread>.
d2522 1
a2522 1
    } 
a2525 2
=item lstat FILEHANDLE

d2611 5
d2657 5
a2661 1
=item my EXPR : ATTRIBUTES
d2664 9
a2672 3
enclosing block, file, or C<eval>.  If
more than one value is listed, the list must be placed in parentheses.  See
L<perlsub/"Private Variables via my()"> for details.
d2700 4
d2706 2
d2717 3
a2719 2
binary string.)  The following will handle decimal, binary, octal, and
hex in the standard Perl or C notation:
d2734 1
a2734 1
=item open FILEHANDLE,MODE,LIST
d2736 5
a2740 1
=item open FILEHANDLE,EXPR
d2745 4
a2748 22
FILEHANDLE.  If FILEHANDLE is an expression, its value is used as the
name of the real filehandle wanted.  (This is considered a symbolic
reference, so C<use strict 'refs'> should I<not> be in effect.)

If EXPR is omitted, the scalar
variable of the same name as the FILEHANDLE contains the filename.
(Note that lexical variables--those declared with C<my>--will not work
for this purpose; so if you're using C<my>, specify EXPR in your call
to open.)  See L<perlopentut> for a kinder, gentler explanation of opening
files.

If MODE is C<< '<' >> or nothing, the file is opened for input.
If MODE is C<< '>' >>, the file is truncated and opened for
output, being created if necessary.  If MODE is C<<< '>>' >>>,
the file is opened for appending, again being created if necessary. 
You can put a C<'+'> in front of the C<< '>' >> or C<< '<' >> to indicate that
you want both read and write access to the file; thus C<< '+<' >> is almost
always preferred for read/write updates--the C<< '+>' >> mode would clobber the
file first.  You can't usually use either read-write mode for updating
textfiles, since they have variable length records.  See the B<-i>
switch in L<perlrun> for a better approach.  The file is created with
permissions of C<0666> modified by the process' C<umask> value.
d2750 28
a2777 2
These various prefixes correspond to the fopen(3) modes of C<'r'>, C<'r+'>,
C<'w'>, C<'w+'>, C<'a'>, and C<'a+'>.
d2781 2
a2782 1
spaces.  It is possible to omit the mode if the mode is C<< '<' >>.
d2793 16
a2808 8
If MODE is C<'|-'>, the filename is interpreted as a
command to which output is to be piped, and if MODE is
C<'-|'>, the filename is interpreted as a command which pipes output to
us.  In the 2-arguments (and 1-argument) form one should replace dash
(C<'-'>) with the command.  See L<perlipc/"Using open() for IPC">
for more examples of this.  (You are not allowed to C<open> to a command
that pipes both in I<and> out, but see L<IPC::Open2>, L<IPC::Open3>,
and L<perlipc/"Bidirectional Communication"> for alternatives.)
d2811 1
a2811 1
and opening C<< '>-' >> opens STDOUT.  
d2813 23
a2835 12
Open returns
nonzero upon success, the undefined value otherwise.  If the C<open>
involved a pipe, the return value happens to be the pid of the
subprocess.

If you're unfortunate enough to be running Perl on a system that
distinguishes between text files and binary files (modern operating
systems don't care), then you should check out L</binmode> for tips for
dealing with this.  The key distinction between systems that need C<binmode>
and those that don't is their text file formats.  Systems like Unix, MacOS, and
Plan9, which delimit lines with a single character, and which encode that
character in C as C<"\n">, do not need C<binmode>.  The rest need it.
d2845 17
d2886 5
d2922 2
a2923 2
stdio buffers.)  Duping file handles is not yet supported for 3-argument
open().
d2925 2
a2926 2
Here is a script that saves, redirects, and restores STDOUT and
STDERR:
d2929 2
a2930 2
    open(OLDOUT, ">&STDOUT");
    open(OLDERR, ">&STDERR");
d2932 2
a2933 2
    open(STDOUT, '>', "foo.out") || die "Can't redirect stdout";
    open(STDERR, ">&STDOUT")     || die "Can't dup stdout";
d2935 2
a2936 2
    select(STDERR); $| = 1;	# make unbuffered
    select(STDOUT); $| = 1;	# make unbuffered
d2941 2
a2942 2
    close(STDOUT);
    close(STDERR);
d2944 2
a2945 2
    open(STDOUT, ">&OLDOUT");
    open(STDERR, ">&OLDERR");
d2950 3
a2952 3
If you specify C<< '<&=N' >>, where C<N> is a number, then Perl will do an
equivalent of C's C<fdopen> of that file descriptor; this is more
parsimonious of file descriptors.  For example:
d2956 6
a2961 2
Note that this feature depends on the fdopen() C library function.
On many UNIX systems, fdopen() is known to fail when file descriptors
d2963 5
a2967 2
descriptors than that, consider rebuilding Perl to use the C<sfio>
library.
d2986 1
d2991 6
d3006 3
a3008 3
On systems that support a
close-on-exec flag on files, the flag will be set for the newly opened
file descriptor as determined by the value of $^F.  See L<perlvar/$^F>.
d3013 3
a3015 4
The filename passed to 2-argument (or 1-argument) form of open()
will have leading and trailing
whitespace deleted, and the normal redirection characters
honored.  This property, known as "magic open", 
d3088 6
a3093 3
Returns the numeric (ASCII or Unicode) value of the first character of EXPR.  If
EXPR is omitted, uses C<$_>.  For the reverse, see L</chr>.
See L<utf8> for more about Unicode.
d3097 6
d3141 29
d3178 2
a3179 3
The TEMPLATE is a
sequence of characters that give the order and type of values, as
follows:
d3182 2
a3183 2
    A	An ASCII string, will be space padded.
    Z	A null terminated (asciz) string, will be null padded.
d3225 3
d3231 7
d3242 2
a3243 2
    U	A Unicode character number.  Encodes to UTF-8 internally.
	Works even if C<use utf8> is not in effect.
d3253 1
d3263 14
a3276 5
C<H>, and C<P> the pack function will gobble up that many values from
the LIST.  A C<*> for the repeat count means to use however many items are
left, except for C<@@>, C<x>, C<X>, where it is equivalent
to C<0>, and C<u>, where it is equivalent to 1 (or 45, what is the
same).
d3365 4
a3368 5
The I<length-item> can be any C<pack> template letter,
and describes how the length value is packed.
The ones likely to be of most use are integer-packing ones like
C<n> (for Java strings), C<w> (for ASN.1 or SNMP)
and C<N> (for Sun XDR).
d3411 1
a3411 1
not support long longs.) 
d3415 1
a3415 1
The integer formats C<s>, C<S>, C<i>, C<I>, C<l>, and C<L>
d3418 1
a3418 1
4-byte integer 0x12345678 (305419896 decimal) be ordered natively
d3427 2
a3428 1
used/uses them in little-endian mode; SGI/Cray uses them in big-endian mode.
d3455 1
a3455 1
C<v>, and C<V>, their byte endianness and size is known.
d3492 18
d3574 1
a3574 1
=item package 
d3593 4
a3596 2
identifiers must be fully qualified or lexicals.  This is stricter
than C<use strict>, since it also extends to function names.
d3606 1
a3606 1
stdio buffering, so you may need to set C<$|> to flush your WRITEHANDLE
d3679 4
a3682 3
of the list will be interpreted as the C<printf> format.  If C<use locale> is
in effect, the character used for the decimal point in formatted real numbers
is affected by the LC_NUMERIC locale.  See L<perllocale>.
d3744 11
a3754 2
omitted, the value C<1> is used.  Automatically calls C<srand> unless
C<srand> has already been called.  See also C<srand>.
d3764 15
a3778 8
Attempts to read LENGTH bytes of data into variable SCALAR from the
specified FILEHANDLE.  Returns the number of bytes actually read, C<0>
at end of file, or undef if there was an error.  SCALAR will be grown
or shrunk to the length actually read.  If SCALAR needs growing, the
new bytes will be zero bytes.  An OFFSET may be specified to place
the read data into some other place in SCALAR than the beginning.
The call is actually implemented in terms of stdio's fread(3) call.
To get a true read(2) system call, see C<sysread>.
d3837 14
a3850 8
Receives a message on a socket.  Attempts to receive LENGTH bytes of
data into variable SCALAR from the specified SOCKET filehandle.  SCALAR
will be grown or shrunk to the length actually read.  Takes the same
flags as the system call of the same name.  Returns the address of the
sender if SOCKET's protocol supports this; returns an empty string
otherwise.  If there's an error, returns the undefined value.  This call
is actually implemented in terms of recvfrom(2) system call.  See
L<perlipc/"UDP: Message Passing"> for examples.
d3918 1
a3918 1
    } 
d3940 2
a3941 2
Demands some semantics specified by EXPR, or by C<$_> if EXPR is not
supplied.
d3943 10
a3952 6
If a VERSION is specified as a literal of the form v5.6.1,
demands that the current version of Perl (C<$^V> or $PERL_VERSION) be
at least as recent as that version, at run time.  (For compatibility
with older versions of Perl, a numeric argument will also be interpreted
as VERSION.)  Compare with L</use>, which can do a similar check at
compile time.
d3956 1
a3956 1
    require 5.005_03;	# float version allowed for compatibility
d3998 1
a3998 1
        require Foo::Bar;    # a splendid bareword 
d4000 1
a4000 1
The require function will actually look for the "F<Foo/Bar.pm>" file in the 
d4010 1
a4010 1
The require function will look for the "F<Foo::Bar>" file in the @@INC array and 
d4015 54
d4098 1
a4098 1
Returns from a subroutine, C<eval>, or C<do FILE> with the value 
d4105 1
a4105 1
(Note that in the absence of a explicit C<return>, a subroutine, eval,
d4187 12
a4198 6
filehandle.  The values for WHENCE are C<0> to set the new position to
POSITION, C<1> to set it to the current position plus POSITION, and
C<2> to set it to EOF plus POSITION (typically negative).  For WHENCE
you may use the constants C<SEEK_SET>, C<SEEK_CUR>, and C<SEEK_END>
(start of the file, current position, end of the file) from the Fcntl
module.  Returns C<1> upon success, C<0> otherwise.
d4217 2
a4218 2
If that doesn't work (some stdios are particularly cantankerous), then
you may need something more like this:
d4301 1
a4301 1
capable of returning the$timeleft.  If not, they always return
d4308 3
d4340 1
a4340 1
such as signaling and waiting.  OPSTRING must be a packed array of
d4342 1
a4342 1
C<pack("sss", $semnum, $semop, $semflag)>.  The number of semaphore
d4347 1
a4347 1
    $semop = pack("sss", $semnum, -1, 0);
d4358 14
a4371 6
Sends a message on a socket.  Takes the same flags as the system call
of the same name.  On unconnected sockets you must specify a
destination to send TO, in which case it does a C C<sendto>.  Returns
the number of characters sent, or the undefined value if there is an
error.  The C system call sendmsg(2) is currently unimplemented.
See L<perlipc/"UDP: Message Passing"> for examples.
d4452 1
a4452 1
It's also a more insistent form of close because it also 
d4486 3
a4488 2
it, or else see L</select> above.  The Time::HiRes module from CPAN
may also help.
d4523 3
a4525 1
See L<perlipc> for an example of socketpair use.
d4533 12
a4544 10
Sorts the LIST and returns the sorted list value.  If SUBNAME or BLOCK
is omitted, C<sort>s in standard string comparison order.  If SUBNAME is
specified, it gives the name of a subroutine that returns an integer
less than, equal to, or greater than C<0>, depending on how the elements
of the list are to be ordered.  (The C<< <=> >> and C<cmp>
operators are extremely useful in such routines.)  SUBNAME may be a
scalar variable name (unsubscripted), in which case the value provides
the name of (or a reference to) the actual subroutine to use.  In place
of a SUBNAME, you can provide a BLOCK as an anonymous, in-line sort
subroutine.
d4563 14
d4658 8
d4697 5
a4701 2
If LENGTH is negative, leaves that many elements off the end of the array.
If both OFFSET and LENGTH are omitted, removes everything.
d4744 9
a4752 5
If LIMIT is specified and positive, splits into no more than that
many fields (though it may split into fewer).  If LIMIT is unspecified
or zero, trailing null fields are stripped (which potential users
of C<pop> would do well to remember).  If LIMIT is negative, it is
treated as if an arbitrarily large LIMIT had been specified.
d4763 5
a4767 1
Empty leading (or trailing) fields are produced when there positive width
d4826 5
d4880 1
a4880 1
        into the next variable in the parameter list 
d4891 2
a4892 2
Note that the number of exponent digits in the scientific notation by
C<%e>, C<%E>, C<%g> and C<%G> for numbers with the modulus of the
d4897 3
a4899 2
Perl permits the following universally-known flags between the C<%>
and the conversion letter:
d4901 14
d4919 46
a4964 20
   #       prefix non-zero octal with "0", non-zero hex with "0x"
   number  minimum field width
   .number "precision": digits after decimal point for
           floating-point, max length for string, minimum length
           for integer
   l       interpret integer as C type "long" or "unsigned long"
   h       interpret integer as C type "short" or "unsigned short"
           If no flags, interpret integer as C type "int" or "unsigned"

There are also two Perl-specific flags:

   V       interpret integer as Perl's standard integer type
   v       interpret string as a vector of integers, output as
           numbers separated either by dots, or by an arbitrary
	   string received from the argument list when the flag
	   is preceded by C<*>

Where a number would appear in the flags, an asterisk (C<*>) may be
used instead, in which case Perl uses the next item in the parameter
list as the given number (that is, as the field width or precision).
d4968 31
a4998 2
The C<v> flag is useful for displaying ordinal values of characters
in arbitrary strings:
d5000 62
a5061 3
    printf "version is v%vd\n", $^V;		# Perl's version
    printf "address is %*vX\n", ":", $addr;	# IPv6 address
    printf "bits are %*vb\n", " ", $bits;	# random bitstring
d5120 36
a5155 13
Sets the random number seed for the C<rand> operator.  If EXPR is
omitted, uses a semi-random value supplied by the kernel (if it supports
the F</dev/urandom> device) or based on the current time and process
ID, among other things.  In versions of Perl prior to 5.004 the default
seed was just the current C<time>.  This isn't a particularly good seed,
so many old programs supply their own seed value (often C<time ^ $$> or
C<time ^ ($$ + ($$ << 15))>), but that isn't necessary any more.

In fact, it's usually not necessary to call C<srand> at all, because if
it is not called explicitly, it is called implicitly at the first use of
the C<rand> operator.  However, this was not the case in version of Perl
before 5.004, so if your script will run under older Perl versions, it
should call C<srand>.
a5166 6
Do I<not> call C<srand> multiple times in your program unless you know
exactly what you're doing and why you're doing it.  The point of the
function is to "seed" the C<rand> function so that C<rand> can produce
a different sequence each time you run your program.  Just do it once at the
top of your program, or you I<won't> get random numbers out of C<rand>!

d5205 1
a5205 1
 10 ctime    inode change time (NOT creation time!) in seconds since the epoch
d5211 4
d5227 1
a5227 1
should mask off the file type portion and (s)printf using a C<"%o"> 
d5241 1
a5241 1
    printf "File is %s, size is %s, perm %04o, mtime %s\n", 
d5288 1
a5288 1
			which can be bit-anded with e.g. S_IFREG 
d5364 3
a5366 1
=item sub BLOCK
d5368 1
a5368 1
=item sub NAME
d5370 6
a5375 1
=item sub NAME BLOCK
d5377 3
a5379 5
This is subroutine definition, not a real function I<per se>.  With just a
NAME (and possibly prototypes or attributes), it's just a forward declaration.
Without a NAME, it's an anonymous function declaration, and does actually
return a value: the CODE ref of the closure you just created.  See L<perlsub>
and L<perlref> for details.
d5458 1
a5458 1
to retrieve the file number of the other end.  You can avoid this 
d5518 14
a5531 8
Attempts to read LENGTH bytes of data into variable SCALAR from the
specified FILEHANDLE, using the system call read(2).  It bypasses stdio,
so mixing this with other kinds of reads, C<print>, C<write>,
C<seek>, C<tell>, or C<eof> can cause confusion because stdio
usually buffers data.  Returns the number of bytes actually read, C<0>
at end of file, or undef if there was an error.  SCALAR will be grown or
shrunk so that the last byte actually read is the last byte of the
scalar after the read.
d5535 4
a5538 4
placement at that many bytes counting backwards from the end of the
string.  A positive OFFSET greater than the length of SCALAR results
in the string being padded to the required size with C<"\0"> bytes before
the result of the read is appended.
d5546 23
a5568 10
Sets FILEHANDLE's system position using the system call lseek(2).  It
bypasses stdio, so mixing this with reads (other than C<sysread>),
C<print>, C<write>, C<seek>, C<tell>, or C<eof> may cause confusion.
FILEHANDLE may be an expression whose value gives the name of the
filehandle.  The values for WHENCE are C<0> to set the new position to
POSITION, C<1> to set the it to the current position plus POSITION,
and C<2> to set it to EOF plus POSITION (typically negative).  For
WHENCE, you may also use the constants C<SEEK_SET>, C<SEEK_CUR>, and
C<SEEK_END> (start of the file, current position, end of the file)
from the Fcntl module.
d5599 3
a5601 3
The return value is the exit status of the program as
returned by the C<wait> call.  To get the actual exit value divide by
256.  See also L</exec>.  This is I<not> what you want to use to capture
d5609 3
a5611 2
Because C<system> and backticks block C<SIGINT> and C<SIGQUIT>, killing the
program they're running doesn't actually interrupt your program.
d5624 3
d5637 9
a5645 9
Attempts to write LENGTH bytes of data from variable SCALAR to the
specified FILEHANDLE, using the system call write(2).  If LENGTH
is not specified, writes whole SCALAR.  It bypasses stdio, so mixing
this with reads (other than C<sysread())>, C<print>, C<write>,
C<seek>, C<tell>, or C<eof> may cause confusion because stdio
usually buffers data.  Returns the number of bytes actually written,
or C<undef> if there was an error.  If the LENGTH is greater than
the available data in the SCALAR after the OFFSET, only as much
data as is available will be written.
d5649 8
a5656 2
that many bytes counting backwards from the end of the string.  In the
case the SCALAR is empty you can use OFFSET but only zero offset.
d5662 9
a5670 3
Returns the current position for FILEHANDLE, or -1 on error.  FILEHANDLE
may be an expression whose value gives the name of the actual filehandle.
If FILEHANDLE is omitted, assumes the file last read.  
d5678 6
d5791 1
a5791 1
considers to be the epoch (that's 00:00:00, January 1, 1904 for MacOS,
d5807 2
d5822 3
d5830 5
a5834 4
implementing the C<\U> escape in double-quoted strings.
Respects current LC_CTYPE locale if C<use locale> in force.  See L<perllocale>.
Under Unicode (C<use utf8>) it uses the standard Unicode uppercase mappings.  (It
does not attempt to do titlecase mapping on initial letters.  See C<ucfirst> for that.)
d5842 5
a5846 5
Returns the value of EXPR with the first character
in uppercase (titlecase in Unicode).  This is
the internal function implementing the C<\u> escape in double-quoted strings.
Respects current LC_CTYPE locale if C<use locale> in force.  See L<perllocale>
and L<utf8>.
d5980 1
a5980 1
is longer than one described by the TEMPLATE, the rest is ignored. 
d5987 1
d5995 1
a5995 1
    unshift(ARGV, '-e') unless $ARGV[0] =~ /^-/;
d6019 11
a6029 8
VERSION, which can be specified as a literal of the form v5.6.1, demands
that the current version of Perl (C<$^V> or $PERL_VERSION) be at least
as recent as that version.  (For compatibility with older versions of Perl,
a numeric literal will also be interpreted as VERSION.)  If the version
of the running Perl interpreter is less than VERSION, then an error
message is printed and Perl exits immediately without attempting to
parse the rest of the file.  Compare with L</require>, which can do a
similar check at run time.
d6033 1
a6033 1
    use 5.005_03;	# float version allowed for compatibility
d6062 1
a6062 1
value of the variable C<$Module::VERSION>. 
d6078 1
a6091 2
If no C<unimport> method can be found the call fails with a fatal error.

d6109 7
d6143 1
a6143 1
If BITS is 8, "elements" coincide with bytes of the input string.  
d6214 1
a6214 1
                                      0         1         2         3  
d6242 1
a6242 1
                                      0         1         2         3  
d6391 3
a6393 3
    do { 
	$kid = waitpid(-1,&WNOHANG);
    } until $kid == -1;
@


1.5
log
@merge in perl 5.6.1 with our local changes
@
text
@d837 1
a837 1
The L<crypt> function is unsuitable for encrypting large quantities
d2595 1
a2595 1
See the L</use> function, which C<no> is the opposite of.
@


1.4
log
@perl-5.6.0 + local changes
@
text
@d94 1
a94 1
=over
d149 1
a149 1
C<caller>, C<import>, C<local>, C<my>, C<package>, C<use>
d153 1
a153 1
C<defined>, C<dump>, C<eval>, C<formline>, C<local>, C<my>, C<reset>,
d203 2
a204 2
C<import>, C<lc>, C<lcfirst>, C<map>, C<my>, C<no>, C<prototype>, C<qx>,
C<qw>, C<readline>, C<readpipe>, C<ref>, C<sub*>, C<sysopen>, C<tie>,
d277 2
a278 2
    -z	File has zero size.
    -s	File has nonzero size (returns size).
d303 1
a303 1
	chop;
d491 1
a491 1
data contains C<\cZ>, the I/O subsystem will ragard it as the end of
d542 1
a542 1
C<eval EXPR> statement.  In particular, for a C<eval BLOCK> statement,
d545 1
d615 2
d632 1
a632 2
chopped.  It's used primarily to remove the newline from the end of an
input record, but is much more efficient than C<s/\n//> because it neither
d634 1
a634 1
Example:
d636 1
a636 10
    while (<>) {
	chop;	# avoid \n on last field
	@@array = split(/:/);
	#...
    }

You can actually chop anything that's an lvalue, including an assignment:

    chop($cwd = `pwd`);
    chop($answer = <STDIN>);
d787 2
d911 4
a914 1
declarations of C<&foo>.
d1056 1
a1056 1
maintain arbitary state about the nature of the exception.  Such a scheme
d1184 1
a1184 1
it.  When called in scalar context, returns the key for only the "next"
d1199 8
a1206 1
iterating over it, you may get entries skipped or duplicated, so don't.
d1272 5
a1276 5
errors, executed in the context of the current Perl program, so that any
variable settings or subroutine and format definitions remain afterwards.
Note that the value is parsed every time the eval executes.  If EXPR is
omitted, evaluates C<$_>.  This form is typically used to delay parsing
and subsequent execution of the text of EXPR until run time.
d1470 4
a1473 1
does not count as declaring it.
d1874 1
a1874 1
cannot be trusted and therefore the $gcos is is tainted (see
d1907 4
a1910 2
shadow versions if you're running under privilege.  Those that
incorrectly implement a separate library call are not supported.
d1996 1
a1996 1
the year, in the range C<1..365> (or C<1..366> in leap years.)  
d2088 3
a2090 3
Note that, because C<$_> is a reference into the list value, it can
be used to modify the elements of the array.  While this is useful and
supported, it can cause bizarre results if the LIST is not a named array.
d2118 1
a2118 1
for the package used.  See also L</use()>, L<perlmod>, and L<Exporter>.
d2227 3
d2337 2
a2338 1
it succeeded, false otherwise.  See the example in L<perlipc/"Sockets: Client/Server Communication">.
d2343 2
a2344 2
what most people think of as "local".  See L<perlsub/"Private Variables
via my()"> for details.
d2368 1
a2368 1
the year, in the range C<1..365> (or C<1..366> in leap years.)  $isdst
d2473 3
a2475 3
Note that, because C<$_> is a reference into the list value, it can
be used to modify the elements of the array.  While this is useful and
supported, it can cause bizarre results if the LIST is not a named array.
d2480 23
d2529 1
a2529 1
C<IPC::SysV> and C<IPC::Semaphore> documentation.
d2534 2
a2535 2
id, or the undefined value if there is an error.  See also C<IPC::SysV>
and C<IPC::Msg> documentation.
d2545 2
a2546 1
an error.  See also C<IPC::SysV> and C<IPC::SysV::Msg> documentation.
d2850 2
a2851 2
(this may not work on some bizzare filesystems).  One should
conscientiously choose between the the I<magic> and 3-arguments form
d2873 1
a2873 1
    print HANDLE "stuff $$\n");
d2964 1
a2964 1
    A	An ascii string, will be space padded.
d3184 2
a3185 2
 	0x12 0x34 0x56 0x78	# little-endian
 	0x78 0x56 0x34 0x12	# big-endian
d3187 4
a3190 4
Basically, the Intel, Alpha, and VAX CPUs are little-endian, while
everybody else, for example Motorola m68k/88k, PPC, Sparc, HP PA,
Power, and Cray are big-endian.  MIPS can be either: Digital used it
in little-endian mode; SGI uses it in big-endian mode.
d3237 9
d3316 2
a3319 2
=item package NAMESPACE

d3377 1
a3377 1
is in question (C<$_> is used when the variable is not specified).  May be
d3470 1
a3470 1
Returns the value of EXPR with all non-alphanumeric
d3497 7
a3503 6
specified FILEHANDLE.  Returns the number of bytes actually read,
C<0> at end of file, or undef if there was an error.  SCALAR will be grown
or shrunk to the length actually read.  An OFFSET may be specified to
place the read data at some other place than the beginning of the
string.  This call is actually implemented in terms of stdio's fread(3)
call.  To get a true read(2) system call, see C<sysread>.
d3978 3
a3980 2
short integers, which may may be created with C<pack("s!",(0)x$nsem)>.
See also C<IPC::SysV> and C<IPC::Semaphore> documentation.
d3985 3
a3987 2
the undefined value if there is an error.  See also C<IPC::SysV> and
C<IPC::SysV::Semaphore> documentation.
d4002 3
a4004 2
To signal the semaphore, replace C<-1> with C<1>.  See also C<IPC::SysV>
and C<IPC::SysV::Semaphore> documentation.
d4050 1
a4050 1
See also C<unshift>, C<push>, and C<pop>.  C<Shift()> and C<unshift> do the
d4064 1
a4064 1
See also C<IPC::SysV> documentation.
d4070 1
a4070 1
See also C<IPC::SysV> documentation.
d4082 2
a4083 2
shmread() taints the variable. See also C<IPC::SysV> documentation and
the C<IPC::Shareable> module from CPAN.
d4133 1
a4133 1
See also the POSIX module's C<sigpause> function.
d4285 1
a4285 1
if you're in the C<main> package, it's
d4287 1
a4287 1
    @@articles = sort {$main::b <=> $main::a} @@files;
d4289 2
a4290 5
or just

    @@articles = sort {$::b <=> $::a} @@files;

but if you're in the C<FooPack> package, it's
d4349 3
a4351 5
If not in list context, returns the number of fields found and splits into
the C<@@_> array.  (In list context, you can force the split into C<@@_> by
using C<??> as the pattern delimiters, but it still returns the list
value.)  The use of implicit split to C<@@_> is deprecated, however, because
it clobbers your subroutine arguments.
d4373 9
d4419 3
d4426 2
a4427 1
	($login, $passwd, $uid, $gid,
a4431 2
(Note that $shell above will still have a newline on it.  See L</chop>,
L</chomp>, and L</join>.)
d4435 12
a4446 3
Returns a string formatted by the usual C<printf> conventions of the
C library function C<sprintf>.  See L<sprintf(3)> or L<printf(3)>
on your system for an explanation of the general principles.
d4454 6
d4492 6
d4735 1
a4735 1
    S_IFMODE($mode)	the part of $mode containg the permission bits
d5079 7
a5085 3
Returns the current position for FILEHANDLE.  FILEHANDLE may be an
expression whose value gives the name of the actual filehandle.  If
FILEHANDLE is omitted, assumes the file last read.  
d5131 1
d5148 1
d5159 6
d5167 1
d5175 1
d5444 2
a5445 1
If you don't want your namespace altered, explicitly supply an empty list:
d5466 2
a5468 1
    use diagnostics;
d5488 3
a5490 1
See L<perlmod> for a list of standard modules and pragmas.
d5514 2
a5515 3
Note that you cannot modify the values of a hash this way, because the
returned list is just a copy.  You need to use a hash slice for that, 
since it's lvaluable in a way that values() is not.
d5517 2
a5518 2
    for (values %hash) 	    { s/foo/bar/g }   # FAILS!
    for (@@hash{keys %hash}) { s/foo/bar/g }   # ok
d5536 1
a5536 1
pack()/unpack() with big-endian formats C<n>/C<N> (and analoguously
d5551 12
a5562 3
If the selected element is off the end of the string, the value 0 is
returned.  If an element off the end of the string is written to,
Perl will first extend the string with sufficiently many zero bytes.
@


1.3
log
@perl5.005_03 (stock)
@
text
@d33 1
a33 1
surprising) rule is this: It I<LOOKS> like a function, therefore it I<IS> a
d83 2
a84 2
which return C<-1> on failure.  Exceptions to this rule are C<wait()>,
C<waitpid()>, and C<syscall()>.  System calls also set the special C<$!>
d258 1
a258 1
Unless otherwise documented, it returns C<1> for TRUE and C<''> for FALSE, or
d293 2
a294 2
    -T	File is a text file.
    -B	File is a binary file (opposite of -T).
d322 10
d338 1
a338 1
characters with the high bit set.  If too many strange characters (E<gt>30%)
d342 1
a342 1
rather than the first block.  Both C<-T> and C<-B> return TRUE on a null
d347 1
a347 1
If any of the file tests (or either the C<stat()> or C<lstat()> operators) are given
d376 1
a376 1
does.  Returns the packed address if it succeeded, FALSE otherwise.
d379 4
d398 2
a399 2
four-arugment version of select() leaving the first three arguments
undefined, or you might be able to use the C<syscall()> interface to
d403 2
a404 2
It is usually a mistake to intermix C<alarm()>
and C<sleep()> calls.
d406 2
a407 2
If you want to use C<alarm()> to time out a system call you need to use an
C<eval()>/C<die()> pair.  You can't rely on the alarm causing the system call to
d409 1
a409 1
restart system calls on some systems.  Using C<eval()>/C<die()> always works,
d430 1
a430 1
For the tangent operation, you may use the C<POSIX::tan()>
d438 1
a438 1
does.  Returns TRUE if it succeeded, FALSE otherwise.  NAME should be a
d442 2
d446 53
a498 17
Arranges for the file to be read or written in "binary" mode in operating
systems that distinguish between binary and text files.  Files that
are not in binary mode have CR LF sequences translated to LF on input
and LF translated to CR LF on output.  Binmode has no effect under
many sytems, but in MS-DOS and similarly archaic systems, it may be
imperative--otherwise your MS-DOS-damaged C library may mangle your file.
The key distinction between systems that need C<binmode()> and those
that don't is their text file formats.  Systems like Unix, MacOS, and
Plan9 that delimit lines with a single character, and that encode that
character in C as C<"\n">, do not need C<binmode()>.  The rest may need it.
If FILEHANDLE is an expression, the value is taken as the name of the
filehandle.

If the system does care about it, using it when you shouldn't is just as
perilous as failing to use it when you should.  Fortunately for most of
us, you can't go wrong using binmode() on systems that don't care about
it, though.
d506 1
a506 1
is used.  Because a C<bless()> is often the last thing in a constructor.
d526 1
a526 1
we're in a subroutine or C<eval()> or C<require()>, and the undefined value
d535 2
a536 2
    ($package, $filename, $line, $subroutine,
     $hasargs, $wantarray, $evaltext, $is_require) = caller($i);
d538 2
a539 2
Here C<$subroutine> may be C<"(eval)"> if the frame is not a subroutine
call, but an C<eval()>.  In such a case additional elements C<$evaltext> and
d541 1
a541 1
C<require> or C<use> statement, C<$evaltext> contains the text of the
d543 1
a543 1
C<$filename> is C<"(eval)">, but C<$evaltext> is undefined.  (Note also that
d545 3
a547 1
frame.
d554 1
a554 1
C<caller()> had a chance to get the information. That means that C<caller(N)>
d556 2
a557 2
C<N E<gt> 1>. In particular, C<@@DB::args> might have information from the 
previous time C<caller()> was called.
d562 4
a565 2
changes to the user's home directory.  Returns TRUE upon success,
FALSE otherwise.  See the example under C<die()>.
d582 8
d603 3
d646 1
a646 1
last C<chop()> is returned.
d648 1
a648 1
Note that C<chop()> returns the last character.  To return all but the last
d654 4
a657 2
elements of the list must be the I<NUMERICAL> uid and gid, in that order.
Returns the number of files successfully changed.
d665 1
a665 1
    chop($user = <STDIN>);
d667 1
a667 1
    chop($pattern = <STDIN>);
d679 4
d689 4
a692 1
For example, C<chr(65)> is C<"A"> in ASCII.  For the reverse, use L</ord>.
d702 1
a702 1
begin with a C<"/"> by your process and all its children.  (It doesn't
d705 1
a705 1
omitted, does a C<chroot()> to C<$_>.
d711 1
a711 1
Closes the file or pipe associated with the file handle, returning TRUE
d713 1
a713 1
descriptor. Closes the currently selected filehandle if the argument
d717 3
a719 3
another C<open()> on it, because C<open()> will close it for you.  (See
C<open()>.)  However, an explicit C<close()> on an input file resets the line
counter (C<$.>), while the implicit close done by C<open()> does not.
d721 2
a722 2
If the file handle came from a piped open C<close()> will additionally
return FALSE if one of the other system calls involved fails or if the
d729 5
d750 1
a750 1
Closes a directory opened by C<opendir()> and returns the success of that
d759 1
a759 1
does.  Returns TRUE if it succeeded, FALSE otherwise.  NAME should be a
d774 2
a775 2
block. C<last> and C<redo> will behave as if they had been executed within
the main block. So will C<next>, but since it will execute a C<continue>
d789 1
a789 1
empty one, logically enough. In that case, C<next> goes directly back
d797 1
a797 1
For the inverse cosine operation, you may use the C<POSIX::acos()>
d810 1
a810 1
Note that C<crypt()> is intended to be a one-way function, much like breaking
d817 1
a817 1
allows your code to work with the standard C<crypt()> and with more
d842 6
d850 1
a850 1
[This function has been largely superseded by the C<untie()> function.]
d854 1
a854 1
=item dbmopen HASH,DBNAME,MODE
d856 1
a856 1
[This function has been largely superseded by the C<tie()> function.]
d859 2
a860 2
hash.  HASH is the name of the hash.  (Unlike normal C<open()>, the first
argument is I<NOT> a filehandle, even though it looks like one).  DBNAME
d863 2
a864 2
specified by MODE (as modified by the C<umask()>).  If your system supports
only the older DBM functions, you may perform only one C<dbmopen()> in your
d866 1
a866 1
ndbm, calling C<dbmopen()> produced a fatal error; it now falls back to
d871 1
a871 1
either use file tests or try setting a dummy hash entry inside an C<eval()>,
d874 2
a875 2
Note that functions such as C<keys()> and C<values()> may return huge lists
when used on large DBM files.  You may prefer to use the C<each()>
d910 1
a910 1
doesn't I<necessarily> indicate an exceptional condition: C<pop()>
d914 11
a924 4
You may also use C<defined()> to check whether a subroutine exists, by
saying C<defined &func> without parentheses.  On the other hand, use
of C<defined()> upon aggregates (hashes and arrays) is not guaranteed to
produce intuitive results, and should probably be avoided.
d939 1
a939 1
Note:  Many folks tend to overuse C<defined()>, and then are surprised to
d950 1
a950 1
should use C<defined()> only when you're questioning the integrity of what
a953 18
Currently, using C<defined()> on an entire array or hash reports whether
memory for that aggregate has ever been allocated.  So an array you set
to the empty list appears undefined initially, and one that once was full
and that you then set to the empty list still appears defined.  You
should instead use a simple test for size:

    if (@@an_array) { print "has array elements\n" }
    if (%a_hash)   { print "has hash members\n"   }

Using C<undef()> on these, however, does clear their memory and then report
them as not defined anymore, but you shouldn't do that unless you don't
plan to use them again, because it saves time when you load them up
again to have memory already ready to be filled.  The normal way to 
free up space used by an aggregate is to assign the empty list.

This counterintuitive behavior of C<defined()> on aggregates may be
changed, fixed, or broken in a future release of Perl.

d958 16
a973 6
Deletes the specified key(s) and their associated values from a hash.
For each key, returns the deleted value associated with that key, or
the undefined value if there was no such key.  Deleting from C<$ENV{}>
modifies the environment.  Deleting from a hash tied to a DBM file
deletes the entry from the DBM file.  (But deleting from a C<tie()>d hash
doesn't necessarily return anything.)
d975 1
a975 1
The following deletes all the values of a hash:
d981 7
a987 1
And so does this:
d989 1
a989 1
    delete @@HASH{keys %HASH}
d992 1
a992 1
or undefining it:
d994 5
a998 2
    %hash = ();		# completely empty %hash
    undef %hash;	# forget %hash every existed
d1001 2
a1002 1
operation is a hash element lookup or hash slice:
d1007 3
d1012 7
a1018 6
Outside an C<eval()>, prints the value of LIST to C<STDERR> and exits with
the current value of C<$!> (errno).  If C<$!> is C<0>, exits with the value of
C<($? E<gt>E<gt> 8)> (backtick `command` status).  If C<($? E<gt>E<gt> 8)>
is C<0>, exits with C<255>.  Inside an C<eval(),> the error message is stuffed into
C<$@@> and the C<eval()> is terminated with the undefined value.  This makes
C<die()> the way to raise an exception.
d1072 1
a1072 1
Since perl will stringify uncaught exception messages before displaying
d1076 10
a1085 9
You can arrange for a callback to be run just before the C<die()> does
its deed, by setting the C<$SIG{__DIE__}> hook.  The associated handler
will be called with the error text and can change the error message, if
it sees fit, by calling C<die()> again.  See L<perlvar/$SIG{expr}> for details on
setting C<%SIG> entries, and L<"eval BLOCK"> for some examples.

Note that the C<$SIG{__DIE__}> hook is currently called even inside
eval()ed blocks/strings!  If one wants the hook to do nothing in such
situations, put
d1089 3
a1091 3
as the first line of the handler (see L<perlvar/$^S>).  Because this
promotes action at a distance, this counterintuitive behavior may be fixed
in a future release.
d1135 1
a1135 1
C<use()> and C<require()> operators, which also do automatic error checking
d1156 25
a1180 34
This causes an immediate core dump.  Primarily this is so that you can
use the B<undump> program to turn your core dump into an executable binary
after having initialized all your variables at the beginning of the
program.  When the new binary is executed it will begin by executing a
C<goto LABEL> (with all the restrictions that C<goto> suffers).  Think of
it as a goto with an intervening core dump and reincarnation.  If C<LABEL>
is omitted, restarts the program from the top.  WARNING: Any files
opened at the time of the dump will NOT be open any more when the
program is reincarnated, with possible resulting confusion on the part
of Perl.  See also B<-u> option in L<perlrun>.

Example:

    #!/usr/bin/perl
    require 'getopt.pl';
    require 'stat.pl';
    %days = (
	'Sun' => 1,
	'Mon' => 2,
	'Tue' => 3,
	'Wed' => 4,
	'Thu' => 5,
	'Fri' => 6,
	'Sat' => 7,
    );

    dump QUICKSTART if $ARGV[0] eq '-d';

    QUICKSTART:
    Getopt('f');

This operator is largely obsolete, partly because it's very hard to 
convert a core file into an executable, and because the real perl-to-C
compiler has superseded it.
d1187 1
a1187 3
element in the hash.  (Note: Keys may be C<"0"> or C<"">, which are logically
false; you may wish to avoid constructs like C<while ($k = each %foo) {}>
for this reason.)
d1191 1
a1191 1
to be in the same order as either the C<keys()> or C<values()> function
d1195 4
a1198 4
(which when assigned produces a FALSE (C<0>) value), and C<undef> in
scalar context.  The next call to C<each()> after that will start iterating
again.  There is a single iterator for each hash, shared by all C<each()>,
C<keys()>, and C<values()> function calls in the program; it can be reset by
d1210 1
a1210 1
See also C<keys()>, C<values()> and C<sort()>.
d1221 1
a1221 1
reads a character and then C<ungetc()>s it, so isn't very useful in an
d1223 1
a1223 1
C<eof(FILEHANDLE)> on it) after end-of-file is reached.  Filetypes such
d1226 11
a1236 6
An C<eof> without an argument uses the last file read as argument.
Using C<eof()> with empty parentheses is very different.  It indicates
the pseudo file formed of the files listed on the command line, i.e.,
C<eof()> is reasonable to use inside a C<while (E<lt>E<gt>)> loop to
detect the end of only the last file.  Use C<eof(ARGV)> or eof without the
parentheses to test I<EACH> file in a while (E<lt>E<gt>) loop.  Examples:
d1257 2
a1258 2
input operators return false values when they run out of data, or if there
was an error.
d1289 2
a1290 2
If there is a syntax error or runtime error, or a C<die()> statement is
executed, an undefined value is returned by C<eval()>, and C<$@@> is set to the
d1292 1
a1292 1
string.  Beware that using C<eval()> neither silences perl from printing
d1297 2
a1298 2
Note that, because C<eval()> traps otherwise-fatal errors, it is useful for
determining whether a particular feature (such as C<socket()> or C<symlink()>)
d1330 1
a1330 1
C<die()> again, which has the effect of changing their error messages:
d1340 1
a1340 1
Because this promotes action at a distance, this counterintuive behavior
d1343 1
a1343 1
With an C<eval()>, you should be especially careful to remember what's
d1356 1
a1356 1
the variable C<$x>.  (Although case 2 has misleading double quotes making
d1359 1
a1359 1
does nothing but return the value of C<$x>.  (Case 4 is preferred for
d1362 1
a1362 1
normally you I<WOULD> like to use double quotes, except that in this
d1373 3
a1375 3
The C<exec()> function executes a system command I<AND NEVER RETURNS> -
use C<system()> instead of C<exec()> if you want it to return. It fails and
returns FALSE only if the command does not exist I<and> it is executed
d1378 4
a1381 4
Since it's a common mistake to use C<exec()> instead of C<system()>, Perl
warns you if there is a following statement which isn't C<die()>, C<warn()>,
or C<exit()> (if C<-w> is set  -  but you always do that).   If you
I<really> want to follow an C<exec()> with some other statement, you
d1394 2
a1395 3
words and passed directly to C<execvp()>, which is more efficient.  Note:
C<exec()> and C<system()> do not flush your output buffer, so you may need to
set C<$|> to avoid lost output.  Examples:
d1418 5
a1422 4
Using an indirect object with C<exec()> or C<system()> is also more secure.
This usage forces interpretation of the arguments as a multivalued list,
even if the list had just one argument.  That way you're safe from the
shell expanding wildcards or splitting up words with whitespace in them.
d1435 7
a1441 1
Note that C<exec()> will not call your C<END> blocks, nor will it call
d1446 12
a1457 2
Returns TRUE if the specified hash key exists in its hash array, even
if the corresponding value is undefined.
d1459 2
a1460 3
    print "Exists\n" 	if exists $array{$key};
    print "Defined\n" 	if defined $array{$key};
    print "True\n"      if $array{$key};
d1462 7
a1468 2
A hash element can be TRUE only if it's defined, and defined if
it exists, but the reverse doesn't necessarily hold true.
d1471 1
a1471 1
operation is a hash key lookup:
d1476 10
a1485 5
Although the last element will not spring into existence just because
its existence was tested, intervening ones will.  Thus C<$ref-E<gt>{"A"}>
and C<$ref-E<gt>{"A"}-E<gt>{"B"}> will spring into existence due to the
existence test for a $key element.  This happens anywhere the arrow
operator is used, including even 
d1495 9
d1511 1
a1511 1
See also C<die()>.  If EXPR is omitted, exits with C<0> status.  The only
d1518 3
a1520 3
Don't use C<exit()> to abort a subroutine if there's any chance that
someone might want to trap whatever error happened.  Use C<die()> instead,
which can be trapped by an C<eval()>.
d1522 1
a1522 1
The exit() function does not always exit immediately. It calls any
d1524 1
a1524 1
themselves abort the exit. Likewise any object destructors that need to
d1527 1
a1527 1
See L<perlsub> for details.
d1543 1
a1543 1
value return works just like C<ioctl()> below.  
d1550 3
a1552 3
You don't have to check for C<defined()> on the return from C<fnctl()>.
Like C<ioctl()>, it maps a C<0> return from the system call into "C<0>
but true" in Perl.  This string is true in boolean context and C<0>
d1556 1
a1556 1
Note that C<fcntl()> will produce a fatal error if used on a machine that
d1564 1
a1564 1
bitmaps for C<select()> and low-level POSIX tty-handling operations.
d1577 2
a1578 2
Calls flock(2), or an emulation of it, on FILEHANDLE.  Returns TRUE
for success, FALSE on failure.  Produces a fatal error if used on a
d1580 1
a1580 1
C<flock()> is Perl's portable file locking interface, although it locks
d1586 2
a1587 2
fewer guarantees.  This means that files locked with C<flock()> may be
modified by programs that do not also use C<flock()>.  See L<perlport>,
d1597 1
a1597 1
you can use the symbolic names if import them from the Fcntl module,
d1600 2
a1601 2
releases a previously requested lock.  If LOCK_NB is added to LOCK_SH or
LOCK_EX then C<flock()> will return immediately rather than blocking
d1613 2
a1614 2
Note also that some versions of C<flock()> cannot lock things over the
network; you would need to use the more system-specific C<fcntl()> for
d1659 5
a1663 3
Note: unflushed buffers remain unflushed in both processes, which means
you may need to set C<$|> ($AUTOFLUSH in English) or call the C<autoflush()>
method of C<IO::Handle> to avoid duplicate output.
d1665 1
a1665 1
If you C<fork()> without ever waiting on your children, you will
d1673 1
a1673 1
backgrounded job launced from a remote shell) won't think you're done.
d1678 1
a1678 1
Declare a picture format for use by the C<write()> function.  For
d1699 1
a1699 1
Eventually, when a C<write()> is done, the contents of
d1702 1
a1702 1
does one C<formline()> per line of form, but the C<formline()> function itself
d1708 1
a1708 1
Be careful if you put double quotes around the picture, because an "C<@@>"
d1710 1
a1710 1
C<formline()> always returns TRUE.  See L<perlform> for other examples.
d1743 1
a1743 1
The C<POSIX::getattr()> function can do this more portably on
d1752 1
a1752 1
use C<getpwuid()>.
d1756 2
a1757 2
Do not consider C<getlogin()> for authentication: it is not as
secure as C<getpwuid()>.
d1765 1
a1765 1
    ($port, $iaddr) = unpack_sockaddr_in($hersockaddr);
d1775 1
a1775 1
group of current process.  Note that the POSIX version of C<getpgrp()>
d1862 8
d1882 19
a1900 20
In I<getpw*()> the fields C<$quota>, C<$comment>, and C<$expire> are
special cases in the sense that in many systems they are unsupported.
If the C<$quota> is unsupported, it is an empty scalar.  If it is
supported, it usually encodes the disk quota.  If the C<$comment>
field is unsupported, it is an empty scalar.  If it is supported it
usually encodes some administrative comment about the user.  In some
systems the $quota field may be C<$change> or C<$age>, fields that have
to do with password aging.  In some systems the C<$comment> field may
be C<$class>.  The C<$expire> field, if present, encodes the expiration
period of the account or the password.  For the availability and the
exact meaning of these fields in your system, please consult your
getpwnam(3) documentation and your F<pwd.h> file.  You can also find
out from within Perl what your C<$quota> and C<$comment> fields mean
and whether you have the C<$expire> field by using the C<Config> module
and the values C<d_pwquota>, C<d_pwage>, C<d_pwchange>, C<d_pwcomment>,
and C<d_pwexpire>.  Shadow password files are only supported if your
vendor has implemented them in the intuitive fashion that calling the
regular C library routines gets the shadow versions if you're running
under privilege.  Those that incorrectly implement a separate library
call are not supported.
d1902 1
a1902 1
The C<$members> value returned by I<getgr*()> is a space separated list of
d1921 1
a1921 1
    $straddr = inet_ntoa($iaddr");
d1923 7
a1929 6
If you get tired of remembering which element of the return list contains
which return value, by-name interfaces are also provided in modules:
C<File::stat>, C<Net::hostent>, C<Net::netent>, C<Net::protoent>, C<Net::servent>,
C<Time::gmtime>, C<Time::localtime>, and C<User::grent>.  These override the
normal built-in, replacing them with versions that return objects with
the appropriate names for each field.  For example:
d1936 2
a1937 1
they aren't, because a C<File::stat> object is different from a C<User::pwent> object.
d1941 3
a1943 1
Returns the packed sockaddr address of this end of the SOCKET connection.
d1947 4
a1950 1
    ($port, $myaddr) = unpack_sockaddr_in($mysockaddr);
d1962 2
a1963 2
implementing the C<E<lt>*.cE<gt>> operator, but you can use it directly.
If EXPR is omitted, C<$_> is used.  The C<E<lt>*.cE<gt>> operator is
d1966 3
d1971 1
a1971 1
Converts a time as returned by the time function to a 9-element array
d1975 2
a1976 2
    #  0    1    2     3     4    5     6     7     8
    ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) =
d1979 18
a1996 7
All array elements are numeric, and come straight out of a struct tm.
In particular this means that C<$mon> has the range C<0..11> and C<$wday>
has the range C<0..6> with sunday as day C<0>.  Also, C<$year> is the
number of years since 1900, that is, C<$year> is C<123> in year 2023,
I<not> simply the last two digits of the year.  If you assume it is,
then you create non-Y2K-compliant programs--and you wouldn't want to do
that, would you?
d1998 1
a1998 1
If EXPR is omitted, does C<gmtime(time())>.
d2000 3
a2002 1
In scalar context, returns the ctime(3) value:
d2006 1
a2006 1
Also see the C<timegm()> function provided by the C<Time::Local> module,
d2033 1
a2033 1
or to get out of a block or subroutine given to C<sort()>.
d2036 1
a2036 1
construct such as C<last> or C<die()>.  The author of Perl has never felt the
d2045 14
a2058 7
The C<goto-&NAME> form is highly magical, and substitutes a call to the
named subroutine for the currently running subroutine.  This is used by
C<AUTOLOAD> subroutines that wish to load another subroutine and then
pretend that the other subroutine had been called in the first place
(except that any modifications to C<@@_> in the current subroutine are
propagated to the other subroutine.)  After the C<goto>, not even C<caller()>
will be able to tell that this routine was called first.
d2069 2
a2070 2
elements for which the expression evaluated to TRUE.  In scalar
context, returns the number of times the expression was TRUE.
d2083 2
a2084 2
element of a list returned by grep (for example, in a C<foreach>, C<map()>
or another C<grep()>) actually modifies the element in the original list.
d2087 1
a2087 1
See also L</map> for an array composed of the results of the BLOCK or EXPR.
d2100 3
d2105 1
a2105 1
There is no builtin C<import()> function.  It is just an ordinary
d2107 1
a2107 1
names to another module.  The C<use()> function calls the C<import()> method
d2132 1
a2132 1
the C<sprintf()>, C<printf()>, or the C<POSIX::floor> and C<POSIX::ceil>
d2143 1
a2143 1
own, based on your C header files such as F<E<lt>sys/ioctl.hE<gt>>.
d2147 1
a2147 1
will be passed as the third argument of the actual C<ioctl()> call.  (If SCALAR
d2150 3
a2152 15
TRUE, add a C<0> to the scalar before using it.)  The C<pack()> and C<unpack()>
functions are useful for manipulating the values of structures used by
C<ioctl()>.  The following example sets the erase character to DEL.

    require 'ioctl.ph';
    $getp = &TIOCGETP;
    die "NO TIOCGETP" if $@@ || !$getp;
    $sgttyb_t = "ccccs";		# 4 chars and a short
    if (ioctl(STDIN,$getp,$sgttyb)) {
	@@ary = unpack($sgttyb_t,$sgttyb);
	$ary[2] = 127;
	$sgttyb = pack($sgttyb_t,@@ary);
	ioctl(STDIN,&TIOCSETP,$sgttyb)
	    || die "Can't ioctl: $!";
    }
d2154 1
a2154 1
The return value of C<ioctl()> (and C<fcntl()>) is as follows:
d2161 1
a2161 1
Thus Perl returns TRUE on success and FALSE on failure, yet you can
d2171 12
d2190 2
a2191 1
See L</split>.
d2195 1
a2195 1
Returns a list consisting of all the keys of the named hash.  (In a
d2199 1
a2199 1
order as either the C<values()> or C<each()> function produces (given
d2207 1
a2207 1
    while ($#keys >= 0) {
d2217 1
a2217 1
To sort a hash by value, you'll need to use a C<sort()> function.
d2224 1
a2224 1
As an lvalue C<keys()> allows you to increase the number of hash buckets
d2236 1
a2236 1
C<keys()> in this way (but you needn't worry about doing this by accident,
d2239 1
a2239 1
See also C<each()>, C<values()> and C<sort()>.
d2241 1
a2241 1
=item kill LIST
d2243 3
a2245 3
Sends a signal to a list of processes.  The first element of
the list must be the signal to send.  Returns the number of
processes successfully signaled.
d2250 6
a2255 1
Unlike in the shell, in Perl if the I<SIGNAL> is negative, it kills
d2279 4
d2292 2
a2293 1
Respects current LC_CTYPE locale if C<use locale> in force.  See L<perllocale>.
d2318 2
a2319 2
Creates a new filename linked to the old filename.  Returns TRUE for
success, FALSE otherwise. 
d2323 2
a2324 2
Does the same thing that the listen system call does.  Returns TRUE if
it succeeded, FALSE otherwise.  See the example in L<perlipc/"Sockets: Client/Server Communication">.
d2328 1
a2328 1
You really probably want to be using C<my()> instead, because C<local()> isn't
d2339 1
a2339 1
Converts a time as returned by the time function to a 9-element array
d2347 20
a2366 7
All array elements are numeric, and come straight out of a struct tm.
In particular this means that C<$mon> has the range C<0..11> and C<$wday>
has the range C<0..6> with sunday as day C<0>.  Also, C<$year> is the
number of years since 1900, that is, C<$year> is C<123> in year 2023,
and I<not> simply the last two digits of the year.  If you assume it is,
then you create non-Y2K-compliant programs--and you wouldn't want to do
that, would you?
d2368 1
a2368 1
If EXPR is omitted, uses the current time (C<localtime(time)>).
d2370 3
a2372 1
In scalar context, returns the ctime(3) value:
d2377 7
a2383 5
instead a Perl builtin.  Also see the C<Time::Local> module, and the
strftime(3) and mktime(3) function available via the POSIX module.  To
get somewhat similar but locale dependent date strings, set up your
locale environment variables appropriately (please see L<perllocale>)
and try for example:
d2391 11
d2408 1
a2408 1
The base-N log of a number is is equal to the natural log of that number
d2424 1
a2424 1
Does the same thing as the C<stat()> function (including setting the
d2427 1
a2427 1
your system, a normal C<stat()> is done.
d2439 6
a2444 6
Evaluates the BLOCK or EXPR for each element of LIST (locally setting C<$_> to each
element) and returns the list value composed of the results of each such
evaluation.  Evaluates BLOCK or EXPR in a list context, so each element of LIST
may produce zero, one, or more elements in the returned value.

In scalar context, returns the total number of elements so generated.
d2466 3
a2468 1
=item mkdir FILENAME,MODE
d2471 3
a2473 2
specified by MODE (as modified by C<umask>).  If it succeeds it
returns TRUE, otherwise it returns FALSE and sets C<$!> (errno).
d2475 1
a2475 1
In general, it is better to create directories with permissive MODEs,
d2477 1
a2477 1
a restrictive MODE and give the user no way to be more permissive.
d2480 1
a2480 1
C<umask> discusses the choice of MODE in more detail.
d2490 3
a2492 3
structure.  Returns like C<ioctl()>: the undefined value for error, "C<0> but
true" for zero, or the actual return value otherwise.  See also
C<IPC::SysV> and C<IPC::Semaphore::Msg> documentation.
d2498 11
a2508 1
and C<IPC::SysV::Msg> documentation.
d2513 5
a2517 3
message queue ID.  MSG must begin with the long integer message type,
which may be created with C<pack("l", $type)>.  Returns TRUE if
successful, or FALSE if there is an error.  See also C<IPC::SysV>
d2520 1
a2520 8
=item msgrcv ID,VAR,SIZE,TYPE,FLAGS

Calls the System V IPC function msgrcv to receive a message from
message queue ID into variable VAR with a maximum message size of
SIZE.  Note that if a message is received, the message type will be
the first thing in VAR, and the maximum length of VAR is SIZE plus the
size of the message type.  Returns TRUE if successful, or FALSE if
there is an error.  See also C<IPC::SysV> and C<IPC::SysV::Msg> documentation.
d2522 1
a2522 1
=item my EXPR
d2524 2
a2525 2
A C<my()> declares the listed variables to be local (lexically) to the
enclosing block, file, or C<eval()>.  If
d2549 3
d2571 12
a2582 4
If EXPR is omitted, uses C<$_>.  This function is commonly used when
a string such as C<644> needs to be converted into a file mode, for
example. (Although perl will automatically convert strings into
numbers as needed, this automatic conversion assumes base 10.)
d2590 4
a2593 1
name of the real filehandle wanted.  If EXPR is omitted, the scalar
d2595 2
a2596 2
(Note that lexical variables--those declared with C<my()>--will not work
for this purpose; so if you're using C<my()>, specify EXPR in your call
d2600 3
a2602 3
If the filename begins with C<'E<lt>'> or nothing, the file is opened for input.
If the filename begins with C<'E<gt>'>, the file is truncated and opened for
output, being created if necessary. If the filename begins with C<'E<gt>E<gt>'>,
d2604 3
a2606 3
You can put a C<'+'> in front of the C<'E<gt>'> or C<'E<lt>'> to indicate that
you want both read and write access to the file; thus C<'+E<lt>'> is almost
always preferred for read/write updates--the C<'+E<gt>'> mode would clobber the
d2612 6
a2617 3
The prefix and the filename may be separated with spaces.
These various prefixes correspond to the fopen(3) modes of C<'r'>, C<'r+'>, C<'w'>,
C<'w+'>, C<'a'>, and C<'a+'>.
d2623 11
a2633 1
for more examples of this.  (You are not allowed to C<open()> to a command
d2637 5
a2641 2
Opening C<'-'> opens STDIN and opening C<'E<gt>-'> opens STDOUT.  Open returns
nonzero upon success, the undefined value otherwise.  If the C<open()>
d2648 1
a2648 1
dealing with this.  The key distinction between systems that need C<binmode()>
d2651 1
a2651 1
character in C as C<"\n">, do not need C<binmode()>.  The rest need it.
d2654 2
a2655 2
if the request failed, so C<open()> is frequently used in connection with
C<die()>. Even if C<die()> won't do what you want (say, in a CGI script,
d2658 1
a2658 1
the return value from opening a file. The infrequent exception is when
d2667 1
a2667 1
    open(LOG, '>>/usr/spool/news/twitlog'); # (log is reserved)
d2670 4
a2673 1
    open(DBASE, '+<dbase.mine')		    # open for update
d2676 4
a2679 1
    open(ARTICLE, "caesar <$article |")     # decrypt article
d2682 1
a2682 1
    open(EXTRACT, "|sort >/tmp/Tmp$$")      # $$ is our process id
d2710 1
a2710 1
with C<'E<gt>&'>, in which case the rest of the string is interpreted as the
d2712 2
a2713 2
duped and opened.  You may use C<&> after C<E<gt>>, C<E<gt>E<gt>>, C<E<lt>>, C<+E<gt>>,
C<+E<gt>E<gt>>, and C<+E<lt>>.  The
d2716 3
a2718 1
stdio buffers.)
d2726 2
a2727 2
    open(STDOUT, ">foo.out") || die "Can't redirect stdout";
    open(STDERR, ">&STDOUT") || die "Can't dup stdout";
d2744 2
a2745 2
If you specify C<'E<lt>&=N'>, where C<N> is a number, then Perl will do an
equivalent of C's C<fdopen()> of that file descriptor; this is more
d2750 8
a2757 1
If you open a pipe on the command C<'-'>, i.e., either C<'|-'> or C<'-|'>, then
d2768 1
a2768 1
The following pairs are more or less equivalent:
d2771 2
a2772 1
    open(FOO, "|-") || exec 'tr', '[a-z]', '[A-Z]';
d2775 2
a2776 1
    open(FOO, "-|") || exec 'cat', '-n', $file;
d2780 9
a2788 5
NOTE: On any operation that may do a fork, any unflushed buffers remain
unflushed in both processes, which means you may need to set C<$|> to
avoid duplicate output.  On systems that support a close-on-exec flag on
files, the flag will be set for the newly opened file descriptor as
determined by the value of $^F.  See L<perlvar/$^F>.
d2793 2
a2794 1
The filename passed to open will have leading and trailing
d2803 5
a2807 2
However, to open a file with arbitrary weird characters in it, it's
necessary to protect any leading and trailing whitespace:
d2812 17
a2828 2
If you want a "real" C C<open()> (see L<open(2)> on your system), then you
should use the C<sysopen()> function, which involves no such magic.  This is
d2861 2
a2862 2
Opens a directory named EXPR for processing by C<readdir()>, C<telldir()>,
C<seekdir()>, C<rewinddir()>, and C<closedir()>.  Returns TRUE if successful.
d2869 1
a2869 1
Returns the numeric ascii value of the first character of EXPR.  If
d2871 41
d2915 7
a2921 2
Takes an array or list of values and packs it into a binary structure,
returning the string containing the structure.  The TEMPLATE is a
d2929 2
a2930 2
    b	A bit string (ascending bit order, like vec()).
    B	A bit string (descending bit order).
d2935 1
a2935 1
    C	An unsigned char value.
d2940 2
a2941 1
	   what a local C compiler calls 'short'.)
d2945 1
a2945 1
	  (This 'integer' is _at least_ 32 bits wide.  Its exact
d2953 2
a2954 1
	   what a local C compiler calls 'long'.)
d2956 4
a2959 4
    n	A short in "network" (big-endian) order.
    N	A long in "network" (big-endian) order.
    v	A short in "VAX" (little-endian) order.
    V	A long in "VAX" (little-endian) order.
d2965 2
a2966 2
	  (Available only if your system supports 64-bit integer values
	   _and_ if Perl has been compiled to support those.
d2976 2
d2995 2
a2996 2
count.  With all types except C<"a">, C<"A">, C<"Z">, C<"b">, C<"B">, C<"h">,
C<"H">, and C<"P"> the pack function will gobble up that many values from
d2998 10
a3007 1
left.
d3011 1
a3011 1
The C<"a">, C<"A">, and C<"Z"> types gobble just one value, but pack it as a
d3013 8
a3020 2
unpacking, C<"A"> strips trailing spaces and nulls, C<"Z"> strips everything
after the first null, and C<"a"> returns data verbatim.
d3024 20
a3043 1
Likewise, the C<"b"> and C<"B"> fields pack a string that many bits long.
d3047 26
a3072 1
The C<"h"> and C<"H"> fields pack a string that many nybbles long.
d3076 1
a3076 1
The C<"p"> type packs a pointer to a null-terminated string.  You are
d3079 30
a3108 3
The C<"P"> type packs a pointer to a structure of the size indicated by the
length. A NULL pointer is created if the corresponding value for C<"p"> or
C<"P"> is C<undef>.
d3112 29
a3140 1
The integer formats C<"s">, C<"S">, C<"i">, C<"I">, C<"l">, and C<"L">
d3143 1
a3143 1
4-byte integer 0x87654321 (2271560481 decimal) be ordered natively
d3145 1
a3145 1
 
d3148 2
a3149 2
 
Basically, the Intel, Alpha, and VAX CPUs and little-endian, while
d3152 1
a3152 1
in little-endian mode, SGI uses it in big-endian mode.
d3154 1
a3154 1
The names `big-endian' and `little-endian' are joking references to
d3157 4
a3160 4
the egg-eating habits of the lilliputs.
 
Some systems may even have weird byte orders such as
 
d3163 1
a3163 1
 
d3178 3
a3180 2
If you want portable packed integers use the formats C<"n">, C<"N">,
C<"v">, and C<"V">, their byte endianness and size is known.
d3190 1
a3190 1
of the IEEE spec).
d3195 19
a3213 1
equal C<$foo>).
d3223 2
d3229 5
d3261 6
d3275 1
a3275 1
of the enclosing block, file, or eval (the same as the C<my()> operator).
d3278 2
a3279 2
you've used C<local()> on--but I<not> lexical variables, which are created
with C<my()>.  Typically it would be the first declaration in a file to
d3316 1
a3316 1
one element.  Has a similar effect to
d3318 1
a3318 1
    $tmp = $ARRAY[$#ARRAY--];
d3320 4
a3323 3
If there are no elements in the array, returns the undefined value.
If ARRAY is omitted, pops the C<@@ARGV> array in the main program, and
the C<@@_> array in subroutines, just like C<shift()>.
d3341 5
a3345 5
Prints a string or a comma-separated list of strings.  Returns TRUE
if successful.  FILEHANDLE may be a scalar variable name, in which case
the variable contains the name of or a reference to the filehandle, thus
introducing one level of indirection.  (NOTE: If FILEHANDLE is a variable
and the next token is a term, it may be misinterpreted as an operator
d3347 14
a3360 10
If FILEHANDLE is omitted, prints by default to standard output (or to the
last selected output channel--see L</select>).  If LIST is also omitted,
prints C<$_> to the currently selected output channel.  To set the default
output channel to something other than STDOUT use the select operation.
Note that, because print takes a LIST, anything in the LIST is evaluated
in list context, and any subroutine that you call will have one or
more of its expressions evaluated in list context.  Also be careful
not to follow the print keyword with a left parenthesis unless you want
the corresponding right parenthesis to terminate the arguments to the
print--interpose a C<+> or put parentheses around all the arguments.
d3374 1
a3374 1
of the list will be interpreted as the C<printf()> format.  If C<use locale> is
d3378 2
a3379 2
Don't fall into the trap of using a C<printf()> when a simple
C<print()> would do.  The C<print()> is more efficient and less
d3391 1
a3391 1
C<system()>) returns C<undef> because the builtin does not really behave
d3438 2
a3439 2
omitted, the value C<1> is used.  Automatically calls C<srand()> unless
C<srand()> has already been called.  See also C<srand()>.
d3455 1
a3455 1
call.  To get a true read(2) system call, see C<sysread()>.
d3459 1
a3459 1
Returns the next directory entry for a directory opened by C<opendir()>.
d3464 1
a3464 1
If you're planning to filetest the return values out of a C<readdir()>, you'd
d3466 1
a3466 1
C<chdir()> there, it would have been testing the wrong file.
d3485 2
a3486 2
This is the internal function implementing the C<E<lt>EXPRE<gt>>
operator, but you can use it directly.  The C<E<lt>EXPRE<gt>>
d3515 7
a3521 6
data into variable SCALAR from the specified SOCKET filehandle.
Actually does a C C<recvfrom()>, so that it can return the address of the
sender.  Returns the undefined value if there's an error.  SCALAR will
be grown or shrunk to the length actually read.  Takes the same flags
as the system call of the same name.
See L<perlipc/"UDP: Message Passing"> for examples.
d3554 4
d3565 1
a3565 1
Returns a TRUE value if EXPR is a reference, FALSE otherwise.  If EXPR
a3569 1
    REF
d3574 1
d3576 1
d3579 1
a3579 1
name is returned instead.  You can think of C<ref()> as a C<typeof()> operator.
d3595 3
a3597 1
Changes the name of a file.  Returns C<1> for success, C<0> otherwise.
d3605 2
d3612 12
a3623 2
supplied.  If EXPR is numeric, demands that the current version of Perl
(C<$]> or $PERL_VERSION) be equal or greater than EXPR.
d3627 1
a3627 1
essentially just a variety of C<eval()>.  Has semantics similar to the following
d3638 1
d3645 1
a3647 1
	$INC{$filename} = $realfilename;
d3652 1
a3652 1
name.  The file must return TRUE as the last statement to indicate
d3654 2
a3655 2
end such a file with "C<1;>" unless you're sure it'll return TRUE
otherwise.  But it's better just to put the "C<1;>", in case you add more
d3678 1
a3678 1
will complain about not finding "F<Foo::Bar>" there. In this case you can do:
d3711 1
a3711 1
Returns from a subroutine, C<eval()>, or C<do FILE> with the value 
d3714 1
a3714 1
may vary from one execution to the next (see C<wantarray()>).  If no EXPR
d3745 1
a3745 1
C<readdir()> routine on DIRHANDLE.
d3760 1
a3760 1
succeeds it returns TRUE, otherwise it returns FALSE and sets C<$!> (errno).  If
d3780 1
a3780 1
Since C<scalar> is a unary operator, if you accidentally use for EXPR a
d3798 1
a3798 1
Sets FILEHANDLE's position, just like the C<fseek()> call of C<stdio()>.
d3801 9
a3809 8
POSITION, C<1> to set it to the current position plus POSITION, and C<2> to
set it to EOF plus POSITION (typically negative).  For WHENCE you may
use the constants C<SEEK_SET>, C<SEEK_CUR>, and C<SEEK_END> from either the
C<IO::Seekable> or the POSIX module.  Returns C<1> upon success, C<0> otherwise.

If you want to position file for C<sysread()> or C<syswrite()>, don't use
C<seek()> -- buffering makes its effect on the file's system position
unpredictable and non-portable.  Use C<sysseek()> instead.
d3820 1
a3820 1
seek() to reset things.  The C<seek()> doesn't change the current position,
d3822 1
a3822 1
next C<E<lt>FILEE<gt>> makes Perl try again to read something.  We hope.
d3838 2
a3839 2
Sets the current position for the C<readdir()> routine on DIRHANDLE.  POS
must be a value returned by C<telldir()>.  Has the same caveats about
d3849 1
a3849 1
effects: first, a C<write()> or a C<print()> without a filehandle will
d3874 1
a3874 1
can be constructed using C<fileno()> and C<vec()>, along these lines:
d3903 2
a3904 2
Most systems do not bother to return anything useful in C<$timeleft>, so
calling select() in scalar context just returns C<$nfound>.
d3908 2
a3909 2
capable of returning theC<$timeleft>.  If not, they always return
C<$timeleft> equal to the supplied C<$timeout>.
d3915 3
a3917 3
B<WARNING>: One should not attempt to mix buffered I/O (like C<read()>
or E<lt>FHE<gt>) with C<select()>, except as permitted by POSIX, and even
then only on POSIX systems.  You have to use C<sysread()> instead.
d3921 1
a3921 1
Calls the System V IPC function C<semctl()>.  You'll probably have to say
d3927 5
a3931 3
semid_ds structure or semaphore value array.  Returns like C<ioctl()>: the
undefined value for error, "C<0> but true" for zero, or the actual return
value otherwise.  See also C<IPC::SysV> and C<IPC::Semaphore> documentation.
d3945 3
a3947 3
operations is implied by the length of OPSTRING.  Returns TRUE if
successful, or FALSE if there is an error.  As an example, the
following code waits on semaphore C<$semnum> of semaphore id C<$semid>:
d3961 1
a3961 1
destination to send TO, in which case it does a C C<sendto()>.  Returns
d3970 4
a3973 3
implement setpgrp(2).  If the arguments are omitted, it defaults to
C<0,0>.  Note that the POSIX version of C<setpgrp()> does not accept any
arguments, so only C<setpgrp(0,0)> is portable.  See also C<POSIX::setsid()>.
d3996 5
a4000 3
the C<eval ''>, C<BEGIN {}>, C<END {}>, and C<INIT {}> constructs.
See also C<unshift()>, C<push()>, and C<pop()>.  C<Shift()> and C<unshift()> do the
same thing to the left end of an array that C<pop()> and C<push()> do to the
d4030 3
a4032 3
SIZE bytes.  Return TRUE if successful, or FALSE if there is an error.
See also C<IPC::SysV> documentation and the C<IPC::Shareable> module
from CPAN.
d4046 1
a4046 1
disables the filedescriptor in any forked copies in other
d4056 1
a4056 1
For the inverse sine operation, you may use the C<POSIX::asin()>
d4068 2
a4069 2
mix C<alarm()> and C<sleep()> calls, because C<sleep()> is often implemented
using C<alarm()>.
d4078 3
a4080 2
C<syscall()> interface to access setitimer(2) if your system supports it,
or else see L</select> above.
d4082 1
a4082 1
See also the POSIX module's C<sigpause()> function.
d4087 8
a4094 3
SOCKET.  DOMAIN, TYPE, and PROTOCOL are specified the same as for the
system call of the same name.  You should "C<use Socket;>" first to get
the proper definitions imported.  See the examples in L<perlipc/"Sockets: Client/Server Communication">.
d4101 5
a4105 1
error.  Returns TRUE if successful.
d4107 1
a4107 1
Some systems defined C<pipe()> in terms of C<socketpair()>, in which a call
d4124 1
a4124 1
is omitted, C<sort()>s in standard string comparison order.  If SUBNAME is
d4127 1
a4127 1
of the array are to be ordered.  (The C<E<lt>=E<gt>> and C<cmp>
d4134 10
a4143 6
In the interests of efficiency the normal calling code for subroutines is
bypassed, with the following effects: the subroutine may not be a
recursive subroutine, and the two elements to be compared are passed into
the subroutine not via C<@@_> but as the package global variables C<$a> and
C<$b> (see example below).  They are passed by reference, so don't
modify C<$a> and C<$b>.  And don't try to declare them as lexicals either.
d4146 1
a4146 1
loop control operators described in L<perlsyn> or with C<goto()>.
d4171 4
d4181 3
a4183 7
    # this sorts the %age hash by value instead of key
    # using an in-line function
    @@eldest = sort { $age{$b} <=> $age{$a} } keys %age;

    sub backwards { $b cmp $a; }
    @@harry = ('dog','cat','x','Cain','Abel');
    @@george = ('gone','chased','yz','Punished','Axed');
d4217 1
a4217 1
    # same thing using a Schwartzian Transform (no temps)
d4219 9
a4227 4
        sort { $b->[1] <=> $a->[1]
                        ||
               $a->[2] cmp $b->[2]
        } map { [$_, /=(\d+)/, uc($_)] } @@old;
d4229 5
a4233 2
If you're using strict, you I<MUST NOT> declare C<$a>
and C<$b> as lexicals.  They are package globals.  That means
d4257 2
d4264 1
a4264 1
If OFFSET is negative then it start that far from the end of the array.
d4266 3
a4268 1
If LENGTH is negative, leave that many elements off the end of the array.
d4298 1
a4298 1
Splits a string into an array of strings, and returns it.  By default,
d4315 1
a4315 1
of C<pop()> would do well to remember).  If LIMIT is negative, it is
d4337 1
a4337 1
If the PATTERN contains parentheses, additional array elements are
d4346 1
a4346 1
If you had the entire header of a normal Unix email message in C<$header>,
d4357 1
a4357 1
white space just as C<split()> with no arguments does.  Thus, C<split(' ')> can
d4360 2
a4361 2
A C<split()> on C</\s+/> is like a C<split(' ')> except that any leading
whitespace produces a null first field.  A C<split()> with no arguments
d4373 1
a4373 1
(Note that C<$shell> above will still have a newline on it.  See L</chop>,
d4378 2
a4379 2
Returns a string formatted by the usual C<printf()> conventions of the
C library function C<sprintf()>.  See L<sprintf(3)> or L<printf(3)>
d4382 2
a4383 2
Perl does its own C<sprintf()> formatting -- it emulates the C
function C<sprintf()>, but it doesn't use it (except for floating-point
d4385 1
a4385 1
result, any non-standard extensions in your local C<sprintf()> are not
d4388 1
a4388 1
Perl's C<sprintf()> permits the following universally-known conversions:
d4406 1
d4434 1
d4436 1
a4436 1
There is also one Perl-specific flag:
d4439 4
d4444 1
a4444 1
Where a number would appear in the flags, an asterisk ("C<*>") may be
d4447 9
a4455 2
If a field width obtained through "C<*>" is negative, it has the same
effect as the "C<->" flag: left-justification.
d4461 38
d4514 1
a4514 1
Sets the random number seed for the C<rand()> operator.  If EXPR is
d4518 1
a4518 1
seed was just the current C<time()>.  This isn't a particularly good seed,
d4520 1
a4520 1
C<time ^ ($$ + ($$ E<lt>E<lt> 15))>), but that isn't necessary any more.
d4522 1
a4522 1
In fact, it's usually not necessary to call C<srand()> at all, because if
d4524 1
a4524 1
the C<rand()> operator.  However, this was not the case in version of Perl
d4526 1
a4526 1
should call C<srand()>.
d4538 1
a4538 1
Do I<not> call C<srand()> multiple times in your program unless you know
d4540 1
a4540 1
function is to "seed" the C<rand()> function so that C<rand()> can produce
d4542 1
a4542 1
top of your program, or you I<won't> get random numbers out of C<rand()>!
d4580 3
a4582 3
  8 atime    last access time since the epoch
  9 mtime    last modify time since the epoch
 10 ctime    inode change time (NOT creation time!) since the epoch
d4596 2
a4597 1
(This works on machines only for which the device number is negative under NFS.)
d4606 1
a4606 2

In scalar context, C<stat()> returns a boolean value indicating success
d4618 60
d4686 1
a4686 1
frequencies in the string to be searched -- you probably want to compare
d4690 2
a4691 2
one C<study()> active at a time -- if you study a different scalar the first
is "unstudied".  (The way C<study()> works is this: a linked list of every
d4710 2
a4711 2
In searching for C</\bfoo\b/>, only those locations in C<$_> that contain C<"f">
will be looked at, because C<"f"> is rarer than C<"o">.  In general, this is
d4717 1
a4717 1
runtime, you can build an entire loop as a string and C<eval()> that to
d4744 4
a4747 4
NAME (and possibly prototypes), it's just a forward declaration.  Without
a NAME, it's an anonymous function declaration, and does actually return a
value: the CODE ref of the closure you just created.  See L<perlsub> and
L<perlref> for details.
d4749 1
a4749 1
=item substr EXPR,OFFSET,LEN,REPLACEMENT
d4751 1
a4751 1
=item substr EXPR,OFFSET,LEN
d4758 2
a4759 2
that far from the end of the string.  If LEN is omitted, returns
everything to the end of the string.  If LEN is negative, leaves that
a4761 4
If you specify a substring that is partly outside the string, the part
within the string is returned.    If the substring is totally outside
the string a warning is produced.

d4763 2
a4764 2
must itself be an lvalue.  If you assign something shorter than LEN,
the string will shrink, and if you assign something longer than LEN,
d4766 14
a4779 1
length you may need to pad or chop your value using C<sprintf()>.
d4804 1
a4804 1
string literal (or other read-only string) as an argument to C<syscall()>
d4809 1
a4809 1
like numbers.  This emulates the C<syswrite()> function (or vice versa):
d4819 1
a4819 1
If the system call fails, C<syscall()> returns C<-1> and sets C<$!> (errno).
d4827 1
a4827 1
problem by using C<pipe()> instead.
d4836 1
a4836 1
underlying operating system's C<open()> function with the parameters
d4841 8
d4855 1
a4855 1
If the file named by FILENAME does not exist and the C<open()> call creates
d4858 1
a4858 1
the PERMS argument to C<sysopen()>, Perl uses the octal value C<0666>.
d4862 8
a4869 1
You should seldom if ever use C<0644> as argument to C<sysopen()>, because
d4874 6
d4888 2
a4889 2
so mixing this with other kinds of reads, C<print()>, C<write()>,
C<seek()>, C<tell()>, or C<eof()> can cause confusion because stdio
d4909 9
a4917 8
bypasses stdio, so mixing this with reads (other than C<sysread()>),
C<print()>, C<write()>, C<seek()>, C<tell()>, or C<eof()> may cause
confusion.  FILEHANDLE may be an expression whose value gives the name
of the filehandle.  The values for WHENCE are C<0> to set the new
position to POSITION, C<1> to set the it to the current position plus
POSITION, and C<2> to set it to EOF plus POSITION (typically negative).
For WHENCE, you may use the constants C<SEEK_SET>, C<SEEK_CUR>, and
C<SEEK_END> from either the C<IO::Seekable> or the POSIX module.
d4920 2
a4921 2
of zero is returned as the string "C<0> but true"; thus C<sysseek()> returns
TRUE on success and FALSE on failure, yet you can still easily determine
d4928 19
a4946 12
Does exactly the same thing as "C<exec LIST>", except that a fork is done
first, and the parent process waits for the child process to complete.
Note that argument processing varies depending on the number of
arguments.  If there is more than one argument in LIST, or if LIST is
an array with more than one value, starts the program given by the
first element of the list with arguments given by the rest of the list.
If there is only one scalar argument, the argument is
checked for shell metacharacters, and if there are any, the entire
argument is passed to the system's command shell for parsing (this is
C</bin/sh -c> on Unix platforms, but varies on other platforms).  If
there are no shell metacharacters in the argument, it is split into
words and passed directly to C<execvp()>, which is more efficient.
d4949 2
a4950 2
returned by the C<wait()> call.  To get the actual exit value divide by
256.  See also L</exec>.  This is I<NOT> what you want to use to capture
d4952 2
a4953 1
C<qx//>, as described in L<perlop/"`STRING`">.
d4955 2
a4956 2
Like C<exec()>, C<system()> allows you to lie to a program about its name if
you use the "C<system PROGRAM LIST>" syntax.  Again, see L</exec>.
d4958 1
a4958 1
Because C<system()> and backticks block C<SIGINT> and C<SIGQUIT>, killing the
d4983 8
a4990 8
specified FILEHANDLE, using the system call write(2).  If LENGTH is
not specified, writes whole SCALAR. It bypasses
stdio, so mixing this with reads (other than C<sysread())>, C<print()>,
C<write()>, C<seek()>, C<tell()>, or C<eof()> may cause confusion
because stdio usually buffers data.  Returns the number of bytes
actually written, or C<undef> if there was an error.  If the LENGTH is
greater than the available data in the SCALAR after the OFFSET, only as
much data as is available will be written.
d5005 1
a5005 1
There is no C<systell()> function.  Use C<sysseek(FH, 0, 1)> for that.
d5009 2
a5010 2
Returns the current position of the C<readdir()> routines on DIRHANDLE.
Value may be given to C<seekdir()> to access a particular location in a
d5019 1
a5019 1
of correct type.  Any additional arguments are passed to the "C<new()>"
d5022 2
a5023 2
to the C<dbm_open()> function of C.  The object returned by the "C<new()>"
method is also returned by the C<tie()> function, which would be useful
d5026 1
a5026 1
Note that functions such as C<keys()> and C<values()> may return huge lists
d5028 1
a5028 1
C<each()> function to iterate over such.  Example:
d5088 1
a5088 1
Unlike C<dbmopen()>, the C<tie()> function will not use or require a module
d5090 1
a5090 1
or the F<Config> module for interesting C<tie()> implementations.
d5097 1
a5097 1
that was originally returned by the C<tie()> call that bound the variable
d5106 6
a5111 1
Suitable for feeding to C<gmtime()> and C<localtime()>.
d5122 1
a5122 1
The transliteration operator.  Same as C<y///>. See L<perlop>.
d5130 1
a5130 1
on your system.  Returns TRUE if successful, the undefined value
d5140 2
a5141 1
(It does not attempt to do titlecase mapping on initial letters.  See C<ucfirst()> for that.)
d5149 2
a5150 1
Returns the value of EXPR with the first character in uppercase.  This is
d5152 2
a5153 1
Respects current LC_CTYPE locale if C<use locale> in force.  See L<perllocale>.
d5173 1
a5173 1
C<sysopen()> C<0666> would create a file with mode C<0640> (C<0666 &~
d5177 2
a5178 2
files (in C<sysopen()>) and one of C<0777> for directories (in
C<mkdir()>) and executable files.  This gives users the freedom of
d5199 2
a5200 2
scalar value, an array (using "C<@@>"), a hash (using "C<%>"), a subroutine
(using "C<&>"), or a typeglob (using "<*>").  (Saying C<undef $hash{$key}>
d5231 1
a5231 1
Note: C<unlink()> will not delete directories unless you are superuser and
d5234 1
a5234 1
filesystem.  Use C<rmdir()> instead.
d5240 10
a5249 4
C<Unpack()> does the reverse of C<pack()>: it takes a string representing a
structure and expands it out into a list value, returning the array
value.  (In scalar context, it returns merely the first value
produced.)  The TEMPLATE has the same format as in the C<pack()> function.
d5261 8
a5268 3
In addition, you may prefix a field with a %E<lt>numberE<gt> to indicate that
you want a E<lt>numberE<gt>-bit checksum of the items instead of the items
themselves.  Default is a 16-bit checksum.  For example, the following
d5271 4
a5274 4
    while (<>) {
	$checksum += unpack("%32C*", $_);
    }
    $checksum %= 65535;
d5280 10
a5289 1
See L</pack> for more examples.
d5293 1
a5293 1
Breaks the binding between a variable and a package.  (See C<tie()>.)
d5297 1
a5297 1
Does the opposite of a C<shift()>.  Or the opposite of a C<push()>,
d5304 1
a5304 1
prepended elements stay in the same order.  Use C<reverse()> to do the
d5307 4
a5314 2
=item use Module VERSION LIST

d5325 16
a5340 7
If the first argument to C<use> is a number, it is treated as a version
number instead of a module name.  If the version of the Perl interpreter
is less than VERSION, then an error message is printed and Perl exits
immediately.  This is often useful if you need to check the current
Perl version before C<use>ing library modules that have changed in
incompatible ways from older versions of Perl.  (We try not to do
this more than we have to.)
d5342 1
a5342 1
The C<BEGIN> forces the C<require> and C<import()> to happen at compile time.  The
d5344 2
a5345 2
yet.  The C<import()> is not a builtin--it's just an ordinary static method
call into the "C<Module>" package to tell the module to import the list of
d5347 4
a5350 5
C<import()> method any way it likes, though most modules just choose to
derive their C<import()> method via inheritance from the C<Exporter> class that
is defined in the C<Exporter> module.  See L<Exporter>.  If no C<import()>
method can be found then the error is currently silently ignored.  This
may change to a fatal error in a future version.
d5363 6
a5368 3
the Universal class, croaks if the given version is larger than the
value of the variable C<$Module::VERSION>.  (Note that there is not a
comma after VERSION!)
d5375 4
a5378 3
    use sigtrap qw(SEGV BUS);
    use strict  qw(subs vars refs);
    use subs    qw(afunc blurfl);
d5380 1
a5380 1
Some of these these pseudo-modules import semantics into the current
d5385 2
a5386 2
There's a corresponding "C<no>" command that unimports meanings imported
by C<use>, i.e., it calls C<unimport Module LIST> instead of C<import()>.
d5390 1
d5392 1
a5392 1
If no C<unimport()> method can be found the call fails with a fatal error.
d5401 2
a5402 2
successfully changed.  The inode modification time of each file is set
to the current time.  This code has the same effect as the "C<touch>"
d5415 1
a5415 1
be the same order as either the C<keys()> or C<each()> function would
d5426 1
a5426 1
See also C<keys()>, C<each()>, and C<sort()>.
d5430 23
a5452 6
Treats the string in EXPR as a vector of unsigned integers, and
returns the value of the bit field specified by OFFSET.  BITS specifies
the number of bits that are reserved for each entry in the bit
vector.  This must be a power of two from 1 to 32. C<vec()> may also be
assigned to, in which case parentheses are needed to give the expression
the correct precedence as in
d5456 8
a5463 3
Vectors created with C<vec()> can also be manipulated with the logical
operators C<|>, C<&>, and C<^>, which will assume a bit vector operation is
desired when both operands are strings.  See L<perlop/"Bitwise String Operators">.
d5466 1
a5466 1
The comments show the string after each step. Note that this code works
d5471 4
d5487 1
a5487 1
To transform a bit vector into a string or array of 0's and 1's, use these:
d5494 165
d5663 1
a5663 1
C<-1> if there are no child processes.  The status is rketurned in C<$?>.
d5693 2
a5694 2
Returns TRUE if the context of the currently executing subroutine is
looking for a list value.  Returns FALSE if the context is looking
d5702 2
d5706 1
a5706 1
Produces a message on STDERR just like C<die()>, but doesn't exit or throw
d5711 2
a5712 2
to C<$@@>. This is useful for staying almost, but not entirely similar to
C<die()>.
d5718 1
a5718 1
as it sees fit (like, for instance, converting it into a C<die()>).  Most
d5720 1
a5720 1
warnings that they are not prepared to deal with, by calling C<warn()>
d5727 1
a5727 1
instead call C<die()> again to change it).
d5756 1
a5756 1
format for the current output channel (see the C<select()> function) may be set
d5771 1
a5771 1
C<select()> operator.  If the FILEHANDLE is an EXPR, then the expression
d5775 1
a5775 1
Note that write is I<NOT> the opposite of C<read()>.  Unfortunately.
@


1.2
log
@perl 5.004_04
@
text
@d15 1
a15 1
argument, while a list operator may provide either scalar and list
d18 3
a20 2
be only one list argument.)  For instance, splice() has three scalar
arguments followed by a list.
d51 5
d61 3
a63 8
Remember the following rule:

=over 8

=item  I<THERE IS NO GENERAL RULE FOR CONVERTING A LIST INTO A SCALAR!>

=back

d65 2
a66 2
appropriate to return in a scalar context.  Some operators return the
length of the list that would have been returned in a list context.  Some
d72 15
d90 1
a90 1
functions, like some of the keywords and named operators)
d98 3
a100 3
chomp, chop, chr, crypt, hex, index, lc, lcfirst, length,
oct, ord, pack, q/STRING/, qq/STRING/, reverse, rindex,
sprintf, substr, tr///, uc, ucfirst, y///
d104 1
a104 1
m//, pos, quotemeta, s///, split, study
d108 2
a109 2
abs, atan2, cos, exp, hex, int, log, oct, rand, sin, sqrt,
srand
d113 1
a113 1
pop, push, shift, splice, unshift
d117 1
a117 1
grep, join, map, qw/STRING/, reverse, sort, unpack
d121 1
a121 1
delete, each, exists, keys, values
d125 5
a129 4
binmode, close, closedir, dbmclose, dbmopen, die, eof,
fileno, flock, format, getc, print, printf, read, readdir,
rewinddir, seek, seekdir, select, syscall, sysread, sysseek,
syswrite, tell, telldir, truncate, warn, write
d133 1
a133 1
pack, read, syscall, sysread, syswrite, unpack, vec
d137 4
a140 3
I<-X>, chdir, chmod, chown, chroot, fcntl, glob, ioctl, link,
lstat, mkdir, open, opendir, readlink, rename, rmdir,
stat, symlink, umask, unlink, utime
d144 2
a145 2
caller, continue, die, do, dump, eval, exit, goto, last,
next, redo, return, sub, wantarray
d149 1
a149 1
caller, import, local, my, package, use
d153 2
a154 2
defined, dump, eval, formline, local, my, reset, scalar,
undef, wantarray
d158 3
a160 3
alarm, exec, fork, getpgrp, getppid, getpriority, kill,
pipe, qx/STRING/, setpgrp, setpriority, sleep, system,
times, wait, waitpid
d164 1
a164 1
do, import, no, package, require, use
d168 2
a169 1
bless, dbmclose, dbmopen, package, ref, tie, tied, untie, use
d173 3
a175 3
accept, bind, connect, getpeername, getsockname,
getsockopt, listen, recv, send, setsockopt, shutdown,
socket, socketpair
d179 2
a180 2
msgctl, msgget, msgrcv, msgsnd, semctl, semget, semop,
shmctl, shmget, shmread, shmwrite
d184 3
a186 3
endgrent, endhostent, endnetent, endpwent, getgrent,
getgrgid, getgrnam, getlogin, getpwent, getpwnam,
getpwuid, setgrent, setpwent
d190 5
a194 5
endprotoent, endservent, gethostbyaddr, gethostbyname,
gethostent, getnetbyaddr, getnetbyname, getnetent,
getprotobyname, getprotobynumber, getprotoent,
getservbyname, getservbyport, getservent, sethostent,
setnetent, setprotoent, setservent
d198 1
a198 1
gmtime, localtime, time, times
d202 4
a205 3
abs, bless, chomp, chr, exists, formline, glob, import, lc,
lcfirst, map, my, no, prototype, qx, qw, readline, readpipe,
ref, sub*, sysopen, tie, tied, uc, ucfirst, untie, use
d208 1
a208 1
operator which can be used in expressions.
d212 1
a212 1
dbmclose, dbmopen
d216 28
d248 1
a248 1
=item -X FILEHANDLE
d250 1
a250 1
=item -X EXPR
d252 1
a252 1
=item -X
d257 1
a257 1
argument is omitted, tests $_, except for C<-t>, which tests STDIN.
d263 2
d283 1
a283 1
    -p	File is a named pipe (FIFO).
a299 9
The interpretation of the file permission operators C<-r>, C<-R>, C<-w>,
C<-W>, C<-x>, and C<-X> is based solely on the mode of the file and the
uids and gids of the user.  There may be other reasons you can't actually
read, write or execute the file.  Also note that, for the superuser,
C<-r>, C<-R>, C<-w>, and C<-W> always return 1, and C<-x> and C<-X> return
1 if any execute bit is set in the mode.  Scripts run by the superuser may
thus need to do a stat() to determine the actual mode of the
file, or temporarily set the uid to something else.

d305 1
a305 1
	...
d308 14
d328 1
a328 1
characters with the high bit set.  If too many odd characters (E<gt>30%)
d337 1
a337 1
If any of the file tests (or either the stat() or lstat() operators) are given
d361 1
a361 1
If VALUE is omitted, uses $_.
d367 1
a367 1
See example in L<perlipc/"Sockets: Client/Server Communication">.
d375 1
a375 1
the value stored in $_ is used. (On some machines,
d379 1
a379 1
argument of 0 may be supplied to cancel the previous timer without
d384 13
a396 8
syscall() interface to access setitimer(2) if your system supports it,
or else see L</select()>.  It is usually a mistake to intermix alarm()
and sleep() calls.

If you want to use alarm() to time out a system call you need to use an
eval/die pair.  You can't rely on the alarm causing the system call to
fail with $! set to EINTR because Perl sets up signal handlers to
restart system calls on some systems.  Using eval/die always works.
d399 1
a399 1
	local $SIG{ALRM} = sub { die "alarm\n" };	# NB \n required
a403 1
    die if $@@ && $@@ ne "alarm\n";	# propagate errors
d405 1
d416 1
a416 1
For the tangent operation, you may use the POSIX::tan()
d431 16
a446 10
systems that distinguish between binary and text files.  Files that are
not in binary mode have CR LF sequences translated to LF on input and LF
translated to CR LF on output.  Binmode has no effect under Unix; in MS-DOS
and similarly archaic systems, it may be imperative--otherwise your
MS-DOS-damaged C library may mangle your file.  The key distinction between
systems that need binmode and those that don't is their text file
formats.  Systems like Unix and Plan9 that delimit lines with a single
character, and that encode that character in C as '\n', do not need
C<binmode>.  The rest need it.  If FILEHANDLE is an expression, the value
is taken as the name of the filehandle.
d452 15
a466 7
This function tells the thingy referenced by REF that it is now
an object in the CLASSNAME package--or the current package if no CLASSNAME
is specified, which is often the case.  It returns the reference for
convenience, because a bless() is often the last thing in a constructor.
Always use the two-argument version if the function doing the blessing
might be inherited by a derived class.  See L<perlobj> for more about the
blessing (and blessings) of objects.
d472 1
a472 1
Returns the context of the current subroutine call.  In a scalar context,
d474 2
a475 2
we're in a subroutine or eval() or require(), and the undefined value
otherwise.  In a list context, returns
d486 4
a489 4
Here $subroutine may be C<"(eval)"> if the frame is not a subroutine
call, but an C<eval>.  In such a case additional elements $evaltext and
$is_require are set: $is_require is true if the frame is created by a
C<require> or C<use> statement, $evaltext contains the text of the
d491 1
a491 1
$filename is C<"(eval)">, but $evaltext is undefined.  (Note also that
d496 1
a496 1
detailed information: it sets the list variable @@DB::args to be the
d499 6
d507 3
a509 3
Changes the working directory to EXPR, if possible.  If EXPR is
omitted, changes to home directory.  Returns TRUE upon success, FALSE
otherwise.  See example under die().
d521 2
a522 1
    $mode = '0644'; chmod $mode, 'foo';      # !!! sets mode to --w----r-T
d532 2
a533 2
This is a slightly safer version of L</chop>.  It removes any
line ending that corresponds to the current value of C<$/> (also known as
d537 3
a539 3
that the final record may be missing its newline.  When in paragraph mode
(C<$/ = "">), it removes all trailing newlines from the string.  If
VARIABLE is omitted, it chomps $_.  Example:
d544 1
a544 1
	...
d564 1
a564 1
scans nor copies the string.  If VARIABLE is omitted, chops $_.
d570 1
a570 1
	...
d579 1
a579 1
last chop is returned.
d581 1
a581 1
Note that chop returns the last character.  To return all but the last
d597 1
a597 1
    print "Files: "
d603 1
a603 1
    @@ary = <${pattern}>;	# expand filenames
d616 1
a616 1
For example, C<chr(65)> is "A" in ASCII.  For the reverse, use L</ord>.
d618 1
a618 1
If NUMBER is omitted, uses $_.
d624 1
a624 1
This function works as the system call by the same name: it makes the
d626 1
a626 1
begin with a "/" by your process and all of its children.  (It doesn't
d629 1
a629 1
omitted, does chroot to $_.
d633 2
d637 2
a638 1
descriptor.
d641 3
a643 3
another open() on it, because open() will close it for you.  (See
open().)  However, an explicit close on an input file resets the line
counter ($.), while the implicit close done by open() does not.
d645 1
a645 1
If the file handle came from a piped open C<close> will additionally
d648 5
a652 4
program exited non-zero $! will be set to 0.) Also, closing a pipe will
wait for the process executing on the pipe to complete, in case you
want to look at the output of the pipe afterwards.  Closing a pipe
explicitly also puts the exit status value of the command into C<$?>.
d657 1
a657 1
    ...				# print stuff to output
d664 2
a665 1
FILEHANDLE may be an expression whose value gives the real filehandle name.
d669 5
a673 1
Closes a directory opened by opendir().
d692 19
d713 2
a714 2
Returns the cosine of EXPR (expressed in radians).  If EXPR is omitted
takes cosine of $_.
d716 1
a716 1
For the inverse cosine operation, you may use the POSIX::acos()
d729 1
a729 1
Note that crypt is intended to be a one-way function, much like breaking
d734 7
a744 1
    $salt = substr($pwd, 0, 2);
d748 1
a748 1
    chop($word = <STDIN>);
d752 1
a752 1
    if (crypt($word, $salt) ne $pwd) {
d763 1
a763 1
[This function has been superseded by the untie() function.]
d769 1
a769 1
[This function has been superseded by the tie() function.]
d771 2
a772 2
This binds a dbm(3), ndbm(3), sdbm(3), gdbm(), or Berkeley DB file to a
hash.  HASH is the name of the hash.  (Unlike normal open, the first
d776 2
a777 2
specified by MODE (as modified by the umask()).  If your system supports
only the older DBM functions, you may perform only one dbmopen() in your
d779 1
a779 1
ndbm, calling dbmopen() produced a fatal error; it now falls back to
d784 1
a784 1
either use file tests or try setting a dummy hash entry inside an eval(),
d787 2
a788 2
Note that functions such as keys() and values() may return huge array
values when used on large DBM files.  You may prefer to use the each()
d802 7
d821 1
a821 1
C<undef>, zero, the empty string, and "0", which are all equally
d823 1
a823 1
doesn't I<necessarily> indicate an exceptional condition: pop()
d827 4
a830 4
You may also use defined() to check whether a subroutine exists.  On
the other hand, use of defined() upon aggregates (hashes and arrays)
is not guaranteed to produce intuitive results, and should probably be
avoided.
d845 2
a846 2
Note:  Many folks tend to overuse defined(), and then are surprised to
discover that the number 0 and "" (the zero-length string) are, in fact,
d851 1
a851 1
the pattern match succeeds, and $1 is defined, despite the fact that it
d853 1
a853 1
matched something that happened to be 0 characters long.  This is all
d856 2
a857 2
should use defined() only when you're questioning the integrity of what
you're trying to do.  At other times, a simple comparison to 0 or "" is
d860 1
a860 1
Currently, using defined() on an entire array or hash reports whether
d869 2
a870 2
Using undef() on these, however, does clear their memory and then report
them as not defined anymore, but you shoudln't do that unless you don't
d872 2
a873 1
again to have memory already ready to be filled.
d875 1
a875 1
This counterintuitive behaviour of defined() on aggregates may be
d886 1
a886 1
deletes the entry from the DBM file.  (But deleting from a tie()d hash
d899 8
a906 3
(But both of these are slower than the undef() command.)  Note that the
EXPR can be arbitrarily complicated as long as the final operation is a
hash element lookup or hash slice:
d913 2
a914 2
Outside of an eval(), prints the value of LIST to C<STDERR> and exits with
the current value of C<$!> (errno).  If C<$!> is 0, exits with the value of
d916 3
a918 3
is 0, exits with 255.  Inside an eval(), the error message is stuffed into
C<$@@>, and the eval() is terminated with the undefined value; this makes
die() the way to raise an exception.
d927 7
a933 2
is supplied.  Hint: sometimes appending ", stopped" to your message
will cause it to make better sense when the string "at foo line 123" is
d944 1
a944 1
See also exit() and warn().
d946 2
a947 2
If LIST is empty and $@@ already contains a value (typically from a
previous eval) that value is reused after appending "\t...propagated".
d953 22
a974 1
If $@@ is empty then the string "Died" is used.
d976 1
a976 1
You can arrange for a callback to be called just before the die() does
d979 1
a979 1
it sees fit, by calling die() again.  See L<perlvar/$SIG{expr}> for details on
d982 2
a983 2
Note that the C<$SIG{__DIE__}> hook is called even inside eval()ed
blocks/strings.  If one wants the hook to do nothing in such
d988 3
a990 1
as the first line of the handler (see L<perlvar/$^S>).
d999 4
d1019 13
a1031 6
except that it's more efficient, more concise, keeps track of the
current filename for error messages, and searches all the B<-I>
libraries if the file isn't in the current directory (see also the @@INC
array in L<perlvar/Predefined Names>).  It's the same, however, in that it does
reparse the file every time you call it, so you probably don't want to
do this inside a loop.
d1034 1
a1034 1
use() and require() operators, which also do error checking
d1037 14
d1053 2
d1060 2
a1061 2
it as a goto with an intervening core dump and reincarnation.  If LABEL
is omitted, restarts the program from the top.  WARNING: any files
d1086 4
d1092 1
a1092 1
When called in a list context, returns a 2-element array consisting of the
d1094 2
a1095 2
it.  When called in a scalar context, returns the key for only the next
element in the hash.  (Note: Keys may be "0" or "", which are logically
d1099 10
a1108 6
Entries are returned in an apparently random order.  When the hash is
entirely read, a null array is returned in list context (which when
assigned produces a FALSE (0) value), and C<undef> is returned in a
scalar context.  The next call to each() after that will start iterating
again.  There is a single iterator for each hash, shared by all each(),
keys(), and values() function calls in the program; it can be reset by
d1120 1
a1120 1
See also keys() and values().
d1130 2
a1131 2
gives the real filehandle name.  (Note that this function actually
reads a character and then ungetc()s it, so it is not very useful in an
d1137 5
a1141 5
Empty parentheses () may be used to indicate the pseudo file formed of
the files listed on the command line, i.e., C<eof()> is reasonable to
use inside a C<while (E<lt>E<gt>)> loop to detect the end of only the
last file.  Use C<eof(ARGV)> or eof without the parentheses to test
I<EACH> file in a while (E<lt>E<gt>) loop.  Examples:
d1145 1
d1147 2
a1148 1
	close(ARGV) if (eof);	# Not eof().
d1153 1
a1153 1
	if (eof()) {
d1155 1
a1155 1
	    close(ARGV);	# close or break; is needed if we
d1162 2
a1163 1
input operators return undef when they run out of data.
d1169 4
a1172 2
EXPR is parsed and executed as if it were a little Perl program.  It
is executed in the context of the current Perl program, so that any
d1174 19
a1192 4
The value returned is the value of the last expression evaluated, or a
return statement may be used, just as with subroutines.  The last
expression is evaluated in scalar or array context, depending on the
context of the eval.
d1194 2
a1195 2
If there is a syntax error or runtime error, or a die() statement is
executed, an undefined value is returned by eval(), and C<$@@> is set to the
d1197 4
a1200 5
string.  If EXPR is omitted, evaluates C<$_>.  The final semicolon, if
any, may be omitted from the expression.  Beware that using eval()
neither silences perl from printing warnings to STDERR, nor does it
stuff the text of warning messages into C<$@@>.  To do either of those,
you have to use the C<$SIG{__WARN__}> facility.  See warn() and L<perlvar>.
d1202 2
a1203 2
Note that, because eval() traps otherwise-fatal errors, it is useful for
determining whether a particular feature (such as socket() or symlink())
d1219 1
a1219 1
    eval { $answer = };
d1224 5
a1228 4
When using the eval{} form as an exception trap in libraries, you may
wish not to trigger any C<__DIE__> hooks that user code may have
installed.  You can use the C<local $SIG{__DIE__}> construct for this
purpose, as shown in this example:
d1231 2
a1232 1
    eval { local $SIG{'__DIE__'}; $answer = $a / $b; }; warn $@@ if $@@;
d1235 1
a1235 1
die() again, which has the effect of changing their error messages:
d1239 4
a1242 3
       local $SIG{'__DIE__'} = sub { (my $x = $_[0]) =~ s/foo/bar/g; die $x };
       eval { die "foo foofs here" };
       print $@@ if $@@;                # prints "bar barfs here"
d1245 4
a1248 1
With an eval(), you should be especially careful to remember what's
d1257 1
a1257 1
    eval "\$$x++"	# CASE 5
d1261 1
a1261 1
the variable $x.  (Although case 2 has misleading double quotes making
d1263 1
a1263 1
and 4 likewise behave in the same way: they run the code '$x', which
d1271 3
d1276 4
a1279 2
The exec() function executes a system command I<AND NEVER RETURNS> -
use system() instead of exec() if you want it to return. It fails and
d1283 19
a1301 10
If there is more than one argument in LIST, or if LIST is an array with
more than one value, calls execvp(3) with the arguments in LIST.  If
there is only one scalar argument, the argument is checked for shell
metacharacters, and if there are any, the entire argument is passed to
the system's command shell for parsing (this is C</bin/sh -c> on Unix
platforms, but varies on other platforms).  If there are no shell
metacharacters in the argument, it is split into words and passed
directly to execvp(), which is more efficient.  Note: exec() and
system() do not flush your output buffer, so you may need to set C<$|>
to avoid lost output.  Examples:
d1324 19
d1348 3
a1350 3
    print "Exists\n" if exists $array{$key};
    print "Defined\n" if defined $array{$key};
    print "True\n" if $array{$key};
d1358 16
a1373 1
    if (exists $ref->[$x][$y]{$key}) { ... }
d1377 1
a1377 4
Evaluates EXPR and exits immediately with that value.  (Actually, it
calls any defined C<END> routines first, but the C<END> routines may not
abort the exit.  Likewise any object destructors that need to be called
are called before exit.)  Example:
d1382 17
a1398 8
See also die().  If EXPR is omitted, exits with 0 status.  The only
universally portable values for EXPR are 0 for success and 1 for error;
all other values are subject to unpredictable interpretation depending
on the environment in which the Perl program is running.

You shouldn't use exit() to abort a subroutine if there's any chance that
someone might want to trap whatever error happened.  Use die() instead,
which can be trapped by an eval().
d1404 1
a1404 1
Returns I<e> (the natural logarithm base) to the power of EXPR.
d1413 2
a1414 3
first to get the correct function definitions.  Argument processing and
value return works just like ioctl() below.  Note that fcntl() will produce
a fatal error if used on a machine that doesn't implement fcntl(2).
d1418 12
a1429 1
    fcntl($filehandle, F_GETLK, $packed_return_buffer);
d1433 12
a1444 3
Returns the file descriptor for a filehandle.  This is useful for
constructing bitmaps for select().  If FILEHANDLE is an expression, the
value is taken as the name of the filehandle.
d1448 17
a1464 5
Calls flock(2), or an emulation of it, on FILEHANDLE.  Returns TRUE for
success, FALSE on failure.  Produces a fatal error if used on a machine
that doesn't implement flock(2), fcntl(2) locking, or lockf(3).  flock()
is Perl's portable file locking interface, although it locks only entire
files, not records.
d1472 1
a1472 1
LOCK_EX then flock() will return immediately rather than blocking
d1475 2
a1476 2
To avoid the possibility of mis-coordination, Perl flushes FILEHANDLE
before (un)locking it.
d1480 1
a1480 1
are the semantics that lockf(3) implements.  Most (all?) systems
d1484 2
a1485 2
Note also that some versions of flock() cannot lock things over the
network; you would need to use the more system-specific fcntl() for
d1513 4
d1521 9
a1529 2
Does a fork(2) system call.  Returns the child pid to the parent process
and 0 to the child process, or C<undef> if the fork is unsuccessful.
d1531 2
a1532 22
you may need to set C<$|> ($AUTOFLUSH in English) or call the autoflush()
method of IO::Handle to avoid duplicate output.

If you fork() without ever waiting on your children, you will accumulate
zombies:

    $SIG{CHLD} = sub { wait };

There's also the double-fork trick (error checking on
fork() returns omitted);

    unless ($pid = fork) {
	unless (fork) {
	    exec "what you really wanna do";
	    die "no exec";
	    # ... or ...
	    ## (some_perl_code_here)
	    exit 0;
	}
	exit 0;
    }
    waitpid($pid,0);
d1534 4
a1537 2
See also L<perlipc> for more examples of forking and reaping
moribund children.
d1541 3
a1543 2
if you exit, the remote server (such as, say, httpd or rsh) won't think
you're done.  You should reopen those to /dev/null if it's any issue.
d1547 1
a1547 1
Declare a picture format with use by the write() function.  For
a1561 1

d1564 1
a1564 1
This is an internal function used by C<format>s, though you may call it
d1567 2
a1568 2
accumulator, C<$^A> (or $ACCUMULATOR in English).
Eventually, when a write() is done, the contents of
d1570 2
a1571 2
yourself and then set C<$^A> back to "".  Note that a format typically
does one formline() per line of form, but the formline() function itself
d1579 1
a1579 1
formline() always returns TRUE.  See L<perlform> for other examples.
d1586 5
a1590 3
or a null string at end of file.  If FILEHANDLE is omitted, reads from STDIN.
This is not particularly efficient.  It cannot be used to get unbuffered
single-characters, however.  For that, try something more like:
d1612 4
a1615 4
The POSIX::getattr() function can do this more portably on systems
alleging POSIX compliance.
See also the C<Term::ReadKey> module from your nearest CPAN site;
details on CPAN can be found on L<perlmod/CPAN>.
d1619 3
a1621 2
Returns the current login from F</etc/utmp>, if any.  If null, use
getpwuid().
d1625 2
a1626 2
Do not consider getlogin() for authentication: it is not as
secure as getpwuid().
d1641 1
a1641 1
a PID of 0 to get the current process group for the
d1644 2
a1645 2
group of current process.  Note that the POSIX version of getpgrp()
does not accept a PID argument, so only PID==0 is truly portable.
d1718 1
a1718 1
system library.  Within a list context, the return values from the
d1722 1
a1722 1
       $quota,$comment,$gcos,$dir,$shell) = getpw*
d1731 1
a1731 1
Within a scalar context, you get the name, unless the function was a
d1735 28
a1762 7
    $uid = getpwnam
    $name = getpwuid
    $name = getpwent
    $gid = getgrnam
    $name = getgrgid
    $name = getgrent
    etc.
d1764 1
a1764 1
The $members value returned by I<getgr*()> is a space separated list of
d1769 1
a1769 1
@@addrs value returned by a successful call is a list of the raw
d1776 23
d1809 1
a1809 1
Returns the socket option requested, or undefined if there is an error.
d1815 5
a1819 5
Returns the value of EXPR with filename expansions such as a shell would
do.  This is the internal function implementing the C<E<lt>*.cE<gt>>
operator, but you can use it directly.  If EXPR is omitted, $_ is used.
The C<E<lt>*.cE<gt>> operator is discussed in more detail in
L<perlop/"I/O Operators">.
d1832 6
a1837 3
In particular this means that $mon has the range 0..11 and $wday has
the range 0..6 with sunday as day 0.  Also, $year is the number of
years since 1900, I<not> simply the last two digits of the year.
d1841 1
a1841 1
In a scalar context, returns the ctime(3) value:
d1845 1
a1845 1
Also see the timegm() function provided by the Time::Local module,
d1848 14
d1868 1
a1868 1
The goto-LABEL form finds the statement labeled with LABEL and resumes
d1870 1
a1870 1
requires initialization, such as a subroutine or a foreach loop.  It
d1872 1
a1872 1
or to get out of a block or subroutine given to sort().
d1875 2
a1876 2
construct such as last or die.  The author of Perl has never felt the
need to use this form of goto (in Perl, that is--C is another matter).
d1878 2
a1879 2
The goto-EXPR form expects a label name, whose scope will be resolved
dynamically.  This allows for computed gotos per FORTRAN, but isn't
d1884 1
a1884 1
The goto-&NAME form is highly magical, and substitutes a call to the
d1886 1
a1886 1
AUTOLOAD subroutines that wish to load another subroutine and then
d1888 2
a1889 2
(except that any modifications to @@_ in the current subroutine are
propagated to the other subroutine.)  After the goto, not even caller()
d1896 2
a1897 3
This is similar in spirit to, but not the same as, grep(1)
and its relatives.  In particular, it is not limited to using
regular expressions.
d1900 2
a1901 2
$_ to each element) and returns the list value consisting of those
elements for which the expression evaluated to TRUE.  In a scalar
d1910 8
a1917 8
Note that, because $_ is a reference into the list value, it can be used
to modify the elements of the array.  While this is useful and
supported, it can cause bizarre results if the LIST is not a named
array.  Similarly, grep returns aliases into the original list,
much like the way that L<Foreach Loops>'s index variable aliases the list
elements.  That is, modifying an element of a list returned by grep
(for example, in a C<foreach>, C<map> or another C<grep>)
actually modifies the element in the original list.
d1920 1
d1925 3
a1927 3
Interprets EXPR as a hex string and returns the corresponding
value.  (To convert strings that might start with either 0 or 0x
see L</oct>.)  If EXPR is omitted, uses $_.
d1934 1
a1934 1
There is no builtin import() function.  It is merely an ordinary
d1936 1
a1936 1
names to another module.  The use() function calls the import() method
d1943 7
a1949 5
Returns the position of the first occurrence of SUBSTR in STR at or after
POSITION.  If POSITION is omitted, starts searching from the beginning of
the string.  The return value is based at 0 (or whatever you've set the C<$[>
variable to--but don't do that).  If the substring is not found, returns
one less than the base, ordinarily -1.
d1955 8
a1962 1
Returns the integer portion of EXPR.  If EXPR is omitted, uses $_.
d1966 1
a1966 1
Implements the ioctl(2) function.  You'll probably have to say
d1970 1
a1970 1
first to get the correct function definitions.  If F<ioctl.ph> doesn't
d1973 1
a1973 1
(There is a Perl script called B<h2ph> that comes with the Perl kit which
d1976 1
a1976 1
will be passed as the third argument of the actual ioctl call.  (If SCALAR
d1979 1
a1979 1
TRUE, add a 0 to the scalar before using it.)  The pack() and unpack()
d1981 1
a1981 1
ioctl().  The following example sets the erase character to DEL.
d1995 1
a1995 1
The return value of ioctl (and fcntl) is as follows:
d2006 1
a2006 1
    ($retval = ioctl(...)) || ($retval = -1);
d2009 3
d2014 2
a2015 3
Joins the separate strings of LIST into a single string with
fields separated by the value of EXPR, and returns the string.
Example:
d2017 1
a2017 1
    $_ = join(':', $login,$passwd,$uid,$gid,$gcos,$home,$shell);
d2019 1
a2019 1
See L<perlfunc/split>.
d2023 7
a2029 5
Returns a normal array consisting of all the keys of the named hash.  (In
a scalar context, returns the number of keys.)  The keys are returned in
an apparently random order, but it is the same order as either the
values() or each() function produces (given that the hash has not been
modified).  As a side effect, it resets HASH's iterator.
d2045 1
a2045 1
To sort an array by value, you'll need to use a C<sort> function.
d2048 1
a2048 1
    foreach $key (sort { $hash{$b} <=> $hash{$a} } keys %hash)) {
d2052 1
a2052 1
As an lvalue C<keys> allows you to increase the number of hash buckets
d2059 2
a2060 1
then C<%hash> will have at least 200 buckets allocated for it.  These
d2064 1
a2064 1
C<keys> in this way (but you needn't worry about doing this by accident,
d2067 2
d2095 1
a2095 1
	...
d2098 7
d2110 1
a2110 1
implementing the \L escape in double-quoted strings.
d2113 1
a2113 1
If EXPR is omitted, uses $_.
d2120 1
a2120 1
the internal function implementing the \l escape in double-quoted strings.
d2123 1
a2123 1
If EXPR is omitted, uses $_.
d2130 3
a2132 1
omitted, returns length of $_.
d2136 2
a2137 2
Creates a new filename linked to the old filename.  Returns 1 for
success, 0 otherwise.
d2142 1
a2142 1
it succeeded, FALSE otherwise.  See example in L<perlipc/"Sockets: Client/Server Communication">.
d2146 3
a2148 4
A local modifies the listed variables to be local to the enclosing block,
subroutine, C<eval{}>, or C<do>.  If more than one value is listed, the
list must be placed in parentheses.  See L<perlsub/"Temporary Values via
local()"> for details, including issues with tied arrays and hashes.
d2150 4
a2153 3
But you really probably want to be using my() instead, because local() isn't
what most people think of as "local").  See L<perlsub/"Private Variables
via my()"> for details.
d2166 6
a2171 3
In particular this means that $mon has the range 0..11 and $wday has
the range 0..6 with sunday as day 0.  Also, $year is the number of
years since 1900, that is, $year is 123 in year 2023.
d2175 1
a2175 1
In a scalar context, returns the ctime(3) value:
d2179 12
a2190 4
This scalar value is B<not> locale dependent, see L<perllocale>,
but instead a Perl builtin.
Also see the Time::Local module, and the strftime(3) and mktime(3)
function available via the POSIX module.
d2196 11
a2206 2
Returns logarithm (base I<e>) of EXPR.  If EXPR is omitted, returns log
of $_.
d2214 4
a2217 3
Does the same thing as the stat() function, but stats a symbolic link
instead of the file the symbolic link points to.  If symbolic links are
unimplemented on your system, a normal stat() is done.
d2219 1
a2219 1
If EXPR is omitted, stats $_.
d2229 1
a2229 1
Evaluates the BLOCK or EXPR for each element of LIST (locally setting $_ to each
d2234 2
d2249 6
a2254 5
Note that, because $_ is a reference into the list value, it can be used
to modify the elements of the array.  While this is useful and
supported, it can cause bizarre results if the LIST is not a named
array.  See also L</grep> for an array composed of those items of the 
original list for which the BLOCK or EXPR evaluates to true.
d2258 10
a2267 3
Creates the directory specified by FILENAME, with permissions specified
by MODE (as modified by umask).  If it succeeds it returns 1, otherwise
it returns 0 and sets C<$!> (errno).
d2271 9
a2279 4
Calls the System V IPC function msgctl(2).  If CMD is &IPC_STAT, then ARG
must be a variable which will hold the returned msqid_ds structure.
Returns like ioctl: the undefined value for error, "0 but true" for
zero, or the actual return value otherwise.
d2283 3
a2285 2
Calls the System V IPC function msgget(2).  Returns the message queue id,
or the undefined value if there is an error.
d2292 2
a2293 1
successful, or FALSE if there is an error.
d2299 4
a2302 4
SIZE.  Note that if a message is received, the message type will be the
first thing in VAR, and the maximum length of VAR is SIZE plus the size
of the message type.  Returns TRUE if successful, or FALSE if there is
an error.
d2306 2
a2307 2
A "my" declares the listed variables to be local (lexically) to the
enclosing block, subroutine, C<eval>, or C<do/require/use>'d file.  If
d2320 1
a2320 1
	...
d2327 7
d2336 1
a2336 1
See the "use" function, which "no" is the opposite of.
d2343 3
a2345 2
value.  (If EXPR happens to start off with 0x, interprets it as
a hex string instead.)  The following will handle decimal, octal, and
d2350 2
a2351 2
If EXPR is omitted, uses $_.  This function is commonly used when
a string such as "644" needs to be converted into a file mode, for
d2363 28
a2390 21
(Note that lexical variables--those declared with C<my>--will not work
for this purpose; so if you're using C<my>, specify EXPR in your call
to open.)

If the filename begins with '<' or nothing, the file is opened for input.
If the filename begins with '>', the file is truncated and opened for
output.  If the filename begins with '>>', the file is opened for
appending.  You can put a '+' in front of the '>' or '<' to indicate that
you want both read and write access to the file; thus '+<' is almost
always preferred for read/write updates--the '+>' mode would clobber the
file first.  The prefix and the filename may be separated with spaces.
These various prefixes correspond to the fopen(3) modes of 'r', 'r+', 'w',
'w+', 'a', and 'a+'.

If the filename begins with "|", the filename is interpreted as a command
to which output is to be piped, and if the filename ends with a "|", the
filename is interpreted See L<perlipc/"Using open() for IPC"> for more
examples of this.  as command which pipes input to us.  (You may not have
a raw open() to a command that pipes both in I<and> out, but see
L<IPC::Open2>, L<IPC::Open3>, and L<perlipc/"Bidirectional Communication">
for alternatives.)
d2392 2
a2393 2
Opening '-' opens STDIN and opening 'E<gt>-' opens STDOUT.  Open returns
nonzero upon success, the undefined value otherwise.  If the open
d2400 4
a2403 4
dealing with this.  The key distinction between systems that need binmode
and those that don't is their text file formats.  Systems like Unix and
Plan9 that delimit lines with a single character, and that encode that
character in C as '\n', do not need C<binmode>.  The rest need it.
d2406 2
a2407 2
if the request failed, so C<open> is frequently used in connection with
C<die>. Even if C<die> won't do what you want (say, in a CGI script,
d2409 1
a2409 1
modules which can help with that problem)) you should always check
d2438 1
a2438 1
	local($filename, $input) = @@_;
d2445 1
d2451 1
a2451 1
	    ...		# whatever
d2456 4
a2459 4
with "E<gt>&", in which case the rest of the string is interpreted as the
name of a filehandle (or file descriptor, if numeric) which is to be
duped and opened.  You may use & after E<gt>, E<gt>E<gt>, E<lt>, +E<gt>,
+E<gt>E<gt>, and +E<lt>.  The
d2467 2
a2468 2
    open(SAVEOUT, ">&STDOUT");
    open(SAVEERR, ">&STDERR");
d2482 2
a2483 2
    open(STDOUT, ">&SAVEOUT");
    open(STDERR, ">&SAVEERR");
d2488 2
a2489 3

If you specify "E<lt>&=N", where N is a number, then Perl will do an
equivalent of C's fdopen() of that file descriptor; this is more
d2494 1
a2494 1
If you open a pipe on the command "-", i.e., either "|-" or "-|", then
d2496 1
a2496 1
of the child within the parent process, and 0 within the child
d2515 1
a2515 1
NOTE: On any operation which may do a fork, unflushed buffers remain
d2517 3
a2519 1
avoid duplicate output.
d2524 31
a2554 5
Using the constructor from the IO::Handle package (or one of its
subclasses, such as IO::File or IO::Socket),
you can generate anonymous filehandles which have the scope of whatever
variables hold references to them, and automatically close whenever
and however you leave that scope:
d2557 1
a2557 1
    ...
d2569 1
a2569 21
The filename that is passed to open will have leading and trailing
whitespace deleted.  To open a file with arbitrary weird
characters in it, it's necessary to protect any leading and trailing
whitespace thusly:

    $file =~ s#^(\s)#./$1#;
    open(FOO, "< $file\0");

If you want a "real" C open() (see L<open(2)> on your system), then
you should use the sysopen() function.  This is another way to
protect your filenames from interpretation.  For example:

    use IO::Handle;
    sysopen(HANDLE, $path, O_RDWR|O_CREAT|O_EXCL, 0700)
	or die "sysopen $path: $!";
    HANDLE->autoflush(1);
    HANDLE->print("stuff $$\n");
    seek(HANDLE, 0, 0);
    print "File contains: ", <HANDLE>;

See L</seek()> for some details about mixing reading and writing.
d2573 2
a2574 2
Opens a directory named EXPR for processing by readdir(), telldir(),
seekdir(), rewinddir(), and closedir().  Returns TRUE if successful.
d2582 1
a2582 1
EXPR is omitted, uses $_.  For the reverse, see L</chr>.
d2591 1
d2593 2
a2594 1
    a	An ascii string, will be null padded.
d2610 4
a2613 3
	  (This 'integer' is _at_least_ 32 bits wide.  Its exact size
	   depends on what a local C compiler calls 'int', and may
	   even be larger than the 'long' described in the next item.)
d2627 6
d2642 3
a2644 3
	integer in base 128, most significant digit first, with as few
	digits as possible.  Bit eight (the high bit) is set on each
	byte except the last.
d2650 95
a2744 24
Each letter may optionally be followed by a number which gives a repeat
count.  With all types except "a", "A", "b", "B", "h", "H", and "P" the
pack function will gobble up that many values from the LIST.  A * for the
repeat count means to use however many items are left.  The "a" and "A"
types gobble just one value, but pack it as a string of length count,
padding with nulls or spaces as necessary.  (When unpacking, "A" strips
trailing spaces and nulls, but "a" does not.)  Likewise, the "b" and "B"
fields pack a string that many bits long.  The "h" and "H" fields pack a
string that many nybbles long.  The "p" type packs a pointer to a null-
terminated string.  You are responsible for ensuring the string is not a
temporary value (which can potentially get deallocated before you get
around to using the packed result).  The "P" packs a pointer to a structure
of the size indicated by the length. A NULL pointer is created if the 
corresponding value for "p" or "P" is C<undef>.
Real numbers (floats and doubles) are
in the native machine format only; due to the multiplicity of floating
formats around, and the lack of a standard "network" representation, no
facility for interchange has been made.  This means that packed floating
point data written on one machine may not be readable on another - even if
both use IEEE floating point arithmetic (as the endian-ness of the memory
representation is not part of the IEEE spec).  Note that Perl uses doubles
internally for all numeric calculation, and converting from double into
float and thence back to double again will lose precision (i.e.,
C<unpack("f", pack("f", $foo)>) will not in general equal $foo).
d2748 1
a2748 1
    $foo = pack("cccc",65,66,67,68);
d2750 1
a2750 1
    $foo = pack("c4",65,66,67,68);
d2772 7
d2783 3
a2785 1
The same template may generally also be used in the unpack function.
d2790 18
a2807 12
of the package declaration is from the declaration itself through the end of
the enclosing block (the same scope as the local() operator).  All further
unqualified dynamic identifiers will be in this namespace.  A package
statement affects only dynamic variables--including those you've used
local() on--but I<not> lexical variables created with my().  Typically it
would be the first declaration in a file to be included by the C<require>
or C<use> operator.  You can switch into a package in more than one place;
it influences merely which symbol table is used by the compiler for the
rest of that block.  You can refer to variables and filehandles in other
packages by prefixing the identifier with the package name and a double
colon:  C<$Package::Variable>.  If the package name is null, the C<main>
package as assumed.  That is, C<$::sail> is equivalent to C<$main::sail>.
d2823 4
d2832 1
a2832 1
1.  Has a similar effect to
d2837 2
a2838 3
If ARRAY is omitted, pops the
@@ARGV array in the main program, and the @@_ array in subroutines, just
like shift().
d2845 1
a2845 1
is in question ($_ is used when the variable is not specified).  May be
d2858 14
a2871 14
the variable contains the name of or a reference to the filehandle, thus introducing one
level of indirection.  (NOTE: If FILEHANDLE is a variable and the next
token is a term, it may be misinterpreted as an operator unless you
interpose a + or put parentheses around the arguments.)  If FILEHANDLE is
omitted, prints by default to standard output (or to the last selected
output channel--see L</select>).  If LIST is also omitted, prints $_ to
STDOUT.  To set the default output channel to something other than
STDOUT use the select operation.  Note that, because print takes a
LIST, anything in the LIST is evaluated in a list context, and any
subroutine that you call will have one or more of its expressions
evaluated in a list context.  Also be careful not to follow the print
keyword with a left parenthesis unless you want the corresponding right
parenthesis to terminate the arguments to the print--interpose a + or
put parentheses around all the arguments.
d2883 3
a2885 2
Equivalent to C<print FILEHANDLE sprintf(FORMAT, LIST)>.  The first argument
of the list will be interpreted as the printf format.  If C<use locale> is
d2889 2
a2890 2
Don't fall into the trap of using a printf() when a simple
print() would do.  The print() is more efficient, and less
d2899 7
d2922 2
d2928 1
a2928 1
Generalized quotes.  See L<perlop>.
d2939 1
a2939 1
the \Q escape in double-quoted strings.
d2941 1
a2941 1
If EXPR is omitted, uses $_.
d2947 1
a2947 1
Returns a random fractional number greater than or equal to 0 and less
d2949 2
a2950 2
omitted, the value 1 is used.  Automatically calls srand() unless
srand() has already been called.  See also srand().
d2961 6
a2966 6
specified FILEHANDLE.  Returns the number of bytes actually read, or
undef if there was an error.  SCALAR will be grown or shrunk to the
length actually read.  An OFFSET may be specified to place the read
data at some other place than the beginning of the string.  This call
is actually implemented in terms of stdio's fread call.  To get a true
read system call, see sysread().
d2970 2
a2971 2
Returns the next directory entry for a directory opened by opendir().
If used in a list context, returns all the rest of the entries in the
d2973 1
a2973 1
a scalar context or a null list in a list context.
d2975 1
a2975 1
If you're planning to filetest the return values out of a readdir(), you'd
d2977 1
a2977 1
chdir() there, it would have been testing the wrong file.
d2985 11
a2995 4
Reads from the file handle EXPR.  In scalar context, a single line
is read and returned.  In list context, reads until end-of-file is
reached and returns a list of lines (however you've defined lines
with $/ or $INPUT_RECORD_SEPARATOR).
d3000 3
d3010 1
a3010 1
omitted, uses $_.
d3014 1
a3014 1
EXPR is interpolated and then executed as a system command.
d3018 1
a3018 1
(however you've defined lines with $/ or $INPUT_RECORD_SEPARATOR).
d3023 1
a3023 1
=item recv SOCKET,SCALAR,LEN,FLAGS
d3027 1
a3027 1
Actually does a C recvfrom(), so that it can returns the address of the
d3052 1
a3052 1
		    s|^|$front{|;
d3060 7
d3072 1
a3072 1
is not specified, $_ will be used.  The value returned depends on the
d3084 1
a3084 1
name is returned instead.  You can think of ref() as a typeof() operator.
d3089 1
a3089 1
    if (!ref ($r) {
d3092 3
d3100 7
a3106 2
Changes the name of a file.  Returns 1 for success, 0 otherwise.  Will
not work across file system boundaries.
d3112 1
a3112 1
Demands some semantics specified by EXPR, or by $_ if EXPR is not
d3118 1
a3118 1
essentially just a variety of eval().  Has semantics similar to the following
d3122 1
a3122 1
	local($filename) = @@_;
d3124 1
a3124 1
	local($realfilename,$result);
d3138 1
a3138 1
	$result;
d3144 1
a3144 1
end such a file with "1;" unless you're sure it'll return TRUE
d3153 20
a3172 2
For a yet-more-powerful import facility, see L</use> and
L<perlmod>.
d3179 1
a3179 1
variables and reset ?? searches so that they work again.  The
d3183 1
a3183 1
omitted, one-match searches (?pattern?) are reset to match again.  Resets
d3189 1
a3189 1
    reset;		# just reset ?? searches
d3191 5
a3195 4
Resetting "A-Z" is not recommended because you'll wipe out your
ARGV and ENV arrays.  Resets only package variables--lexical variables
are unaffected, but they clean themselves up on scope exit anyway,
so you'll probably want to use them instead.  See L</my>.
d3201 2
a3202 2
Returns from a subroutine, eval(), or do FILE with the value of the
given EXPR.  Evaluation of EXPR may be in a list, scalar, or void
d3204 7
a3210 6
may vary from one execution to the next (see wantarray()).  If no EXPR
is given, returns an empty list in a list context, an undefined value in
a scalar context, or nothing in a void context.

(Note that in the absence of a return, a subroutine, eval, or do FILE
will automatically return the value of the last expression evaluated.)
d3214 4
a3217 4
In a list context, returns a list value consisting of the elements
of LIST in the opposite order.  In a scalar context, concatenates the
elements of LIST, and returns a string value consisting of those bytes,
but in the opposite order.
d3222 1
a3222 1
    print scalar reverse <>;	# byte tac, last line tsrif
d3228 1
a3228 1
on a large hash.
d3235 1
a3235 1
readdir() routine on DIRHANDLE.
d3241 1
a3241 1
Works just like index except that it returns the position of the LAST
d3249 3
a3251 3
Deletes the directory specified by FILENAME if it is empty.  If it
succeeds it returns 1, otherwise it returns 0 and sets C<$!> (errno).  If
FILENAME is omitted, uses $_.
d3259 1
a3259 1
Forces EXPR to be interpreted in a scalar context and returns the value
d3265 1
a3265 1
be interpolated in a list context because it's in practice never
d3270 16
d3288 1
a3288 1
Sets FILEHANDLE's position, just like the fseek() call of stdio.
d3290 2
a3291 2
filehandle.  The values for WHENCE are 0 to set the new position to
POSITION, 1 to set it to the current position plus POSITION, and 2 to
d3293 2
a3294 2
use the constants SEEK_SET, SEEK_CUR, and SEEK_END from either the
IO::Seekable or the POSIX module.  Returns 1 upon success, 0 otherwise.
d3296 8
a3303 8
If you want to position file for sysread() or syswrite(), don't use
seek() -- buffering makes its effect on the file's system position
unpredictable and non-portable.  Use sysseek() instead.

On some systems you have to do a seek whenever you switch between reading
and writing.  Amongst other things, this may have the effect of calling
stdio's clearerr(3).  A WHENCE of 1 (SEEK_CUR) is useful for not moving
the file position:
d3309 1
a3309 1
seek() to reset things.  The seek() doesn't change the current position,
d3317 2
a3318 1
	for ($curpos = tell(FILE); $_ = <FILE>; $curpos = tell(FILE)) {
d3327 2
a3328 2
Sets the current position for the readdir() routine on DIRHANDLE.  POS
must be a value returned by telldir().  Has the same caveats about
d3338 1
a3338 1
effects: first, a C<write> or a C<print> without a filehandle will
d3363 1
a3363 1
can be constructed using fileno() and vec(), along these lines:
d3374 2
a3375 2
	local(@@fhlist) = split(' ',$_[0]);
	local($bits);
d3392 2
a3393 2
Most systems do not bother to return anything useful in $timeleft, so
calling select() in a scalar context just returns $nfound.
d3397 2
a3398 2
capable of returning the $timeleft.  If not, they always return
$timeleft equal to the supplied $timeout.
d3404 3
a3406 2
B<WARNING>: Do not attempt to mix buffered I/O (like read() or E<lt>FHE<gt>)
with select().  You have to use sysread() instead.
d3410 9
a3418 5
Calls the System V IPC function semctl.  If CMD is &IPC_STAT or
&GETALL, then ARG must be a variable which will hold the returned
semid_ds structure or semaphore value array.  Returns like ioctl: the
undefined value for error, "0 but true" for zero, or the actual return
value otherwise.
d3423 2
a3424 1
the undefined value if there is an error.
d3434 1
a3434 1
following code waits on semaphore $semnum of semaphore id $semid:
d3439 2
a3440 1
To signal the semaphore, replace "-1" with "1".
d3448 1
a3448 1
destination to send TO, in which case it does a C sendto().  Returns
d3450 1
a3450 1
error.
d3455 1
a3455 1
Sets the current process group for the specified PID, 0 for the current
d3458 2
a3459 2
0,0.  Note that the POSIX version of setpgrp() does not accept any
arguments, so only setpgrp 0,0 is portable.
d3470 1
a3470 1
error.  OPTVAL may be specified as undef if you don't want to pass an
d3480 6
a3485 4
@@ARGV array in the main program, and the @@_ array in subroutines.
(This is determined lexically.)  See also unshift(), push(), and pop().
Shift() and unshift() do the same thing to the left end of an array
that pop() and push() do to the right end.
d3489 9
a3497 4
Calls the System V IPC function shmctl.  If CMD is &IPC_STAT, then ARG
must be a variable which will hold the returned shmid_ds structure.
Returns like ioctl: the undefined value for error, "0 but true" for
zero, or the actual return value otherwise.
d3503 1
d3511 1
a3511 1
detaching from it.  When reading, VAR must be a variable which will
d3515 2
d3523 10
d3538 1
a3538 1
returns sine of $_.
d3540 1
a3540 1
For the inverse sine operation, you may use the POSIX::asin()
d3550 4
a3553 3
May be interrupted by sending the process a SIGALRM.  Returns the
number of seconds actually slept.  You probably cannot mix alarm() and
sleep() calls, because sleep() is often implemented using alarm().
d3557 3
a3559 1
always sleep the full amount.
d3562 2
a3563 2
syscall() interface to access setitimer(2) if your system supports it,
or else see L</select()> below.
d3565 1
a3565 1
See also the POSIX module's sigpause() function.
d3571 2
a3572 2
system call of the same name.  You should "use Socket;" first to get
the proper definitions imported.  See the example in L<perlipc/"Sockets: Client/Server Communication">.
d3581 10
d3598 1
a3598 1
is omitted, sorts in standard string comparison order.  If SUBNAME is
d3600 1
a3600 1
less than, equal to, or greater than 0, depending on how the elements
d3603 4
a3606 3
scalar variable name, in which case the value provides the name of the
subroutine to use.  In place of a SUBNAME, you can provide a BLOCK as
an anonymous, in-line sort subroutine.
d3611 3
a3613 3
the subroutine not via @@_ but as the package global variables $a and
$b (see example below).  They are passed by reference, so don't
modify $a and $b.  And don't try to declare them as lexicals either.
d3616 1
a3616 1
loop control operators described in L<perlsyn> or with goto().
d3694 2
a3695 2
If you're using strict, you I<MUST NOT> declare $a
and $b as lexicals.  They are package globals.  That means
d3709 3
a3711 5
inconsistent results (sometimes saying $x[1] is less than $x[2] and
sometimes saying the opposite, for example) the Perl interpreter will
probably crash and dump core.  This is entirely due to and dependent
upon your system's qsort(3) library routine; this routine often avoids
sanity checks in the interest of speed.
d3720 8
a3727 4
replaces them with the elements of LIST, if any.  Returns the elements
removed from the array.  The array grows or shrinks as necessary.  If
LENGTH is omitted, removes everything from OFFSET onward.  The
following equivalences hold (assuming C<$[ == 0>):
d3729 1
a3729 1
    push(@@a,$x,$y)	splice(@@a,$#a+1,0,$x,$y)
d3733 1
a3733 1
    $a[$x] = $y		splice(@@a,$x,1,$y);
d3738 2
a3739 2
	local(@@a) = splice(@@_,0,shift);
	local(@@b) = splice(@@_,0,shift);
d3756 2
a3757 1
Splits a string into an array of strings, and returns it.
d3759 5
a3763 4
If not in a list context, returns the number of fields found and splits into
the @@_ array.  (In a list context, you can force the split into @@_ by
using C<??> as the pattern delimiters, but it still returns the array
value.)  The use of implicit split to @@_ is deprecated, however.
d3765 1
a3765 1
If EXPR is omitted, splits the $_ string.  If PATTERN is also omitted,
d3770 4
a3773 4
If LIMIT is specified and is not negative, splits into no more than
that many fields (though it may split into fewer).  If LIMIT is
unspecified, trailing null fields are stripped (which potential users
of pop() would do well to remember).  If LIMIT is negative, it is
d3804 1
a3804 1
If you had the entire header of a normal Unix email message in $header,
d3815 1
a3815 1
white space just as split with no arguments does.  Thus, split(' ') can
d3818 2
a3819 2
A split on /\s+/ is like a split(' ') except that any leading
whitespace produces a null first field.  A split with no arguments
d3824 5
a3828 5
    open(passwd, '/etc/passwd');
    while (<passwd>) {
	($login, $passwd, $uid, $gid, $gcos,
	    $home, $shell) = split(/:/);
	...
d3831 1
a3831 1
(Note that $shell above will still have a newline on it.  See L</chop>,
d3836 2
a3837 2
Returns a string formatted by the usual printf conventions of the
C library function sprintf().  See L<sprintf(3)> or L<printf(3)>
d3840 2
a3841 2
Perl does all of its own sprintf() formatting -- it emulates the C
function sprintf(), but it doesn't use it (except for floating-point
d3843 1
a3843 1
result, any non-standard extensions in your local sprintf() are not
d3846 1
a3846 1
Perl's sprintf() permits the following universally-known conversions:
d3884 1
a3884 1
   #       prefix octal with "0", hex with "0x"
d3886 3
a3888 2
   .number "precision": digits after decimal point for floating-point,
           max length for string, minimum length for integer
d3896 1
a3896 1
Where a number would appear in the flags, an asterisk ("*") may be
d3899 2
a3900 2
If a field width obtained through "*" is negative, it has the same
effect as the '-' flag: left-justification.
d3911 5
a3915 1
root of $_.
d3921 3
a3923 2
Sets the random number seed for the C<rand> operator.  If EXPR is
omitted, uses a semi-random value based on the current time and process
d3925 1
a3925 1
seed was just the current time().  This isn't a particularly good seed,
d3927 1
a3927 1
C<time ^ ($$ + ($$ << 15))>), but that isn't necessary any more.
d3929 1
a3929 1
In fact, it's usually not necessary to call srand() at all, because if
d3931 1
a3931 1
the C<rand> operator.  However, this was not the case in version of Perl
d3933 1
a3933 1
should call srand().
d3942 1
a3942 1
If you're particularly concerned with this, see the Math::TrulyRandom
d3945 1
a3945 1
Do I<not> call srand() multiple times in your program unless you know
d3947 1
a3947 1
function is to "seed" the rand() function so that rand() can produce
d3949 1
a3949 1
top of your program, or you I<won't> get random numbers out of rand()!
d3967 4
a3970 5
Returns a 13-element array giving the status info for a file, either the
file opened via FILEHANDLE, or named by EXPR.  If EXPR is omitted, it
stats $_.  Returns a null list if the stat fails.  Typically used as
follows:

d4005 20
d4037 2
a4038 2
one study active at a time -- if you study a different scalar the first
is "unstudied".  (The way study works is this: a linked list of every
d4040 1
a4040 1
example, where all the 'k' characters are.  From each search string,
d4045 1
a4045 1
For example, here is a loop which inserts index producing entries
d4050 4
a4053 4
	print ".IX foo\n" if /\bfoo\b/;
	print ".IX bar\n" if /\bbar\b/;
	print ".IX blurfl\n" if /\bblurfl\b/;
	...
d4057 2
a4058 2
In searching for /\bfoo\b/, only those locations in $_ that contain "f"
will be looked at, because "f" is rarer than "o".  In general, this is
d4064 1
a4064 1
runtime, you can build an entire loop as a string and eval that to
d4066 1
a4066 1
undefining $/ to input entire files as one record, this can be very
d4096 2
d4103 1
a4103 1
offset 0, or whatever you've set C<$[> to (but don't do that).
d4109 1
a4109 1
If you specify a substring which is partly outside the string, the part
d4113 10
a4122 6
You can use the substr() function
as an lvalue, in which case EXPR must be an lvalue.  If you assign
something shorter than LEN, the string will shrink, and if you assign
something longer than LEN, the string will grow to accommodate it.  To
keep the string the same length you may need to pad or chop your value
using sprintf().
d4127 1
a4127 1
Returns 1 for success, 0 otherwise.  On systems that don't support
d4131 1
a4131 1
    $symlink_exists = (eval {symlink("","")};, $@@ eq '');
d4141 4
a4144 1
receive any result that might be written into a string.  If your
d4146 2
a4147 2
numeric context, you may need to add 0 to them to force them to look
like numbers.
d4150 2
a4151 1
    syscall(&SYS_write, fileno(STDOUT), "hi there\n", 9);
d4157 2
a4158 2
If the system call fails, syscall returns -1 and sets C<$!> (errno).
Note that some system calls can legitimately return -1.  The proper
d4160 1
a4160 1
check the value of <$!> if syscall returns -1.
d4165 1
a4165 1
problem by using C<pipe> instead.
d4174 1
a4174 1
underlying operating system's C<open> function with the parameters
d4179 17
a4195 2
However, for historical reasons, some values are universal: zero means
read-only, one means write-only, and two means read/write.
d4197 1
a4197 8
If the file named by FILENAME does not exist and the C<open> call
creates it (typically because MODE includes the O_CREAT flag), then
the value of PERMS specifies the permissions of the newly created
file.  If PERMS is omitted, the default value is 0666, which allows
read and write for all.  This default is reasonable: see C<umask>.

The IO::File module provides a more object-oriented approach, if you're
into that kind of thing.
d4204 7
a4210 6
specified FILEHANDLE, using the system call read(2).  It bypasses
stdio, so mixing this with other kinds of reads, print(), write(),
seek(), or tell() can cause confusion because stdio usually buffers
data.  Returns the number of bytes actually read, or undef if there
was an error.  SCALAR will be grown or shrunk so that the last byte
actually read is the last byte of the scalar after the read.
d4216 1
a4216 1
in the string being padded to the required size with "\0" bytes before
d4219 4
d4226 8
a4233 8
bypasses stdio, so mixing this with reads (other than sysread()),
print(), write(), seek(), or tell() may cause confusion.  FILEHANDLE may
be an expression whose value gives the name of the filehandle.  The
values for WHENCE are 0 to set the new position to POSITION, 1 to set
the it to the current position plus POSITION, and 2 to set it to EOF
plus POSITION (typically negative).  For WHENCE, you may use the
constants SEEK_SET, SEEK_CUR, and SEEK_END from either the IO::Seekable
or the POSIX module.
d4236 1
a4236 1
of zero is returned as the string "0 but true"; thus sysseek() returns
d4242 3
a4244 1
Does exactly the same thing as "exec LIST" except that a fork is done
d4247 12
a4258 2
arguments.  The return value is the exit status of the program as
returned by the wait() call.  To get the actual exit value divide by
d4261 4
a4264 1
qx//, as described in L<perlop/"`STRING`">.
d4266 1
a4266 1
Because system() and backticks block SIGINT and SIGQUIT, killing the
d4273 2
a4274 25
Here's a more elaborate example of analysing the return value from
system() on a Unix system to check for all possibilities, including for
signals and core dumps.

    $rc = 0xffff & system @@args;
    printf "system(%s) returned %#04x: ", "@@args", $rc;
    if ($rc == 0) {
	print "ran with normal exit\n";
    }
    elsif ($rc == 0xff00) {
	print "command failed: $!\n";
    }
    elsif ($rc > 0x80) {
	$rc >>= 8;
	print "ran with non-zero exit status $rc\n";
    }
    else {
	print "ran with ";
	if ($rc &   0x80) {
	    $rc &= ~0x80;
	    print "core dump from ";
	}
	print "signal $rc\n"
    }
    $ok = ($rc != 0);
d4276 7
a4282 3
When the arguments get executed via the system shell, results will
be subject to its quirks and capabilities.  See L<perlop/"`STRING`">
for details.
d4288 2
d4291 8
a4298 7
specified FILEHANDLE, using the system call write(2).  It bypasses
stdio, so mixing this with reads (other than sysread()), print(),
write(), seek(), or tell() may cause confusion because stdio usually
buffers data.  Returns the number of bytes actually written, or undef
if there was an error.  If the LENGTH is greater than the available
data in the SCALAR after the OFFSET, only as much data as is available
will be written.
d4311 3
a4313 1
FILEHANDLE is omitted, assumes the file last read.
d4317 2
a4318 2
Returns the current position of the readdir() routines on DIRHANDLE.
Value may be given to seekdir() to access a particular location in a
d4327 10
a4336 10
of correct type.  Any additional arguments are passed to the "new"
method of the class (meaning TIESCALAR, TIEARRAY, or TIEHASH).
Typically these are arguments such as might be passed to the dbm_open()
function of C.  The object returned by the "new" method is also
returned by the tie() function, which would be useful if you want to
access other methods in CLASSNAME.

Note that functions such as keys() and values() may return huge array
values when used on large objects, like DBM files.  You may prefer to
use the each() function to iterate over such.  Example:
a4348 1
    DESTROY this
d4352 1
d4356 1
a4360 1
    DESTROY this
d4363 22
a4384 1
    [others TBD]
a4388 1
    DESTROY this
d4391 1
d4393 4
a4396 1
Unlike dbmopen(), the tie() function will not use or require a module
d4398 3
a4400 1
or the F<Config> module for interesting tie() implementations.
d4405 1
a4405 1
that was originally returned by the tie() call which bound the variable
d4414 1
a4414 1
Suitable for feeding to gmtime() and localtime().
d4418 1
a4418 1
Returns a four-element array giving the user and system times, in
d4425 1
a4425 1
The translation operator.  Same as y///. See L<perlop>.
d4433 2
a4434 1
on your system.
d4441 1
a4441 1
implementing the \U escape in double-quoted strings.
d4443 1
d4445 1
a4445 1
If EXPR is omitted, uses $_.
d4451 2
a4452 2
Returns the value of EXPR with the first character uppercased.  This is
the internal function implementing the \u escape in double-quoted strings.
d4455 1
a4455 1
If EXPR is omitted, uses $_.
d4462 31
a4492 3
If EXPR is omitted, merely returns the current umask.  Remember that a
umask is a number, usually given in octal; it is I<not> a string of octal
digits.  See also L</oct>, if all you have is a string.
d4499 8
a4506 7
scalar value, an entire array, an entire hash, or a subroutine name (using
"&").  (Using undef() will probably not do what you expect on most
predefined variables or DBM list values, so don't do that.)  Always
returns the undefined value.  You can omit the EXPR, in which case
nothing is undefined, but you still get an undefined value that you
could, for instance, return from a subroutine, assign to a variable or
pass as a parameter.  Examples:
d4509 1
a4509 1
    undef $bar{'blurfl'};             # Compare to: delete $bar{'blurfl'};
d4513 1
d4518 2
d4531 1
a4531 1
Note: unlink will not delete directories unless you are superuser and
d4534 1
a4534 1
filesystem.  Use rmdir instead.
d4536 1
a4536 1
If LIST is omitted, uses $_.
d4540 1
a4540 1
Unpack does the reverse of pack: it takes a string representing a
d4542 2
a4543 2
value.  (In a scalar context, it returns merely the first value
produced.)  The TEMPLATE has the same format as in the pack function.
d4547 1
a4547 1
	local($what,$where,$howmuch) = @@_;
d4561 1
a4561 1
	$checksum += unpack("%16C*", $_);
d4563 1
a4563 1
    $checksum %= 65536;
d4569 2
d4573 1
a4573 1
Breaks the binding between a variable and a package.  (See tie().)
d4577 1
a4577 1
Does the opposite of a C<shift>.  Or the opposite of a C<push>,
d4584 1
a4584 1
prepended elements stay in the same order.  Use reverse to do the
d4607 1
a4607 1
Perl version before C<use>ing library modules which have changed in
d4611 4
a4614 4
The BEGIN forces the require and import to happen at compile time.  The
require makes sure the module is loaded into memory if it hasn't been
yet.  The import is not a builtin--it's just an ordinary static method
call into the "Module" package to tell the module to import the list of
d4616 3
a4618 3
import method any way it likes, though most modules just choose to
derive their import method via inheritance from the Exporter class that
is defined in the Exporter module.  See L<Exporter>.  If no import
d4628 1
a4628 1
    BEGIN { require Module; }
d4634 1
a4634 1
value of the variable $Module::VERSION.  (Note that there is not a
d4646 4
a4649 3
These pseudo-modules import semantics into the current block scope, unlike
ordinary modules, which import symbols into the current package (which are
effective through the end of the file).
d4651 2
a4652 2
There's a corresponding "no" command that unimports meanings imported
by use, i.e., it calls C<unimport Module LIST> instead of C<import>.
d4657 1
a4657 1
If no unimport method can be found the call fails with a fatal error.
d4667 2
a4668 1
to the current time.  Example of a "touch" command:
d4676 16
a4691 5
Returns a normal array consisting of all the values of the named hash.
(In a scalar context, returns the number of values.)  The values are
returned in an apparently random order, but it is the same order as either
the keys() or each() function would produce on the same hash.  As a side
effect, it resets HASH's iterator.  See also keys(), each(), and sort().
d4698 1
a4698 1
vector.  This must be a power of two from 1 to 32. vec() may also be
d4704 21
a4724 3
Vectors created with vec() can also be manipulated with the logical
operators |, &, and ^, which will assume a bit vector operation is
desired when both operands are strings.
d4731 1
a4731 1
If you know the exact length in bits, it can be used in place of the *.
d4735 5
a4739 3
Waits for a child process to terminate and returns the pid of the
deceased process, or -1 if there are no child processes.  The status is
returned in C<$?>.
d4743 4
a4746 3
Waits for a particular child process to terminate and returns the pid
of the deceased process, or -1 if there is no such child process.  The
status is returned in C<$?>.  If you say
d4749 15
a4763 9
    ...
    waitpid(-1,&WNOHANG);

then you can do a non-blocking wait for any process.  Non-blocking wait
is available on machines supporting either the waitpid(2) or
wait4(2) system calls.  However, waiting for a particular pid with
FLAGS of 0 is implemented everywhere.  (Perl emulates the system call
by remembering the status values of processes that have exited but have
not been harvested by the Perl script yet.)
d4778 1
a4778 1
Produces a message on STDERR just like die(), but doesn't exit or throw
d4781 7
d4790 1
a4790 1
as it sees fit (like, for instance, converting it into a die()).  Most
d4792 1
a4792 1
warnings that they are not prepared to deal with, by calling warn()
d4799 1
a4799 1
instead call die() again to change it).
d4816 2
a4817 1
examples.
d4825 1
a4825 1
Writes a formatted record (possibly multi-line) to the specified file,
d4828 1
a4828 1
format for the current output channel (see the select() function) may be set
d4839 1
a4839 1
variable C<$->, which can be set to 0 to force a new page.
d4843 1
a4843 1
C<select> operator.  If the FILEHANDLE is an EXPR, then the expression
d4847 1
a4847 1
Note that write is I<NOT> the opposite of read.  Unfortunately.
d4851 1
a4851 1
The translation operator.  Same as tr///.  See L<perlop>.
@


1.1
log
@Initial revision
@
text
@d17 2
a18 2
be first, and the list argument will follow.  (Note that there can only
ever be one list argument.)  For instance, splice() has three scalar
d31 1
a31 1
parens.)  If you use the parens, the simple (but occasionally
d38 5
a42 5
    print 1+2+3;	# Prints 6.
    print(1+2) + 3;	# Prints 3.
    print (1+2)+3;	# Also prints 3!
    print +(1+2)+3;	# Prints 6.
    print ((1+2)+3);	# Prints 6.
d51 1
a51 1
non-abortive failure is generally indicated in a scalar context by
d59 1
a59 3
=item  

I<THERE IS NO GENERAL RULE FOR CONVERTING A LIST INTO A SCALAR!>
d111 1
a111 1
rewinddir, seek, seekdir, select, syscall, sysread,
d120 1
a120 1
-X, chdir, chmod, chown, chroot, fcntl, glob, ioctl, link,
d129 1
a129 1
=item Keywords related to scoping 
d184 2
a185 2
lcfirst, map, my, no, qx, qw, ref, sub*, sysopen, tie, tied, uc,
ucfirst, untie, use
a193 1

a197 1

d228 1
a228 1
    -s	File has non-zero size (returns size).
d251 1
a251 1
C<-W>, C<-x> and C<-X> is based solely on the mode of the file and the
d254 1
a254 1
C<-r>, C<-R>, C<-w> and C<-W> always return 1, and C<-x> and C<-X> return
d256 1
a256 1
thus need to do a stat() in order to determine the actual mode of the
d273 1
a273 1
characters with the high bit set.  If too many odd characters (>30%)
d278 1
a278 1
file, or a file at EOF when testing a filehandle.  Because you have to 
d282 2
a283 2
If any of the file tests (or either the stat() or lstat() operators) are given the
special filehandle consisting of a solitary underline, then the stat
d303 2
d306 1
d316 2
d319 2
a320 1
specified number of seconds have elapsed.  (On some machines,
d329 2
a330 2
syscall() interface to access setitimer(2) if your system supports it, 
or else see L</select()> below.  It is not advised to intermix alarm() 
d333 19
d356 5
d373 1
a373 1
translated to CR LF on output.  Binmode has no effect under Unix; in DOS
d375 1
a375 1
DOS-damaged C library may mangle your file.  The key distinction between
d386 1
a386 1
This function tells the referenced object (passed as REF) that it is now
d389 1
a389 1
convenience, since a bless() is often the last thing in a constructor.
d399 3
a401 2
returns TRUE if there is a caller, that is, if we're in a subroutine or
eval() or require(), and FALSE otherwise.  In a list context, returns
d409 11
a419 2
    ($package, $filename, $line,
     $subroutine, $hasargs, $wantargs) = caller($i);
d423 1
a423 1
arguments with which that subroutine was invoked.
d435 3
a437 1
number.  Returns the number of files successfully changed.
d441 3
d451 1
a451 1
This is a slightly safer version of chop (see below).  It removes any
d453 6
a458 6
$INPUT_RECORD_SEPARATOR in the C<English> module).  It returns the number
of characters removed.  It's often used to remove the newline from the
end of an input record when you're worried that the final record may be
missing its newline.  When in paragraph mode (C<$/ = "">), it removes all
trailing newlines from the string.  If VARIABLE is omitted, it chomps
$_.  Example:
d512 1
a512 1
Here's an example that looks up non-numeric uids in the passwd file:
d525 1
a525 1
On most systems, you are not allowed to change the ownership of the 
d532 2
d535 3
a537 1
For example, C<chr(65)> is "A" in ASCII.
d541 2
d546 1
a546 1
change your current working directory is unaffected.)  For security
d554 4
a557 2
descriptor.  You don't have to close FILEHANDLE if you are immediately
going to do another open() on it, since open() will close it for you.  (See
d559 10
a568 5
counter ($.), while the implicit close done by open() does not.  Also,
closing a pipe will wait for the process executing on the pipe to
complete, in case you want to look at the output of the pipe
afterwards.  Closing a pipe explicitly also puts the status value of
the command into C<$?>.  Example:
d570 2
a571 1
    open(OUTPUT, '|sort >foo');	# pipe to sort
d573 5
a577 2
    close OUTPUT;		# wait for sort to finish
    open(INPUT, 'foo');		# get sort's results
d607 5
d620 5
d641 1
a641 1
    } 
d643 1
a643 1
Of course, typing in your own password to whoever asks you 
d646 1
a646 1
=item dbmclose ASSOC_ARRAY
d650 1
a650 1
Breaks the binding between a DBM file and an associative array.
d652 1
a652 1
=item dbmopen ASSOC,DBNAME,MODE
d656 15
a670 15
This binds a dbm(3), ndbm(3), sdbm(3), gdbm(), or Berkeley DB file to an
associative array.  ASSOC is the name of the associative array.  (Unlike
normal open, the first argument is I<NOT> a filehandle, even though it
looks like one).  DBNAME is the name of the database (without the F<.dir>
or F<.pag> extension if any).  If the database does not exist, it is
created with protection specified by MODE (as modified by the umask()).
If your system only supports the older DBM functions, you may perform only
one dbmopen() in your program.  In older versions of Perl, if your system
had neither DBM nor ndbm, calling dbmopen() produced a fatal error; it now
falls back to sdbm(3).

If you don't have write access to the DBM file, you can only read
associative array variables, not set them.  If you want to test whether
you can write, either use file tests or try setting a dummy array entry
inside an eval(), which will trap the error.
d684 1
a684 1
cons of the various dbm apparoches, as well as L<DB_File> for a particularly
d689 1
a689 8
Returns a boolean value saying whether EXPR has a real value
or not.  Many operations return the undefined value under exceptional
conditions, such as end of file, uninitialized variable, system error
and such.  This function allows you to distinguish between an undefined
null scalar and a defined null scalar with operations that might return
a real null string, such as referencing elements of an array.  You may
also check to see if arrays or subroutines exist.  Use of defined on
predefined variables is not guaranteed to produce intuitive results.
d691 22
a712 2
When used on a hash array element, it tells you whether the value
is defined, not whether the key exists in the hash.  Use exists() for that.
a719 2
    eval '@@foo = ()' if defined(@@foo);
    die "No XYZ package defined" unless defined %_XYZ;
d721 1
d723 3
a725 5
See also undef().

Note: many folks tend to overuse defined(), and then are surprised to
discover that the number 0 and the null string are, in fact, defined
concepts.  For example, if you say
d733 23
a755 4
it's an admission that it couldn't give you an honest answer.  So
you should only use defined() when you're questioning the integrity
of what you're trying to do.  At other times, a simple comparison to
0 or "" is what you want.
d759 6
a764 5
Deletes the specified value from its hash array.  Returns the deleted
value, or the undefined value if nothing was deleted.  Deleting from
C<$ENV{}> modifies the environment.  Deleting from an array tied to a DBM
file deletes the entry from the DBM file.  (But deleting from a tie()d
hash doesn't necessarily return anything.)
d766 1
a766 1
The following deletes all the values of an associative array:
d768 2
a769 2
    foreach $key (keys %ARRAY) {
	delete $ARRAY{$key};
d772 7
a778 3
(But it would be faster to use the undef() command.)  Note that the
EXPR can be arbitrarily complicated as long as the final operation is
a hash key lookup:
d781 1
d786 5
a790 5
the current value of $! (errno).  If $! is 0, exits with the value of
C<($? E<gt>E<gt> 8)> (backtick `command` status).  If C<($? E<gt>E<gt> 8)> is 0,
exits with 255.  Inside an eval(), the error message is stuffed into C<$@@>,
and the eval() is terminated with the undefined value; this makes die()
the way to raise an exception.
d795 1
a795 1
    chdir '/usr/spool/news' or die "Can't cd to spool: $!\n" 
d813 23
d857 1
a857 1
    eval `cat stat.pl`;
d903 18
a920 1
=item each ASSOC_ARRAY
d922 2
a923 11
Returns a 2-element array consisting of the key and value for the next
value of an associative array, so that you can iterate over it.
Entries are returned in an apparently random order.  When the array is
entirely read, a null array is returned (which when assigned produces a
FALSE (0) value).  The next call to each() after that will start
iterating again.  The iterator can be reset only by reading all the
elements from the array.  You should not add elements to an array while
you're iterating over it.  There is a single iterator for each
associative array, shared by all each(), keys() and values() function
calls in the program.  The following prints out your environment like
the printenv(1) program, only in a different order:
d946 5
a950 5
Empty parentheses () may be used to indicate
the pseudofile formed of the files listed on the command line, i.e.
C<eof()> is reasonable to use inside a while (E<lt>E<gt>) loop to detect the end
of only the last file.  Use C<eof(ARGV)> or eof without the parentheses to
test I<EACH> file in a while (E<lt>E<gt>) loop.  Examples:
d969 1
a969 1
input operators return undef when they run out of data.  
d977 1
a977 1
variable settings, subroutine or format definitions remain afterwards.
d979 3
a981 1
return statement may be used, just as with subroutines.
d986 5
a990 2
string.  If EXPR is omitted, evaluates $_.  The final semicolon, if
any, may be omitted from the expression.
d992 1
a992 1
Note that, since eval() traps otherwise-fatal errors, it is useful for
d1002 1
a1002 1
    # make divide-by-zero non-fatal
d1014 19
a1032 1
With an eval(), you should be especially careful to remember what's 
d1044 10
a1053 8
Cases 1 and 2 above behave identically: they run the code contained in the
variable $x.  (Although case 2 has misleading double quotes making the
reader wonder what else might be happening (nothing is).) Cases 3 and 4
likewise behave in the same way: they run the code <$x>, which does
nothing at all.  (Case 4 is preferred for purely visual reasons.) Case 5
is a place where normally you I<WOULD> like to use double quotes, except
that in that particular situation, you can just use symbolic references
instead, as in case 6.
d1057 4
a1060 2
The exec() function executes a system command I<AND NEVER RETURNS>.  Use
the system() function if you want it to return.
d1065 7
a1071 5
metacharacters.  If there are any, the entire argument is passed to
C</bin/sh -c> for parsing.  If there are none, the argument is split
into words and passed directly to execvp(), which is more efficient.
Note: exec() and system() do not flush your output buffer, so you may
need to set C<$|> to avoid lost output.  Examples:
d1080 1
a1080 1
LIST as a multi-valued list, even if there is only a single scalar in
d1090 4
d1103 1
a1103 1
A hash element can only be TRUE if it's defined, and defined if
d1121 8
a1128 1
See also die().  If EXPR is omitted, exits with 0 status.
d1132 3
a1134 1
Returns I<e> (the natural logarithm base) to the power of EXPR.  
d1159 30
a1188 8
Calls flock(2) on FILEHANDLE.  See L<flock(2)> for definition of
OPERATION.  Returns TRUE for success, FALSE on failure.  Will produce a
fatal error if used on a machine that doesn't implement either flock(2) or
fcntl(2). The fcntl(2) system call will be automatically used if flock(2)
is missing from your system.  This makes flock() the portable file locking
strategy, although it will only lock entire files, not records.  Note also
that some versions of flock() cannot lock things over the network; you
would need to use the more system-specific fcntl() for that.
d1192 1
a1192 4
    $LOCK_SH = 1;
    $LOCK_EX = 2;
    $LOCK_NB = 4;
    $LOCK_UN = 8;
d1195 1
a1195 1
	flock(MBOX,$LOCK_EX);
d1202 1
a1202 1
	flock(MBOX,$LOCK_UN);
d1219 2
a1220 2
you may need to set C<$|> ($AUTOFLUSH in English) or call the 
autoflush() FileHandle method to avoid duplicate output.
d1227 1
a1227 1
There's also the double-fork trick (error checking on 
d1245 5
d1255 1
a1255 1
    format Something = 
d1261 1
a1261 1
    $num = $cost/$quantiy;
d1268 1
a1268 1
=item formline PICTURE, LIST
d1283 1
a1283 1
Be careful if you put double quotes around the picture, since an "C<@@>"
d1300 1
a1300 1
	system "stty", '-icanon', 'eol', "\001"; 
d1309 1
a1309 1
	system "stty", 'icanon', 'eol', '^@@'; # ascii null
d1313 2
a1314 2
Determination of whether to whether $BSD_STYLE should be set 
is left as an exercise to the reader.  
d1316 2
d1319 1
a1319 1
details on CPAN can be found on L<perlmod/CPAN> 
d1324 1
a1324 1
getpwuid().  
d1326 1
a1326 1
    $login = getlogin || (getpwuid($<))[0] || "Kilroy";
d1328 1
a1328 1
Do not consider getlogin() for authorentication: it is not as
d1343 2
a1344 1
Returns the current process group for the specified PID, 0 for the
d1347 2
a1348 1
group of current process.
d1472 7
a1478 3
Returns the value of EXPR with filename expansions such as a shell
would do.  This is the internal function implementing the <*.*>
operator, except it's easier to use.
d1483 1
a1483 1
with the time localized for the standard Greenwich timezone.  
d1486 1
a1486 1

d1492 11
a1502 1
the range 0..6.  If EXPR is omitted, does C<gmtime(time())>.
d1513 3
a1515 2
also can't be used to go into a construct that is optimized away.  It
can be used to go almost anywhere else within the dynamic scope,
d1538 4
d1553 1
a1553 1
Note that, since $_ is a reference into the list value, it can be used
d1556 5
a1560 1
array.
d1562 1
d1565 8
a1572 3
Interprets EXPR as a hex string and returns the corresponding decimal
value.  (To convert strings that might start with 0 or 0x see
oct().)  If EXPR is omitted, uses $_.
d1576 1
a1576 1
There is no built-in import() function.  It is merely an ordinary
d1579 1
a1579 1
for the package used.  See also L</use>, L<perlmod>, and L<Exporter>.
d1587 1
a1587 1
the string.  The return value is based at 0 (or whatever you've set the $[
d1593 2
d1607 1
a1607 1
may help you in this, but it's non-trivial.)  SCALAR will be read and/or
d1644 1
a1644 1
Joins the separate strings of LIST or ARRAY into a single string with
d1652 7
a1658 1
=item keys ASSOC_ARRAY
d1660 1
a1660 6
Returns a normal array consisting of all the keys of the named
associative array.  (In a scalar context, returns the number of keys.)
The keys are returned in an apparently random order, but it is the same
order as either the values() or each() function produces (given that
the associative array has not been modified).  Here is yet another way
to print your environment:
d1674 2
a1675 2
To sort an array by value, you'll need to use a C<sort{}>
function.  Here's a descending numeric sort of a hash by its values:
d1681 14
d1697 2
a1698 2
Sends a signal to a list of processes.  The first element of 
the list must be the signal to send.  Returns the number of 
d1708 1
a1708 1
use a signal name in quotes.  See the L<perlipc/"Signals"> man page for details.
d1726 2
d1729 4
a1732 2
implementing the \L escape in double-quoted strings.  
Should respect any POSIX setlocale() settings.
d1736 2
d1740 3
a1742 1
Should respect any POSIX setlocale() settings.
d1746 2
d1764 3
a1766 3
subroutine, C<eval{}> or C<do>.  If more than one value is listed, the
list must be placed in parens.  See L<perlsub/"Temporary Values via
local()"> for details.
d1775 1
a1775 1
with the time analyzed for the local timezone.  Typically used as
d1778 1
d1784 4
a1787 1
the range 0..6.  If EXPR is omitted, does localtime(time).
d1789 1
a1789 1
In a scalar context, prints out the ctime(3) value:
d1791 1
a1791 1
    $now_string = localtime;  # e.g. "Thu Oct 13 04:54:34 1994"
d1793 4
a1796 2
Also see the F<timelocal.pl> library, and the strftime(3) function available
via the POSIX modulie.
d1800 2
d1809 2
d1815 2
d1843 6
d1853 1
a1853 1
it returns 0 and sets $! (errno).
d1887 1
a1887 1
more than one value is listed, the list must be placed in parens.  See
d1912 2
d1915 1
a1915 1
decimal value.  (If EXPR happens to start off with 0x, interprets it as
d1921 4
a1924 1
If EXPR is omitted, uses $_.
d1931 24
a1954 17
FILEHANDLE.  If FILEHANDLE is an expression, its value is used as the name
of the real filehandle wanted.  If EXPR is omitted, the scalar variable of
the same name as the FILEHANDLE contains the filename.  If the filename
begins with "<" or nothing, the file is opened for input.  If the filename
begins with ">", the file is opened for output.  If the filename begins
with ">>", the file is opened for appending.  You can put a '+' in front
of the '>' or '<' to indicate that you want both read and write access to
the file; thus '+<' is usually preferred for read/write updates--the '+>'
mode would clobber the file first.  These correspond to the fopen(3) modes
of 'r', 'r+', 'w', 'w+', 'a', and 'a+'.

If the filename begins with "|", the filename is interpreted
as a command to which output is to be piped, and if the filename ends with
a "|", the filename is interpreted See L<perlipc/"Using open() for IPC">
for more examples of this.  as command which pipes input to us.  (You may
not have a raw open() to a command that pipes both in I<and> out, but see See L<open2>,
L<open3>, and L<perlipc/"Bidirectional Communication"> for alternatives.)
d1956 2
a1957 2
Opening '-' opens STDIN and opening '>-' opens STDOUT.  Open returns
non-zero upon success, the undefined value otherwise.  If the open
d1959 1
a1959 1
subprocess.  
d1969 8
d1984 1
d1986 2
a1987 1
    open(DBASE, '+<dbase.mine');	    # open for update
d1989 2
a1990 1
    open(ARTICLE, "caesar <$article |");    # decrypt article
d1992 2
a1993 1
    open(EXTRACT, "|sort >/tmp/Tmp$$");     # $$ is our process id
d2019 1
a2019 1
with ">&", in which case the rest of the string is interpreted as the
d2021 2
a2022 1
duped and opened.  You may use & after >, >>, <, +>, +>> and +<.  The
d2024 1
a2024 1
(Duping a filehandle does not take into acount any existing contents of
d2052 1
a2052 1
If you specify "<&=N", where N is a number, then Perl will do an
d2058 1
a2058 1
If you open a pipe on the command "-", i.e. either "|-" or "-|", then
d2061 1
a2061 1
process.  (Use defined($pid) to determine whether the open was successful.)
d2068 1
a2068 1
don't want to have to scan shell commands for metacharacters.  
d2079 2
a2080 4
Explicitly closing any piped filehandle causes the parent process to
wait for the child to finish, and returns the status value in $?.
Note: on any operation which may do a fork, unflushed buffers remain
unflushed in both processes, which means you may need to set $| to
d2083 5
a2087 1
Using the FileHandle constructor from the FileHandle package,
d2092 1
a2092 1
    use FileHandle;
d2096 1
a2096 1
	my $handle = new FileHandle;
d2106 1
a2106 1
whitespace deleted.  In order to open a file with arbitrary weird
d2117 1
a2117 1
    use FileHandle;
d2130 1
a2130 1
seekdir(), rewinddir() and closedir().  Returns TRUE if successful.
d2135 2
d2138 1
a2138 1
EXPR is omitted, uses $_.
d2156 1
d2159 3
d2164 4
d2170 2
d2173 2
a2174 2
    n	A short in "network" order.
    N	A long in "network" order.
d2177 2
d2188 5
d2198 1
a2198 1
count.  With all types except "a", "A", "b", "B", "h" and "H", and "P" the
d2205 7
a2211 2
string that many nybbles long.  The "P" packs a pointer to a structure of
the size indicated by the length.  Real numbers (floats and doubles) are
d2219 1
a2219 1
float and thence back to double again will lose precision (i.e.
d2260 1
a2260 1
statement only affects dynamic variables--including those you've used
d2264 1
a2264 1
it merely influences which symbol table is used by the compiler for the
d2278 1
a2278 1
stdio buffering, so you may need to set $| to flush your WRITEHANDLE
d2281 1
a2281 1
See L<open2>, L<open3>, and L<perlipc/"Bidirectional Communication">
d2286 2
d2300 2
d2303 4
a2306 1
in question.  May be modified to change that offset.
d2319 1
a2319 1
interpose a + or put parens around the arguments.)  If FILEHANDLE is
d2321 1
a2321 1
output channel--see select()).  If LIST is also omitted, prints $_ to
d2329 1
a2329 1
put parens around all the arguments.
d2332 1
a2332 1
you will have to use a block returning its value instead
d2337 8
a2344 1
=item printf FILEHANDLE LIST
d2346 3
a2348 1
=item printf LIST
d2350 5
a2354 2
Equivalent to a "print FILEHANDLE sprintf(LIST)".  The first argument
of the list will be interpreted as the printf format.
d2380 7
a2386 2
Returns the value of EXPR with with all regular expression
metacharacters backslashed.  This is the internal function implementing
d2389 2
d2395 4
a2398 4
Returns a random fractional number between 0 and the value of EXPR.
(EXPR should be positive.)  If EXPR is omitted, returns a value between 
0 and 1.  This function produces repeatable sequences unless srand() 
is invoked.  See also srand().
d2400 1
a2400 1
(Note: if your rand function consistently returns numbers that are too
d2402 1
a2402 4
with the wrong number of RANDBITS.  As a workaround, you can usually
multiply EXPR by the correct power of 2 to get the range you want.
This will make your script unportable, however.  It's better to recompile
if you can.)
d2424 1
a2424 1
better prepend the directory in question.  Otherwise, since we didn't
d2431 10
d2443 2
d2447 1
a2447 1
error, returns the undefined value and sets $! (errno).  If EXPR is
d2450 11
d2468 1
a2468 1
as the system call of the same name.  
d2500 5
a2504 2
Returns a TRUE value if EXPR is a reference, FALSE otherwise.  The value
returned depends on the type of thing the reference is a reference to.
d2514 1
a2514 1
If the referenced object has been blessed into a package, then that package 
d2518 2
a2519 2
	print "r is a reference to an associative array.\n";
    } 
d2522 1
a2522 1
    } 
d2529 1
a2529 1
not work across filesystem boundaries.
d2537 1
a2537 1
($] or $PERL_VERSION) be equal or greater than EXPR.
d2571 3
a2573 2
If EXPR is a bare word, the require assumes a "F<.pm>" extension for you,
to make it easy to load standard modules.  This form of loading of 
d2576 1
a2576 1
For a yet-more-powerful import facility, see the L</use()> and 
d2588 2
a2589 2
omitted, one-match searches (?pattern?) are reset to match again.  Only
resets variables or searches in the current package.  Always returns
d2596 2
a2597 2
Resetting "A-Z" is not recommended since you'll wipe out your
ARGV and ENV arrays.  Only resets package variables--lexical variables
d2599 5
a2603 1
so anymore you probably want to use them instead.  See L</my>.
d2605 6
a2610 1
=item return LIST
d2612 2
a2613 3
Returns from a subroutine or eval with the value specified.  (Note that
in the absence of a return a subroutine or eval() will automatically
return the value of the last expression evaluated.)
d2618 14
a2631 3
of LIST in the opposite order.  In a scalar context, returns a string
value consisting of the bytes of the first element of LIST in the
opposite order.   
d2633 1
a2633 4
    print reverse <>;			# line tac 

    undef $/;
    print scalar reverse scalar <>;	# byte tac
d2650 2
d2653 1
a2653 1
succeeds it returns 1, otherwise it returns 0 and sets $! (errno).  If
d2663 1
a2663 1
of EXPR.  
d2667 1
a2667 1
There is no equivalent operator to force an expression to 
d2675 11
a2685 6
Randomly positions the file pointer for FILEHANDLE, just like the fseek()
call of stdio.  FILEHANDLE may be an expression whose value gives the name
of the filehandle.  The values for WHENCE are 0 to set the file pointer to
POSITION, 1 to set the it to current plus POSITION, and 2 to set it to EOF
plus offset.  You may use the values SEEK_SET, SEEK_CUR, and SEEK_END for
this from POSIX module.  Returns 1 upon success, 0 otherwise.
d2689 2
a2690 2
stdio's clearerr(3).  A "whence" of 1 (SEEK_CUR) is useful for not moving
the file pointer:
d2696 3
a2698 4
seek() to reset things.  First the simple trick listed above to clear the
filepointer.  The seek() doesn't change the current position, but it
I<does> clear the end-of-file condition on the handle, so that the next
C<E<lt>FILEE<gt>> makes Perl try again to read something.  Hopefully.
d2743 1
a2743 1
    use FileHandle;
d2748 1
a2748 1
This calls the select(2) system call with the bitmasks specified, which
d2774 1
a2774 1
or to block until something becomes ready just do this 
d2778 1
a2778 1
Most systems do not both to return anything useful in $timeleft, so
d2781 1
a2781 1
Any of the bitmasks can also be undef.  The timeout, if specified, is
d2786 1
a2786 1
You can effect a 250-microsecond sleep this way:
d2790 1
a2790 1
B<WARNING>: Do not attempt to mix buffered I/O (like read() or <FH>)
d2836 3
a2838 1
implement setpgrp(2).
d2862 1
a2862 1
that push() and pop() do to the right end.
d2894 2
d2899 5
d2911 1
a2911 1
sleep() calls, since sleep() is often implemented using alarm().
d2918 4
a2921 2
syscall() interface to access setitimer(2) if your system supports it, 
or else see L</select()> below.  
d2926 1
a2926 1
SOCKET.  DOMAIN, TYPE and PROTOCOL are specified the same as for the
d2933 1
a2933 1
specified type.  DOMAIN, TYPE and PROTOCOL are specified the same as
d2943 9
a2951 10
Sorts the LIST and returns the sorted list value.  Nonexistent values
of arrays are stripped out.  If SUBNAME or BLOCK is omitted, sorts
in standard string comparison order.  If SUBNAME is specified, it
gives the name of a subroutine that returns an integer less than, equal
to, or greater than 0, depending on how the elements of the array are
to be ordered.  (The <=> and cmp operators are extremely useful in such
routines.)  SUBNAME may be a scalar variable name, in which case the
value provides the name of the subroutine to use.  In place of a
SUBNAME, you can provide a BLOCK as an anonymous, in-line sort
subroutine.
d2960 6
d2975 1
a2975 1
    @@articles = sort { uc($a) cmp uc($b)} @@files;
d2988 1
a2988 1
	$age{$a} <=> $age{$b};	# presuming integers
d2992 2
a2993 2
    # this sorts the %age associative arrays by value 
    # instead of key using an inline function
d3006 2
a3007 2
    # inefficiently sort by descending numeric compare using 
    # the first integer after the first = sign, or the 
d3020 1
a3020 1
    for (@@old) { 
d3023 1
a3023 1
    } 
d3039 1
a3039 1
If you're and using strict, you I<MUST NOT> declare $a
d3053 7
d3070 1
a3070 1
following equivalencies hold (assuming $[ == 0):
d3109 7
a3115 6
that the delimiter may be longer than one character.)  If LIMIT is
specified and is not negative, splits into no more than that many fields
(though it may split into fewer).  If LIMIT is unspecified, trailing null
fields are stripped (which potential users of pop() would do well to
remember).  If LIMIT is negative, it is treated as if an arbitrarily large
LIMIT had been specified.
d3126 1
a3126 1
The LIMIT parameter can be used to partially split a line
d3139 1
a3139 1
    split(/([,-])/, "1-10,20");
d3145 1
a3145 1
If you had the entire header of a normal Unix email message in $header, 
d3149 1
a3149 1
    %hdrs   =  (UNIX_FROM => split /^(.*?):\s*/m, $header);
d3167 1
a3167 1
	($login, $passwd, $uid, $gid, $gcos, 
d3172 1
a3172 1
(Note that $shell above will still have a newline on it.  See L</chop>, 
d3175 1
a3175 1
=item sprintf FORMAT,LIST
d3177 68
a3244 6
Returns a string formatted by the usual printf conventions of the C
language.  See L<sprintf(3)> or L<printf(3)> on your system for details.
(The * character for an indirectly specified length is not
supported, but you can get the same effect by interpolating a variable
into the pattern.)  Some C libraries' implementations of sprintf() can
dump core when fed ludicrous arguments.
d3248 2
d3255 40
a3294 7
Sets the random number seed for the C<rand> operator.  If EXPR is omitted,
does C<srand(time)>.  Many folks use an explicit C<srand(time ^ $$)>
instead.  Of course, you'd need something much more random than that for
cryptographic purposes, since it's easy to guess the current time.
Checksumming the compressed output of rapidly changing operating system
status programs is the usual method.  Examples are posted regularly to
the comp.security.unix newsgroup.
d3300 2
d3303 4
a3306 2
file opened via FILEHANDLE, or named by EXPR.  Returns a null list if
the stat fails.  Typically used as follows:
d3312 1
a3312 1
Not all fields are supported on all filesystem types.  Here are the 
d3315 13
a3327 13
  dev	    device number of filesystem 
  ino	    inode number 
  mode	    file mode  (type and permissions)
  nlink	    number of (hard) links to the file 
  uid	    numeric user ID of file's owner 
  gid	    numer group ID of file's owner 
  rdev	    the device identifier (special files only)
  size	    total size of file, in bytes 
  atime	    last access time since the epoch
  mtime	    last modify time since the epoch
  ctime	    inode change time (NOT creation type!) since the epoch
  blksize   preferred blocksize for file system I/O
  blocks    actual number of blocks allocated
d3339 1
a3339 1
(This only works on machines for which the device number is negative under NFS.)
d3345 1
a3345 1
Takes extra time to study SCALAR ($_ if unspecified) in anticipation of
d3349 2
a3350 2
frequencies in the string to be searched--you probably want to compare
runtimes with and without it to see which runs faster.  Those loops
d3353 1
a3353 1
one study active at a time--if you study a different scalar the first
d3384 1
a3384 1
scans a list of files (@@files) for a list of words (@@words), and prints
d3395 1
a3395 1
    $/ = "\n";		# put back to normal input delim
d3409 1
a3409 1
value: the CODE ref of the closure you just created. See L<perlsub> and
d3417 2
a3418 1
offset 0, or whatever you've set $[ to.  If OFFSET is negative, starts
d3423 4
d3441 1
a3441 1
    $symlink_exists = (eval 'symlink("","");', $@@ eq '');
d3459 1
a3459 1
Note that Perl only supports passing of up to 14 arguments to your system call,
d3462 11
d3494 3
d3503 29
a3531 5
stdio, so mixing this with other kinds of reads may cause confusion.
Returns the number of bytes actually read, or undef if there was an
error.  SCALAR will be grown or shrunk to the length actually read.  An
OFFSET may be specified to place the read data at some other place than
the beginning of the string.
d3540 40
a3579 3
256.  See also L</exec>.  This is I<NOT> what you want to use to capture 
the output from a command, for that you should merely use backticks, as
described in L<perlop/"`STRING`">.
d3587 11
a3597 4
stdio, so mixing this with prints may cause confusion.  Returns the
number of bytes actually written, or undef if there was an error.  An
OFFSET may be specified to get the write data from some other place than
the beginning of the string.
d3603 1
a3603 1
Returns the current file position for FILEHANDLE.  FILEHANDLE may be an
d3632 1
a3632 1
    tie(%HIST, NDBM_File, '/usr/lib/news/history', 1, 0);
d3638 1
a3638 2
A class implementing an associative array should have the following
methods:
d3661 1
a3661 1
    FETCH this, 
d3677 4
a3680 2
Returns the number of non-leap seconds since 00:00:00 UTC, January 1,
1970.  Suitable for feeding to gmtime() and localtime().
d3691 1
a3691 1
The translation operator.  See L<perlop>.
d3703 2
d3707 3
a3709 1
Should respect any POSIX setlocale() settings.
d3713 2
d3717 3
a3719 1
Should respect any POSIX setlocale() settings.
d3725 4
a3728 2
Sets the umask for the process and returns the old one.  If EXPR is
omitted, merely returns current umask.
d3735 7
a3741 6
scalar value, an entire array, or a subroutine name (using "&").  (Using undef()
will probably not do what you expect on most predefined variables or
DBM list values, so don't do that.)  Always returns the undefined value.  You can omit
the EXPR, in which case nothing is undefined, but you still get an
undefined value that you could, for instance, return from a
subroutine.  Examples:
d3744 1
a3744 1
    undef $bar{'blurfl'};
d3746 1
a3746 1
    undef %assoc;
d3748 3
a3750 1
    return (wantarray ? () : undef) if $they_blew_it;
d3754 2
d3768 2
d3774 1
a3774 1
value.  (In a scalar context, it merely returns the first value
d3787 2
a3788 2
In addition, you may prefix a field with a %<number> to indicate that
you want a <number>-bit checksum of the items instead of the items
d3821 4
d3831 10
d3848 3
a3850 1
is defined in the Exporter module. See L<Exporter>.
d3860 7
d3876 1
a3876 1
These pseudomodules import semantics into the current block scope, unlike
d3881 1
a3881 1
by use.
d3886 2
d3902 1
a3902 1
=item values ASSOC_ARRAY
d3904 5
a3908 5
Returns a normal array consisting of all the values of the named
associative array.  (In a scalar context, returns the number of
values.)  The values are returned in an apparently random order, but it
is the same order as either the keys() or each() function would produce
on the same array.  See also keys(), each(), and sort().
d3913 1
a3913 1
returns the value of the bitfield specified by OFFSET.  BITS specifies
d3915 2
a3916 2
vector. This must be a power of two from 1 to 32. vec() may also be
assigned to, in which case parens are needed to give the expression
d3922 1
a3922 1
operators |, & and ^, which will assume a bit vector operation is
d3936 1
a3936 1
returned in $?.
d3942 1
a3942 1
status is returned in $?.  If you say
d3944 1
a3944 1
    use POSIX "wait_h";
d3949 1
a3949 1
is only available on machines supporting either the waitpid(2) or
d3959 2
a3960 1
for a scalar.
d3962 3
a3964 1
    return wantarray ? () : undef;
d3968 32
a3999 2
Produces a message on STDERR just like die(), but doesn't exit or
on an exception.
d4009 1
a4009 1
a file is the one having the same name is the filehandle, but the
d4011 1
a4011 1
explicitly by assigning the name of the format to the $~ variable.
d4019 1
a4019 1
choice by assigning the name to the $^ variable while the filehandle is
d4021 1
a4021 1
variable $-, which can be set to 0 to force a new page.
d4033 1
a4033 1
The translation operator.  See L<perlop>.
@


1.1.1.1
log
@Import of Perl 5.003 into the tree.  Makefile.bsd-wrapper and
config.sh.OpenBSD are the only local changes.
@
text
@@


1.1.1.2
log
@perl5.005_03
@
text
@d15 1
a15 1
argument, while a list operator may provide either scalar or list
d17 3
a19 4
be first, and the list argument will follow.  (Note that there can ever
be only one such list argument.)  For instance, splice() has three scalar
arguments followed by a list, whereas gethostbyname() has four scalar
arguments.
d31 1
a31 1
parentheses.)  If you use the parentheses, the simple (but occasionally
d38 5
a42 5
    print 1+2+4;	# Prints 7.
    print(1+2) + 4;	# Prints 3.
    print (1+2)+4;	# Also prints 3!
    print +(1+2)+4;	# Prints 7.
    print ((1+2)+4);	# Prints 7.
a49 5
A few functions take no arguments at all, and therefore work as neither
unary nor list operators.  These include such functions as C<time>
and C<endpwent>.  For example, C<time+86_400> always means
C<time() + 86_400>.

d51 1
a51 1
nonabortive failure is generally indicated in a scalar context by
d55 10
a64 3
Remember the following important rule: There is B<no rule> that relates
the behavior of an expression in list context to its behavior in scalar
context, or vice versa.  It might do two totally different things.
d66 2
a67 2
appropriate to return in scalar context.  Some operators return the
length of the list that would have been returned in list context.  Some
a72 15
An named array in scalar context is quite different from what would at
first glance appear to be a list in scalar context.  You can't get a list
like C<(1,2,3)> into being in scalar context, because the compiler knows
the context at compile time.  It would generate the scalar comma operator
there, not the list construction version of the comma.  That means it
was never a list to start with.

In general, functions in Perl that serve as wrappers for system calls
of the same name (like chown(2), fork(2), closedir(2), etc.) all return
true when they succeed and C<undef> otherwise, as is usually mentioned
in the descriptions below.  This is different from the C interfaces,
which return C<-1> on failure.  Exceptions to this rule are C<wait()>,
C<waitpid()>, and C<syscall()>.  System calls also set the special C<$!>
variable on failure.  Other functions do not, except accidentally.

d76 1
a76 1
functions, like some keywords and named operators)
d84 3
a86 3
C<chomp>, C<chop>, C<chr>, C<crypt>, C<hex>, C<index>, C<lc>, C<lcfirst>,
C<length>, C<oct>, C<ord>, C<pack>, C<q/STRING/>, C<qq/STRING/>, C<reverse>,
C<rindex>, C<sprintf>, C<substr>, C<tr///>, C<uc>, C<ucfirst>, C<y///>
d90 1
a90 1
C<m//>, C<pos>, C<quotemeta>, C<s///>, C<split>, C<study>, C<qr//>
d94 2
a95 2
C<abs>, C<atan2>, C<cos>, C<exp>, C<hex>, C<int>, C<log>, C<oct>, C<rand>,
C<sin>, C<sqrt>, C<srand>
d99 1
a99 1
C<pop>, C<push>, C<shift>, C<splice>, C<unshift>
d103 1
a103 1
C<grep>, C<join>, C<map>, C<qw/STRING/>, C<reverse>, C<sort>, C<unpack>
d107 1
a107 1
C<delete>, C<each>, C<exists>, C<keys>, C<values>
d111 4
a114 5
C<binmode>, C<close>, C<closedir>, C<dbmclose>, C<dbmopen>, C<die>, C<eof>,
C<fileno>, C<flock>, C<format>, C<getc>, C<print>, C<printf>, C<read>,
C<readdir>, C<rewinddir>, C<seek>, C<seekdir>, C<select>, C<syscall>,
C<sysread>, C<sysseek>, C<syswrite>, C<tell>, C<telldir>, C<truncate>,
C<warn>, C<write>
d118 1
a118 1
C<pack>, C<read>, C<syscall>, C<sysread>, C<syswrite>, C<unpack>, C<vec>
d122 3
a124 4
C<-I<X>>, C<chdir>, C<chmod>, C<chown>, C<chroot>, C<fcntl>, C<glob>,
C<ioctl>, C<link>, C<lstat>, C<mkdir>, C<open>, C<opendir>,
C<readlink>, C<rename>, C<rmdir>, C<stat>, C<symlink>, C<umask>,
C<unlink>, C<utime>
d128 2
a129 2
C<caller>, C<continue>, C<die>, C<do>, C<dump>, C<eval>, C<exit>,
C<goto>, C<last>, C<next>, C<redo>, C<return>, C<sub>, C<wantarray>
d131 1
a131 1
=item Keywords related to scoping
d133 1
a133 1
C<caller>, C<import>, C<local>, C<my>, C<package>, C<use>
d137 2
a138 2
C<defined>, C<dump>, C<eval>, C<formline>, C<local>, C<my>, C<reset>,
C<scalar>, C<undef>, C<wantarray>
d142 3
a144 3
C<alarm>, C<exec>, C<fork>, C<getpgrp>, C<getppid>, C<getpriority>, C<kill>,
C<pipe>, C<qx/STRING/>, C<setpgrp>, C<setpriority>, C<sleep>, C<system>,
C<times>, C<wait>, C<waitpid>
d148 1
a148 1
C<do>, C<import>, C<no>, C<package>, C<require>, C<use>
d152 1
a152 2
C<bless>, C<dbmclose>, C<dbmopen>, C<package>, C<ref>, C<tie>, C<tied>,
C<untie>, C<use>
d156 3
a158 3
C<accept>, C<bind>, C<connect>, C<getpeername>, C<getsockname>,
C<getsockopt>, C<listen>, C<recv>, C<send>, C<setsockopt>, C<shutdown>,
C<socket>, C<socketpair>
d162 2
a163 2
C<msgctl>, C<msgget>, C<msgrcv>, C<msgsnd>, C<semctl>, C<semget>, C<semop>,
C<shmctl>, C<shmget>, C<shmread>, C<shmwrite>
d167 3
a169 3
C<endgrent>, C<endhostent>, C<endnetent>, C<endpwent>, C<getgrent>,
C<getgrgid>, C<getgrnam>, C<getlogin>, C<getpwent>, C<getpwnam>,
C<getpwuid>, C<setgrent>, C<setpwent>
d173 5
a177 5
C<endprotoent>, C<endservent>, C<gethostbyaddr>, C<gethostbyname>,
C<gethostent>, C<getnetbyaddr>, C<getnetbyname>, C<getnetent>,
C<getprotobyname>, C<getprotobynumber>, C<getprotoent>,
C<getservbyname>, C<getservbyport>, C<getservent>, C<sethostent>,
C<setnetent>, C<setprotoent>, C<setservent>
d181 1
a181 1
C<gmtime>, C<localtime>, C<time>, C<times>
d185 3
a187 4
C<abs>, C<bless>, C<chomp>, C<chr>, C<exists>, C<formline>, C<glob>,
C<import>, C<lc>, C<lcfirst>, C<map>, C<my>, C<no>, C<prototype>, C<qx>,
C<qw>, C<readline>, C<readpipe>, C<ref>, C<sub*>, C<sysopen>, C<tie>,
C<tied>, C<uc>, C<ucfirst>, C<untie>, C<use>
d190 1
a190 1
operator, which can be used in expressions.
d194 2
a195 1
C<dbmclose>, C<dbmopen>
d199 1
a199 27
=head2 Portability

Perl was born in Unix and can therefore access all common Unix
system calls.  In non-Unix environments, the functionality of some
Unix system calls may not be available, or details of the available
functionality may differ slightly.  The Perl functions affected
by this are:

C<-X>, C<binmode>, C<chmod>, C<chown>, C<chroot>, C<crypt>,
C<dbmclose>, C<dbmopen>, C<dump>, C<endgrent>, C<endhostent>,
C<endnetent>, C<endprotoent>, C<endpwent>, C<endservent>, C<exec>,
C<fcntl>, C<flock>, C<fork>, C<getgrent>, C<getgrgid>, C<gethostent>,
C<getlogin>, C<getnetbyaddr>, C<getnetbyname>, C<getnetent>,
C<getppid>, C<getprgp>, C<getpriority>, C<getprotobynumber>,
C<getprotoent>, C<getpwent>, C<getpwnam>, C<getpwuid>,
C<getservbyport>, C<getservent>, C<getsockopt>, C<glob>, C<ioctl>,
C<kill>, C<link>, C<lstat>, C<msgctl>, C<msgget>, C<msgrcv>,
C<msgsnd>, C<open>, C<pipe>, C<readlink>, C<rename>, C<select>, C<semctl>,
C<semget>, C<semop>, C<setgrent>, C<sethostent>, C<setnetent>,
C<setpgrp>, C<setpriority>, C<setprotoent>, C<setpwent>,
C<setservent>, C<setsockopt>, C<shmctl>, C<shmget>, C<shmread>,
C<shmwrite>, C<socket>, C<socketpair>, C<stat>, C<symlink>, C<syscall>,
C<sysopen>, C<system>, C<times>, C<truncate>, C<umask>, C<unlink>,
C<utime>, C<wait>, C<waitpid>

For more information about the portability of these functions, see
L<perlport> and other available platform-specific documentation.
a200 1
=head2 Alphabetical Listing of Perl Functions
d204 1
a204 1
=item I<-X> FILEHANDLE
d206 1
a206 1
=item I<-X> EXPR
d208 1
a208 1
=item I<-X>
d213 1
a213 1
argument is omitted, tests C<$_>, except for C<-t>, which tests STDIN.
a218 2
X<-r>X<-w>X<-x>X<-o>X<-R>X<-W>X<-X>X<-O>X<-e>X<-z>X<-s>X<-f>X<-d>X<-l>X<-p>
X<-S>X<-b>X<-c>X<-t>X<-u>X<-g>X<-k>X<-T>X<-B>X<-M>X<-A>X<-C>
d232 1
a232 1
    -s	File has nonzero size (returns size).
d237 1
a237 1
    -p	File is a named pipe (FIFO), or Filehandle is a pipe.
d254 9
d268 1
a268 1
	#...
a270 14
The interpretation of the file permission operators C<-r>, C<-R>,
C<-w>, C<-W>, C<-x>, and C<-X> is by default based solely on the mode
of the file and the uids and gids of the user.  There may be other
reasons you can't actually read, write, or execute the file.  Such
reasons may be for example network filesystem access controls, ACLs
(access control lists), read-only filesystems, and unrecognized
executable formats.

Also note that, for the superuser on the local filesystems, the C<-r>,
C<-R>, C<-w>, and C<-W> tests always return 1, and C<-x> and C<-X> return 1
if any execute bit is set in the mode.  Scripts run by the superuser
may thus need to do a stat() to determine the actual mode of the file,
or temporarily set their effective uid to something else.

d277 1
a277 1
characters with the high bit set.  If too many strange characters (E<gt>30%)
d282 1
a282 1
file, or a file at EOF when testing a filehandle.  Because you have to
d286 2
a287 2
If any of the file tests (or either the C<stat()> or C<lstat()> operators) are given
the special filehandle consisting of a solitary underline, then the stat
a306 2
=item abs

a307 1
If VALUE is omitted, uses C<$_>.
d313 1
a313 1
See the example in L<perlipc/"Sockets: Client/Server Communication">.
a316 2
=item alarm

d318 1
a318 2
specified number of seconds have elapsed.  If SECONDS is not specified,
the value stored in C<$_> is used. (On some machines,
d322 1
a322 1
argument of C<0> may be supplied to cancel the previous timer without
d327 3
a329 27
four-arugment version of select() leaving the first three arguments
undefined, or you might be able to use the C<syscall()> interface to
access setitimer(2) if your system supports it.  The Time::HiRes module
from CPAN may also prove useful.

It is usually a mistake to intermix C<alarm()>
and C<sleep()> calls.

If you want to use C<alarm()> to time out a system call you need to use an
C<eval()>/C<die()> pair.  You can't rely on the alarm causing the system call to
fail with C<$!> set to C<EINTR> because Perl sets up signal handlers to
restart system calls on some systems.  Using C<eval()>/C<die()> always works,
modulo the caveats given in L<perlipc/"Signals">.

    eval {
	local $SIG{ALRM} = sub { die "alarm\n" }; # NB: \n required
	alarm $timeout;
	$nread = sysread SOCKET, $buffer, $size;
	alarm 0;
    };
    if ($@@) {
	die unless $@@ eq "alarm\n";   # propagate unexpected errors
    	# timed out
    }
    else {
    	# didn't
    }
a334 5
For the tangent operation, you may use the C<POSIX::tan()>
function, or use the familiar relation:

    sub tan { sin($_[0]) / cos($_[0])  }

d345 10
a354 16
systems that distinguish between binary and text files.  Files that
are not in binary mode have CR LF sequences translated to LF on input
and LF translated to CR LF on output.  Binmode has no effect under
many sytems, but in MS-DOS and similarly archaic systems, it may be
imperative--otherwise your MS-DOS-damaged C library may mangle your file.
The key distinction between systems that need C<binmode()> and those
that don't is their text file formats.  Systems like Unix, MacOS, and
Plan9 that delimit lines with a single character, and that encode that
character in C as C<"\n">, do not need C<binmode()>.  The rest may need it.
If FILEHANDLE is an expression, the value is taken as the name of the
filehandle.

If the system does care about it, using it when you shouldn't is just as
perilous as failing to use it when you should.  Fortunately for most of
us, you can't go wrong using binmode() on systems that don't care about
it, though.
d360 7
a366 15
This function tells the thingy referenced by REF that it is now an object
in the CLASSNAME package.  If CLASSNAME is omitted, the current package
is used.  Because a C<bless()> is often the last thing in a constructor.
it returns the reference for convenience.  Always use the two-argument
version if the function doing the blessing might be inherited by a
derived class.  See L<perltoot> and L<perlobj> for more about the blessing
(and blessings) of objects.

Consider always blessing objects in CLASSNAMEs that are mixed case.
Namespaces with all lowercase names are considered reserved for
Perl pragmata.  Builtin types have all uppercase names, so to prevent
confusion, you may wish to avoid such package names as well.  Make sure
that CLASSNAME is a true value.

See L<perlmod/"Perl Modules">.
d372 3
a374 4
Returns the context of the current subroutine call.  In scalar context,
returns the caller's package name if there is a caller, that is, if
we're in a subroutine or C<eval()> or C<require()>, and the undefined value
otherwise.  In list context, returns
d382 2
a383 11
    ($package, $filename, $line, $subroutine,
     $hasargs, $wantarray, $evaltext, $is_require) = caller($i);

Here C<$subroutine> may be C<"(eval)"> if the frame is not a subroutine
call, but an C<eval()>.  In such a case additional elements C<$evaltext> and
C<$is_require> are set: C<$is_require> is true if the frame is created by a
C<require> or C<use> statement, C<$evaltext> contains the text of the
C<eval EXPR> statement.  In particular, for a C<eval BLOCK> statement,
C<$filename> is C<"(eval)">, but C<$evaltext> is undefined.  (Note also that
each C<use> statement creates a C<require> frame inside an C<eval EXPR>)
frame.
d386 2
a387 8
detailed information: it sets the list variable C<@@DB::args> to be the
arguments with which the subroutine was invoked.

Be aware that the optimizer might have optimized call frames away before
C<caller()> had a chance to get the information. That means that C<caller(N)>
might not return information about the call frame you expect it do, for
C<N E<gt> 1>. In particular, C<@@DB::args> might have information from the 
previous time C<caller()> was called.
d391 3
a393 3
Changes the working directory to EXPR, if possible.  If EXPR is omitted,
changes to the user's home directory.  Returns TRUE upon success,
FALSE otherwise.  See the example under C<die()>.
d399 1
a399 3
number, and which definitely should I<not> a string of octal digits:
C<0644> is okay, C<'0644'> is not.  Returns the number of files
successfully changed.  See also L</oct>, if all you have is a string.
a402 4
    $mode = '0644'; chmod $mode, 'foo';      # !!! sets mode to
                                             # --w----r-T
    $mode = '0644'; chmod oct($mode), 'foo'; # this is better
    $mode = 0644;   chmod $mode, 'foo';      # this is best
d410 8
a417 8
This safer version of L</chop> removes any trailing string
that corresponds to the current value of C<$/> (also known as
$INPUT_RECORD_SEPARATOR in the C<English> module).  It returns the total
number of characters removed from all its arguments.  It's often used to
remove the newline from the end of an input record when you're worried
that the final record may be missing its newline.  When in paragraph
mode (C<$/ = "">), it removes all trailing newlines from the string.
If VARIABLE is omitted, it chomps C<$_>.  Example:
d422 1
a422 1
	# ...
d442 1
a442 1
scans nor copies the string.  If VARIABLE is omitted, chops C<$_>.
d448 1
a448 1
	#...
d457 1
a457 1
last C<chop()> is returned.
d459 1
a459 1
Note that C<chop()> returns the last character.  To return all but the last
d471 1
a471 1
Here's an example that looks up nonnumeric uids in the passwd file:
d475 1
a475 1
    print "Files: ";
d481 1
a481 1
    @@ary = glob($pattern);	# expand filenames
d484 1
a484 1
On most systems, you are not allowed to change the ownership of the
a490 2
=item chr

d492 1
a492 3
For example, C<chr(65)> is C<"A"> in ASCII.  For the reverse, use L</ord>.

If NUMBER is omitted, uses C<$_>.
d496 1
a496 3
=item chroot

This function works like the system call by the same name: it makes the
d498 2
a499 2
begin with a C<"/"> by your process and all its children.  (It doesn't
change your current working directory, which is unaffected.)  For security
d501 1
a501 1
omitted, does a C<chroot()> to C<$_>.
a504 2
=item close

d507 13
a519 17
descriptor. Closes the currently selected filehandle if the argument
is omitted.

You don't have to close FILEHANDLE if you are immediately going to do
another C<open()> on it, because C<open()> will close it for you.  (See
C<open()>.)  However, an explicit C<close()> on an input file resets the line
counter (C<$.>), while the implicit close done by C<open()> does not.

If the file handle came from a piped open C<close()> will additionally
return FALSE if one of the other system calls involved fails or if the
program exits with non-zero status.  (If the only problem was that the
program exited non-zero C<$!> will be set to C<0>.)  Closing a pipe 
also waits for the process executing on the pipe to complete, in case you
want to look at the output of the pipe afterwards, and 
implicitly puts the exit status value of that command into C<$?>.

Example:
d521 1
a521 11
    open(OUTPUT, '|sort >foo')  # pipe to sort
        or die "Can't start sort: $!";
    #...			# print stuff to output
    close OUTPUT		# wait for sort to finish
        or warn $! ? "Error closing sort pipe: $!"
                   : "Exit status $? from sort";
    open(INPUT, 'foo')		# get sort's results
        or die "Can't open 'foo' for input: $!";

FILEHANDLE may be an expression whose value can be used as an indirect
filehandle, usually the real filehandle name.
d525 1
a525 5
Closes a directory opened by C<opendir()> and returns the success of that
system call.

DIRHANDLE may be an expression whose value can be used as an indirect
dirhandle, usually the real dirhandle name.
a543 19
C<last>, C<next>, or C<redo> may appear within a C<continue>
block. C<last> and C<redo> will behave as if they had been executed within
the main block. So will C<next>, but since it will execute a C<continue>
block, it may be more entertaining.

    while (EXPR) {
	### redo always comes here
	do_something;
    } continue {
	### next always comes here
	do_something_else;
	# then back the top to re-check EXPR
    }
    ### last always comes here

Omitting the C<continue> section is semantically equivalent to using an
empty one, logically enough. In that case, C<next> goes directly back
to check the condition at the top of the loop.

d546 2
a547 7
Returns the cosine of EXPR (expressed in radians).  If EXPR is omitted,
takes cosine of C<$_>.

For the inverse cosine operation, you may use the C<POSIX::acos()>
function, or use this relation:

    sub acos { atan2( sqrt(1 - $_[0] * $_[0]), $_[0] ) }
a556 12
Note that C<crypt()> is intended to be a one-way function, much like breaking
eggs to make an omelette.  There is no (known) corresponding decrypt
function.  As a result, this function isn't all that useful for
cryptography.  (For that, see your nearby CPAN mirror.)

When verifying an existing encrypted string you should use the encrypted
text as the salt (like C<crypt($plain, $crypted) eq $crypted>).  This
allows your code to work with the standard C<crypt()> and with more
exotic implementations.  When choosing a new salt create a random two
character string whose characters come from the set C<[./0-9A-Za-z]>
(like C<join '', ('.', '/', 0..9, 'A'..'Z', 'a'..'z')[rand 64, rand 64]>).

d561 1
d565 1
a565 1
    chomp($word = <STDIN>);
d569 1
a569 1
    if (crypt($word, $pwd) ne $pwd) {
d573 1
a573 1
    }
d575 1
a575 1
Of course, typing in your own password to whoever asks you
d578 1
a578 1
=item dbmclose HASH
d580 1
a580 1
[This function has been largely superseded by the C<untie()> function.]
d582 1
a582 1
Breaks the binding between a DBM file and a hash.
d584 1
a584 1
=item dbmopen HASH,DBNAME,MODE
d586 17
a602 17
[This function has been largely superseded by the C<tie()> function.]

This binds a dbm(3), ndbm(3), sdbm(3), gdbm(3), or Berkeley DB file to a
hash.  HASH is the name of the hash.  (Unlike normal C<open()>, the first
argument is I<NOT> a filehandle, even though it looks like one).  DBNAME
is the name of the database (without the F<.dir> or F<.pag> extension if
any).  If the database does not exist, it is created with protection
specified by MODE (as modified by the C<umask()>).  If your system supports
only the older DBM functions, you may perform only one C<dbmopen()> in your
program.  In older versions of Perl, if your system had neither DBM nor
ndbm, calling C<dbmopen()> produced a fatal error; it now falls back to
sdbm(3).

If you don't have write access to the DBM file, you can only read hash
variables, not set them.  If you want to test whether you can write,
either use file tests or try setting a dummy hash entry inside an C<eval()>,
which will trap the error.
d604 2
a605 2
Note that functions such as C<keys()> and C<values()> may return huge lists
when used on large DBM files.  You may prefer to use the C<each()>
d616 1
a616 1
cons of the various dbm approaches, as well as L<DB_File> for a particularly
a618 7
You can control which DBM library you use by loading that library
before you call dbmopen():

    use DB_File;
    dbmopen(%NS_Hist, "$ENV{HOME}/.netscape/history.db")
	or die "Can't open netscape history file: $!";

d621 8
a628 1
=item defined
d630 2
a631 22
Returns a Boolean value telling whether EXPR has a value other than
the undefined value C<undef>.  If EXPR is not present, C<$_> will be
checked.

Many operations return C<undef> to indicate failure, end of file,
system error, uninitialized variable, and other exceptional
conditions.  This function allows you to distinguish C<undef> from
other values.  (A simple Boolean test will not distinguish among
C<undef>, zero, the empty string, and C<"0">, which are all equally
false.)  Note that since C<undef> is a valid scalar, its presence
doesn't I<necessarily> indicate an exceptional condition: C<pop()>
returns C<undef> when its argument is an empty array, I<or> when the
element to return happens to be C<undef>.

You may also use C<defined()> to check whether a subroutine exists, by
saying C<defined &func> without parentheses.  On the other hand, use
of C<defined()> upon aggregates (hashes and arrays) is not guaranteed to
produce intuitive results, and should probably be avoided.

When used on a hash element, it tells you whether the value is defined,
not whether the key exists in the hash.  Use L</exists> for the latter
purpose.
d639 2
a641 1
    $debugging = 0 unless defined $debugging;
d643 5
a647 3
Note:  Many folks tend to overuse C<defined()>, and then are surprised to
discover that the number C<0> and C<""> (the zero-length string) are, in fact,
defined values.  For example, if you say
d651 1
a651 1
The pattern match succeeds, and C<$1> is defined, despite the fact that it
d653 1
a653 1
matched something that happened to be zero characters long.  This is all
d655 4
a658 24
it's an admission that it couldn't give you an honest answer.  So you
should use C<defined()> only when you're questioning the integrity of what
you're trying to do.  At other times, a simple comparison to C<0> or C<""> is
what you want.

Currently, using C<defined()> on an entire array or hash reports whether
memory for that aggregate has ever been allocated.  So an array you set
to the empty list appears undefined initially, and one that once was full
and that you then set to the empty list still appears defined.  You
should instead use a simple test for size:

    if (@@an_array) { print "has array elements\n" }
    if (%a_hash)   { print "has hash members\n"   }

Using C<undef()> on these, however, does clear their memory and then report
them as not defined anymore, but you shouldn't do that unless you don't
plan to use them again, because it saves time when you load them up
again to have memory already ready to be filled.  The normal way to 
free up space used by an aggregate is to assign the empty list.

This counterintuitive behavior of C<defined()> on aggregates may be
changed, fixed, or broken in a future release of Perl.

See also L</undef>, L</exists>, L</ref>.
d662 5
a666 6
Deletes the specified key(s) and their associated values from a hash.
For each key, returns the deleted value associated with that key, or
the undefined value if there was no such key.  Deleting from C<$ENV{}>
modifies the environment.  Deleting from a hash tied to a DBM file
deletes the entry from the DBM file.  (But deleting from a C<tie()>d hash
doesn't necessarily return anything.)
d668 1
a668 1
The following deletes all the values of a hash:
d670 2
a671 2
    foreach $key (keys %HASH) {
	delete $HASH{$key};
d674 3
a676 12
And so does this:

    delete @@HASH{keys %HASH}

But both of these are slower than just assigning the empty list
or undefining it:

    %hash = ();		# completely empty %hash
    undef %hash;	# forget %hash every existed

Note that the EXPR can be arbitrarily complicated as long as the final
operation is a hash element lookup or hash slice:
a678 1
    delete @@{$ref->[$x][$y]}{$key1, $key2, @@morekeys};
d682 6
a687 6
Outside an C<eval()>, prints the value of LIST to C<STDERR> and exits with
the current value of C<$!> (errno).  If C<$!> is C<0>, exits with the value of
C<($? E<gt>E<gt> 8)> (backtick `command` status).  If C<($? E<gt>E<gt> 8)>
is C<0>, exits with C<255>.  Inside an C<eval(),> the error message is stuffed into
C<$@@> and the C<eval()> is terminated with the undefined value.  This makes
C<die()> the way to raise an exception.
d692 1
a692 1
    chdir '/usr/spool/news' or die "Can't cd to spool: $!\n"
d696 2
a697 7
is supplied.  Note that the "input line number" (also known as "chunk")
is subject to whatever notion of "line" happens to be currently in
effect, and is also available as the special variable C<$.>.
See L<perlvar/"$/"> and L<perlvar/"$.">.

Hint: sometimes appending C<", stopped"> to your message
will cause it to make better sense when the string C<"at foo line 123"> is
d708 1
a708 47
See also exit(), warn(), and the Carp module.

If LIST is empty and C<$@@> already contains a value (typically from a
previous eval) that value is reused after appending C<"\t...propagated">.
This is useful for propagating exceptions:

    eval { ... };
    die unless $@@ =~ /Expected exception/;

If C<$@@> is empty then the string C<"Died"> is used.

die() can also be called with a reference argument.  If this happens to be
trapped within an eval(), $@@ contains the reference.  This behavior permits
a more elaborate exception handling implementation using objects that
maintain arbitary state about the nature of the exception.  Such a scheme
is sometimes preferable to matching particular string values of $@@ using
regular expressions.  Here's an example:

    eval { ... ; die Some::Module::Exception->new( FOO => "bar" ) };
    if ($@@) {
        if (ref($@@) && UNIVERSAL::isa($@@,"Some::Module::Exception")) {
            # handle Some::Module::Exception
        }
        else {
            # handle all other possible exceptions
        }
    }

Since perl will stringify uncaught exception messages before displaying
them, you may want to overload stringification operations on such custom
exception objects.  See L<overload> for details about that.

You can arrange for a callback to be run just before the C<die()> does
its deed, by setting the C<$SIG{__DIE__}> hook.  The associated handler
will be called with the error text and can change the error message, if
it sees fit, by calling C<die()> again.  See L<perlvar/$SIG{expr}> for details on
setting C<%SIG> entries, and L<"eval BLOCK"> for some examples.

Note that the C<$SIG{__DIE__}> hook is currently called even inside
eval()ed blocks/strings!  If one wants the hook to do nothing in such
situations, put

	die @@_ if $^S;

as the first line of the handler (see L<perlvar/$^S>).  Because this
promotes action at a distance, this counterintuitive behavior may be fixed
in a future release.
a716 4
C<do BLOCK> does I<not> count as a loop, so the loop control statements
C<next>, C<last>, or C<redo> cannot be used to leave or restart the block.
See L<perlsyn> for alternative strategies.

d731 1
a731 1
    scalar eval `cat stat.pl`;
d733 6
a738 13
except that it's more efficient and concise, keeps track of the current
filename for error messages, searches the @@INC libraries, and updates
C<%INC> if the file is found.  See L<perlvar/Predefined Names> for these
variables.  It also differs in that code evaluated with C<do FILENAME>
cannot see lexicals in the enclosing scope; C<eval STRING> does.  It's the
same, however, in that it does reparse the file every time you call it,
so you probably don't want to do this inside a loop.

If C<do> cannot read the file, it returns undef and sets C<$!> to the
error.  If C<do> can read the file but cannot compile it, it
returns undef and sets an error message in C<$@@>.   If the file is
successfully compiled, C<do> returns the value of the last expression
evaluated.
d741 1
a741 1
C<use()> and C<require()> operators, which also do automatic error checking
a743 14
You might like to use C<do> to read in a program configuration
file.  Manual error checking can be done this way:

    # read in config files: system first, then user 
    for $file ("/share/prog/defaults.rc",
               "$ENV{HOME}/.someprogrc") 
   {
	unless ($return = do $file) {
	    warn "couldn't parse $file: $@@" if $@@;
	    warn "couldn't do $file: $!"    unless defined $return;
	    warn "couldn't run $file"       unless $return;
	}
    }

a745 2
=item dump

d751 2
a752 2
it as a goto with an intervening core dump and reincarnation.  If C<LABEL>
is omitted, restarts the program from the top.  WARNING: Any files
d777 1
a777 26
This operator is largely obsolete, partly because it's very hard to 
convert a core file into an executable, and because the real perl-to-C
compiler has superseded it.

=item each HASH

When called in list context, returns a 2-element list consisting of the
key and value for the next element of a hash, so that you can iterate over
it.  When called in scalar context, returns the key for only the "next"
element in the hash.  (Note: Keys may be C<"0"> or C<"">, which are logically
false; you may wish to avoid constructs like C<while ($k = each %foo) {}>
for this reason.)

Entries are returned in an apparently random order.  The actual random
order is subject to change in future versions of perl, but it is guaranteed
to be in the same order as either the C<keys()> or C<values()> function
would produce on the same (unmodified) hash.

When the hash is entirely read, a null array is returned in list context
(which when assigned produces a FALSE (C<0>) value), and C<undef> in
scalar context.  The next call to C<each()> after that will start iterating
again.  There is a single iterator for each hash, shared by all C<each()>,
C<keys()>, and C<values()> function calls in the program; it can be reset by
reading all the elements from the hash, or by evaluating C<keys HASH> or
C<values HASH>.  If you add or delete elements of a hash while you're
iterating over it, you may get entries skipped or duplicated, so don't.
d779 11
a789 2
The following prints out your environment like the printenv(1) program,
only in a different order:
d795 1
a795 1
See also C<keys()>, C<values()> and C<sort()>.
d805 2
a806 2
gives the real filehandle.  (Note that this function actually
reads a character and then C<ungetc()>s it, so isn't very useful in an
d812 5
a816 5
Using C<eof()> with empty parentheses is very different.  It indicates
the pseudo file formed of the files listed on the command line, i.e.,
C<eof()> is reasonable to use inside a C<while (E<lt>E<gt>)> loop to
detect the end of only the last file.  Use C<eof(ARGV)> or eof without the
parentheses to test I<EACH> file in a while (E<lt>E<gt>) loop.  Examples:
a819 1
	next if /^\s*#/;	# skip comments 
d821 1
a821 2
    } continue {
	close ARGV  if eof;	# Not eof()!
d826 1
a826 1
	if (eof()) {		# check for end of current file
d828 1
a828 1
	    close(ARGV);	# close or last; is needed if we
d835 1
a835 2
input operators return false values when they run out of data, or if there
was an error.
d841 5
a845 24
In the first form, the return value of EXPR is parsed and executed as if it
were a little Perl program.  The value of the expression (which is itself
determined within scalar context) is first parsed, and if there weren't any
errors, executed in the context of the current Perl program, so that any
variable settings or subroutine and format definitions remain afterwards.
Note that the value is parsed every time the eval executes.  If EXPR is
omitted, evaluates C<$_>.  This form is typically used to delay parsing
and subsequent execution of the text of EXPR until run time.

In the second form, the code within the BLOCK is parsed only once--at the
same time the code surrounding the eval itself was parsed--and executed
within the context of the current Perl program.  This form is typically
used to trap exceptions more efficiently than the first (see below), while
also providing the benefit of checking the code within BLOCK at compile
time.

The final semicolon, if any, may be omitted from the value of EXPR or within
the BLOCK.

In both forms, the value returned is the value of the last expression
evaluated inside the mini-program; a return statement may be also used, just
as with subroutines.  The expression providing the return value is evaluated
in void, scalar, or list context, depending on the context of the eval itself.
See L</wantarray> for more on how the evaluation context can be determined.
d847 2
a848 2
If there is a syntax error or runtime error, or a C<die()> statement is
executed, an undefined value is returned by C<eval()>, and C<$@@> is set to the
d850 2
a851 4
string.  Beware that using C<eval()> neither silences perl from printing
warnings to STDERR, nor does it stuff the text of warning messages into C<$@@>.
To do either of those, you have to use the C<$SIG{__WARN__}> facility.  See
L</warn> and L<perlvar>.
d853 2
a854 2
Note that, because C<eval()> traps otherwise-fatal errors, it is useful for
determining whether a particular feature (such as C<socket()> or C<symlink()>)
d863 1
a863 1
    # make divide-by-zero nonfatal
d870 1
a870 1
    eval { $answer = };			# WRONG
d875 1
a875 25
Due to the current arguably broken state of C<__DIE__> hooks, when using
the C<eval{}> form as an exception trap in libraries, you may wish not
to trigger any C<__DIE__> hooks that user code may have installed.
You can use the C<local $SIG{__DIE__}> construct for this purpose,
as shown in this example:

    # a very private exception trap for divide-by-zero
    eval { local $SIG{'__DIE__'}; $answer = $a / $b; };
    warn $@@ if $@@;

This is especially significant, given that C<__DIE__> hooks can call
C<die()> again, which has the effect of changing their error messages:

    # __DIE__ hooks may modify error messages
    {
       local $SIG{'__DIE__'} =
              sub { (my $x = $_[0]) =~ s/foo/bar/g; die $x };
       eval { die "foo lives here" };
       print $@@ if $@@;                # prints "bar lives here"
    }

Because this promotes action at a distance, this counterintuive behavior
may be fixed in a future release.

With an C<eval()>, you should be especially careful to remember what's
d884 1
a884 1
    eval "\$$x++";	# CASE 5
d887 8
a894 13
Cases 1 and 2 above behave identically: they run the code contained in
the variable C<$x>.  (Although case 2 has misleading double quotes making
the reader wonder what else might be happening (nothing is).)  Cases 3
and 4 likewise behave in the same way: they run the code C<'$x'>, which
does nothing but return the value of C<$x>.  (Case 4 is preferred for
purely visual reasons, but it also has the advantage of compiling at
compile-time instead of at run-time.)  Case 5 is a place where
normally you I<WOULD> like to use double quotes, except that in this
particular situation, you can just use symbolic references instead, as
in case 6.

C<eval BLOCK> does I<not> count as a loop, so the loop control statements
C<next>, C<last>, or C<redo> cannot be used to leave or restart the block.
d898 2
a899 1
=item exec PROGRAM LIST
d901 8
a908 24
The C<exec()> function executes a system command I<AND NEVER RETURNS> -
use C<system()> instead of C<exec()> if you want it to return. It fails and
returns FALSE only if the command does not exist I<and> it is executed
directly instead of via your system's command shell (see below).

Since it's a common mistake to use C<exec()> instead of C<system()>, Perl
warns you if there is a following statement which isn't C<die()>, C<warn()>,
or C<exit()> (if C<-w> is set  -  but you always do that).   If you
I<really> want to follow an C<exec()> with some other statement, you
can use one of these styles to avoid the warning:

    exec ('foo')   or print STDERR "couldn't exec foo: $!";
    { exec ('foo') }; print STDERR "couldn't exec foo: $!";

If there is more than one argument in LIST, or if LIST is an array
with more than one value, calls execvp(3) with the arguments in LIST.
If there is only one scalar argument or an array with one element in it,
the argument is checked for shell metacharacters, and if there are any,
the entire argument is passed to the system's command shell for parsing
(this is C</bin/sh -c> on Unix platforms, but varies on other platforms).
If there are no shell metacharacters in the argument, it is split into
words and passed directly to C<execvp()>, which is more efficient.  Note:
C<exec()> and C<system()> do not flush your output buffer, so you may need to
set C<$|> to avoid lost output.  Examples:
d917 1
a917 1
LIST as a multivalued list, even if there is only a single scalar in
a926 23
When the arguments get executed via the system shell, results will
be subject to its quirks and capabilities.  See L<perlop/"`STRING`">
for details.

Using an indirect object with C<exec()> or C<system()> is also more secure.
This usage forces interpretation of the arguments as a multivalued list,
even if the list had just one argument.  That way you're safe from the
shell expanding wildcards or splitting up words with whitespace in them.

    @@args = ( "echo surprise" );

    exec @@args;               # subject to shell escapes
                                # if @@args == 1
    exec { $args[0] } @@args;  # safe even with one-arg list

The first version, the one without the indirect object, ran the I<echo>
program, passing it C<"surprise"> an argument.  The second version
didn't--it tried to run a program literally called I<"echo surprise">,
didn't find it, and set C<$?> to a non-zero value indicating failure.

Note that C<exec()> will not call your C<END> blocks, nor will it call
any C<DESTROY> methods in your objects.

d932 3
a934 3
    print "Exists\n" 	if exists $array{$key};
    print "Defined\n" 	if defined $array{$key};
    print "True\n"      if $array{$key};
d936 1
a936 1
A hash element can be TRUE only if it's defined, and defined if
d942 1
a942 16
    if (exists $ref->{A}->{B}->{$key}) 	{ }
    if (exists $hash{A}{B}{$key}) 	{ }

Although the last element will not spring into existence just because
its existence was tested, intervening ones will.  Thus C<$ref-E<gt>{"A"}>
and C<$ref-E<gt>{"A"}-E<gt>{"B"}> will spring into existence due to the
existence test for a $key element.  This happens anywhere the arrow
operator is used, including even 

    undef $ref;
    if (exists $ref->{"Some key"})	{ }
    print $ref; 	    # prints HASH(0x80d3d5c)

This surprising autovivification in what does not at first--or even
second--glance appear to be an lvalue context may be fixed in a future
release.
d946 4
a949 1
Evaluates EXPR and exits immediately with that value.    Example:
d954 1
a954 17
See also C<die()>.  If EXPR is omitted, exits with C<0> status.  The only
universally recognized values for EXPR are C<0> for success and C<1>
for error; other values are subject to interpretation depending on the
environment in which the Perl program is running.  For example, exiting
69 (EX_UNAVAILABLE) from a I<sendmail> incoming-mail filter will cause
the mailer to return the item undelivered, but that's not true everywhere.

Don't use C<exit()> to abort a subroutine if there's any chance that
someone might want to trap whatever error happened.  Use C<die()> instead,
which can be trapped by an C<eval()>.

The exit() function does not always exit immediately. It calls any
defined C<END> routines first, but these C<END> routines may not
themselves abort the exit. Likewise any object destructors that need to
be called are called before the real exit.  If this is a problem, you
can call C<POSIX:_exit($status)> to avoid END and destructor processing.
See L<perlsub> for details.
a957 2
=item exp

d967 3
a969 2
first to get the correct constant definitions.  Argument processing and
value return works just like C<ioctl()> below.  
d973 1
a973 12
    fcntl($filehandle, F_GETFL, $packed_return_buffer)
	or die "can't fcntl F_GETFL: $!";

You don't have to check for C<defined()> on the return from C<fnctl()>.
Like C<ioctl()>, it maps a C<0> return from the system call into "C<0>
but true" in Perl.  This string is true in boolean context and C<0>
in numeric context.  It is also exempt from the normal B<-w> warnings
on improper numeric conversions.

Note that C<fcntl()> will produce a fatal error if used on a machine that
doesn't implement fcntl(2).  See the Fcntl module or your fcntl(2)
manpage to learn what functions are available on your system.
d977 3
a979 12
Returns the file descriptor for a filehandle, or undefined if the
filehandle is not open.  This is mainly useful for constructing
bitmaps for C<select()> and low-level POSIX tty-handling operations.
If FILEHANDLE is an expression, the value is taken as an indirect
filehandle, generally its name.

You can use this to find out whether two handles refer to the 
same underlying descriptor:

    if (fileno(THIS) == fileno(THAT)) {
	print "THIS and THAT are dups\n";
    } 
d983 8
a990 42
Calls flock(2), or an emulation of it, on FILEHANDLE.  Returns TRUE
for success, FALSE on failure.  Produces a fatal error if used on a
machine that doesn't implement flock(2), fcntl(2) locking, or lockf(3).
C<flock()> is Perl's portable file locking interface, although it locks
only entire files, not records.

Two potentially non-obvious but traditional C<flock> semantics are
that it waits indefinitely until the lock is granted, and that its locks
B<merely advisory>.  Such discretionary locks are more flexible, but offer
fewer guarantees.  This means that files locked with C<flock()> may be
modified by programs that do not also use C<flock()>.  See L<perlport>,
your port's specific documentation, or your system-specific local manpages
for details.  It's best to assume traditional behavior if you're writing
portable programs.  (But if you're not, you should as always feel perfectly
free to write for your own system's idiosyncrasies (sometimes called
"features").  Slavish adherence to portability concerns shouldn't get
in the way of your getting your job done.)

OPERATION is one of LOCK_SH, LOCK_EX, or LOCK_UN, possibly combined with
LOCK_NB.  These constants are traditionally valued 1, 2, 8 and 4, but
you can use the symbolic names if import them from the Fcntl module,
either individually, or as a group using the ':flock' tag.  LOCK_SH
requests a shared lock, LOCK_EX requests an exclusive lock, and LOCK_UN
releases a previously requested lock.  If LOCK_NB is added to LOCK_SH or
LOCK_EX then C<flock()> will return immediately rather than blocking
waiting for the lock (check the return status to see if you got it).

To avoid the possibility of miscoordination, Perl now flushes FILEHANDLE
before locking or unlocking it.

Note that the emulation built with lockf(3) doesn't provide shared
locks, and it requires that FILEHANDLE be open with write intent.  These
are the semantics that lockf(3) implements.  Most if not all systems
implement lockf(3) in terms of fcntl(2) locking, though, so the
differing semantics shouldn't bite too many people.

Note also that some versions of C<flock()> cannot lock things over the
network; you would need to use the more system-specific C<fcntl()> for
that.  If you like you can force Perl to ignore your system's flock(2)
function, and so provide its own fcntl(2)-based emulation, by passing
the switch C<-Ud_flock> to the F<Configure> program when you configure
perl.
d994 4
a997 1
    use Fcntl ':flock'; # import LOCK_* constants
d1000 1
a1000 1
	flock(MBOX,LOCK_EX);
d1007 1
a1007 1
	flock(MBOX,LOCK_UN);
a1016 4
On systems that support a real flock(), locks are inherited across fork()
calls, whereas those that must resort to the more capricious fcntl()
function lose the locks, making it harder to write servers.

d1021 10
a1030 8
Does a fork(2) system call to create a new process running the
same program at the same point.  It returns the child pid to the
parent process, C<0> to the child process, or C<undef> if the fork is
unsuccessful.  File descriptors (and sometimes locks on those descriptors)
are shared, while everything else is copied.  On most systems supporting
fork(), great care has gone into making it extremely efficient (for
example, using copy-on-write technology on data pages), making it the
dominant paradigm for multitasking over the last few decades.
d1032 14
a1045 3
Note: unflushed buffers remain unflushed in both processes, which means
you may need to set C<$|> ($AUTOFLUSH in English) or call the C<autoflush()>
method of C<IO::Handle> to avoid duplicate output.
d1047 2
a1048 10
If you C<fork()> without ever waiting on your children, you will
accumulate zombies.  On some systems, you can avoid this by setting
C<$SIG{CHLD}> to C<"IGNORE">.  See also L<perlipc> for more examples of
forking and reaping moribund children.

Note that if your forked child inherits system file descriptors like
STDIN and STDOUT that are actually connected by a pipe or socket, even
if you exit, then the remote server (such as, say, a CGI script or a
backgrounded job launced from a remote shell) won't think you're done.
You should reopen those to F</dev/null> if it's any issue.
d1052 1
a1052 1
Declare a picture format for use by the C<write()> function.  For
d1055 1
a1055 1
    format Something =
d1061 1
a1061 1
    $num = $cost/$quantity;
a1066 1
=item formline PICTURE,LIST
d1068 3
a1070 1
This is an internal function used by C<format>s, though you may call it,
d1073 2
a1074 2
accumulator, C<$^A> (or C<$ACCUMULATOR> in English).
Eventually, when a C<write()> is done, the contents of
d1076 2
a1077 2
yourself and then set C<$^A> back to C<"">.  Note that a format typically
does one C<formline()> per line of form, but the C<formline()> function itself
d1083 1
a1083 1
Be careful if you put double quotes around the picture, because an "C<@@>"
d1085 1
a1085 1
C<formline()> always returns TRUE.  See L<perlform> for other examples.
d1092 3
a1094 5
or the undefined value at end of file, or if there was an error.
If FILEHANDLE is omitted, reads from STDIN.  This is not particularly
efficient.  However, it cannot be used by itself to fetch single
characters without waiting for the user to hit enter.  For that, try
something more like:
d1100 1
a1100 1
	system "stty", '-icanon', 'eol', "\001";
d1109 1
a1109 1
	system "stty", 'icanon', 'eol', '^@@'; # ASCII null
d1113 2
a1114 2
Determination of whether $BSD_STYLE should be set
is left as an exercise to the reader.
d1116 2
a1117 4
The C<POSIX::getattr()> function can do this more portably on
systems purporting POSIX compliance.  See also the C<Term::ReadKey>
module from your nearest CPAN site; details on CPAN can be found on
L<perlmodlib/CPAN>.
d1121 2
a1122 3
Implements the C library function of the same name, which on most
systems returns the current login from F</etc/utmp>, if any.  If null,
use C<getpwuid()>.
d1124 1
a1124 1
    $login = getlogin || getpwuid($<) || "Kilroy";
d1126 2
a1127 2
Do not consider C<getlogin()> for authentication: it is not as
secure as C<getpwuid()>.
d1141 1
a1141 2
Returns the current process group for the specified PID.  Use
a PID of C<0> to get the current process group for the
d1144 1
a1144 2
group of current process.  Note that the POSIX version of C<getpgrp()>
does not accept a PID argument, so only C<PID==0> is truly portable.
d1217 1
a1217 1
system library.  In list context, the return values from the
d1221 1
a1221 1
       $quota,$comment,$gcos,$dir,$shell,$expire) = getpw*
d1230 1
a1230 1
In scalar context, you get the name, unless the function was a
d1234 7
a1240 28
    $uid   = getpwnam($name);
    $name  = getpwuid($num);
    $name  = getpwent();
    $gid   = getgrnam($name);
    $name  = getgrgid($num;
    $name  = getgrent();
    #etc.

In I<getpw*()> the fields C<$quota>, C<$comment>, and C<$expire> are
special cases in the sense that in many systems they are unsupported.
If the C<$quota> is unsupported, it is an empty scalar.  If it is
supported, it usually encodes the disk quota.  If the C<$comment>
field is unsupported, it is an empty scalar.  If it is supported it
usually encodes some administrative comment about the user.  In some
systems the $quota field may be C<$change> or C<$age>, fields that have
to do with password aging.  In some systems the C<$comment> field may
be C<$class>.  The C<$expire> field, if present, encodes the expiration
period of the account or the password.  For the availability and the
exact meaning of these fields in your system, please consult your
getpwnam(3) documentation and your F<pwd.h> file.  You can also find
out from within Perl what your C<$quota> and C<$comment> fields mean
and whether you have the C<$expire> field by using the C<Config> module
and the values C<d_pwquota>, C<d_pwage>, C<d_pwchange>, C<d_pwcomment>,
and C<d_pwexpire>.  Shadow password files are only supported if your
vendor has implemented them in the intuitive fashion that calling the
regular C library routines gets the shadow versions if you're running
under privilege.  Those that incorrectly implement a separate library
call are not supported.
d1242 1
a1242 1
The C<$members> value returned by I<getgr*()> is a space separated list of
d1247 1
a1247 1
C<@@addrs> value returned by a successful call is a list of the raw
a1253 23
The Socket library makes this slightly easier:

    use Socket;
    $iaddr = inet_aton("127.1"); # or whatever address
    $name  = gethostbyaddr($iaddr, AF_INET);

    # or going the other way
    $straddr = inet_ntoa($iaddr");

If you get tired of remembering which element of the return list contains
which return value, by-name interfaces are also provided in modules:
C<File::stat>, C<Net::hostent>, C<Net::netent>, C<Net::protoent>, C<Net::servent>,
C<Time::gmtime>, C<Time::localtime>, and C<User::grent>.  These override the
normal built-in, replacing them with versions that return objects with
the appropriate names for each field.  For example:

   use File::stat;
   use User::pwent;
   $is_his = (stat($filename)->uid == pwent($whoever)->uid);

Even though it looks like they're the same method calls (uid), 
they aren't, because a C<File::stat> object is different from a C<User::pwent> object.

d1264 1
a1264 1
Returns the socket option requested, or undef if there is an error.
d1268 3
a1270 7
=item glob

Returns the value of EXPR with filename expansions such as the
standard Unix shell F</bin/csh> would do.  This is the internal function
implementing the C<E<lt>*.cE<gt>> operator, but you can use it directly.
If EXPR is omitted, C<$_> is used.  The C<E<lt>*.cE<gt>> operator is
discussed in more detail in L<perlop/"I/O Operators">.
d1275 1
a1275 1
with the time localized for the standard Greenwich time zone.
d1278 1
a1278 1
    #  0    1    2     3     4    5     6     7     8
d1283 2
a1284 29
In particular this means that C<$mon> has the range C<0..11> and C<$wday>
has the range C<0..6> with sunday as day C<0>.  Also, C<$year> is the
number of years since 1900, that is, C<$year> is C<123> in year 2023,
I<not> simply the last two digits of the year.  If you assume it is,
then you create non-Y2K-compliant programs--and you wouldn't want to do
that, would you?

If EXPR is omitted, does C<gmtime(time())>.

In scalar context, returns the ctime(3) value:

    $now_string = gmtime;  # e.g., "Thu Oct 13 04:54:34 1994"

Also see the C<timegm()> function provided by the C<Time::Local> module,
and the strftime(3) function available via the POSIX module.

This scalar value is B<not> locale dependent (see L<perllocale>), but
is instead a Perl builtin.  Also see the C<Time::Local> module, and the
strftime(3) and mktime(3) functions available via the POSIX module.  To
get somewhat similar but locale dependent date strings, set up your
locale environment variables appropriately (please see L<perllocale>)
and try for example:

    use POSIX qw(strftime);
    $now_string = strftime "%a %b %e %H:%M:%S %Y", gmtime;

Note that the C<%a> and C<%b> escapes, which represent the short forms
of the day of the week and the month of the year, may not necessarily
be three characters wide in all locales.
d1292 1
a1292 1
The C<goto-LABEL> form finds the statement labeled with LABEL and resumes
d1294 3
a1296 4
requires initialization, such as a subroutine or a C<foreach> loop.  It
also can't be used to go into a construct that is optimized away,
or to get out of a block or subroutine given to C<sort()>.
It can be used to go almost anywhere else within the dynamic scope,
d1298 2
a1299 2
construct such as C<last> or C<die()>.  The author of Perl has never felt the
need to use this form of C<goto> (in Perl, that is--C is another matter).
d1301 2
a1302 2
The C<goto-EXPR> form expects a label name, whose scope will be resolved
dynamically.  This allows for computed C<goto>s per FORTRAN, but isn't
d1307 1
a1307 1
The C<goto-&NAME> form is highly magical, and substitutes a call to the
d1309 1
a1309 1
C<AUTOLOAD> subroutines that wish to load another subroutine and then
d1311 2
a1312 2
(except that any modifications to C<@@_> in the current subroutine are
propagated to the other subroutine.)  After the C<goto>, not even C<caller()>
a1318 3
This is similar in spirit to, but not the same as, grep(1) and its
relatives.  In particular, it is not limited to using regular expressions.

d1320 2
a1321 2
C<$_> to each element) and returns the list value consisting of those
elements for which the expression evaluated to TRUE.  In scalar
d1330 4
a1333 10
Note that, because C<$_> is a reference into the list value, it can
be used to modify the elements of the array.  While this is useful and
supported, it can cause bizarre results if the LIST is not a named array.
Similarly, grep returns aliases into the original list, much as a for
loop's index variable aliases the list elements.  That is, modifying an
element of a list returned by grep (for example, in a C<foreach>, C<map()>
or another C<grep()>) actually modifies the element in the original list.
This is usually something to be avoided when writing clear code.

See also L</map> for an array composed of the results of the BLOCK or EXPR.
d1337 3
a1339 8
=item hex

Interprets EXPR as a hex string and returns the corresponding value.
(To convert strings that might start with either 0, 0x, or 0b, see
L</oct>.)  If EXPR is omitted, uses C<$_>.

    print hex '0xAf'; # prints '175'
    print hex 'aF';   # same
d1343 1
a1343 1
There is no builtin C<import()> function.  It is just an ordinary
d1345 2
a1346 2
names to another module.  The C<use()> function calls the C<import()> method
for the package used.  See also L</use()>, L<perlmod>, and L<Exporter>.
d1352 5
a1356 7
The index function searches for one string within another, but without
the wildcard-like behavior of a full regular-expression pattern match.
It returns the position of the first occurrence of SUBSTR in STR at
or after POSITION.  If POSITION is omitted, starts searching from the
beginning of the string.  The return value is based at C<0> (or whatever
you've set the C<$[> variable to--but don't do that).  If the substring
is not found, returns one less than the base, ordinarily C<-1>.
d1360 1
a1360 10
=item int

Returns the integer portion of EXPR.  If EXPR is omitted, uses C<$_>.
You should not use this function for rounding: one because it truncates
towards C<0>, and two because machine representations of floating point
numbers can sometimes produce counterintuitive results.  For example,
C<int(-6.725/0.025)> produces -268 rather than the correct -269; that's
because it's really more like -268.99999999999994315658 instead.  Usually,
the C<sprintf()>, C<printf()>, or the C<POSIX::floor> and C<POSIX::ceil>
functions will serve you better than will int().
d1364 1
a1364 1
Implements the ioctl(2) function.  You'll probably first have to say
d1368 1
a1368 1
to get the correct function definitions.  If F<ioctl.ph> doesn't
d1371 2
a1372 2
(There is a Perl script called B<h2ph> that comes with the Perl kit that
may help you in this, but it's nontrivial.)  SCALAR will be read and/or
d1374 1
a1374 1
will be passed as the third argument of the actual C<ioctl()> call.  (If SCALAR
d1377 1
a1377 1
TRUE, add a C<0> to the scalar before using it.)  The C<pack()> and C<unpack()>
d1379 1
a1379 1
C<ioctl()>.  The following example sets the erase character to DEL.
d1393 1
a1393 1
The return value of C<ioctl()> (and C<fcntl()>) is as follows:
d1404 1
a1404 1
    $retval = ioctl(...) || -1;
a1406 3
The special string "C<0> but true" is exempt from B<-w> complaints
about improper numeric conversions.

d1409 3
a1411 4
Joins the separate strings of LIST into a single string with fields
separated by the value of EXPR, and returns that new string.  Example:

    $rec = join(':', $login,$passwd,$uid,$gid,$gcos,$home,$shell);
d1413 1
a1413 1
See L</split>.
d1415 1
a1415 1
=item keys HASH
d1417 1
a1417 7
Returns a list consisting of all the keys of the named hash.  (In a
scalar context, returns the number of keys.)  The keys are returned in
an apparently random order.  The actual random order is subject to
change in future versions of perl, but it is guaranteed to be the same
order as either the C<values()> or C<each()> function produces (given
that the hash has not been modified).  As a side effect, it resets
HASH's iterator.
d1419 6
a1424 1
Here is yet another way to print your environment:
d1438 2
a1439 2
To sort a hash by value, you'll need to use a C<sort()> function.
Here's a descending numeric sort of a hash by its values:
d1441 1
a1441 1
    foreach $key (sort { $hash{$b} <=> $hash{$a} } keys %hash) {
a1444 17
As an lvalue C<keys()> allows you to increase the number of hash buckets
allocated for the given hash.  This can gain you a measure of efficiency if
you know the hash is going to get big.  (This is similar to pre-extending
an array by assigning a larger number to $#array.)  If you say

    keys %hash = 200;

then C<%hash> will have at least 200 buckets allocated for it--256 of them,
in fact, since it rounds up to the next power of two.  These
buckets will be retained even if you do C<%hash = ()>, use C<undef
%hash> if you want to free the storage while C<%hash> is still in scope.
You can't shrink the number of buckets allocated for the hash using
C<keys()> in this way (but you needn't worry about doing this by accident,
as trying has no effect).

See also C<each()>, C<values()> and C<sort()>.

d1447 2
a1448 2
Sends a signal to a list of processes.  The first element of
the list must be the signal to send.  Returns the number of
d1458 1
a1458 1
use a signal name in quotes.  See L<perlipc/"Signals"> for details.
d1471 1
a1471 1
	#...
a1473 7
C<last> cannot be used to exit a block which returns a value such as
C<eval {}>, C<sub {}> or C<do {}>, and should not be used to exit
a grep() or map() operation.

See also L</continue> for an illustration of how C<last>, C<next>, and
C<redo> work.

a1475 2
=item lc

d1477 2
a1478 4
implementing the C<\L> escape in double-quoted strings.
Respects current LC_CTYPE locale if C<use locale> in force.  See L<perllocale>.

If EXPR is omitted, uses C<$_>.
a1481 2
=item lcfirst

d1483 2
a1484 4
the internal function implementing the C<\l> escape in double-quoted strings.
Respects current LC_CTYPE locale if C<use locale> in force.  See L<perllocale>.

If EXPR is omitted, uses C<$_>.
a1487 2
=item length

d1489 1
a1489 3
omitted, returns length of C<$_>.  Note that this cannot be used on 
an entire array or hash to find out how many elements these have.
For that, use C<scalar @@array> and C<scalar keys %hash> respectively.
d1493 2
a1494 2
Creates a new filename linked to the old filename.  Returns TRUE for
success, FALSE otherwise. 
d1499 1
a1499 1
it succeeded, FALSE otherwise.  See the example in L<perlipc/"Sockets: Client/Server Communication">.
d1503 7
a1509 2
You really probably want to be using C<my()> instead, because C<local()> isn't
what most people think of as "local".  See L<perlsub/"Private Variables
a1511 5
A local modifies the listed variables to be local to the enclosing
block, file, or eval.  If more than one value is listed, the list must
be placed in parentheses.  See L<perlsub/"Temporary Values via local()">
for details, including issues with tied arrays and hashes.

d1515 1
a1515 1
with the time analyzed for the local time zone.  Typically used as
a1517 1
    #  0    1    2     3     4    5     6     7     8
d1522 2
a1523 19
In particular this means that C<$mon> has the range C<0..11> and C<$wday>
has the range C<0..6> with sunday as day C<0>.  Also, C<$year> is the
number of years since 1900, that is, C<$year> is C<123> in year 2023,
and I<not> simply the last two digits of the year.  If you assume it is,
then you create non-Y2K-compliant programs--and you wouldn't want to do
that, would you?

If EXPR is omitted, uses the current time (C<localtime(time)>).

In scalar context, returns the ctime(3) value:

    $now_string = localtime;  # e.g., "Thu Oct 13 04:54:34 1994"

This scalar value is B<not> locale dependent, see L<perllocale>, but
instead a Perl builtin.  Also see the C<Time::Local> module, and the
strftime(3) and mktime(3) function available via the POSIX module.  To
get somewhat similar but locale dependent date strings, set up your
locale environment variables appropriately (please see L<perllocale>)
and try for example:
d1525 1
a1525 2
    use POSIX qw(strftime);
    $now_string = strftime "%a %b %e %H:%M:%S %Y", localtime;
d1527 4
a1530 2
Note that the C<%a> and C<%b>, the short forms of the day of the week
and the month of the year, may not necessarily be three characters wide.
d1534 2
a1535 13
=item log

Returns the natural logarithm (base I<e>) of EXPR.  If EXPR is omitted,
returns log of C<$_>.  To get the log of another base, use basic algebra:
The base-N log of a number is is equal to the natural log of that number
divided by the natural log of N.  For example:

    sub log10 {
	my $n = shift;
	return log($n)/log(10);
    } 

See also L</exp> for the inverse operation.
d1541 3
a1543 8
=item lstat

Does the same thing as the C<stat()> function (including setting the
special C<_> filehandle) but stats a symbolic link instead of the file
the symbolic link points to.  If symbolic links are unimplemented on
your system, a normal C<stat()> is done.

If EXPR is omitted, stats C<$_>.
d1553 1
a1553 1
Evaluates the BLOCK or EXPR for each element of LIST (locally setting C<$_> to each
a1557 2
In scalar context, returns the total number of elements so generated.

a1570 7
Note that, because C<$_> is a reference into the list value, it can
be used to modify the elements of the array.  While this is useful and
supported, it can cause bizarre results if the LIST is not a named array.
Using a regular C<foreach> loop for this purpose would be clearer in
most cases.  See also L</grep> for an array composed of those items of
the original list for which the BLOCK or EXPR evaluates to true.

d1573 3
a1575 10
Creates the directory specified by FILENAME, with permissions
specified by MODE (as modified by C<umask>).  If it succeeds it
returns TRUE, otherwise it returns FALSE and sets C<$!> (errno).

In general, it is better to create directories with permissive MODEs,
and let the user modify that with their C<umask>, than it is to supply
a restrictive MODE and give the user no way to be more permissive.
The exceptions to this rule are when the file or directory should be
kept private (mail files, for instance).  The perlfunc(1) entry on
C<umask> discusses the choice of MODE in more detail.
d1579 4
a1582 9
Calls the System V IPC function msgctl(2).  You'll probably have to say

    use IPC::SysV;

first to get the correct constant definitions.  If CMD is C<IPC_STAT>,
then ARG must be a variable which will hold the returned C<msqid_ds>
structure.  Returns like C<ioctl()>: the undefined value for error, "C<0> but
true" for zero, or the actual return value otherwise.  See also
C<IPC::SysV> and C<IPC::Semaphore::Msg> documentation.
d1586 2
a1587 3
Calls the System V IPC function msgget(2).  Returns the message queue
id, or the undefined value if there is an error.  See also C<IPC::SysV>
and C<IPC::SysV::Msg> documentation.
d1594 1
a1594 2
successful, or FALSE if there is an error.  See also C<IPC::SysV>
and C<IPC::SysV::Msg> documentation.
d1600 4
a1603 4
SIZE.  Note that if a message is received, the message type will be
the first thing in VAR, and the maximum length of VAR is SIZE plus the
size of the message type.  Returns TRUE if successful, or FALSE if
there is an error.  See also C<IPC::SysV> and C<IPC::SysV::Msg> documentation.
d1607 3
a1609 3
A C<my()> declares the listed variables to be local (lexically) to the
enclosing block, file, or C<eval()>.  If
more than one value is listed, the list must be placed in parentheses.  See
d1621 1
a1621 1
	#...
a1627 7
C<next> cannot be used to exit a block which returns a value such as
C<eval {}>, C<sub {}> or C<do {}>, and should not be used to exit
a grep() or map() operation.

See also L</continue> for an illustration of how C<last>, C<next>, and
C<redo> work.

d1630 1
a1630 1
See the L</use> function, which C<no> is the opposite of.
a1633 2
=item oct

d1635 2
a1636 3
value.  (If EXPR happens to start off with C<0x>, interprets it as a
hex string.  If EXPR starts off with C<0b>, it is interpreted as a
binary string.)  The following will handle decimal, binary, octal, and
d1641 1
a1641 4
If EXPR is omitted, uses C<$_>.  This function is commonly used when
a string such as C<644> needs to be converted into a file mode, for
example. (Although perl will automatically convert strings into
numbers as needed, this automatic conversion assumes base 10.)
d1648 17
a1664 31
FILEHANDLE.  If FILEHANDLE is an expression, its value is used as the
name of the real filehandle wanted.  If EXPR is omitted, the scalar
variable of the same name as the FILEHANDLE contains the filename.
(Note that lexical variables--those declared with C<my()>--will not work
for this purpose; so if you're using C<my()>, specify EXPR in your call
to open.)  See L<perlopentut> for a kinder, gentler explanation of opening
files.

If the filename begins with C<'E<lt>'> or nothing, the file is opened for input.
If the filename begins with C<'E<gt>'>, the file is truncated and opened for
output, being created if necessary. If the filename begins with C<'E<gt>E<gt>'>,
the file is opened for appending, again being created if necessary. 
You can put a C<'+'> in front of the C<'E<gt>'> or C<'E<lt>'> to indicate that
you want both read and write access to the file; thus C<'+E<lt>'> is almost
always preferred for read/write updates--the C<'+E<gt>'> mode would clobber the
file first.  You can't usually use either read-write mode for updating
textfiles, since they have variable length records.  See the B<-i>
switch in L<perlrun> for a better approach.  The file is created with
permissions of C<0666> modified by the process' C<umask> value.

The prefix and the filename may be separated with spaces.
These various prefixes correspond to the fopen(3) modes of C<'r'>, C<'r+'>, C<'w'>,
C<'w+'>, C<'a'>, and C<'a+'>.

If the filename begins with C<'|'>, the filename is interpreted as a
command to which output is to be piped, and if the filename ends with a
C<'|'>, the filename is interpreted as a command which pipes output to
us.  See L<perlipc/"Using open() for IPC">
for more examples of this.  (You are not allowed to C<open()> to a command
that pipes both in I<and> out, but see L<IPC::Open2>, L<IPC::Open3>,
and L<perlipc/"Bidirectional Communication"> for alternatives.)
d1666 2
a1667 2
Opening C<'-'> opens STDIN and opening C<'E<gt>-'> opens STDOUT.  Open returns
nonzero upon success, the undefined value otherwise.  If the C<open()>
d1669 1
a1669 1
subprocess.
d1674 4
a1677 12
dealing with this.  The key distinction between systems that need C<binmode()>
and those that don't is their text file formats.  Systems like Unix, MacOS, and
Plan9, which delimit lines with a single character, and which encode that
character in C as C<"\n">, do not need C<binmode()>.  The rest need it.

When opening a file, it's usually a bad idea to continue normal execution
if the request failed, so C<open()> is frequently used in connection with
C<die()>. Even if C<die()> won't do what you want (say, in a CGI script,
where you want to make a nicely formatted error message (but there are
modules that can help with that problem)) you should always check
the return value from opening a file. The infrequent exception is when
working with an unopened filehandle is actually what you want to do.
a1685 1
    # if the open fails, output is discarded
d1687 1
a1687 2
    open(DBASE, '+<dbase.mine')		    # open for update
	or die "Can't open 'dbase.mine' for update: $!";
d1689 1
a1689 2
    open(ARTICLE, "caesar <$article |")     # decrypt article
	or die "Can't start caesar: $!";
d1691 1
a1691 2
    open(EXTRACT, "|sort >/tmp/Tmp$$")      # $$ is our process id
	or die "Can't start sort: $!";
d1700 1
a1700 1
	my($filename, $input) = @@_;
a1706 1
	local $_;
d1712 1
a1712 1
	    #...		# whatever
d1717 3
a1719 4
with C<'E<gt>&'>, in which case the rest of the string is interpreted as the
name of a filehandle (or file descriptor, if numeric) to be
duped and opened.  You may use C<&> after C<E<gt>>, C<E<gt>E<gt>>, C<E<lt>>, C<+E<gt>>,
C<+E<gt>E<gt>>, and C<+E<lt>>.  The
d1721 1
a1721 1
(Duping a filehandle does not take into account any existing contents of
d1727 2
a1728 2
    open(OLDOUT, ">&STDOUT");
    open(OLDERR, ">&STDERR");
d1742 2
a1743 2
    open(STDOUT, ">&OLDOUT");
    open(STDERR, ">&OLDERR");
d1748 3
a1750 2
If you specify C<'E<lt>&=N'>, where C<N> is a number, then Perl will do an
equivalent of C's C<fdopen()> of that file descriptor; this is more
d1755 1
a1755 1
If you open a pipe on the command C<'-'>, i.e., either C<'|-'> or C<'-|'>, then
d1757 2
a1758 2
of the child within the parent process, and C<0> within the child
process.  (Use C<defined($pid)> to determine whether the open was successful.)
d1765 1
a1765 1
don't want to have to scan shell commands for metacharacters.
d1776 10
a1785 14
NOTE: On any operation that may do a fork, any unflushed buffers remain
unflushed in both processes, which means you may need to set C<$|> to
avoid duplicate output.  On systems that support a close-on-exec flag on
files, the flag will be set for the newly opened file descriptor as
determined by the value of $^F.  See L<perlvar/$^F>.

Closing any piped filehandle causes the parent process to wait for the
child to finish, and returns the status value in C<$?>.

The filename passed to open will have leading and trailing
whitespace deleted, and the normal redirection characters
honored.  This property, known as "magic open", 
can often be used to good effect.  A user could specify a filename of
F<"rsh cat file |">, or you could change certain filenames as needed:
d1787 12
a1798 2
    $filename =~ s/(.*\.gz)\s*$/gzip -dc < $1|/;
    open(FH, $filename) or die "Can't open $filename: $!";
d1800 4
a1803 2
However, to open a file with arbitrary weird characters in it, it's
necessary to protect any leading and trailing whitespace:
d1808 3
a1810 3
If you want a "real" C C<open()> (see L<open(2)> on your system), then you
should use the C<sysopen()> function, which involves no such magic.  This is
another way to protect your filenames from interpretation.  For example:
d1812 2
a1813 2
    use IO::Handle;
    sysopen(HANDLE, $path, O_RDWR|O_CREAT|O_EXCL)
d1815 2
a1816 2
    $oldfh = select(HANDLE); $| = 1; select($oldfh);
    print HANDLE "stuff $$\n");
d1820 1
a1820 19
Using the constructor from the C<IO::Handle> package (or one of its
subclasses, such as C<IO::File> or C<IO::Socket>), you can generate anonymous
filehandles that have the scope of whatever variables hold references to
them, and automatically close whenever and however you leave that scope:

    use IO::File;
    #...
    sub read_myfile_munged {
	my $ALL = shift;
	my $handle = new IO::File;
	open($handle, "myfile") or die "myfile: $!";
	$first = <$handle>
	    or return ();     # Automatically closed here.
	mung $first or die "mung failed";	# Or here.
	return $first, <$handle> if $ALL;	# Or here.
	$first;					# Or here.
    }

See L</seek> for some details about mixing reading and writing.
d1824 2
a1825 2
Opens a directory named EXPR for processing by C<readdir()>, C<telldir()>,
C<seekdir()>, C<rewinddir()>, and C<closedir()>.  Returns TRUE if successful.
a1829 2
=item ord

d1831 1
a1831 1
EXPR is omitted, uses C<$_>.  For the reverse, see L</chr>.
a1839 1
    a	A string with arbitrary binary data, will be null padded.
d1841 1
a1841 2
    Z	A null terminated (asciz) string, will be null padded.

a1848 1

a1850 3
	  (This 'short' is _exactly_ 16 bits, which may differ from
	   what a local C compiler calls 'short'.)

a1852 5
	  (This 'integer' is _at least_ 32 bits wide.  Its exact
           size depends on what a local C compiler calls 'int',
           and may even be larger than the 'long' described in
           the next item.)

a1854 2
	  (This 'long' is _exactly_ 32 bits, which may differ from
	   what a local C compiler calls 'long'.)
d1856 2
a1857 2
    n	A short in "network" (big-endian) order.
    N	A long in "network" (big-endian) order.
a1859 8
	  (These 'shorts' and 'longs' are _exactly_ 16 bits and
	   _exactly_ 32 bits, respectively.)

    q	A signed quad (64-bit) value.
    Q	An unsigned quad value.
	  (Available only if your system supports 64-bit integer values
	   _and_ if Perl has been compiled to support those.
           Causes a fatal error otherwise.)
a1868 5
    w	A BER compressed integer.  Its bytes represent an unsigned
	integer in base 128, most significant digit first, with as
        few digits as possible.  Bit eight (the high bit) is set
        on each byte except the last.

d1873 19
a1891 95
The following rules apply:

=over 8

=item *

Each letter may optionally be followed by a number giving a repeat
count.  With all types except C<"a">, C<"A">, C<"Z">, C<"b">, C<"B">, C<"h">,
C<"H">, and C<"P"> the pack function will gobble up that many values from
the LIST.  A C<*> for the repeat count means to use however many items are
left.

=item *

The C<"a">, C<"A">, and C<"Z"> types gobble just one value, but pack it as a
string of length count, padding with nulls or spaces as necessary.  When
unpacking, C<"A"> strips trailing spaces and nulls, C<"Z"> strips everything
after the first null, and C<"a"> returns data verbatim.

=item *

Likewise, the C<"b"> and C<"B"> fields pack a string that many bits long.

=item *

The C<"h"> and C<"H"> fields pack a string that many nybbles long.

=item *

The C<"p"> type packs a pointer to a null-terminated string.  You are
responsible for ensuring the string is not a temporary value (which can
potentially get deallocated before you get around to using the packed result).
The C<"P"> type packs a pointer to a structure of the size indicated by the
length. A NULL pointer is created if the corresponding value for C<"p"> or
C<"P"> is C<undef>.

=item *

The integer formats C<"s">, C<"S">, C<"i">, C<"I">, C<"l">, and C<"L">
are inherently non-portable between processors and operating systems
because they obey the native byteorder and endianness.  For example a
4-byte integer 0x87654321 (2271560481 decimal) be ordered natively
(arranged in and handled by the CPU registers) into bytes as
 
 	0x12 0x34 0x56 0x78	# little-endian
 	0x78 0x56 0x34 0x12	# big-endian
 
Basically, the Intel, Alpha, and VAX CPUs and little-endian, while
everybody else, for example Motorola m68k/88k, PPC, Sparc, HP PA,
Power, and Cray are big-endian.  MIPS can be either: Digital used it
in little-endian mode, SGI uses it in big-endian mode.

The names `big-endian' and `little-endian' are joking references to
the classic "Gulliver's Travels" (via the paper "On Holy Wars and a
Plea for Peace" by Danny Cohen, USC/ISI IEN 137, April 1, 1980) and
the egg-eating habits of the lilliputs.
 
Some systems may even have weird byte orders such as
 
 	0x56 0x78 0x12 0x34
 	0x34 0x12 0x78 0x56
 
You can see your system's preference with

 	print join(" ", map { sprintf "%#02x", $_ }
                            unpack("C*",pack("L",0x12345678))), "\n";

The byteorder on the platform where Perl was built is also available
via L<Config>:

	use Config;
	print $Config{byteorder}, "\n";

Byteorders C<'1234'> and C<'12345678'> are little-endian, C<'4321'>
and C<'87654321'> are big-endian.

If you want portable packed integers use the formats C<"n">, C<"N">,
C<"v">, and C<"V">, their byte endianness and size is known.

=item *

Real numbers (floats and doubles) are in the native machine format only;
due to the multiplicity of floating formats around, and the lack of a
standard "network" representation, no facility for interchange has been
made.  This means that packed floating point data written on one machine
may not be readable on another - even if both use IEEE floating point
arithmetic (as the endian-ness of the memory representation is not part
of the IEEE spec).

Note that Perl uses doubles internally for all numeric calculation, and
converting from double into float and thence back to double again will
lose precision (i.e., C<unpack("f", pack("f", $foo)>) will not in general
equal C<$foo>).

=back
d1895 1
a1895 1
    $foo = pack("CCCC",65,66,67,68);
d1897 1
a1897 1
    $foo = pack("C4",65,66,67,68);
a1918 7
    $utmp_template = "Z8 Z8 Z16 L";
    $utmp = pack($utmp_template, @@utmp1);
    # a struct utmp (BSDish)

    @@utmp2 = unpack($utmp_template, $utmp);
    # "@@utmp1" eq "@@utmp2"

d1923 1
a1923 3
The same template may generally also be used in unpack().

=item package 
d1928 12
a1939 18
of the package declaration is from the declaration itself through the end
of the enclosing block, file, or eval (the same as the C<my()> operator).
All further unqualified dynamic identifiers will be in this namespace.
A package statement affects only dynamic variables--including those
you've used C<local()> on--but I<not> lexical variables, which are created
with C<my()>.  Typically it would be the first declaration in a file to
be included by the C<require> or C<use> operator.  You can switch into a
package in more than one place; it merely influences which symbol table
is used by the compiler for the rest of that block.  You can refer to
variables and filehandles in other packages by prefixing the identifier
with the package name and a double colon:  C<$Package::Variable>.
If the package name is null, the C<main> package as assumed.  That is,
C<$::sail> is equivalent to C<$main::sail> (as well as to C<$main'sail>,
still seen in older code).

If NAMESPACE is omitted, then there is no current package, and all
identifiers must be fully qualified or lexicals.  This is stricter
than C<use strict>, since it also extends to function names.
d1949 1
a1949 1
stdio buffering, so you may need to set C<$|> to flush your WRITEHANDLE
d1952 1
a1952 1
See L<IPC::Open2>, L<IPC::Open3>, and L<perlipc/"Bidirectional Communication">
a1954 4
On systems that support a close-on-exec flag on files, the flag will be set
for the newly opened file descriptors as determined by the value of $^F.
See L<perlvar/$^F>.

a1956 2
=item pop

d1958 1
a1958 1
one element.  Has a similar effect to
d1963 3
a1965 2
If ARRAY is omitted, pops the C<@@ARGV> array in the main program, and
the C<@@_> array in subroutines, just like C<shift()>.
a1968 2
=item pos

d1970 1
a1970 4
is in question (C<$_> is used when the variable is not specified).  May be
modified to change that offset.  Such modification will also influence
the C<\G> zero-width assertion in regular expressions.  See L<perlre> and
L<perlop>.
d1980 14
a1993 14
the variable contains the name of or a reference to the filehandle, thus
introducing one level of indirection.  (NOTE: If FILEHANDLE is a variable
and the next token is a term, it may be misinterpreted as an operator
unless you interpose a C<+> or put parentheses around the arguments.)
If FILEHANDLE is omitted, prints by default to standard output (or to the
last selected output channel--see L</select>).  If LIST is also omitted,
prints C<$_> to the currently selected output channel.  To set the default
output channel to something other than STDOUT use the select operation.
Note that, because print takes a LIST, anything in the LIST is evaluated
in list context, and any subroutine that you call will have one or
more of its expressions evaluated in list context.  Also be careful
not to follow the print keyword with a left parenthesis unless you want
the corresponding right parenthesis to terminate the arguments to the
print--interpose a C<+> or put parentheses around all the arguments.
d1996 1
a1996 1
you will have to use a block returning its value instead:
d2001 1
a2001 1
=item printf FILEHANDLE FORMAT, LIST
d2003 1
a2003 1
=item printf FORMAT, LIST
d2005 2
a2006 22
Equivalent to C<print FILEHANDLE sprintf(FORMAT, LIST)>, except that C<$\>
(the output record separator) is not appended.  The first argument
of the list will be interpreted as the C<printf()> format.  If C<use locale> is
in effect, the character used for the decimal point in formatted real numbers
is affected by the LC_NUMERIC locale.  See L<perllocale>.

Don't fall into the trap of using a C<printf()> when a simple
C<print()> would do.  The C<print()> is more efficient and less
error prone.

=item prototype FUNCTION

Returns the prototype of a function as a string (or C<undef> if the
function has no prototype).  FUNCTION is a reference to, or the name of,
the function whose prototype you want to retrieve.

If FUNCTION is a string starting with C<CORE::>, the rest is taken as a
name for Perl builtin.  If the builtin is not I<overridable> (such as
C<qw//>) or its arguments cannot be expressed by a prototype (such as
C<system()>) returns C<undef> because the builtin does not really behave
like a Perl function.  Otherwise, the string describing the equivalent
prototype is returned.
a2023 2
=item qr/STRING/

d2028 1
a2028 1
Generalized quotes.  See L<perlop/"Regexp Quote-Like Operators">.
d2032 3
a2034 10
=item quotemeta

Returns the value of EXPR with all non-alphanumeric
characters backslashed.  (That is, all characters not matching
C</[A-Za-z_0-9]/> will be preceded by a backslash in the
returned string, regardless of any locale settings.)
This is the internal function implementing
the C<\Q> escape in double-quoted strings.

If EXPR is omitted, uses C<$_>.
d2040 4
a2043 4
Returns a random fractional number greater than or equal to C<0> and less
than the value of EXPR.  (EXPR should be positive.)  If EXPR is
omitted, the value C<1> is used.  Automatically calls C<srand()> unless
C<srand()> has already been called.  See also C<srand()>.
d2045 1
a2045 1
(Note: If your rand function consistently returns numbers that are too
d2047 4
a2050 1
with the wrong number of RANDBITS.)
d2057 6
a2062 6
specified FILEHANDLE.  Returns the number of bytes actually read,
C<0> at end of file, or undef if there was an error.  SCALAR will be grown
or shrunk to the length actually read.  An OFFSET may be specified to
place the read data at some other place than the beginning of the
string.  This call is actually implemented in terms of stdio's fread(3)
call.  To get a true read(2) system call, see C<sysread()>.
d2066 2
a2067 2
Returns the next directory entry for a directory opened by C<opendir()>.
If used in list context, returns all the rest of the entries in the
d2069 1
a2069 1
scalar context or a null list in list context.
d2071 3
a2073 3
If you're planning to filetest the return values out of a C<readdir()>, you'd
better prepend the directory in question.  Otherwise, because we didn't
C<chdir()> there, it would have been testing the wrong file.
a2078 20
=item readline EXPR

Reads from the filehandle whose typeglob is contained in EXPR.  In scalar
context, each call reads and returns the next line, until end-of-file is
reached, whereupon the subsequent call returns undef.  In list context,
reads until end-of-file is reached and returns a list of lines.  Note that
the notion of "line" used here is however you may have defined it
with C<$/> or C<$INPUT_RECORD_SEPARATOR>).  See L<perlvar/"$/">.

When C<$/> is set to C<undef>, when readline() is in scalar
context (i.e. file slurp mode), and when an empty file is read, it
returns C<''> the first time, followed by C<undef> subsequently.

This is the internal function implementing the C<E<lt>EXPRE<gt>>
operator, but you can use it directly.  The C<E<lt>EXPRE<gt>>
operator is discussed in more detail in L<perlop/"I/O Operators">.

    $line = <STDIN>;
    $line = readline(*STDIN);		# same thing

a2080 2
=item readlink

d2083 2
a2084 4
error, returns the undefined value and sets C<$!> (errno).  If EXPR is
omitted, uses C<$_>.

=item readpipe EXPR
d2086 1
a2086 10
EXPR is executed as a system command.
The collected standard output of the command is returned.
In scalar context, it comes back as a single (potentially
multi-line) string.  In list context, returns a list of lines
(however you've defined lines with C<$/> or C<$INPUT_RECORD_SEPARATOR>).
This is the internal function implementing the C<qx/EXPR/>
operator, but you can use it directly.  The C<qx/EXPR/>
operator is discussed in more detail in L<perlop/"I/O Operators">.

=item recv SOCKET,SCALAR,LENGTH,FLAGS
d2090 1
a2090 1
Actually does a C C<recvfrom()>, so that it can return the address of the
d2093 1
a2093 1
as the system call of the same name.
d2115 1
a2115 1
		    s|^|$front\{|;
a2122 7
C<redo> cannot be used to retry a block which returns a value such as
C<eval {}>, C<sub {}> or C<do {}>, and should not be used to exit
a grep() or map() operation.

See also L</continue> for an illustration of how C<last>, C<next>, and
C<redo> work.

d2125 2
a2126 5
=item ref

Returns a TRUE value if EXPR is a reference, FALSE otherwise.  If EXPR
is not specified, C<$_> will be used.  The value returned depends on the
type of thing the reference is a reference to.
d2136 2
a2137 2
If the referenced object has been blessed into a package, then that package
name is returned instead.  You can think of C<ref()> as a C<typeof()> operator.
d2140 3
a2142 3
	print "r is a reference to a hash.\n";
    }
    unless (ref($r)) {
a2143 3
    }
    if (UNIVERSAL::isa($r, "HASH")) {  # for subclassing
	print "r is a reference to something that isa hash.\n";
d2150 2
a2151 7
Changes the name of a file.  Returns C<1> for success, C<0> otherwise.
Behavior of this function varies wildly depending on your system
implementation.  For example, it will usually not work across file system
boundaries, even though the system I<mv> command sometimes compensates
for this.  Other restrictions include whether it works on directories,
open files, or pre-existing files.  Check L<perlport> and either the
rename(2) manpage or equivalent system documentation for details.
d2157 1
a2157 1
Demands some semantics specified by EXPR, or by C<$_> if EXPR is not
d2159 1
a2159 1
(C<$]> or $PERL_VERSION) be equal or greater than EXPR.
d2163 1
a2163 1
essentially just a variety of C<eval()>.  Has semantics similar to the following
d2167 1
a2167 1
	my($filename) = @@_;
d2169 1
a2169 1
	my($realfilename,$result);
d2183 1
a2183 1
	return $result;
d2189 1
a2189 1
end such a file with "C<1;>" unless you're sure it'll return TRUE
d2193 2
a2194 3
If EXPR is a bareword, the require assumes a "F<.pm>" extension and
replaces "F<::>" with "F</>" in the filename for you,
to make it easy to load standard modules.  This form of loading of
d2197 2
a2198 20
In other words, if you try this:

        require Foo::Bar;    # a splendid bareword 

The require function will actually look for the "F<Foo/Bar.pm>" file in the 
directories specified in the C<@@INC> array.

But if you try this:

        $class = 'Foo::Bar';
        require $class;	     # $class is not a bareword
    #or
        require "Foo::Bar";  # not a bareword because of the ""

The require function will look for the "F<Foo::Bar>" file in the @@INC array and 
will complain about not finding "F<Foo::Bar>" there. In this case you can do:

        eval "require $class";

For a yet-more-powerful import facility, see L</use> and L<perlmod>.
d2205 1
a2205 1
variables and reset C<??> searches so that they work again.  The
d2209 2
a2210 2
omitted, one-match searches (C<?pattern?>) are reset to match again.  Resets
only variables or searches in the current package.  Always returns
d2215 1
a2215 1
    reset;		# just reset ?one-time? searches
d2217 10
a2226 20
Resetting C<"A-Z"> is not recommended because you'll wipe out your
C<@@ARGV> and C<@@INC> arrays and your C<%ENV> hash.  Resets only package
variables--lexical variables are unaffected, but they clean themselves
up on scope exit anyway, so you'll probably want to use them instead.
See L</my>.

=item return EXPR

=item return

Returns from a subroutine, C<eval()>, or C<do FILE> with the value 
given in EXPR.  Evaluation of EXPR may be in list, scalar, or void
context, depending on how the return value will be used, and the context
may vary from one execution to the next (see C<wantarray()>).  If no EXPR
is given, returns an empty list in list context, the undefined value in
scalar context, and (of course) nothing at all in a void context.

(Note that in the absence of a explicit C<return>, a subroutine, eval,
or do FILE will automatically return the value of the last expression
evaluated.)
d2230 4
a2233 15
In list context, returns a list value consisting of the elements
of LIST in the opposite order.  In scalar context, concatenates the
elements of LIST and returns a string value with all characters
in the opposite order.

    print reverse <>;		# line tac, last line first

    undef $/;			# for efficiency of <>
    print scalar reverse <>;	# character tac, last line tsrif

This operator is also handy for inverting a hash, although there are some
caveats.  If a value is duplicated in the original hash, only one of those
can be represented as a key in the inverted hash.  Also, this has to
unwind one hash and build a whole new one, which may take some time
on a large hash, such as from a DBM file.
d2235 4
a2238 1
    %by_name = reverse %by_address;	# Invert the hash
d2243 1
a2243 1
C<readdir()> routine on DIRHANDLE.
d2249 1
a2249 1
Works just like index() except that it returns the position of the LAST
d2255 3
a2257 5
=item rmdir

Deletes the directory specified by FILENAME if that directory is empty.  If it
succeeds it returns TRUE, otherwise it returns FALSE and sets C<$!> (errno).  If
FILENAME is omitted, uses C<$_>.
d2265 2
a2266 2
Forces EXPR to be interpreted in scalar context and returns the value
of EXPR.
d2270 2
a2271 2
There is no equivalent operator to force an expression to
be interpolated in list context because in practice, this is never
a2275 16
Since C<scalar> is a unary operator, if you accidentally use for EXPR a
parenthesized list, this behaves as a scalar comma expression, evaluating
all but the last element in void context and returning the final element
evaluated in scalar context.  This is seldom what you want.

The following single statement:

	print uc(scalar(&foo,$bar)),$baz;

is the moral equivalent of these two:

	&foo;
	print(uc($bar),$baz);

See L<perlop> for more details on unary operators and the comma operator.

d2278 11
a2288 16
Sets FILEHANDLE's position, just like the C<fseek()> call of C<stdio()>.
FILEHANDLE may be an expression whose value gives the name of the
filehandle.  The values for WHENCE are C<0> to set the new position to
POSITION, C<1> to set it to the current position plus POSITION, and C<2> to
set it to EOF plus POSITION (typically negative).  For WHENCE you may
use the constants C<SEEK_SET>, C<SEEK_CUR>, and C<SEEK_END> from either the
C<IO::Seekable> or the POSIX module.  Returns C<1> upon success, C<0> otherwise.

If you want to position file for C<sysread()> or C<syswrite()>, don't use
C<seek()> -- buffering makes its effect on the file's system position
unpredictable and non-portable.  Use C<sysseek()> instead.

Due to the rules and rigors of ANSI C, on some systems you have to do a
seek whenever you switch between reading and writing.  Amongst other
things, this may have the effect of calling stdio's clearerr(3).
A WHENCE of C<1> (C<SEEK_CUR>) is useful for not moving the file position:
d2294 4
a2297 3
seek() to reset things.  The C<seek()> doesn't change the current position,
but it I<does> clear the end-of-file condition on the handle, so that the
next C<E<lt>FILEE<gt>> makes Perl try again to read something.  We hope.
d2303 1
a2303 2
	for ($curpos = tell(FILE); $_ = <FILE>;
             $curpos = tell(FILE)) {
d2312 2
a2313 2
Sets the current position for the C<readdir()> routine on DIRHANDLE.  POS
must be a value returned by C<telldir()>.  Has the same caveats about
d2323 1
a2323 1
effects: first, a C<write()> or a C<print()> without a filehandle will
d2342 1
a2342 1
    use IO::Handle;
d2347 2
a2348 2
This calls the select(2) system call with the bit masks specified, which
can be constructed using C<fileno()> and C<vec()>, along these lines:
d2359 2
a2360 2
	my(@@fhlist) = split(' ',$_[0]);
	my($bits);
d2373 1
a2373 1
or to block until something becomes ready just do this
d2377 2
a2378 2
Most systems do not bother to return anything useful in C<$timeleft>, so
calling select() in scalar context just returns C<$nfound>.
d2380 1
a2380 1
Any of the bit masks can also be undef.  The timeout, if specified, is
d2382 2
a2383 2
capable of returning theC<$timeleft>.  If not, they always return
C<$timeleft> equal to the supplied C<$timeout>.
d2385 1
a2385 1
You can effect a sleep of 250 milliseconds this way:
d2389 2
a2390 3
B<WARNING>: One should not attempt to mix buffered I/O (like C<read()>
or E<lt>FHE<gt>) with C<select()>, except as permitted by POSIX, and even
then only on POSIX systems.  You have to use C<sysread()> instead.
d2394 5
a2398 9
Calls the System V IPC function C<semctl()>.  You'll probably have to say

    use IPC::SysV;

first to get the correct constant definitions.  If CMD is IPC_STAT or
GETALL, then ARG must be a variable which will hold the returned
semid_ds structure or semaphore value array.  Returns like C<ioctl()>: the
undefined value for error, "C<0> but true" for zero, or the actual return
value otherwise.  See also C<IPC::SysV> and C<IPC::Semaphore> documentation.
d2403 1
a2403 2
the undefined value if there is an error.  See also C<IPC::SysV> and
C<IPC::SysV::Semaphore> documentation.
d2413 1
a2413 1
following code waits on semaphore C<$semnum> of semaphore id C<$semid>:
d2418 1
a2418 2
To signal the semaphore, replace C<-1> with C<1>.  See also C<IPC::SysV>
and C<IPC::SysV::Semaphore> documentation.
d2426 1
a2426 1
destination to send TO, in which case it does a C C<sendto()>.  Returns
d2428 1
a2428 1
error.  The C system call sendmsg(2) is currently unimplemented.
d2433 1
a2433 1
Sets the current process group for the specified PID, C<0> for the current
d2435 1
a2435 3
implement setpgrp(2).  If the arguments are omitted, it defaults to
C<0,0>.  Note that the POSIX version of C<setpgrp()> does not accept any
arguments, so only C<setpgrp(0,0)> is portable.  See also C<POSIX::setsid()>.
d2446 1
a2446 1
error.  OPTVAL may be specified as C<undef> if you don't want to pass an
d2456 4
a2459 6
C<@@_> array within the lexical scope of subroutines and formats, and the
C<@@ARGV> array at file scopes or within the lexical scopes established by
the C<eval ''>, C<BEGIN {}>, C<END {}>, and C<INIT {}> constructs.
See also C<unshift()>, C<push()>, and C<pop()>.  C<Shift()> and C<unshift()> do the
same thing to the left end of an array that C<pop()> and C<push()> do to the
right end.
d2463 4
a2466 9
Calls the System V IPC function shmctl.  You'll probably have to say

    use IPC::SysV;

first to get the correct constant definitions.  If CMD is C<IPC_STAT>,
then ARG must be a variable which will hold the returned C<shmid_ds>
structure.  Returns like ioctl: the undefined value for error, "C<0> but
true" for zero, or the actual return value otherwise.
See also C<IPC::SysV> documentation.
a2471 1
See also C<IPC::SysV> documentation.
d2479 1
a2479 1
detaching from it.  When reading, VAR must be a variable that will
a2482 2
See also C<IPC::SysV> documentation and the C<IPC::Shareable> module
from CPAN.
a2488 10
    shutdown(SOCKET, 0);    # I/we have stopped reading data
    shutdown(SOCKET, 1);    # I/we have stopped writing data
    shutdown(SOCKET, 2);    # I/we have stopped using this socket

This is useful with sockets when you want to tell the other
side you're done writing but not done reading, or vice versa.
It's also a more insistent form of close because it also 
disables the filedescriptor in any forked copies in other
processes.

a2490 2
=item sin

d2492 1
a2492 6
returns sine of C<$_>.

For the inverse sine operation, you may use the C<POSIX::asin()>
function, or use this relation:

    sub asin { atan2($_[0], sqrt(1 - $_[0] * $_[0])) }
d2499 3
a2501 4
May be interrupted if the process receives a signal such as C<SIGALRM>.
Returns the number of seconds actually slept.  You probably cannot
mix C<alarm()> and C<sleep()> calls, because C<sleep()> is often implemented
using C<alarm()>.
d2505 1
a2505 3
always sleep the full amount.  They may appear to sleep longer than that,
however, because your process might not be scheduled right away in a
busy multitasking system.
d2508 2
a2509 4
C<syscall()> interface to access setitimer(2) if your system supports it,
or else see L</select> above.

See also the POSIX module's C<sigpause()> function.
d2514 3
a2516 3
SOCKET.  DOMAIN, TYPE, and PROTOCOL are specified the same as for the
system call of the same name.  You should "C<use Socket;>" first to get
the proper definitions imported.  See the examples in L<perlipc/"Sockets: Client/Server Communication">.
d2521 1
a2521 1
specified type.  DOMAIN, TYPE, and PROTOCOL are specified the same as
a2524 10
Some systems defined C<pipe()> in terms of C<socketpair()>, in which a call
to C<pipe(Rdr, Wtr)> is essentially:

    use Socket;
    socketpair(Rdr, Wtr, AF_UNIX, SOCK_STREAM, PF_UNSPEC);
    shutdown(Rdr, 1);        # no more writing for reader
    shutdown(Wtr, 0);        # no more reading for writer

See L<perlipc> for an example of socketpair use.

d2531 9
a2539 9
Sorts the LIST and returns the sorted list value.  If SUBNAME or BLOCK
is omitted, C<sort()>s in standard string comparison order.  If SUBNAME is
specified, it gives the name of a subroutine that returns an integer
less than, equal to, or greater than C<0>, depending on how the elements
of the array are to be ordered.  (The C<E<lt>=E<gt>> and C<cmp>
operators are extremely useful in such routines.)  SUBNAME may be a
scalar variable name (unsubscripted), in which case the value provides
the name of (or a reference to) the actual subroutine to use.  In place
of a SUBNAME, you can provide a BLOCK as an anonymous, in-line sort
d2545 3
a2547 9
the subroutine not via C<@@_> but as the package global variables C<$a> and
C<$b> (see example below).  They are passed by reference, so don't
modify C<$a> and C<$b>.  And don't try to declare them as lexicals either.

You also cannot exit out of the sort block or subroutine using any of the
loop control operators described in L<perlsyn> or with C<goto()>.

When C<use locale> is in effect, C<sort LIST> sorts LIST according to the
current collation locale.  See L<perllocale>.
d2558 1
a2558 1
    @@articles = sort {uc($a) cmp uc($b)} @@files;
d2571 1
a2571 1
	$age{$a} <=> $age{$b};	# presuming numeric
d2575 2
a2576 2
    # this sorts the %age hash by value instead of key
    # using an in-line function
d2589 2
a2590 2
    # inefficiently sort by descending numeric compare using
    # the first integer after the first = sign, or the
d2603 1
a2603 1
    for (@@old) {
d2606 1
a2606 1
    }
d2622 2
a2623 2
If you're using strict, you I<MUST NOT> declare C<$a>
and C<$b> as lexicals.  They are package globals.  That means
a2635 5
The comparison function is required to behave.  If it returns
inconsistent results (sometimes saying C<$x[1]> is less than C<$x[2]> and
sometimes saying the opposite, for example) the results are not
well-defined.

d2643 4
a2646 8
replaces them with the elements of LIST, if any.  In list context,
returns the elements removed from the array.  In scalar context,
returns the last element removed, or C<undef> if no elements are
removed.  The array grows or shrinks as necessary.
If OFFSET is negative then it start that far from the end of the array.
If LENGTH is omitted, removes everything from OFFSET onward.
If LENGTH is negative, leave that many elements off the end of the array.
The following equivalences hold (assuming C<$[ == 0>):
d2648 1
a2648 1
    push(@@a,$x,$y)	splice(@@a,@@a,0,$x,$y)
d2652 1
a2652 1
    $a[$x] = $y		splice(@@a,$x,1,$y)
d2657 2
a2658 2
	my(@@a) = splice(@@_,0,shift);
	my(@@b) = splice(@@_,0,shift);
d2675 1
a2675 2
Splits a string into an array of strings, and returns it.  By default,
empty leading fields are preserved, and empty trailing ones are deleted.
d2677 4
a2680 5
If not in list context, returns the number of fields found and splits into
the C<@@_> array.  (In list context, you can force the split into C<@@_> by
using C<??> as the pattern delimiters, but it still returns the list
value.)  The use of implicit split to C<@@_> is deprecated, however, because
it clobbers your subroutine arguments.
d2682 1
a2682 1
If EXPR is omitted, splits the C<$_> string.  If PATTERN is also omitted,
d2685 6
a2690 7
that the delimiter may be longer than one character.)

If LIMIT is specified and positive, splits into no more than that
many fields (though it may split into fewer).  If LIMIT is unspecified
or zero, trailing null fields are stripped (which potential users
of C<pop()> would do well to remember).  If LIMIT is negative, it is
treated as if an arbitrarily large LIMIT had been specified.
d2701 1
a2701 1
The LIMIT parameter can be used to split a line partially
d2714 1
a2714 1
    split(/([,-])/, "1-10,20", 3);
d2720 1
a2720 1
If you had the entire header of a normal Unix email message in C<$header>,
d2724 1
a2724 1
    %hdrs   =  (UNIX_FROM => split /^(\S*?):\s*/m, $header);
d2731 1
a2731 1
white space just as C<split()> with no arguments does.  Thus, C<split(' ')> can
d2734 2
a2735 2
A C<split()> on C</\s+/> is like a C<split(' ')> except that any leading
whitespace produces a null first field.  A C<split()> with no arguments
d2740 5
a2744 5
    open(PASSWD, '/etc/passwd');
    while (<PASSWD>) {
	($login, $passwd, $uid, $gid,
         $gcos, $home, $shell) = split(/:/);
	#...
d2747 1
a2747 1
(Note that C<$shell> above will still have a newline on it.  See L</chop>,
d2750 1
a2750 1
=item sprintf FORMAT, LIST
d2752 6
a2757 69
Returns a string formatted by the usual C<printf()> conventions of the
C library function C<sprintf()>.  See L<sprintf(3)> or L<printf(3)>
on your system for an explanation of the general principles.

Perl does its own C<sprintf()> formatting -- it emulates the C
function C<sprintf()>, but it doesn't use it (except for floating-point
numbers, and even then only the standard modifiers are allowed).  As a
result, any non-standard extensions in your local C<sprintf()> are not
available from Perl.

Perl's C<sprintf()> permits the following universally-known conversions:

   %%	a percent sign
   %c	a character with the given number
   %s	a string
   %d	a signed integer, in decimal
   %u	an unsigned integer, in decimal
   %o	an unsigned integer, in octal
   %x	an unsigned integer, in hexadecimal
   %e	a floating-point number, in scientific notation
   %f	a floating-point number, in fixed decimal notation
   %g	a floating-point number, in %e or %f notation

In addition, Perl permits the following widely-supported conversions:

   %X	like %x, but using upper-case letters
   %E	like %e, but using an upper-case "E"
   %G	like %g, but with an upper-case "E" (if applicable)
   %p	a pointer (outputs the Perl value's address in hexadecimal)
   %n	special: *stores* the number of characters output so far
        into the next variable in the parameter list 

Finally, for backward (and we do mean "backward") compatibility, Perl
permits these unnecessary but widely-supported conversions:

   %i	a synonym for %d
   %D	a synonym for %ld
   %U	a synonym for %lu
   %O	a synonym for %lo
   %F	a synonym for %f

Perl permits the following universally-known flags between the C<%>
and the conversion letter:

   space   prefix positive number with a space
   +       prefix positive number with a plus sign
   -       left-justify within the field
   0       use zeros, not spaces, to right-justify
   #       prefix non-zero octal with "0", non-zero hex with "0x"
   number  minimum field width
   .number "precision": digits after decimal point for
           floating-point, max length for string, minimum length
           for integer
   l       interpret integer as C type "long" or "unsigned long"
   h       interpret integer as C type "short" or "unsigned short"

There is also one Perl-specific flag:

   V       interpret integer as Perl's standard integer type

Where a number would appear in the flags, an asterisk ("C<*>") may be
used instead, in which case Perl uses the next item in the parameter
list as the given number (that is, as the field width or precision).
If a field width obtained through "C<*>" is negative, it has the same
effect as the "C<->" flag: left-justification.

If C<use locale> is in effect, the character used for the decimal
point in formatted real numbers is affected by the LC_NUMERIC locale.
See L<perllocale>.
a2760 2
=item sqrt

d2762 1
a2762 5
root of C<$_>.  Only works on non-negative operands, unless you've
loaded the standard Math::Complex module.

    use Math::Complex;
    print sqrt(-2);    # prints 1.4142135623731i
d2766 7
a2772 41
=item srand

Sets the random number seed for the C<rand()> operator.  If EXPR is
omitted, uses a semi-random value supplied by the kernel (if it supports
the F</dev/urandom> device) or based on the current time and process
ID, among other things.  In versions of Perl prior to 5.004 the default
seed was just the current C<time()>.  This isn't a particularly good seed,
so many old programs supply their own seed value (often C<time ^ $$> or
C<time ^ ($$ + ($$ E<lt>E<lt> 15))>), but that isn't necessary any more.

In fact, it's usually not necessary to call C<srand()> at all, because if
it is not called explicitly, it is called implicitly at the first use of
the C<rand()> operator.  However, this was not the case in version of Perl
before 5.004, so if your script will run under older Perl versions, it
should call C<srand()>.

Note that you need something much more random than the default seed for
cryptographic purposes.  Checksumming the compressed output of one or more
rapidly changing operating system status programs is the usual method.  For
example:

    srand (time ^ $$ ^ unpack "%L*", `ps axww | gzip`);

If you're particularly concerned with this, see the C<Math::TrulyRandom>
module in CPAN.

Do I<not> call C<srand()> multiple times in your program unless you know
exactly what you're doing and why you're doing it.  The point of the
function is to "seed" the C<rand()> function so that C<rand()> can produce
a different sequence each time you run your program.  Just do it once at the
top of your program, or you I<won't> get random numbers out of C<rand()>!

Frequently called programs (like CGI scripts) that simply use

    time ^ $$

for a seed can fall prey to the mathematical property that

    a^b == (a+1)^(b+1)

one-third of the time.  So don't do that.
d2778 3
a2780 6
=item stat

Returns a 13-element list giving the status info for a file, either
the file opened via FILEHANDLE, or named by EXPR.  If EXPR is omitted,
it stats C<$_>.  Returns a null list if the stat fails.  Typically used
as follows:
d2786 1
a2786 1
Not all fields are supported on all filesystem types.  Here are the
d2789 13
a2801 13
  0 dev      device number of filesystem
  1 ino      inode number
  2 mode     file mode  (type and permissions)
  3 nlink    number of (hard) links to the file
  4 uid      numeric user ID of file's owner
  5 gid      numeric group ID of file's owner
  6 rdev     the device identifier (special files only)
  7 size     total size of file, in bytes
  8 atime    last access time since the epoch
  9 mtime    last modify time since the epoch
 10 ctime    inode change time (NOT creation time!) since the epoch
 11 blksize  preferred block size for file system I/O
 12 blocks   actual number of blocks allocated
d2813 1
a2813 21
(This works on machines only for which the device number is negative under NFS.)

Because the mode contains both the file type and its permissions, you
should mask off the file type portion and (s)printf using a C<"%o"> 
if you want to see the real permissions.

    $mode = (stat($filename))[2];
    printf "Permissions are %04o\n", $mode & 07777;


In scalar context, C<stat()> returns a boolean value indicating success
or failure, and, if successful, sets the information associated with
the special filehandle C<_>.

The File::stat module provides a convenient, by-name access mechanism:

    use File::stat;
    $sb = stat($filename);
    printf "File is %s, size is %s, perm %04o, mtime %s\n", 
	$filename, $sb->size, $sb->mode & 07777,
	scalar localtime $sb->mtime;
d2819 1
a2819 1
Takes extra time to study SCALAR (C<$_> if unspecified) in anticipation of
d2823 2
a2824 2
frequencies in the string to be searched -- you probably want to compare
run times with and without it to see which runs faster.  Those loops
d2827 2
a2828 2
one C<study()> active at a time -- if you study a different scalar the first
is "unstudied".  (The way C<study()> works is this: a linked list of every
d2830 1
a2830 1
example, where all the C<'k'> characters are.  From each search string,
d2835 1
a2835 1
For example, here is a loop that inserts index producing entries
d2840 4
a2843 4
	print ".IX foo\n" 	if /\bfoo\b/;
	print ".IX bar\n" 	if /\bbar\b/;
	print ".IX blurfl\n" 	if /\bblurfl\b/;
	# ...
d2847 2
a2848 2
In searching for C</\bfoo\b/>, only those locations in C<$_> that contain C<"f">
will be looked at, because C<"f"> is rarer than C<"o">.  In general, this is
d2854 1
a2854 1
runtime, you can build an entire loop as a string and C<eval()> that to
d2856 1
a2856 1
undefining C<$/> to input entire files as one record, this can be very
d2858 1
a2858 1
scans a list of files (C<@@files>) for a list of words (C<@@words>), and prints
d2869 1
a2869 1
    $/ = "\n";		# put back to normal input delimiter
d2883 1
a2883 1
value: the CODE ref of the closure you just created.  See L<perlsub> and
a2885 2
=item substr EXPR,OFFSET,LEN,REPLACEMENT

d2891 1
a2891 2
offset C<0>, or whatever you've set C<$[> to (but don't do that).
If OFFSET is negative (or more precisely, less than C<$[>), starts
d2896 6
a2901 14
If you specify a substring that is partly outside the string, the part
within the string is returned.    If the substring is totally outside
the string a warning is produced.

You can use the substr() function as an lvalue, in which case EXPR
must itself be an lvalue.  If you assign something shorter than LEN,
the string will shrink, and if you assign something longer than LEN,
the string will grow to accommodate it.  To keep the string the same
length you may need to pad or chop your value using C<sprintf()>.

An alternative to using substr() as an lvalue is to specify the
replacement string as the 4th argument.  This allows you to replace
parts of the EXPR and return what was there before in one operation,
just as you can with splice().
d2906 1
a2906 1
Returns C<1> for success, C<0> otherwise.  On systems that don't support
d2910 1
a2910 1
    $symlink_exists = eval { symlink("",""); 1 };
d2920 1
a2920 4
receive any result that might be written into a string.  You can't use a
string literal (or other read-only string) as an argument to C<syscall()>
because Perl has to assume that any string pointer might be written
through.  If your
d2922 2
a2923 2
numeric context, you may need to add C<0> to them to force them to look
like numbers.  This emulates the C<syswrite()> function (or vice versa):
d2926 1
a2926 2
    $s = "hi there\n";
    syscall(&SYS_write, fileno(STDOUT), $s, length $s);
d2928 1
a2928 1
Note that Perl supports passing of up to only 14 arguments to your system call,
a2930 11
Syscall returns whatever value returned by the system call it calls.
If the system call fails, C<syscall()> returns C<-1> and sets C<$!> (errno).
Note that some system calls can legitimately return C<-1>.  The proper
way to handle such calls is to assign C<$!=0;> before the call and
check the value of C<$!> if syscall returns C<-1>.

There's a problem with C<syscall(&SYS_pipe)>: it returns the file
number of the read end of the pipe it creates.  There is no way
to retrieve the file number of the other end.  You can avoid this 
problem by using C<pipe()> instead.

d2938 1
a2938 1
underlying operating system's C<open()> function with the parameters
d2943 2
a2944 17
For historical reasons, some values work on almost every system
supported by perl: zero means read-only, one means write-only, and two
means read/write.  We know that these values do I<not> work under
OS/390 & VM/ESA Unix and on the Macintosh; you probably don't want to
use them in new code.

If the file named by FILENAME does not exist and the C<open()> call creates
it (typically because MODE includes the C<O_CREAT> flag), then the value of
PERMS specifies the permissions of the newly created file.  If you omit
the PERMS argument to C<sysopen()>, Perl uses the octal value C<0666>.
These permission values need to be in octal, and are modified by your
process's current C<umask>.

You should seldom if ever use C<0644> as argument to C<sysopen()>, because
that takes away the user's option to have a more permissive umask.
Better to omit it.  See the perlfunc(1) entry on C<umask> for more
on this.
d2946 5
a2950 1
See L<perlopentut> for a kinder, gentler explanation of opening files.
d2957 6
a2962 35
specified FILEHANDLE, using the system call read(2).  It bypasses stdio,
so mixing this with other kinds of reads, C<print()>, C<write()>,
C<seek()>, C<tell()>, or C<eof()> can cause confusion because stdio
usually buffers data.  Returns the number of bytes actually read, C<0>
at end of file, or undef if there was an error.  SCALAR will be grown or
shrunk so that the last byte actually read is the last byte of the
scalar after the read.

An OFFSET may be specified to place the read data at some place in the
string other than the beginning.  A negative OFFSET specifies
placement at that many bytes counting backwards from the end of the
string.  A positive OFFSET greater than the length of SCALAR results
in the string being padded to the required size with C<"\0"> bytes before
the result of the read is appended.

There is no syseof() function, which is ok, since eof() doesn't work
very well on device files (like ttys) anyway.  Use sysread() and check
for a return value for 0 to decide whether you're done.

=item sysseek FILEHANDLE,POSITION,WHENCE

Sets FILEHANDLE's system position using the system call lseek(2).  It
bypasses stdio, so mixing this with reads (other than C<sysread()>),
C<print()>, C<write()>, C<seek()>, C<tell()>, or C<eof()> may cause
confusion.  FILEHANDLE may be an expression whose value gives the name
of the filehandle.  The values for WHENCE are C<0> to set the new
position to POSITION, C<1> to set the it to the current position plus
POSITION, and C<2> to set it to EOF plus POSITION (typically negative).
For WHENCE, you may use the constants C<SEEK_SET>, C<SEEK_CUR>, and
C<SEEK_END> from either the C<IO::Seekable> or the POSIX module.

Returns the new position, or the undefined value on failure.  A position
of zero is returned as the string "C<0> but true"; thus C<sysseek()> returns
TRUE on success and FALSE on failure, yet you can still easily determine
the new position.
d2966 1
a2966 3
=item system PROGRAM LIST

Does exactly the same thing as "C<exec LIST>", except that a fork is done
d2969 5
a2973 36
arguments.  If there is more than one argument in LIST, or if LIST is
an array with more than one value, starts the program given by the
first element of the list with arguments given by the rest of the list.
If there is only one scalar argument, the argument is
checked for shell metacharacters, and if there are any, the entire
argument is passed to the system's command shell for parsing (this is
C</bin/sh -c> on Unix platforms, but varies on other platforms).  If
there are no shell metacharacters in the argument, it is split into
words and passed directly to C<execvp()>, which is more efficient.

The return value is the exit status of the program as
returned by the C<wait()> call.  To get the actual exit value divide by
256.  See also L</exec>.  This is I<NOT> what you want to use to capture
the output from a command, for that you should use merely backticks or
C<qx//>, as described in L<perlop/"`STRING`">.

Like C<exec()>, C<system()> allows you to lie to a program about its name if
you use the "C<system PROGRAM LIST>" syntax.  Again, see L</exec>.

Because C<system()> and backticks block C<SIGINT> and C<SIGQUIT>, killing the
program they're running doesn't actually interrupt your program.

    @@args = ("command", "arg1", "arg2");
    system(@@args) == 0
	 or die "system @@args failed: $?"

You can check all the failure possibilities by inspecting
C<$?> like this:

    $exit_value  = $? >> 8;
    $signal_num  = $? & 127;
    $dumped_core = $? & 128;

When the arguments get executed via the system shell, results
and return codes will be subject to its quirks and capabilities.
See L<perlop/"`STRING`"> and L</exec> for details.
a2978 2
=item syswrite FILEHANDLE,SCALAR

d2980 5
a2984 13
specified FILEHANDLE, using the system call write(2).  If LENGTH is
not specified, writes whole SCALAR. It bypasses
stdio, so mixing this with reads (other than C<sysread())>, C<print()>,
C<write()>, C<seek()>, C<tell()>, or C<eof()> may cause confusion
because stdio usually buffers data.  Returns the number of bytes
actually written, or C<undef> if there was an error.  If the LENGTH is
greater than the available data in the SCALAR after the OFFSET, only as
much data as is available will be written.

An OFFSET may be specified to write the data from some part of the
string other than the beginning.  A negative OFFSET specifies writing
that many bytes counting backwards from the end of the string.  In the
case the SCALAR is empty you can use OFFSET but only zero offset.
d2990 1
a2990 1
Returns the current position for FILEHANDLE.  FILEHANDLE may be an
d2992 1
a2992 3
FILEHANDLE is omitted, assumes the file last read.  

There is no C<systell()> function.  Use C<sysseek(FH, 0, 1)> for that.
d2996 2
a2997 2
Returns the current position of the C<readdir()> routines on DIRHANDLE.
Value may be given to C<seekdir()> to access a particular location in a
d3006 10
a3015 10
of correct type.  Any additional arguments are passed to the "C<new()>"
method of the class (meaning C<TIESCALAR>, C<TIEHANDLE>, C<TIEARRAY>,
or C<TIEHASH>).  Typically these are arguments such as might be passed
to the C<dbm_open()> function of C.  The object returned by the "C<new()>"
method is also returned by the C<tie()> function, which would be useful
if you want to access other methods in CLASSNAME.

Note that functions such as C<keys()> and C<values()> may return huge lists
when used on large objects, like DBM files.  You may prefer to use the
C<each()> function to iterate over such.  Example:
d3019 1
a3019 1
    tie(%HIST, 'NDBM_File', '/usr/lib/news/history', 1, 0);
d3025 2
a3026 1
A class implementing a hash should have the following methods:
d3029 1
a3032 1
    CLEAR this
a3035 1
    DESTROY this
d3040 1
d3043 1
a3043 22
    FETCHSIZE this
    STORESIZE this, count
    CLEAR this
    PUSH this, LIST
    POP this
    SHIFT this
    UNSHIFT this, LIST
    SPLICE this, offset, length, LIST
    EXTEND this, count
    DESTROY this

A class implementing a file handle should have the following methods:

    TIEHANDLE classname, LIST
    READ this, scalar, length, offset
    READLINE this
    GETC this
    WRITE this, scalar, length, offset
    PRINT this, LIST
    PRINTF this, format, LIST
    CLOSE this
    DESTROY this
d3048 2
a3049 1
    FETCH this,
a3050 1
    DESTROY this
d3052 1
a3052 4
Not all methods indicated above need be implemented.  See L<perltie>,
L<Tie::Hash>, L<Tie::Array>, L<Tie::Scalar>, and L<Tie::Handle>.

Unlike C<dbmopen()>, the C<tie()> function will not use or require a module
d3054 1
a3054 3
or the F<Config> module for interesting C<tie()> implementations.

For further details see L<perltie>, L<"tied VARIABLE">.
d3059 1
a3059 1
that was originally returned by the C<tie()> call that bound the variable
d3065 2
a3066 4
Returns the number of non-leap seconds since whatever time the system
considers to be the epoch (that's 00:00:00, January 1, 1904 for MacOS,
and 00:00:00 UTC, January 1, 1970 for most other systems).
Suitable for feeding to C<gmtime()> and C<localtime()>.
d3070 1
a3070 1
Returns a four-element list giving the user and system times, in
d3077 1
a3077 1
The transliteration operator.  Same as C<y///>. See L<perlop>.
d3085 1
a3085 2
on your system.  Returns TRUE if successful, the undefined value
otherwise.
a3088 2
=item uc

d3090 2
a3091 5
implementing the C<\U> escape in double-quoted strings.
Respects current LC_CTYPE locale if C<use locale> in force.  See L<perllocale>.
(It does not attempt to do titlecase mapping on initial letters.  See C<ucfirst()> for that.)

If EXPR is omitted, uses C<$_>.
d3095 3
a3097 7
=item ucfirst

Returns the value of EXPR with the first character in uppercase.  This is
the internal function implementing the C<\u> escape in double-quoted strings.
Respects current LC_CTYPE locale if C<use locale> in force.  See L<perllocale>.

If EXPR is omitted, uses C<$_>.
d3103 2
a3104 32
Sets the umask for the process to EXPR and returns the previous value.
If EXPR is omitted, merely returns the current umask.

The Unix permission C<rwxr-x---> is represented as three sets of three
bits, or three octal digits: C<0750> (the leading 0 indicates octal
and isn't one of the digits).  The C<umask> value is such a number
representing disabled permissions bits.  The permission (or "mode")
values you pass C<mkdir> or C<sysopen> are modified by your umask, so
even if you tell C<sysopen> to create a file with permissions C<0777>,
if your umask is C<0022> then the file will actually be created with
permissions C<0755>.  If your C<umask> were C<0027> (group can't
write; others can't read, write, or execute), then passing
C<sysopen()> C<0666> would create a file with mode C<0640> (C<0666 &~
027> is C<0640>).

Here's some advice: supply a creation mode of C<0666> for regular
files (in C<sysopen()>) and one of C<0777> for directories (in
C<mkdir()>) and executable files.  This gives users the freedom of
choice: if they want protected files, they might choose process umasks
of C<022>, C<027>, or even the particularly antisocial mask of C<077>.
Programs should rarely if ever make policy decisions better left to
the user.  The exception to this is when writing files that should be
kept private: mail files, web browser cookies, I<.rhosts> files, and
so on.

If umask(2) is not implemented on your system and you are trying to
restrict access for I<yourself> (i.e., (EXPR & 0700) > 0), produces a
fatal error at run time.  If umask(2) is not implemented and you are
not trying to restrict access for yourself, returns C<undef>.

Remember that a umask is a number, usually given in octal; it is I<not> a
string of octal digits.  See also L</oct>, if all you have is a string.
d3111 1
a3111 2
scalar value, an array (using "C<@@>"), a hash (using "C<%>"), a subroutine
(using "C<&>"), or a typeglob (using "<*>").  (Saying C<undef $hash{$key}>
d3113 4
a3116 5
DBM list values, so don't do that; see L<delete>.)  Always returns the
undefined value.  You can omit the EXPR, in which case nothing is
undefined, but you still get an undefined value that you could, for
instance, return from a subroutine, assign to a variable or pass as a
parameter.  Examples:
d3119 1
a3119 1
    undef $bar{'blurfl'};      # Compare to: delete $bar{'blurfl'};
d3121 1
a3121 1
    undef %hash;
d3123 1
a3123 6
    undef *xyz;       # destroys $xyz, @@xyz, %xyz, &xyz, etc.
    return (wantarray ? (undef, $errmsg) : undef) if $they_blew_it;
    select undef, undef, undef, 0.25;
    ($a, $b, undef, $c) = &foo;       # Ignore third value returned

Note that this is a unary operator, not a list operator.
a3126 2
=item unlink

d3134 1
a3134 1
Note: C<unlink()> will not delete directories unless you are superuser and
d3137 1
a3137 3
filesystem.  Use C<rmdir()> instead.

If LIST is omitted, uses C<$_>.
d3141 1
a3141 1
C<Unpack()> does the reverse of C<pack()>: it takes a string representing a
d3143 2
a3144 2
value.  (In scalar context, it returns merely the first value
produced.)  The TEMPLATE has the same format as in the C<pack()> function.
d3148 1
a3148 1
	my($what,$where,$howmuch) = @@_;
d3156 2
a3157 2
In addition, you may prefix a field with a %E<lt>numberE<gt> to indicate that
you want a E<lt>numberE<gt>-bit checksum of the items instead of the items
d3162 1
a3162 1
	$checksum += unpack("%32C*", $_);
d3164 1
a3164 1
    $checksum %= 65535;
a3169 2
See L</pack> for more examples.

d3172 1
a3172 1
Breaks the binding between a variable and a package.  (See C<tie()>.)
d3176 1
a3176 1
Does the opposite of a C<shift()>.  Or the opposite of a C<push()>,
d3183 1
a3183 1
prepended elements stay in the same order.  Use C<reverse()> to do the
a3189 4
=item use Module VERSION LIST

=item use VERSION

d3196 4
a3199 14
except that Module I<must> be a bareword.

If the first argument to C<use> is a number, it is treated as a version
number instead of a module name.  If the version of the Perl interpreter
is less than VERSION, then an error message is printed and Perl exits
immediately.  This is often useful if you need to check the current
Perl version before C<use>ing library modules that have changed in
incompatible ways from older versions of Perl.  (We try not to do
this more than we have to.)

The C<BEGIN> forces the C<require> and C<import()> to happen at compile time.  The
C<require> makes sure the module is loaded into memory if it hasn't been
yet.  The C<import()> is not a builtin--it's just an ordinary static method
call into the "C<Module>" package to tell the module to import the list of
d3201 3
a3203 5
C<import()> method any way it likes, though most modules just choose to
derive their C<import()> method via inheritance from the C<Exporter> class that
is defined in the C<Exporter> module.  See L<Exporter>.  If no C<import()>
method can be found then the error is currently silently ignored.  This
may change to a fatal error in a future version.
d3211 1
a3211 8
    BEGIN { require Module }

If the VERSION argument is present between Module and LIST, then the
C<use> will call the VERSION method in class Module with the given
version as an argument.  The default VERSION method, inherited from
the Universal class, croaks if the given version is larger than the
value of the variable C<$Module::VERSION>.  (Note that there is not a
comma after VERSION!)
d3222 3
a3224 4
Some of these these pseudo-modules import semantics into the current
block scope (like C<strict> or C<integer>, unlike ordinary modules,
which import symbols into the current package (which are effective
through the end of the file).
d3226 2
a3227 2
There's a corresponding "C<no>" command that unimports meanings imported
by C<use>, i.e., it calls C<unimport Module LIST> instead of C<import()>.
a3231 2
If no C<unimport()> method can be found the call fails with a fatal error.

d3240 1
a3240 2
to the current time.  This code has the same effect as the "C<touch>"
command if the files already exist:
d3246 1
a3246 12
=item values HASH

Returns a list consisting of all the values of the named hash.  (In a
scalar context, returns the number of values.)  The values are
returned in an apparently random order.  The actual random order is
subject to change in future versions of perl, but it is guaranteed to
be the same order as either the C<keys()> or C<each()> function would
produce on the same (unmodified) hash.

Note that you cannot modify the values of a hash this way, because the
returned list is just a copy.  You need to use a hash slice for that, 
since it's lvaluable in a way that values() is not.
d3248 5
a3252 5
    for (values %hash) 	    { s/foo/bar/g }   # FAILS!
    for (@@hash{keys %hash}) { s/foo/bar/g }   # ok

As a side effect, calling values() resets the HASH's internal iterator.
See also C<keys()>, C<each()>, and C<sort()>.
d3257 1
a3257 1
returns the value of the bit field specified by OFFSET.  BITS specifies
d3259 2
a3260 2
vector.  This must be a power of two from 1 to 32. C<vec()> may also be
assigned to, in which case parentheses are needed to give the expression
d3265 3
a3267 21
Vectors created with C<vec()> can also be manipulated with the logical
operators C<|>, C<&>, and C<^>, which will assume a bit vector operation is
desired when both operands are strings.  See L<perlop/"Bitwise String Operators">.

The following code will build up an ASCII string saying C<'PerlPerlPerl'>.
The comments show the string after each step. Note that this code works
in the same way on big-endian or little-endian machines.

    my $foo = '';
    vec($foo,  0, 32) = 0x5065726C;	# 'Perl'
    vec($foo,  2, 16) = 0x5065;		# 'PerlPe'
    vec($foo,  3, 16) = 0x726C;		# 'PerlPerl'
    vec($foo,  8,  8) = 0x50;		# 'PerlPerlP'
    vec($foo,  9,  8) = 0x65;		# 'PerlPerlPe'
    vec($foo, 20,  4) = 2;		# 'PerlPerlPe'   . "\x02"
    vec($foo, 21,  4) = 7;		# 'PerlPerlPer'
                                        # 'r' is "\x72"
    vec($foo, 45,  2) = 3;		# 'PerlPerlPer'  . "\x0c"
    vec($foo, 93,  1) = 1;		# 'PerlPerlPer'  . "\x2c"
    vec($foo, 94,  1) = 1;		# 'PerlPerlPerl'
                                        # 'l' is "\x6c"
d3274 1
a3274 1
If you know the exact length in bits, it can be used in place of the C<*>.
d3278 3
a3280 5
Behaves like the wait(2) system call on your system: it waits for a child
process to terminate and returns the pid of the deceased process, or
C<-1> if there are no child processes.  The status is rketurned in C<$?>.
Note that a return value of C<-1> could mean that child processes are
being automatically reaped, as described in L<perlipc>.
d3284 14
a3297 21
Waits for a particular child process to terminate and returns the pid of
the deceased process, or C<-1> if there is no such child process.  On some
systems, a value of 0 indicates that there are processes still running.
The status is returned in C<$?>.  If you say

    use POSIX ":sys_wait_h";
    #...
    do { 
	$kid = waitpid(-1,&WNOHANG);
    } until $kid == -1;

then you can do a non-blocking wait for all pending zombie processes.
Non-blocking wait is available on machines supporting either the
waitpid(2) or wait4(2) system calls.  However, waiting for a particular
pid with FLAGS of C<0> is implemented everywhere.  (Perl emulates the
system call by remembering the status values of processes that have
exited but have not been harvested by the Perl script yet.)

Note that on some systems, a return value of C<-1> could mean that child
processes are being automatically reaped.  See L<perlipc> for details,
and for other examples.
d3303 1
a3303 2
for a scalar.  Returns the undefined value if the context is looking
for no value (void context).
d3305 1
a3305 3
    return unless defined wantarray;	# don't bother doing more
    my @@a = complex_calculation();
    return wantarray ? @@a : "@@a";
d3309 2
a3310 40
Produces a message on STDERR just like C<die()>, but doesn't exit or throw
an exception.

If LIST is empty and C<$@@> already contains a value (typically from a
previous eval) that value is used after appending C<"\t...caught">
to C<$@@>. This is useful for staying almost, but not entirely similar to
C<die()>.

If C<$@@> is empty then the string C<"Warning: Something's wrong"> is used.

No message is printed if there is a C<$SIG{__WARN__}> handler
installed.  It is the handler's responsibility to deal with the message
as it sees fit (like, for instance, converting it into a C<die()>).  Most
handlers must therefore make arrangements to actually display the
warnings that they are not prepared to deal with, by calling C<warn()>
again in the handler.  Note that this is quite safe and will not
produce an endless loop, since C<__WARN__> hooks are not called from
inside one.

You will find this behavior is slightly different from that of
C<$SIG{__DIE__}> handlers (which don't suppress the error text, but can
instead call C<die()> again to change it).

Using a C<__WARN__> handler provides a powerful way to silence all
warnings (even the so-called mandatory ones).  An example:

    # wipe out *all* compile-time warnings
    BEGIN { $SIG{'__WARN__'} = sub { warn $_[0] if $DOWARN } }
    my $foo = 10;
    my $foo = 20;          # no warning about duplicate my $foo,
                           # but hey, you asked for it!
    # no compile-time or run-time warnings before here
    $DOWARN = 1;

    # run-time warnings enabled after here
    warn "\$foo is alive and $foo!";     # does show up

See L<perlvar> for details on setting C<%SIG> entries, and for more
examples.  See the Carp module for other kinds of warnings using its
carp() and cluck() functions.
d3318 1
a3318 1
Writes a formatted record (possibly multi-line) to the specified FILEHANDLE,
d3320 3
a3322 3
a file is the one having the same name as the filehandle, but the
format for the current output channel (see the C<select()> function) may be set
explicitly by assigning the name of the format to the C<$~> variable.
d3330 1
a3330 1
choice by assigning the name to the C<$^> variable while the filehandle is
d3332 1
a3332 1
variable C<$->, which can be set to C<0> to force a new page.
d3336 1
a3336 1
C<select()> operator.  If the FILEHANDLE is an EXPR, then the expression
d3340 1
a3340 1
Note that write is I<NOT> the opposite of C<read()>.  Unfortunately.
d3344 1
a3344 1
The transliteration operator.  Same as C<tr///>.  See L<perlop>.
@


1.1.1.3
log
@virgin perl 5.6.0
@
text
@d33 1
a33 1
surprising) rule is this: It I<looks> like a function, therefore it I<is> a
d83 2
a84 2
which return C<-1> on failure.  Exceptions to this rule are C<wait>,
C<waitpid>, and C<syscall>.  System calls also set the special C<$!>
d258 1
a258 1
Unless otherwise documented, it returns C<1> for true and C<''> for false, or
d293 2
a294 2
    -T	File is an ASCII text file.
    -B	File is a "binary" file (opposite of -T).
a321 10
If you are using ACLs, there is a pragma called C<filetest> that may
produce more accurate results than the bare stat() mode bits.
When under the C<use filetest 'access'> the above-mentioned filetests
will test whether the permission can (not) be granted using the
access() family of system calls.  Also note that the C<-x> and C<-X> may
under this pragma return true even if there are no execute permission
bits set (nor any extra execute permission ACLs).  This strangeness is
due to the underlying system calls' definitions.  Read the
documentation for the C<filetest> pragma for more information.

d328 1
a328 1
characters with the high bit set.  If too many strange characters (>30%)
d332 1
a332 1
rather than the first block.  Both C<-T> and C<-B> return true on a null
d337 1
a337 1
If any of the file tests (or either the C<stat> or C<lstat> operators) are given
d366 1
a366 1
does.  Returns the packed address if it succeeded, false otherwise.
a368 4
On systems that support a close-on-exec flag on files, the flag will
be set for the newly opened file descriptor, as determined by the
value of $^F.  See L<perlvar/$^F>.

d384 2
a385 2
four-argument version of select() leaving the first three arguments
undefined, or you might be able to use the C<syscall> interface to
d389 2
a390 2
It is usually a mistake to intermix C<alarm> and C<sleep> calls.
(C<sleep> may be internally implemented in your system with C<alarm>)
d392 2
a393 2
If you want to use C<alarm> to time out a system call you need to use an
C<eval>/C<die> pair.  You can't rely on the alarm causing the system call to
d395 1
a395 1
restart system calls on some systems.  Using C<eval>/C<die> always works,
d416 1
a416 1
For the tangent operation, you may use the C<Math::Trig::tan>
d424 1
a424 1
does.  Returns true if it succeeded, false otherwise.  NAME should be a
a427 2
=item binmode FILEHANDLE, DISCIPLINE

d430 17
a446 53
Arranges for FILEHANDLE to be read or written in "binary" or "text" mode
on systems where the run-time libraries distinguish between binary and
text files.  If FILEHANDLE is an expression, the value is taken as the
name of the filehandle.  DISCIPLINE can be either of C<":raw"> for
binary mode or C<":crlf"> for "text" mode.  If the DISCIPLINE is
omitted, it defaults to C<":raw">.

binmode() should be called after open() but before any I/O is done on
the filehandle.

On many systems binmode() currently has no effect, but in future, it
will be extended to support user-defined input and output disciplines.
On some systems binmode() is necessary when you're not working with a
text file.  For the sake of portability it is a good idea to always use
it when appropriate, and to never use it when it isn't appropriate.

In other words:  Regardless of platform, use binmode() on binary
files, and do not use binmode() on text files.

The C<open> pragma can be used to establish default disciplines.
See L<open>.

The operating system, device drivers, C libraries, and Perl run-time
system all work together to let the programmer treat a single
character (C<\n>) as the line terminator, irrespective of the external
representation.  On many operating systems, the native text file
representation matches the internal representation, but on some
platforms the external representation of C<\n> is made up of more than
one character.

Mac OS and all variants of Unix use a single character to end each line
in the external representation of text (even though that single
character is not necessarily the same across these platforms).
Consequently binmode() has no effect on these operating systems.  In
other systems like VMS, MS-DOS and the various flavors of MS-Windows
your program sees a C<\n> as a simple C<\cJ>, but what's stored in text
files are the two characters C<\cM\cJ>.  That means that, if you don't
use binmode() on these systems, C<\cM\cJ> sequences on disk will be
converted to C<\n> on input, and any C<\n> in your program will be
converted back to C<\cM\cJ> on output.  This is what you want for text
files, but it can be disastrous for binary files.

Another consequence of using binmode() (on some systems) is that
special end-of-file markers will be seen as part of the data stream.
For systems from the Microsoft family this means that if your binary
data contains C<\cZ>, the I/O subsystem will ragard it as the end of
the file, unless you use binmode().

binmode() is not only important for readline() and print() operations,
but also when using read(), seek(), sysread(), syswrite() and tell()
(see L<perlport> for more details).  See the C<$/> and C<$\> variables
in L<perlvar> for how to manually set your input and output
line-termination sequences.
d454 1
a454 1
is used.  Because a C<bless> is often the last thing in a constructor,
d474 1
a474 1
we're in a subroutine or C<eval> or C<require>, and the undefined value
d483 2
a484 2
    ($package, $filename, $line, $subroutine, $hasargs,
    $wantarray, $evaltext, $is_require, $hints, $bitmask) = caller($i);
d486 2
a487 2
Here $subroutine may be C<(eval)> if the frame is not a subroutine
call, but an C<eval>.  In such a case additional elements $evaltext and
d489 1
a489 1
C<require> or C<use> statement, $evaltext contains the text of the
d491 1
a491 1
$filename is C<(eval)>, but $evaltext is undefined.  (Note also that
d493 1
a493 3
frame.  C<$hints> and C<$bitmask> contain pragmatic hints that the caller
was compiled with.  The C<$hints> and C<$bitmask> values are subject to
change between versions of Perl, and are not meant for external use.
d500 1
a500 1
C<caller> had a chance to get the information.  That means that C<caller(N)>
d502 2
a503 2
C<< N > 1 >>.  In particular, C<@@DB::args> might have information from the 
previous time C<caller> was called.
d508 2
a509 4
changes to the directory specified by C<$ENV{HOME}>, if set; if not,
changes to the directory specified by C<$ENV{LOGDIR}>.  If neither is
set, C<chdir> does nothing.  It returns true upon success, false
otherwise.  See the example under C<die>.
a525 8
You can also import the symbolic C<S_I*> constants from the Fcntl
module:

    use Fcntl ':mode';

    chmod S_IRWXU|S_IRGRP|S_IXGRP|S_IROTH|S_IXOTH, @@executables;
    # This is identical to the chmod 0755 of the above example.

a538 3
When in slurp mode (C<$/ = undef>) or fixed-length record mode (C<$/> is
a reference to an integer or the like, see L<perlvar>) chomp() won't
remove anything.  
d579 1
a579 1
last C<chop> is returned.
d581 1
a581 1
Note that C<chop> returns the last character.  To return all but the last
d587 2
a588 4
elements of the list must be the I<numeric> uid and gid, in that
order.  A value of -1 in either position is interpreted by most
systems to leave that value unchanged.  Returns the number of files
successfully changed.
d596 1
a596 1
    chomp($user = <STDIN>);
d598 1
a598 1
    chomp($pattern = <STDIN>);
a609 4
On POSIX systems, you can detect this condition this way:

    use POSIX qw(sysconf _PC_CHOWN_RESTRICTED);
    $can_chown_giveaway = not sysconf(_PC_CHOWN_RESTRICTED);
d616 1
a616 4
For example, C<chr(65)> is C<"A"> in either ASCII or Unicode, and
chr(0x263a) is a Unicode smiley face (but only within the scope of
a C<use utf8>).  For the reverse, use L</ord>.  
See L<utf8> for more about Unicode.
d626 1
a626 1
begin with a C</> by your process and all its children.  (It doesn't
d629 1
a629 1
omitted, does a C<chroot> to C<$_>.
d635 1
a635 1
Closes the file or pipe associated with the file handle, returning true
d637 1
a637 1
descriptor.  Closes the currently selected filehandle if the argument
d641 3
a643 3
another C<open> on it, because C<open> will close it for you.  (See
C<open>.)  However, an explicit C<close> on an input file resets the line
counter (C<$.>), while the implicit close done by C<open> does not.
d645 2
a646 2
If the file handle came from a piped open C<close> will additionally
return false if one of the other system calls involved fails or if the
a652 5
Prematurely closing the read end of a pipe (i.e. before the process
writing to it at the other end has closed it) will result in a
SIGPIPE being delivered to the writer.  If the other end can't
handle that, be sure to read all the data before closing the pipe.

d669 1
a669 1
Closes a directory opened by C<opendir> and returns the success of that
d678 1
a678 1
does.  Returns true if it succeeded, false otherwise.  NAME should be a
d693 2
a694 2
block.  C<last> and C<redo> will behave as if they had been executed within
the main block.  So will C<next>, but since it will execute a C<continue>
d708 1
a708 1
empty one, logically enough.  In that case, C<next> goes directly back
d716 1
a716 1
For the inverse cosine operation, you may use the C<Math::Trig::acos()>
d729 1
a729 1
Note that C<crypt> is intended to be a one-way function, much like breaking
d736 1
a736 1
allows your code to work with the standard C<crypt> and with more
a760 6
The L<crypt> function is unsuitable for encrypting large quantities
of data, not least of all because you can't get the information
back.  Look at the F<by-module/Crypt> and F<by-module/PGP> directories
on your favorite CPAN mirror for a slew of potentially useful
modules.

d763 1
a763 1
[This function has been largely superseded by the C<untie> function.]
d767 1
a767 1
=item dbmopen HASH,DBNAME,MASK
d769 1
a769 1
[This function has been largely superseded by the C<tie> function.]
d772 2
a773 2
hash.  HASH is the name of the hash.  (Unlike normal C<open>, the first
argument is I<not> a filehandle, even though it looks like one).  DBNAME
d776 2
a777 2
specified by MASK (as modified by the C<umask>).  If your system supports
only the older DBM functions, you may perform only one C<dbmopen> in your
d779 1
a779 1
ndbm, calling C<dbmopen> produced a fatal error; it now falls back to
d784 1
a784 1
either use file tests or try setting a dummy hash entry inside an C<eval>,
d787 2
a788 2
Note that functions such as C<keys> and C<values> may return huge lists
when used on large DBM files.  You may prefer to use the C<each>
d823 1
a823 1
doesn't I<necessarily> indicate an exceptional condition: C<pop>
d827 4
a830 11
You may also use C<defined(&func)> to check whether subroutine C<&func>
has ever been defined.  The return value is unaffected by any forward
declarations of C<&foo>.

Use of C<defined> on aggregates (hashes and arrays) is deprecated.  It
used to report whether memory for that aggregate has ever been
allocated.  This behavior may disappear in future versions of Perl.
You should instead use a simple test for size:

    if (@@an_array) { print "has array elements\n" }
    if (%a_hash)   { print "has hash members\n"   }
d845 1
a845 1
Note:  Many folks tend to overuse C<defined>, and then are surprised to
d856 1
a856 1
should use C<defined> only when you're questioning the integrity of what
d860 18
d882 6
a887 16
Given an expression that specifies a hash element, array element, hash slice,
or array slice, deletes the specified element(s) from the hash or array.
In the case of an array, if the array elements happen to be at the end,
the size of the array will shrink to the highest element that tests 
true for exists() (or 0 if no such element exists).

Returns each element so deleted or the undefined value if there was no such
element.  Deleting from C<$ENV{}> modifies the environment.  Deleting from
a hash tied to a DBM file deletes the entry from the DBM file.  Deleting
from a C<tie>d hash or array may not necessarily return anything.

Deleting an array element effectively returns that position of the array
to its initial, uninitialized state.  Subsequently testing for the same
element with exists() will return false.  Note that deleting array
elements in the middle of an array will not shift the index of the ones
after them down--use splice() for that.  See L</exists>.
d889 1
a889 1
The following (inefficiently) deletes all the values of %HASH and @@ARRAY:
d895 1
a895 7
    foreach $index (0 .. $#ARRAY) {
	delete $ARRAY[$index];
    }

And so do these:

    delete @@HASH{keys %HASH};
d897 1
a897 1
    delete @@ARRAY[0 .. $#ARRAY];
d900 1
a900 1
or undefining %HASH or @@ARRAY:
d902 2
a903 5
    %HASH = ();		# completely empty %HASH
    undef %HASH;	# forget %HASH ever existed

    @@ARRAY = ();	# completely empty @@ARRAY
    undef @@ARRAY;	# forget @@ARRAY ever existed
d906 1
a906 2
operation is a hash element, array element,  hash slice, or array slice
lookup:
a910 3
    delete $ref->[$x][$y][$index];
    delete @@{$ref->[$x][$y]}[$index1, $index2, @@moreindices];

d913 6
a918 7
Outside an C<eval>, prints the value of LIST to C<STDERR> and
exits with the current value of C<$!> (errno).  If C<$!> is C<0>,
exits with the value of C<<< ($? >> 8) >>> (backtick `command`
status).  If C<<< ($? >> 8) >>> is C<0>, exits with C<255>.  Inside
an C<eval(),> the error message is stuffed into C<$@@> and the
C<eval> is terminated with the undefined value.  This makes
C<die> the way to raise an exception.
d972 1
a972 1
Because perl will stringify uncaught exception messages before displaying
d976 9
a984 10
You can arrange for a callback to be run just before the C<die>
does its deed, by setting the C<$SIG{__DIE__}> hook.  The associated
handler will be called with the error text and can change the error
message, if it sees fit, by calling C<die> again.  See
L<perlvar/$SIG{expr}> for details on setting C<%SIG> entries, and
L<"eval BLOCK"> for some examples.  Although this feature was meant
to be run only right before your program was to exit, this is not
currently the case--the C<$SIG{__DIE__}> hook is currently called
even inside eval()ed blocks/strings!  If one wants the hook to do
nothing in such situations, put
d988 3
a990 3
as the first line of the handler (see L<perlvar/$^S>).  Because
this promotes strange action at a distance, this counterintuitive
behavior may be fixed in a future release.  
d1034 1
a1034 1
C<use> and C<require> operators, which also do automatic error checking
d1055 34
a1088 25
This function causes an immediate core dump.  See also the B<-u>
command-line switch in L<perlrun>, which does the same thing.
Primarily this is so that you can use the B<undump> program (not
supplied) to turn your core dump into an executable binary after
having initialized all your variables at the beginning of the
program.  When the new binary is executed it will begin by executing
a C<goto LABEL> (with all the restrictions that C<goto> suffers).
Think of it as a goto with an intervening core dump and reincarnation.
If C<LABEL> is omitted, restarts the program from the top.

B<WARNING>: Any files opened at the time of the dump will I<not>
be open any more when the program is reincarnated, with possible
resulting confusion on the part of Perl.  

This function is now largely obsolete, partly because it's very
hard to convert a core file into an executable, and because the
real compiler backends for generating portable bytecode and compilable
C code have superseded it.

If you're looking to use L<dump> to speed up your program, consider
generating bytecode or native C code as described in L<perlcc>.  If
you're just trying to accelerate a CGI script, consider using the
C<mod_perl> extension to B<Apache>, or the CPAN module, Fast::CGI.
You might also consider autoloading or selfloading, which at least
make your program I<appear> to run faster.  
d1095 3
a1097 1
element in the hash.
d1101 1
a1101 1
to be in the same order as either the C<keys> or C<values> function
d1105 4
a1108 4
(which when assigned produces a false (C<0>) value), and C<undef> in
scalar context.  The next call to C<each> after that will start iterating
again.  There is a single iterator for each hash, shared by all C<each>,
C<keys>, and C<values> function calls in the program; it can be reset by
d1120 1
a1120 1
See also C<keys>, C<values> and C<sort>.
d1131 1
a1131 1
reads a character and then C<ungetc>s it, so isn't very useful in an
d1133 1
a1133 1
C<eof(FILEHANDLE)> on it) after end-of-file is reached.  File types such
d1136 6
a1141 11
An C<eof> without an argument uses the last file read.  Using C<eof()>
with empty parentheses is very different.  It refers to the pseudo file
formed from the files listed on the command line and accessed via the
C<< <> >> operator.  Since C<< <> >> isn't explicitly opened,
as a normal filehandle is, an C<eof()> before C<< <> >> has been
used will cause C<@@ARGV> to be examined to determine if input is
available.

In a C<< while (<>) >> loop, C<eof> or C<eof(ARGV)> can be used to
detect the end of each file, C<eof()> will only detect the end of the
last file.  Examples:
d1162 2
a1163 2
input operators typically return C<undef> when they run out of data, or if
there was an error.
d1194 2
a1195 2
If there is a syntax error or runtime error, or a C<die> statement is
executed, an undefined value is returned by C<eval>, and C<$@@> is set to the
d1197 1
a1197 1
string.  Beware that using C<eval> neither silences perl from printing
d1202 2
a1203 2
Note that, because C<eval> traps otherwise-fatal errors, it is useful for
determining whether a particular feature (such as C<socket> or C<symlink>)
d1235 1
a1235 1
C<die> again, which has the effect of changing their error messages:
d1245 1
a1245 1
Because this promotes action at a distance, this counterintuitive behavior
d1248 1
a1248 1
With an C<eval>, you should be especially careful to remember what's
d1261 1
a1261 1
the variable $x.  (Although case 2 has misleading double quotes making
d1264 1
a1264 1
does nothing but return the value of $x.  (Case 4 is preferred for
d1267 1
a1267 1
normally you I<would> like to use double quotes, except that in this
d1278 3
a1280 3
The C<exec> function executes a system command I<and never returns>--
use C<system> instead of C<exec> if you want it to return.  It fails and
returns false only if the command does not exist I<and> it is executed
d1283 4
a1286 4
Since it's a common mistake to use C<exec> instead of C<system>, Perl
warns you if there is a following statement which isn't C<die>, C<warn>,
or C<exit> (if C<-w> is set  -  but you always do that).   If you
I<really> want to follow an C<exec> with some other statement, you
d1299 3
a1301 2
words and passed directly to C<execvp>, which is more efficient.  
Examples:
d1324 4
a1327 5
Using an indirect object with C<exec> or C<system> is also more
secure.  This usage (which also works fine with system()) forces
interpretation of the arguments as a multivalued list, even if the
list had just one argument.  That way you're safe from the shell
expanding wildcards or splitting up words with whitespace in them.
d1340 1
a1340 7
Beginning with v5.6.0, Perl will attempt to flush all files opened for
output before the exec, but this may not be supported on some platforms
(see L<perlport>).  To be safe, you may need to set C<$|> ($AUTOFLUSH
in English) or call the C<autoflush()> method of C<IO::Handle> on any
open handles in order to avoid lost output.

Note that C<exec> will not call your C<END> blocks, nor will it call
d1345 6
a1350 12
Given an expression that specifies a hash element or array element,
returns true if the specified element in the hash or array has ever
been initialized, even if the corresponding value is undefined.  The
element is not autovivified if it doesn't exist.

    print "Exists\n" 	if exists $hash{$key};
    print "Defined\n" 	if defined $hash{$key};
    print "True\n"      if $hash{$key};

    print "Exists\n" 	if exists $array[$index];
    print "Defined\n" 	if defined $array[$index];
    print "True\n"      if $array[$index];
d1352 1
a1352 1
A hash or array element can be true only if it's defined, and defined if
a1354 8
Given an expression that specifies the name of a subroutine,
returns true if the specified subroutine has ever been declared, even
if it is undefined.  Mentioning a subroutine name for exists or defined
does not count as declaring it.

    print "Exists\n" 	if exists &subroutine;
    print "Defined\n" 	if defined &subroutine;

d1356 1
a1356 1
operation is a hash or array key lookup or subroutine name:
d1361 5
a1365 10
    if (exists $ref->{A}->{B}->[$ix]) 	{ }
    if (exists $hash{A}{B}[$ix]) 	{ }

    if (exists &{$ref->{A}{B}{$key}})   { }

Although the deepest nested array or hash will not spring into existence
just because its existence was tested, any intervening ones will.
Thus C<< $ref->{"A"} >> and C<< $ref->{"A"}->{"B"} >> will spring
into existence due to the existence test for the $key element above.
This happens anywhere the arrow operator is used, including even:
a1374 9
See L<perlref/"Pseudo-hashes: Using an array as a hash"> for specifics
on how exists() acts when used on a pseudo-hash.

Use of a subroutine call, rather than a subroutine name, as an argument
to exists() is an error.

    exists &sub;	# OK
    exists &sub();	# Error

d1382 1
a1382 1
See also C<die>.  If EXPR is omitted, exits with C<0> status.  The only
d1389 3
a1391 3
Don't use C<exit> to abort a subroutine if there's any chance that
someone might want to trap whatever error happened.  Use C<die> instead,
which can be trapped by an C<eval>.
d1393 1
a1393 1
The exit() function does not always exit immediately.  It calls any
d1395 1
a1395 1
themselves abort the exit.  Likewise any object destructors that need to
d1398 1
a1398 1
See L<perlmod> for details.
d1414 1
a1414 1
value return works just like C<ioctl> below.  
d1421 3
a1423 3
You don't have to check for C<defined> on the return from C<fnctl>.
Like C<ioctl>, it maps a C<0> return from the system call into
C<"0 but true"> in Perl.  This string is true in boolean context and C<0>
d1427 1
a1427 1
Note that C<fcntl> will produce a fatal error if used on a machine that
d1435 1
a1435 1
bitmaps for C<select> and low-level POSIX tty-handling operations.
d1448 2
a1449 2
Calls flock(2), or an emulation of it, on FILEHANDLE.  Returns true
for success, false on failure.  Produces a fatal error if used on a
d1451 1
a1451 1
C<flock> is Perl's portable file locking interface, although it locks
d1457 2
a1458 2
fewer guarantees.  This means that files locked with C<flock> may be
modified by programs that do not also use C<flock>.  See L<perlport>,
d1468 1
a1468 1
you can use the symbolic names if you import them from the Fcntl module,
d1471 2
a1472 2
releases a previously requested lock.  If LOCK_NB is bitwise-or'ed with
LOCK_SH or LOCK_EX then C<flock> will return immediately rather than blocking
d1484 2
a1485 2
Note also that some versions of C<flock> cannot lock things over the
network; you would need to use the more system-specific C<fcntl> for
d1530 3
a1532 5
Beginning with v5.6.0, Perl will attempt to flush all files opened for
output before forking the child process, but this may not be supported
on some platforms (see L<perlport>).  To be safe, you may need to set
C<$|> ($AUTOFLUSH in English) or call the C<autoflush()> method of
C<IO::Handle> on any open handles in order to avoid duplicate output.
d1534 1
a1534 1
If you C<fork> without ever waiting on your children, you will
d1542 1
a1542 1
backgrounded job launched from a remote shell) won't think you're done.
d1547 1
a1547 1
Declare a picture format for use by the C<write> function.  For
d1568 1
a1568 1
Eventually, when a C<write> is done, the contents of
d1571 1
a1571 1
does one C<formline> per line of form, but the C<formline> function itself
d1577 1
a1577 1
Be careful if you put double quotes around the picture, because an C<@@>
d1579 1
a1579 1
C<formline> always returns true.  See L<perlform> for other examples.
d1612 1
a1612 1
The C<POSIX::getattr> function can do this more portably on
d1621 1
a1621 1
use C<getpwuid>.
d1625 2
a1626 2
Do not consider C<getlogin> for authentication: it is not as
secure as C<getpwuid>.
d1634 1
a1634 1
    ($port, $iaddr) = sockaddr_in($hersockaddr);
d1644 1
a1644 1
group of current process.  Note that the POSIX version of C<getpgrp>
a1730 8
The exact meaning of the $gcos field varies but it usually contains
the real name of the user (as opposed to the login name) and other
information pertaining to the user.  Beware, however, that in many
system users are able to change this information and therefore it
cannot be trusted and therefore the $gcos is is tainted (see
L<perlsec>).  The $passwd and $shell, user's encrypted password and
login shell, are also tainted, because of the same reason.

d1743 20
a1762 19
In I<getpw*()> the fields $quota, $comment, and $expire are special
cases in the sense that in many systems they are unsupported.  If the
$quota is unsupported, it is an empty scalar.  If it is supported, it
usually encodes the disk quota.  If the $comment field is unsupported,
it is an empty scalar.  If it is supported it usually encodes some
administrative comment about the user.  In some systems the $quota
field may be $change or $age, fields that have to do with password
aging.  In some systems the $comment field may be $class.  The $expire
field, if present, encodes the expiration period of the account or the
password.  For the availability and the exact meaning of these fields
in your system, please consult your getpwnam(3) documentation and your
F<pwd.h> file.  You can also find out from within Perl what your
$quota and $comment fields mean and whether you have the $expire field
by using the C<Config> module and the values C<d_pwquota>, C<d_pwage>,
C<d_pwchange>, C<d_pwcomment>, and C<d_pwexpire>.  Shadow password
files are only supported if your vendor has implemented them in the
intuitive fashion that calling the regular C library routines gets the
shadow versions if you're running under privilege.  Those that
incorrectly implement a separate library call are not supported.
d1764 1
a1764 1
The $members value returned by I<getgr*()> is a space separated list of
d1783 1
a1783 1
    $straddr = inet_ntoa($iaddr);
d1785 6
a1790 7
If you get tired of remembering which element of the return list
contains which return value, by-name interfaces are provided
in standard modules: C<File::stat>, C<Net::hostent>, C<Net::netent>,
C<Net::protoent>, C<Net::servent>, C<Time::gmtime>, C<Time::localtime>,
and C<User::grent>.  These override the normal built-ins, supplying
versions that return objects with the appropriate names
for each field.  For example:
d1797 1
a1797 2
they aren't, because a C<File::stat> object is different from 
a C<User::pwent> object.
d1801 1
a1801 3
Returns the packed sockaddr address of this end of the SOCKET connection,
in case you don't know the address because you have several different
IPs that the connection might have come in on.
d1805 1
a1805 4
    ($port, $myaddr) = sockaddr_in($mysockaddr);
    printf "Connect to %s [%s]\n", 
       scalar gethostbyaddr($myaddr, AF_INET),
       inet_ntoa($myaddr);
d1817 2
a1818 2
implementing the C<< <*.c> >> operator, but you can use it directly.
If EXPR is omitted, C<$_> is used.  The C<< <*.c> >> operator is
a1820 3
Beginning with v5.6.0, this operator is implemented using the standard
C<File::Glob> extension.  See L<File::Glob> for details.

d1823 1
a1823 1
Converts a time as returned by the time function to a 8-element list
d1827 2
a1828 2
    #  0    1    2     3     4    5     6     7  
    ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday) =
d1831 7
a1837 18
All list elements are numeric, and come straight out of the C `struct
tm'.  $sec, $min, and $hour are the seconds, minutes, and hours of the
specified time.  $mday is the day of the month, and $mon is the month
itself, in the range C<0..11> with 0 indicating January and 11
indicating December.  $year is the number of years since 1900.  That
is, $year is C<123> in year 2023.  $wday is the day of the week, with
0 indicating Sunday and 3 indicating Wednesday.  $yday is the day of
the year, in the range C<1..365> (or C<1..366> in leap years.)  

Note that the $year element is I<not> simply the last two digits of
the year.  If you assume it is, then you create non-Y2K-compliant
programs--and you wouldn't want to do that, would you?

The proper way to get a complete 4-digit year is simply:

	$year += 1900;

And to get the last two digits of the year (e.g., '01' in 2001) do:
d1839 1
a1839 1
	$year = sprintf("%02d", $year % 100);
d1841 1
a1841 3
If EXPR is omitted, C<gmtime()> uses the current time (C<gmtime(time)>).

In scalar context, C<gmtime()> returns the ctime(3) value:
d1845 1
a1845 1
Also see the C<timegm> function provided by the C<Time::Local> module,
d1872 1
a1872 1
or to get out of a block or subroutine given to C<sort>.
d1875 1
a1875 1
construct such as C<last> or C<die>.  The author of Perl has never felt the
d1884 7
a1890 14
The C<goto-&NAME> form is quite different from the other forms of C<goto>.
In fact, it isn't a goto in the normal sense at all, and doesn't have
the stigma associated with other gotos.  Instead, it
substitutes a call to the named subroutine for the currently running
subroutine.  This is used by C<AUTOLOAD> subroutines that wish to load
another subroutine and then pretend that the other subroutine had been
called in the first place (except that any modifications to C<@@_>
in the current subroutine are propagated to the other subroutine.)
After the C<goto>, not even C<caller> will be able to tell that this
routine was called first.

NAME needn't be the name of a subroutine; it can be a scalar variable
containing a code reference, or a block which evaluates to a code
reference.
d1901 2
a1902 2
elements for which the expression evaluated to true.  In scalar
context, returns the number of times the expression was true.
d1915 2
a1916 2
element of a list returned by grep (for example, in a C<foreach>, C<map>
or another C<grep>) actually modifies the element in the original list.
d1919 1
a1919 1
See also L</map> for a list composed of the results of the BLOCK or EXPR.
a1931 3
Hex strings may only represent integers.  Strings that would cause
integer overflow trigger a warning.

d1934 1
a1934 1
There is no builtin C<import> function.  It is just an ordinary
d1936 1
a1936 1
names to another module.  The C<use> function calls the C<import> method
d1961 1
a1961 1
the C<sprintf>, C<printf>, or the C<POSIX::floor> and C<POSIX::ceil>
d1972 1
a1972 1
own, based on your C header files such as F<< <sys/ioctl.h> >>.
d1976 1
a1976 1
will be passed as the third argument of the actual C<ioctl> call.  (If SCALAR
d1979 15
a1993 3
true, add a C<0> to the scalar before using it.)  The C<pack> and C<unpack>
functions may be needed to manipulate the values of structures used by
C<ioctl>.  
d1995 1
a1995 1
The return value of C<ioctl> (and C<fcntl>) is as follows:
d2002 1
a2002 1
Thus Perl returns true on success and false on failure, yet you can
a2011 12
Here's an example of setting a filehandle named C<REMOTE> to be
non-blocking at the system level.  You'll have to negotiate C<$|>
on your own, though.

    use Fcntl qw(F_GETFL F_SETFL O_NONBLOCK);

    $flags = fcntl(REMOTE, F_GETFL, 0)
                or die "Can't get flags for the socket: $!\n";

    $flags = fcntl(REMOTE, F_SETFL, $flags | O_NONBLOCK)
                or die "Can't set flags for the socket: $!\n";

d2019 1
a2019 2
Beware that unlike C<split>, C<join> doesn't take a pattern as its
first argument.  Compare L</split>.
d2023 1
a2023 1
Returns a list consisting of all the keys of the named hash.  (In
d2027 1
a2027 1
order as either the C<values> or C<each> function produces (given
d2035 1
a2035 1
    while (@@keys) { 
d2045 1
a2045 1
To sort a hash by value, you'll need to use a C<sort> function.
d2052 1
a2052 1
As an lvalue C<keys> allows you to increase the number of hash buckets
d2064 1
a2064 1
C<keys> in this way (but you needn't worry about doing this by accident,
d2067 1
a2067 1
See also C<each>, C<values> and C<sort>.
d2069 1
a2069 1
=item kill SIGNAL, LIST
d2071 3
a2073 3
Sends a signal to a list of processes.  Returns the number of
processes successfully signaled (which is not necessarily the
same as the number actually killed).
d2078 1
a2078 6
If SIGNAL is zero, no signal is sent to the process.  This is a
useful way to check that the process is alive and hasn't changed
its UID.  See L<perlport> for notes on the portability of this
construct.

Unlike in the shell, if SIGNAL is negative, it kills
a2101 4
Note that a block by itself is semantically identical to a loop
that executes once.  Thus C<last> can be used to effect an early
exit out of such a block.

d2111 1
a2111 2
Respects current LC_CTYPE locale if C<use locale> in force.  See L<perllocale>
and L<utf8>.
d2136 2
a2137 2
Creates a new filename linked to the old filename.  Returns true for
success, false otherwise. 
d2141 2
a2142 2
Does the same thing that the listen system call does.  Returns true if
it succeeded, false otherwise.  See the example in L<perlipc/"Sockets: Client/Server Communication">.
d2146 1
a2146 1
You really probably want to be using C<my> instead, because C<local> isn't
d2157 1
a2157 1
Converts a time as returned by the time function to a 9-element list
d2165 7
a2171 20
All list elements are numeric, and come straight out of the C `struct
tm'.  $sec, $min, and $hour are the seconds, minutes, and hours of the
specified time.  $mday is the day of the month, and $mon is the month
itself, in the range C<0..11> with 0 indicating January and 11
indicating December.  $year is the number of years since 1900.  That
is, $year is C<123> in year 2023.  $wday is the day of the week, with
0 indicating Sunday and 3 indicating Wednesday.  $yday is the day of
the year, in the range C<1..365> (or C<1..366> in leap years.)  $isdst
is true if the specified time occurs during daylight savings time,
false otherwise.

Note that the $year element is I<not> simply the last two digits of
the year.  If you assume it is, then you create non-Y2K-compliant
programs--and you wouldn't want to do that, would you?

The proper way to get a complete 4-digit year is simply:

	$year += 1900;

And to get the last two digits of the year (e.g., '01' in 2001) do:
d2173 1
a2173 1
	$year = sprintf("%02d", $year % 100);
d2175 1
a2175 3
If EXPR is omitted, C<localtime()> uses the current time (C<localtime(time)>).

In scalar context, C<localtime()> returns the ctime(3) value:
d2180 5
a2184 7
instead a Perl builtin.  Also see the C<Time::Local> module
(to convert the second, minutes, hours, ... back to seconds since the
stroke of midnight the 1st of January 1970, the value returned by
time()), and the strftime(3) and mktime(3) functions available via the
POSIX module.  To get somewhat similar but locale dependent date
strings, set up your locale environment variables appropriately
(please see L<perllocale>) and try for example:
a2191 11
=item lock

    lock I<THING>

This function places an advisory lock on a variable, subroutine,
or referenced object contained in I<THING> until the lock goes out
of scope.  This is a built-in function only if your version of Perl
was built with threading enabled, and if you've said C<use Threads>.
Otherwise a user-defined function by this name will be called.  See
L<Thread>.

d2198 1
a2198 1
The base-N log of a number is equal to the natural log of that number
d2214 1
a2214 1
Does the same thing as the C<stat> function (including setting the
d2217 1
a2217 1
your system, a normal C<stat> is done.
d2229 6
a2234 6
Evaluates the BLOCK or EXPR for each element of LIST (locally setting
C<$_> to each element) and returns the list value composed of the
results of each such evaluation.  In scalar context, returns the
total number of elements so generated.  Evaluates BLOCK or EXPR in
list context, so each element of LIST may produce zero, one, or
more elements in the returned value.
d2256 1
a2256 3
=item mkdir FILENAME,MASK

=item mkdir FILENAME
d2259 2
a2260 3
specified by MASK (as modified by C<umask>).  If it succeeds it
returns true, otherwise it returns false and sets C<$!> (errno).
If omitted, MASK defaults to 0777.
d2262 1
a2262 1
In general, it is better to create directories with permissive MASK,
d2264 1
a2264 1
a restrictive MASK and give the user no way to be more permissive.
d2267 1
a2267 1
C<umask> discusses the choice of MASK in more detail.
d2277 3
a2279 3
structure.  Returns like C<ioctl>: the undefined value for error,
C<"0 but true"> for zero, or the actual return value otherwise.  See also
C<IPC::SysV> and C<IPC::Semaphore> documentation.
d2285 9
a2293 1
and C<IPC::Msg> documentation.
d2299 4
a2302 15
SIZE.  Note that when a message is received, the message type as a
native long integer will be the first thing in VAR, followed by the
actual message.  This packing may be opened with C<unpack("l! a*")>.
Taints the variable.  Returns true if successful, or false if there is
an error.  See also C<IPC::SysV> and C<IPC::SysV::Msg> documentation.

=item msgsnd ID,MSG,FLAGS

Calls the System V IPC function msgsnd to send the message MSG to the
message queue ID.  MSG must begin with the native long integer message
type, and be followed by the length of the actual message, and finally
the message itself.  This kind of packing can be achieved with
C<pack("l! a*", $type, $message)>.  Returns true if successful,
or false if there is an error.  See also C<IPC::SysV>
and C<IPC::SysV::Msg> documentation.
d2306 2
a2307 4
=item my EXPR : ATTRIBUTES

A C<my> declares the listed variables to be local (lexically) to the
enclosing block, file, or C<eval>.  If
a2330 3
Note that a block by itself is semantically identical to a loop
that executes once.  Thus C<next> will exit such a block early.

d2350 4
a2353 12
If EXPR is omitted, uses C<$_>.   To go the other way (produce a number
in octal), use sprintf() or printf():

    $perms = (stat("filename"))[2] & 07777;
    $oct_perms = sprintf "%lo", $perms;

The oct() function is commonly used when a string such as C<644> needs
to be converted into a file mode, for example. (Although perl will
automatically convert strings into numbers as needed, this automatic
conversion assumes base 10.)

=item open FILEHANDLE,MODE,LIST
d2361 1
a2361 4
name of the real filehandle wanted.  (This is considered a symbolic
reference, so C<use strict 'refs'> should I<not> be in effect.)

If EXPR is omitted, the scalar
d2363 2
a2364 2
(Note that lexical variables--those declared with C<my>--will not work
for this purpose; so if you're using C<my>, specify EXPR in your call
d2368 3
a2370 3
If MODE is C<< '<' >> or nothing, the file is opened for input.
If MODE is C<< '>' >>, the file is truncated and opened for
output, being created if necessary.  If MODE is C<<< '>>' >>>,
d2372 3
a2374 3
You can put a C<'+'> in front of the C<< '>' >> or C<< '<' >> to indicate that
you want both read and write access to the file; thus C<< '+<' >> is almost
always preferred for read/write updates--the C<< '+>' >> mode would clobber the
d2380 3
a2382 6
These various prefixes correspond to the fopen(3) modes of C<'r'>, C<'r+'>,
C<'w'>, C<'w+'>, C<'a'>, and C<'a+'>.

In the 2-arguments (and 1-argument) form of the call the mode and
filename should be concatenated (in this order), possibly separated by
spaces.  It is possible to omit the mode if the mode is C<< '<' >>.
d2388 1
a2388 11
for more examples of this.  (You are not allowed to C<open> to a command
that pipes both in I<and> out, but see L<IPC::Open2>, L<IPC::Open3>,
and L<perlipc/"Bidirectional Communication with Another Process">
for alternatives.)

If MODE is C<'|-'>, the filename is interpreted as a
command to which output is to be piped, and if MODE is
C<'-|'>, the filename is interpreted as a command which pipes output to
us.  In the 2-arguments (and 1-argument) form one should replace dash
(C<'-'>) with the command.  See L<perlipc/"Using open() for IPC">
for more examples of this.  (You are not allowed to C<open> to a command
d2392 2
a2393 5
In the 2-arguments (and 1-argument) form opening C<'-'> opens STDIN
and opening C<< '>-' >> opens STDOUT.  

Open returns
nonzero upon success, the undefined value otherwise.  If the C<open>
d2400 1
a2400 1
dealing with this.  The key distinction between systems that need C<binmode>
d2403 1
a2403 1
character in C as C<"\n">, do not need C<binmode>.  The rest need it.
d2406 2
a2407 2
if the request failed, so C<open> is frequently used in connection with
C<die>.  Even if C<die> won't do what you want (say, in a CGI script,
d2410 1
a2410 1
the return value from opening a file.  The infrequent exception is when
d2419 1
a2419 1
    open(LOG, '>>/usr/spool/news/twitlog');	# (log is reserved)
d2422 1
a2422 4
    open(DBASE, '+<', 'dbase.mine')		# open for update
	or die "Can't open 'dbase.mine' for update: $!";

    open(DBASE, '+<dbase.mine')			# ditto
d2425 1
a2425 4
    open(ARTICLE, '-|', "caesar <$article")     # decrypt article
	or die "Can't start caesar: $!";

    open(ARTICLE, "caesar <$article |")		# ditto
d2428 1
a2428 1
    open(EXTRACT, "|sort >/tmp/Tmp$$")		# $$ is our process id
d2456 1
a2456 1
with C<< '>&' >>, in which case the rest of the string is interpreted as the
d2458 2
a2459 2
duped and opened.  You may use C<&> after C<< > >>, C<<< >> >>>,
C<< < >>, C<< +> >>, C<<< +>> >>>, and C<< +< >>.  The
d2462 1
a2462 3
stdio buffers.)  Duping file handles is not yet supported for 3-argument
open().

d2470 2
a2471 2
    open(STDOUT, '>', "foo.out") || die "Can't redirect stdout";
    open(STDERR, ">&STDOUT")     || die "Can't dup stdout";
d2488 2
a2489 2
If you specify C<< '<&=N' >>, where C<N> is a number, then Perl will do an
equivalent of C's C<fdopen> of that file descriptor; this is more
d2494 1
a2494 8
Note that this feature depends on the fdopen() C library function.
On many UNIX systems, fdopen() is known to fail when file descriptors
exceed a certain value, typically 255. If you need more file
descriptors than that, consider rebuilding Perl to use the C<sfio>
library.

If you open a pipe on the command C<'-'>, i.e., either C<'|-'> or C<'-|'>
with 2-arguments (or 1-argument) form of open(), then
d2505 1
a2505 1
The following triples are more or less equivalent:
d2508 1
a2508 2
    open(FOO, '|-', "tr '[a-z]' '[A-Z]'");
    open(FOO, '|-') || exec 'tr', '[a-z]', '[A-Z]';
d2511 1
a2511 2
    open(FOO, '-|', "cat -n '$file'");
    open(FOO, '-|') || exec 'cat', '-n', $file;
d2515 5
a2519 9
Beginning with v5.6.0, Perl will attempt to flush all files opened for
output before any operation that may do a fork, but this may not be
supported on some platforms (see L<perlport>).  To be safe, you may need
to set C<$|> ($AUTOFLUSH in English) or call the C<autoflush()> method
of C<IO::Handle> on any open handles.

On systems that support a
close-on-exec flag on files, the flag will be set for the newly opened
file descriptor as determined by the value of $^F.  See L<perlvar/$^F>.
d2524 1
a2524 2
The filename passed to 2-argument (or 1-argument) form of open()
will have leading and trailing
d2533 2
a2534 5
Use 3-argument form to open a file with arbitrary weird characters in it,

    open(FOO, '<', $file);

otherwise it's necessary to protect any leading and trailing whitespace:
d2539 2
a2540 17
(this may not work on some bizzare filesystems).  One should
conscientiously choose between the the I<magic> and 3-arguments form
of open():

    open IN, $ARGV[0];

will allow the user to specify an argument of the form C<"rsh cat file |">,
but will not work on a filename which happens to have a trailing space, while

    open IN, '<', $ARGV[0];

will have exactly the opposite restrictions.

If you want a "real" C C<open> (see L<open(2)> on your system), then you
should use the C<sysopen> function, which involves no such magic (but
may use subtly different filemodes than Perl open(), which is mapped
to C fopen()).  This is
d2573 2
a2574 2
Opens a directory named EXPR for processing by C<readdir>, C<telldir>,
C<seekdir>, C<rewinddir>, and C<closedir>.  Returns true if successful.
d2581 1
a2581 1
Returns the numeric (ASCII or Unicode) value of the first character of EXPR.  If
a2582 41
See L<utf8> for more about Unicode.

=item our EXPR

An C<our> declares the listed variables to be valid globals within
the enclosing block, file, or C<eval>.  That is, it has the same
scoping rules as a "my" declaration, but does not create a local
variable.  If more than one value is listed, the list must be placed
in parentheses.  The C<our> declaration has no semantic effect unless
"use strict vars" is in effect, in which case it lets you use the
declared global variable without qualifying it with a package name.
(But only within the lexical scope of the C<our> declaration.  In this
it differs from "use vars", which is package scoped.)

An C<our> declaration declares a global variable that will be visible
across its entire lexical scope, even across package boundaries.  The
package in which the variable is entered is determined at the point
of the declaration, not at the point of use.  This means the following
behavior holds:

    package Foo;
    our $bar;		# declares $Foo::bar for rest of lexical scope
    $bar = 20;

    package Bar;
    print $bar;		# prints 20

Multiple C<our> declarations in the same lexical scope are allowed
if they are in different packages.  If they happened to be in the same
package, Perl will emit warnings if you have asked for them.

    use warnings;
    package Foo;
    our $bar;		# declares $Foo::bar for rest of lexical scope
    $bar = 20;

    package Bar;
    our $bar = 30;	# declares $Bar::bar for rest of lexical scope
    print $bar;		# prints 30

    our $bar;		# emits warning
d2586 2
a2587 7
Takes a LIST of values and converts it into a string using the rules
given by the TEMPLATE.  The resulting string is the concatenation of
the converted values.  Typically, each converted value looks
like its machine-level representation.  For example, on 32-bit machines
a converted integer may be represented by a sequence of 4 bytes.

The TEMPLATE is a
d2595 2
a2596 2
    b	A bit string (ascending bit order inside each byte, like vec()).
    B	A bit string (descending bit order inside each byte).
d2601 1
a2601 1
    C	An unsigned char value.  Only does bytes.  See U for Unicode.
d2606 1
a2606 2
	   what a local C compiler calls 'short'.  If you want
	   native-length shorts, use the '!' suffix.)
d2610 1
a2610 1
	  (This 'integer' is _at_least_ 32 bits wide.  Its exact
d2618 1
a2618 2
	   what a local C compiler calls 'long'.  If you want
	   native-length longs, use the '!' suffix.)
d2620 4
a2623 4
    n	An unsigned short in "network" (big-endian) order.
    N	An unsigned long in "network" (big-endian) order.
    v	An unsigned short in "VAX" (little-endian) order.
    V	An unsigned long in "VAX" (little-endian) order.
d2629 2
a2630 2
	  (Quads are available only if your system supports 64-bit
	   integer values _and_ if Perl has been compiled to support those.
a2639 2
    U	A Unicode character number.  Encodes to UTF-8 internally.
	Works even if C<use utf8> is not in effect.
d2657 2
a2658 2
count.  With all types except C<a>, C<A>, C<Z>, C<b>, C<B>, C<h>,
C<H>, and C<P> the pack function will gobble up that many values from
d2660 1
a2660 10
left, except for C<@@>, C<x>, C<X>, where it is equivalent
to C<0>, and C<u>, where it is equivalent to 1 (or 45, what is the
same).

When used with C<Z>, C<*> results in the addition of a trailing null
byte (so the packed result will be one longer than the byte C<length>
of the item).

The repeat count for C<u> is interpreted as the maximal number of bytes
to encode per line of output, with 0 and 1 replaced by 45.
d2664 1
a2664 1
The C<a>, C<A>, and C<Z> types gobble just one value, but pack it as a
d2666 2
a2667 8
unpacking, C<A> strips trailing spaces and nulls, C<Z> strips everything
after the first null, and C<a> returns data verbatim.  When packing,
C<a>, and C<Z> are equivalent.

If the value-to-pack is too long, it is truncated.  If too long and an
explicit count is provided, C<Z> packs only C<$count-1> bytes, followed
by a null byte.  Thus C<Z> always packs a trailing null byte under
all circumstances.
d2671 1
a2671 20
Likewise, the C<b> and C<B> fields pack a string that many bits long.
Each byte of the input field of pack() generates 1 bit of the result.
Each result bit is based on the least-significant bit of the corresponding
input byte, i.e., on C<ord($byte)%2>.  In particular, bytes C<"0"> and
C<"1"> generate bits 0 and 1, as do bytes C<"\0"> and C<"\1">.

Starting from the beginning of the input string of pack(), each 8-tuple
of bytes is converted to 1 byte of output.  With format C<b>
the first byte of the 8-tuple determines the least-significant bit of a
byte, and with format C<B> it determines the most-significant bit of
a byte.

If the length of the input string is not exactly divisible by 8, the
remainder is packed as if the input string were padded by null bytes
at the end.  Similarly, during unpack()ing the "extra" bits are ignored.

If the input string of pack() is longer than needed, extra bytes are ignored.
A C<*> for the repeat count of pack() means to use all the bytes of
the input field.  On unpack()ing the bits are converted to a string
of C<"0">s and C<"1">s.
d2675 1
a2675 26
The C<h> and C<H> fields pack a string that many nybbles (4-bit groups,
representable as hexadecimal digits, 0-9a-f) long.

Each byte of the input field of pack() generates 4 bits of the result.
For non-alphabetical bytes the result is based on the 4 least-significant
bits of the input byte, i.e., on C<ord($byte)%16>.  In particular,
bytes C<"0"> and C<"1"> generate nybbles 0 and 1, as do bytes
C<"\0"> and C<"\1">.  For bytes C<"a".."f"> and C<"A".."F"> the result
is compatible with the usual hexadecimal digits, so that C<"a"> and
C<"A"> both generate the nybble C<0xa==10>.  The result for bytes
C<"g".."z"> and C<"G".."Z"> is not well-defined.

Starting from the beginning of the input string of pack(), each pair
of bytes is converted to 1 byte of output.  With format C<h> the
first byte of the pair determines the least-significant nybble of the
output byte, and with format C<H> it determines the most-significant
nybble.

If the length of the input string is not even, it behaves as if padded
by a null byte at the end.  Similarly, during unpack()ing the "extra"
nybbles are ignored.

If the input string of pack() is longer than needed, extra bytes are ignored.
A C<*> for the repeat count of pack() means to use all the bytes of
the input field.  On unpack()ing the bits are converted to a string
of hexadecimal digits.
d2679 1
a2679 1
The C<p> type packs a pointer to a null-terminated string.  You are
d2682 3
a2684 30
The C<P> type packs a pointer to a structure of the size indicated by the
length.  A NULL pointer is created if the corresponding value for C<p> or
C<P> is C<undef>, similarly for unpack().

=item *

The C</> template character allows packing and unpacking of strings where
the packed structure contains a byte count followed by the string itself.
You write I<length-item>C</>I<string-item>.

The I<length-item> can be any C<pack> template letter,
and describes how the length value is packed.
The ones likely to be of most use are integer-packing ones like
C<n> (for Java strings), C<w> (for ASN.1 or SNMP)
and C<N> (for Sun XDR).

The I<string-item> must, at present, be C<"A*">, C<"a*"> or C<"Z*">.
For C<unpack> the length of the string is obtained from the I<length-item>,
but if you put in the '*' it will be ignored.

    unpack 'C/a', "\04Gurusamy";        gives 'Guru'
    unpack 'a3/A* A*', '007 Bond  J ';  gives (' Bond','J')
    pack 'n/a* w/a*','hello,','world';  gives "\000\006hello,\005world"

The I<length-item> is not returned explicitly from C<unpack>.

Adding a count to the I<length-item> letter is unlikely to do anything
useful, unless that letter is C<A>, C<a> or C<Z>.  Packing with a
I<length-item> of C<a> or C<Z> may introduce C<"\000"> characters,
which Perl does not regard as legal in numeric strings.
d2688 1
a2688 29
The integer types C<s>, C<S>, C<l>, and C<L> may be
immediately followed by a C<!> suffix to signify native shorts or
longs--as you can see from above for example a bare C<l> does mean
exactly 32 bits, the native C<long> (as seen by the local C compiler)
may be larger.  This is an issue mainly in 64-bit platforms.  You can
see whether using C<!> makes any difference by

	print length(pack("s")), " ", length(pack("s!")), "\n";
	print length(pack("l")), " ", length(pack("l!")), "\n";

C<i!> and C<I!> also work but only because of completeness;
they are identical to C<i> and C<I>.

The actual sizes (in bytes) of native shorts, ints, longs, and long
longs on the platform where Perl was built are also available via
L<Config>:

       use Config;
       print $Config{shortsize},    "\n";
       print $Config{intsize},      "\n";
       print $Config{longsize},     "\n";
       print $Config{longlongsize}, "\n";

(The C<$Config{longlongsize}> will be undefine if your system does
not support long longs.) 

=item *

The integer formats C<s>, C<S>, C<i>, C<I>, C<l>, and C<L>
d2691 1
a2691 1
4-byte integer 0x12345678 (305419896 decimal) be ordered natively
d2693 1
a2693 1

d2696 2
a2697 2

Basically, the Intel, Alpha, and VAX CPUs are little-endian, while
d2700 1
a2700 1
in little-endian mode; SGI uses it in big-endian mode.
d2702 1
a2702 1
The names `big-endian' and `little-endian' are comic references to
d2705 4
a2708 4
the egg-eating habits of the Lilliputians.

Some systems may have even weirder byte orders such as

d2711 1
a2711 1

d2726 2
a2727 3
If you want portable packed integers use the formats C<n>, C<N>,
C<v>, and C<V>, their byte endianness and size is known.
See also L<perlport>.
d2737 1
a2737 1
of the IEEE spec).  See also L<perlport>.
d2742 1
a2742 19
equal $foo).

=item *

You must yourself do any alignment or padding by inserting for example
enough C<'x'>es while packing.  There is no way to pack() and unpack()
could know where the bytes are going to or coming from.  Therefore
C<pack> (and C<unpack>) handle their output and input as flat
sequences of bytes.

=item *

A comment in a TEMPLATE starts with C<#> and goes to the end of line.

=item *

If TEMPLATE requires more arguments to pack() than actually given, pack()
assumes additional C<""> arguments.  If TEMPLATE requires less arguments
to pack() than actually given, extra arguments are ignored.
a2751 2
    $foo = pack("U4",0x24b6,0x24b7,0x24b8,0x24b9);
    # same thing with Unicode circled letters
a2755 5
    # note: the above examples featuring "C" and "c" are true
    # only on ASCII and ASCII-derived systems such as ISO Latin 1
    # and UTF-8.  In EBCDIC the first example would be
    # $foo = pack("CCCC",193,194,195,196);

a2782 6
    $foo = pack('sx2l', 12, 34);
    # short 12, two zero bytes padding, long 34
    $bar = pack('s@@4l', 12, 34);
    # short 12, zero fill to position 4, long 34
    # $foo eq $bar

d2791 1
a2791 1
of the enclosing block, file, or eval (the same as the C<my> operator).
d2794 2
a2795 2
you've used C<local> on--but I<not> lexical variables, which are created
with C<my>.  Typically it would be the first declaration in a file to
d2832 1
a2832 1
one element.  Has an effect similar to
d2834 1
a2834 1
    $ARRAY[$#ARRAY--]
d2836 3
a2838 4
If there are no elements in the array, returns the undefined value
(although this may happen at other times as well).  If ARRAY is
omitted, pops the C<@@ARGV> array in the main program, and the C<@@_>
array in subroutines, just like C<shift>.
d2856 5
a2860 5
Prints a string or a list of strings.  Returns true if successful.
FILEHANDLE may be a scalar variable name, in which case the variable
contains the name of or a reference to the filehandle, thus introducing
one level of indirection.  (NOTE: If FILEHANDLE is a variable and
the next token is a term, it may be misinterpreted as an operator
d2862 10
a2871 14
If FILEHANDLE is omitted, prints by default to standard output (or
to the last selected output channel--see L</select>).  If LIST is
also omitted, prints C<$_> to the currently selected output channel.
To set the default output channel to something other than STDOUT
use the select operation.  The current value of C<$,> (if any) is
printed between each LIST item.  The current value of C<$\> (if
any) is printed after the entire LIST has been printed.  Because
print takes a LIST, anything in the LIST is evaluated in list
context, and any subroutine that you call will have one or more of
its expressions evaluated in list context.  Also be careful not to
follow the print keyword with a left parenthesis unless you want
the corresponding right parenthesis to terminate the arguments to
the print--interpose a C<+> or put parentheses around all the
arguments.
d2885 1
a2885 1
of the list will be interpreted as the C<printf> format.  If C<use locale> is
d2889 2
a2890 2
Don't fall into the trap of using a C<printf> when a simple
C<print> would do.  The C<print> is more efficient and less
d2902 1
a2902 1
C<system>) returns C<undef> because the builtin does not really behave
d2949 2
a2950 2
omitted, the value C<1> is used.  Automatically calls C<srand> unless
C<srand> has already been called.  See also C<srand>.
d2966 1
a2966 1
call.  To get a true read(2) system call, see C<sysread>.
d2970 1
a2970 1
Returns the next directory entry for a directory opened by C<opendir>.
d2975 1
a2975 1
If you're planning to filetest the return values out of a C<readdir>, you'd
d2977 1
a2977 1
C<chdir> there, it would have been testing the wrong file.
d2996 2
a2997 2
This is the internal function implementing the C<< <EXPR> >>
operator, but you can use it directly.  The C<< <EXPR> >>
d3026 6
a3031 7
data into variable SCALAR from the specified SOCKET filehandle.  SCALAR
will be grown or shrunk to the length actually read.  Takes the same
flags as the system call of the same name.  Returns the address of the
sender if SOCKET's protocol supports this; returns an empty string
otherwise.  If there's an error, returns the undefined value.  This call
is actually implemented in terms of recvfrom(2) system call.  See
L<perlipc/"UDP: Message Passing"> for examples.
a3063 4
Note that a block by itself is semantically identical to a loop
that executes once.  Thus C<redo> inside such a block will effectively
turn it into a looping construct.

d3071 1
a3071 1
Returns a true value if EXPR is a reference, false otherwise.  If EXPR
d3076 1
a3080 1
    REF
a3081 1
    LVALUE
d3084 1
a3084 1
name is returned instead.  You can think of C<ref> as a C<typeof> operator.
d3100 1
a3100 3
Changes the name of a file; an existing file NEWNAME will be
clobbered.  Returns true for success, false otherwise.

a3107 2
=item require VERSION

d3113 2
a3114 12
supplied.

If a VERSION is specified as a literal of the form v5.6.1,
demands that the current version of Perl (C<$^V> or $PERL_VERSION) be
at least as recent as that version, at run time.  (For compatibility
with older versions of Perl, a numeric argument will also be interpreted
as VERSION.)  Compare with L</use>, which can do a similar check at
compile time.

    require v5.6.1;	# run time version check
    require 5.6.1;	# ditto
    require 5.005_03;	# float version allowed for compatibility
d3118 1
a3118 1
essentially just a variety of C<eval>.  Has semantics similar to the following
a3128 1
		    $INC{$filename} = $realfilename;
a3134 1
	delete $INC{$filename} if $@@ || !$result;
d3137 1
d3142 1
a3142 1
name.  The file must return true as the last statement to indicate
d3144 2
a3145 2
end such a file with C<1;> unless you're sure it'll return true
otherwise.  But it's better just to put the C<1;>, in case you add more
d3168 1
a3168 1
will complain about not finding "F<Foo::Bar>" there.  In this case you can do:
d3201 1
a3201 1
Returns from a subroutine, C<eval>, or C<do FILE> with the value 
d3204 1
a3204 1
may vary from one execution to the next (see C<wantarray>).  If no EXPR
d3235 1
a3235 1
C<readdir> routine on DIRHANDLE.
d3250 1
a3250 1
succeeds it returns true, otherwise it returns false and sets C<$!> (errno).  If
d3270 1
a3270 1
Because C<scalar> is unary operator, if you accidentally use for EXPR a
d3288 1
a3288 1
Sets FILEHANDLE's position, just like the C<fseek> call of C<stdio>.
d3291 8
a3298 9
POSITION, C<1> to set it to the current position plus POSITION, and
C<2> to set it to EOF plus POSITION (typically negative).  For WHENCE
you may use the constants C<SEEK_SET>, C<SEEK_CUR>, and C<SEEK_END>
(start of the file, current position, end of the file) from the Fcntl
module.  Returns C<1> upon success, C<0> otherwise.

If you want to position file for C<sysread> or C<syswrite>, don't use
C<seek>--buffering makes its effect on the file's system position
unpredictable and non-portable.  Use C<sysseek> instead.
d3309 1
a3309 1
seek() to reset things.  The C<seek> doesn't change the current position,
d3311 1
a3311 1
next C<< <FILE> >> makes Perl try again to read something.  We hope.
d3327 2
a3328 2
Sets the current position for the C<readdir> routine on DIRHANDLE.  POS
must be a value returned by C<telldir>.  Has the same caveats about
d3338 1
a3338 1
effects: first, a C<write> or a C<print> without a filehandle will
d3363 1
a3363 1
can be constructed using C<fileno> and C<vec>, along these lines:
d3392 2
a3393 2
Most systems do not bother to return anything useful in $timeleft, so
calling select() in scalar context just returns $nfound.
d3397 2
a3398 2
capable of returning the$timeleft.  If not, they always return
$timeleft equal to the supplied $timeout.
d3404 3
a3406 3
B<WARNING>: One should not attempt to mix buffered I/O (like C<read>
or <FH>) with C<select>, except as permitted by POSIX, and even
then only on POSIX systems.  You have to use C<sysread> instead.
d3410 1
a3410 1
Calls the System V IPC function C<semctl>.  You'll probably have to say
d3416 3
a3418 5
semid_ds structure or semaphore value array.  Returns like C<ioctl>:
the undefined value for error, "C<0 but true>" for zero, or the actual
return value otherwise.  The ARG must consist of a vector of native
short integers, which may may be created with C<pack("s!",(0)x$nsem)>.
See also C<IPC::SysV> and C<IPC::Semaphore> documentation.
d3432 3
a3434 3
operations is implied by the length of OPSTRING.  Returns true if
successful, or false if there is an error.  As an example, the
following code waits on semaphore $semnum of semaphore id $semid:
d3448 1
a3448 1
destination to send TO, in which case it does a C C<sendto>.  Returns
d3457 3
a3459 4
implement POSIX setpgid(2) or BSD setpgrp(2).  If the arguments are omitted,
it defaults to C<0,0>.  Note that the BSD 4.2 version of C<setpgrp> does not
accept any arguments, so only C<setpgrp(0,0)> is portable.  See also
C<POSIX::setsid()>.
d3482 3
a3484 5
the C<eval ''>, C<BEGIN {}>, C<INIT {}>, C<CHECK {}>, and C<END {}>
constructs.

See also C<unshift>, C<push>, and C<pop>.  C<Shift()> and C<unshift> do the
same thing to the left end of an array that C<pop> and C<push> do to the
d3514 3
a3516 3
SIZE bytes.  Return true if successful, or false if there is an error.
shmread() taints the variable. See also C<IPC::SysV> documentation and
the C<IPC::Shareable> module from CPAN.
d3530 1
a3530 1
disables the file descriptor in any forked copies in other
d3540 1
a3540 1
For the inverse sine operation, you may use the C<Math::Trig::asin>
d3552 2
a3553 2
mix C<alarm> and C<sleep> calls, because C<sleep> is often implemented
using C<alarm>.
d3562 2
a3563 3
C<syscall> interface to access setitimer(2) if your system supports
it, or else see L</select> above.  The Time::HiRes module from CPAN
may also help.
d3565 1
a3565 1
See also the POSIX module's C<sigpause> function.
d3570 3
a3572 8
SOCKET.  DOMAIN, TYPE, and PROTOCOL are specified the same as for
the system call of the same name.  You should C<use Socket> first
to get the proper definitions imported.  See the examples in
L<perlipc/"Sockets: Client/Server Communication">.

On systems that support a close-on-exec flag on files, the flag will
be set for the newly opened file descriptor, as determined by the
value of $^F.  See L<perlvar/$^F>.
d3579 1
a3579 5
error.  Returns true if successful.

On systems that support a close-on-exec flag on files, the flag will
be set for the newly opened file descriptors, as determined by the value
of $^F.  See L<perlvar/$^F>.
d3581 1
a3581 1
Some systems defined C<pipe> in terms of C<socketpair>, in which a call
d3598 1
a3598 1
is omitted, C<sort>s in standard string comparison order.  If SUBNAME is
d3601 1
a3601 1
of the list are to be ordered.  (The C<< <=> >> and C<cmp>
d3608 6
a3613 10
If the subroutine's prototype is C<($$)>, the elements to be compared
are passed by reference in C<@@_>, as for a normal subroutine.  This is
slower than unprototyped subroutines, where the elements to be
compared are passed into the subroutine
as the package global variables $a and $b (see example below).  Note that
in the latter case, it is usually counter-productive to declare $a and
$b as lexicals.

In either case, the subroutine may not be recursive.  The values to be
compared are always passed by reference, so don't modify them.
d3616 1
a3616 1
loop control operators described in L<perlsyn> or with C<goto>.
a3640 4
    # this sorts the %age hash by value instead of key
    # using an in-line function
    @@eldest = sort { $age{$b} <=> $age{$a} } keys %age;

d3647 7
a3653 3
    sub backwards { $b cmp $a }
    @@harry  = qw(dog cat x Cain Abel);
    @@george = qw(gone chased yz Punished Axed);
d3687 1
a3687 1
    # same thing, but without any temps
d3689 4
a3692 9
           sort { $b->[1] <=> $a->[1]
                           ||
                  $a->[2] cmp $b->[2]
           } map { [$_, /=(\d+)/, uc($_)] } @@old;

    # using a prototype allows you to use any comparison subroutine
    # as a sort subroutine (including other package's subroutines)
    package other;
    sub backwards ($$) { $_[1] cmp $_[0]; }	# $a and $b are not set here
d3694 2
a3695 5
    package main;
    @@new = sort other::backwards @@old;

If you're using strict, you I<must not> declare $a
and $b as lexicals.  They are package globals.  That means
a3718 2
=item splice ARRAY

d3724 1
a3724 1
If OFFSET is negative then it starts that far from the end of the array.
d3726 1
a3726 3
If LENGTH is negative, leaves that many elements off the end of the array.
If both OFFSET and LENGTH are omitted, removes everything.

d3756 1
a3756 1
Splits a string into a list of strings and returns that list.  By default,
d3773 1
a3773 1
of C<pop> would do well to remember).  If LIMIT is negative, it is
d3795 1
a3795 1
If the PATTERN contains parentheses, additional list elements are
d3804 1
a3804 1
If you had the entire header of a normal Unix email message in $header,
d3815 1
a3815 1
white space just as C<split> with no arguments does.  Thus, C<split(' ')> can
d3818 2
a3819 2
A C<split> on C</\s+/> is like a C<split(' ')> except that any leading
whitespace produces a null first field.  A C<split> with no arguments
d3831 1
a3831 1
(Note that $shell above will still have a newline on it.  See L</chop>,
d3836 2
a3837 2
Returns a string formatted by the usual C<printf> conventions of the
C library function C<sprintf>.  See L<sprintf(3)> or L<printf(3)>
d3840 2
a3841 2
Perl does its own C<sprintf> formatting--it emulates the C
function C<sprintf>, but it doesn't use it (except for floating-point
d3843 1
a3843 1
result, any non-standard extensions in your local C<sprintf> are not
d3846 1
a3846 1
Perl's C<sprintf> permits the following universally-known conversions:
a3863 1
   %b	an unsigned integer, in binary
a3890 1
           If no flags, interpret integer as C type "int" or "unsigned"
d3892 1
a3892 1
There are also two Perl-specific flags:
a3894 4
   v       interpret string as a vector of integers, output as
           numbers separated either by dots, or by an arbitrary
	   string received from the argument list when the flag
	   is preceded by C<*>
d3896 1
a3896 1
Where a number would appear in the flags, an asterisk (C<*>) may be
d3899 2
a3900 9
If a field width obtained through C<*> is negative, it has the same
effect as the C<-> flag: left-justification.

The C<v> flag is useful for displaying ordinal values of characters
in arbitrary strings:

    printf "version is v%vd\n", $^V;		# Perl's version
    printf "address is %*vX\n", ":", $addr;	# IPv6 address
    printf "bits are %*vb\n", " ", $bits;	# random bitstring
a3905 38
If Perl understands "quads" (64-bit integers) (this requires
either that the platform natively support quads or that Perl
be specifically compiled to support quads), the characters

	d u o x X b i D U O

print quads, and they may optionally be preceded by

	ll L q

For example

	%lld %16LX %qo

You can find out whether your Perl supports quads via L<Config>:

	use Config;
	($Config{use64bitint} eq 'define' || $Config{longsize} == 8) &&
		print "quads\n";

If Perl understands "long doubles" (this requires that the platform
support long doubles), the flags

	e f g E F G

may optionally be preceded by

	ll L

For example

	%llf %Lg

You can find out whether your Perl supports long doubles via L<Config>:

	use Config;
	$Config{d_longdbl} eq 'define' && print "long doubles\n";

d3921 1
a3921 1
Sets the random number seed for the C<rand> operator.  If EXPR is
d3925 1
a3925 1
seed was just the current C<time>.  This isn't a particularly good seed,
d3927 1
a3927 1
C<time ^ ($$ + ($$ << 15))>), but that isn't necessary any more.
d3929 1
a3929 1
In fact, it's usually not necessary to call C<srand> at all, because if
d3931 1
a3931 1
the C<rand> operator.  However, this was not the case in version of Perl
d3933 1
a3933 1
should call C<srand>.
d3945 1
a3945 1
Do I<not> call C<srand> multiple times in your program unless you know
d3947 1
a3947 1
function is to "seed" the C<rand> function so that C<rand> can produce
d3949 1
a3949 1
top of your program, or you I<won't> get random numbers out of C<rand>!
d3987 3
a3989 3
  8 atime    last access time in seconds since the epoch
  9 mtime    last modify time in seconds since the epoch
 10 ctime    inode change time (NOT creation time!) in seconds since the epoch
d4003 1
a4003 2
(This works on machines only for which the device number is negative
under NFS.)
d4012 2
a4013 1
In scalar context, C<stat> returns a boolean value indicating success
a4024 60
You can import symbolic mode constants (C<S_IF*>) and functions
(C<S_IS*>) from the Fcntl module:

    use Fcntl ':mode';

    $mode = (stat($filename))[2];

    $user_rwx      = ($mode & S_IRWXU) >> 6;
    $group_read    = ($mode & S_IRGRP) >> 3;
    $other_execute =  $mode & S_IXOTH;

    printf "Permissions are %04o\n", S_ISMODE($mode), "\n";

    $is_setuid     =  $mode & S_ISUID;
    $is_setgid     =  S_ISDIR($mode);

You could write the last two using the C<-u> and C<-d> operators.
The commonly available S_IF* constants are

    # Permissions: read, write, execute, for user, group, others.

    S_IRWXU S_IRUSR S_IWUSR S_IXUSR
    S_IRWXG S_IRGRP S_IWGRP S_IXGRP
    S_IRWXO S_IROTH S_IWOTH S_IXOTH

    # Setuid/Setgid/Stickiness.

    S_ISUID S_ISGID S_ISVTX S_ISTXT

    # File types.  Not necessarily all are available on your system.

    S_IFREG S_IFDIR S_IFLNK S_IFBLK S_ISCHR S_IFIFO S_IFSOCK S_IFWHT S_ENFMT

    # The following are compatibility aliases for S_IRUSR, S_IWUSR, S_IXUSR.

    S_IREAD S_IWRITE S_IEXEC

and the S_IF* functions are

    S_IFMODE($mode)	the part of $mode containg the permission bits
			and the setuid/setgid/sticky bits

    S_IFMT($mode)	the part of $mode containing the file type
			which can be bit-anded with e.g. S_IFREG 
                        or with the following functions

    # The operators -f, -d, -l, -b, -c, -p, and -s.

    S_ISREG($mode) S_ISDIR($mode) S_ISLNK($mode)
    S_ISBLK($mode) S_ISCHR($mode) S_ISFIFO($mode) S_ISSOCK($mode)

    # No direct -X operator counterpart, but for the first one
    # the -g operator is often equivalent.  The ENFMT stands for
    # record flocking enforcement, a platform-dependent feature.

    S_ISENFMT($mode) S_ISWHT($mode)

See your native chmod(2) and stat(2) documentation for more details
about the S_* constants.

d4033 1
a4033 1
frequencies in the string to be searched--you probably want to compare
d4037 2
a4038 2
one C<study> active at a time--if you study a different scalar the first
is "unstudied".  (The way C<study> works is this: a linked list of every
d4057 2
a4058 2
In searching for C</\bfoo\b/>, only those locations in C<$_> that contain C<f>
will be looked at, because C<f> is rarer than C<o>.  In general, this is
d4064 1
a4064 1
runtime, you can build an entire loop as a string and C<eval> that to
d4091 4
a4094 4
NAME (and possibly prototypes or attributes), it's just a forward declaration.
Without a NAME, it's an anonymous function declaration, and does actually
return a value: the CODE ref of the closure you just created.  See L<perlsub>
and L<perlref> for details.
d4096 1
a4096 1
=item substr EXPR,OFFSET,LENGTH,REPLACEMENT
d4098 1
a4098 1
=item substr EXPR,OFFSET,LENGTH
d4105 2
a4106 2
that far from the end of the string.  If LENGTH is omitted, returns
everything to the end of the string.  If LENGTH is negative, leaves that
d4109 4
d4114 2
a4115 2
must itself be an lvalue.  If you assign something shorter than LENGTH,
the string will shrink, and if you assign something longer than LENGTH,
d4117 1
a4117 14
length you may need to pad or chop your value using C<sprintf>.

If OFFSET and LENGTH specify a substring that is partly outside the
string, only the part within the string is returned.  If the substring
is beyond either end of the string, substr() returns the undefined
value and produces a warning.  When used as an lvalue, specifying a
substring that is entirely outside the string is a fatal error.
Here's an example showing the behavior for boundary cases:

    my $name = 'fred';
    substr($name, 4) = 'dy';		# $name is now 'freddy'
    my $null = substr $name, 6, 2;	# returns '' (no warning)
    my $oops = substr $name, 7;		# returns undef, with warning
    substr($name, 7) = 'gap';		# fatal error
d4142 1
a4142 1
string literal (or other read-only string) as an argument to C<syscall>
d4147 1
a4147 1
like numbers.  This emulates the C<syswrite> function (or vice versa):
d4157 1
a4157 1
If the system call fails, C<syscall> returns C<-1> and sets C<$!> (errno).
d4165 1
a4165 1
problem by using C<pipe> instead.
d4174 1
a4174 1
underlying operating system's C<open> function with the parameters
a4178 8
See the documentation of your operating system's C<open> to see which
values and flag bits are available.  You may combine several flags
using the C<|>-operator.

Some of the most common values are C<O_RDONLY> for opening the file in
read-only mode, C<O_WRONLY> for opening the file in write-only mode,
and C<O_RDWR> for opening the file in read-write mode, and.

d4185 1
a4185 1
If the file named by FILENAME does not exist and the C<open> call creates
d4188 1
a4188 1
the PERMS argument to C<sysopen>, Perl uses the octal value C<0666>.
d4192 1
a4192 8
In many systems the C<O_EXCL> flag is available for opening files in
exclusive mode.  This is B<not> locking: exclusiveness means here that
if the file already exists, sysopen() fails.  The C<O_EXCL> wins
C<O_TRUNC>.

Sometimes you may want to truncate an already-existing file: C<O_TRUNC>.

You should seldom if ever use C<0644> as argument to C<sysopen>, because
a4196 6
Note that C<sysopen> depends on the fdopen() C library function.
On many UNIX systems, fdopen() is known to fail when file descriptors
exceed a certain value, typically 255. If you need more file
descriptors than that, consider rebuilding Perl to use the C<sfio>
library, or perhaps using the POSIX::open() function.

d4205 2
a4206 2
so mixing this with other kinds of reads, C<print>, C<write>,
C<seek>, C<tell>, or C<eof> can cause confusion because stdio
d4226 8
a4233 9
bypasses stdio, so mixing this with reads (other than C<sysread>),
C<print>, C<write>, C<seek>, C<tell>, or C<eof> may cause confusion.
FILEHANDLE may be an expression whose value gives the name of the
filehandle.  The values for WHENCE are C<0> to set the new position to
POSITION, C<1> to set the it to the current position plus POSITION,
and C<2> to set it to EOF plus POSITION (typically negative).  For
WHENCE, you may also use the constants C<SEEK_SET>, C<SEEK_CUR>, and
C<SEEK_END> (start of the file, current position, end of the file)
from the Fcntl module.
d4236 2
a4237 2
of zero is returned as the string C<"0 but true">; thus C<sysseek> returns
true on success and false on failure, yet you can still easily determine
d4244 12
a4255 19
Does exactly the same thing as C<exec LIST>, except that a fork is
done first, and the parent process waits for the child process to
complete.  Note that argument processing varies depending on the
number of arguments.  If there is more than one argument in LIST,
or if LIST is an array with more than one value, starts the program
given by the first element of the list with arguments given by the
rest of the list.  If there is only one scalar argument, the argument
is checked for shell metacharacters, and if there are any, the
entire argument is passed to the system's command shell for parsing
(this is C</bin/sh -c> on Unix platforms, but varies on other
platforms).  If there are no shell metacharacters in the argument,
it is split into words and passed directly to C<execvp>, which is
more efficient.

Beginning with v5.6.0, Perl will attempt to flush all files opened for
output before any operation that may do a fork, but this may not be
supported on some platforms (see L<perlport>).  To be safe, you may need
to set C<$|> ($AUTOFLUSH in English) or call the C<autoflush()> method
of C<IO::Handle> on any open handles.
d4258 2
a4259 2
returned by the C<wait> call.  To get the actual exit value divide by
256.  See also L</exec>.  This is I<not> what you want to use to capture
d4261 1
a4261 2
C<qx//>, as described in L<perlop/"`STRING`">.  Return value of -1
indicates a failure to start the program (inspect $! for the reason).
d4263 2
a4264 2
Like C<exec>, C<system> allows you to lie to a program about its name if
you use the C<system PROGRAM LIST> syntax.  Again, see L</exec>.
d4266 1
a4266 1
Because C<system> and backticks block C<SIGINT> and C<SIGQUIT>, killing the
d4291 8
a4298 8
specified FILEHANDLE, using the system call write(2).  If LENGTH
is not specified, writes whole SCALAR.  It bypasses stdio, so mixing
this with reads (other than C<sysread())>, C<print>, C<write>,
C<seek>, C<tell>, or C<eof> may cause confusion because stdio
usually buffers data.  Returns the number of bytes actually written,
or C<undef> if there was an error.  If the LENGTH is greater than
the available data in the SCALAR after the OFFSET, only as much
data as is available will be written.
d4313 1
a4313 1
There is no C<systell> function.  Use C<sysseek(FH, 0, 1)> for that.
d4317 2
a4318 2
Returns the current position of the C<readdir> routines on DIRHANDLE.
Value may be given to C<seekdir> to access a particular location in a
d4327 1
a4327 1
of correct type.  Any additional arguments are passed to the C<new>
d4330 2
a4331 2
to the C<dbm_open()> function of C.  The object returned by the C<new>
method is also returned by the C<tie> function, which would be useful
d4334 1
a4334 1
Note that functions such as C<keys> and C<values> may return huge lists
d4336 1
a4336 1
C<each> function to iterate over such.  Example:
d4396 1
a4396 1
Unlike C<dbmopen>, the C<tie> function will not use or require a module
d4398 1
a4398 1
or the F<Config> module for interesting C<tie> implementations.
d4405 1
a4405 1
that was originally returned by the C<tie> call that bound the variable
d4414 1
a4414 6
Suitable for feeding to C<gmtime> and C<localtime>.

For measuring time in better granularity than one second,
you may use either the Time::HiRes module from CPAN, or
if you have gettimeofday(2), you may be able to use the
C<syscall> interface of Perl, see L<perlfaq8> for details.
d4425 1
a4425 1
The transliteration operator.  Same as C<y///>.  See L<perlop>.
d4433 1
a4433 1
on your system.  Returns true if successful, the undefined value
d4443 1
a4443 2
Under Unicode (C<use utf8>) it uses the standard Unicode uppercase mappings.  (It
does not attempt to do titlecase mapping on initial letters.  See C<ucfirst> for that.)
d4451 1
a4451 2
Returns the value of EXPR with the first character
in uppercase (titlecase in Unicode).  This is
d4453 1
a4453 2
Respects current LC_CTYPE locale if C<use locale> in force.  See L<perllocale>
and L<utf8>.
d4473 1
a4473 1
C<sysopen> C<0666> would create a file with mode C<0640> (C<0666 &~
d4477 2
a4478 2
files (in C<sysopen>) and one of C<0777> for directories (in
C<mkdir>) and executable files.  This gives users the freedom of
d4499 2
a4500 2
scalar value, an array (using C<@@>), a hash (using C<%>), a subroutine
(using C<&>), or a typeglob (using <*>).  (Saying C<undef $hash{$key}>
d4531 1
a4531 1
Note: C<unlink> will not delete directories unless you are superuser and
d4534 1
a4534 1
filesystem.  Use C<rmdir> instead.
d4540 4
a4543 10
C<unpack> does the reverse of C<pack>: it takes a string
and expands it out into a list of values.
(In scalar context, it returns merely the first value produced.)

The string is broken into chunks described by the TEMPLATE.  Each chunk
is converted separately to a value.  Typically, either the string is a result
of C<pack>, or the bytes of the string represent a C structure of some
kind.

The TEMPLATE has the same format as in the C<pack> function.
d4555 3
a4557 8
In addition to fields allowed in pack(), you may prefix a field with
a %<number> to indicate that
you want a <number>-bit checksum of the items instead of the items
themselves.  Default is a 16-bit checksum.  Checksum is calculated by
summing numeric values of expanded values (for string fields the sum of
C<ord($char)> is taken, for bit fields the sum of zeroes and ones).

For example, the following
d4560 4
a4563 4
    $checksum = do {
	local $/;  # slurp!
	unpack("%32C*",<>) % 65535;
    };
d4569 1
a4569 10
The C<p> and C<P> formats should be used with care.  Since Perl
has no way of checking whether the value passed to C<unpack()>
corresponds to a valid memory location, passing a pointer value that's
not known to be valid is likely to have disastrous consequences.

If the repeat count of a field is larger than what the remainder of
the input string allows, repeat count is decreased.  If the input string
is longer than one described by the TEMPLATE, the rest is ignored. 

See L</pack> for more examples and notes.
d4573 1
a4573 1
Breaks the binding between a variable and a package.  (See C<tie>.)
d4577 1
a4577 1
Does the opposite of a C<shift>.  Or the opposite of a C<push>,
d4584 1
a4584 1
prepended elements stay in the same order.  Use C<reverse> to do the
a4586 4
=item use Module VERSION LIST

=item use Module VERSION

d4591 2
d4603 7
a4609 16
VERSION, which can be specified as a literal of the form v5.6.1, demands
that the current version of Perl (C<$^V> or $PERL_VERSION) be at least
as recent as that version.  (For compatibility with older versions of Perl,
a numeric literal will also be interpreted as VERSION.)  If the version
of the running Perl interpreter is less than VERSION, then an error
message is printed and Perl exits immediately without attempting to
parse the rest of the file.  Compare with L</require>, which can do a
similar check at run time.

    use v5.6.1;		# compile time version check
    use 5.6.1;		# ditto
    use 5.005_03;	# float version allowed for compatibility

This is often useful if you need to check the current Perl version before
C<use>ing library modules that have changed in incompatible ways from
older versions of Perl.  (We try not to do this more than we have to.)
d4611 1
a4611 1
The C<BEGIN> forces the C<require> and C<import> to happen at compile time.  The
d4613 2
a4614 2
yet.  The C<import> is not a builtin--it's just an ordinary static method
call into the C<Module> package to tell the module to import the list of
d4616 5
a4620 4
C<import> method any way it likes, though most modules just choose to
derive their C<import> method via inheritance from the C<Exporter> class that
is defined in the C<Exporter> module.  See L<Exporter>.  If no C<import>
method can be found then the call is skipped.
d4633 3
a4635 6
the UNIVERSAL class, croaks if the given version is larger than the
value of the variable C<$Module::VERSION>. 

Again, there is a distinction between omitting LIST (C<import> called
with no arguments) and an explicit empty LIST C<()> (C<import> not
called).  Note that there is no comma after VERSION!
d4642 3
a4644 4
    use sigtrap  qw(SEGV BUS);
    use strict   qw(subs vars refs);
    use subs     qw(afunc blurfl);
    use warnings qw(all);
d4646 1
a4646 1
Some of these pseudo-modules import semantics into the current
d4651 2
a4652 2
There's a corresponding C<no> command that unimports meanings imported
by C<use>, i.e., it calls C<unimport Module LIST> instead of C<import>.
a4655 1
    no warnings;
d4657 1
a4657 1
If no C<unimport> method can be found the call fails with a fatal error.
d4666 2
a4667 2
successfully changed.  The inode change time of each file is set
to the current time.  This code has the same effect as the C<touch>
d4680 1
a4680 1
be the same order as either the C<keys> or C<each> function would
d4691 1
a4691 1
See also C<keys>, C<each>, and C<sort>.
d4695 6
a4700 23
Treats the string in EXPR as a bit vector made up of elements of
width BITS, and returns the value of the element specified by OFFSET
as an unsigned integer.  BITS therefore specifies the number of bits
that are reserved for each element in the bit vector.  This must
be a power of two from 1 to 32 (or 64, if your platform supports
that).

If BITS is 8, "elements" coincide with bytes of the input string.  

If BITS is 16 or more, bytes of the input string are grouped into chunks
of size BITS/8, and each group is converted to a number as with
pack()/unpack() with big-endian formats C<n>/C<N> (and analoguously
for BITS==64).  See L<"pack"> for details.

If bits is 4 or less, the string is broken into bytes, then the bits
of each byte are broken into 8/BITS groups.  Bits of a byte are
numbered in a little-endian-ish way, as in C<0x01>, C<0x02>,
C<0x04>, C<0x08>, C<0x10>, C<0x20>, C<0x40>, C<0x80>.  For example,
breaking the single input byte C<chr(0x36)> into two groups gives a list
C<(0x6, 0x3)>; breaking it into 4 groups gives C<(0x2, 0x1, 0x3, 0x0)>.

C<vec> may also be assigned to, in which case parentheses are needed
to give the expression the correct precedence as in
d4704 3
a4706 8
If the selected element is off the end of the string, the value 0 is
returned.  If an element off the end of the string is written to,
Perl will first extend the string with sufficiently many zero bytes.

Strings created with C<vec> can also be manipulated with the logical
operators C<|>, C<&>, C<^>, and C<~>.  These operators will assume a bit
vector operation is desired when both operands are strings.
See L<perlop/"Bitwise String Operators">.
d4709 1
a4709 1
The comments show the string after each step.  Note that this code works
a4713 4

    # $foo eq "Perl" eq "\x50\x65\x72\x6C", 32 bits
    print vec($foo, 0, 8);		# prints 80 == 0x50 == ord('P')

d4726 1
a4726 1
To transform a bit vector into a string or list of 0's and 1's, use these:
a4732 165
Here is an example to illustrate how the bits actually fall in place:

    #!/usr/bin/perl -wl

    print <<'EOT';
                                      0         1         2         3  
                       unpack("V",$_) 01234567890123456789012345678901
    ------------------------------------------------------------------
    EOT

    for $w (0..3) {
        $width = 2**$w;
        for ($shift=0; $shift < $width; ++$shift) {
            for ($off=0; $off < 32/$width; ++$off) {
                $str = pack("B*", "0"x32);
                $bits = (1<<$shift);
                vec($str, $off, $width) = $bits;
                $res = unpack("b*",$str);
                $val = unpack("V", $str);
                write;
            }
        }
    }

    format STDOUT =
    vec($_,@@#,@@#) = @@<< == @@######### @@>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    $off, $width, $bits, $val, $res
    .
    __END__

Regardless of the machine architecture on which it is run, the above
example should print the following table:

                                      0         1         2         3  
                       unpack("V",$_) 01234567890123456789012345678901
    ------------------------------------------------------------------
    vec($_, 0, 1) = 1   ==          1 10000000000000000000000000000000
    vec($_, 1, 1) = 1   ==          2 01000000000000000000000000000000
    vec($_, 2, 1) = 1   ==          4 00100000000000000000000000000000
    vec($_, 3, 1) = 1   ==          8 00010000000000000000000000000000
    vec($_, 4, 1) = 1   ==         16 00001000000000000000000000000000
    vec($_, 5, 1) = 1   ==         32 00000100000000000000000000000000
    vec($_, 6, 1) = 1   ==         64 00000010000000000000000000000000
    vec($_, 7, 1) = 1   ==        128 00000001000000000000000000000000
    vec($_, 8, 1) = 1   ==        256 00000000100000000000000000000000
    vec($_, 9, 1) = 1   ==        512 00000000010000000000000000000000
    vec($_,10, 1) = 1   ==       1024 00000000001000000000000000000000
    vec($_,11, 1) = 1   ==       2048 00000000000100000000000000000000
    vec($_,12, 1) = 1   ==       4096 00000000000010000000000000000000
    vec($_,13, 1) = 1   ==       8192 00000000000001000000000000000000
    vec($_,14, 1) = 1   ==      16384 00000000000000100000000000000000
    vec($_,15, 1) = 1   ==      32768 00000000000000010000000000000000
    vec($_,16, 1) = 1   ==      65536 00000000000000001000000000000000
    vec($_,17, 1) = 1   ==     131072 00000000000000000100000000000000
    vec($_,18, 1) = 1   ==     262144 00000000000000000010000000000000
    vec($_,19, 1) = 1   ==     524288 00000000000000000001000000000000
    vec($_,20, 1) = 1   ==    1048576 00000000000000000000100000000000
    vec($_,21, 1) = 1   ==    2097152 00000000000000000000010000000000
    vec($_,22, 1) = 1   ==    4194304 00000000000000000000001000000000
    vec($_,23, 1) = 1   ==    8388608 00000000000000000000000100000000
    vec($_,24, 1) = 1   ==   16777216 00000000000000000000000010000000
    vec($_,25, 1) = 1   ==   33554432 00000000000000000000000001000000
    vec($_,26, 1) = 1   ==   67108864 00000000000000000000000000100000
    vec($_,27, 1) = 1   ==  134217728 00000000000000000000000000010000
    vec($_,28, 1) = 1   ==  268435456 00000000000000000000000000001000
    vec($_,29, 1) = 1   ==  536870912 00000000000000000000000000000100
    vec($_,30, 1) = 1   == 1073741824 00000000000000000000000000000010
    vec($_,31, 1) = 1   == 2147483648 00000000000000000000000000000001
    vec($_, 0, 2) = 1   ==          1 10000000000000000000000000000000
    vec($_, 1, 2) = 1   ==          4 00100000000000000000000000000000
    vec($_, 2, 2) = 1   ==         16 00001000000000000000000000000000
    vec($_, 3, 2) = 1   ==         64 00000010000000000000000000000000
    vec($_, 4, 2) = 1   ==        256 00000000100000000000000000000000
    vec($_, 5, 2) = 1   ==       1024 00000000001000000000000000000000
    vec($_, 6, 2) = 1   ==       4096 00000000000010000000000000000000
    vec($_, 7, 2) = 1   ==      16384 00000000000000100000000000000000
    vec($_, 8, 2) = 1   ==      65536 00000000000000001000000000000000
    vec($_, 9, 2) = 1   ==     262144 00000000000000000010000000000000
    vec($_,10, 2) = 1   ==    1048576 00000000000000000000100000000000
    vec($_,11, 2) = 1   ==    4194304 00000000000000000000001000000000
    vec($_,12, 2) = 1   ==   16777216 00000000000000000000000010000000
    vec($_,13, 2) = 1   ==   67108864 00000000000000000000000000100000
    vec($_,14, 2) = 1   ==  268435456 00000000000000000000000000001000
    vec($_,15, 2) = 1   == 1073741824 00000000000000000000000000000010
    vec($_, 0, 2) = 2   ==          2 01000000000000000000000000000000
    vec($_, 1, 2) = 2   ==          8 00010000000000000000000000000000
    vec($_, 2, 2) = 2   ==         32 00000100000000000000000000000000
    vec($_, 3, 2) = 2   ==        128 00000001000000000000000000000000
    vec($_, 4, 2) = 2   ==        512 00000000010000000000000000000000
    vec($_, 5, 2) = 2   ==       2048 00000000000100000000000000000000
    vec($_, 6, 2) = 2   ==       8192 00000000000001000000000000000000
    vec($_, 7, 2) = 2   ==      32768 00000000000000010000000000000000
    vec($_, 8, 2) = 2   ==     131072 00000000000000000100000000000000
    vec($_, 9, 2) = 2   ==     524288 00000000000000000001000000000000
    vec($_,10, 2) = 2   ==    2097152 00000000000000000000010000000000
    vec($_,11, 2) = 2   ==    8388608 00000000000000000000000100000000
    vec($_,12, 2) = 2   ==   33554432 00000000000000000000000001000000
    vec($_,13, 2) = 2   ==  134217728 00000000000000000000000000010000
    vec($_,14, 2) = 2   ==  536870912 00000000000000000000000000000100
    vec($_,15, 2) = 2   == 2147483648 00000000000000000000000000000001
    vec($_, 0, 4) = 1   ==          1 10000000000000000000000000000000
    vec($_, 1, 4) = 1   ==         16 00001000000000000000000000000000
    vec($_, 2, 4) = 1   ==        256 00000000100000000000000000000000
    vec($_, 3, 4) = 1   ==       4096 00000000000010000000000000000000
    vec($_, 4, 4) = 1   ==      65536 00000000000000001000000000000000
    vec($_, 5, 4) = 1   ==    1048576 00000000000000000000100000000000
    vec($_, 6, 4) = 1   ==   16777216 00000000000000000000000010000000
    vec($_, 7, 4) = 1   ==  268435456 00000000000000000000000000001000
    vec($_, 0, 4) = 2   ==          2 01000000000000000000000000000000
    vec($_, 1, 4) = 2   ==         32 00000100000000000000000000000000
    vec($_, 2, 4) = 2   ==        512 00000000010000000000000000000000
    vec($_, 3, 4) = 2   ==       8192 00000000000001000000000000000000
    vec($_, 4, 4) = 2   ==     131072 00000000000000000100000000000000
    vec($_, 5, 4) = 2   ==    2097152 00000000000000000000010000000000
    vec($_, 6, 4) = 2   ==   33554432 00000000000000000000000001000000
    vec($_, 7, 4) = 2   ==  536870912 00000000000000000000000000000100
    vec($_, 0, 4) = 4   ==          4 00100000000000000000000000000000
    vec($_, 1, 4) = 4   ==         64 00000010000000000000000000000000
    vec($_, 2, 4) = 4   ==       1024 00000000001000000000000000000000
    vec($_, 3, 4) = 4   ==      16384 00000000000000100000000000000000
    vec($_, 4, 4) = 4   ==     262144 00000000000000000010000000000000
    vec($_, 5, 4) = 4   ==    4194304 00000000000000000000001000000000
    vec($_, 6, 4) = 4   ==   67108864 00000000000000000000000000100000
    vec($_, 7, 4) = 4   == 1073741824 00000000000000000000000000000010
    vec($_, 0, 4) = 8   ==          8 00010000000000000000000000000000
    vec($_, 1, 4) = 8   ==        128 00000001000000000000000000000000
    vec($_, 2, 4) = 8   ==       2048 00000000000100000000000000000000
    vec($_, 3, 4) = 8   ==      32768 00000000000000010000000000000000
    vec($_, 4, 4) = 8   ==     524288 00000000000000000001000000000000
    vec($_, 5, 4) = 8   ==    8388608 00000000000000000000000100000000
    vec($_, 6, 4) = 8   ==  134217728 00000000000000000000000000010000
    vec($_, 7, 4) = 8   == 2147483648 00000000000000000000000000000001
    vec($_, 0, 8) = 1   ==          1 10000000000000000000000000000000
    vec($_, 1, 8) = 1   ==        256 00000000100000000000000000000000
    vec($_, 2, 8) = 1   ==      65536 00000000000000001000000000000000
    vec($_, 3, 8) = 1   ==   16777216 00000000000000000000000010000000
    vec($_, 0, 8) = 2   ==          2 01000000000000000000000000000000
    vec($_, 1, 8) = 2   ==        512 00000000010000000000000000000000
    vec($_, 2, 8) = 2   ==     131072 00000000000000000100000000000000
    vec($_, 3, 8) = 2   ==   33554432 00000000000000000000000001000000
    vec($_, 0, 8) = 4   ==          4 00100000000000000000000000000000
    vec($_, 1, 8) = 4   ==       1024 00000000001000000000000000000000
    vec($_, 2, 8) = 4   ==     262144 00000000000000000010000000000000
    vec($_, 3, 8) = 4   ==   67108864 00000000000000000000000000100000
    vec($_, 0, 8) = 8   ==          8 00010000000000000000000000000000
    vec($_, 1, 8) = 8   ==       2048 00000000000100000000000000000000
    vec($_, 2, 8) = 8   ==     524288 00000000000000000001000000000000
    vec($_, 3, 8) = 8   ==  134217728 00000000000000000000000000010000
    vec($_, 0, 8) = 16  ==         16 00001000000000000000000000000000
    vec($_, 1, 8) = 16  ==       4096 00000000000010000000000000000000
    vec($_, 2, 8) = 16  ==    1048576 00000000000000000000100000000000
    vec($_, 3, 8) = 16  ==  268435456 00000000000000000000000000001000
    vec($_, 0, 8) = 32  ==         32 00000100000000000000000000000000
    vec($_, 1, 8) = 32  ==       8192 00000000000001000000000000000000
    vec($_, 2, 8) = 32  ==    2097152 00000000000000000000010000000000
    vec($_, 3, 8) = 32  ==  536870912 00000000000000000000000000000100
    vec($_, 0, 8) = 64  ==         64 00000010000000000000000000000000
    vec($_, 1, 8) = 64  ==      16384 00000000000000100000000000000000
    vec($_, 2, 8) = 64  ==    4194304 00000000000000000000001000000000
    vec($_, 3, 8) = 64  == 1073741824 00000000000000000000000000000010
    vec($_, 0, 8) = 128 ==        128 00000001000000000000000000000000
    vec($_, 1, 8) = 128 ==      32768 00000000000000010000000000000000
    vec($_, 2, 8) = 128 ==    8388608 00000000000000000000000100000000
    vec($_, 3, 8) = 128 == 2147483648 00000000000000000000000000000001

d4737 1
a4737 1
C<-1> if there are no child processes.  The status is returned in C<$?>.
d4767 2
a4768 2
Returns true if the context of the currently executing subroutine is
looking for a list value.  Returns false if the context is looking
a4775 2
This function should have been named wantlist() instead.

d4778 1
a4778 1
Produces a message on STDERR just like C<die>, but doesn't exit or throw
d4783 2
a4784 2
to C<$@@>.  This is useful for staying almost, but not entirely similar to
C<die>.
d4790 1
a4790 1
as it sees fit (like, for instance, converting it into a C<die>).  Most
d4792 1
a4792 1
warnings that they are not prepared to deal with, by calling C<warn>
d4799 1
a4799 1
instead call C<die> again to change it).
d4828 1
a4828 1
format for the current output channel (see the C<select> function) may be set
d4843 1
a4843 1
C<select> operator.  If the FILEHANDLE is an EXPR, then the expression
d4847 1
a4847 1
Note that write is I<not> the opposite of C<read>.  Unfortunately.
@


1.1.1.4
log
@stock perl 5.6.1
@
text
@d94 1
a94 1
=over 4
d149 1
a149 1
C<caller>, C<import>, C<local>, C<my>, C<our>, C<package>, C<use>
d153 1
a153 1
C<defined>, C<dump>, C<eval>, C<formline>, C<local>, C<my>, C<our>, C<reset>,
d203 2
a204 2
C<import>, C<lc>, C<lcfirst>, C<map>, C<my>, C<no>, C<our>, C<prototype>, 
C<qx>, C<qw>, C<readline>, C<readpipe>, C<ref>, C<sub*>, C<sysopen>, C<tie>,
d277 2
a278 2
    -z	File has zero size (is empty).
    -s	File has nonzero size (returns size in bytes).
d303 1
a303 1
	chomp;
d491 1
a491 1
data contains C<\cZ>, the I/O subsystem will regard it as the end of
d542 1
a542 1
C<eval EXPR> statement.  In particular, for an C<eval BLOCK> statement,
a544 1
frame.  C<$hasargs> is true if a new instance of C<@@_> was set up for the
a613 2
If VARIABLE is a hash, it chomps the hash's values, but not its keys.

d629 2
a630 1
chopped.  It is much more efficient than C<s/.$//s> because it neither
d632 1
a632 1
If VARIABLE is a hash, it chops the hash's values, but not its keys.
d634 10
a643 1
You can actually chop anything that's an lvalue, including an assignment.
a793 2
=item cos

d916 1
a916 4
declarations of C<&foo>.  Note that a subroutine which is not defined
may still be callable: its package may have an C<AUTOLOAD> method that
makes it spring into existence the first time that it is called -- see
L<perlsub>.
d1058 1
a1058 1
maintain arbitrary state about the nature of the exception.  Such a scheme
d1186 1
a1186 1
it.  When called in scalar context, returns only the key for the next
d1201 1
a1201 8
iterating over it, you may get entries skipped or duplicated, so
don't.  Exception: It is always safe to delete the item most recently
returned by C<each()>, which means that the following code will work:

        while (($key, $value) = each %hash) {
          print $key, "\n";
          delete $hash{$key};   # This is safe
        }
d1267 5
a1271 5
errors, executed in the lexical context of the current Perl program, so
that any variable settings or subroutine and format definitions remain
afterwards.  Note that the value is parsed every time the eval executes.
If EXPR is omitted, evaluates C<$_>.  This form is typically used to
delay parsing and subsequent execution of the text of EXPR until run time.
d1465 1
a1465 4
does not count as declaring it.  Note that a subroutine which does not
exist may still be callable: its package may have an C<AUTOLOAD>
method that makes it spring into existence the first time that it is
called -- see L<perlsub>.
d1866 1
a1866 1
cannot be trusted and therefore the $gcos is tainted (see
d1899 2
a1900 4
shadow versions if you're running under privilege or if there exists
the shadow(3) functions as found in System V ( this includes Solaris
and Linux.)  Those systems which implement a proprietary shadow password
facility are unlikely to be supported.
d1986 1
a1986 1
the year, in the range C<0..364> (or C<0..365> in leap years.)  
d2078 3
a2080 3
Note that C<$_> is an alias to the list value, so it can be used to
modify the elements of the LIST.  While this is useful and supported,
it can cause bizarre results if the elements of LIST are not variables.
d2108 1
a2108 1
for the package used.  See also L</use>, L<perlmod>, and L<Exporter>.
a2216 3
The returned values are copies of the original keys in the hash, so
modifying them will not affect the original hash.  Compare L</values>.

d2324 1
a2324 2
it succeeded, false otherwise.  See the example in 
L<perlipc/"Sockets: Client/Server Communication">.
d2329 2
a2330 2
what most people think of as "local".  See 
L<perlsub/"Private Variables via my()"> for details.
d2354 1
a2354 1
the year, in the range C<0..364> (or C<0..365> in leap years.)  $isdst
d2459 3
a2461 3
Note that C<$_> is an alias to the list value, so it can be used to
modify the elements of the LIST.  While this is useful and supported,
it can cause bizarre results if the elements of LIST are not variables.
a2465 23
C<{> starts both hash references and blocks, so C<map { ...> could be either
the start of map BLOCK LIST or map EXPR, LIST. Because perl doesn't look
ahead for the closing C<}> it has to take a guess at which its dealing with
based what it finds just after the C<{>. Usually it gets it right, but if it
doesn't it won't realize something is wrong until it gets to the C<}> and
encounters the missing (or unexpected) comma. The syntax error will be
reported close to the C<}> but you'll need to change something near the C<{>
such as using a unary C<+> to give perl some help:

    %hash = map {  "\L$_", 1  } @@array  # perl guesses EXPR.  wrong
    %hash = map { +"\L$_", 1  } @@array  # perl guesses BLOCK. right
    %hash = map { ("\L$_", 1) } @@array  # this also works
    %hash = map {  lc($_), 1  } @@array  # as does this.
    %hash = map +( lc($_), 1 ), @@array  # this is EXPR and works!

    %hash = map  ( lc($_), 1 ), @@array  # evaluates to (1, @@array)

or to force an anon hash constructor use C<+{>

   @@hashes = map +{ lc($_), 1 }, @@array # EXPR, so needs , at end

and you get list of anonymous hashes each with only 1 entry.

d2492 1
a2492 1
L<perlipc/"SysV IPC">, C<IPC::SysV>, and C<IPC::Semaphore> documentation.
d2497 2
a2498 2
id, or the undefined value if there is an error.  See also
L<perlipc/"SysV IPC"> and C<IPC::SysV> and C<IPC::Msg> documentation.
d2508 1
a2508 2
an error.  See also L<perlipc/"SysV IPC">, C<IPC::SysV>, and
C<IPC::SysV::Msg> documentation.
d2812 2
a2813 2
(this may not work on some bizarre filesystems).  One should
conscientiously choose between the I<magic> and 3-arguments form
d2835 1
a2835 1
    print HANDLE "stuff $$\n";
d2926 1
a2926 1
    A	An ASCII string, will be space padded.
d3146 2
a3147 2
 	0x12 0x34 0x56 0x78	# big-endian
 	0x78 0x56 0x34 0x12	# little-endian
d3149 4
a3152 4
Basically, the Intel and VAX CPUs are little-endian, while everybody
else, for example Motorola m68k/88k, PPC, Sparc, HP PA, Power, and
Cray are big-endian.  Alpha and MIPS can be either: Digital/Compaq
used/uses them in little-endian mode; SGI/Cray uses them in big-endian mode.
a3198 9
If the pattern begins with a C<U>, the resulting string will be treated
as Unicode-encoded. You can force UTF8 encoding on in a string with an
initial C<U0>, and the bytes that follow will be interpreted as Unicode
characters. If you don't want this to happen, you can begin your pattern
with C<C0> (or anything else) to force Perl not to UTF8 encode your
string, and then follow this with a C<U*> somewhere in your pattern.

=item *

d3269 2
a3272 2
=item package 

d3330 1
a3330 1
in question (C<$_> is used when the variable is not specified).  May be
d3423 1
a3423 1
Returns the value of EXPR with all non-"word"
d3450 6
a3455 7
specified FILEHANDLE.  Returns the number of bytes actually read, C<0>
at end of file, or undef if there was an error.  SCALAR will be grown
or shrunk to the length actually read.  If SCALAR needs growing, the
new bytes will be zero bytes.  An OFFSET may be specified to place
the read data into some other place in SCALAR than the beginning.
The call is actually implemented in terms of stdio's fread(3) call.
To get a true read(2) system call, see C<sysread>.
d3930 2
a3931 3
short integers, which may be created with C<pack("s!",(0)x$nsem)>.
See also L<perlipc/"SysV IPC">, C<IPC::SysV>, C<IPC::Semaphore>
documentation.
d3936 2
a3937 3
the undefined value if there is an error.  See also
L<perlipc/"SysV IPC">, C<IPC::SysV>, C<IPC::SysV::Semaphore>
documentation.
d3952 2
a3953 3
To signal the semaphore, replace C<-1> with C<1>.  See also
L<perlipc/"SysV IPC">, C<IPC::SysV>, and C<IPC::SysV::Semaphore>
documentation.
d3999 1
a3999 1
See also C<unshift>, C<push>, and C<pop>.  C<shift> and C<unshift> do the
d4013 1
a4013 1
See also L<perlipc/"SysV IPC"> and C<IPC::SysV> documentation.
d4019 1
a4019 1
See also L<perlipc/"SysV IPC"> and C<IPC::SysV> documentation.
d4031 2
a4032 2
shmread() taints the variable. See also L<perlipc/"SysV IPC">,
C<IPC::SysV> documentation, and the C<IPC::Shareable> module from CPAN.
d4082 1
a4082 1
See also the POSIX module's C<pause> function.
d4234 3
a4236 1
if you're in the C<main> package and type
d4238 3
a4240 1
    @@articles = sort {$b <=> $a} @@files;
d4242 1
a4242 2
then C<$a> and C<$b> are C<$main::a> and C<$main::b> (or C<$::a> and C<$::b>),
but if you're in the C<FooPack> package, it's the same as typing
d4301 5
a4305 3
In scalar context, returns the number of fields found and splits into
the C<@@_> array.  Use of split in scalar context is deprecated, however,
because it clobbers your subroutine arguments.
a4326 9
Empty leading (or trailing) fields are produced when there positive width
matches at the beginning (or end) of the string; a zero-width match at the
beginning (or end) of the string does not produce an empty field.  For
example:

   print join(':', split(/(?=\w)/, 'hi there!'));

produces the output 'h:i :t:h:e:r:e!'.

a4363 3
A PATTERN of C</^/> is treated as if it were C</^/m>, since it isn't
much use otherwise.

d4368 1
a4368 2
        chomp;
        ($login, $passwd, $uid, $gid,
d4373 2
d4378 3
a4380 12
Returns a string formatted by the usual C<printf> conventions of the C
library function C<sprintf>.  See below for more details
and see L<sprintf(3)> or L<printf(3)> on your system for an explanation of
the general principles.

For example:

        # Format number with up to 8 leading zeroes
        $result = sprintf("%08d", $number);

        # Round number to 3 digits after decimal point
        $rounded = sprintf("%.3f", $number);
a4387 6
Unlike C<printf>, C<sprintf> does not do what you probably mean when you
pass it an array as your first argument. The array is given scalar context,
and instead of using the 0th element of the array as the format, Perl will
use the count of elements in the array as the format, which is almost never
useful.

a4419 6
Note that the number of exponent digits in the scientific notation by
C<%e>, C<%E>, C<%g> and C<%G> for numbers with the modulus of the
exponent less than 100 is system-dependent: it may be three or less
(zero-padded as necessary).  In other words, 1.23 times ten to the
99th may be either "1.23e99" or "1.23e099".

d4657 1
a4657 1
    S_IFMODE($mode)	the part of $mode containing the permission bits
d5001 3
a5003 7
Returns the current position for FILEHANDLE, or -1 on error.  FILEHANDLE
may be an expression whose value gives the name of the actual filehandle.
If FILEHANDLE is omitted, assumes the file last read.  

The return value of tell() for the standard streams like the STDIN
depends on the operating system: it may return -1 or something else.
tell() on pipes, fifos, and sockets usually returns -1.
a5048 1
    UNTIE this
a5064 1
    UNTIE this
a5074 6
    BINMODE this
    EOF this
    FILENO this
    SEEK this, position, whence
    TELL this
    OPEN this, mode, LIST
a5076 1
    UNTIE this
a5083 1
    UNTIE this
d5352 1
a5352 2
If you do not want to call the package's C<import> method (for instance,
to stop your namespace from being altered), explicitly supply the empty list:
d5373 1
a5373 1
    use constant;
a5374 1
    use integer;
d5394 1
a5394 3
See L<perlmodlib> for a list of standard modules and pragmas.  See L<perlrun>
for the C<-M> and C<-m> command-line options to perl that give C<use>
functionality from the command-line.
d5418 3
a5420 2
Note that the values are not copied, which means modifying them will
modify the contents of the hash:
d5422 2
a5423 2
    for (values %hash) 	    { s/foo/bar/g }   # modifies %hash values
    for (@@hash{keys %hash}) { s/foo/bar/g }   # same
d5441 1
a5441 1
pack()/unpack() with big-endian formats C<n>/C<N> (and analogously
d5456 3
a5458 12
If the selected element is outside the string, the value 0 is returned.
If an element off the end of the string is written to, Perl will first
extend the string with sufficiently many zero bytes.   It is an error
to try to write off the beginning of the string (i.e. negative OFFSET).

The string should not contain any character with the value > 255 (which
can only happen if you're using UTF8 encoding).  If it does, it will be
treated as something which is not UTF8 encoded.  When the C<vec> was
assigned to, other parts of your program will also no longer consider the
string to be UTF8 encoded.  In other words, if you do have such characters
in your string, vec() will operate on the actual byte string, and not the
conceptual character string.
@


1.1.1.5
log
@stock perl 5.8.0 from CPAN
@
text
@d72 1
a72 1
A named array in scalar context is quite different from what would at
d139 2
a140 2
C<readlink>, C<rename>, C<rmdir>, C<stat>, C<symlink>, C<sysopen>,
C<umask>, C<unlink>, C<utime>
d203 1
a203 1
C<import>, C<lc>, C<lcfirst>, C<map>, C<my>, C<no>, C<our>, C<prototype>,
d237 2
a238 3
C<shmwrite>, C<socket>, C<socketpair>,
C<stat>, C<symlink>, C<syscall>, C<sysopen>, C<system>,
C<times>, C<truncate>, C<umask>, C<unlink>,
d293 1
a293 1
    -T	File is an ASCII text file (heuristic guess).
d296 1
a296 1
    -M	Script start time minus file modification time, in days.
d298 1
a298 1
    -C	Same for inode change time (Unix, may differ for other platforms)
d341 1
a341 1
or C<-B> is used on a filehandle, the current IO buffer is examined
d352 1
a352 3
symbolic link, not the real file.)  (Also, if the stat buffer was filled by
a C<lstat> call, C<-T> and C<-B> will reset it with the results of C<stat _>).
Example:
d388 8
a395 10
specified number of wallclock seconds have elapsed.  If SECONDS is not
specified, the value stored in C<$_> is used. (On some machines,
unfortunately, the elapsed time may be up to one second less or more
than you specified because of how seconds are counted, and process
scheduling may delay the delivery of the signal even further.)

Only one timer may be counting at once.  Each call disables the
previous timer, and an argument of C<0> may be supplied to cancel the
previous timer without starting a new one.  The returned value is the
amount of time remaining on the previous timer.
d400 2
a401 3
access setitimer(2) if your system supports it.  The Time::HiRes
module (from CPAN, and starting from Perl 5.8 part of the standard
distribution) may also prove useful.
d442 1
a442 1
=item binmode FILEHANDLE, LAYER
d446 21
a466 48
Arranges for FILEHANDLE to be read or written in "binary" or "text"
mode on systems where the run-time libraries distinguish between
binary and text files.  If FILEHANDLE is an expression, the value is
taken as the name of the filehandle.  Returns true on success,
C<undef> on failure.

If LAYER is omitted or specified as C<:raw> the filehandle is made
suitable for passing binary data. This includes turning off possible CRLF
translation and marking it as bytes (as opposed to Unicode characters).
Note that as desipite what may be implied in I<"Programming Perl">
(the Camel) or elsewhere C<:raw> is I<not> the simply inverse of C<:crlf>
-- other layers which would affect binary nature of the stream are
I<also> disabled. See L<PerlIO>, L<perlrun> and the discussion about the
PERLIO environment variable.

I<The LAYER parameter of the binmode() function is described as "DISCIPLINE"
in "Programming Perl, 3rd Edition".  However, since the publishing of this
book, by many known as "Camel III", the consensus of the naming of this
functionality has moved from "discipline" to "layer".  All documentation
of this version of Perl therefore refers to "layers" rather than to
"disciplines".  Now back to the regularly scheduled documentation...>

On some systems (in general, DOS and Windows-based systems) binmode()
is necessary when you're not working with a text file.  For the sake
of portability it is a good idea to always use it when appropriate,
and to never use it when it isn't appropriate.

In other words: regardless of platform, use binmode() on binary files
(like for example images).

If LAYER is present it is a single string, but may contain
multiple directives. The directives alter the behaviour of the
file handle. When LAYER is present using binmode on text
file makes sense.

To mark FILEHANDLE as UTF-8, use C<:utf8>.

The C<:bytes>, C<:crlf>, and C<:utf8>, and any other directives of the
form C<:...>, are called I/O I<layers>.  The C<open> pragma can be used to
establish default I/O layers.  See L<open>.

In general, binmode() should be called after open() but before any I/O
is done on the filehandle.  Calling binmode() will normally flush any
pending buffered output data (and perhaps pending input data) on the
handle.  An exception to this is the C<:encoding> layer that
changes the default character encoding of the handle, see L<open>.
The C<:encoding> layer sometimes needs to be called in
mid-stream, and it doesn't flush the stream.
d476 11
a486 10
Mac OS, all variants of Unix, and Stream_LF files on VMS use a single
character to end each line in the external representation of text (even
though that single character is CARRIAGE RETURN on Mac OS and LINE FEED
on Unix and most VMS files). In other systems like OS/2, DOS and the
various flavors of MS-Windows your program sees a C<\n> as a simple C<\cJ>,
but what's stored in text files are the two characters C<\cM\cJ>.  That
means that, if you don't use binmode() on these systems, C<\cM\cJ>
sequences on disk will be converted to C<\n> on input, and any C<\n> in
your program will be converted back to C<\cM\cJ> on output.  This is what
you want for text files, but it can be disastrous for binary files.
d544 5
a548 7
each C<use> statement creates a C<require> frame inside an C<eval EXPR>
frame.)  $subroutine may also be C<(unknown)> if this particular
subroutine happens to have been deleted from the symbol table.
C<$hasargs> is true if a new instance of C<@@_> was set up for the frame.
C<$hints> and C<$bitmask> contain pragmatic hints that the caller was
compiled with.  The C<$hints> and C<$bitmask> values are subject to change
between versions of Perl, and are not meant for external use.
d557 1
a557 1
C<< N > 1 >>.  In particular, C<@@DB::args> might have information from the
d562 1
a562 1
Changes the working directory to EXPR, if possible. If EXPR is omitted,
d564 3
a566 4
changes to the directory specified by C<$ENV{LOGDIR}>. (Under VMS, the
variable C<$ENV{SYS$LOGIN}> is also checked, and used if it is set.) If
neither is set, C<chdir> does nothing. It returns true upon success,
false otherwise. See the example under C<die>.
d593 1
a593 1
=item chomp( LIST )
d606 1
a606 1
remove anything.
a624 7
Note that parentheses are necessary when you're chomping anything
that is not a simple variable.  This is because C<chomp $cwd = `pwd`;>
is interpreted as C<(chomp $cwd) = `pwd`;>, rather than as
C<chomp( $cwd = `pwd` )> which you might expect.  Similarly,
C<chomp $a, $b> is interpreted as C<chomp($a), $b> rather than
as C<chomp($a, $b)>.

d627 1
a627 1
=item chop( LIST )
a643 2
See also L</chomp>.

d683 3
a685 6
chr(0x263a) is a Unicode smiley face.  Note that characters from 127
to 255 (inclusive) are by default not encoded in Unicode for backward
compatibility reasons (but see L<encoding>).

For the reverse, use L</ord>.
See L<perlunicode> and L<encoding> for more about Unicode.
d704 4
a707 4
Closes the file or pipe associated with the file handle, returning
true only if IO buffers are successfully flushed and closes the system
file descriptor.  Closes the currently selected filehandle if the
argument is omitted.
d717 1
a717 1
program exited non-zero C<$!> will be set to C<0>.)  Closing a pipe
d719 1
a719 1
want to look at the output of the pipe afterwards, and
d805 3
a807 4
Note that C<crypt> is intended to be a one-way function, much like
breaking eggs to make an omelette.  There is no (known) corresponding
decrypt function (in other words, the crypt() is a one-way hash
function).  As a result, this function isn't all that useful for
d810 6
a815 17
When verifying an existing encrypted string you should use the
encrypted text as the salt (like C<crypt($plain, $crypted) eq
$crypted>).  This allows your code to work with the standard C<crypt>
and with more exotic implementations.  In other words, do not assume
anything about the returned string itself, or how many bytes in
the encrypted string matter.

Traditionally the result is a string of 13 bytes: two first bytes of
the salt, followed by 11 bytes from the set C<[./0-9A-Za-z]>, and only
the first eight bytes of the encrypted string mattered, but
alternative hashing schemes (like MD5), higher level security schemes
(like C2), and implementations on non-UNIX platforms may produce
different strings.

When choosing a new salt create a random two character string whose
characters come from the set C<[./0-9A-Za-z]> (like C<join '', ('.',
'/', 0..9, 'A'..'Z', 'a'..'z')[rand 64, rand 64]>).
a842 7
If using crypt() on a Unicode string (which I<potentially> has
characters with codepoints above 255), Perl tries to make sense
of the situation by trying to downgrade (a copy of the string)
the string back to an eight-bit byte string before calling crypt()
(on that copy).  If that works, good.  If not, crypt() dies with
C<Wide character in crypt>.

d959 1
a959 1
the size of the array will shrink to the highest element that tests
d1023 10
a1032 10
If the last element of LIST does not end in a newline, the current
script line number and input line number (if any) are also printed,
and a newline is supplied.  Note that the "input line number" (also
known as "chunk") is subject to whatever notion of "line" happens to
be currently in effect, and is also available as the special variable
C<$.>.  See L<perlvar/"$/"> and L<perlvar/"$.">.

Hint: sometimes appending C<", stopped"> to your message will cause it
to make better sense when the string C<"at foo line 123"> is appended.
Suppose you are running script "canasta".
a1050 6
If LIST is empty and C<$@@> contains an object reference that has a
C<PROPAGATE> method, that method will be called with additional file
and line number parameters.  The return value replaces the value in
C<$@@>.  ie. as if C<<$@@ = eval { $@@->PROPAGATE(__FILE__, __LINE__) };>>
were called.

d1089 1
a1089 1
behavior may be fixed in a future release.
d1116 1
a1116 1
    eval `cat stat.pl`;
d1139 1
a1139 1
    # read in config files: system first, then user
d1141 1
a1141 1
               "$ENV{HOME}/.someprogrc")
d1166 1
a1166 1
resulting confusion on the part of Perl.
d1171 1
a1171 3
C code have superseded it.  That's why you should now invoke it as
C<CORE::dump()>, if you don't want to be warned against a possible
typo.
d1176 1
a1176 1
C<mod_perl> extension to B<Apache>, or the CPAN module, CGI::Fast.
d1178 1
a1178 1
make your program I<appear> to run faster.
d1237 1
a1237 4
available.   Similarly, an C<eof()> after C<< <> >> has returned
end-of-file will assume you are processing another C<@@ARGV> list,
and if you haven't set C<@@ARGV>, will read input from C<STDIN>;
see L<perlop/"I/O Operators">.
d1245 1
a1245 1
	next if /^\s*#/;	# skip comments
d1299 2
a1300 3
To do either of those, you have to use the C<$SIG{__WARN__}> facility, or
turn off warnings inside the BLOCK or EXPR using S<C<no warnings 'all'>>.
See L</warn>, L<perlvar>, L<warnings> and L<perllexwarn>.
d1399 1
a1399 1
words and passed directly to C<execvp>, which is more efficient.
d1541 1
a1541 1
Returns I<e> (the natural logarithm base) to the power of EXPR.
d1551 1
a1551 1
value return works just like C<ioctl> below.
d1576 1
a1576 1
You can use this to find out whether two handles refer to the
d1581 1
a1581 5
    }

(Filehandles connected to memory objects via new features of C<open> may
return undefined even though they are open.)

a1620 4
Note that the fcntl(2) emulation of flock(3) requires that FILEHANDLE
be open with read intent to use LOCK_SH and requires that it be open
with write intent to use LOCK_EX.

d1945 2
a1946 2
Even though it looks like they're the same method calls (uid),
they aren't, because a C<File::stat> object is different from
d1958 1
a1958 1
    printf "Connect to %s [%s]\n",
d1970 5
a1974 7
In list context, returns a (possibly empty) list of filename expansions on
the value of EXPR such as the standard Unix shell F</bin/csh> would do. In
scalar context, glob iterates through such filename expansions, returning
undef when the list is exhausted. This is the internal function
implementing the C<< <*.c> >> operator, but you can use it directly. If
EXPR is omitted, C<$_> is used.  The C<< <*.c> >> operator is discussed in
more detail in L<perlop/"I/O Operators">.
d1981 1
a1981 1
Converts a time as returned by the time function to an 8-element list
d1985 1
a1985 1
    #  0    1    2     3     4    5     6     7
d1996 1
a1996 1
the year, in the range C<0..364> (or C<0..365> in leap years.)
a2047 3
(The difference being that C does not offer named loops combined with
loop control.  Perl does, and this replaces most structured uses of C<goto>
in other languages.)
d2055 7
a2061 8
The C<goto-&NAME> form is quite different from the other forms of
C<goto>.  In fact, it isn't a goto in the normal sense at all, and
doesn't have the stigma associated with other gotos.  Instead, it
exits the current subroutine (losing any changes set by local()) and
immediately calls in its place the named subroutine using the current
value of @@_.  This is used by C<AUTOLOAD> subroutines that wish to
load another subroutine and then pretend that the other subroutine had
been called in the first place (except that any modifications to C<@@_>
d2111 1
a2111 2
integer overflow trigger a warning.  Leading whitespace is not stripped,
unlike oct().
d2162 1
a2162 1
C<ioctl>.
d2217 1
a2217 1
    while (@@keys) {
d2303 4
a2306 4
Returns a lowercased version of EXPR.  This is the internal function
implementing the C<\L> escape in double-quoted strings.  Respects
current LC_CTYPE locale if C<use locale> in force.  See L<perllocale>
and L<perlunicode> for more details about locale and Unicode support.
d2314 3
a2316 5
Returns the value of EXPR with the first character lowercased.  This
is the internal function implementing the C<\l> escape in
double-quoted strings.  Respects current LC_CTYPE locale if C<use
locale> in force.  See L<perllocale> and L<perlunicode> for more
details about locale and Unicode support.
d2325 1
a2325 1
omitted, returns length of C<$_>.  Note that this cannot be used on
d2332 1
a2332 1
success, false otherwise.
d2337 1
a2337 1
it succeeded, false otherwise.  See the example in
d2343 1
a2343 1
what most people think of as "local".  See
d2405 1
a2405 1
=item lock THING
d2407 1
a2407 2
This function places an advisory lock on a shared variable, or referenced
object contained in I<THING> until the lock goes out of scope.
d2409 6
a2414 4
lock() is a "weak keyword" : this means that if you've defined a function
by this name (before any calls to it), that function will be called
instead. (However, if you've said C<use threads>, lock() is always a
keyword.) See L<threads>.
d2428 1
a2428 1
    }
d2432 2
a2518 5
Note that according to the POSIX 1003.1-1996 the FILENAME may have any
number of trailing slashes.  Some operating and filesystems do not get
this right, so Perl automatically removes all trailing slashes to keep
everyone happy.

d2560 1
a2560 5
=item my TYPE EXPR

=item my EXPR : ATTRS

=item my TYPE EXPR : ATTRS
d2563 3
a2565 9
enclosing block, file, or C<eval>.  If more than one value is listed,
the list must be placed in parentheses.

The exact semantics and interface of TYPE and ATTRS are still
evolving.  TYPE is currently bound to the use of C<fields> pragma,
and attributes are handled using the C<attributes> pragma, or starting
from Perl 5.8.0 also via the C<Attribute::Handlers> module.  See
L<perlsub/"Private Variables via my()"> for details, and L<fields>,
L<attributes>, and L<Attribute::Handlers>.
a2592 4
=item no Module VERSION LIST

=item no Module VERSION

a2594 2
=item no Module

d2604 2
a2605 3
binary string.  Leading whitespace is ignored in all three cases.)
The following will handle decimal, binary, octal, and hex in the standard
Perl or C notation:
d2620 2
a2623 6
=item open FILEHANDLE,MODE,EXPR

=item open FILEHANDLE,MODE,EXPR,LIST

=item open FILEHANDLE,MODE,REFERENCE

d2627 22
a2648 4
FILEHANDLE.

(The following is a comprehensive reference to open(): for a gentler
introduction you may consider L<perlopentut>.)
d2650 2
a2651 28
If FILEHANDLE is an undefined lexical (C<my>) variable the variable is
assigned a reference to a new anonymous filehandle, otherwise if
FILEHANDLE is an expression, its value is used as the name of the real
filehandle wanted.  (This is considered a symbolic reference, so C<use
strict 'refs'> should I<not> be in effect.)

If EXPR is omitted, the scalar variable of the same name as the
FILEHANDLE contains the filename.  (Note that lexical variables--those
declared with C<my>--will not work for this purpose; so if you're
using C<my>, specify EXPR in your call to open.)

If three or more arguments are specified then the mode of opening and
the file name are separate. If MODE is C<< '<' >> or nothing, the file
is opened for input.  If MODE is C<< '>' >>, the file is truncated and
opened for output, being created if necessary.  If MODE is C<<< '>>' >>>,
the file is opened for appending, again being created if necessary.

You can put a C<'+'> in front of the C<< '>' >> or C<< '<' >> to
indicate that you want both read and write access to the file; thus
C<< '+<' >> is almost always preferred for read/write updates--the C<<
'+>' >> mode would clobber the file first.  You can't usually use
either read-write mode for updating textfiles, since they have
variable length records.  See the B<-i> switch in L<perlrun> for a
better approach.  The file is created with permissions of C<0666>
modified by the process' C<umask> value.

These various prefixes correspond to the fopen(3) modes of C<'r'>,
C<'r+'>, C<'w'>, C<'w+'>, C<'a'>, and C<'a+'>.
d2655 1
a2655 2
spaces.  It is possible to omit the mode in these forms if the mode is
C<< '<' >>.
d2666 8
a2673 16
For three or more arguments if MODE is C<'|-'>, the filename is
interpreted as a command to which output is to be piped, and if MODE
is C<'-|'>, the filename is interpreted as a command which pipes
output to us.  In the 2-arguments (and 1-argument) form one should
replace dash (C<'-'>) with the command.
See L<perlipc/"Using open() for IPC"> for more examples of this.
(You are not allowed to C<open> to a command that pipes both in I<and>
out, but see L<IPC::Open2>, L<IPC::Open3>, and
L<perlipc/"Bidirectional Communication"> for alternatives.)

In the three-or-more argument form of pipe opens, if LIST is specified
(extra arguments after the command name) then LIST becomes arguments
to the command invoked if the platform supports it.  The meaning of
C<open> with more than three arguments for non-pipe modes is not yet
specified. Experimental "layers" may give extra LIST arguments
meaning.
d2676 1
a2676 1
and opening C<< '>-' >> opens STDOUT.
d2678 12
a2689 23
You may use the three-argument form of open to specify IO "layers"
(sometimes also referred to as "disciplines") to be applied to the handle
that affect how the input and output are processed (see L<open> and
L<PerlIO> for more details). For example

  open(FH, "<:utf8", "file")

will open the UTF-8 encoded file containing Unicode characters,
see L<perluniintro>. (Note that if layers are specified in the
three-arg form then default layers set by the C<open> pragma are
ignored.)

Open returns nonzero upon success, the undefined value otherwise.  If
the C<open> involved a pipe, the return value happens to be the pid of
the subprocess.

If you're running Perl on a system that distinguishes between text
files and binary files, then you should check out L</binmode> for tips
for dealing with this.  The key distinction between systems that need
C<binmode> and those that don't is their text file formats.  Systems
like Unix, Mac OS, and Plan 9, which delimit lines with a single
character, and which encode that character in C as C<"\n">, do not
need C<binmode>.  The rest need it.
a2698 17
As a special case the 3 arg form with a read/write mode and the third
argument being C<undef>:

    open(TMP, "+>", undef) or die ...

opens a filehandle to an anonymous temporary file.

File handles can be opened to "in memory" files held in Perl scalars via:

    open($fh, '>', \$variable) || ..

Though if you try to re-open C<STDOUT> or C<STDERR> as an "in memory"
file, you have to close it first:

    close STDOUT;
    open STDOUT, '>', \$variable or die "Can't open STDOUT: $!";

a2722 5
    # in memory files
    open(MEMORY,'>', \$var)
	or die "Can't open memory file: $!";
    print MEMORY "foo!\n";			# output will end up in $var

d2754 2
a2755 2
IO buffers.) If you use the 3 arg form then you can pass either a number,
the name of a filehandle or the normal "reference to a glob".
d2757 2
a2758 2
Here is a script that saves, redirects, and restores C<STDOUT> and
C<STDERR> using various methods:
d2761 2
a2762 2
    open my $oldout, ">&STDOUT"     or die "Can't dup STDOUT: $!";
    open OLDERR,     ">&", \*STDERR or die "Can't dup STDERR: $!";
d2764 2
a2765 2
    open STDOUT, '>', "foo.out" or die "Can't redirect STDOUT: $!";
    open STDERR, ">&STDOUT"     or die "Can't dup STDOUT: $!";
d2767 2
a2768 2
    select STDERR; $| = 1;	# make unbuffered
    select STDOUT; $| = 1;	# make unbuffered
d2773 2
a2774 2
    close STDOUT;
    close STDERR;
d2776 2
a2777 2
    open STDOUT, ">&", $oldout or die "Can't dup \$oldout: $!";
    open STDERR, ">&OLDERR"    or die "Can't dup OLDERR: $!";
d2782 3
a2784 3
If you specify C<< '<&=N' >>, where C<N> is a number, then Perl will
do an equivalent of C's C<fdopen> of that file descriptor; this is
more parsimonious of file descriptors.  For example:
d2788 2
a2789 6
or

    open(FILEHANDLE, "<&=", $fd)

Note that if Perl is using the standard C libraries' fdopen() then on
many UNIX systems, fdopen() is known to fail when file descriptors
d2791 2
a2792 5
descriptors than that, consider rebuilding Perl to use the C<PerlIO>.

You can see whether Perl has been compiled with PerlIO or not by
running C<perl -V> and looking for C<useperlio=> line.  If C<useperlio>
is C<define>, you have PerlIO, otherwise you don't.
a2810 1
    open(FOO, '|-', "tr", '[a-z]', '[A-Z]');
a2814 6
    open(FOO, '-|', "cat", '-n', $file);

The last example in each block shows the pipe as "list form", which is
not yet supported on all platforms.  A good rule of thumb is that if
your platform has true C<fork()> (in other words, if your platform is
UNIX) you can use the list form.
d2824 3
a2826 3
On systems that support a close-on-exec flag on files, the flag will
be set for the newly opened file descriptor as determined by the value
of $^F.  See L<perlvar/$^F>.
d2831 4
a2834 3
The filename passed to 2-argument (or 1-argument) form of open() will
have leading and trailing whitespace deleted, and the normal
redirection characters honored.  This property, known as "magic open",
d2907 3
a2909 6
Returns the numeric (the native 8-bit encoding, like ASCII or EBCDIC,
or Unicode) value of the first character of EXPR.  If EXPR is omitted,
uses C<$_>.

For the reverse, see L</chr>.
See L<perlunicode> and L<encoding> for more about Unicode.
a2912 6
=item our EXPR TYPE

=item our EXPR : ATTRS

=item our TYPE EXPR : ATTRS

a2950 29
An C<our> declaration may also have a list of attributes associated
with it.

The exact semantics and interface of TYPE and ATTRS are still
evolving.  TYPE is currently bound to the use of C<fields> pragma,
and attributes are handled using the C<attributes> pragma, or starting
from Perl 5.8.0 also via the C<Attribute::Handlers> module.  See
L<perlsub/"Private Variables via my()"> for details, and L<fields>,
L<attributes>, and L<Attribute::Handlers>.

The only currently recognized C<our()> attribute is C<unique> which
indicates that a single copy of the global is to be used by all
interpreters should the program happen to be running in a
multi-interpreter environment. (The default behaviour would be for
each interpreter to have its own copy of the global.)  Examples:

    our @@EXPORT : unique = qw(foo);
    our %EXPORT_TAGS : unique = (bar => [qw(aa bb cc)]);
    our $VERSION : unique = "1.00";

Note that this attribute also has the effect of making the global
readonly when the first new interpreter is cloned (for example,
when the first new thread is created).

Multi-interpreter environments can come to being either through the
fork() emulation on Windows platforms, or by embedding perl in a
multi-threaded application.  The C<unique> attribute does nothing in
all other environments.

d2959 3
a2961 2
The TEMPLATE is a sequence of characters that give the order and type
of values, as follows:
d2964 2
a2965 2
    A	A text (ASCII) string, will be space padded.
    Z	A null terminated (ASCIZ) string, will be null padded.
a3006 3
    j   A signed integer value (a Perl internal integer, IV).
    J   An unsigned integer value (a Perl internal unsigned integer, UV).

a3009 7
    F	A floating point value in the native native format
           (a Perl internal floating point value, NV).
    D	A long double-precision float in the native format.
	  (Long doubles are available only if your system supports long
	   double values _and_ if Perl has been compiled to support those.
           Causes a fatal error otherwise.)

d3014 2
a3015 2
    U	A Unicode character number.  Encodes to UTF-8 internally
	(or UTF-EBCDIC in EBCDIC platforms).
a3024 1
    (	Start of a ()-group.
d3034 5
a3038 14
C<H>, C<@@>, C<x>, C<X> and C<P> the pack function will gobble up that
many values from the LIST.  A C<*> for the repeat count means to use
however many items are left, except for C<@@>, C<x>, C<X>, where it is
equivalent to C<0>, and C<u>, where it is equivalent to 1 (or 45, what
is the same).  A numeric repeat count may optionally be enclosed in
brackets, as in C<pack 'C[80]', @@arr>.

One can replace the numeric repeat count by a template enclosed in brackets;
then the packed length of this template in bytes is used as a count.
For example, C<x[L]> skips a long (it skips the number of bytes in a long);
the template C<$t X[$t] $t> unpack()s twice what $t unpacks.
If the template in brackets contains alignment commands (such as C<x![d]>),
its packed length is calculated as if the start of the template has the maximal
possible alignment.
d3127 5
a3131 4
The I<length-item> can be any C<pack> template letter, and describes
how the length value is packed.  The ones likely to be of most use are
integer-packing ones like C<n> (for Java strings), C<w> (for ASN.1 or
SNMP) and C<N> (for Sun XDR).
d3174 1
a3174 1
not support long longs.)
d3178 1
a3178 1
The integer formats C<s>, C<S>, C<i>, C<I>, C<l>, C<L>, C<j>, and C<J>
d3181 1
a3181 1
4-byte integer 0x12345678 (305419896 decimal) would be ordered natively
d3190 1
a3190 2
used/uses them in little-endian mode; SGI/Cray uses them in big-endian
mode.
d3217 1
a3217 1
C<v>, and C<V>, their byte endianness and size are known.
a3253 18
A ()-group is a sub-TEMPLATE enclosed in parentheses.  A group may
take a repeat count, both as postfix, and via the C</> template
character.

=item *

C<x> and C<X> accept C<!> modifier.  In this case they act as
alignment commands: they jump forward/back to the closest position
aligned at a multiple of C<count> bytes.  For example, to pack() or
unpack() C's C<struct {char c; double d; char cc[2]}> one may need to
use the template C<C x![d] d C[2]>; this assumes that doubles must be
aligned on the double's size.

For alignment commands C<count> of 0 is equivalent to C<count> of 1;
both result in no-ops.

=item *

d3318 1
a3318 1
=item package
d3337 2
a3338 4
identifiers must be fully qualified or lexicals.  However, you are
strongly advised not to make use of this feature. Its use can cause
unexpected behaviour, even crashing some versions of Perl. It is
deprecated, and will be removed from a future release.
d3348 1
a3348 1
IO buffering, so you may need to set C<$|> to flush your WRITEHANDLE
d3421 3
a3423 4
of the list will be interpreted as the C<printf> format. See C<sprintf>
for an explanation of the format argument. If C<use locale> is in effect,
the character used for the decimal point in formatted real numbers is
affected by the LC_NUMERIC locale.  See L<perllocale>.
d3485 2
a3486 11
omitted, the value C<1> is used.  Currently EXPR with the value C<0> is
also special-cased as C<1> - this has not been documented before perl 5.8.0
and is subject to change in future versions of perl.  Automatically calls
C<srand> unless C<srand> has already been called.  See also C<srand>.

Apply C<int()> to the value returned by C<rand()> if you want random
integers instead of random fractional numbers.  For example,

    int(rand(10))

returns a random integer between C<0> and C<9>, inclusive.
d3496 8
a3503 15
Attempts to read LENGTH I<characters> of data into variable SCALAR
from the specified FILEHANDLE.  Returns the number of characters
actually read, C<0> at end of file, or undef if there was an error.
SCALAR will be grown or shrunk to the length actually read.  If SCALAR
needs growing, the new bytes will be zero bytes.  An OFFSET may be
specified to place the read data into some other place in SCALAR than
the beginning.  The call is actually implemented in terms of either
Perl's or system's fread() call.  To get a true read(2) system call,
see C<sysread>.

Note the I<characters>: depending on the status of the filehandle,
either (8-bit) bytes or characters are read.  By default all
filehandles operate on bytes, but for example if the filehandle has
been opened with the C<:utf8> I/O layer (see L</open>, and the C<open>
pragma, L<open>), the I/O will operate on characters, not bytes.
d3562 8
a3569 14
Receives a message on a socket.  Attempts to receive LENGTH characters
of data into variable SCALAR from the specified SOCKET filehandle.
SCALAR will be grown or shrunk to the length actually read.  Takes the
same flags as the system call of the same name.  Returns the address
of the sender if SOCKET's protocol supports this; returns an empty
string otherwise.  If there's an error, returns the undefined value.
This call is actually implemented in terms of recvfrom(2) system call.
See L<perlipc/"UDP: Message Passing"> for examples.

Note the I<characters>: depending on the status of the socket, either
(8-bit) bytes or characters are received.  By default all sockets
operate on bytes, but for example if the socket has been changed using
binmode() to operate with the C<:utf8> I/O layer (see the C<open>
pragma, L<open>), the I/O will operate on characters, not bytes.
d3637 1
a3637 1
    }
d3659 2
a3660 2
Demands a version of Perl specified by VERSION, or demands some semantics
specified by EXPR or by C<$_> if EXPR is not supplied.
d3662 6
a3667 10
VERSION may be either a numeric argument such as 5.006, which will be
compared to C<$]>, or a literal of the form v5.6.1, which will be compared
to C<$^V> (aka $PERL_VERSION).  A fatal error is produced at run time if
VERSION is greater than the version of the current Perl interpreter.
Compare with L</use>, which can do a similar check at compile time.

Specifying VERSION as a literal of the form v5.6.1 should generally be
avoided, because it leads to misleading error messages under earlier
versions of Perl which do not support this syntax.  The equivalent numeric
version should be used instead.
d3671 1
a3671 1
    require 5.006_001;	# ditto; preferred for backwards compatibility
d3713 1
a3713 1
        require Foo::Bar;    # a splendid bareword
d3715 1
a3715 1
The require function will actually look for the "F<Foo/Bar.pm>" file in the
d3725 1
a3725 1
The require function will look for the "F<Foo::Bar>" file in the @@INC array and
a3729 54
You can also insert hooks into the import facility, by putting directly
Perl code into the @@INC array.  There are three forms of hooks: subroutine
references, array references and blessed objects.

Subroutine references are the simplest case.  When the inclusion system
walks through @@INC and encounters a subroutine, this subroutine gets
called with two parameters, the first being a reference to itself, and the
second the name of the file to be included (e.g. "F<Foo/Bar.pm>").  The
subroutine should return C<undef> or a filehandle, from which the file to
include will be read.  If C<undef> is returned, C<require> will look at
the remaining elements of @@INC.

If the hook is an array reference, its first element must be a subroutine
reference.  This subroutine is called as above, but the first parameter is
the array reference.  This enables to pass indirectly some arguments to
the subroutine.

In other words, you can write:

    push @@INC, \&my_sub;
    sub my_sub {
	my ($coderef, $filename) = @@_;	# $coderef is \&my_sub
	...
    }

or:

    push @@INC, [ \&my_sub, $x, $y, ... ];
    sub my_sub {
	my ($arrayref, $filename) = @@_;
	# Retrieve $x, $y, ...
	my @@parameters = @@$arrayref[1..$#$arrayref];
	...
    }

If the hook is an object, it must provide an INC method, that will be
called as above, the first parameter being the object itself.  (Note that
you must fully qualify the sub's name, as it is always forced into package
C<main>.)  Here is a typical code layout:

    # In Foo.pm
    package Foo;
    sub new { ... }
    sub Foo::INC {
	my ($self, $filename) = @@_;
	...
    }

    # In the main program
    push @@INC, new Foo(...);

Note that these hooks are also permitted to set the %INC entry
corresponding to the files they have loaded. See L<perlvar/%INC>.

d3759 1
a3759 1
Returns from a subroutine, C<eval>, or C<do FILE> with the value
d3766 1
a3766 1
(Note that in the absence of an explicit C<return>, a subroutine, eval,
d3848 6
a3853 12
filehandle.  The values for WHENCE are C<0> to set the new position
I<in bytes> to POSITION, C<1> to set it to the current position plus
POSITION, and C<2> to set it to EOF plus POSITION (typically
negative).  For WHENCE you may use the constants C<SEEK_SET>,
C<SEEK_CUR>, and C<SEEK_END> (start of the file, current position, end
of the file) from the Fcntl module.  Returns C<1> upon success, C<0>
otherwise.

Note the I<in bytes>: even if the filehandle has been set to
operate on characters (for example by using the C<:utf8> open
layer), tell() will return byte offsets, not character offsets
(because implementing that would render seek() and tell() rather slow).
d3872 2
a3873 2
If that doesn't work (some IO implementations are particularly
cantankerous), then you may need something more like this:
d3956 1
a3956 1
capable of returning the $timeleft.  If not, they always return
a3962 3
Note that whether C<select> gets restarted after signals (say, SIGALRM)
is implementation-dependent.

d3992 1
a3992 1
such as signalling and waiting.  OPSTRING must be a packed array of
d3994 1
a3994 1
C<pack("s!3", $semnum, $semop, $semflag)>.  The number of semaphore
d3999 1
a3999 1
    $semop = pack("s!3", $semnum, -1, 0);
d4010 6
a4015 14
Sends a message on a socket.  Attempts to send the scalar MSG to the
SOCKET filehandle.  Takes the same flags as the system call of the
same name.  On unconnected sockets you must specify a destination to
send TO, in which case it does a C C<sendto>.  Returns the number of
characters sent, or the undefined value if there is an error.  The C
system call sendmsg(2) is currently unimplemented.  See
L<perlipc/"UDP: Message Passing"> for examples.

Note the I<characters>: depending on the status of the socket, either
(8-bit) bytes or characters are sent.  By default all sockets operate
on bytes, but for example if the socket has been changed using
binmode() to operate with the C<:utf8> I/O layer (see L</open>, or
the C<open> pragma, L<open>), the I/O will operate on characters, not
bytes.
d4096 1
a4096 1
It's also a more insistent form of close because it also
d4130 2
a4131 3
it, or else see L</select> above.  The Time::HiRes module (from CPAN,
and starting from Perl 5.8 part of the standard distribution) may also
help.
d4166 1
a4166 3
See L<perlipc> for an example of socketpair use.  Perl 5.8 and later will
emulate socketpair using IP sockets to localhost if your system implements
sockets but not socketpair.
d4174 10
a4183 12
In list context, this sorts the LIST and returns the sorted list value.
In scalar context, the behaviour of C<sort()> is undefined.

If SUBNAME or BLOCK is omitted, C<sort>s in standard string comparison
order.  If SUBNAME is specified, it gives the name of a subroutine
that returns an integer less than, equal to, or greater than C<0>,
depending on how the elements of the list are to be ordered.  (The C<<
<=> >> and C<cmp> operators are extremely useful in such routines.)
SUBNAME may be a scalar variable name (unsubscripted), in which case
the value provides the name of (or a reference to) the actual
subroutine to use.  In place of a SUBNAME, you can provide a BLOCK as
an anonymous, in-line sort subroutine.
a4201 14
Perl 5.6 and earlier used a quicksort algorithm to implement sort.
That algorithm was not stable, and I<could> go quadratic.  (A I<stable> sort
preserves the input order of elements that compare equal.  Although
quicksort's run time is O(NlogN) when averaged over all arrays of
length N, the time can be O(N**2), I<quadratic> behavior, for some
inputs.)  In 5.7, the quicksort implementation was replaced with
a stable mergesort algorithm whose worst case behavior is O(NlogN).
But benchmarks indicated that for some inputs, on some platforms,
the original quicksort was faster.  5.8 has a sort pragma for
limited control of the sort.  Its rather blunt control of the
underlying algorithm may not persist into future perls, but the
ability to characterize the input or output in implementation
independent ways quite probably will.  See L</use>.

a4282 8
    # guarantee stability, regardless of algorithm
    use sort 'stable';
    @@new = sort { substr($a, 3, 5) cmp substr($b, 3, 5) } @@old;

    # force use of mergesort (not portable outside Perl 5.8)
    use sort '_mergesort';  # note discouraging _
    @@new = sort { substr($a, 3, 5) cmp substr($b, 3, 5) } @@old;

d4314 2
a4315 5
If LENGTH is negative, removes the elements from OFFSET onward
except for -LENGTH elements at the end of the array.
If both OFFSET and LENGTH are omitted, removes everything. If OFFSET is
past the end of the array, perl issues a warning, and splices at the
end of the array.
d4358 5
a4362 9
If LIMIT is specified and positive, it represents the maximum number
of fields the EXPR will be split into, though the actual number of
fields returned depends on the number of times PATTERN matches within
EXPR.  If LIMIT is unspecified or zero, trailing null fields are
stripped (which potential users of C<pop> would do well to remember).
If LIMIT is negative, it is treated as if an arbitrarily large LIMIT
had been specified.  Note that splitting an EXPR that evaluates to the
empty string always returns the empty list, regardless of the LIMIT
specified.
d4373 1
a4373 5
Using the empty pattern C<//> specifically matches the null string, and is
not be confused with the use of C<//> to mean "the last successful pattern
match".

Empty leading (or trailing) fields are produced when there are positive width
a4431 5
As with regular pattern matching, any capturing parentheses that are not
matched in a C<split()> will be set to C<undef> when returned:

    @@fields = split /(A)|B/, "1A2B3";
    # @@fields is (1, 'A', 2, undef, 3)
d4481 1
a4481 1
        into the next variable in the parameter list
d4492 2
a4493 2
Note that the number of exponent digits in the scientific notation produced
by C<%e>, C<%E>, C<%g> and C<%G> for numbers with the modulus of the
d4498 2
a4499 3
Between the C<%> and the format letter, you may specify a number of
additional attributes controlling the interpretation of the format.
In order, these are:
a4500 14
=over 4

=item format parameter index

An explicit format parameter index, such as C<2$>. By default sprintf
will format the next unused argument in the list, but this allows you
to take the arguments out of order. Eg:

  printf '%2$d %1$d', 12, 34;      # prints "34 12"
  printf '%3$d %d %1$d', 1, 2, 3;  # prints "3 1 1"

=item flags

one or more of:
d4505 20
a4524 46
   #       prefix non-zero octal with "0", non-zero hex with "0x",
           non-zero binary with "0b"

For example:

  printf '<% d>', 12;   # prints "< 12>"
  printf '<%+d>', 12;   # prints "<+12>"
  printf '<%6s>', 12;   # prints "<    12>"
  printf '<%-6s>', 12;  # prints "<12    >"
  printf '<%06s>', 12;  # prints "<000012>"
  printf '<%#x>', 12;   # prints "<0xc>"

=item vector flag

The vector flag C<v>, optionally specifying the join string to use.
This flag tells perl to interpret the supplied string as a vector
of integers, one for each character in the string, separated by
a given string (a dot C<.> by default). This can be useful for
displaying ordinal values of characters in arbitrary strings:

  printf "version is v%vd\n", $^V;     # Perl's version

Put an asterisk C<*> before the C<v> to override the string to
use to separate the numbers:

  printf "address is %*vX\n", ":", $addr;   # IPv6 address
  printf "bits are %0*v8b\n", " ", $bits;   # random bitstring

You can also explicitly specify the argument number to use for
the join string using eg C<*2$v>:

  printf '%*4$vX %*4$vX %*4$vX', @@addr[1..3], ":";   # 3 IPv6 addresses

=item (minimum) width

Arguments are usually formatted to be only as wide as required to
display the given value. You can override the width by putting
a number here, or get the width from the next argument (with C<*>)
or from a specified argument (with eg C<*2$>):

  printf '<%s>', "a";       # prints "<a>"
  printf '<%6s>', "a";      # prints "<     a>"
  printf '<%*s>', 6, "a";   # prints "<     a>"
  printf '<%*2$s>', "a", 6; # prints "<     a>"
  printf '<%2s>', "long";   # prints "<long>" (does not truncate)

d4528 2
a4529 31
=item precision, or maximum width

You can specify a precision (for numeric conversions) or a maximum
width (for string conversions) by specifying a C<.> followed by a number.
For floating point formats, this specifies the number of decimal places
to show (the default being 6), eg:

  # these examples are subject to system-specific variation
  printf '<%f>', 1;    # prints "<1.000000>"
  printf '<%.1f>', 1;  # prints "<1.0>"
  printf '<%.0f>', 1;  # prints "<1>"
  printf '<%e>', 10;   # prints "<1.000000e+01>"
  printf '<%.1e>', 10; # prints "<1.0e+01>"

For integer conversions, specifying a precision implies that the
output of the number itself should be zero-padded to this width:

  printf '<%.6x>', 1;      # prints "<000001>"
  printf '<%#.6x>', 1;     # prints "<0x000001>"
  printf '<%-10.6x>', 1;   # prints "<000001    >"

For string conversions, specifying a precision truncates the string
to fit in the specified width:

  printf '<%.5s>', "truncated";   # prints "<trunc>"
  printf '<%10.5s>', "truncated"; # prints "<     trunc>"

You can also get the precision from the next argument using C<.*>:

  printf '<%.6x>', 1;       # prints "<000001>"
  printf '<%.*x>', 6, 1;    # prints "<000001>"
d4531 3
a4533 62
You cannot currently get the precision from a specified number,
but it is intended that this will be possible in the future using
eg C<.*2$>:

  printf '<%.*2$x>', 1, 6;   # INVALID, but in future will print "<000001>"

=item size

For numeric conversions, you can specify the size to interpret the
number as using C<l>, C<h>, C<V>, C<q>, C<L> or C<ll>. For integer
conversions, numbers are usually assumed to be whatever the default
integer size is on your platform (usually 32 or 64 bits), but you
can override this to use instead one of the standard C types, as
supported by the compiler used to build Perl:

   l           interpret integer as C type "long" or "unsigned long"
   h           interpret integer as C type "short" or "unsigned short"
   q, L or ll  interpret integer as C type "long long" or "unsigned long long"
               (if your platform supports such a type, else it is an error)

For floating point conversions, numbers are usually assumed to be
the default floating point size on your platform (double or long double),
but you can force 'long double' with C<q>, C<L> or C<ll> if your
platform supports them.

The size specifier 'V' has no effect for Perl code, but it supported
for compatibility with XS code; it means 'use the standard size for
a Perl integer (or floating-point number)', which is already the
default for Perl code.

=item order of arguments

Normally, sprintf takes the next unused argument as the value to
format for each format specification. If the format specification
uses C<*> to require additional arguments, these are consumed from
the argument list in the order in which they appear in the format
specification I<before> the value to format. Where an argument is
specified using an explicit index, this does not affect the normal
order for the arguments (even when the explicitly specified index
would have been the next argument in any case).

So:

  printf '<%*.*s>', $a, $b, $c;

would use C<$a> for the width, C<$b> for the precision and C<$c>
as the value to format, while:

  print '<%*1$.*s>', $a, $b;

would use C<$a> for the width and the precision, and C<$b> as the
value to format.

Here are some more examples - beware that when using an explicit
index, the C<$> may need to be escaped:

  printf "%2\$d %d\n",    12, 34;		# will print "34 12\n"
  printf "%2\$d %d %d\n", 12, 34;		# will print "34 12 34\n"
  printf "%3\$d %d %d\n", 12, 34, 56;		# will print "56 12 34\n"
  printf "%2\$*3\$d %d\n", 12, 34, 3;		# will print " 34 12\n"

=back
d4592 13
a4604 36
Sets the random number seed for the C<rand> operator.

The point of the function is to "seed" the C<rand> function so that
C<rand> can produce a different sequence each time you run your
program.

If srand() is not called explicitly, it is called implicitly at the
first use of the C<rand> operator.  However, this was not the case in
versions of Perl before 5.004, so if your script will run under older
Perl versions, it should call C<srand>.

Most programs won't even call srand() at all, except those that
need a cryptographically-strong starting point rather than the
generally acceptable default, which is based on time of day,
process ID, and memory allocation, or the F</dev/urandom> device,
if available.

You can call srand($seed) with the same $seed to reproduce the
I<same> sequence from rand(), but this is usually reserved for
generating predictable results for testing or debugging.
Otherwise, don't call srand() more than once in your program.

Do B<not> call srand() (i.e. without an argument) more than once in
a script.  The internal state of the random number generator should
contain more entropy than can be provided by any seed, so calling
srand() again actually I<loses> randomness.

Most implementations of C<srand> take an integer and will silently
truncate decimal numbers.  This means C<srand(42)> will usually
produce the same results as C<srand(42.1)>.  To be safe, always pass
C<srand> an integer.

In versions of Perl prior to 5.004 the default seed was just the
current C<time>.  This isn't a particularly good seed, so many old
programs supply their own seed value (often C<time ^ $$> or C<time ^
($$ + ($$ << 15))>), but that isn't necessary any more.
d4616 6
d4660 1
a4660 1
 10 ctime    inode change time in seconds since the epoch (*)
a4665 4
(*) The ctime field is non-portable, in particular you cannot expect
it to be a "creation time", see L<perlport/"Files and Filesystems">
for details.

d4678 1
a4678 1
should mask off the file type portion and (s)printf using a C<"%o">
d4692 1
a4692 1
    printf "File is %s, size is %s, perm %04o, mtime %s\n",
d4739 1
a4739 1
			which can be bit-anded with e.g. S_IFREG
d4815 1
a4815 1
=item sub NAME BLOCK
d4817 1
a4817 1
=item sub NAME (PROTO) BLOCK
d4819 1
a4819 1
=item sub NAME : ATTRS BLOCK
d4821 5
a4825 10
=item sub NAME (PROTO) : ATTRS BLOCK

This is subroutine definition, not a real function I<per se>.
Without a BLOCK it's just a forward declaration.  Without a NAME,
it's an anonymous function declaration, and does actually return
a value: the CODE ref of the closure you just created.

See L<perlsub> and L<perlref> for details about subroutines and
references, and L<attributes> and L<Attribute::Handlers> for more
information about attributes.
d4904 1
a4904 1
to retrieve the file number of the other end.  You can avoid this
d4964 8
a4971 14
Attempts to read LENGTH I<characters> of data into variable SCALAR from
the specified FILEHANDLE, using the system call read(2).  It bypasses
buffered IO, so mixing this with other kinds of reads, C<print>,
C<write>, C<seek>, C<tell>, or C<eof> can cause confusion because
stdio usually buffers data.  Returns the number of characters actually
read, C<0> at end of file, or undef if there was an error.  SCALAR
will be grown or shrunk so that the last byte actually read is the
last byte of the scalar after the read.

Note the I<characters>: depending on the status of the filehandle,
either (8-bit) bytes or characters are read.  By default all
filehandles operate on bytes, but for example if the filehandle has
been opened with the C<:utf8> I/O layer (see L</open>, and the C<open>
pragma, L<open>), the I/O will operate on characters, not bytes.
d4975 4
a4978 4
placement at that many characters counting backwards from the end of
the string.  A positive OFFSET greater than the length of SCALAR
results in the string being padded to the required size with C<"\0">
bytes before the result of the read is appended.
d4986 10
a4995 23
Sets FILEHANDLE's system position I<in bytes> using the system call
lseek(2).  FILEHANDLE may be an expression whose value gives the name
of the filehandle.  The values for WHENCE are C<0> to set the new
position to POSITION, C<1> to set the it to the current position plus
POSITION, and C<2> to set it to EOF plus POSITION (typically
negative).

Note the I<in bytes>: even if the filehandle has been set to operate
on characters (for example by using the C<:utf8> I/O layer), tell()
will return byte offsets, not character offsets (because implementing
that would render sysseek() very slow).

sysseek() bypasses normal buffered io, so mixing this with reads (other
than C<sysread>, for example &gt;&lt or read()) C<print>, C<write>,
C<seek>, C<tell>, or C<eof> may cause confusion.

For WHENCE, you may also use the constants C<SEEK_SET>, C<SEEK_CUR>,
and C<SEEK_END> (start of the file, current position, end of the file)
from the Fcntl module.  Use of the constants is also more portable
than relying on 0, 1, and 2.  For example to define a "systell" function:

	use Fnctl 'SEEK_CUR';
	sub systell { sysseek($_[0], 0, SEEK_CUR) }
d5026 3
a5028 3
The return value is the exit status of the program as returned by the
C<wait> call.  To get the actual exit value shift right by eight (see below).
See also L</exec>.  This is I<not> what you want to use to capture
d5036 2
a5037 3
Because C<system> and backticks block C<SIGINT> and C<SIGQUIT>,
killing the program they're running doesn't actually interrupt
your program.
a5049 3
or more portably by using the W*() calls of the POSIX extension;
see L<perlport> for more information.

d5060 9
a5068 9
Attempts to write LENGTH characters of data from variable SCALAR to
the specified FILEHANDLE, using the system call write(2).  If LENGTH
is not specified, writes whole SCALAR.  It bypasses buffered IO, so
mixing this with reads (other than C<sysread())>, C<print>, C<write>,
C<seek>, C<tell>, or C<eof> may cause confusion because stdio usually
buffers data.  Returns the number of characters actually written, or
C<undef> if there was an error.  If the LENGTH is greater than the
available data in the SCALAR after the OFFSET, only as much data as is
available will be written.
d5072 2
a5073 8
that many characters counting backwards from the end of the string.
In the case the SCALAR is empty you can use OFFSET but only zero offset.

Note the I<characters>: depending on the status of the filehandle,
either (8-bit) bytes or characters are written.  By default all
filehandles operate on bytes, but for example if the filehandle has
been opened with the C<:utf8> I/O layer (see L</open>, and the open
pragma, L<open>), the I/O will operate on characters, not bytes.
d5079 3
a5081 9
Returns the current position I<in bytes> for FILEHANDLE, or -1 on
error.  FILEHANDLE may be an expression whose value gives the name of
the actual filehandle.  If FILEHANDLE is omitted, assumes the file
last read.

Note the I<in bytes>: even if the filehandle has been set to
operate on characters (for example by using the C<:utf8> open
layer), tell() will return byte offsets, not character offsets
(because that would render seek() and tell() rather slow).
a5088 6
Do not use tell() on a filehandle that has been opened using
sysopen(), use sysseek() for that as described above.  Why?  Because
sysopen() creates unbuffered, "raw", filehandles, while open() creates
buffered filehandles.  sysseek() make sense only on the first kind,
tell() only makes sense on the second kind.

d5196 1
a5196 1
considers to be the epoch (that's 00:00:00, January 1, 1904 for Mac OS,
a5211 2
In scalar context, C<times> returns C<$user>.

a5224 3
The behavior is undefined if LENGTH is greater than the length of the
file.

d5230 4
a5233 5
implementing the C<\U> escape in double-quoted strings.  Respects
current LC_CTYPE locale if C<use locale> in force.  See L<perllocale>
and L<perlunicode> for more details about locale and Unicode support.
It does not attempt to do titlecase mapping on initial letters.  See
C<ucfirst> for that.
d5241 5
a5245 5
Returns the value of EXPR with the first character in uppercase
(titlecase in Unicode).  This is the internal function implementing
the C<\u> escape in double-quoted strings.  Respects current LC_CTYPE
locale if C<use locale> in force.  See L<perllocale> and L<perlunicode>
for more details about locale and Unicode support.
d5379 1
a5379 1
is longer than one described by the TEMPLATE, the rest is ignored.
a5385 1
Has no effect if the variable is not tied.
d5393 1
a5393 1
    unshift(@@ARGV, '-e') unless $ARGV[0] =~ /^-/;
d5417 8
a5424 11
VERSION may be either a numeric argument such as 5.006, which will be
compared to C<$]>, or a literal of the form v5.6.1, which will be compared
to C<$^V> (aka $PERL_VERSION.  A fatal error is produced if VERSION is
greater than the version of the current Perl interpreter; Perl will not
attempt to parse the rest of the file.  Compare with L</require>, which can
do a similar check at run time.

Specifying VERSION as a literal of the form v5.6.1 should generally be
avoided, because it leads to misleading error messages under earlier
versions of Perl which do not support this syntax.  The equivalent numeric
version should be used instead.
d5428 1
a5428 1
    use 5.006_001;	# ditto; preferred for backwards compatibility
d5457 1
a5457 1
value of the variable C<$Module::VERSION>.
a5472 1
    use sort     qw(stable _quicksort _mergesort);
d5486 2
a5504 7
If the first two elements of the list are C<undef>, then the utime(2)
function in the C library will be called with a null second argument.
On most systems, this will set the file's access and modification
times to the current time.  (i.e. equivalent to the example above.)

    utime undef, undef, @@ARGV;

d5532 1
a5532 1
If BITS is 8, "elements" coincide with bytes of the input string.
d5603 1
a5603 1
                                      0         1         2         3
d5631 1
a5631 1
                                      0         1         2         3
d5780 3
a5782 3
    do {
	$kid = waitpid(-1, WNOHANG);
    } until $kid > 0;
@


1.1.1.6
log
@perl 5.8.2 from CPAN
@
text
@d227 2
a228 2
C<fcntl>, C<flock>, C<fork>, C<getgrent>, C<getgrgid>, C<gethostbyname>,
C<gethostent>, C<getlogin>, C<getnetbyaddr>, C<getnetbyname>, C<getnetent>,
d249 1
a249 1
=item -X FILEHANDLE
d251 1
a251 1
=item -X EXPR
d253 1
a253 1
=item -X
a431 2
For more information see L<perlipc>.

d456 1
a456 14
otherwise it returns C<undef> and sets C<$!> (errno).

On some systems (in general, DOS and Windows-based systems) binmode()
is necessary when you're not working with a text file.  For the sake
of portability it is a good idea to always use it when appropriate,
and to never use it when it isn't appropriate.  Also, people can
set their I/O to be by default UTF-8 encoded Unicode, not bytes.

In other words: regardless of platform, use binmode() on binary data,
like for example images.

If LAYER is present it is a single string, but may contain multiple
directives. The directives alter the behaviour of the file handle.
When LAYER is present using binmode on text file makes sense.
d461 2
a462 2
Note that, despite what may be implied in I<"Programming Perl"> (the
Camel) or elsewhere, C<:raw> is I<not> the simply inverse of C<:crlf>
a466 4
The C<:bytes>, C<:crlf>, and C<:utf8>, and any other directives of the
form C<:...>, are called I/O I<layers>.  The C<open> pragma can be used to
establish default I/O layers.  See L<open>.

d474 13
d489 4
d499 1
a499 3
mid-stream, and it doesn't flush the stream.  The C<:encoding>
also implicitly pushes on top of itself the C<:utf8> layer because
internally Perl will operate on UTF-8 encoded Unicode characters.
d727 3
a729 5
chr(0x263a) is a Unicode smiley face.  Note that characters from 128
to 255 (inclusive) are by default not encoded in UTF-8 Unicode for
backward compatibility reasons (but see L<encoding>).

If NUMBER is omitted, uses C<$_>.
d732 1
d734 1
a734 4
Note that under the C<bytes> pragma the NUMBER is masked to
the low eight bits.

See L<perlunicode> and L<encoding> for more about Unicode.
d793 3
d852 1
a852 1
Note that L<crypt|/crypt> is intended to be a one-way function, much like
d860 1
a860 1
$crypted>).  This allows your code to work with the standard L<crypt|/crypt>
d874 1
a874 4
'/', 0..9, 'A'..'Z', 'a'..'z')[rand 64, rand 64]>).  This set of
characters is just a recommendation; the characters allowed in
the salt depend solely on your system's crypt library, and Perl can't
restrict what salts C<crypt()> accepts.
d896 1
a896 1
The L<crypt|/crypt> function is unsuitable for encrypting large quantities
d977 1
a977 1
declarations of C<&func>.  Note that a subroutine which is not defined
d1120 1
a1120 1
C<$@@>.  ie. as if C<< $@@ = eval { $@@->PROPAGATE(__FILE__, __LINE__) }; >>
d1262 3
a1264 5
order is subject to change in future versions of perl, but it is
guaranteed to be in the same order as either the C<keys> or C<values>
function would produce on the same (unmodified) hash.  Since Perl
5.8.1 the ordering is different even between different runs of Perl
for security reasons (see L<perlsec/"Algorithmic Complexity Attacks">).
d1330 1
a1330 1
	if (eof()) {		# check for end of last file
d1332 2
a1335 1
	last if eof();          # needed if we're reading from a terminal
a1451 5
Note that as a very special case, an C<eval ''> executed within the C<DB>
package doesn't see the usual surrounding lexical scope, but rather the
scope of the first non-DB piece of code that called it. You don't normally
need to worry about this unless you are writing a Perl debugger.

d1636 1
a1636 1
You don't have to check for C<defined> on the return from C<fcntl>.
a1645 12
Here's an example of setting a filehandle named C<REMOTE> to be
non-blocking at the system level.  You'll have to negotiate C<$|>
on your own, though.

    use Fcntl qw(F_GETFL F_SETFL O_NONBLOCK);

    $flags = fcntl(REMOTE, F_GETFL, 0)
                or die "Can't get flags for the socket: $!\n";

    $flags = fcntl(REMOTE, F_SETFL, $flags | O_NONBLOCK)
                or die "Can't set flags for the socket: $!\n";

d1811 5
a1815 5
or the undefined value at end of file, or if there was an error (in
the latter case C<$!> is set).  If FILEHANDLE is omitted, reads from
STDIN.  This is not particularly efficient.  However, it cannot be
used by itself to fetch single characters without waiting for the user
to hit enter.  For that, try something more like:
a1875 7
Note for Linux users: on Linux, the C functions C<getpid()> and
C<getppid()> return different values from different threads. In order to
be portable, this behavior is not reflected by the perl-level function
C<getppid()>, that returns a consistent value across threads. If you want
to call the underlying C<getppid()>, you may use the CPAN module
C<Linux::Pid>.

d1972 1
a1972 1
    $name  = getgrgid($num);
d2271 1
a2271 1
The special string C<"0 but true"> is exempt from B<-w> complaints
d2274 12
d2298 7
a2304 13
Returns a list consisting of all the keys of the named hash.
(In scalar context, returns the number of keys.)

The keys are returned in an apparently random order.  The actual
random order is subject to change in future versions of perl, but it
is guaranteed to be the same order as either the C<values> or C<each>
function produces (given that the hash has not been modified).  Since
Perl 5.8.1 the ordering is different even between different runs of
Perl for security reasons (see L<perlsec/"Algorithmic Complexity
Attacks">).

As a side effect, calling keys() resets the HASH's internal iterator,
see L</each>.
d2357 1
a2357 1
useful way to check that a child process is alive and hasn't changed
d2365 1
a2365 3
use a signal name in quotes.

See L<perlipc/"Signals"> for more details.
d2419 1
a2419 1
Returns the length in I<characters> of the value of EXPR.  If EXPR is
a2423 4
Note the I<characters>: if the EXPR is in Unicode, you will get the
number of characters, not the number of bytes.  To get the length
in bytes, use C<do { use bytes; length(EXPR) }>, see L<bytes>.

d2533 1
a2533 2
your system, a normal C<stat> is done.  For much more detailed
information, please see the documentation for L</stat>.
d2708 1
a2708 1
See the C<use> function, which C<no> is the opposite of.
d2750 5
a2754 5
If FILEHANDLE is an undefined scalar variable (or array or hash element)
the variable is assigned a reference to a new anonymous filehandle,
otherwise if FILEHANDLE is an expression, its value is used as the name of
the real filehandle wanted.  (This is considered a symbolic reference, so
C<use strict 'refs'> should I<not> be in effect.)
d2850 1
a2850 4
opens a filehandle to an anonymous temporary file.  Also using "+<"
works for symmetry, but you really should consider writing something
to the temporary file first.  You will need to seek() to do the
reading.
d2916 8
a2923 8
with C<< '>&' >>, in which case the rest of the string is interpreted
as the name of a filehandle (or file descriptor, if numeric) to be
duped (as L<dup(2)>) and opened.  You may use C<&> after C<< > >>,
C<<< >> >>>, C<< < >>, C<< +> >>, C<<< +>> >>>, and C<< +< >>.
The mode you specify should match the mode of the original filehandle.
(Duping a filehandle does not take into account any existing contents
of IO buffers.) If you use the 3 arg form then you can pass either a
number, the name of a filehandle or the normal "reference to a glob".
d2950 3
a2952 4
If you specify C<< '<&=X' >>, where C<X> is a file descriptor number
or a filehandle, then Perl will do an equivalent of C's C<fdopen> of
that file descriptor (and not call L<dup(2)>); this is more
parsimonious of file descriptors.  For example:
a2953 1
    # open for input, reusing the fileno of $fd
d2960 4
a2963 22
or

    # open for append, using the fileno of OLDFH
    open(FH, ">>&=", OLDFH)

or

    open(FH, ">>&=OLDFH")

Being parsimonious on filehandles is also useful (besides being
parsimonious) for example when something is dependent on file
descriptors, like for example locking using flock().  If you do just
C<< open(A, '>>&B') >>, the filehandle A will not have the same file
descriptor as B, and therefore flock(A) will not flock(B), and vice
versa.  But with C<< open(A, '>>&=B') >> the filehandles will share
the same file descriptor.

Note that if you are using Perls older than 5.8.0, Perl will be using
the standard C libraries' fdopen() to implement the "=" functionality.
On many UNIX systems fdopen() fails when file descriptors exceed a
certain value, typically 255.  For Perls 5.8.0 and later, PerlIO is
most often the default.
a3081 4
DIRHANDLE may be an expression whose value can be used as an indirect
dirhandle, usually the real dirhandle name.  If DIRHANDLE is an undefined
scalar variable (or array or hash element), the variable is assigned a
reference to a new anonymous dirhandle.
d3252 1
a3252 2
    @@	Null fill to absolute position, counted from the start of
        the innermost ()-group.
d3370 3
a3372 5
For C<pack>, the I<string-item> must, at present, be C<"A*">, C<"a*"> or
C<"Z*">. For C<unpack> the length of the string is obtained from the
I<length-item>, but if you put in the '*' it will be ignored. For all other
codes, C<unpack> applies the length value to the next item, which must not
have a repeat count.
d3410 1
a3410 1
(The C<$Config{longlongsize}> will be undefined if your system does
d3475 6
a3480 7
If the pattern begins with a C<U>, the resulting string will be
treated as UTF-8-encoded Unicode. You can force UTF-8 encoding on in a
string with an initial C<U0>, and the bytes that follow will be
interpreted as Unicode characters. If you don't want this to happen,
you can begin your pattern with C<C0> (or anything else) to force Perl
not to UTF-8 encode your string, and then follow this with a C<U*>
somewhere in your pattern.
d3493 2
a3494 8
take a repeat count, both as postfix, and for unpack() also via the C</>
template character. Within each repetition of a group, positioning with
C<@@> starts again at 0. Therefore, the result of

    pack( '@@1A((@@2A)@@3A)', 'a', 'b', 'c' )

is the string "\0a\0\0bc".

a3510 2
White space may be used to separate pack codes from each other, but
a C<!> modifier and a repeat count must follow immediately.
d3766 7
a3772 14
actually read, C<0> at end of file, or undef if there was an error (in
the latter case C<$!> is also set).  SCALAR will be grown or shrunk 
so that the last character actually read is the last character of the
scalar after the read.

An OFFSET may be specified to place the read data at some place in the
string other than the beginning.  A negative OFFSET specifies
placement at that many characters counting backwards from the end of
the string.  A positive OFFSET greater than the length of SCALAR
results in the string being padded to the required size with C<"\0">
bytes before the result of the read is appended.

The call is actually implemented in terms of either Perl's or system's
fread() call.  To get a true read(2) system call, see C<sysread>.
d3778 1
a3778 3
pragma, L<open>), the I/O will operate on UTF-8 encoded Unicode
characters, not bytes.  Similarly for the C<:encoding> pragma:
in that case pretty much any characters can be read.
a3814 15
If readline encounters an operating system error, C<$!> will be set with the
corresponding error message.  It can be helpful to check C<$!> when you are
reading from filehandles you don't trust, such as a tty or a socket.  The
following example uses the operator form of C<readline>, and takes the necessary
steps to ensure that C<readline> was successful.

    for (;;) {
        undef $!;
        unless (defined( $line = <> )) {
            die $! if $!;
            last; # reached EOF
        }
        # ...
    }

d3850 1
a3850 3
pragma, L<open>), the I/O will operate on UTF-8 encoded Unicode
characters, not bytes.  Similarly for the C<:encoding> pragma:
in that case pretty much any characters can be read.
d3894 1
a3894 2
Returns a non-empty string if EXPR is a reference, the empty
string otherwise. If EXPR
d3960 2
a3961 2
essentially just a variety of C<eval>.  Has semantics similar to the
following subroutine:
d3964 18
a3981 26
       my ($filename) = @@_;
       if (exists $INC{$filename}) {
           return 1 if $INC{$filename};
           die "Compilation failed in require";
       }
       my ($realfilename,$result);
       ITER: {
           foreach $prefix (@@INC) {
               $realfilename = "$prefix/$filename";
               if (-f $realfilename) {
                   $INC{$filename} = $realfilename;
                   $result = do $realfilename;
                   last ITER;
               }
           }
           die "Can't find $filename in \@@INC";
       }
       if ($@@) {
           $INC{$filename} = undef;
           die $@@;
       } elsif (!$result) {
           delete $INC{$filename};
           die "$filename did not return true value";
       } else {
           return $result;
       }
d3985 1
a3985 3
name.

The file must return true as the last statement to indicate
a4014 9
Now that you understand how C<require> looks for files in the case of
a bareword argument, there is a little extra functionality going on
behind the scenes.  Before C<require> looks for a "F<.pm>" extension,
it will first look for a filename with a "F<.pmc>" extension.  A file
with this extension is assumed to be Perl bytecode generated by
L<B::Bytecode|B::Bytecode>.  If this file is found, and it's modification
time is newer than a coinciding "F<.pm>" non-compiled file, it will be
loaded in place of that non-compiled file ending in a "F<.pm>" extension.

d4146 3
a4148 3
Deletes the directory specified by FILENAME if that directory is
empty.  If it succeeds it returns true, otherwise it returns false and
sets C<$!> (errno).  If FILENAME is omitted, uses C<$_>.
d4369 3
a4371 4
binmode() to operate with the C<:utf8> I/O layer (see L</open>, or the
C<open> pragma, L<open>), the I/O will operate on UTF-8 encoded
Unicode characters, not bytes.  Similarly for the C<:encoding> pragma:
in that case pretty much any characters can be sent.
d4575 1
a4575 1
independent ways quite probably will.  See L<sort>.
a4681 9
Because C<< <=> >> returns C<undef> when either operand is C<NaN>
(not-a-number), and because C<sort> will trigger a fatal error unless the
result of a comparison is defined, when sorting with a comparison function
like C<< $a <=> $b >>, be careful about lists that might contain a C<NaN>.
The following example takes advantage of the fact that C<NaN != NaN> to
eliminate any C<NaN>s from the input.

    @@result = sort { $a <=> $b } grep { $_ == $_ } @@input;

d4703 1
a4703 1
The following equivalences hold (assuming C<< $[ == 0 and $#a >= $i >> )
d4709 1
a4709 1
    $a[$i] = $y		splice(@@a,$i,1,$y)
d4780 2
a4781 2
When assigning to a list, if LIMIT is omitted, or zero, Perl supplies
a LIMIT one larger than the number of variables in the list, to avoid
d4805 3
a4807 3
As a special case, specifying a PATTERN of space (S<C<' '>>) will split on
white space just as C<split> with no arguments does.  Thus, S<C<split(' ')>> can
be used to emulate B<awk>'s default behavior, whereas S<C<split(/ /)>>
d4809 1
a4809 1
A C<split> on C</\s+/> is like a S<C<split(' ')>> except that any leading
d4811 1
a4811 1
really does a S<C<split(' ', $_)>> internally.
d4972 2
a4973 2
For floating point formats, with the exception of 'g' and 'G', this specifies
the number of decimal places to show (the default being 6), eg:
a4981 12
For 'g' and 'G', this specifies the maximum number of digits to show,
including prior to the decimal point as well as after it, eg:

  # these examples are subject to system-specific variation
  printf '<%g>', 1;        # prints "<1>"
  printf '<%.10g>', 1;     # prints "<1>"
  printf '<%g>', 100;      # prints "<100>"
  printf '<%.1g>', 100;    # prints "<1e+02>"
  printf '<%.2g>', 100.01; # prints "<1e+02>"
  printf '<%.5g>', 100.01; # prints "<100.01>"
  printf '<%.4g>', 100.01; # prints "<100>"

d5009 5
a5013 5
number as using C<l>, C<h>, C<V>, C<q>, C<L>, or C<ll>. For integer
conversions (C<d u o x X b i D U O>), numbers are usually assumed to be
whatever the default integer size is on your platform (usually 32 or 64
bits), but you can override this to use instead one of the standard C types,
as supported by the compiler used to build Perl:
d5017 2
a5018 17
   q, L or ll  interpret integer as C type "long long", "unsigned long long".
               or "quads" (typically 64-bit integers)

The last will produce errors if Perl does not understand "quads" in your
installation. (This requires that either the platform natively supports quads
or Perl was specifically compiled to support quads.) You can find out
whether your Perl supports quads via L<Config>:

	use Config;
	($Config{use64bitint} eq 'define' || $Config{longsize} >= 8) &&
		print "quads\n";

For floating point conversions (C<e f g E F G>), numbers are usually assumed
to be the default floating point size on your platform (double or long double),
but you can force 'long double' with C<q>, C<L>, or C<ll> if your
platform supports them. You can find out whether your Perl supports long
doubles via L<Config>:
d5020 4
a5023 11
	use Config;
	$Config{d_longdbl} eq 'define' && print "long doubles\n";

You can find out whether Perl considers 'long double' to be the default
floating point size to use on your platform via L<Config>:

        use Config;
        ($Config{uselongdouble} eq 'define') &&
                print "long doubles by default\n";

It can also be the case that long doubles and doubles are the same thing:
d5025 1
a5025 5
        use Config;
        ($Config{doublesize} == $Config{longdblsize}) &&
                print "doubles are long doubles\n";

The size specifier C<V> has no effect for Perl code, but it is supported
d5067 38
d5256 1
a5256 1
    printf "Permissions are %04o\n", S_IMODE($mode), "\n";
d5270 1
a5270 2
    # Setuid/Setgid/Stickiness/SaveText.
    # Note that the exact meaning of these is system dependent.
d5284 1
a5284 1
    S_IMODE($mode)	the part of $mode containing the permission bits
a5304 3
To get status info for a symbolic link instead of the target file
behind the link, use the C<lstat> function, see L</stat>.

a5417 10
If the lvalue returned by substr is used after the EXPR is changed in
any way, the behaviour may not be as expected and is subject to change.
This caveat includes code such as C<print(substr($foo,$a,$b)=$bar)> or
C<(substr($foo,$a,$b)=$bar)=$fud> (where $foo is changed via the
substring assignment, and then the substr is used again), or where a
substr() is aliased via a C<foreach> loop or passed as a parameter or
a reference to it is taken and then the alias, parameter, or deref'd
reference either is used after the original EXPR has been changed or
is assigned to and then used a second time.

d5427 1
a5427 1
=item syscall NUMBER, LIST
d5518 2
a5519 2
Attempts to read LENGTH bytes of data into variable SCALAR from the
specified FILEHANDLE, using the system call read(2).  It bypasses
d5521 11
a5531 6
C<write>, C<seek>, C<tell>, or C<eof> can cause confusion because the
perlio or stdio layers usually buffers data.  Returns the number of
bytes actually read, C<0> at end of file, or undef if there was an
error (in the latter case C<$!> is also set).  SCALAR will be grown or
shrunk so that the last byte actually read is the last byte of the
scalar after the read.
a5543 6
Note that if the filehandle has been marked as C<:utf8> Unicode
characters are read instead of bytes (the LENGTH, OFFSET, and the
return value of sysread() are in Unicode characters).
The C<:encoding(...)> layer implicitly introduces the C<:utf8> layer.
See L</binmode>, L</open>, and the C<open> pragma, L<open>.

d5546 1
a5546 1
Sets FILEHANDLE's system position in bytes using the system call
d5558 1
a5558 1
sysseek() bypasses normal buffered IO, so mixing this with reads (other
d5567 1
a5567 1
	use Fcntl 'SEEK_CUR';
d5620 3
a5622 11
    if ($? == -1) {
	print "failed to execute: $!\n";
    }
    elsif ($? & 127) {
	printf "child died with signal %d, %s coredump\n",
	    ($? & 127),  ($? & 128) ? 'with' : 'without';
    }
    else {
	printf "child exited with value %d\n", $? >> 8;
    }

d5637 3
a5639 3
Attempts to write LENGTH bytes of data from variable SCALAR to the
specified FILEHANDLE, using the system call write(2).  If LENGTH is
not specified, writes whole SCALAR.  It bypasses buffered IO, so
d5641 3
a5643 4
C<seek>, C<tell>, or C<eof> may cause confusion because the perlio and
stdio layers usually buffers data.  Returns the number of bytes
actually written, or C<undef> if there was an error (in this case the
errno variable C<$!> is also set).  If the LENGTH is greater than the
d5652 5
a5656 5
Note that if the filehandle has been marked as C<:utf8>, Unicode
characters are written instead of bytes (the LENGTH, OFFSET, and the
return value of syswrite() are in UTF-8 encoded Unicode characters).
The C<:encoding(...)> layer implicitly introduces the C<:utf8> layer.
See L</binmode>, L</open>, and the C<open> pragma, L<open>.
d5796 3
a5798 4
you may use either the Time::HiRes module (from CPAN, and starting from
Perl 5.8 part of the standard distribution), or if you have
gettimeofday(2), you may be able to use the C<syscall> interface of Perl.
See L<perlfaq8> for details.
d5893 1
a5893 1
(using C<&>), or a typeglob (using C<*>).  (Saying C<undef $hash{$key}>
d5978 3
a5980 6
If there are more pack codes or if the repeat count of a field or a group
is larger than what the remainder of the input string allows, the result
is not well defined: in some cases, the repeat count is decreased, or
C<unpack()> will produce null strings or zeroes, or terminate with an
error. If the input string is longer than one described by the TEMPLATE,
the rest is ignored.
d6102 2
a6103 2
to the current time.  For example, this code has the same effect as the
Unix touch(1) command when the files I<already exist>.
d6106 2
a6107 2
    $atime = $mtime = time;
    utime $atime, $mtime, @@ARGV;
d6109 4
a6112 5
Since perl 5.7.2, if the first two elements of the list are C<undef>, then
the utime(2) function in the C library will be called with a null second
argument. On most systems, this will set the file's access and
modification times to the current time (i.e. equivalent to the example
above.)
a6115 11
Under NFS this will use the time of the NFS server, not the time of
the local machine.  If there is a time synchronization problem, the
NFS server and local machine will have different times.  The Unix
touch(1) command will in fact normally use this form instead of the
one shown in the first example.

Note that only passing one of the first two elements as C<undef> will
be equivalent of passing it as 0 and will not have the same effect as
described when they are both C<undef>.  This case will also trigger an
uninitialized warning.

d6118 6
a6123 12
Returns a list consisting of all the values of the named hash.
(In a scalar context, returns the number of values.)

The values are returned in an apparently random order.  The actual
random order is subject to change in future versions of perl, but it
is guaranteed to be the same order as either the C<keys> or C<each>
function would produce on the same (unmodified) hash.  Since Perl
5.8.1 the ordering is different even between different runs of Perl
for security reasons (see L<perlsec/"Algorithmic Complexity Attacks">).

As a side effect, calling values() resets the HASH's internal iterator,
see L</each>.
d6131 1
d6168 2
a6169 2
can only happen if you're using UTF-8 encoding).  If it does, it will be
treated as something which is not UTF-8 encoded.  When the C<vec> was
d6171 1
a6171 1
string to be UTF-8 encoded.  In other words, if you do have such characters
@


1.1.1.7
log
@perl 5.8.3 from CPAN
@
text
@d1036 2
a1037 12
Returns a list with the same number of elements as the number of elements
for which deletion was attempted.  Each element of that list consists of
either the value of the element deleted, or the undefined value.  In scalar
context, this means that you get the value of the last element deleted (or
the undefined value if that element did not exist).

    %hash = (foo => 11, bar => 22, baz => 33);
    $scalar = delete $hash{foo};             # $scalar is 11
    $scalar = delete @@hash{qw(foo bar)};     # $scalar is 22
    @@array  = delete @@hash{qw(foo bar baz)}; # @@array  is (undef,undef,33)

Deleting from C<%ENV> modifies the environment.  Deleting from
d2331 1
a2331 2
see L</each>. (In particular, calling keys() in void context resets
the iterator with no other overhead.)
a5877 1
    SCALAR this
d6298 1
a6298 2
see L</each>. (In particular, calling values() in void context resets
the iterator with no other overhead.)
@


1.1.1.8
log
@Import of stock perl 5.8.5
@
text
@a663 4
If the C<encoding> pragma is in scope then the lengths returned are
calculated from the length of C<$/> in Unicode characters, which is not
always the same as the length of C<$/> in the native encoding.

d769 2
a770 2
If the file handle came from a piped open, C<close> will additionally
return false if one of the other system calls involved fails, or if the
d772 1
a772 1
program exited non-zero, C<$!> will be set to C<0>.)  Closing a pipe
d2093 1
a2093 28
Queries the option named OPTNAME associated with SOCKET at a given LEVEL.
Options may exist at multiple protocol levels depending on the socket
type, but at least the uppermost socket level SOL_SOCKET (defined in the
C<Socket> module) will exist. To query options at another level the
protocol number of the appropriate protocol controlling the option
should be supplied. For example, to indicate that an option is to be
interpreted by the TCP protocol, LEVEL should be set to the protocol
number of TCP, which you can get using getprotobyname.

The call returns a packed string representing the requested socket option,
or C<undef> if there is an error (the error reason will be in $!). What
exactly is in the packed string depends in the LEVEL and OPTNAME, consult
your system documentation for details. A very common case however is that
the option is an integer, in which case the result will be an packed
integer which you can decode using unpack with the C<i> (or C<I>) format.

An example testing if Nagle's algorithm is turned on on a socket:

    use Socket;

    defined(my $tcp = getprotobyname("tcp"))
	or die "Could not determine the protocol number for tcp";
    # my $tcp = Socket::IPPROTO_TCP; # Alternative
    my $packed = getsockopt($socket, $tcp, Socket::TCP_NODELAY)
	or die "Could not query TCP_NODELAY SOCKEt option: $!";
    my $nodelay = unpack("I", $packed);
    print "Nagle's algorithm is turned ", $nodelay ? "off\n" : "on\n";

d2147 16
a2162 7
If you need local time instead of GMT use the L</localtime> builtin. 
See also the C<timegm> function provided by the C<Time::Local> module,
and the strftime(3) and mktime(3) functions available via the L<POSIX> module.

This scalar value is B<not> locale dependent (see L<perllocale>), but is
instead a Perl builtin.  To get somewhat similar but locale dependent date
strings, see the example in L</localtime>.
d2529 8
a2536 9
This scalar value is B<not> locale dependent but is a Perl builtin. For GMT
instead of local time use the L</gmtime> builtin. See also the
C<Time::Local> module (to convert the second, minutes, hours, ... back to
the integer value returned by time()), and the L<POSIX> module's strftime(3)
and mktime(3) functions.

To get somewhat similar but locale dependent date strings, set up your
locale environment variables appropriately (please see L<perllocale>) and
try for example:
a2539 2
    # or for GMT formatted appropriately for your locale:
    $now_string = strftime "%a %b %e %H:%M:%S %Y", gmtime;
d2931 1
a2931 1
    open(EXTRACT, "|sort >Tmp$$")		# $$ is our process id
d2989 3
a3241 5
Warning: the current implementation of this attribute operates on the
typeglob associated with the variable; this means that C<our $x : unique>
also has the effect of C<our @@x : unique; our %x : unique>. This may be
subject to change.

a4250 2
Used without arguments in scalar context, reverse() reverses C<$_>.

d4439 1
a4439 2
is implementation-dependent.  See also L<perlport> for notes on the
portability of C<select>.
d4872 2
a4873 3
Splits the string EXPR into a list of strings and returns that list.  By
default, empty leading fields are preserved, and empty trailing ones are
deleted.  (If all fields are empty, they are considered to be trailing.)
d5333 1
a5333 1
meanings of the fields:
d5351 1
a5351 1
(*) The ctime field is non-portable.  In particular, you cannot expect
d5355 1
a5355 1
If C<stat> is passed the special filehandle consisting of an underline, no
d5357 1
a5357 1
last C<stat>, C<lstat>, or filetest are returned.  Example:
d5402 1
a5402 1
The commonly available C<S_IF*> constants are
d5423 1
a5423 1
and the C<S_IF*> functions are
d5432 1
a5432 1
    # The operators -f, -d, -l, -b, -c, -p, and -S.
d5444 4
a5447 2
about the C<S_*> constants.  To get status info for a symbolic link
instead of the target file behind the link, use the C<lstat> function.
d5633 1
a5633 1
and C<O_RDWR> for opening the file in read-write mode.
d5650 4
a5653 9
if the file already exists, sysopen() fails.  C<O_EXCL> may not work
on network filesystems, and has no effect unless the C<O_CREAT> flag
is set as well.  Setting C<O_CREAT|O_EXCL> prevents the file from
being opened if it is a symbolic link.  It does not protect against
symbolic links in the file's path.

Sometimes you may want to truncate an already-existing file.  This
can be done using the C<O_TRUNC> flag.  The behavior of
C<O_TRUNC> with C<O_RDONLY> is undefined.
d5764 3
a5766 4
Since C<SIGINT> and C<SIGQUIT> are ignored during the execution of
C<system>, if you expect your program to terminate on receipt of these
signals you will need to arrange to do so yourself based on the return
value.
d5786 1
d5956 3
a5958 4
considers to be the epoch, suitable for feeding to C<gmtime> and
C<localtime>. On most systems the epoch is 00:00:00 UTC, January 1, 1970;
a prominent exception being Mac OS Classic which uses 00:00:00, January 1,
1904 in the current local time zone for its epoch.
d6595 4
a6598 4
Returns true if the context of the currently executing subroutine or
eval() block is looking for a list value.  Returns false if the context is
looking for a scalar.  Returns the undefined value if the context is
looking for no value (void context).
@


1.1.1.9
log
@perl 5.8.6 from CPAN
@
text
@d2925 1
a2925 3
Since v5.8.0, perl has built using PerlIO by default.  Unless you've
changed this (ie Configure -Uuseperlio), you can open file handles to
"in memory" files held in Perl scalars via:
a2987 2
See L<perliol/> for detailed info on PerlIO.

d3746 3
a3748 8
in question (C<$_> is used when the variable is not specified).  Note that
0 is a valid match offset, while C<undef> indicates that the search position
is reset (usually due to match failure, but can also be because no match has
yet been performed on the scalar). C<pos> directly accesses the location used
by the regexp engine to store the offset, so assigning to C<pos> will change
that offset, and so will also influence the C<\G> zero-width assertion in
regular expressions. Because a failed C<m//gc> match doesn't reset the offset,
the return from C<pos> won't change either in this case.  See L<perlre> and
d5382 3
a5384 3
(*) Not all fields are supported on all filesystem types. Notably, the
ctime field is non-portable.  In particular, you cannot expect it to be a
"creation time", see L<perlport/"Files and Filesystems"> for details.
d5876 5
a5880 3
Do not use tell() (or other buffered I/O operations) on a file handle
that has been manipulated by sysread(), syswrite() or sysseek().
Those functions ignore the buffering, while tell() does not.
d6307 1
a6307 2
Unix touch(1) command when the files I<already exist> and belong to
the user running the program:
d6317 1
a6317 2
above) and will even work on other users' files where you have write
permission:
@


1.1.1.10
log
@perl 5.8.8 import
@
text
@a1 1
X<function>
d28 1
a28 1
Commas should separate elements of the LIST.
a70 1
X<context>
a87 1
X<function>
a96 1
X<scalar> X<string> X<character>
a102 1
X<regular expression> X<regex> X<regexp>
a106 1
X<numeric> X<number> X<trigonometric> X<trigonometry>
a111 1
X<array>
a115 1
X<list>
a119 1
X<hash>
a123 1
X<I/O> X<input> X<output> X<dbm>
a135 1
X<file> X<filehandle> X<directory> X<pipe> X<link> X<symlink>
d142 1
a142 2
=item Keywords related to the control flow of your Perl program
X<control flow>
a156 1
X<process> X<pid> X<process id>
a162 1
X<module>
a166 1
X<object> X<class> X<package>
a171 1
X<socket> X<sock>
a177 1
X<IPC> X<System V> X<semaphore> X<shared memory> X<memory> X<message>
a182 1
X<user> X<group> X<password> X<uid> X<gid>  X<passwd> X</etc/passwd>
a188 1
X<network> X<protocol> X<host> X<hostname> X<IP> X<address> X<service>
a196 1
X<time> X<date>
a200 1
X<perl5>
a216 1
X<portability> X<Unix> X<portable>
d229 1
a229 1
C<getppid>, C<getpgrp>, C<getpriority>, C<getprotobynumber>,
a249 2
X<-r>X<-w>X<-x>X<-o>X<-R>X<-W>X<-X>X<-O>X<-e>X<-z>X<-s>X<-f>X<-d>X<-l>X<-p>
X<-S>X<-b>X<-c>X<-t>X<-u>X<-g>X<-k>X<-T>X<-B>X<-M>X<-A>X<-C>
d264 2
d340 1
a340 1
are found, it's a C<-B> file; otherwise it's a C<-T> file.  Also, any file
d354 1
a354 1
an C<lstat> call, C<-T> and C<-B> will reset it with the results of C<stat _>).
a369 1
X<abs> X<absolute>
a376 1
X<accept>
a386 3
X<alarm>
X<SIGALRM>
X<timer>
d391 1
a391 1
specified number of wallclock seconds has elapsed.  If SECONDS is not
a434 1
X<atan2> X<arctangent> X<tan> X<tangent>
a442 2
Note that atan2(0, 0) is not well-defined.

a443 1
X<bind>
a450 1
X<binmode> X<binary> X<text> X<DOS> X<Windows>
a536 1
X<bless>
d544 3
a546 3
version if a derived class might inherit the function doing the blessing.
See L<perltoot> and L<perlobj> for more about the blessing (and blessings)
of objects.
d550 1
a550 1
Perl pragmata.  Builtin types have all uppercase names. To prevent
a556 1
X<caller> X<call stack> X<stack> X<stack trace>
a598 8
X<chdir>
X<cd>

=item chdir FILEHANDLE

=item chdir DIRHANDLE

=item chdir
a606 4
On systems that support fchdir, you might pass a file handle or
directory handle as argument.  On systems that don't support fchdir,
passing handles produces a fatal error at run time.

a607 1
X<chmod> X<permission> X<mode>
d611 1
a611 1
number, and which definitely should I<not> be a string of octal digits:
a621 8
On systems that support fchmod, you might pass file handles among the
files.  On systems that don't support fchmod, passing file handles
produces a fatal error at run time.

    open(my $fh, "<", "foo");
    my $perm = (stat $fh)[2] & 07777;
    chmod($perm | 0600, $fh);

a630 1
X<chomp> X<INPUT_RECORD_SEPARATOR> X<$/> X<newline> X<eol>
a675 1
X<chop>
a696 1
X<chown> X<owner> X<user> X<group>
a706 4
On systems that support fchown, you might pass file handles among the
files.  On systems that don't support fchown, passing file handles
produces a fatal error at run time.

a729 1
X<chr> X<character> X<ASCII> X<Unicode>
a748 1
X<chroot> X<root>
a759 1
X<close>
a800 1
X<closedir>
a805 1
X<connect>
a812 1
X<continue>
d814 2
a815 2
C<continue> is actually a flow control statement rather than a function.  If
there is a C<continue> BLOCK attached to a BLOCK (typically in a C<while> or
a841 1
X<cos> X<cosine> X<acos> X<arccosine>
a853 2
X<crypt> X<digest> X<hash> X<salt> X<plaintext> X<password>
X<decrypt> X<cryptography> X<passwd>
d855 18
a872 29
Creates a digest string exactly like the crypt(3) function in the C
library (assuming that you actually have a version there that has not
been extirpated as a potential munitions).

crypt() is a one-way hash function.  The PLAINTEXT and SALT is turned
into a short string, called a digest, which is returned.  The same
PLAINTEXT and SALT will always return the same string, but there is no
(known) way to get the original PLAINTEXT from the hash.  Small
changes in the PLAINTEXT or SALT will result in large changes in the
digest.

There is no decrypt function.  This function isn't all that useful for
cryptography (for that, look for F<Crypt> modules on your nearby CPAN
mirror) and the name "crypt" is a bit of a misnomer.  Instead it is
primarily used to check if two pieces of text are the same without
having to transmit or store the text itself.  An example is checking
if a correct password is given.  The digest of the password is stored,
not the password itself.  The user types in a password that is
crypt()'d with the same salt as the stored digest.  If the two digests
match the password is correct.

When verifying an existing digest string you should use the digest as
the salt (like C<crypt($plain, $digest) eq $digest>).  The SALT used
to create the digest is visible as part of the digest.  This ensures
crypt() will hash the new string with the same salt as the digest.
This allows your code to work with the standard L<crypt|/crypt> and
with more exotic implementations.  In other words, do not assume
anything about the returned string itself, or how many bytes in the
digest matter.
d876 4
a879 4
the first eight bytes of the digest string mattered, but alternative
hashing schemes (like MD5), higher level security schemes (like C2),
and implementations on non-UNIX platforms may produce different
strings.
d889 1
a889 1
their password:
d908 1
a908 1
The L<crypt|/crypt> function is unsuitable for hashing large quantities
d910 3
a912 1
back.  Look at the L<Digest> module for more robust algorithms.
a921 1
X<dbmclose>
a927 1
X<dbmopen> X<dbm> X<ndbm> X<sdbm> X<gdbm>
a969 1
X<defined> X<undef> X<undefined>
d1022 1
a1022 1
matched "nothing".  It didn't really fail to match anything.  Rather, it
a1032 1
X<delete>
d1057 3
a1059 3
element with exists() will return false.  Also, deleting array elements
in the middle of an array will not shift the index of the elements
after them down.  Use splice() for that.  See L</exists>.
a1096 1
X<die> X<throw> X<exception> X<raise> X<$@@> X<abort>
d1142 1
a1142 1
C<$@@>.  i.e. as if C<< $@@ = eval { $@@->PROPAGATE(__FILE__, __LINE__) }; >>
a1153 2
    use Scalar::Util 'blessed';

d1156 1
a1156 1
        if (blessed($@@) && $@@->isa("Some::Module::Exception")) {
d1173 1
a1173 1
L<"eval BLOCK"> for some examples.  Although this feature was 
a1185 1
X<do> X<block>
d1188 3
a1190 4
sequence of commands indicated by BLOCK.  When modified by the C<while> or
C<until> loop modifier, executes the BLOCK once before testing the loop
condition. (On other statements the loop modifiers test the conditional
first.)
a1196 1
X<do>
d1198 1
a1198 1
This form of subroutine call is deprecated.  See L<perlsub>.
a1200 1
X<do>
d1203 2
a1204 1
file as a Perl script.
d1213 1
a1213 1
filename for error messages, searches the @@INC directories, and updates
a1244 1
X<dump> X<core> X<undump>
a1276 1
X<each> X<hash, iterator>
a1315 3
X<eof>
X<end of file>
X<end-of-file>
a1365 1
X<eval> X<try> X<catch> X<evaluate> X<parse> X<execute>
a1368 2
=item eval

d1374 1
a1374 1
afterwards.  Note that the value is parsed every time the C<eval> executes.
d1379 1
a1379 1
same time the code surrounding the C<eval> itself was parsed--and executed
d1391 2
a1392 3
in void, scalar, or list context, depending on the context of the C<eval> 
itself.  See L</wantarray> for more on how the evaluation context can be 
determined.
d1425 3
a1427 3
Using the C<eval{}> form as an exception trap in libraries does have some
issues.  Due to the current arguably broken state of C<__DIE__> hooks, you
may wish not to trigger any C<__DIE__> hooks that user code may have installed.
a1480 1
X<exec> X<execute>
a1555 1
X<exists> X<autovivification>
a1618 3
X<exit> X<terminate> X<abort>

=item exit
a1643 1
X<exp> X<exponential> X<antilog> X<antilogarithm> X<e>
a1650 1
X<fcntl>
a1686 1
X<fileno>
a1705 1
X<flock> X<lock> X<locking>
d1716 2
a1717 2
fewer guarantees.  This means that programs that do not also use C<flock>
may modify files locked with C<flock>.  See L<perlport>, 
a1782 1
X<fork> X<child> X<parent>
a1810 1
X<format>
a1827 1
X<formline>
d1834 2
a1835 2
C<$^A> are written to some filehandle.  You could also read C<$^A>
and then set C<$^A> back to C<"">.  Note that a format typically
a1846 1
X<getc> X<getchar>
a1882 1
X<getlogin> X<login>
d1884 1
a1884 1
This implements the C library function of the same name, which on most
a1893 1
X<getpeername> X<peer>
a1903 1
X<getpgrp> X<group>
a1912 1
X<getppid> X<parent> X<pid>
a1923 1
X<getpriority> X<priority> X<nice>
a1929 6
X<getpwnam> X<getgrnam> X<gethostbyname> X<getnetbyname> X<getprotobyname>
X<getpwuid> X<getgrgid> X<getservbyname> X<gethostbyaddr> X<getnetbyaddr>
X<getprotobynumber> X<getservbyport> X<getpwent> X<getgrent> X<gethostent>
X<getnetent> X<getprotoent> X<getservent> X<setpwent> X<setgrent> X<sethostent>
X<setnetent> X<setprotoent> X<setservent> X<endpwent> X<endgrent> X<endhostent>
X<endnetent> X<endprotoent> X<endservent> 
d2041 2
a2042 2
the shadow(3) functions as found in System V (this includes Solaris
and Linux.)  Those systems that implement a proprietary shadow password
a2082 1
X<getsockname>
a2095 1
X<getsockopt>
d2110 1
a2110 1
the option is an integer, in which case the result will be a packed
d2115 1
a2115 1
    use Socket qw(:all);
d2119 3
a2121 3
    # my $tcp = IPPROTO_TCP; # Alternative
    my $packed = getsockopt($socket, $tcp, TCP_NODELAY)
	or die "Could not query TCP_NODELAY socket option: $!";
a2126 1
X<glob> X<wildcard> X<filename, expansion> X<expand>
a2141 1
X<gmtime> X<UTC> X<Greenwich>
d2143 1
a2143 3
=item gmtime

Converts a time as returned by the time function to an 9-element list
d2147 2
a2148 2
    #  0    1    2     3     4    5     6     7     8
    ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) =
d2158 1
a2158 2
the year, in the range C<0..364> (or C<0..365> in leap years).  $isdst
is always C<0>.
d2161 1
a2161 1
the year.  If you assume it is then you create non-Y2K-compliant
a2185 2
See L<perlport/gmtime> for portability concerns.

a2186 1
X<goto> X<jump> X<jmp>
d2224 1
a2224 1
containing a code reference, or a block that evaluates to a code
a2227 1
X<grep>
a2256 1
X<hex> X<hexadecimal>
d2261 1
a2261 1
(To convert strings that might start with either C<0>, C<0x>, or C<0b>, see
d2269 1
a2269 2
unlike oct(). To present something as hex, look into L</printf>,
L</sprintf>, or L</unpack>.
d2271 1
a2271 2
=item import LIST
X<import>
a2278 1
X<index> X<indexOf> X<InStr>
d2286 1
a2286 3
beginning of the string.  POSITION before the beginning of the string
or after its end is treated as if it were the beginning or the end,
respectively.  POSITION and the return value are based at C<0> (or whatever
d2288 1
a2288 1
is not found, C<index> returns one less than the base, ordinarily C<-1>.
a2290 1
X<int> X<integer> X<truncate> X<trunc>
a2303 1
X<ioctl>
d2307 1
a2307 1
    require "sys/ioctl.ph";	# probably in $Config{archlib}/sys/ioctl.ph
d2309 1
a2309 1
to get the correct function definitions.  If F<sys/ioctl.ph> doesn't
a2339 1
X<join>
a2349 1
X<keys> X<key>
d2362 3
a2364 3
As a side effect, calling keys() resets the HASH's internal iterator
(see L</each>).  In particular, calling keys() in void context resets
the iterator with no other overhead.
a2407 1
X<kill> X<signal>
a2429 1
X<last> X<break>
a2454 1
X<lc> X<lowercase>
a2465 1
X<lcfirst> X<lowercase>
a2477 1
X<length> X<size>
a2490 1
X<link>
a2495 1
X<listen>
a2501 1
X<local>
a2512 3
X<localtime>

=item localtime
d2520 1
a2520 1
                                                localtime(time);
d2523 9
a2531 2
tm'.  C<$sec>, C<$min>, and C<$hour> are the seconds, minutes, and hours
of the specified time.
d2533 3
a2535 3
C<$mday> is the day of the month, and C<$mon> is the month itself, in
the range C<0..11> with 0 indicating January and 11 indicating December.
This makes it easy to get a month name from a list:
d2537 1
a2537 3
    my @@abbr = qw( Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec );
    print "$abbr[$mon] $mday";
    # $mon=9, $mday=18 gives "Oct 18"
d2539 1
a2539 3
C<$year> is the number of years since 1900, not just the last two digits
of the year.  That is, C<$year> is C<123> in year 2023.  The proper way
to get a complete 4-digit year is simply:
d2541 1
a2541 1
    $year += 1900;
d2543 1
a2543 10
To get the last two digits of the year (e.g., '01' in 2001) do:

    $year = sprintf("%02d", $year % 100);

C<$wday> is the day of the week, with 0 indicating Sunday and 3 indicating
Wednesday.  C<$yday> is the day of the year, in the range C<0..364>
(or C<0..365> in leap years.)

C<$isdst> is true if the specified time occurs during Daylight Saving
Time, false otherwise.
a2568 2
See L<perlport/localtime> for portability concerns.

a2569 1
X<lock>
a2579 1
X<log> X<logarithm> X<e> X<ln> X<base>
a2595 1
X<lstat>
a2611 1
X<map>
a2665 1
X<mkdir> X<md> X<directory, create>
a2686 1
X<msgctl>
d2693 1
a2693 1
then ARG must be a variable that will hold the returned C<msqid_ds>
a2698 1
X<msgget>
a2704 1
X<msgrcv>
a2715 1
X<msgsnd>
a2725 1
X<my>
a2744 1
X<next> X<continue>
a2770 1
X<no>
a2780 1
X<oct> X<octal> X<hex> X<hexadecimal> X<binary> X<bin>
a2804 1
X<open> X<pipe> X<file, open> X<fopen>
d2891 3
a2893 3
see L<perluniintro>. Note that if layers are specified in the
three-arg form then default layers stored in ${^OPEN} (see L<perlvar>;
usually set by the B<open> pragma or the switch B<-CioD>) are ignored.
d2915 1
a2915 1
As a special case the 3-arg form with a read/write mode and the third
d2926 1
a2926 1
changed this (i.e. Configure -Uuseperlio), you can open file handles to
d2990 1
a2990 1
See L<perliol> for detailed info on PerlIO.
d2999 1
a2999 1
of IO buffers.) If you use the 3-arg form then you can pass either a
a3172 1
X<opendir>
a3182 1
X<ord> X<encoding>
a3193 1
X<our> X<global>
d3201 9
a3209 18
C<our> associates a simple name with a package variable in the current
package for use within the current scope.  When C<use strict 'vars'> is in
effect, C<our> lets you use declared global variables without qualifying
them with package names, within the lexical scope of the C<our> declaration.
In this way C<our> differs from C<use vars>, which is package scoped.

Unlike C<my>, which both allocates storage for a variable and associates
a simple name with that storage for use within the current scope, C<our>
associates a simple name with a package variable in the current package,
for use within the current scope.  In other words, C<our> has the same
scoping rules as C<my>, but does not necessarily create a
variable.

If more than one value is listed, the list must be placed
in parentheses.

    our $foo;
    our($bar, $baz);
d3222 1
a3222 1
    print $bar;		# prints 20, as it refers to $Foo::bar
d3224 3
a3226 7
Multiple C<our> declarations with the same name in the same lexical
scope are allowed if they are in different packages.  If they happen
to be in the same package, Perl will emit warnings if you have asked
for them, just like multiple C<my> declarations.  Unlike a second
C<my> declaration, which will bind the name to a fresh variable, a
second C<our> declaration in the same package, in the same scope, is
merely redundant.
d3237 1
a3237 2
    our $bar;		# emits warning but has no other effect
    print $bar;		# still prints 30
a3273 1
X<pack>
d3348 4
a3351 4
    w	A BER compressed integer (not an ASN.1 BER, see perlpacktut for
	details).  Its bytes represent an unsigned integer in base 128,
	most significant digit first, with as few digits as possible.  Bit
	eight (the high bit) is set on each byte except the last.
d3630 1
a3630 1
assumes additional C<""> arguments.  If TEMPLATE requires fewer arguments
a3687 1
X<package> X<module> X<namespace>
a3716 1
X<pipe>
a3731 1
X<pop> X<stack>
a3745 1
X<pos> X<match, position>
d3751 1
a3751 1
0 is a valid match offset.  C<undef> indicates that the search position
a3760 1
X<print>
d3787 2
a3788 3
Note that if you're storing FILEHANDLEs in an array, or if you're using
any other expression more complex than a scalar variable to retrieve it,
you will have to use a block returning the filehandle value instead:
a3793 1
X<printf>
a3808 1
X<prototype>
a3821 1
X<push>, X<stack>
d3831 1
a3831 2
but is more efficient.  Returns the number of elements in the array following
the completed C<push>.
a3845 1
X<quotemeta> X<metacharacter>
a3858 1
X<rand> X<random>
a3880 1
X<read>
a3909 1
X<readdir>
a3924 1
X<readline> X<gets> X<fgets>
a3959 1
X<readlink>
a3968 1
X<readpipe>
a3979 1
X<recv>
a3998 1
X<redo>
d4005 2
a4006 2
loop.  Programs that want to lie to themselves about what was just input 
normally use this command:
a4036 1
X<ref> X<reference>
d4063 3
a4069 1
X<rename> X<move> X<mv> X<ren>
a4081 1
X<require>
d4098 1
a4098 1
versions of Perl that do not support this syntax.  The equivalent numeric
d4105 4
a4108 4
Otherwise, C<require> demands that a library file be included if it
hasn't already been included.  The file is included via the do-FILE
mechanism, which is essentially just a variety of C<eval>.  Has
semantics similar to the following subroutine:
d4177 1
a4177 1
L<B::Bytecode|B::Bytecode>.  If this file is found, and its modification
d4216 1
a4216 1
If the hook is an object, it must provide an INC method that will be
a4237 1
X<reset>
a4260 1
X<return>
a4275 1
X<reverse> X<rev> X<invert>
a4297 1
X<rewinddir>
a4302 1
X<rindex>
d4306 1
a4306 1
Works just like index() except that it returns the position of the I<last>
d4308 1
a4308 1
last occurrence beginning at or before that position.
a4310 1
X<rmdir> X<rd> X<directory, remove>
a4322 1
X<scalar> X<context>
a4351 1
X<seek> X<fseek> X<filehandle, position>
a4397 1
X<seekdir>
d4400 2
a4401 2
must be a value returned by C<telldir>.  C<seekdir> also has the same caveats
about possible directory compaction as the corresponding system library
a4404 1
X<select> X<filehandle, default>
a4432 1
X<select>
a4479 9
On error, C<select> behaves like the select(2) system call : it returns
-1 and sets C<$!>.

Note: on some Unixes, the select(2) system call may report a socket file
descriptor as "ready for reading", when actually no data is available,
thus a subsequent read blocks. It can be avoided using always the
O_NONBLOCK flag on the socket. See select(2) and fcntl(2) for further
details.

a4484 1
X<semctl>
d4491 1
a4491 1
GETALL, then ARG must be a variable that will hold the returned
a4499 1
X<semget>
a4506 1
X<semop>
d4511 2
a4512 2
C<pack("s!3", $semnum, $semop, $semflag)>.  The length of OPSTRING 
implies the number of semaphore operations.  Returns true if
a4523 1
X<send>
a4543 1
X<setpgrp> X<group>
a4552 1
X<setpriority> X<priority> X<nice> X<renice>
a4558 1
X<setsockopt>
d4561 2
a4562 9
error.  Use integer constants provided by the C<Socket> module for
LEVEL and OPNAME.  Values for LEVEL can also be obtained from
getprotobyname.  OPTVAL might either be a packed string or an integer.
An integer OPTVAL is shorthand for pack("i", OPTVAL).

An example disabling the Nagle's algorithm for a socket:

    use Socket qw(IPPROTO_TCP TCP_NODELAY);
    setsockopt($socket, IPPROTO_TCP, TCP_NODELAY, 1);
a4564 1
X<shift>
a4580 1
X<shmctl>
d4587 1
a4587 1
then ARG must be a variable that will hold the returned C<shmid_ds>
a4592 1
X<shmget>
a4598 2
X<shmread>
X<shmwrite>
a4611 1
X<shutdown>
a4626 1
X<sin> X<sine> X<asin> X<arcsine>
a4638 1
X<sleep> X<pause>
a4662 1
X<socket>
a4674 1
X<socketpair>
a4697 1
X<sort> X<qsort> X<quicksort> X<mergesort>
d4725 1
a4725 1
compared are always passed by reference and should not be modified.
a4732 6
sort() returns aliases into the original list, much as a for loop's index
variable aliases the list elements.  That is, modifying an element of a
list returned by sort() (for example, in a C<foreach>, C<map> or C<grep>)
actually modifies the element in the original list.  This is usually
something to be avoided when writing clear code.

d4739 1
a4739 1
a stable mergesort algorithm whose worst-case behavior is O(NlogN).
d4743 1
a4743 1
underlying algorithm may not persist into future Perls, but the
a4861 1
X<splice>
a4903 1
X<split>
d4943 8
a4950 13
As a special case for C<split>, using the empty pattern C<//> specifically
matches only the null string, and is not be confused with the regular use
of C<//> to mean "the last successful pattern match".  So, for C<split>,
the following:

    print join(':', split(//, 'hi there'));

produces the output 'h:i: :t:h:e:r:e'.

Empty leading (or trailing) fields are produced when there are positive
width matches at the beginning (or end) of the string; a zero-width match
at the beginning (or end) of the string does not produce an empty field.
For example:
a5012 1
X<sprintf>
d5087 1
a5087 1
to take the arguments out of order, e.g.:
d5113 5
a5117 5
This flag tells perl to interpret the supplied string as a vector of
integers, one for each character in the string. Perl applies the format to
each integer in turn, then joins the resulting strings with a separator (a
dot C<.> by default). This can be useful for displaying ordinal values of
characters in arbitrary strings:
a5118 1
  printf "%vd", "AB\x{100}";           # prints "65.66.256"
d5128 1
a5128 1
the join string using e.g. C<*2$v>:
d5137 1
a5137 1
or from a specified argument (with e.g. C<*2$>):
a5148 1
X<precision>
d5153 1
a5153 1
the number of decimal places to show (the default being 6), e.g.:
d5163 1
a5163 1
including prior to the decimal point as well as after it, e.g.:
d5194 1
a5194 1
e.g. C<.*2$>:
a5285 1
X<sqrt> X<root> X<square root>
a5296 1
X<srand> X<seed> X<randseed>
d5337 2
a5338 2
For cryptographic purposes, however, you need something much more random 
than the default seed.  Checksumming the compressed output of one or more
a5357 1
X<stat> X<file, status>
d5457 1
a5457 1
    S_IFREG S_IFDIR S_IFLNK S_IFBLK S_IFCHR S_IFIFO S_IFSOCK S_IFWHT S_ENFMT
a5487 1
X<study>
d5497 1
a5497 1
that scan for many short constant strings (including the constant
a5546 1
X<sub>
a5563 1
X<substr> X<substring> X<mid> X<left> X<right>
d5600 9
a5610 1
X<symlink> X<link> X<symbolic link> X<link, symbolic>
a5619 1
X<syscall> X<system call>
a5653 1
X<sysopen>
a5671 1
X<O_RDONLY> X<O_RDWR> X<O_WRONLY>
a5684 1
X<O_CREAT>
a5692 1
X<O_EXCL>
a5696 1
X<O_TRUNC>
a5711 1
X<sysread>
a5742 1
X<sysseek> X<lseek>
d5757 1
a5757 1
than C<sysread>, for example C<< <> >> or read()) C<print>, C<write>,
a5773 1
X<system> X<shell>
d5798 2
a5799 2
C<wait> call.  To get the actual exit value, shift right by eight (see
below). See also L</exec>.  This is I<not> what you want to use to capture
d5802 1
a5802 2
indicates a failure to start the program or an error of the wait(2) system
call (inspect $! for the reason).
a5837 1
X<syswrite>
a5865 1
X<tell>
a5889 1
X<telldir>
d5893 2
a5894 2
directory.  C<telldir> has the same caveats about possible directory
compaction as the corresponding system library routine.
a5896 1
X<tie>
a5987 1
X<tied>
a5994 1
X<time> X<epoch>
a6008 1
X<times>
a6021 1
X<truncate>
a6033 1
X<uc> X<uppercase> X<toupper>
a6046 1
X<ucfirst> X<uppercase>
a6058 1
X<umask>
a6095 1
X<undef> X<undefine>
a6121 1
X<unlink> X<delete> X<remove> X<rm>
d6132 2
a6133 2
Note: C<unlink> will not attempt to delete directories unless you are superuser
and the B<-U> flag is supplied to Perl.  Even if these conditions are
d6135 1
a6135 2
filesystem.  Finally, using C<unlink> on directories is not supported on 
many operating systems.  Use C<rmdir> instead.
a6139 1
X<unpack>
a6195 1
X<untie>
a6200 1
X<unshift>
a6212 1
X<use> X<module> X<import>
d6239 1
a6239 1
versions of Perl that do not support this syntax.  The equivalent numeric
a6307 1
X<utime>
a6341 1
X<values>
a6365 1
X<vec> X<bit> X<bit vector>
d6400 1
a6400 1
treated as something that is not UTF-8 encoded.  When the C<vec> was
a6605 1
X<wait>
a6613 1
X<waitpid>
a6637 1
X<wantarray> X<context>
d6640 1
a6640 1
C<eval> is looking for a list value.  Returns false if the context is
a6647 4
C<wantarray()>'s result is unspecified in the top level of a file,
in a C<BEGIN>, C<CHECK>, C<INIT> or C<END> block, or in a C<DESTROY>
method.

a6650 1
X<warn> X<warning> X<STDERR>
a6693 1
X<write>
@


1.1.1.11
log
@import perl 5.10.0 from CPAN
@
text
@d103 1
a103 1
C<length>, C<oct>, C<ord>, C<pack>, C<q//>, C<qq//>, C<reverse>,
d125 1
a125 1
C<grep>, C<join>, C<map>, C<qw//>, C<reverse>, C<sort>, C<unpack>
d137 1
a137 1
C<readdir>, C<rewinddir>, C<say>, C<seek>, C<seekdir>, C<select>, C<syscall>,
a158 7
=item Keywords related to switch

C<break>, C<continue>, C<given>, C<when>, C<default>

(These are only available if you enable the "switch" feature.
See L<feature> and L<perlsyn/"Switch statements">.)

d161 1
a161 5
C<caller>, C<import>, C<local>, C<my>, C<our>, C<state>, C<package>,
C<use>

(C<state> is only available if the "state" feature is enabled. See
L<feature>.)
d165 2
a166 2
C<defined>, C<dump>, C<eval>, C<formline>, C<local>, C<my>, C<our>,
C<reset>, C<scalar>, C<state>, C<undef>, C<wantarray>
d172 1
a172 1
C<pipe>, C<qx//>, C<setpgrp>, C<setpriority>, C<sleep>, C<system>,
d180 1
a180 1
=item Keywords related to classes and object-orientation
d223 4
a226 5
C<abs>, C<bless>, C<break>, C<chomp>, C<chr>, C<continue>, C<default>, 
C<exists>, C<formline>, C<given>, C<glob>, C<import>, C<lc>, C<lcfirst>,
C<lock>, C<map>, C<my>, C<no>, C<our>, C<prototype>, C<qr//>, C<qw//>, C<qx//>,
C<readline>, C<readpipe>, C<ref>, C<sub>*, C<sysopen>, C<tie>, C<tied>, C<uc>,
C<ucfirst>, C<untie>, C<use>, C<when>
a276 2
=item -X DIRHANDLE

d280 2
a281 2
operator takes one argument, either a filename, a filehandle, or a dirhandle, 
and tests the associated file to see if something is true about it.  If the
d285 2
a286 1
names, precedence is the same as any other named unary operator.  The
d334 4
a337 6
reasons you can't actually read, write, or execute the file: for
example network filesystem access controls, ACLs (access control lists),
read-only filesystems, and unrecognized executable formats.  Note
that the use of these six specific operators to verify if some operation
is possible is usually a mistake, because it may be open to race
conditions.
d352 2
a353 5
due to the underlying system calls' definitions. Note also that, due to
the implementation of C<use filetest 'access'>, the C<_> special
filehandle won't cache the results of the file tests when this pragma is
in effect.  Read the documentation for the C<filetest> pragma for more
information.
a390 6
As of Perl 5.9.1, as a form of purely syntactic sugar, you can stack file
test operators, in a way that C<-f -w -x $file> is equivalent to
C<-x $file && -w _ && -f _>. (This is only syntax fancy: if you use
the return value of C<-f $file> as an argument to another filetest
operator, no special magic will happen.)

d429 6
a434 6
For delays of finer granularity than one second, the Time::HiRes module
(from CPAN, and starting from Perl 5.8 part of the standard
distribution) provides ualarm().  You may also use Perl's four-argument
version of select() leaving the first three arguments undefined, or you
might be able to use the C<syscall> interface to access setitimer(2) if
your system supports it. See L<perlfaq8> for details.
d509 2
a510 2
Camel) or elsewhere, C<:raw> is I<not> simply the inverse of C<:crlf>
-- other layers which would affect the binary nature of the stream are
d525 1
a525 4
To mark FILEHANDLE as UTF-8, use C<:utf8> or C<:encoding(utf8)>.
C<:utf8> just marks the data as UTF-8 without further checking,
while C<:encoding(utf8)> checks the data for actually being valid
UTF-8. More details can be found in L<PerlIO::encoding>.
a588 7
=item break

Break out of a C<given()> block.

This keyword is enabled by the "switch" feature: see L<feature>
for more information.

a598 1
    # 0         1          2
a604 1
    #  0         1          2      3            4
d606 1
a606 4

    #  5          6          7            8       9         10
    $wantarray, $evaltext, $is_require, $hints, $bitmask, $hinthash)
     = caller($i);
d613 1
a613 1
$subroutine is C<(eval)>, but $evaltext is undefined.  (Note also that
a621 4
C<$hinthash> is a reference to a hash containing the value of C<%^H> when the
caller was compiled, or C<undef> if C<%^H> was empty. Do not modify the values
of this hash, as they are the actual values stored in the optree.

a634 1
X<directory, change>
d671 1
a671 3
produces a fatal error at run time.   The file handles must be passed
as globs or references to be recognized.  Barewords are considered
file names.
d720 4
d767 1
a767 3
produces a fatal error at run time.  The file handles must be passed
as globs or references to be recognized.  Barewords are considered
file names.
d798 3
a800 5
chr(0x263a) is a Unicode smiley face.  

Negative values give the Unicode replacement character (chr(0xfffd)),
except under the L<bytes> pragma, where low eight bits of the value
(truncated to an integer) are used.
d806 2
a807 2
Note that characters from 128 to 255 (inclusive) are by default
internally not encoded as UTF-8 for backward compatibility reasons.
d809 1
a809 1
See L<perlunicode> for more about Unicode.
d828 4
a831 5
Closes the file or pipe associated with the file handle, flushes the IO
buffers, and closes the system file descriptor.  Returns true if those
operations have succeeded and if no error was reported by any PerlIO
layer.  Closes the currently selected filehandle if the argument is
omitted.
d844 1
a844 2
implicitly puts the exit status value of that command into C<$?> and
C<${^CHILD_ERROR_NATIVE}>.
a881 2
=item continue

a908 6
If the "switch" feature is enabled, C<continue> is also a
function that will break out of the current C<when> or C<default>
block, and fall through to the next case. See L<feature> and
L<perlsyn/"Switch statements"> for more information.


d924 1
a924 1
X<decrypt> X<cryptography> X<passwd> X<encrypt>
d1237 1
a1237 5
regular expressions.  Because $@@ is a global variable, and eval() may be
used within object implementations, care must be taken that analyzing the
error object doesn't replace the reference in the global variable.  The
easiest solution is to make a local copy of the reference before doing
other manipulations.  Here's an example:
d1242 2
a1243 2
    if (my $ev_err = $@@) {
        if (blessed($ev_err) && $ev_err->isa("Some::Module::Exception")) {
d1353 5
a1357 3
This function is now largely obsolete, mostly because it's very hard to
convert a core file into an executable. That's why you should now invoke
it as C<CORE::dump()>, if you don't want to be warned against a possible
d1360 7
a1461 1
X<error, handling> X<exception, handling>
d1710 3
d1958 1
a1958 1
X<getc> X<getchar> X<character> X<file, read>
d2178 1
a2178 1
    ($a,$b,$c,$d) = unpack('W4',$addr[0]);
a2188 12
In the opposite way, to resolve a hostname to the IP address
you can write this:

    use Socket;
    $packed_ip = gethostbyname("www.perl.org");
    if (defined $packed_ip) {
        $ip_address = inet_ntoa($packed_ip);
    }

Make sure <gethostbyname()> is called in SCALAR context and that
its return value is checked for definedness.

d2272 27
a2298 2
Works just like L<localtime> but the returned values are
localized for the standard Greenwich time zone.
d2300 15
a2314 3
Note: when called in list context, $isdst, the last value
returned by gmtime is always C<0>.  There is no
Daylight Saving Time in GMT.
a2387 5
If C<$_> is lexical in the scope where the C<grep> appears (because it has
been declared with C<my $_>) then, in addition to being locally aliased to
the list elements, C<$_> keeps being lexical inside the block; i.e. it
can't be seen from the outside, avoiding any potential side-effects.

d2431 1
a2431 1
X<int> X<integer> X<truncate> X<trunc> X<floor>
d2561 4
a2564 6
If SIGNAL is zero, no signal is sent to the process, but the kill(2)
system call will check whether it's possible to send a signal to it (that
means, to be brief, that the process is owned by the same user, or we are
the super-user).  This is a useful way to check that a child process is
alive (even if only as a zombie) and hasn't changed its UID.  See
L<perlport> for notes on the portability of this construct.
d2637 1
a2637 5
of the internal string in bytes, use C<bytes::length(EXPR)>, see
L<bytes>.  Note that the internal encoding is variable, and the number
of bytes usually meaningless.  To get the number of bytes that the
string would have when encoded as UTF-8, use
C<length(Encoding::encode_utf8(EXPR))>.
d2665 1
a2665 1
X<localtime> X<ctime>
a2694 3
Otherwise you create non-Y2K-compliant programs--and you wouldn't want
to do that, would you?

a2731 7
The L<Time::gmtime> and L<Time::localtime> modules provides a convenient,
by-name access mechanism to the gmtime() and localtime() functions,
respectively.

For a comprehensive date and time representation look at the
L<DateTime> module on CPAN.

d2769 1
a2769 1
information, please see the documentation for C<stat>.
d2793 1
a2793 1
    %hash = map { get_a_key_for($_) => $_ } @@array;
d2798 2
a2799 2
    foreach (@@array) {
	$hash{get_a_key_for($_)} = $_;
a2808 5
If C<$_> is lexical in the scope where the C<map> appears (because it has
been declared with C<my $_>), then, in addition to being locally aliased to
the list elements, C<$_> keeps being lexical inside the block; that is, it
can't be seen from the outside, avoiding any potential side-effects.

d2826 1
a2826 1
or to force an anon hash constructor use C<+{>:
a2836 2
=item mkdir

d2840 1
a2840 2
If omitted, MASK defaults to 0777. If omitted, FILENAME defaults
to C<$_>.
a2853 3
In order to recursively create a directory structure look at
the C<mkpath> function of the L<File::Path> module.

d2953 1
a2953 3
=item no VERSION

See the C<use> function, of which C<no> is the opposite.
d3065 1
a3065 1
  open(FH, "<:encoding(UTF-8)", "file")
d3282 1
a3282 2
child to finish, and returns the status value in C<$?> and
C<${^CHILD_ERROR_NATIVE}>.
d3370 1
a3370 1
See L<perlunicode> for more about Unicode.
d3375 1
a3375 1
=item our TYPE EXPR
d3443 24
d3474 1
a3474 2
an integer may be represented by a sequence of 4 bytes that will be 
converted to a sequence of 4 characters.
d3488 2
a3489 3
    c	A signed char (8-bit) value.
    C	An unsigned char (octet) value.
    W   An unsigned char value (can be greater than 255).
d3491 1
a3491 1
    s	A signed short (16-bit) value.
d3493 10
d3504 1
a3504 1
    l	A signed long (32-bit) value.
d3506 10
d3523 2
a3524 12
    i	A signed integer value.
    I	A unsigned integer value.
	  (This 'integer' is _at_least_ 32 bits wide.  Its exact
           size depends on what a local C compiler calls 'int'.)

    n	An unsigned short (16-bit) in "network" (big-endian) order.
    N	An unsigned long (32-bit) in "network" (big-endian) order.
    v	An unsigned short (16-bit) in "VAX" (little-endian) order.
    V	An unsigned long (32-bit) in "VAX" (little-endian) order.

    j   A Perl internal signed integer value (IV).
    J   A Perl internal unsigned integer value (UV).
d3529 2
a3530 1
    F	A Perl internal floating point value (NV) in the native format
d3540 2
a3541 2
    U	A Unicode character number.  Encodes to a character in character mode
        and UTF-8 (or UTF-EBCDIC in EBCDIC platforms) in byte mode.
d3550 2
a3551 3
    @@	Null fill or truncate to absolute position, counted from the
        start of the innermost ()-group.
    .   Null fill or truncate to absolute position specified by value.
a3553 25
One or more of the modifiers below may optionally follow some letters in the
TEMPLATE (the second column lists the letters for which the modifier is
valid):

    !   sSlLiI     Forces native (short, long, int) sizes instead
                   of fixed (16-/32-bit) sizes.

        xX         Make x and X act as alignment commands.

        nNvV       Treat integers as signed instead of unsigned.

        @@.         Specify position as byte offset in the internal
                   representation of the packed string. Efficient but
                   dangerous.

    >   sSiIlLqQ   Force big-endian byte-order on the type.
        jJfFdDpP   (The "big end" touches the construct.)

    <   sSiIlLqQ   Force little-endian byte-order on the type.
        jJfFdDpP   (The "little end" touches the construct.)

The C<E<gt>> and C<E<lt>> modifiers can also be used on C<()>-groups,
in which case they force a certain byte-order on all components of
that group, including subgroups.

d3562 6
a3567 7
C<H>, C<@@>, C<.>, C<x>, C<X> and C<P> the pack function will gobble up
that many values from the LIST.  A C<*> for the repeat count means to
use however many items are left, except for C<@@>, C<x>, C<X>, where it
is equivalent to C<0>, for <.> where it means relative to string start
and C<u>, where it is equivalent to 1 (or 45, which is the same).
A numeric repeat count may optionally be enclosed in brackets, as in
C<pack 'C[80]', @@arr>.
a3580 11
When used with C<@@>, the repeat count represents an offset from the start
of the innermost () group.

When used with C<.>, the repeat count is used to determine the starting
position from where the value offset is calculated. If the repeat count
is 0, it's relative to the current position. If the repeat count is C<*>,
the offset is relative to the start of the packed string. And if its an
integer C<n> the offset is relative to the start of the n-th innermost
() group (or the start of the string if C<n> is bigger then the group
level).

d3582 1
a3582 2
to encode per line of output, with 0, 1 and 2 replaced by 45. The repeat 
count should not be more than 65.
d3588 3
a3590 2
unpacking, C<A> strips trailing whitespace and nulls, C<Z> strips everything
after the first null, and C<a> returns data verbatim.
d3594 2
a3595 2
by a null byte.  Thus C<Z> always packs a trailing null (except when the
count is 0).
d3600 1
a3600 1
Each character of the input field of pack() generates 1 bit of the result.
d3602 2
a3603 2
input character, i.e., on C<ord($char)%2>.  In particular, characters C<"0">
and C<"1"> generate bits 0 and 1, as do characters C<"\0"> and C<"\1">.
d3606 4
a3609 4
of characters is converted to 1 character of output.  With format C<b>
the first character of the 8-tuple determines the least-significant bit of a
character, and with format C<B> it determines the most-significant bit of
a character.
d3612 1
a3612 1
remainder is packed as if the input string were padded by null characters
d3615 4
a3618 4
If the input string of pack() is longer than needed, extra characters are 
ignored. A C<*> for the repeat count of pack() means to use all the 
characters of the input field.  On unpack()ing the bits are converted to a 
string of C<"0">s and C<"1">s.
d3625 5
a3629 5
Each character of the input field of pack() generates 4 bits of the result.
For non-alphabetical characters the result is based on the 4 least-significant
bits of the input character, i.e., on C<ord($char)%16>.  In particular,
characters C<"0"> and C<"1"> generate nybbles 0 and 1, as do bytes
C<"\0"> and C<"\1">.  For characters C<"a".."f"> and C<"A".."F"> the result
d3631 1
a3631 1
C<"A"> both generate the nybble C<0xa==10>.  The result for characters
d3635 3
a3637 3
of characters is converted to 1 character of output.  With format C<h> the
first character of the pair determines the least-significant nybble of the
output character, and with format C<H> it determines the most-significant
d3641 1
a3641 1
by a null character at the end.  Similarly, during unpack()ing the "extra"
d3644 3
a3646 4
If the input string of pack() is longer than needed, extra characters are
ignored.
A C<*> for the repeat count of pack() means to use all the characters of
the input field.  On unpack()ing the nybbles are converted to a string
a3657 5
If your system has a strange pointer size (i.e. a pointer is neither as
big as an int nor as big as a long), it may not be possible to pack or
unpack pointers in big- or little-endian byte order.  Attempting to do
so will result in a fatal error.

d3660 13
a3672 17
The C</> template character allows packing and unpacking of a sequence of
items where the packed structure contains a packed item count followed by 
the packed items themselves.

For C<pack> you write I<length-item>C</>I<sequence-item> and the
I<length-item> describes how the length value is packed. The ones likely
to be of most use are integer-packing ones like C<n> (for Java strings),
C<w> (for ASN.1 or SNMP) and C<N> (for Sun XDR).

For C<pack>, the I<sequence-item> may have a repeat count, in which case
the minimum of that and the number of available items is used as argument
for the I<length-item>. If it has no repeat count or uses a '*', the number
of available items is used.

For C<unpack> an internal stack of integer arguments unpacked so far is
used. You write C</>I<sequence-item> and the repeat count is obtained by
popping off the last element from the stack. The I<sequence-item> must not
d3675 3
a3677 10
If the I<sequence-item> refers to a string type (C<"A">, C<"a"> or C<"Z">),
the I<length-item> is a string length, not a number of strings. If there is
an explicit repeat count for pack, the packed string will be adjusted to that
given length.

    unpack 'W/a', "\04Gurusamy";            gives ('Guru')
    unpack 'a3/A A*', '007 Bond  J ';       gives (' Bond', 'J')
    unpack 'a3 x2 /A A*', '007: Bond, J.';  gives ('Bond, J', '.')
    pack 'n/a* w/a','hello,','world';       gives "\000\006hello,\005world"
    pack 'a/W2', ord('a') .. ord('z');      gives '2ab'
d3689 1
a3689 1
followed by a C<!> modifier to signify native shorts or
d3744 1
a3744 1
                            unpack("W*",pack("L",0x12345678))), "\n";
d3755 2
a3756 3
If you want portable packed integers you can either use the formats
C<n>, C<N>, C<v>, and C<V>, or you can use the C<E<gt>> and C<E<lt>>
modifiers.  These modifiers are only available as of perl 5.9.2.
a3760 32
All integer and floating point formats as well as C<p> and C<P> and
C<()>-groups may be followed by the C<E<gt>> or C<E<lt>> modifiers
to force big- or little- endian byte-order, respectively.
This is especially useful, since C<n>, C<N>, C<v> and C<V> don't cover
signed integers, 64-bit integers and floating point values.  However,
there are some things to keep in mind.

Exchanging signed integers between different platforms only works
if all platforms store them in the same format.  Most platforms store
signed integers in two's complement, so usually this is not an issue.

The C<E<gt>> or C<E<lt>> modifiers can only be used on floating point
formats on big- or little-endian machines.  Otherwise, attempting to
do so will result in a fatal error.

Forcing big- or little-endian byte-order on floating point values for
data exchange can only work if all platforms are using the same
binary representation (e.g. IEEE floating point format).  Even if all
platforms are using IEEE, there may be subtle differences.  Being able
to use C<E<gt>> or C<E<lt>> on floating point values can be very useful,
but also very dangerous if you don't know exactly what you're doing.
It is definitely not a general way to portably store floating point
values.

When using C<E<gt>> or C<E<lt>> on an C<()>-group, this will affect
all types inside the group that accept the byte-order modifiers,
including all subgroups.  It will silently be ignored for all other
types.  You are not allowed to override the byte-order within a group
that already has a byte-order modifier suffix.

=item *

d3769 4
a3772 7
If you know exactly what you're doing, you can use the C<E<gt>> or C<E<lt>>
modifiers to force big- or little-endian byte-order on floating point values.

Note that Perl uses doubles (or long doubles, if configured) internally for
all numeric calculation, and converting from double into float and thence back
to double again will lose precision (i.e., C<unpack("f", pack("f", $foo)>)
will not in general equal $foo).
d3776 7
a3782 7
Pack and unpack can operate in two modes, character mode (C<C0> mode) where
the packed string is processed per character and UTF-8 mode (C<U0> mode)
where the packed string is processed in its UTF-8-encoded Unicode form on
a byte by byte basis. Character mode is the default unless the format string 
starts with an C<U>. You can switch mode at any moment with an explicit 
C<C0> or C<U0> in the format. A mode is in effect until the next mode switch 
or until the end of the ()-group in which it was entered.
d3788 1
a3788 1
could know where the characters are going to or coming from.  Therefore
d3790 1
a3790 1
sequences of characters.
d3803 1
d3808 1
a3808 1
aligned at a multiple of C<count> characters. For example, to pack() or
d3810 1
a3810 1
use the template C<W x![d] d W[2]>; this assumes that doubles must be
a3817 8
C<n>, C<N>, C<v> and C<V> accept the C<!> modifier. In this case they
will represent signed 16-/32-bit integers in big-/little-endian order.
This is only portable if all platforms sharing the packed data use the
same binary representation for signed integers (e.g. all platforms are
using two's complement representation).

=item *

d3820 1
a3820 1
modifiers and a repeat count must follow immediately.
d3832 1
a3832 1
    $foo = pack("WWWW",65,66,67,68);
d3834 1
a3834 1
    $foo = pack("W4",65,66,67,68);
a3835 2
    $foo = pack("W4",0x24b6,0x24b7,0x24b8,0x24b9);
    # same thing with Unicode circled letters.
d3837 1
a3837 6
    # same thing with Unicode circled letters. You don't get the UTF-8
    # bytes because the U at the start of the format caused a switch to
    # U0-mode, so the UTF-8 bytes get joined into characters
    $foo = pack("C0U4",0x24b6,0x24b7,0x24b8,0x24b9);
    # foo eq "\xe2\x92\xb6\xe2\x92\xb7\xe2\x92\xb8\xe2\x92\xb9"
    # This is the UTF-8 encoding of the string in the previous example
d3842 1
a3842 1
    # note: the above examples featuring "W" and "c" are true
d3845 1
a3845 1
    # $foo = pack("WWWW",193,194,195,196);
a3878 11
    $baz = pack('s.l', 12, 4, 34);
    # short 12, zero fill to position 4, long 34

    $foo = pack('nN', 42, 4711);
    # pack big-endian 16- and 32-bit unsigned integers
    $foo = pack('S>L>', 42, 4711);
    # exactly the same
    $foo = pack('s<l<', -42, 4711);
    # pack little-endian 16- and 32-bit signed integers
    $foo = pack('(sl)<', -42, 4711);
    # exactly the same
d3934 3
a3936 1
one element.
d4002 3
a4004 4
for an explanation of the format argument.  If C<use locale> is in effect,
and POSIX::setlocale() has been called, the character used for the decimal
separator in formatted floating point numbers is affected by the LC_NUMERIC
locale.  See L<perllocale> and L<POSIX>.
d4019 4
a4022 4
C<qw//>) or if its arguments cannot be adequately expressed by a prototype
(such as C<system>), prototype() returns C<undef>, because the builtin
does not really behave like a Perl function.  Otherwise, the string
describing the equivalent prototype is returned.
d4025 1
a4025 1
X<push> X<stack>
d4088 1
a4088 1
X<read> X<file, read>
a4133 2

=item readline
d4136 6
a4141 7
Reads from the filehandle whose typeglob is contained in EXPR (or from
*ARGV if EXPR is not provided).  In scalar context, each call reads and
returns the next line, until end-of-file is reached, whereupon the
subsequent call returns undef.  In list context, reads until end-of-file
is reached and returns a list of lines.  Note that the notion of "line"
used here is however you may have defined it with C<$/> or
C<$INPUT_RECORD_SEPARATOR>).  See L<perlvar/"$/">.
a4179 2

=item readpipe
a4189 1
If EXPR is omitted, uses C<$_>.
d4206 4
a4209 4
binmode() to operate with the C<:encoding(utf8)> I/O layer (see the
C<open> pragma, L<open>), the I/O will operate on UTF-8 encoded Unicode
characters, not bytes.  Similarly for the C<:encoding> pragma: in that
case pretty much any characters can be read.
a4267 4
    FORMAT
    IO
    VSTRING
    Regexp
a4278 8
The return value C<LVALUE> indicates a reference to an lvalue that is not
a variable. You get this from taking the reference of function calls like
C<pos()> or C<substr()>. C<VSTRING> is returned if the reference points
to a L<version string|perldata/"Version Strings">.

The result C<Regexp> indicates that the argument is a regular expression
resulting from C<qr//>.

a4293 3
For a platform independent C<move> function look at the L<File::Copy>
module.

d4321 2
a4322 3
mechanism, which is essentially just a variety of C<eval> with the
caveat that lexical variables in the invoking script will be invisible
to the included code.  Has semantics similar to the following subroutine:
d4386 8
a4393 6
Now that you understand how C<require> looks for files in the case of a
bareword argument, there is a little extra functionality going on behind
the scenes.  Before C<require> looks for a "F<.pm>" extension, it will
first look for a similar filename with a "F<.pmc>" extension. If this file
is found, it will be loaded in place of any file ending in a "F<.pm>"
extension.
d4403 3
a4405 31
subroutine should return nothing, or a list of up to three values in the
following order:

=over

=item 1

A filehandle, from which the file will be read.  

=item 2

A reference to a subroutine. If there is no filehandle (previous item),
then this subroutine is expected to generate one line of source code per
call, writing the line into C<$_> and returning 1, then returning 0 at
"end of file". If there is a filehandle, then the subroutine will be
called to act a simple source filter, with the line as read in C<$_>.
Again, return 1 for each valid line, and 0 after all lines have been
returned.

=item 3

Optional state for the subroutine. The state is passed in as C<$_[1]>. A
reference to the subroutine itself is passed in as C<$_[0]>.

=back

If an empty list, C<undef>, or nothing that matches the first 3 values above
is returned then C<require> will look at the remaining elements of @@INC.
Note that this file handle must be a real file handle (strictly a typeglob,
or reference to a typeglob, blessed or unblessed) - tied file handles will be
ignored and return value processing will stop there.
d4432 2
a4433 2
you must fully qualify the sub's name, as unqualified C<INC> is always forced
into package C<main>.)  Here is a typical code layout:
a4537 3
To remove a directory tree recursively (C<rm -rf> on unix) look at
the C<rmtree> function of the L<File::Path> module.

a4541 14
=item say FILEHANDLE LIST
X<say>

=item say LIST

=item say

Just like C<print>, but implicitly appends a newline.
C<say LIST> is simply an abbreviation for C<{ local $\ = "\n"; print
LIST }>.

This keyword is only available when the "say" feature is
enabled: see L<feature>.

d4586 1
a4586 1
operate on characters (for example by using the C<:encoding(utf8)> open
d4632 2
a4633 2
Returns the currently selected filehandle.  If FILEHANDLE is supplied,
sets the new current default filehandle for output.  This has two
d4776 4
a4779 4
binmode() to operate with the C<:encoding(utf8)> I/O layer (see
L</open>, or the C<open> pragma, L<open>), the I/O will operate on UTF-8
encoded Unicode characters, not bytes.  Similarly for the C<:encoding>
pragma: in that case pretty much any characters can be sent.
d4821 3
a4823 3
C<@@ARGV> array outside of a subroutine and also within the lexical scopes
established by the C<eval STRING>, C<BEGIN {}>, C<INIT {}>, C<CHECK {}>,
C<UNITCHECK {}> and C<END {}> constructs.
d4910 5
a4914 6
For delays of finer granularity than one second, the Time::HiRes module
(from CPAN, and starting from Perl 5.8 part of the standard
distribution) provides usleep().  You may also use Perl's four-argument
version of select() leaving the first three arguments undefined, or you
might be able to use the C<syscall> interface to access setitimer(2) if
your system supports it. See L<perlfaq8> for details.
d4983 2
a4984 2
The values to be compared are always passed by reference and should not
be modified.
d5219 4
a5222 3
Empty leading fields are produced when there are positive-width matches at
the beginning of the string; a zero-width match at the beginning of
the string does not produce an empty field. For example:
d5226 1
a5226 10
produces the output 'h:i :t:h:e:r:e!'. Empty trailing fields, on the other
hand, are produced when there is a match at the end of the string (and
when LIMIT is given and is not 0), regardless of the length of the match.
For example:

   print join(':', split(//,   'hi there!', -1));
   print join(':', split(/\W/, 'hi there!', -1));

produce the output 'h:i: :t:h:e:r:e:!:' and 'hi:there:', respectively,
both with an empty trailing field.
a5330 1
   %B	like %b, but using an upper-case "B" with the # flag
a5367 1

d5372 2
a5373 3
   #       ensure the leading "0" for any octal,
           prefix non-zero hexadecimal with "0x" or "0X",
           prefix non-zero binary with "0b" or "0B"
d5377 6
a5382 23
  printf '<% d>',  12;   # prints "< 12>"
  printf '<%+d>',  12;   # prints "<+12>"
  printf '<%6s>',  12;   # prints "<    12>"
  printf '<%-6s>', 12;   # prints "<12    >"
  printf '<%06s>', 12;   # prints "<000012>"
  printf '<%#o>',  12;   # prints "<014>"
  printf '<%#x>',  12;   # prints "<0xc>"
  printf '<%#X>',  12;   # prints "<0XC>"
  printf '<%#b>',  12;   # prints "<0b1100>"
  printf '<%#B>',  12;   # prints "<0B1100>"

When a space and a plus sign are given as the flags at once,
a plus sign is used to prefix a positive number.

  printf '<%+ d>', 12;   # prints "<+12>"
  printf '<% +d>', 12;   # prints "<+12>"

When the # flag and a precision are given in the %o conversion,
the precision is incremented if it's necessary for the leading "0".

  printf '<%#.5o>', 012;      # prints "<00012>"
  printf '<%#.5o>', 012345;   # prints "<012345>"
  printf '<%#.0o>', 0;        # prints "<0>"
d5450 1
a5450 9
output of the number itself should be zero-padded to this width,
where the 0 flag is ignored:

  printf '<%.6d>', 1;      # prints "<000001>"
  printf '<%+.6d>', 1;     # prints "<+000001>"
  printf '<%-10.6d>', 1;   # prints "<000001    >"
  printf '<%10.6d>', 1;    # prints "<    000001>"
  printf '<%010.6d>', 1;   # prints "<    000001>"
  printf '<%+10.6d>', 1;   # prints "<   +000001>"
a5454 3
  printf '<%10.6x>', 1;    # prints "<    000001>"
  printf '<%010.6x>', 1;   # prints "<    000001>"
  printf '<%#10.6x>', 1;   # prints "<  0x000001>"
a5466 12
If a precision obtained through C<*> is negative, it has the same
effect as no precision.

  printf '<%.*s>',  7, "string";   # prints "<string>"
  printf '<%.*s>',  3, "string";   # prints "<str>"
  printf '<%.*s>',  0, "string";   # prints "<>"
  printf '<%.*s>', -1, "string";   # prints "<string>"

  printf '<%.*d>',  1, 0;   # prints "<0>"
  printf '<%.*d>',  0, 0;   # prints "<>"
  printf '<%.*d>', -1, 0;   # prints "<0>"

d5541 1
a5541 1
  printf '<%*1$.*s>', $a, $b;
d5556 3
a5558 4
If C<use locale> is in effect, and POSIX::setlocale() has been called,
the character used for the decimal separator in formatted floating
point numbers is affected by the LC_NUMERIC locale.  See L<perllocale>
and L<POSIX>.
d5619 1
a5619 1
    srand (time ^ $$ ^ unpack "%L*", `ps axww | gzip -f`);
d5635 1
a5635 1
X<stat> X<file, status> X<ctime>
a5638 2
=item stat DIRHANDLE

d5642 3
a5644 3
the file opened via FILEHANDLE or DIRHANDLE, or named by EXPR.  If EXPR is 
omitted, it stats C<$_>.  Returns a null list if the stat fails.  Typically
used as follows:
d5695 1
a5695 1
The L<File::stat> module provides a convenient, by-name access mechanism:
d5717 1
a5717 1
    $is_directory  =  S_ISDIR($mode);
a5764 17
=item state EXPR
X<state>

=item state TYPE EXPR

=item state EXPR : ATTRS

=item state TYPE EXPR : ATTRS

C<state> declares a lexically scoped variable, just like C<my> does.
However, those variables will never be reinitialized, contrary to
lexical variables that are reinitialized each time their enclosing block
is entered.

C<state> variables are only enabled when the C<feature 'state'> pragma is
in effect.  See L<feature>.

a5856 7
    my $s = "The black cat climbed the green tree";
    my $color  = substr $s, 4, 5;	# black
    my $middle = substr $s, 4, -11;	# black cat climbed the
    my $end    = substr $s, 14;		# climbed the green tree
    my $tail   = substr $s, -4;		# tree
    my $z      = substr $s, -4, 2;	# tr

a5880 18
    my $s = "The black cat climbed the green tree";
    my $z = substr $s, 14, 7, "jumped from";	# climbed
    # $s is now "The black cat jumped from the green tree"

Note that the lvalue returned by the 3-arg version of substr() acts as
a 'magic bullet'; each time it is assigned to, it remembers which part
of the original string is being modified; for example:

    $x = '1234';
    for (substr($x,1,2)) {
        $_ = 'a';   print $x,"\n";	# prints 1a4
        $_ = 'xyz'; print $x,"\n";	# prints 1xyz4
        $x = '56789';
        $_ = 'pq';  print $x,"\n";	# prints 5pq9
    }

Prior to Perl version 5.9.1, the result of using an lvalue multiple times was
unspecified.
d6033 3
a6035 3
on characters (for example by using the C<:encoding(utf8)> I/O layer),
tell() will return byte offsets, not character offsets (because
implementing that would render sysseek() very slow).
d6113 2
a6114 2
Alternatively you might inspect the value of C<${^CHILD_ERROR_NATIVE}>
with the W*() calls of the POSIX extension.
d6160 3
a6162 3
operate on characters (for example by using the C<:encoding(utf8)> open
layer), tell() will return byte offsets, not character offsets (because
that would render seek() and tell() rather slow).
d6292 1
a6292 1
you may use either the L<Time::HiRes> module (from CPAN, and starting from
a6296 4
For date and time processing look at the many related modules on CPAN.
For a comprehensive date and time representation look at the
L<DateTime> module.

a6306 2
Note that times for children are included only after they terminate.

a6323 3
The position in the file of FILEHANDLE is left unchanged.  You may want to
call L<seek> before writing to the file.

d6417 1
a6417 1
X<unlink> X<delete> X<remove> X<rm> X<del>
a6438 2
=item unpack TEMPLATE

a6442 2
If EXPR is omitted, unpacks the C<$_> string.

d6445 1
a6445 1
of C<pack>, or the characters of the string represent a C structure of some
d6458 1
a6458 1
    sub ordinal { unpack("W",$_[0]); } # same as ord()
d6472 1
a6472 1
	unpack("%32W*",<>) % 65535;
d6527 1
a6527 1
    BEGIN { require Module; Module->import( LIST ); }
d6531 6
a6536 8
In the peculiar C<use VERSION> form, VERSION may be either a numeric
argument such as 5.006, which will be compared to C<$]>, or a literal of
the form v5.6.1, which will be compared to C<$^V> (aka $PERL_VERSION).  A
fatal error is produced if VERSION is greater than the version of the
current Perl interpreter; Perl will not attempt to parse the rest of the
file.  Compare with L</require>, which can do a similar check at run time.
Symmetrically, C<no VERSION> allows you to specify that you want a version
of perl older than the specified one.
a6542 5
Alternatively, you can use a numeric version C<use 5.006> followed by a
v-string version like C<use v5.10.1>, to avoid the unintuitive C<use
5.010_001>. (older perl versions fail gracefully at the first C<use>,
later perl versions understand the v-string syntax in the second).

a6545 1
    use 5.006; use 5.6.1;	# ditto, for compatibility and readability
a6550 4
Also, if the specified perl version is greater than or equal to 5.9.5,
C<use VERSION> will also load the C<feature> pragma and enable all
features available in the requested version.  See L<feature>.

d6559 1
a6559 2
method can be found then the call is skipped, even if there is an AUTOLOAD
method.
a6598 2
It behaves exactly as C<import> does with respect to VERSION, an
omitted LIST, empty LIST, or no unimport method being found.
a6642 6
On systems that support futimes, you might pass file handles among the
files.  On systems that don't support futimes, passing file handles
produces a fatal error at run time.  The file handles must be passed
as globs or references to be recognized.  Barewords are considered
file names.

d6702 7
a6708 4
If the string happens to be encoded as UTF-8 internally (and thus has
the UTF8 flag set), this is ignored by C<vec>, and it operates on the
internal byte string, not the conceptual character string, even if you
only have characters with values less than 256. 
d6914 1
a6914 2
C<-1> if there are no child processes.  The status is returned in C<$?>
and C<{^CHILD_ERROR_NATIVE}>.
d6924 1
a6924 1
The status is returned in C<$?> and C<{^CHILD_ERROR_NATIVE}>.  If you say
d6930 1
a6930 1
    } while $kid > 0;
d6956 2
a6957 2
in a C<BEGIN>, C<UNITCHECK>, C<CHECK>, C<INIT> or C<END> block, or
in a C<DESTROY> method.
d6964 2
a6965 3
Prints the value of LIST to STDERR.  If the last element of LIST does
not end in a newline, it appends the same file/line number text as C<die>
does.
@


1.1.1.12
log
@import perl 5.10.1
@
text
@d495 1
a495 2
The return value for C<atan2(0,0)> is implementation-defined; consult
your atan2(3) manpage for more information.
d527 1
a527 1
When LAYER is present using binmode on a text file makes sense.
d984 1
a984 1
been extirpated as a potential munition).
d1014 1
a1014 1
the first eight bytes of PLAINTEXT mattered. But alternative
d1430 1
a1430 1
5.8.2 the ordering can be different even between different runs of Perl
d1546 1
a1546 2
executed, C<eval> returns an undefined value in scalar context
or an empty list in list context, and C<$@@> is set to the
a1558 4
If you want to trap errors when loading an XS module, some problems with
the binary interface (such as Perl version skew) may be fatal even with
C<eval> unless C<$ENV{PERL_DL_NONLAZY}> is set. See L<perlrun>.

a1622 16
The assignment to C<$@@> occurs before restoration of localised variables,
which means a temporary is required if you want to mask some but not all
errors:

    # alter $@@ on nefarious repugnancy only
    {
       my $e;
       {
          local $@@; # protect existing $@@
          eval { test_repugnancy() };
          # $@@ =~ /nefarious/ and die $@@; # DOES NOT WORK
          $@@ =~ /nefarious/ and $e = $@@;
       }
       die $e if defined $e
    }

d1712 2
a1713 1
been initialized, even if the corresponding value is undefined.
d1913 1
a1913 1
    use Fcntl qw(:flock SEEK_END); # import LOCK_* and SEEK_END constants
d1916 4
a1919 5
	my ($fh) = @@_;
	flock($fh, LOCK_EX) or die "Cannot lock mailbox - $!\n";

	# and, in case someone appended while we were waiting...
	seek($fh, 0, SEEK_END) or die "Cannot seek - $!\n";
d1923 1
a1923 2
	my ($fh) = @@_;
	flock($fh, LOCK_UN) or die "Cannot unlock mailbox - $!\n";
d1926 1
a1926 1
    open(my $mbox, ">>", "/usr/spool/mail/$ENV{'USER'}")
d1929 3
a1931 3
    lock($mbox);
    print $mbox $msg,"\n\n";
    unlock($mbox);
d2092 1
a2092 1
(See C<getpriority(2)>.)  Will raise a fatal exception if used on a
a2324 5
Note that C<glob> will split its arguments on whitespace, treating
each segment as separate pattern.  As such, C<glob('*.c *.h')> would
match all files with a F<.c> or F<.h> extension.  The expression
C<glob('.* *')> would match all files in the current working directory.

d2326 1
a2326 2
C<File::Glob> extension.  See L<File::Glob> for details, including
C<bsd_glob> which does not treat whitespace as a pattern separator.
d2744 1
a2744 2
If EXPR is omitted, C<localtime()> uses the current time (as returned
by time(3)).
d2820 1
a2820 1
The match operator.  See L<perlop/"Regexp Quote-Like Operators">.
a3051 8
Simple examples to open a file for reading:

    open(my $fh, '<', "input.txt") or die $!;

and for writing:

    open(my $fh, '>', "output.txt") or die $!;

d3123 1
a3123 1
  open(my $fh, "<:encoding(UTF-8)", "file")
d3153 1
a3153 1
    open(my $tmp, "+>", undef) or die ...
d3181 1
a3181 1
    open(my $dbase, '+<', 'dbase.mine')		# open for update
d3184 1
a3184 1
    open(my $dbase, '+<dbase.mine')			# ditto
d3230 1
a3230 1
duped (as C<dup(2)>) and opened.  You may use C<&> after C<< > >>,
d3261 1
a3261 1
that file descriptor (and not call C<dup(2)>); this is more
d3374 1
a3374 1
If you want a "real" C C<open> (see C<open(2)> on your system), then you
d3397 1
a3397 1
	my $handle = IO::File->new;
a3418 2
See example at C<readdir>.

d4045 6
d4183 2
d4189 1
a4189 5
Generalized quotes.  See L<perlop/"Quote-Like Operators">.

=item qr/STRING/

Regexp-like quote.  See L<perlop/"Regexp Quote-Like Operators">.
d4270 3
a4272 3
    opendir(my $dh, $some_dir) || die "can't opendir $some_dir: $!";
    @@dots = grep { /^\./ && -f "$some_dir/$_" } readdir($dh);
    closedir $dh;
a4306 1
            last if eof;
d4308 1
d4579 1
a4579 1
called to act as a simple source filter, with the line as read in C<$_>.
d4633 1
a4633 1
    push @@INC, Foo->new(...);
d4688 1
a4688 1
    print join(", ", reverse "world", "Hello"); # Hello, world
d4690 2
a4691 1
    print scalar reverse "dlrow ,", "olleH";    # Hello, world
a4694 4
    $_ = "dlrow ,olleH";
    print reverse;                              # No output, list context
    print scalar reverse;                       # Hello, world

d4732 1
a4732 1
The substitution operator.  See L<perlop/"Regexp Quote-Like Operators">.
a5085 4
Returns C<1> for success. In the case of error, returns C<undef> if
the first argument is not a valid filehandle, or returns C<0> and sets
C<$!> for any other failure.

a5104 2
Returns the number of seconds actually slept.  

d5106 3
a5108 9

    eval {
        local $SIG{ALARM} = sub { die "Alarm!\n" };
        sleep;
    };
    die $@@ unless $@@ eq "Alarm!\n";

You probably cannot mix C<alarm> and C<sleep> calls, because C<sleep>
is often implemented using C<alarm>.
d5217 1
a5217 1
independent ways quite probably will.  See L<the sort pragma|sort>.
a5307 17
Warning: syntactical care is required when sorting the list returned from
a function. If you want to sort the list returned by the function call
C<find_records(@@key)>, you can use:

    @@contact = sort { $a cmp $b } find_records @@key;
    @@contact = sort +find_records(@@key);
    @@contact = sort &find_records(@@key);
    @@contact = sort(find_records(@@key));

If instead you want to sort the array @@key with the comparison routine
C<find_records()> then you can use:

    @@contact = sort { find_records() } @@key;
    @@contact = sort find_records(@@key);
    @@contact = sort(find_records @@key);
    @@contact = sort(find_records (@@key));

d5310 1
a5310 1
that if you're in the C<main> package and type
d5389 3
a5391 4
In scalar context, returns the number of fields found. In scalar and void
context it splits into the C<@@_> array.  Use of split in scalar and void
context is deprecated, however, because it clobbers your subroutine
arguments.
d5413 1
a5413 1
    print join(':', split(/ */, 'hi there')), "\n";
d5422 1
a5422 1
    print join(':', split(//, 'hi there')), "\n";
d5437 2
a5438 2
   print join(':', split(//,   'hi there!', -1)), "\n";
   print join(':', split(/\W/, 'hi there!', -1)), "\n";
d5465 1
a5465 1
    $header =~ s/\n(?=\s)//g;  # fix continuation lines
d5504 1
a5504 1
and see C<sprintf(3)> or C<printf(3)> on your system for an explanation of
d5585 2
a5586 2
   space   prefix non-negative number with a space
   +       prefix non-negative number with a plus sign
a6389 3
If you'd like to make C<system> (and many other bits of Perl) die on error,
have a look at the L<autodie> pragma.

d6402 2
a6403 2
If you'd like to manually inspect C<system>'s failure, you can check all
possible failure modes by inspecting C<$?> like this:
d6618 1
a6618 2
The transliteration operator.  Same as C<y///>.  See
L<perlop/"Quote and Quote-like Operators">.
d6858 7
a6864 2
versions of Perl (that is, prior to 5.6.0) that do not support this
syntax.  The equivalent numeric version should be used instead.
d6869 1
d6872 2
a6873 2
C<use>ing library modules that won't work with older versions of Perl.
(We try not to do this more than we have to.)
d7249 1
a7249 1
and C<${^CHILD_ERROR_NATIVE}>.
d7259 1
a7259 1
The status is returned in C<$?> and C<${^CHILD_ERROR_NATIVE}>.  If you say
d7374 1
a7374 2
The transliteration operator.  Same as C<tr///>.  See
L<perlop/"Quote and Quote-like Operators">.
@


1.1.1.13
log
@Perl 5.12.2 from CPAN
@
text
@d17 3
a19 3
contexts for its arguments.  If it does both, scalar arguments 
come first and list argument follow, and there can only ever
be one such list argument.  For instance, splice() has three scalar
d24 1
a24 1
list (and provide list context for elements of the list) are shown
d29 1
a29 1
Commas should separate literal elements of the LIST.
d33 2
a34 2
parentheses.)  If you use parentheses, the simple but occasionally 
surprising rule is this: It I<looks> like a function, therefore it I<is> a
d36 9
a44 9
operator or unary operator, and precedence does matter.  Whitespace
between the function and left parenthesis doesn't count, so sometimes
you need to be careful:

    print 1+2+4;      # Prints 7.
    print(1+2) + 4;   # Prints 3.
    print (1+2)+4;    # Also prints 3!
    print +(1+2)+4;   # Prints 7.
    print ((1+2)+4);  # Prints 7.
d60 1
a60 1
empty list.
d65 1
a65 1
Each operator and function decides which sort of value would be most
d81 1
a81 1
In general, functions in Perl that serve as wrappers for system calls ("syscalls")
a88 8
Extension modules can also hook into the Perl parser to define new
kinds of keyword-headed expression.  These may look like functions, but
may also look completely different.  The syntax following the keyword
is defined entirely by the extension.  If you are an implementor, see
L<perlapi/PL_keyword_plugin> for the mechanism.  If you are using such
a module, see the module's documentation for details of the syntax that
it defines.

d163 1
a163 1
(These are available only if you enable the C<"switch"> feature.
d171 1
a171 1
(C<state> is available only if the C<"state"> feature is enabled. See
d186 1
a186 1
=item Keywords related to Perl modules
d240 1
a240 1
* C<sub> was a keyword in Perl 4, but in Perl 5 it is an
d281 1
a281 1
=over 
d302 33
a334 33
    -r  File is readable by effective uid/gid.
    -w  File is writable by effective uid/gid.
    -x  File is executable by effective uid/gid.
    -o  File is owned by effective uid.

    -R  File is readable by real uid/gid.
    -W  File is writable by real uid/gid.
    -X  File is executable by real uid/gid.
    -O  File is owned by real uid.

    -e  File exists.
    -z  File has zero size (is empty).
    -s  File has nonzero size (returns size in bytes).

    -f  File is a plain file.
    -d  File is a directory.
    -l  File is a symbolic link.
    -p  File is a named pipe (FIFO), or Filehandle is a pipe.
    -S  File is a socket.
    -b  File is a block special file.
    -c  File is a character special file.
    -t  Filehandle is opened to a tty.

    -u  File has setuid bit set.
    -g  File has setgid bit set.
    -k  File has sticky bit set.

    -T  File is an ASCII text file (heuristic guess).
    -B  File is a "binary" file (opposite of -T).

    -M  Script start time minus file modification time, in days.
    -A  Same for access time.
    -C  Same for inode change time (Unix, may differ for other platforms)
d339 3
a341 3
        chomp;
        next unless -f $_;  # ignore specials
        #...
d363 2
a364 2
test whether the permission can (not) be granted using the
access(2) family of system calls.  Also note that the C<-x> and C<-X> may
d374 1
a374 1
C<-exp($foo)> still works as expected, however: only single letters
d381 1
a381 1
containing a zero byte in the first block is considered a binary file.  If C<-T>
d383 1
a383 1
rather than the first block.  Both C<-T> and C<-B> return true on an empty
d392 1
a392 1
that lstat() and C<-l> leave values in the stat structure for the
d411 1
a411 1
C<-x $file && -w _ && -f _>. (This is only fancy fancy: if you use
d426 1
a426 1
Accepts an incoming socket connect, just as accept(2) 
d460 2
a461 2
It is usually a mistake to intermix C<alarm> and C<sleep> calls, because
C<sleep> may be internally implemented on your system with C<alarm>.
d470 4
a473 4
        local $SIG{ALRM} = sub { die "alarm\n" }; # NB: \n required
        alarm $timeout;
        $nread = sysread SOCKET, $buffer, $size;
        alarm 0;
d476 2
a477 2
        die unless $@@ eq "alarm\n";   # propagate unexpected errors
        # timed out
d480 1
a480 1
        # didn't
d501 1
a501 1
Binds a network address to a socket, just as bind(2)
d527 1
a527 1
directives. The directives alter the behaviour of the filehandle.
d534 3
a536 3
Camel, 3rd edition) or elsewhere, C<:raw> is I<not> simply the inverse of C<:crlf>.
Other layers that would affect the binary nature of the stream are
I<also> disabled. See L<PerlIO>, L<perlrun>, and the discussion about the
d539 1
a539 1
The C<:bytes>, C<:crlf>, C<:utf8>, and any other directives of the
d556 1
a556 1
is done on the filehandle.  Calling binmode() normally flushes any
d563 1
a563 1
internally Perl operates on UTF8-encoded Unicode characters.
d590 1
a590 1
binmode() is important not only for readline() and print() operations,
d621 1
a621 1
This keyword is enabled by the C<"switch"> feature: see L<feature>
d630 2
a631 2
returns the caller's package name if there I<is> a caller (that is, if
we're in a subroutine or C<eval> or C<require>) and the undefined value
d672 1
a672 1
might not return information about the call frame you expect it to, for
a675 14
Also be aware that setting C<@@DB::args> is I<best effort>, intended for
debugging or generating backtraces, and should not be relied upon. In
particular, as C<@@_> contains aliases to the caller's arguments, Perl does
not take a copy of C<@@_>, so C<@@DB::args> will contain modifications the
subroutine makes to C<@@_> or its contents, not the original values at call
time. C<@@DB::args>, like C<@@_>, does not hold explicit references to its
elements, so under certain cases its elements may have become freed and
reallocated for other variables or temporary values. Finally, a side effect
of the current implementation means that the effects of C<shift @@_> can
I<normally> be undone (but not C<pop @@_> or other splicing, and not if a
reference to C<@@_> has been taken, and subject to the caveat about reallocated
elements), so C<@@DB::args> is actually a hybrid of the current state and
initial state of C<@@_>. Buyer beware.

d691 1
a691 1
neither is set, C<chdir> does nothing. It returns true on success,
d694 3
a696 3
On systems that support fchdir(2), you may pass a filehandle or
directory handle as argument.  On systems that don't support fchdir(2),
passing handles raises an exception.
d704 1
a704 1
C<0644> is okay, but C<"0644"> is not.  Returns the number of files
d707 1
a707 1
    $cnt = chmod 0755, "foo", "bar";
d709 1
a709 1
    $mode = "0644"; chmod $mode, "foo";      # !!! sets mode to
d711 2
a712 2
    $mode = "0644"; chmod oct($mode), "foo"; # this is better
    $mode = 0644;   chmod $mode, "foo";      # this is best
d714 5
a718 4
On systems that support fchmod(2), you may pass filehandles among the
files.  On systems that don't support fchmod(2), passing filehandles raises
an exception.  Filehandles must be passed as globs or glob references to be
recognized; barewords are considered filenames.
d724 1
a724 1
You can also import the symbolic C<S_I*> constants from the C<Fcntl>
d727 2
a728 1
    use Fcntl qw( :mode );
d730 1
a730 1
    # Identical to the chmod 0755 of the example above.
d752 3
a754 3
        chomp;  # avoid \n on last field
        @@array = split(/:/);
        # ...
d808 5
a812 4
On systems that support fchown(2), you may pass filehandles among the
files.  On systems that don't support fchown(2), passing filehandles raises
an exception.  Filehandles must be passed as globs or glob references to be
recognized; barewords are considered filenames.
d822 1
a822 1
        or die "$user not in passwd file";
d824 1
a824 1
    @@ary = glob($pattern);  # expand filenames
d846 1
a846 1
except under the L<bytes> pragma, where the low eight bits of the value
d875 1
a875 1
Closes the file or pipe associated with the filehandle, flushes the IO
d882 1
a882 1
another C<open> on it, because C<open> closes it for you.  (See
d886 13
a898 12
If the filehandle came from a piped open, C<close> returns false if one of
the other syscalls involved fails or if its program exits with non-zero
status.  If the only problem was that the program exited non-zero, C<$!>
will be set to C<0>.  Closing a pipe also waits for the process executing
on the pipe to exit--in case you wish to look at the output of the pipe
afterwards--and implicitly puts the exit status value of that command into
C<$?> and C<${^CHILD_ERROR_NATIVE}>.

Closing the read end of a pipe before the process writing to it at the
other end is done writing results in the writer receiving a SIGPIPE.  If
the other end can't handle that, be sure to read all the data before
closing the pipe.
d904 2
a905 2
    #...                        # print stuff to output
    close OUTPUT                # wait for sort to finish
d908 1
a908 1
    open(INPUT, 'foo')          # get sort's results
d923 2
a924 2
Attempts to connect to a remote socket, just like connect(2).
Returns true if it succeeded, false otherwise.  NAME should be a
d942 1
a942 1
block; C<last> and C<redo> behave as if they had been executed within
d947 2
a948 2
        ### redo always comes here
        do_something;
d950 3
a952 3
        ### next always comes here
        do_something_else;
        # then back the top to re-check EXPR
d956 2
a957 2
Omitting the C<continue> section is equivalent to using an
empty one, logically enough, so C<next> goes directly back
d960 3
a962 3
If the C<"switch"> feature is enabled, C<continue> is also a
function that exits the current C<when> (or C<default>) block and
falls through to the next one.  See L<feature> and
d1017 1
a1017 1
and implementations on non-Unix platforms may produce different
d1039 1
a1039 1
        die "Sorry...\n";
d1041 1
a1041 1
        print "ok\n";
d1076 1
a1076 1
only the older DBM functions, you may make only one C<dbmopen> call in your
d1083 2
a1084 2
either use file tests or try setting a dummy hash entry inside an C<eval> 
to trap the error.
d1093 1
a1093 1
        print $key, ' = ', unpack('L',$val), "\n";
d1106 1
a1106 1
        or die "Can't open netscape history file: $!";
d1114 1
a1114 1
the undefined value C<undef>.  If EXPR is not present, C<$_> is
d1129 1
a1129 1
declarations of C<&func>.  A subroutine that is not defined
d1131 1
a1131 1
makes it spring into existence the first time that it is called; see
d1151 1
a1151 1
        unless defined($value = readlink $sym);
d1161 1
a1161 1
The pattern match succeeds and C<$1> is defined, although it
d1166 1
a1166 1
should use C<defined> only when questioning the integrity of what
d1175 11
a1185 29
Given an expression that specifies an element or slice of a hash, C<delete>
deletes the specified elements from that hash so that exists() on that element
no longer returns true.  Setting a hash element to the undefined value does
not remove its key, but deleting it does; see L</exists>.

It returns the value or values deleted in list context, or the last such
element in scalar context.  The return list's length always matches that of
the argument list: deleting non-existent elements returns the undefined value
in their corresponding positions.

delete() may also be used on arrays and array slices, but its behavior is less
straightforward.  Although exists() will return false for deleted entries,
deleting array elements never changes indices of existing values; use shift()
or splice() for that.  However, if all deleted elements fall at the end of an
array, the array's size shrinks to the position of the highest element that
still tests true for exists(), or to 0 if none do.

B<Be aware> that calling delete on array values is deprecated and likely to
be removed in a future version of Perl.

Deleting from C<%ENV> modifies the environment.  Deleting from a hash tied to
a DBM file deletes the entry from the DBM file.  Deleting from a C<tied> hash
or array may not necessarily return anything; it depends on the implementation
of the C<tied> package's DELETE method, which may do whatever it pleases.

The C<delete local EXPR> construct localizes the deletion to the current
block at run time.  Until the block exits, elements locally deleted
temporarily no longer exist.  See L<perlsub/"Localized deletion of elements
of composite types">.
d1192 10
d1205 1
a1205 1
        delete $HASH{$key};
d1209 1
a1209 1
        delete $ARRAY[$index];
d1218 2
a1219 3
But both are slower than assigning the empty list
or undefining %HASH or @@ARRAY, which is the customary 
way to empty out an aggregate:
d1221 2
a1222 2
    %HASH = ();     # completely empty %HASH
    undef %HASH;    # forget %HASH ever existed
d1224 2
a1225 2
    @@ARRAY = ();    # completely empty @@ARRAY
    undef @@ARRAY;   # forget @@ARRAY ever existed
d1227 3
a1229 2
The EXPR can be arbitrarily complicated provided its
final operation is an element or slice of an aggregate:
d1240 7
a1246 5
C<die> raises an exception. Inside an C<eval> the error message is stuffed
into C<$@@> and the C<eval> is terminated with the undefined value.
If the exception is outside of all enclosing C<eval>s, then the uncaught
exception prints LIST to C<STDERR> and exits with a non-zero value. If you
need to exit the process with a specific exit code, see L<exit>.
d1272 3
a1274 1
If the output is empty and C<$@@> already contains a value (typically from a
d1281 1
a1281 1
If the output is empty and C<$@@> contains an object reference that has a
d1284 1
a1284 1
C<$@@>.  i.e., as if C<< $@@ = eval { $@@->PROPAGATE(__FILE__, __LINE__) }; >>
d1289 10
a1298 22
If an uncaught exception results in interpreter exit, the exit code is
determined from the values of C<$!> and C<$?> with this pseudocode:

    exit $! if $!;              # errno
    exit $? >> 8 if $? >> 8;    # child exit status
    exit 255;                   # last resort

The intent is to squeeze as much possible information about the likely cause
into the limited space of the system exit code. However, as C<$!> is the value
of C's C<errno>, which can be set by any system call, this means that the value
of the exit code used by C<die> can be non-predictable, so should not be relied
upon, other than to be non-zero.

You can also call C<die> with a reference argument, and if this is trapped
within an C<eval>, C<$@@> contains that reference.  This permits more
elaborate exception handling using objects that maintain arbitrary state
about the exception.  Such a scheme is sometimes preferable to matching
particular string values of C<$@@> with regular expressions.  Because C<$@@> 
is a global variable and C<eval> may be used within object implementations,
be careful that analyzing the error object doesn't replace the reference in
the global variable.  It's easiest to make a local copy of the reference
before any manipulations.  Here's an example:
d1300 1
a1300 1
    use Scalar::Util "blessed";
d1312 2
a1313 2
Because Perl stringifies uncaught exception messages before display,
you'll probably want to overload stringification operations on
d1318 1
a1318 1
handler is called with the error text and can change the error
d1323 1
a1323 1
currently so: the C<$SIG{__DIE__}> hook is currently called
d1327 1
a1327 1
    die @@_ if $^S;
a1332 2
See also exit(), warn(), and the Carp module.

d1377 1
a1377 1
Inclusion of library modules is better done with the
d1387 6
a1392 6
    {
        unless ($return = do $file) {
            warn "couldn't parse $file: $@@" if $@@;
            warn "couldn't do $file: $!"    unless defined $return;
            warn "couldn't run $file"       unless $return;
        }
d1412 1
a1412 1
resulting confusion by Perl.
d1422 4
a1425 8
=item each ARRAY
X<array, iterator>

When called in list context, returns a 2-element list consisting of the key
and value for the next element of a hash, or the index and value for the
next element of an array, so that you can iterate over it.  When called in
scalar context, returns only the key (not the value) in a hash, or the index
in an array.
d1427 2
a1428 2
Hash entries are returned in an apparently random order.  The actual random
order is subject to change in future versions of Perl, but it is
d1434 10
a1443 10
After C<each> has returned all entries from the hash or array, the next
call to C<each> returns the empty list in list context and C<undef> in
scalar context.  The next call following that one restarts iteration.  Each
hash or array has its own internal iterator, accessed by C<each>, C<keys>,
and C<values>.  The iterator is implicitly reset when C<each> has reached
the end as just described; it can be explicitly reset by calling C<keys> or
C<values> on the hash or array.  If you add or delete a hash's elements
while iterating over it, entries may be skipped or duplicated--so don't do
that.  Exception: It is always safe to delete the item most recently
returned by C<each()>, so the following code works properly:
d1450 2
a1451 2
This prints out your environment like the printenv(1) program,
but in a different order:
d1454 1
a1454 1
        print "$key=$value\n";
d1471 1
a1471 1
reads a character and then C<ungetc>s it, so isn't useful in an
d1477 1
a1477 1
with empty parentheses is different.  It refers to the pseudo file
d1488 1
a1488 1
detect the end of each file, C<eof()> will detect the end of only the
d1493 2
a1494 2
        next if /^\s*#/;  # skip comments
        print "$.\t$_";
d1496 1
a1496 1
        close ARGV if eof;  # Not eof()!
d1501 5
a1505 5
        if (eof()) {  # check for end of last file
            print "--------------\n";
        }
        print;
        last if eof();          # needed if we're reading from a terminal
d1549 2
a1550 2
error message.  If there was no error, C<$@@> is guaranteed to be the empty
string.  Beware that using C<eval> neither silences Perl from printing
d1577 1
a1577 1
    eval { $answer = }; # WRONG
d1580 1
a1580 1
    eval '$answer =';   # sets $@@
d1586 1
a1586 1
as this example shows:
d1588 1
a1588 1
    # a private exception trap for divide-by-zero
d1609 2
a1610 2
    eval $x;        # CASE 1
    eval "$x";      # CASE 2
d1612 2
a1613 2
    eval '$x';      # CASE 3
    eval { $x };    # CASE 4
d1615 2
a1616 2
    eval "\$$x++";  # CASE 5
    $$x++;          # CASE 6
d1648 4
a1651 4
An C<eval ''> executed within the C<DB> package doesn't see the usual
surrounding lexical scope, but rather the scope of the first non-DB piece
of code that called it. You don't normally need to worry about this unless
you are writing a Perl debugger.
d1658 1
a1658 1
The C<exec> function executes a system command I<and never returns>;
d1664 2
a1665 2
warns you if there is a following statement that isn't C<die>, C<warn>,
or C<exit> (if C<-w> is set--but you always do that, right?).   If you
d1693 1
a1693 1
    exec $shell '-sh';    # pretend it's a login shell
d1697 1
a1697 1
    exec {'/bin/csh'} '-sh';  # pretend it's a login shell
d1699 2
a1700 2
When the arguments get executed via the system shell, results are
subject to its quirks and capabilities.  See L<perlop/"`STRING`">
d1716 3
a1718 3
program, passing it C<"surprise"> an argument.  The second version didn't;
it tried to run a program named I<"echo surprise">, didn't find it, and set
C<$?> to a non-zero value indicating failure.
d1720 1
a1720 1
Beginning with v5.6.0, Perl attempts to flush all files opened for
d1724 1
a1724 1
open handles to avoid lost output.
d1726 2
a1727 2
Note that C<exec> will not call your C<END> blocks, nor will it invoke
C<DESTROY> methods on your objects.
d1732 3
a1734 3
Given an expression that specifies an element of a hash, returns true if the
specified element in the hash has ever been initialized, even if the
corresponding value is undefined.
d1736 2
a1737 2
    print "Exists\n"    if exists $hash{$key};
    print "Defined\n"   if defined $hash{$key};
d1740 2
a1741 7
exists may also be called on array elements, but its behavior is much less
obvious, and is strongly tied to the use of L</delete> on arrays.  B<Be aware>
that calling exists on array values is deprecated and likely to be removed in
a future version of Perl.

    print "Exists\n"    if exists $array[$index];
    print "Defined\n"   if defined $array[$index];
d1750 1
a1750 1
does not count as declaring it.  Note that a subroutine that does not
d1753 1
a1753 1
called; see L<perlsub>.
d1755 2
a1756 2
    print "Exists\n"  if exists &subroutine;
    print "Defined\n" if defined &subroutine;
d1761 2
a1762 2
    if (exists $ref->{A}->{B}->{$key})  { }
    if (exists $hash{A}{B}{$key})       { }
d1764 2
a1765 2
    if (exists $ref->{A}->{B}->[$ix])   { }
    if (exists $hash{A}{B}[$ix])        { }
d1769 2
a1770 2
Although the mostly deeply nested array or hash will not spring into
existence just because its existence was tested, any intervening ones will.
d1773 1
a1773 1
This happens anywhere the arrow operator is used, including even here:
d1776 2
a1777 2
    if (exists $ref->{"Some key"})    { }
    print $ref;  # prints HASH(0x80d3d5c)
d1786 2
a1787 2
    exists &sub;    # OK
    exists &sub();  # Error
d1833 1
a1833 1
value returned work just like C<ioctl> below.
d1838 1
a1838 1
        or die "can't fcntl F_GETFL: $!";
d1846 1
a1846 1
Note that C<fcntl> raises an exception if used on a machine that
d1875 1
a1875 1
        print "THIS and THAT are dups\n";
d1889 1
a1889 1
entire files only, not records.
d1909 2
a1910 2
LOCK_SH or LOCK_EX then C<flock> returns immediately rather than blocking
waiting for the lock; check the return status to see if you got it.
d1930 1
a1930 1
Perl.
d1937 2
a1938 2
        my ($fh) = @@_;
        flock($fh, LOCK_EX) or die "Cannot lock mailbox - $!\n";
d1940 2
a1941 2
        # and, in case someone appended while we were waiting...
        seek($fh, 0, SEEK_END) or die "Cannot seek - $!\n";
d1945 2
a1946 2
        my ($fh) = @@_;
        flock($fh, LOCK_UN) or die "Cannot unlock mailbox - $!\n";
d1950 1
a1950 1
        or die "Can't open mailbox: $!";
d1956 3
a1958 3
On systems that support a real flock(2), locks are inherited across fork()
calls, whereas those that must resort to the more capricious fcntl(2)
function lose their locks, making it seriously harder to write servers.
d1974 1
a1974 1
Beginning with v5.6.0, Perl attempts to flush all files opened for
d1978 1
a1978 1
C<IO::Handle> on any open handles to avoid duplicate output.
d1998 2
a1999 2
        Test: @@<<<<<<<< @@||||| @@>>>>>
              $str,     $%,    '$' . int($num)
d2021 1
a2021 1
that the C<~> and C<~~> tokens treat the entire PICTURE as a single line.
d2023 1
a2023 1
record format, just like the C<format> compiler.
d2035 1
a2035 1
or the undefined value at end of file or if there was an error (in
d2042 1
a2042 1
        system "stty cbreak </dev/tty >/dev/tty 2>&1";
d2045 1
a2045 1
        system "stty", '-icanon', 'eol', "\001";
d2051 1
a2051 1
        system "stty -cbreak </dev/tty >/dev/tty 2>&1";
d2054 1
a2054 1
        system 'stty', 'icanon', 'eol', '^@@'; # ASCII NUL
d2070 2
a2071 2
systems returns the current login from F</etc/utmp>, if any.  If it
returns the empty string, use C<getpwuid>.
d2106 1
a2106 1
be portable, this behavior is not reflected by the Perl-level function
d2184 2
a2185 2
These routines are the same as their counterparts in the
system C library.  In list context, the return values from the
d2196 1
a2196 1
(If the entry doesn't exist you get an empty list.)
d2219 1
a2219 1
in that they are unsupported on many systems.  If the
d2233 1
a2233 1
files are supported only if your vendor has implemented them in the
d2245 3
a2247 3
C<@@addrs> value returned by a successful call is a list of raw
addresses returned by the corresponding library call.  In the
Internet domain, each address is four bytes long; you can unpack it
d2313 1
a2313 1
number of TCP, which you can get using C<getprotobyname>.
d2315 6
a2320 6
The function returns a packed string representing the requested socket
option, or C<undef> on error, with the reason for the error placed in
C<$!>). Just what is in the packed string depends on LEVEL and OPTNAME;
consult getsockopt(2) for details.  A common case is that the option is an
integer, in which case the result is a packed integer, which you can decode
using C<unpack> with the C<i> (or C<I>) format.
d2322 1
a2322 1
An example to test whether Nagle's algorithm is turned on on a socket:
d2327 1
a2327 1
        or die "Could not determine the protocol number for tcp";
d2330 1
a2330 1
        or die "getsockopt TCP_NODELAY: $!";
d2348 4
a2351 11
Note that C<glob> splits its arguments on whitespace and treats
each segment as separate pattern.  As such, C<glob("*.c *.h")> 
matches all files with a F<.c> or F<.h> extension.  The expression
C<glob(".* *")> matchs all files in the current working directory.

If non-empty braces are the only wildcard characters used in the
C<glob>, no filenames are matched, but potentially many strings
are returned.  For example, this produces nine strings, one for
each pairing of fruits and colors:

    @@many =  glob "{apple,tomato,cherry}={green,yellow,red}";
d2378 12
a2389 9
The C<goto-LABEL> form finds the statement labeled with LABEL and
resumes execution there. It can't be used to get out of a block or
subroutine given to C<sort>.  It can be used to go almost anywhere
else within the dynamic scope, including out of subroutines, but it's
usually better to use some other construct such as C<last> or C<die>.
The author of Perl has never felt the need to use this form of C<goto>
(in Perl, that is; C is another matter).  (The difference is that C
does not offer named loops combined with loop control.  Perl does, and
this replaces most structured uses of C<goto> in other languages.)
a2396 6
Use of C<goto-LABEL> or C<goto-EXPR> to jump into a construct is
deprecated and will issue a warning.  Even then, it may not be used to
go into any construct that requires initialization, such as a
subroutine or a C<foreach> loop.  It also can't be used to go into a
construct that is optimized away.

d2443 1
a2443 1
the list elements, C<$_> keeps being lexical inside the block; i.e., it
d2495 1
a2495 1
towards C<0>, and two because machine representations of floating-point
d2507 1
a2507 1
    require "sys/ioctl.ph";  # probably in $Config{archlib}/sys/ioctl.ph
d2514 1
a2514 1
written depending on the FUNCTION; a C pointer to the string value of SCALAR
d2524 4
a2527 4
    if OS returns:      then Perl returns:
        -1               undefined value
         0              string "0 but true"
    anything else           that number
d2553 2
a2554 1
=item keys ARRAY
d2556 2
a2557 5
Returns a list consisting of all the keys of the named hash, or the indices
of an array. (In scalar context, returns the number of keys or indices.)

The keys of a hash are returned in an apparently random order.  The actual
random order is subject to change in future versions of Perl, but it
d2564 1
a2564 1
As a side effect, calling keys() resets the HASH or ARRAY's internal iterator
d2573 1
a2573 1
        print pop(@@keys), '=', pop(@@values), "\n";
d2579 1
a2579 1
        print $key, '=', $ENV{$key}, "\n";
d2589 1
a2589 1
        printf "%4d %s\n", $hash{$key}, $key;
d2592 1
a2592 1
Used as an lvalue, C<keys> allows you to increase the number of hash buckets
d2605 1
a2605 2
as trying has no effect). C<keys @@array> in an lvalue context is a syntax
error.
d2619 2
a2620 2
If SIGNAL is zero, no signal is sent to the process, but C<kill>
checks whether it's I<possible> to send a signal to it (that
d2622 1
a2622 1
the super-user).  This is useful to check that a child process is still
d2626 5
a2630 7
Unlike in the shell, if SIGNAL is negative, it kills process groups instead
of processes. That means you usually want to use positive not negative signals.
You may also use a signal name in quotes.

The behavior of kill when a I<PROCESS> number is zero or negative depends on
the operating system.  For example, on POSIX-conforming systems, zero will
signal the current process group and -1 will signal all processes.
d2645 2
a2646 2
        last LINE if /^$/;  # exit when done with header
        #...
d2649 1
a2649 1
C<last> cannot be used to exit a block that returns a value such as
d2666 3
a2668 1
implementing the C<\L> escape in double-quoted strings.
a2671 51
What gets returned depends on several factors:

=over

=item If C<use bytes> is in effect:

=over

=item On EBCDIC platforms

The results are what the C language system call C<tolower()> returns.

=item On ASCII platforms

The results follow ASCII semantics.  Only characters C<A-Z> change, to C<a-z>
respectively.

=back

=item Otherwise, If EXPR has the UTF8 flag set

If the current package has a subroutine named C<ToLower>, it will be used to
change the case (See L<perlunicode/User-Defined Case Mappings>.)
Otherwise Unicode semantics are used for the case change.

=item Otherwise, if C<use locale> is in effect

Respects current LC_CTYPE locale.  See L<perllocale>.

=item Otherwise, if C<use feature 'unicode_strings'> is in effect:

Unicode semantics are used for the case change.  Any subroutine named
C<ToLower> will not be used.

=item Otherwise:

=over

=item On EBCDIC platforms

The results are what the C language system call C<tolower()> returns.

=item On ASCII platforms

ASCII semantics are used for the case change.  The lowercase of any character
outside the ASCII range is the character itself.

=back

=back

d2679 3
a2681 1
double-quoted strings.
a2684 3
This function behaves the same way under various pragma, such as in a locale,
as L</lc> does.

d2691 11
a2701 10
omitted, returns length of C<$_>.  If EXPR is undefined, returns C<undef>.

This function cannot be used on an entire array or hash to find out how
many elements these have.  For that, use C<scalar @@array> and C<scalar keys
%hash>, respectively.

Like all Perl character operations, length() normally deals in logical
characters, not physical bytes.  For how many bytes a string encoded as
UTF-8 would take up, use C<length(Encode::encode_utf8(EXPR))> (you'll have
to C<use Encode> first).  See L<Encode> and L<perlunicode>.
d2712 1
a2712 1
Does the same thing that the listen(2) system call does.  Returns true if
a2727 4
The C<delete local EXPR> construct can also be used to localize the deletion
of array/hash elements to the current block.
See L<perlsub/"Localized deletion of elements of composite types">.

d2755 1
a2755 1
to get a 4-digit year is simply:
d2815 2
a2816 2
instead.  If you are not under C<use threads::shared> this does nothing.
See L<threads::shared>.
d2829 2
a2830 2
        my $n = shift;
        return log($n)/log(10);
d2874 1
a2874 1
        $hash{get_a_key_for($_)} = $_;
d2890 3
a2892 3
the start of map BLOCK LIST or map EXPR, LIST. Because Perl doesn't look
ahead for the closing C<}> it has to take a guess at which it's dealing with
based on what it finds just after the C<{>. Usually it gets it right, but if it
d2895 2
a2896 2
reported close to the C<}>, but you'll need to change something near the C<{>
such as using a unary C<+> to give Perl some help:
d2898 5
a2902 5
    %hash = map {  "\L$_" => 1  } @@array  # perl guesses EXPR.  wrong
    %hash = map { +"\L$_" => 1  } @@array  # perl guesses BLOCK. right
    %hash = map { ("\L$_" => 1) } @@array  # this also works
    %hash = map {  lc($_) => 1  } @@array  # as does this.
    %hash = map +( lc($_) => 1 ), @@array  # this is EXPR and works!
d2904 1
a2904 1
    %hash = map  ( lc($_), 1 ),   @@array  # evaluates to (1, @@array)
d2908 1
a2908 1
   @@hashes = map +{ lc($_) => 1 }, @@array # EXPR, so needs comma at end
d2910 1
a2910 1
to get a list of anonymous hashes each with only one entry apiece.
d2937 1
a2937 1
To recursively create a directory structure, look at
d3012 2
a3013 2
        next LINE if /^#/;  # discard comments
        #...
d3017 1
a3017 1
executed even on discarded lines.  If LABEL is omitted, the command
d3030 2
a3031 3
=item no MODULE VERSION LIST
X<no declarations>
X<unimporting>
d3033 1
a3033 1
=item no MODULE VERSION
d3035 1
a3035 1
=item no MODULE LIST
d3037 1
a3037 1
=item no MODULE
d3052 2
a3053 2
The following will handle decimal, binary, octal, and hex in standard
Perl notation:
d3060 2
a3061 2
    $dec_perms = (stat("filename"))[2] & 07777;
    $oct_perm_str = sprintf "%o", $perms;
d3064 3
a3066 7
to be converted into a file mode, for example.  Although Perl 
automatically converts strings into numbers as needed, this automatic
conversion assumes base 10.

Leading white space is ignored without warning, as too are any trailing 
non-digits, such as a decimal point (C<oct> only handles non-negative
integers, not negative integers or floating point).
d3105 1
a3105 1
the filename are separate. If MODE is C<< '<' >> or nothing, the file
d3112 2
a3113 2
C<< '+<' >> is almost always preferred for read/write updates--the 
C<< '+>' >> mode would clobber the file first.  You can't usually use
d3117 1
a3117 1
modified by the process's C<umask> value.
d3122 3
a3124 3
In the two-argument (and one-argument) form of the call, the mode and
filename should be concatenated (in that order), possibly separated by
spaces.  You may omit the mode in these forms when that mode is
d3129 1
a3129 1
C<'|'>, the filename is interpreted as a command that pipes output to
d3138 2
a3139 2
is C<'-|'>, the filename is interpreted as a command that pipes
output to us.  In the two-argument (and one-argument) form, one should
d3146 1
a3146 1
In the form of pipe opens taking three or more arguments, if LIST is specified
d3150 1
a3150 1
defined, but experimental "layers" may give extra LIST arguments
d3153 2
a3154 2
In the two-argument (and one-argument) form, opening C<< '<-' >> 
or C<'-'> opens STDIN and opening C<< '>-' >> opens STDOUT.
d3156 2
a3157 2
You may use the three-argument form of open to specify I/O layers
(sometimes referred to as "disciplines") to apply to the handle
d3159 1
a3159 1
L<PerlIO> for more details). For example:
d3161 1
a3161 2
  open(my $fh, "<:encoding(UTF-8)", "filename")
    || die "can't open UTF-8 encoded filename: $!";
d3163 1
a3163 1
opens the UTF-8 encoded file containing Unicode characters;
d3165 1
a3165 1
three-argument form, then default layers stored in ${^OPEN} (see L<perlvar>;
d3168 1
a3168 1
Open returns nonzero on success, the undefined value otherwise.  If
d3176 2
a3177 2
like Unix, Mac OS, and Plan 9, that end lines with a single
character and encode that character in C as C<"\n"> do not
d3180 2
a3181 2
When opening a file, it's seldom a good idea to continue 
if the request failed, so C<open> is frequently used with
d3183 4
a3186 3
where you want to format a suitable error message (but there are
modules that can help with that problem)) always check
the return value from opening a file.  
d3198 3
a3200 3
Since v5.8.0, Perl has built using PerlIO by default.  Unless you've
changed this (i.e., Configure -Uuseperlio), you can open filehandles 
directly to Perl scalars via:
d3204 2
a3205 1
To (re)open C<STDOUT> or C<STDERR> as an in-memory file, close it first:
d3210 1
a3210 1
General examples:
d3216 1
a3216 1
    open(LOG, '>>/usr/spool/news/twitlog');  # (log is reserved)
d3219 2
a3220 2
    open(my $dbase, '+<', 'dbase.mine')      # open for update
        or die "Can't open 'dbase.mine' for update: $!";
d3222 2
a3223 2
    open(my $dbase, '+<dbase.mine')          # ditto
        or die "Can't open 'dbase.mine' for update: $!";
d3225 2
a3226 2
    open(ARTICLE, '-|', "caesar <$article")  # decrypt article
        or die "Can't start caesar: $!";
d3228 2
a3229 2
    open(ARTICLE, "caesar <$article |")      # ditto
        or die "Can't start caesar: $!";
d3231 2
a3232 2
    open(EXTRACT, "|sort >Tmp$$")            # $$ is our process id
        or die "Can't start sort: $!";
d3234 1
a3234 1
    # in-memory files
d3236 2
a3237 2
        or die "Can't open memory file: $!";
    print MEMORY "foo!\n";                   # output will appear in $var
d3242 1
a3242 1
        process($file, 'fh00');
d3246 15
a3260 15
        my($filename, $input) = @@_;
        $input++;    # this is a string increment
        unless (open($input, $filename)) {
            print STDERR "Can't open $filename: $!\n";
            return;
        }

        local $_;
        while (<$input>) {    # note use of indirection
            if (/^#include "(.*)"/) {
                process($1, $input);
                next;
            }
            #...          # whatever
        }
d3285 2
a3286 2
    select STDERR; $| = 1;  # make unbuffered
    select STDOUT; $| = 1;  # make unbuffered
d3288 2
a3289 2
    print STDOUT "stdout 1\n";  # this works for
    print STDERR "stderr 1\n";  # subprocesses too
d3328 1
a3328 1
On many Unix systems fdopen() fails when file descriptors exceed a
d3341 1
a3341 1
The filehandle behaves normally for the parent, but I/O to that
d3343 2
a3344 2
In the child process, the filehandle isn't opened--I/O happens from/to
the new STDOUT/STDIN.  Typically this is used like the normal
d3346 2
a3347 3
pipe command gets executed, such as when running setuid and
you don't want to have to scan shell commands for metacharacters.

d3363 1
a3363 1
Unix) you can use the list form.
d3406 1
a3406 1
but will not work on a filename that happens to have a trailing space, while
d3420 1
a3420 1
        or die "sysopen $path: $!";
d3434 8
a3441 8
        my $ALL = shift;
        my $handle = IO::File->new;
        open($handle, "myfile") or die "myfile: $!";
        $first = <$handle>
            or return ();     # Automatically closed here.
        mung $first or die "mung failed";  # Or here.
        return $first, <$handle> if $ALL;  # Or here.
        $first;          # Or here.
d3506 1
a3506 1
    our $bar;      # declares $Foo::bar for rest of lexical scope
d3510 1
a3510 1
    print $bar;    # prints 20, as it refers to $Foo::bar
d3522 1
a3522 1
    our $bar;      # declares $Foo::bar for rest of lexical scope
d3526 2
a3527 2
    our $bar = 30; # declares $Bar::bar for rest of lexical scope
    print $bar;    # prints 30
d3529 2
a3530 2
    our $bar;      # emits warning but has no other effect
    print $bar;    # still prints 30
d3549 2
a3550 4
an integer may be represented by a sequence of 4 bytes, which  will in
Perl be presented as a string that's 4 characters long. 

See L<perlpacktut> for an introduction to this function.
d3555 28
a3582 28
    a  A string with arbitrary binary data, will be null padded.
    A  A text (ASCII) string, will be space padded.
    Z  A null-terminated (ASCIZ) string, will be null padded.

    b  A bit string (ascending bit order inside each byte, like vec()).
    B  A bit string (descending bit order inside each byte).
    h  A hex string (low nybble first).
    H  A hex string (high nybble first).

    c  A signed char (8-bit) value.
    C  An unsigned char (octet) value.
    W  An unsigned char value (can be greater than 255).

    s  A signed short (16-bit) value.
    S  An unsigned short value.

    l  A signed long (32-bit) value.
    L  An unsigned long value.

    q  A signed quad (64-bit) value.
    Q  An unsigned quad value.
      (Quads are available only if your system supports 64-bit
       integer values _and_ if Perl has been compiled to support those.
           Raises an exception otherwise.)

    i  A signed integer value.
    I  A unsigned integer value.
      (This 'integer' is _at_least_ 32 bits wide.  Its exact
d3585 4
a3588 4
    n  An unsigned short (16-bit) in "network" (big-endian) order.
    N  An unsigned long (32-bit) in "network" (big-endian) order.
    v  An unsigned short (16-bit) in "VAX" (little-endian) order.
    V  An unsigned long (32-bit) in "VAX" (little-endian) order.
d3593 2
a3594 2
    f  A single-precision float in native format.
    d  A double-precision float in native format.
d3596 5
a3600 5
    F  A Perl internal floating-point value (NV) in native format
    D  A float of long-double precision in native format.
      (Long doubles are available only if your system supports long
       double values _and_ if Perl has been compiled to support those.
           Raises an exception otherwise.)
d3602 2
a3603 2
    p  A pointer to a null-terminated string.
    P  A pointer to a structure (fixed-length string).
d3605 2
a3606 2
    u  A uuencoded string.
    U  A Unicode character number.  Encodes to a character in character mode
d3609 15
a3623 14
    w  A BER compressed integer (not an ASN.1 BER, see perlpacktut for
       details).  Its bytes represent an unsigned integer in base 128,
       most significant digit first, with as few digits as possible.  Bit
       eight (the high bit) is set on each byte except the last.

    x  A null byte (a.k.a ASCII NUL, "\000", chr(0))
    X  Back up a byte.
    @@  Null-fill or truncate to absolute position, counted from the
       start of the innermost ()-group.
    .  Null-fill or truncate to absolute position specified by the value.
    (  Start of a ()-group.

One or more modifiers below may optionally follow certain letters in the
TEMPLATE (the second column lists letters for which the modifier is valid):
d3642 3
a3644 3
The C<< > >> and C<< < >> modifiers can also be used on C<()> groups 
to force a particular byte-order on all components in that group, 
including all its subgroups.
d3648 1
a3648 1
=over 
d3652 21
a3672 37
Each letter may optionally be followed by a number indicating the repeat
count.  A numeric repeat count may optionally be enclosed in brackets, as
in C<pack("C[80]", @@arr)>.  The repeat count gobbles that many values from
the LIST when used with all format types other than C<a>, C<A>, C<Z>, C<b>,
C<B>, C<h>, C<H>, C<@@>, C<.>, C<x>, C<X>, and C<P>, where it means
something else, dscribed below.  Supplying a C<*> for the repeat count
instead of a number means to use however many items are left, except for:

=over 

=item * 

C<@@>, C<x>, and C<X>, where it is equivalent to C<0>.

=item * 

<.>, where it means relative to the start of the string.

=item * 

C<u>, where it is equivalent to 1 (or 45, which here is equivalent).

=back 

One can replace a numeric repeat count with a template letter enclosed in
brackets to use the packed byte length of the bracketed template for the
repeat count.

For example, the template C<x[L]> skips as many bytes as in a packed long,
and the template C<"$t X[$t] $t"> unpacks twice whatever $t (when
variable-expanded) unpacks.  If the template in brackets contains alignment
commands (such as C<x![d]>), its packed length is calculated as if the
start of the template had the maximal possible alignment.

When used with C<Z>, a C<*> as the repeat count is guaranteed to add a
trailing null byte, so the resulting string is always one byte longer than
the byte length of the item itself.
d3675 1
a3675 4
of the innermost C<()> group.

When used with C<.>, the repeat count determines the starting position to
calculate the value offset as follows:
d3677 7
a3683 18
=over 

=item *

If the repeat count is C<0>, it's relative to the current position.

=item *

If the repeat count is C<*>, the offset is relative to the start of the
packed string.

=item *

And if it's an integer I<n>, the offset is relative to the start of the
I<n>th innermost C<()> group, or to the start of the string if I<n> is
bigger then the group level.

=back
d3692 1
a3692 1
string of length count, padding with nulls or spaces as needed.  When
d3694 1
a3694 1
after the first null, and C<a> returns data without any sort of trimming.
d3696 4
a3699 4
If the value to pack is too long, the result is truncated.  If it's too
long and an explicit count is provided, C<Z> packs only C<$count-1> bytes,
followed by a null byte.  Thus C<Z> always packs a trailing null, except
for when the count is 0.
d3703 2
a3704 3
Likewise, the C<b> and C<B> formats pack a string that's that many bits long.
Each such format generates 1 bit of the result.

d3707 1
a3707 1
and C<"1"> generate bits 0 and 1, as do characters C<"\000"> and C<"\001">.
d3709 2
a3710 2
Starting from the beginning of the input string, each 8-tuple
of characters is converted to 1 character of output.  With format C<b>,
d3712 1
a3712 1
character; with format C<B>, it determines the most-significant bit of
d3715 1
a3715 1
If the length of the input string is not evenly divisible by 8, the
d3717 1
a3717 3
at the end.  Similarly during unpacking, "extra" bits are ignored.

If the input string is longer than needed, remaining characters are ignored.
d3719 4
a3722 2
A C<*> for the repeat count uses all characters of the input field.  
On unpacking, bits are converted to a string of C<"0">s and C<"1">s.
d3726 2
a3727 2
The C<h> and C<H> formats pack a string that many nybbles (4-bit groups,
representable as hexadecimal digits, C<"0".."9"> C<"a".."f">) long.
d3729 2
a3730 2
For each such format, pack() generates 4 bits of the result.
With non-alphabetical characters, the result is based on the 4 least-significant
d3733 1
a3733 1
C<"\0"> and C<"\1">.  For characters C<"a".."f"> and C<"A".."F">, the result
d3735 2
a3736 2
C<"A"> both generate the nybble C<0xa==10>.  Do not use any characters
but these with this format.
d3738 2
a3739 2
Starting from the beginning of the template to pack(), each pair
of characters is converted to 1 character of output.  With format C<h>, the
d3741 1
a3741 1
output character; with format C<H>, it determines the most-significant
d3744 9
a3752 8
If the length of the input string is not even, it behaves as if padded by
a null character at the end.  Similarly, "extra" nybbles are ignored during
unpacking.

If the input string is longer than needed, extra characters are ignored.

A C<*> for the repeat count uses all characters of the input field.  For
unpack(), nybbles are converted to a string of hexadecimal digits.
d3756 6
a3761 7
The C<p> format packs a pointer to a null-terminated string.  You are
responsible for ensuring that the string is not a temporary value, as that
could potentially get deallocated before you got around to using the packed
result.  The C<P> format packs a pointer to a structure of the size indicated
by the length.  A null pointer is created if the corresponding value for
C<p> or C<P> is C<undef>; similarly with unpack(), where a null pointer
unpacks into C<undef>.
d3763 2
a3764 2
If your system has a strange pointer size--meaning a pointer is neither as
big as an int nor as big as a long--it may not be possible to pack or
d3766 1
a3766 1
so raises an exception.
d3771 11
a3781 13
items where the packed structure contains a packed item count followed by
the packed items themselves.  This is useful when the structure you're
unpacking has encoded the sizes or repeat counts for some of its fields
within the structure itself as separate fields.

For C<pack>, you write I<length-item>C</>I<sequence-item>, and the
I<length-item> describes how the length value is packed. Formats likely
to be of most use are integer-packing ones like C<n> for Java strings,
C<w> for ASN.1 or SNMP, and C<N> for Sun XDR.

For C<pack>, I<sequence-item> may have a repeat count, in which case
the minimum of that and the number of available items is used as the argument
for I<length-item>. If it has no repeat count or uses a '*', the number
d3784 1
a3784 1
For C<unpack>, an internal stack of integer arguments unpacked so far is
d3789 10
a3798 11
If I<sequence-item> refers to a string type (C<"A">, C<"a">, or C<"Z">),
the I<length-item> is the string length, not the number of strings.  With
an explicit repeat count for pack, the packed string is adjusted to that
length.  For example:

    unpack("W/a", "\04Gurusamy")            gives ("Guru")
    unpack("a3/A A*", "007 Bond  J ")       gives (" Bond", "J")
    unpack("a3 x2 /A A*", "007: Bond, J.")  gives ("Bond, J", ".")

    pack("n/a* w/a","hello,","world")       gives "\000\006hello,\005world"
    pack("a/W2", ord("a") .. ord("z"))      gives "2ab"
d3802 4
a3805 4
Supplying a count to the I<length-item> format letter is only useful with
C<A>, C<a>, or C<Z>.  Packing with a I<length-item> of C<a> or C<Z> may
introduce C<"\000"> characters, which Perl does not regard as legal in
numeric strings.
d3810 5
a3814 11
followed by a C<!> modifier to specify native shorts or
longs.  As shown in the example above, a bare C<l> means
exactly 32 bits, although the native C<long> as seen by the local C compiler
may be larger.  This is mainly an issue on 64-bit platforms.  You can
see whether using C<!> makes any difference this way:

    printf "format s is %d, s! is %d\n", 
	length pack("s"), length pack("s!");

    printf "format l is %d, l! is %d\n", 
	length pack("l"), length pack("l!");
d3816 2
d3819 1
a3819 1
C<i!> and C<I!> are also allowed, but only for completeness' sake:
d3823 2
a3824 10
longs on the platform where Perl was built are also available from
the command line:

    $ perl -V:{short,int,long{,long}}size
    shortsize='2';
    intsize='4';
    longsize='4';
    longlongsize='8';

or programmatically via the C<Config> module:
d3832 2
a3833 2
C<$Config{longlongsize}> is undefined on systems without 
long long support.
d3837 19
a3855 19
The integer formats C<s>, C<S>, C<i>, C<I>, C<l>, C<L>, C<j>, and C<J> are
inherently non-portable between processors and operating systems because
they obey native byteorder and endianness.  For example, a 4-byte integer
0x12345678 (305419896 decimal) would be ordered natively (arranged in and
handled by the CPU registers) into bytes as

    0x12 0x34 0x56 0x78  # big-endian
    0x78 0x56 0x34 0x12  # little-endian

Basically, Intel and VAX CPUs are little-endian, while everybody else,
including Motorola m68k/88k, PPC, Sparc, HP PA, Power, and Cray, are
big-endian.  Alpha and MIPS can be either: Digital/Compaq used/uses them in
little-endian mode, but SGI/Cray uses them in big-endian mode.

The names I<big-endian> and I<little-endian> are comic references to the
egg-eating habits of the little-endian Lilliputians and the big-endian
Blefuscudians from the classic Jonathan Swift satire, I<Gulliver's Travels>.
This entered computer lingo via the paper "On Holy Wars and a Plea for
Peace" by Danny Cohen, USC/ISI IEN 137, April 1, 1980.
d3859 2
a3860 2
   0x56 0x78 0x12 0x34
   0x34 0x12 0x78 0x56
d3862 1
a3862 1
You can determine your system endianness with this incantation:
d3864 2
a3865 1
   printf("%#02x ", $_) for unpack("W*", pack L=>0x12345678); 
d3870 2
a3871 2
    use Config;
    print "$Config{byteorder}\n";
d3873 2
a3874 1
or from the command line:
d3876 4
a3879 8
    $ perl -V:byteorder

Byteorders C<"1234"> and C<"12345678"> are little-endian; C<"4321">
and C<"87654321"> are big-endian.

For portably packed integers, either use the formats C<n>, C<N>, C<v>, 
and C<V> or else use the C<< > >> and C<< < >> modifiers described
immediately below.  See also L<perlport>.
d3883 10
a3892 18
Starting with Perl 5.9.2, integer and floating-point formats, along with
the C<p> and C<P> formats and C<()> groups, may all be followed by the 
C<< > >> or C<< < >> endianness modifiers to respectively enforce big-
or little-endian byte-order.  These modifiers are especially useful 
given how C<n>, C<N>, C<v> and C<V> don't cover signed integers, 
64-bit integers, or floating-point values.

Here are some concerns to keep in mind when using endianness modifier:

=over

=item * 

Exchanging signed integers between different platforms works only 
when all platforms store them in the same format.  Most platforms store
signed integers in two's-complement notation, so usually this is not an issue.

=item * 
d3894 1
a3894 1
The C<< > >> or C<< < >> modifiers can only be used on floating-point
d3896 1
a3896 1
use them raises an exception.
d3898 12
a3909 15
=item * 

Forcing big- or little-endian byte-order on floating-point values for
data exchange can work only if all platforms use the same
binary representation such as IEEE floating-point.  Even if all
platforms are using IEEE, there may still be subtle differences.  Being able
to use C<< > >> or C<< < >> on floating-point values can be useful,
but also dangerous if you don't know exactly what you're doing.
It is not a general way to portably store floating-point values.

=item * 

When using C<< > >> or C<< < >> on a C<()> group, this affects
all types inside the group that accept byte-order modifiers,
including all subgroups.  It is silently ignored for all other
a3912 2
=back

d3915 6
a3920 6
Real numbers (floats and doubles) are in native machine format only.
Due to the multiplicity of floating-point formats and the lack of a
standard "network" representation for them, no facility for interchange has been
made.  This means that packed floating-point data written on one machine
may not be readable on another, even if both use IEEE floating-point
arithmetic (because the endianness of the memory representation is not part
d3923 2
a3924 2
If you know I<exactly> what you're doing, you can use the C<< > >> or C<< < >>
modifiers to force big- or little-endian byte-order on floating-point values.
d3926 4
a3929 4
Because Perl uses doubles (or long doubles, if configured) internally for
all numeric calculation, converting from double into float and thence 
to double again loses precision, so C<unpack("f", pack("f", $foo)>)
will not in general equal $foo.
d3933 2
a3934 2
Pack and unpack can operate in two modes: character mode (C<C0> mode) where
the packed string is processed per character, and UTF-8 mode (C<U0> mode)
d3936 4
a3939 4
a byte-by-byte basis. Character mode is the default unless the format string 
starts with C<U>. You can always switch mode mid-format with an explicit 
C<C0> or C<U0> in the format.  This mode remains in effect until the next 
mode change, or until the end of the C<()> group it (directly) applies to.
d3943 5
a3947 4
You must yourself do any alignment or padding by inserting, for example,
enough C<"x">es while packing.  There is no way for pack() and unpack()
to know where characters are going to or coming from, so they 
handle their output and input as flat sequences of characters.
d3951 4
a3954 4
A C<()> group is a sub-TEMPLATE enclosed in parentheses.  A group may
take a repeat count either as postfix, or for unpack(), also via the C</>
template character.  Within each repetition of a group, positioning with
C<@@> starts over at 0. Therefore, the result of
d3956 1
a3956 1
    pack("@@1A((@@2A)@@3A)", qw[X Y Z])
d3958 1
a3958 1
is the string C<"\0X\0\0YZ">.
d3962 6
a3967 3
C<x> and C<X> accept the C<!> modifier to act as alignment commands: they
jump forward or back to the closest position aligned at a multiple of C<count>
characters. For example, to pack() or unpack() a C structure like
d3969 2
a3970 11
    struct {
	char   c;    /* one signed, 8-bit character */
	double d; 
	char   cc[2];
    }

one may need to use the template C<c x![d] d c[2]>.  This assumes that
doubles must be aligned to the size of double.

For alignment commands, a C<count> of 0 is equivalent to a C<count> of 1;
both are no-ops.
d3974 5
a3978 5
C<n>, C<N>, C<v> and C<V> accept the C<!> modifier to
represent signed 16-/32-bit integers in big-/little-endian order.
This is portable only when all platforms sharing packed data use the
same binary representation for signed integers; for example, when all
platforms use two's-complement representation.
d3982 3
a3984 6
Comments can be embedded in a TEMPLATE using C<#> through the end of line.
White space can separate pack codes from each other, but modifiers and
repeat counts must follow immediately.  Breaking complex templates into
individual line-by-line components, suitably annotated, can do as much to
improve legibility and maintainability of pack/unpack formats as C</x> can
for complicated pattern matches.
d3988 1
a3988 1
If TEMPLATE requires more arguments that pack() is given, pack()
d3990 1
a3990 1
than given, extra arguments are ignored.
d4013 1
a4013 1
    # NOTE: The examples above featuring "W" and "c" are true
d4015 2
a4016 2
    # and UTF-8.  On EBCDIC systems, the first example would be
    #      $foo = pack("WWWW",193,194,195,196);
d4042 1
a4042 1
        unpack("N", pack("B32", substr("0" x 32 . shift, -32)));
d4064 2
a4065 2
=item package NAMESPACE VERSION
X<package> X<module> X<namespace> X<version>
d4067 1
a4067 1
=item package NAMESPACE
d4073 11
a4083 19
A package statement affects dynamic variables only, including those
you've used C<local> on, but I<not> lexical variables, which are created
with C<my> (or C<our> (or C<state>)).  Typically it would be the first 
declaration in a file included by C<require> or C<use>.  You can switch into a
package in more than one place, since this only determines which default 
symbol table the compiler uses for the rest of that block.  You can refer to
identifiers in other packages than the current one by prefixing the identifier
with the package name and a double colon, as in C<$SomePack::var>
or C<ThatPack::INPUT_HANDLE>.  If package name is omitted, the C<main>
package as assumed.  That is, C<$::sail> is equivalent to
C<$main::sail> (as well as to C<$main'sail>, still seen in ancient
code, mostly from Perl 4).

If VERSION is provided, C<package> sets the C<$VERSION> variable in the given
namespace to a L<version> object with the VERSION provided.  VERSION must be a
"strict" style version number as defined by the L<version> module: a positive
decimal number (integer or decimal-fraction) without exponentiation or else a
dotted-decimal v-string with a leading 'v' character and at least three
components.  You should set C<$VERSION> only once per package.
d4100 3
a4102 3
On systems that support a close-on-exec flag on files, that flag is set
on all newly opened file descriptors whose C<fileno>s are I<higher> than 
the current value of $^F (by default 2 for C<STDERR>).  See L<perlvar/$^F>.
d4112 4
a4115 3
Returns the undefined value if the array is empty, although this may also
happen at other times.  If ARRAY is omitted, pops the C<@@ARGV> array in the
main program, but the C<@@_> array in subroutines, just like C<shift>.
d4126 1
a4126 1
yet been run on the scalar). C<pos> directly accesses the location used
d4141 2
a4142 2
FILEHANDLE may be a scalar variable containing
the name of or a reference to the filehandle, thus introducing
d4146 4
a4149 4
If FILEHANDLE is omitted, prints to standard output by default, or
to the last selected output channel; see L</select>.  If LIST is
also omitted, prints C<$_> to the currently selected output handle.
To set the default output handle to something other than STDOUT
d4158 2
a4159 2
the print; put parentheses around all the arguments 
(or interpose a C<+>, but that doesn't look as good).
a4167 3
Printing to a closed pipe or socket will generate a SIGPIPE signal.  See
L<perlipc> for more on signal handling.

d4178 1
a4178 1
separator in formatted floating-point numbers is affected by the LC_NUMERIC
d4193 1
a4193 1
name for a Perl builtin.  If the builtin is not I<overridable> (such as
d4207 1
a4207 1
        $ARRAY[++$#ARRAY] = $value;
a4240 26
quotemeta (and C<\Q> ... C<\E>) are useful when interpolating strings into
regular expressions, because by default an interpolated variable will be
considered a mini-regular expression. For example:

    my $sentence = 'The quick brown fox jumped over the lazy dog';
    my $substring = 'quick.*?fox';
    $sentence =~ s{$substring}{big bad wolf};

Will cause C<$sentence> to become C<'The big bad wolf jumped over...'>.

On the other hand:

    my $sentence = 'The quick brown fox jumped over the lazy dog';
    my $substring = 'quick.*?fox';
    $sentence =~ s{\Q$substring\E}{big bad wolf};

Or:

    my $sentence = 'The quick brown fox jumped over the lazy dog';
    my $substring = 'quick.*?fox';
    my $quoted_substring = quotemeta($substring);
    $sentence =~ s{$quoted_substring}{big bad wolf};

Will both leave the sentence as is. Normally, when accepting string input from
the user, quotemeta() or C<\Q> must be used.

d4249 2
a4250 2
also special-cased as C<1> (this was undocumented before Perl 5.8.0
and is subject to change in future versions of Perl).  Automatically calls
d4283 2
a4284 2
The call is implemented in terms of either Perl's or your system's native
fread(3) library function.  To get a true read(2) system call, see C<sysread>.
d4299 2
a4300 2
directory.  If there are no more entries, returns the undefined value in
scalar context and the empty list in list context.
a4309 9
As of Perl 5.11.2 you can use a bare C<readdir> in a C<while> loop,
which will set C<$_> on every iteration.

    opendir(my $dh, $some_dir) || die;
    while(readdir $dh) {
        print "$some_dir/$_\n";
    }
    closedir $dh;

d4317 2
a4318 2
returns the next line until end-of-file is reached, whereupon the
subsequent call returns C<undef>.  In list context, reads until end-of-file
d4320 1
a4320 1
used here is whatever you may have defined with C<$/> or
d4323 2
a4324 2
When C<$/> is set to C<undef>, when C<readline> is in scalar
context (i.e., file slurp mode), and when an empty file is read, it
d4332 7
a4338 1
    $line = readline(*STDIN);    # same thing
d4340 5
a4344 22
If C<readline> encounters an operating system error, C<$!> will be set
with the corresponding error message.  It can be helpful to check
C<$!> when you are reading from filehandles you don't trust, such as a
tty or a socket.  The following example uses the operator form of
C<readline> and dies if the result is not defined.

    while ( ! eof($fh) ) {
        defined( $_ = <$fh> ) or die "readline failed: $!";
        ...
    }

Note that you have can't handle C<readline> errors that way with the
C<ARGV> filehandle. In that case, you have to open each element of
C<@@ARGV> yourself since C<eof> handles C<ARGV> differently.

    foreach my $arg (@@ARGV) {
        open(my $fh, $arg) or warn "Can't open $arg: $!";

        while ( ! eof($fh) ) {
            defined( $_ = <$fh> )
                or die "readline failed for $arg: $!";
            ...
d4346 1
d4355 1
a4355 1
implemented.  If not, raises an exception.  If there is a system
d4408 12
a4419 12
        while (s|({.*}.*){.*}|$1 |) {}
        s|{.*}| |;
        if (s|{.*| |) {
            $front = $_;
            while (<STDIN>) {
                if (/}/) {  # end of comment?
                    s|^|$front\{|;
                    redo LINE;
                }
            }
        }
        print;
d4422 1
a4422 1
C<redo> cannot be used to retry a block that returns a value such as
d4460 1
a4460 1
        print "r is a reference to a hash.\n";
d4463 1
a4463 1
        print "r is not a reference at all.\n";
d4504 1
a4504 1
to C<$^V> (aka $PERL_VERSION).  An exception is raised if
d4513 3
a4515 3
    require v5.6.1;     # run time version check
    require 5.6.1;      # ditto
    require 5.006_001;  # ditto; preferred for backwards compatibility
d4568 1
a4568 1
        require Foo::Bar;     # a splendid bareword
d4576 1
a4576 1
        require $class;       # $class is not a bareword
d4578 1
a4578 1
        require "Foo::Bar";   # not a bareword because of the ""
d4585 1
a4585 1
Now that you understand how C<require> looks for files with a
d4592 2
a4593 2
You can also insert hooks into the import facility, by putting Perl code
directly into the @@INC array.  There are three forms of hooks: subroutine
d4598 4
a4601 4
called with two parameters, the first a reference to itself, and the
second the name of the file to be included (e.g., "F<Foo/Bar.pm>").  The
subroutine should return either nothing or else a list of up to three 
values in the following order:
d4614 1
a4614 1
end of file.  If there is a filehandle, then the subroutine will be
d4627 3
a4629 3
is returned, then C<require> looks at the remaining elements of @@INC.
Note that this filehandle must be a real filehandle (strictly a typeglob
or reference to a typeglob, blessed or unblessed); tied filehandles will be
d4634 1
a4634 1
the array reference.  This lets you indirectly pass arguments to
d4641 2
a4642 2
        my ($coderef, $filename) = @@_;  # $coderef is \&my_sub
        ...
d4649 4
a4652 4
        my ($arrayref, $filename) = @@_;
        # Retrieve $x, $y, ...
        my @@parameters = @@$arrayref[1..$#$arrayref];
        ...
d4664 2
a4665 2
        my ($self, $filename) = @@_;
        ...
d4671 1
a4671 1
These hooks are also permitted to set the %INC entry
d4686 2
a4687 2
omitted, one-match searches (C<?pattern?>) are reset to match again.  
Only resets variables or searches in the current package.  Always returns
d4690 3
a4692 3
    reset 'X';      # reset all X variables
    reset 'a-z';    # reset lower case variables
    reset;          # just reset ?one-time? searches
d4696 1
a4696 1
variables; lexical variables are unaffected, but they clean themselves
d4710 1
a4710 1
scalar context, and (of course) nothing at all in void context.
d4712 2
a4713 2
(In the absence of an explicit C<return>, a subroutine, eval,
or do FILE automatically returns the value of the last expression
a4733 4
Note that reversing an array to itself (as in C<@@a = reverse @@a>) will
preserve non-existent elements whenever possible, i.e., for non magical
arrays or tied arrays with C<EXISTS> and C<DELETE> methods.

d4740 1
a4740 1
    %by_name = reverse %by_address;  # Invert the hash
d4766 1
a4766 1
To remove a directory tree recursively (C<rm -rf> on Unix) look at
d4784 1
a4784 1
This keyword is available only when the "say" feature is
d4801 1
a4801 1
Because C<scalar> is a unary operator, if you accidentally use for EXPR a
d4808 1
a4808 1
    print uc(scalar(&foo,$bar)),$baz;
d4812 2
a4813 2
    &foo;
    print(uc($bar),$baz);
d4827 1
a4827 1
of the file) from the Fcntl module.  Returns C<1> on success, C<0>
d4835 2
a4836 2
If you want to position the file for C<sysread> or C<syswrite>, don't use
C<seek>, because buffering makes its effect on the file's read-write position
d4847 2
a4848 2
EOF on your read and then sleep for a while, you (probably) have to stick in a
dummy seek() to reset things.  The C<seek> doesn't change the position,
d4850 1
a4850 1
next C<< <FILE> >> makes Perl try again to read something.  (We hope.)
d4852 2
a4853 2
If that doesn't work (some I/O implementations are particularly
cantankerous), you might need something like this:
d4856 1
a4856 1
        for ($curpos = tell(FILE); $_ = <FILE>;
d4858 4
a4861 4
            # search for some stuff and put it into files
        }
        sleep($for_a_while);
        seek(FILE, $curpos, 0);
d4904 1
a4904 1
This calls the select(2) syscall with the bit masks specified, which
d4912 2
a4913 2
If you want to select on many filehandles, you may wish to write a
subroutine like this:
d4916 6
a4921 6
        my(@@fhlist) = split(' ',$_[0]);
        my($bits);
        for (@@fhlist) {
            vec($bits,fileno($_),1) = 1;
        }
        $bits;
d4950 1
a4950 1
On error, C<select> behaves like select(2): it returns
d4953 4
a4956 4
On some Unixes, select(2) may report a socket file
descriptor as "ready for reading" when no data is available, and
thus a subsequent read blocks. This can be avoided if you always use 
O_NONBLOCK on the socket. See select(2) and fcntl(2) for further
d4966 1
a4966 1
Calls the System V IPC function semctl(2).  You'll probably have to say
d4982 1
a4982 1
Calls the System V IPC function semget(2).  Returns the semaphore id, or
d4990 1
a4990 1
Calls the System V IPC function semop(2) for semaphore operations
d5010 7
a5016 6
Sends a message on a socket.  Attempts to send the scalar MSG to the SOCKET
filehandle.  Takes the same flags as the system call of the same name.  On
unconnected sockets, you must specify a destination to I<send to>, in which
case it does a sendto(2) syscall.  Returns the number of characters sent,
or the undefined value on error.  The sendmsg(2) syscall is currently
unimplemented.  See L<perlipc/"UDP: Message Passing"> for examples.
d5030 1
a5030 1
process.  Raises an exception when used on a machine that doesn't
d5040 1
a5040 1
(See setpriority(2).)  Raises an exception when used on a machine
d5052 1
a5052 1
An example disabling Nagle's algorithm on a socket:
d5066 1
a5066 1
C<@@ARGV> array outside a subroutine and also within the lexical scopes
d5113 1
a5113 1
has the same interpretation as in the syscall of the same name.
d5125 1
a5125 1
Returns C<1> for success; on error, returns C<undef> if
d5147 2
a5148 2
Causes the script to sleep for (integer) EXPR seconds, or forever if no 
argument is given.  Returns the integer number of seconds actually slept.  
d5181 1
a5181 1
the syscall of the same name.  You should C<use Socket> first
d5194 2
a5195 2
for the syscall of the same name.  If unimplemented, raises an exception.
Returns true if successful.
d5226 2
a5227 2
depending on how the elements of the list are to be ordered.  (The 
C<< <=> >> and C<cmp> operators are extremely useful in such routines.)
d5274 1
a5274 1
    
d5277 1
a5277 1
    
d5280 1
a5280 1
    
d5283 1
a5283 1
    
d5286 1
a5286 1
    
d5289 1
a5289 1
    
d5293 1
a5293 1
    
d5296 1
a5296 1
    $age{$a} <=> $age{$b};  # presuming numeric
d5299 1
a5299 1
    
d5304 1
a5304 1
        # prints AbelCaincatdogx
d5306 1
a5306 1
        # prints xdogcatCainAbel
d5308 1
a5308 1
        # prints AbelAxedCainPunishedcatchaseddoggonetoxyz
d5314 4
a5317 4
    my @@new = sort {
        ($b =~ /=(\d+)/)[0] <=> ($a =~ /=(\d+)/)[0]
            ||
        uc($a)  cmp  uc($b)
d5323 1
a5323 1
    my @@nums = @@caps = ();
d5325 2
a5326 2
        push @@nums, ( /=(\d+)/ ? $1 : undef );
        push @@caps, uc($_);
d5329 6
a5334 6
    my @@new = @@old[ sort {
        $nums[$b] <=> $nums[$a]
            ||
        $caps[$a] cmp $caps[$b]
        } 0..$#old
    ];
d5339 3
a5341 3
               ||
           $a->[2] cmp $b->[2]
    } map { [$_, /=(\d+)/, uc($_)] } @@old;
d5346 2
a5347 2
    sub backwards ($$) { $_[1] cmp $_[0]; }  # $a and $b are not set here
    
d5350 1
a5350 1
    
d5354 1
a5354 1
    
d5393 1
a5393 1
(not-a-number), and because C<sort> raises an exception unless the
d5396 2
a5397 2
The following example takes advantage that C<NaN != NaN> to
eliminate any C<NaN>s from the input list.
d5420 1
a5420 1
past the end of the array, Perl issues a warning, and splices at the
d5425 5
a5429 5
    push(@@a,$x,$y)      splice(@@a,@@a,0,$x,$y)
    pop(@@a)             splice(@@a,-1)
    shift(@@a)           splice(@@a,0,1)
    unshift(@@a,$x,$y)   splice(@@a,0,0,$x,$y)
    $a[$i] = $y         splice(@@a,$i,1,$y)
d5433 8
a5440 8
    sub aeq {  # compare two list values
        my(@@a) = splice(@@_,0,shift);
        my(@@b) = splice(@@_,0,shift);
        return 0 unless @@a == @@b;  # same len?
        while (@@a) {
            return 0 if pop(@@a) ne pop(@@b);
        }
        return 1;
d5457 4
a5460 1
In scalar context, returns the number of fields found.
d5477 4
a5480 4
A pattern matching the empty string (not to be confused with
an empty pattern C<//>, which is just one member of the set of patterns
matching the epmty string), splits EXPR into individual
characters.  For example:
d5486 4
a5489 4
As a special case for C<split>, the empty pattern C<//> specifically
matches the empty string; this is not be confused with the normal use
of an empty pattern to mean the last successful match.  So to split
a string into individual characters, the following:
d5544 1
a5544 1
will give you as many initial null fields (empty string) as there are leading spaces.
d5559 1
a5559 1
        #...
d5584 5
a5588 5
Perl does its own C<sprintf> formatting: it emulates the C
function sprintf(3), but doesn't use it except for floating-point
numbers, and even then only standard modifiers are allowed.  
Non-standard extensions in your local sprintf(3) are 
therefore unavailable from Perl.
d5598 10
a5607 10
   %%    a percent sign
   %c    a character with the given number
   %s    a string
   %d    a signed integer, in decimal
   %u    an unsigned integer, in decimal
   %o    an unsigned integer, in octal
   %x    an unsigned integer, in hexadecimal
   %e    a floating-point number, in scientific notation
   %f    a floating-point number, in fixed decimal notation
   %g    a floating-point number, in %e or %f notation
d5611 7
a5617 7
   %X    like %x, but using upper-case letters
   %E    like %e, but using an upper-case "E"
   %G    like %g, but with an upper-case "E" (if applicable)
   %b    an unsigned integer, in binary
   %B    like %b, but using an upper-case "B" with the # flag
   %p    a pointer (outputs the Perl value's address in hexadecimal)
   %n    special: *stores* the number of characters output so far
d5623 5
a5627 5
   %i    a synonym for %d
   %D    a synonym for %ld
   %U    a synonym for %lu
   %O    a synonym for %lo
   %F    a synonym for %f
d5635 1
a5635 1
Between the C<%> and the format letter, you may specify several
d5645 1
a5645 1
to take the arguments out of order:
d5690 1
a5690 1
This flag tells Perl to interpret the supplied string as a vector of
d5706 1
a5706 1
the join string using something like C<*2$v>; for example:
d5715 1
a5715 1
or from a specified argument (e.g., with C<*2$>):
d5731 2
a5732 3
For floating-point formats except 'g' and 'G', this specifies
how many places right of the decimal point to show (the default being 6).
For example:
d5741 2
a5742 3
For "g" and "G", this specifies the maximum number of digits to show,
including thoe prior to the decimal point and those after it; for 
example:
d5744 1
a5744 1
  # These examples are subject to system-specific variation.
d5772 1
a5772 1
to fit the specified width:
d5782 2
a5783 2
If a precision obtained through C<*> is negative, it counts
as having no precision at all.
d5795 2
a5796 2
but it is intended that this will be possible in the future, for
example using C<.*2$>:
d5798 1
a5798 1
  printf "<%.*2$x>", 1, 6;   # INVALID, but in future will print "<000001>"
d5814 3
a5816 3
The last will raise an exception if Perl does not understand "quads" in your
installation. (This requires either that the platform natively support quads,
or that Perl were specifically compiled to support quads.) You can find out
d5819 7
a5825 8
    use Config;
    if ($Config{use64bitint} eq "define" || $Config{longsize} >= 8) {
        print "Nice quads!\n";
    }

For floating-point conversions (C<e f g E F G>), numbers are usually assumed
to be the default floating-point size on your platform (double or long double),
but you can force "long double" with C<q>, C<L>, or C<ll> if your
d5829 2
a5830 2
    use Config;
    print "long doubles\n" if $Config{d_longdbl} eq "define";
d5832 2
a5833 2
You can find out whether Perl considers "long double" to be the default
floating-point size to use on your platform via L<Config>:
d5835 3
a5837 4
    use Config;
    if ($Config{uselongdouble} eq "define") {
	print "long doubles by default\n";
    }
d5839 1
a5839 1
It can also be that long doubles and doubles are the same thing:
d5845 4
a5848 3
The size specifier C<V> has no effect for Perl code, but is supported for
compatibility with XS code.  It means "use the standard size for a Perl
integer or floating-point number", which is the default.
d5852 1
a5852 1
Normally, sprintf() takes the next unused argument as the value to
d5855 5
a5859 5
the argument list in the order they appear in the format
specification I<before> the value to format.  Where an argument is
specified by an explicit index, this does not affect the normal
order for the arguments, even when the explicitly specified index
would have been the next argument.
d5863 1
a5863 1
    printf "<%*.*s>", $a, $b, $c;
d5865 2
a5866 2
uses C<$a> for the width, C<$b> for the precision, and C<$c>
as the value to format; while:
d5868 1
a5868 1
  printf "<%*1$.*s>", $a, $b;
d5870 1
a5870 1
would use C<$a> for the width and precision, and C<$b> as the
d5873 2
a5874 2
Here are some more examples; be aware that when using an explicit
index, the C<$> may need escaping:
d5876 4
a5879 4
  printf "%2\$d %d\n",    12, 34;        # will print "34 12\n"
  printf "%2\$d %d %d\n", 12, 34;        # will print "34 12 34\n"
  printf "%3\$d %d %d\n", 12, 34, 56;    # will print "56 12 34\n"
  printf "%2\$*3\$d %d\n", 12, 34, 3;    # will print " 34 12\n"
d5883 3
a5885 3
If C<use locale> is in effect and POSIX::setlocale() has been called,
the character used for the decimal separator in formatted floating-point
numbers is affected by the LC_NUMERIC locale.  See L<perllocale>
d5893 3
a5895 3
Return the positive square root of EXPR.  If EXPR is omitted, uses
C<$_>.  Works only for non-negative operands unless you've
loaded the C<Math::Complex> module.
d5898 1
a5898 1
    print sqrt(-4);    # prints 2i
d5912 1
a5912 1
first use of the C<rand> operator.  However, this was not true of
d5919 2
a5920 4
process ID, and memory allocation, or the F</dev/urandom> device
if available. You may also want to call srand() after a fork() to
avoid child processes sharing the same seed value as the parent (and
consequently each other).
d5927 2
a5928 2
Do B<not> call srand() (i.e., without an argument) more than once per
process.  The internal state of the random number generator should
d5949 2
a5950 2
If you're particularly concerned with this, search the CPAN for
random number generator modules instead of rolling out your own.
d5973 1
a5973 1
omitted, it stats C<$_>.  Returns the empty list if C<stat> fails.  Typically
d6008 1
a6008 1
        print "$file is executable NFS file\n";
d6030 2
a6031 2
           $filename, $sb->size, $sb->mode & 07777,
           scalar localtime $sb->mtime;
d6050 1
a6050 1
Commonly available C<S_IF*> constants are:
d6073 2
a6074 2
    S_IMODE($mode)    the part of $mode containing the permission bits
            and the setuid/setgid/sticky bits
d6076 2
a6077 2
    S_IFMT($mode)    the part of $mode containing the file type
            which can be bit-anded with (for example) S_IFREG
d6109 2
a6110 2
C<state> variables are enabled only when the C<use feature "state"> pragma 
is in effect.  See L<feature>.
d6121 1
a6121 1
frequencies in the string to be searched; you probably want to compare
d6125 1
a6125 1
one C<study> active at a time: if you study a different scalar the first
d6137 6
a6142 6
        study;
        print ".IX foo\n"    if /\bfoo\b/;
        print ".IX bar\n"    if /\bbar\b/;
        print ".IX blurfl\n" if /\bblurfl\b/;
        # ...
        print;
d6145 1
a6145 1
In searching for C</\bfoo\b/>, only locations in C<$_> that contain C<f>
d6154 1
a6154 1
undefining C<$/> to input entire files as one record, this can be quite
d6161 1
a6161 1
        $search .= "++\$seen{\$ARGV} if /\\b$word\\b/;\n";
d6166 2
a6167 2
    eval $search;        # this screams
    $/ = "\n";        # put back to normal input delimiter
d6169 1
a6169 1
        print $file, "\n";
d6205 5
a6209 5
    my $color  = substr $s, 4, 5;      # black
    my $middle = substr $s, 4, -11;    # black cat climbed the
    my $end    = substr $s, 14;        # climbed the green tree
    my $tail   = substr $s, -4;        # tree
    my $z      = substr $s, -4, 2;     # tr
d6215 1
a6215 1
length, you may need to pad or chop your value using C<sprintf>.
d6221 1
a6221 1
substring that is entirely outside the string raises an exception.
d6225 4
a6228 4
    substr($name, 4) = 'dy';         # $name is now 'freddy'
    my $null = substr $name, 6, 2;   # returns "" (no warning)
    my $oops = substr $name, 7;      # returns undef, with warning
    substr($name, 7) = 'gap';        # raises an exception
d6236 1
a6236 1
    my $z = substr $s, 14, 7, "jumped from";    # climbed
d6245 2
a6246 2
        $_ = 'a';   print $x,"\n";    # prints 1a4
        $_ = 'xyz'; print $x,"\n";    # prints 1xyz4
d6248 1
a6248 1
        $_ = 'pq';  print $x,"\n";    # prints 5pq9
d6259 1
a6259 1
symbolic links, raises an exception.  To check for that,
d6269 1
a6269 1
unimplemented, raises an exception.  The arguments are interpreted
d6281 1
a6281 1
    require 'syscall.ph';        # may need to run h2ph
d6285 2
a6286 2
Note that Perl supports passing of up to only 14 arguments to your syscall,
which in practice should (usually) suffice.
d6322 1
a6322 1
supported by Perl: 0 means read-only, 1 means write-only, and 2
d6355 1
a6355 1
On many Unix systems, fdopen() is known to fail when file descriptors
d6368 1
a6368 1
specified FILEHANDLE, using the read(2).  It bypasses
d6385 1
a6385 1
well on device files (like ttys) anyway.  Use sysread() and check
d6397 1
a6397 1
Sets FILEHANDLE's system position in bytes using 
d6407 1
a6407 1
implementing that would render sysseek() unacceptably slow).
d6418 2
a6419 2
    use Fcntl 'SEEK_CUR';
    sub systell { sysseek($_[0], 0, SEEK_CUR) }
d6433 1
a6433 1
exit.  Note that argument processing varies depending on the
d6472 1
a6472 1
        or die "system @@args failed: $?"
d6478 1
a6478 1
        print "failed to execute: $!\n";
d6481 2
a6482 2
        printf "child died with signal %d, %s coredump\n",
            ($? & 127),  ($? & 128) ? 'with' : 'without';
d6485 1
a6485 1
        printf "child exited with value %d\n", $? >> 8;
d6488 2
a6489 2
Alternatively, you may inspect the value of C<${^CHILD_ERROR_NATIVE}>
with the C<W*()> calls from the POSIX module.
d6491 2
a6492 2
When C<system>'s arguments are executed indirectly by the shell, 
results and return codes are subject to its quirks.
a6494 3
Since C<system> does a C<fork> and C<wait> it may affect a C<SIGCHLD>
handler. See L<perlipc> for details.

d6503 1
a6503 1
specified FILEHANDLE, using write(2).  If LENGTH is
d6510 1
a6510 1
data available in the SCALAR after the OFFSET, only as much data as is
d6516 1
a6516 1
If SCALAR is of length zero, you can only use an OFFSET of 0.
d6518 3
a6520 3
B<Warning>: If the filehandle is marked C<:utf8>, Unicode characters
encoded in UTF-8 are written instead of bytes, and the LENGTH, OFFSET, and
return value of syswrite() are in (UTF-8 encoded Unicode) characters.
d6545 1
a6545 1
Do not use tell() (or other buffered I/O operations) on a filehandle
d6578 1
a6578 1
        print $key, ' = ', unpack('L',$val), "\n";
d6613 1
a6613 1
A class implementing a filehandle should have the following methods:
d6643 2
a6644 2
Unlike C<dbmopen>, the C<tie> function will not C<use> or C<require> a module
for you; you need to do that explicitly yourself.  See L<DB_File>
d6686 1
a6686 1
Children's times are only included for terminated children.
d6699 1
a6699 1
specified length.  Raises an exception if truncate isn't implemented
d6715 3
a6717 1
implementing the C<\U> escape in double-quoted strings.
d6719 1
a6719 1
L</ucfirst> for that.
a6722 3
This function behaves the same way under various pragma, such as in a locale,
as L</lc> does.

d6730 3
a6732 1
the C<\u> escape in double-quoted strings.
a6735 3
This function behaves the same way under various pragma, such as in a locale,
as L</lc> does.

d6767 2
a6768 2
restrict access for I<yourself> (i.e., C<< (EXPR & 0700) > 0 >>), 
raises an exception.  If umask(2) is not implemented and you are
d6781 1
a6781 1
(using C<&>), or a typeglob (using C<*>).  Saying C<undef $hash{$key}>
d6783 1
a6783 1
DBM list values, so don't do that; see L<delete>.  Always returns the
d6786 1
a6786 1
instance, return from a subroutine, assign to a variable, or pass as a
d6806 2
a6807 3
Deletes a list of files. On success, it returns the number of files
it successfully deleted. On failure, it returns false and sets C<$!>
(errno):
d6809 1
a6809 1
    my $unlinked = unlink 'a', 'b', 'c';
d6811 1
a6811 1
    unlink glob "*.bak";
d6813 5
a6817 13
On error, C<unlink> will not tell you which files it could not remove.
If you want to know which files you could not remove, try them one
at a time:

     foreach my $file ( @@goners ) {
         unlink $file or warn "Could not unlink $file: $!";
     }

Note: C<unlink> will not attempt to delete directories unless you are
superuser and the B<-U> flag is supplied to Perl. Even if these
conditions are met, be warned that unlinking a directory can inflict
damage on your filesystem.  Finally, using C<unlink> on directories is
not supported on many operating systems.  Use C<rmdir> instead.
d6819 1
a6819 1
If LIST is omitted, C<unlink> uses C<$_>.
a6830 1
See L<perlpacktut> for an introduction to this function.
d6841 2
a6842 2
        my($what,$where,$howmuch) = @@_;
        unpack("x$where a$howmuch", $what);
d6860 2
a6861 2
        local $/;  # slurp!
        unpack("%32W*",<>) % 65535;
d6875 4
a6878 4
is not well defined: the repeat count may be decreased, or
C<unpack()> may produce empty strings or zeros, or it may raise an exception.
If the input string is longer than one described by the TEMPLATE,
the remainder of that input string is ignored.
d6920 4
a6923 4
In the peculiar C<use VERSION> form, VERSION may be either a positive
decimal fraction such as 5.006, which will be compared to C<$]>, or a v-string
of the form v5.6.1, which will be compared to C<$^V> (aka $PERL_VERSION).  An
exception is raised if VERSION is greater than the version of the
d6927 1
a6927 1
of Perl older than the specified one.
d6934 3
a6936 3
    use v5.6.1;     # compile time version check
    use 5.6.1;      # ditto
    use 5.006_001;  # ditto; preferred for backwards compatibility
d6942 1
a6942 1
Also, if the specified Perl version is greater than or equal to 5.9.5,
a6944 3
Similarly, if the specified Perl version is greater than or equal to
5.11.0, strictures are enabled lexically as with C<use strict> (except
that the F<strict.pm> file is not actually loaded).
d6948 1
a6948 1
yet.  The C<import> is not a builtin; it's just an ordinary static method
a6992 9
Because C<use> takes effect at compile time, it doesn't respect the
ordinary flow control of the code being compiled.  In particular, putting
a C<use> inside the false branch of a conditional doesn't prevent it
from being processed.  If a module or pragma only needs to be loaded 
conditionally, this can be done using the L<if> pragma:

    use if $] < 5.008, "utf8";
    use if WANT_WARNINGS, warnings => qw(all);

d6995 2
a6996 2
It behaves just as C<import> does with VERSION, an omitted or empty LIST, 
or no unimport method being found.
a7001 5
Care should be taken when using the C<no VERSION> form of C<no>.  It is
I<only> meant to be used to assert that the running perl is of a earlier
version than its argument and I<not> to undo the feature-enabling side effects
of C<use VERSION>.

d7003 1
a7003 1
for the C<-M> and C<-m> command-line options to Perl that give C<use>
d7021 2
a7022 2
Since Perl 5.7.2, if the first two elements of the list are C<undef>, 
the utime(2) syscall from your C library is called with a null second
d7024 2
a7025 2
modification times to the current time (i.e., equivalent to the example
above) and will work even on files you don't own provided you have write
d7028 1
a7028 4
    for $file (@@ARGV) {
	utime(undef, undef, $file) 
	    || warn "couldn't touch $file: $!";
    } 
d7036 3
a7038 3
Passing only one of the first two elements as C<undef> is
equivalent to passing a 0 and will not have the effect 
described when both are C<undef>.  This also triggers an
d7041 5
a7045 4
On systems that support futimes(2), you may pass filehandles among the
files.  On systems that don't support futimes(2), passing filehandles raises
an exception.  Filehandles must be passed as globs or glob references to be
recognized; barewords are considered filenames.
d7050 2
a7051 4
=item values ARRAY

Returns a list consisting of all the values of the named hash, or the values
of an array. (In a scalar context, returns the number of values.)
d7054 1
a7054 1
random order is subject to change in future versions of Perl, but it
d7060 1
a7060 2
As a side effect, calling values() resets the HASH or ARRAY's internal
iterator,
d7062 1
a7062 6
the iterator with no other overhead. Apart from resetting the iterator,
C<values @@array> in list context is the same as plain C<@@array>.
We recommend that you use void context C<keys @@array> for this, but reasoned
that it taking C<values @@array> out would require more documentation than
leaving it in.)

d7067 1
a7067 1
    for (values %hash)      { s/foo/bar/g }   # modifies %hash values
d7104 1
a7104 1
to try to write off the beginning of the string (i.e., negative OFFSET).
d7121 1
a7121 1
    vec($foo,  0, 32) = 0x5065726C; # 'Perl'
d7124 1
a7124 1
    print vec($foo, 0, 8);  # prints 80 == 0x50 == ord('P')
d7126 11
a7136 11
    vec($foo,  2, 16) = 0x5065; # 'PerlPe'
    vec($foo,  3, 16) = 0x726C; # 'PerlPerl'
    vec($foo,  8,  8) = 0x50;   # 'PerlPerlP'
    vec($foo,  9,  8) = 0x65;   # 'PerlPerlPe'
    vec($foo, 20,  4) = 2;      # 'PerlPerlPe'   . "\x02"
    vec($foo, 21,  4) = 7;      # 'PerlPerlPer'
                                   # 'r' is "\x72"
    vec($foo, 45,  2) = 3;      # 'PerlPerlPer'  . "\x0c"
    vec($foo, 93,  1) = 1;      # 'PerlPerlPer'  . "\x2c"
    vec($foo, 94,  1) = 1;      # 'PerlPerlPerl'
                                   # 'l' is "\x6c"
d7175 2
a7176 2
Regardless of the machine architecture on which it runs, the 
example above should print the following table:
d7313 1
a7313 1
Behaves like wait(2) on your system: it waits for a child
a7319 3
If you use wait in your handler for $SIG{CHLD} it may accidently wait for the
child created by qx() or system(). See L<perlipc> for details.

d7331 1
a7331 1
        $kid = waitpid(-1, WNOHANG);
d7336 1
a7336 1
waitpid(2) or wait4(2) syscalls.  However, waiting for a particular
d7353 1
a7353 1
    return unless defined wantarray; # don't bother doing more
d7370 1
a7370 1
If the output is empty and C<$@@> already contains a value (typically from a
d7380 1
a7380 1
handlers must therefore arrange to actually display the
@


1.1.1.14
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d15 1
a15 1
operator.  A unary operator generally provides scalar context to its
d58 2
a59 2
nonabortive failure is generally indicated in scalar context by
returning the undefined value, and in list context by returning the
d82 1
a82 1
of the same name (like chown(2), fork(2), closedir(2), etc.) return
d85 1
a85 1
which return C<-1> on failure.  Exceptions to this rule include C<wait>,
d110 2
a111 4
=for Pod::Functions =String

C<chomp>, C<chop>, C<chr>, C<crypt>, C<fc>, C<hex>, C<index>, C<lc>,
C<lcfirst>, C<length>, C<oct>, C<ord>, C<pack>, C<q//>, C<qq//>, C<reverse>,
a113 5
C<fc> is available only if the C<"fc"> feature is enabled or if it is
prefixed with C<CORE::>.  The C<"fc"> feature is enabled automatically
with a C<use v5.16> (or higher) declaration in the current scope.


d117 1
a117 3
=for Pod::Functions =Regexp

C<m//>, C<pos>, C<qr//>, C<quotemeta>, C<s///>, C<split>, C<study>
a121 2
=for Pod::Functions =Math

d128 1
a128 3
=for Pod::Functions =ARRAY

C<each>, C<keys>, C<pop>, C<push>, C<shift>, C<splice>, C<unshift>, C<values>
a132 2
=for Pod::Functions =LIST

a137 2
=for Pod::Functions =HASH

a142 2
=for Pod::Functions =I/O

d145 3
a147 7
C<readdir>, C<readline> C<rewinddir>, C<say>, C<seek>, C<seekdir>, C<select>,
C<syscall>, C<sysread>, C<sysseek>, C<syswrite>, C<tell>, C<telldir>,
C<truncate>, C<warn>, C<write>

C<say> is available only if the C<"say"> feature is enabled or if it is
prefixed with C<CORE::>.  The C<"say"> feature is enabled automatically
with a C<use v5.10> (or higher) declaration in the current scope.
d149 1
a149 1
=item Functions for fixed-length data or records
d151 1
a151 4
=for Pod::Functions =Binary

C<pack>, C<read>, C<syscall>, C<sysread>, C<sysseek>, C<syswrite>, C<unpack>,
C<vec>
a155 2
=for Pod::Functions =File

d164 2
a165 1
=for Pod::Functions =Flow
d167 6
a172 18
C<break>, C<caller>, C<continue>, C<die>, C<do>,
C<dump>, C<eval>, C<evalbytes> C<exit>,
C<__FILE__>, C<goto>, C<last>, C<__LINE__>, C<next>, C<__PACKAGE__>,
C<redo>, C<return>, C<sub>, C<__SUB__>, C<wantarray>

C<break> is available only if you enable the experimental C<"switch">
feature or use the C<CORE::> prefix. The C<"switch"> feature also enables
the C<default>, C<given> and C<when> statements, which are documented in
L<perlsyn/"Switch Statements">. The C<"switch"> feature is enabled
automatically with a C<use v5.10> (or higher) declaration in the current
scope. In Perl v5.14 and earlier, C<continue> required the C<"switch">
feature, like the other keywords.

C<evalbytes> is only available with with the C<"evalbytes"> feature (see
L<feature>) or if prefixed with C<CORE::>.  C<__SUB__> is only available
with with the C<"current_sub"> feature or if prefixed with C<CORE::>. Both
the C<"evalbytes"> and C<"current_sub"> features are enabled automatically
with a C<use v5.16> (or higher) declaration in the current scope.
d176 2
a177 1
=for Pod::Functions =Namespace
d179 2
a180 5
C<caller>, C<import>, C<local>, C<my>, C<our>, C<package>, C<state>, C<use>

C<state> is available only if the C<"state"> feature is enabled or if it is
prefixed with C<CORE::>.  The C<"state"> feature is enabled automatically
with a C<use v5.10> (or higher) declaration in the current scope.
d184 2
a185 3
=for Pod::Functions =Misc

C<defined>, C<formline>, C<lock>, C<prototype>, C<reset>, C<scalar>, C<undef>
a189 2
=for Pod::Functions =Process

d191 1
a191 2
C<pipe>, C<qx//>, C<readpipe>, C<setpgrp>,
C<setpriority>, C<sleep>, C<system>,
a196 2
=for Pod::Functions =Modules

a201 2
=for Pod::Functions =Objects

a207 2
=for Pod::Functions =Socket

a214 2
=for Pod::Functions =SysV

a220 2
=for Pod::Functions =User

a227 2
=for Pod::Functions =Network

d237 4
a240 1
=for Pod::Functions =Time
d242 5
a246 1
C<gmtime>, C<localtime>, C<time>, C<times>
d248 2
a249 1
=item Non-function keywords
d251 1
a251 1
=for Pod::Functions =!Non-functions
d253 1
a253 5
C<and>, C<AUTOLOAD>, C<BEGIN>, C<CHECK>, C<cmp>, C<CORE>, C<__DATA__>,
C<default>, C<DESTROY>, C<else>, C<elseif>, C<elsif>, C<END>, C<__END__>,
C<eq>, C<for>, C<foreach>, C<ge>, C<given>, C<gt>, C<if>, C<INIT>, C<le>,
C<lt>, C<ne>, C<not>, C<or>, C<UNITCHECK>, C<unless>, C<until>, C<when>,
C<while>, C<x>, C<xor>
d262 1
a262 1
Unix system calls may not be available or details of the available
a300 2
=for Pod::Functions a file test (-r, -x, etc)

a351 14
Note that C<-s/a/b/> does not do a negated substitution.  Saying
C<-exp($foo)> still works as expected, however: only single letters
following a minus are interpreted as file tests.

These operators are exempt from the "looks like a function rule" described
above.  That is, an opening parenthesis after the operator does not affect
how much of the following code constitutes the argument.  Put the opening
parentheses before the operator to separate it from code that follows (this
applies only to operators with higher precedence than unary operators, of
course):

    -s($file) + 1024   # probably wrong; same as -s($file + 1024)
    (-s $file) + 1024  # correct

d370 2
a371 2
When under C<use filetest 'access'> the above-mentioned filetests
test whether the permission can(not) be granted using the
d375 1
a375 1
due to the underlying system calls' definitions.  Note also that, due to
d381 4
d396 1
a396 1
If any of the file tests (or either the C<stat> or C<lstat> operator) is given
d419 1
a419 1
C<-x $file && -w _ && -f _>.  (This is only fancy fancy: if you use
a422 7
Portability issues: L<perlport/-X>.

To avoid confusing would-be users of your code with mysterious
syntax errors, put something like this at the top of your script:

    use 5.010;  # so filetest ops can stack

a427 2
=for Pod::Functions absolute value function

a433 2
=for Pod::Functions accept an incoming socket connect

a448 2
=for Pod::Functions schedule a SIGALRM

d451 1
a451 1
specified, the value stored in C<$_> is used.  (On some machines,
d466 1
a466 1
your system supports it.  See L<perlfaq8> for details.
a492 2
Portability issues: L<perlport/alarm>.

a495 2
=for Pod::Functions arctangent of Y/X in the range -PI to PI

a505 2
Portability issues: L<perlport/atan2>.

a508 2
=for Pod::Functions binds an address to a socket

a518 2
=for Pod::Functions prepare binary files for I/O

d525 1
a525 1
On some systems (in general, DOS- and Windows-based systems) binmode()
d527 3
a529 3
of portability it is a good idea always to use it when appropriate,
and never to use it when it isn't appropriate.  Also, people can
set their I/O to be by default UTF8-encoded Unicode, not bytes.
d532 1
a532 1
like images, for example.
d535 2
a536 2
directives.  The directives alter the behaviour of the filehandle.
When LAYER is present, using binmode on a text file makes sense.
d539 1
a539 1
suitable for passing binary data.  This includes turning off possible CRLF
d544 1
a544 1
I<also> disabled.  See L<PerlIO>, L<perlrun>, and the discussion about the
d558 1
a558 1
To mark FILEHANDLE as UTF-8, use C<:utf8> or C<:encoding(UTF-8)>.
d560 2
a561 2
while C<:encoding(UTF-8)> checks the data for actually being valid
UTF-8.  More details can be found in L<PerlIO::encoding>.
d567 1
a567 1
changes the default character encoding of the handle; see L</open>.
d574 2
a575 2
system all conspire to let the programmer treat a single
character (C<\n>) as the line terminator, irrespective of external
d581 10
a590 11
All variants of Unix, Mac OS (old and new), and Stream_LF files on VMS use
a single character to end each line in the external representation of text
(even though that single character is CARRIAGE RETURN on old, pre-Darwin
flavors of Mac OS, and is LINE FEED on Unix and most VMS files).  In other
systems like OS/2, DOS, and the various flavors of MS-Windows, your program
sees a C<\n> as a simple C<\cJ>, but what's stored in text files are the
two characters C<\cM\cJ>.  That means that if you don't use binmode() on
these systems, C<\cM\cJ> sequences on disk will be converted to C<\n> on
input, and any C<\n> in your program will be converted back to C<\cM\cJ> on
output.  This is what you want for text files, but it can be disastrous for
binary files.
d594 2
a595 2
For systems from the Microsoft family this means that, if your binary
data contain C<\cZ>, the I/O subsystem will regard it as the end of
a603 2
Portability issues: L<perlport/binmode>.

a608 2
=for Pod::Functions create an object

d614 2
a615 1
SeeL<perlobj> for more about the blessing (and blessings) of objects.
d619 1
a619 1
Perl pragmata.  Builtin types have all uppercase names.  To prevent
a626 2
=for Pod::Functions +switch break out of a C<given> block

d629 2
a630 4
This keyword is enabled by the C<"switch"> feature: see
L<feature> for more information.  You can also access it by
prefixing it with C<CORE::>.  Alternately, include a C<use
v5.10> or later to the current scope.
a636 2
=for Pod::Functions get context of the current subroutine call

d671 1
a671 1
caller was compiled, or C<undef> if C<%^H> was empty.  Do not modify the values
d674 1
a674 2
Furthermore, when called from within the DB package in
list context, and with an argument, caller returns more
d684 2
a685 2
Be aware that setting C<@@DB::args> is I<best effort>, intended for
debugging or generating backtraces, and should not be relied upon.  In
d689 1
a689 1
time.  C<@@DB::args>, like C<@@_>, does not hold explicit references to its
d691 4
a694 4
reallocated for other variables or temporary values.  Finally, a side effect
of the current implementation is that the effects of C<shift @@_> can
I<normally> be undone (but not C<pop @@_> or other splicing, I<and> not if a
reference to C<@@_> has been taken, I<and> subject to the caveat about reallocated
d696 1
a696 1
initial state of C<@@_>.  Buyer beware.
d709 1
a709 3
=for Pod::Functions change your current working directory

Changes the working directory to EXPR, if possible.  If EXPR is omitted,
d711 4
a714 4
changes to the directory specified by C<$ENV{LOGDIR}>.  (Under VMS, the
variable C<$ENV{SYS$LOGIN}> is also checked, and used if it is set.)  If
neither is set, C<chdir> does nothing.  It returns true on success,
false otherwise.  See the example under C<die>.
d717 1
a717 1
directory handle as the argument.  On systems that don't support fchdir(2),
a722 2
=for Pod::Functions changes the permissions on a list of files

d724 1
a724 1
list must be the numeric mode, which should probably be an octal
d727 1
a727 1
successfully changed.  See also L</oct> if all you have is a string.
a751 2
Portability issues: L<perlport/chmod>.

a758 2
=for Pod::Functions remove a trailing record separator from a string

d767 1
a767 1
a reference to an integer or the like; see L<perlvar>) chomp() won't
a800 2
=for Pod::Functions remove the last character from a string

a818 2
=for Pod::Functions change the ownership on a list of files

a854 2
Portability issues: L<perlport/chmod>.

a859 2
=for Pod::Functions get character this number represents

a881 2
=for Pod::Functions make directory new root for path lookups

a888 2
Portability issues: L<perlport/chroot>.

a893 2
=for Pod::Functions close file (or pipe or socket) handle

d896 1
a896 1
operations succeed and if no error was reported by any PerlIO
d902 1
a902 1
L<open|/open FILEHANDLE>.)  However, an explicit C<close> on an input file resets the line
a912 4
If there are multiple threads running, C<close> on a filehandle from a
piped open returns true without waiting for the child process to terminate,
if the filehandle is still open in another thread.

d930 1
a930 1
filehandle, usually the real filehandle name or an autovivified handle.
a934 2
=for Pod::Functions close directory handle

a940 2
=for Pod::Functions connect to a remote socket

d951 1
a951 4
=for Pod::Functions optional trailing block in a while or foreach

When followed by a BLOCK, C<continue> is actually a
flow control statement rather than a function.  If
d978 5
a982 7
When there is no BLOCK, C<continue> is a function that
falls through the current C<when> or C<default> block instead of iterating
a dynamically enclosing C<foreach> or exiting a lexically enclosing C<given>.
In Perl 5.14 and earlier, this form of C<continue> was
only available when the C<"switch"> feature was enabled.
See L<feature> and L<perlsyn/"Switch Statements"> for more
information.
a988 2
=for Pod::Functions cosine function

d990 1
a990 1
takes the cosine of C<$_>.
a1000 2
=for Pod::Functions one-way passwd-style encryption

d1005 1
a1005 1
crypt() is a one-way hash function.  The PLAINTEXT and SALT are turned
d1020 1
a1020 1
match, the password is correct.
d1027 3
a1029 3
with more exotic implementations.  In other words, assume
nothing about the returned string itself nor about how many bytes 
of SALT may matter.
d1033 1
a1033 1
the first eight bytes of PLAINTEXT mattered.  But alternative
d1071 1
a1071 1
of the situation by trying to downgrade (a copy of)
a1075 2
Portability issues: L<perlport/crypt>.

a1078 2
=for Pod::Functions breaks binding on a tied dbm file

a1082 2
Portability issues: L<perlport/dbmclose>.

d1086 1
a1086 4
=for Pod::Functions create binding on a tied dbm file

[This function has been largely superseded by the
L<tie|/tie VARIABLE,CLASSNAME,LIST> function.]
d1093 1
a1093 4
specified by MASK (as modified by the C<umask>).  To prevent creation of
the database if it doesn't exist, you may specify a MODE
of 0, and the function will return a false value if it
can't find an existing database.  If your system supports
a1125 2
Portability issues: L<perlport/dbmopen>.

a1130 2
=for Pod::Functions test whether a value, variable, or function is defined

d1153 1
a1153 1
used to report whether memory for that aggregate had ever been
d1166 1
a1166 1
    print if defined $switch{D};
d1173 1
a1173 1
Note:  Many folks tend to overuse C<defined> and are then surprised to
a1192 2
=for Pod::Functions deletes a value from a hash

d1198 1
a1198 1
In list context, returns the value or values deleted, or the last such
d1210 1
a1210 1
B<WARNING:> Calling delete on array values is deprecated and likely to
d1266 1
a1266 3
=for Pod::Functions raise an exception or bail out

C<die> raises an exception.  Inside an C<eval> the error message is stuffed
d1269 2
a1270 2
exception prints LIST to C<STDERR> and exits with a non-zero value.  If you
need to exit the process with a specific exit code, see L</exit>.
d1306 1
a1306 1
C<$@@>;  i.e., as if C<< $@@ = eval { $@@->PROPAGATE(__FILE__, __LINE__) }; >>
d1319 1
a1319 2
into the limited space of the system exit
code.  However, as C<$!> is the value
d1354 1
a1354 1
L<perlvar/%SIG> for details on setting C<%SIG> entries, and
a1371 2
=for Pod::Functions turn a BLOCK into a TERM

d1375 1
a1375 1
condition.  (On other statements the loop modifiers test the conditional
d1385 1
a1385 2
This form of subroutine call is deprecated.  SUBROUTINE can be a bareword,
a scalar variable or a subroutine beginning with C<&>.
d1400 3
a1402 3
filename for error messages, searches the C<@@INC> directories, and updates
C<%INC> if the file is found.  See L<perlvar/@@INC> and L<perlvar/%INC> for
these variables.  It also differs in that code evaluated with C<do FILENAME>
d1407 5
a1411 5
If C<do> can read the file but cannot compile it, it returns C<undef> and sets
an error message in C<$@@>.  If C<do> cannot read the file, it returns undef
and sets C<$!> to the error.  Always check C<$@@> first, as compilation
could fail in a way that also sets C<$!>.  If the file is successfully
compiled, C<do> returns the value of the last expression evaluated.
a1435 2
=for Pod::Functions create an immediate core dump

d1451 1
a1451 1
convert a core file into an executable.  That's why you should now invoke
a1454 2
Portability issues: L<perlport/dump>.

d1461 5
a1465 10
=item each EXPR

=for Pod::Functions retrieve the next key/value pair from a hash

When called on a hash in list context, returns a 2-element list
consisting of the key and value for the next element of a hash.  In Perl
5.12 and later only, it will also return the index and value for the next
element of an array so that you can iterate over it; older Perls consider
this a syntax error.  When called in scalar context, returns only the key
(not the value) in a hash, or the index in an array.
d1476 8
a1483 9
scalar context; the next call following I<that> one restarts iteration.
Each hash or array has its own internal iterator, accessed by C<each>,
C<keys>, and C<values>.  The iterator is implicitly reset when C<each> has
reached the end as just described; it can be explicitly reset by calling
C<keys> or C<values> on the hash or array.  If you add or delete a hash's
elements while iterating over it, entries may be skipped or duplicated--so
don't do that.  Exception: In the current implementation, it is always safe
to delete the item most recently returned by C<each()>, so the following
code works properly:
d1497 1
a1497 16
Starting with Perl 5.14, C<each> can take a scalar EXPR, which must hold
reference to an unblessed hash or array.  The argument will be dereferenced
automatically.  This aspect of C<each> is considered highly experimental.
The exact behaviour may change in a future version of Perl.

    while (($key,$value) = each $hashref) { ... }

To avoid confusing would-be users of your code who are running earlier
versions of Perl with mysterious syntax errors, put this sort of thing at
the top of your file to signal that your code will work I<only> on Perls of
a recent vintage:

    use 5.012;	# so keys/values/each work on arrays
    use 5.014;	# so keys/values/each work on scalars (experimental)

See also C<keys>, C<values>, and C<sort>.
d1508 1
a1508 3
=for Pod::Functions test a filehandle for its end

Returns 1 if the next read on FILEHANDLE will return end of file I<or> if
d1528 2
a1529 2
detect the end of each file, whereas C<eof()> will detect the end 
of the very last file only.  Examples:
d1545 1
a1545 1
        last if eof();      # needed if we're reading from a terminal
d1549 2
a1550 2
input operators typically return C<undef> when they run out of data or 
encounter an error.
a1559 2
=for Pod::Functions catch exceptions or compile and run code

d1562 4
a1565 7
determined within scalar context) is first parsed, and if there were no
errors, executed as a block within the lexical context of the current Perl
program.  This means, that in particular, any outer lexical variables are
visible to it, and any package variable settings or subroutine and format
definitions remain afterwards.

Note that the value is parsed every time the C<eval> executes.
a1568 11
If the C<unicode_eval> feature is enabled (which is the default under a
C<use 5.16> or higher declaration), EXPR or C<$_> is treated as a string of
characters, so C<use utf8> declarations have no effect, and source filters
are forbidden.  In the absence of the C<unicode_eval> feature, the string
will sometimes be treated as characters and sometimes as bytes, depending
on the internal encoding, and source filters activated within the C<eval>
exhibit the erratic, but historical, behaviour of affecting some outer file
scope that is still compiling.  See also the L</evalbytes> keyword, which
always treats its input as a byte stream and works properly with source
filters, and the L<feature> pragma.

d1587 4
a1590 7
executed, C<eval> returns C<undef> in scalar context
or an empty list in list context, and C<$@@> is set to the error
message.  (Prior to 5.16, a bug caused C<undef> to be returned
in list context for syntax errors, but not for runtime errors.)
If there was no error, C<$@@> is set to the empty string.  A
control flow operator like C<last> or C<goto> can bypass the setting of
C<$@@>.  Beware that using C<eval> neither silences Perl from printing
d1598 1
a1598 1
is implemented.  It is also Perl's exception-trapping mechanism, where
d1603 1
a1603 1
C<eval> unless C<$ENV{PERL_DL_NONLAZY}> is set.  See L<perlrun>.
d1669 2
a1670 3
Before Perl 5.14, the assignment to C<$@@> occurred before restoration 
of localized variables, which means that for your code to run on older
versions, a temporary is required if you want to mask some but not all
d1679 1
a1679 1
          # $@@ =~ /nefarious/ and die $@@; # Perl 5.14 and higher only
d1690 1
a1690 1
of code that called it.  You don't normally need to worry about this unless
a1692 17
=item evalbytes EXPR
X<evalbytes>

=item evalbytes

=for Pod::Functions +evalbytes similar to string eval, but intend to parse a bytestream

This function is like L</eval> with a string argument, except it always
parses its argument, or C<$_> if EXPR is omitted, as a string of bytes.  A
string containing characters whose ordinal value exceeds 255 results in an
error.  Source filters activated within the evaluated code apply to the
code itself.

This function is only available under the C<evalbytes> feature, a
C<use v5.16> (or higher) declaration, or with a C<CORE::> prefix.  See
L<feature> for more information.

a1697 2
=for Pod::Functions abandon this program to run another

d1704 4
a1707 4
warns you if C<exec> is called in void context and if there is a following
statement that isn't C<die>, C<warn>, or C<exit> (if C<-w> is set--but
you always do that, right?).  If you I<really> want to follow an C<exec>
with some other statement, you can use one of these styles to avoid the warning:
a1768 2
Portability issues: L<perlport/exec>.

a1771 2
=for Pod::Functions test whether a hash key is present

d1781 1
a1781 1
obvious and is strongly tied to the use of L</delete> on arrays.  B<Be aware>
d1789 1
a1789 1
A hash or array element can be true only if it's defined and defined only if
d1814 1
a1814 1
Although the most deeply nested array or hash element will not spring into
a1838 2
=for Pod::Functions terminate this program

d1858 2
a1859 3
be called are called before the real exit.  C<END> routines and destructors
can change the exit status by modifying C<$?>.  If this is a problem, you
can call C<POSIX::_exit($status)> to avoid END and destructor processing.
a1861 2
Portability issues: L<perlport/exit>.

a1866 2
=for Pod::Functions raise I<e> to a power

a1869 50
=item fc EXPR
X<fc> X<foldcase> X<casefold> X<fold-case> X<case-fold>

=item fc

=for Pod::Functions +fc return casefolded version of a string

Returns the casefolded version of EXPR.  This is the internal function
implementing the C<\F> escape in double-quoted strings.

Casefolding is the process of mapping strings to a form where case
differences are erased; comparing two strings in their casefolded
form is effectively a way of asking if two strings are equal,
regardless of case.

Roughly, if you ever found yourself writing this

    lc($this) eq lc($that)  # Wrong!
        # or
    uc($this) eq uc($that)  # Also wrong!
        # or
    $this =~ /\Q$that/i     # Right!

Now you can write

    fc($this) eq fc($that)

And get the correct results.

Perl only implements the full form of casefolding.
For further information on casefolding, refer to
the Unicode Standard, specifically sections 3.13 C<Default Case Operations>,
4.2 C<Case-Normative>, and 5.18 C<Case Mappings>,
available at L<http://www.unicode.org/versions/latest/>, as well as the
Case Charts available at L<http://www.unicode.org/charts/case/>.

If EXPR is omitted, uses C<$_>.

This function behaves the same way under various pragma, such as in a locale,
as L</lc> does.

While the Unicode Standard defines two additional forms of casefolding,
one for Turkic languages and one that never maps one character into multiple
characters, these are not provided by the Perl core; However, the CPAN module
C<Unicode::Casing> may be used to provide an implementation.

This keyword is available only when the C<"fc"> feature is enabled,
or when prefixed with C<CORE::>; See L<feature>. Alternately,
include a C<use v5.16> or later to the current scope.

a1872 2
=for Pod::Functions file control system call

a1906 9
Portability issues: L<perlport/fcntl>.

=item __FILE__
X<__FILE__>

=for Pod::Functions the name of the current source file

A special token that returns the name of the file in which it occurs.

a1909 2
=for Pod::Functions return file descriptor from filehandle

d1911 1
a1911 5
filehandle is not open.  If there is no real file descriptor at the OS
level, as can happen with filehandles connected to memory objects via
C<open> with a reference for the third argument, -1 is returned.

This is mainly useful for constructing
d1923 4
a1929 2
=for Pod::Functions lock an entire file with an advisory lock

d1933 1
a1933 1
C<flock> is Perl's portable file-locking interface, although it locks
d1938 4
a1941 4
are B<merely advisory>.  Such discretionary locks are more flexible, but
offer fewer guarantees.  This means that programs that do not also use
C<flock> may modify files locked with C<flock>.  See L<perlport>, 
your port's specific documentation, and your system-specific local manpages
d1950 2
a1951 2
you can use the symbolic names if you import them from the L<Fcntl> module,
either individually, or as a group using the C<:flock> tag.  LOCK_SH
d1954 1
a1954 1
LOCK_SH or LOCK_EX, then C<flock> returns immediately rather than blocking
d1975 1
a1975 1
and build a new Perl.
a2006 2
Portability issues: L<perlport/flock>.

a2009 2
=for Pod::Functions create a new process just like this one

a2035 9
On some platforms such as Windows, where the fork() system call is not available,
Perl can be built to emulate fork() in the Perl interpreter.
The emulation is designed, at the level of the Perl program,
to be as compatible as possible with the "Unix" fork().
However it has limitations that have to be considered in code intended to be portable.
See L<perlfork> for more details.

Portability issues: L<perlport/fork>.

a2038 2
=for Pod::Functions declare a picture format with use by the write() function

a2056 2
=for Pod::Functions internal function used for formats

a2073 4
If you are trying to use this instead of C<write> to capture the output,
you may find it easier to open a filehandle to a scalar
(C<< open $fh, ">", \$output >>) and write to that instead.

a2078 2
=for Pod::Functions get the next character from the filehandle

d2108 1
a2108 1
module from your nearest CPAN site; details on CPAN can be found under
a2113 2
=for Pod::Functions return who logged in at this tty

a2122 2
Portability issues: L<perlport/getlogin>.

d2126 1
a2126 4
=for Pod::Functions find the other end of a socket connection

Returns the packed sockaddr address of the other end of the SOCKET
connection.
a2136 2
=for Pod::Functions get process group

d2140 2
a2141 2
doesn't implement getpgrp(2).  If PID is omitted, returns the process
group of the current process.  Note that the POSIX version of C<getpgrp>
a2143 2
Portability issues: L<perlport/getpgrp>.

a2146 2
=for Pod::Functions get parent process ID

d2149 6
a2154 7
Note for Linux users: Between v5.8.1 and v5.16.0 Perl would work
around non-POSIX thread semantics the minority of Linux systems (and
Debian GNU/kFreeBSD systems) that used LinuxThreads, this emulation
has since been removed. See the documentation for L<$$|perlvar/$$> for
details.

Portability issues: L<perlport/getppid>.
a2158 2
=for Pod::Functions get current nice value

d2160 1
a2160 1
(See L<getpriority(2)>.)  Will raise a fatal exception if used on a
a2162 2
Portability issues: L<perlport/getpriority>.

a2170 2
=for Pod::Functions get passwd record given user login name

a2172 2
=for Pod::Functions get group record given group name

a2174 2
=for Pod::Functions get host record given name

a2176 2
=for Pod::Functions get networks record given name

a2178 2
=for Pod::Functions get protocol record given name

a2180 2
=for Pod::Functions get passwd record given user ID

a2182 2
=for Pod::Functions get group record given group user ID

a2184 2
=for Pod::Functions get services record given its name

a2186 2
=for Pod::Functions get host record given its address

a2188 2
=for Pod::Functions get network record given its address

a2190 2
=for Pod::Functions get protocol record numeric protocol

a2192 2
=for Pod::Functions get services record given numeric port

a2194 2
=for Pod::Functions get next passwd record

a2196 2
=for Pod::Functions get next group record

a2198 2
=for Pod::Functions get next hosts record

a2200 2
=for Pod::Functions get next networks record

a2202 2
=for Pod::Functions get next protocols record

a2204 2
=for Pod::Functions get next services record

a2206 2
=for Pod::Functions prepare passwd file for use

a2208 2
=for Pod::Functions prepare group file for use

a2210 2
=for Pod::Functions prepare hosts file for use

a2212 2
=for Pod::Functions prepare networks file for use

a2214 2
=for Pod::Functions prepare protocols file for use

a2216 2
=for Pod::Functions prepare services file for use

a2218 2
=for Pod::Functions be done using passwd file

a2220 2
=for Pod::Functions be done using group file

a2222 2
=for Pod::Functions be done using hosts file

a2224 2
=for Pod::Functions be done using networks file

a2226 2
=for Pod::Functions be done using protocols file

a2228 2
=for Pod::Functions be done using services file

d2249 1
a2249 1
login shell, are also tainted, for the same reason.
d2273 1
a2273 1
in your system, please consult getpwnam(3) and your system's 
d2282 1
a2282 1
and Linux).  Those systems that implement a proprietary shadow password
d2285 1
a2285 1
The $members value returned by I<getgr*()> is a space-separated list of
d2315 1
a2315 1
Make sure C<gethostbyname()> is called in SCALAR context and that
a2317 7
The C<getprotobynumber> function, even though it only takes one argument,
has the precedence of a list operator, so beware:

    getprotobynumber $number eq 'icmp'   # WRONG
    getprotobynumber($number eq 'icmp')  # actually means this
    getprotobynumber($number) eq 'icmp'  # better this way

d2330 1
a2330 1
Even though it looks as though they're the same method calls (uid),
a2333 2
Portability issues: L<perlport/getpwnam> to L<perlport/endservent>.

a2336 2
=for Pod::Functions retrieve the sockaddr for a given socket

a2350 2
=for Pod::Functions get socket options on a given socket

d2354 1
a2354 1
C<Socket> module) will exist.  To query options at another level the
d2356 1
a2356 1
should be supplied.  For example, to indicate that an option is to be
d2362 1
a2362 1
C<$!>.  Just what is in the packed string depends on LEVEL and OPTNAME;
d2367 1
a2367 1
Here's an example to test whether Nagle's algorithm is enabled on a socket:
a2378 1
Portability issues: L<perlport/getsockopt>.
a2384 2
=for Pod::Functions expand filenames using wildcards

d2386 1
a2386 1
the value of EXPR such as the standard Unix shell F</bin/csh> would do.  In
d2388 2
a2389 2
undef when the list is exhausted.  This is the internal function
implementing the C<< <*.c> >> operator, but you can use it directly.  If
d2396 1
a2396 14
C<glob(".* *")> matches all files in the current working directory.
If you want to glob filenames that might contain whitespace, you'll
have to use extra quotes around the spacey filename to protect it.
For example, to glob filenames that have an C<e> followed by a space
followed by an C<f>, use either of:

    @@spacies = <"*e f*">;
    @@spacies = glob '"*e f*"';
    @@spacies = glob q("*e f*");

If you had to get a variable through, you could do this:

    @@spacies = glob "'*${var}e f*'";
    @@spacies = glob qq("*${var}e f*");
a2408 2
Portability issues: L<perlport/glob>.

d2414 1
a2414 3
=for Pod::Functions convert UNIX time into record or string using Greenwich time

Works just like L</localtime> but the returned values are
d2417 2
a2418 2
Note: When called in list context, $isdst, the last value
returned by gmtime, is always C<0>.  There is no
d2421 1
a2421 1
Portability issues: L<perlport/gmtime>.
a2429 2
=for Pod::Functions create spaghetti code

d2431 1
a2431 1
resumes execution there.  It can't be used to get out of a block or
a2445 4
As shown in this example, C<goto-EXPR> is exempt from the "looks like a
function" rule.  A pair of parentheses following it does not (necessarily)
delimit its argument.  C<goto("NE")."XT"> is equivalent to C<goto NEXT>.

d2465 1
a2465 1
containing a code reference or a block that evaluates to a code
a2472 2
=for Pod::Functions locate elements in a list test true against a given criterion

a2507 2
=for Pod::Functions convert a string to a hexadecimal number

d2517 2
a2518 2
unlike oct().  To present something as hex, look into L</printf>,
L</sprintf>, and L</unpack>.
a2522 2
=for Pod::Functions patch a module's namespace into your own

a2532 2
=for Pod::Functions find a substring within a string

d2539 3
a2541 2
respectively.  POSITION and the return value are based at zero.
If the substring is not found, C<index> returns -1.
a2547 2
=for Pod::Functions get the integer portion of a number

a2559 2
=for Pod::Functions system-dependent device control system call

a2593 2
Portability issues: L<perlport/ioctl>.

a2596 2
=for Pod::Functions join a list into a string using a separator

d2610 2
a2611 8
=item keys EXPR

=for Pod::Functions retrieve list of indices from a hash

Called in list context, returns a list consisting of all the keys of the
named hash, or in Perl 5.12 or later only, the indices of an array.  Perl
releases prior to 5.12 will produce a syntax error if you try to use an
array argument.  In scalar context, returns the number of keys or indices.
d2617 1
a2617 1
Perl 5.8.1 the ordering can be different even between different runs of
d2621 1
a2621 1
As a side effect, calling keys() resets the internal interator of the HASH or ARRAY
d2662 1
a2662 1
as trying has no effect).  C<keys @@array> in an lvalue context is a syntax
d2665 1
a2665 17
Starting with Perl 5.14, C<keys> can take a scalar EXPR, which must contain
a reference to an unblessed hash or array.  The argument will be
dereferenced automatically.  This aspect of C<keys> is considered highly
experimental.  The exact behaviour may change in a future version of Perl.

    for (keys $hashref) { ... }
    for (keys $obj->get_arrayref) { ... }

To avoid confusing would-be users of your code who are running earlier
versions of Perl with mysterious syntax errors, put this sort of thing at
the top of your file to signal that your code will work I<only> on Perls of
a recent vintage:

    use 5.012;	# so keys/values/each work on arrays
    use 5.014;	# so keys/values/each work on scalars (experimental)

See also C<each>, C<values>, and C<sort>.
a2667 2

=item kill SIGNAL
a2669 2
=for Pod::Functions send a signal to a process or process group

d2685 1
a2685 2
of processes.  That means you usually
want to use positive not negative signals.
a2693 14
On some platforms such as Windows where the fork() system call is not available.
Perl can be built to emulate fork() at the interpreter level.
This emulation has limitations related to kill that have to be considered,
for code running on Windows and in code intended to be portable.

See L<perlfork> for more details.

If there is no I<LIST> of processes, no signal is sent, and the return
value is 0.  This form is sometimes used, however, because it causes
tainting checks to be run.  But see
L<perlsec/Laundering and Detecting Tainted Data>.

Portability issues: L<perlport/kill>.

a2698 2
=for Pod::Functions exit a block prematurely

d2710 1
a2710 1
C<eval {}>, C<sub {}>, or C<do {}>, and should not be used to exit
a2724 2
=for Pod::Functions return lower-case version of a string

d2749 1
a2749 5
=item Otherwise, if C<use locale> (but not C<use locale ':not_characters'>) is in effect:

Respects current LC_CTYPE locale for code points < 256; and uses Unicode
semantics for the remaining code points (this last can only happen if
the UTF8 flag is also set).  See L<perllocale>.
d2751 3
a2753 9
A deficiency in this is that case changes that cross the 255/256
boundary are not well-defined.  For example, the lower case of LATIN CAPITAL
LETTER SHARP S (U+1E9E) in Unicode semantics is U+00DF (on ASCII
platforms).   But under C<use locale>, the lower case of U+1E9E is
itself, because 0xDF may not be LATIN SMALL LETTER SHARP S in the
current locale, and Perl has no way of knowing if that character even
exists in the locale, much less what code point it is.  Perl returns
the input character unchanged, for all instances (and there aren't
many) where the 255/256 boundary would otherwise be crossed.
d2755 1
a2755 1
=item Otherwise, If EXPR has the UTF8 flag set:
d2757 1
a2757 1
Unicode semantics are used for the case change.
d2759 1
a2759 1
=item Otherwise, if C<use feature 'unicode_strings'> or C<use locale ':not_characters'>) is in effect:
d2761 2
a2762 1
Unicode semantics are used for the case change.
a2785 2
=for Pod::Functions return a string with just the next letter in lower case

d2792 1
a2792 1
This function behaves the same way under various pragmata, such as in a locale,
a2799 2
=for Pod::Functions return the number of bytes in a string

d2801 1
a2801 2
omitted, returns the length of C<$_>.  If EXPR is undefined, returns
C<undef>.
a2811 7
=item __LINE__
X<__LINE__>

=for Pod::Functions the current source line number

A special token that compiles to the current line number.

a2814 2
=for Pod::Functions create a hard link in the filesystem

a2817 2
Portability issues: L<perlport/link>.

a2820 2
=for Pod::Functions register your socket as a server

a2827 2
=for Pod::Functions create a temporary value for a global variable (dynamic scoping)

a2845 2
=for Pod::Functions convert UNIX time into record or string using local time

d2854 1
a2854 1
All list elements are numeric and come straight out of the C `struct
d2858 2
a2859 2
C<$mday> is the day of the month and C<$mon> the month in
the range C<0..11>, with 0 indicating January and 11 indicating December.
d2866 3
a2868 2
C<$year> contains the number of years since 1900.  To get a 4-digit
year write:
d2872 4
a2875 1
To get the last two digits of the year (e.g., "01" in 2001) do:
d2893 3
a2895 4
The format of this scalar value is B<not> locale-dependent
but built into Perl.  For GMT instead of local
time use the L</gmtime> builtin.  See also the
C<Time::Local> module (for converting seconds, minutes, hours, and such back to
d2899 1
a2899 1
To get somewhat similar but locale-dependent date strings, set up your
d2911 3
a2913 1
The L<Time::gmtime> and L<Time::localtime> modules provide a convenient,
a2919 2
Portability issues: L<perlport/localtime>.

d2923 1
a2923 3
=for Pod::Functions +5.005 get a thread lock on a variable, subroutine, or method

This function places an advisory lock on a shared variable or referenced
a2925 3
The value returned is the scalar itself, if the argument is a scalar, or a
reference, if the argument is a hash, array or subroutine.

a2935 2
=for Pod::Functions retrieve the natural logarithm for a number

d2937 1
a2937 2
returns the log of C<$_>.  To get the
log of another base, use basic algebra:
d2948 1
a2948 1
=item lstat FILEHANDLE
a2950 4
=item lstat EXPR

=item lstat DIRHANDLE

a2952 2
=for Pod::Functions stat a symbolic link

a2960 2
Portability issues: L<perlport/lstat>.

a2962 2
=for Pod::Functions match a string with a regular expression pattern

a2969 2
=for Pod::Functions apply a change to a list to get back a new list with the changes

d2977 1
a2977 3
    @@chars = map(chr, @@numbers);

translates a list of numbers to the corresponding characters.
d2979 1
a2979 17
    my @@squares = map { $_ * $_ } @@numbers;

translates a list of numbers to their squared values.

    my @@squares = map { $_ > 5 ? ($_ * $_) : () } @@numbers;

shows that number of returned elements can differ from the number of
input elements.  To omit an element, return an empty list ().
This could also be achieved by writing

    my @@squares = map { $_ * $_ } grep { $_ > 5 } @@numbers;

which makes the intention more clear.

Map always returns a list, which can be
assigned to a hash such that the elements
become key/value pairs.  See L<perldata> for more details.
d3003 1
a3003 1
the start of map BLOCK LIST or map EXPR, LIST.  Because Perl doesn't look
d3005 1
a3005 2
based on what it finds just after the
C<{>.  Usually it gets it right, but if it
d3007 1
a3007 1
encounters the missing (or unexpected) comma.  The syntax error will be
a3031 2
=for Pod::Functions create a directory

d3034 3
a3036 3
returns true; otherwise it returns false and sets C<$!> (errno).
MASK defaults to 0777 if omitted, and FILENAME defaults
to C<$_> if omitted.
d3038 2
a3039 2
In general, it is better to create directories with a permissive MASK
and let the user modify that with their C<umask> than it is to supply
a3055 2
=for Pod::Functions SysV IPC message control operations

d3064 1
a3064 4
L<perlipc/"SysV IPC"> and the documentation for C<IPC::SysV> and
C<IPC::Semaphore>.

Portability issues: L<perlport/msgctl>.
a3068 2
=for Pod::Functions get SysV IPC message queue

d3070 2
a3071 5
id, or C<undef> on error.  See also
L<perlipc/"SysV IPC"> and the documentation for C<IPC::SysV> and
C<IPC::Msg>.

Portability issues: L<perlport/msgget>.
a3075 2
=for Pod::Functions receive a SysV IPC message from a message queue

d3081 3
a3083 5
Taints the variable.  Returns true if successful, false 
on error.  See also L<perlipc/"SysV IPC"> and the documentation for
C<IPC::SysV> and C<IPC::SysV::Msg>.

Portability issues: L<perlport/msgrcv>.
a3087 2
=for Pod::Functions send a SysV IPC message to a message queue

d3090 1
a3090 1
type, be followed by the length of the actual message, and then finally
d3093 1
a3093 1
false on error.  See also the C<IPC::SysV>
a3095 2
Portability issues: L<perlport/msgsnd>.

a3104 2
=for Pod::Functions declare and assign a local variable (lexical scoping)

d3110 1
a3110 1
evolving.  TYPE is currently bound to the use of the C<fields> pragma,
a3120 2
=for Pod::Functions iterate a block prematurely

d3134 1
a3134 1
C<eval {}>, C<sub {}>, or C<do {}>, and should not be used to exit
a3154 2
=for Pod::Functions unimport some module symbols or semantics at compile time

a3161 2
=for Pod::Functions convert a string to an octal number

a3196 2
=for Pod::Functions open a file, pipe, or descriptor

d3202 1
a3202 2
    open(my $fh, "<", "input.txt") 
	or die "cannot open < input.txt: $!";
d3206 1
a3206 2
    open(my $fh, ">", "output.txt") 
	or die "cannot open > output.txt: $!";
d3211 16
a3226 20
If FILEHANDLE is an undefined scalar variable (or array or hash element), a
new filehandle is autovivified, meaning that the variable is assigned a
reference to a newly allocated anonymous filehandle.  Otherwise if
FILEHANDLE is an expression, its value is the real filehandle.  (This is
considered a symbolic reference, so C<use strict "refs"> should I<not> be
in effect.)

If EXPR is omitted, the global (package) scalar variable of the same
name as the FILEHANDLE contains the filename.  (Note that lexical 
variables--those declared with C<my> or C<state>--will not work for this
purpose; so if you're using C<my> or C<state>, specify EXPR in your
call to open.)

If three (or more) arguments are specified, the open mode (including
optional encoding) in the second argument are distinct from the filename in
the third.  If MODE is C<< < >> or nothing, the file is opened for input.
If MODE is C<< > >>, the file is opened for output, with existing files
first being truncated ("clobbered") and nonexisting files newly created.
If MODE is C<<< >> >>>, the file is opened for appending, again being
created if necessary.
d3228 1
a3228 1
You can put a C<+> in front of the C<< > >> or C<< < >> to
d3230 2
a3231 2
C<< +< >> is almost always preferred for read/write updates--the 
C<< +> >> mode would clobber the file first.  You can't usually use
d3233 1
a3233 1
variable-length records.  See the B<-i> switch in L<perlrun> for a
d3237 2
a3238 2
These various prefixes correspond to the fopen(3) modes of C<r>,
C<r+>, C<w>, C<w+>, C<a>, and C<a+>.
d3240 13
a3252 5
In the one- and two-argument forms of the call, the mode and filename
should be concatenated (in that order), preferably separated by white
space.  You can--but shouldn't--omit the mode in these forms when that mode
is C<< < >>.  It is always safe to use the two-argument form of C<open> if
the filename argument is a known literal.
d3254 1
a3254 1
For three or more arguments if MODE is C<|->, the filename is
d3256 1
a3256 1
is C<-|>, the filename is interpreted as a command that pipes
d3258 1
a3258 1
replace dash (C<->) with the command.
d3262 1
a3262 2
L<perlipc/"Bidirectional Communication with Another Process"> for
alternatives.)
d3271 2
a3272 2
In the two-argument (and one-argument) form, opening C<< <- >> 
or C<-> opens STDIN and opening C<< >- >> opens STDOUT.
d3274 2
a3275 2
You may (and usually should) use the three-argument form of open to specify
I/O layers (sometimes referred to as "disciplines") to apply to the handle
d3277 1
a3277 1
L<PerlIO> for more details).  For example:
d3282 2
a3283 2
opens the UTF8-encoded file containing Unicode characters;
see L<perluniintro>.  Note that if layers are specified in the
a3285 3
Those layers will also be ignored if you specifying a colon with no name
following it.  In that case the default layer for the operating system
(:raw on Unix, :crlf on Windows) is used.
d3306 1
a3306 1
As a special case the three-argument form with a read/write mode and the third
d3311 1
a3311 1
opens a filehandle to an anonymous temporary file.  Also using C<< +< >>
d3317 2
a3318 2
changed this (such as building Perl with C<Configure -Uuseperlio>), you can
open filehandles directly to Perl scalars via:
d3320 1
a3320 1
    open($fh, ">", \$variable) || ..
d3325 1
a3325 2
    open(STDOUT, ">", \$variable)
	or die "Can't open STDOUT: $!";
d3330 1
a3330 1
    open(ARTICLE) or die "Can't find article $ARTICLE: $!\n";
d3333 1
a3333 1
    open(LOG, ">>/usr/spool/news/twitlog");  # (log is reserved)
d3336 1
a3336 1
    open(my $dbase, "+<", "dbase.mine")      # open for update
d3339 1
a3339 1
    open(my $dbase, "+<dbase.mine")          # ditto
d3342 1
a3342 1
    open(ARTICLE, "-|", "caesar <$article")  # decrypt article
d3352 1
a3352 1
    open(MEMORY, ">", \$var)
d3359 1
a3359 1
        process($file, "fh00");
d3365 1
a3365 1
        unless (open($input, "<", $filename)) {
d3383 1
a3383 1
with C<< >& >>, in which case the rest of the string is interpreted
d3389 2
a3390 3
of IO buffers.)  If you use the three-argument
form, then you can pass either a
number, the name of a filehandle, or the normal "reference to a glob".
d3396 2
a3397 2
    open(my $oldout, ">&STDOUT")     or die "Can't dup STDOUT: $!";
    open(OLDERR,     ">&", \*STDERR) or die "Can't dup STDERR: $!";
d3399 2
a3400 2
    open(STDOUT, '>', "foo.out") or die "Can't redirect STDOUT: $!";
    open(STDERR, ">&STDOUT")     or die "Can't dup STDOUT: $!";
d3408 2
a3409 2
    open(STDOUT, ">&", $oldout) or die "Can't dup \$oldout: $!";
    open(STDERR, ">&OLDERR")    or die "Can't dup OLDERR: $!";
d3438 24
a3461 45
C<< open(A, ">>&B") >>, the filehandle A will not have the same file
descriptor as B, and therefore flock(A) will not flock(B) nor vice
versa.  But with C<< open(A, ">>&=B") >>, the filehandles will share
the same underlying system file descriptor.

Note that under Perls older than 5.8.0, Perl uses the standard C library's'
fdopen() to implement the C<=> functionality.  On many Unix systems,
fdopen() fails when file descriptors exceed a certain value, typically 255.
For Perls 5.8.0 and later, PerlIO is (most often) the default.

You can see whether your Perl was built with PerlIO by running C<perl -V>
and looking for the C<useperlio=> line.  If C<useperlio> is C<define>, you
have PerlIO; otherwise you don't.

If you open a pipe on the command C<-> (that is, specify either C<|-> or C<-|>
with the one- or two-argument forms of C<open>), 
an implicit C<fork> is done, so C<open> returns twice: in the parent
process it returns the pid
of the child process, and in the child process it returns (a defined) C<0>.
Use C<defined($pid)> or C<//> to determine whether the open was successful.

For example, use either

    $child_pid = open(FROM_KID, "-|") 	// die "can't fork: $!";

or
    $child_pid = open(TO_KID,   "|-") 	// die "can't fork: $!";

followed by 

    if ($child_pid) {
	# am the parent:
	# either write TO_KID or else read FROM_KID
	...
	wait $child_pid;
    } else {
	# am the child; use STDIN/STDOUT normally
	...
	exit;
    } 

The filehandle behaves normally for the parent, but I/O to that
filehandle is piped from/to the STDOUT/STDIN of the child process.
In the child process, the filehandle isn't opened--I/O happens from/to
the new STDOUT/STDIN.  Typically this is used like the normal
d3466 1
a3466 1
The following blocks are more or less equivalent:
d3469 3
a3471 3
    open(FOO, "|-", "tr '[a-z]' '[A-Z]'");
    open(FOO, "|-") || exec 'tr', '[a-z]', '[A-Z]';
    open(FOO, "|-", "tr", '[a-z]', '[A-Z]');
d3474 3
a3476 3
    open(FOO, "-|", "cat -n '$file'");
    open(FOO, "-|") || exec "cat", "-n", $file;
    open(FOO, "-|", "cat", "-n", $file);
d3478 1
a3478 1
The last two examples in each block show the pipe as "list form", which is
d3480 2
a3481 9
your platform has a real C<fork()> (in other words, if your platform is
Unix, including Linux and MacOS X), you can use the list form.  You would 
want to use the list form of the pipe so you can pass literal arguments
to the command without risk of the shell interpreting any shell metacharacters
in them.  However, this also bars you from opening pipes to commands
that intentionally contain shell metacharacters, such as:

    open(FOO, "|cat -n | expand -4 | lpr")
	// die "Can't open pipeline to lpr: $!";
d3493 1
a3493 1
of C<$^F>.  See L<perlvar/$^F>.
d3496 1
a3496 1
child to finish, then returns the status value in C<$?> and
d3499 2
a3500 2
The filename passed to the one- and two-argument forms of open() will
have leading and trailing whitespace deleted and normal
d3508 1
a3508 1
Use the three-argument form to open a file with arbitrary weird characters in it,
d3510 1
a3510 2
    open(FOO, "<", $file)
	|| die "can't open < $file: $!";
d3515 1
a3515 2
    open(FOO, "< $file\0")
	|| die "open failed: $!";
d3518 1
a3518 1
conscientiously choose between the I<magic> and I<three-argument> form
d3521 1
a3521 1
    open(IN, $ARGV[0]) || die "can't open $ARGV[0]: $!";
d3526 1
a3526 2
    open(IN, "<", $ARGV[0])
	|| die "can't open < $ARGV[0]: $!";
d3530 5
a3534 5
If you want a "real" C C<open> (see L<open(2)> on your system), then you
should use the C<sysopen> function, which involves no such magic (but may
use subtly different filemodes than Perl open(), which is mapped to C
fopen()).  This is another way to protect your filenames from
interpretation.  For example:
d3546 2
a3547 3
filehandles that have the scope of the variables used to hold them, then
automatically (but silently) close once their reference counts become
zero, typically at scope exit:
a3552 1
	# or just leave it undef to autoviv
d3554 1
a3554 1
        open($handle, "<", "myfile") or die "myfile: $!";
d3557 3
a3559 3
        mung($first) or die "mung failed";  # Or here.
        return (first, <$handle>) if $ALL;  # Or here.
        return $first;                      # Or here.
a3561 8
B<WARNING:> The previous example has a bug because the automatic
close that happens when the refcount on C<handle> does not
properly detect and report failures.  I<Always> close the handle
yourself and inspect the return value.

    close($handle) 
	|| warn "close failed: $!";

a3563 2
Portability issues: L<perlport/open>.

a3566 2
=for Pod::Functions open a directory

d3572 1
a3572 1
reference to a new anonymous dirhandle; that is, it's autovivified.
d3575 1
a3575 1
See the example at C<readdir>.
d3582 3
a3584 5
=for Pod::Functions find a character's numeric representation

Returns the numeric value of the first character of EXPR.
If EXPR is an empty string, returns 0.  If EXPR is omitted, uses C<$_>.
(Note I<character>, not byte.)
a3597 2
=for Pod::Functions +5.6.0 declare and assign a package variable (lexical scoping)

d3602 1
a3602 1
In this way C<our> differs from C<use vars>, which is package-scoped.
d3604 6
a3609 6
Unlike C<my> or C<state>, which allocates storage for a variable and
associates a simple name with that storage for use within the current
scope, C<our> associates a simple name with a package (read: global)
variable in the current package, for use within the current lexical scope.
In other words, C<our> has the same scoping rules as C<my> or C<state>, but
does not necessarily create a variable.
d3654 3
a3656 3
evolving.  TYPE is currently bound to the use of the C<fields> pragma,
and attributes are handled using the C<attributes> pragma, or, starting
from Perl 5.8.0, also via the C<Attribute::Handlers> module.  See
a3662 2
=for Pod::Functions convert a list into a binary representation

d3679 1
a3679 2
    b  A bit string (ascending bit order inside each byte,
       like vec()).
d3696 3
a3698 3
         (Quads are available only if your system supports 64-bit
          integer values _and_ if Perl has been compiled to support
          those.  Raises an exception otherwise.)
d3702 2
a3703 2
         (This 'integer' is _at_least_ 32 bits wide.  Its exact
          size depends on what a local C compiler calls 'int'.)
d3710 2
a3711 2
    j  A Perl internal signed integer value (IV).
    J  A Perl internal unsigned integer value (UV).
d3718 3
a3720 3
         (Long doubles are available only if your system supports
          long double values _and_ if Perl has been compiled to
          support those.  Raises an exception otherwise.)
d3726 7
a3732 9
    U  A Unicode character number.  Encodes to a character in char-
       acter mode and UTF-8 (or UTF-EBCDIC in EBCDIC platforms) in
       byte mode.

    w  A BER compressed integer (not an ASN.1 BER, see perlpacktut
       for details).  Its bytes represent an unsigned integer in
       base 128, most significant digit first, with as few digits
       as possible.  Bit eight (the high bit) is set on each byte
       except the last.
d3738 1
a3738 2
    .  Null-fill or truncate to absolute position specified by
       the value.
d3752 2
a3753 2
                   representation of the packed string.  Efficient
                   but dangerous.
d3776 1
a3776 1
something else, described below.  Supplying a C<*> for the repeat count
d3829 1
a3829 1
I<n>th innermost C<( )> group, or to the start of the string if I<n> is
d3835 1
a3835 1
to encode per line of output, with 0, 1 and 2 replaced by 45.  The repeat 
d3843 1
a3843 1
after the first null, and C<a> returns data with no stripping at all.
d3848 1
a3848 1
when the count is 0.
d3853 1
a3853 2
Each such format generates 1 bit of the result.  These are typically followed
by a repeat count like C<B8> or C<B64>.
d3872 1
a3872 1
On unpacking, bits are converted to a string of C<0>s and C<1>s.
d3879 1
a3879 1
For each such format, pack() generates 4 bits of result.
d3883 1
a3883 1
C<"\000"> and C<"\001">.  For characters C<"a".."f"> and C<"A".."F">, the result
d3885 2
a3886 2
C<"A"> both generate the nybble C<0xA==10>.  Use only these specific hex 
characters with this format.
d3927 1
a3927 1
I<length-item> describes how the length value is packed.  Formats likely
d3933 1
a3933 1
for I<length-item>.  If it has no repeat count or uses a '*', the number
d3937 2
a3938 2
used.  You write C</>I<sequence-item> and the repeat count is obtained by
popping off the last element from the stack.  The I<sequence-item> must not
d3946 3
a3948 5
 This code:                              gives this result:
 
  unpack("W/a", "\004Gurusamy")          ("Guru")
  unpack("a3/A A*", "007 Bond  J ")      (" Bond", "J")
  unpack("a3 x2 /A A*", "007: Bond, J.") ("Bond, J", ".")
d3950 2
a3951 2
  pack("n/a* w/a","hello,","world")     "\000\006hello,\005world"
  pack("a/W2", ord("a") .. ord("z"))    "2ab"
d4013 2
a4014 2
big-endian.  Alpha and MIPS can be either: Digital/Compaq uses (well, used) 
them in little-endian mode, but SGI/Cray uses them in big-endian mode.
d4054 1
a4054 1
given how C<n>, C<N>, C<v>, and C<V> don't cover signed integers, 
d4057 1
a4057 1
Here are some concerns to keep in mind when using an endianness modifier:
d4116 2
a4117 3
a byte-by-byte basis.  Character mode is the default
unless the format string starts with C<U>.  You
can always switch mode mid-format with an explicit 
a4120 20
Using C<C0> to get Unicode characters while using C<U0> to get I<non>-Unicode 
bytes is not necessarily obvious.   Probably only the first of these
is what you want:

    $ perl -CS -E 'say "\x{3B1}\x{3C9}"' | 
      perl -CS -ne 'printf "%v04X\n", $_ for unpack("C0A*", $_)'
    03B1.03C9
    $ perl -CS -E 'say "\x{3B1}\x{3C9}"' | 
      perl -CS -ne 'printf "%v02X\n", $_ for unpack("U0A*", $_)'
    CE.B1.CF.89
    $ perl -CS -E 'say "\x{3B1}\x{3C9}"' | 
      perl -C0 -ne 'printf "%v02X\n", $_ for unpack("C0A*", $_)'
    CE.B1.CF.89
    $ perl -CS -E 'say "\x{3B1}\x{3C9}"' | 
      perl -C0 -ne 'printf "%v02X\n", $_ for unpack("U0A*", $_)'
    C3.8E.C2.B1.C3.8F.C2.89

Those examples also illustrate that you should not try to use
C<pack>/C<unpack> as a substitute for the L<Encode> module.

d4133 1
a4133 1
C<@@> starts over at 0.  Therefore, the result of
d4143 1
a4143 1
characters.  For example, to pack() or unpack() a C structure like
d4176 1
a4176 1
If TEMPLATE requires more arguments than pack() is given, pack()
d4191 3
a4193 4
    # same thing with Unicode circled letters.  You don't get the
    # UTF-8 bytes because the U at the start of the format caused
    # a switch to U0-mode, so the UTF-8 bytes get joined into
    # characters
d4196 1
a4196 2
    # This is the UTF-8 encoding of the string in the
    # previous example
d4207 2
a4208 2
    # "\001\000\002\000" on little-endian
    # "\000\001\000\002" on big-endian
a4251 2
=item package NAMESPACE

d4255 1
a4255 17
=item package NAMESPACE BLOCK

=item package NAMESPACE VERSION BLOCK
X<package> X<module> X<namespace> X<version>

=for Pod::Functions declare a separate global namespace

Declares the BLOCK or the rest of the compilation unit as being in the
given namespace.  The scope of the package declaration is either the
supplied code BLOCK or, in the absence of a BLOCK, from the declaration
itself through the end of current scope (the enclosing block, file, or
C<eval>).  That is, the forms without a BLOCK are operative through the end
of the current scope, just like the C<my>, C<state>, and C<our> operators.
All unqualified dynamic identifiers in this scope will be in the given
namespace, except where overridden by another C<package> declaration or
when they're one of the special identifiers that qualify into C<main::>,
like C<STDOUT>, C<ARGV>, C<ENV>, and the punctuation variables.
d4257 4
d4263 1
a4263 1
with C<my>, C<state>, or C<our>.  Typically it would be the first 
a4283 7
=item __PACKAGE__
X<__PACKAGE__>

=for Pod::Functions +5.004 the current package

A special token that returns the name of the package in which it occurs.

a4286 2
=for Pod::Functions open a pair of connected filehandles

d4293 1
a4293 2
See L<IPC::Open2>, L<IPC::Open3>, and
L<perlipc/"Bidirectional Communication with Another Process">
a4302 2
=item pop EXPR

a4304 2
=for Pod::Functions remove the last element from an array and return it

a4311 12
Starting with Perl 5.14, C<pop> can take a scalar EXPR, which must hold a
reference to an unblessed array.  The argument will be dereferenced
automatically.  This aspect of C<pop> is considered highly experimental.
The exact behaviour may change in a future version of Perl.

To avoid confusing would-be users of your code who are running earlier
versions of Perl with mysterious syntax errors, put this sort of thing at
the top of your file to signal that your code will work I<only> on Perls of
a recent vintage:

    use 5.014;	# so push/pop/etc work on scalars (experimental)

d4317 9
a4325 20
=for Pod::Functions find or set the offset for the last/next m//g search

Returns the offset of where the last C<m//g> search left off for the
variable in question (C<$_> is used when the variable is not
specified).  Note that 0 is a valid match offset.  C<undef> indicates
that the search position is reset (usually due to match failure, but
can also be because no match has yet been run on the scalar).

C<pos> directly accesses the location used by the regexp engine to
store the offset, so assigning to C<pos> will change that offset, and
so will also influence the C<\G> zero-width assertion in regular
expressions.  Both of these effects take place for the next match, so
you can't affect the position with C<pos> during the current match,
such as in C<(?{pos() = 5})> or C<s//pos() = 5/e>.

Setting C<pos> also resets the I<matched with zero-length> flag, described
under L<perlre/"Repeated Patterns Matching a Zero-length Substring">.

Because a failed C<m//gc> match doesn't reset the offset, the return
from C<pos> won't change either in this case.  See L<perlre> and
a4330 2
=item print FILEHANDLE

a4334 2
=for Pod::Functions output a list to a filehandle

d4336 18
a4353 18
FILEHANDLE may be a scalar variable containing the name of or a reference
to the filehandle, thus introducing one level of indirection.  (NOTE: If
FILEHANDLE is a variable and the next token is a term, it may be
misinterpreted as an operator unless you interpose a C<+> or put
parentheses around the arguments.)  If FILEHANDLE is omitted, prints to the
last selected (see L</select>) output handle.  If LIST is omitted, prints
C<$_> to the currently selected output handle.  To use FILEHANDLE alone to
print the content of C<$_> to it, you must use a real filehandle like
C<FH>, not an indirect one like C<$fh>.  To set the default output handle
to something other than STDOUT, use the select operation.

The current value of C<$,> (if any) is printed between each LIST item.  The
current value of C<$\> (if any) is printed after the entire LIST has been
printed.  Because print takes a LIST, anything in the LIST is evaluated in
list context, including any subroutines whose return lists you pass to
C<print>.  Be careful not to follow the print keyword with a left
parenthesis unless you want the corresponding right parenthesis to
terminate the arguments to the print; put parentheses around all arguments
d4356 3
a4358 5
If you're storing handles in an array or hash, or in general whenever
you're using any expression more complex than a bareword handle or a plain,
unsubscripted scalar variable to retrieve it, you will have to use a block
returning the filehandle value instead, in which case the LIST may not be
omitted:
a4368 2
=item printf FILEHANDLE

a4370 4
=item printf

=for Pod::Functions output a formatted list to a filehandle

d4372 4
a4375 8
(the output record separator) is not appended.  The first argument of the
list will be interpreted as the C<printf> format.  See
L<sprintf|/sprintf FORMAT, LIST> for an
explanation of the format argument.  If you omit the LIST, C<$_> is used;
to use FILEHANDLE without a LIST, you must use a real filehandle like
C<FH>, not an indirect one like C<$fh>.  If C<use locale> (including
C<use locale ':not_characters'>) is in effect and
POSIX::setlocale() has been called, the character used for the decimal
d4377 1
a4377 1
locale setting.  See L<perllocale> and L<POSIX>.
a4385 2
=for Pod::Functions +5.002 get the prototype (if any) of a subroutine

d4400 3
a4402 7
=item push EXPR,LIST

=for Pod::Functions append one or more elements to an array

Treats ARRAY as a stack by appending the values of LIST to the end of
ARRAY.  The length of ARRAY increases by the length of LIST.  Has the same
effect as
a4410 12
Starting with Perl 5.14, C<push> can take a scalar EXPR, which must hold a
reference to an unblessed array.  The argument will be dereferenced
automatically.  This aspect of C<push> is considered highly experimental.
The exact behaviour may change in a future version of Perl.

To avoid confusing would-be users of your code who are running earlier
versions of Perl with mysterious syntax errors, put this sort of thing at
the top of your file to signal that your code will work I<only> on Perls of
a recent vintage:

    use 5.014;	# so push/pop/etc work on scalars (experimental)

a4412 2
=for Pod::Functions singly quote a string

d4415 1
a4415 1
=for Pod::Functions doubly quote a string
a4418 6
=for Pod::Functions quote a list of words

=item qx/STRING/

=for Pod::Functions backquote quote a string

a4422 2
=for Pod::Functions +5.005 compile pattern

d4430 2
a4431 4
=for Pod::Functions quote regular expression magic characters

Returns the value of EXPR with all the ASCII non-"word"
characters backslashed.  (That is, all ASCII characters not matching
a4435 1
(See below for the behavior on non-ASCII code points.)
d4441 1
a4441 1
considered a mini-regular expression.  For example:
d4462 2
a4463 58
Will both leave the sentence as is.
Normally, when accepting literal string
input from the user, quotemeta() or C<\Q> must be used.

In Perl v5.14, all non-ASCII characters are quoted in non-UTF-8-encoded
strings, but not quoted in UTF-8 strings.

Starting in Perl v5.16, Perl adopted a Unicode-defined strategy for
quoting non-ASCII characters; the quoting of ASCII characters is
unchanged.

Also unchanged is the quoting of non-UTF-8 strings when outside the
scope of a C<use feature 'unicode_strings'>, which is to quote all
characters in the upper Latin1 range.  This provides complete backwards
compatibility for old programs which do not use Unicode.  (Note that
C<unicode_strings> is automatically enabled within the scope of a
S<C<use v5.12>> or greater.)

Within the scope of C<use locale>, all non-ASCII Latin1 code points
are quoted whether the string is encoded as UTF-8 or not.  As mentioned
above, locale does not affect the quoting of ASCII-range characters.
This protects against those locales where characters such as C<"|"> are
considered to be word characters.

Otherwise, Perl quotes non-ASCII characters using an adaptation from
Unicode (see L<http://www.unicode.org/reports/tr31/>.)
The only code points that are quoted are those that have any of the
Unicode properties:  Pattern_Syntax, Pattern_White_Space, White_Space,
Default_Ignorable_Code_Point, or General_Category=Control.

Of these properties, the two important ones are Pattern_Syntax and
Pattern_White_Space.  They have been set up by Unicode for exactly this
purpose of deciding which characters in a regular expression pattern
should be quoted.  No character that can be in an identifier has these
properties.

Perl promises, that if we ever add regular expression pattern
metacharacters to the dozen already defined
(C<\ E<verbar> ( ) [ { ^ $ * + ? .>), that we will only use ones that have the
Pattern_Syntax property.  Perl also promises, that if we ever add
characters that are considered to be white space in regular expressions
(currently mostly affected by C</x>), they will all have the
Pattern_White_Space property.

Unicode promises that the set of code points that have these two
properties will never change, so something that is not quoted in v5.16
will never need to be quoted in any future Perl release.  (Not all the
code points that match Pattern_Syntax have actually had characters
assigned to them; so there is room to grow, but they are quoted
whether assigned or not.  Perl, of course, would never use an
unassigned code point as an actual metacharacter.)

Quoting characters that have the other 3 properties is done to enhance
the readability of the regular expression and not because they actually
need to be quoted for regular expression purposes (characters with the
White_Space property are likely to be indistinguishable on the page or
screen from those with the Pattern_White_Space property; and the other
two properties contain non-printing characters).
a4469 2
=for Pod::Functions retrieve the next pseudorandom number

a4487 7
B<C<rand()> is not cryptographically secure.  You should not rely
on it in security-sensitive situations.>  As of this writing, a
number of third-party CPAN modules offer random number generators
intended by their authors to be cryptographically secure,
including: L<Data::Entropy>, L<Crypt::Random>, L<Math::Random::Secure>,
and L<Math::TrulyRandom>.

a4492 2
=for Pod::Functions fixed-length buffered input from a filehandle

d4508 1
a4508 2
fread(3) library function.  To get a true read(2) system call, see
L<sysread|/sysread FILEHANDLE,SCALAR,LENGTH,OFFSET>.
d4511 1
a4511 1
either (8-bit) bytes or characters are read.  By default, all
d4514 1
a4514 1
pragma, L<open>), the I/O will operate on UTF8-encoded Unicode
a4520 2
=for Pod::Functions get a directory from a directory handle

a4542 7
To avoid confusing would-be users of your code who are running earlier
versions of Perl with mysterious failures, put this sort of thing at the
top of your file to signal that your code will work I<only> on Perls of a
recent vintage:

    use 5.012; # so readdir assigns to $_ in a lone while test

a4547 2
=for Pod::Functions fetch a record from a file

d4549 1
a4549 1
C<*ARGV> if EXPR is not provided).  In scalar context, each call reads and
d4579 1
a4579 1
C<ARGV> filehandle.  In that case, you have to open each element of
a4596 2
=for Pod::Functions determine where a symbolic link is pointing

a4601 2
Portability issues: L<perlport/readlink>.

a4606 2
=for Pod::Functions execute a system command and collect standard output

a4619 2
=for Pod::Functions receive a message over a Socket

d4633 1
a4633 1
C<open> pragma, L<open>), the I/O will operate on UTF8-encoded Unicode
a4641 2
=for Pod::Functions start this loop iteration over again

d4666 1
a4666 1
C<eval {}>, C<sub {}>, or C<do {}>, and should not be used to exit
a4680 2
=for Pod::Functions find out the type of thing being referenced

d4682 1
a4682 1
string otherwise.  If EXPR
d4710 2
a4711 2
a variable.  You get this from taking the reference of function calls like
C<pos()> or C<substr()>.  C<VSTRING> is returned if the reference points
a4721 2
=for Pod::Functions change a filename

a4734 2
Portability issues: L<perlport/rename>.

a4741 2
=for Pod::Functions load in external functions from a library at runtime

d4831 1
a4831 1
first look for a similar filename with a "F<.pmc>" extension.  If this file
d4835 1
a4835 1
You can also insert hooks into the import facility by putting Perl code
d4837 1
a4837 1
references, array references, and blessed objects.
d4854 1
a4854 1
A reference to a subroutine.  If there is no filehandle (previous item),
d4856 2
a4857 2
call, writing the line into C<$_> and returning 1, then finally at end of
file returning 0.  If there is a filehandle, then the subroutine will be
d4864 1
a4864 1
Optional state for the subroutine.  The state is passed in as C<$_[1]>.  A
d4872 2
a4873 2
or reference to a typeglob, whether blessed or unblessed); tied filehandles 
will be ignored and processing will stop there.
d4915 1
a4915 1
corresponding to the files they have loaded.  See L<perlvar/%INC>.
a4923 2
=for Pod::Functions clear all variables of a given name

a4947 2
=for Pod::Functions get out of a function early

d4951 1
a4951 1
may vary from one execution to the next (see L</wantarray>).  If no EXPR
a4961 2
=for Pod::Functions flip a string or a list

a4991 2
=for Pod::Functions reset directory handle

a4994 2
Portability issues: L<perlport/rewinddir>.

a4999 2
=for Pod::Functions right-to-left substring search

a5008 2
=for Pod::Functions remove a directory

d5010 1
a5010 1
empty.  If it succeeds it returns true; otherwise it returns false and
a5017 2
=for Pod::Functions replace a pattern with a string

a5022 2
=item say FILEHANDLE

d5027 3
a5029 1
=for Pod::Functions +say output a list to a filehandle, appending a newline
d5031 2
a5032 9
Just like C<print>, but implicitly appends a newline.  C<say LIST> is
simply an abbreviation for C<{ local $\ = "\n"; print LIST }>.  To use
FILEHANDLE without a LIST to print the contents of C<$_> to it, you must
use a real filehandle like C<FH>, not an indirect one like C<$fh>.

This keyword is available only when the C<"say"> feature
is enabled, or when prefixed with C<CORE::>; see
L<feature>.  Alternately, include a C<use v5.10> or later to the current
scope.
a5036 2
=for Pod::Functions force a scalar context

d5048 4
a5051 4
Because C<scalar> is a unary operator, if you accidentally use a
parenthesized list for the EXPR, this behaves as a scalar comma expression,
evaluating all but the last element in void context and returning the final
element evaluated in scalar context.  This is seldom what you want.
a5066 2
=for Pod::Functions reposition file pointer for random-access I/O

d5070 3
a5072 3
I<in bytes> to POSITION; C<1> to set it to the current position plus
POSITION; and C<2> to set it to EOF plus POSITION, typically
negative.  For WHENCE you may use the constants C<SEEK_SET>,
d5074 1
a5074 1
of the file) from the L<Fcntl> module.  Returns C<1> on success, false
a5113 2
=for Pod::Functions reposition directory pointer

a5123 2
=for Pod::Functions reset default output or do I/O multiplexing

d5126 1
a5126 1
effects: first, a C<write> or a C<print> without a filehandle 
d5128 3
a5130 4
output will refer to this output channel.  

For example, to set the top-of-form format for more than one
output channel, you might do the following:
a5147 2
Portability issues: L<perlport/select>.

d5155 2
a5156 2
    vec($rin, fileno(STDIN),  1) = 1;
    vec($win, fileno(STDOUT), 1) = 1;
d5163 4
a5166 4
        my @@fhlist = @@_;
        my $bits = "";
        for my $fh (@@fhlist) {
            vec($bits, fileno($fh), 1) = 1;
d5168 1
a5168 1
        return $bits;
d5170 1
a5170 1
    $rin = fhbits(*STDIN, *TTY, *MYSOCK);
d5197 1
a5197 1
On error, C<select> behaves just like select(2): it returns
d5200 5
a5204 7
On some Unixes, select(2) may report a socket file descriptor as "ready for
reading" even when no data is available, and thus any subsequent C<read>
would block.  This can be avoided if you always use O_NONBLOCK on the
socket.  See select(2) and fcntl(2) for further details.

The standard C<IO::Select> module provides a user-friendlier interface
to C<select>, mostly because it does all the bit-mask work for you.
a5209 2
Portability issues: L<perlport/select>.

a5212 2
=for Pod::Functions SysV semaphore control operations

a5225 2
Portability issues: L<perlport/semctl>.

a5228 2
=for Pod::Functions get set of SysV semaphores

d5230 1
a5230 1
the undefined value on error.  See also
a5233 2
Portability issues: L<perlport/semget>.

a5236 2
=for Pod::Functions SysV semaphore operations

d5242 1
a5242 1
successful, false on error.  As an example, the
a5251 2
Portability issues: L<perlport/semop>.

a5256 2
=for Pod::Functions send a message over a socket

a5274 2
=for Pod::Functions set the process group of a process

a5281 2
Portability issues: L<perlport/setpgrp>.

a5284 2
=for Pod::Functions set a process's nice value

a5288 2
Portability issues: L<perlport/setpriority>.

d5292 2
a5293 4
=for Pod::Functions set some socket options

Sets the socket option requested.  Returns C<undef> on error.
Use integer constants provided by the C<Socket> module for
a5302 2
Portability issues: L<perlport/setsockopt>.

a5305 2
=item shift EXPR

a5307 2
=for Pod::Functions remove the first element of an array, and return it

d5314 1
a5314 13
C<UNITCHECK {}>, and C<END {}> constructs.

Starting with Perl 5.14, C<shift> can take a scalar EXPR, which must hold a
reference to an unblessed array.  The argument will be dereferenced
automatically.  This aspect of C<shift> is considered highly experimental.
The exact behaviour may change in a future version of Perl.

To avoid confusing would-be users of your code who are running earlier
versions of Perl with mysterious syntax errors, put this sort of thing at
the top of your file to signal that your code will work I<only> on Perls of
a recent vintage:

    use 5.014;	# so push/pop/etc work on scalars (experimental)
a5322 2
=for Pod::Functions SysV shared memory operations

d5329 2
a5330 2
structure.  Returns like ioctl: C<undef> for error; "C<0> but
true" for zero; and the actual return value otherwise.
a5332 2
Portability issues: L<perlport/shmctl>.

a5335 2
=for Pod::Functions get SysV shared memory segment identifier

d5337 1
a5337 1
segment id, or C<undef> on error.
a5339 2
Portability issues: L<perlport/shmget>.

a5343 2
=for Pod::Functions read SysV shared memory

a5345 2
=for Pod::Functions write SysV shared memory

d5351 3
a5353 5
SIZE bytes.  Return true if successful, false on error.
shmread() taints the variable.  See also L<perlipc/"SysV IPC">,
C<IPC::SysV>, and the C<IPC::Shareable> module from CPAN.

Portability issues: L<perlport/shmread> and L<perlport/shmwrite>.
a5357 2
=for Pod::Functions close down just half of a socket connection

a5379 2
=for Pod::Functions return the sine of a number

a5392 2
=for Pod::Functions block for some number of seconds

d5418 1
a5418 1
your system supports it.  See L<perlfaq8> for details.
a5424 2
=for Pod::Functions create a socket

a5437 2
=for Pod::Functions create a pair of sockets

a5458 2
Portability issues: L<perlport/socketpair>.

a5465 2
=for Pod::Functions sort a list of values

d5479 7
a5485 10
If the subroutine's prototype is C<($$)>, the elements to be compared are
passed by reference in C<@@_>, as for a normal subroutine.  This is slower
than unprototyped subroutines, where the elements to be compared are passed
into the subroutine as the package global variables $a and $b (see example
below).  Note that in the latter case, it is usually highly counter-productive
to declare $a and $b as lexicals.

If the subroutine is an XSUB, the elements to be compared are pushed on to
the stack, the way arguments are usually passed to XSUBs.  $a and $b are
not set.
d5493 1
a5493 2
When C<use locale> (but not C<use locale 'not_characters'>) is in
effect, C<sort LIST> sorts LIST according to the
d5503 1
a5503 1
That algorithm was not stable, so I<could> go quadratic.  (A I<stable> sort
d5525 1
a5525 1
    @@articles = sort {fc($a) cmp fc($b)} @@files;
d5542 1
a5542 1
        $age{$a} <=> $age{$b};  # presuming numeric
d5562 2
a5563 2
                            ||
                    fc($a)  cmp  fc($b)
d5572 1
a5572 1
        push @@caps, fc($_);
d5576 5
a5580 5
                           $nums[$b] <=> $nums[$a]
                                    ||
                           $caps[$a] cmp $caps[$b]
                         } 0..$#old
                  ];
d5585 3
a5587 3
                           ||
                  $a->[2] cmp $b->[2]
           } map { [$_, /=(\d+)/, fc($_)] } @@old;
d5606 1
a5606 1
a function.  If you want to sort the list returned by the function call
d5639 4
a5642 3
(not-a-number), be careful when sorting with a
comparison function like C<< $a <=> $b >> any lists that might contain a
C<NaN>.  The following example takes advantage that C<NaN != NaN> to
d5647 1
a5647 1
=item splice ARRAY or EXPR,OFFSET,LENGTH,LIST
d5650 1
a5650 3
=item splice ARRAY or EXPR,OFFSET,LENGTH

=item splice ARRAY or EXPR,OFFSET
d5652 1
a5652 1
=item splice ARRAY or EXPR
d5654 1
a5654 1
=for Pod::Functions add or remove elements anywhere in an array
d5665 1
a5665 1
If both OFFSET and LENGTH are omitted, removes everything.  If OFFSET is
d5669 1
a5669 1
The following equivalences hold (assuming C<< $#a >= $i >> )
a5689 12
Starting with Perl 5.14, C<splice> can take scalar EXPR, which must hold a
reference to an unblessed array.  The argument will be dereferenced
automatically.  This aspect of C<splice> is considered highly experimental.
The exact behaviour may change in a future version of Perl.

To avoid confusing would-be users of your code who are running earlier
versions of Perl with mysterious syntax errors, put this sort of thing at
the top of your file to signal that your code will work I<only> on Perls of
a recent vintage:

    use 5.014;	# so push/pop/etc work on scalars (experimental)

d5699 10
a5708 51
=for Pod::Functions split up a string using a regexp delimiter

Splits the string EXPR into a list of strings and returns the
list in list context, or the size of the list in scalar context.

If only PATTERN is given, EXPR defaults to C<$_>.

Anything in EXPR that matches PATTERN is taken to be a separator
that separates the EXPR into substrings (called "I<fields>") that
do B<not> include the separator.  Note that a separator may be
longer than one character or even have no characters at all (the
empty string, which is a zero-width match).

The PATTERN need not be constant; an expression may be used
to specify a pattern that varies at runtime.

If PATTERN matches the empty string, the EXPR is split at the match
position (between characters).  As an example, the following:

    print join(':', split('b', 'abc')), "\n";

uses the 'b' in 'abc' as a separator to produce the output 'a:c'.
However, this:

    print join(':', split('', 'abc')), "\n";

uses empty string matches as separators to produce the output
'a:b:c'; thus, the empty string may be used to split EXPR into a
list of its component characters.

As a special case for C<split>, the empty pattern given in
L<match operator|perlop/"m/PATTERN/msixpodualgc"> syntax (C<//>) specifically matches the empty string, which is contrary to its usual
interpretation as the last successful match.

If PATTERN is C</^/>, then it is treated as if it used the
L<multiline modifier|perlreref/OPERATORS> (C</^/m>), since it
isn't much use otherwise.

As another special case, C<split> emulates the default behavior of the
command line tool B<awk> when the PATTERN is either omitted or a I<literal
string> composed of a single space character (such as S<C<' '>> or
S<C<"\x20">>, but not e.g. S<C</ />>).  In this case, any leading
whitespace in EXPR is removed before splitting occurs, and the PATTERN is
instead treated as if it were C</\s+/>; in particular, this means that
I<any> contiguous whitespace (not just a single space character) is used as
a separator.  However, this special treatment can be avoided by specifying
the pattern S<C</ />> instead of the string S<C<" ">>, thereby allowing
only a single space character to be a separator.

If omitted, PATTERN defaults to a single space, S<C<" ">>, triggering
the previously described I<awk> emulation.
d5711 37
a5747 5
of fields into which the EXPR may be split; in other words, LIMIT is
one greater than the maximum number of times EXPR may be split.  Thus,
the LIMIT value C<1> means that EXPR may be split a maximum of zero
times, producing a maximum of one field (namely, the entire value of
EXPR).  For instance:
d5749 2
a5750 1
    print join(':', split(//, 'abc', 1)), "\n";
d5752 2
a5753 1
produces the output 'abc', and this:
d5755 1
a5755 1
    print join(':', split(//, 'abc', 2)), "\n";
d5757 1
a5757 1
produces the output 'a:bc', and each of these:
d5759 5
a5763 2
    print join(':', split(//, 'abc', 3)), "\n";
    print join(':', split(//, 'abc', 4)), "\n";
d5765 2
a5766 1
produces the output 'a:b:c'.
d5768 1
a5768 2
If LIMIT is negative, it is treated as if it were instead arbitrarily
large; as many fields as possible are produced.
d5770 1
a5770 5
If LIMIT is omitted (or, equivalently, zero), then it is usually
treated as if it were instead negative but with the exception that
trailing empty fields are stripped (empty leading fields are always
preserved); if all fields are empty, then all fields are considered to
be trailing (and are thus stripped in this case).  Thus, the following:
d5772 1
a5772 1
    print join(':', split(',', 'a,b,c,,,')), "\n";
d5774 2
a5775 1
produces the output 'a:b:c', but the following:
d5777 2
a5778 1
    print join(':', split(',', 'a,b,c,,,', -1)), "\n";
d5780 3
a5782 1
produces the output 'a:b:c:::'.
d5784 7
a5790 5
In time-critical applications, it is worthwhile to avoid splitting
into more fields than necessary.  Thus, when assigning to a list,
if LIMIT is omitted (or zero), then LIMIT is treated as though it
were one larger than the number of variables in the list; for the
following, LIMIT is implicitly 4:
d5792 2
a5793 1
    ($login, $passwd, $remainder) = split(/:/);
d5795 1
a5795 2
Note that splitting an EXPR that evaluates to the empty string always
produces zero fields, regardless of the LIMIT specified.
d5797 7
a5803 16
An empty leading field is produced when there is a positive-width
match at the beginning of EXPR.  For instance:

    print join(':', split(/ /, ' abc')), "\n";

produces the output ':abc'.  However, a zero-width match at the
beginning of EXPR never produces an empty field, so that:

    print join(':', split(//, ' abc'));

produces the output S<' :a:b:c'> (rather than S<': :a:b:c'>).

An empty trailing field, on the other hand, is produced when there is a
match at the end of EXPR, regardless of the length of the match
(of course, unless a non-zero LIMIT is given explicitly, such fields are
removed, as in the last example).  Thus:
d5805 2
a5806 1
    print join(':', split(//, ' abc', -1)), "\n";
d5808 2
a5809 28
produces the output S<' :a:b:c:'>.

If the PATTERN contains
L<capturing groups|perlretut/Grouping things and hierarchical matching>,
then for each separator, an additional field is produced for each substring
captured by a group (in the order in which the groups are specified,
as per L<backreferences|perlretut/Backreferences>); if any group does not
match, then it captures the C<undef> value instead of a substring.  Also,
note that any such additional field is produced whenever there is a
separator (that is, whenever a split occurs), and such an additional field
does B<not> count towards the LIMIT.  Consider the following expressions
evaluated in list context (each returned list is provided in the associated
comment):

    split(/-|,/, "1-10,20", 3)
    # ('1', '10', '20')

    split(/(-|,)/, "1-10,20", 3)
    # ('1', '-', '10', ',', '20')

    split(/-|(,)/, "1-10,20", 3)
    # ('1', undef, '10', ',', '20')

    split(/(-)|,/, "1-10,20", 3)
    # ('1', '-', '10', undef, '20')

    split(/(-)|(,)/, "1-10,20", 3)
    # ('1', '-', undef, '10', undef, ',', '20')
a5813 2
=for Pod::Functions formatted print into a string

d5816 1
a5816 1
and see L<sprintf(3)> or L<printf(3)> on your system for an explanation of
d5834 1
a5834 2
pass it an array as your first argument. 
The array is given scalar context,
d5861 1
a5861 1
         into the next argument in the parameter list
d5886 1
a5886 1
An explicit format parameter index, such as C<2$>.  By default sprintf
d5934 1
a5934 1
integers, one for each character in the string.  Perl applies the format to
d5936 1
a5936 1
dot C<.> by default).  This can be useful for displaying ordinal values of
d5956 1
a5956 1
display the given value.  You can override the width by putting
d5960 5
a5964 5
  printf "<%s>", "a";       # prints "<a>"
  printf "<%6s>", "a";      # prints "<     a>"
  printf "<%*s>", 6, "a";   # prints "<     a>"
  printf "<%*2$s>", "a", 6; # prints "<     a>"
  printf "<%2s>", "long";   # prints "<long>" (does not truncate)
d5974 1
a5974 1
For floating-point formats except C<g> and C<G>, this specifies
d5986 1
a5986 1
including those prior to the decimal point and those after it; for 
d6048 1
a6048 1
number as using C<l>, C<h>, C<V>, C<q>, C<L>, or C<ll>.  For integer
d6054 1
a6054 2
   hh          interpret integer as C type "char" or "unsigned char"
	       on Perl 5.14 or later
d6056 2
a6057 12
   j	       interpret integer as C type "intmax_t" on Perl 5.14 
	       or later, and only with a C99 compiler (unportable)
   l           interpret integer as C type "long" or "unsigned long"
   q, L, or ll interpret integer as C type "long long", "unsigned long long",
               or "quad" (typically 64-bit integers)
   t	       interpret integer as C type "ptrdiff_t" on Perl 5.14 or later
   z	       interpret integer as C type "size_t" on Perl 5.14 or later

As of 5.14, none of these raises an exception if they are not supported on
your platform.  However, if warnings are enabled, a warning of the
C<printf> warning class is issued on an unsupported conversion flag.  
Should you instead prefer an exception, do this:
d6059 4
a6062 8
    use warnings FATAL => "printf";

If you would like to know about a version dependency before you
start running the program, put something like this at its top:

    use 5.014;  # for hh/j/t/z/ printf modifiers

You can find out whether your Perl supports quads via L<Config>:
d6072 1
a6072 1
platform supports them.  You can find out whether your Perl supports long
d6099 1
a6099 1
format for each format specification.  If the format specification
d6129 1
a6129 2
If C<use locale> (including C<use locale 'not_characters'>) is in effect
and POSIX::setlocale() has been called,
a6138 2
=for Pod::Functions square root function

d6151 1
a6151 3
=for Pod::Functions seed the random number generator

Sets and returns the random number seed for the C<rand> operator.
d6153 21
a6173 21
The point of the function is to "seed" the C<rand> function so that C<rand>
can produce a different sequence each time you run your program.  When
called with a parameter, C<srand> uses that for the seed; otherwise it
(semi-)randomly chooses a seed.  In either case, starting with Perl 5.14,
it returns the seed.  To signal that your code will work I<only> on Perls
of a recent vintage:

    use 5.014;	# so srand returns the seed

If C<srand()> is not called explicitly, it is called implicitly without a
parameter at the first use of the C<rand> operator.  However, this was not true
of versions of Perl before 5.004, so if your script will run under older
Perl versions, it should call C<srand>; otherwise most programs won't call
C<srand()> at all.

But there are a few situations in recent Perls where programs are likely to
want to call C<srand>.  One is for generating predictable results generally for
testing or debugging.  There, you use C<srand($seed)>, with the same C<$seed>
each time.  Another case is that you may want to call C<srand()>
after a C<fork()> to avoid child processes sharing the same seed value as the
parent (and consequently each other).
d6175 1
a6175 1
Do B<not> call C<srand()> (i.e., without an argument) more than once per
d6178 1
a6178 1
C<srand()> again actually I<loses> randomness.
d6190 10
a6209 12
A typical use of the returned seed is for a test program which has too many
combinations to test comprehensively in the time available to it each run.  It
can test a random subset each time, and should there be a failure, log the seed
used for that run so that it can later be used to reproduce the same results.

B<C<rand()> is not cryptographically secure.  You should not rely
on it in security-sensitive situations.>  As of this writing, a
number of third-party CPAN modules offer random number generators
intended by their authors to be cryptographically secure,
including: L<Data::Entropy>, L<Crypt::Random>, L<Math::Random::Secure>,
and L<Math::TrulyRandom>.

a6218 2
=for Pod::Functions get a file's status information

d6221 1
a6221 1
omitted, it stats C<$_> (not C<_>!).  Returns the empty list if C<stat> fails.  Typically
d6247 1
a6247 1
(*) Not all fields are supported on all filesystem types.  Notably, the
d6249 1
a6249 1
"creation time"; see L<perlport/"Files and Filesystems"> for details.
d6307 1
a6307 1
    # Note that the exact meaning of these is system-dependent.
d6311 1
a6311 2
    # File types.  Not all are necessarily available on
    # your system.
d6313 1
a6313 2
    S_IFREG S_IFDIR S_IFLNK S_IFBLK S_IFCHR
    S_IFIFO S_IFSOCK S_IFWHT S_ENFMT
d6315 1
a6315 2
    # The following are compatibility aliases for S_IRUSR,
    # S_IWUSR, and S_IXUSR.
d6321 2
a6322 2
    S_IMODE($mode)    the part of $mode containing the permission
                      bits and the setuid/setgid/sticky bits
d6324 3
a6326 3
    S_IFMT($mode)     the part of $mode containing the file type
                      which can be bit-anded with (for example)
                      S_IFREG or with the following functions
a6342 2
Portability issues: L<perlport/stat>.

d6352 1
a6352 3
=for Pod::Functions +state declare and assign a persistent lexical variable

C<state> declares a lexically scoped variable, just like C<my>.
a6355 1
See L<perlsub/"Persistent Private Variables"> for details.
d6358 1
a6358 2
is in effect, unless the keyword is written as C<CORE::state>.
See also L<feature>.
a6364 2
=for Pod::Functions optimize input data for repeated searches

d6368 1
a6368 1
patterns you are searching and the distribution of character
d6370 1
a6370 1
run times with and without it to see which is faster.  Those loops
d6372 3
a6374 2
parts of more complex patterns) will benefit most.
(The way C<study> works is this: a linked list of every
d6429 4
a6432 6
=for Pod::Functions declare a subroutine, possibly anonymously

This is subroutine definition, not a real function I<per se>.  Without a
BLOCK it's just a forward declaration.  Without a NAME, it's an anonymous
function declaration, so does return a value: the CODE ref of the closure
just created.
d6435 1
a6435 1
references; see L<attributes> and L<Attribute::Handlers> for more
a6437 11
=item __SUB__
X<__SUB__>

=for Pod::Functions +current_sub the current subroutine, or C<undef> if not in a subroutine

A special token that returns the a reference to the current subroutine, or
C<undef> outside of a subroutine.

This token is only available under C<use v5.16> or the "current_sub"
feature.  See L<feature>.

a6444 2
=for Pod::Functions get or alter a portion of a string

d6446 4
a6449 3
offset zero.  If OFFSET is negative, starts
that far back from the end of the string.  If LENGTH is omitted, returns
everything through the end of the string.  If LENGTH is negative, leaves that
d6487 1
a6487 1
Note that the lvalue returned by the three-argument version of substr() acts as
d6499 1
a6499 12
With negative offsets, it remembers its position from the end of the string
when the target string is modified:

    $x = '1234';
    for (substr($x, -3, 2)) {
        $_ = 'a';   print $x,"\n";    # prints 1a4, as above
        $x = 'abcdefg';
        print $_,"\n";                # prints f
    }

Prior to Perl version 5.10, the result of using an lvalue multiple times was
unspecified.  Prior to 5.16, the result with negative offsets was
a6504 2
=for Pod::Functions create a symbolic link to a file

a6511 2
Portability issues: L<perlport/symlink>.

a6514 2
=for Pod::Functions execute an arbitrary system call

d6538 3
a6540 3
Note that some system calls I<can> legitimately return C<-1>.  The proper
way to handle such calls is to assign C<$!=0> before the call, then
check the value of C<$!> if C<syscall> returns C<-1>.
d6543 1
a6543 1
number of the read end of the pipe it creates, but there is no way
a6546 2
Portability issues: L<perlport/syscall>.

d6552 5
a6556 7
=for Pod::Functions +5.002 open a file, pipe, or descriptor

Opens the file whose filename is given by FILENAME, and associates it with
FILEHANDLE.  If FILEHANDLE is an expression, its value is used as the real
filehandle wanted; an undefined scalar will be suitably autovivified.  This
function calls the underlying operating system's I<open>(2) function with the
parameters FILENAME, MODE, and PERMS.
d6559 3
a6561 3
system-dependent; they are available via the standard module C<Fcntl>.  See
the documentation of your operating system's I<open>(2) syscall to see
which values and flag bits are available.  You may combine several flags
d6604 1
a6604 1
exceed a certain value, typically 255.  If you need more file
a6609 2
Portability issues: L<perlport/sysopen>.

a6614 2
=for Pod::Functions fixed-length unbuffered input from a filehandle

d6645 6
a6650 7
=for Pod::Functions +5.004 position I/O pointer on handle used with sysread and syswrite

Sets FILEHANDLE's system position in bytes using lseek(2).  FILEHANDLE may
be an expression whose value gives the name of the filehandle.  The values
for WHENCE are C<0> to set the new position to POSITION; C<1> to set the it
to the current position plus POSITION; and C<2> to set it to EOF plus
POSITION, typically negative.
d6657 2
a6658 2
sysseek() bypasses normal buffered IO, so mixing it with reads other
than C<sysread> (for example C<< <> >> or read()) C<print>, C<write>,
a6678 2
=for Pod::Functions run a separate program

d6680 1
a6680 1
done first and the parent process waits for the child process to
d6701 2
a6702 2
below).  See also L</exec>.  This is I<not> what you want to use to capture
the output from a command; for that you should use merely backticks or
d6744 1
a6744 3
handler.  See L<perlipc> for details.

Portability issues: L<perlport/system>.
a6752 2
=for Pod::Functions fixed-length unbuffered output to a filehandle

d6758 1
a6758 1
stdio layers usually buffer data.  Returns the number of bytes
d6769 1
a6769 1
B<WARNING>: If the filehandle is marked C<:utf8>, Unicode characters
d6771 1
a6771 1
return value of syswrite() are in (UTF8-encoded Unicode) characters.
a6772 2
Alternately, if the handle is not marked with an encoding but you
attempt to write characters with code points over 255, raises an exception.
a6779 2
=for Pod::Functions get current seekpointer on a filehandle

d6797 1
a6797 1
that has been manipulated by sysread(), syswrite(), or sysseek().
a6802 2
=for Pod::Functions get current seekpointer on a directory handle

a6810 2
=for Pod::Functions +5.002 bind a variable to an object class

a6902 2
=for Pod::Functions get a reference to the object underlying a tied variable

a6910 2
=for Pod::Functions return number of seconds since 1970

d6913 1
a6913 1
C<localtime>.  On most systems the epoch is 00:00:00 UTC, January 1, 1970;
d6917 5
a6921 4
For measuring time in better granularity than one second, use the
L<Time::HiRes> module from Perl 5.8 onwards (or from CPAN before then), or,
if you have gettimeofday(2), you may be able to use the C<syscall>
interface of Perl.  See L<perlfaq8> for details.
d6930 2
a6931 4
=for Pod::Functions return elapsed time for self and child processes

Returns a four-element list giving the user and system times in
seconds for this process and any exited children of this process.
a6938 2
Portability issues: L<perlport/times>.

a6940 2
=for Pod::Functions transliterate a string

a6948 2
=for Pod::Functions shorten a file

d6951 2
a6952 1
on your system.  Returns true if successful, C<undef> on error.
d6958 1
a6958 3
call L<seek|/"seek FILEHANDLE,POSITION,WHENCE"> before writing to the file.

Portability issues: L<perlport/truncate>.
a6964 2
=for Pod::Functions return upper-case version of a string

a6979 2
=for Pod::Functions return a string with just the next letter in upper case

a6993 2
=for Pod::Functions set file creation mode mask

d7003 1
a7003 1
if your umask is C<0022>, then the file will actually be created with
d7006 2
a7007 2
C<sysopen> C<0666> would create a file with mode C<0640> (because 
C<0666 &~ 027> is C<0640>).
a7026 2
Portability issues: L<perlport/umask>.

a7031 2
=for Pod::Functions remove a variable or function definition

d7036 1
a7036 1
DBM list values, so don't do that; see L</delete>.  Always returns the
d7059 2
a7060 4
=for Pod::Functions remove one link to a file

Deletes a list of files.  On success, it returns the number of files
it successfully deleted.  On failure, it returns false and sets C<$!>
d7076 1
a7076 1
superuser and the B<-U> flag is supplied to Perl.  Even if these
a7087 2
=for Pod::Functions convert binary structure into normal perl variables

d7117 1
a7117 1
C<ord($char)> is taken; for bit fields the sum of zeroes and ones).
d7145 6
a7153 4
=item unshift EXPR,LIST

=for Pod::Functions prepend more elements to the beginning of a list

d7156 1
a7156 1
array and returns the new number of elements in the array.
a7163 21
Starting with Perl 5.14, C<unshift> can take a scalar EXPR, which must hold
a reference to an unblessed array.  The argument will be dereferenced
automatically.  This aspect of C<unshift> is considered highly
experimental.  The exact behaviour may change in a future version of Perl.

To avoid confusing would-be users of your code who are running earlier
versions of Perl with mysterious syntax errors, put this sort of thing at
the top of your file to signal that your code will work I<only> on Perls of
a recent vintage:

    use 5.014;	# so push/pop/etc work on scalars (experimental)

=item untie VARIABLE
X<untie>

=for Pod::Functions break a tie binding to a variable

Breaks the binding between a variable and a package.
(See L<tie|/tie VARIABLE,CLASSNAME,LIST>.)
Has no effect if the variable is not tied.

a7174 2
=for Pod::Functions load in a module at compile time and import its namespace

a7181 1
The importation can be made conditional; see L<if>.
d7205 3
a7207 3
C<use VERSION> also enables all features available in the requested
version as defined by the C<feature> pragma, disabling any features
not in the requested version's feature bundle.  See L<feature>.
d7209 2
a7210 5
5.11.0, strictures are enabled lexically as
with C<use strict>.  Any explicit use of
C<use strict> or C<no strict> overrides C<use VERSION>, even if it comes
before it.  In both cases, the F<feature.pm> and F<strict.pm> files are
not actually loaded.
d7268 1
a7268 1
There's a corresponding C<no> declaration that unimports meanings imported
d7278 1
a7278 1
I<only> meant to be used to assert that the running Perl is of a earlier
a7288 2
=for Pod::Functions set a file's last access and modify times

d7290 1
a7290 1
files.  The first two elements of the list must be the NUMERIC access
d7303 1
a7303 1
argument.  On most systems, this will set the file's access and
a7328 2
Portability issues: L<perlport/utime>.

d7334 2
a7335 1
=item values EXPR
d7337 6
a7342 1
=for Pod::Functions return a list of the values in a hash
d7344 8
a7351 11
In list context, returns a list consisting of all the values of the named
hash.  In Perl 5.12 or later only, will also return a list of the values of
an array; prior to that release, attempting to use an array argument will
produce a syntax error.  In scalar context, returns the number of values.

When called on a hash, the values are returned in an apparently random
order.  The actual random order is subject to change in future versions of
Perl, but it is guaranteed to be the same order as either the C<keys> or
C<each> function would produce on the same (unmodified) hash.  Since Perl
5.8.1 the ordering is different even between different runs of Perl for
security reasons (see L<perlsec/"Algorithmic Complexity Attacks">).
a7352 7
As a side effect, calling values() resets the HASH or ARRAY's internal
iterator, see L</each>.  (In particular, calling values() in void context
resets the iterator with no other overhead.  Apart from resetting the
iterator, C<values @@array> in list context is the same as plain C<@@array>.
(We recommend that you use void context C<keys @@array> for this, but
reasoned that taking C<values @@array> out would require more
documentation than leaving it in.)
a7359 16
Starting with Perl 5.14, C<values> can take a scalar EXPR, which must hold
a reference to an unblessed hash or array.  The argument will be
dereferenced automatically.  This aspect of C<values> is considered highly
experimental.  The exact behaviour may change in a future version of Perl.

    for (values $hashref) { ... }
    for (values $obj->get_arrayref) { ... }

To avoid confusing would-be users of your code who are running earlier
versions of Perl with mysterious syntax errors, put this sort of thing at
the top of your file to signal that your code will work I<only> on Perls of
a recent vintage:

    use 5.012;	# so keys/values/each work on arrays
    use 5.014;	# so keys/values/each work on scalars (experimental)

a7364 2
=for Pod::Functions test or set particular bits in a string

d7366 1
a7366 1
width BITS and returns the value of the element specified by OFFSET
a7602 2
=for Pod::Functions wait for any child process to die

d7610 2
a7611 4
If you use wait in your handler for $SIG{CHLD} it may accidentally for the
child created by qx() or system().  See L<perlipc> for details.

Portability issues: L<perlport/wait>.
a7615 2
=for Pod::Functions wait for  a particular child process to die

a7637 2
Portability issues: L<perlport/waitpid>.

a7640 2
=for Pod::Functions get void vs scalar vs list context of current subroutine call

a7658 2
=for Pod::Functions print debugging info

d7697 1
a7697 1
See L<perlvar> for details on setting C<%SIG> entries and for more
a7707 2
=for Pod::Functions print a picture record

d7714 9
a7722 9
Top of form processing is handled automatically:  if there is insufficient
room on the current page for the formatted record, the page is advanced by
writing a form feed, a special top-of-page format is used to format the new
page header before the record is written.  By default, the top-of-page
format is the name of the filehandle with "_TOP" appended.  This would be a
problem with autovivified filehandles, but it may be dynamically set to the
format of your choice by assigning the name to the C<$^> variable while
that filehandle is selected.  The number of lines remaining on the current
page is in variable C<$->, which can be set to C<0> to force a new page.
a7733 2
=for Pod::Functions transliterate a string

a7737 125

=head2 Non-function Keywords by Cross-reference

=head3 perldata

=over

=item __DATA__

=item __END__

These keywords are documented in L<perldata/"Special Literals">.

=back

=head3 perlmod

=over

=item BEGIN

=item CHECK

=item END

=item INIT

=item UNITCHECK

These compile phase keywords are documented in L<perlmod/"BEGIN, UNITCHECK, CHECK, INIT and END">.

=back

=head3 perlobj

=over

=item DESTROY

This method keyword is documented in L<perlobj/"Destructors">.

=back

=head3 perlop

=over

=item and

=item cmp

=item eq

=item ge

=item gt

=item if

=item le

=item lt

=item ne

=item not

=item or

=item x

=item xor

These operators are documented in L<perlop>.

=back

=head3 perlsub

=over

=item AUTOLOAD

This keyword is documented in L<perlsub/"Autoloading">.

=back

=head3 perlsyn

=over

=item else

=item elseif

=item elsif

=item for

=item foreach

=item unless

=item until

=item while

These flow-control keywords are documented in L<perlsyn/"Compound Statements">.

=back

=over

=item default

=item given

=item when

These flow-control keywords related to the experimental switch feature are
documented in L<perlsyn/"Switch Statements"> .

=back

=cut
@


1.1.1.15
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d207 1
a207 1
C<evalbytes> is only available with the C<"evalbytes"> feature (see
d209 1
a209 1
with the C<"current_sub"> feature or if prefixed with C<CORE::>. Both
d397 1
a397 2
    -C  Same for inode change time (Unix, may differ for other
	platforms)
d482 1
a482 1
As of Perl 5.10.0, as a form of purely syntactic sugar, you can stack file
d707 1
a707 1
See L<perlobj> for more about the blessing (and blessings) of objects.
d723 4
a726 4
This keyword is enabled by the C<"switch"> feature; see L<feature> for
more information on C<"switch">.  You can also access it by prefixing it
with C<CORE::>.  Alternatively, include a C<use v5.10> or later to the
current scope.
d765 2
a766 4
compiled with.  C<$hints> corresponds to C<$^H>, and C<$bitmask>
corresponds to C<${^WARNING_BITS}>.  The
C<$hints> and C<$bitmask> values are subject
to change between versions of Perl, and are not meant for external use.
d1380 3
a1382 3
    $scalar = delete $hash{foo};         # $scalar is 11
    $scalar = delete @@hash{qw(foo bar)}; # $scalar is 22
    @@array  = delete @@hash{qw(foo baz)}; # @@array  is (undef,33)
d1497 1
a1497 2
        if (blessed($ev_err)
            && $ev_err->isa("Some::Module::Exception")) {
d1546 2
a1547 2
This form of subroutine call is deprecated.  SUBROUTINE can be a bareword
or scalar variable.
d1557 1
a1557 1
is largely like
d1561 1
a1561 2
except that it's more concise, runs no external processes, keeps track of
the current
a1595 2
=item dump EXPR

d1608 1
a1608 3
If C<LABEL> is omitted, restarts the program from the top.  The
C<dump EXPR> form, available starting in Perl 5.18.0, allows a name to be
computed at run time, being otherwise identical to C<dump LABEL>.
a1618 5
Unlike most named operators, this has the same precedence as assignment.
It is also exempt from the looks-like-a-function rule, so
C<dump ("foo")."bar"> will cause "bar" to be part of the argument to
C<dump>.

d1639 5
a1643 10
order is specific to a given hash; the exact same series of operations
on two hashes may result in a different order for each hash. Any insertion
into the hash may change the order, as will any deletion, with the exception
that the most recent key returned by C<each> or C<keys> may be deleted
without changing the order. So long as a given hash is unmodified you may
rely on C<keys>, C<values> and C<each> to repeatedly return the same order
as each other. See L<perlsec/"Algorithmic Complexity Attacks"> for
details on why hash order is randomized. Aside from the guarantees
provided here the exact details of Perl's hash algorithm and the hash
traversal order are subject to change in any release of Perl.
a1675 7
As of Perl 5.18 you can use a bare C<each> in a C<while> loop,
which will set C<$_> on every iteration.

    while(each %ENV) {
	print "$_=$ENV{$_}\n";
    }

a1682 1
    use 5.018;	# so each assigns to $_ in a lone while test
d1734 1
a1734 1
        last if eof();     # needed if we're reading from a terminal
d1886 4
a1889 4
         local $@@; # protect existing $@@
         eval { test_repugnancy() };
         # $@@ =~ /nefarious/ and die $@@; # Perl 5.14 and higher only
         $@@ =~ /nefarious/ and $e = $@@;
d1897 1
a1897 2
An C<eval ''> executed within a subroutine defined
in the C<DB> package doesn't see the usual
d1988 5
a1992 5
Perl attempts to flush all files opened for output before the exec,
but this may not be supported on some platforms (see L<perlport>).
To be safe, you may need to set C<$|> ($AUTOFLUSH in English) or
call the C<autoflush()> method of C<IO::Handle> on any open handles
to avoid lost output.
d2126 1
a2126 1
    lc($this) eq lc($that)    # Wrong!
d2128 1
a2128 1
    uc($this) eq uc($that)    # Also wrong!
d2130 1
a2130 1
    $this =~ /^\Q$that\E\z/i  # Right!
d2138 1
a2138 3
Perl only implements the full form of casefolding,
but you can access the simple folds using L<Unicode::UCD/casefold()> and
L<Unicode::UCD/prop_invmap()>.
d2283 1
a2283 2
    # import LOCK_* and SEEK_END constants
    use Fcntl qw(:flock SEEK_END);
d2327 1
a2327 1
Perl attempts to flush all files opened for
d2795 1
a2795 2
    print "Nagle's algorithm is turned ",
           $nodelay ? "off\n" : "on\n";
d2839 1
a2839 1
This operator is implemented using the standard
a2888 2
Also, unlike most named operators, this has the same precedence as
assignment.
d2943 1
a2943 2
been declared with the deprecated C<my $_> construct)
then, in addition to being locally aliased to
d3017 1
a3017 2
    require "sys/ioctl.ph";  # probably in
                             # $Config{archlib}/sys/ioctl.ph
d3078 7
a3084 11
Hash entries are returned in an apparently random order.  The actual random
order is specific to a given hash; the exact same series of operations
on two hashes may result in a different order for each hash. Any insertion
into the hash may change the order, as will any deletion, with the exception
that the most recent key returned by C<each> or C<keys> may be deleted
without changing the order. So long as a given hash is unmodified you may
rely on C<keys>, C<values> and C<each> to repeatedly return the same order
as each other. See L<perlsec/"Algorithmic Complexity Attacks"> for
details on why hash order is randomized. Aside from the guarantees
provided here the exact details of Perl's hash algorithm and the hash
traversal order are subject to change in any release of Perl.
d3086 2
a3087 2
As a side effect, calling keys() resets the internal iterator of the HASH or
ARRAY (see L</each>).  In particular, calling keys() in void context resets
d3159 2
a3160 2
    $cnt = kill 'HUP', $child1, $child2;
    kill 'KILL', @@goners;
d3162 3
a3164 18
SIGNAL may be either a signal name (a string) or a signal number.  A signal
name may start with a C<SIG> prefix, thus C<FOO> and C<SIGFOO> refer to the
same signal.  The string form of SIGNAL is recommended for portability because
the same signal may have different numbers in different operating systems.

A list of signal names supported by the current platform can be found in
C<$Config{sig_name}>, which is provided by the C<Config> module. See L<Config>
for more details.

A negative signal name is the same as a negative signal number, killing process
groups instead of processes.  For example, C<kill '-KILL', $pgrp> and
C<kill -9, $pgrp> will send C<SIGKILL> to the entire process group specified. That
means you usually want to use positive not negative signals.

If SIGNAL is either the number 0 or the string C<ZERO> (or C<SIGZZERO>),
no signal is sent to
the process, but C<kill> checks whether it's I<possible> to send a signal to it
(that means, to be brief, that the process is owned by the same user, or we are
d3169 5
d3176 1
a3176 6
signal the current process group, -1 will signal all processes, and any
other negative PROCESS number will act as a negative signal number and
kill the entire process group specified.

If both the SIGNAL and the PROCESS are negative, the results are undefined.
A warning may be produced in a future version.
a3196 2
=item last EXPR

d3203 1
a3203 4
omitted, the command refers to the innermost enclosing
loop.  The C<last EXPR> form, available starting in Perl
5.18.0, allows a label name to be computed at run time,
and is otherwise identical to C<last LABEL>.  The
a3221 5
Unlike most named operators, this has the same precedence as assignment.
It is also exempt from the looks-like-a-function rule, so
C<last ("foo")."bar"> will cause "bar" to be part of the argument to
C<last>.

d3240 8
d3251 2
d3273 1
a3273 1
=item Otherwise, if C<use feature 'unicode_strings'> or C<use locale ':not_characters'> is in effect:
d3279 8
d3292 2
d3315 1
a3315 1
=for Pod::Functions return the number of characters in a string
d3397 1
a3397 1
    my @@abbr = qw(Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec);
d3568 1
a3568 2
been declared with the deprecated C<my $_> construct),
then, in addition to being locally aliased to
d3582 5
a3586 5
    %hash = map {  "\L$_" => 1  } @@array # perl guesses EXPR. wrong
    %hash = map { +"\L$_" => 1  } @@array # perl guesses BLOCK. right
    %hash = map { ("\L$_" => 1) } @@array # this also works
    %hash = map {  lc($_) => 1  } @@array # as does this.
    %hash = map +( lc($_) => 1 ), @@array # this is EXPR and works!
d3588 1
a3588 1
    %hash = map  ( lc($_), 1 ),   @@array # evaluates to (1, @@array)
d3592 1
a3592 2
    @@hashes = map +{ lc($_) => 1 }, @@array # EXPR, so needs
                                           # comma at end
a3711 2
=item next EXPR

d3726 1
a3726 3
refers to the innermost enclosing loop.  The C<next EXPR> form, available
as of Perl 5.18.0, allows a label name to be computed at run time, being
otherwise identical to C<next LABEL>.
a3737 5
Unlike most named operators, this has the same precedence as assignment.
It is also exempt from the looks-like-a-function rule, so
C<next ("foo")."bar"> will cause "bar" to be part of the argument to
C<next>.

d3919 1
a3919 1
Perl is built using PerlIO by default; Unless you've
d3958 1
a3958 1
    print MEMORY "foo!\n";              # output will appear in $var
a4068 1

d4077 1
a4077 1
       waitpid $child_pid, 0;
d4118 1
a4118 1
Perl will attempt to flush all files opened for
d4201 1
a4201 1
close that happens when the refcount on C<handle> reaches zero does not
d4252 12
a4263 12
C<our> makes a lexical alias to a package variable of the same name in the current
package for use within the current lexical scope.

C<our> has the same scoping rules as C<my> or C<state>, but C<our> only
declares an alias, whereas C<my> or C<state> both declare a variable name and
allocate storage for that name within the current scope.

This means that when C<use strict 'vars'> is in effect, C<our> lets you use
a package variable without qualifying it with the package name, but only within
the lexical scope of the C<our> declaration.  In this way, C<our> differs from
C<use vars>, which allows use of an unqualified name I<only> within the
affected package, but across scopes.
d4271 1
a4271 1
An C<our> declaration declares an alias for a package variable that will be visible
a4424 22
=begin comment

Larry recalls that the hex and bit string formats (H, h, B, b) were added to
pack for processing data from NASA's Magellan probe. Magellan was in an
elliptical orbit, using the antenna for the radar mapping when close to
Venus and for communicating data back to Earth for the rest of the orbit.
There were two transmission units, but one of these failed, and then the
other developed a fault whereby it would randomly flip the sense of all the
bits. It was easy to automatically detect complete records with the correct
sense, and complete records with all the bits flipped. However, this didn't
recover the records where the sense flipped midway. A colleague of Larry's
was able to pretty much eyeball where the records flipped, so they wrote an
editor named kybble (a pun on the dog food Kibbles 'n Bits) to enable him to
manually correct the records and recover the data. For this purpose pack
gained the hex and bit string format specifiers.

git shows that they were added to perl 3.0 in patch #44 (Jan 1991, commit
27e2fb84680b9cc1), but the patch description makes no mention of their
addition, let alone the story behind them.

=end comment

d4607 5
a4611 1
 This code:                             gives this result:
d4613 2
a4614 6
 unpack("W/a", "\004Gurusamy")          ("Guru")
 unpack("a3/A A*", "007 Bond  J ")      (" Bond", "J")
 unpack("a3 x2 /A A*", "007: Bond, J.") ("Bond, J", ".")

 pack("n/a* w/a","hello,","world")     "\000\006hello,\005world"
 pack("a/W2", ord("a") .. ord("z"))    "2ab"
d4713 1
a4713 1
Starting with Perl 5.10.0, integer and floating-point formats, along with
d4962 1
a4962 1
you've used C<local> on, but I<not> lexically-scoped variables, which are created
a5001 2
Returns true on success.

d5121 2
a5122 4
(the output record separator) is not appended.  The FORMAT and the
LIST are actually parsed as a single list.  The first argument
of the list will be interpreted as the C<printf> format.  This
means that C<printf(@@_)> will use C<$_[0]> as the format.  See
d5124 3
a5126 1
explanation of the format argument.  If C<use locale> (including
a5131 7
For historical reasons, if you omit the list, C<$_> is used as the format;
to use FILEHANDLE without a list, you must use a real filehandle like
C<FH>, not an indirect one like C<$fh>.  However, this will rarely do what
you want; if $_ contains formatting codes, they will be replaced with the
empty string and a warning will be emitted if warnings are enabled.  Just
use C<print> if you want to print the contents of $_.

d5146 2
a5147 2
name for a Perl builtin.  If the builtin's arguments
cannot be adequately expressed by a prototype
d5271 1
a5271 1
Unicode (see L<http://www.unicode.org/reports/tr31/>).
d5388 1
a5388 1
As of Perl 5.12 you can use a bare C<readdir> in a C<while> loop,
a5510 2
=item redo EXPR

d5518 1
a5518 3
loop.  The C<redo EXPR> form, available starting in Perl 5.18.0, allows a
label name to be computed at run time, and is otherwise identical to C<redo
LABEL>.  Programs that want to lie to themselves about what was just input 
a5548 5
Unlike most named operators, this has the same precedence as assignment.
It is also exempt from the looks-like-a-function rule, so
C<redo ("foo")."bar"> will cause "bar" to be part of the argument to
C<redo>.

d5639 1
a5639 2
    require 5.006_001;  # ditto; preferred for backwards
                          compatibility
a5843 4
Unlike most named operators, this is also exempt from the
looks-like-a-function rule, so C<return ("foo")."bar"> will
cause "bar" to be part of the argument to C<return>.

d5861 2
a5862 2
    print reverse;                         # No output, list context
    print scalar reverse;                  # Hello, world
d5865 2
a5866 2
preserve non-existent elements whenever possible; i.e., for non-magical
arrays or for tied arrays with C<EXISTS> and C<DELETE> methods.
d6513 1
a6513 1

d6516 1
a6516 1

d6519 1
a6519 1

d6522 1
a6522 1

d6525 1
a6525 1

d6528 1
a6528 1

d6532 1
a6532 1

d6538 1
a6538 1

d6585 2
a6586 2
    sub backwards ($$) { $_[1] cmp $_[0]; }  # $a and $b are
                                             # not set here    
d6589 1
a6589 1

d6593 1
a6593 1

d6752 1
a6752 4
only a single space character to be a separator. In earlier Perl's this
special case was restricted to the use of a plain S<C<" ">> as the
pattern argument to split, in Perl 5.18.0 and later this special case is
triggered by any expression which evaluates as the simple string S<C<" ">>.
d6798 1
a6798 1
following, LIMIT is implicitly 3:
d6800 1
a6800 1
    ($login, $passwd) = split(/:/);
d6996 1
a6996 2
  printf '%*4$vX %*4$vX %*4$vX',       # 3 IPv6 addresses
          @@addr[1..3], ":";
d7005 5
a7009 5
 printf "<%s>", "a";       # prints "<a>"
 printf "<%6s>", "a";      # prints "<     a>"
 printf "<%*s>", 6, "a";   # prints "<     a>"
 printf '<%*2$s>', "a", 6; # prints "<     a>"
 printf "<%2s>", "long";   # prints "<long>" (does not truncate)
d7088 1
a7088 2
  printf '<%.*2$x>', 1, 6;   # INVALID, but in future will print
                             # "<000001>"
d7099 10
a7108 16
   hh          interpret integer as C type "char" or "unsigned
               char" on Perl 5.14 or later
   h           interpret integer as C type "short" or
               "unsigned short"
   j           interpret integer as C type "intmax_t" on Perl
               5.14 or later, and only with a C99 compiler
               (unportable)
   l           interpret integer as C type "long" or
               "unsigned long"
   q, L, or ll interpret integer as C type "long long",
               "unsigned long long", or "quad" (typically
               64-bit integers)
   t           interpret integer as C type "ptrdiff_t" on Perl
               5.14 or later
   z           interpret integer as C type "size_t" on Perl 5.14
               or later
d7125 1
a7125 2
    if ($Config{use64bitint} eq "define"
        || $Config{longsize} >= 8) {
d7143 1
a7143 1
        print "long doubles by default\n";
d7174 1
a7174 1
  printf '<%*1$.*s>', $a, $b;
d7182 4
a7185 4
  printf "%2\$d %d\n",    12, 34;      # will print "34 12\n"
  printf "%2\$d %d %d\n", 12, 34;      # will print "34 12 34\n"
  printf "%3\$d %d %d\n", 12, 34, 56;  # will print "56 12 34\n"
  printf "%2\$*3\$d %d\n", 12, 34, 3;  # will print " 34 12\n"
d7228 7
a7234 3
parameter at the first use of the C<rand> operator.
However, there are a few situations where programs are likely to
want to call C<srand>.  One is for generating predictable results, generally for
d7250 15
d7311 2
a7312 4
 11 blksize  preferred I/O size in bytes for interacting with the
             file (may vary from file to file)
 12 blocks   actual number of system-specific blocks allocated
             on disk (often, but not always, 512 bytes each)
d7524 1
a7524 1
A special token that returns a reference to the current subroutine, or
a7526 3
The behaviour of C<__SUB__> within a regex code block (such as C</(?{...})/>)
is subject to change.

d7686 1
a7686 1
OS/390 and on the Macintosh; you probably don't want to
d7814 1
a7814 1
Perl will attempt to flush all files opened for
d7947 1
a7947 2
of correct type.  Any additional arguments are passed to the
appropriate constructor
d7950 2
a7951 2
to the C<dbm_open()> function of C.  The object returned by the
constructor is also returned by the C<tie> function, which would be useful
a7993 2
    DELETE this, key
    EXISTS this, key
d8362 1
a8362 1
The importation can be made conditional by using the L<if> module.
d8390 1
a8390 1
5.12.0, strictures are enabled lexically as
d8487 1
a8487 1
Since Perl 5.8.0, if the first two elements of the list are C<undef>, 
d8531 6
a8536 11
Hash entries are returned in an apparently random order.  The actual random
order is specific to a given hash; the exact same series of operations
on two hashes may result in a different order for each hash. Any insertion
into the hash may change the order, as will any deletion, with the exception
that the most recent key returned by C<each> or C<keys> may be deleted
without changing the order. So long as a given hash is unmodified you may
rely on C<keys>, C<values> and C<each> to repeatedly return the same order
as each other. See L<perlsec/"Algorithmic Complexity Attacks"> for
details on why hash order is randomized. Aside from the guarantees
provided here the exact details of Perl's hash algorithm and the hash
traversal order are subject to change in any release of Perl.
d8549 2
a8550 2
    for (values %hash)      { s/foo/bar/g }  # modifies %hash values
    for (@@hash{keys %hash}) { s/foo/bar/g }  # same
d8647 21
a8667 1
  #!/usr/bin/perl -wl
d8669 5
a8673 25
  print <<'EOT';
                                    0         1         2         3
                     unpack("V",$_) 01234567890123456789012345678901
  ------------------------------------------------------------------
  EOT

  for $w (0..3) {
      $width = 2**$w;
      for ($shift=0; $shift < $width; ++$shift) {
          for ($off=0; $off < 32/$width; ++$off) {
              $str = pack("B*", "0"x32);
              $bits = (1<<$shift);
              vec($str, $off, $width) = $bits;
              $res = unpack("b*",$str);
              $val = unpack("V", $str);
              write;
          }
      }
  }

  format STDOUT =
  vec($_,@@#,@@#) = @@<< == @@######### @@>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
  $off, $width, $bits, $val, $res
  .
  __END__
d8678 131
a8808 131
                                    0         1         2         3
                     unpack("V",$_) 01234567890123456789012345678901
  ------------------------------------------------------------------
  vec($_, 0, 1) = 1   ==          1 10000000000000000000000000000000
  vec($_, 1, 1) = 1   ==          2 01000000000000000000000000000000
  vec($_, 2, 1) = 1   ==          4 00100000000000000000000000000000
  vec($_, 3, 1) = 1   ==          8 00010000000000000000000000000000
  vec($_, 4, 1) = 1   ==         16 00001000000000000000000000000000
  vec($_, 5, 1) = 1   ==         32 00000100000000000000000000000000
  vec($_, 6, 1) = 1   ==         64 00000010000000000000000000000000
  vec($_, 7, 1) = 1   ==        128 00000001000000000000000000000000
  vec($_, 8, 1) = 1   ==        256 00000000100000000000000000000000
  vec($_, 9, 1) = 1   ==        512 00000000010000000000000000000000
  vec($_,10, 1) = 1   ==       1024 00000000001000000000000000000000
  vec($_,11, 1) = 1   ==       2048 00000000000100000000000000000000
  vec($_,12, 1) = 1   ==       4096 00000000000010000000000000000000
  vec($_,13, 1) = 1   ==       8192 00000000000001000000000000000000
  vec($_,14, 1) = 1   ==      16384 00000000000000100000000000000000
  vec($_,15, 1) = 1   ==      32768 00000000000000010000000000000000
  vec($_,16, 1) = 1   ==      65536 00000000000000001000000000000000
  vec($_,17, 1) = 1   ==     131072 00000000000000000100000000000000
  vec($_,18, 1) = 1   ==     262144 00000000000000000010000000000000
  vec($_,19, 1) = 1   ==     524288 00000000000000000001000000000000
  vec($_,20, 1) = 1   ==    1048576 00000000000000000000100000000000
  vec($_,21, 1) = 1   ==    2097152 00000000000000000000010000000000
  vec($_,22, 1) = 1   ==    4194304 00000000000000000000001000000000
  vec($_,23, 1) = 1   ==    8388608 00000000000000000000000100000000
  vec($_,24, 1) = 1   ==   16777216 00000000000000000000000010000000
  vec($_,25, 1) = 1   ==   33554432 00000000000000000000000001000000
  vec($_,26, 1) = 1   ==   67108864 00000000000000000000000000100000
  vec($_,27, 1) = 1   ==  134217728 00000000000000000000000000010000
  vec($_,28, 1) = 1   ==  268435456 00000000000000000000000000001000
  vec($_,29, 1) = 1   ==  536870912 00000000000000000000000000000100
  vec($_,30, 1) = 1   == 1073741824 00000000000000000000000000000010
  vec($_,31, 1) = 1   == 2147483648 00000000000000000000000000000001
  vec($_, 0, 2) = 1   ==          1 10000000000000000000000000000000
  vec($_, 1, 2) = 1   ==          4 00100000000000000000000000000000
  vec($_, 2, 2) = 1   ==         16 00001000000000000000000000000000
  vec($_, 3, 2) = 1   ==         64 00000010000000000000000000000000
  vec($_, 4, 2) = 1   ==        256 00000000100000000000000000000000
  vec($_, 5, 2) = 1   ==       1024 00000000001000000000000000000000
  vec($_, 6, 2) = 1   ==       4096 00000000000010000000000000000000
  vec($_, 7, 2) = 1   ==      16384 00000000000000100000000000000000
  vec($_, 8, 2) = 1   ==      65536 00000000000000001000000000000000
  vec($_, 9, 2) = 1   ==     262144 00000000000000000010000000000000
  vec($_,10, 2) = 1   ==    1048576 00000000000000000000100000000000
  vec($_,11, 2) = 1   ==    4194304 00000000000000000000001000000000
  vec($_,12, 2) = 1   ==   16777216 00000000000000000000000010000000
  vec($_,13, 2) = 1   ==   67108864 00000000000000000000000000100000
  vec($_,14, 2) = 1   ==  268435456 00000000000000000000000000001000
  vec($_,15, 2) = 1   == 1073741824 00000000000000000000000000000010
  vec($_, 0, 2) = 2   ==          2 01000000000000000000000000000000
  vec($_, 1, 2) = 2   ==          8 00010000000000000000000000000000
  vec($_, 2, 2) = 2   ==         32 00000100000000000000000000000000
  vec($_, 3, 2) = 2   ==        128 00000001000000000000000000000000
  vec($_, 4, 2) = 2   ==        512 00000000010000000000000000000000
  vec($_, 5, 2) = 2   ==       2048 00000000000100000000000000000000
  vec($_, 6, 2) = 2   ==       8192 00000000000001000000000000000000
  vec($_, 7, 2) = 2   ==      32768 00000000000000010000000000000000
  vec($_, 8, 2) = 2   ==     131072 00000000000000000100000000000000
  vec($_, 9, 2) = 2   ==     524288 00000000000000000001000000000000
  vec($_,10, 2) = 2   ==    2097152 00000000000000000000010000000000
  vec($_,11, 2) = 2   ==    8388608 00000000000000000000000100000000
  vec($_,12, 2) = 2   ==   33554432 00000000000000000000000001000000
  vec($_,13, 2) = 2   ==  134217728 00000000000000000000000000010000
  vec($_,14, 2) = 2   ==  536870912 00000000000000000000000000000100
  vec($_,15, 2) = 2   == 2147483648 00000000000000000000000000000001
  vec($_, 0, 4) = 1   ==          1 10000000000000000000000000000000
  vec($_, 1, 4) = 1   ==         16 00001000000000000000000000000000
  vec($_, 2, 4) = 1   ==        256 00000000100000000000000000000000
  vec($_, 3, 4) = 1   ==       4096 00000000000010000000000000000000
  vec($_, 4, 4) = 1   ==      65536 00000000000000001000000000000000
  vec($_, 5, 4) = 1   ==    1048576 00000000000000000000100000000000
  vec($_, 6, 4) = 1   ==   16777216 00000000000000000000000010000000
  vec($_, 7, 4) = 1   ==  268435456 00000000000000000000000000001000
  vec($_, 0, 4) = 2   ==          2 01000000000000000000000000000000
  vec($_, 1, 4) = 2   ==         32 00000100000000000000000000000000
  vec($_, 2, 4) = 2   ==        512 00000000010000000000000000000000
  vec($_, 3, 4) = 2   ==       8192 00000000000001000000000000000000
  vec($_, 4, 4) = 2   ==     131072 00000000000000000100000000000000
  vec($_, 5, 4) = 2   ==    2097152 00000000000000000000010000000000
  vec($_, 6, 4) = 2   ==   33554432 00000000000000000000000001000000
  vec($_, 7, 4) = 2   ==  536870912 00000000000000000000000000000100
  vec($_, 0, 4) = 4   ==          4 00100000000000000000000000000000
  vec($_, 1, 4) = 4   ==         64 00000010000000000000000000000000
  vec($_, 2, 4) = 4   ==       1024 00000000001000000000000000000000
  vec($_, 3, 4) = 4   ==      16384 00000000000000100000000000000000
  vec($_, 4, 4) = 4   ==     262144 00000000000000000010000000000000
  vec($_, 5, 4) = 4   ==    4194304 00000000000000000000001000000000
  vec($_, 6, 4) = 4   ==   67108864 00000000000000000000000000100000
  vec($_, 7, 4) = 4   == 1073741824 00000000000000000000000000000010
  vec($_, 0, 4) = 8   ==          8 00010000000000000000000000000000
  vec($_, 1, 4) = 8   ==        128 00000001000000000000000000000000
  vec($_, 2, 4) = 8   ==       2048 00000000000100000000000000000000
  vec($_, 3, 4) = 8   ==      32768 00000000000000010000000000000000
  vec($_, 4, 4) = 8   ==     524288 00000000000000000001000000000000
  vec($_, 5, 4) = 8   ==    8388608 00000000000000000000000100000000
  vec($_, 6, 4) = 8   ==  134217728 00000000000000000000000000010000
  vec($_, 7, 4) = 8   == 2147483648 00000000000000000000000000000001
  vec($_, 0, 8) = 1   ==          1 10000000000000000000000000000000
  vec($_, 1, 8) = 1   ==        256 00000000100000000000000000000000
  vec($_, 2, 8) = 1   ==      65536 00000000000000001000000000000000
  vec($_, 3, 8) = 1   ==   16777216 00000000000000000000000010000000
  vec($_, 0, 8) = 2   ==          2 01000000000000000000000000000000
  vec($_, 1, 8) = 2   ==        512 00000000010000000000000000000000
  vec($_, 2, 8) = 2   ==     131072 00000000000000000100000000000000
  vec($_, 3, 8) = 2   ==   33554432 00000000000000000000000001000000
  vec($_, 0, 8) = 4   ==          4 00100000000000000000000000000000
  vec($_, 1, 8) = 4   ==       1024 00000000001000000000000000000000
  vec($_, 2, 8) = 4   ==     262144 00000000000000000010000000000000
  vec($_, 3, 8) = 4   ==   67108864 00000000000000000000000000100000
  vec($_, 0, 8) = 8   ==          8 00010000000000000000000000000000
  vec($_, 1, 8) = 8   ==       2048 00000000000100000000000000000000
  vec($_, 2, 8) = 8   ==     524288 00000000000000000001000000000000
  vec($_, 3, 8) = 8   ==  134217728 00000000000000000000000000010000
  vec($_, 0, 8) = 16  ==         16 00001000000000000000000000000000
  vec($_, 1, 8) = 16  ==       4096 00000000000010000000000000000000
  vec($_, 2, 8) = 16  ==    1048576 00000000000000000000100000000000
  vec($_, 3, 8) = 16  ==  268435456 00000000000000000000000000001000
  vec($_, 0, 8) = 32  ==         32 00000100000000000000000000000000
  vec($_, 1, 8) = 32  ==       8192 00000000000001000000000000000000
  vec($_, 2, 8) = 32  ==    2097152 00000000000000000000010000000000
  vec($_, 3, 8) = 32  ==  536870912 00000000000000000000000000000100
  vec($_, 0, 8) = 64  ==         64 00000010000000000000000000000000
  vec($_, 1, 8) = 64  ==      16384 00000000000000100000000000000000
  vec($_, 2, 8) = 64  ==    4194304 00000000000000000000001000000000
  vec($_, 3, 8) = 64  == 1073741824 00000000000000000000000000000010
  vec($_, 0, 8) = 128 ==        128 00000001000000000000000000000000
  vec($_, 1, 8) = 128 ==      32768 00000000000000010000000000000000
  vec($_, 2, 8) = 128 ==    8388608 00000000000000000000000100000000
  vec($_, 3, 8) = 128 == 2147483648 00000000000000000000000000000001
d8830 1
a8830 1
=for Pod::Functions wait for a particular child process to die
@


1.1.1.16
log
@Import perl-5.20.1
@
text
@d200 1
a200 1
feature or use the C<CORE::> prefix.  The C<"switch"> feature also enables
d202 1
a202 1
L<perlsyn/"Switch Statements">.  The C<"switch"> feature is enabled
d204 1
a204 1
scope.  In Perl v5.14 and earlier, C<continue> required the C<"switch">
d209 1
a209 1
with the C<"current_sub"> feature or if prefixed with C<CORE::>.  Both
d360 4
a363 4
Unless otherwise documented, it returns C<1> for true and C<''> for false.
If the file doesn't exist or can't be examined, it returns C<undef> and
sets C<$!> (errno).  Despite the funny names, precedence is the same as any
other named unary operator.  The operator may be any of:
d381 1
a381 2
    -l  File is a symbolic link (false if symlinks aren't
        supported by the file system).
d392 1
a392 1
    -T  File is an ASCII or UTF-8 text file (heuristic guess).
d451 6
a456 12
The C<-T> and C<-B> switches work as follows.  The first block or so of
the file is examined to see if it is valid UTF-8 that includes non-ASCII
characters.  If, so it's a C<-T> file.  Otherwise, that same portion of
the file is examined for odd characters such as strange control codes or
characters with the high bit set.  If more than a third of the
characters are strange, it's a C<-B> file; otherwise it's a C<-T> file.
Also, any file containing a zero byte in the examined portion is
considered a binary file.  (If executed within the scope of a L<S<use
locale>|perllocale> which includes C<LC_CTYPE>, odd characters are
anything that isn't a printable nor space in the current locale.) If
C<-T> or C<-B> is used on a filehandle, the current IO buffer is
examined
d485 1
a485 1
C<-x $file && -w _ && -f _>.  (This is only fancy syntax: if you use
d736 2
a737 2
Returns the context of the current pure perl subroutine call.  In scalar
context, returns the caller's package name if there I<is> a caller (that is, if
d739 1
a739 3
otherwise.  caller never returns XS subs and they are skipped.  The next pure
perl sub will appear instead of the XS sub in caller's return values. In list
context, caller returns
d755 2
a756 4
Here, $subroutine is the function that the caller called (rather than the
function containing the caller). Note that $subroutine may be C<(eval)> if
the frame is not a subroutine call, but an C<eval>.  In such a case
additional elements $evaltext and
d887 1
a887 2
If VARIABLE is a hash, it chomps the hash's values, but not its keys,
resetting the C<each> iterator in the process.
d916 1
a916 2
If VARIABLE is a hash, it chops the hash's values, but not its keys,
resetting the C<each> iterator in the process.
d969 1
a969 1
Portability issues: L<perlport/chown>.
a1008 3
B<NOTE:>  It is good security practice to do C<chdir("/")> (to the root
directory) immediately after a C<chroot()>.

d1365 1
a1365 1
or splice() for that.  However, if any deleted elements fall at the end of an
d1367 1
a1367 2
still tests true for exists(), or to 0 if none do. In other words, an
array won't have trailing nonexistent elements after a delete.
d1547 6
d1654 1
a1654 1
on two hashes may result in a different order for each hash.  Any insertion
d1657 1
a1657 1
without changing the order.  So long as a given hash is unmodified you may
d1659 2
a1660 2
as each other.  See L<perlsec/"Algorithmic Complexity Attacks"> for
details on why hash order is randomized.  Aside from the guarantees
d1671 4
a1674 4
elements while iterating over it, the effect on the iterator is
unspecified; for example, entries may be skipped or duplicated--so don't
do that.  Exception: It is always safe to delete the item most recently
returned by C<each()>, so the following code works properly:
a1680 3
Tied hashes may have a different ordering behaviour to perl's hash
implementation.

d1778 1
a1778 2
In the first form, often referred to as a "string eval", the return
value of EXPR is parsed and executed as if it
a1800 6
Problems can arise if the string expands a scalar containing a floating
point number.  That scalar can expand to letters, such as C<"NaN"> or
C<"Infinity">; or, within the scope of a C<use locale>, the decimal
point character may be something other than a dot (such as a comma).
None of these are likely to parse as you are likely expecting.

d1829 1
a1829 1
See L</warn>, L<perlvar>, and L<warnings>.
d1968 9
a1976 7
If there is more than one argument in LIST, this calls execvp(3) with the
arguments in LIST.  If there is only one element in LIST, the argument is
checked for shell metacharacters, and if there are any, the entire
argument is passed to the system's command shell for parsing (this is
C</bin/sh -c> on Unix platforms, but varies on other platforms).  If
there are no shell metacharacters in the argument, it is split into words
and passed directly to C<execvp>, which is more efficient.  Examples:
d1984 3
a1986 3
comma) in front of the LIST, as in C<exec PROGRAM LIST>.  (This always
forces interpretation of the LIST as a multivalued list, even if there
is only a single scalar in the list.)  Example:
a2015 4
On Windows, only the C<exec PROGRAM LIST> indirect object syntax will
reliably avoid using the shell; C<exec LIST>, even with more than one
element, will fall back to the shell if the first spawn fails.

d2177 2
a2178 10
This function behaves the same way under various pragma, such as within
S<C<"use feature 'unicode_strings">>, as L</lc> does, with the single
exception of C<fc> of LATIN CAPITAL LETTER SHARP S (U+1E9E) within the
scope of S<C<use locale>>.  The foldcase of this character would
normally be C<"ss">, but as explained in the L</lc> section, case
changes that cross the 255/256 boundary are problematic under locales,
and are hence prohibited.  Therefore, this function under locale returns
instead the string C<"\x{17F}\x{17F}">, which is the LATIN SMALL LETTER
LONG S.  Since that character itself folds to C<"s">, the string of two
of them together should be equivalent to a single U+1E9E when foldcased.
d2186 1
a2186 1
or when prefixed with C<CORE::>; See L<feature>.  Alternately,
d2255 1
a2255 1
    if (fileno(THIS) != -1 && fileno(THIS) == fileno(THAT)) {
a2256 6
    } elsif (fileno(THIS) != -1 && fileno(THAT) != -1) {
        print "THIS and THAT have different " .
            "underlying file descriptors\n";
    } else {
        print "At least one of THIS and THAT does " .
            "not have a real file descriptor\n";
d2466 2
a2467 1
module from your nearest L<CPAN|http://www.cpan.org> site.
d2523 1
a2523 1
has since been removed.  See the documentation for L<$$|perlvar/$$> for
d2669 7
a2675 9
 # 0        1          2           3         4
 ( $name,   $passwd,   $gid,       $members  ) = getgr*
 ( $name,   $aliases,  $addrtype,  $net      ) = getnet*
 ( $name,   $aliases,  $port,      $proto    ) = getserv*
 ( $name,   $aliases,  $proto                ) = getproto*
 ( $name,   $aliases,  $addrtype,  $length,  @@addrs ) = gethost*
 ( $name,   $passwd,   $uid,       $gid,     $quota,
 $comment,  $gcos,     $dir,       $shell,   $expire ) = getpw*
 # 5        6          7           8         9
d2902 1
a2902 1
The C<goto LABEL> form finds the statement labeled with LABEL and
d2912 1
a2912 6
The C<goto EXPR> form expects to evaluate C<EXPR> to a code reference or
a label name.  If it evaluates to a code reference, it will be handled
like C<goto &NAME>, below.  This is especially useful for implementing
tail recursion via C<goto __SUB__>.

If the expression evaluates to a label name, its scope will be resolved
d2918 1
a2918 1
As shown in this example, C<goto EXPR> is exempt from the "looks like a
d2924 1
a2924 1
Use of C<goto LABEL> or C<goto EXPR> to jump into a construct is
d2930 1
a2930 1
The C<goto &NAME> form is quite different from the other forms of
d3116 1
a3116 1
on two hashes may result in a different order for each hash.  Any insertion
d3119 1
a3119 1
without changing the order.  So long as a given hash is unmodified you may
d3121 2
a3122 2
as each other.  See L<perlsec/"Algorithmic Complexity Attacks"> for
details on why hash order is randomized.  Aside from the guarantees
d3124 1
a3124 3
traversal order are subject to change in any release of Perl.  Tied hashes
may behave differently to Perl's hashes with respect to changes in order on
insertion and deletion of items.
d3195 3
a3197 4
Sends a signal to a list of processes.  Returns the number of arguments
that were successfully used to signal (which is not necessarily the same
as the number of processes actually killed, e.g. where a process group is
killed).
d3208 1
a3208 1
C<$Config{sig_name}>, which is provided by the C<Config> module.  See L<Config>
d3213 1
a3213 2
C<kill -9, $pgrp> will send C<SIGKILL> to
the entire process group specified.  That
d3216 1
a3216 1
If SIGNAL is either the number 0 or the string C<ZERO> (or C<SIGZERO>),
d3235 2
a3236 2
On some platforms such as Windows where the fork() system call is not
available, Perl can be built to emulate fork() at the interpreter level.
d3305 2
a3306 2
The results follow ASCII rules.  Only the characters C<A-Z> change,
to C<a-z> respectively.
d3311 1
a3311 1
rules for the remaining code points (this last can only happen if
d3314 1
a3314 3
Starting in v5.20, Perl wil use full Unicode rules if the locale is
UTF-8.  Otherwise, there is a deficiency in this scheme, which is that
case changes that cross the 255/256
d3316 2
a3317 3
LETTER SHARP S (U+1E9E) in Unicode rules is U+00DF (on ASCII
platforms).   But under C<use locale> (prior to v5.20 or not a UTF-8
locale), the lower case of U+1E9E is
d3326 1
a3326 1
Unicode rules are used for the case change.
d3330 1
a3330 1
Unicode rules are used for the case change.
d3334 1
a3334 1
ASCII rules are used for the case change.  The lowercase of any character
d3671 1
a3671 1
the C<make_path> function of the L<File::Path> module.
d3734 1
a3734 1
=item my VARLIST
d3737 1
a3737 1
=item my TYPE VARLIST
d3739 1
a3739 1
=item my VARLIST : ATTRS
d3741 1
a3741 1
=item my TYPE VARLIST : ATTRS
d3746 1
a3746 1
enclosing block, file, or C<eval>.  If more than one variable is listed,
d3750 1
a3750 3
evolving.  TYPE may be a bareword, a constant declared
with C<use constant>, or C<__PACKAGE__>.  It is
currently bound to the use of the C<fields> pragma,
a3755 5
Note that with a parenthesised list, C<undef> can be used as a dummy
placeholder, for example to skip assignment of initial values:

    my ( undef, $min, $hour ) = localtime;

d3877 6
a3964 27
The filehandle will be closed when its reference count reaches zero.
If it is a lexically scoped variable declared with C<my>, that usually
means the end of the enclosing scope.  However, this automatic close
does not check for errors, so it is better to explicitly close
filehandles, especially those used for writing:

    close($handle)
       || warn "close failed: $!";

An older style is to use a bareword as the filehandle, as

    open(FH, "<", "input.txt")
       or die "cannot open < input.txt: $!";

Then you can use C<FH> as the filehandle, in C<< close FH >> and C<<
<FH> >> and so on.  Note that it's a global variable, so this form is
not recommended in new code.

As a shortcut a one-argument call takes the filename from the global
scalar variable of the same name as the filehandle:

    $ARTICLE = 100;
    open(ARTICLE) or die "Can't find article $ARTICLE: $!\n";

Here C<$ARTICLE> must be a global (package) scalar variable - not one
declared with C<my> or C<state>.

d3989 4
d4237 28
d4298 1
a4298 1
=item our VARLIST
d4301 1
a4301 1
=item our TYPE VARLIST
d4303 1
a4303 1
=item our VARLIST : ATTRS
d4305 1
a4305 1
=item our TYPE VARLIST : ATTRS
d4309 2
a4310 2
C<our> makes a lexical alias to a package (i.e. global) variable of the
same name in the current package for use within the current lexical scope.
d4312 3
a4314 4
C<our> has the same scoping rules as C<my> or C<state>, meaning that it is
only valid within a lexical scope.  Unlike C<my> and C<state>, which both
declare new (lexical) variables, C<our> only creates an alias to an
existing variable: a package variable of the same name.
d4318 3
a4320 15
the lexical scope of the C<our> declaration.

    package Foo;
    use strict;

    $Foo::foo = 23;

    {
        our $foo;   # alias to $Foo::foo
        print $foo; # prints 23
    }

    print $Foo::foo; # prints 23

    print $foo; # ERROR: requires explicit package name
d4322 1
a4322 11
This works even if the package variable has not been used before, as
package variables spring into existence when first used.

    package Foo;
    use strict;

    our $foo = 23;   # just like $Foo::foo = 23

    print $Foo::foo; # prints 23

If more than one variable is listed, the list must be placed
d4325 1
a4370 8
Note that with a parenthesised list, C<undef> can be used as a dummy
placeholder, for example to skip assignment of initial values:

    our ( undef, $min, $hour ) = localtime;

C<our> differs from C<use vars>, which allows use of an unqualified name
I<only> within the affected package, but across scopes.

d4464 1
a4464 1
    !   xX         Make x and X act as alignment commands.
d4466 1
a4466 1
    !   nNvV       Treat integers as signed instead of unsigned.
d4468 1
a4468 1
    !   @@.         Specify position as byte offset in the internal
d4485 1
a4485 1
pack for processing data from NASA's Magellan probe.  Magellan was in an
d5654 3
a5656 3
string otherwise.  If EXPR is not specified, C<$_> will be used.  The
value returned depends on the type of thing the reference is a reference to.

d5671 2
a5672 1
You can think of C<ref> as a C<typeof> operator.
a5688 11
If the referenced object has been blessed into a package, then that package
name is returned instead.  But don't use that, as it's now considered
"bad practice".  For one reason, an object could be using a class called
C<Regexp> or C<IO>, or even C<HASH>.  Also, C<ref> doesn't take into account
subclasses, like C<isa> does.

Instead, use C<blessed> (in the L<Scalar::Util> module) for boolean
checks, C<isa> for specific class checks and C<reftype> (also from
L<Scalar::Util>) for type checks.  (See L<perlobj> for details and a
C<blessed/isa> example.)

d5743 1
a5743 5
to the included code.  If it were implemented in pure Perl, it
would have semantics similar to the following:

    use Carp 'croak';
    use version;
d5746 26
a5771 39
        my ($filename) = @@_;
        if ( my $version = eval { version->parse($filename) } ) {
            if ( $version > $^V ) {
               my $vn = $version->normal;
               croak "Perl $vn required--this is only $^V, stopped";
            }
            return 1;
        }

        if (exists $INC{$filename}) {
            return 1 if $INC{$filename};
            croak "Compilation failed in require";
        }

        foreach $prefix (@@INC) {
            if (ref($prefix)) {
                #... do other stuff - see text below ....
            }
            # (see text below about possible appending of .pmc
            # suffix to $filename)
            my $realfilename = "$prefix/$filename";
            next if ! -e $realfilename || -d _ || -b _;
            $INC{$filename} = $realfilename;
            my $result = do($realfilename);
                         # but run in caller's namespace

            if (!defined $result) {
                $INC{$filename} = undef;
                croak $@@ ? "$@@Compilation failed in require"
                         : "Can't locate $filename: $!\n";
            }
            if (!$result) {
                delete $INC{$filename};
                croak "$filename did not return true value";
            }
            $! = 0;
            return $result;
        }
        croak "Can't locate $filename in \@@INC ...";
d5822 1
a5822 1
subroutine should return either nothing or else a list of up to four 
d5829 1
a5829 2
A reference to a scalar, containing any initial source code to prepend to
the file or generator output.
a5832 4
A filehandle, from which the file will be read.  

=item 3

d5841 1
a5841 1
=item 4
d6762 2
a6763 2
past the end of the array and a LENGTH was provided, Perl issues a warning,
and splices at the end of the array.
d6773 1
a6773 1
C<splice> can be used, for example, to implement n-ary queue processing:
d6775 8
a6782 5
    sub nary_print {
      my $n = shift;
      while (my @@next_n = splice @@_, 0, $n) {
        say join q{ -- }, @@next_n;
      }
d6784 1
a6784 6

    nary_print(3, qw(a b c d e f g h));
    # prints:
    #   a -- b -- c
    #   d -- e -- f
    #   g -- h
d6854 1
a6854 1
only a single space character to be a separator.  In earlier Perls this
d7514 1
a7514 1
=item state VARLIST
d7517 1
a7517 1
=item state TYPE VARLIST
d7519 1
a7519 1
=item state VARLIST : ATTRS
d7521 1
a7521 1
=item state TYPE VARLIST : ATTRS
a7530 5
If more than one variable is listed, the list must be placed in
parentheses.  With a parenthesised list, C<undef> can be used as a
dummy placeholder.  However, since initialization of state variables in
list context is currently not possible this would serve no purpose.

d7819 2
a7820 1
descriptors than that, consider using the POSIX::open() function.
d7912 1
a7912 3
more efficient.  On Windows, only the C<system PROGRAM LIST> syntax will
reliably avoid using the shell; C<system LIST>, even with more than one
element, will fall back to the shell if the first spawn fails.
d8187 1
a8187 1
L<perlop/"Quote-Like Operators">.
d8636 1
a8636 1
on two hashes may result in a different order for each hash.  Any insertion
d8639 1
a8639 1
without changing the order.  So long as a given hash is unmodified you may
d8641 2
a8642 2
as each other.  See L<perlsec/"Algorithmic Complexity Attacks"> for
details on why hash order is randomized.  Aside from the guarantees
d8644 1
a8644 3
traversal order are subject to change in any release of Perl.  Tied hashes
may behave differently to Perl's hashes with respect to changes in order on
insertion and deletion of items.
d9048 1
a9048 2
writing a form feed and a special top-of-page
format is used to format the new
d9050 1
a9050 2
format is the name of the filehandle with "_TOP" appended, or "top"
in the current package if the former does not exist.  This would be a
d9069 1
a9069 1
L<perlop/"Quote-Like Operators">.
d9129 2
a9172 2
=item if

d9192 1
a9192 1
documented in L<perlsyn/"Switch Statements">.
@


1.1.1.17
log
@Import perl-5.20.2
@
text
@d461 1
a461 1
anything that isn't a printable nor space in the current locale.)  If
d747 1
a747 2
perl sub will appear instead of the XS
sub in caller's return values.  In list
d765 1
a765 1
function containing the caller).  Note that $subroutine may be C<(eval)> if
d1383 1
a1383 1
still tests true for exists(), or to 0 if none do.  In other words, an
d1386 2
a1387 3
B<WARNING:> Calling C<delete> on array values is strongly discouraged.  The
notion of deleting or checking the existence of Perl array elements is not
conceptually coherent, and can lead to surprising behavior.
d2064 3
a2066 5
obvious and is strongly tied to the use of L</delete> on arrays.

B<WARNING:> Calling C<exists> on array values is strongly discouraged.  The
notion of deleting or checking the existence of Perl array elements is not
conceptually coherent, and can lead to surprising behavior.
d3361 1
a3361 1
Starting in v5.20, Perl uses full Unicode rules if the locale is
d3676 1
a3676 1
such as using a unary C<+> or semicolon to give Perl some help:
d3680 2
a3681 3
    %hash = map {; "\L$_" => 1  } @@array # this also works
    %hash = map { ("\L$_" => 1) } @@array # as does this
    %hash = map {  lc($_) => 1  } @@array # and this.
d4365 1
a4365 2
the lexical scope of the C<our> declaration. This applies immediately--even
within the same statement.
a4390 10
Because the variable becomes legal immediately under C<use strict 'vars'>, so
long as there is no variable with that name is already in scope, you can then
reference the package variable again even within the same statement.

    package Foo;
    use strict;

    my  $foo = $foo; # error, undeclared $foo on right-hand side
    our $foo = $foo; # no errors

d7648 1
a7648 2
See also L<feature>. Alternately, include a C<use v5.10> or later to the
current scope.
d8605 1
a8605 1
C<use VERSION> also lexically enables all features available in the requested
d8612 2
a8613 6
before it.  Later use of C<use VERSION>
will override all behavior of a previous
C<use VERSION>, possibly removing the C<strict> and C<feature> added by
C<use VERSION>.  C<use VERSION> does not
load the F<feature.pm> or F<strict.pm>
files.
d9048 2
a9049 2
If you use C<wait> in your handler for $SIG{CHLD}, it may accidentally wait
for the child created by qx() or system().  See L<perlipc> for details.
d9283 2
a9299 9

=item elseif

The "else if" keyword is spelled C<elsif> in Perl.  There's no C<elif>
or C<else if> either.  It does parse C<elseif>, but only to warn you
about not using it.

See the documentation for flow-control keywords in L<perlsyn/"Compound
Statements">.
@


1.1.1.18
log
@Import perl-5.24.2
@
text
@d17 1
a17 1
contexts for its arguments.  If it does both, scalar arguments
d19 3
a21 4
be one such list argument.  For instance,
L<C<splice>|/splice ARRAY,OFFSET,LENGTH,LIST> has three scalar arguments
followed by a list, whereas L<C<gethostbyname>|/gethostbyname NAME> has
four scalar arguments.
d33 1
a33 1
parentheses.)  If you use parentheses, the simple but occasionally
d46 2
a47 2
If you run Perl with the L<C<use warnings>|warnings> pragma, it can warn
you about this.  For example, the third line above produces:
d53 3
a55 3
unary nor list operators.  These include such functions as
L<C<time>|/time> and L<C<endpwent>|/endpwent>.  For example,
C<time+86_400> always means C<time() + 86_400>.
d78 1
a78 1
there, not the list concatenation version of the comma.  That means it
d81 7
a87 10
In general, functions in Perl that serve as wrappers for system calls
("syscalls") of the same name (like L<chown(2)>, L<fork(2)>,
L<closedir(2)>, etc.) return true when they succeed and
L<C<undef>|/undef EXPR> otherwise, as is usually mentioned in the
descriptions below.  This is different from the C interfaces, which
return C<-1> on failure.  Exceptions to this rule include
L<C<wait>|/wait>, L<C<waitpid>|/waitpid PID,FLAGS>, and
L<C<syscall>|/syscall NUMBER, LIST>.  System calls also set the special
L<C<$!>|perlvar/$!> variable on failure.  Other functions do not, except
accidentally.
d112 6
a117 20
L<C<chomp>|/chomp VARIABLE>, L<C<chop>|/chop VARIABLE>,
L<C<chr>|/chr NUMBER>, L<C<crypt>|/crypt PLAINTEXT,SALT>,
L<C<fc>|/fc EXPR>, L<C<hex>|/hex EXPR>,
L<C<index>|/index STR,SUBSTR,POSITION>, L<C<lc>|/lc EXPR>,
L<C<lcfirst>|/lcfirst EXPR>, L<C<length>|/length EXPR>,
L<C<oct>|/oct EXPR>, L<C<ord>|/ord EXPR>,
L<C<pack>|/pack TEMPLATE,LIST>,
L<C<qE<sol>E<sol>>|/qE<sol>STRINGE<sol>>,
L<C<qqE<sol>E<sol>>|/qqE<sol>STRINGE<sol>>, L<C<reverse>|/reverse LIST>,
L<C<rindex>|/rindex STR,SUBSTR,POSITION>,
L<C<sprintf>|/sprintf FORMAT, LIST>,
L<C<substr>|/substr EXPR,OFFSET,LENGTH,REPLACEMENT>,
L<C<trE<sol>E<sol>E<sol>>|/trE<sol>E<sol>E<sol>>, L<C<uc>|/uc EXPR>,
L<C<ucfirst>|/ucfirst EXPR>,
L<C<yE<sol>E<sol>E<sol>>|/yE<sol>E<sol>E<sol>>

L<C<fc>|/fc EXPR> is available only if the
L<C<"fc"> feature|feature/The 'fc' feature> is enabled or if it is
prefixed with C<CORE::>.  The
L<C<"fc"> feature|feature/The 'fc' feature> is enabled automatically
d120 1
d126 1
a126 6
L<C<mE<sol>E<sol>>|/mE<sol>E<sol>>, L<C<pos>|/pos SCALAR>,
L<C<qrE<sol>E<sol>>|/qrE<sol>STRINGE<sol>>,
L<C<quotemeta>|/quotemeta EXPR>,
L<C<sE<sol>E<sol>E<sol>>|/sE<sol>E<sol>E<sol>>,
L<C<split>|/split E<sol>PATTERNE<sol>,EXPR,LIMIT>,
L<C<study>|/study SCALAR>
d133 2
a134 4
L<C<abs>|/abs VALUE>, L<C<atan2>|/atan2 Y,X>, L<C<cos>|/cos EXPR>,
L<C<exp>|/exp EXPR>, L<C<hex>|/hex EXPR>, L<C<int>|/int EXPR>,
L<C<log>|/log EXPR>, L<C<oct>|/oct EXPR>, L<C<rand>|/rand EXPR>,
L<C<sin>|/sin EXPR>, L<C<sqrt>|/sqrt EXPR>, L<C<srand>|/srand EXPR>
d141 1
a141 4
L<C<each>|/each HASH>, L<C<keys>|/keys HASH>, L<C<pop>|/pop ARRAY>,
L<C<push>|/push ARRAY,LIST>, L<C<shift>|/shift ARRAY>,
L<C<splice>|/splice ARRAY,OFFSET,LENGTH,LIST>,
L<C<unshift>|/unshift ARRAY,LIST>, L<C<values>|/values HASH>
d148 1
a148 4
L<C<grep>|/grep BLOCK LIST>, L<C<join>|/join EXPR,LIST>,
L<C<map>|/map BLOCK LIST>, L<C<qwE<sol>E<sol>>|/qwE<sol>STRINGE<sol>>,
L<C<reverse>|/reverse LIST>, L<C<sort>|/sort SUBNAME LIST>,
L<C<unpack>|/unpack TEMPLATE,EXPR>
d155 1
a155 3
L<C<delete>|/delete EXPR>, L<C<each>|/each HASH>,
L<C<exists>|/exists EXPR>, L<C<keys>|/keys HASH>,
L<C<values>|/values HASH>
d162 8
a169 25
L<C<binmode>|/binmode FILEHANDLE, LAYER>, L<C<close>|/close FILEHANDLE>,
L<C<closedir>|/closedir DIRHANDLE>, L<C<dbmclose>|/dbmclose HASH>,
L<C<dbmopen>|/dbmopen HASH,DBNAME,MASK>, L<C<die>|/die LIST>,
L<C<eof>|/eof FILEHANDLE>, L<C<fileno>|/fileno FILEHANDLE>,
L<C<flock>|/flock FILEHANDLE,OPERATION>, L<C<format>|/format>,
L<C<getc>|/getc FILEHANDLE>, L<C<print>|/print FILEHANDLE LIST>,
L<C<printf>|/printf FILEHANDLE FORMAT, LIST>,
L<C<read>|/read FILEHANDLE,SCALAR,LENGTH,OFFSET>,
L<C<readdir>|/readdir DIRHANDLE>, L<C<readline>|/readline EXPR>
L<C<rewinddir>|/rewinddir DIRHANDLE>, L<C<say>|/say FILEHANDLE LIST>,
L<C<seek>|/seek FILEHANDLE,POSITION,WHENCE>,
L<C<seekdir>|/seekdir DIRHANDLE,POS>,
L<C<select>|/select RBITS,WBITS,EBITS,TIMEOUT>,
L<C<syscall>|/syscall NUMBER, LIST>,
L<C<sysread>|/sysread FILEHANDLE,SCALAR,LENGTH,OFFSET>,
L<C<sysseek>|/sysseek FILEHANDLE,POSITION,WHENCE>,
L<C<syswrite>|/syswrite FILEHANDLE,SCALAR,LENGTH,OFFSET>,
L<C<tell>|/tell FILEHANDLE>, L<C<telldir>|/telldir DIRHANDLE>,
L<C<truncate>|/truncate FILEHANDLE,LENGTH>, L<C<warn>|/warn LIST>,
L<C<write>|/write FILEHANDLE>

L<C<say>|/say FILEHANDLE LIST> is available only if the
L<C<"say"> feature|feature/The 'say' feature> is enabled or if it is
prefixed with C<CORE::>.  The
L<C<"say"> feature|feature/The 'say' feature> is enabled automatically
d176 2
a177 7
L<C<pack>|/pack TEMPLATE,LIST>,
L<C<read>|/read FILEHANDLE,SCALAR,LENGTH,OFFSET>,
L<C<syscall>|/syscall NUMBER, LIST>,
L<C<sysread>|/sysread FILEHANDLE,SCALAR,LENGTH,OFFSET>,
L<C<sysseek>|/sysseek FILEHANDLE,POSITION,WHENCE>,
L<C<syswrite>|/syswrite FILEHANDLE,SCALAR,LENGTH,OFFSET>,
L<C<unpack>|/unpack TEMPLATE,EXPR>, L<C<vec>|/vec EXPR,OFFSET,BITS>
d184 4
a187 14
L<C<-I<X>>|/-X FILEHANDLE>, L<C<chdir>|/chdir EXPR>,
L<C<chmod>|/chmod LIST>, L<C<chown>|/chown LIST>,
L<C<chroot>|/chroot FILENAME>,
L<C<fcntl>|/fcntl FILEHANDLE,FUNCTION,SCALAR>, L<C<glob>|/glob EXPR>,
L<C<ioctl>|/ioctl FILEHANDLE,FUNCTION,SCALAR>,
L<C<link>|/link OLDFILE,NEWFILE>, L<C<lstat>|/lstat FILEHANDLE>,
L<C<mkdir>|/mkdir FILENAME,MASK>, L<C<open>|/open FILEHANDLE,EXPR>,
L<C<opendir>|/opendir DIRHANDLE,EXPR>, L<C<readlink>|/readlink EXPR>,
L<C<rename>|/rename OLDNAME,NEWNAME>, L<C<rmdir>|/rmdir FILENAME>,
L<C<select>|/select FILEHANDLE>, L<C<stat>|/stat FILEHANDLE>,
L<C<symlink>|/symlink OLDFILE,NEWFILE>,
L<C<sysopen>|/sysopen FILEHANDLE,FILENAME,MODE>,
L<C<umask>|/umask EXPR>, L<C<unlink>|/unlink LIST>,
L<C<utime>|/utime LIST>
d194 9
a202 17
L<C<break>|/break>, L<C<caller>|/caller EXPR>,
L<C<continue>|/continue BLOCK>, L<C<die>|/die LIST>, L<C<do>|/do BLOCK>,
L<C<dump>|/dump LABEL>, L<C<eval>|/eval EXPR>,
L<C<evalbytes>|/evalbytes EXPR> L<C<exit>|/exit EXPR>,
L<C<__FILE__>|/__FILE__>, L<C<goto>|/goto LABEL>,
L<C<last>|/last LABEL>, L<C<__LINE__>|/__LINE__>,
L<C<next>|/next LABEL>, L<C<__PACKAGE__>|/__PACKAGE__>,
L<C<redo>|/redo LABEL>, L<C<return>|/return EXPR>,
L<C<sub>|/sub NAME BLOCK>, L<C<__SUB__>|/__SUB__>,
L<C<wantarray>|/wantarray>

L<C<break>|/break> is available only if you enable the experimental
L<C<"switch"> feature|feature/The 'switch' feature> or use the C<CORE::>
prefix.  The L<C<"switch"> feature|feature/The 'switch' feature> also
enables the C<default>, C<given> and C<when> statements, which are
documented in L<perlsyn/"Switch Statements">.
The L<C<"switch"> feature|feature/The 'switch' feature> is enabled
d204 8
a211 14
scope.  In Perl v5.14 and earlier, L<C<continue>|/continue BLOCK>
required the L<C<"switch"> feature|feature/The 'switch' feature>, like
the other keywords.

L<C<evalbytes>|/evalbytes EXPR> is only available with the
L<C<"evalbytes"> feature|feature/The 'unicode_eval' and 'evalbytes' features>
(see L<feature>) or if prefixed with C<CORE::>.  L<C<__SUB__>|/__SUB__>
is only available with the
L<C<"current_sub"> feature|feature/The 'current_sub' feature> or if
prefixed with C<CORE::>.  Both the
L<C<"evalbytes">|feature/The 'unicode_eval' and 'evalbytes' features>
and L<C<"current_sub">|feature/The 'current_sub' feature> features are
enabled automatically with a C<use v5.16> (or higher) declaration in the
current scope.
d217 5
a221 11
L<C<caller>|/caller EXPR>, L<C<import>|/import LIST>,
L<C<local>|/local EXPR>, L<C<my>|/my VARLIST>, L<C<our>|/our VARLIST>,
L<C<package>|/package NAMESPACE>, L<C<state>|/state VARLIST>,
L<C<use>|/use Module VERSION LIST>

L<C<state>|/state VARLIST> is available only if the
L<C<"state"> feature|feature/The 'state' feature> is enabled or if it is
prefixed with C<CORE::>.  The
L<C<"state"> feature|feature/The 'state' feature> is enabled
automatically with a C<use v5.10> (or higher) declaration in the current
scope.
d227 1
a227 4
L<C<defined>|/defined EXPR>, L<C<formline>|/formline PICTURE,LIST>,
L<C<lock>|/lock THING>, L<C<prototype>|/prototype FUNCTION>,
L<C<reset>|/reset EXPR>, L<C<scalar>|/scalar EXPR>,
L<C<undef>|/undef EXPR>
d234 4
a237 9
L<C<alarm>|/alarm SECONDS>, L<C<exec>|/exec LIST>, L<C<fork>|/fork>,
L<C<getpgrp>|/getpgrp PID>, L<C<getppid>|/getppid>,
L<C<getpriority>|/getpriority WHICH,WHO>, L<C<kill>|/kill SIGNAL, LIST>,
L<C<pipe>|/pipe READHANDLE,WRITEHANDLE>,
L<C<qxE<sol>E<sol>>|/qxE<sol>STRINGE<sol>>,
L<C<readpipe>|/readpipe EXPR>, L<C<setpgrp>|/setpgrp PID,PGRP>,
L<C<setpriority>|/setpriority WHICH,WHO,PRIORITY>,
L<C<sleep>|/sleep EXPR>, L<C<system>|/system LIST>, L<C<times>|/times>,
L<C<wait>|/wait>, L<C<waitpid>|/waitpid PID,FLAGS>
d244 1
a244 3
L<C<do>|/do EXPR>, L<C<import>|/import LIST>,
L<C<no>|/no MODULE VERSION LIST>, L<C<package>|/package NAMESPACE>,
L<C<require>|/require VERSION>, L<C<use>|/use Module VERSION LIST>
d251 2
a252 5
L<C<bless>|/bless REF,CLASSNAME>, L<C<dbmclose>|/dbmclose HASH>,
L<C<dbmopen>|/dbmopen HASH,DBNAME,MASK>,
L<C<package>|/package NAMESPACE>, L<C<ref>|/ref EXPR>,
L<C<tie>|/tie VARIABLE,CLASSNAME,LIST>, L<C<tied>|/tied VARIABLE>,
L<C<untie>|/untie VARIABLE>, L<C<use>|/use Module VERSION LIST>
d259 3
a261 12
L<C<accept>|/accept NEWSOCKET,GENERICSOCKET>,
L<C<bind>|/bind SOCKET,NAME>, L<C<connect>|/connect SOCKET,NAME>,
L<C<getpeername>|/getpeername SOCKET>,
L<C<getsockname>|/getsockname SOCKET>,
L<C<getsockopt>|/getsockopt SOCKET,LEVEL,OPTNAME>,
L<C<listen>|/listen SOCKET,QUEUESIZE>,
L<C<recv>|/recv SOCKET,SCALAR,LENGTH,FLAGS>,
L<C<send>|/send SOCKET,MSG,FLAGS,TO>,
L<C<setsockopt>|/setsockopt SOCKET,LEVEL,OPTNAME,OPTVAL>,
L<C<shutdown>|/shutdown SOCKET,HOW>,
L<C<socket>|/socket SOCKET,DOMAIN,TYPE,PROTOCOL>,
L<C<socketpair>|/socketpair SOCKET1,SOCKET2,DOMAIN,TYPE,PROTOCOL>
d268 2
a269 8
L<C<msgctl>|/msgctl ID,CMD,ARG>, L<C<msgget>|/msgget KEY,FLAGS>,
L<C<msgrcv>|/msgrcv ID,VAR,SIZE,TYPE,FLAGS>,
L<C<msgsnd>|/msgsnd ID,MSG,FLAGS>,
L<C<semctl>|/semctl ID,SEMNUM,CMD,ARG>,
L<C<semget>|/semget KEY,NSEMS,FLAGS>, L<C<semop>|/semop KEY,OPSTRING>,
L<C<shmctl>|/shmctl ID,CMD,ARG>, L<C<shmget>|/shmget KEY,SIZE,FLAGS>,
L<C<shmread>|/shmread ID,VAR,POS,SIZE>,
L<C<shmwrite>|/shmwrite ID,STRING,POS,SIZE>
d276 3
a278 7
L<C<endgrent>|/endgrent>, L<C<endhostent>|/endhostent>,
L<C<endnetent>|/endnetent>, L<C<endpwent>|/endpwent>,
L<C<getgrent>|/getgrent>, L<C<getgrgid>|/getgrgid GID>,
L<C<getgrnam>|/getgrnam NAME>, L<C<getlogin>|/getlogin>,
L<C<getpwent>|/getpwent>, L<C<getpwnam>|/getpwnam NAME>,
L<C<getpwuid>|/getpwuid UID>, L<C<setgrent>|/setgrent>,
L<C<setpwent>|/setpwent>
d285 5
a289 14
L<C<endprotoent>|/endprotoent>, L<C<endservent>|/endservent>,
L<C<gethostbyaddr>|/gethostbyaddr ADDR,ADDRTYPE>,
L<C<gethostbyname>|/gethostbyname NAME>, L<C<gethostent>|/gethostent>,
L<C<getnetbyaddr>|/getnetbyaddr ADDR,ADDRTYPE>,
L<C<getnetbyname>|/getnetbyname NAME>, L<C<getnetent>|/getnetent>,
L<C<getprotobyname>|/getprotobyname NAME>,
L<C<getprotobynumber>|/getprotobynumber NUMBER>,
L<C<getprotoent>|/getprotoent>,
L<C<getservbyname>|/getservbyname NAME,PROTO>,
L<C<getservbyport>|/getservbyport PORT,PROTO>,
L<C<getservent>|/getservent>, L<C<sethostent>|/sethostent STAYOPEN>,
L<C<setnetent>|/setnetent STAYOPEN>,
L<C<setprotoent>|/setprotoent STAYOPEN>,
L<C<setservent>|/setservent STAYOPEN>
d296 1
a296 2
L<C<gmtime>|/gmtime EXPR>, L<C<localtime>|/localtime EXPR>,
L<C<time>|/time>, L<C<times>|/times>
d319 17
a335 52
L<C<-I<X>>|/-X FILEHANDLE>, L<C<binmode>|/binmode FILEHANDLE, LAYER>,
L<C<chmod>|/chmod LIST>, L<C<chown>|/chown LIST>,
L<C<chroot>|/chroot FILENAME>, L<C<crypt>|/crypt PLAINTEXT,SALT>,
L<C<dbmclose>|/dbmclose HASH>, L<C<dbmopen>|/dbmopen HASH,DBNAME,MASK>,
L<C<dump>|/dump LABEL>, L<C<endgrent>|/endgrent>,
L<C<endhostent>|/endhostent>, L<C<endnetent>|/endnetent>,
L<C<endprotoent>|/endprotoent>, L<C<endpwent>|/endpwent>,
L<C<endservent>|/endservent>, L<C<exec>|/exec LIST>,
L<C<fcntl>|/fcntl FILEHANDLE,FUNCTION,SCALAR>,
L<C<flock>|/flock FILEHANDLE,OPERATION>, L<C<fork>|/fork>,
L<C<getgrent>|/getgrent>, L<C<getgrgid>|/getgrgid GID>,
L<C<gethostbyname>|/gethostbyname NAME>, L<C<gethostent>|/gethostent>,
L<C<getlogin>|/getlogin>,
L<C<getnetbyaddr>|/getnetbyaddr ADDR,ADDRTYPE>,
L<C<getnetbyname>|/getnetbyname NAME>, L<C<getnetent>|/getnetent>,
L<C<getppid>|/getppid>, L<C<getpgrp>|/getpgrp PID>,
L<C<getpriority>|/getpriority WHICH,WHO>,
L<C<getprotobynumber>|/getprotobynumber NUMBER>,
L<C<getprotoent>|/getprotoent>, L<C<getpwent>|/getpwent>,
L<C<getpwnam>|/getpwnam NAME>, L<C<getpwuid>|/getpwuid UID>,
L<C<getservbyport>|/getservbyport PORT,PROTO>,
L<C<getservent>|/getservent>,
L<C<getsockopt>|/getsockopt SOCKET,LEVEL,OPTNAME>,
L<C<glob>|/glob EXPR>, L<C<ioctl>|/ioctl FILEHANDLE,FUNCTION,SCALAR>,
L<C<kill>|/kill SIGNAL, LIST>, L<C<link>|/link OLDFILE,NEWFILE>,
L<C<lstat>|/lstat FILEHANDLE>, L<C<msgctl>|/msgctl ID,CMD,ARG>,
L<C<msgget>|/msgget KEY,FLAGS>,
L<C<msgrcv>|/msgrcv ID,VAR,SIZE,TYPE,FLAGS>,
L<C<msgsnd>|/msgsnd ID,MSG,FLAGS>, L<C<open>|/open FILEHANDLE,EXPR>,
L<C<pipe>|/pipe READHANDLE,WRITEHANDLE>, L<C<readlink>|/readlink EXPR>,
L<C<rename>|/rename OLDNAME,NEWNAME>,
L<C<select>|/select RBITS,WBITS,EBITS,TIMEOUT>,
L<C<semctl>|/semctl ID,SEMNUM,CMD,ARG>,
L<C<semget>|/semget KEY,NSEMS,FLAGS>, L<C<semop>|/semop KEY,OPSTRING>,
L<C<setgrent>|/setgrent>, L<C<sethostent>|/sethostent STAYOPEN>,
L<C<setnetent>|/setnetent STAYOPEN>, L<C<setpgrp>|/setpgrp PID,PGRP>,
L<C<setpriority>|/setpriority WHICH,WHO,PRIORITY>,
L<C<setprotoent>|/setprotoent STAYOPEN>, L<C<setpwent>|/setpwent>,
L<C<setservent>|/setservent STAYOPEN>,
L<C<setsockopt>|/setsockopt SOCKET,LEVEL,OPTNAME,OPTVAL>,
L<C<shmctl>|/shmctl ID,CMD,ARG>, L<C<shmget>|/shmget KEY,SIZE,FLAGS>,
L<C<shmread>|/shmread ID,VAR,POS,SIZE>,
L<C<shmwrite>|/shmwrite ID,STRING,POS,SIZE>,
L<C<socket>|/socket SOCKET,DOMAIN,TYPE,PROTOCOL>,
L<C<socketpair>|/socketpair SOCKET1,SOCKET2,DOMAIN,TYPE,PROTOCOL>,
L<C<stat>|/stat FILEHANDLE>, L<C<symlink>|/symlink OLDFILE,NEWFILE>,
L<C<syscall>|/syscall NUMBER, LIST>,
L<C<sysopen>|/sysopen FILEHANDLE,FILENAME,MODE>,
L<C<system>|/system LIST>, L<C<times>|/times>,
L<C<truncate>|/truncate FILEHANDLE,LENGTH>, L<C<umask>|/umask EXPR>,
L<C<unlink>|/unlink LIST>, L<C<utime>|/utime LIST>, L<C<wait>|/wait>,
L<C<waitpid>|/waitpid PID,FLAGS>
d342 1
a342 1
=over
d357 1
a357 1
operator takes one argument, either a filename, a filehandle, or a dirhandle,
d359 5
a363 6
argument is omitted, tests L<C<$_>|perlvar/$_>, except for C<-t>, which
tests STDIN.  Unless otherwise documented, it returns C<1> for true and
C<''> for false.  If the file doesn't exist or can't be examined, it
returns L<C<undef>|/undef EXPR> and sets L<C<$!>|perlvar/$!> (errno).
Despite the funny names, precedence is the same as any other named unary
operator.  The operator may be any of:
d436 8
a443 10
may thus need to do a L<C<stat>|/stat FILEHANDLE> to determine the
actual mode of the file, or temporarily set their effective uid to
something else.

If you are using ACLs, there is a pragma called L<C<filetest>|filetest>
that may produce more accurate results than the bare
L<C<stat>|/stat FILEHANDLE> mode bits.
When under C<use filetest 'access'>, the above-mentioned filetests
test whether the permission can(not) be granted using the L<access(2)>
family of system calls.  Also note that the C<-x> and C<-X> tests may
d449 2
a450 2
in effect.  Read the documentation for the L<C<filetest>|filetest>
pragma for more information.
d452 1
a452 1
The C<-T> and C<-B> tests work as follows.  The first block or so of
d454 1
a454 1
characters.  If so, it's a C<-T> file.  Otherwise, that same portion of
d469 7
a475 9
If any of the file tests (or either the L<C<stat>|/stat FILEHANDLE> or
L<C<lstat>|/lstat FILEHANDLE> operator) is given the special filehandle
consisting of a solitary underline, then the stat structure of the
previous file test (or L<C<stat>|/stat FILEHANDLE> operator) is used,
saving a system call.  (This doesn't work with C<-t>, and you need to
remember that L<C<lstat>|/lstat FILEHANDLE> and C<-l> leave values in
the stat structure for the symbolic link, not the real file.)  (Also, if
the stat buffer was filled by an L<C<lstat>|/lstat FILEHANDLE> call,
C<-T> and C<-B> will reset it with the results of C<stat _>).
d511 1
a511 1
If VALUE is omitted, uses L<C<$_>|perlvar/$_>.
d518 1
a518 1
Accepts an incoming socket connect, just as L<accept(2)>
d524 1
a524 1
value of L<C<$^F>|perlvar/$^F>.  See L<perlvar/$^F>.
d537 4
a540 4
specified, the value stored in L<C<$_>|perlvar/$_> is used.  (On some
machines, unfortunately, the elapsed time may be up to one second less
or more than you specified because of how seconds are counted, and
process scheduling may delay the delivery of the signal even further.)
d547 1
a547 1
For delays of finer granularity than one second, the L<Time::HiRes> module
d549 13
a561 19
distribution) provides
L<C<ualarm>|Time::HiRes/ualarm ( $useconds [, $interval_useconds ] )>.
You may also use Perl's four-argument version of
L<C<select>|/select RBITS,WBITS,EBITS,TIMEOUT> leaving the first three
arguments undefined, or you might be able to use the
L<C<syscall>|/syscall NUMBER, LIST> interface to access L<setitimer(2)>
if your system supports it.  See L<perlfaq8> for details.

It is usually a mistake to intermix L<C<alarm>|/alarm SECONDS> and
L<C<sleep>|/sleep EXPR> calls, because L<C<sleep>|/sleep EXPR> may be
internally implemented on your system with L<C<alarm>|/alarm SECONDS>.

If you want to use L<C<alarm>|/alarm SECONDS> to time out a system call
you need to use an L<C<eval>|/eval EXPR>/L<C<die>|/die LIST> pair.  You
can't rely on the alarm causing the system call to fail with
L<C<$!>|perlvar/$!> set to C<EINTR> because Perl sets up signal handlers
to restart system calls on some systems.  Using
L<C<eval>|/eval EXPR>/L<C<die>|/die LIST> always works, modulo the
caveats given in L<perlipc/"Signals">.
d566 1
a566 1
        my $nread = sysread $socket, $buffer, $size;
d588 2
a589 3
For the tangent operation, you may use the
L<C<Math::Trig::tan>|Math::Trig/B<tan>> function, or use the familiar
relation:
d594 1
a594 1
your L<atan2(3)> manpage for more information.
d603 1
a603 1
Binds a network address to a socket, just as L<bind(2)>
d619 7
a625 2
otherwise it returns L<C<undef>|/undef EXPR> and sets
L<C<$!>|perlvar/$!> (errno).
d627 2
a628 10
On some systems (in general, DOS- and Windows-based systems)
L<C<binmode>|/binmode FILEHANDLE, LAYER> is necessary when you're not
working with a text file.  For the sake of portability it is a good idea
always to use it when appropriate, and never to use it when it isn't
appropriate.  Also, people can set their I/O to be by default
UTF8-encoded Unicode, not bytes.

In other words: regardless of platform, use
L<C<binmode>|/binmode FILEHANDLE, LAYER> on binary data, like images,
for example.
d644 2
a645 2
form C<:...>, are called I/O I<layers>.  The L<open> pragma can be used to
establish default I/O layers.
d647 6
a652 7
I<The LAYER parameter of the L<C<binmode>|/binmode FILEHANDLE, LAYER>
function is described as "DISCIPLINE" in "Programming Perl, 3rd
Edition".  However, since the publishing of this book, by many known as
"Camel III", the consensus of the naming of this functionality has moved
from "discipline" to "layer".  All documentation of this version of Perl
therefore refers to "layers" rather than to "disciplines".  Now back to
the regularly scheduled documentation...>
d659 5
a663 6
In general, L<C<binmode>|/binmode FILEHANDLE, LAYER> should be called
after L<C<open>|/open FILEHANDLE,EXPR> but before any I/O is done on the
filehandle.  Calling L<C<binmode>|/binmode FILEHANDLE, LAYER> normally
flushes any pending buffered output data (and perhaps pending input
data) on the handle.  An exception to this is the C<:encoding> layer
that changes the default character encoding of the handle.
d665 1
a665 1
mid-stream, and it doesn't flush the stream.  C<:encoding>
d683 16
a698 23
two characters C<\cM\cJ>.  That means that if you don't use
L<C<binmode>|/binmode FILEHANDLE, LAYER> on these systems, C<\cM\cJ>
sequences on disk will be converted to C<\n> on input, and any C<\n> in
your program will be converted back to C<\cM\cJ> on output.  This is
what you want for text files, but it can be disastrous for binary files.

Another consequence of using L<C<binmode>|/binmode FILEHANDLE, LAYER>
(on some systems) is that special end-of-file markers will be seen as
part of the data stream.  For systems from the Microsoft family this
means that, if your binary data contain C<\cZ>, the I/O subsystem will
regard it as the end of the file, unless you use
L<C<binmode>|/binmode FILEHANDLE, LAYER>.

L<C<binmode>|/binmode FILEHANDLE, LAYER> is important not only for
L<C<readline>|/readline EXPR> and L<C<print>|/print FILEHANDLE LIST>
operations, but also when using
L<C<read>|/read FILEHANDLE,SCALAR,LENGTH,OFFSET>,
L<C<seek>|/seek FILEHANDLE,POSITION,WHENCE>,
L<C<sysread>|/sysread FILEHANDLE,SCALAR,LENGTH,OFFSET>,
L<C<syswrite>|/syswrite FILEHANDLE,SCALAR,LENGTH,OFFSET> and
L<C<tell>|/tell FILEHANDLE> (see L<perlport> for more details).  See the
L<C<$E<sol>>|perlvar/$E<sol>> and L<C<$\>|perlvar/$\> variables in
L<perlvar> for how to manually set your input and output
d712 4
a715 5
is used.  Because a L<C<bless>|/bless REF,CLASSNAME> is often the last
thing in a constructor, it returns the reference for convenience.
Always use the two-argument version if a derived class might inherit the
method doing the blessing.  See L<perlobj> for more about the blessing
(and blessings) of objects.
d719 1
a719 1
Perl pragmas.  Builtin types have all uppercase names.  To prevent
d729 1
a729 1
Break out of a C<given> block.
d731 4
a734 6
L<C<break>|/break> is available only if the
L<C<"switch"> feature|feature/The 'switch' feature> is enabled or if it
is prefixed with C<CORE::>. The
L<C<"switch"> feature|feature/The 'switch' feature> is enabled
automatically with a C<use v5.10> (or higher) declaration in the current
scope.
d745 5
a749 5
we're in a subroutine or L<C<eval>|/eval EXPR> or
L<C<require>|/require VERSION>) and the undefined value otherwise.
caller never returns XS subs and they are skipped.  The next pure perl
sub will appear instead of the XS sub in caller's return values.  In
list context, caller returns
d751 2
a752 2
       # 0         1          2
    my ($package, $filename, $line) = caller;
d759 1
a759 1
 my ($package, $filename, $line, $subroutine, $hasargs,
d763 1
a763 1
  = caller($i);
d767 10
a776 12
the frame is not a subroutine call, but an L<C<eval>|/eval EXPR>.  In
such a case additional elements $evaltext and C<$is_require> are set:
C<$is_require> is true if the frame is created by a
L<C<require>|/require VERSION> or L<C<use>|/use Module VERSION LIST>
statement, $evaltext contains the text of the C<eval EXPR> statement.
In particular, for an C<eval BLOCK> statement, $subroutine is C<(eval)>,
but $evaltext is undefined.  (Note also that each
L<C<use>|/use Module VERSION LIST> statement creates a
L<C<require>|/require VERSION> frame inside an C<eval EXPR> frame.)
$subroutine may also be C<(unknown)> if this particular subroutine
happens to have been deleted from the symbol table.  C<$hasargs> is true
if a new instance of L<C<@@_>|perlvar/@@_> was set up for the frame.
d778 8
a785 11
compiled with.  C<$hints> corresponds to L<C<$^H>|perlvar/$^H>, and
C<$bitmask> corresponds to
L<C<${^WARNING_BITS}>|perlvar/${^WARNING_BITS}>.  The C<$hints> and
C<$bitmask> values are subject to change between versions of Perl, and
are not meant for external use.

C<$hinthash> is a reference to a hash containing the value of
L<C<%^H>|perlvar/%^H> when the caller was compiled, or
L<C<undef>|/undef EXPR> if L<C<%^H>|perlvar/%^H> was empty.  Do not
modify the values of this hash, as they are the actual values stored in
the optree.
d793 4
a796 5
L<C<caller>|/caller EXPR> had a chance to get the information.  That
means that C<caller(N)> might not return information about the call
frame you expect it to, for C<< N > 1 >>.  In particular, C<@@DB::args>
might have information from the previous time L<C<caller>|/caller EXPR>
was called.
d800 11
a810 13
particular, as L<C<@@_>|perlvar/@@_> contains aliases to the caller's
arguments, Perl does not take a copy of L<C<@@_>|perlvar/@@_>, so
C<@@DB::args> will contain modifications the subroutine makes to
L<C<@@_>|perlvar/@@_> or its contents, not the original values at call
time.  C<@@DB::args>, like L<C<@@_>|perlvar/@@_>, does not hold explicit
references to its elements, so under certain cases its elements may have
become freed and reallocated for other variables or temporary values.
Finally, a side effect of the current implementation is that the effects
of C<shift @@_> can I<normally> be undone (but not C<pop @@_> or other
splicing, I<and> not if a reference to L<C<@@_>|perlvar/@@_> has been
taken, I<and> subject to the caveat about reallocated elements), so
C<@@DB::args> is actually a hybrid of the current state and initial state
of L<C<@@_>|perlvar/@@_>.  Buyer beware.
d828 3
a830 4
variable C<$ENV{'SYS$LOGIN'}> is also checked, and used if it is set.)  If
neither is set, L<C<chdir>|/chdir EXPR> does nothing and fails.  It
returns true on success, false otherwise.  See the example under
L<C<die>|/die LIST>.
d832 2
a833 2
On systems that support L<fchdir(2)>, you may pass a filehandle or
directory handle as the argument.  On systems that don't support L<fchdir(2)>,
d845 1
a845 2
successfully changed.  See also L<C<oct>|/oct EXPR> if all you have is a
string.
d847 1
a847 1
    my $cnt = chmod 0755, "foo", "bar";
d849 4
a852 4
    my $mode = "0644"; chmod $mode, "foo";      # !!! sets mode to
                                                # --w----r-T
    my $mode = "0644"; chmod oct($mode), "foo"; # this is better
    my $mode = 0644;   chmod $mode, "foo";      # this is best
d854 2
a855 2
On systems that support L<fchmod(2)>, you may pass filehandles among the
files.  On systems that don't support L<fchmod(2)>, passing filehandles raises
d863 2
a864 2
You can also import the symbolic C<S_I*> constants from the
L<C<Fcntl>|Fcntl> module:
d881 3
a883 4
This safer version of L<C<chop>|/chop VARIABLE> removes any trailing
string that corresponds to the current value of
L<C<$E<sol>>|perlvar/$E<sol>> (also known as C<$INPUT_RECORD_SEPARATOR>
in the L<C<English>|English> module).  It returns the total
d887 5
a891 5
mode (C<$/ = ''>), it removes all trailing newlines from the string.
When in slurp mode (C<$/ = undef>) or fixed-length record mode
(L<C<$E<sol>>|perlvar/$E<sol>> is a reference to an integer or the like;
see L<perlvar>), L<C<chomp>|/chomp VARIABLE> won't remove anything.
If VARIABLE is omitted, it chomps L<C<$_>|perlvar/$_>.  Example:
d895 1
a895 1
        my @@array = split(/:/);
d900 1
a900 1
resetting the L<C<each>|/each HASH> iterator in the process.
d904 2
a905 2
    chomp(my $cwd = `pwd`);
    chomp(my $answer = <STDIN>);
d928 1
a928 2
scans nor copies the string.  If VARIABLE is omitted, chops
L<C<$_>|perlvar/$_>.
d930 1
a930 1
resetting the L<C<each>|/each HASH> iterator in the process.
d935 1
a935 1
last L<C<chop>|/chop VARIABLE> is returned.
d937 2
a938 2
Note that L<C<chop>|/chop VARIABLE> returns the last character.  To
return all but the last character, use C<substr($string, 0, -1)>.
d940 1
a940 1
See also L<C<chomp>|/chomp VARIABLE>.
d953 1
a953 1
    my $cnt = chown $uid, $gid, 'foo', 'bar';
d956 2
a957 2
On systems that support L<fchown(2)>, you may pass filehandles among the
files.  On systems that don't support L<fchown(2)>, passing filehandles raises
d964 1
a964 1
    chomp(my $user = <STDIN>);
d966 1
a966 1
    chomp(my $pattern = <STDIN>);
d968 1
a968 1
    my ($login,$pass,$uid,$gid) = getpwnam($user)
d971 1
a971 1
    my @@ary = glob($pattern);  # expand filenames
d981 1
a981 1
    my $can_chown_giveaway = ! sysconf(_PC_CHOWN_RESTRICTED);
d994 1
a994 1
chr(0x263a) is a Unicode smiley face.
d1000 1
a1000 1
If NUMBER is omitted, uses L<C<$_>|perlvar/$_>.
d1002 1
a1002 1
For the reverse, use L<C<ord>|/ord EXPR>.
d1021 1
a1021 1
omitted, does a L<C<chroot>|/chroot FILENAME> to L<C<$_>|perlvar/$_>.
d1023 2
a1024 3
B<NOTE:>  It is good security practice to do C<chdir("/")>
(L<C<chdir>|/chdir EXPR> to the root directory) immediately after a
L<C<chroot>|/chroot FILENAME>.
d1042 15
a1056 21
another L<C<open>|/open FILEHANDLE,EXPR> on it, because
L<C<open>|/open FILEHANDLE,EXPR> closes it for you.  (See
L<C<open>|/open FILEHANDLE,EXPR>.) However, an explicit
L<C<close>|/close FILEHANDLE> on an input file resets the line counter
(L<C<$.>|perlvar/$.>), while the implicit close done by
L<C<open>|/open FILEHANDLE,EXPR> does not.

If the filehandle came from a piped open, L<C<close>|/close FILEHANDLE>
returns false if one of the other syscalls involved fails or if its
program exits with non-zero status.  If the only problem was that the
program exited non-zero, L<C<$!>|perlvar/$!> will be set to C<0>.
Closing a pipe also waits for the process executing on the pipe to
exit--in case you wish to look at the output of the pipe afterwards--and
implicitly puts the exit status value of that command into
L<C<$?>|perlvar/$?> and
L<C<${^CHILD_ERROR_NATIVE}>|perlvar/${^CHILD_ERROR_NATIVE}>.

If there are multiple threads running, L<C<close>|/close FILEHANDLE> on
a filehandle from a piped open returns true without waiting for the
child process to terminate, if the filehandle is still open in another
thread.
d1082 2
a1083 2
Closes a directory opened by L<C<opendir>|/opendir DIRHANDLE,EXPR> and
returns the success of that system call.
d1090 1
a1090 1
Attempts to connect to a remote socket, just like L<connect(2)>.
d1102 7
a1108 8
When followed by a BLOCK, L<C<continue>|/continue BLOCK> is actually a
flow control statement rather than a function.  If there is a
L<C<continue>|/continue BLOCK> BLOCK attached to a BLOCK (typically in a
C<while> or C<foreach>), it is always executed just before the
conditional is about to be evaluated again, just like the third part of
a C<for> loop in C.  Thus it can be used to increment a loop variable,
even when the loop has been continued via the L<C<next>|/next LABEL>
statement (which is similar to the C L<C<continue>|/continue BLOCK>
d1111 4
a1114 6
L<C<last>|/last LABEL>, L<C<next>|/next LABEL>, or
L<C<redo>|/redo LABEL> may appear within a
L<C<continue>|/continue BLOCK> block; L<C<last>|/last LABEL> and
L<C<redo>|/redo LABEL> behave as if they had been executed within the
main block.  So will L<C<next>|/next LABEL>, but since it will execute a
L<C<continue>|/continue BLOCK> block, it may be more entertaining.
d1126 11
a1136 11
Omitting the L<C<continue>|/continue BLOCK> section is equivalent to
using an empty one, logically enough, so L<C<next>|/next LABEL> goes
directly back to check the condition at the top of the loop.

When there is no BLOCK, L<C<continue>|/continue BLOCK> is a function
that falls through the current C<when> or C<default> block instead of
iterating a dynamically enclosing C<foreach> or exiting a lexically
enclosing C<given>.  In Perl 5.14 and earlier, this form of
L<C<continue>|/continue BLOCK> was only available when the
L<C<"switch"> feature|feature/The 'switch' feature> was enabled.  See
L<feature> and L<perlsyn/"Switch Statements"> for more information.
d1146 1
a1146 1
takes the cosine of L<C<$_>|perlvar/$_>.
d1148 2
a1149 2
For the inverse cosine operation, you may use the
L<C<Math::Trig::acos>|Math::Trig> function, or use this relation:
d1159 1
a1159 1
Creates a digest string exactly like the L<crypt(3)> function in the C
d1163 1
a1163 2
L<C<crypt>|/crypt PLAINTEXT,SALT> is a one-way hash function.  The
PLAINTEXT and SALT are turned
d1177 2
a1178 2
L<C<crypt>|/crypt PLAINTEXT,SALT>'d with the same salt as the stored
digest.  If the two digests match, the password is correct.
d1183 5
a1187 5
L<C<crypt>|/crypt PLAINTEXT,SALT> will hash the new string with the same
salt as the digest.  This allows your code to work with the standard
L<C<crypt>|/crypt PLAINTEXT,SALT> and with more exotic implementations.
In other words, assume nothing about the returned string itself nor
about how many bytes of SALT may matter.
d1201 1
a1201 1
restrict what salts L<C<crypt>|/crypt PLAINTEXT,SALT> accepts.
d1206 1
a1206 1
    my $pwd = (getpwuid($<))[1];
d1210 1
a1210 1
    chomp(my $word = <STDIN>);
d1223 10
a1232 12
The L<C<crypt>|/crypt PLAINTEXT,SALT> function is unsuitable for hashing
large quantities of data, not least of all because you can't get the
information back.  Look at the L<Digest> module for more robust
algorithms.

If using L<C<crypt>|/crypt PLAINTEXT,SALT> on a Unicode string (which
I<potentially> has characters with codepoints above 255), Perl tries to
make sense of the situation by trying to downgrade (a copy of) the
string back to an eight-bit byte string before calling
L<C<crypt>|/crypt PLAINTEXT,SALT> (on that copy).  If that works, good.
If not, L<C<crypt>|/crypt PLAINTEXT,SALT> dies with
L<C<Wide character in crypt>|perldiag/Wide character in %s>.
d1241 1
a1241 2
[This function has been largely superseded by the
L<C<untie>|/untie VARIABLE> function.]
d1253 1
a1253 1
L<C<tie>|/tie VARIABLE,CLASSNAME,LIST> function.]
d1255 10
a1264 11
This binds a L<dbm(3)>, L<ndbm(3)>, L<sdbm(3)>, L<gdbm(3)>, or Berkeley
DB file to a hash.  HASH is the name of the hash.  (Unlike normal
L<C<open>|/open FILEHANDLE,EXPR>, the first argument is I<not> a
filehandle, even though it looks like one).  DBNAME is the name of the
database (without the F<.dir> or F<.pag> extension if any).  If the
database does not exist, it is created with protection specified by MASK
(as modified by the L<C<umask>|/umask EXPR>).  To prevent creation of
the database if it doesn't exist, you may specify a MODE of 0, and the
function will return a false value if it can't find an existing
database.  If your system supports only the older DBM functions, you may
make only one L<C<dbmopen>|/dbmopen HASH,DBNAME,MASK> call in your
d1266 2
a1267 2
ndbm, calling L<C<dbmopen>|/dbmopen HASH,DBNAME,MASK> produced a fatal
error; it now falls back to L<sdbm(3)>.
d1271 2
a1272 2
either use file tests or try setting a dummy hash entry inside an
L<C<eval>|/eval EXPR> to trap the error.
d1274 3
a1276 4
Note that functions such as L<C<keys>|/keys HASH> and
L<C<values>|/values HASH> may return huge lists when used on large DBM
files.  You may prefer to use the L<C<each>|/each HASH> function to
iterate over large DBM files.  Example:
d1290 1
a1290 1
before you call L<C<dbmopen>|/dbmopen HASH,DBNAME,MASK>:
d1305 13
a1317 14
Returns a Boolean value telling whether EXPR has a value other than the
undefined value L<C<undef>|/undef EXPR>.  If EXPR is not present,
L<C<$_>|perlvar/$_> is checked.

Many operations return L<C<undef>|/undef EXPR> to indicate failure, end
of file, system error, uninitialized variable, and other exceptional
conditions.  This function allows you to distinguish
L<C<undef>|/undef EXPR> from other values.  (A simple Boolean test will
not distinguish among L<C<undef>|/undef EXPR>, zero, the empty string,
and C<"0">, which are all equally false.)  Note that since
L<C<undef>|/undef EXPR> is a valid scalar, its presence doesn't
I<necessarily> indicate an exceptional condition: L<C<pop>|/pop ARRAY>
returns L<C<undef>|/undef EXPR> when its argument is an empty array,
I<or> when the element to return happens to be L<C<undef>|/undef EXPR>.
d1319 1
a1319 1
You may also use C<defined(&func)> to check whether subroutine C<func>
d1321 1
a1321 1
declarations of C<func>.  A subroutine that is not defined
d1326 1
a1326 2
Use of L<C<defined>|/defined EXPR> on aggregates (hashes and arrays) is
deprecated.  It
d1335 2
a1336 2
not whether the key exists in the hash.  Use L<C<exists>|/exists EXPR>
for the latter purpose.
d1344 1
a1344 1
    sub foo { defined &$bar ? $bar->(@@_) : die "No bar"; }
d1347 3
a1349 4
Note:  Many folks tend to overuse L<C<defined>|/defined EXPR> and are
then surprised to discover that the number C<0> and C<""> (the
zero-length string) are, in fact, defined values.  For example, if you
say
d1358 3
a1360 3
should use L<C<defined>|/defined EXPR> only when questioning the
integrity of what you're trying to do.  At other times, a simple
comparison to C<0> or C<""> is what you want.
d1362 1
a1362 2
See also L<C<undef>|/undef EXPR>, L<C<exists>|/exists EXPR>,
L<C<ref>|/ref EXPR>.
d1369 4
a1372 5
Given an expression that specifies an element or slice of a hash,
L<C<delete>|/delete EXPR> deletes the specified elements from that hash
so that L<C<exists>|/exists EXPR> on that element no longer returns
true.  Setting a hash element to the undefined value does not remove its
key, but deleting it does; see L<C<exists>|/exists EXPR>.
d1379 7
a1385 10
L<C<delete>|/delete EXPR> may also be used on arrays and array slices,
but its behavior is less straightforward.  Although
L<C<exists>|/exists EXPR> will return false for deleted entries,
deleting array elements never changes indices of existing values; use
L<C<shift>|/shift ARRAY> or L<C<splice>|/splice
ARRAY,OFFSET,LENGTH,LIST> for that.  However, if any deleted elements
fall at the end of an array, the array's size shrinks to the position of
the highest element that still tests true for L<C<exists>|/exists EXPR>,
or to 0 if none do.  In other words, an array won't have trailing
nonexistent elements after a delete.
d1387 1
a1387 2
B<WARNING:> Calling L<C<delete>|/delete EXPR> on array values is
strongly discouraged.  The
d1391 4
a1394 6
Deleting from L<C<%ENV>|perlvar/%ENV> modifies the environment.
Deleting from a hash tied to a DBM file deletes the entry from the DBM
file.  Deleting from a L<C<tied>|/tied VARIABLE> hash or array may not
necessarily return anything; it depends on the implementation of the
L<C<tied>|/tied VARIABLE> package's DELETE method, which may do whatever
it pleases.
d1401 2
a1402 2
    my %hash = (foo => 11, bar => 22, baz => 33);
    my $scalar = delete $hash{foo};         # $scalar is 11
d1404 1
a1404 1
    my @@array  = delete @@hash{qw(foo baz)}; # @@array  is (undef,33)
d1408 1
a1408 1
    foreach my $key (keys %HASH) {
d1412 1
a1412 1
    foreach my $index (0 .. $#ARRAY) {
d1423 1
a1423 1
or undefining %HASH or @@ARRAY, which is the customary
d1446 5
a1450 7
L<C<die>|/die LIST> raises an exception.  Inside an
L<C<eval>|/eval EXPR> the error message is stuffed into
L<C<$@@>|perlvar/$@@> and the L<C<eval>|/eval EXPR> is terminated with the
undefined value.  If the exception is outside of all enclosing
L<C<eval>|/eval EXPR>s, then the uncaught exception prints LIST to
C<STDERR> and exits with a non-zero value.  If you need to exit the
process with a specific exit code, see L<C<exit>|/exit EXPR>.
d1462 1
a1462 1
L<C<$.>|perlvar/$.>.  See L<perlvar/"$/"> and L<perlvar/"$.">.
d1476 3
a1478 3
If the output is empty and L<C<$@@>|perlvar/$@@> already contains a value
(typically from a previous eval) that value is reused after appending
C<"\t...propagated">.  This is useful for propagating exceptions:
d1483 5
a1487 5
If the output is empty and L<C<$@@>|perlvar/$@@> contains an object
reference that has a C<PROPAGATE> method, that method will be called
with additional file and line number parameters.  The return value
replaces the value in L<C<$@@>|perlvar/$@@>;  i.e., as if
C<< $@@ = eval { $@@->PROPAGATE(__FILE__, __LINE__) }; >> were called.
d1489 1
a1489 1
If L<C<$@@>|perlvar/$@@> is empty, then the string C<"Died"> is used.
d1492 1
a1492 2
determined from the values of L<C<$!>|perlvar/$!> and
L<C<$?>|perlvar/$?> with this pseudocode:
a1497 4
As with L<C<exit>|/exit EXPR>, L<C<$?>|perlvar/$?> is set prior to
unwinding the call stack; any C<DESTROY> or C<END> handlers can then
alter this value, and thus Perl's exit code.

d1499 4
a1502 4
into the limited space of the system exit code.  However, as
L<C<$!>|perlvar/$!> is the value of C's C<errno>, which can be set by
any system call, this means that the value of the exit code used by
L<C<die>|/die LIST> can be non-predictable, so should not be relied
d1505 9
a1513 11
You can also call L<C<die>|/die LIST> with a reference argument, and if
this is trapped within an L<C<eval>|/eval EXPR>, L<C<$@@>|perlvar/$@@>
contains that reference.  This permits more elaborate exception handling
using objects that maintain arbitrary state about the exception.  Such a
scheme is sometimes preferable to matching particular string values of
L<C<$@@>|perlvar/$@@> with regular expressions.  Because
L<C<$@@>|perlvar/$@@> is a global variable and L<C<eval>|/eval EXPR> may
be used within object implementations, be careful that analyzing the
error object doesn't replace the reference in the global variable.  It's
easiest to make a local copy of the reference before any manipulations.
Here's an example:
d1532 9
a1540 10
You can arrange for a callback to be run just before the
L<C<die>|/die LIST> does its deed, by setting the
L<C<$SIG{__DIE__}>|perlvar/%SIG> hook.  The associated handler is called
with the error text and can change the error message, if it sees fit, by
calling L<C<die>|/die LIST> again.  See L<perlvar/%SIG> for details on
setting L<C<%SIG>|perlvar/%SIG> entries, and L<C<eval>|/eval EXPR> for some
examples.  Although this feature was to be run only right before your
program was to exit, this is not currently so: the
L<C<$SIG{__DIE__}>|perlvar/%SIG> hook is currently called even inside
L<C<eval>|/eval EXPR>ed blocks/strings!  If one wants the hook to do
d1549 1
a1549 2
See also L<C<exit>|/exit EXPR>, L<C<warn>|/warn LIST>, and the L<Carp>
module.
d1563 1
a1563 2
L<C<next>|/next LABEL>, L<C<last>|/last LABEL>, or
L<C<redo>|/redo LABEL> cannot be used to leave or restart the block.
d1579 13
a1591 15
the current filename for error messages, searches the
L<C<@@INC>|perlvar/@@INC> directories, and updates L<C<%INC>|perlvar/%INC>
if the file is found.  See L<perlvar/@@INC> and L<perlvar/%INC> for these
variables.  It also differs in that code evaluated with C<do FILE>
cannot see lexicals in the enclosing scope; C<eval STRING> does.  It's
the same, however, in that it does reparse the file every time you call
it, so you probably don't want to do this inside a loop.

If L<C<do>|/do EXPR> can read the file but cannot compile it, it
returns L<C<undef>|/undef EXPR> and sets an error message in
L<C<$@@>|perlvar/$@@>.  If L<C<do>|/do EXPR> cannot read the file, it
returns undef and sets L<C<$!>|perlvar/$!> to the error.  Always check
L<C<$@@>|perlvar/$@@> first, as compilation could fail in a way that also
sets L<C<$!>|perlvar/$!>.  If the file is successfully compiled,
L<C<do>|/do EXPR> returns the value of the last expression evaluated.
d1594 2
a1595 3
L<C<use>|/use Module VERSION LIST> and L<C<require>|/require VERSION>
operators, which also do automatic error checking and raise an exception
if there's a problem.
d1597 2
a1598 2
You might like to use L<C<do>|/do EXPR> to read in a program
configuration file.  Manual error checking can be done this way:
d1626 1
a1626 2
a C<goto LABEL> (with all the restrictions that L<C<goto>|/goto LABEL>
suffers).
d1638 1
a1638 1
it as C<CORE::dump()> if you don't want to be warned against a possible
d1644 1
a1644 1
L<C<dump>|/dump LABEL>.
d1654 2
d1669 3
a1671 5
that the most recent key returned by L<C<each>|/each HASH> or
L<C<keys>|/keys HASH> may be deleted without changing the order.  So
long as a given hash is unmodified you may rely on
L<C<keys>|/keys HASH>, L<C<values>|/values HASH> and
L<C<each>|/each HASH> to repeatedly return the same order
d1677 8
a1684 10
After L<C<each>|/each HASH> has returned all entries from the hash or
array, the next call to L<C<each>|/each HASH> returns the empty list in
list context and L<C<undef>|/undef EXPR> in scalar context; the next
call following I<that> one restarts iteration.  Each hash or array has
its own internal iterator, accessed by L<C<each>|/each HASH>,
L<C<keys>|/keys HASH>, and L<C<values>|/values HASH>.  The iterator is
implicitly reset when L<C<each>|/each HASH> has reached the end as just
described; it can be explicitly reset by calling L<C<keys>|/keys HASH>
or L<C<values>|/values HASH> on the hash or array.  If you add or delete
a hash's elements while iterating over it, the effect on the iterator is
d1687 1
a1687 1
returned by L<C<each>|/each HASH>, so the following code works properly:
d1689 4
a1692 4
    while (my ($key, $value) = each %hash) {
        print $key, "\n";
        delete $hash{$key};   # This is safe
    }
d1697 1
a1697 1
This prints out your environment like the L<printenv(1)> program,
d1700 1
a1700 1
    while (my ($key,$value) = each %ENV) {
d1704 6
a1709 3
Starting with Perl 5.14, an experimental feature allowed
L<C<each>|/each HASH> to take a scalar expression. This experiment has
been deemed unsuccessful, and was removed as of Perl 5.24.
d1711 2
a1712 2
As of Perl 5.18 you can use a bare L<C<each>|/each HASH> in a C<while>
loop, which will set L<C<$_>|perlvar/$_> on every iteration.
d1714 1
a1714 1
    while (each %ENV) {
d1724 1
d1727 1
a1727 2
See also L<C<keys>|/keys HASH>, L<C<values>|/values HASH>, and
L<C<sort>|/sort SUBNAME LIST>.
d1748 14
a1761 17
An L<C<eof>|/eof FILEHANDLE> without an argument uses the last file
read.  Using L<C<eof()>|/eof FILEHANDLE> with empty parentheses is
different.  It refers to the pseudo file formed from the files listed on
the command line and accessed via the C<< <> >> operator.  Since
C<< <> >> isn't explicitly opened, as a normal filehandle is, an
L<C<eof()>|/eof FILEHANDLE> before C<< <> >> has been used will cause
L<C<@@ARGV>|perlvar/@@ARGV> to be examined to determine if input is
available.   Similarly, an L<C<eof()>|/eof FILEHANDLE> after C<< <> >>
has returned end-of-file will assume you are processing another
L<C<@@ARGV>|perlvar/@@ARGV> list, and if you haven't set
L<C<@@ARGV>|perlvar/@@ARGV>, will read input from C<STDIN>; see
L<perlop/"I/O Operators">.

In a C<< while (<>) >> loop, L<C<eof>|/eof FILEHANDLE> or C<eof(ARGV)>
can be used to detect the end of each file, whereas
L<C<eof()>|/eof FILEHANDLE> will detect the end of the very last file
only.  Examples:
d1780 3
a1782 3
Practical hint: you almost never need to use L<C<eof>|/eof FILEHANDLE>
in Perl, because the input operators typically return L<C<undef>|/undef
EXPR> when they run out of data or encounter an error.
d1803 14
a1816 19
Note that the value is parsed every time the L<C<eval>|/eval EXPR>
executes.  If EXPR is omitted, evaluates L<C<$_>|perlvar/$_>.  This form
is typically used to delay parsing and subsequent execution of the text
of EXPR until run time.

If the
L<C<"unicode_eval"> feature|feature/The 'unicode_eval' and 'evalbytes' features>
is enabled (which is the default under a
C<use 5.16> or higher declaration), EXPR or L<C<$_>|perlvar/$_> is
treated as a string of characters, so L<C<use utf8>|utf8> declarations
have no effect, and source filters are forbidden.  In the absence of the
L<C<"unicode_eval"> feature|feature/The 'unicode_eval' and 'evalbytes' features>,
will sometimes be treated as characters and sometimes as bytes,
depending on the internal encoding, and source filters activated within
the L<C<eval>|/eval EXPR> exhibit the erratic, but historical, behaviour
of affecting some outer file scope that is still compiling.  See also
the L<C<evalbytes>|/evalbytes EXPR> operator, which always treats its
input as a byte stream and works properly with source filters, and the
L<feature> pragma.
d1820 3
a1822 3
C<"Infinity">; or, within the scope of a L<C<use locale>|locale>, the
decimal point character may be something other than a dot (such as a
comma).  None of these are likely to parse as you are likely expecting.
d1825 1
a1825 2
same time the code surrounding the L<C<eval>|/eval EXPR> itself was
parsed--and executed
d1837 21
a1857 26
in void, scalar, or list context, depending on the context of the
L<C<eval>|/eval EXPR> itself.  See L<C<wantarray>|/wantarray> for more
on how the evaluation context can be determined.

If there is a syntax error or runtime error, or a L<C<die>|/die LIST>
statement is executed, L<C<eval>|/eval EXPR> returns
L<C<undef>|/undef EXPR> in scalar context or an empty list in list
context, and L<C<$@@>|perlvar/$@@> is set to the error message.  (Prior to
5.16, a bug caused L<C<undef>|/undef EXPR> to be returned in list
context for syntax errors, but not for runtime errors.) If there was no
error, L<C<$@@>|perlvar/$@@> is set to the empty string.  A control flow
operator like L<C<last>|/last LABEL> or L<C<goto>|/goto LABEL> can
bypass the setting of L<C<$@@>|perlvar/$@@>.  Beware that using
L<C<eval>|/eval EXPR> neither silences Perl from printing warnings to
STDERR, nor does it stuff the text of warning messages into
L<C<$@@>|perlvar/$@@>.  To do either of those, you have to use the
L<C<$SIG{__WARN__}>|perlvar/%SIG> facility, or turn off warnings inside
the BLOCK or EXPR using S<C<no warnings 'all'>>.  See
L<C<warn>|/warn LIST>, L<perlvar>, and L<warnings>.

Note that, because L<C<eval>|/eval EXPR> traps otherwise-fatal errors,
it is useful for determining whether a particular feature (such as
L<C<socket>|/socket SOCKET,DOMAIN,TYPE,PROTOCOL> or
L<C<symlink>|/symlink OLDFILE,NEWFILE>) is implemented.  It is also
Perl's exception-trapping mechanism, where the L<C<die>|/die LIST>
operator is used to raise exceptions.
d1861 1
a1861 2
L<C<eval>|/eval EXPR> unless C<$ENV{PERL_DL_NONLAZY}> is set.  See
L<perlrun>.
d1865 1
a1865 2
recompiling each time.  The error, if any, is still returned in
L<C<$@@>|perlvar/$@@>.
d1880 1
a1880 1
Using the C<eval {}> form as an exception trap in libraries does have some
d1891 1
a1891 2
L<C<die>|/die LIST> again, which has the effect of changing their error
messages:
d1904 2
a1905 2
With an L<C<eval>|/eval EXPR>, you should be especially careful to
remember what's being looked at when:
d1927 1
a1927 2
Before Perl 5.14, the assignment to L<C<$@@>|perlvar/$@@> occurred before
restoration
d1945 1
a1945 2
L<C<next>|/next LABEL>, L<C<last>|/last LABEL>, or
L<C<redo>|/redo LABEL> cannot be used to leave or restart the block.
d1960 9
a1968 12
This function is like L<C<eval>|/eval EXPR> with a string argument,
except it always parses its argument, or L<C<$_>|perlvar/$_> if EXPR is
omitted, as a string of bytes.  A string containing characters whose
ordinal value exceeds 255 results in an error.  Source filters activated
within the evaluated code apply to the code itself.

L<C<evalbytes>|/evalbytes EXPR> is available only if the
L<C<"evalbytes"> feature|feature/The 'unicode_eval' and 'evalbytes' features>
is enabled or if it is prefixed with C<CORE::>.  The
L<C<"evalbytes"> feature|feature/The 'unicode_eval' and 'evalbytes' features>
is enabled automatically with a C<use v5.16> (or higher) declaration in
the current scope.
d1977 2
a1978 3
The L<C<exec>|/exec LIST> function executes a system command I<and never
returns>; use L<C<system>|/system LIST> instead of L<C<exec>|/exec LIST>
if you want it to return.  It fails and
d1982 5
a1986 7
Since it's a common mistake to use L<C<exec>|/exec LIST> instead of
L<C<system>|/system LIST>, Perl warns you if L<C<exec>|/exec LIST> is
called in void context and if there is a following statement that isn't
L<C<die>|/die LIST>, L<C<warn>|/warn LIST>, or L<C<exit>|/exit EXPR> (if
L<warnings> are enabled--but you always do that, right?).  If you
I<really> want to follow an L<C<exec>|/exec LIST> with some other
statement, you can use one of these styles to avoid the warning:
d1991 1
a1991 1
If there is more than one argument in LIST, this calls L<execvp(3)> with the
d2009 1
a2009 1
    my $shell = '/bin/csh';
d2020 2
a2021 3
Using an indirect object with L<C<exec>|/exec LIST> or
L<C<system>|/system LIST> is also more secure.  This usage (which also
works fine with L<C<system>|/system LIST>) forces
d2026 1
a2026 1
    my @@args = ( "echo surprise" );
d2035 1
a2035 1
L<C<$?>|perlvar/$?> to a non-zero value indicating failure.
d2043 3
a2045 4
To be safe, you may need to set L<C<$E<verbar>>|perlvar/$E<verbar>>
(C<$AUTOFLUSH> in L<English>) or call the C<autoflush> method of
L<C<IO::Handle>|IO::Handle/METHODS> on any open handles to avoid lost
output.
d2047 2
a2048 2
Note that L<C<exec>|/exec LIST> will not call your C<END> blocks, nor
will it invoke C<DESTROY> methods on your objects.
d2066 1
a2066 2
obvious and is strongly tied to the use of L<C<delete>|/delete EXPR> on
arrays.
d2068 1
a2068 2
B<WARNING:> Calling L<C<exists>|/exists EXPR> on array values is
strongly discouraged.  The
d2104 1
a2104 1
into existence due to the existence test for the C<$key> element above.
d2116 1
a2116 1
to L<C<exists>|/exists EXPR> is an error.
d2130 1
a2130 1
    my $ans = <STDIN>;
d2133 1
a2133 2
See also L<C<die>|/die LIST>.  If EXPR is omitted, exits with C<0>
status.  The only
d2140 11
a2150 13
Don't use L<C<exit>|/exit EXPR> to abort a subroutine if there's any
chance that someone might want to trap whatever error happened.  Use
L<C<die>|/die LIST> instead, which can be trapped by an
L<C<eval>|/eval EXPR>.

The L<C<exit>|/exit EXPR> function does not always exit immediately.  It
calls any defined C<END> routines first, but these C<END> routines may
not themselves abort the exit.  Likewise any object destructors that
need to be called are called before the real exit.  C<END> routines and
destructors can change the exit status by modifying L<C<$?>|perlvar/$?>.
If this is a problem, you can call
L<C<POSIX::_exit($status)>|POSIX/C<_exit>> to avoid C<END> and destructor
processing.  See L<perlmod> for details.
d2193 3
a2195 3
Perl only implements the full form of casefolding, but you can access
the simple folds using L<Unicode::UCD/B<casefold()>> and
L<Unicode::UCD/B<prop_invmap()>>.
d2202 1
a2202 1
If EXPR is omitted, uses L<C<$_>|perlvar/$_>.
d2204 5
a2208 7
This function behaves the same way under various pragmas, such as within
L<S<C<"use feature 'unicode_strings">>|feature/The 'unicode_strings' feature>,
as L<C<lc>|/lc EXPR> does, with the single exception of
L<C<fc>|/fc EXPR> of I<LATIN CAPITAL LETTER SHARP S> (U+1E9E) within the
scope of L<S<C<use locale>>|locale>.  The foldcase of this character
would normally be C<"ss">, but as explained in the L<C<lc>|/lc EXPR>
section, case
d2211 2
a2212 2
instead the string C<"\x{17F}\x{17F}">, which is the I<LATIN SMALL LETTER
LONG S>.  Since that character itself folds to C<"s">, the string of two
d2217 2
a2218 2
characters, these are not provided by the Perl core.  However, the CPAN module
L<C<Unicode::Casing>|Unicode::Casing> may be used to provide an implementation.
d2220 3
a2222 5
L<C<fc>|/fc EXPR> is available only if the
L<C<"fc"> feature|feature/The 'fc' feature> is enabled or if it is
prefixed with C<CORE::>.  The
L<C<"fc"> feature|feature/The 'fc' feature> is enabled automatically
with a C<use v5.16> (or higher) declaration in the current scope.
d2229 1
a2229 1
Implements the L<fcntl(2)> function.  You'll probably have to say
d2234 2
a2235 2
value returned work just like L<C<ioctl>|/ioctl
FILEHANDLE,FUNCTION,SCALAR> below.  For example:
d2238 2
a2239 2
    my $flags = fcntl($filehandle, F_GETFL, 0)
        or die "Can't fcntl F_GETFL: $!";
d2241 13
a2253 17
You don't have to check for L<C<defined>|/defined EXPR> on the return
from L<C<fcntl>|/fcntl FILEHANDLE,FUNCTION,SCALAR>.  Like
L<C<ioctl>|/ioctl FILEHANDLE,FUNCTION,SCALAR>, it maps a C<0> return
from the system call into C<"0 but true"> in Perl.  This string is true
in boolean context and C<0> in numeric context.  It is also exempt from
the normal
L<C<Argument "..." isn't numeric>|perldiag/Argument "%s" isn't numeric%s>
L<warnings> on improper numeric conversions.

Note that L<C<fcntl>|/fcntl FILEHANDLE,FUNCTION,SCALAR> raises an
exception if used on a machine that doesn't implement L<fcntl(2)>.  See
the L<Fcntl> module or your L<fcntl(2)> manpage to learn what functions
are available on your system.

Here's an example of setting a filehandle named C<$REMOTE> to be
non-blocking at the system level.  You'll have to negotiate
L<C<$E<verbar>>|perlvar/$E<verbar>> on your own, though.
d2257 2
a2258 2
    my $flags = fcntl($REMOTE, F_GETFL, 0)
        or die "Can't get flags for the socket: $!\n";
d2260 2
a2261 2
    fcntl($REMOTE, F_SETFL, $flags | O_NONBLOCK)
        or die "Can't set flags for the socket: $!\n";
d2280 1
a2280 2
L<C<open>|/open FILEHANDLE,EXPR> with a reference for the third
argument, -1 is returned.
d2282 2
a2283 3
This is mainly useful for constructing bitmaps for
L<C<select>|/select RBITS,WBITS,EBITS,TIMEOUT> and low-level POSIX
tty-handling operations.
d2290 4
a2293 4
    if (fileno($this) != -1 && fileno($this) == fileno($that)) {
        print "\$this and \$that are dups\n";
    } elsif (fileno($this) != -1 && fileno($that) != -1) {
        print "\$this and \$that have different " .
d2296 1
a2296 1
        print "At least one of \$this and \$that does " .
a2299 7
The behavior of L<C<fileno>|/fileno FILEHANDLE> on a directory handle
depends on the operating system.  On a system with L<dirfd(3)> or
similar, L<C<fileno>|/fileno FILEHANDLE> on a directory
handle returns the underlying file descriptor associated with the
handle; on systems with no such support, it returns the undefined value,
and sets L<C<$!>|perlvar/$!> (errno).

d2305 1
a2305 1
Calls L<flock(2)>, or an emulation of it, on FILEHANDLE.  Returns true
d2307 3
a2309 4
machine that doesn't implement L<flock(2)>, L<fcntl(2)> locking, or
L<lockf(3)>.  L<C<flock>|/flock FILEHANDLE,OPERATION> is Perl's portable
file-locking interface, although it locks entire files only, not
records.
d2311 1
a2311 2
Two potentially non-obvious but traditional L<C<flock>|/flock
FILEHANDLE,OPERATION> semantics are
d2315 1
a2315 2
L<C<flock>|/flock FILEHANDLE,OPERATION> may modify files locked with
L<C<flock>|/flock FILEHANDLE,OPERATION>.  See L<perlport>,
d2329 2
a2330 3
LOCK_SH or LOCK_EX, then L<C<flock>|/flock FILEHANDLE,OPERATION> returns
immediately rather than blocking waiting for the lock; check the return
status to see if you got it.
d2335 1
a2335 1
Note that the emulation built with L<lockf(3)> doesn't provide shared
d2337 2
a2338 2
are the semantics that L<lockf(3)> implements.  Most if not all systems
implement L<lockf(3)> in terms of L<fcntl(2)> locking, though, so the
d2341 1
a2341 1
Note that the L<fcntl(2)> emulation of L<flock(3)> requires that FILEHANDLE
d2345 4
a2348 5
Note also that some versions of L<C<flock>|/flock FILEHANDLE,OPERATION>
cannot lock things over the network; you would need to use the more
system-specific L<C<fcntl>|/fcntl FILEHANDLE,FUNCTION,SCALAR> for
that.  If you like you can force Perl to ignore your system's L<flock(2)>
function, and so provide its own L<fcntl(2)>-based emulation, by passing
d2377 3
a2379 4
On systems that support a real L<flock(2)>, locks are inherited across
L<C<fork>|/fork> calls, whereas those that must resort to the more
capricious L<fcntl(2)> function lose their locks, making it seriously
harder to write servers.
d2381 1
a2381 2
See also L<DB_File> for other L<C<flock>|/flock FILEHANDLE,OPERATION>
examples.
d2390 1
a2390 1
Does a L<fork(2)> system call to create a new process running the
d2392 1
a2392 2
parent process, C<0> to the child process, or L<C<undef>|/undef EXPR> if
the fork is
d2395 1
a2395 1
L<fork(2)>, great care has gone into making it extremely efficient (for
d2399 5
a2403 6
Perl attempts to flush all files opened for output before forking the
child process, but this may not be supported on some platforms (see
L<perlport>).  To be safe, you may need to set
L<C<$E<verbar>>|perlvar/$E<verbar>> (C<$AUTOFLUSH> in L<English>) or
call the C<autoflush> method of L<C<IO::Handle>|IO::Handle/METHODS> on
any open handles to avoid duplicate output.
d2405 1
a2405 1
If you L<C<fork>|/fork> without ever waiting on your children, you will
d2407 2
a2408 2
L<C<$SIG{CHLD}>|perlvar/%SIG> to C<"IGNORE">.  See also L<perlipc> for
more examples of forking and reaping moribund children.
d2416 6
a2421 6
On some platforms such as Windows, where the L<fork(2)> system call is
not available, Perl can be built to emulate L<C<fork>|/fork> in the Perl
interpreter.  The emulation is designed, at the level of the Perl
program, to be as compatible as possible with the "Unix" L<fork(2)>.
However it has limitations that have to be considered in code intended
to be portable.  See L<perlfork> for more details.
d2430 2
a2431 2
Declare a picture format for use by the L<C<write>|/write FILEHANDLE>
function.  For example:
d2450 12
a2461 14
This is an internal function used by L<C<format>|/format>s, though you
may call it, too.  It formats (see L<perlform>) a list of values
according to the contents of PICTURE, placing the output into the format
output accumulator, L<C<$^A>|perlvar/$^A> (or C<$ACCUMULATOR> in
L<English>).  Eventually, when a L<C<write>|/write FILEHANDLE> is done,
the contents of L<C<$^A>|perlvar/$^A> are written to some filehandle.
You could also read L<C<$^A>|perlvar/$^A> and then set
L<C<$^A>|perlvar/$^A> back to C<"">.  Note that a format typically does
one L<C<formline>|/formline PICTURE,LIST> per line of form, but the
L<C<formline>|/formline PICTURE,LIST> function itself doesn't care how
many newlines are embedded in the PICTURE.  This means that the C<~> and
C<~~> tokens treat the entire PICTURE as a single line.  You may
therefore need to use multiple formlines to implement a single record
format, just like the L<C<format>|/format> compiler.
d2465 1
a2465 2
L<C<formline>|/formline PICTURE,LIST> always returns true.  See
L<perlform> for other examples.
d2467 3
a2469 3
If you are trying to use this instead of L<C<write>|/write FILEHANDLE>
to capture the output, you may find it easier to open a filehandle to a
scalar (C<< open my $fh, ">", \$output >>) and write to that instead.
d2480 1
a2480 2
the latter case L<C<$!>|perlvar/$!> is set).  If FILEHANDLE is omitted,
reads from
d2492 1
a2492 1
    my $key = getc(STDIN);
d2502 2
a2503 2
Determination of whether C<$BSD_STYLE> should be set is left as an
exercise to the reader.
d2505 3
a2507 3
The L<C<POSIX::getattr>|POSIX/C<getattr>> function can do this more
portably on systems purporting POSIX compliance.  See also the
L<C<Term::ReadKey>|Term::ReadKey> module on CPAN.
d2516 1
a2516 1
returns the empty string, use L<C<getpwuid>|/getpwuid UID>.
d2518 1
a2518 1
    my $login = getlogin || getpwuid($<) || "Kilroy";
d2520 2
a2521 2
Do not consider L<C<getlogin>|/getlogin> for authentication: it is not
as secure as L<C<getpwuid>|/getpwuid UID>.
d2534 4
a2537 4
    my $hersockaddr    = getpeername($sock);
    my ($port, $iaddr) = sockaddr_in($hersockaddr);
    my $herhostname    = gethostbyaddr($iaddr, AF_INET);
    my $herstraddr     = inet_ntoa($iaddr);
d2547 3
a2549 4
doesn't implement L<getpgrp(2)>.  If PID is omitted, returns the process
group of the current process.  Note that the POSIX version of
L<C<getpgrp>|/getpgrp PID> does not accept a PID argument, so only
C<PID==0> is truly portable.
d2575 1
a2575 1
machine that doesn't implement L<getpriority(2)>.
d2585 1
a2585 1
X<endnetent> X<endprotoent> X<endservent>
d2709 9
a2717 9
 #    0        1          2           3         4
 my ( $name,   $passwd,   $gid,       $members  ) = getgr*
 my ( $name,   $aliases,  $addrtype,  $net      ) = getnet*
 my ( $name,   $aliases,  $port,      $proto    ) = getserv*
 my ( $name,   $aliases,  $proto                ) = getproto*
 my ( $name,   $aliases,  $addrtype,  $length,  @@addrs ) = gethost*
 my ( $name,   $passwd,   $uid,       $gid,     $quota,
    $comment,  $gcos,     $dir,       $shell,   $expire ) = getpw*
 #    5        6          7           8         9
d2719 1
a2719 2
(If the entry doesn't exist, the return value is a single meaningless true
value.)
d2733 7
a2739 7
    my $uid   = getpwnam($name);
    my $name  = getpwuid($num);
    my $name  = getpwent();
    my $gid   = getgrnam($name);
    my $name  = getgrgid($num);
    my $name  = getgrent();
    # etc.
d2751 1
a2751 1
in your system, please consult L<getpwnam(3)> and your system's
d2754 1
a2754 1
by using the L<C<Config>|Config> module and the values C<d_pwquota>, C<d_pwage>,
d2759 1
a2759 1
the L<shadow(3)> functions as found in System V (this includes Solaris
d2767 1
a2767 2
C, it will be returned to you via L<C<$?>|perlvar/$?> if the function
call fails.  The
d2773 1
a2773 1
    my ($w,$x,$y,$z) = unpack('W4',$addr[0]);
d2778 2
a2779 2
    my $iaddr = inet_aton("127.1"); # or whatever address
    my $name  = gethostbyaddr($iaddr, AF_INET);
d2782 1
a2782 1
    my $straddr = inet_ntoa($iaddr);
d2788 1
a2788 2
    my $packed_ip = gethostbyname("www.perl.org");
    my $ip_address;
d2793 2
a2794 2
Make sure L<C<gethostbyname>|/gethostbyname NAME> is called in SCALAR
context and that its return value is checked for definedness.
d2796 2
a2797 3
The L<C<getprotobynumber>|/getprotobynumber NUMBER> function, even
though it only takes one argument, has the precedence of a list
operator, so beware:
d2804 6
a2809 8
contains which return value, by-name interfaces are provided in standard
modules: L<C<File::stat>|File::stat>, L<C<Net::hostent>|Net::hostent>,
L<C<Net::netent>|Net::netent>, L<C<Net::protoent>|Net::protoent>,
L<C<Net::servent>|Net::servent>, L<C<Time::gmtime>|Time::gmtime>,
L<C<Time::localtime>|Time::localtime>, and
L<C<User::grent>|User::grent>.  These override the normal built-ins,
supplying versions that return objects with the appropriate names for
each field.  For example:
d2813 1
a2813 1
   my $is_his = (stat($filename)->uid == pwent($whoever)->uid);
d2831 2
a2832 2
    my $mysockaddr = getsockname($sock);
    my ($port, $myaddr) = sockaddr_in($mysockaddr);
d2845 5
a2849 6
L<C<Socket>|Socket> module) will exist.  To query options at another
level the protocol number of the appropriate protocol controlling the
option should be supplied.  For example, to indicate that an option is
to be interpreted by the TCP protocol, LEVEL should be set to the
protocol number of TCP, which you can get using
L<C<getprotobyname>|/getprotobyname NAME>.
d2852 5
a2856 6
option, or L<C<undef>|/undef EXPR> on error, with the reason for the
error placed in L<C<$!>|perlvar/$!>.  Just what is in the packed string
depends on LEVEL and OPTNAME; consult L<getsockopt(2)> for details.  A
common case is that the option is an integer, in which case the result
is a packed integer, which you can decode using
L<C<unpack>|/unpack TEMPLATE,EXPR> with the C<i> (or C<I>) format.
d2885 2
a2886 2
EXPR is omitted, L<C<$_>|perlvar/$_> is used.  The C<< <*.c> >> operator
is discussed in more detail in L<perlop/"I/O Operators">.
d2888 2
a2889 3
Note that L<C<glob>|/glob EXPR> splits its arguments on whitespace and
treats
each segment as separate pattern.  As such, C<glob("*.c *.h")>
d2895 1
a2895 1
followed by an C<f>, use one of:
d2897 3
a2899 3
    my @@spacies = <"*e f*">;
    my @@spacies = glob '"*e f*"';
    my @@spacies = glob q("*e f*");
d2903 2
a2904 2
    my @@spacies = glob "'*${var}e f*'";
    my @@spacies = glob qq("*${var}e f*");
d2907 2
a2908 2
L<C<glob>|/glob EXPR>, no filenames are matched, but potentially many
strings are returned.  For example, this produces nine strings, one for
d2911 1
a2911 1
    my @@many = glob "{apple,tomato,cherry}={green,yellow,red}";
d2913 3
a2915 4
This operator is implemented using the standard C<File::Glob> extension.
See L<File::Glob> for details, including
L<C<bsd_glob>|File::Glob/C<bsd_glob>>, which does not treat whitespace
as a pattern separator.
d2926 2
a2927 2
Works just like L<C<localtime>|/localtime EXPR> but the returned values
are localized for the standard Greenwich time zone.
d2946 7
a2952 8
subroutine given to L<C<sort>|/sort SUBNAME LIST>.  It can be used to go
almost anywhere else within the dynamic scope, including out of
subroutines, but it's usually better to use some other construct such as
L<C<last>|/last LABEL> or L<C<die>|/die LIST>.  The author of Perl has
never felt the need to use this form of L<C<goto>|/goto LABEL> (in Perl,
that is; C is another matter).  (The difference is that C does not offer
named loops combined with loop control.  Perl does, and this replaces
most structured uses of L<C<goto>|/goto LABEL> in other languages.)
d2960 2
a2961 3
dynamically.  This allows for computed L<C<goto>|/goto LABEL>s per
FORTRAN, but isn't necessarily recommended if you're optimizing for
maintainability:
d2978 10
a2987 11
L<C<goto>|/goto LABEL>.  In fact, it isn't a goto in the normal sense at
all, and doesn't have the stigma associated with other gotos.  Instead,
it exits the current subroutine (losing any changes set by
L<C<local>|/local EXPR>) and immediately calls in its place the named
subroutine using the current value of L<C<@@_>|perlvar/@@_>.  This is used
by C<AUTOLOAD> subroutines that wish to load another subroutine and then
pretend that the other subroutine had been called in the first place
(except that any modifications to L<C<@@_>|perlvar/@@_> in the current
subroutine are propagated to the other subroutine.) After the
L<C<goto>|/goto LABEL>, not even L<C<caller>|/caller EXPR> will be able
to tell that this routine was called first.
d3000 1
a3000 1
This is similar in spirit to, but not the same as, L<grep(1)> and its
d3004 1
a3004 2
L<C<$_>|perlvar/$_> to each element) and returns the list value
consisting of those
d3008 1
a3008 1
    my @@foo = grep(!/^#/, @@bar);    # weed out comments
d3012 1
a3012 1
    my @@foo = grep {!/^#/} @@bar;    # weed out comments
d3014 1
a3014 2
Note that L<C<$_>|perlvar/$_> is an alias to the list value, so it can
be used to
d3019 2
a3020 3
element of a list returned by grep (for example, in a C<foreach>,
L<C<map>|/map BLOCK LIST> or another L<C<grep>|/grep BLOCK LIST>)
actually modifies the element in the original list.
d3023 7
a3029 2
See also L<C<map>|/map BLOCK LIST> for a list composed of the results of
the BLOCK or EXPR.
d3036 1
a3036 1
=for Pod::Functions convert a hexadecimal string to a number
d3038 3
a3040 2
Interprets EXPR as a hex string and returns the corresponding numeric value.
If EXPR is omitted, uses L<C<$_>|perlvar/$_>.
a3043 1
    $valid_input =~ /\A(?:0?[xX])?(?:_?[0-9a-fA-F])*\z/
d3045 4
a3048 11
A hex string consists of hex digits and an optional C<0x> or C<x> prefix.
Each hex digit may be preceded by a single underscore, which will be ignored.
Any other character triggers a warning and causes the rest of the string
to be ignored (even leading whitespace, unlike L<C<oct>|/oct EXPR>).
Only integers can be represented, and integer overflow triggers a warning.

To convert strings that might start with any of C<0>, C<0x>, or C<0b>,
see L<C<oct>|/oct EXPR>.  To present something as hex, look into
L<C<printf>|/printf FILEHANDLE FORMAT, LIST>,
L<C<sprintf>|/sprintf FORMAT, LIST>, and
L<C<unpack>|/unpack TEMPLATE,EXPR>.
d3055 4
a3058 6
There is no builtin L<C<import>|/import LIST> function.  It is just an
ordinary method (subroutine) defined (or inherited) by modules that wish
to export names to another module.  The
L<C<use>|/use Module VERSION LIST> function calls the
L<C<import>|/import LIST> method for the package used.  See also
L<C<use>|/use Module VERSION LIST>, L<perlmod>, and L<Exporter>.
d3074 1
a3074 2
If the substring is not found, L<C<index>|/index STR,SUBSTR,POSITION>
returns -1.
d3083 1
a3083 2
Returns the integer portion of EXPR.  If EXPR is omitted, uses
L<C<$_>|perlvar/$_>.
d3089 2
a3090 4
the L<C<sprintf>|/sprintf FORMAT, LIST>,
L<C<printf>|/printf FILEHANDLE FORMAT, LIST>, or the
L<C<POSIX::floor>|POSIX/C<floor>> and L<C<POSIX::ceil>|POSIX/C<ceil>>
functions will serve you better than will L<C<int>|/int EXPR>.
d3097 1
a3097 1
Implements the L<ioctl(2)> function.  You'll probably first have to say
d3108 1
a3108 2
will be passed as the third argument of the actual
L<C<ioctl>|/ioctl FILEHANDLE,FUNCTION,SCALAR> call.  (If SCALAR
d3111 1
a3111 2
true, add a C<0> to the scalar before using it.)  The
L<C<pack>|/pack TEMPLATE,LIST> and L<C<unpack>|/unpack TEMPLATE,EXPR>
d3113 1
a3113 1
L<C<ioctl>|/ioctl FILEHANDLE,FUNCTION,SCALAR>.
d3115 1
a3115 2
The return value of L<C<ioctl>|/ioctl FILEHANDLE,FUNCTION,SCALAR> (and
L<C<fcntl>|/fcntl FILEHANDLE,FUNCTION,SCALAR>) is as follows:
d3126 1
a3126 1
    my $retval = ioctl(...) || -1;
d3129 2
a3130 3
The special string C<"0 but true"> is exempt from
L<C<Argument "..." isn't numeric>|perldiag/Argument "%s" isn't numeric%s>
L<warnings> on improper numeric conversions.
d3142 1
a3142 1
   my $rec = join(':', $login,$passwd,$uid,$gid,$gcos,$home,$shell);
d3144 2
a3145 3
Beware that unlike L<C<split>|/split E<sol>PATTERNE<sol>,EXPR,LIMIT>,
L<C<join>|/join EXPR,LIST> doesn't take a pattern as its first argument.
Compare L<C<split>|/split E<sol>PATTERNE<sol>,EXPR,LIMIT>.
d3152 2
d3165 3
a3167 5
that the most recent key returned by L<C<each>|/each HASH> or
L<C<keys>|/keys HASH> may be deleted without changing the order.  So
long as a given hash is unmodified you may rely on
L<C<keys>|/keys HASH>, L<C<values>|/values HASH> and L<C<each>|/each
HASH> to repeatedly return the same order
d3175 3
a3177 4
As a side effect, calling L<C<keys>|/keys HASH> resets the internal
iterator of the HASH or ARRAY (see L<C<each>|/each HASH>).  In
particular, calling L<C<keys>|/keys HASH> in void context resets the
iterator with no other overhead.
d3181 2
a3182 2
    my @@keys = keys %ENV;
    my @@values = values %ENV;
d3189 1
a3189 1
    foreach my $key (sort(keys %ENV)) {
d3194 1
a3194 2
modifying them will not affect the original hash.  Compare
L<C<values>|/values HASH>.
d3196 2
a3197 3
To sort a hash by value, you'll need to use a
L<C<sort>|/sort SUBNAME LIST> function.  Here's a descending numeric
sort of a hash by its values:
d3199 1
a3199 1
    foreach my $key (sort { $hash{$b} <=> $hash{$a} } keys %hash) {
d3203 1
a3203 2
Used as an lvalue, L<C<keys>|/keys HASH> allows you to increase the
number of hash buckets
d3215 11
a3225 7
L<C<keys>|/keys HASH> in this way (but you needn't worry about doing
this by accident, as trying has no effect).  C<keys @@array> in an lvalue
context is a syntax error.

Starting with Perl 5.14, an experimental feature allowed
L<C<keys>|/keys HASH> to take a scalar expression. This experiment has
been deemed unsuccessful, and was removed as of Perl 5.24.
d3233 1
d3235 1
a3235 2
See also L<C<each>|/each HASH>, L<C<values>|/values HASH>, and
L<C<sort>|/sort SUBNAME LIST>.
d3249 1
a3249 1
    my $cnt = kill 'HUP', $child1, $child2;
d3258 2
a3259 2
C<$Config{sig_name}>, which is provided by the L<C<Config>|Config>
module.  See L<Config> for more details.
d3268 2
a3269 2
no signal is sent to the process, but L<C<kill>|/kill SIGNAL, LIST>
checks whether it's I<possible> to send a signal to it
d3286 2
a3287 3
On some platforms such as Windows where the L<fork(2)> system call is not
available, Perl can be built to emulate L<C<fork>|/fork> at the
interpreter level.
d3309 1
a3309 2
The L<C<last>|/last LABEL> command is like the C<break> statement in C
(as used in
d3315 1
a3315 1
L<C<continue>|/continue BLOCK> block, if any, is not executed:
d3322 3
a3324 4
L<C<last>|/last LABEL> cannot be used to exit a block that returns a
value such as C<eval {}>, C<sub {}>, or C<do {}>, and should not be used
to exit a L<C<grep>|/grep BLOCK LIST> or L<C<map>|/map BLOCK LIST>
operation.
d3327 2
a3328 2
that executes once.  Thus L<C<last>|/last LABEL> can be used to effect
an early exit out of such a block.
d3330 2
a3331 3
See also L<C<continue>|/continue BLOCK> for an illustration of how
L<C<last>|/last LABEL>, L<C<next>|/next LABEL>, and
L<C<redo>|/redo LABEL> work.
d3336 1
a3336 1
L<C<last>|/last LABEL>.
d3348 1
a3348 1
If EXPR is omitted, uses L<C<$_>|perlvar/$_>.
d3359 1
a3359 1
=item Otherwise, if C<use locale> for C<LC_CTYPE> is in effect:
d3361 1
a3361 1
Respects current C<LC_CTYPE> locale for code points < 256; and uses Unicode
d3375 2
a3376 4
a result that is above 255 (almost always the input character unchanged),
for all instances (and there aren't many) where the 255/256 boundary
would otherwise be crossed; and starting in v5.22, it raises a
L<locale|perldiag/Can't do %s("%s") on non-UTF-8 locale; resolved to "%s".> warning.
d3404 1
a3404 1
If EXPR is omitted, uses L<C<$_>|perlvar/$_>.
d3406 2
a3407 2
This function behaves the same way under various pragmas, such as in a locale,
as L<C<lc>|/lc EXPR> does.
d3417 2
a3418 2
omitted, returns the length of L<C<$_>|perlvar/$_>.  If EXPR is
undefined, returns L<C<undef>|/undef EXPR>.
d3424 1
a3424 2
Like all Perl character operations, L<C<length>|/length EXPR> normally
deals in logical
d3451 1
a3451 1
Does the same thing that the L<listen(2)> system call does.  Returns true if
d3460 3
a3462 3
You really probably want to be using L<C<my>|/my VARLIST> instead,
because L<C<local>|/local EXPR> isn't what most people think of as
"local".  See L<perlsub/"Private Variables via my()"> for details.
d3484 2
a3485 2
    #     0    1    2     3     4    5     6     7     8
    my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) =
d3516 2
a3517 2
If EXPR is omitted, L<C<localtime>|/localtime EXPR> uses the current
time (as returned by L<C<time>|/time>).
d3519 1
a3519 2
In scalar context, L<C<localtime>|/localtime EXPR> returns the
L<ctime(3)> value:
d3521 1
a3521 1
    my $now_string = localtime;  # e.g., "Thu Oct 13 04:54:34 1994"
d3523 6
a3528 7
The format of this scalar value is B<not> locale-dependent but built
into Perl.  For GMT instead of local time use the
L<C<gmtime>|/gmtime EXPR> builtin.  See also the
L<C<Time::Local>|Time::Local> module (for converting seconds, minutes,
hours, and such back to the integer value returned by L<C<time>|/time>),
and the L<POSIX> module's L<C<strftime>|POSIX/C<strftime>> and
L<C<mktime>|POSIX/C<mktime>> functions.
d3535 1
a3535 1
    my $now_string = strftime "%a %b %e %H:%M:%S %Y", localtime;
d3537 1
a3537 1
    my $now_string = strftime "%a %b %e %H:%M:%S %Y", gmtime;
d3539 1
a3539 1
Note that C<%a> and C<%b>, the short forms of the day of the week
d3543 2
a3544 2
by-name access mechanism to the L<C<gmtime>|/gmtime EXPR> and
L<C<localtime>|/localtime EXPR> functions, respectively.
d3562 1
a3562 2
L<C<lock>|/lock THING> is a "weak keyword"; this means that if you've
defined a function
d3575 1
a3575 1
returns the log of L<C<$_>|perlvar/$_>.  To get the
d3585 1
a3585 1
See also L<C<exp>|/exp EXPR> for the inverse operation.
d3598 5
a3602 6
Does the same thing as the L<C<stat>|/stat FILEHANDLE> function
(including setting the special C<_> filehandle) but stats a symbolic
link instead of the file the symbolic link points to.  If symbolic links
are unimplemented on your system, a normal L<C<stat>|/stat FILEHANDLE>
is done.  For much more detailed information, please see the
documentation for L<C<stat>|/stat FILEHANDLE>.
d3604 1
a3604 1
If EXPR is omitted, stats L<C<$_>|perlvar/$_>.
d3622 1
a3622 2
L<C<$_>|perlvar/$_> to each element) and returns the list value composed
of the
d3628 1
a3628 1
    my @@chars = map(chr, @@numbers);
d3650 1
a3650 1
    my %hash = map { get_a_key_for($_) => $_ } @@array;
d3654 1
a3654 1
    my %hash;
d3659 12
a3670 7
Note that L<C<$_>|perlvar/$_> is an alias to the list value, so it can
be used to modify the elements of the LIST.  While this is useful and
supported, it can cause bizarre results if the elements of LIST are not
variables.  Using a regular C<foreach> loop for this purpose would be
clearer in most cases.  See also L<C<grep>|/grep BLOCK LIST> for an
array composed of those items of the original list for which the BLOCK
or EXPR evaluates to true.
d3682 6
a3687 6
 my %hash = map {  "\L$_" => 1  } @@array # perl guesses EXPR. wrong
 my %hash = map { +"\L$_" => 1  } @@array # perl guesses BLOCK. right
 my %hash = map {; "\L$_" => 1  } @@array # this also works
 my %hash = map { ("\L$_" => 1) } @@array # as does this
 my %hash = map {  lc($_) => 1  } @@array # and this.
 my %hash = map +( lc($_) => 1 ), @@array # this is EXPR and works!
d3689 1
a3689 1
 my %hash = map  ( lc($_), 1 ),   @@array # evaluates to (1, @@array)
d3693 2
a3694 2
    my @@hashes = map +{ lc($_) => 1 }, @@array # EXPR, so needs
                                              # comma at end
d3708 2
a3709 3
specified by MASK (as modified by L<C<umask>|/umask EXPR>).  If it
succeeds it returns true; otherwise it returns false and sets
L<C<$!>|perlvar/$!> (errno).
d3711 1
a3711 1
to L<C<$_>|perlvar/$_> if omitted.
d3714 1
a3714 2
and let the user modify that with their L<C<umask>|/umask EXPR> than it
is to supply
d3717 2
a3718 2
kept private (mail files, for instance).  The documentation for
L<C<umask>|/umask EXPR> discusses the choice of MASK in more detail.
d3726 1
a3726 2
the L<C<make_path>|File::Path/make_path( $dir1, $dir2, .... )> function
of the L<File::Path> module.
d3733 1
a3733 1
Calls the System V IPC function L<msgctl(2)>.  You'll probably have to say
d3739 4
a3742 5
structure.  Returns like L<C<ioctl>|/ioctl FILEHANDLE,FUNCTION,SCALAR>:
the undefined value for error, C<"0 but true"> for zero, or the actual
return value otherwise.  See also L<perlipc/"SysV IPC"> and the
documentation for L<C<IPC::SysV>|IPC::SysV> and
L<C<IPC::Semaphore>|IPC::Semaphore>.
d3751 4
a3754 4
Calls the System V IPC function L<msgget(2)>.  Returns the message queue
id, or L<C<undef>|/undef EXPR> on error.  See also L<perlipc/"SysV IPC">
and the documentation for L<C<IPC::SysV>|IPC::SysV> and
L<C<IPC::Msg>|IPC::Msg>.
d3768 1
a3768 1
Taints the variable.  Returns true if successful, false
d3770 1
a3770 1
L<C<IPC::SysV>|IPC::SysV> and L<C<IPC::Msg>|IPC::Msg>.
d3784 2
a3785 2
false on error.  See also L<perlipc/"SysV IPC"> and the documentation
for L<C<IPC::SysV>|IPC::SysV> and L<C<IPC::Msg>|IPC::Msg>.
d3800 3
a3802 4
A L<C<my>|/my VARLIST> declares the listed variables to be local
(lexically) to the enclosing block, file, or L<C<eval>|/eval EXPR>.  If
more than one variable is listed, the list must be placed in
parentheses.
d3806 6
a3811 6
with L<C<use constant>|constant>, or L<C<__PACKAGE__>|/__PACKAGE__>.  It
is
currently bound to the use of the L<fields> pragma,
and attributes are handled using the L<attributes> pragma, or starting
from Perl 5.8.0 also via the L<Attribute::Handlers> module.  See
L<perlsub/"Private Variables via my()"> for details.
d3813 2
a3814 3
Note that with a parenthesised list, L<C<undef>|/undef EXPR> can be used
as a dummy placeholder, for example to skip assignment of initial
values:
d3827 2
a3828 2
The L<C<next>|/next LABEL> command is like the C<continue> statement in
C; it starts the next iteration of the loop:
d3835 1
a3835 2
Note that if there were a L<C<continue>|/continue BLOCK> block on the
above, it would get
d3841 3
a3843 4
L<C<next>|/next LABEL> cannot be used to exit a block which returns a
value such as C<eval {}>, C<sub {}>, or C<do {}>, and should not be used
to exit a L<C<grep>|/grep BLOCK LIST> or L<C<map>|/map BLOCK LIST>
operation.
d3846 1
a3846 2
that executes once.  Thus L<C<next>|/next LABEL> will exit such a block
early.
d3848 2
a3849 3
See also L<C<continue>|/continue BLOCK> for an illustration of how
L<C<last>|/last LABEL>, L<C<next>|/next LABEL>, and
L<C<redo>|/redo LABEL> work.
d3854 1
a3854 1
L<C<next>|/next LABEL>.
d3870 1
a3870 2
See the L<C<use>|/use Module VERSION LIST> function, of which
L<C<no>|/no MODULE VERSION LIST> is the opposite.
d3888 8
a3895 10
If EXPR is omitted, uses L<C<$_>|perlvar/$_>.   To go the other way
(produce a number in octal), use L<C<sprintf>|/sprintf FORMAT, LIST> or
L<C<printf>|/printf FILEHANDLE FORMAT, LIST>:

    my $dec_perms = (stat("filename"))[2] & 07777;
    my $oct_perm_str = sprintf "%o", $perms;

The L<C<oct>|/oct EXPR> function is commonly used when a string such as
C<644> needs
to be converted into a file mode, for example.  Although Perl
d3899 3
a3901 3
Leading white space is ignored without warning, as too are any trailing
non-digits, such as a decimal point (L<C<oct>|/oct EXPR> only handles
non-negative integers, not negative integers or floating point).
d3921 2
a3922 2
    open(my $fh, "<", "input.txt")
	or die "Can't open < input.txt: $!";
d3926 2
a3927 2
    open(my $fh, ">", "output.txt")
	or die "Can't open > output.txt: $!";
d3929 2
a3930 3
(The following is a comprehensive reference to
L<C<open>|/open FILEHANDLE,EXPR>: for a gentler introduction you may
consider L<perlopentut>.)
d3949 1
a3949 1
C<< +< >> is almost always preferred for read/write updates--the
d3954 1
a3954 1
modified by the process's L<C<umask>|/umask EXPR> value.
d3956 1
a3956 1
These various prefixes correspond to the L<fopen(3)> modes of C<r>,
d3962 2
a3963 2
is C<< < >>.  It is safe to use the two-argument form of
L<C<open>|/open FILEHANDLE,EXPR> if the filename argument is a known literal.
d3971 2
a3972 2
(You are not allowed to L<C<open>|/open FILEHANDLE,EXPR> to a command
that pipes both in I<and> out, but see L<IPC::Open2>, L<IPC::Open3>, and
d3979 3
a3981 3
L<C<open>|/open FILEHANDLE,EXPR> with more than three arguments for
non-pipe modes is not yet defined, but experimental "layers" may give
extra LIST arguments meaning.
d3983 1
a3983 1
In the two-argument (and one-argument) form, opening C<< <- >>
d3991 2
a3992 2
  open(my $fh, "<:encoding(UTF-8)", $filename)
    || die "Can't open UTF-8 encoded $filename: $!";
d3997 1
a3997 1
usually set by the L<open> pragma or the switch C<-CioD>) are ignored.
d4003 2
a4004 2
the L<C<open>|/open FILEHANDLE,EXPR> involved a pipe, the return value
happens to be the pid of the subprocess.
d4006 11
a4016 11
On some systems (in general, DOS- and Windows-based systems)
L<C<binmode>|/binmode FILEHANDLE, LAYER> is necessary when you're not
working with a text file.  For the sake of portability it is a good idea
always to use it when appropriate, and never to use it when it isn't
appropriate.  Also, people can set their I/O to be by default
UTF8-encoded Unicode, not bytes.

When opening a file, it's seldom a good idea to continue
if the request failed, so L<C<open>|/open FILEHANDLE,EXPR> is frequently
used with L<C<die>|/die LIST>.  Even if L<C<die>|/die LIST> won't do
what you want (say, in a CGI script,
d4019 1
a4019 1
the return value from opening a file.
d4022 1
a4022 2
If it is a lexically scoped variable declared with L<C<my>|/my VARLIST>,
that usually
d4033 1
a4033 1
       or die "Can't open < input.txt: $!";
d4046 1
a4046 1
declared with L<C<my>|/my VARLIST> or L<C<state>|/state VARLIST>.
d4049 1
a4049 1
argument being L<C<undef>|/undef EXPR>:
d4055 2
a4056 2
to the temporary file first.  You will need to
L<C<seek>|/seek FILEHANDLE,POSITION,WHENCE> to do the reading.
d4058 1
a4058 1
Perl is built using PerlIO by default.  Unless you've
d4062 1
a4062 1
    open(my $fh, ">", \$variable) || ..
d4070 4
a4073 1
See L<perliol> for detailed info on PerlIO.
d4075 2
a4076 1
General examples:
d4078 2
a4079 2
 open(my $log, ">>", "/usr/spool/news/twitlog");
 # if the open fails, output is discarded
d4081 2
a4082 2
 open(my $dbase, "+<", "dbase.mine")      # open for update
     or die "Can't open 'dbase.mine' for update: $!";
d4084 2
a4085 2
 open(my $dbase, "+<dbase.mine")          # ditto
     or die "Can't open 'dbase.mine' for update: $!";
d4087 2
a4088 3
 open(my $article_fh, "-|", "caesar <$article")  # decrypt
                                                 # article
     or die "Can't start caesar: $!";
d4090 18
a4107 2
 open(my $article_fh, "caesar <$article |")      # ditto
     or die "Can't start caesar: $!";
d4109 9
a4117 2
 open(my $out_fh, "|-", "sort >Tmp$$")    # $$ is our process id
     or die "Can't start sort: $!";
d4119 1
a4119 4
 # in-memory files
 open(my $memory, ">", \$var)
     or die "Can't open memory file: $!";
 print $memory "foo!\n";              # output will appear in $var
d4124 1
a4124 1
duped (as in L<dup(2)>) and opened.  You may use C<&> after C<< > >>,
d4155 2
a4156 2
or a filehandle, then Perl will do an equivalent of C's L<fdopen(3)> of
that file descriptor (and not call L<dup(2)>); this is more
d4160 1
a4160 1
    open(my $fh, "<&=", $fd)
d4164 1
a4164 1
    open(my $fh, "<&=$fd")
d4168 6
a4173 2
    # open for append, using the fileno of $oldfh
    open(my $fh, ">>&=", $oldfh)
d4177 5
a4181 6
descriptors, like for example locking using
L<C<flock>|/flock FILEHANDLE,OPERATION>.  If you do just
C<< open(my $A, ">>&", $B) >>, the filehandle C<$A> will not have the
same file descriptor as C<$B>, and therefore C<flock($A)> will not
C<flock($B)> nor vice versa.  But with C<< open(my $A, ">>&=", $B) >>,
the filehandles will share the same underlying system file descriptor.
d4184 2
a4185 2
L<fdopen(3)> to implement the C<=> functionality.  On many Unix systems,
L<fdopen(3)> fails when file descriptors exceed a certain value, typically 255.
d4188 3
a4190 3
You can see whether your Perl was built with PerlIO by running
C<perl -V:useperlio>.  If it says C<'define'>, you have PerlIO;
otherwise you don't.
d4193 3
a4195 4
with the one- or two-argument forms of
L<C<open>|/open FILEHANDLE,EXPR>), an implicit L<C<fork>|/fork> is done,
so L<C<open>|/open FILEHANDLE,EXPR> returns twice: in the parent process
it returns the pid
d4201 1
a4201 1
   my $child_pid = open(my $from_kid, "-|") // die "Can't fork: $!";
d4205 1
a4205 1
   my $child_pid = open(my $to_kid,   "|-") // die "Can't fork: $!";
d4207 1
a4207 1
followed by
d4211 1
a4211 1
	# either write $to_kid or else read $from_kid
d4218 1
a4218 1
    }
d4230 9
a4238 9
    open(my $fh, "|tr '[a-z]' '[A-Z]'");
    open(my $fh, "|-", "tr '[a-z]' '[A-Z]'");
    open(my $fh, "|-") || exec 'tr', '[a-z]', '[A-Z]';
    open(my $fh, "|-", "tr", '[a-z]', '[A-Z]');

    open(my $fh, "cat -n '$file'|");
    open(my $fh, "-|", "cat -n '$file'");
    open(my $fh, "-|") || exec "cat", "-n", $file;
    open(my $fh, "-|", "cat", "-n", $file);
d4242 2
a4243 2
your platform has a real L<C<fork>|/fork> (in other words, if your platform is
Unix, including Linux and MacOS X), you can use the list form.  You would
d4249 2
a4250 2
    open(my $fh, "|cat -n | expand -4 | lpr")
	|| die "Can't open pipeline to lpr: $!";
d4257 2
a4258 3
to set L<C<$E<verbar>>|perlvar/$E<verbar>> (C<$AUTOFLUSH> in L<English>)
or call the C<autoflush> method of L<C<IO::Handle>|IO::Handle/METHODS>
on any open handles.
d4262 1
a4262 1
of L<C<$^F>|perlvar/$^F>.  See L<perlvar/$^F>.
d4265 2
a4266 2
child to finish, then returns the status value in L<C<$?>|perlvar/$?> and
L<C<${^CHILD_ERROR_NATIVE}>|perlvar/${^CHILD_ERROR_NATIVE}>.
d4268 1
a4268 2
The filename passed to the one- and two-argument forms of
L<C<open>|/open FILEHANDLE,EXPR> will
d4275 1
a4275 1
    open(my $fh, $filename) or die "Can't open $filename: $!";
d4279 2
a4280 2
    open(my $fh, "<", $file)
	|| die "Can't open $file: $!";
d4285 2
a4286 2
    open(my $fh, "< $file\0")
	|| die "Can't open $file: $!";
d4290 1
a4290 1
of L<C<open>|/open FILEHANDLE,EXPR>:
d4292 1
a4292 1
    open(my $in, $ARGV[0]) || die "Can't open $ARGV[0]: $!";
d4297 4
a4300 2
    open(my $in, "<", $ARGV[0])
	|| die "Can't open $ARGV[0]: $!";
d4302 5
a4306 10
will have exactly the opposite restrictions. (However, some shells
support the syntax C<< perl your_program.pl <( rsh cat file ) >>, which
produces a filename that can be opened normally.)

If you want a "real" C L<open(2)>, then you should use the
L<C<sysopen>|/sysopen FILEHANDLE,FILENAME,MODE> function, which involves
no such magic (but uses different filemodes than Perl
L<C<open>|/open FILEHANDLE,EXPR>, which corresponds to C L<fopen(3)>).
This is another way to protect your filenames from interpretation.  For
example:
d4309 6
a4314 6
    sysopen(my $fh, $path, O_RDWR|O_CREAT|O_EXCL)
        or die "Can't open $path: $!";
    $fh->autoflush(1);
    print $fh "stuff $$\n";
    seek($fh, 0, 0);
    print "File contains: ", readline($fh);
d4316 1
a4316 2
See L<C<seek>|/seek FILEHANDLE,POSITION,WHENCE> for some details about
mixing reading and writing.
d4325 2
a4326 5
Opens a directory named EXPR for processing by
L<C<readdir>|/readdir DIRHANDLE>, L<C<telldir>|/telldir DIRHANDLE>,
L<C<seekdir>|/seekdir DIRHANDLE,POS>,
L<C<rewinddir>|/rewinddir DIRHANDLE>, and
L<C<closedir>|/closedir DIRHANDLE>.  Returns true if successful.
d4333 1
a4333 1
See the example at L<C<readdir>|/readdir DIRHANDLE>.
d4343 1
a4343 2
If EXPR is an empty string, returns 0.  If EXPR is omitted, uses
L<C<$_>|perlvar/$_>.
d4346 1
a4346 1
For the reverse, see L<C<chr>|/chr NUMBER>.
d4360 11
a4370 15
L<C<our>|/our VARLIST> makes a lexical alias to a package (i.e. global)
variable of the same name in the current package for use within the
current lexical scope.

L<C<our>|/our VARLIST> has the same scoping rules as
L<C<my>|/my VARLIST> or L<C<state>|/state VARLIST>, meaning that it is
only valid within a lexical scope.  Unlike L<C<my>|/my VARLIST> and
L<C<state>|/state VARLIST>, which both declare new (lexical) variables,
L<C<our>|/our VARLIST> only creates an alias to an existing variable: a
package variable of the same name.

This means that when C<use strict 'vars'> is in effect, L<C<our>|/our
VARLIST> lets you use a package variable without qualifying it with the
package name, but only within the lexical scope of the
L<C<our>|/our VARLIST> declaration.  This applies immediately--even
d4412 1
a4412 2
An L<C<our>|/our VARLIST> declaration declares an alias for a package
variable that will be visible
d4425 1
a4425 2
Multiple L<C<our>|/our VARLIST> declarations with the same name in the
same lexical
d4428 4
a4431 4
for them, just like multiple L<C<my>|/my VARLIST> declarations.  Unlike
a second L<C<my>|/my VARLIST> declaration, which will bind the name to a
fresh variable, a second L<C<our>|/our VARLIST> declaration in the same
package, in the same scope, is merely redundant.
d4445 2
a4446 2
An L<C<our>|/our VARLIST> declaration may also have a list of attributes
associated with it.
d4449 5
a4453 4
evolving.  TYPE is currently bound to the use of the L<fields> pragma,
and attributes are handled using the L<attributes> pragma, or, starting
from Perl 5.8.0, also via the L<Attribute::Handlers> module.  See
L<perlsub/"Private Variables via my()"> for details.
d4455 2
a4456 3
Note that with a parenthesised list, L<C<undef>|/undef EXPR> can be used
as a dummy placeholder, for example to skip assignment of initial
values:
d4460 2
a4461 3
L<C<our>|/our VARLIST> differs from L<C<use vars>|vars>, which allows
use of an unqualified name I<only> within the affected package, but
across scopes.
d4473 1
a4473 1
Perl be presented as a string that's 4 characters long.
d4526 1
a4526 2
          support those.  Raises an exception otherwise.
          Note that there are different long double formats.)
d4570 2
a4571 2
The C<< > >> and C<< < >> modifiers can also be used on C<()> groups
to force a particular byte-order on all components in that group,
d4598 1
a4598 1
=over
d4610 1
a4610 1
=over
d4612 1
a4612 1
=item *
d4616 1
a4616 1
=item *
d4620 1
a4620 1
=item *
d4624 1
a4624 1
=back
d4646 1
a4646 1
=over
d4666 1
a4666 1
to encode per line of output, with 0, 1 and 2 replaced by 45.  The repeat
d4703 1
a4703 1
A C<*> for the repeat count uses all characters of the input field.
d4711 1
a4711 1
For each such format, L<C<pack>|/pack TEMPLATE,LIST> generates 4 bits of result.
d4717 1
a4717 1
C<"A"> both generate the nybble C<0xA==10>.  Use only these specific hex
d4720 1
a4720 2
Starting from the beginning of the template to
L<C<pack>|/pack TEMPLATE,LIST>, each pair
d4733 1
a4733 2
L<C<unpack>|/unpack TEMPLATE,EXPR>, nybbles are converted to a string of
hexadecimal digits.
d4742 2
a4743 3
C<p> or C<P> is L<C<undef>|/undef EXPR>; similarly with
L<C<unpack>|/unpack TEMPLATE,EXPR>, where a null pointer unpacks into
L<C<undef>|/undef EXPR>.
d4758 1
a4758 2
For L<C<pack>|/pack TEMPLATE,LIST>, you write
I<length-item>C</>I<sequence-item>, and the
d4763 1
a4763 2
For L<C<pack>|/pack TEMPLATE,LIST>, I<sequence-item> may have a repeat
count, in which case
d4768 1
a4768 2
For L<C<unpack>|/unpack TEMPLATE,EXPR>, an internal stack of integer
arguments unpacked so far is
d4787 1
a4787 2
The I<length-item> is not returned explicitly from
L<C<unpack>|/unpack TEMPLATE,EXPR>.
d4803 1
a4803 1
    printf "format s is %d, s! is %d\n",
d4806 1
a4806 1
    printf "format l is %d, l! is %d\n",
d4823 1
a4823 1
or programmatically via the L<C<Config>|Config> module:
d4831 1
a4831 1
C<$Config{longlongsize}> is undefined on systems without
d4847 1
a4847 1
big-endian.  Alpha and MIPS can be either: Digital/Compaq uses (well, used)
a4860 2
These are called mid-endian, middle-endian, mixed-endian, or just weird.

d4863 1
a4863 1
   printf("%#02x ", $_) for unpack("W*", pack L=>0x12345678);
d4876 1
a4876 3
and C<"87654321"> are big-endian.  Systems with multiarchitecture binaries
will have C<"ffff">, signifying that static information doesn't work,
one must use runtime probing.
d4878 1
a4878 1
For portably packed integers, either use the formats C<n>, C<N>, C<v>,
a4883 13
Also floating point numbers have endianness.  Usually (but not always)
this agrees with the integer endianness.  Even though most platforms
these days use the IEEE 754 binary format, there are differences,
especially if the long doubles are involved.  You can see the
C<Config> variables C<doublekind> and C<longdblkind> (also C<doublesize>,
C<longdblsize>): the "kind" values are enums, unlike C<byteorder>.

Portability-wise the best option is probably to keep to the IEEE 754
64-bit doubles, and of agreed-upon endianness.  Another possibility
is the C<"%a">) format of L<C<printf>|/printf FILEHANDLE FORMAT, LIST>.

=item *

d4885 1
a4885 1
the C<p> and C<P> formats and C<()> groups, may all be followed by the
d4887 2
a4888 2
or little-endian byte-order.  These modifiers are especially useful
given how C<n>, C<N>, C<v>, and C<V> don't cover signed integers,
d4895 1
a4895 1
=item *
d4897 1
a4897 1
Exchanging signed integers between different platforms works only
d4901 1
a4901 1
=item *
d4907 1
a4907 1
=item *
d4917 1
a4917 1
=item *
d4941 1
a4941 1
all numeric calculation, converting from double into float and thence
d4948 1
a4948 1
the packed string is processed per character, and UTF-8 byte mode (C<U0> mode)
d4952 2
a4953 2
can always switch mode mid-format with an explicit
C<C0> or C<U0> in the format.  This mode remains in effect until the next
d4956 1
a4956 1
Using C<C0> to get Unicode characters while using C<U0> to get I<non>-Unicode
d4960 1
a4960 1
    $ perl -CS -E 'say "\x{3B1}\x{3C9}"' |
d4963 1
a4963 1
    $ perl -CS -E 'say "\x{3B1}\x{3C9}"' |
d4966 1
a4966 1
    $ perl -CS -E 'say "\x{3B1}\x{3C9}"' |
d4969 1
a4969 1
    $ perl -CS -E 'say "\x{3B1}\x{3C9}"' |
d4974 1
a4974 2
L<C<pack>|/pack TEMPLATE,LIST>/L<C<unpack>|/unpack TEMPLATE,EXPR> as a
substitute for the L<Encode> module.
d4979 2
a4980 3
enough C<"x">es while packing.  There is no way for
L<C<pack>|/pack TEMPLATE,LIST> and L<C<unpack>|/unpack TEMPLATE,EXPR>
to know where characters are going to or coming from, so they
d4986 1
a4986 2
take a repeat count either as postfix, or for
L<C<unpack>|/unpack TEMPLATE,EXPR>, also via the C</>
d4998 1
a4998 2
characters.  For example, to L<C<pack>|/pack TEMPLATE,LIST> or
L<C<unpack>|/unpack TEMPLATE,EXPR> a C structure like
d5002 1
a5002 1
	double d;
d5031 1
a5031 2
If TEMPLATE requires more arguments than L<C<pack>|/pack TEMPLATE,LIST>
is given, L<C<pack>|/pack TEMPLATE,LIST>
a5034 7
=item *

Attempting to pack the special floating point values C<Inf> and C<NaN>
(infinity, also in negative, and not-a-number) into packed integer values
(like C<"L">) is a fatal error.  The reason for this is that there simply
isn't any sensible mapping for these special values into integers.

d5107 1
a5107 2
The same template may generally also be used in
L<C<unpack>|/unpack TEMPLATE,EXPR>.
d5125 4
a5128 6
L<C<eval>|/eval EXPR>).  That is, the forms without a BLOCK are
operative through the end of the current scope, just like the
L<C<my>|/my VARLIST>, L<C<state>|/state VARLIST>, and
L<C<our>|/our VARLIST> operators.  All unqualified dynamic identifiers
in this scope will be in the given namespace, except where overridden by
another L<C<package>|/package NAMESPACE> declaration or
d5133 4
a5136 7
you've used L<C<local>|/local EXPR> on, but I<not> lexically-scoped
variables, which are created with L<C<my>|/my VARLIST>,
L<C<state>|/state VARLIST>, or L<C<our>|/our VARLIST>.  Typically it
would be the first declaration in a file included by
L<C<require>|/require VERSION> or L<C<use>|/use Module VERSION LIST>.
You can switch into a
package in more than one place, since this only determines which default
d5145 1
a5145 2
If VERSION is provided, L<C<package>|/package NAMESPACE> sets the
C<$VERSION> variable in the given
d5170 2
a5171 3
IO buffering, so you may need to set L<C<$E<verbar>>|perlvar/$E<verbar>>
to flush your WRITEHANDLE after each command, depending on the
application.
d5180 2
a5181 3
on all newly opened file descriptors whose
L<C<fileno>|/fileno FILEHANDLE>s are I<higher> than the current value of
L<C<$^F>|perlvar/$^F> (by default 2 for C<STDERR>).  See L<perlvar/$^F>.
d5186 2
d5195 15
a5209 10
Returns the undefined value if the array is empty, although this may
also happen at other times.  If ARRAY is omitted, pops the
L<C<@@ARGV>|perlvar/@@ARGV> array in the main program, but the
L<C<@@_>|perlvar/@@_> array in subroutines, just like
L<C<shift>|/shift ARRAY>.

Starting with Perl 5.14, an experimental feature allowed
L<C<pop>|/pop ARRAY> to take a
scalar expression. This experiment has been deemed unsuccessful, and was
removed as of Perl 5.24.
d5219 2
a5220 3
variable in question (L<C<$_>|perlvar/$_> is used when the variable is not
specified).  Note that 0 is a valid match offset.
L<C<undef>|/undef EXPR> indicates
d5224 6
a5229 7
L<C<pos>|/pos SCALAR> directly accesses the location used by the regexp
engine to store the offset, so assigning to L<C<pos>|/pos SCALAR> will
change that offset, and so will also influence the C<\G> zero-width
assertion in regular expressions.  Both of these effects take place for
the next match, so you can't affect the position with
L<C<pos>|/pos SCALAR> during the current match, such as in
C<(?{pos() = 5})> or C<s//pos() = 5/e>.
d5231 1
a5231 2
Setting L<C<pos>|/pos SCALAR> also resets the I<matched with
zero-length> flag, described
d5235 2
a5236 2
from L<C<pos>|/pos SCALAR> won't change either in this case.  See
L<perlre> and L<perlop>.
d5255 3
a5257 4
last selected (see L<C<select>|/select FILEHANDLE>) output handle.  If
LIST is omitted, prints L<C<$_>|perlvar/$_> to the currently selected
output handle.  To use FILEHANDLE alone to print the content of
L<C<$_>|perlvar/$_> to it, you must use a bareword filehandle like
d5261 5
a5265 7
The current value of L<C<$,>|perlvar/$,> (if any) is printed between
each LIST item.  The current value of L<C<$\>|perlvar/$\> (if any) is
printed after the entire LIST has been printed.  Because print takes a
LIST, anything in the LIST is evaluated in list context, including any
subroutines whose return lists you pass to
L<C<print>|/print FILEHANDLE LIST>.  Be careful not to follow the print
keyword with a left
d5293 14
a5306 16
Equivalent to C<print FILEHANDLE sprintf(FORMAT, LIST)>, except that
L<C<$\>|perlvar/$\> (the output record separator) is not appended.  The
FORMAT and the LIST are actually parsed as a single list.  The first
argument of the list will be interpreted as the
L<C<printf>|/printf FILEHANDLE FORMAT, LIST> format.  This means that
C<printf(@@_)> will use C<$_[0]> as the format.  See
L<sprintf|/sprintf FORMAT, LIST> for an explanation of the format
argument.  If C<use locale> (including C<use locale ':not_characters'>)
is in effect and L<C<POSIX::setlocale>|POSIX/C<setlocale>> has been
called, the character used for the decimal separator in formatted
floating-point numbers is affected by the C<LC_NUMERIC> locale setting.
See L<perllocale> and L<POSIX>.

For historical reasons, if you omit the list, L<C<$_>|perlvar/$_> is
used as the format;
to use FILEHANDLE without a list, you must use a bareword filehandle like
d5308 7
a5314 10
you want; if L<C<$_>|perlvar/$_> contains formatting codes, they will be
replaced with the empty string and a warning will be emitted if
L<warnings> are enabled.  Just use L<C<print>|/print FILEHANDLE LIST> if
you want to print the contents of L<C<$_>|perlvar/$_>.

Don't fall into the trap of using a
L<C<printf>|/printf FILEHANDLE FORMAT, LIST> when a simple
L<C<print>|/print FILEHANDLE LIST> would do.  The
L<C<print>|/print FILEHANDLE LIST> is more efficient and less error
prone.
a5318 2
=item prototype

d5321 1
a5321 2
Returns the prototype of a function as a string (or
L<C<undef>|/undef EXPR> if the
d5323 1
a5323 2
the function whose prototype you want to retrieve.  If FUNCTION is omitted,
L<C<$_>|perlvar/$_> is used.
d5328 1
a5328 2
(such as L<C<system>|/system LIST>), L<C<prototype>|/prototype FUNCTION>
returns L<C<undef>|/undef EXPR>, because the builtin
d5335 2
d5343 1
a5343 1
    for my $value (LIST) {
d5348 1
a5348 1
the completed L<C<push>|/push ARRAY,LIST>.
d5350 11
a5360 4
Starting with Perl 5.14, an experimental feature allowed
L<C<push>|/push ARRAY,LIST> to take a
scalar expression. This experiment has been deemed unsuccessful, and was
removed as of Perl 5.24.
d5401 1
a5401 1
If EXPR is omitted, uses L<C<$_>|perlvar/$_>.
d5427 2
a5428 2
Normally, when accepting literal string input from the user,
L<C<quotemeta>|/quotemeta EXPR> or C<\Q> must be used.
d5438 1
a5438 3
scope of a
L<C<use feature 'unicode_strings'>|feature/The 'unicode_strings' feature>,
which is to quote all
d5444 1
a5444 2
Within the scope of L<C<use locale>|locale>, all non-ASCII Latin1 code
points
d5497 1
a5497 2
L<C<srand>|/srand EXPR> unless L<C<srand>|/srand EXPR> has already been
called.  See also L<C<srand>|/srand EXPR>.
d5499 2
a5500 3
Apply L<C<int>|/int EXPR> to the value returned by L<C<rand>|/rand EXPR>
if you want random integers instead of random fractional numbers.  For
example,
d5510 1
a5510 1
B<L<C<rand>|/rand EXPR> is not cryptographically secure.  You should not rely
d5527 1
a5527 2
the latter case L<C<$!>|perlvar/$!> is also set).  SCALAR will be grown
or shrunk
d5539 1
a5539 1
L<fread(3)> library function.  To get a true L<read(2)> system call, see
d5545 3
a5547 4
been opened with the C<:utf8> I/O layer (see
L<C<open>|/open FILEHANDLE,EXPR>, and the L<open>
pragma), the I/O will operate on UTF8-encoded Unicode
characters, not bytes.  Similarly for the C<:encoding> layer:
d5555 1
a5555 2
Returns the next directory entry for a directory opened by
L<C<opendir>|/opendir DIRHANDLE,EXPR>.
d5560 3
a5562 4
If you're planning to filetest the return values out of a
L<C<readdir>|/readdir DIRHANDLE>, you'd better prepend the directory in
question.  Otherwise, because we didn't L<C<chdir>|/chdir EXPR> there,
it would have been testing the wrong file.
d5564 2
a5565 2
    opendir(my $dh, $some_dir) || die "Can't opendir $some_dir: $!";
    my @@dots = grep { /^\./ && -f "$some_dir/$_" } readdir($dh);
d5568 2
a5569 2
As of Perl 5.12 you can use a bare L<C<readdir>|/readdir DIRHANDLE> in a
C<while> loop, which will set L<C<$_>|perlvar/$_> on every iteration.
d5571 2
a5572 2
    opendir(my $dh, $some_dir) || die "Can't open $some_dir: $!";
    while (readdir $dh) {
d5594 8
a5601 10
subsequent call returns L<C<undef>|/undef EXPR>.  In list context, reads
until end-of-file is reached and returns a list of lines.  Note that the
notion of "line" used here is whatever you may have defined with
L<C<$E<sol>>|perlvar/$E<sol>> (or C<$INPUT_RECORD_SEPARATOR> in
L<English>).  See L<perlvar/"$/">.

When L<C<$E<sol>>|perlvar/$E<sol>> is set to L<C<undef>|/undef EXPR>,
when L<C<readline>|/readline EXPR> is in scalar context (i.e., file
slurp mode), and when an empty file is read, it returns C<''> the first
time, followed by L<C<undef>|/undef EXPR> subsequently.
d5607 2
a5608 2
    my $line = <STDIN>;
    my $line = readline(STDIN);    # same thing
d5610 5
a5614 6
If L<C<readline>|/readline EXPR> encounters an operating system error,
L<C<$!>|perlvar/$!> will be set with the corresponding error message.
It can be helpful to check L<C<$!>|perlvar/$!> when you are reading from
filehandles you don't trust, such as a tty or a socket.  The following
example uses the operator form of L<C<readline>|/readline EXPR> and dies
if the result is not defined.
d5617 1
a5617 1
        defined( $_ = readline $fh ) or die "readline failed: $!";
d5621 3
a5623 4
Note that you have can't handle L<C<readline>|/readline EXPR> errors
that way with the C<ARGV> filehandle.  In that case, you have to open
each element of L<C<@@ARGV>|perlvar/@@ARGV> yourself since
L<C<eof>|/eof FILEHANDLE> handles C<ARGV> differently.
d5629 1
a5629 1
            defined( $_ = readline $fh )
d5644 2
a5645 2
error, returns the undefined value and sets L<C<$!>|perlvar/$!> (errno).
If EXPR is omitted, uses L<C<$_>|perlvar/$_>.
d5660 1
a5660 2
(however you've defined lines with L<C<$E<sol>>|perlvar/$E<sol>> (or
C<$INPUT_RECORD_SEPARATOR> in L<English>)).
d5664 1
a5664 1
If EXPR is omitted, uses L<C<$_>|perlvar/$_>.
d5677 1
a5677 1
This call is actually implemented in terms of the L<recvfrom(2)> system call.
d5683 3
a5685 4
L<C<binmode>|/binmode FILEHANDLE, LAYER> to operate with the
C<:encoding(utf8)> I/O layer (see the L<open> pragma), the I/O will
operate on UTF8-encoded Unicode
characters, not bytes.  Similarly for the C<:encoding> layer: in that
d5697 2
a5698 3
The L<C<redo>|/redo LABEL> command restarts the loop block without
evaluating the conditional again.  The L<C<continue>|/continue BLOCK>
block, if any, is not executed.  If
d5702 1
a5702 1
LABEL>.  Programs that want to lie to themselves about what was just input
d5711 1
a5711 1
            my $front = $_;
d5722 3
a5724 4
L<C<redo>|/redo LABEL> cannot be used to retry a block that returns a
value such as C<eval {}>, C<sub {}>, or C<do {}>, and should not be used
to exit a L<C<grep>|/grep BLOCK LIST> or L<C<map>|/map BLOCK LIST>
operation.
d5727 2
a5728 2
that executes once.  Thus L<C<redo>|/redo LABEL> inside such a block
will effectively turn it into a looping construct.
d5730 2
a5731 3
See also L<C<continue>|/continue BLOCK> for an illustration of how
L<C<last>|/last LABEL>, L<C<next>|/next LABEL>, and
L<C<redo>|/redo LABEL> work.
d5736 1
a5736 1
L<C<redo>|/redo LABEL>.
d5746 2
a5747 3
string otherwise.  If EXPR is not specified, L<C<$_>|perlvar/$_> will be
used.  The value returned depends on the type of thing the reference is
a reference to.
d5763 1
a5763 1
You can think of L<C<ref>|/ref EXPR> as a C<typeof> operator.
d5774 2
a5775 4
L<C<pos>|/pos SCALAR> or
L<C<substr>|/substr EXPR,OFFSET,LENGTH,REPLACEMENT>.  C<VSTRING> is
returned if the reference points to a
L<version string|perldata/"Version Strings">.
d5778 1
a5778 1
resulting from L<C<qrE<sol>E<sol>>|/qrE<sol>STRINGE<sol>>.
d5783 7
a5789 10
C<Regexp> or C<IO>, or even C<HASH>.  Also, L<C<ref>|/ref EXPR> doesn't
take into account subclasses, like
L<C<isa>|UNIVERSAL/C<< $obj->isa( TYPE ) >>> does.

Instead, use L<C<blessed>|Scalar::Util/blessed> (in the L<Scalar::Util>
module) for boolean checks, L<C<isa>|UNIVERSAL/C<< $obj->isa( TYPE ) >>>
for specific class checks and L<C<reftype>|Scalar::Util/reftype> (also
from L<Scalar::Util>) for type checks.  (See L<perlobj> for details and
a L<C<blessed>|Scalar::Util/blessed>/L<C<isa>|UNIVERSAL/C<< $obj->isa( TYPE ) >>>
example.)
d5806 1
a5806 1
L<rename(2)> manpage or equivalent system documentation for details.
d5808 2
a5809 2
For a platform independent L<C<move>|File::Copy/move> function look at
the L<File::Copy> module.
d5823 1
a5823 1
specified by EXPR or by L<C<$_>|perlvar/$_> if EXPR is not supplied.
d5826 4
a5829 6
compared to L<C<$]>|perlvar/$]>, or a literal of the form v5.6.1, which
will be compared to L<C<$^V>|perlvar/$^V> (or C<$PERL_VERSION> in
L<English>).  An exception is raised if VERSION is greater than the
version of the current Perl interpreter.  Compare with
L<C<use>|/use Module VERSION LIST>, which can do a similar check at
compile time.
d5841 3
a5843 4
Otherwise, L<C<require>|/require VERSION> demands that a library file be
included if it hasn't already been included.  The file is included via
the do-FILE mechanism, which is essentially just a variety of
L<C<eval>|/eval EXPR> with the
d5902 2
a5903 2
If EXPR is a bareword, L<C<require>|/require VERSION> assumes a F<.pm>
extension and replaces C<::> with C</> in the filename for you,
d5911 2
a5912 2
The require function will actually look for the F<Foo/Bar.pm> file in the
directories specified in the L<C<@@INC>|perlvar/@@INC> array.
d5916 1
a5916 1
        my $class = 'Foo::Bar';
d5921 2
a5922 3
The require function will look for the F<Foo::Bar> file in the
L<C<@@INC>|perlvar/@@INC>  array and
will complain about not finding F<Foo::Bar> there.  In this case you can do:
d5926 6
a5931 6
Now that you understand how L<C<require>|/require VERSION> looks for
files with a bareword argument, there is a little extra functionality
going on behind the scenes.  Before L<C<require>|/require VERSION> looks
for a F<.pm> extension, it will first look for a similar filename with a
F<.pmc> extension.  If this file is found, it will be loaded in place of
any file ending in a F<.pm> extension.
d5934 2
a5935 2
directly into the L<C<@@INC>|perlvar/@@INC> array.  There are three forms
of hooks: subroutine references, array references, and blessed objects.
d5938 5
a5942 5
walks through L<C<@@INC>|perlvar/@@INC> and encounters a subroutine, this
subroutine gets called with two parameters, the first a reference to
itself, and the second the name of the file to be included (e.g.,
F<Foo/Bar.pm>).  The subroutine should return either nothing or else a
list of up to four values in the following order:
d5953 1
a5953 1
A filehandle, from which the file will be read.
d5959 3
a5961 4
call, writing the line into L<C<$_>|perlvar/$_> and returning 1, then
finally at end of file returning 0.  If there is a filehandle, then the
subroutine will be called to act as a simple source filter, with the
line as read in L<C<$_>|perlvar/$_>.
d5972 2
a5973 3
If an empty list, L<C<undef>|/undef EXPR>, or nothing that matches the
first 3 values above is returned, then L<C<require>|/require VERSION>
looks at the remaining elements of L<C<@@INC>|perlvar/@@INC>.
d5975 1
a5975 1
or reference to a typeglob, whether blessed or unblessed); tied filehandles
d5997 1
a5997 1
        my (undef, @@parameters) = @@$arrayref;
d6001 1
a6001 1
If the hook is an object, it must provide an C<INC> method that will be
d6017 1
a6017 1
These hooks are also permitted to set the L<C<%INC>|perlvar/%INC> entry
d6020 1
a6020 2
For a yet-more-powerful import facility, see
L<C<use>|/use Module VERSION LIST> and L<perlmod>.
d6029 2
a6030 3
Generally used in a L<C<continue>|/continue BLOCK> block at the end of a
loop to clear variables and reset C<m?pattern?> searches so that they
work again.  The
d6034 1
a6034 1
omitted, one-match searches (C<m?pattern?>) are reset to match again.
d6040 1
a6040 1
    reset;          # just reset m?one-time? searches
d6043 4
a6046 5
L<C<@@ARGV>|perlvar/@@ARGV> and L<C<@@INC>|perlvar/@@INC> arrays and your
L<C<%ENV>|perlvar/%ENV> hash.
Resets only package variables; lexical variables are unaffected, but
they clean themselves up on scope exit anyway, so you'll probably want
to use them instead.  See L<C<my>|/my VARLIST>.
d6055 1
a6055 4
Returns from a subroutine, L<C<eval>|/eval EXPR>,
L<C<do FILE>|/do EXPR>, L<C<sort>|/sort SUBNAME LIST> block or regex
eval block (but not a L<C<grep>|/grep BLOCK LIST> or
L<C<map>|/map BLOCK LIST> block) with the value
d6058 1
a6058 2
may vary from one execution to the next (see
L<C<wantarray>|/wantarray>).  If no EXPR
d6062 2
a6063 3
(In the absence of an explicit L<C<return>|/return EXPR>, a subroutine,
L<C<eval>|/eval EXPR>,
or L<C<do FILE>|/do EXPR> automatically returns the value of the last expression
d6068 1
a6068 1
cause C<"bar"> to be part of the argument to L<C<return>|/return EXPR>.
d6084 1
a6084 2
Used without arguments in scalar context, L<C<reverse>|/reverse LIST>
reverses L<C<$_>|perlvar/$_>.
d6100 1
a6100 1
    my %by_name = reverse %by_address;  # Invert the hash
d6108 1
a6108 1
L<C<readdir>|/readdir DIRHANDLE> routine on DIRHANDLE.
d6119 1
a6119 2
Works just like L<C<index>|/index STR,SUBSTR,POSITION> except that it
returns the position of the I<last>
d6132 1
a6132 2
sets L<C<$!>|perlvar/$!> (errno).  If FILENAME is omitted, uses
L<C<$_>|perlvar/$_>.
d6135 1
a6135 2
the L<C<rmtree>|File::Path/rmtree( $dir )> function of the L<File::Path>
module.
d6154 9
a6162 11
Just like L<C<print>|/print FILEHANDLE LIST>, but implicitly appends a
newline.  C<say LIST> is simply an abbreviation for
C<{ local $\ = "\n"; print LIST }>.  To use FILEHANDLE without a LIST to
print the contents of L<C<$_>|perlvar/$_> to it, you must use a bareword
filehandle like C<FH>, not an indirect one like C<$fh>.

L<C<say>|/say FILEHANDLE LIST> is available only if the
L<C<"say"> feature|feature/The 'say' feature> is enabled or if it is
prefixed with C<CORE::>.  The
L<C<"say"> feature|feature/The 'say' feature> is enabled automatically
with a C<use v5.10> (or higher) declaration in the current scope.
d6172 1
a6172 1
    my @@counts = ( scalar @@a, scalar @@b, scalar @@c );
d6180 1
a6180 2
Because L<C<scalar>|/scalar EXPR> is a unary operator, if you
accidentally use a
d6187 1
a6187 1
    print uc(scalar(foo(), $bar)), $baz;
d6191 2
a6192 2
    foo();
    print(uc($bar), $baz);
d6194 1
a6194 2
See L<perlop> for more details on unary operators and the comma operator,
and L<perldata> for details on evaluating a hash in scalar contex.
d6201 1
a6201 1
Sets FILEHANDLE's position, just like the L<fseek(3)> call of C C<stdio>.
d6213 6
a6218 11
layer), L<C<tell>|/tell FILEHANDLE> will return byte offsets, not
character offsets (because implementing that would render
L<C<seek>|/seek FILEHANDLE,POSITION,WHENCE> and
L<C<tell>|/tell FILEHANDLE> rather slow).

If you want to position the file for
L<C<sysread>|/sysread FILEHANDLE,SCALAR,LENGTH,OFFSET> or
L<C<syswrite>|/syswrite FILEHANDLE,SCALAR,LENGTH,OFFSET>, don't use
L<C<seek>|/seek FILEHANDLE,POSITION,WHENCE>, because buffering makes its
effect on the file's read-write position unpredictable and non-portable.
Use L<C<sysseek>|/sysseek FILEHANDLE,POSITION,WHENCE> instead.
d6222 1
a6222 1
things, this may have the effect of calling stdio's L<clearerr(3)>.
d6225 1
a6225 1
    seek($fh, 0, 1);
d6229 1
a6229 2
dummy L<C<seek>|/seek FILEHANDLE,POSITION,WHENCE> to reset things.  The
L<C<seek>|/seek FILEHANDLE,POSITION,WHENCE> doesn't change the position,
d6231 1
a6231 1
next C<readline FILE> makes Perl try again to read something.  (We hope.)
d6237 2
a6238 2
        for ($curpos = tell($fh); $_ = readline($fh);
             $curpos = tell($fh)) {
d6242 1
a6242 1
        seek($fh, $curpos, 0);
d6250 4
a6253 5
Sets the current position for the L<C<readdir>|/readdir DIRHANDLE>
routine on DIRHANDLE.  POS must be a value returned by
L<C<telldir>|/telldir DIRHANDLE>.  L<C<seekdir>|/seekdir DIRHANDLE,POS>
also has the same caveats about possible directory compaction as the
corresponding system library routine.
d6264 1
a6264 2
effects: first, a L<C<write>|/write FILEHANDLE> or a L<C<print>|/print
FILEHANDLE LIST> without a filehandle
d6266 1
a6266 1
output will refer to this output channel.
d6279 1
a6279 1
    my $oldfh = select(STDERR); $| = 1; select($oldfh);
d6284 1
a6286 3
(Prior to Perl version 5.14, you have to C<use IO::Handle;> explicitly
first.)

d6292 2
a6293 3
This calls the L<select(2)> syscall with the bit masks specified, which
can be constructed using L<C<fileno>|/fileno FILEHANDLE> and
L<C<vec>|/vec EXPR,OFFSET,BITS>, along these lines:
d6295 1
a6295 1
    my $rin = my $win = my $ein = '';
d6311 1
a6311 1
    my $rin = fhbits(\*STDIN, $tty, $mysock);
d6315 2
a6316 3
 my ($nfound, $timeleft) =
   select(my $rout = $rin, my $wout = $win, my $eout = $ein,
                                                          $timeout);
d6320 1
a6320 2
 my $nfound =
   select(my $rout = $rin, my $wout = $win, my $eout = $ein, undef);
d6322 2
a6323 3
Most systems do not bother to return anything useful in C<$timeleft>, so
calling L<C<select>|/select RBITS,WBITS,EBITS,TIMEOUT> in scalar context
just returns C<$nfound>.
d6325 1
a6325 2
Any of the bit masks can also be L<C<undef>|/undef EXPR>.  The timeout,
if specified, is
d6327 2
a6328 2
capable of returning the C<$timeleft>.  If not, they always return
C<$timeleft> equal to the supplied C<$timeout>.
d6334 18
a6351 25
Note that whether L<C<select>|/select RBITS,WBITS,EBITS,TIMEOUT> gets
restarted after signals (say, SIGALRM) is implementation-dependent.  See
also L<perlport> for notes on the portability of
L<C<select>|/select RBITS,WBITS,EBITS,TIMEOUT>.

On error, L<C<select>|/select RBITS,WBITS,EBITS,TIMEOUT> behaves just
like L<select(2)>: it returns C<-1> and sets L<C<$!>|perlvar/$!>.

On some Unixes, L<select(2)> may report a socket file descriptor as
"ready for reading" even when no data is available, and thus any
subsequent L<C<read>|/read FILEHANDLE,SCALAR,LENGTH,OFFSET> would block.
This can be avoided if you always use C<O_NONBLOCK> on the socket.  See
L<select(2)> and L<fcntl(2)> for further details.

The standard L<C<IO::Select>|IO::Select> module provides a
user-friendlier interface to
L<C<select>|/select RBITS,WBITS,EBITS,TIMEOUT>, mostly because it does
all the bit-mask work for you.

B<WARNING>: One should not attempt to mix buffered I/O (like
L<C<read>|/read FILEHANDLE,SCALAR,LENGTH,OFFSET> or
L<C<readline>|/readline EXPR>) with
L<C<select>|/select RBITS,WBITS,EBITS,TIMEOUT>, except as permitted by
POSIX, and even then only on POSIX systems.  You have to use
L<C<sysread>|/sysread FILEHANDLE,SCALAR,LENGTH,OFFSET> instead.
d6360 1
a6360 1
Calls the System V IPC function L<semctl(2)>.  You'll probably have to say
d6366 1
a6366 2
semid_ds structure or semaphore value array.  Returns like
L<C<ioctl>|/ioctl FILEHANDLE,FUNCTION,SCALAR>:
d6370 2
a6371 2
See also L<perlipc/"SysV IPC"> and the documentation for
L<C<IPC::SysV>|IPC::SysV> and L<C<IPC::Semaphore>|IPC::Semaphore>.
d6380 1
a6380 1
Calls the System V IPC function L<semget(2)>.  Returns the semaphore id, or
d6382 2
a6383 2
L<perlipc/"SysV IPC"> and the documentation for
L<C<IPC::SysV>|IPC::SysV> and L<C<IPC::Semaphore>|IPC::Semaphore>.
d6392 1
a6392 1
Calls the System V IPC function L<semop(2)> for semaphore operations
d6395 1
a6395 1
C<pack("s!3", $semnum, $semop, $semflag)>.  The length of OPSTRING
d6400 1
a6400 1
    my $semop = pack("s!3", $semnum, -1, 0);
d6404 2
a6405 2
L<perlipc/"SysV IPC"> and the documentation for
L<C<IPC::SysV>|IPC::SysV> and L<C<IPC::Semaphore>|IPC::Semaphore>.
d6419 2
a6420 2
case it does a L<sendto(2)> syscall.  Returns the number of characters sent,
or the undefined value on error.  The L<sendmsg(2)> syscall is currently
d6426 2
a6427 3
L<C<binmode>|/binmode FILEHANDLE, LAYER> to operate with the
C<:encoding(utf8)> I/O layer (see L<C<open>|/open FILEHANDLE,EXPR>, or
the L<open> pragma), the I/O will operate on UTF-8
d6429 1
a6429 1
layer: in that case pretty much any characters can be sent.
d6438 4
a6441 5
implement POSIX L<setpgid(2)> or BSD L<setpgrp(2)>.  If the arguments
are omitted, it defaults to C<0,0>.  Note that the BSD 4.2 version of
L<C<setpgrp>|/setpgrp PID,PGRP> does not accept any arguments, so only
C<setpgrp(0,0)> is portable.  See also
L<C<POSIX::setsid()>|POSIX/C<setsid>>.
d6451 2
a6452 2
(See L<setpriority(2)>.)  Raises an exception when used on a machine
that doesn't implement L<setpriority(2)>.
d6461 2
a6462 3
Sets the socket option requested.  Returns L<C<undef>|/undef EXPR> on
error.  Use integer constants provided by the L<C<Socket>|Socket> module
for
d6477 2
d6486 2
a6487 3
L<C<@@_>|perlvar/@@_> array within the lexical scope of subroutines and
formats, and the L<C<@@ARGV>|perlvar/@@ARGV> array outside a subroutine
and also within the lexical scopes
d6491 15
a6505 10
Starting with Perl 5.14, an experimental feature allowed
L<C<shift>|/shift ARRAY> to take a
scalar expression. This experiment has been deemed unsuccessful, and was
removed as of Perl 5.24.

See also L<C<unshift>|/unshift ARRAY,LIST>, L<C<push>|/push ARRAY,LIST>,
and L<C<pop>|/pop ARRAY>.  L<C<shift>|/shift ARRAY> and
L<C<unshift>|/unshift ARRAY,LIST> do the same thing to the left end of
an array that L<C<pop>|/pop ARRAY> and L<C<push>|/push ARRAY,LIST> do to
the right end.
d6518 3
a6520 4
structure.  Returns like ioctl: L<C<undef>|/undef EXPR> for error; "C<0>
but true" for zero; and the actual return value otherwise.
See also L<perlipc/"SysV IPC"> and the documentation for
L<C<IPC::SysV>|IPC::SysV>.
d6530 2
a6531 3
segment id, or L<C<undef>|/undef EXPR> on error.
See also L<perlipc/"SysV IPC"> and the documentation for
L<C<IPC::SysV>|IPC::SysV>.
d6551 2
a6552 4
L<C<shmread>|/shmread ID,VAR,POS,SIZE> taints the variable.  See also
L<perlipc/"SysV IPC"> and the documentation for
L<C<IPC::SysV>|IPC::SysV> and the L<C<IPC::Shareable>|IPC::Shareable>
module from CPAN.
d6564 3
a6566 3
    shutdown($socket, 0);    # I/we have stopped reading data
    shutdown($socket, 1);    # I/we have stopped writing data
    shutdown($socket, 2);    # I/we have stopped using this socket
d6574 1
a6574 1
Returns C<1> for success; on error, returns L<C<undef>|/undef EXPR> if
d6576 1
a6576 1
L<C<$!>|perlvar/$!> for any other failure.
d6586 1
a6586 1
returns sine of L<C<$_>|perlvar/$_>.
d6600 2
a6601 2
Causes the script to sleep for (integer) EXPR seconds, or forever if no
argument is given.  Returns the integer number of seconds actually slept.
d6606 1
a6606 1
        local $SIG{ALRM} = sub { die "Alarm!\n" };
d6611 2
a6612 3
You probably cannot mix L<C<alarm>|/alarm SECONDS> and
L<C<sleep>|/sleep EXPR> calls, because L<C<sleep>|/sleep EXPR> is often
implemented using L<C<alarm>|/alarm SECONDS>.
d6620 6
a6625 8
For delays of finer granularity than one second, the L<Time::HiRes>
module (from CPAN, and starting from Perl 5.8 part of the standard
distribution) provides L<C<usleep>|Time::HiRes/usleep ( $useconds )>.
You may also use Perl's four-argument
version of L<C<select>|/select RBITS,WBITS,EBITS,TIMEOUT> leaving the
first three arguments undefined, or you might be able to use the
L<C<syscall>|/syscall NUMBER, LIST> interface to access L<setitimer(2)>
if your system supports it.  See L<perlfaq8> for details.
d6627 1
a6627 1
See also the L<POSIX> module's L<C<pause>|POSIX/C<pause>> function.
d6642 1
a6642 1
value of L<C<$^F>|perlvar/$^F>.  See L<perlvar/$^F>.
d6656 1
a6656 1
of L<C<$^F>|perlvar/$^F>.  See L<perlvar/$^F>.
d6658 2
a6659 3
Some systems define L<C<pipe>|/pipe READHANDLE,WRITEHANDLE> in terms of
L<C<socketpair>|/socketpair SOCKET1,SOCKET2,DOMAIN,TYPE,PROTOCOL>, in
which a call to C<pipe($rdr, $wtr)> is essentially:
d6662 3
a6664 3
    socketpair(my $rdr, my $wtr, AF_UNIX, SOCK_STREAM, PF_UNSPEC);
    shutdown($rdr, 1);        # no more writing for reader
    shutdown($wtr, 0);        # no more reading for writer
d6682 1
a6682 2
In scalar context, the behaviour of L<C<sort>|/sort SUBNAME LIST> is
undefined.
d6684 1
a6684 2
If SUBNAME or BLOCK is omitted, L<C<sort>|/sort SUBNAME LIST>s in
standard string comparison
d6687 1
a6687 1
depending on how the elements of the list are to be ordered.  (The
d6695 9
a6703 10
passed by reference in L<C<@@_>|perlvar/@@_>, as for a normal subroutine.
This is slower than unprototyped subroutines, where the elements to be
compared are passed into the subroutine as the package global variables
C<$a> and C<$b> (see example below).  Note that in the latter case, it
is usually highly counter-productive to declare C<$a> and C<$b> as
lexicals.

If the subroutine is an XSUB, the elements to be compared are pushed on
to the stack, the way arguments are usually passed to XSUBs.  C<$a> and
C<$b> are not set.
d6709 1
a6709 2
loop control operators described in L<perlsyn> or with
L<C<goto>|/goto LABEL>.
d6711 2
a6712 2
When L<C<use locale>|locale> (but not C<use locale ':not_characters'>)
is in effect, C<sort LIST> sorts LIST according to the
d6715 3
a6717 5
L<C<sort>|/sort SUBNAME LIST> returns aliases into the original list,
much as a for loop's index variable aliases the list elements.  That is,
modifying an element of a list returned by L<C<sort>|/sort SUBNAME LIST>
(for example, in a C<foreach>, L<C<map>|/map BLOCK LIST> or
L<C<grep>|/grep BLOCK LIST>)
d6722 1
a6722 1
That algorithm was not stable and I<could> go quadratic.  (A I<stable> sort
d6729 1
a6729 1
the original quicksort was faster.  5.8 has a L<sort> pragma for
d6733 1
a6733 1
independent ways quite probably will.
d6738 1
a6738 1
    my @@articles = sort @@files;
d6741 1
a6741 1
    my @@articles = sort {$a cmp $b} @@files;
d6744 1
a6744 1
    my @@articles = sort {fc($a) cmp fc($b)} @@files;
d6747 1
a6747 1
    my @@articles = sort {$b cmp $a} @@files;
d6750 1
a6750 1
    my @@articles = sort {$a <=> $b} @@files;
d6753 1
a6753 1
    my @@articles = sort {$b <=> $a} @@files;
d6757 1
a6757 1
    my @@eldest = sort { $age{$b} <=> $age{$a} } keys %age;
d6763 1
a6763 1
    my @@sortedclass = sort byage @@class;
d6766 2
a6767 2
    my @@harry  = qw(dog cat x Cain Abel);
    my @@george = qw(gone chased yz Punished Axed);
d6788 1
a6788 1
    my (@@nums, @@caps);
d6802 1
a6802 1
    my @@new = map { $_->[0] }
d6810 1
a6810 1
    package Other;
d6812 1
a6812 1
                                             # not set here
d6814 1
a6814 1
    my @@new = sort Other::backwards @@old;
d6818 1
a6818 1
    my @@new = sort { substr($a, 3, 5) cmp substr($b, 3, 5) } @@old;
d6822 1
a6822 1
    my @@new = sort { substr($a, 3, 5) cmp substr($b, 3, 5) } @@old;
d6828 4
a6831 4
    my @@contact = sort { $a cmp $b } find_records @@key;
    my @@contact = sort +find_records(@@key);
    my @@contact = sort &find_records(@@key);
    my @@contact = sort(find_records(@@key));
d6833 1
a6833 1
If instead you want to sort the array C<@@key> with the comparison routine
d6836 4
a6839 4
    my @@contact = sort { find_records() } @@key;
    my @@contact = sort find_records(@@key);
    my @@contact = sort(find_records @@key);
    my @@contact = sort(find_records (@@key));
d6841 2
a6842 2
You I<must not> declare C<$a>
and C<$b> as lexicals.  They are package globals.  That means
d6845 1
a6845 1
    my @@articles = sort {$b <=> $a} @@files;
d6850 1
a6850 1
    my @@articles = sort {$FooPack::b <=> $FooPack::a} @@files;
d6857 2
a6858 2
Because C<< <=> >> returns L<C<undef>|/undef EXPR> when either operand
is C<NaN> (not-a-number), be careful when sorting with a
d6863 1
a6863 1
    my @@result = sort { $a <=> $b } grep { $_ == $_ } @@input;
d6865 1
a6865 1
=item splice ARRAY,OFFSET,LENGTH,LIST
d6868 1
a6868 1
=item splice ARRAY,OFFSET,LENGTH
d6870 1
a6870 1
=item splice ARRAY,OFFSET
d6872 1
a6872 1
=item splice ARRAY
d6879 1
a6879 2
returns the last element removed, or L<C<undef>|/undef EXPR> if no
elements are
d6897 1
a6897 2
L<C<splice>|/splice ARRAY,OFFSET,LENGTH,LIST> can be used, for example,
to implement n-ary queue processing:
d6912 11
a6922 4
Starting with Perl 5.14, an experimental feature allowed
L<C<splice>|/splice ARRAY,OFFSET,LENGTH,LIST> to take a
scalar expression. This experiment has been deemed unsuccessful, and was
removed as of Perl 5.24.
d6938 1
a6938 1
If only PATTERN is given, EXPR defaults to L<C<$_>|perlvar/$_>.
d6952 1
a6952 1
    print join(':', split(/b/, 'abc')), "\n";
d6954 1
a6954 1
uses the C<b> in C<'abc'> as a separator to produce the output C<a:c>.
d6957 1
a6957 1
    print join(':', split(//, 'abc')), "\n";
d6960 1
a6960 1
C<a:b:c>; thus, the empty string may be used to split EXPR into a
d6963 2
a6964 4
As a special case for L<C<split>|/split E<sol>PATTERNE<sol>,EXPR,LIMIT>,
the empty pattern given in
L<match operator|perlop/"m/PATTERN/msixpodualngc"> syntax (C<//>)
specifically matches the empty string, which is contrary to its usual
d6971 3
a6973 5
As another special case,
L<C<split>|/split E<sol>PATTERNE<sol>,EXPR,LIMIT> emulates the default
behavior of the
command line tool B<awk> when the PATTERN is either omitted or a
string composed of a single space character (such as S<C<' '>> or
d6982 2
a6983 2
pattern argument to split; in Perl 5.18.0 and later this special case is
triggered by any expression which evaluates to the simple string S<C<" ">>.
d6997 1
a6997 1
produces the output C<abc>, and this:
d7001 1
a7001 1
produces the output C<a:bc>, and each of these:
d7006 1
a7006 1
produces the output C<a:b:c>.
d7017 1
a7017 1
    print join(':', split(/,/, 'a,b,c,,,')), "\n";
d7019 1
a7019 1
produces the output C<a:b:c>, but the following:
d7021 1
a7021 1
    print join(':', split(/,/, 'a,b,c,,,', -1)), "\n";
d7023 1
a7023 1
produces the output C<a:b:c:::>.
d7031 1
a7031 1
    my ($login, $passwd) = split(/:/);
d7041 1
a7041 1
produces the output C<:abc>.  However, a zero-width match at the
d7046 1
a7046 1
produces the output S<C< :a:b:c>> (rather than S<C<: :a:b:c>>).
d7055 1
a7055 1
produces the output S<C< :a:b:c:>>.
d7062 1
a7062 2
match, then it captures the L<C<undef>|/undef EXPR> value instead of a
substring.  Also,
d7089 4
a7092 5
Returns a string formatted by the usual
L<C<printf>|/printf FILEHANDLE FORMAT, LIST> conventions of the C
library function L<C<sprintf>|/sprintf FORMAT, LIST>.  See below for
more details and see L<sprintf(3)> or L<printf(3)> on your system for an
explanation of the general principles.
d7097 1
a7097 1
        my $result = sprintf("%08d", $number);
d7100 1
a7100 1
        my $rounded = sprintf("%.3f", $number);
d7102 4
a7105 5
Perl does its own L<C<sprintf>|/sprintf FORMAT, LIST> formatting: it
emulates the C
function L<sprintf(3)>, but doesn't use it except for floating-point
numbers, and even then only standard modifiers are allowed.
Non-standard extensions in your local L<sprintf(3)> are
d7108 2
a7109 3
Unlike L<C<printf>|/printf FILEHANDLE FORMAT, LIST>,
L<C<sprintf>|/sprintf FORMAT, LIST> does not do what you probably mean
when you pass it an array as your first argument.
d7115 1
a7115 2
Perl's L<C<sprintf>|/sprintf FORMAT, LIST> permits the following
universally-known conversions:
a7137 2
   %a    hexadecimal floating point
   %A    like %a, but using upper-case letters
d7152 1
a7152 3
99th may be either "1.23e99" or "1.23e099".  Similarly for C<%a> and C<%A>:
the exponent or the hexadecimal digits may float: especially the
"long doubles" Perl configuration option may cause surprises.
a7183 2
  printf '<% d>',   0;   # prints "< 0>"
  printf '<% d>', -12;   # prints "<-12>"
a7184 2
  printf '<%+d>',   0;   # prints "<+0>"
  printf '<%+d>', -12;   # prints "<-12>"
d7195 1
a7195 1
the space is ignored.
d7263 1
a7263 1
including those prior to the decimal point and those after it; for
d7299 1
a7299 2
You can also get the precision from the next argument using C<.*>, or from a
specified argument (e.g., with C<.*2$>):
a7303 4
  printf '<%.*2$x>', 1, 6;  # prints "<000001>"

  printf '<%6.*2$x>', 1, 4; # prints "<  0001>"

d7316 7
d7351 2
a7352 2
L<C<printf>|warnings> warning class is issued on an unsupported
conversion flag.  Should you instead prefer an exception, do this:
d7398 1
a7398 2
Normally, L<C<sprintf>|/sprintf FORMAT, LIST> takes the next unused
argument as the value to
d7422 4
a7425 5
 printf "%2\$d %d\n",      12, 34;     # will print "34 12\n"
 printf "%2\$d %d %d\n",   12, 34;     # will print "34 12 34\n"
 printf "%3\$d %d %d\n",   12, 34, 56; # will print "56 12 34\n"
 printf "%2\$*3\$d %d\n",  12, 34,  3; # will print " 34 12\n"
 printf "%*1\$.*f\n",       4,  5, 10; # will print "5.0000\n"
d7429 2
a7430 3
If L<C<use locale>|locale> (including C<use locale ':not_characters'>)
is in effect and L<C<POSIX::setlocale>|POSIX/C<setlocale>> has been
called,
d7432 1
a7432 1
numbers is affected by the C<LC_NUMERIC> locale.  See L<perllocale>
d7443 2
a7444 2
L<C<$_>|perlvar/$_>.  Works only for non-negative operands unless you've
loaded the L<C<Math::Complex>|Math::Complex> module.
d7456 1
a7456 2
Sets and returns the random number seed for the L<C<rand>|/rand EXPR>
operator.
d7458 3
a7460 4
The point of the function is to "seed" the L<C<rand>|/rand EXPR>
function so that L<C<rand>|/rand EXPR> can produce a different sequence
each time you run your program.  When called with a parameter,
L<C<srand>|/srand EXPR> uses that for the seed; otherwise it
d7467 8
a7474 9
If L<C<srand>|/srand EXPR> is not called explicitly, it is called
implicitly without a parameter at the first use of the
L<C<rand>|/rand EXPR> operator.  However, there are a few situations
where programs are likely to want to call L<C<srand>|/srand EXPR>.  One
is for generating predictable results, generally for testing or
debugging.  There, you use C<srand($seed)>, with the same C<$seed> each
time.  Another case is that you may want to call L<C<srand>|/srand EXPR>
after a L<C<fork>|/fork> to avoid child processes sharing the same seed
value as the parent (and consequently each other).
d7479 1
a7479 1
L<C<srand>|/srand EXPR> again actually I<loses> randomness.
d7481 1
a7481 2
Most implementations of L<C<srand>|/srand EXPR> take an integer and will
silently
d7484 1
a7484 1
L<C<srand>|/srand EXPR> an integer.
d7491 1
a7491 1
B<L<C<rand>|/rand EXPR> is not cryptographically secure.  You should not rely
d7510 2
a7511 3
the file opened via FILEHANDLE or DIRHANDLE, or named by EXPR.  If EXPR is
omitted, it stats L<C<$_>|perlvar/$_> (not C<_>!).  Returns the empty
list if L<C<stat>|/stat FILEHANDLE> fails.  Typically
d7514 2
a7515 2
    my ($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$size,
        $atime,$mtime,$ctime,$blksize,$blocks)
d7543 3
a7545 4
If L<C<stat>|/stat FILEHANDLE> is passed the special filehandle
consisting of an underline, no stat is done, but the current contents of
the stat structure from the last L<C<stat>|/stat FILEHANDLE>,
L<C<lstat>|/lstat FILEHANDLE>, or filetest are returned.  Example:
d7558 1
a7558 1
    my $mode = (stat($filename))[2];
d7561 1
a7561 2
In scalar context, L<C<stat>|/stat FILEHANDLE> returns a boolean value
indicating success
d7568 1
a7568 1
    my $sb = stat($filename);
d7574 1
a7574 1
(C<S_IS*>) from the L<Fcntl> module:
d7578 1
a7578 1
    my $mode = (stat($filename))[2];
d7580 3
a7582 3
    my $user_rwx      = ($mode & S_IRWXU) >> 6;
    my $group_read    = ($mode & S_IRGRP) >> 3;
    my $other_execute =  $mode & S_IXOTH;
d7586 2
a7587 2
    my $is_setuid     =  $mode & S_ISUID;
    my $is_directory  =  S_ISDIR($mode);
d7634 1
a7634 1
See your native L<chmod(2)> and L<stat(2)> documentation for more details
d7636 1
a7636 2
instead of the target file behind the link, use the
L<C<lstat>|/lstat FILEHANDLE> function.
d7651 1
a7651 2
L<C<state>|/state VARLIST> declares a lexically scoped variable, just
like L<C<my>|/my VARLIST>.
d7658 1
a7658 2
parentheses.  With a parenthesised list, L<C<undef>|/undef EXPR> can be
used as a
d7662 4
a7665 7
L<C<state>|/state VARLIST> is available only if the
L<C<"state"> feature|feature/The 'state' feature> is enabled or if it is
prefixed with C<CORE::>.  The
L<C<"state"> feature|feature/The 'state' feature> is enabled
automatically with a C<use v5.10> (or higher) declaration in the current
scope.

d7674 2
a7675 6
B<Note that since Perl version 5.16 this function has been a no-op, but
this might change in a future release.>

May take extra time to study SCALAR (L<C<$_>|perlvar/$_> if unspecified)
in anticipation
of doing many pattern matches on the string before it is next modified.
d7682 1
a7682 3

(The way L<C<study>|/study SCALAR> used to work is this: a linked list
of every
d7701 1
a7701 2
In searching for C</\bfoo\b/>, only locations in L<C<$_>|perlvar/$_>
that contain C<f>
d7708 4
a7711 5
runtime, you can build an entire loop as a string and L<C<eval>|/eval
EXPR> that to avoid recompiling all your patterns all the time.
Together with undefining L<C<$E<sol>>|perlvar/$E<sol>> to input entire
files as one record, this can be quite
fast, often faster than specialized programs like L<fgrep(1)>.  The following
d7715 2
a7716 2
    my $search = 'local $/; while (<>) { study;';
    foreach my $word (@@words) {
d7721 1
a7721 1
    my %seen;
d7723 2
a7724 1
    foreach my $file (sort keys(%seen)) {
d7754 1
a7754 1
L<C<undef>|/undef EXPR> outside of a subroutine.
d7756 2
a7757 2
The behaviour of L<C<__SUB__>|/__SUB__> within a regex code block (such
as C</(?{...})/>) is subject to change.
d7759 2
a7760 3
This token is only available under C<use v5.16> or the
L<C<"current_sub"> feature|feature/The 'current_sub' feature>.
See L<feature>.
d7784 1
a7784 2
You can use the L<C<substr>|/substr EXPR,OFFSET,LENGTH,REPLACEMENT>
function as an lvalue, in which case EXPR
d7788 1
a7788 2
length, you may need to pad or chop your value using
L<C<sprintf>|/sprintf FORMAT, LIST>.
d7792 1
a7792 2
is beyond either end of the string,
L<C<substr>|/substr EXPR,OFFSET,LENGTH,REPLACEMENT> returns the undefined
d7803 1
a7803 3
An alternative to using
L<C<substr>|/substr EXPR,OFFSET,LENGTH,REPLACEMENT> as an lvalue is to
specify the
d7806 1
a7806 2
just as you can with
L<C<splice>|/splice ARRAY,OFFSET,LENGTH,LIST>.
d7812 1
a7812 2
Note that the lvalue returned by the three-argument version of
L<C<substr>|/substr EXPR,OFFSET,LENGTH,REPLACEMENT> acts as
d7816 1
a7816 1
    my $x = '1234';
d7827 1
a7827 1
    my $x = '1234';
d7848 1
a7848 1
    my $symlink_exists = eval { symlink("",""); 1 };
d7864 3
a7866 3
string literal (or other read-only string) as an argument to
L<C<syscall>|/syscall NUMBER, LIST> because Perl has to assume that any
string pointer might be written through.  If your
d7869 1
a7869 3
like numbers.  This emulates the
L<C<syswrite>|/syswrite FILEHANDLE,SCALAR,LENGTH,OFFSET> function (or
vice versa):
d7872 2
a7873 2
    my $s = "hi there\n";
    syscall(SYS_write(), fileno(STDOUT), $s, length $s);
d7879 1
a7879 2
If the system call fails, L<C<syscall>|/syscall NUMBER, LIST> returns
C<-1> and sets L<C<$!>|perlvar/$!> (errno).
d7881 2
a7882 3
way to handle such calls is to assign C<$! = 0> before the call, then
check the value of L<C<$!>|perlvar/$!> if
L<C<syscall>|/syscall NUMBER, LIST> returns C<-1>.
d7884 1
a7884 1
There's a problem with C<syscall(SYS_pipe())>: it returns the file
d7887 1
a7887 1
problem by using L<C<pipe>|/pipe READHANDLE,WRITEHANDLE> instead.
d7901 1
a7901 1
function calls the underlying operating system's L<open(2)> function with the
a7903 2
Returns true on success and L<C<undef>|/undef EXPR> otherwise.

d7905 2
a7906 3
system-dependent; they are available via the standard module
L<C<Fcntl>|Fcntl>.  See the documentation of your operating system's
L<open(2)> syscall to see
d7921 1
a7921 2
If the file named by FILENAME does not exist and the
L<C<open>|/open FILEHANDLE,EXPR> call creates
d7924 1
a7924 2
the PERMS argument to L<C<sysopen>|/sysopen FILEHANDLE,FILENAME,MODE>,
Perl uses the octal value C<0666>.
d7926 1
a7926 1
process's current L<C<umask>|/umask EXPR>.
d7931 1
a7931 3
if the file already exists,
L<C<sysopen>|/sysopen FILEHANDLE,FILENAME,MODE> fails.  C<O_EXCL> may
not work
d7943 1
a7943 2
You should seldom if ever use C<0644> as argument to
L<C<sysopen>|/sysopen FILEHANDLE,FILENAME,MODE>, because
d7945 2
a7946 1
Better to omit it.  See L<C<umask>|/umask EXPR> for more on this.
d7948 4
a7951 7
Note that under Perls older than 5.8.0,
L<C<sysopen>|/sysopen FILEHANDLE,FILENAME,MODE> depends on the
L<fdopen(3)> C library function.  On many Unix systems, L<fdopen(3)> is known
to fail when file descriptors exceed a certain value, typically 255.  If
you need more file descriptors than that, consider using the
L<C<POSIX::open>|POSIX/C<open>> function.  For Perls 5.8.0 and later,
PerlIO is (most often) the default.
d7965 4
a7968 7
specified FILEHANDLE, using L<read(2)>.  It bypasses
buffered IO, so mixing this with other kinds of reads,
L<C<print>|/print FILEHANDLE LIST>, L<C<write>|/write FILEHANDLE>,
L<C<seek>|/seek FILEHANDLE,POSITION,WHENCE>,
L<C<tell>|/tell FILEHANDLE>, or L<C<eof>|/eof FILEHANDLE> can cause
confusion because the
perlio or stdio layers usually buffer data.  Returns the number of
d7970 1
a7970 2
error (in the latter case L<C<$!>|perlvar/$!> is also set).  SCALAR will
be grown or
d7981 3
a7983 4
There is no syseof() function, which is ok, since
L<C<eof>|/eof FILEHANDLE> doesn't work well on device files (like ttys)
anyway.  Use L<C<sysread>|/sysread FILEHANDLE,SCALAR,LENGTH,OFFSET> and
check for a return value for 0 to decide whether you're done.
d7985 1
a7985 1
Note that if the filehandle has been marked as C<:utf8>, Unicode
d7987 3
a7989 5
return value of L<C<sysread>|/sysread FILEHANDLE,SCALAR,LENGTH,OFFSET>
are in Unicode characters).  The C<:encoding(...)> layer implicitly
introduces the C<:utf8> layer.  See
L<C<binmode>|/binmode FILEHANDLE, LAYER>,
L<C<open>|/open FILEHANDLE,EXPR>, and the L<open> pragma.
d7996 1
a7996 1
Sets FILEHANDLE's system position in bytes using L<lseek(2)>.  FILEHANDLE may
d8004 6
a8009 13
L<C<tell>|/tell FILEHANDLE> will return byte offsets, not character
offsets (because implementing that would render
L<C<sysseek>|/sysseek FILEHANDLE,POSITION,WHENCE> unacceptably slow).

L<C<sysseek>|/sysseek FILEHANDLE,POSITION,WHENCE> bypasses normal
buffered IO, so mixing it with reads other than
L<C<sysread>|/sysread FILEHANDLE,SCALAR,LENGTH,OFFSET> (for example
L<C<readline>|/readline EXPR> or
L<C<read>|/read FILEHANDLE,SCALAR,LENGTH,OFFSET>),
L<C<print>|/print FILEHANDLE LIST>, L<C<write>|/write FILEHANDLE>,
L<C<seek>|/seek FILEHANDLE,POSITION,WHENCE>,
L<C<tell>|/tell FILEHANDLE>, or L<C<eof>|/eof FILEHANDLE> may cause
confusion.
d8013 1
a8013 1
from the L<Fcntl> module.  Use of the constants is also more portable
d8020 1
a8020 2
of zero is returned as the string C<"0 but true">; thus
L<C<sysseek>|/sysseek FILEHANDLE,POSITION,WHENCE> returns
d8031 1
a8031 1
Does exactly the same thing as L<C<exec>|/exec LIST>, except that a fork is
d8050 2
a8051 3
to set L<C<$E<verbar>>|perlvar/$E<verbar>> (C<$AUTOFLUSH> in L<English>)
or call the C<autoflush> method of L<C<IO::Handle>|IO::Handle/METHODS>
on any open handles.
d8054 12
a8065 15
L<C<wait>|/wait> call.  To get the actual exit value, shift right by
eight (see below).  See also L<C<exec>|/exec LIST>.  This is I<not> what
you want to use to capture the output from a command; for that you
should use merely backticks or
L<C<qxE<sol>E<sol>>|/qxE<sol>STRINGE<sol>>, as described in
L<perlop/"`STRING`">.  Return value of -1 indicates a failure to start
the program or an error of the L<wait(2)> system call (inspect
L<C<$!>|perlvar/$!> for the reason).

If you'd like to make L<C<system>|/system LIST> (and many other bits of
Perl) die on error, have a look at the L<autodie> pragma.

Like L<C<exec>|/exec LIST>, L<C<system>|/system LIST> allows you to lie
to a program about its name if you use the C<system PROGRAM LIST>
syntax.  Again, see L<C<exec>|/exec LIST>.
d8068 3
a8070 3
L<C<system>|/system LIST>, if you expect your program to terminate on
receipt of these signals you will need to arrange to do so yourself
based on the return value.
d8072 1
a8072 1
    my @@args = ("command", "arg1", "arg2");
d8074 1
a8074 1
        or die "system @@args failed: $?";
d8076 2
a8077 3
If you'd like to manually inspect L<C<system>|/system LIST>'s failure,
you can check all possible failure modes by inspecting
L<C<$?>|perlvar/$?> like this:
d8090 2
a8091 7
Alternatively, you may inspect the value of
L<C<${^CHILD_ERROR_NATIVE}>|perlvar/${^CHILD_ERROR_NATIVE}> with the
L<C<W*()>|POSIX/C<WIFEXITED>> calls from the L<POSIX> module.

When L<C<system>|/system LIST>'s arguments are executed indirectly by
the shell, results and return codes are subject to its quirks.
See L<perlop/"`STRING`"> and L<C<exec>|/exec LIST> for details.
d8093 6
a8098 3
Since L<C<system>|/system LIST> does a L<C<fork>|/fork> and
L<C<wait>|/wait> it may affect a C<SIGCHLD> handler.  See L<perlipc> for
details.
d8112 1
a8112 1
specified FILEHANDLE, using L<write(2)>.  If LENGTH is
d8114 5
a8118 8
mixing this with reads (other than C<sysread)>),
L<C<print>|/print FILEHANDLE LIST>, L<C<write>|/write FILEHANDLE>,
L<C<seek>|/seek FILEHANDLE,POSITION,WHENCE>,
L<C<tell>|/tell FILEHANDLE>, or L<C<eof>|/eof FILEHANDLE> may cause
confusion because the perlio and stdio layers usually buffer data.
Returns the number of bytes actually written, or L<C<undef>|/undef EXPR>
if there was an error (in this case the errno variable
L<C<$!>|perlvar/$!> is also set).  If the LENGTH is greater than the
d8129 1
a8129 2
return value of L<C<syswrite>|/syswrite FILEHANDLE,SCALAR,LENGTH,OFFSET>
are in (UTF8-encoded Unicode) characters.
d8133 1
a8133 2
See L<C<binmode>|/binmode FILEHANDLE, LAYER>,
L<C<open>|/open FILEHANDLE,EXPR>, and the L<open> pragma.
d8149 12
a8160 18
layer), L<C<tell>|/tell FILEHANDLE> will return byte offsets, not
character offsets (because that would render
L<C<seek>|/seek FILEHANDLE,POSITION,WHENCE> and
L<C<tell>|/tell FILEHANDLE> rather slow).

The return value of L<C<tell>|/tell FILEHANDLE> for the standard streams
like the STDIN depends on the operating system: it may return -1 or
something else.  L<C<tell>|/tell FILEHANDLE> on pipes, fifos, and
sockets usually returns -1.

There is no C<systell> function.  Use C<sysseek($fh, 0, 1)> for that.

Do not use L<C<tell>|/tell FILEHANDLE> (or other buffered I/O
operations) on a filehandle that has been manipulated by
L<C<sysread>|/sysread FILEHANDLE,SCALAR,LENGTH,OFFSET>,
L<C<syswrite>|/syswrite FILEHANDLE,SCALAR,LENGTH,OFFSET>, or
L<C<sysseek>|/sysseek FILEHANDLE,POSITION,WHENCE>.  Those functions
ignore the buffering, while L<C<tell>|/tell FILEHANDLE> does not.
d8167 4
a8170 6
Returns the current position of the L<C<readdir>|/readdir DIRHANDLE>
routines on DIRHANDLE.  Value may be given to
L<C<seekdir>|/seekdir DIRHANDLE,POS> to access a particular location in
a directory.  L<C<telldir>|/telldir DIRHANDLE> has the same caveats
about possible directory compaction as the corresponding system library
routine.
d8184 2
a8185 3
to the L<dbm_open(3)> function of C.  The object returned by the
constructor is also returned by the
L<C<tie>|/tie VARIABLE,CLASSNAME,LIST> function, which would be useful
d8188 3
a8190 4
Note that functions such as L<C<keys>|/keys HASH> and
L<C<values>|/values HASH> may return huge lists when used on large
objects, like DBM files.  You may prefer to use the L<C<each>|/each
HASH> function to iterate over such.  Example:
d8194 3
a8196 3
    tie(my %HIST, 'NDBM_File', '/usr/lib/news/history', 1, 0);
    while (my ($key,$val) = each %HIST) {
        print $key, ' = ', unpack('L', $val), "\n";
d8198 1
d8263 3
a8265 6
Unlike L<C<dbmopen>|/dbmopen HASH,DBNAME,MASK>, the
L<C<tie>|/tie VARIABLE,CLASSNAME,LIST> function will not
L<C<use>|/use Module VERSION LIST> or L<C<require>|/require VERSION> a
module for you; you need to do that explicitly yourself.  See L<DB_File>
or the L<Config> module for interesting
L<C<tie>|/tie VARIABLE,CLASSNAME,LIST> implementations.
d8267 1
a8267 1
For further details see L<perltie>, L<C<tied>|/tied VARIABLE>.
d8275 1
a8275 2
that was originally returned by the
L<C<tie>|/tie VARIABLE,CLASSNAME,LIST> call that bound the variable
d8285 2
a8286 3
considers to be the epoch, suitable for feeding to
L<C<gmtime>|/gmtime EXPR> and L<C<localtime>|/localtime EXPR>.  On most
systems the epoch is 00:00:00 UTC, January 1, 1970;
d8292 2
a8293 3
if you have L<gettimeofday(2)>, you may be able to use the
L<C<syscall>|/syscall NUMBER, LIST> interface of Perl.  See L<perlfaq8>
for details.
d8307 1
a8307 1
    my ($user,$system,$cuser,$csystem) = times;
d8309 1
a8309 1
In scalar context, L<C<times>|/times> returns C<$user>.
d8319 1
a8319 2
The transliteration operator.  Same as
L<C<yE<sol>E<sol>E<sol>>|/yE<sol>E<sol>E<sol>>.  See
d8331 1
a8331 2
on your system.  Returns true if successful, L<C<undef>|/undef EXPR> on
error.
d8337 1
a8337 2
call L<seek|/"seek FILEHANDLE,POSITION,WHENCE"> before writing to the
file.
d8351 1
a8351 1
L<C<ucfirst>|/ucfirst EXPR> for that.
d8353 1
a8353 1
If EXPR is omitted, uses L<C<$_>|perlvar/$_>.
d8355 2
a8356 2
This function behaves the same way under various pragmas, such as in a locale,
as L<C<lc>|/lc EXPR> does.
d8369 1
a8369 1
If EXPR is omitted, uses L<C<$_>|perlvar/$_>.
d8371 2
a8372 2
This function behaves the same way under various pragmas, such as in a locale,
as L<C<lc>|/lc EXPR> does.
d8386 9
a8394 12
and isn't one of the digits).  The L<C<umask>|/umask EXPR> value is such
a number representing disabled permissions bits.  The permission (or
"mode") values you pass L<C<mkdir>|/mkdir FILENAME,MASK> or
L<C<sysopen>|/sysopen FILEHANDLE,FILENAME,MODE> are modified by your
umask, so even if you tell
L<C<sysopen>|/sysopen FILEHANDLE,FILENAME,MODE> to create a file with
permissions C<0777>, if your umask is C<0022>, then the file will
actually be created with permissions C<0755>.  If your
L<C<umask>|/umask EXPR> were C<0027> (group can't write; others can't
read, write, or execute), then passing
L<C<sysopen>|/sysopen FILEHANDLE,FILENAME,MODE> C<0666> would create a
file with mode C<0640> (because C<0666 &~ 027> is C<0640>).
d8397 2
a8398 3
files (in L<C<sysopen>|/sysopen FILEHANDLE,FILENAME,MODE>) and one of
C<0777> for directories (in L<C<mkdir>|/mkdir FILENAME,MASK>) and
executable files.  This gives users the freedom of
d8403 1
a8403 1
kept private: mail files, web browser cookies, F<.rhosts> files, and
d8406 4
a8409 5
If L<umask(2)> is not implemented on your system and you are trying to
restrict access for I<yourself> (i.e., C<< (EXPR & 0700) > 0 >>),
raises an exception.  If L<umask(2)> is not implemented and you are
not trying to restrict access for yourself, returns
L<C<undef>|/undef EXPR>.
d8412 1
a8412 2
string of octal digits.  See also L<C<oct>|/oct EXPR>, if all you have
is a string.
d8427 2
a8428 3
DBM list values, so don't do that; see L<C<delete>|/delete EXPR>.
Always returns the undefined value.
You can omit the EXPR, in which case nothing is
d8441 1
a8441 1
    my ($x, $y, undef, $z) = foo();    # Ignore third value returned
d8453 2
a8454 2
it successfully deleted.  On failure, it returns false and sets
L<C<$!>|perlvar/$!> (errno):
d8460 1
a8460 2
On error, L<C<unlink>|/unlink LIST> will not tell you which files it
could not remove.
d8468 1
a8468 2
Note: L<C<unlink>|/unlink LIST> will not attempt to delete directories
unless you are
d8471 2
a8472 3
damage on your filesystem.  Finally, using L<C<unlink>|/unlink LIST> on
directories is not supported on many operating systems.  Use
L<C<rmdir>|/rmdir FILENAME> instead.
d8474 1
a8474 1
If LIST is omitted, L<C<unlink>|/unlink LIST> uses L<C<$_>|perlvar/$_>.
d8483 1
a8483 2
L<C<unpack>|/unpack TEMPLATE,EXPR> does the reverse of
L<C<pack>|/pack TEMPLATE,LIST>: it takes a string
d8487 1
a8487 1
If EXPR is omitted, unpacks the L<C<$_>|perlvar/$_> string.
d8492 2
a8493 2
of L<C<pack>|/pack TEMPLATE,LIST>, or the characters of the string
represent a C structure of some kind.
d8495 1
a8495 2
The TEMPLATE has the same format as in the
L<C<pack>|/pack TEMPLATE,LIST> function.
d8499 1
a8499 1
        my ($what, $where, $howmuch) = @@_;
d8507 2
a8508 2
In addition to fields allowed in L<C<pack>|/pack TEMPLATE,LIST>, you may
prefix a field with a %<number> to indicate that
d8510 1
a8510 1
themselves.  Default is a 16-bit checksum.  The checksum is calculated by
d8517 1
a8517 1
    my $checksum = do {
d8519 1
a8519 1
        unpack("%32W*", readline) % 65535;
d8524 1
a8524 1
    my $setbits = unpack("%32b*", $selectmask);
d8527 1
a8527 2
has no way of checking whether the value passed to
L<C<unpack>|/unpack TEMPLATE,EXPR>
d8534 1
a8534 2
L<C<unpack>|/unpack TEMPLATE,EXPR> may produce empty strings or zeros,
or it may raise an exception.
d8538 1
a8538 1
See L<C<pack>|/pack TEMPLATE,LIST> for more examples and notes.
d8543 2
d8547 1
a8547 2
Does the opposite of a L<C<shift>|/shift ARRAY>.  Or the opposite of a
L<C<push>|/push ARRAY,LIST>,
d8554 12
a8565 2
prepended elements stay in the same order.  Use
L<C<reverse>|/reverse LIST> to do the reverse.
d8567 1
a8567 4
Starting with Perl 5.14, an experimental feature allowed
L<C<unshift>|/unshift ARRAY,LIST> to take
a scalar expression. This experiment has been deemed unsuccessful, and was
removed as of Perl 5.24.
d8601 2
a8602 3
decimal fraction such as 5.006, which will be compared to
L<C<$]>|perlvar/$]>, or a v-string of the form v5.6.1, which will be
compared to L<C<$^V>|perlvar/$^V> (aka $PERL_VERSION).  An
d8605 1
a8605 2
file.  Compare with L<C<require>|/require VERSION>, which can do a
similar check at run time.
d8619 1
a8619 2
L<C<use>|/use Module VERSION LIST>ing library modules that won't work
with older versions of Perl.
d8623 1
a8623 1
version as defined by the L<feature> pragma, disabling any features
d8627 1
a8627 1
with L<C<use strict>|strict>.  Any explicit use of
d8636 3
a8638 5
The C<BEGIN> forces the L<C<require>|/require VERSION> and
L<C<import>|/import LIST> to happen at compile time.  The
L<C<require>|/require VERSION> makes sure the module is loaded into
memory if it hasn't been yet.  The L<C<import>|/import LIST> is not a
builtin; it's just an ordinary static method
d8641 5
a8645 6
L<C<import>|/import LIST> method any way it likes, though most modules
just choose to derive their L<C<import>|/import LIST> method via
inheritance from the C<Exporter> class that is defined in the
L<C<Exporter>|Exporter> module.  See L<Exporter>.  If no
L<C<import>|/import LIST> method can be found, then the call is skipped,
even if there is an AUTOLOAD method.
d8647 1
a8647 2
If you do not want to call the package's L<C<import>|/import LIST>
method (for instance,
d8657 8
a8664 17
L<C<use>|/use Module VERSION LIST> will call the C<VERSION> method in
class Module with the given version as an argument:

    use Module 12.34;

is equivalent to:

    BEGIN { require Module; Module->VERSION(12.34) }

The L<default C<VERSION> method|UNIVERSAL/C<VERSION ( [ REQUIRE ] )>>,
inherited from the L<C<UNIVERSAL>|UNIVERSAL> class, croaks if the given
version is larger than the value of the variable C<$Module::VERSION>.

Again, there is a distinction between omitting LIST (L<C<import>|/import
LIST> called with no arguments) and an explicit empty LIST C<()>
(L<C<import>|/import LIST> not called).  Note that there is no comma
after VERSION!
d8667 1
a8667 2
are also implemented this way.  Some of the currently implemented
pragmas are:
d8679 8
a8686 9
block scope (like L<C<strict>|strict> or L<C<integer>|integer>, unlike
ordinary modules, which import symbols into the current package (which
are effective through the end of the file).

Because L<C<use>|/use Module VERSION LIST> takes effect at compile time,
it doesn't respect the ordinary flow control of the code being compiled.
In particular, putting a L<C<use>|/use Module VERSION LIST> inside the
false branch of a conditional doesn't prevent it
from being processed.  If a module or pragma only needs to be loaded
d8692 3
a8694 5
There's a corresponding L<C<no>|/no MODULE VERSION LIST> declaration
that unimports meanings imported by L<C<use>|/use Module VERSION LIST>,
i.e., it calls C<< Module->unimport(LIST) >> instead of
L<C<import>|/import LIST>.  It behaves just as L<C<import>|/import LIST>
does with VERSION, an omitted or empty LIST,
d8701 1
a8701 2
Care should be taken when using the C<no VERSION> form of L<C<no>|/no
MODULE VERSION LIST>.  It is
d8707 2
a8708 2
for the C<-M> and C<-m> command-line options to Perl that give
L<C<use>|/use Module VERSION LIST> functionality from the command-line.
d8720 1
a8720 1
Unix L<touch(1)> command when the files I<already exist> and belong to
d8724 1
a8724 1
    my $atime = my $mtime = time;
d8727 2
a8728 3
Since Perl 5.8.0, if the first two elements of the list are
L<C<undef>|/undef EXPR>,
the L<utime(2)> syscall from your C library is called with a null second
d8734 4
a8737 4
    for my $file (@@ARGV) {
	utime(undef, undef, $file)
	    || warn "Couldn't touch $file: $!";
    }
d8742 1
a8742 1
L<touch(1)> command will in fact normally use this form instead of the
d8745 3
a8747 3
Passing only one of the first two elements as L<C<undef>|/undef EXPR> is
equivalent to passing a 0 and will not have the effect described when
both are L<C<undef>|/undef EXPR>.  This also triggers an
d8750 2
a8751 2
On systems that support L<futimes(2)>, you may pass filehandles among the
files.  On systems that don't support L<futimes(2)>, passing filehandles raises
d8762 2
d8775 3
a8777 5
that the most recent key returned by L<C<each>|/each HASH> or
L<C<keys>|/keys HASH> may be deleted without changing the order.  So
long as a given hash is unmodified you may rely on
L<C<keys>|/keys HASH>, L<C<values>|/values HASH> and
L<C<each>|/each HASH> to repeatedly return the same order
d8785 4
a8788 5
As a side effect, calling L<C<values>|/values HASH> resets the HASH or
ARRAY's internal iterator, see L<C<each>|/each HASH>.  (In particular,
calling L<C<values>|/values HASH> in void context resets the iterator
with no other overhead.  Apart from resetting the iterator,
C<values @@array> in list context is the same as plain C<@@array>.
d8799 7
a8805 4
Starting with Perl 5.14, an experimental feature allowed
L<C<values>|/values HASH> to take a
scalar expression. This experiment has been deemed unsuccessful, and was
removed as of Perl 5.24.
d8813 1
d8815 1
a8815 2
See also L<C<keys>|/keys HASH>, L<C<each>|/each HASH>, and
L<C<sort>|/sort SUBNAME LIST>.
d8833 2
a8834 3
L<C<pack>|/pack TEMPLATE,LIST>/L<C<unpack>|/unpack TEMPLATE,EXPR> with
big-endian formats C<n>/C<N> (and analogously for BITS==64).  See
L<C<pack>|/pack TEMPLATE,LIST> for details.
d8843 1
a8843 2
L<C<vec>|/vec EXPR,OFFSET,BITS> may also be assigned to, in which case
parentheses are needed
d8854 1
a8854 2
the UTF8 flag set), this is ignored by L<C<vec>|/vec EXPR,OFFSET,BITS>,
and it operates on the
d8856 1
a8856 1
only have characters with values less than 256.
d8858 1
a8858 2
Strings created with L<C<vec>|/vec EXPR,OFFSET,BITS> can also be
manipulated with the logical
d8887 2
a8888 2
    my $bits = unpack("b*", $vector);
    my @@bits = split(//, unpack("b*", $vector));
d8922 1
a8922 1
Regardless of the machine architecture on which it runs, the
d9062 1
a9062 1
Behaves like L<wait(2)> on your system: it waits for a child
d9064 2
a9065 3
C<-1> if there are no child processes.  The status is returned in
L<C<$?>|perlvar/$?> and
L<C<${^CHILD_ERROR_NATIVE}>|perlvar/${^CHILD_ERROR_NATIVE}>.
d9069 2
a9070 4
If you use L<C<wait>|/wait> in your handler for
L<C<$SIG{CHLD}>|perlvar/%SIG>, it may accidentally wait for the child
created by L<C<qx>|/qxE<sol>STRINGE<sol>> or L<C<system>|/system LIST>.
See L<perlipc> for details.
d9080 3
a9082 12
the deceased process, or C<-1> if there is no such child process.  A
non-blocking wait (with L<WNOHANG|POSIX/C<WNOHANG>> in FLAGS) can return 0 if
there are child processes matching PID but none have terminated yet.
The status is returned in L<C<$?>|perlvar/$?> and
L<C<${^CHILD_ERROR_NATIVE}>|perlvar/${^CHILD_ERROR_NATIVE}>.

A PID of C<0> indicates to wait for any child process whose process group ID is
equal to that of the current process.  A PID of less than C<-1> indicates to
wait for any child process whose process group ID is equal to -PID.  A PID of
C<-1> indicates to wait for any child process.

If you say
d9085 1
a9085 2

    my $kid;
d9090 1
a9090 6
or

    1 while waitpid(-1, WNOHANG) > 0;

then you can do a non-blocking wait for all pending zombie processes (see
L<POSIX/WAIT>).
d9092 1
a9092 1
L<waitpid(2)> or L<wait4(2)> syscalls.  However, waiting for a particular
d9109 1
a9109 2
L<C<eval>|/eval EXPR> is looking for a list value.  Returns false if the
context is
d9117 1
a9117 1
L<C<wantarray>|/wantarray>'s result is unspecified in the top level of a file,
d9129 2
a9130 2
not end in a newline, it appends the same file/line number text as
L<C<die>|/die LIST> does.
d9132 4
a9135 4
If the output is empty and L<C<$@@>|perlvar/$@@> already contains a value
(typically from a previous eval) that value is used after appending
C<"\t...caught"> to L<C<$@@>|perlvar/$@@>.  This is useful for staying
almost, but not entirely similar to L<C<die>|/die LIST>.
d9137 1
a9137 2
If L<C<$@@>|perlvar/$@@> is empty, then the string
C<"Warning: Something's wrong"> is used.
d9139 1
a9139 2
No message is printed if there is a L<C<$SIG{__WARN__}>|perlvar/%SIG>
handler
d9141 1
a9141 2
as it sees fit (like, for instance, converting it into a
L<C<die>|/die LIST>).  Most
d9143 1
a9143 2
warnings that they are not prepared to deal with, by calling
L<C<warn>|/warn LIST>
d9149 2
a9150 3
L<C<$SIG{__DIE__}>|perlvar/%SIG> handlers (which don't suppress the
error text, but can instead call L<C<die>|/die LIST> again to change
it).
d9166 3
a9168 4
See L<perlvar> for details on setting L<C<%SIG>|perlvar/%SIG> entries
and for more
examples.  See the L<Carp> module for other kinds of warnings using its
C<carp> and C<cluck> functions.
d9182 2
a9183 3
format for the current output channel (see the
L<C<select>|/select FILEHANDLE> function) may be set explicitly by
assigning the name of the format to the L<C<$~>|perlvar/$~> variable.
d9190 1
a9190 1
format is the name of the filehandle with C<_TOP> appended, or C<top>
d9193 3
a9195 4
format of your choice by assigning the name to the L<C<$^>|perlvar/$^>
variable while that filehandle is selected.  The number of lines
remaining on the current page is in variable L<C<$->|perlvar/$->, which
can be set to C<0> to force a new page.
d9199 1
a9199 2
L<C<select>|/select FILEHANDLE> operator.  If the FILEHANDLE is an EXPR,
then the expression
d9203 1
a9203 2
Note that write is I<not> the opposite of
L<C<read>|/read FILEHANDLE,SCALAR,LENGTH,OFFSET>.  Unfortunately.
d9209 1
a9209 2
The transliteration operator.  Same as
L<C<trE<sol>E<sol>E<sol>>|/trE<sol>E<sol>E<sol>>.  See
@


