head	1.2;
access;
symbols
	OPENBSD_6_2_BASE:1.2
	PERL_5_24_2:1.1.1.12
	OPENBSD_6_1:1.2.0.4
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.1.11.0.10
	OPENBSD_6_0_BASE:1.1.1.11
	OPENBSD_5_9:1.1.1.11.0.4
	OPENBSD_5_9_BASE:1.1.1.11
	OPENBSD_5_8:1.1.1.11.0.6
	OPENBSD_5_8_BASE:1.1.1.11
	PERL_5_20_2:1.1.1.11
	OPENBSD_5_7:1.1.1.11.0.2
	OPENBSD_5_7_BASE:1.1.1.11
	PERL_5_20_1:1.1.1.11
	OPENBSD_5_6:1.1.1.10.0.4
	OPENBSD_5_6_BASE:1.1.1.10
	PERL_5_18_2:1.1.1.10
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.9.0.6
	OPENBSD_5_5_BASE:1.1.1.9
	OPENBSD_5_4:1.1.1.9.0.2
	OPENBSD_5_4_BASE:1.1.1.9
	PERL_5_16_3:1.1.1.9
	OPENBSD_5_3:1.1.1.8.0.10
	OPENBSD_5_3_BASE:1.1.1.8
	OPENBSD_5_2:1.1.1.8.0.8
	OPENBSD_5_2_BASE:1.1.1.8
	OPENBSD_5_1_BASE:1.1.1.8
	OPENBSD_5_1:1.1.1.8.0.6
	OPENBSD_5_0:1.1.1.8.0.4
	OPENBSD_5_0_BASE:1.1.1.8
	OPENBSD_4_9:1.1.1.8.0.2
	OPENBSD_4_9_BASE:1.1.1.8
	PERL_5_12_2:1.1.1.8
	OPENBSD_4_8:1.1.1.7.0.4
	OPENBSD_4_8_BASE:1.1.1.7
	OPENBSD_4_7:1.1.1.7.0.2
	OPENBSD_4_7_BASE:1.1.1.7
	PERL_5_10_1:1.1.1.7
	OPENBSD_4_6:1.1.1.6.0.6
	OPENBSD_4_6_BASE:1.1.1.6
	OPENBSD_4_5:1.1.1.6.0.2
	OPENBSD_4_5_BASE:1.1.1.6
	PERL_5_10_0:1.1.1.6
	OPENBSD_4_4:1.1.1.5.0.10
	OPENBSD_4_4_BASE:1.1.1.5
	OPENBSD_4_3:1.1.1.5.0.8
	OPENBSD_4_3_BASE:1.1.1.5
	OPENBSD_4_2:1.1.1.5.0.6
	OPENBSD_4_2_BASE:1.1.1.5
	OPENBSD_4_1:1.1.1.5.0.4
	OPENBSD_4_1_BASE:1.1.1.5
	OPENBSD_4_0:1.1.1.5.0.2
	OPENBSD_4_0_BASE:1.1.1.5
	PERL_5_8_8:1.1.1.5
	OPENBSD_3_9:1.1.1.4.0.10
	OPENBSD_3_9_BASE:1.1.1.4
	OPENBSD_3_8:1.1.1.4.0.8
	OPENBSD_3_8_BASE:1.1.1.4
	OPENBSD_3_7:1.1.1.4.0.6
	OPENBSD_3_7_BASE:1.1.1.4
	PERL_5_8_6:1.1.1.4
	OPENBSD_3_6:1.1.1.4.0.4
	OPENBSD_3_6_BASE:1.1.1.4
	PERL_5_8_5:1.1.1.4
	PERL_5_8_3:1.1.1.4
	OPENBSD_3_5:1.1.1.4.0.2
	OPENBSD_3_5_BASE:1.1.1.4
	PERL_5_8_2:1.1.1.4
	OPENBSD_3_4:1.1.1.3.0.4
	OPENBSD_3_4_BASE:1.1.1.3
	OPENBSD_3_3:1.1.1.3.0.2
	OPENBSD_3_3_BASE:1.1.1.3
	PERL_5_8_0:1.1.1.3
	OPENBSD_3_2:1.1.1.2.0.6
	OPENBSD_3_2_BASE:1.1.1.2
	OPENBSD_3_1:1.1.1.2.0.4
	OPENBSD_3_1_BASE:1.1.1.2
	OPENBSD_3_0:1.1.1.2.0.2
	OPENBSD_3_0_BASE:1.1.1.2
	PERL_5_6_1:1.1.1.2
	OPENBSD_2_9:1.1.1.1.0.6
	OPENBSD_2_9_BASE:1.1.1.1
	OPENBSD_2_8:1.1.1.1.0.4
	OPENBSD_2_8_BASE:1.1.1.1
	OPENBSD_2_7:1.1.1.1.0.2
	OPENBSD_2_7_BASE:1.1.1.1
	PERL_5_6_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2017.02.05.00.32.18;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	2000.04.06.16.10.21;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.04.06.16.10.21;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.05.24.18.24.30;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.10.27.22.15.04;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2003.12.03.02.44.20;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2006.03.28.18.49.16;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2008.09.29.17.18.50;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2009.10.12.18.10.39;	author millert;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2010.09.24.14.49.09;	author millert;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2013.03.25.20.09.18;	author sthen;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	2014.03.24.14.59.07;	author afresh1;	state Exp;
branches;
next	1.1.1.11;

1.1.1.11
date	2014.11.17.20.53.13;	author afresh1;	state Exp;
branches;
next	1.1.1.12;
commitid	B31cAbBIXiCqnL97;

1.1.1.12
date	2017.08.14.13.46.19;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@=head1 NAME

perldebguts - Guts of Perl debugging 

=head1 DESCRIPTION

This is not L<perldebug>, which tells you how to use
the debugger.  This manpage describes low-level details concerning
the debugger's internals, which range from difficult to impossible
to understand for anyone who isn't incredibly intimate with Perl's guts.
Caveat lector.

=head1 Debugger Internals

Perl has special debugging hooks at compile-time and run-time used
to create debugging environments.  These hooks are not to be confused
with the I<perl -Dxxx> command described in L<perlrun>, which is
usable only if a special Perl is built per the instructions in the
F<INSTALL> podpage in the Perl source tree.

For example, whenever you call Perl's built-in C<caller> function
from the package C<DB>, the arguments that the corresponding stack
frame was called with are copied to the C<@@DB::args> array.  These
mechanisms are enabled by calling Perl with the B<-d> switch.
Specifically, the following additional features are enabled
(cf. L<perlvar/$^P>):

=over 4

=item *

Perl inserts the contents of C<$ENV{PERL5DB}> (or C<BEGIN {require
'perl5db.pl'}> if not present) before the first line of your program.

=item *

Each array C<@@{"_<$filename"}> holds the lines of $filename for a
file compiled by Perl.  The same is also true for C<eval>ed strings
that contain subroutines, or which are currently being executed.
The $filename for C<eval>ed strings looks like C<(eval 34)>.

Values in this array are magical in numeric context: they compare
equal to zero only if the line is not breakable.

=item *

Each hash C<%{"_<$filename"}> contains breakpoints and actions keyed
by line number.  Individual entries (as opposed to the whole hash)
are settable.  Perl only cares about Boolean true here, although
the values used by F<perl5db.pl> have the form
C<"$break_condition\0$action">.  

The same holds for evaluated strings that contain subroutines, or
which are currently being executed.  The $filename for C<eval>ed strings
looks like C<(eval 34)>.

=item *

Each scalar C<${"_<$filename"}> contains C<"_<$filename">.  This is
also the case for evaluated strings that contain subroutines, or
which are currently being executed.  The $filename for C<eval>ed
strings looks like C<(eval 34)>.

=item *

After each C<require>d file is compiled, but before it is executed,
C<DB::postponed(*{"_<$filename"})> is called if the subroutine
C<DB::postponed> exists.  Here, the $filename is the expanded name of
the C<require>d file, as found in the values of %INC.

=item *

After each subroutine C<subname> is compiled, the existence of
C<$DB::postponed{subname}> is checked.  If this key exists,
C<DB::postponed(subname)> is called if the C<DB::postponed> subroutine
also exists.

=item *

A hash C<%DB::sub> is maintained, whose keys are subroutine names
and whose values have the form C<filename:startline-endline>.
C<filename> has the form C<(eval 34)> for subroutines defined inside
C<eval>s.

=item *

When the execution of your program reaches a point that can hold a
breakpoint, the C<DB::DB()> subroutine is called if any of the variables
C<$DB::trace>, C<$DB::single>, or C<$DB::signal> is true.  These variables
are not C<local>izable.  This feature is disabled when executing
inside C<DB::DB()>, including functions called from it 
unless C<< $^D & (1<<30) >> is true.

=item *

When execution of the program reaches a subroutine call, a call to
C<&DB::sub>(I<args>) is made instead, with C<$DB::sub> holding the
name of the called subroutine. (This doesn't happen if the subroutine
was compiled in the C<DB> package.)

X<&DB::lsub>If the call is to an lvalue subroutine, and C<&DB::lsub>
is defined C<&DB::lsub>(I<args>) is called instead, otherwise falling
back to C<&DB::sub>(I<args>).

=item *

When execution of the program uses C<goto> to enter a non-XS
subroutine and the 0x80 bit is set in C<$^P>, a call to C<&DB::goto>
is made, with C<$DB::sub> holding the name of the subroutine being
entered.

=back

Note that if C<&DB::sub> needs external data for it to work, no
subroutine call is possible without it. As an example, the standard
debugger's C<&DB::sub> depends on the C<$DB::deep> variable
(it defines how many levels of recursion deep into the debugger you can go
before a mandatory break).  If C<$DB::deep> is not defined, subroutine
calls are not possible, even though C<&DB::sub> exists.

=head2 Writing Your Own Debugger

=head3 Environment Variables

The C<PERL5DB> environment variable can be used to define a debugger.
For example, the minimal "working" debugger (it actually doesn't do anything)
consists of one line:

  sub DB::DB {}

It can easily be defined like this:

  $ PERL5DB="sub DB::DB {}" perl -d your-script

Another brief debugger, slightly more useful, can be created
with only the line:

  sub DB::DB {print ++$i; scalar <STDIN>}

This debugger prints a number which increments for each statement
encountered and waits for you to hit a newline before continuing
to the next statement.

The following debugger is actually useful:

  {
    package DB;
    sub DB  {}
    sub sub {print ++$i, " $sub\n"; &$sub}
  }

It prints the sequence number of each subroutine call and the name of the
called subroutine.  Note that C<&DB::sub> is being compiled into the
package C<DB> through the use of the C<package> directive.

When it starts, the debugger reads your rc file (F<./.perldb> or
F<~/.perldb> under Unix), which can set important options.
(A subroutine (C<&afterinit>) can be defined here as well; it is executed
after the debugger completes its own initialization.)

After the rc file is read, the debugger reads the PERLDB_OPTS
environment variable and uses it to set debugger options. The
contents of this variable are treated as if they were the argument
of an C<o ...> debugger command (q.v. in L<perldebug/"Configurable Options">).

=head3 Debugger Internal Variables

In addition to the file and subroutine-related variables mentioned above,
the debugger also maintains various magical internal variables.

=over 4

=item *

C<@@DB::dbline> is an alias for C<@@{"::_<current_file"}>, which
holds the lines of the currently-selected file (compiled by Perl), either
explicitly chosen with the debugger's C<f> command, or implicitly by flow
of execution.

Values in this array are magical in numeric context: they compare
equal to zero only if the line is not breakable.

=item *

C<%DB::dbline> is an alias for C<%{"::_<current_file"}>, which
contains breakpoints and actions keyed by line number in
the currently-selected file, either explicitly chosen with the
debugger's C<f> command, or implicitly by flow of execution.

As previously noted, individual entries (as opposed to the whole hash)
are settable.  Perl only cares about Boolean true here, although
the values used by F<perl5db.pl> have the form
C<"$break_condition\0$action">.

=back

=head3 Debugger Customization Functions

Some functions are provided to simplify customization.

=over 4

=item *

See L<perldebug/"Configurable Options"> for a description of options parsed by
C<DB::parse_options(string)>.

=item *

C<DB::dump_trace(skip[,count])> skips the specified number of frames
and returns a list containing information about the calling frames (all
of them, if C<count> is missing).  Each entry is reference to a hash
with keys C<context> (either C<.>, C<$>, or C<@@>), C<sub> (subroutine
name, or info about C<eval>), C<args> (C<undef> or a reference to
an array), C<file>, and C<line>.

=item *

C<DB::print_trace(FH, skip[, count[, short]])> prints
formatted info about caller frames.  The last two functions may be
convenient as arguments to C<< < >>, C<< << >> commands.

=back

Note that any variables and functions that are not documented in
this manpages (or in L<perldebug>) are considered for internal   
use only, and as such are subject to change without notice.

=head1 Frame Listing Output Examples

The C<frame> option can be used to control the output of frame 
information.  For example, contrast this expression trace:

 $ perl -de 42
 Stack dump during die enabled outside of evals.

 Loading DB routines from perl5db.pl patch level 0.94
 Emacs support available.

 Enter h or 'h h' for help.

 main::(-e:1):   0
   DB<1> sub foo { 14 }

   DB<2> sub bar { 3 }

   DB<3> t print foo() * bar()
 main::((eval 172):3):   print foo() + bar();
 main::foo((eval 168):2):
 main::bar((eval 170):2):
 42

with this one, once the C<o>ption C<frame=2> has been set:

   DB<4> o f=2
                frame = '2'
   DB<5> t print foo() * bar()
 3:      foo() * bar()
 entering main::foo
  2:     sub foo { 14 };
 exited main::foo
 entering main::bar
  2:     sub bar { 3 };
 exited main::bar
 42

By way of demonstration, we present below a laborious listing
resulting from setting your C<PERLDB_OPTS> environment variable to
the value C<f=n N>, and running I<perl -d -V> from the command line.
Examples using various values of C<n> are shown to give you a feel
for the difference between settings.  Long though it may be, this
is not a complete listing, but only excerpts.

=over 4

=item 1

 entering main::BEGIN
  entering Config::BEGIN
   Package lib/Exporter.pm.
   Package lib/Carp.pm.
  Package lib/Config.pm.
  entering Config::TIEHASH
  entering Exporter::import
   entering Exporter::export
 entering Config::myconfig
  entering Config::FETCH
  entering Config::FETCH
  entering Config::FETCH
  entering Config::FETCH

=item 2

 entering main::BEGIN
  entering Config::BEGIN
   Package lib/Exporter.pm.
   Package lib/Carp.pm.
  exited Config::BEGIN
  Package lib/Config.pm.
  entering Config::TIEHASH
  exited Config::TIEHASH
  entering Exporter::import
   entering Exporter::export
   exited Exporter::export
  exited Exporter::import
 exited main::BEGIN
 entering Config::myconfig
  entering Config::FETCH
  exited Config::FETCH
  entering Config::FETCH
  exited Config::FETCH
  entering Config::FETCH

=item 3

 in  $=main::BEGIN() from /dev/null:0
  in  $=Config::BEGIN() from lib/Config.pm:2
   Package lib/Exporter.pm.
   Package lib/Carp.pm.
  Package lib/Config.pm.
  in  $=Config::TIEHASH('Config') from lib/Config.pm:644
  in  $=Exporter::import('Config', 'myconfig', 'config_vars') from /dev/null:0
   in  $=Exporter::export('Config', 'main', 'myconfig', 'config_vars') from li
 in  @@=Config::myconfig() from /dev/null:0
  in  $=Config::FETCH(ref(Config), 'package') from lib/Config.pm:574
  in  $=Config::FETCH(ref(Config), 'baserev') from lib/Config.pm:574
  in  $=Config::FETCH(ref(Config), 'PERL_VERSION') from lib/Config.pm:574
  in  $=Config::FETCH(ref(Config), 'PERL_SUBVERSION') from lib/Config.pm:574
  in  $=Config::FETCH(ref(Config), 'osname') from lib/Config.pm:574
  in  $=Config::FETCH(ref(Config), 'osvers') from lib/Config.pm:574

=item 4

 in  $=main::BEGIN() from /dev/null:0
  in  $=Config::BEGIN() from lib/Config.pm:2
   Package lib/Exporter.pm.
   Package lib/Carp.pm.
  out $=Config::BEGIN() from lib/Config.pm:0
  Package lib/Config.pm.
  in  $=Config::TIEHASH('Config') from lib/Config.pm:644
  out $=Config::TIEHASH('Config') from lib/Config.pm:644
  in  $=Exporter::import('Config', 'myconfig', 'config_vars') from /dev/null:0
   in  $=Exporter::export('Config', 'main', 'myconfig', 'config_vars') from lib/
   out $=Exporter::export('Config', 'main', 'myconfig', 'config_vars') from lib/
  out $=Exporter::import('Config', 'myconfig', 'config_vars') from /dev/null:0
 out $=main::BEGIN() from /dev/null:0
 in  @@=Config::myconfig() from /dev/null:0
  in  $=Config::FETCH(ref(Config), 'package') from lib/Config.pm:574
  out $=Config::FETCH(ref(Config), 'package') from lib/Config.pm:574
  in  $=Config::FETCH(ref(Config), 'baserev') from lib/Config.pm:574
  out $=Config::FETCH(ref(Config), 'baserev') from lib/Config.pm:574
  in  $=Config::FETCH(ref(Config), 'PERL_VERSION') from lib/Config.pm:574
  out $=Config::FETCH(ref(Config), 'PERL_VERSION') from lib/Config.pm:574
  in  $=Config::FETCH(ref(Config), 'PERL_SUBVERSION') from lib/Config.pm:574

=item 5

 in  $=main::BEGIN() from /dev/null:0
  in  $=Config::BEGIN() from lib/Config.pm:2
   Package lib/Exporter.pm.
   Package lib/Carp.pm.
  out $=Config::BEGIN() from lib/Config.pm:0
  Package lib/Config.pm.
  in  $=Config::TIEHASH('Config') from lib/Config.pm:644
  out $=Config::TIEHASH('Config') from lib/Config.pm:644
  in  $=Exporter::import('Config', 'myconfig', 'config_vars') from /dev/null:0
   in  $=Exporter::export('Config', 'main', 'myconfig', 'config_vars') from lib/E
   out $=Exporter::export('Config', 'main', 'myconfig', 'config_vars') from lib/E
  out $=Exporter::import('Config', 'myconfig', 'config_vars') from /dev/null:0
 out $=main::BEGIN() from /dev/null:0
 in  @@=Config::myconfig() from /dev/null:0
  in  $=Config::FETCH('Config=HASH(0x1aa444)', 'package') from lib/Config.pm:574
  out $=Config::FETCH('Config=HASH(0x1aa444)', 'package') from lib/Config.pm:574
  in  $=Config::FETCH('Config=HASH(0x1aa444)', 'baserev') from lib/Config.pm:574
  out $=Config::FETCH('Config=HASH(0x1aa444)', 'baserev') from lib/Config.pm:574

=item 6

 in  $=CODE(0x15eca4)() from /dev/null:0
  in  $=CODE(0x182528)() from lib/Config.pm:2
   Package lib/Exporter.pm.
  out $=CODE(0x182528)() from lib/Config.pm:0
  scalar context return from CODE(0x182528): undef
  Package lib/Config.pm.
  in  $=Config::TIEHASH('Config') from lib/Config.pm:628
  out $=Config::TIEHASH('Config') from lib/Config.pm:628
  scalar context return from Config::TIEHASH:   empty hash
  in  $=Exporter::import('Config', 'myconfig', 'config_vars') from /dev/null:0
   in  $=Exporter::export('Config', 'main', 'myconfig', 'config_vars') from lib/Exporter.pm:171
   out $=Exporter::export('Config', 'main', 'myconfig', 'config_vars') from lib/Exporter.pm:171
   scalar context return from Exporter::export: ''
  out $=Exporter::import('Config', 'myconfig', 'config_vars') from /dev/null:0
  scalar context return from Exporter::import: ''

=back

In all cases shown above, the line indentation shows the call tree.
If bit 2 of C<frame> is set, a line is printed on exit from a
subroutine as well.  If bit 4 is set, the arguments are printed
along with the caller info.  If bit 8 is set, the arguments are
printed even if they are tied or references.  If bit 16 is set, the
return value is printed, too.

When a package is compiled, a line like this

    Package lib/Carp.pm.

is printed with proper indentation.

=head1 Debugging Regular Expressions

There are two ways to enable debugging output for regular expressions.

If your perl is compiled with C<-DDEBUGGING>, you may use the
B<-Dr> flag on the command line.

Otherwise, one can C<use re 'debug'>, which has effects at
compile time and run time.  Since Perl 5.9.5, this pragma is lexically
scoped.

=head2 Compile-time Output

The debugging output at compile time looks like this:

  Compiling REx '[bc]d(ef*g)+h[ij]k$'
  size 45 Got 364 bytes for offset annotations.
  first at 1
  rarest char g at 0
  rarest char d at 0
     1: ANYOF[bc](12)
    12: EXACT <d>(14)
    14: CURLYX[0] {1,32767}(28)
    16:   OPEN1(18)
    18:     EXACT <e>(20)
    20:     STAR(23)
    21:       EXACT <f>(0)
    23:     EXACT <g>(25)
    25:   CLOSE1(27)
    27:   WHILEM[1/1](0)
    28: NOTHING(29)
    29: EXACT <h>(31)
    31: ANYOF[ij](42)
    42: EXACT <k>(44)
    44: EOL(45)
    45: END(0)
  anchored 'de' at 1 floating 'gh' at 3..2147483647 (checking floating) 
        stclass 'ANYOF[bc]' minlen 7 
  Offsets: [45]
  	1[4] 0[0] 0[0] 0[0] 0[0] 0[0] 0[0] 0[0] 0[0] 0[0] 0[0] 5[1]
  	0[0] 12[1] 0[0] 6[1] 0[0] 7[1] 0[0] 9[1] 8[1] 0[0] 10[1] 0[0]
  	11[1] 0[0] 12[0] 12[0] 13[1] 0[0] 14[4] 0[0] 0[0] 0[0] 0[0]
  	0[0] 0[0] 0[0] 0[0] 0[0] 0[0] 18[1] 0[0] 19[1] 20[0]  
  Omitting $` $& $' support.

The first line shows the pre-compiled form of the regex.  The second
shows the size of the compiled form (in arbitrary units, usually
4-byte words) and the total number of bytes allocated for the
offset/length table, usually 4+C<size>*8.  The next line shows the
label I<id> of the first node that does a match.

The 

  anchored 'de' at 1 floating 'gh' at 3..2147483647 (checking floating) 
        stclass 'ANYOF[bc]' minlen 7 

line (split into two lines above) contains optimizer
information.  In the example shown, the optimizer found that the match 
should contain a substring C<de> at offset 1, plus substring C<gh>
at some offset between 3 and infinity.  Moreover, when checking for
these substrings (to abandon impossible matches quickly), Perl will check
for the substring C<gh> before checking for the substring C<de>.  The
optimizer may also use the knowledge that the match starts (at the
C<first> I<id>) with a character class, and no string 
shorter than 7 characters can possibly match.

The fields of interest which may appear in this line are

=over 4

=item C<anchored> I<STRING> C<at> I<POS>

=item C<floating> I<STRING> C<at> I<POS1..POS2>

See above.

=item C<matching floating/anchored>

Which substring to check first.

=item C<minlen>

The minimal length of the match.

=item C<stclass> I<TYPE>

Type of first matching node.

=item C<noscan>

Don't scan for the found substrings.

=item C<isall>

Means that the optimizer information is all that the regular
expression contains, and thus one does not need to enter the regex engine at
all.

=item C<GPOS>

Set if the pattern contains C<\G>.

=item C<plus> 

Set if the pattern starts with a repeated char (as in C<x+y>).

=item C<implicit>

Set if the pattern starts with C<.*>.

=item C<with eval> 

Set if the pattern contain eval-groups, such as C<(?{ code })> and
C<(??{ code })>.

=item C<anchored(TYPE)>

If the pattern may match only at a handful of places, with C<TYPE>
being C<SBOL>, C<MBOL>, or C<GPOS>.  See the table below.

=back

If a substring is known to match at end-of-line only, it may be
followed by C<$>, as in C<floating 'k'$>.

The optimizer-specific information is used to avoid entering (a slow) regex
engine on strings that will not definitely match.  If the C<isall> flag
is set, a call to the regex engine may be avoided even when the optimizer
found an appropriate place for the match.

Above the optimizer section is the list of I<nodes> of the compiled
form of the regex.  Each line has format 

C<   >I<id>: I<TYPE> I<OPTIONAL-INFO> (I<next-id>)

=head2 Types of Nodes

Here are the current possible types, with short descriptions:

=for comment
This table is generated by regen/regcomp.pl.  Any changes made here
will be lost.

=for regcomp.pl begin

 # TYPE arg-description [num-args] [longjump-len] DESCRIPTION

 # Exit points

 END             no         End of program.
 SUCCEED         no         Return from a subroutine, basically.

 # Line Start Anchors:
 SBOL            no         Match "" at beginning of line: /^/, /\A/
 MBOL            no         Same, assuming multiline: /^/m

 # Line End Anchors:
 SEOL            no         Match "" at end of line: /$/
 MEOL            no         Same, assuming multiline: /$/m
 EOS             no         Match "" at end of string: /\z/

 # Match Start Anchors:
 GPOS            no         Matches where last m//g left off.

 # Word Boundary Opcodes:
 BOUND           no         Like BOUNDA for non-utf8, otherwise match ""
                            between any Unicode \w\W or \W\w
 BOUNDL          no         Like BOUND/BOUNDU, but \w and \W are defined
                            by current locale
 BOUNDU          no         Match "" at any boundary of a given type
                            using Unicode rules
 BOUNDA          no         Match "" at any boundary between \w\W or
                            \W\w, where \w is [_a-zA-Z0-9]
 NBOUND          no         Like NBOUNDA for non-utf8, otherwise match
                            "" between any Unicode \w\w or \W\W
 NBOUNDL         no         Like NBOUND/NBOUNDU, but \w and \W are
                            defined by current locale
 NBOUNDU         no         Match "" at any non-boundary of a given type
                            using using Unicode rules
 NBOUNDA         no         Match "" betweeen any \w\w or \W\W, where \w
                            is [_a-zA-Z0-9]

 # [Special] alternatives:
 REG_ANY         no         Match any one character (except newline).
 SANY            no         Match any one character.
 ANYOF           sv 1       Match character in (or not in) this class,
                            single char match only
 ANYOFD          sv 1       Like ANYOF, but /d is in effect
 ANYOFL          sv 1       Like ANYOF, but /l is in effect

 # POSIX Character Classes:
 POSIXD          none       Some [[:class:]] under /d; the FLAGS field
                            gives which one
 POSIXL          none       Some [[:class:]] under /l; the FLAGS field
                            gives which one
 POSIXU          none       Some [[:class:]] under /u; the FLAGS field
                            gives which one
 POSIXA          none       Some [[:class:]] under /a; the FLAGS field
                            gives which one
 NPOSIXD         none       complement of POSIXD, [[:^class:]]
 NPOSIXL         none       complement of POSIXL, [[:^class:]]
 NPOSIXU         none       complement of POSIXU, [[:^class:]]
 NPOSIXA         none       complement of POSIXA, [[:^class:]]

 CLUMP           no         Match any extended grapheme cluster sequence

 # Alternation

 # BRANCH        The set of branches constituting a single choice are
 #               hooked together with their "next" pointers, since
 #               precedence prevents anything being concatenated to
 #               any individual branch.  The "next" pointer of the last
 #               BRANCH in a choice points to the thing following the
 #               whole choice.  This is also where the final "next"
 #               pointer of each individual branch points; each branch
 #               starts with the operand node of a BRANCH node.
 #
 BRANCH          node       Match this alternative, or the next...

 # Literals

 EXACT           str        Match this string (preceded by length).
 EXACTL          str        Like EXACT, but /l is in effect (used so
                            locale-related warnings can be checked for).
 EXACTF          str        Match this non-UTF-8 string (not guaranteed
                            to be folded) using /id rules (w/len).
 EXACTFL         str        Match this string (not guaranteed to be
                            folded) using /il rules (w/len).
 EXACTFU         str        Match this string (folded iff in UTF-8,
                            length in folding doesn't change if not in
                            UTF-8) using /iu rules (w/len).
 EXACTFA         str        Match this string (not guaranteed to be
                            folded) using /iaa rules (w/len).

 EXACTFU_SS      str        Match this string (folded iff in UTF-8,
                            length in folding may change even if not in
                            UTF-8) using /iu rules (w/len).
 EXACTFLU8       str        Rare cirucmstances: like EXACTFU, but is
                            under /l, UTF-8, folded, and everything in
                            it is above 255.
 EXACTFA_NO_TRIE str        Match this string (which is not trie-able;
                            not guaranteed to be folded) using /iaa
                            rules (w/len).

 # Do nothing types

 NOTHING         no         Match empty string.
 # A variant of above which delimits a group, thus stops optimizations
 TAIL            no         Match empty string. Can jump here from
                            outside.

 # Loops

 # STAR,PLUS    '?', and complex '*' and '+', are implemented as
 #               circular BRANCH structures.  Simple cases
 #               (one character per match) are implemented with STAR
 #               and PLUS for speed and to minimize recursive plunges.
 #
 STAR            node       Match this (simple) thing 0 or more times.
 PLUS            node       Match this (simple) thing 1 or more times.

 CURLY           sv 2       Match this simple thing {n,m} times.
 CURLYN          no 2       Capture next-after-this simple thing
 CURLYM          no 2       Capture this medium-complex thing {n,m}
                            times.
 CURLYX          sv 2       Match this complex thing {n,m} times.

 # This terminator creates a loop structure for CURLYX
 WHILEM          no         Do curly processing and see if rest matches.

 # Buffer related

 # OPEN,CLOSE,GROUPP     ...are numbered at compile time.
 OPEN            num 1      Mark this point in input as start of #n.
 CLOSE           num 1      Analogous to OPEN.

 REF             num 1      Match some already matched string
 REFF            num 1      Match already matched string, folded using
                            native charset rules for non-utf8
 REFFL           num 1      Match already matched string, folded in loc.
 REFFU           num 1      Match already matched string, folded using
                            unicode rules for non-utf8
 REFFA           num 1      Match already matched string, folded using
                            unicode rules for non-utf8, no mixing ASCII,
                            non-ASCII

 # Named references.  Code in regcomp.c assumes that these all are after
 # the numbered references
 NREF            no-sv 1    Match some already matched string
 NREFF           no-sv 1    Match already matched string, folded using
                            native charset rules for non-utf8
 NREFFL          no-sv 1    Match already matched string, folded in loc.
 NREFFU          num 1      Match already matched string, folded using
                            unicode rules for non-utf8
 NREFFA          num 1      Match already matched string, folded using
                            unicode rules for non-utf8, no mixing ASCII,
                            non-ASCII

 # Support for long RE
 LONGJMP         off 1 1    Jump far away.
 BRANCHJ         off 1 1    BRANCH with long offset.

 # Special Case Regops
 IFMATCH         off 1 2    Succeeds if the following matches.
 UNLESSM         off 1 2    Fails if the following matches.
 SUSPEND         off 1 1    "Independent" sub-RE.
 IFTHEN          off 1 1    Switch, should be preceded by switcher.
 GROUPP          num 1      Whether the group matched.

 # The heavy worker

 EVAL            evl/flags  Execute some Perl code.
                 2L

 # Modifiers

 MINMOD          no         Next operator is not greedy.
 LOGICAL         no         Next opcode should set the flag only.

 # This is not used yet
 RENUM           off 1 1    Group with independently numbered parens.

 # Trie Related

 # Behave the same as A|LIST|OF|WORDS would. The '..C' variants
 # have inline charclass data (ascii only), the 'C' store it in the
 # structure.

 TRIE            trie 1     Match many EXACT(F[ALU]?)? at once.
                            flags==type
 TRIEC           trie       Same as TRIE, but with embedded charclass
                 charclass  data

 AHOCORASICK     trie 1     Aho Corasick stclass. flags==type
 AHOCORASICKC    trie       Same as AHOCORASICK, but with embedded
                 charclass  charclass data

 # Regex Subroutines
 GOSUB           num/ofs 2L recurse to paren arg1 at (signed) ofs arg2

 # Special conditionals
 NGROUPP         no-sv 1    Whether the group matched.
 INSUBP          num 1      Whether we are in a specific recurse.
 DEFINEP         none 1     Never execute directly.

 # Backtracking Verbs
 ENDLIKE         none       Used only for the type field of verbs
 OPFAIL          no-sv 1    Same as (?!), but with verb arg
 ACCEPT          no-sv/num  Accepts the current matched string, with
                 2L         verbar

 # Verbs With Arguments
 VERB            no-sv 1    Used only for the type field of verbs
 PRUNE           no-sv 1    Pattern fails at this startpoint if no-
                            backtracking through this
 MARKPOINT       no-sv 1    Push the current location for rollback by
                            cut.
 SKIP            no-sv 1    On failure skip forward (to the mark) before
                            retrying
 COMMIT          no-sv 1    Pattern fails outright if backtracking
                            through this
 CUTGROUP        no-sv 1    On failure go to the next alternation in the
                            group

 # Control what to keep in $&.
 KEEPS           no         $& begins here.

 # New charclass like patterns
 LNBREAK         none       generic newline pattern

 # SPECIAL  REGOPS

 # This is not really a node, but an optimized away piece of a "long"
 # node.  To simplify debugging output, we mark it as if it were a node
 OPTIMIZED       off        Placeholder for dump.

 # Special opcode with the property that no opcode in a compiled program
 # will ever be of this type. Thus it can be used as a flag value that
 # no other opcode has been seen. END is used similarly, in that an END
 # node cant be optimized. So END implies "unoptimizable" and PSEUDO
 # mean "not seen anything to optimize yet".
 PSEUDO          off        Pseudo opcode for internal use.

=for regcomp.pl end

=for unprinted-credits
Next section M-J. Dominus (mjd-perl-patch+@@plover.com) 20010421

Following the optimizer information is a dump of the offset/length
table, here split across several lines:

  Offsets: [45]
  	1[4] 0[0] 0[0] 0[0] 0[0] 0[0] 0[0] 0[0] 0[0] 0[0] 0[0] 5[1]
  	0[0] 12[1] 0[0] 6[1] 0[0] 7[1] 0[0] 9[1] 8[1] 0[0] 10[1] 0[0]
  	11[1] 0[0] 12[0] 12[0] 13[1] 0[0] 14[4] 0[0] 0[0] 0[0] 0[0]
  	0[0] 0[0] 0[0] 0[0] 0[0] 0[0] 18[1] 0[0] 19[1] 20[0]  

The first line here indicates that the offset/length table contains 45
entries.  Each entry is a pair of integers, denoted by C<offset[length]>.
Entries are numbered starting with 1, so entry #1 here is C<1[4]> and
entry #12 is C<5[1]>.  C<1[4]> indicates that the node labeled C<1:>
(the C<1: ANYOF[bc]>) begins at character position 1 in the
pre-compiled form of the regex, and has a length of 4 characters.
C<5[1]> in position 12 
indicates that the node labeled C<12:>
(the C<< 12: EXACT <d> >>) begins at character position 5 in the
pre-compiled form of the regex, and has a length of 1 character.
C<12[1]> in position 14 
indicates that the node labeled C<14:>
(the C<< 14: CURLYX[0] {1,32767} >>) begins at character position 12 in the
pre-compiled form of the regex, and has a length of 1 character---that
is, it corresponds to the C<+> symbol in the precompiled regex.

C<0[0]> items indicate that there is no corresponding node.

=head2 Run-time Output

First of all, when doing a match, one may get no run-time output even
if debugging is enabled.  This means that the regex engine was never
entered and that all of the job was therefore done by the optimizer.

If the regex engine was entered, the output may look like this:

  Matching '[bc]d(ef*g)+h[ij]k$' against 'abcdefg__gh__'
    Setting an EVAL scope, savestack=3
     2 <ab> <cdefg__gh_>    |  1: ANYOF
     3 <abc> <defg__gh_>    | 11: EXACT <d>
     4 <abcd> <efg__gh_>    | 13: CURLYX {1,32767}
     4 <abcd> <efg__gh_>    | 26:   WHILEM
				0 out of 1..32767  cc=effff31c
     4 <abcd> <efg__gh_>    | 15:     OPEN1
     4 <abcd> <efg__gh_>    | 17:     EXACT <e>
     5 <abcde> <fg__gh_>    | 19:     STAR
			     EXACT <f> can match 1 times out of 32767...
    Setting an EVAL scope, savestack=3
     6 <bcdef> <g__gh__>    | 22:       EXACT <g>
     7 <bcdefg> <__gh__>    | 24:       CLOSE1
     7 <bcdefg> <__gh__>    | 26:       WHILEM
				    1 out of 1..32767  cc=effff31c
    Setting an EVAL scope, savestack=12
     7 <bcdefg> <__gh__>    | 15:         OPEN1
     7 <bcdefg> <__gh__>    | 17:         EXACT <e>
       restoring \1 to 4(4)..7
				    failed, try continuation...
     7 <bcdefg> <__gh__>    | 27:         NOTHING
     7 <bcdefg> <__gh__>    | 28:         EXACT <h>
				    failed...
				failed...

The most significant information in the output is about the particular I<node>
of the compiled regex that is currently being tested against the target string.
The format of these lines is

C<    >I<STRING-OFFSET> <I<PRE-STRING>> <I<POST-STRING>>   |I<ID>:  I<TYPE>

The I<TYPE> info is indented with respect to the backtracking level.
Other incidental information appears interspersed within.

=head1 Debugging Perl Memory Usage

Perl is a profligate wastrel when it comes to memory use.  There
is a saying that to estimate memory usage of Perl, assume a reasonable
algorithm for memory allocation, multiply that estimate by 10, and
while you still may miss the mark, at least you won't be quite so
astonished.  This is not absolutely true, but may provide a good
grasp of what happens.

Assume that an integer cannot take less than 20 bytes of memory, a
float cannot take less than 24 bytes, a string cannot take less
than 32 bytes (all these examples assume 32-bit architectures, the
result are quite a bit worse on 64-bit architectures).  If a variable
is accessed in two of three different ways (which require an integer,
a float, or a string), the memory footprint may increase yet another
20 bytes.  A sloppy malloc(3) implementation can inflate these
numbers dramatically.

On the opposite end of the scale, a declaration like

  sub foo;

may take up to 500 bytes of memory, depending on which release of Perl
you're running.

Anecdotal estimates of source-to-compiled code bloat suggest an
eightfold increase.  This means that the compiled form of reasonable
(normally commented, properly indented etc.) code will take
about eight times more space in memory than the code took
on disk.

The B<-DL> command-line switch is obsolete since circa Perl 5.6.0
(it was available only if Perl was built with C<-DDEBUGGING>).
The switch was used to track Perl's memory allocations and possible
memory leaks.  These days the use of malloc debugging tools like
F<Purify> or F<valgrind> is suggested instead.  See also
L<perlhacktips/PERL_MEM_LOG>.

One way to find out how much memory is being used by Perl data
structures is to install the Devel::Size module from CPAN: it gives
you the minimum number of bytes required to store a particular data
structure.  Please be mindful of the difference between the size()
and total_size().

If Perl has been compiled using Perl's malloc you can analyze Perl
memory usage by setting $ENV{PERL_DEBUG_MSTATS}.

=head2 Using C<$ENV{PERL_DEBUG_MSTATS}>

If your perl is using Perl's malloc() and was compiled with the
necessary switches (this is the default), then it will print memory
usage statistics after compiling your code when C<< $ENV{PERL_DEBUG_MSTATS}
> 1 >>, and before termination of the program when C<<
$ENV{PERL_DEBUG_MSTATS} >= 1 >>.  The report format is similar to
the following example:

 $ PERL_DEBUG_MSTATS=2 perl -e "require Carp"
 Memory allocation statistics after compilation: (buckets 4(4)..8188(8192)
    14216 free:   130   117    28     7     9   0   2     2   1 0 0
		437    61    36     0     5
    60924 used:   125   137   161    55     7   8   6    16   2 0 1
		 74   109   304    84    20
 Total sbrk(): 77824/21:119. Odd ends: pad+heads+chain+tail: 0+636+0+2048.
 Memory allocation statistics after execution:   (buckets 4(4)..8188(8192)
    30888 free:   245    78    85    13     6   2   1     3   2 0 1
		315   162    39    42    11
   175816 used:   265   176  1112   111    26  22  11    27   2 1 1
		196   178  1066   798    39
 Total sbrk(): 215040/47:145. Odd ends: pad+heads+chain+tail: 0+2192+0+6144.

It is possible to ask for such a statistic at arbitrary points in
your execution using the mstat() function out of the standard
Devel::Peek module.

Here is some explanation of that format:

=over 4

=item C<buckets SMALLEST(APPROX)..GREATEST(APPROX)>

Perl's malloc() uses bucketed allocations.  Every request is rounded
up to the closest bucket size available, and a bucket is taken from
the pool of buckets of that size.

The line above describes the limits of buckets currently in use.
Each bucket has two sizes: memory footprint and the maximal size
of user data that can fit into this bucket.  Suppose in the above
example that the smallest bucket were size 4.  The biggest bucket
would have usable size 8188, and the memory footprint would be 8192.

In a Perl built for debugging, some buckets may have negative usable
size.  This means that these buckets cannot (and will not) be used.
For larger buckets, the memory footprint may be one page greater
than a power of 2.  If so, the corresponding power of two is
printed in the C<APPROX> field above.

=item Free/Used

The 1 or 2 rows of numbers following that correspond to the number
of buckets of each size between C<SMALLEST> and C<GREATEST>.  In
the first row, the sizes (memory footprints) of buckets are powers
of two--or possibly one page greater.  In the second row, if present,
the memory footprints of the buckets are between the memory footprints
of two buckets "above".

For example, suppose under the previous example, the memory footprints
were

   free:    8     16    32    64    128  256 512 1024 2048 4096 8192
	   4     12    24    48    80

With a non-C<DEBUGGING> perl, the buckets starting from C<128> have
a 4-byte overhead, and thus an 8192-long bucket may take up to
8188-byte allocations.

=item C<Total sbrk(): SBRKed/SBRKs:CONTINUOUS>

The first two fields give the total amount of memory perl sbrk(2)ed
(ess-broken? :-) and number of sbrk(2)s used.  The third number is
what perl thinks about continuity of returned chunks.  So long as
this number is positive, malloc() will assume that it is probable
that sbrk(2) will provide continuous memory.

Memory allocated by external libraries is not counted.

=item C<pad: 0>

The amount of sbrk(2)ed memory needed to keep buckets aligned.

=item C<heads: 2192>

Although memory overhead of bigger buckets is kept inside the bucket, for
smaller buckets, it is kept in separate areas.  This field gives the
total size of these areas.

=item C<chain: 0>

malloc() may want to subdivide a bigger bucket into smaller buckets.
If only a part of the deceased bucket is left unsubdivided, the rest
is kept as an element of a linked list.  This field gives the total
size of these chunks.

=item C<tail: 6144>

To minimize the number of sbrk(2)s, malloc() asks for more memory.  This
field gives the size of the yet unused part, which is sbrk(2)ed, but
never touched.

=back

=head1 SEE ALSO

L<perldebug>,
L<perlguts>,
L<perlrun>
L<re>,
and
L<Devel::DProf>.
@


1.1
log
@Initial revision
@
text
@d7 5
a11 4
This is not the perldebug(1) manpage, which tells you how to use
the debugger.  This manpage describes low-level details ranging
between difficult and impossible for anyone who isn't incredibly
intimate with Perl's guts to understand.  Caveat lector.
d17 2
a18 2
with the I<perl -Dxxx> command described in L<perlrun>, which are
usable only if a special Perl built per the instructions the
d22 5
a26 4
from the package DB, the arguments that the corresponding stack
frame was called with are copied to the the @@DB::args array.  The
general mechanisms is enabled by calling Perl with the B<-d> switch, the
following additional features are enabled (cf. L<perlvar/$^P>):
d28 1
a28 1
=over
d37 7
a43 5
The array C<@@{"_<$filename"}> holds the lines of $filename for all
files compiled by Perl.  The same for C<eval>ed strings that contain
subroutines, or which are currently being executed.  The $filename
for C<eval>ed strings looks like C<(eval 34)>.   Code assertions
in regexes look like C<(re_eval 19)>.
d47 1
a47 1
The hash C<%{"_<$filename"}> contains breakpoints and actions keyed
d51 1
a51 2
C<"$break_condition\0$action">.  Values in this hash are magical
in numeric context: they are zeros if the line is not breakable.
d55 1
a55 1
looks like C<(eval 34)> or  C<(re_eval 19)>.
d59 1
a59 1
The scalar C<${"_<$filename"}> contains C<"_<$filename">.  This is
d62 1
a62 1
strings looks like C<(eval 34)> or C<(re_eval 19)>.
d83 1
a83 1
C<eval>s, or C<(re_eval 19)> for those within regex code assertions.
d88 2
a89 2
breakpoint, the C<DB::DB()> subroutine is called any of the variables
$DB::trace, $DB::single, or $DB::signal is true.  These variables
d98 1
a98 1
name of the called subroutine.  This doesn't happen if the subroutine
d101 11
d115 5
a119 4
subroutine call is possible until this is done.  For the standard
debugger, the  C<$DB::deep> variable (how many levels of recursion
deep into the debugger you can go before a mandatory break) gives
an example of such a dependency.
d123 5
a127 1
The minimal working debugger consists of one line
d131 1
a131 2
which is quite handy as contents of C<PERL5DB> environment
variable:
d135 1
a135 1
Another brief debugger, slightly more useful, could be created
d140 3
a142 2
This debugger would print the sequential number of encountered
statement, and would wait for you to hit a newline before continuing.
d144 1
a144 1
The following debugger is quite functional:
d152 8
a159 8
It prints the sequential number of subroutine call and the name of the
called subroutine.  Note that C<&DB::sub> should be compiled into the
package C<DB>.

At the start, the debugger reads your rc file (F<./.perldb> or
F<~/.perldb> under Unix), which can set important options.  This file may
define a subroutine C<&afterinit> to be executed after the debugger is
initialized.
d162 20
a181 2
environment variable and parses this as the remainder of a C<O ...>
line as one might enter at the debugger prompt.
d183 5
a187 4
The debugger also maintains magical internal variables, such as
C<@@DB::dbline>, C<%DB::dbline>, which are aliases for
C<@@{"::_<current_file"}> C<%{"::_<current_file"}>.  Here C<current_file>
is the currently selected file, either explicitly chosen with the
d190 24
a213 7
Some functions are provided to simplify customization.  See
L<perldebug/"Options"> for description of options parsed by
C<DB::parse_options(string)>.  The function C<DB::dump_trace(skip[,
count])> skips the specified number of frames and returns a list
containing information about the calling frames (all of them, if
C<count> is missing).  Each entry is reference to a a hash with
keys C<context> (either C<.>, C<$>, or C<@@>), C<sub> (subroutine
d217 3
a219 1
The function C<DB::print_trace(FH, skip[, count[, short]])> prints
d223 2
d240 1
a240 1
 Enter h or `h h' for help.
d253 1
a253 1
with this one, once the C<O>ption C<frame=2> has been set:
d255 1
a255 1
   DB<4> O f=2
d270 2
a271 2
Examples use various values of C<n> are shown to give you a feel
for the difference between settings.  Long those it may be, this
d278 13
a290 13
  entering main::BEGIN
   entering Config::BEGIN
    Package lib/Exporter.pm.
    Package lib/Carp.pm.
   Package lib/Config.pm.
   entering Config::TIEHASH
   entering Exporter::import
    entering Exporter::export
  entering Config::myconfig
   entering Config::FETCH
   entering Config::FETCH
   entering Config::FETCH
   entering Config::FETCH
d294 37
a330 19
  entering main::BEGIN
   entering Config::BEGIN
    Package lib/Exporter.pm.
    Package lib/Carp.pm.
   exited Config::BEGIN
   Package lib/Config.pm.
   entering Config::TIEHASH
   exited Config::TIEHASH
   entering Exporter::import
    entering Exporter::export
    exited Exporter::export
   exited Exporter::import
  exited main::BEGIN
  entering Config::myconfig
   entering Config::FETCH
   exited Config::FETCH
   entering Config::FETCH
   exited Config::FETCH
   entering Config::FETCH
d334 42
a375 15
  in  $=main::BEGIN() from /dev/null:0
   in  $=Config::BEGIN() from lib/Config.pm:2
    Package lib/Exporter.pm.
    Package lib/Carp.pm.
   Package lib/Config.pm.
   in  $=Config::TIEHASH('Config') from lib/Config.pm:644
   in  $=Exporter::import('Config', 'myconfig', 'config_vars') from /dev/null:0
    in  $=Exporter::export('Config', 'main', 'myconfig', 'config_vars') from li
  in  @@=Config::myconfig() from /dev/null:0
   in  $=Config::FETCH(ref(Config), 'package') from lib/Config.pm:574
   in  $=Config::FETCH(ref(Config), 'baserev') from lib/Config.pm:574
   in  $=Config::FETCH(ref(Config), 'PERL_VERSION') from lib/Config.pm:574
   in  $=Config::FETCH(ref(Config), 'PERL_SUBVERSION') from lib/Config.pm:574
   in  $=Config::FETCH(ref(Config), 'osname') from lib/Config.pm:574
   in  $=Config::FETCH(ref(Config), 'osvers') from lib/Config.pm:574
d379 15
a393 60
  in  $=main::BEGIN() from /dev/null:0
   in  $=Config::BEGIN() from lib/Config.pm:2
    Package lib/Exporter.pm.
    Package lib/Carp.pm.
   out $=Config::BEGIN() from lib/Config.pm:0
   Package lib/Config.pm.
   in  $=Config::TIEHASH('Config') from lib/Config.pm:644
   out $=Config::TIEHASH('Config') from lib/Config.pm:644
   in  $=Exporter::import('Config', 'myconfig', 'config_vars') from /dev/null:0
    in  $=Exporter::export('Config', 'main', 'myconfig', 'config_vars') from lib/
    out $=Exporter::export('Config', 'main', 'myconfig', 'config_vars') from lib/
   out $=Exporter::import('Config', 'myconfig', 'config_vars') from /dev/null:0
  out $=main::BEGIN() from /dev/null:0
  in  @@=Config::myconfig() from /dev/null:0
   in  $=Config::FETCH(ref(Config), 'package') from lib/Config.pm:574
   out $=Config::FETCH(ref(Config), 'package') from lib/Config.pm:574
   in  $=Config::FETCH(ref(Config), 'baserev') from lib/Config.pm:574
   out $=Config::FETCH(ref(Config), 'baserev') from lib/Config.pm:574
   in  $=Config::FETCH(ref(Config), 'PERL_VERSION') from lib/Config.pm:574
   out $=Config::FETCH(ref(Config), 'PERL_VERSION') from lib/Config.pm:574
   in  $=Config::FETCH(ref(Config), 'PERL_SUBVERSION') from lib/Config.pm:574

=item 14

  in  $=main::BEGIN() from /dev/null:0
   in  $=Config::BEGIN() from lib/Config.pm:2
    Package lib/Exporter.pm.
    Package lib/Carp.pm.
   out $=Config::BEGIN() from lib/Config.pm:0
   Package lib/Config.pm.
   in  $=Config::TIEHASH('Config') from lib/Config.pm:644
   out $=Config::TIEHASH('Config') from lib/Config.pm:644
   in  $=Exporter::import('Config', 'myconfig', 'config_vars') from /dev/null:0
    in  $=Exporter::export('Config', 'main', 'myconfig', 'config_vars') from lib/E
    out $=Exporter::export('Config', 'main', 'myconfig', 'config_vars') from lib/E
   out $=Exporter::import('Config', 'myconfig', 'config_vars') from /dev/null:0
  out $=main::BEGIN() from /dev/null:0
  in  @@=Config::myconfig() from /dev/null:0
   in  $=Config::FETCH('Config=HASH(0x1aa444)', 'package') from lib/Config.pm:574
   out $=Config::FETCH('Config=HASH(0x1aa444)', 'package') from lib/Config.pm:574
   in  $=Config::FETCH('Config=HASH(0x1aa444)', 'baserev') from lib/Config.pm:574
   out $=Config::FETCH('Config=HASH(0x1aa444)', 'baserev') from lib/Config.pm:574

=item 30

  in  $=CODE(0x15eca4)() from /dev/null:0
   in  $=CODE(0x182528)() from lib/Config.pm:2
    Package lib/Exporter.pm.
   out $=CODE(0x182528)() from lib/Config.pm:0
   scalar context return from CODE(0x182528): undef
   Package lib/Config.pm.
   in  $=Config::TIEHASH('Config') from lib/Config.pm:628
   out $=Config::TIEHASH('Config') from lib/Config.pm:628
   scalar context return from Config::TIEHASH:   empty hash
   in  $=Exporter::import('Config', 'myconfig', 'config_vars') from /dev/null:0
    in  $=Exporter::export('Config', 'main', 'myconfig', 'config_vars') from lib/Exporter.pm:171
    out $=Exporter::export('Config', 'main', 'myconfig', 'config_vars') from lib/Exporter.pm:171
    scalar context return from Exporter::export: ''
   out $=Exporter::import('Config', 'myconfig', 'config_vars') from /dev/null:0
   scalar context return from Exporter::import: ''
d410 1
a410 1
=head1 Debugging regular expressions
d418 2
a419 1
compile time and run time.  It is not lexically scoped.
d421 1
a421 1
=head2 Compile-time output
d425 29
a453 20
  compiling RE `[bc]d(ef*g)+h[ij]k$'
  size 43 first at 1
     1: ANYOF(11)
    11: EXACT <d>(13)
    13: CURLYX {1,32767}(27)
    15:   OPEN1(17)
    17:     EXACT <e>(19)
    19:     STAR(22)
    20:       EXACT <f>(0)
    22:     EXACT <g>(24)
    24:   CLOSE1(26)
    26:   WHILEM(0)
    27: NOTHING(28)
    28: EXACT <h>(30)
    30: ANYOF(40)
    40: EXACT <k>(42)
    42: EOL(43)
    43: END(0)
  anchored `de' at 1 floating `gh' at 3..2147483647 (checking floating)
				    stclass `ANYOF' minlen 7
d457 8
a464 2
4-byte words) and the label I<id> of the first node that does a
match.
d466 1
a466 1
The last line (split into two lines above) contains optimizer
d473 2
a474 2
C<first> I<id>) with a character class, and the match cannot be
shorter than 7 chars.
d476 1
a476 1
The fields of interest which may appear in the last line are
d478 1
a478 1
=over
d504 1
a504 1
Means that the optimizer info is all that the regular
d527 2
a528 2
If the pattern may match only at a handful of places, (with C<TYPE>
being C<BOL>, C<MBOL>, or C<GPOS>.  See the table below.
d533 1
a533 1
followed by C<$>, as in C<floating `k'$>.
d535 2
a536 2
The optimizer-specific info is used to avoid entering (a slow) regex
engine on strings that will not definitely match.  If C<isall> flag
d540 1
a540 1
The rest of the output contains the list of I<nodes> of the compiled
d545 1
a545 1
=head2 Types of nodes
d547 1
a547 1
Here are the possible types, with short descriptions:
d549 273
a821 1
    # TYPE arg-description [num-args] [longjump-len] DESCRIPTION
d823 1
a823 107
    # Exit points
    END		no	End of program.
    SUCCEED	no	Return from a subroutine, basically.

    # Anchors:
    BOL		no	Match "" at beginning of line.
    MBOL	no	Same, assuming multiline.
    SBOL	no	Same, assuming singleline.
    EOS		no	Match "" at end of string.
    EOL		no	Match "" at end of line.
    MEOL	no	Same, assuming multiline.
    SEOL	no	Same, assuming singleline.
    BOUND	no	Match "" at any word boundary
    BOUNDL	no	Match "" at any word boundary
    NBOUND	no	Match "" at any word non-boundary
    NBOUNDL	no	Match "" at any word non-boundary
    GPOS	no	Matches where last m//g left off.

    # [Special] alternatives
    ANY		no	Match any one character (except newline).
    SANY	no	Match any one character.
    ANYOF	sv	Match character in (or not in) this class.
    ALNUM	no	Match any alphanumeric character
    ALNUML	no	Match any alphanumeric char in locale
    NALNUM	no	Match any non-alphanumeric character
    NALNUML	no	Match any non-alphanumeric char in locale
    SPACE	no	Match any whitespace character
    SPACEL	no	Match any whitespace char in locale
    NSPACE	no	Match any non-whitespace character
    NSPACEL	no	Match any non-whitespace char in locale
    DIGIT	no	Match any numeric character
    NDIGIT	no	Match any non-numeric character

    # BRANCH	The set of branches constituting a single choice are hooked
    #		together with their "next" pointers, since precedence prevents
    #		anything being concatenated to any individual branch.  The
    #		"next" pointer of the last BRANCH in a choice points to the
    #		thing following the whole choice.  This is also where the
    #		final "next" pointer of each individual branch points; each
    #		branch starts with the operand node of a BRANCH node.
    #
    BRANCH	node	Match this alternative, or the next...

    # BACK	Normal "next" pointers all implicitly point forward; BACK
    #		exists to make loop structures possible.
    # not used
    BACK	no	Match "", "next" ptr points backward.

    # Literals
    EXACT	sv	Match this string (preceded by length).
    EXACTF	sv	Match this string, folded (prec. by length).
    EXACTFL	sv	Match this string, folded in locale (w/len).

    # Do nothing
    NOTHING	no	Match empty string.
    # A variant of above which delimits a group, thus stops optimizations
    TAIL	no	Match empty string. Can jump here from outside.

    # STAR,PLUS	'?', and complex '*' and '+', are implemented as circular
    #		BRANCH structures using BACK.  Simple cases (one character
    #		per match) are implemented with STAR and PLUS for speed
    #		and to minimize recursive plunges.
    #
    STAR	node	Match this (simple) thing 0 or more times.
    PLUS	node	Match this (simple) thing 1 or more times.

    CURLY	sv 2	Match this simple thing {n,m} times.
    CURLYN	no 2	Match next-after-this simple thing 
    #			{n,m} times, set parens.
    CURLYM	no 2	Match this medium-complex thing {n,m} times.
    CURLYX	sv 2	Match this complex thing {n,m} times.

    # This terminator creates a loop structure for CURLYX
    WHILEM	no	Do curly processing and see if rest matches.

    # OPEN,CLOSE,GROUPP	...are numbered at compile time.
    OPEN	num 1	Mark this point in input as start of #n.
    CLOSE	num 1	Analogous to OPEN.

    REF		num 1	Match some already matched string
    REFF	num 1	Match already matched string, folded
    REFFL	num 1	Match already matched string, folded in loc.

    # grouping assertions
    IFMATCH	off 1 2	Succeeds if the following matches.
    UNLESSM	off 1 2	Fails if the following matches.
    SUSPEND	off 1 1	"Independent" sub-regex.
    IFTHEN	off 1 1	Switch, should be preceded by switcher .
    GROUPP	num 1	Whether the group matched.

    # Support for long regex
    LONGJMP	off 1 1	Jump far away.
    BRANCHJ	off 1 1	BRANCH with long offset.

    # The heavy worker
    EVAL	evl 1	Execute some Perl code.

    # Modifiers
    MINMOD	no	Next operator is not greedy.
    LOGICAL	no	Next opcode should set the flag only.

    # This is not used yet
    RENUM	off 1 1	Group with independently numbered parens.

    # This is not really a node, but an optimized away piece of a "long" node.
    # To simplify debugging output, we mark it as if it were a node
    OPTIMIZED	off	Placeholder for dump.
d825 1
a825 1
=head2 Run-time output
d833 1
a833 1
  Matching `[bc]d(ef*g)+h[ij]k$' against `abcdefg__gh__'
d868 1
a868 1
=head1 Debugging Perl memory usage
d874 1
a874 1
astonished.  This is not absolutely true, but may prvide a good
d883 1
a883 1
20 bytes.  A sloppy malloc(3) implementation can make inflate these
d899 15
a913 6
There are two Perl-specific ways to analyze memory usage:
$ENV{PERL_DEBUG_MSTATS} and B<-DL> command-line switch.  The first
is available only if Perl is compiled with Perl's malloc(); the
second only if Perl was built with C<-DDEBUGGING>.  See the
instructions for how to do this in the F<INSTALL> podpage at 
the top level of the Perl source tree.
d919 1
a919 1
usage statistics after compiling your code hwen C<< $ENV{PERL_DEBUG_MSTATS}
d924 3
a926 3
  $ PERL_DEBUG_MSTATS=2 perl -e "require Carp"
  Memory allocation statistics after compilation: (buckets 4(4)..8188(8192)
     14216 free:   130   117    28     7     9   0   2     2   1 0 0
d928 1
a928 1
     60924 used:   125   137   161    55     7   8   6    16   2 0 1
d930 3
a932 3
  Total sbrk(): 77824/21:119. Odd ends: pad+heads+chain+tail: 0+636+0+2048.
  Memory allocation statistics after execution:   (buckets 4(4)..8188(8192)
     30888 free:   245    78    85    13     6   2   1     3   2 0 1
d934 1
a934 1
    175816 used:   265   176  1112   111    26  22  11    27   2 1 1
d936 1
a936 1
  Total sbrk(): 215040/47:145. Odd ends: pad+heads+chain+tail: 0+2192+0+6144.
d939 1
a939 1
your execution using the mstats() function out of the standard
d944 1
a944 1
=over
d961 1
a961 1
than a power of 2.  If so, case the corresponding power of two is
d973 1
a973 1
For example, suppose under the pervious example, the memory footprints
d976 1
a976 1
     free:    8     16    32    64    128  256 512 1024 2048 4096 8192
d979 2
a980 2
With non-C<DEBUGGING> perl, the buckets starting from C<128> have
a 4-byte overhead, and thus a 8192-long bucket may take up to
a1017 148
=head2 Example of using B<-DL> switch

Below we show how to analyse memory usage by 

  do 'lib/auto/POSIX/autosplit.ix';

The file in question contains a header and 146 lines similar to

  sub getcwd;

B<WARNING>: The discussion below supposes 32-bit architecture.  In 
newer releases of Perl, memory usage of the constructs discussed
here is greatly improved, but the story discussed below is a real-life
story.  This story is mercilessly terse, and assumes rather more than cursory
knowledge of Perl internals.  Type space to continue, `q' to quit. 
(Actually, you just want to skip to the next section.)

Here is the itemized list of Perl allocations performed during parsing
of this file:

 !!! "after" at test.pl line 3.
    Id  subtot   4   8  12  16  20  24  28  32  36  40  48  56  64  72  80 80+
  0 02   13752   .   .   .   . 294   .   .   .   .   .   .   .   .   .   .   4
  0 54    5545   .   .   8 124  16   .   .   .   1   1   .   .   .   .   .   3
  5 05      32   .   .   .   .   .   .   .   1   .   .   .   .   .   .   .   .
  6 02    7152   .   .   .   .   .   .   .   .   .   . 149   .   .   .   .   .
  7 02    3600   .   .   .   .   . 150   .   .   .   .   .   .   .   .   .   .
  7 03      64   .  -1   .   1   .   .   2   .   .   .   .   .   .   .   .   .
  7 04    7056   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   7
  7 17   38404   .   .   .   .   .   .   .   1   .   . 442 149   .   . 147   .
  9 03    2078  17 249  32   .   .   .   .   2   .   .   .   .   .   .   .   .


To see this list, insert two C<warn('!...')> statements around the call:

  warn('!');
  do 'lib/auto/POSIX/autosplit.ix';
  warn('!!! "after"');

and run it with PErl's B<-DL> option.  The first warn() will print
memory allocation info before parsing the file and will memorize
the statistics at this point (we ignore what it prints).  The second
warn() prints increments with respect to these memorized data.  This
is the printout shown above.

Different I<Id>s on the left correspond to different subsystems of
the perl interpreter.  They are just the first argument given to
the perl memory allocation API named New().  To find what C<9 03>
means, just B<grep> the perl source for C<903>.  You'll find it in
F<util.c>, function savepvn().  (I know, you wonder why we told you
to B<grep> and then gave away the answer.  That's because grepping
the source is good for the soul.)  This function is used to store
a copy of an existing chunk of memory.  Using a C debugger, one can
see that the function was called either directly from gv_init() or
via sv_magic(), and that gv_init() is called from gv_fetchpv()--which
was itself called from newSUB().  Please stop to catch your breath now.

B<NOTE>: To reach this point in the debugger and skip the calls to
savepvn() during the compilation of the main program, you should
set a C breakpoint
in Perl_warn(), continue until this point is reached, and I<then> set
a C breakpoint in Perl_savepvn().  Note that you may need to skip a
handful of Perl_savepvn() calls that do not correspond to mass production
of CVs (there are more C<903> allocations than 146 similar lines of
F<lib/auto/POSIX/autosplit.ix>).  Note also that C<Perl_> prefixes are
added by macroization code in perl header files to avoid conflicts
with external libraries.

Anyway, we see that C<903> ids correspond to creation of globs, twice
per glob - for glob name, and glob stringification magic.

Here are explanations for other I<Id>s above: 

=over

=item C<717> 

CReates bigger C<XPV*> structures.  In the case above, it
creates 3 C<AV>s per subroutine, one for a list of lexical variable
names, one for a scratchpad (which contains lexical variables and
C<targets>), and one for the array of scratchpads needed for
recursion.  

It also creates a C<GV> and a C<CV> per subroutine, all called from
start_subparse().

=item C<002>

Creates a C array corresponding to the C<AV> of scratchpads and the
scratchpad itself.  The first fake entry of this scratchpad is
created though the subroutine itself is not defined yet.

It also creates C arrays to keep data for the stash.  This is one HV,
but it grows; thus, there are 4 big allocations: the big chunks are not
freed, but are kept as additional arenas for C<SV> allocations.

=item C<054>

Creates a C<HEK> for the name of the glob for the subroutine.  This
name is a key in a I<stash>.

Big allocations with this I<Id> correspond to allocations of new
arenas to keep C<HE>.

=item C<602>

Creates a C<GP> for the glob for the subroutine.

=item C<702>

Creates the C<MAGIC> for the glob for the subroutine.

=item C<704>

Creates I<arenas> which keep SVs.

=back

=head2 B<-DL> details

If Perl is run with B<-DL> option, then warn()s that start with `!'
behave specially.  They print a list of I<categories> of memory
allocations, and statistics of allocations of different sizes for
these categories.

If warn() string starts with

=over

=item C<!!!> 

print changed categories only, print the differences in counts of allocations.

=item C<!!> 

print grown categories only; print the absolute values of counts, and totals.

=item C<!>

print nonempty categories, print the absolute values of counts and totals.

=back

=head2 Limitations of B<-DL> statistics

If an extension or external library does not use the Perl API to
allocate memory, such allocations are not counted.

d1025 1
a1025 1
L<Devel::Dprof>.
@


1.1.1.1
log
@virgin perl 5.6.0
@
text
@@


1.1.1.2
log
@stock perl 5.6.1
@
text
@d16 2
a17 2
with the I<perl -Dxxx> command described in L<perlrun>, which is
usable only if a special Perl is built per the instructions in the
d22 1
a22 1
frame was called with are copied to the @@DB::args array.  The
d26 1
a26 1
=over 4
d35 2
a36 2
Each array C<@@{"_<$filename"}> holds the lines of $filename for a
file compiled by Perl.  The same for C<eval>ed strings that contain
d39 1
a39 4
in regexes look like C<(re_eval 19)>.  

Values in this array are magical in numeric context: they compare
equal to zero only if the line is not breakable.
d43 1
a43 1
Each hash C<%{"_<$filename"}> contains breakpoints and actions keyed
d47 2
a48 1
C<"$break_condition\0$action">.  
d56 1
a56 1
Each scalar C<${"_<$filename"}> contains C<"_<$filename">.  This is
d157 1
a157 1
C<count> is missing).  Each entry is reference to a hash with
d403 1
a403 1
=over 4
d633 1
a633 1
astonished.  This is not absolutely true, but may provide a good
d642 1
a642 1
20 bytes.  A sloppy malloc(3) implementation can inflate these
d669 1
a669 1
usage statistics after compiling your code when C<< $ENV{PERL_DEBUG_MSTATS}
d689 1
a689 1
your execution using the mstat() function out of the standard
d694 1
a694 1
=over 4
d723 1
a723 1
For example, suppose under the previous example, the memory footprints
d807 1
a807 1
and run it with Perl's B<-DL> option.  The first warn() will print
d841 1
a841 1
=over 4
d845 1
a845 1
Creates bigger C<XPV*> structures.  In the case above, it
d895 1
a895 1
=over 4
@


1.1.1.3
log
@stock perl 5.8.0 from CPAN
@
text
@d8 3
a10 4
the debugger.  This manpage describes low-level details concerning
the debugger's internals, which range from difficult to impossible
to understand for anyone who isn't incredibly intimate with Perl's guts.
Caveat lector.
d21 4
a24 5
from the package C<DB>, the arguments that the corresponding stack
frame was called with are copied to the C<@@DB::args> array.  These
mechanisms are enabled by calling Perl with the B<-d> switch.
Specifically, the following additional features are enabled
(cf. L<perlvar/$^P>):
d36 4
a39 4
file compiled by Perl.  The same is also true for C<eval>ed strings
that contain subroutines, or which are currently being executed.
The $filename for C<eval>ed strings looks like C<(eval 34)>.
Code assertions in regexes look like C<(re_eval 19)>.
d87 2
a88 2
breakpoint, the C<DB::DB()> subroutine is called if any of the variables
C<$DB::trace>, C<$DB::single>, or C<$DB::signal> is true.  These variables
d97 1
a97 1
name of the called subroutine. (This doesn't happen if the subroutine
d103 4
a106 5
subroutine call is possible without it. As an example, the standard
debugger's C<&DB::sub> depends on the C<$DB::deep> variable
(it defines how many levels of recursion deep into the debugger you can go
before a mandatory break).  If C<$DB::deep> is not defined, subroutine
calls are not possible, even though C<&DB::sub> exists.
d110 1
a110 5
=head3 Environment Variables

The C<PERL5DB> environment variable can be used to define a debugger.
For example, the minimal "working" debugger (it actually doesn't do anything)
consists of one line:
d114 2
a115 1
It can easily be defined like this:
d119 1
a119 1
Another brief debugger, slightly more useful, can be created
d124 2
a125 3
This debugger prints a number which increments for each statement
encountered and waits for you to hit a newline before continuing
to the next statement.
d127 1
a127 1
The following debugger is actually useful:
d135 8
a142 8
It prints the sequence number of each subroutine call and the name of the
called subroutine.  Note that C<&DB::sub> is being compiled into the
package C<DB> through the use of the C<package> directive.

When it starts, the debugger reads your rc file (F<./.perldb> or
F<~/.perldb> under Unix), which can set important options.
(A subroutine (C<&afterinit>) can be defined here as well; it is executed
after the debugger completes its own initialization.)
d145 2
a146 19
environment variable and uses it to set debugger options. The
contents of this variable are treated as if they were the argument
of an C<o ...> debugger command (q.v. in L<perldebug/Options>).

=head3 Debugger internal variables
In addition to the file and subroutine-related variables mentioned above,
the debugger also maintains various magical internal variables.

=over 4

=item *

C<@@DB::dbline> is an alias for C<@@{"::_<current_file"}>, which
holds the lines of the currently-selected file (compiled by Perl), either
explicitly chosen with the debugger's C<f> command, or implicitly by flow
of execution.

Values in this array are magical in numeric context: they compare
equal to zero only if the line is not breakable.
d148 4
a151 5
=item *

C<%DB::dbline>, is an alias for C<%{"::_<current_file"}>, which
contains breakpoints and actions keyed by line number in
the currently-selected file, either explicitly chosen with the
d154 7
a160 25
As previously noted, individual entries (as opposed to the whole hash)
are settable.  Perl only cares about Boolean true here, although
the values used by F<perl5db.pl> have the form
C<"$break_condition\0$action">.

=back

=head3 Debugger customization functions

Some functions are provided to simplify customization.

=over 4

=item *

See L<perldebug/"Options"> for description of options parsed by
C<DB::parse_options(string)> parses debugger options; see
L<pperldebug/Options> for a description of options recognized.

=item *

C<DB::dump_trace(skip[,count])> skips the specified number of frames
and returns a list containing information about the calling frames (all
of them, if C<count> is missing).  Each entry is reference to a hash
with keys C<context> (either C<.>, C<$>, or C<@@>), C<sub> (subroutine
d164 1
a164 3
=item *

C<DB::print_trace(FH, skip[, count[, short]])> prints
a167 2
=back

d196 1
a196 1
with this one, once the C<o>ption C<frame=2> has been set:
d198 1
a198 1
   DB<4> o f=2
d367 20
a386 29
  Compiling REx `[bc]d(ef*g)+h[ij]k$'
  size 45 Got 364 bytes for offset annotations.
  first at 1
  rarest char g at 0
  rarest char d at 0
     1: ANYOF[bc](12)
    12: EXACT <d>(14)
    14: CURLYX[0] {1,32767}(28)
    16:   OPEN1(18)
    18:     EXACT <e>(20)
    20:     STAR(23)
    21:       EXACT <f>(0)
    23:     EXACT <g>(25)
    25:   CLOSE1(27)
    27:   WHILEM[1/1](0)
    28: NOTHING(29)
    29: EXACT <h>(31)
    31: ANYOF[ij](42)
    42: EXACT <k>(44)
    44: EOL(45)
    45: END(0)
  anchored `de' at 1 floating `gh' at 3..2147483647 (checking floating) 
        stclass `ANYOF[bc]' minlen 7 
  Offsets: [45]
  	1[4] 0[0] 0[0] 0[0] 0[0] 0[0] 0[0] 0[0] 0[0] 0[0] 0[0] 5[1]
  	0[0] 12[1] 0[0] 6[1] 0[0] 7[1] 0[0] 9[1] 8[1] 0[0] 10[1] 0[0]
  	11[1] 0[0] 12[0] 12[0] 13[1] 0[0] 14[4] 0[0] 0[0] 0[0] 0[0]
  	0[0] 0[0] 0[0] 0[0] 0[0] 0[0] 18[1] 0[0] 19[1] 20[0]  
  Omitting $` $& $' support.
d390 2
a391 8
4-byte words) and the total number of bytes allocated for the
offset/length table, usually 4+C<size>*8.  The next line shows the
label I<id> of the first node that does a match.

The 

  anchored `de' at 1 floating `gh' at 3..2147483647 (checking floating) 
        stclass `ANYOF[bc]' minlen 7 
d393 1
a393 1
line (split into two lines above) contains optimizer
d400 2
a401 2
C<first> I<id>) with a character class, and no string 
shorter than 7 characters can possibly match.
d403 1
a403 1
The fields of interest which may appear in this line are
d431 1
a431 1
Means that the optimizer information is all that the regular
d462 2
a463 2
The optimizer-specific information is used to avoid entering (a slow) regex
engine on strings that will not definitely match.  If the C<isall> flag
d467 1
a467 1
Above the optimizer section is the list of I<nodes> of the compiled
a585 30
=for unprinted-credits
Next section M-J. Dominus (mjd-perl-patch+@@plover.com) 20010421

Following the optimizer information is a dump of the offset/length
table, here split across several lines:

  Offsets: [45]
  	1[4] 0[0] 0[0] 0[0] 0[0] 0[0] 0[0] 0[0] 0[0] 0[0] 0[0] 5[1]
  	0[0] 12[1] 0[0] 6[1] 0[0] 7[1] 0[0] 9[1] 8[1] 0[0] 10[1] 0[0]
  	11[1] 0[0] 12[0] 12[0] 13[1] 0[0] 14[4] 0[0] 0[0] 0[0] 0[0]
  	0[0] 0[0] 0[0] 0[0] 0[0] 0[0] 18[1] 0[0] 19[1] 20[0]  

The first line here indicates that the offset/length table contains 45
entries.  Each entry is a pair of integers, denoted by C<offset[length]>.
Entries are numbered starting with 1, so entry #1 here is C<1[4]> and
entry #12 is C<5[1]>.  C<1[4]> indicates that the node labeled C<1:>
(the C<1: ANYOF[bc]>) begins at character position 1 in the
pre-compiled form of the regex, and has a length of 4 characters.
C<5[1]> in position 12 
indicates that the node labeled C<12:>
(the C<< 12: EXACT <d> >>) begins at character position 5 in the
pre-compiled form of the regex, and has a length of 1 character.
C<12[1]> in position 14 
indicates that the node labeled C<14:>
(the C<< 14: CURLYX[0] {1,32767} >>) begins at character position 12 in the
pre-compiled form of the regex, and has a length of 1 character---that
is, it corresponds to the C<+> symbol in the precompiled regex.

C<0[0]> items indicate that there is no corresponding node.

d732 1
a732 1
a 4-byte overhead, and thus an 8192-long bucket may take up to
d925 1
a925 1
L<Devel::DProf>.
@


1.1.1.4
log
@perl 5.8.2 from CPAN
@
text
@d752 6
a757 14
The B<-DL> command-line switch is obsolete since circa Perl 5.6.0
(it was available only if Perl was built with C<-DDEBUGGING>).
The switch was used to track Perl's memory allocations and possible
memory leaks.  These days the use of malloc debugging tools like
F<Purify> or F<valgrind> is suggested instead.

One way to find out how much memory is being used by Perl data
structures is to install the Devel::Size module from CPAN: it gives
you the minimum number of bytes required to store a particular data
structure.  Please be mindful of the difference between the size()
and total_size().

If Perl has been compiled using Perl's malloc you can analyze Perl
memory usage by setting the $ENV{PERL_DEBUG_MSTATS}.
a862 3

(Note that -DL is obsolete since circa 5.6.0, and even before that
Perl needed to be compiled with -DDEBUGGING.)
@


1.1.1.5
log
@perl 5.8.8 import
@
text
@d870 151
@


1.1.1.6
log
@import perl 5.10.0 from CPAN
@
text
@d194 3
a196 2
See L<perldebug/"Configurable Options"> for a description of options parsed by
C<DB::parse_options(string)>.
d304 1
a304 1
=item 3
d322 1
a322 1
=item 4
d346 1
a346 1
=item 5
d367 1
a367 1
=item 6
d756 1
a756 2
F<Purify> or F<valgrind> is suggested instead.  See also
L<perlhack/PERL_MEM_LOG>.
@


1.1.1.7
log
@import perl 5.10.1
@
text
@a156 1

@


1.1.1.8
log
@Perl 5.12.2 from CPAN
@
text
@d7 1
a7 1
This is not L<perldebug>, which tells you how to use
@


1.1.1.9
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d56 1
a56 1
looks like C<(eval 34)> or C<(re_eval 19)>.
d154 1
a154 1
of an C<o ...> debugger command (q.v. in L<perldebug/"Configurable Options">).
d156 1
a156 1
=head3 Debugger Internal Variables
d175 1
a175 1
C<%DB::dbline> is an alias for C<%{"::_<current_file"}>, which
d187 1
a187 1
=head3 Debugger Customization Functions
d230 1
a230 1
 Enter h or 'h h' for help.
d260 2
a261 2
Examples using various values of C<n> are shown to give you a feel
for the difference between settings.  Long though it may be, this
d400 1
a400 1
=head1 Debugging Regular Expressions
d408 1
a408 2
compile time and run time.  Since Perl 5.9.5, this pragma is lexically
scoped.
d410 1
a410 1
=head2 Compile-time Output
d414 1
a414 1
  Compiling REx '[bc]d(ef*g)+h[ij]k$'
d435 2
a436 2
  anchored 'de' at 1 floating 'gh' at 3..2147483647 (checking floating) 
        stclass 'ANYOF[bc]' minlen 7 
d452 2
a453 2
  anchored 'de' at 1 floating 'gh' at 3..2147483647 (checking floating) 
        stclass 'ANYOF[bc]' minlen 7 
d516 1
a516 1
If the pattern may match only at a handful of places, with C<TYPE>
d522 1
a522 1
followed by C<$>, as in C<floating 'k'$>.
d534 1
a534 1
=head2 Types of Nodes
d538 1
a538 1
 # TYPE arg-description [num-args] [longjump-len] DESCRIPTION
d540 107
a646 228
 # Exit points
 END   no        End of program.
 SUCCEED   no        Return from a subroutine, basically.

 # Anchors:

 BOL        no      Match "" at beginning of line.
 MBOL       no      Same, assuming multiline.
 SBOL       no      Same, assuming singleline.
 EOS        no      Match "" at end of string.
 EOL        no      Match "" at end of line.
 MEOL       no      Same, assuming multiline.
 SEOL       no      Same, assuming singleline.
 BOUND      no      Match "" at any word boundary using native charset
                    semantics for non-utf8
 BOUNDL     no      Match "" at any locale word boundary
 BOUNDU     no      Match "" at any word boundary using Unicode semantics
 BOUNDA     no      Match "" at any word boundary using ASCII semantics
 NBOUND     no      Match "" at any word non-boundary using native charset
                    semantics for non-utf8
 NBOUNDL    no      Match "" at any locale word non-boundary
 NBOUNDU    no      Match "" at any word non-boundary using Unicode semantics
 NBOUNDA    no      Match "" at any word non-boundary using ASCII semantics
 GPOS       no      Matches where last m//g left off.

 # [Special] alternatives:

 REG_ANY    no      Match any one character (except newline).
 SANY       no      Match any one character.
 CANY       no      Match any one byte.
 ANYOF      sv      Match character in (or not in) this class, single char
                    match only
 ANYOFV     sv      Match character in (or not in) this class, can
                    match-multiple chars
 ALNUM      no      Match any alphanumeric character using native charset
                    semantics for non-utf8
 ALNUML     no      Match any alphanumeric char in locale
 ALNUMU     no      Match any alphanumeric char using Unicode semantics
 ALNUMA     no      Match [A-Za-z_0-9]
 NALNUM     no      Match any non-alphanumeric character using native charset
                    semantics for non-utf8
 NALNUML    no      Match any non-alphanumeric char in locale
 NALNUMU    no      Match any non-alphanumeric char using Unicode semantics
 NALNUMA    no      Match [^A-Za-z_0-9]
 SPACE      no      Match any whitespace character using native charset
                    semantics for non-utf8
 SPACEL     no      Match any whitespace char in locale
 SPACEU     no      Match any whitespace char using Unicode semantics
 SPACEA     no      Match [ \t\n\f\r]
 NSPACE     no      Match any non-whitespace character using native charset
                    semantics for non-utf8
 NSPACEL    no      Match any non-whitespace char in locale
 NSPACEU    no      Match any non-whitespace char using Unicode semantics
 NSPACEA    no      Match [^ \t\n\f\r]
 DIGIT      no      Match any numeric character using native charset semantics
                    for non-utf8
 DIGITL     no      Match any numeric character in locale
 DIGITA     no      Match [0-9]
 NDIGIT     no      Match any non-numeric character using native charset
 i                  semantics for non-utf8
 NDIGITL    no      Match any non-numeric character in locale
 NDIGITA    no      Match [^0-9]
 CLUMP      no      Match any extended grapheme cluster sequence

 # Alternation

 # BRANCH        The set of branches constituting a single choice are hooked
 #               together with their "next" pointers, since precedence prevents
 #               anything being concatenated to any individual branch.  The
 #               "next" pointer of the last BRANCH in a choice points to the
 #               thing following the whole choice.  This is also where the
 #               final "next" pointer of each individual branch points; each
 #               branch starts with the operand node of a BRANCH node.
 #
 BRANCH	node        Match this alternative, or the next...

 # Back pointer

 # BACK          Normal "next" pointers all implicitly point forward; BACK
 #               exists to make loop structures possible.
 # not used
 BACK       no      Match "", "next" ptr points backward.

 # Literals

 EXACT      str     Match this string (preceded by length).
 EXACTF     str     Match this string, folded, native charset semantics for
                    non-utf8 (prec. by length).
 EXACTFL    str     Match this string, folded in locale (w/len).
 EXACTFU    str     Match this string, folded, Unicode semantics for non-utf8
                    (prec. by length).
 EXACTFA    str	    Match this string, folded, Unicode semantics for non-utf8,
                    but no ASCII-range character matches outside ASCII (prec.
                    by length),.

 # Do nothing types

 NOTHING    no        Match empty string.
 # A variant of above which delimits a group, thus stops optimizations
 TAIL       no        Match empty string. Can jump here from outside.

 # Loops

 # STAR,PLUS    '?', and complex '*' and '+', are implemented as circular
 #               BRANCH structures using BACK.  Simple cases (one character
 #               per match) are implemented with STAR and PLUS for speed
 #               and to minimize recursive plunges.
 #
 STAR       node    Match this (simple) thing 0 or more times.
 PLUS       node    Match this (simple) thing 1 or more times.

 CURLY      sv 2    Match this simple thing {n,m} times.
 CURLYN     no 2    Capture next-after-this simple thing
 CURLYM     no 2    Capture this medium-complex thing {n,m} times.
 CURLYX     sv 2    Match this complex thing {n,m} times.

 # This terminator creates a loop structure for CURLYX
 WHILEM     no      Do curly processing and see if rest matches.

 # Buffer related

 # OPEN,CLOSE,GROUPP     ...are numbered at compile time.
 OPEN       num 1   Mark this point in input as start of #n.
 CLOSE      num 1   Analogous to OPEN.

 REF        num 1   Match some already matched string
 REFF       num 1   Match already matched string, folded using native charset
                    semantics for non-utf8
 REFFL      num 1   Match already matched string, folded in loc.
 REFFU      num 1   Match already matched string, folded using unicode
                    semantics for non-utf8
 REFFA      num 1   Match already matched string, folded using unicode
                    semantics for non-utf8, no mixing ASCII, non-ASCII

 # Named references.  Code in regcomp.c assumes that these all are after the
 # numbered references
 NREF       no-sv 1 Match some already matched string
 NREFF      no-sv 1 Match already matched string, folded using native charset
                    semantics for non-utf8
 NREFFL     no-sv 1 Match already matched string, folded in loc.
 NREFFU     num   1 Match already matched string, folded using unicode
                    semantics for non-utf8
 NREFFA     num   1 Match already matched string, folded using unicode
                    semantics for non-utf8, no mixing ASCII, non-ASCII

 IFMATCH    off 1 2 Succeeds if the following matches.
 UNLESSM    off 1 2 Fails if the following matches.
 SUSPEND    off 1 1 "Independent" sub-RE.
 IFTHEN     off 1 1 Switch, should be preceded by switcher.
 GROUPP     num 1   Whether the group matched.

 # Support for long RE

 LONGJMP    off 1 1 Jump far away.
 BRANCHJ    off 1 1 BRANCH with long offset.

 # The heavy worker

 EVAL       evl 1   Execute some Perl code.

 # Modifiers

 MINMOD     no      Next operator is not greedy.
 LOGICAL    no      Next opcode should set the flag only.

 # This is not used yet
 RENUM      off 1 1 Group with independently numbered parens.

 # Trie Related

 # Behave the same as A|LIST|OF|WORDS would. The '..C' variants have
 # inline charclass data (ascii only), the 'C' store it in the structure.
 # NOTE: the relative order of the TRIE-like regops  is significant

 TRIE       trie 1    Match many EXACT(F[ALU]?)? at once. flags==type
 TRIEC      charclass Same as TRIE, but with embedded charclass data

 # For start classes, contains an added fail table.
 AHOCORASICK trie 1   Aho Corasick stclass. flags==type
 AHOCORASICKC charclass Same as AHOCORASICK, but with embedded charclass data

 # Regex Subroutines
 GOSUB      num/ofs 2L recurse to paren arg1 at (signed) ofs arg2
 GOSTART    no         recurse to start of pattern

 # Special conditionals
 NGROUPP    no-sv 1   Whether the group matched.
 INSUBP     num 1     Whether we are in a specific recurse.
 DEFINEP    none 1    Never execute directly.

 # Backtracking Verbs
 ENDLIKE    none      Used only for the type field of verbs
 OPFAIL     none      Same as (?!)
 ACCEPT     parno 1   Accepts the current matched string.


 # Verbs With Arguments
 VERB       no-sv 1   Used only for the type field of verbs
 PRUNE      no-sv 1   Pattern fails at this startpoint if no-backtracking through this
 MARKPOINT  no-sv 1   Push the current location for rollback by cut.
 SKIP       no-sv 1   On failure skip forward (to the mark) before retrying
 COMMIT     no-sv 1   Pattern fails outright if backtracking through this
 CUTGROUP   no-sv 1   On failure go to the next alternation in the group

 # Control what to keep in $&.
 KEEPS      no        $& begins here.

 # New charclass like patterns
 LNBREAK    none      generic newline pattern
 VERTWS     none      vertical whitespace         (Perl 6)
 NVERTWS    none      not vertical whitespace     (Perl 6)
 HORIZWS    none      horizontal whitespace       (Perl 6)
 NHORIZWS   none      not horizontal whitespace   (Perl 6)

 FOLDCHAR   codepoint 1 codepoint with tricky case folding properties.

 # SPECIAL  REGOPS

 # This is not really a node, but an optimized away piece of a "long" node.
 # To simplify debugging output, we mark it as if it were a node
 OPTIMIZED  off       Placeholder for dump.

 # Special opcode with the property that no opcode in a compiled program
 # will ever be of this type. Thus it can be used as a flag value that
 # no other opcode has been seen. END is used similarly, in that an END
 # node cant be optimized. So END implies "unoptimizable" and PSEUDO mean
 # "not seen anything to optimize yet".
 PSEUDO     off       Pseudo opcode for internal use.
d678 1
a678 1
=head2 Run-time Output
d686 1
a686 1
  Matching '[bc]d(ef*g)+h[ij]k$' against 'abcdefg__gh__'
d721 1
a721 1
=head1 Debugging Perl Memory Usage
d757 1
a757 1
L<perlhacktips/PERL_MEM_LOG>.
d766 1
a766 1
memory usage by setting $ENV{PERL_DEBUG_MSTATS}.
d814 1
a814 1
than a power of 2.  If so, the corresponding power of two is
d832 1
a832 1
With a non-C<DEBUGGING> perl, the buckets starting from C<128> have
@


1.1.1.10
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d41 1
d56 1
a56 1
looks like C<(eval 34)>.
d63 1
a63 1
strings looks like C<(eval 34)>.
d84 1
a84 1
C<eval>s.
a538 6
=for comment
This table is generated by regen/regcomp.pl.  Any changes made here
will be lost.

=for regcomp.pl begin

d542 2
a543 3

 END                no         End of program.
 SUCCEED            no         Return from a subroutine, basically.
d547 18
a564 22
 BOL                no         Match "" at beginning of line.
 MBOL               no         Same, assuming multiline.
 SBOL               no         Same, assuming singleline.
 EOS                no         Match "" at end of string.
 EOL                no         Match "" at end of line.
 MEOL               no         Same, assuming multiline.
 SEOL               no         Same, assuming singleline.
 BOUND              no         Match "" at any word boundary using
                               native charset semantics for non-utf8
 BOUNDL             no         Match "" at any locale word boundary
 BOUNDU             no         Match "" at any word boundary using
                               Unicode semantics
 BOUNDA             no         Match "" at any word boundary using ASCII
                               semantics
 NBOUND             no         Match "" at any word non-boundary using
                               native charset semantics for non-utf8
 NBOUNDL            no         Match "" at any locale word non-boundary
 NBOUNDU            no         Match "" at any word non-boundary using
                               Unicode semantics
 NBOUNDA            no         Match "" at any word non-boundary using
                               ASCII semantics
 GPOS               no         Matches where last m//g left off.
d568 36
a603 25
 REG_ANY            no         Match any one character (except newline).
 SANY               no         Match any one character.
 CANY               no         Match any one byte.
 ANYOF              sv         Match character in (or not in) this
                               class, single char match only
 ANYOF_WARN_SUPER   sv         Match character in (or not in) this
                               class, warn (if enabled) upon matching a
                               char above Unicode max;
 ANYOF_SYNTHETIC    sv         Synthetic start class

 POSIXD             none       Some [[:class:]] under /d; the FLAGS
                               field gives which one
 POSIXL             none       Some [[:class:]] under /l; the FLAGS
                               field gives which one
 POSIXU             none       Some [[:class:]] under /u; the FLAGS
                               field gives which one
 POSIXA             none       Some [[:class:]] under /a; the FLAGS
                               field gives which one
 NPOSIXD            none       complement of POSIXD, [[:^class:]]
 NPOSIXL            none       complement of POSIXL, [[:^class:]]
 NPOSIXU            none       complement of POSIXU, [[:^class:]]
 NPOSIXA            none       complement of POSIXA, [[:^class:]]

 CLUMP              no         Match any extended grapheme cluster
                               sequence
d607 7
a613 8
 # BRANCH        The set of branches constituting a single choice are
 #               hooked together with their "next" pointers, since
 #               precedence prevents anything being concatenated to
 #               any individual branch.  The "next" pointer of the last
 #               BRANCH in a choice points to the thing following the
 #               whole choice.  This is also where the final "next"
 #               pointer of each individual branch points; each branch
 #               starts with the operand node of a BRANCH node.
d615 1
a615 1
 BRANCH             node       Match this alternative, or the next...
d619 2
a620 2
 # BACK          Normal "next" pointers all implicitly point forward;
 #               BACK exists to make loop structures possible.
d622 1
a622 1
 BACK               no         Match "", "next" ptr points backward.
d626 9
a634 16
 EXACT              str        Match this string (preceded by length).
 EXACTF             str        Match this non-UTF-8 string (not
                               guaranteed to be folded) using /id rules
                               (w/len).
 EXACTFL            str        Match this string (not guaranteed to be
                               folded) using /il rules (w/len).
 EXACTFU            str        Match this string (folded iff in UTF-8,
                               length in folding doesn't change if not
                               in UTF-8) using /iu rules (w/len).
 EXACTFA            str        Match this string (not guaranteed to be
                               folded) using /iaa rules (w/len).
 EXACTFU_SS         str        Match this string (folded iff in UTF-8,
                               length in folding may change even if not
                               in UTF-8) using /iu rules (w/len).
 EXACTFU_TRICKYFOLD str        Match this folded UTF-8 string using /iu
                               rules
d638 1
a638 1
 NOTHING            no         Match empty string.
d640 1
a640 2
 TAIL               no         Match empty string. Can jump here from
                               outside.
d644 4
a647 4
 # STAR,PLUS    '?', and complex '*' and '+', are implemented as
 #               circular BRANCH structures using BACK.  Simple cases
 #               (one character per match) are implemented with STAR
 #               and PLUS for speed and to minimize recursive plunges.
d649 7
a655 10
 STAR               node       Match this (simple) thing 0 or more
                               times.
 PLUS               node       Match this (simple) thing 1 or more
                               times.

 CURLY              sv 2       Match this simple thing {n,m} times.
 CURLYN             no 2       Capture next-after-this simple thing
 CURLYM             no 2       Capture this medium-complex thing {n,m}
                               times.
 CURLYX             sv 2       Match this complex thing {n,m} times.
d658 1
a658 2
 WHILEM             no         Do curly processing and see if rest
                               matches.
d663 2
a664 2
 OPEN               num 1      Mark this point in input as start of #n.
 CLOSE              num 1      Analogous to OPEN.
d666 25
a690 31
 REF                num 1      Match some already matched string
 REFF               num 1      Match already matched string, folded
                               using native charset semantics for non-
                               utf8
 REFFL              num 1      Match already matched string, folded in
                               loc.
 REFFU              num 1      Match already matched string, folded
                               using unicode semantics for non-utf8
 REFFA              num 1      Match already matched string, folded
                               using unicode semantics for non-utf8, no
                               mixing ASCII, non-ASCII

 # Named references.  Code in regcomp.c assumes that these all are after
 # the numbered references
 NREF               no-sv 1    Match some already matched string
 NREFF              no-sv 1    Match already matched string, folded
                               using native charset semantics for non-
                               utf8
 NREFFL             no-sv 1    Match already matched string, folded in
                               loc.
 NREFFU             num 1      Match already matched string, folded
                               using unicode semantics for non-utf8
 NREFFA             num 1      Match already matched string, folded
                               using unicode semantics for non-utf8, no
                               mixing ASCII, non-ASCII

 IFMATCH            off 1 2    Succeeds if the following matches.
 UNLESSM            off 1 2    Fails if the following matches.
 SUSPEND            off 1 1    "Independent" sub-RE.
 IFTHEN             off 1 1    Switch, should be preceded by switcher.
 GROUPP             num 1      Whether the group matched.
d694 2
a695 2
 LONGJMP            off 1 1    Jump far away.
 BRANCHJ            off 1 1    BRANCH with long offset.
d699 1
a699 1
 EVAL               evl 1      Execute some Perl code.
d703 2
a704 2
 MINMOD             no         Next operator is not greedy.
 LOGICAL            no         Next opcode should set the flag only.
d707 1
a707 1
 RENUM              off 1 1    Group with independently numbered parens.
d711 10
a720 12
 # Behave the same as A|LIST|OF|WORDS would. The '..C' variants
 # have inline charclass data (ascii only), the 'C' store it in the
 # structure.

 TRIE               trie 1     Match many EXACT(F[ALU]?)? at once.
                               flags==type
 TRIEC              trie       Same as TRIE, but with embedded charclass
                    charclass  data

 AHOCORASICK        trie 1     Aho Corasick stclass. flags==type
 AHOCORASICKC       trie       Same as AHOCORASICK, but with embedded
                    charclass  charclass data
d723 2
a724 3
 GOSUB              num/ofs 2L recurse to paren arg1 at (signed) ofs
                               arg2
 GOSTART            no         recurse to start of pattern
d727 3
a729 3
 NGROUPP            no-sv 1    Whether the group matched.
 INSUBP             num 1      Whether we are in a specific recurse.
 DEFINEP            none 1     Never execute directly.
d732 4
a735 3
 ENDLIKE            none       Used only for the type field of verbs
 OPFAIL             none       Same as (?!)
 ACCEPT             parno 1    Accepts the current matched string.
d738 6
a743 11
 VERB               no-sv 1    Used only for the type field of verbs
 PRUNE              no-sv 1    Pattern fails at this startpoint if no-
                               backtracking through this
 MARKPOINT          no-sv 1    Push the current location for rollback by
                               cut.
 SKIP               no-sv 1    On failure skip forward (to the mark)
                               before retrying
 COMMIT             no-sv 1    Pattern fails outright if backtracking
                               through this
 CUTGROUP           no-sv 1    On failure go to the next alternation in
                               the group
d746 1
a746 1
 KEEPS              no         $& begins here.
d749 7
a755 1
 LNBREAK            none       generic newline pattern
d759 3
a761 3
 # This is not really a node, but an optimized away piece of a "long"
 # node.  To simplify debugging output, we mark it as if it were a node
 OPTIMIZED          off        Placeholder for dump.
d766 3
a768 5
 # node cant be optimized. So END implies "unoptimizable" and PSEUDO
 # mean "not seen anything to optimize yet".
 PSEUDO             off        Pseudo opcode for internal use.

=for regcomp.pl end
@


1.1.1.11
log
@Import perl-5.20.1
@
text
@a100 11
X<&DB::lsub>If the call is to an lvalue subroutine, and C<&DB::lsub>
is defined C<&DB::lsub>(I<args>) is called instead, otherwise falling
back to C<&DB::sub>(I<args>).

=item *

When execution of the program uses C<goto> to enter a non-XS
subroutine and the 0x80 bit is set in C<$^P>, a call to C<&DB::goto>
is made, with C<$DB::sub> holding the name of the subroutine being
entered.

d536 1
a536 1
Here are the current possible types, with short descriptions:
d548 2
a549 2
 END             no         End of program.
 SUCCEED         no         Return from a subroutine, basically.
d553 22
a574 22
 BOL             no         Match "" at beginning of line.
 MBOL            no         Same, assuming multiline.
 SBOL            no         Same, assuming singleline.
 EOS             no         Match "" at end of string.
 EOL             no         Match "" at end of line.
 MEOL            no         Same, assuming multiline.
 SEOL            no         Same, assuming singleline.
 BOUND           no         Match "" at any word boundary using native
                            charset rules for non-utf8
 BOUNDL          no         Match "" at any locale word boundary
 BOUNDU          no         Match "" at any word boundary using Unicode
                            rules
 BOUNDA          no         Match "" at any word boundary using ASCII
                            rules
 NBOUND          no         Match "" at any word non-boundary using
                            native charset rules for non-utf8
 NBOUNDL         no         Match "" at any locale word non-boundary
 NBOUNDU         no         Match "" at any word non-boundary using
                            Unicode rules
 NBOUNDA         no         Match "" at any word non-boundary using
                            ASCII rules
 GPOS            no         Matches where last m//g left off.
d578 22
a599 18
 REG_ANY         no         Match any one character (except newline).
 SANY            no         Match any one character.
 CANY            no         Match any one byte.
 ANYOF           sv         Match character in (or not in) this class,
                            single char match only

 POSIXD          none       Some [[:class:]] under /d; the FLAGS field
                            gives which one
 POSIXL          none       Some [[:class:]] under /l; the FLAGS field
                            gives which one
 POSIXU          none       Some [[:class:]] under /u; the FLAGS field
                            gives which one
 POSIXA          none       Some [[:class:]] under /a; the FLAGS field
                            gives which one
 NPOSIXD         none       complement of POSIXD, [[:^class:]]
 NPOSIXL         none       complement of POSIXL, [[:^class:]]
 NPOSIXU         none       complement of POSIXU, [[:^class:]]
 NPOSIXA         none       complement of POSIXA, [[:^class:]]
d601 2
a602 1
 CLUMP           no         Match any extended grapheme cluster sequence
d615 1
a615 1
 BRANCH          node       Match this alternative, or the next...
d622 1
a622 1
 BACK            no         Match "", "next" ptr points backward.
d626 16
a641 16
 EXACT           str        Match this string (preceded by length).
 EXACTF          str        Match this non-UTF-8 string (not guaranteed
                            to be folded) using /id rules (w/len).
 EXACTFL         str        Match this string (not guaranteed to be
                            folded) using /il rules (w/len).
 EXACTFU         str        Match this string (folded iff in UTF-8,
                            length in folding doesn't change if not in
                            UTF-8) using /iu rules (w/len).
 EXACTFA         str        Match this string (not guaranteed to be
                            folded) using /iaa rules (w/len).
 EXACTFU_SS      str        Match this string (folded iff in UTF-8,
                            length in folding may change even if not in
                            UTF-8) using /iu rules (w/len).
 EXACTFA_NO_TRIE str        Match this string (which is not trie-able;
                            not guaranteed to be folded) using /iaa
                            rules (w/len).
d645 1
a645 1
 NOTHING         no         Match empty string.
d647 2
a648 2
 TAIL            no         Match empty string. Can jump here from
                            outside.
d657 10
a666 8
 STAR            node       Match this (simple) thing 0 or more times.
 PLUS            node       Match this (simple) thing 1 or more times.

 CURLY           sv 2       Match this simple thing {n,m} times.
 CURLYN          no 2       Capture next-after-this simple thing
 CURLYM          no 2       Capture this medium-complex thing {n,m}
                            times.
 CURLYX          sv 2       Match this complex thing {n,m} times.
d669 2
a670 1
 WHILEM          no         Do curly processing and see if rest matches.
d675 2
a676 2
 OPEN            num 1      Mark this point in input as start of #n.
 CLOSE           num 1      Analogous to OPEN.
d678 11
a688 9
 REF             num 1      Match some already matched string
 REFF            num 1      Match already matched string, folded using
                            native charset rules for non-utf8
 REFFL           num 1      Match already matched string, folded in loc.
 REFFU           num 1      Match already matched string, folded using
                            unicode rules for non-utf8
 REFFA           num 1      Match already matched string, folded using
                            unicode rules for non-utf8, no mixing ASCII,
                            non-ASCII
d692 17
a708 15
 NREF            no-sv 1    Match some already matched string
 NREFF           no-sv 1    Match already matched string, folded using
                            native charset rules for non-utf8
 NREFFL          no-sv 1    Match already matched string, folded in loc.
 NREFFU          num 1      Match already matched string, folded using
                            unicode rules for non-utf8
 NREFFA          num 1      Match already matched string, folded using
                            unicode rules for non-utf8, no mixing ASCII,
                            non-ASCII

 IFMATCH         off 1 2    Succeeds if the following matches.
 UNLESSM         off 1 2    Fails if the following matches.
 SUSPEND         off 1 1    "Independent" sub-RE.
 IFTHEN          off 1 1    Switch, should be preceded by switcher.
 GROUPP          num 1      Whether the group matched.
d712 2
a713 2
 LONGJMP         off 1 1    Jump far away.
 BRANCHJ         off 1 1    BRANCH with long offset.
d717 1
a717 1
 EVAL            evl 1      Execute some Perl code.
d721 2
a722 2
 MINMOD          no         Next operator is not greedy.
 LOGICAL         no         Next opcode should set the flag only.
d725 1
a725 1
 RENUM           off 1 1    Group with independently numbered parens.
d733 8
a740 8
 TRIE            trie 1     Match many EXACT(F[ALU]?)? at once.
                            flags==type
 TRIEC           trie       Same as TRIE, but with embedded charclass
                 charclass  data

 AHOCORASICK     trie 1     Aho Corasick stclass. flags==type
 AHOCORASICKC    trie       Same as AHOCORASICK, but with embedded
                 charclass  charclass data
d743 3
a745 2
 GOSUB           num/ofs 2L recurse to paren arg1 at (signed) ofs arg2
 GOSTART         no         recurse to start of pattern
d748 3
a750 3
 NGROUPP         no-sv 1    Whether the group matched.
 INSUBP          num 1      Whether we are in a specific recurse.
 DEFINEP         none 1     Never execute directly.
d753 3
a755 3
 ENDLIKE         none       Used only for the type field of verbs
 OPFAIL          none       Same as (?!)
 ACCEPT          parno 1    Accepts the current matched string.
d758 11
a768 11
 VERB            no-sv 1    Used only for the type field of verbs
 PRUNE           no-sv 1    Pattern fails at this startpoint if no-
                            backtracking through this
 MARKPOINT       no-sv 1    Push the current location for rollback by
                            cut.
 SKIP            no-sv 1    On failure skip forward (to the mark) before
                            retrying
 COMMIT          no-sv 1    Pattern fails outright if backtracking
                            through this
 CUTGROUP        no-sv 1    On failure go to the next alternation in the
                            group
d771 1
a771 1
 KEEPS           no         $& begins here.
d774 1
a774 1
 LNBREAK         none       generic newline pattern
d780 1
a780 1
 OPTIMIZED       off        Placeholder for dump.
d787 1
a787 1
 PSEUDO          off        Pseudo opcode for internal use.
@


1.1.1.12
log
@Import perl-5.24.2
@
text
@d278 13
a290 13
 entering main::BEGIN
  entering Config::BEGIN
   Package lib/Exporter.pm.
   Package lib/Carp.pm.
  Package lib/Config.pm.
  entering Config::TIEHASH
  entering Exporter::import
   entering Exporter::export
 entering Config::myconfig
  entering Config::FETCH
  entering Config::FETCH
  entering Config::FETCH
  entering Config::FETCH
d294 19
a312 19
 entering main::BEGIN
  entering Config::BEGIN
   Package lib/Exporter.pm.
   Package lib/Carp.pm.
  exited Config::BEGIN
  Package lib/Config.pm.
  entering Config::TIEHASH
  exited Config::TIEHASH
  entering Exporter::import
   entering Exporter::export
   exited Exporter::export
  exited Exporter::import
 exited main::BEGIN
 entering Config::myconfig
  entering Config::FETCH
  exited Config::FETCH
  entering Config::FETCH
  exited Config::FETCH
  entering Config::FETCH
d316 15
a330 15
 in  $=main::BEGIN() from /dev/null:0
  in  $=Config::BEGIN() from lib/Config.pm:2
   Package lib/Exporter.pm.
   Package lib/Carp.pm.
  Package lib/Config.pm.
  in  $=Config::TIEHASH('Config') from lib/Config.pm:644
  in  $=Exporter::import('Config', 'myconfig', 'config_vars') from /dev/null:0
   in  $=Exporter::export('Config', 'main', 'myconfig', 'config_vars') from li
 in  @@=Config::myconfig() from /dev/null:0
  in  $=Config::FETCH(ref(Config), 'package') from lib/Config.pm:574
  in  $=Config::FETCH(ref(Config), 'baserev') from lib/Config.pm:574
  in  $=Config::FETCH(ref(Config), 'PERL_VERSION') from lib/Config.pm:574
  in  $=Config::FETCH(ref(Config), 'PERL_SUBVERSION') from lib/Config.pm:574
  in  $=Config::FETCH(ref(Config), 'osname') from lib/Config.pm:574
  in  $=Config::FETCH(ref(Config), 'osvers') from lib/Config.pm:574
d334 21
a354 21
 in  $=main::BEGIN() from /dev/null:0
  in  $=Config::BEGIN() from lib/Config.pm:2
   Package lib/Exporter.pm.
   Package lib/Carp.pm.
  out $=Config::BEGIN() from lib/Config.pm:0
  Package lib/Config.pm.
  in  $=Config::TIEHASH('Config') from lib/Config.pm:644
  out $=Config::TIEHASH('Config') from lib/Config.pm:644
  in  $=Exporter::import('Config', 'myconfig', 'config_vars') from /dev/null:0
   in  $=Exporter::export('Config', 'main', 'myconfig', 'config_vars') from lib/
   out $=Exporter::export('Config', 'main', 'myconfig', 'config_vars') from lib/
  out $=Exporter::import('Config', 'myconfig', 'config_vars') from /dev/null:0
 out $=main::BEGIN() from /dev/null:0
 in  @@=Config::myconfig() from /dev/null:0
  in  $=Config::FETCH(ref(Config), 'package') from lib/Config.pm:574
  out $=Config::FETCH(ref(Config), 'package') from lib/Config.pm:574
  in  $=Config::FETCH(ref(Config), 'baserev') from lib/Config.pm:574
  out $=Config::FETCH(ref(Config), 'baserev') from lib/Config.pm:574
  in  $=Config::FETCH(ref(Config), 'PERL_VERSION') from lib/Config.pm:574
  out $=Config::FETCH(ref(Config), 'PERL_VERSION') from lib/Config.pm:574
  in  $=Config::FETCH(ref(Config), 'PERL_SUBVERSION') from lib/Config.pm:574
d358 18
a375 18
 in  $=main::BEGIN() from /dev/null:0
  in  $=Config::BEGIN() from lib/Config.pm:2
   Package lib/Exporter.pm.
   Package lib/Carp.pm.
  out $=Config::BEGIN() from lib/Config.pm:0
  Package lib/Config.pm.
  in  $=Config::TIEHASH('Config') from lib/Config.pm:644
  out $=Config::TIEHASH('Config') from lib/Config.pm:644
  in  $=Exporter::import('Config', 'myconfig', 'config_vars') from /dev/null:0
   in  $=Exporter::export('Config', 'main', 'myconfig', 'config_vars') from lib/E
   out $=Exporter::export('Config', 'main', 'myconfig', 'config_vars') from lib/E
  out $=Exporter::import('Config', 'myconfig', 'config_vars') from /dev/null:0
 out $=main::BEGIN() from /dev/null:0
 in  @@=Config::myconfig() from /dev/null:0
  in  $=Config::FETCH('Config=HASH(0x1aa444)', 'package') from lib/Config.pm:574
  out $=Config::FETCH('Config=HASH(0x1aa444)', 'package') from lib/Config.pm:574
  in  $=Config::FETCH('Config=HASH(0x1aa444)', 'baserev') from lib/Config.pm:574
  out $=Config::FETCH('Config=HASH(0x1aa444)', 'baserev') from lib/Config.pm:574
d379 15
a393 15
 in  $=CODE(0x15eca4)() from /dev/null:0
  in  $=CODE(0x182528)() from lib/Config.pm:2
   Package lib/Exporter.pm.
  out $=CODE(0x182528)() from lib/Config.pm:0
  scalar context return from CODE(0x182528): undef
  Package lib/Config.pm.
  in  $=Config::TIEHASH('Config') from lib/Config.pm:628
  out $=Config::TIEHASH('Config') from lib/Config.pm:628
  scalar context return from Config::TIEHASH:   empty hash
  in  $=Exporter::import('Config', 'myconfig', 'config_vars') from /dev/null:0
   in  $=Exporter::export('Config', 'main', 'myconfig', 'config_vars') from lib/Exporter.pm:171
   out $=Exporter::export('Config', 'main', 'myconfig', 'config_vars') from lib/Exporter.pm:171
   scalar context return from Exporter::export: ''
  out $=Exporter::import('Config', 'myconfig', 'config_vars') from /dev/null:0
  scalar context return from Exporter::import: ''
d528 1
a528 1
being C<SBOL>, C<MBOL>, or C<GPOS>.  See the table below.
d562 1
a562 8
 # Line Start Anchors:
 SBOL            no         Match "" at beginning of line: /^/, /\A/
 MBOL            no         Same, assuming multiline: /^/m

 # Line End Anchors:
 SEOL            no         Match "" at end of line: /$/
 MEOL            no         Same, assuming multiline: /$/m
 EOS             no         Match "" at end of string: /\z/
d564 21
a584 1
 # Match Start Anchors:
d587 1
a587 17
 # Word Boundary Opcodes:
 BOUND           no         Like BOUNDA for non-utf8, otherwise match ""
                            between any Unicode \w\W or \W\w
 BOUNDL          no         Like BOUND/BOUNDU, but \w and \W are defined
                            by current locale
 BOUNDU          no         Match "" at any boundary of a given type
                            using Unicode rules
 BOUNDA          no         Match "" at any boundary between \w\W or
                            \W\w, where \w is [_a-zA-Z0-9]
 NBOUND          no         Like NBOUNDA for non-utf8, otherwise match
                            "" between any Unicode \w\w or \W\W
 NBOUNDL         no         Like NBOUND/NBOUNDU, but \w and \W are
                            defined by current locale
 NBOUNDU         no         Match "" at any non-boundary of a given type
                            using using Unicode rules
 NBOUNDA         no         Match "" betweeen any \w\w or \W\W, where \w
                            is [_a-zA-Z0-9]
a588 1
 # [Special] alternatives:
d591 2
a592 1
 ANYOF           sv 1       Match character in (or not in) this class,
a593 2
 ANYOFD          sv 1       Like ANYOF, but /d is in effect
 ANYOFL          sv 1       Like ANYOF, but /l is in effect
a594 1
 # POSIX Character Classes:
d623 7
a632 2
 EXACTL          str        Like EXACT, but /l is in effect (used so
                            locale-related warnings can be checked for).
a641 1

a644 3
 EXACTFLU8       str        Rare cirucmstances: like EXACTFU, but is
                            under /l, UTF-8, folded, and everything in
                            it is above 255.
d659 1
a659 1
 #               circular BRANCH structures.  Simple cases
a702 5
 # Support for long RE
 LONGJMP         off 1 1    Jump far away.
 BRANCHJ         off 1 1    BRANCH with long offset.

 # Special Case Regops
d709 5
d716 1
a716 2
 EVAL            evl/flags  Execute some Perl code.
                 2L
d743 1
d752 2
a753 3
 OPFAIL          no-sv 1    Same as (?!), but with verb arg
 ACCEPT          no-sv/num  Accepts the current matched string, with
                 2L         verbar
d918 3
a920 3
 $ PERL_DEBUG_MSTATS=2 perl -e "require Carp"
 Memory allocation statistics after compilation: (buckets 4(4)..8188(8192)
    14216 free:   130   117    28     7     9   0   2     2   1 0 0
d922 1
a922 1
    60924 used:   125   137   161    55     7   8   6    16   2 0 1
d924 3
a926 3
 Total sbrk(): 77824/21:119. Odd ends: pad+heads+chain+tail: 0+636+0+2048.
 Memory allocation statistics after execution:   (buckets 4(4)..8188(8192)
    30888 free:   245    78    85    13     6   2   1     3   2 0 1
d928 1
a928 1
   175816 used:   265   176  1112   111    26  22  11    27   2 1 1
d930 1
a930 1
 Total sbrk(): 215040/47:145. Odd ends: pad+heads+chain+tail: 0+2192+0+6144.
d970 1
a970 1
   free:    8     16    32    64    128  256 512 1024 2048 4096 8192
@


