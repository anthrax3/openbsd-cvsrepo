head	1.18;
access;
symbols
	OPENBSD_6_1:1.18.0.4
	OPENBSD_6_1_BASE:1.18
	OPENBSD_6_0:1.17.0.10
	OPENBSD_6_0_BASE:1.17
	OPENBSD_5_9:1.17.0.4
	OPENBSD_5_9_BASE:1.17
	OPENBSD_5_8:1.17.0.6
	OPENBSD_5_8_BASE:1.17
	PERL_5_20_2:1.1.1.16
	OPENBSD_5_7:1.17.0.2
	OPENBSD_5_7_BASE:1.17
	PERL_5_20_1:1.1.1.16
	OPENBSD_5_6:1.16.0.4
	OPENBSD_5_6_BASE:1.16
	PERL_5_18_2:1.1.1.15
	PERL:1.1.1
	OPENBSD_5_5:1.15.0.6
	OPENBSD_5_5_BASE:1.15
	OPENBSD_5_4:1.15.0.2
	OPENBSD_5_4_BASE:1.15
	PERL_5_16_3:1.1.1.14
	OPENBSD_5_3:1.14.0.10
	OPENBSD_5_3_BASE:1.14
	OPENBSD_5_2:1.14.0.8
	OPENBSD_5_2_BASE:1.14
	OPENBSD_5_1_BASE:1.14
	OPENBSD_5_1:1.14.0.6
	OPENBSD_5_0:1.14.0.4
	OPENBSD_5_0_BASE:1.14
	OPENBSD_4_9:1.14.0.2
	OPENBSD_4_9_BASE:1.14
	PERL_5_12_2:1.1.1.13
	OPENBSD_4_8:1.13.0.4
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.13.0.2
	OPENBSD_4_7_BASE:1.13
	PERL_5_10_1:1.1.1.12
	OPENBSD_4_6:1.12.0.6
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.12.0.2
	OPENBSD_4_5_BASE:1.12
	PERL_5_10_0:1.1.1.11
	OPENBSD_4_4:1.11.0.10
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.8
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.11.0.6
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.11.0.4
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.11.0.2
	OPENBSD_4_0_BASE:1.11
	PERL_5_8_8:1.1.1.10
	OPENBSD_3_9:1.10.0.6
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.4
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.10.0.2
	OPENBSD_3_7_BASE:1.10
	PERL_5_8_6:1.1.1.9
	OPENBSD_3_6:1.9.0.2
	OPENBSD_3_6_BASE:1.9
	PERL_5_8_5:1.1.1.8
	PERL_5_8_3:1.1.1.7
	OPENBSD_3_5:1.7.0.2
	OPENBSD_3_5_BASE:1.7
	PERL_5_8_2:1.1.1.6
	OPENBSD_3_4:1.6.0.4
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.6.0.2
	OPENBSD_3_3_BASE:1.6
	PERL_5_8_0:1.1.1.5
	OPENBSD_3_2:1.5.0.6
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.4
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	PERL_5_6_1:1.1.1.4
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	PERL_5_6_0:1.1.1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	PERL_500503:1.1.1.2
	CPAN:1.1.1
	OPENBSD_2_5:1.2.0.6
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.4
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	perl5003:1.1.1.1
	lwall:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.18
date	2017.02.05.00.32.19;	author afresh1;	state Exp;
branches;
next	1.17;
commitid	cxJ08BvJA9Pt2PTM;

1.17
date	2014.11.17.20.57.07;	author afresh1;	state Exp;
branches;
next	1.16;
commitid	QP75iYx42Uo7mMxO;

1.16
date	2014.03.24.15.05.33;	author afresh1;	state Exp;
branches;
next	1.15;

1.15
date	2013.03.25.20.40.59;	author sthen;	state Exp;
branches;
next	1.14;

1.14
date	2010.09.24.15.07.04;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	2009.10.12.18.24.47;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2008.09.29.17.36.17;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2006.03.28.19.23.11;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2005.01.15.21.30.37;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2004.08.09.18.10.16;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2004.04.07.21.33.09;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2003.12.03.03.02.46;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.10.27.22.25.34;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.24.18.35.58;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.06.17.07.38;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	99.04.29.22.52.19;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.11.30.07.59.26;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.08.19.10.13.04;	author downsj;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.08.19.10.13.04;	author downsj;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.04.29.22.40.58;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2000.04.06.16.10.30;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2001.05.24.18.24.46;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2002.10.27.22.15.06;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2003.12.03.02.44.24;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2004.04.07.21.13.35;	author millert;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2004.08.09.17.48.22;	author millert;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2005.01.15.21.18.00;	author millert;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	2006.03.28.18.49.24;	author millert;	state Exp;
branches;
next	1.1.1.11;

1.1.1.11
date	2008.09.29.17.18.53;	author millert;	state Exp;
branches;
next	1.1.1.12;

1.1.1.12
date	2009.10.12.18.10.39;	author millert;	state Exp;
branches;
next	1.1.1.13;

1.1.1.13
date	2010.09.24.14.49.08;	author millert;	state Exp;
branches;
next	1.1.1.14;

1.1.1.14
date	2013.03.25.20.09.25;	author sthen;	state Exp;
branches;
next	1.1.1.15;

1.1.1.15
date	2014.03.24.14.59.08;	author afresh1;	state Exp;
branches;
next	1.1.1.16;

1.1.1.16
date	2014.11.17.20.53.15;	author afresh1;	state Exp;
branches;
next	;
commitid	B31cAbBIXiCqnL97;


desc
@@


1.18
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@=head1 NAME

perlrun - how to execute the Perl interpreter

=head1 SYNOPSIS

B<perl>	S<[ B<-sTtuUWX> ]>
	S<[ B<-hv> ] [ B<-V>[:I<configvar>] ]>
	S<[ B<-cw> ] [ B<-d>[B<t>][:I<debugger>] ] [ B<-D>[I<number/list>] ]>
	S<[ B<-pna> ] [ B<-F>I<pattern> ] [ B<-l>[I<octal>] ] [ B<-0>[I<octal/hexadecimal>] ]>
	S<[ B<-I>I<dir> ] [ B<-m>[B<->]I<module> ] [ B<-M>[B<->]I<'module...'> ] [ B<-f> ]>
	S<[ B<-C [I<number/list>] >]>
	S<[ B<-S> ]>
	S<[ B<-x>[I<dir>] ]>
	S<[ B<-i>[I<extension>] ]>
	S<[ [B<-e>|B<-E>] I<'command'> ] [ B<--> ] [ I<programfile> ] [ I<argument> ]...>

=head1 DESCRIPTION

The normal way to run a Perl program is by making it directly
executable, or else by passing the name of the source file as an
argument on the command line.  (An interactive Perl environment
is also possible--see L<perldebug> for details on how to do that.)
Upon startup, Perl looks for your program in one of the following
places:

=over 4

=item 1.

Specified line by line via B<-e> or B<-E> switches on the command line.

=item 2.

Contained in the file specified by the first filename on the command line.
(Note that systems supporting the C<#!> notation invoke interpreters this
way. See L<Location of Perl>.)

=item 3.

Passed in implicitly via standard input.  This works only if there are
no filename arguments--to pass arguments to a STDIN-read program you
must explicitly specify a "-" for the program name.

=back

With methods 2 and 3, Perl starts parsing the input file from the
beginning, unless you've specified a B<-x> switch, in which case it
scans for the first line starting with C<#!> and containing the word
"perl", and starts there instead.  This is useful for running a program
embedded in a larger message.  (In this case you would indicate the end
of the program using the C<__END__> token.)

The C<#!> line is always examined for switches as the line is being
parsed.  Thus, if you're on a machine that allows only one argument
with the C<#!> line, or worse, doesn't even recognize the C<#!> line, you
still can get consistent switch behaviour regardless of how Perl was
invoked, even if B<-x> was used to find the beginning of the program.

Because historically some operating systems silently chopped off
kernel interpretation of the C<#!> line after 32 characters, some
switches may be passed in on the command line, and some may not;
you could even get a "-" without its letter, if you're not careful.
You probably want to make sure that all your switches fall either
before or after that 32-character boundary.  Most switches don't
actually care if they're processed redundantly, but getting a "-"
instead of a complete switch could cause Perl to try to execute
standard input instead of your program.  And a partial B<-I> switch
could also cause odd results.

Some switches do care if they are processed twice, for instance
combinations of B<-l> and B<-0>.  Either put all the switches after
the 32-character boundary (if applicable), or replace the use of
B<-0>I<digits> by C<BEGIN{ $/ = "\0digits"; }>.

Parsing of the C<#!> switches starts wherever "perl" is mentioned in the line.
The sequences "-*" and "- " are specifically ignored so that you could,
if you were so inclined, say

    #!/bin/sh
    #! -*-perl-*-
    eval 'exec perl -x -wS $0 ${1+"$@@"}'
        if 0;

to let Perl see the B<-p> switch.

A similar trick involves the I<env> program, if you have it.

    #!/usr/bin/env perl

The examples above use a relative path to the perl interpreter,
getting whatever version is first in the user's path.  If you want
a specific version of Perl, say, perl5.14.1, you should place
that directly in the C<#!> line's path.

If the C<#!> line does not contain the word "perl" nor the word "indir",
the program named after the C<#!> is executed instead of the Perl
interpreter.  This is slightly bizarre, but it helps people on machines
that don't do C<#!>, because they can tell a program that their SHELL is
F</usr/bin/perl>, and Perl will then dispatch the program to the correct
interpreter for them.

After locating your program, Perl compiles the entire program to an
internal form.  If there are any compilation errors, execution of the
program is not attempted.  (This is unlike the typical shell script,
which might run part-way through before finding a syntax error.)

If the program is syntactically correct, it is executed.  If the program
runs off the end without hitting an exit() or die() operator, an implicit
C<exit(0)> is provided to indicate successful completion.

=head2 #! and quoting on non-Unix systems
X<hashbang> X<#!>

Unix's C<#!> technique can be simulated on other systems:

=over 4

=item OS/2

Put

    extproc perl -S -your_switches

as the first line in C<*.cmd> file (B<-S> due to a bug in cmd.exe's
`extproc' handling).

=item MS-DOS

Create a batch file to run your program, and codify it in
C<ALTERNATE_SHEBANG> (see the F<dosish.h> file in the source
distribution for more information).

=item Win95/NT

The Win95/NT installation, when using the ActiveState installer for Perl,
will modify the Registry to associate the F<.pl> extension with the perl
interpreter.  If you install Perl by other means (including building from
the sources), you may have to modify the Registry yourself.  Note that
this means you can no longer tell the difference between an executable
Perl program and a Perl library file.

=item VMS

Put

 $ perl -mysw 'f$env("procedure")' 'p1' 'p2' 'p3' 'p4' 'p5' 'p6' 'p7' 'p8' !
 $ exit++ + ++$status != 0 and $exit = $status = undef;

at the top of your program, where B<-mysw> are any command line switches you
want to pass to Perl.  You can now invoke the program directly, by saying
C<perl program>, or as a DCL procedure, by saying C<@@program> (or implicitly
via F<DCL$PATH> by just using the name of the program).

This incantation is a bit much to remember, but Perl will display it for
you if you say C<perl "-V:startperl">.

=back

Command-interpreters on non-Unix systems have rather different ideas
on quoting than Unix shells.  You'll need to learn the special
characters in your command-interpreter (C<*>, C<\> and C<"> are
common) and how to protect whitespace and these characters to run
one-liners (see L<-e|/-e commandline> below).

On some systems, you may have to change single-quotes to double ones,
which you must I<not> do on Unix or Plan 9 systems.  You might also
have to change a single % to a %%.

For example:

    # Unix
    perl -e 'print "Hello world\n"'

    # MS-DOS, etc.
    perl -e "print \"Hello world\n\""

    # VMS
    perl -e "print ""Hello world\n"""

The problem is that none of this is reliable: it depends on the
command and it is entirely possible neither works.  If I<4DOS> were
the command shell, this would probably work better:

    perl -e "print <Ctrl-x>"Hello world\n<Ctrl-x>""

B<CMD.EXE> in Windows NT slipped a lot of standard Unix functionality in
when nobody was looking, but just try to find documentation for its
quoting rules.

There is no general solution to all of this.  It's just a mess.

=head2 Location of Perl
X<perl, location of interpreter>

It may seem obvious to say, but Perl is useful only when users can
easily find it.  When possible, it's good for both F</usr/bin/perl>
and F</usr/local/bin/perl> to be symlinks to the actual binary.  If
that can't be done, system administrators are strongly encouraged
to put (symlinks to) perl and its accompanying utilities into a
directory typically found along a user's PATH, or in some other
obvious and convenient place.

In this documentation, C<#!/usr/bin/perl> on the first line of the program
will stand in for whatever method works on your system.  You are
advised to use a specific path if you care about a specific version.

    #!/usr/local/bin/perl5.14

or if you just want to be running at least version, place a statement
like this at the top of your program:

    use 5.014;

=head2 Command Switches
X<perl, command switches> X<command switches>

As with all standard commands, a single-character switch may be
clustered with the following switch, if any.

    #!/usr/bin/perl -spi.orig	# same as -s -p -i.orig

A C<--> signals the end of options and disables further option processing. Any
arguments after the C<--> are treated as filenames and arguments.

Switches include:

=over 5

=item B<-0>[I<octal/hexadecimal>]
X<-0> X<$/>

specifies the input record separator (C<$/>) as an octal or
hexadecimal number.  If there are no digits, the null character is the
separator.  Other switches may precede or follow the digits.  For
example, if you have a version of I<find> which can print filenames
terminated by the null character, you can say this:

    find . -name '*.orig' -print0 | perl -n0e unlink

The special value 00 will cause Perl to slurp files in paragraph mode.
Any value 0400 or above will cause Perl to slurp files whole, but by convention
the value 0777 is the one normally used for this purpose.

You can also specify the separator character using hexadecimal notation:
B<-0xI<HHH...>>, where the C<I<H>> are valid hexadecimal digits.  Unlike
the octal form, this one may be used to specify any Unicode character, even
those beyond 0xFF.  So if you I<really> want a record separator of 0777,
specify it as B<-0x1FF>.  (This means that you cannot use the B<-x> option
with a directory name that consists of hexadecimal digits, or else Perl
will think you have specified a hex number to B<-0>.)

=item B<-a>
X<-a> X<autosplit>

turns on autosplit mode when used with a B<-n> or B<-p>.  An implicit
split command to the @@F array is done as the first thing inside the
implicit while loop produced by the B<-n> or B<-p>.

    perl -ane 'print pop(@@F), "\n";'

is equivalent to

    while (<>) {
	@@F = split(' ');
	print pop(@@F), "\n";
    }

An alternate delimiter may be specified using B<-F>.

B<-a> implicitly sets B<-n>.

=item B<-C [I<number/list>]>
X<-C>

The B<-C> flag controls some of the Perl Unicode features.

As of 5.8.1, the B<-C> can be followed either by a number or a list
of option letters.  The letters, their numeric values, and effects
are as follows; listing the letters is equal to summing the numbers.

    I     1   STDIN is assumed to be in UTF-8
    O     2   STDOUT will be in UTF-8
    E     4   STDERR will be in UTF-8
    S     7   I + O + E
    i     8   UTF-8 is the default PerlIO layer for input streams
    o    16   UTF-8 is the default PerlIO layer for output streams
    D    24   i + o
    A    32   the @@ARGV elements are expected to be strings encoded
              in UTF-8
    L    64   normally the "IOEioA" are unconditional, the L makes
              them conditional on the locale environment variables
              (the LC_ALL, LC_CTYPE, and LANG, in the order of
              decreasing precedence) -- if the variables indicate
              UTF-8, then the selected "IOEioA" are in effect
    a   256   Set ${^UTF8CACHE} to -1, to run the UTF-8 caching
              code in debugging mode.

=for documenting_the_underdocumented
perl.h gives W/128 as PERL_UNICODE_WIDESYSCALLS "/* for Sarathy */"

=for todo
perltodo mentions Unicode in %ENV and filenames. I guess that these will be
options e and f (or F).

For example, B<-COE> and B<-C6> will both turn on UTF-8-ness on both
STDOUT and STDERR.  Repeating letters is just redundant, not cumulative
nor toggling.

The C<io> options mean that any subsequent open() (or similar I/O
operations) in the current file scope will have the C<:utf8> PerlIO layer
implicitly applied to them, in other words, UTF-8 is expected from any
input stream, and UTF-8 is produced to any output stream.  This is just
the default, with explicit layers in open() and with binmode() one can
manipulate streams as usual.

B<-C> on its own (not followed by any number or option list), or the
empty string C<""> for the C<PERL_UNICODE> environment variable, has the
same effect as B<-CSDL>.  In other words, the standard I/O handles and
the default C<open()> layer are UTF-8-fied I<but> only if the locale
environment variables indicate a UTF-8 locale.  This behaviour follows
the I<implicit> (and problematic) UTF-8 behaviour of Perl 5.8.0.
(See L<perl581delta/UTF-8 no longer default under UTF-8 locales>.)

You can use B<-C0> (or C<"0"> for C<PERL_UNICODE>) to explicitly
disable all the above Unicode features.

The read-only magic variable C<${^UNICODE}> reflects the numeric value
of this setting.  This variable is set during Perl startup and is
thereafter read-only.  If you want runtime effects, use the three-arg
open() (see L<perlfunc/open>), the two-arg binmode() (see L<perlfunc/binmode>),
and the C<open> pragma (see L<open>).

(In Perls earlier than 5.8.1 the B<-C> switch was a Win32-only switch
that enabled the use of Unicode-aware "wide system call" Win32 APIs.
This feature was practically unused, however, and the command line
switch was therefore "recycled".)

B<Note:> Since perl 5.10.1, if the B<-C> option is used on the C<#!> line,
it must be specified on the command line as well, since the standard streams
are already set up at this point in the execution of the perl interpreter.
You can also use binmode() to set the encoding of an I/O stream.

=item B<-c>
X<-c>

causes Perl to check the syntax of the program and then exit without
executing it.  Actually, it I<will> execute and C<BEGIN>, C<UNITCHECK>,
or C<CHECK> blocks and any C<use> statements: these are considered as
occurring outside the execution of your program.  C<INIT> and C<END>
blocks, however, will be skipped.

=item B<-d>
X<-d> X<-dt>

=item B<-dt>

runs the program under the Perl debugger.  See L<perldebug>.
If B<t> is specified, it indicates to the debugger that threads
will be used in the code being debugged.

=item B<-d:>I<MOD[=bar,baz]>
X<-d> X<-dt>

=item B<-dt:>I<MOD[=bar,baz]>

runs the program under the control of a debugging, profiling, or tracing
module installed as C<Devel::I<MOD>>. E.g., B<-d:DProf> executes the
program using the C<Devel::DProf> profiler.  As with the B<-M> flag, options
may be passed to the C<Devel::I<MOD>> package where they will be received
and interpreted by the C<Devel::I<MOD>::import> routine.  Again, like B<-M>,
use -B<-d:-I<MOD>> to call C<Devel::I<MOD>::unimport> instead of import.  The
comma-separated list of options must follow a C<=> character.  If B<t> is
specified, it indicates to the debugger that threads will be used in the
code being debugged.  See L<perldebug>.

=item B<-D>I<letters>
X<-D> X<DEBUGGING> X<-DDEBUGGING>

=item B<-D>I<number>

sets debugging flags.  To watch how it executes your program, use
B<-Dtls>.  (This works only if debugging is compiled into your
Perl.)  Another nice value is B<-Dx>, which lists your compiled
syntax tree.  And B<-Dr> displays compiled regular expressions;
the format of the output is explained in L<perldebguts>.

As an alternative, specify a number instead of list of letters (e.g.,
B<-D14> is equivalent to B<-Dtls>):

         1  p  Tokenizing and parsing (with v, displays parse
               stack)
         2  s  Stack snapshots (with v, displays all stacks)
         4  l  Context (loop) stack processing
         8  t  Trace execution
        16  o  Method and overloading resolution
        32  c  String/numeric conversions
        64  P  Print profiling info, source file input state
       128  m  Memory and SV allocation
       256  f  Format processing
       512  r  Regular expression parsing and execution
      1024  x  Syntax tree dump
      2048  u  Tainting checks
      4096  U  Unofficial, User hacking (reserved for private,
               unreleased use)
      8192  H  Hash dump -- usurps values()
     16384  X  Scratchpad allocation
     32768  D  Cleaning up
     65536  S  Op slab allocation
    131072  T  Tokenizing
    262144  R  Include reference counts of dumped variables
               (eg when using -Ds)
    524288  J  show s,t,P-debug (don't Jump over) on opcodes within
               package DB
   1048576  v  Verbose: use in conjunction with other flags
   2097152  C  Copy On Write
   4194304  A  Consistency checks on internal structures
   8388608  q  quiet - currently only suppresses the "EXECUTING"
               message
  16777216  M  trace smart match resolution
  33554432  B  dump suBroutine definitions, including special
               Blocks like BEGIN
  67108864  L  trace Locale-related info; what gets output is very
               subject to change
 134217728  i  trace PerlIO layer processing.  Set PERLIO_DEBUG to
               the filename to trace to.

All these flags require B<-DDEBUGGING> when you compile the Perl
executable (but see C<:opd> in L<Devel::Peek> or L<re/'debug' mode>
which may change this).
See the F<INSTALL> file in the Perl source distribution
for how to do this.  This flag is automatically set if you include B<-g>
option when C<Configure> asks you about optimizer/debugger flags.

If you're just trying to get a print out of each line of Perl code
as it executes, the way that C<sh -x> provides for shell scripts,
you can't use Perl's B<-D> switch.  Instead do this

  # If you have "env" utility
  env PERLDB_OPTS="NonStop=1 AutoTrace=1 frame=2" perl -dS program

  # Bourne shell syntax
  $ PERLDB_OPTS="NonStop=1 AutoTrace=1 frame=2" perl -dS program

  # csh syntax
  % (setenv PERLDB_OPTS "NonStop=1 AutoTrace=1 frame=2"; perl -dS program)

See L<perldebug> for details and variations.

=item B<-e> I<commandline>
X<-e>

may be used to enter one line of program.  If B<-e> is given, Perl
will not look for a filename in the argument list.  Multiple B<-e>
commands may be given to build up a multi-line script.  Make sure
to use semicolons where you would in a normal program.

=item B<-E> I<commandline>
X<-E>

behaves just like B<-e>, except that it implicitly enables all
optional features (in the main compilation unit). See L<feature>.

=item B<-f>
X<-f> X<sitecustomize> X<sitecustomize.pl>

Disable executing F<$Config{sitelib}/sitecustomize.pl> at startup.

Perl can be built so that it by default will try to execute
F<$Config{sitelib}/sitecustomize.pl> at startup (in a BEGIN block).
This is a hook that allows the sysadmin to customize how Perl behaves.
It can for instance be used to add entries to the @@INC array to make Perl
find modules in non-standard locations.

Perl actually inserts the following code:

    BEGIN {
        do { local $!; -f "$Config{sitelib}/sitecustomize.pl"; }
            && do "$Config{sitelib}/sitecustomize.pl";
    }

Since it is an actual C<do> (not a C<require>), F<sitecustomize.pl>
doesn't need to return a true value. The code is run in package C<main>,
in its own lexical scope. However, if the script dies, C<$@@> will not
be set.

The value of C<$Config{sitelib}> is also determined in C code and not
read from C<Config.pm>, which is not loaded.

The code is executed I<very> early. For example, any changes made to
C<@@INC> will show up in the output of `perl -V`. Of course, C<END>
blocks will be likewise executed very late.

To determine at runtime if this capability has been compiled in your
perl, you can check the value of C<$Config{usesitecustomize}>.

=item B<-F>I<pattern>
X<-F>

specifies the pattern to split on for B<-a>. The pattern may be
surrounded by C<//>, C<"">, or C<''>, otherwise it will be put in single
quotes. You can't use literal whitespace in the pattern.

B<-F> implicitly sets both B<-a> and B<-n>.

=item B<-h>
X<-h>

prints a summary of the options.

=item B<-i>[I<extension>]
X<-i> X<in-place>

specifies that files processed by the C<E<lt>E<gt>> construct are to be
edited in-place.  It does this by renaming the input file, opening the
output file by the original name, and selecting that output file as the
default for print() statements.  The extension, if supplied, is used to
modify the name of the old file to make a backup copy, following these
rules:

If no extension is supplied, and your system supports it, the original
I<file> is kept open without a name while the output is redirected to
a new file with the original I<filename>.  When perl exits, cleanly or not,
the original I<file> is unlinked.

If the extension doesn't contain a C<*>, then it is appended to the
end of the current filename as a suffix.  If the extension does
contain one or more C<*> characters, then each C<*> is replaced
with the current filename.  In Perl terms, you could think of this
as:

    ($backup = $extension) =~ s/\*/$file_name/g;

This allows you to add a prefix to the backup file, instead of (or in
addition to) a suffix:

 $ perl -pi'orig_*' -e 's/bar/baz/' fileA  # backup to
                                           # 'orig_fileA'

Or even to place backup copies of the original files into another
directory (provided the directory already exists):

 $ perl -pi'old/*.orig' -e 's/bar/baz/' fileA  # backup to
                                               # 'old/fileA.orig'

These sets of one-liners are equivalent:

 $ perl -pi -e 's/bar/baz/' fileA          # overwrite current file
 $ perl -pi'*' -e 's/bar/baz/' fileA       # overwrite current file

 $ perl -pi'.orig' -e 's/bar/baz/' fileA   # backup to 'fileA.orig'
 $ perl -pi'*.orig' -e 's/bar/baz/' fileA  # backup to 'fileA.orig'

From the shell, saying

    $ perl -p -i.orig -e "s/foo/bar/; ... "

is the same as using the program:

    #!/usr/bin/perl -pi.orig
    s/foo/bar/;

which is equivalent to

    #!/usr/bin/perl
    $extension = '.orig';
    LINE: while (<>) {
	if ($ARGV ne $oldargv) {
	    if ($extension !~ /\*/) {
		$backup = $ARGV . $extension;
	    }
	    else {
		($backup = $extension) =~ s/\*/$ARGV/g;
	    }
	    rename($ARGV, $backup);
	    open(ARGVOUT, ">$ARGV");
	    select(ARGVOUT);
	    $oldargv = $ARGV;
	}
	s/foo/bar/;
    }
    continue {
	print;	# this prints to original filename
    }
    select(STDOUT);

except that the B<-i> form doesn't need to compare $ARGV to $oldargv to
know when the filename has changed.  It does, however, use ARGVOUT for
the selected filehandle.  Note that STDOUT is restored as the default
output filehandle after the loop.

As shown above, Perl creates the backup file whether or not any output
is actually changed.  So this is just a fancy way to copy files:

    $ perl -p -i'/some/file/path/*' -e 1 file1 file2 file3...
or
    $ perl -p -i'.orig' -e 1 file1 file2 file3...

You can use C<eof> without parentheses to locate the end of each input
file, in case you want to append to each file, or reset line numbering
(see example in L<perlfunc/eof>).

If, for a given file, Perl is unable to create the backup file as
specified in the extension then it will skip that file and continue on
with the next one (if it exists).

For a discussion of issues surrounding file permissions and B<-i>, see
L<perlfaq5/Why does Perl let me delete read-only files?  Why does -i clobber
protected files?  Isn't this a bug in Perl?>.

You cannot use B<-i> to create directories or to strip extensions from
files.

Perl does not expand C<~> in filenames, which is good, since some
folks use it for their backup files:

    $ perl -pi~ -e 's/foo/bar/' file1 file2 file3...

Note that because B<-i> renames or deletes the original file before
creating a new file of the same name, Unix-style soft and hard links will
not be preserved.

Finally, the B<-i> switch does not impede execution when no
files are given on the command line.  In this case, no backup is made
(the original file cannot, of course, be determined) and processing
proceeds from STDIN to STDOUT as might be expected.

=item B<-I>I<directory>
X<-I> X<@@INC>

Directories specified by B<-I> are prepended to the search path for
modules (C<@@INC>).

=item B<-l>[I<octnum>]
X<-l> X<$/> X<$\>

enables automatic line-ending processing.  It has two separate
effects.  First, it automatically chomps C<$/> (the input record
separator) when used with B<-n> or B<-p>.  Second, it assigns C<$\>
(the output record separator) to have the value of I<octnum> so
that any print statements will have that separator added back on.
If I<octnum> is omitted, sets C<$\> to the current value of
C<$/>.  For instance, to trim lines to 80 columns:

    perl -lpe 'substr($_, 80) = ""'

Note that the assignment C<$\ = $/> is done when the switch is processed,
so the input record separator can be different than the output record
separator if the B<-l> switch is followed by a B<-0> switch:

    gnufind / -print0 | perl -ln0e 'print "found $_" if -p'

This sets C<$\> to newline and then sets C<$/> to the null character.

=item B<-m>[B<->]I<module>
X<-m> X<-M>

=item B<-M>[B<->]I<module>

=item B<-M>[B<->]I<'module ...'>

=item B<-[mM]>[B<->]I<module=arg[,arg]...>

B<-m>I<module> executes C<use> I<module> C<();> before executing your
program.

B<-M>I<module> executes C<use> I<module> C<;> before executing your
program.  You can use quotes to add extra code after the module name,
e.g., C<'-MI<MODULE> qw(foo bar)'>.

If the first character after the B<-M> or B<-m> is a dash (B<->)
then the 'use' is replaced with 'no'.

A little builtin syntactic sugar means you can also say
B<-mI<MODULE>=foo,bar> or B<-MI<MODULE>=foo,bar> as a shortcut for
B<'-MI<MODULE> qw(foo bar)'>.  This avoids the need to use quotes when
importing symbols.  The actual code generated by B<-MI<MODULE>=foo,bar> is
C<use module split(/,/,q{foo,bar})>.  Note that the C<=> form
removes the distinction between B<-m> and B<-M>; that is,
B<-mI<MODULE>=foo,bar> is the same as B<-MI<MODULE>=foo,bar>.

A consequence of this is that B<-MI<MODULE>=number> never does a version check,
unless C<I<MODULE>::import()> itself is set up to do a version check, which
could happen for example if I<MODULE> inherits from L<Exporter>.

=item B<-n>
X<-n>

causes Perl to assume the following loop around your program, which
makes it iterate over filename arguments somewhat like I<sed -n> or
I<awk>:

  LINE:
    while (<>) {
	...		# your program goes here
    }

Note that the lines are not printed by default.  See L</-p> to have
lines printed.  If a file named by an argument cannot be opened for
some reason, Perl warns you about it and moves on to the next file.

Also note that C<< <> >> passes command line arguments to
L<perlfunc/open>, which doesn't necessarily interpret them as file names.
See  L<perlop> for possible security implications.

Here is an efficient way to delete all files that haven't been modified for
at least a week:

    find . -mtime +7 -print | perl -nle unlink

This is faster than using the B<-exec> switch of I<find> because you don't
have to start a process on every filename found (but it's not faster
than using the B<-delete> switch available in newer versions of I<find>.
It does suffer from the bug of mishandling newlines in pathnames, which
you can fix if you follow the example under B<-0>.

C<BEGIN> and C<END> blocks may be used to capture control before or after
the implicit program loop, just as in I<awk>.

=item B<-p>
X<-p>

causes Perl to assume the following loop around your program, which
makes it iterate over filename arguments somewhat like I<sed>:


  LINE:
    while (<>) {
	...		# your program goes here
    } continue {
	print or die "-p destination: $!\n";
    }

If a file named by an argument cannot be opened for some reason, Perl
warns you about it, and moves on to the next file.  Note that the
lines are printed automatically.  An error occurring during printing is
treated as fatal.  To suppress printing use the B<-n> switch.  A B<-p>
overrides a B<-n> switch.

C<BEGIN> and C<END> blocks may be used to capture control before or after
the implicit loop, just as in I<awk>.

=item B<-s>
X<-s>

enables rudimentary switch parsing for switches on the command
line after the program name but before any filename arguments (or before
an argument of B<-->).  Any switch found there is removed from @@ARGV and sets the
corresponding variable in the Perl program.  The following program
prints "1" if the program is invoked with a B<-xyz> switch, and "abc"
if it is invoked with B<-xyz=abc>.

    #!/usr/bin/perl -s
    if ($xyz) { print "$xyz\n" }

Do note that a switch like B<--help> creates the variable C<${-help}>, which is
not compliant with C<use strict "refs">.  Also, when using this option on a
script with warnings enabled you may get a lot of spurious "used only once"
warnings.

=item B<-S>
X<-S>

makes Perl use the PATH environment variable to search for the
program unless the name of the program contains path separators.

On some platforms, this also makes Perl append suffixes to the
filename while searching for it.  For example, on Win32 platforms,
the ".bat" and ".cmd" suffixes are appended if a lookup for the
original name fails, and if the name does not already end in one
of those suffixes.  If your Perl was compiled with C<DEBUGGING> turned
on, using the B<-Dp> switch to Perl shows how the search progresses.

Typically this is used to emulate C<#!> startup on platforms that don't
support C<#!>.  It's also convenient when debugging a script that uses C<#!>,
and is thus normally found by the shell's $PATH search mechanism.

This example works on many platforms that have a shell compatible with
Bourne shell:

    #!/usr/bin/perl
    eval 'exec /usr/bin/perl -wS $0 ${1+"$@@"}'
	    if $running_under_some_shell;

The system ignores the first line and feeds the program to F</bin/sh>,
which proceeds to try to execute the Perl program as a shell script.
The shell executes the second line as a normal shell command, and thus
starts up the Perl interpreter.  On some systems $0 doesn't always
contain the full pathname, so the B<-S> tells Perl to search for the
program if necessary.  After Perl locates the program, it parses the
lines and ignores them because the variable $running_under_some_shell
is never true.  If the program will be interpreted by csh, you will need
to replace C<${1+"$@@"}> with C<$*>, even though that doesn't understand
embedded spaces (and such) in the argument list.  To start up I<sh> rather
than I<csh>, some systems may have to replace the C<#!> line with a line
containing just a colon, which will be politely ignored by Perl.  Other
systems can't control that, and need a totally devious construct that
will work under any of I<csh>, I<sh>, or Perl, such as the following:

	eval '(exit $?0)' && eval 'exec perl -wS $0 ${1+"$@@"}'
	& eval 'exec /usr/bin/perl -wS $0 $argv:q'
		if $running_under_some_shell;

If the filename supplied contains directory separators (and so is an
absolute or relative pathname), and if that file is not found,
platforms that append file extensions will do so and try to look
for the file with those extensions added, one by one.

On DOS-like platforms, if the program does not contain directory
separators, it will first be searched for in the current directory
before being searched for on the PATH.  On Unix platforms, the
program will be searched for strictly on the PATH.

=item B<-t>
X<-t>

Like B<-T>, but taint checks will issue warnings rather than fatal
errors.  These warnings can now be controlled normally with C<no warnings
qw(taint)>.

B<Note: This is not a substitute for C<-T>!> This is meant to be
used I<only> as a temporary development aid while securing legacy code:
for real production code and for new secure code written from scratch,
always use the real B<-T>.

=item B<-T>
X<-T>

turns on "taint" so you can test them.  Ordinarily
these checks are done only when running setuid or setgid.  It's a
good idea to turn them on explicitly for programs that run on behalf
of someone else whom you might not necessarily trust, such as CGI
programs or any internet servers you might write in Perl.  See
L<perlsec> for details.  For security reasons, this option must be
seen by Perl quite early; usually this means it must appear early
on the command line or in the C<#!> line for systems which support
that construct.

=item B<-u>
X<-u>

This switch causes Perl to dump core after compiling your
program.  You can then in theory take this core dump and turn it
into an executable file by using the I<undump> program (not supplied).
This speeds startup at the expense of some disk space (which you
can minimize by stripping the executable).  (Still, a "hello world"
executable comes out to about 200K on my machine.)  If you want to
execute a portion of your program before dumping, use the dump()
operator instead.  Note: availability of I<undump> is platform
specific and may not be available for a specific port of Perl.

=item B<-U>
X<-U>

allows Perl to do unsafe operations.  Currently the only "unsafe"
operations are attempting to unlink directories while running as superuser
and running setuid programs with fatal taint checks turned into warnings.
Note that warnings must be enabled along with this option to actually
I<generate> the taint-check warnings.

=item B<-v>
X<-v>

prints the version and patchlevel of your perl executable.

=item B<-V>
X<-V>

prints summary of the major perl configuration values and the current
values of @@INC.

=item B<-V:>I<configvar>

Prints to STDOUT the value of the named configuration variable(s),
with multiples when your C<I<configvar>> argument looks like a regex (has
non-letters).  For example:

    $ perl -V:libc
	libc='/lib/libc-2.2.4.so';
    $ perl -V:lib.
	libs='-lnsl -lgdbm -ldb -ldl -lm -lcrypt -lutil -lc';
	libc='/lib/libc-2.2.4.so';
    $ perl -V:lib.*
	libpth='/usr/local/lib /lib /usr/lib';
	libs='-lnsl -lgdbm -ldb -ldl -lm -lcrypt -lutil -lc';
	lib_ext='.a';
	libc='/lib/libc-2.2.4.so';
	libperl='libperl.a';
	....

Additionally, extra colons can be used to control formatting.  A
trailing colon suppresses the linefeed and terminator ";", allowing
you to embed queries into shell commands.  (mnemonic: PATH separator
":".)

    $ echo "compression-vars: " `perl -V:z.*: ` " are here !"
    compression-vars:  zcat='' zip='zip'  are here !

A leading colon removes the "name=" part of the response, this allows
you to map to the name you need.  (mnemonic: empty label)

    $ echo "goodvfork="`./perl -Ilib -V::usevfork`
    goodvfork=false;

Leading and trailing colons can be used together if you need
positional parameter values without the names.  Note that in the case
below, the C<PERL_API> params are returned in alphabetical order.

    $ echo building_on `perl -V::osname: -V::PERL_API_.*:` now
    building_on 'linux' '5' '1' '9' now

=item B<-w>
X<-w>

prints warnings about dubious constructs, such as variable names
mentioned only once and scalar variables used
before being set; redefined subroutines; references to undefined
filehandles; filehandles opened read-only that you are attempting
to write on; values used as a number that don't I<look> like numbers;
using an array as though it were a scalar; if your subroutines
recurse more than 100 deep; and innumerable other things.

This switch really just enables the global C<$^W> variable; normally,
the lexically scoped C<use warnings> pragma is preferred. You
can disable or promote into fatal errors specific warnings using
C<__WARN__> hooks, as described in L<perlvar> and L<perlfunc/warn>.
See also L<perldiag> and L<perltrap>.  A fine-grained warning
facility is also available if you want to manipulate entire classes
of warnings; see L<warnings>.

=item B<-W>
X<-W>

Enables all warnings regardless of C<no warnings> or C<$^W>.
See L<warnings>.

=item B<-X>
X<-X>

Disables all warnings regardless of C<use warnings> or C<$^W>.
See L<warnings>.

=item B<-x>
X<-x>

=item B<-x>I<directory>

tells Perl that the program is embedded in a larger chunk of unrelated
text, such as in a mail message.  Leading garbage will be
discarded until the first line that starts with C<#!> and contains the
string "perl".  Any meaningful switches on that line will be applied.

All references to line numbers by the program (warnings, errors, ...)
will treat the C<#!> line as the first line.
Thus a warning on the 2nd line of the program, which is on the 100th
line in the file will be reported as line 2, not as line 100.
This can be overridden by using the C<#line> directive.
(See L<perlsyn/"Plain Old Comments (Not!)">)

If a directory name is specified, Perl will switch to that directory
before running the program.  The B<-x> switch controls only the
disposal of leading garbage.  The program must be terminated with
C<__END__> if there is trailing garbage to be ignored;  the program
can process any or all of the trailing garbage via the C<DATA> filehandle
if desired.

The directory, if specified, must appear immediately following the B<-x>
with no intervening whitespace.

=back

=head1 ENVIRONMENT
X<perl, environment variables>

=over 12

=item HOME
X<HOME>

Used if C<chdir> has no argument.

=item LOGDIR
X<LOGDIR>

Used if C<chdir> has no argument and HOME is not set.

=item PATH
X<PATH>

Used in executing subprocesses, and in finding the program if B<-S> is
used.

=item PERL5LIB
X<PERL5LIB>

A list of directories in which to look for Perl library
files before looking in the standard library and the current
directory.  Any architecture-specific and version-specific directories,
such as F<version/archname/>, F<version/>, or F<archname/> under the
specified locations are automatically included if they exist, with this
lookup done at interpreter startup time.  In addition, any directories
matching the entries in C<$Config{inc_version_list}> are added.
(These typically would be for older compatible perl versions installed
in the same directory tree.)

If PERL5LIB is not defined, PERLLIB is used.  Directories are separated
(like in PATH) by a colon on Unixish platforms and by a semicolon on
Windows (the proper path separator being given by the command C<perl
-V:I<path_sep>>).

When running taint checks, either because the program was running setuid or
setgid, or the B<-T> or B<-t> switch was specified, neither PERL5LIB nor
PERLLIB is consulted. The program should instead say:

    use lib "/my/directory";

=item PERL5OPT
X<PERL5OPT>

Command-line options (switches).  Switches in this variable are treated
as if they were on every Perl command line.  Only the B<-[CDIMUdmtwW]>
switches are allowed.  When running taint checks (either because the
program was running setuid or setgid, or because the B<-T> or B<-t>
switch was used), this variable is ignored.  If PERL5OPT begins with
B<-T>, tainting will be enabled and subsequent options ignored.  If
PERL5OPT begins with B<-t>, tainting will be enabled, a writable dot
removed from @@INC, and subsequent options honored.

=item PERLIO
X<PERLIO>

A space (or colon) separated list of PerlIO layers. If perl is built
to use PerlIO system for IO (the default) these layers affect Perl's IO.

It is conventional to start layer names with a colon (for example, C<:perlio>) to
emphasize their similarity to variable "attributes". But the code that parses
layer specification strings, which is also used to decode the PERLIO
environment variable, treats the colon as a separator.

An unset or empty PERLIO is equivalent to the default set of layers for
your platform; for example, C<:unix:perlio> on Unix-like systems
and C<:unix:crlf> on Windows and other DOS-like systems.

The list becomes the default for I<all> Perl's IO. Consequently only built-in
layers can appear in this list, as external layers (such as C<:encoding()>) need
IO in order to load them!  See L<"open pragma"|open> for how to add external
encodings as defaults.

Layers it makes sense to include in the PERLIO environment
variable are briefly summarized below. For more details see L<PerlIO>.

=over 8

=item :bytes
X<:bytes>

A pseudolayer that turns the C<:utf8> flag I<off> for the layer below;
unlikely to be useful on its own in the global PERLIO environment variable.
You perhaps were thinking of C<:crlf:bytes> or C<:perlio:bytes>.

=item :crlf
X<:crlf>

A layer which does CRLF to C<"\n"> translation distinguishing "text" and
"binary" files in the manner of MS-DOS and similar operating systems.
(It currently does I<not> mimic MS-DOS as far as treating of Control-Z
as being an end-of-file marker.)

=item :mmap
X<:mmap>

A layer that implements "reading" of files by using I<mmap>(2) to
make an entire file appear in the process's address space, and then
using that as PerlIO's "buffer".

=item :perlio
X<:perlio>

This is a re-implementation of stdio-like buffering written as a
PerlIO layer.  As such it will call whatever layer is below it for
its operations, typically C<:unix>.

=item :pop
X<:pop>

An experimental pseudolayer that removes the topmost layer.
Use with the same care as is reserved for nitroglycerine.

=item :raw
X<:raw>

A pseudolayer that manipulates other layers.  Applying the C<:raw>
layer is equivalent to calling C<binmode($fh)>.  It makes the stream
pass each byte as-is without translation.  In particular, both CRLF
translation and intuiting C<:utf8> from the locale are disabled.

Unlike in earlier versions of Perl, C<:raw> is I<not>
just the inverse of C<:crlf>: other layers which would affect the
binary nature of the stream are also removed or disabled.

=item :stdio
X<:stdio>

This layer provides a PerlIO interface by wrapping system's ANSI C "stdio"
library calls. The layer provides both buffering and IO.
Note that the C<:stdio> layer does I<not> do CRLF translation even if that
is the platform's normal behaviour. You will need a C<:crlf> layer above it
to do that.

=item :unix
X<:unix>

Low-level layer that calls C<read>, C<write>, C<lseek>, etc.

=item :utf8
X<:utf8>

A pseudolayer that enables a flag in the layer below to tell Perl
that output should be in utf8 and that input should be regarded as
already in valid utf8 form. B<WARNING: It does not check for validity and as such
should be handled with extreme caution for input, because security violations
can occur with non-shortest UTF-8 encodings, etc.> Generally C<:encoding(utf8)> is
the best option when reading UTF-8 encoded data.

=item :win32
X<:win32>

On Win32 platforms this I<experimental> layer uses native "handle" IO
rather than a Unix-like numeric file descriptor layer. Known to be
buggy in this release (5.14).

=back

The default set of layers should give acceptable results on all platforms

For Unix platforms that will be the equivalent of "unix perlio" or "stdio".
Configure is set up to prefer the "stdio" implementation if the system's library
provides for fast access to the buffer; otherwise, it uses the "unix perlio"
implementation.

On Win32 the default in this release (5.14) is "unix crlf". Win32's "stdio"
has a number of bugs/mis-features for Perl IO which are somewhat depending
on the version and vendor of the C compiler. Using our own C<crlf> layer as
the buffer avoids those issues and makes things more uniform.  The C<crlf>
layer provides CRLF conversion as well as buffering.

This release (5.14) uses C<unix> as the bottom layer on Win32, and so still
uses the C compiler's numeric file descriptor routines. There is an
experimental native C<win32> layer, which is expected to be enhanced and
should eventually become the default under Win32.

The PERLIO environment variable is completely ignored when Perl
is run in taint mode.

=item PERLIO_DEBUG
X<PERLIO_DEBUG>

If set to the name of a file or device when Perl is run with the
B<-Di> command-line switch, the logging of certain operations of
the PerlIO subsystem will be redirected to the specified file rather
than going to stderr, which is the default. The file is opened in append
mode. Typical uses are in Unix:

   % env PERLIO_DEBUG=/tmp/perlio.log perl -Di script ...

and under Win32, the approximately equivalent:

   > set PERLIO_DEBUG=CON
   perl -Di script ...

This functionality is disabled for setuid scripts, for scripts run
with B<-T>, and for scripts run on a Perl built without C<-DDEBUGGING>
support.

=item PERLLIB
X<PERLLIB>

A list of directories in which to look for Perl library
files before looking in the standard library and the current directory.
If PERL5LIB is defined, PERLLIB is not used.

The PERLLIB environment variable is completely ignored when Perl
is run in taint mode.

=item PERL5DB
X<PERL5DB>

The command used to load the debugger code.  The default is:

	BEGIN { require "perl5db.pl" }

The PERL5DB environment variable is only used when Perl is started with
a bare B<-d> switch.

=item PERL5DB_THREADED
X<PERL5DB_THREADED>

If set to a true value, indicates to the debugger that the code being
debugged uses threads.

=item PERL5SHELL (specific to the Win32 port)
X<PERL5SHELL>

On Win32 ports only, may be set to an alternative shell that Perl must use
internally for executing "backtick" commands or system().  Default is
C<cmd.exe /x/d/c> on WindowsNT and C<command.com /c> on Windows95.  The
value is considered space-separated.  Precede any character that
needs to be protected, like a space or backslash, with another backslash.

Note that Perl doesn't use COMSPEC for this purpose because
COMSPEC has a high degree of variability among users, leading to
portability concerns.  Besides, Perl can use a shell that may not be
fit for interactive use, and setting COMSPEC to such a shell may
interfere with the proper functioning of other programs (which usually
look in COMSPEC to find a shell fit for interactive use).

Before Perl 5.10.0 and 5.8.8, PERL5SHELL was not taint checked
when running external commands.  It is recommended that
you explicitly set (or delete) C<$ENV{PERL5SHELL}> when running
in taint mode under Windows.

=item PERL_ALLOW_NON_IFS_LSP (specific to the Win32 port)
X<PERL_ALLOW_NON_IFS_LSP>

Set to 1 to allow the use of non-IFS compatible LSPs (Layered Service Providers).
Perl normally searches for an IFS-compatible LSP because this is required
for its emulation of Windows sockets as real filehandles.  However, this may
cause problems if you have a firewall such as I<McAfee Guardian>, which requires
that all applications use its LSP but which is not IFS-compatible, because clearly
Perl will normally avoid using such an LSP.

Setting this environment variable to 1 means that Perl will simply use the
first suitable LSP enumerated in the catalog, which keeps I<McAfee Guardian>
happy--and in that particular case Perl still works too because I<McAfee
Guardian>'s LSP actually plays other games which allow applications
requiring IFS compatibility to work.

=item PERL_DEBUG_MSTATS
X<PERL_DEBUG_MSTATS>

Relevant only if Perl is compiled with the C<malloc> included with the Perl
distribution; that is, if C<perl -V:d_mymalloc> is "define".

If set, this dumps out memory statistics after execution.  If set
to an integer greater than one, also dumps out memory statistics
after compilation.

=item PERL_DESTRUCT_LEVEL
X<PERL_DESTRUCT_LEVEL>

Relevant only if your Perl executable was built with B<-DDEBUGGING>,
this controls the behaviour of global destruction of objects and other
references.  See L<perlhacktips/PERL_DESTRUCT_LEVEL> for more information.

=item PERL_DL_NONLAZY
X<PERL_DL_NONLAZY>

Set to C<"1"> to have Perl resolve I<all> undefined symbols when it loads
a dynamic library.  The default behaviour is to resolve symbols when
they are used.  Setting this variable is useful during testing of
extensions, as it ensures that you get an error on misspelled function
names even if the test suite doesn't call them.

=item PERL_ENCODING
X<PERL_ENCODING>

If using the C<use encoding> pragma without an explicit encoding name, the
PERL_ENCODING environment variable is consulted for an encoding name.

=item PERL_HASH_SEED
X<PERL_HASH_SEED>

(Since Perl 5.8.1, new semantics in Perl 5.18.0)  Used to override
the randomization of Perl's internal hash function. The value is expressed
in hexadecimal, and may include a leading 0x. Truncated patterns
are treated as though they are suffixed with sufficient 0's as required.

If the option is provided, and C<PERL_PERTURB_KEYS> is NOT set, then
a value of '0' implies C<PERL_PERTURB_KEYS=0> and any other value
implies C<PERL_PERTURB_KEYS=2>.

B<PLEASE NOTE: The hash seed is sensitive information>. Hashes are
randomized to protect against local and remote attacks against Perl
code. By manually setting a seed, this protection may be partially or
completely lost.

See L<perlsec/"Algorithmic Complexity Attacks">, L</PERL_PERTURB_KEYS>, and
L</PERL_HASH_SEED_DEBUG> for more information.

=item PERL_PERTURB_KEYS
X<PERL_PERTURB_KEYS>

(Since Perl 5.18.0)  Set to C<"0"> or C<"NO"> then traversing keys
will be repeatable from run to run for the same PERL_HASH_SEED.
Insertion into a hash will not change the order, except to provide
for more space in the hash. When combined with setting PERL_HASH_SEED
this mode is as close to pre 5.18 behavior as you can get.

When set to C<"1"> or C<"RANDOM"> then traversing keys will be randomized.
Every time a hash is inserted into the key order will change in a random
fashion. The order may not be repeatable in a following program run
even if the PERL_HASH_SEED has been specified. This is the default
mode for perl.

When set to C<"2"> or C<"DETERMINISTIC"> then inserting keys into a hash
will cause the key order to change, but in a way that is repeatable
from program run to program run.

B<NOTE:> Use of this option is considered insecure, and is intended only
for debugging non-deterministic behavior in Perl's hash function. Do
not use it in production.

See L<perlsec/"Algorithmic Complexity Attacks"> and L</PERL_HASH_SEED>
and L</PERL_HASH_SEED_DEBUG> for more information. You can get and set the
key traversal mask for a specific hash by using the C<hash_traversal_mask()>
function from L<Hash::Util>.

=item PERL_HASH_SEED_DEBUG
X<PERL_HASH_SEED_DEBUG>

(Since Perl 5.8.1.)  Set to C<"1"> to display (to STDERR) information
about the hash function, seed, and what type of key traversal
randomization is in effect at the beginning of execution.  This, combined
with L</PERL_HASH_SEED> and L</PERL_PERTURB_KEYS> is intended to aid in
debugging nondeterministic behaviour caused by hash randomization.

B<Note> that any information about the hash function, especially the hash
seed is B<sensitive information>: by knowing it, one can craft a denial-of-service
attack against Perl code, even remotely; see L<perlsec/"Algorithmic Complexity Attacks">
for more information. B<Do not disclose the hash seed> to people who
don't need to know it. See also C<hash_seed()> and
C<key_traversal_mask()> in L<Hash::Util>.

An example output might be:

 HASH_FUNCTION = ONE_AT_A_TIME_HARD HASH_SEED = 0x652e9b9349a7a032 PERTURB_KEYS = 1 (RANDOM)

=item PERL_MEM_LOG
X<PERL_MEM_LOG>

If your Perl was configured with B<-Accflags=-DPERL_MEM_LOG>, setting
the environment variable C<PERL_MEM_LOG> enables logging debug
messages. The value has the form C<< <I<number>>[m][s][t] >>, where
C<I<number>> is the file descriptor number you want to write to (2 is
default), and the combination of letters specifies that you want
information about (m)emory and/or (s)v, optionally with
(t)imestamps. For example, C<PERL_MEM_LOG=1mst> logs all
information to stdout. You can write to other opened file descriptors
in a variety of ways:

  $ 3>foo3 PERL_MEM_LOG=3m perl ...

=item PERL_ROOT (specific to the VMS port)
X<PERL_ROOT>

A translation-concealed rooted logical name that contains Perl and the
logical device for the @@INC path on VMS only.  Other logical names that
affect Perl on VMS include PERLSHR, PERL_ENV_TABLES, and
SYS$TIMEZONE_DIFFERENTIAL, but are optional and discussed further in
L<perlvms> and in F<README.vms> in the Perl source distribution.

=item PERL_SIGNALS
X<PERL_SIGNALS>

Available in Perls 5.8.1 and later.  If set to C<"unsafe">, the pre-Perl-5.8.0
signal behaviour (which is immediate but unsafe) is restored.  If set
to C<safe>, then safe (but deferred) signals are used.  See
L<perlipc/"Deferred Signals (Safe Signals)">.

=item PERL_UNICODE
X<PERL_UNICODE>

Equivalent to the B<-C> command-line switch.  Note that this is not
a boolean variable. Setting this to C<"1"> is not the right way to
"enable Unicode" (whatever that would mean).  You can use C<"0"> to
"disable Unicode", though (or alternatively unset PERL_UNICODE in
your shell before starting Perl).  See the description of the B<-C>
switch for more information.

=item SYS$LOGIN (specific to the VMS port)
X<SYS$LOGIN>

Used if chdir has no argument and HOME and LOGDIR are not set.

=back

Perl also has environment variables that control how Perl handles data
specific to particular natural languages; see L<perllocale>.

Perl and its various modules and components, including its test frameworks,
may sometimes make use of certain other environment variables.  Some of
these are specific to a particular platform.  Please consult the
appropriate module documentation and any documentation for your platform
(like L<perlsolaris>, L<perllinux>, L<perlmacosx>, L<perlwin32>, etc) for
variables peculiar to those specific situations.

Perl makes all environment variables available to the program being
executed, and passes these along to any child processes it starts.
However, programs running setuid would do well to execute the following
lines before doing anything else, just to keep people honest:

    $ENV{PATH}  = "/bin:/usr/bin";    # or whatever you need
    $ENV{SHELL} = "/bin/sh" if exists $ENV{SHELL};
    delete @@ENV{qw(IFS CDPATH ENV BASH_ENV)};
@


1.17
log
@Fix merge conflicts, remove extra files, match upstream perl-5.20.1

ok deraadt@@ sthen@@ espie@@ miod@@
@
text
@d96 1
a96 1
If the C<#!> line does not contain the word "perl" nor the word "indir"
d293 1
a293 1
              (the LC_ALL, LC_TYPE, and LANG, in the order of
d391 36
a426 31
        1  p  Tokenizing and parsing (with v, displays parse stack)
        2  s  Stack snapshots (with v, displays all stacks)
        4  l  Context (loop) stack processing
        8  t  Trace execution
       16  o  Method and overloading resolution
       32  c  String/numeric conversions
       64  P  Print profiling info, source file input state
      128  m  Memory and SV allocation
      256  f  Format processing
      512  r  Regular expression parsing and execution
     1024  x  Syntax tree dump
     2048  u  Tainting checks
     4096  U  Unofficial, User hacking (reserved for private,
              unreleased use)
     8192  H  Hash dump -- usurps values()
    16384  X  Scratchpad allocation
    32768  D  Cleaning up
    65536  S  Op slab allocation
   131072  T  Tokenizing
   262144  R  Include reference counts of dumped variables (eg when
              using -Ds)
   524288  J  show s,t,P-debug (don't Jump over) on opcodes within
              package DB
  1048576  v  Verbose: use in conjunction with other flags
  2097152  C  Copy On Write
  4194304  A  Consistency checks on internal structures
  8388608  q  quiet - currently only suppresses the "EXECUTING"
              message
 16777216  M  trace smart match resolution
 33554432  B  dump suBroutine definitions, including special Blocks
              like BEGIN
d712 4
a715 3
have to start a process on every filename found.  It does suffer from
the bug of mishandling newlines in pathnames, which you can fix if
you follow the example under B<-0>.
d1158 5
a1162 3
If set to the name of a file or device, certain operations of PerlIO
subsystem will be logged to that file, which is opened in append mode.
Typical uses are in Unix:
d1164 1
a1164 1
   % env PERLIO_DEBUG=/dev/tty perl script ...
d1169 1
a1169 1
   perl script ...
d1171 3
a1173 2
This functionality is disabled for setuid scripts and for scripts run
with B<-T>.
d1336 1
a1336 1
    HASH_FUNCTION = ONE_AT_A_TIME_HARD HASH_SEED = 0x652e9b9349a7a032 PERTURB_KEYS = 1 (RANDOM)
@


1.16
log
@Merge perl-5.18.2 plus local patches, remove old files

OK espie@@ sthen@@ deraadt@@
@
text
@d223 3
d271 2
d495 5
a499 3
specifies the pattern to split on if B<-a> is also in effect.  The
pattern may be surrounded by C<//>, C<"">, or C<''>, otherwise it will be
put in single quotes. You can't use literal whitespace in the pattern.
d602 3
a604 2
For a discussion of issues surrounding file permissions and B<-i>,
see L<perlfaq5/Why does Perl let me delete read-only files?  Why does -i clobber protected files?  Isn't this a bug in Perl?>.
d674 2
a675 1
removes the distinction between B<-m> and B<-M>.
d750 4
a753 3
Do note that a switch like B<--help> creates the variable C<${-help}>, which is not compliant
with C<use strict "refs">.  Also, when using this option on a script with
warnings enabled you may get a lot of spurious "used only once" warnings.
d923 1
a923 1
of warnings; see L<warnings> or L<perllexwarn>.
d929 1
a929 1
See L<perllexwarn>.
d935 1
a935 1
See L<perllexwarn>.
d1278 1
a1278 1
See L<perlsec/"Algorithmic Complexity Attacks"> and L</PERL_PERTURB_KEYS>
@


1.15
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@d93 1
a93 1
a specific version of Perl, say, perl5.005_57, you should place
d208 1
a208 1
    #!/usr/local/bin/perl5.00554
d213 1
a213 1
    use 5.005_54;
d403 1
d509 4
a512 2
If no extension is supplied, no backup is made and the current file is
overwritten.
d982 7
a988 3
directory.  Any architecture-specific directories under the specified
locations are automatically included if they exist, with this lookup
done at interpreter startup time.
d1009 1
a1009 1
B<- T>, tainting will be enabled and subsequent options ignored.  If
d1021 1
a1021 1
layer specification strings,  which is also used to decode the PERLIO
d1030 1
a1030 1
IO in  order to load them!. See L<"open pragma"|open> for how to add external
d1143 1
a1143 1
subsystem will be logged to that file, which is opened in append mode
d1254 8
a1261 17
(Since Perl 5.8.1.)  Used to randomize Perl's internal hash function.
To emulate the pre-5.8.1 behaviour, set to an integer; C<"0"> means
exactly the same order as in 5.8.0.  "Pre-5.8.1" means, among other
things, that hash keys will always have the same ordering between
different runs of Perl.

Most hashes by default return elements in the same order as in Perl 5.8.0.
On a hash by hash basis, if pathological data is detected during a hash
key insertion, then that hash will switch to an alternative random hash
seed.

The default behaviour is to randomize unless the PERL_HASH_SEED is set.
If Perl has been compiled with B<-DUSE_HASH_SEED_EXPLICIT>, the default
behaviour is I<not> to randomize unless the PERL_HASH_SEED is set.

If PERL_HASH_SEED is unset or set to a non-numeric string, Perl uses
the pseudorandom seed supplied by the operating system and libraries.
d1268 1
a1268 1
See L<perlsec/"Algorithmic Complexity Attacks"> and
d1271 28
d1302 16
a1317 10
(Since Perl 5.8.1.)  Set to C<"1"> to display (to STDERR) the value of
the hash seed at the beginning of execution.  This, combined with
L</PERL_HASH_SEED> is intended to aid in debugging nondeterministic
behaviour caused by hash randomization.

B<Note that the hash seed is sensitive information>: by knowing it, one
can craft a denial-of-service attack against Perl code, even remotely;
see L<perlsec/"Algorithmic Complexity Attacks"> for more information.
B<Do not disclose the hash seed> to people who don't need to know it.
See also hash_seed() in L<Hash::Util>.
@


1.14
log
@merge in perl 5.12.2 plus local changes
@
text
@d36 1
a36 1
(Note that systems supporting the #! notation invoke interpreters this
d49 1
a49 1
scans for the first line starting with #! and containing the word
d54 1
a54 1
The #! line is always examined for switches as the line is being
d56 2
a57 2
with the #! line, or worse, doesn't even recognize the #! line, you
still can get consistent switch behavior regardless of how Perl was
d61 1
a61 1
kernel interpretation of the #! line after 32 characters, some
d76 1
a76 1
Parsing of the #! switches starts wherever "perl" is mentioned in the line.
d87 1
a87 1
A similar trick involves the B<env> program, if you have it.
d94 1
a94 1
that directly in the #! line's path.
d96 6
a101 5
If the #! line does not contain the word "perl", the program named after
the #! is executed instead of the Perl interpreter.  This is slightly
bizarre, but it helps people on machines that don't do #!, because they
can tell a program that their SHELL is F</usr/bin/perl>, and Perl will then
dispatch the program to the correct interpreter for them.
d115 1
a115 1
Unix's #! technique can be simulated on other systems:
d147 2
a148 2
    $ perl -mysw 'f$env("procedure")' 'p1' 'p2' 'p3' 'p4' 'p5' 'p6' 'p7' 'p8' !
    $ exit++ + ++$status != 0 and $exit = $status = undef;
d164 1
a164 1
one-liners (see B<-e> below).
d182 1
a182 1
command and it is entirely possible neither works.  If B<4DOS> were
d233 1
a233 1
example, if you have a version of B<find> which can print filenames
d243 6
a248 5
C<-0xHHH...>, where the C<H> are valid hexadecimal digits.  Unlike the octal
form, this one may be used to specify any Unicode character, even those beyond
0xFF.
(This means that you cannot use the C<-x> with a directory name that
consists of hexadecimal digits.)
d271 1
a271 1
The C<-C> flag controls some of the Perl Unicode features.
d273 1
a273 1
As of 5.8.1, the C<-C> can be followed either by a number or a list
d286 4
a289 4
    L    64   normally the "IOEioA" are unconditional,
              the L makes them conditional on the locale environment
              variables (the LC_ALL, LC_TYPE, and LANG, in the order
              of decreasing precedence) -- if the variables indicate
d291 2
a292 2
    a   256   Set ${^UTF8CACHE} to -1, to run the UTF-8 caching code in
              debugging mode.
d301 1
a301 1
For example, C<-COE> and C<-C6> will both turn on UTF-8-ness on both
d306 5
a310 5
operations) will have the C<:utf8> PerlIO layer implicitly applied
to them, in other words, UTF-8 is expected from any input stream,
and UTF-8 is produced to any output stream.  This is just the default,
with explicit layers in open() and with binmode() one can manipulate
streams as usual.
d312 1
a312 1
C<-C> on its own (not followed by any number or option list), or the
d314 2
a315 2
same effect as C<-CSDL>.  In other words, the standard I/O handles and
the default C<open()> layer are UTF-8-fied B<but> only if the locale
d318 1
d320 1
a320 1
You can use C<-C0> (or C<"0"> for C<PERL_UNICODE>) to explicitly
d329 1
a329 1
(In Perls earlier than 5.8.1 the C<-C> switch was a Win32-only switch
d334 2
a335 2
B<Note:> Since perl 5.10.1, if the -C option is used on the #! line, it
must be specified on the command line as well, since the standard streams
d343 4
a346 4
executing it.  Actually, it I<will> execute C<BEGIN>, C<UNITCHECK>,
C<CHECK>, and C<use> blocks, because these are considered as occurring
outside the execution of your program.  C<INIT> and C<END> blocks,
however, will be skipped.
d357 1
a357 1
=item B<-d:>I<foo[=bar,baz]>
d360 1
a360 1
=item B<-dt:>I<foo[=bar,baz]>
d362 9
a370 9
runs the program under the control of a debugging, profiling, or
tracing module installed as Devel::foo. E.g., B<-d:DProf> executes
the program using the Devel::DProf profiler.  As with the B<-M>
flag, options may be passed to the Devel::foo package where they
will be received and interpreted by the Devel::foo::import routine.
The comma-separated list of options must follow a C<=> character.
If B<t> is specified, it indicates to the debugger that threads
will be used in the code being debugged.
See L<perldebug>.
d398 2
a399 1
     4096  U  Unofficial, User hacking (reserved for private, unreleased use)
d403 5
a407 3
   131072  T  Tokenising
   262144  R  Include reference counts of dumped variables (eg when using -Ds)
   524288  J  Do not s,t,P-debug (Jump over) opcodes within package DB
d411 2
a412 1
  8388608  q  quiet - currently only suppresses the "EXECUTING" message
d414 2
a415 1
 33554432  B  dump suBroutine definitions, including special Blocks like BEGIN
d418 2
a419 1
executable (but see L<Devel::Peek>, L<re> which may change this).
d460 2
a461 2
This is a hook that allows the sysadmin to customize how perl behaves.
It can for instance be used to add entries to the @@INC array to make perl
d479 1
a479 1
The code is executed B<very> early. For example, any changes made to
d522 2
a523 1
    $ perl -pi'orig_*' -e 's/bar/baz/' fileA	# backup to 'orig_fileA'
d528 2
a529 1
    $ perl -pi'old/*.orig' -e 's/bar/baz/' fileA # backup to 'old/fileA.orig'
d533 2
a534 2
    $ perl -pi -e 's/bar/baz/' fileA		# overwrite current file
    $ perl -pi'*' -e 's/bar/baz/' fileA		# overwrite current file
d536 2
a537 2
    $ perl -pi'.orig' -e 's/bar/baz/' fileA	# backup to 'fileA.orig'
    $ perl -pi'*.orig' -e 's/bar/baz/' fileA	# backup to 'fileA.orig'
d653 1
a653 1
e.g., C<'-Mmodule qw(foo bar)'>.
d655 1
a655 1
If the first character after the B<-M> or B<-m> is a dash (C<->)
d659 3
a661 3
B<-mmodule=foo,bar> or B<-Mmodule=foo,bar> as a shortcut for
C<'-Mmodule qw(foo bar)'>.  This avoids the need to use quotes when
importing symbols.  The actual code generated by B<-Mmodule=foo,bar> is
d665 3
a667 3
A consequence of this is that B<-MFoo=number> never does a version check
(unless C<Foo::import()> itself is set up to do a version check, which
could happen for example if Foo inherits from Exporter.)
d673 2
a674 2
makes it iterate over filename arguments somewhat like B<sed -n> or
B<awk>:
d681 1
a681 1
Note that the lines are not printed by default.  See B<-p> to have
d694 1
a694 1
This is faster than using the B<-exec> switch of B<find> because you don't
d700 1
a700 1
the implicit program loop, just as in B<awk>.
d706 1
a706 1
makes it iterate over filename arguments somewhat like B<sed>:
d723 1
a723 1
the implicit loop, just as in B<awk>.
d738 2
a739 2
Do note that a switch like B<--help> creates the variable ${-help}, which is not compliant
with C<strict refs>.  Also, when using this option on a script with
d746 1
a746 1
program (unless the name of the program contains directory separators).
d752 2
a753 2
of those suffixes.  If your Perl was compiled with DEBUGGING turned
on, using the -Dp switch to Perl shows how the search progresses.
d755 2
a756 2
Typically this is used to emulate #! startup on platforms that don't
support #!.  Its also convenient when debugging a script that uses #!,
d775 2
a776 2
embedded spaces (and such) in the argument list.  To start up sh rather
than csh, some systems may have to replace the #! line with a line
d779 1
a779 1
will work under any of B<csh>, B<sh>, or Perl, such as the following:
d785 1
a785 1
If the filename supplied contains directory separators (i.e., is an
d799 1
a799 1
errors.  These warnings can be controlled normally with C<no warnings
d802 3
a804 3
B<NOTE: this is not a substitute for -T.> This is meant only to be
used as a temporary development aid while securing legacy code:
for real production code and for new secure code written from scratch
d810 1
a810 1
forces "taint" checks to be turned on so you can test them.  Ordinarily
d817 1
a817 1
on the command line or in the #! line for systems which support
d823 1
a823 1
This obsolete switch causes Perl to dump core after compiling your
d825 1
a825 1
into an executable file by using the B<undump> program (not supplied).
d830 1
a830 1
operator instead.  Note: availability of B<undump> is platform
d837 4
a840 5
operations are attempting to unlink directories while running as 
superuser, and running setuid programs with fatal taint checks turned
into warnings.  Note that the B<-w> switch (or the C<$^W> variable) 
must be used along with this option to actually I<generate> the
taint-check warnings.  
d856 1
a856 1
with multiples when your configvar argument looks like a regex (has
d873 1
a873 1
trailing colon suppresses the linefeed and terminator ';', allowing
d875 1
a875 1
':'.)
d880 1
a880 1
A leading colon removes the 'name=' part of the response, this allows
d888 1
a888 1
below, the PERL_API params are returned in alphabetical order.
d897 6
a902 6
that are mentioned only once and scalar variables that are used
before being set, redefined subroutines, references to undefined
filehandles or filehandles opened read-only that you are attempting
to write on, values used as a number that don't look like numbers,
using an array as though it were a scalar, if your subroutines
recurse more than 100 deep, and innumerable other things.
d904 2
a905 1
This switch really just enables the internal C<$^W> variable.  You
d908 1
a908 1
See also L<perldiag> and L<perltrap>.  A new, fine-grained warning
d930 2
a931 2
ASCII text, such as in a mail message.  Leading garbage will be
discarded until the first line that starts with #! and contains the
d935 5
a939 5
will treat the #! line as the first line.
Thus a warning on the 2nd line of the program (which is on the 100th
line in the file) will be reported as line 2, and not as line 100.
This can be overridden by using the #line directive.
(See L<perlsyn/"Plain-Old-Comments-(Not!)">)
d944 3
a946 3
C<__END__> if there is trailing garbage to be ignored (the program
can process any or all of the trailing garbage via the DATA filehandle
if desired).
d961 1
a961 1
Used if chdir has no argument.
d966 1
a966 1
Used if chdir has no argument and HOME is not set.
d980 2
a981 2
locations are automatically included if they exist (this lookup
being done at interpreter startup time.)
d986 1
a986 1
-V:path_sep>).
d988 3
a990 3
When running taint checks (either because the program was running setuid
or setgid, or the B<-T> or B<-t> switch was specified), neither variable
is used. The program should instead say:
d997 1
a997 1
Command-line options (switches).  Switches in this variable are taken
d999 6
a1004 4
switches are allowed.  When running taint checks (because the program
was running setuid or setgid, or the B<-T> switch was used), this
variable is ignored.  If PERL5OPT begins with B<-T>, tainting will be
enabled, and any subsequent options ignored.
d1010 1
a1010 1
to use PerlIO system for IO (the default) these layers effect perl's IO.
d1012 4
a1015 4
It is conventional to start layer names with a colon e.g. C<:perlio> to
emphasise their similarity to variable "attributes". But the code that parses
layer specification strings (which is also used to decode the PERLIO
environment variable) treats the colon as a separator.
d1018 1
a1018 1
your platform, for example C<:unix:perlio> on Unix-like systems
d1021 2
a1022 2
The list becomes the default for I<all> perl's IO. Consequently only built-in
layers can appear in this list, as external layers (such as :encoding()) need
d1026 2
a1027 2
The layers that it makes sense to include in the PERLIO environment
variable are briefly summarised below. For more details see L<PerlIO>.
d1034 2
a1035 2
A pseudolayer that turns I<off> the C<:utf8> flag for the layer below.
Unlikely to be useful on its own in the global PERLIO environment variable.
d1041 1
a1041 1
A layer which does CRLF to "\n" translation distinguishing "text" and
d1049 2
a1050 2
A layer which implements "reading" of files by using C<mmap()> to
make (whole) file appear in the process's address space, and then
d1056 3
a1058 3
This is a re-implementation of "stdio-like" buffering written as a
PerlIO "layer".  As such it will call whatever layer is below it for
its operations (typically C<:unix>).
d1064 1
a1064 1
Use with the same care as is reserved for nitroglycerin.
d1071 2
a1072 2
pass each byte as-is without any translation.  In particular CRLF
translation, and/or :utf8 intuited from locale are disabled.
d1074 2
a1075 2
Unlike in the earlier versions of Perl C<:raw> is I<not>
just the inverse of C<:crlf> - other layers which would affect the
d1081 1
a1081 1
This layer provides PerlIO interface by wrapping system's ANSI C "stdio"
d1083 2
a1084 2
Note that C<:stdio> layer does I<not> do CRLF translation even if that
is platforms normal behaviour. You will need a C<:crlf> layer above it
d1090 1
a1090 1
Low level layer which calls C<read>, C<write> and C<lseek> etc.
d1095 1
a1095 1
A pseudolayer that turns on a flag on the layer below to tell perl
d1097 3
a1099 2
already in valid utf8 form. It does not check for validity and as such
should be handled with caution for input. Generally C<:encoding(utf8)> is
d1106 2
a1107 2
rather than unix-like numeric file descriptor layer. Known to be
buggy in this release.
d1111 1
a1111 1
On all platforms the default set of layers should give acceptable results.
d1113 3
a1115 3
For Unix platforms that will equivalent of "unix perlio" or "stdio".
Configure is setup to prefer "stdio" implementation if system's library
provides for fast access to the buffer, otherwise it uses the "unix perlio"
d1118 10
a1127 11
On Win32 the default in this release is "unix crlf". Win32's "stdio"
has a number of bugs/mis-features for perl IO which are somewhat
C compiler vendor/version dependent. Using our own C<crlf> layer as
the buffer avoids those issues and makes things more uniform.
The C<crlf> layer provides CRLF to/from "\n" conversion as well as
buffering.

This release uses C<unix> as the bottom layer on Win32 and so still uses C
compiler's numeric file descriptor routines. There is an experimental native
C<win32> layer which is expected to be enhanced and should eventually be
the default under Win32.
d1129 1
a1129 1
The PERLIO environment variable is completely ignored when perl
d1135 3
a1137 3
If set to the name of a file or device then certain operations of PerlIO
sub-system will be logged to that file (opened as append). Typical uses
are Unix:
d1139 1
a1139 1
   PERLIO_DEBUG=/dev/tty perl script ...
d1141 1
a1141 1
and Win32 approximate equivalent:
d1143 1
a1143 1
   set PERLIO_DEBUG=CON
d1156 1
a1156 1
The PERLLIB environment variable is completely ignored when perl
d1164 1
a1164 1
	BEGIN { require 'perl5db.pl' }
d1166 1
a1166 1
The PERL5DB environment variable only used when perl is started with
d1178 5
a1182 5
May be set to an alternative shell that perl must use internally for
executing "backtick" commands or system().  Default is C<cmd.exe /x/d/c>
on WindowsNT and C<command.com /c> on Windows95.  The value is considered
to be space-separated.  Precede any character that needs to be protected
(like a space or backslash) with a backslash.
d1186 1
a1186 1
portability concerns.  Besides, perl can use a shell that may not be
d1199 1
a1199 1
Set to 1 to allow the use of non-IFS compatible LSP's.
d1202 2
a1203 2
cause problems if you have a firewall such as McAfee Guardian which requires
all applications to use its LSP which is not IFS-compatible, because clearly
d1205 1
d1207 4
a1210 4
first suitable LSP enumerated in the catalog, which keeps McAfee Guardian
happy (and in that particular case Perl still works too because McAfee
Guardian's LSP actually plays some other games which allow applications
requiring IFS compatibility to work).
d1215 5
a1219 4
Relevant only if perl is compiled with the malloc included with the perl
distribution (that is, if C<perl -V:d_mymalloc> is 'define').
If set, this causes memory statistics to be dumped after execution.  If set
to an integer greater than one, also causes memory statistics to be dumped
d1225 3
a1227 3
Relevant only if your perl executable was built with B<-DDEBUGGING>,
this controls the behavior of global destruction of objects and other
references.  See L<perlhack/PERL_DESTRUCT_LEVEL> for more information.
d1232 1
a1232 1
Set to one to have perl resolve B<all> undefined symbols when it loads
d1235 2
a1236 2
extensions as it ensures that you get an error on misspelled function
names even if the test suite doesn't call it.
d1241 1
a1241 1
If using the C<encoding> pragma without an explicit encoding name, the
d1247 3
a1249 3
(Since Perl 5.8.1.)  Used to randomise perl's internal hash function.
To emulate the pre-5.8.1 behaviour, set to an integer (zero means
exactly the same order as 5.8.0).  "Pre-5.8.1" means, among other
d1251 1
a1251 1
different runs of perl.
d1253 1
a1253 1
Most hashes return elements in the same order as Perl 5.8.0 by default.
d1258 3
a1260 3
The default behaviour is to randomise unless the PERL_HASH_SEED is set.
If perl has been compiled with C<-DUSE_HASH_SEED_EXPLICIT>, the default
behaviour is B<not> to randomise unless the PERL_HASH_SEED is set.
d1262 1
a1262 1
If PERL_HASH_SEED is unset or set to a non-numeric string, perl uses
d1265 1
a1265 1
B<Please note that the hash seed is sensitive information>. Hashes are
d1267 1
a1267 1
code. By manually setting a seed this protection may be partially or
d1276 1
a1276 1
(Since Perl 5.8.1.)  Set to one to display (to STDERR) the value of
d1279 1
a1279 1
behavior caused by hash randomization.
d1281 2
a1282 2
B<Note that the hash seed is sensitive information>: by knowing it one
can craft a denial-of-service attack against Perl code, even remotely,
d1285 1
a1285 1
See also hash_seed() of L<Hash::Util>.
d1290 1
a1290 1
If your perl was configured with C<-Accflags=-DPERL_MEM_LOG>, setting
d1292 2
a1293 2
messages. The value has the form C<< <number>[m][s][t] >>, where
C<number> is the filedescriptor number you want to write to (2 is
d1296 3
a1298 3
(t)imestamps. For example C<PERL_MEM_LOG=1mst> will log all
information to stdout. You can write to other opened filedescriptors
too, in a variety of ways;
d1300 1
a1300 1
  bash$ 3>foo3 PERL_MEM_LOG=3m perl ...
d1305 1
a1305 1
A translation concealed rooted logical name that contains perl and the
d1307 2
a1308 2
affect perl on VMS include PERLSHR, PERL_ENV_TABLES, and
SYS$TIMEZONE_DIFFERENTIAL but are optional and discussed further in
d1314 4
a1317 4
In Perls 5.8.1 and later.  If set to C<unsafe> the pre-Perl-5.8.0
signals behaviour (immediate but unsafe) is restored.  If set to
C<safe> the safe (or deferred) signals are used.
See L<perlipc/"Deferred Signals (Safe Signals)">.
d1326 1
a1326 1
your shell before starting Perl).  See the description of the C<-C>
d1337 1
a1337 1
specific to particular natural languages.  See L<perllocale>.
d1339 11
a1349 5
Apart from these, Perl uses no other environment variables, except
to make them available to the program being executed, and to child
processes.  However, programs running setuid would do well to execute
the following lines before doing anything else, just to keep people
honest:
d1351 2
a1352 2
    $ENV{PATH}  = '/bin:/usr/bin';    # or whatever you need
    $ENV{SHELL} = '/bin/sh' if exists $ENV{SHELL};
@


1.13
log
@Merge in perl 5.10.1
@
text
@a12 1
	S<[ B<-P> ]>
a141 7
=item Macintosh

Under "Classic" MacOS, a perl program will have the appropriate Creator and
Type, so that double-clicking them will invoke the MacPerl application.
Under Mac OS X, clickable apps can be made from any C<#!> script using Wil
Sanchez' DropScript utility: http://www.wsanchez.net/software/ .

a176 4
    # Macintosh
    print "Hello world\n"
     (then Run "Myscript" or Shift-Command-R)

a189 5
Under the Macintosh, it depends which environment you are using.  The MacPerl
shell, or MPW, is much like Unix shells in its support for several
quoting variants, except that it makes free use of the Macintosh's non-ASCII
characters as control characters.

d238 2
a239 2
The value 0777 will cause Perl to slurp files whole because there is no
legal byte with that value.
d241 4
a244 2
If you want to specify any Unicode character, use the hexadecimal
format: C<-0xHHH...>, where the C<H> are valid hexadecimal digits.
d321 1
a321 1
of this setting.  This is variable is set during Perl startup and is
d389 1
a389 1
       64  P  Print profiling info, preprocessor command for -P, source file input state
a398 1
    65536  S  Thread synchronization
d406 2
d445 1
a445 1
X<-f>
d455 22
d593 1
a593 1
creating a new file of the same name, UNIX-style soft and hard links will
d605 1
a605 3
modules (C<@@INC>), and also tells the C preprocessor where to search for
include files.  The C preprocessor is invoked with B<-P>; by default it
searches /usr/include and /usr/lib/perl.
a713 67
=item B<-P>
X<-P>

B<NOTE: Use of -P is strongly discouraged because of its inherent
problems, including poor portability. It is deprecated and will be
removed in a future version of Perl.>

This option causes your program to be run through the C preprocessor before
compilation by Perl.  Because both comments and B<cpp> directives begin
with the # character, you should avoid starting comments with any words
recognized by the C preprocessor such as C<"if">, C<"else">, or C<"define">.

If you're considering using C<-P>, you might also want to look at the
Filter::cpp module from CPAN.

The problems of -P include, but are not limited to:

=over 10

=item *

The C<#!> line is stripped, so any switches there don't apply.

=item *

A C<-P> on a C<#!> line doesn't work.

=item *

B<All> lines that begin with (whitespace and) a C<#> but
do not look like cpp commands, are stripped, including anything
inside Perl strings, regular expressions, and here-docs .

=item *

In some platforms the C preprocessor knows too much: it knows about
the C++ -style until-end-of-line comments starting with C<"//">.
This will cause problems with common Perl constructs like

    s/foo//;

because after -P this will became illegal code

    s/foo

The workaround is to use some other quoting separator than C<"/">,
like for example C<"!">:

    s!foo!!;



=item *

It requires not only a working C preprocessor but also a working
F<sed>.  If not on UNIX, you are probably out of luck on this.

=item *

Script line numbers are not preserved.

=item *

The C<-x> does not work with C<-P>.

=back

d973 1
a973 1
(like in PATH) by a colon on unixish platforms and by a semicolon on
d987 1
a987 1
as if they were on every Perl command line.  Only the B<-[CDIMUdmtw]>
d1005 1
a1005 1
your platform, for example C<:unix:perlio> on UNIX-like systems
d1099 1
a1099 1
For UNIX platforms that will equivalent of "unix perlio" or "stdio".
d1124 1
a1124 1
are UNIX:
d1272 15
d1308 1
a1308 1
a boolean variable-- setting this to C<"1"> is not the right way to
@


1.12
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@d17 1
a17 1
	S<[ B<-eE> I<'command'> ] [ B<--> ] [ I<programfile> ] [ I<argument> ]...>
d81 4
a84 3
    #!/bin/sh -- # -*- perl -*- -p
    eval 'exec perl -wS $0 ${1+"$@@"}'
        if $running_under_some_shell;
d346 5
d405 1
a405 1
      128  m  Memory allocation
d464 4
a467 4
F<$Config{sitelib}/sitecustomize.pl> at startup.  This is a hook that
allows the sysadmin to customize how perl behaves.  It can for
instance be used to add entries to the @@INC array to make perl find
modules in non-standard locations.
d668 4
d983 8
d1177 3
d1204 3
d1214 3
d1238 5
@


1.11
log
@merge in perl 5.8.8
@
text
@d17 1
a17 1
	S<[ B<-e> I<'command'> ] [ B<--> ] [ I<programfile> ] [ I<argument> ]...>
d32 1
a32 1
Specified line by line via B<-e> switches on the command line.
d283 1
a283 1
The C<-C> flag controls some Unicode of the Perl Unicode features.
d289 23
a311 13
    I     1    STDIN is assumed to be in UTF-8
    O     2    STDOUT will be in UTF-8
    E     4    STDERR will be in UTF-8
    S     7    I + O + E
    i     8    UTF-8 is the default PerlIO layer for input streams
    o    16    UTF-8 is the default PerlIO layer for output streams
    D    24    i + o
    A    32    the @@ARGV elements are expected to be strings encoded in UTF-8
    L    64    normally the "IOEioA" are unconditional,
               the L makes them conditional on the locale environment
               variables (the LC_ALL, LC_TYPE, and LANG, in the order
               of decreasing precedence) -- if the variables indicate
               UTF-8, then the selected "IOEioA" are in effect
d349 4
a352 4
executing it.  Actually, it I<will> execute C<BEGIN>, C<CHECK>, and
C<use> blocks, because these are considered as occurring outside the
execution of your program.  C<INIT> and C<END> blocks, however, will
be skipped.
d392 1
a392 1
        1  p  Tokenizing and parsing
d404 1
a404 1
     4096     (Obsolete, previously used for LEAKTEST)
d413 2
d446 6
d702 2
a703 1
problems, including poor portability.>
a872 4
This switch has been superseded in favor of the new Perl code
generator backends to the compiler.  See L<B> and L<B::Bytecode>
for details.

d967 1
a967 1
=item B<-x> I<directory>
d980 3
d1012 7
a1018 4
locations are automatically included if they exist.  If PERL5LIB is not
defined, PERLLIB is used.  Directories are separated (like in PATH) by
a colon on unixish platforms and by a semicolon on Windows (the proper
path separator being given by the command C<perl -V:path_sep>).
d1021 2
a1022 2
or setgid, or the B<-T> switch was used), neither variable is used.
The program should instead say:
d1030 1
a1030 1
as if they were on every Perl command line.  Only the B<-[DIMUdmtw]>
d1047 3
a1049 1
An unset or empty PERLIO is equivalent to C<:stdio>.
d1127 3
a1129 3
already in utf8 form.  May be useful in PERLIO environment
variable to make UTF-8 the default. (To turn off that behaviour
use C<:bytes> layer.)
d1261 1
a1261 1
(Since Perl 5.8.1.)  Used to randomise Perl's internal hash function.
d1264 7
a1270 2
things, that hash keys will be ordered the same between different runs
of Perl.
d1273 1
a1273 1
If Perl has been compiled with C<-DUSE_HASH_SEED_EXPLICIT>, the default
d1276 1
a1276 1
If PERL_HASH_SEED is unset or set to a non-numeric string, Perl uses
a1277 2
This means that each different run of Perl will have a different
ordering of the results of keys(), values(), and each().
@


1.10
log
@sync in-tree perl with 5.8.6
@
text
@d11 2
a12 1
	S<[ B<-I>I<dir> ] [ B<-m>[B<->]I<module> ] [ B<-M>[B<->]I<'module...'> ]>
a17 1
	S<[ B<-C [I<number/list>] >]> ]>
d112 1
d144 4
a147 2
A Macintosh perl program will have the appropriate Creator and
Type, so that double-clicking them will invoke the perl application.
d209 1
d231 1
d243 1
d263 1
d281 1
d336 1
d345 1
d354 1
d369 1
d416 1
a416 1
  env=PERLDB_OPTS="NonStop=1 AutoTrace=1 frame=2" perl -dS program
d427 1
d434 11
d446 1
d450 1
a450 1
put in single quotes.
d453 1
d458 1
d570 1
d578 1
d599 1
d624 4
d629 1
d658 1
d681 1
d747 1
d751 1
a751 2
an argument of B<-->).  This means you can have switches with two leading
dashes (B<--help>).  Any switch found there is removed from @@ARGV and sets the
d759 3
a761 2
Do note that B<--help> creates the variable ${-help}, which is not compliant
with C<strict refs>.
d764 1
d817 1
d829 1
d842 1
d859 1
d862 5
a866 5
operations are the unlinking of directories while running as superuser,
and running setuid programs with fatal taint checks turned into
warnings.  Note that the B<-w> switch (or the C<$^W> variable) must
be used along with this option to actually I<generate> the
taint-check warnings.
d869 1
d874 1
d920 1
d926 1
a926 1
to write on, values used as a number that doesn't look like numbers,
d938 1
d944 1
d950 1
d968 1
d973 1
d978 1
d983 1
d989 1
d1006 1
d1016 1
d1039 1
d1046 1
d1054 1
d1061 1
d1068 1
d1074 1
d1086 1
d1095 1
d1100 1
d1109 1
d1137 1
d1150 2
d1154 1
d1161 1
d1168 1
d1174 1
d1190 1
d1205 1
d1214 1
d1221 1
d1230 1
d1236 1
d1262 1
d1276 1
d1285 1
d1293 1
d1303 1
@


1.9
log
@merge 5.8.5 into HEAD
remove now-unused files
crank libperl shared library major number
update Makefile.bsd-wrapper
tweak openbsd hints file for arm and m68k
@
text
@d9 1
a9 1
	S<[ B<-cw> ] [ B<-d>[:I<debugger>] ] [ B<-D>[I<number/list>] ]>
d337 2
d340 2
d345 2
d353 2
d371 1
a371 2
        2  s  Stack snapshots
                with v, displays all stacks
d391 1
a391 1
  2097152  C  Copy On Write
d533 4
d609 1
a609 1
Here is an efficient way to delete all files that haven't been modifed for
d737 6
a742 3
Typically this is used to emulate #! startup on platforms that
don't support #!.  This example works on many platforms that
have a shell compatible with Bourne shell:
d834 1
a834 1
=item B<-V:>I<name>
d837 2
a838 2
with multiples when your query looks like a regex.
For example,
d840 2
d862 1
a862 1
you to map to the name you need.
d1096 5
d1116 14
d1208 1
a1208 1
See L<perlipc/"Deferred Signals (Safe signals)">.
@


1.8
log
@merge local changes into perl-5.8.3
@
text
@d822 2
a823 1
Prints to STDOUT the value of the named configuration variable.
d826 28
a853 1
    $ perl -V:man.dir
d855 2
a856 2
will provide strong clues about what your MANPATH variable should
be set to in order to access the Perl documentation.
d885 2
d998 1
a998 1
A pseudolayer that manipulates other layers.  Applying the <:raw>
@


1.7
log
@Resolve conflicts for perl 5.8.2, remove old files, and add OpenBSD-specific scaffolding
@
text
@d598 2
a599 1
Here is an efficient way to delete all files older than a week:
d932 1
a932 1
variable are summarised below. For more details see L<PerlIO>.
d944 4
a947 18
A layer that implements DOS/Windows like CRLF line endings.  On read
converts pairs of CR,LF to a single "\n" newline character.  On write
converts each "\n" to a CR,LF pair.  Note that this layer likes to be
one of its kind: it silently ignores attempts to be pushed into the
layer stack more than once.

(Gory details follow) To be more exact what happens is this: after
pushing itself to the stack, the C<:crlf> layer checks all the layers
below itself to find the first layer that is capable of being a CRLF
layer but is not yet enabled to be a CRLF layer.  If it finds such a
layer, it enables the CRLFness of that other deeper layer, and then
pops itself off the stack.  If not, fine, use the one we just pushed.

The end result is that a C<:crlf> means "please enable the first CRLF
layer you can find, and if you can't find one, here would be a good
spot to place a new one."

Based on the C<:perlio> layer.
d953 1
a953 9
using that as PerlIO's "buffer". This I<may> be faster in certain
circumstances for large files, and may result in less physical memory
use when multiple processes are reading the same file.

Files which are not C<mmap()>-able revert to behaving like the C<:perlio>
layer. Writes also behave like C<:perlio> layer as C<mmap()> for write
needs extra house-keeping (to extend the file) which negates any advantage.

The C<:mmap> layer will not exist if platform does not support C<mmap()>.
d957 3
a959 5
A from scratch implementation of buffering for PerlIO. Provides fast
access to the buffer for C<sv_gets> which implements perl's readline/E<lt>E<gt>
and in general attempts to minimize data copying.

C<:perlio> will insert a C<:unix> layer below itself to do low level IO.
d964 1
a964 1
Use with the same care as is reserved for nitroglyserin.
d973 3
a975 10
Arranges for all accesses go straight to the lowest buffered layer provided
by the configration. That is it strips off any layers above that layer.

In Perl 5.6 and some books the C<:raw> layer (previously sometimes also
referred to as a "discipline") is documented as the inverse of the
C<:crlf> layer. That is no longer the case - other layers which would
alter binary nature of the stream are also disabled.  If you want UNIX
line endings on a platform that normally does CRLF translation, but still
want UTF-8 or encoding defaults the appropriate thing to do is to add
C<:perlio> to PERLIO environment variable.
d987 1
a987 3
Lowest level layer which provides basic PerlIO operations in terms of
UNIX/POSIX numeric file descriptor calls
C<open(), read(), write(), lseek(), close()>
d992 4
a995 6
that data sent to the stream should be converted to perl internal
"utf8" form and that data from the stream should be considered as so
encoded. On ASCII based platforms the encoding is UTF-8 and on EBCDIC
platforms UTF-EBCDIC.  May be useful in PERLIO environment variable to
make UTF-8 the default. (To turn off that behaviour use C<:bytes>
layer.)
d1021 2
a1022 2
C<win32> layer which is expected to be enhanced and should eventually replace
the C<unix> layer.
@


1.6
log
@Resolve conflicts, remove old files, merge local changes
@
text
@d7 1
a7 1
B<perl>	S<[ B<-CsTtuUWX> ]>
d10 1
a10 1
	S<[ B<-pna> ] [ B<-F>I<pattern> ] [ B<-l>[I<octal>] ] [ B<-0>[I<octal>] ]>
d17 1
d129 1
a129 1
C<ALTERNATIVE_SHEBANG> (see the F<dosish.h> file in the source
d237 1
a237 1
=item B<-0>[I<digits>]
d239 5
a243 5
specifies the input record separator (C<$/>) as an octal number.  If there are
no digits, the null character is the separator.  Other switches may
precede or follow the digits.  For example, if you have a version of
B<find> which can print filenames terminated by the null character, you
can say this:
d249 6
a254 1
legal character with that value.
d273 1
a273 1
=item B<-C>
d275 1
a275 3
enables Perl to use the native wide character APIs on the target system.
The magic variable C<${^WIDE_SYSTEM_CALLS}> reflects the state of
this switch.  See L<perlvar/"${^WIDE_SYSTEM_CALLS}">.
d277 49
a325 1
This feature is currently only implemented on the Win32 platform.
d364 1
d375 1
a375 1
     4096  L  Memory leaks (needs -DLEAKTEST when compiling Perl)
d383 2
d447 1
a447 1
    $ perl -pi 'orig_*' -e 's/bar/baz/' fileA	# backup to 'orig_fileA'
d452 1
a452 1
    $ perl -pi 'old/*.orig' -e 's/bar/baz/' fileA # backup to 'old/fileA.orig'
d457 1
a457 1
    $ perl -pi '*' -e 's/bar/baz/' fileA	# overwrite current file
d459 2
a460 2
    $ perl -pi '.orig' -e 's/bar/baz/' fileA	# backup to 'fileA.orig'
    $ perl -pi '*.orig' -e 's/bar/baz/' fileA	# backup to 'fileA.orig'
d503 1
a503 1
    $ perl -p -i '/some/file/path/*' -e 1 file1 file2 file3...
d505 1
a505 1
    $ perl -p -i '.orig' -e 1 file1 file2 file3...
d839 1
a839 1
This switch really just enables the internal C<^$W> variable.  You
d890 1
a890 1
A colon-separated list of directories in which to look for Perl library
d894 3
a896 1
defined, PERLLIB is used.
d923 2
d937 3
a939 2
Turns I<off> the C<:utf8> flag for the layer below.
Unlikely to be useful in global PERLIO environment variable.
d943 17
a959 3
A layer that implements DOS/Windows like CRLF line endings.
On read converts pairs of CR,LF to a single "\n" newline character.
On write converts each "\n" to a CR,LF pair.
d984 5
d991 4
a994 4
Applying the <:raw> layer is equivalent to calling C<binmode($fh)>.
It makes the stream pass each byte as-is without any translation.
In particular CRLF translation, and/or :utf8 inuited from locale
are disabled.
d1023 7
a1029 6
Turns on a flag on the layer below to tell perl that data sent to the
stream should be converted to perl internal "utf8" form and that data from the
stream should be considered as so encoded. On ASCII based platforms the
encoding is UTF-8 and on EBCDIC platforms UTF-EBCDIC.
May be useful in PERLIO environment variable to make UTF-8 the
default. (To turn off that behaviour use C<:bytes> layer.)
d1074 1
a1074 1
A colon-separated list of directories in which to look for Perl library
d1087 1
a1087 1
executing "backtick" commands or system().  Default is C<cmd.exe /x/c>
d1113 8
d1126 38
d1171 16
@


1.5
log
@merge in perl 5.6.1 with our local changes
@
text
@d7 1
a7 1
B<perl>	S<[ B<-CsTuUWX> ]>
d84 1
a84 1
to let Perl see the B<-p> switch.  
d169 1
a169 1
which you must I<not> do on Unix or Plan9 systems.  You might also
d304 5
a308 3
syntax tree.  And B<-Dr> displays compiled regular expressions. As an
alternative, specify a number instead of list of letters (e.g., B<-D14> is
equivalent to B<-Dtls>):
d316 1
a316 1
       64  P  Print preprocessor command for -P, source file input state
d328 2
d332 2
a333 1
executable.  See the F<INSTALL> file in the Perl source distribution 
d339 4
a342 1
you can't use Perl's B<-D> switch.  Instead do this 
d550 1
a550 1
you
d579 4
a582 1
causes your program to be run through the C preprocessor before
d586 26
a611 2
Also, in some platforms the C preprocessor knows too much: it knows
about the C++ -style until-end-of-line comments starting with C<"//">.
d625 17
d707 11
d767 1
a767 1
For example, 
d850 1
a850 1
as if they were on every Perl command line.  Only the B<-[DIMUdmw]>
d856 136
d1031 6
a1036 1
references.
d1042 2
a1043 2
affect perl on VMS include PERLSHR, PERL_ENV_TABLES, and 
SYS$TIMEZONE_DIFFERENTIAL but are optional and discussed further in 
@


1.4
log
@perl-5.6.0 + local changes
@
text
@d287 1
a287 1
=item B<-d:>I<foo>
d291 5
a295 1
the program using the Devel::DProf profiler.  See L<perldebug>.
d314 1
a314 1
       64  P  Print preprocessor command for -P
d325 1
d453 1
a453 2
see L<perlfaq5/Why does Perl let me delete read-only files?  Why
does -i clobber protected files?  Isn't this a bug in Perl?>.
d572 1
a572 1
compilation by Perl.  (Because both comments and B<cpp> directives begin
d574 15
a588 1
recognized by the C preprocessor such as "if", "else", or "define".)
d594 2
a595 1
a B<-->).  Any switch found there is removed from @@ARGV and sets the
d603 3
d833 12
@


1.3
log
@perl5.005_03 (stock)
@
text
@d7 1
a7 1
B<perl>	S<[ B<-sTuU> ]>
d20 5
a24 1
Upon startup, Perl looks for your script in one of the following
d42 2
a43 2
no filename arguments--to pass arguments to a STDIN script you
must explicitly specify a "-" for the script name.
d50 1
a50 1
"perl", and starts there instead.  This is useful for running a script
d52 1
a52 1
of the script using the C<__END__> token.)
d58 1
a58 1
invoked, even if B<-x> was used to find the beginning of the script.
d60 9
a68 8
Because many operating systems silently chop off kernel interpretation of
the #! line after 32 characters, some switches may be passed in on the
command line, and some may not; you could even get a "-" without its
letter, if you're not careful.  You probably want to make sure that all
your switches fall either before or after that 32 character boundary.
Most switches don't actually care if they're processed redundantly, but
getting a - instead of a complete switch could cause Perl to try to
execute standard input instead of your script.  And a partial B<-I> switch
d71 4
a74 4
Some switches do care if they are processed twice, for instance combinations
of B<-l> and B<-0>.  Either put all the switches after the 32 character
boundary (if applicable), or replace the use of B<-0>I<digits> by 
C<BEGIN{ $/ = "\0digits"; }>.
d81 1
a81 1
    eval 'exec /usr/bin/perl -wS $0 ${1+"$@@"}'
d84 10
a93 1
to let Perl see the B<-p> switch.
d98 1
a98 1
can tell a program that their SHELL is /usr/bin/perl, and Perl will then
d101 1
a101 1
After locating your script, Perl compiles the entire script to an
d103 1
a103 1
script is not attempted.  (This is unlike the typical shell script,
d106 1
a106 1
If the script is syntactically correct, it is executed.  If the script
d122 1
a122 1
as the first line in C<*.cmd> file (C<-S> due to a bug in cmd.exe's
d127 1
a127 1
Create a batch file to run your script, and codify it in
d133 1
a133 1
The Win95/NT installation, when using the Activeware port of Perl,
d135 4
a138 5
interpreter.  If you install another port of Perl, including the one
in the Win32 directory of the Perl distribution, then you'll have to
modify the Registry yourself.  Note that this means you can no 
longer tell the difference between an executable Perl program
and a Perl library file.
d142 1
a142 1
Macintosh perl scripts will have the appropriate Creator and
d152 4
a155 4
at the top of your script, where C<-mysw> are any command line switches you
want to pass to Perl.  You can now invoke the script directly, by saying
C<perl script>, or as a DCL procedure, by saying C<@@script> (or implicitly
via F<DCL$PATH> by just using the name of the script).
d166 1
a166 1
one-liners (see C<-e> below).
d169 1
a169 1
which you must I<NOT> do on Unix or Plan9 systems.  You might also
d187 3
a189 3
The problem is that none of this is reliable: it depends on the command
and it is entirely possible neither works.  If 4DOS was the command shell, this would
probably work better:
d193 1
a193 1
CMD.EXE in Windows NT slipped a lot of standard Unix functionality in
d207 10
a216 9
easily find it. When possible, it's good for both B</usr/bin/perl> and
B</usr/local/bin/perl> to be symlinks to the actual binary. If that
can't be done, system administrators are strongly encouraged to put
(symlinks to) perl and its accompanying utilities, such as perldoc, into
a directory typically found along a user's PATH, or in another obvious
and convenient place.

In this documentation, C<#!/usr/bin/perl> on the first line of the script
will stand in for whatever method works on your system.
d218 1
a218 1
=head2 Switches
d220 2
a221 2
A single-character switch may be combined with the following switch, if
any.
d223 8
a230 1
    #!/usr/bin/perl -spi.bak	# same as -s -p -i.bak
d244 1
a244 1
    find . -name '*.bak' -print0 | perl -n0e unlink
d267 8
d277 5
a281 4
causes Perl to check the syntax of the script and then exit without
executing it.  Actually, it I<will> execute C<BEGIN>, C<END>, and C<use> blocks,
because these are considered as occurring outside the execution of
your program.
d285 1
a285 1
runs the script under the Perl debugger.  See L<perldebug>.
d289 3
a291 3
runs the script under the control of a debugging or tracing module
installed as Devel::foo. E.g., B<-d:DProf> executes the script using the
Devel::DProf profiler.  See L<perldebug>.
d297 1
a297 1
sets debugging flags.  To watch how it executes your script, use
d316 1
a316 1
     4096  L  Memory leaks (needs C<-DLEAKTEST> when compiling Perl)
d322 3
a324 2
All these flags require C<-DDEBUGGING> when you compile the Perl
executable.  This flag is automatically set if you include C<-g>
d327 12
d341 4
a344 6
may be used to enter one line of script.
If B<-e> is given, Perl
will not look for a script filename in the argument list.
Multiple B<-e> commands may
be given to build up a multi-line script.
Make sure to use semicolons where you would in a normal program.
d368 5
a372 6
If the extension doesn't contain a C<*> then it is appended to the end
of the current filename as a suffix.

If the extension does contain one or more C<*> characters, then each C<*>
is replaced with the current filename.  In perl terms you could think of
this as:
d379 1
a379 1
    $ perl -pi'bak_*' -e 's/bar/baz/' fileA	# backup to 'bak_fileA'
d384 1
a384 1
    $ perl -pi'old/*.bak' -e 's/bar/baz/' fileA # backup to 'old/fileA.bak'
d389 1
a389 1
    $ perl -pi'*' -e 's/bar/baz/' fileA		# overwrite current file
d391 2
a392 2
    $ perl -pi'.bak' -e 's/bar/baz/' fileA	# backup to 'fileA.bak'
    $ perl -pi'*.bak' -e 's/bar/baz/' fileA	# backup to 'fileA.bak'
d396 1
a396 1
    $ perl -p -i.bak -e "s/foo/bar/; ... "
d398 1
a398 1
is the same as using the script:
d400 1
a400 1
    #!/usr/bin/perl -pi.bak
d406 2
a407 2
    $extension = '.bak';
    while (<>) {
d435 3
a437 3
    $ perl -p -i'/some/file/path/*' -e 1 file1 file2 file3...
  or
    $ perl -p -i'.bak' -e 1 file1 file2 file3...
d447 3
a449 2
For a discussion of issues surrounding file permissions and C<-i>, see
L<perlfaq5/Why does Perl let me delete read-only files?  Why does -i clobber protected files?  Isn't this a bug in Perl?>.
d454 2
a455 1
Perl does not expand C<~>, so don't do that.
d457 3
a459 1
Finally, note that the B<-i> switch does not impede execution when no
d473 7
a479 7
enables automatic line-ending processing.  It has two effects:  first,
it automatically chomps "C<$/>" (the input record separator) when used
with B<-n> or B<-p>, and second, it assigns "C<$\>"
(the output record separator) to have the value of I<octnum> so that
any print statements will have that separator added back on.  If
I<octnum> is omitted, sets "C<$\>" to the current value of "C<$/>".  For
instance, to trim lines to 80 columns:
d499 2
a500 2
C<-m>I<module> executes C<use> I<module> C<();> before executing your
script.
d502 3
a504 3
C<-M>I<module> executes C<use> I<module> C<;> before executing your
script.  You can use quotes to add extra code after the module name,
e.g., C<-M'module qw(foo bar)'>.
d506 1
a506 1
If the first character after the C<-M> or C<-m> is a dash (C<->)
d510 3
a512 3
C<-mmodule=foo,bar> or C<-Mmodule=foo,bar> as a shortcut for
C<-M'module qw(foo bar)'>.  This avoids the need to use quotes when
importing symbols.  The actual code generated by C<-Mmodule=foo,bar> is
d514 1
a514 1
removes the distinction between C<-m> and C<-M>.
d518 1
a518 1
causes Perl to assume the following loop around your script, which
d522 1
d524 1
a524 1
	...		# your script goes here
d529 1
a529 1
some reason, Perl warns you about it, and moves on to the next file.
d533 1
a533 1
    find . -mtime +7 -print | perl -nle 'unlink;'
d535 4
a538 2
This is faster than using the C<-exec> switch of B<find> because you don't
have to start a process on every filename found.
d541 1
a541 1
the implicit loop, just as in B<awk>.
d545 1
a545 1
causes Perl to assume the following loop around your script, which
d549 1
d551 1
a551 1
	...		# your script goes here
d563 1
a563 1
the implicit loop, just as in awk.
d567 2
a568 2
causes your script to be run through the C preprocessor before
compilation by Perl.  (Because both comments and cpp directives begin
d574 2
a575 2
enables some rudimentary switch parsing for switches on the command
line after the script name but before any filename arguments (or before
d577 3
a579 2
corresponding variable in the Perl script.  The following script
prints "true" if and only if the script is invoked with a B<-xyz> switch.
d582 1
a582 1
    if ($xyz) { print "true\n"; }
d587 2
a588 1
script (unless the name of the script contains directory separators).
a595 10
If the filename supplied contains directory separators (i.e. it is an
absolute or relative pathname), and if the file is not found,
platforms that append file extensions will do so and try to look
for the file with those extensions added, one by one.

On DOS-like platforms, if the script does not contain directory
separators, it will first be searched for in the current directory
before being searched for on the PATH.  On Unix platforms, the
script will be searched for strictly on the PATH.

d604 2
a605 2
The system ignores the first line and feeds the script to /bin/sh,
which proceeds to try to execute the Perl script as a shell script.
d609 1
a609 1
script if necessary.  After Perl locates the script, it parses the
d611 1
a611 1
is never true. If the script will be interpreted by csh, you will need
d617 1
a617 1
will work under any of csh, sh, or Perl, such as the following:
d619 1
a619 1
	eval '(exit $?0)' && eval 'exec /usr/bin/perl -wS $0 ${1+"$@@"}'
d623 10
d636 8
a643 6
these checks are done only when running setuid or setgid.  It's a good
idea to turn them on explicitly for programs run on another's behalf,
such as CGI programs.  See L<perlsec>.  Note that (for security reasons)
this option must be seen by Perl quite early; usually this means it must
appear early on the command line or in the #! line (for systems which
support that).
d647 13
a659 10
causes Perl to dump core after compiling your script.  You can then
in theory take this core dump and turn it into an executable file by using the
B<undump> program (not supplied).  This speeds startup at the expense of
some disk space (which you can minimize by stripping the executable).
(Still, a "hello world" executable comes out to about 200K on my
machine.)  If you want to execute a portion of your script before dumping,
use the dump() operator instead.  Note: availability of B<undump> is
platform specific and may not be available for a specific port of
Perl.  It has been superseded by the new perl-to-C compiler, which is more
portable, even though it's still only considered beta.
d666 2
a667 2
warnings. Note that the B<-w> switch (or the C<$^W> variable) must
be used along with this option to actually B<generate> the
d672 1
a672 1
prints the version and patchlevel of your Perl executable.
d677 1
a677 1
value of @@INC.
d682 6
d691 19
a709 7
prints warnings about variable names that are mentioned only once, and
scalar variables that are used before being set.  Also warns about
redefined subroutines, and references to undefined filehandles or
filehandles opened read-only that you are attempting to write on.  Also
warns you if you use values as a number that doesn't look like numbers,
using an array as though it were a scalar, if your subroutines recurse
more than 100 deep, and innumerable other things.
d711 4
a714 2
You can disable specific warnings using C<__WARN__> hooks, as described
in L<perlvar> and L<perlfunc/warn>. See also L<perldiag> and L<perltrap>.
d718 10
a727 9
tells Perl that the script is embedded in a message.  Leading
garbage will be discarded until the first line that starts with #! and
contains the string "perl".  Any meaningful switches on that line will
be applied.  If a directory name is specified, Perl will switch to
that directory before running the script.  The B<-x> switch controls
only the disposal of leading garbage.  The script must be
terminated with C<__END__> if there is trailing garbage to be ignored (the
script can process any or all of the trailing garbage via the DATA
filehandle if desired).
d745 1
a745 1
Used in executing subprocesses, and in finding the script if B<-S> is
d752 7
a758 4
directory.  If PERL5LIB is not defined, PERLLIB is used.  When running
taint checks (because the script was running setuid or setgid, or the
B<-T> switch was used), neither variable is used.  The script should
instead say
d766 1
a766 1
switches are allowed.  When running taint checks (because the script
d783 1
a783 1
=item PERL5SHELL (specific to WIN32 port)
d788 1
a788 1
to be space delimited.  Precede any character that needs to be protected
d818 2
a819 2
to make them available to the script being executed, and to child
processes.  However, scripts running setuid would do well to execute
d823 1
a823 1
    $ENV{PATH} = '/bin:/usr/bin';    # or whatever you need
a825 1

@


1.2
log
@perl 5.004_04
@
text
@d32 2
a33 1
(Note that systems supporting the #! notation invoke interpreters this way.)
d76 1
a76 1
    eval 'exec /usr/bin/perl $0 -S ${1+"$@@"}'
d120 1
a120 1
will modify the Registry to associate the .pl extension with the perl
d123 3
a125 1
modify the Registry yourself.
d132 15
d191 13
d286 1
a286 1
     4096  L  Memory leaks (not supported anymore)
d290 5
d317 38
a354 6
specifies that files processed by the C<E<lt>E<gt>> construct are to be edited
in-place.  It does this by renaming the input file, opening the output
file by the original name, and selecting that output file as the default
for print() statements.  The extension, if supplied, is added to the name
of the old file to make a backup copy.  If no extension is supplied, no
backup is made.  From the shell, saying
d366 1
d369 7
a375 1
	    rename($ARGV, $ARGV . '.bak');
d389 25
a413 2
the selected filehandle.  Note that STDOUT is restored as the
default output filehandle after the loop.
d415 4
a418 3
You can use C<eof> without parenthesis to locate the end of each input file,
in case you want to append to each file, or reset line numbering (see
example in L<perlfunc/eof>).
d510 1
a510 1
lines are printed automatically.  An error occuring during printing is
d546 1
a546 1
If the file supplied contains directory separators (i.e. it is an
d561 1
a561 1
    eval 'exec /usr/bin/perl -S $0 ${1+"$@@"}'
d571 3
a573 3
is never true.  A better construct than C<$*> would be C<${1+"$@@"}>, which
handles embedded spaces and such in the filenames, but doesn't work if
the script is being interpreted by csh.  To start up sh rather
d579 2
a580 2
	eval '(exit $?0)' && eval 'exec /usr/bin/perl -S $0 ${1+"$@@"}'
	& eval 'exec /usr/bin/perl -S $0 $argv:q'
d585 7
a591 4
forces "taint" checks to be turned on so you can test them.  Ordinarily these checks are
done only when running setuid or setgid.  It's a good idea to turn
them on explicitly for programs run on another's behalf, such as CGI
programs.  See L<perlsec>.
d596 1
a596 1
take this core dump and turn it into an executable file by using the
d603 2
a604 1
Perl.
d689 2
a690 1
variable is ignored.
d707 11
a717 7
executing "backtick" commands or system().  Perl doesn't use COMSPEC
for this purpose because COMSPEC has a high degree of variability
among users, leading to portability concerns.  Besides, perl can use
a shell that may not be fit for interactive use, and setting COMSPEC
to such a shell may interfere with the proper functioning of other
programs (which usually look in COMSPEC to find a shell fit for
interactive use).
d721 3
a723 2
Relevant only if your perl executable was built with B<-DDEBUGGING_MSTATS>,
if set, this causes memory statistics to be dumped after execution.  If set
@


1.1
log
@Initial revision
@
text
@d36 1
a36 1
Passed in implicitly via standard input.  This only works if there are
d47 1
a47 1
of the script using the __END__ token.)
d49 5
a53 5
As of Perl 5, the #! line is always examined for switches as the line is
being parsed.  Thus, if you're on a machine that only allows one argument
with the #! line, or worse, doesn't even recognize the #! line, you still
can get consistent switch behavior regardless of how Perl was invoked,
even if B<-x> was used to find the beginning of the script.
d65 5
d75 2
a76 2
    eval 'exec perl $0 -S ${1+"$@@"}'
	if 0;
d89 1
a89 1
which might run partway through before finding a syntax error.)
d95 78
d186 1
a186 1
specifies the record separator (C<$/>) as an octal number.  If there are
d195 1
a195 1
The value 0777 will cause Perl to slurp files whole since there is no
d219 1
a219 1
since these are considered as occurring outside the execution of 
d232 2
a235 2
=item B<-D>I<list>

d237 4
a240 4
B<-D14>.  (This only works if debugging is compiled into your
Perl.)  Another nice value is B<-D1024>, which lists your compiled
syntax tree.  And B<-D512> displays compiled regular expressions. As an
alternative specify a list of letters instead of numbers (e.g. B<-D14> is
d243 16
a258 16
        1  p  Tokenizing and Parsing
        2  s  Stack Snapshots
        4  l  Label Stack Processing
        8  t  Trace Execution
       16  o  Operator Node Construction
       32  c  String/Numeric Conversions
       64  P  Print Preprocessor Command for -P
      128  m  Memory Allocation
      256  f  Format Processing
      512  r  Regular Expression Parsing
     1024  x  Syntax Tree Dump
     2048  u  Tainting Checks
     4096  L  Memory Leaks (not supported anymore)
     8192  H  Hash Dump -- usurps values()
    16384  X  Scratchpad Allocation
    32768  D  Cleaning Up
d262 1
a262 1
may be used to enter one line of script.  
d264 1
a264 1
will not look for a script filename in the argument list.  
d266 1
a266 1
be given to build up a multi-line script.  
d272 1
a272 1
pattern may be surrounded by C<//>, C<""> or C<''>, otherwise it will be
d317 2
a318 2
You can use C<eof> without parenthesis to locate the end of each input file, 
in case you want to append to each file, or reset line numbering (see 
d324 1
a324 1
modules (@@INC), and also tells the C preprocessor where to search for
d331 4
a334 3
it automatically chomps the line terminator when used with B<-n> or
B<-p>, and second, it assigns "C<$\>" to have the value of I<octnum> so that
any print statements will have that line terminator added back on.  If
d346 1
a346 1
This sets $\ to newline and then sets $/ to the null character.
d366 1
a366 1
A little built-in syntactic sugar means you can also say
d384 4
a387 2
lines printed.  Here is an efficient way to delete all files older than
a week:
d406 1
a406 1
	print;
d409 5
a413 2
Note that the lines are printed automatically.  To suppress printing
use the B<-n> switch.  A B<-p> overrides a B<-n> switch.
d421 1
a421 1
compilation by Perl.  (Since both comments and cpp directives begin
d423 1
a423 1
recognized by the C preprocessor such as "if", "else" or "define".)
d439 21
a459 3
script (unless the name of the script starts with a slash).  Typically
this is used to emulate #! startup on machines that don't support #!,
in the following manner:
d462 1
a462 1
    eval "exec /usr/bin/perl -S $0 $*"
d474 1
a474 1
the script is being interpreted by csh.  In order to start up sh rather
d478 1
a478 1
will work under any of csh, sh or Perl, such as the following:
d482 1
a482 1
		if 0;
d508 3
a510 1
warnings.
d527 1
a527 1
prints warnings about identifiers that are mentioned only once, and
d530 7
a536 5
filehandles opened readonly that you are attempting to write on.  Also
warns you if you use values as a number that doesn't look like numbers, using
an array as though it were a scalar, if
your subroutines recurse more than 100 deep, and innumerable other things.
See L<perldiag> and L<perltrap>.
d543 3
a545 4
be applied (but only one group of switches, as with normal #!
processing).  If a directory name is specified, Perl will switch to
that directory before running the script.  The B<-x> switch only
controls the the disposal of leading garbage.  The script must be
d550 73
d625 14
@


1.1.1.1
log
@Import of Perl 5.003 into the tree.  Makefile.bsd-wrapper and
config.sh.OpenBSD are the only local changes.
@
text
@@


1.1.1.2
log
@perl5.005_03
@
text
@d32 1
a32 2
(Note that systems supporting the #! notation invoke interpreters this
way. See L<Location of Perl>.)
d36 1
a36 1
Passed in implicitly via standard input.  This works only if there are
d47 1
a47 1
of the script using the C<__END__> token.)
d49 5
a53 5
The #! line is always examined for switches as the line is being
parsed.  Thus, if you're on a machine that allows only one argument
with the #! line, or worse, doesn't even recognize the #! line, you
still can get consistent switch behavior regardless of how Perl was
invoked, even if B<-x> was used to find the beginning of the script.
a64 5
Some switches do care if they are processed twice, for instance combinations
of B<-l> and B<-0>.  Either put all the switches after the 32 character
boundary (if applicable), or replace the use of B<-0>I<digits> by 
C<BEGIN{ $/ = "\0digits"; }>.

d70 2
a71 2
    eval 'exec /usr/bin/perl -wS $0 ${1+"$@@"}'
        if $running_under_some_shell;
d84 1
a84 1
which might run part-way through before finding a syntax error.)
a89 108
=head2 #! and quoting on non-Unix systems

Unix's #! technique can be simulated on other systems:

=over 4

=item OS/2

Put

    extproc perl -S -your_switches

as the first line in C<*.cmd> file (C<-S> due to a bug in cmd.exe's
`extproc' handling).

=item MS-DOS

Create a batch file to run your script, and codify it in
C<ALTERNATIVE_SHEBANG> (see the F<dosish.h> file in the source
distribution for more information).

=item Win95/NT

The Win95/NT installation, when using the Activeware port of Perl,
will modify the Registry to associate the F<.pl> extension with the perl
interpreter.  If you install another port of Perl, including the one
in the Win32 directory of the Perl distribution, then you'll have to
modify the Registry yourself.  Note that this means you can no 
longer tell the difference between an executable Perl program
and a Perl library file.

=item Macintosh

Macintosh perl scripts will have the appropriate Creator and
Type, so that double-clicking them will invoke the perl application.

=item VMS

Put

    $ perl -mysw 'f$env("procedure")' 'p1' 'p2' 'p3' 'p4' 'p5' 'p6' 'p7' 'p8' !
    $ exit++ + ++$status != 0 and $exit = $status = undef;

at the top of your script, where C<-mysw> are any command line switches you
want to pass to Perl.  You can now invoke the script directly, by saying
C<perl script>, or as a DCL procedure, by saying C<@@script> (or implicitly
via F<DCL$PATH> by just using the name of the script).

This incantation is a bit much to remember, but Perl will display it for
you if you say C<perl "-V:startperl">.

=back

Command-interpreters on non-Unix systems have rather different ideas
on quoting than Unix shells.  You'll need to learn the special
characters in your command-interpreter (C<*>, C<\> and C<"> are
common) and how to protect whitespace and these characters to run
one-liners (see C<-e> below).

On some systems, you may have to change single-quotes to double ones,
which you must I<NOT> do on Unix or Plan9 systems.  You might also
have to change a single % to a %%.

For example:

    # Unix
    perl -e 'print "Hello world\n"'

    # MS-DOS, etc.
    perl -e "print \"Hello world\n\""

    # Macintosh
    print "Hello world\n"
     (then Run "Myscript" or Shift-Command-R)

    # VMS
    perl -e "print ""Hello world\n"""

The problem is that none of this is reliable: it depends on the command
and it is entirely possible neither works.  If 4DOS was the command shell, this would
probably work better:

    perl -e "print <Ctrl-x>"Hello world\n<Ctrl-x>""

CMD.EXE in Windows NT slipped a lot of standard Unix functionality in
when nobody was looking, but just try to find documentation for its
quoting rules.

Under the Macintosh, it depends which environment you are using.  The MacPerl
shell, or MPW, is much like Unix shells in its support for several
quoting variants, except that it makes free use of the Macintosh's non-ASCII
characters as control characters.

There is no general solution to all of this.  It's just a mess.

=head2 Location of Perl

It may seem obvious to say, but Perl is useful only when users can
easily find it. When possible, it's good for both B</usr/bin/perl> and
B</usr/local/bin/perl> to be symlinks to the actual binary. If that
can't be done, system administrators are strongly encouraged to put
(symlinks to) perl and its accompanying utilities, such as perldoc, into
a directory typically found along a user's PATH, or in another obvious
and convenient place.

In this documentation, C<#!/usr/bin/perl> on the first line of the script
will stand in for whatever method works on your system.

d103 1
a103 1
specifies the input record separator (C<$/>) as an octal number.  If there are
d112 1
a112 1
The value 0777 will cause Perl to slurp files whole because there is no
d136 1
a136 1
because these are considered as occurring outside the execution of
d149 1
a149 1
=item B<-D>I<letters>
d151 1
a151 1
=item B<-D>I<number>
d154 4
a157 4
B<-Dtls>.  (This works only if debugging is compiled into your
Perl.)  Another nice value is B<-Dx>, which lists your compiled
syntax tree.  And B<-Dr> displays compiled regular expressions. As an
alternative, specify a number instead of list of letters (e.g., B<-D14> is
d160 16
a175 21
        1  p  Tokenizing and parsing
        2  s  Stack snapshots
        4  l  Context (loop) stack processing
        8  t  Trace execution
       16  o  Method and overloading resolution
       32  c  String/numeric conversions
       64  P  Print preprocessor command for -P
      128  m  Memory allocation
      256  f  Format processing
      512  r  Regular expression parsing and execution
     1024  x  Syntax tree dump
     2048  u  Tainting checks
     4096  L  Memory leaks (needs C<-DLEAKTEST> when compiling Perl)
     8192  H  Hash dump -- usurps values()
    16384  X  Scratchpad allocation
    32768  D  Cleaning up
    65536  S  Thread synchronization

All these flags require C<-DDEBUGGING> when you compile the Perl
executable.  This flag is automatically set if you include C<-g>
option when C<Configure> asks you about optimizer/debugger flags.
d179 1
a179 1
may be used to enter one line of script.
d181 1
a181 1
will not look for a script filename in the argument list.
d183 1
a183 1
be given to build up a multi-line script.
d189 1
a189 1
pattern may be surrounded by C<//>, C<"">, or C<''>, otherwise it will be
d198 6
a203 38
specifies that files processed by the C<E<lt>E<gt>> construct are to be
edited in-place.  It does this by renaming the input file, opening the
output file by the original name, and selecting that output file as the
default for print() statements.  The extension, if supplied, is used to
modify the name of the old file to make a backup copy, following these
rules:

If no extension is supplied, no backup is made and the current file is
overwritten.

If the extension doesn't contain a C<*> then it is appended to the end
of the current filename as a suffix.

If the extension does contain one or more C<*> characters, then each C<*>
is replaced with the current filename.  In perl terms you could think of
this as:

    ($backup = $extension) =~ s/\*/$file_name/g;

This allows you to add a prefix to the backup file, instead of (or in
addition to) a suffix:

    $ perl -pi'bak_*' -e 's/bar/baz/' fileA	# backup to 'bak_fileA'

Or even to place backup copies of the original files into another
directory (provided the directory already exists):

    $ perl -pi'old/*.bak' -e 's/bar/baz/' fileA # backup to 'old/fileA.bak'

These sets of one-liners are equivalent:

    $ perl -pi -e 's/bar/baz/' fileA		# overwrite current file
    $ perl -pi'*' -e 's/bar/baz/' fileA		# overwrite current file

    $ perl -pi'.bak' -e 's/bar/baz/' fileA	# backup to 'fileA.bak'
    $ perl -pi'*.bak' -e 's/bar/baz/' fileA	# backup to 'fileA.bak'

From the shell, saying
a214 1
    $extension = '.bak';
d217 1
a217 7
	    if ($extension !~ /\*/) {
		$backup = $ARGV . $extension;
	    }
	    else {
		($backup = $extension) =~ s/\*/$ARGV/g;
	    }
	    rename($ARGV, $backup);
d231 2
a232 20
the selected filehandle.  Note that STDOUT is restored as the default
output filehandle after the loop.

As shown above, Perl creates the backup file whether or not any output
is actually changed.  So this is just a fancy way to copy files:

    $ perl -p -i'/some/file/path/*' -e 1 file1 file2 file3...
  or
    $ perl -p -i'.bak' -e 1 file1 file2 file3...

You can use C<eof> without parentheses to locate the end of each input
file, in case you want to append to each file, or reset line numbering
(see example in L<perlfunc/eof>).

If, for a given file, Perl is unable to create the backup file as
specified in the extension then it will skip that file and continue on
with the next one (if it exists).

For a discussion of issues surrounding file permissions and C<-i>, see
L<perlfaq5/Why does Perl let me delete read-only files?  Why does -i clobber protected files?  Isn't this a bug in Perl?>.
d234 3
a236 9
You cannot use B<-i> to create directories or to strip extensions from
files.

Perl does not expand C<~>, so don't do that.

Finally, note that the B<-i> switch does not impede execution when no
files are given on the command line.  In this case, no backup is made
(the original file cannot, of course, be determined) and processing
proceeds from STDIN to STDOUT as might be expected.
d241 1
a241 1
modules (C<@@INC>), and also tells the C preprocessor where to search for
d248 3
a250 4
it automatically chomps "C<$/>" (the input record separator) when used
with B<-n> or B<-p>, and second, it assigns "C<$\>"
(the output record separator) to have the value of I<octnum> so that
any print statements will have that separator added back on.  If
d262 1
a262 1
This sets C<$\> to newline and then sets C<$/> to the null character.
d282 1
a282 1
A little builtin syntactic sugar means you can also say
d300 2
a301 4
lines printed.  If a file named by an argument cannot be opened for
some reason, Perl warns you about it, and moves on to the next file.

Here is an efficient way to delete all files older than a week:
d320 1
a320 1
	print or die "-p destination: $!\n";
d323 2
a324 5
If a file named by an argument cannot be opened for some reason, Perl
warns you about it, and moves on to the next file.  Note that the
lines are printed automatically.  An error occurring during printing is
treated as fatal.  To suppress printing use the B<-n> switch.  A B<-p>
overrides a B<-n> switch.
d332 1
a332 1
compilation by Perl.  (Because both comments and cpp directives begin
d334 1
a334 1
recognized by the C preprocessor such as "if", "else", or "define".)
d350 3
a352 21
script (unless the name of the script contains directory separators).
On some platforms, this also makes Perl append suffixes to the
filename while searching for it.  For example, on Win32 platforms,
the ".bat" and ".cmd" suffixes are appended if a lookup for the
original name fails, and if the name does not already end in one
of those suffixes.  If your Perl was compiled with DEBUGGING turned
on, using the -Dp switch to Perl shows how the search progresses.

If the filename supplied contains directory separators (i.e. it is an
absolute or relative pathname), and if the file is not found,
platforms that append file extensions will do so and try to look
for the file with those extensions added, one by one.

On DOS-like platforms, if the script does not contain directory
separators, it will first be searched for in the current directory
before being searched for on the PATH.  On Unix platforms, the
script will be searched for strictly on the PATH.

Typically this is used to emulate #! startup on platforms that
don't support #!.  This example works on many platforms that
have a shell compatible with Bourne shell:
d355 1
a355 1
    eval 'exec /usr/bin/perl -wS $0 ${1+"$@@"}'
d365 3
a367 3
is never true. If the script will be interpreted by csh, you will need
to replace C<${1+"$@@"}> with C<$*>, even though that doesn't understand
embedded spaces (and such) in the argument list.  To start up sh rather
d371 1
a371 1
will work under any of csh, sh, or Perl, such as the following:
d373 3
a375 3
	eval '(exit $?0)' && eval 'exec /usr/bin/perl -wS $0 ${1+"$@@"}'
	& eval 'exec /usr/bin/perl -wS $0 $argv:q'
		if $running_under_some_shell;
d379 4
a382 7
forces "taint" checks to be turned on so you can test them.  Ordinarily
these checks are done only when running setuid or setgid.  It's a good
idea to turn them on explicitly for programs run on another's behalf,
such as CGI programs.  See L<perlsec>.  Note that (for security reasons)
this option must be seen by Perl quite early; usually this means it must
appear early on the command line or in the #! line (for systems which
support that).
d387 1
a387 1
in theory take this core dump and turn it into an executable file by using the
d394 1
a394 2
Perl.  It has been superseded by the new perl-to-C compiler, which is more
portable, even though it's still only considered beta.
d401 1
a401 3
warnings. Note that the B<-w> switch (or the C<$^W> variable) must
be used along with this option to actually B<generate> the
taint-check warnings.
d418 1
a418 1
prints warnings about variable names that are mentioned only once, and
d421 5
a425 7
filehandles opened read-only that you are attempting to write on.  Also
warns you if you use values as a number that doesn't look like numbers,
using an array as though it were a scalar, if your subroutines recurse
more than 100 deep, and innumerable other things.

You can disable specific warnings using C<__WARN__> hooks, as described
in L<perlvar> and L<perlfunc/warn>. See also L<perldiag> and L<perltrap>.
d432 4
a435 3
be applied.  If a directory name is specified, Perl will switch to
that directory before running the script.  The B<-x> switch controls
only the disposal of leading garbage.  The script must be
a439 79
=back

=head1 ENVIRONMENT

=over 12

=item HOME

Used if chdir has no argument.

=item LOGDIR

Used if chdir has no argument and HOME is not set.

=item PATH

Used in executing subprocesses, and in finding the script if B<-S> is
used.

=item PERL5LIB

A colon-separated list of directories in which to look for Perl library
files before looking in the standard library and the current
directory.  If PERL5LIB is not defined, PERLLIB is used.  When running
taint checks (because the script was running setuid or setgid, or the
B<-T> switch was used), neither variable is used.  The script should
instead say

    use lib "/my/directory";

=item PERL5OPT

Command-line options (switches).  Switches in this variable are taken
as if they were on every Perl command line.  Only the B<-[DIMUdmw]>
switches are allowed.  When running taint checks (because the script
was running setuid or setgid, or the B<-T> switch was used), this
variable is ignored.  If PERL5OPT begins with B<-T>, tainting will be
enabled, and any subsequent options ignored.

=item PERLLIB

A colon-separated list of directories in which to look for Perl library
files before looking in the standard library and the current directory.
If PERL5LIB is defined, PERLLIB is not used.

=item PERL5DB

The command used to load the debugger code.  The default is:

	BEGIN { require 'perl5db.pl' }

=item PERL5SHELL (specific to WIN32 port)

May be set to an alternative shell that perl must use internally for
executing "backtick" commands or system().  Default is C<cmd.exe /x/c>
on WindowsNT and C<command.com /c> on Windows95.  The value is considered
to be space delimited.  Precede any character that needs to be protected
(like a space or backslash) with a backslash.

Note that Perl doesn't use COMSPEC for this purpose because
COMSPEC has a high degree of variability among users, leading to
portability concerns.  Besides, perl can use a shell that may not be
fit for interactive use, and setting COMSPEC to such a shell may
interfere with the proper functioning of other programs (which usually
look in COMSPEC to find a shell fit for interactive use).

=item PERL_DEBUG_MSTATS

Relevant only if perl is compiled with the malloc included with the perl
distribution (that is, if C<perl -V:d_mymalloc> is 'define').
If set, this causes memory statistics to be dumped after execution.  If set
to an integer greater than one, also causes memory statistics to be dumped
after compilation.

=item PERL_DESTRUCT_LEVEL

Relevant only if your perl executable was built with B<-DDEBUGGING>,
this controls the behavior of global destruction of objects and other
references.
a441 14

Perl also has environment variables that control how Perl handles data
specific to particular natural languages.  See L<perllocale>.

Apart from these, Perl uses no other environment variables, except
to make them available to the script being executed, and to child
processes.  However, scripts running setuid would do well to execute
the following lines before doing anything else, just to keep people
honest:

    $ENV{PATH} = '/bin:/usr/bin';    # or whatever you need
    $ENV{SHELL} = '/bin/sh' if exists $ENV{SHELL};
    delete @@ENV{qw(IFS CDPATH ENV BASH_ENV)};

@


1.1.1.3
log
@virgin perl 5.6.0
@
text
@d7 1
a7 1
B<perl>	S<[ B<-CsTuUWX> ]>
d20 1
a20 5
The normal way to run a Perl program is by making it directly
executable, or else by passing the name of the source file as an
argument on the command line.  (An interactive Perl environment
is also possible--see L<perldebug> for details on how to do that.)
Upon startup, Perl looks for your program in one of the following
d38 2
a39 2
no filename arguments--to pass arguments to a STDIN-read program you
must explicitly specify a "-" for the program name.
d46 1
a46 1
"perl", and starts there instead.  This is useful for running a program
d48 1
a48 1
of the program using the C<__END__> token.)
d54 1
a54 1
invoked, even if B<-x> was used to find the beginning of the program.
d56 8
a63 9
Because historically some operating systems silently chopped off
kernel interpretation of the #! line after 32 characters, some
switches may be passed in on the command line, and some may not;
you could even get a "-" without its letter, if you're not careful.
You probably want to make sure that all your switches fall either
before or after that 32-character boundary.  Most switches don't
actually care if they're processed redundantly, but getting a "-"
instead of a complete switch could cause Perl to try to execute
standard input instead of your program.  And a partial B<-I> switch
d66 4
a69 4
Some switches do care if they are processed twice, for instance
combinations of B<-l> and B<-0>.  Either put all the switches after
the 32-character boundary (if applicable), or replace the use of
B<-0>I<digits> by C<BEGIN{ $/ = "\0digits"; }>.
d76 1
a76 1
    eval 'exec perl -wS $0 ${1+"$@@"}'
d79 1
a79 10
to let Perl see the B<-p> switch.  

A similar trick involves the B<env> program, if you have it.

    #!/usr/bin/env perl

The examples above use a relative path to the perl interpreter,
getting whatever version is first in the user's path.  If you want
a specific version of Perl, say, perl5.005_57, you should place
that directly in the #! line's path.
d84 1
a84 1
can tell a program that their SHELL is F</usr/bin/perl>, and Perl will then
d87 1
a87 1
After locating your program, Perl compiles the entire program to an
d89 1
a89 1
program is not attempted.  (This is unlike the typical shell script,
d92 1
a92 1
If the program is syntactically correct, it is executed.  If the program
d108 1
a108 1
as the first line in C<*.cmd> file (B<-S> due to a bug in cmd.exe's
d113 1
a113 1
Create a batch file to run your program, and codify it in
d119 1
a119 1
The Win95/NT installation, when using the ActiveState installer for Perl,
d121 5
a125 4
interpreter.  If you install Perl by other means (including building from
the sources), you may have to modify the Registry yourself.  Note that
this means you can no longer tell the difference between an executable
Perl program and a Perl library file.
d129 1
a129 1
A Macintosh perl program will have the appropriate Creator and
d139 4
a142 4
at the top of your program, where B<-mysw> are any command line switches you
want to pass to Perl.  You can now invoke the program directly, by saying
C<perl program>, or as a DCL procedure, by saying C<@@program> (or implicitly
via F<DCL$PATH> by just using the name of the program).
d153 1
a153 1
one-liners (see B<-e> below).
d156 1
a156 1
which you must I<not> do on Unix or Plan9 systems.  You might also
d174 3
a176 3
The problem is that none of this is reliable: it depends on the
command and it is entirely possible neither works.  If B<4DOS> were
the command shell, this would probably work better:
d180 1
a180 1
B<CMD.EXE> in Windows NT slipped a lot of standard Unix functionality in
d194 9
a202 10
easily find it.  When possible, it's good for both F</usr/bin/perl>
and F</usr/local/bin/perl> to be symlinks to the actual binary.  If
that can't be done, system administrators are strongly encouraged
to put (symlinks to) perl and its accompanying utilities into a
directory typically found along a user's PATH, or in some other
obvious and convenient place.

In this documentation, C<#!/usr/bin/perl> on the first line of the program
will stand in for whatever method works on your system.  You are
advised to use a specific path if you care about a specific version.
d204 1
a204 1
    #!/usr/local/bin/perl5.00554
d206 2
a207 2
or if you just want to be running at least version, place a statement
like this at the top of your program:
d209 1
a209 8
    use 5.005_54;

=head2 Command Switches

As with all standard commands, a single-character switch may be
clustered with the following switch, if any.

    #!/usr/bin/perl -spi.orig	# same as -s -p -i.orig
d223 1
a223 1
    find . -name '*.orig' -print0 | perl -n0e unlink
a245 8
=item B<-C>

enables Perl to use the native wide character APIs on the target system.
The magic variable C<${^WIDE_SYSTEM_CALLS}> reflects the state of
this switch.  See L<perlvar/"${^WIDE_SYSTEM_CALLS}">.

This feature is currently only implemented on the Win32 platform.

d248 4
a251 5
causes Perl to check the syntax of the program and then exit without
executing it.  Actually, it I<will> execute C<BEGIN>, C<CHECK>, and
C<use> blocks, because these are considered as occurring outside the
execution of your program.  C<INIT> and C<END> blocks, however, will
be skipped.
d255 1
a255 1
runs the program under the Perl debugger.  See L<perldebug>.
d259 3
a261 3
runs the program under the control of a debugging, profiling, or
tracing module installed as Devel::foo. E.g., B<-d:DProf> executes
the program using the Devel::DProf profiler.  See L<perldebug>.
d267 1
a267 1
sets debugging flags.  To watch how it executes your program, use
d286 1
a286 1
     4096  L  Memory leaks (needs -DLEAKTEST when compiling Perl)
d292 2
a293 3
All these flags require B<-DDEBUGGING> when you compile the Perl
executable.  See the F<INSTALL> file in the Perl source distribution 
for how to do this.  This flag is automatically set if you include B<-g>
a295 12
If you're just trying to get a print out of each line of Perl code
as it executes, the way that C<sh -x> provides for shell scripts,
you can't use Perl's B<-D> switch.  Instead do this 

  # Bourne shell syntax
  $ PERLDB_OPTS="NonStop=1 AutoTrace=1 frame=2" perl -dS program

  # csh syntax
  % (setenv PERLDB_OPTS "NonStop=1 AutoTrace=1 frame=2"; perl -dS program)

See L<perldebug> for details and variations.

d298 6
a303 4
may be used to enter one line of program.  If B<-e> is given, Perl
will not look for a filename in the argument list.  Multiple B<-e>
commands may be given to build up a multi-line script.  Make sure
to use semicolons where you would in a normal program.
d327 6
a332 5
If the extension doesn't contain a C<*>, then it is appended to the
end of the current filename as a suffix.  If the extension does
contain one or more C<*> characters, then each C<*> is replaced
with the current filename.  In Perl terms, you could think of this
as:
d339 1
a339 1
    $ perl -pi 'orig_*' -e 's/bar/baz/' fileA	# backup to 'orig_fileA'
d344 1
a344 1
    $ perl -pi 'old/*.orig' -e 's/bar/baz/' fileA # backup to 'old/fileA.orig'
d349 1
a349 1
    $ perl -pi '*' -e 's/bar/baz/' fileA	# overwrite current file
d351 2
a352 2
    $ perl -pi '.orig' -e 's/bar/baz/' fileA	# backup to 'fileA.orig'
    $ perl -pi '*.orig' -e 's/bar/baz/' fileA	# backup to 'fileA.orig'
d356 1
a356 1
    $ perl -p -i.orig -e "s/foo/bar/; ... "
d358 1
a358 1
is the same as using the program:
d360 1
a360 1
    #!/usr/bin/perl -pi.orig
d366 2
a367 2
    $extension = '.orig';
    LINE: while (<>) {
d395 3
a397 3
    $ perl -p -i '/some/file/path/*' -e 1 file1 file2 file3...
or
    $ perl -p -i '.orig' -e 1 file1 file2 file3...
d407 2
a408 3
For a discussion of issues surrounding file permissions and B<-i>,
see L<perlfaq5/Why does Perl let me delete read-only files?  Why
does -i clobber protected files?  Isn't this a bug in Perl?>.
d413 1
a413 2
Perl does not expand C<~> in filenames, which is good, since some
folks use it for their backup files:
d415 1
a415 3
    $ perl -pi~ -e 's/foo/bar/' file1 file2 file3...

Finally, the B<-i> switch does not impede execution when no
d429 7
a435 7
enables automatic line-ending processing.  It has two separate
effects.  First, it automatically chomps C<$/> (the input record
separator) when used with B<-n> or B<-p>.  Second, it assigns C<$\>
(the output record separator) to have the value of I<octnum> so
that any print statements will have that separator added back on.
If I<octnum> is omitted, sets C<$\> to the current value of
C<$/>.  For instance, to trim lines to 80 columns:
d455 2
a456 2
B<-m>I<module> executes C<use> I<module> C<();> before executing your
program.
d458 3
a460 3
B<-M>I<module> executes C<use> I<module> C<;> before executing your
program.  You can use quotes to add extra code after the module name,
e.g., C<'-Mmodule qw(foo bar)'>.
d462 1
a462 1
If the first character after the B<-M> or B<-m> is a dash (C<->)
d466 3
a468 3
B<-mmodule=foo,bar> or B<-Mmodule=foo,bar> as a shortcut for
C<'-Mmodule qw(foo bar)'>.  This avoids the need to use quotes when
importing symbols.  The actual code generated by B<-Mmodule=foo,bar> is
d470 1
a470 1
removes the distinction between B<-m> and B<-M>.
d474 1
a474 1
causes Perl to assume the following loop around your program, which
a477 1
  LINE:
d479 1
a479 1
	...		# your program goes here
d484 1
a484 1
some reason, Perl warns you about it and moves on to the next file.
d488 1
a488 1
    find . -mtime +7 -print | perl -nle unlink
d490 2
a491 4
This is faster than using the B<-exec> switch of B<find> because you don't
have to start a process on every filename found.  It does suffer from
the bug of mishandling newlines in pathnames, which you can fix if
you
d494 1
a494 1
the implicit program loop, just as in B<awk>.
d498 1
a498 1
causes Perl to assume the following loop around your program, which
a501 1
  LINE:
d503 1
a503 1
	...		# your program goes here
d515 1
a515 1
the implicit loop, just as in B<awk>.
d519 2
a520 2
causes your program to be run through the C preprocessor before
compilation by Perl.  (Because both comments and B<cpp> directives begin
d526 2
a527 2
enables rudimentary switch parsing for switches on the command
line after the program name but before any filename arguments (or before
d529 2
a530 3
corresponding variable in the Perl program.  The following program
prints "1" if the program is invoked with a B<-xyz> switch, and "abc"
if it is invoked with B<-xyz=abc>.
d533 1
a533 1
    if ($xyz) { print "$xyz\n" }
d538 1
a538 2
program (unless the name of the program contains directory separators).

d546 10
d564 2
a565 2
The system ignores the first line and feeds the program to F</bin/sh>,
which proceeds to try to execute the Perl program as a shell script.
d569 1
a569 1
program if necessary.  After Perl locates the program, it parses the
d571 1
a571 1
is never true.  If the program will be interpreted by csh, you will need
d577 1
a577 1
will work under any of B<csh>, B<sh>, or Perl, such as the following:
d579 1
a579 1
	eval '(exit $?0)' && eval 'exec perl -wS $0 ${1+"$@@"}'
a582 10
If the filename supplied contains directory separators (i.e., is an
absolute or relative pathname), and if that file is not found,
platforms that append file extensions will do so and try to look
for the file with those extensions added, one by one.

On DOS-like platforms, if the program does not contain directory
separators, it will first be searched for in the current directory
before being searched for on the PATH.  On Unix platforms, the
program will be searched for strictly on the PATH.

d586 6
a591 8
these checks are done only when running setuid or setgid.  It's a
good idea to turn them on explicitly for programs that run on behalf
of someone else whom you might not necessarily trust, such as CGI
programs or any internet servers you might write in Perl.  See
L<perlsec> for details.  For security reasons, this option must be
seen by Perl quite early; usually this means it must appear early
on the command line or in the #! line for systems which support
that construct.
d595 10
a604 13
This obsolete switch causes Perl to dump core after compiling your
program.  You can then in theory take this core dump and turn it
into an executable file by using the B<undump> program (not supplied).
This speeds startup at the expense of some disk space (which you
can minimize by stripping the executable).  (Still, a "hello world"
executable comes out to about 200K on my machine.)  If you want to
execute a portion of your program before dumping, use the dump()
operator instead.  Note: availability of B<undump> is platform
specific and may not be available for a specific port of Perl.

This switch has been superseded in favor of the new Perl code
generator backends to the compiler.  See L<B> and L<B::Bytecode>
for details.
d611 2
a612 2
warnings.  Note that the B<-w> switch (or the C<$^W> variable) must
be used along with this option to actually I<generate> the
d617 1
a617 1
prints the version and patchlevel of your perl executable.
d622 1
a622 1
values of @@INC.
a626 6
For example, 

    $ perl -V:man.dir

will provide strong clues about what your MANPATH variable should
be set to in order to access the Perl documentation.
d630 7
a636 19
prints warnings about dubious constructs, such as variable names
that are mentioned only once and scalar variables that are used
before being set, redefined subroutines, references to undefined
filehandles or filehandles opened read-only that you are attempting
to write on, values used as a number that doesn't look like numbers,
using an array as though it were a scalar, if your subroutines
recurse more than 100 deep, and innumerable other things.

This switch really just enables the internal C<^$W> variable.  You
can disable or promote into fatal errors specific warnings using
C<__WARN__> hooks, as described in L<perlvar> and L<perlfunc/warn>.
See also L<perldiag> and L<perltrap>.  A new, fine-grained warning
facility is also available if you want to manipulate entire classes
of warnings; see L<warnings> or L<perllexwarn>.

=item B<-W>

Enables all warnings regardless of C<no warnings> or C<$^W>.
See L<perllexwarn>.
d638 2
a639 4
=item B<-X>

Disables all warnings regardless of C<use warnings> or C<$^W>.
See L<perllexwarn>.
d643 9
a651 10
tells Perl that the program is embedded in a larger chunk of unrelated
ASCII text, such as in a mail message.  Leading garbage will be
discarded until the first line that starts with #! and contains the
string "perl".  Any meaningful switches on that line will be applied.
If a directory name is specified, Perl will switch to that directory
before running the program.  The B<-x> switch controls only the
disposal of leading garbage.  The program must be terminated with
C<__END__> if there is trailing garbage to be ignored (the program
can process any or all of the trailing garbage via the DATA filehandle
if desired).
d669 1
a669 1
Used in executing subprocesses, and in finding the program if B<-S> is
d676 4
a679 7
directory.  Any architecture-specific directories under the specified
locations are automatically included if they exist.  If PERL5LIB is not
defined, PERLLIB is used.

When running taint checks (either because the program was running setuid
or setgid, or the B<-T> switch was used), neither variable is used.
The program should instead say:
d687 1
a687 1
switches are allowed.  When running taint checks (because the program
d704 1
a704 1
=item PERL5SHELL (specific to the Win32 port)
d709 1
a709 1
to be space-separated.  Precede any character that needs to be protected
d739 2
a740 2
to make them available to the program being executed, and to child
processes.  However, programs running setuid would do well to execute
d744 1
a744 1
    $ENV{PATH}  = '/bin:/usr/bin';    # or whatever you need
d747 1
@


1.1.1.4
log
@stock perl 5.6.1
@
text
@d287 1
a287 1
=item B<-d:>I<foo[=bar,baz]>
d291 1
a291 5
the program using the Devel::DProf profiler.  As with the B<-M>
flag, options may be passed to the Devel::foo package where they
will be received and interpreted by the Devel::foo::import routine.
The comma-separated list of options must follow a C<=> character.
See L<perldebug>.
d310 1
a310 1
       64  P  Print preprocessor command for -P, source file input state
a320 1
   131072  T  Tokenising
d448 2
a449 1
see L<perlfaq5/Why does Perl let me delete read-only files?  Why does -i clobber protected files?  Isn't this a bug in Perl?>.
d568 1
a568 1
compilation by Perl.  Because both comments and B<cpp> directives begin
d570 1
a570 15
recognized by the C preprocessor such as C<"if">, C<"else">, or C<"define">.
Also, in some platforms the C preprocessor knows too much: it knows
about the C++ -style until-end-of-line comments starting with C<"//">.
This will cause problems with common Perl constructs like

    s/foo//;

because after -P this will became illegal code

    s/foo

The workaround is to use some other quoting separator than C<"/">,
like for example C<"!">:

    s!foo!!;
d576 1
a576 2
an argument of B<-->).  This means you can have switches with two leading
dashes (B<--help>).  Any switch found there is removed from @@ARGV and sets the
a583 3
Do note that B<--help> creates the variable ${-help}, which is not compliant
with C<strict refs>.

a810 12

=item PERL_ROOT (specific to the VMS port)

A translation concealed rooted logical name that contains perl and the
logical device for the @@INC path on VMS only.  Other logical names that
affect perl on VMS include PERLSHR, PERL_ENV_TABLES, and 
SYS$TIMEZONE_DIFFERENTIAL but are optional and discussed further in 
L<perlvms> and in F<README.vms> in the Perl source distribution.

=item SYS$LOGIN (specific to the VMS port)

Used if chdir has no argument and HOME and LOGDIR are not set.
@


1.1.1.5
log
@stock perl 5.8.0 from CPAN
@
text
@d7 1
a7 1
B<perl>	S<[ B<-CsTtuUWX> ]>
d84 1
a84 1
to let Perl see the B<-p> switch.
d169 1
a169 1
which you must I<not> do on Unix or Plan 9 systems.  You might also
d304 3
a306 5
syntax tree.  And B<-Dr> displays compiled regular expressions;
the format of the output is explained in L<perldebguts>.

As an alternative, specify a number instead of list of letters (e.g.,
B<-D14> is equivalent to B<-Dtls>):
d314 1
a314 1
       64  P  Print profiling info, preprocessor command for -P, source file input state
a325 2
   262144  R  Include reference counts of dumped variables (eg when using -Ds)
   524288  J  Do not s,t,P-debug (Jump over) opcodes within package DB
d328 1
a328 2
executable (but see L<Devel::Peek>, L<re> which may change this).
See the F<INSTALL> file in the Perl source distribution
d334 1
a334 4
you can't use Perl's B<-D> switch.  Instead do this

  # If you have "env" utility
  env=PERLDB_OPTS="NonStop=1 AutoTrace=1 frame=2" perl -dS program
d542 1
a542 1
you follow the example under B<-0>.
d571 1
a571 4
B<NOTE: Use of -P is strongly discouraged because of its inherent
problems, including poor portability.>

This option causes your program to be run through the C preprocessor before
d575 2
a576 26

If you're considering using C<-P>, you might also want to look at the
Filter::cpp module from CPAN.

The problems of -P include, but are not limited to:

=over 10

=item *

The C<#!> line is stripped, so any switches there don't apply.

=item *

A C<-P> on a C<#!> line doesn't work.

=item *

B<All> lines that begin with (whitespace and) a C<#> but
do not look like cpp commands, are stripped, including anything
inside Perl strings, regular expressions, and here-docs .

=item *

In some platforms the C preprocessor knows too much: it knows about
the C++ -style until-end-of-line comments starting with C<"//">.
a589 17


=item *

It requires not only a working C preprocessor but also a working
F<sed>.  If not on UNIX, you are probably out of luck on this.

=item *

Script line numbers are not preserved.

=item *

The C<-x> does not work with C<-P>.

=back

a654 11
=item B<-t>

Like B<-T>, but taint checks will issue warnings rather than fatal
errors.  These warnings can be controlled normally with C<no warnings
qw(taint)>.

B<NOTE: this is not a substitute for -T.> This is meant only to be
used as a temporary development aid while securing legacy code:
for real production code and for new secure code written from scratch
always use the real B<-T>.

d704 1
a704 1
For example,
d787 1
a787 1
as if they were on every Perl command line.  Only the B<-[DIMUdmtw]>
a792 136
=item PERLIO

A space (or colon) separated list of PerlIO layers. If perl is built
to use PerlIO system for IO (the default) these layers effect perl's IO.

It is conventional to start layer names with a colon e.g. C<:perlio> to
emphasise their similarity to variable "attributes". But the code that parses
layer specification strings (which is also used to decode the PERLIO
environment variable) treats the colon as a separator.

The list becomes the default for I<all> perl's IO. Consequently only built-in
layers can appear in this list, as external layers (such as :encoding()) need
IO in  order to load them!. See L<"open pragma"|open> for how to add external
encodings as defaults.

The layers that it makes sense to include in the PERLIO environment
variable are summarised below. For more details see L<PerlIO>.

=over 8

=item :bytes

Turns I<off> the C<:utf8> flag for the layer below.
Unlikely to be useful in global PERLIO environment variable.

=item :crlf

A layer that implements DOS/Windows like CRLF line endings.
On read converts pairs of CR,LF to a single "\n" newline character.
On write converts each "\n" to a CR,LF pair.
Based on the C<:perlio> layer.

=item :mmap

A layer which implements "reading" of files by using C<mmap()> to
make (whole) file appear in the process's address space, and then
using that as PerlIO's "buffer". This I<may> be faster in certain
circumstances for large files, and may result in less physical memory
use when multiple processes are reading the same file.

Files which are not C<mmap()>-able revert to behaving like the C<:perlio>
layer. Writes also behave like C<:perlio> layer as C<mmap()> for write
needs extra house-keeping (to extend the file) which negates any advantage.

The C<:mmap> layer will not exist if platform does not support C<mmap()>.

=item :perlio

A from scratch implementation of buffering for PerlIO. Provides fast
access to the buffer for C<sv_gets> which implements perl's readline/E<lt>E<gt>
and in general attempts to minimize data copying.

C<:perlio> will insert a C<:unix> layer below itself to do low level IO.

=item :raw

Applying the <:raw> layer is equivalent to calling C<binmode($fh)>.
It makes the stream pass each byte as-is without any translation.
In particular CRLF translation, and/or :utf8 inuited from locale
are disabled.

Arranges for all accesses go straight to the lowest buffered layer provided
by the configration. That is it strips off any layers above that layer.

In Perl 5.6 and some books the C<:raw> layer (previously sometimes also
referred to as a "discipline") is documented as the inverse of the
C<:crlf> layer. That is no longer the case - other layers which would
alter binary nature of the stream are also disabled.  If you want UNIX
line endings on a platform that normally does CRLF translation, but still
want UTF-8 or encoding defaults the appropriate thing to do is to add
C<:perlio> to PERLIO environment variable.

=item :stdio

This layer provides PerlIO interface by wrapping system's ANSI C "stdio"
library calls. The layer provides both buffering and IO.
Note that C<:stdio> layer does I<not> do CRLF translation even if that
is platforms normal behaviour. You will need a C<:crlf> layer above it
to do that.

=item :unix

Lowest level layer which provides basic PerlIO operations in terms of
UNIX/POSIX numeric file descriptor calls
C<open(), read(), write(), lseek(), close()>

=item :utf8

Turns on a flag on the layer below to tell perl that data sent to the
stream should be converted to perl internal "utf8" form and that data from the
stream should be considered as so encoded. On ASCII based platforms the
encoding is UTF-8 and on EBCDIC platforms UTF-EBCDIC.
May be useful in PERLIO environment variable to make UTF-8 the
default. (To turn off that behaviour use C<:bytes> layer.)

=item :win32

On Win32 platforms this I<experimental> layer uses native "handle" IO
rather than unix-like numeric file descriptor layer. Known to be
buggy in this release.

=back

On all platforms the default set of layers should give acceptable results.

For UNIX platforms that will equivalent of "unix perlio" or "stdio".
Configure is setup to prefer "stdio" implementation if system's library
provides for fast access to the buffer, otherwise it uses the "unix perlio"
implementation.

On Win32 the default in this release is "unix crlf". Win32's "stdio"
has a number of bugs/mis-features for perl IO which are somewhat
C compiler vendor/version dependent. Using our own C<crlf> layer as
the buffer avoids those issues and makes things more uniform.
The C<crlf> layer provides CRLF to/from "\n" conversion as well as
buffering.

This release uses C<unix> as the bottom layer on Win32 and so still uses C
compiler's numeric file descriptor routines. There is an experimental native
C<win32> layer which is expected to be enhanced and should eventually replace
the C<unix> layer.

=item PERLIO_DEBUG

If set to the name of a file or device then certain operations of PerlIO
sub-system will be logged to that file (opened as append). Typical uses
are UNIX:

   PERLIO_DEBUG=/dev/tty perl script ...

and Win32 approximate equivalent:

   set PERLIO_DEBUG=CON
   perl script ...


d832 1
a832 6
references.  See L<perlhack/PERL_DESTRUCT_LEVEL> for more information.

=item PERL_ENCODING

If using the C<encoding> pragma without an explicit encoding name, the
PERL_ENCODING environment variable is consulted for an encoding name.
d838 2
a839 2
affect perl on VMS include PERLSHR, PERL_ENV_TABLES, and
SYS$TIMEZONE_DIFFERENTIAL but are optional and discussed further in
@


1.1.1.6
log
@perl 5.8.2 from CPAN
@
text
@d7 1
a7 1
B<perl>	S<[ B<-sTtuUWX> ]>
d10 1
a10 1
	S<[ B<-pna> ] [ B<-F>I<pattern> ] [ B<-l>[I<octal>] ] [ B<-0>[I<octal/hexadecimal>] ]>
a16 1
	S<[ B<-C [I<number/list>] >]> ]>
d128 1
a128 1
C<ALTERNATE_SHEBANG> (see the F<dosish.h> file in the source
d236 1
a236 1
=item B<-0>[I<octal/hexadecimal>]
d238 5
a242 5
specifies the input record separator (C<$/>) as an octal or
hexadecimal number.  If there are no digits, the null character is the
separator.  Other switches may precede or follow the digits.  For
example, if you have a version of B<find> which can print filenames
terminated by the null character, you can say this:
d248 1
a248 6
legal byte with that value.

If you want to specify any Unicode character, use the hexadecimal
format: C<-0xHHH...>, where the C<H> are valid hexadecimal digits.
(This means that you cannot use the C<-x> with a directory name that
consists of hexadecimal digits.)
d267 1
a267 1
=item B<-C [I<number/list>]>
d269 3
a271 1
The C<-C> flag controls some Unicode of the Perl Unicode features.
d273 1
a273 49
As of 5.8.1, the C<-C> can be followed either by a number or a list
of option letters.  The letters, their numeric values, and effects
are as follows; listing the letters is equal to summing the numbers.

    I     1    STDIN is assumed to be in UTF-8
    O     2    STDOUT will be in UTF-8
    E     4    STDERR will be in UTF-8
    S     7    I + O + E
    i     8    UTF-8 is the default PerlIO layer for input streams
    o    16    UTF-8 is the default PerlIO layer for output streams
    D    24    i + o
    A    32    the @@ARGV elements are expected to be strings encoded in UTF-8
    L    64    normally the "IOEioA" are unconditional,
               the L makes them conditional on the locale environment
               variables (the LC_ALL, LC_TYPE, and LANG, in the order
               of decreasing precedence) -- if the variables indicate
               UTF-8, then the selected "IOEioA" are in effect

For example, C<-COE> and C<-C6> will both turn on UTF-8-ness on both
STDOUT and STDERR.  Repeating letters is just redundant, not cumulative
nor toggling.

The C<io> options mean that any subsequent open() (or similar I/O
operations) will have the C<:utf8> PerlIO layer implicitly applied
to them, in other words, UTF-8 is expected from any input stream,
and UTF-8 is produced to any output stream.  This is just the default,
with explicit layers in open() and with binmode() one can manipulate
streams as usual.

C<-C> on its own (not followed by any number or option list), or the
empty string C<""> for the C<PERL_UNICODE> environment variable, has the
same effect as C<-CSDL>.  In other words, the standard I/O handles and
the default C<open()> layer are UTF-8-fied B<but> only if the locale
environment variables indicate a UTF-8 locale.  This behaviour follows
the I<implicit> (and problematic) UTF-8 behaviour of Perl 5.8.0.

You can use C<-C0> (or C<"0"> for C<PERL_UNICODE>) to explicitly
disable all the above Unicode features.

The read-only magic variable C<${^UNICODE}> reflects the numeric value
of this setting.  This is variable is set during Perl startup and is
thereafter read-only.  If you want runtime effects, use the three-arg
open() (see L<perlfunc/open>), the two-arg binmode() (see L<perlfunc/binmode>),
and the C<open> pragma (see L<open>).

(In Perls earlier than 5.8.1 the C<-C> switch was a Win32-only switch
that enabled the use of Unicode-aware "wide system call" Win32 APIs.
This feature was practically unused, however, and the command line
switch was therefore "recycled".)
a311 1
                with v, displays all stacks
d322 1
a322 1
     4096     (Obsolete, previously used for LEAKTEST)
a329 2
  1048576  v  Verbose: use in conjunction with other flags
  2097152  C  Copy On Write
d392 1
a392 1
    $ perl -pi'orig_*' -e 's/bar/baz/' fileA	# backup to 'orig_fileA'
d397 1
a397 1
    $ perl -pi'old/*.orig' -e 's/bar/baz/' fileA # backup to 'old/fileA.orig'
d402 1
a402 1
    $ perl -pi'*' -e 's/bar/baz/' fileA		# overwrite current file
d404 2
a405 2
    $ perl -pi'.orig' -e 's/bar/baz/' fileA	# backup to 'fileA.orig'
    $ perl -pi'*.orig' -e 's/bar/baz/' fileA	# backup to 'fileA.orig'
d448 1
a448 1
    $ perl -p -i'/some/file/path/*' -e 1 file1 file2 file3...
d450 1
a450 1
    $ perl -p -i'.orig' -e 1 file1 file2 file3...
d784 1
a784 1
This switch really just enables the internal C<$^W> variable.  You
d835 1
a835 1
A list of directories in which to look for Perl library
d839 1
a839 3
defined, PERLLIB is used.  Directories are separated (like in PATH) by
a colon on unixish platforms and by a semicolon on Windows (the proper
path separator being given by the command C<perl -V:path_sep>).
a865 2
An unset or empty PERLIO is equivalent to C<:stdio>.

d878 2
a879 3
A pseudolayer that turns I<off> the C<:utf8> flag for the layer below.
Unlikely to be useful on its own in the global PERLIO environment variable.
You perhaps were thinking of C<:crlf:bytes> or C<:perlio:bytes>.
d883 3
a885 17
A layer that implements DOS/Windows like CRLF line endings.  On read
converts pairs of CR,LF to a single "\n" newline character.  On write
converts each "\n" to a CR,LF pair.  Note that this layer likes to be
one of its kind: it silently ignores attempts to be pushed into the
layer stack more than once.

(Gory details follow) To be more exact what happens is this: after
pushing itself to the stack, the C<:crlf> layer checks all the layers
below itself to find the first layer that is capable of being a CRLF
layer but is not yet enabled to be a CRLF layer.  If it finds such a
layer, it enables the CRLFness of that other deeper layer, and then
pops itself off the stack.  If not, fine, use the one we just pushed.

The end result is that a C<:crlf> means "please enable the first CRLF
layer you can find, and if you can't find one, here would be a good
spot to place a new one."

a909 5
=item :pop

An experimental pseudolayer that removes the topmost layer.
Use with the same care as is reserved for nitroglyserin.

d912 4
a915 4
A pseudolayer that manipulates other layers.  Applying the <:raw>
layer is equivalent to calling C<binmode($fh)>.  It makes the stream
pass each byte as-is without any translation.  In particular CRLF
translation, and/or :utf8 intuited from locale are disabled.
d944 6
a949 7
A pseudolayer that turns on a flag on the layer below to tell perl
that data sent to the stream should be converted to perl internal
"utf8" form and that data from the stream should be considered as so
encoded. On ASCII based platforms the encoding is UTF-8 and on EBCDIC
platforms UTF-EBCDIC.  May be useful in PERLIO environment variable to
make UTF-8 the default. (To turn off that behaviour use C<:bytes>
layer.)
d994 1
a994 1
A list of directories in which to look for Perl library
d1007 1
a1007 1
executing "backtick" commands or system().  Default is C<cmd.exe /x/d/c>
a1032 8
=item PERL_DL_NONLAZY

Set to one to have perl resolve B<all> undefined symbols when it loads
a dynamic library.  The default behaviour is to resolve symbols when
they are used.  Setting this variable is useful during testing of
extensions as it ensures that you get an error on misspelled function
names even if the test suite doesn't call it.

a1037 38
=item PERL_HASH_SEED

(Since Perl 5.8.1.)  Used to randomise Perl's internal hash function.
To emulate the pre-5.8.1 behaviour, set to an integer (zero means
exactly the same order as 5.8.0).  "Pre-5.8.1" means, among other
things, that hash keys will be ordered the same between different runs
of Perl.

The default behaviour is to randomise unless the PERL_HASH_SEED is set.
If Perl has been compiled with C<-DUSE_HASH_SEED_EXPLICIT>, the default
behaviour is B<not> to randomise unless the PERL_HASH_SEED is set.

If PERL_HASH_SEED is unset or set to a non-numeric string, Perl uses
the pseudorandom seed supplied by the operating system and libraries.
This means that each different run of Perl will have a different
ordering of the results of keys(), values(), and each().

B<Please note that the hash seed is sensitive information>. Hashes are
randomized to protect against local and remote attacks against Perl
code. By manually setting a seed this protection may be partially or
completely lost.

See L<perlsec/"Algorithmic Complexity Attacks"> and
L</PERL_HASH_SEED_DEBUG> for more information.

=item PERL_HASH_SEED_DEBUG

(Since Perl 5.8.1.)  Set to one to display (to STDERR) the value of
the hash seed at the beginning of execution.  This, combined with
L</PERL_HASH_SEED> is intended to aid in debugging nondeterministic
behavior caused by hash randomization.

B<Note that the hash seed is sensitive information>: by knowing it one
can craft a denial-of-service attack against Perl code, even remotely,
see L<perlsec/"Algorithmic Complexity Attacks"> for more information.
B<Do not disclose the hash seed> to people who don't need to know it.
See also hash_seed() of L<Hash::Util>.

a1044 16

=item PERL_SIGNALS

In Perls 5.8.1 and later.  If set to C<unsafe> the pre-Perl-5.8.0
signals behaviour (immediate but unsafe) is restored.  If set to
C<safe> the safe (or deferred) signals are used.
See L<perlipc/"Deferred Signals (Safe signals)">.

=item PERL_UNICODE

Equivalent to the B<-C> command-line switch.  Note that this is not
a boolean variable-- setting this to C<"1"> is not the right way to
"enable Unicode" (whatever that would mean).  You can use C<"0"> to
"disable Unicode", though (or alternatively unset PERL_UNICODE in
your shell before starting Perl).  See the description of the C<-C>
switch for more information.
@


1.1.1.7
log
@perl 5.8.3 from CPAN
@
text
@d598 1
a598 2
Here is an efficient way to delete all files that haven't been modifed for
at least a week:
d931 1
a931 1
variable are briefly summarised below. For more details see L<PerlIO>.
d943 18
a960 4
A layer which does CRLF to "\n" translation distinguishing "text" and
"binary" files in the manner of MS-DOS and similar operating systems.
(It currently does I<not> mimic MS-DOS as far as treating of Control-Z
as being an end-of-file marker.)
d966 9
a974 1
using that as PerlIO's "buffer".
d978 5
a982 3
This is a re-implementation of "stdio-like" buffering written as a
PerlIO "layer".  As such it will call whatever layer is below it for
its operations (typically C<:unix>).
d987 1
a987 1
Use with the same care as is reserved for nitroglycerin.
d996 10
a1005 3
Unlike in the earlier versions of Perl C<:raw> is I<not>
just the inverse of C<:crlf> - other layers which would affect the
binary nature of the stream are also removed or disabled.
d1017 3
a1019 1
Low level layer which calls C<read>, C<write> and C<lseek> etc.
d1024 6
a1029 4
that output should be in utf8 and that input should be regarded as
already in utf8 form.  May be useful in PERLIO environment
variable to make UTF-8 the default. (To turn off that behaviour
use C<:bytes> layer.)
d1055 2
a1056 2
C<win32> layer which is expected to be enhanced and should eventually be
the default under Win32.
@


1.1.1.8
log
@Import of stock perl 5.8.5
@
text
@d822 1
a822 2
Prints to STDOUT the value of the named configuration variable(s),
with multiples when your query looks like a regex.
d825 1
a825 28
    $ perl -V:lib.
	libs='-lnsl -lgdbm -ldb -ldl -lm -lcrypt -lutil -lc';
	libc='/lib/libc-2.2.4.so';
    $ perl -V:lib.*
	libpth='/usr/local/lib /lib /usr/lib';
	libs='-lnsl -lgdbm -ldb -ldl -lm -lcrypt -lutil -lc';
	lib_ext='.a';
	libc='/lib/libc-2.2.4.so';
	libperl='libperl.a';
	....

Additionally, extra colons can be used to control formatting.  A
trailing colon suppresses the linefeed and terminator ';', allowing
you to embed queries into shell commands.  (mnemonic: PATH separator
':'.)

    $ echo "compression-vars: " `perl -V:z.*: ` " are here !"
    compression-vars:  zcat='' zip='zip'  are here !

A leading colon removes the 'name=' part of the response, this allows
you to map to the name you need.

    $ echo "goodvfork="`./perl -Ilib -V::usevfork`
    goodvfork=false;

Leading and trailing colons can be used together if you need
positional parameter values without the names.  Note that in the case
below, the PERL_API params are returned in alphabetical order.
d827 2
a828 2
    $ echo building_on `perl -V::osname: -V::PERL_API_.*:` now
    building_on 'linux' '5' '1' '9' now
a856 2
=item B<-x>

d968 1
a968 1
A pseudolayer that manipulates other layers.  Applying the C<:raw>
@


1.1.1.9
log
@perl 5.8.6 from CPAN
@
text
@d9 1
a9 1
	S<[ B<-cw> ] [ B<-d>[B<t>][:I<debugger>] ] [ B<-D>[I<number/list>] ]>
a336 2
=item B<-dt>

a337 2
If B<t> is specified, it indicates to the debugger that threads
will be used in the code being debugged.
a340 2
=item B<-dt:>I<foo[=bar,baz]>

a346 2
If B<t> is specified, it indicates to the debugger that threads
will be used in the code being debugged.
d363 2
a364 1
        2  s  Stack snapshots (with v, displays all stacks)
d384 1
a384 1
  8388608  q  quiet - currently only suppresses the "EXECUTING" message
a525 4
Note that because B<-i> renames or deletes the original file before
creating a new file of the same name, UNIX-style soft and hard links will
not be preserved.

d598 1
a598 1
Here is an efficient way to delete all files that haven't been modified for
d726 3
a728 6
Typically this is used to emulate #! startup on platforms that don't
support #!.  Its also convenient when debugging a script that uses #!,
and is thus normally found by the shell's $PATH search mechanism.

This example works on many platforms that have a shell compatible with
Bourne shell:
d820 1
a820 1
=item B<-V:>I<configvar>
d823 2
a824 2
with multiples when your configvar argument looks like a regex (has
non-letters).  For example:
a825 2
    $ perl -V:libc
	libc='/lib/libc-2.2.4.so';
d846 1
a846 1
you to map to the name you need.  (mnemonic: empty label)
a1079 5
=item PERL5DB_THREADED

If set to a true value, indicates to the debugger that the code being
debugged uses threads.

a1094 14
=item PERL_ALLOW_NON_IFS_LSP (specific to the Win32 port)

Set to 1 to allow the use of non-IFS compatible LSP's.
Perl normally searches for an IFS-compatible LSP because this is required
for its emulation of Windows sockets as real filehandles.  However, this may
cause problems if you have a firewall such as McAfee Guardian which requires
all applications to use its LSP which is not IFS-compatible, because clearly
Perl will normally avoid using such an LSP.
Setting this environment variable to 1 means that Perl will simply use the
first suitable LSP enumerated in the catalog, which keeps McAfee Guardian
happy (and in that particular case Perl still works too because McAfee
Guardian's LSP actually plays some other games which allow applications
requiring IFS compatibility to work).

d1173 1
a1173 1
See L<perlipc/"Deferred Signals (Safe Signals)">.
@


1.1.1.10
log
@perl 5.8.8 import
@
text
@d11 1
a11 2
	S<[ B<-I>I<dir> ] [ B<-m>[B<->]I<module> ] [ B<-M>[B<->]I<'module...'> ] [ B<-f> ]>
	S<[ B<-C [I<number/list>] >]>
d17 1
a111 1
X<hashbang> X<#!>
d143 2
a144 4
Under "Classic" MacOS, a perl program will have the appropriate Creator and
Type, so that double-clicking them will invoke the MacPerl application.
Under Mac OS X, clickable apps can be made from any C<#!> script using Wil
Sanchez' DropScript utility: http://www.wsanchez.net/software/ .
a205 1
X<perl, location of interpreter>
a226 1
X<perl, command switches> X<command switches>
a237 1
X<-0> X<$/>
a256 1
X<-a> X<autosplit>
a273 1
X<-C>
a327 1
X<-c>
a335 1
X<-d> X<-dt>
a343 1
X<-d> X<-dt>
a357 1
X<-D> X<DEBUGGING> X<-DDEBUGGING>
d404 1
a404 1
  env PERLDB_OPTS="NonStop=1 AutoTrace=1 frame=2" perl -dS program
a414 1
X<-e>
a420 11
=item B<-f>
X<-f>

Disable executing F<$Config{sitelib}/sitecustomize.pl> at startup.

Perl can be built so that it by default will try to execute
F<$Config{sitelib}/sitecustomize.pl> at startup.  This is a hook that
allows the sysadmin to customize how perl behaves.  It can for
instance be used to add entries to the @@INC array to make perl find
modules in non-standard locations.

a421 1
X<-F>
d425 1
a425 1
put in single quotes. You can't use literal whitespace in the pattern.
a427 1
X<-h>
a431 1
X<-i> X<in-place>
a542 1
X<-I> X<@@INC>
a549 1
X<-l> X<$/> X<$\>
a569 1
X<-m> X<-M>
a593 4
A consequence of this is that B<-MFoo=number> never does a version check
(unless C<Foo::import()> itself is set up to do a version check, which
could happen for example if Foo inherits from Exporter.)

a594 1
X<-n>
a622 1
X<-p>
a644 1
X<-P>
a709 1
X<-s>
d713 2
a714 1
an argument of B<-->).  Any switch found there is removed from @@ARGV and sets the
d722 2
a723 3
Do note that a switch like B<--help> creates the variable ${-help}, which is not compliant
with C<strict refs>.  Also, when using this option on a script with
warnings enabled you may get a lot of spurious "used only once" warnings.
a725 1
X<-S>
a777 1
X<-t>
a788 1
X<-T>
a800 1
X<-u>
a816 1
X<-U>
d819 5
a823 5
operations are attempting to unlink directories while running as 
superuser, and running setuid programs with fatal taint checks turned
into warnings.  Note that the B<-w> switch (or the C<$^W> variable) 
must be used along with this option to actually I<generate> the
taint-check warnings.  
a825 1
X<-v>
a829 1
X<-V>
a874 1
X<-w>
d880 1
a880 1
to write on, values used as a number that don't look like numbers,
a891 1
X<-W>
a896 1
X<-X>
a901 1
X<-x>
a918 1
X<perl, environment variables>
a922 1
X<HOME>
a926 1
X<LOGDIR>
a930 1
X<PATH>
a935 1
X<PERL5LIB>
a951 1
X<PERL5OPT>
a960 1
X<PERLIO>
a982 1
X<:bytes>
a988 1
X<:crlf>
a995 1
X<:mmap>
a1001 1
X<:perlio>
a1007 1
X<:pop>
a1012 1
X<:raw>
a1023 1
X<:stdio>
a1031 1
X<:unix>
a1035 1
X<:utf8>
a1043 1
X<:win32>
a1070 1
X<PERLIO_DEBUG>
a1082 2
This functionality is disabled for setuid scripts and for scripts run
with B<-T>.
a1084 1
X<PERLLIB>
a1090 1
X<PERL5DB>
a1096 1
X<PERL5DB_THREADED>
a1101 1
X<PERL5SHELL>
a1116 1
X<PERL_ALLOW_NON_IFS_LSP>
a1130 1
X<PERL_DEBUG_MSTATS>
a1138 1
X<PERL_DESTRUCT_LEVEL>
a1144 1
X<PERL_DL_NONLAZY>
a1152 1
X<PERL_ENCODING>
a1157 1
X<PERL_HASH_SEED>
a1182 1
X<PERL_HASH_SEED_DEBUG>
a1195 1
X<PERL_ROOT>
a1203 1
X<PERL_SIGNALS>
a1210 1
X<PERL_UNICODE>
a1219 1
X<SYS$LOGIN>
@


1.1.1.11
log
@import perl 5.10.0 from CPAN
@
text
@d17 1
a17 1
	S<[ B<-eE> I<'command'> ] [ B<--> ] [ I<programfile> ] [ I<argument> ]...>
d32 1
a32 1
Specified line by line via B<-e> or B<-E> switches on the command line.
d283 1
a283 1
The C<-C> flag controls some of the Perl Unicode features.
d289 13
a301 23
    I     1   STDIN is assumed to be in UTF-8
    O     2   STDOUT will be in UTF-8
    E     4   STDERR will be in UTF-8
    S     7   I + O + E
    i     8   UTF-8 is the default PerlIO layer for input streams
    o    16   UTF-8 is the default PerlIO layer for output streams
    D    24   i + o
    A    32   the @@ARGV elements are expected to be strings encoded
              in UTF-8
    L    64   normally the "IOEioA" are unconditional,
              the L makes them conditional on the locale environment
              variables (the LC_ALL, LC_TYPE, and LANG, in the order
              of decreasing precedence) -- if the variables indicate
              UTF-8, then the selected "IOEioA" are in effect
    a   256   Set ${^UTF8CACHE} to -1, to run the UTF-8 caching code in
              debugging mode.

=for documenting_the_underdocumented
perl.h gives W/128 as PERL_UNICODE_WIDESYSCALLS "/* for Sarathy */"

=for todo
perltodo mentions Unicode in %ENV and filenames. I guess that these will be
options e and f (or F).
d339 4
a342 4
executing it.  Actually, it I<will> execute C<BEGIN>, C<UNITCHECK>,
C<CHECK>, and C<use> blocks, because these are considered as occurring
outside the execution of your program.  C<INIT> and C<END> blocks,
however, will be skipped.
d382 1
a382 1
        1  p  Tokenizing and parsing (with v, displays parse stack)
d394 1
a394 1
     4096  U  Unofficial, User hacking (reserved for private, unreleased use)
a402 2
  2097152  C  Copy On Write
  4194304  A  Consistency checks on internal structures
a433 6
=item B<-E> I<commandline>
X<-E>

behaves just like B<-e>, except that it implicitly enables all
optional features (in the main compilation unit). See L<feature>.

d684 1
a684 2
problems, including poor portability. It is deprecated and will be
removed in a future version of Perl.>
d854 4
d952 1
a952 1
=item B<-x>I<directory>
a964 3
The directory, if specified, must appear immediately following the B<-x>
with no intervening whitespace.

d994 4
a997 7
locations are automatically included if they exist (this lookup
being done at interpreter startup time.)

If PERL5LIB is not defined, PERLLIB is used.  Directories are separated
(like in PATH) by a colon on unixish platforms and by a semicolon on
Windows (the proper path separator being given by the command C<perl
-V:path_sep>).
d1000 2
a1001 2
or setgid, or the B<-T> or B<-t> switch was specified), neither variable
is used. The program should instead say:
d1009 1
a1009 1
as if they were on every Perl command line.  Only the B<-[CDIMUdmtw]>
d1026 1
a1026 3
An unset or empty PERLIO is equivalent to the default set of layers for
your platform, for example C<:unix:perlio> on UNIX-like systems
and C<:unix:crlf> on Windows and other DOS-like systems.
d1104 3
a1106 3
already in valid utf8 form. It does not check for validity and as such
should be handled with caution for input. Generally C<:encoding(utf8)> is
the best option when reading UTF-8 encoded data.
d1238 1
a1238 1
(Since Perl 5.8.1.)  Used to randomise perl's internal hash function.
d1241 2
a1242 7
things, that hash keys will always have the same ordering between
different runs of perl.

Most hashes return elements in the same order as Perl 5.8.0 by default.
On a hash by hash basis, if pathological data is detected during a hash
key insertion, then that hash will switch to an alternative random hash
seed.
d1245 1
a1245 1
If perl has been compiled with C<-DUSE_HASH_SEED_EXPLICIT>, the default
d1248 1
a1248 1
If PERL_HASH_SEED is unset or set to a non-numeric string, perl uses
d1250 2
@


1.1.1.12
log
@import perl 5.10.1
@
text
@d17 1
a17 1
	S<[ [B<-e>|B<-E>] I<'command'> ] [ B<--> ] [ I<programfile> ] [ I<argument> ]...>
d81 3
a83 4
    #!/bin/sh
    #! -*-perl-*-
    eval 'exec perl -x -wS $0 ${1+"$@@"}'
        if 0;
a344 5
B<Note:> Since perl 5.10.1, if the -C option is used on the #! line, it
must be specified on the command line as well, since the standard streams
are already set up at this point in the execution of the perl interpreter.
You can also use binmode() to set the encoding of an I/O stream.

d399 1
a399 1
      128  m  Memory and SV allocation
d458 4
a461 4
F<$Config{sitelib}/sitecustomize.pl> at startup (in a BEGIN block).
This is a hook that allows the sysadmin to customize how perl behaves.
It can for instance be used to add entries to the @@INC array to make perl
find modules in non-standard locations.
a661 4
Also note that C<< <> >> passes command line arguments to
L<perlfunc/open>, which doesn't necessarily interpret them as file names.
See  L<perlop> for possible security implications.

a972 8

All references to line numbers by the program (warnings, errors, ...)
will treat the #! line as the first line.
Thus a warning on the 2nd line of the program (which is on the 100th
line in the file) will be reported as line 2, and not as line 100.
This can be overridden by using the #line directive.
(See L<perlsyn/"Plain-Old-Comments-(Not!)">)

a1158 3
The PERLIO environment variable is completely ignored when perl
is run in taint mode.

a1182 3
The PERLLIB environment variable is completely ignored when perl
is run in taint mode.

a1189 3
The PERL5DB environment variable only used when perl is started with
a bare B<-d> switch.

a1210 5

Before Perl 5.10.0 and 5.8.8, PERL5SHELL was not taint checked
when running external commands.  It is recommended that
you explicitly set (or delete) C<$ENV{PERL5SHELL}> when running
in taint mode under Windows.
@


1.1.1.13
log
@Perl 5.12.2 from CPAN
@
text
@d13 1
d143 7
d185 4
d202 5
d255 2
a256 2
Any value 0400 or above will cause Perl to slurp files whole, but by convention
the value 0777 is the one normally used for this purpose.
d258 2
a259 4
You can also specify the separator character using hexadecimal notation:
C<-0xHHH...>, where the C<H> are valid hexadecimal digits.  Unlike the octal
form, this one may be used to specify any Unicode character, even those beyond
0xFF.
d336 1
a336 1
of this setting.  This variable is set during Perl startup and is
d404 1
a404 1
       64  P  Print profiling info, source file input state
d414 1
a421 2
 16777216  M  trace smart match resolution
 33554432  B  dump suBroutine definitions, including special Blocks like BEGIN
d459 1
a459 1
X<-f> X<sitecustomize> X<sitecustomize.pl>
a468 22
Perl actually inserts the following code:

    BEGIN {
        do { local $!; -f "$Config{sitelib}/sitecustomize.pl"; }
            && do "$Config{sitelib}/sitecustomize.pl";
    }

Since it is an actual C<do> (not a C<require>), F<sitecustomize.pl>
doesn't need to return a true value. The code is run in package C<main>,
in its own lexical scope. However, if the script dies, C<$@@> will not
be set.

The value of C<$Config{sitelib}> is also determined in C code and not
read from C<Config.pm>, which is not loaded.

The code is executed B<very> early. For example, any changes made to
C<@@INC> will show up in the output of `perl -V`. Of course, C<END>
blocks will be likewise executed very late.

To determine at runtime if this capability has been compiled in your
perl, you can check the value of C<$Config{usesitecustomize}>.

d585 1
a585 1
creating a new file of the same name, Unix-style soft and hard links will
d597 3
a599 1
modules (C<@@INC>).
d708 67
d1034 1
a1034 1
(like in PATH) by a colon on Unixish platforms and by a semicolon on
d1048 1
a1048 1
as if they were on every Perl command line.  Only the B<-[CDIMUdmtwW]>
d1066 1
a1066 1
your platform, for example C<:unix:perlio> on Unix-like systems
d1160 1
a1160 1
For Unix platforms that will equivalent of "unix perlio" or "stdio".
d1185 1
a1185 1
are Unix:
a1332 15
=item PERL_MEM_LOG
X<PERL_MEM_LOG>

If your perl was configured with C<-Accflags=-DPERL_MEM_LOG>, setting
the environment variable C<PERL_MEM_LOG> enables logging debug
messages. The value has the form C<< <number>[m][s][t] >>, where
C<number> is the filedescriptor number you want to write to (2 is
default), and the combination of letters specifies that you want
information about (m)emory and/or (s)v, optionally with
(t)imestamps. For example C<PERL_MEM_LOG=1mst> will log all
information to stdout. You can write to other opened filedescriptors
too, in a variety of ways;

  bash$ 3>foo3 PERL_MEM_LOG=3m perl ...

d1354 1
a1354 1
a boolean variable. Setting this to C<"1"> is not the right way to
@


1.1.1.14
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d36 1
a36 1
(Note that systems supporting the C<#!> notation invoke interpreters this
d49 1
a49 1
scans for the first line starting with C<#!> and containing the word
d54 1
a54 1
The C<#!> line is always examined for switches as the line is being
d56 2
a57 2
with the C<#!> line, or worse, doesn't even recognize the C<#!> line, you
still can get consistent switch behaviour regardless of how Perl was
d61 1
a61 1
kernel interpretation of the C<#!> line after 32 characters, some
d76 1
a76 1
Parsing of the C<#!> switches starts wherever "perl" is mentioned in the line.
d87 1
a87 1
A similar trick involves the I<env> program, if you have it.
d94 1
a94 1
that directly in the C<#!> line's path.
d96 5
a100 6
If the C<#!> line does not contain the word "perl" nor the word "indir"
the program named after the C<#!> is executed instead of the Perl
interpreter.  This is slightly bizarre, but it helps people on machines
that don't do C<#!>, because they can tell a program that their SHELL is
F</usr/bin/perl>, and Perl will then dispatch the program to the correct
interpreter for them.
d114 1
a114 1
Unix's C<#!> technique can be simulated on other systems:
d146 2
a147 2
 $ perl -mysw 'f$env("procedure")' 'p1' 'p2' 'p3' 'p4' 'p5' 'p6' 'p7' 'p8' !
 $ exit++ + ++$status != 0 and $exit = $status = undef;
d163 1
a163 1
one-liners (see L<-e|/-e commandline> below).
d181 1
a181 1
command and it is entirely possible neither works.  If I<4DOS> were
d232 1
a232 1
example, if you have a version of I<find> which can print filenames
d242 5
a246 6
B<-0xI<HHH...>>, where the C<I<H>> are valid hexadecimal digits.  Unlike
the octal form, this one may be used to specify any Unicode character, even
those beyond 0xFF.  So if you I<really> want a record separator of 0777,
specify it as B<-0x1FF>.  (This means that you cannot use the B<-x> option
with a directory name that consists of hexadecimal digits, or else Perl
will think you have specified a hex number to B<-0>.)
d269 1
a269 1
The B<-C> flag controls some of the Perl Unicode features.
d271 1
a271 1
As of 5.8.1, the B<-C> can be followed either by a number or a list
d284 4
a287 4
    L    64   normally the "IOEioA" are unconditional, the L makes
              them conditional on the locale environment variables
              (the LC_ALL, LC_TYPE, and LANG, in the order of
              decreasing precedence) -- if the variables indicate
d289 2
a290 2
    a   256   Set ${^UTF8CACHE} to -1, to run the UTF-8 caching
              code in debugging mode.
d299 1
a299 1
For example, B<-COE> and B<-C6> will both turn on UTF-8-ness on both
d304 5
a308 5
operations) in the current file scope will have the C<:utf8> PerlIO layer
implicitly applied to them, in other words, UTF-8 is expected from any
input stream, and UTF-8 is produced to any output stream.  This is just
the default, with explicit layers in open() and with binmode() one can
manipulate streams as usual.
d310 1
a310 1
B<-C> on its own (not followed by any number or option list), or the
d312 2
a313 2
same effect as B<-CSDL>.  In other words, the standard I/O handles and
the default C<open()> layer are UTF-8-fied I<but> only if the locale
a315 1
(See L<perl581delta/UTF-8 no longer default under UTF-8 locales>.)
d317 1
a317 1
You can use B<-C0> (or C<"0"> for C<PERL_UNICODE>) to explicitly
d326 1
a326 1
(In Perls earlier than 5.8.1 the B<-C> switch was a Win32-only switch
d331 2
a332 2
B<Note:> Since perl 5.10.1, if the B<-C> option is used on the C<#!> line,
it must be specified on the command line as well, since the standard streams
d340 4
a343 4
executing it.  Actually, it I<will> execute and C<BEGIN>, C<UNITCHECK>,
or C<CHECK> blocks and any C<use> statements: these are considered as
occurring outside the execution of your program.  C<INIT> and C<END>
blocks, however, will be skipped.
d354 1
a354 1
=item B<-d:>I<MOD[=bar,baz]>
d357 1
a357 1
=item B<-dt:>I<MOD[=bar,baz]>
d359 9
a367 9
runs the program under the control of a debugging, profiling, or tracing
module installed as C<Devel::I<MOD>>. E.g., B<-d:DProf> executes the
program using the C<Devel::DProf> profiler.  As with the B<-M> flag, options
may be passed to the C<Devel::I<MOD>> package where they will be received
and interpreted by the C<Devel::I<MOD>::import> routine.  Again, like B<-M>,
use -B<-d:-I<MOD>> to call C<Devel::I<MOD>::unimport> instead of import.  The
comma-separated list of options must follow a C<=> character.  If B<t> is
specified, it indicates to the debugger that threads will be used in the
code being debugged.  See L<perldebug>.
d395 1
a395 2
     4096  U  Unofficial, User hacking (reserved for private,
              unreleased use)
d399 3
a401 5
   131072  T  Tokenizing
   262144  R  Include reference counts of dumped variables (eg when
              using -Ds)
   524288  J  show s,t,P-debug (don't Jump over) on opcodes within
              package DB
d405 1
a405 2
  8388608  q  quiet - currently only suppresses the "EXECUTING"
              message
d407 1
a407 2
 33554432  B  dump suBroutine definitions, including special Blocks
              like BEGIN
d410 1
a410 2
executable (but see C<:opd> in L<Devel::Peek> or L<re/'debug' mode>
which may change this).
d451 2
a452 2
This is a hook that allows the sysadmin to customize how Perl behaves.
It can for instance be used to add entries to the @@INC array to make Perl
d470 1
a470 1
The code is executed I<very> early. For example, any changes made to
d513 1
a513 2
 $ perl -pi'orig_*' -e 's/bar/baz/' fileA  # backup to
                                           # 'orig_fileA'
d518 1
a518 2
 $ perl -pi'old/*.orig' -e 's/bar/baz/' fileA  # backup to
                                               # 'old/fileA.orig'
d522 2
a523 2
 $ perl -pi -e 's/bar/baz/' fileA          # overwrite current file
 $ perl -pi'*' -e 's/bar/baz/' fileA       # overwrite current file
d525 2
a526 2
 $ perl -pi'.orig' -e 's/bar/baz/' fileA   # backup to 'fileA.orig'
 $ perl -pi'*.orig' -e 's/bar/baz/' fileA  # backup to 'fileA.orig'
d642 1
a642 1
e.g., C<'-MI<MODULE> qw(foo bar)'>.
d644 1
a644 1
If the first character after the B<-M> or B<-m> is a dash (B<->)
d648 3
a650 3
B<-mI<MODULE>=foo,bar> or B<-MI<MODULE>=foo,bar> as a shortcut for
B<'-MI<MODULE> qw(foo bar)'>.  This avoids the need to use quotes when
importing symbols.  The actual code generated by B<-MI<MODULE>=foo,bar> is
d654 3
a656 3
A consequence of this is that B<-MI<MODULE>=number> never does a version check,
unless C<I<MODULE>::import()> itself is set up to do a version check, which
could happen for example if I<MODULE> inherits from L<Exporter>.
d662 2
a663 2
makes it iterate over filename arguments somewhat like I<sed -n> or
I<awk>:
d670 1
a670 1
Note that the lines are not printed by default.  See L</-p> to have
d683 1
a683 1
This is faster than using the B<-exec> switch of I<find> because you don't
d689 1
a689 1
the implicit program loop, just as in I<awk>.
d695 1
a695 1
makes it iterate over filename arguments somewhat like I<sed>:
d712 1
a712 1
the implicit loop, just as in I<awk>.
d727 2
a728 2
Do note that a switch like B<--help> creates the variable C<${-help}>, which is not compliant
with C<use strict "refs">.  Also, when using this option on a script with
d735 1
a735 1
program unless the name of the program contains path separators.
d741 2
a742 2
of those suffixes.  If your Perl was compiled with C<DEBUGGING> turned
on, using the B<-Dp> switch to Perl shows how the search progresses.
d744 2
a745 2
Typically this is used to emulate C<#!> startup on platforms that don't
support C<#!>.  It's also convenient when debugging a script that uses C<#!>,
d764 2
a765 2
embedded spaces (and such) in the argument list.  To start up I<sh> rather
than I<csh>, some systems may have to replace the C<#!> line with a line
d768 1
a768 1
will work under any of I<csh>, I<sh>, or Perl, such as the following:
d774 1
a774 1
If the filename supplied contains directory separators (and so is an
d788 1
a788 1
errors.  These warnings can now be controlled normally with C<no warnings
d791 3
a793 3
B<Note: This is not a substitute for C<-T>!> This is meant to be
used I<only> as a temporary development aid while securing legacy code:
for real production code and for new secure code written from scratch,
d799 1
a799 1
turns on "taint" so you can test them.  Ordinarily
d806 1
a806 1
on the command line or in the C<#!> line for systems which support
d812 1
a812 1
This switch causes Perl to dump core after compiling your
d814 1
a814 1
into an executable file by using the I<undump> program (not supplied).
d819 1
a819 1
operator instead.  Note: availability of I<undump> is platform
d826 5
a830 4
operations are attempting to unlink directories while running as superuser
and running setuid programs with fatal taint checks turned into warnings.
Note that warnings must be enabled along with this option to actually
I<generate> the taint-check warnings.
d846 1
a846 1
with multiples when your C<I<configvar>> argument looks like a regex (has
d863 1
a863 1
trailing colon suppresses the linefeed and terminator ";", allowing
d865 1
a865 1
":".)
d870 1
a870 1
A leading colon removes the "name=" part of the response, this allows
d878 1
a878 1
below, the C<PERL_API> params are returned in alphabetical order.
d887 6
a892 6
mentioned only once and scalar variables used
before being set; redefined subroutines; references to undefined
filehandles; filehandles opened read-only that you are attempting
to write on; values used as a number that don't I<look> like numbers;
using an array as though it were a scalar; if your subroutines
recurse more than 100 deep; and innumerable other things.
d894 1
a894 2
This switch really just enables the global C<$^W> variable; normally,
the lexically scoped C<use warnings> pragma is preferred. You
d897 1
a897 1
See also L<perldiag> and L<perltrap>.  A fine-grained warning
d919 2
a920 2
text, such as in a mail message.  Leading garbage will be
discarded until the first line that starts with C<#!> and contains the
d924 5
a928 5
will treat the C<#!> line as the first line.
Thus a warning on the 2nd line of the program, which is on the 100th
line in the file will be reported as line 2, not as line 100.
This can be overridden by using the C<#line> directive.
(See L<perlsyn/"Plain Old Comments (Not!)">)
d933 3
a935 3
C<__END__> if there is trailing garbage to be ignored;  the program
can process any or all of the trailing garbage via the C<DATA> filehandle
if desired.
d950 1
a950 1
Used if C<chdir> has no argument.
d955 1
a955 1
Used if C<chdir> has no argument and HOME is not set.
d969 2
a970 2
locations are automatically included if they exist, with this lookup
done at interpreter startup time.
d975 1
a975 1
-V:I<path_sep>>).
d977 3
a979 3
When running taint checks, either because the program was running setuid or
setgid, or the B<-T> or B<-t> switch was specified, neither PERL5LIB nor
PERLLIB is consulted. The program should instead say:
d986 1
a986 1
Command-line options (switches).  Switches in this variable are treated
d988 4
a991 6
switches are allowed.  When running taint checks (either because the
program was running setuid or setgid, or because the B<-T> or B<-t>
switch was used), this variable is ignored.  If PERL5OPT begins with
B<- T>, tainting will be enabled and subsequent options ignored.  If
PERL5OPT begins with B<-t>, tainting will be enabled, a writable dot
removed from @@INC, and subsequent options honored.
d997 1
a997 1
to use PerlIO system for IO (the default) these layers affect Perl's IO.
d999 4
a1002 4
It is conventional to start layer names with a colon (for example, C<:perlio>) to
emphasize their similarity to variable "attributes". But the code that parses
layer specification strings,  which is also used to decode the PERLIO
environment variable, treats the colon as a separator.
d1005 1
a1005 1
your platform; for example, C<:unix:perlio> on Unix-like systems
d1008 2
a1009 2
The list becomes the default for I<all> Perl's IO. Consequently only built-in
layers can appear in this list, as external layers (such as C<:encoding()>) need
d1013 2
a1014 2
Layers it makes sense to include in the PERLIO environment
variable are briefly summarized below. For more details see L<PerlIO>.
d1021 2
a1022 2
A pseudolayer that turns the C<:utf8> flag I<off> for the layer below;
unlikely to be useful on its own in the global PERLIO environment variable.
d1028 1
a1028 1
A layer which does CRLF to C<"\n"> translation distinguishing "text" and
d1036 2
a1037 2
A layer that implements "reading" of files by using I<mmap>(2) to
make an entire file appear in the process's address space, and then
d1043 3
a1045 3
This is a re-implementation of stdio-like buffering written as a
PerlIO layer.  As such it will call whatever layer is below it for
its operations, typically C<:unix>.
d1051 1
a1051 1
Use with the same care as is reserved for nitroglycerine.
d1058 2
a1059 2
pass each byte as-is without translation.  In particular, both CRLF
translation and intuiting C<:utf8> from the locale are disabled.
d1061 2
a1062 2
Unlike in earlier versions of Perl, C<:raw> is I<not>
just the inverse of C<:crlf>: other layers which would affect the
d1068 1
a1068 1
This layer provides a PerlIO interface by wrapping system's ANSI C "stdio"
d1070 2
a1071 2
Note that the C<:stdio> layer does I<not> do CRLF translation even if that
is the platform's normal behaviour. You will need a C<:crlf> layer above it
d1077 1
a1077 1
Low-level layer that calls C<read>, C<write>, C<lseek>, etc.
d1082 1
a1082 1
A pseudolayer that enables a flag in the layer below to tell Perl
d1084 2
a1085 3
already in valid utf8 form. B<WARNING: It does not check for validity and as such
should be handled with extreme caution for input, because security violations
can occur with non-shortest UTF-8 encodings, etc.> Generally C<:encoding(utf8)> is
d1092 2
a1093 2
rather than a Unix-like numeric file descriptor layer. Known to be
buggy in this release (5.14).
d1097 1
a1097 1
The default set of layers should give acceptable results on all platforms
d1099 3
a1101 3
For Unix platforms that will be the equivalent of "unix perlio" or "stdio".
Configure is set up to prefer the "stdio" implementation if the system's library
provides for fast access to the buffer; otherwise, it uses the "unix perlio"
d1104 11
a1114 10
On Win32 the default in this release (5.14) is "unix crlf". Win32's "stdio"
has a number of bugs/mis-features for Perl IO which are somewhat depending
on the version and vendor of the C compiler. Using our own C<crlf> layer as
the buffer avoids those issues and makes things more uniform.  The C<crlf>
layer provides CRLF conversion as well as buffering.

This release (5.14) uses C<unix> as the bottom layer on Win32, and so still
uses the C compiler's numeric file descriptor routines. There is an
experimental native C<win32> layer, which is expected to be enhanced and
should eventually become the default under Win32.
d1116 1
a1116 1
The PERLIO environment variable is completely ignored when Perl
d1122 3
a1124 3
If set to the name of a file or device, certain operations of PerlIO
subsystem will be logged to that file, which is opened in append mode
Typical uses are in Unix:
d1126 1
a1126 1
   % env PERLIO_DEBUG=/dev/tty perl script ...
d1128 1
a1128 1
and under Win32, the approximately equivalent:
d1130 1
a1130 1
   > set PERLIO_DEBUG=CON
d1143 1
a1143 1
The PERLLIB environment variable is completely ignored when Perl
d1151 1
a1151 1
	BEGIN { require "perl5db.pl" }
d1153 1
a1153 1
The PERL5DB environment variable is only used when Perl is started with
d1165 5
a1169 5
On Win32 ports only, may be set to an alternative shell that Perl must use
internally for executing "backtick" commands or system().  Default is
C<cmd.exe /x/d/c> on WindowsNT and C<command.com /c> on Windows95.  The
value is considered space-separated.  Precede any character that
needs to be protected, like a space or backslash, with another backslash.
d1173 1
a1173 1
portability concerns.  Besides, Perl can use a shell that may not be
d1186 1
a1186 1
Set to 1 to allow the use of non-IFS compatible LSPs (Layered Service Providers).
d1189 2
a1190 2
cause problems if you have a firewall such as I<McAfee Guardian>, which requires
that all applications use its LSP but which is not IFS-compatible, because clearly
a1191 1

d1193 4
a1196 4
first suitable LSP enumerated in the catalog, which keeps I<McAfee Guardian>
happy--and in that particular case Perl still works too because I<McAfee
Guardian>'s LSP actually plays other games which allow applications
requiring IFS compatibility to work.
d1201 4
a1204 5
Relevant only if Perl is compiled with the C<malloc> included with the Perl
distribution; that is, if C<perl -V:d_mymalloc> is "define".

If set, this dumps out memory statistics after execution.  If set
to an integer greater than one, also dumps out memory statistics
d1210 3
a1212 3
Relevant only if your Perl executable was built with B<-DDEBUGGING>,
this controls the behaviour of global destruction of objects and other
references.  See L<perlhacktips/PERL_DESTRUCT_LEVEL> for more information.
d1217 1
a1217 1
Set to C<"1"> to have Perl resolve I<all> undefined symbols when it loads
d1220 2
a1221 2
extensions, as it ensures that you get an error on misspelled function
names even if the test suite doesn't call them.
d1226 1
a1226 1
If using the C<use encoding> pragma without an explicit encoding name, the
d1232 3
a1234 3
(Since Perl 5.8.1.)  Used to randomize Perl's internal hash function.
To emulate the pre-5.8.1 behaviour, set to an integer; C<"0"> means
exactly the same order as in 5.8.0.  "Pre-5.8.1" means, among other
d1236 1
a1236 1
different runs of Perl.
d1238 1
a1238 1
Most hashes by default return elements in the same order as in Perl 5.8.0.
d1243 3
a1245 3
The default behaviour is to randomize unless the PERL_HASH_SEED is set.
If Perl has been compiled with B<-DUSE_HASH_SEED_EXPLICIT>, the default
behaviour is I<not> to randomize unless the PERL_HASH_SEED is set.
d1247 1
a1247 1
If PERL_HASH_SEED is unset or set to a non-numeric string, Perl uses
d1250 1
a1250 1
B<PLEASE NOTE: The hash seed is sensitive information>. Hashes are
d1252 1
a1252 1
code. By manually setting a seed, this protection may be partially or
d1261 1
a1261 1
(Since Perl 5.8.1.)  Set to C<"1"> to display (to STDERR) the value of
d1264 1
a1264 1
behaviour caused by hash randomization.
d1266 2
a1267 2
B<Note that the hash seed is sensitive information>: by knowing it, one
can craft a denial-of-service attack against Perl code, even remotely;
d1270 1
a1270 1
See also hash_seed() in L<Hash::Util>.
d1275 1
a1275 1
If your Perl was configured with B<-Accflags=-DPERL_MEM_LOG>, setting
d1277 2
a1278 2
messages. The value has the form C<< <I<number>>[m][s][t] >>, where
C<I<number>> is the file descriptor number you want to write to (2 is
d1281 3
a1283 3
(t)imestamps. For example, C<PERL_MEM_LOG=1mst> logs all
information to stdout. You can write to other opened file descriptors
in a variety of ways:
d1285 1
a1285 1
  $ 3>foo3 PERL_MEM_LOG=3m perl ...
d1290 1
a1290 1
A translation-concealed rooted logical name that contains Perl and the
d1292 2
a1293 2
affect Perl on VMS include PERLSHR, PERL_ENV_TABLES, and
SYS$TIMEZONE_DIFFERENTIAL, but are optional and discussed further in
d1299 4
a1302 4
Available in Perls 5.8.1 and later.  If set to C<"unsafe">, the pre-Perl-5.8.0
signal behaviour (which is immediate but unsafe) is restored.  If set
to C<safe>, then safe (but deferred) signals are used.  See
L<perlipc/"Deferred Signals (Safe Signals)">.
d1311 1
a1311 1
your shell before starting Perl).  See the description of the B<-C>
d1322 1
a1322 1
specific to particular natural languages; see L<perllocale>.
d1324 5
a1328 11
Perl and its various modules and components, including its test frameworks,
may sometimes make use of certain other environment variables.  Some of
these are specific to a particular platform.  Please consult the
appropriate module documentation and any documentation for your platform
(like L<perlsolaris>, L<perllinux>, L<perlmacosx>, L<perlwin32>, etc) for
variables peculiar to those specific situations.

Perl makes all environment variables available to the program being
executed, and passes these along to any child processes it starts.
However, programs running setuid would do well to execute the following
lines before doing anything else, just to keep people honest:
d1330 2
a1331 2
    $ENV{PATH}  = "/bin:/usr/bin";    # or whatever you need
    $ENV{SHELL} = "/bin/sh" if exists $ENV{SHELL};
@


1.1.1.15
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d93 1
a93 1
a specific version of Perl, say, perl5.14.1, you should place
d208 1
a208 1
    #!/usr/local/bin/perl5.14
d213 1
a213 1
    use 5.014;
a402 1
    65536  S  Op slab allocation
d508 2
a509 4
If no extension is supplied, and your system supports it, the original
I<file> is kept open without a name while the output is redirected to
a new file with the original I<filename>.  When perl exits, cleanly or not,
the original I<file> is unlinked.
d979 3
a981 7
directory.  Any architecture-specific and version-specific directories,
such as F<version/archname/>, F<version/>, or F<archname/> under the
specified locations are automatically included if they exist, with this
lookup done at interpreter startup time.  In addition, any directories
matching the entries in C<$Config{inc_version_list}> are added.
(These typically would be for older compatible perl versions installed
in the same directory tree.)
d1002 1
a1002 1
B<-T>, tainting will be enabled and subsequent options ignored.  If
d1014 1
a1014 1
layer specification strings, which is also used to decode the PERLIO
d1023 1
a1023 1
IO in order to load them!  See L<"open pragma"|open> for how to add external
d1136 1
a1136 1
subsystem will be logged to that file, which is opened in append mode.
d1247 17
a1263 8
(Since Perl 5.8.1, new semantics in Perl 5.18.0)  Used to override
the randomization of Perl's internal hash function. The value is expressed
in hexadecimal, and may include a leading 0x. Truncated patterns
are treated as though they are suffixed with sufficient 0's as required.

If the option is provided, and C<PERL_PERTURB_KEYS> is NOT set, then
a value of '0' implies C<PERL_PERTURB_KEYS=0> and any other value
implies C<PERL_PERTURB_KEYS=2>.
d1270 1
a1270 1
See L<perlsec/"Algorithmic Complexity Attacks"> and L</PERL_PERTURB_KEYS>
a1272 28
=item PERL_PERTURB_KEYS
X<PERL_PERTURB_KEYS>

(Since Perl 5.18.0)  Set to C<"0"> or C<"NO"> then traversing keys
will be repeatable from run to run for the same PERL_HASH_SEED.
Insertion into a hash will not change the order, except to provide
for more space in the hash. When combined with setting PERL_HASH_SEED
this mode is as close to pre 5.18 behavior as you can get.

When set to C<"1"> or C<"RANDOM"> then traversing keys will be randomized.
Every time a hash is inserted into the key order will change in a random
fashion. The order may not be repeatable in a following program run
even if the PERL_HASH_SEED has been specified. This is the default
mode for perl.

When set to C<"2"> or C<"DETERMINISTIC"> then inserting keys into a hash
will cause the key order to change, but in a way that is repeatable
from program run to program run.

B<NOTE:> Use of this option is considered insecure, and is intended only
for debugging non-deterministic behavior in Perl's hash function. Do
not use it in production.

See L<perlsec/"Algorithmic Complexity Attacks"> and L</PERL_HASH_SEED>
and L</PERL_HASH_SEED_DEBUG> for more information. You can get and set the
key traversal mask for a specific hash by using the C<hash_traversal_mask()>
function from L<Hash::Util>.

d1276 10
a1285 16
(Since Perl 5.8.1.)  Set to C<"1"> to display (to STDERR) information
about the hash function, seed, and what type of key traversal
randomization is in effect at the beginning of execution.  This, combined
with L</PERL_HASH_SEED> and L</PERL_PERTURB_KEYS> is intended to aid in
debugging nondeterministic behaviour caused by hash randomization.

B<Note> that any information about the hash function, especially the hash
seed is B<sensitive information>: by knowing it, one can craft a denial-of-service
attack against Perl code, even remotely; see L<perlsec/"Algorithmic Complexity Attacks">
for more information. B<Do not disclose the hash seed> to people who
don't need to know it. See also C<hash_seed()> and
C<key_traversal_mask()> in L<Hash::Util>.

An example output might be:

    HASH_FUNCTION = ONE_AT_A_TIME_HARD HASH_SEED = 0x652e9b9349a7a032 PERTURB_KEYS = 1 (RANDOM)
@


1.1.1.16
log
@Import perl-5.20.1
@
text
@a222 3
A C<--> signals the end of options and disables further option processing. Any
arguments after the C<--> are treated as filenames and arguments.

a267 2
B<-a> implicitly sets B<-n>.

d490 3
a492 5
specifies the pattern to split on for B<-a>. The pattern may be
surrounded by C<//>, C<"">, or C<''>, otherwise it will be put in single
quotes. You can't use literal whitespace in the pattern.

B<-F> implicitly sets both B<-a> and B<-n>.
d595 2
a596 3
For a discussion of issues surrounding file permissions and B<-i>, see
L<perlfaq5/Why does Perl let me delete read-only files?  Why does -i clobber
protected files?  Isn't this a bug in Perl?>.
d666 1
a666 2
removes the distinction between B<-m> and B<-M>; that is,
B<-mI<MODULE>=foo,bar> is the same as B<-MI<MODULE>=foo,bar>.
d741 3
a743 4
Do note that a switch like B<--help> creates the variable C<${-help}>, which is
not compliant with C<use strict "refs">.  Also, when using this option on a
script with warnings enabled you may get a lot of spurious "used only once"
warnings.
d913 1
a913 1
of warnings; see L<warnings>.
d919 1
a919 1
See L<warnings>.
d925 1
a925 1
See L<warnings>.
d1268 1
a1268 1
See L<perlsec/"Algorithmic Complexity Attacks">, L</PERL_PERTURB_KEYS>, and
@


