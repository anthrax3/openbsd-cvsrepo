head	1.20;
access;
symbols
	OPENBSD_6_1_BASE:1.20
	OPENBSD_6_0:1.19.0.4
	OPENBSD_6_0_BASE:1.19
	OPENBSD_5_9:1.18.0.2
	OPENBSD_5_9_BASE:1.18
	OPENBSD_5_8:1.18.0.4
	OPENBSD_5_8_BASE:1.18
	PERL_5_20_2:1.1.1.17
	OPENBSD_5_7:1.17.0.2
	OPENBSD_5_7_BASE:1.17
	PERL_5_20_1:1.1.1.16
	OPENBSD_5_6:1.16.0.4
	OPENBSD_5_6_BASE:1.16
	PERL_5_18_2:1.1.1.15
	PERL:1.1.1
	OPENBSD_5_5:1.15.0.6
	OPENBSD_5_5_BASE:1.15
	OPENBSD_5_4:1.15.0.2
	OPENBSD_5_4_BASE:1.15
	PERL_5_16_3:1.1.1.14
	OPENBSD_5_3:1.14.0.10
	OPENBSD_5_3_BASE:1.14
	OPENBSD_5_2:1.14.0.8
	OPENBSD_5_2_BASE:1.14
	OPENBSD_5_1_BASE:1.14
	OPENBSD_5_1:1.14.0.6
	OPENBSD_5_0:1.14.0.4
	OPENBSD_5_0_BASE:1.14
	OPENBSD_4_9:1.14.0.2
	OPENBSD_4_9_BASE:1.14
	PERL_5_12_2:1.1.1.13
	OPENBSD_4_8:1.13.0.4
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.13.0.2
	OPENBSD_4_7_BASE:1.13
	PERL_5_10_1:1.1.1.12
	OPENBSD_4_6:1.12.0.6
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.12.0.2
	OPENBSD_4_5_BASE:1.12
	PERL_5_10_0:1.1.1.11
	OPENBSD_4_4:1.11.0.10
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.8
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.11.0.6
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.11.0.4
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.11.0.2
	OPENBSD_4_0_BASE:1.11
	PERL_5_8_8:1.1.1.10
	OPENBSD_3_9:1.10.0.6
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.4
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.10.0.2
	OPENBSD_3_7_BASE:1.10
	PERL_5_8_6:1.1.1.9
	OPENBSD_3_6:1.9.0.2
	OPENBSD_3_6_BASE:1.9
	PERL_5_8_5:1.1.1.8
	PERL_5_8_3:1.1.1.7
	OPENBSD_3_5:1.7.0.2
	OPENBSD_3_5_BASE:1.7
	PERL_5_8_2:1.1.1.6
	OPENBSD_3_4:1.6.0.4
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.6.0.2
	OPENBSD_3_3_BASE:1.6
	PERL_5_8_0:1.1.1.5
	OPENBSD_3_2:1.5.0.6
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.4
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	PERL_5_6_1:1.1.1.4
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	PERL_5_6_0:1.1.1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	PERL_500503:1.1.1.2
	CPAN:1.1.1
	OPENBSD_2_5:1.2.0.6
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.4
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	perl5003:1.1.1.1
	lwall:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.20
date	2017.02.05.00.32.18;	author afresh1;	state Exp;
branches;
next	1.19;
commitid	cxJ08BvJA9Pt2PTM;

1.19
date	2016.07.03.01.08.03;	author afresh1;	state Exp;
branches;
next	1.18;
commitid	GzHqjSTnBjdF7Wcw;

1.18
date	2015.04.25.19.14.47;	author afresh1;	state Exp;
branches;
next	1.17;
commitid	XRK22kO4se3v2i2I;

1.17
date	2014.11.17.20.57.07;	author afresh1;	state Exp;
branches;
next	1.16;
commitid	QP75iYx42Uo7mMxO;

1.16
date	2014.03.24.15.05.33;	author afresh1;	state Exp;
branches;
next	1.15;

1.15
date	2013.03.25.20.40.59;	author sthen;	state Exp;
branches;
next	1.14;

1.14
date	2010.09.24.15.07.04;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	2009.10.12.18.24.47;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2008.09.29.17.36.16;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2006.03.28.19.23.10;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2005.01.15.21.30.36;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2004.08.09.18.10.15;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2004.04.07.21.33.08;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2003.12.03.03.02.45;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.10.27.22.25.33;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.24.18.35.56;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.06.17.07.31;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	99.04.29.22.52.14;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.11.30.07.59.16;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.08.19.10.13.01;	author downsj;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.08.19.10.13.01;	author downsj;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.04.29.22.40.48;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2000.04.06.16.10.26;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2001.05.24.18.24.39;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2002.10.27.22.15.05;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2003.12.03.02.44.22;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2004.04.07.21.13.33;	author millert;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2004.08.09.17.48.14;	author millert;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2005.01.15.21.17.55;	author millert;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	2006.03.28.18.49.21;	author millert;	state Exp;
branches;
next	1.1.1.11;

1.1.1.11
date	2008.09.29.17.18.52;	author millert;	state Exp;
branches;
next	1.1.1.12;

1.1.1.12
date	2009.10.12.18.10.39;	author millert;	state Exp;
branches;
next	1.1.1.13;

1.1.1.13
date	2010.09.24.14.49.07;	author millert;	state Exp;
branches;
next	1.1.1.14;

1.1.1.14
date	2013.03.25.20.09.20;	author sthen;	state Exp;
branches;
next	1.1.1.15;

1.1.1.15
date	2014.03.24.14.59.08;	author afresh1;	state Exp;
branches;
next	1.1.1.16;

1.1.1.16
date	2014.11.17.20.53.14;	author afresh1;	state Exp;
branches;
next	1.1.1.17;
commitid	B31cAbBIXiCqnL97;

1.1.1.17
date	2015.04.25.19.10.43;	author afresh1;	state Exp;
branches;
next	;
commitid	Wpcs5S8qILgEZC7F;


desc
@@


1.20
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@=head1 NAME

perlguts - Introduction to the Perl API

=head1 DESCRIPTION

This document attempts to describe how to use the Perl API, as well as
to provide some info on the basic workings of the Perl core.  It is far
from complete and probably contains many errors.  Please refer any
questions or comments to the author below.

=head1 Variables

=head2 Datatypes

Perl has three typedefs that handle Perl's three main data types:

    SV  Scalar Value
    AV  Array Value
    HV  Hash Value

Each typedef has specific routines that manipulate the various data types.

=head2 What is an "IV"?

Perl uses a special typedef IV which is a simple signed integer type that is
guaranteed to be large enough to hold a pointer (as well as an integer).
Additionally, there is the UV, which is simply an unsigned IV.

Perl also uses two special typedefs, I32 and I16, which will always be at
least 32-bits and 16-bits long, respectively.  (Again, there are U32 and U16,
as well.)  They will usually be exactly 32 and 16 bits long, but on Crays
they will both be 64 bits.

=head2 Working with SVs

An SV can be created and loaded with one command.  There are five types of
values that can be loaded: an integer value (IV), an unsigned integer
value (UV), a double (NV), a string (PV), and another scalar (SV).
("PV" stands for "Pointer Value".  You might think that it is misnamed
because it is described as pointing only to strings.  However, it is
possible to have it point to other things.  For example, it could point
to an array of UVs.  But,
using it for non-strings requires care, as the underlying assumption of
much of the internals is that PVs are just for strings.  Often, for
example, a trailing C<NUL> is tacked on automatically.  The non-string use
is documented only in this paragraph.)

The seven routines are:

    SV*  newSViv(IV);
    SV*  newSVuv(UV);
    SV*  newSVnv(double);
    SV*  newSVpv(const char*, STRLEN);
    SV*  newSVpvn(const char*, STRLEN);
    SV*  newSVpvf(const char*, ...);
    SV*  newSVsv(SV*);

C<STRLEN> is an integer type (Size_t, usually defined as size_t in
F<config.h>) guaranteed to be large enough to represent the size of
any string that perl can handle.

In the unlikely case of a SV requiring more complex initialization, you
can create an empty SV with newSV(len).  If C<len> is 0 an empty SV of
type NULL is returned, else an SV of type PV is returned with len + 1 (for
the C<NUL>) bytes of storage allocated, accessible via SvPVX.  In both cases
the SV has the undef value.

    SV *sv = newSV(0);   /* no storage allocated  */
    SV *sv = newSV(10);  /* 10 (+1) bytes of uninitialised storage
                          * allocated */

To change the value of an I<already-existing> SV, there are eight routines:

    void  sv_setiv(SV*, IV);
    void  sv_setuv(SV*, UV);
    void  sv_setnv(SV*, double);
    void  sv_setpv(SV*, const char*);
    void  sv_setpvn(SV*, const char*, STRLEN)
    void  sv_setpvf(SV*, const char*, ...);
    void  sv_vsetpvfn(SV*, const char*, STRLEN, va_list *,
                                                    SV **, I32, bool *);
    void  sv_setsv(SV*, SV*);

Notice that you can choose to specify the length of the string to be
assigned by using C<sv_setpvn>, C<newSVpvn>, or C<newSVpv>, or you may
allow Perl to calculate the length by using C<sv_setpv> or by specifying
0 as the second argument to C<newSVpv>.  Be warned, though, that Perl will
determine the string's length by using C<strlen>, which depends on the
string terminating with a C<NUL> character, and not otherwise containing
NULs.

The arguments of C<sv_setpvf> are processed like C<sprintf>, and the
formatted output becomes the value.

C<sv_vsetpvfn> is an analogue of C<vsprintf>, but it allows you to specify
either a pointer to a variable argument list or the address and length of
an array of SVs.  The last argument points to a boolean; on return, if that
boolean is true, then locale-specific information has been used to format
the string, and the string's contents are therefore untrustworthy (see
L<perlsec>).  This pointer may be NULL if that information is not
important.  Note that this function requires you to specify the length of
the format.

The C<sv_set*()> functions are not generic enough to operate on values
that have "magic".  See L<Magic Virtual Tables> later in this document.

All SVs that contain strings should be terminated with a C<NUL> character.
If it is not C<NUL>-terminated there is a risk of
core dumps and corruptions from code which passes the string to C
functions or system calls which expect a C<NUL>-terminated string.
Perl's own functions typically add a trailing C<NUL> for this reason.
Nevertheless, you should be very careful when you pass a string stored
in an SV to a C function or system call.

To access the actual value that an SV points to, you can use the macros:

    SvIV(SV*)
    SvUV(SV*)
    SvNV(SV*)
    SvPV(SV*, STRLEN len)
    SvPV_nolen(SV*)

which will automatically coerce the actual scalar type into an IV, UV, double,
or string.

In the C<SvPV> macro, the length of the string returned is placed into the
variable C<len> (this is a macro, so you do I<not> use C<&len>).  If you do
not care what the length of the data is, use the C<SvPV_nolen> macro.
Historically the C<SvPV> macro with the global variable C<PL_na> has been
used in this case.  But that can be quite inefficient because C<PL_na> must
be accessed in thread-local storage in threaded Perl.  In any case, remember
that Perl allows arbitrary strings of data that may both contain NULs and
might not be terminated by a C<NUL>.

Also remember that C doesn't allow you to safely say C<foo(SvPV(s, len),
len);>.  It might work with your
compiler, but it won't work for everyone.
Break this sort of statement up into separate assignments:

    SV *s;
    STRLEN len;
    char *ptr;
    ptr = SvPV(s, len);
    foo(ptr, len);

If you want to know if the scalar value is TRUE, you can use:

    SvTRUE(SV*)

Although Perl will automatically grow strings for you, if you need to force
Perl to allocate more memory for your SV, you can use the macro

    SvGROW(SV*, STRLEN newlen)

which will determine if more memory needs to be allocated.  If so, it will
call the function C<sv_grow>.  Note that C<SvGROW> can only increase, not
decrease, the allocated memory of an SV and that it does not automatically
add space for the trailing C<NUL> byte (perl's own string functions typically do
C<SvGROW(sv, len + 1)>).

If you want to write to an existing SV's buffer and set its value to a
string, use SvPV_force() or one of its variants to force the SV to be
a PV.  This will remove any of various types of non-stringness from
the SV while preserving the content of the SV in the PV.  This can be
used, for example, to append data from an API function to a buffer
without extra copying:

    (void)SvPVbyte_force(sv, len);
    s = SvGROW(sv, len + needlen + 1);
    /* something that modifies up to needlen bytes at s+len, but
       modifies newlen bytes
         eg. newlen = read(fd, s + len, needlen);
       ignoring errors for these examples
     */
    s[len + newlen] = '\0';
    SvCUR_set(sv, len + newlen);
    SvUTF8_off(sv);
    SvSETMAGIC(sv);

If you already have the data in memory or if you want to keep your
code simple, you can use one of the sv_cat*() variants, such as
sv_catpvn().  If you want to insert anywhere in the string you can use
sv_insert() or sv_insert_flags().

If you don't need the existing content of the SV, you can avoid some
copying with:

    sv_setpvn(sv, "", 0);
    s = SvGROW(sv, needlen + 1);
    /* something that modifies up to needlen bytes at s, but modifies
       newlen bytes
         eg. newlen = read(fd, s. needlen);
     */
    s[newlen] = '\0';
    SvCUR_set(sv, newlen);
    SvPOK_only(sv); /* also clears SVf_UTF8 */
    SvSETMAGIC(sv);

Again, if you already have the data in memory or want to avoid the
complexity of the above, you can use sv_setpvn().

If you have a buffer allocated with Newx() and want to set that as the
SV's value, you can use sv_usepvn_flags().  That has some requirements
if you want to avoid perl re-allocating the buffer to fit the trailing
NUL:

   Newx(buf, somesize+1, char);
   /* ... fill in buf ... */
   buf[somesize] = '\0';
   sv_usepvn_flags(sv, buf, somesize, SV_SMAGIC | SV_HAS_TRAILING_NUL);
   /* buf now belongs to perl, don't release it */

If you have an SV and want to know what kind of data Perl thinks is stored
in it, you can use the following macros to check the type of SV you have.

    SvIOK(SV*)
    SvNOK(SV*)
    SvPOK(SV*)

You can get and set the current length of the string stored in an SV with
the following macros:

    SvCUR(SV*)
    SvCUR_set(SV*, I32 val)

You can also get a pointer to the end of the string stored in the SV
with the macro:

    SvEND(SV*)

But note that these last three macros are valid only if C<SvPOK()> is true.

If you want to append something to the end of string stored in an C<SV*>,
you can use the following functions:

    void  sv_catpv(SV*, const char*);
    void  sv_catpvn(SV*, const char*, STRLEN);
    void  sv_catpvf(SV*, const char*, ...);
    void  sv_vcatpvfn(SV*, const char*, STRLEN, va_list *, SV **,
                                                             I32, bool);
    void  sv_catsv(SV*, SV*);

The first function calculates the length of the string to be appended by
using C<strlen>.  In the second, you specify the length of the string
yourself.  The third function processes its arguments like C<sprintf> and
appends the formatted output.  The fourth function works like C<vsprintf>.
You can specify the address and length of an array of SVs instead of the
va_list argument.  The fifth function
extends the string stored in the first
SV with the string stored in the second SV.  It also forces the second SV
to be interpreted as a string.

The C<sv_cat*()> functions are not generic enough to operate on values that
have "magic".  See L<Magic Virtual Tables> later in this document.

If you know the name of a scalar variable, you can get a pointer to its SV
by using the following:

    SV*  get_sv("package::varname", 0);

This returns NULL if the variable does not exist.

If you want to know if this variable (or any other SV) is actually C<defined>,
you can call:

    SvOK(SV*)

The scalar C<undef> value is stored in an SV instance called C<PL_sv_undef>.

Its address can be used whenever an C<SV*> is needed.  Make sure that
you don't try to compare a random sv with C<&PL_sv_undef>.  For example
when interfacing Perl code, it'll work correctly for:

  foo(undef);

But won't work when called as:

  $x = undef;
  foo($x);

So to repeat always use SvOK() to check whether an sv is defined.

Also you have to be careful when using C<&PL_sv_undef> as a value in
AVs or HVs (see L<AVs, HVs and undefined values>).

There are also the two values C<PL_sv_yes> and C<PL_sv_no>, which contain
boolean TRUE and FALSE values, respectively.  Like C<PL_sv_undef>, their
addresses can be used whenever an C<SV*> is needed.

Do not be fooled into thinking that C<(SV *) 0> is the same as C<&PL_sv_undef>.
Take this code:

    SV* sv = (SV*) 0;
    if (I-am-to-return-a-real-value) {
            sv = sv_2mortal(newSViv(42));
    }
    sv_setsv(ST(0), sv);

This code tries to return a new SV (which contains the value 42) if it should
return a real value, or undef otherwise.  Instead it has returned a NULL
pointer which, somewhere down the line, will cause a segmentation violation,
bus error, or just weird results.  Change the zero to C<&PL_sv_undef> in the
first line and all will be well.

To free an SV that you've created, call C<SvREFCNT_dec(SV*)>.  Normally this
call is not necessary (see L<Reference Counts and Mortality>).

=head2 Offsets

Perl provides the function C<sv_chop> to efficiently remove characters
from the beginning of a string; you give it an SV and a pointer to
somewhere inside the PV, and it discards everything before the
pointer.  The efficiency comes by means of a little hack: instead of
actually removing the characters, C<sv_chop> sets the flag C<OOK>
(offset OK) to signal to other functions that the offset hack is in
effect, and it moves the PV pointer (called C<SvPVX>) forward
by the number of bytes chopped off, and adjusts C<SvCUR> and C<SvLEN>
accordingly.  (A portion of the space between the old and new PV
pointers is used to store the count of chopped bytes.)

Hence, at this point, the start of the buffer that we allocated lives
at C<SvPVX(sv) - SvIV(sv)> in memory and the PV pointer is pointing
into the middle of this allocated storage.

This is best demonstrated by example.  Normally copy-on-write will prevent
the substitution from operator from using this hack, but if you can craft a
string for which copy-on-write is not possible, you can see it in play.  In
the current implementation, the final byte of a string buffer is used as a
copy-on-write reference count.  If the buffer is not big enough, then
copy-on-write is skipped.  First have a look at an empty string:

  % ./perl -Ilib -MDevel::Peek -le '$a=""; $a .= ""; Dump $a'
  SV = PV(0x7ffb7c008a70) at 0x7ffb7c030390
    REFCNT = 1
    FLAGS = (POK,pPOK)
    PV = 0x7ffb7bc05b50 ""\0
    CUR = 0
    LEN = 10

Notice here the LEN is 10.  (It may differ on your platform.)  Extend the
length of the string to one less than 10, and do a substitution:

 % ./perl -Ilib -MDevel::Peek -le '$a=""; $a.="123456789"; $a=~s/.//; \
                                                            Dump($a)'
 SV = PV(0x7ffa04008a70) at 0x7ffa04030390
   REFCNT = 1
   FLAGS = (POK,OOK,pPOK)
   OFFSET = 1
   PV = 0x7ffa03c05b61 ( "\1" . ) "23456789"\0
   CUR = 8
   LEN = 9

Here the number of bytes chopped off (1) is shown next as the OFFSET.  The
portion of the string between the "real" and the "fake" beginnings is
shown in parentheses, and the values of C<SvCUR> and C<SvLEN> reflect
the fake beginning, not the real one.  (The first character of the string
buffer happens to have changed to "\1" here, not "1", because the current
implementation stores the offset count in the string buffer.  This is
subject to change.)

Something similar to the offset hack is performed on AVs to enable
efficient shifting and splicing off the beginning of the array; while
C<AvARRAY> points to the first element in the array that is visible from
Perl, C<AvALLOC> points to the real start of the C array.  These are
usually the same, but a C<shift> operation can be carried out by
increasing C<AvARRAY> by one and decreasing C<AvFILL> and C<AvMAX>.
Again, the location of the real start of the C array only comes into
play when freeing the array.  See C<av_shift> in F<av.c>.

=head2 What's Really Stored in an SV?

Recall that the usual method of determining the type of scalar you have is
to use C<Sv*OK> macros.  Because a scalar can be both a number and a string,
usually these macros will always return TRUE and calling the C<Sv*V>
macros will do the appropriate conversion of string to integer/double or
integer/double to string.

If you I<really> need to know if you have an integer, double, or string
pointer in an SV, you can use the following three macros instead:

    SvIOKp(SV*)
    SvNOKp(SV*)
    SvPOKp(SV*)

These will tell you if you truly have an integer, double, or string pointer
stored in your SV.  The "p" stands for private.

There are various ways in which the private and public flags may differ.
For example, in perl 5.16 and earlier a tied SV may have a valid
underlying value in the IV slot (so SvIOKp is true), but the data
should be accessed via the FETCH routine rather than directly,
so SvIOK is false.  (In perl 5.18 onwards, tied scalars use
the flags the same way as untied scalars.)  Another is when
numeric conversion has occurred and precision has been lost: only the
private flag is set on 'lossy' values.  So when an NV is converted to an
IV with loss, SvIOKp, SvNOKp and SvNOK will be set, while SvIOK wont be.

In general, though, it's best to use the C<Sv*V> macros.

=head2 Working with AVs

There are two ways to create and load an AV.  The first method creates an
empty AV:

    AV*  newAV();

The second method both creates the AV and initially populates it with SVs:

    AV*  av_make(SSize_t num, SV **ptr);

The second argument points to an array containing C<num> C<SV*>'s.  Once the
AV has been created, the SVs can be destroyed, if so desired.

Once the AV has been created, the following operations are possible on it:

    void  av_push(AV*, SV*);
    SV*   av_pop(AV*);
    SV*   av_shift(AV*);
    void  av_unshift(AV*, SSize_t num);

These should be familiar operations, with the exception of C<av_unshift>.
This routine adds C<num> elements at the front of the array with the C<undef>
value.  You must then use C<av_store> (described below) to assign values
to these new elements.

Here are some other functions:

    SSize_t av_top_index(AV*);
    SV**    av_fetch(AV*, SSize_t key, I32 lval);
    SV**    av_store(AV*, SSize_t key, SV* val);

The C<av_top_index> function returns the highest index value in an array (just
like $#array in Perl).  If the array is empty, -1 is returned.  The
C<av_fetch> function returns the value at index C<key>, but if C<lval>
is non-zero, then C<av_fetch> will store an undef value at that index.
The C<av_store> function stores the value C<val> at index C<key>, and does
not increment the reference count of C<val>.  Thus the caller is responsible
for taking care of that, and if C<av_store> returns NULL, the caller will
have to decrement the reference count to avoid a memory leak.  Note that
C<av_fetch> and C<av_store> both return C<SV**>'s, not C<SV*>'s as their
return value.

A few more:

    void  av_clear(AV*);
    void  av_undef(AV*);
    void  av_extend(AV*, SSize_t key);

The C<av_clear> function deletes all the elements in the AV* array, but
does not actually delete the array itself.  The C<av_undef> function will
delete all the elements in the array plus the array itself.  The
C<av_extend> function extends the array so that it contains at least C<key+1>
elements.  If C<key+1> is less than the currently allocated length of the array,
then nothing is done.

If you know the name of an array variable, you can get a pointer to its AV
by using the following:

    AV*  get_av("package::varname", 0);

This returns NULL if the variable does not exist.

See L<Understanding the Magic of Tied Hashes and Arrays> for more
information on how to use the array access functions on tied arrays.

=head2 Working with HVs

To create an HV, you use the following routine:

    HV*  newHV();

Once the HV has been created, the following operations are possible on it:

    SV**  hv_store(HV*, const char* key, U32 klen, SV* val, U32 hash);
    SV**  hv_fetch(HV*, const char* key, U32 klen, I32 lval);

The C<klen> parameter is the length of the key being passed in (Note that
you cannot pass 0 in as a value of C<klen> to tell Perl to measure the
length of the key).  The C<val> argument contains the SV pointer to the
scalar being stored, and C<hash> is the precomputed hash value (zero if
you want C<hv_store> to calculate it for you).  The C<lval> parameter
indicates whether this fetch is actually a part of a store operation, in
which case a new undefined value will be added to the HV with the supplied
key and C<hv_fetch> will return as if the value had already existed.

Remember that C<hv_store> and C<hv_fetch> return C<SV**>'s and not just
C<SV*>.  To access the scalar value, you must first dereference the return
value.  However, you should check to make sure that the return value is
not NULL before dereferencing it.

The first of these two functions checks if a hash table entry exists, and the 
second deletes it.

    bool  hv_exists(HV*, const char* key, U32 klen);
    SV*   hv_delete(HV*, const char* key, U32 klen, I32 flags);

If C<flags> does not include the C<G_DISCARD> flag then C<hv_delete> will
create and return a mortal copy of the deleted value.

And more miscellaneous functions:

    void   hv_clear(HV*);
    void   hv_undef(HV*);

Like their AV counterparts, C<hv_clear> deletes all the entries in the hash
table but does not actually delete the hash table.  The C<hv_undef> deletes
both the entries and the hash table itself.

Perl keeps the actual data in a linked list of structures with a typedef of HE.
These contain the actual key and value pointers (plus extra administrative
overhead).  The key is a string pointer; the value is an C<SV*>.  However,
once you have an C<HE*>, to get the actual key and value, use the routines
specified below.

    I32    hv_iterinit(HV*);
            /* Prepares starting point to traverse hash table */
    HE*    hv_iternext(HV*);
            /* Get the next entry, and return a pointer to a
               structure that has both the key and value */
    char*  hv_iterkey(HE* entry, I32* retlen);
            /* Get the key from an HE structure and also return
               the length of the key string */
    SV*    hv_iterval(HV*, HE* entry);
            /* Return an SV pointer to the value of the HE
               structure */
    SV*    hv_iternextsv(HV*, char** key, I32* retlen);
            /* This convenience routine combines hv_iternext,
	       hv_iterkey, and hv_iterval.  The key and retlen
	       arguments are return values for the key and its
	       length.  The value is returned in the SV* argument */

If you know the name of a hash variable, you can get a pointer to its HV
by using the following:

    HV*  get_hv("package::varname", 0);

This returns NULL if the variable does not exist.

The hash algorithm is defined in the C<PERL_HASH> macro:

    PERL_HASH(hash, key, klen)

The exact implementation of this macro varies by architecture and version
of perl, and the return value may change per invocation, so the value
is only valid for the duration of a single perl process.

See L<Understanding the Magic of Tied Hashes and Arrays> for more
information on how to use the hash access functions on tied hashes.

=head2 Hash API Extensions

Beginning with version 5.004, the following functions are also supported:

    HE*     hv_fetch_ent  (HV* tb, SV* key, I32 lval, U32 hash);
    HE*     hv_store_ent  (HV* tb, SV* key, SV* val, U32 hash);

    bool    hv_exists_ent (HV* tb, SV* key, U32 hash);
    SV*     hv_delete_ent (HV* tb, SV* key, I32 flags, U32 hash);

    SV*     hv_iterkeysv  (HE* entry);

Note that these functions take C<SV*> keys, which simplifies writing
of extension code that deals with hash structures.  These functions
also allow passing of C<SV*> keys to C<tie> functions without forcing
you to stringify the keys (unlike the previous set of functions).

They also return and accept whole hash entries (C<HE*>), making their
use more efficient (since the hash number for a particular string
doesn't have to be recomputed every time).  See L<perlapi> for detailed
descriptions.

The following macros must always be used to access the contents of hash
entries.  Note that the arguments to these macros must be simple
variables, since they may get evaluated more than once.  See
L<perlapi> for detailed descriptions of these macros.

    HePV(HE* he, STRLEN len)
    HeVAL(HE* he)
    HeHASH(HE* he)
    HeSVKEY(HE* he)
    HeSVKEY_force(HE* he)
    HeSVKEY_set(HE* he, SV* sv)

These two lower level macros are defined, but must only be used when
dealing with keys that are not C<SV*>s:

    HeKEY(HE* he)
    HeKLEN(HE* he)

Note that both C<hv_store> and C<hv_store_ent> do not increment the
reference count of the stored C<val>, which is the caller's responsibility.
If these functions return a NULL value, the caller will usually have to
decrement the reference count of C<val> to avoid a memory leak.

=head2 AVs, HVs and undefined values

Sometimes you have to store undefined values in AVs or HVs.  Although
this may be a rare case, it can be tricky.  That's because you're
used to using C<&PL_sv_undef> if you need an undefined SV.

For example, intuition tells you that this XS code:

    AV *av = newAV();
    av_store( av, 0, &PL_sv_undef );

is equivalent to this Perl code:

    my @@av;
    $av[0] = undef;

Unfortunately, this isn't true.  In perl 5.18 and earlier, AVs use C<&PL_sv_undef> as a marker
for indicating that an array element has not yet been initialized.
Thus, C<exists $av[0]> would be true for the above Perl code, but
false for the array generated by the XS code.  In perl 5.20, storing
&PL_sv_undef will create a read-only element, because the scalar
&PL_sv_undef itself is stored, not a copy.

Similar problems can occur when storing C<&PL_sv_undef> in HVs:

    hv_store( hv, "key", 3, &PL_sv_undef, 0 );

This will indeed make the value C<undef>, but if you try to modify
the value of C<key>, you'll get the following error:

    Modification of non-creatable hash value attempted

In perl 5.8.0, C<&PL_sv_undef> was also used to mark placeholders
in restricted hashes.  This caused such hash entries not to appear
when iterating over the hash or when checking for the keys
with the C<hv_exists> function.

You can run into similar problems when you store C<&PL_sv_yes> or
C<&PL_sv_no> into AVs or HVs.  Trying to modify such elements
will give you the following error:

    Modification of a read-only value attempted

To make a long story short, you can use the special variables
C<&PL_sv_undef>, C<&PL_sv_yes> and C<&PL_sv_no> with AVs and
HVs, but you have to make sure you know what you're doing.

Generally, if you want to store an undefined value in an AV
or HV, you should not use C<&PL_sv_undef>, but rather create a
new undefined value using the C<newSV> function, for example:

    av_store( av, 42, newSV(0) );
    hv_store( hv, "foo", 3, newSV(0), 0 );

=head2 References

References are a special type of scalar that point to other data types
(including other references).

To create a reference, use either of the following functions:

    SV* newRV_inc((SV*) thing);
    SV* newRV_noinc((SV*) thing);

The C<thing> argument can be any of an C<SV*>, C<AV*>, or C<HV*>.  The
functions are identical except that C<newRV_inc> increments the reference
count of the C<thing>, while C<newRV_noinc> does not.  For historical
reasons, C<newRV> is a synonym for C<newRV_inc>.

Once you have a reference, you can use the following macro to dereference
the reference:

    SvRV(SV*)

then call the appropriate routines, casting the returned C<SV*> to either an
C<AV*> or C<HV*>, if required.

To determine if an SV is a reference, you can use the following macro:

    SvROK(SV*)

To discover what type of value the reference refers to, use the following
macro and then check the return value.

    SvTYPE(SvRV(SV*))

The most useful types that will be returned are:

    < SVt_PVAV  Scalar
    SVt_PVAV    Array
    SVt_PVHV    Hash
    SVt_PVCV    Code
    SVt_PVGV    Glob (possibly a file handle)

See L<perlapi/svtype> for more details.

=head2 Blessed References and Class Objects

References are also used to support object-oriented programming.  In perl's
OO lexicon, an object is simply a reference that has been blessed into a
package (or class).  Once blessed, the programmer may now use the reference
to access the various methods in the class.

A reference can be blessed into a package with the following function:

    SV* sv_bless(SV* sv, HV* stash);

The C<sv> argument must be a reference value.  The C<stash> argument
specifies which class the reference will belong to.  See
L<Stashes and Globs> for information on converting class names into stashes.

/* Still under construction */

The following function upgrades rv to reference if not already one.
Creates a new SV for rv to point to.  If C<classname> is non-null, the SV
is blessed into the specified class.  SV is returned.

	SV* newSVrv(SV* rv, const char* classname);

The following three functions copy integer, unsigned integer or double
into an SV whose reference is C<rv>.  SV is blessed if C<classname> is
non-null.

	SV* sv_setref_iv(SV* rv, const char* classname, IV iv);
	SV* sv_setref_uv(SV* rv, const char* classname, UV uv);
	SV* sv_setref_nv(SV* rv, const char* classname, NV iv);

The following function copies the pointer value (I<the address, not the
string!>) into an SV whose reference is rv.  SV is blessed if C<classname>
is non-null.

	SV* sv_setref_pv(SV* rv, const char* classname, void* pv);

The following function copies a string into an SV whose reference is C<rv>.
Set length to 0 to let Perl calculate the string length.  SV is blessed if
C<classname> is non-null.

    SV* sv_setref_pvn(SV* rv, const char* classname, char* pv,
                                                         STRLEN length);

The following function tests whether the SV is blessed into the specified
class.  It does not check inheritance relationships.

	int  sv_isa(SV* sv, const char* name);

The following function tests whether the SV is a reference to a blessed object.

	int  sv_isobject(SV* sv);

The following function tests whether the SV is derived from the specified
class.  SV can be either a reference to a blessed object or a string
containing a class name.  This is the function implementing the
C<UNIVERSAL::isa> functionality.

	bool sv_derived_from(SV* sv, const char* name);

To check if you've got an object derived from a specific class you have
to write:

	if (sv_isobject(sv) && sv_derived_from(sv, class)) { ... }

=head2 Creating New Variables

To create a new Perl variable with an undef value which can be accessed from
your Perl script, use the following routines, depending on the variable type.

    SV*  get_sv("package::varname", GV_ADD);
    AV*  get_av("package::varname", GV_ADD);
    HV*  get_hv("package::varname", GV_ADD);

Notice the use of GV_ADD as the second parameter.  The new variable can now
be set, using the routines appropriate to the data type.

There are additional macros whose values may be bitwise OR'ed with the
C<GV_ADD> argument to enable certain extra features.  Those bits are:

=over

=item GV_ADDMULTI

Marks the variable as multiply defined, thus preventing the:

  Name <varname> used only once: possible typo

warning.

=item GV_ADDWARN

Issues the warning:

  Had to create <varname> unexpectedly

if the variable did not exist before the function was called.

=back

If you do not specify a package name, the variable is created in the current
package.

=head2 Reference Counts and Mortality

Perl uses a reference count-driven garbage collection mechanism.  SVs,
AVs, or HVs (xV for short in the following) start their life with a
reference count of 1.  If the reference count of an xV ever drops to 0,
then it will be destroyed and its memory made available for reuse.

This normally doesn't happen at the Perl level unless a variable is
undef'ed or the last variable holding a reference to it is changed or
overwritten.  At the internal level, however, reference counts can be
manipulated with the following macros:

    int SvREFCNT(SV* sv);
    SV* SvREFCNT_inc(SV* sv);
    void SvREFCNT_dec(SV* sv);

However, there is one other function which manipulates the reference
count of its argument.  The C<newRV_inc> function, you will recall,
creates a reference to the specified argument.  As a side effect,
it increments the argument's reference count.  If this is not what
you want, use C<newRV_noinc> instead.

For example, imagine you want to return a reference from an XSUB function.
Inside the XSUB routine, you create an SV which initially has a reference
count of one.  Then you call C<newRV_inc>, passing it the just-created SV.
This returns the reference as a new SV, but the reference count of the
SV you passed to C<newRV_inc> has been incremented to two.  Now you
return the reference from the XSUB routine and forget about the SV.
But Perl hasn't!  Whenever the returned reference is destroyed, the
reference count of the original SV is decreased to one and nothing happens.
The SV will hang around without any way to access it until Perl itself
terminates.  This is a memory leak.

The correct procedure, then, is to use C<newRV_noinc> instead of
C<newRV_inc>.  Then, if and when the last reference is destroyed,
the reference count of the SV will go to zero and it will be destroyed,
stopping any memory leak.

There are some convenience functions available that can help with the
destruction of xVs.  These functions introduce the concept of "mortality".
An xV that is mortal has had its reference count marked to be decremented,
but not actually decremented, until "a short time later".  Generally the
term "short time later" means a single Perl statement, such as a call to
an XSUB function.  The actual determinant for when mortal xVs have their
reference count decremented depends on two macros, SAVETMPS and FREETMPS.
See L<perlcall> and L<perlxs> for more details on these macros.

"Mortalization" then is at its simplest a deferred C<SvREFCNT_dec>.
However, if you mortalize a variable twice, the reference count will
later be decremented twice.

"Mortal" SVs are mainly used for SVs that are placed on perl's stack.
For example an SV which is created just to pass a number to a called sub
is made mortal to have it cleaned up automatically when it's popped off
the stack.  Similarly, results returned by XSUBs (which are pushed on the
stack) are often made mortal.

To create a mortal variable, use the functions:

    SV*  sv_newmortal()
    SV*  sv_2mortal(SV*)
    SV*  sv_mortalcopy(SV*)

The first call creates a mortal SV (with no value), the second converts an existing
SV to a mortal SV (and thus defers a call to C<SvREFCNT_dec>), and the
third creates a mortal copy of an existing SV.
Because C<sv_newmortal> gives the new SV no value, it must normally be given one
via C<sv_setpv>, C<sv_setiv>, etc. :

    SV *tmp = sv_newmortal();
    sv_setiv(tmp, an_integer);

As that is multiple C statements it is quite common so see this idiom instead:

    SV *tmp = sv_2mortal(newSViv(an_integer));


You should be careful about creating mortal variables.  Strange things
can happen if you make the same value mortal within multiple contexts,
or if you make a variable mortal multiple
times.  Thinking of "Mortalization"
as deferred C<SvREFCNT_dec> should help to minimize such problems.
For example if you are passing an SV which you I<know> has a high enough REFCNT
to survive its use on the stack you need not do any mortalization.
If you are not sure then doing an C<SvREFCNT_inc> and C<sv_2mortal>, or
making a C<sv_mortalcopy> is safer.

The mortal routines are not just for SVs; AVs and HVs can be
made mortal by passing their address (type-casted to C<SV*>) to the
C<sv_2mortal> or C<sv_mortalcopy> routines.

=head2 Stashes and Globs

A B<stash> is a hash that contains all variables that are defined
within a package.  Each key of the stash is a symbol
name (shared by all the different types of objects that have the same
name), and each value in the hash table is a GV (Glob Value).  This GV
in turn contains references to the various objects of that name,
including (but not limited to) the following:

    Scalar Value
    Array Value
    Hash Value
    I/O Handle
    Format
    Subroutine

There is a single stash called C<PL_defstash> that holds the items that exist
in the C<main> package.  To get at the items in other packages, append the
string "::" to the package name.  The items in the C<Foo> package are in
the stash C<Foo::> in PL_defstash.  The items in the C<Bar::Baz> package are
in the stash C<Baz::> in C<Bar::>'s stash.

To get the stash pointer for a particular package, use the function:

    HV*  gv_stashpv(const char* name, I32 flags)
    HV*  gv_stashsv(SV*, I32 flags)

The first function takes a literal string, the second uses the string stored
in the SV.  Remember that a stash is just a hash table, so you get back an
C<HV*>.  The C<flags> flag will create a new package if it is set to GV_ADD.

The name that C<gv_stash*v> wants is the name of the package whose symbol table
you want.  The default package is called C<main>.  If you have multiply nested
packages, pass their names to C<gv_stash*v>, separated by C<::> as in the Perl
language itself.

Alternately, if you have an SV that is a blessed reference, you can find
out the stash pointer by using:

    HV*  SvSTASH(SvRV(SV*));

then use the following to get the package name itself:

    char*  HvNAME(HV* stash);

If you need to bless or re-bless an object you can use the following
function:

    SV*  sv_bless(SV*, HV* stash)

where the first argument, an C<SV*>, must be a reference, and the second
argument is a stash.  The returned C<SV*> can now be used in the same way
as any other SV.

For more information on references and blessings, consult L<perlref>.

=head2 Double-Typed SVs

Scalar variables normally contain only one type of value, an integer,
double, pointer, or reference.  Perl will automatically convert the
actual scalar data from the stored type into the requested type.

Some scalar variables contain more than one type of scalar data.  For
example, the variable C<$!> contains either the numeric value of C<errno>
or its string equivalent from either C<strerror> or C<sys_errlist[]>.

To force multiple data values into an SV, you must do two things: use the
C<sv_set*v> routines to add the additional scalar type, then set a flag
so that Perl will believe it contains more than one type of data.  The
four macros to set the flags are:

	SvIOK_on
	SvNOK_on
	SvPOK_on
	SvROK_on

The particular macro you must use depends on which C<sv_set*v> routine
you called first.  This is because every C<sv_set*v> routine turns on
only the bit for the particular type of data being set, and turns off
all the rest.

For example, to create a new Perl variable called "dberror" that contains
both the numeric and descriptive string error values, you could use the
following code:

    extern int  dberror;
    extern char *dberror_list;

    SV* sv = get_sv("dberror", GV_ADD);
    sv_setiv(sv, (IV) dberror);
    sv_setpv(sv, dberror_list[dberror]);
    SvIOK_on(sv);

If the order of C<sv_setiv> and C<sv_setpv> had been reversed, then the
macro C<SvPOK_on> would need to be called instead of C<SvIOK_on>.

=head2 Read-Only Values

In Perl 5.16 and earlier, copy-on-write (see the next section) shared a
flag bit with read-only scalars.  So the only way to test whether
C<sv_setsv>, etc., will raise a "Modification of a read-only value" error
in those versions is:

    SvREADONLY(sv) && !SvIsCOW(sv)

Under Perl 5.18 and later, SvREADONLY only applies to read-only variables,
and, under 5.20, copy-on-write scalars can also be read-only, so the above
check is incorrect.  You just want:

    SvREADONLY(sv)

If you need to do this check often, define your own macro like this:

    #if PERL_VERSION >= 18
    # define SvTRULYREADONLY(sv) SvREADONLY(sv)
    #else
    # define SvTRULYREADONLY(sv) (SvREADONLY(sv) && !SvIsCOW(sv))
    #endif

=head2 Copy on Write

Perl implements a copy-on-write (COW) mechanism for scalars, in which
string copies are not immediately made when requested, but are deferred
until made necessary by one or the other scalar changing.  This is mostly
transparent, but one must take care not to modify string buffers that are
shared by multiple SVs.

You can test whether an SV is using copy-on-write with C<SvIsCOW(sv)>.

You can force an SV to make its own copy of its string buffer by calling C<sv_force_normal(sv)> or SvPV_force_nolen(sv).

If you want to make the SV drop its string buffer, use
C<sv_force_normal_flags(sv, SV_COW_DROP_PV)> or simply
C<sv_setsv(sv, NULL)>.

All of these functions will croak on read-only scalars (see the previous
section for more on those).

To test that your code is behaving correctly and not modifying COW buffers,
on systems that support L<mmap(2)> (i.e., Unix) you can configure perl with
C<-Accflags=-DPERL_DEBUG_READONLY_COW> and it will turn buffer violations
into crashes.  You will find it to be marvellously slow, so you may want to
skip perl's own tests.

=head2 Magic Variables

[This section still under construction.  Ignore everything here.  Post no
bills.  Everything not permitted is forbidden.]

Any SV may be magical, that is, it has special features that a normal
SV does not have.  These features are stored in the SV structure in a
linked list of C<struct magic>'s, typedef'ed to C<MAGIC>.

    struct magic {
        MAGIC*      mg_moremagic;
        MGVTBL*     mg_virtual;
        U16         mg_private;
        char        mg_type;
        U8          mg_flags;
        I32         mg_len;
        SV*         mg_obj;
        char*       mg_ptr;
    };

Note this is current as of patchlevel 0, and could change at any time.

=head2 Assigning Magic

Perl adds magic to an SV using the sv_magic function:

  void sv_magic(SV* sv, SV* obj, int how, const char* name, I32 namlen);

The C<sv> argument is a pointer to the SV that is to acquire a new magical
feature.

If C<sv> is not already magical, Perl uses the C<SvUPGRADE> macro to
convert C<sv> to type C<SVt_PVMG>.
Perl then continues by adding new magic
to the beginning of the linked list of magical features.  Any prior entry
of the same type of magic is deleted.  Note that this can be overridden,
and multiple instances of the same type of magic can be associated with an
SV.

The C<name> and C<namlen> arguments are used to associate a string with
the magic, typically the name of a variable.  C<namlen> is stored in the
C<mg_len> field and if C<name> is non-null then either a C<savepvn> copy of
C<name> or C<name> itself is stored in the C<mg_ptr> field, depending on
whether C<namlen> is greater than zero or equal to zero respectively.  As a
special case, if C<(name && namlen == HEf_SVKEY)> then C<name> is assumed
to contain an C<SV*> and is stored as-is with its REFCNT incremented.

The sv_magic function uses C<how> to determine which, if any, predefined
"Magic Virtual Table" should be assigned to the C<mg_virtual> field.
See the L<Magic Virtual Tables> section below.  The C<how> argument is also
stored in the C<mg_type> field.  The value of
C<how> should be chosen from the set of macros
C<PERL_MAGIC_foo> found in F<perl.h>.  Note that before
these macros were added, Perl internals used to directly use character
literals, so you may occasionally come across old code or documentation
referring to 'U' magic rather than C<PERL_MAGIC_uvar> for example.

The C<obj> argument is stored in the C<mg_obj> field of the C<MAGIC>
structure.  If it is not the same as the C<sv> argument, the reference
count of the C<obj> object is incremented.  If it is the same, or if
the C<how> argument is C<PERL_MAGIC_arylen>, or if it is a NULL pointer,
then C<obj> is merely stored, without the reference count being incremented.

See also C<sv_magicext> in L<perlapi> for a more flexible way to add magic
to an SV.

There is also a function to add magic to an C<HV>:

    void hv_magic(HV *hv, GV *gv, int how);

This simply calls C<sv_magic> and coerces the C<gv> argument into an C<SV>.

To remove the magic from an SV, call the function sv_unmagic:

    int sv_unmagic(SV *sv, int type);

The C<type> argument should be equal to the C<how> value when the C<SV>
was initially made magical.

However, note that C<sv_unmagic> removes all magic of a certain C<type> from the
C<SV>.  If you want to remove only certain
magic of a C<type> based on the magic
virtual table, use C<sv_unmagicext> instead:

    int sv_unmagicext(SV *sv, int type, MGVTBL *vtbl);

=head2 Magic Virtual Tables

The C<mg_virtual> field in the C<MAGIC> structure is a pointer to an
C<MGVTBL>, which is a structure of function pointers and stands for
"Magic Virtual Table" to handle the various operations that might be
applied to that variable.

The C<MGVTBL> has five (or sometimes eight) pointers to the following
routine types:

    int  (*svt_get)(SV* sv, MAGIC* mg);
    int  (*svt_set)(SV* sv, MAGIC* mg);
    U32  (*svt_len)(SV* sv, MAGIC* mg);
    int  (*svt_clear)(SV* sv, MAGIC* mg);
    int  (*svt_free)(SV* sv, MAGIC* mg);

    int  (*svt_copy)(SV *sv, MAGIC* mg, SV *nsv,
                                          const char *name, I32 namlen);
    int  (*svt_dup)(MAGIC *mg, CLONE_PARAMS *param);
    int  (*svt_local)(SV *nsv, MAGIC *mg);


This MGVTBL structure is set at compile-time in F<perl.h> and there are
currently 32 types.  These different structures contain pointers to various
routines that perform additional actions depending on which function is
being called.

   Function pointer    Action taken
   ----------------    ------------
   svt_get             Do something before the value of the SV is
                       retrieved.
   svt_set             Do something after the SV is assigned a value.
   svt_len             Report on the SV's length.
   svt_clear           Clear something the SV represents.
   svt_free            Free any extra storage associated with the SV.

   svt_copy            copy tied variable magic to a tied element
   svt_dup             duplicate a magic structure during thread cloning
   svt_local           copy magic to local value during 'local'

For instance, the MGVTBL structure called C<vtbl_sv> (which corresponds
to an C<mg_type> of C<PERL_MAGIC_sv>) contains:

    { magic_get, magic_set, magic_len, 0, 0 }

Thus, when an SV is determined to be magical and of type C<PERL_MAGIC_sv>,
if a get operation is being performed, the routine C<magic_get> is
called.  All the various routines for the various magical types begin
with C<magic_>.  NOTE: the magic routines are not considered part of
the Perl API, and may not be exported by the Perl library.

The last three slots are a recent addition, and for source code
compatibility they are only checked for if one of the three flags
MGf_COPY, MGf_DUP or MGf_LOCAL is set in mg_flags.
This means that most code can continue declaring
a vtable as a 5-element value.  These three are
currently used exclusively by the threading code, and are highly subject
to change.

The current kinds of Magic Virtual Tables are:

=for comment
This table is generated by regen/mg_vtable.pl.  Any changes made here
will be lost.

=for mg_vtable.pl begin

 mg_type
 (old-style char and macro)   MGVTBL         Type of magic
 --------------------------   ------         -------------
 \0 PERL_MAGIC_sv             vtbl_sv        Special scalar variable
 #  PERL_MAGIC_arylen         vtbl_arylen    Array length ($#ary)
 %  PERL_MAGIC_rhash          (none)         Extra data for restricted
                                             hashes
 *  PERL_MAGIC_debugvar       vtbl_debugvar  $DB::single, signal, trace
                                             vars
 .  PERL_MAGIC_pos            vtbl_pos       pos() lvalue
 :  PERL_MAGIC_symtab         (none)         Extra data for symbol
                                             tables
 <  PERL_MAGIC_backref        vtbl_backref   For weak ref data
 @@  PERL_MAGIC_arylen_p       (none)         To move arylen out of XPVAV
 B  PERL_MAGIC_bm             vtbl_regexp    Boyer-Moore 
                                             (fast string search)
 c  PERL_MAGIC_overload_table vtbl_ovrld     Holds overload table 
                                             (AMT) on stash
 D  PERL_MAGIC_regdata        vtbl_regdata   Regex match position data 
                                             (@@+ and @@- vars)
 d  PERL_MAGIC_regdatum       vtbl_regdatum  Regex match position data
                                             element
 E  PERL_MAGIC_env            vtbl_env       %ENV hash
 e  PERL_MAGIC_envelem        vtbl_envelem   %ENV hash element
 f  PERL_MAGIC_fm             vtbl_regexp    Formline 
                                             ('compiled' format)
 g  PERL_MAGIC_regex_global   vtbl_mglob     m//g target
 H  PERL_MAGIC_hints          vtbl_hints     %^H hash
 h  PERL_MAGIC_hintselem      vtbl_hintselem %^H hash element
 I  PERL_MAGIC_isa            vtbl_isa       @@ISA array
 i  PERL_MAGIC_isaelem        vtbl_isaelem   @@ISA array element
 k  PERL_MAGIC_nkeys          vtbl_nkeys     scalar(keys()) lvalue
 L  PERL_MAGIC_dbfile         (none)         Debugger %_<filename
 l  PERL_MAGIC_dbline         vtbl_dbline    Debugger %_<filename
                                             element
 N  PERL_MAGIC_shared         (none)         Shared between threads
 n  PERL_MAGIC_shared_scalar  (none)         Shared between threads
 o  PERL_MAGIC_collxfrm       vtbl_collxfrm  Locale transformation
 P  PERL_MAGIC_tied           vtbl_pack      Tied array or hash
 p  PERL_MAGIC_tiedelem       vtbl_packelem  Tied array or hash element
 q  PERL_MAGIC_tiedscalar     vtbl_packelem  Tied scalar or handle
 r  PERL_MAGIC_qr             vtbl_regexp    Precompiled qr// regex
 S  PERL_MAGIC_sig            (none)         %SIG hash
 s  PERL_MAGIC_sigelem        vtbl_sigelem   %SIG hash element
 t  PERL_MAGIC_taint          vtbl_taint     Taintedness
 U  PERL_MAGIC_uvar           vtbl_uvar      Available for use by
                                             extensions
 u  PERL_MAGIC_uvar_elem      (none)         Reserved for use by
                                             extensions
 V  PERL_MAGIC_vstring        (none)         SV was vstring literal
 v  PERL_MAGIC_vec            vtbl_vec       vec() lvalue
 w  PERL_MAGIC_utf8           vtbl_utf8      Cached UTF-8 information
 x  PERL_MAGIC_substr         vtbl_substr    substr() lvalue
 y  PERL_MAGIC_defelem        vtbl_defelem   Shadow "foreach" iterator
                                             variable / smart parameter
                                             vivification
 \  PERL_MAGIC_lvref          vtbl_lvref     Lvalue reference
                                             constructor
 ]  PERL_MAGIC_checkcall      vtbl_checkcall Inlining/mutation of call
                                             to this CV
 ~  PERL_MAGIC_ext            (none)         Available for use by
                                             extensions

=for mg_vtable.pl end

When an uppercase and lowercase letter both exist in the table, then the
uppercase letter is typically used to represent some kind of composite type
(a list or a hash), and the lowercase letter is used to represent an element
of that composite type.  Some internals code makes use of this case
relationship.  However, 'v' and 'V' (vec and v-string) are in no way related.

The C<PERL_MAGIC_ext> and C<PERL_MAGIC_uvar> magic types are defined
specifically for use by extensions and will not be used by perl itself.
Extensions can use C<PERL_MAGIC_ext> magic to 'attach' private information
to variables (typically objects).  This is especially useful because
there is no way for normal perl code to corrupt this private information
(unlike using extra elements of a hash object).

Similarly, C<PERL_MAGIC_uvar> magic can be used much like tie() to call a
C function any time a scalar's value is used or changed.  The C<MAGIC>'s
C<mg_ptr> field points to a C<ufuncs> structure:

    struct ufuncs {
        I32 (*uf_val)(pTHX_ IV, SV*);
        I32 (*uf_set)(pTHX_ IV, SV*);
        IV uf_index;
    };

When the SV is read from or written to, the C<uf_val> or C<uf_set>
function will be called with C<uf_index> as the first arg and a pointer to
the SV as the second.  A simple example of how to add C<PERL_MAGIC_uvar>
magic is shown below.  Note that the ufuncs structure is copied by
sv_magic, so you can safely allocate it on the stack.

    void
    Umagic(sv)
        SV *sv;
    PREINIT:
        struct ufuncs uf;
    CODE:
        uf.uf_val   = &my_get_fn;
        uf.uf_set   = &my_set_fn;
        uf.uf_index = 0;
        sv_magic(sv, 0, PERL_MAGIC_uvar, (char*)&uf, sizeof(uf));

Attaching C<PERL_MAGIC_uvar> to arrays is permissible but has no effect.

For hashes there is a specialized hook that gives control over hash
keys (but not values).  This hook calls C<PERL_MAGIC_uvar> 'get' magic
if the "set" function in the C<ufuncs> structure is NULL.  The hook
is activated whenever the hash is accessed with a key specified as
an C<SV> through the functions C<hv_store_ent>, C<hv_fetch_ent>,
C<hv_delete_ent>, and C<hv_exists_ent>.  Accessing the key as a string
through the functions without the C<..._ent> suffix circumvents the
hook.  See L<Hash::Util::FieldHash/GUTS> for a detailed description.

Note that because multiple extensions may be using C<PERL_MAGIC_ext>
or C<PERL_MAGIC_uvar> magic, it is important for extensions to take
extra care to avoid conflict.  Typically only using the magic on
objects blessed into the same class as the extension is sufficient.
For C<PERL_MAGIC_ext> magic, it is usually a good idea to define an
C<MGVTBL>, even if all its fields will be C<0>, so that individual
C<MAGIC> pointers can be identified as a particular kind of magic
using their magic virtual table.  C<mg_findext> provides an easy way
to do that:

    STATIC MGVTBL my_vtbl = { 0, 0, 0, 0, 0, 0, 0, 0 };

    MAGIC *mg;
    if ((mg = mg_findext(sv, PERL_MAGIC_ext, &my_vtbl))) {
        /* this is really ours, not another module's PERL_MAGIC_ext */
        my_priv_data_t *priv = (my_priv_data_t *)mg->mg_ptr;
        ...
    }

Also note that the C<sv_set*()> and C<sv_cat*()> functions described
earlier do B<not> invoke 'set' magic on their targets.  This must
be done by the user either by calling the C<SvSETMAGIC()> macro after
calling these functions, or by using one of the C<sv_set*_mg()> or
C<sv_cat*_mg()> functions.  Similarly, generic C code must call the
C<SvGETMAGIC()> macro to invoke any 'get' magic if they use an SV
obtained from external sources in functions that don't handle magic.
See L<perlapi> for a description of these functions.
For example, calls to the C<sv_cat*()> functions typically need to be
followed by C<SvSETMAGIC()>, but they don't need a prior C<SvGETMAGIC()>
since their implementation handles 'get' magic.

=head2 Finding Magic

    MAGIC *mg_find(SV *sv, int type); /* Finds the magic pointer of that
                                       * type */

This routine returns a pointer to a C<MAGIC> structure stored in the SV.
If the SV does not have that magical
feature, C<NULL> is returned.  If the
SV has multiple instances of that magical feature, the first one will be
returned.  C<mg_findext> can be used
to find a C<MAGIC> structure of an SV
based on both its magic type and its magic virtual table:

    MAGIC *mg_findext(SV *sv, int type, MGVTBL *vtbl);

Also, if the SV passed to C<mg_find> or C<mg_findext> is not of type
SVt_PVMG, Perl may core dump.

    int mg_copy(SV* sv, SV* nsv, const char* key, STRLEN klen);

This routine checks to see what types of magic C<sv> has.  If the mg_type
field is an uppercase letter, then the mg_obj is copied to C<nsv>, but
the mg_type field is changed to be the lowercase letter.

=head2 Understanding the Magic of Tied Hashes and Arrays

Tied hashes and arrays are magical beasts of the C<PERL_MAGIC_tied>
magic type.

WARNING: As of the 5.004 release, proper usage of the array and hash
access functions requires understanding a few caveats.  Some
of these caveats are actually considered bugs in the API, to be fixed
in later releases, and are bracketed with [MAYCHANGE] below.  If
you find yourself actually applying such information in this section, be
aware that the behavior may change in the future, umm, without warning.

The perl tie function associates a variable with an object that implements
the various GET, SET, etc methods.  To perform the equivalent of the perl
tie function from an XSUB, you must mimic this behaviour.  The code below
carries out the necessary steps -- firstly it creates a new hash, and then
creates a second hash which it blesses into the class which will implement
the tie methods.  Lastly it ties the two hashes together, and returns a
reference to the new tied hash.  Note that the code below does NOT call the
TIEHASH method in the MyTie class -
see L<Calling Perl Routines from within C Programs> for details on how
to do this.

    SV*
    mytie()
    PREINIT:
        HV *hash;
        HV *stash;
        SV *tie;
    CODE:
        hash = newHV();
        tie = newRV_noinc((SV*)newHV());
        stash = gv_stashpv("MyTie", GV_ADD);
        sv_bless(tie, stash);
        hv_magic(hash, (GV*)tie, PERL_MAGIC_tied);
        RETVAL = newRV_noinc(hash);
    OUTPUT:
        RETVAL

The C<av_store> function, when given a tied array argument, merely
copies the magic of the array onto the value to be "stored", using
C<mg_copy>.  It may also return NULL, indicating that the value did not
actually need to be stored in the array.  [MAYCHANGE] After a call to
C<av_store> on a tied array, the caller will usually need to call
C<mg_set(val)> to actually invoke the perl level "STORE" method on the
TIEARRAY object.  If C<av_store> did return NULL, a call to
C<SvREFCNT_dec(val)> will also be usually necessary to avoid a memory
leak. [/MAYCHANGE]

The previous paragraph is applicable verbatim to tied hash access using the
C<hv_store> and C<hv_store_ent> functions as well.

C<av_fetch> and the corresponding hash functions C<hv_fetch> and
C<hv_fetch_ent> actually return an undefined mortal value whose magic
has been initialized using C<mg_copy>.  Note the value so returned does not
need to be deallocated, as it is already mortal.  [MAYCHANGE] But you will
need to call C<mg_get()> on the returned value in order to actually invoke
the perl level "FETCH" method on the underlying TIE object.  Similarly,
you may also call C<mg_set()> on the return value after possibly assigning
a suitable value to it using C<sv_setsv>,  which will invoke the "STORE"
method on the TIE object. [/MAYCHANGE]

[MAYCHANGE]
In other words, the array or hash fetch/store functions don't really
fetch and store actual values in the case of tied arrays and hashes.  They
merely call C<mg_copy> to attach magic to the values that were meant to be
"stored" or "fetched".  Later calls to C<mg_get> and C<mg_set> actually
do the job of invoking the TIE methods on the underlying objects.  Thus
the magic mechanism currently implements a kind of lazy access to arrays
and hashes.

Currently (as of perl version 5.004), use of the hash and array access
functions requires the user to be aware of whether they are operating on
"normal" hashes and arrays, or on their tied variants.  The API may be
changed to provide more transparent access to both tied and normal data
types in future versions.
[/MAYCHANGE]

You would do well to understand that the TIEARRAY and TIEHASH interfaces
are mere sugar to invoke some perl method calls while using the uniform hash
and array syntax.  The use of this sugar imposes some overhead (typically
about two to four extra opcodes per FETCH/STORE operation, in addition to
the creation of all the mortal variables required to invoke the methods).
This overhead will be comparatively small if the TIE methods are themselves
substantial, but if they are only a few statements long, the overhead
will not be insignificant.

=head2 Localizing changes

Perl has a very handy construction

  {
    local $var = 2;
    ...
  }

This construction is I<approximately> equivalent to

  {
    my $oldvar = $var;
    $var = 2;
    ...
    $var = $oldvar;
  }

The biggest difference is that the first construction would
reinstate the initial value of $var, irrespective of how control exits
the block: C<goto>, C<return>, C<die>/C<eval>, etc.  It is a little bit
more efficient as well.

There is a way to achieve a similar task from C via Perl API: create a
I<pseudo-block>, and arrange for some changes to be automatically
undone at the end of it, either explicit, or via a non-local exit (via
die()).  A I<block>-like construct is created by a pair of
C<ENTER>/C<LEAVE> macros (see L<perlcall/"Returning a Scalar">).
Such a construct may be created specially for some important localized
task, or an existing one (like boundaries of enclosing Perl
subroutine/block, or an existing pair for freeing TMPs) may be
used.  (In the second case the overhead of additional localization must
be almost negligible.)  Note that any XSUB is automatically enclosed in
an C<ENTER>/C<LEAVE> pair.

Inside such a I<pseudo-block> the following service is available:

=over 4

=item C<SAVEINT(int i)>

=item C<SAVEIV(IV i)>

=item C<SAVEI32(I32 i)>

=item C<SAVELONG(long i)>

These macros arrange things to restore the value of integer variable
C<i> at the end of enclosing I<pseudo-block>.

=item C<SAVESPTR(s)>

=item C<SAVEPPTR(p)>

These macros arrange things to restore the value of pointers C<s> and
C<p>.  C<s> must be a pointer of a type which survives conversion to
C<SV*> and back, C<p> should be able to survive conversion to C<char*>
and back.

=item C<SAVEFREESV(SV *sv)>

The refcount of C<sv> will be decremented at the end of
I<pseudo-block>.  This is similar to C<sv_2mortal> in that it is also a
mechanism for doing a delayed C<SvREFCNT_dec>.  However, while C<sv_2mortal>
extends the lifetime of C<sv> until the beginning of the next statement,
C<SAVEFREESV> extends it until the end of the enclosing scope.  These
lifetimes can be wildly different.

Also compare C<SAVEMORTALIZESV>.

=item C<SAVEMORTALIZESV(SV *sv)>

Just like C<SAVEFREESV>, but mortalizes C<sv> at the end of the current
scope instead of decrementing its reference count.  This usually has the
effect of keeping C<sv> alive until the statement that called the currently
live scope has finished executing.

=item C<SAVEFREEOP(OP *op)>

The C<OP *> is op_free()ed at the end of I<pseudo-block>.

=item C<SAVEFREEPV(p)>

The chunk of memory which is pointed to by C<p> is Safefree()ed at the
end of I<pseudo-block>.

=item C<SAVECLEARSV(SV *sv)>

Clears a slot in the current scratchpad which corresponds to C<sv> at
the end of I<pseudo-block>.

=item C<SAVEDELETE(HV *hv, char *key, I32 length)>

The key C<key> of C<hv> is deleted at the end of I<pseudo-block>.  The
string pointed to by C<key> is Safefree()ed.  If one has a I<key> in
short-lived storage, the corresponding string may be reallocated like
this:

  SAVEDELETE(PL_defstash, savepv(tmpbuf), strlen(tmpbuf));

=item C<SAVEDESTRUCTOR(DESTRUCTORFUNC_NOCONTEXT_t f, void *p)>

At the end of I<pseudo-block> the function C<f> is called with the
only argument C<p>.

=item C<SAVEDESTRUCTOR_X(DESTRUCTORFUNC_t f, void *p)>

At the end of I<pseudo-block> the function C<f> is called with the
implicit context argument (if any), and C<p>.

=item C<SAVESTACK_POS()>

The current offset on the Perl internal stack (cf. C<SP>) is restored
at the end of I<pseudo-block>.

=back

The following API list contains functions, thus one needs to
provide pointers to the modifiable data explicitly (either C pointers,
or Perlish C<GV *>s).  Where the above macros take C<int>, a similar
function takes C<int *>.

=over 4

=item C<SV* save_scalar(GV *gv)>

Equivalent to Perl code C<local $gv>.

=item C<AV* save_ary(GV *gv)>

=item C<HV* save_hash(GV *gv)>

Similar to C<save_scalar>, but localize C<@@gv> and C<%gv>.

=item C<void save_item(SV *item)>

Duplicates the current value of C<SV>, on the exit from the current
C<ENTER>/C<LEAVE> I<pseudo-block> will restore the value of C<SV>
using the stored value.  It doesn't handle magic.  Use C<save_scalar> if
magic is affected.

=item C<void save_list(SV **sarg, I32 maxsarg)>

A variant of C<save_item> which takes multiple arguments via an array
C<sarg> of C<SV*> of length C<maxsarg>.

=item C<SV* save_svref(SV **sptr)>

Similar to C<save_scalar>, but will reinstate an C<SV *>.

=item C<void save_aptr(AV **aptr)>

=item C<void save_hptr(HV **hptr)>

Similar to C<save_svref>, but localize C<AV *> and C<HV *>.

=back

The C<Alias> module implements localization of the basic types within the
I<caller's scope>.  People who are interested in how to localize things in
the containing scope should take a look there too.

=head1 Subroutines

=head2 XSUBs and the Argument Stack

The XSUB mechanism is a simple way for Perl programs to access C subroutines.
An XSUB routine will have a stack that contains the arguments from the Perl
program, and a way to map from the Perl data structures to a C equivalent.

The stack arguments are accessible through the C<ST(n)> macro, which returns
the C<n>'th stack argument.  Argument 0 is the first argument passed in the
Perl subroutine call.  These arguments are C<SV*>, and can be used anywhere
an C<SV*> is used.

Most of the time, output from the C routine can be handled through use of
the RETVAL and OUTPUT directives.  However, there are some cases where the
argument stack is not already long enough to handle all the return values.
An example is the POSIX tzname() call, which takes no arguments, but returns
two, the local time zone's standard and summer time abbreviations.

To handle this situation, the PPCODE directive is used and the stack is
extended using the macro:

    EXTEND(SP, num);

where C<SP> is the macro that represents the local copy of the stack pointer,
and C<num> is the number of elements the stack should be extended by.

Now that there is room on the stack, values can be pushed on it using C<PUSHs>
macro.  The pushed values will often need to be "mortal" (See
L</Reference Counts and Mortality>):

    PUSHs(sv_2mortal(newSViv(an_integer)))
    PUSHs(sv_2mortal(newSVuv(an_unsigned_integer)))
    PUSHs(sv_2mortal(newSVnv(a_double)))
    PUSHs(sv_2mortal(newSVpv("Some String",0)))
    /* Although the last example is better written as the more
     * efficient: */
    PUSHs(newSVpvs_flags("Some String", SVs_TEMP))

And now the Perl program calling C<tzname>, the two values will be assigned
as in:

    ($standard_abbrev, $summer_abbrev) = POSIX::tzname;

An alternate (and possibly simpler) method to pushing values on the stack is
to use the macro:

    XPUSHs(SV*)

This macro automatically adjusts the stack for you, if needed.  Thus, you
do not need to call C<EXTEND> to extend the stack.

Despite their suggestions in earlier versions of this document the macros
C<(X)PUSH[iunp]> are I<not> suited to XSUBs which return multiple results.
For that, either stick to the C<(X)PUSHs> macros shown above, or use the new
C<m(X)PUSH[iunp]> macros instead; see L</Putting a C value on Perl stack>.

For more information, consult L<perlxs> and L<perlxstut>.

=head2 Autoloading with XSUBs

If an AUTOLOAD routine is an XSUB, as with Perl subroutines, Perl puts the
fully-qualified name of the autoloaded subroutine in the $AUTOLOAD variable
of the XSUB's package.

But it also puts the same information in certain fields of the XSUB itself:

    HV *stash           = CvSTASH(cv);
    const char *subname = SvPVX(cv);
    STRLEN name_length  = SvCUR(cv); /* in bytes */
    U32 is_utf8         = SvUTF8(cv);

C<SvPVX(cv)> contains just the sub name itself, not including the package.
For an AUTOLOAD routine in UNIVERSAL or one of its superclasses,
C<CvSTASH(cv)> returns NULL during a method call on a nonexistent package.

B<Note>: Setting $AUTOLOAD stopped working in 5.6.1, which did not support
XS AUTOLOAD subs at all.  Perl 5.8.0 introduced the use of fields in the
XSUB itself.  Perl 5.16.0 restored the setting of $AUTOLOAD.  If you need
to support 5.8-5.14, use the XSUB's fields.

=head2 Calling Perl Routines from within C Programs

There are four routines that can be used to call a Perl subroutine from
within a C program.  These four are:

    I32  call_sv(SV*, I32);
    I32  call_pv(const char*, I32);
    I32  call_method(const char*, I32);
    I32  call_argv(const char*, I32, char**);

The routine most often used is C<call_sv>.  The C<SV*> argument
contains either the name of the Perl subroutine to be called, or a
reference to the subroutine.  The second argument consists of flags
that control the context in which the subroutine is called, whether
or not the subroutine is being passed arguments, how errors should be
trapped, and how to treat return values.

All four routines return the number of arguments that the subroutine returned
on the Perl stack.

These routines used to be called C<perl_call_sv>, etc., before Perl v5.6.0,
but those names are now deprecated; macros of the same name are provided for
compatibility.

When using any of these routines (except C<call_argv>), the programmer
must manipulate the Perl stack.  These include the following macros and
functions:

    dSP
    SP
    PUSHMARK()
    PUTBACK
    SPAGAIN
    ENTER
    SAVETMPS
    FREETMPS
    LEAVE
    XPUSH*()
    POP*()

For a detailed description of calling conventions from C to Perl,
consult L<perlcall>.

=head2 Putting a C value on Perl stack

A lot of opcodes (this is an elementary operation in the internal perl
stack machine) put an SV* on the stack.  However, as an optimization
the corresponding SV is (usually) not recreated each time.  The opcodes
reuse specially assigned SVs (I<target>s) which are (as a corollary)
not constantly freed/created.

Each of the targets is created only once (but see
L<Scratchpads and recursion> below), and when an opcode needs to put
an integer, a double, or a string on stack, it just sets the
corresponding parts of its I<target> and puts the I<target> on stack.

The macro to put this target on stack is C<PUSHTARG>, and it is
directly used in some opcodes, as well as indirectly in zillions of
others, which use it via C<(X)PUSH[iunp]>.

Because the target is reused, you must be careful when pushing multiple
values on the stack.  The following code will not do what you think:

    XPUSHi(10);
    XPUSHi(20);

This translates as "set C<TARG> to 10, push a pointer to C<TARG> onto
the stack; set C<TARG> to 20, push a pointer to C<TARG> onto the stack".
At the end of the operation, the stack does not contain the values 10
and 20, but actually contains two pointers to C<TARG>, which we have set
to 20.

If you need to push multiple different values then you should either use
the C<(X)PUSHs> macros, or else use the new C<m(X)PUSH[iunp]> macros,
none of which make use of C<TARG>.  The C<(X)PUSHs> macros simply push an
SV* on the stack, which, as noted under L</XSUBs and the Argument Stack>,
will often need to be "mortal".  The new C<m(X)PUSH[iunp]> macros make
this a little easier to achieve by creating a new mortal for you (via
C<(X)PUSHmortal>), pushing that onto the stack (extending it if necessary
in the case of the C<mXPUSH[iunp]> macros), and then setting its value.
Thus, instead of writing this to "fix" the example above:

    XPUSHs(sv_2mortal(newSViv(10)))
    XPUSHs(sv_2mortal(newSViv(20)))

you can simply write:

    mXPUSHi(10)
    mXPUSHi(20)

On a related note, if you do use C<(X)PUSH[iunp]>, then you're going to
need a C<dTARG> in your variable declarations so that the C<*PUSH*>
macros can make use of the local variable C<TARG>.  See also C<dTARGET>
and C<dXSTARG>.

=head2 Scratchpads

The question remains on when the SVs which are I<target>s for opcodes
are created.  The answer is that they are created when the current
unit--a subroutine or a file (for opcodes for statements outside of
subroutines)--is compiled.  During this time a special anonymous Perl
array is created, which is called a scratchpad for the current unit.

A scratchpad keeps SVs which are lexicals for the current unit and are
targets for opcodes.  A previous version of this document
stated that one can deduce that an SV lives on a scratchpad
by looking on its flags: lexicals have C<SVs_PADMY> set, and
I<target>s have C<SVs_PADTMP> set.  But this has never been fully true.
C<SVs_PADMY> could be set on a variable that no longer resides in any pad.
While I<target>s do have C<SVs_PADTMP> set, it can also be set on variables
that have never resided in a pad, but nonetheless act like I<target>s.  As
of perl 5.21.5, the C<SVs_PADMY> flag is no longer used and is defined as
0.  C<SvPADMY()> now returns true for anything without C<SVs_PADTMP>.

The correspondence between OPs and I<target>s is not 1-to-1.  Different
OPs in the compile tree of the unit can use the same target, if this
would not conflict with the expected life of the temporary.

=head2 Scratchpads and recursion

In fact it is not 100% true that a compiled unit contains a pointer to
the scratchpad AV.  In fact it contains a pointer to an AV of
(initially) one element, and this element is the scratchpad AV.  Why do
we need an extra level of indirection?

The answer is B<recursion>, and maybe B<threads>.  Both
these can create several execution pointers going into the same
subroutine.  For the subroutine-child not write over the temporaries
for the subroutine-parent (lifespan of which covers the call to the
child), the parent and the child should have different
scratchpads.  (I<And> the lexicals should be separate anyway!)

So each subroutine is born with an array of scratchpads (of length 1).
On each entry to the subroutine it is checked that the current
depth of the recursion is not more than the length of this array, and
if it is, new scratchpad is created and pushed into the array.

The I<target>s on this scratchpad are C<undef>s, but they are already
marked with correct flags.

=head1 Memory Allocation

=head2 Allocation

All memory meant to be used with the Perl API functions should be manipulated
using the macros described in this section.  The macros provide the necessary
transparency between differences in the actual malloc implementation that is
used within perl.

It is suggested that you enable the version of malloc that is distributed
with Perl.  It keeps pools of various sizes of unallocated memory in
order to satisfy allocation requests more quickly.  However, on some
platforms, it may cause spurious malloc or free errors.

The following three macros are used to initially allocate memory :

    Newx(pointer, number, type);
    Newxc(pointer, number, type, cast);
    Newxz(pointer, number, type);

The first argument C<pointer> should be the name of a variable that will
point to the newly allocated memory.

The second and third arguments C<number> and C<type> specify how many of
the specified type of data structure should be allocated.  The argument
C<type> is passed to C<sizeof>.  The final argument to C<Newxc>, C<cast>,
should be used if the C<pointer> argument is different from the C<type>
argument.

Unlike the C<Newx> and C<Newxc> macros, the C<Newxz> macro calls C<memzero>
to zero out all the newly allocated memory.

=head2 Reallocation

    Renew(pointer, number, type);
    Renewc(pointer, number, type, cast);
    Safefree(pointer)

These three macros are used to change a memory buffer size or to free a
piece of memory no longer needed.  The arguments to C<Renew> and C<Renewc>
match those of C<New> and C<Newc> with the exception of not needing the
"magic cookie" argument.

=head2 Moving

    Move(source, dest, number, type);
    Copy(source, dest, number, type);
    Zero(dest, number, type);

These three macros are used to move, copy, or zero out previously allocated
memory.  The C<source> and C<dest> arguments point to the source and
destination starting points.  Perl will move, copy, or zero out C<number>
instances of the size of the C<type> data structure (using the C<sizeof>
function).

=head1 PerlIO

The most recent development releases of Perl have been experimenting with
removing Perl's dependency on the "normal" standard I/O suite and allowing
other stdio implementations to be used.  This involves creating a new
abstraction layer that then calls whichever implementation of stdio Perl
was compiled with.  All XSUBs should now use the functions in the PerlIO
abstraction layer and not make any assumptions about what kind of stdio
is being used.

For a complete description of the PerlIO abstraction, consult L<perlapio>.

=head1 Compiled code

=head2 Code tree

Here we describe the internal form your code is converted to by
Perl.  Start with a simple example:

  $a = $b + $c;

This is converted to a tree similar to this one:

             assign-to
           /           \
          +             $a
        /   \
      $b     $c

(but slightly more complicated).  This tree reflects the way Perl
parsed your code, but has nothing to do with the execution order.
There is an additional "thread" going through the nodes of the tree
which shows the order of execution of the nodes.  In our simplified
example above it looks like:

     $b ---> $c ---> + ---> $a ---> assign-to

But with the actual compile tree for C<$a = $b + $c> it is different:
some nodes I<optimized away>.  As a corollary, though the actual tree
contains more nodes than our simplified example, the execution order
is the same as in our example.

=head2 Examining the tree

If you have your perl compiled for debugging (usually done with
C<-DDEBUGGING> on the C<Configure> command line), you may examine the
compiled tree by specifying C<-Dx> on the Perl command line.  The
output takes several lines per node, and for C<$b+$c> it looks like
this:

    5           TYPE = add  ===> 6
                TARG = 1
                FLAGS = (SCALAR,KIDS)
                {
                    TYPE = null  ===> (4)
                      (was rv2sv)
                    FLAGS = (SCALAR,KIDS)
                    {
    3                   TYPE = gvsv  ===> 4
                        FLAGS = (SCALAR)
                        GV = main::b
                    }
                }
                {
                    TYPE = null  ===> (5)
                      (was rv2sv)
                    FLAGS = (SCALAR,KIDS)
                    {
    4                   TYPE = gvsv  ===> 5
                        FLAGS = (SCALAR)
                        GV = main::c
                    }
                }

This tree has 5 nodes (one per C<TYPE> specifier), only 3 of them are
not optimized away (one per number in the left column).  The immediate
children of the given node correspond to C<{}> pairs on the same level
of indentation, thus this listing corresponds to the tree:

                   add
                 /     \
               null    null
                |       |
               gvsv    gvsv

The execution order is indicated by C<===E<gt>> marks, thus it is C<3
4 5 6> (node C<6> is not included into above listing), i.e.,
C<gvsv gvsv add whatever>.

Each of these nodes represents an op, a fundamental operation inside the
Perl core.  The code which implements each operation can be found in the
F<pp*.c> files; the function which implements the op with type C<gvsv>
is C<pp_gvsv>, and so on.  As the tree above shows, different ops have
different numbers of children: C<add> is a binary operator, as one would
expect, and so has two children.  To accommodate the various different
numbers of children, there are various types of op data structure, and
they link together in different ways.

The simplest type of op structure is C<OP>: this has no children.  Unary
operators, C<UNOP>s, have one child, and this is pointed to by the
C<op_first> field.  Binary operators (C<BINOP>s) have not only an
C<op_first> field but also an C<op_last> field.  The most complex type of
op is a C<LISTOP>, which has any number of children.  In this case, the
first child is pointed to by C<op_first> and the last child by
C<op_last>.  The children in between can be found by iteratively
following the C<OpSIBLING> pointer from the first child to the last (but
see below).

There are also some other op types: a C<PMOP> holds a regular expression,
and has no children, and a C<LOOP> may or may not have children.  If the
C<op_children> field is non-zero, it behaves like a C<LISTOP>.  To
complicate matters, if a C<UNOP> is actually a C<null> op after
optimization (see L</Compile pass 2: context propagation>) it will still
have children in accordance with its former type.

Finally, there is a C<LOGOP>, or logic op. Like a C<LISTOP>, this has one
or more children, but it doesn't have an C<op_last> field: so you have to
follow C<op_first> and then the C<OpSIBLING> chain itself to find the
last child. Instead it has an C<op_other> field, which is comparable to
the C<op_next> field described below, and represents an alternate
execution path. Operators like C<and>, C<or> and C<?> are C<LOGOP>s. Note
that in general, C<op_other> may not point to any of the direct children
of the C<LOGOP>.

Starting in version 5.21.2, perls built with the experimental
define C<-DPERL_OP_PARENT> add an extra boolean flag for each op,
C<op_moresib>.  When not set, this indicates that this is the last op in an
C<OpSIBLING> chain. This frees up the C<op_sibling> field on the last
sibling to point back to the parent op. Under this build, that field is
also renamed C<op_sibparent> to reflect its joint role. The macro
C<OpSIBLING(o)> wraps this special behaviour, and always returns NULL on
the last sibling.  With this build the C<op_parent(o)> function can be
used to find the parent of any op. Thus for forward compatibility, you
should always use the C<OpSIBLING(o)> macro rather than accessing
C<op_sibling> directly.

Another way to examine the tree is to use a compiler back-end module, such
as L<B::Concise>.

=head2 Compile pass 1: check routines

The tree is created by the compiler while I<yacc> code feeds it
the constructions it recognizes.  Since I<yacc> works bottom-up, so does
the first pass of perl compilation.

What makes this pass interesting for perl developers is that some
optimization may be performed on this pass.  This is optimization by
so-called "check routines".  The correspondence between node names
and corresponding check routines is described in F<opcode.pl> (do not
forget to run C<make regen_headers> if you modify this file).

A check routine is called when the node is fully constructed except
for the execution-order thread.  Since at this time there are no
back-links to the currently constructed node, one can do most any
operation to the top-level node, including freeing it and/or creating
new nodes above/below it.

The check routine returns the node which should be inserted into the
tree (if the top-level node was not modified, check routine returns
its argument).

By convention, check routines have names C<ck_*>.  They are usually
called from C<new*OP> subroutines (or C<convert>) (which in turn are
called from F<perly.y>).

=head2 Compile pass 1a: constant folding

Immediately after the check routine is called the returned node is
checked for being compile-time executable.  If it is (the value is
judged to be constant) it is immediately executed, and a I<constant>
node with the "return value" of the corresponding subtree is
substituted instead.  The subtree is deleted.

If constant folding was not performed, the execution-order thread is
created.

=head2 Compile pass 2: context propagation

When a context for a part of compile tree is known, it is propagated
down through the tree.  At this time the context can have 5 values
(instead of 2 for runtime context): void, boolean, scalar, list, and
lvalue.  In contrast with the pass 1 this pass is processed from top
to bottom: a node's context determines the context for its children.

Additional context-dependent optimizations are performed at this time.
Since at this moment the compile tree contains back-references (via
"thread" pointers), nodes cannot be free()d now.  To allow
optimized-away nodes at this stage, such nodes are null()ified instead
of free()ing (i.e. their type is changed to OP_NULL).

=head2 Compile pass 3: peephole optimization

After the compile tree for a subroutine (or for an C<eval> or a file)
is created, an additional pass over the code is performed.  This pass
is neither top-down or bottom-up, but in the execution order (with
additional complications for conditionals).  Optimizations performed
at this stage are subject to the same restrictions as in the pass 2.

Peephole optimizations are done by calling the function pointed to
by the global variable C<PL_peepp>.  By default, C<PL_peepp> just
calls the function pointed to by the global variable C<PL_rpeepp>.
By default, that performs some basic op fixups and optimisations along
the execution-order op chain, and recursively calls C<PL_rpeepp> for
each side chain of ops (resulting from conditionals).  Extensions may
provide additional optimisations or fixups, hooking into either the
per-subroutine or recursive stage, like this:

    static peep_t prev_peepp;
    static void my_peep(pTHX_ OP *o)
    {
        /* custom per-subroutine optimisation goes here */
        prev_peepp(aTHX_ o);
        /* custom per-subroutine optimisation may also go here */
    }
    BOOT:
        prev_peepp = PL_peepp;
        PL_peepp = my_peep;

    static peep_t prev_rpeepp;
    static void my_rpeep(pTHX_ OP *o)
    {
        OP *orig_o = o;
        for(; o; o = o->op_next) {
            /* custom per-op optimisation goes here */
        }
        prev_rpeepp(aTHX_ orig_o);
    }
    BOOT:
        prev_rpeepp = PL_rpeepp;
        PL_rpeepp = my_rpeep;

=head2 Pluggable runops

The compile tree is executed in a runops function.  There are two runops
functions, in F<run.c> and in F<dump.c>.  C<Perl_runops_debug> is used
with DEBUGGING and C<Perl_runops_standard> is used otherwise.  For fine
control over the execution of the compile tree it is possible to provide
your own runops function.

It's probably best to copy one of the existing runops functions and
change it to suit your needs.  Then, in the BOOT section of your XS
file, add the line:

  PL_runops = my_runops;

This function should be as efficient as possible to keep your programs
running as fast as possible.

=head2 Compile-time scope hooks

As of perl 5.14 it is possible to hook into the compile-time lexical
scope mechanism using C<Perl_blockhook_register>.  This is used like
this:

    STATIC void my_start_hook(pTHX_ int full);
    STATIC BHK my_hooks;

    BOOT:
        BhkENTRY_set(&my_hooks, bhk_start, my_start_hook);
        Perl_blockhook_register(aTHX_ &my_hooks);

This will arrange to have C<my_start_hook> called at the start of
compiling every lexical scope.  The available hooks are:

=over 4

=item C<void bhk_start(pTHX_ int full)>

This is called just after starting a new lexical scope.  Note that Perl
code like

    if ($x) { ... }

creates two scopes: the first starts at the C<(> and has C<full == 1>,
the second starts at the C<{> and has C<full == 0>.  Both end at the
C<}>, so calls to C<start> and C<pre>/C<post_end> will match.  Anything
pushed onto the save stack by this hook will be popped just before the
scope ends (between the C<pre_> and C<post_end> hooks, in fact).

=item C<void bhk_pre_end(pTHX_ OP **o)>

This is called at the end of a lexical scope, just before unwinding the
stack.  I<o> is the root of the optree representing the scope; it is a
double pointer so you can replace the OP if you need to.

=item C<void bhk_post_end(pTHX_ OP **o)>

This is called at the end of a lexical scope, just after unwinding the
stack.  I<o> is as above.  Note that it is possible for calls to C<pre_>
and C<post_end> to nest, if there is something on the save stack that
calls string eval.

=item C<void bhk_eval(pTHX_ OP *const o)>

This is called just before starting to compile an C<eval STRING>, C<do
FILE>, C<require> or C<use>, after the eval has been set up.  I<o> is the
OP that requested the eval, and will normally be an C<OP_ENTEREVAL>,
C<OP_DOFILE> or C<OP_REQUIRE>.

=back

Once you have your hook functions, you need a C<BHK> structure to put
them in.  It's best to allocate it statically, since there is no way to
free it once it's registered.  The function pointers should be inserted
into this structure using the C<BhkENTRY_set> macro, which will also set
flags indicating which entries are valid.  If you do need to allocate
your C<BHK> dynamically for some reason, be sure to zero it before you
start.

Once registered, there is no mechanism to switch these hooks off, so if
that is necessary you will need to do this yourself.  An entry in C<%^H>
is probably the best way, so the effect is lexically scoped; however it
is also possible to use the C<BhkDISABLE> and C<BhkENABLE> macros to
temporarily switch entries on and off.  You should also be aware that
generally speaking at least one scope will have opened before your
extension is loaded, so you will see some C<pre>/C<post_end> pairs that
didn't have a matching C<start>.

=head1 Examining internal data structures with the C<dump> functions

To aid debugging, the source file F<dump.c> contains a number of
functions which produce formatted output of internal data structures.

The most commonly used of these functions is C<Perl_sv_dump>; it's used
for dumping SVs, AVs, HVs, and CVs.  The C<Devel::Peek> module calls
C<sv_dump> to produce debugging output from Perl-space, so users of that
module should already be familiar with its format.

C<Perl_op_dump> can be used to dump an C<OP> structure or any of its
derivatives, and produces output similar to C<perl -Dx>; in fact,
C<Perl_dump_eval> will dump the main root of the code being evaluated,
exactly like C<-Dx>.

Other useful functions are C<Perl_dump_sub>, which turns a C<GV> into an
op tree, C<Perl_dump_packsubs> which calls C<Perl_dump_sub> on all the
subroutines in a package like so: (Thankfully, these are all xsubs, so
there is no op tree)

    (gdb) print Perl_dump_packsubs(PL_defstash)

    SUB attributes::bootstrap = (xsub 0x811fedc 0)

    SUB UNIVERSAL::can = (xsub 0x811f50c 0)

    SUB UNIVERSAL::isa = (xsub 0x811f304 0)

    SUB UNIVERSAL::VERSION = (xsub 0x811f7ac 0)

    SUB DynaLoader::boot_DynaLoader = (xsub 0x805b188 0)

and C<Perl_dump_all>, which dumps all the subroutines in the stash and
the op tree of the main root.

=head1 How multiple interpreters and concurrency are supported

=head2 Background and PERL_IMPLICIT_CONTEXT

The Perl interpreter can be regarded as a closed box: it has an API
for feeding it code or otherwise making it do things, but it also has
functions for its own use.  This smells a lot like an object, and
there are ways for you to build Perl so that you can have multiple
interpreters, with one interpreter represented either as a C structure,
or inside a thread-specific structure.  These structures contain all
the context, the state of that interpreter.

One macro controls the major Perl build flavor: MULTIPLICITY.  The
MULTIPLICITY build has a C structure that packages all the interpreter
state.  With multiplicity-enabled perls, PERL_IMPLICIT_CONTEXT is also
normally defined, and enables the support for passing in a "hidden" first
argument that represents all three data structures.  MULTIPLICITY makes
multi-threaded perls possible (with the ithreads threading model, related
to the macro USE_ITHREADS.)

Two other "encapsulation" macros are the PERL_GLOBAL_STRUCT and
PERL_GLOBAL_STRUCT_PRIVATE (the latter turns on the former, and the
former turns on MULTIPLICITY.)  The PERL_GLOBAL_STRUCT causes all the
internal variables of Perl to be wrapped inside a single global struct,
struct perl_vars, accessible as (globals) &PL_Vars or PL_VarsPtr or
the function  Perl_GetVars().  The PERL_GLOBAL_STRUCT_PRIVATE goes
one step further, there is still a single struct (allocated in main()
either from heap or from stack) but there are no global data symbols
pointing to it.  In either case the global struct should be initialized
as the very first thing in main() using Perl_init_global_struct() and
correspondingly tear it down after perl_free() using Perl_free_global_struct(),
please see F<miniperlmain.c> for usage details.  You may also need
to use C<dVAR> in your coding to "declare the global variables"
when you are using them.  dTHX does this for you automatically.

To see whether you have non-const data you can use a BSD (or GNU)
compatible C<nm>:

  nm libperl.a | grep -v ' [TURtr] '

If this displays any C<D> or C<d> symbols (or possibly C<C> or C<c>),
you have non-const data.  The symbols the C<grep> removed are as follows:
C<Tt> are I<text>, or code, the C<Rr> are I<read-only> (const) data,
and the C<U> is <undefined>, external symbols referred to.

The test F<t/porting/libperl.t> does this kind of symbol sanity
checking on C<libperl.a>.

For backward compatibility reasons defining just PERL_GLOBAL_STRUCT
doesn't actually hide all symbols inside a big global struct: some
PerlIO_xxx vtables are left visible.  The PERL_GLOBAL_STRUCT_PRIVATE
then hides everything (see how the PERLIO_FUNCS_DECL is used).

All this obviously requires a way for the Perl internal functions to be
either subroutines taking some kind of structure as the first
argument, or subroutines taking nothing as the first argument.  To
enable these two very different ways of building the interpreter,
the Perl source (as it does in so many other situations) makes heavy
use of macros and subroutine naming conventions.

First problem: deciding which functions will be public API functions and
which will be private.  All functions whose names begin C<S_> are private
(think "S" for "secret" or "static").  All other functions begin with
"Perl_", but just because a function begins with "Perl_" does not mean it is
part of the API.  (See L</Internal
Functions>.)  The easiest way to be B<sure> a
function is part of the API is to find its entry in L<perlapi>.
If it exists in L<perlapi>, it's part of the API.  If it doesn't, and you
think it should be (i.e., you need it for your extension), send mail via
L<perlbug> explaining why you think it should be.

Second problem: there must be a syntax so that the same subroutine
declarations and calls can pass a structure as their first argument,
or pass nothing.  To solve this, the subroutines are named and
declared in a particular way.  Here's a typical start of a static
function used within the Perl guts:

  STATIC void
  S_incline(pTHX_ char *s)

STATIC becomes "static" in C, and may be #define'd to nothing in some
configurations in the future.

A public function (i.e. part of the internal API, but not necessarily
sanctioned for use in extensions) begins like this:

  void
  Perl_sv_setiv(pTHX_ SV* dsv, IV num)

C<pTHX_> is one of a number of macros (in F<perl.h>) that hide the
details of the interpreter's context.  THX stands for "thread", "this",
or "thingy", as the case may be.  (And no, George Lucas is not involved. :-)
The first character could be 'p' for a B<p>rototype, 'a' for B<a>rgument,
or 'd' for B<d>eclaration, so we have C<pTHX>, C<aTHX> and C<dTHX>, and
their variants.

When Perl is built without options that set PERL_IMPLICIT_CONTEXT, there is no
first argument containing the interpreter's context.  The trailing underscore
in the pTHX_ macro indicates that the macro expansion needs a comma
after the context argument because other arguments follow it.  If
PERL_IMPLICIT_CONTEXT is not defined, pTHX_ will be ignored, and the
subroutine is not prototyped to take the extra argument.  The form of the
macro without the trailing underscore is used when there are no additional
explicit arguments.

When a core function calls another, it must pass the context.  This
is normally hidden via macros.  Consider C<sv_setiv>.  It expands into
something like this:

    #ifdef PERL_IMPLICIT_CONTEXT
      #define sv_setiv(a,b)      Perl_sv_setiv(aTHX_ a, b)
      /* can't do this for vararg functions, see below */
    #else
      #define sv_setiv           Perl_sv_setiv
    #endif

This works well, and means that XS authors can gleefully write:

    sv_setiv(foo, bar);

and still have it work under all the modes Perl could have been
compiled with.

This doesn't work so cleanly for varargs functions, though, as macros
imply that the number of arguments is known in advance.  Instead we
either need to spell them out fully, passing C<aTHX_> as the first
argument (the Perl core tends to do this with functions like
Perl_warner), or use a context-free version.

The context-free version of Perl_warner is called
Perl_warner_nocontext, and does not take the extra argument.  Instead
it does dTHX; to get the context from thread-local storage.  We
C<#define warner Perl_warner_nocontext> so that extensions get source
compatibility at the expense of performance.  (Passing an arg is
cheaper than grabbing it from thread-local storage.)

You can ignore [pad]THXx when browsing the Perl headers/sources.
Those are strictly for use within the core.  Extensions and embedders
need only be aware of [pad]THX.

=head2 So what happened to dTHR?

C<dTHR> was introduced in perl 5.005 to support the older thread model.
The older thread model now uses the C<THX> mechanism to pass context
pointers around, so C<dTHR> is not useful any more.  Perl 5.6.0 and
later still have it for backward source compatibility, but it is defined
to be a no-op.

=head2 How do I use all this in extensions?

When Perl is built with PERL_IMPLICIT_CONTEXT, extensions that call
any functions in the Perl API will need to pass the initial context
argument somehow.  The kicker is that you will need to write it in
such a way that the extension still compiles when Perl hasn't been
built with PERL_IMPLICIT_CONTEXT enabled.

There are three ways to do this.  First, the easy but inefficient way,
which is also the default, in order to maintain source compatibility
with extensions: whenever F<XSUB.h> is #included, it redefines the aTHX
and aTHX_ macros to call a function that will return the context.
Thus, something like:

        sv_setiv(sv, num);

in your extension will translate to this when PERL_IMPLICIT_CONTEXT is
in effect:

        Perl_sv_setiv(Perl_get_context(), sv, num);

or to this otherwise:

        Perl_sv_setiv(sv, num);

You don't have to do anything new in your extension to get this; since
the Perl library provides Perl_get_context(), it will all just
work.

The second, more efficient way is to use the following template for
your Foo.xs:

        #define PERL_NO_GET_CONTEXT     /* we want efficiency */
        #include "EXTERN.h"
        #include "perl.h"
        #include "XSUB.h"

        STATIC void my_private_function(int arg1, int arg2);

        STATIC void
        my_private_function(int arg1, int arg2)
        {
            dTHX;       /* fetch context */
            ... call many Perl API functions ...
        }

        [... etc ...]

        MODULE = Foo            PACKAGE = Foo

        /* typical XSUB */

        void
        my_xsub(arg)
                int arg
            CODE:
                my_private_function(arg, 10);

Note that the only two changes from the normal way of writing an
extension is the addition of a C<#define PERL_NO_GET_CONTEXT> before
including the Perl headers, followed by a C<dTHX;> declaration at
the start of every function that will call the Perl API.  (You'll
know which functions need this, because the C compiler will complain
that there's an undeclared identifier in those functions.)  No changes
are needed for the XSUBs themselves, because the XS() macro is
correctly defined to pass in the implicit context if needed.

The third, even more efficient way is to ape how it is done within
the Perl guts:


        #define PERL_NO_GET_CONTEXT     /* we want efficiency */
        #include "EXTERN.h"
        #include "perl.h"
        #include "XSUB.h"

        /* pTHX_ only needed for functions that call Perl API */
        STATIC void my_private_function(pTHX_ int arg1, int arg2);

        STATIC void
        my_private_function(pTHX_ int arg1, int arg2)
        {
            /* dTHX; not needed here, because THX is an argument */
            ... call Perl API functions ...
        }

        [... etc ...]

        MODULE = Foo            PACKAGE = Foo

        /* typical XSUB */

        void
        my_xsub(arg)
                int arg
            CODE:
                my_private_function(aTHX_ arg, 10);

This implementation never has to fetch the context using a function
call, since it is always passed as an extra argument.  Depending on
your needs for simplicity or efficiency, you may mix the previous
two approaches freely.

Never add a comma after C<pTHX> yourself--always use the form of the
macro with the underscore for functions that take explicit arguments,
or the form without the argument for functions with no explicit arguments.

If one is compiling Perl with the C<-DPERL_GLOBAL_STRUCT> the C<dVAR>
definition is needed if the Perl global variables (see F<perlvars.h>
or F<globvar.sym>) are accessed in the function and C<dTHX> is not
used (the C<dTHX> includes the C<dVAR> if necessary).  One notices
the need for C<dVAR> only with the said compile-time define, because
otherwise the Perl global variables are visible as-is.

=head2 Should I do anything special if I call perl from multiple threads?

If you create interpreters in one thread and then proceed to call them in
another, you need to make sure perl's own Thread Local Storage (TLS) slot is
initialized correctly in each of those threads.

The C<perl_alloc> and C<perl_clone> API functions will automatically set
the TLS slot to the interpreter they created, so that there is no need to do
anything special if the interpreter is always accessed in the same thread that
created it, and that thread did not create or call any other interpreters
afterwards.  If that is not the case, you have to set the TLS slot of the
thread before calling any functions in the Perl API on that particular
interpreter.  This is done by calling the C<PERL_SET_CONTEXT> macro in that
thread as the first thing you do:

	/* do this before doing anything else with some_perl */
	PERL_SET_CONTEXT(some_perl);

	... other Perl API calls on some_perl go here ...

=head2 Future Plans and PERL_IMPLICIT_SYS

Just as PERL_IMPLICIT_CONTEXT provides a way to bundle up everything
that the interpreter knows about itself and pass it around, so too are
there plans to allow the interpreter to bundle up everything it knows
about the environment it's running on.  This is enabled with the
PERL_IMPLICIT_SYS macro.  Currently it only works with USE_ITHREADS on
Windows.

This allows the ability to provide an extra pointer (called the "host"
environment) for all the system calls.  This makes it possible for
all the system stuff to maintain their own state, broken down into
seven C structures.  These are thin wrappers around the usual system
calls (see F<win32/perllib.c>) for the default perl executable, but for a
more ambitious host (like the one that would do fork() emulation) all
the extra work needed to pretend that different interpreters are
actually different "processes", would be done here.

The Perl engine/interpreter and the host are orthogonal entities.
There could be one or more interpreters in a process, and one or
more "hosts", with free association between them.

=head1 Internal Functions

All of Perl's internal functions which will be exposed to the outside
world are prefixed by C<Perl_> so that they will not conflict with XS
functions or functions used in a program in which Perl is embedded.
Similarly, all global variables begin with C<PL_>.  (By convention,
static functions start with C<S_>.)

Inside the Perl core (C<PERL_CORE> defined), you can get at the functions
either with or without the C<Perl_> prefix, thanks to a bunch of defines
that live in F<embed.h>.  Note that extension code should I<not> set
C<PERL_CORE>; this exposes the full perl internals, and is likely to cause
breakage of the XS in each new perl release.

The file F<embed.h> is generated automatically from
F<embed.pl> and F<embed.fnc>.  F<embed.pl> also creates the prototyping
header files for the internal functions, generates the documentation
and a lot of other bits and pieces.  It's important that when you add
a new function to the core or change an existing one, you change the
data in the table in F<embed.fnc> as well.  Here's a sample entry from
that table:

    Apd |SV**   |av_fetch   |AV* ar|I32 key|I32 lval

The second column is the return type, the third column the name.  Columns
after that are the arguments.  The first column is a set of flags:

=over 3

=item A

This function is a part of the public
API.  All such functions should also
have 'd', very few do not.

=item p

This function has a C<Perl_> prefix; i.e. it is defined as
C<Perl_av_fetch>.

=item d

This function has documentation using the C<apidoc> feature which we'll
look at in a second.  Some functions have 'd' but not 'A'; docs are good.

=back

Other available flags are:

=over 3

=item s

This is a static function and is defined as C<STATIC S_whatever>, and
usually called within the sources as C<whatever(...)>.

=item n

This does not need an interpreter context, so the definition has no
C<pTHX>, and it follows that callers don't use C<aTHX>.  (See
L</Background and PERL_IMPLICIT_CONTEXT>.)

=item r

This function never returns; C<croak>, C<exit> and friends.

=item f

This function takes a variable number of arguments, C<printf> style.
The argument list should end with C<...>, like this:

    Afprd   |void   |croak          |const char* pat|...

=item M

This function is part of the experimental development API, and may change
or disappear without notice.

=item o

This function should not have a compatibility macro to define, say,
C<Perl_parse> to C<parse>.  It must be called as C<Perl_parse>.

=item x

This function isn't exported out of the Perl core.

=item m

This is implemented as a macro.

=item X

This function is explicitly exported.

=item E

This function is visible to extensions included in the Perl core.

=item b

Binary backward compatibility; this function is a macro but also has
a C<Perl_> implementation (which is exported).

=item others

See the comments at the top of C<embed.fnc> for others.

=back

If you edit F<embed.pl> or F<embed.fnc>, you will need to run
C<make regen_headers> to force a rebuild of F<embed.h> and other
auto-generated files.

=head2 Formatted Printing of IVs, UVs, and NVs

If you are printing IVs, UVs, or NVS instead of the stdio(3) style
formatting codes like C<%d>, C<%ld>, C<%f>, you should use the
following macros for portability

        IVdf            IV in decimal
        UVuf            UV in decimal
        UVof            UV in octal
        UVxf            UV in hexadecimal
        NVef            NV %e-like
        NVff            NV %f-like
        NVgf            NV %g-like

These will take care of 64-bit integers and long doubles.
For example:

        printf("IV is %"IVdf"\n", iv);

The IVdf will expand to whatever is the correct format for the IVs.

Note that there are different "long doubles": Perl will use
whatever the compiler has.

If you are printing addresses of pointers, use UVxf combined
with PTR2UV(), do not use %lx or %p.

=head2 Pointer-To-Integer and Integer-To-Pointer

Because pointer size does not necessarily equal integer size,
use the follow macros to do it right.

        PTR2UV(pointer)
        PTR2IV(pointer)
        PTR2NV(pointer)
        INT2PTR(pointertotype, integer)

For example:

        IV  iv = ...;
        SV *sv = INT2PTR(SV*, iv);

and

        AV *av = ...;
        UV  uv = PTR2UV(av);

=head2 Exception Handling

There are a couple of macros to do very basic exception handling in XS
modules.  You have to define C<NO_XSLOCKS> before including F<XSUB.h> to
be able to use these macros:

        #define NO_XSLOCKS
        #include "XSUB.h"

You can use these macros if you call code that may croak, but you need
to do some cleanup before giving control back to Perl.  For example:

        dXCPT;    /* set up necessary variables */

        XCPT_TRY_START {
          code_that_may_croak();
        } XCPT_TRY_END

        XCPT_CATCH
        {
          /* do cleanup here */
          XCPT_RETHROW;
        }

Note that you always have to rethrow an exception that has been
caught.  Using these macros, it is not possible to just catch the
exception and ignore it.  If you have to ignore the exception, you
have to use the C<call_*> function.

The advantage of using the above macros is that you don't have
to setup an extra function for C<call_*>, and that using these
macros is faster than using C<call_*>.

=head2 Source Documentation

There's an effort going on to document the internal functions and
automatically produce reference manuals from them -- L<perlapi> is one
such manual which details all the functions which are available to XS
writers.  L<perlintern> is the autogenerated manual for the functions
which are not part of the API and are supposedly for internal use only.

Source documentation is created by putting POD comments into the C
source, like this:

 /*
 =for apidoc sv_setiv

 Copies an integer into the given SV.  Does not handle 'set' magic.  See
 L<perlapi/sv_setiv_mg>.

 =cut
 */

Please try and supply some documentation if you add functions to the
Perl core.

=head2 Backwards compatibility

The Perl API changes over time.  New functions are
added or the interfaces of existing functions are
changed.  The C<Devel::PPPort> module tries to
provide compatibility code for some of these changes, so XS writers don't
have to code it themselves when supporting multiple versions of Perl.

C<Devel::PPPort> generates a C header file F<ppport.h> that can also
be run as a Perl script.  To generate F<ppport.h>, run:

    perl -MDevel::PPPort -eDevel::PPPort::WriteFile

Besides checking existing XS code, the script can also be used to retrieve
compatibility information for various API calls using the C<--api-info>
command line switch.  For example:

  % perl ppport.h --api-info=sv_magicext

For details, see C<perldoc ppport.h>.

=head1 Unicode Support

Perl 5.6.0 introduced Unicode support.  It's important for porters and XS
writers to understand this support and make sure that the code they
write does not corrupt Unicode data.

=head2 What B<is> Unicode, anyway?

In the olden, less enlightened times, we all used to use ASCII.  Most of
us did, anyway.  The big problem with ASCII is that it's American.  Well,
no, that's not actually the problem; the problem is that it's not
particularly useful for people who don't use the Roman alphabet.  What
used to happen was that particular languages would stick their own
alphabet in the upper range of the sequence, between 128 and 255.  Of
course, we then ended up with plenty of variants that weren't quite
ASCII, and the whole point of it being a standard was lost.

Worse still, if you've got a language like Chinese or
Japanese that has hundreds or thousands of characters, then you really
can't fit them into a mere 256, so they had to forget about ASCII
altogether, and build their own systems using pairs of numbers to refer
to one character.

To fix this, some people formed Unicode, Inc. and
produced a new character set containing all the characters you can
possibly think of and more.  There are several ways of representing these
characters, and the one Perl uses is called UTF-8.  UTF-8 uses
a variable number of bytes to represent a character.  You can learn more
about Unicode and Perl's Unicode model in L<perlunicode>.

(On EBCDIC platforms, Perl uses instead UTF-EBCDIC, which is a form of
UTF-8 adapted for EBCDIC platforms.  Below, we just talk about UTF-8.
UTF-EBCDIC is like UTF-8, but the details are different.  The macros
hide the differences from you, just remember that the particular numbers
and bit patterns presented below will differ in UTF-EBCDIC.)

=head2 How can I recognise a UTF-8 string?

You can't.  This is because UTF-8 data is stored in bytes just like
non-UTF-8 data.  The Unicode character 200, (C<0xC8> for you hex types)
capital E with a grave accent, is represented by the two bytes
C<v196.172>.  Unfortunately, the non-Unicode string C<chr(196).chr(172)>
has that byte sequence as well.  So you can't tell just by looking -- this
is what makes Unicode input an interesting problem.

In general, you either have to know what you're dealing with, or you
have to guess.  The API function C<is_utf8_string> can help; it'll tell
you if a string contains only valid UTF-8 characters, and the chances
of a non-UTF-8 string looking like valid UTF-8 become very small very
quickly with increasing string length.  On a character-by-character
basis, C<isUTF8_CHAR>
will tell you whether the current character in a string is valid UTF-8. 

=head2 How does UTF-8 represent Unicode characters?

As mentioned above, UTF-8 uses a variable number of bytes to store a
character.  Characters with values 0...127 are stored in one
byte, just like good ol' ASCII.  Character 128 is stored as
C<v194.128>; this continues up to character 191, which is
C<v194.191>.  Now we've run out of bits (191 is binary
C<10111111>) so we move on; character 192 is C<v195.128>.  And
so it goes on, moving to three bytes at character 2048.
L<perlunicode/Unicode Encodings> has pictures of how this works.

Assuming you know you're dealing with a UTF-8 string, you can find out
how long the first character in it is with the C<UTF8SKIP> macro:

    char *utf = "\305\233\340\240\201";
    I32 len;

    len = UTF8SKIP(utf); /* len is 2 here */
    utf += len;
    len = UTF8SKIP(utf); /* len is 3 here */

Another way to skip over characters in a UTF-8 string is to use
C<utf8_hop>, which takes a string and a number of characters to skip
over.  You're on your own about bounds checking, though, so don't use it
lightly.

All bytes in a multi-byte UTF-8 character will have the high bit set,
so you can test if you need to do something special with this
character like this (the C<UTF8_IS_INVARIANT()> is a macro that tests
whether the byte is encoded as a single byte even in UTF-8):

    U8 *utf;
    U8 *utf_end; /* 1 beyond buffer pointed to by utf */
    UV uv;	/* Note: a UV, not a U8, not a char */
    STRLEN len; /* length of character in bytes */

    if (!UTF8_IS_INVARIANT(*utf))
        /* Must treat this as UTF-8 */
        uv = utf8_to_uvchr_buf(utf, utf_end, &len);
    else
        /* OK to treat this character as a byte */
        uv = *utf;

You can also see in that example that we use C<utf8_to_uvchr_buf> to get the
value of the character; the inverse function C<uvchr_to_utf8> is available
for putting a UV into UTF-8:

    if (!UVCHR_IS_INVARIANT(uv))
        /* Must treat this as UTF8 */
        utf8 = uvchr_to_utf8(utf8, uv);
    else
        /* OK to treat this character as a byte */
        *utf8++ = uv;

You B<must> convert characters to UVs using the above functions if
you're ever in a situation where you have to match UTF-8 and non-UTF-8
characters.  You may not skip over UTF-8 characters in this case.  If you
do this, you'll lose the ability to match hi-bit non-UTF-8 characters;
for instance, if your UTF-8 string contains C<v196.172>, and you skip
that character, you can never match a C<chr(200)> in a non-UTF-8 string.
So don't do that!

(Note that we don't have to test for invariant characters in the
examples above.  The functions work on any well-formed UTF-8 input.
It's just that its faster to avoid the function overhead when it's not
needed.)

=head2 How does Perl store UTF-8 strings?

Currently, Perl deals with UTF-8 strings and non-UTF-8 strings
slightly differently.  A flag in the SV, C<SVf_UTF8>, indicates that the
string is internally encoded as UTF-8.  Without it, the byte value is the
codepoint number and vice versa.  This flag is only meaningful if the SV
is C<SvPOK> or immediately after stringification via C<SvPV> or a
similar macro.  You can check and manipulate this flag with the
following macros:

    SvUTF8(sv)
    SvUTF8_on(sv)
    SvUTF8_off(sv)

This flag has an important effect on Perl's treatment of the string: if
UTF-8 data is not properly distinguished, regular expressions,
C<length>, C<substr> and other string handling operations will have
undesirable (wrong) results.

The problem comes when you have, for instance, a string that isn't
flagged as UTF-8, and contains a byte sequence that could be UTF-8 --
especially when combining non-UTF-8 and UTF-8 strings.

Never forget that the C<SVf_UTF8> flag is separate from the PV value; you
need to be sure you don't accidentally knock it off while you're
manipulating SVs.  More specifically, you cannot expect to do this:

    SV *sv;
    SV *nsv;
    STRLEN len;
    char *p;

    p = SvPV(sv, len);
    frobnicate(p);
    nsv = newSVpvn(p, len);

The C<char*> string does not tell you the whole story, and you can't
copy or reconstruct an SV just by copying the string value.  Check if the
old SV has the UTF8 flag set (I<after> the C<SvPV> call), and act
accordingly:

    p = SvPV(sv, len);
    is_utf8 = SvUTF8(sv);
    frobnicate(p, is_utf8);
    nsv = newSVpvn(p, len);
    if (is_utf8)
        SvUTF8_on(nsv);

In the above, your C<frobnicate> function has been changed to be made
aware of whether or not it's dealing with UTF-8 data, so that it can
handle the string appropriately.

Since just passing an SV to an XS function and copying the data of
the SV is not enough to copy the UTF8 flags, even less right is just
passing a S<C<char *>> to an XS function.

For full generality, use the L<C<DO_UTF8>|perlapi/DO_UTF8> macro to see if the
string in an SV is to be I<treated> as UTF-8.  This takes into account
if the call to the XS function is being made from within the scope of
L<S<C<use bytes>>|bytes>.  If so, the underlying bytes that comprise the
UTF-8 string are to be exposed, rather than the character they
represent.  But this pragma should only really be used for debugging and
perhaps low-level testing at the byte level.  Hence most XS code need
not concern itself with this, but various areas of the perl core do need
to support it.

And this isn't the whole story.  Starting in Perl v5.12, strings that
aren't encoded in UTF-8 may also be treated as Unicode under various
conditions (see L<perlunicode/ASCII Rules versus Unicode Rules>).
This is only really a problem for characters whose ordinals are between
128 and 255, and their behavior varies under ASCII versus Unicode rules
in ways that your code cares about (see L<perlunicode/The "Unicode Bug">).
There is no published API for dealing with this, as it is subject to
change, but you can look at the code for C<pp_lc> in F<pp.c> for an
example as to how it's currently done.

=head2 How do I convert a string to UTF-8?

If you're mixing UTF-8 and non-UTF-8 strings, it is necessary to upgrade
the non-UTF-8 strings to UTF-8.  If you've got an SV, the easiest way to do
this is:

    sv_utf8_upgrade(sv);

However, you must not do this, for example:

    if (!SvUTF8(left))
        sv_utf8_upgrade(left);

If you do this in a binary operator, you will actually change one of the
strings that came into the operator, and, while it shouldn't be noticeable
by the end user, it can cause problems in deficient code.

Instead, C<bytes_to_utf8> will give you a UTF-8-encoded B<copy> of its
string argument.  This is useful for having the data available for
comparisons and so on, without harming the original SV.  There's also
C<utf8_to_bytes> to go the other way, but naturally, this will fail if
the string contains any characters above 255 that can't be represented
in a single byte.

=head2 How do I compare strings?

L<perlapi/sv_cmp> and L<perlapi/sv_cmp_flags> do a lexigraphic
comparison of two SV's, and handle UTF-8ness properly.  Note, however,
that Unicode specifies a much fancier mechanism for collation, available
via the L<Unicode::Collate> module.

To just compare two strings for equality/non-equality, you can just use
L<C<memEQ()>|perlapi/memEQ> and L<C<memNE()>|perlapi/memEQ> as usual,
except the strings must be both UTF-8 or not UTF-8 encoded.

To compare two strings case-insensitively, use
L<C<foldEQ_utf8()>|perlapi/foldEQ_utf8> (the strings don't have to have
the same UTF-8ness).

=head2 Is there anything else I need to know?

Not really.  Just remember these things:

=over 3

=item *

There's no way to tell if a S<C<char *>> or S<C<U8 *>> string is UTF-8
or not.  But you can tell if an SV is to be treated as UTF-8 by calling
C<DO_UTF8> on it, after stringifying it with C<SvPV> or a similar
macro.  And, you can tell if SV is actually UTF-8 (even if it is not to
be treated as such) by looking at its C<SvUTF8> flag (again after
stringifying it).  Don't forget to set the flag if something should be
UTF-8.
Treat the flag as part of the PV, even though it's not -- if you pass on
the PV to somewhere, pass on the flag too.

=item *

If a string is UTF-8, B<always> use C<utf8_to_uvchr_buf> to get at the value,
unless C<UTF8_IS_INVARIANT(*s)> in which case you can use C<*s>.

=item *

When writing a character UV to a UTF-8 string, B<always> use
C<uvchr_to_utf8>, unless C<UVCHR_IS_INVARIANT(uv))> in which case
you can use C<*s = uv>.

=item *

Mixing UTF-8 and non-UTF-8 strings is
tricky.  Use C<bytes_to_utf8> to get
a new string which is UTF-8 encoded, and then combine them.

=back

=head1 Custom Operators

Custom operator support is an experimental feature that allows you to
define your own ops.  This is primarily to allow the building of
interpreters for other languages in the Perl core, but it also allows
optimizations through the creation of "macro-ops" (ops which perform the
functions of multiple ops which are usually executed together, such as
C<gvsv, gvsv, add>.)

This feature is implemented as a new op type, C<OP_CUSTOM>.  The Perl
core does not "know" anything special about this op type, and so it will
not be involved in any optimizations.  This also means that you can
define your custom ops to be any op structure -- unary, binary, list and
so on -- you like.

It's important to know what custom operators won't do for you.  They
won't let you add new syntax to Perl, directly.  They won't even let you
add new keywords, directly.  In fact, they won't change the way Perl
compiles a program at all.  You have to do those changes yourself, after
Perl has compiled the program.  You do this either by manipulating the op
tree using a C<CHECK> block and the C<B::Generate> module, or by adding
a custom peephole optimizer with the C<optimize> module.

When you do this, you replace ordinary Perl ops with custom ops by
creating ops with the type C<OP_CUSTOM> and the C<op_ppaddr> of your own
PP function.  This should be defined in XS code, and should look like
the PP ops in C<pp_*.c>.  You are responsible for ensuring that your op
takes the appropriate number of values from the stack, and you are
responsible for adding stack marks if necessary.

You should also "register" your op with the Perl interpreter so that it
can produce sensible error and warning messages.  Since it is possible to
have multiple custom ops within the one "logical" op type C<OP_CUSTOM>,
Perl uses the value of C<< o->op_ppaddr >> to determine which custom op
it is dealing with.  You should create an C<XOP> structure for each
ppaddr you use, set the properties of the custom op with
C<XopENTRY_set>, and register the structure against the ppaddr using
C<Perl_custom_op_register>.  A trivial example might look like:

    static XOP my_xop;
    static OP *my_pp(pTHX);

    BOOT:
        XopENTRY_set(&my_xop, xop_name, "myxop");
        XopENTRY_set(&my_xop, xop_desc, "Useless custom op");
        Perl_custom_op_register(aTHX_ my_pp, &my_xop);

The available fields in the structure are:

=over 4

=item xop_name

A short name for your op.  This will be included in some error messages,
and will also be returned as C<< $op->name >> by the L<B|B> module, so
it will appear in the output of module like L<B::Concise|B::Concise>.

=item xop_desc

A short description of the function of the op.

=item xop_class

Which of the various C<*OP> structures this op uses.  This should be one of
the C<OA_*> constants from F<op.h>, namely

=over 4

=item OA_BASEOP

=item OA_UNOP

=item OA_BINOP

=item OA_LOGOP

=item OA_LISTOP

=item OA_PMOP

=item OA_SVOP

=item OA_PADOP

=item OA_PVOP_OR_SVOP

This should be interpreted as 'C<PVOP>' only.  The C<_OR_SVOP> is because
the only core C<PVOP>, C<OP_TRANS>, can sometimes be a C<SVOP> instead.

=item OA_LOOP

=item OA_COP

=back

The other C<OA_*> constants should not be used.

=item xop_peep

This member is of type C<Perl_cpeep_t>, which expands to C<void
(*Perl_cpeep_t)(aTHX_ OP *o, OP *oldop)>.  If it is set, this function
will be called from C<Perl_rpeep> when ops of this type are encountered
by the peephole optimizer.  I<o> is the OP that needs optimizing;
I<oldop> is the previous OP optimized, whose C<op_next> points to I<o>.

=back

C<B::Generate> directly supports the creation of custom ops by name.


=head1 Dynamic Scope and the Context Stack

B<Note:> this section describes a non-public internal API that is subject
to change without notice.

=head2 Introduction to the context stack

In Perl, dynamic scoping refers to the runtime nesting of things like
subroutine calls, evals etc, as well as the entering and exiting of block
scopes. For example, the restoring of a C<local>ised variable is
determined by the dynamic scope.

Perl tracks the dynamic scope by a data structure called the context
stack, which is an array of C<PERL_CONTEXT> structures, and which is
itself a big union for all the types of context. Whenever a new scope is
entered (such as a block, a C<for> loop, or a subroutine call), a new
context entry is pushed onto the stack. Similarly when leaving a block or
returning from a subroutine call etc. a context is popped. Since the
context stack represents the current dynamic scope, it can be searched.
For example, C<next LABEL> searches back through the stack looking for a
loop context that matches the label; C<return> pops contexts until it
finds a sub or eval context or similar; C<caller> examines sub contexts on
the stack.

Each context entry is labelled with a context type, C<cx_type>. Typical
context types are C<CXt_SUB>, C<CXt_EVAL> etc., as well as C<CXt_BLOCK>
and C<CXt_NULL> which represent a basic scope (as pushed by C<pp_enter>)
and a sort block. The type determines which part of the context union are
valid.

The main division in the context struct is between a substitution scope
(C<CXt_SUBST>) and block scopes, which are everything else. The former is
just used while executing C<s///e>, and won't be discussed further
here.

All the block scope types share a common base, which corresponds to
C<CXt_BLOCK>. This stores the old values of various scope-related
variables like C<PL_curpm>, as well as information about the current
scope, such as C<gimme>. On scope exit, the old variables are restored.

Particular block scope types store extra per-type information. For
example, C<CXt_SUB> stores the currently executing CV, while the various
for loop types might hold the original loop variable SV. On scope exit,
the per-type data is processed; for example the CV has its reference count
decremented, and the original loop variable is restored.

The macro C<cxstack> returns the base of the current context stack, while
C<cxstack_ix> is the index of the current frame within that stack.

In fact, the context stack is actually part of a stack-of-stacks system;
whenever something unusual is done such as calling a C<DESTROY> or tie
handler, a new stack is pushed, then popped at the end.

Note that the API described here changed considerably in perl 5.24; prior
to that, big macros like C<PUSHBLOCK> and C<POPSUB> were used; in 5.24
they were replaced by the inline static functions described below. In
addition, the ordering and detail of how these macros/function work
changed in many ways, often subtly. In particular they didn't handle
saving the savestack and temps stack positions, and required additional
C<ENTER>, C<SAVETMPS> and C<LEAVE> compared to the new functions. The
old-style macros will not be described further.


=head2 Pushing contexts

For pushing a new context, the two basic functions are
C<cx = cx_pushblock()>, which pushes a new basic context block and returns
its address, and a family of similar functions with names like
C<cx_pushsub(cx)> which populate the additional type-dependent fields in
the C<cx> struct. Note that C<CXt_NULL> and C<CXt_BLOCK> don't have their
own push functions, as they don't store any data beyond that pushed by
C<cx_pushblock>.

The fields of the context struct and the arguments to the C<cx_*>
functions are subject to change between perl releases, representing
whatever is convenient or efficient for that release.

A typical context stack pushing can be found in C<pp_entersub>; the
following shows a simplified and stripped-down example of a non-XS call,
along with comments showing roughly what each function does.

 dMARK;
 U8 gimme      = GIMME_V;
 bool hasargs  = cBOOL(PL_op->op_flags & OPf_STACKED);
 OP *retop     = PL_op->op_next;
 I32 old_ss_ix = PL_savestack_ix;
 CV *cv        = ....;

 /* ... make mortal copies of stack args which are PADTMPs here ... */

 /* ... do any additional savestack pushes here ... */

 /* Now push a new context entry of type 'CXt_SUB'; initially just
  * doing the actions common to all block types: */

 cx = cx_pushblock(CXt_SUB, gimme, MARK, old_ss_ix);

     /* this does (approximately):
         CXINC;              /* cxstack_ix++ (grow if necessary) */
         cx = CX_CUR();      /* and get the address of new frame */
         cx->cx_type        = CXt_SUB;
         cx->blk_gimme      = gimme;
         cx->blk_oldsp      = MARK - PL_stack_base;
         cx->blk_oldsaveix  = old_ss_ix;
         cx->blk_oldcop     = PL_curcop;
         cx->blk_oldmarksp  = PL_markstack_ptr - PL_markstack;
         cx->blk_oldscopesp = PL_scopestack_ix;
         cx->blk_oldpm      = PL_curpm;
         cx->blk_old_tmpsfloor = PL_tmps_floor;

         PL_tmps_floor        = PL_tmps_ix;
     */


 /* then update the new context frame with subroutine-specific info,
  * such as the CV about to be executed: */

 cx_pushsub(cx, cv, retop, hasargs);

     /* this does (approximately):
         cx->blk_sub.cv          = cv;
         cx->blk_sub.olddepth    = CvDEPTH(cv);
         cx->blk_sub.prevcomppad = PL_comppad;
         cx->cx_type            |= (hasargs) ? CXp_HASARGS : 0;
         cx->blk_sub.retop       = retop;
         SvREFCNT_inc_simple_void_NN(cv);
     */

Note that C<cx_pushblock()> sets two new floors: for the args stack (to
C<MARK>) and the temps stack (to C<PL_tmps_ix>). While executing at this
scope level, every C<nextstate> (amongst others) will reset the args and
tmps stack levels to these floors. Note that since C<cx_pushblock> uses
the current value of C<PL_tmps_ix> rather than it being passed as an arg,
this dictates at what point C<cx_pushblock> should be called. In
particular, any new mortals which should be freed only on scope exit
(rather than at the next C<nextstate>) should be created first.

Most callers of C<cx_pushblock> simply set the new args stack floor to the
top of the previous stack frame, but for C<CXt_LOOP_LIST> it stores the
items being iterated over on the stack, and so sets C<blk_oldsp> to the
top of these items instead. Note that, contrary to its name, C<blk_oldsp>
doesn't always represent the value to restore C<PL_stack_sp> to on scope
exit.

Note the early capture of C<PL_savestack_ix> to C<old_ss_ix>, which is
later passed as an arg to C<cx_pushblock>. In the case of C<pp_entersub>,
this is because, although most values needing saving are stored in fields
of the context struct, an extra value needs saving only when the debugger
is running, and it doesn't make sense to bloat the struct for this rare
case. So instead it is saved on the savestack. Since this value gets
calculated and saved before the context is pushed, it is necessary to pass
the old value of C<PL_savestack_ix> to C<cx_pushblock>, to ensure that the
saved value gets freed during scope exit.  For most users of
C<cx_pushblock>, where nothing needs pushing on the save stack,
C<PL_savestack_ix> is just passed directly as an arg to C<cx_pushblock>.

Note that where possible, values should be saved in the context struct
rather than on the save stack; it's much faster that way.

Normally C<cx_pushblock> should be immediately followed by the appropriate
C<cx_pushfoo>, with nothing between them; this is because if code
in-between could die (e.g. a warning upgraded to fatal), then the context
stack unwinding code in C<dounwind> would see (in the example above) a
C<CXt_SUB> context frame, but without all the subroutine-specific fields
set, and crashes would soon ensue.

Where the two must be separate, initially set the type to C<CXt_NULL> or
C<CXt_BLOCK>, and later change it to C<CXt_foo> when doing the
C<cx_pushfoo>. This is exactly what C<pp_enteriter> does, once it's
determined which type of loop it's pushing.

=head2 Popping contexts

Contexts are popped using C<cx_popsub()> etc. and C<cx_popblock()>. Note
however, that unlike C<cx_pushblock>, neither of these functions actually
decrement the current context stack index; this is done separately using
C<CX_POP()>.

There are two main ways that contexts are popped. During normal execution
as scopes are exited, functions like C<pp_leave>, C<pp_leaveloop> and
C<pp_leavesub> process and pop just one context using C<cx_popfoo> and
C<cx_popblock>. On the other hand, things like C<pp_return> and C<next>
may have to pop back several scopes until a sub or loop context is found,
and exceptions (such as C<die>) need to pop back contexts until an eval
context is found. Both of these are accomplished by C<dounwind()>, which
is capable of processing and popping all contexts above the target one.

Here is a typical example of context popping, as found in C<pp_leavesub>
(simplified slightly):

 U8 gimme;
 PERL_CONTEXT *cx;
 SV **oldsp;
 OP *retop;

 cx = CX_CUR();

 gimme = cx->blk_gimme;
 oldsp = PL_stack_base + cx->blk_oldsp; /* last arg of previous frame */

 if (gimme == G_VOID)
     PL_stack_sp = oldsp;
 else
     leave_adjust_stacks(oldsp, oldsp, gimme, 0);

 CX_LEAVE_SCOPE(cx);
 cx_popsub(cx);
 cx_popblock(cx);
 retop = cx->blk_sub.retop;
 CX_POP(cx);

 return retop;

The steps above are in a very specific order, designed to be the reverse
order of when the context was pushed. The first thing to do is to copy
and/or protect any any return arguments and free any temps in the current
scope. Scope exits like an rvalue sub normally return a mortal copy of
their return args (as opposed to lvalue subs). It is important to make
this copy before the save stack is popped or variables are restored, or
bad things like the following can happen:

    sub f { my $x =...; $x }  # $x freed before we get to copy it
    sub f { /(...)/;    $1 }  # PL_curpm restored before $1 copied

Although we wish to free any temps at the same time, we have to be careful
not to free any temps which are keeping return args alive; nor to free the
temps we have just created while mortal copying return args. Fortunately,
C<leave_adjust_stacks()> is capable of making mortal copies of return args,
shifting args down the stack, and only processing those entries on the
temps stack that are safe to do so.

In void context no args are returned, so it's more efficient to skip
calling C<leave_adjust_stacks()>. Also in void context, a C<nextstate> op
is likely to be imminently called which will do a C<FREETMPS>, so there's
no need to do that either.

The next step is to pop savestack entries: C<CX_LEAVE_SCOPE(cx)> is just
defined as C<<LEAVE_SCOPE(cx->blk_oldsaveix)>>. Note that during the
popping, it's possible for perl to call destructors, call C<STORE> to undo
localisations of tied vars, and so on. Any of these can die or call
C<exit()>. In this case, C<dounwind()> will be called, and the current
context stack frame will be re-processed. Thus it is vital that all steps
in popping a context are done in such a way to support reentrancy.  The
other alternative, of decrementing C<cxstack_ix> I<before> processing the
frame, would lead to leaks and the like if something died halfway through,
or overwriting of the current frame.

C<CX_LEAVE_SCOPE> itself is safely re-entrant: if only half the savestack
items have been popped before dying and getting trapped by eval, then the
C<CX_LEAVE_SCOPE>s in C<dounwind> or C<pp_leaveeval> will continue where
the first one left off.

The next step is the type-specific context processing; in this case
C<cx_popsub>. In part, this looks like:

    cv = cx->blk_sub.cv;
    CvDEPTH(cv) = cx->blk_sub.olddepth;
    cx->blk_sub.cv = NULL;
    SvREFCNT_dec(cv);

where its processing the just-executed CV. Note that before it decrements
the CV's reference count, it nulls the C<blk_sub.cv>. This means that if
it re-enters, the CV won't be freed twice. It also means that you can't
rely on such type-specific fields having useful values after the return
from C<cx_popfoo>.

Next, C<cx_popblock> restores all the various interpreter vars to their
previous values or previous high water marks; it expands to:

    PL_markstack_ptr = PL_markstack + cx->blk_oldmarksp;
    PL_scopestack_ix = cx->blk_oldscopesp;
    PL_curpm         = cx->blk_oldpm;
    PL_curcop        = cx->blk_oldcop;
    PL_tmps_floor    = cx->blk_old_tmpsfloor;

Note that it I<doesn't> restore C<PL_stack_sp>; as mentioned earlier,
which value to restore it to depends on the context type (specifically
C<for (list) {}>), and what args (if any) it returns; and that will
already have been sorted out earlier by C<leave_adjust_stacks()>.

Finally, the context stack pointer is actually decremented by C<CX_POP(cx)>.
After this point, it's possible that that the current context frame could
be overwritten by other contexts being pushed. Although things like ties
and C<DESTROY> are supposed to work within a new context stack, it's best
not to assume this. Indeed on debugging builds, C<CX_POP(cx)> deliberately
sets C<cx> to null to detect code that is still relying on the field
values in that context frame. Note in the C<pp_leavesub()> example above,
we grab C<blk_sub.retop> I<before> calling C<CX_POP>.

=head2 Redoing contexts

Finally, there is C<cx_topblock(cx)>, which acts like a super-C<nextstate>
as regards to resetting various vars to their base values. It is used in
places like C<pp_next>, C<pp_redo> and C<pp_goto> where rather than
exiting a scope, we want to re-initialise the scope. As well as resetting
C<PL_stack_sp> like C<nextstate>, it also resets C<PL_markstack_ptr>,
C<PL_scopestack_ix> and C<PL_curpm>. Note that it doesn't do a
C<FREETMPS>.


=head1 AUTHORS

Until May 1997, this document was maintained by Jeff Okamoto
E<lt>okamoto@@corp.hp.comE<gt>.  It is now maintained as part of Perl
itself by the Perl 5 Porters E<lt>perl5-porters@@perl.orgE<gt>.

With lots of help and suggestions from Dean Roehrich, Malcolm Beattie,
Andreas Koenig, Paul Hudson, Ilya Zakharevich, Paul Marquess, Neil
Bowers, Matthew Green, Tim Bunce, Spider Boardman, Ulrich Pfeifer,
Stephen McCamant, and Gurusamy Sarathy.

=head1 SEE ALSO

L<perlapi>, L<perlintern>, L<perlxs>, L<perlembed>
@


1.19
log
@Update to perl 5.20.3

OK bluhm@@
@
text
@d42 1
a42 1
possible to have it point to other things  For example, it could point
d344 9
a352 8
  % ./perl -Ilib -MDevel::Peek -le '$a=""; $a.="123456789"; $a=~s/.//; Dump($a)'
  SV = PV(0x7ffa04008a70) at 0x7ffa04030390
    REFCNT = 1
    FLAGS = (POK,OOK,pPOK)
    OFFSET = 1
    PV = 0x7ffa03c05b61 ( "\1" . ) "23456789"\0
    CUR = 8
    LEN = 9
d1188 1
a1188 1
 %  PERL_MAGIC_rhash          (none)         extra data for restricted
d1190 2
a1191 1
 &  PERL_MAGIC_proto          (none)         my sub prototype CV
d1193 1
a1193 1
 :  PERL_MAGIC_symtab         (none)         extra data for symbol
d1195 2
a1196 2
 <  PERL_MAGIC_backref        vtbl_backref   for weak ref data
 @@  PERL_MAGIC_arylen_p       (none)         to move arylen out of XPVAV
d1224 1
a1224 1
 r  PERL_MAGIC_qr             vtbl_regexp    precompiled qr// regex
d1239 3
a1241 1
 ]  PERL_MAGIC_checkcall      vtbl_checkcall inlining/mutation of call
d1369 1
a1369 1
carries out the necessary steps - firstly it creates a new hash, and then
d1502 1
a1502 1
The refcount of C<sv> would be decremented at the end of
d1794 3
a1796 1
that have never resided in a pad, but nonetheless act like I<target>s.
d1984 2
a1985 1
following the C<op_sibling> pointer from the first child to the last.
d1987 1
a1987 1
There are also two other op types: a C<PMOP> holds a regular expression,
d1994 21
d2154 1
a2154 1
C<}>, so calls to C<start> and C<pre/post_end> will match.  Anything
d2194 1
a2194 1
extension is loaded, so you will see some C<pre/post_end> pairs that
d2267 2
a2268 1
To see whether you have non-const data you can use a BSD-compatible C<nm>:
d2272 7
a2278 1
If this displays any C<D> or C<d> symbols, you have non-const data.
d2671 3
d2733 1
a2733 1
automatically produce reference manuals from them - L<perlapi> is one
d2745 1
a2745 1
 C<sv_setiv_mg>.
d2804 6
d2816 1
a2816 1
has that byte sequence as well.  So you can't tell just by looking - this
d2821 4
a2824 3
you if a string contains only valid UTF-8 characters.  However, it can't
do the work for you.  On a character-by-character basis,
C<is_utf8_char_buf>
d2834 1
a2834 1
C<10111111>) so we move on; 192 is C<v195.128>.  And
d2836 1
d2855 1
a2855 1
character like this (the UTF8_IS_INVARIANT() is a macro that tests
d2874 1
a2874 1
    if (!UTF8_IS_INVARIANT(uv))
d2889 5
d2896 1
a2896 1
Currently, Perl deals with Unicode strings and non-Unicode strings
d2899 3
a2901 5
codepoint number and vice versa (in other words, the string is encoded
as iso-8859-1, but C<use feature 'unicode_strings'> is needed to get iso-8859-1
semantics).  This flag is only meaningful if the SV is C<SvPOK>
or immediately after stringification via C<SvPV> or a similar
macro.  You can check and manipulate this flag with the
d2909 1
a2909 1
Unicode data is not properly distinguished, regular expressions,
d2911 1
a2911 1
undesirable results.
d2914 1
a2914 1
flagged as UTF-8, and contains a byte sequence that could be UTF-8 -
d2917 2
a2918 2
Never forget that the C<SVf_UTF8> flag is separate to the PV value; you
need be sure you don't accidentally knock it off while you're
d2936 2
a2937 1
    frobnicate(p);
d2939 1
a2939 1
    if (SvUTF8(sv))
d2942 3
a2944 3
In fact, your C<frobnicate> function should be made aware of whether or
not it's dealing with UTF-8 data, so that it can handle the string
appropriately.
d2948 21
a2968 1
passing a C<char *> to an XS function.
d2973 1
a2973 1
one of the strings to UTF-8.  If you've got an SV, the easiest way to do
d2994 15
d3017 9
a3025 5
There's no way to tell if a string is UTF-8 or not.  You can tell if an SV
is UTF-8 by looking at its C<SvUTF8> flag after stringifying it
with C<SvPV> or a similar macro.  Don't forget to set the flag if
something should be UTF-8.  Treat the flag as part of the PV, even though
it's not - if you pass on the PV to somewhere, pass on the flag too.
d3034 2
a3035 2
When writing a character C<uv> to a UTF-8 string, B<always> use
C<uvchr_to_utf8>, unless C<UTF8_IS_INVARIANT(uv))> in which case
d3058 2
a3059 2
define your custom ops to be any op structure - unary, binary, list and
so on - you like.
d3154 301
@


1.18
log
@Fix merge issues, remove excess files - match perl-5.20.2 dist
@
text
@d326 6
a331 1
This is best demonstrated by example:
d333 13
a345 2
  % ./perl -Ilib -MDevel::Peek -le '$a="12345"; $a=~s/.//; Dump($a)'
  SV = PVIV(0x8128450) at 0x81340f0
d348 4
a351 4
    IV = 1  (OFFSET)
    PV = 0x8135781 ( "1" . ) "2345"\0
    CUR = 4
    LEN = 5
d353 1
a353 2
Here the number of bytes chopped off (1) is put into IV, and
C<Devel::Peek::Dump> helpfully reminds us that this is an offset.  The
d356 4
a359 1
the fake beginning, not the real one.
@


1.17
log
@Fix merge conflicts, remove extra files, match upstream perl-5.20.1

ok deraadt@@ sthen@@ espie@@ miod@@
@
text
@d1769 1
a1769 1
I<target>s have C<SVs_PADTMP> set.  But this have never been fully true.
@


1.16
log
@Merge perl-5.18.2 plus local patches, remove old files

OK espie@@ sthen@@ deraadt@@
@
text
@d8 2
a9 2
to provide some info on the basic workings of the Perl core. It is far
from complete and probably contains many errors. Please refer any
d31 1
a31 1
least 32-bits and 16-bits long, respectively. (Again, there are U32 and U16,
d42 2
a43 3
possible to have it point to other things.  For example, inversion
lists, used in regular expression data structures, are scalars, each
consisting of an array of UVs which are accessed through PVs.  But,
d46 1
a46 1
example, a trailing NUL is tacked on automatically.  The non-string use
d63 1
a63 1
In the unlikely case of a SV requiring more complex initialisation, you
d66 1
a66 1
the NUL) bytes of storage allocated, accessible via SvPVX.  In both cases
d90 1
a90 1
string terminating with a NUL character, and not otherwise containing
d108 2
a109 2
All SVs that contain strings should be terminated with a NUL character.
If it is not NUL-terminated there is a risk of
d111 2
a112 2
functions or system calls which expect a NUL-terminated string.
Perl's own functions typically add a trailing NUL for this reason.
d134 1
a134 1
might not be terminated by a NUL.
d137 2
a138 1
len);>. It might work with your compiler, but it won't work for everyone.
d159 1
a159 1
add space for the trailing NUL byte (perl's own string functions typically do
d162 52
d249 2
a250 1
va_list argument. The fifth function extends the string stored in the first
d271 2
a272 2
Its address can be used whenever an C<SV*> is needed. Make sure that
you don't try to compare a random sv with C<&PL_sv_undef>. For example
d314 1
a314 1
pointer. The efficiency comes by means of a little hack: instead of
d317 4
a320 3
effect, and it puts the number of bytes chopped off into the IV field
of the SV. It then moves the PV pointer (called C<SvPVX>) forward that
many bytes, and adjusts C<SvCUR> and C<SvLEN>.
d338 1
a338 1
C<Devel::Peek::Dump> helpfully reminds us that this is an offset. The
d346 1
a346 1
Perl, C<AvALLOC> points to the real start of the C array. These are
d350 1
a350 1
play when freeing the array. See C<av_shift> in F<av.c>.
d371 5
a375 3
For example, a tied SV may have a valid underlying value in the IV slot
(so SvIOKp is true), but the data should be accessed via the FETCH
routine rather than directly, so SvIOK is false. Another is when
d377 1
a377 1
private flag is set on 'lossy' values. So when an NV is converted to an
d391 1
a391 1
    AV*  av_make(I32 num, SV **ptr);
d401 1
a401 1
    void  av_unshift(AV*, I32 num);
d410 3
a412 3
    I32   av_top_index(AV*);
    SV**  av_fetch(AV*, I32 key, I32 lval);
    SV**  av_store(AV*, I32 key, SV* val);
d429 1
a429 1
    void  av_extend(AV*, I32 key);
d579 2
a580 2
Sometimes you have to store undefined values in AVs or HVs. Although
this may be a rare case, it can be tricky. That's because you're
d593 1
a593 1
Unfortunately, this isn't true. AVs use C<&PL_sv_undef> as a marker
d596 3
a598 1
false for the array generated by the XS code.
d600 1
a600 1
Other problems can occur when storing C<&PL_sv_undef> in HVs:
d610 1
a610 1
in restricted hashes. This caused such hash entries not to appear
d615 1
a615 1
C<&PL_sv_no> into AVs or HVs. Trying to modify such elements
d727 2
a728 2
class. SV can be either a reference to a blessed object or a string
containing a class name. This is the function implementing the
d778 1
a778 1
Perl uses a reference count-driven garbage collection mechanism. SVs,
d830 1
a830 1
the stack. Similarly, results returned by XSUBs (which are pushed on the
d855 2
a856 1
or if you make a variable mortal multiple times. Thinking of "Mortalization"
d963 48
d1043 2
a1044 1
convert C<sv> to type C<SVt_PVMG>. Perl then continues by adding new magic
d1051 1
a1051 1
the magic, typically the name of a variable. C<namlen> is stored in the
d1061 3
a1063 2
stored in the C<mg_type> field. The value of C<how> should be chosen
from the set of macros C<PERL_MAGIC_foo> found in F<perl.h>. Note that before
d1091 2
a1092 1
C<SV>. If you want to remove only certain magic of a C<type> based on the magic
d1150 3
a1152 2
MGf_COPY, MGf_DUP or MGf_LOCAL is set in mg_flags. This means that most
code can continue declaring a vtable as a 5-element value. These three are
d1229 1
a1229 1
of that composite type. Some internals code makes use of this case
d1284 1
a1284 1
using their magic virtual table. C<mg_findext> provides an easy way
d1314 2
a1315 1
If the SV does not have that magical feature, C<NULL> is returned. If the
d1317 2
a1318 1
returned. C<mg_findext> can be used to find a C<MAGIC> structure of an SV
d1340 1
a1340 1
in later releases, and are bracketed with [MAYCHANGE] below. If
d1349 1
a1349 1
the tie methods. Lastly it ties the two hashes together, and returns a
d1439 1
a1439 1
the block: C<goto>, C<return>, C<die>/C<eval>, etc. It is a little bit
d1445 1
a1445 1
die()). A I<block>-like construct is created by a pair of
d1450 2
a1451 2
used. (In the second case the overhead of additional localization must
be almost negligible.) Note that any XSUB is automatically enclosed in
d1474 1
a1474 1
C<p>. C<s> must be a pointer of a type which survives conversion to
d1512 1
a1512 1
The key C<key> of C<hv> is deleted at the end of I<pseudo-block>. The
d1557 1
a1557 1
using the stored value. It doesn't handle magic. Use C<save_scalar> if
d1609 1
a1609 1
macro. The pushed values will often need to be "mortal" (See
a1704 67
=head2 Memory Allocation

=head3 Allocation

All memory meant to be used with the Perl API functions should be manipulated
using the macros described in this section.  The macros provide the necessary
transparency between differences in the actual malloc implementation that is
used within perl.

It is suggested that you enable the version of malloc that is distributed
with Perl.  It keeps pools of various sizes of unallocated memory in
order to satisfy allocation requests more quickly.  However, on some
platforms, it may cause spurious malloc or free errors.

The following three macros are used to initially allocate memory :

    Newx(pointer, number, type);
    Newxc(pointer, number, type, cast);
    Newxz(pointer, number, type);

The first argument C<pointer> should be the name of a variable that will
point to the newly allocated memory.

The second and third arguments C<number> and C<type> specify how many of
the specified type of data structure should be allocated.  The argument
C<type> is passed to C<sizeof>.  The final argument to C<Newxc>, C<cast>,
should be used if the C<pointer> argument is different from the C<type>
argument.

Unlike the C<Newx> and C<Newxc> macros, the C<Newxz> macro calls C<memzero>
to zero out all the newly allocated memory.

=head3 Reallocation

    Renew(pointer, number, type);
    Renewc(pointer, number, type, cast);
    Safefree(pointer)

These three macros are used to change a memory buffer size or to free a
piece of memory no longer needed.  The arguments to C<Renew> and C<Renewc>
match those of C<New> and C<Newc> with the exception of not needing the
"magic cookie" argument.

=head3 Moving

    Move(source, dest, number, type);
    Copy(source, dest, number, type);
    Zero(dest, number, type);

These three macros are used to move, copy, or zero out previously allocated
memory.  The C<source> and C<dest> arguments point to the source and
destination starting points.  Perl will move, copy, or zero out C<number>
instances of the size of the C<type> data structure (using the C<sizeof>
function).

=head2 PerlIO

The most recent development releases of Perl have been experimenting with
removing Perl's dependency on the "normal" standard I/O suite and allowing
other stdio implementations to be used.  This involves creating a new
abstraction layer that then calls whichever implementation of stdio Perl
was compiled with.  All XSUBs should now use the functions in the PerlIO
abstraction layer and not make any assumptions about what kind of stdio
is being used.

For a complete description of the PerlIO abstraction, consult L<perlapio>.

d1708 2
a1709 2
stack machine) put an SV* on the stack. However, as an optimization
the corresponding SV is (usually) not recreated each time. The opcodes
d1723 1
a1723 1
values on the stack. The following code will not do what you think:
d1760 1
a1760 1
are created. The answer is that they are created when the current
d1762 1
a1762 1
subroutines)--is compiled. During this time a special anonymous Perl
d1766 2
a1767 1
targets for opcodes. One can deduce that an SV lives on a scratchpad
d1769 4
a1772 1
I<target>s have C<SVs_PADTMP> set.
d1774 1
a1774 1
The correspondence between OPs and I<target>s is not 1-to-1. Different
d1781 2
a1782 2
the scratchpad AV. In fact it contains a pointer to an AV of
(initially) one element, and this element is the scratchpad AV. Why do
d1785 1
a1785 1
The answer is B<recursion>, and maybe B<threads>. Both
d1787 1
a1787 1
subroutine. For the subroutine-child not write over the temporaries
d1790 1
a1790 1
scratchpads. (I<And> the lexicals should be separate anyway!)
d1800 67
d1872 1
a1872 1
Perl. Start with a simple example:
d1945 1
a1945 1
Perl core. The code which implements each operation can be found in the
d1947 1
a1947 1
is C<pp_gvsv>, and so on. As the tree above shows, different ops have
d1949 1
a1949 1
expect, and so has two children. To accommodate the various different
d1953 1
a1953 1
The simplest type of op structure is C<OP>: this has no children. Unary
d1955 3
a1957 3
C<op_first> field. Binary operators (C<BINOP>s) have not only an
C<op_first> field but also an C<op_last> field. The most complex type of
op is a C<LISTOP>, which has any number of children. In this case, the
d1959 1
a1959 1
C<op_last>. The children in between can be found by iteratively
d1963 2
a1964 2
and has no children, and a C<LOOP> may or may not have children. If the
C<op_children> field is non-zero, it behaves like a C<LISTOP>. To
d1975 1
a1975 1
the constructions it recognizes. Since I<yacc> works bottom-up, so does
d1994 1
a1994 1
By convention, check routines have names C<ck_*>. They are usually
d2026 1
a2026 1
is created, an additional pass over the code is performed. This pass
d2084 1
a2084 1
scope mechanism using C<Perl_blockhook_register>. This is used like
d2095 1
a2095 1
compiling every lexical scope. The available hooks are:
d2101 1
a2101 1
This is called just after starting a new lexical scope. Note that Perl
d2107 2
a2108 2
the second starts at the C<{> and has C<full == 0>. Both end at the
C<}>, so calls to C<start> and C<pre/post_end> will match. Anything
d2115 1
a2115 1
stack. I<o> is the root of the optree representing the scope; it is a
d2121 1
a2121 1
stack. I<o> is as above. Note that it is possible for calls to C<pre_>
d2128 1
a2128 1
FILE>, C<require> or C<use>, after the eval has been set up. I<o> is the
d2135 2
a2136 2
them in. It's best to allocate it statically, since there is no way to
free it once it's registered. The function pointers should be inserted
d2138 1
a2138 1
flags indicating which entries are valid. If you do need to allocate
d2143 1
a2143 1
that is necessary you will need to do this yourself. An entry in C<%^H>
d2146 1
a2146 1
temporarily switch entries on and off. You should also be aware that
d2157 1
a2157 1
for dumping SVs, AVs, HVs, and CVs. The C<Devel::Peek> module calls
d2198 1
a2198 1
One macro controls the major Perl build flavor: MULTIPLICITY. The
d2200 1
a2200 1
state. With multiplicity-enabled perls, PERL_IMPLICIT_CONTEXT is also
d2202 1
a2202 1
argument that represents all three data structures. MULTIPLICITY makes
d2214 1
a2214 1
pointing to it.  In either case the global struct should be initialised
d2243 2
a2244 1
part of the API. (See L</Internal Functions>.) The easiest way to be B<sure> a
d2488 1
a2488 1
Similarly, all global variables begin with C<PL_>. (By convention,
d2493 1
a2493 1
that live in F<embed.h>. Note that extension code should I<not> set
d2498 1
a2498 1
F<embed.pl> and F<embed.fnc>. F<embed.pl> also creates the prototyping
d2500 1
a2500 1
and a lot of other bits and pieces. It's important that when you add
d2502 1
a2502 1
data in the table in F<embed.fnc> as well. Here's a sample entry from
d2507 2
a2508 2
The second column is the return type, the third column the name. Columns
after that are the arguments. The first column is a set of flags:
d2514 2
a2515 1
This function is a part of the public API. All such functions should also
d2564 1
a2564 1
C<Perl_parse> to C<parse>. It must be called as C<Perl_parse>.
d2644 1
a2644 1
modules. You have to define C<NO_XSLOCKS> before including F<XSUB.h> to
d2651 1
a2651 1
to do some cleanup before giving control back to Perl. For example:
d2666 2
a2667 2
caught. Using these macros, it is not possible to just catch the
exception and ignore it. If you have to ignore the exception, you
d2679 1
a2679 1
writers. L<perlintern> is the autogenerated manual for the functions
d2699 3
a2701 2
The Perl API changes over time. New functions are added or the interfaces
of existing functions are changed. The C<Devel::PPPort> module tries to
d2706 1
a2706 1
be run as a Perl script. To generate F<ppport.h>, run:
d2712 1
a2712 1
command line switch. For example:
d2720 1
a2720 1
Perl 5.6.0 introduced Unicode support. It's important for porters and XS
d2726 2
a2727 2
In the olden, less enlightened times, we all used to use ASCII. Most of
us did, anyway. The big problem with ASCII is that it's American. Well,
d2729 1
a2729 1
particularly useful for people who don't use the Roman alphabet. What
d2731 1
a2731 1
alphabet in the upper range of the sequence, between 128 and 255. Of
d2743 3
a2745 3
possibly think of and more. There are several ways of representing these
characters, and the one Perl uses is called UTF-8. UTF-8 uses
a variable number of bytes to represent a character. You can learn more
d2750 2
a2751 2
You can't. This is because UTF-8 data is stored in bytes just like
non-UTF-8 data. The Unicode character 200, (C<0xC8> for you hex types)
d2753 2
a2754 2
C<v196.172>. Unfortunately, the non-Unicode string C<chr(196).chr(172)>
has that byte sequence as well. So you can't tell just by looking - this
d2759 2
a2760 2
you if a string contains only valid UTF-8 characters. However, it can't
do the work for you. On a character-by-character basis,
d2767 5
a2771 4
character. Characters with values 0...127 are stored in one byte, just
like good ol' ASCII. Character 128 is stored as C<v194.128>; this
continues up to character 191, which is C<v194.191>. Now we've run out of
bits (191 is binary C<10111111>) so we move on; 192 is C<v195.128>. And
d2786 1
a2786 1
over. You're on your own about bounds checking, though, so don't use it
d2792 1
a2792 1
whether the byte can be encoded as a single byte even in UTF-8):
d2819 1
a2819 1
characters. You may not skip over UTF-8 characters in this case. If you
d2828 2
a2829 2
slightly differently. A flag in the SV, C<SVf_UTF8>, indicates that the
string is internally encoded as UTF-8. Without it, the byte value is the
d2832 3
a2834 1
semantics). You can check and manipulate this flag with the
d2852 1
a2852 1
manipulating SVs. More specifically, you cannot expect to do this:
d2864 3
a2866 2
copy or reconstruct an SV just by copying the string value. Check if the
old SV has the UTF8 flag set, and act accordingly:
d2885 1
a2885 1
one of the strings to UTF-8. If you've got an SV, the easiest way to do
d2900 2
a2901 2
string argument. This is useful for having the data available for
comparisons and so on, without harming the original SV. There's also
d2908 1
a2908 1
Not really. Just remember these things:
d2914 4
a2917 3
There's no way to tell if a string is UTF-8 or not. You can tell if an SV
is UTF-8 by looking at its C<SvUTF8> flag. Don't forget to set the flag if
something should be UTF-8. Treat the flag as part of the PV, even though
d2933 2
a2934 1
Mixing UTF-8 and non-UTF-8 strings is tricky. Use C<bytes_to_utf8> to get
d2942 1
a2942 1
define your own ops. This is primarily to allow the building of
d2948 1
a2948 1
This feature is implemented as a new op type, C<OP_CUSTOM>. The Perl
d2950 1
a2950 1
not be involved in any optimizations. This also means that you can
d2954 5
a2958 5
It's important to know what custom operators won't do for you. They
won't let you add new syntax to Perl, directly. They won't even let you
add new keywords, directly. In fact, they won't change the way Perl
compiles a program at all. You have to do those changes yourself, after
Perl has compiled the program. You do this either by manipulating the op
d2964 2
a2965 2
PP function. This should be defined in XS code, and should look like
the PP ops in C<pp_*.c>. You are responsible for ensuring that your op
d2970 1
a2970 1
can produce sensible error and warning messages. Since it is possible to
d2973 1
a2973 1
it is dealing with. You should create an C<XOP> structure for each
d2976 1
a2976 1
C<Perl_custom_op_register>. A trivial example might look like:
d2992 1
a2992 1
A short name for your op. This will be included in some error messages,
d3002 1
a3002 1
Which of the various C<*OP> structures this op uses. This should be one of
d3025 1
a3025 1
This should be interpreted as 'C<PVOP>' only. The C<_OR_SVOP> is because
d3039 1
a3039 1
(*Perl_cpeep_t)(aTHX_ OP *o, OP *oldop)>. If it is set, this function
d3041 1
a3041 1
by the peephole optimizer. I<o> is the OP that needs optimizing;
@


1.15
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@d40 9
d354 1
a354 1
    I32   av_len(AV*);
d358 1
a358 1
The C<av_len> function returns the highest index value in an array (just
d465 1
a465 1
The hash algorithm is defined in the C<PERL_HASH(hash, key, klen)> macro:
d467 1
a467 4
    hash = 0;
    while (klen--)
	hash = (hash * 33) + *key++;
    hash = hash + (hash >> 5);			/* after 5.6 */
d469 3
a471 2
The last step was added in version 5.6 to improve distribution of
lower bits in the resulting hash value.
d607 5
a611 9
    SVt_IV    Scalar
    SVt_NV    Scalar
    SVt_PV    Scalar
    SVt_RV    Scalar
    SVt_PVAV  Array
    SVt_PVHV  Hash
    SVt_PVCV  Code
    SVt_PVGV  Glob (possibly a file handle)
    SVt_PVMG  Blessed or Magical Scalar
d613 1
a613 1
See the F<sv.h> header file for more details.
d1054 58
a1111 61
 (old-style char and macro)   MGVTBL          Type of magic
 --------------------------   ------          -------------
 \0 PERL_MAGIC_sv             vtbl_sv         Special scalar variable
 #  PERL_MAGIC_arylen         vtbl_arylen     Array length ($#ary)
 %  PERL_MAGIC_rhash          (none)          extra data for restricted
                                              hashes
 .  PERL_MAGIC_pos            vtbl_pos        pos() lvalue
 :  PERL_MAGIC_symtab         (none)          extra data for symbol
                                              tables
 <  PERL_MAGIC_backref        vtbl_backref    for weak ref data
 @@  PERL_MAGIC_arylen_p       (none)          to move arylen out of
                                              XPVAV
 A  PERL_MAGIC_overload       vtbl_amagic     %OVERLOAD hash
 a  PERL_MAGIC_overload_elem  vtbl_amagicelem %OVERLOAD hash element
 B  PERL_MAGIC_bm             vtbl_regexp     Boyer-Moore 
                                              (fast string search)
 c  PERL_MAGIC_overload_table vtbl_ovrld      Holds overload table 
                                              (AMT) on stash
 D  PERL_MAGIC_regdata        vtbl_regdata    Regex match position data 
                                              (@@+ and @@- vars)
 d  PERL_MAGIC_regdatum       vtbl_regdatum   Regex match position data
                                              element
 E  PERL_MAGIC_env            vtbl_env        %ENV hash
 e  PERL_MAGIC_envelem        vtbl_envelem    %ENV hash element
 f  PERL_MAGIC_fm             vtbl_regdata    Formline 
                                              ('compiled' format)
 G  PERL_MAGIC_study          vtbl_regexp     study()ed string
 g  PERL_MAGIC_regex_global   vtbl_mglob      m//g target
 H  PERL_MAGIC_hints          vtbl_hints      %^H hash
 h  PERL_MAGIC_hintselem      vtbl_hintselem  %^H hash element
 I  PERL_MAGIC_isa            vtbl_isa        @@ISA array
 i  PERL_MAGIC_isaelem        vtbl_isaelem    @@ISA array element
 k  PERL_MAGIC_nkeys          vtbl_nkeys      scalar(keys()) lvalue
 L  PERL_MAGIC_dbfile         (none)          Debugger %_<filename
 l  PERL_MAGIC_dbline         vtbl_dbline     Debugger %_<filename
                                              element
 N  PERL_MAGIC_shared         (none)          Shared between threads
 n  PERL_MAGIC_shared_scalar  (none)          Shared between threads
 o  PERL_MAGIC_collxfrm       vtbl_collxfrm   Locale transformation
 P  PERL_MAGIC_tied           vtbl_pack       Tied array or hash
 p  PERL_MAGIC_tiedelem       vtbl_packelem   Tied array or hash element
 q  PERL_MAGIC_tiedscalar     vtbl_packelem   Tied scalar or handle
 r  PERL_MAGIC_qr             vtbl_regexp     precompiled qr// regex
 S  PERL_MAGIC_sig            (none)          %SIG hash
 s  PERL_MAGIC_sigelem        vtbl_sigelem    %SIG hash element
 t  PERL_MAGIC_taint          vtbl_taint      Taintedness
 U  PERL_MAGIC_uvar           vtbl_uvar       Available for use by
                                              extensions
 u  PERL_MAGIC_uvar_elem      (none)          Reserved for use by
                                              extensions
 V  PERL_MAGIC_vstring        vtbl_vstring    SV was vstring literal
 v  PERL_MAGIC_vec            vtbl_vec        vec() lvalue
 w  PERL_MAGIC_utf8           vtbl_utf8       Cached UTF-8 information
 x  PERL_MAGIC_substr         vtbl_substr     substr() lvalue
 y  PERL_MAGIC_defelem        vtbl_defelem    Shadow "foreach" iterator
                                              variable / smart parameter
                                              vivification
 ]  PERL_MAGIC_checkcall      (none)          inlining/mutation of call
                                              to this CV
 ~  PERL_MAGIC_ext            (none)          Available for use by
                                              extensions
d1539 1
a1539 1
    
d1557 1
a1557 1
    I32  call_argv(const char*, I32, register char**);
d1927 1
a1927 1
        prev_peepp(o);
d1941 1
a1941 1
        prev_rpeepp(orig_o);
d2640 2
a2641 1
do the work for you. On a character-by-character basis, C<is_utf8_char>
d2815 1
a2815 1
Custom operator support is a new experimental feature that allows you to
d2837 1
a2837 1
creating ops with the type C<OP_CUSTOM> and the C<pp_addr> of your own
@


1.14
log
@merge in perl 5.12.2 plus local changes
@
text
@d59 1
a59 1
the SV has value undef.
d62 2
a63 1
    SV *sv = newSV(10);  /* 10 (+1) bytes of uninitialised storage allocated  */
d73 2
a74 1
    void  sv_vsetpvfn(SV*, const char*, STRLEN, va_list *, SV **, I32, bool *);
d82 2
a83 1
string terminating with a NUL character.
d134 1
a134 1
    char * ptr;
d150 1
a150 1
add a byte for the a trailing NUL (perl's own string functions typically do
d179 2
a180 1
    void  sv_vcatpvfn(SV*, const char*, STRLEN, va_list *, SV **, I32, bool);
d307 1
a307 1
The are various ways in which the private and public flags may differ.
d331 1
a331 1
Once the AV has been created, the following operations are possible on AVs:
d349 1
a349 1
The C<av_len> function returns the highest index value in array (just
d360 2
d389 1
a389 1
Once the HV has been created, the following operations are possible on HVs:
d408 2
a409 1
These two functions check if a hash table entry exists, and deletes it.
d426 1
a426 1
Perl keeps the actual data in linked list of structures with a typedef of HE.
d549 2
a550 2
You can run into similar problems when you store C<&PL_sv_true> or
C<&PL_sv_false> into AVs or HVs. Trying to modify such elements
d556 1
a556 1
C<&PL_sv_undef>, C<&PL_sv_true> and C<&PL_sv_false> with AVs and
d569 1
a569 1
(including references).
d607 1
a607 1
    SVt_PVGV  Glob (possible a file handle)
d629 3
a631 3
Upgrades rv to reference if not already one.  Creates new SV for rv to
point to.  If C<classname> is non-null, the SV is blessed into the specified
class.  SV is returned.
d635 3
a637 2
Copies integer, unsigned integer or double into an SV whose reference is C<rv>.  SV is blessed
if C<classname> is non-null.
d643 3
a645 2
Copies the pointer value (I<the address, not the string!>) into an SV whose
reference is rv.  SV is blessed if C<classname> is non-null.
d647 1
a647 1
	SV* sv_setref_pv(SV* rv, const char* classname, PV iv);
d649 3
a651 2
Copies string into an SV whose reference is C<rv>.  Set length to 0 to let
Perl calculate the string length.  SV is blessed if C<classname> is non-null.
d653 2
a654 1
	SV* sv_setref_pvn(SV* rv, const char* classname, PV iv, STRLEN length);
d656 2
a657 2
Tests whether the SV is blessed into the specified class.  It does not
check inheritance relationships.
d661 1
a661 1
Tests whether the SV is a reference to a blessed object.
d665 4
a668 3
Tests whether the SV is derived from the specified class. SV can be either
a reference to a blessed object or a string containing a class name. This
is the function implementing the C<UNIVERSAL::isa> functionality.
d686 1
a686 1
Notice the use of TRUE as the second parameter.  The new variable can now
d690 1
a690 1
C<TRUE> argument to enable certain extra features.  Those bits are:
d781 1
a781 1
Because C<sv_newmortal> gives the new SV no value,it must normally be given one
d796 1
a796 1
For example if you are passing an SV which you I<know> has high enough REFCNT
d927 1
a927 1
    void sv_magic(SV* sv, SV* obj, int how, const char* name, I32 namlen);
d973 1
a973 1
    void sv_unmagic(SV *sv, int type);
d978 6
d1000 2
a1001 1
    int  (*svt_copy)(SV *sv, MAGIC* mg, SV *nsv, const char *name, I32 namlen);
d1011 12
a1022 11
    Function pointer    Action taken
    ----------------    ------------
    svt_get             Do something before the value of the SV is retrieved.
    svt_set             Do something after the SV is assigned a value.
    svt_len             Report on the SV's length.
    svt_clear           Clear something the SV represents.
    svt_free            Free any extra storage associated with the SV.

    svt_copy            copy tied variable magic to a tied element
    svt_dup             duplicate a magic structure during thread cloning
    svt_local           copy magic to local value during 'local'
d1044 68
a1111 47
    mg_type
    (old-style char and macro)   MGVTBL          Type of magic
    --------------------------   ------          -------------
    \0 PERL_MAGIC_sv             vtbl_sv         Special scalar variable
    A  PERL_MAGIC_overload       vtbl_amagic     %OVERLOAD hash
    a  PERL_MAGIC_overload_elem  vtbl_amagicelem %OVERLOAD hash element
    c  PERL_MAGIC_overload_table (none)          Holds overload table (AMT)
                                                 on stash
    B  PERL_MAGIC_bm             vtbl_bm         Boyer-Moore (fast string search)
    D  PERL_MAGIC_regdata        vtbl_regdata    Regex match position data
                                                 (@@+ and @@- vars)
    d  PERL_MAGIC_regdatum       vtbl_regdatum   Regex match position data
                                                 element
    E  PERL_MAGIC_env            vtbl_env        %ENV hash
    e  PERL_MAGIC_envelem        vtbl_envelem    %ENV hash element
    f  PERL_MAGIC_fm             vtbl_fm         Formline ('compiled' format)
    g  PERL_MAGIC_regex_global   vtbl_mglob      m//g target / study()ed string
    H  PERL_MAGIC_hints          vtbl_hints      %^H hash
    h  PERL_MAGIC_hintselem      vtbl_hintselem  %^H hash element
    I  PERL_MAGIC_isa            vtbl_isa        @@ISA array
    i  PERL_MAGIC_isaelem        vtbl_isaelem    @@ISA array element
    k  PERL_MAGIC_nkeys          vtbl_nkeys      scalar(keys()) lvalue
    L  PERL_MAGIC_dbfile         (none)          Debugger %_<filename
    l  PERL_MAGIC_dbline         vtbl_dbline     Debugger %_<filename element
    o  PERL_MAGIC_collxfrm       vtbl_collxfrm   Locale collate transformation
    P  PERL_MAGIC_tied           vtbl_pack       Tied array or hash
    p  PERL_MAGIC_tiedelem       vtbl_packelem   Tied array or hash element
    q  PERL_MAGIC_tiedscalar     vtbl_packelem   Tied scalar or handle
    r  PERL_MAGIC_qr             vtbl_qr         precompiled qr// regex
    S  PERL_MAGIC_sig            vtbl_sig        %SIG hash
    s  PERL_MAGIC_sigelem        vtbl_sigelem    %SIG hash element
    t  PERL_MAGIC_taint          vtbl_taint      Taintedness
    U  PERL_MAGIC_uvar           vtbl_uvar       Available for use by extensions
    v  PERL_MAGIC_vec            vtbl_vec        vec() lvalue
    V  PERL_MAGIC_vstring        (none)          v-string scalars
    w  PERL_MAGIC_utf8           vtbl_utf8       UTF-8 length+offset cache
    x  PERL_MAGIC_substr         vtbl_substr     substr() lvalue
    y  PERL_MAGIC_defelem        vtbl_defelem    Shadow "foreach" iterator
                                                 variable / smart parameter
                                                 vivification
    #  PERL_MAGIC_arylen         vtbl_arylen     Array length ($#ary)
    .  PERL_MAGIC_pos            vtbl_pos        pos() lvalue
    <  PERL_MAGIC_backref        vtbl_backref    back pointer to a weak ref 
    ~  PERL_MAGIC_ext            (none)          Available for use by extensions
    :  PERL_MAGIC_symtab         (none)          hash used as symbol table
    %  PERL_MAGIC_rhash          (none)          hash used as restricted hash
    @@  PERL_MAGIC_arylen_p       vtbl_arylen_p   pointer to $#a from @@a
d1113 1
d1164 1
a1164 1
hook.  See L<Hash::Util::Fieldhash/Guts> for a detailed description.
d1170 14
a1183 2
For C<PERL_MAGIC_ext> magic, it may also be appropriate to add an I32
'signature' at the top of the private data area and check that.
d1199 2
a1200 1
    MAGIC* mg_find(SV*, int type); /* Finds the magic pointer of that type */
d1202 10
a1211 3
This routine returns a pointer to the C<MAGIC> structure stored in the SV.
If the SV does not have that magical feature, C<NULL> is returned.  Also,
if the SV is not of type SVt_PVMG, Perl may core dump.
d1503 3
d1517 1
a1517 1
This macro automatically adjust the stack for you, if needed.  Thus, you
d1527 22
d1649 1
a1649 1
The most recent development releases of Perl has been experimenting with
d1911 35
a1945 3
additional complications for conditionals).  These optimizations are
done in the subroutine peep().  Optimizations performed at this stage
are subject to the same restrictions as in the pass 2.
d1964 70
d2142 1
a2142 1
configurations in future.
d2234 1
a2234 1
You have to do nothing new in your extension to get this; since
d2422 1
a2422 1
This does not need a interpreter context, so the definition has no
d2424 1
a2424 1
L<perlguts/Background and PERL_IMPLICIT_CONTEXT>.)
d2673 1
d2675 1
d2679 1
a2679 1
        uv = utf8_to_uv(utf);
d2684 2
a2685 2
You can also see in that example that we use C<utf8_to_uv> to get the
value of the character; the inverse function C<uv_to_utf8> is available
d2690 1
a2690 1
        utf8 = uv_to_utf8(utf8, uv);
d2790 1
a2790 1
is UTF-8 by looking at is C<SvUTF8> flag. Don't forget to set the flag if
d2796 1
a2796 1
If a string is UTF-8, B<always> use C<utf8_to_uv> to get at the value,
d2802 1
a2802 1
C<uv_to_utf8>, unless C<UTF8_IS_INVARIANT(uv))> in which case
d2845 73
a2917 4
Perl uses the value of C<< o->op_ppaddr >> as a key into the
C<PL_custom_op_descs> and C<PL_custom_op_names> hashes. This means you
need to enter a name and description for your op at the appropriate
place in the C<PL_custom_op_names> and C<PL_custom_op_descs> hashes.
@


1.13
log
@Merge in perl 5.10.1
@
text
@d281 1
a281 1
increasing C<AvARRAY> by one and decreasing C<AvFILL> and C<AvLEN>.
d789 1
a789 1
The mortal routines are not just for SVs -- AVs and HVs can be
d982 1
a982 1
    int  (*svt_copy)(SV *sv, MAGIC* mg, SV *nsv, const char *name, int namlen);
d1041 1
a1041 1
    H  PERL_MAGIC_hints          vtbl_sig        %^H hash
d1627 4
a1630 5
are created. The answer is that they are created when the current unit --
a subroutine or a file (for opcodes for statements outside of
subroutines) -- is compiled. During this time a special anonymous Perl
array is created, which is called a scratchpad for the current
unit.
d1897 1
a1897 1
mutli-threaded perls possible (with the ithreads threading model, related
d2184 7
a2190 3
Inside the Perl core, you can get at the functions either with or
without the C<Perl_> prefix, thanks to a bunch of defines that live in
F<embed.h>. This header file is generated automatically from
d2518 2
a2519 1
as iso-8859-1). You can check and manipulate this flag with the
d2659 1
a2659 2
Forthcoming versions of C<B::Generate> (version 1.0 and above) should
directly support the creation of custom ops by name.
d2674 1
a2674 1
perlapi(1), perlintern(1), perlxs(1), perlembed(1)
@


1.12
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@d194 1
a194 1
    SV*  get_sv("package::varname", FALSE);
d370 1
a370 1
    AV*  get_av("package::varname", FALSE);
d445 1
a445 1
    HV*  get_hv("package::varname", FALSE);
d603 1
a603 1
    See the sv.h header file for more details.
d670 3
a672 3
    SV*  get_sv("package::varname", TRUE);
    AV*  get_av("package::varname", TRUE);
    HV*  get_hv("package::varname", TRUE);
d881 1
a881 1
    SV* sv = get_sv("dberror", TRUE);
d988 3
a990 3
currently 19 types (or 21 with overloading turned on).  These different
structures contain pointers to various routines that perform additional
actions depending on which function is being called.
d1962 1
a1962 1
C<pTHX_> is one of a number of macros (in perl.h) that hide the
d2031 1
a2031 1
with extensions: whenever XSUB.h is #included, it redefines the aTHX
d2168 1
a2168 1
calls (see win32/perllib.c) for the default perl executable, but for a
d2613 1
a2613 3
a new string which is UTF-8 encoded. There are tricks you can use to
delay deciding whether you need to use a UTF-8 string until you get to a
high character - C<HALF_UPGRADE> is one of those.
@


1.11
log
@merge in perl 5.8.8
@
text
@d817 2
a818 2
    HV*  gv_stashpv(const char* name, I32 create)
    HV*  gv_stashsv(SV*, I32 create)
d822 1
a822 1
C<HV*>.  The C<create> flag will create a new package if it is set.
d904 1
a906 1
        I32         mg_len;
d973 2
a974 1
The C<MGVTBL> has five pointers to the following routine types:
d982 5
d997 1
a997 1
    svt_clear		Clear something the SV represents.
d1000 4
d1015 7
d1025 4
a1028 4
    (old-style char and macro)   MGVTBL         Type of magic
    --------------------------   ------         ----------------------------
    \0 PERL_MAGIC_sv             vtbl_sv        Special scalar variable
    A  PERL_MAGIC_overload       vtbl_amagic    %OVERLOAD hash
d1030 42
a1071 38
    c  PERL_MAGIC_overload_table (none)         Holds overload table (AMT)
						on stash
    B  PERL_MAGIC_bm             vtbl_bm        Boyer-Moore (fast string search)
    D  PERL_MAGIC_regdata        vtbl_regdata   Regex match position data
						(@@+ and @@- vars)
    d  PERL_MAGIC_regdatum       vtbl_regdatum  Regex match position data
						element
    E  PERL_MAGIC_env            vtbl_env       %ENV hash
    e  PERL_MAGIC_envelem        vtbl_envelem   %ENV hash element
    f  PERL_MAGIC_fm             vtbl_fm        Formline ('compiled' format)
    g  PERL_MAGIC_regex_global   vtbl_mglob     m//g target / study()ed string
    I  PERL_MAGIC_isa            vtbl_isa       @@ISA array
    i  PERL_MAGIC_isaelem        vtbl_isaelem   @@ISA array element
    k  PERL_MAGIC_nkeys          vtbl_nkeys     scalar(keys()) lvalue
    L  PERL_MAGIC_dbfile         (none)         Debugger %_<filename
    l  PERL_MAGIC_dbline         vtbl_dbline    Debugger %_<filename element
    m  PERL_MAGIC_mutex          vtbl_mutex     ???
    o  PERL_MAGIC_collxfrm       vtbl_collxfrm  Locale collate transformation
    P  PERL_MAGIC_tied           vtbl_pack      Tied array or hash
    p  PERL_MAGIC_tiedelem       vtbl_packelem  Tied array or hash element
    q  PERL_MAGIC_tiedscalar     vtbl_packelem  Tied scalar or handle
    r  PERL_MAGIC_qr             vtbl_qr        precompiled qr// regex
    S  PERL_MAGIC_sig            vtbl_sig       %SIG hash
    s  PERL_MAGIC_sigelem        vtbl_sigelem   %SIG hash element
    t  PERL_MAGIC_taint          vtbl_taint     Taintedness
    U  PERL_MAGIC_uvar           vtbl_uvar      Available for use by extensions
    v  PERL_MAGIC_vec            vtbl_vec       vec() lvalue
    V  PERL_MAGIC_vstring        (none)         v-string scalars
    w  PERL_MAGIC_utf8           vtbl_utf8      UTF-8 length+offset cache
    x  PERL_MAGIC_substr         vtbl_substr    substr() lvalue
    y  PERL_MAGIC_defelem        vtbl_defelem   Shadow "foreach" iterator
						variable / smart parameter
						vivification
    *  PERL_MAGIC_glob           vtbl_glob      GV (typeglob)
    #  PERL_MAGIC_arylen         vtbl_arylen    Array length ($#ary)
    .  PERL_MAGIC_pos            vtbl_pos       pos() lvalue
    <  PERL_MAGIC_backref        vtbl_backref   ???
    ~  PERL_MAGIC_ext            (none)         Available for use by extensions
d1113 11
d1189 1
a1189 1
        stash = gv_stashpv("MyTie", TRUE);
d1382 2
a1383 1
using the stored value.
d1893 33
a1925 7
Two macros control the major Perl build flavors: MULTIPLICITY and
USE_5005THREADS.  The MULTIPLICITY build has a C structure
that packages all the interpreter state, and there is a similar thread-specific
data structure under USE_5005THREADS.  In both cases,
PERL_IMPLICIT_CONTEXT is also normally defined, and enables the
support for passing in a "hidden" first argument that represents all three
data structures.
d2058 1
a2058 1
        static my_private_function(int arg1, int arg2);
d2060 1
a2060 1
        static SV *
d2098 1
a2098 1
        static my_private_function(pTHX_ int arg1, int arg2);
d2100 1
a2100 1
        static SV *
d2128 7
d2161 2
a2162 2
PERL_IMPLICIT_SYS macro.  Currently it only works with USE_ITHREADS
and USE_5005THREADS on Windows (see inside iperlsys.h).
d2330 33
d2433 2
a2434 2
a variable number of bytes to represent a character, instead of just
one. You can learn more about Unicode at http://www.unicode.org/
d2445 5
a2449 4
The API function C<is_utf8_string> can help; it'll tell you if a string
contains only valid UTF-8 characters. However, it can't do the work for
you. On a character-by-character basis, C<is_utf8_char> will tell you
whether the current character in a string is valid UTF-8.
d2454 2
a2455 2
character. Characters with values 1...128 are stored in one byte, just
like good ol' ASCII. Character 129 is stored as C<v194.129>; this
d2512 5
a2516 3
slightly differently. If a string has been identified as being UTF-8
encoded, Perl will set a flag in the SV, C<SVf_UTF8>. You can check and
manipulate this flag with the following macros:
d2528 1
a2528 1
flagged is UTF-8, and contains a byte sequence that could be UTF-8 -
d2546 1
a2546 1
old SV has the UTF-8 flag set, and act accordingly:
d2559 1
a2559 1
the SV is not enough to copy the UTF-8 flags, even less right is just
d2564 3
a2566 3
If you're mixing UTF-8 and non-UTF-8 strings, you might find it necessary
to upgrade one of the strings to UTF-8. If you've got an SV, the easiest
way to do this is:
d2577 1
a2577 1
by the end user, it can cause problems.
@


1.10
log
@sync in-tree perl with 5.8.6
@
text
@d129 5
a133 5
	SV *s;
	STRLEN len;
	char * ptr;
	ptr = SvPV(s, len);
	foo(ptr, len);
d307 1
a307 1
numeric conversion has occured and precision has been lost: only the
d1488 3
a1490 8
    New(x, pointer, number, type);
    Newc(x, pointer, number, type, cast);
    Newz(x, pointer, number, type);

The first argument C<x> was a "magic cookie" that was used to keep track
of who called the macro, to help when debugging memory problems.  However,
the current code makes no use of this feature (most Perl developers now
use run-time memory checkers), so this argument can be any number.
d1492 1
a1492 1
The second argument C<pointer> should be the name of a variable that will
d1495 1
a1495 1
The third and fourth arguments C<number> and C<type> specify how many of
d1497 1
a1497 1
C<type> is passed to C<sizeof>.  The final argument to C<Newc>, C<cast>,
d1501 1
a1501 1
Unlike the C<New> and C<Newc> macros, the C<Newz> macro calls C<memzero>
d2138 2
a2139 1
This function is a part of the public API.
d2143 2
a2144 1
This function has a C<Perl_> prefix; ie, it is defined as C<Perl_av_fetch>
d2149 1
a2149 1
look at in a second.
d2159 2
a2160 2
This is a static function and is defined as C<S_whatever>, and usually
called within the sources as C<whatever(...)>.
d2164 2
a2165 1
This does not use C<aTHX_> and C<pTHX> to pass interpreter context. (See
d2210 4
d2287 20
d2524 1
a2524 1
C<gvsv, gvsv, add>.) 
d2556 1
a2556 3
directly support the creation of custom ops by name; C<Opcodes::Custom> 
will provide functions which make it trivial to "register" custom ops to
the Perl interpreter.
@


1.9
log
@merge 5.8.5 into HEAD
remove now-unused files
crank libperl shared library major number
update Makefile.bsd-wrapper
tweak openbsd hints file for arm and m68k
@
text
@d929 5
a933 2
C<mg_len> field and if C<name> is non-null and C<namlen> E<gt>= 0 a malloc'd
copy of the name is stored in C<mg_ptr> field.
d949 3
@


1.8
log
@merge local changes into perl-5.8.3
@
text
@d204 16
a219 3
Its address can be used whenever an C<SV*> is needed.
However, you have to be careful when using C<&PL_sv_undef> as a value in AVs
or HVs (see L<AVs, HVs and undefined values>).
d1396 1
a1396 1
L</Reference Counts and Mortality>).
d1399 2
a1401 1
    PUSHs(sv_2mortal(newSVnv(3.141592)))
d1417 3
a1419 2
C<PUSHi>, C<PUSHn> and C<PUSHp> are I<not> suited to XSUBs which return
multiple results, see L</Putting a C value on Perl stack>.
d1553 1
a1553 1
others, which use it via C<(X)PUSH[pni]>.
d1565 19
a1583 2
to 20. If you need to push multiple different values, use C<XPUSHs>,
which bypasses C<TARG>.
d1585 1
a1585 1
On a related note, if you do use C<(X)PUSH[npi]>, then you're going to
d1587 2
a1588 1
macros can make use of the local variable C<TARG>.
@


1.7
log
@Resolve conflicts for perl 5.8.2, remove old files, and add OpenBSD-specific scaffolding
@
text
@d1765 4
a1768 4
functions in F<run.c>.  C<Perl_runops_debug> is used with DEBUGGING and
C<Perl_runops_standard> is used otherwise.  For fine control over the
execution of the compile tree it is possible to provide your own runops
function.
@


1.6
log
@Resolve conflicts, remove old files, merge local changes
@
text
@d8 1
a8 1
containing some info on the basic workings of the Perl core. It is far
d46 2
a47 2
    SV*  newSVpv(const char*, int);
    SV*  newSVpvn(const char*, int);
d51 9
a59 4
If you require more complex initialisation you can create an empty SV with
newSV(len).  If C<len> is 0 an empty SV of type NULL is returned, else an
SV of type PV is returned with len + 1 (for the NUL) bytes of storage
allocated, accessible via SvPVX.  In both cases the SV has value undef.
d61 2
a62 2
    SV*  newSV(0);   /* no storage allocated  */
    SV*  newSV(10);  /* 10 (+1) bytes of uninitialised storage allocated  */
d64 1
a64 1
To change the value of an *already-existing* SV, there are eight routines:
d70 1
a70 1
    void  sv_setpvn(SV*, const char*, int)
a93 4
STRLEN is an integer type (Size_t, usually defined as size_t in
config.h) guaranteed to be large enough to represent the size of
any string that perl can handle.

d203 8
a210 6
The scalar C<undef> value is stored in an SV instance called C<PL_sv_undef>.  Its
address can be used whenever an C<SV*> is needed.

There are also the two values C<PL_sv_yes> and C<PL_sv_no>, which contain Boolean
TRUE and FALSE values, respectively.  Like C<PL_sv_undef>, their addresses can
be used whenever an C<SV*> is needed.
d224 2
a225 2
bus error, or just weird results.  Change the zero to C<&PL_sv_undef> in the first
line and all will be well.
d494 52
d594 1
a594 1
References are also used to support object-oriented programming.  In the
d603 2
a604 2
The C<sv> argument must be a reference.  The C<stash> argument specifies
which class the reference will belong to.  See
d743 3
a745 3
is made mortal to have it cleaned up automatically when stack is popped.
Similarly results returned by XSUBs (which go in the stack) are often
made mortal.
d782 2
a783 2
A "stash" is a hash that contains all of the different objects that
are contained within a package.  Each key of the stash is a symbol
d796 5
a800 5
There is a single stash called "PL_defstash" that holds the items that exist
in the "main" package.  To get at the items in other packages, append the
string "::" to the package name.  The items in the "Foo" package are in
the stash "Foo::" in PL_defstash.  The items in the "Bar::Baz" package are
in the stash "Baz::" in "Bar::"'s stash.
d921 1
a921 1
See the "Magic Virtual Table" section below.  The C<how> argument is also
d923 1
a923 1
from the set of macros C<PERL_MAGIC_foo> found perl.h. Note that before
d962 1
a962 1
This MGVTBL structure is set at compile-time in C<perl.h> and there are
d1021 2
d1034 4
a1037 4
uppercase letter is used to represent some kind of composite type (a list
or a hash), and the lowercase letter is used to represent an element of
that composite type. Some internals code makes use of this case
relationship.
d1382 2
a1383 1
macro. The values pushed will often need to be "mortal" (See L</Reference Counts and Mortality>).
d1453 2
d1465 2
a1470 2
These three macros are used to initially allocate memory.

d1488 2
d1499 2
d1629 2
a1630 2
If you have your perl compiled for debugging (usually done with C<-D
optimize=-g> on C<Configure> command line), you may examine the
d1699 3
d1867 1
a1867 1
  Perl_sv_setsv(pTHX_ SV* dsv, SV* ssv)
d1886 1
a1886 1
is normally hidden via macros.  Consider C<sv_setsv>.  It expands into
d1889 2
a1890 2
    ifdef PERL_IMPLICIT_CONTEXT
      define sv_setsv(a,b)      Perl_sv_setsv(aTHX_ a, b)
d1892 3
a1894 3
    else
      define sv_setsv           Perl_sv_setsv
    endif
d1898 1
a1898 1
    sv_setsv(foo, bar);
d1942 1
a1942 1
        sv_setsv(asv, bsv);
d1947 1
a1947 1
        Perl_sv_setsv(Perl_get_context(), asv, bsv);
d1951 1
a1951 1
        Perl_sv_setsv(asv, bsv);
d2080 1
a2080 1
world are be prefixed by C<Perl_> so that they will not conflict with XS
d2083 1
a2083 1
static functions start with C<S_>)
d2088 6
a2093 5
F<embed.pl>. F<embed.pl> also creates the prototyping header files for
the internal functions, generates the documentation and a lot of other
bits and pieces. It's important that when you add a new function to the
core or change an existing one, you change the data in the table at the
end of F<embed.pl> as well. Here's a sample entry from that table:
d2152 5
a2156 1
=item j
d2158 1
a2158 2
This function is not a member of C<CPerlObj>. If you don't know
what this means, don't use it.
d2160 9
a2168 1
=item x
d2170 2
a2171 1
This function isn't exported out of the Perl core.
d2175 3
a2177 2
If you edit F<embed.pl>, you will need to run C<make regen_headers> to
force a rebuild of F<embed.h> and other auto-generated files.
d2272 1
a2272 1
characters, and the one Perl uses is called UTF8. UTF8 uses
d2276 1
a2276 1
=head2 How can I recognise a UTF8 string?
d2278 2
a2279 2
You can't. This is because UTF8 data is stored in bytes just like
non-UTF8 data. The Unicode character 200, (C<0xC8> for you hex types)
d2286 1
a2286 1
contains only valid UTF8 characters. However, it can't do the work for
d2288 1
a2288 1
whether the current character in a string is valid UTF8.
d2290 1
a2290 1
=head2 How does UTF8 represent Unicode characters?
d2292 1
a2292 1
As mentioned above, UTF8 uses a variable number of bytes to store a
d2299 1
a2299 1
Assuming you know you're dealing with a UTF8 string, you can find out
d2309 1
a2309 1
Another way to skip over characters in a UTF8 string is to use
d2314 4
a2317 3
All bytes in a multi-byte UTF8 character will have the high bit set, so
you can test if you need to do something special with this character
like this:
d2319 2
a2320 1
    UV uv;
d2322 2
a2323 2
    if (utf & 0x80)
        /* Must treat this as UTF8 */
d2331 1
a2331 1
for putting a UV into UTF8:
d2333 1
a2333 1
    if (uv > 0x80)
d2341 5
a2345 5
you're ever in a situation where you have to match UTF8 and non-UTF8
characters. You may not skip over UTF8 characters in this case. If you
do this, you'll lose the ability to match hi-bit non-UTF8 characters;
for instance, if your UTF8 string contains C<v196.172>, and you skip
that character, you can never match a C<chr(200)> in a non-UTF8 string.
d2348 1
a2348 1
=head2 How does Perl store UTF8 strings?
d2365 2
a2366 2
flagged is UTF8, and contains a byte sequence that could be UTF8 -
especially when combining non-UTF8 and UTF8 strings.
d2383 1
a2383 1
old SV has the UTF8 flag set, and act accordingly:
d2392 1
a2392 1
not it's dealing with UTF8 data, so that it can handle the string
d2395 5
a2399 1
=head2 How do I convert a string to UTF8?
d2401 2
a2402 2
If you're mixing UTF8 and non-UTF8 strings, you might find it necessary
to upgrade one of the strings to UTF8. If you've got an SV, the easiest
d2416 1
a2416 1
Instead, C<bytes_to_utf8> will give you a UTF8-encoded B<copy> of its
d2431 3
a2433 3
There's no way to tell if a string is UTF8 or not. You can tell if an SV
is UTF8 by looking at is C<SvUTF8> flag. Don't forget to set the flag if
something should be UTF8. Treat the flag as part of the PV, even though
d2438 2
a2439 2
If a string is UTF8, B<always> use C<utf8_to_uv> to get at the value,
unless C<!(*s & 0x80)> in which case you can use C<*s>.
d2443 3
a2445 2
When writing to a UTF8 string, B<always> use C<uv_to_utf8>, unless
C<uv < 0x80> in which case you can use C<*s = uv>.
d2449 3
a2451 3
Mixing UTF8 and non-UTF8 strings is tricky. Use C<bytes_to_utf8> to get
a new string which is UTF8 encoded. There are tricks you can use to
delay deciding whether you need to use a UTF8 string until you get to a
a2508 5

API Listing originally by Dean Roehrich E<lt>roehrich@@cray.comE<gt>.

Modifications to autogenerate the API listing (L<perlapi>) by Benjamin
Stuhl.
@


1.5
log
@merge in perl 5.6.1 with our local changes
@
text
@d32 2
a33 1
as well.)
d37 3
a39 3
An SV can be created and loaded with one command.  There are four types of
values that can be loaded: an integer value (IV), a double (NV),
a string (PV), and another scalar (SV).
d41 1
a41 1
The six routines are:
d44 1
d51 9
a59 1
To change the value of an *already-existing* SV, there are seven routines:
d67 1
a67 1
    void  sv_setpvfn(SV*, const char*, STRLEN, va_list *, SV **, I32, bool);
d80 1
a80 1
C<sv_setpvfn> is an analogue of C<vsprintf>, but it allows you to specify
d90 1
a90 1
config.h) guaranteed to be large enough to represent the size of 
d175 1
a175 1
    void  sv_catpvfn(SV*, const char*, STRLEN, va_list *, SV **, I32, bool);
d231 1
a231 1
somewhere inside the the PV, and it discards everything before the
d237 1
a237 1
many bytes, and adjusts C<SvCUR> and C<SvLEN>. 
d260 1
a260 1
Something similar to the offset hack is perfomed on AVs to enable
d287 8
d418 1
a418 1
            /* Return a SV pointer to the value of the HE
d560 1
a560 1
Copies integer or double into an SV whose reference is C<rv>.  SV is blessed
d564 1
d592 1
a592 1
To check if you've got an object derived from a specific class you have 
d612 19
a630 4
    GV_ADDMULTI	Marks the variable as multiply defined, thus preventing the
		"Name <varname> used only once: possible typo" warning.
    GV_ADDWARN	Issues the warning "Had to create <varname> unexpectedly" if
		the variable did not exist before the function was called.
d637 1
a637 1
Perl uses an reference count-driven garbage collection mechanism. SVs,
d686 5
a690 3
You should be careful about creating mortal variables.  Strange things
can happen if you make the same value mortal within multiple contexts,
or if you make a variable mortal multiple times.
d698 1
a698 1
The first call creates a mortal SV, the second converts an existing
d701 19
d853 5
a857 5
set the C<SVt_PVMG> flag for the C<sv>.  Perl then continues by adding
it to the beginning of the linked list of magical features.  Any prior
entry of the same type of magic is deleted.  Note that this can be
overridden, and multiple instances of the same type of magic can be
associated with an SV.
d861 1
a861 1
C<mg_len> field and if C<name> is non-null and C<namlen> >= 0 a malloc'd
d867 5
a871 1
stored in the C<mg_type> field.
d876 2
a877 2
the C<how> argument is "#", or if it is a NULL pointer, then C<obj> is
merely stored, without the reference count being incremented.
d894 1
a894 1
The C<mg_virtual> field in the C<MAGIC> structure is a pointer to a
d914 1
a914 1
    svt_get             Do something after the value of the SV is retrieved.
d921 1
a921 1
to an C<mg_type> of '\0') contains:
d925 5
a929 5
Thus, when an SV is determined to be magical and of type '\0', if a get
operation is being performed, the routine C<magic_get> is called.  All
the various routines for the various magical types begin with C<magic_>.
NOTE: the magic routines are not considered part of the Perl API, and may
not be exported by the Perl library.
d933 42
a974 34
    mg_type  MGVTBL              Type of magic
    -------  ------              ----------------------------
    \0       vtbl_sv             Special scalar variable
    A        vtbl_amagic         %OVERLOAD hash
    a        vtbl_amagicelem     %OVERLOAD hash element
    c        (none)              Holds overload table (AMT) on stash
    B        vtbl_bm             Boyer-Moore (fast string search)
    D        vtbl_regdata        Regex match position data (@@+ and @@- vars)
    d        vtbl_regdatum       Regex match position data element
    E        vtbl_env            %ENV hash
    e        vtbl_envelem        %ENV hash element
    f        vtbl_fm             Formline ('compiled' format)
    g        vtbl_mglob          m//g target / study()ed string
    I        vtbl_isa            @@ISA array
    i        vtbl_isaelem        @@ISA array element
    k        vtbl_nkeys          scalar(keys()) lvalue
    L        (none)              Debugger %_<filename 
    l        vtbl_dbline         Debugger %_<filename element
    o        vtbl_collxfrm       Locale transformation
    P        vtbl_pack           Tied array or hash
    p        vtbl_packelem       Tied array or hash element
    q        vtbl_packelem       Tied scalar or handle
    S        vtbl_sig            %SIG hash
    s        vtbl_sigelem        %SIG hash element
    t        vtbl_taint          Taintedness
    U        vtbl_uvar           Available for use by extensions
    v        vtbl_vec            vec() lvalue
    x        vtbl_substr         substr() lvalue
    y        vtbl_defelem        Shadow "foreach" iterator variable /
                                  smart parameter vivification
    *        vtbl_glob           GV (typeglob)
    #        vtbl_arylen         Array length ($#ary)
    .        vtbl_pos            pos() lvalue
    ~        (none)              Available for use by extensions
d979 2
a980 1
that composite type.
d982 6
a987 6
The '~' and 'U' magic types are defined specifically for use by
extensions and will not be used by perl itself.  Extensions can use
'~' magic to 'attach' private information to variables (typically
objects).  This is especially useful because there is no way for
normal perl code to corrupt this private information (unlike using
extra elements of a hash object).
d989 2
a990 2
Similarly, 'U' magic can be used much like tie() to call a C function
any time a scalar's value is used or changed.  The C<MAGIC>'s
d994 2
a995 2
        I32 (*uf_val)(IV, SV*);
        I32 (*uf_set)(IV, SV*);
d1000 2
a1001 2
function will be called with C<uf_index> as the first arg and a
pointer to the SV as the second.  A simple example of how to add 'U'
d1014 1
a1014 1
        sv_magic(sv, 0, 'U', (char*)&uf, sizeof(uf));
d1016 6
a1021 6
Note that because multiple extensions may be using '~' or 'U' magic,
it is important for extensions to take extra care to avoid conflict.
Typically only using the magic on objects blessed into the same class
as the extension is sufficient.  For '~' magic, it may also be
appropriate to add an I32 'signature' at the top of the private data
area and check that.
d1051 2
a1052 1
Tied hashes and arrays are magical beasts of the 'P' magic type.
d1062 1
a1062 1
the various GET, SET etc methods.  To perform the equivalent of the perl
d1083 1
a1083 1
        hv_magic(hash, tie, 'P');
d1156 1
a1156 1
the block: C<goto>, C<return>, C<die>/C<eval> etc. It is a little bit
d1255 1
a1255 1
or Perlish C<GV *>s).  Where the above macros take C<int>, a similar 
d1283 1
a1283 1
Similar to C<save_scalar>, but will reinstate a C<SV *>.
d1324 2
a1325 2
Now that there is room on the stack, values can be pushed on it using the
macros to push IVs, doubles, strings, and SV pointers respectively:
d1327 3
a1329 4
    PUSHi(IV)
    PUSHn(double)
    PUSHp(char*, I32)
    PUSHs(SV*)
d1337 1
a1337 1
to use the macros:
a1338 3
    XPUSHi(IV)
    XPUSHn(double)
    XPUSHp(char*, I32)
d1341 1
a1341 1
These macros automatically adjust the stack for you, if needed.  Thus, you
d1343 4
a1346 1
However, see L</Putting a C value on Perl stack>
d1370 1
a1370 1
These routines used to be called C<perl_call_sv> etc., before Perl v5.6.0,
d1491 1
a1491 1
macros can make use of the local variable C<TARG>. 
d1518 1
a1518 1
The answer is B<recursion>, and maybe (sometime soon) B<threads>. Both
d1695 17
d1720 1
a1720 1
module should already be familiar with its format. 
d1723 1
a1723 1
derivatives, and produces output similiar to C<perl -Dx>; in fact,
d1755 8
a1762 10
interpreters, with one interpreter represented either as a C++ object,
a C structure, or inside a thread.  The thread, the C structure, or
the C++ object will contain all the context, the state of that
interpreter.

Three macros control the major Perl build flavors: MULTIPLICITY,
USE_THREADS and PERL_OBJECT.  The MULTIPLICITY build has a C structure
that packages all the interpreter state, there is a similar thread-specific
data structure under USE_THREADS, and the (now deprecated) PERL_OBJECT
build has a C++ class to maintain interpreter state.  In all three cases,
d1768 1
a1768 1
C++ methods, subroutines taking some kind of structure as the first
d1770 1
a1770 1
enable these three very different ways of building the interpreter,
d1775 1
a1775 1
which will be private.  All functions whose names begin C<S_> are private 
d1778 4
a1781 4
part of the API. (See L</Internal Functions>.) The easiest way to be B<sure> a 
function is part of the API is to find its entry in L<perlapi>.  
If it exists in L<perlapi>, it's part of the API.  If it doesn't, and you 
think it should be (i.e., you need it for your extension), send mail via 
d1793 2
a1794 1
STATIC becomes "static" in C, and is #define'd to nothing in C++.
a1835 16
Under PERL_OBJECT in the core, that will translate to either:

    CPerlObj::Perl_sv_setsv(foo,bar);  # in CPerlObj functions,
                                       # C++ takes care of 'this'
  or

    pPerl->Perl_sv_setsv(foo,bar);     # in truly static functions,
                                       # see objXSUB.h

Under PERL_OBJECT in extensions (aka PERL_CAPI), or under
MULTIPLICITY/USE_THREADS with PERL_IMPLICIT_CONTEXT in both core
and extensions, it will become:

    Perl_sv_setsv(aTHX_ foo, bar);     # the canonical Perl "API"
                                       # for all build flavors

d1849 1
a1849 1
You can ignore [pad]THX[xo] when browsing the Perl headers/sources.
d1994 2
a1995 2
PERL_IMPLICIT_SYS macro.  Currently it only works with PERL_OBJECT
and USE_THREADS on Windows (see inside iperlsys.h).
d2076 1
a2076 1
This function is part of the experimental development API, and may change 
d2368 43
d2414 2
a2415 2
<okamoto@@corp.hp.com>.  It is now maintained as part of Perl itself
by the Perl 5 Porters <perl5-porters@@perl.org>.
d2422 1
a2422 1
API Listing originally by Dean Roehrich <roehrich@@cray.com>.
@


1.4
log
@perl-5.6.0 + local changes
@
text
@d7 4
a10 4
This document attempts to describe how to use the Perl API, as well as containing 
some info on the basic workings of the Perl core. It is far from complete 
and probably contains many errors. Please refer any questions or 
comments to the author below.
d37 2
a38 2
values that can be loaded: an integer value (IV), a double (NV), a string,
(PV), and another scalar (SV).
d79 4
d217 42
d881 2
d1104 1
a1104 1
=over
d1129 14
a1142 2
I<pseudo-block>. This is similar to C<sv_2mortal>, which should (?) be
used instead.
d1189 1
a1189 1
=over
d1278 1
d1408 17
d1542 25
d1569 2
a1570 2
The tree is created by the I<pseudo-compiler> while yacc code feeds it
the constructions it recognizes. Since yacc works bottom-up, so does
d1575 1
a1575 1
so-called I<check routines>.  The correspondence between node names
d1627 35
a1663 3
WARNING: This information is subject to radical changes prior to
the Perl 5.6 release.  Use with caution.

d1678 2
a1679 2
data structure under USE_THREADS, and the PERL_OBJECT build has a C++
class to maintain interpreter state.  In all three cases,
d1695 5
a1699 11
part of the API. The easiest way to be B<sure> a function is part of the API
is to find its entry in L<perlapi>.  If it exists in L<perlapi>, it's part
of the API.  If it doesn't, and you think it should be (i.e., you need it fo
r your extension), send mail via L<perlbug> explaining why you think it
should be.

(L<perlapi> itself is generated by embed.pl, a Perl script that generates
significant portions of the Perl source code.  It has a list of almost
all the functions defined by the Perl interpreter along with their calling
characteristics and some flags.  Functions that are part of the public API
are marked with an 'A' in its flags.)
d1722 2
a1723 1
or 'd' for B<d>eclaration.
d1725 2
a1726 2
When Perl is built without PERL_IMPLICIT_CONTEXT, there is no first
argument containing the interpreter's context.  The trailing underscore
d1735 1
a1735 1
is normally hidden via macros.  Consider C<sv_setsv>.  It expands
d1739 1
a1739 1
      define sv_setsv(a,b)	Perl_sv_setsv(aTHX_ a, b)
d1742 1
a1742 1
      define sv_setsv		Perl_sv_setsv
d1762 2
a1763 2
MULTIPLICITY/USE_THREADS w/ PERL_IMPLICIT_CONTEXT in both core
and extensions, it will be:
d1785 8
d1809 1
a1809 1
in your extesion will translate to this when PERL_IMPLICIT_CONTEXT is
d1825 4
a1828 4
	#define PERL_NO_GET_CONTEXT	/* we want efficiency */
	#include "EXTERN.h"
	#include "perl.h"
	#include "XSUB.h"
d1832 6
a1837 6
	static SV *
	my_private_function(int arg1, int arg2)
	{
	    dTHX;	/* fetch context */
	    ... call many Perl API functions ...
	}
d1841 1
a1841 1
	MODULE = Foo		PACKAGE = Foo
d1843 1
a1843 1
	/* typical XSUB */
d1845 5
a1849 5
	void
	my_xsub(arg)
		int arg
	    CODE:
		my_private_function(arg, 10);
d1864 4
a1867 4
	#define PERL_NO_GET_CONTEXT	/* we want efficiency */
	#include "EXTERN.h"
	#include "perl.h"
	#include "XSUB.h"
d1872 6
a1877 6
	static SV *
	my_private_function(pTHX_ int arg1, int arg2)
	{
	    /* dTHX; not needed here, because THX is an argument */
	    ... call Perl API functions ...
	}
d1881 1
a1881 1
	MODULE = Foo		PACKAGE = Foo
d1883 1
a1883 1
	/* typical XSUB */
d1885 5
a1889 5
	void
	my_xsub(arg)
		int arg
	    CODE:
		my_private_function(aTHX_ arg, 10);
d1900 20
d1926 2
a1927 3
PERL_IMPLICIT_SYS macro.  Currently it only works with PERL_OBJECT,
but is mostly there for MULTIPLICITY and USE_THREADS (see inside
iperlsys.h).
d1941 358
@


1.3
log
@perl5.005_03 (stock)
@
text
@d3 1
a3 1
perlguts - Perl's Internal Functions
d7 4
a10 3
This document attempts to describe some of the internal functions of the
Perl executable.  It is far from complete and probably contains many errors.
Please refer any questions or comments to the author below.
d26 1
a26 1
Perl uses a special typedef IV which is a simple integer type that is
d28 1
d31 2
a32 1
least 32-bits and 16-bits long, respectively.
d44 2
a45 2
    SV*  newSVpv(char*, int);
    SV*  newSVpvn(char*, int);
d93 1
d96 1
d98 1
a98 1
which will automatically coerce the actual scalar type into an IV, double,
d102 7
a108 6
variable C<len> (this is a macro, so you do I<not> use C<&len>).  If you do not
care what the length of the data is, use the global variable C<PL_na> or a
local variable of type C<STRLEN>. However using C<PL_na> can be quite
inefficient because C<PL_na> must be accessed in thread-local storage in
threaded Perl.  In any case, remember that Perl allows arbitrary strings of
data that may both contain NULs and might not be terminated by a NUL.
d114 1
d117 1
a117 1
	ptr = SvPV(len);
d158 2
a159 2
    void  sv_catpv(SV*, char*);
    void  sv_catpvn(SV*, char*, STRLEN);
d179 1
a179 1
    SV*  perl_get_sv("package::varname", FALSE);
d290 1
a290 1
    AV*  perl_get_av("package::varname", FALSE);
d305 2
a306 2
    SV**  hv_store(HV*, char* key, U32 klen, SV* val, U32 hash);
    SV**  hv_fetch(HV*, char* key, U32 klen, I32 lval);
d324 2
a325 2
    bool  hv_exists(HV*, char* key, U32 klen);
    SV*   hv_delete(HV*, char* key, U32 klen, I32 flags);
d365 1
a365 1
    HV*  perl_get_hv("package::varname", FALSE);
d374 4
d388 1
a388 1
    
d391 1
a391 1
    
d401 2
a402 2
doesn't have to be recomputed every time).  See L<API LISTING> later in
this document for detailed descriptions.
d407 1
a407 2
L<API LISTING> later in this document for detailed descriptions of these
macros.
d494 1
a494 1
	SV* newSVrv(SV* rv, char* classname);
d499 2
a500 2
	SV* sv_setref_iv(SV* rv, char* classname, IV iv);
	SV* sv_setref_nv(SV* rv, char* classname, NV iv);
d505 1
a505 1
	SV* sv_setref_pv(SV* rv, char* classname, PV iv);
d510 1
a510 1
	SV* sv_setref_pvn(SV* rv, char* classname, PV iv, STRLEN length);
d515 1
a515 1
	int  sv_isa(SV* sv, char* name);
d525 1
a525 1
	bool sv_derived_from(SV* sv, char* name);
d537 3
a539 3
    SV*  perl_get_sv("package::varname", TRUE);
    AV*  perl_get_av("package::varname", TRUE);
    HV*  perl_get_hv("package::varname", TRUE);
d648 1
a648 1
    HV*  gv_stashpv(char* name, I32 create)
d712 1
a712 1
    SV* sv = perl_get_sv("dberror", TRUE);
d746 1
a746 1
    void sv_magic(SV* sv, SV* obj, int how, char* name, I32 namlen);
d823 2
d914 1
a914 1
L<API LISTING> later in this document identifies such functions.
d927 1
a927 1
    int mg_copy(SV* sv, SV* nsv, char* key, STRLEN klen);
d1107 6
a1112 1
=item C<SAVEDESTRUCTOR(f,p)>
d1115 1
a1115 1
only argument (of type C<void*>) C<p>.
d1226 4
a1229 4
    I32  perl_call_sv(SV*, I32);
    I32  perl_call_pv(char*, I32);
    I32  perl_call_method(char*, I32);
    I32  perl_call_argv(char*, I32, register char**);
d1231 1
a1231 1
The routine most often used is C<perl_call_sv>.  The C<SV*> argument
d1241 5
a1245 1
When using any of these routines (except C<perl_call_argv>), the programmer
d1524 1
a1524 1
=head1 API LISTING
d1526 2
a1527 3
This is a listing of functions, macros, flags, and variables that may be
useful to extension writers or that may be found while reading other
extensions.
d1529 1
a1529 3
Note that all Perl API global variables must be referenced with the C<PL_>
prefix.  Some macros are provided for compatibility with the older,
unadorned names, but this support will be removed in a future release.
d1531 253
a1783 2
It is strongly recommended that all Perl API functions that don't begin
with C<perl> be referenced with an explicit C<Perl_> prefix.
d1785 1
a1785 2
The sort order of the listing is case insensitive, with any
occurrences of '_' ignored for the purpose of sorting.
d1787 3
a1789 1
=over 8
d1791 4
a1794 1
=item av_clear
d1796 1
a1796 611
Clears an array, making it empty.  Does not free the memory used by the
array itself.

	void	av_clear (AV* ar)

=item av_extend

Pre-extend an array.  The C<key> is the index to which the array should be
extended.

	void	av_extend (AV* ar, I32 key)

=item av_fetch

Returns the SV at the specified index in the array.  The C<key> is the
index.  If C<lval> is set then the fetch will be part of a store.  Check
that the return value is non-null before dereferencing it to a C<SV*>.

See L<Understanding the Magic of Tied Hashes and Arrays> for more
information on how to use this function on tied arrays.

	SV**	av_fetch (AV* ar, I32 key, I32 lval)

=item AvFILL

Same as C<av_len()>.  Deprecated, use C<av_len()> instead.

=item av_len

Returns the highest index in the array.  Returns -1 if the array is empty.

	I32	av_len (AV* ar)

=item av_make

Creates a new AV and populates it with a list of SVs.  The SVs are copied
into the array, so they may be freed after the call to av_make.  The new AV
will have a reference count of 1.

	AV*	av_make (I32 size, SV** svp)

=item av_pop

Pops an SV off the end of the array.  Returns C<&PL_sv_undef> if the array is
empty.

	SV*	av_pop (AV* ar)

=item av_push

Pushes an SV onto the end of the array.  The array will grow automatically
to accommodate the addition.

	void	av_push (AV* ar, SV* val)

=item av_shift

Shifts an SV off the beginning of the array.

	SV*	av_shift (AV* ar)

=item av_store

Stores an SV in an array.  The array index is specified as C<key>.  The
return value will be NULL if the operation failed or if the value did not
need to be actually stored within the array (as in the case of tied arrays).
Otherwise it can be dereferenced to get the original C<SV*>.  Note that the
caller is responsible for suitably incrementing the reference count of C<val>
before the call, and decrementing it if the function returned NULL.

See L<Understanding the Magic of Tied Hashes and Arrays> for more
information on how to use this function on tied arrays.

	SV**	av_store (AV* ar, I32 key, SV* val)

=item av_undef

Undefines the array.  Frees the memory used by the array itself.

	void	av_undef (AV* ar)

=item av_unshift

Unshift the given number of C<undef> values onto the beginning of the
array.  The array will grow automatically to accommodate the addition.
You must then use C<av_store> to assign values to these new elements.

	void	av_unshift (AV* ar, I32 num)

=item CLASS

Variable which is setup by C<xsubpp> to indicate the class name for a C++ XS
constructor.  This is always a C<char*>.  See C<THIS> and
L<perlxs/"Using XS With C++">.

=item Copy

The XSUB-writer's interface to the C C<memcpy> function.  The C<s> is the
source, C<d> is the destination, C<n> is the number of items, and C<t> is
the type.  May fail on overlapping copies.  See also C<Move>.

	void	Copy( s, d, n, t )

=item croak

This is the XSUB-writer's interface to Perl's C<die> function.  Use this
function the same way you use the C C<printf> function.  See C<warn>.

=item CvSTASH

Returns the stash of the CV.

	HV*	CvSTASH( SV* sv )

=item PL_DBsingle

When Perl is run in debugging mode, with the B<-d> switch, this SV is a
boolean which indicates whether subs are being single-stepped.
Single-stepping is automatically turned on after every step.  This is the C
variable which corresponds to Perl's $DB::single variable.  See C<PL_DBsub>.

=item PL_DBsub

When Perl is run in debugging mode, with the B<-d> switch, this GV contains
the SV which holds the name of the sub being debugged.  This is the C
variable which corresponds to Perl's $DB::sub variable.  See C<PL_DBsingle>.
The sub name can be found by

	SvPV( GvSV( PL_DBsub ), len )

=item PL_DBtrace

Trace variable used when Perl is run in debugging mode, with the B<-d>
switch.  This is the C variable which corresponds to Perl's $DB::trace
variable.  See C<PL_DBsingle>.

=item dMARK

Declare a stack marker variable, C<mark>, for the XSUB.  See C<MARK> and
C<dORIGMARK>.

=item dORIGMARK

Saves the original stack mark for the XSUB.  See C<ORIGMARK>.

=item PL_dowarn

The C variable which corresponds to Perl's $^W warning variable.

=item dSP

Declares a local copy of perl's stack pointer for the XSUB, available via
the C<SP> macro.  See C<SP>.

=item dXSARGS

Sets up stack and mark pointers for an XSUB, calling dSP and dMARK.  This is
usually handled automatically by C<xsubpp>.  Declares the C<items> variable
to indicate the number of items on the stack.

=item dXSI32

Sets up the C<ix> variable for an XSUB which has aliases.  This is usually
handled automatically by C<xsubpp>.

=item do_binmode

Switches filehandle to binmode.  C<iotype> is what C<IoTYPE(io)> would
contain.

	do_binmode(fp, iotype, TRUE);

=item ENTER

Opening bracket on a callback.  See C<LEAVE> and L<perlcall>.

	ENTER;

=item EXTEND

Used to extend the argument stack for an XSUB's return values.

	EXTEND( sp, int x )

=item fbm_compile

Analyses the string in order to make fast searches on it using fbm_instr() --
the Boyer-Moore algorithm.

	void	fbm_compile(SV* sv, U32 flags)

=item fbm_instr

Returns the location of the SV in the string delimited by C<str> and
C<strend>.  It returns C<Nullch> if the string can't be found.  The
C<sv> does not have to be fbm_compiled, but the search will not be as
fast then.

	char*	fbm_instr(char *str, char *strend, SV *sv, U32 flags)

=item FREETMPS

Closing bracket for temporaries on a callback.  See C<SAVETMPS> and
L<perlcall>.

	FREETMPS;

=item G_ARRAY

Used to indicate array context.  See C<GIMME_V>, C<GIMME> and L<perlcall>.

=item G_DISCARD

Indicates that arguments returned from a callback should be discarded.  See
L<perlcall>.

=item G_EVAL

Used to force a Perl C<eval> wrapper around a callback.  See L<perlcall>.

=item GIMME

A backward-compatible version of C<GIMME_V> which can only return
C<G_SCALAR> or C<G_ARRAY>; in a void context, it returns C<G_SCALAR>.

=item GIMME_V

The XSUB-writer's equivalent to Perl's C<wantarray>.  Returns
C<G_VOID>, C<G_SCALAR> or C<G_ARRAY> for void, scalar or array
context, respectively.

=item G_NOARGS

Indicates that no arguments are being sent to a callback.  See L<perlcall>.

=item G_SCALAR

Used to indicate scalar context.  See C<GIMME_V>, C<GIMME>, and L<perlcall>.

=item gv_fetchmeth

Returns the glob with the given C<name> and a defined subroutine or
C<NULL>.  The glob lives in the given C<stash>, or in the stashes
accessible via @@ISA and @@UNIVERSAL.

The argument C<level> should be either 0 or -1.  If C<level==0>, as a
side-effect creates a glob with the given C<name> in the given
C<stash> which in the case of success contains an alias for the
subroutine, and sets up caching info for this glob.  Similarly for all
the searched stashes.

This function grants C<"SUPER"> token as a postfix of the stash name.

The GV returned from C<gv_fetchmeth> may be a method cache entry,
which is not visible to Perl code.  So when calling C<perl_call_sv>,
you should not use the GV directly; instead, you should use the
method's CV, which can be obtained from the GV with the C<GvCV> macro.

        GV*     gv_fetchmeth (HV* stash, char* name, STRLEN len, I32 level)

=item gv_fetchmethod

=item gv_fetchmethod_autoload

Returns the glob which contains the subroutine to call to invoke the
method on the C<stash>.  In fact in the presence of autoloading this may
be the glob for "AUTOLOAD".  In this case the corresponding variable
$AUTOLOAD is already setup.

The third parameter of C<gv_fetchmethod_autoload> determines whether AUTOLOAD
lookup is performed if the given method is not present: non-zero means
yes, look for AUTOLOAD; zero means no, don't look for AUTOLOAD.  Calling
C<gv_fetchmethod> is equivalent to calling C<gv_fetchmethod_autoload> with a
non-zero C<autoload> parameter.

These functions grant C<"SUPER"> token as a prefix of the method name.

Note that if you want to keep the returned glob for a long time, you
need to check for it being "AUTOLOAD", since at the later time the call
may load a different subroutine due to $AUTOLOAD changing its value.
Use the glob created via a side effect to do this.

These functions have the same side-effects and as C<gv_fetchmeth> with
C<level==0>.  C<name> should be writable if contains C<':'> or C<'\''>.
The warning against passing the GV returned by C<gv_fetchmeth> to
C<perl_call_sv> apply equally to these functions.

        GV*     gv_fetchmethod (HV* stash, char* name)
        GV*     gv_fetchmethod_autoload (HV* stash, char* name, I32 autoload)

=item G_VOID

Used to indicate void context.  See C<GIMME_V> and L<perlcall>.

=item gv_stashpv

Returns a pointer to the stash for a specified package.  If C<create> is set
then the package will be created if it does not already exist.  If C<create>
is not set and the package does not exist then NULL is returned.

	HV*	gv_stashpv (char* name, I32 create)

=item gv_stashsv

Returns a pointer to the stash for a specified package.  See C<gv_stashpv>.

	HV*	gv_stashsv (SV* sv, I32 create)

=item GvSV

Return the SV from the GV.

=item HEf_SVKEY

This flag, used in the length slot of hash entries and magic
structures, specifies the structure contains a C<SV*> pointer where a
C<char*> pointer is to be expected. (For information only--not to be used).

=item HeHASH

Returns the computed hash stored in the hash entry.

	U32	HeHASH(HE* he)

=item HeKEY

Returns the actual pointer stored in the key slot of the hash entry.
The pointer may be either C<char*> or C<SV*>, depending on the value of
C<HeKLEN()>.  Can be assigned to.  The C<HePV()> or C<HeSVKEY()> macros
are usually preferable for finding the value of a key.

	char*	HeKEY(HE* he)

=item HeKLEN

If this is negative, and amounts to C<HEf_SVKEY>, it indicates the entry
holds an C<SV*> key.  Otherwise, holds the actual length of the key.
Can be assigned to. The C<HePV()> macro is usually preferable for finding
key lengths.

	int	HeKLEN(HE* he)

=item HePV

Returns the key slot of the hash entry as a C<char*> value, doing any
necessary dereferencing of possibly C<SV*> keys.  The length of
the string is placed in C<len> (this is a macro, so do I<not> use
C<&len>).  If you do not care about what the length of the key is,
you may use the global variable C<PL_na>, though this is rather less
efficient than using a local variable.  Remember though, that hash
keys in perl are free to contain embedded nulls, so using C<strlen()>
or similar is not a good way to find the length of hash keys.
This is very similar to the C<SvPV()> macro described elsewhere in
this document.

	char*	HePV(HE* he, STRLEN len)

=item HeSVKEY

Returns the key as an C<SV*>, or C<Nullsv> if the hash entry
does not contain an C<SV*> key.

	HeSVKEY(HE* he)

=item HeSVKEY_force

Returns the key as an C<SV*>.  Will create and return a temporary
mortal C<SV*> if the hash entry contains only a C<char*> key.

	HeSVKEY_force(HE* he)

=item HeSVKEY_set

Sets the key to a given C<SV*>, taking care to set the appropriate flags
to indicate the presence of an C<SV*> key, and returns the same C<SV*>.

	HeSVKEY_set(HE* he, SV* sv)

=item HeVAL

Returns the value slot (type C<SV*>) stored in the hash entry.

	HeVAL(HE* he)

=item hv_clear

Clears a hash, making it empty.

	void	hv_clear (HV* tb)

=item hv_delete

Deletes a key/value pair in the hash.  The value SV is removed from the hash
and returned to the caller.  The C<klen> is the length of the key.  The
C<flags> value will normally be zero; if set to G_DISCARD then NULL will be
returned.

	SV*	hv_delete (HV* tb, char* key, U32 klen, I32 flags)

=item hv_delete_ent

Deletes a key/value pair in the hash.  The value SV is removed from the hash
and returned to the caller.  The C<flags> value will normally be zero; if set
to G_DISCARD then NULL will be returned.  C<hash> can be a valid precomputed
hash value, or 0 to ask for it to be computed.

	SV*     hv_delete_ent (HV* tb, SV* key, I32 flags, U32 hash)

=item hv_exists

Returns a boolean indicating whether the specified hash key exists.  The
C<klen> is the length of the key.

	bool	hv_exists (HV* tb, char* key, U32 klen)

=item hv_exists_ent

Returns a boolean indicating whether the specified hash key exists. C<hash>
can be a valid precomputed hash value, or 0 to ask for it to be computed.

	bool    hv_exists_ent (HV* tb, SV* key, U32 hash)

=item hv_fetch

Returns the SV which corresponds to the specified key in the hash.  The
C<klen> is the length of the key.  If C<lval> is set then the fetch will be
part of a store.  Check that the return value is non-null before
dereferencing it to a C<SV*>.

See L<Understanding the Magic of Tied Hashes and Arrays> for more
information on how to use this function on tied hashes.

	SV**	hv_fetch (HV* tb, char* key, U32 klen, I32 lval)

=item hv_fetch_ent

Returns the hash entry which corresponds to the specified key in the hash.
C<hash> must be a valid precomputed hash number for the given C<key>, or
0 if you want the function to compute it.  IF C<lval> is set then the
fetch will be part of a store.  Make sure the return value is non-null
before accessing it.  The return value when C<tb> is a tied hash
is a pointer to a static location, so be sure to make a copy of the
structure if you need to store it somewhere.

See L<Understanding the Magic of Tied Hashes and Arrays> for more
information on how to use this function on tied hashes.

	HE*     hv_fetch_ent  (HV* tb, SV* key, I32 lval, U32 hash)

=item hv_iterinit

Prepares a starting point to traverse a hash table.

	I32	hv_iterinit (HV* tb)

Returns the number of keys in the hash (i.e. the same as C<HvKEYS(tb)>).
The return value is currently only meaningful for hashes without tie
magic.

NOTE: Before version 5.004_65, C<hv_iterinit> used to return the number
of hash buckets that happen to be in use.  If you still need that
esoteric value, you can get it through the macro C<HvFILL(tb)>.

=item hv_iterkey

Returns the key from the current position of the hash iterator.  See
C<hv_iterinit>.

	char*	hv_iterkey (HE* entry, I32* retlen)

=item hv_iterkeysv

Returns the key as an C<SV*> from the current position of the hash
iterator.  The return value will always be a mortal copy of the
key.  Also see C<hv_iterinit>.

	SV*     hv_iterkeysv  (HE* entry)

=item hv_iternext

Returns entries from a hash iterator.  See C<hv_iterinit>.

	HE*	hv_iternext (HV* tb)

=item hv_iternextsv

Performs an C<hv_iternext>, C<hv_iterkey>, and C<hv_iterval> in one
operation.

	SV*	hv_iternextsv (HV* hv, char** key, I32* retlen)

=item hv_iterval

Returns the value from the current position of the hash iterator.  See
C<hv_iterkey>.

	SV*	hv_iterval (HV* tb, HE* entry)

=item hv_magic

Adds magic to a hash.  See C<sv_magic>.

	void	hv_magic (HV* hv, GV* gv, int how)

=item HvNAME

Returns the package name of a stash.  See C<SvSTASH>, C<CvSTASH>.

	char*	HvNAME (HV* stash)

=item hv_store

Stores an SV in a hash.  The hash key is specified as C<key> and C<klen> is
the length of the key.  The C<hash> parameter is the precomputed hash
value; if it is zero then Perl will compute it.  The return value will be
NULL if the operation failed or if the value did not need to be actually
stored within the hash (as in the case of tied hashes).  Otherwise it can
be dereferenced to get the original C<SV*>.  Note that the caller is
responsible for suitably incrementing the reference count of C<val>
before the call, and decrementing it if the function returned NULL.

See L<Understanding the Magic of Tied Hashes and Arrays> for more
information on how to use this function on tied hashes.

	SV**	hv_store (HV* tb, char* key, U32 klen, SV* val, U32 hash)

=item hv_store_ent

Stores C<val> in a hash.  The hash key is specified as C<key>.  The C<hash>
parameter is the precomputed hash value; if it is zero then Perl will
compute it.  The return value is the new hash entry so created.  It will be
NULL if the operation failed or if the value did not need to be actually
stored within the hash (as in the case of tied hashes).  Otherwise the
contents of the return value can be accessed using the C<He???> macros
described here.  Note that the caller is responsible for suitably
incrementing the reference count of C<val> before the call, and decrementing
it if the function returned NULL.

See L<Understanding the Magic of Tied Hashes and Arrays> for more
information on how to use this function on tied hashes.

	HE*     hv_store_ent  (HV* tb, SV* key, SV* val, U32 hash)

=item hv_undef

Undefines the hash.

	void	hv_undef (HV* tb)

=item isALNUM

Returns a boolean indicating whether the C C<char> is an ascii alphanumeric
character or digit.

	int	isALNUM (char c)

=item isALPHA

Returns a boolean indicating whether the C C<char> is an ascii alphabetic
character.

	int	isALPHA (char c)

=item isDIGIT

Returns a boolean indicating whether the C C<char> is an ascii digit.

	int	isDIGIT (char c)

=item isLOWER

Returns a boolean indicating whether the C C<char> is a lowercase character.

	int	isLOWER (char c)

=item isSPACE

Returns a boolean indicating whether the C C<char> is whitespace.

	int	isSPACE (char c)

=item isUPPER

Returns a boolean indicating whether the C C<char> is an uppercase character.

	int	isUPPER (char c)

=item items

Variable which is setup by C<xsubpp> to indicate the number of items on the
stack.  See L<perlxs/"Variable-length Parameter Lists">.

=item ix

Variable which is setup by C<xsubpp> to indicate which of an XSUB's aliases
was used to invoke it.  See L<perlxs/"The ALIAS: Keyword">.

=item LEAVE

Closing bracket on a callback.  See C<ENTER> and L<perlcall>.

	LEAVE;

=item looks_like_number

Test if an the content of an SV looks like a number (or is a number).

	int	looks_like_number(SV*)


=item MARK
d1798 2
a1799 1
Stack marker variable for the XSUB.  See C<dMARK>.
d1801 1
a1801 1
=item mg_clear
d1803 1
a1803 1458
Clear something magical that the SV represents.  See C<sv_magic>.

	int	mg_clear (SV* sv)

=item mg_copy

Copies the magic from one SV to another.  See C<sv_magic>.

	int	mg_copy (SV *, SV *, char *, STRLEN)

=item mg_find

Finds the magic pointer for type matching the SV.  See C<sv_magic>.

	MAGIC*	mg_find (SV* sv, int type)

=item mg_free

Free any magic storage used by the SV.  See C<sv_magic>.

	int	mg_free (SV* sv)

=item mg_get

Do magic after a value is retrieved from the SV.  See C<sv_magic>.

	int	mg_get (SV* sv)

=item mg_len

Report on the SV's length.  See C<sv_magic>.

	U32	mg_len (SV* sv)

=item mg_magical

Turns on the magical status of an SV.  See C<sv_magic>.

	void	mg_magical (SV* sv)

=item mg_set

Do magic after a value is assigned to the SV.  See C<sv_magic>.

	int	mg_set (SV* sv)

=item modglobal

C<modglobal> is a general purpose, interpreter global HV for use by
extensions that need to keep information on a per-interpreter basis.
In a pinch, it can also be used as a symbol table for extensions
to share data among each other.  It is a good idea to use keys
prefixed by the package name of the extension that owns the data.

=item Move

The XSUB-writer's interface to the C C<memmove> function.  The C<s> is the
source, C<d> is the destination, C<n> is the number of items, and C<t> is
the type.  Can do overlapping moves.  See also C<Copy>.

	void	Move( s, d, n, t )

=item PL_na

A convenience variable which is typically used with C<SvPV> when one doesn't
care about the length of the string.  It is usually more efficient to
declare a local variable and use that instead.

=item New

The XSUB-writer's interface to the C C<malloc> function.

	void*	New( x, void *ptr, int size, type )

=item newAV

Creates a new AV.  The reference count is set to 1.

	AV*	newAV (void)

=item Newc

The XSUB-writer's interface to the C C<malloc> function, with cast.

	void*	Newc( x, void *ptr, int size, type, cast )

=item newCONSTSUB

Creates a constant sub equivalent to Perl C<sub FOO () { 123 }>
which is eligible for inlining at compile-time.

	void	newCONSTSUB(HV* stash, char* name, SV* sv)

=item newHV

Creates a new HV.  The reference count is set to 1.

	HV*	newHV (void)

=item newRV_inc

Creates an RV wrapper for an SV.  The reference count for the original SV is
incremented.

	SV*	newRV_inc (SV* ref)

For historical reasons, "newRV" is a synonym for "newRV_inc".

=item newRV_noinc

Creates an RV wrapper for an SV.  The reference count for the original
SV is B<not> incremented.

	SV*     newRV_noinc (SV* ref)

=item NEWSV

Creates a new SV.  A non-zero C<len> parameter indicates the number of
bytes of preallocated string space the SV should have.  An extra byte
for a tailing NUL is also reserved.  (SvPOK is not set for the SV even
if string space is allocated.)  The reference count for the new SV is
set to 1.  C<id> is an integer id between 0 and 1299 (used to identify
leaks).

	SV*	NEWSV (int id, STRLEN len)

=item newSViv

Creates a new SV and copies an integer into it.  The reference count for the
SV is set to 1.

	SV*	newSViv (IV i)

=item newSVnv

Creates a new SV and copies a double into it.  The reference count for the
SV is set to 1.

	SV*	newSVnv (NV i)

=item newSVpv

Creates a new SV and copies a string into it.  The reference count for the
SV is set to 1.  If C<len> is zero then Perl will compute the length.

	SV*	newSVpv (char* s, STRLEN len)

=item newSVpvf

Creates a new SV an initialize it with the string formatted like
C<sprintf>.

	SV*     newSVpvf(const char* pat, ...);

=item newSVpvn

Creates a new SV and copies a string into it.  The reference count for the
SV is set to 1.  If C<len> is zero then Perl will create a zero length 
string.

	SV*	newSVpvn (char* s, STRLEN len)

=item newSVrv

Creates a new SV for the RV, C<rv>, to point to.  If C<rv> is not an RV then
it will be upgraded to one.  If C<classname> is non-null then the new SV will
be blessed in the specified package.  The new SV is returned and its
reference count is 1.

	SV*	newSVrv (SV* rv, char* classname)

=item newSVsv

Creates a new SV which is an exact duplicate of the original SV.

	SV*	newSVsv (SV* old)

=item newXS

Used by C<xsubpp> to hook up XSUBs as Perl subs.

=item newXSproto

Used by C<xsubpp> to hook up XSUBs as Perl subs.  Adds Perl prototypes to
the subs.

=item Newz

The XSUB-writer's interface to the C C<malloc> function.  The allocated
memory is zeroed with C<memzero>.

	void*	Newz( x, void *ptr, int size, type )

=item Nullav

Null AV pointer.

=item Nullch

Null character pointer.

=item Nullcv

Null CV pointer.

=item Nullhv

Null HV pointer.

=item Nullsv

Null SV pointer.

=item ORIGMARK

The original stack mark for the XSUB.  See C<dORIGMARK>.

=item perl_alloc

Allocates a new Perl interpreter.  See L<perlembed>.

=item perl_call_argv

Performs a callback to the specified Perl sub.  See L<perlcall>.

	I32	perl_call_argv (char* subname, I32 flags, char** argv)

=item perl_call_method

Performs a callback to the specified Perl method.  The blessed object must
be on the stack.  See L<perlcall>.

	I32	perl_call_method (char* methname, I32 flags)

=item perl_call_pv

Performs a callback to the specified Perl sub.  See L<perlcall>.

	I32	perl_call_pv (char* subname, I32 flags)

=item perl_call_sv

Performs a callback to the Perl sub whose name is in the SV.  See
L<perlcall>.

	I32	perl_call_sv (SV* sv, I32 flags)

=item perl_construct

Initializes a new Perl interpreter.  See L<perlembed>.

=item perl_destruct

Shuts down a Perl interpreter.  See L<perlembed>.

=item perl_eval_sv

Tells Perl to C<eval> the string in the SV.

	I32	perl_eval_sv (SV* sv, I32 flags)

=item perl_eval_pv

Tells Perl to C<eval> the given string and return an SV* result.

	SV*	perl_eval_pv (char* p, I32 croak_on_error)

=item perl_free

Releases a Perl interpreter.  See L<perlembed>.

=item perl_get_av

Returns the AV of the specified Perl array.  If C<create> is set and the
Perl variable does not exist then it will be created.  If C<create> is not
set and the variable does not exist then NULL is returned.

	AV*	perl_get_av (char* name, I32 create)

=item perl_get_cv

Returns the CV of the specified Perl sub.  If C<create> is set and the Perl
variable does not exist then it will be created.  If C<create> is not
set and the variable does not exist then NULL is returned.

	CV*	perl_get_cv (char* name, I32 create)

=item perl_get_hv

Returns the HV of the specified Perl hash.  If C<create> is set and the Perl
variable does not exist then it will be created.  If C<create> is not
set and the variable does not exist then NULL is returned.

	HV*	perl_get_hv (char* name, I32 create)

=item perl_get_sv

Returns the SV of the specified Perl scalar.  If C<create> is set and the
Perl variable does not exist then it will be created.  If C<create> is not
set and the variable does not exist then NULL is returned.

	SV*	perl_get_sv (char* name, I32 create)

=item perl_parse

Tells a Perl interpreter to parse a Perl script.  See L<perlembed>.

=item perl_require_pv

Tells Perl to C<require> a module.

	void	perl_require_pv (char* pv)

=item perl_run

Tells a Perl interpreter to run.  See L<perlembed>.

=item POPi

Pops an integer off the stack.

	int	POPi()

=item POPl

Pops a long off the stack.

	long	POPl()

=item POPp

Pops a string off the stack.

	char*	POPp()

=item POPn

Pops a double off the stack.

	double	POPn()

=item POPs

Pops an SV off the stack.

	SV*	POPs()

=item PUSHMARK

Opening bracket for arguments on a callback.  See C<PUTBACK> and L<perlcall>.

	PUSHMARK(p)

=item PUSHi

Push an integer onto the stack.  The stack must have room for this element.
Handles 'set' magic.  See C<XPUSHi>.

	void	PUSHi(int d)

=item PUSHn

Push a double onto the stack.  The stack must have room for this element.
Handles 'set' magic.  See C<XPUSHn>.

	void	PUSHn(double d)

=item PUSHp

Push a string onto the stack.  The stack must have room for this element.
The C<len> indicates the length of the string.  Handles 'set' magic.  See
C<XPUSHp>.

	void	PUSHp(char *c, int len )

=item PUSHs

Push an SV onto the stack.  The stack must have room for this element.  Does
not handle 'set' magic.  See C<XPUSHs>.

	void	PUSHs(sv)

=item PUSHu

Push an unsigned integer onto the stack.  The stack must have room for
this element.  See C<XPUSHu>.

	void	PUSHu(unsigned int d)


=item PUTBACK

Closing bracket for XSUB arguments.  This is usually handled by C<xsubpp>.
See C<PUSHMARK> and L<perlcall> for other uses.

	PUTBACK;

=item Renew

The XSUB-writer's interface to the C C<realloc> function.

	void*	Renew( void *ptr, int size, type )

=item Renewc

The XSUB-writer's interface to the C C<realloc> function, with cast.

	void*	Renewc( void *ptr, int size, type, cast )

=item RETVAL

Variable which is setup by C<xsubpp> to hold the return value for an XSUB.
This is always the proper type for the XSUB.
See L<perlxs/"The RETVAL Variable">.

=item safefree

The XSUB-writer's interface to the C C<free> function.

=item safemalloc

The XSUB-writer's interface to the C C<malloc> function.

=item saferealloc

The XSUB-writer's interface to the C C<realloc> function.

=item savepv

Copy a string to a safe spot.  This does not use an SV.

	char*	savepv (char* sv)

=item savepvn

Copy a string to a safe spot.  The C<len> indicates number of bytes to
copy.  This does not use an SV.

	char*	savepvn (char* sv, I32 len)

=item SAVETMPS

Opening bracket for temporaries on a callback.  See C<FREETMPS> and
L<perlcall>.

	SAVETMPS;

=item SP

Stack pointer.  This is usually handled by C<xsubpp>.  See C<dSP> and
C<SPAGAIN>.

=item SPAGAIN

Refetch the stack pointer.  Used after a callback.  See L<perlcall>.

	SPAGAIN;

=item ST

Used to access elements on the XSUB's stack.

	SV*	ST(int x)

=item strEQ

Test two strings to see if they are equal.  Returns true or false.

	int	strEQ( char *s1, char *s2 )

=item strGE

Test two strings to see if the first, C<s1>, is greater than or equal to the
second, C<s2>.  Returns true or false.

	int	strGE( char *s1, char *s2 )

=item strGT

Test two strings to see if the first, C<s1>, is greater than the second,
C<s2>.  Returns true or false.

	int	strGT( char *s1, char *s2 )

=item strLE

Test two strings to see if the first, C<s1>, is less than or equal to the
second, C<s2>.  Returns true or false.

	int	strLE( char *s1, char *s2 )

=item strLT

Test two strings to see if the first, C<s1>, is less than the second,
C<s2>.  Returns true or false.

	int	strLT( char *s1, char *s2 )

=item strNE

Test two strings to see if they are different.  Returns true or false.

	int	strNE( char *s1, char *s2 )

=item strnEQ

Test two strings to see if they are equal.  The C<len> parameter indicates
the number of bytes to compare.  Returns true or false.

	int	strnEQ( char *s1, char *s2 )

=item strnNE

Test two strings to see if they are different.  The C<len> parameter
indicates the number of bytes to compare.  Returns true or false.

	int	strnNE( char *s1, char *s2, int len )

=item sv_2mortal

Marks an SV as mortal.  The SV will be destroyed when the current context
ends.

	SV*	sv_2mortal (SV* sv)

=item sv_bless

Blesses an SV into a specified package.  The SV must be an RV.  The package
must be designated by its stash (see C<gv_stashpv()>).  The reference count
of the SV is unaffected.

	SV*	sv_bless (SV* sv, HV* stash)

=item sv_catpv

Concatenates the string onto the end of the string which is in the SV.
Handles 'get' magic, but not 'set' magic.  See C<sv_catpv_mg>.

	void	sv_catpv (SV* sv, char* ptr)

=item sv_catpv_mg

Like C<sv_catpv>, but also handles 'set' magic.

	void	sv_catpv_mg (SV* sv, const char* ptr)

=item sv_catpvn

Concatenates the string onto the end of the string which is in the SV.  The
C<len> indicates number of bytes to copy.  Handles 'get' magic, but not
'set' magic.  See C<sv_catpvn_mg>.

	void	sv_catpvn (SV* sv, char* ptr, STRLEN len)

=item sv_catpvn_mg

Like C<sv_catpvn>, but also handles 'set' magic.

	void	sv_catpvn_mg (SV* sv, char* ptr, STRLEN len)

=item sv_catpvf

Processes its arguments like C<sprintf> and appends the formatted output
to an SV.  Handles 'get' magic, but not 'set' magic.  C<SvSETMAGIC()> must
typically be called after calling this function to handle 'set' magic.

	void	sv_catpvf (SV* sv, const char* pat, ...)

=item sv_catpvf_mg

Like C<sv_catpvf>, but also handles 'set' magic.

	void	sv_catpvf_mg (SV* sv, const char* pat, ...)

=item sv_catsv

Concatenates the string from SV C<ssv> onto the end of the string in SV
C<dsv>.  Handles 'get' magic, but not 'set' magic.  See C<sv_catsv_mg>.

	void	sv_catsv (SV* dsv, SV* ssv)

=item sv_catsv_mg

Like C<sv_catsv>, but also handles 'set' magic.

	void	sv_catsv_mg (SV* dsv, SV* ssv)

=item sv_chop

Efficient removal of characters from the beginning of the string
buffer.  SvPOK(sv) must be true and the C<ptr> must be a pointer to
somewhere inside the string buffer.  The C<ptr> becomes the first
character of the adjusted string.

	void    sv_chop(SV* sv, char *ptr)


=item sv_cmp

Compares the strings in two SVs.  Returns -1, 0, or 1 indicating whether the
string in C<sv1> is less than, equal to, or greater than the string in
C<sv2>.

	I32	sv_cmp (SV* sv1, SV* sv2)

=item SvCUR

Returns the length of the string which is in the SV.  See C<SvLEN>.

	int	SvCUR (SV* sv)

=item SvCUR_set

Set the length of the string which is in the SV.  See C<SvCUR>.

	void	SvCUR_set (SV* sv, int val)

=item sv_dec

Auto-decrement of the value in the SV.

	void	sv_dec (SV* sv)

=item sv_derived_from

Returns a boolean indicating whether the SV is derived from the specified
class.  This is the function that implements C<UNIVERSAL::isa>.  It works
for class names as well as for objects.

	bool	sv_derived_from _((SV* sv, char* name));

=item SvEND

Returns a pointer to the last character in the string which is in the SV.
See C<SvCUR>.  Access the character as

	char*	SvEND(sv)

=item sv_eq

Returns a boolean indicating whether the strings in the two SVs are
identical.

	I32	sv_eq (SV* sv1, SV* sv2)

=item SvGETMAGIC

Invokes C<mg_get> on an SV if it has 'get' magic.  This macro evaluates
its argument more than once.

	void	SvGETMAGIC(SV *sv)

=item SvGROW

Expands the character buffer in the SV so that it has room for the
indicated number of bytes (remember to reserve space for an extra
trailing NUL character).  Calls C<sv_grow> to perform the expansion if
necessary.  Returns a pointer to the character buffer.

	char*	SvGROW(SV* sv, STRLEN len)

=item sv_grow

Expands the character buffer in the SV.  This will use C<sv_unref> and will
upgrade the SV to C<SVt_PV>.  Returns a pointer to the character buffer.
Use C<SvGROW>.

=item sv_inc

Auto-increment of the value in the SV.

	void	sv_inc (SV* sv)

=item sv_insert

Inserts a string at the specified offset/length within the SV.
Similar to the Perl substr() function.

	void	sv_insert(SV *sv, STRLEN offset, STRLEN len,
			  char *str, STRLEN strlen)

=item SvIOK

Returns a boolean indicating whether the SV contains an integer.

	int	SvIOK (SV* SV)

=item SvIOK_off

Unsets the IV status of an SV.

	void	SvIOK_off (SV* sv)

=item SvIOK_on

Tells an SV that it is an integer.

	void	SvIOK_on (SV* sv)

=item SvIOK_only

Tells an SV that it is an integer and disables all other OK bits.

	void	SvIOK_only (SV* sv)

=item SvIOKp

Returns a boolean indicating whether the SV contains an integer.  Checks the
B<private> setting.  Use C<SvIOK>.

	int	SvIOKp (SV* SV)

=item sv_isa

Returns a boolean indicating whether the SV is blessed into the specified
class.  This does not check for subtypes; use C<sv_derived_from> to verify
an inheritance relationship.

	int	sv_isa (SV* sv, char* name)

=item sv_isobject

Returns a boolean indicating whether the SV is an RV pointing to a blessed
object.  If the SV is not an RV, or if the object is not blessed, then this
will return false.

	int	sv_isobject (SV* sv)

=item SvIV

Coerces the given SV to an integer and returns it.

	int SvIV (SV* sv)

=item SvIVX

Returns the integer which is stored in the SV, assuming SvIOK is true.

	int	SvIVX (SV* sv)

=item SvLEN

Returns the size of the string buffer in the SV.  See C<SvCUR>.

	int	SvLEN (SV* sv)

=item sv_len

Returns the length of the string in the SV.  Use C<SvCUR>.

	STRLEN	sv_len (SV* sv)

=item sv_magic

Adds magic to an SV.

	void	sv_magic (SV* sv, SV* obj, int how, char* name, I32 namlen)

=item sv_mortalcopy

Creates a new SV which is a copy of the original SV.  The new SV is marked
as mortal.

	SV*	sv_mortalcopy (SV* oldsv)

=item sv_newmortal

Creates a new SV which is mortal.  The reference count of the SV is set to 1.

	SV*	sv_newmortal (void)

=item SvNIOK

Returns a boolean indicating whether the SV contains a number, integer or
double.

	int	SvNIOK (SV* SV)

=item SvNIOK_off

Unsets the NV/IV status of an SV.

	void	SvNIOK_off (SV* sv)

=item SvNIOKp

Returns a boolean indicating whether the SV contains a number, integer or
double.  Checks the B<private> setting.  Use C<SvNIOK>.

	int	SvNIOKp (SV* SV)

=item PL_sv_no

This is the C<false> SV.  See C<PL_sv_yes>.  Always refer to this as C<&PL_sv_no>.

=item SvNOK

Returns a boolean indicating whether the SV contains a double.

	int	SvNOK (SV* SV)

=item SvNOK_off

Unsets the NV status of an SV.

	void	SvNOK_off (SV* sv)

=item SvNOK_on

Tells an SV that it is a double.

	void	SvNOK_on (SV* sv)

=item SvNOK_only

Tells an SV that it is a double and disables all other OK bits.

	void	SvNOK_only (SV* sv)

=item SvNOKp

Returns a boolean indicating whether the SV contains a double.  Checks the
B<private> setting.  Use C<SvNOK>.

	int	SvNOKp (SV* SV)

=item SvNV

Coerce the given SV to a double and return it.

	double	SvNV (SV* sv)

=item SvNVX

Returns the double which is stored in the SV, assuming SvNOK is true.

	double	SvNVX (SV* sv)

=item SvOK

Returns a boolean indicating whether the value is an SV.

	int	SvOK (SV* sv)

=item SvOOK

Returns a boolean indicating whether the SvIVX is a valid offset value
for the SvPVX.  This hack is used internally to speed up removal of
characters from the beginning of a SvPV.  When SvOOK is true, then the
start of the allocated string buffer is really (SvPVX - SvIVX).

	int     SvOOK(SV* sv)

=item SvPOK

Returns a boolean indicating whether the SV contains a character string.

	int	SvPOK (SV* SV)

=item SvPOK_off

Unsets the PV status of an SV.

	void	SvPOK_off (SV* sv)

=item SvPOK_on

Tells an SV that it is a string.

	void	SvPOK_on (SV* sv)

=item SvPOK_only

Tells an SV that it is a string and disables all other OK bits.

	void	SvPOK_only (SV* sv)

=item SvPOKp

Returns a boolean indicating whether the SV contains a character string.
Checks the B<private> setting.  Use C<SvPOK>.

	int	SvPOKp (SV* SV)

=item SvPV

Returns a pointer to the string in the SV, or a stringified form of the SV
if the SV does not contain a string.  Handles 'get' magic.

	char*	SvPV (SV* sv, STRLEN len)

=item SvPV_force

Like <SvPV> but will force the SV into becoming a string (SvPOK).  You
want force if you are going to update the SvPVX directly.

	char*	SvPV_force(SV* sv, STRLEN len)

=item SvPVX

Returns a pointer to the string in the SV.  The SV must contain a string.

	char*	SvPVX (SV* sv)

=item SvREFCNT

Returns the value of the object's reference count.

	int	SvREFCNT (SV* sv)

=item SvREFCNT_dec

Decrements the reference count of the given SV.

	void	SvREFCNT_dec (SV* sv)

=item SvREFCNT_inc

Increments the reference count of the given SV.

	void	SvREFCNT_inc (SV* sv)

=item SvROK

Tests if the SV is an RV.

	int	SvROK (SV* sv)

=item SvROK_off

Unsets the RV status of an SV.

	void	SvROK_off (SV* sv)

=item SvROK_on

Tells an SV that it is an RV.

	void	SvROK_on (SV* sv)

=item SvRV

Dereferences an RV to return the SV.

	SV*	SvRV (SV* sv)

=item SvSETMAGIC

Invokes C<mg_set> on an SV if it has 'set' magic.  This macro evaluates
its argument more than once.

	void	SvSETMAGIC( SV *sv )

=item sv_setiv

Copies an integer into the given SV.  Does not handle 'set' magic.
See C<sv_setiv_mg>.

	void	sv_setiv (SV* sv, IV num)

=item sv_setiv_mg

Like C<sv_setiv>, but also handles 'set' magic.

	void	sv_setiv_mg (SV* sv, IV num)

=item sv_setnv

Copies a double into the given SV.  Does not handle 'set' magic.
See C<sv_setnv_mg>.

	void	sv_setnv (SV* sv, double num)

=item sv_setnv_mg

Like C<sv_setnv>, but also handles 'set' magic.

	void	sv_setnv_mg (SV* sv, double num)

=item sv_setpv

Copies a string into an SV.  The string must be null-terminated.
Does not handle 'set' magic.  See C<sv_setpv_mg>.

	void	sv_setpv (SV* sv, const char* ptr)

=item sv_setpv_mg

Like C<sv_setpv>, but also handles 'set' magic.

	void	sv_setpv_mg (SV* sv, const char* ptr)

=item sv_setpviv

Copies an integer into the given SV, also updating its string value.
Does not handle 'set' magic.  See C<sv_setpviv_mg>.

	void	sv_setpviv (SV* sv, IV num)

=item sv_setpviv_mg

Like C<sv_setpviv>, but also handles 'set' magic.

	void	sv_setpviv_mg (SV* sv, IV num)

=item sv_setpvn

Copies a string into an SV.  The C<len> parameter indicates the number of
bytes to be copied.  Does not handle 'set' magic.  See C<sv_setpvn_mg>.

	void	sv_setpvn (SV* sv, const char* ptr, STRLEN len)

=item sv_setpvn_mg

Like C<sv_setpvn>, but also handles 'set' magic.

	void	sv_setpvn_mg (SV* sv, const char* ptr, STRLEN len)

=item sv_setpvf

Processes its arguments like C<sprintf> and sets an SV to the formatted
output.  Does not handle 'set' magic.  See C<sv_setpvf_mg>.

	void	sv_setpvf (SV* sv, const char* pat, ...)

=item sv_setpvf_mg

Like C<sv_setpvf>, but also handles 'set' magic.

	void	sv_setpvf_mg (SV* sv, const char* pat, ...)

=item sv_setref_iv

Copies an integer into a new SV, optionally blessing the SV.  The C<rv>
argument will be upgraded to an RV.  That RV will be modified to point to
the new SV.  The C<classname> argument indicates the package for the
blessing.  Set C<classname> to C<Nullch> to avoid the blessing.  The new SV
will be returned and will have a reference count of 1.

	SV*	sv_setref_iv (SV *rv, char *classname, IV iv)

=item sv_setref_nv

Copies a double into a new SV, optionally blessing the SV.  The C<rv>
argument will be upgraded to an RV.  That RV will be modified to point to
the new SV.  The C<classname> argument indicates the package for the
blessing.  Set C<classname> to C<Nullch> to avoid the blessing.  The new SV
will be returned and will have a reference count of 1.

	SV*	sv_setref_nv (SV *rv, char *classname, double nv)

=item sv_setref_pv

Copies a pointer into a new SV, optionally blessing the SV.  The C<rv>
argument will be upgraded to an RV.  That RV will be modified to point to
the new SV.  If the C<pv> argument is NULL then C<PL_sv_undef> will be placed
into the SV.  The C<classname> argument indicates the package for the
blessing.  Set C<classname> to C<Nullch> to avoid the blessing.  The new SV
will be returned and will have a reference count of 1.

	SV*	sv_setref_pv (SV *rv, char *classname, void* pv)

Do not use with integral Perl types such as HV, AV, SV, CV, because those
objects will become corrupted by the pointer copy process.

Note that C<sv_setref_pvn> copies the string while this copies the pointer.

=item sv_setref_pvn

Copies a string into a new SV, optionally blessing the SV.  The length of the
string must be specified with C<n>.  The C<rv> argument will be upgraded to
an RV.  That RV will be modified to point to the new SV.  The C<classname>
argument indicates the package for the blessing.  Set C<classname> to
C<Nullch> to avoid the blessing.  The new SV will be returned and will have
a reference count of 1.

	SV*	sv_setref_pvn (SV *rv, char *classname, char* pv, I32 n)

Note that C<sv_setref_pv> copies the pointer while this copies the string.

=item SvSetSV

Calls C<sv_setsv> if dsv is not the same as ssv.  May evaluate arguments
more than once.

	void	SvSetSV (SV* dsv, SV* ssv)

=item SvSetSV_nosteal

Calls a non-destructive version of C<sv_setsv> if dsv is not the same as ssv.
May evaluate arguments more than once.

	void	SvSetSV_nosteal (SV* dsv, SV* ssv)

=item sv_setsv

Copies the contents of the source SV C<ssv> into the destination SV C<dsv>.
The source SV may be destroyed if it is mortal.  Does not handle 'set' magic.
See the macro forms C<SvSetSV>, C<SvSetSV_nosteal> and C<sv_setsv_mg>.

	void	sv_setsv (SV* dsv, SV* ssv)

=item sv_setsv_mg

Like C<sv_setsv>, but also handles 'set' magic.

	void	sv_setsv_mg (SV* dsv, SV* ssv)

=item sv_setuv

Copies an unsigned integer into the given SV.  Does not handle 'set' magic.
See C<sv_setuv_mg>.

	void	sv_setuv (SV* sv, UV num)

=item sv_setuv_mg

Like C<sv_setuv>, but also handles 'set' magic.

	void	sv_setuv_mg (SV* sv, UV num)

=item SvSTASH

Returns the stash of the SV.

	HV*	SvSTASH (SV* sv)

=item SvTAINT

Taints an SV if tainting is enabled

	void	SvTAINT (SV* sv)

=item SvTAINTED

Checks to see if an SV is tainted. Returns TRUE if it is, FALSE if not.

	int	SvTAINTED (SV* sv)

=item SvTAINTED_off

Untaints an SV. Be I<very> careful with this routine, as it short-circuits
some of Perl's fundamental security features. XS module authors should
not use this function unless they fully understand all the implications
of unconditionally untainting the value. Untainting should be done in
the standard perl fashion, via a carefully crafted regexp, rather than
directly untainting variables.

	void	SvTAINTED_off (SV* sv)

=item SvTAINTED_on

Marks an SV as tainted.

	void	SvTAINTED_on (SV* sv)

=item SVt_IV

Integer type flag for scalars.  See C<svtype>.

=item SVt_PV

Pointer type flag for scalars.  See C<svtype>.

=item SVt_PVAV

Type flag for arrays.  See C<svtype>.

=item SVt_PVCV

Type flag for code refs.  See C<svtype>.

=item SVt_PVHV

Type flag for hashes.  See C<svtype>.

=item SVt_PVMG

Type flag for blessed scalars.  See C<svtype>.

=item SVt_NV

Double type flag for scalars.  See C<svtype>.

=item SvTRUE

Returns a boolean indicating whether Perl would evaluate the SV as true or
false, defined or undefined.  Does not handle 'get' magic.

	int	SvTRUE (SV* sv)

=item SvTYPE

Returns the type of the SV.  See C<svtype>.

	svtype	SvTYPE (SV* sv)

=item svtype

An enum of flags for Perl types.  These are found in the file B<sv.h> in the
C<svtype> enum.  Test these flags with the C<SvTYPE> macro.

=item PL_sv_undef

This is the C<undef> SV.  Always refer to this as C<&PL_sv_undef>.

=item sv_unref

Unsets the RV status of the SV, and decrements the reference count of
whatever was being referenced by the RV.  This can almost be thought of
as a reversal of C<newSVrv>.  See C<SvROK_off>.

	void    sv_unref (SV* sv)

=item SvUPGRADE

Used to upgrade an SV to a more complex form.  Uses C<sv_upgrade> to perform
the upgrade if necessary.  See C<svtype>.

	bool    SvUPGRADE (SV* sv, svtype mt)

=item sv_upgrade

Upgrade an SV to a more complex form.  Use C<SvUPGRADE>.  See C<svtype>.

=item sv_usepvn

Tells an SV to use C<ptr> to find its string value.  Normally the string is
stored inside the SV but sv_usepvn allows the SV to use an outside string.
The C<ptr> should point to memory that was allocated by C<malloc>.  The
string length, C<len>, must be supplied.  This function will realloc the
memory pointed to by C<ptr>, so that pointer should not be freed or used by
the programmer after giving it to sv_usepvn.  Does not handle 'set' magic.
See C<sv_usepvn_mg>.

	void	sv_usepvn (SV* sv, char* ptr, STRLEN len)

=item sv_usepvn_mg

Like C<sv_usepvn>, but also handles 'set' magic.

	void	sv_usepvn_mg (SV* sv, char* ptr, STRLEN len)

=item sv_vcatpvfn(sv, pat, patlen, args, svargs, svmax, used_locale)

Processes its arguments like C<vsprintf> and appends the formatted output
to an SV.  Uses an array of SVs if the C style variable argument list is
missing (NULL).  Indicates if locale information has been used for formatting.

	void	sv_catpvfn _((SV* sv, const char* pat, STRLEN patlen,
			      va_list *args, SV **svargs, I32 svmax,
			      bool *used_locale));

=item sv_vsetpvfn(sv, pat, patlen, args, svargs, svmax, used_locale)

Works like C<vcatpvfn> but copies the text into the SV instead of
appending it.

	void	sv_setpvfn _((SV* sv, const char* pat, STRLEN patlen,
			      va_list *args, SV **svargs, I32 svmax,
			      bool *used_locale));

=item SvUV

Coerces the given SV to an unsigned integer and returns it.

	UV      SvUV(SV* sv)

=item SvUVX

Returns the unsigned integer which is stored in the SV, assuming SvIOK is true.

	UV      SvUVX(SV* sv)

=item PL_sv_yes

This is the C<true> SV.  See C<PL_sv_no>.  Always refer to this as C<&PL_sv_yes>.

=item THIS

Variable which is setup by C<xsubpp> to designate the object in a C++ XSUB.
This is always the proper type for the C++ object.  See C<CLASS> and
L<perlxs/"Using XS With C++">.

=item toLOWER

Converts the specified character to lowercase.

	int	toLOWER (char c)

=item toUPPER

Converts the specified character to uppercase.

	int	toUPPER (char c)

=item warn

This is the XSUB-writer's interface to Perl's C<warn> function.  Use this
function the same way you use the C C<printf> function.  See C<croak()>.

=item XPUSHi

Push an integer onto the stack, extending the stack if necessary.  Handles
'set' magic. See C<PUSHi>.

	XPUSHi(int d)

=item XPUSHn

Push a double onto the stack, extending the stack if necessary.  Handles 'set'
magic.  See C<PUSHn>.

	XPUSHn(double d)

=item XPUSHp

Push a string onto the stack, extending the stack if necessary.  The C<len>
indicates the length of the string.  Handles 'set' magic.  See C<PUSHp>.

	XPUSHp(char *c, int len)

=item XPUSHs

Push an SV onto the stack, extending the stack if necessary.  Does not
handle 'set' magic.  See C<PUSHs>.

	XPUSHs(sv)

=item XPUSHu

Push an unsigned integer onto the stack, extending the stack if
necessary.  See C<PUSHu>.

=item XS

Macro to declare an XSUB and its C parameter list.  This is handled by
C<xsubpp>.

=item XSRETURN

Return from XSUB, indicating number of items on the stack.  This is usually
handled by C<xsubpp>.

	XSRETURN(int x)

=item XSRETURN_EMPTY

Return an empty list from an XSUB immediately.

	XSRETURN_EMPTY;

=item XSRETURN_IV

Return an integer from an XSUB immediately.  Uses C<XST_mIV>.

	XSRETURN_IV(IV v)

=item XSRETURN_NO

Return C<&PL_sv_no> from an XSUB immediately.  Uses C<XST_mNO>.

	XSRETURN_NO;

=item XSRETURN_NV

Return an double from an XSUB immediately.  Uses C<XST_mNV>.

	XSRETURN_NV(NV v)

=item XSRETURN_PV

Return a copy of a string from an XSUB immediately.  Uses C<XST_mPV>.

	XSRETURN_PV(char *v)

=item XSRETURN_UNDEF

Return C<&PL_sv_undef> from an XSUB immediately.  Uses C<XST_mUNDEF>.

	XSRETURN_UNDEF;

=item XSRETURN_YES

Return C<&PL_sv_yes> from an XSUB immediately.  Uses C<XST_mYES>.

	XSRETURN_YES;

=item XST_mIV

Place an integer into the specified position C<i> on the stack.  The value is
stored in a new mortal SV.

	XST_mIV( int i, IV v )

=item XST_mNV

Place a double into the specified position C<i> on the stack.  The value is
stored in a new mortal SV.

	XST_mNV( int i, NV v )

=item XST_mNO

Place C<&PL_sv_no> into the specified position C<i> on the stack.

	XST_mNO( int i )

=item XST_mPV

Place a copy of a string into the specified position C<i> on the stack.  The
value is stored in a new mortal SV.

	XST_mPV( int i, char *v )

=item XST_mUNDEF

Place C<&PL_sv_undef> into the specified position C<i> on the stack.

	XST_mUNDEF( int i )

=item XST_mYES

Place C<&PL_sv_yes> into the specified position C<i> on the stack.

	XST_mYES( int i )

=item XS_VERSION

The version identifier for an XS module.  This is usually handled
automatically by C<ExtUtils::MakeMaker>.  See C<XS_VERSION_BOOTCHECK>.

=item XS_VERSION_BOOTCHECK

Macro to verify that a PM module's $VERSION variable matches the XS module's
C<XS_VERSION> variable.  This is usually handled automatically by
C<xsubpp>.  See L<perlxs/"The VERSIONCHECK: Keyword">.

=item Zero

The XSUB-writer's interface to the C C<memzero> function.  The C<d> is the
destination, C<n> is the number of items, and C<t> is the type.

	void	Zero( d, n, t )

=back

=head1 AUTHORS

Until May 1997, this document was maintained by Jeff Okamoto
<okamoto@@corp.hp.com>.  It is now maintained as part of Perl itself.

With lots of help and suggestions from Dean Roehrich, Malcolm Beattie,
Andreas Koenig, Paul Hudson, Ilya Zakharevich, Paul Marquess, Neil
Bowers, Matthew Green, Tim Bunce, Spider Boardman, Ulrich Pfeifer,
Stephen McCamant, and Gurusamy Sarathy.

API Listing originally by Dean Roehrich <roehrich@@cray.com>.
@


1.2
log
@perl 5.004_04
@
text
@d37 1
a37 1
The five routines are:
d42 1
d46 1
a46 1
To change the value of an *already-existing* SV, there are six routines:
d49 1
d51 2
a52 2
    void  sv_setpv(SV*, char*);
    void  sv_setpvn(SV*, char*, int)
d54 1
d58 17
a74 6
assigned by using C<sv_setpvn> or C<newSVpv>, or you may allow Perl to
calculate the length by using C<sv_setpv> or by specifying 0 as the second
argument to C<newSVpv>.  Be warned, though, that Perl will determine the
string's length by using C<strlen>, which depends on the string terminating
with a NUL character.  The arguments of C<sv_setpvf> are processed like
C<sprintf>, and the formatted output becomes the value.
d76 5
a80 2
All SVs that will contain strings should, but need not, be terminated
with a NUL character.  If it is not NUL-terminated there is a risk of
d98 14
a111 3
care what the length of the data is, use the global variable C<na>.  Remember,
however, that Perl allows arbitrary strings of data that may both contain
NULs and might not be terminated by a NUL.
d152 1
a152 1
    void  sv_catpvn(SV*, char*, int);
d154 1
d160 8
a167 3
appends the formatted output.  The fourth function extends the string
stored in the first SV with the string stored in the second SV.  It also
forces the second SV to be interpreted as a string.
d181 1
a181 1
The scalar C<undef> value is stored in an SV instance called C<sv_undef>.  Its
d184 2
a185 2
There are also the two values C<sv_yes> and C<sv_no>, which contain Boolean
TRUE and FALSE values, respectively.  Like C<sv_undef>, their addresses can
d188 1
a188 1
Do not be fooled into thinking that C<(SV *) 0> is the same as C<&sv_undef>.
d200 1
a200 1
bus error, or just weird results.  Change the zero to C<&sv_undef> in the first
d276 3
a278 3
C<av_extend> function extends the array so that it contains C<key>
elements.  If C<key> is less than the current length of the array, then
nothing is done.
a363 1
    i = klen;
d365 2
a366 3
    s = key;
    while (i--)
	hash = hash * 33 + *s++;
d500 16
a515 1
	SV* sv_setref_pvn(SV* rv, char* classname, PV iv, int length);
d517 4
a520 2
	int sv_isa(SV* sv, char* name);
	int sv_isobject(SV* sv);
d626 1
a626 2
    File Handle
    Directory Handle
d630 1
a630 1
There is a single stash called "defstash" that holds the items that exist
d633 1
a633 1
the stash "Foo::" in defstash.  The items in the "Bar::Baz" package are
d873 14
a886 1
pointer to the SV as the second.
d895 12
d932 27
d1034 7
a1040 7
C<ENTER>/C<LEAVE> macros (see L<perlcall/EXAMPLE/"Returning a
Scalar">).  Such a construct may be created specially for some
important localized task, or an existing one (like boundaries of
enclosing Perl subroutine/block, or an existing pair for freeing TMPs)
may be used. (In the second case the overhead of additional
localization must be almost negligible.) Note that any XSUB is
automatically enclosed in an C<ENTER>/C<LEAVE> pair.
d1093 1
a1093 1
  SAVEDELETE(defstash, savepv(tmpbuf), strlen(tmpbuf));
d1173 1
a1173 1
    EXTEND(sp, num);
d1175 2
a1176 2
where C<sp> is the stack pointer, and C<num> is the number of elements the
stack should be extended by.
d1229 1
d1245 6
a1250 1
It is suggested that you use the version of malloc that is distributed
d1383 1
a1383 1
(but slightly more complicated).  This tree reflect the way Perl
d1456 1
a1456 1
for the execution-order thread.  Since at this time there is no
d1483 1
a1483 1
down through the tree.  Aat this time the context can have 5 values
d1499 1
a1499 1
additional compilications for conditionals).  These optimizations are
d1509 6
a1514 1
=over 8
d1516 2
a1517 1
=item AvFILL
d1519 1
a1519 1
Same as C<av_len>.
d1526 1
a1526 1
	void	av_clear _((AV* ar));
d1533 1
a1533 1
	void	av_extend _((AV* ar, I32 key));
d1544 5
a1548 1
	SV**	av_fetch _((AV* ar, I32 key, I32 lval));
d1554 1
a1554 1
	I32	av_len _((AV* ar));
d1562 1
a1562 1
	AV*	av_make _((I32 size, SV** svp));
d1566 1
a1566 1
Pops an SV off the end of the array.  Returns C<&sv_undef> if the array is
d1569 1
a1569 1
	SV*	av_pop _((AV* ar));
d1576 1
a1576 1
	void	av_push _((AV* ar, SV* val));
d1582 1
a1582 1
	SV*	av_shift _((AV* ar));
d1596 1
a1596 1
	SV**	av_store _((AV* ar, I32 key, SV* val));
d1602 1
a1602 1
	void	av_undef _((AV* ar));
d1610 1
a1610 1
	void	av_unshift _((AV* ar, I32 num));
d1624 1
a1624 1
	(void) Copy( s, d, n, t );
d1635 1
a1635 1
	HV * CvSTASH( SV* sv )
d1637 1
a1637 1
=item DBsingle
d1642 1
a1642 1
variable which corresponds to Perl's $DB::single variable.  See C<DBsub>.
d1644 1
a1644 1
=item DBsub
d1648 1
a1648 1
variable which corresponds to Perl's $DB::sub variable.  See C<DBsingle>.
d1651 1
a1651 1
	SvPV( GvSV( DBsub ), na )
d1653 1
a1653 1
=item DBtrace
d1657 1
a1657 1
variable.  See C<DBsingle>.
d1668 1
a1668 1
=item dowarn
d1674 2
a1675 1
Declares a stack pointer variable, C<sp>, for the XSUB.  See C<SP>.
d1688 7
d1705 17
a1721 1
	EXTEND( sp, int x );
a1761 4
=item G_VOID

Used to indicate void context.  See C<GIMME_V> and L<perlcall>.

d1766 1
a1766 1
accessable via @@ISA and @@<UNIVERSAL>.
d1781 1
a1781 1
        GV*     gv_fetchmeth _((HV* stash, char* name, STRLEN len, I32 level));
d1788 1
a1788 1
method on the C<stash>.  In fact in the presense of autoloading this may
d1810 6
a1815 3
        GV*     gv_fetchmethod _((HV* stash, char* name));
        GV*     gv_fetchmethod_autoload _((HV* stash, char* name,
                                           I32 autoload));
d1823 1
a1823 1
	HV*	gv_stashpv _((char* name, I32 create));
d1829 1
a1829 1
	HV*	gv_stashsv _((SV* sv, I32 create));
d1843 1
a1843 1
Returns the computed hash (type C<U32>) stored in the hash entry.
d1845 1
a1845 1
	HeHASH(HE* he)
d1854 1
a1854 1
	HeKEY(HE* he)
d1863 1
a1863 1
	HeKLEN(HE* he)
d1871 2
a1872 1
you may use the global variable C<na>.  Remember though, that hash
d1878 1
a1878 1
	HePV(HE* he, STRLEN len)
d1911 1
a1911 10
	void	hv_clear _((HV* tb));

=item hv_delayfree_ent

Releases a hash entry, such as while iterating though the hash, but
delays actual freeing of key and value until the end of the current
statement (or thereabouts) with C<sv_2mortal>.  See C<hv_iternext>
and C<hv_free_ent>.

	void    hv_delayfree_ent _((HV* hv, HE* entry));
d1920 1
a1920 1
	SV*	hv_delete _((HV* tb, char* key, U32 klen, I32 flags));
d1929 1
a1929 1
	SV*     hv_delete_ent _((HV* tb, SV* key, I32 flags, U32 hash));
d1936 1
a1936 1
	bool	hv_exists _((HV* tb, char* key, U32 klen));
d1943 1
a1943 1
	bool    hv_exists_ent _((HV* tb, SV* key, U32 hash));
d1955 1
a1955 1
	SV**	hv_fetch _((HV* tb, char* key, U32 klen, I32 lval));
d1970 1
a1970 8
	HE*     hv_fetch_ent  _((HV* tb, SV* key, I32 lval, U32 hash));

=item hv_free_ent

Releases a hash entry, such as while iterating though the hash.  See
C<hv_iternext> and C<hv_delayfree_ent>.

	void    hv_free_ent _((HV* hv, HE* entry));
d1976 1
a1976 1
	I32	hv_iterinit _((HV* tb));
d1978 7
a1984 4
Note that hv_iterinit I<currently> returns the number of I<buckets> in
the hash and I<not> the number of keys (as indicated in the Advanced
Perl Programming book). This may change in future. Use the HvKEYS(hv)
macro to find the number of keys in a hash.
d1991 1
a1991 1
	char*	hv_iterkey _((HE* entry, I32* retlen));
d1999 1
a1999 1
	SV*     hv_iterkeysv  _((HE* entry));
d2005 1
a2005 1
	HE*	hv_iternext _((HV* tb));
d2012 1
a2012 1
	SV *	hv_iternextsv _((HV* hv, char** key, I32* retlen));
d2019 1
a2019 1
	SV*	hv_iterval _((HV* tb, HE* entry));
d2025 1
a2025 1
	void	hv_magic _((HV* hv, GV* gv, int how));
d2031 1
a2031 1
	char *HvNAME (HV* stash)
d2047 1
a2047 1
	SV**	hv_store _((HV* tb, char* key, U32 klen, SV* val, U32 hash));
d2064 1
a2064 1
	HE*     hv_store_ent  _((HV* tb, SV* key, SV* val, U32 hash));
d2070 1
a2070 1
	void	hv_undef _((HV* tb));
d2077 1
a2077 1
	int isALNUM (char c)
d2084 1
a2084 1
	int isALPHA (char c)
d2090 1
a2090 1
	int isDIGIT (char c)
d2096 1
a2096 1
	int isLOWER (char c)
d2102 1
a2102 1
	int isSPACE (char c)
d2108 1
a2108 1
	int isUPPER (char c)
d2126 7
d2141 1
a2141 1
	int	mg_clear _((SV* sv));
d2147 1
a2147 1
	int	mg_copy _((SV *, SV *, char *, STRLEN));
d2153 1
a2153 1
	MAGIC*	mg_find _((SV* sv, int type));
d2159 1
a2159 1
	int	mg_free _((SV* sv));
d2165 1
a2165 1
	int	mg_get _((SV* sv));
d2171 1
a2171 1
	U32	mg_len _((SV* sv));
d2177 1
a2177 1
	void	mg_magical _((SV* sv));
d2183 9
a2191 1
	int	mg_set _((SV* sv));
d2199 1
a2199 1
	(void) Move( s, d, n, t );
d2201 1
a2201 1
=item na
d2203 3
a2205 2
A variable which may be used with C<SvPV> to tell Perl to calculate the
string length.
d2211 1
a2211 1
	void * New( x, void *ptr, int size, type )
d2213 1
a2213 1
=item Newc
d2215 1
a2215 1
The XSUB-writer's interface to the C C<malloc> function, with cast.
d2217 1
a2217 1
	void * Newc( x, void *ptr, int size, type, cast )
d2219 1
a2219 1
=item Newz
d2221 1
a2221 2
The XSUB-writer's interface to the C C<malloc> function.  The allocated
memory is zeroed with C<memzero>.
d2223 1
a2223 1
	void * Newz( x, void *ptr, int size, type )
d2225 1
a2225 1
=item newAV
d2227 2
a2228 1
Creates a new AV.  The reference count is set to 1.
d2230 1
a2230 1
	AV*	newAV _((void));
d2236 1
a2236 1
	HV*	newHV _((void));
d2243 1
a2243 1
	SV*	newRV_inc _((SV* ref));
d2252 1
a2252 1
	SV*     newRV_noinc _((SV* ref));
d2254 1
a2254 1
=item newSV
d2256 6
a2261 3
Creates a new SV.  The C<len> parameter indicates the number of bytes of
preallocated string space the SV should have.  The reference count for the
new SV is set to 1.
d2263 1
a2263 1
	SV*	newSV _((STRLEN len));
d2270 1
a2270 1
	SV*	newSViv _((IV i));
d2277 1
a2277 1
	SV*	newSVnv _((NV i));
d2284 16
a2299 1
	SV*	newSVpv _((char* s, STRLEN len));
d2308 1
a2308 1
	SV*	newSVrv _((SV* rv, char* classname));
d2314 1
a2314 1
	SV*	newSVsv _((SV* old));
d2325 7
d2364 1
a2364 1
	I32	perl_call_argv _((char* subname, I32 flags, char** argv));
d2371 1
a2371 1
	I32	perl_call_method _((char* methname, I32 flags));
d2377 1
a2377 1
	I32	perl_call_pv _((char* subname, I32 flags));
d2384 1
a2384 1
	I32	perl_call_sv _((SV* sv, I32 flags));
d2398 1
a2398 1
	I32	perl_eval_sv _((SV* sv, I32 flags));
d2404 1
a2404 1
	SV*	perl_eval_pv _((char* p, I32 croak_on_error));
d2416 1
a2416 1
	AV*	perl_get_av _((char* name, I32 create));
d2424 1
a2424 1
	CV*	perl_get_cv _((char* name, I32 create));
d2432 1
a2432 1
	HV*	perl_get_hv _((char* name, I32 create));
d2440 1
a2440 1
	SV*	perl_get_sv _((char* name, I32 create));
d2450 1
a2450 1
	void	perl_require_pv _((char* pv));
d2460 1
a2460 1
	int POPi();
d2466 1
a2466 1
	long POPl();
d2472 1
a2472 1
	char * POPp();
d2478 1
a2478 1
	double POPn();
d2484 1
a2484 1
	SV* POPs();
d2495 1
a2495 1
See C<XPUSHi>.
d2497 1
a2497 1
	PUSHi(int d)
d2502 1
a2502 1
See C<XPUSHn>.
d2504 1
a2504 1
	PUSHn(double d)
d2509 2
a2510 1
The C<len> indicates the length of the string.  See C<XPUSHp>.
d2512 1
a2512 1
	PUSHp(char *c, int len )
d2516 11
a2526 2
Push an SV onto the stack.  The stack must have room for this element.  See
C<XPUSHs>.
a2527 1
	PUSHs(sv)
d2540 1
a2540 1
	void * Renew( void *ptr, int size, type )
d2546 1
a2546 1
	void * Renewc( void *ptr, int size, type, cast )
d2570 1
a2570 1
	char*	savepv _((char* sv));
d2577 1
a2577 1
	char*	savepvn _((char* sv, I32 len));
d2601 1
a2601 1
	SV* ST(int x)
d2607 1
a2607 1
	int strEQ( char *s1, char *s2 )
d2614 1
a2614 1
	int strGE( char *s1, char *s2 )
d2621 1
a2621 1
	int strGT( char *s1, char *s2 )
d2628 1
a2628 1
	int strLE( char *s1, char *s2 )
d2635 1
a2635 1
	int strLT( char *s1, char *s2 )
d2641 1
a2641 1
	int strNE( char *s1, char *s2 )
d2648 1
a2648 1
	int strnEQ( char *s1, char *s2 )
d2655 1
a2655 1
	int strnNE( char *s1, char *s2, int len )
d2662 1
a2662 1
	SV*	sv_2mortal _((SV* sv));
d2670 1
a2670 1
	SV*	sv_bless _((SV* sv, HV* stash));
d2675 1
d2677 7
a2683 1
	void	sv_catpv _((SV* sv, char* ptr));
d2688 4
a2691 1
C<len> indicates number of bytes to copy.
d2693 5
a2697 1
	void	sv_catpvn _((SV* sv, char* ptr, STRLEN len));
d2702 6
a2707 1
to an SV.
d2709 3
a2711 1
	void	sv_catpvf _((SV* sv, const char* pat, ...));
d2716 18
a2733 1
C<dsv>.
a2734 1
	void	sv_catsv _((SV* dsv, SV* ssv));
d2742 1
a2742 1
	I32	sv_cmp _((SV* sv1, SV* sv2));
d2748 1
a2748 1
	int SvCUR (SV* sv)
d2754 1
a2754 1
	SvCUR_set (SV* sv, int val )
d2760 9
a2768 1
	void	sv_dec _((SV* sv));
d2775 1
a2775 1
	*SvEND(sv)
d2782 8
a2789 1
	I32	sv_eq _((SV* sv1, SV* sv2));
d2793 4
a2796 2
Expands the character buffer in the SV.  Calls C<sv_grow> to perform the
expansion if necessary.  Returns a pointer to the character buffer.
d2798 1
a2798 1
	char * SvGROW( SV* sv, int len )
d2810 9
a2818 1
	void	sv_inc _((SV* sv));
d2824 1
a2824 1
	int SvIOK (SV* SV)
d2830 1
a2830 1
	SvIOK_off (SV* sv)
d2836 1
a2836 1
	SvIOK_on (SV* sv)
d2842 1
a2842 1
	SvIOK_on (SV* sv)
d2849 1
a2849 1
	int SvIOKp (SV* SV)
d2854 1
a2854 1
class.  This does not know how to check for subtype, so it doesn't work in
d2857 1
a2857 7
	int	sv_isa _((SV* sv, char* name));

=item SvIV

Returns the integer which is in the SV.

	int SvIV (SV* sv)
d2865 7
a2871 1
	int	sv_isobject _((SV* sv));
d2875 1
a2875 1
Returns the integer which is stored in the SV.
d2877 1
a2877 1
	int  SvIVX (SV* sv);
d2883 1
a2883 1
	int SvLEN (SV* sv)
d2889 1
a2889 1
	STRLEN	sv_len _((SV* sv));
d2895 1
a2895 1
	void	sv_magic _((SV* sv, SV* obj, int how, char* name, I32 namlen));
d2902 1
a2902 7
	SV*	sv_mortalcopy _((SV* oldsv));

=item SvOK

Returns a boolean indicating whether the value is an SV.

	int SvOK (SV* sv)
d2908 1
a2908 5
	SV*	sv_newmortal _((void));

=item sv_no

This is the C<false> SV.  See C<sv_yes>.  Always refer to this as C<&sv_no>.
d2915 1
a2915 1
	int SvNIOK (SV* SV)
d2921 1
a2921 1
	SvNIOK_off (SV* sv)
d2928 5
a2932 1
	int SvNIOKp (SV* SV)
d2938 1
a2938 1
	int SvNOK (SV* SV)
d2944 1
a2944 1
	SvNOK_off (SV* sv)
d2950 1
a2950 1
	SvNOK_on (SV* sv)
d2956 1
a2956 1
	SvNOK_on (SV* sv)
d2963 1
a2963 1
	int SvNOKp (SV* SV)
d2967 1
a2967 1
Returns the double which is stored in the SV.
d2969 1
a2969 1
	double SvNV (SV* sv);
d2973 1
a2973 1
Returns the double which is stored in the SV.
d2975 16
a2990 1
	double SvNVX (SV* sv);
d2996 1
a2996 1
	int SvPOK (SV* SV)
d3002 1
a3002 1
	SvPOK_off (SV* sv)
d3008 1
a3008 1
	SvPOK_on (SV* sv)
d3014 1
a3014 1
	SvPOK_on (SV* sv)
d3021 1
a3021 1
	int SvPOKp (SV* SV)
d3026 3
a3028 2
if the SV does not contain a string.  If C<len> is C<na> then Perl will
handle the length on its own.
d3030 6
a3035 1
	char * SvPV (SV* sv, int len )
d3041 1
a3041 1
	char * SvPVX (SV* sv)
d3047 1
a3047 1
	int SvREFCNT (SV* sv);
d3053 1
a3053 1
	void SvREFCNT_dec (SV* sv)
d3059 1
a3059 1
	void SvREFCNT_inc (SV* sv)
d3065 1
a3065 1
	int SvROK (SV* sv)
d3071 1
a3071 1
	SvROK_off (SV* sv)
d3077 1
a3077 1
	SvROK_on (SV* sv)
d3083 15
a3097 1
	SV*	SvRV (SV* sv);
d3099 1
a3099 1
=item SvTAINT
d3101 1
a3101 1
Taints an SV if tainting is enabled
d3103 1
a3103 1
	SvTAINT (SV* sv);
d3105 1
a3105 1
=item SvTAINTED
d3107 2
a3108 1
Checks to see if an SV is tainted. Returns TRUE if it is, FALSE if not.
d3110 1
a3110 1
	SvTAINTED (SV* sv);
d3112 1
a3112 1
=item SvTAINTED_off
d3114 1
a3114 6
Untaints an SV. Be I<very> careful with this routine, as it short-circuits
some of Perl's fundamental security features. XS module authors should
not use this function unless they fully understand all the implications
of unconditionally untainting the value. Untainting should be done in
the standard perl fashion, via a carefully crafted regexp, rather than
directly untainting variables.
d3116 1
a3116 1
	SvTAINTED_off (SV* sv);
d3118 1
a3118 1
=item SvTAINTED_on
d3120 2
a3121 1
Marks an SV as tainted.
d3123 1
a3123 1
	SvTAINTED_on (SV* sv);
d3125 1
a3125 1
=item sv_setiv
d3127 1
a3127 1
Copies an integer into the given SV.
d3129 1
a3129 1
	void	sv_setiv _((SV* sv, IV num));
d3131 1
a3131 1
=item sv_setnv
d3133 2
a3134 1
Copies a double into the given SV.
d3136 1
a3136 1
	void	sv_setnv _((SV* sv, double num));
d3138 1
a3138 1
=item sv_setpv
d3140 1
a3140 1
Copies a string into an SV.  The string must be null-terminated.
d3142 1
a3142 1
	void	sv_setpv _((SV* sv, char* ptr));
d3147 3
a3149 1
bytes to be copied.
d3151 5
a3155 1
	void	sv_setpvn _((SV* sv, char* ptr, STRLEN len));
d3160 5
a3164 1
output.
d3166 3
a3168 1
	void	sv_setpvf _((SV* sv, const char* pat, ...));
d3178 1
a3178 1
	SV*	sv_setref_iv _((SV *rv, char *classname, IV iv));
d3188 1
a3188 1
	SV*	sv_setref_nv _((SV *rv, char *classname, double nv));
d3194 1
a3194 1
the new SV.  If the C<pv> argument is NULL then C<sv_undef> will be placed
d3199 1
a3199 1
	SV*	sv_setref_pv _((SV *rv, char *classname, void* pv));
d3215 1
a3215 1
	SV*	sv_setref_pvn _((SV *rv, char *classname, char* pv, I32 n));
d3219 14
d3236 10
a3245 1
The source SV may be destroyed if it is mortal.
d3247 12
a3258 1
	void	sv_setsv _((SV* dsv, SV* ssv));
d3264 30
a3293 1
	HV * SvSTASH (SV* sv)
d3326 1
a3326 1
false, defined or undefined.
d3328 1
a3328 1
	int SvTRUE (SV* sv)
d3341 12
d3358 1
a3358 1
	bool    SvUPGRADE _((SV* sv, svtype mt));
a3363 12
=item sv_undef

This is the C<undef> SV.  Always refer to this as C<&sv_undef>.

=item sv_unref

Unsets the RV status of the SV, and decrements the reference count of
whatever was being referenced by the RV.  This can almost be thought of
as a reversal of C<newSVrv>.  See C<SvROK_off>.

	void    sv_unref _((SV* sv));

d3371 10
a3380 1
the programmer after giving it to sv_usepvn.
d3382 1
a3382 1
	void	sv_usepvn _((SV* sv, char* ptr, STRLEN len));
d3384 3
a3386 1
=item sv_yes
d3388 28
a3415 1
This is the C<true> SV.  See C<sv_no>.  Always refer to this as C<&sv_yes>.
d3427 1
a3427 1
	int toLOWER (char c)
d3433 1
a3433 1
	int toUPPER (char c)
d3442 2
a3443 2
Push an integer onto the stack, extending the stack if necessary.  See
C<PUSHi>.
d3449 2
a3450 2
Push a double onto the stack, extending the stack if necessary.  See
C<PUSHn>.
d3457 1
a3457 1
indicates the length of the string.  See C<PUSHp>.
d3463 2
a3464 1
Push an SV onto the stack, extending the stack if necessary.  See C<PUSHs>.
d3468 5
d3483 1
a3483 1
	XSRETURN(int x);
d3495 1
a3495 1
	XSRETURN_IV(IV v);
d3499 1
a3499 1
Return C<&sv_no> from an XSUB immediately.  Uses C<XST_mNO>.
d3507 1
a3507 1
	XSRETURN_NV(NV v);
d3513 1
a3513 1
	XSRETURN_PV(char *v);
d3517 1
a3517 1
Return C<&sv_undef> from an XSUB immediately.  Uses C<XST_mUNDEF>.
d3523 1
a3523 1
Return C<&sv_yes> from an XSUB immediately.  Uses C<XST_mYES>.
d3532 1
a3532 1
	XST_mIV( int i, IV v );
d3539 1
a3539 1
	XST_mNV( int i, NV v );
d3543 1
a3543 1
Place C<&sv_no> into the specified position C<i> on the stack.
d3545 1
a3545 1
	XST_mNO( int i );
d3552 1
a3552 1
	XST_mPV( int i, char *v );
d3556 1
a3556 1
Place C<&sv_undef> into the specified position C<i> on the stack.
d3558 1
a3558 1
	XST_mUNDEF( int i );
d3562 1
a3562 1
Place C<&sv_yes> into the specified position C<i> on the stack.
d3564 1
a3564 1
	XST_mYES( int i );
d3582 1
a3582 1
	(void) Zero( d, n, t );
d3586 1
a3586 1
=head1 EDITOR
d3588 2
a3589 1
Jeff Okamoto <F<okamoto@@corp.hp.com>>
d3593 2
a3594 6
Bowers, Matthew Green, Tim Bunce, Spider Boardman, Ulrich Pfeifer, and
Stephen McCamant.

API Listing by Dean Roehrich <F<roehrich@@cray.com>>.

=head1 DATE
d3596 1
a3596 1
Version 31.8: 1997/5/17
@


1.1
log
@Initial revision
@
text
@d11 3
a13 1
=head1 Datatypes
d25 2
a26 2
Perl uses a special typedef IV which is large enough to hold either an
integer or a pointer.
d31 1
a31 1
=head2 Working with SV's
d37 1
a37 1
The four routines are:
d42 1
d45 1
a45 1
To change the value of an *already-existing* SV, there are five routines:
d49 1
d51 1
a51 1
    void  sv_setpv(SV*, char*);
d59 10
a68 1
with a NUL character.
d83 1
a83 1
NUL's and not be terminated by a NUL.
d85 1
a85 1
If you simply want to know if the scalar value is TRUE, you can use:
d96 3
a98 1
decrease, the allocated memory of an SV.
d125 1
d130 4
a133 3
yourself.  The third function extends the string stored in the first SV
with the string stored in the second SV.  It also forces the second SV to
be interpreted as a string.
d138 1
a138 1
    SV*  perl_get_sv("varname", FALSE);
d164 1
a164 1
return a real value, or undef otherwise.  Instead it has returned a null
d166 2
a167 2
or just weird results.  Change the zero to C<&sv_undef> in the first line and
all will be well.
d170 1
a170 1
call is not necessary.  See the section on B<MORTALITY>.
d175 1
a175 1
to use C<Sv*OK> macros.  Since a scalar can be both a number and a string,
d190 1
a190 1
In general, though, it's best to just use the C<Sv*V> macros.
d192 1
a192 1
=head2 Working with AV's
d194 2
a195 2
There are two ways to create and load an AV.  The first method just creates
an empty AV:
d199 1
a199 1
The second method both creates the AV and initially populates it with SV's:
d204 1
a204 1
AV has been created, the SV's can be destroyed, if so desired.
d206 1
a206 1
Once the AV has been created, the following operations are possible on AV's:
d220 1
a220 2
    I32   av_len(AV*); /* Returns highest index value in array */

a221 2
            /* Fetches value at key offset, but it stores an undef value
               at the offset if lval is non-zero */
a222 1
            /* Stores val at offset key */
d224 10
a233 1
Take note that C<av_fetch> and C<av_store> return C<SV**>'s, not C<SV*>'s.
a235 1
            /* Clear out all elements, but leave the array */
a236 1
            /* Undefines the array, removing all elements */
d238 7
a244 1
            /* Extend the array to a total of key elements */
d249 1
a249 1
    AV*  perl_get_av("varname", FALSE);
d253 4
a256 1
=head2 Working with HV's
d262 1
a262 1
Once the HV has been created, the following operations are possible on HV's:
d267 8
a274 5
The C<klen> parameter is the length of the key being passed in.  The C<val>
argument contains the SV pointer to the scalar being stored, and C<hash> is
the pre-computed hash value (zero if you want C<hv_store> to calculate it
for you).  The C<lval> parameter indicates whether this fetch is actually a
part of a store operation.
d277 3
a279 3
C<SV*>.  In order to access the scalar value, you must first dereference
the return value.  However, you should check to make sure that the return
value is not NULL before dereferencing it.
d286 3
a291 1
            /* Clears all entries in hash table */
d293 4
a296 1
            /* Undefines the hash table */
d324 1
a324 1
    HV*  perl_get_hv("varname", FALSE);
d328 1
a328 1
The hash algorithm, for those who are interested, is:
d336 49
d390 1
a390 1
To create a reference, use the following command:
d392 2
a393 1
    SV* newRV((SV*) thing);
d395 7
a401 3
The C<thing> argument can be any of an C<SV*>, C<AV*>, or C<HV*>.  Once
you have a reference, you can use the following macro to dereference the
reference:
d412 2
a413 2
To actually discover what the reference refers to, you must use the following
macro and then check the value returned.
d422 1
d426 4
a429 1
    SVt_PVMG  Blessed Scalar
d443 2
a444 2
which class the reference will belong to.  See the section on L<Stashes>
for information on converting class names into stashes.
d449 2
a450 3
point to.
If classname is non-null, the SV is blessed into the specified class.
SV is returned.
d454 2
a455 2
Copies integer or double into an SV whose reference is rv.  SV is blessed
if classname is non-null.
d460 2
a461 2
Copies pointer (I<not a string!>) into an SV whose reference is rv.
SV is blessed if classname is non-null.
d465 2
a466 3
Copies string into an SV whose reference is rv.
Set length to 0 to let Perl calculate the string length.
SV is blessed if classname is non-null.
d473 1
a473 1
=head1 Creating New Variables
d475 2
a476 2
To create a new Perl variable, which can be accessed from your Perl script,
use the following routines, depending on the variable type.
d478 3
a480 3
    SV*  perl_get_sv("varname", TRUE);
    AV*  perl_get_av("varname", TRUE);
    HV*  perl_get_hv("varname", TRUE);
d485 2
a486 40
There are additional bits that may be OR'ed with the TRUE argument to enable
certain extra features.  Those bits are:

    0x02  Marks the variable as multiply defined, thus preventing the
	  "Indentifier <varname> used only once: possible typo" warning.
    0x04  Issues a "Had to create <varname> unexpectedly" warning if
	  the variable didn't actually exist.  This is useful if
	  you expected the variable to already exist and want to propagate
	  this warning back to the user.

If the C<varname> argument does not contain a package specifier, it is
created in the current package.

=head1 XSUB's and the Argument Stack

The XSUB mechanism is a simple way for Perl programs to access C subroutines.
An XSUB routine will have a stack that contains the arguments from the Perl
program, and a way to map from the Perl data structures to a C equivalent.

The stack arguments are accessible through the C<ST(n)> macro, which returns
the C<n>'th stack argument.  Argument 0 is the first argument passed in the
Perl subroutine call.  These arguments are C<SV*>, and can be used anywhere
an C<SV*> is used.

Most of the time, output from the C routine can be handled through use of
the RETVAL and OUTPUT directives.  However, there are some cases where the
argument stack is not already long enough to handle all the return values.
An example is the POSIX tzname() call, which takes no arguments, but returns
two, the local timezone's standard and summer time abbreviations.

To handle this situation, the PPCODE directive is used and the stack is
extended using the macro:

    EXTEND(sp, num);

where C<sp> is the stack pointer, and C<num> is the number of elements the
stack should be extended by.

Now that there is room on the stack, values can be pushed on it using the
macros to push IV's, doubles, strings, and SV pointers respectively:
d488 62
a549 43
    PUSHi(IV)
    PUSHn(double)
    PUSHp(char*, I32)
    PUSHs(SV*)

And now the Perl program calling C<tzname>, the two values will be assigned
as in:

    ($standard_abbrev, $summer_abbrev) = POSIX::tzname;

An alternate (and possibly simpler) method to pushing values on the stack is
to use the macros:

    XPUSHi(IV)
    XPUSHn(double)
    XPUSHp(char*, I32)
    XPUSHs(SV*)

These macros automatically adjust the stack for you, if needed.

For more information, consult L<perlxs>.

=head1 Mortality

In Perl, values are normally "immortal" -- that is, they are not freed unless
explicitly done so (via the Perl C<undef> call or other routines in Perl
itself).

Add cruft about reference counts.
	int SvREFCNT(SV* sv);
	void SvREFCNT_inc(SV* sv);
	void SvREFCNT_dec(SV* sv);

In the above example with C<tzname>, we needed to create two new SV's to push
onto the argument stack, that being the two strings.  However, we don't want
these new SV's to stick around forever because they will eventually be
copied into the SV's that hold the two scalar variables.

An SV (or AV or HV) that is "mortal" acts in all ways as a normal "immortal"
SV, AV, or HV, but is only valid in the "current context".  When the Perl
interpreter leaves the current context, the mortal SV, AV, or HV is
automatically freed.  Generally the "current context" means a single
Perl statement.
d557 16
a572 28
The first call creates a mortal SV, the second converts an existing SV to
a mortal SV, the third creates a mortal copy of an existing SV.

The mortal routines are not just for SV's -- AV's and HV's can be made mortal
by passing their address (and casting them to C<SV*>) to the C<sv_2mortal> or
C<sv_mortalcopy> routines.

>From Ilya:
Beware that the sv_2mortal() call is eventually equivalent to
svREFCNT_dec(). A value can happily be mortal in two different contexts,
and it will be svREFCNT_dec()ed twice, once on exit from these
contexts. It can also be mortal twice in the same context. This means
that you should be very careful to make a value mortal exactly as many
times as it is needed. The value that go to the Perl stack I<should>
be mortal.

You should be careful about creating mortal variables.  It is possible for
strange things to happen should you make the same value mortal within
multiple contexts.

=head1 Stashes

A stash is a hash table (associative array) that contains all of the
different objects that are contained within a package.  Each key of the
stash is a symbol name (shared by all the different types of objects
that have the same name), and each value in the hash table is called a
GV (for Glob Value).  This GV in turn contains references to the various
objects of that name, including (but not limited to) the following:
d582 5
a586 5
Perl stores various stashes in a separate GV structure (for global
variable) but represents them with an HV structure.  The keys in this
larger GV are the various package names; the values are the C<GV*>'s
which are stashes.  It may help to think of a stash purely as an HV,
and that the term "GV" means the global variable hash.
d611 2
a612 2
If you need to return a blessed value to your Perl script, you can use the
following function:
d622 41
a662 1
=head1 Magic
a666 2
# Version 6, 1995/1/27

d697 1
a697 1
overriden, and multiple instances of the same type of magic can be
d700 3
a702 3
The C<name> and C<namlem> arguments are used to associate a string with
the magic, typically the name of a variable. C<namlem> is stored in the
C<mg_len> field and if C<name> is non-null and C<namlem> >= 0 a malloc'd
d713 1
a713 1
the C<how> argument is "#", or if it is a null pointer, then C<obj> is
d768 7
a774 7
    mg_type  MGVTBL              Type of magicalness
    -------  ------              -------------------
    \0       vtbl_sv             Regexp???
    A        vtbl_amagic         Operator Overloading
    a        vtbl_amagicelem     Operator Overloading
    c        0                   Used in Operator Overloading
    B        vtbl_bm             Boyer-Moore???
d777 2
a778 1
    g        vtbl_mglob          Regexp /g flag???
d781 9
a789 7
    L        0 (but sets RMAGICAL)     Perl Module/Debugger???
    l        vtbl_dbline         Debugger?
    P        vtbl_pack           Tied Array or Hash
    p        vtbl_packelem       Tied Array or Hash element
    q        vtbl_packelem       Tied Scalar or Handle
    S        vtbl_sig            Signal Hash
    s        vtbl_sigelem        Signal Hash element
d791 13
a803 11
    U        vtbl_uvar	         ???
    v        vtbl_vec	         Vector
    x        vtbl_substr         Substring???
    *        vtbl_glob           GV???
    #        vtbl_arylen         Array Length
    .        vtbl_pos	         $. scalar variable
    ~        Reserved for extensions, but multiple extensions may clash

When an upper-case and lower-case letter both exist in the table, then the
upper-case letter is used to represent some kind of composite type (a list
or a hash), and the lower-case letter is used to represent an element of
d806 28
d840 1
a840 1
if the SV is not of type SVt_PVMG, Perl may core-dump.
d845 174
a1018 2
field is an upper-case letter, then the mg_obj is copied to C<nsv>, but
the mg_type field is changed to be the lower-case letter.
d1020 1
a1020 1
=head1 Double-Typed SV's
d1022 55
a1076 3
Scalar variables normally contain only one type of value, an integer,
double, pointer, or reference.  Perl will automatically convert the
actual scalar data from the stored type into the requested type.
d1078 2
a1079 3
Some scalar variables contain more than one type of scalar data.  For
example, the variable C<$!> contains either the numeric value of C<errno>
or its string equivalent from either C<strerror> or C<sys_errlist[]>.
d1081 4
a1084 4
To force multiple data values into an SV, you must do two things: use the
C<sv_set*v> routines to add the additional scalar type, then set a flag
so that Perl will believe it contains more than one type of data.  The
four macros to set the flags are:
d1086 2
a1087 4
	SvIOK_on
	SvNOK_on
	SvPOK_on
	SvROK_on
d1089 1
a1089 4
The particular macro you must use depends on which C<sv_set*v> routine
you called first.  This is because every C<sv_set*v> routine turns on
only the bit for the particular type of data being set, and turns off
all the rest.
d1091 2
a1092 3
For example, to create a new Perl variable called "dberror" that contains
both the numeric and descriptive string error values, you could use the
following code:
d1094 4
a1097 2
    extern int  dberror;
    extern char *dberror_list;
d1099 2
a1100 4
    SV* sv = perl_get_sv("dberror", TRUE);
    sv_setiv(sv, (IV) dberror);
    sv_setpv(sv, dberror_list[dberror]);
    SvIOK_on(sv);
d1102 1
a1102 2
If the order of C<sv_setiv> and C<sv_setpv> had been reversed, then the
macro C<SvPOK_on> would need to be called instead of C<SvIOK_on>.
d1104 1
a1104 1
=head1 Calling Perl Routines from within C Programs
d1139 2
a1140 1
For more information, consult L<perlcall>.
d1142 1
a1142 1
=head1 Memory Allocation
d1144 4
a1147 4
It is strongly suggested that you use the version of malloc that is distributed
with Perl.  It keeps pools of various sizes of unallocated memory in order to
more quickly satisfy allocation requests.
However, on some platforms, it may cause spurious malloc or free errors.
d1153 9
a1161 5
These three macros are used to initially allocate memory.  The first argument
C<x> was a "magic cookie" that was used to keep track of who called the macro,
to help when debugging memory problems.  However, the current code makes no
use of this feature (Larry has switched to using a run-time memory checker),
so this argument can be any number.
a1162 1
The second argument C<pointer> will point to the newly allocated memory.
d1191 206
d1407 1
a1407 1
See C<av_len>.
d1411 2
a1412 1
Clears an array, making it empty.
d1429 3
d1442 3
a1444 2
Creats a new AV and populates it with a list of SVs.  The SVs are copied
into the array, so they may be freed after the call to av_make.
d1457 2
a1458 1
Pushes an SV onto the end of the array.
d1471 8
a1478 2
return value will be null if the operation failed, otherwise it can be
dereferenced to get the original C<SV*>.
d1484 1
a1484 1
Undefines the array.
d1490 3
a1492 1
Unshift an SV onto the beginning of the array.
d1499 2
a1500 1
constructor.  This is always a C<char*>.  See C<THIS> and L<perlxs>.
d1506 1
a1506 1
the type.
d1525 2
a1526 1
Single-stepping is automatically turned on after every step.  See C<DBsub>.
d1531 2
a1532 1
the SV which holds the name of the sub being debugged.  See C<DBsingle>.
d1537 6
d1545 2
a1546 1
Declare a stack marker for the XSUB.  See C<MARK> and C<dORIGMARK>.
d1552 4
d1558 1
a1558 1
Declares a stack pointer for the XSUB.  See C<SP>.
d1566 5
d1592 1
a1592 1
Used to indicate array context.  See C<GIMME> and L<perlcall>.
d1605 8
a1612 2
The XSUB-writer's equivalent to Perl's C<wantarray>.  Returns C<G_SCALAR> or
C<G_ARRAY> for scalar or array context.
d1620 57
a1676 1
Used to indicate scalar context.  See C<GIMME> and L<perlcall>.
d1696 59
a1754 1
=item he_free
d1756 10
a1765 1
Releases a hash entry from an iterator.  See C<hv_iternext>.
d1773 9
d1785 2
a1786 2
and returned to the caller.  The C<lken> is the length of the key.  The
C<flags> value will normally be zero; if set to G_DISCARD then null will be
d1791 9
d1803 1
a1803 1
C<lken> is the length of the key.
d1807 7
d1817 1
a1817 1
C<lken> is the length of the key.  If C<lval> is set then the fetch will be
d1821 3
d1826 22
d1854 5
d1866 8
d1909 1
a1909 1
the length of the key.  The C<hash> parameter is the pre-computed hash
d1911 8
a1918 2
null if the operation failed, otherwise it can be dereferenced to get the
original C<SV*>.
d1922 17
d1954 1
a1954 1
Returns a boolean indicating whether the C C<char> is an ascii alphanumeric
d1986 6
a1991 1
stack.  See L<perlxs>.
d2001 1
a2001 1
Stack marker for the XSUB.  See C<dMARK>.
d2055 1
a2055 1
the type.
d2085 1
a2085 1
Creates a new AV.  The refcount is set to 1.
d2091 1
a2091 1
Creates a new HV.  The refcount is set to 1.
d2095 1
a2095 1
=item newRV
d2097 1
a2097 1
Creates an RV wrapper for an SV.  The refcount for the original SV is
d2100 10
a2109 1
	SV*	newRV _((SV* ref));
d2114 2
a2115 2
pre-allocated string space the SV should have.  The refcount for the new SV
is set to 1.
d2121 2
a2122 2
Creates a new SV and copies an integer into it.  The refcount for the SV is
set to 1.
d2128 2
a2129 2
Creates a new SV and copies a double into it.  The refcount for the SV is
set to 1.
d2135 2
a2136 2
Creates a new SV and copies a string into it.  The refcount for the SV is
set to 1.  If C<len> is zero then Perl will compute the length.
d2143 1
a2143 1
it will be upgraded one.  If C<classname> is non-null then the new SV will
d2145 1
a2145 1
refcount is 1.
d2151 1
a2151 1
Creates a new SV which is an exact duplicate of the orignal SV.
d2232 6
d2246 1
a2246 1
set and the variable does not exist then null is returned.
d2254 1
a2254 1
set and the variable does not exist then null is returned.
d2262 1
a2262 1
set and the variable does not exist then null is returned.
d2270 1
a2270 1
set and the variable does not exist then null is returned.
d2374 2
a2375 1
This is always the proper type for the XSUB.  See L<perlxs>.
d2490 2
a2491 2
must be designated by its stash (see C<gv_stashpv()>).  The refcount of the
SV is unaffected.
d2508 7
d2517 1
a2517 1
Concatentates the string from SV C<ssv> onto the end of the string in SV
d2522 8
d2542 6
d2555 7
d2564 2
a2565 1
Expands the character buffer in the SV.
d2569 12
d2599 6
d2646 6
d2673 1
a2673 1
Creates a new SV which is mortal.  The refcount of the SV is set to 1.
d2719 6
d2762 6
d2791 1
a2791 1
Returns the value of the object's refcount.
d2797 1
a2797 1
Decrements the refcount of the given SV.
d2803 1
a2803 1
Increments the refcount of the given SV.
d2831 29
d2885 7
d2894 5
a2898 4
Copies an integer into an SV, optionally blessing the SV.  The SV must be an
RV.  The C<classname> argument indicates the package for the blessing.  Set
C<classname> to C<Nullch> to avoid the blessing.  The new SV will be
returned and will have a refcount of 1.
d2904 5
a2908 4
Copies a double into an SV, optionally blessing the SV.  The SV must be an
RV.  The C<classname> argument indicates the package for the blessing.  Set
C<classname> to C<Nullch> to avoid the blessing.  The new SV will be
returned and will have a refcount of 1.
d2914 6
a2919 5
Copies a pointer into an SV, optionally blessing the SV.  The SV must be an
RV.  If the C<pv> argument is NULL then C<sv_undef> will be placed into the
SV.  The C<classname> argument indicates the package for the blessing.  Set
C<classname> to C<Nullch> to avoid the blessing.  The new SV will be
returned and will have a refcount of 1.
d2930 3
a2932 2
Copies a string into an SV, optionally blessing the SV.  The lenth of the
string must be specified with C<n>.  The SV must be an RV.  The C<classname>
d2935 1
a2935 1
a refcount of 1.
d2944 1
a2944 3
(B<NOTE:> If C<ssv> has the C<SVs_TEMP> bit set, C<sv_setsv> may simply steal
the string from C<ssv> and give it to C<dsv>, leaving C<ssv> empty.
Caveat caller.)
d3002 8
a3009 1
Used to upgrade an SV to a more complex form.  See C<svtype>.
d3015 8
d3026 2
a3027 1
stored inside the SV; this allows the SV to use an outside string.  The
d3042 1
a3042 1
L<perlxs>.
d3088 5
d3098 1
a3098 1
	XSRETURN(x);
d3102 1
a3102 1
Return from an XSUB immediately.
d3106 6
d3114 1
a3114 1
Return C<false> from an XSUB immediately.
d3118 12
d3132 1
a3132 1
Return C<undef> from an XSUB immediately.
d3138 1
a3138 1
Return C<true> from an XSUB immediately.
d3142 50
d3201 1
a3201 1
=head1 AUTHOR
d3203 1
a3203 1
Jeff Okamoto <okamoto@@corp.hp.com>
d3207 2
a3208 1
Bowers, Matthew Green, Tim Bunce, and Spider Boardman.
d3210 1
a3210 1
API Listing by Dean Roehrich <roehrich@@cray.com>.
d3214 1
a3214 2
Version 20: 1995/12/14

@


1.1.1.1
log
@Import of Perl 5.003 into the tree.  Makefile.bsd-wrapper and
config.sh.OpenBSD are the only local changes.
@
text
@@


1.1.1.2
log
@perl5.005_03
@
text
@d11 1
a11 3
=head1 Variables

=head2 Datatypes
d23 2
a24 2
Perl uses a special typedef IV which is a simple integer type that is
guaranteed to be large enough to hold a pointer (as well as an integer).
d29 1
a29 1
=head2 Working with SVs
d35 1
a35 1
The six routines are:
a39 2
    SV*  newSVpvn(char*, int);
    SV*  newSVpvf(const char*, ...);
d42 1
a42 1
To change the value of an *already-existing* SV, there are seven routines:
a44 1
    void  sv_setuv(SV*, UV);
d46 2
a47 4
    void  sv_setpv(SV*, const char*);
    void  sv_setpvn(SV*, const char*, int)
    void  sv_setpvf(SV*, const char*, ...);
    void  sv_setpvfn(SV*, const char*, STRLEN, va_list *, SV **, I32, bool);
d51 5
a55 28
assigned by using C<sv_setpvn>, C<newSVpvn>, or C<newSVpv>, or you may
allow Perl to calculate the length by using C<sv_setpv> or by specifying
0 as the second argument to C<newSVpv>.  Be warned, though, that Perl will
determine the string's length by using C<strlen>, which depends on the
string terminating with a NUL character.

The arguments of C<sv_setpvf> are processed like C<sprintf>, and the
formatted output becomes the value.

C<sv_setpvfn> is an analogue of C<vsprintf>, but it allows you to specify
either a pointer to a variable argument list or the address and length of
an array of SVs.  The last argument points to a boolean; on return, if that
boolean is true, then locale-specific information has been used to format
the string, and the string's contents are therefore untrustworthy (see
L<perlsec>).  This pointer may be NULL if that information is not
important.  Note that this function requires you to specify the length of
the format.

The C<sv_set*()> functions are not generic enough to operate on values
that have "magic".  See L<Magic Virtual Tables> later in this document.

All SVs that contain strings should be terminated with a NUL character.
If it is not NUL-terminated there is a risk of
core dumps and corruptions from code which passes the string to C
functions or system calls which expect a NUL-terminated string.
Perl's own functions typically add a trailing NUL for this reason.
Nevertheless, you should be very careful when you pass a string stored
in an SV to a C function or system call.
d68 3
a70 14
care what the length of the data is, use the global variable C<PL_na> or a
local variable of type C<STRLEN>. However using C<PL_na> can be quite
inefficient because C<PL_na> must be accessed in thread-local storage in
threaded Perl.  In any case, remember that Perl allows arbitrary strings of
data that may both contain NULs and might not be terminated by a NUL.

Also remember that C doesn't allow you to safely say C<foo(SvPV(s, len),
len);>. It might work with your compiler, but it won't work for everyone.
Break this sort of statement up into separate assignments:

	STRLEN len;
	char * ptr;
	ptr = SvPV(len);
	foo(ptr, len);
d72 1
a72 1
If you want to know if the scalar value is TRUE, you can use:
d83 1
a83 3
decrease, the allocated memory of an SV and that it does not automatically
add a byte for the a trailing NUL (perl's own string functions typically do
C<SvGROW(sv, len + 1)>).
d109 1
a109 3
    void  sv_catpvn(SV*, char*, STRLEN);
    void  sv_catpvf(SV*, const char*, ...);
    void  sv_catpvfn(SV*, const char*, STRLEN, va_list *, SV **, I32, bool);
d114 3
a116 9
yourself.  The third function processes its arguments like C<sprintf> and
appends the formatted output.  The fourth function works like C<vsprintf>.
You can specify the address and length of an array of SVs instead of the
va_list argument. The fifth function extends the string stored in the first
SV with the string stored in the second SV.  It also forces the second SV
to be interpreted as a string.

The C<sv_cat*()> functions are not generic enough to operate on values that
have "magic".  See L<Magic Virtual Tables> later in this document.
d121 1
a121 1
    SV*  perl_get_sv("package::varname", FALSE);
d130 1
a130 1
The scalar C<undef> value is stored in an SV instance called C<PL_sv_undef>.  Its
d133 2
a134 2
There are also the two values C<PL_sv_yes> and C<PL_sv_no>, which contain Boolean
TRUE and FALSE values, respectively.  Like C<PL_sv_undef>, their addresses can
d137 1
a137 1
Do not be fooled into thinking that C<(SV *) 0> is the same as C<&PL_sv_undef>.
d147 1
a147 1
return a real value, or undef otherwise.  Instead it has returned a NULL
d149 2
a150 2
bus error, or just weird results.  Change the zero to C<&PL_sv_undef> in the first
line and all will be well.
d153 1
a153 1
call is not necessary (see L<Reference Counts and Mortality>).
d158 1
a158 1
to use C<Sv*OK> macros.  Because a scalar can be both a number and a string,
d173 1
a173 1
In general, though, it's best to use the C<Sv*V> macros.
d175 1
a175 1
=head2 Working with AVs
d177 2
a178 2
There are two ways to create and load an AV.  The first method creates an
empty AV:
d182 1
a182 1
The second method both creates the AV and initially populates it with SVs:
d187 1
a187 1
AV has been created, the SVs can be destroyed, if so desired.
d189 1
a189 1
Once the AV has been created, the following operations are possible on AVs:
d203 2
a204 1
    I32   av_len(AV*);
d206 2
d209 1
d211 1
a211 10
The C<av_len> function returns the highest index value in array (just
like $#array in Perl).  If the array is empty, -1 is returned.  The
C<av_fetch> function returns the value at index C<key>, but if C<lval>
is non-zero, then C<av_fetch> will store an undef value at that index.
The C<av_store> function stores the value C<val> at index C<key>, and does
not increment the reference count of C<val>.  Thus the caller is responsible
for taking care of that, and if C<av_store> returns NULL, the caller will
have to decrement the reference count to avoid a memory leak.  Note that
C<av_fetch> and C<av_store> both return C<SV**>'s, not C<SV*>'s as their
return value.
d214 1
d216 1
d218 1
a218 7

The C<av_clear> function deletes all the elements in the AV* array, but
does not actually delete the array itself.  The C<av_undef> function will
delete all the elements in the array plus the array itself.  The
C<av_extend> function extends the array so that it contains at least C<key+1>
elements.  If C<key+1> is less than the currently allocated length of the array,
then nothing is done.
d223 1
a223 1
    AV*  perl_get_av("package::varname", FALSE);
d227 1
a227 4
See L<Understanding the Magic of Tied Hashes and Arrays> for more
information on how to use the array access functions on tied arrays.

=head2 Working with HVs
d233 1
a233 1
Once the HV has been created, the following operations are possible on HVs:
d238 5
a242 8
The C<klen> parameter is the length of the key being passed in (Note that
you cannot pass 0 in as a value of C<klen> to tell Perl to measure the
length of the key).  The C<val> argument contains the SV pointer to the
scalar being stored, and C<hash> is the precomputed hash value (zero if
you want C<hv_store> to calculate it for you).  The C<lval> parameter
indicates whether this fetch is actually a part of a store operation, in
which case a new undefined value will be added to the HV with the supplied
key and C<hv_fetch> will return as if the value had already existed.
d245 3
a247 3
C<SV*>.  To access the scalar value, you must first dereference the return
value.  However, you should check to make sure that the return value is
not NULL before dereferencing it.
a253 3
If C<flags> does not include the C<G_DISCARD> flag then C<hv_delete> will
create and return a mortal copy of the deleted value.

d257 1
d259 1
a259 4

Like their AV counterparts, C<hv_clear> deletes all the entries in the hash
table but does not actually delete the hash table.  The C<hv_undef> deletes
both the entries and the hash table itself.
d287 1
a287 1
    HV*  perl_get_hv("package::varname", FALSE);
d291 1
a291 1
The hash algorithm is defined in the C<PERL_HASH(hash, key, klen)> macro:
d293 1
d295 3
a297 51
    while (klen--)
	hash = (hash * 33) + *key++;

See L<Understanding the Magic of Tied Hashes and Arrays> for more
information on how to use the hash access functions on tied hashes.

=head2 Hash API Extensions

Beginning with version 5.004, the following functions are also supported:

    HE*     hv_fetch_ent  (HV* tb, SV* key, I32 lval, U32 hash);
    HE*     hv_store_ent  (HV* tb, SV* key, SV* val, U32 hash);
    
    bool    hv_exists_ent (HV* tb, SV* key, U32 hash);
    SV*     hv_delete_ent (HV* tb, SV* key, I32 flags, U32 hash);
    
    SV*     hv_iterkeysv  (HE* entry);

Note that these functions take C<SV*> keys, which simplifies writing
of extension code that deals with hash structures.  These functions
also allow passing of C<SV*> keys to C<tie> functions without forcing
you to stringify the keys (unlike the previous set of functions).

They also return and accept whole hash entries (C<HE*>), making their
use more efficient (since the hash number for a particular string
doesn't have to be recomputed every time).  See L<API LISTING> later in
this document for detailed descriptions.

The following macros must always be used to access the contents of hash
entries.  Note that the arguments to these macros must be simple
variables, since they may get evaluated more than once.  See
L<API LISTING> later in this document for detailed descriptions of these
macros.

    HePV(HE* he, STRLEN len)
    HeVAL(HE* he)
    HeHASH(HE* he)
    HeSVKEY(HE* he)
    HeSVKEY_force(HE* he)
    HeSVKEY_set(HE* he, SV* sv)

These two lower level macros are defined, but must only be used when
dealing with keys that are not C<SV*>s:

    HeKEY(HE* he)
    HeKLEN(HE* he)

Note that both C<hv_store> and C<hv_store_ent> do not increment the
reference count of the stored C<val>, which is the caller's responsibility.
If these functions return a NULL value, the caller will usually have to
decrement the reference count of C<val> to avoid a memory leak.
d304 1
a304 1
To create a reference, use either of the following functions:
d306 1
a306 2
    SV* newRV_inc((SV*) thing);
    SV* newRV_noinc((SV*) thing);
d308 3
a310 7
The C<thing> argument can be any of an C<SV*>, C<AV*>, or C<HV*>.  The
functions are identical except that C<newRV_inc> increments the reference
count of the C<thing>, while C<newRV_noinc> does not.  For historical
reasons, C<newRV> is a synonym for C<newRV_inc>.

Once you have a reference, you can use the following macro to dereference
the reference:
d321 2
a322 2
To discover what type of value the reference refers to, use the following
macro and then check the return value.
a330 1
    SVt_RV    Scalar
d334 1
a334 4
    SVt_PVGV  Glob (possible a file handle)
    SVt_PVMG  Blessed or Magical Scalar

    See the sv.h header file for more details.
d348 2
a349 2
which class the reference will belong to.  See
L<Stashes and Globs> for information on converting class names into stashes.
d354 3
a356 2
point to.  If C<classname> is non-null, the SV is blessed into the specified
class.  SV is returned.
d360 2
a361 2
Copies integer or double into an SV whose reference is C<rv>.  SV is blessed
if C<classname> is non-null.
d366 2
a367 2
Copies the pointer value (I<the address, not the string!>) into an SV whose
reference is rv.  SV is blessed if C<classname> is non-null.
d371 13
a383 2
Copies string into an SV whose reference is C<rv>.  Set length to 0 to let
Perl calculate the string length.  SV is blessed if C<classname> is non-null.
d385 30
a414 1
	SV* sv_setref_pvn(SV* rv, char* classname, PV iv, STRLEN length);
d416 5
a420 2
Tests whether the SV is blessed into the specified class.  It does not
check inheritance relationships.
d422 2
a423 1
	int  sv_isa(SV* sv, char* name);
d425 1
a425 1
Tests whether the SV is a reference to a blessed object.
d427 2
a428 1
	int  sv_isobject(SV* sv);
d430 2
a431 3
Tests whether the SV is derived from the specified class. SV can be either
a reference to a blessed object or a string containing a class name. This
is the function implementing the C<UNIVERSAL::isa> functionality.
d433 4
a436 1
	bool sv_derived_from(SV* sv, char* name);
d438 2
a439 2
To check if you've got an object derived from a specific class you have 
to write:
d441 1
a441 1
	if (sv_isobject(sv) && sv_derived_from(sv, class)) { ... }
d443 2
a444 1
=head2 Creating New Variables
d446 4
a449 2
To create a new Perl variable with an undef value which can be accessed from
your Perl script, use the following routines, depending on the variable type.
d451 1
a451 3
    SV*  perl_get_sv("package::varname", TRUE);
    AV*  perl_get_av("package::varname", TRUE);
    HV*  perl_get_hv("package::varname", TRUE);
d453 1
a453 2
Notice the use of TRUE as the second parameter.  The new variable can now
be set, using the routines appropriate to the data type.
d455 1
a455 2
There are additional macros whose values may be bitwise OR'ed with the
C<TRUE> argument to enable certain extra features.  Those bits are:
d457 19
a475 62
    GV_ADDMULTI	Marks the variable as multiply defined, thus preventing the
		"Name <varname> used only once: possible typo" warning.
    GV_ADDWARN	Issues the warning "Had to create <varname> unexpectedly" if
		the variable did not exist before the function was called.

If you do not specify a package name, the variable is created in the current
package.

=head2 Reference Counts and Mortality

Perl uses an reference count-driven garbage collection mechanism. SVs,
AVs, or HVs (xV for short in the following) start their life with a
reference count of 1.  If the reference count of an xV ever drops to 0,
then it will be destroyed and its memory made available for reuse.

This normally doesn't happen at the Perl level unless a variable is
undef'ed or the last variable holding a reference to it is changed or
overwritten.  At the internal level, however, reference counts can be
manipulated with the following macros:

    int SvREFCNT(SV* sv);
    SV* SvREFCNT_inc(SV* sv);
    void SvREFCNT_dec(SV* sv);

However, there is one other function which manipulates the reference
count of its argument.  The C<newRV_inc> function, you will recall,
creates a reference to the specified argument.  As a side effect,
it increments the argument's reference count.  If this is not what
you want, use C<newRV_noinc> instead.

For example, imagine you want to return a reference from an XSUB function.
Inside the XSUB routine, you create an SV which initially has a reference
count of one.  Then you call C<newRV_inc>, passing it the just-created SV.
This returns the reference as a new SV, but the reference count of the
SV you passed to C<newRV_inc> has been incremented to two.  Now you
return the reference from the XSUB routine and forget about the SV.
But Perl hasn't!  Whenever the returned reference is destroyed, the
reference count of the original SV is decreased to one and nothing happens.
The SV will hang around without any way to access it until Perl itself
terminates.  This is a memory leak.

The correct procedure, then, is to use C<newRV_noinc> instead of
C<newRV_inc>.  Then, if and when the last reference is destroyed,
the reference count of the SV will go to zero and it will be destroyed,
stopping any memory leak.

There are some convenience functions available that can help with the
destruction of xVs.  These functions introduce the concept of "mortality".
An xV that is mortal has had its reference count marked to be decremented,
but not actually decremented, until "a short time later".  Generally the
term "short time later" means a single Perl statement, such as a call to
an XSUB function.  The actual determinant for when mortal xVs have their
reference count decremented depends on two macros, SAVETMPS and FREETMPS.
See L<perlcall> and L<perlxs> for more details on these macros.

"Mortalization" then is at its simplest a deferred C<SvREFCNT_dec>.
However, if you mortalize a variable twice, the reference count will
later be decremented twice.

You should be careful about creating mortal variables.  Strange things
can happen if you make the same value mortal within multiple contexts,
or if you make a variable mortal multiple times.
d483 28
a510 16
The first call creates a mortal SV, the second converts an existing
SV to a mortal SV (and thus defers a call to C<SvREFCNT_dec>), and the
third creates a mortal copy of an existing SV.

The mortal routines are not just for SVs -- AVs and HVs can be
made mortal by passing their address (type-casted to C<SV*>) to the
C<sv_2mortal> or C<sv_mortalcopy> routines.

=head2 Stashes and Globs

A "stash" is a hash that contains all of the different objects that
are contained within a package.  Each key of the stash is a symbol
name (shared by all the different types of objects that have the same
name), and each value in the hash table is a GV (Glob Value).  This GV
in turn contains references to the various objects of that name,
including (but not limited to) the following:
d515 2
a516 1
    I/O Handle
d520 5
a524 5
There is a single stash called "PL_defstash" that holds the items that exist
in the "main" package.  To get at the items in other packages, append the
string "::" to the package name.  The items in the "Foo" package are in
the stash "Foo::" in PL_defstash.  The items in the "Bar::Baz" package are
in the stash "Baz::" in "Bar::"'s stash.
d549 2
a550 2
If you need to bless or re-bless an object you can use the following
function:
d560 1
a560 41
=head2 Double-Typed SVs

Scalar variables normally contain only one type of value, an integer,
double, pointer, or reference.  Perl will automatically convert the
actual scalar data from the stored type into the requested type.

Some scalar variables contain more than one type of scalar data.  For
example, the variable C<$!> contains either the numeric value of C<errno>
or its string equivalent from either C<strerror> or C<sys_errlist[]>.

To force multiple data values into an SV, you must do two things: use the
C<sv_set*v> routines to add the additional scalar type, then set a flag
so that Perl will believe it contains more than one type of data.  The
four macros to set the flags are:

	SvIOK_on
	SvNOK_on
	SvPOK_on
	SvROK_on

The particular macro you must use depends on which C<sv_set*v> routine
you called first.  This is because every C<sv_set*v> routine turns on
only the bit for the particular type of data being set, and turns off
all the rest.

For example, to create a new Perl variable called "dberror" that contains
both the numeric and descriptive string error values, you could use the
following code:

    extern int  dberror;
    extern char *dberror_list;

    SV* sv = perl_get_sv("dberror", TRUE);
    sv_setiv(sv, (IV) dberror);
    sv_setpv(sv, dberror_list[dberror]);
    SvIOK_on(sv);

If the order of C<sv_setiv> and C<sv_setpv> had been reversed, then the
macro C<SvPOK_on> would need to be called instead of C<SvIOK_on>.

=head2 Magic Variables
d565 2
d597 1
a597 1
overridden, and multiple instances of the same type of magic can be
d600 3
a602 3
The C<name> and C<namlen> arguments are used to associate a string with
the magic, typically the name of a variable. C<namlen> is stored in the
C<mg_len> field and if C<name> is non-null and C<namlen> >= 0 a malloc'd
d613 1
a613 1
the C<how> argument is "#", or if it is a NULL pointer, then C<obj> is
d668 7
a674 7
    mg_type  MGVTBL              Type of magic
    -------  ------              ----------------------------
    \0       vtbl_sv             Special scalar variable
    A        vtbl_amagic         %OVERLOAD hash
    a        vtbl_amagicelem     %OVERLOAD hash element
    c        (none)              Holds overload table (AMT) on stash
    B        vtbl_bm             Boyer-Moore (fast string search)
d677 1
a677 2
    f        vtbl_fm             Formline ('compiled' format)
    g        vtbl_mglob          m//g target / study()ed string
d680 7
a686 9
    k        vtbl_nkeys          scalar(keys()) lvalue
    L        (none)              Debugger %_<filename 
    l        vtbl_dbline         Debugger %_<filename element
    o        vtbl_collxfrm       Locale transformation
    P        vtbl_pack           Tied array or hash
    p        vtbl_packelem       Tied array or hash element
    q        vtbl_packelem       Tied scalar or handle
    S        vtbl_sig            %SIG hash
    s        vtbl_sigelem        %SIG hash element
d688 11
a698 13
    U        vtbl_uvar           Available for use by extensions
    v        vtbl_vec            vec() lvalue
    x        vtbl_substr         substr() lvalue
    y        vtbl_defelem        Shadow "foreach" iterator variable /
                                  smart parameter vivification
    *        vtbl_glob           GV (typeglob)
    #        vtbl_arylen         Array length ($#ary)
    .        vtbl_pos            pos() lvalue
    ~        (none)              Available for use by extensions

When an uppercase and lowercase letter both exist in the table, then the
uppercase letter is used to represent some kind of composite type (a list
or a hash), and the lowercase letter is used to represent an element of
a700 53
The '~' and 'U' magic types are defined specifically for use by
extensions and will not be used by perl itself.  Extensions can use
'~' magic to 'attach' private information to variables (typically
objects).  This is especially useful because there is no way for
normal perl code to corrupt this private information (unlike using
extra elements of a hash object).

Similarly, 'U' magic can be used much like tie() to call a C function
any time a scalar's value is used or changed.  The C<MAGIC>'s
C<mg_ptr> field points to a C<ufuncs> structure:

    struct ufuncs {
        I32 (*uf_val)(IV, SV*);
        I32 (*uf_set)(IV, SV*);
        IV uf_index;
    };

When the SV is read from or written to, the C<uf_val> or C<uf_set>
function will be called with C<uf_index> as the first arg and a
pointer to the SV as the second.  A simple example of how to add 'U'
magic is shown below.  Note that the ufuncs structure is copied by
sv_magic, so you can safely allocate it on the stack.

    void
    Umagic(sv)
        SV *sv;
    PREINIT:
        struct ufuncs uf;
    CODE:
        uf.uf_val   = &my_get_fn;
        uf.uf_set   = &my_set_fn;
        uf.uf_index = 0;
        sv_magic(sv, 0, 'U', (char*)&uf, sizeof(uf));

Note that because multiple extensions may be using '~' or 'U' magic,
it is important for extensions to take extra care to avoid conflict.
Typically only using the magic on objects blessed into the same class
as the extension is sufficient.  For '~' magic, it may also be
appropriate to add an I32 'signature' at the top of the private data
area and check that.

Also note that the C<sv_set*()> and C<sv_cat*()> functions described
earlier do B<not> invoke 'set' magic on their targets.  This must
be done by the user either by calling the C<SvSETMAGIC()> macro after
calling these functions, or by using one of the C<sv_set*_mg()> or
C<sv_cat*_mg()> functions.  Similarly, generic C code must call the
C<SvGETMAGIC()> macro to invoke any 'get' magic if they use an SV
obtained from external sources in functions that don't handle magic.
L<API LISTING> later in this document identifies such functions.
For example, calls to the C<sv_cat*()> functions typically need to be
followed by C<SvSETMAGIC()>, but they don't need a prior C<SvGETMAGIC()>
since their implementation handles 'get' magic.

d707 1
a707 1
if the SV is not of type SVt_PVMG, Perl may core dump.
d712 2
a713 2
field is an uppercase letter, then the mg_obj is copied to C<nsv>, but
the mg_type field is changed to be the lowercase letter.
d715 1
a715 1
=head2 Understanding the Magic of Tied Hashes and Arrays
d717 3
a719 1
Tied hashes and arrays are magical beasts of the 'P' magic type.
d721 3
a723 171
WARNING: As of the 5.004 release, proper usage of the array and hash
access functions requires understanding a few caveats.  Some
of these caveats are actually considered bugs in the API, to be fixed
in later releases, and are bracketed with [MAYCHANGE] below. If
you find yourself actually applying such information in this section, be
aware that the behavior may change in the future, umm, without warning.

The perl tie function associates a variable with an object that implements
the various GET, SET etc methods.  To perform the equivalent of the perl
tie function from an XSUB, you must mimic this behaviour.  The code below
carries out the necessary steps - firstly it creates a new hash, and then
creates a second hash which it blesses into the class which will implement
the tie methods. Lastly it ties the two hashes together, and returns a
reference to the new tied hash.  Note that the code below does NOT call the
TIEHASH method in the MyTie class -
see L<Calling Perl Routines from within C Programs> for details on how
to do this.

    SV*
    mytie()
    PREINIT:
        HV *hash;
        HV *stash;
        SV *tie;
    CODE:
        hash = newHV();
        tie = newRV_noinc((SV*)newHV());
        stash = gv_stashpv("MyTie", TRUE);
        sv_bless(tie, stash);
        hv_magic(hash, tie, 'P');
        RETVAL = newRV_noinc(hash);
    OUTPUT:
        RETVAL

The C<av_store> function, when given a tied array argument, merely
copies the magic of the array onto the value to be "stored", using
C<mg_copy>.  It may also return NULL, indicating that the value did not
actually need to be stored in the array.  [MAYCHANGE] After a call to
C<av_store> on a tied array, the caller will usually need to call
C<mg_set(val)> to actually invoke the perl level "STORE" method on the
TIEARRAY object.  If C<av_store> did return NULL, a call to
C<SvREFCNT_dec(val)> will also be usually necessary to avoid a memory
leak. [/MAYCHANGE]

The previous paragraph is applicable verbatim to tied hash access using the
C<hv_store> and C<hv_store_ent> functions as well.

C<av_fetch> and the corresponding hash functions C<hv_fetch> and
C<hv_fetch_ent> actually return an undefined mortal value whose magic
has been initialized using C<mg_copy>.  Note the value so returned does not
need to be deallocated, as it is already mortal.  [MAYCHANGE] But you will
need to call C<mg_get()> on the returned value in order to actually invoke
the perl level "FETCH" method on the underlying TIE object.  Similarly,
you may also call C<mg_set()> on the return value after possibly assigning
a suitable value to it using C<sv_setsv>,  which will invoke the "STORE"
method on the TIE object. [/MAYCHANGE]

[MAYCHANGE]
In other words, the array or hash fetch/store functions don't really
fetch and store actual values in the case of tied arrays and hashes.  They
merely call C<mg_copy> to attach magic to the values that were meant to be
"stored" or "fetched".  Later calls to C<mg_get> and C<mg_set> actually
do the job of invoking the TIE methods on the underlying objects.  Thus
the magic mechanism currently implements a kind of lazy access to arrays
and hashes.

Currently (as of perl version 5.004), use of the hash and array access
functions requires the user to be aware of whether they are operating on
"normal" hashes and arrays, or on their tied variants.  The API may be
changed to provide more transparent access to both tied and normal data
types in future versions.
[/MAYCHANGE]

You would do well to understand that the TIEARRAY and TIEHASH interfaces
are mere sugar to invoke some perl method calls while using the uniform hash
and array syntax.  The use of this sugar imposes some overhead (typically
about two to four extra opcodes per FETCH/STORE operation, in addition to
the creation of all the mortal variables required to invoke the methods).
This overhead will be comparatively small if the TIE methods are themselves
substantial, but if they are only a few statements long, the overhead
will not be insignificant.

=head2 Localizing changes

Perl has a very handy construction

  {
    local $var = 2;
    ...
  }

This construction is I<approximately> equivalent to

  {
    my $oldvar = $var;
    $var = 2;
    ...
    $var = $oldvar;
  }

The biggest difference is that the first construction would
reinstate the initial value of $var, irrespective of how control exits
the block: C<goto>, C<return>, C<die>/C<eval> etc. It is a little bit
more efficient as well.

There is a way to achieve a similar task from C via Perl API: create a
I<pseudo-block>, and arrange for some changes to be automatically
undone at the end of it, either explicit, or via a non-local exit (via
die()). A I<block>-like construct is created by a pair of
C<ENTER>/C<LEAVE> macros (see L<perlcall/"Returning a Scalar">).
Such a construct may be created specially for some important localized
task, or an existing one (like boundaries of enclosing Perl
subroutine/block, or an existing pair for freeing TMPs) may be
used. (In the second case the overhead of additional localization must
be almost negligible.) Note that any XSUB is automatically enclosed in
an C<ENTER>/C<LEAVE> pair.

Inside such a I<pseudo-block> the following service is available:

=over

=item C<SAVEINT(int i)>

=item C<SAVEIV(IV i)>

=item C<SAVEI32(I32 i)>

=item C<SAVELONG(long i)>

These macros arrange things to restore the value of integer variable
C<i> at the end of enclosing I<pseudo-block>.

=item C<SAVESPTR(s)>

=item C<SAVEPPTR(p)>

These macros arrange things to restore the value of pointers C<s> and
C<p>. C<s> must be a pointer of a type which survives conversion to
C<SV*> and back, C<p> should be able to survive conversion to C<char*>
and back.

=item C<SAVEFREESV(SV *sv)>

The refcount of C<sv> would be decremented at the end of
I<pseudo-block>. This is similar to C<sv_2mortal>, which should (?) be
used instead.

=item C<SAVEFREEOP(OP *op)>

The C<OP *> is op_free()ed at the end of I<pseudo-block>.

=item C<SAVEFREEPV(p)>

The chunk of memory which is pointed to by C<p> is Safefree()ed at the
end of I<pseudo-block>.

=item C<SAVECLEARSV(SV *sv)>

Clears a slot in the current scratchpad which corresponds to C<sv> at
the end of I<pseudo-block>.

=item C<SAVEDELETE(HV *hv, char *key, I32 length)>

The key C<key> of C<hv> is deleted at the end of I<pseudo-block>. The
string pointed to by C<key> is Safefree()ed.  If one has a I<key> in
short-lived storage, the corresponding string may be reallocated like
this:

  SAVEDELETE(PL_defstash, savepv(tmpbuf), strlen(tmpbuf));

=item C<SAVEDESTRUCTOR(f,p)>
d725 4
a728 2
At the end of I<pseudo-block> the function C<f> is called with the
only argument (of type C<void*>) C<p>.
d730 4
a733 1
=item C<SAVESTACK_POS()>
d735 4
a738 2
The current offset on the Perl internal stack (cf. C<SP>) is restored
at the end of I<pseudo-block>.
d740 3
a742 1
=back
d744 2
a745 4
The following API list contains functions, thus one needs to
provide pointers to the modifiable data explicitly (either C pointers,
or Perlish C<GV *>s).  Where the above macros take C<int>, a similar 
function takes C<int *>.
d747 4
a750 1
=over
d752 2
a753 1
=item C<SV* save_scalar(GV *gv)>
d755 1
a755 89
Equivalent to Perl code C<local $gv>.

=item C<AV* save_ary(GV *gv)>

=item C<HV* save_hash(GV *gv)>

Similar to C<save_scalar>, but localize C<@@gv> and C<%gv>.

=item C<void save_item(SV *item)>

Duplicates the current value of C<SV>, on the exit from the current
C<ENTER>/C<LEAVE> I<pseudo-block> will restore the value of C<SV>
using the stored value.

=item C<void save_list(SV **sarg, I32 maxsarg)>

A variant of C<save_item> which takes multiple arguments via an array
C<sarg> of C<SV*> of length C<maxsarg>.

=item C<SV* save_svref(SV **sptr)>

Similar to C<save_scalar>, but will reinstate a C<SV *>.

=item C<void save_aptr(AV **aptr)>

=item C<void save_hptr(HV **hptr)>

Similar to C<save_svref>, but localize C<AV *> and C<HV *>.

=back

The C<Alias> module implements localization of the basic types within the
I<caller's scope>.  People who are interested in how to localize things in
the containing scope should take a look there too.

=head1 Subroutines

=head2 XSUBs and the Argument Stack

The XSUB mechanism is a simple way for Perl programs to access C subroutines.
An XSUB routine will have a stack that contains the arguments from the Perl
program, and a way to map from the Perl data structures to a C equivalent.

The stack arguments are accessible through the C<ST(n)> macro, which returns
the C<n>'th stack argument.  Argument 0 is the first argument passed in the
Perl subroutine call.  These arguments are C<SV*>, and can be used anywhere
an C<SV*> is used.

Most of the time, output from the C routine can be handled through use of
the RETVAL and OUTPUT directives.  However, there are some cases where the
argument stack is not already long enough to handle all the return values.
An example is the POSIX tzname() call, which takes no arguments, but returns
two, the local time zone's standard and summer time abbreviations.

To handle this situation, the PPCODE directive is used and the stack is
extended using the macro:

    EXTEND(SP, num);

where C<SP> is the macro that represents the local copy of the stack pointer,
and C<num> is the number of elements the stack should be extended by.

Now that there is room on the stack, values can be pushed on it using the
macros to push IVs, doubles, strings, and SV pointers respectively:

    PUSHi(IV)
    PUSHn(double)
    PUSHp(char*, I32)
    PUSHs(SV*)

And now the Perl program calling C<tzname>, the two values will be assigned
as in:

    ($standard_abbrev, $summer_abbrev) = POSIX::tzname;

An alternate (and possibly simpler) method to pushing values on the stack is
to use the macros:

    XPUSHi(IV)
    XPUSHn(double)
    XPUSHp(char*, I32)
    XPUSHs(SV*)

These macros automatically adjust the stack for you, if needed.  Thus, you
do not need to call C<EXTEND> to extend the stack.

For more information, consult L<perlxs> and L<perlxstut>.

=head2 Calling Perl Routines from within C Programs
a779 1
    SP
d790 1
a790 2
For a detailed description of calling conventions from C to Perl,
consult L<perlcall>.
d792 1
a792 1
=head2 Memory Allocation
d794 4
a797 9
All memory meant to be used with the Perl API functions should be manipulated
using the macros described in this section.  The macros provide the necessary
transparency between differences in the actual malloc implementation that is
used within perl.

It is suggested that you enable the version of malloc that is distributed
with Perl.  It keeps pools of various sizes of unallocated memory in
order to satisfy allocation requests more quickly.  However, on some
platforms, it may cause spurious malloc or free errors.
d803 5
a807 9
These three macros are used to initially allocate memory.

The first argument C<x> was a "magic cookie" that was used to keep track
of who called the macro, to help when debugging memory problems.  However,
the current code makes no use of this feature (most Perl developers now
use run-time memory checkers), so this argument can be any number.

The second argument C<pointer> should be the name of a variable that will
point to the newly allocated memory.
d809 1
a837 206
=head2 PerlIO

The most recent development releases of Perl has been experimenting with
removing Perl's dependency on the "normal" standard I/O suite and allowing
other stdio implementations to be used.  This involves creating a new
abstraction layer that then calls whichever implementation of stdio Perl
was compiled with.  All XSUBs should now use the functions in the PerlIO
abstraction layer and not make any assumptions about what kind of stdio
is being used.

For a complete description of the PerlIO abstraction, consult L<perlapio>.

=head2 Putting a C value on Perl stack

A lot of opcodes (this is an elementary operation in the internal perl
stack machine) put an SV* on the stack. However, as an optimization
the corresponding SV is (usually) not recreated each time. The opcodes
reuse specially assigned SVs (I<target>s) which are (as a corollary)
not constantly freed/created.

Each of the targets is created only once (but see
L<Scratchpads and recursion> below), and when an opcode needs to put
an integer, a double, or a string on stack, it just sets the
corresponding parts of its I<target> and puts the I<target> on stack.

The macro to put this target on stack is C<PUSHTARG>, and it is
directly used in some opcodes, as well as indirectly in zillions of
others, which use it via C<(X)PUSH[pni]>.

=head2 Scratchpads

The question remains on when the SVs which are I<target>s for opcodes
are created. The answer is that they are created when the current unit --
a subroutine or a file (for opcodes for statements outside of
subroutines) -- is compiled. During this time a special anonymous Perl
array is created, which is called a scratchpad for the current
unit.

A scratchpad keeps SVs which are lexicals for the current unit and are
targets for opcodes. One can deduce that an SV lives on a scratchpad
by looking on its flags: lexicals have C<SVs_PADMY> set, and
I<target>s have C<SVs_PADTMP> set.

The correspondence between OPs and I<target>s is not 1-to-1. Different
OPs in the compile tree of the unit can use the same target, if this
would not conflict with the expected life of the temporary.

=head2 Scratchpads and recursion

In fact it is not 100% true that a compiled unit contains a pointer to
the scratchpad AV. In fact it contains a pointer to an AV of
(initially) one element, and this element is the scratchpad AV. Why do
we need an extra level of indirection?

The answer is B<recursion>, and maybe (sometime soon) B<threads>. Both
these can create several execution pointers going into the same
subroutine. For the subroutine-child not write over the temporaries
for the subroutine-parent (lifespan of which covers the call to the
child), the parent and the child should have different
scratchpads. (I<And> the lexicals should be separate anyway!)

So each subroutine is born with an array of scratchpads (of length 1).
On each entry to the subroutine it is checked that the current
depth of the recursion is not more than the length of this array, and
if it is, new scratchpad is created and pushed into the array.

The I<target>s on this scratchpad are C<undef>s, but they are already
marked with correct flags.

=head1 Compiled code

=head2 Code tree

Here we describe the internal form your code is converted to by
Perl. Start with a simple example:

  $a = $b + $c;

This is converted to a tree similar to this one:

             assign-to
           /           \
          +             $a
        /   \
      $b     $c

(but slightly more complicated).  This tree reflects the way Perl
parsed your code, but has nothing to do with the execution order.
There is an additional "thread" going through the nodes of the tree
which shows the order of execution of the nodes.  In our simplified
example above it looks like:

     $b ---> $c ---> + ---> $a ---> assign-to

But with the actual compile tree for C<$a = $b + $c> it is different:
some nodes I<optimized away>.  As a corollary, though the actual tree
contains more nodes than our simplified example, the execution order
is the same as in our example.

=head2 Examining the tree

If you have your perl compiled for debugging (usually done with C<-D
optimize=-g> on C<Configure> command line), you may examine the
compiled tree by specifying C<-Dx> on the Perl command line.  The
output takes several lines per node, and for C<$b+$c> it looks like
this:

    5           TYPE = add  ===> 6
                TARG = 1
                FLAGS = (SCALAR,KIDS)
                {
                    TYPE = null  ===> (4)
                      (was rv2sv)
                    FLAGS = (SCALAR,KIDS)
                    {
    3                   TYPE = gvsv  ===> 4
                        FLAGS = (SCALAR)
                        GV = main::b
                    }
                }
                {
                    TYPE = null  ===> (5)
                      (was rv2sv)
                    FLAGS = (SCALAR,KIDS)
                    {
    4                   TYPE = gvsv  ===> 5
                        FLAGS = (SCALAR)
                        GV = main::c
                    }
                }

This tree has 5 nodes (one per C<TYPE> specifier), only 3 of them are
not optimized away (one per number in the left column).  The immediate
children of the given node correspond to C<{}> pairs on the same level
of indentation, thus this listing corresponds to the tree:

                   add
                 /     \
               null    null
                |       |
               gvsv    gvsv

The execution order is indicated by C<===E<gt>> marks, thus it is C<3
4 5 6> (node C<6> is not included into above listing), i.e.,
C<gvsv gvsv add whatever>.

=head2 Compile pass 1: check routines

The tree is created by the I<pseudo-compiler> while yacc code feeds it
the constructions it recognizes. Since yacc works bottom-up, so does
the first pass of perl compilation.

What makes this pass interesting for perl developers is that some
optimization may be performed on this pass.  This is optimization by
so-called I<check routines>.  The correspondence between node names
and corresponding check routines is described in F<opcode.pl> (do not
forget to run C<make regen_headers> if you modify this file).

A check routine is called when the node is fully constructed except
for the execution-order thread.  Since at this time there are no
back-links to the currently constructed node, one can do most any
operation to the top-level node, including freeing it and/or creating
new nodes above/below it.

The check routine returns the node which should be inserted into the
tree (if the top-level node was not modified, check routine returns
its argument).

By convention, check routines have names C<ck_*>. They are usually
called from C<new*OP> subroutines (or C<convert>) (which in turn are
called from F<perly.y>).

=head2 Compile pass 1a: constant folding

Immediately after the check routine is called the returned node is
checked for being compile-time executable.  If it is (the value is
judged to be constant) it is immediately executed, and a I<constant>
node with the "return value" of the corresponding subtree is
substituted instead.  The subtree is deleted.

If constant folding was not performed, the execution-order thread is
created.

=head2 Compile pass 2: context propagation

When a context for a part of compile tree is known, it is propagated
down through the tree.  At this time the context can have 5 values
(instead of 2 for runtime context): void, boolean, scalar, list, and
lvalue.  In contrast with the pass 1 this pass is processed from top
to bottom: a node's context determines the context for its children.

Additional context-dependent optimizations are performed at this time.
Since at this moment the compile tree contains back-references (via
"thread" pointers), nodes cannot be free()d now.  To allow
optimized-away nodes at this stage, such nodes are null()ified instead
of free()ing (i.e. their type is changed to OP_NULL).

=head2 Compile pass 3: peephole optimization

After the compile tree for a subroutine (or for an C<eval> or a file)
is created, an additional pass over the code is performed. This pass
is neither top-down or bottom-up, but in the execution order (with
additional complications for conditionals).  These optimizations are
done in the subroutine peep().  Optimizations performed at this stage
are subject to the same restrictions as in the pass 2.

d844 1
a844 3
Note that all Perl API global variables must be referenced with the C<PL_>
prefix.  Some macros are provided for compatibility with the older,
unadorned names, but this support will be removed in a future release.
d846 1
a846 5
It is strongly recommended that all Perl API functions that don't begin
with C<perl> be referenced with an explicit C<Perl_> prefix.

The sort order of the listing is case insensitive, with any
occurrences of '_' ignored for the purpose of sorting.
d848 1
a848 1
=over 8
d852 1
a852 2
Clears an array, making it empty.  Does not free the memory used by the
array itself.
d854 1
a854 1
	void	av_clear (AV* ar)
d861 1
a861 1
	void	av_extend (AV* ar, I32 key)
d869 1
a869 8
See L<Understanding the Magic of Tied Hashes and Arrays> for more
information on how to use this function on tied arrays.

	SV**	av_fetch (AV* ar, I32 key, I32 lval)

=item AvFILL

Same as C<av_len()>.  Deprecated, use C<av_len()> instead.
d875 1
a875 1
	I32	av_len (AV* ar)
d879 2
a880 3
Creates a new AV and populates it with a list of SVs.  The SVs are copied
into the array, so they may be freed after the call to av_make.  The new AV
will have a reference count of 1.
d882 1
a882 1
	AV*	av_make (I32 size, SV** svp)
d886 1
a886 1
Pops an SV off the end of the array.  Returns C<&PL_sv_undef> if the array is
d889 1
a889 1
	SV*	av_pop (AV* ar)
d893 1
a893 2
Pushes an SV onto the end of the array.  The array will grow automatically
to accommodate the addition.
d895 1
a895 1
	void	av_push (AV* ar, SV* val)
d901 1
a901 1
	SV*	av_shift (AV* ar)
d906 2
a907 8
return value will be NULL if the operation failed or if the value did not
need to be actually stored within the array (as in the case of tied arrays).
Otherwise it can be dereferenced to get the original C<SV*>.  Note that the
caller is responsible for suitably incrementing the reference count of C<val>
before the call, and decrementing it if the function returned NULL.

See L<Understanding the Magic of Tied Hashes and Arrays> for more
information on how to use this function on tied arrays.
d909 1
a909 1
	SV**	av_store (AV* ar, I32 key, SV* val)
d913 1
a913 1
Undefines the array.  Frees the memory used by the array itself.
d915 1
a915 1
	void	av_undef (AV* ar)
d919 1
a919 3
Unshift the given number of C<undef> values onto the beginning of the
array.  The array will grow automatically to accommodate the addition.
You must then use C<av_store> to assign values to these new elements.
d921 1
a921 1
	void	av_unshift (AV* ar, I32 num)
d926 1
a926 2
constructor.  This is always a C<char*>.  See C<THIS> and
L<perlxs/"Using XS With C++">.
d932 1
a932 1
the type.  May fail on overlapping copies.  See also C<Move>.
d934 1
a934 1
	void	Copy( s, d, n, t )
d945 1
a945 1
	HV*	CvSTASH( SV* sv )
d947 1
a947 1
=item PL_DBsingle
d951 1
a951 2
Single-stepping is automatically turned on after every step.  This is the C
variable which corresponds to Perl's $DB::single variable.  See C<PL_DBsub>.
d953 1
a953 1
=item PL_DBsub
d956 1
a956 2
the SV which holds the name of the sub being debugged.  This is the C
variable which corresponds to Perl's $DB::sub variable.  See C<PL_DBsingle>.
d959 1
a959 7
	SvPV( GvSV( PL_DBsub ), len )

=item PL_DBtrace

Trace variable used when Perl is run in debugging mode, with the B<-d>
switch.  This is the C variable which corresponds to Perl's $DB::trace
variable.  See C<PL_DBsingle>.
d963 1
a963 2
Declare a stack marker variable, C<mark>, for the XSUB.  See C<MARK> and
C<dORIGMARK>.
a968 4
=item PL_dowarn

The C variable which corresponds to Perl's $^W warning variable.

d971 1
a971 2
Declares a local copy of perl's stack pointer for the XSUB, available via
the C<SP> macro.  See C<SP>.
a978 12
=item dXSI32

Sets up the C<ix> variable for an XSUB which has aliases.  This is usually
handled automatically by C<xsubpp>.

=item do_binmode

Switches filehandle to binmode.  C<iotype> is what C<IoTYPE(io)> would
contain.

	do_binmode(fp, iotype, TRUE);

d989 1
a989 17
	EXTEND( sp, int x )

=item fbm_compile

Analyses the string in order to make fast searches on it using fbm_instr() --
the Boyer-Moore algorithm.

	void	fbm_compile(SV* sv, U32 flags)

=item fbm_instr

Returns the location of the SV in the string delimited by C<str> and
C<strend>.  It returns C<Nullch> if the string can't be found.  The
C<sv> does not have to be fbm_compiled, but the search will not be as
fast then.

	char*	fbm_instr(char *str, char *strend, SV *sv, U32 flags)
d1000 1
a1000 1
Used to indicate array context.  See C<GIMME_V>, C<GIMME> and L<perlcall>.
d1013 2
a1014 8
A backward-compatible version of C<GIMME_V> which can only return
C<G_SCALAR> or C<G_ARRAY>; in a void context, it returns C<G_SCALAR>.

=item GIMME_V

The XSUB-writer's equivalent to Perl's C<wantarray>.  Returns
C<G_VOID>, C<G_SCALAR> or C<G_ARRAY> for void, scalar or array
context, respectively.
d1022 1
a1022 56
Used to indicate scalar context.  See C<GIMME_V>, C<GIMME>, and L<perlcall>.

=item gv_fetchmeth

Returns the glob with the given C<name> and a defined subroutine or
C<NULL>.  The glob lives in the given C<stash>, or in the stashes
accessible via @@ISA and @@UNIVERSAL.

The argument C<level> should be either 0 or -1.  If C<level==0>, as a
side-effect creates a glob with the given C<name> in the given
C<stash> which in the case of success contains an alias for the
subroutine, and sets up caching info for this glob.  Similarly for all
the searched stashes.

This function grants C<"SUPER"> token as a postfix of the stash name.

The GV returned from C<gv_fetchmeth> may be a method cache entry,
which is not visible to Perl code.  So when calling C<perl_call_sv>,
you should not use the GV directly; instead, you should use the
method's CV, which can be obtained from the GV with the C<GvCV> macro.

        GV*     gv_fetchmeth (HV* stash, char* name, STRLEN len, I32 level)

=item gv_fetchmethod

=item gv_fetchmethod_autoload

Returns the glob which contains the subroutine to call to invoke the
method on the C<stash>.  In fact in the presence of autoloading this may
be the glob for "AUTOLOAD".  In this case the corresponding variable
$AUTOLOAD is already setup.

The third parameter of C<gv_fetchmethod_autoload> determines whether AUTOLOAD
lookup is performed if the given method is not present: non-zero means
yes, look for AUTOLOAD; zero means no, don't look for AUTOLOAD.  Calling
C<gv_fetchmethod> is equivalent to calling C<gv_fetchmethod_autoload> with a
non-zero C<autoload> parameter.

These functions grant C<"SUPER"> token as a prefix of the method name.

Note that if you want to keep the returned glob for a long time, you
need to check for it being "AUTOLOAD", since at the later time the call
may load a different subroutine due to $AUTOLOAD changing its value.
Use the glob created via a side effect to do this.

These functions have the same side-effects and as C<gv_fetchmeth> with
C<level==0>.  C<name> should be writable if contains C<':'> or C<'\''>.
The warning against passing the GV returned by C<gv_fetchmeth> to
C<perl_call_sv> apply equally to these functions.

        GV*     gv_fetchmethod (HV* stash, char* name)
        GV*     gv_fetchmethod_autoload (HV* stash, char* name, I32 autoload)

=item G_VOID

Used to indicate void context.  See C<GIMME_V> and L<perlcall>.
d1030 1
a1030 1
	HV*	gv_stashpv (char* name, I32 create)
d1036 1
a1036 1
	HV*	gv_stashsv (SV* sv, I32 create)
d1042 1
a1042 67
=item HEf_SVKEY

This flag, used in the length slot of hash entries and magic
structures, specifies the structure contains a C<SV*> pointer where a
C<char*> pointer is to be expected. (For information only--not to be used).

=item HeHASH

Returns the computed hash stored in the hash entry.

	U32	HeHASH(HE* he)

=item HeKEY

Returns the actual pointer stored in the key slot of the hash entry.
The pointer may be either C<char*> or C<SV*>, depending on the value of
C<HeKLEN()>.  Can be assigned to.  The C<HePV()> or C<HeSVKEY()> macros
are usually preferable for finding the value of a key.

	char*	HeKEY(HE* he)

=item HeKLEN

If this is negative, and amounts to C<HEf_SVKEY>, it indicates the entry
holds an C<SV*> key.  Otherwise, holds the actual length of the key.
Can be assigned to. The C<HePV()> macro is usually preferable for finding
key lengths.

	int	HeKLEN(HE* he)

=item HePV

Returns the key slot of the hash entry as a C<char*> value, doing any
necessary dereferencing of possibly C<SV*> keys.  The length of
the string is placed in C<len> (this is a macro, so do I<not> use
C<&len>).  If you do not care about what the length of the key is,
you may use the global variable C<PL_na>, though this is rather less
efficient than using a local variable.  Remember though, that hash
keys in perl are free to contain embedded nulls, so using C<strlen()>
or similar is not a good way to find the length of hash keys.
This is very similar to the C<SvPV()> macro described elsewhere in
this document.

	char*	HePV(HE* he, STRLEN len)

=item HeSVKEY

Returns the key as an C<SV*>, or C<Nullsv> if the hash entry
does not contain an C<SV*> key.

	HeSVKEY(HE* he)

=item HeSVKEY_force

Returns the key as an C<SV*>.  Will create and return a temporary
mortal C<SV*> if the hash entry contains only a C<char*> key.

	HeSVKEY_force(HE* he)

=item HeSVKEY_set

Sets the key to a given C<SV*>, taking care to set the appropriate flags
to indicate the presence of an C<SV*> key, and returns the same C<SV*>.

	HeSVKEY_set(HE* he, SV* sv)

=item HeVAL
d1044 1
a1044 3
Returns the value slot (type C<SV*>) stored in the hash entry.

	HeVAL(HE* he)
d1050 1
a1050 1
	void	hv_clear (HV* tb)
d1055 2
a1056 2
and returned to the caller.  The C<klen> is the length of the key.  The
C<flags> value will normally be zero; if set to G_DISCARD then NULL will be
d1059 1
a1059 10
	SV*	hv_delete (HV* tb, char* key, U32 klen, I32 flags)

=item hv_delete_ent

Deletes a key/value pair in the hash.  The value SV is removed from the hash
and returned to the caller.  The C<flags> value will normally be zero; if set
to G_DISCARD then NULL will be returned.  C<hash> can be a valid precomputed
hash value, or 0 to ask for it to be computed.

	SV*     hv_delete_ent (HV* tb, SV* key, I32 flags, U32 hash)
d1064 1
a1064 8
C<klen> is the length of the key.

	bool	hv_exists (HV* tb, char* key, U32 klen)

=item hv_exists_ent

Returns a boolean indicating whether the specified hash key exists. C<hash>
can be a valid precomputed hash value, or 0 to ask for it to be computed.
d1066 1
a1066 1
	bool    hv_exists_ent (HV* tb, SV* key, U32 hash)
d1071 1
a1071 1
C<klen> is the length of the key.  If C<lval> is set then the fetch will be
d1075 1
a1075 19
See L<Understanding the Magic of Tied Hashes and Arrays> for more
information on how to use this function on tied hashes.

	SV**	hv_fetch (HV* tb, char* key, U32 klen, I32 lval)

=item hv_fetch_ent

Returns the hash entry which corresponds to the specified key in the hash.
C<hash> must be a valid precomputed hash number for the given C<key>, or
0 if you want the function to compute it.  IF C<lval> is set then the
fetch will be part of a store.  Make sure the return value is non-null
before accessing it.  The return value when C<tb> is a tied hash
is a pointer to a static location, so be sure to make a copy of the
structure if you need to store it somewhere.

See L<Understanding the Magic of Tied Hashes and Arrays> for more
information on how to use this function on tied hashes.

	HE*     hv_fetch_ent  (HV* tb, SV* key, I32 lval, U32 hash)
d1081 1
a1081 9
	I32	hv_iterinit (HV* tb)

Returns the number of keys in the hash (i.e. the same as C<HvKEYS(tb)>).
The return value is currently only meaningful for hashes without tie
magic.

NOTE: Before version 5.004_65, C<hv_iterinit> used to return the number
of hash buckets that happen to be in use.  If you still need that
esoteric value, you can get it through the macro C<HvFILL(tb)>.
d1088 1
a1088 9
	char*	hv_iterkey (HE* entry, I32* retlen)

=item hv_iterkeysv

Returns the key as an C<SV*> from the current position of the hash
iterator.  The return value will always be a mortal copy of the
key.  Also see C<hv_iterinit>.

	SV*     hv_iterkeysv  (HE* entry)
d1094 1
a1094 1
	HE*	hv_iternext (HV* tb)
d1101 1
a1101 1
	SV*	hv_iternextsv (HV* hv, char** key, I32* retlen)
d1108 1
a1108 1
	SV*	hv_iterval (HV* tb, HE* entry)
d1114 1
a1114 1
	void	hv_magic (HV* hv, GV* gv, int how)
d1120 1
a1120 1
	char*	HvNAME (HV* stash)
d1125 1
a1125 1
the length of the key.  The C<hash> parameter is the precomputed hash
d1127 2
a1128 25
NULL if the operation failed or if the value did not need to be actually
stored within the hash (as in the case of tied hashes).  Otherwise it can
be dereferenced to get the original C<SV*>.  Note that the caller is
responsible for suitably incrementing the reference count of C<val>
before the call, and decrementing it if the function returned NULL.

See L<Understanding the Magic of Tied Hashes and Arrays> for more
information on how to use this function on tied hashes.

	SV**	hv_store (HV* tb, char* key, U32 klen, SV* val, U32 hash)

=item hv_store_ent

Stores C<val> in a hash.  The hash key is specified as C<key>.  The C<hash>
parameter is the precomputed hash value; if it is zero then Perl will
compute it.  The return value is the new hash entry so created.  It will be
NULL if the operation failed or if the value did not need to be actually
stored within the hash (as in the case of tied hashes).  Otherwise the
contents of the return value can be accessed using the C<He???> macros
described here.  Note that the caller is responsible for suitably
incrementing the reference count of C<val> before the call, and decrementing
it if the function returned NULL.

See L<Understanding the Magic of Tied Hashes and Arrays> for more
information on how to use this function on tied hashes.
d1130 1
a1130 1
	HE*     hv_store_ent  (HV* tb, SV* key, SV* val, U32 hash)
d1136 1
a1136 1
	void	hv_undef (HV* tb)
d1143 1
a1143 1
	int	isALNUM (char c)
d1147 1
a1147 1
Returns a boolean indicating whether the C C<char> is an ascii alphabetic
d1150 1
a1150 1
	int	isALPHA (char c)
d1156 1
a1156 1
	int	isDIGIT (char c)
d1162 1
a1162 1
	int	isLOWER (char c)
d1168 1
a1168 1
	int	isSPACE (char c)
d1174 1
a1174 1
	int	isUPPER (char c)
d1179 1
a1179 6
stack.  See L<perlxs/"Variable-length Parameter Lists">.

=item ix

Variable which is setup by C<xsubpp> to indicate which of an XSUB's aliases
was used to invoke it.  See L<perlxs/"The ALIAS: Keyword">.
a1186 7
=item looks_like_number

Test if an the content of an SV looks like a number (or is a number).

	int	looks_like_number(SV*)


d1189 1
a1189 1
Stack marker variable for the XSUB.  See C<dMARK>.
d1195 1
a1195 1
	int	mg_clear (SV* sv)
d1201 1
a1201 1
	int	mg_copy (SV *, SV *, char *, STRLEN)
d1207 1
a1207 1
	MAGIC*	mg_find (SV* sv, int type)
d1213 1
a1213 1
	int	mg_free (SV* sv)
d1219 1
a1219 1
	int	mg_get (SV* sv)
d1225 1
a1225 1
	U32	mg_len (SV* sv)
d1231 1
a1231 1
	void	mg_magical (SV* sv)
d1237 1
a1237 9
	int	mg_set (SV* sv)

=item modglobal

C<modglobal> is a general purpose, interpreter global HV for use by
extensions that need to keep information on a per-interpreter basis.
In a pinch, it can also be used as a symbol table for extensions
to share data among each other.  It is a good idea to use keys
prefixed by the package name of the extension that owns the data.
d1243 1
a1243 1
the type.  Can do overlapping moves.  See also C<Copy>.
d1245 1
a1245 1
	void	Move( s, d, n, t )
d1247 1
a1247 1
=item PL_na
d1249 2
a1250 3
A convenience variable which is typically used with C<SvPV> when one doesn't
care about the length of the string.  It is usually more efficient to
declare a local variable and use that instead.
d1256 1
a1256 1
	void*	New( x, void *ptr, int size, type )
d1258 1
a1258 1
=item newAV
d1260 1
a1260 1
Creates a new AV.  The reference count is set to 1.
d1262 1
a1262 1
	AV*	newAV (void)
d1264 1
a1264 1
=item Newc
d1266 2
a1267 1
The XSUB-writer's interface to the C C<malloc> function, with cast.
d1269 1
a1269 1
	void*	Newc( x, void *ptr, int size, type, cast )
d1271 1
a1271 1
=item newCONSTSUB
d1273 1
a1273 2
Creates a constant sub equivalent to Perl C<sub FOO () { 123 }>
which is eligible for inlining at compile-time.
d1275 1
a1275 1
	void	newCONSTSUB(HV* stash, char* name, SV* sv)
d1279 1
a1279 1
Creates a new HV.  The reference count is set to 1.
d1281 1
a1281 1
	HV*	newHV (void)
d1283 1
a1283 1
=item newRV_inc
d1285 1
a1285 1
Creates an RV wrapper for an SV.  The reference count for the original SV is
d1288 1
a1288 10
	SV*	newRV_inc (SV* ref)

For historical reasons, "newRV" is a synonym for "newRV_inc".

=item newRV_noinc

Creates an RV wrapper for an SV.  The reference count for the original
SV is B<not> incremented.

	SV*     newRV_noinc (SV* ref)
d1290 1
a1290 1
=item NEWSV
d1292 3
a1294 6
Creates a new SV.  A non-zero C<len> parameter indicates the number of
bytes of preallocated string space the SV should have.  An extra byte
for a tailing NUL is also reserved.  (SvPOK is not set for the SV even
if string space is allocated.)  The reference count for the new SV is
set to 1.  C<id> is an integer id between 0 and 1299 (used to identify
leaks).
d1296 1
a1296 1
	SV*	NEWSV (int id, STRLEN len)
d1300 2
a1301 2
Creates a new SV and copies an integer into it.  The reference count for the
SV is set to 1.
d1303 1
a1303 1
	SV*	newSViv (IV i)
d1307 2
a1308 2
Creates a new SV and copies a double into it.  The reference count for the
SV is set to 1.
d1310 1
a1310 1
	SV*	newSVnv (NV i)
d1314 2
a1315 2
Creates a new SV and copies a string into it.  The reference count for the
SV is set to 1.  If C<len> is zero then Perl will compute the length.
d1317 1
a1317 16
	SV*	newSVpv (char* s, STRLEN len)

=item newSVpvf

Creates a new SV an initialize it with the string formatted like
C<sprintf>.

	SV*     newSVpvf(const char* pat, ...);

=item newSVpvn

Creates a new SV and copies a string into it.  The reference count for the
SV is set to 1.  If C<len> is zero then Perl will create a zero length 
string.

	SV*	newSVpvn (char* s, STRLEN len)
d1322 1
a1322 1
it will be upgraded to one.  If C<classname> is non-null then the new SV will
d1324 1
a1324 1
reference count is 1.
d1326 1
a1326 1
	SV*	newSVrv (SV* rv, char* classname)
d1330 1
a1330 1
Creates a new SV which is an exact duplicate of the original SV.
d1332 1
a1332 1
	SV*	newSVsv (SV* old)
a1342 7
=item Newz

The XSUB-writer's interface to the C C<malloc> function.  The allocated
memory is zeroed with C<memzero>.

	void*	Newz( x, void *ptr, int size, type )

d1375 1
a1375 1
	I32	perl_call_argv (char* subname, I32 flags, char** argv)
d1382 1
a1382 1
	I32	perl_call_method (char* methname, I32 flags)
d1388 1
a1388 1
	I32	perl_call_pv (char* subname, I32 flags)
d1395 1
a1395 1
	I32	perl_call_sv (SV* sv, I32 flags)
d1409 1
a1409 7
	I32	perl_eval_sv (SV* sv, I32 flags)

=item perl_eval_pv

Tells Perl to C<eval> the given string and return an SV* result.

	SV*	perl_eval_pv (char* p, I32 croak_on_error)
d1419 1
a1419 1
set and the variable does not exist then NULL is returned.
d1421 1
a1421 1
	AV*	perl_get_av (char* name, I32 create)
d1427 1
a1427 1
set and the variable does not exist then NULL is returned.
d1429 1
a1429 1
	CV*	perl_get_cv (char* name, I32 create)
d1435 1
a1435 1
set and the variable does not exist then NULL is returned.
d1437 1
a1437 1
	HV*	perl_get_hv (char* name, I32 create)
d1443 1
a1443 1
set and the variable does not exist then NULL is returned.
d1445 1
a1445 1
	SV*	perl_get_sv (char* name, I32 create)
d1455 1
a1455 1
	void	perl_require_pv (char* pv)
d1465 1
a1465 1
	int	POPi()
d1471 1
a1471 1
	long	POPl()
d1477 1
a1477 1
	char*	POPp()
d1483 1
a1483 1
	double	POPn()
d1489 1
a1489 1
	SV*	POPs()
d1500 1
a1500 1
Handles 'set' magic.  See C<XPUSHi>.
d1502 1
a1502 1
	void	PUSHi(int d)
d1507 1
a1507 1
Handles 'set' magic.  See C<XPUSHn>.
d1509 1
a1509 1
	void	PUSHn(double d)
d1514 1
a1514 2
The C<len> indicates the length of the string.  Handles 'set' magic.  See
C<XPUSHp>.
d1516 1
a1516 1
	void	PUSHp(char *c, int len )
d1520 2
a1521 11
Push an SV onto the stack.  The stack must have room for this element.  Does
not handle 'set' magic.  See C<XPUSHs>.

	void	PUSHs(sv)

=item PUSHu

Push an unsigned integer onto the stack.  The stack must have room for
this element.  See C<XPUSHu>.

	void	PUSHu(unsigned int d)
d1523 1
d1536 1
a1536 1
	void*	Renew( void *ptr, int size, type )
d1542 1
a1542 1
	void*	Renewc( void *ptr, int size, type, cast )
d1547 1
a1547 2
This is always the proper type for the XSUB.
See L<perlxs/"The RETVAL Variable">.
d1565 1
a1565 1
	char*	savepv (char* sv)
d1572 1
a1572 1
	char*	savepvn (char* sv, I32 len)
d1596 1
a1596 1
	SV*	ST(int x)
d1602 1
a1602 1
	int	strEQ( char *s1, char *s2 )
d1609 1
a1609 1
	int	strGE( char *s1, char *s2 )
d1616 1
a1616 1
	int	strGT( char *s1, char *s2 )
d1623 1
a1623 1
	int	strLE( char *s1, char *s2 )
d1630 1
a1630 1
	int	strLT( char *s1, char *s2 )
d1636 1
a1636 1
	int	strNE( char *s1, char *s2 )
d1643 1
a1643 1
	int	strnEQ( char *s1, char *s2 )
d1650 1
a1650 1
	int	strnNE( char *s1, char *s2, int len )
d1657 1
a1657 1
	SV*	sv_2mortal (SV* sv)
d1662 2
a1663 2
must be designated by its stash (see C<gv_stashpv()>).  The reference count
of the SV is unaffected.
d1665 1
a1665 1
	SV*	sv_bless (SV* sv, HV* stash)
a1669 3
Handles 'get' magic, but not 'set' magic.  See C<sv_catpv_mg>.

	void	sv_catpv (SV* sv, char* ptr)
d1671 1
a1671 5
=item sv_catpv_mg

Like C<sv_catpv>, but also handles 'set' magic.

	void	sv_catpv_mg (SV* sv, const char* ptr)
d1676 1
a1676 6
C<len> indicates number of bytes to copy.  Handles 'get' magic, but not
'set' magic.  See C<sv_catpvn_mg>.

	void	sv_catpvn (SV* sv, char* ptr, STRLEN len)

=item sv_catpvn_mg
d1678 1
a1678 17
Like C<sv_catpvn>, but also handles 'set' magic.

	void	sv_catpvn_mg (SV* sv, char* ptr, STRLEN len)

=item sv_catpvf

Processes its arguments like C<sprintf> and appends the formatted output
to an SV.  Handles 'get' magic, but not 'set' magic.  C<SvSETMAGIC()> must
typically be called after calling this function to handle 'set' magic.

	void	sv_catpvf (SV* sv, const char* pat, ...)

=item sv_catpvf_mg

Like C<sv_catpvf>, but also handles 'set' magic.

	void	sv_catpvf_mg (SV* sv, const char* pat, ...)
d1682 2
a1683 22
Concatenates the string from SV C<ssv> onto the end of the string in SV
C<dsv>.  Handles 'get' magic, but not 'set' magic.  See C<sv_catsv_mg>.

	void	sv_catsv (SV* dsv, SV* ssv)

=item sv_catsv_mg

Like C<sv_catsv>, but also handles 'set' magic.

	void	sv_catsv_mg (SV* dsv, SV* ssv)

=item sv_chop

Efficient removal of characters from the beginning of the string
buffer.  SvPOK(sv) must be true and the C<ptr> must be a pointer to
somewhere inside the string buffer.  The C<ptr> becomes the first
character of the adjusted string.

	void    sv_chop(SV* sv, char *ptr)


=item sv_cmp
d1685 1
a1685 5
Compares the strings in two SVs.  Returns -1, 0, or 1 indicating whether the
string in C<sv1> is less than, equal to, or greater than the string in
C<sv2>.

	I32	sv_cmp (SV* sv1, SV* sv2)
d1691 1
a1691 1
	int	SvCUR (SV* sv)
d1697 1
a1697 15
	void	SvCUR_set (SV* sv, int val)

=item sv_dec

Auto-decrement of the value in the SV.

	void	sv_dec (SV* sv)

=item sv_derived_from

Returns a boolean indicating whether the SV is derived from the specified
class.  This is the function that implements C<UNIVERSAL::isa>.  It works
for class names as well as for objects.

	bool	sv_derived_from _((SV* sv, char* name));
d1704 1
a1704 15
	char*	SvEND(sv)

=item sv_eq

Returns a boolean indicating whether the strings in the two SVs are
identical.

	I32	sv_eq (SV* sv1, SV* sv2)

=item SvGETMAGIC

Invokes C<mg_get> on an SV if it has 'get' magic.  This macro evaluates
its argument more than once.

	void	SvGETMAGIC(SV *sv)
d1708 1
a1708 12
Expands the character buffer in the SV so that it has room for the
indicated number of bytes (remember to reserve space for an extra
trailing NUL character).  Calls C<sv_grow> to perform the expansion if
necessary.  Returns a pointer to the character buffer.

	char*	SvGROW(SV* sv, STRLEN len)

=item sv_grow

Expands the character buffer in the SV.  This will use C<sv_unref> and will
upgrade the SV to C<SVt_PV>.  Returns a pointer to the character buffer.
Use C<SvGROW>.
d1710 1
a1710 13
=item sv_inc

Auto-increment of the value in the SV.

	void	sv_inc (SV* sv)

=item sv_insert

Inserts a string at the specified offset/length within the SV.
Similar to the Perl substr() function.

	void	sv_insert(SV *sv, STRLEN offset, STRLEN len,
			  char *str, STRLEN strlen)
d1716 1
a1716 1
	int	SvIOK (SV* SV)
d1722 1
a1722 1
	void	SvIOK_off (SV* sv)
d1728 1
a1728 7
	void	SvIOK_on (SV* sv)

=item SvIOK_only

Tells an SV that it is an integer and disables all other OK bits.

	void	SvIOK_only (SV* sv)
d1735 1
a1735 1
	int	SvIOKp (SV* SV)
d1740 1
a1740 1
class.  This does not check for subtypes; use C<sv_derived_from> to verify
d1743 7
a1749 1
	int	sv_isa (SV* sv, char* name)
d1757 1
a1757 7
	int	sv_isobject (SV* sv)

=item SvIV

Coerces the given SV to an integer and returns it.

	int SvIV (SV* sv)
d1761 1
a1761 1
Returns the integer which is stored in the SV, assuming SvIOK is true.
d1763 1
a1763 1
	int	SvIVX (SV* sv)
d1769 1
a1769 7
	int	SvLEN (SV* sv)

=item sv_len

Returns the length of the string in the SV.  Use C<SvCUR>.

	STRLEN	sv_len (SV* sv)
d1775 1
a1775 1
	void	sv_magic (SV* sv, SV* obj, int how, char* name, I32 namlen)
d1782 7
a1788 1
	SV*	sv_mortalcopy (SV* oldsv)
d1792 5
a1796 1
Creates a new SV which is mortal.  The reference count of the SV is set to 1.
d1798 1
a1798 1
	SV*	sv_newmortal (void)
d1805 1
a1805 1
	int	SvNIOK (SV* SV)
d1811 1
a1811 1
	void	SvNIOK_off (SV* sv)
d1818 1
a1818 5
	int	SvNIOKp (SV* SV)

=item PL_sv_no

This is the C<false> SV.  See C<PL_sv_yes>.  Always refer to this as C<&PL_sv_no>.
d1824 1
a1824 1
	int	SvNOK (SV* SV)
d1830 1
a1830 1
	void	SvNOK_off (SV* sv)
d1836 1
a1836 7
	void	SvNOK_on (SV* sv)

=item SvNOK_only

Tells an SV that it is a double and disables all other OK bits.

	void	SvNOK_only (SV* sv)
d1843 1
a1843 1
	int	SvNOKp (SV* SV)
d1847 1
a1847 1
Coerce the given SV to a double and return it.
d1849 1
a1849 1
	double	SvNV (SV* sv)
d1853 1
a1853 11
Returns the double which is stored in the SV, assuming SvNOK is true.

	double	SvNVX (SV* sv)

=item SvOK

Returns a boolean indicating whether the value is an SV.

	int	SvOK (SV* sv)

=item SvOOK
d1855 1
a1855 6
Returns a boolean indicating whether the SvIVX is a valid offset value
for the SvPVX.  This hack is used internally to speed up removal of
characters from the beginning of a SvPV.  When SvOOK is true, then the
start of the allocated string buffer is really (SvPVX - SvIVX).

	int     SvOOK(SV* sv)
d1861 1
a1861 1
	int	SvPOK (SV* SV)
d1867 1
a1867 1
	void	SvPOK_off (SV* sv)
d1873 1
a1873 7
	void	SvPOK_on (SV* sv)

=item SvPOK_only

Tells an SV that it is a string and disables all other OK bits.

	void	SvPOK_only (SV* sv)
d1880 1
a1880 1
	int	SvPOKp (SV* SV)
d1885 2
a1886 1
if the SV does not contain a string.  Handles 'get' magic.
d1888 1
a1888 8
	char*	SvPV (SV* sv, STRLEN len)

=item SvPV_force

Like <SvPV> but will force the SV into becoming a string (SvPOK).  You
want force if you are going to update the SvPVX directly.

	char*	SvPV_force(SV* sv, STRLEN len)
d1894 1
a1894 1
	char*	SvPVX (SV* sv)
d1898 1
a1898 1
Returns the value of the object's reference count.
d1900 1
a1900 1
	int	SvREFCNT (SV* sv)
d1904 1
a1904 1
Decrements the reference count of the given SV.
d1906 1
a1906 1
	void	SvREFCNT_dec (SV* sv)
d1910 1
a1910 1
Increments the reference count of the given SV.
d1912 1
a1912 1
	void	SvREFCNT_inc (SV* sv)
d1918 1
a1918 1
	int	SvROK (SV* sv)
d1924 1
a1924 1
	void	SvROK_off (SV* sv)
d1930 1
a1930 1
	void	SvROK_on (SV* sv)
d1936 1
a1936 8
	SV*	SvRV (SV* sv)

=item SvSETMAGIC

Invokes C<mg_set> on an SV if it has 'set' magic.  This macro evaluates
its argument more than once.

	void	SvSETMAGIC( SV *sv )
d1940 1
a1940 6
Copies an integer into the given SV.  Does not handle 'set' magic.
See C<sv_setiv_mg>.

	void	sv_setiv (SV* sv, IV num)

=item sv_setiv_mg
d1942 1
a1942 3
Like C<sv_setiv>, but also handles 'set' magic.

	void	sv_setiv_mg (SV* sv, IV num)
d1946 1
a1946 8
Copies a double into the given SV.  Does not handle 'set' magic.
See C<sv_setnv_mg>.

	void	sv_setnv (SV* sv, double num)

=item sv_setnv_mg

Like C<sv_setnv>, but also handles 'set' magic.
d1948 1
a1948 1
	void	sv_setnv_mg (SV* sv, double num)
a1952 18
Does not handle 'set' magic.  See C<sv_setpv_mg>.

	void	sv_setpv (SV* sv, const char* ptr)

=item sv_setpv_mg

Like C<sv_setpv>, but also handles 'set' magic.

	void	sv_setpv_mg (SV* sv, const char* ptr)

=item sv_setpviv

Copies an integer into the given SV, also updating its string value.
Does not handle 'set' magic.  See C<sv_setpviv_mg>.

	void	sv_setpviv (SV* sv, IV num)

=item sv_setpviv_mg
d1954 1
a1954 3
Like C<sv_setpviv>, but also handles 'set' magic.

	void	sv_setpviv_mg (SV* sv, IV num)
d1959 1
a1959 16
bytes to be copied.  Does not handle 'set' magic.  See C<sv_setpvn_mg>.

	void	sv_setpvn (SV* sv, const char* ptr, STRLEN len)

=item sv_setpvn_mg

Like C<sv_setpvn>, but also handles 'set' magic.

	void	sv_setpvn_mg (SV* sv, const char* ptr, STRLEN len)

=item sv_setpvf

Processes its arguments like C<sprintf> and sets an SV to the formatted
output.  Does not handle 'set' magic.  See C<sv_setpvf_mg>.

	void	sv_setpvf (SV* sv, const char* pat, ...)
d1961 1
a1961 5
=item sv_setpvf_mg

Like C<sv_setpvf>, but also handles 'set' magic.

	void	sv_setpvf_mg (SV* sv, const char* pat, ...)
d1965 4
a1968 5
Copies an integer into a new SV, optionally blessing the SV.  The C<rv>
argument will be upgraded to an RV.  That RV will be modified to point to
the new SV.  The C<classname> argument indicates the package for the
blessing.  Set C<classname> to C<Nullch> to avoid the blessing.  The new SV
will be returned and will have a reference count of 1.
d1970 1
a1970 1
	SV*	sv_setref_iv (SV *rv, char *classname, IV iv)
d1974 4
a1977 5
Copies a double into a new SV, optionally blessing the SV.  The C<rv>
argument will be upgraded to an RV.  That RV will be modified to point to
the new SV.  The C<classname> argument indicates the package for the
blessing.  Set C<classname> to C<Nullch> to avoid the blessing.  The new SV
will be returned and will have a reference count of 1.
d1979 1
a1979 1
	SV*	sv_setref_nv (SV *rv, char *classname, double nv)
d1983 5
a1987 6
Copies a pointer into a new SV, optionally blessing the SV.  The C<rv>
argument will be upgraded to an RV.  That RV will be modified to point to
the new SV.  If the C<pv> argument is NULL then C<PL_sv_undef> will be placed
into the SV.  The C<classname> argument indicates the package for the
blessing.  Set C<classname> to C<Nullch> to avoid the blessing.  The new SV
will be returned and will have a reference count of 1.
d1989 1
a1989 1
	SV*	sv_setref_pv (SV *rv, char *classname, void* pv)
d1998 2
a1999 3
Copies a string into a new SV, optionally blessing the SV.  The length of the
string must be specified with C<n>.  The C<rv> argument will be upgraded to
an RV.  That RV will be modified to point to the new SV.  The C<classname>
d2002 1
a2002 1
a reference count of 1.
d2004 1
a2004 1
	SV*	sv_setref_pvn (SV *rv, char *classname, char* pv, I32 n)
a2007 14
=item SvSetSV

Calls C<sv_setsv> if dsv is not the same as ssv.  May evaluate arguments
more than once.

	void	SvSetSV (SV* dsv, SV* ssv)

=item SvSetSV_nosteal

Calls a non-destructive version of C<sv_setsv> if dsv is not the same as ssv.
May evaluate arguments more than once.

	void	SvSetSV_nosteal (SV* dsv, SV* ssv)

d2011 3
a2013 2
The source SV may be destroyed if it is mortal.  Does not handle 'set' magic.
See the macro forms C<SvSetSV>, C<SvSetSV_nosteal> and C<sv_setsv_mg>.
d2015 1
a2015 20
	void	sv_setsv (SV* dsv, SV* ssv)

=item sv_setsv_mg

Like C<sv_setsv>, but also handles 'set' magic.

	void	sv_setsv_mg (SV* dsv, SV* ssv)

=item sv_setuv

Copies an unsigned integer into the given SV.  Does not handle 'set' magic.
See C<sv_setuv_mg>.

	void	sv_setuv (SV* sv, UV num)

=item sv_setuv_mg

Like C<sv_setuv>, but also handles 'set' magic.

	void	sv_setuv_mg (SV* sv, UV num)
d2021 1
a2021 30
	HV*	SvSTASH (SV* sv)

=item SvTAINT

Taints an SV if tainting is enabled

	void	SvTAINT (SV* sv)

=item SvTAINTED

Checks to see if an SV is tainted. Returns TRUE if it is, FALSE if not.

	int	SvTAINTED (SV* sv)

=item SvTAINTED_off

Untaints an SV. Be I<very> careful with this routine, as it short-circuits
some of Perl's fundamental security features. XS module authors should
not use this function unless they fully understand all the implications
of unconditionally untainting the value. Untainting should be done in
the standard perl fashion, via a carefully crafted regexp, rather than
directly untainting variables.

	void	SvTAINTED_off (SV* sv)

=item SvTAINTED_on

Marks an SV as tainted.

	void	SvTAINTED_on (SV* sv)
d2054 1
a2054 1
false, defined or undefined.  Does not handle 'get' magic.
d2056 1
a2056 1
	int	SvTRUE (SV* sv)
a2068 12
=item PL_sv_undef

This is the C<undef> SV.  Always refer to this as C<&PL_sv_undef>.

=item sv_unref

Unsets the RV status of the SV, and decrements the reference count of
whatever was being referenced by the RV.  This can almost be thought of
as a reversal of C<newSVrv>.  See C<SvROK_off>.

	void    sv_unref (SV* sv)

d2071 1
a2071 2
Used to upgrade an SV to a more complex form.  Uses C<sv_upgrade> to perform
the upgrade if necessary.  See C<svtype>.
d2073 1
a2073 1
	bool    SvUPGRADE (SV* sv, svtype mt)
d2075 1
a2075 3
=item sv_upgrade

Upgrade an SV to a more complex form.  Use C<SvUPGRADE>.  See C<svtype>.
d2080 1
a2080 2
stored inside the SV but sv_usepvn allows the SV to use an outside string.
The C<ptr> should point to memory that was allocated by C<malloc>.  The
d2083 1
a2083 12
the programmer after giving it to sv_usepvn.  Does not handle 'set' magic.
See C<sv_usepvn_mg>.

	void	sv_usepvn (SV* sv, char* ptr, STRLEN len)

=item sv_usepvn_mg

Like C<sv_usepvn>, but also handles 'set' magic.

	void	sv_usepvn_mg (SV* sv, char* ptr, STRLEN len)

=item sv_vcatpvfn(sv, pat, patlen, args, svargs, svmax, used_locale)
d2085 1
a2085 3
Processes its arguments like C<vsprintf> and appends the formatted output
to an SV.  Uses an array of SVs if the C style variable argument list is
missing (NULL).  Indicates if locale information has been used for formatting.
d2087 1
a2087 3
	void	sv_catpvfn _((SV* sv, const char* pat, STRLEN patlen,
			      va_list *args, SV **svargs, I32 svmax,
			      bool *used_locale));
d2089 1
a2089 24
=item sv_vsetpvfn(sv, pat, patlen, args, svargs, svmax, used_locale)

Works like C<vcatpvfn> but copies the text into the SV instead of
appending it.

	void	sv_setpvfn _((SV* sv, const char* pat, STRLEN patlen,
			      va_list *args, SV **svargs, I32 svmax,
			      bool *used_locale));

=item SvUV

Coerces the given SV to an unsigned integer and returns it.

	UV      SvUV(SV* sv)

=item SvUVX

Returns the unsigned integer which is stored in the SV, assuming SvIOK is true.

	UV      SvUVX(SV* sv)

=item PL_sv_yes

This is the C<true> SV.  See C<PL_sv_no>.  Always refer to this as C<&PL_sv_yes>.
d2095 1
a2095 1
L<perlxs/"Using XS With C++">.
d2101 1
a2101 1
	int	toLOWER (char c)
d2107 1
a2107 1
	int	toUPPER (char c)
d2116 2
a2117 2
Push an integer onto the stack, extending the stack if necessary.  Handles
'set' magic. See C<PUSHi>.
d2123 2
a2124 2
Push a double onto the stack, extending the stack if necessary.  Handles 'set'
magic.  See C<PUSHn>.
d2131 1
a2131 1
indicates the length of the string.  Handles 'set' magic.  See C<PUSHp>.
d2137 1
a2137 2
Push an SV onto the stack, extending the stack if necessary.  Does not
handle 'set' magic.  See C<PUSHs>.
a2140 10
=item XPUSHu

Push an unsigned integer onto the stack, extending the stack if
necessary.  See C<PUSHu>.

=item XS

Macro to declare an XSUB and its C parameter list.  This is handled by
C<xsubpp>.

d2146 1
a2146 1
	XSRETURN(int x)
d2150 1
a2150 1
Return an empty list from an XSUB immediately.
a2153 6
=item XSRETURN_IV

Return an integer from an XSUB immediately.  Uses C<XST_mIV>.

	XSRETURN_IV(IV v)

d2156 1
a2156 1
Return C<&PL_sv_no> from an XSUB immediately.  Uses C<XST_mNO>.
a2159 12
=item XSRETURN_NV

Return an double from an XSUB immediately.  Uses C<XST_mNV>.

	XSRETURN_NV(NV v)

=item XSRETURN_PV

Return a copy of a string from an XSUB immediately.  Uses C<XST_mPV>.

	XSRETURN_PV(char *v)

d2162 1
a2162 1
Return C<&PL_sv_undef> from an XSUB immediately.  Uses C<XST_mUNDEF>.
d2168 1
a2168 1
Return C<&PL_sv_yes> from an XSUB immediately.  Uses C<XST_mYES>.
a2171 50
=item XST_mIV

Place an integer into the specified position C<i> on the stack.  The value is
stored in a new mortal SV.

	XST_mIV( int i, IV v )

=item XST_mNV

Place a double into the specified position C<i> on the stack.  The value is
stored in a new mortal SV.

	XST_mNV( int i, NV v )

=item XST_mNO

Place C<&PL_sv_no> into the specified position C<i> on the stack.

	XST_mNO( int i )

=item XST_mPV

Place a copy of a string into the specified position C<i> on the stack.  The
value is stored in a new mortal SV.

	XST_mPV( int i, char *v )

=item XST_mUNDEF

Place C<&PL_sv_undef> into the specified position C<i> on the stack.

	XST_mUNDEF( int i )

=item XST_mYES

Place C<&PL_sv_yes> into the specified position C<i> on the stack.

	XST_mYES( int i )

=item XS_VERSION

The version identifier for an XS module.  This is usually handled
automatically by C<ExtUtils::MakeMaker>.  See C<XS_VERSION_BOOTCHECK>.

=item XS_VERSION_BOOTCHECK

Macro to verify that a PM module's $VERSION variable matches the XS module's
C<XS_VERSION> variable.  This is usually handled automatically by
C<xsubpp>.  See L<perlxs/"The VERSIONCHECK: Keyword">.

d2177 1
a2177 1
	void	Zero( d, n, t )
d2181 1
a2181 1
=head1 AUTHORS
d2183 1
a2183 2
Until May 1997, this document was maintained by Jeff Okamoto
<okamoto@@corp.hp.com>.  It is now maintained as part of Perl itself.
d2187 7
a2193 2
Bowers, Matthew Green, Tim Bunce, Spider Boardman, Ulrich Pfeifer,
Stephen McCamant, and Gurusamy Sarathy.
a2194 1
API Listing originally by Dean Roehrich <roehrich@@cray.com>.
@


1.1.1.3
log
@virgin perl 5.6.0
@
text
@d3 1
a3 1
perlguts - Introduction to the Perl API
d7 3
a9 4
This document attempts to describe how to use the Perl API, as well as containing 
some info on the basic workings of the Perl core. It is far from complete 
and probably contains many errors. Please refer any questions or 
comments to the author below.
d25 1
a25 1
Perl uses a special typedef IV which is a simple signed integer type that is
a26 1
Additionally, there is the UV, which is simply an unsigned IV.
d29 1
a29 2
least 32-bits and 16-bits long, respectively. (Again, there are U32 and U16,
as well.)
d41 2
a42 2
    SV*  newSVpv(const char*, int);
    SV*  newSVpvn(const char*, int);
a89 1
    SvUV(SV*)
a91 1
    SvPV_nolen(SV*)
d93 1
a93 1
which will automatically coerce the actual scalar type into an IV, UV, double,
d97 6
a102 7
variable C<len> (this is a macro, so you do I<not> use C<&len>).  If you do
not care what the length of the data is, use the C<SvPV_nolen> macro.
Historically the C<SvPV> macro with the global variable C<PL_na> has been
used in this case.  But that can be quite inefficient because C<PL_na> must
be accessed in thread-local storage in threaded Perl.  In any case, remember
that Perl allows arbitrary strings of data that may both contain NULs and
might not be terminated by a NUL.
a107 1
	SV *s;
d110 1
a110 1
	ptr = SvPV(s, len);
d151 2
a152 2
    void  sv_catpv(SV*, const char*);
    void  sv_catpvn(SV*, const char*, STRLEN);
d172 1
a172 1
    SV*  get_sv("package::varname", FALSE);
d283 1
a283 1
    AV*  get_av("package::varname", FALSE);
d298 2
a299 2
    SV**  hv_store(HV*, const char* key, U32 klen, SV* val, U32 hash);
    SV**  hv_fetch(HV*, const char* key, U32 klen, I32 lval);
d317 2
a318 2
    bool  hv_exists(HV*, const char* key, U32 klen);
    SV*   hv_delete(HV*, const char* key, U32 klen, I32 flags);
d358 1
a358 1
    HV*  get_hv("package::varname", FALSE);
a366 4
    hash = hash + (hash >> 5);			/* after 5.6 */

The last step was added in version 5.6 to improve distribution of
lower bits in the resulting hash value.
d377 1
a377 1

d380 1
a380 1

d390 2
a391 2
doesn't have to be recomputed every time).  See L<perlapi> for detailed
descriptions.
d396 2
a397 1
L<perlapi> for detailed descriptions of these macros.
d484 1
a484 1
	SV* newSVrv(SV* rv, const char* classname);
d489 2
a490 2
	SV* sv_setref_iv(SV* rv, const char* classname, IV iv);
	SV* sv_setref_nv(SV* rv, const char* classname, NV iv);
d495 1
a495 1
	SV* sv_setref_pv(SV* rv, const char* classname, PV iv);
d500 1
a500 1
	SV* sv_setref_pvn(SV* rv, const char* classname, PV iv, STRLEN length);
d505 1
a505 1
	int  sv_isa(SV* sv, const char* name);
d515 1
a515 1
	bool sv_derived_from(SV* sv, const char* name);
d527 3
a529 3
    SV*  get_sv("package::varname", TRUE);
    AV*  get_av("package::varname", TRUE);
    HV*  get_hv("package::varname", TRUE);
d638 1
a638 1
    HV*  gv_stashpv(const char* name, I32 create)
d702 1
a702 1
    SV* sv = get_sv("dberror", TRUE);
d736 1
a736 1
    void sv_magic(SV* sv, SV* obj, int how, const char* name, I32 namlen);
a812 2
NOTE: the magic routines are not considered part of the Perl API, and may
not be exported by the Perl library.
d902 1
a902 1
See L<perlapi> for a description of these functions.
d915 1
a915 1
    int mg_copy(SV* sv, SV* nsv, const char* key, STRLEN klen);
d1095 1
a1095 6
=item C<SAVEDESTRUCTOR(DESTRUCTORFUNC_NOCONTEXT_t f, void *p)>

At the end of I<pseudo-block> the function C<f> is called with the
only argument C<p>.

=item C<SAVEDESTRUCTOR_X(DESTRUCTORFUNC_t f, void *p)>
d1098 1
a1098 1
implicit context argument (if any), and C<p>.
d1209 4
a1212 4
    I32  call_sv(SV*, I32);
    I32  call_pv(const char*, I32);
    I32  call_method(const char*, I32);
    I32  call_argv(const char*, I32, register char**);
d1214 1
a1214 1
The routine most often used is C<call_sv>.  The C<SV*> argument
d1224 1
a1224 5
These routines used to be called C<perl_call_sv> etc., before Perl v5.6.0,
but those names are now deprecated; macros of the same name are provided for
compatibility.

When using any of these routines (except C<call_argv>), the programmer
d1503 313
a1815 1
=head1 How multiple interpreters and concurrency are supported
d1817 1
a1817 2
WARNING: This information is subject to radical changes prior to
the Perl 5.6 release.  Use with caution.
d1819 3
a1821 1
=head2 Background and PERL_IMPLICIT_CONTEXT
d1823 1
a1823 253
The Perl interpreter can be regarded as a closed box: it has an API
for feeding it code or otherwise making it do things, but it also has
functions for its own use.  This smells a lot like an object, and
there are ways for you to build Perl so that you can have multiple
interpreters, with one interpreter represented either as a C++ object,
a C structure, or inside a thread.  The thread, the C structure, or
the C++ object will contain all the context, the state of that
interpreter.

Three macros control the major Perl build flavors: MULTIPLICITY,
USE_THREADS and PERL_OBJECT.  The MULTIPLICITY build has a C structure
that packages all the interpreter state, there is a similar thread-specific
data structure under USE_THREADS, and the PERL_OBJECT build has a C++
class to maintain interpreter state.  In all three cases,
PERL_IMPLICIT_CONTEXT is also normally defined, and enables the
support for passing in a "hidden" first argument that represents all three
data structures.

All this obviously requires a way for the Perl internal functions to be
C++ methods, subroutines taking some kind of structure as the first
argument, or subroutines taking nothing as the first argument.  To
enable these three very different ways of building the interpreter,
the Perl source (as it does in so many other situations) makes heavy
use of macros and subroutine naming conventions.

First problem: deciding which functions will be public API functions and
which will be private.  All functions whose names begin C<S_> are private 
(think "S" for "secret" or "static").  All other functions begin with
"Perl_", but just because a function begins with "Perl_" does not mean it is
part of the API. The easiest way to be B<sure> a function is part of the API
is to find its entry in L<perlapi>.  If it exists in L<perlapi>, it's part
of the API.  If it doesn't, and you think it should be (i.e., you need it fo
r your extension), send mail via L<perlbug> explaining why you think it
should be.

(L<perlapi> itself is generated by embed.pl, a Perl script that generates
significant portions of the Perl source code.  It has a list of almost
all the functions defined by the Perl interpreter along with their calling
characteristics and some flags.  Functions that are part of the public API
are marked with an 'A' in its flags.)

Second problem: there must be a syntax so that the same subroutine
declarations and calls can pass a structure as their first argument,
or pass nothing.  To solve this, the subroutines are named and
declared in a particular way.  Here's a typical start of a static
function used within the Perl guts:

  STATIC void
  S_incline(pTHX_ char *s)

STATIC becomes "static" in C, and is #define'd to nothing in C++.

A public function (i.e. part of the internal API, but not necessarily
sanctioned for use in extensions) begins like this:

  void
  Perl_sv_setsv(pTHX_ SV* dsv, SV* ssv)

C<pTHX_> is one of a number of macros (in perl.h) that hide the
details of the interpreter's context.  THX stands for "thread", "this",
or "thingy", as the case may be.  (And no, George Lucas is not involved. :-)
The first character could be 'p' for a B<p>rototype, 'a' for B<a>rgument,
or 'd' for B<d>eclaration.

When Perl is built without PERL_IMPLICIT_CONTEXT, there is no first
argument containing the interpreter's context.  The trailing underscore
in the pTHX_ macro indicates that the macro expansion needs a comma
after the context argument because other arguments follow it.  If
PERL_IMPLICIT_CONTEXT is not defined, pTHX_ will be ignored, and the
subroutine is not prototyped to take the extra argument.  The form of the
macro without the trailing underscore is used when there are no additional
explicit arguments.

When a core function calls another, it must pass the context.  This
is normally hidden via macros.  Consider C<sv_setsv>.  It expands
something like this:

    ifdef PERL_IMPLICIT_CONTEXT
      define sv_setsv(a,b)	Perl_sv_setsv(aTHX_ a, b)
      /* can't do this for vararg functions, see below */
    else
      define sv_setsv		Perl_sv_setsv
    endif

This works well, and means that XS authors can gleefully write:

    sv_setsv(foo, bar);

and still have it work under all the modes Perl could have been
compiled with.

Under PERL_OBJECT in the core, that will translate to either:

    CPerlObj::Perl_sv_setsv(foo,bar);  # in CPerlObj functions,
                                       # C++ takes care of 'this'
  or

    pPerl->Perl_sv_setsv(foo,bar);     # in truly static functions,
                                       # see objXSUB.h

Under PERL_OBJECT in extensions (aka PERL_CAPI), or under
MULTIPLICITY/USE_THREADS w/ PERL_IMPLICIT_CONTEXT in both core
and extensions, it will be:

    Perl_sv_setsv(aTHX_ foo, bar);     # the canonical Perl "API"
                                       # for all build flavors

This doesn't work so cleanly for varargs functions, though, as macros
imply that the number of arguments is known in advance.  Instead we
either need to spell them out fully, passing C<aTHX_> as the first
argument (the Perl core tends to do this with functions like
Perl_warner), or use a context-free version.

The context-free version of Perl_warner is called
Perl_warner_nocontext, and does not take the extra argument.  Instead
it does dTHX; to get the context from thread-local storage.  We
C<#define warner Perl_warner_nocontext> so that extensions get source
compatibility at the expense of performance.  (Passing an arg is
cheaper than grabbing it from thread-local storage.)

You can ignore [pad]THX[xo] when browsing the Perl headers/sources.
Those are strictly for use within the core.  Extensions and embedders
need only be aware of [pad]THX.

=head2 How do I use all this in extensions?

When Perl is built with PERL_IMPLICIT_CONTEXT, extensions that call
any functions in the Perl API will need to pass the initial context
argument somehow.  The kicker is that you will need to write it in
such a way that the extension still compiles when Perl hasn't been
built with PERL_IMPLICIT_CONTEXT enabled.

There are three ways to do this.  First, the easy but inefficient way,
which is also the default, in order to maintain source compatibility
with extensions: whenever XSUB.h is #included, it redefines the aTHX
and aTHX_ macros to call a function that will return the context.
Thus, something like:

        sv_setsv(asv, bsv);

in your extesion will translate to this when PERL_IMPLICIT_CONTEXT is
in effect:

        Perl_sv_setsv(Perl_get_context(), asv, bsv);

or to this otherwise:

        Perl_sv_setsv(asv, bsv);

You have to do nothing new in your extension to get this; since
the Perl library provides Perl_get_context(), it will all just
work.

The second, more efficient way is to use the following template for
your Foo.xs:

	#define PERL_NO_GET_CONTEXT	/* we want efficiency */
	#include "EXTERN.h"
	#include "perl.h"
	#include "XSUB.h"

        static my_private_function(int arg1, int arg2);

	static SV *
	my_private_function(int arg1, int arg2)
	{
	    dTHX;	/* fetch context */
	    ... call many Perl API functions ...
	}

        [... etc ...]

	MODULE = Foo		PACKAGE = Foo

	/* typical XSUB */

	void
	my_xsub(arg)
		int arg
	    CODE:
		my_private_function(arg, 10);

Note that the only two changes from the normal way of writing an
extension is the addition of a C<#define PERL_NO_GET_CONTEXT> before
including the Perl headers, followed by a C<dTHX;> declaration at
the start of every function that will call the Perl API.  (You'll
know which functions need this, because the C compiler will complain
that there's an undeclared identifier in those functions.)  No changes
are needed for the XSUBs themselves, because the XS() macro is
correctly defined to pass in the implicit context if needed.

The third, even more efficient way is to ape how it is done within
the Perl guts:


	#define PERL_NO_GET_CONTEXT	/* we want efficiency */
	#include "EXTERN.h"
	#include "perl.h"
	#include "XSUB.h"

        /* pTHX_ only needed for functions that call Perl API */
        static my_private_function(pTHX_ int arg1, int arg2);

	static SV *
	my_private_function(pTHX_ int arg1, int arg2)
	{
	    /* dTHX; not needed here, because THX is an argument */
	    ... call Perl API functions ...
	}

        [... etc ...]

	MODULE = Foo		PACKAGE = Foo

	/* typical XSUB */

	void
	my_xsub(arg)
		int arg
	    CODE:
		my_private_function(aTHX_ arg, 10);

This implementation never has to fetch the context using a function
call, since it is always passed as an extra argument.  Depending on
your needs for simplicity or efficiency, you may mix the previous
two approaches freely.

Never add a comma after C<pTHX> yourself--always use the form of the
macro with the underscore for functions that take explicit arguments,
or the form without the argument for functions with no explicit arguments.

=head2 Future Plans and PERL_IMPLICIT_SYS

Just as PERL_IMPLICIT_CONTEXT provides a way to bundle up everything
that the interpreter knows about itself and pass it around, so too are
there plans to allow the interpreter to bundle up everything it knows
about the environment it's running on.  This is enabled with the
PERL_IMPLICIT_SYS macro.  Currently it only works with PERL_OBJECT,
but is mostly there for MULTIPLICITY and USE_THREADS (see inside
iperlsys.h).

This allows the ability to provide an extra pointer (called the "host"
environment) for all the system calls.  This makes it possible for
all the system stuff to maintain their own state, broken down into
seven C structures.  These are thin wrappers around the usual system
calls (see win32/perllib.c) for the default perl executable, but for a
more ambitious host (like the one that would do fork() emulation) all
the extra work needed to pretend that different interpreters are
actually different "processes", would be done here.

The Perl engine/interpreter and the host are orthogonal entities.
There could be one or more interpreters in a process, and one or
more "hosts", with free association between them.
d1825 304
a2128 1
=head1 AUTHORS
d2130 1
a2130 3
Until May 1997, this document was maintained by Jeff Okamoto
<okamoto@@corp.hp.com>.  It is now maintained as part of Perl itself
by the Perl 5 Porters <perl5-porters@@perl.org>.
a2131 4
With lots of help and suggestions from Dean Roehrich, Malcolm Beattie,
Andreas Koenig, Paul Hudson, Ilya Zakharevich, Paul Marquess, Neil
Bowers, Matthew Green, Tim Bunce, Spider Boardman, Ulrich Pfeifer,
Stephen McCamant, and Gurusamy Sarathy.
d2133 1
a2133 1
API Listing originally by Dean Roehrich <roehrich@@cray.com>.
d2135 1
a2135 2
Modifications to autogenerate the API listing (L<perlapi>) by Benjamin
Stuhl.
d2137 1
a2137 1
=head1 SEE ALSO
d2139 1458
a3596 1
perlapi(1), perlintern(1), perlxs(1), perlembed(1)
@


1.1.1.4
log
@stock perl 5.6.1
@
text
@d7 4
a10 4
This document attempts to describe how to use the Perl API, as well as
containing some info on the basic workings of the Perl core. It is far
from complete and probably contains many errors. Please refer any
questions or comments to the author below.
d37 2
a38 2
values that can be loaded: an integer value (IV), a double (NV),
a string (PV), and another scalar (SV).
a78 4
STRLEN is an integer type (Size_t, usually defined as size_t in
config.h) guaranteed to be large enough to represent the size of 
any string that perl can handle.

a212 42
=head2 Offsets

Perl provides the function C<sv_chop> to efficiently remove characters
from the beginning of a string; you give it an SV and a pointer to
somewhere inside the the PV, and it discards everything before the
pointer. The efficiency comes by means of a little hack: instead of
actually removing the characters, C<sv_chop> sets the flag C<OOK>
(offset OK) to signal to other functions that the offset hack is in
effect, and it puts the number of bytes chopped off into the IV field
of the SV. It then moves the PV pointer (called C<SvPVX>) forward that
many bytes, and adjusts C<SvCUR> and C<SvLEN>. 

Hence, at this point, the start of the buffer that we allocated lives
at C<SvPVX(sv) - SvIV(sv)> in memory and the PV pointer is pointing
into the middle of this allocated storage.

This is best demonstrated by example:

  % ./perl -Ilib -MDevel::Peek -le '$a="12345"; $a=~s/.//; Dump($a)'
  SV = PVIV(0x8128450) at 0x81340f0
    REFCNT = 1
    FLAGS = (POK,OOK,pPOK)
    IV = 1  (OFFSET)
    PV = 0x8135781 ( "1" . ) "2345"\0
    CUR = 4
    LEN = 5

Here the number of bytes chopped off (1) is put into IV, and
C<Devel::Peek::Dump> helpfully reminds us that this is an offset. The
portion of the string between the "real" and the "fake" beginnings is
shown in parentheses, and the values of C<SvCUR> and C<SvLEN> reflect
the fake beginning, not the real one.

Something similar to the offset hack is perfomed on AVs to enable
efficient shifting and splicing off the beginning of the array; while
C<AvARRAY> points to the first element in the array that is visible from
Perl, C<AvALLOC> points to the real start of the C array. These are
usually the same, but a C<shift> operation can be carried out by
increasing C<AvARRAY> by one and decreasing C<AvFILL> and C<AvLEN>.
Again, the location of the real start of the C array only comes into
play when freeing the array. See C<av_shift> in F<av.c>.

a834 2
    D        vtbl_regdata        Regex match position data (@@+ and @@- vars)
    d        vtbl_regdatum       Regex match position data element
d1056 1
a1056 1
=over 4
d1081 2
a1082 14
I<pseudo-block>.  This is similar to C<sv_2mortal> in that it is also a
mechanism for doing a delayed C<SvREFCNT_dec>.  However, while C<sv_2mortal>
extends the lifetime of C<sv> until the beginning of the next statement,
C<SAVEFREESV> extends it until the end of the enclosing scope.  These
lifetimes can be wildly different.

Also compare C<SAVEMORTALIZESV>.

=item C<SAVEMORTALIZESV(SV *sv)>

Just like C<SAVEFREESV>, but mortalizes C<sv> at the end of the current
scope instead of decrementing its reference count.  This usually has the
effect of keeping C<sv> alive until the statement that called the currently
live scope has finished executing.
d1129 1
a1129 1
=over 4
a1217 1
However, see L</Putting a C value on Perl stack>
a1346 17
Because the target is reused, you must be careful when pushing multiple
values on the stack. The following code will not do what you think:

    XPUSHi(10);
    XPUSHi(20);

This translates as "set C<TARG> to 10, push a pointer to C<TARG> onto
the stack; set C<TARG> to 20, push a pointer to C<TARG> onto the stack".
At the end of the operation, the stack does not contain the values 10
and 20, but actually contains two pointers to C<TARG>, which we have set
to 20. If you need to push multiple different values, use C<XPUSHs>,
which bypasses C<TARG>.

On a related note, if you do use C<(X)PUSH[npi]>, then you're going to
need a C<dTARG> in your variable declarations so that the C<*PUSH*>
macros can make use of the local variable C<TARG>. 

a1463 25
Each of these nodes represents an op, a fundamental operation inside the
Perl core. The code which implements each operation can be found in the
F<pp*.c> files; the function which implements the op with type C<gvsv>
is C<pp_gvsv>, and so on. As the tree above shows, different ops have
different numbers of children: C<add> is a binary operator, as one would
expect, and so has two children. To accommodate the various different
numbers of children, there are various types of op data structure, and
they link together in different ways.

The simplest type of op structure is C<OP>: this has no children. Unary
operators, C<UNOP>s, have one child, and this is pointed to by the
C<op_first> field. Binary operators (C<BINOP>s) have not only an
C<op_first> field but also an C<op_last> field. The most complex type of
op is a C<LISTOP>, which has any number of children. In this case, the
first child is pointed to by C<op_first> and the last child by
C<op_last>. The children in between can be found by iteratively
following the C<op_sibling> pointer from the first child to the last.

There are also two other op types: a C<PMOP> holds a regular expression,
and has no children, and a C<LOOP> may or may not have children. If the
C<op_children> field is non-zero, it behaves like a C<LISTOP>. To
complicate matters, if a C<UNOP> is actually a C<null> op after
optimization (see L</Compile pass 2: context propagation>) it will still
have children in accordance with its former type.

d1466 2
a1467 2
The tree is created by the compiler while I<yacc> code feeds it
the constructions it recognizes. Since I<yacc> works bottom-up, so does
d1472 1
a1472 1
so-called "check routines".  The correspondence between node names
d1524 1
a1524 29
=head1 Examining internal data structures with the C<dump> functions

To aid debugging, the source file F<dump.c> contains a number of
functions which produce formatted output of internal data structures.

The most commonly used of these functions is C<Perl_sv_dump>; it's used
for dumping SVs, AVs, HVs, and CVs. The C<Devel::Peek> module calls
C<sv_dump> to produce debugging output from Perl-space, so users of that
module should already be familiar with its format. 

C<Perl_op_dump> can be used to dump an C<OP> structure or any of its
derivatives, and produces output similiar to C<perl -Dx>; in fact,
C<Perl_dump_eval> will dump the main root of the code being evaluated,
exactly like C<-Dx>.

Other useful functions are C<Perl_dump_sub>, which turns a C<GV> into an
op tree, C<Perl_dump_packsubs> which calls C<Perl_dump_sub> on all the
subroutines in a package like so: (Thankfully, these are all xsubs, so
there is no op tree)

    (gdb) print Perl_dump_packsubs(PL_defstash)

    SUB attributes::bootstrap = (xsub 0x811fedc 0)

    SUB UNIVERSAL::can = (xsub 0x811f50c 0)

    SUB UNIVERSAL::isa = (xsub 0x811f304 0)

    SUB UNIVERSAL::VERSION = (xsub 0x811f7ac 0)
d1526 2
a1527 6
    SUB DynaLoader::boot_DynaLoader = (xsub 0x805b188 0)

and C<Perl_dump_all>, which dumps all the subroutines in the stash and
the op tree of the main root.

=head1 How multiple interpreters and concurrency are supported
d1543 2
a1544 2
data structure under USE_THREADS, and the (now deprecated) PERL_OBJECT
build has a C++ class to maintain interpreter state.  In all three cases,
d1560 11
a1570 5
part of the API. (See L</Internal Functions>.) The easiest way to be B<sure> a 
function is part of the API is to find its entry in L<perlapi>.  
If it exists in L<perlapi>, it's part of the API.  If it doesn't, and you 
think it should be (i.e., you need it for your extension), send mail via 
L<perlbug> explaining why you think it should be.
d1593 1
a1593 2
or 'd' for B<d>eclaration, so we have C<pTHX>, C<aTHX> and C<dTHX>, and
their variants.
d1595 2
a1596 2
When Perl is built without options that set PERL_IMPLICIT_CONTEXT, there is no
first argument containing the interpreter's context.  The trailing underscore
d1605 1
a1605 1
is normally hidden via macros.  Consider C<sv_setsv>.  It expands into
d1609 1
a1609 1
      define sv_setsv(a,b)      Perl_sv_setsv(aTHX_ a, b)
d1612 1
a1612 1
      define sv_setsv           Perl_sv_setsv
d1632 2
a1633 2
MULTIPLICITY/USE_THREADS with PERL_IMPLICIT_CONTEXT in both core
and extensions, it will become:
a1654 8
=head2 So what happened to dTHR?

C<dTHR> was introduced in perl 5.005 to support the older thread model.
The older thread model now uses the C<THX> mechanism to pass context
pointers around, so C<dTHR> is not useful any more.  Perl 5.6.0 and
later still have it for backward source compatibility, but it is defined
to be a no-op.

d1671 1
a1671 1
in your extension will translate to this when PERL_IMPLICIT_CONTEXT is
d1687 4
a1690 4
        #define PERL_NO_GET_CONTEXT     /* we want efficiency */
        #include "EXTERN.h"
        #include "perl.h"
        #include "XSUB.h"
d1694 6
a1699 6
        static SV *
        my_private_function(int arg1, int arg2)
        {
            dTHX;       /* fetch context */
            ... call many Perl API functions ...
        }
d1703 1
a1703 1
        MODULE = Foo            PACKAGE = Foo
d1705 1
a1705 1
        /* typical XSUB */
d1707 5
a1711 5
        void
        my_xsub(arg)
                int arg
            CODE:
                my_private_function(arg, 10);
d1726 4
a1729 4
        #define PERL_NO_GET_CONTEXT     /* we want efficiency */
        #include "EXTERN.h"
        #include "perl.h"
        #include "XSUB.h"
d1734 6
a1739 6
        static SV *
        my_private_function(pTHX_ int arg1, int arg2)
        {
            /* dTHX; not needed here, because THX is an argument */
            ... call Perl API functions ...
        }
d1743 1
a1743 1
        MODULE = Foo            PACKAGE = Foo
d1745 1
a1745 1
        /* typical XSUB */
d1747 5
a1751 5
        void
        my_xsub(arg)
                int arg
            CODE:
                my_private_function(aTHX_ arg, 10);
a1761 20
=head2 Should I do anything special if I call perl from multiple threads?

If you create interpreters in one thread and then proceed to call them in
another, you need to make sure perl's own Thread Local Storage (TLS) slot is
initialized correctly in each of those threads.

The C<perl_alloc> and C<perl_clone> API functions will automatically set
the TLS slot to the interpreter they created, so that there is no need to do
anything special if the interpreter is always accessed in the same thread that
created it, and that thread did not create or call any other interpreters
afterwards.  If that is not the case, you have to set the TLS slot of the
thread before calling any functions in the Perl API on that particular
interpreter.  This is done by calling the C<PERL_SET_CONTEXT> macro in that
thread as the first thing you do:

	/* do this before doing anything else with some_perl */
	PERL_SET_CONTEXT(some_perl);

	... other Perl API calls on some_perl go here ...

d1768 3
a1770 2
PERL_IMPLICIT_SYS macro.  Currently it only works with PERL_OBJECT
and USE_THREADS on Windows (see inside iperlsys.h).
a1783 358

=head1 Internal Functions

All of Perl's internal functions which will be exposed to the outside
world are be prefixed by C<Perl_> so that they will not conflict with XS
functions or functions used in a program in which Perl is embedded.
Similarly, all global variables begin with C<PL_>. (By convention,
static functions start with C<S_>)

Inside the Perl core, you can get at the functions either with or
without the C<Perl_> prefix, thanks to a bunch of defines that live in
F<embed.h>. This header file is generated automatically from
F<embed.pl>. F<embed.pl> also creates the prototyping header files for
the internal functions, generates the documentation and a lot of other
bits and pieces. It's important that when you add a new function to the
core or change an existing one, you change the data in the table at the
end of F<embed.pl> as well. Here's a sample entry from that table:

    Apd |SV**   |av_fetch   |AV* ar|I32 key|I32 lval

The second column is the return type, the third column the name. Columns
after that are the arguments. The first column is a set of flags:

=over 3

=item A

This function is a part of the public API.

=item p

This function has a C<Perl_> prefix; ie, it is defined as C<Perl_av_fetch>

=item d

This function has documentation using the C<apidoc> feature which we'll
look at in a second.

=back

Other available flags are:

=over 3

=item s

This is a static function and is defined as C<S_whatever>, and usually
called within the sources as C<whatever(...)>.

=item n

This does not use C<aTHX_> and C<pTHX> to pass interpreter context. (See
L<perlguts/Background and PERL_IMPLICIT_CONTEXT>.)

=item r

This function never returns; C<croak>, C<exit> and friends.

=item f

This function takes a variable number of arguments, C<printf> style.
The argument list should end with C<...>, like this:

    Afprd   |void   |croak          |const char* pat|...

=item M

This function is part of the experimental development API, and may change 
or disappear without notice.

=item o

This function should not have a compatibility macro to define, say,
C<Perl_parse> to C<parse>. It must be called as C<Perl_parse>.

=item j

This function is not a member of C<CPerlObj>. If you don't know
what this means, don't use it.

=item x

This function isn't exported out of the Perl core.

=back

If you edit F<embed.pl>, you will need to run C<make regen_headers> to
force a rebuild of F<embed.h> and other auto-generated files.

=head2 Formatted Printing of IVs, UVs, and NVs

If you are printing IVs, UVs, or NVS instead of the stdio(3) style
formatting codes like C<%d>, C<%ld>, C<%f>, you should use the
following macros for portability

        IVdf            IV in decimal
        UVuf            UV in decimal
        UVof            UV in octal
        UVxf            UV in hexadecimal
        NVef            NV %e-like
        NVff            NV %f-like
        NVgf            NV %g-like

These will take care of 64-bit integers and long doubles.
For example:

        printf("IV is %"IVdf"\n", iv);

The IVdf will expand to whatever is the correct format for the IVs.

If you are printing addresses of pointers, use UVxf combined
with PTR2UV(), do not use %lx or %p.

=head2 Pointer-To-Integer and Integer-To-Pointer

Because pointer size does not necessarily equal integer size,
use the follow macros to do it right.

        PTR2UV(pointer)
        PTR2IV(pointer)
        PTR2NV(pointer)
        INT2PTR(pointertotype, integer)

For example:

        IV  iv = ...;
        SV *sv = INT2PTR(SV*, iv);

and

        AV *av = ...;
        UV  uv = PTR2UV(av);

=head2 Source Documentation

There's an effort going on to document the internal functions and
automatically produce reference manuals from them - L<perlapi> is one
such manual which details all the functions which are available to XS
writers. L<perlintern> is the autogenerated manual for the functions
which are not part of the API and are supposedly for internal use only.

Source documentation is created by putting POD comments into the C
source, like this:

 /*
 =for apidoc sv_setiv

 Copies an integer into the given SV.  Does not handle 'set' magic.  See
 C<sv_setiv_mg>.

 =cut
 */

Please try and supply some documentation if you add functions to the
Perl core.

=head1 Unicode Support

Perl 5.6.0 introduced Unicode support. It's important for porters and XS
writers to understand this support and make sure that the code they
write does not corrupt Unicode data.

=head2 What B<is> Unicode, anyway?

In the olden, less enlightened times, we all used to use ASCII. Most of
us did, anyway. The big problem with ASCII is that it's American. Well,
no, that's not actually the problem; the problem is that it's not
particularly useful for people who don't use the Roman alphabet. What
used to happen was that particular languages would stick their own
alphabet in the upper range of the sequence, between 128 and 255. Of
course, we then ended up with plenty of variants that weren't quite
ASCII, and the whole point of it being a standard was lost.

Worse still, if you've got a language like Chinese or
Japanese that has hundreds or thousands of characters, then you really
can't fit them into a mere 256, so they had to forget about ASCII
altogether, and build their own systems using pairs of numbers to refer
to one character.

To fix this, some people formed Unicode, Inc. and
produced a new character set containing all the characters you can
possibly think of and more. There are several ways of representing these
characters, and the one Perl uses is called UTF8. UTF8 uses
a variable number of bytes to represent a character, instead of just
one. You can learn more about Unicode at http://www.unicode.org/

=head2 How can I recognise a UTF8 string?

You can't. This is because UTF8 data is stored in bytes just like
non-UTF8 data. The Unicode character 200, (C<0xC8> for you hex types)
capital E with a grave accent, is represented by the two bytes
C<v196.172>. Unfortunately, the non-Unicode string C<chr(196).chr(172)>
has that byte sequence as well. So you can't tell just by looking - this
is what makes Unicode input an interesting problem.

The API function C<is_utf8_string> can help; it'll tell you if a string
contains only valid UTF8 characters. However, it can't do the work for
you. On a character-by-character basis, C<is_utf8_char> will tell you
whether the current character in a string is valid UTF8.

=head2 How does UTF8 represent Unicode characters?

As mentioned above, UTF8 uses a variable number of bytes to store a
character. Characters with values 1...128 are stored in one byte, just
like good ol' ASCII. Character 129 is stored as C<v194.129>; this
continues up to character 191, which is C<v194.191>. Now we've run out of
bits (191 is binary C<10111111>) so we move on; 192 is C<v195.128>. And
so it goes on, moving to three bytes at character 2048.

Assuming you know you're dealing with a UTF8 string, you can find out
how long the first character in it is with the C<UTF8SKIP> macro:

    char *utf = "\305\233\340\240\201";
    I32 len;

    len = UTF8SKIP(utf); /* len is 2 here */
    utf += len;
    len = UTF8SKIP(utf); /* len is 3 here */

Another way to skip over characters in a UTF8 string is to use
C<utf8_hop>, which takes a string and a number of characters to skip
over. You're on your own about bounds checking, though, so don't use it
lightly.

All bytes in a multi-byte UTF8 character will have the high bit set, so
you can test if you need to do something special with this character
like this:

    UV uv;

    if (utf & 0x80)
        /* Must treat this as UTF8 */
        uv = utf8_to_uv(utf);
    else
        /* OK to treat this character as a byte */
        uv = *utf;

You can also see in that example that we use C<utf8_to_uv> to get the
value of the character; the inverse function C<uv_to_utf8> is available
for putting a UV into UTF8:

    if (uv > 0x80)
        /* Must treat this as UTF8 */
        utf8 = uv_to_utf8(utf8, uv);
    else
        /* OK to treat this character as a byte */
        *utf8++ = uv;

You B<must> convert characters to UVs using the above functions if
you're ever in a situation where you have to match UTF8 and non-UTF8
characters. You may not skip over UTF8 characters in this case. If you
do this, you'll lose the ability to match hi-bit non-UTF8 characters;
for instance, if your UTF8 string contains C<v196.172>, and you skip
that character, you can never match a C<chr(200)> in a non-UTF8 string.
So don't do that!

=head2 How does Perl store UTF8 strings?

Currently, Perl deals with Unicode strings and non-Unicode strings
slightly differently. If a string has been identified as being UTF-8
encoded, Perl will set a flag in the SV, C<SVf_UTF8>. You can check and
manipulate this flag with the following macros:

    SvUTF8(sv)
    SvUTF8_on(sv)
    SvUTF8_off(sv)

This flag has an important effect on Perl's treatment of the string: if
Unicode data is not properly distinguished, regular expressions,
C<length>, C<substr> and other string handling operations will have
undesirable results.

The problem comes when you have, for instance, a string that isn't
flagged is UTF8, and contains a byte sequence that could be UTF8 -
especially when combining non-UTF8 and UTF8 strings.

Never forget that the C<SVf_UTF8> flag is separate to the PV value; you
need be sure you don't accidentally knock it off while you're
manipulating SVs. More specifically, you cannot expect to do this:

    SV *sv;
    SV *nsv;
    STRLEN len;
    char *p;

    p = SvPV(sv, len);
    frobnicate(p);
    nsv = newSVpvn(p, len);

The C<char*> string does not tell you the whole story, and you can't
copy or reconstruct an SV just by copying the string value. Check if the
old SV has the UTF8 flag set, and act accordingly:

    p = SvPV(sv, len);
    frobnicate(p);
    nsv = newSVpvn(p, len);
    if (SvUTF8(sv))
        SvUTF8_on(nsv);

In fact, your C<frobnicate> function should be made aware of whether or
not it's dealing with UTF8 data, so that it can handle the string
appropriately.

=head2 How do I convert a string to UTF8?

If you're mixing UTF8 and non-UTF8 strings, you might find it necessary
to upgrade one of the strings to UTF8. If you've got an SV, the easiest
way to do this is:

    sv_utf8_upgrade(sv);

However, you must not do this, for example:

    if (!SvUTF8(left))
        sv_utf8_upgrade(left);

If you do this in a binary operator, you will actually change one of the
strings that came into the operator, and, while it shouldn't be noticeable
by the end user, it can cause problems.

Instead, C<bytes_to_utf8> will give you a UTF8-encoded B<copy> of its
string argument. This is useful for having the data available for
comparisons and so on, without harming the original SV. There's also
C<utf8_to_bytes> to go the other way, but naturally, this will fail if
the string contains any characters above 255 that can't be represented
in a single byte.

=head2 Is there anything else I need to know?

Not really. Just remember these things:

=over 3

=item *

There's no way to tell if a string is UTF8 or not. You can tell if an SV
is UTF8 by looking at is C<SvUTF8> flag. Don't forget to set the flag if
something should be UTF8. Treat the flag as part of the PV, even though
it's not - if you pass on the PV to somewhere, pass on the flag too.

=item *

If a string is UTF8, B<always> use C<utf8_to_uv> to get at the value,
unless C<!(*s & 0x80)> in which case you can use C<*s>.

=item *

When writing to a UTF8 string, B<always> use C<uv_to_utf8>, unless
C<uv < 0x80> in which case you can use C<*s = uv>.

=item *

Mixing UTF8 and non-UTF8 strings is tricky. Use C<bytes_to_utf8> to get
a new string which is UTF8 encoded. There are tricks you can use to
delay deciding whether you need to use a UTF8 string until you get to a
high character - C<HALF_UPGRADE> is one of those.

=back
@


1.1.1.5
log
@stock perl 5.8.0 from CPAN
@
text
@d32 1
a32 2
as well.)  They will usually be exactly 32 and 16 bits long, but on Crays
they will both be 64 bits.
d36 3
a38 3
An SV can be created and loaded with one command.  There are five types of
values that can be loaded: an integer value (IV), an unsigned integer
value (UV), a double (NV), a string (PV), and another scalar (SV).
d40 1
a40 1
The seven routines are:
a42 1
    SV*  newSVuv(UV);
d49 1
a49 9
If you require more complex initialisation you can create an empty SV with
newSV(len).  If C<len> is 0 an empty SV of type NULL is returned, else an
SV of type PV is returned with len + 1 (for the NUL) bytes of storage
allocated, accessible via SvPVX.  In both cases the SV has value undef.

    SV*  newSV(0);   /* no storage allocated  */
    SV*  newSV(10);  /* 10 (+1) bytes of uninitialised storage allocated  */

To change the value of an *already-existing* SV, there are eight routines:
d57 1
a57 1
    void  sv_vsetpvfn(SV*, const char*, STRLEN, va_list *, SV **, I32, bool *);
d70 1
a70 1
C<sv_vsetpvfn> is an analogue of C<vsprintf>, but it allows you to specify
d80 1
a80 1
config.h) guaranteed to be large enough to represent the size of
d165 1
a165 1
    void  sv_vcatpvfn(SV*, const char*, STRLEN, va_list *, SV **, I32, bool);
d221 1
a221 1
somewhere inside the PV, and it discards everything before the
d227 1
a227 1
many bytes, and adjusts C<SvCUR> and C<SvLEN>.
d250 1
a250 1
Something similar to the offset hack is performed on AVs to enable
a276 8
The are various ways in which the private and public flags may differ.
For example, a tied SV may have a valid underlying value in the IV slot
(so SvIOKp is true), but the data should be accessed via the FETCH
routine rather than directly, so SvIOK is false. Another is when
numeric conversion has occured and precision has been lost: only the
private flag is set on 'lossy' values. So when an NV is converted to an
IV with loss, SvIOKp, SvNOKp and SvNOK will be set, while SvIOK wont be.

d400 1
a400 1
            /* Return an SV pointer to the value of the HE
d542 1
a542 1
Copies integer, unsigned integer or double into an SV whose reference is C<rv>.  SV is blessed
a545 1
	SV* sv_setref_uv(SV* rv, const char* classname, UV uv);
d573 1
a573 1
To check if you've got an object derived from a specific class you have
d593 4
a596 19
=over

=item GV_ADDMULTI

Marks the variable as multiply defined, thus preventing the:

  Name <varname> used only once: possible typo

warning.

=item GV_ADDWARN

Issues the warning:

  Had to create <varname> unexpectedly

if the variable did not exist before the function was called.

=back
d603 1
a603 1
Perl uses a reference count-driven garbage collection mechanism. SVs,
d652 3
a654 5
"Mortal" SVs are mainly used for SVs that are placed on perl's stack.
For example an SV which is created just to pass a number to a called sub
is made mortal to have it cleaned up automatically when stack is popped.
Similarly results returned by XSUBs (which go in the stack) are often
made mortal.
d662 1
a662 1
The first call creates a mortal SV (with no value), the second converts an existing
a664 19
Because C<sv_newmortal> gives the new SV no value,it must normally be given one
via C<sv_setpv>, C<sv_setiv>, etc. :

    SV *tmp = sv_newmortal();
    sv_setiv(tmp, an_integer);

As that is multiple C statements it is quite common so see this idiom instead:

    SV *tmp = sv_2mortal(newSViv(an_integer));


You should be careful about creating mortal variables.  Strange things
can happen if you make the same value mortal within multiple contexts,
or if you make a variable mortal multiple times. Thinking of "Mortalization"
as deferred C<SvREFCNT_dec> should help to minimize such problems.
For example if you are passing an SV which you I<know> has high enough REFCNT
to survive its use on the stack you need not do any mortalization.
If you are not sure then doing an C<SvREFCNT_inc> and C<sv_2mortal>, or
making a C<sv_mortalcopy> is safer.
d798 5
a802 5
convert C<sv> to type C<SVt_PVMG>. Perl then continues by adding new magic
to the beginning of the linked list of magical features.  Any prior entry
of the same type of magic is deleted.  Note that this can be overridden,
and multiple instances of the same type of magic can be associated with an
SV.
d806 1
a806 1
C<mg_len> field and if C<name> is non-null and C<namlen> E<gt>= 0 a malloc'd
d812 1
a812 5
stored in the C<mg_type> field. The value of C<how> should be chosen
from the set of macros C<PERL_MAGIC_foo> found perl.h. Note that before
these macros were added, Perl internals used to directly use character
literals, so you may occasionally come across old code or documentation
referring to 'U' magic rather than C<PERL_MAGIC_uvar> for example.
d817 2
a818 2
the C<how> argument is C<PERL_MAGIC_arylen>, or if it is a NULL pointer,
then C<obj> is merely stored, without the reference count being incremented.
d835 1
a835 1
The C<mg_virtual> field in the C<MAGIC> structure is a pointer to an
d855 1
a855 1
    svt_get             Do something before the value of the SV is retrieved.
d862 1
a862 1
to an C<mg_type> of C<PERL_MAGIC_sv>) contains:
d866 5
a870 5
Thus, when an SV is determined to be magical and of type C<PERL_MAGIC_sv>,
if a get operation is being performed, the routine C<magic_get> is
called.  All the various routines for the various magical types begin
with C<magic_>.  NOTE: the magic routines are not considered part of
the Perl API, and may not be exported by the Perl library.
d874 34
a907 42
    mg_type
    (old-style char and macro)   MGVTBL         Type of magic
    --------------------------   ------         ----------------------------
    \0 PERL_MAGIC_sv             vtbl_sv        Special scalar variable
    A  PERL_MAGIC_overload       vtbl_amagic    %OVERLOAD hash
    a  PERL_MAGIC_overload_elem  vtbl_amagicelem %OVERLOAD hash element
    c  PERL_MAGIC_overload_table (none)         Holds overload table (AMT)
						on stash
    B  PERL_MAGIC_bm             vtbl_bm        Boyer-Moore (fast string search)
    D  PERL_MAGIC_regdata        vtbl_regdata   Regex match position data
						(@@+ and @@- vars)
    d  PERL_MAGIC_regdatum       vtbl_regdatum  Regex match position data
						element
    E  PERL_MAGIC_env            vtbl_env       %ENV hash
    e  PERL_MAGIC_envelem        vtbl_envelem   %ENV hash element
    f  PERL_MAGIC_fm             vtbl_fm        Formline ('compiled' format)
    g  PERL_MAGIC_regex_global   vtbl_mglob     m//g target / study()ed string
    I  PERL_MAGIC_isa            vtbl_isa       @@ISA array
    i  PERL_MAGIC_isaelem        vtbl_isaelem   @@ISA array element
    k  PERL_MAGIC_nkeys          vtbl_nkeys     scalar(keys()) lvalue
    L  PERL_MAGIC_dbfile         (none)         Debugger %_<filename
    l  PERL_MAGIC_dbline         vtbl_dbline    Debugger %_<filename element
    m  PERL_MAGIC_mutex          vtbl_mutex     ???
    o  PERL_MAGIC_collxfrm       vtbl_collxfrm  Locale collate transformation
    P  PERL_MAGIC_tied           vtbl_pack      Tied array or hash
    p  PERL_MAGIC_tiedelem       vtbl_packelem  Tied array or hash element
    q  PERL_MAGIC_tiedscalar     vtbl_packelem  Tied scalar or handle
    r  PERL_MAGIC_qr             vtbl_qr        precompiled qr// regex
    S  PERL_MAGIC_sig            vtbl_sig       %SIG hash
    s  PERL_MAGIC_sigelem        vtbl_sigelem   %SIG hash element
    t  PERL_MAGIC_taint          vtbl_taint     Taintedness
    U  PERL_MAGIC_uvar           vtbl_uvar      Available for use by extensions
    v  PERL_MAGIC_vec            vtbl_vec       vec() lvalue
    x  PERL_MAGIC_substr         vtbl_substr    substr() lvalue
    y  PERL_MAGIC_defelem        vtbl_defelem   Shadow "foreach" iterator
						variable / smart parameter
						vivification
    *  PERL_MAGIC_glob           vtbl_glob      GV (typeglob)
    #  PERL_MAGIC_arylen         vtbl_arylen    Array length ($#ary)
    .  PERL_MAGIC_pos            vtbl_pos       pos() lvalue
    <  PERL_MAGIC_backref        vtbl_backref   ???
    ~  PERL_MAGIC_ext            (none)         Available for use by extensions
d912 1
a912 2
that composite type. Some internals code makes use of this case
relationship.
d914 6
a919 6
The C<PERL_MAGIC_ext> and C<PERL_MAGIC_uvar> magic types are defined
specifically for use by extensions and will not be used by perl itself.
Extensions can use C<PERL_MAGIC_ext> magic to 'attach' private information
to variables (typically objects).  This is especially useful because
there is no way for normal perl code to corrupt this private information
(unlike using extra elements of a hash object).
d921 2
a922 2
Similarly, C<PERL_MAGIC_uvar> magic can be used much like tie() to call a
C function any time a scalar's value is used or changed.  The C<MAGIC>'s
d926 2
a927 2
        I32 (*uf_val)(pTHX_ IV, SV*);
        I32 (*uf_set)(pTHX_ IV, SV*);
d932 2
a933 2
function will be called with C<uf_index> as the first arg and a pointer to
the SV as the second.  A simple example of how to add C<PERL_MAGIC_uvar>
d946 1
a946 1
        sv_magic(sv, 0, PERL_MAGIC_uvar, (char*)&uf, sizeof(uf));
d948 6
a953 6
Note that because multiple extensions may be using C<PERL_MAGIC_ext>
or C<PERL_MAGIC_uvar> magic, it is important for extensions to take
extra care to avoid conflict.  Typically only using the magic on
objects blessed into the same class as the extension is sufficient.
For C<PERL_MAGIC_ext> magic, it may also be appropriate to add an I32
'signature' at the top of the private data area and check that.
d983 1
a983 2
Tied hashes and arrays are magical beasts of the C<PERL_MAGIC_tied>
magic type.
d993 1
a993 1
the various GET, SET, etc methods.  To perform the equivalent of the perl
d1014 1
a1014 1
        hv_magic(hash, (GV*)tie, PERL_MAGIC_tied);
d1087 1
a1087 1
the block: C<goto>, C<return>, C<die>/C<eval>, etc. It is a little bit
d1186 1
a1186 1
or Perlish C<GV *>s).  Where the above macros take C<int>, a similar
d1214 1
a1214 1
Similar to C<save_scalar>, but will reinstate an C<SV *>.
d1255 2
a1256 2
Now that there is room on the stack, values can be pushed on it using C<PUSHs>
macro. The values pushed will often need to be "mortal" (See L</Reference Counts and Mortality>).
d1258 4
a1261 3
    PUSHs(sv_2mortal(newSViv(an_integer)))
    PUSHs(sv_2mortal(newSVpv("Some String",0)))
    PUSHs(sv_2mortal(newSVnv(3.141592)))
d1269 1
a1269 1
to use the macro:
d1271 3
d1276 1
a1276 1
This macro automatically adjust the stack for you, if needed.  Thus, you
d1278 1
a1278 4

Despite their suggestions in earlier versions of this document the macros
C<PUSHi>, C<PUSHn> and C<PUSHp> are I<not> suited to XSUBs which return
multiple results, see L</Putting a C value on Perl stack>.
d1302 1
a1302 1
These routines used to be called C<perl_call_sv>, etc., before Perl v5.6.0,
d1423 1
a1423 1
macros can make use of the local variable C<TARG>.
d1450 1
a1450 1
The answer is B<recursion>, and maybe B<threads>. Both
a1626 17
=head2 Pluggable runops

The compile tree is executed in a runops function.  There are two runops
functions in F<run.c>.  C<Perl_runops_debug> is used with DEBUGGING and
C<Perl_runops_standard> is used otherwise.  For fine control over the
execution of the compile tree it is possible to provide your own runops
function.

It's probably best to copy one of the existing runops functions and
change it to suit your needs.  Then, in the BOOT section of your XS
file, add the line:

  PL_runops = my_runops;

This function should be as efficient as possible to keep your programs
running as fast as possible.

d1635 1
a1635 1
module should already be familiar with its format.
d1638 1
a1638 1
derivatives, and produces output similar to C<perl -Dx>; in fact,
d1670 10
a1679 8
interpreters, with one interpreter represented either as a C structure,
or inside a thread-specific structure.  These structures contain all
the context, the state of that interpreter.

Two macros control the major Perl build flavors: MULTIPLICITY and
USE_5005THREADS.  The MULTIPLICITY build has a C structure
that packages all the interpreter state, and there is a similar thread-specific
data structure under USE_5005THREADS.  In both cases,
d1685 1
a1685 1
either subroutines taking some kind of structure as the first
d1687 1
a1687 1
enable these two very different ways of building the interpreter,
d1692 1
a1692 1
which will be private.  All functions whose names begin C<S_> are private
d1695 4
a1698 4
part of the API. (See L</Internal Functions>.) The easiest way to be B<sure> a
function is part of the API is to find its entry in L<perlapi>.
If it exists in L<perlapi>, it's part of the API.  If it doesn't, and you
think it should be (i.e., you need it for your extension), send mail via
d1710 1
a1710 2
STATIC becomes "static" in C, and may be #define'd to nothing in some
configurations in future.
d1752 16
d1781 1
a1781 1
You can ignore [pad]THXx when browsing the Perl headers/sources.
d1926 2
a1927 2
PERL_IMPLICIT_SYS macro.  Currently it only works with USE_ITHREADS
and USE_5005THREADS on Windows (see inside iperlsys.h).
d2008 1
a2008 1
This function is part of the experimental development API, and may change
a2299 43
=head1 Custom Operators

Custom operator support is a new experimental feature that allows you to
define your own ops. This is primarily to allow the building of
interpreters for other languages in the Perl core, but it also allows
optimizations through the creation of "macro-ops" (ops which perform the
functions of multiple ops which are usually executed together, such as
C<gvsv, gvsv, add>.) 

This feature is implemented as a new op type, C<OP_CUSTOM>. The Perl
core does not "know" anything special about this op type, and so it will
not be involved in any optimizations. This also means that you can
define your custom ops to be any op structure - unary, binary, list and
so on - you like.

It's important to know what custom operators won't do for you. They
won't let you add new syntax to Perl, directly. They won't even let you
add new keywords, directly. In fact, they won't change the way Perl
compiles a program at all. You have to do those changes yourself, after
Perl has compiled the program. You do this either by manipulating the op
tree using a C<CHECK> block and the C<B::Generate> module, or by adding
a custom peephole optimizer with the C<optimize> module.

When you do this, you replace ordinary Perl ops with custom ops by
creating ops with the type C<OP_CUSTOM> and the C<pp_addr> of your own
PP function. This should be defined in XS code, and should look like
the PP ops in C<pp_*.c>. You are responsible for ensuring that your op
takes the appropriate number of values from the stack, and you are
responsible for adding stack marks if necessary.

You should also "register" your op with the Perl interpreter so that it
can produce sensible error and warning messages. Since it is possible to
have multiple custom ops within the one "logical" op type C<OP_CUSTOM>,
Perl uses the value of C<< o->op_ppaddr >> as a key into the
C<PL_custom_op_descs> and C<PL_custom_op_names> hashes. This means you
need to enter a name and description for your op at the appropriate
place in the C<PL_custom_op_names> and C<PL_custom_op_descs> hashes.

Forthcoming versions of C<B::Generate> (version 1.0 and above) should
directly support the creation of custom ops by name; C<Opcodes::Custom> 
will provide functions which make it trivial to "register" custom ops to
the Perl interpreter.

d2303 2
a2304 2
E<lt>okamoto@@corp.hp.comE<gt>.  It is now maintained as part of Perl
itself by the Perl 5 Porters E<lt>perl5-porters@@perl.orgE<gt>.
d2311 1
a2311 1
API Listing originally by Dean Roehrich E<lt>roehrich@@cray.comE<gt>.
@


1.1.1.6
log
@perl 5.8.2 from CPAN
@
text
@d8 1
a8 1
to provide some info on the basic workings of the Perl core. It is far
d46 2
a47 2
    SV*  newSVpv(const char*, STRLEN);
    SV*  newSVpvn(const char*, STRLEN);
d51 4
a54 9
C<STRLEN> is an integer type (Size_t, usually defined as size_t in
F<config.h>) guaranteed to be large enough to represent the size of
any string that perl can handle.

In the unlikely case of a SV requiring more complex initialisation, you
can create an empty SV with newSV(len).  If C<len> is 0 an empty SV of
type NULL is returned, else an SV of type PV is returned with len + 1 (for
the NUL) bytes of storage allocated, accessible via SvPVX.  In both cases
the SV has value undef.
d56 2
a57 2
    SV *sv = newSV(0);   /* no storage allocated  */
    SV *sv = newSV(10);  /* 10 (+1) bytes of uninitialised storage allocated  */
d59 1
a59 1
To change the value of an I<already-existing> SV, there are eight routines:
d65 1
a65 1
    void  sv_setpvn(SV*, const char*, STRLEN)
d89 4
d202 6
a207 8
The scalar C<undef> value is stored in an SV instance called C<PL_sv_undef>.
Its address can be used whenever an C<SV*> is needed.
However, you have to be careful when using C<&PL_sv_undef> as a value in AVs
or HVs (see L<AVs, HVs and undefined values>).

There are also the two values C<PL_sv_yes> and C<PL_sv_no>, which contain
boolean TRUE and FALSE values, respectively.  Like C<PL_sv_undef>, their
addresses can be used whenever an C<SV*> is needed.
d221 2
a222 2
bus error, or just weird results.  Change the zero to C<&PL_sv_undef> in the
first line and all will be well.
a490 52
=head2 AVs, HVs and undefined values

Sometimes you have to store undefined values in AVs or HVs. Although
this may be a rare case, it can be tricky. That's because you're
used to using C<&PL_sv_undef> if you need an undefined SV.

For example, intuition tells you that this XS code:

    AV *av = newAV();
    av_store( av, 0, &PL_sv_undef );

is equivalent to this Perl code:

    my @@av;
    $av[0] = undef;

Unfortunately, this isn't true. AVs use C<&PL_sv_undef> as a marker
for indicating that an array element has not yet been initialized.
Thus, C<exists $av[0]> would be true for the above Perl code, but
false for the array generated by the XS code.

Other problems can occur when storing C<&PL_sv_undef> in HVs:

    hv_store( hv, "key", 3, &PL_sv_undef, 0 );

This will indeed make the value C<undef>, but if you try to modify
the value of C<key>, you'll get the following error:

    Modification of non-creatable hash value attempted

In perl 5.8.0, C<&PL_sv_undef> was also used to mark placeholders
in restricted hashes. This caused such hash entries not to appear
when iterating over the hash or when checking for the keys
with the C<hv_exists> function.

You can run into similar problems when you store C<&PL_sv_true> or
C<&PL_sv_false> into AVs or HVs. Trying to modify such elements
will give you the following error:

    Modification of a read-only value attempted

To make a long story short, you can use the special variables
C<&PL_sv_undef>, C<&PL_sv_true> and C<&PL_sv_false> with AVs and
HVs, but you have to make sure you know what you're doing.

Generally, if you want to store an undefined value in an AV
or HV, you should not use C<&PL_sv_undef>, but rather create a
new undefined value using the C<newSV> function, for example:

    av_store( av, 42, newSV(0) );
    hv_store( hv, "foo", 3, newSV(0), 0 );

d539 1
a539 1
References are also used to support object-oriented programming.  In perl's
d548 2
a549 2
The C<sv> argument must be a reference value.  The C<stash> argument
specifies which class the reference will belong to.  See
d688 3
a690 3
is made mortal to have it cleaned up automatically when it's popped off
the stack. Similarly, results returned by XSUBs (which are pushed on the
stack) are often made mortal.
d727 2
a728 2
A B<stash> is a hash that contains all variables that are defined
within a package.  Each key of the stash is a symbol
d741 5
a745 5
There is a single stash called C<PL_defstash> that holds the items that exist
in the C<main> package.  To get at the items in other packages, append the
string "::" to the package name.  The items in the C<Foo> package are in
the stash C<Foo::> in PL_defstash.  The items in the C<Bar::Baz> package are
in the stash C<Baz::> in C<Bar::>'s stash.
d866 1
a866 1
See the L<Magic Virtual Tables> section below.  The C<how> argument is also
d868 1
a868 1
from the set of macros C<PERL_MAGIC_foo> found in F<perl.h>. Note that before
d907 1
a907 1
This MGVTBL structure is set at compile-time in F<perl.h> and there are
a965 2
    V  PERL_MAGIC_vstring        (none)         v-string scalars
    w  PERL_MAGIC_utf8           vtbl_utf8      UTF-8 length+offset cache
d977 4
a980 4
uppercase letter is typically used to represent some kind of composite type
(a list or a hash), and the lowercase letter is used to represent an element
of that composite type. Some internals code makes use of this case
relationship.  However, 'v' and 'V' (vec and v-string) are in no way related.
d1325 1
a1325 2
macro. The pushed values will often need to be "mortal" (See
L</Reference Counts and Mortality>).
a1394 2
=head3 Allocation

a1404 2
The following three macros are used to initially allocate memory :

d1409 2
a1427 2
=head3 Reallocation

a1436 2
=head3 Moving

d1565 2
a1566 2
If you have your perl compiled for debugging (usually done with
C<-DDEBUGGING> on the C<Configure> command line), you may examine the
a1634 3
Another way to examine the tree is to use a compiler back-end module, such
as L<B::Concise>.

d1800 1
a1800 1
  Perl_sv_setiv(pTHX_ SV* dsv, IV num)
d1819 1
a1819 1
is normally hidden via macros.  Consider C<sv_setiv>.  It expands into
d1822 2
a1823 2
    #ifdef PERL_IMPLICIT_CONTEXT
      #define sv_setiv(a,b)      Perl_sv_setiv(aTHX_ a, b)
d1825 3
a1827 3
    #else
      #define sv_setiv           Perl_sv_setiv
    #endif
d1831 1
a1831 1
    sv_setiv(foo, bar);
d1875 1
a1875 1
        sv_setiv(sv, num);
d1880 1
a1880 1
        Perl_sv_setiv(Perl_get_context(), sv, num);
d1884 1
a1884 1
        Perl_sv_setiv(sv, num);
d2013 1
a2013 1
world are prefixed by C<Perl_> so that they will not conflict with XS
d2016 1
a2016 1
static functions start with C<S_>.)
d2021 5
a2025 6
F<embed.pl> and F<embed.fnc>. F<embed.pl> also creates the prototyping
header files for the internal functions, generates the documentation
and a lot of other bits and pieces. It's important that when you add
a new function to the core or change an existing one, you change the
data in the table in F<embed.fnc> as well. Here's a sample entry from
that table:
d2084 5
a2092 17
=item m

This is implemented as a macro.

=item X

This function is explicitly exported.

=item E

This function is visible to extensions included in the Perl core.

=item b

Binary backward compatibility; this function is a macro but also has
a C<Perl_> implementation (which is exported).

d2095 2
a2096 3
If you edit F<embed.pl> or F<embed.fnc>, you will need to run
C<make regen_headers> to force a rebuild of F<embed.h> and other
auto-generated files.
d2191 1
a2191 1
characters, and the one Perl uses is called UTF-8. UTF-8 uses
d2195 1
a2195 1
=head2 How can I recognise a UTF-8 string?
d2197 2
a2198 2
You can't. This is because UTF-8 data is stored in bytes just like
non-UTF-8 data. The Unicode character 200, (C<0xC8> for you hex types)
d2205 1
a2205 1
contains only valid UTF-8 characters. However, it can't do the work for
d2207 1
a2207 1
whether the current character in a string is valid UTF-8.
d2209 1
a2209 1
=head2 How does UTF-8 represent Unicode characters?
d2211 1
a2211 1
As mentioned above, UTF-8 uses a variable number of bytes to store a
d2218 1
a2218 1
Assuming you know you're dealing with a UTF-8 string, you can find out
d2228 1
a2228 1
Another way to skip over characters in a UTF-8 string is to use
d2233 3
a2235 4
All bytes in a multi-byte UTF-8 character will have the high bit set,
so you can test if you need to do something special with this
character like this (the UTF8_IS_INVARIANT() is a macro that tests
whether the byte can be encoded as a single byte even in UTF-8):
d2237 1
a2237 2
    U8 *utf;
    UV uv;	/* Note: a UV, not a U8, not a char */
d2239 2
a2240 2
    if (!UTF8_IS_INVARIANT(*utf))
        /* Must treat this as UTF-8 */
d2248 1
a2248 1
for putting a UV into UTF-8:
d2250 1
a2250 1
    if (!UTF8_IS_INVARIANT(uv))
d2258 5
a2262 5
you're ever in a situation where you have to match UTF-8 and non-UTF-8
characters. You may not skip over UTF-8 characters in this case. If you
do this, you'll lose the ability to match hi-bit non-UTF-8 characters;
for instance, if your UTF-8 string contains C<v196.172>, and you skip
that character, you can never match a C<chr(200)> in a non-UTF-8 string.
d2265 1
a2265 1
=head2 How does Perl store UTF-8 strings?
d2282 2
a2283 2
flagged is UTF-8, and contains a byte sequence that could be UTF-8 -
especially when combining non-UTF-8 and UTF-8 strings.
d2300 1
a2300 1
old SV has the UTF-8 flag set, and act accordingly:
d2309 1
a2309 1
not it's dealing with UTF-8 data, so that it can handle the string
d2312 1
a2312 5
Since just passing an SV to an XS function and copying the data of
the SV is not enough to copy the UTF-8 flags, even less right is just
passing a C<char *> to an XS function.

=head2 How do I convert a string to UTF-8?
d2314 2
a2315 2
If you're mixing UTF-8 and non-UTF-8 strings, you might find it necessary
to upgrade one of the strings to UTF-8. If you've got an SV, the easiest
d2329 1
a2329 1
Instead, C<bytes_to_utf8> will give you a UTF-8-encoded B<copy> of its
d2344 3
a2346 3
There's no way to tell if a string is UTF-8 or not. You can tell if an SV
is UTF-8 by looking at is C<SvUTF8> flag. Don't forget to set the flag if
something should be UTF-8. Treat the flag as part of the PV, even though
d2351 2
a2352 2
If a string is UTF-8, B<always> use C<utf8_to_uv> to get at the value,
unless C<UTF8_IS_INVARIANT(*s)> in which case you can use C<*s>.
d2356 2
a2357 3
When writing a character C<uv> to a UTF-8 string, B<always> use
C<uv_to_utf8>, unless C<UTF8_IS_INVARIANT(uv))> in which case
you can use C<*s = uv>.
d2361 3
a2363 3
Mixing UTF-8 and non-UTF-8 strings is tricky. Use C<bytes_to_utf8> to get
a new string which is UTF-8 encoded. There are tricks you can use to
delay deciding whether you need to use a UTF-8 string until you get to a
d2421 5
@


1.1.1.7
log
@perl 5.8.3 from CPAN
@
text
@d1765 4
a1768 4
functions, in F<run.c> and in F<dump.c>.  C<Perl_runops_debug> is used
with DEBUGGING and C<Perl_runops_standard> is used otherwise.  For fine
control over the execution of the compile tree it is possible to provide
your own runops function.
@


1.1.1.8
log
@Import of stock perl 5.8.5
@
text
@d204 3
a206 16

Its address can be used whenever an C<SV*> is needed. Make sure that
you don't try to compare a random sv with C<&PL_sv_undef>. For example
when interfacing Perl code, it'll work correctly for:

  foo(undef);

But won't work when called as:

  $x = undef;
  foo($x);

So to repeat always use SvOK() to check whether an sv is defined.

Also you have to be careful when using C<&PL_sv_undef> as a value in
AVs or HVs (see L<AVs, HVs and undefined values>).
d1383 1
a1383 1
L</Reference Counts and Mortality>):
a1385 2
    PUSHs(sv_2mortal(newSVuv(an_unsigned_integer)))
    PUSHs(sv_2mortal(newSVnv(a_double)))
d1387 1
d1403 2
a1404 3
C<(X)PUSH[iunp]> are I<not> suited to XSUBs which return multiple results.
For that, either stick to the C<(X)PUSHs> macros shown above, or use the new
C<m(X)PUSH[iunp]> macros instead; see L</Putting a C value on Perl stack>.
d1538 1
a1538 1
others, which use it via C<(X)PUSH[iunp]>.
d1550 2
a1551 19
to 20.

If you need to push multiple different values then you should either use
the C<(X)PUSHs> macros, or else use the new C<m(X)PUSH[iunp]> macros,
none of which make use of C<TARG>.  The C<(X)PUSHs> macros simply push an
SV* on the stack, which, as noted under L</XSUBs and the Argument Stack>,
will often need to be "mortal".  The new C<m(X)PUSH[iunp]> macros make
this a little easier to achieve by creating a new mortal for you (via
C<(X)PUSHmortal>), pushing that onto the stack (extending it if necessary
in the case of the C<mXPUSH[iunp]> macros), and then setting its value.
Thus, instead of writing this to "fix" the example above:

    XPUSHs(sv_2mortal(newSViv(10)))
    XPUSHs(sv_2mortal(newSViv(20)))

you can simply write:

    mXPUSHi(10)
    mXPUSHi(20)
d1553 1
a1553 1
On a related note, if you do use C<(X)PUSH[iunp]>, then you're going to
d1555 1
a1555 2
macros can make use of the local variable C<TARG>.  See also C<dTARGET>
and C<dXSTARG>.
@


1.1.1.9
log
@perl 5.8.6 from CPAN
@
text
@d929 2
a930 5
C<mg_len> field and if C<name> is non-null then either a C<savepvn> copy of
C<name> or C<name> itself is stored in the C<mg_ptr> field, depending on
whether C<namlen> is greater than zero or equal to zero respectively.  As a
special case, if C<(name && namlen == HEf_SVKEY)> then C<name> is assumed
to contain an C<SV*> and is stored as-is with its REFCNT incremented.
a945 3

See also C<sv_magicext> in L<perlapi> for a more flexible way to add magic
to an SV.
@


1.1.1.10
log
@perl 5.8.8 import
@
text
@d129 5
a133 5
    SV *s;
    STRLEN len;
    char * ptr;
    ptr = SvPV(s, len);
    foo(ptr, len);
d307 1
a307 1
numeric conversion has occurred and precision has been lost: only the
d1488 8
a1495 3
    Newx(pointer, number, type);
    Newxc(pointer, number, type, cast);
    Newxz(pointer, number, type);
d1497 1
a1497 1
The first argument C<pointer> should be the name of a variable that will
d1500 1
a1500 1
The second and third arguments C<number> and C<type> specify how many of
d1502 1
a1502 1
C<type> is passed to C<sizeof>.  The final argument to C<Newxc>, C<cast>,
d1506 1
a1506 1
Unlike the C<Newx> and C<Newxc> macros, the C<Newxz> macro calls C<memzero>
d2143 1
a2143 2
This function is a part of the public API. All such functions should also
have 'd', very few do not.
d2147 1
a2147 2
This function has a C<Perl_> prefix; i.e. it is defined as
C<Perl_av_fetch>.
d2152 1
a2152 1
look at in a second.  Some functions have 'd' but not 'A'; docs are good.
d2162 2
a2163 2
This is a static function and is defined as C<STATIC S_whatever>, and
usually called within the sources as C<whatever(...)>.
d2167 1
a2167 2
This does not need a interpreter context, so the definition has no
C<pTHX>, and it follows that callers don't use C<aTHX>.  (See
a2211 4
=item others

See the comments at the top of C<embed.fnc> for others.

a2284 20
=head2 Backwards compatibility

The Perl API changes over time. New functions are added or the interfaces
of existing functions are changed. The C<Devel::PPPort> module tries to
provide compatibility code for some of these changes, so XS writers don't
have to code it themselves when supporting multiple versions of Perl.

C<Devel::PPPort> generates a C header file F<ppport.h> that can also
be run as a Perl script. To generate F<ppport.h>, run:

    perl -MDevel::PPPort -eDevel::PPPort::WriteFile

Besides checking existing XS code, the script can also be used to retrieve
compatibility information for various API calls using the C<--api-info>
command line switch. For example:

  % perl ppport.h --api-info=sv_magicext

For details, see C<perldoc ppport.h>.

d2502 1
a2502 1
C<gvsv, gvsv, add>.)
d2534 3
a2536 1
directly support the creation of custom ops by name.
@


1.1.1.11
log
@import perl 5.10.0 from CPAN
@
text
@d817 2
a818 2
    HV*  gv_stashpv(const char* name, I32 flags)
    HV*  gv_stashsv(SV*, I32 flags)
d822 1
a822 1
C<HV*>.  The C<flags> flag will create a new package if it is set to GV_ADD.
a903 1
        I32         mg_len;
d906 1
d973 1
a973 2
The C<MGVTBL> has five (or sometimes eight) pointers to the following
routine types:
a980 5
    int  (*svt_copy)(SV *sv, MAGIC* mg, SV *nsv, const char *name, int namlen);
    int  (*svt_dup)(MAGIC *mg, CLONE_PARAMS *param);
    int  (*svt_local)(SV *nsv, MAGIC *mg);


d991 1
a991 1
    svt_clear           Clear something the SV represents.
a993 4
    svt_copy            copy tied variable magic to a tied element
    svt_dup             duplicate a magic structure during thread cloning
    svt_local           copy magic to local value during 'local'

a1004 7
The last three slots are a recent addition, and for source code
compatibility they are only checked for if one of the three flags
MGf_COPY, MGf_DUP or MGf_LOCAL is set in mg_flags. This means that most
code can continue declaring a vtable as a 5-element value. These three are
currently used exclusively by the threading code, and are highly subject
to change.

d1008 4
a1011 4
    (old-style char and macro)   MGVTBL          Type of magic
    --------------------------   ------          -------------
    \0 PERL_MAGIC_sv             vtbl_sv         Special scalar variable
    A  PERL_MAGIC_overload       vtbl_amagic     %OVERLOAD hash
d1013 38
a1050 42
    c  PERL_MAGIC_overload_table (none)          Holds overload table (AMT)
                                                 on stash
    B  PERL_MAGIC_bm             vtbl_bm         Boyer-Moore (fast string search)
    D  PERL_MAGIC_regdata        vtbl_regdata    Regex match position data
                                                 (@@+ and @@- vars)
    d  PERL_MAGIC_regdatum       vtbl_regdatum   Regex match position data
                                                 element
    E  PERL_MAGIC_env            vtbl_env        %ENV hash
    e  PERL_MAGIC_envelem        vtbl_envelem    %ENV hash element
    f  PERL_MAGIC_fm             vtbl_fm         Formline ('compiled' format)
    g  PERL_MAGIC_regex_global   vtbl_mglob      m//g target / study()ed string
    H  PERL_MAGIC_hints          vtbl_sig        %^H hash
    h  PERL_MAGIC_hintselem      vtbl_hintselem  %^H hash element
    I  PERL_MAGIC_isa            vtbl_isa        @@ISA array
    i  PERL_MAGIC_isaelem        vtbl_isaelem    @@ISA array element
    k  PERL_MAGIC_nkeys          vtbl_nkeys      scalar(keys()) lvalue
    L  PERL_MAGIC_dbfile         (none)          Debugger %_<filename
    l  PERL_MAGIC_dbline         vtbl_dbline     Debugger %_<filename element
    o  PERL_MAGIC_collxfrm       vtbl_collxfrm   Locale collate transformation
    P  PERL_MAGIC_tied           vtbl_pack       Tied array or hash
    p  PERL_MAGIC_tiedelem       vtbl_packelem   Tied array or hash element
    q  PERL_MAGIC_tiedscalar     vtbl_packelem   Tied scalar or handle
    r  PERL_MAGIC_qr             vtbl_qr         precompiled qr// regex
    S  PERL_MAGIC_sig            vtbl_sig        %SIG hash
    s  PERL_MAGIC_sigelem        vtbl_sigelem    %SIG hash element
    t  PERL_MAGIC_taint          vtbl_taint      Taintedness
    U  PERL_MAGIC_uvar           vtbl_uvar       Available for use by extensions
    v  PERL_MAGIC_vec            vtbl_vec        vec() lvalue
    V  PERL_MAGIC_vstring        (none)          v-string scalars
    w  PERL_MAGIC_utf8           vtbl_utf8       UTF-8 length+offset cache
    x  PERL_MAGIC_substr         vtbl_substr     substr() lvalue
    y  PERL_MAGIC_defelem        vtbl_defelem    Shadow "foreach" iterator
                                                 variable / smart parameter
                                                 vivification
    #  PERL_MAGIC_arylen         vtbl_arylen     Array length ($#ary)
    .  PERL_MAGIC_pos            vtbl_pos        pos() lvalue
    <  PERL_MAGIC_backref        vtbl_backref    back pointer to a weak ref 
    ~  PERL_MAGIC_ext            (none)          Available for use by extensions
    :  PERL_MAGIC_symtab         (none)          hash used as symbol table
    %  PERL_MAGIC_rhash          (none)          hash used as restricted hash
    @@  PERL_MAGIC_arylen_p       vtbl_arylen_p   pointer to $#a from @@a

a1091 11
Attaching C<PERL_MAGIC_uvar> to arrays is permissible but has no effect.

For hashes there is a specialized hook that gives control over hash
keys (but not values).  This hook calls C<PERL_MAGIC_uvar> 'get' magic
if the "set" function in the C<ufuncs> structure is NULL.  The hook
is activated whenever the hash is accessed with a key specified as
an C<SV> through the functions C<hv_store_ent>, C<hv_fetch_ent>,
C<hv_delete_ent>, and C<hv_exists_ent>.  Accessing the key as a string
through the functions without the C<..._ent> suffix circumvents the
hook.  See L<Hash::Util::Fieldhash/Guts> for a detailed description.

d1157 1
a1157 1
        stash = gv_stashpv("MyTie", GV_ADD);
d1350 1
a1350 2
using the stored value. It doesn't handle magic. Use C<save_scalar> if
magic is affected.
d1860 7
a1866 33
One macro controls the major Perl build flavor: MULTIPLICITY. The
MULTIPLICITY build has a C structure that packages all the interpreter
state. With multiplicity-enabled perls, PERL_IMPLICIT_CONTEXT is also
normally defined, and enables the support for passing in a "hidden" first
argument that represents all three data structures. MULTIPLICITY makes
mutli-threaded perls possible (with the ithreads threading model, related
to the macro USE_ITHREADS.)

Two other "encapsulation" macros are the PERL_GLOBAL_STRUCT and
PERL_GLOBAL_STRUCT_PRIVATE (the latter turns on the former, and the
former turns on MULTIPLICITY.)  The PERL_GLOBAL_STRUCT causes all the
internal variables of Perl to be wrapped inside a single global struct,
struct perl_vars, accessible as (globals) &PL_Vars or PL_VarsPtr or
the function  Perl_GetVars().  The PERL_GLOBAL_STRUCT_PRIVATE goes
one step further, there is still a single struct (allocated in main()
either from heap or from stack) but there are no global data symbols
pointing to it.  In either case the global struct should be initialised
as the very first thing in main() using Perl_init_global_struct() and
correspondingly tear it down after perl_free() using Perl_free_global_struct(),
please see F<miniperlmain.c> for usage details.  You may also need
to use C<dVAR> in your coding to "declare the global variables"
when you are using them.  dTHX does this for you automatically.

To see whether you have non-const data you can use a BSD-compatible C<nm>:

  nm libperl.a | grep -v ' [TURtr] '

If this displays any C<D> or C<d> symbols, you have non-const data.

For backward compatibility reasons defining just PERL_GLOBAL_STRUCT
doesn't actually hide all symbols inside a big global struct: some
PerlIO_xxx vtables are left visible.  The PERL_GLOBAL_STRUCT_PRIVATE
then hides everything (see how the PERLIO_FUNCS_DECL is used).
d1999 1
a1999 1
        STATIC void my_private_function(int arg1, int arg2);
d2001 1
a2001 1
        STATIC void
d2039 1
a2039 1
        STATIC void my_private_function(pTHX_ int arg1, int arg2);
d2041 1
a2041 1
        STATIC void
a2068 7
If one is compiling Perl with the C<-DPERL_GLOBAL_STRUCT> the C<dVAR>
definition is needed if the Perl global variables (see F<perlvars.h>
or F<globvar.sym>) are accessed in the function and C<dTHX> is not
used (the C<dTHX> includes the C<dVAR> if necessary).  One notices
the need for C<dVAR> only with the said compile-time define, because
otherwise the Perl global variables are visible as-is.

d2095 2
a2096 2
PERL_IMPLICIT_SYS macro.  Currently it only works with USE_ITHREADS on
Windows.
a2263 33
=head2 Exception Handling

There are a couple of macros to do very basic exception handling in XS
modules. You have to define C<NO_XSLOCKS> before including F<XSUB.h> to
be able to use these macros:

        #define NO_XSLOCKS
        #include "XSUB.h"

You can use these macros if you call code that may croak, but you need
to do some cleanup before giving control back to Perl. For example:

        dXCPT;    /* set up necessary variables */

        XCPT_TRY_START {
          code_that_may_croak();
        } XCPT_TRY_END

        XCPT_CATCH
        {
          /* do cleanup here */
          XCPT_RETHROW;
        }

Note that you always have to rethrow an exception that has been
caught. Using these macros, it is not possible to just catch the
exception and ignore it. If you have to ignore the exception, you
have to use the C<call_*> function.

The advantage of using the above macros is that you don't have
to setup an extra function for C<call_*>, and that using these
macros is faster than using C<call_*>.

d2334 2
a2335 2
a variable number of bytes to represent a character. You can learn more
about Unicode and Perl's Unicode model in L<perlunicode>.
d2346 4
a2349 5
In general, you either have to know what you're dealing with, or you
have to guess.  The API function C<is_utf8_string> can help; it'll tell
you if a string contains only valid UTF-8 characters. However, it can't
do the work for you. On a character-by-character basis, C<is_utf8_char>
will tell you whether the current character in a string is valid UTF-8. 
d2354 2
a2355 2
character. Characters with values 0...127 are stored in one byte, just
like good ol' ASCII. Character 128 is stored as C<v194.128>; this
d2412 3
a2414 5
slightly differently. A flag in the SV, C<SVf_UTF8>, indicates that the
string is internally encoded as UTF-8. Without it, the byte value is the
codepoint number and vice versa (in other words, the string is encoded
as iso-8859-1). You can check and manipulate this flag with the
following macros:
d2426 1
a2426 1
flagged as UTF-8, and contains a byte sequence that could be UTF-8 -
d2444 1
a2444 1
old SV has the UTF8 flag set, and act accordingly:
d2457 1
a2457 1
the SV is not enough to copy the UTF8 flags, even less right is just
d2462 3
a2464 3
If you're mixing UTF-8 and non-UTF-8 strings, it is necessary to upgrade
one of the strings to UTF-8. If you've got an SV, the easiest way to do
this is:
d2475 1
a2475 1
by the end user, it can cause problems in deficient code.
@


1.1.1.12
log
@import perl 5.10.1
@
text
@d194 1
a194 1
    SV*  get_sv("package::varname", 0);
d370 1
a370 1
    AV*  get_av("package::varname", 0);
d445 1
a445 1
    HV*  get_hv("package::varname", 0);
d603 1
a603 1
See the F<sv.h> header file for more details.
d670 3
a672 3
    SV*  get_sv("package::varname", GV_ADD);
    AV*  get_av("package::varname", GV_ADD);
    HV*  get_hv("package::varname", GV_ADD);
d881 1
a881 1
    SV* sv = get_sv("dberror", GV_ADD);
d988 3
a990 3
currently 32 types.  These different structures contain pointers to various
routines that perform additional actions depending on which function is
being called.
d1962 1
a1962 1
C<pTHX_> is one of a number of macros (in F<perl.h>) that hide the
d2031 1
a2031 1
with extensions: whenever F<XSUB.h> is #included, it redefines the aTHX
d2168 1
a2168 1
calls (see F<win32/perllib.c>) for the default perl executable, but for a
d2613 3
a2615 1
a new string which is UTF-8 encoded, and then combine them.
@


1.1.1.13
log
@Perl 5.12.2 from CPAN
@
text
@d281 1
a281 1
increasing C<AvARRAY> by one and decreasing C<AvFILL> and C<AvMAX>.
d789 1
a789 1
The mortal routines are not just for SVs; AVs and HVs can be
d982 1
a982 1
    int  (*svt_copy)(SV *sv, MAGIC* mg, SV *nsv, const char *name, I32 namlen);
d1041 1
a1041 1
    H  PERL_MAGIC_hints          vtbl_hints      %^H hash
d1627 5
a1631 4
are created. The answer is that they are created when the current
unit--a subroutine or a file (for opcodes for statements outside of
subroutines)--is compiled. During this time a special anonymous Perl
array is created, which is called a scratchpad for the current unit.
d1898 1
a1898 1
multi-threaded perls possible (with the ithreads threading model, related
d2185 3
a2187 7
Inside the Perl core (C<PERL_CORE> defined), you can get at the functions
either with or without the C<Perl_> prefix, thanks to a bunch of defines
that live in F<embed.h>. Note that extension code should I<not> set
C<PERL_CORE>; this exposes the full perl internals, and is likely to cause
breakage of the XS in each new perl release.

The file F<embed.h> is generated automatically from
d2515 1
a2515 2
as iso-8859-1, but C<use feature 'unicode_strings'> is needed to get iso-8859-1
semantics). You can check and manipulate this flag with the
d2655 2
a2656 1
C<B::Generate> directly supports the creation of custom ops by name.
d2671 1
a2671 1
L<perlapi>, L<perlintern>, L<perlxs>, L<perlembed>
@


1.1.1.14
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d59 1
a59 1
the SV has the undef value.
d62 1
a62 2
    SV *sv = newSV(10);  /* 10 (+1) bytes of uninitialised storage
                          * allocated */
d72 1
a72 2
    void  sv_vsetpvfn(SV*, const char*, STRLEN, va_list *,
                                                    SV **, I32, bool *);
d80 1
a80 2
string terminating with a NUL character, and not otherwise containing
NULs.
d131 1
a131 1
    char *ptr;
d147 1
a147 1
add space for the trailing NUL byte (perl's own string functions typically do
d176 1
a176 2
    void  sv_vcatpvfn(SV*, const char*, STRLEN, va_list *, SV **,
                                                             I32, bool);
d303 1
a303 1
There are various ways in which the private and public flags may differ.
d327 1
a327 1
Once the AV has been created, the following operations are possible on it:
d345 1
a345 1
The C<av_len> function returns the highest index value in an array (just
a355 2
A few more:

d383 1
a383 1
Once the HV has been created, the following operations are possible on it:
d402 1
a402 2
The first of these two functions checks if a hash table entry exists, and the 
second deletes it.
d419 1
a419 1
Perl keeps the actual data in a linked list of structures with a typedef of HE.
d542 2
a543 2
You can run into similar problems when you store C<&PL_sv_yes> or
C<&PL_sv_no> into AVs or HVs. Trying to modify such elements
d549 1
a549 1
C<&PL_sv_undef>, C<&PL_sv_yes> and C<&PL_sv_no> with AVs and
d562 1
a562 1
(including other references).
d600 1
a600 1
    SVt_PVGV  Glob (possibly a file handle)
d622 3
a624 3
The following function upgrades rv to reference if not already one.
Creates a new SV for rv to point to.  If C<classname> is non-null, the SV
is blessed into the specified class.  SV is returned.
d628 2
a629 3
The following three functions copy integer, unsigned integer or double
into an SV whose reference is C<rv>.  SV is blessed if C<classname> is
non-null.
d635 2
a636 3
The following function copies the pointer value (I<the address, not the
string!>) into an SV whose reference is rv.  SV is blessed if C<classname>
is non-null.
d638 1
a638 1
	SV* sv_setref_pv(SV* rv, const char* classname, void* pv);
d640 2
a641 3
The following function copies a string into an SV whose reference is C<rv>.
Set length to 0 to let Perl calculate the string length.  SV is blessed if
C<classname> is non-null.
d643 1
a643 2
    SV* sv_setref_pvn(SV* rv, const char* classname, char* pv,
                                                         STRLEN length);
d645 2
a646 2
The following function tests whether the SV is blessed into the specified
class.  It does not check inheritance relationships.
d650 1
a650 1
The following function tests whether the SV is a reference to a blessed object.
d654 3
a656 4
The following function tests whether the SV is derived from the specified
class. SV can be either a reference to a blessed object or a string
containing a class name. This is the function implementing the
C<UNIVERSAL::isa> functionality.
d674 1
a674 1
Notice the use of GV_ADD as the second parameter.  The new variable can now
d678 1
a678 1
C<GV_ADD> argument to enable certain extra features.  Those bits are:
d769 1
a769 1
Because C<sv_newmortal> gives the new SV no value, it must normally be given one
d784 1
a784 1
For example if you are passing an SV which you I<know> has a high enough REFCNT
d915 1
a915 1
  void sv_magic(SV* sv, SV* obj, int how, const char* name, I32 namlen);
d961 1
a961 1
    int sv_unmagic(SV *sv, int type);
a965 6
However, note that C<sv_unmagic> removes all magic of a certain C<type> from the
C<SV>. If you want to remove only certain magic of a C<type> based on the magic
virtual table, use C<sv_unmagicext> instead:

    int sv_unmagicext(SV *sv, int type, MGVTBL *vtbl);

d982 1
a982 2
    int  (*svt_copy)(SV *sv, MAGIC* mg, SV *nsv,
                                          const char *name, I32 namlen);
d992 11
a1002 12
   Function pointer    Action taken
   ----------------    ------------
   svt_get             Do something before the value of the SV is
                       retrieved.
   svt_set             Do something after the SV is assigned a value.
   svt_len             Report on the SV's length.
   svt_clear           Clear something the SV represents.
   svt_free            Free any extra storage associated with the SV.

   svt_copy            copy tied variable magic to a tied element
   svt_dup             duplicate a magic structure during thread cloning
   svt_local           copy magic to local value during 'local'
d1024 47
a1070 68
=for comment
This table is generated by regen/mg_vtable.pl.  Any changes made here
will be lost.

=for mg_vtable.pl begin

 mg_type
 (old-style char and macro)   MGVTBL          Type of magic
 --------------------------   ------          -------------
 \0 PERL_MAGIC_sv             vtbl_sv         Special scalar variable
 #  PERL_MAGIC_arylen         vtbl_arylen     Array length ($#ary)
 %  PERL_MAGIC_rhash          (none)          extra data for restricted
                                              hashes
 .  PERL_MAGIC_pos            vtbl_pos        pos() lvalue
 :  PERL_MAGIC_symtab         (none)          extra data for symbol
                                              tables
 <  PERL_MAGIC_backref        vtbl_backref    for weak ref data
 @@  PERL_MAGIC_arylen_p       (none)          to move arylen out of
                                              XPVAV
 A  PERL_MAGIC_overload       vtbl_amagic     %OVERLOAD hash
 a  PERL_MAGIC_overload_elem  vtbl_amagicelem %OVERLOAD hash element
 B  PERL_MAGIC_bm             vtbl_regexp     Boyer-Moore 
                                              (fast string search)
 c  PERL_MAGIC_overload_table vtbl_ovrld      Holds overload table 
                                              (AMT) on stash
 D  PERL_MAGIC_regdata        vtbl_regdata    Regex match position data 
                                              (@@+ and @@- vars)
 d  PERL_MAGIC_regdatum       vtbl_regdatum   Regex match position data
                                              element
 E  PERL_MAGIC_env            vtbl_env        %ENV hash
 e  PERL_MAGIC_envelem        vtbl_envelem    %ENV hash element
 f  PERL_MAGIC_fm             vtbl_regdata    Formline 
                                              ('compiled' format)
 G  PERL_MAGIC_study          vtbl_regexp     study()ed string
 g  PERL_MAGIC_regex_global   vtbl_mglob      m//g target
 H  PERL_MAGIC_hints          vtbl_hints      %^H hash
 h  PERL_MAGIC_hintselem      vtbl_hintselem  %^H hash element
 I  PERL_MAGIC_isa            vtbl_isa        @@ISA array
 i  PERL_MAGIC_isaelem        vtbl_isaelem    @@ISA array element
 k  PERL_MAGIC_nkeys          vtbl_nkeys      scalar(keys()) lvalue
 L  PERL_MAGIC_dbfile         (none)          Debugger %_<filename
 l  PERL_MAGIC_dbline         vtbl_dbline     Debugger %_<filename
                                              element
 N  PERL_MAGIC_shared         (none)          Shared between threads
 n  PERL_MAGIC_shared_scalar  (none)          Shared between threads
 o  PERL_MAGIC_collxfrm       vtbl_collxfrm   Locale transformation
 P  PERL_MAGIC_tied           vtbl_pack       Tied array or hash
 p  PERL_MAGIC_tiedelem       vtbl_packelem   Tied array or hash element
 q  PERL_MAGIC_tiedscalar     vtbl_packelem   Tied scalar or handle
 r  PERL_MAGIC_qr             vtbl_regexp     precompiled qr// regex
 S  PERL_MAGIC_sig            (none)          %SIG hash
 s  PERL_MAGIC_sigelem        vtbl_sigelem    %SIG hash element
 t  PERL_MAGIC_taint          vtbl_taint      Taintedness
 U  PERL_MAGIC_uvar           vtbl_uvar       Available for use by
                                              extensions
 u  PERL_MAGIC_uvar_elem      (none)          Reserved for use by
                                              extensions
 V  PERL_MAGIC_vstring        vtbl_vstring    SV was vstring literal
 v  PERL_MAGIC_vec            vtbl_vec        vec() lvalue
 w  PERL_MAGIC_utf8           vtbl_utf8       Cached UTF-8 information
 x  PERL_MAGIC_substr         vtbl_substr     substr() lvalue
 y  PERL_MAGIC_defelem        vtbl_defelem    Shadow "foreach" iterator
                                              variable / smart parameter
                                              vivification
 ]  PERL_MAGIC_checkcall      (none)          inlining/mutation of call
                                              to this CV
 ~  PERL_MAGIC_ext            (none)          Available for use by
                                              extensions
a1071 1
=for mg_vtable.pl end
d1122 1
a1122 1
hook.  See L<Hash::Util::FieldHash/GUTS> for a detailed description.
d1128 2
a1129 14
For C<PERL_MAGIC_ext> magic, it is usually a good idea to define an
C<MGVTBL>, even if all its fields will be C<0>, so that individual
C<MAGIC> pointers can be identified as a particular kind of magic
using their magic virtual table. C<mg_findext> provides an easy way
to do that:

    STATIC MGVTBL my_vtbl = { 0, 0, 0, 0, 0, 0, 0, 0 };

    MAGIC *mg;
    if ((mg = mg_findext(sv, PERL_MAGIC_ext, &my_vtbl))) {
        /* this is really ours, not another module's PERL_MAGIC_ext */
        my_priv_data_t *priv = (my_priv_data_t *)mg->mg_ptr;
        ...
    }
d1145 1
a1145 2
    MAGIC *mg_find(SV *sv, int type); /* Finds the magic pointer of that
                                       * type */
d1147 3
a1149 10
This routine returns a pointer to a C<MAGIC> structure stored in the SV.
If the SV does not have that magical feature, C<NULL> is returned. If the
SV has multiple instances of that magical feature, the first one will be
returned. C<mg_findext> can be used to find a C<MAGIC> structure of an SV
based on both its magic type and its magic virtual table:

    MAGIC *mg_findext(SV *sv, int type, MGVTBL *vtbl);

Also, if the SV passed to C<mg_find> or C<mg_findext> is not of type
SVt_PVMG, Perl may core dump.
a1440 3
    /* Although the last example is better written as the more
     * efficient: */
    PUSHs(newSVpvs_flags("Some String", SVs_TEMP))
d1452 1
a1452 1
This macro automatically adjusts the stack for you, if needed.  Thus, you
a1461 22
=head2 Autoloading with XSUBs

If an AUTOLOAD routine is an XSUB, as with Perl subroutines, Perl puts the
fully-qualified name of the autoloaded subroutine in the $AUTOLOAD variable
of the XSUB's package.

But it also puts the same information in certain fields of the XSUB itself:

    HV *stash           = CvSTASH(cv);
    const char *subname = SvPVX(cv);
    STRLEN name_length  = SvCUR(cv); /* in bytes */
    U32 is_utf8         = SvUTF8(cv);
    
C<SvPVX(cv)> contains just the sub name itself, not including the package.
For an AUTOLOAD routine in UNIVERSAL or one of its superclasses,
C<CvSTASH(cv)> returns NULL during a method call on a nonexistent package.

B<Note>: Setting $AUTOLOAD stopped working in 5.6.1, which did not support
XS AUTOLOAD subs at all.  Perl 5.8.0 introduced the use of fields in the
XSUB itself.  Perl 5.16.0 restored the setting of $AUTOLOAD.  If you need
to support 5.8-5.14, use the XSUB's fields.

d1562 1
a1562 1
The most recent development releases of Perl have been experimenting with
d1824 3
a1826 35
additional complications for conditionals).  Optimizations performed
at this stage are subject to the same restrictions as in the pass 2.

Peephole optimizations are done by calling the function pointed to
by the global variable C<PL_peepp>.  By default, C<PL_peepp> just
calls the function pointed to by the global variable C<PL_rpeepp>.
By default, that performs some basic op fixups and optimisations along
the execution-order op chain, and recursively calls C<PL_rpeepp> for
each side chain of ops (resulting from conditionals).  Extensions may
provide additional optimisations or fixups, hooking into either the
per-subroutine or recursive stage, like this:

    static peep_t prev_peepp;
    static void my_peep(pTHX_ OP *o)
    {
        /* custom per-subroutine optimisation goes here */
        prev_peepp(o);
        /* custom per-subroutine optimisation may also go here */
    }
    BOOT:
        prev_peepp = PL_peepp;
        PL_peepp = my_peep;

    static peep_t prev_rpeepp;
    static void my_rpeep(pTHX_ OP *o)
    {
        OP *orig_o = o;
        for(; o; o = o->op_next) {
            /* custom per-op optimisation goes here */
        }
        prev_rpeepp(orig_o);
    }
    BOOT:
        prev_rpeepp = PL_rpeepp;
        PL_rpeepp = my_rpeep;
a1844 70
=head2 Compile-time scope hooks

As of perl 5.14 it is possible to hook into the compile-time lexical
scope mechanism using C<Perl_blockhook_register>. This is used like
this:

    STATIC void my_start_hook(pTHX_ int full);
    STATIC BHK my_hooks;

    BOOT:
        BhkENTRY_set(&my_hooks, bhk_start, my_start_hook);
        Perl_blockhook_register(aTHX_ &my_hooks);

This will arrange to have C<my_start_hook> called at the start of
compiling every lexical scope. The available hooks are:

=over 4

=item C<void bhk_start(pTHX_ int full)>

This is called just after starting a new lexical scope. Note that Perl
code like

    if ($x) { ... }

creates two scopes: the first starts at the C<(> and has C<full == 1>,
the second starts at the C<{> and has C<full == 0>. Both end at the
C<}>, so calls to C<start> and C<pre/post_end> will match. Anything
pushed onto the save stack by this hook will be popped just before the
scope ends (between the C<pre_> and C<post_end> hooks, in fact).

=item C<void bhk_pre_end(pTHX_ OP **o)>

This is called at the end of a lexical scope, just before unwinding the
stack. I<o> is the root of the optree representing the scope; it is a
double pointer so you can replace the OP if you need to.

=item C<void bhk_post_end(pTHX_ OP **o)>

This is called at the end of a lexical scope, just after unwinding the
stack. I<o> is as above. Note that it is possible for calls to C<pre_>
and C<post_end> to nest, if there is something on the save stack that
calls string eval.

=item C<void bhk_eval(pTHX_ OP *const o)>

This is called just before starting to compile an C<eval STRING>, C<do
FILE>, C<require> or C<use>, after the eval has been set up. I<o> is the
OP that requested the eval, and will normally be an C<OP_ENTEREVAL>,
C<OP_DOFILE> or C<OP_REQUIRE>.

=back

Once you have your hook functions, you need a C<BHK> structure to put
them in. It's best to allocate it statically, since there is no way to
free it once it's registered. The function pointers should be inserted
into this structure using the C<BhkENTRY_set> macro, which will also set
flags indicating which entries are valid. If you do need to allocate
your C<BHK> dynamically for some reason, be sure to zero it before you
start.

Once registered, there is no mechanism to switch these hooks off, so if
that is necessary you will need to do this yourself. An entry in C<%^H>
is probably the best way, so the effect is lexically scoped; however it
is also possible to use the C<BhkDISABLE> and C<BhkENABLE> macros to
temporarily switch entries on and off. You should also be aware that
generally speaking at least one scope will have opened before your
extension is loaded, so you will see some C<pre/post_end> pairs that
didn't have a matching C<start>.

d1953 1
a1953 1
configurations in the future.
d2045 1
a2045 1
You don't have to do anything new in your extension to get this; since
d2233 1
a2233 1
This does not need an interpreter context, so the definition has no
d2235 1
a2235 1
L</Background and PERL_IMPLICIT_CONTEXT>.)
a2483 1
    U8 *utf_end; /* 1 beyond buffer pointed to by utf */
a2484 1
    STRLEN len; /* length of character in bytes */
d2488 1
a2488 1
        uv = utf8_to_uvchr_buf(utf, utf_end, &len);
d2493 2
a2494 2
You can also see in that example that we use C<utf8_to_uvchr_buf> to get the
value of the character; the inverse function C<uvchr_to_utf8> is available
d2499 1
a2499 1
        utf8 = uvchr_to_utf8(utf8, uv);
d2599 1
a2599 1
is UTF-8 by looking at its C<SvUTF8> flag. Don't forget to set the flag if
d2605 1
a2605 1
If a string is UTF-8, B<always> use C<utf8_to_uvchr_buf> to get at the value,
d2611 1
a2611 1
C<uvchr_to_utf8>, unless C<UTF8_IS_INVARIANT(uv))> in which case
d2654 4
a2657 73
Perl uses the value of C<< o->op_ppaddr >> to determine which custom op
it is dealing with. You should create an C<XOP> structure for each
ppaddr you use, set the properties of the custom op with
C<XopENTRY_set>, and register the structure against the ppaddr using
C<Perl_custom_op_register>. A trivial example might look like:

    static XOP my_xop;
    static OP *my_pp(pTHX);

    BOOT:
        XopENTRY_set(&my_xop, xop_name, "myxop");
        XopENTRY_set(&my_xop, xop_desc, "Useless custom op");
        Perl_custom_op_register(aTHX_ my_pp, &my_xop);

The available fields in the structure are:

=over 4

=item xop_name

A short name for your op. This will be included in some error messages,
and will also be returned as C<< $op->name >> by the L<B|B> module, so
it will appear in the output of module like L<B::Concise|B::Concise>.

=item xop_desc

A short description of the function of the op.

=item xop_class

Which of the various C<*OP> structures this op uses. This should be one of
the C<OA_*> constants from F<op.h>, namely

=over 4

=item OA_BASEOP

=item OA_UNOP

=item OA_BINOP

=item OA_LOGOP

=item OA_LISTOP

=item OA_PMOP

=item OA_SVOP

=item OA_PADOP

=item OA_PVOP_OR_SVOP

This should be interpreted as 'C<PVOP>' only. The C<_OR_SVOP> is because
the only core C<PVOP>, C<OP_TRANS>, can sometimes be a C<SVOP> instead.

=item OA_LOOP

=item OA_COP

=back

The other C<OA_*> constants should not be used.

=item xop_peep

This member is of type C<Perl_cpeep_t>, which expands to C<void
(*Perl_cpeep_t)(aTHX_ OP *o, OP *oldop)>. If it is set, this function
will be called from C<Perl_rpeep> when ops of this type are encountered
by the peephole optimizer. I<o> is the OP that needs optimizing;
I<oldop> is the previous OP optimized, whose C<op_next> points to I<o>.

=back
@


1.1.1.15
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@a39 9
("PV" stands for "Pointer Value".  You might think that it is misnamed
because it is described as pointing only to strings.  However, it is
possible to have it point to other things.  For example, inversion
lists, used in regular expression data structures, are scalars, each
consisting of an array of UVs which are accessed through PVs.  But,
using it for non-strings requires care, as the underlying assumption of
much of the internals is that PVs are just for strings.  Often, for
example, a trailing NUL is tacked on automatically.  The non-string use
is documented only in this paragraph.)
d345 1
a345 1
    I32   av_top_index(AV*);
d349 1
a349 1
The C<av_top_index> function returns the highest index value in an array (just
d456 1
a456 1
The hash algorithm is defined in the C<PERL_HASH> macro:
d458 4
a461 1
    PERL_HASH(hash, key, klen)
d463 2
a464 3
The exact implementation of this macro varies by architecture and version
of perl, and the return value may change per invocation, so the value
is only valid for the duration of a single perl process.
d600 9
a608 5
    < SVt_PVAV  Scalar
    SVt_PVAV    Array
    SVt_PVHV    Hash
    SVt_PVCV    Code
    SVt_PVGV    Glob (possibly a file handle)
d610 1
a610 1
See L<perlapi/svtype> for more details.
d1051 61
a1111 58
 (old-style char and macro)   MGVTBL         Type of magic
 --------------------------   ------         -------------
 \0 PERL_MAGIC_sv             vtbl_sv        Special scalar variable
 #  PERL_MAGIC_arylen         vtbl_arylen    Array length ($#ary)
 %  PERL_MAGIC_rhash          (none)         extra data for restricted
                                             hashes
 &  PERL_MAGIC_proto          (none)         my sub prototype CV
 .  PERL_MAGIC_pos            vtbl_pos       pos() lvalue
 :  PERL_MAGIC_symtab         (none)         extra data for symbol
                                             tables
 <  PERL_MAGIC_backref        vtbl_backref   for weak ref data
 @@  PERL_MAGIC_arylen_p       (none)         to move arylen out of XPVAV
 B  PERL_MAGIC_bm             vtbl_regexp    Boyer-Moore 
                                             (fast string search)
 c  PERL_MAGIC_overload_table vtbl_ovrld     Holds overload table 
                                             (AMT) on stash
 D  PERL_MAGIC_regdata        vtbl_regdata   Regex match position data 
                                             (@@+ and @@- vars)
 d  PERL_MAGIC_regdatum       vtbl_regdatum  Regex match position data
                                             element
 E  PERL_MAGIC_env            vtbl_env       %ENV hash
 e  PERL_MAGIC_envelem        vtbl_envelem   %ENV hash element
 f  PERL_MAGIC_fm             vtbl_regexp    Formline 
                                             ('compiled' format)
 g  PERL_MAGIC_regex_global   vtbl_mglob     m//g target
 H  PERL_MAGIC_hints          vtbl_hints     %^H hash
 h  PERL_MAGIC_hintselem      vtbl_hintselem %^H hash element
 I  PERL_MAGIC_isa            vtbl_isa       @@ISA array
 i  PERL_MAGIC_isaelem        vtbl_isaelem   @@ISA array element
 k  PERL_MAGIC_nkeys          vtbl_nkeys     scalar(keys()) lvalue
 L  PERL_MAGIC_dbfile         (none)         Debugger %_<filename
 l  PERL_MAGIC_dbline         vtbl_dbline    Debugger %_<filename
                                             element
 N  PERL_MAGIC_shared         (none)         Shared between threads
 n  PERL_MAGIC_shared_scalar  (none)         Shared between threads
 o  PERL_MAGIC_collxfrm       vtbl_collxfrm  Locale transformation
 P  PERL_MAGIC_tied           vtbl_pack      Tied array or hash
 p  PERL_MAGIC_tiedelem       vtbl_packelem  Tied array or hash element
 q  PERL_MAGIC_tiedscalar     vtbl_packelem  Tied scalar or handle
 r  PERL_MAGIC_qr             vtbl_regexp    precompiled qr// regex
 S  PERL_MAGIC_sig            (none)         %SIG hash
 s  PERL_MAGIC_sigelem        vtbl_sigelem   %SIG hash element
 t  PERL_MAGIC_taint          vtbl_taint     Taintedness
 U  PERL_MAGIC_uvar           vtbl_uvar      Available for use by
                                             extensions
 u  PERL_MAGIC_uvar_elem      (none)         Reserved for use by
                                             extensions
 V  PERL_MAGIC_vstring        (none)         SV was vstring literal
 v  PERL_MAGIC_vec            vtbl_vec       vec() lvalue
 w  PERL_MAGIC_utf8           vtbl_utf8      Cached UTF-8 information
 x  PERL_MAGIC_substr         vtbl_substr    substr() lvalue
 y  PERL_MAGIC_defelem        vtbl_defelem   Shadow "foreach" iterator
                                             variable / smart parameter
                                             vivification
 ]  PERL_MAGIC_checkcall      vtbl_checkcall inlining/mutation of call
                                             to this CV
 ~  PERL_MAGIC_ext            (none)         Available for use by
                                             extensions
d1539 1
a1539 1

d1557 1
a1557 1
    I32  call_argv(const char*, I32, char**);
d1927 1
a1927 1
        prev_peepp(aTHX_ o);
d1941 1
a1941 1
        prev_rpeepp(aTHX_ orig_o);
d2640 1
a2640 2
do the work for you. On a character-by-character basis,
C<is_utf8_char_buf>
d2814 1
a2814 1
Custom operator support is an experimental feature that allows you to
d2836 1
a2836 1
creating ops with the type C<OP_CUSTOM> and the C<op_ppaddr> of your own
@


1.1.1.16
log
@Import perl-5.20.1
@
text
@d8 2
a9 2
to provide some info on the basic workings of the Perl core.  It is far
from complete and probably contains many errors.  Please refer any
d31 1
a31 1
least 32-bits and 16-bits long, respectively.  (Again, there are U32 and U16,
d42 3
a44 2
possible to have it point to other things  For example, it could point
to an array of UVs.  But,
d47 1
a47 1
example, a trailing C<NUL> is tacked on automatically.  The non-string use
d64 1
a64 1
In the unlikely case of a SV requiring more complex initialization, you
d67 1
a67 1
the C<NUL>) bytes of storage allocated, accessible via SvPVX.  In both cases
d91 1
a91 1
string terminating with a C<NUL> character, and not otherwise containing
d109 2
a110 2
All SVs that contain strings should be terminated with a C<NUL> character.
If it is not C<NUL>-terminated there is a risk of
d112 2
a113 2
functions or system calls which expect a C<NUL>-terminated string.
Perl's own functions typically add a trailing C<NUL> for this reason.
d135 1
a135 1
might not be terminated by a C<NUL>.
d138 1
a138 2
len);>.  It might work with your
compiler, but it won't work for everyone.
d159 1
a159 1
add space for the trailing C<NUL> byte (perl's own string functions typically do
a161 52
If you want to write to an existing SV's buffer and set its value to a
string, use SvPV_force() or one of its variants to force the SV to be
a PV.  This will remove any of various types of non-stringness from
the SV while preserving the content of the SV in the PV.  This can be
used, for example, to append data from an API function to a buffer
without extra copying:

    (void)SvPVbyte_force(sv, len);
    s = SvGROW(sv, len + needlen + 1);
    /* something that modifies up to needlen bytes at s+len, but
       modifies newlen bytes
         eg. newlen = read(fd, s + len, needlen);
       ignoring errors for these examples
     */
    s[len + newlen] = '\0';
    SvCUR_set(sv, len + newlen);
    SvUTF8_off(sv);
    SvSETMAGIC(sv);

If you already have the data in memory or if you want to keep your
code simple, you can use one of the sv_cat*() variants, such as
sv_catpvn().  If you want to insert anywhere in the string you can use
sv_insert() or sv_insert_flags().

If you don't need the existing content of the SV, you can avoid some
copying with:

    sv_setpvn(sv, "", 0);
    s = SvGROW(sv, needlen + 1);
    /* something that modifies up to needlen bytes at s, but modifies
       newlen bytes
         eg. newlen = read(fd, s. needlen);
     */
    s[newlen] = '\0';
    SvCUR_set(sv, newlen);
    SvPOK_only(sv); /* also clears SVf_UTF8 */
    SvSETMAGIC(sv);

Again, if you already have the data in memory or want to avoid the
complexity of the above, you can use sv_setpvn().

If you have a buffer allocated with Newx() and want to set that as the
SV's value, you can use sv_usepvn_flags().  That has some requirements
if you want to avoid perl re-allocating the buffer to fit the trailing
NUL:

   Newx(buf, somesize+1, char);
   /* ... fill in buf ... */
   buf[somesize] = '\0';
   sv_usepvn_flags(sv, buf, somesize, SV_SMAGIC | SV_HAS_TRAILING_NUL);
   /* buf now belongs to perl, don't release it */

d197 1
a197 2
va_list argument.  The fifth function
extends the string stored in the first
d218 2
a219 2
Its address can be used whenever an C<SV*> is needed.  Make sure that
you don't try to compare a random sv with C<&PL_sv_undef>.  For example
d261 1
a261 1
pointer.  The efficiency comes by means of a little hack: instead of
d264 3
a266 4
effect, and it moves the PV pointer (called C<SvPVX>) forward
by the number of bytes chopped off, and adjusts C<SvCUR> and C<SvLEN>
accordingly.  (A portion of the space between the old and new PV
pointers is used to store the count of chopped bytes.)
d284 1
a284 1
C<Devel::Peek::Dump> helpfully reminds us that this is an offset.  The
d292 1
a292 1
Perl, C<AvALLOC> points to the real start of the C array.  These are
d296 1
a296 1
play when freeing the array.  See C<av_shift> in F<av.c>.
d317 3
a319 5
For example, in perl 5.16 and earlier a tied SV may have a valid
underlying value in the IV slot (so SvIOKp is true), but the data
should be accessed via the FETCH routine rather than directly,
so SvIOK is false.  (In perl 5.18 onwards, tied scalars use
the flags the same way as untied scalars.)  Another is when
d321 1
a321 1
private flag is set on 'lossy' values.  So when an NV is converted to an
d335 1
a335 1
    AV*  av_make(SSize_t num, SV **ptr);
d345 1
a345 1
    void  av_unshift(AV*, SSize_t num);
d354 3
a356 3
    SSize_t av_top_index(AV*);
    SV**    av_fetch(AV*, SSize_t key, I32 lval);
    SV**    av_store(AV*, SSize_t key, SV* val);
d373 1
a373 1
    void  av_extend(AV*, SSize_t key);
d523 2
a524 2
Sometimes you have to store undefined values in AVs or HVs.  Although
this may be a rare case, it can be tricky.  That's because you're
d537 1
a537 1
Unfortunately, this isn't true.  In perl 5.18 and earlier, AVs use C<&PL_sv_undef> as a marker
d540 1
a540 3
false for the array generated by the XS code.  In perl 5.20, storing
&PL_sv_undef will create a read-only element, because the scalar
&PL_sv_undef itself is stored, not a copy.
d542 1
a542 1
Similar problems can occur when storing C<&PL_sv_undef> in HVs:
d552 1
a552 1
in restricted hashes.  This caused such hash entries not to appear
d557 1
a557 1
C<&PL_sv_no> into AVs or HVs.  Trying to modify such elements
d669 2
a670 2
class.  SV can be either a reference to a blessed object or a string
containing a class name.  This is the function implementing the
d720 1
a720 1
Perl uses a reference count-driven garbage collection mechanism.  SVs,
d772 1
a772 1
the stack.  Similarly, results returned by XSUBs (which are pushed on the
d797 1
a797 2
or if you make a variable mortal multiple
times.  Thinking of "Mortalization"
a903 48
=head2 Read-Only Values

In Perl 5.16 and earlier, copy-on-write (see the next section) shared a
flag bit with read-only scalars.  So the only way to test whether
C<sv_setsv>, etc., will raise a "Modification of a read-only value" error
in those versions is:

    SvREADONLY(sv) && !SvIsCOW(sv)

Under Perl 5.18 and later, SvREADONLY only applies to read-only variables,
and, under 5.20, copy-on-write scalars can also be read-only, so the above
check is incorrect.  You just want:

    SvREADONLY(sv)

If you need to do this check often, define your own macro like this:

    #if PERL_VERSION >= 18
    # define SvTRULYREADONLY(sv) SvREADONLY(sv)
    #else
    # define SvTRULYREADONLY(sv) (SvREADONLY(sv) && !SvIsCOW(sv))
    #endif

=head2 Copy on Write

Perl implements a copy-on-write (COW) mechanism for scalars, in which
string copies are not immediately made when requested, but are deferred
until made necessary by one or the other scalar changing.  This is mostly
transparent, but one must take care not to modify string buffers that are
shared by multiple SVs.

You can test whether an SV is using copy-on-write with C<SvIsCOW(sv)>.

You can force an SV to make its own copy of its string buffer by calling C<sv_force_normal(sv)> or SvPV_force_nolen(sv).

If you want to make the SV drop its string buffer, use
C<sv_force_normal_flags(sv, SV_COW_DROP_PV)> or simply
C<sv_setsv(sv, NULL)>.

All of these functions will croak on read-only scalars (see the previous
section for more on those).

To test that your code is behaving correctly and not modifying COW buffers,
on systems that support L<mmap(2)> (i.e., Unix) you can configure perl with
C<-Accflags=-DPERL_DEBUG_READONLY_COW> and it will turn buffer violations
into crashes.  You will find it to be marvellously slow, so you may want to
skip perl's own tests.

d936 1
a936 2
convert C<sv> to type C<SVt_PVMG>.
Perl then continues by adding new magic
d943 1
a943 1
the magic, typically the name of a variable.  C<namlen> is stored in the
d953 2
a954 3
stored in the C<mg_type> field.  The value of
C<how> should be chosen from the set of macros
C<PERL_MAGIC_foo> found in F<perl.h>.  Note that before
d982 1
a982 2
C<SV>.  If you want to remove only certain
magic of a C<type> based on the magic
d1040 2
a1041 3
MGf_COPY, MGf_DUP or MGf_LOCAL is set in mg_flags.
This means that most code can continue declaring
a vtable as a 5-element value.  These three are
d1118 1
a1118 1
of that composite type.  Some internals code makes use of this case
d1173 1
a1173 1
using their magic virtual table.  C<mg_findext> provides an easy way
d1203 1
a1203 2
If the SV does not have that magical
feature, C<NULL> is returned.  If the
d1205 1
a1205 2
returned.  C<mg_findext> can be used
to find a C<MAGIC> structure of an SV
d1227 1
a1227 1
in later releases, and are bracketed with [MAYCHANGE] below.  If
d1236 1
a1236 1
the tie methods.  Lastly it ties the two hashes together, and returns a
d1326 1
a1326 1
the block: C<goto>, C<return>, C<die>/C<eval>, etc.  It is a little bit
d1332 1
a1332 1
die()).  A I<block>-like construct is created by a pair of
d1337 2
a1338 2
used.  (In the second case the overhead of additional localization must
be almost negligible.)  Note that any XSUB is automatically enclosed in
d1361 1
a1361 1
C<p>.  C<s> must be a pointer of a type which survives conversion to
d1399 1
a1399 1
The key C<key> of C<hv> is deleted at the end of I<pseudo-block>.  The
d1444 1
a1444 1
using the stored value.  It doesn't handle magic.  Use C<save_scalar> if
d1496 1
a1496 1
macro.  The pushed values will often need to be "mortal" (See
d1592 67
d1662 2
a1663 2
stack machine) put an SV* on the stack.  However, as an optimization
the corresponding SV is (usually) not recreated each time.  The opcodes
d1677 1
a1677 1
values on the stack.  The following code will not do what you think:
d1714 1
a1714 1
are created.  The answer is that they are created when the current
d1716 1
a1716 1
subroutines)--is compiled.  During this time a special anonymous Perl
d1720 1
a1720 2
targets for opcodes.  A previous version of this document
stated that one can deduce that an SV lives on a scratchpad
d1722 1
a1722 4
I<target>s have C<SVs_PADTMP> set.  But this have never been fully true.
C<SVs_PADMY> could be set on a variable that no longer resides in any pad.
While I<target>s do have C<SVs_PADTMP> set, it can also be set on variables
that have never resided in a pad, but nonetheless act like I<target>s.
d1724 1
a1724 1
The correspondence between OPs and I<target>s is not 1-to-1.  Different
d1731 2
a1732 2
the scratchpad AV.  In fact it contains a pointer to an AV of
(initially) one element, and this element is the scratchpad AV.  Why do
d1735 1
a1735 1
The answer is B<recursion>, and maybe B<threads>.  Both
d1737 1
a1737 1
subroutine.  For the subroutine-child not write over the temporaries
d1740 1
a1740 1
scratchpads.  (I<And> the lexicals should be separate anyway!)
a1749 67
=head1 Memory Allocation

=head2 Allocation

All memory meant to be used with the Perl API functions should be manipulated
using the macros described in this section.  The macros provide the necessary
transparency between differences in the actual malloc implementation that is
used within perl.

It is suggested that you enable the version of malloc that is distributed
with Perl.  It keeps pools of various sizes of unallocated memory in
order to satisfy allocation requests more quickly.  However, on some
platforms, it may cause spurious malloc or free errors.

The following three macros are used to initially allocate memory :

    Newx(pointer, number, type);
    Newxc(pointer, number, type, cast);
    Newxz(pointer, number, type);

The first argument C<pointer> should be the name of a variable that will
point to the newly allocated memory.

The second and third arguments C<number> and C<type> specify how many of
the specified type of data structure should be allocated.  The argument
C<type> is passed to C<sizeof>.  The final argument to C<Newxc>, C<cast>,
should be used if the C<pointer> argument is different from the C<type>
argument.

Unlike the C<Newx> and C<Newxc> macros, the C<Newxz> macro calls C<memzero>
to zero out all the newly allocated memory.

=head2 Reallocation

    Renew(pointer, number, type);
    Renewc(pointer, number, type, cast);
    Safefree(pointer)

These three macros are used to change a memory buffer size or to free a
piece of memory no longer needed.  The arguments to C<Renew> and C<Renewc>
match those of C<New> and C<Newc> with the exception of not needing the
"magic cookie" argument.

=head2 Moving

    Move(source, dest, number, type);
    Copy(source, dest, number, type);
    Zero(dest, number, type);

These three macros are used to move, copy, or zero out previously allocated
memory.  The C<source> and C<dest> arguments point to the source and
destination starting points.  Perl will move, copy, or zero out C<number>
instances of the size of the C<type> data structure (using the C<sizeof>
function).

=head1 PerlIO

The most recent development releases of Perl have been experimenting with
removing Perl's dependency on the "normal" standard I/O suite and allowing
other stdio implementations to be used.  This involves creating a new
abstraction layer that then calls whichever implementation of stdio Perl
was compiled with.  All XSUBs should now use the functions in the PerlIO
abstraction layer and not make any assumptions about what kind of stdio
is being used.

For a complete description of the PerlIO abstraction, consult L<perlapio>.

d1755 1
a1755 1
Perl.  Start with a simple example:
d1828 1
a1828 1
Perl core.  The code which implements each operation can be found in the
d1830 1
a1830 1
is C<pp_gvsv>, and so on.  As the tree above shows, different ops have
d1832 1
a1832 1
expect, and so has two children.  To accommodate the various different
d1836 1
a1836 1
The simplest type of op structure is C<OP>: this has no children.  Unary
d1838 3
a1840 3
C<op_first> field.  Binary operators (C<BINOP>s) have not only an
C<op_first> field but also an C<op_last> field.  The most complex type of
op is a C<LISTOP>, which has any number of children.  In this case, the
d1842 1
a1842 1
C<op_last>.  The children in between can be found by iteratively
d1846 2
a1847 2
and has no children, and a C<LOOP> may or may not have children.  If the
C<op_children> field is non-zero, it behaves like a C<LISTOP>.  To
d1858 1
a1858 1
the constructions it recognizes.  Since I<yacc> works bottom-up, so does
d1877 1
a1877 1
By convention, check routines have names C<ck_*>.  They are usually
d1909 1
a1909 1
is created, an additional pass over the code is performed.  This pass
d1967 1
a1967 1
scope mechanism using C<Perl_blockhook_register>.  This is used like
d1978 1
a1978 1
compiling every lexical scope.  The available hooks are:
d1984 1
a1984 1
This is called just after starting a new lexical scope.  Note that Perl
d1990 2
a1991 2
the second starts at the C<{> and has C<full == 0>.  Both end at the
C<}>, so calls to C<start> and C<pre/post_end> will match.  Anything
d1998 1
a1998 1
stack.  I<o> is the root of the optree representing the scope; it is a
d2004 1
a2004 1
stack.  I<o> is as above.  Note that it is possible for calls to C<pre_>
d2011 1
a2011 1
FILE>, C<require> or C<use>, after the eval has been set up.  I<o> is the
d2018 2
a2019 2
them in.  It's best to allocate it statically, since there is no way to
free it once it's registered.  The function pointers should be inserted
d2021 1
a2021 1
flags indicating which entries are valid.  If you do need to allocate
d2026 1
a2026 1
that is necessary you will need to do this yourself.  An entry in C<%^H>
d2029 1
a2029 1
temporarily switch entries on and off.  You should also be aware that
d2040 1
a2040 1
for dumping SVs, AVs, HVs, and CVs.  The C<Devel::Peek> module calls
d2081 1
a2081 1
One macro controls the major Perl build flavor: MULTIPLICITY.  The
d2083 1
a2083 1
state.  With multiplicity-enabled perls, PERL_IMPLICIT_CONTEXT is also
d2085 1
a2085 1
argument that represents all three data structures.  MULTIPLICITY makes
d2097 1
a2097 1
pointing to it.  In either case the global struct should be initialized
d2126 1
a2126 2
part of the API.  (See L</Internal
Functions>.)  The easiest way to be B<sure> a
d2370 1
a2370 1
Similarly, all global variables begin with C<PL_>.  (By convention,
d2375 1
a2375 1
that live in F<embed.h>.  Note that extension code should I<not> set
d2380 1
a2380 1
F<embed.pl> and F<embed.fnc>.  F<embed.pl> also creates the prototyping
d2382 1
a2382 1
and a lot of other bits and pieces.  It's important that when you add
d2384 1
a2384 1
data in the table in F<embed.fnc> as well.  Here's a sample entry from
d2389 2
a2390 2
The second column is the return type, the third column the name.  Columns
after that are the arguments.  The first column is a set of flags:
d2396 1
a2396 2
This function is a part of the public
API.  All such functions should also
d2445 1
a2445 1
C<Perl_parse> to C<parse>.  It must be called as C<Perl_parse>.
d2525 1
a2525 1
modules.  You have to define C<NO_XSLOCKS> before including F<XSUB.h> to
d2532 1
a2532 1
to do some cleanup before giving control back to Perl.  For example:
d2547 2
a2548 2
caught.  Using these macros, it is not possible to just catch the
exception and ignore it.  If you have to ignore the exception, you
d2560 1
a2560 1
writers.  L<perlintern> is the autogenerated manual for the functions
d2580 2
a2581 3
The Perl API changes over time.  New functions are
added or the interfaces of existing functions are
changed.  The C<Devel::PPPort> module tries to
d2586 1
a2586 1
be run as a Perl script.  To generate F<ppport.h>, run:
d2592 1
a2592 1
command line switch.  For example:
d2600 1
a2600 1
Perl 5.6.0 introduced Unicode support.  It's important for porters and XS
d2606 2
a2607 2
In the olden, less enlightened times, we all used to use ASCII.  Most of
us did, anyway.  The big problem with ASCII is that it's American.  Well,
d2609 1
a2609 1
particularly useful for people who don't use the Roman alphabet.  What
d2611 1
a2611 1
alphabet in the upper range of the sequence, between 128 and 255.  Of
d2623 3
a2625 3
possibly think of and more.  There are several ways of representing these
characters, and the one Perl uses is called UTF-8.  UTF-8 uses
a variable number of bytes to represent a character.  You can learn more
d2630 2
a2631 2
You can't.  This is because UTF-8 data is stored in bytes just like
non-UTF-8 data.  The Unicode character 200, (C<0xC8> for you hex types)
d2633 2
a2634 2
C<v196.172>.  Unfortunately, the non-Unicode string C<chr(196).chr(172)>
has that byte sequence as well.  So you can't tell just by looking - this
d2639 2
a2640 2
you if a string contains only valid UTF-8 characters.  However, it can't
do the work for you.  On a character-by-character basis,
d2647 4
a2650 5
character.  Characters with values 0...127 are stored in one
byte, just like good ol' ASCII.  Character 128 is stored as
C<v194.128>; this continues up to character 191, which is
C<v194.191>.  Now we've run out of bits (191 is binary
C<10111111>) so we move on; 192 is C<v195.128>.  And
d2665 1
a2665 1
over.  You're on your own about bounds checking, though, so don't use it
d2671 1
a2671 1
whether the byte is encoded as a single byte even in UTF-8):
d2698 1
a2698 1
characters.  You may not skip over UTF-8 characters in this case.  If you
d2707 2
a2708 2
slightly differently.  A flag in the SV, C<SVf_UTF8>, indicates that the
string is internally encoded as UTF-8.  Without it, the byte value is the
d2711 1
a2711 3
semantics).  This flag is only meaningful if the SV is C<SvPOK>
or immediately after stringification via C<SvPV> or a similar
macro.  You can check and manipulate this flag with the
d2729 1
a2729 1
manipulating SVs.  More specifically, you cannot expect to do this:
d2741 2
a2742 3
copy or reconstruct an SV just by copying the string value.  Check if the
old SV has the UTF8 flag set (I<after> the C<SvPV> call), and act
accordingly:
d2761 1
a2761 1
one of the strings to UTF-8.  If you've got an SV, the easiest way to do
d2776 2
a2777 2
string argument.  This is useful for having the data available for
comparisons and so on, without harming the original SV.  There's also
d2784 1
a2784 1
Not really.  Just remember these things:
d2790 3
a2792 4
There's no way to tell if a string is UTF-8 or not.  You can tell if an SV
is UTF-8 by looking at its C<SvUTF8> flag after stringifying it
with C<SvPV> or a similar macro.  Don't forget to set the flag if
something should be UTF-8.  Treat the flag as part of the PV, even though
d2808 1
a2808 2
Mixing UTF-8 and non-UTF-8 strings is
tricky.  Use C<bytes_to_utf8> to get
d2816 1
a2816 1
define your own ops.  This is primarily to allow the building of
d2822 1
a2822 1
This feature is implemented as a new op type, C<OP_CUSTOM>.  The Perl
d2824 1
a2824 1
not be involved in any optimizations.  This also means that you can
d2828 5
a2832 5
It's important to know what custom operators won't do for you.  They
won't let you add new syntax to Perl, directly.  They won't even let you
add new keywords, directly.  In fact, they won't change the way Perl
compiles a program at all.  You have to do those changes yourself, after
Perl has compiled the program.  You do this either by manipulating the op
d2838 2
a2839 2
PP function.  This should be defined in XS code, and should look like
the PP ops in C<pp_*.c>.  You are responsible for ensuring that your op
d2844 1
a2844 1
can produce sensible error and warning messages.  Since it is possible to
d2847 1
a2847 1
it is dealing with.  You should create an C<XOP> structure for each
d2850 1
a2850 1
C<Perl_custom_op_register>.  A trivial example might look like:
d2866 1
a2866 1
A short name for your op.  This will be included in some error messages,
d2876 1
a2876 1
Which of the various C<*OP> structures this op uses.  This should be one of
d2899 1
a2899 1
This should be interpreted as 'C<PVOP>' only.  The C<_OR_SVOP> is because
d2913 1
a2913 1
(*Perl_cpeep_t)(aTHX_ OP *o, OP *oldop)>.  If it is set, this function
d2915 1
a2915 1
by the peephole optimizer.  I<o> is the OP that needs optimizing;
@


1.1.1.17
log
@Import perl-5.20.2
@
text
@d1769 1
a1769 1
I<target>s have C<SVs_PADTMP> set.  But this has never been fully true.
@


