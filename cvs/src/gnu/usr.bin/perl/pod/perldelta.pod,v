head	1.16;
access;
symbols
	PERL_5_24_2:1.1.1.10
	OPENBSD_6_1:1.15.0.4
	OPENBSD_6_1_BASE:1.15
	OPENBSD_6_0:1.13.0.4
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.12.0.2
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.12.0.4
	OPENBSD_5_8_BASE:1.12
	PERL_5_20_2:1.1.1.9
	OPENBSD_5_7:1.11.0.2
	OPENBSD_5_7_BASE:1.11
	PERL_5_20_1:1.1.1.8
	OPENBSD_5_6:1.10.0.4
	OPENBSD_5_6_BASE:1.10
	PERL_5_18_2:1.1.1.7
	PERL:1.1.1
	OPENBSD_5_5:1.9.0.6
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.2
	OPENBSD_5_4_BASE:1.9
	PERL_5_16_3:1.1.1.6
	OPENBSD_3_5:1.7.0.2
	OPENBSD_3_5_BASE:1.7
	PERL_5_8_2:1.1.1.5
	OPENBSD_3_4:1.6.0.4
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.6.0.2
	OPENBSD_3_3_BASE:1.6
	PERL_5_8_0:1.1.1.4
	OPENBSD_3_2:1.4.0.6
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.4
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4
	PERL_5_6_1:1.1.1.3
	OPENBSD_2_9:1.3.0.6
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	PERL_5_6_0:1.1.1.2
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	PERL_500503:1.1.1.1
	CPAN:1.1.1
	OPENBSD_2_5:1.1.0.6
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.4
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.2
	OPENBSD_2_3_BASE:1.1;
locks; strict;
comment	@# @;


1.16
date	2017.08.14.13.48.47;	author afresh1;	state Exp;
branches;
next	1.15;
commitid	CrMEpTqBUsxCMTjx;

1.15
date	2017.02.05.00.33.41;	author afresh1;	state Exp;
branches;
next	1.14;
commitid	7JLVNm1wwPgqSqTa;

1.14
date	2017.02.05.00.32.18;	author afresh1;	state Exp;
branches;
next	1.13;
commitid	cxJ08BvJA9Pt2PTM;

1.13
date	2016.07.03.01.08.03;	author afresh1;	state Exp;
branches;
next	1.12;
commitid	GzHqjSTnBjdF7Wcw;

1.12
date	2015.04.25.19.14.47;	author afresh1;	state Exp;
branches;
next	1.11;
commitid	XRK22kO4se3v2i2I;

1.11
date	2014.11.17.20.57.07;	author afresh1;	state Exp;
branches;
next	1.10;
commitid	QP75iYx42Uo7mMxO;

1.10
date	2014.03.24.15.05.32;	author afresh1;	state Exp;
branches;
next	1.9;

1.9
date	2013.03.25.20.44.46;	author sthen;	state Exp;
branches;
next	1.8;

1.8
date	2004.04.07.21.33.08;	author millert;	state dead;
branches;
next	1.7;

1.7
date	2003.12.03.03.02.44;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2003.02.26.18.32.58;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2002.10.27.22.25.32;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2001.05.24.18.35.51;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.06.17.07.21;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	99.04.29.22.52.08;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	97.11.30.07.59.03;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.29.22.40.36;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2000.04.06.16.10.22;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2001.05.24.18.24.31;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2002.10.27.22.15.04;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2003.12.03.02.44.20;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2013.03.25.20.09.18;	author sthen;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2014.03.24.14.59.07;	author afresh1;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2014.11.17.20.53.13;	author afresh1;	state Exp;
branches;
next	1.1.1.9;
commitid	B31cAbBIXiCqnL97;

1.1.1.9
date	2015.04.25.19.10.42;	author afresh1;	state Exp;
branches;
next	1.1.1.10;
commitid	Wpcs5S8qILgEZC7F;

1.1.1.10
date	2017.08.14.13.46.19;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@perl 5.004_04
@


1.16
log
@Fix merge issues, remove excess files - match perl-5.24.2 dist

OK bluhm@@, Reads ok sthen@@
@
text
@=encoding utf8

=head1 NAME

perldelta - what is new for perl v5.24.2

=head1 DESCRIPTION

This document describes differences between the 5.24.1 release and the 5.24.2
release.

If you are upgrading from an earlier release such as 5.24.0, first read
L<perl5241delta>, which describes differences between 5.24.0 and 5.24.1.

=head1 Security

=head2 Improved handling of '.' in @@INC in base.pm

The handling of (the removal of) C<'.'> in C<@@INC> in L<base> has been
improved.  This resolves some problematic behaviour in the approach taken in
Perl 5.24.1, which is probably best described in the following two threads on
the Perl 5 Porters mailing list:
L<http://www.nntp.perl.org/group/perl.perl5.porters/2016/08/msg238991.html>,
L<http://www.nntp.perl.org/group/perl.perl5.porters/2016/10/msg240297.html>.

=head2 "Escaped" colons and relative paths in PATH

On Unix systems, Perl treats any relative paths in the PATH environment
variable as tainted when starting a new process.  Previously, it was allowing a
backslash to escape a colon (unlike the OS), consequently allowing relative
paths to be considered safe if the PATH was set to something like C</\:.>.  The
check has been fixed to treat C<.> as tainted in that example.

=head1 Modules and Pragmata

=head2 Updated Modules and Pragmata

=over 4

=item *

L<base> has been upgraded from version 2.23 to 2.23_01.

=item *

L<Module::CoreList> has been upgraded from version 5.20170114_24 to 5.20170715_24.

=back

=head1 Selected Bug Fixes

=over 4

=item *

Fixed a crash with C<s///l> where it thought it was dealing with UTF-8 when it
wasn't.
L<[perl #129038]|https://rt.perl.org/Ticket/Display.html?id=129038>

=back

=head1 Acknowledgements

Perl 5.24.2 represents approximately 6 months of development since Perl 5.24.1
and contains approximately 2,500 lines of changes across 53 files from 18
authors.

Excluding auto-generated files, documentation and release tools, there were
approximately 960 lines of changes to 17 .pm, .t, .c and .h files.

Perl continues to flourish into its third decade thanks to a vibrant community
of users and developers.  The following people are known to have contributed
the improvements that became Perl 5.24.2:

Aaron Crane, Abigail, Aristotle Pagaltzis, Chris 'BinGOs' Williams, Dan
Collins, David Mitchell, Eric Herman, Father Chrysostomos, James E Keenan, Karl
Williamson, Lukas Mai, Renee Baecker, Ricardo Signes, Sawyer X, Stevan Little,
Steve Hay, Tony Cook, Yves Orton.

The list above is almost certainly incomplete as it is automatically generated
from version control history.  In particular, it does not include the names of
the (very much appreciated) contributors who reported issues to the Perl bug
tracker.

Many of the changes included in this version originated in the CPAN modules
included in Perl's core.  We're grateful to the entire CPAN community for
helping Perl to flourish.

For a more complete list of all of Perl's historical contributors, please see
the F<AUTHORS> file in the Perl source distribution.

=head1 Reporting Bugs

If you find what you think is a bug, you might check the articles recently
posted to the comp.lang.perl.misc newsgroup and the perl bug database at
L<https://rt.perl.org/> .  There may also be information at
L<http://www.perl.org/> , the Perl Home Page.

If you believe you have an unreported bug, please run the L<perlbug> program
included with your release.  Be sure to trim your bug down to a tiny but
sufficient test case.  Your bug report, along with the output of C<perl -V>,
will be sent off to perlbug@@perl.org to be analysed by the Perl porting team.

If the bug you are reporting has security implications which make it
inappropriate to send to a publicly archived mailing list, then see
L<perlsec/SECURITY VULNERABILITY CONTACT INFORMATION>
for details of how to report the issue.

=head1 SEE ALSO

The F<Changes> file for an explanation of how to view exhaustive details on
what changed.

The F<INSTALL> file for how to build Perl.

The F<README> file for general stuff.

The F<Artistic> and F<Copying> files for copyright information.

=cut
@


1.15
log
@Apply local patches - perl-5.24.1
@
text
@d5 1
a5 1
perldelta - what is new for perl v5.24.1
d9 1
a9 1
This document describes differences between the 5.24.0 release and the 5.24.1
d12 2
a13 2
If you are upgrading from an earlier release such as 5.22.0, first read
L<perl5240delta>, which describes differences between 5.22.0 and 5.24.0.
d17 1
a17 1
=head2 B<-Di> switch is now required for PerlIO debugging output
d19 14
a32 94
Previously PerlIO debugging output would be sent to the file specified by the
C<PERLIO_DEBUG> environment variable if perl wasn't running setuid and the
B<-T> or B<-t> switches hadn't been parsed yet.

If perl performed output at a point where it hadn't yet parsed its switches
this could result in perl creating or overwriting the file named by
C<PERLIO_DEBUG> even when the B<-T> switch had been supplied.

Perl now requires the B<-Di> switch to produce PerlIO debugging output.  By
default this is written to C<stderr>, but can optionally be redirected to a
file by setting the C<PERLIO_DEBUG> environment variable.

If perl is running setuid or the B<-T> switch was supplied C<PERLIO_DEBUG> is
ignored and the debugging output is sent to C<stderr> as for any other B<-D>
switch.

=head2 Core modules and tools no longer search F<"."> for optional modules

The tools and many modules supplied in core no longer search the default
current directory entry in L<C<@@INC>|perlvar/@@INC> for optional modules.  For
example, L<Storable> will remove the final F<"."> from C<@@INC> before trying to
load L<Log::Agent>.

This prevents an attacker injecting an optional module into a process run by
another user where the current directory is writable by the attacker, e.g. the
F</tmp> directory.

In most cases this removal should not cause problems, the exception being
L<base>.

L<base> treats every module name supplied as optional.  If you have
applications that use L<base> to load non-optional modules from the current
directory you will need to modify your code or environment.

If your code always trusts the contents of the current directory, the simplest
change is adding F<"."> to C<PERL5LIB>:

  # for Bourne shell and similar
  set PERL5LIB=.
  export PERL5LIB

If you do B<not> trust the current directory this will open your code up to
attacks on any module load, not just optional modules.  You may want to add the
absolute path of your application's module directory to C<PERL5LIB> instead.

Alternatively, you can change your code, either to add the directory with your
binary to C<@@INC>:

  use FindBin;
  use lib $FindBin::Bin;

or switch to L<parent>, which requires an explicit parameter for optional
modules:

  use parent 'Nonoptional::Module';

though this will have the same problem if the current directory is removed from
C<@@INC> in Perl 5.26.

Also, since L<base> now localizes C<@@INC> when loading modules, changes to
C<@@INC> in the loaded module will be discarded when C<@@INC> is restored to its
previous value.

To protect your own code from this attack, either remove the default F<".">
entry from C<@@INC> at the start of your script, so:

  #!/usr/bin/perl
  use strict;
  ...

becomes:

  #!/usr/bin/perl
  BEGIN { pop @@INC if $INC[-1] eq '.' }
  use strict;
  ...

or for modules, remove F<"."> from a localized C<@@INC>, so:

  my $can_foo = eval { require Foo; }

becomes:

  my $can_foo = eval {
      local @@INC = @@INC;
      pop @@INC if $INC[-1] eq '.';
      require Foo;
  };

=head1 Incompatible Changes

Other than the security changes above there are no changes intentionally
incompatible with Perl 5.24.0.  If any exist, they are bugs, and we request
that you submit a report.  See L</Reporting Bugs> below.
a41 4
L<Archive::Tar> has been upgraded from version 2.04 to 2.04_01.

=item *

d46 1
a46 139
L<bignum> has been upgraded from version 0.42 to 0.42_01.

=item *

L<CPAN> has been upgraded from version 2.11 to 2.11_01.

=item *

L<Digest> has been upgraded from version 1.17 to 1.17_01.

=item *

L<Digest::SHA> has been upgraded from version 5.95 to 5.95_01.

=item *

L<Encode> has been upgraded from version 2.80 to 2.80_01.

=item *

L<ExtUtils::MakeMaker> has been upgraded from version 7.10_01 to 7.10_02.

=item *

L<File::Fetch> has been upgraded from version 0.48 to 0.48_01.

=item *

L<File::Spec> has been upgraded from version 3.63 to 3.63_01.

=item *

L<HTTP::Tiny> has been upgraded from version 0.056 to 0.056_001.

=item *

L<IO> has been upgraded from version 1.36 to 1.36_01.

=item *

The IO-Compress modules have been upgraded from version 2.069 to 2.069_001.

=item *

L<IPC::Cmd> has been upgraded from version 0.92 to 0.92_01.

=item *

L<JSON::PP> has been upgraded from version 2.27300 to 2.27300_01.

=item *

L<Locale::Maketext> has been upgraded from version 1.26 to 1.26_01.

=item *

L<Locale::Maketext::Simple> has been upgraded from version 0.21 to 0.21_01.

=item *

L<Memoize> has been upgraded from version 1.03 to 1.03_01.

=item *

L<Module::CoreList> has been upgraded from version 5.20160506 to 5.20170114_24.

=item *

L<Net::Ping> has been upgraded from version 2.43 to 2.43_01.

=item *

L<Parse::CPAN::Meta> has been upgraded from version 1.4417 to 1.4417_001.

=item *

L<Pod::Html> has been upgraded from version 1.22 to 1.2201.

=item *

L<Pod::Perldoc> has been upgraded from version 3.25_02 to 3.25_03.

=item *

L<Storable> has been upgraded from version 2.56 to 2.56_01.

=item *

L<Sys::Syslog> has been upgraded from version 0.33 to 0.33_01.

=item *

L<Test> has been upgraded from version 1.28 to 1.28_01.

=item *

L<Test::Harness> has been upgraded from version 3.36 to 3.36_01.

=item *

L<XSLoader> has been upgraded from version 0.21 to 0.22, fixing a security hole
in which binary files could be loaded from a path outside of C<@@INC>.
L<[perl #128528]|https://rt.perl.org/Public/Bug/Display.html?id=128528>

=back

=head1 Documentation

=head2 Changes to Existing Documentation

=head3 L<perlapio>

=over 4

=item *

The documentation of C<PERLIO_DEBUG> has been updated.

=back

=head3 L<perlrun>

=over 4

=item *

The new B<-Di> switch has been documented, and the documentation of
C<PERLIO_DEBUG> has been updated.

=back

=head1 Testing

=over 4

=item *

A new test script, F<t/run/switchDx.t>, has been added to test that the new
B<-Di> switch is working correctly.
d56 3
a58 4
The change to hashbang redirection introduced in Perl 5.24.0, whereby perl
would redirect to another interpreter (Perl 6) if it found a hashbang path
which contains "perl" followed by "6", has been reverted because it broke in
cases such as C<#!/opt/perl64/bin/perl>.
d64 2
a65 2
Perl 5.24.1 represents approximately 8 months of development since Perl 5.24.0
and contains approximately 8,100 lines of changes across 240 files from 18
d69 1
a69 1
approximately 2,200 lines of changes to 170 .pm, .t, .c and .h files.
d73 1
a73 1
the improvements that became Perl 5.24.1:
d75 4
a78 4
Aaron Crane, Alex Vandiver, Aristotle Pagaltzis, Chad Granum, Chris 'BinGOs'
Williams, Craig A. Berry, Father Chrysostomos, James E Keenan, Jarkko
Hietaniemi, Karen Etheridge, Leon Timmermans, Matthew Horsfall, Ricardo Signes,
Sawyer X, Sébastien Aperghis-Tramoni, Stevan Little, Steve Hay, Tony Cook.
d95 1
a95 1
posted to the comp.lang.perl.misc newsgroup and the Perl bug database at
d106 2
a107 2
L<perlsec/SECURITY VULNERABILITY CONTACT INFORMATION> for details of how to
report the issue.
@


1.14
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@d46 35
a80 4
In most cases this removal should not cause problems, but difficulties were
encountered with L<base>, which treats every module name supplied as optional.
These difficulties have not yet been resolved, so for this release there are no
changes to L<base>.  We hope to have a fix for L<base> in Perl 5.24.2.
d123 4
@


1.13
log
@Update to perl 5.20.3

OK bluhm@@
@
text
@d5 1
a5 1
perldelta - what is new for perl v5.20.3
d9 1
a9 1
This document describes differences between the 5.20.2 release and the 5.20.3
d12 2
a13 2
If you are upgrading from an earlier release such as 5.20.1, first read
L<perl5202delta>, which describes differences between 5.20.1 and 5.20.2.
d15 1
a15 1
=head1 Incompatible Changes
d17 1
a17 3
There are no changes intentionally incompatible with 5.20.2.  If any exist,
they are bugs, and we request that you submit a report.  See L</Reporting Bugs>
below.
d19 3
a21 1
=head1 Modules and Pragmata
d23 3
a25 1
=head2 Updated Modules and Pragmata
d27 3
a29 1
=over 4
d31 3
a33 1
=item *
d35 1
a35 1
L<Errno> has been upgraded from version 1.20_05 to 1.20_06.
d37 4
a40 3
Add B<-P> to the pre-processor command-line on GCC 5.  GCC added extra line
directives, breaking parsing of error code definitions.
L<[perl #123784]|https://rt.perl.org/Ticket/Display.html?id=123784>
d42 3
a44 3
=item *

L<Module::CoreList> has been upgraded from version 5.20150214 to 5.20150822.
d46 4
a49 1
Updated to cover the latest releases of Perl.
d51 2
a52 1
=item *
d54 3
a56 1
L<perl5db.pl> has been upgraded from 1.44 to 1.44_01.
d58 1
a58 2
The debugger would cause an assertion failure.
L<[perl #124127]|https://rt.perl.org/Ticket/Display.html?id=124127>
d60 4
a63 1
=back
d65 1
a65 1
=head1 Documentation
d67 1
a67 1
=head2 Changes to Existing Documentation
d69 1
a69 1
=head3 L<perlfunc>
d71 5
a75 1
=over 4
d77 1
a77 1
=item *
d79 3
a81 1
Mention that L<C<study()>|perlfunc/study> is currently a no-op.
d83 1
a83 1
=back
d85 1
a85 1
=head3 L<perlguts>
d91 3
a93 2
The OOK example has been updated to account for COW changes and a change in the
storage of the offset.
d95 1
a95 1
=back
d97 1
a97 1
=head3 L<perlhacktips>
d99 1
a99 1
=over 4
d103 1
a103 3
Documentation has been added illustrating the perils of assuming the contents
of static memory pointed to by the return values of Perl wrappers for C library
functions doesn't change.
d105 3
a107 1
=back
d109 1
a109 1
=head3 L<perlpodspec>
d111 1
a111 1
=over 4
d115 1
a115 3
The specification of the POD language is changing so that the default encoding
of PODs that aren't in UTF-8 (unless otherwise indicated) is CP1252 instead of
ISO-8859-1 (Latin1).
d117 1
a117 1
=back
d119 1
a119 1
=head1 Utility Changes
d121 1
a121 1
=head2 L<h2ph>
d123 1
a123 1
=over 4
d127 1
a127 3
B<h2ph> now handles hexadecimal constants in the compiler's predefined macro
definitions, as visible in C<$Config{cppsymbols}>.
L<[perl #123784]|https://rt.perl.org/Ticket/Display.html?id=123784>
d129 3
a131 1
=back
d133 1
a133 1
=head1 Testing
d135 1
a135 1
=over 4
d139 1
a139 2
F<t/perf/taint.t> has been added to see if optimisations with taint issues are
keeping things fast.
d143 1
a143 4
F<t/porting/re_context.t> has been added to test that L<utf8> and its
dependencies only use the subset of the C<$1..$n> capture vars that
Perl_save_re_context() is hard-coded to localize, because that function has no
efficient way of determining at runtime what vars to localize.
d145 1
a145 1
=back
d147 1
a147 1
=head1 Platform Support
d149 1
a149 1
=head2 Platform-Specific Notes
d151 1
a151 1
=over 4
d153 1
a153 1
=item Win32
d155 1
a155 1
=over 4
d159 1
a159 4
Previously, when compiling with a 64-bit Visual C++, every Perl XS module
(including CPAN ones) and Perl aware C file would unconditionally have around a
dozen warnings from F<hv_func.h>.  These warnings have been silenced.  GCC (all
bitness) and 32-bit Visual C++ were not affected.
d163 1
a163 3
B<miniperl.exe> is now built with B<-fno-strict-aliasing>, allowing 64-bit
builds to complete with GCC 4.8.
L<[perl #123976]|https://rt.perl.org/Ticket/Display.html?id=123976>
d165 1
a165 1
=back
d167 1
a167 1
=back
d169 1
a169 1
=head1 Selected Bug Fixes
d171 1
a171 1
=over 4
d175 1
a175 3
Repeated global pattern matches in scalar context on large tainted strings were
exponentially slow depending on the current match position in the string.
L<[perl #123202]|https://rt.perl.org/Ticket/Display.html?id=123202>
d179 1
a179 5
The original visible value of L<C<$E<sol>>|perlvar/$E<sol>> is now preserved
when it is set to an invalid value.  Previously if you set C<$/> to a reference
to an array, for example, perl would produce a runtime error and not set PL_rs,
but Perl code that checked C<$/> would see the array reference.
L<[perl #123218]|https://rt.perl.org/Ticket/Display.html?id=123218>
d183 1
a183 3
Perl 5.14.0 introduced a bug whereby C<eval { LABEL: }> would crash.  This has
been fixed.
L<[perl #123652]|https://rt.perl.org/Ticket/Display.html?id=123652>
d187 1
a187 3
Extending an array cloned from a parent thread could result in "Modification of
a read-only value attempted" errors when attempting to modify the new elements.
L<[perl #124127]|https://rt.perl.org/Ticket/Display.html?id=124127>
d191 1
a191 3
Several cases of data used to store environment variable contents in core C
code being potentially overwritten before being used have been fixed.
L<[perl #123748]|https://rt.perl.org/Ticket/Display.html?id=123748>
d195 13
a207 3
UTF-8 variable names used in array indexes, unquoted UTF-8 HERE-document
terminators and UTF-8 function names all now work correctly.
L<[perl #124113]|https://rt.perl.org/Ticket/Display.html?id=124113>
d211 1
a211 4
A subtle bug introduced in Perl 5.20.2 involving UTF-8 in regular expressions
and sometimes causing a crash has been fixed.  A new test script has been added
to test this fix; see under L</Testing>.
L<[perl #124109]|https://rt.perl.org/Ticket/Display.html?id=124109>
d213 3
a215 1
=item *
d217 1
a217 4
Some patterns starting with C</.*..../> matched against long strings have been
slow since Perl 5.8, and some of the form C</.*..../i> have been slow since
Perl 5.18.  They are now all fast again.
L<[perl #123743]|https://rt.perl.org/Ticket/Display.html?id=123743>
d221 4
a224 3
Warning fatality is now ignored when rewinding the stack.  This prevents
infinite recursion when the now fatal error also causes rewinding of the stack.
L<[perl #123398]|https://rt.perl.org/Ticket/Display.html?id=123398>
d226 1
a226 1
=item *
d228 1
a228 2
C<setpgrp($nonzero)> (with one argument) was accidentally changed in Perl 5.16
to mean C<setpgrp(0)>.  This has been fixed.
d232 2
a233 2
A crash with C<< %::=(); J->${\"::"} >> has been fixed.
L<[perl #125541]|https://rt.perl.org/Ticket/Display.html?id=125541>
d235 3
a237 1
=item *
d239 1
a239 5
Regular expression possessive quantifier Perl 5.20 regression now fixed.
C<qr/>I<PAT>C<{>I<min>,I<max>C<}+>C</> is supposed to behave identically to
C<qr/(?E<gt>>I<PAT>C<{>I<min>,I<max>C<})/>.  Since Perl 5.20, this didn't work
if I<min> and I<max> were equal.
L<[perl #125825]|https://rt.perl.org/Ticket/Display.html?id=125825>
d243 4
a246 4
Code like C</$a[/> used to read the next line of input and treat it as though
it came immediately after the opening bracket.  Some invalid code consequently
would parse and run, but some code caused crashes, so this is now disallowed.
L<[perl #123712]|https://rt.perl.org/Ticket/Display.html?id=123712>
d252 2
a253 2
Perl 5.20.3 represents approximately 7 months of development since Perl 5.20.2
and contains approximately 3,200 lines of changes across 99 files from 26
d257 1
a257 1
approximately 1,500 lines of changes to 43 .pm, .t, .c and .h files.
d261 1
a261 1
the improvements that became Perl 5.20.3:
d263 4
a266 6
Alex Vandiver, Andy Dougherty, Aristotle Pagaltzis, Chris 'BinGOs' Williams,
Craig A. Berry, Dagfinn Ilmari Mannsåker, Daniel Dragan, David Mitchell,
Father Chrysostomos, H.Merijn Brand, James E Keenan, James McCoy, Jarkko
Hietaniemi, Karen Etheridge, Karl Williamson, kmx, Lajos Veres, Lukas Mai,
Matthew Horsfall, Petr Písař, Randy Stauner, Ricardo Signes, Sawyer X, Steve
Hay, Tony Cook, Yves Orton.
d283 3
a285 3
posted to the comp.lang.perl.misc newsgroup and the perl bug database at
https://rt.perl.org/ .  There may also be information at
http://www.perl.org/ , the Perl Home Page.
d292 4
a295 9
If the bug you are reporting has security implications, which make it
inappropriate to send to a publicly archived mailing list, then please send it
to perl5-security-report@@perl.org.  This points to a closed subscription
unarchived mailing list, which includes all the core committers, who will be
able to help assess the impact of issues, figure out a resolution, and help
co-ordinate the release of patches to mitigate or fix the problem across all
platforms on which Perl is supported.  Please only use this address for
security issues in the Perl core, not for modules independently distributed on
CPAN.
@


1.12
log
@Fix merge issues, remove excess files - match perl-5.20.2 dist
@
text
@d5 1
a5 1
perldelta - what is new for perl v5.20.2
d9 1
a9 1
This document describes differences between the 5.20.1 release and the 5.20.2
d12 2
a13 2
If you are upgrading from an earlier release such as 5.20.0, first read
L<perl5201delta>, which describes differences between 5.20.0 and 5.20.1.
d17 1
a17 1
There are no changes intentionally incompatible with 5.20.1.  If any exist,
d29 1
a29 1
L<attributes> has been upgraded from version 0.22 to 0.23.
d31 3
a33 2
The usage of C<memEQs> in the XS has been corrected.
L<[perl #122701]|https://rt.perl.org/Ticket/Display.html?id=122701>
d37 1
a37 1
L<Data::Dumper> has been upgraded from version 2.151 to 2.151_01.
d39 1
a39 2
Fixes CVE-2014-4330 by adding a configuration variable/option to limit
recursion when dumping deep data structures.
d43 1
a43 1
L<Errno> has been upgraded from version 1.20_03 to 1.20_05.
d45 2
a46 2
Warnings when building the XS on Windows with the Visual C++ compiler are now
avoided.
d48 1
a48 1
=item *
d50 1
a50 1
L<feature> has been upgraded from version 1.36 to 1.36_01.
d52 1
a52 3
The C<postderef> feature has now been documented.  This feature was actually
added in Perl 5.20.0 but was accidentally omitted from the feature
documentation until now.
d54 1
a54 1
=item *
d56 1
a56 42
L<IO::Socket> has been upgraded from version 1.37 to 1.38.

Document the limitations of the connected() method.
L<[perl #123096]|https://rt.perl.org/Ticket/Display.html?id=123096>

=item *

L<Module::CoreList> has been upgraded from version 5.020001 to 5.20150214.

The list of Perl versions covered has been updated.

=item *

PathTools has been upgraded from version 3.48 to 3.48_01.

A warning from the B<gcc> compiler is now avoided when building the XS.

=item *

L<PerlIO::scalar> has been upgraded from version 0.18 to 0.18_01.

Reading from a position well past the end of the scalar now correctly returns
end of file.
L<[perl #123443]|https://rt.perl.org/Ticket/Display.html?id=123443>

Seeking to a negative position still fails, but no longer leaves the file
position set to a negation location.

C<eof()> on a C<PerlIO::scalar> handle now properly returns true when the file
position is past the 2GB mark on 32-bit systems.

=item *

L<Storable> has been upgraded from version 2.49 to 2.49_01.

Minor grammatical change to the documentation only.

=item *

L<VMS::DCLsym> has been upgraded from version 1.05 to 1.05_01.

Minor formatting change to the documentation only.
d60 1
a60 3
L<VMS::Stdio> has been upgraded from version 2.4 to 2.41.

Minor formatting change to the documentation only.
d64 1
a64 12
=head1 Documentation

=head2 New Documentation

=head3 L<perlunicook>

This document, by Tom Christiansen, provides examples of handling Unicode in
Perl.

=head2 Changes to Existing Documentation

=head3 L<perlexperiment>
d70 2
a71 3
Added reference to subroutine signatures.  This feature was actually added in
Perl 5.20.0 but was accidentally omitted from the experimental feature
documentation until now.
d75 1
a75 1
=head3 L<perlpolicy>
d81 3
a83 2
The process whereby features may graduate from experimental status has now been
formally documented.
d87 1
a87 1
=head3 L<perlsyn>
d93 3
a95 2
An ambiguity in the documentation of the ellipsis statement has been corrected.
L<[perl #122661]|https://rt.perl.org/Ticket/Display.html?id=122661>
d99 1
a99 5
=head1 Diagnostics

The following additions or changes have been made to diagnostic output,
including warnings and fatal error messages.  For the complete list of
diagnostic messages, see L<perldiag>.
d101 1
a101 1
=head2 Changes to Existing Diagnostics
d107 3
a109 7
L<Bad symbol for scalar|perldiag/"Bad symbol for scalar"> is now documented.
This error is not new, but was not previously documented here.

=item *

L<Missing right brace on \N{}|perldiag/"Missing right brace on \N{}"> is now
documented.  This error is not new, but was not previously documented here.
d119 9
a127 3
The test script F<re/rt122747.t> has been added to verify that
L<perl #122747|https://rt.perl.org/Ticket/Display.html?id=122747> remains
fixed.
d133 1
a133 1
=head2 Regained Platforms
d135 1
a135 2
IRIX and Tru64 platforms are working again.  (Some C<make test> failures
remain.)
d137 1
a137 1
=head1 Selected Bug Fixes
d143 4
a146 4
AIX now sets the length in C<< getsockopt >> correctly.
L<[perl #120835]|https://rt.perl.org/Ticket/Display.html?id=120835>,
L<[cpan #91183]|https://rt.cpan.org/Ticket/Display.html?id=91183>,
L<[cpan #85570]|https://rt.cpan.org/Ticket/Display.html?id=85570>
d150 3
a152 4
In Perl 5.20.0, C<$^N> accidentally had the internal UTF8 flag turned off if
accessed from a code block within a regular expression, effectively
UTF8-encoding the value.  This has been fixed.
L<[perl #123135]|https://rt.perl.org/Ticket/Display.html?id=123135>
d154 1
a154 1
=item *
d156 1
a156 2
Various cases where the name of a sub is used (autoload, overloading, error
messages) used to crash for lexical subs, but have been fixed.
d158 1
a158 1
=item *
d160 1
a160 3
An assertion failure when parsing C<sort> with debugging enabled has been
fixed.
L<[perl #122771]|https://rt.perl.org/Ticket/Display.html?id=122771>
d164 3
a166 4
Loading UTF8 tables during a regular expression match could cause assertion
failures under debugging builds if the previous match used the very same
regular expression.
L<[perl #122747]|https://rt.perl.org/Ticket/Display.html?id=122747>
d170 5
a174 6
Due to a mistake in the string-copying logic, copying the value of a state
variable could instead steal the value and undefine the variable.  This bug,
introduced in Perl 5.20, would happen mostly for long strings (1250 chars or
more), but could happen for any strings under builds with copy-on-write
disabled.
L<[perl #123029]|https://rt.perl.org/Ticket/Display.html?id=123029>
d178 3
a180 3
Fixed a bug that could cause perl to execute an infinite loop during
compilation.
L<[perl #122995]|https://rt.perl.org/Ticket/Display.html?id=122995>
d184 3
a186 4
On Win32, restoring in a child pseudo-process a variable that was C<local()>ed
in a parent pseudo-process before the C<fork> happened caused memory corruption
and a crash in the child pseudo-process (and therefore OS process).
L<[perl #40565]|https://rt.perl.org/Ticket/Display.html?id=40565>
d190 3
a192 3
Tainted constants evaluated at compile time no longer cause unrelated
statements to become tainted.
L<[perl #122669]|https://rt.perl.org/Ticket/Display.html?id=122669>
d196 3
a198 4
Calling C<write> on a format with a C<^**> field could produce a panic in
sv_chop() if there were insufficient arguments or if the variable used to fill
the field was empty.
L<[perl #123245]|https://rt.perl.org/Ticket/Display.html?id=123245>
d202 4
a205 5
In Perl 5.20.0, C<sort CORE::fake> where 'fake' is anything other than a
keyword started chopping of the last 6 characters and treating the result as a
sort sub name.  The previous behaviour of treating "CORE::fake" as a sort sub
name has been restored.
L<[perl #123410]|https://rt.perl.org/Ticket/Display.html?id=123410>
d209 4
a212 6
A bug in regular expression patterns that could lead to segfaults and other
crashes has been fixed.  This occurred only in patterns compiled with C<"/i">,
while taking into account the current POSIX locale (this usually means they
have to be compiled within the scope of C<S<"use locale">>), and there must be
a string of at least 128 consecutive bytes to match.
L<[perl #123539]|https://rt.perl.org/Ticket/Display.html?id=123539>
d216 3
a218 2
C<qr/@@array(?{block})/> no longer dies with "Bizarre copy of ARRAY".
L<[perl #123344]|https://rt.perl.org/Ticket/Display.html?id=123344>
d222 2
a223 2
C<gmtime> no longer crashes with not-a-number values.
L<[perl #123495]|https://rt.perl.org/Ticket/Display.html?id=123495>
d227 2
a228 4
Certain syntax errors in substitutions, such as C<< s/${<>{})// >>, would
crash, and had done so since Perl 5.10.  (In some cases the crash did not start
happening until Perl 5.16.)  The crash has, of course, been fixed.
L<[perl #123542]|https://rt.perl.org/Ticket/Display.html?id=123542>
d232 5
a236 35
A memory leak in some regular expressions, introduced in Perl 5.20.1, has been
fixed.
L<[perl #123198]|https://rt.perl.org/Ticket/Display.html?id=123198>

=item *

C<< formline("@@...", "a"); >> would crash.  The C<FF_CHECKNL> case in
pp_formline() didn't set the pointer used to mark the chop position, which led
to the C<FF_MORE> case crashing with a segmentation fault.  This has been
fixed.
L<[perl #123538]|https://rt.perl.org/Ticket/Display.html?id=123538>
L<[perl #123622]|https://rt.perl.org/Ticket/Display.html?id=123622>

=item *

A possible buffer overrun and crash when parsing a literal pattern during
regular expression compilation has been fixed.
L<[perl #123604]|https://rt.perl.org/Ticket/Display.html?id=123604>

=back

=head1 Known Problems

=over 4

=item *

It is a known bug that lexical subroutines cannot be used as the C<SUBNAME>
argument to C<sort>.  This will be fixed in a future version of Perl.

=back

=head1 Errata From Previous Releases

=over 4
d240 4
a243 5
A regression has been fixed that was introduced in Perl 5.20.0 (fixed in Perl
5.20.1 as well as here) in which a UTF-8 encoded regular expression pattern
that contains a single ASCII lowercase letter does not match its uppercase
counterpart.
L<[perl #122655]|https://rt.perl.org/Ticket/Display.html?id=122655>
d249 2
a250 2
Perl 5.20.2 represents approximately 5 months of development since Perl 5.20.1
and contains approximately 6,300 lines of changes across 170 files from 34
d254 1
a254 1
approximately 1,900 lines of changes to 80 .pm, .t, .c and .h files.
d258 1
a258 1
the improvements that became Perl 5.20.2:
d260 6
a265 8
Aaron Crane, Abigail, Andreas Voegele, Andy Dougherty, Anthony Heading,
Aristotle Pagaltzis, Chris 'BinGOs' Williams, Craig A. Berry, Daniel Dragan,
Doug Bell, Ed J, Father Chrysostomos, Glenn D. Golden, H.Merijn Brand, Hugo van
der Sanden, James E Keenan, Jarkko Hietaniemi, Jim Cromie, Karen Etheridge,
Karl Williamson, kmx, Matthew Horsfall, Max Maischein, Peter Martini, Rafael
Garcia-Suarez, Ricardo Signes, Shlomi Fish, Slaven Rezic, Steffen Müller,
Steve Hay, Tadeusz Sośnierz, Tony Cook, Yves Orton, Ævar Arnfjörð
Bjarmason.
d283 2
a284 2
https://rt.perl.org/ .  There may also be information at http://www.perl.org/ ,
the Perl Home Page.
@


1.11
log
@Fix merge conflicts, remove extra files, match upstream perl-5.20.1

ok deraadt@@ sthen@@ espie@@ miod@@
@
text
@d5 1
a5 1
perldelta - what is new for perl v5.20.1
d9 1
a9 1
This document describes differences between the 5.20.0 release and the 5.20.1
d12 2
a13 2
If you are upgrading from an earlier release such as 5.18.0, first read
L<perl5200delta>, which describes differences between 5.18.0 and 5.20.0.
d17 1
a17 1
There are no changes intentionally incompatible with 5.20.0.  If any exist,
d21 3
a23 1
=head1 Performance Enhancements
d29 4
a32 4
An optimization to avoid problems with COW and deliberately overallocated PVs
has been disabled because it interfered with another, more important,
optimization, causing a slowdown on some platforms.
L<[perl #121975]|https://rt.perl.org/Ticket/Display.html?id=121975>
d36 1
a36 3
Returning a string from a lexical variable could be slow in some cases.  This
has now been fixed.
L<[perl #121977]|https://rt.perl.org/Ticket/Display.html?id=121977>
d38 2
a39 1
=back
d41 1
a41 1
=head1 Modules and Pragmata
d43 1
a43 1
=head2 Updated Modules and Pragmata
d45 2
a46 1
=over 4
d50 1
a50 1
L<Config::Perl::V> has been upgraded from version 0.20 to 0.22.
d52 3
a54 2
The list of Perl versions covered has been updated and some flaws in the
parsing have been fixed.
d58 1
a58 1
L<Exporter> has been upgraded from version 5.70 to 5.71.
d60 2
a61 1
Illegal POD syntax in the documentation has been corrected.
d65 1
a65 1
L<ExtUtils::CBuilder> has been upgraded from version 0.280216 to 0.280217.
d67 1
a67 1
Android builds now link to both B<-lperl> and C<$Config::Config{perllibs}>.
d71 1
a71 1
L<File::Copy> has been upgraded from version 2.29 to 2.30.
d73 1
a73 1
The documentation now notes that C<copy> will not overwrite read-only files.
d77 1
a77 1
L<Module::CoreList> has been upgraded from version 3.11 to 5.020001.
d79 3
a81 1
The list of Perl versions covered has been updated.
d83 2
a84 1
=item *
d86 2
a87 5
The PathTools module collection has been upgraded from version 3.47 to 3.48.

Fallbacks are now in place when cross-compiling for Android and
C<$Config::Config{sh}> is not yet defined.
L<[perl #121963]|https://rt.perl.org/Ticket/Display.html?id=121963>
d91 1
a91 1
L<PerlIO::via> has been upgraded from version 0.14 to 0.15.
d93 1
a93 1
A minor portability improvement has been made to the XS implementation.
d97 1
a97 1
L<Unicode::UCD> has been upgraded from version 0.57 to 0.58.
d99 1
a99 1
The documentation includes many clarifications and fixes.
d103 1
a103 1
L<utf8> has been upgraded from version 1.13 to 1.13_01.
d105 1
a105 1
The documentation has some minor formatting improvements.
d107 1
a107 1
=item *
d109 1
a109 1
L<version> has been upgraded from version 0.9908 to 0.9909.
d111 1
a111 5
External libraries and Perl may have different ideas of what the locale is.
This is problematic when parsing version strings if the locale's numeric
separator has been changed.  Version parsing has been patched to ensure it
handles the locales correctly.
L<[perl #121930]|https://rt.perl.org/Ticket/Display.html?id=121930>
d113 1
a113 1
=back
d115 2
a116 1
=head1 Documentation
d120 1
a120 1
=head3 L<perlapi>
d126 3
a128 3
C<av_len> - Emphasize that this returns the highest index in the array, not the
size of the array.
L<[perl #120386]|https://rt.perl.org/Ticket/Display.html?id=120386>
d130 1
a130 1
=item *
d132 1
a132 1
Note that C<SvSetSV> doesn't do set magic.
d134 1
a134 5
=item *

C<sv_usepvn_flags> - Fix documentation to mention the use of C<NewX> instead of
C<malloc>.
L<[perl #121869]|https://rt.perl.org/Ticket/Display.html?id=121869>
d138 2
a139 1
Clarify where C<NUL> may be embedded or is required to terminate a string.
d143 1
a143 1
=head3 L<perlfunc>
d149 4
a152 1
Clarify the meaning of C<-B> and C<-T>.
d154 1
a154 1
=item *
d156 3
a158 3
C<-l> now notes that it will return false if symlinks aren't supported by the
file system.
L<[perl #121523]|https://rt.perl.org/Ticket/Display.html?id=121523>
d160 1
a160 1
=item *
d162 1
a162 3
Note that C<each>, C<keys> and C<values> may produce different orderings for
tied hashes compared to other perl hashes.
L<[perl #121404]|https://rt.perl.org/Ticket/Display.html?id=121404>
d166 2
a167 4
Note that C<exec LIST> and C<system LIST> may fall back to the shell on Win32.
Only C<exec PROGRAM LIST> and C<system PROGRAM LIST> indirect object syntax
will reliably avoid using the shell.  This has also been noted in L<perlport>.
L<[perl #122046]|https://rt.perl.org/Ticket/Display.html?id=122046>
d171 2
a172 2
Clarify the meaning of C<our>.
L<[perl #122132]|https://rt.perl.org/Ticket/Display.html?id=122132>
d176 1
a176 1
=head3 L<perlguts>
d182 3
a184 2
Explain various ways of modifying an existing SV's buffer.
L<[perl #116925]|https://rt.perl.org/Ticket/Display.html?id=116925>
d188 1
a188 1
=head3 L<perlpolicy>
d190 1
a190 1
=over 4
d192 2
a193 1
=item *
d195 1
a195 6
We now have a code of conduct for the I<< p5p >> mailing list, as documented in
L<< perlpolicy/STANDARDS OF CONDUCT >>.

=back

=head3 L<perlre>
d201 4
a204 2
The C</x> modifier has been clarified to note that comments cannot be continued
onto the next line by escaping them.
d206 1
a206 1
=back
d208 4
a211 3
=head3 L<perlsyn>

=over 4
d215 2
a216 2
Mention the use of empty conditionals in C<for>/C<while> loops for infinite
loops.
d218 1
a218 1
=back
d220 3
a222 3
=head3 L<perlxs>

=over 4
d226 4
a229 1
Added a discussion of locale issues in XS code.
d231 1
a231 1
=back
d233 6
a238 1
=head1 Diagnostics
d240 1
a240 3
The following additions or changes have been made to diagnostic output,
including warnings and fatal error messages.  For the complete list of
diagnostic messages, see L<perldiag>.
d242 3
a244 3
=head2 Changes to Existing Diagnostics

=over 4
d248 4
a251 1
L<Variable length lookbehind not implemented in regex mE<sol>%sE<sol>|perldiag/"Variable length lookbehind not implemented in regex m/%s/">
d253 1
a253 1
Information about Unicode behaviour has been added.
d255 3
a257 1
=back
d259 1
a259 1
=head1 Configuration and Compilation
d261 4
a264 1
=over 4
d268 5
a272 3
Building Perl no longer writes to the source tree when configured with
F<Configure>'s B<-Dmksymlinks> option.
L<[perl #121585]|https://rt.perl.org/Ticket/Display.html?id=121585>
d274 1
a274 1
=back
d276 6
a281 1
=head1 Platform Support
d283 1
a283 1
=head2 Platform-Specific Notes
d285 2
a286 1
=over 4
d288 1
a288 1
=item Android
d290 2
a291 2
Build support has been improved for cross-compiling in general and for Android
in particular.
d293 1
a293 1
=item OpenBSD
d295 4
a298 2
Corrected architectures and version numbers used in configuration hints when
building Perl.
d300 1
a300 1
=item Solaris
d302 3
a304 2
B<c99> options have been cleaned up, hints look for B<solstudio> as well as
B<SUNWspro>, and support for native C<setenv> has been added.
d306 1
a306 1
=item VMS
d308 3
a310 1
An old bug in feature checking, mainly affecting pre-7.3 systems, has been
d312 2
d315 1
a315 1
=item Windows
d317 3
a319 1
C<%I64d> is now being used instead of C<%lld> for MinGW.
d323 1
a323 1
=head1 Internal Changes
d329 2
a330 5
Added L<perlapi/sync_locale>.
Changing the program's locale should be avoided by XS code.  Nevertheless,
certain non-Perl libraries called from XS, such as C<Gtk> do so.  When this
happens, Perl needs to be told that the locale has changed.  Use this function
to do so, before returning to Perl.
d334 1
a334 1
=head1 Selected Bug Fixes
d340 5
a344 25
A bug has been fixed where zero-length assertions and code blocks inside of a
regex could cause C<pos> to see an incorrect value.
L<[perl #122460]|https://rt.perl.org/Ticket/Display.html?id=122460>

=item *

Using C<s///e> on tainted utf8 strings could issue bogus "Malformed UTF-8
character (unexpected end of string)" warnings.  This has now been fixed.
L<[perl #122148]|https://rt.perl.org/Ticket/Display.html?id=122148>

=item *

C<system> and friends should now work properly on more Android builds.

Due to an oversight, the value specified through B<-Dtargetsh> to F<Configure>
would end up being ignored by some of the build process.  This caused perls
cross-compiled for Android to end up with defective versions of C<system>,
C<exec> and backticks: the commands would end up looking for F</bin/sh> instead
of F</system/bin/sh>, and so would fail for the vast majority of devices,
leaving C<$!> as C<ENOENT>.

=item *

Many issues have been detected by L<Coverity|http://www.coverity.com/> and 
fixed.
d350 2
a351 2
Perl 5.20.1 represents approximately 4 months of development since Perl 5.20.0
and contains approximately 12,000 lines of changes across 170 files from 36
d355 1
a355 1
approximately 2,600 lines of changes to 110 .pm, .t, .c and .h files.
d359 1
a359 1
the improvements that became Perl 5.20.1:
d361 8
a368 8
Aaron Crane, Abigail, Alberto Simões, Alexandr Ciornii, Alexandre (Midnite)
Jousset, Andrew Fresh, Andy Dougherty, Brian Fraser, Chris 'BinGOs' Williams,
Craig A. Berry, Daniel Dragan, David Golden, David Mitchell, H.Merijn Brand,
James E Keenan, Jan Dubois, Jarkko Hietaniemi, John Peacock, kafka, Karen
Etheridge, Karl Williamson, Lukas Mai, Matthew Horsfall, Michael Bunk, Peter
Martini, Rafael Garcia-Suarez, Reini Urban, Ricardo Signes, Shirakata Kentaro,
Smylers, Steve Hay, Thomas Sibley, Todd Rinaldo, Tony Cook, Vladimir Marek,
Yves Orton.
@


1.10
log
@Merge perl-5.18.2 plus local patches, remove old files

OK espie@@ sthen@@ deraadt@@
@
text
@d5 1
a5 1
perldelta - what is new for perl v5.18.2
d9 1
a9 1
This document describes differences between the 5.18.1 release and the 5.18.2
d13 26
a38 1
L<perl5181delta>, which describes differences between 5.18.0 and 5.18.1.
d48 40
a87 1
L<B> has been upgraded from version 1.42_01 to 1.42_02.
d89 1
a89 4
The fix for [perl #118525] introduced a regression in the behaviour of
C<B::CV::GV>, changing the return value from a C<B::SPECIAL> object on
a C<NULL> C<CvGV> to C<undef>.  C<B::CV::GV> again returns a
C<B::SPECIAL> object in this case.  [perl #119413]
d93 1
a93 1
L<B::Concise> has been upgraded from version 0.95 to 0.95_01.
d95 1
a95 1
This fixes a bug in dumping unexpected SEPCIALs.
d99 3
a101 2
L<English> has been upgraded from version 1.06 to 1.06_01.  This fixes an
error about the performance of C<$`>, C<$&>, and c<$'>.
d105 7
a111 1
L<File::Glob> has been upgraded from version 1.20 to 1.20_01.
d119 2
d125 13
a137 1
L<perlrepository> has been restored with a pointer to more useful pages.
d141 1
a141 1
L<perlhack> has been updated with the latest changes from blead.
d145 46
a190 1
=head1 Selected Bug Fixes
d196 8
a203 3
Perl 5.18.1 introduced a regression along with a bugfix for lexical subs.
Some B::SPECIAL results from B::CV::GV became undefs instead.  This broke
Devel::Cover among other libraries.  This has been fixed.  [perl #119351]
d207 8
a214 3
Perl 5.18.0 introduced a regression whereby C<[:^ascii:]>, if used in the same
character class as other qualifiers, would fail to match characters in the
Latin-1 block.  This has been fixed.  [perl #120799]
d218 8
a225 3
Perl 5.18.0 introduced a regression when using ->SUPER::method with AUTOLOAD
by looking up AUTOLOAD from the current package, rather than the current
package’s superclass.  This has been fixed. [perl #120694]
d229 13
a241 3
Perl 5.18.0 introduced a regression whereby C<-bareword> was no longer
permitted under the C<strict> and C<integer> pragmata when used together.  This
has been fixed.  [perl #120288]
d245 9
a253 3
Previously PerlIOBase_dup didn't check if pushing the new layer succeeded
before (optionally) setting the utf8 flag. This could cause
segfaults-by-nullpointer.  This has been fixed.
d257 41
a297 1
A buffer overflow with very long identifiers has been fixed.
d301 5
a305 3
A regression from 5.16 in the handling of padranges led to assertion failures
if a keyword plugin declined to handle the second ‘my’, but only after creating
a padop.
d307 7
a313 1
This affected, at least, Devel::CallParser under threaded builds.
d315 3
a317 1
This has been fixed
d321 19
a339 2
The construct C<< $r=qr/.../; /$r/p >> is now handled properly, an issue which
had been worsened by changes 5.18.0. [perl #118213]
d345 2
a346 2
Perl 5.18.2 represents approximately 3 months of development since Perl
5.18.1 and contains approximately 980 lines of changes across 39 files from 4
d349 20
a368 10
Perl continues to flourish into its third decade thanks to a vibrant
community of users and developers. The following people are known to have
contributed the improvements that became Perl 5.18.2:

Craig A. Berry, David Mitchell, Ricardo Signes, Tony Cook.

The list above is almost certainly incomplete as it is automatically
generated from version control history. In particular, it does not include
the names of the (very much appreciated) contributors who reported issues to
the Perl bug tracker.
d371 1
a371 1
included in Perl's core. We're grateful to the entire CPAN community for
d381 2
a382 2
http://rt.perl.org/perlbug/ .  There may also be information at
http://www.perl.org/ , the Perl Home Page.
@


1.9
log
@merge/resolve conflicts/add files
@
text
@d5 1
a5 1
perldelta - what is new for perl v5.16.3
d9 2
a10 2
This document describes differences between the 5.16.2 release and
the 5.16.3 release.
d12 2
a13 3
If you are upgrading from an earlier release such as 5.16.1, first read
L<perl5162delta>, which describes differences between 5.16.1 and
5.16.2.
d15 1
a15 1
=head1 Core Enhancements
d17 1
a17 1
No changes since 5.16.0.
d19 3
a21 1
=head1 Security
d23 1
a23 3
This release contains one major and a number of minor security fixes.
These latter are included mainly to allow the test suite to pass cleanly
with the clang compiler's address sanitizer facility.
d25 4
a28 1
=head2 CVE-2013-1667: memory exhaustion with arbitrary hash keys
d30 1
a30 3
With a carefully crafted set of hash keys (for example arguments on a
URL), it is possible to cause a hash to consume a large amount of memory
and CPU, and thus possibly to achieve a Denial-of-Service.
d32 1
a32 1
This problem has been fixed.
d34 1
a34 1
=head2 wrap-around with IO on long strings
d36 1
a36 2
Reading or writing strings greater than 2**31 bytes in size could segfault
due to integer wraparound.
d38 2
a39 1
This problem has been fixed.
d41 1
a41 1
=head2 memory leak in Encode
d43 1
a43 2
The UTF-8 encoding implementation in Encode.xs had a memory leak which has been
fixed.
d45 1
a45 1
=head1 Incompatible Changes
d47 1
a47 2
There are no changes intentionally incompatible with 5.16.0. If any
exist, they are bugs and reports are welcome.
d49 1
a49 1
=head1 Deprecations
d51 1
a51 1
There have been no deprecations since 5.16.0.
d53 9
a61 1
=head1 Modules and Pragmata
d63 1
a63 1
=head2 Updated Modules and Pragmata
d69 3
a71 1
L<Encode> has been upgraded from version 2.44 to version 2.44_01.
d75 3
a77 1
L<Module::CoreList> has been upgraded from version 2.76 to version 2.76_02.
d81 3
a83 1
L<XS::APItest> has been upgraded from version 0.38 to version 0.39.
d85 27
a111 1
=back
d113 2
a114 1
=head1 Known Problems
d116 1
a116 1
None.
d120 18
a137 14
Perl 5.16.3 represents approximately 4 months of development since Perl 5.16.2
and contains approximately 870 lines of changes across 39 files from 7 authors.

Perl continues to flourish into its third decade thanks to a vibrant community
of users and developers. The following people are known to have contributed the
improvements that became Perl 5.16.3:

Andy Dougherty, Chris 'BinGOs' Williams, Dave Rolsky, David Mitchell, Michael
Schroeder, Ricardo Signes, Yves Orton.

The list above is almost certainly incomplete as it is automatically generated
from version control history. In particular, it does not include the names of
the (very much appreciated) contributors who reported issues to the Perl bug
tracker.
d144 9
a152 10
If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the perl
bug database at http://rt.perl.org/perlbug/ .  There may also be
information at http://www.perl.org/ , the Perl Home Page.

If you believe you have an unreported bug, please run the L<perlbug>
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of C<perl -V>, will be sent off to perlbug@@perl.org to be
analysed by the Perl porting team.
d155 8
a162 8
inappropriate to send to a publicly archived mailing list, then please
send it to perl5-security-report@@perl.org. This points to a closed
subscription unarchived mailing list, which includes all the core
committers, who will be able to help assess the impact of issues, figure
out a resolution, and help co-ordinate the release of patches to
mitigate or fix the problem across all platforms on which Perl is
supported. Please only use this address for security issues in the Perl
core, not for modules independently distributed on CPAN.
d166 2
a167 2
The F<Changes> file for an explanation of how to view exhaustive details
on what changed.
@


1.8
log
@merge local changes into perl-5.8.3
@
text
@d1 2
d5 1
a5 1
perldelta - what is new for perl v5.8.2
d9 2
a10 2
This document describes differences between the 5.8.1 release and
the 5.8.2 release.
d12 3
a14 4
If you are upgrading from an earlier release such as 5.6.1, first read
the L<perl58delta>, which describes differences between 5.6.0 and
5.8.0, and the L<perl581delta>, which describes differences between
5.8.0 and 5.8.1.
d16 1
a16 1
=head1 Incompatible Changes
d18 1
a18 9
For threaded builds for modules calling certain re-entrant system calls,
binary compatibility was accidentally lost between 5.8.0 and 5.8.1.
Binary compatibility with 5.8.0 has been restored in 5.8.2, which
necessitates breaking compatibility with 5.8.1. We see this as the
lesser of two evils.

This will only affect people who have a threaded perl 5.8.1, and compiled
modules which use these calls, and now attempt to run the compiled modules
with 5.8.2. The fix is to re-compile and re-install the modules using 5.8.2.
d20 1
a20 1
=head1 Core Enhancements
d22 3
a24 1
=head2 Hash Randomisation
d26 1
a26 10
The hash randomisation introduced with 5.8.1 has been amended. It
transpired that although the implementation introduced in 5.8.1 was source
compatible with 5.8.0, it was not binary compatible in certain cases. 5.8.2
contains an improved implementation which is both source and binary
compatible with both 5.8.0 and 5.8.1, and remains robust against the form of
attack which prompted the change for 5.8.1.

We are grateful to the Debian project for their input in this area.
See L<perlsec/"Algorithmic Complexity Attacks"> for the original
rationale behind this change.
d28 3
a30 1
=head2 Threading
d32 1
a32 2
Several memory leaks associated with variables shared between threads
have been fixed.
d34 1
a34 1
=head1 Modules and Pragmata
d36 2
a37 1
=head2 Updated Modules And Pragmata
d39 1
a39 1
The following modules and pragmata have been updated since Perl 5.8.1:
d41 1
a41 1
=over 4
d43 2
a44 1
=item Devel::PPPort
d46 1
a46 1
=item Digest::MD5
d48 2
a49 1
=item I18N::LangTags
d51 1
a51 1
=item libnet
d53 1
a53 1
=item MIME::Base64
d55 1
a55 1
=item Pod::Perldoc
d57 1
a57 1
=item strict
d59 1
a59 1
Documentation improved
d61 1
a61 1
=item Tie::Hash
d63 1
a63 1
Documentation improved
d65 1
a65 1
=item Time::HiRes
d67 1
a67 1
=item Unicode::Collate
d69 1
a69 1
=item Unicode::Normalize
d71 1
a71 3
=item UNIVERSAL

Documentation improved
d75 1
a75 4
=head1 Selected Bug Fixes

Some syntax errors involving unrecognized filetest operators are now handled
correctly by the parser.
d77 1
a77 1
=head1 Changed Internals
d79 1
a79 3
Interpreter initialization is more complete when -DMULTIPLICITY is off.
This should resolve problems with initializing and destroying the Perl
interpreter more than once in a single process.                      
d81 2
a82 1
=head1 Platform Specific Problems
d84 3
a86 2
Dynamic linker flags have been tweaked for Solaris and OS X, which should
solve problems seen while building some XS modules.
d88 2
a89 1
Bugs in OS/2 sockets and tmpfile have been fixed.
d91 4
a94 2
In OS X C<setreuid> and friends are troublesome - perl will now work
around their problems as best possible.
d96 2
a97 29
=head1 Future Directions

Starting with 5.8.3 we intend to make more frequent maintenance releases,
with a smaller number of changes in each. The intent is to propagate
bug fixes out to stable releases more rapidly and make upgrading stable
releases less of an upheaval. This should give end users more
flexibility in their choice of upgrade timing, and allow them easier
assessment of the impact of upgrades. The current plan is for code freezes
as follows

=over 4

=item *

5.8.3 23:59:59 GMT, Wednesday December 31st 2003

=item *

5.8.4 23:59:59 GMT, Wednesday March 31st 2004

=item *

5.8.5 23:59:59 GMT, Wednesday June 30th 2004

=back

with the release following soon after, when testing is complete.

See L<perl581delta/"Future Directions"> for more soothsaying.
d103 2
a104 2
bug database at http://bugs.perl.org/.  There may also be
information at http://www.perl.com/, the Perl Home Page.
d106 1
a106 1
If you believe you have an unreported bug, please run the B<perlbug>
d110 11
a120 2
analysed by the Perl porting team.  You can browse and search
the Perl 5 bugs at http://bugs.perl.org/
d124 2
a125 1
The F<Changes> file for exhaustive details on what changed.
@


1.7
log
@Resolve conflicts for perl 5.8.2, remove old files, and add OpenBSD-specific scaffolding
@
text
@@


1.6
log
@repeated words; millert ok ok
@
text
@d3 1
a3 1
perldelta - what is new for perl v5.8.0
d7 2
a8 2
This document describes differences between the 5.6.0 release and
the 5.8.0 release.
d10 4
a13 44
Many of the bug fixes in 5.8.0 were already seen in the 5.6.1
maintenance release since the two releases were kept closely
coordinated (while 5.8.0 was still called 5.7.something).

Changes that were integrated into the 5.6.1 release are marked C<[561]>.
Many of these changes have been further developed since 5.6.1 was released,
those are marked C<[561+]>.

You can see the list of changes in the 5.6.1 release (both from the
5.005_03 release and the 5.6.0 release) by reading L<perl561delta>.

=head1 Highlights In 5.8.0

=over 4

=item *

Better Unicode support

=item *

New IO Implementation

=item *

New Thread Implementation

=item *

Better Numeric Accuracy

=item *

Safe Signals

=item *

Many New Modules

=item *

More Extensive Regression Testing

=back
d17 9
a25 2723
=head2 Binary Incompatibility

B<Perl 5.8 is not binary compatible with earlier releases of Perl.>

B<You have to recompile your XS modules.>

(Pure Perl modules should continue to work.)

The major reason for the discontinuity is the new IO architecture
called PerlIO.  PerlIO is the default configuration because without
it many new features of Perl 5.8 cannot be used.  In other words:
you just have to recompile your modules containing XS code, sorry
about that.

In future releases of Perl, non-PerlIO aware XS modules may become
completely unsupported.  This shouldn't be too difficult for module
authors, however: PerlIO has been designed as a drop-in replacement
(at the source code level) for the stdio interface.

Depending on your platform, there are also other reasons why
we decided to break binary compatibility, please read on.

=head2 64-bit platforms and malloc

If your pointers are 64 bits wide, the Perl malloc is no longer being
used because it does not work well with 8-byte pointers.  Also,
usually the system mallocs on such platforms are much better optimized
for such large memory models than the Perl malloc.  Some memory-hungry
Perl applications like the PDL don't work well with Perl's malloc.
Finally, other applications than Perl (such as mod_perl) tend to prefer
the system malloc.  Such platforms include Alpha and 64-bit HPPA,
MIPS, PPC, and Sparc.

=head2 AIX Dynaloading

The AIX dynaloading now uses in AIX releases 4.3 and newer the native
dlopen interface of AIX instead of the old emulated interface.  This
change will probably break backward compatibility with compiled
modules.  The change was made to make Perl more compliant with other
applications like mod_perl which are using the AIX native interface.

=head2 Attributes for C<my> variables now handled at run-time

The C<my EXPR : ATTRS> syntax now applies variable attributes at
run-time.  (Subroutine and C<our> variables still get attributes applied
at compile-time.)  See L<attributes> for additional details.  In particular,
however, this allows variable attributes to be useful for C<tie> interfaces,
which was a deficiency of earlier releases.  Note that the new semantics
doesn't work with the Attribute::Handlers module (as of version 0.76).

=head2 Socket Extension Dynamic in VMS

The Socket extension is now dynamically loaded instead of being
statically built in.  This may or may not be a problem with ancient
TCP/IP stacks of VMS: we do not know since we weren't able to test
Perl in such configurations.

=head2 IEEE-format Floating Point Default on OpenVMS Alpha

Perl now uses IEEE format (T_FLOAT) as the default internal floating
point format on OpenVMS Alpha, potentially breaking binary compatibility
with external libraries or existing data.  G_FLOAT is still available as
a configuration option.  The default on VAX (D_FLOAT) has not changed.

=head2 New Unicode Semantics (no more C<use utf8>, almost)

Previously in Perl 5.6 to use Unicode one would say "use utf8" and
then the operations (like string concatenation) were Unicode-aware
in that lexical scope.

This was found to be an inconvenient interface, and in Perl 5.8 the
Unicode model has completely changed: now the "Unicodeness" is bound
to the data itself, and for most of the time "use utf8" is not needed
at all.  The only remaining use of "use utf8" is when the Perl script
itself has been written in the UTF-8 encoding of Unicode.  (UTF-8 has
not been made the default since there are many Perl scripts out there
that are using various national eight-bit character sets, which would
be illegal in UTF-8.)

See L<perluniintro> for the explanation of the current model,
and L<utf8> for the current use of the utf8 pragma.

=head2 New Unicode Properties

Unicode I<scripts> are now supported. Scripts are similar to (and superior
to) Unicode I<blocks>. The difference between scripts and blocks is that
scripts are the glyphs used by a language or a group of languages, while
the blocks are more artificial groupings of (mostly) 256 characters based
on the Unicode numbering.

In general, scripts are more inclusive, but not universally so. For
example, while the script C<Latin> includes all the Latin characters and
their various diacritic-adorned versions, it does not include the various
punctuation or digits (since they are not solely C<Latin>).

A number of other properties are now supported, including C<\p{L&}>,
C<\p{Any}> C<\p{Assigned}>, C<\p{Unassigned}>, C<\p{Blank}> [561] and
C<\p{SpacePerl}> [561] (along with their C<\P{...}> versions, of course).
See L<perlunicode> for details, and more additions.

The C<In> or C<Is> prefix to names used with the C<\p{...}> and C<\P{...}>
are now almost always optional. The only exception is that a C<In> prefix
is required to signify a Unicode block when a block name conflicts with a
script name. For example, C<\p{Tibetan}> refers to the script, while
C<\p{InTibetan}> refers to the block. When there is no name conflict, you
can omit the C<In> from the block name (e.g. C<\p{BraillePatterns}>), but
to be safe, it's probably best to always use the C<In>).

=head2 REF(...) Instead Of SCALAR(...)

A reference to a reference now stringifies as "REF(0x81485ec)" instead
of "SCALAR(0x81485ec)" in order to be more consistent with the return
value of ref().

=head2 pack/unpack D/F recycled

The undocumented pack/unpack template letters D/F have been recycled
for better use: now they stand for long double (if supported by the
platform) and NV (Perl internal floating point type).  (They used
to be aliases for d/f, but you never knew that.)

=head2 glob() now returns filenames in alphabetical order

The list of filenames from glob() (or <...>) is now by default sorted
alphabetically to be csh-compliant (which is what happened before
in most UNIX platforms).  (bsd_glob() does still sort platform
natively, ASCII or EBCDIC, unless GLOB_ALPHASORT is specified.) [561]

=head2 Deprecations

=over 4

=item *

The semantics of bless(REF, REF) were unclear and until someone proves
it to make some sense, it is forbidden.

=item *

The obsolete chat2 library that should never have been allowed
to escape the laboratory has been decommissioned.

=item *

Using chdir("") or chdir(undef) instead of explicit chdir() is
doubtful.  A failure (think chdir(some_function()) can lead into
unintended chdir() to the home directory, therefore this behaviour
is deprecated.

=item *

The builtin dump() function has probably outlived most of its
usefulness.  The core-dumping functionality will remain in future
available as an explicit call to C<CORE::dump()>, but in future
releases the behaviour of an unqualified C<dump()> call may change.

=item *

The very dusty examples in the eg/ directory have been removed.
Suggestions for new shiny examples welcome but the main issue is that
the examples need to be documented, tested and (most importantly)
maintained.

=item *

The (bogus) escape sequences \8 and \9 now give an optional warning
("Unrecognized escape passed through").  There is no need to \-escape
any C<\w> character.

=item *

The *glob{FILEHANDLE} is deprecated, use *glob{IO} instead.

=item *

The C<package;> syntax (C<package> without an argument) has been
deprecated.  Its semantics were never that clear and its
implementation even less so.  If you have used that feature to
disallow all but fully qualified variables, C<use strict;> instead.

=item *

The unimplemented POSIX regex features [[.cc.]] and [[=c=]] are still
recognised but now cause fatal errors.  The previous behaviour of
ignoring them by default and warning if requested was unacceptable
since it, in a way, falsely promised that the features could be used.

=item *

In future releases, non-PerlIO aware XS modules may become completely
unsupported.  Since PerlIO is a drop-in replacement for stdio at the
source code level, this shouldn't be that drastic a change.

=item *

Previous versions of perl and some readings of some sections of Camel
III implied that the C<:raw> "discipline" was the inverse of C<:crlf>.
Turning off "clrfness" is no longer enough to make a stream truly
binary. So the PerlIO C<:raw> layer (or "discipline", to use the Camel
book's older terminology) is now formally defined as being equivalent
to binmode(FH) - which is in turn defined as doing whatever is
necessary to pass each byte as-is without any translation.  In
particular binmode(FH) - and hence C<:raw> - will now turn off both
CRLF and UTF-8 translation and remove other layers (e.g. :encoding())
which would modify byte stream.

=item *

The current user-visible implementation of pseudo-hashes (the weird
use of the first array element) is deprecated starting from Perl 5.8.0
and will be removed in Perl 5.10.0, and the feature will be
implemented differently.  Not only is the current interface rather
ugly, but the current implementation slows down normal array and hash
use quite noticeably. The C<fields> pragma interface will remain
available.  The I<restricted hashes> interface is expected to
be the replacement interface (see L<Hash::Util>).  If your existing
programs depends on the underlying implementation, consider using
L<Class::PseudoHash> from CPAN.

=item *

The syntaxes C<< @@a->[...] >> and  C<< %h->{...} >> have now been deprecated.

=item *

After years of trying, suidperl is considered to be too complex to
ever be considered truly secure.  The suidperl functionality is likely
to be removed in a future release.

=item *

The 5.005 threads model (module C<Thread>) is deprecated and expected
to be removed in Perl 5.10.  Multithreaded code should be migrated to
the new ithreads model (see L<threads>, L<threads::shared> and
L<perlthrtut>).

=item *

The long deprecated uppercase aliases for the string comparison
operators (EQ, NE, LT, LE, GE, GT) have now been removed.

=item *

The tr///C and tr///U features have been removed and will not return;
the interface was a mistake.  Sorry about that.  For similar
functionality, see pack('U0', ...) and pack('C0', ...). [561]

=item *

Earlier Perls treated "sub foo (@@bar)" as equivalent to "sub foo (@@)".
The prototypes are now checked better at compile-time for invalid
syntax.  An optional warning is generated ("Illegal character in
prototype...")  but this may be upgraded to a fatal error in a future
release.

=item *

The C<exec LIST> and C<system LIST> operations now produce warnings on
tainted data and in some future release they will produce fatal errors.

=item *

The existing behaviour when localising tied arrays and hashes is wrong,
and will be changed in a future release, so do not rely on the existing
behaviour. See L<"Localising Tied Arrays and Hashes Is Broken">.

=back

=head1 Core Enhancements

=head2 Unicode Overhaul

Unicode in general should be now much more usable than in Perl 5.6.0
(or even in 5.6.1).  Unicode can be used in hash keys, Unicode in
regular expressions should work now, Unicode in tr/// should work now,
Unicode in I/O should work now.  See L<perluniintro> for introduction
and L<perlunicode> for details.

=over 4

=item *

The Unicode Character Database coming with Perl has been upgraded
to Unicode 3.2.0.  For more information, see http://www.unicode.org/ .
[561+] (5.6.1 has UCD 3.0.1.)

=item *

For developers interested in enhancing Perl's Unicode capabilities:
almost all the UCD files are included with the Perl distribution in
the F<lib/unicore> subdirectory.  The most notable omission, for space
considerations, is the Unihan database.

=item *

The properties \p{Blank} and \p{SpacePerl} have been added. "Blank" is like
C isblank(), that is, it contains only "horizontal whitespace" (the space
character is, the newline isn't), and the "SpacePerl" is the Unicode
equivalent of C<\s> (\p{Space} isn't, since that includes the vertical
tabulator character, whereas C<\s> doesn't.)

See "New Unicode Properties" earlier in this document for additional
information on changes with Unicode properties.

=back

=head2 PerlIO is Now The Default

=over 4

=item *

IO is now by default done via PerlIO rather than system's "stdio".
PerlIO allows "layers" to be "pushed" onto a file handle to alter the
handle's behaviour.  Layers can be specified at open time via 3-arg
form of open:

   open($fh,'>:crlf :utf8', $path) || ...

or on already opened handles via extended C<binmode>:

   binmode($fh,':encoding(iso-8859-7)');

The built-in layers are: unix (low level read/write), stdio (as in
previous Perls), perlio (re-implementation of stdio buffering in a
portable manner), crlf (does CRLF <=> "\n" translation as on Win32,
but available on any platform).  A mmap layer may be available if
platform supports it (mostly UNIXes).

Layers to be applied by default may be specified via the 'open' pragma.

See L</"Installation and Configuration Improvements"> for the effects
of PerlIO on your architecture name.

=item *

If your platform supports fork(), you can use the list form of C<open>
for pipes.  For example:

    open KID_PS, "-|", "ps", "aux" or die $!;

forks the ps(1) command (without spawning a shell, as there are more
than three arguments to open()), and reads its standard output via the
C<KID_PS> filehandle.  See L<perlipc>.

=item *

File handles can be marked as accepting Perl's internal encoding of Unicode
(UTF-8 or UTF-EBCDIC depending on platform) by a pseudo layer ":utf8" :

   open($fh,">:utf8","Uni.txt");

Note for EBCDIC users: the pseudo layer ":utf8" is erroneously named
for you since it's not UTF-8 what you will be getting but instead
UTF-EBCDIC.  See L<perlunicode>, L<utf8>, and
http://www.unicode.org/unicode/reports/tr16/ for more information.
In future releases this naming may change.  See L<perluniintro>
for more information about UTF-8.

=item *

If your environment variables (LC_ALL, LC_CTYPE, LANG, LANGUAGE) look
like you want to use UTF-8 (any of the variables match C</utf-?8/i>),
your STDIN, STDOUT, STDERR handles and the default open layer
(see L<open>) are marked as UTF-8.  (This feature, like other new
features that combine Unicode and I/O, work only if you are using
PerlIO, but that's the default.)

Note that after this Perl really does assume that everything is UTF-8:
for example if some input handle is not, Perl will probably very soon
complain about the input data like this "Malformed UTF-8 ..." since
any old eight-bit data is not legal UTF-8.

Note for code authors: if you want to enable your users to use UTF-8
as their default encoding  but in your code still have eight-bit I/O streams
(such as images or zip files), you need to explicitly open() or binmode()
with C<:bytes> (see L<perlfunc/open> and L<perlfunc/binmode>), or you
can just use C<binmode(FH)> (nice for pre-5.8.0 backward compatibility).

=item *

File handles can translate character encodings from/to Perl's internal
Unicode form on read/write via the ":encoding()" layer.

=item *

File handles can be opened to "in memory" files held in Perl scalars via:

   open($fh,'>', \$variable) || ...

=item *

Anonymous temporary files are available without need to
'use FileHandle' or other module via

   open($fh,"+>", undef) || ...

That is a literal undef, not an undefined value.

=back

=head2 ithreads

The new interpreter threads ("ithreads" for short) implementation of
multithreading, by Arthur Bergman, replaces the old "5.005 threads"
implementation.  In the ithreads model any data sharing between
threads must be explicit, as opposed to the model where data sharing
was implicit.  See L<threads> and L<threads::shared>, and
L<perlthrtut>.

As a part of the ithreads implementation Perl will also use
any necessary and detectable reentrant libc interfaces.

=head2 Restricted Hashes

A restricted hash is restricted to a certain set of keys, no keys
outside the set can be added.  Also individual keys can be restricted
so that the key cannot be deleted and the value cannot be changed.
No new syntax is involved: the Hash::Util module is the interface.

=head2 Safe Signals

Perl used to be fragile in that signals arriving at inopportune moments
could corrupt Perl's internal state.  Now Perl postpones handling of
signals until it's safe (between opcodes).

This change may have surprising side effects because signals no longer
interrupt Perl instantly.  Perl will now first finish whatever it was
doing, like finishing an internal operation (like sort()) or an
external operation (like an I/O operation), and only then look at any
arrived signals (and before starting the next operation).  No more corrupt
internal state since the current operation is always finished first,
but the signal may take more time to get heard.  Note that breaking
out from potentially blocking operations should still work, though.

=head2 Understanding of Numbers

In general a lot of fixing has happened in the area of Perl's
understanding of numbers, both integer and floating point.  Since in
many systems the standard number parsing functions like C<strtoul()>
and C<atof()> seem to have bugs, Perl tries to work around their
deficiencies.  This results hopefully in more accurate numbers.

Perl now tries internally to use integer values in numeric conversions
and basic arithmetics (+ - * /) if the arguments are integers, and
tries also to keep the results stored internally as integers.
This change leads to often slightly faster and always less lossy
arithmetics. (Previously Perl always preferred floating point numbers
in its math.)

=head2 Arrays now always interpolate into double-quoted strings [561]

In double-quoted strings, arrays now interpolate, no matter what.  The
behavior in earlier versions of perl 5 was that arrays would interpolate
into strings if the array had been mentioned before the string was
compiled, and otherwise Perl would raise a fatal compile-time error.
In versions 5.000 through 5.003, the error was

        Literal @@example now requires backslash

In versions 5.004_01 through 5.6.0, the error was

        In string, @@example now must be written as \@@example

The idea here was to get people into the habit of writing
C<"fred\@@example.com"> when they wanted a literal C<@@> sign, just as
they have always written C<"Give me back my \$5"> when they wanted a
literal C<$> sign.

Starting with 5.6.1, when Perl now sees an C<@@> sign in a
double-quoted string, it I<always> attempts to interpolate an array,
regardless of whether or not the array has been used or declared
already.  The fatal error has been downgraded to an optional warning:

        Possible unintended interpolation of @@example in string

This warns you that C<"fred@@example.com"> is going to turn into
C<fred.com> if you don't backslash the C<@@>.
See http://www.plover.com/~mjd/perl/at-error.html for more details
about the history here.

=head2 Miscellaneous Changes

=over 4

=item *

AUTOLOAD is now lvaluable, meaning that you can add the :lvalue attribute
to AUTOLOAD subroutines and you can assign to the AUTOLOAD return value.

=item *

The $Config{byteorder} (and corresponding BYTEORDER in config.h) was
previously wrong in platforms if sizeof(long) was 4, but sizeof(IV)
was 8.  The byteorder was only sizeof(long) bytes long (1234 or 4321),
but now it is correctly sizeof(IV) bytes long, (12345678 or 87654321).
(This problem didn't affect Windows platforms.)

Also, $Config{byteorder} is now computed dynamically--this is more
robust with "fat binaries" where an executable image contains binaries
for more than one binary platform, and when cross-compiling.

=item *

C<perl -d:Module=arg,arg,arg> now works (previously one couldn't pass
in multiple arguments.)

=item *

C<do> followed by a bareword now ensures that this bareword isn't
a keyword (to avoid a bug where C<do q(foo.pl)> tried to call a
subroutine called C<q>).  This means that for example instead of
C<do format()> you must write C<do &format()>.

=item *

The builtin dump() now gives an optional warning
C<dump() better written as CORE::dump()>,
meaning that by default C<dump(...)> is resolved as the builtin
dump() which dumps core and aborts, not as (possibly) user-defined
C<sub dump>.  To call the latter, qualify the call as C<&dump(...)>.
(The whole dump() feature is to considered deprecated, and possibly
removed/changed in future releases.)

=item *

chomp() and chop() are now overridable.  Note, however, that their
prototype (as given by C<prototype("CORE::chomp")> is undefined,
because it cannot be expressed and therefore one cannot really write
replacements to override these builtins.

=item *

END blocks are now run even if you exit/die in a BEGIN block.
Internally, the execution of END blocks is now controlled by
PL_exit_flags & PERL_EXIT_DESTRUCT_END. This enables the new
behaviour for Perl embedders. This will default in 5.10. See
L<perlembed>.

=item *

Formats now support zero-padded decimal fields.

=item *

Although "you shouldn't do that", it was possible to write code that
depends on Perl's hashed key order (Data::Dumper does this).  The new
algorithm "One-at-a-Time" produces a different hashed key order.
More details are in L</"Performance Enhancements">.

=item *

lstat(FILEHANDLE) now gives a warning because the operation makes no sense.
In future releases this may become a fatal error.

=item *

Spurious syntax errors generated in certain situations, when glob()
caused File::Glob to be loaded for the first time, have been fixed. [561]

=item *

Lvalue subroutines can now return C<undef> in list context.  However,
the lvalue subroutine feature still remains experimental.  [561+]

=item *

A lost warning "Can't declare ... dereference in my" has been
restored (Perl had it earlier but it became lost in later releases.)

=item *

A new special regular expression variable has been introduced:
C<$^N>, which contains the most-recently closed group (submatch).

=item *

C<no Module;> does not produce an error even if Module does not have an
unimport() method.  This parallels the behavior of C<use> vis-a-vis
C<import>. [561]

=item *

The numerical comparison operators return C<undef> if either operand
is a NaN.  Previously the behaviour was unspecified.

=item *

C<our> can now have an experimental optional attribute C<unique> that
affects how global variables are shared among multiple interpreters,
see L<perlfunc/our>.

=item *

The following builtin functions are now overridable: each(), keys(),
pop(), push(), shift(), splice(), unshift(). [561]

=item *

C<pack() / unpack()> can now group template letters with C<()> and then
apply repetition/count modifiers on the groups.

=item *

C<pack() / unpack()> can now process the Perl internal numeric types:
IVs, UVs, NVs-- and also long doubles, if supported by the platform.
The template letters are C<j>, C<J>, C<F>, and C<D>.

=item *

C<pack('U0a*', ...)> can now be used to force a string to UTF8.

=item *

my __PACKAGE__ $obj now works. [561]

=item *

POSIX::sleep() now returns the number of I<unslept> seconds
(as the POSIX standard says), as opposed to CORE::sleep() which
returns the number of slept seconds.

=item *

The printf() and sprintf() now support parameter reordering using the
C<%\d+\$> and C<*\d+\$> syntaxes.  For example

    print "%2\$s %1\$s\n", "foo", "bar";

will print "bar foo\n".  This feature helps in writing
internationalised software, and in general when the order
of the parameters can vary.

=item *

The (\&) prototype now works properly. [561]

=item *

prototype(\[$@@%&]) is now available to implicitly create references
(useful for example if you want to emulate the tie() interface).

=item *

A new command-line option, C<-t> is available.  It is the
little brother of C<-T>: instead of dying on taint violations,
lexical warnings are given.  B<This is only meant as a temporary
debugging aid while securing the code of old legacy applications.
This is not a substitute for -T.>

=item *

In other taint news, the C<exec LIST> and C<system LIST> have now been
considered too risky (think C<exec @@ARGV>: it can start any program
with any arguments), and now the said forms cause a warning under
lexical warnings.  You should carefully launder the arguments to
guarantee their validity.  In future releases of Perl the forms will
become fatal errors so consider starting laundering now.

=item *

Tied hash interfaces are now required to have the EXISTS and DELETE
methods (either own or inherited).

=item *

If tr/// is just counting characters, it doesn't attempt to
modify its target.

=item *

untie() will now call an UNTIE() hook if it exists.  See L<perltie>
for details. [561]

=item *

L<utime> now supports C<utime undef, undef, @@files> to change the
file timestamps to the current time.

=item *

The rules for allowing underscores (underbars) in numeric constants
have been relaxed and simplified: now you can have an underscore
simply B<between digits>.

=item *

Rather than relying on C's argv[0] (which may not contain a full pathname)
where possible $^X is now set by asking the operating system.
(eg by reading F</proc/self/exe> on Linux, F</proc/curproc/file> on FreeBSD)

=item *

A new variable, C<${^TAINT}>, indicates whether taint mode is enabled.

=item *

You can now override the readline() builtin, and this overrides also
the <FILEHANDLE> angle bracket operator.

=item *

The command-line options -s and -F are now recognized on the shebang
(#!) line.

=item *

Use of the C</c> match modifier without an accompanying C</g> modifier
elicits a new warning: C<Use of /c modifier is meaningless without /g>.

Use of C</c> in substitutions, even with C</g>, elicits
C<Use of /c modifier is meaningless in s///>.

Use of C</g> with C<split> elicits C<Use of /g modifier is meaningless
in split>.

=item *

Support for the C<CLONE> special subroutine had been added.
With ithreads, when a new thread is created, all Perl data is cloned,
however non-Perl data cannot be cloned automatically.  In C<CLONE> you
can do whatever you need to do, like for example handle the cloning of
non-Perl data, if necessary.  C<CLONE> will be executed once for every
package that has it defined or inherited.  It will be called in the
context of the new thread, so all modifications are made in the new area.

See L<perlmod>

=back

=head1 Modules and Pragmata

=head2 New Modules and Pragmata

=over 4

=item *

C<Attribute::Handlers>, originally by Damian Conway and now maintained
by Arthur Bergman, allows a class to define attribute handlers.

    package MyPack;
    use Attribute::Handlers;
    sub Wolf :ATTR(SCALAR) { print "howl!\n" }

    # later, in some package using or inheriting from MyPack...

    my MyPack $Fluffy : Wolf; # the attribute handler Wolf will be called

Both variables and routines can have attribute handlers.  Handlers can
be specific to type (SCALAR, ARRAY, HASH, or CODE), or specific to the
exact compilation phase (BEGIN, CHECK, INIT, or END).
See L<Attribute::Handlers>.

=item *

C<B::Concise>, by Stephen McCamant, is a new compiler backend for
walking the Perl syntax tree, printing concise info about ops.
The output is highly customisable.  See L<B::Concise>. [561+]

=item *

The new bignum, bigint, and bigrat pragmas, by Tels, implement
transparent bignum support (using the Math::BigInt, Math::BigFloat,
and Math::BigRat backends).

=item *

C<Class::ISA>, by Sean Burke, is a module for reporting the search
path for a class's ISA tree.  See L<Class::ISA>.

=item *

C<Cwd> now has a split personality: if possible, an XS extension is
used, (this will hopefully be faster, more secure, and more robust)
but if not possible, the familiar Perl implementation is used.

=item *

C<Devel::PPPort>, originally by Kenneth Albanowski and now
maintained by Paul Marquess, has been added.  It is primarily used
by C<h2xs> to enhance portability of XS modules between different
versions of Perl.  See L<Devel::PPPort>.

=item *

C<Digest>, frontend module for calculating digests (checksums), from
Gisle Aas, has been added.  See L<Digest>.

=item *

C<Digest::MD5> for calculating MD5 digests (checksums) as defined in
RFC 1321, from Gisle Aas, has been added.  See L<Digest::MD5>.

    use Digest::MD5 'md5_hex';

    $digest = md5_hex("Thirsty Camel");

    print $digest, "\n"; # 01d19d9d2045e005c3f1b80e8b164de1

NOTE: the C<MD5> backward compatibility module is deliberately not
included since its further use is discouraged.

See also L<PerlIO::via::QuotedPrint>.

=item *

C<Encode>, originally by Nick Ing-Simmons and now maintained by Dan
Kogai, provides a mechanism to translate between different character
encodings.  Support for Unicode, ISO-8859-1, and ASCII are compiled in
to the module.  Several other encodings (like the rest of the
ISO-8859, CP*/Win*, Mac, KOI8-R, three variants EBCDIC, Chinese,
Japanese, and Korean encodings) are included and can be loaded at
runtime.  (For space considerations, the largest Chinese encodings
have been separated into their own CPAN module, Encode::HanExtra,
which Encode will use if available).  See L<Encode>.

Any encoding supported by Encode module is also available to the
":encoding()" layer if PerlIO is used.

=item *

C<Hash::Util> is the interface to the new I<restricted hashes>
feature.  (Implemented by Jeffrey Friedl, Nick Ing-Simmons, and
Michael Schwern.)  See L<Hash::Util>.

=item *

C<I18N::Langinfo> can be used to query locale information.
See L<I18N::Langinfo>.

=item *

C<I18N::LangTags>, by Sean Burke, has functions for dealing with
RFC3066-style language tags.  See L<I18N::LangTags>.

=item *

C<ExtUtils::Constant>, by Nicholas Clark, is a new tool for extension
writers for generating XS code to import C header constants.
See L<ExtUtils::Constant>.

=item *

C<Filter::Simple>, by Damian Conway, is an easy-to-use frontend to
Filter::Util::Call.  See L<Filter::Simple>.

    # in MyFilter.pm:

    package MyFilter;

    use Filter::Simple sub {
        while (my ($from, $to) = splice @@_, 0, 2) {
                s/$from/$to/g;
        }
    };

    1;

    # in user's code:

    use MyFilter qr/red/ => 'green';

    print "red\n";   # this code is filtered, will print "green\n"
    print "bored\n"; # this code is filtered, will print "bogreen\n"

    no MyFilter;

    print "red\n";   # this code is not filtered, will print "red\n"

=item *

C<File::Temp>, by Tim Jenness, allows one to create temporary files
and directories in an easy, portable, and secure way.  See L<File::Temp>.
[561+]

=item *

C<Filter::Util::Call>, by Paul Marquess, provides you with the
framework to write I<source filters> in Perl.  For most uses, the
frontend Filter::Simple is to be preferred.  See L<Filter::Util::Call>.

=item *

C<if>, by Ilya Zakharevich, is a new pragma for conditional inclusion
of modules.

=item *

L<libnet>, by Graham Barr, is a collection of perl5 modules related
to network programming.  See L<Net::FTP>, L<Net::NNTP>, L<Net::Ping>
(not part of libnet, but related), L<Net::POP3>, L<Net::SMTP>,
and L<Net::Time>.

Perl installation leaves libnet unconfigured; use F<libnetcfg>
to configure it.

=item *

C<List::Util>, by Graham Barr, is a selection of general-utility
list subroutines, such as sum(), min(), first(), and shuffle().
See L<List::Util>.

=item *

C<Locale::Constants>, C<Locale::Country>, C<Locale::Currency>
C<Locale::Language>, and L<Locale::Script>, by Neil Bowers, have
been added.  They provide the codes for various locale standards, such
as "fr" for France, "usd" for US Dollar, and "ja" for Japanese.

    use Locale::Country;

    $country = code2country('jp');               # $country gets 'Japan'
    $code    = country2code('Norway');           # $code gets 'no'

See L<Locale::Constants>, L<Locale::Country>, L<Locale::Currency>,
and L<Locale::Language>.

=item *

C<Locale::Maketext>, by Sean Burke, is a localization framework.  See
L<Locale::Maketext>, and L<Locale::Maketext::TPJ13>.  The latter is an
article about software localization, originally published in The Perl
Journal #13, and republished here with kind permission.

=item *

C<Math::BigRat> for big rational numbers, to accompany Math::BigInt and
Math::BigFloat, from Tels.  See L<Math::BigRat>.

=item *

C<Memoize> can make your functions faster by trading space for time,
from Mark-Jason Dominus.  See L<Memoize>.

=item *

C<MIME::Base64>, by Gisle Aas, allows you to encode data in base64,
as defined in RFC 2045 - I<MIME (Multipurpose Internet Mail
Extensions)>.

    use MIME::Base64;

    $encoded = encode_base64('Aladdin:open sesame');
    $decoded = decode_base64($encoded);

    print $encoded, "\n"; # "QWxhZGRpbjpvcGVuIHNlc2FtZQ=="

See L<MIME::Base64>.

=item *

C<MIME::QuotedPrint>, by Gisle Aas, allows you to encode data
in quoted-printable encoding, as defined in RFC 2045 - I<MIME
(Multipurpose Internet Mail Extensions)>.

    use MIME::QuotedPrint;

    $encoded = encode_qp("Smiley in Unicode: \x{263a}");
    $decoded = decode_qp($encoded);

    print $encoded, "\n"; # "Smiley in Unicode: =263A"

See also L<PerlIO::via::QuotedPrint>.

=item *

C<NEXT>, by Damian Conway, is a pseudo-class for method redispatch.
See L<NEXT>.

=item *

C<open> is a new pragma for setting the default I/O layers
for open().

=item *

C<PerlIO::scalar>, by Nick Ing-Simmons, provides the implementation
of IO to "in memory" Perl scalars as discussed above.  It also serves
as an example of a loadable PerlIO layer.  Other future possibilities
include PerlIO::Array and PerlIO::Code.  See L<PerlIO::scalar>.

=item *

C<PerlIO::via>, by Nick Ing-Simmons, acts as a PerlIO layer and wraps
PerlIO layer functionality provided by a class (typically implemented
in Perl code).

=item *

C<PerlIO::via::QuotedPrint>, by Elizabeth Mattijsen, is an example
of a C<PerlIO::via> class:

    use PerlIO::via::QuotedPrint;
    open($fh,">:via(QuotedPrint)",$path);

This will automatically convert everything output to C<$fh> to
Quoted-Printable.  See L<PerlIO::via> and L<PerlIO::via::QuotedPrint>.

=item *

C<Pod::ParseLink>, by Russ Allbery, has been added,
to parse LZ<><> links in pods as described in the new
perlpodspec.

=item *

C<Pod::Text::Overstrike>, by Joe Smith, has been added.
It converts POD data to formatted overstrike text.
See L<Pod::Text::Overstrike>. [561+]

=item *

C<Scalar::Util> is a selection of general-utility scalar subroutines,
such as blessed(), reftype(), and tainted().  See L<Scalar::Util>.

=item *

C<sort> is a new pragma for controlling the behaviour of sort().

=item *

C<Storable> gives persistence to Perl data structures by allowing the
storage and retrieval of Perl data to and from files in a fast and
compact binary format.  Because in effect Storable does serialisation
of Perl data structures, with it you can also clone deep, hierarchical
datastructures.  Storable was originally created by Raphael Manfredi,
but it is now maintained by Abhijit Menon-Sen.  Storable has been
enhanced to understand the two new hash features, Unicode keys and
restricted hashes.  See L<Storable>.

=item *

C<Switch>, by Damian Conway, has been added.  Just by saying

    use Switch;

you have C<switch> and C<case> available in Perl.

    use Switch;

    switch ($val) {

		case 1		{ print "number 1" }
		case "a"	{ print "string a" }
		case [1..10,42]	{ print "number in list" }
		case (@@array)	{ print "number in list" }
		case /\w+/	{ print "pattern" }
		case qr/\w+/	{ print "pattern" }
		case (%hash)	{ print "entry in hash" }
		case (\%hash)	{ print "entry in hash" }
		case (\&sub)	{ print "arg to subroutine" }
		else		{ print "previous case not true" }
    }

See L<Switch>.

=item *

C<Test::More>, by Michael Schwern, is yet another framework for writing
test scripts, more extensive than Test::Simple.  See L<Test::More>.

=item *

C<Test::Simple>, by Michael Schwern, has basic utilities for writing
tests.   See L<Test::Simple>.

=item *

C<Text::Balanced>, by Damian Conway, has been added, for extracting
delimited text sequences from strings.

    use Text::Balanced 'extract_delimited';

    ($a, $b) = extract_delimited("'never say never', he never said", "'", '');

$a will be "'never say never'", $b will be ', he never said'.

In addition to extract_delimited(), there are also extract_bracketed(),
extract_quotelike(), extract_codeblock(), extract_variable(),
extract_tagged(), extract_multiple(), gen_delimited_pat(), and
gen_extract_tagged().  With these, you can implement rather advanced
parsing algorithms.  See L<Text::Balanced>.

=item *

C<threads>, by Arthur Bergman, is an interface to interpreter threads.
Interpreter threads (ithreads) is the new thread model introduced in
Perl 5.6 but only available as an internal interface for extension
writers (and for Win32 Perl for C<fork()> emulation).  See L<threads>,
L<threads::shared>, and L<perlthrtut>.

=item *

C<threads::shared>, by Arthur Bergman, allows data sharing for
interpreter threads.  See L<threads::shared>.

=item *

C<Tie::File>, by Mark-Jason Dominus, associates a Perl array with the
lines of a file.  See L<Tie::File>.

=item *

C<Tie::Memoize>, by Ilya Zakharevich, provides on-demand loaded hashes.
See L<Tie::Memoize>.

=item *

C<Tie::RefHash::Nestable>, by Edward Avis, allows storing hash
references (unlike the standard Tie::RefHash)  The module is contained
within Tie::RefHash.  See L<Tie::RefHash>.

=item *

C<Time::HiRes>, by Douglas E. Wegscheid, provides high resolution
timing (ualarm, usleep, and gettimeofday).  See L<Time::HiRes>.

=item *

C<Unicode::UCD> offers a querying interface to the Unicode Character
Database.  See L<Unicode::UCD>.

=item *

C<Unicode::Collate>, by SADAHIRO Tomoyuki, implements the UCA
(Unicode Collation Algorithm) for sorting Unicode strings.
See L<Unicode::Collate>.

=item *

C<Unicode::Normalize>, by SADAHIRO Tomoyuki, implements the various
Unicode normalization forms.  See L<Unicode::Normalize>.

=item *

C<XS::APItest>, by Tim Jenness, is a test extension that exercises XS
APIs.  Currently only C<printf()> is tested: how to output various
basic data types from XS.

=item *

C<XS::Typemap>, by Tim Jenness, is a test extension that exercises
XS typemaps.  Nothing gets installed, but the code is worth studying
for extension writers.

=back

=head2 Updated And Improved Modules and Pragmata

=over 4

=item *

The following independently supported modules have been updated to the
newest versions from CPAN: CGI, CPAN, DB_File, File::Spec, File::Temp,
Getopt::Long, Math::BigFloat, Math::BigInt, the podlators bundle
(Pod::Man, Pod::Text), Pod::LaTeX [561+], Pod::Parser, Storable,
Term::ANSIColor, Test, Text-Tabs+Wrap.

=item *

attributes::reftype() now works on tied arguments.

=item *

AutoLoader can now be disabled with C<no AutoLoader;>.

=item *

B::Deparse has been significantly enhanced by Robin Houston.  It can
now deparse almost all of the standard test suite (so that the tests
still succeed).  There is a make target "test.deparse" for trying this
out.

=item *

Carp now has better interface documentation, and the @@CARP_NOT
interface has been added to get optional control over where errors
are reported independently of @@ISA, by Ben Tilly.

=item *

Class::Struct can now define the classes in compile time.

=item *

Class::Struct now assigns the array/hash element if the accessor
is called with an array/hash element as the B<sole> argument.

=item *

The return value of Cwd::fastcwd() is now tainted.

=item *

Data::Dumper now has an option to sort hashes.

=item *

Data::Dumper now has an option to dump code references
using B::Deparse.

=item *

DB_File now supports newer Berkeley DB versions, among
other improvements.

=item *

Devel::Peek now has an interface for the Perl memory statistics
(this works only if you are using perl's malloc, and if you have
compiled with debugging).

=item *

The English module can now be used without the infamous performance
hit by saying

	use English '-no_match_vars';

(Assuming, of course, that you don't need the troublesome variables
C<$`>, C<$&>, or C<$'>.)  Also, introduced C<@@LAST_MATCH_START> and
C<@@LAST_MATCH_END> English aliases for C<@@-> and C<@@+>.

=item *

ExtUtils::MakeMaker has been significantly cleaned up and fixed.
The enhanced version has also been backported to earlier releases
of Perl and submitted to CPAN so that the earlier releases can
enjoy the fixes.

=item *

The arguments of WriteMakefile() in Makefile.PL are now checked
for sanity much more carefully than before.  This may cause new
warnings when modules are being installed.  See L<ExtUtils::MakeMaker>
for more details.

=item *

ExtUtils::MakeMaker now uses File::Spec internally, which hopefully
leads to better portability.

=item *

Fcntl, Socket, and Sys::Syslog have been rewritten by Nicholas Clark
to use the new-style constant dispatch section (see L<ExtUtils::Constant>).
This means that they will be more robust and hopefully faster.

=item *

File::Find now chdir()s correctly when chasing symbolic links. [561]

=item *

File::Find now has pre- and post-processing callbacks.  It also
correctly changes directories when chasing symbolic links.  Callbacks
(naughtily) exiting with "next;" instead of "return;" now work.

=item *

File::Find is now (again) reentrant.  It also has been made
more portable.

=item *

The warnings issued by File::Find now belong to their own category.
You can enable/disable them with C<use/no warnings 'File::Find';>.

=item *

File::Glob::glob() has been renamed to File::Glob::bsd_glob()
because the name clashes with the builtin glob().  The older
name is still available for compatibility, but is deprecated. [561]

=item *

File::Glob now supports C<GLOB_LIMIT> constant to limit the size of
the returned list of filenames.

=item *

IPC::Open3 now allows the use of numeric file descriptors.

=item *

IO::Socket now has an atmark() method, which returns true if the socket
is positioned at the out-of-band mark.  The method is also exportable
as a sockatmark() function.

=item *

IO::Socket::INET failed to open the specified port if the service name
was not known.  It now correctly uses the supplied port number as is. [561]

=item *

IO::Socket::INET has support for the ReusePort option (if your
platform supports it).  The Reuse option now has an alias, ReuseAddr.
For clarity, you may want to prefer ReuseAddr.

=item *

IO::Socket::INET now supports a value of zero for C<LocalPort>
(usually meaning that the operating system will make one up.)

=item *

'use lib' now works identically to @@INC.  Removing directories
with 'no lib' now works.

=item *

Math::BigFloat and Math::BigInt have undergone a full rewrite by Tels.
They are now magnitudes faster, and they support various bignum
libraries such as GMP and PARI as their backends.

=item *

Math::Complex handles inf, NaN etc., better.

=item *

Net::Ping has been considerably enhanced by Rob Brown: multihoming is
now supported, Win32 functionality is better, there is now time
measuring functionality (optionally high-resolution using
Time::HiRes), and there is now "external" protocol which uses
Net::Ping::External module which runs your external ping utility and
parses the output.  A version of Net::Ping::External is available in
CPAN.

Note that some of the Net::Ping tests are disabled when running
under the Perl distribution since one cannot assume one or more
of the following: enabled echo port at localhost, full Internet
connectivity, or sympathetic firewalls.  You can set the environment
variable PERL_TEST_Net_Ping to "1" (one) before running the Perl test
suite to enable all the Net::Ping tests.

=item *

POSIX::sigaction() is now much more flexible and robust.
You can now install coderef handlers, 'DEFAULT', and 'IGNORE'
handlers, installing new handlers was not atomic.

=item *

In Safe, C<%INC> is now localised in a Safe compartment so that
use/require work.

=item *

In SDBM_File on dosish platforms, some keys went missing because of
lack of support for files with "holes".  A workaround for the problem
has been added.

=item *

In Search::Dict one can now have a pre-processing hook for the
lines being searched.

=item *

The Shell module now has an OO interface.

=item *

In Sys::Syslog there is now a failover mechanism that will go
through alternative connection mechanisms until the message
is successfully logged.

=item *

The Test module has been significantly enhanced.

=item *

Time::Local::timelocal() does not handle fractional seconds anymore.
The rationale is that neither does localtime(), and timelocal() and
localtime() are supposed to be inverses of each other.

=item *

The vars pragma now supports declaring fully qualified variables.
(Something that C<our()> does not and will not support.)

=item *

The C<utf8::> name space (as in the pragma) provides various
Perl-callable functions to provide low level access to Perl's
internal Unicode representation.  At the moment only length()
has been implemented.

=back

=head1 Utility Changes

=over 4

=item *

Emacs perl mode (emacs/cperl-mode.el) has been updated to version
4.31.

=item *

F<emacs/e2ctags.pl> is now much faster.

=item *

C<enc2xs> is a tool for people adding their own encodings to the
Encode module.

=item *

C<h2ph> now supports C trigraphs.

=item *

C<h2xs> now produces a template README.

=item *

C<h2xs> now uses C<Devel::PPPort> for better portability between
different versions of Perl.

=item *

C<h2xs> uses the new L<ExtUtils::Constant|ExtUtils::Constant> module
which will affect newly created extensions that define constants.
Since the new code is more correct (if you have two constants where the
first one is a prefix of the second one, the first constant B<never>
got defined), less lossy (it uses integers for integer constant,
as opposed to the old code that used floating point numbers even for
integer constants), and slightly faster, you might want to consider
regenerating your extension code (the new scheme makes regenerating
easy).  L<h2xs> now also supports C trigraphs.

=item *

C<libnetcfg> has been added to configure libnet.

=item *

C<perlbug> is now much more robust.  It also sends the bug report to
perl.org, not perl.com.

=item *

C<perlcc> has been rewritten and its user interface (that is,
command line) is much more like that of the UNIX C compiler, cc.
(The perlbc tools has been removed.  Use C<perlcc -B> instead.)
B<Note that perlcc is still considered very experimental and
unsupported.> [561]

=item *

C<perlivp> is a new Installation Verification Procedure utility
for running any time after installing Perl.

=item *

C<piconv> is an implementation of the character conversion utility
C<iconv>, demonstrating the new Encode module.

=item *

C<pod2html> now allows specifying a cache directory.

=item *

C<pod2html> now produces XHTML 1.0.

=item *

C<pod2html> now understands POD written using different line endings
(PC-like CRLF versus UNIX-like LF versus MacClassic-like CR).

=item *

C<s2p> has been completely rewritten in Perl.  (It is in fact a full
implementation of sed in Perl: you can use the sed functionality by
using the C<psed> utility.)

=item *

C<xsubpp> now understands POD documentation embedded in the *.xs
files. [561]

=item *

C<xsubpp> now supports the OUT keyword.

=back

=head1 New Documentation

=over 4

=item *

perl56delta details the changes between the 5.005 release and the
5.6.0 release.

=item *

perlclib documents the internal replacements for standard C library
functions.  (Interesting only for extension writers and Perl core
hackers.) [561+]

=item *

perldebtut is a Perl debugging tutorial. [561+]

=item *

perlebcdic contains considerations for running Perl on EBCDIC
platforms. [561+]

=item *

perlintro is a gentle introduction to Perl.

=item *

perliol documents the internals of PerlIO with layers.

=item *

perlmodstyle is a style guide for writing modules.

=item *

perlnewmod tells about writing and submitting a new module. [561+]

=item *

perlpacktut is a pack() tutorial.

=item *

perlpod has been rewritten to be clearer and to record the best
practices gathered over the years.

=item *

perlpodspec is a more formal specification of the pod format,
mainly of interest for writers of pod applications, not to
people writing in pod.

=item *

perlretut is a regular expression tutorial. [561+]

=item *

perlrequick is a regular expressions quick-start guide.
Yes, much quicker than perlretut. [561]

=item *

perltodo has been updated.

=item *

perltootc has been renamed as perltooc (to not to conflict
with perltoot in filesystems restricted to "8.3" names).

=item *

perluniintro is an introduction to using Unicode in Perl.
(perlunicode is more of a detailed reference and background
information)

=item *

perlutil explains the command line utilities packaged with the Perl
distribution. [561+]

=back

The following platform-specific documents are available before
the installation as README.I<platform>, and after the installation
as perlI<platform>:

    perlaix perlamiga perlapollo perlbeos perlbs2000
    perlce perlcygwin perldgux perldos perlepoc perlfreebsd perlhpux
    perlhurd perlirix perlmachten perlmacos perlmint perlmpeix
    perlnetware perlos2 perlos390 perlplan9 perlqnx perlsolaris
    perltru64 perluts perlvmesa perlvms perlvos perlwin32

These documents usually detail one or more of the following subjects:
configuring, building, testing, installing, and sometimes also using
Perl on the said platform.

Eastern Asian Perl users are now welcomed in their own languages:
README.jp (Japanese), README.ko (Korean), README.cn (simplified
Chinese) and README.tw (traditional Chinese), which are written in
normal pod but encoded in EUC-JP, EUC-KR, EUC-CN and Big5.  These
will get installed as

   perljp perlko perlcn perltw

=over 4

=item *

The documentation for the POSIX-BC platform is called "BS2000", to avoid
confusion with the Perl POSIX module.

=item *

The documentation for the WinCE platform is called perlce (README.ce
in the source code kit), to avoid confusion with the perlwin32
documentation on 8.3-restricted filesystems.

=back

=head1 Performance Enhancements

=over 4

=item *

map() could get pathologically slow when the result list it generates
is larger than the source list.  The performance has been improved for
common scenarios. [561]

=item *

sort() is also fully reentrant, in the sense that the sort function
can itself call sort().  This did not work reliably in previous
releases. [561]

=item *

sort() has been changed to use primarily mergesort internally as
opposed to the earlier quicksort.  For very small lists this may
result in slightly slower sorting times, but in general the speedup
should be at least 20%.  Additional bonuses are that the worst case
behaviour of sort() is now better (in computer science terms it now
runs in time O(N log N), as opposed to quicksort's Theta(N**2)
worst-case run time behaviour), and that sort() is now stable
(meaning that elements with identical keys will stay ordered as they
were before the sort).  See the C<sort> pragma for information.

The story in more detail: suppose you want to serve yourself a little
slice of Pi.

    @@digits = ( 3,1,4,1,5,9 );

A numerical sort of the digits will yield (1,1,3,4,5,9), as expected.
Which C<1> comes first is hard to know, since one C<1> looks pretty
much like any other.  You can regard this as totally trivial,
or somewhat profound.  However, if you just want to sort the even
digits ahead of the odd ones, then what will

    sort { ($a % 2) <=> ($b % 2) } @@digits;

yield?  The only even digit, C<4>, will come first.  But how about
the odd numbers, which all compare equal?  With the quicksort algorithm
used to implement Perl 5.6 and earlier, the order of ties is left up
to the sort.  So, as you add more and more digits of Pi, the order
in which the sorted even and odd digits appear will change.
and, for sufficiently large slices of Pi, the quicksort algorithm
in Perl 5.8 won't return the same results even if reinvoked with the
same input.  The justification for this rests with quicksort's
worst case behavior.  If you run

   sort { $a <=> $b } ( 1 .. $N , 1 .. $N );

(something you might approximate if you wanted to merge two sorted
arrays using sort), doubling $N doesn't just double the quicksort time,
it I<quadruples> it.  Quicksort has a worst case run time that can
grow like N**2, so-called I<quadratic> behaviour, and it can happen
on patterns that may well arise in normal use.  You won't notice this
for small arrays, but you I<will> notice it with larger arrays,
and you may not live long enough for the sort to complete on arrays
of a million elements.  So the 5.8 quicksort scrambles large arrays
before sorting them, as a statistical defence against quadratic behaviour.
But that means if you sort the same large array twice, ties may be
broken in different ways.

Because of the unpredictability of tie-breaking order, and the quadratic
worst-case behaviour, quicksort was I<almost> replaced completely with
a stable mergesort.  I<Stable> means that ties are broken to preserve
the original order of appearance in the input array.  So

    sort { ($a % 2) <=> ($b % 2) } (3,1,4,1,5,9);

will yield (4,3,1,1,5,9), guaranteed.  The even and odd numbers
appear in the output in the same order they appeared in the input.
Mergesort has worst case O(N log N) behaviour, the best value
attainable.  And, ironically, this mergesort does particularly
well where quicksort goes quadratic:  mergesort sorts (1..$N, 1..$N)
in O(N) time.  But quicksort was rescued at the last moment because
it is faster than mergesort on certain inputs and platforms.
For example, if you really I<don't> care about the order of even
and odd digits, quicksort will run in O(N) time; it's very good
at sorting many repetitions of a small number of distinct elements.
The quicksort divide and conquer strategy works well on platforms
with relatively small, very fast, caches.  Eventually, the problem gets
whittled down to one that fits in the cache, from which point it
benefits from the increased memory speed.

Quicksort was rescued by implementing a sort pragma to control aspects
of the sort.  The B<stable> subpragma forces stable behaviour,
regardless of algorithm.  The B<_quicksort> and B<_mergesort>
subpragmas are heavy-handed ways to select the underlying implementation.
The leading C<_> is a reminder that these subpragmas may not survive
beyond 5.8.  More appropriate mechanisms for selecting the implementation
exist, but they wouldn't have arrived in time to save quicksort.

=item *

Hashes now use Bob Jenkins "One-at-a-Time" hashing key algorithm
( http://burtleburtle.net/bob/hash/doobs.html ).  This algorithm is
reasonably fast while producing a much better spread of values than
the old hashing algorithm (originally by Chris Torek, later tweaked by
Ilya Zakharevich).  Hash values output from the algorithm on a hash of
all 3-char printable ASCII keys comes much closer to passing the
DIEHARD random number generation tests.  According to perlbench, this
change has not affected the overall speed of Perl.

=item *

unshift() should now be noticeably faster.

=back

=head1 Installation and Configuration Improvements

=head2 Generic Improvements

=over 4

=item *

INSTALL now explains how you can configure Perl to use 64-bit
integers even on non-64-bit platforms.

=item *

Policy.sh policy change: if you are reusing a Policy.sh file
(see INSTALL) and you use Configure -Dprefix=/foo/bar and in the old
Policy $prefix eq $siteprefix and $prefix eq $vendorprefix, all of
them will now be changed to the new prefix, /foo/bar.  (Previously
only $prefix changed.)  If you do not like this new behaviour,
specify prefix, siteprefix, and vendorprefix explicitly.

=item *

A new optional location for Perl libraries, otherlibdirs, is available.
It can be used for example for vendor add-ons without disturbing Perl's
own library directories.

=item *

In many platforms, the vendor-supplied 'cc' is too stripped-down to
build Perl (basically, 'cc' doesn't do ANSI C).  If this seems
to be the case and 'cc' does not seem to be the GNU C compiler
'gcc', an automatic attempt is made to find and use 'gcc' instead.

=item *

gcc needs to closely track the operating system release to avoid
build problems. If Configure finds that gcc was built for a different
operating system release than is running, it now gives a clearly visible
warning that there may be trouble ahead.

=item *

Since Perl 5.8 is not binary-compatible with previous releases
of Perl, Configure no longer suggests including the 5.005
modules in @@INC.

=item *

Configure C<-S> can now run non-interactively. [561]

=item *

Configure support for pdp11-style memory models has been removed due
to obsolescence. [561]

=item *

configure.gnu now works with options with whitespace in them.

=item *

installperl now outputs everything to STDERR.

=item *

Because PerlIO is now the default on most platforms, "-perlio" doesn't
get appended to the $Config{archname} (also known as $^O) anymore.
Instead, if you explicitly choose not to use perlio (Configure command
line option -Uuseperlio), you will get "-stdio" appended.

=item *

Another change related to the architecture name is that "-64all"
(-Duse64bitall, or "maximally 64-bit") is appended only if your
pointers are 64 bits wide.  (To be exact, the use64bitall is ignored.)

=item *

In AFS installations, one can configure the root of the AFS to be
somewhere else than the default F</afs> by using the Configure
parameter C<-Dafsroot=/some/where/else>.

=item *

APPLLIB_EXP, a lesser-known configuration-time definition, has been
documented.  It can be used to prepend site-specific directories
to Perl's default search path (@@INC); see INSTALL for information.

=item *

The version of Berkeley DB used when the Perl (and, presumably, the
DB_File extension) was built is now available as
C<@@Config{qw(db_version_major db_version_minor db_version_patch)}>
from Perl and as C<DB_VERSION_MAJOR_CFG DB_VERSION_MINOR_CFG
DB_VERSION_PATCH_CFG> from C.

=item *

Building Berkeley DB3 for compatibility modes for DB, NDBM, and ODBM
has been documented in INSTALL.

=item *

If you have CPAN access (either network or a local copy such as a
CD-ROM) you can during specify extra modules to Configure to build and
install with Perl using the -Dextras=...  option.  See INSTALL for
more details.

=item *

In addition to config.over, a new override file, config.arch, is
available.  This file is supposed to be used by hints file writers
for architecture-wide changes (as opposed to config.over which is
for site-wide changes).

=item *

If your file system supports symbolic links, you can build Perl outside
of the source directory by

	mkdir /tmp/perl/build/directory
	cd /tmp/perl/build/directory
	sh /path/to/perl/source/Configure -Dmksymlinks ...

This will create in /tmp/perl/build/directory a tree of symbolic links
pointing to files in /path/to/perl/source.  The original files are left
unaffected.  After Configure has finished, you can just say

	make all test

and Perl will be built and tested, all in /tmp/perl/build/directory.
[561]

=item *

For Perl developers, several new make targets for profiling
and debugging have been added; see L<perlhack>.

=over 8

=item *

Use of the F<gprof> tool to profile Perl has been documented in
L<perlhack>.  There is a make target called "perl.gprof" for
generating a gprofiled Perl executable.

=item *

If you have GCC 3, there is a make target called "perl.gcov" for
creating a gcoved Perl executable for coverage analysis.  See
L<perlhack>.

=item *

If you are on IRIX or Tru64 platforms, new profiling/debugging options
have been added; see L<perlhack> for more information about pixie and
Third Degree.

=back

=item *

Guidelines of how to construct minimal Perl installations have
been added to INSTALL.

=item *

The Thread extension is now not built at all under ithreads
(C<Configure -Duseithreads>) because it wouldn't work anyway (the
Thread extension requires being Configured with C<-Duse5005threads>).

B<Note that the 5.005 threads are unsupported and deprecated: if you
have code written for the old threads you should migrate it to the
new ithreads model.>

=item *

The Gconvert macro ($Config{d_Gconvert}) used by perl for stringifying
floating-point numbers is now more picky about using sprintf %.*g
rules for the conversion.  Some platforms that used to use gcvt may
now resort to the slower sprintf.

=item *

The obsolete method of making a special (e.g., debugging) flavor
of perl by saying

	make LIBPERL=libperld.a

has been removed. Use -DDEBUGGING instead.

=back

=head2 New Or Improved Platforms

For the list of platforms known to support Perl,
see L<perlport/"Supported Platforms">.

=over 4

=item *

AIX dynamic loading should be now better supported.

=item *

AIX should now work better with gcc, threads, and 64-bitness.  Also the
long doubles support in AIX should be better now.  See L<perlaix>.

=item *

AtheOS ( http://www.atheos.cx/ ) is a new platform.

=item *

BeOS has been reclaimed.

=item *

The DG/UX platform now supports 5.005-style threads.
See L<perldgux>.

=item *

The DYNIX/ptx platform (also known as dynixptx) is supported at or
near osvers 4.5.2.

=item *

EBCDIC platforms (z/OS (also known as OS/390), POSIX-BC, and VM/ESA)
have been regained.  Many test suite tests still fail and the
co-existence of Unicode and EBCDIC isn't quite settled, but the
situation is much better than with Perl 5.6.  See L<perlos390>,
L<perlbs2000> (for POSIX-BC), and L<perlvmesa> for more information.

=item *

Building perl with -Duseithreads or -Duse5005threads now works under
HP-UX 10.20 (previously it only worked under 10.30 or later). You will
need a thread library package installed. See README.hpux. [561]

=item *

Mac OS Classic is now supported in the mainstream source package
(MacPerl has of course been available since perl 5.004 but now the
source code bases of standard Perl and MacPerl have been synchronised)
[561]

=item *

Mac OS X (or Darwin) should now be able to build Perl even on HFS+
filesystems.  (The case-insensitivity used to confuse the Perl build
process.)

=item *

NCR MP-RAS is now supported. [561]

=item *

All the NetBSD specific patches (except for the installation
specific ones) have been merged back to the main distribution.

=item *

NetWare from Novell is now supported.  See L<perlnetware>.

=item *

NonStop-UX is now supported. [561]

=item *

NEC SUPER-UX is now supported.

=item *

All the OpenBSD specific patches (except for the installation
specific ones) have been merged back to the main distribution.

=item *

Perl has been tested with the GNU pth userlevel thread package
( http://www.gnu.org/software/pth/pth.html ).  All thread tests
of Perl now work, but not without adding some yield()s to the tests,
so while pth (and other userlevel thread implementations) can be
considered to be "working" with Perl ithreads, keep in mind the
possible non-preemptability of the underlying thread implementation.

=item *

Stratus VOS is now supported using Perl's native build method
(Configure).  This is the recommended method to build Perl on
VOS.  The older methods, which build miniperl, are still
available.  See L<perlvos>. [561+]

=item *

The Amdahl UTS UNIX mainframe platform is now supported. [561]

=item *

WinCE is now supported.  See L<perlce>.

=item *

z/OS (formerly known as OS/390, formerly known as MVS OE) now has
support for dynamic loading.  This is not selected by default,
however, you must specify -Dusedl in the arguments of Configure. [561]

=back

=head1 Selected Bug Fixes

Numerous memory leaks and uninitialized memory accesses have been
hunted down.  Most importantly, anonymous subs used to leak quite
a bit. [561]

=over 4

=item *

The autouse pragma didn't work for Multi::Part::Function::Names.

=item *

caller() could cause core dumps in certain situations.  Carp was
sometimes affected by this problem.  In particular, caller() now
returns a subroutine name of C<(unknown)> for subroutines that have
been removed from the symbol table.

=item *

chop(@@list) in list context returned the characters chopped in
reverse order.  This has been reversed to be in the right order. [561]

=item *

Configure no longer includes the DBM libraries (dbm, gdbm, db, ndbm)
when building the Perl binary.  The only exception to this is SunOS 4.x,
which needs them. [561]

=item *

The behaviour of non-decimal but numeric string constants such as
"0x23" was platform-dependent: in some platforms that was seen as 35,
in some as 0, in some as a floating point number (don't ask).  This
was caused by Perl's using the operating system libraries in a situation
where the result of the string to number conversion is undefined: now
Perl consistently handles such strings as zero in numeric contexts.

=item *

Several debugger fixes: exit code now reflects the script exit code,
condition C<"0"> now treated correctly, the C<d> command now checks
line number, C<$.> no longer gets corrupted, and all debugger output
now goes correctly to the socket if RemotePort is set. [561]

=item *

The debugger (perl5db.pl) has been modified to present a more
consistent commands interface, via (CommandSet=580).  perl5db.t was
also added to test the changes, and as a placeholder for further tests.

See L<perldebug>.

=item *

The debugger has a new C<dumpDepth> option to control the maximum
depth to which nested structures are dumped.  The C<x> command has
been extended so that C<x N EXPR> dumps out the value of I<EXPR> to a
depth of at most I<N> levels.

=item *

The debugger can now show lexical variables if you have the CPAN
module PadWalker installed.

=item *

The order of DESTROYs has been made more predictable.

=item *

Perl 5.6.0 could emit spurious warnings about redefinition of
dl_error() when statically building extensions into perl.
This has been corrected. [561]

=item *

L<dprofpp> -R didn't work.

=item *

C<*foo{FORMAT}> now works.

=item *

Infinity is now recognized as a number.

=item *

UNIVERSAL::isa no longer caches methods incorrectly.  (This broke
the Tk extension with 5.6.0.) [561]

=item *

Lexicals I: lexicals outside an eval "" weren't resolved
correctly inside a subroutine definition inside the eval "" if they
were not already referenced in the top level of the eval""ed code.

=item *

Lexicals II: lexicals leaked at file scope into subroutines that
were declared before the lexicals.

=item *

Lexical warnings now propagating correctly between scopes
and into C<eval "...">.

=item *

C<use warnings qw(FATAL all)> did not work as intended.  This has been
corrected. [561]

=item *

warnings::enabled() now reports the state of $^W correctly if the caller
isn't using lexical warnings. [561]

=item *

Line renumbering with eval and C<#line> now works. [561]

=item *

Fixed numerous memory leaks, especially in eval "".

=item *

Localised tied variables no longer leak memory

    use Tie::Hash;
    tie my %tied_hash => 'Tie::StdHash';

    ...

    # Used to leak memory every time local() was called;
    # in a loop, this added up.
    local($tied_hash{Foo}) = 1;

=item *

Localised hash elements (and %ENV) are correctly unlocalised to not
exist, if they didn't before they were localised.


    use Tie::Hash;
    tie my %tied_hash => 'Tie::StdHash';

    ...

    # Nothing has set the FOO element so far

    { local $tied_hash{FOO} = 'Bar' }

    # This used to print, but not now.
    print "exists!\n" if exists $tied_hash{FOO};

As a side effect of this fix, tied hash interfaces B<must> define
the EXISTS and DELETE methods.

=item *

mkdir() now ignores trailing slashes in the directory name,
as mandated by POSIX.

=item *

Some versions of glibc have a broken modfl().  This affects builds
with C<-Duselongdouble>.  This version of Perl detects this brokenness
and has a workaround for it.  The glibc release 2.2.2 is known to have
fixed the modfl() bug.

=item *

Modulus of unsigned numbers now works (4063328477 % 65535 used to
return 27406, instead of 27047). [561]

=item *

Some "not a number" warnings introduced in 5.6.0 eliminated to be
more compatible with 5.005.  Infinity is now recognised as a number. [561]

=item *

Numeric conversions did not recognize changes in the string value
properly in certain circumstances. [561]

=item *

Attributes (such as :shared) didn't work with our().

=item *

our() variables will not cause bogus "Variable will not stay shared"
warnings. [561]

=item *

"our" variables of the same name declared in two sibling blocks
resulted in bogus warnings about "redeclaration" of the variables.
The problem has been corrected. [561]

=item *

pack "Z" now correctly terminates the string with "\0".

=item *

Fix password routines which in some shadow password platforms
(e.g. HP-UX) caused getpwent() to return every other entry.

=item *

The PERL5OPT environment variable (for passing command line arguments
to Perl) didn't work for more than a single group of options. [561]

=item *

PERL5OPT with embedded spaces didn't work.

=item *

printf() no longer resets the numeric locale to "C".

=item *

C<qw(a\\b)> now parses correctly as C<'a\\b'>: that is, as three
characters, not four. [561]

=item *

pos() did not return the correct value within s///ge in earlier
versions.  This is now handled correctly. [561]

=item *

Printing quads (64-bit integers) with printf/sprintf now works
without the q L ll prefixes (assuming you are on a quad-capable platform).

=item *

Regular expressions on references and overloaded scalars now work. [561+]

=item *

Right-hand side magic (GMAGIC) could in many cases such as string
concatenation be invoked too many times.

=item *

scalar() now forces scalar context even when used in void context.

=item *

SOCKS support is now much more robust.

=item *

sort() arguments are now compiled in the right wantarray context
(they were accidentally using the context of the sort() itself).
The comparison block is now run in scalar context, and the arguments
to be sorted are always provided list context. [561]

=item *

Changed the POSIX character class C<[[:space:]]> to include the (very
rarely used) vertical tab character.  Added a new POSIX-ish character
class C<[[:blank:]]> which stands for horizontal whitespace
(currently, the space and the tab).

=item *

The tainting behaviour of sprintf() has been rationalized.  It does
not taint the result of floating point formats anymore, making the
behaviour consistent with that of string interpolation. [561]

=item *

Some cases of inconsistent taint propagation (such as within hash
values) have been fixed.

=item *

The RE engine found in Perl 5.6.0 accidentally pessimised certain kinds
of simple pattern matches.  These are now handled better. [561]

=item *

Regular expression debug output (whether through C<use re 'debug'>
or via C<-Dr>) now looks better. [561]

=item *

Multi-line matches like C<"a\nxb\n" =~ /(?!\A)x/m> were flawed.  The
bug has been fixed. [561]

=item *

Use of $& could trigger a core dump under some situations.  This
is now avoided. [561]

=item *

The regular expression captured submatches ($1, $2, ...) are now
more consistently unset if the match fails, instead of leaving false
data lying around in them. [561]

=item *

readline() on files opened in "slurp" mode could return an extra
"" (blank line) at the end in certain situations.  This has been
corrected. [561]

=item *

Autovivification of symbolic references of special variables described
in L<perlvar> (as in C<${$num}>) was accidentally disabled.  This works
again now. [561]

=item *

Sys::Syslog ignored the C<LOG_AUTH> constant.

=item *

$AUTOLOAD, sort(), lock(), and spawning subprocesses
in multiple threads simultaneously are now thread-safe.

=item *

Tie::Array's SPLICE method was broken.

=item *

Allow a read-only string on the left-hand side of a non-modifying tr///.

=item *

If C<STDERR> is tied, warnings caused by C<warn> and C<die> now
correctly pass to it.

=item *

Several Unicode fixes.

=over 8

=item *

BOMs (byte order marks) at the beginning of Perl files
(scripts, modules) should now be transparently skipped.
UTF-16 and UCS-2 encoded Perl files should now be read correctly.

=item *

The character tables have been updated to Unicode 3.2.0.

=item *

Comparing with utf8 data does not magically upgrade non-utf8 data
into utf8.  (This was a problem for example if you were mixing data
from I/O and Unicode data: your output might have got magically encoded
as UTF-8.)

=item *

Generating illegal Unicode code points such as U+FFFE, or the UTF-16
surrogates, now also generates an optional warning.

=item *

C<IsAlnum>, C<IsAlpha>, and C<IsWord> now match titlecase.

=item *

Concatenation with the C<.> operator or via variable interpolation,
C<eq>, C<substr>, C<reverse>, C<quotemeta>, the C<x> operator,
substitution with C<s///>, single-quoted UTF8, should now work.

=item *

The C<tr///> operator now works.  Note that the C<tr///CU>
functionality has been removed (but see pack('U0', ...)).

=item *

C<eval "v200"> now works.

=item *

Perl 5.6.0 parsed m/\x{ab}/ incorrectly, leading to spurious warnings.
This has been corrected. [561]

=item *

Zero entries were missing from the Unicode classes such as C<IsDigit>.

=back

=item *

Large unsigned numbers (those above 2**31) could sometimes lose their
unsignedness, causing bogus results in arithmetic operations. [561]

=item *

The Perl parser has been stress tested using both random input and
Markov chain input and the few found crashes and lockups have been
fixed.

=back

=head2 Platform Specific Changes and Fixes

=over 4

=item *

BSDI 4.*

Perl now works on post-4.0 BSD/OSes.

=item *

All BSDs

Setting C<$0> now works (as much as possible; see L<perlvar> for details).

=item *

Cygwin

Numerous updates; currently synchronised with Cygwin 1.3.10.

=item *

Previously DYNIX/ptx had problems in its Configure probe for non-blocking I/O.

=item *

EPOC

EPOC now better supported.  See README.epoc. [561]

=item *

FreeBSD 3.*

Perl now works on post-3.0 FreeBSDs.

=item *

HP-UX

README.hpux updated; C<Configure -Duse64bitall> now works;
now uses HP-UX malloc instead of Perl malloc.

=item *

IRIX

Numerous compilation flag and hint enhancements; accidental mixing
of 32-bit and 64-bit libraries (a doomed attempt) made much harder.

=item *

Linux

=over 8

=item *

Long doubles should now work (see INSTALL). [561]

=item *

Linux previously had problems related to sockaddrlen when using
accept(), recvfrom() (in Perl: recv()), getpeername(), and
getsockname().

=back

=item *

Mac OS Classic

Compilation of the standard Perl distribution in Mac OS Classic should
now work if you have the Metrowerks development environment and the
missing Mac-specific toolkit bits.  Contact the macperl mailing list
for details.

=item *

MPE/iX

MPE/iX update after Perl 5.6.0.  See README.mpeix. [561]

=item *

NetBSD/threads: try installing the GNU pth (should be in the
packages collection, or http://www.gnu.org/software/pth/),
and Configure with -Duseithreads.

=item *

NetBSD/sparc

Perl now works on NetBSD/sparc.

=item *

OS/2

Now works with usethreads (see INSTALL). [561]

=item *

Solaris

64-bitness using the Sun Workshop compiler now works.

=item *

Stratus VOS

The native build method requires at least VOS Release 14.5.0
and GNU C++/GNU Tools 2.0.1 or later.  The Perl pack function
now maps overflowed values to +infinity and underflowed values
to -infinity.

=item *

Tru64 (aka Digital UNIX, aka DEC OSF/1)

The operating system version letter now recorded in $Config{osvers}.
Allow compiling with gcc (previously explicitly forbidden).  Compiling
with gcc still not recommended because buggy code results, even with
gcc 2.95.2.

=item *

Unicos

Fixed various alignment problems that lead into core dumps either
during build or later; no longer dies on math errors at runtime;
now using full quad integers (64 bits), previously was using
only 46 bit integers for speed.

=item *

VMS

See L</"Socket Extension Dynamic in VMS"> and L</"IEEE-format Floating Point
Default on OpenVMS Alpha"> for important changes not otherwise listed here.

chdir() now works better despite a CRT bug; now works with MULTIPLICITY
(see INSTALL); now works with Perl's malloc.

The tainting of C<%ENV> elements via C<keys> or C<values> was previously
unimplemented.  It now works as documented.

The C<waitpid> emulation has been improved.  The worst bug (now fixed)
was that a pid of -1 would cause a wildcard search of all processes on
the system.

POSIX-style signals are now emulated much better on VMS versions prior
to 7.0.

The C<system> function and backticks operator have improved
functionality and better error handling. [561]

File access tests now use current process privileges rather than the
user's default privileges, which could sometimes result in a mismatch
between reported access and actual access.  This improvement is only
available on VMS v6.0 and later.

There is a new C<kill> implementation based on C<sys$sigprc> that allows
older VMS systems (pre-7.0) to use C<kill> to send signals rather than
simply force exit.  This implementation also allows later systems to
call C<kill> from within a signal handler.

Iterative logical name translations are now limited to 10 iterations in
imitation of SHOW LOGICAL and other OpenVMS facilities.

=item *

Windows

=over 8

=item *

Signal handling now works better than it used to.  It is now implemented
using a Windows message loop, and is therefore less prone to random
crashes.

=item *

fork() emulation is now more robust, but still continues to have a few
esoteric bugs and caveats.  See L<perlfork> for details. [561+]

=item *

A failed (pseudo)fork now returns undef and sets errno to EAGAIN. [561]

=item *

The following modules now work on Windows:

    ExtUtils::Embed         [561]
    IO::Pipe
    IO::Poll
    Net::Ping

=item *

IO::File::new_tmpfile() is no longer limited to 32767 invocations
per-process.

=item *

Better chdir() return value for a non-existent directory.

=item *

Compiling perl using the 64-bit Platform SDK tools is now supported.

=item *

The Win32::SetChildShowWindow() builtin can be used to control the
visibility of windows created by child processes.  See L<Win32> for
details.

=item *

Non-blocking waits for child processes (or pseudo-processes) are
supported via C<waitpid($pid, &POSIX::WNOHANG)>.

=item *

The behavior of system() with multiple arguments has been rationalized.
Each unquoted argument will be automatically quoted to protect whitespace,
and any existing whitespace in the arguments will be preserved.  This
improves the portability of system(@@args) by avoiding the need for
Windows C<cmd> shell specific quoting in perl programs.

Note that this means that some scripts that may have relied on earlier
buggy behavior may no longer work correctly.  For example,
C<system("nmake /nologo", @@args)> will now attempt to run the file
C<nmake /nologo> and will fail when such a file isn't found.
On the other hand, perl will now execute code such as
C<system("c:/Program Files/MyApp/foo.exe", @@args)> correctly.

=item *

The perl header files no longer suppress common warnings from the
Microsoft Visual C++ compiler.  This means that additional warnings may
now show up when compiling XS code.

=item *

Borland C++ v5.5 is now a supported compiler that can build Perl.
However, the generated binaries continue to be incompatible with those
generated by the other supported compilers (GCC and Visual C++). [561]

=item *

Duping socket handles with open(F, ">&MYSOCK") now works under Windows 9x.
[561]

=item *

Current directory entries in %ENV are now correctly propagated to child
processes. [561]

=item *

New %ENV entries now propagate to subprocesses. [561]

=item *
d27 1
a27 4
Win32::GetCwd() correctly returns C:\ instead of C: when at the drive root.
Other bugs in chdir() and Cwd::cwd() have also been fixed. [561]

=item *
d29 1
a29 2
The makefiles now default to the features enabled in ActiveState ActivePerl
(a popular Win32 binary distribution). [561]
d31 10
a40 4
=item *

HTML files will now be installed in c:\perl\html instead of
c:\perl\lib\pod\html
d42 1
a42 1
=item *
d44 2
a45 1
REG_EXPAND_SZ keys are now allowed in registry settings used by perl. [561]
d47 1
a47 34
=item *

Can now send() from all threads, not just the first one. [561]

=item *

ExtUtils::MakeMaker now uses $ENV{LIB} to search for libraries. [561]

=item *

Less stack reserved per thread so that more threads can run
concurrently. (Still 16M per thread.) [561]

=item *

C<< File::Spec->tmpdir() >> now prefers C:/temp over /tmp
(works better when perl is running as service).

=item *

Better UNC path handling under ithreads. [561]

=item *

wait(), waitpid(), and backticks now return the correct exit status
under Windows 9x. [561]

=item *

A socket handle leak in accept() has been fixed. [561]

=back

=back
d49 1
a49 1
=head1 New or Changed Diagnostics
d51 1
a51 1
Please see L<perldiag> for more details.
d55 1
a55 6
=item *

Ambiguous range in the transliteration operator (like a-z-9) now
gives a warning.

=item *
d57 1
a57 3
chdir("") and chdir(undef) now give a deprecation warning because they
cause a possible unintentional chdir to the home directory.
Say chdir() if you really mean that.
d59 1
a59 8
=item *

Two new debugging options have been added: if you have compiled your
Perl with debugging, you can use the -DT [561] and -DR options to trace
tokenising and to add reference counts to displaying variables,
respectively.

=item *
d61 1
a61 3
The lexical warnings category "deprecated" is no longer a sub-category
of the "syntax" category. It is now a top-level category in its own
right.
d63 1
a63 1
=item *
d65 1
a65 2
Unadorned dump() will now give a warning suggesting to
use explicit CORE::dump() if that's what really is meant.
d67 1
a67 1
=item *
d69 1
a69 2
The "Unrecognized escape" warning has been extended to include C<\8>,
C<\9>, and C<\_>.  There is no need to escape any of the C<\w> characters.
d71 1
a71 1
=item *
d73 1
a73 4
All regular expression compilation error messages are now hopefully
easier to understand both because the error message now comes before
the failed regex and because the point of failure is now clearly
marked by a C<E<lt>-- HERE> marker.
d75 1
a75 1
=item *
d77 1
a77 3
Various I/O (and socket) functions like binmode(), close(), and so
forth now more consistently warn if they are used illogically either
on a yet unopened or on an already closed filehandle (or socket).
d79 1
a79 1
=item *
d81 1
a81 2
Using lstat() on a filehandle now gives a warning.  (It's a non-sensical
thing to do.)
d83 1
a83 1
=item *
d85 1
a85 1
The C<-M> and C<-m> options now warn if you didn't supply the module name.
d87 1
a87 24
=item *

If you in C<use> specify a required minimum version, modules matching
the name and but not defining a $VERSION will cause a fatal failure.

=item *

Using negative offset for vec() in lvalue context is now a warnable offense.

=item *

Odd number of arguments to oveload::constant now elicits a warning.

=item *

Odd number of elements to in anonymous hash now elicits a warning.

=item *

The various "opened only for", "on closed", "never opened" warnings
drop the C<main::> prefix for filehandles in the C<main> package,
for example C<STDIN> instead of C<main::STDIN>.

=item *
d89 2
a90 92
Subroutine prototypes are now checked more carefully, you may
get warnings for example if you have used non-prototype characters.

=item *

If an attempt to use a (non-blessed) reference as an array index
is made, a warning is given.

=item *

C<push @@a;> and C<unshift @@a;> (with no values to push or unshift)
now give a warning.  This may be a problem for generated and evaled
code.

=item *

If you try to L<perlfunc/pack> a number less than 0 or larger than 255
using the C<"C"> format you will get an optional warning.  Similarly
for the C<"c"> format and a number less than -128 or more than 127.

=item *

pack C<P> format now demands an explicit size.

=item *

unpack C<w> now warns of unterminated compressed integers.

=item *

Warnings relating to the use of PerlIO have been added.

=item *

Certain regex modifiers such as C<(?o)> make sense only if applied to
the entire regex.  You will get an optional warning if you try to do
otherwise.

=item *

Variable length lookbehind has not yet been implemented, trying to
use it will tell that.

=item *

Using arrays or hashes as references (e.g. C<< %foo->{bar} >>
has been deprecated for a while.  Now you will get an optional warning.

=item *

Warnings relating to the use of the new restricted hashes feature
have been added.

=item *

Self-ties of arrays and hashes are not supported and fatal errors
will happen even at an attempt to do so.

=item *

Using C<sort> in scalar context now issues an optional warning.
This didn't do anything useful, as the sort was not performed.

=item *

Using the /g modifier in split() is meaningless and will cause a warning.

=item *

Using splice() past the end of an array now causes a warning.

=item *

Malformed Unicode encodings (UTF-8 and UTF-16) cause a lot of warnings,
ad doestrying to use UTF-16 surrogates (which are unimplemented).

=item *

Trying to use Unicode characters on an I/O stream without marking the
stream's encoding (using open() or binmode()) will cause "Wide character"
warnings.

=item *

Use of v-strings in use/require causes a (backward) portability warning.

=item *

Warnings relating to the use interpreter threads and their shared data
have been added.

=back
d94 3
a96 1
=over 4
d98 1
a98 72
=item *

PerlIO is now the default.

=item *

perlapi.pod (a companion to perlguts) now attempts to document the
internal API.

=item *

You can now build a really minimal perl called microperl.
Building microperl does not require even running Configure;
C<make -f Makefile.micro> should be enough.  Beware: microperl makes
many assumptions, some of which may be too bold; the resulting
executable may crash or otherwise misbehave in wondrous ways.
For careful hackers only.

=item *

Added rsignal(), whichsig(), do_join(), op_clear, op_null,
ptr_table_clear(), ptr_table_free(), sv_setref_uv(), and several UTF-8
interfaces to the publicised API.  For the full list of the available
APIs see L<perlapi>.

=item *

Made possible to propagate customised exceptions via croak()ing.

=item *

Now xsubs can have attributes just like subs.  (Well, at least the
built-in attributes.)

=item *

dTHR and djSP have been obsoleted; the former removed (because it's
a no-op) and the latter replaced with dSP.

=item *

PERL_OBJECT has been completely removed.

=item *

The MAGIC constants (e.g. C<'P'>) have been macrofied
(e.g. C<PERL_MAGIC_TIED>) for better source code readability
and maintainability.

=item *

The regex compiler now maintains a structure that identifies nodes in
the compiled bytecode with the corresponding syntactic features of the
original regex expression.  The information is attached to the new
C<offsets> member of the C<struct regexp>. See L<perldebguts> for more
complete information.

=item *

The C code has been made much more C<gcc -Wall> clean.  Some warning
messages still remain in some platforms, so if you are compiling with
gcc you may see some warnings about dubious practices.  The warnings
are being worked on.

=item *

F<perly.c>, F<sv.c>, and F<sv.h> have now been extensively commented.

=item *

Documentation on how to use the Perl source repository has been added
to F<Porting/repository.pod>.
d100 2
a101 5
=item *

There are now several profiling make targets.

=back
d103 1
a103 1
=head1 Security Vulnerability Closed [561]
d105 2
a106 207
(This change was already made in 5.7.0 but bears repeating here.)
(5.7.0 came out before 5.6.1: the development branch 5.7 released
earlier than the maintenance branch 5.6)

A potential security vulnerability in the optional suidperl component
of Perl was identified in August 2000.  suidperl is neither built nor
installed by default.  As of November 2001 the only known vulnerable
platform is Linux, most likely all Linux distributions.  CERT and
various vendors and distributors have been alerted about the vulnerability.
See http://www.cpan.org/src/5.0/sperl-2000-08-05/sperl-2000-08-05.txt
for more information.

The problem was caused by Perl trying to report a suspected security
exploit attempt using an external program, /bin/mail.  On Linux
platforms the /bin/mail program had an undocumented feature which
when combined with suidperl gave access to a root shell, resulting in
a serious compromise instead of reporting the exploit attempt.  If you
don't have /bin/mail, or if you have 'safe setuid scripts', or if
suidperl is not installed, you are safe.

The exploit attempt reporting feature has been completely removed from
Perl 5.8.0 (and the maintenance release 5.6.1, and it was removed also
from all the Perl 5.7 releases), so that particular vulnerability
isn't there anymore.  However, further security vulnerabilities are,
unfortunately, always possible.  The suidperl functionality is most
probably going to be removed in Perl 5.10.  In any case, suidperl
should only be used by security experts who know exactly what they are
doing and why they are using suidperl instead of some other solution
such as sudo ( see http://www.courtesan.com/sudo/ ).

=head1 New Tests

Several new tests have been added, especially for the F<lib> and
F<ext> subsections.  There are now about 69 000 individual tests
(spread over about 700 test scripts), in the regression suite (5.6.1
has about 11 700 tests, in 258 test scripts)  The exact numbers depend
on the platform and Perl configuration used.  Many of the new tests
are of course introduced by the new modules, but still in general Perl
is now more thoroughly tested.

Because of the large number of tests, running the regression suite
will take considerably longer time than it used to: expect the suite
to take up to 4-5 times longer to run than in perl 5.6.  On a really
fast machine you can hope to finish the suite in about 6-8 minutes
(wallclock time).

The tests are now reported in a different order than in earlier Perls.
(This happens because the test scripts from under t/lib have been moved
to be closer to the library/extension they are testing.)

=head1 Known Problems

=head2 The Compiler Suite Is Still Very Experimental

The compiler suite is slowly getting better but it continues to be
highly experimental.  Use in production environments is discouraged.

=head2 Localising Tied Arrays and Hashes Is Broken

    local %tied_array;

doesn't work as one would expect: the old value is restored
incorrectly.  This will be changed in a future release, but we don't
know yet what the new semantics will exactly be.  In any case, the
change will break existing code that relies on the current
(ill-defined) semantics, so just avoid doing this in general.

=head2 Building Extensions Can Fail Because Of Largefiles

Some extensions like mod_perl are known to have issues with
`largefiles', a change brought by Perl 5.6.0 in which file offsets
default to 64 bits wide, where supported.  Modules may fail to compile
at all, or they may compile and work incorrectly.  Currently, there
is no good solution for the problem, but Configure now provides
appropriate non-largefile ccflags, ldflags, libswanted, and libs
in the %Config hash (e.g., $Config{ccflags_nolargefiles}) so the
extensions that are having problems can try configuring themselves
without the largefileness.  This is admittedly not a clean solution,
and the solution may not even work at all.  One potential failure is
whether one can (or, if one can, whether it's a good idea to) link
together at all binaries with different ideas about file offsets;
all this is platform-dependent.

=head2 Modifying $_ Inside for(..)

   for (1..5) { $_++ }

works without complaint.  It shouldn't.  (You should be able to
modify only lvalue elements inside the loops.)  You can see the
correct behaviour by replacing the 1..5 with 1, 2, 3, 4, 5.

=head2 mod_perl 1.26 Doesn't Build With Threaded Perl

Use mod_perl 1.27 or higher.

=head2 lib/ftmp-security tests warn 'system possibly insecure'

Don't panic.  Read the 'make test' section of INSTALL instead.

=head2 libwww-perl (LWP) fails base/date #51

Use libwww-perl 5.65 or later.

=head2 PDL failing some tests

Use PDL 2.3.4 or later.

=head2 Perl_get_sv

You may get errors like 'Undefined symbol "Perl_get_sv"' or "can't
resolve symbol 'Perl_get_sv'", or the symbol may be "Perl_sv_2pv".
This probably means that you are trying to use an older shared Perl
library (or extensions linked with such) with Perl 5.8.0 executable.
Perl used to have such a subroutine, but that is no more the case.
Check your shared library path, and any shared Perl libraries in those
directories.

Sometimes this problem may also indicate a partial Perl 5.8.0
installation, see L</"Mac OS X dyld undefined symbols"> for an
example and how to deal with it.

=head2 Self-tying Problems

Self-tying of arrays and hashes is broken in rather deep and
hard-to-fix ways.  As a stop-gap measure to avoid people from getting
frustrated at the mysterious results (core dumps, most often), it is
forbidden for now (you will get a fatal error even from an attempt).

A change to self-tying of globs has caused them to be recursively
referenced (see: L<perlobj/"Two-Phased Garbage Collection">).  You
will now need an explicit untie to destroy a self-tied glob.  This
behaviour may be fixed at a later date.

Self-tying of scalars and IO thingies works.

=head2 ext/threads/t/libc

If this test fails, it indicates that your libc (C library) is not
threadsafe.  This particular test stress tests the localtime() call to
find out whether it is threadsafe.  See L<perlthrtut> for more information.

=head2 Failure of Thread (5.005-style) tests

B<Note that support for 5.005-style threading is deprecated,
experimental and practically unsupported.  In 5.10, it is expected
to be removed.  You should migrate your code to ithreads.>

The following tests are known to fail due to fundamental problems in
the 5.005 threading implementation. These are not new failures--Perl
5.005_0x has the same bugs, but didn't have these tests.

 ../ext/B/t/xref.t                    255 65280    14   12  85.71%  3-14
 ../ext/List/Util/t/first.t           255 65280     7    4  57.14%  2 5-7
 ../lib/English.t                       2   512    54    2   3.70%  2-3
 ../lib/FileCache.t                                 5    1  20.00%  5
 ../lib/Filter/Simple/t/data.t                      6    3  50.00%  1-3
 ../lib/Filter/Simple/t/filter_only.                9    3  33.33%  1-2 5
 ../lib/Math/BigInt/t/bare_mbf.t                 1627    4   0.25%  8 11 1626-1627
 ../lib/Math/BigInt/t/bigfltpm.t                 1629    4   0.25%  10 13 1628-
                                                                    1629
 ../lib/Math/BigInt/t/sub_mbf.t                  1633    4   0.24%  8 11 1632-1633
 ../lib/Math/BigInt/t/with_sub.t                 1628    4   0.25%  9 12 1627-1628
 ../lib/Tie/File/t/31_autodefer.t     255 65280    65   32  49.23%  34-65
 ../lib/autouse.t                                  10    1  10.00%  4
 op/flip.t                                         15    1   6.67%  15

These failures are unlikely to get fixed as 5.005-style threads
are considered fundamentally broken.  (Basically what happens is that
competing threads can corrupt shared global state, one good example
being regular expression engine's state.)

=head2 Timing problems

The following tests may fail intermittently because of timing
problems, for example if the system is heavily loaded.

    t/op/alarm.t
    ext/Time/HiRes/HiRes.t
    lib/Benchmark.t
    lib/Memoize/t/expmod_t.t
    lib/Memoize/t/speed.t

In case of failure please try running them manually, for example

    ./perl -Ilib ext/Time/HiRes/HiRes.t

=head2 Tied/Magical Array/Hash Elements Do Not Autovivify

For normal arrays C<$foo = \$bar[1]> will assign C<undef> to
C<$bar[1]> (assuming that it didn't exist before), but for
tied/magical arrays and hashes such autovivification does not happen
because there is currently no way to catch the reference creation.
The same problem affects slicing over non-existent indices/keys of
a tied/magical array/hash.

=head2 Unicode in package/class and subroutine names does not work

One can have Unicode in identifier names, but not in package/class or
subroutine names.  While some limited functionality towards this does
exist as of Perl 5.8.0, that is more accidental than designed; use of
Unicode for the said purposes is unsupported.

One reason of this unfinishedness is its (currently) inherent
unportability: since both package names and subroutine names may
need to be mapped to file and directory names, the Unicode capability
of the filesystem becomes important-- and there unfortunately aren't
portable answers.
d108 1
a108 1
=head1 Platform Specific Problems
d110 7
a116 1
=head2 AIX
d122 1
a122 271
If using the AIX native make command, instead of just "make" issue
"make all".  In some setups the former has been known to spuriously
also try to run "make install".  Alternatively, you may want to use
GNU make.

=item *

In AIX 4.2, Perl extensions that use C++ functions that use statics
may have problems in that the statics are not getting initialized.
In newer AIX releases, this has been solved by linking Perl with
the libC_r library, but unfortunately in AIX 4.2 the said library
has an obscure bug where the various functions related to time
(such as time() and gettimeofday()) return broken values, and
therefore in AIX 4.2 Perl is not linked against libC_r.

=item *

vac 5.0.0.0 May Produce Buggy Code For Perl

The AIX C compiler vac version 5.0.0.0 may produce buggy code,
resulting in a few random tests failing when run as part of "make
test", but when the failing tests are run by hand, they succeed.
We suggest upgrading to at least vac version 5.0.1.0, that has been
known to compile Perl correctly.  "lslpp -L|grep vac.C" will tell
you the vac version.  See README.aix.

=item *

If building threaded Perl, you may get compilation warning from pp_sys.c:

  "pp_sys.c", line 4651.39: 1506-280 (W) Function argument assignment between types "unsigned char*" and "const void*" is not allowed.

This is harmless; it is caused by the getnetbyaddr() and getnetbyaddr_r()
having slightly different types for their first argument.

=back

=head2 Alpha systems with old gccs fail several tests

If you see op/pack, op/pat, op/regexp, or ext/Storable tests failing
in a Linux/alpha or *BSD/Alpha, it's probably time to upgrade your gcc.
gccs prior to 2.95.3 are definitely not good enough, and gcc 3.1 may
be even better.  (RedHat Linux/alpha with gcc 3.1 reported no problems,
as did Linux 2.4.18 with gcc 2.95.4.)  (In Tru64, it is preferable to
use the bundled C compiler.)

=head2 AmigaOS

Perl 5.8.0 doesn't build in AmigaOS.  It broke at some point during
the ithreads work and we could not find Amiga experts to unbreak the
problems.  Perl 5.6.1 still works for AmigaOS (as does the 5.7.2
development release).

=head2 BeOS

The following tests fail on 5.8.0 Perl in BeOS Personal 5.03:

 t/op/lfs............................FAILED at test 17
 t/op/magic..........................FAILED at test 24
 ext/Fcntl/t/syslfs..................FAILED at test 17
 ext/File/Glob/t/basic...............FAILED at test 3
 ext/POSIX/t/sigaction...............FAILED at test 13
 ext/POSIX/t/waitpid.................FAILED at test 1

See L<perlbeos> (README.beos) for more details.

=head2 Cygwin "unable to remap"

For example when building the Tk extension for Cygwin,
you may get an error message saying "unable to remap".
This is known problem with Cygwin, and a workaround is
detailed in here: http://sources.redhat.com/ml/cygwin/2001-12/msg00894.html

=head2 Cygwin ndbm tests fail on FAT

One can build but not install (or test the build of) the NDBM_File
on FAT filesystems.  Installation (or build) on NTFS works fine.
If one attempts the test on a FAT install (or build) the following
failures are expected:

 ../ext/NDBM_File/ndbm.t       13  3328    71   59  83.10%  1-2 4 16-71
 ../ext/ODBM_File/odbm.t      255 65280    ??   ??       %  ??
 ../lib/AnyDBM_File.t           2   512    12    2  16.67%  1 4
 ../lib/Memoize/t/errors.t      0   139    11    5  45.45%  7-11
 ../lib/Memoize/t/tie_ndbm.t   13  3328     4    4 100.00%  1-4
 run/fresh_perl.t                          97    1   1.03%  91

NDBM_File fails and ODBM_File just coredumps.

=head2 DJGPP Failures

 t/op/stat............................FAILED at test 29
 lib/File/Find/t/find.................FAILED at test 1
 lib/File/Find/t/taint................FAILED at test 1
 lib/h2xs.............................FAILED at test 15
 lib/Pod/t/eol........................FAILED at test 1
 lib/Test/Harness/t/strap-analyze.....FAILED at test 8
 lib/Test/Harness/t/test-harness......FAILED at test 23
 lib/Test/Simple/t/exit...............FAILED at test 1

The above failures are known as of 5.8.0 with native builds with long
filenames, but there are a few more if running under dosemu because of
limitations (and maybe bugs) of dosemu:

 t/comp/cpp...........................FAILED at test 3
 t/op/inccode.........................(crash)

and a few lib/ExtUtils tests, and several hundred Encode/t/Aliases.t
failures that work fine with long filenames.  So you really might
prefer native builds and long filenames.

=head2 FreeBSD built with ithreads coredumps reading large directories

This is a known bug in FreeBSD 4.5's readdir_r(), it has been fixed in
FreeBSD 4.6 (see L<perlfreebsd> (README.freebsd)).

=head2 FreeBSD Failing locale Test 117 For ISO 8859-15 Locales

The ISO 8859-15 locales may fail the locale test 117 in FreeBSD.
This is caused by the characters \xFF (y with diaeresis) and \xBE
(Y with diaeresis) not behaving correctly when being matched
case-insensitively.  Apparently this problem has been fixed in
the latest FreeBSD releases.
( http://www.freebsd.org/cgi/query-pr.cgi?pr=34308 )

=head2 IRIX fails ext/List/Util/t/shuffle.t or Digest::MD5

IRIX with MIPSpro 7.3.1.2m or 7.3.1.3m compiler may fail the List::Util
test ext/List/Util/t/shuffle.t by dumping core.  This seems to be
a compiler error since if compiled with gcc no core dump ensues, and
no failures have been seen on the said test on any other platform.

Similarly, building the Digest::MD5 extension has been
known to fail with "*** Termination code 139 (bu21)".

The cure is to drop optimization level (Configure -Doptimize=-O2).

=head2 HP-UX lib/posix Subtest 9 Fails When LP64-Configured

If perl is configured with -Duse64bitall, the successful result of the
subtest 10 of lib/posix may arrive before the successful result of the
subtest 9, which confuses the test harness so much that it thinks the
subtest 9 failed.

=head2 Linux with glibc 2.2.5 fails t/op/int subtest #6 with -Duse64bitint

This is a known bug in the glibc 2.2.5 with long long integers.
( http://bugzilla.redhat.com/bugzilla/show_bug.cgi?id=65612 )

=head2 Linux With Sfio Fails op/misc Test 48

No known fix.

=head2 Mac OS X

Please remember to set your environment variable LC_ALL to "C"
(setenv LC_ALL C) before running "make test" to avoid a lot of
warnings about the broken locales of Mac OS X.

The following tests are known to fail in Mac OS X 10.1.5 because of
buggy (old) implementations of Berkeley DB included in Mac OS X:

 Failed Test                 Stat Wstat Total Fail  Failed  List of Failed
 -------------------------------------------------------------------------
 ../ext/DB_File/t/db-btree.t    0    11    ??   ??       %  ??
 ../ext/DB_File/t/db-recno.t              149    3   2.01%  61 63 65

If you are building on a UFS partition, you will also probably see
t/op/stat.t subtest #9 fail.  This is caused by Darwin's UFS not
supporting inode change time.

Also the ext/POSIX/t/posix.t subtest #10 fails but it is skipped for
now because the failure is Apple's fault, not Perl's (blocked signals
are lost).

If you Configure with ithreads, ext/threads/t/libc.t will fail. Again,
this is not Perl's fault-- the libc of Mac OS X is not threadsafe
(in this particular test, the localtime() call is found to be
threadunsafe.)

=head2 Mac OS X dyld undefined symbols

If after installing Perl 5.8.0 you are getting warnings about missing
symbols, for example

    dyld: perl Undefined symbols
    _perl_sv_2pv
    _perl_get_sv

you probably have an old pre-Perl-5.8.0 installation (or parts of one)
in /Library/Perl (the undefined symbols used to exist in pre-5.8.0 Perls).
It seems that for some reason "make install" doesn't always completely
overwrite the files in /Library/Perl.  You can move the old Perl
shared library out of the way like this:

    cd /Library/Perl/darwin/CORE
    mv libperl.dylib libperlold.dylib

and then reissue "make install".  Note that the above of course is
extremely disruptive for anything using the /usr/local/bin/perl.
If that doesn't help, you may have to try removing all the .bundle
files from beneath /Library/Perl, and again "make install"-ing.

=head2 OS/2 Test Failures

The following tests are known to fail on OS/2 (for clarity
only the failures are shown, not the full error messages):

 ../lib/ExtUtils/t/Mkbootstrap.t    1   256    18    1   5.56%  8
 ../lib/ExtUtils/t/Packlist.t       1   256    34    1   2.94%  17
 ../lib/ExtUtils/t/basic.t          1   256    17    1   5.88%  14
 lib/os2_process.t                  2   512   227    2   0.88%  174 209
 lib/os2_process_kid.t                        227    2   0.88%  174 209
 lib/rx_cmprt.t                   255 65280    18    3  16.67%  16-18

=head2 op/sprintf tests 91, 129, and 130

The op/sprintf tests 91, 129, and 130 are known to fail on some platforms.
Examples include any platform using sfio, and Compaq/Tandem's NonStop-UX.

Test 91 is known to fail on QNX6 (nto), because C<sprintf '%e',0>
incorrectly produces C<0.000000e+0> instead of C<0.000000e+00>.

For tests 129 and 130, the failing platforms do not comply with
the ANSI C Standard: lines 19ff on page 134 of ANSI X3.159 1989, to
be exact.  (They produce something other than "1" and "-1" when
formatting 0.6 and -0.6 using the printf format "%.0f"; most often,
they produce "0" and "-0".)

=head2 Solaris 2.5

In case you are still using Solaris 2.5 (aka SunOS 5.5), you may
experience failures (the test core dumping) in lib/locale.t.
The suggested cure is to upgrade your Solaris.

=head2 Solaris x86 Fails Tests With -Duse64bitint

The following tests are known to fail in Solaris x86 with Perl
configured to use 64 bit integers:

 ext/Data/Dumper/t/dumper.............FAILED at test 268
 ext/Devel/Peek/Peek..................FAILED at test 7

=head2 SUPER-UX (NEC SX)

The following tests are known to fail on SUPER-UX:

 op/64bitint...........................FAILED tests 29-30, 32-33, 35-36
 op/arith..............................FAILED tests 128-130
 op/pack...............................FAILED tests 25-5625
 op/pow................................
 op/taint..............................# msgsnd failed
 ../ext/IO/lib/IO/t/io_poll............FAILED tests 3-4
 ../ext/IPC/SysV/ipcsysv...............FAILED tests 2, 5-6
 ../ext/IPC/SysV/t/msg.................FAILED tests 2, 4-6
 ../ext/Socket/socketpair..............FAILED tests 12
 ../lib/IPC/SysV.......................FAILED tests 2, 5-6
 ../lib/warnings.......................FAILED tests 115-116, 118-119

The op/pack failure ("Cannot compress negative numbers at op/pack.t line 126")
is serious but as of yet unsolved.  It points at some problems with the
signedness handling of the C compiler, as do the 64bitint, arith, and pow
failures.  Most of the rest point at problems with SysV IPC.

=head2 Term::ReadKey not working on Win32

Use Term::ReadKey 2.20 or later.

=head2 UNICOS/mk

=over 4
d126 1
a126 22
During Configure, the test

    Guessing which symbols your C compiler and preprocessor define...

will probably fail with error messages like

    CC-20 cc: ERROR File = try.c, Line = 3
      The identifier "bad" is undefined.

      bad switch yylook 79bad switch yylook 79bad switch yylook 79bad switch yylook 79#ifdef A29K
      ^

    CC-65 cc: ERROR File = try.c, Line = 3
      A semicolon is expected at this point.

This is caused by a bug in the awk utility of UNICOS/mk.  You can ignore
the error, but it does cause a slight problem: you cannot fully
benefit from the h2ph utility (see L<h2ph>) that can be used to
convert C headers to Perl libraries, mainly used to be able to access
from Perl the constants defined using C preprocessor, cpp.  Because of
the above error, parts of the converted headers will be invisible.
Luckily, these days the need for h2ph is rare.
d130 1
a130 5
If building Perl with interpreter threads (ithreads), the
getgrent(), getgrnam(), and getgrgid() functions cannot return the
list of the group members due to a bug in the multithreaded support of
UNICOS/mk.  What this means is that in list context the functions will
return only three values, not four.
d134 1
a134 1
=head2 UTS
d136 1
a136 84
There are a few known test failures, see L<perluts> (README.uts).

=head2 VOS (Stratus)

When Perl is built using the native build process on VOS Release
14.5.0 and GNU C++/GNU Tools 2.0.1, all attempted tests either
pass or result in TODO (ignored) failures.

=head2 VMS

There should be no reported test failures with a default configuration,
though there are a number of tests marked TODO that point to areas
needing further debugging and/or porting work.

=head2 Win32

In multi-CPU boxes, there are some problems with the I/O buffering:
some output may appear twice.

=head2 XML::Parser not working

Use XML::Parser 2.31 or later.

=head2 z/OS (OS/390)

z/OS has rather many test failures but the situation is actually much
better than it was in 5.6.0; it's just that so many new modules and
tests have been added.

 Failed Test                   Stat Wstat Total Fail  Failed  List of Failed
 ---------------------------------------------------------------------------
 ../ext/Data/Dumper/t/dumper.t              357    8   2.24%  311 314 325 327
                                                              331 333 337 339
 ../ext/IO/lib/IO/t/io_unix.t                 5    4  80.00%  2-5
 ../ext/Storable/t/downgrade.t   12  3072   169   12   7.10%  14-15 46-47 78-79
                                                              110-111 150 161
 ../lib/ExtUtils/t/Constant.t   121 30976    48   48 100.00%  1-48
 ../lib/ExtUtils/t/Embed.t                    9    9 100.00%  1-9
 op/pat.t                                   922    7   0.76%  665 776 785 832-
                                                              834 845
 op/sprintf.t                               224    3   1.34%  98 100 136
 op/tr.t                                     97    5   5.15%  63 71-74
 uni/fold.t                                 780    6   0.77%  61 169 196 661
                                                              710-711

The failures in dumper.t and downgrade.t are problems in the tests,
those in io_unix and sprintf are problems in the USS (UDP sockets and
printf formats).  The pat, tr, and fold failures are genuine Perl
problems caused by EBCDIC (and in the pat and fold cases, combining
that with Unicode).  The Constant and Embed are probably problems in
the tests (since they test Perl's ability to build extensions, and
that seems to be working reasonably well.)

=head2 Unicode Support on EBCDIC Still Spotty

Though mostly working, Unicode support still has problem spots on
EBCDIC platforms.  One such known spot are the C<\p{}> and C<\P{}>
regular expression constructs for code points less than 256: the
C<pP> are testing for Unicode code points, not knowing about EBCDIC.

=head2 Seen In Perl 5.7 But Gone Now

C<Time::Piece> (previously known as C<Time::Object>) was removed
because it was felt that it didn't have enough value in it to be a
core module.  It is still a useful module, though, and is available
from the CPAN.

Perl 5.8 unfortunately does not build anymore on AmigaOS; this broke
accidentally at some point.  Since there are not that many Amiga
developers available, we could not get this fixed and tested in time
for 5.8.0.  Perl 5.6.1 still works for AmigaOS (as does the 5.7.2
development release).

The C<PerlIO::Scalar> and C<PerlIO::Via> (capitalised) were renamed as
C<PerlIO::scalar> and C<PerlIO::via> (all lowercase) just before 5.8.0.
The main rationale was to have all core PerlIO layers to have all
lowercase names.  The "plugins" are named as usual, for example
C<PerlIO::via::QuotedPrint>.

The C<threads::shared::queue> and C<threads::shared::semaphore> were
renamed as C<Thread::Queue> and C<Thread::Semaphore> just before 5.8.0.
The main rationale was to have thread modules to obey normal naming,
C<Thread::> (the C<threads> and C<threads::shared> themselves are
more pragma-like, they affect compile-time, so they stay lowercase).
d142 2
a143 2
bug database at http://bugs.perl.org/ .  There may also be
information at http://www.perl.com/ , the Perl Home Page.
d149 2
a150 1
analysed by the Perl porting team.
a160 4

=head1 HISTORY

Written by Jarkko Hietaniemi <F<jhi@@iki.fi>>.
@


1.5
log
@Resolve conflicts, remove old files, merge local changes
@
text
@d419 1
a419 1
like you want to use UTF-8 (any of the the variables match C</utf-?8/i>),
d3364 1
a3364 1
problems.  Perl 5.6.1 still works for AmigaOS (as does the the 5.7.2
d3693 1
a3693 1
for 5.8.0.  Perl 5.6.1 still works for AmigaOS (as does the the 5.7.2
@


1.4
log
@merge in perl 5.6.1 with our local changes
@
text
@d3 1
a3 1
perldelta - what's new for perl v5.6.x
d7 39
a45 2
This document describes differences between the 5.005 release and the 5.6.1
release.
d47 1
a47 1
=head1 Summary of changes between 5.6.0 and 5.6.1
d49 1
a49 5
This section contains a summary of the changes between the 5.6.0 release
and the 5.6.1 release.  More details about the changes mentioned here
may be found in the F<Changes> files that accompany the Perl source
distribution.  See L<perlhack> for pointers to online resources where you
can inspect the individual patches described by these changes.
d51 1
a51 1
=head2 Security Issues
d53 1
a53 2
suidperl will not run /bin/mail anymore, because some platforms have
a /bin/mail that is vulnerable to buffer overflow attacks.
d55 1
a55 4
Note that suidperl is neither built nor installed by default in
any recent version of perl.  Use of suidperl is highly discouraged.
If you think you need it, try alternatives such as sudo first.
See http://www.courtesan.com/sudo/.
d57 1
a57 1
=head2 Core bug fixes
d59 1
a59 2
This is not an exhaustive list.  It is intended to cover only the
significant user-visible changes.
d61 1
a61 1
=over
d63 1
a63 1
=item C<UNIVERSAL::isa()>
d65 119
a183 3
A bug in the caching mechanism used by C<UNIVERSAL::isa()> that affected
base.pm has been fixed.  The bug has existed since the 5.005 releases,
but wasn't tickled by base.pm in those releases.
d185 1
a185 1
=item Memory leaks
d187 1
a187 2
Various cases of memory leaks and attempts to access uninitialized memory
have been cured.  See L</"Known Problems"> below for further issues.
d189 1
a189 1
=item Numeric conversions
d191 2
a192 2
Numeric conversions did not recognize changes in the string value
properly in certain circumstances.
d194 1
a194 3
In other situations, large unsigned numbers (those above 2**31) could
sometimes lose their unsignedness, causing bogus results in arithmetic
operations.
d196 2
a197 2
Integer modulus on large unsigned integers sometimes returned
incorrect values.
d199 1
a199 2
Perl 5.6.0 generated "not a number" warnings on certain conversions where
previous versions didn't.
d201 4
a204 1
These problems have all been rectified.
d206 1
a206 1
Infinity is now recognized as a number.
d208 4
a211 1
=item qw(a\\b)
d213 1
a213 3
In Perl 5.6.0, qw(a\\b) produced a string with two backslashes instead
of one, in a departure from the behavior in previous versions.  The
older behavior has been reinstated.  
d215 4
a218 1
=item caller()
d220 1
a220 2
caller() could cause core dumps in certain situations.  Carp was sometimes
affected by this problem.
d222 3
a224 1
=item Bugs in regular expressions
d226 1
a226 1
Pattern matches on overloaded values are now handled correctly.
d228 1
a228 2
Perl 5.6.0 parsed m/\x{ab}/ incorrectly, leading to spurious warnings.
This has been corrected.
d230 1
a230 2
The RE engine found in Perl 5.6.0 accidentally pessimised certain kinds
of simple pattern matches.  These are now handled better.
d232 4
a235 2
Regular expression debug output (whether through C<use re 'debug'>
or via C<-Dr>) now looks better.
d237 1
a237 2
Multi-line matches like C<"a\nxb\n" =~ /(?!\A)x/m> were flawed.  The
bug has been fixed.
d239 4
a242 2
Use of $& could trigger a core dump under some situations.  This
is now avoided.
d244 1
a244 3
Match variables $1 et al., weren't being unset when a pattern match
was backtracking, and the anomaly showed up inside C</...(?{ ... }).../>
etc.  These variables are now tracked correctly.
d246 3
a248 2
pos() did not return the correct value within s///ge in earlier
versions.  This is now handled correctly.
d250 1
a250 1
=item "slurp" mode
d252 10
a261 2
readline() on files opened in "slurp" mode could return an extra "" at
the end in certain situations.  This has been corrected.
d263 1
a263 1
=item Autovivification of symbolic references to special variables
d265 10
a274 3
Autovivification of symbolic references of special variables described
in L<perlvar> (as in C<${$num}>) was accidentally disabled.  This works
again now.
d276 1
a276 1
=item Lexical warnings 
d278 1
a278 1
Lexical warnings now propagate correctly into C<eval "...">.
d280 1
a280 2
C<use warnings qw(FATAL all)> did not work as intended.  This has been
corrected.
d282 3
a284 2
Lexical warnings could leak into other scopes in some situations.
This is now fixed.
d286 1
a286 2
warnings::enabled() now reports the state of $^W correctly if the caller
isn't using lexical warnings.
d288 4
a291 1
=item Spurious warnings and errors
d293 1
a293 2
Perl 5.6.0 could emit spurious warnings about redefinition of dl_error()
when statically building extensions into perl.  This has been corrected.
d295 2
a296 2
"our" variables could result in bogus "Variable will not stay shared"
warnings.  This is now fixed.
d298 1
a298 3
"our" variables of the same name declared in two sibling blocks
resulted in bogus warnings about "redeclaration" of the variables.
The problem has been corrected.
d300 3
a302 1
=item glob()
d304 1
a304 2
Compatibility of the builtin glob() with old csh-based glob has been
improved with the addition of GLOB_ALPHASORT option.  See C<File::Glob>.
d306 5
a310 3
File::Glob::glob() has been renamed to File::Glob::bsd_glob()
because the name clashes with the builtin glob().  The older
name is still available for compatibility, but is deprecated.
d312 1
a312 2
Spurious syntax errors generated in certain situations, when glob()
caused File::Glob to be loaded for the first time, have been fixed.
d314 2
a315 1
=item Tainting
d317 1
a317 2
Some cases of inconsistent taint propagation (such as within hash
values) have been fixed.
d319 3
a321 3
The tainting behavior of sprintf() has been rationalized.  It does
not taint the result of floating point formats anymore, making the
behavior consistent with that of string interpolation.
d323 1
a323 1
=item sort()
d325 1
a325 3
Arguments to sort() weren't being provided the right wantarray() context.
The comparison block is now run in scalar context, and the arguments to
be sorted are always provided list context.
d327 1
a327 2
sort() is also fully reentrant, in the sense that the sort function
can itself call sort().  This did not work reliably in previous releases.
d329 5
a333 1
=item #line directives
d335 1
a335 2
#line directives now work correctly when they appear at the very
beginning of C<eval "...">.
d337 1
a337 1
=item Subroutine prototypes
d339 3
a341 1
The (\&) prototype now works properly.
d343 1
a343 1
=item map()
d345 4
a348 3
map() could get pathologically slow when the result list it generates
is larger than the source list.  The performance has been improved for
common scenarios.
d350 1
a350 1
=item Debugger
d352 5
a356 1
Debugger exit code now reflects the script exit code.
d358 2
a359 1
Condition C<"0"> in breakpoints is now treated correctly.
d361 1
a361 1
The C<d> command now checks the line number.
d363 1
a363 1
C<$.> is no longer corrupted by the debugger.
d365 1
a365 2
All debugger output now correctly goes to the socket if RemotePort
is set.
d367 1
a367 1
=item PERL5OPT
d369 4
a372 2
PERL5OPT can be set to more than one switch group.  Previously,
it used to be limited to one group of options only.
d374 1
a374 1
=item chop()
d376 1
a376 2
chop(@@list) in list context returned the characters chopped in reverse
order.  This has been reversed to be in the right order.
d378 1
a378 1
=item Unicode support
d380 5
a384 3
Unicode support has seen a large number of incremental improvements,
but continues to be highly experimental.  It is not expected to be
fully supported in the 5.6.x maintenance releases.
d386 1
a386 3
substr(), join(), repeat(), reverse(), quotemeta() and string
concatenation were all handling Unicode strings incorrectly in
Perl 5.6.0.  This has been corrected.
d388 2
a389 3
Support for C<tr///CU> and C<tr///UC> etc., have been removed since
we realized the interface is broken.  For similar functionality,
see L<perlfunc/pack>.
d391 1
a391 2
The Unicode Character Database has been updated to version 3.0.1
with additions made available to the public as of August 30, 2000.
d393 2
a394 6
The Unicode character classes \p{Blank} and \p{SpacePerl} have been
added.  "Blank" is like C isblank(), that is, it contains only
"horizontal whitespace" (the space character is, the newline isn't),
and the "SpacePerl" is the Unicode equivalent of C<\s> (\p{Space}
isn't, since that includes the vertical tabulator character, whereas
C<\s> doesn't.)
d396 1
a396 6
If you are experimenting with Unicode support in perl, the development
versions of Perl may have more to offer.  In particular, I/O layers
are now available in the development track, but not in the maintenance
track, primarily to do backward compatibility issues.  Unicode support
is also evolving rapidly on a daily basis in the development track--the
maintenance track only reflects the most conservative of these changes.
d398 3
a400 1
=item 64-bit support
d402 1
a402 2
Support for 64-bit platforms has been improved, but continues to be
experimental.  The level of support varies greatly among platforms.
d404 2
a405 1
=item Compiler
d407 1
a407 3
The B Compiler and its various backends have had many incremental
improvements, but they continue to remain highly experimental.  Use in
production environments is discouraged.
d409 6
a414 2
The perlcc tool has been rewritten so that the user interface is much
more like that of a C compiler.
d416 1
a416 1
The perlbc tools has been removed.  Use C<perlcc -B> instead.
d418 6
a423 1
=item Lvalue subroutines
d425 4
a428 2
There have been various bugfixes to support lvalue subroutines better.
However, the feature still remains experimental.
d430 5
a434 1
=item IO::Socket
d436 1
a436 3
IO::Socket::INET failed to open the specified port if the service
name was not known.  It now correctly uses the supplied port number
as is.
d438 2
a439 1
=item File::Find
d441 1
a441 1
File::Find now chdir()s correctly when chasing symbolic links.
d443 1
a443 1
=item xsubpp
d445 1
a445 1
xsubpp now tolerates embedded POD sections.
d447 1
a447 1
=item C<no Module;>
d449 2
a450 3
C<no Module;> does not produce an error even if Module does not have an
unimport() method.  This parallels the behavior of C<use> vis-a-vis
C<import>.
d452 1
a452 1
=item Tests
d454 1
a454 1
A large number of tests have been added.
d458 50
a507 1
=head2 Core features
d509 7
a515 2
untie() will now call an UNTIE() hook if it exists.  See L<perltie>
for details.
d517 1
a517 2
The C<-DT> command line switch outputs copious tokenizing information.
See L<perlrun>.
d519 1
a519 5
Arrays are now always interpolated in double-quotish strings.  Previously,
C<"foo@@bar.com"> used to be a fatal error at compile time, if an array
C<@@bar> was not used or declared.  This transitional behavior was
intended to help migrate perl4 code, and is deemed to be no longer useful.
See L</"Arrays now always interpolate into double-quoted strings">.
d521 4
a524 2
keys(), each(), pop(), push(), shift(), splice() and unshift()
can all be overridden now.
d526 4
a529 1
C<my __PACKAGE__ $obj> now does the expected thing.
d531 1
a531 1
=head2 Configuration issues
d533 4
a536 4
On some systems (IRIX and Solaris among them) the system malloc is demonstrably
better.  While the defaults haven't been changed in order to retain binary
compatibility with earlier releases, you may be better off building perl
with C<Configure -Uusemymalloc ...> as discussed in the F<INSTALL> file.
d538 1
a538 1
C<Configure> has been enhanced in various ways:
d540 1
a540 1
=over
d544 2
a545 1
Minimizes use of temporary files.
d549 9
a557 3
By default, does not link perl with libraries not used by it, such as
the various dbm libraries.  SunOS 4.x hints preserve behavior on that
platform.
d561 2
a562 1
Support for pdp11-style memory models has been removed due to obsolescence.
d566 4
a569 2
Building outside the source tree is supported on systems that have
symbolic links. This is done by running
d571 1
a571 2
    sh /path/to/source/Configure -Dmksymlinks ...
    make all test install
d573 7
a579 1
in a directory other than the perl source directory.  See F<INSTALL>.
d583 4
a586 1
C<Configure -S> can be run non-interactively.
d588 1
a588 1
=back
d590 5
a594 1
=head2 Documentation
d596 1
a596 3
README.aix, README.solaris and README.macos have been added.  README.posix-bc
has been renamed to README.bs2000.  These are installed as L<perlaix>,
L<perlsolaris>, L<perlmacos>, and L<perlbs2000> respectively.
d598 1
a598 1
The following pod documents are brand new:
d600 1
a600 7
    perlclib	Internal replacements for standard C library functions
    perldebtut	Perl debugging tutorial
    perlebcdic	Considerations for running Perl on EBCDIC platforms
    perlnewmod	Perl modules: preparing a new module for distribution
    perlrequick	Perl regular expressions quick start
    perlretut	Perl regular expressions tutorial
    perlutil	utilities packaged with the Perl distribution
d602 4
a605 2
The F<INSTALL> file has been expanded to cover various issues, such as
64-bit support.
d607 1
a607 2
A longer list of contributors has been added to the source distribution.
See the file C<AUTHORS>.
d609 2
a610 1
Numerous other changes have been made to the included documentation and FAQs.
d612 1
a612 1
=head2 Bundled modules
d614 2
a615 1
The following modules have been added.
d617 1
a617 1
=over
d619 2
a620 1
=item B::Concise
d622 1
a622 1
Walks Perl syntax tree, printing concise info about ops.  See L<B::Concise>.
d624 2
a625 1
=item File::Temp
d627 1
a627 1
Returns name and handle of a temporary file safely.  See L<File::Temp>.
d629 2
a630 1
=item Pod::LaTeX
d632 1
a632 1
Converts Pod data to formatted LaTeX.  See L<Pod::LaTeX>.
d634 3
a636 1
=item Pod::Text::Overstrike
d638 1
a638 1
Converts POD data to formatted overstrike text.  See L<Pod::Text::Overstrike>.
d640 2
a641 1
=back
d643 1
a643 1
The following modules have been upgraded.
d645 3
a647 1
=over
d649 1
a649 1
=item CGI
d651 2
a652 1
CGI v2.752 is now included.
d654 1
a654 1
=item CPAN
d656 2
a657 1
CPAN v1.59_54 is now included.
d659 1
a659 1
=item Class::Struct
d661 3
a663 1
Various bugfixes have been added.
d665 1
a665 1
=item DB_File
d667 1
a667 2
DB_File v1.75 supports newer Berkeley DB versions, among other
improvements.
d669 1
a669 1
=item Devel::Peek
d671 1
a671 2
Devel::Peek has been enhanced to support dumping of memory statistics,
when perl is built with the included malloc().
d673 1
a673 1
=item File::Find
d675 3
a677 2
File::Find now supports pre and post-processing of the files in order
to sort() them, etc.
d679 1
a679 1
=item Getopt::Long
d681 2
a682 1
Getopt::Long v2.25 is included.
d684 1
a684 1
=item IO::Poll
d686 3
a688 1
Various bug fixes have been included.
d690 1
a690 1
=item IPC::Open3
d692 1
a692 1
IPC::Open3 allows use of numeric file descriptors.
d694 1
a694 1
=item Math::BigFloat
d696 2
a697 2
The fmod() function supports modulus operations.  Various bug fixes
have also been included.
d699 1
a699 1
=item Math::Complex
d701 5
a705 1
Math::Complex handles inf, NaN etc., better.
d707 1
a707 1
=item Net::Ping
d709 6
a714 2
ping() could fail on odd number of data bytes, and when the echo service
isn't running.  This has been corrected.
d716 1
a716 1
=item Opcode
d718 2
a719 1
A memory leak has been fixed.
d721 1
a721 1
=item Pod::Parser
d723 2
a724 1
Version 1.13 of the Pod::Parser suite is included.
d726 1
a726 1
=item Pod::Text
d728 2
a729 2
Pod::Text and related modules have been upgraded to the versions
in podlators suite v2.08.
d731 1
a731 1
=item SDBM_File
d733 2
a734 2
On dosish platforms, some keys went missing because of lack of support for
files with "holes".  A workaround for the problem has been added.
d736 1
a736 1
=item Sys::Syslog
d738 3
a740 1
Various bug fixes have been included.
d742 1
a742 1
=item Tie::RefHash
d744 3
a746 1
Now supports Tie::RefHash::Nestable to automagically tie hashref values.
d748 1
a748 1
=item Tie::SubstrHash
d750 1
a750 1
Various bug fixes have been included.
d752 1
a752 1
=back
d754 2
a755 1
=head2 Platform-specific improvements
d757 1
a757 1
The following new ports are now available.
d759 2
a760 1
=over
d762 1
a762 1
=item NCR MP-RAS
d764 2
a765 1
=item NonStop-UX
d767 2
a768 1
=back
d770 2
a771 1
Perl now builds under Amdahl UTS.
d773 1
a773 1
Perl has also been verified to build under Amiga OS.
d775 7
a781 1
Support for EPOC has been much improved.  See README.epoc.
d783 1
a783 3
Building perl with -Duseithreads or -Duse5005threads now works
under HP-UX 10.20 (previously it only worked under 10.30 or later).
You will need a thread library package installed.  See README.hpux.
d785 1
a785 1
Long doubles should now work under Linux.
d787 1
a787 2
MacOS Classic is now supported in the mainstream source package.
See README.macos.
d789 1
a789 1
Support for MPE/iX has been updated.  See README.mpeix.
d791 3
a793 1
Support for OS/2 has been improved.  See C<os2/Changes> and README.os2.
d795 2
a796 2
Dynamic loading on z/OS (formerly OS/390) has been improved.  See
README.os390.
d798 3
a800 3
Support for VMS has seen many incremental improvements, including
better support for operators like backticks and system(), and better
%ENV handling.  See C<README.vms> and L<perlvms>.
d802 1
a802 1
Support for Stratus VOS has been improved.  See C<vos/Changes> and README.vos.
d804 1
a804 1
Support for Windows has been improved.
d806 4
a809 1
=over
d813 3
a815 2
fork() emulation has been improved in various ways, but still continues
to be experimental.  See L<perlfork> for known bugs and caveats.
d819 3
a821 2
%SIG has been enabled under USE_ITHREADS, but its use is completely
unsupported under all configurations.
d825 2
a826 3
Borland C++ v5.5 is now a supported compiler that can build Perl.
However, the generated binaries continue to be incompatible with those
generated by the other supported compilers (GCC and Visual C++).
d830 3
a832 2
Non-blocking waits for child processes (or pseudo-processes) are
supported via C<waitpid($pid, &POSIX::WNOHANG)>.
d836 4
a839 1
A memory leak in accept() has been fixed.
d843 2
a844 2
wait(), waitpid() and backticks now return the correct exit status under
Windows 9x.
d848 13
a860 2
Trailing new %ENV entries weren't propagated to child processes.  This
is now fixed.
d864 12
a875 2
Current directory entries in %ENV are now correctly propagated to child
processes.
d879 3
a881 1
Duping socket handles with open(F, ">&MYSOCK") now works under Windows 9x.
d885 2
a886 2
The makefiles now provide a single switch to bulk-enable all the features
enabled in ActiveState ActivePerl (a popular binary distribution).
d890 2
a891 2
Win32::GetCwd() correctly returns C:\ instead of C: when at the drive root.
Other bugs in chdir() and Cwd::cwd() have also been fixed.
d895 3
a897 2
fork() correctly returns undef and sets EAGAIN when it runs out of
pseudo-process handles.
d901 25
a925 1
ExtUtils::MakeMaker now uses $ENV{LIB} to search for libraries.
d929 3
a931 1
UNC path handling is better when perl is built to support fork().
d935 3
a937 1
A handle leak in socket handling has been fixed.
d941 2
a942 1
send() works from within a pseudo-process.
d944 1
a944 1
=back
d946 4
a949 4
Unless specifically qualified otherwise, the remainder of this document
covers changes between the 5.005 and 5.6.0 releases.
 
=head1 Core Enhancements
d951 2
a952 1
=head2 Interpreter cloning, threads, and concurrency
d954 1
a954 100
Perl 5.6.0 introduces the beginnings of support for running multiple
interpreters concurrently in different threads.  In conjunction with
the perl_clone() API call, which can be used to selectively duplicate
the state of any given interpreter, it is possible to compile a
piece of code once in an interpreter, clone that interpreter
one or more times, and run all the resulting interpreters in distinct
threads.

On the Windows platform, this feature is used to emulate fork() at the
interpreter level.  See L<perlfork> for details about that.

This feature is still in evolution.  It is eventually meant to be used
to selectively clone a subroutine and data reachable from that
subroutine in a separate interpreter and run the cloned subroutine
in a separate thread.  Since there is no shared data between the
interpreters, little or no locking will be needed (unless parts of
the symbol table are explicitly shared).  This is obviously intended
to be an easy-to-use replacement for the existing threads support.

Support for cloning interpreters and interpreter concurrency can be
enabled using the -Dusethreads Configure option (see win32/Makefile for
how to enable it on Windows.)  The resulting perl executable will be
functionally identical to one that was built with -Dmultiplicity, but
the perl_clone() API call will only be available in the former.

-Dusethreads enables the cpp macro USE_ITHREADS by default, which in turn
enables Perl source code changes that provide a clear separation between
the op tree and the data it operates with.  The former is immutable, and
can therefore be shared between an interpreter and all of its clones,
while the latter is considered local to each interpreter, and is therefore
copied for each clone.

Note that building Perl with the -Dusemultiplicity Configure option
is adequate if you wish to run multiple B<independent> interpreters
concurrently in different threads.  -Dusethreads only provides the
additional functionality of the perl_clone() API call and other
support for running B<cloned> interpreters concurrently.

    NOTE: This is an experimental feature.  Implementation details are
    subject to change.

=head2 Lexically scoped warning categories

You can now control the granularity of warnings emitted by perl at a finer
level using the C<use warnings> pragma.  L<warnings> and L<perllexwarn>
have copious documentation on this feature.

=head2 Unicode and UTF-8 support

Perl now uses UTF-8 as its internal representation for character
strings.  The C<utf8> and C<bytes> pragmas are used to control this support
in the current lexical scope.  See L<perlunicode>, L<utf8> and L<bytes> for
more information.

This feature is expected to evolve quickly to support some form of I/O
disciplines that can be used to specify the kind of input and output data
(bytes or characters).  Until that happens, additional modules from CPAN
will be needed to complete the toolkit for dealing with Unicode.

    NOTE: This should be considered an experimental feature.  Implementation
    details are subject to change.

=head2 Support for interpolating named characters

The new C<\N> escape interpolates named characters within strings.
For example, C<"Hi! \N{WHITE SMILING FACE}"> evaluates to a string
with a Unicode smiley face at the end.

=head2 "our" declarations

An "our" declaration introduces a value that can be best understood
as a lexically scoped symbolic alias to a global variable in the
package that was current where the variable was declared.  This is
mostly useful as an alternative to the C<vars> pragma, but also provides
the opportunity to introduce typing and other attributes for such
variables.  See L<perlfunc/our>.

=head2 Support for strings represented as a vector of ordinals

Literals of the form C<v1.2.3.4> are now parsed as a string composed
of characters with the specified ordinals.  This is an alternative, more
readable way to construct (possibly Unicode) strings instead of
interpolating characters, as in C<"\x{1}\x{2}\x{3}\x{4}">.  The leading
C<v> may be omitted if there are more than two ordinals, so C<1.2.3> is
parsed the same as C<v1.2.3>.

Strings written in this form are also useful to represent version "numbers".
It is easy to compare such version "numbers" (which are really just plain
strings) using any of the usual string comparison operators C<eq>, C<ne>,
C<lt>, C<gt>, etc., or perform bitwise string operations on them using C<|>,
C<&>, etc.

In conjunction with the new C<$^V> magic variable (which contains
the perl version as a string), such literals can be used as a readable way
to check if you're running a particular version of Perl:

    # this will parse in older versions of Perl also
    if ($^V and $^V gt v5.6.0) {
        # new features supported
    }
d956 3
a958 2
C<require> and C<use> also have some special magic to support such literals.
They will be interpreted as a version rather than as a module name:
d960 1
a960 2
    require v5.6.0;		# croak if $^V lt v5.6.0
    use v5.6.0;			# same, but croaks at compile-time
d962 4
a965 1
Alternatively, the C<v> may be omitted if there is more than one dot:
d967 1
a967 2
    require 5.6.0;
    use 5.6.0;
d969 2
a970 2
Also, C<sprintf> and C<printf> support the Perl-specific format flag C<%v>
to print ordinals of characters in arbitrary strings:
d972 2
a973 3
    printf "v%vd", $^V;		# prints current version, such as "v5.5.650"
    printf "%*vX", ":", $addr;	# formats IPv6 address
    printf "%*vb", " ", $bits;	# displays bitstring
d975 1
a975 1
See L<perldata/"Scalar value constructors"> for additional information.
d977 4
a980 1
=head2 Improved Perl version numbering system
d982 1
a982 3
Beginning with Perl version 5.6.0, the version number convention has been
changed to a "dotted integer" scheme that is more commonly found in open
source projects.
d984 2
a985 4
Maintenance versions of v5.6.0 will be released as v5.6.1, v5.6.2 etc.
The next development series following v5.6.0 will be numbered v5.7.x,
beginning with v5.7.0, and the next major production release following
v5.6.0 will be v5.8.0.
d987 1
a987 3
The English module now sets $PERL_VERSION to $^V (a string value) rather
than C<$]> (a numeric value).  (This is a potential incompatibility.
Send us a report via perlbug if you are affected by this.)
d989 2
a990 2
The v1.2.3 syntax is also now legal in Perl.
See L<Support for strings represented as a vector of ordinals> for more on that.
d992 1
a992 9
To cope with the new versioning system's use of at least three significant
digits for each version component, the method used for incrementing the
subversion number has also changed slightly.  We assume that versions older
than v5.6.0 have been incrementing the subversion component in multiples of
10.  Versions after v5.6.0 will increment them by 1.  Thus, using the new
notation, 5.005_03 is the "same" as v5.5.30, and the first maintenance
version following v5.6.0 will be v5.6.1 (which should be read as being
equivalent to a floating point value of 5.006_001 in the older format,
stored in C<$]>).
d994 3
a996 1
=head2 New syntax for declaring subroutine attributes
d998 1
a998 4
Formerly, if you wanted to mark a subroutine as being a method call or
as requiring an automatic lock() when it is entered, you had to declare
that with a C<use attrs> pragma in the body of the subroutine.
That can now be accomplished with declaration syntax, like this:
d1000 2
a1001 5
    sub mymethod : locked method ;
    ...
    sub mymethod : locked method {
	...
    }
d1003 1
a1003 5
    sub othermethod :locked :method ;
    ...
    sub othermethod :locked :method {
	...
    }
d1005 1
d1007 1
a1007 2
(Note how only the first C<:> is mandatory, and whitespace surrounding
the C<:> is optional.)
d1009 3
a1011 2
F<AutoSplit.pm> and F<SelfLoader.pm> have been updated to keep the attributes
with the stubs they provide.  See L<attributes>.
d1013 1
a1013 1
=head2 File and directory handles can be autovivified
d1015 2
a1016 15
Similar to how constructs such as C<< $x->[0] >> autovivify a reference,
handle constructors (open(), opendir(), pipe(), socketpair(), sysopen(),
socket(), and accept()) now autovivify a file or directory handle
if the handle passed to them is an uninitialized scalar variable.  This
allows the constructs such as C<open(my $fh, ...)> and C<open(local $fh,...)>
to be used to create filehandles that will conveniently be closed
automatically when the scope ends, provided there are no other references
to them.  This largely eliminates the need for typeglobs when opening
filehandles that must be passed around, as in the following example:

    sub myopen {
        open my $fh, "@@_"
	     or die "Can't open '@@_': $!";
	return $fh;
    }
d1018 1
a1018 5
    {
        my $f = myopen("</etc/motd");
	print <$f>;
	# $f implicitly closed here
    }
d1020 1
a1020 1
=head2 open() with more than two arguments
d1022 1
a1022 4
If open() is passed three arguments instead of two, the second argument
is used as the mode and the third argument is taken to be the file name.
This is primarily useful for protecting against unintended magic behavior
of the traditional two-argument form.  See L<perlfunc/open>.
d1024 2
a1025 1
=head2 64-bit support
d1027 1
a1027 1
Any platform that has 64-bit integers either
d1029 2
a1030 3
	(1) natively as longs or ints
	(2) via special compiler flags
	(3) using long long or int64_t
d1032 1
a1032 1
is able to use "quads" (64-bit integers) as follows:
d1034 4
a1037 1
=over 4
d1041 3
a1043 1
constants (decimal, hexadecimal, octal, binary) in the code 
d1047 8
a1054 1
arguments to oct() and hex()
d1058 3
a1060 1
arguments to print(), printf() and sprintf() (flag prefixes ll, L, q)
d1064 3
a1066 1
printed as such
d1070 2
a1071 1
pack() and unpack() "q" and "Q" formats
d1075 1
a1075 2
in basic arithmetics: + - * / % (NOTE: operating close to the limits
of the integer values may produce surprising results)
d1079 8
a1086 2
in bit arithmetics: & | ^ ~ << >> (NOTE: these used to be forced 
to be 32 bits wide but now operate on the full native width.)
d1090 1
a1090 1
vec()
d1092 1
a1092 1
=back
d1094 1
a1094 2
Note that unless you have the case (a) you will have to configure
and compile Perl using the -Duse64bitint Configure flag.
d1096 1
a1096 2
    NOTE: The Configure flags -Duselonglong and -Duse64bits have been
    deprecated.  Use -Duse64bitint instead.
d1098 1
a1098 4
There are actually two modes of 64-bitness: the first one is achieved
using Configure -Duse64bitint and the second one using Configure
-Duse64bitall.  The difference is that the first one is minimal and
the second one maximal.  The first works in more places than the second.
d1100 11
a1110 7
The C<use64bitint> does only as much as is required to get 64-bit
integers into Perl (this may mean, for example, using "long longs")
while your memory may still be limited to 2 gigabytes (because your
pointers could still be 32-bit).  Note that the name C<64bitint> does
not imply that your C compiler will be using 64-bit C<int>s (it might,
but it doesn't have to): the C<use64bitint> means that you will be
able to have 64 bits wide scalar values.
d1112 1
a1112 6
The C<use64bitall> goes all the way by attempting to switch also
integers (if it can), longs (and pointers) to being 64-bit.  This may
create an even more binary incompatible Perl than -Duse64bitint: the
resulting executable may not run at all in a 32-bit box, or you may
have to reboot/reconfigure/rebuild your operating system to be 64-bit
aware.
d1114 1
a1114 2
Natively 64-bit systems like Alpha and Cray need neither -Duse64bitint
nor -Duse64bitall.
d1116 2
a1117 6
Last but not least: note that due to Perl's habit of always using
floating point numbers, the quads are still not true integers.
When quads overflow their limits (0...18_446_744_073_709_551_615 unsigned,
-9_223_372_036_854_775_808...9_223_372_036_854_775_807 signed), they
are silently promoted to floating point numbers, after which they will
start losing precision (in their lower digits).
d1119 1
a1119 4
    NOTE: 64-bit support is still experimental on most platforms.
    Existing support only covers the LP64 data model.  In particular, the
    LLP64 data model is not yet supported.  64-bit libraries and system
    APIs on many platforms have not stabilized--your mileage may vary.
d1121 2
a1122 1
=head2 Large file support
d1124 1
a1124 3
If you have filesystems that support "large files" (files larger than
2 gigabytes), you may now also be able to create and access them from
Perl.
d1126 2
a1127 2
    NOTE: The default action is to enable large file support, if
    available on the platform.
d1129 1
a1129 3
If the large file support is on, and you have a Fcntl constant
O_LARGEFILE, the O_LARGEFILE is automatically added to the flags
of sysopen().
d1131 1
a1131 2
Beware that unless your filesystem also supports "sparse files" seeking
to umpteen petabytes may be inadvisable.
d1133 1
a1133 5
Note that in addition to requiring a proper file system to do large
files you may also need to adjust your per-process (or your
per-system, or per-process-group, or per-user-group) maximum filesize
limits before running Perl scripts that try to handle large files,
especially if you intend to write such files.
d1135 5
a1139 3
Finally, in addition to your process/process group maximum filesize
limits, you may have quota limits on your filesystems that stop you
(your user id or your user group id) from using large files.
d1141 1
a1141 7
Adjusting your process/user/group/file system/operating system limits
is outside the scope of Perl core language.  For process limits, you
may try increasing the limits using your shell's limits/limit/ulimit
command before running Perl.  The BSD::Resource extension (not
included with the standard Perl distribution) may also be of use, it
offers the getrlimit/setrlimit interface that can be used to adjust
process resource usage limits, including the maximum filesize limit.
d1143 5
a1147 1
=head2 Long doubles
d1149 1
a1149 4
In some systems you may be able to use long doubles to enhance the
range and precision of your double precision floating point numbers
(that is, Perl's numbers).  Use Configure -Duselongdouble to enable
this support (if it is available).
d1151 2
a1152 1
=head2 "more bits"
d1154 1
a1154 2
You can "Configure -Dusemorebits" to turn on both the 64-bit support
and the long double support.
d1156 2
a1157 1
=head2 Enhanced support for sort() subroutines
d1159 1
a1159 3
Perl subroutines with a prototype of C<($$)>, and XSUBs in general, can
now be used as sort subroutines.  In either case, the two elements to
be compared are passed as normal parameters in @@_.  See L<perlfunc/sort>.
d1161 2
a1162 3
For unprototyped sort subroutines, the historical behavior of passing 
the elements to be compared as the global variables $a and $b remains
unchanged.
d1164 1
a1164 1
=head2 C<sort $coderef @@foo> allowed
d1166 3
a1168 2
sort() did not accept a subroutine reference as the comparison
function in earlier versions.  This is now permitted.
d1170 1
a1170 1
=head2 File globbing implemented internally
d1172 2
a1173 3
Perl now uses the File::Glob implementation of the glob() operator
automatically.  This avoids using an external csh process and the
problems associated with it.
d1175 1
a1175 2
    NOTE: This is currently an experimental feature.  Interfaces and
    implementation are subject to change.
d1177 2
a1178 1
=head2 Support for CHECK blocks
d1180 1
a1180 5
In addition to C<BEGIN>, C<INIT>, C<END>, C<DESTROY> and C<AUTOLOAD>,
subroutines named C<CHECK> are now special.  These are queued up during
compilation and behave similar to END blocks, except they are called at
the end of compilation rather than at the end of execution.  They cannot
be called directly.
d1182 3
a1184 1
=head2 POSIX character class syntax [: :] supported
d1186 1
a1186 2
For example to match alphabetic characters use /[[:alpha:]]/.
See L<perlre> for details.
d1188 2
a1189 1
=head2 Better pseudo-random number generator
d1191 1
a1191 3
In 5.005_0x and earlier, perl's rand() function used the C library
rand(3) function.  As of 5.005_52, Configure tests for drand48(),
random(), and rand() (in that order) and picks the first one it finds.
d1193 3
a1195 1
These changes should result in better random numbers from rand().
d1197 1
a1197 1
=head2 Improved C<qw//> operator
d1199 3
a1201 4
The C<qw//> operator is now evaluated at compile time into a true list
instead of being replaced with a run time call to C<split()>.  This
removes the confusing misbehaviour of C<qw//> in scalar context, which
had inherited that behaviour from split().
d1203 1
a1203 1
Thus:
d1205 1
a1205 1
    $foo = ($bar) = qw(a b c); print "$foo|$bar\n";
d1207 1
a1207 1
now correctly prints "3|a", instead of "2|a".
d1209 1
a1209 1
=head2 Better worst-case behavior of hashes
d1211 5
a1215 4
Small changes in the hashing algorithm have been implemented in
order to improve the distribution of lower order bits in the
hashed value.  This is expected to yield better performance on
keys that are repeated sequences.
d1217 1
a1217 1
=head2 pack() format 'Z' supported
d1219 1
a1219 2
The new format type 'Z' is useful for packing and unpacking null-terminated
strings.  See L<perlfunc/"pack">.
d1221 1
a1221 1
=head2 pack() format modifier '!' supported
d1223 1
a1223 2
The new format type modifier '!' is useful for packing and unpacking
native shorts, ints, and longs.  See L<perlfunc/"pack">.
d1225 1
a1225 1
=head2 pack() and unpack() support counted strings
d1227 4
a1230 2
The template character '/' can be used to specify a counted string
type to be packed or unpacked.  See L<perlfunc/"pack">.
d1232 1
a1232 1
=head2 Comments in pack() templates
d1234 3
a1236 3
The '#' character in a template introduces a comment up to
end of the line.  This facilitates documentation of pack()
templates.
d1238 1
a1238 1
=head2 Weak references
d1240 1
a1240 5
In previous versions of Perl, you couldn't cache objects so as
to allow them to be deleted if the last reference from outside 
the cache is deleted.  The reference in the cache would hold a
reference count on the object and the objects would never be
destroyed.
d1242 1
a1242 4
Another familiar problem is with circular references.  When an
object references itself, its reference count would never go
down to zero, and it would not get destroyed until the program
is about to exit.
d1244 2
a1245 5
Weak references solve this by allowing you to "weaken" any
reference, that is, make it not count towards the reference count.
When the last non-weak reference to an object is deleted, the object
is destroyed and all the weak references to the object are
automatically undef-ed.
d1247 1
a1247 2
To use this feature, you need the WeakRef package from CPAN, which
contains additional documentation.
d1249 1
a1249 1
    NOTE: This is an experimental feature.  Details are subject to change.  
d1251 1
a1251 1
=head2 Binary numbers supported
d1253 1
a1253 2
Binary numbers are now supported as literals, in s?printf formats, and
C<oct()>:
d1255 1
a1255 2
    $answer = 0b101010;
    printf "The answer is: %b\n", oct("0b101010");
d1257 2
a1258 1
=head2 Lvalue subroutines
d1260 1
a1260 2
Subroutines can now return modifiable lvalues.
See L<perlsub/"Lvalue subroutines">.
d1262 2
a1263 1
    NOTE: This is an experimental feature.  Details are subject to change.
d1265 1
a1265 1
=head2 Some arrows may be omitted in calls through references
d1267 3
a1269 6
Perl now allows the arrow to be omitted in many constructs
involving subroutine calls through references.  For example,
C<< $foo[10]->('foo') >> may now be written C<$foo[10]('foo')>.
This is rather similar to how the arrow may be omitted from
C<< $foo[10]->{'foo'} >>.  Note however, that the arrow is still
required for C<< foo(10)->('bar') >>.
d1271 1
a1271 1
=head2 Boolean assignment operators are legal lvalues
d1273 2
a1274 1
Constructs such as C<($a ||= 2) += 1> are now allowed.
d1276 1
a1276 1
=head2 exists() is supported on subroutine names
d1278 3
a1280 3
The exists() builtin now works on subroutine names.  A subroutine
is considered to exist if it has been declared (even if implicitly).
See L<perlfunc/exists> for examples.
d1282 1
a1282 1
=head2 exists() and delete() are supported on array elements
d1284 4
a1287 2
The exists() and delete() builtins now work on simple arrays as well.
The behavior is similar to that on hash elements.
d1289 1
a1289 4
exists() can be used to check whether an array element has been
initialized.  This avoids autovivifying array elements that don't exist.
If the array is tied, the EXISTS() method in the corresponding tied
package will be invoked.
d1291 4
a1294 7
delete() may be used to remove an element from the array and return
it.  The array element at that position returns to its uninitialized
state, so that testing for the same element with exists() will return
false.  If the element happens to be the one at the end, the size of
the array also shrinks up to the highest element that tests true for
exists(), or 0 if none such is found.  If the array is tied, the DELETE() 
method in the corresponding tied package will be invoked.
d1296 1
a1296 1
See L<perlfunc/exists> and L<perlfunc/delete> for examples.
d1298 2
a1299 1
=head2 Pseudo-hashes work better
d1301 1
a1301 3
Dereferencing some types of reference values in a pseudo-hash,
such as C<< $ph->{foo}[1] >>, was accidentally disallowed.  This has
been corrected.
d1303 3
a1305 2
When applied to a pseudo-hash element, exists() now reports whether
the specified value exists, not merely if the key is valid.
d1307 1
a1307 3
delete() now works on pseudo-hashes.  When given a pseudo-hash element
or slice it deletes the values corresponding to the keys (but not the keys
themselves).  See L<perlref/"Pseudo-hashes: Using an array as a hash">.
d1309 1
a1309 2
Pseudo-hash slices with constant keys are now optimized to array lookups
at compile-time.
d1311 1
a1311 1
List assignments to pseudo-hash slices are now supported.
d1313 3
a1315 2
The C<fields> pragma now provides ways to create pseudo-hashes, via
fields::new() and fields::phash().  See L<fields>.
d1317 1
a1317 3
    NOTE: The pseudo-hash data type continues to be experimental.
    Limiting oneself to the interface elements provided by the
    fields pragma will provide protection from any future changes.
d1319 2
a1320 1
=head2 Automatic flushing of output buffers
d1322 1
a1322 4
fork(), exec(), system(), qx//, and pipe open()s now flush buffers
of all files opened for output when the operation was attempted.  This
mostly eliminates confusing buffering mishaps suffered by users unaware
of how Perl internally handles I/O.
d1324 2
a1325 2
This is not supported on some platforms like Solaris where a suitably
correct implementation of fflush(NULL) isn't available.
d1327 1
a1327 1
=head2 Better diagnostics on meaningless filehandle operations
d1329 3
a1331 4
Constructs such as C<< open(<FH>) >> and C<< close(<FH>) >>
are compile time errors.  Attempting to read from filehandles that
were opened only for writing will now produce warnings (just as
writing to read-only filehandles does).
d1333 1
a1333 1
=head2 Where possible, buffered data discarded from duped input filehandle
d1335 2
a1336 6
C<< open(NEW, "<&OLD") >> now attempts to discard any data that
was previously read and buffered in C<OLD> before duping the handle.
On platforms where doing this is allowed, the next read operation
on C<NEW> will return the same data as the corresponding operation
on C<OLD>.  Formerly, it would have returned the data from the start
of the following disk block instead.
d1338 1
a1338 1
=head2 eof() has the same old magic as <>
d1340 1
a1340 3
C<eof()> would return true if no attempt to read from C<< <> >> had
yet been made.  C<eof()> has been changed to have a little magic of its
own, it now opens the C<< <> >> files.
d1342 1
a1342 1
=head2 binmode() can be used to set :crlf and :raw modes
d1344 3
a1346 4
binmode() now accepts a second argument that specifies a discipline
for the handle in question.  The two pseudo-disciplines ":raw" and
":crlf" are currently supported on DOS-derivative platforms.
See L<perlfunc/"binmode"> and L<open>.
d1348 1
a1348 1
=head2 C<-T> filetest recognizes UTF-8 encoded files as "text"
d1350 2
a1351 2
The algorithm used for the C<-T> filetest has been enhanced to
correctly identify UTF-8 content as "text".
d1353 1
a1353 1
=head2 system(), backticks and pipe open now reflect exec() failure
d1355 3
a1357 4
On Unix and similar platforms, system(), qx() and open(FOO, "cmd |")
etc., are implemented via fork() and exec().  When the underlying
exec() fails, earlier versions did not report the error properly,
since the exec() happened to be in a different process.
d1359 1
a1359 3
The child process now communicates with the parent about the
error in launching the external command, which allows these
constructs to return with their usual error value and set $!.
d1361 2
a1362 1
=head2 Improved diagnostics
d1364 1
a1364 2
Line numbers are no longer suppressed (under most likely circumstances)
during the global destruction phase.
d1366 2
a1367 2
Diagnostics emitted from code running in threads other than the main
thread are now accompanied by the thread ID.
d1369 1
a1369 2
Embedded null characters in diagnostics now actually show up.  They
used to truncate the message in prior versions.
d1371 3
a1373 2
$foo::a and $foo::b are now exempt from "possible typo" warnings only
if sort() is encountered in package C<foo>.
d1375 1
a1375 3
Unrecognized alphabetic escapes encountered when parsing quote
constructs now generate a warning, since they may take on new
semantics in later versions of Perl.
d1377 1
a1377 2
Many diagnostics now report the internal operation in which the warning
was provoked, like so:
d1379 1
a1379 2
    Use of uninitialized value in concatenation (.) at (eval 1) line 1.
    Use of uninitialized value in print at (eval 1) line 1.
d1381 7
a1387 4
Diagnostics  that occur within eval may also report the file and line
number where the eval is located, in addition to the eval sequence
number and the line number within the evaluated text itself.  For
example:
d1389 6
a1394 1
    Not enough arguments for scalar at (eval 4)[newlib/perl5db.pl:1411] line 2, at EOF
d1396 1
a1396 1
=head2 Diagnostics follow STDERR
d1398 3
a1400 3
Diagnostic output now goes to whichever file the C<STDERR> handle
is pointing at, instead of always going to the underlying C runtime
library's C<stderr>.
d1402 1
a1402 1
=head2 More consistent close-on-exec behavior
d1404 2
a1405 7
On systems that support a close-on-exec flag on filehandles, the
flag is now set for any handles created by pipe(), socketpair(),
socket(), and accept(), if that is warranted by the value of $^F
that may be in effect.  Earlier versions neglected to set the flag
for handles created with these operators.  See L<perlfunc/pipe>,
L<perlfunc/socketpair>, L<perlfunc/socket>, L<perlfunc/accept>,
and L<perlvar/$^F>.
d1407 1
a1407 1
=head2 syswrite() ease-of-use
d1409 3
a1411 1
The length argument of C<syswrite()> has become optional.
d1413 1
a1413 1
=head2 Better syntax checks on parenthesized unary operators
d1415 2
a1416 1
Expressions such as:
d1418 1
a1418 3
    print defined(&foo,&bar,&baz);
    print uc("foo","bar","baz");
    undef($foo,&bar);
d1420 1
a1420 3
used to be accidentally allowed in earlier versions, and produced
unpredictable behaviour.  Some produced ancillary warnings
when used in this way; others silently did the wrong thing.
d1422 1
a1422 4
The parenthesized forms of most unary operators that expect a single
argument now ensure that they are not called with more than one
argument, making the cases shown above syntax errors.  The usual
behaviour of:
d1424 3
a1426 3
    print defined &foo, &bar, &baz;
    print uc "foo", "bar", "baz";
    undef $foo, &bar;
d1428 1
a1428 1
remains unchanged.  See L<perlop>.
d1430 1
a1430 1
=head2 Bit operators support full native integer width
d1432 1
a1432 7
The bit operators (& | ^ ~ << >>) now operate on the full native
integral width (the exact size of which is available in $Config{ivsize}).
For example, if your platform is either natively 64-bit or if Perl
has been configured to use 64-bit integers, these operations apply
to 8 bytes (as opposed to 4 bytes on 32-bit platforms).
For portability, be sure to mask off the excess bits in the result of
unary C<~>, e.g., C<~$x & 0xffffffff>.
d1434 3
a1436 1
=head2 Improved security features
d1438 1
a1438 2
More potentially unsafe operations taint their results for improved
security.
d1440 2
a1441 3
The C<passwd> and C<shell> fields returned by the getpwent(), getpwnam(),
and getpwuid() are now tainted, because the user can affect their own
encrypted password and login shell.
d1443 1
a1443 4
The variable modified by shmread(), and messages returned by msgrcv()
(and its object-oriented interface IPC::SysV::Msg::rcv) are also tainted,
because other untrusted processes can modify messages and shared memory
segments for their own nefarious purposes.
d1445 4
a1448 1
=head2 More functional bareword prototype (*)
d1450 1
a1450 3
Bareword prototypes have been rationalized to enable them to be used
to override builtins that accept barewords and interpret them in
a special way, such as C<require> or C<do>.
d1452 1
a1452 3
Arguments prototyped as C<*> will now be visible within the subroutine
as either a simple scalar or as a reference to a typeglob.
See L<perlsub/Prototypes>.
d1454 1
a1454 1
=head2 C<require> and C<do> may be overridden
d1456 1
a1456 6
C<require> and C<do 'file'> operations may be overridden locally
by importing subroutines of the same name into the current package 
(or globally by importing them into the CORE::GLOBAL:: namespace).
Overriding C<require> will also affect C<use>, provided the override
is visible at compile-time.
See L<perlsub/"Overriding Built-in Functions">.
d1458 2
a1459 1
=head2 $^X variables may now have names longer than one character
d1461 1
a1461 6
Formerly, $^X was synonymous with ${"\cX"}, but $^XY was a syntax
error.  Now variable names that begin with a control character may be
arbitrarily long.  However, for compatibility reasons, these variables
I<must> be written with explicit braces, as C<${^XY}> for example.
C<${^XYZ}> is synonymous with ${"\cXYZ"}.  Variable names with more
than one control character, such as C<${^XY^Z}>, are illegal.
d1463 1
a1463 5
The old syntax has not changed.  As before, `^X' may be either a
literal control-X character or the two-character sequence `caret' plus
`X'.  When braces are omitted, the variable name stops after the
control character.  Thus C<"$^XYZ"> continues to be synonymous with
C<$^X . "YZ"> as before.
d1465 1
a1465 6
As before, lexical variables may not have names beginning with control
characters.  As before, variables whose names begin with a control
character are always forced to be in package `main'.  All such variables
are reserved for future extensions, except those that begin with
C<^_>, which may be used by user programs and are guaranteed not to
acquire special meaning in any future version of Perl.
d1467 2
a1468 1
=head2 New variable $^C reflects C<-c> switch
d1470 1
a1470 5
C<$^C> has a boolean value that reflects whether perl is being run
in compile-only mode (i.e. via the C<-c> switch).  Since
BEGIN blocks are executed under such conditions, this variable
enables perl code to determine whether actions that make sense
only during normal running are warranted.  See L<perlvar>.
d1472 1
a1472 1
=head2 New variable $^V contains Perl version as a string
d1474 1
a1474 3
C<$^V> contains the Perl version number as a string composed of
characters whose ordinals match the version numbers, i.e. v5.6.0.
This may be used in string comparisons.
d1476 1
a1476 2
See C<Support for strings represented as a vector of ordinals> for an
example.
d1478 1
a1478 1
=head2 Optional Y2K warnings
d1480 2
a1481 3
If Perl is built with the cpp macro C<PERL_Y2KWARN> defined,
it emits optional warnings when concatenating the number 19
with another number.
d1483 1
a1483 2
This behavior must be specifically enabled when running Configure.
See F<INSTALL> and F<README.Y2K>.
d1485 9
a1493 1
=head2 Arrays now always interpolate into double-quoted strings
d1495 1
a1495 5
In double-quoted strings, arrays now interpolate, no matter what.  The
behavior in earlier versions of perl 5 was that arrays would interpolate
into strings if the array had been mentioned before the string was
compiled, and otherwise Perl would raise a fatal compile-time error.
In versions 5.000 through 5.003, the error was
d1497 1
a1497 1
        Literal @@example now requires backslash
d1499 1
a1499 1
In versions 5.004_01 through 5.6.0, the error was
d1501 2
a1502 1
        In string, @@example now must be written as \@@example
d1504 1
a1504 4
The idea here was to get people into the habit of writing
C<"fred\@@example.com"> when they wanted a literal C<@@> sign, just as
they have always written C<"Give me back my \$5"> when they wanted a
literal C<$> sign.
d1506 5
a1510 4
Starting with 5.6.1, when Perl now sees an C<@@> sign in a
double-quoted string, it I<always> attempts to interpolate an array,
regardless of whether or not the array has been used or declared
already.  The fatal error has been downgraded to an optional warning:
d1512 1
a1512 1
        Possible unintended interpolation of @@example in string
d1514 2
a1515 4
This warns you that C<"fred@@example.com"> is going to turn into
C<fred.com> if you don't backslash the C<@@>.
See http://www.plover.com/~mjd/perl/at-error.html for more details
about the history here.
d1517 1
a1517 1
=head1 Modules and Pragmata
d1519 2
a1520 1
=head2 Modules
d1522 1
a1522 1
=over 4
d1524 1
a1524 1
=item attributes
d1526 1
a1526 3
While used internally by Perl as a pragma, this module also
provides a way to fetch subroutine and variable attributes.
See L<attributes>.
d1528 1
a1528 1
=item B
d1530 1
a1530 4
The Perl Compiler suite has been extensively reworked for this
release.  More of the standard Perl testsuite passes when run
under the Compiler, but there is still a significant way to
go to achieve production quality compiled executables.
d1532 2
a1533 3
    NOTE: The Compiler suite remains highly experimental.  The
    generated code may not be correct, even when it manages to execute
    without errors.
d1535 1
a1535 1
=item Benchmark
d1537 3
a1539 2
Overall, Benchmark results exhibit lower average error and better timing
accuracy.  
d1541 1
a1541 5
You can now run tests for I<n> seconds instead of guessing the right
number of tests to run: e.g., timethese(-5, ...) will run each 
code for at least 5 CPU seconds.  Zero as the "number of repetitions"
means "for at least 3 CPU seconds".  The output format has also
changed.  For example:
d1543 2
a1544 1
   use Benchmark;$x=3;timethese(-5,{a=>sub{$x*$x},b=>sub{$x**2}})
d1546 1
a1546 1
will now output something like this:
d1548 1
a1548 3
   Benchmark: running a, b, each for at least 5 CPU seconds...
            a:  5 wallclock secs ( 5.77 usr +  0.00 sys =  5.77 CPU) @@ 200551.91/s (n=1156516)
            b:  4 wallclock secs ( 5.00 usr +  0.02 sys =  5.02 CPU) @@ 159605.18/s (n=800686)
d1550 1
a1550 2
New features: "each for at least N CPU seconds...", "wallclock secs",
and the "@@ operations/CPU second (n=operations)".
d1552 1
a1552 2
timethese() now returns a reference to a hash of Benchmark objects containing
the test results, keyed on the names of the tests.
d1554 1
a1554 2
timethis() now returns the iterations field in the Benchmark result object
instead of 0.
d1556 1
a1556 2
timethese(), timethis(), and the new cmpthese() (see below) can also take
a format specifier of 'none' to suppress output.
d1558 2
a1559 2
A new function countit() is just like timeit() except that it takes a
TIME instead of a COUNT.
d1561 1
a1561 3
A new function cmpthese() prints a chart comparing the results of each test
returned from a timethese() call.  For each possible pair of tests, the
percentage speed difference (iters/sec or seconds/iter) is shown.
d1563 3
a1565 1
For other details, see L<Benchmark>.
d1567 1
a1567 1
=item ByteLoader
d1569 1
a1569 2
The ByteLoader is a dedicated extension to generate and run
Perl bytecode.  See L<ByteLoader>.
d1571 1
a1571 1
=item constant
d1573 2
a1574 1
References can now be used.
d1576 1
a1576 7
The new version also allows a leading underscore in constant names, but
disallows a double leading underscore (as in "__LINE__").  Some other names
are disallowed or warned against, including BEGIN, END, etc.  Some names
which were forced into main:: used to fail silently in some cases; now they're
fatal (outside of main::) and an optional warning (inside of main::).
The ability to detect whether a constant had been set with a given name has
been added.
d1578 1
a1578 1
See L<constant>.
d1580 1
a1580 1
=item charnames
d1582 1
a1582 1
This pragma implements the C<\N> string escape.  See L<charnames>.
d1584 1
a1584 1
=item Data::Dumper
d1586 1
a1586 2
A C<Maxdepth> setting can be specified to avoid venturing
too deeply into deep data structures.  See L<Data::Dumper>.
d1588 1
a1588 2
The XSUB implementation of Dump() is now automatically called if the
C<Useqq> setting is not in use.
d1590 1
a1590 1
Dumping C<qr//> objects works correctly.
d1592 1
a1592 1
=item DB
d1594 1
a1594 2
C<DB> is an experimental module that exposes a clean abstraction
to Perl's debugging API.
d1596 1
a1596 1
=item DB_File
d1598 2
a1599 2
DB_File can now be built with Berkeley DB versions 1, 2 or 3.
See C<ext/DB_File/Changes>.
d1601 1
a1601 1
=item Devel::DProf
d1603 3
a1605 2
Devel::DProf, a Perl source code profiler has been added.  See
L<Devel::DProf> and L<dprofpp>.
d1607 1
a1607 1
=item Devel::Peek
d1609 1
a1609 2
The Devel::Peek module provides access to the internal representation
of Perl variables and data.  It is a data debugging tool for the XS programmer.
d1611 1
a1611 1
=item Dumpvalue
d1613 2
a1614 1
The Dumpvalue module provides screen dumps of Perl data.
d1616 1
a1616 1
=item DynaLoader
d1618 1
a1618 2
DynaLoader now supports a dl_unload_file() function on platforms that
support unloading shared objects using dlclose().
d1620 1
a1620 4
Perl can also optionally arrange to unload all extension shared objects
loaded by Perl.  To enable this, build Perl with the Configure option
C<-Accflags=-DDL_UNLOAD_ALL_AT_EXIT>.  (This maybe useful if you are
using Apache with mod_perl.)
d1622 2
a1623 1
=item English
d1625 1
a1625 2
$PERL_VERSION now stands for C<$^V> (a string value) rather than for C<$]>
(a numeric value).
d1627 3
a1629 1
=item Env
d1631 1
a1631 2
Env now supports accessing environment variables like PATH as array
variables.
d1633 2
a1634 1
=item Fcntl
d1636 1
a1636 9
More Fcntl constants added: F_SETLK64, F_SETLKW64, O_LARGEFILE for
large file (more than 4GB) access (NOTE: the O_LARGEFILE is
automatically added to sysopen() flags if large file support has been
configured, as is the default), Free/Net/OpenBSD locking behaviour
flags F_FLOCK, F_POSIX, Linux F_SHLCK, and O_ACCMODE: the combined
mask of O_RDONLY, O_WRONLY, and O_RDWR.  The seek()/sysseek()
constants SEEK_SET, SEEK_CUR, and SEEK_END are available via the
C<:seek> tag.  The chmod()/stat() S_IF* constants and S_IS* functions
are available via the C<:mode> tag.
d1638 19
a1656 1
=item File::Compare
d1658 1
a1658 2
A compare_text() function has been added, which allows custom
comparison functions.  See L<File::Compare>.
d1660 1
a1660 1
=item File::Find
d1662 1
a1662 2
File::Find now works correctly when the wanted() function is either
autoloaded or is a symbolic reference.
d1664 2
a1665 2
A bug that caused File::Find to lose track of the working directory
when pruning top-level directories has been fixed.
d1667 1
a1667 5
File::Find now also supports several other options to control its
behavior.  It can follow symbolic links if the C<follow> option is
specified.  Enabling the C<no_chdir> option will make File::Find skip
changing the current directory when walking directories.  The C<untaint>
flag can be useful when running with taint checks enabled.
d1669 3
a1671 1
See L<File::Find>.
d1673 1
a1673 1
=item File::Glob
d1675 1
a1675 3
This extension implements BSD-style file globbing.  By default,
it will also be used for the internal implementation of the glob()
operator.  See L<File::Glob>.
d1677 1
a1677 1
=item File::Spec
d1679 1
a1679 7
New methods have been added to the File::Spec module: devnull() returns
the name of the null device (/dev/null on Unix) and tmpdir() the name of
the temp directory (normally /tmp on Unix).  There are now also methods
to convert between absolute and relative filenames: abs2rel() and
rel2abs().  For compatibility with operating systems that specify volume
names in file paths, the splitpath(), splitdir(), and catdir() methods
have been added.
d1681 3
a1683 1
=item File::Spec::Functions
d1685 1
a1685 2
The new File::Spec::Functions modules provides a function interface
to the File::Spec module.  Allows shorthand
d1687 3
a1689 1
    $fullname = catfile($dir1, $dir2, $file);
d1691 1
a1691 1
instead of
d1693 87
a1779 1
    $fullname = File::Spec->catfile($dir1, $dir2, $file);
d1781 1
a1781 1
=item Getopt::Long
d1783 1
a1783 3
Getopt::Long licensing has changed to allow the Perl Artistic License
as well as the GPL. It used to be GPL only, which got in the way of
non-GPL applications that wanted to use Getopt::Long.
d1785 1
a1785 2
Getopt::Long encourages the use of Pod::Usage to produce help
messages. For example:
d1787 1
a1787 7
    use Getopt::Long;
    use Pod::Usage;
    my $man = 0;
    my $help = 0;
    GetOptions('help|?' => \$help, man => \$man) or pod2usage(2);
    pod2usage(1) if $help;
    pod2usage(-exitstatus => 0, -verbose => 2) if $man;
d1789 1
a1789 1
    __END__
d1791 1
a1791 1
    =head1 NAME
d1793 1
a1793 1
    sample - Using GetOpt::Long and Pod::Usage
d1795 2
a1796 1
    =head1 SYNOPSIS
d1798 1
a1798 1
    sample [options] [file ...]
d1800 6
a1805 3
     Options:
       -help            brief help message
       -man             full documentation
d1807 1
a1807 1
    =head1 OPTIONS
d1809 3
a1811 1
    =over 8
d1813 1
a1813 1
    =item B<-help>
d1815 4
a1818 1
    Print a brief help message and exits.
d1820 1
a1820 1
    =item B<-man>
d1822 4
a1825 1
    Prints the manual page and exits.
d1827 1
a1827 1
    =back
d1829 3
a1831 1
    =head1 DESCRIPTION
d1833 1
a1833 2
    B<This program> will read the given input file(s) and do something
    useful with the contents thereof.
d1835 1
a1835 1
    =cut
d1837 1
a1837 1
See L<Pod::Usage> for details.
d1839 2
a1840 2
A bug that prevented the non-option call-back <> from being
specified as the first argument has been fixed.
d1842 1
a1842 2
To specify the characters < and > as option starters, use ><. Note,
however, that changing option starters is strongly deprecated. 
d1844 1
a1844 1
=item IO
d1846 1
a1846 2
write() and syswrite() will now accept a single-argument
form of the call, for consistency with Perl's syswrite().
d1848 1
a1848 3
You can now create a TCP-based IO::Socket::INET without forcing
a connect attempt.  This allows you to configure its options
(like making it non-blocking) and then call connect() manually.
d1850 1
a1850 2
A bug that prevented the IO::Socket::protocol() accessor
from ever returning the correct value has been corrected.
d1852 4
a1855 2
IO::Socket::connect now uses non-blocking IO instead of alarm()
to do connect timeouts.
d1857 1
a1857 2
IO::Socket::accept now uses select() instead of alarm() for doing
timeouts.
d1859 3
a1861 2
IO::Socket::INET->new now sets $! correctly on failure. $@@ is
still set for backwards compatibility.
d1863 1
a1863 1
=item JPL
d1865 3
a1867 2
Java Perl Lingo is now distributed with Perl.  See jpl/README
for more information.
d1869 1
a1869 1
=item lib
d1871 3
a1873 2
C<use lib> now weeds out any trailing duplicate entries.
C<no lib> removes all named entries.
d1875 1
a1875 1
=item Math::BigInt
d1877 5
a1881 111
The bitwise operations C<<< << >>>, C<<< >> >>>, C<&>, C<|>,
and C<~> are now supported on bigints.

=item Math::Complex

The accessor methods Re, Im, arg, abs, rho, and theta can now also
act as mutators (accessor $z->Re(), mutator $z->Re(3)).

The class method C<display_format> and the corresponding object method
C<display_format>, in addition to accepting just one argument, now can
also accept a parameter hash.  Recognized keys of a parameter hash are
C<"style">, which corresponds to the old one parameter case, and two
new parameters: C<"format">, which is a printf()-style format string
(defaults usually to C<"%.15g">, you can revert to the default by
setting the format string to C<undef>) used for both parts of a
complex number, and C<"polar_pretty_print"> (defaults to true),
which controls whether an attempt is made to try to recognize small
multiples and rationals of pi (2pi, pi/2) at the argument (angle) of a
polar complex number.

The potentially disruptive change is that in list context both methods
now I<return the parameter hash>, instead of only the value of the
C<"style"> parameter.

=item Math::Trig

A little bit of radial trigonometry (cylindrical and spherical),
radial coordinate conversions, and the great circle distance were added.

=item Pod::Parser, Pod::InputObjects

Pod::Parser is a base class for parsing and selecting sections of
pod documentation from an input stream.  This module takes care of
identifying pod paragraphs and commands in the input and hands off the
parsed paragraphs and commands to user-defined methods which are free
to interpret or translate them as they see fit.

Pod::InputObjects defines some input objects needed by Pod::Parser, and
for advanced users of Pod::Parser that need more about a command besides
its name and text.

As of release 5.6.0 of Perl, Pod::Parser is now the officially sanctioned
"base parser code" recommended for use by all pod2xxx translators.
Pod::Text (pod2text) and Pod::Man (pod2man) have already been converted
to use Pod::Parser and efforts to convert Pod::HTML (pod2html) are already
underway.  For any questions or comments about pod parsing and translating
issues and utilities, please use the pod-people@@perl.org mailing list.

For further information, please see L<Pod::Parser> and L<Pod::InputObjects>.

=item Pod::Checker, podchecker

This utility checks pod files for correct syntax, according to
L<perlpod>.  Obvious errors are flagged as such, while warnings are
printed for mistakes that can be handled gracefully.  The checklist is
not complete yet.  See L<Pod::Checker>.

=item Pod::ParseUtils, Pod::Find

These modules provide a set of gizmos that are useful mainly for pod
translators.  L<Pod::Find|Pod::Find> traverses directory structures and
returns found pod files, along with their canonical names (like
C<File::Spec::Unix>).  L<Pod::ParseUtils|Pod::ParseUtils> contains
B<Pod::List> (useful for storing pod list information), B<Pod::Hyperlink>
(for parsing the contents of C<LE<lt>E<gt>> sequences) and B<Pod::Cache>
(for caching information about pod files, e.g., link nodes).

=item Pod::Select, podselect

Pod::Select is a subclass of Pod::Parser which provides a function
named "podselect()" to filter out user-specified sections of raw pod
documentation from an input stream. podselect is a script that provides
access to Pod::Select from other scripts to be used as a filter.
See L<Pod::Select>.

=item Pod::Usage, pod2usage

Pod::Usage provides the function "pod2usage()" to print usage messages for
a Perl script based on its embedded pod documentation.  The pod2usage()
function is generally useful to all script authors since it lets them
write and maintain a single source (the pods) for documentation, thus
removing the need to create and maintain redundant usage message text
consisting of information already in the pods.

There is also a pod2usage script which can be used from other kinds of
scripts to print usage messages from pods (even for non-Perl scripts
with pods embedded in comments).

For details and examples, please see L<Pod::Usage>.

=item Pod::Text and Pod::Man

Pod::Text has been rewritten to use Pod::Parser.  While pod2text() is
still available for backwards compatibility, the module now has a new
preferred interface.  See L<Pod::Text> for the details.  The new Pod::Text
module is easily subclassed for tweaks to the output, and two such
subclasses (Pod::Text::Termcap for man-page-style bold and underlining
using termcap information, and Pod::Text::Color for markup with ANSI color
sequences) are now standard.

pod2man has been turned into a module, Pod::Man, which also uses
Pod::Parser.  In the process, several outstanding bugs related to quotes
in section headers, quoting of code escapes, and nested lists have been
fixed.  pod2man is now a wrapper script around this module.

=item SDBM_File

An EXISTS method has been added to this module (and sdbm_exists() has
been added to the underlying sdbm library), so one can now call exists
on an SDBM_File tied hash and get the correct result, rather than a
runtime error.
d1883 1
a1883 3
A bug that may have caused data loss when more than one disk block
happens to be read from the database in a single FETCH() has been
fixed.
d1885 2
a1886 1
=item Sys::Syslog
d1888 1
a1888 2
Sys::Syslog now uses XSUBs to access facilities from syslog.h so it
no longer requires syslog.ph to exist. 
d1890 4
a1893 1
=item Sys::Hostname
d1895 1
a1895 2
Sys::Hostname now uses XSUBs to call the C library's gethostname() or
uname() if they exist.
d1897 4
a1900 1
=item Term::ANSIColor
d1902 1
a1902 3
Term::ANSIColor is a very simple module to provide easy and readable
access to the ANSI color and highlighting escape sequences, supported by
most ANSI terminal emulators.  It is now included standard.
d1904 2
a1905 1
=item Time::Local
d1907 3
a1909 3
The timelocal() and timegm() functions used to silently return bogus
results when the date fell outside the machine's integer range.  They
now consistently croak() if the date falls in an unsupported range.
d1911 3
a1913 1
=item Win32
d1915 1
a1915 5
The error return value in list context has been changed for all functions
that return a list of values.  Previously these functions returned a list
with a single element C<undef> if an error occurred.  Now these functions
return the empty list in these situations.  This applies to the following
functions:
d1917 2
a1918 2
    Win32::FsType
    Win32::GetOSVersion
d1920 1
a1920 2
The remaining functions are unchanged and continue to return C<undef> on
error even in list context.
d1922 2
a1923 2
The Win32::SetLastError(ERROR) function has been added as a complement
to the Win32::GetLastError() function.
d1925 1
a1925 4
The new Win32::GetFullPathName(FILENAME) returns the full absolute
pathname for FILENAME in scalar context.  In list context it returns
a two-element list containing the fully qualified directory name and
the filename.  See L<Win32>.
d1927 1
a1927 1
=item XSLoader
d1929 3
a1931 2
The XSLoader extension is a simpler alternative to DynaLoader.
See L<XSLoader>.
d1933 1
a1933 1
=item DBM Filters
d1935 3
a1937 3
A new feature called "DBM Filters" has been added to all the
DBM modules--DB_File, GDBM_File, NDBM_File, ODBM_File, and SDBM_File.
DBM Filters add four new methods to each DBM module:
d1939 1
a1939 4
    filter_store_key
    filter_store_value
    filter_fetch_key
    filter_fetch_value
d1941 3
a1943 3
These can be used to filter key-value pairs before the pairs are
written to the database or just after they are read from the database.
See L<perldbmfilter> for further information.
d1947 1
a1947 1
=head2 Pragmata
d1949 2
a1950 3
C<use attrs> is now obsolete, and is only provided for
backward-compatibility.  It's been replaced by the C<sub : attributes>
syntax.  See L<perlsub/"Subroutine Attributes"> and L<attributes>.
d1952 1
a1952 2
Lexical warnings pragma, C<use warnings;>, to control optional warnings.
See L<perllexwarn>.
d1954 3
a1956 6
C<use filetest> to control the behaviour of filetests (C<-r> C<-w>
...).  Currently only one subpragma implemented, "use filetest
'access';", that uses access(2) or equivalent to check permissions
instead of using stat(2) as usual.  This matters in filesystems
where there are ACLs (access control lists): the stat(2) might lie,
but access(2) knows better.
d1958 3
a1960 5
The C<open> pragma can be used to specify default disciplines for
handle constructors (e.g. open()) and for qx//.  The two
pseudo-disciplines C<:raw> and C<:crlf> are currently supported on
DOS-derivative platforms (i.e. where binmode is not a no-op).
See also L</"binmode() can be used to set :crlf and :raw modes">.
d1962 1
a1962 1
=head1 Utility Changes
d1964 4
a1967 1
=head2 dprofpp
d1969 1
a1969 2
C<dprofpp> is used to display profile data generated using C<Devel::DProf>.
See L<dprofpp>.
d1971 2
a1972 1
=head2 find2perl
d1974 1
a1974 3
The C<find2perl> utility now uses the enhanced features of the File::Find
module.  The -depth and -follow options are supported.  Pod documentation
is also included in the script.
d1976 1
a1976 1
=head2 h2xs
d1978 1
a1978 3
The C<h2xs> tool can now work in conjunction with C<C::Scan> (available
from CPAN) to automatically parse real-life header files.  The C<-M>,
C<-a>, C<-k>, and C<-o> options are new.
d1980 1
a1980 1
=head2 perlcc
d1982 2
a1983 3
C<perlcc> now supports the C and Bytecode backends.  By default,
it generates output from the simple C backend rather than the
optimized C backend.
d1985 1
a1985 1
Support for non-Unix platforms has been improved.
d1987 1
a1987 1
=head2 perldoc
d1989 1
a1989 4
C<perldoc> has been reworked to avoid possible security holes.
It will not by default let itself be run as the superuser, but you
may still use the B<-U> switch to try to make it drop privileges
first.
d1991 1
a1991 1
=head2 The Perl Debugger
d1993 2
a1994 10
Many bug fixes and enhancements were added to F<perl5db.pl>, the
Perl debugger.  The help documentation was rearranged.  New commands
include C<< < ? >>, C<< > ? >>, and C<< { ? >> to list out current
actions, C<man I<docpage>> to run your doc viewer on some perl
docset, and support for quoted options.  The help information was
rearranged, and should be viewable once again if you're using B<less>
as your pager.  A serious security hole was plugged--you should
immediately remove all older versions of the Perl debugger as
installed in previous releases, all the way back to perl3, from
your system to avoid being bitten by this.
d1996 1
a1996 1
=head1 Improved Documentation
d1998 1
a1998 2
Many of the platform-specific README files are now part of the perl
installation.  See L<perl> for the complete list.
d2000 1
a2000 1
=over 4
d2002 1
a2002 1
=item perlapi.pod
d2004 1
a2004 1
The official list of public Perl API functions.
d2006 2
a2007 1
=item perlboot.pod
d2009 1
a2009 1
A tutorial for beginners on object-oriented Perl.
d2011 2
a2012 1
=item perlcompile.pod
d2014 1
a2014 1
An introduction to using the Perl Compiler suite.
d2016 5
a2020 1
=item perldbmfilter.pod
d2022 1
a2022 1
A howto document on using the DBM filter facility.
d2024 3
a2026 1
=item perldebug.pod
d2028 1
a2028 4
All material unrelated to running the Perl debugger, plus all
low-level guts-like details that risked crushing the casual user
of the debugger, have been relocated from the old manpage to the
next entry below.
d2030 4
a2033 1
=item perldebguts.pod
d2035 1
a2035 5
This new manpage contains excessively low-level material not related
to the Perl debugger, but slightly related to debugging Perl itself.
It also contains some arcane internal details of how the debugging
process works that may only be of interest to developers of Perl
debuggers.
d2037 3
a2039 1
=item perlfork.pod
d2041 1
a2041 1
Notes on the fork() emulation currently available for the Windows platform.
d2043 1
a2043 1
=item perlfilter.pod
d2045 4
a2048 1
An introduction to writing Perl source filters.
d2050 1
a2050 1
=item perlhack.pod
d2052 1
a2052 1
Some guidelines for hacking the Perl source code.
d2054 1
a2054 1
=item perlintern.pod
d2056 1
a2056 2
A list of internal functions in the Perl source code.
(List is currently empty.)
d2058 1
a2058 1
=item perllexwarn.pod
d2060 1
a2060 2
Introduction and reference information about lexically scoped
warning categories.
d2062 1
a2062 1
=item perlnumber.pod
d2064 2
a2065 1
Detailed information about numbers as they are represented in Perl.
d2067 1
a2067 1
=item perlopentut.pod
d2069 6
a2074 1
A tutorial on using open() effectively.
d2076 1
a2076 1
=item perlreftut.pod
d2078 4
a2081 1
A tutorial that introduces the essentials of references.
d2083 1
a2083 1
=item perltootc.pod
d2085 1
a2085 1
A tutorial on managing class data for object modules.
d2087 1
a2087 1
=item perltodo.pod
d2089 1
a2089 2
Discussion of the most often wanted features that may someday be
supported in Perl.
d2091 1
a2091 1
=item perlunicode.pod
d2093 3
a2095 1
An introduction to Unicode support features in Perl.
d2099 5
a2103 1
=head1 Performance enhancements
d2105 1
a2105 1
=head2 Simple sort() using { $a <=> $b } and the like are optimized
d2107 1
a2107 2
Many common sort() operations using a simple inlined block are now
optimized for faster performance.
d2109 1
a2109 1
=head2 Optimized assignments to lexical variables
d2111 1
a2111 3
Certain operations in the RHS of assignment statements have been
optimized to directly set the lexical variable on the LHS,
eliminating redundant copying overheads.
d2113 4
a2116 1
=head2 Faster subroutine calls
d2118 1
a2118 2
Minor changes in how subroutine calls are handled internally
provide marginal improvements in performance.
d2120 2
a2121 1
=head2 delete(), each(), values() and hash iteration are faster
d2123 1
a2123 4
The hash values returned by delete(), each(), values() and hashes in a
list context are the actual values in the hash, instead of copies.
This results in significantly better performance, because it eliminates
needless copying in most situations.
d2125 3
a2127 1
=head1 Installation and Configuration Improvements
d2129 1
a2129 1
=head2 -Dusethreads means something different
d2131 6
a2136 3
The -Dusethreads flag now enables the experimental interpreter-based thread
support by default.  To get the flavor of experimental threads that was in
5.005 instead, you need to run Configure with "-Dusethreads -Duse5005threads".
d2138 1
a2138 4
As of v5.6.0, interpreter-threads support is still lacking a way to
create new threads from Perl (i.e., C<use Thread;> will not work with
interpreter threads).  C<use Thread;> continues to be available when you
specify the -Duse5005threads option to Configure, bugs and all.
d2140 4
a2143 2
    NOTE: Support for threads continues to be an experimental feature.
    Interfaces and implementation are subject to sudden and drastic changes.
d2145 1
a2145 1
=head2 New Configure flags
d2147 3
a2149 2
The following new flags may be enabled on the Configure command line
by running Configure with C<-Dflag>.
d2151 1
a2151 3
    usemultiplicity
    usethreads useithreads	(new interpreter threads: no Perl API yet)
    usethreads use5005threads	(threads as they were in 5.005)
d2153 1
a2153 2
    use64bitint			(equal to now deprecated 'use64bits')
    use64bitall
d2155 4
a2158 4
    uselongdouble
    usemorebits
    uselargefiles
    usesocks			(only SOCKS v5 supported)
d2160 1
a2160 1
=head2 Threadedness and 64-bitness now more daring
d2162 2
a2163 8
The Configure options enabling the use of threads and the use of
64-bitness are now more daring in the sense that they no more have an
explicit list of operating systems of known threads/64-bit
capabilities.  In other words: if your operating system has the
necessary APIs and datatypes, you should be able just to go ahead and
use them, for threads by Configure -Dusethreads, and for 64 bits
either explicitly by Configure -Duse64bitint or implicitly if your
system has 64-bit wide datatypes.  See also L<"64-bit support">.
d2165 1
a2165 1
=head2 Long Doubles
d2167 1
a2167 3
Some platforms have "long doubles", floating point numbers of even
larger range than ordinary "doubles".  To enable using long doubles for
Perl's scalars, use -Duselongdouble.
d2169 1
a2169 1
=head2 -Dusemorebits
d2171 3
a2173 2
You can enable both -Duse64bitint and -Duselongdouble with -Dusemorebits.
See also L<"64-bit support">.
d2175 1
a2175 1
=head2 -Duselargefiles
d2177 1
a2177 3
Some platforms support system APIs that are capable of handling large files
(typically, files larger than two gigabytes).  Perl will try to use these
APIs if you ask for -Duselargefiles.
d2179 1
a2179 1
See L<"Large file support"> for more information. 
d2181 1
a2181 1
=head2 installusrbinperl
d2183 1
a2183 4
You can use "Configure -Uinstallusrbinperl" which causes installperl
to skip installing perl also as /usr/bin/perl.  This is useful if you
prefer not to modify /usr/bin for some reason or another but harmful
because many scripts assume to find Perl in /usr/bin/perl.
d2185 1
a2185 1
=head2 SOCKS support
d2187 1
a2187 3
You can use "Configure -Dusesocks" which causes Perl to probe
for the SOCKS proxy protocol library (v5, not v4).  For more information
on SOCKS, see:
d2189 2
a2190 1
    http://www.socks.nec.com/
d2192 1
a2192 1
=head2 C<-A> flag
d2194 3
a2196 4
You can "post-edit" the Configure variables using the Configure C<-A>
switch.  The editing happens immediately after the platform specific
hints files have been processed but before the actual configuration
process starts.  Run C<Configure -h> to find out the full C<-A> syntax.
d2198 1
a2198 1
=head2 Enhanced Installation Directories
d2200 2
a2201 7
The installation structure has been enriched to improve the support
for maintaining multiple versions of perl, to provide locations for
vendor-supplied modules, scripts, and manpages, and to ease maintenance
of locally-added modules, scripts, and manpages.  See the section on
Installation Directories in the INSTALL file for complete details.
For most users building and installing from source, the defaults should
be fine.
d2203 1
a2203 6
If you previously used C<Configure -Dsitelib> or C<-Dsitearch> to set
special values for library directories, you might wish to consider using
the new C<-Dsiteprefix> setting instead.  Also, if you wish to re-use a
config.sh file from an earlier version of perl, you should be sure to
check that Configure makes sensible choices for the new directories.
See INSTALL for complete details.
d2205 2
a2206 1
=head2 gcc automatically tried if 'cc' does not seem to be working
d2208 1
a2208 4
In many platforms the vendor-supplied 'cc' is too stripped-down to
build Perl (basically, the 'cc' doesn't do ANSI C).  If this seems
to be the case and the 'cc' does not seem to be the GNU C compiler
'gcc', an automatic attempt is made to find and use 'gcc' instead.
d2210 2
a2211 1
=head1 Platform specific changes
d2213 1
a2213 1
=head2 Supported platforms
d2215 2
a2216 1
=over 4
d2220 1
a2220 2
The Mach CThreads (NEXTSTEP, OPENSTEP) are now supported by the Thread
extension.
d2224 1
a2224 1
GNU/Hurd is now supported.
d2228 4
a2231 1
Rhapsody/Darwin is now supported.
d2233 1
a2233 1
=item *
d2235 3
a2237 1
EPOC is now supported (on Psion 5).
d2241 2
a2242 1
The cygwin port (formerly cygwin32) has been greatly improved.
a2243 1
=back
d2245 2
a2246 1
=head2 DOS
d2248 1
a2248 1
=over 4
d2250 1
a2250 1
=item *
d2252 1
a2252 1
Perl now works with djgpp 2.02 (and 2.03 alpha).
d2254 2
a2255 1
=item *
d2257 2
a2258 1
Environment variable names are not converted to uppercase any more.
d2262 2
a2263 1
Incorrect exit codes from backticks have been fixed.
d2267 4
a2270 1
This port continues to use its own builtin globbing (not File::Glob).
d2272 1
a2272 1
=back
d2274 2
a2275 1
=head2 OS390 (OpenEdition MVS)
d2277 1
a2277 4
Support for this EBCDIC platform has not been renewed in this release.
There are difficulties in reconciling Perl's standardization on UTF-8
as its internal representation for characters with the EBCDIC character
set, because the two are incompatible.
d2279 2
a2280 2
It is unclear whether future versions will renew support for this
platform, but the possibility exists.
d2282 1
a2282 1
=head2 VMS
d2284 2
a2285 2
Numerous revisions and extensions to configuration, build, testing, and
installation process to accommodate core changes and VMS-specific options.
d2287 1
a2287 2
Expand %ENV-handling code to allow runtime mapping to logical names,
CLI symbols, and CRTL environ array.
d2289 1
a2289 2
Extension of subprocess invocation code to accept filespecs as command
"verbs".
d2291 1
a2291 2
Add to Perl command line processing the ability to use default file types and
to recognize Unix-style C<2E<gt>&1>.
d2293 2
a2294 1
Expansion of File::Spec::VMS routines, and integration into ExtUtils::MM_VMS.
d2296 1
a2296 1
Extension of ExtUtils::MM_VMS to handle complex extensions more flexibly.
d2298 3
a2300 2
Barewords at start of Unix-syntax paths may be treated as text rather than
only as logical names.
d2302 1
a2302 1
Optional secure translation of several logical names used internally by Perl.
d2304 1
a2304 1
Miscellaneous bugfixing and porting of new core code to VMS.
d2306 1
a2306 2
Thanks are gladly extended to the many people who have contributed VMS
patches, testing, and ideas.
d2308 2
a2309 1
=head2 Win32
d2311 1
a2311 3
Perl can now emulate fork() internally, using multiple interpreters running
in different concurrent threads.  This support must be enabled at build
time.  See L<perlfork> for detailed information.
d2313 2
a2314 3
When given a pathname that consists only of a drivename, such as C<A:>,
opendir() and stat() now use the current working directory for the drive
rather than the drive root.
d2316 1
a2316 2
The builtin XSUB functions in the Win32:: namespace are documented.  See
L<Win32>.
d2318 1
a2318 1
$^X now contains the full path name of the running executable.
d2320 1
a2320 2
A Win32::GetLongPathName() function is provided to complement
Win32::GetFullPathName() and Win32::GetShortPathName().  See L<Win32>.
d2322 1
a2322 1
POSIX::uname() is supported.
d2324 1
a2324 3
system(1,...) now returns true process IDs rather than process
handles.  kill() accepts any real process id, rather than strictly
return values from system(1,...).
d2326 2
a2327 2
For better compatibility with Unix, C<kill(0, $pid)> can now be used to
test whether a process exists.
d2329 1
a2329 1
The C<Shell> module is supported.
d2331 2
a2332 2
Better support for building Perl under command.com in Windows 95
has been added.
d2334 1
a2334 6
Scripts are read in binary mode by default to allow ByteLoader (and
the filter mechanism in general) to work properly.  For compatibility,
the DATA filehandle will be set to text mode if a carriage return is
detected at the end of the line containing the __END__ or __DATA__
token; if not, the DATA filehandle will be left open in binary mode.
Earlier versions always opened the DATA filehandle in text mode.
d2336 2
a2337 7
The glob() operator is implemented via the C<File::Glob> extension,
which supports glob syntax of the C shell.  This increases the flexibility
of the glob() operator, but there may be compatibility issues for
programs that relied on the older globbing syntax.  If you want to
preserve compatibility with the older syntax, you might want to run
perl with C<-MFile::DosGlob>.  For details and compatibility information,
see L<File::Glob>.
d2339 1
a2339 1
=head1 Significant bug fixes
d2341 1
a2341 1
=head2 <HANDLE> on empty files
d2343 1
a2343 4
With C<$/> set to C<undef>, "slurping" an empty file returns a string of
zero length (instead of C<undef>, as it used to) the first time the
HANDLE is read after C<$/> is set to C<undef>.  Further reads yield
C<undef>.
d2345 2
a2346 2
This means that the following will append "foo" to an empty file (it used
to do nothing):
d2348 1
a2348 1
    perl -0777 -pi -e 's/^/foo/' empty_file
d2350 1
a2350 1
The behaviour of:
d2352 1
a2352 1
    perl -pi -e 's/^/foo/' empty_file
d2354 1
a2354 1
is unchanged (it continues to leave the file empty).
d2356 1
a2356 1
=head2 C<eval '...'> improvements
d2358 4
a2361 3
Line numbers (as reflected by caller() and most diagnostics) within
C<eval '...'> were often incorrect where here documents were involved.
This has been corrected.
d2363 1
a2363 4
Lexical lookups for variables appearing in C<eval '...'> within
functions that were themselves called within an C<eval '...'> were
searching the wrong place for lexicals.  The lexical search now
correctly ends at the subroutine's block boundary.
d2365 4
a2368 3
The use of C<return> within C<eval {...}> caused $@@ not to be reset
correctly when no exception occurred within the eval.  This has
been fixed.
d2370 1
a2370 3
Parsing of here documents used to be flawed when they appeared as
the replacement expression in C<eval 's/.../.../e'>.  This has
been fixed.
d2372 3
a2374 1
=head2 All compilation errors are true errors
d2376 1
a2376 5
Some "errors" encountered at compile time were by necessity 
generated as warnings followed by eventual termination of the
program.  This enabled more such errors to be reported in a
single run, rather than causing a hard stop at the first error
that was encountered.
d2378 2
a2379 6
The mechanism for reporting such errors has been reimplemented
to queue compile-time errors and report them at the end of the
compilation as true errors rather than as warnings.  This fixes
cases where error messages leaked through in the form of warnings
when code was compiled at run time using C<eval STRING>, and
also allows such errors to be reliably trapped using C<eval "...">.
d2381 1
a2381 1
=head2 Implicitly closed filehandles are safer
d2383 2
a2384 3
Sometimes implicitly closed filehandles (as when they are localized,
and Perl automatically closes them on exiting the scope) could
inadvertently set $? or $!.  This has been corrected.
d2386 1
d2388 2
a2389 1
=head2 Behavior of list slices is more consistent
d2391 1
a2391 3
When taking a slice of a literal list (as opposed to a slice of
an array or hash), Perl used to return an empty list if the
result happened to be composed of all undef values.
d2393 2
a2394 2
The new behavior is to produce an empty list if (and only if)
the original list was empty.  Consider the following example:
d2396 1
a2396 1
    @@a = (1,undef,undef,2)[2,1,2];
d2398 2
a2399 2
The old behavior would have resulted in @@a having no elements.
The new behavior ensures it has three undefined elements.
d2401 1
a2401 2
Note in particular that the behavior of slices of the following
cases remains unchanged:
d2403 3
a2405 5
    @@a = ()[1,2];
    @@a = (getpwent)[7,0];
    @@a = (anything_returning_empty_list())[2,1,2];
    @@a = @@b[2,1,2];
    @@a = @@c{'a','b','c'};
d2407 1
a2407 1
See L<perldata>.
d2409 3
a2411 1
=head2 C<(\$)> prototype and C<$foo{a}>
d2413 1
a2413 2
A scalar reference prototype now correctly allows a hash or
array element in that slot.
d2415 3
a2417 1
=head2 C<goto &sub> and AUTOLOAD
d2419 1
a2419 2
The C<goto &sub> construct works correctly when C<&sub> happens
to be autoloaded.
d2421 1
a2421 1
=head2 C<-bareword> allowed under C<use integer>
d2423 1
a2423 3
The autoquoting of barewords preceded by C<-> did not work
in prior versions when the C<integer> pragma was enabled.
This has been fixed.
d2425 2
a2426 1
=head2 Failures in DESTROY()
d2428 1
a2428 5
When code in a destructor threw an exception, it went unnoticed
in earlier versions of Perl, unless someone happened to be
looking in $@@ just after the point the destructor happened to
run.  Such failures are now visible as warnings when warnings are
enabled.
d2430 1
a2430 1
=head2 Locale bugs fixed
d2432 1
a2432 2
printf() and sprintf() previously reset the numeric locale
back to the default "C" locale.  This has been fixed.
d2434 1
a2434 5
Numbers formatted according to the local numeric locale
(such as using a decimal comma instead of a decimal dot) caused
"isn't numeric" warnings, even while the operations accessing
those numbers produced correct results.  These warnings have been
discontinued.
d2436 1
a2436 1
=head2 Memory leaks
d2438 2
a2439 2
The C<eval 'return sub {...}'> construct could sometimes leak
memory.  This has been fixed.
d2441 1
a2441 2
Operations that aren't filehandle constructors used to leak memory
when used on invalid filehandles.  This has been fixed.
d2443 1
a2443 2
Constructs that modified C<@@_> could fail to deallocate values
in C<@@_> and thus leak memory.  This has been corrected.
d2445 1
a2445 1
=head2 Spurious subroutine stubs after failed subroutine calls
d2447 1
a2447 4
Perl could sometimes create empty subroutine stubs when a
subroutine was not found in the package.  Such cases stopped
later method lookups from progressing into base packages.
This has been corrected.
d2449 3
a2451 1
=head2 Taint failures under C<-U>
d2453 1
a2453 2
When running in unsafe mode, taint violations could sometimes
cause silent failures.  This has been fixed.
d2455 1
a2455 1
=head2 END blocks and the C<-c> switch
d2457 1
a2457 4
Prior versions used to run BEGIN B<and> END blocks when Perl was
run in compile-only mode.  Since this is typically not the expected
behavior, END blocks are not executed anymore when the C<-c> switch
is used, or if compilation fails.
d2459 4
a2462 2
See L</"Support for CHECK blocks"> for how to run things when the compile 
phase ends.
d2464 1
a2464 1
=head2 Potential to leak DATA filehandles
d2466 2
a2467 3
Using the C<__DATA__> token creates an implicit filehandle to
the file that contains the token.  It is the program's
responsibility to close it when it is done reading from it.
d2469 1
a2469 2
This caveat is now better explained in the documentation.
See L<perldata>.
d2471 1
a2471 1
=head1 New or Changed Diagnostics
d2473 1
a2473 1
=over 4
d2475 3
a2477 1
=item "%s" variable %s masks earlier declaration in same %s
d2479 1
a2479 5
(W misc) A "my" or "our" variable has been redeclared in the current scope or statement,
effectively eliminating all access to the previous instance.  This is almost
always a typographical error.  Note that the earlier variable will still exist
until the end of the scope or until all closure referents to it are
destroyed.
d2481 2
a2482 1
=item "my sub" not yet implemented
d2484 1
a2484 2
(F) Lexically scoped subroutines are not yet implemented.  Don't try that
yet.
d2486 1
a2486 1
=item "our" variable %s redeclared
d2488 1
a2488 2
(W misc) You seem to have already declared the same global once before in the
current lexical scope.
d2490 2
a2491 1
=item '!' allowed only after types %s
d2493 1
a2493 2
(F) The '!' is allowed in pack() and unpack() only after certain types.
See L<perlfunc/pack>.
d2495 1
a2495 1
=item / cannot take a count
d2497 1
a2497 3
(F) You had an unpack template indicating a counted-length string,
but you have also specified an explicit size for the string.
See L<perlfunc/pack>.
d2499 1
a2499 1
=item / must be followed by a, A or Z
d2501 2
a2502 4
(F) You had an unpack template indicating a counted-length string,
which must be followed by one of the letters a, A or Z
to indicate what sort of string is to be unpacked.
See L<perlfunc/pack>.
d2504 1
a2504 1
=item / must be followed by a*, A* or Z*
d2506 3
a2508 3
(F) You had a pack template indicating a counted-length string,
Currently the only things that can have their length counted are a*, A* or Z*.
See L<perlfunc/pack>.
d2510 1
a2510 1
=item / must follow a numeric type
d2512 1
a2512 3
(F) You had an unpack template that contained a '#',
but this did not follow some numeric unpack specification.
See L<perlfunc/pack>.
d2514 1
a2514 1
=item /%s/: Unrecognized escape \\%c passed through
d2516 1
a2516 3
(W regexp) You used a backslash-character combination which is not recognized
by Perl.  This combination appears in an interpolated variable or a
C<'>-delimited regular expression.  The character was understood literally.
d2518 1
a2518 1
=item /%s/: Unrecognized escape \\%c in character class passed through
d2520 1
a2520 2
(W regexp) You used a backslash-character combination which is not recognized
by Perl inside character classes.  The character was understood literally.
d2522 1
a2522 1
=item /%s/ should probably be written as "%s"
d2524 1
a2524 4
(W syntax) You have used a pattern where Perl expected to find a string,
as in the first argument to C<join>.  Perl will treat the true
or false result of matching the pattern against $_ as the string,
which is probably not what you had in mind.
d2526 1
a2526 1
=item %s() called too early to check prototype
d2528 1
a2528 7
(W prototype) You've called a function that has a prototype before the parser saw a
definition or declaration for it, and Perl could not check that the call
conforms to the prototype.  You need to either add an early prototype
declaration for the subroutine in question, or move the subroutine
definition ahead of the call to get proper prototype checking.  Alternatively,
if you are certain that you're calling the function correctly, you may put
an ampersand before the name to avoid the warning.  See L<perlsub>.
d2530 1
a2530 1
=item %s argument is not a HASH or ARRAY element
d2532 1
a2532 1
(F) The argument to exists() must be a hash or array element, such as:
d2534 1
a2534 2
    $foo{$bar}
    $ref->{"susie"}[12]
d2536 1
a2536 1
=item %s argument is not a HASH or ARRAY element or slice
d2538 1
a2538 1
(F) The argument to delete() must be either a hash or array element, such as:
d2540 1
a2540 2
    $foo{$bar}
    $ref->{"susie"}[12]
d2542 1
a2542 1
or a hash or array slice, such as:
d2544 1
a2544 2
    @@foo[$bar, $baz, $xyzzy]
    @@{$ref->[12]}{"susie", "queue"}
d2546 1
a2546 1
=item %s argument is not a subroutine name
d2548 1
a2548 2
(F) The argument to exists() for C<exists &sub> must be a subroutine
name, and not a subroutine call.  C<exists &sub()> will generate this error.
d2550 1
a2550 1
=item %s package attribute may clash with future reserved word: %s
d2552 1
a2552 4
(W reserved) A lowercase attribute name was used that had a package-specific handler.
That name might have a meaning to Perl itself some day, even though it
doesn't yet.  Perhaps you should use a mixed-case attribute name, instead.
See L<attributes>.
d2554 2
a2555 1
=item (in cleanup) %s
d2557 1
a2557 6
(W misc) This prefix usually indicates that a DESTROY() method raised
the indicated exception.  Since destructors are usually called by
the system at arbitrary points during execution, and often a vast
number of times, the warning is issued only once for any number
of failures that would otherwise result in the same message being
repeated.
d2559 1
a2559 2
Failure of user callbacks dispatched using the C<G_KEEPERR> flag
could also result in this warning.  See L<perlcall/G_KEEPERR>.
d2561 2
a2562 1
=item <> should be quotes
d2564 1
a2564 2
(F) You wrote C<< require <file> >> when you should have written
C<require 'file'>.
d2566 1
a2566 1
=item Attempt to join self
d2568 1
a2568 3
(F) You tried to join a thread from within itself, which is an
impossible task.  You may be joining the wrong thread, or you may
need to move the join() to some other thread.
d2570 1
a2570 1
=item Bad evalled substitution pattern
d2572 1
a2572 3
(F) You've used the /e switch to evaluate the replacement for a
substitution, but perl found a syntax error in the code to evaluate,
most likely an unexpected right brace '}'.
d2574 1
a2574 1
=item Bad realloc() ignored
d2576 3
a2578 3
(S) An internal routine called realloc() on something that had never been
malloc()ed in the first place. Mandatory, but can be disabled by
setting environment variable C<PERL_BADFREE> to 1.
d2580 1
a2580 1
=item Bareword found in conditional
d2582 1
a2582 3
(W bareword) The compiler found a bareword where it expected a conditional,
which often indicates that an || or && was parsed as part of the
last argument of the previous construct, for example:
d2584 1
a2584 1
    open FOO || die;
d2586 4
a2589 2
It may also indicate a misspelled constant that has been interpreted
as a bareword:
d2591 1
a2591 2
    use constant TYPO => 1;
    if (TYOP) { print "foo" }
d2593 1
a2593 1
The C<strict> pragma is useful in avoiding such errors.
d2595 1
a2595 1
=item Binary number > 0b11111111111111111111111111111111 non-portable
d2597 1
a2597 3
(W portable) The binary number you specified is larger than 2**32-1
(4294967295) and therefore non-portable between systems.  See
L<perlport> for more on portability concerns.
d2599 3
a2601 1
=item Bit vector size > 32 non-portable
d2603 1
a2603 1
(W portable) Using bit vector sizes larger than 32 is non-portable.
d2605 1
a2605 1
=item Buffer overflow in prime_env_iter: %s
d2607 1
a2607 3
(W internal) A warning peculiar to VMS.  While Perl was preparing to iterate over
%ENV, it encountered a logical name or symbol definition which was too long,
so it was truncated to the string shown.
d2609 1
a2609 1
=item Can't check filesystem of script "%s"
d2611 1
a2611 1
(P) For some reason you can't check the filesystem of the script for nosuid.
d2613 1
a2613 1
=item Can't declare class for non-scalar %s in "%s"
d2615 1
a2615 3
(S) Currently, only scalar variables can declared with a specific class
qualifier in a "my" or "our" declaration.  The semantics may be extended
for other types of variables in future.
d2617 1
a2617 1
=item Can't declare %s in "%s"
d2619 1
a2619 2
(F) Only scalar, array, and hash variables may be declared as "my" or
"our" variables.  They must have ordinary identifiers as names.
d2621 1
a2621 1
=item Can't ignore signal CHLD, forcing to default
d2623 1
a2623 6
(W signal) Perl has detected that it is being run with the SIGCHLD signal
(sometimes known as SIGCLD) disabled.  Since disabling this signal
will interfere with proper determination of exit status of child
processes, Perl has reset the signal to its default value.
This situation typically indicates that the parent program under
which Perl may be running (e.g., cron) is being very careless.
d2625 4
a2628 1
=item Can't modify non-lvalue subroutine call
d2630 1
a2630 2
(F) Subroutines meant to be used in lvalue context should be declared as
such, see L<perlsub/"Lvalue subroutines">.
d2632 1
a2632 1
=item Can't read CRTL environ
d2634 4
a2637 4
(S) A warning peculiar to VMS.  Perl tried to read an element of %ENV
from the CRTL's internal environment array and discovered the array was
missing.  You need to figure out where your CRTL misplaced its environ
or define F<PERL_ENV_TABLES> (see L<perlvms>) so that environ is not searched.
d2639 1
a2639 1
=item Can't remove %s: %s, skipping file 
d2641 1
a2641 3
(S) You requested an inplace edit without creating a backup file.  Perl
was unable to remove the original file to replace it with the modified
file.  The file was left unmodified.
d2643 4
a2646 1
=item Can't return %s from lvalue subroutine
d2648 1
a2648 3
(F) Perl detected an attempt to return illegal lvalues (such
as temporary or readonly values) from a subroutine used as an lvalue.
This is not allowed.
d2650 1
a2650 1
=item Can't weaken a nonreference
d2652 2
a2653 2
(F) You attempted to weaken something that was not a reference.  Only
references can be weakened.
d2655 2
a2656 1
=item Character class [:%s:] unknown
d2658 2
a2659 2
(F) The class in the character class [: :] syntax is unknown.
See L<perlre>.
d2661 3
a2663 1
=item Character class syntax [%s] belongs inside character classes
d2665 2
a2666 5
(W unsafe) The character class constructs [: :], [= =], and [. .]  go
I<inside> character classes, the [] are part of the construct,
for example: /[012[:alpha:]345]/.  Note that [= =] and [. .]
are not currently implemented; they are simply placeholders for
future extensions.
d2668 2
a2669 1
=item Constant is not %s reference
d2671 4
a2674 5
(F) A constant value (perhaps declared using the C<use constant> pragma)
is being dereferenced, but it amounts to the wrong type of reference.  The
message indicates the type of reference that was expected. This usually
indicates a syntax error in dereferencing the constant value.
See L<perlsub/"Constant Functions"> and L<constant>.
d2676 4
a2679 1
=item constant(%s): %s
d2681 2
a2682 4
(F) The parser found inconsistencies either while attempting to define an
overloaded constant, or when trying to find the character name specified
in the C<\N{...}> escape.  Perhaps you forgot to load the corresponding
C<overload> or C<charnames> pragma?  See L<charnames> and L<overload>.
d2684 1
a2684 1
=item CORE::%s is not a keyword
d2686 1
a2686 1
(F) The CORE:: namespace is reserved for Perl keywords.
d2688 1
a2688 1
=item defined(@@array) is deprecated
d2690 1
a2690 3
(D) defined() is not usually useful on arrays because it checks for an
undefined I<scalar> value.  If you want to see if the array is empty,
just use C<if (@@array) { # not empty }> for example.  
d2692 3
a2694 1
=item defined(%hash) is deprecated
d2696 1
a2696 3
(D) defined() is not usually useful on hashes because it checks for an
undefined I<scalar> value.  If you want to see if the hash is empty,
just use C<if (%hash) { # not empty }> for example.  
d2698 2
a2699 1
=item Did not produce a valid header
d2701 1
a2701 1
See Server error.
d2703 1
a2703 1
=item (Did you mean "local" instead of "our"?)
d2705 1
a2705 2
(W misc) Remember that "our" does not localize the declared global variable.
You have declared it again in the same lexical scope, which seems superfluous.
d2707 1
a2707 1
=item Document contains no data
d2709 4
a2712 1
See Server error.
d2714 1
a2714 1
=item entering effective %s failed
d2716 2
a2717 2
(F) While under the C<use filetest> pragma, switching the real and
effective uids or gids failed.
d2719 1
a2719 1
=item false [] range "%s" in regexp
d2721 1
a2721 4
(W regexp) A character class range must start and end at a literal character, not
another character class like C<\d> or C<[:alpha:]>.  The "-" in your false
range is interpreted as a literal "-".  Consider quoting the "-",  "\-".
See L<perlre>.
d2723 1
a2723 1
=item Filehandle %s opened only for output
d2725 1
a2725 5
(W io) You tried to read from a filehandle opened only for writing.  If you
intended it to be a read/write filehandle, you needed to open it with
"+<" or "+>" or "+>>" instead of with "<" or nothing.  If
you intended only to read from the file, use "<".  See
L<perlfunc/open>.
d2727 1
a2727 1
=item flock() on closed filehandle %s
d2729 3
a2731 3
(W closed) The filehandle you're attempting to flock() got itself closed some
time before now.  Check your logic flow.  flock() operates on filehandles.
Are you attempting to call flock() on a dirhandle by the same name?
d2733 1
a2733 1
=item Global symbol "%s" requires explicit package name
d2735 2
a2736 4
(F) You've said "use strict vars", which indicates that all variables
must either be lexically scoped (using "my"), declared beforehand using
"our", or explicitly qualified to say which package the global variable
is in (using "::").
d2738 1
a2738 1
=item Hexadecimal number > 0xffffffff non-portable
d2740 12
a2751 3
(W portable) The hexadecimal number you specified is larger than 2**32-1
(4294967295) and therefore non-portable between systems.  See
L<perlport> for more on portability concerns.
d2753 1
a2753 1
=item Ill-formed CRTL environ value "%s"
d2755 3
a2757 3
(W internal) A warning peculiar to VMS.  Perl tried to read the CRTL's internal
environ array, and encountered an element without the C<=> delimiter
used to separate keys from values.  The element is ignored.
d2759 1
a2759 1
=item Ill-formed message in prime_env_iter: |%s|
d2761 3
a2763 4
(W internal) A warning peculiar to VMS.  Perl tried to read a logical name
or CLI symbol definition when preparing to iterate over %ENV, and
didn't see the expected delimiter between key and value, so the
line was ignored.
d2765 1
a2765 1
=item Illegal binary digit %s
d2767 2
a2768 1
(F) You used a digit other than 0 or 1 in a binary number.
d2770 1
a2770 1
=item Illegal binary digit %s ignored
d2772 2
a2773 2
(W digit) You may have tried to use a digit other than 0 or 1 in a binary number.
Interpretation of the binary number stopped before the offending digit.
d2775 1
a2775 1
=item Illegal number of bits in vec
d2777 1
a2777 2
(F) The number of bits in vec() (the third argument) must be a power of
two from 1 to 32 (or 64, if your platform supports that).
d2779 1
a2779 1
=item Integer overflow in %s number
d2781 2
a2782 9
(W overflow) The hexadecimal, octal or binary number you have specified either
as a literal or as an argument to hex() or oct() is too big for your
architecture, and has been converted to a floating point number.  On a
32-bit architecture the largest hexadecimal, octal or binary number
representable without overflow is 0xFFFFFFFF, 037777777777, or
0b11111111111111111111111111111111 respectively.  Note that Perl
transparently promotes all numbers to a floating point representation
internally--subject to loss of precision errors in subsequent
operations.
d2784 1
a2784 1
=item Invalid %s attribute: %s
d2786 2
a2787 2
The indicated attribute for a subroutine or variable was not recognized
by Perl or by a user-supplied handler.  See L<attributes>.
d2789 1
a2789 1
=item Invalid %s attributes: %s
d2791 2
a2792 2
The indicated attributes for a subroutine or variable were not recognized
by Perl or by a user-supplied handler.  See L<attributes>.
d2794 1
a2794 1
=item invalid [] range "%s" in regexp
d2796 1
a2796 1
The offending range is now explicitly displayed.
d2798 1
a2798 1
=item Invalid separator character %s in attribute list
d2800 1
a2800 4
(F) Something other than a colon or whitespace was seen between the
elements of an attribute list.  If the previous attribute
had a parenthesised parameter list, perhaps that list was terminated
too soon.  See L<attributes>.
d2802 1
a2802 1
=item Invalid separator character %s in subroutine attribute list
d2804 1
a2804 4
(F) Something other than a colon or whitespace was seen between the
elements of a subroutine attribute list.  If the previous attribute
had a parenthesised parameter list, perhaps that list was terminated
too soon.
d2806 1
a2806 1
=item leaving effective %s failed
d2808 2
a2809 2
(F) While under the C<use filetest> pragma, switching the real and
effective uids or gids failed.
d2811 1
a2811 1
=item Lvalue subs returning %s not implemented yet
d2813 2
a2814 3
(F) Due to limitations in the current implementation, array and hash
values cannot be returned in subroutines used in lvalue context.
See L<perlsub/"Lvalue subroutines">.
d2816 1
a2816 1
=item Method %s not permitted
d2818 1
a2818 1
See Server error.
d2820 1
a2820 1
=item Missing %sbrace%s on \N{}
d2822 2
a2823 2
(F) Wrong syntax of character name literal C<\N{charname}> within
double-quotish context.
d2825 1
a2825 1
=item Missing command in piped open
d2827 1
a2827 2
(W pipe) You used the C<open(FH, "| command")> or C<open(FH, "command |")>
construction, but the command was missing or blank.
d2829 1
a2829 1
=item Missing name in "my sub"
d2831 1
a2831 2
(F) The reserved syntax for lexically scoped subroutines requires that they
have a name with which they can be found.
d2833 1
a2833 1
=item No %s specified for -%c
d2835 1
a2835 2
(F) The indicated command line switch needs a mandatory argument, but
you haven't specified one.
d2837 1
a2837 1
=item No package name allowed for variable %s in "our"
d2839 1
a2839 3
(F) Fully qualified variable names are not allowed in "our" declarations,
because that doesn't make much sense under existing semantics.  Such
syntax is reserved for future extensions.
d2841 2
a2842 1
=item No space allowed after -%c
d2844 1
a2844 2
(F) The argument to the indicated command line switch must follow immediately
after the switch, without intervening spaces.
d2846 3
a2848 1
=item no UTC offset information; assuming local time is UTC
d2850 1
a2850 5
(S) A warning peculiar to VMS.  Perl was unable to find the local
timezone offset, so it's assuming that local system time is equivalent
to UTC.  If it's not, define the logical name F<SYS$TIMEZONE_DIFFERENTIAL>
to translate to the number of seconds which need to be added to UTC to
get local time.
d2852 4
a2855 1
=item Octal number > 037777777777 non-portable
d2857 1
a2857 3
(W portable) The octal number you specified is larger than 2**32-1 (4294967295)
and therefore non-portable between systems.  See L<perlport> for more
on portability concerns.
d2859 3
a2861 1
See also L<perlport> for writing portable code.
d2863 1
a2863 1
=item panic: del_backref
d2865 2
a2866 2
(P) Failed an internal consistency check while trying to reset a weak
reference.
d2868 1
a2868 1
=item panic: kid popen errno read
d2870 2
a2871 1
(F) forked child returned an incomprehensible message about its errno.
d2873 1
a2873 1
=item panic: magic_killbackrefs
d2875 4
a2878 2
(P) Failed an internal consistency check while trying to reset all weak
references to an object.
d2880 1
a2880 1
=item Parentheses missing around "%s" list
d2882 3
a2884 1
(W parenthesis) You said something like
d2886 1
a2886 1
    my $foo, $bar = @@_;
d2888 2
a2889 1
when you meant
d2891 1
a2891 1
    my ($foo, $bar) = @@_;
d2893 1
a2893 1
Remember that "my", "our", and "local" bind tighter than comma.
d2895 1
a2895 1
=item Possible unintended interpolation of %s in string
d2897 2
a2898 4
(W ambiguous) It used to be that Perl would try to guess whether you
wanted an array interpolated or a literal @@.  It no longer does this;
arrays are now I<always> interpolated into strings.  This means that 
if you try something like:
d2900 1
a2900 1
        print "fred@@example.com";
d2902 1
a2902 4
and the array C<@@example> doesn't exist, Perl is going to print
C<fred.com>, which is probably not what you wanted.  To get a literal
C<@@> sign in a string, put a backslash before it, just as you would
to get a literal C<$> sign.
d2904 1
a2904 1
=item Possible Y2K bug: %s
d2906 1
a2906 2
(W y2k) You are concatenating the number 19 with another number, which
could be a potential Year 2000 problem.
d2908 1
a2908 1
=item pragma "attrs" is deprecated, use "sub NAME : ATTRS" instead
d2910 1
a2910 1
(W deprecated) You have written something like this:
d2912 1
a2912 4
    sub doit
    {
        use attrs qw(locked);
    }
d2914 3
a2916 1
You should use the new declaration syntax instead.
d2918 1
a2918 3
    sub doit : locked
    {
        ...
d2920 2
a2921 2
The C<use attrs> pragma is now obsolete, and is only provided for
backward-compatibility. See L<perlsub/"Subroutine Attributes">.
d2923 1
d2925 2
a2926 1
=item Premature end of script headers
d2928 1
a2928 1
See Server error.
d2930 3
a2932 1
=item Repeat count in pack overflows
d2934 1
a2934 2
(F) You can't specify a repeat count so large that it overflows
your signed integers.  See L<perlfunc/pack>.
d2936 3
a2938 1
=item Repeat count in unpack overflows
d2940 1
a2940 2
(F) You can't specify a repeat count so large that it overflows
your signed integers.  See L<perlfunc/unpack>.
d2942 1
a2942 1
=item realloc() of freed memory ignored
d2944 1
a2944 2
(S) An internal routine called realloc() on something that had already
been freed.
d2946 1
a2946 1
=item Reference is already weak
d2948 1
a2948 2
(W misc) You have attempted to weaken a reference that is already weak.
Doing so has no effect.
d2950 1
a2950 1
=item setpgrp can't take arguments
d2952 1
a2952 2
(F) Your system has the setpgrp() from BSD 4.2, which takes no arguments,
unlike POSIX setpgid(), which takes a process ID and process group ID.
d2954 3
a2956 1
=item Strange *+?{} on zero-length expression
d2958 1
a2958 5
(W regexp) You applied a regular expression quantifier in a place where it
makes no sense, such as on a zero-width assertion.
Try putting the quantifier inside the assertion instead.  For example,
the way to match "abc" provided that it is followed by three
repetitions of "xyz" is C</abc(?=(?:xyz){3})/>, not C</abc(?=xyz){3}/>.
d2960 2
a2961 1
=item switching effective %s is not implemented
d2963 1
a2963 2
(F) While under the C<use filetest> pragma, we cannot switch the
real and effective uids or gids.
d2965 2
a2966 1
=item This Perl can't reset CRTL environ elements (%s)
d2968 1
a2968 1
=item This Perl can't set CRTL environ elements (%s=%s)
d2970 2
a2971 6
(W internal) Warnings peculiar to VMS.  You tried to change or delete an element
of the CRTL's internal environ array, but your copy of Perl wasn't
built with a CRTL that contained the setenv() function.  You'll need to
rebuild Perl with a CRTL that does, or redefine F<PERL_ENV_TABLES> (see
L<perlvms>) so that the environ array isn't the target of the change to
%ENV which produced the warning.
d2973 1
a2973 1
=item Too late to run %s block
d2975 2
a2976 5
(W void) A CHECK or INIT block is being defined during run time proper,
when the opportunity to run them has already passed.  Perhaps you are
loading a file with C<require> or C<do> when you should be using
C<use> instead.  Or perhaps you should put the C<require> or C<do>
inside a BEGIN block.
d2978 1
a2978 1
=item Unknown open() mode '%s'
d2980 2
a2981 3
(F) The second argument of 3-argument open() is not among the list
of valid modes: C<< < >>, C<< > >>, C<<< >> >>>, C<< +< >>,
C<< +> >>, C<<< +>> >>>, C<-|>, C<|->.
d2983 1
a2983 1
=item Unknown process %x sent message to prime_env_iter: %s
d2985 1
a2985 4
(P) An error peculiar to VMS.  Perl was reading values for %ENV before
iterating over it, and someone else stuck a message in the stream of
data Perl expected.  Someone's very confused, or perhaps trying to
subvert Perl's population of %ENV for nefarious purposes.
d2987 1
a2987 1
=item Unrecognized escape \\%c passed through
d2989 1
a2989 2
(W misc) You used a backslash-character combination which is not recognized
by Perl.  The character was understood literally.
d2991 1
a2991 1
=item Unterminated attribute parameter in attribute list
d2993 2
a2994 4
(F) The lexer saw an opening (left) parenthesis character while parsing an
attribute list, but the matching closing (right) parenthesis
character was not found.  You may need to add (or remove) a backslash
character to get your parentheses to balance.  See L<attributes>.
d2996 1
a2996 1
=item Unterminated attribute list
d2998 3
a3000 4
(F) The lexer found something other than a simple identifier at the start
of an attribute, and it wasn't a semicolon or the start of a
block.  Perhaps you terminated the parameter list of the previous attribute
too soon.  See L<attributes>.
d3002 1
a3002 1
=item Unterminated attribute parameter in subroutine attribute list
d3004 1
a3004 4
(F) The lexer saw an opening (left) parenthesis character while parsing a
subroutine attribute list, but the matching closing (right) parenthesis
character was not found.  You may need to add (or remove) a backslash
character to get your parentheses to balance.
d3006 1
a3006 1
=item Unterminated subroutine attribute list
d3008 2
a3009 4
(F) The lexer found something other than a simple identifier at the start
of a subroutine attribute, and it wasn't a semicolon or the start of a
block.  Perhaps you terminated the parameter list of the previous attribute
too soon.
d3011 1
a3011 1
=item Value of CLI symbol "%s" too long
d3013 1
a3013 4
(W misc) A warning peculiar to VMS.  Perl tried to read the value of an %ENV
element from a CLI symbol table, and found a resultant string longer
than 1024 characters.  The return value has been truncated to 1024
characters.
d3015 1
a3015 1
=item Version number must be a constant number
d3017 1
a3017 3
(P) The attempt to translate a C<use Module n.n LIST> statement into
its equivalent C<BEGIN> block found an internal inconsistency with
the version number.
d3019 1
a3019 1
=back
d3021 1
a3021 1
=head1 New tests
d3023 2
a3024 1
=over 4
d3026 1
a3026 1
=item	lib/attrs
d3028 6
a3033 1
Compatibility tests for C<sub : attrs> vs the older C<use attrs>.
d3035 1
a3035 1
=item	lib/env
d3037 4
a3040 1
Tests for new environment scalar capability (e.g., C<use Env qw($BAR);>).
d3042 1
a3042 1
=item	lib/env-array
d3044 1
a3044 1
Tests for new environment array capability (e.g., C<use Env qw(@@PATH);>).
d3046 1
a3046 1
=item	lib/io_const
d3048 2
a3049 1
IO constants (SEEK_*, _IO*).
d3051 1
a3051 1
=item	lib/io_dir
d3053 2
a3054 1
Directory-related IO methods (new, read, close, rewind, tied delete).
d3056 1
a3056 1
=item	lib/io_multihomed
d3058 1
a3058 1
INET sockets with multi-homed hosts.
d3060 1
a3060 1
=item	lib/io_poll
d3062 3
a3064 1
IO poll().
d3066 1
a3066 1
=item	lib/io_unix
d3068 5
a3072 1
UNIX sockets.
d3074 1
a3074 1
=item	op/attrs
d3076 4
a3079 1
Regression tests for C<my ($x,@@y,%z) : attrs> and <sub : attrs>.
d3081 1
a3081 1
=item	op/filetest
d3083 1
a3083 1
File test operators.
d3085 1
a3085 1
=item	op/lex_assign
d3087 2
a3088 1
Verify operations that access pad objects (lexicals and temporaries).
d3090 1
a3090 1
=item	op/exists_sub
d3092 1
a3092 1
Verify C<exists &sub> operations.
d3096 1
a3096 1
=head1 Incompatible Changes
d3098 11
a3108 1
=head2 Perl Source Incompatibilities
d3110 37
a3146 2
Beware that any new warnings that have been added or old ones
that have been enhanced are B<not> considered incompatible changes.
d3148 1
a3148 3
Since all new warnings must be explicitly requested via the C<-w>
switch or the C<warnings> pragma, it is ultimately the programmer's
responsibility to ensure that warnings are enabled judiciously.
d3150 1
a3150 1
=over 4
d3152 2
a3153 1
=item CHECK is a new keyword
d3155 1
a3155 2
All subroutine definitions named CHECK are now special.  See
C</"Support for CHECK blocks"> for more information.
d3157 1
a3157 1
=item Treatment of list slices of undef has changed
d3159 5
a3163 3
There is a potential incompatibility in the behavior of list slices
that are comprised entirely of undefined values.
See L</"Behavior of list slices is more consistent">.
d3165 1
a3165 1
=item Format of $English::PERL_VERSION is different
d3167 13
a3179 3
The English module now sets $PERL_VERSION to $^V (a string value) rather
than C<$]> (a numeric value).  This is a potential incompatibility.
Send us a report via perlbug if you are affected by this.
d3181 1
a3181 2
See L</"Improved Perl version numbering system"> for the reasons for
this change.
d3183 1
a3183 1
=item Literals of the form C<1.2.3> parse differently
d3185 3
a3187 4
Previously, numeric literals with more than one dot in them were
interpreted as a floating point number concatenated with one or more
numbers.  Such "numbers" are now parsed as strings composed of the
specified ordinals.
d3189 1
a3189 2
For example, C<print 97.98.99> used to output C<97.9899> in earlier
versions, but now prints C<abc>.
d3191 1
a3191 1
See L</"Support for strings represented as a vector of ordinals">.
d3193 1
a3193 1
=item Possibly changed pseudo-random number generator
d3195 1
a3195 4
Perl programs that depend on reproducing a specific set of pseudo-random
numbers may now produce different output due to improvements made to the
rand() builtin.  You can use C<sh Configure -Drandfunc=rand> to obtain
the old behavior.
d3197 1
a3197 1
See L</"Better pseudo-random number generator">.
d3199 1
a3199 1
=item Hashing function for hash keys has changed
d3201 1
a3201 5
Even though Perl hashes are not order preserving, the apparently
random order encountered when iterating on the contents of a hash
is actually determined by the hashing algorithm used.  Improvements
in the algorithm may yield a random order that is B<different> from
that of previous versions, especially when iterating on hashes.
d3203 1
a3203 2
See L</"Better worst-case behavior of hashes"> for additional
information.
d3205 1
a3205 1
=item C<undef> fails on read only values
d3207 7
a3213 3
Using the C<undef> operator on a readonly value (such as $1) has
the same effect as assigning C<undef> to the readonly value--it
throws an exception.
d3215 3
a3217 1
=item Close-on-exec bit may be set on pipe and socket handles
d3219 1
a3219 2
Pipe and socket handles are also now subject to the close-on-exec
behavior determined by the special variable $^F.
d3221 4
a3224 1
See L</"More consistent close-on-exec behavior">.
d3226 4
a3229 1
=item Writing C<"$$1"> to mean C<"${$}1"> is unsupported
d3231 1
a3231 3
Perl 5.004 deprecated the interpretation of C<$$1> and
similar within interpolated strings to mean C<$$ . "1">,
but still allowed it.
d3233 1
a3233 1
In Perl 5.6.0 and later, C<"$$1"> always means C<"${$1}">.
d3235 3
a3237 1
=item delete(), each(), values() and C<\(%h)>
d3239 1
a3239 1
operate on aliases to values, not copies
d3241 3
a3243 7
delete(), each(), values() and hashes (e.g. C<\(%h)>)
in a list context return the actual
values in the hash, instead of copies (as they used to in earlier
versions).  Typical idioms for using these constructs copy the
returned values, but this can make a significant difference when
creating references to the returned values.  Keys in the hash are still
returned as copies when iterating on a hash.
d3245 3
a3247 1
See also L</"delete(), each(), values() and hash iteration are faster">.
d3249 14
a3262 1
=item vec(EXPR,OFFSET,BITS) enforces powers-of-two BITS
d3264 4
a3267 2
vec() generates a run-time error if the BITS argument is not
a valid power-of-two integer.
d3269 1
a3269 1
=item Text of some diagnostic output has changed
d3271 2
a3272 4
Most references to internal Perl operations in diagnostics
have been changed to be more descriptive.  This may be an
issue for programs that may incorrectly rely on the exact
text of diagnostics for proper functioning.
d3274 5
a3278 1
=item C<%@@> has been removed
d3280 1
a3280 4
The undocumented special variable C<%@@> that used to accumulate
"background" errors (such as those that happen in DESTROY())
has been removed, because it could potentially result in memory
leaks.
d3282 1
a3282 1
=item Parenthesized not() behaves like a list operator
d3284 1
a3284 2
The C<not> operator now falls under the "if it looks like a function,
it behaves like a function" rule.
d3286 6
a3291 3
As a result, the parenthesized form can be used with C<grep> and C<map>.
The following construct used to be a syntax error before, but it works
as expected now:
d3293 1
a3293 1
    grep not($_), @@things;
d3295 4
a3298 2
On the other hand, using C<not> with a literal list slice may not
work.  The following previously allowed construct:
d3300 5
a3304 1
    print not (1,2,3)[0];
d3306 1
a3306 1
needs to be written with additional parentheses now:
d3308 1
a3308 1
    print not((1,2,3)[0]);
d3310 1
a3310 1
The behavior remains unaffected when C<not> is not followed by parentheses.
d3312 1
a3312 1
=item Semantics of bareword prototype C<(*)> have changed
d3314 4
a3317 6
The semantics of the bareword prototype C<*> have changed.  Perl 5.005
always coerced simple scalar arguments to a typeglob, which wasn't useful
in situations where the subroutine must distinguish between a simple
scalar and a typeglob.  The new behavior is to not coerce bareword
arguments to a typeglob.  The value will always be visible as either
a simple scalar or as a reference to a typeglob.
d3319 1
a3319 1
See L</"More functional bareword prototype (*)">.
d3321 7
a3327 1
=item Semantics of bit operators may have changed on 64-bit platforms
d3329 1
a3329 9
If your platform is either natively 64-bit or if Perl has been
configured to used 64-bit integers, i.e., $Config{ivsize} is 8, 
there may be a potential incompatibility in the behavior of bitwise
numeric operators (& | ^ ~ << >>).  These operators used to strictly
operate on the lower 32 bits of integers in previous versions, but now
operate over the entire native integral width.  In particular, note
that unary C<~> will produce different results on platforms that have
different $Config{ivsize}.  For portability, be sure to mask off
the excess bits in the result of unary C<~>, e.g., C<~$x & 0xffffffff>.
d3331 1
a3331 1
See L</"Bit operators support full native integer width">.
d3333 6
a3338 1
=item More builtins taint their results
d3340 1
a3340 2
As described in L</"Improved security features">, there may be more
sources of taint in a Perl program.
d3342 1
a3342 3
To avoid these new tainting behaviors, you can build Perl with the
Configure option C<-Accflags=-DINCOMPLETE_TAINTS>.  Beware that the
ensuing perl binary may be insecure.
d3344 1
a3344 1
=back
d3346 2
a3347 1
=head2 C Source Incompatibilities
d3349 1
a3349 1
=over 4
d3351 1
a3351 1
=item C<PERL_POLLUTE>
d3353 6
a3358 6
Release 5.005 grandfathered old global symbol names by providing preprocessor
macros for extension source compatibility.  As of release 5.6.0, these
preprocessor definitions are not available by default.  You need to explicitly
compile perl with C<-DPERL_POLLUTE> to get these definitions.  For
extensions still using the old symbols, this option can be
specified via MakeMaker:
d3360 1
a3360 1
    perl Makefile.PL POLLUTE=1
d3362 4
a3365 1
=item C<PERL_IMPLICIT_CONTEXT>
d3367 1
a3367 7
This new build option provides a set of macros for all API functions
such that an implicit interpreter/thread context argument is passed to
every API function.  As a result of this, something like C<sv_setsv(foo,bar)>
amounts to a macro invocation that actually translates to something like
C<Perl_sv_setsv(my_perl,foo,bar)>.  While this is generally expected
to not have any significant source compatibility issues, the difference
between a macro and a real function call will need to be considered.
d3369 1
a3369 3
This means that there B<is> a source compatibility issue as a result of
this if your extensions attempt to use pointers to any of the Perl API
functions.
d3371 6
a3376 3
Note that the above issue is not relevant to the default build of
Perl, whose interfaces continue to match those of prior versions
(but subject to the other options described here).
d3378 1
a3378 2
See L<perlguts/"The Perl API"> for detailed information on the
ramifications of building Perl with this option.
d3380 1
a3380 3
    NOTE: PERL_IMPLICIT_CONTEXT is automatically enabled whenever Perl is built
    with one of -Dusethreads, -Dusemultiplicity, or both.  It is not
    intended to be enabled by users at this time.
d3382 4
a3385 1
=item C<PERL_POLLUTE_MALLOC>
d3387 1
a3387 8
Enabling Perl's malloc in release 5.005 and earlier caused the namespace of
the system's malloc family of functions to be usurped by the Perl versions,
since by default they used the same names.  Besides causing problems on
platforms that do not allow these functions to be cleanly replaced, this
also meant that the system versions could not be called in programs that
used Perl's malloc.  Previous versions of Perl have allowed this behaviour
to be suppressed with the HIDEMYMALLOC and EMBEDMYMALLOC preprocessor
definitions.
d3389 4
a3392 5
As of release 5.6.0, Perl's malloc family of functions have default names
distinct from the system versions.  You need to explicitly compile perl with
C<-DPERL_POLLUTE_MALLOC> to get the older behaviour.  HIDEMYMALLOC
and EMBEDMYMALLOC have no effect, since the behaviour they enabled is now
the default.
d3394 6
a3399 2
Note that these functions do B<not> constitute Perl's memory allocation API.
See L<perlguts/"Memory Allocation"> for further information about that.
d3401 1
a3401 1
=back
d3403 1
a3403 1
=head2 Compatible C Source API Changes
d3405 8
a3412 1
=over 4
d3414 3
a3416 1
=item C<PATCHLEVEL> is now C<PERL_VERSION>
d3418 2
a3419 5
The cpp macros C<PERL_REVISION>, C<PERL_VERSION>, and C<PERL_SUBVERSION>
are now available by default from perl.h, and reflect the base revision,
patchlevel, and subversion respectively.  C<PERL_REVISION> had no
prior equivalent, while C<PERL_VERSION> and C<PERL_SUBVERSION> were
previously available as C<PATCHLEVEL> and C<SUBVERSION>.
d3421 3
a3423 5
The new names cause less pollution of the B<cpp> namespace and reflect what
the numbers have come to stand for in common practice.  For compatibility,
the old names are still supported when F<patchlevel.h> is explicitly
included (as required before), so there is no source incompatibility
from the change.
d3425 1
a3425 1
=back
d3427 2
a3428 1
=head2 Binary Incompatibilities
d3430 1
a3430 6
In general, the default build of this release is expected to be binary
compatible for extensions built with the 5.005 release or its maintenance
versions.  However, specific platforms may have broken binary compatibility
due to changes in the defaults used in hints files.  Therefore, please be
sure to always check the platform-specific README files for any notes to
the contrary.
d3432 6
a3437 2
The usethreads or usemultiplicity builds are B<not> binary compatible
with the corresponding builds in 5.005.
d3439 1
a3439 5
On platforms that require an explicit list of exports (AIX, OS/2 and Windows,
among others), purely internal symbols such as parser functions and the
run time opcodes are not exported by default.  Perl 5.005 used to export
all functions irrespective of whether they were considered part of the
public API or not.
d3441 4
a3444 1
For the full list of public API functions, see L<perlapi>.
d3446 2
a3447 1
=head1 Known Problems
d3449 1
a3449 1
=head2 Localizing a tied hash element may leak memory
d3451 1
a3451 2
As of the 5.6.1 release, there is a known leak when code such as this
is executed:
d3453 4
a3456 2
    use Tie::Hash;
    tie my %tie_hash => 'Tie::StdHash';
d3458 1
a3458 1
    ...
d3460 2
a3461 1
    local($tie_hash{Foo}) = 1; # leaks
d3463 1
a3463 1
=head2 Known test failures
d3465 1
a3465 1
=over
d3467 1
a3467 1
=item 64-bit builds
d3469 3
a3471 2
Subtest #15 of lib/b.t may fail under 64-bit builds on platforms such
as HP-UX PA64 and Linux IA64.  The issue is still being investigated.
d3473 2
a3474 5
The lib/io_multihomed test may hang in HP-UX if Perl has been
configured to be 64-bit.  Because other 64-bit platforms do not
hang in this test, HP-UX is suspect.  All other tests pass
in 64-bit HP-UX.  The test attempts to create and connect to
"multihomed" sockets (sockets which have multiple IP addresses).
d3476 4
a3479 1
Note that 64-bit support is still experimental.
d3481 3
a3483 1
=item Failure of Thread tests
d3485 3
a3487 4
The subtests 19 and 20 of lib/thr5005.t test are known to fail due to
fundamental problems in the 5.005 threading implementation.  These are
not new failures--Perl 5.005_0x has the same bugs, but didn't have these
tests.  (Note that support for 5.005-style threading remains experimental.)
d3489 4
a3492 1
=item NEXTSTEP 3.3 POSIX test failure
d3494 1
a3494 4
In NEXTSTEP 3.3p2 the implementation of the strftime(3) in the
operating system libraries is buggy: the %j format numbers the days of
a month starting from zero, which, while being logical to programmers,
will cause the subtests 19 to 27 of the lib/posix test may fail.
d3496 2
a3497 1
=item Tru64 (aka Digital UNIX, aka DEC OSF/1) lib/sdbm test failure with gcc
d3499 3
a3501 3
If compiled with gcc 2.95 the lib/sdbm test will fail (dump core).
The cure is to use the vendor cc, it comes with the operating system
and produces good code.
d3503 5
a3507 1
=back
d3509 2
a3510 1
=head2 EBCDIC platforms not fully supported
d3512 4
a3515 4
In earlier releases of Perl, EBCDIC environments like OS390 (also
known as Open Edition MVS) and VM-ESA were supported.  Due to changes
required by the UTF-8 (Unicode) support, the EBCDIC platforms are not
supported in Perl 5.6.0.
d3517 1
a3517 2
The 5.6.1 release improves support for EBCDIC platforms, but they
are not fully supported yet.
d3519 2
a3520 1
=head2 UNICOS/mk CC failures during Configure run
d3522 6
a3527 1
In UNICOS/mk the following errors may appear during the Configure run:
d3529 1
a3529 6
	Guessing which symbols your C compiler and preprocessor define...
	CC-20 cc: ERROR File = try.c, Line = 3
	...
	  bad switch yylook 79bad switch yylook 79bad switch yylook 79bad switch yylook 79#ifdef A29K
	...
	4 errors detected in the compilation of "try.c".
d3531 2
a3532 4
The culprit is the broken awk of UNICOS/mk.  The effect is fortunately
rather mild: Perl itself is not adversely affected by the error, only
the h2ph utility coming with Perl, and that is rather rarely needed
these days.
d3534 2
a3535 1
=head2 Arrow operator and arrays
d3537 5
a3541 3
When the left argument to the arrow operator C<< -> >> is an array, or
the C<scalar> operator operating on an array, the result of the
operation must be considered erroneous. For example:
d3543 1
a3543 2
    @@x->[2]
    scalar(@@x)->[2]
d3545 3
a3547 2
These expressions will get run-time errors in some future release of
Perl.
d3549 1
a3549 1
=head2 Experimental features
d3551 2
a3552 4
As discussed above, many features are still experimental.  Interfaces and
implementation of these features are subject to change, and in extreme cases,
even subject to removal in some future release of Perl.  These features
include the following:
d3554 2
a3555 1
=over 4
d3557 1
a3557 1
=item Threads
d3559 1
a3559 1
=item Unicode
d3561 11
a3571 1
=item 64-bit support
d3573 4
a3576 1
=item Lvalue subroutines
d3578 1
a3578 1
=item Weak references
d3580 1
a3580 1
=item The pseudo-hash data type
d3582 1
a3582 1
=item The Compiler suite
d3584 1
a3584 1
=item Internal implementation of file globbing
d3586 1
a3586 1
=item The DB module
d3588 1
a3588 1
=item The regular expression code constructs: 
d3590 1
a3590 1
C<(?{ code })> and C<(??{ code })>
d3592 1
a3592 1
=back
d3594 2
a3595 1
=head1 Obsolete Diagnostics
d3597 2
a3598 1
=over 4
d3600 2
a3601 1
=item Character class syntax [: :] is reserved for future extensions
d3603 7
a3609 5
(W) Within regular expression character classes ([]) the syntax beginning
with "[:" and ending with ":]" is reserved for future extensions.
If you need to represent those character sequences inside a regular
expression character class, just quote the square brackets with the
backslash: "\[:" and ":\]".
d3611 1
a3611 1
=item Ill-formed logical name |%s| in prime_env_iter
d3613 5
a3617 6
(W) A warning peculiar to VMS.  A logical name was encountered when preparing
to iterate over %ENV which violates the syntactic rules governing logical
names.  Because it cannot be translated normally, it is skipped, and will not
appear in %ENV.  This may be a benign occurrence, as some software packages
might directly modify logical name tables and introduce nonstandard names,
or it may indicate that a logical name table has been corrupted.
d3619 1
a3619 1
=item In string, @@%s now must be written as \@@%s
d3621 1
a3621 1
The description of this error used to say:
d3623 1
a3623 2
        (Someday it will simply assume that an unbackslashed @@
         interpolates an array.)
d3625 1
a3625 4
That day has come, and this fatal error has been removed.  It has been
replaced by a non-fatal warning instead.
See L</Arrays now always interpolate into double-quoted strings> for
details.
d3627 3
a3629 1
=item Probable precedence problem on %s
d3631 1
a3631 3
(W) The compiler found a bareword where it expected a conditional,
which often indicates that an || or && was parsed as part of the
last argument of the previous construct, for example:
d3633 3
a3635 1
    open FOO || die;
d3637 1
a3637 1
=item regexp too big
d3639 2
a3640 5
(F) The current implementation of regular expressions uses shorts as
address offsets within a string.  Unfortunately this means that if
the regular expression compiles to longer than 32767, it'll blow up.
Usually when you want a regular expression this big, there is a better
way to do it with multiple statements.  See L<perlre>.
d3642 1
a3642 1
=item Use of "$$<digit>" to mean "${$}<digit>" is deprecated
d3644 1
a3644 3
(D) Perl versions before 5.004 misinterpreted any type marker followed
by "$" and a digit.  For example, "$$0" was incorrectly taken to mean
"${$}0" instead of "${$0}".  This bug is (mostly) fixed in Perl 5.004.
d3646 1
a3646 5
However, the developers of Perl 5.004 could not fix this bug completely,
because at least two widely-used modules depend on the old meaning of
"$$0" in a string.  So Perl 5.004 still interprets "$$<digit>" in the
old (broken) way inside strings; but it generates this message as a
warning.  And in Perl 5.005, this special treatment will cease.
d3648 59
a3706 1
=back
d3710 4
a3713 4
If you find what you think is a bug, you might check the
articles recently posted to the comp.lang.perl.misc newsgroup.
There may also be information at http://www.perl.com/, the Perl
Home Page.
d3733 1
a3733 4
Written by Gurusamy Sarathy <F<gsar@@ActiveState.com>>, with many
contributions from The Perl Porters.

Send omissions or corrections to <F<perlbug@@perl.org>>.
@


1.3
log
@perl-5.6.0 + local changes
@
text
@d3 1
a3 1
perldelta - what's new for perl v5.6.0
d7 2
a8 1
This document describes differences between the 5.005 release and this one.
d10 595
d609 1
a609 1
Perl 5.005_63 introduces the beginnings of support for running multiple
d675 1
a675 1
with a unicode smiley face at the end.
d690 1
a690 1
readable way to construct (possibly unicode) strings instead of
d974 1
a974 1
=item Support for CHECK blocks
d987 1
a987 1
=item Better pseudo-random number generator
d1008 1
a1008 1
=item Better worst-case behavior of hashes
d1105 1
a1105 1
it.  The array element at that position returns to its unintialized
d1231 1
a1231 1
=item More consistent close-on-exec behavior
d1292 1
a1292 1
=item More functional bareword prototype (*)
d1359 31
d1410 1
a1410 1
    generated code may not be correct, even it manages to execute
d1637 1
a1637 1
    B<This program> will read the given input file(s) and do someting
d1669 1
a1669 1
still set for backwards compatability.
d2039 1
a2039 1
=item delete(), each(), values() and hash iteration are faster
d2148 7
a2162 8
VM/ESA is now supported.

=item *

Siemens BS2000 is now supported under the POSIX Shell.

=item *

d2176 1
a2176 1
EPOC is is now supported (on Psion 5).
d2219 1
a2219 1
installation process to accomodate core changes and VMS-specific options.
d2332 1
a2332 1
Some "errors" encountered at compile time were by neccessity 
d2440 1
a2440 1
is used.
d2442 2
a2443 1
See L<CHECK blocks> for how to run things when the compile phase ends.
d2785 1
a2785 1
used to spearate keys from values.  The element is ignored.
d2936 14
d2957 1
a2957 1
(W deprecated) You have written somehing like this:
d3174 1
a3174 1
=head2 Format of $English::PERL_VERSION is different
d3236 1
a3236 1
=item delete(), values() and C<\(%h)> operate on aliases to values, not copies
d3238 4
a3241 1
delete(), each(), values() and hashes in a list context return the actual
d3302 1
a3302 1
=head2 Semantics of bit operators may have changed on 64-bit platforms
d3316 1
a3316 1
=head2 More builtins taint their results
d3391 1
a3391 1
=over
d3431 11
a3441 1
=head2 Thread test failures
d3443 1
a3443 4
The subtests 19 and 20 of lib/thr5005.t test are known to fail due to
fundamental problems in the 5.005 threading implementation.  These are
not new failures--Perl 5.005_0x has the same bugs, but didn't have these
tests.
d3445 1
a3445 1
=head2 EBCDIC platforms not supported
d3447 1
a3447 4
In earlier releases of Perl, EBCDIC environments like OS390 (also
known as Open Edition MVS) and VM-ESA were supported.  Due to changes
required by the UTF-8 (Unicode) support, the EBCDIC platforms are not
supported in Perl 5.6.0.
d3449 2
a3450 1
=head2 In 64-bit HP-UX the lib/io_multihomed test may hang
d3458 10
a3467 1
=head2 NEXTSTEP 3.3 POSIX test failure
d3474 1
a3474 1
=head2 Tru64 (aka Digital UNIX, aka DEC OSF/1) lib/sdbm test failure with gcc
d3480 12
a3519 5
=head2 Windows 2000

Windows 2000 is known to fail test 22 in lib/open3.t (cause unknown at
this time).  That test passes under Windows NT.

d3547 3
a3549 1
=item The regular expression constructs C<(?{ code })> and C<(??{ code })>
d3574 12
d3620 1
a3620 1
There may also be information at http://www.perl.com/perl/, the Perl
d3626 1
a3626 1
output of C<perl -V>, will be sent off to perlbug@@perl.com to be
d3641 1
a3641 1
Written by Gurusamy Sarathy <F<gsar@@activestate.com>>, with many
d3644 1
a3644 1
Send omissions or corrections to <F<perlbug@@perl.com>>.
@


1.2
log
@perl5.005_03 (stock)
@
text
@d3 1
a3 1
perldelta - what's new for perl5.005
d7 1
a7 1
This document describes differences between the 5.004 release and this one.
d9 1
a9 1
=head1 About the new versioning system
d11 1
a11 7
Perl is now developed on two tracks: a maintenance track that makes
small, safe updates to released production versions with emphasis on
compatibility; and a development track that pursues more aggressive
evolution.  Maintenance releases (which should be considered production
quality) have subversion numbers that run from C<1> to C<49>, and
development releases (which should be considered "alpha" quality) run
from C<50> to C<99>.
d13 167
a179 2
Perl 5.005 is the combined product of the new dual-track development
scheme.
a180 1
=head1 Incompatible Changes
d182 2
a183 1
=head2 WARNING:  This version is not binary compatible with Perl 5.004.
d185 2
a186 6
Starting with Perl 5.004_50 there were many deep and far-reaching changes
to the language internals.  If you have dynamically loaded extensions
that you built under perl 5.003 or 5.004, you can continue to use them
with 5.004, but you will need to rebuild and reinstall those extensions
to use them 5.005.  See L<INSTALL> for detailed instructions on how to
upgrade.
d188 1
a188 1
=head2 Default installation structure has changed
d190 15
a204 3
The new Configure defaults are designed to allow a smooth upgrade from
5.004 to 5.005, but you should read L<INSTALL> for a detailed
discussion of the changes in order to adapt them to your system.
d206 5
a210 1
=head2 Perl Source Compatibility
d212 1
a212 2
When none of the experimental features are enabled, there should be
very few user-visible Perl source compatibility issues.
d214 4
a217 6
If threads are enabled, then some caveats apply. C<@@_> and C<$_> become
lexical variables.  The effect of this should be largely transparent to
the user, but there are some boundary conditions under which user will
need to be aware of the issues.  For example, C<local(@@_)> results in
a "Can't localize lexical variable @@_ ..." message.  This may be enabled
in a future version.
d219 1
a219 3
Some new keywords have been introduced.  These are generally expected to
have very little impact on compatibility.  See L<New C<INIT> keyword>,
L<New C<lock> keyword>, and L<New C<qr//> operator>.
d221 1
a221 3
Certain barewords are now reserved.  Use of these will provoke a warning
if you have asked for them with the C<-w> switch.
See L<C<our> is now a reserved word>.
d223 3
a225 1
=head2 C Source Compatibility
d227 1
a227 2
There have been a large number of changes in the internals to support
the new features in this release.
d231 3
a233 1
=item Core sources now require ANSI C compiler
d235 1
a235 1
An ANSI C compiler is now B<required> to build perl.  See F<INSTALL>.
d237 1
a237 1
=item All Perl global variables must now be referenced with an explicit prefix
d239 1
a239 6
All Perl global variables that are visible for use by extensions now
have a C<PL_> prefix.  New extensions should C<not> refer to perl globals
by their unqualified names.  To preserve sanity, we provide limited
backward compatibility for globals that are being widely used like
C<sv_undef> and C<na> (which should now be written as C<PL_sv_undef>,
C<PL_na> etc.)
d241 1
a241 3
If you find that your XS extension does not compile anymore because a
perl global is not visible, try adding a C<PL_> prefix to the global
and rebuild.
d243 1
a243 4
It is strongly recommended that all functions in the Perl API that don't
begin with C<perl> be referenced with a C<Perl_> prefix.  The bare function
names without the C<Perl_> prefix are supported with macros, but this
support may cease in a future release.
d245 1
a245 1
See L<perlguts/"API LISTING">.
d247 1
a247 1
=item Enabling threads has source compatibility issues
d249 1
a249 5
Perl built with threading enabled requires extensions to use the new
C<dTHR> macro to initialize the handle to access per-thread data.
If you see a compiler error that talks about the variable C<thr> not
being declared (when building a module that has XS code),  you need
to add C<dTHR;> at the beginning of the block that elicited the error.
d251 1
a251 4
The API function C<perl_get_sv("@@",FALSE)> should be used instead of
directly accessing perl globals as C<GvSV(errgv)>.  The API call is
backward compatible with existing perls and provides source compatibility
with threading is enabled.
d253 11
a263 1
See L<"C Source Compatibility"> for more information.
d267 2
a268 1
=head2 Binary Compatibility
d270 2
a271 7
This version is NOT binary compatible with older versions.  All extensions
will need to be recompiled.  Further binaries built with threads enabled
are incompatible with binaries built without.  This should largely be
transparent to the user, as all binary incompatible configurations have
their own unique architecture name, and extension binaries get installed at
unique locations.  This allows coexistence of several configurations in
the same directory hierarchy.  See F<INSTALL>.
d273 4
a276 1
=head2 Security fixes may affect compatibility
d278 7
a284 5
A few taint leaks and taint omissions have been corrected.  This may lead
to "failure" of scripts that used to work with older versions.  Compiling
with -DINCOMPLETE_TAINTS provides a perl with minimal amounts of changes
to the tainting behavior.  But note that the resulting perl will have
known insecurities.
d286 6
a291 1
Oneliners with the C<-e> switch do not create temporary files anymore.
d293 2
a294 1
=head2 Relaxed new mandatory warnings introduced in 5.004
d296 6
a301 3
Many new warnings that were introduced in 5.004 have been made
optional.  Some of these warnings are still present, but perl's new
features make them less often a problem.  See L<New Diagnostics>.
d303 4
a306 1
=head2 Licensing
d308 1
a308 1
Perl has a new Social Contract for contributors.  See F<Porting/Contract>.
d310 3
a312 7
The license included in much of the Perl documentation has changed.
Most of the Perl documentation was previously under the implicit GNU
General Public License or the Artistic License (at the user's choice).
Now much of the documentation unambigously states the terms under which
it may be distributed.  Those terms are in general much less restrictive
than the GNU GPL.  See L<perl> and the individual perl man pages listed
therein.
d314 2
a315 1
=head1 Core Changes
d317 3
d321 2
a322 1
=head2 Threads
d324 5
a328 3
WARNING: Threading is considered an B<experimental> feature.  Details of the
implementation may change without notice.  There are known limitations
and some bugs.  These are expected to be fixed in future versions.
d330 3
a332 1
See L<README.threads>.
d334 7
a340 2
Mach cthreads (NEXTSTEP, OPENSTEP, Rhapsody) are now supported by
the Thread extension.
d342 1
a342 1
=head2 Compiler
d344 4
a347 4
WARNING: The Compiler and related tools are considered B<experimental>.
Features may change without notice, and there are known limitations
and bugs.  Since the compiler is fully external to perl, the default
configuration will build and install it.
d349 1
a349 11
The Compiler produces three different types of transformations of a
perl program.  The C backend generates C code that captures perl's state
just before execution begins.  It eliminates the compile-time overheads
of the regular perl interpreter, but the run-time performance remains
comparatively the same.  The CC backend generates optimized C code
equivalent to the code path at run-time.  The CC backend has greater
potential for big optimizations, but only a few optimizations are
implemented currently.  The Bytecode backend generates a platform
independent bytecode representation of the interpreter's state
just before execution.  Thus, the Bytecode back end also eliminates
much of the compilation overhead of the interpreter.
d351 2
a352 1
The compiler comes with several valuable utilities.
d354 1
a354 2
C<B::Lint> is an experimental module to detect and warn about suspicious
code, especially the cases that the C<-w> switch does not detect.
d356 3
a358 2
C<B::Deparse> can be used to demystify perl code, and understand
how perl optimizes certain constructs.
d360 3
a362 2
C<B::Xref> generates cross reference reports of all definition and use
of variables, subroutines and formats in a program.
d364 1
a364 2
C<B::Showlex> show the lexical variables used by a subroutine or file
at a glance.
d366 2
a367 1
C<perlcc> is a simple frontend for compiling perl.
d369 1
a369 1
See C<ext/B/README>, L<B>, and the respective compiler modules.
d371 3
a373 1
=head2 Regular Expressions
d375 2
a376 2
Perl's regular expression engine has been seriously overhauled, and
many new constructs are supported.  Several bugs have been fixed.
d378 1
a378 1
Here is an itemized summary:
d380 5
a384 1
=over 4
d386 1
a386 1
=item Many new and improved optimizations
d388 2
a389 1
Changes in the RE engine:
d391 1
a391 7
	Unneeded nodes removed;
	Substrings merged together;
	New types of nodes to process (SUBEXPR)* and similar expressions
	    quickly, used if the SUBEXPR has no side effects and matches
	    strings of the same length;
	Better optimizations by lookup for constant substrings;
	Better search for constants substrings anchored by $ ;
d393 3
a395 1
Changes in Perl code using RE engine:
d397 1
a397 5
	More optimizations to s/longer/short/;
	study() was not working;
	/blah/ may be optimized to an analogue of index() if $& $` $' not seen;
	Unneeded copying of matched-against string removed;
	Only matched part of the string is copying if $` $' were not seen;
d399 1
a399 1
=item Many bug fixes
d401 4
a404 1
Note that only the major bug fixes are listed here.  See F<Changes> for others.
d406 1
a406 10
	Backtracking might not restore start of $3.
	No feedback if max count for * or + on "complex" subexpression
	    was reached, similarly (but at compile time) for {3,34567}
	Primitive restrictions on max count introduced to decrease a 
	    possibility of a segfault;
	(ZERO-LENGTH)* could segfault;
	(ZERO-LENGTH)* was prohibited;
	Long REs were not allowed;
	/RE/g could skip matches at the same position after a 
	  zero-length match;
d408 1
a408 1
=item New regular expression constructs
d410 1
a410 1
The following new syntax elements are supported:
d412 1
a412 8
	(?<=RE)
	(?<!RE)
	(?{ CODE })
	(?i-x)
	(?i:RE)
	(?(COND)YES_RE|NO_RE)
	(?>RE)
	\z
d414 4
a417 1
=item New operator for precompiled regular expressions
d419 1
a419 1
See L<New C<qr//> operator>.
d421 2
a422 1
=item Other improvements
d424 1
a424 7
	Better debugging output (possibly with colors),
            even from non-debugging Perl;
	RE engine code now looks like C, not like assembler;
	Behaviour of RE modifiable by `use re' directive;
	Improved documentation;
	Test suite significantly extended;
	Syntax [:^upper:] etc., reserved inside character classes;
d426 2
a427 1
=item Incompatible changes
d429 1
a429 4
	(?i) localized inside enclosing group;
	$( is not interpolated into RE any more;
	/RE/g may match at the same position (with non-zero length)
	    after a zero-length match (bug fix).
d431 2
a432 1
=back
d434 1
a434 1
See L<perlre> and L<perlop>.
d436 3
a438 1
=head2   Improved malloc()
d440 1
a440 1
See banner at the beginning of C<malloc.c> for details.
d442 5
a446 1
=head2 Quicksort is internally implemented
d448 4
a451 6
Perl now contains its own highly optimized qsort() routine.  The new qsort()
is resistant to inconsistent comparison functions, so Perl's C<sort()> will
not provoke coredumps any more when given poorly written sort subroutines.
(Some C library C<qsort()>s that were being used before used to have this
problem.)  In our testing, the new C<qsort()> required the minimal number
of pair-wise compares on average, among all known C<qsort()> implementations.
d453 5
a457 1
See C<perlfunc/sort>.
d459 2
a460 1
=head2 Reliable signals
d462 1
a462 3
Perl's signal handling is susceptible to random crashes, because signals
arrive asynchronously, and the Perl runtime is not reentrant at arbitrary
times.
d464 1
a464 3
However, one experimental implementation of reliable signals is available
when threads are enabled.  See C<Thread::Signal>.  Also see F<INSTALL> for
how to build a Perl capable of threads.
d466 2
a467 1
=head2 Reliable stack pointers
d469 2
a470 5
The internals now reallocate the perl stack only at predictable times.
In particular, magic calls never trigger reallocations of the stack,
because all reentrancy of the runtime is handled using a "stack of stacks".
This should improve reliability of cached stack pointers in the internals
and in XSUBs.
d472 1
a472 1
=head2 More generous treatment of carriage returns
d474 2
a475 9
Perl used to complain if it encountered literal carriage returns in
scripts.  Now they are mostly treated like whitespace within program text.
Inside string literals and here documents, literal carriage returns are
ignored if they occur paired with linefeeds, or get interpreted as whitespace
if they stand alone.  This behavior means that literal carriage returns
in files should be avoided.  You can get the older, more compatible (but
less generous) behavior by defining the preprocessor symbol
C<PERL_STRICT_CR> when building perl.  Of course, all this has nothing
whatever to do with how escapes like C<\r> are handled within strings.
d477 1
a477 4
Note that this doesn't somehow magically allow you to keep all text files
in DOS format.  The generous treatment only applies to files that perl
itself parses.  If your C compiler doesn't allow carriage returns in
files, you may still be unable to build modules that need a C compiler.
d479 1
a479 1
=head2 Memory leaks
d481 6
a486 3
C<substr>, C<pos> and C<vec> don't leak memory anymore when used in lvalue
context.  Many small leaks that impacted applications that embed multiple
interpreters have been fixed.
d488 1
a488 1
=head2 Better support for multiple interpreters
d490 1
a490 4
The build-time option C<-DMULTIPLICITY> has had many of the details
reworked.  Some previously global variables that should have been
per-interpreter now are.  With care, this allows interpreters to call
each other.  See the C<PerlInterp> extension on CPAN.
d492 1
a492 1
=head2 Behavior of local() on array and hash elements is now well-defined
d494 3
a496 1
See L<perlsub/"Temporary Values via local()">.
d498 1
a498 1
=head2 C<%!> is transparently tied to the L<Errno> module
d500 2
a501 1
See L<perlvar>, and L<Errno>.
d503 4
a506 1
=head2 Pseudo-hashes are supported
d508 7
a514 1
See L<perlref>.
d516 1
a516 1
=head2 C<EXPR foreach EXPR> is supported
d518 1
a518 1
See L<perlsyn>.
d520 3
a522 1
=head2 Keywords can be globally overridden
d524 2
a525 1
See L<perlsub>.
d527 3
a529 1
=head2 C<$^E> is meaningful on Win32
d531 2
a532 1
See L<perlvar>.
d534 1
a534 1
=head2 C<foreach (1..1000000)> optimized
d536 2
a537 2
C<foreach (1..1000000)> is now optimized into a counting loop.  It does
not try to allocate a 1000000-size list anymore.
d539 3
a541 1
=head2 C<Foo::> can be used as implicitly quoted package name
d543 1
a543 6
Barewords caused unintuitive behavior when a subroutine with the same
name as a package happened to be defined.  Thus, C<new Foo @@args>,
use the result of the call to C<Foo()> instead of C<Foo> being treated
as a literal.  The recommended way to write barewords in the indirect
object slot is C<new Foo:: @@args>.  Note that the method C<new()> is
called with a first argument of C<Foo>, not C<Foo::> when you do that.
d545 4
a548 1
=head2 C<exists $Foo::{Bar::}> tests existence of a package
d550 2
a551 3
It was impossible to test for the existence of a package without
actually creating it before.  Now C<exists $Foo::{Bar::}> can be
used to test if the C<Foo::Bar> namespace has been created.
d553 1
a553 1
=head2 Better locale support
d555 4
a558 1
See L<perllocale>.
d560 1
a560 1
=head2 Experimental support for 64-bit platforms
d562 6
a567 9
Perl5 has always had 64-bit support on systems with 64-bit longs.
Starting with 5.005, the beginnings of experimental support for systems
with 32-bit long and 64-bit 'long long' integers has been added.
If you add -DUSE_LONG_LONG to your ccflags in config.sh (or manually
define it in perl.h) then perl will be built with 'long long' support.
There will be many compiler warnings, and the resultant perl may not
work on all systems.  There are many other issues related to
third-party extensions and libraries.  This option exists to allow
people to work on those issues.
d569 1
a569 1
=head2 prototype() returns useful results on builtins
d571 3
a573 1
See L<perlfunc/prototype>.
d575 1
a575 1
=head2 Extended support for exception handling
d577 4
a580 3
C<die()> now accepts a reference value, and C<$@@> gets set to that
value in exception traps.  This makes it possible to propagate
exception objects.  This is an undocumented B<experimental> feature.
d582 1
a582 1
=head2 Re-blessing in DESTROY() supported for chaining DESTROY() methods
d584 2
a585 1
See L<perlobj/Destructors>.
d587 1
a587 1
=head2 All C<printf> format conversions are handled internally
d589 4
a592 1
See L<perlfunc/printf>.
d594 3
a596 1
=head2 New C<INIT> keyword
d598 1
a598 3
C<INIT> subs are like C<BEGIN> and C<END>, but they get run just before
the perl runtime begins execution.  e.g., the Perl Compiler makes use of
C<INIT> blocks to initialize and resolve pointers to XSUBs.
d600 2
a601 1
=head2 New C<lock> keyword
d603 2
a604 2
The C<lock> keyword is the fundamental synchronization primitive
in threaded perl.  When threads are not enabled, it is currently a noop.
d606 2
a607 3
To minimize impact on source compatibility this keyword is "weak", i.e., any
user-defined subroutine of the same name overrides it, unless a C<use Thread>
has been seen.
d609 2
a610 1
=head2 New C<qr//> operator
d612 3
a614 4
The C<qr//> operator, which is syntactically similar to the other quote-like
operators, is used to create precompiled regular expressions.  This compiled
form can now be explicitly passed around in variables, and interpolated in
other regular expressions.  See L<perlop>.
d616 2
a617 1
=head2 C<our> is now a reserved word
d619 2
a620 2
Calling a subroutine with the name C<our> will now provoke a warning when
using the C<-w> switch.
d622 4
a625 1
=head2 Tied arrays are now fully supported
d627 1
a627 1
See L<Tie::Array>.
d629 1
a629 1
=head2 Tied handles support is better
d631 3
a633 2
Several missing hooks have been added.  There is also a new base class for
TIEARRAY implementations.  See L<Tie::Array>.
d635 1
a635 1
=head2 4th argument to substr
d637 7
a643 2
substr() can now both return and replace in one operation.  The optional
4th argument is the replacement string.  See L<perlfunc/substr>.
d645 1
a645 1
=head2 Negative LENGTH argument to splice
d647 1
a647 3
splice() with a negative LENGTH argument now work similar to what the
LENGTH did for substr().  Previously a negative LENGTH was treated as
0.  See L<perlfunc/splice>.
d649 1
a649 1
=head2 Magic lvalues are now more magical
d651 1
a651 10
When you say something like C<substr($x, 5) = "hi">, the scalar returned
by substr() is special, in that any modifications to it affect $x.
(This is called a 'magic lvalue' because an 'lvalue' is something on
the left side of an assignment.)  Normally, this is exactly what you
would expect to happen, but Perl uses the same magic if you use substr(),
pos(), or vec() in a context where they might be modified, like taking
a reference with C<\> or as an argument to a sub that modifies C<@@_>.
In previous versions, this 'magic' only went one way, but now changes
to the scalar the magic refers to ($x in the above example) affect the
magic lvalue too. For instance, this code now acts differently:
d653 3
a655 6
    $x = "hello";
    sub printit {
	$x = "g'bye";
	print $_[0], "\n";
    }
    printit(substr($x, 0, 5));
d657 3
a659 1
In previous versions, this would print "hello", but it now prints "g'bye".
d661 4
a664 1
=head2 E<lt>E<gt> now reads in records
d666 3
a668 3
If C<$/> is a referenence to an integer, or a scalar that holds an integer,
E<lt>E<gt> will read in records instead of lines. For more info, see
L<perlvar/$/>.
d670 1
a670 1
=head2 pack() format 'Z' supported
d672 1
a672 2
The new format type 'Z' is useful for packing and unpacking null-terminated
strings.  See L<perlfunc/"pack">.
d674 7
a680 1
=head1 Significant bug fixes
d682 1
a682 1
=head2 E<lt>HANDLEE<gt> on empty files
d684 2
a685 3
With C<$/> set to C<undef>, slurping an empty file returns a string of
zero length (instead of C<undef>, as it used to) for the first time the
HANDLE is read.  Subsequent reads yield C<undef>.
d687 3
a689 2
This means that the following will append "foo" to an empty file (it used
to not do anything before):
d691 4
a694 1
    perl -0777 -pi -e 's/^/foo/' empty_file
d696 1
a696 1
Note that the behavior of:
d698 3
a700 1
    perl -pi -e 's/^/foo/' empty_file
d702 3
a704 1
is unchanged (it continues to leave the file empty).
d706 1
a706 1
=head1 Supported Platforms
d708 6
a713 3
Configure has many incremental improvements.  Site-wide policy for building
perl can now be made persistent, via Policy.sh.  Configure also records
the command-line arguments used in F<config.sh>.
d715 1
a715 1
=head2 New Platforms
d717 6
a722 1
BeOS is now supported.  See L<README.beos>.
d724 5
a728 1
DOS is now supported under the DJGPP tools.  See L<README.dos>.
d730 6
a735 1
GNU/Hurd is now supported.
d737 1
a737 1
MiNT is now supported.  See L<README.mint>.
d739 5
a743 1
MPE/iX is now supported.  See L<README.mpeix>.
d745 1
a745 1
MVS (aka OS390, aka Open Edition) is now supported.  See L<README.os390>.
d747 3
a749 1
Stratus VOS is now supported.  See L<README.vos>.
d751 2
a752 1
=head2 Changes in existing support
d754 1
a754 3
Win32 support has been vastly enhanced.  Support for Perl Object, a C++
encapsulation of Perl.  GCC and EGCS are now supported on Win32.
See F<README.win32>, aka L<perlwin32>.
d756 3
a758 1
VMS configuration system has been rewritten.  See L<README.vms>.
d760 2
a761 1
The hints files for most Unix platforms have seen incremental improvements.
d765 1
a765 1
=head2 New Modules
d767 7
a773 1
=over
d777 71
a847 1
Perl compiler and tools.  See L<B>.
d851 27
a877 1
A module to pretty print Perl data.  See L<Data::Dumper>.
d881 54
a934 1
A module to dump perl values to the screen. See L<Dumpvalue>.
d936 1
a936 1
=item Errno
d938 3
a940 1
A module to look up errors more conveniently.  See L<Errno>.
d944 7
a950 1
A portable API for file operations.
d952 1
a952 1
=item ExtUtils::Installed
d954 2
a955 1
Query and manage installed modules.
d957 1
a957 1
=item ExtUtils::Packlist
d959 1
a959 1
Manipulate .packlist files.
d961 1
a961 1
=item Fatal
d963 1
a963 1
Make functions/builtins succeed or die.
d965 3
a967 1
=item IPC::SysV
d969 2
a970 2
Constants and other support infrastructure for System V IPC operations
in perl.
d972 7
a978 1
=item Test
d980 1
a980 1
A framework for writing testsuites.
d982 1
a982 1
=item Tie::Array
d984 1
a984 1
Base class for tied arrays.
d986 1
a986 1
=item Tie::Handle
d988 1
a988 1
Base class for tied handles.
d990 3
a992 1
=item Thread
d994 1
a994 1
Perl thread creation, manipulation, and support.
d996 1
a996 1
=item attrs
d998 1
a998 1
Set subroutine attributes.
d1000 1
a1000 1
=item fields
d1002 1
a1002 1
Compile-time class fields.
d1004 1
a1004 1
=item re
d1006 1
a1006 1
Various pragmata to control behavior of regular expressions.
d1008 11
a1018 1
=back
d1020 2
a1021 1
=head2 Changes in existing modules
d1023 1
a1023 1
=over
d1025 2
a1026 1
=item Benchmark
d1028 3
a1030 5
You can now run tests for I<n> seconds instead of guessing the right
number of tests to run: e.g. timethese(-5, ...) will run each of the
codes for at least 5 CPU seconds.  Zero as the "number of repetitions"
means "for at least 3 CPU seconds".  The output format has also
changed.  For example: 
d1032 2
a1033 1
use Benchmark;$x=3;timethese(-5,{a=>sub{$x*$x},b=>sub{$x**2}})
d1035 2
a1036 1
will now output something like this:
d1038 2
a1039 3
Benchmark: running a, b, each for at least 5 CPU seconds...
         a:  5 wallclock secs ( 5.77 usr +  0.00 sys =  5.77 CPU) @@ 200551.91/s (n=1156516)
         b:  4 wallclock secs ( 5.00 usr +  0.02 sys =  5.02 CPU) @@ 159605.18/s (n=800686)
d1041 2
a1042 2
New features: "each for at least N CPU seconds...", "wallclock secs",
and the "@@ operations/CPU second (n=operations)".
d1044 1
a1044 1
=item Carp
d1046 2
a1047 2
Carp has a new function cluck(). cluck() warns, like carp(), but also adds
a stack backtrace to the error message, like confess().
d1049 1
a1049 1
=item CGI
d1051 2
a1052 1
CGI has been updated to version 2.42.
d1054 1
a1054 1
=item Fcntl
d1056 2
a1057 5
More Fcntl constants added: F_SETLK64, F_SETLKW64, O_LARGEFILE for
large (more than 4G) file access (the 64-bit support is not yet
working, though, so no need to get overly excited), Free/Net/OpenBSD
locking behaviour flags F_FLOCK, F_POSIX, Linux F_SHLCK, and
O_ACCMODE: the mask of O_RDONLY, O_WRONLY, and O_RDWR.
d1061 1
a1061 1
The accessor methods Re, Im, arg, abs, rho, and theta, can now also
d1064 16
d1082 4
a1085 2
A little bit of radial trigonometry (cylindrical and spherical) added:
radial coordinate conversions and the great circle distance.
d1087 5
a1091 1
=item POSIX
d1093 3
a1095 1
POSIX now has its own platform-specific hints files.
d1097 17
a1113 1
=item DB_File
d1115 7
a1121 1
DB_File supports version 2.x of Berkeley DB.  See C<ext/DB_File/Changes>.
d1123 1
a1123 1
=item MakeMaker
d1125 5
a1129 4
MakeMaker now supports writing empty makefiles, provides a way to
specify that site umask() policy should be honored.  There is also
better support for manipulation of .packlist files, and getting
information about installed modules.
d1131 1
a1131 6
Extensions that have both architecture-dependent and
architecture-independent files are now always installed completely in
the architecture-dependent locations.  Previously, the shareable parts
were shared both across architectures and across perl versions and were
therefore liable to be overwritten with newer versions that might have
subtle incompatibilities.
d1133 6
a1138 1
=item CPAN
d1140 3
a1142 1
See <perlmodinstall> and L<CPAN>.
d1144 1
a1144 1
=item Cwd
d1146 1
a1146 1
Cwd::cwd is faster on most platforms.
d1148 7
a1154 1
=item Benchmark
d1156 4
a1159 1
Keeps better time.
d1161 1
a1161 1
=back
d1163 4
a1166 1
=head1 Utility Changes
d1168 3
a1170 1
C<h2ph> and related utilities have been vastly overhauled.
d1172 1
a1172 1
C<perlcc>, a new experimental front end for the compiler is available.
d1174 2
a1175 2
The crude GNU C<configure> emulator is now called C<configure.gnu> to
avoid trampling on C<Configure> under case-insensitive filesystems.
d1177 1
a1177 4
C<perldoc> used to be rather slow.  The slower features are now optional.
In particular, case-insensitive searches need the C<-i> switch, and
recursive searches need C<-r>.  You can set these switches in the
C<PERLDOC> environment variable to get the old behavior.
d1179 2
a1180 1
=head1 Documentation Changes
d1182 1
a1182 1
Config.pm now has a glossary of variables.
d1184 3
a1186 2
F<Porting/patching.pod> has detailed instructions on how to create and
submit patches for perl.
d1188 1
a1188 1
L<perlport> specifies guidelines on how to write portably. 
d1190 3
a1192 2
L<perlmodinstall> describes how to fetch and install modules from C<CPAN>
sites.
d1194 1
a1194 1
Some more Perl traps are documented now.  See L<perltrap>.
d1196 5
a1200 1
L<perlopentut> gives a tutorial on using open().
d1202 2
a1203 1
L<perlreftut> gives a tutorial on references.
d1205 2
a1206 1
L<perlthrtut> gives a tutorial on threads.
d1208 2
a1209 1
=head1 New Diagnostics
d1211 4
a1214 1
=over
d1216 1
a1216 1
=item Ambiguous call resolved as CORE::%s(), qualify as such or use &
d1218 2
a1219 4
(W) A subroutine you have declared has the same name as a Perl keyword,
and you have used the name without qualification for calling one or the
other.  Perl decided to call the builtin because the subroutine is
not imported.
d1221 1
a1221 4
To force interpretation as a subroutine call, either put an ampersand
before the subroutine name, or qualify the name with its package.
Alternatively, you can import the subroutine (or pretend that it's
imported with the C<use subs> pragma).
d1223 3
a1225 3
To silently interpret it as the Perl operator, use the C<CORE::> prefix
on the operator (e.g. C<CORE::log($x)>) or by declaring the subroutine
to be an object method (see L<attrs>).
d1227 4
a1230 1
=item Bad index while coercing array into hash
d1232 3
a1234 3
(F) The index looked up in the hash found as the 0'th element of a
pseudo-hash is not legal.  Index values must be at 1 or greater.
See L<perlref>.
d1236 1
a1236 1
=item Bareword "%s" refers to nonexistent package
d1238 1
a1238 3
(W) You used a qualified bareword of the form C<Foo::>, but
the compiler saw no other uses of that namespace before that point.
Perhaps you need to predeclare a package?
d1240 19
a1258 1
=item Can't call method "%s" on an undefined value
d1260 1
a1260 3
(F) You used the syntax of a method call, but the slot filled by the
object reference or package name contains an undefined value.
Something like this will reproduce the error:
d1262 1
a1262 3
    $BADREF = 42;
    process $BADREF 1,2,3;
    $BADREF->process(1,2,3);
d1264 2
a1265 1
=item Can't check filesystem of script "%s" for nosuid
d1267 1
a1267 1
(P) For some reason you can't check the filesystem of the script for nosuid.
d1269 3
a1271 1
=item Can't coerce array into hash
d1273 1
a1273 3
(F) You used an array where a hash was expected, but the array has no
information on how to map from keys to array indices.  You can do that
only with arrays that have a hash reference at index 0.
d1275 3
a1277 1
=item Can't goto subroutine from an eval-string
d1279 1
a1279 2
(F) The "goto subroutine" call can't be used to jump out of an eval "string".
(You can use it to jump out of an eval {BLOCK}, but you probably don't want to.)
d1281 3
a1283 1
=item Can't localize pseudo-hash element
d1285 1
a1285 4
(F) You said something like C<local $ar-E<gt>{'key'}>, where $ar is
a reference to a pseudo-hash.  That hasn't been implemented yet, but
you can get a similar effect by localizing the corresponding array
element directly -- C<local $ar-E<gt>[$ar-E<gt>[0]{'key'}]>.
d1287 1
a1287 1
=item Can't use %%! because Errno.pm is not available
d1289 4
a1292 3
(F) The first time the %! hash is used, perl automatically loads the
Errno.pm module. The Errno module is expected to tie the %! hash to
provide symbolic names for C<$!> errno values.
d1294 1
a1294 1
=item Cannot find an opnumber for "%s"
d1296 10
a1305 2
(F) A string of a form C<CORE::word> was given to prototype(), but
there is no builtin with the name C<word>.
d1307 1
a1307 1
=item Character class syntax [. .] is reserved for future extensions
d1309 2
a1310 5
(W) Within regular expression character classes ([]) the syntax beginning
with "[." and ending with ".]" is reserved for future extensions.
If you need to represent those character sequences inside a regular
expression character class, just quote the square brackets with the
backslash: "\[." and ".\]".
d1312 1
a1312 1
=item Character class syntax [: :] is reserved for future extensions
d1314 1
a1314 5
(W) Within regular expression character classes ([]) the syntax beginning
with "[:" and ending with ":]" is reserved for future extensions.
If you need to represent those character sequences inside a regular
expression character class, just quote the square brackets with the
backslash: "\[:" and ":\]".
d1316 1
a1316 1
=item Character class syntax [= =] is reserved for future extensions
d1318 1
a1318 5
(W) Within regular expression character classes ([]) the syntax
beginning with "[=" and ending with "=]" is reserved for future extensions.
If you need to represent those character sequences inside a regular
expression character class, just quote the square brackets with the
backslash: "\[=" and "=\]".
d1320 1
a1320 1
=item %s: Eval-group in insecure regular expression
d1322 1
a1322 3
(F) Perl detected tainted data when trying to compile a regular expression
that contains the C<(?{ ... })> zero-width assertion, which is unsafe.
See L<perlre/(?{ code })>, and L<perlsec>.
d1324 1
a1324 1
=item %s: Eval-group not allowed, use re 'eval'
d1326 1
a1326 3
(F) A regular expression contained the C<(?{ ... })> zero-width assertion,
but that construct is only allowed when the C<use re 'eval'> pragma is
in effect.  See L<perlre/(?{ code })>.
d1328 1
a1328 1
=item %s: Eval-group not allowed at run time
d1330 1
a1330 6
(F) Perl tried to compile a regular expression containing the C<(?{ ... })>
zero-width assertion at run time, as it would when the pattern contains
interpolated values.  Since that is a security risk, it is not allowed.
If you insist, you may still do this by explicitly building the pattern
from an interpolated string at run time and using that in an eval().
See L<perlre/(?{ code })>.
d1332 4
a1335 1
=item Explicit blessing to '' (assuming package main)
d1337 1
a1337 4
(W) You are blessing a reference to a zero length string.  This has
the effect of blessing the reference into the package main.  This is
usually not what you want.  Consider providing a default target
package, e.g. bless($ref, $p || 'MyPackage');
d1339 5
a1343 1
=item Illegal hex digit ignored
d1345 1
a1345 3
(W) You may have tried to use a character other than 0 - 9 or A - F in a
hexadecimal number.  Interpretation of the hexadecimal number stopped
before the illegal character.
d1347 1
a1347 1
=item No such array field
d1349 1
a1349 3
(F) You tried to access an array as a hash, but the field name used is
not defined.  The hash at index 0 should map all valid field names to
array indices for that to work.
d1351 1
a1351 1
=item No such field "%s" in variable %s of type %s
d1353 1
a1353 4
(F) You tried to access a field of a typed variable where the type
does not know about the field name.  The field names are looked up in
the %FIELDS hash in the type package at compile time.  The %FIELDS hash
is usually set up with the 'fields' pragma.
d1355 1
a1355 1
=item Out of memory during ridiculously large request
d1357 1
a1357 3
(F) You can't allocate more than 2^31+"small amount" bytes.  This error
is most likely to be caused by a typo in the Perl program. e.g., C<$arr[time]>
instead of C<$arr[$time]>.
d1359 2
a1360 1
=item Range iterator outside integer range
d1362 1
a1362 4
(F) One (or both) of the numeric arguments to the range operator ".."
are outside the range which can be represented by integers internally.
One possible workaround is to force Perl to use magical string
increment by prepending "0" to your numbers.
d1364 2
a1365 1
=item Recursive inheritance detected while looking for method '%s' in package '%s'
d1367 1
a1367 2
(F) More than 100 levels of inheritance were encountered while invoking a
method.  Probably indicates an unintended loop in your inheritance hierarchy.
d1369 1
a1369 1
=item Reference found where even-sized list expected
d1371 1
a1371 4
(W) You gave a single reference where Perl was expecting a list with
an even number of elements (for assignment to a hash). This
usually means that you used the anon hash constructor when you meant 
to use parens. In any case, a hash requires key/value B<pairs>.
d1373 1
a1373 4
    %hash = { one => 1, two => 2, };   # WRONG
    %hash = [ qw/ an anon array / ];   # WRONG
    %hash = ( one => 1, two => 2, );   # right
    %hash = qw( one 1 two 2 );                 # also fine
d1375 1
a1375 1
=item Undefined value assigned to typeglob
d1377 1
a1377 2
(W) An undefined value was assigned to a typeglob, a la C<*foo = undef>.
This does nothing.  It's possible that you really mean C<undef *foo>.
d1379 1
a1379 1
=item Use of reserved word "%s" is deprecated
d1381 1
a1381 6
(D) The indicated bareword is a reserved word.  Future versions of perl
may use it as a keyword, so you're better off either explicitly quoting
the word in a manner appropriate for its context of use, or using a
different name altogether.  The warning can be suppressed for subroutine
names by either adding a C<&> prefix, or using a package qualifier,
e.g. C<&our()>, or C<Foo::our()>.
d1383 1
a1383 1
=item perl: warning: Setting locale failed.
d1385 2
a1386 1
(S) The whole warning message will look something like:
d1388 1
a1388 6
       perl: warning: Setting locale failed.
       perl: warning: Please check that your locale settings:
               LC_ALL = "En_US",
               LANG = (unset)
           are supported and installed on your system.
       perl: warning: Falling back to the standard locale ("C").
d1390 1
a1390 9
Exactly what were the failed locale settings varies.  In the above the
settings were that the LC_ALL was "En_US" and the LANG had no value.
This error means that Perl detected that you and/or your system
administrator have set up the so-called variable system but Perl could
not use those settings.  This was not dead serious, fortunately: there
is a "default locale" called "C" that Perl can and will use, the
script will be run.  Before you really fix the problem, however, you
will get the same error message each time you run Perl.  How to really
fix the problem can be found in L<perllocale/"LOCALE PROBLEMS">.
d1394 1
d1396 40
a1435 1
=head1 Obsolete Diagnostics
d1437 2
a1438 1
=over
d1440 3
a1442 1
=item Can't mktemp()
d1444 2
a1445 2
(F) The mktemp() routine failed for some reason while trying to process
a B<-e> switch.  Maybe your /tmp partition is full, or clobbered.
d1447 4
a1450 1
Removed because B<-e> doesn't use temporary files any more.
d1452 1
a1452 1
=item Can't write to temp file for B<-e>: %s
d1454 8
a1461 2
(F) The write routine failed for some reason while trying to process
a B<-e> switch.  Maybe your /tmp partition is full, or clobbered.
d1463 1
a1463 1
Removed because B<-e> doesn't use temporary files any more.
d1465 3
a1467 1
=item Cannot open temporary file
d1469 1
a1469 2
(F) The create routine failed for some reason while trying to process
a B<-e> switch.  Maybe your /tmp partition is full, or clobbered.
d1471 2
a1472 1
Removed because B<-e> doesn't use temporary files any more.
d1474 1
a1474 1
=item regexp too big
d1476 3
a1478 5
(F) The current implementation of regular expressions uses shorts as
address offsets within a string.  Unfortunately this means that if
the regular expression compiles to longer than 32767, it'll blow up.
Usually when you want a regular expression this big, there is a better
way to do it with multiple statements.  See L<perlre>.
d1480 1
a1480 1
=back
d1482 1
a1482 1
=head1 Configuration Changes
d1489 1449
a2937 1
=head1 BUGS
d2939 2
a2940 2
If you find what you think is a bug, you might check the headers of
recently posted articles in the comp.lang.perl.misc newsgroup.
d2945 1
a2945 1
program included with your release.  Make sure you trim your bug down
d2947 1
a2947 1
output of C<perl -V>, will be sent off to <F<perlbug@@perl.com>> to be
d2962 2
a2963 2
Written by Gurusamy Sarathy <F<gsar@@umich.edu>>, with many contributions
from The Perl Porters.
@


1.1
log
@perl 5.004_04
@
text
@d3 1
a3 1
perldelta - what's new for perl5.004
d7 1
a7 9
This document describes differences between the 5.003 release (as
documented in I<Programming Perl>, second edition--the Camel Book) and
this one.

=head1 Supported Environments

Perl5.004 builds out of the box on Unix, Plan 9, LynxOS, VMS, OS/2,
QNX, AmigaOS, and Windows NT.  Perl runs on Windows 95 as well, but it
cannot be built there, for lack of a reasonable command interpreter.
d9 1
a9 1
=head1 Core Changes
d11 7
a17 2
Most importantly, many bugs were fixed, including several security
problems.  See the F<Changes> file in the distribution for details.
d19 2
a20 1
=head2 List assignment to %ENV works
d22 1
a22 2
C<%ENV = ()> and C<%ENV = @@list> now work as expected (except on VMS
where it generates a fatal error).
d24 1
a24 1
=head2 "Can't locate Foo.pm in @@INC" error now lists @@INC
d26 6
a31 1
=head2 Compilation option: Binary compatibility with 5.003
d33 1
a33 6
There is a new Configure question that asks if you want to maintain
binary compatibility with Perl 5.003.  If you choose binary
compatibility, you do not have to recompile your extensions, but you
might have symbol conflicts if you embed Perl in another application,
just as in the 5.003 release.  By default, binary compatibility
is preserved at the expense of symbol table pollution.
d35 3
a37 1
=head2 $PERL5OPT environment variable
d39 1
a39 5
You may now put Perl options in the $PERL5OPT environment variable.
Unless Perl is running with taint checks, it will interpret this
variable as if its contents had appeared on a "#!perl" line at the
beginning of your script, except that hyphens are optional.  PERL5OPT
may only be used to set the following switches: B<-[DIMUdmw]>.
d41 2
a42 1
=head2 Limitations on B<-M>, B<-m>, and B<-T> options
d44 6
a49 3
The C<-M> and C<-m> options are no longer allowed on the C<#!> line of
a script.  If a script needs a module, it should invoke it with the
C<use> pragma.
d51 3
a53 4
The B<-T> option is also forbidden on the C<#!> line of a script,
unless it was present on the Perl command line.  Due to the way C<#!>
works, this usually means that B<-T> must be in the first argument.
Thus:
d55 3
a57 1
    #!/usr/bin/perl -T -w
d59 1
a59 2
will probably work for an executable script invoked as C<scriptname>,
while:
d61 2
a62 1
    #!/usr/bin/perl -w -T
d64 1
a64 4
will probably fail under the same conditions.  (Non-Unix systems will
probably not follow this rule.)  But C<perl scriptname> is guaranteed
to fail, since then there is no chance of B<-T> being found on the
command line before it is found on the C<#!> line.
d66 1
a66 1
=head2 More precise warnings
d68 1
a68 5
If you removed the B<-w> option from your Perl 5.003 scripts because it
made Perl too verbose, we recommend that you try putting it back when
you upgrade to Perl 5.004.  Each new perl version tends to remove some
undesirable warnings, while adding new warnings that may catch bugs in
your scripts.
d70 1
a70 1
=head2 Deprecated: Inherited C<AUTOLOAD> for non-methods
d72 6
a77 4
Before Perl 5.004, C<AUTOLOAD> functions were looked up as methods
(using the C<@@ISA> hierarchy), even when the function to be autoloaded
was called as a plain function (e.g. C<Foo::bar()>), not a method
(e.g. C<Foo-E<gt>bar()> or C<$obj-E<gt>bar()>).
d79 3
a81 4
Perl 5.005 will use method lookup only for methods' C<AUTOLOAD>s.
However, there is a significant base of existing code that may be using
the old behavior.  So, as an interim step, Perl 5.004 issues an optional
warning when a non-method uses an inherited C<AUTOLOAD>.
d83 4
a86 4
The simple rule is:  Inheritance will not work when autoloading
non-methods.  The simple fix for old code is:  In any module that used to
depend on inheriting C<AUTOLOAD> for non-methods from a base class named
C<BaseClass>, execute C<*AUTOLOAD = \&BaseClass::AUTOLOAD> during startup.
d88 1
a88 1
=head2 Previously deprecated %OVERLOAD is no longer usable
d90 1
a90 4
Using %OVERLOAD to define overloading was deprecated in 5.003.
Overloading is now defined using the overload pragma. %OVERLOAD is
still used internally but should not be used by Perl scripts. See
L<overload> for more details.
d92 5
a96 1
=head2 Subroutine arguments created only when they're modified
d98 4
a101 3
In Perl 5.004, nonexistent array and hash elements used as subroutine
parameters are brought into existence only if they are actually
assigned to (via C<@@_>).
d103 1
a103 5
Earlier versions of Perl vary in their handling of such arguments.
Perl versions 5.002 and 5.003 always brought them into existence.
Perl versions 5.000 and 5.001 brought them into existence only if
they were not the first argument (which was almost certainly a bug).
Earlier versions of Perl never brought them into existence.
d105 1
a105 1
For example, given this code:
d107 1
a107 5
     undef @@a; undef %a;
     sub show { print $_[0] };
     sub change { $_[0]++ };
     show($a[2]);
     change($a{b});
d109 35
a143 3
After this code executes in Perl 5.004, $a{b} exists but $a[2] does
not.  In Perl 5.002 and 5.003, both $a{b} and $a[2] would have existed
(but $a[2]'s value would have been undefined).
d145 1
a145 1
=head2 Group vector changeable with C<$)>
a146 5
The C<$)> special variable has always (well, in Perl 5, at least)
reflected not only the current effective group, but also the group list
as returned by the C<getgroups()> C function (if there is one).
However, until this release, there has not been a way to call the
C<setgroups()> C function from Perl.
d148 1
a148 4
In Perl 5.004, assigning to C<$)> is exactly symmetrical with examining
it: The first number in its string value is used as the effective gid;
if there are any numbers after the first one, they are passed to the
C<setgroups()> C function (if there is one).
d150 3
a152 1
=head2 Fixed parsing of $$<digit>, &$<digit>, etc.
d154 1
a154 3
Perl versions before 5.004 misinterpreted any type marker followed by
"$" and a digit.  For example, "$$0" was incorrectly taken to mean
"${$}0" instead of "${$0}".  This bug is (mostly) fixed in Perl 5.004.
d156 2
a157 5
However, the developers of Perl 5.004 could not fix this bug completely,
because at least two widely-used modules depend on the old meaning of
"$$0" in a string.  So Perl 5.004 still interprets "$$<digit>" in the
old (broken) way inside strings; but it generates this message as a
warning.  And in Perl 5.005, this special treatment will cease.
d159 1
a159 1
=head2 Fixed localization of $<digit>, $&, etc.
d161 4
a164 4
Perl versions before 5.004 did not always properly localize the
regex-related special variables.  Perl 5.004 does localize them, as
the documentation has always said it should.  This may result in $1,
$2, etc. no longer being set where existing programs use them.
d166 11
a176 1
=head2 No resetting of $. on implicit close
d178 1
a178 4
The documentation for Perl 5.0 has always stated that C<$.> is I<not>
reset when an already-open file handle is reopened with no intervening
call to C<close>.  Due to a bug, perl versions 5.000 through 5.003
I<did> reset C<$.> under that circumstance; Perl 5.004 does not.
d180 2
a181 1
=head2 C<wantarray> may return undef
d183 2
a184 5
The C<wantarray> operator returns true if a subroutine is expected to
return a list, and false otherwise.  In Perl 5.004, C<wantarray> can
also return the undefined value if a subroutine's return value will
not be used at all, which allows subroutines to avoid a time-consuming
calculation of a return value if it isn't going to be used.
d186 2
a187 1
=head2 Changes to tainting checks
d189 2
a190 7
A bug in previous versions may have failed to detect some insecure
conditions when taint checks are turned on.  (Taint checks are used
in setuid or setgid scripts, or when explicitly turned on with the
C<-T> invocation option.)  Although it's unlikely, this may cause a
previously-working script to now fail -- which should be construed
as a blessing, since that indicates a potentially-serious security
hole was just plugged.
d192 1
a192 1
The new restrictions when tainting include:
d194 1
a194 1
=over
d196 1
a196 1
=item No glob() or <*>
d198 2
a199 18
These operators may spawn the C shell (csh), which cannot be made
safe.  This restriction will be lifted in a future version of Perl
when globbing is implemented without the use of an external program.

=item No spawning if tainted $CDPATH, $ENV, $BASH_ENV

These environment variables may alter the behavior of spawned programs
(especially shells) in ways that subvert security.  So now they are
treated as dangerous, in the manner of $IFS and $PATH.

=item No spawning if tainted $TERM doesn't look like a terminal name

Some termcap libraries do unsafe things with $TERM.  However, it would be
unnecessarily harsh to treat all $TERM values as unsafe, since only shell
metacharacters can cause trouble in $TERM.  So a tainted $TERM is
considered to be safe if it contains only alphanumerics, underscores,
dashes, and colons, and unsafe if it contains other characters (including
whitespace).
d201 1
a201 1
=back
d203 1
a203 1
=head2 New Opcode module and revised Safe module
d205 1
a205 4
A new Opcode module supports the creation, manipulation and
application of opcode masks.  The revised Safe module has a new API
and is implemented using the new Opcode module.  Please read the new
Opcode and Safe documentation.
d207 1
a207 1
=head2 Embedding improvements
d209 7
a215 6
In older versions of Perl it was not possible to create more than one
Perl interpreter instance inside a single process without leaking like a
sieve and/or crashing.  The bugs that caused this behavior have all been
fixed.  However, you still must take care when embedding Perl in a C
program.  See the updated perlembed manpage for tips on how to manage
your interpreters.
d217 1
a217 1
=head2 Internal change: FileHandle class based on IO::* classes
d219 5
a223 5
File handles are now stored internally as type IO::Handle.  The
FileHandle module is still supported for backwards compatibility, but
it is now merely a front end to the IO::* modules -- specifically,
IO::Handle, IO::Seekable, and IO::File.  We suggest, but do not
require, that you use the IO::* modules in new code.
d225 1
a225 2
In harmony with this change, C<*GLOB{FILEHANDLE}> is now just a
backward-compatible synonym for C<*GLOB{IO}>.
d227 1
a227 1
=head2 Internal change: PerlIO abstraction interface
d229 10
a238 3
It is now possible to build Perl with AT&T's sfio IO package
instead of stdio.  See L<perlapio> for more details, and
the F<INSTALL> file for how to use it.
d240 1
a240 1
=head2 New and changed syntax
d242 1
a242 1
=over
d244 8
a251 1
=item $coderef->(PARAMS)
d253 1
a253 9
A subroutine reference may now be suffixed with an arrow and a
(possibly empty) parameter list.  This syntax denotes a call of the
referenced subroutine, with the given parameters (if any).

This new syntax follows the pattern of S<C<$hashref-E<gt>{FOO}>> and
S<C<$aryref-E<gt>[$foo]>>: You may now write S<C<&$subref($foo)>> as
S<C<$subref-E<gt>($foo)>>.  All of these arrow terms may be chained;
thus, S<C<&{$table-E<gt>{FOO}}($bar)>> may now be written
S<C<$table-E<gt>{FOO}-E<gt>($bar)>>.
d255 1
a255 1
=back
d257 1
a257 1
=head2 New and changed builtin constants
d259 7
a265 1
=over
d267 1
a267 1
=item __PACKAGE__
d269 4
a272 4
The current package name at compile time, or the undefined value if
there is no current package (due to a C<package;> directive).  Like
C<__FILE__> and C<__LINE__>, C<__PACKAGE__> does I<not> interpolate
into strings.
d276 1
a276 5
=head2 New and changed builtin variables

=over

=item $^E
d278 1
a278 2
Extended error message on some platforms.  (Also known as
$EXTENDED_OS_ERROR if you C<use English>).
d280 1
a280 1
=item $^H
d282 1
a282 5
The current set of syntax checks enabled by C<use strict>.  See the
documentation of C<strict> for more details.  Not actually new, but
newly documented.
Because it is intended for internal use by Perl core components,
there is no C<use English> long name for this variable.
d284 6
a289 1
=item $^M
d291 1
a291 4
By default, running out of memory it is not trappable.  However, if
compiled for this, Perl may use the contents of C<$^M> as an emergency
pool after die()ing with this message.  Suppose that your Perl were
compiled with -DPERL_EMERGENCY_SBRK and used Perl's malloc.  Then
d293 1
a293 1
    $^M = 'a' x (1<<16);
d295 3
a297 4
would allocate a 64K buffer for use when in emergency.
See the F<INSTALL> file for information on how to enable this option.
As a disincentive to casual use of this advanced feature,
there is no C<use English> long name for this variable.
d299 3
a301 1
=back
d303 1
a303 1
=head2 New and changed builtin functions
d305 5
a309 1
=over
d311 1
a311 1
=item delete on slices
d313 9
a321 1
This now works.  (e.g. C<delete @@ENV{'PATH', 'MANPATH'}>)
d323 4
a326 1
=item flock
d328 1
a328 2
is now supported on more platforms, prefers fcntl to lockf when
emulating, and always flushes before (un)locking.
d330 3
a332 1
=item printf and sprintf
d334 1
a334 5
Perl now implements these functions itself; it doesn't use the C
library function sprintf() any more, except for floating-point
numbers, and even then only known flags are allowed.  As a result, it
is now possible to know which conversions and flags will work, and
what they will do.
d336 4
a339 1
The new conversions in Perl's sprintf() are:
d341 1
a341 4
   %i	a synonym for %d
   %p	a pointer (the address of the Perl value, in hexadecimal)
   %n	special: *stores* the number of characters output so far
        into the next variable in the parameter list 
d343 1
a343 1
The new flags that go between the C<%> and the conversion are:
d345 1
a345 3
   #	prefix octal with "0", hex with "0x"
   h	interpret integer as C type "short" or "unsigned short"
   V	interpret integer as Perl's standard integer type
d347 1
a347 5
Also, where a number would appear in the flags, an asterisk ("*") may
be used instead, in which case Perl uses the next item in the
parameter list as the given number (that is, as the field width or
precision).  If a field width obtained through "*" is negative, it has
the same effect as the '-' flag: left-justification.
d349 1
a349 1
See L<perlfunc/sprintf> for a complete list of conversion and flags.
d351 1
a351 1
=item keys as an lvalue
d353 1
a353 4
As an lvalue, C<keys> allows you to increase the number of hash buckets
allocated for the given hash.  This can gain you a measure of efficiency if
you know the hash is going to get big.  (This is similar to pre-extending
an array by assigning a larger number to $#array.)  If you say
d355 1
a355 1
    keys %hash = 200;
d357 1
a357 6
then C<%hash> will have at least 200 buckets allocated for it.  These
buckets will be retained even if you do C<%hash = ()>; use C<undef
%hash> if you want to free the storage while C<%hash> is still in scope.
You can't shrink the number of buckets allocated for the hash using
C<keys> in this way (but you needn't worry about doing this by accident,
as trying has no effect).
d359 1
a359 1
=item my() in Control Structures
d361 1
a361 2
You can now use my() (with or without the parentheses) in the control
expressions of control structures such as:
d363 1
a363 5
    while (defined(my $line = <>)) {
        $line = lc $line;
    } continue {
        print $line;
    }
d365 1
a365 8
    if ((my $answer = <STDIN>) =~ /^y(es)?$/i) {
        user_agrees();
    } elsif ($answer =~ /^n(o)?$/i) {
        user_disagrees();
    } else {
        chomp $answer;
        die "`$answer' is neither `yes' nor `no'";
    }
d367 2
a368 2
Also, you can declare a foreach loop control variable as lexical by
preceding it with the word "my".  For example, in:
d370 1
a370 3
    foreach my $i (1, 2, 3) {
        some_function();
    }
d372 6
a377 2
$i is a lexical variable, and the scope of $i extends to the end of
the loop, but not beyond it.
d379 1
a379 2
Note that you still cannot use my() on global punctuation variables
such as $_ and the like.
d381 3
a383 1
=item pack() and unpack()
d385 1
a385 5
A new format 'w' represents a BER compressed integer (as defined in
ASN.1).  Its format is a sequence of one or more bytes, each of which
provides seven bits of the total value, with the most significant
first.  Bit eight of each byte is set, except for the last byte, in
which bit eight is clear.
d387 1
a387 2
If 'p' or 'P' are given undef as values, they now generate a NULL
pointer.
d389 1
a389 2
Both pack() and unpack() now fail when their templates contain invalid
types.  (Invalid types used to be ignored.)
d391 9
a399 1
=item sysseek()
d401 1
a401 4
The new sysseek() operator is a variant of seek() that sets and gets the
file's system read/write position, using the lseek(2) system call.  It is
the only reliable way to seek before using sysread() or syswrite().  Its
return value is the new position, or the undefined value on failure.
d403 1
a403 1
=item use VERSION
d405 1
a405 9
If the first argument to C<use> is a number, it is treated as a version
number instead of a module name.  If the version of the Perl interpreter
is less than VERSION, then an error message is printed and Perl exits
immediately.  Because C<use> occurs at compile time, this check happens
immediately during the compilation process, unlike C<require VERSION>,
which waits until runtime for the check.  This is often useful if you
need to check the current Perl version before C<use>ing library modules
which have changed in incompatible ways from older versions of Perl.
(We try not to do this more than we have to.)
d407 3
a409 1
=item use Module VERSION LIST
d411 1
a411 6
If the VERSION argument is present between Module and LIST, then the
C<use> will call the VERSION method in class Module with the given
version as an argument.  The default VERSION method, inherited from
the UNIVERSAL class, croaks if the given version is larger than the
value of the variable $Module::VERSION.  (Note that there is not a
comma after VERSION!)
d413 1
a413 4
This version-checking mechanism is similar to the one currently used
in the Exporter module, but it is faster and can be used with modules
that don't use the Exporter.  It is the recommended method for new
code.
d415 1
a415 1
=item prototype(FUNCTION)
d417 1
a417 4
Returns the prototype of a function as a string (or C<undef> if the
function has no prototype).  FUNCTION is a reference to or the name of the
function whose prototype you want to retrieve.
(Not actually new; just never documented before.)
d419 1
a419 1
=item srand
d421 3
a423 3
The default seed for C<srand>, which used to be C<time>, has been changed.
Now it's a heady mix of difficult-to-predict system-dependent values,
which should be sufficient for most everyday purposes.
d425 1
a425 6
Previous to version 5.004, calling C<rand> without first calling C<srand>
would yield the same sequence of random numbers on most or all machines.
Now, when perl sees that you're calling C<rand> and haven't yet called
C<srand>, it calls C<srand> with the default seed. You should still call
C<srand> manually if your code might ever be run on a pre-5.004 system,
of course, or if you want a seed other than the default.
d427 2
a428 1
=item $_ as Default
d430 3
a432 2
Functions documented in the Camel to default to $_ now in
fact do, and all those that do are so documented in L<perlfunc>.
d434 1
a434 1
=item C<m//gc> does not reset search position on failure
d436 4
a439 8
The C<m//g> match iteration construct has always reset its target
string's search position (which is visible through the C<pos> operator)
when a match fails; as a result, the next C<m//g> match after a failure
starts again at the beginning of the string.  With Perl 5.004, this
reset may be disabled by adding the "c" (for "continue") modifier,
i.e. C<m//gc>.  This feature, in conjunction with the C<\G> zero-width
assertion, makes it possible to chain matches together.  See L<perlop>
and L<perlre>.
d441 1
a441 1
=item C<m//x> ignores whitespace before ?*+{}
d443 2
a444 4
The C<m//x> construct has always been intended to ignore all unescaped
whitespace.  However, before Perl 5.004, whitespace had the effect of
escaping repeat modifiers like "*" or "?"; for example, C</a *b/x> was
(mis)interpreted as C</a\*b/x>.  This bug has been fixed in 5.004.
d446 1
a446 1
=item nested C<sub{}> closures work now
d448 1
a448 2
Prior to the 5.004 release, nested anonymous functions didn't work
right.  They do now.
d450 1
a450 1
=item formats work right on changing lexicals
d452 2
a453 4
Just like anonymous functions that contain lexical variables
that change (like a lexical index variable for a C<foreach> loop),
formats now work properly.  For example, this silently failed
before (printed only zeros), but is fine now:
d455 1
a455 23
    my $i;
    foreach $i ( 1 .. 10 ) {
	write;
    }
    format =
	my i is @@#
	$i
    .

However, it still fails (without a warning) if the foreach is within a
subroutine:

    my $i;
    sub foo {
      foreach $i ( 1 .. 10 ) {
	write;
      }
    }
    foo;
    format =
	my i is @@#
	$i
    .
d457 2
a458 1
=back
d460 1
a460 1
=head2 New builtin methods
d462 3
a464 2
The C<UNIVERSAL> package automatically contains the following methods that
are inherited by all other classes:
d466 1
a466 1
=over
d468 10
a477 1
=item isa(CLASS)
d479 4
a482 9
C<isa> returns I<true> if its object is blessed into a subclass of C<CLASS>

C<isa> is also exportable and can be called as a sub with two arguments. This
allows the ability to check what a reference points to. Example:

    use UNIVERSAL qw(isa);

    if(isa($ref, 'ARRAY')) {
       ...
d484 1
d486 1
a486 1
=item can(METHOD)
d488 1
a488 16
C<can> checks to see if its object has a method called C<METHOD>,
if it does then a reference to the sub is returned; if it does not then
I<undef> is returned.

=item VERSION( [NEED] )

C<VERSION> returns the version number of the class (package).  If the
NEED argument is given then it will check that the current version (as
defined by the $VERSION variable in the given package) not less than
NEED; it will die if this is not the case.  This method is normally
called as a class method.  This method is called automatically by the
C<VERSION> form of C<use>.

    use A 1.2 qw(some imported subs);
    # implies:
    A->VERSION(1.2);
d490 3
a492 1
=back
d494 1
a494 8
B<NOTE:> C<can> directly uses Perl's internal code for method lookup, and
C<isa> uses a very similar method and caching strategy. This may cause
strange effects if the Perl code dynamically changes @@ISA in any package.

You may add other methods to the UNIVERSAL class via Perl or XS code.
You do not need to C<use UNIVERSAL> in order to make these methods
available to your program.  This is necessary only if you wish to
have C<isa> available as a plain subroutine in the current package.
d496 2
a497 1
=head2 TIEHANDLE now supported
d499 1
a499 1
See L<perltie> for other kinds of tie()s.
d501 1
a501 1
=over
d503 3
a505 1
=item TIEHANDLE classname, LIST
d507 2
a508 9
This is the constructor for the class.  That means it is expected to
return an object of some sort. The reference can be used to
hold some internal information.

    sub TIEHANDLE {
	print "<shout>\n";
	my $i;
	return bless \$i, shift;
    }
d510 1
a510 1
=item PRINT this, LIST
d512 1
a512 9
This method will be triggered every time the tied handle is printed to.
Beyond its self reference it also expects the list that was passed to
the print function.

    sub PRINT {
	$r = shift;
	$$r++;
	return print join( $, => map {uc} @@_), $\;
    }
d514 1
a514 1
=item PRINTF this, LIST
d516 1
a516 10
This method will be triggered every time the tied handle is printed to
with the C<printf()> function.
Beyond its self reference it also expects the format and list that was
passed to the printf function.

    sub PRINTF {
        shift;
	  my $fmt = shift;
        print sprintf($fmt, @@_)."\n";
    }
d518 1
a518 1
=item READ this LIST
d520 3
a522 2
This method will be called when the handle is read from via the C<read>
or C<sysread> functions.
d524 1
a524 5
    sub READ {
	$r = shift;
	my($buf,$len,$offset) = @@_;
	print "READ called, \$buf=$buf, \$len=$len, \$offset=$offset";
    }
d526 1
a526 1
=item READLINE this
d528 1
a528 2
This method will be called when the handle is read from. The method
should return undef when there is no more data.
d530 1
a530 4
    sub READLINE {
	$r = shift;
	return "PRINT called $$r times\n"
    }
d532 1
a532 1
=item GETC this
d534 1
a534 1
This method will be called when the C<getc> function is called.
d536 1
a536 1
    sub GETC { print "Don't GETC, Get Perl"; return "a"; }
d538 1
a538 1
=item DESTROY this
d540 1
a540 3
As with the other types of ties, this method will be called when the
tied handle is about to be destroyed. This is useful for debugging and
possibly for cleaning up.
d542 3
a544 5
    sub DESTROY {
	print "</shout>\n";
    }

=back
d546 1
a546 1
=head2 Malloc enhancements
d548 1
a548 3
If perl is compiled with the malloc included with the perl distribution
(that is, if C<perl -V:d_mymalloc> is 'define') then you can print
memory statistics at runtime by running Perl thusly:
d550 1
a550 1
  env PERL_DEBUG_MSTATS=2 perl your_script_here
d552 1
a552 7
The value of 2 means to print statistics after compilation and on
exit; with a value of 1, the statistics are printed only on exit.
(If you want the statistics at an arbitrary time, you'll need to
install the optional module Devel::Peek.)

Three new compilation flags are recognized by malloc.c.  (They have no
effect if perl is compiled with system malloc().)
d556 1
a556 1
=item -DPERL_EMERGENCY_SBRK
d558 1
a558 35
If this macro is defined, running out of memory need not be a fatal
error: a memory pool can allocated by assigning to the special
variable C<$^M>.  See L<"$^M">.

=item -DPACK_MALLOC

Perl memory allocation is by bucket with sizes close to powers of two.
Because of these malloc overhead may be big, especially for data of
size exactly a power of two.  If C<PACK_MALLOC> is defined, perl uses
a slightly different algorithm for small allocations (up to 64 bytes
long), which makes it possible to have overhead down to 1 byte for
allocations which are powers of two (and appear quite often).

Expected memory savings (with 8-byte alignment in C<alignbytes>) is
about 20% for typical Perl usage.  Expected slowdown due to additional
malloc overhead is in fractions of a percent (hard to measure, because
of the effect of saved memory on speed).

=item -DTWO_POT_OPTIMIZE

Similarly to C<PACK_MALLOC>, this macro improves allocations of data
with size close to a power of two; but this works for big allocations
(starting with 16K by default).  Such allocations are typical for big
hashes and special-purpose scripts, especially image processing.

On recent systems, the fact that perl requires 2M from system for 1M
allocation will not affect speed of execution, since the tail of such
a chunk is not going to be touched (and thus will not require real
memory).  However, it may result in a premature out-of-memory error.
So if you will be manipulating very large blocks with sizes close to
powers of two, it would be wise to define this macro.

Expected saving of memory is 0-100% (100% in applications which
require most memory in such 2**n chunks); expected slowdown is
negligible.
d560 1
a560 1
=back
d562 1
a562 1
=head2 Miscellaneous efficiency enhancements
d564 1
a564 2
Functions that have an empty prototype and that do nothing but return
a fixed value are now inlined (e.g. C<sub PI () { 3.14159 }>).
d566 1
a566 3
Each unique hash key is only allocated once, no matter how many hashes
have an entry with that key.  So even if you have 100 copies of the
same hash, the hash keys never have to be reallocated.
d568 1
a568 1
=head1 Support for More Operating Systems
d570 1
a570 1
Support for the following operating systems is new in Perl 5.004.
d572 1
a572 1
=head2 Win32
d574 1
a574 11
Perl 5.004 now includes support for building a "native" perl under
Windows NT, using the Microsoft Visual C++ compiler (versions 2.0
and above) or the Borland C++ compiler (versions 5.02 and above).
The resulting perl can be used under Windows 95 (if it
is installed in the same directory locations as it got installed
in Windows NT).  This port includes support for perl extension
building tools like L<MakeMaker> and L<h2xs>, so that many extensions
available on the Comprehensive Perl Archive Network (CPAN) can now be
readily built under Windows NT.  See http://www.perl.com/ for more
information on CPAN, and L<README.win32> for more details on how to
get started with building this port.
d576 1
a576 5
There is also support for building perl under the Cygwin32 environment.
Cygwin32 is a set of GNU tools that make it possible to compile and run
many UNIX programs under Windows NT by providing a mostly UNIX-like 
interface for compilation and execution.  See L<README.cygwin32> for
more details on this port, and how to obtain the Cygwin32 toolkit.
d578 1
a578 1
=head2 Plan 9
d580 1
a580 1
See L<README.plan9>.
d582 1
a582 1
=head2 QNX
d584 1
a584 1
See L<README.qnx>.
d586 1
a586 1
=head2 AmigaOS
d588 1
a588 7
See L<README.amigaos>.

=head1 Pragmata

Six new pragmatic modules exist:

=over
d590 2
a591 1
=item use autouse MODULE => qw(sub1 sub2 sub3)
d593 1
a593 3
Defers C<require MODULE> until someone calls one of the specified
subroutines (which must be exported by MODULE).  This pragma should be
used with caution, and only when necessary.
d595 1
a595 1
=item use blib
d597 1
a597 1
=item use blib 'dir'
d599 1
a599 3
Looks for MakeMaker-like I<'blib'> directory structure starting in
I<dir> (or current directory) and working back up to five levels of
parent directories.
d601 1
a601 2
Intended for use on command line with B<-M> option as a way of testing
arbitrary scripts against an uninstalled version of a package.
d603 1
a603 1
=item use constant NAME => VALUE
d605 1
a605 2
Provides a convenient interface for creating compile-time constants,
See L<perlsub/"Constant Functions">.
d607 1
a607 1
=item use locale
d609 1
a609 2
Tells the compiler to enable (or disable) the use of POSIX locales for
builtin operations.
d611 1
a611 5
When C<use locale> is in effect, the current LC_CTYPE locale is used
for regular expressions and case mapping; LC_COLLATE for string
ordering; and LC_NUMERIC for numeric formating in printf and sprintf
(but B<not> in print).  LC_NUMERIC is always used in write, since
lexical scoping of formats is problematic at best.
d613 1
a613 4
Each C<use locale> or C<no locale> affects statements to the end of
the enclosing BLOCK or, if not inside a BLOCK, to the end of the
current file.  Locales can be switched and queried with
POSIX::setlocale().
d615 1
a615 1
See L<perllocale> for more information.
d617 1
a617 1
=item use ops
d619 1
a619 10
Disable unsafe opcodes, or any named opcodes, when compiling Perl code.

=item use vmsish

Enable VMS-specific language features.  Currently, there are three
VMS-specific features available: 'status', which makes C<$?> and
C<system> return genuine VMS status values instead of emulating POSIX;
'exit', which makes C<exit> take a genuine VMS status value instead of
assuming that C<exit 1> is an error; and 'time', which makes all times
relative to the local time zone, in the VMS tradition.
d623 1
a623 1
=head1 Modules
d625 1
a625 71
=head2 Required Updates

Though Perl 5.004 is compatible with almost all modules that work
with Perl 5.003, there are a few exceptions:

    Module   Required Version for Perl 5.004
    ------   -------------------------------
    Filter   Filter-1.12
    LWP      libwww-perl-5.08
    Tk       Tk400.202 (-w makes noise)

Also, the majordomo mailing list program, version 1.94.1, doesn't work
with Perl 5.004 (nor with perl 4), because it executes an invalid
regular expression.  This bug is fixed in majordomo version 1.94.2.

=head2 Installation directories

The I<installperl> script now places the Perl source files for
extensions in the architecture-specific library directory, which is
where the shared libraries for extensions have always been.  This
change is intended to allow administrators to keep the Perl 5.004
library directory unchanged from a previous version, without running
the risk of binary incompatibility between extensions' Perl source and
shared libraries.

=head2 Module information summary

Brand new modules, arranged by topic rather than strictly
alphabetically:

    CGI.pm               Web server interface ("Common Gateway Interface")
    CGI/Apache.pm        Support for Apache's Perl module
    CGI/Carp.pm          Log server errors with helpful context
    CGI/Fast.pm          Support for FastCGI (persistent server process)
    CGI/Push.pm          Support for server push
    CGI/Switch.pm        Simple interface for multiple server types

    CPAN                 Interface to Comprehensive Perl Archive Network
    CPAN::FirstTime      Utility for creating CPAN configuration file
    CPAN::Nox            Runs CPAN while avoiding compiled extensions

    IO.pm                Top-level interface to IO::* classes
    IO/File.pm           IO::File extension Perl module
    IO/Handle.pm         IO::Handle extension Perl module
    IO/Pipe.pm           IO::Pipe extension Perl module
    IO/Seekable.pm       IO::Seekable extension Perl module
    IO/Select.pm         IO::Select extension Perl module
    IO/Socket.pm         IO::Socket extension Perl module

    Opcode.pm            Disable named opcodes when compiling Perl code

    ExtUtils/Embed.pm    Utilities for embedding Perl in C programs
    ExtUtils/testlib.pm  Fixes up @@INC to use just-built extension

    FindBin.pm           Find path of currently executing program

    Class/Struct.pm      Declare struct-like datatypes as Perl classes
    File/stat.pm         By-name interface to Perl's builtin stat
    Net/hostent.pm       By-name interface to Perl's builtin gethost*
    Net/netent.pm        By-name interface to Perl's builtin getnet*
    Net/protoent.pm      By-name interface to Perl's builtin getproto*
    Net/servent.pm       By-name interface to Perl's builtin getserv*
    Time/gmtime.pm       By-name interface to Perl's builtin gmtime
    Time/localtime.pm    By-name interface to Perl's builtin localtime
    Time/tm.pm           Internal object for Time::{gm,local}time
    User/grent.pm        By-name interface to Perl's builtin getgr*
    User/pwent.pm        By-name interface to Perl's builtin getpw*

    Tie/RefHash.pm       Base class for tied hashes with references as keys

    UNIVERSAL.pm         Base class for *ALL* classes
d627 1
a627 1
=head2 Fcntl
d629 5
a633 2
New constants in the existing Fcntl modules are now supported,
provided that your operating system happens to support them:
d635 1
a635 3
    F_GETOWN F_SETOWN
    O_ASYNC O_DEFER O_DSYNC O_FSYNC O_SYNC
    O_EXLOCK O_SHLOCK
d637 1
a637 4
These constants are intended for use with the Perl operators sysopen()
and fcntl() and the basic database modules like SDBM_File.  For the
exact meaning of these and other Fcntl constants please refer to your
operating system's documentation for fcntl() and open().
d639 3
a641 2
In addition, the Fcntl module now provides these constants for use
with the Perl operator flock():
d643 2
a644 1
	LOCK_SH LOCK_EX LOCK_NB LOCK_UN
d646 1
a646 4
These constants are defined in all environments (because where there is
no flock() system call, Perl emulates it).  However, for historical
reasons, these constants are not exported unless they are explicitly
requested with the ":flock" tag (e.g. C<use Fcntl ':flock'>).
d648 2
a649 1
=head2 IO
d651 1
a651 2
The IO module provides a simple mechanism to load all of the IO modules at one
go.  Currently this includes:
d653 1
a653 5
     IO::Handle
     IO::Seekable
     IO::File
     IO::Pipe
     IO::Socket
d655 1
a655 2
For more information on any of these modules, please see its
respective documentation.
d657 5
a661 1
=head2 Math::Complex
d663 1
a663 2
The Math::Complex module has been totally rewritten, and now supports
more operations.  These are overloaded:
d665 2
a666 1
     + - * / ** <=> neg ~ abs sqrt exp log sin cos atan2 "" (stringify)
d668 1
a668 1
And these functions are now exported:
d670 2
a671 11
    pi i Re Im arg
    log10 logn ln cbrt root
    tan
    csc sec cot
    asin acos atan
    acsc asec acot
    sinh cosh tanh
    csch sech coth
    asinh acosh atanh
    acsch asech acoth
    cplx cplxe
d673 1
a673 1
=head2 Math::Trig
d675 1
a675 2
This new module provides a simpler interface to parts of Math::Complex for
those who need trigonometric functions only for real numbers.
d677 1
a677 1
=head2 DB_File
d679 1
a679 2
There have been quite a few changes made to DB_File. Here are a few of
the highlights:
d681 1
a681 9
=over

=item *

Fixed a handful of bugs.

=item *

By public demand, added support for the standard hash function exists().
d683 4
a686 1
=item *
d688 6
a693 1
Made it compatible with Berkeley DB 1.86.
d695 1
a695 1
=item *
d697 1
a697 1
Made negative subscripts work with RECNO interface.
d699 1
a699 1
=item *
d701 1
a701 2
Changed the default flags from O_RDWR to O_CREAT|O_RDWR and the default
mode from 0640 to 0666.
d703 1
a703 1
=item *
d705 1
a705 6
Made DB_File automatically import the open() constants (O_RDWR,
O_CREAT etc.) from Fcntl, if available.

=item *

Updated documentation.
a708 28
Refer to the HISTORY section in DB_File.pm for a complete list of
changes. Everything after DB_File 1.01 has been added since 5.003.

=head2 Net::Ping

Major rewrite - support added for both udp echo and real icmp pings.

=head2 Object-oriented overrides for builtin operators

Many of the Perl builtins returning lists now have
object-oriented overrides.  These are:

    File::stat
    Net::hostent
    Net::netent
    Net::protoent
    Net::servent
    Time::gmtime
    Time::localtime
    User::grent
    User::pwent

For example, you can now say

    use File::stat;
    use User::pwent;
    $his = (stat($filename)->st_uid == pwent($whoever)->pw_uid);

d711 1
a711 10
=head2 pod2html

=over

=item Sends converted HTML to standard output

The I<pod2html> utility included with Perl 5.004 is entirely new.
By default, it sends the converted HTML to its standard output,
instead of writing it to a file like Perl 5.003's I<pod2html> did.
Use the B<--outfile=FILENAME> option to write to a file.
d713 1
a713 32
=back

=head2 xsubpp

=over

=item C<void> XSUBs now default to returning nothing

Due to a documentation/implementation bug in previous versions of
Perl, XSUBs with a return type of C<void> have actually been
returning one value.  Usually that value was the GV for the XSUB,
but sometimes it was some already freed or reused value, which would
sometimes lead to program failure.

In Perl 5.004, if an XSUB is declared as returning C<void>, it
actually returns no value, i.e. an empty list (though there is a
backward-compatibility exception; see below).  If your XSUB really
does return an SV, you should give it a return type of C<SV *>.

For backward compatibility, I<xsubpp> tries to guess whether a
C<void> XSUB is really C<void> or if it wants to return an C<SV *>.
It does so by examining the text of the XSUB: if I<xsubpp> finds
what looks like an assignment to C<ST(0)>, it assumes that the
XSUB's return type is really C<SV *>.

=back

=head1 C Language API Changes

=over

=item C<gv_fetchmethod> and C<perl_call_sv>
d715 2
a716 29
The C<gv_fetchmethod> function finds a method for an object, just like
in Perl 5.003.  The GV it returns may be a method cache entry.
However, in Perl 5.004, method cache entries are not visible to users;
therefore, they can no longer be passed directly to C<perl_call_sv>.
Instead, you should use the C<GvCV> macro on the GV to extract its CV,
and pass the CV to C<perl_call_sv>.

The most likely symptom of passing the result of C<gv_fetchmethod> to
C<perl_call_sv> is Perl's producing an "Undefined subroutine called"
error on the I<second> call to a given method (since there is no cache
on the first call).

=item C<perl_eval_pv>

A new function handy for eval'ing strings of Perl code inside C code.
This function returns the value from the eval statement, which can
be used instead of fetching globals from the symbol table.  See
L<perlguts>, L<perlembed> and L<perlcall> for details and examples.

=item Extended API for manipulating hashes

Internal handling of hash keys has changed.  The old hashtable API is
still fully supported, and will likely remain so.  The additions to the
API allow passing keys as C<SV*>s, so that C<tied> hashes can be given
real scalars as keys rather than plain strings (nontied hashes still
can only use strings as keys).  New extensions must use the new hash
access functions and macros if they wish to use C<SV*> keys.  These
additions also make it feasible to manipulate C<HE*>s (hash entries),
which can be more efficient.  See L<perlguts> for details.
d718 4
a721 1
=back
d725 1
a725 14
Many of the base and library pods were updated.  These
new pods are included in section 1:

=over

=item L<perldelta>

This document.

=item L<perlfaq>

Frequently asked questions.

=item L<perllocale>
d727 2
a728 1
Locale support (internationalization and localization).
d730 1
a730 1
=item L<perltoot>
d732 2
a733 1
Tutorial on Perl OO programming.
d735 1
a735 1
=item L<perlapio>
d737 1
a737 1
Perl internal IO abstraction interface.
d739 1
a739 1
=item L<perlmodlib>
d741 1
a741 12
Perl module library and recommended practice for module creation.
Extracted from L<perlmod> (which is much smaller as a result).

=item L<perldebug>

Although not new, this has been massively updated.

=item L<perlsec>

Although not new, this has been massively updated.

=back
a744 14
Several new conditions will trigger warnings that were
silent before.  Some only affect certain platforms.
The following new warnings and errors outline these.
These messages are classified as follows (listed in
increasing order of desperation):

   (W) A warning (optional).
   (D) A deprecation (optional).
   (S) A severe warning (mandatory).
   (F) A fatal error (trappable).
   (P) An internal error you should never see (trappable).
   (X) A very fatal error (nontrappable).
   (A) An alien error message (not generated by Perl).

d747 1
a747 1
=item "my" variable %s masks earlier declaration in same scope
d749 4
a752 5
(W) A lexical variable has been redeclared in the same scope, effectively
eliminating all access to the previous instance.  This is almost always
a typographical error.  Note that the earlier variable will still exist
until the end of the scope or until all closure referents to it are
destroyed.
d754 4
a757 1
=item %s argument is not a HASH element or slice
d759 3
a761 1
(F) The argument to delete() must be either a hash element, such as
d763 1
a763 2
    $foo{$bar}
    $ref->[12]->{"susie"}
d765 3
a767 1
or a hash slice, such as
d769 1
a769 2
    @@foo{$bar, $baz, $xyzzy}
    @@{$ref->[12]}{"susie", "queue"}
d771 3
a773 1
=item Allocation too large: %lx
d775 1
a775 1
(X) You can't allocate more than 64K on an MS-DOS machine.
d777 3
a779 1
=item Allocation too large
d781 3
a783 1
(F) You can't allocate more than 2^31+"small amount" bytes.
d785 1
a785 1
=item Applying %s to %s will act on scalar(%s)
d787 1
a787 6
(W) The pattern match (//), substitution (s///), and translation (tr///)
operators work on scalar values.  If you apply one of them to an array
or a hash, it will convert the array or hash to a scalar value -- the
length of an array, or the population info of a hash -- and then work on
that scalar value.  This is probably not what you meant to do.  See
L<perlfunc/grep> and L<perlfunc/map> for alternatives.
d789 1
a789 1
=item Attempt to free nonexistent shared string
d791 3
a793 4
(P) Perl maintains a reference counted internal table of strings to
optimize the storage and access of hash keys and other strings.  This
indicates someone tried to decrement the reference count of a string
that can no longer be found in the table.
d795 1
a795 1
=item Attempt to use reference as lvalue in substr
d797 2
a798 3
(W) You supplied a reference as the first argument to substr() used
as an lvalue, which is pretty strange.  Perhaps you forgot to
dereference it first.  See L<perlfunc/substr>.
d800 1
a800 1
=item Can't redefine active sort subroutine %s
d802 4
a805 4
(F) Perl optimizes the internal handling of sort subroutines and keeps
pointers into them.  You tried to redefine one such sort subroutine when it
was currently active, which is not allowed.  If you really want to do
this, you should write C<sort { &func } @@x> instead of C<sort func @@x>.
d807 1
a807 1
=item Can't use bareword ("%s") as %s ref while "strict refs" in use
d809 3
a811 2
(F) Only hard references are allowed by "strict refs".  Symbolic references
are disallowed.  See L<perlref>.
d813 1
a813 1
=item Cannot resolve method `%s' overloading `%s' in package `%s'
d815 2
a816 2
(P) Internal error trying to resolve overloading specified by a method
name (as opposed to a subroutine reference).
d818 1
a818 1
=item Constant subroutine %s redefined
d820 5
a824 3
(S) You redefined a subroutine which had previously been eligible for
inlining.  See L<perlsub/"Constant Functions"> for commentary and
workarounds.
d826 1
a826 1
=item Constant subroutine %s undefined
d828 5
a832 3
(S) You undefined a subroutine which had previously been eligible for
inlining.  See L<perlsub/"Constant Functions"> for commentary and
workarounds.
d834 1
a834 1
=item Copy method did not return a reference
d836 5
a840 1
(F) The method which overloads "=" is buggy. See L<overload/Copy Constructor>.
d842 1
a842 1
=item Died
d844 3
a846 2
(F) You passed die() an empty string (the equivalent of C<die "">) or
you called it with no args and both C<$@@> and C<$_> were empty.
d848 1
a848 1
=item Exiting pseudo-block via %s
d850 3
a852 3
(W) You are exiting a rather special block construct (like a sort block or
subroutine) by unconventional means, such as a goto, or a loop control
statement.  See L<perlfunc/sort>.
d854 1
a854 1
=item Identifier too long
d856 6
a861 4
(F) Perl limits identifiers (names for variables, functions, etc.) to
252 characters for simple names, somewhat more for compound names (like
C<$A::B>).  You've exceeded Perl's limits.  Future versions of Perl are
likely to eliminate these arbitrary limitations.
d863 1
a863 1
=item Illegal character %s (carriage return)
d865 4
a868 3
(F) A carriage return character was found in the input.  This is an
error, and not a warning, because carriage return characters can break
multi-line strings, including here documents (e.g., C<print E<lt>E<lt>EOF;>).
d870 1
a870 1
=item Illegal switch in PERL5OPT: %s
d872 3
a874 2
(X) The PERL5OPT environment variable may only be used to set the
following switches: B<-[DIMUdmw]>.
d876 1
a876 1
=item Integer overflow in hex number
d878 3
a880 3
(S) The literal hex number you have specified is too big for your
architecture. On a 32-bit architecture the largest hex literal is
0xFFFFFFFF.
d882 1
a882 1
=item Integer overflow in octal number
d884 4
a887 3
(S) The literal octal number you have specified is too big for your
architecture. On a 32-bit architecture the largest octal literal is
037777777777.
d889 1
a889 1
=item internal error: glob failed
d891 3
a893 8
(P) Something went wrong with the external program(s) used for C<glob>
and C<E<lt>*.cE<gt>>.  This may mean that your csh (C shell) is
broken.  If so, you should change all of the csh-related variables in
config.sh:  If you have tcsh, make the variables refer to it as if it
were csh (e.g. C<full_csh='/usr/bin/tcsh'>); otherwise, make them all
empty (except that C<d_csh> should be C<'undef'>) so that Perl will
think csh is missing.  In either case, after editing config.sh, run
C<./Configure -S> and rebuild Perl.
d895 1
a895 1
=item Invalid conversion in %s: "%s"
d897 4
a900 2
(W) Perl does not understand the given format conversion.
See L<perlfunc/sprintf>.
d902 1
a902 1
=item Invalid type in pack: '%s'
d904 2
a905 1
(F) The given character is not a valid pack type.  See L<perlfunc/pack>.
d907 1
a907 1
=item Invalid type in unpack: '%s'
d909 4
a912 1
(F) The given character is not a valid unpack type.  See L<perlfunc/unpack>.
d914 4
a917 1
=item Name "%s::%s" used only once: possible typo
d919 1
a919 4
(W) Typographical errors often show up as unique variable names.
If you had a good reason for having a unique name, then just mention
it again somehow to suppress the message (the C<use vars> pragma is
provided for just this purpose).
d921 2
a922 1
=item Null picture in formline
d924 1
a924 3
(F) The first argument to formline must be a valid format picture
specification.  It was found to be empty, which probably means you
supplied it an uninitialized value.  See L<perlform>.
d926 6
a931 1
=item Offset outside string
d933 1
a933 4
(F) You tried to do a read/write/send/recv operation with an offset
pointing outside the buffer.  This is difficult to imagine.
The sole exception to this is that C<sysread()>ing past the buffer
will extend the buffer and zero pad the new area.
d935 1
a935 1
=item Out of memory!
d937 6
a942 2
(X|F) The malloc() function returned 0, indicating there was insufficient
remaining memory (or virtual memory) to satisfy the request.
d944 9
a952 5
The request was judged to be small, so the possibility to trap it
depends on the way Perl was compiled.  By default it is not trappable.
However, if compiled for this, Perl may use the contents of C<$^M> as
an emergency pool after die()ing with this message.  In this case the
error is trappable I<once>.
d954 1
a954 1
=item Out of memory during request for %s
a955 4
(F) The malloc() function returned 0, indicating there was insufficient
remaining memory (or virtual memory) to satisfy the request. However,
the request was judged large enough (compile-time default is 64K), so
a possibility to shut down by trapping this error is granted.
d957 1
a957 1
=item panic: frexp
d959 1
a959 1
(P) The library function frexp() failed, making printf("%f") impossible.
d961 1
a961 1
=item Possible attempt to put comments in qw() list
d963 2
a964 5
(W) qw() lists contain items separated by whitespace; as with literal
strings, comment characters are not ignored, but are instead treated
as literal data.  (You may have used different delimiters than the
exclamation marks parentheses shown here; braces are also frequently
used.)
d966 1
a966 1
You probably wrote something like this:
d968 1
a968 4
    @@list = qw(
        a # a comment
        b # another comment
    );
d970 2
a971 1
when you should have written this:
d973 1
a973 4
    @@list = qw(
        a
        b
    );
d975 1
a975 2
If you really want comments, build your list the
old-fashioned way, with quotes and commas:
d977 2
a978 4
    @@list = (
        'a',    # a comment
        'b',    # another comment
    );
d980 1
a980 1
=item Possible attempt to separate words with commas
d982 1
a982 4
(W) qw() lists contain items separated by whitespace; therefore commas
aren't needed to separate the items. (You may have used different
delimiters than the parentheses shown here; braces are also frequently
used.)
d984 5
a988 1
You probably wrote something like this:
d990 1
a990 31
    qw! a, b, c !;

which puts literal commas into some of the list items.  Write it without
commas if you don't want them to appear in your data:

    qw! a b c !;

=item Scalar value @@%s{%s} better written as $%s{%s}

(W) You've used a hash slice (indicated by @@) to select a single element of
a hash.  Generally it's better to ask for a scalar value (indicated by $).
The difference is that C<$foo{&bar}> always behaves like a scalar, both when
assigning to it and when evaluating its argument, while C<@@foo{&bar}> behaves
like a list when you assign to it, and provides a list context to its
subscript, which can do weird things if you're expecting only one subscript.

=item Stub found while resolving method `%s' overloading `%s' in package `%s'

(P) Overloading resolution over @@ISA tree may be broken by importing stubs.
Stubs should never be implicitely created, but explicit calls to C<can>
may break this.

=item Too late for "B<-T>" option

(X) The #! line (or local equivalent) in a Perl script contains the
B<-T> option, but Perl was not invoked with B<-T> in its argument
list.  This is an error because, by the time Perl discovers a B<-T> in
a script, it's too late to properly taint everything from the
environment.  So Perl gives up.

=item untie attempted while %d inner references still exist
d992 1
a992 2
(W) A copy of the object returned from C<tie> (or C<tied>) was still
valid when C<untie> was called.
d994 4
a997 126
=item Unrecognized character %s

(F) The Perl parser has no idea what to do with the specified character
in your Perl script (or eval).  Perhaps you tried to run a compressed
script, a binary program, or a directory as a Perl program.

=item Unsupported function fork

(F) Your version of executable does not support forking.

Note that under some systems, like OS/2, there may be different flavors of
Perl executables, some of which may support fork, some not. Try changing
the name you call Perl by to C<perl_>, C<perl__>, and so on.

=item Use of "$$<digit>" to mean "${$}<digit>" is deprecated

(D) Perl versions before 5.004 misinterpreted any type marker followed
by "$" and a digit.  For example, "$$0" was incorrectly taken to mean
"${$}0" instead of "${$0}".  This bug is (mostly) fixed in Perl 5.004.

However, the developers of Perl 5.004 could not fix this bug completely,
because at least two widely-used modules depend on the old meaning of
"$$0" in a string.  So Perl 5.004 still interprets "$$<digit>" in the
old (broken) way inside strings; but it generates this message as a
warning.  And in Perl 5.005, this special treatment will cease.

=item Value of %s can be "0"; test with defined()

(W) In a conditional expression, you used <HANDLE>, <*> (glob), C<each()>,
or C<readdir()> as a boolean value.  Each of these constructs can return a
value of "0"; that would make the conditional expression false, which is
probably not what you intended.  When using these constructs in conditional
expressions, test their values with the C<defined> operator.

=item Variable "%s" may be unavailable

(W) An inner (nested) I<anonymous> subroutine is inside a I<named>
subroutine, and outside that is another subroutine; and the anonymous
(innermost) subroutine is referencing a lexical variable defined in
the outermost subroutine.  For example:

   sub outermost { my $a; sub middle { sub { $a } } }

If the anonymous subroutine is called or referenced (directly or
indirectly) from the outermost subroutine, it will share the variable
as you would expect.  But if the anonymous subroutine is called or
referenced when the outermost subroutine is not active, it will see
the value of the shared variable as it was before and during the
*first* call to the outermost subroutine, which is probably not what
you want.

In these circumstances, it is usually best to make the middle
subroutine anonymous, using the C<sub {}> syntax.  Perl has specific
support for shared variables in nested anonymous subroutines; a named
subroutine in between interferes with this feature.

=item Variable "%s" will not stay shared

(W) An inner (nested) I<named> subroutine is referencing a lexical
variable defined in an outer subroutine.

When the inner subroutine is called, it will probably see the value of
the outer subroutine's variable as it was before and during the
*first* call to the outer subroutine; in this case, after the first
call to the outer subroutine is complete, the inner and outer
subroutines will no longer share a common value for the variable.  In
other words, the variable will no longer be shared.

Furthermore, if the outer subroutine is anonymous and references a
lexical variable outside itself, then the outer and inner subroutines
will I<never> share the given variable.

This problem can usually be solved by making the inner subroutine
anonymous, using the C<sub {}> syntax.  When inner anonymous subs that
reference variables in outer subroutines are called or referenced,
they are automatically rebound to the current values of such
variables.

=item Warning: something's wrong

(W) You passed warn() an empty string (the equivalent of C<warn "">) or
you called it with no args and C<$_> was empty.

=item Ill-formed logical name |%s| in prime_env_iter

(W) A warning peculiar to VMS.  A logical name was encountered when preparing
to iterate over %ENV which violates the syntactic rules governing logical
names.  Since it cannot be translated normally, it is skipped, and will not
appear in %ENV.  This may be a benign occurrence, as some software packages
might directly modify logical name tables and introduce nonstandard names,
or it may indicate that a logical name table has been corrupted.

=item Got an error from DosAllocMem

(P) An error peculiar to OS/2.  Most probably you're using an obsolete
version of Perl, and this should not happen anyway.

=item Malformed PERLLIB_PREFIX

(F) An error peculiar to OS/2.  PERLLIB_PREFIX should be of the form

    prefix1;prefix2

or

    prefix1 prefix2

with nonempty prefix1 and prefix2.  If C<prefix1> is indeed a prefix
of a builtin library search path, prefix2 is substituted.  The error
may appear if components are not found, or are too long.  See
"PERLLIB_PREFIX" in F<README.os2>.

=item PERL_SH_DIR too long

(F) An error peculiar to OS/2. PERL_SH_DIR is the directory to find the
C<sh>-shell in.  See "PERL_SH_DIR" in F<README.os2>.

=item Process terminated by SIG%s

(W) This is a standard message issued by OS/2 applications, while *nix
applications die in silence.  It is considered a feature of the OS/2
port.  One can easily disable this by appropriate sighandlers, see
L<perlipc/"Signals">.  See also "Process terminated by SIGTERM/SIGINT"
in F<README.os2>.

=back
d1016 1
a1016 3
The F<INSTALL> file for how to build Perl.  This file has been
significantly updated for 5.004, so even veteran users should
look through it.
d1020 1
a1020 1
The F<Copying> file for copyright information.
d1024 4
a1027 3
Constructed by Tom Christiansen, grabbing material with permission
from innumerable contributors, with kibitzing by more than a few Perl
porters.
d1029 1
a1029 1
Last update: Wed May 14 11:14:09 EDT 1997
@


1.1.1.1
log
@perl5.005_03
@
text
@d3 1
a3 1
perldelta - what's new for perl5.005
d7 9
a15 1
This document describes differences between the 5.004 release and this one.
d17 1
a17 1
=head1 About the new versioning system
d19 2
a20 7
Perl is now developed on two tracks: a maintenance track that makes
small, safe updates to released production versions with emphasis on
compatibility; and a development track that pursues more aggressive
evolution.  Maintenance releases (which should be considered production
quality) have subversion numbers that run from C<1> to C<49>, and
development releases (which should be considered "alpha" quality) run
from C<50> to C<99>.
d22 1
a22 2
Perl 5.005 is the combined product of the new dual-track development
scheme.
d24 2
a25 1
=head1 Incompatible Changes
d27 1
a27 1
=head2 WARNING:  This version is not binary compatible with Perl 5.004.
d29 1
a29 6
Starting with Perl 5.004_50 there were many deep and far-reaching changes
to the language internals.  If you have dynamically loaded extensions
that you built under perl 5.003 or 5.004, you can continue to use them
with 5.004, but you will need to rebuild and reinstall those extensions
to use them 5.005.  See L<INSTALL> for detailed instructions on how to
upgrade.
d31 6
a36 1
=head2 Default installation structure has changed
d38 1
a38 3
The new Configure defaults are designed to allow a smooth upgrade from
5.004 to 5.005, but you should read L<INSTALL> for a detailed
discussion of the changes in order to adapt them to your system.
d40 5
a44 1
=head2 Perl Source Compatibility
d46 1
a46 2
When none of the experimental features are enabled, there should be
very few user-visible Perl source compatibility issues.
d48 3
a50 6
If threads are enabled, then some caveats apply. C<@@_> and C<$_> become
lexical variables.  The effect of this should be largely transparent to
the user, but there are some boundary conditions under which user will
need to be aware of the issues.  For example, C<local(@@_)> results in
a "Can't localize lexical variable @@_ ..." message.  This may be enabled
in a future version.
d52 4
a55 3
Some new keywords have been introduced.  These are generally expected to
have very little impact on compatibility.  See L<New C<INIT> keyword>,
L<New C<lock> keyword>, and L<New C<qr//> operator>.
d57 1
a57 3
Certain barewords are now reserved.  Use of these will provoke a warning
if you have asked for them with the C<-w> switch.
See L<C<our> is now a reserved word>.
d59 2
a60 1
=head2 C Source Compatibility
d62 1
a62 2
There have been a large number of changes in the internals to support
the new features in this release.
d64 4
a67 1
=over 4
d69 1
a69 1
=item Core sources now require ANSI C compiler
d71 5
a75 1
An ANSI C compiler is now B<required> to build perl.  See F<INSTALL>.
d77 1
a77 1
=item All Perl global variables must now be referenced with an explicit prefix
d79 4
a82 6
All Perl global variables that are visible for use by extensions now
have a C<PL_> prefix.  New extensions should C<not> refer to perl globals
by their unqualified names.  To preserve sanity, we provide limited
backward compatibility for globals that are being widely used like
C<sv_undef> and C<na> (which should now be written as C<PL_sv_undef>,
C<PL_na> etc.)
d84 4
a87 3
If you find that your XS extension does not compile anymore because a
perl global is not visible, try adding a C<PL_> prefix to the global
and rebuild.
d89 4
a92 4
It is strongly recommended that all functions in the Perl API that don't
begin with C<perl> be referenced with a C<Perl_> prefix.  The bare function
names without the C<Perl_> prefix are supported with macros, but this
support may cease in a future release.
d94 1
a94 1
See L<perlguts/"API LISTING">.
d96 4
a99 1
=item Enabling threads has source compatibility issues
d101 1
a101 5
Perl built with threading enabled requires extensions to use the new
C<dTHR> macro to initialize the handle to access per-thread data.
If you see a compiler error that talks about the variable C<thr> not
being declared (when building a module that has XS code),  you need
to add C<dTHR;> at the beginning of the block that elicited the error.
d103 3
a105 4
The API function C<perl_get_sv("@@",FALSE)> should be used instead of
directly accessing perl globals as C<GvSV(errgv)>.  The API call is
backward compatible with existing perls and provides source compatibility
with threading is enabled.
d107 5
a111 1
See L<"C Source Compatibility"> for more information.
d113 1
a113 1
=back
d115 5
a119 1
=head2 Binary Compatibility
d121 3
a123 35
This version is NOT binary compatible with older versions.  All extensions
will need to be recompiled.  Further binaries built with threads enabled
are incompatible with binaries built without.  This should largely be
transparent to the user, as all binary incompatible configurations have
their own unique architecture name, and extension binaries get installed at
unique locations.  This allows coexistence of several configurations in
the same directory hierarchy.  See F<INSTALL>.

=head2 Security fixes may affect compatibility

A few taint leaks and taint omissions have been corrected.  This may lead
to "failure" of scripts that used to work with older versions.  Compiling
with -DINCOMPLETE_TAINTS provides a perl with minimal amounts of changes
to the tainting behavior.  But note that the resulting perl will have
known insecurities.

Oneliners with the C<-e> switch do not create temporary files anymore.

=head2 Relaxed new mandatory warnings introduced in 5.004

Many new warnings that were introduced in 5.004 have been made
optional.  Some of these warnings are still present, but perl's new
features make them less often a problem.  See L<New Diagnostics>.

=head2 Licensing

Perl has a new Social Contract for contributors.  See F<Porting/Contract>.

The license included in much of the Perl documentation has changed.
Most of the Perl documentation was previously under the implicit GNU
General Public License or the Artistic License (at the user's choice).
Now much of the documentation unambigously states the terms under which
it may be distributed.  Those terms are in general much less restrictive
than the GNU GPL.  See L<perl> and the individual perl man pages listed
therein.
d125 1
a125 1
=head1 Core Changes
d127 5
d133 4
a136 1
=head2 Threads
d138 1
a138 3
WARNING: Threading is considered an B<experimental> feature.  Details of the
implementation may change without notice.  There are known limitations
and some bugs.  These are expected to be fixed in future versions.
d140 3
a142 1
See L<README.threads>.
d144 5
a148 2
Mach cthreads (NEXTSTEP, OPENSTEP, Rhapsody) are now supported by
the Thread extension.
d150 1
a150 1
=head2 Compiler
d152 4
a155 4
WARNING: The Compiler and related tools are considered B<experimental>.
Features may change without notice, and there are known limitations
and bugs.  Since the compiler is fully external to perl, the default
configuration will build and install it.
d157 1
a157 11
The Compiler produces three different types of transformations of a
perl program.  The C backend generates C code that captures perl's state
just before execution begins.  It eliminates the compile-time overheads
of the regular perl interpreter, but the run-time performance remains
comparatively the same.  The CC backend generates optimized C code
equivalent to the code path at run-time.  The CC backend has greater
potential for big optimizations, but only a few optimizations are
implemented currently.  The Bytecode backend generates a platform
independent bytecode representation of the interpreter's state
just before execution.  Thus, the Bytecode back end also eliminates
much of the compilation overhead of the interpreter.
d159 4
a162 1
The compiler comes with several valuable utilities.
d164 1
a164 2
C<B::Lint> is an experimental module to detect and warn about suspicious
code, especially the cases that the C<-w> switch does not detect.
d166 5
a170 2
C<B::Deparse> can be used to demystify perl code, and understand
how perl optimizes certain constructs.
d172 1
a172 2
C<B::Xref> generates cross reference reports of all definition and use
of variables, subroutines and formats in a program.
d174 7
a180 2
C<B::Showlex> show the lexical variables used by a subroutine or file
at a glance.
d182 1
a182 1
C<perlcc> is a simple frontend for compiling perl.
d184 1
a184 1
See C<ext/B/README>, L<B>, and the respective compiler modules.
d186 1
a186 1
=head2 Regular Expressions
d188 18
a205 2
Perl's regular expression engine has been seriously overhauled, and
many new constructs are supported.  Several bugs have been fixed.
d207 1
a207 1
Here is an itemized summary:
d209 1
a209 1
=over 4
d211 4
a214 1
=item Many new and improved optimizations
d216 1
a216 1
Changes in the RE engine:
d218 6
a223 7
	Unneeded nodes removed;
	Substrings merged together;
	New types of nodes to process (SUBEXPR)* and similar expressions
	    quickly, used if the SUBEXPR has no side effects and matches
	    strings of the same length;
	Better optimizations by lookup for constant substrings;
	Better search for constants substrings anchored by $ ;
d225 1
a225 1
Changes in Perl code using RE engine:
d227 5
a231 5
	More optimizations to s/longer/short/;
	study() was not working;
	/blah/ may be optimized to an analogue of index() if $& $` $' not seen;
	Unneeded copying of matched-against string removed;
	Only matched part of the string is copying if $` $' were not seen;
d233 2
a234 1
=item Many bug fixes
d236 1
a236 1
Note that only the major bug fixes are listed here.  See F<Changes> for others.
d238 3
a240 10
	Backtracking might not restore start of $3.
	No feedback if max count for * or + on "complex" subexpression
	    was reached, similarly (but at compile time) for {3,34567}
	Primitive restrictions on max count introduced to decrease a 
	    possibility of a segfault;
	(ZERO-LENGTH)* could segfault;
	(ZERO-LENGTH)* was prohibited;
	Long REs were not allowed;
	/RE/g could skip matches at the same position after a 
	  zero-length match;
d242 1
a242 1
=item New regular expression constructs
d244 1
a244 1
The following new syntax elements are supported:
d246 1
a246 8
	(?<=RE)
	(?<!RE)
	(?{ CODE })
	(?i-x)
	(?i:RE)
	(?(COND)YES_RE|NO_RE)
	(?>RE)
	\z
d248 9
a256 1
=item New operator for precompiled regular expressions
d258 1
a258 1
See L<New C<qr//> operator>.
d260 1
a260 1
=item Other improvements
d262 1
a262 7
	Better debugging output (possibly with colors),
            even from non-debugging Perl;
	RE engine code now looks like C, not like assembler;
	Behaviour of RE modifiable by `use re' directive;
	Improved documentation;
	Test suite significantly extended;
	Syntax [:^upper:] etc., reserved inside character classes;
d264 1
a264 1
=item Incompatible changes
d266 4
a269 4
	(?i) localized inside enclosing group;
	$( is not interpolated into RE any more;
	/RE/g may match at the same position (with non-zero length)
	    after a zero-length match (bug fix).
d273 5
a277 1
See L<perlre> and L<perlop>.
d279 2
a280 1
=head2   Improved malloc()
d282 1
a282 1
See banner at the beginning of C<malloc.c> for details.
d284 5
a288 1
=head2 Quicksort is internally implemented
d290 1
a290 6
Perl now contains its own highly optimized qsort() routine.  The new qsort()
is resistant to inconsistent comparison functions, so Perl's C<sort()> will
not provoke coredumps any more when given poorly written sort subroutines.
(Some C library C<qsort()>s that were being used before used to have this
problem.)  In our testing, the new C<qsort()> required the minimal number
of pair-wise compares on average, among all known C<qsort()> implementations.
d292 4
a295 1
See C<perlfunc/sort>.
d297 1
a297 1
=head2 Reliable signals
d299 4
a302 3
Perl's signal handling is susceptible to random crashes, because signals
arrive asynchronously, and the Perl runtime is not reentrant at arbitrary
times.
d304 1
a304 3
However, one experimental implementation of reliable signals is available
when threads are enabled.  See C<Thread::Signal>.  Also see F<INSTALL> for
how to build a Perl capable of threads.
d306 1
a306 1
=head2 Reliable stack pointers
d308 1
a308 5
The internals now reallocate the perl stack only at predictable times.
In particular, magic calls never trigger reallocations of the stack,
because all reentrancy of the runtime is handled using a "stack of stacks".
This should improve reliability of cached stack pointers in the internals
and in XSUBs.
d310 1
a310 1
=head2 More generous treatment of carriage returns
d312 1
a312 9
Perl used to complain if it encountered literal carriage returns in
scripts.  Now they are mostly treated like whitespace within program text.
Inside string literals and here documents, literal carriage returns are
ignored if they occur paired with linefeeds, or get interpreted as whitespace
if they stand alone.  This behavior means that literal carriage returns
in files should be avoided.  You can get the older, more compatible (but
less generous) behavior by defining the preprocessor symbol
C<PERL_STRICT_CR> when building perl.  Of course, all this has nothing
whatever to do with how escapes like C<\r> are handled within strings.
d314 1
a314 4
Note that this doesn't somehow magically allow you to keep all text files
in DOS format.  The generous treatment only applies to files that perl
itself parses.  If your C compiler doesn't allow carriage returns in
files, you may still be unable to build modules that need a C compiler.
d316 2
a317 1
=head2 Memory leaks
d319 1
a319 3
C<substr>, C<pos> and C<vec> don't leak memory anymore when used in lvalue
context.  Many small leaks that impacted applications that embed multiple
interpreters have been fixed.
d321 5
a325 1
=head2 Better support for multiple interpreters
d327 1
a327 4
The build-time option C<-DMULTIPLICITY> has had many of the details
reworked.  Some previously global variables that should have been
per-interpreter now are.  With care, this allows interpreters to call
each other.  See the C<PerlInterp> extension on CPAN.
d329 4
a332 1
=head2 Behavior of local() on array and hash elements is now well-defined
d334 1
a334 1
See L<perlsub/"Temporary Values via local()">.
d336 3
a338 1
=head2 C<%!> is transparently tied to the L<Errno> module
d340 5
a344 1
See L<perlvar>, and L<Errno>.
d346 1
a346 1
=head2 Pseudo-hashes are supported
d348 1
a348 1
See L<perlref>.
d350 4
a353 1
=head2 C<EXPR foreach EXPR> is supported
d355 1
a355 1
See L<perlsyn>.
d357 6
a362 1
=head2 Keywords can be globally overridden
d364 1
a364 1
See L<perlsub>.
d366 2
a367 1
=head2 C<$^E> is meaningful on Win32
d369 5
a373 1
See L<perlvar>.
d375 8
a382 1
=head2 C<foreach (1..1000000)> optimized
d384 2
a385 2
C<foreach (1..1000000)> is now optimized into a counting loop.  It does
not try to allocate a 1000000-size list anymore.
d387 3
a389 1
=head2 C<Foo::> can be used as implicitly quoted package name
d391 2
a392 6
Barewords caused unintuitive behavior when a subroutine with the same
name as a package happened to be defined.  Thus, C<new Foo @@args>,
use the result of the call to C<Foo()> instead of C<Foo> being treated
as a literal.  The recommended way to write barewords in the indirect
object slot is C<new Foo:: @@args>.  Note that the method C<new()> is
called with a first argument of C<Foo>, not C<Foo::> when you do that.
d394 2
a395 1
=head2 C<exists $Foo::{Bar::}> tests existence of a package
d397 1
a397 3
It was impossible to test for the existence of a package without
actually creating it before.  Now C<exists $Foo::{Bar::}> can be
used to test if the C<Foo::Bar> namespace has been created.
d399 5
a403 1
=head2 Better locale support
d405 2
a406 1
See L<perllocale>.
d408 2
a409 1
=head2 Experimental support for 64-bit platforms
d411 1
a411 9
Perl5 has always had 64-bit support on systems with 64-bit longs.
Starting with 5.005, the beginnings of experimental support for systems
with 32-bit long and 64-bit 'long long' integers has been added.
If you add -DUSE_LONG_LONG to your ccflags in config.sh (or manually
define it in perl.h) then perl will be built with 'long long' support.
There will be many compiler warnings, and the resultant perl may not
work on all systems.  There are many other issues related to
third-party extensions and libraries.  This option exists to allow
people to work on those issues.
d413 4
a416 1
=head2 prototype() returns useful results on builtins
d418 1
a418 1
See L<perlfunc/prototype>.
d420 9
a428 1
=head2 Extended support for exception handling
d430 1
a430 3
C<die()> now accepts a reference value, and C<$@@> gets set to that
value in exception traps.  This makes it possible to propagate
exception objects.  This is an undocumented B<experimental> feature.
d432 6
a437 1
=head2 Re-blessing in DESTROY() supported for chaining DESTROY() methods
d439 4
a442 1
See L<perlobj/Destructors>.
d444 1
a444 1
=head2 All C<printf> format conversions are handled internally
d446 4
a449 1
See L<perlfunc/printf>.
d451 1
a451 1
=head2 New C<INIT> keyword
d453 3
a455 3
C<INIT> subs are like C<BEGIN> and C<END>, but they get run just before
the perl runtime begins execution.  e.g., the Perl Compiler makes use of
C<INIT> blocks to initialize and resolve pointers to XSUBs.
d457 6
a462 1
=head2 New C<lock> keyword
d464 1
a464 2
The C<lock> keyword is the fundamental synchronization primitive
in threaded perl.  When threads are not enabled, it is currently a noop.
d466 2
a467 3
To minimize impact on source compatibility this keyword is "weak", i.e., any
user-defined subroutine of the same name overrides it, unless a C<use Thread>
has been seen.
d469 1
a469 1
=head2 New C<qr//> operator
d471 8
a478 4
The C<qr//> operator, which is syntactically similar to the other quote-like
operators, is used to create precompiled regular expressions.  This compiled
form can now be explicitly passed around in variables, and interpolated in
other regular expressions.  See L<perlop>.
d480 1
a480 1
=head2 C<our> is now a reserved word
d482 4
a485 2
Calling a subroutine with the name C<our> will now provoke a warning when
using the C<-w> switch.
d487 1
a487 1
=head2 Tied arrays are now fully supported
d489 2
a490 1
See L<Tie::Array>.
d492 1
a492 1
=head2 Tied handles support is better
d494 4
a497 2
Several missing hooks have been added.  There is also a new base class for
TIEARRAY implementations.  See L<Tie::Array>.
d499 23
a521 1
=head2 4th argument to substr
d523 1
a523 2
substr() can now both return and replace in one operation.  The optional
4th argument is the replacement string.  See L<perlfunc/substr>.
d525 1
a525 1
=head2 Negative LENGTH argument to splice
d527 2
a528 3
splice() with a negative LENGTH argument now work similar to what the
LENGTH did for substr().  Previously a negative LENGTH was treated as
0.  See L<perlfunc/splice>.
d530 1
a530 1
=head2 Magic lvalues are now more magical
d532 1
a532 10
When you say something like C<substr($x, 5) = "hi">, the scalar returned
by substr() is special, in that any modifications to it affect $x.
(This is called a 'magic lvalue' because an 'lvalue' is something on
the left side of an assignment.)  Normally, this is exactly what you
would expect to happen, but Perl uses the same magic if you use substr(),
pos(), or vec() in a context where they might be modified, like taking
a reference with C<\> or as an argument to a sub that modifies C<@@_>.
In previous versions, this 'magic' only went one way, but now changes
to the scalar the magic refers to ($x in the above example) affect the
magic lvalue too. For instance, this code now acts differently:
d534 9
a542 4
    $x = "hello";
    sub printit {
	$x = "g'bye";
	print $_[0], "\n";
a543 1
    printit(substr($x, 0, 5));
d545 1
a545 1
In previous versions, this would print "hello", but it now prints "g'bye".
d547 16
a562 1
=head2 E<lt>E<gt> now reads in records
d564 1
a564 3
If C<$/> is a referenence to an integer, or a scalar that holds an integer,
E<lt>E<gt> will read in records instead of lines. For more info, see
L<perlvar/$/>.
d566 8
a573 1
=head2 pack() format 'Z' supported
d575 1
a575 2
The new format type 'Z' is useful for packing and unpacking null-terminated
strings.  See L<perlfunc/"pack">.
d577 1
a577 1
=head1 Significant bug fixes
d579 1
a579 1
=head2 E<lt>HANDLEE<gt> on empty files
d581 1
a581 3
With C<$/> set to C<undef>, slurping an empty file returns a string of
zero length (instead of C<undef>, as it used to) for the first time the
HANDLE is read.  Subsequent reads yield C<undef>.
d583 9
a591 2
This means that the following will append "foo" to an empty file (it used
to not do anything before):
d593 1
a593 1
    perl -0777 -pi -e 's/^/foo/' empty_file
d595 9
a603 1
Note that the behavior of:
d605 1
a605 1
    perl -pi -e 's/^/foo/' empty_file
d607 10
a616 1
is unchanged (it continues to leave the file empty).
d618 1
a618 1
=head1 Supported Platforms
d620 2
a621 3
Configure has many incremental improvements.  Site-wide policy for building
perl can now be made persistent, via Policy.sh.  Configure also records
the command-line arguments used in F<config.sh>.
d623 5
a627 1
=head2 New Platforms
d629 1
a629 1
BeOS is now supported.  See L<README.beos>.
d631 2
a632 1
DOS is now supported under the DJGPP tools.  See L<README.dos>.
d634 4
a637 1
GNU/Hurd is now supported.
d639 1
a639 1
MiNT is now supported.  See L<README.mint>.
d641 1
a641 1
MPE/iX is now supported.  See L<README.mpeix>.
d643 1
a643 1
MVS (aka OS390, aka Open Edition) is now supported.  See L<README.os390>.
d645 1
a645 1
Stratus VOS is now supported.  See L<README.vos>.
d647 3
a649 1
=head2 Changes in existing support
d651 5
a655 3
Win32 support has been vastly enhanced.  Support for Perl Object, a C++
encapsulation of Perl.  GCC and EGCS are now supported on Win32.
See F<README.win32>, aka L<perlwin32>.
d657 1
a657 1
VMS configuration system has been rewritten.  See L<README.vms>.
d659 3
a661 1
The hints files for most Unix platforms have seen incremental improvements.
d663 1
a663 1
=head1 Modules and Pragmata
d665 7
a671 1
=head2 New Modules
d675 1
a675 1
=item B
d677 35
a711 1
Perl compiler and tools.  See L<B>.
d713 1
a713 1
=item Data::Dumper
d715 1
a715 1
A module to pretty print Perl data.  See L<Data::Dumper>.
d717 2
a718 1
=item Dumpvalue
d720 3
a722 1
A module to dump perl values to the screen. See L<Dumpvalue>.
d724 1
a724 1
=item Errno
d726 1
a726 1
A module to look up errors more conveniently.  See L<Errno>.
d728 1
a728 1
=item File::Spec
d730 11
a740 1
A portable API for file operations.
d742 5
a746 1
=item ExtUtils::Installed
d748 1
a748 1
Query and manage installed modules.
d750 1
a750 1
=item ExtUtils::Packlist
d752 1
a752 1
Manipulate .packlist files.
d754 1
a754 1
=item Fatal
d756 1
a756 1
Make functions/builtins succeed or die.
d758 7
a764 1
=item IPC::SysV
d766 1
a766 2
Constants and other support infrastructure for System V IPC operations
in perl.
d768 3
a770 1
=item Test
d772 1
a772 1
A framework for writing testsuites.
d774 1
a774 1
=item Tie::Array
d776 3
a778 1
Base class for tied arrays.
d780 2
a781 1
=item Tie::Handle
d783 1
a783 1
Base class for tied handles.
d785 2
a786 1
=item Thread
d788 1
a788 1
Perl thread creation, manipulation, and support.
d790 2
a791 1
=item attrs
d793 5
a797 1
Set subroutine attributes.
d799 4
a802 1
=item fields
d804 1
a804 1
Compile-time class fields.
d806 1
a806 1
=item re
d808 10
a817 1
Various pragmata to control behavior of regular expressions.
d821 142
a962 1
=head2 Changes in existing modules
d966 9
a974 1
=item Benchmark
d976 1
a976 5
You can now run tests for I<n> seconds instead of guessing the right
number of tests to run: e.g. timethese(-5, ...) will run each of the
codes for at least 5 CPU seconds.  Zero as the "number of repetitions"
means "for at least 3 CPU seconds".  The output format has also
changed.  For example: 
d978 1
a978 1
use Benchmark;$x=3;timethese(-5,{a=>sub{$x*$x},b=>sub{$x**2}})
d980 1
a980 1
will now output something like this:
d982 1
a982 3
Benchmark: running a, b, each for at least 5 CPU seconds...
         a:  5 wallclock secs ( 5.77 usr +  0.00 sys =  5.77 CPU) @@ 200551.91/s (n=1156516)
         b:  4 wallclock secs ( 5.00 usr +  0.02 sys =  5.02 CPU) @@ 159605.18/s (n=800686)
d984 2
a985 2
New features: "each for at least N CPU seconds...", "wallclock secs",
and the "@@ operations/CPU second (n=operations)".
d987 1
a987 1
=item Carp
d989 2
a990 2
Carp has a new function cluck(). cluck() warns, like carp(), but also adds
a stack backtrace to the error message, like confess().
d992 1
a992 1
=item CGI
d994 1
a994 1
CGI has been updated to version 2.42.
d996 1
a996 1
=item Fcntl
d998 2
a999 5
More Fcntl constants added: F_SETLK64, F_SETLKW64, O_LARGEFILE for
large (more than 4G) file access (the 64-bit support is not yet
working, though, so no need to get overly excited), Free/Net/OpenBSD
locking behaviour flags F_FLOCK, F_POSIX, Linux F_SHLCK, and
O_ACCMODE: the mask of O_RDONLY, O_WRONLY, and O_RDWR.
d1001 1
a1001 1
=item Math::Complex
d1003 1
a1003 2
The accessor methods Re, Im, arg, abs, rho, and theta, can now also
act as mutators (accessor $z->Re(), mutator $z->Re(3)).
d1005 1
a1005 1
=item Math::Trig
d1007 2
a1008 2
A little bit of radial trigonometry (cylindrical and spherical) added:
radial coordinate conversions and the great circle distance.
d1010 9
a1018 1
=item POSIX
d1020 1
a1020 1
POSIX now has its own platform-specific hints files.
d1022 3
a1024 1
=item DB_File
d1026 1
a1026 1
DB_File supports version 2.x of Berkeley DB.  See C<ext/DB_File/Changes>.
d1028 1
a1028 1
=item MakeMaker
d1030 1
a1030 4
MakeMaker now supports writing empty makefiles, provides a way to
specify that site umask() policy should be honored.  There is also
better support for manipulation of .packlist files, and getting
information about installed modules.
d1032 1
a1032 6
Extensions that have both architecture-dependent and
architecture-independent files are now always installed completely in
the architecture-dependent locations.  Previously, the shareable parts
were shared both across architectures and across perl versions and were
therefore liable to be overwritten with newer versions that might have
subtle incompatibilities.
d1034 4
a1037 1
=item CPAN
d1039 1
a1039 1
See <perlmodinstall> and L<CPAN>.
d1041 1
a1041 1
=item Cwd
d1043 1
a1043 1
Cwd::cwd is faster on most platforms.
d1045 1
a1045 1
=item Benchmark
d1047 16
a1062 1
Keeps better time.
d1066 1
a1066 1
=head1 Utility Changes
d1068 1
a1068 1
C<h2ph> and related utilities have been vastly overhauled.
d1070 1
a1070 1
C<perlcc>, a new experimental front end for the compiler is available.
d1072 29
a1100 2
The crude GNU C<configure> emulator is now called C<configure.gnu> to
avoid trampling on C<Configure> under case-insensitive filesystems.
d1102 1
a1102 4
C<perldoc> used to be rather slow.  The slower features are now optional.
In particular, case-insensitive searches need the C<-i> switch, and
recursive searches need C<-r>.  You can set these switches in the
C<PERLDOC> environment variable to get the old behavior.
d1106 14
a1119 1
Config.pm now has a glossary of variables.
d1121 1
a1121 2
F<Porting/patching.pod> has detailed instructions on how to create and
submit patches for perl.
d1123 1
a1123 1
L<perlport> specifies guidelines on how to write portably. 
d1125 1
a1125 2
L<perlmodinstall> describes how to fetch and install modules from C<CPAN>
sites.
d1127 1
a1127 1
Some more Perl traps are documented now.  See L<perltrap>.
d1129 1
a1129 1
L<perlopentut> gives a tutorial on using open().
d1131 1
a1131 1
L<perlreftut> gives a tutorial on references.
d1133 12
a1144 1
L<perlthrtut> gives a tutorial on threads.
d1148 14
d1164 36
a1199 1
=item Ambiguous call resolved as CORE::%s(), qualify as such or use &
d1201 1
a1201 4
(W) A subroutine you have declared has the same name as a Perl keyword,
and you have used the name without qualification for calling one or the
other.  Perl decided to call the builtin because the subroutine is
not imported.
d1203 4
a1206 4
To force interpretation as a subroutine call, either put an ampersand
before the subroutine name, or qualify the name with its package.
Alternatively, you can import the subroutine (or pretend that it's
imported with the C<use subs> pragma).
d1208 1
a1208 3
To silently interpret it as the Perl operator, use the C<CORE::> prefix
on the operator (e.g. C<CORE::log($x)>) or by declaring the subroutine
to be an object method (see L<attrs>).
d1210 3
a1212 1
=item Bad index while coercing array into hash
d1214 1
a1214 3
(F) The index looked up in the hash found as the 0'th element of a
pseudo-hash is not legal.  Index values must be at 1 or greater.
See L<perlref>.
d1216 4
a1219 1
=item Bareword "%s" refers to nonexistent package
d1221 1
a1221 3
(W) You used a qualified bareword of the form C<Foo::>, but
the compiler saw no other uses of that namespace before that point.
Perhaps you need to predeclare a package?
d1223 2
a1224 1
=item Can't call method "%s" on an undefined value
d1226 1
a1226 3
(F) You used the syntax of a method call, but the slot filled by the
object reference or package name contains an undefined value.
Something like this will reproduce the error:
d1228 2
a1229 3
    $BADREF = 42;
    process $BADREF 1,2,3;
    $BADREF->process(1,2,3);
d1231 1
a1231 1
=item Can't check filesystem of script "%s" for nosuid
d1233 3
a1235 1
(P) For some reason you can't check the filesystem of the script for nosuid.
d1237 1
a1237 1
=item Can't coerce array into hash
d1239 3
a1241 3
(F) You used an array where a hash was expected, but the array has no
information on how to map from keys to array indices.  You can do that
only with arrays that have a hash reference at index 0.
d1243 1
a1243 1
=item Can't goto subroutine from an eval-string
d1245 1
a1245 2
(F) The "goto subroutine" call can't be used to jump out of an eval "string".
(You can use it to jump out of an eval {BLOCK}, but you probably don't want to.)
d1247 1
a1247 1
=item Can't localize pseudo-hash element
d1249 2
a1250 4
(F) You said something like C<local $ar-E<gt>{'key'}>, where $ar is
a reference to a pseudo-hash.  That hasn't been implemented yet, but
you can get a similar effect by localizing the corresponding array
element directly -- C<local $ar-E<gt>[$ar-E<gt>[0]{'key'}]>.
d1252 1
a1252 1
=item Can't use %%! because Errno.pm is not available
d1254 3
a1256 3
(F) The first time the %! hash is used, perl automatically loads the
Errno.pm module. The Errno module is expected to tie the %! hash to
provide symbolic names for C<$!> errno values.
d1258 1
a1258 1
=item Cannot find an opnumber for "%s"
d1260 4
a1263 2
(F) A string of a form C<CORE::word> was given to prototype(), but
there is no builtin with the name C<word>.
d1265 1
a1265 1
=item Character class syntax [. .] is reserved for future extensions
d1267 3
a1269 5
(W) Within regular expression character classes ([]) the syntax beginning
with "[." and ending with ".]" is reserved for future extensions.
If you need to represent those character sequences inside a regular
expression character class, just quote the square brackets with the
backslash: "\[." and ".\]".
d1271 1
a1271 1
=item Character class syntax [: :] is reserved for future extensions
d1273 2
a1274 5
(W) Within regular expression character classes ([]) the syntax beginning
with "[:" and ending with ":]" is reserved for future extensions.
If you need to represent those character sequences inside a regular
expression character class, just quote the square brackets with the
backslash: "\[:" and ":\]".
d1276 1
a1276 1
=item Character class syntax [= =] is reserved for future extensions
d1278 3
a1280 5
(W) Within regular expression character classes ([]) the syntax
beginning with "[=" and ending with "=]" is reserved for future extensions.
If you need to represent those character sequences inside a regular
expression character class, just quote the square brackets with the
backslash: "\[=" and "=\]".
d1282 1
a1282 1
=item %s: Eval-group in insecure regular expression
d1284 3
a1286 3
(F) Perl detected tainted data when trying to compile a regular expression
that contains the C<(?{ ... })> zero-width assertion, which is unsafe.
See L<perlre/(?{ code })>, and L<perlsec>.
d1288 1
a1288 1
=item %s: Eval-group not allowed, use re 'eval'
d1290 8
a1297 3
(F) A regular expression contained the C<(?{ ... })> zero-width assertion,
but that construct is only allowed when the C<use re 'eval'> pragma is
in effect.  See L<perlre/(?{ code })>.
d1299 1
a1299 1
=item %s: Eval-group not allowed at run time
d1301 2
a1302 6
(F) Perl tried to compile a regular expression containing the C<(?{ ... })>
zero-width assertion at run time, as it would when the pattern contains
interpolated values.  Since that is a security risk, it is not allowed.
If you insist, you may still do this by explicitly building the pattern
from an interpolated string at run time and using that in an eval().
See L<perlre/(?{ code })>.
d1304 1
a1304 1
=item Explicit blessing to '' (assuming package main)
d1306 1
a1306 4
(W) You are blessing a reference to a zero length string.  This has
the effect of blessing the reference into the package main.  This is
usually not what you want.  Consider providing a default target
package, e.g. bless($ref, $p || 'MyPackage');
d1308 1
a1308 1
=item Illegal hex digit ignored
d1310 1
a1310 3
(W) You may have tried to use a character other than 0 - 9 or A - F in a
hexadecimal number.  Interpretation of the hexadecimal number stopped
before the illegal character.
d1312 1
a1312 1
=item No such array field
d1314 4
a1317 3
(F) You tried to access an array as a hash, but the field name used is
not defined.  The hash at index 0 should map all valid field names to
array indices for that to work.
d1319 1
a1319 1
=item No such field "%s" in variable %s of type %s
d1321 3
a1323 4
(F) You tried to access a field of a typed variable where the type
does not know about the field name.  The field names are looked up in
the %FIELDS hash in the type package at compile time.  The %FIELDS hash
is usually set up with the 'fields' pragma.
d1325 1
a1325 1
=item Out of memory during ridiculously large request
d1327 4
a1330 3
(F) You can't allocate more than 2^31+"small amount" bytes.  This error
is most likely to be caused by a typo in the Perl program. e.g., C<$arr[time]>
instead of C<$arr[$time]>.
d1332 1
a1332 1
=item Range iterator outside integer range
d1334 2
a1335 4
(F) One (or both) of the numeric arguments to the range operator ".."
are outside the range which can be represented by integers internally.
One possible workaround is to force Perl to use magical string
increment by prepending "0" to your numbers.
d1337 5
a1341 1
=item Recursive inheritance detected while looking for method '%s' in package '%s'
d1343 1
a1343 2
(F) More than 100 levels of inheritance were encountered while invoking a
method.  Probably indicates an unintended loop in your inheritance hierarchy.
d1345 4
a1348 1
=item Reference found where even-sized list expected
d1350 1
a1350 4
(W) You gave a single reference where Perl was expecting a list with
an even number of elements (for assignment to a hash). This
usually means that you used the anon hash constructor when you meant 
to use parens. In any case, a hash requires key/value B<pairs>.
d1352 1
a1352 4
    %hash = { one => 1, two => 2, };   # WRONG
    %hash = [ qw/ an anon array / ];   # WRONG
    %hash = ( one => 1, two => 2, );   # right
    %hash = qw( one 1 two 2 );                 # also fine
d1354 1
a1354 1
=item Undefined value assigned to typeglob
d1356 5
a1360 2
(W) An undefined value was assigned to a typeglob, a la C<*foo = undef>.
This does nothing.  It's possible that you really mean C<undef *foo>.
d1362 1
a1362 1
=item Use of reserved word "%s" is deprecated
d1364 4
a1367 6
(D) The indicated bareword is a reserved word.  Future versions of perl
may use it as a keyword, so you're better off either explicitly quoting
the word in a manner appropriate for its context of use, or using a
different name altogether.  The warning can be suppressed for subroutine
names by either adding a C<&> prefix, or using a package qualifier,
e.g. C<&our()>, or C<Foo::our()>.
d1369 1
a1369 1
=item perl: warning: Setting locale failed.
d1371 4
a1374 1
(S) The whole warning message will look something like:
d1376 2
a1377 6
       perl: warning: Setting locale failed.
       perl: warning: Please check that your locale settings:
               LC_ALL = "En_US",
               LANG = (unset)
           are supported and installed on your system.
       perl: warning: Falling back to the standard locale ("C").
d1379 4
a1382 9
Exactly what were the failed locale settings varies.  In the above the
settings were that the LC_ALL was "En_US" and the LANG had no value.
This error means that Perl detected that you and/or your system
administrator have set up the so-called variable system but Perl could
not use those settings.  This was not dead serious, fortunately: there
is a "default locale" called "C" that Perl can and will use, the
script will be run.  Before you really fix the problem, however, you
will get the same error message each time you run Perl.  How to really
fix the problem can be found in L<perllocale/"LOCALE PROBLEMS">.
d1384 121
a1504 1
=back
d1506 1
d1508 2
a1509 1
=head1 Obsolete Diagnostics
d1511 1
a1511 1
=over
d1513 6
a1518 1
=item Can't mktemp()
d1520 1
a1520 2
(F) The mktemp() routine failed for some reason while trying to process
a B<-e> switch.  Maybe your /tmp partition is full, or clobbered.
d1522 2
a1523 1
Removed because B<-e> doesn't use temporary files any more.
d1525 1
a1525 1
=item Can't write to temp file for B<-e>: %s
d1527 1
a1527 2
(F) The write routine failed for some reason while trying to process
a B<-e> switch.  Maybe your /tmp partition is full, or clobbered.
d1529 1
a1529 1
Removed because B<-e> doesn't use temporary files any more.
d1531 1
a1531 1
=item Cannot open temporary file
d1533 1
a1533 2
(F) The create routine failed for some reason while trying to process
a B<-e> switch.  Maybe your /tmp partition is full, or clobbered.
d1535 4
a1538 1
Removed because B<-e> doesn't use temporary files any more.
d1540 1
a1540 1
=item regexp too big
d1542 2
a1543 5
(F) The current implementation of regular expressions uses shorts as
address offsets within a string.  Unfortunately this means that if
the regular expression compiles to longer than 32767, it'll blow up.
Usually when you want a regular expression this big, there is a better
way to do it with multiple statements.  See L<perlre>.
d1545 1
a1545 1
=back
d1547 5
a1551 1
=head1 Configuration Changes
d1553 1
a1553 4
You can use "Configure -Uinstallusrbinperl" which causes installperl
to skip installing perl also as /usr/bin/perl.  This is useful if you
prefer not to modify /usr/bin for some reason or another but harmful
because many scripts assume to find Perl in /usr/bin/perl.
d1572 3
a1574 1
The F<INSTALL> file for how to build Perl.
d1578 1
a1578 1
The F<Artistic> and F<Copying> files for copyright information.
d1582 3
a1584 4
Written by Gurusamy Sarathy <F<gsar@@umich.edu>>, with many contributions
from The Perl Porters.

Send omissions or corrections to <F<perlbug@@perl.com>>.
d1586 1
a1586 1
=cut
@


1.1.1.2
log
@virgin perl 5.6.0
@
text
@d3 1
a3 1
perldelta - what's new for perl v5.6.0
d7 1
a7 1
This document describes differences between the 5.005 release and this one.
d9 1
a9 1
=head1 Core Enhancements
d11 7
a17 1
=head2 Interpreter cloning, threads, and concurrency
d19 2
a20 100
Perl 5.005_63 introduces the beginnings of support for running multiple
interpreters concurrently in different threads.  In conjunction with
the perl_clone() API call, which can be used to selectively duplicate
the state of any given interpreter, it is possible to compile a
piece of code once in an interpreter, clone that interpreter
one or more times, and run all the resulting interpreters in distinct
threads.

On the Windows platform, this feature is used to emulate fork() at the
interpreter level.  See L<perlfork> for details about that.

This feature is still in evolution.  It is eventually meant to be used
to selectively clone a subroutine and data reachable from that
subroutine in a separate interpreter and run the cloned subroutine
in a separate thread.  Since there is no shared data between the
interpreters, little or no locking will be needed (unless parts of
the symbol table are explicitly shared).  This is obviously intended
to be an easy-to-use replacement for the existing threads support.

Support for cloning interpreters and interpreter concurrency can be
enabled using the -Dusethreads Configure option (see win32/Makefile for
how to enable it on Windows.)  The resulting perl executable will be
functionally identical to one that was built with -Dmultiplicity, but
the perl_clone() API call will only be available in the former.

-Dusethreads enables the cpp macro USE_ITHREADS by default, which in turn
enables Perl source code changes that provide a clear separation between
the op tree and the data it operates with.  The former is immutable, and
can therefore be shared between an interpreter and all of its clones,
while the latter is considered local to each interpreter, and is therefore
copied for each clone.

Note that building Perl with the -Dusemultiplicity Configure option
is adequate if you wish to run multiple B<independent> interpreters
concurrently in different threads.  -Dusethreads only provides the
additional functionality of the perl_clone() API call and other
support for running B<cloned> interpreters concurrently.

    NOTE: This is an experimental feature.  Implementation details are
    subject to change.

=head2 Lexically scoped warning categories

You can now control the granularity of warnings emitted by perl at a finer
level using the C<use warnings> pragma.  L<warnings> and L<perllexwarn>
have copious documentation on this feature.

=head2 Unicode and UTF-8 support

Perl now uses UTF-8 as its internal representation for character
strings.  The C<utf8> and C<bytes> pragmas are used to control this support
in the current lexical scope.  See L<perlunicode>, L<utf8> and L<bytes> for
more information.

This feature is expected to evolve quickly to support some form of I/O
disciplines that can be used to specify the kind of input and output data
(bytes or characters).  Until that happens, additional modules from CPAN
will be needed to complete the toolkit for dealing with Unicode.

    NOTE: This should be considered an experimental feature.  Implementation
    details are subject to change.

=head2 Support for interpolating named characters

The new C<\N> escape interpolates named characters within strings.
For example, C<"Hi! \N{WHITE SMILING FACE}"> evaluates to a string
with a unicode smiley face at the end.

=head2 "our" declarations

An "our" declaration introduces a value that can be best understood
as a lexically scoped symbolic alias to a global variable in the
package that was current where the variable was declared.  This is
mostly useful as an alternative to the C<vars> pragma, but also provides
the opportunity to introduce typing and other attributes for such
variables.  See L<perlfunc/our>.

=head2 Support for strings represented as a vector of ordinals

Literals of the form C<v1.2.3.4> are now parsed as a string composed
of characters with the specified ordinals.  This is an alternative, more
readable way to construct (possibly unicode) strings instead of
interpolating characters, as in C<"\x{1}\x{2}\x{3}\x{4}">.  The leading
C<v> may be omitted if there are more than two ordinals, so C<1.2.3> is
parsed the same as C<v1.2.3>.

Strings written in this form are also useful to represent version "numbers".
It is easy to compare such version "numbers" (which are really just plain
strings) using any of the usual string comparison operators C<eq>, C<ne>,
C<lt>, C<gt>, etc., or perform bitwise string operations on them using C<|>,
C<&>, etc.

In conjunction with the new C<$^V> magic variable (which contains
the perl version as a string), such literals can be used as a readable way
to check if you're running a particular version of Perl:

    # this will parse in older versions of Perl also
    if ($^V and $^V gt v5.6.0) {
        # new features supported
    }
d22 1
a22 66
C<require> and C<use> also have some special magic to support such literals.
They will be interpreted as a version rather than as a module name:

    require v5.6.0;		# croak if $^V lt v5.6.0
    use v5.6.0;			# same, but croaks at compile-time

Alternatively, the C<v> may be omitted if there is more than one dot:

    require 5.6.0;
    use 5.6.0;

Also, C<sprintf> and C<printf> support the Perl-specific format flag C<%v>
to print ordinals of characters in arbitrary strings:

    printf "v%vd", $^V;		# prints current version, such as "v5.5.650"
    printf "%*vX", ":", $addr;	# formats IPv6 address
    printf "%*vb", " ", $bits;	# displays bitstring

See L<perldata/"Scalar value constructors"> for additional information.

=head2 Improved Perl version numbering system

Beginning with Perl version 5.6.0, the version number convention has been
changed to a "dotted integer" scheme that is more commonly found in open
source projects.

Maintenance versions of v5.6.0 will be released as v5.6.1, v5.6.2 etc.
The next development series following v5.6.0 will be numbered v5.7.x,
beginning with v5.7.0, and the next major production release following
v5.6.0 will be v5.8.0.

The English module now sets $PERL_VERSION to $^V (a string value) rather
than C<$]> (a numeric value).  (This is a potential incompatibility.
Send us a report via perlbug if you are affected by this.)

The v1.2.3 syntax is also now legal in Perl.
See L<Support for strings represented as a vector of ordinals> for more on that.

To cope with the new versioning system's use of at least three significant
digits for each version component, the method used for incrementing the
subversion number has also changed slightly.  We assume that versions older
than v5.6.0 have been incrementing the subversion component in multiples of
10.  Versions after v5.6.0 will increment them by 1.  Thus, using the new
notation, 5.005_03 is the "same" as v5.5.30, and the first maintenance
version following v5.6.0 will be v5.6.1 (which should be read as being
equivalent to a floating point value of 5.006_001 in the older format,
stored in C<$]>).

=head2 New syntax for declaring subroutine attributes

Formerly, if you wanted to mark a subroutine as being a method call or
as requiring an automatic lock() when it is entered, you had to declare
that with a C<use attrs> pragma in the body of the subroutine.
That can now be accomplished with declaration syntax, like this:

    sub mymethod : locked method ;
    ...
    sub mymethod : locked method {
	...
    }

    sub othermethod :locked :method ;
    ...
    sub othermethod :locked :method {
	...
    }
d24 1
d26 6
a31 2
(Note how only the first C<:> is mandatory, and whitespace surrounding
the C<:> is optional.)
d33 1
a33 2
F<AutoSplit.pm> and F<SelfLoader.pm> have been updated to keep the attributes
with the stubs they provide.  See L<attributes>.
d35 3
a37 1
=head2 File and directory handles can be autovivified
d39 1
a39 21
Similar to how constructs such as C<< $x->[0] >> autovivify a reference,
handle constructors (open(), opendir(), pipe(), socketpair(), sysopen(),
socket(), and accept()) now autovivify a file or directory handle
if the handle passed to them is an uninitialized scalar variable.  This
allows the constructs such as C<open(my $fh, ...)> and C<open(local $fh,...)>
to be used to create filehandles that will conveniently be closed
automatically when the scope ends, provided there are no other references
to them.  This largely eliminates the need for typeglobs when opening
filehandles that must be passed around, as in the following example:

    sub myopen {
        open my $fh, "@@_"
	     or die "Can't open '@@_': $!";
	return $fh;
    }

    {
        my $f = myopen("</etc/motd");
	print <$f>;
	# $f implicitly closed here
    }
d41 2
a42 1
=head2 open() with more than two arguments
d44 6
a49 4
If open() is passed three arguments instead of two, the second argument
is used as the mode and the third argument is taken to be the file name.
This is primarily useful for protecting against unintended magic behavior
of the traditional two-argument form.  See L<perlfunc/open>.
d51 3
a53 1
=head2 64-bit support
d55 3
a57 1
Any platform that has 64-bit integers either
d59 1
a59 3
	(1) natively as longs or ints
	(2) via special compiler flags
	(3) using long long or int64_t
d61 2
a62 1
is able to use "quads" (64-bit integers) as follows:
d66 1
a66 3
=item *

constants (decimal, hexadecimal, octal, binary) in the code 
d68 1
a68 1
=item *
d70 1
a70 1
arguments to oct() and hex()
d72 6
a77 1
=item *
d79 3
a81 1
arguments to print(), printf() and sprintf() (flag prefixes ll, L, q)
d83 4
a86 1
=item *
d88 1
a88 1
printed as such
d90 1
a90 1
=item *
d92 5
a96 1
pack() and unpack() "q" and "Q" formats
d98 4
a101 1
=item *
d103 1
a103 11
in basic arithmetics: + - * / % (NOTE: operating close to the limits
of the integer values may produce surprising results)

=item *

in bit arithmetics: & | ^ ~ << >> (NOTE: these used to be forced 
to be 32 bits wide but now operate on the full native width.)

=item *

vec()
d107 1
a107 2
Note that unless you have the case (a) you will have to configure
and compile Perl using the -Duse64bitint Configure flag.
d109 7
a115 2
    NOTE: The Configure flags -Duselonglong and -Duse64bits have been
    deprecated.  Use -Duse64bitint instead.
d117 1
a117 4
There are actually two modes of 64-bitness: the first one is achieved
using Configure -Duse64bitint and the second one using Configure
-Duse64bitall.  The difference is that the first one is minimal and
the second one maximal.  The first works in more places than the second.
d119 5
a123 7
The C<use64bitint> does only as much as is required to get 64-bit
integers into Perl (this may mean, for example, using "long longs")
while your memory may still be limited to 2 gigabytes (because your
pointers could still be 32-bit).  Note that the name C<64bitint> does
not imply that your C compiler will be using 64-bit C<int>s (it might,
but it doesn't have to): the C<use64bitint> means that you will be
able to have 64 bits wide scalar values.
d125 1
a125 6
The C<use64bitall> goes all the way by attempting to switch also
integers (if it can), longs (and pointers) to being 64-bit.  This may
create an even more binary incompatible Perl than -Duse64bitint: the
resulting executable may not run at all in a 32-bit box, or you may
have to reboot/reconfigure/rebuild your operating system to be 64-bit
aware.
d127 1
a127 2
Natively 64-bit systems like Alpha and Cray need neither -Duse64bitint
nor -Duse64bitall.
d129 3
a131 6
Last but not least: note that due to Perl's habit of always using
floating point numbers, the quads are still not true integers.
When quads overflow their limits (0...18_446_744_073_709_551_615 unsigned,
-9_223_372_036_854_775_808...9_223_372_036_854_775_807 signed), they
are silently promoted to floating point numbers, after which they will
start losing precision (in their lower digits).
d133 1
a133 4
    NOTE: 64-bit support is still experimental on most platforms.
    Existing support only covers the LP64 data model.  In particular, the
    LLP64 data model is not yet supported.  64-bit libraries and system
    APIs on many platforms have not stabilized--your mileage may vary.
d135 1
a135 1
=head2 Large file support
d137 7
a143 3
If you have filesystems that support "large files" (files larger than
2 gigabytes), you may now also be able to create and access them from
Perl.
d145 1
a145 2
    NOTE: The default action is to enable large file support, if
    available on the platform.
a146 3
If the large file support is on, and you have a Fcntl constant
O_LARGEFILE, the O_LARGEFILE is automatically added to the flags
of sysopen().
d148 1
a148 2
Beware that unless your filesystem also supports "sparse files" seeking
to umpteen petabytes may be inadvisable.
d150 3
a152 5
Note that in addition to requiring a proper file system to do large
files you may also need to adjust your per-process (or your
per-system, or per-process-group, or per-user-group) maximum filesize
limits before running Perl scripts that try to handle large files,
especially if you intend to write such files.
d154 1
a154 3
Finally, in addition to your process/process group maximum filesize
limits, you may have quota limits on your filesystems that stop you
(your user id or your user group id) from using large files.
d156 2
a157 7
Adjusting your process/user/group/file system/operating system limits
is outside the scope of Perl core language.  For process limits, you
may try increasing the limits using your shell's limits/limit/ulimit
command before running Perl.  The BSD::Resource extension (not
included with the standard Perl distribution) may also be of use, it
offers the getrlimit/setrlimit interface that can be used to adjust
process resource usage limits, including the maximum filesize limit.
d159 1
a159 1
=head2 Long doubles
d161 4
a164 4
In some systems you may be able to use long doubles to enhance the
range and precision of your double precision floating point numbers
(that is, Perl's numbers).  Use Configure -Duselongdouble to enable
this support (if it is available).
d166 11
a176 1
=head2 "more bits"
d178 1
a178 2
You can "Configure -Dusemorebits" to turn on both the 64-bit support
and the long double support.
d180 2
a181 1
=head2 Enhanced support for sort() subroutines
d183 2
a184 3
Perl subroutines with a prototype of C<($$)>, and XSUBs in general, can
now be used as sort subroutines.  In either case, the two elements to
be compared are passed as normal parameters in @@_.  See L<perlfunc/sort>.
d186 2
a187 3
For unprototyped sort subroutines, the historical behavior of passing 
the elements to be compared as the global variables $a and $b remains
unchanged.
d189 2
a190 1
=head2 C<sort $coderef @@foo> allowed
d192 1
a192 2
sort() did not accept a subroutine reference as the comparison
function in earlier versions.  This is now permitted.
d194 1
a194 1
=head2 File globbing implemented internally
d196 1
a196 3
Perl now uses the File::Glob implementation of the glob() operator
automatically.  This avoids using an external csh process and the
problems associated with it.
d198 2
a199 2
    NOTE: This is currently an experimental feature.  Interfaces and
    implementation are subject to change.
d201 1
a201 1
=item Support for CHECK blocks
d203 1
a203 5
In addition to C<BEGIN>, C<INIT>, C<END>, C<DESTROY> and C<AUTOLOAD>,
subroutines named C<CHECK> are now special.  These are queued up during
compilation and behave similar to END blocks, except they are called at
the end of compilation rather than at the end of execution.  They cannot
be called directly.
d205 1
a205 1
=head2 POSIX character class syntax [: :] supported
d207 1
a207 2
For example to match alphabetic characters use /[[:alpha:]]/.
See L<perlre> for details.
d209 7
a215 1
=item Better pseudo-random number generator
d217 1
a217 3
In 5.005_0x and earlier, perl's rand() function used the C library
rand(3) function.  As of 5.005_52, Configure tests for drand48(),
random(), and rand() (in that order) and picks the first one it finds.
d219 5
a223 1
These changes should result in better random numbers from rand().
d225 1
a225 1
=head2 Improved C<qw//> operator
d227 1
a227 4
The C<qw//> operator is now evaluated at compile time into a true list
instead of being replaced with a run time call to C<split()>.  This
removes the confusing misbehaviour of C<qw//> in scalar context, which
had inherited that behaviour from split().
d229 10
a238 1
Thus:
d240 1
a240 1
    $foo = ($bar) = qw(a b c); print "$foo|$bar\n";
d242 1
a242 1
now correctly prints "3|a", instead of "2|a".
d244 8
a251 1
=item Better worst-case behavior of hashes
d253 1
a253 4
Small changes in the hashing algorithm have been implemented in
order to improve the distribution of lower order bits in the
hashed value.  This is expected to yield better performance on
keys that are repeated sequences.
d255 1
a255 1
=head2 pack() format 'Z' supported
d257 1
a257 2
The new format type 'Z' is useful for packing and unpacking null-terminated
strings.  See L<perlfunc/"pack">.
d259 7
a265 1
=head2 pack() format modifier '!' supported
d267 1
a267 2
The new format type modifier '!' is useful for packing and unpacking
native shorts, ints, and longs.  See L<perlfunc/"pack">.
d269 4
a272 1
=head2 pack() and unpack() support counted strings
d274 1
a274 2
The template character '/' can be used to specify a counted string
type to be packed or unpacked.  See L<perlfunc/"pack">.
d276 1
a276 1
=head2 Comments in pack() templates
d278 1
a278 3
The '#' character in a template introduces a comment up to
end of the line.  This facilitates documentation of pack()
templates.
d280 1
a280 1
=head2 Weak references
d282 1
a282 5
In previous versions of Perl, you couldn't cache objects so as
to allow them to be deleted if the last reference from outside 
the cache is deleted.  The reference in the cache would hold a
reference count on the object and the objects would never be
destroyed.
d284 6
a289 4
Another familiar problem is with circular references.  When an
object references itself, its reference count would never go
down to zero, and it would not get destroyed until the program
is about to exit.
d291 1
a291 5
Weak references solve this by allowing you to "weaken" any
reference, that is, make it not count towards the reference count.
When the last non-weak reference to an object is deleted, the object
is destroyed and all the weak references to the object are
automatically undef-ed.
d293 1
a293 2
To use this feature, you need the WeakRef package from CPAN, which
contains additional documentation.
d295 3
a297 1
    NOTE: This is an experimental feature.  Details are subject to change.  
d299 3
a301 1
=head2 Binary numbers supported
d303 1
a303 2
Binary numbers are now supported as literals, in s?printf formats, and
C<oct()>:
d305 5
a309 2
    $answer = 0b101010;
    printf "The answer is: %b\n", oct("0b101010");
d311 1
a311 1
=head2 Lvalue subroutines
d313 9
a321 2
Subroutines can now return modifiable lvalues.
See L<perlsub/"Lvalue subroutines">.
d323 4
a326 1
    NOTE: This is an experimental feature.  Details are subject to change.
d328 1
a328 1
=head2 Some arrows may be omitted in calls through references
d330 3
a332 6
Perl now allows the arrow to be omitted in many constructs
involving subroutine calls through references.  For example,
C<< $foo[10]->('foo') >> may now be written C<$foo[10]('foo')>.
This is rather similar to how the arrow may be omitted from
C<< $foo[10]->{'foo'} >>.  Note however, that the arrow is still
required for C<< foo(10)->('bar') >>.
d334 1
a334 1
=head2 Boolean assignment operators are legal lvalues
d336 4
a339 1
Constructs such as C<($a ||= 2) += 1> are now allowed.
d341 1
a341 1
=head2 exists() is supported on subroutine names
d343 1
a343 3
The exists() builtin now works on subroutine names.  A subroutine
is considered to exist if it has been declared (even if implicitly).
See L<perlfunc/exists> for examples.
d345 1
a345 1
=head2 exists() and delete() are supported on array elements
d347 1
a347 2
The exists() and delete() builtins now work on simple arrays as well.
The behavior is similar to that on hash elements.
d349 1
a349 4
exists() can be used to check whether an array element has been
initialized.  This avoids autovivifying array elements that don't exist.
If the array is tied, the EXISTS() method in the corresponding tied
package will be invoked.
d351 1
a351 7
delete() may be used to remove an element from the array and return
it.  The array element at that position returns to its unintialized
state, so that testing for the same element with exists() will return
false.  If the element happens to be the one at the end, the size of
the array also shrinks up to the highest element that tests true for
exists(), or 0 if none such is found.  If the array is tied, the DELETE() 
method in the corresponding tied package will be invoked.
d353 1
a353 1
See L<perlfunc/exists> and L<perlfunc/delete> for examples.
d355 1
a355 1
=head2 Pseudo-hashes work better
d357 1
a357 3
Dereferencing some types of reference values in a pseudo-hash,
such as C<< $ph->{foo}[1] >>, was accidentally disallowed.  This has
been corrected.
d359 1
a359 2
When applied to a pseudo-hash element, exists() now reports whether
the specified value exists, not merely if the key is valid.
d361 1
a361 3
delete() now works on pseudo-hashes.  When given a pseudo-hash element
or slice it deletes the values corresponding to the keys (but not the keys
themselves).  See L<perlref/"Pseudo-hashes: Using an array as a hash">.
d363 1
a363 2
Pseudo-hash slices with constant keys are now optimized to array lookups
at compile-time.
d365 1
a365 1
List assignments to pseudo-hash slices are now supported.
d367 2
a368 2
The C<fields> pragma now provides ways to create pseudo-hashes, via
fields::new() and fields::phash().  See L<fields>.
d370 1
a370 3
    NOTE: The pseudo-hash data type continues to be experimental.
    Limiting oneself to the interface elements provided by the
    fields pragma will provide protection from any future changes.
d372 6
a377 1
=head2 Automatic flushing of output buffers
d379 1
a379 4
fork(), exec(), system(), qx//, and pipe open()s now flush buffers
of all files opened for output when the operation was attempted.  This
mostly eliminates confusing buffering mishaps suffered by users unaware
of how Perl internally handles I/O.
d381 3
a383 2
This is not supported on some platforms like Solaris where a suitably
correct implementation of fflush(NULL) isn't available.
d385 1
a385 1
=head2 Better diagnostics on meaningless filehandle operations
d387 1
a387 4
Constructs such as C<< open(<FH>) >> and C<< close(<FH>) >>
are compile time errors.  Attempting to read from filehandles that
were opened only for writing will now produce warnings (just as
writing to read-only filehandles does).
d389 1
a389 1
=head2 Where possible, buffered data discarded from duped input filehandle
d391 9
a399 6
C<< open(NEW, "<&OLD") >> now attempts to discard any data that
was previously read and buffered in C<OLD> before duping the handle.
On platforms where doing this is allowed, the next read operation
on C<NEW> will return the same data as the corresponding operation
on C<OLD>.  Formerly, it would have returned the data from the start
of the following disk block instead.
d401 1
a401 1
=head2 eof() has the same old magic as <>
d403 1
a403 3
C<eof()> would return true if no attempt to read from C<< <> >> had
yet been made.  C<eof()> has been changed to have a little magic of its
own, it now opens the C<< <> >> files.
d405 1
a405 1
=head2 binmode() can be used to set :crlf and :raw modes
d407 3
a409 4
binmode() now accepts a second argument that specifies a discipline
for the handle in question.  The two pseudo-disciplines ":raw" and
":crlf" are currently supported on DOS-derivative platforms.
See L<perlfunc/"binmode"> and L<open>.
d411 1
a411 1
=head2 C<-T> filetest recognizes UTF-8 encoded files as "text"
d413 1
a413 2
The algorithm used for the C<-T> filetest has been enhanced to
correctly identify UTF-8 content as "text".
d415 1
a415 1
=head2 system(), backticks and pipe open now reflect exec() failure
d417 1
a417 4
On Unix and similar platforms, system(), qx() and open(FOO, "cmd |")
etc., are implemented via fork() and exec().  When the underlying
exec() fails, earlier versions did not report the error properly,
since the exec() happened to be in a different process.
d419 1
a419 3
The child process now communicates with the parent about the
error in launching the external command, which allows these
constructs to return with their usual error value and set $!.
d421 3
a423 1
=head2 Improved diagnostics
d425 1
a425 2
Line numbers are no longer suppressed (under most likely circumstances)
during the global destruction phase.
d427 2
a428 2
Diagnostics emitted from code running in threads other than the main
thread are now accompanied by the thread ID.
d430 3
a432 2
Embedded null characters in diagnostics now actually show up.  They
used to truncate the message in prior versions.
d434 1
a434 2
$foo::a and $foo::b are now exempt from "possible typo" warnings only
if sort() is encountered in package C<foo>.
d436 4
a439 3
Unrecognized alphabetic escapes encountered when parsing quote
constructs now generate a warning, since they may take on new
semantics in later versions of Perl.
d441 1
a441 2
Many diagnostics now report the internal operation in which the warning
was provoked, like so:
d443 2
a444 2
    Use of uninitialized value in concatenation (.) at (eval 1) line 1.
    Use of uninitialized value in print at (eval 1) line 1.
d446 1
a446 4
Diagnostics  that occur within eval may also report the file and line
number where the eval is located, in addition to the eval sequence
number and the line number within the evaluated text itself.  For
example:
d448 1
a448 1
    Not enough arguments for scalar at (eval 4)[newlib/perl5db.pl:1411] line 2, at EOF
d450 1
a450 1
=head2 Diagnostics follow STDERR
d452 2
a453 3
Diagnostic output now goes to whichever file the C<STDERR> handle
is pointing at, instead of always going to the underlying C runtime
library's C<stderr>.
d455 1
a455 1
=item More consistent close-on-exec behavior
d457 2
a458 7
On systems that support a close-on-exec flag on filehandles, the
flag is now set for any handles created by pipe(), socketpair(),
socket(), and accept(), if that is warranted by the value of $^F
that may be in effect.  Earlier versions neglected to set the flag
for handles created with these operators.  See L<perlfunc/pipe>,
L<perlfunc/socketpair>, L<perlfunc/socket>, L<perlfunc/accept>,
and L<perlvar/$^F>.
d460 1
a460 1
=head2 syswrite() ease-of-use
d462 3
a464 1
The length argument of C<syswrite()> has become optional.
d466 1
a466 1
=head2 Better syntax checks on parenthesized unary operators
d468 10
a477 1
Expressions such as:
d479 6
a484 3
    print defined(&foo,&bar,&baz);
    print uc("foo","bar","baz");
    undef($foo,&bar);
d486 1
a486 3
used to be accidentally allowed in earlier versions, and produced
unpredictable behaviour.  Some produced ancillary warnings
when used in this way; others silently did the wrong thing.
d488 1
a488 4
The parenthesized forms of most unary operators that expect a single
argument now ensure that they are not called with more than one
argument, making the cases shown above syntax errors.  The usual
behaviour of:
d490 3
a492 3
    print defined &foo, &bar, &baz;
    print uc "foo", "bar", "baz";
    undef $foo, &bar;
d494 1
a494 1
remains unchanged.  See L<perlop>.
d496 2
a497 1
=head2 Bit operators support full native integer width
d499 1
a499 7
The bit operators (& | ^ ~ << >>) now operate on the full native
integral width (the exact size of which is available in $Config{ivsize}).
For example, if your platform is either natively 64-bit or if Perl
has been configured to use 64-bit integers, these operations apply
to 8 bytes (as opposed to 4 bytes on 32-bit platforms).
For portability, be sure to mask off the excess bits in the result of
unary C<~>, e.g., C<~$x & 0xffffffff>.
d501 1
a501 1
=head2 Improved security features
d503 3
a505 2
More potentially unsafe operations taint their results for improved
security.
d507 2
a508 3
The C<passwd> and C<shell> fields returned by the getpwent(), getpwnam(),
and getpwuid() are now tainted, because the user can affect their own
encrypted password and login shell.
d510 1
a510 4
The variable modified by shmread(), and messages returned by msgrcv()
(and its object-oriented interface IPC::SysV::Msg::rcv) are also tainted,
because other untrusted processes can modify messages and shared memory
segments for their own nefarious purposes.
d512 1
a512 1
=item More functional bareword prototype (*)
d514 1
a514 3
Bareword prototypes have been rationalized to enable them to be used
to override builtins that accept barewords and interpret them in
a special way, such as C<require> or C<do>.
d516 1
a516 3
Arguments prototyped as C<*> will now be visible within the subroutine
as either a simple scalar or as a reference to a typeglob.
See L<perlsub/Prototypes>.
d518 1
a518 1
=head2 C<require> and C<do> may be overridden
d520 3
a522 6
C<require> and C<do 'file'> operations may be overridden locally
by importing subroutines of the same name into the current package 
(or globally by importing them into the CORE::GLOBAL:: namespace).
Overriding C<require> will also affect C<use>, provided the override
is visible at compile-time.
See L<perlsub/"Overriding Built-in Functions">.
d524 1
a524 1
=head2 $^X variables may now have names longer than one character
d526 1
a526 6
Formerly, $^X was synonymous with ${"\cX"}, but $^XY was a syntax
error.  Now variable names that begin with a control character may be
arbitrarily long.  However, for compatibility reasons, these variables
I<must> be written with explicit braces, as C<${^XY}> for example.
C<${^XYZ}> is synonymous with ${"\cXYZ"}.  Variable names with more
than one control character, such as C<${^XY^Z}>, are illegal.
d528 1
a528 5
The old syntax has not changed.  As before, `^X' may be either a
literal control-X character or the two-character sequence `caret' plus
`X'.  When braces are omitted, the variable name stops after the
control character.  Thus C<"$^XYZ"> continues to be synonymous with
C<$^X . "YZ"> as before.
d530 1
a530 6
As before, lexical variables may not have names beginning with control
characters.  As before, variables whose names begin with a control
character are always forced to be in package `main'.  All such variables
are reserved for future extensions, except those that begin with
C<^_>, which may be used by user programs and are guaranteed not to
acquire special meaning in any future version of Perl.
d532 1
a532 1
=head2 New variable $^C reflects C<-c> switch
d534 1
a534 5
C<$^C> has a boolean value that reflects whether perl is being run
in compile-only mode (i.e. via the C<-c> switch).  Since
BEGIN blocks are executed under such conditions, this variable
enables perl code to determine whether actions that make sense
only during normal running are warranted.  See L<perlvar>.
d536 1
a536 1
=head2 New variable $^V contains Perl version as a string
d538 1
a538 3
C<$^V> contains the Perl version number as a string composed of
characters whose ordinals match the version numbers, i.e. v5.6.0.
This may be used in string comparisons.
d540 1
a540 2
See C<Support for strings represented as a vector of ordinals> for an
example.
d542 3
a544 1
=head2 Optional Y2K warnings
d546 1
a546 3
If Perl is built with the cpp macro C<PERL_Y2KWARN> defined,
it emits optional warnings when concatenating the number 19
with another number.
d548 1
a548 2
This behavior must be specifically enabled when running Configure.
See F<INSTALL> and F<README.Y2K>.
d552 1
a552 1
=head2 Modules
d554 1
a554 7
=over 4

=item attributes

While used internally by Perl as a pragma, this module also
provides a way to fetch subroutine and variable attributes.
See L<attributes>.
d558 1
a558 71
The Perl Compiler suite has been extensively reworked for this
release.  More of the standard Perl testsuite passes when run
under the Compiler, but there is still a significant way to
go to achieve production quality compiled executables.

    NOTE: The Compiler suite remains highly experimental.  The
    generated code may not be correct, even it manages to execute
    without errors.

=item Benchmark

Overall, Benchmark results exhibit lower average error and better timing
accuracy.  

You can now run tests for I<n> seconds instead of guessing the right
number of tests to run: e.g., timethese(-5, ...) will run each 
code for at least 5 CPU seconds.  Zero as the "number of repetitions"
means "for at least 3 CPU seconds".  The output format has also
changed.  For example:

   use Benchmark;$x=3;timethese(-5,{a=>sub{$x*$x},b=>sub{$x**2}})

will now output something like this:

   Benchmark: running a, b, each for at least 5 CPU seconds...
            a:  5 wallclock secs ( 5.77 usr +  0.00 sys =  5.77 CPU) @@ 200551.91/s (n=1156516)
            b:  4 wallclock secs ( 5.00 usr +  0.02 sys =  5.02 CPU) @@ 159605.18/s (n=800686)

New features: "each for at least N CPU seconds...", "wallclock secs",
and the "@@ operations/CPU second (n=operations)".

timethese() now returns a reference to a hash of Benchmark objects containing
the test results, keyed on the names of the tests.

timethis() now returns the iterations field in the Benchmark result object
instead of 0.

timethese(), timethis(), and the new cmpthese() (see below) can also take
a format specifier of 'none' to suppress output.

A new function countit() is just like timeit() except that it takes a
TIME instead of a COUNT.

A new function cmpthese() prints a chart comparing the results of each test
returned from a timethese() call.  For each possible pair of tests, the
percentage speed difference (iters/sec or seconds/iter) is shown.

For other details, see L<Benchmark>.

=item ByteLoader

The ByteLoader is a dedicated extension to generate and run
Perl bytecode.  See L<ByteLoader>.

=item constant

References can now be used.

The new version also allows a leading underscore in constant names, but
disallows a double leading underscore (as in "__LINE__").  Some other names
are disallowed or warned against, including BEGIN, END, etc.  Some names
which were forced into main:: used to fail silently in some cases; now they're
fatal (outside of main::) and an optional warning (inside of main::).
The ability to detect whether a constant had been set with a given name has
been added.

See L<constant>.

=item charnames

This pragma implements the C<\N> string escape.  See L<charnames>.
d562 1
a562 27
A C<Maxdepth> setting can be specified to avoid venturing
too deeply into deep data structures.  See L<Data::Dumper>.

The XSUB implementation of Dump() is now automatically called if the
C<Useqq> setting is not in use.

Dumping C<qr//> objects works correctly.

=item DB

C<DB> is an experimental module that exposes a clean abstraction
to Perl's debugging API.

=item DB_File

DB_File can now be built with Berkeley DB versions 1, 2 or 3.
See C<ext/DB_File/Changes>.

=item Devel::DProf

Devel::DProf, a Perl source code profiler has been added.  See
L<Devel::DProf> and L<dprofpp>.

=item Devel::Peek

The Devel::Peek module provides access to the internal representation
of Perl variables and data.  It is a data debugging tool for the XS programmer.
d566 1
a566 54
The Dumpvalue module provides screen dumps of Perl data.

=item DynaLoader

DynaLoader now supports a dl_unload_file() function on platforms that
support unloading shared objects using dlclose().

Perl can also optionally arrange to unload all extension shared objects
loaded by Perl.  To enable this, build Perl with the Configure option
C<-Accflags=-DDL_UNLOAD_ALL_AT_EXIT>.  (This maybe useful if you are
using Apache with mod_perl.)

=item English

$PERL_VERSION now stands for C<$^V> (a string value) rather than for C<$]>
(a numeric value).

=item Env

Env now supports accessing environment variables like PATH as array
variables.

=item Fcntl

More Fcntl constants added: F_SETLK64, F_SETLKW64, O_LARGEFILE for
large file (more than 4GB) access (NOTE: the O_LARGEFILE is
automatically added to sysopen() flags if large file support has been
configured, as is the default), Free/Net/OpenBSD locking behaviour
flags F_FLOCK, F_POSIX, Linux F_SHLCK, and O_ACCMODE: the combined
mask of O_RDONLY, O_WRONLY, and O_RDWR.  The seek()/sysseek()
constants SEEK_SET, SEEK_CUR, and SEEK_END are available via the
C<:seek> tag.  The chmod()/stat() S_IF* constants and S_IS* functions
are available via the C<:mode> tag.

=item File::Compare

A compare_text() function has been added, which allows custom
comparison functions.  See L<File::Compare>.

=item File::Find

File::Find now works correctly when the wanted() function is either
autoloaded or is a symbolic reference.

A bug that caused File::Find to lose track of the working directory
when pruning top-level directories has been fixed.

File::Find now also supports several other options to control its
behavior.  It can follow symbolic links if the C<follow> option is
specified.  Enabling the C<no_chdir> option will make File::Find skip
changing the current directory when walking directories.  The C<untaint>
flag can be useful when running with taint checks enabled.

See L<File::Find>.
d568 1
a568 1
=item File::Glob
d570 1
a570 3
This extension implements BSD-style file globbing.  By default,
it will also be used for the internal implementation of the glob()
operator.  See L<File::Glob>.
d574 1
a574 7
New methods have been added to the File::Spec module: devnull() returns
the name of the null device (/dev/null on Unix) and tmpdir() the name of
the temp directory (normally /tmp on Unix).  There are now also methods
to convert between absolute and relative filenames: abs2rel() and
rel2abs().  For compatibility with operating systems that specify volume
names in file paths, the splitpath(), splitdir(), and catdir() methods
have been added.
d576 1
a576 1
=item File::Spec::Functions
d578 1
a578 2
The new File::Spec::Functions modules provides a function interface
to the File::Spec module.  Allows shorthand
d580 1
a580 1
    $fullname = catfile($dir1, $dir2, $file);
d582 1
a582 1
instead of
d584 1
a584 1
    $fullname = File::Spec->catfile($dir1, $dir2, $file);
d586 1
a586 1
=item Getopt::Long
d588 1
a588 3
Getopt::Long licensing has changed to allow the Perl Artistic License
as well as the GPL. It used to be GPL only, which got in the way of
non-GPL applications that wanted to use Getopt::Long.
d590 2
a591 2
Getopt::Long encourages the use of Pod::Usage to produce help
messages. For example:
d593 1
a593 7
    use Getopt::Long;
    use Pod::Usage;
    my $man = 0;
    my $help = 0;
    GetOptions('help|?' => \$help, man => \$man) or pod2usage(2);
    pod2usage(1) if $help;
    pod2usage(-exitstatus => 0, -verbose => 2) if $man;
d595 1
a595 1
    __END__
d597 1
a597 1
    =head1 NAME
d599 1
a599 1
    sample - Using GetOpt::Long and Pod::Usage
d601 1
a601 1
    =head1 SYNOPSIS
d603 1
a603 1
    sample [options] [file ...]
d605 1
a605 3
     Options:
       -help            brief help message
       -man             full documentation
d607 1
a607 1
    =head1 OPTIONS
d609 1
a609 1
    =over 8
d611 1
a611 1
    =item B<-help>
d613 1
a613 1
    Print a brief help message and exits.
d615 1
a615 1
    =item B<-man>
d617 1
a617 1
    Prints the manual page and exits.
d619 1
a619 1
    =back
d621 1
a621 1
    =head1 DESCRIPTION
d623 1
a623 2
    B<This program> will read the given input file(s) and do someting
    useful with the contents thereof.
d625 1
a625 1
    =cut
d627 1
a627 1
See L<Pod::Usage> for details.
d629 5
a633 2
A bug that prevented the non-option call-back <> from being
specified as the first argument has been fixed.
d635 1
a635 2
To specify the characters < and > as option starters, use ><. Note,
however, that changing option starters is strongly deprecated. 
d637 1
a637 1
=item IO
d639 3
a641 2
write() and syswrite() will now accept a single-argument
form of the call, for consistency with Perl's syswrite().
d643 2
a644 3
You can now create a TCP-based IO::Socket::INET without forcing
a connect attempt.  This allows you to configure its options
(like making it non-blocking) and then call connect() manually.
d646 1
a646 2
A bug that prevented the IO::Socket::protocol() accessor
from ever returning the correct value has been corrected.
d648 2
a649 2
IO::Socket::connect now uses non-blocking IO instead of alarm()
to do connect timeouts.
d651 1
a651 2
IO::Socket::accept now uses select() instead of alarm() for doing
timeouts.
d653 1
a653 2
IO::Socket::INET->new now sets $! correctly on failure. $@@ is
still set for backwards compatability.
d655 1
a655 1
=item JPL
d657 5
a661 12
Java Perl Lingo is now distributed with Perl.  See jpl/README
for more information.

=item lib

C<use lib> now weeds out any trailing duplicate entries.
C<no lib> removes all named entries.

=item Math::BigInt

The bitwise operations C<<< << >>>, C<<< >> >>>, C<&>, C<|>,
and C<~> are now supported on bigints.
d665 1
a665 1
The accessor methods Re, Im, arg, abs, rho, and theta can now also
a667 16
The class method C<display_format> and the corresponding object method
C<display_format>, in addition to accepting just one argument, now can
also accept a parameter hash.  Recognized keys of a parameter hash are
C<"style">, which corresponds to the old one parameter case, and two
new parameters: C<"format">, which is a printf()-style format string
(defaults usually to C<"%.15g">, you can revert to the default by
setting the format string to C<undef>) used for both parts of a
complex number, and C<"polar_pretty_print"> (defaults to true),
which controls whether an attempt is made to try to recognize small
multiples and rationals of pi (2pi, pi/2) at the argument (angle) of a
polar complex number.

The potentially disruptive change is that in list context both methods
now I<return the parameter hash>, instead of only the value of the
C<"style"> parameter.

d670 2
a671 2
A little bit of radial trigonometry (cylindrical and spherical),
radial coordinate conversions, and the great circle distance were added.
d673 1
a673 1
=item Pod::Parser, Pod::InputObjects
d675 1
a675 5
Pod::Parser is a base class for parsing and selecting sections of
pod documentation from an input stream.  This module takes care of
identifying pod paragraphs and commands in the input and hands off the
parsed paragraphs and commands to user-defined methods which are free
to interpret or translate them as they see fit.
d677 1
a677 3
Pod::InputObjects defines some input objects needed by Pod::Parser, and
for advanced users of Pod::Parser that need more about a command besides
its name and text.
d679 1
a679 6
As of release 5.6.0 of Perl, Pod::Parser is now the officially sanctioned
"base parser code" recommended for use by all pod2xxx translators.
Pod::Text (pod2text) and Pod::Man (pod2man) have already been converted
to use Pod::Parser and efforts to convert Pod::HTML (pod2html) are already
underway.  For any questions or comments about pod parsing and translating
issues and utilities, please use the pod-people@@perl.org mailing list.
d681 1
a681 1
For further information, please see L<Pod::Parser> and L<Pod::InputObjects>.
d683 4
a686 1
=item Pod::Checker, podchecker
d688 6
a693 4
This utility checks pod files for correct syntax, according to
L<perlpod>.  Obvious errors are flagged as such, while warnings are
printed for mistakes that can be handled gracefully.  The checklist is
not complete yet.  See L<Pod::Checker>.
d695 1
a695 1
=item Pod::ParseUtils, Pod::Find
d697 1
a697 7
These modules provide a set of gizmos that are useful mainly for pod
translators.  L<Pod::Find|Pod::Find> traverses directory structures and
returns found pod files, along with their canonical names (like
C<File::Spec::Unix>).  L<Pod::ParseUtils|Pod::ParseUtils> contains
B<Pod::List> (useful for storing pod list information), B<Pod::Hyperlink>
(for parsing the contents of C<LE<lt>E<gt>> sequences) and B<Pod::Cache>
(for caching information about pod files, e.g., link nodes).
d699 1
a699 1
=item Pod::Select, podselect
d701 1
a701 5
Pod::Select is a subclass of Pod::Parser which provides a function
named "podselect()" to filter out user-specified sections of raw pod
documentation from an input stream. podselect is a script that provides
access to Pod::Select from other scripts to be used as a filter.
See L<Pod::Select>.
d703 1
a703 1
=item Pod::Usage, pod2usage
d705 1
a705 6
Pod::Usage provides the function "pod2usage()" to print usage messages for
a Perl script based on its embedded pod documentation.  The pod2usage()
function is generally useful to all script authors since it lets them
write and maintain a single source (the pods) for documentation, thus
removing the need to create and maintain redundant usage message text
consisting of information already in the pods.
d707 1
a707 3
There is also a pod2usage script which can be used from other kinds of
scripts to print usage messages from pods (even for non-Perl scripts
with pods embedded in comments).
d709 1
a709 1
For details and examples, please see L<Pod::Usage>.
d711 1
a711 1
=item Pod::Text and Pod::Man
d713 1
a713 7
Pod::Text has been rewritten to use Pod::Parser.  While pod2text() is
still available for backwards compatibility, the module now has a new
preferred interface.  See L<Pod::Text> for the details.  The new Pod::Text
module is easily subclassed for tweaks to the output, and two such
subclasses (Pod::Text::Termcap for man-page-style bold and underlining
using termcap information, and Pod::Text::Color for markup with ANSI color
sequences) are now standard.
d715 2
a716 4
pod2man has been turned into a module, Pod::Man, which also uses
Pod::Parser.  In the process, several outstanding bugs related to quotes
in section headers, quoting of code escapes, and nested lists have been
fixed.  pod2man is now a wrapper script around this module.
d718 4
a721 1
=item SDBM_File
d723 1
a723 4
An EXISTS method has been added to this module (and sdbm_exists() has
been added to the underlying sdbm library), so one can now call exists
on an SDBM_File tied hash and get the correct result, rather than a
runtime error.
d725 1
a725 3
A bug that may have caused data loss when more than one disk block
happens to be read from the database in a single FETCH() has been
fixed.
d727 2
a728 1
=item Sys::Syslog
d730 1
a730 2
Sys::Syslog now uses XSUBs to access facilities from syslog.h so it
no longer requires syslog.ph to exist. 
d732 2
a733 1
=item Sys::Hostname
d735 1
a735 2
Sys::Hostname now uses XSUBs to call the C library's gethostname() or
uname() if they exist.
d737 1
a737 1
=item Term::ANSIColor
d739 1
a739 3
Term::ANSIColor is a very simple module to provide easy and readable
access to the ANSI color and highlighting escape sequences, supported by
most ANSI terminal emulators.  It is now included standard.
d741 1
a741 1
=item Time::Local
d743 1
a743 3
The timelocal() and timegm() functions used to silently return bogus
results when the date fell outside the machine's integer range.  They
now consistently croak() if the date falls in an unsupported range.
d745 1
a745 1
=item Win32
d747 1
a747 5
The error return value in list context has been changed for all functions
that return a list of values.  Previously these functions returned a list
with a single element C<undef> if an error occurred.  Now these functions
return the empty list in these situations.  This applies to the following
functions:
d749 4
a752 2
    Win32::FsType
    Win32::GetOSVersion
d754 4
a757 2
The remaining functions are unchanged and continue to return C<undef> on
error even in list context.
d759 3
a761 2
The Win32::SetLastError(ERROR) function has been added as a complement
to the Win32::GetLastError() function.
d763 1
a763 4
The new Win32::GetFullPathName(FILENAME) returns the full absolute
pathname for FILENAME in scalar context.  In list context it returns
a two-element list containing the fully qualified directory name and
the filename.  See L<Win32>.
d765 3
a767 1
=item XSLoader
d769 1
a769 2
The XSLoader extension is a simpler alternative to DynaLoader.
See L<XSLoader>.
d771 3
a773 1
=item DBM Filters
d775 1
a775 3
A new feature called "DBM Filters" has been added to all the
DBM modules--DB_File, GDBM_File, NDBM_File, ODBM_File, and SDBM_File.
DBM Filters add four new methods to each DBM module:
d777 3
a779 4
    filter_store_key
    filter_store_value
    filter_fetch_key
    filter_fetch_value
d781 3
a783 3
These can be used to filter key-value pairs before the pairs are
written to the database or just after they are read from the database.
See L<perldbmfilter> for further information.
d785 1
a785 1
=back
d787 1
a787 1
=head2 Pragmata
d789 1
a789 19
C<use attrs> is now obsolete, and is only provided for
backward-compatibility.  It's been replaced by the C<sub : attributes>
syntax.  See L<perlsub/"Subroutine Attributes"> and L<attributes>.

Lexical warnings pragma, C<use warnings;>, to control optional warnings.
See L<perllexwarn>.

C<use filetest> to control the behaviour of filetests (C<-r> C<-w>
...).  Currently only one subpragma implemented, "use filetest
'access';", that uses access(2) or equivalent to check permissions
instead of using stat(2) as usual.  This matters in filesystems
where there are ACLs (access control lists): the stat(2) might lie,
but access(2) knows better.

The C<open> pragma can be used to specify default disciplines for
handle constructors (e.g. open()) and for qx//.  The two
pseudo-disciplines C<:raw> and C<:crlf> are currently supported on
DOS-derivative platforms (i.e. where binmode is not a no-op).
See also L</"binmode() can be used to set :crlf and :raw modes">.
d791 3
a793 1
=head1 Utility Changes
d795 1
a795 1
=head2 dprofpp
d797 2
a798 2
C<dprofpp> is used to display profile data generated using C<Devel::DProf>.
See L<dprofpp>.
d800 1
a800 1
=head2 find2perl
d802 4
a805 3
The C<find2perl> utility now uses the enhanced features of the File::Find
module.  The -depth and -follow options are supported.  Pod documentation
is also included in the script.
d807 1
a807 1
=head2 h2xs
d809 3
a811 3
The C<h2xs> tool can now work in conjunction with C<C::Scan> (available
from CPAN) to automatically parse real-life header files.  The C<-M>,
C<-a>, C<-k>, and C<-o> options are new.
d813 1
a813 1
=head2 perlcc
d815 2
a816 3
C<perlcc> now supports the C and Bytecode backends.  By default,
it generates output from the simple C backend rather than the
optimized C backend.
d818 1
a818 1
Support for non-Unix platforms has been improved.
d820 5
a824 1
=head2 perldoc
d826 1
a826 4
C<perldoc> has been reworked to avoid possible security holes.
It will not by default let itself be run as the superuser, but you
may still use the B<-U> switch to try to make it drop privileges
first.
d828 5
a832 1
=head2 The Perl Debugger
d834 1
a834 10
Many bug fixes and enhancements were added to F<perl5db.pl>, the
Perl debugger.  The help documentation was rearranged.  New commands
include C<< < ? >>, C<< > ? >>, and C<< { ? >> to list out current
actions, C<man I<docpage>> to run your doc viewer on some perl
docset, and support for quoted options.  The help information was
rearranged, and should be viewable once again if you're using B<less>
as your pager.  A serious security hole was plugged--you should
immediately remove all older versions of the Perl debugger as
installed in previous releases, all the way back to perl3, from
your system to avoid being bitten by this.
d836 5
a840 12
=head1 Improved Documentation

Many of the platform-specific README files are now part of the perl
installation.  See L<perl> for the complete list.

=over 4

=item perlapi.pod

The official list of public Perl API functions.

=item perlboot.pod
d842 1
a842 1
A tutorial for beginners on object-oriented Perl.
d844 3
a846 1
=item perlcompile.pod
d848 1
a848 1
An introduction to using the Perl Compiler suite.
d850 3
a852 1
=item perldbmfilter.pod
d854 1
a854 1
A howto document on using the DBM filter facility.
d856 6
a861 1
=item perldebug.pod
d863 1
a863 4
All material unrelated to running the Perl debugger, plus all
low-level guts-like details that risked crushing the casual user
of the debugger, have been relocated from the old manpage to the
next entry below.
d865 4
a868 1
=item perldebguts.pod
d870 1
a870 5
This new manpage contains excessively low-level material not related
to the Perl debugger, but slightly related to debugging Perl itself.
It also contains some arcane internal details of how the debugging
process works that may only be of interest to developers of Perl
debuggers.
d872 3
a874 1
=item perlfork.pod
d876 1
a876 1
Notes on the fork() emulation currently available for the Windows platform.
d878 3
a880 1
=item perlfilter.pod
d882 1
a882 1
An introduction to writing Perl source filters.
d884 4
a887 1
=item perlhack.pod
d889 1
a889 1
Some guidelines for hacking the Perl source code.
d891 3
a893 1
=item perlintern.pod
d895 1
a895 2
A list of internal functions in the Perl source code.
(List is currently empty.)
d897 4
a900 1
=item perllexwarn.pod
d902 1
a902 2
Introduction and reference information about lexically scoped
warning categories.
d904 2
a905 1
=item perlnumber.pod
d907 1
a907 1
Detailed information about numbers as they are represented in Perl.
d909 4
a912 1
=item perlopentut.pod
d914 4
a917 1
A tutorial on using open() effectively.
d919 1
a919 1
=item perlreftut.pod
d921 2
a922 1
A tutorial that introduces the essentials of references.
d924 1
a924 1
=item perltootc.pod
d926 6
a931 1
A tutorial on managing class data for object modules.
d933 1
a933 1
=item perltodo.pod
d935 1
a935 2
Discussion of the most often wanted features that may someday be
supported in Perl.
d937 6
a942 1
=item perlunicode.pod
d944 9
a952 1
An introduction to Unicode support features in Perl.
a955 1
=head1 Performance enhancements
d957 1
a957 1
=head2 Simple sort() using { $a <=> $b } and the like are optimized
d959 1
a959 2
Many common sort() operations using a simple inlined block are now
optimized for faster performance.
d961 1
a961 1
=head2 Optimized assignments to lexical variables
d963 2
a964 3
Certain operations in the RHS of assignment statements have been
optimized to directly set the lexical variable on the LHS,
eliminating redundant copying overheads.
d966 1
a966 1
=head2 Faster subroutine calls
d968 1
a968 2
Minor changes in how subroutine calls are handled internally
provide marginal improvements in performance.
d970 2
a971 1
=item delete(), each(), values() and hash iteration are faster
d973 1
a973 4
The hash values returned by delete(), each(), values() and hashes in a
list context are the actual values in the hash, instead of copies.
This results in significantly better performance, because it eliminates
needless copying in most situations.
d975 1
a975 1
=head1 Installation and Configuration Improvements
d977 2
a978 1
=head2 -Dusethreads means something different
d980 1
a980 3
The -Dusethreads flag now enables the experimental interpreter-based thread
support by default.  To get the flavor of experimental threads that was in
5.005 instead, you need to run Configure with "-Dusethreads -Duse5005threads".
d982 1
a982 4
As of v5.6.0, interpreter-threads support is still lacking a way to
create new threads from Perl (i.e., C<use Thread;> will not work with
interpreter threads).  C<use Thread;> continues to be available when you
specify the -Duse5005threads option to Configure, bugs and all.
d984 5
a988 2
    NOTE: Support for threads continues to be an experimental feature.
    Interfaces and implementation are subject to sudden and drastic changes.
d990 1
a990 29
=head2 New Configure flags

The following new flags may be enabled on the Configure command line
by running Configure with C<-Dflag>.

    usemultiplicity
    usethreads useithreads	(new interpreter threads: no Perl API yet)
    usethreads use5005threads	(threads as they were in 5.005)

    use64bitint			(equal to now deprecated 'use64bits')
    use64bitall

    uselongdouble
    usemorebits
    uselargefiles
    usesocks			(only SOCKS v5 supported)

=head2 Threadedness and 64-bitness now more daring

The Configure options enabling the use of threads and the use of
64-bitness are now more daring in the sense that they no more have an
explicit list of operating systems of known threads/64-bit
capabilities.  In other words: if your operating system has the
necessary APIs and datatypes, you should be able just to go ahead and
use them, for threads by Configure -Dusethreads, and for 64 bits
either explicitly by Configure -Duse64bitint or implicitly if your
system has 64-bit wide datatypes.  See also L<"64-bit support">.

=head2 Long Doubles
d992 1
a992 18
Some platforms have "long doubles", floating point numbers of even
larger range than ordinary "doubles".  To enable using long doubles for
Perl's scalars, use -Duselongdouble.

=head2 -Dusemorebits

You can enable both -Duse64bitint and -Duselongdouble with -Dusemorebits.
See also L<"64-bit support">.

=head2 -Duselargefiles

Some platforms support system APIs that are capable of handling large files
(typically, files larger than two gigabytes).  Perl will try to use these
APIs if you ask for -Duselargefiles.

See L<"Large file support"> for more information. 

=head2 installusrbinperl
d999 1
a999 1449
=head2 SOCKS support

You can use "Configure -Dusesocks" which causes Perl to probe
for the SOCKS proxy protocol library (v5, not v4).  For more information
on SOCKS, see:

    http://www.socks.nec.com/

=head2 C<-A> flag

You can "post-edit" the Configure variables using the Configure C<-A>
switch.  The editing happens immediately after the platform specific
hints files have been processed but before the actual configuration
process starts.  Run C<Configure -h> to find out the full C<-A> syntax.

=head2 Enhanced Installation Directories

The installation structure has been enriched to improve the support
for maintaining multiple versions of perl, to provide locations for
vendor-supplied modules, scripts, and manpages, and to ease maintenance
of locally-added modules, scripts, and manpages.  See the section on
Installation Directories in the INSTALL file for complete details.
For most users building and installing from source, the defaults should
be fine.

If you previously used C<Configure -Dsitelib> or C<-Dsitearch> to set
special values for library directories, you might wish to consider using
the new C<-Dsiteprefix> setting instead.  Also, if you wish to re-use a
config.sh file from an earlier version of perl, you should be sure to
check that Configure makes sensible choices for the new directories.
See INSTALL for complete details.

=head1 Platform specific changes

=head2 Supported platforms

=over 4

=item *

VM/ESA is now supported.

=item *

Siemens BS2000 is now supported under the POSIX Shell.

=item *

The Mach CThreads (NEXTSTEP, OPENSTEP) are now supported by the Thread
extension.

=item *

GNU/Hurd is now supported.

=item *

Rhapsody/Darwin is now supported.

=item *

EPOC is is now supported (on Psion 5).

=item *

The cygwin port (formerly cygwin32) has been greatly improved.

=back

=head2 DOS

=over 4

=item *

Perl now works with djgpp 2.02 (and 2.03 alpha).

=item *

Environment variable names are not converted to uppercase any more.

=item *

Incorrect exit codes from backticks have been fixed.

=item *

This port continues to use its own builtin globbing (not File::Glob).

=back

=head2 OS390 (OpenEdition MVS)

Support for this EBCDIC platform has not been renewed in this release.
There are difficulties in reconciling Perl's standardization on UTF-8
as its internal representation for characters with the EBCDIC character
set, because the two are incompatible.

It is unclear whether future versions will renew support for this
platform, but the possibility exists.

=head2 VMS

Numerous revisions and extensions to configuration, build, testing, and
installation process to accomodate core changes and VMS-specific options.

Expand %ENV-handling code to allow runtime mapping to logical names,
CLI symbols, and CRTL environ array.

Extension of subprocess invocation code to accept filespecs as command
"verbs".

Add to Perl command line processing the ability to use default file types and
to recognize Unix-style C<2E<gt>&1>.

Expansion of File::Spec::VMS routines, and integration into ExtUtils::MM_VMS.

Extension of ExtUtils::MM_VMS to handle complex extensions more flexibly.

Barewords at start of Unix-syntax paths may be treated as text rather than
only as logical names.

Optional secure translation of several logical names used internally by Perl.

Miscellaneous bugfixing and porting of new core code to VMS.

Thanks are gladly extended to the many people who have contributed VMS
patches, testing, and ideas.

=head2 Win32

Perl can now emulate fork() internally, using multiple interpreters running
in different concurrent threads.  This support must be enabled at build
time.  See L<perlfork> for detailed information.

When given a pathname that consists only of a drivename, such as C<A:>,
opendir() and stat() now use the current working directory for the drive
rather than the drive root.

The builtin XSUB functions in the Win32:: namespace are documented.  See
L<Win32>.

$^X now contains the full path name of the running executable.

A Win32::GetLongPathName() function is provided to complement
Win32::GetFullPathName() and Win32::GetShortPathName().  See L<Win32>.

POSIX::uname() is supported.

system(1,...) now returns true process IDs rather than process
handles.  kill() accepts any real process id, rather than strictly
return values from system(1,...).

For better compatibility with Unix, C<kill(0, $pid)> can now be used to
test whether a process exists.

The C<Shell> module is supported.

Better support for building Perl under command.com in Windows 95
has been added.

Scripts are read in binary mode by default to allow ByteLoader (and
the filter mechanism in general) to work properly.  For compatibility,
the DATA filehandle will be set to text mode if a carriage return is
detected at the end of the line containing the __END__ or __DATA__
token; if not, the DATA filehandle will be left open in binary mode.
Earlier versions always opened the DATA filehandle in text mode.

The glob() operator is implemented via the C<File::Glob> extension,
which supports glob syntax of the C shell.  This increases the flexibility
of the glob() operator, but there may be compatibility issues for
programs that relied on the older globbing syntax.  If you want to
preserve compatibility with the older syntax, you might want to run
perl with C<-MFile::DosGlob>.  For details and compatibility information,
see L<File::Glob>.

=head1 Significant bug fixes

=head2 <HANDLE> on empty files

With C<$/> set to C<undef>, "slurping" an empty file returns a string of
zero length (instead of C<undef>, as it used to) the first time the
HANDLE is read after C<$/> is set to C<undef>.  Further reads yield
C<undef>.

This means that the following will append "foo" to an empty file (it used
to do nothing):

    perl -0777 -pi -e 's/^/foo/' empty_file

The behaviour of:

    perl -pi -e 's/^/foo/' empty_file

is unchanged (it continues to leave the file empty).

=head2 C<eval '...'> improvements

Line numbers (as reflected by caller() and most diagnostics) within
C<eval '...'> were often incorrect where here documents were involved.
This has been corrected.

Lexical lookups for variables appearing in C<eval '...'> within
functions that were themselves called within an C<eval '...'> were
searching the wrong place for lexicals.  The lexical search now
correctly ends at the subroutine's block boundary.

The use of C<return> within C<eval {...}> caused $@@ not to be reset
correctly when no exception occurred within the eval.  This has
been fixed.

Parsing of here documents used to be flawed when they appeared as
the replacement expression in C<eval 's/.../.../e'>.  This has
been fixed.

=head2 All compilation errors are true errors

Some "errors" encountered at compile time were by neccessity 
generated as warnings followed by eventual termination of the
program.  This enabled more such errors to be reported in a
single run, rather than causing a hard stop at the first error
that was encountered.

The mechanism for reporting such errors has been reimplemented
to queue compile-time errors and report them at the end of the
compilation as true errors rather than as warnings.  This fixes
cases where error messages leaked through in the form of warnings
when code was compiled at run time using C<eval STRING>, and
also allows such errors to be reliably trapped using C<eval "...">.

=head2 Implicitly closed filehandles are safer

Sometimes implicitly closed filehandles (as when they are localized,
and Perl automatically closes them on exiting the scope) could
inadvertently set $? or $!.  This has been corrected.


=head2 Behavior of list slices is more consistent

When taking a slice of a literal list (as opposed to a slice of
an array or hash), Perl used to return an empty list if the
result happened to be composed of all undef values.

The new behavior is to produce an empty list if (and only if)
the original list was empty.  Consider the following example:

    @@a = (1,undef,undef,2)[2,1,2];

The old behavior would have resulted in @@a having no elements.
The new behavior ensures it has three undefined elements.

Note in particular that the behavior of slices of the following
cases remains unchanged:

    @@a = ()[1,2];
    @@a = (getpwent)[7,0];
    @@a = (anything_returning_empty_list())[2,1,2];
    @@a = @@b[2,1,2];
    @@a = @@c{'a','b','c'};

See L<perldata>.

=head2 C<(\$)> prototype and C<$foo{a}>

A scalar reference prototype now correctly allows a hash or
array element in that slot.

=head2 C<goto &sub> and AUTOLOAD

The C<goto &sub> construct works correctly when C<&sub> happens
to be autoloaded.

=head2 C<-bareword> allowed under C<use integer>

The autoquoting of barewords preceded by C<-> did not work
in prior versions when the C<integer> pragma was enabled.
This has been fixed.

=head2 Failures in DESTROY()

When code in a destructor threw an exception, it went unnoticed
in earlier versions of Perl, unless someone happened to be
looking in $@@ just after the point the destructor happened to
run.  Such failures are now visible as warnings when warnings are
enabled.

=head2 Locale bugs fixed

printf() and sprintf() previously reset the numeric locale
back to the default "C" locale.  This has been fixed.

Numbers formatted according to the local numeric locale
(such as using a decimal comma instead of a decimal dot) caused
"isn't numeric" warnings, even while the operations accessing
those numbers produced correct results.  These warnings have been
discontinued.

=head2 Memory leaks

The C<eval 'return sub {...}'> construct could sometimes leak
memory.  This has been fixed.

Operations that aren't filehandle constructors used to leak memory
when used on invalid filehandles.  This has been fixed.

Constructs that modified C<@@_> could fail to deallocate values
in C<@@_> and thus leak memory.  This has been corrected.

=head2 Spurious subroutine stubs after failed subroutine calls

Perl could sometimes create empty subroutine stubs when a
subroutine was not found in the package.  Such cases stopped
later method lookups from progressing into base packages.
This has been corrected.

=head2 Taint failures under C<-U>

When running in unsafe mode, taint violations could sometimes
cause silent failures.  This has been fixed.

=head2 END blocks and the C<-c> switch

Prior versions used to run BEGIN B<and> END blocks when Perl was
run in compile-only mode.  Since this is typically not the expected
behavior, END blocks are not executed anymore when the C<-c> switch
is used.

See L<CHECK blocks> for how to run things when the compile phase ends.

=head2 Potential to leak DATA filehandles

Using the C<__DATA__> token creates an implicit filehandle to
the file that contains the token.  It is the program's
responsibility to close it when it is done reading from it.

This caveat is now better explained in the documentation.
See L<perldata>.

=head1 New or Changed Diagnostics

=over 4

=item "%s" variable %s masks earlier declaration in same %s

(W misc) A "my" or "our" variable has been redeclared in the current scope or statement,
effectively eliminating all access to the previous instance.  This is almost
always a typographical error.  Note that the earlier variable will still exist
until the end of the scope or until all closure referents to it are
destroyed.

=item "my sub" not yet implemented

(F) Lexically scoped subroutines are not yet implemented.  Don't try that
yet.

=item "our" variable %s redeclared

(W misc) You seem to have already declared the same global once before in the
current lexical scope.

=item '!' allowed only after types %s

(F) The '!' is allowed in pack() and unpack() only after certain types.
See L<perlfunc/pack>.

=item / cannot take a count

(F) You had an unpack template indicating a counted-length string,
but you have also specified an explicit size for the string.
See L<perlfunc/pack>.

=item / must be followed by a, A or Z

(F) You had an unpack template indicating a counted-length string,
which must be followed by one of the letters a, A or Z
to indicate what sort of string is to be unpacked.
See L<perlfunc/pack>.

=item / must be followed by a*, A* or Z*

(F) You had a pack template indicating a counted-length string,
Currently the only things that can have their length counted are a*, A* or Z*.
See L<perlfunc/pack>.

=item / must follow a numeric type

(F) You had an unpack template that contained a '#',
but this did not follow some numeric unpack specification.
See L<perlfunc/pack>.

=item /%s/: Unrecognized escape \\%c passed through

(W regexp) You used a backslash-character combination which is not recognized
by Perl.  This combination appears in an interpolated variable or a
C<'>-delimited regular expression.  The character was understood literally.

=item /%s/: Unrecognized escape \\%c in character class passed through

(W regexp) You used a backslash-character combination which is not recognized
by Perl inside character classes.  The character was understood literally.

=item /%s/ should probably be written as "%s"

(W syntax) You have used a pattern where Perl expected to find a string,
as in the first argument to C<join>.  Perl will treat the true
or false result of matching the pattern against $_ as the string,
which is probably not what you had in mind.

=item %s() called too early to check prototype

(W prototype) You've called a function that has a prototype before the parser saw a
definition or declaration for it, and Perl could not check that the call
conforms to the prototype.  You need to either add an early prototype
declaration for the subroutine in question, or move the subroutine
definition ahead of the call to get proper prototype checking.  Alternatively,
if you are certain that you're calling the function correctly, you may put
an ampersand before the name to avoid the warning.  See L<perlsub>.

=item %s argument is not a HASH or ARRAY element

(F) The argument to exists() must be a hash or array element, such as:

    $foo{$bar}
    $ref->{"susie"}[12]

=item %s argument is not a HASH or ARRAY element or slice

(F) The argument to delete() must be either a hash or array element, such as:

    $foo{$bar}
    $ref->{"susie"}[12]

or a hash or array slice, such as:

    @@foo[$bar, $baz, $xyzzy]
    @@{$ref->[12]}{"susie", "queue"}

=item %s argument is not a subroutine name

(F) The argument to exists() for C<exists &sub> must be a subroutine
name, and not a subroutine call.  C<exists &sub()> will generate this error.

=item %s package attribute may clash with future reserved word: %s

(W reserved) A lowercase attribute name was used that had a package-specific handler.
That name might have a meaning to Perl itself some day, even though it
doesn't yet.  Perhaps you should use a mixed-case attribute name, instead.
See L<attributes>.

=item (in cleanup) %s

(W misc) This prefix usually indicates that a DESTROY() method raised
the indicated exception.  Since destructors are usually called by
the system at arbitrary points during execution, and often a vast
number of times, the warning is issued only once for any number
of failures that would otherwise result in the same message being
repeated.

Failure of user callbacks dispatched using the C<G_KEEPERR> flag
could also result in this warning.  See L<perlcall/G_KEEPERR>.

=item <> should be quotes

(F) You wrote C<< require <file> >> when you should have written
C<require 'file'>.

=item Attempt to join self

(F) You tried to join a thread from within itself, which is an
impossible task.  You may be joining the wrong thread, or you may
need to move the join() to some other thread.

=item Bad evalled substitution pattern

(F) You've used the /e switch to evaluate the replacement for a
substitution, but perl found a syntax error in the code to evaluate,
most likely an unexpected right brace '}'.

=item Bad realloc() ignored

(S) An internal routine called realloc() on something that had never been
malloc()ed in the first place. Mandatory, but can be disabled by
setting environment variable C<PERL_BADFREE> to 1.

=item Bareword found in conditional

(W bareword) The compiler found a bareword where it expected a conditional,
which often indicates that an || or && was parsed as part of the
last argument of the previous construct, for example:

    open FOO || die;

It may also indicate a misspelled constant that has been interpreted
as a bareword:

    use constant TYPO => 1;
    if (TYOP) { print "foo" }

The C<strict> pragma is useful in avoiding such errors.

=item Binary number > 0b11111111111111111111111111111111 non-portable

(W portable) The binary number you specified is larger than 2**32-1
(4294967295) and therefore non-portable between systems.  See
L<perlport> for more on portability concerns.

=item Bit vector size > 32 non-portable

(W portable) Using bit vector sizes larger than 32 is non-portable.

=item Buffer overflow in prime_env_iter: %s

(W internal) A warning peculiar to VMS.  While Perl was preparing to iterate over
%ENV, it encountered a logical name or symbol definition which was too long,
so it was truncated to the string shown.

=item Can't check filesystem of script "%s"

(P) For some reason you can't check the filesystem of the script for nosuid.

=item Can't declare class for non-scalar %s in "%s"

(S) Currently, only scalar variables can declared with a specific class
qualifier in a "my" or "our" declaration.  The semantics may be extended
for other types of variables in future.

=item Can't declare %s in "%s"

(F) Only scalar, array, and hash variables may be declared as "my" or
"our" variables.  They must have ordinary identifiers as names.

=item Can't ignore signal CHLD, forcing to default

(W signal) Perl has detected that it is being run with the SIGCHLD signal
(sometimes known as SIGCLD) disabled.  Since disabling this signal
will interfere with proper determination of exit status of child
processes, Perl has reset the signal to its default value.
This situation typically indicates that the parent program under
which Perl may be running (e.g., cron) is being very careless.

=item Can't modify non-lvalue subroutine call

(F) Subroutines meant to be used in lvalue context should be declared as
such, see L<perlsub/"Lvalue subroutines">.

=item Can't read CRTL environ

(S) A warning peculiar to VMS.  Perl tried to read an element of %ENV
from the CRTL's internal environment array and discovered the array was
missing.  You need to figure out where your CRTL misplaced its environ
or define F<PERL_ENV_TABLES> (see L<perlvms>) so that environ is not searched.

=item Can't remove %s: %s, skipping file 

(S) You requested an inplace edit without creating a backup file.  Perl
was unable to remove the original file to replace it with the modified
file.  The file was left unmodified.

=item Can't return %s from lvalue subroutine

(F) Perl detected an attempt to return illegal lvalues (such
as temporary or readonly values) from a subroutine used as an lvalue.
This is not allowed.

=item Can't weaken a nonreference

(F) You attempted to weaken something that was not a reference.  Only
references can be weakened.

=item Character class [:%s:] unknown

(F) The class in the character class [: :] syntax is unknown.
See L<perlre>.

=item Character class syntax [%s] belongs inside character classes

(W unsafe) The character class constructs [: :], [= =], and [. .]  go
I<inside> character classes, the [] are part of the construct,
for example: /[012[:alpha:]345]/.  Note that [= =] and [. .]
are not currently implemented; they are simply placeholders for
future extensions.

=item Constant is not %s reference

(F) A constant value (perhaps declared using the C<use constant> pragma)
is being dereferenced, but it amounts to the wrong type of reference.  The
message indicates the type of reference that was expected. This usually
indicates a syntax error in dereferencing the constant value.
See L<perlsub/"Constant Functions"> and L<constant>.

=item constant(%s): %s

(F) The parser found inconsistencies either while attempting to define an
overloaded constant, or when trying to find the character name specified
in the C<\N{...}> escape.  Perhaps you forgot to load the corresponding
C<overload> or C<charnames> pragma?  See L<charnames> and L<overload>.

=item CORE::%s is not a keyword

(F) The CORE:: namespace is reserved for Perl keywords.

=item defined(@@array) is deprecated

(D) defined() is not usually useful on arrays because it checks for an
undefined I<scalar> value.  If you want to see if the array is empty,
just use C<if (@@array) { # not empty }> for example.  

=item defined(%hash) is deprecated

(D) defined() is not usually useful on hashes because it checks for an
undefined I<scalar> value.  If you want to see if the hash is empty,
just use C<if (%hash) { # not empty }> for example.  

=item Did not produce a valid header

See Server error.

=item (Did you mean "local" instead of "our"?)

(W misc) Remember that "our" does not localize the declared global variable.
You have declared it again in the same lexical scope, which seems superfluous.

=item Document contains no data

See Server error.

=item entering effective %s failed

(F) While under the C<use filetest> pragma, switching the real and
effective uids or gids failed.

=item false [] range "%s" in regexp

(W regexp) A character class range must start and end at a literal character, not
another character class like C<\d> or C<[:alpha:]>.  The "-" in your false
range is interpreted as a literal "-".  Consider quoting the "-",  "\-".
See L<perlre>.

=item Filehandle %s opened only for output

(W io) You tried to read from a filehandle opened only for writing.  If you
intended it to be a read/write filehandle, you needed to open it with
"+<" or "+>" or "+>>" instead of with "<" or nothing.  If
you intended only to read from the file, use "<".  See
L<perlfunc/open>.

=item flock() on closed filehandle %s

(W closed) The filehandle you're attempting to flock() got itself closed some
time before now.  Check your logic flow.  flock() operates on filehandles.
Are you attempting to call flock() on a dirhandle by the same name?

=item Global symbol "%s" requires explicit package name

(F) You've said "use strict vars", which indicates that all variables
must either be lexically scoped (using "my"), declared beforehand using
"our", or explicitly qualified to say which package the global variable
is in (using "::").

=item Hexadecimal number > 0xffffffff non-portable

(W portable) The hexadecimal number you specified is larger than 2**32-1
(4294967295) and therefore non-portable between systems.  See
L<perlport> for more on portability concerns.

=item Ill-formed CRTL environ value "%s"

(W internal) A warning peculiar to VMS.  Perl tried to read the CRTL's internal
environ array, and encountered an element without the C<=> delimiter
used to spearate keys from values.  The element is ignored.

=item Ill-formed message in prime_env_iter: |%s|

(W internal) A warning peculiar to VMS.  Perl tried to read a logical name
or CLI symbol definition when preparing to iterate over %ENV, and
didn't see the expected delimiter between key and value, so the
line was ignored.

=item Illegal binary digit %s

(F) You used a digit other than 0 or 1 in a binary number.

=item Illegal binary digit %s ignored

(W digit) You may have tried to use a digit other than 0 or 1 in a binary number.
Interpretation of the binary number stopped before the offending digit.

=item Illegal number of bits in vec

(F) The number of bits in vec() (the third argument) must be a power of
two from 1 to 32 (or 64, if your platform supports that).

=item Integer overflow in %s number

(W overflow) The hexadecimal, octal or binary number you have specified either
as a literal or as an argument to hex() or oct() is too big for your
architecture, and has been converted to a floating point number.  On a
32-bit architecture the largest hexadecimal, octal or binary number
representable without overflow is 0xFFFFFFFF, 037777777777, or
0b11111111111111111111111111111111 respectively.  Note that Perl
transparently promotes all numbers to a floating point representation
internally--subject to loss of precision errors in subsequent
operations.

=item Invalid %s attribute: %s

The indicated attribute for a subroutine or variable was not recognized
by Perl or by a user-supplied handler.  See L<attributes>.

=item Invalid %s attributes: %s

The indicated attributes for a subroutine or variable were not recognized
by Perl or by a user-supplied handler.  See L<attributes>.

=item invalid [] range "%s" in regexp

The offending range is now explicitly displayed.

=item Invalid separator character %s in attribute list

(F) Something other than a colon or whitespace was seen between the
elements of an attribute list.  If the previous attribute
had a parenthesised parameter list, perhaps that list was terminated
too soon.  See L<attributes>.

=item Invalid separator character %s in subroutine attribute list

(F) Something other than a colon or whitespace was seen between the
elements of a subroutine attribute list.  If the previous attribute
had a parenthesised parameter list, perhaps that list was terminated
too soon.

=item leaving effective %s failed

(F) While under the C<use filetest> pragma, switching the real and
effective uids or gids failed.

=item Lvalue subs returning %s not implemented yet

(F) Due to limitations in the current implementation, array and hash
values cannot be returned in subroutines used in lvalue context.
See L<perlsub/"Lvalue subroutines">.

=item Method %s not permitted

See Server error.

=item Missing %sbrace%s on \N{}

(F) Wrong syntax of character name literal C<\N{charname}> within
double-quotish context.

=item Missing command in piped open

(W pipe) You used the C<open(FH, "| command")> or C<open(FH, "command |")>
construction, but the command was missing or blank.

=item Missing name in "my sub"

(F) The reserved syntax for lexically scoped subroutines requires that they
have a name with which they can be found.

=item No %s specified for -%c

(F) The indicated command line switch needs a mandatory argument, but
you haven't specified one.

=item No package name allowed for variable %s in "our"

(F) Fully qualified variable names are not allowed in "our" declarations,
because that doesn't make much sense under existing semantics.  Such
syntax is reserved for future extensions.

=item No space allowed after -%c

(F) The argument to the indicated command line switch must follow immediately
after the switch, without intervening spaces.

=item no UTC offset information; assuming local time is UTC

(S) A warning peculiar to VMS.  Perl was unable to find the local
timezone offset, so it's assuming that local system time is equivalent
to UTC.  If it's not, define the logical name F<SYS$TIMEZONE_DIFFERENTIAL>
to translate to the number of seconds which need to be added to UTC to
get local time.

=item Octal number > 037777777777 non-portable

(W portable) The octal number you specified is larger than 2**32-1 (4294967295)
and therefore non-portable between systems.  See L<perlport> for more
on portability concerns.

See also L<perlport> for writing portable code.

=item panic: del_backref

(P) Failed an internal consistency check while trying to reset a weak
reference.

=item panic: kid popen errno read

(F) forked child returned an incomprehensible message about its errno.

=item panic: magic_killbackrefs

(P) Failed an internal consistency check while trying to reset all weak
references to an object.

=item Parentheses missing around "%s" list

(W parenthesis) You said something like

    my $foo, $bar = @@_;

when you meant

    my ($foo, $bar) = @@_;

Remember that "my", "our", and "local" bind tighter than comma.

=item Possible Y2K bug: %s

(W y2k) You are concatenating the number 19 with another number, which
could be a potential Year 2000 problem.

=item pragma "attrs" is deprecated, use "sub NAME : ATTRS" instead

(W deprecated) You have written somehing like this:

    sub doit
    {
        use attrs qw(locked);
    }

You should use the new declaration syntax instead.

    sub doit : locked
    {
        ...

The C<use attrs> pragma is now obsolete, and is only provided for
backward-compatibility. See L<perlsub/"Subroutine Attributes">.


=item Premature end of script headers

See Server error.

=item Repeat count in pack overflows

(F) You can't specify a repeat count so large that it overflows
your signed integers.  See L<perlfunc/pack>.

=item Repeat count in unpack overflows

(F) You can't specify a repeat count so large that it overflows
your signed integers.  See L<perlfunc/unpack>.

=item realloc() of freed memory ignored

(S) An internal routine called realloc() on something that had already
been freed.

=item Reference is already weak

(W misc) You have attempted to weaken a reference that is already weak.
Doing so has no effect.

=item setpgrp can't take arguments

(F) Your system has the setpgrp() from BSD 4.2, which takes no arguments,
unlike POSIX setpgid(), which takes a process ID and process group ID.

=item Strange *+?{} on zero-length expression

(W regexp) You applied a regular expression quantifier in a place where it
makes no sense, such as on a zero-width assertion.
Try putting the quantifier inside the assertion instead.  For example,
the way to match "abc" provided that it is followed by three
repetitions of "xyz" is C</abc(?=(?:xyz){3})/>, not C</abc(?=xyz){3}/>.

=item switching effective %s is not implemented

(F) While under the C<use filetest> pragma, we cannot switch the
real and effective uids or gids.

=item This Perl can't reset CRTL environ elements (%s)

=item This Perl can't set CRTL environ elements (%s=%s)

(W internal) Warnings peculiar to VMS.  You tried to change or delete an element
of the CRTL's internal environ array, but your copy of Perl wasn't
built with a CRTL that contained the setenv() function.  You'll need to
rebuild Perl with a CRTL that does, or redefine F<PERL_ENV_TABLES> (see
L<perlvms>) so that the environ array isn't the target of the change to
%ENV which produced the warning.

=item Too late to run %s block

(W void) A CHECK or INIT block is being defined during run time proper,
when the opportunity to run them has already passed.  Perhaps you are
loading a file with C<require> or C<do> when you should be using
C<use> instead.  Or perhaps you should put the C<require> or C<do>
inside a BEGIN block.

=item Unknown open() mode '%s'

(F) The second argument of 3-argument open() is not among the list
of valid modes: C<< < >>, C<< > >>, C<<< >> >>>, C<< +< >>,
C<< +> >>, C<<< +>> >>>, C<-|>, C<|->.

=item Unknown process %x sent message to prime_env_iter: %s

(P) An error peculiar to VMS.  Perl was reading values for %ENV before
iterating over it, and someone else stuck a message in the stream of
data Perl expected.  Someone's very confused, or perhaps trying to
subvert Perl's population of %ENV for nefarious purposes.

=item Unrecognized escape \\%c passed through

(W misc) You used a backslash-character combination which is not recognized
by Perl.  The character was understood literally.

=item Unterminated attribute parameter in attribute list

(F) The lexer saw an opening (left) parenthesis character while parsing an
attribute list, but the matching closing (right) parenthesis
character was not found.  You may need to add (or remove) a backslash
character to get your parentheses to balance.  See L<attributes>.

=item Unterminated attribute list

(F) The lexer found something other than a simple identifier at the start
of an attribute, and it wasn't a semicolon or the start of a
block.  Perhaps you terminated the parameter list of the previous attribute
too soon.  See L<attributes>.

=item Unterminated attribute parameter in subroutine attribute list

(F) The lexer saw an opening (left) parenthesis character while parsing a
subroutine attribute list, but the matching closing (right) parenthesis
character was not found.  You may need to add (or remove) a backslash
character to get your parentheses to balance.

=item Unterminated subroutine attribute list

(F) The lexer found something other than a simple identifier at the start
of a subroutine attribute, and it wasn't a semicolon or the start of a
block.  Perhaps you terminated the parameter list of the previous attribute
too soon.

=item Value of CLI symbol "%s" too long

(W misc) A warning peculiar to VMS.  Perl tried to read the value of an %ENV
element from a CLI symbol table, and found a resultant string longer
than 1024 characters.  The return value has been truncated to 1024
characters.

=item Version number must be a constant number

(P) The attempt to translate a C<use Module n.n LIST> statement into
its equivalent C<BEGIN> block found an internal inconsistency with
the version number.

=back

=head1 New tests

=over 4

=item	lib/attrs

Compatibility tests for C<sub : attrs> vs the older C<use attrs>.

=item	lib/env

Tests for new environment scalar capability (e.g., C<use Env qw($BAR);>).

=item	lib/env-array

Tests for new environment array capability (e.g., C<use Env qw(@@PATH);>).

=item	lib/io_const

IO constants (SEEK_*, _IO*).

=item	lib/io_dir

Directory-related IO methods (new, read, close, rewind, tied delete).

=item	lib/io_multihomed

INET sockets with multi-homed hosts.

=item	lib/io_poll

IO poll().

=item	lib/io_unix

UNIX sockets.

=item	op/attrs

Regression tests for C<my ($x,@@y,%z) : attrs> and <sub : attrs>.

=item	op/filetest

File test operators.

=item	op/lex_assign

Verify operations that access pad objects (lexicals and temporaries).

=item	op/exists_sub

Verify C<exists &sub> operations.

=back

=head1 Incompatible Changes

=head2 Perl Source Incompatibilities

Beware that any new warnings that have been added or old ones
that have been enhanced are B<not> considered incompatible changes.

Since all new warnings must be explicitly requested via the C<-w>
switch or the C<warnings> pragma, it is ultimately the programmer's
responsibility to ensure that warnings are enabled judiciously.

=over 4

=item CHECK is a new keyword

All subroutine definitions named CHECK are now special.  See
C</"Support for CHECK blocks"> for more information.

=item Treatment of list slices of undef has changed

There is a potential incompatibility in the behavior of list slices
that are comprised entirely of undefined values.
See L</"Behavior of list slices is more consistent">.

=head2 Format of $English::PERL_VERSION is different

The English module now sets $PERL_VERSION to $^V (a string value) rather
than C<$]> (a numeric value).  This is a potential incompatibility.
Send us a report via perlbug if you are affected by this.

See L</"Improved Perl version numbering system"> for the reasons for
this change.

=item Literals of the form C<1.2.3> parse differently

Previously, numeric literals with more than one dot in them were
interpreted as a floating point number concatenated with one or more
numbers.  Such "numbers" are now parsed as strings composed of the
specified ordinals.

For example, C<print 97.98.99> used to output C<97.9899> in earlier
versions, but now prints C<abc>.

See L</"Support for strings represented as a vector of ordinals">.

=item Possibly changed pseudo-random number generator

Perl programs that depend on reproducing a specific set of pseudo-random
numbers may now produce different output due to improvements made to the
rand() builtin.  You can use C<sh Configure -Drandfunc=rand> to obtain
the old behavior.

See L</"Better pseudo-random number generator">.

=item Hashing function for hash keys has changed

Even though Perl hashes are not order preserving, the apparently
random order encountered when iterating on the contents of a hash
is actually determined by the hashing algorithm used.  Improvements
in the algorithm may yield a random order that is B<different> from
that of previous versions, especially when iterating on hashes.

See L</"Better worst-case behavior of hashes"> for additional
information.

=item C<undef> fails on read only values

Using the C<undef> operator on a readonly value (such as $1) has
the same effect as assigning C<undef> to the readonly value--it
throws an exception.

=item Close-on-exec bit may be set on pipe and socket handles

Pipe and socket handles are also now subject to the close-on-exec
behavior determined by the special variable $^F.

See L</"More consistent close-on-exec behavior">.

=item Writing C<"$$1"> to mean C<"${$}1"> is unsupported

Perl 5.004 deprecated the interpretation of C<$$1> and
similar within interpolated strings to mean C<$$ . "1">,
but still allowed it.

In Perl 5.6.0 and later, C<"$$1"> always means C<"${$1}">.

=item delete(), values() and C<\(%h)> operate on aliases to values, not copies

delete(), each(), values() and hashes in a list context return the actual
values in the hash, instead of copies (as they used to in earlier
versions).  Typical idioms for using these constructs copy the
returned values, but this can make a significant difference when
creating references to the returned values.  Keys in the hash are still
returned as copies when iterating on a hash.

See also L</"delete(), each(), values() and hash iteration are faster">.

=item vec(EXPR,OFFSET,BITS) enforces powers-of-two BITS

vec() generates a run-time error if the BITS argument is not
a valid power-of-two integer.

=item Text of some diagnostic output has changed

Most references to internal Perl operations in diagnostics
have been changed to be more descriptive.  This may be an
issue for programs that may incorrectly rely on the exact
text of diagnostics for proper functioning.

=item C<%@@> has been removed

The undocumented special variable C<%@@> that used to accumulate
"background" errors (such as those that happen in DESTROY())
has been removed, because it could potentially result in memory
leaks.

=item Parenthesized not() behaves like a list operator

The C<not> operator now falls under the "if it looks like a function,
it behaves like a function" rule.

As a result, the parenthesized form can be used with C<grep> and C<map>.
The following construct used to be a syntax error before, but it works
as expected now:

    grep not($_), @@things;

On the other hand, using C<not> with a literal list slice may not
work.  The following previously allowed construct:

    print not (1,2,3)[0];

needs to be written with additional parentheses now:

    print not((1,2,3)[0]);

The behavior remains unaffected when C<not> is not followed by parentheses.

=item Semantics of bareword prototype C<(*)> have changed

The semantics of the bareword prototype C<*> have changed.  Perl 5.005
always coerced simple scalar arguments to a typeglob, which wasn't useful
in situations where the subroutine must distinguish between a simple
scalar and a typeglob.  The new behavior is to not coerce bareword
arguments to a typeglob.  The value will always be visible as either
a simple scalar or as a reference to a typeglob.

See L</"More functional bareword prototype (*)">.

=head2 Semantics of bit operators may have changed on 64-bit platforms

If your platform is either natively 64-bit or if Perl has been
configured to used 64-bit integers, i.e., $Config{ivsize} is 8, 
there may be a potential incompatibility in the behavior of bitwise
numeric operators (& | ^ ~ << >>).  These operators used to strictly
operate on the lower 32 bits of integers in previous versions, but now
operate over the entire native integral width.  In particular, note
that unary C<~> will produce different results on platforms that have
different $Config{ivsize}.  For portability, be sure to mask off
the excess bits in the result of unary C<~>, e.g., C<~$x & 0xffffffff>.

See L</"Bit operators support full native integer width">.

=head2 More builtins taint their results

As described in L</"Improved security features">, there may be more
sources of taint in a Perl program.

To avoid these new tainting behaviors, you can build Perl with the
Configure option C<-Accflags=-DINCOMPLETE_TAINTS>.  Beware that the
ensuing perl binary may be insecure.

=back

=head2 C Source Incompatibilities

=over 4

=item C<PERL_POLLUTE>

Release 5.005 grandfathered old global symbol names by providing preprocessor
macros for extension source compatibility.  As of release 5.6.0, these
preprocessor definitions are not available by default.  You need to explicitly
compile perl with C<-DPERL_POLLUTE> to get these definitions.  For
extensions still using the old symbols, this option can be
specified via MakeMaker:

    perl Makefile.PL POLLUTE=1

=item C<PERL_IMPLICIT_CONTEXT>

This new build option provides a set of macros for all API functions
such that an implicit interpreter/thread context argument is passed to
every API function.  As a result of this, something like C<sv_setsv(foo,bar)>
amounts to a macro invocation that actually translates to something like
C<Perl_sv_setsv(my_perl,foo,bar)>.  While this is generally expected
to not have any significant source compatibility issues, the difference
between a macro and a real function call will need to be considered.

This means that there B<is> a source compatibility issue as a result of
this if your extensions attempt to use pointers to any of the Perl API
functions.

Note that the above issue is not relevant to the default build of
Perl, whose interfaces continue to match those of prior versions
(but subject to the other options described here).

See L<perlguts/"The Perl API"> for detailed information on the
ramifications of building Perl with this option.

    NOTE: PERL_IMPLICIT_CONTEXT is automatically enabled whenever Perl is built
    with one of -Dusethreads, -Dusemultiplicity, or both.  It is not
    intended to be enabled by users at this time.

=item C<PERL_POLLUTE_MALLOC>

Enabling Perl's malloc in release 5.005 and earlier caused the namespace of
the system's malloc family of functions to be usurped by the Perl versions,
since by default they used the same names.  Besides causing problems on
platforms that do not allow these functions to be cleanly replaced, this
also meant that the system versions could not be called in programs that
used Perl's malloc.  Previous versions of Perl have allowed this behaviour
to be suppressed with the HIDEMYMALLOC and EMBEDMYMALLOC preprocessor
definitions.

As of release 5.6.0, Perl's malloc family of functions have default names
distinct from the system versions.  You need to explicitly compile perl with
C<-DPERL_POLLUTE_MALLOC> to get the older behaviour.  HIDEMYMALLOC
and EMBEDMYMALLOC have no effect, since the behaviour they enabled is now
the default.

Note that these functions do B<not> constitute Perl's memory allocation API.
See L<perlguts/"Memory Allocation"> for further information about that.

=back

=head2 Compatible C Source API Changes

=over

=item C<PATCHLEVEL> is now C<PERL_VERSION>

The cpp macros C<PERL_REVISION>, C<PERL_VERSION>, and C<PERL_SUBVERSION>
are now available by default from perl.h, and reflect the base revision,
patchlevel, and subversion respectively.  C<PERL_REVISION> had no
prior equivalent, while C<PERL_VERSION> and C<PERL_SUBVERSION> were
previously available as C<PATCHLEVEL> and C<SUBVERSION>.

The new names cause less pollution of the B<cpp> namespace and reflect what
the numbers have come to stand for in common practice.  For compatibility,
the old names are still supported when F<patchlevel.h> is explicitly
included (as required before), so there is no source incompatibility
from the change.

=back

=head2 Binary Incompatibilities

In general, the default build of this release is expected to be binary
compatible for extensions built with the 5.005 release or its maintenance
versions.  However, specific platforms may have broken binary compatibility
due to changes in the defaults used in hints files.  Therefore, please be
sure to always check the platform-specific README files for any notes to
the contrary.

The usethreads or usemultiplicity builds are B<not> binary compatible
with the corresponding builds in 5.005.

On platforms that require an explicit list of exports (AIX, OS/2 and Windows,
among others), purely internal symbols such as parser functions and the
run time opcodes are not exported by default.  Perl 5.005 used to export
all functions irrespective of whether they were considered part of the
public API or not.

For the full list of public API functions, see L<perlapi>.

=head1 Known Problems

=head2 Thread test failures

The subtests 19 and 20 of lib/thr5005.t test are known to fail due to
fundamental problems in the 5.005 threading implementation.  These are
not new failures--Perl 5.005_0x has the same bugs, but didn't have these
tests.

=head2 EBCDIC platforms not supported

In earlier releases of Perl, EBCDIC environments like OS390 (also
known as Open Edition MVS) and VM-ESA were supported.  Due to changes
required by the UTF-8 (Unicode) support, the EBCDIC platforms are not
supported in Perl 5.6.0.

=head2 In 64-bit HP-UX the lib/io_multihomed test may hang

The lib/io_multihomed test may hang in HP-UX if Perl has been
configured to be 64-bit.  Because other 64-bit platforms do not
hang in this test, HP-UX is suspect.  All other tests pass
in 64-bit HP-UX.  The test attempts to create and connect to
"multihomed" sockets (sockets which have multiple IP addresses).

=head2 NEXTSTEP 3.3 POSIX test failure

In NEXTSTEP 3.3p2 the implementation of the strftime(3) in the
operating system libraries is buggy: the %j format numbers the days of
a month starting from zero, which, while being logical to programmers,
will cause the subtests 19 to 27 of the lib/posix test may fail.

=head2 Tru64 (aka Digital UNIX, aka DEC OSF/1) lib/sdbm test failure with gcc

If compiled with gcc 2.95 the lib/sdbm test will fail (dump core).
The cure is to use the vendor cc, it comes with the operating system
and produces good code.

=head2 UNICOS/mk CC failures during Configure run

In UNICOS/mk the following errors may appear during the Configure run:

	Guessing which symbols your C compiler and preprocessor define...
	CC-20 cc: ERROR File = try.c, Line = 3
	...
	  bad switch yylook 79bad switch yylook 79bad switch yylook 79bad switch yylook 79#ifdef A29K
	...
	4 errors detected in the compilation of "try.c".

The culprit is the broken awk of UNICOS/mk.  The effect is fortunately
rather mild: Perl itself is not adversely affected by the error, only
the h2ph utility coming with Perl, and that is rather rarely needed
these days.

=head2 Arrow operator and arrays

When the left argument to the arrow operator C<< -> >> is an array, or
the C<scalar> operator operating on an array, the result of the
operation must be considered erroneous. For example:

    @@x->[2]
    scalar(@@x)->[2]

These expressions will get run-time errors in some future release of
Perl.

=head2 Windows 2000

Windows 2000 is known to fail test 22 in lib/open3.t (cause unknown at
this time).  That test passes under Windows NT.

=head2 Experimental features

As discussed above, many features are still experimental.  Interfaces and
implementation of these features are subject to change, and in extreme cases,
even subject to removal in some future release of Perl.  These features
include the following:

=over 4

=item Threads

=item Unicode

=item 64-bit support

=item Lvalue subroutines

=item Weak references

=item The pseudo-hash data type

=item The Compiler suite

=item Internal implementation of file globbing

=item The DB module

=item The regular expression constructs C<(?{ code })> and C<(??{ code })>

=back

=head1 Obsolete Diagnostics

=over 4

=item Character class syntax [: :] is reserved for future extensions

(W) Within regular expression character classes ([]) the syntax beginning
with "[:" and ending with ":]" is reserved for future extensions.
If you need to represent those character sequences inside a regular
expression character class, just quote the square brackets with the
backslash: "\[:" and ":\]".

=item Ill-formed logical name |%s| in prime_env_iter

(W) A warning peculiar to VMS.  A logical name was encountered when preparing
to iterate over %ENV which violates the syntactic rules governing logical
names.  Because it cannot be translated normally, it is skipped, and will not
appear in %ENV.  This may be a benign occurrence, as some software packages
might directly modify logical name tables and introduce nonstandard names,
or it may indicate that a logical name table has been corrupted.

=item Probable precedence problem on %s

(W) The compiler found a bareword where it expected a conditional,
which often indicates that an || or && was parsed as part of the
last argument of the previous construct, for example:

    open FOO || die;

=item regexp too big

(F) The current implementation of regular expressions uses shorts as
address offsets within a string.  Unfortunately this means that if
the regular expression compiles to longer than 32767, it'll blow up.
Usually when you want a regular expression this big, there is a better
way to do it with multiple statements.  See L<perlre>.

=item Use of "$$<digit>" to mean "${$}<digit>" is deprecated

(D) Perl versions before 5.004 misinterpreted any type marker followed
by "$" and a digit.  For example, "$$0" was incorrectly taken to mean
"${$}0" instead of "${$0}".  This bug is (mostly) fixed in Perl 5.004.

However, the developers of Perl 5.004 could not fix this bug completely,
because at least two widely-used modules depend on the old meaning of
"$$0" in a string.  So Perl 5.004 still interprets "$$<digit>" in the
old (broken) way inside strings; but it generates this message as a
warning.  And in Perl 5.005, this special treatment will cease.

=back

=head1 Reporting Bugs
d1001 2
a1002 2
If you find what you think is a bug, you might check the
articles recently posted to the comp.lang.perl.misc newsgroup.
d1007 1
a1007 1
program included with your release.  Be sure to trim your bug down
d1009 1
a1009 1
output of C<perl -V>, will be sent off to perlbug@@perl.com to be
d1024 2
a1025 2
Written by Gurusamy Sarathy <F<gsar@@activestate.com>>, with many
contributions from The Perl Porters.
@


1.1.1.3
log
@stock perl 5.6.1
@
text
@d3 1
a3 1
perldelta - what's new for perl v5.6.x
d7 1
a7 2
This document describes differences between the 5.005 release and the 5.6.1
release.
a8 595
=head1 Summary of changes between 5.6.0 and 5.6.1

This section contains a summary of the changes between the 5.6.0 release
and the 5.6.1 release.  More details about the changes mentioned here
may be found in the F<Changes> files that accompany the Perl source
distribution.  See L<perlhack> for pointers to online resources where you
can inspect the individual patches described by these changes.

=head2 Security Issues

suidperl will not run /bin/mail anymore, because some platforms have
a /bin/mail that is vulnerable to buffer overflow attacks.

Note that suidperl is neither built nor installed by default in
any recent version of perl.  Use of suidperl is highly discouraged.
If you think you need it, try alternatives such as sudo first.
See http://www.courtesan.com/sudo/.

=head2 Core bug fixes

This is not an exhaustive list.  It is intended to cover only the
significant user-visible changes.

=over

=item C<UNIVERSAL::isa()>

A bug in the caching mechanism used by C<UNIVERSAL::isa()> that affected
base.pm has been fixed.  The bug has existed since the 5.005 releases,
but wasn't tickled by base.pm in those releases.

=item Memory leaks

Various cases of memory leaks and attempts to access uninitialized memory
have been cured.  See L</"Known Problems"> below for further issues.

=item Numeric conversions

Numeric conversions did not recognize changes in the string value
properly in certain circumstances.

In other situations, large unsigned numbers (those above 2**31) could
sometimes lose their unsignedness, causing bogus results in arithmetic
operations.

Integer modulus on large unsigned integers sometimes returned
incorrect values.

Perl 5.6.0 generated "not a number" warnings on certain conversions where
previous versions didn't.

These problems have all been rectified.

Infinity is now recognized as a number.

=item qw(a\\b)

In Perl 5.6.0, qw(a\\b) produced a string with two backslashes instead
of one, in a departure from the behavior in previous versions.  The
older behavior has been reinstated.  

=item caller()

caller() could cause core dumps in certain situations.  Carp was sometimes
affected by this problem.

=item Bugs in regular expressions

Pattern matches on overloaded values are now handled correctly.

Perl 5.6.0 parsed m/\x{ab}/ incorrectly, leading to spurious warnings.
This has been corrected.

The RE engine found in Perl 5.6.0 accidentally pessimised certain kinds
of simple pattern matches.  These are now handled better.

Regular expression debug output (whether through C<use re 'debug'>
or via C<-Dr>) now looks better.

Multi-line matches like C<"a\nxb\n" =~ /(?!\A)x/m> were flawed.  The
bug has been fixed.

Use of $& could trigger a core dump under some situations.  This
is now avoided.

Match variables $1 et al., weren't being unset when a pattern match
was backtracking, and the anomaly showed up inside C</...(?{ ... }).../>
etc.  These variables are now tracked correctly.

pos() did not return the correct value within s///ge in earlier
versions.  This is now handled correctly.

=item "slurp" mode

readline() on files opened in "slurp" mode could return an extra "" at
the end in certain situations.  This has been corrected.

=item Autovivification of symbolic references to special variables

Autovivification of symbolic references of special variables described
in L<perlvar> (as in C<${$num}>) was accidentally disabled.  This works
again now.

=item Lexical warnings 

Lexical warnings now propagate correctly into C<eval "...">.

C<use warnings qw(FATAL all)> did not work as intended.  This has been
corrected.

Lexical warnings could leak into other scopes in some situations.
This is now fixed.

warnings::enabled() now reports the state of $^W correctly if the caller
isn't using lexical warnings.

=item Spurious warnings and errors

Perl 5.6.0 could emit spurious warnings about redefinition of dl_error()
when statically building extensions into perl.  This has been corrected.

"our" variables could result in bogus "Variable will not stay shared"
warnings.  This is now fixed.

"our" variables of the same name declared in two sibling blocks
resulted in bogus warnings about "redeclaration" of the variables.
The problem has been corrected.

=item glob()

Compatibility of the builtin glob() with old csh-based glob has been
improved with the addition of GLOB_ALPHASORT option.  See C<File::Glob>.

File::Glob::glob() has been renamed to File::Glob::bsd_glob()
because the name clashes with the builtin glob().  The older
name is still available for compatibility, but is deprecated.

Spurious syntax errors generated in certain situations, when glob()
caused File::Glob to be loaded for the first time, have been fixed.

=item Tainting

Some cases of inconsistent taint propagation (such as within hash
values) have been fixed.

The tainting behavior of sprintf() has been rationalized.  It does
not taint the result of floating point formats anymore, making the
behavior consistent with that of string interpolation.

=item sort()

Arguments to sort() weren't being provided the right wantarray() context.
The comparison block is now run in scalar context, and the arguments to
be sorted are always provided list context.

sort() is also fully reentrant, in the sense that the sort function
can itself call sort().  This did not work reliably in previous releases.

=item #line directives

#line directives now work correctly when they appear at the very
beginning of C<eval "...">.

=item Subroutine prototypes

The (\&) prototype now works properly.

=item map()

map() could get pathologically slow when the result list it generates
is larger than the source list.  The performance has been improved for
common scenarios.

=item Debugger

Debugger exit code now reflects the script exit code.

Condition C<"0"> in breakpoints is now treated correctly.

The C<d> command now checks the line number.

C<$.> is no longer corrupted by the debugger.

All debugger output now correctly goes to the socket if RemotePort
is set.

=item PERL5OPT

PERL5OPT can be set to more than one switch group.  Previously,
it used to be limited to one group of options only.

=item chop()

chop(@@list) in list context returned the characters chopped in reverse
order.  This has been reversed to be in the right order.

=item Unicode support

Unicode support has seen a large number of incremental improvements,
but continues to be highly experimental.  It is not expected to be
fully supported in the 5.6.x maintenance releases.

substr(), join(), repeat(), reverse(), quotemeta() and string
concatenation were all handling Unicode strings incorrectly in
Perl 5.6.0.  This has been corrected.

Support for C<tr///CU> and C<tr///UC> etc., have been removed since
we realized the interface is broken.  For similar functionality,
see L<perlfunc/pack>.

The Unicode Character Database has been updated to version 3.0.1
with additions made available to the public as of August 30, 2000.

The Unicode character classes \p{Blank} and \p{SpacePerl} have been
added.  "Blank" is like C isblank(), that is, it contains only
"horizontal whitespace" (the space character is, the newline isn't),
and the "SpacePerl" is the Unicode equivalent of C<\s> (\p{Space}
isn't, since that includes the vertical tabulator character, whereas
C<\s> doesn't.)

If you are experimenting with Unicode support in perl, the development
versions of Perl may have more to offer.  In particular, I/O layers
are now available in the development track, but not in the maintenance
track, primarily to do backward compatibility issues.  Unicode support
is also evolving rapidly on a daily basis in the development track--the
maintenance track only reflects the most conservative of these changes.

=item 64-bit support

Support for 64-bit platforms has been improved, but continues to be
experimental.  The level of support varies greatly among platforms.

=item Compiler

The B Compiler and its various backends have had many incremental
improvements, but they continue to remain highly experimental.  Use in
production environments is discouraged.

The perlcc tool has been rewritten so that the user interface is much
more like that of a C compiler.

The perlbc tools has been removed.  Use C<perlcc -B> instead.

=item Lvalue subroutines

There have been various bugfixes to support lvalue subroutines better.
However, the feature still remains experimental.

=item IO::Socket

IO::Socket::INET failed to open the specified port if the service
name was not known.  It now correctly uses the supplied port number
as is.

=item File::Find

File::Find now chdir()s correctly when chasing symbolic links.

=item xsubpp

xsubpp now tolerates embedded POD sections.

=item C<no Module;>

C<no Module;> does not produce an error even if Module does not have an
unimport() method.  This parallels the behavior of C<use> vis-a-vis
C<import>.

=item Tests

A large number of tests have been added.

=back

=head2 Core features

untie() will now call an UNTIE() hook if it exists.  See L<perltie>
for details.

The C<-DT> command line switch outputs copious tokenizing information.
See L<perlrun>.

Arrays are now always interpolated in double-quotish strings.  Previously,
C<"foo@@bar.com"> used to be a fatal error at compile time, if an array
C<@@bar> was not used or declared.  This transitional behavior was
intended to help migrate perl4 code, and is deemed to be no longer useful.
See L</"Arrays now always interpolate into double-quoted strings">.

keys(), each(), pop(), push(), shift(), splice() and unshift()
can all be overridden now.

C<my __PACKAGE__ $obj> now does the expected thing.

=head2 Configuration issues

On some systems (IRIX and Solaris among them) the system malloc is demonstrably
better.  While the defaults haven't been changed in order to retain binary
compatibility with earlier releases, you may be better off building perl
with C<Configure -Uusemymalloc ...> as discussed in the F<INSTALL> file.

C<Configure> has been enhanced in various ways:

=over

=item *

Minimizes use of temporary files.

=item *

By default, does not link perl with libraries not used by it, such as
the various dbm libraries.  SunOS 4.x hints preserve behavior on that
platform.

=item *

Support for pdp11-style memory models has been removed due to obsolescence.

=item *

Building outside the source tree is supported on systems that have
symbolic links. This is done by running

    sh /path/to/source/Configure -Dmksymlinks ...
    make all test install

in a directory other than the perl source directory.  See F<INSTALL>.

=item *

C<Configure -S> can be run non-interactively.

=back

=head2 Documentation

README.aix, README.solaris and README.macos have been added.  README.posix-bc
has been renamed to README.bs2000.  These are installed as L<perlaix>,
L<perlsolaris>, L<perlmacos>, and L<perlbs2000> respectively.

The following pod documents are brand new:

    perlclib	Internal replacements for standard C library functions
    perldebtut	Perl debugging tutorial
    perlebcdic	Considerations for running Perl on EBCDIC platforms
    perlnewmod	Perl modules: preparing a new module for distribution
    perlrequick	Perl regular expressions quick start
    perlretut	Perl regular expressions tutorial
    perlutil	utilities packaged with the Perl distribution

The F<INSTALL> file has been expanded to cover various issues, such as
64-bit support.

A longer list of contributors has been added to the source distribution.
See the file C<AUTHORS>.

Numerous other changes have been made to the included documentation and FAQs.

=head2 Bundled modules

The following modules have been added.

=over

=item B::Concise

Walks Perl syntax tree, printing concise info about ops.  See L<B::Concise>.

=item File::Temp

Returns name and handle of a temporary file safely.  See L<File::Temp>.

=item Pod::LaTeX

Converts Pod data to formatted LaTeX.  See L<Pod::LaTeX>.

=item Pod::Text::Overstrike

Converts POD data to formatted overstrike text.  See L<Pod::Text::Overstrike>.

=back

The following modules have been upgraded.

=over

=item CGI

CGI v2.752 is now included.

=item CPAN

CPAN v1.59_54 is now included.

=item Class::Struct

Various bugfixes have been added.

=item DB_File

DB_File v1.75 supports newer Berkeley DB versions, among other
improvements.

=item Devel::Peek

Devel::Peek has been enhanced to support dumping of memory statistics,
when perl is built with the included malloc().

=item File::Find

File::Find now supports pre and post-processing of the files in order
to sort() them, etc.

=item Getopt::Long

Getopt::Long v2.25 is included.

=item IO::Poll

Various bug fixes have been included.

=item IPC::Open3

IPC::Open3 allows use of numeric file descriptors.

=item Math::BigFloat

The fmod() function supports modulus operations.  Various bug fixes
have also been included.

=item Math::Complex

Math::Complex handles inf, NaN etc., better.

=item Net::Ping

ping() could fail on odd number of data bytes, and when the echo service
isn't running.  This has been corrected.

=item Opcode

A memory leak has been fixed.

=item Pod::Parser

Version 1.13 of the Pod::Parser suite is included.

=item Pod::Text

Pod::Text and related modules have been upgraded to the versions
in podlators suite v2.08.

=item SDBM_File

On dosish platforms, some keys went missing because of lack of support for
files with "holes".  A workaround for the problem has been added.

=item Sys::Syslog

Various bug fixes have been included.

=item Tie::RefHash

Now supports Tie::RefHash::Nestable to automagically tie hashref values.

=item Tie::SubstrHash

Various bug fixes have been included.

=back

=head2 Platform-specific improvements

The following new ports are now available.

=over

=item NCR MP-RAS

=item NonStop-UX

=back

Perl now builds under Amdahl UTS.

Perl has also been verified to build under Amiga OS.

Support for EPOC has been much improved.  See README.epoc.

Building perl with -Duseithreads or -Duse5005threads now works
under HP-UX 10.20 (previously it only worked under 10.30 or later).
You will need a thread library package installed.  See README.hpux.

Long doubles should now work under Linux.

MacOS Classic is now supported in the mainstream source package.
See README.macos.

Support for MPE/iX has been updated.  See README.mpeix.

Support for OS/2 has been improved.  See C<os2/Changes> and README.os2.

Dynamic loading on z/OS (formerly OS/390) has been improved.  See
README.os390.

Support for VMS has seen many incremental improvements, including
better support for operators like backticks and system(), and better
%ENV handling.  See C<README.vms> and L<perlvms>.

Support for Stratus VOS has been improved.  See C<vos/Changes> and README.vos.

Support for Windows has been improved.

=over

=item *

fork() emulation has been improved in various ways, but still continues
to be experimental.  See L<perlfork> for known bugs and caveats.

=item *

%SIG has been enabled under USE_ITHREADS, but its use is completely
unsupported under all configurations.

=item *

Borland C++ v5.5 is now a supported compiler that can build Perl.
However, the generated binaries continue to be incompatible with those
generated by the other supported compilers (GCC and Visual C++).

=item *

Non-blocking waits for child processes (or pseudo-processes) are
supported via C<waitpid($pid, &POSIX::WNOHANG)>.

=item *

A memory leak in accept() has been fixed.

=item *

wait(), waitpid() and backticks now return the correct exit status under
Windows 9x.

=item *

Trailing new %ENV entries weren't propagated to child processes.  This
is now fixed.

=item *

Current directory entries in %ENV are now correctly propagated to child
processes.

=item *

Duping socket handles with open(F, ">&MYSOCK") now works under Windows 9x.

=item *

The makefiles now provide a single switch to bulk-enable all the features
enabled in ActiveState ActivePerl (a popular binary distribution).

=item *

Win32::GetCwd() correctly returns C:\ instead of C: when at the drive root.
Other bugs in chdir() and Cwd::cwd() have also been fixed.

=item *

fork() correctly returns undef and sets EAGAIN when it runs out of
pseudo-process handles.

=item *

ExtUtils::MakeMaker now uses $ENV{LIB} to search for libraries.

=item *

UNC path handling is better when perl is built to support fork().

=item *

A handle leak in socket handling has been fixed.

=item *

send() works from within a pseudo-process.

=back

Unless specifically qualified otherwise, the remainder of this document
covers changes between the 5.005 and 5.6.0 releases.
 
d13 1
a13 1
Perl 5.6.0 introduces the beginnings of support for running multiple
d79 1
a79 1
with a Unicode smiley face at the end.
d94 1
a94 1
readable way to construct (possibly Unicode) strings instead of
d378 1
a378 1
=head2 Support for CHECK blocks
d391 1
a391 1
=head2 Better pseudo-random number generator
d412 1
a412 1
=head2 Better worst-case behavior of hashes
d509 1
a509 1
it.  The array element at that position returns to its uninitialized
d635 1
a635 1
=head2 More consistent close-on-exec behavior
d696 1
a696 1
=head2 More functional bareword prototype (*)
a762 31
=head2 Arrays now always interpolate into double-quoted strings

In double-quoted strings, arrays now interpolate, no matter what.  The
behavior in earlier versions of perl 5 was that arrays would interpolate
into strings if the array had been mentioned before the string was
compiled, and otherwise Perl would raise a fatal compile-time error.
In versions 5.000 through 5.003, the error was

        Literal @@example now requires backslash

In versions 5.004_01 through 5.6.0, the error was

        In string, @@example now must be written as \@@example

The idea here was to get people into the habit of writing
C<"fred\@@example.com"> when they wanted a literal C<@@> sign, just as
they have always written C<"Give me back my \$5"> when they wanted a
literal C<$> sign.

Starting with 5.6.1, when Perl now sees an C<@@> sign in a
double-quoted string, it I<always> attempts to interpolate an array,
regardless of whether or not the array has been used or declared
already.  The fatal error has been downgraded to an optional warning:

        Possible unintended interpolation of @@example in string

This warns you that C<"fred@@example.com"> is going to turn into
C<fred.com> if you don't backslash the C<@@>.
See http://www.plover.com/~mjd/perl/at-error.html for more details
about the history here.

d783 1
a783 1
    generated code may not be correct, even when it manages to execute
d1010 1
a1010 1
    B<This program> will read the given input file(s) and do something
d1042 1
a1042 1
still set for backwards compatibility.
d1412 1
a1412 1
=head2 delete(), each(), values() and hash iteration are faster
a1520 7
=head2 gcc automatically tried if 'cc' does not seem to be working

In many platforms the vendor-supplied 'cc' is too stripped-down to
build Perl (basically, the 'cc' doesn't do ANSI C).  If this seems
to be the case and the 'cc' does not seem to be the GNU C compiler
'gcc', an automatic attempt is made to find and use 'gcc' instead.

d1529 8
d1550 1
a1550 1
EPOC is now supported (on Psion 5).
d1593 1
a1593 1
installation process to accommodate core changes and VMS-specific options.
d1706 1
a1706 1
Some "errors" encountered at compile time were by necessity 
d1814 1
a1814 1
is used, or if compilation fails.
d1816 1
a1816 2
See L</"Support for CHECK blocks"> for how to run things when the compile 
phase ends.
d2158 1
a2158 1
used to separate keys from values.  The element is ignored.
a2308 14
=item Possible unintended interpolation of %s in string

(W ambiguous) It used to be that Perl would try to guess whether you
wanted an array interpolated or a literal @@.  It no longer does this;
arrays are now I<always> interpolated into strings.  This means that 
if you try something like:

        print "fred@@example.com";

and the array C<@@example> doesn't exist, Perl is going to print
C<fred.com>, which is probably not what you wanted.  To get a literal
C<@@> sign in a string, put a backslash before it, just as you would
to get a literal C<$> sign.

d2316 1
a2316 1
(W deprecated) You have written something like this:
d2533 1
a2533 1
=item Format of $English::PERL_VERSION is different
d2595 1
a2595 1
=item delete(), each(), values() and C<\(%h)>
d2597 1
a2597 4
operate on aliases to values, not copies

delete(), each(), values() and hashes (e.g. C<\(%h)>)
in a list context return the actual
d2658 1
a2658 1
=item Semantics of bit operators may have changed on 64-bit platforms
d2672 1
a2672 1
=item More builtins taint their results
d2747 1
a2747 1
=over 4
d2787 1
a2787 1
=head2 Localizing a tied hash element may leak memory
d2789 4
a2792 2
As of the 5.6.1 release, there is a known leak when code such as this
is executed:
d2794 1
a2794 2
    use Tie::Hash;
    tie my %tie_hash => 'Tie::StdHash';
d2796 4
a2799 5
    ...

    local($tie_hash{Foo}) = 1; # leaks

=head2 Known test failures
d2801 1
a2801 6
=over

=item 64-bit builds

Subtest #15 of lib/b.t may fail under 64-bit builds on platforms such
as HP-UX PA64 and Linux IA64.  The issue is still being investigated.
d2809 1
a2809 10
Note that 64-bit support is still experimental.

=item Failure of Thread tests

The subtests 19 and 20 of lib/thr5005.t test are known to fail due to
fundamental problems in the 5.005 threading implementation.  These are
not new failures--Perl 5.005_0x has the same bugs, but didn't have these
tests.  (Note that support for 5.005-style threading remains experimental.)

=item NEXTSTEP 3.3 POSIX test failure
d2816 1
a2816 1
=item Tru64 (aka Digital UNIX, aka DEC OSF/1) lib/sdbm test failure with gcc
a2821 12
=back

=head2 EBCDIC platforms not fully supported

In earlier releases of Perl, EBCDIC environments like OS390 (also
known as Open Edition MVS) and VM-ESA were supported.  Due to changes
required by the UTF-8 (Unicode) support, the EBCDIC platforms are not
supported in Perl 5.6.0.

The 5.6.1 release improves support for EBCDIC platforms, but they
are not fully supported yet.

d2850 5
d2882 1
a2882 3
=item The regular expression code constructs: 

C<(?{ code })> and C<(??{ code })>
a2906 12
=item In string, @@%s now must be written as \@@%s

The description of this error used to say:

        (Someday it will simply assume that an unbackslashed @@
         interpolates an array.)

That day has come, and this fatal error has been removed.  It has been
replaced by a non-fatal warning instead.
See L</Arrays now always interpolate into double-quoted strings> for
details.

d2941 1
a2941 1
There may also be information at http://www.perl.com/, the Perl
d2947 1
a2947 1
output of C<perl -V>, will be sent off to perlbug@@perl.org to be
d2962 1
a2962 1
Written by Gurusamy Sarathy <F<gsar@@ActiveState.com>>, with many
d2965 1
a2965 1
Send omissions or corrections to <F<perlbug@@perl.org>>.
@


1.1.1.4
log
@stock perl 5.8.0 from CPAN
@
text
@d3 1
a3 1
perldelta - what is new for perl v5.8.0
d7 2
a8 2
This document describes differences between the 5.6.0 release and
the 5.8.0 release.
d10 1
a10 3
Many of the bug fixes in 5.8.0 were already seen in the 5.6.1
maintenance release since the two releases were kept closely
coordinated (while 5.8.0 was still called 5.7.something).
d12 5
a16 3
Changes that were integrated into the 5.6.1 release are marked C<[561]>.
Many of these changes have been further developed since 5.6.1 was released,
those are marked C<[561+]>.
d18 1
a18 2
You can see the list of changes in the 5.6.1 release (both from the
5.005_03 release and the 5.6.0 release) by reading L<perl561delta>.
d20 2
a21 1
=head1 Highlights In 5.8.0
d23 4
a26 1
=over 4
d28 1
a28 1
=item *
d30 2
a31 1
Better Unicode support
d33 1
a33 1
=item *
d35 1
a35 1
New IO Implementation
d37 3
a39 1
=item *
d41 1
a41 1
New Thread Implementation
d43 2
a44 1
=item *
d46 1
a46 1
Better Numeric Accuracy
d48 2
a49 1
=item *
d51 3
a53 1
Safe Signals
d55 2
a56 1
=item *
d58 2
a59 1
Many New Modules
d61 1
a61 1
=item *
d63 1
a63 1
More Extensive Regression Testing
d65 1
a65 1
=back
d67 3
a69 1
=head1 Incompatible Changes
d71 1
a71 1
=head2 Binary Incompatibility
d73 2
a74 1
B<Perl 5.8 is not binary compatible with earlier releases of Perl.>
d76 1
a76 1
B<You have to recompile your XS modules.>
d78 1
a78 1
(Pure Perl modules should continue to work.)
d80 2
a81 119
The major reason for the discontinuity is the new IO architecture
called PerlIO.  PerlIO is the default configuration because without
it many new features of Perl 5.8 cannot be used.  In other words:
you just have to recompile your modules containing XS code, sorry
about that.

In future releases of Perl, non-PerlIO aware XS modules may become
completely unsupported.  This shouldn't be too difficult for module
authors, however: PerlIO has been designed as a drop-in replacement
(at the source code level) for the stdio interface.

Depending on your platform, there are also other reasons why
we decided to break binary compatibility, please read on.

=head2 64-bit platforms and malloc

If your pointers are 64 bits wide, the Perl malloc is no longer being
used because it does not work well with 8-byte pointers.  Also,
usually the system mallocs on such platforms are much better optimized
for such large memory models than the Perl malloc.  Some memory-hungry
Perl applications like the PDL don't work well with Perl's malloc.
Finally, other applications than Perl (such as mod_perl) tend to prefer
the system malloc.  Such platforms include Alpha and 64-bit HPPA,
MIPS, PPC, and Sparc.

=head2 AIX Dynaloading

The AIX dynaloading now uses in AIX releases 4.3 and newer the native
dlopen interface of AIX instead of the old emulated interface.  This
change will probably break backward compatibility with compiled
modules.  The change was made to make Perl more compliant with other
applications like mod_perl which are using the AIX native interface.

=head2 Attributes for C<my> variables now handled at run-time

The C<my EXPR : ATTRS> syntax now applies variable attributes at
run-time.  (Subroutine and C<our> variables still get attributes applied
at compile-time.)  See L<attributes> for additional details.  In particular,
however, this allows variable attributes to be useful for C<tie> interfaces,
which was a deficiency of earlier releases.  Note that the new semantics
doesn't work with the Attribute::Handlers module (as of version 0.76).

=head2 Socket Extension Dynamic in VMS

The Socket extension is now dynamically loaded instead of being
statically built in.  This may or may not be a problem with ancient
TCP/IP stacks of VMS: we do not know since we weren't able to test
Perl in such configurations.

=head2 IEEE-format Floating Point Default on OpenVMS Alpha

Perl now uses IEEE format (T_FLOAT) as the default internal floating
point format on OpenVMS Alpha, potentially breaking binary compatibility
with external libraries or existing data.  G_FLOAT is still available as
a configuration option.  The default on VAX (D_FLOAT) has not changed.

=head2 New Unicode Semantics (no more C<use utf8>, almost)

Previously in Perl 5.6 to use Unicode one would say "use utf8" and
then the operations (like string concatenation) were Unicode-aware
in that lexical scope.

This was found to be an inconvenient interface, and in Perl 5.8 the
Unicode model has completely changed: now the "Unicodeness" is bound
to the data itself, and for most of the time "use utf8" is not needed
at all.  The only remaining use of "use utf8" is when the Perl script
itself has been written in the UTF-8 encoding of Unicode.  (UTF-8 has
not been made the default since there are many Perl scripts out there
that are using various national eight-bit character sets, which would
be illegal in UTF-8.)

See L<perluniintro> for the explanation of the current model,
and L<utf8> for the current use of the utf8 pragma.

=head2 New Unicode Properties

Unicode I<scripts> are now supported. Scripts are similar to (and superior
to) Unicode I<blocks>. The difference between scripts and blocks is that
scripts are the glyphs used by a language or a group of languages, while
the blocks are more artificial groupings of (mostly) 256 characters based
on the Unicode numbering.

In general, scripts are more inclusive, but not universally so. For
example, while the script C<Latin> includes all the Latin characters and
their various diacritic-adorned versions, it does not include the various
punctuation or digits (since they are not solely C<Latin>).

A number of other properties are now supported, including C<\p{L&}>,
C<\p{Any}> C<\p{Assigned}>, C<\p{Unassigned}>, C<\p{Blank}> [561] and
C<\p{SpacePerl}> [561] (along with their C<\P{...}> versions, of course).
See L<perlunicode> for details, and more additions.

The C<In> or C<Is> prefix to names used with the C<\p{...}> and C<\P{...}>
are now almost always optional. The only exception is that a C<In> prefix
is required to signify a Unicode block when a block name conflicts with a
script name. For example, C<\p{Tibetan}> refers to the script, while
C<\p{InTibetan}> refers to the block. When there is no name conflict, you
can omit the C<In> from the block name (e.g. C<\p{BraillePatterns}>), but
to be safe, it's probably best to always use the C<In>).

=head2 REF(...) Instead Of SCALAR(...)

A reference to a reference now stringifies as "REF(0x81485ec)" instead
of "SCALAR(0x81485ec)" in order to be more consistent with the return
value of ref().

=head2 pack/unpack D/F recycled

The undocumented pack/unpack template letters D/F have been recycled
for better use: now they stand for long double (if supported by the
platform) and NV (Perl internal floating point type).  (They used
to be aliases for d/f, but you never knew that.)

=head2 glob() now returns filenames in alphabetical order

The list of filenames from glob() (or <...>) is now by default sorted
alphabetically to be csh-compliant (which is what happened before
in most UNIX platforms).  (bsd_glob() does still sort platform
natively, ASCII or EBCDIC, unless GLOB_ALPHASORT is specified.) [561]
d83 2
a84 1
=head2 Deprecations
d86 2
a87 1
=over 4
d89 2
a90 1
=item *
d92 2
a93 2
The semantics of bless(REF, REF) were unclear and until someone proves
it to make some sense, it is forbidden.
d95 3
a97 1
=item *
d99 2
a100 2
The obsolete chat2 library that should never have been allowed
to escape the laboratory has been decommissioned.
d102 1
a102 1
=item *
d104 2
a105 4
Using chdir("") or chdir(undef) instead of explicit chdir() is
doubtful.  A failure (think chdir(some_function()) can lead into
unintended chdir() to the home directory, therefore this behaviour
is deprecated.
d107 1
a107 1
=item *
d109 3
a111 4
The builtin dump() function has probably outlived most of its
usefulness.  The core-dumping functionality will remain in future
available as an explicit call to C<CORE::dump()>, but in future
releases the behaviour of an unqualified C<dump()> call may change.
d113 1
a113 1
=item *
d115 1
a115 4
The very dusty examples in the eg/ directory have been removed.
Suggestions for new shiny examples welcome but the main issue is that
the examples need to be documented, tested and (most importantly)
maintained.
d117 2
a118 1
=item *
d120 2
a121 3
The (bogus) escape sequences \8 and \9 now give an optional warning
("Unrecognized escape passed through").  There is no need to \-escape
any C<\w> character.
d123 2
a124 1
=item *
d126 1
a126 1
The *glob{FILEHANDLE} is deprecated, use *glob{IO} instead.
d128 2
a129 1
=item *
d131 2
a132 4
The C<package;> syntax (C<package> without an argument) has been
deprecated.  Its semantics were never that clear and its
implementation even less so.  If you have used that feature to
disallow all but fully qualified variables, C<use strict;> instead.
d134 3
a136 1
=item *
d138 1
a138 4
The unimplemented POSIX regex features [[.cc.]] and [[=c=]] are still
recognised but now cause fatal errors.  The previous behaviour of
ignoring them by default and warning if requested was unacceptable
since it, in a way, falsely promised that the features could be used.
d140 2
a141 1
=item *
d143 3
a145 3
In future releases, non-PerlIO aware XS modules may become completely
unsupported.  Since PerlIO is a drop-in replacement for stdio at the
source code level, this shouldn't be that drastic a change.
d147 2
a148 1
=item *
d150 1
a150 10
Previous versions of perl and some readings of some sections of Camel
III implied that the C<:raw> "discipline" was the inverse of C<:crlf>.
Turning off "clrfness" is no longer enough to make a stream truly
binary. So the PerlIO C<:raw> layer (or "discipline", to use the Camel
book's older terminology) is now formally defined as being equivalent
to binmode(FH) - which is in turn defined as doing whatever is
necessary to pass each byte as-is without any translation.  In
particular binmode(FH) - and hence C<:raw> - will now turn off both
CRLF and UTF-8 translation and remove other layers (e.g. :encoding())
which would modify byte stream.
d152 2
a153 1
=item *
d155 3
a157 10
The current user-visible implementation of pseudo-hashes (the weird
use of the first array element) is deprecated starting from Perl 5.8.0
and will be removed in Perl 5.10.0, and the feature will be
implemented differently.  Not only is the current interface rather
ugly, but the current implementation slows down normal array and hash
use quite noticeably. The C<fields> pragma interface will remain
available.  The I<restricted hashes> interface is expected to
be the replacement interface (see L<Hash::Util>).  If your existing
programs depends on the underlying implementation, consider using
L<Class::PseudoHash> from CPAN.
d159 1
a159 1
=item *
d161 3
a163 1
The syntaxes C<< @@a->[...] >> and  C<< %h->{...} >> have now been deprecated.
d165 2
a166 1
=item *
d168 1
a168 3
After years of trying, suidperl is considered to be too complex to
ever be considered truly secure.  The suidperl functionality is likely
to be removed in a future release.
d170 2
a171 1
=item *
d173 1
a173 4
The 5.005 threads model (module C<Thread>) is deprecated and expected
to be removed in Perl 5.10.  Multithreaded code should be migrated to
the new ithreads model (see L<threads>, L<threads::shared> and
L<perlthrtut>).
d175 1
a175 1
=item *
d177 1
a177 2
The long deprecated uppercase aliases for the string comparison
operators (EQ, NE, LT, LE, GE, GT) have now been removed.
d179 3
a181 1
=item *
d183 1
a183 3
The tr///C and tr///U features have been removed and will not return;
the interface was a mistake.  Sorry about that.  For similar
functionality, see pack('U0', ...) and pack('C0', ...). [561]
d185 1
a185 22
=item *

Earlier Perls treated "sub foo (@@bar)" as equivalent to "sub foo (@@)".
The prototypes are now checked better at compile-time for invalid
syntax.  An optional warning is generated ("Illegal character in
prototype...")  but this may be upgraded to a fatal error in a future
release.

=item *

The C<exec LIST> and C<system LIST> operations now produce warnings on
tainted data and in some future release they will produce fatal errors.

=item *

The existing behaviour when localising tied arrays and hashes is wrong,
and will be changed in a future release, so do not rely on the existing
behaviour. See L<"Localising Tied Arrays and Hashes Is Broken">.

=back

=head1 Core Enhancements
d187 1
a187 1
=head2 Unicode Overhaul
d189 1
a189 5
Unicode in general should be now much more usable than in Perl 5.6.0
(or even in 5.6.1).  Unicode can be used in hash keys, Unicode in
regular expressions should work now, Unicode in tr/// should work now,
Unicode in I/O should work now.  See L<perluniintro> for introduction
and L<perlunicode> for details.
d191 1
a191 1
=over 4
d193 2
a194 1
=item *
d196 1
a196 3
The Unicode Character Database coming with Perl has been upgraded
to Unicode 3.2.0.  For more information, see http://www.unicode.org/ .
[561+] (5.6.1 has UCD 3.0.1.)
d198 2
a199 1
=item *
d201 1
a201 4
For developers interested in enhancing Perl's Unicode capabilities:
almost all the UCD files are included with the Perl distribution in
the F<lib/unicore> subdirectory.  The most notable omission, for space
considerations, is the Unihan database.
d203 2
a204 1
=item *
d206 1
a206 5
The properties \p{Blank} and \p{SpacePerl} have been added. "Blank" is like
C isblank(), that is, it contains only "horizontal whitespace" (the space
character is, the newline isn't), and the "SpacePerl" is the Unicode
equivalent of C<\s> (\p{Space} isn't, since that includes the vertical
tabulator character, whereas C<\s> doesn't.)
d208 3
a210 2
See "New Unicode Properties" earlier in this document for additional
information on changes with Unicode properties.
d212 3
a214 1
=back
d216 3
a218 1
=head2 PerlIO is Now The Default
d220 2
a221 1
=over 4
d223 6
a228 1
=item *
d230 6
a235 4
IO is now by default done via PerlIO rather than system's "stdio".
PerlIO allows "layers" to be "pushed" onto a file handle to alter the
handle's behaviour.  Layers can be specified at open time via 3-arg
form of open:
d237 1
a237 1
   open($fh,'>:crlf :utf8', $path) || ...
d239 2
a240 1
or on already opened handles via extended C<binmode>:
d242 1
a242 1
   binmode($fh,':encoding(iso-8859-7)');
d244 3
a246 5
The built-in layers are: unix (low level read/write), stdio (as in
previous Perls), perlio (re-implementation of stdio buffering in a
portable manner), crlf (does CRLF <=> "\n" translation as on Win32,
but available on any platform).  A mmap layer may be available if
platform supports it (mostly UNIXes).
d248 2
a249 1
Layers to be applied by default may be specified via the 'open' pragma.
d251 1
a251 2
See L</"Installation and Configuration Improvements"> for the effects
of PerlIO on your architecture name.
d253 1
a253 1
=item *
d255 2
a256 2
If your platform supports fork(), you can use the list form of C<open>
for pipes.  For example:
d258 1
a258 1
    open KID_PS, "-|", "ps", "aux" or die $!;
d260 3
a262 3
forks the ps(1) command (without spawning a shell, as there are more
than three arguments to open()), and reads its standard output via the
C<KID_PS> filehandle.  See L<perlipc>.
d264 1
a264 1
=item *
d266 1
a266 2
File handles can be marked as accepting Perl's internal encoding of Unicode
(UTF-8 or UTF-EBCDIC depending on platform) by a pseudo layer ":utf8" :
d268 1
a268 1
   open($fh,">:utf8","Uni.txt");
d270 1
a270 6
Note for EBCDIC users: the pseudo layer ":utf8" is erroneously named
for you since it's not UTF-8 what you will be getting but instead
UTF-EBCDIC.  See L<perlunicode>, L<utf8>, and
http://www.unicode.org/unicode/reports/tr16/ for more information.
In future releases this naming may change.  See L<perluniintro>
for more information about UTF-8.
d272 1
a272 1
=item *
d274 3
a276 6
If your environment variables (LC_ALL, LC_CTYPE, LANG, LANGUAGE) look
like you want to use UTF-8 (any of the the variables match C</utf-?8/i>),
your STDIN, STDOUT, STDERR handles and the default open layer
(see L<open>) are marked as UTF-8.  (This feature, like other new
features that combine Unicode and I/O, work only if you are using
PerlIO, but that's the default.)
d278 1
a278 4
Note that after this Perl really does assume that everything is UTF-8:
for example if some input handle is not, Perl will probably very soon
complain about the input data like this "Malformed UTF-8 ..." since
any old eight-bit data is not legal UTF-8.
d280 1
a280 25
Note for code authors: if you want to enable your users to use UTF-8
as their default encoding  but in your code still have eight-bit I/O streams
(such as images or zip files), you need to explicitly open() or binmode()
with C<:bytes> (see L<perlfunc/open> and L<perlfunc/binmode>), or you
can just use C<binmode(FH)> (nice for pre-5.8.0 backward compatibility).

=item *

File handles can translate character encodings from/to Perl's internal
Unicode form on read/write via the ":encoding()" layer.

=item *

File handles can be opened to "in memory" files held in Perl scalars via:

   open($fh,'>', \$variable) || ...

=item *

Anonymous temporary files are available without need to
'use FileHandle' or other module via

   open($fh,"+>", undef) || ...

That is a literal undef, not an undefined value.
d284 1
a284 1
=head2 ithreads
d286 2
a287 46
The new interpreter threads ("ithreads" for short) implementation of
multithreading, by Arthur Bergman, replaces the old "5.005 threads"
implementation.  In the ithreads model any data sharing between
threads must be explicit, as opposed to the model where data sharing
was implicit.  See L<threads> and L<threads::shared>, and
L<perlthrtut>.

As a part of the ithreads implementation Perl will also use
any necessary and detectable reentrant libc interfaces.

=head2 Restricted Hashes

A restricted hash is restricted to a certain set of keys, no keys
outside the set can be added.  Also individual keys can be restricted
so that the key cannot be deleted and the value cannot be changed.
No new syntax is involved: the Hash::Util module is the interface.

=head2 Safe Signals

Perl used to be fragile in that signals arriving at inopportune moments
could corrupt Perl's internal state.  Now Perl postpones handling of
signals until it's safe (between opcodes).

This change may have surprising side effects because signals no longer
interrupt Perl instantly.  Perl will now first finish whatever it was
doing, like finishing an internal operation (like sort()) or an
external operation (like an I/O operation), and only then look at any
arrived signals (and before starting the next operation).  No more corrupt
internal state since the current operation is always finished first,
but the signal may take more time to get heard.  Note that breaking
out from potentially blocking operations should still work, though.

=head2 Understanding of Numbers

In general a lot of fixing has happened in the area of Perl's
understanding of numbers, both integer and floating point.  Since in
many systems the standard number parsing functions like C<strtoul()>
and C<atof()> seem to have bugs, Perl tries to work around their
deficiencies.  This results hopefully in more accurate numbers.

Perl now tries internally to use integer values in numeric conversions
and basic arithmetics (+ - * /) if the arguments are integers, and
tries also to keep the results stored internally as integers.
This change leads to often slightly faster and always less lossy
arithmetics. (Previously Perl always preferred floating point numbers
in its math.)
d289 2
a290 1
=head2 Arrays now always interpolate into double-quoted strings [561]
d292 5
a296 9
In double-quoted strings, arrays now interpolate, no matter what.  The
behavior in earlier versions of perl 5 was that arrays would interpolate
into strings if the array had been mentioned before the string was
compiled, and otherwise Perl would raise a fatal compile-time error.
In versions 5.000 through 5.003, the error was

        Literal @@example now requires backslash

In versions 5.004_01 through 5.6.0, the error was
d298 2
a299 6
        In string, @@example now must be written as \@@example

The idea here was to get people into the habit of writing
C<"fred\@@example.com"> when they wanted a literal C<@@> sign, just as
they have always written C<"Give me back my \$5"> when they wanted a
literal C<$> sign.
d301 1
a301 4
Starting with 5.6.1, when Perl now sees an C<@@> sign in a
double-quoted string, it I<always> attempts to interpolate an array,
regardless of whether or not the array has been used or declared
already.  The fatal error has been downgraded to an optional warning:
d303 1
a303 1
        Possible unintended interpolation of @@example in string
d305 4
a308 4
This warns you that C<"fred@@example.com"> is going to turn into
C<fred.com> if you don't backslash the C<@@>.
See http://www.plover.com/~mjd/perl/at-error.html for more details
about the history here.
d310 1
a310 1
=head2 Miscellaneous Changes
d312 1
a312 1
=over 4
d316 1
a316 2
AUTOLOAD is now lvaluable, meaning that you can add the :lvalue attribute
to AUTOLOAD subroutines and you can assign to the AUTOLOAD return value.
d320 3
a322 9
The $Config{byteorder} (and corresponding BYTEORDER in config.h) was
previously wrong in platforms if sizeof(long) was 4, but sizeof(IV)
was 8.  The byteorder was only sizeof(long) bytes long (1234 or 4321),
but now it is correctly sizeof(IV) bytes long, (12345678 or 87654321).
(This problem didn't affect Windows platforms.)

Also, $Config{byteorder} is now computed dynamically--this is more
robust with "fat binaries" where an executable image contains binaries
for more than one binary platform, and when cross-compiling.
d326 1
a326 2
C<perl -d:Module=arg,arg,arg> now works (previously one couldn't pass
in multiple arguments.)
d330 2
a331 4
C<do> followed by a bareword now ensures that this bareword isn't
a keyword (to avoid a bug where C<do q(foo.pl)> tried to call a
subroutine called C<q>).  This means that for example instead of
C<do format()> you must write C<do &format()>.
d333 2
a334 1
=item *
d336 1
a336 7
The builtin dump() now gives an optional warning
C<dump() better written as CORE::dump()>,
meaning that by default C<dump(...)> is resolved as the builtin
dump() which dumps core and aborts, not as (possibly) user-defined
C<sub dump>.  To call the latter, qualify the call as C<&dump(...)>.
(The whole dump() feature is to considered deprecated, and possibly
removed/changed in future releases.)
d340 1
a340 4
chomp() and chop() are now overridable.  Note, however, that their
prototype (as given by C<prototype("CORE::chomp")> is undefined,
because it cannot be expressed and therefore one cannot really write
replacements to override these builtins.
d342 1
a342 1
=item *
d344 1
a344 5
END blocks are now run even if you exit/die in a BEGIN block.
Internally, the execution of END blocks is now controlled by
PL_exit_flags & PERL_EXIT_DESTRUCT_END. This enables the new
behaviour for Perl embedders. This will default in 5.10. See
L<perlembed>.
d346 3
a348 1
=item *
d350 1
a350 1
Formats now support zero-padded decimal fields.
d352 7
a358 1
=item *
d360 2
a361 4
Although "you shouldn't do that", it was possible to write code that
depends on Perl's hashed key order (Data::Dumper does this).  The new
algorithm "One-at-a-Time" produces a different hashed key order.
More details are in L</"Performance Enhancements">.
d363 2
a364 1
=item *
d366 1
a366 2
lstat(FILEHANDLE) now gives a warning because the operation makes no sense.
In future releases this may become a fatal error.
d368 1
a368 1
=item *
d370 1
a370 2
Spurious syntax errors generated in certain situations, when glob()
caused File::Glob to be loaded for the first time, have been fixed. [561]
d372 1
a372 1
=item *
d374 1
a374 2
Lvalue subroutines can now return C<undef> in list context.  However,
the lvalue subroutine feature still remains experimental.  [561+]
d376 1
a376 1
=item *
d378 1
a378 2
A lost warning "Can't declare ... dereference in my" has been
restored (Perl had it earlier but it became lost in later releases.)
d380 1
a380 1
=item *
d382 1
a382 2
A new special regular expression variable has been introduced:
C<$^N>, which contains the most-recently closed group (submatch).
d384 1
a384 1
=item *
d386 1
a386 3
C<no Module;> does not produce an error even if Module does not have an
unimport() method.  This parallels the behavior of C<use> vis-a-vis
C<import>. [561]
d388 1
a388 1
=item *
d390 1
a390 2
The numerical comparison operators return C<undef> if either operand
is a NaN.  Previously the behaviour was unspecified.
d392 1
a392 1
=item *
d394 1
a394 3
C<our> can now have an experimental optional attribute C<unique> that
affects how global variables are shared among multiple interpreters,
see L<perlfunc/our>.
d396 1
a396 1
=item *
d398 1
a398 2
The following builtin functions are now overridable: each(), keys(),
pop(), push(), shift(), splice(), unshift(). [561]
d400 1
a400 1
=item *
d402 1
a402 2
C<pack() / unpack()> can now group template letters with C<()> and then
apply repetition/count modifiers on the groups.
d404 1
a404 1
=item *
d406 1
a406 3
C<pack() / unpack()> can now process the Perl internal numeric types:
IVs, UVs, NVs-- and also long doubles, if supported by the platform.
The template letters are C<j>, C<J>, C<F>, and C<D>.
d408 1
a408 1
=item *
d410 2
a411 1
C<pack('U0a*', ...)> can now be used to force a string to UTF8.
d413 1
a413 1
=item *
d415 2
a416 1
my __PACKAGE__ $obj now works. [561]
d418 1
a418 1
=item *
d420 2
a421 3
POSIX::sleep() now returns the number of I<unslept> seconds
(as the POSIX standard says), as opposed to CORE::sleep() which
returns the number of slept seconds.
d423 1
a423 1
=item *
d425 1
a425 2
The printf() and sprintf() now support parameter reordering using the
C<%\d+\$> and C<*\d+\$> syntaxes.  For example
d427 1
a427 1
    print "%2\$s %1\$s\n", "foo", "bar";
d429 1
a429 3
will print "bar foo\n".  This feature helps in writing
internationalised software, and in general when the order
of the parameters can vary.
d431 1
a431 1
=item *
d433 1
a433 1
The (\&) prototype now works properly. [561]
d435 1
a435 1
=item *
d437 2
a438 2
prototype(\[$@@%&]) is now available to implicitly create references
(useful for example if you want to emulate the tie() interface).
d440 1
a440 1
=item *
d442 1
a442 5
A new command-line option, C<-t> is available.  It is the
little brother of C<-T>: instead of dying on taint violations,
lexical warnings are given.  B<This is only meant as a temporary
debugging aid while securing the code of old legacy applications.
This is not a substitute for -T.>
d444 1
a444 1
=item *
d446 2
a447 6
In other taint news, the C<exec LIST> and C<system LIST> have now been
considered too risky (think C<exec @@ARGV>: it can start any program
with any arguments), and now the said forms cause a warning under
lexical warnings.  You should carefully launder the arguments to
guarantee their validity.  In future releases of Perl the forms will
become fatal errors so consider starting laundering now.
d449 1
a449 1
=item *
d451 1
a451 2
Tied hash interfaces are now required to have the EXISTS and DELETE
methods (either own or inherited).
d453 1
a453 1
=item *
d455 1
a455 2
If tr/// is just counting characters, it doesn't attempt to
modify its target.
d457 1
a457 1
=item *
d459 2
a460 2
untie() will now call an UNTIE() hook if it exists.  See L<perltie>
for details. [561]
d462 1
a462 1
=item *
d464 2
a465 2
L<utime> now supports C<utime undef, undef, @@files> to change the
file timestamps to the current time.
d467 1
a467 1
=item *
d469 1
a469 3
The rules for allowing underscores (underbars) in numeric constants
have been relaxed and simplified: now you can have an underscore
simply B<between digits>.
d471 1
a471 1
=item *
d473 1
a473 3
Rather than relying on C's argv[0] (which may not contain a full pathname)
where possible $^X is now set by asking the operating system.
(eg by reading F</proc/self/exe> on Linux, F</proc/curproc/file> on FreeBSD)
d475 1
a475 1
=item *
d477 1
a477 1
A new variable, C<${^TAINT}>, indicates whether taint mode is enabled.
d479 1
a479 1
=item *
d481 1
a481 2
You can now override the readline() builtin, and this overrides also
the <FILEHANDLE> angle bracket operator.
d483 1
a483 1
=item *
d485 1
a485 2
The command-line options -s and -F are now recognized on the shebang
(#!) line.
d487 1
a487 1
=item *
d489 1
a489 2
Use of the C</c> match modifier without an accompanying C</g> modifier
elicits a new warning: C<Use of /c modifier is meaningless without /g>.
d491 1
a491 2
Use of C</c> in substitutions, even with C</g>, elicits
C<Use of /c modifier is meaningless in s///>.
d493 1
a493 2
Use of C</g> with C<split> elicits C<Use of /g modifier is meaningless
in split>.
d495 1
a495 1
=item *
d497 1
a497 7
Support for the C<CLONE> special subroutine had been added.
With ithreads, when a new thread is created, all Perl data is cloned,
however non-Perl data cannot be cloned automatically.  In C<CLONE> you
can do whatever you need to do, like for example handle the cloning of
non-Perl data, if necessary.  C<CLONE> will be executed once for every
package that has it defined or inherited.  It will be called in the
context of the new thread, so all modifications are made in the new area.
d499 3
a501 1
See L<perlmod>
d503 1
a503 1
=back
d505 2
a506 1
=head1 Modules and Pragmata
d508 1
a508 1
=head2 New Modules and Pragmata
d510 1
a510 3
=over 4

=item *
d512 2
a513 2
C<Attribute::Handlers>, originally by Damian Conway and now maintained
by Arthur Bergman, allows a class to define attribute handlers.
d515 3
a517 3
    package MyPack;
    use Attribute::Handlers;
    sub Wolf :ATTR(SCALAR) { print "howl!\n" }
d519 1
a519 1
    # later, in some package using or inheriting from MyPack...
d521 1
a521 1
    my MyPack $Fluffy : Wolf; # the attribute handler Wolf will be called
d523 1
a523 4
Both variables and routines can have attribute handlers.  Handlers can
be specific to type (SCALAR, ARRAY, HASH, or CODE), or specific to the
exact compilation phase (BEGIN, CHECK, INIT, or END).
See L<Attribute::Handlers>.
d527 2
a528 3
C<B::Concise>, by Stephen McCamant, is a new compiler backend for
walking the Perl syntax tree, printing concise info about ops.
The output is highly customisable.  See L<B::Concise>. [561+]
d532 2
a533 3
The new bignum, bigint, and bigrat pragmas, by Tels, implement
transparent bignum support (using the Math::BigInt, Math::BigFloat,
and Math::BigRat backends).
d537 3
a539 2
C<Class::ISA>, by Sean Burke, is a module for reporting the search
path for a class's ISA tree.  See L<Class::ISA>.
d543 2
a544 3
C<Cwd> now has a split personality: if possible, an XS extension is
used, (this will hopefully be faster, more secure, and more robust)
but if not possible, the familiar Perl implementation is used.
d548 1
a548 4
C<Devel::PPPort>, originally by Kenneth Albanowski and now
maintained by Paul Marquess, has been added.  It is primarily used
by C<h2xs> to enhance portability of XS modules between different
versions of Perl.  See L<Devel::PPPort>.
d552 2
a553 2
C<Digest>, frontend module for calculating digests (checksums), from
Gisle Aas, has been added.  See L<Digest>.
d557 2
a558 13
C<Digest::MD5> for calculating MD5 digests (checksums) as defined in
RFC 1321, from Gisle Aas, has been added.  See L<Digest::MD5>.

    use Digest::MD5 'md5_hex';

    $digest = md5_hex("Thirsty Camel");

    print $digest, "\n"; # 01d19d9d2045e005c3f1b80e8b164de1

NOTE: the C<MD5> backward compatibility module is deliberately not
included since its further use is discouraged.

See also L<PerlIO::via::QuotedPrint>.
d562 2
a563 12
C<Encode>, originally by Nick Ing-Simmons and now maintained by Dan
Kogai, provides a mechanism to translate between different character
encodings.  Support for Unicode, ISO-8859-1, and ASCII are compiled in
to the module.  Several other encodings (like the rest of the
ISO-8859, CP*/Win*, Mac, KOI8-R, three variants EBCDIC, Chinese,
Japanese, and Korean encodings) are included and can be loaded at
runtime.  (For space considerations, the largest Chinese encodings
have been separated into their own CPAN module, Encode::HanExtra,
which Encode will use if available).  See L<Encode>.

Any encoding supported by Encode module is also available to the
":encoding()" layer if PerlIO is used.
d567 1
a567 3
C<Hash::Util> is the interface to the new I<restricted hashes>
feature.  (Implemented by Jeffrey Friedl, Nick Ing-Simmons, and
Michael Schwern.)  See L<Hash::Util>.
d571 2
a572 2
C<I18N::Langinfo> can be used to query locale information.
See L<I18N::Langinfo>.
d576 2
a577 2
C<I18N::LangTags>, by Sean Burke, has functions for dealing with
RFC3066-style language tags.  See L<I18N::LangTags>.
d581 2
a582 3
C<ExtUtils::Constant>, by Nicholas Clark, is a new tool for extension
writers for generating XS code to import C header constants.
See L<ExtUtils::Constant>.
d586 1
a586 25
C<Filter::Simple>, by Damian Conway, is an easy-to-use frontend to
Filter::Util::Call.  See L<Filter::Simple>.

    # in MyFilter.pm:

    package MyFilter;

    use Filter::Simple sub {
        while (my ($from, $to) = splice @@_, 0, 2) {
                s/$from/$to/g;
        }
    };

    1;

    # in user's code:

    use MyFilter qr/red/ => 'green';

    print "red\n";   # this code is filtered, will print "green\n"
    print "bored\n"; # this code is filtered, will print "bogreen\n"

    no MyFilter;

    print "red\n";   # this code is not filtered, will print "red\n"
d590 1
a590 3
C<File::Temp>, by Tim Jenness, allows one to create temporary files
and directories in an easy, portable, and secure way.  See L<File::Temp>.
[561+]
d594 1
a594 3
C<Filter::Util::Call>, by Paul Marquess, provides you with the
framework to write I<source filters> in Perl.  For most uses, the
frontend Filter::Simple is to be preferred.  See L<Filter::Util::Call>.
d598 1
a598 2
C<if>, by Ilya Zakharevich, is a new pragma for conditional inclusion
of modules.
d600 1
a600 1
=item *
d602 4
a605 4
L<libnet>, by Graham Barr, is a collection of perl5 modules related
to network programming.  See L<Net::FTP>, L<Net::NNTP>, L<Net::Ping>
(not part of libnet, but related), L<Net::POP3>, L<Net::SMTP>,
and L<Net::Time>.
d607 1
a607 2
Perl installation leaves libnet unconfigured; use F<libnetcfg>
to configure it.
d609 100
a708 1
=item *
d710 2
a711 3
C<List::Util>, by Graham Barr, is a selection of general-utility
list subroutines, such as sum(), min(), first(), and shuffle().
See L<List::Util>.
d713 2
a714 1
=item *
d716 1
a716 4
C<Locale::Constants>, C<Locale::Country>, C<Locale::Currency>
C<Locale::Language>, and L<Locale::Script>, by Neil Bowers, have
been added.  They provide the codes for various locale standards, such
as "fr" for France, "usd" for US Dollar, and "ja" for Japanese.
d718 2
a719 1
    use Locale::Country;
d721 2
a722 2
    $country = code2country('jp');               # $country gets 'Japan'
    $code    = country2code('Norway');           # $code gets 'no'
d724 3
a726 2
See L<Locale::Constants>, L<Locale::Country>, L<Locale::Currency>,
and L<Locale::Language>.
d728 1
a728 1
=item *
d730 1
a730 4
C<Locale::Maketext>, by Sean Burke, is a localization framework.  See
L<Locale::Maketext>, and L<Locale::Maketext::TPJ13>.  The latter is an
article about software localization, originally published in The Perl
Journal #13, and republished here with kind permission.
d732 3
a734 1
=item *
d736 4
a739 2
C<Math::BigRat> for big rational numbers, to accompany Math::BigInt and
Math::BigFloat, from Tels.  See L<Math::BigRat>.
d741 3
a743 1
=item *
d745 2
a746 2
C<Memoize> can make your functions faster by trading space for time,
from Mark-Jason Dominus.  See L<Memoize>.
d748 9
a756 1
=item *
d758 1
a758 3
C<MIME::Base64>, by Gisle Aas, allows you to encode data in base64,
as defined in RFC 2045 - I<MIME (Multipurpose Internet Mail
Extensions)>.
d760 4
a763 1
    use MIME::Base64;
d765 5
a769 2
    $encoded = encode_base64('Aladdin:open sesame');
    $decoded = decode_base64($encoded);
d771 5
a775 1
    print $encoded, "\n"; # "QWxhZGRpbjpvcGVuIHNlc2FtZQ=="
a776 1
See L<MIME::Base64>.
d778 2
a779 1
=item *
d781 2
a782 3
C<MIME::QuotedPrint>, by Gisle Aas, allows you to encode data
in quoted-printable encoding, as defined in RFC 2045 - I<MIME
(Multipurpose Internet Mail Extensions)>.
d784 1
a784 1
    use MIME::QuotedPrint;
d786 15
a800 2
    $encoded = encode_qp("Smiley in Unicode: \x{263a}");
    $decoded = decode_qp($encoded);
d802 5
a806 1
    print $encoded, "\n"; # "Smiley in Unicode: =263A"
d808 1
a808 1
See also L<PerlIO::via::QuotedPrint>.
d810 4
a813 1
=item *
d815 1
a815 2
C<NEXT>, by Damian Conway, is a pseudo-class for method redispatch.
See L<NEXT>.
d817 1
a817 1
=item *
d819 3
a821 2
C<open> is a new pragma for setting the default I/O layers
for open().
d823 1
a823 1
=item *
d825 1
a825 4
C<PerlIO::scalar>, by Nick Ing-Simmons, provides the implementation
of IO to "in memory" Perl scalars as discussed above.  It also serves
as an example of a loadable PerlIO layer.  Other future possibilities
include PerlIO::Array and PerlIO::Code.  See L<PerlIO::scalar>.
d829 1
a829 3
C<PerlIO::via>, by Nick Ing-Simmons, acts as a PerlIO layer and wraps
PerlIO layer functionality provided by a class (typically implemented
in Perl code).
d833 1
a833 8
C<PerlIO::via::QuotedPrint>, by Elizabeth Mattijsen, is an example
of a C<PerlIO::via> class:

    use PerlIO::via::QuotedPrint;
    open($fh,">:via(QuotedPrint)",$path);

This will automatically convert everything output to C<$fh> to
Quoted-Printable.  See L<PerlIO::via> and L<PerlIO::via::QuotedPrint>.
d837 1
a837 3
C<Pod::ParseLink>, by Russ Allbery, has been added,
to parse LZ<><> links in pods as described in the new
perlpodspec.
d841 1
a841 3
C<Pod::Text::Overstrike>, by Joe Smith, has been added.
It converts POD data to formatted overstrike text.
See L<Pod::Text::Overstrike>. [561+]
d845 1
a845 2
C<Scalar::Util> is a selection of general-utility scalar subroutines,
such as blessed(), reftype(), and tainted().  See L<Scalar::Util>.
d849 2
a850 1
C<sort> is a new pragma for controlling the behaviour of sort().
d854 2
a855 8
C<Storable> gives persistence to Perl data structures by allowing the
storage and retrieval of Perl data to and from files in a fast and
compact binary format.  Because in effect Storable does serialisation
of Perl data structures, with it you can also clone deep, hierarchical
datastructures.  Storable was originally created by Raphael Manfredi,
but it is now maintained by Abhijit Menon-Sen.  Storable has been
enhanced to understand the two new hash features, Unicode keys and
restricted hashes.  See L<Storable>.
d859 1
a859 1
C<Switch>, by Damian Conway, has been added.  Just by saying
d861 1
a861 1
    use Switch;
d863 2
a864 1
you have C<switch> and C<case> available in Perl.
d866 2
a867 1
    use Switch;
d869 4
a872 1
    switch ($val) {
d874 7
a880 11
		case 1		{ print "number 1" }
		case "a"	{ print "string a" }
		case [1..10,42]	{ print "number in list" }
		case (@@array)	{ print "number in list" }
		case /\w+/	{ print "pattern" }
		case qr/\w+/	{ print "pattern" }
		case (%hash)	{ print "entry in hash" }
		case (\%hash)	{ print "entry in hash" }
		case (\&sub)	{ print "arg to subroutine" }
		else		{ print "previous case not true" }
    }
d882 6
a887 1
See L<Switch>.
d889 2
a890 1
=item *
d892 6
a897 2
C<Test::More>, by Michael Schwern, is yet another framework for writing
test scripts, more extensive than Test::Simple.  See L<Test::More>.
d899 4
a902 1
=item *
d904 1
a904 2
C<Test::Simple>, by Michael Schwern, has basic utilities for writing
tests.   See L<Test::Simple>.
d906 3
a908 1
=item *
d910 2
a911 2
C<Text::Balanced>, by Damian Conway, has been added, for extracting
delimited text sequences from strings.
d913 3
a915 1
    use Text::Balanced 'extract_delimited';
d917 2
a918 1
    ($a, $b) = extract_delimited("'never say never', he never said", "'", '');
d920 5
a924 1
$a will be "'never say never'", $b will be ', he never said'.
d926 3
a928 5
In addition to extract_delimited(), there are also extract_bracketed(),
extract_quotelike(), extract_codeblock(), extract_variable(),
extract_tagged(), extract_multiple(), gen_delimited_pat(), and
gen_extract_tagged().  With these, you can implement rather advanced
parsing algorithms.  See L<Text::Balanced>.
d930 7
a936 1
=item *
d938 1
a938 5
C<threads>, by Arthur Bergman, is an interface to interpreter threads.
Interpreter threads (ithreads) is the new thread model introduced in
Perl 5.6 but only available as an internal interface for extension
writers (and for Win32 Perl for C<fork()> emulation).  See L<threads>,
L<threads::shared>, and L<perlthrtut>.
d940 4
a943 1
=item *
d945 1
a945 2
C<threads::shared>, by Arthur Bergman, allows data sharing for
interpreter threads.  See L<threads::shared>.
d947 2
a948 1
=item *
d950 1
a950 2
C<Tie::File>, by Mark-Jason Dominus, associates a Perl array with the
lines of a file.  See L<Tie::File>.
d952 3
a954 1
=item *
d956 3
a958 2
C<Tie::Memoize>, by Ilya Zakharevich, provides on-demand loaded hashes.
See L<Tie::Memoize>.
d960 1
a960 1
=item *
d962 2
a963 3
C<Tie::RefHash::Nestable>, by Edward Avis, allows storing hash
references (unlike the standard Tie::RefHash)  The module is contained
within Tie::RefHash.  See L<Tie::RefHash>.
d965 1
a965 1
=item *
d967 3
a969 2
C<Time::HiRes>, by Douglas E. Wegscheid, provides high resolution
timing (ualarm, usleep, and gettimeofday).  See L<Time::HiRes>.
d971 2
a972 1
=item *
d974 1
a974 2
C<Unicode::UCD> offers a querying interface to the Unicode Character
Database.  See L<Unicode::UCD>.
d976 5
a980 1
=item *
d982 1
a982 3
C<Unicode::Collate>, by SADAHIRO Tomoyuki, implements the UCA
(Unicode Collation Algorithm) for sorting Unicode strings.
See L<Unicode::Collate>.
d984 2
a985 1
=item *
d987 1
a987 2
C<Unicode::Normalize>, by SADAHIRO Tomoyuki, implements the various
Unicode normalization forms.  See L<Unicode::Normalize>.
d989 3
a991 1
=item *
d993 1
a993 3
C<XS::APItest>, by Tim Jenness, is a test extension that exercises XS
APIs.  Currently only C<printf()> is tested: how to output various
basic data types from XS.
d995 1
a995 1
=item *
d997 4
a1000 3
C<XS::Typemap>, by Tim Jenness, is a test extension that exercises
XS typemaps.  Nothing gets installed, but the code is worth studying
for extension writers.
d1002 1
a1002 1
=back
d1004 1
a1004 1
=head2 Updated And Improved Modules and Pragmata
d1006 1
a1006 1
=over 4
d1008 1
a1008 1
=item *
d1010 4
a1013 5
The following independently supported modules have been updated to the
newest versions from CPAN: CGI, CPAN, DB_File, File::Spec, File::Temp,
Getopt::Long, Math::BigFloat, Math::BigInt, the podlators bundle
(Pod::Man, Pod::Text), Pod::LaTeX [561+], Pod::Parser, Storable,
Term::ANSIColor, Test, Text-Tabs+Wrap.
d1015 1
a1015 1
=item *
d1017 2
a1018 1
attributes::reftype() now works on tied arguments.
d1020 1
a1020 1
=item *
d1022 2
a1023 1
AutoLoader can now be disabled with C<no AutoLoader;>.
d1025 1
a1025 1
=item *
d1027 2
a1028 4
B::Deparse has been significantly enhanced by Robin Houston.  It can
now deparse almost all of the standard test suite (so that the tests
still succeed).  There is a make target "test.deparse" for trying this
out.
d1030 1
a1030 1
=item *
d1032 3
a1034 3
Carp now has better interface documentation, and the @@CARP_NOT
interface has been added to get optional control over where errors
are reported independently of @@ISA, by Ben Tilly.
d1036 1
a1036 1
=item *
d1038 5
a1042 1
Class::Struct can now define the classes in compile time.
d1044 4
a1047 1
=item *
d1049 5
a1053 2
Class::Struct now assigns the array/hash element if the accessor
is called with an array/hash element as the B<sole> argument.
d1055 2
a1056 1
=item *
d1058 1
a1058 1
The return value of Cwd::fastcwd() is now tainted.
d1060 1
a1060 1
=item *
d1062 2
a1063 1
Data::Dumper now has an option to sort hashes.
d1065 2
a1066 1
=item *
d1068 1
a1068 2
Data::Dumper now has an option to dump code references
using B::Deparse.
d1070 2
a1071 1
=item *
d1073 1
a1073 2
DB_File now supports newer Berkeley DB versions, among
other improvements.
d1075 1
a1075 1
=item *
d1077 6
a1082 3
Devel::Peek now has an interface for the Perl memory statistics
(this works only if you are using perl's malloc, and if you have
compiled with debugging).
d1084 1
a1084 1
=item *
d1086 1
a1086 2
The English module can now be used without the infamous performance
hit by saying
d1088 1
a1088 1
	use English '-no_match_vars';
d1090 3
a1092 3
(Assuming, of course, that you don't need the troublesome variables
C<$`>, C<$&>, or C<$'>.)  Also, introduced C<@@LAST_MATCH_START> and
C<@@LAST_MATCH_END> English aliases for C<@@-> and C<@@+>.
d1094 1
a1094 1
=item *
d1096 2
a1097 4
ExtUtils::MakeMaker has been significantly cleaned up and fixed.
The enhanced version has also been backported to earlier releases
of Perl and submitted to CPAN so that the earlier releases can
enjoy the fixes.
d1099 4
a1102 1
=item *
d1104 7
a1110 4
The arguments of WriteMakefile() in Makefile.PL are now checked
for sanity much more carefully than before.  This may cause new
warnings when modules are being installed.  See L<ExtUtils::MakeMaker>
for more details.
d1112 1
a1112 1
=item *
d1114 1
a1114 2
ExtUtils::MakeMaker now uses File::Spec internally, which hopefully
leads to better portability.
d1116 3
a1118 1
=item *
d1120 2
a1121 3
Fcntl, Socket, and Sys::Syslog have been rewritten by Nicholas Clark
to use the new-style constant dispatch section (see L<ExtUtils::Constant>).
This means that they will be more robust and hopefully faster.
d1123 3
a1125 1
=item *
d1127 2
a1128 1
File::Find now chdir()s correctly when chasing symbolic links. [561]
d1130 1
a1130 1
=item *
d1132 2
a1133 3
File::Find now has pre- and post-processing callbacks.  It also
correctly changes directories when chasing symbolic links.  Callbacks
(naughtily) exiting with "next;" instead of "return;" now work.
d1135 3
a1137 1
=item *
d1139 1
a1139 2
File::Find is now (again) reentrant.  It also has been made
more portable.
d1141 4
a1144 1
=item *
d1146 2
a1147 2
The warnings issued by File::Find now belong to their own category.
You can enable/disable them with C<use/no warnings 'File::Find';>.
d1149 1
a1149 1
=item *
d1151 4
a1154 3
File::Glob::glob() has been renamed to File::Glob::bsd_glob()
because the name clashes with the builtin glob().  The older
name is still available for compatibility, but is deprecated. [561]
d1156 1
a1156 1
=item *
d1158 6
a1163 2
File::Glob now supports C<GLOB_LIMIT> constant to limit the size of
the returned list of filenames.
d1165 1
a1165 1
=item *
d1167 3
a1169 1
IPC::Open3 now allows the use of numeric file descriptors.
d1171 1
a1171 1
=item *
d1173 4
a1176 3
IO::Socket now has an atmark() method, which returns true if the socket
is positioned at the out-of-band mark.  The method is also exportable
as a sockatmark() function.
d1178 1
a1178 1
=item *
d1180 2
a1181 2
IO::Socket::INET failed to open the specified port if the service name
was not known.  It now correctly uses the supplied port number as is. [561]
d1183 1
a1183 1
=item *
d1185 4
a1188 3
IO::Socket::INET has support for the ReusePort option (if your
platform supports it).  The Reuse option now has an alias, ReuseAddr.
For clarity, you may want to prefer ReuseAddr.
d1190 3
a1192 1
=item *
d1194 1
a1194 2
IO::Socket::INET now supports a value of zero for C<LocalPort>
(usually meaning that the operating system will make one up.)
d1196 2
a1197 1
=item *
d1199 2
a1200 2
'use lib' now works identically to @@INC.  Removing directories
with 'no lib' now works.
d1202 2
a1203 1
=item *
d1205 2
a1206 3
Math::BigFloat and Math::BigInt have undergone a full rewrite by Tels.
They are now magnitudes faster, and they support various bignum
libraries such as GMP and PARI as their backends.
d1208 3
a1210 1
=item *
d1212 2
a1213 1
Math::Complex handles inf, NaN etc., better.
d1215 2
a1216 1
=item *
d1218 4
a1221 7
Net::Ping has been considerably enhanced by Rob Brown: multihoming is
now supported, Win32 functionality is better, there is now time
measuring functionality (optionally high-resolution using
Time::HiRes), and there is now "external" protocol which uses
Net::Ping::External module which runs your external ping utility and
parses the output.  A version of Net::Ping::External is available in
CPAN.
d1223 1
a1223 6
Note that some of the Net::Ping tests are disabled when running
under the Perl distribution since one cannot assume one or more
of the following: enabled echo port at localhost, full Internet
connectivity, or sympathetic firewalls.  You can set the environment
variable PERL_TEST_Net_Ping to "1" (one) before running the Perl test
suite to enable all the Net::Ping tests.
d1225 1
a1225 1
=item *
d1227 3
a1229 3
POSIX::sigaction() is now much more flexible and robust.
You can now install coderef handlers, 'DEFAULT', and 'IGNORE'
handlers, installing new handlers was not atomic.
d1231 1
a1231 1
=item *
d1233 7
a1239 2
In Safe, C<%INC> is now localised in a Safe compartment so that
use/require work.
d1241 1
a1241 1
=item *
d1243 1
a1243 3
In SDBM_File on dosish platforms, some keys went missing because of
lack of support for files with "holes".  A workaround for the problem
has been added.
d1245 1
a1245 1
=item *
d1247 1
a1247 2
In Search::Dict one can now have a pre-processing hook for the
lines being searched.
d1249 3
a1251 1
=item *
d1253 3
a1255 1
The Shell module now has an OO interface.
d1257 4
a1260 1
=item *
d1262 3
a1264 3
In Sys::Syslog there is now a failover mechanism that will go
through alternative connection mechanisms until the message
is successfully logged.
d1266 1
a1266 1
=item *
d1268 1
a1268 1
The Test module has been significantly enhanced.
d1270 7
a1276 1
=item *
d1278 1
a1278 3
Time::Local::timelocal() does not handle fractional seconds anymore.
The rationale is that neither does localtime(), and timelocal() and
localtime() are supposed to be inverses of each other.
d1280 2
a1281 1
=item *
d1283 3
a1285 2
The vars pragma now supports declaring fully qualified variables.
(Something that C<our()> does not and will not support.)
d1287 4
a1290 1
=item *
d1292 1
a1292 4
The C<utf8::> name space (as in the pragma) provides various
Perl-callable functions to provide low level access to Perl's
internal Unicode representation.  At the moment only length()
has been implemented.
d1294 3
a1296 1
=back
d1298 3
a1300 1
=head1 Utility Changes
d1302 1
a1302 1
=over 4
d1304 6
a1309 1
=item *
d1311 1
a1311 2
Emacs perl mode (emacs/cperl-mode.el) has been updated to version
4.31.
d1313 6
a1318 1
=item *
d1320 5
a1324 1
F<emacs/e2ctags.pl> is now much faster.
d1326 6
a1331 1
=item *
d1333 1
a1333 2
C<enc2xs> is a tool for people adding their own encodings to the
Encode module.
d1335 5
a1339 1
=item *
d1341 1
a1341 1
C<h2ph> now supports C trigraphs.
d1343 3
a1345 1
=item *
d1347 2
a1348 1
C<h2xs> now produces a template README.
d1350 1
a1350 1
=item *
d1352 3
a1354 2
C<h2xs> now uses C<Devel::PPPort> for better portability between
different versions of Perl.
d1356 2
a1357 1
=item *
d1359 1
a1359 9
C<h2xs> uses the new L<ExtUtils::Constant|ExtUtils::Constant> module
which will affect newly created extensions that define constants.
Since the new code is more correct (if you have two constants where the
first one is a prefix of the second one, the first constant B<never>
got defined), less lossy (it uses integers for integer constant,
as opposed to the old code that used floating point numbers even for
integer constants), and slightly faster, you might want to consider
regenerating your extension code (the new scheme makes regenerating
easy).  L<h2xs> now also supports C trigraphs.
d1361 5
a1365 1
=item *
d1367 1
a1367 1
C<libnetcfg> has been added to configure libnet.
d1369 1
a1369 1
=item *
d1371 1
a1371 2
C<perlbug> is now much more robust.  It also sends the bug report to
perl.org, not perl.com.
d1373 4
a1376 1
=item *
d1378 4
a1381 5
C<perlcc> has been rewritten and its user interface (that is,
command line) is much more like that of the UNIX C compiler, cc.
(The perlbc tools has been removed.  Use C<perlcc -B> instead.)
B<Note that perlcc is still considered very experimental and
unsupported.> [561]
d1383 1
a1383 1
=item *
d1385 4
a1388 2
C<perlivp> is a new Installation Verification Procedure utility
for running any time after installing Perl.
d1390 1
a1390 1
=item *
d1392 1
a1392 2
C<piconv> is an implementation of the character conversion utility
C<iconv>, demonstrating the new Encode module.
d1394 1
a1394 1
=item *
d1396 1
a1396 1
C<pod2html> now allows specifying a cache directory.
d1398 3
a1400 1
=item *
d1402 1
a1402 1
C<pod2html> now produces XHTML 1.0.
d1404 4
a1407 1
=item *
d1409 3
a1411 2
C<pod2html> now understands POD written using different line endings
(PC-like CRLF versus UNIX-like LF versus MacClassic-like CR).
d1413 1
a1413 1
=item *
d1415 2
a1416 3
C<s2p> has been completely rewritten in Perl.  (It is in fact a full
implementation of sed in Perl: you can use the sed functionality by
using the C<psed> utility.)
d1418 5
a1422 1
=item *
d1424 1
a1424 2
C<xsubpp> now understands POD documentation embedded in the *.xs
files. [561]
d1426 1
a1426 1
=item *
d1428 3
a1430 1
C<xsubpp> now supports the OUT keyword.
d1432 2
a1433 1
=back
d1435 2
a1436 1
=head1 New Documentation
d1438 2
a1439 1
=over 4
d1441 2
a1442 1
=item *
d1444 2
a1445 2
perl56delta details the changes between the 5.005 release and the
5.6.0 release.
d1447 3
a1449 1
=item *
d1451 1
a1451 3
perlclib documents the internal replacements for standard C library
functions.  (Interesting only for extension writers and Perl core
hackers.) [561+]
d1453 1
a1453 1
=item *
d1455 2
a1456 1
perldebtut is a Perl debugging tutorial. [561+]
d1458 1
a1458 1
=item *
d1460 1
a1460 2
perlebcdic contains considerations for running Perl on EBCDIC
platforms. [561+]
d1462 7
a1468 1
=item *
d1470 1
a1470 1
perlintro is a gentle introduction to Perl.
d1472 1
a1472 1
=item *
d1474 1
a1474 1
perliol documents the internals of PerlIO with layers.
d1476 1
a1476 1
=item *
d1478 2
a1479 1
perlmodstyle is a style guide for writing modules.
d1481 2
a1482 1
=item *
d1484 1
a1484 1
perlnewmod tells about writing and submitting a new module. [561+]
d1486 1
a1486 1
=item *
d1488 2
a1489 1
perlpacktut is a pack() tutorial.
d1491 1
a1491 1
=item *
d1493 2
a1494 2
perlpod has been rewritten to be clearer and to record the best
practices gathered over the years.
d1496 1
a1496 1
=item *
d1498 2
a1499 3
perlpodspec is a more formal specification of the pod format,
mainly of interest for writers of pod applications, not to
people writing in pod.
d1501 1
a1501 1
=item *
d1503 2
a1504 1
perlretut is a regular expression tutorial. [561+]
d1506 1
a1506 1
=item *
d1508 1
a1508 2
perlrequick is a regular expressions quick-start guide.
Yes, much quicker than perlretut. [561]
d1510 1
a1510 1
=item *
d1512 2
a1513 1
perltodo has been updated.
d1515 4
a1518 1
=item *
d1520 1
a1520 2
perltootc has been renamed as perltooc (to not to conflict
with perltoot in filesystems restricted to "8.3" names).
d1522 2
a1523 1
=item *
d1525 1
a1525 3
perluniintro is an introduction to using Unicode in Perl.
(perlunicode is more of a detailed reference and background
information)
d1527 2
a1528 1
=item *
d1530 1
a1530 2
perlutil explains the command line utilities packaged with the Perl
distribution. [561+]
d1532 9
a1540 1
=back
d1542 1
a1542 19
The following platform-specific documents are available before
the installation as README.I<platform>, and after the installation
as perlI<platform>:

    perlaix perlamiga perlapollo perlbeos perlbs2000
    perlce perlcygwin perldgux perldos perlepoc perlfreebsd perlhpux
    perlhurd perlirix perlmachten perlmacos perlmint perlmpeix
    perlnetware perlos2 perlos390 perlplan9 perlqnx perlsolaris
    perltru64 perluts perlvmesa perlvms perlvos perlwin32

These documents usually detail one or more of the following subjects:
configuring, building, testing, installing, and sometimes also using
Perl on the said platform.

Eastern Asian Perl users are now welcomed in their own languages:
README.jp (Japanese), README.ko (Korean), README.cn (simplified
Chinese) and README.tw (traditional Chinese), which are written in
normal pod but encoded in EUC-JP, EUC-KR, EUC-CN and Big5.  These
will get installed as
d1544 2
a1545 1
   perljp perlko perlcn perltw
d1547 1
a1547 1
=over 4
d1549 2
a1550 1
=item *
d1552 2
a1553 2
The documentation for the POSIX-BC platform is called "BS2000", to avoid
confusion with the Perl POSIX module.
d1555 5
a1559 1
=item *
d1561 1
a1561 3
The documentation for the WinCE platform is called perlce (README.ce
in the source code kit), to avoid confusion with the perlwin32
documentation on 8.3-restricted filesystems.
d1563 1
a1563 1
=back
d1565 3
a1567 1
=head1 Performance Enhancements
d1569 1
a1569 1
=over 4
d1571 7
a1577 1
=item *
d1579 1
a1579 3
map() could get pathologically slow when the result list it generates
is larger than the source list.  The performance has been improved for
common scenarios. [561]
d1581 2
a1582 1
=item *
d1584 1
a1584 3
sort() is also fully reentrant, in the sense that the sort function
can itself call sort().  This did not work reliably in previous
releases. [561]
d1586 1
a1586 1
=item *
d1588 1
a1588 87
sort() has been changed to use primarily mergesort internally as
opposed to the earlier quicksort.  For very small lists this may
result in slightly slower sorting times, but in general the speedup
should be at least 20%.  Additional bonuses are that the worst case
behaviour of sort() is now better (in computer science terms it now
runs in time O(N log N), as opposed to quicksort's Theta(N**2)
worst-case run time behaviour), and that sort() is now stable
(meaning that elements with identical keys will stay ordered as they
were before the sort).  See the C<sort> pragma for information.

The story in more detail: suppose you want to serve yourself a little
slice of Pi.

    @@digits = ( 3,1,4,1,5,9 );

A numerical sort of the digits will yield (1,1,3,4,5,9), as expected.
Which C<1> comes first is hard to know, since one C<1> looks pretty
much like any other.  You can regard this as totally trivial,
or somewhat profound.  However, if you just want to sort the even
digits ahead of the odd ones, then what will

    sort { ($a % 2) <=> ($b % 2) } @@digits;

yield?  The only even digit, C<4>, will come first.  But how about
the odd numbers, which all compare equal?  With the quicksort algorithm
used to implement Perl 5.6 and earlier, the order of ties is left up
to the sort.  So, as you add more and more digits of Pi, the order
in which the sorted even and odd digits appear will change.
and, for sufficiently large slices of Pi, the quicksort algorithm
in Perl 5.8 won't return the same results even if reinvoked with the
same input.  The justification for this rests with quicksort's
worst case behavior.  If you run

   sort { $a <=> $b } ( 1 .. $N , 1 .. $N );

(something you might approximate if you wanted to merge two sorted
arrays using sort), doubling $N doesn't just double the quicksort time,
it I<quadruples> it.  Quicksort has a worst case run time that can
grow like N**2, so-called I<quadratic> behaviour, and it can happen
on patterns that may well arise in normal use.  You won't notice this
for small arrays, but you I<will> notice it with larger arrays,
and you may not live long enough for the sort to complete on arrays
of a million elements.  So the 5.8 quicksort scrambles large arrays
before sorting them, as a statistical defence against quadratic behaviour.
But that means if you sort the same large array twice, ties may be
broken in different ways.

Because of the unpredictability of tie-breaking order, and the quadratic
worst-case behaviour, quicksort was I<almost> replaced completely with
a stable mergesort.  I<Stable> means that ties are broken to preserve
the original order of appearance in the input array.  So

    sort { ($a % 2) <=> ($b % 2) } (3,1,4,1,5,9);

will yield (4,3,1,1,5,9), guaranteed.  The even and odd numbers
appear in the output in the same order they appeared in the input.
Mergesort has worst case O(N log N) behaviour, the best value
attainable.  And, ironically, this mergesort does particularly
well where quicksort goes quadratic:  mergesort sorts (1..$N, 1..$N)
in O(N) time.  But quicksort was rescued at the last moment because
it is faster than mergesort on certain inputs and platforms.
For example, if you really I<don't> care about the order of even
and odd digits, quicksort will run in O(N) time; it's very good
at sorting many repetitions of a small number of distinct elements.
The quicksort divide and conquer strategy works well on platforms
with relatively small, very fast, caches.  Eventually, the problem gets
whittled down to one that fits in the cache, from which point it
benefits from the increased memory speed.

Quicksort was rescued by implementing a sort pragma to control aspects
of the sort.  The B<stable> subpragma forces stable behaviour,
regardless of algorithm.  The B<_quicksort> and B<_mergesort>
subpragmas are heavy-handed ways to select the underlying implementation.
The leading C<_> is a reminder that these subpragmas may not survive
beyond 5.8.  More appropriate mechanisms for selecting the implementation
exist, but they wouldn't have arrived in time to save quicksort.

=item *

Hashes now use Bob Jenkins "One-at-a-Time" hashing key algorithm
( http://burtleburtle.net/bob/hash/doobs.html ).  This algorithm is
reasonably fast while producing a much better spread of values than
the old hashing algorithm (originally by Chris Torek, later tweaked by
Ilya Zakharevich).  Hash values output from the algorithm on a hash of
all 3-char printable ASCII keys comes much closer to passing the
DIEHARD random number generation tests.  According to perlbench, this
change has not affected the overall speed of Perl.
d1590 1
a1590 1
=item *
d1592 3
a1594 1
unshift() should now be noticeably faster.
d1596 2
a1597 1
=back
d1599 7
a1605 1
=head1 Installation and Configuration Improvements
d1607 1
a1607 1
=head2 Generic Improvements
d1609 1
a1609 1
=over 4
d1611 1
a1611 1
=item *
d1613 1
a1613 2
INSTALL now explains how you can configure Perl to use 64-bit
integers even on non-64-bit platforms.
d1615 1
a1615 1
=item *
d1617 3
a1619 6
Policy.sh policy change: if you are reusing a Policy.sh file
(see INSTALL) and you use Configure -Dprefix=/foo/bar and in the old
Policy $prefix eq $siteprefix and $prefix eq $vendorprefix, all of
them will now be changed to the new prefix, /foo/bar.  (Previously
only $prefix changed.)  If you do not like this new behaviour,
specify prefix, siteprefix, and vendorprefix explicitly.
d1621 1
a1621 1
=item *
d1623 1
a1623 3
A new optional location for Perl libraries, otherlibdirs, is available.
It can be used for example for vendor add-ons without disturbing Perl's
own library directories.
d1625 1
a1625 1
=item *
d1627 1
a1627 4
In many platforms, the vendor-supplied 'cc' is too stripped-down to
build Perl (basically, 'cc' doesn't do ANSI C).  If this seems
to be the case and 'cc' does not seem to be the GNU C compiler
'gcc', an automatic attempt is made to find and use 'gcc' instead.
d1629 1
a1629 1
=item *
d1631 1
a1631 4
gcc needs to closely track the operating system release to avoid
build problems. If Configure finds that gcc was built for a different
operating system release than is running, it now gives a clearly visible
warning that there may be trouble ahead.
d1633 1
a1633 1
=item *
d1635 1
a1635 3
Since Perl 5.8 is not binary-compatible with previous releases
of Perl, Configure no longer suggests including the 5.005
modules in @@INC.
d1637 2
a1638 1
=item *
d1640 1
a1640 1
Configure C<-S> can now run non-interactively. [561]
d1642 1
a1642 1
=item *
d1644 2
a1645 2
Configure support for pdp11-style memory models has been removed due
to obsolescence. [561]
d1647 2
a1648 1
=item *
d1650 1
a1650 1
configure.gnu now works with options with whitespace in them.
d1652 2
a1653 1
=item *
d1655 3
a1657 1
installperl now outputs everything to STDERR.
d1659 2
a1660 1
=item *
d1662 2
a1663 4
Because PerlIO is now the default on most platforms, "-perlio" doesn't
get appended to the $Config{archname} (also known as $^O) anymore.
Instead, if you explicitly choose not to use perlio (Configure command
line option -Uuseperlio), you will get "-stdio" appended.
d1665 2
a1666 1
=item *
d1668 2
a1669 3
Another change related to the architecture name is that "-64all"
(-Duse64bitall, or "maximally 64-bit") is appended only if your
pointers are 64 bits wide.  (To be exact, the use64bitall is ignored.)
d1671 1
a1671 1
=item *
d1673 2
a1674 3
In AFS installations, one can configure the root of the AFS to be
somewhere else than the default F</afs> by using the Configure
parameter C<-Dafsroot=/some/where/else>.
d1676 1
a1676 1
=item *
d1678 2
a1679 3
APPLLIB_EXP, a lesser-known configuration-time definition, has been
documented.  It can be used to prepend site-specific directories
to Perl's default search path (@@INC); see INSTALL for information.
d1681 1
a1681 1
=item *
d1683 111
a1793 5
The version of Berkeley DB used when the Perl (and, presumably, the
DB_File extension) was built is now available as
C<@@Config{qw(db_version_major db_version_minor db_version_patch)}>
from Perl and as C<DB_VERSION_MAJOR_CFG DB_VERSION_MINOR_CFG
DB_VERSION_PATCH_CFG> from C.
d1795 3
a1797 1
=item *
d1799 1
a1799 2
Building Berkeley DB3 for compatibility modes for DB, NDBM, and ODBM
has been documented in INSTALL.
d1801 2
a1802 1
=item *
d1804 1
a1804 4
If you have CPAN access (either network or a local copy such as a
CD-ROM) you can during specify extra modules to Configure to build and
install with Perl using the -Dextras=...  option.  See INSTALL for
more details.
d1806 2
a1807 1
=item *
d1809 1
a1809 4
In addition to config.over, a new override file, config.arch, is
available.  This file is supposed to be used by hints file writers
for architecture-wide changes (as opposed to config.over which is
for site-wide changes).
d1811 3
a1813 1
=item *
d1815 1
a1815 2
If your file system supports symbolic links, you can build Perl outside
of the source directory by
d1817 3
a1819 3
	mkdir /tmp/perl/build/directory
	cd /tmp/perl/build/directory
	sh /path/to/perl/source/Configure -Dmksymlinks ...
d1821 1
a1821 3
This will create in /tmp/perl/build/directory a tree of symbolic links
pointing to files in /path/to/perl/source.  The original files are left
unaffected.  After Configure has finished, you can just say
d1823 5
a1827 1
	make all test
d1829 2
a1830 2
and Perl will be built and tested, all in /tmp/perl/build/directory.
[561]
d1832 2
a1833 1
=item *
d1835 2
a1836 2
For Perl developers, several new make targets for profiling
and debugging have been added; see L<perlhack>.
d1838 4
a1841 1
=over 8
d1843 1
a1843 1
=item *
d1845 2
a1846 3
Use of the F<gprof> tool to profile Perl has been documented in
L<perlhack>.  There is a make target called "perl.gprof" for
generating a gprofiled Perl executable.
d1848 1
a1848 1
=item *
d1850 3
a1852 3
If you have GCC 3, there is a make target called "perl.gcov" for
creating a gcoved Perl executable for coverage analysis.  See
L<perlhack>.
d1854 4
a1857 1
=item *
d1859 3
a1861 3
If you are on IRIX or Tru64 platforms, new profiling/debugging options
have been added; see L<perlhack> for more information about pixie and
Third Degree.
d1865 1
a1865 1
=item *
d1867 3
a1869 2
Guidelines of how to construct minimal Perl installations have
been added to INSTALL.
d1871 2
a1872 1
=item *
d1874 6
a1879 3
The Thread extension is now not built at all under ithreads
(C<Configure -Duseithreads>) because it wouldn't work anyway (the
Thread extension requires being Configured with C<-Duse5005threads>).
d1881 5
a1885 3
B<Note that the 5.005 threads are unsupported and deprecated: if you
have code written for the old threads you should migrate it to the
new ithreads model.>
d1887 1
a1887 1
=item *
d1889 1
a1889 4
The Gconvert macro ($Config{d_Gconvert}) used by perl for stringifying
floating-point numbers is now more picky about using sprintf %.*g
rules for the conversion.  Some platforms that used to use gcvt may
now resort to the slower sprintf.
d1891 2
a1892 1
=item *
d1894 1
a1894 2
The obsolete method of making a special (e.g., debugging) flavor
of perl by saying
d1896 3
a1898 1
	make LIBPERL=libperld.a
d1900 1
a1900 1
has been removed. Use -DDEBUGGING instead.
d1902 3
a1904 1
=back
d1906 1
a1906 1
=head2 New Or Improved Platforms
d1908 3
a1910 2
For the list of platforms known to support Perl,
see L<perlport/"Supported Platforms">.
d1912 1
a1912 1
=over 4
d1914 1
a1914 1
=item *
d1916 4
a1919 1
AIX dynamic loading should be now better supported.
d1921 1
a1921 1
=item *
d1923 10
a1932 2
AIX should now work better with gcc, threads, and 64-bitness.  Also the
long doubles support in AIX should be better now.  See L<perlaix>.
d1934 1
a1934 1
=item *
d1936 2
a1937 1
AtheOS ( http://www.atheos.cx/ ) is a new platform.
d1939 1
a1939 1
=item *
d1941 1
a1941 1
BeOS has been reclaimed.
d1943 1
a1943 1
=item *
d1945 1
a1945 2
The DG/UX platform now supports 5.005-style threads.
See L<perldgux>.
d1947 1
a1947 1
=item *
d1949 1
a1949 2
The DYNIX/ptx platform (also known as dynixptx) is supported at or
near osvers 4.5.2.
d1951 1
a1951 1
=item *
d1953 1
a1953 5
EBCDIC platforms (z/OS (also known as OS/390), POSIX-BC, and VM/ESA)
have been regained.  Many test suite tests still fail and the
co-existence of Unicode and EBCDIC isn't quite settled, but the
situation is much better than with Perl 5.6.  See L<perlos390>,
L<perlbs2000> (for POSIX-BC), and L<perlvmesa> for more information.
d1955 1
a1955 1
=item *
d1957 1
a1957 3
Building perl with -Duseithreads or -Duse5005threads now works under
HP-UX 10.20 (previously it only worked under 10.30 or later). You will
need a thread library package installed. See README.hpux. [561]
d1959 4
a1962 1
=item *
d1964 1
a1964 4
Mac OS Classic is now supported in the mainstream source package
(MacPerl has of course been available since perl 5.004 but now the
source code bases of standard Perl and MacPerl have been synchronised)
[561]
d1966 5
a1970 1
=item *
d1972 1
a1972 3
Mac OS X (or Darwin) should now be able to build Perl even on HFS+
filesystems.  (The case-insensitivity used to confuse the Perl build
process.)
d1974 1
a1974 1
=item *
d1976 1
a1976 1
NCR MP-RAS is now supported. [561]
d1978 1
a1978 4
=item *

All the NetBSD specific patches (except for the installation
specific ones) have been merged back to the main distribution.
d1980 1
a1980 1
=item *
d1982 1
a1982 1
NetWare from Novell is now supported.  See L<perlnetware>.
d1984 1
a1984 1
=item *
d1986 2
a1987 1
NonStop-UX is now supported. [561]
d1989 1
a1989 1
=item *
d1991 2
a1992 1
NEC SUPER-UX is now supported.
d1994 1
a1994 1
=item *
d1996 1
a1996 2
All the OpenBSD specific patches (except for the installation
specific ones) have been merged back to the main distribution.
d1998 1
a1998 1
=item *
d2000 1
a2000 6
Perl has been tested with the GNU pth userlevel thread package
( http://www.gnu.org/software/pth/pth.html ).  All thread tests
of Perl now work, but not without adding some yield()s to the tests,
so while pth (and other userlevel thread implementations) can be
considered to be "working" with Perl ithreads, keep in mind the
possible non-preemptability of the underlying thread implementation.
d2002 1
a2002 1
=item *
d2004 1
a2004 4
Stratus VOS is now supported using Perl's native build method
(Configure).  This is the recommended method to build Perl on
VOS.  The older methods, which build miniperl, are still
available.  See L<perlvos>. [561+]
d2006 1
a2006 1
=item *
d2008 1
a2008 1
The Amdahl UTS UNIX mainframe platform is now supported. [561]
d2010 1
a2010 1
=item *
d2012 2
a2013 1
WinCE is now supported.  See L<perlce>.
d2015 1
a2015 1
=item *
d2017 1
a2017 3
z/OS (formerly known as OS/390, formerly known as MVS OE) now has
support for dynamic loading.  This is not selected by default,
however, you must specify -Dusedl in the arguments of Configure. [561]
d2021 3
a2023 1
=head1 Selected Bug Fixes
d2025 2
a2026 3
Numerous memory leaks and uninitialized memory accesses have been
hunted down.  Most importantly, anonymous subs used to leak quite
a bit. [561]
d2028 1
a2028 1
=over 4
d2030 3
a2032 1
=item *
d2034 1
a2034 1
The autouse pragma didn't work for Multi::Part::Function::Names.
d2036 2
a2037 1
=item *
d2039 1
a2039 4
caller() could cause core dumps in certain situations.  Carp was
sometimes affected by this problem.  In particular, caller() now
returns a subroutine name of C<(unknown)> for subroutines that have
been removed from the symbol table.
d2041 4
a2044 1
=item *
d2046 1
a2046 2
chop(@@list) in list context returned the characters chopped in
reverse order.  This has been reversed to be in the right order. [561]
d2048 1
a2048 1
=item *
d2050 3
a2052 3
Configure no longer includes the DBM libraries (dbm, gdbm, db, ndbm)
when building the Perl binary.  The only exception to this is SunOS 4.x,
which needs them. [561]
d2054 4
a2057 1
=item *
d2059 2
a2060 6
The behaviour of non-decimal but numeric string constants such as
"0x23" was platform-dependent: in some platforms that was seen as 35,
in some as 0, in some as a floating point number (don't ask).  This
was caused by Perl's using the operating system libraries in a situation
where the result of the string to number conversion is undefined: now
Perl consistently handles such strings as zero in numeric contexts.
d2062 1
a2062 1
=item *
d2064 2
a2065 4
Several debugger fixes: exit code now reflects the script exit code,
condition C<"0"> now treated correctly, the C<d> command now checks
line number, C<$.> no longer gets corrupted, and all debugger output
now goes correctly to the socket if RemotePort is set. [561]
d2067 3
a2069 1
=item *
d2071 2
a2072 3
The debugger (perl5db.pl) has been modified to present a more
consistent commands interface, via (CommandSet=580).  perl5db.t was
also added to test the changes, and as a placeholder for further tests.
d2074 4
a2077 1
See L<perldebug>.
d2079 1
a2079 1
=item *
d2081 8
a2088 4
The debugger has a new C<dumpDepth> option to control the maximum
depth to which nested structures are dumped.  The C<x> command has
been extended so that C<x N EXPR> dumps out the value of I<EXPR> to a
depth of at most I<N> levels.
d2090 1
a2090 1
=item *
d2092 3
a2094 2
The debugger can now show lexical variables if you have the CPAN
module PadWalker installed.
d2096 1
a2096 1
=item *
d2098 2
a2099 1
The order of DESTROYs has been made more predictable.
d2101 1
a2101 1
=item *
d2103 3
a2105 3
Perl 5.6.0 could emit spurious warnings about redefinition of
dl_error() when statically building extensions into perl.
This has been corrected. [561]
d2107 1
a2107 1
=item *
d2109 1
a2109 1
L<dprofpp> -R didn't work.
d2111 4
a2114 1
=item *
d2116 1
a2116 1
C<*foo{FORMAT}> now works.
d2118 3
a2120 1
=item *
d2122 1
a2122 1
Infinity is now recognized as a number.
d2124 1
a2124 1
=item *
d2126 4
a2129 2
UNIVERSAL::isa no longer caches methods incorrectly.  (This broke
the Tk extension with 5.6.0.) [561]
d2131 1
a2131 1
=item *
d2133 7
a2139 3
Lexicals I: lexicals outside an eval "" weren't resolved
correctly inside a subroutine definition inside the eval "" if they
were not already referenced in the top level of the eval""ed code.
d2141 6
a2146 1
=item *
d2148 1
a2148 2
Lexicals II: lexicals leaked at file scope into subroutines that
were declared before the lexicals.
d2150 4
a2153 1
=item *
d2155 1
a2155 2
Lexical warnings now propagating correctly between scopes
and into C<eval "...">.
d2157 1
a2157 1
=item *
d2159 1
a2159 2
C<use warnings qw(FATAL all)> did not work as intended.  This has been
corrected. [561]
d2163 2
a2164 2
warnings::enabled() now reports the state of $^W correctly if the caller
isn't using lexical warnings. [561]
d2168 1
a2168 1
Line renumbering with eval and C<#line> now works. [561]
d2172 1
a2172 1
Fixed numerous memory leaks, especially in eval "".
d2176 1
a2176 10
Localised tied variables no longer leak memory

    use Tie::Hash;
    tie my %tied_hash => 'Tie::StdHash';

    ...

    # Used to leak memory every time local() was called;
    # in a loop, this added up.
    local($tied_hash{Foo}) = 1;
d2180 1
a2180 2
Localised hash elements (and %ENV) are correctly unlocalised to not
exist, if they didn't before they were localised.
d2182 1
d2184 1
a2184 2
    use Tie::Hash;
    tie my %tied_hash => 'Tie::StdHash';
d2186 1
a2186 1
    ...
d2188 1
a2188 1
    # Nothing has set the FOO element so far
d2190 1
a2190 1
    { local $tied_hash{FOO} = 'Bar' }
d2192 1
a2192 2
    # This used to print, but not now.
    print "exists!\n" if exists $tied_hash{FOO};
d2194 1
a2194 2
As a side effect of this fix, tied hash interfaces B<must> define
the EXISTS and DELETE methods.
d2198 1
a2198 2
mkdir() now ignores trailing slashes in the directory name,
as mandated by POSIX.
d2202 1
a2202 4
Some versions of glibc have a broken modfl().  This affects builds
with C<-Duselongdouble>.  This version of Perl detects this brokenness
and has a workaround for it.  The glibc release 2.2.2 is known to have
fixed the modfl() bug.
d2204 1
a2204 1
=item *
d2206 1
a2206 2
Modulus of unsigned numbers now works (4063328477 % 65535 used to
return 27406, instead of 27047). [561]
d2208 4
a2211 1
=item *
d2213 2
a2214 2
Some "not a number" warnings introduced in 5.6.0 eliminated to be
more compatible with 5.005.  Infinity is now recognised as a number. [561]
d2216 1
a2216 1
=item *
d2218 2
a2219 2
Numeric conversions did not recognize changes in the string value
properly in certain circumstances. [561]
d2221 2
a2222 1
=item *
d2224 2
a2225 1
Attributes (such as :shared) didn't work with our().
d2227 2
a2228 1
=item *
d2230 1
a2230 2
our() variables will not cause bogus "Variable will not stay shared"
warnings. [561]
d2232 1
a2232 1
=item *
d2234 2
a2235 3
"our" variables of the same name declared in two sibling blocks
resulted in bogus warnings about "redeclaration" of the variables.
The problem has been corrected. [561]
d2237 1
a2237 1
=item *
d2239 1
a2239 1
pack "Z" now correctly terminates the string with "\0".
d2241 2
a2242 1
=item *
d2244 1
a2244 2
Fix password routines which in some shadow password platforms
(e.g. HP-UX) caused getpwent() to return every other entry.
d2246 3
a2248 1
=item *
d2250 3
a2252 2
The PERL5OPT environment variable (for passing command line arguments
to Perl) didn't work for more than a single group of options. [561]
d2254 2
a2255 1
=item *
d2257 1
a2257 1
PERL5OPT with embedded spaces didn't work.
d2259 2
a2260 1
=item *
d2262 1
a2262 1
printf() no longer resets the numeric locale to "C".
d2264 3
a2266 1
=item *
d2268 2
a2269 2
C<qw(a\\b)> now parses correctly as C<'a\\b'>: that is, as three
characters, not four. [561]
d2271 1
a2271 1
=item *
d2273 2
a2274 2
pos() did not return the correct value within s///ge in earlier
versions.  This is now handled correctly. [561]
d2276 6
a2281 1
=item *
d2283 7
a2289 2
Printing quads (64-bit integers) with printf/sprintf now works
without the q L ll prefixes (assuming you are on a quad-capable platform).
d2291 1
a2291 1
=item *
d2293 1
a2293 1
Regular expressions on references and overloaded scalars now work. [561+]
d2295 4
a2298 1
=item *
d2300 2
a2301 2
Right-hand side magic (GMAGIC) could in many cases such as string
concatenation be invoked too many times.
d2303 1
a2303 1
=item *
d2305 1
a2305 1
scalar() now forces scalar context even when used in void context.
d2307 1
a2307 1
=item *
d2309 1
a2309 1
SOCKS support is now much more robust.
d2311 1
a2311 1
=item *
d2313 3
a2315 4
sort() arguments are now compiled in the right wantarray context
(they were accidentally using the context of the sort() itself).
The comparison block is now run in scalar context, and the arguments
to be sorted are always provided list context. [561]
d2317 4
a2320 1
=item *
d2322 3
a2324 4
Changed the POSIX character class C<[[:space:]]> to include the (very
rarely used) vertical tab character.  Added a new POSIX-ish character
class C<[[:blank:]]> which stands for horizontal whitespace
(currently, the space and the tab).
d2326 3
a2328 1
=item *
d2330 1
a2330 3
The tainting behaviour of sprintf() has been rationalized.  It does
not taint the result of floating point formats anymore, making the
behaviour consistent with that of string interpolation. [561]
d2332 5
a2336 1
=item *
d2338 6
a2343 2
Some cases of inconsistent taint propagation (such as within hash
values) have been fixed.
d2345 1
a2345 1
=item *
d2347 3
a2349 2
The RE engine found in Perl 5.6.0 accidentally pessimised certain kinds
of simple pattern matches.  These are now handled better. [561]
a2350 1
=item *
d2352 1
a2352 2
Regular expression debug output (whether through C<use re 'debug'>
or via C<-Dr>) now looks better. [561]
d2354 3
a2356 1
=item *
d2358 2
a2359 2
Multi-line matches like C<"a\nxb\n" =~ /(?!\A)x/m> were flawed.  The
bug has been fixed. [561]
d2361 1
a2361 1
=item *
d2363 2
a2364 2
Use of $& could trigger a core dump under some situations.  This
is now avoided. [561]
d2366 2
a2367 1
=item *
d2369 5
a2373 3
The regular expression captured submatches ($1, $2, ...) are now
more consistently unset if the match fails, instead of leaving false
data lying around in them. [561]
d2375 1
a2375 1
=item *
d2377 1
a2377 3
readline() on files opened in "slurp" mode could return an extra
"" (blank line) at the end in certain situations.  This has been
corrected. [561]
d2379 2
a2380 1
=item *
d2382 1
a2382 3
Autovivification of symbolic references of special variables described
in L<perlvar> (as in C<${$num}>) was accidentally disabled.  This works
again now. [561]
d2384 2
a2385 1
=item *
d2387 1
a2387 1
Sys::Syslog ignored the C<LOG_AUTH> constant.
d2389 3
a2391 1
=item *
d2393 1
a2393 2
$AUTOLOAD, sort(), lock(), and spawning subprocesses
in multiple threads simultaneously are now thread-safe.
d2395 5
a2399 1
=item *
d2401 1
a2401 1
Tie::Array's SPLICE method was broken.
d2403 2
a2404 1
=item *
d2406 5
a2410 1
Allow a read-only string on the left-hand side of a non-modifying tr///.
d2412 1
a2412 1
=item *
d2414 2
a2415 2
If C<STDERR> is tied, warnings caused by C<warn> and C<die> now
correctly pass to it.
d2417 2
a2418 1
=item *
d2420 2
a2421 1
Several Unicode fixes.
d2423 1
a2423 1
=over 8
d2425 4
a2428 1
=item *
d2430 1
a2430 3
BOMs (byte order marks) at the beginning of Perl files
(scripts, modules) should now be transparently skipped.
UTF-16 and UCS-2 encoded Perl files should now be read correctly.
d2432 2
a2433 1
=item *
d2435 1
a2435 1
The character tables have been updated to Unicode 3.2.0.
d2437 4
a2440 1
=item *
d2442 2
a2443 4
Comparing with utf8 data does not magically upgrade non-utf8 data
into utf8.  (This was a problem for example if you were mixing data
from I/O and Unicode data: your output might have got magically encoded
as UTF-8.)
d2445 1
a2445 1
=item *
d2447 3
a2449 2
Generating illegal Unicode code points such as U+FFFE, or the UTF-16
surrogates, now also generates an optional warning.
d2451 2
a2452 1
=item *
d2454 1
a2454 1
C<IsAlnum>, C<IsAlpha>, and C<IsWord> now match titlecase.
d2456 1
a2456 1
=item *
d2458 1
a2458 3
Concatenation with the C<.> operator or via variable interpolation,
C<eq>, C<substr>, C<reverse>, C<quotemeta>, the C<x> operator,
substitution with C<s///>, single-quoted UTF8, should now work.
d2460 5
a2464 1
=item *
d2466 1
a2466 2
The C<tr///> operator now works.  Note that the C<tr///CU>
functionality has been removed (but see pack('U0', ...)).
d2468 2
a2469 1
=item *
d2471 1
a2471 1
C<eval "v200"> now works.
d2473 2
a2474 1
=item *
d2476 1
a2476 2
Perl 5.6.0 parsed m/\x{ab}/ incorrectly, leading to spurious warnings.
This has been corrected. [561]
d2478 2
a2479 1
=item *
d2481 1
a2481 1
Zero entries were missing from the Unicode classes such as C<IsDigit>.
d2483 3
a2485 1
=back
d2487 1
a2487 1
=item *
d2489 4
a2492 2
Large unsigned numbers (those above 2**31) could sometimes lose their
unsignedness, causing bogus results in arithmetic operations. [561]
d2494 1
a2494 1
=item *
d2496 3
a2498 3
The Perl parser has been stress tested using both random input and
Markov chain input and the few found crashes and lockups have been
fixed.
d2500 1
a2500 1
=back
d2502 3
a2504 1
=head2 Platform Specific Changes and Fixes
d2506 1
a2506 1
=over 4
d2508 3
a2510 1
=item *
d2512 1
a2512 1
BSDI 4.*
d2514 2
a2515 1
Perl now works on post-4.0 BSD/OSes.
d2517 1
a2517 1
=item *
d2519 4
a2522 1
All BSDs
d2524 1
a2524 1
Setting C<$0> now works (as much as possible; see L<perlvar> for details).
d2526 7
a2532 1
=item *
d2534 1
a2534 1
Cygwin
d2536 1
a2536 1
Numerous updates; currently synchronised with Cygwin 1.3.10.
d2538 2
a2539 1
=item *
d2541 1
a2541 1
Previously DYNIX/ptx had problems in its Configure probe for non-blocking I/O.
d2543 1
a2543 1
=item *
d2545 2
a2546 1
EPOC
d2548 1
a2548 1
EPOC now better supported.  See README.epoc. [561]
d2550 2
a2551 1
=item *
d2553 1
a2553 1
FreeBSD 3.*
d2555 2
a2556 1
Perl now works on post-3.0 FreeBSDs.
d2558 1
a2558 1
=item *
d2560 4
a2563 1
HP-UX
d2565 1
a2565 2
README.hpux updated; C<Configure -Duse64bitall> now works;
now uses HP-UX malloc instead of Perl malloc.
d2567 6
a2572 1
=item *
d2574 2
a2575 1
IRIX
d2577 1
a2577 2
Numerous compilation flag and hint enhancements; accidental mixing
of 32-bit and 64-bit libraries (a doomed attempt) made much harder.
d2579 2
a2580 1
=item *
d2582 1
a2582 1
Linux
d2584 3
a2586 1
=over 8
d2588 1
a2588 1
=item *
d2590 3
a2592 1
Long doubles should now work (see INSTALL). [561]
d2594 1
a2594 1
=item *
d2596 3
a2598 3
Linux previously had problems related to sockaddrlen when using
accept(), recvfrom() (in Perl: recv()), getpeername(), and
getsockname().
d2600 1
a2600 1
=back
d2602 3
a2604 1
=item *
d2606 1
a2606 1
Mac OS Classic
d2608 2
a2609 4
Compilation of the standard Perl distribution in Mac OS Classic should
now work if you have the Metrowerks development environment and the
missing Mac-specific toolkit bits.  Contact the macperl mailing list
for details.
d2611 2
a2612 1
=item *
d2614 1
a2614 1
MPE/iX
d2616 1
a2616 1
MPE/iX update after Perl 5.6.0.  See README.mpeix. [561]
d2618 3
a2620 1
=item *
d2622 1
a2622 3
NetBSD/threads: try installing the GNU pth (should be in the
packages collection, or http://www.gnu.org/software/pth/),
and Configure with -Duseithreads.
d2624 1
a2624 1
=item *
d2626 1
a2626 1
NetBSD/sparc
d2628 3
a2630 1
Perl now works on NetBSD/sparc.
d2632 1
a2632 1
=item *
d2634 1
a2634 1
OS/2
d2636 1
a2636 1
Now works with usethreads (see INSTALL). [561]
d2638 3
a2640 1
=item *
d2642 1
a2642 1
Solaris
d2644 2
a2645 1
64-bitness using the Sun Workshop compiler now works.
d2647 1
a2647 1
=item *
d2649 6
a2654 1
Stratus VOS
d2656 1
a2656 4
The native build method requires at least VOS Release 14.5.0
and GNU C++/GNU Tools 2.0.1 or later.  The Perl pack function
now maps overflowed values to +infinity and underflowed values
to -infinity.
d2658 2
a2659 1
=item *
d2661 1
a2661 1
Tru64 (aka Digital UNIX, aka DEC OSF/1)
d2663 4
a2666 4
The operating system version letter now recorded in $Config{osvers}.
Allow compiling with gcc (previously explicitly forbidden).  Compiling
with gcc still not recommended because buggy code results, even with
gcc 2.95.2.
d2668 1
a2668 1
=item *
d2670 3
a2672 1
Unicos
d2674 1
a2674 4
Fixed various alignment problems that lead into core dumps either
during build or later; no longer dies on math errors at runtime;
now using full quad integers (64 bits), previously was using
only 46 bit integers for speed.
d2676 3
a2678 1
=item *
d2680 1
a2680 1
VMS
d2682 2
a2683 2
See L</"Socket Extension Dynamic in VMS"> and L</"IEEE-format Floating Point
Default on OpenVMS Alpha"> for important changes not otherwise listed here.
d2685 1
a2685 2
chdir() now works better despite a CRT bug; now works with MULTIPLICITY
(see INSTALL); now works with Perl's malloc.
d2687 2
a2688 2
The tainting of C<%ENV> elements via C<keys> or C<values> was previously
unimplemented.  It now works as documented.
d2690 1
a2690 3
The C<waitpid> emulation has been improved.  The worst bug (now fixed)
was that a pid of -1 would cause a wildcard search of all processes on
the system.
d2692 5
a2696 2
POSIX-style signals are now emulated much better on VMS versions prior
to 7.0.
d2698 1
a2698 2
The C<system> function and backticks operator have improved
functionality and better error handling. [561]
d2700 5
a2704 4
File access tests now use current process privileges rather than the
user's default privileges, which could sometimes result in a mismatch
between reported access and actual access.  This improvement is only
available on VMS v6.0 and later.
d2706 1
a2706 4
There is a new C<kill> implementation based on C<sys$sigprc> that allows
older VMS systems (pre-7.0) to use C<kill> to send signals rather than
simply force exit.  This implementation also allows later systems to
call C<kill> from within a signal handler.
d2708 4
a2711 2
Iterative logical name translations are now limited to 10 iterations in
imitation of SHOW LOGICAL and other OpenVMS facilities.
d2713 1
a2713 1
=item *
d2715 1
a2715 1
Windows
d2717 1
a2717 1
=over 8
d2719 3
a2721 1
=item *
d2723 1
a2723 3
Signal handling now works better than it used to.  It is now implemented
using a Windows message loop, and is therefore less prone to random
crashes.
d2725 3
a2727 1
=item *
d2729 1
a2729 2
fork() emulation is now more robust, but still continues to have a few
esoteric bugs and caveats.  See L<perlfork> for details. [561+]
d2731 1
a2731 1
=item *
d2733 1
a2733 1
A failed (pseudo)fork now returns undef and sets errno to EAGAIN. [561]
d2735 2
a2736 1
=item *
d2738 1
a2738 1
The following modules now work on Windows:
d2740 1
a2740 4
    ExtUtils::Embed         [561]
    IO::Pipe
    IO::Poll
    Net::Ping
d2742 1
a2742 1
=item *
d2744 2
a2745 2
IO::File::new_tmpfile() is no longer limited to 32767 invocations
per-process.
d2747 1
a2747 1
=item *
d2749 4
a2752 1
Better chdir() return value for a non-existent directory.
d2754 1
a2754 1
=item *
d2756 5
a2760 1
Compiling perl using the 64-bit Platform SDK tools is now supported.
d2762 1
a2762 1
=item *
d2764 3
a2766 3
The Win32::SetChildShowWindow() builtin can be used to control the
visibility of windows created by child processes.  See L<Win32> for
details.
d2768 1
a2768 1
=item *
d2770 4
a2773 2
Non-blocking waits for child processes (or pseudo-processes) are
supported via C<waitpid($pid, &POSIX::WNOHANG)>.
d2775 1
a2775 1
=item *
d2777 3
a2779 12
The behavior of system() with multiple arguments has been rationalized.
Each unquoted argument will be automatically quoted to protect whitespace,
and any existing whitespace in the arguments will be preserved.  This
improves the portability of system(@@args) by avoiding the need for
Windows C<cmd> shell specific quoting in perl programs.

Note that this means that some scripts that may have relied on earlier
buggy behavior may no longer work correctly.  For example,
C<system("nmake /nologo", @@args)> will now attempt to run the file
C<nmake /nologo> and will fail when such a file isn't found.
On the other hand, perl will now execute code such as
C<system("c:/Program Files/MyApp/foo.exe", @@args)> correctly.
d2781 1
a2781 1
=item *
d2783 3
a2785 3
The perl header files no longer suppress common warnings from the
Microsoft Visual C++ compiler.  This means that additional warnings may
now show up when compiling XS code.
d2787 1
a2787 1
=item *
d2789 4
a2792 3
Borland C++ v5.5 is now a supported compiler that can build Perl.
However, the generated binaries continue to be incompatible with those
generated by the other supported compilers (GCC and Visual C++). [561]
d2794 1
a2794 1
=item *
d2796 1
a2796 2
Duping socket handles with open(F, ">&MYSOCK") now works under Windows 9x.
[561]
d2798 1
a2798 1
=item *
d2800 2
a2801 2
Current directory entries in %ENV are now correctly propagated to child
processes. [561]
d2803 1
a2803 1
=item *
d2805 2
a2806 1
New %ENV entries now propagate to subprocesses. [561]
d2808 1
a2808 1
=item *
d2810 9
a2818 2
Win32::GetCwd() correctly returns C:\ instead of C: when at the drive root.
Other bugs in chdir() and Cwd::cwd() have also been fixed. [561]
d2820 1
a2820 1
=item *
d2822 2
a2823 2
The makefiles now default to the features enabled in ActiveState ActivePerl
(a popular Win32 binary distribution). [561]
d2825 1
a2825 1
=item *
d2827 2
a2828 2
HTML files will now be installed in c:\perl\html instead of
c:\perl\lib\pod\html
d2830 1
a2830 1
=item *
d2832 1
a2832 1
REG_EXPAND_SZ keys are now allowed in registry settings used by perl. [561]
d2834 1
a2834 1
=item *
d2836 4
a2839 1
Can now send() from all threads, not just the first one. [561]
d2841 1
a2841 1
=item *
d2843 4
a2846 1
ExtUtils::MakeMaker now uses $ENV{LIB} to search for libraries. [561]
d2848 1
a2848 1
=item *
d2850 2
a2851 2
Less stack reserved per thread so that more threads can run
concurrently. (Still 16M per thread.) [561]
d2853 1
a2853 1
=item *
d2855 3
a2857 2
C<< File::Spec->tmpdir() >> now prefers C:/temp over /tmp
(works better when perl is running as service).
d2859 1
a2859 1
=item *
d2861 1
a2861 1
Better UNC path handling under ithreads. [561]
d2863 1
a2863 1
=item *
d2865 2
a2866 2
wait(), waitpid(), and backticks now return the correct exit status
under Windows 9x. [561]
d2868 1
a2868 1
=item *
d2870 2
a2871 1
A socket handle leak in accept() has been fixed. [561]
d2873 1
a2873 1
=back
d2875 2
a2876 1
=back
d2878 1
a2878 1
=head1 New or Changed Diagnostics
d2880 2
a2881 1
Please see L<perldiag> for more details.
d2883 1
a2883 1
=over 4
d2885 3
a2887 1
=item *
d2889 1
a2889 2
Ambiguous range in the transliteration operator (like a-z-9) now
gives a warning.
d2891 2
a2892 1
=item *
d2894 1
a2894 3
chdir("") and chdir(undef) now give a deprecation warning because they
cause a possible unintentional chdir to the home directory.
Say chdir() if you really mean that.
d2896 5
a2900 1
=item *
d2902 1
a2902 4
Two new debugging options have been added: if you have compiled your
Perl with debugging, you can use the -DT [561] and -DR options to trace
tokenising and to add reference counts to displaying variables,
respectively.
d2904 3
a2906 1
=item *
d2908 1
a2908 3
The lexical warnings category "deprecated" is no longer a sub-category
of the "syntax" category. It is now a top-level category in its own
right.
d2910 1
a2910 1
=item *
d2912 2
a2913 2
Unadorned dump() will now give a warning suggesting to
use explicit CORE::dump() if that's what really is meant.
d2915 1
a2915 1
=item *
d2917 1
a2917 2
The "Unrecognized escape" warning has been extended to include C<\8>,
C<\9>, and C<\_>.  There is no need to escape any of the C<\w> characters.
d2919 1
a2919 1
=item *
d2921 2
a2922 4
All regular expression compilation error messages are now hopefully
easier to understand both because the error message now comes before
the failed regex and because the point of failure is now clearly
marked by a C<E<lt>-- HERE> marker.
d2924 1
a2924 1
=item *
d2926 1
a2926 3
Various I/O (and socket) functions like binmode(), close(), and so
forth now more consistently warn if they are used illogically either
on a yet unopened or on an already closed filehandle (or socket).
d2928 1
a2928 1
=item *
d2930 1
a2930 2
Using lstat() on a filehandle now gives a warning.  (It's a non-sensical
thing to do.)
d2932 1
a2932 1
=item *
d2934 1
a2934 1
The C<-M> and C<-m> options now warn if you didn't supply the module name.
d2936 1
a2936 1
=item *
d2938 4
a2941 2
If you in C<use> specify a required minimum version, modules matching
the name and but not defining a $VERSION will cause a fatal failure.
d2943 1
a2943 1
=item *
d2945 4
a2948 1
Using negative offset for vec() in lvalue context is now a warnable offense.
d2950 1
a2950 1
=item *
d2952 2
a2953 1
Odd number of arguments to oveload::constant now elicits a warning.
d2955 1
a2955 1
=item *
d2957 1
a2957 1
Odd number of elements to in anonymous hash now elicits a warning.
d2959 4
a2962 1
=item *
d2964 1
a2964 3
The various "opened only for", "on closed", "never opened" warnings
drop the C<main::> prefix for filehandles in the C<main> package,
for example C<STDIN> instead of C<main::STDIN>.
d2966 3
a2968 1
=item *
d2970 2
a2971 2
Subroutine prototypes are now checked more carefully, you may
get warnings for example if you have used non-prototype characters.
a2972 1
=item *
d2974 1
a2974 2
If an attempt to use a (non-blessed) reference as an array index
is made, a warning is given.
d2976 1
a2976 1
=item *
d2978 1
a2978 3
C<push @@a;> and C<unshift @@a;> (with no values to push or unshift)
now give a warning.  This may be a problem for generated and evaled
code.
d2980 2
a2981 1
=item *
d2983 1
a2983 3
If you try to L<perlfunc/pack> a number less than 0 or larger than 255
using the C<"C"> format you will get an optional warning.  Similarly
for the C<"c"> format and a number less than -128 or more than 127.
d2985 2
a2986 1
=item *
d2988 1
a2988 1
pack C<P> format now demands an explicit size.
d2990 2
a2991 1
=item *
d2993 1
a2993 1
unpack C<w> now warns of unterminated compressed integers.
d2995 2
a2996 1
=item *
d2998 1
a2998 1
Warnings relating to the use of PerlIO have been added.
d3000 2
a3001 1
=item *
d3003 1
a3003 3
Certain regex modifiers such as C<(?o)> make sense only if applied to
the entire regex.  You will get an optional warning if you try to do
otherwise.
d3005 5
a3009 1
=item *
d3011 1
a3011 2
Variable length lookbehind has not yet been implemented, trying to
use it will tell that.
d3013 2
a3014 1
=item *
d3016 1
a3016 2
Using arrays or hashes as references (e.g. C<< %foo->{bar} >>
has been deprecated for a while.  Now you will get an optional warning.
d3018 1
a3018 1
=item *
d3020 6
a3025 2
Warnings relating to the use of the new restricted hashes feature
have been added.
d3027 1
a3027 1
=item *
d3029 5
a3033 2
Self-ties of arrays and hashes are not supported and fatal errors
will happen even at an attempt to do so.
d3035 1
a3035 1
=item *
d3037 3
a3039 2
Using C<sort> in scalar context now issues an optional warning.
This didn't do anything useful, as the sort was not performed.
d3041 1
a3041 1
=item *
d3043 4
a3046 1
Using the /g modifier in split() is meaningless and will cause a warning.
d3048 1
a3048 1
=item *
d3050 2
a3051 1
Using splice() past the end of an array now causes a warning.
d3053 1
a3053 1
=item *
d3055 4
a3058 2
Malformed Unicode encodings (UTF-8 and UTF-16) cause a lot of warnings,
ad doestrying to use UTF-16 surrogates (which are unimplemented).
d3060 1
a3060 1
=item *
d3062 4
a3065 3
Trying to use Unicode characters on an I/O stream without marking the
stream's encoding (using open() or binmode()) will cause "Wide character"
warnings.
d3067 1
a3067 1
=item *
d3069 4
a3072 1
Use of v-strings in use/require causes a (backward) portability warning.
d3074 1
a3074 1
=item *
d3076 4
a3079 2
Warnings relating to the use interpreter threads and their shared data
have been added.
d3081 1
a3081 1
=back
d3083 4
a3086 1
=head1 Changed Internals
d3088 1
a3088 1
=over 4
d3090 3
a3092 1
=item *
d3094 1
a3094 1
PerlIO is now the default.
d3096 1
a3096 1
=item *
d3098 1
a3098 2
perlapi.pod (a companion to perlguts) now attempts to document the
internal API.
d3100 1
a3100 1
=item *
d3102 1
a3102 6
You can now build a really minimal perl called microperl.
Building microperl does not require even running Configure;
C<make -f Makefile.micro> should be enough.  Beware: microperl makes
many assumptions, some of which may be too bold; the resulting
executable may crash or otherwise misbehave in wondrous ways.
For careful hackers only.
d3104 1
a3104 1
=item *
d3106 1
a3106 4
Added rsignal(), whichsig(), do_join(), op_clear, op_null,
ptr_table_clear(), ptr_table_free(), sv_setref_uv(), and several UTF-8
interfaces to the publicised API.  For the full list of the available
APIs see L<perlapi>.
d3108 1
a3108 1
=item *
d3110 1
a3110 1
Made possible to propagate customised exceptions via croak()ing.
d3112 1
a3112 1
=item *
d3114 1
a3114 2
Now xsubs can have attributes just like subs.  (Well, at least the
built-in attributes.)
d3116 1
a3116 1
=item *
d3118 1
a3118 2
dTHR and djSP have been obsoleted; the former removed (because it's
a no-op) and the latter replaced with dSP.
d3120 1
a3120 1
=item *
d3122 1
a3122 1
PERL_OBJECT has been completely removed.
d3124 1
a3124 1
=item *
d3126 1
a3126 3
The MAGIC constants (e.g. C<'P'>) have been macrofied
(e.g. C<PERL_MAGIC_TIED>) for better source code readability
and maintainability.
d3128 1
a3128 1
=item *
d3130 1
a3130 5
The regex compiler now maintains a structure that identifies nodes in
the compiled bytecode with the corresponding syntactic features of the
original regex expression.  The information is attached to the new
C<offsets> member of the C<struct regexp>. See L<perldebguts> for more
complete information.
d3132 1
a3132 1
=item *
d3134 1
a3134 4
The C code has been made much more C<gcc -Wall> clean.  Some warning
messages still remain in some platforms, so if you are compiling with
gcc you may see some warnings about dubious practices.  The warnings
are being worked on.
d3136 1
a3136 1
=item *
d3138 1
a3138 1
F<perly.c>, F<sv.c>, and F<sv.h> have now been extensively commented.
d3140 1
a3140 1
=item *
d3142 1
a3142 2
Documentation on how to use the Perl source repository has been added
to F<Porting/repository.pod>.
d3144 1
a3144 1
=item *
d3146 1
a3146 1
There are now several profiling make targets.
d3150 1
a3150 1
=head1 Security Vulnerability Closed [561]
d3152 1
a3152 11
(This change was already made in 5.7.0 but bears repeating here.)
(5.7.0 came out before 5.6.1: the development branch 5.7 released
earlier than the maintenance branch 5.6)

A potential security vulnerability in the optional suidperl component
of Perl was identified in August 2000.  suidperl is neither built nor
installed by default.  As of November 2001 the only known vulnerable
platform is Linux, most likely all Linux distributions.  CERT and
various vendors and distributors have been alerted about the vulnerability.
See http://www.cpan.org/src/5.0/sperl-2000-08-05/sperl-2000-08-05.txt
for more information.
d3154 2
a3155 37
The problem was caused by Perl trying to report a suspected security
exploit attempt using an external program, /bin/mail.  On Linux
platforms the /bin/mail program had an undocumented feature which
when combined with suidperl gave access to a root shell, resulting in
a serious compromise instead of reporting the exploit attempt.  If you
don't have /bin/mail, or if you have 'safe setuid scripts', or if
suidperl is not installed, you are safe.

The exploit attempt reporting feature has been completely removed from
Perl 5.8.0 (and the maintenance release 5.6.1, and it was removed also
from all the Perl 5.7 releases), so that particular vulnerability
isn't there anymore.  However, further security vulnerabilities are,
unfortunately, always possible.  The suidperl functionality is most
probably going to be removed in Perl 5.10.  In any case, suidperl
should only be used by security experts who know exactly what they are
doing and why they are using suidperl instead of some other solution
such as sudo ( see http://www.courtesan.com/sudo/ ).

=head1 New Tests

Several new tests have been added, especially for the F<lib> and
F<ext> subsections.  There are now about 69 000 individual tests
(spread over about 700 test scripts), in the regression suite (5.6.1
has about 11 700 tests, in 258 test scripts)  The exact numbers depend
on the platform and Perl configuration used.  Many of the new tests
are of course introduced by the new modules, but still in general Perl
is now more thoroughly tested.

Because of the large number of tests, running the regression suite
will take considerably longer time than it used to: expect the suite
to take up to 4-5 times longer to run than in perl 5.6.  On a really
fast machine you can hope to finish the suite in about 6-8 minutes
(wallclock time).

The tests are now reported in a different order than in earlier Perls.
(This happens because the test scripts from under t/lib have been moved
to be closer to the library/extension they are testing.)
d3157 3
a3159 1
=head1 Known Problems
d3161 1
a3161 1
=head2 The Compiler Suite Is Still Very Experimental
d3163 1
a3163 2
The compiler suite is slowly getting better but it continues to be
highly experimental.  Use in production environments is discouraged.
d3165 2
a3166 1
=head2 Localising Tied Arrays and Hashes Is Broken
d3168 1
a3168 1
    local %tied_array;
d3170 3
a3172 5
doesn't work as one would expect: the old value is restored
incorrectly.  This will be changed in a future release, but we don't
know yet what the new semantics will exactly be.  In any case, the
change will break existing code that relies on the current
(ill-defined) semantics, so just avoid doing this in general.
d3174 1
a3174 1
=head2 Building Extensions Can Fail Because Of Largefiles
d3176 3
a3178 13
Some extensions like mod_perl are known to have issues with
`largefiles', a change brought by Perl 5.6.0 in which file offsets
default to 64 bits wide, where supported.  Modules may fail to compile
at all, or they may compile and work incorrectly.  Currently, there
is no good solution for the problem, but Configure now provides
appropriate non-largefile ccflags, ldflags, libswanted, and libs
in the %Config hash (e.g., $Config{ccflags_nolargefiles}) so the
extensions that are having problems can try configuring themselves
without the largefileness.  This is admittedly not a clean solution,
and the solution may not even work at all.  One potential failure is
whether one can (or, if one can, whether it's a good idea to) link
together at all binaries with different ideas about file offsets;
all this is platform-dependent.
d3180 2
a3181 1
=head2 Modifying $_ Inside for(..)
d3183 1
a3183 1
   for (1..5) { $_++ }
d3185 4
a3188 3
works without complaint.  It shouldn't.  (You should be able to
modify only lvalue elements inside the loops.)  You can see the
correct behaviour by replacing the 1..5 with 1, 2, 3, 4, 5.
d3190 2
a3191 1
=head2 mod_perl 1.26 Doesn't Build With Threaded Perl
d3193 1
a3193 1
Use mod_perl 1.27 or higher.
d3195 1
a3195 1
=head2 lib/ftmp-security tests warn 'system possibly insecure'
d3197 4
a3200 1
Don't panic.  Read the 'make test' section of INSTALL instead.
d3202 1
a3202 1
=head2 libwww-perl (LWP) fails base/date #51
d3204 1
a3204 1
Use libwww-perl 5.65 or later.
d3206 5
a3210 1
=head2 PDL failing some tests
d3212 2
a3213 1
Use PDL 2.3.4 or later.
d3215 1
a3215 1
=head2 Perl_get_sv
d3217 3
a3219 7
You may get errors like 'Undefined symbol "Perl_get_sv"' or "can't
resolve symbol 'Perl_get_sv'", or the symbol may be "Perl_sv_2pv".
This probably means that you are trying to use an older shared Perl
library (or extensions linked with such) with Perl 5.8.0 executable.
Perl used to have such a subroutine, but that is no more the case.
Check your shared library path, and any shared Perl libraries in those
directories.
d3221 1
a3221 3
Sometimes this problem may also indicate a partial Perl 5.8.0
installation, see L</"Mac OS X dyld undefined symbols"> for an
example and how to deal with it.
d3223 2
a3224 1
=head2 Self-tying Problems
d3226 1
a3226 4
Self-tying of arrays and hashes is broken in rather deep and
hard-to-fix ways.  As a stop-gap measure to avoid people from getting
frustrated at the mysterious results (core dumps, most often), it is
forbidden for now (you will get a fatal error even from an attempt).
d3228 1
a3228 4
A change to self-tying of globs has caused them to be recursively
referenced (see: L<perlobj/"Two-Phased Garbage Collection">).  You
will now need an explicit untie to destroy a self-tied glob.  This
behaviour may be fixed at a later date.
d3230 3
a3232 1
Self-tying of scalars and IO thingies works.
d3234 1
a3234 1
=head2 ext/threads/t/libc
d3236 1
a3236 3
If this test fails, it indicates that your libc (C library) is not
threadsafe.  This particular test stress tests the localtime() call to
find out whether it is threadsafe.  See L<perlthrtut> for more information.
d3238 1
a3238 1
=head2 Failure of Thread (5.005-style) tests
d3240 7
a3246 3
B<Note that support for 5.005-style threading is deprecated,
experimental and practically unsupported.  In 5.10, it is expected
to be removed.  You should migrate your code to ithreads.>
d3248 1
a3248 3
The following tests are known to fail due to fundamental problems in
the 5.005 threading implementation. These are not new failures--Perl
5.005_0x has the same bugs, but didn't have these tests.
d3250 1
a3250 14
 ../ext/B/t/xref.t                    255 65280    14   12  85.71%  3-14
 ../ext/List/Util/t/first.t           255 65280     7    4  57.14%  2 5-7
 ../lib/English.t                       2   512    54    2   3.70%  2-3
 ../lib/FileCache.t                                 5    1  20.00%  5
 ../lib/Filter/Simple/t/data.t                      6    3  50.00%  1-3
 ../lib/Filter/Simple/t/filter_only.                9    3  33.33%  1-2 5
 ../lib/Math/BigInt/t/bare_mbf.t                 1627    4   0.25%  8 11 1626-1627
 ../lib/Math/BigInt/t/bigfltpm.t                 1629    4   0.25%  10 13 1628-
                                                                    1629
 ../lib/Math/BigInt/t/sub_mbf.t                  1633    4   0.24%  8 11 1632-1633
 ../lib/Math/BigInt/t/with_sub.t                 1628    4   0.25%  9 12 1627-1628
 ../lib/Tie/File/t/31_autodefer.t     255 65280    65   32  49.23%  34-65
 ../lib/autouse.t                                  10    1  10.00%  4
 op/flip.t                                         15    1   6.67%  15
d3252 2
a3253 4
These failures are unlikely to get fixed as 5.005-style threads
are considered fundamentally broken.  (Basically what happens is that
competing threads can corrupt shared global state, one good example
being regular expression engine's state.)
d3255 1
a3255 1
=head2 Timing problems
d3257 4
a3260 2
The following tests may fail intermittently because of timing
problems, for example if the system is heavily loaded.
d3262 1
a3262 5
    t/op/alarm.t
    ext/Time/HiRes/HiRes.t
    lib/Benchmark.t
    lib/Memoize/t/expmod_t.t
    lib/Memoize/t/speed.t
d3264 4
a3267 1
In case of failure please try running them manually, for example
d3269 1
a3269 1
    ./perl -Ilib ext/Time/HiRes/HiRes.t
d3271 2
a3272 1
=head2 Tied/Magical Array/Hash Elements Do Not Autovivify
d3274 3
a3276 6
For normal arrays C<$foo = \$bar[1]> will assign C<undef> to
C<$bar[1]> (assuming that it didn't exist before), but for
tied/magical arrays and hashes such autovivification does not happen
because there is currently no way to catch the reference creation.
The same problem affects slicing over non-existent indices/keys of
a tied/magical array/hash.
d3278 1
a3278 1
=head2 Unicode in package/class and subroutine names does not work
d3280 2
a3281 4
One can have Unicode in identifier names, but not in package/class or
subroutine names.  While some limited functionality towards this does
exist as of Perl 5.8.0, that is more accidental than designed; use of
Unicode for the said purposes is unsupported.
d3283 1
a3283 5
One reason of this unfinishedness is its (currently) inherent
unportability: since both package names and subroutine names may
need to be mapped to file and directory names, the Unicode capability
of the filesystem becomes important-- and there unfortunately aren't
portable answers.
d3285 1
a3285 1
=head1 Platform Specific Problems
d3287 1
a3287 1
=head2 AIX
d3289 1
a3289 1
=over 4
d3291 1
a3291 1
=item *
d3293 6
a3298 4
If using the AIX native make command, instead of just "make" issue
"make all".  In some setups the former has been known to spuriously
also try to run "make install".  Alternatively, you may want to use
GNU make.
d3300 1
a3300 1
=item *
d3302 1
a3302 7
In AIX 4.2, Perl extensions that use C++ functions that use statics
may have problems in that the statics are not getting initialized.
In newer AIX releases, this has been solved by linking Perl with
the libC_r library, but unfortunately in AIX 4.2 the said library
has an obscure bug where the various functions related to time
(such as time() and gettimeofday()) return broken values, and
therefore in AIX 4.2 Perl is not linked against libC_r.
d3304 9
a3312 1
=item *
d3314 1
a3314 1
vac 5.0.0.0 May Produce Buggy Code For Perl
d3316 1
a3316 6
The AIX C compiler vac version 5.0.0.0 may produce buggy code,
resulting in a few random tests failing when run as part of "make
test", but when the failing tests are run by hand, they succeed.
We suggest upgrading to at least vac version 5.0.1.0, that has been
known to compile Perl correctly.  "lslpp -L|grep vac.C" will tell
you the vac version.  See README.aix.
d3318 2
a3319 1
=item *
d3321 3
a3323 1
If building threaded Perl, you may get compilation warning from pp_sys.c:
d3325 1
a3325 1
  "pp_sys.c", line 4651.39: 1506-280 (W) Function argument assignment between types "unsigned char*" and "const void*" is not allowed.
d3327 1
a3327 2
This is harmless; it is caused by the getnetbyaddr() and getnetbyaddr_r()
having slightly different types for their first argument.
d3329 1
a3329 1
=back
d3331 1
a3331 1
=head2 Alpha systems with old gccs fail several tests
d3333 6
a3338 6
If you see op/pack, op/pat, op/regexp, or ext/Storable tests failing
in a Linux/alpha or *BSD/Alpha, it's probably time to upgrade your gcc.
gccs prior to 2.95.3 are definitely not good enough, and gcc 3.1 may
be even better.  (RedHat Linux/alpha with gcc 3.1 reported no problems,
as did Linux 2.4.18 with gcc 2.95.4.)  (In Tru64, it is preferable to
use the bundled C compiler.)
d3340 1
a3340 1
=head2 AmigaOS
d3342 1
a3342 4
Perl 5.8.0 doesn't build in AmigaOS.  It broke at some point during
the ithreads work and we could not find Amiga experts to unbreak the
problems.  Perl 5.6.1 still works for AmigaOS (as does the the 5.7.2
development release).
d3344 7
a3350 1
=head2 BeOS
d3352 3
a3354 1
The following tests fail on 5.8.0 Perl in BeOS Personal 5.03:
d3356 3
a3358 6
 t/op/lfs............................FAILED at test 17
 t/op/magic..........................FAILED at test 24
 ext/Fcntl/t/syslfs..................FAILED at test 17
 ext/File/Glob/t/basic...............FAILED at test 3
 ext/POSIX/t/sigaction...............FAILED at test 13
 ext/POSIX/t/waitpid.................FAILED at test 1
d3360 2
a3361 1
See L<perlbeos> (README.beos) for more details.
d3363 3
a3365 1
=head2 Cygwin "unable to remap"
d3367 1
a3367 4
For example when building the Tk extension for Cygwin,
you may get an error message saying "unable to remap".
This is known problem with Cygwin, and a workaround is
detailed in here: http://sources.redhat.com/ml/cygwin/2001-12/msg00894.html
d3369 8
a3376 1
=head2 Cygwin ndbm tests fail on FAT
d3378 5
a3382 4
One can build but not install (or test the build of) the NDBM_File
on FAT filesystems.  Installation (or build) on NTFS works fine.
If one attempts the test on a FAT install (or build) the following
failures are expected:
d3384 2
a3385 6
 ../ext/NDBM_File/ndbm.t       13  3328    71   59  83.10%  1-2 4 16-71
 ../ext/ODBM_File/odbm.t      255 65280    ??   ??       %  ??
 ../lib/AnyDBM_File.t           2   512    12    2  16.67%  1 4
 ../lib/Memoize/t/errors.t      0   139    11    5  45.45%  7-11
 ../lib/Memoize/t/tie_ndbm.t   13  3328     4    4 100.00%  1-4
 run/fresh_perl.t                          97    1   1.03%  91
d3387 1
a3387 1
NDBM_File fails and ODBM_File just coredumps.
d3389 1
a3389 1
=head2 DJGPP Failures
d3391 1
a3391 8
 t/op/stat............................FAILED at test 29
 lib/File/Find/t/find.................FAILED at test 1
 lib/File/Find/t/taint................FAILED at test 1
 lib/h2xs.............................FAILED at test 15
 lib/Pod/t/eol........................FAILED at test 1
 lib/Test/Harness/t/strap-analyze.....FAILED at test 8
 lib/Test/Harness/t/test-harness......FAILED at test 23
 lib/Test/Simple/t/exit...............FAILED at test 1
d3393 1
a3393 3
The above failures are known as of 5.8.0 with native builds with long
filenames, but there are a few more if running under dosemu because of
limitations (and maybe bugs) of dosemu:
d3395 5
a3399 2
 t/comp/cpp...........................FAILED at test 3
 t/op/inccode.........................(crash)
d3401 5
a3405 3
and a few lib/ExtUtils tests, and several hundred Encode/t/Aliases.t
failures that work fine with long filenames.  So you really might
prefer native builds and long filenames.
d3407 1
a3407 1
=head2 FreeBSD built with ithreads coredumps reading large directories
d3409 1
a3409 2
This is a known bug in FreeBSD 4.5's readdir_r(), it has been fixed in
FreeBSD 4.6 (see L<perlfreebsd> (README.freebsd)).
d3411 6
a3416 1
=head2 FreeBSD Failing locale Test 117 For ISO 8859-15 Locales
d3418 2
a3419 6
The ISO 8859-15 locales may fail the locale test 117 in FreeBSD.
This is caused by the characters \xFF (y with diaeresis) and \xBE
(Y with diaeresis) not behaving correctly when being matched
case-insensitively.  Apparently this problem has been fixed in
the latest FreeBSD releases.
( http://www.freebsd.org/cgi/query-pr.cgi?pr=34308 )
d3421 5
a3425 1
=head2 IRIX fails ext/List/Util/t/shuffle.t or Digest::MD5
d3427 1
a3427 4
IRIX with MIPSpro 7.3.1.2m or 7.3.1.3m compiler may fail the List::Util
test ext/List/Util/t/shuffle.t by dumping core.  This seems to be
a compiler error since if compiled with gcc no core dump ensues, and
no failures have been seen on the said test on any other platform.
d3429 1
a3429 2
Similarly, building the Digest::MD5 extension has been
known to fail with "*** Termination code 139 (bu21)".
d3431 1
a3431 1
The cure is to drop optimization level (Configure -Doptimize=-O2).
d3433 2
a3434 1
=head2 HP-UX lib/posix Subtest 9 Fails When LP64-Configured
d3436 2
a3437 4
If perl is configured with -Duse64bitall, the successful result of the
subtest 10 of lib/posix may arrive before the successful result of the
subtest 9, which confuses the test harness so much that it thinks the
subtest 9 failed.
d3439 1
a3439 1
=head2 Linux with glibc 2.2.5 fails t/op/int subtest #6 with -Duse64bitint
d3441 1
a3441 2
This is a known bug in the glibc 2.2.5 with long long integers.
( http://bugzilla.redhat.com/bugzilla/show_bug.cgi?id=65612 )
d3443 1
a3443 1
=head2 Linux With Sfio Fails op/misc Test 48
d3445 1
a3445 1
No known fix.
d3447 1
a3447 1
=head2 Mac OS X
d3449 2
a3450 3
Please remember to set your environment variable LC_ALL to "C"
(setenv LC_ALL C) before running "make test" to avoid a lot of
warnings about the broken locales of Mac OS X.
d3452 5
a3456 2
The following tests are known to fail in Mac OS X 10.1.5 because of
buggy (old) implementations of Berkeley DB included in Mac OS X:
d3458 1
a3458 4
 Failed Test                 Stat Wstat Total Fail  Failed  List of Failed
 -------------------------------------------------------------------------
 ../ext/DB_File/t/db-btree.t    0    11    ??   ??       %  ??
 ../ext/DB_File/t/db-recno.t              149    3   2.01%  61 63 65
d3460 1
a3460 3
If you are building on a UFS partition, you will also probably see
t/op/stat.t subtest #9 fail.  This is caused by Darwin's UFS not
supporting inode change time.
d3462 4
a3465 3
Also the ext/POSIX/t/posix.t subtest #10 fails but it is skipped for
now because the failure is Apple's fault, not Perl's (blocked signals
are lost).
d3467 1
a3467 4
If you Configure with ithreads, ext/threads/t/libc.t will fail. Again,
this is not Perl's fault-- the libc of Mac OS X is not threadsafe
(in this particular test, the localtime() call is found to be
threadunsafe.)
d3469 4
a3472 1
=head2 Mac OS X dyld undefined symbols
d3474 1
a3474 2
If after installing Perl 5.8.0 you are getting warnings about missing
symbols, for example
d3476 3
a3478 3
    dyld: perl Undefined symbols
    _perl_sv_2pv
    _perl_get_sv
d3480 1
a3480 5
you probably have an old pre-Perl-5.8.0 installation (or parts of one)
in /Library/Perl (the undefined symbols used to exist in pre-5.8.0 Perls).
It seems that for some reason "make install" doesn't always completely
overwrite the files in /Library/Perl.  You can move the old Perl
shared library out of the way like this:
d3482 1
a3482 2
    cd /Library/Perl/darwin/CORE
    mv libperl.dylib libperlold.dylib
d3484 4
a3487 4
and then reissue "make install".  Note that the above of course is
extremely disruptive for anything using the /usr/local/bin/perl.
If that doesn't help, you may have to try removing all the .bundle
files from beneath /Library/Perl, and again "make install"-ing.
d3489 2
a3490 1
=head2 OS/2 Test Failures
d3492 1
a3492 2
The following tests are known to fail on OS/2 (for clarity
only the failures are shown, not the full error messages):
d3494 1
a3494 6
 ../lib/ExtUtils/t/Mkbootstrap.t    1   256    18    1   5.56%  8
 ../lib/ExtUtils/t/Packlist.t       1   256    34    1   2.94%  17
 ../lib/ExtUtils/t/basic.t          1   256    17    1   5.88%  14
 lib/os2_process.t                  2   512   227    2   0.88%  174 209
 lib/os2_process_kid.t                        227    2   0.88%  174 209
 lib/rx_cmprt.t                   255 65280    18    3  16.67%  16-18
d3496 6
a3501 1
=head2 op/sprintf tests 91, 129, and 130
d3503 4
a3506 2
The op/sprintf tests 91, 129, and 130 are known to fail on some platforms.
Examples include any platform using sfio, and Compaq/Tandem's NonStop-UX.
d3508 1
a3508 2
Test 91 is known to fail on QNX6 (nto), because C<sprintf '%e',0>
incorrectly produces C<0.000000e+0> instead of C<0.000000e+00>.
d3510 3
a3512 5
For tests 129 and 130, the failing platforms do not comply with
the ANSI C Standard: lines 19ff on page 134 of ANSI X3.159 1989, to
be exact.  (They produce something other than "1" and "-1" when
formatting 0.6 and -0.6 using the printf format "%.0f"; most often,
they produce "0" and "-0".)
d3514 2
a3515 1
=head2 Solaris 2.5
d3517 2
a3518 3
In case you are still using Solaris 2.5 (aka SunOS 5.5), you may
experience failures (the test core dumping) in lib/locale.t.
The suggested cure is to upgrade your Solaris.
d3520 1
a3520 1
=head2 Solaris x86 Fails Tests With -Duse64bitint
d3522 4
a3525 2
The following tests are known to fail in Solaris x86 with Perl
configured to use 64 bit integers:
d3527 1
a3527 2
 ext/Data/Dumper/t/dumper.............FAILED at test 268
 ext/Devel/Peek/Peek..................FAILED at test 7
d3529 1
a3529 1
=head2 SUPER-UX (NEC SX)
d3531 1
a3531 1
The following tests are known to fail on SUPER-UX:
d3533 1
a3533 11
 op/64bitint...........................FAILED tests 29-30, 32-33, 35-36
 op/arith..............................FAILED tests 128-130
 op/pack...............................FAILED tests 25-5625
 op/pow................................
 op/taint..............................# msgsnd failed
 ../ext/IO/lib/IO/t/io_poll............FAILED tests 3-4
 ../ext/IPC/SysV/ipcsysv...............FAILED tests 2, 5-6
 ../ext/IPC/SysV/t/msg.................FAILED tests 2, 4-6
 ../ext/Socket/socketpair..............FAILED tests 12
 ../lib/IPC/SysV.......................FAILED tests 2, 5-6
 ../lib/warnings.......................FAILED tests 115-116, 118-119
d3535 1
a3535 4
The op/pack failure ("Cannot compress negative numbers at op/pack.t line 126")
is serious but as of yet unsolved.  It points at some problems with the
signedness handling of the C compiler, as do the 64bitint, arith, and pow
failures.  Most of the rest point at problems with SysV IPC.
d3537 1
a3537 1
=head2 Term::ReadKey not working on Win32
d3539 1
a3539 1
Use Term::ReadKey 2.20 or later.
d3541 1
a3541 1
=head2 UNICOS/mk
d3543 1
a3543 1
=over 4
d3545 1
a3545 1
=item *
d3547 1
a3547 1
During Configure, the test
d3549 1
a3549 1
    Guessing which symbols your C compiler and preprocessor define...
d3551 1
a3551 1
will probably fail with error messages like
d3553 1
a3553 2
    CC-20 cc: ERROR File = try.c, Line = 3
      The identifier "bad" is undefined.
d3555 1
a3555 2
      bad switch yylook 79bad switch yylook 79bad switch yylook 79bad switch yylook 79#ifdef A29K
      ^
d3557 1
a3557 2
    CC-65 cc: ERROR File = try.c, Line = 3
      A semicolon is expected at this point.
d3559 5
a3563 7
This is caused by a bug in the awk utility of UNICOS/mk.  You can ignore
the error, but it does cause a slight problem: you cannot fully
benefit from the h2ph utility (see L<h2ph>) that can be used to
convert C headers to Perl libraries, mainly used to be able to access
from Perl the constants defined using C preprocessor, cpp.  Because of
the above error, parts of the converted headers will be invisible.
Luckily, these days the need for h2ph is rare.
d3565 1
a3565 1
=item *
d3567 6
a3572 5
If building Perl with interpreter threads (ithreads), the
getgrent(), getgrnam(), and getgrgid() functions cannot return the
list of the group members due to a bug in the multithreaded support of
UNICOS/mk.  What this means is that in list context the functions will
return only three values, not four.
d3574 1
a3574 1
=back
d3576 1
a3576 1
=head2 UTS
d3578 2
a3579 1
There are a few known test failures, see L<perluts> (README.uts).
d3581 4
a3584 1
=head2 VOS (Stratus)
d3586 1
a3586 3
When Perl is built using the native build process on VOS Release
14.5.0 and GNU C++/GNU Tools 2.0.1, all attempted tests either
pass or result in TODO (ignored) failures.
d3588 3
a3590 1
=head2 VMS
d3592 1
a3592 3
There should be no reported test failures with a default configuration,
though there are a number of tests marked TODO that point to areas
needing further debugging and/or porting work.
d3594 1
a3594 1
=head2 Win32
d3596 5
a3600 2
In multi-CPU boxes, there are some problems with the I/O buffering:
some output may appear twice.
d3602 1
a3602 1
=head2 XML::Parser not working
d3604 3
a3606 1
Use XML::Parser 2.31 or later.
d3608 5
a3612 1
=head2 z/OS (OS/390)
d3614 1
a3614 59
z/OS has rather many test failures but the situation is actually much
better than it was in 5.6.0; it's just that so many new modules and
tests have been added.

 Failed Test                   Stat Wstat Total Fail  Failed  List of Failed
 ---------------------------------------------------------------------------
 ../ext/Data/Dumper/t/dumper.t              357    8   2.24%  311 314 325 327
                                                              331 333 337 339
 ../ext/IO/lib/IO/t/io_unix.t                 5    4  80.00%  2-5
 ../ext/Storable/t/downgrade.t   12  3072   169   12   7.10%  14-15 46-47 78-79
                                                              110-111 150 161
 ../lib/ExtUtils/t/Constant.t   121 30976    48   48 100.00%  1-48
 ../lib/ExtUtils/t/Embed.t                    9    9 100.00%  1-9
 op/pat.t                                   922    7   0.76%  665 776 785 832-
                                                              834 845
 op/sprintf.t                               224    3   1.34%  98 100 136
 op/tr.t                                     97    5   5.15%  63 71-74
 uni/fold.t                                 780    6   0.77%  61 169 196 661
                                                              710-711

The failures in dumper.t and downgrade.t are problems in the tests,
those in io_unix and sprintf are problems in the USS (UDP sockets and
printf formats).  The pat, tr, and fold failures are genuine Perl
problems caused by EBCDIC (and in the pat and fold cases, combining
that with Unicode).  The Constant and Embed are probably problems in
the tests (since they test Perl's ability to build extensions, and
that seems to be working reasonably well.)

=head2 Unicode Support on EBCDIC Still Spotty

Though mostly working, Unicode support still has problem spots on
EBCDIC platforms.  One such known spot are the C<\p{}> and C<\P{}>
regular expression constructs for code points less than 256: the
C<pP> are testing for Unicode code points, not knowing about EBCDIC.

=head2 Seen In Perl 5.7 But Gone Now

C<Time::Piece> (previously known as C<Time::Object>) was removed
because it was felt that it didn't have enough value in it to be a
core module.  It is still a useful module, though, and is available
from the CPAN.

Perl 5.8 unfortunately does not build anymore on AmigaOS; this broke
accidentally at some point.  Since there are not that many Amiga
developers available, we could not get this fixed and tested in time
for 5.8.0.  Perl 5.6.1 still works for AmigaOS (as does the the 5.7.2
development release).

The C<PerlIO::Scalar> and C<PerlIO::Via> (capitalised) were renamed as
C<PerlIO::scalar> and C<PerlIO::via> (all lowercase) just before 5.8.0.
The main rationale was to have all core PerlIO layers to have all
lowercase names.  The "plugins" are named as usual, for example
C<PerlIO::via::QuotedPrint>.

The C<threads::shared::queue> and C<threads::shared::semaphore> were
renamed as C<Thread::Queue> and C<Thread::Semaphore> just before 5.8.0.
The main rationale was to have thread modules to obey normal naming,
C<Thread::> (the C<threads> and C<threads::shared> themselves are
more pragma-like, they affect compile-time, so they stay lowercase).
d3618 4
a3621 4
If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the perl
bug database at http://bugs.perl.org/ .  There may also be
information at http://www.perl.com/ , the Perl Home Page.
d3641 4
a3644 1
Written by Jarkko Hietaniemi <F<jhi@@iki.fi>>.
@


1.1.1.5
log
@perl 5.8.2 from CPAN
@
text
@d3 1
a3 1
perldelta - what is new for perl v5.8.2
d7 2
a8 2
This document describes differences between the 5.8.1 release and
the 5.8.2 release.
d10 3
a12 4
If you are upgrading from an earlier release such as 5.6.1, first read
the L<perl58delta>, which describes differences between 5.6.0 and
5.8.0, and the L<perl581delta>, which describes differences between
5.8.0 and 5.8.1.
d14 2803
a2816 1
=head1 Incompatible Changes
d2818 1
a2818 9
For threaded builds for modules calling certain re-entrant system calls,
binary compatibility was accidentally lost between 5.8.0 and 5.8.1.
Binary compatibility with 5.8.0 has been restored in 5.8.2, which
necessitates breaking compatibility with 5.8.1. We see this as the
lesser of two evils.

This will only affect people who have a threaded perl 5.8.1, and compiled
modules which use these calls, and now attempt to run the compiled modules
with 5.8.2. The fix is to re-compile and re-install the modules using 5.8.2.
d2820 1
a2820 1
=head1 Core Enhancements
d2822 2
a2823 1
=head2 Hash Randomisation
d2825 1
a2825 10
The hash randomisation introduced with 5.8.1 has been amended. It
transpired that although the implementation introduced in 5.8.1 was source
compatible with 5.8.0, it was not binary compatible in certain cases. 5.8.2
contains an improved implementation which is both source and binary
compatible with both 5.8.0 and 5.8.1, and remains robust against the form of
attack which prompted the change for 5.8.1.

We are grateful to the Debian project for their input in this area.
See L<perlsec/"Algorithmic Complexity Attacks"> for the original
rationale behind this change.
d2827 1
a2827 1
=head2 Threading
d2829 1
a2829 2
Several memory leaks associated with variables shared between threads
have been fixed.
d2831 1
a2831 1
=head1 Modules and Pragmata
d2833 1
a2833 1
=head2 Updated Modules And Pragmata
d2835 1
a2835 1
The following modules and pragmata have been updated since Perl 5.8.1:
d2839 60
a2898 1
=item Devel::PPPort
d2900 51
a2950 1
=item Digest::MD5
d2952 27
a2978 1
=item I18N::LangTags
d2980 2
a2981 1
=item libnet
d2983 3
a2985 1
=item MIME::Base64
d2987 1
a2987 1
=item Pod::Perldoc
d2989 1
a2989 1
=item strict
d2991 1
a2991 1
Documentation improved
d2993 2
a2994 1
=item Tie::Hash
d2996 1
a2996 1
Documentation improved
d2998 3
a3000 1
=item Time::HiRes
d3002 1
a3002 1
=item Unicode::Collate
d3004 1
a3004 1
=item Unicode::Normalize
d3006 1
a3006 1
=item UNIVERSAL
d3008 2
a3009 1
Documentation improved
d3013 80
a3092 1
=head1 Selected Bug Fixes
d3094 1
a3094 2
Some syntax errors involving unrecognized filetest operators are now handled
correctly by the parser.
d3096 1
a3096 1
=head1 Changed Internals
d3098 207
a3304 3
Interpreter initialization is more complete when -DMULTIPLICITY is off.
This should resolve problems with initializing and destroying the Perl
interpreter more than once in a single process.                      
d3308 62
a3369 2
Dynamic linker flags have been tweaked for Solaris and OS X, which should
solve problems seen while building some XS modules.
d3371 6
a3376 1
Bugs in OS/2 sockets and tmpfile have been fixed.
d3378 1
a3378 2
In OS X C<setreuid> and friends are troublesome - perl will now work
around their problems as best possible.
d3380 1
a3380 1
=head1 Future Directions
d3382 201
a3582 7
Starting with 5.8.3 we intend to make more frequent maintenance releases,
with a smaller number of changes in each. The intent is to propagate
bug fixes out to stable releases more rapidly and make upgrading stable
releases less of an upheaval. This should give end users more
flexibility in their choice of upgrade timing, and allow them easier
assessment of the impact of upgrades. The current plan is for code freezes
as follows
d3588 3
a3590 1
5.8.3 23:59:59 GMT, Wednesday December 31st 2003
d3592 10
a3601 1
=item *
d3603 7
a3609 1
5.8.4 23:59:59 GMT, Wednesday March 31st 2004
d3613 5
a3617 1
5.8.5 23:59:59 GMT, Wednesday June 30th 2004
d3621 1
a3621 1
with the release following soon after, when testing is complete.
d3623 84
a3706 1
See L<perl581delta/"Future Directions"> for more soothsaying.
d3712 2
a3713 2
bug database at http://bugs.perl.org/.  There may also be
information at http://www.perl.com/, the Perl Home Page.
d3719 1
a3719 2
analysed by the Perl porting team.  You can browse and search
the Perl 5 bugs at http://bugs.perl.org/
d3730 4
@


1.1.1.6
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@a0 2
=encoding utf8

d3 1
a3 1
perldelta - what is new for perl v5.16.3
d7 9
a15 2
This document describes differences between the 5.16.2 release and
the 5.16.3 release.
d17 9
a25 3
If you are upgrading from an earlier release such as 5.16.1, first read
L<perl5162delta>, which describes differences between 5.16.1 and
5.16.2.
d29 31
a59 1
No changes since 5.16.0.
d61 1
a61 1
=head1 Security
d63 1
a63 3
This release contains one major and a number of minor security fixes.
These latter are included mainly to allow the test suite to pass cleanly
with the clang compiler's address sanitizer facility.
d65 1
a65 1
=head2 CVE-2013-1667: memory exhaustion with arbitrary hash keys
d67 1
a67 3
With a carefully crafted set of hash keys (for example arguments on a
URL), it is possible to cause a hash to consume a large amount of memory
and CPU, and thus possibly to achieve a Denial-of-Service.
d69 1
a69 1
This problem has been fixed.
d71 1
a71 1
=head2 wrap-around with IO on long strings
d73 1
a73 2
Reading or writing strings greater than 2**31 bytes in size could segfault
due to integer wraparound.
d75 1
a75 1
This problem has been fixed.
d77 1
a77 1
=head2 memory leak in Encode
d79 1
a79 2
The UTF-8 encoding implementation in Encode.xs had a memory leak which has been
fixed.
d81 1
a81 1
=head1 Incompatible Changes
d83 1
a83 2
There are no changes intentionally incompatible with 5.16.0. If any
exist, they are bugs and reports are welcome.
d85 1
a85 1
=head1 Deprecations
d87 1
a87 1
There have been no deprecations since 5.16.0.
d89 2
a90 1
=head1 Modules and Pragmata
d92 1
a92 1
=head2 Updated Modules and Pragmata
d94 3
a96 1
=over 4
d98 1
a98 1
=item *
d100 2
a101 1
L<Encode> has been upgraded from version 2.44 to version 2.44_01.
d103 1
a103 1
=item *
d105 2
a106 1
L<Module::CoreList> has been upgraded from version 2.76 to version 2.76_02.
d108 1
a108 1
=item *
d110 7
a116 1
L<XS::APItest> has been upgraded from version 0.38 to version 0.39.
d118 1
a118 1
=back
d120 1
a120 1
=head1 Known Problems
d122 1
a122 1
None.
d124 1
a124 1
=head1 Acknowledgements
d126 1
a126 2
Perl 5.16.3 represents approximately 4 months of development since Perl 5.16.2
and contains approximately 870 lines of changes across 39 files from 7 authors.
d128 1
a128 3
Perl continues to flourish into its third decade thanks to a vibrant community
of users and developers. The following people are known to have contributed the
improvements that became Perl 5.16.3:
d130 1
a130 2
Andy Dougherty, Chris 'BinGOs' Williams, Dave Rolsky, David Mitchell, Michael
Schroeder, Ricardo Signes, Yves Orton.
d132 3
a134 4
The list above is almost certainly incomplete as it is automatically generated
from version control history. In particular, it does not include the names of
the (very much appreciated) contributors who reported issues to the Perl bug
tracker.
d136 1
a136 2
For a more complete list of all of Perl's historical contributors, please see
the F<AUTHORS> file in the Perl source distribution.
d142 2
a143 2
bug database at http://rt.perl.org/perlbug/ .  There may also be
information at http://www.perl.org/ , the Perl Home Page.
d145 1
a145 1
If you believe you have an unreported bug, please run the L<perlbug>
d149 2
a150 11
analysed by the Perl porting team.

If the bug you are reporting has security implications, which make it
inappropriate to send to a publicly archived mailing list, then please
send it to perl5-security-report@@perl.org. This points to a closed
subscription unarchived mailing list, which includes all the core
committers, who will be able to help assess the impact of issues, figure
out a resolution, and help co-ordinate the release of patches to
mitigate or fix the problem across all platforms on which Perl is
supported. Please only use this address for security issues in the Perl
core, not for modules independently distributed on CPAN.
d154 1
a154 2
The F<Changes> file for an explanation of how to view exhaustive details
on what changed.
@


1.1.1.7
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d5 1
a5 1
perldelta - what is new for perl v5.18.2
d9 2
a10 2
This document describes differences between the 5.18.1 release and the 5.18.2
release.
d12 3
a14 2
If you are upgrading from an earlier release such as 5.18.0, first read
L<perl5181delta>, which describes differences between 5.18.0 and 5.18.1.
d16 1
a16 1
=head1 Modules and Pragmata
d18 1
a18 1
=head2 Updated Modules and Pragmata
d20 1
a20 1
=over 4
d22 3
a24 1
=item *
d26 1
a26 1
L<B> has been upgraded from version 1.42_01 to 1.42_02.
d28 3
a30 4
The fix for [perl #118525] introduced a regression in the behaviour of
C<B::CV::GV>, changing the return value from a C<B::SPECIAL> object on
a C<NULL> C<CvGV> to C<undef>.  C<B::CV::GV> again returns a
C<B::SPECIAL> object in this case.  [perl #119413]
d32 1
a32 1
=item *
d34 1
a34 1
L<B::Concise> has been upgraded from version 0.95 to 0.95_01.
d36 2
a37 1
This fixes a bug in dumping unexpected SEPCIALs.
d39 1
a39 1
=item *
d41 1
a41 2
L<English> has been upgraded from version 1.06 to 1.06_01.  This fixes an
error about the performance of C<$`>, C<$&>, and c<$'>.
d43 2
a44 1
=item *
d46 1
a46 1
L<File::Glob> has been upgraded from version 1.20 to 1.20_01.
d48 2
a49 1
=back
d51 1
a51 1
=head1 Documentation
d53 1
a53 1
=head2 Changes to Existing Documentation
d55 1
a55 1
=over 4
d57 1
a57 11
=item *

L<perlrepository> has been restored with a pointer to more useful pages.

=item *

L<perlhack> has been updated with the latest changes from blead.

=back

=head1 Selected Bug Fixes
d63 1
a63 3
Perl 5.18.1 introduced a regression along with a bugfix for lexical subs.
Some B::SPECIAL results from B::CV::GV became undefs instead.  This broke
Devel::Cover among other libraries.  This has been fixed.  [perl #119351]
d67 1
a67 3
Perl 5.18.0 introduced a regression whereby C<[:^ascii:]>, if used in the same
character class as other qualifiers, would fail to match characters in the
Latin-1 block.  This has been fixed.  [perl #120799]
d71 1
a71 3
Perl 5.18.0 introduced a regression when using ->SUPER::method with AUTOLOAD
by looking up AUTOLOAD from the current package, rather than the current
package’s superclass.  This has been fixed. [perl #120694]
d73 1
a73 1
=item *
d75 1
a75 3
Perl 5.18.0 introduced a regression whereby C<-bareword> was no longer
permitted under the C<strict> and C<integer> pragmata when used together.  This
has been fixed.  [perl #120288]
d77 1
a77 1
=item *
d79 1
a79 9
Previously PerlIOBase_dup didn't check if pushing the new layer succeeded
before (optionally) setting the utf8 flag. This could cause
segfaults-by-nullpointer.  This has been fixed.

=item *

A buffer overflow with very long identifiers has been fixed.

=item *
d81 2
a82 16
A regression from 5.16 in the handling of padranges led to assertion failures
if a keyword plugin declined to handle the second ‘my’, but only after creating
a padop.

This affected, at least, Devel::CallParser under threaded builds.

This has been fixed

=item *

The construct C<< $r=qr/.../; /$r/p >> is now handled properly, an issue which
had been worsened by changes 5.18.0. [perl #118213]

=back

=head1 Acknowledgements
d84 11
a94 18
Perl 5.18.2 represents approximately 3 months of development since Perl
5.18.1 and contains approximately 980 lines of changes across 39 files from 4
authors.

Perl continues to flourish into its third decade thanks to a vibrant
community of users and developers. The following people are known to have
contributed the improvements that became Perl 5.18.2:

Craig A. Berry, David Mitchell, Ricardo Signes, Tony Cook.

The list above is almost certainly incomplete as it is automatically
generated from version control history. In particular, it does not include
the names of the (very much appreciated) contributors who reported issues to
the Perl bug tracker.

Many of the changes included in this version originated in the CPAN modules
included in Perl's core. We're grateful to the entire CPAN community for
helping Perl to flourish.
d101 10
a110 9
If you find what you think is a bug, you might check the articles recently
posted to the comp.lang.perl.misc newsgroup and the perl bug database at
http://rt.perl.org/perlbug/ .  There may also be information at
http://www.perl.org/ , the Perl Home Page.

If you believe you have an unreported bug, please run the L<perlbug> program
included with your release.  Be sure to trim your bug down to a tiny but
sufficient test case.  Your bug report, along with the output of C<perl -V>,
will be sent off to perlbug@@perl.org to be analysed by the Perl porting team.
d113 8
a120 8
inappropriate to send to a publicly archived mailing list, then please send it
to perl5-security-report@@perl.org.  This points to a closed subscription
unarchived mailing list, which includes all the core committers, who will be
able to help assess the impact of issues, figure out a resolution, and help
co-ordinate the release of patches to mitigate or fix the problem across all
platforms on which Perl is supported.  Please only use this address for
security issues in the Perl core, not for modules independently distributed on
CPAN.
d124 2
a125 2
The F<Changes> file for an explanation of how to view exhaustive details on
what changed.
@


1.1.1.8
log
@Import perl-5.20.1
@
text
@d5 1
a5 1
perldelta - what is new for perl v5.20.1
d9 1
a9 1
This document describes differences between the 5.20.0 release and the 5.20.1
d13 1
a13 26
L<perl5200delta>, which describes differences between 5.18.0 and 5.20.0.

=head1 Incompatible Changes

There are no changes intentionally incompatible with 5.20.0.  If any exist,
they are bugs, and we request that you submit a report.  See L</Reporting Bugs>
below.

=head1 Performance Enhancements

=over 4

=item *

An optimization to avoid problems with COW and deliberately overallocated PVs
has been disabled because it interfered with another, more important,
optimization, causing a slowdown on some platforms.
L<[perl #121975]|https://rt.perl.org/Ticket/Display.html?id=121975>

=item *

Returning a string from a lexical variable could be slow in some cases.  This
has now been fixed.
L<[perl #121977]|https://rt.perl.org/Ticket/Display.html?id=121977>

=back
d23 1
a23 40
L<Config::Perl::V> has been upgraded from version 0.20 to 0.22.

The list of Perl versions covered has been updated and some flaws in the
parsing have been fixed.

=item *

L<Exporter> has been upgraded from version 5.70 to 5.71.

Illegal POD syntax in the documentation has been corrected.

=item *

L<ExtUtils::CBuilder> has been upgraded from version 0.280216 to 0.280217.

Android builds now link to both B<-lperl> and C<$Config::Config{perllibs}>.

=item *

L<File::Copy> has been upgraded from version 2.29 to 2.30.

The documentation now notes that C<copy> will not overwrite read-only files.

=item *

L<Module::CoreList> has been upgraded from version 3.11 to 5.020001.

The list of Perl versions covered has been updated.

=item *

The PathTools module collection has been upgraded from version 3.47 to 3.48.

Fallbacks are now in place when cross-compiling for Android and
C<$Config::Config{sh}> is not yet defined.
L<[perl #121963]|https://rt.perl.org/Ticket/Display.html?id=121963>

=item *

L<PerlIO::via> has been upgraded from version 0.14 to 0.15.
d25 4
a28 1
A minor portability improvement has been made to the XS implementation.
d32 1
a32 1
L<Unicode::UCD> has been upgraded from version 0.57 to 0.58.
d34 1
a34 1
The documentation includes many clarifications and fixes.
d38 2
a39 3
L<utf8> has been upgraded from version 1.13 to 1.13_01.

The documentation has some minor formatting improvements.
d43 1
a43 7
L<version> has been upgraded from version 0.9908 to 0.9909.

External libraries and Perl may have different ideas of what the locale is.
This is problematic when parsing version strings if the locale's numeric
separator has been changed.  Version parsing has been patched to ensure it
handles the locales correctly.
L<[perl #121930]|https://rt.perl.org/Ticket/Display.html?id=121930>
a50 2
=head3 L<perlapi>

d55 1
a55 13
C<av_len> - Emphasize that this returns the highest index in the array, not the
size of the array.
L<[perl #120386]|https://rt.perl.org/Ticket/Display.html?id=120386>

=item *

Note that C<SvSetSV> doesn't do set magic.

=item *

C<sv_usepvn_flags> - Fix documentation to mention the use of C<NewX> instead of
C<malloc>.
L<[perl #121869]|https://rt.perl.org/Ticket/Display.html?id=121869>
d59 1
a59 1
Clarify where C<NUL> may be embedded or is required to terminate a string.
d63 1
a63 1
=head3 L<perlfunc>
d69 3
a71 1
Clarify the meaning of C<-B> and C<-T>.
d75 3
a77 3
C<-l> now notes that it will return false if symlinks aren't supported by the
file system.
L<[perl #121523]|https://rt.perl.org/Ticket/Display.html?id=121523>
d81 3
a83 3
Note that C<each>, C<keys> and C<values> may produce different orderings for
tied hashes compared to other perl hashes.
L<[perl #121404]|https://rt.perl.org/Ticket/Display.html?id=121404>
d87 3
a89 4
Note that C<exec LIST> and C<system LIST> may fall back to the shell on Win32.
Only C<exec PROGRAM LIST> and C<system PROGRAM LIST> indirect object syntax
will reliably avoid using the shell.  This has also been noted in L<perlport>.
L<[perl #122046]|https://rt.perl.org/Ticket/Display.html?id=122046>
d93 3
a95 8
Clarify the meaning of C<our>.
L<[perl #122132]|https://rt.perl.org/Ticket/Display.html?id=122132>

=back

=head3 L<perlguts>

=over 4
d99 1
a99 8
Explain various ways of modifying an existing SV's buffer.
L<[perl #116925]|https://rt.perl.org/Ticket/Display.html?id=116925>

=back

=head3 L<perlpolicy>

=over 4
d103 3
a105 2
We now have a code of conduct for the I<< p5p >> mailing list, as documented in
L<< perlpolicy/STANDARDS OF CONDUCT >>.
d107 1
a107 1
=back
d109 1
a109 3
=head3 L<perlre>

=over 4
d113 2
a114 133
The C</x> modifier has been clarified to note that comments cannot be continued
onto the next line by escaping them.

=back

=head3 L<perlsyn>

=over 4

=item *

Mention the use of empty conditionals in C<for>/C<while> loops for infinite
loops.

=back

=head3 L<perlxs>

=over 4

=item *

Added a discussion of locale issues in XS code.

=back

=head1 Diagnostics

The following additions or changes have been made to diagnostic output,
including warnings and fatal error messages.  For the complete list of
diagnostic messages, see L<perldiag>.

=head2 Changes to Existing Diagnostics

=over 4

=item *

L<Variable length lookbehind not implemented in regex mE<sol>%sE<sol>|perldiag/"Variable length lookbehind not implemented in regex m/%s/">

Information about Unicode behaviour has been added.

=back

=head1 Configuration and Compilation

=over 4

=item *

Building Perl no longer writes to the source tree when configured with
F<Configure>'s B<-Dmksymlinks> option.
L<[perl #121585]|https://rt.perl.org/Ticket/Display.html?id=121585>

=back

=head1 Platform Support

=head2 Platform-Specific Notes

=over 4

=item Android

Build support has been improved for cross-compiling in general and for Android
in particular.

=item OpenBSD

Corrected architectures and version numbers used in configuration hints when
building Perl.

=item Solaris

B<c99> options have been cleaned up, hints look for B<solstudio> as well as
B<SUNWspro>, and support for native C<setenv> has been added.

=item VMS

An old bug in feature checking, mainly affecting pre-7.3 systems, has been
fixed.

=item Windows

C<%I64d> is now being used instead of C<%lld> for MinGW.

=back

=head1 Internal Changes

=over 4

=item *

Added L<perlapi/sync_locale>.
Changing the program's locale should be avoided by XS code.  Nevertheless,
certain non-Perl libraries called from XS, such as C<Gtk> do so.  When this
happens, Perl needs to be told that the locale has changed.  Use this function
to do so, before returning to Perl.

=back

=head1 Selected Bug Fixes

=over 4

=item *

A bug has been fixed where zero-length assertions and code blocks inside of a
regex could cause C<pos> to see an incorrect value.
L<[perl #122460]|https://rt.perl.org/Ticket/Display.html?id=122460>

=item *

Using C<s///e> on tainted utf8 strings could issue bogus "Malformed UTF-8
character (unexpected end of string)" warnings.  This has now been fixed.
L<[perl #122148]|https://rt.perl.org/Ticket/Display.html?id=122148>

=item *

C<system> and friends should now work properly on more Android builds.

Due to an oversight, the value specified through B<-Dtargetsh> to F<Configure>
would end up being ignored by some of the build process.  This caused perls
cross-compiled for Android to end up with defective versions of C<system>,
C<exec> and backticks: the commands would end up looking for F</bin/sh> instead
of F</system/bin/sh>, and so would fail for the vast majority of devices,
leaving C<$!> as C<ENOENT>.

=item *

Many issues have been detected by L<Coverity|http://www.coverity.com/> and 
fixed.
d120 2
a121 2
Perl 5.20.1 represents approximately 4 months of development since Perl 5.20.0
and contains approximately 12,000 lines of changes across 170 files from 36
d124 10
a133 20
Excluding auto-generated files, documentation and release tools, there were
approximately 2,600 lines of changes to 110 .pm, .t, .c and .h files.

Perl continues to flourish into its third decade thanks to a vibrant community
of users and developers.  The following people are known to have contributed
the improvements that became Perl 5.20.1:

Aaron Crane, Abigail, Alberto Simões, Alexandr Ciornii, Alexandre (Midnite)
Jousset, Andrew Fresh, Andy Dougherty, Brian Fraser, Chris 'BinGOs' Williams,
Craig A. Berry, Daniel Dragan, David Golden, David Mitchell, H.Merijn Brand,
James E Keenan, Jan Dubois, Jarkko Hietaniemi, John Peacock, kafka, Karen
Etheridge, Karl Williamson, Lukas Mai, Matthew Horsfall, Michael Bunk, Peter
Martini, Rafael Garcia-Suarez, Reini Urban, Ricardo Signes, Shirakata Kentaro,
Smylers, Steve Hay, Thomas Sibley, Todd Rinaldo, Tony Cook, Vladimir Marek,
Yves Orton.

The list above is almost certainly incomplete as it is automatically generated
from version control history.  In particular, it does not include the names of
the (very much appreciated) contributors who reported issues to the Perl bug
tracker.
d136 1
a136 1
included in Perl's core.  We're grateful to the entire CPAN community for
d146 2
a147 2
https://rt.perl.org/ .  There may also be information at http://www.perl.org/ ,
the Perl Home Page.
@


1.1.1.9
log
@Import perl-5.20.2
@
text
@d5 1
a5 1
perldelta - what is new for perl v5.20.2
d9 1
a9 1
This document describes differences between the 5.20.1 release and the 5.20.2
d12 2
a13 2
If you are upgrading from an earlier release such as 5.20.0, first read
L<perl5201delta>, which describes differences between 5.20.0 and 5.20.1.
d17 1
a17 1
There are no changes intentionally incompatible with 5.20.1.  If any exist,
d21 3
a23 1
=head1 Modules and Pragmata
d25 1
a25 1
=head2 Updated Modules and Pragmata
d27 4
a30 1
=over 4
d34 3
a36 1
L<attributes> has been upgraded from version 0.22 to 0.23.
d38 7
a44 2
The usage of C<memEQs> in the XS has been corrected.
L<[perl #122701]|https://rt.perl.org/Ticket/Display.html?id=122701>
d48 1
a48 1
L<Data::Dumper> has been upgraded from version 2.151 to 2.151_01.
d50 2
a51 2
Fixes CVE-2014-4330 by adding a configuration variable/option to limit
recursion when dumping deep data structures.
d55 1
a55 1
L<Errno> has been upgraded from version 1.20_03 to 1.20_05.
d57 1
a57 2
Warnings when building the XS on Windows with the Visual C++ compiler are now
avoided.
d61 1
a61 1
L<feature> has been upgraded from version 1.36 to 1.36_01.
d63 1
a63 3
The C<postderef> feature has now been documented.  This feature was actually
added in Perl 5.20.0 but was accidentally omitted from the feature
documentation until now.
d67 1
a67 1
L<IO::Socket> has been upgraded from version 1.37 to 1.38.
d69 1
a69 2
Document the limitations of the connected() method.
L<[perl #123096]|https://rt.perl.org/Ticket/Display.html?id=123096>
d73 1
a73 1
L<Module::CoreList> has been upgraded from version 5.020001 to 5.20150214.
d79 1
a79 1
PathTools has been upgraded from version 3.48 to 3.48_01.
d81 3
a83 1
A warning from the B<gcc> compiler is now avoided when building the XS.
d87 1
a87 8
L<PerlIO::scalar> has been upgraded from version 0.18 to 0.18_01.

Reading from a position well past the end of the scalar now correctly returns
end of file.
L<[perl #123443]|https://rt.perl.org/Ticket/Display.html?id=123443>

Seeking to a negative position still fails, but no longer leaves the file
position set to a negation location.
d89 1
a89 2
C<eof()> on a C<PerlIO::scalar> handle now properly returns true when the file
position is past the 2GB mark on 32-bit systems.
d93 1
a93 1
L<Storable> has been upgraded from version 2.49 to 2.49_01.
d95 1
a95 1
Minor grammatical change to the documentation only.
d99 1
a99 1
L<VMS::DCLsym> has been upgraded from version 1.05 to 1.05_01.
d101 1
a101 1
Minor formatting change to the documentation only.
d105 1
a105 1
L<VMS::Stdio> has been upgraded from version 2.4 to 2.41.
d107 5
a111 1
Minor formatting change to the documentation only.
a116 7
=head2 New Documentation

=head3 L<perlunicook>

This document, by Tom Christiansen, provides examples of handling Unicode in
Perl.

d119 1
a119 1
=head3 L<perlexperiment>
d125 3
a127 3
Added reference to subroutine signatures.  This feature was actually added in
Perl 5.20.0 but was accidentally omitted from the experimental feature
documentation until now.
d129 3
a131 1
=back
d133 1
a133 1
=head3 L<perlpolicy>
d135 3
a137 1
=over 4
d141 1
a141 2
The process whereby features may graduate from experimental status has now been
formally documented.
d145 1
a145 1
=head3 L<perlsyn>
d151 1
a151 2
An ambiguity in the documentation of the ellipsis statement has been corrected.
L<[perl #122661]|https://rt.perl.org/Ticket/Display.html?id=122661>
d153 1
a153 1
=back
d155 3
a157 1
=head1 Diagnostics
d159 1
a159 3
The following additions or changes have been made to diagnostic output,
including warnings and fatal error messages.  For the complete list of
diagnostic messages, see L<perldiag>.
d161 3
a163 3
=head2 Changes to Existing Diagnostics

=over 4
d167 4
a170 2
L<Bad symbol for scalar|perldiag/"Bad symbol for scalar"> is now documented.
This error is not new, but was not previously documented here.
d174 2
a175 2
L<Missing right brace on \N{}|perldiag/"Missing right brace on \N{}"> is now
documented.  This error is not new, but was not previously documented here.
d179 1
a179 1
=head1 Testing
d185 2
a186 3
The test script F<re/rt122747.t> has been added to verify that
L<perl #122747|https://rt.perl.org/Ticket/Display.html?id=122747> remains
fixed.
d190 5
a194 1
=head1 Platform Support
d196 2
a197 1
=head2 Regained Platforms
d199 1
a199 2
IRIX and Tru64 platforms are working again.  (Some C<make test> failures
remain.)
d201 1
a201 1
=head1 Selected Bug Fixes
d207 4
a210 4
AIX now sets the length in C<< getsockopt >> correctly.
L<[perl #120835]|https://rt.perl.org/Ticket/Display.html?id=120835>,
L<[cpan #91183]|https://rt.cpan.org/Ticket/Display.html?id=91183>,
L<[cpan #85570]|https://rt.cpan.org/Ticket/Display.html?id=85570>
d212 1
a212 1
=item *
d214 1
a214 4
In Perl 5.20.0, C<$^N> accidentally had the internal UTF8 flag turned off if
accessed from a code block within a regular expression, effectively
UTF8-encoding the value.  This has been fixed.
L<[perl #123135]|https://rt.perl.org/Ticket/Display.html?id=123135>
d218 2
a219 2
Various cases where the name of a sub is used (autoload, overloading, error
messages) used to crash for lexical subs, but have been fixed.
d221 3
a223 1
=item *
d225 1
a225 3
An assertion failure when parsing C<sort> with debugging enabled has been
fixed.
L<[perl #122771]|https://rt.perl.org/Ticket/Display.html?id=122771>
d229 1
a229 4
Loading UTF8 tables during a regular expression match could cause assertion
failures under debugging builds if the previous match used the very same
regular expression.
L<[perl #122747]|https://rt.perl.org/Ticket/Display.html?id=122747>
d231 1
a231 1
=item *
d233 1
a233 6
Due to a mistake in the string-copying logic, copying the value of a state
variable could instead steal the value and undefine the variable.  This bug,
introduced in Perl 5.20, would happen mostly for long strings (1250 chars or
more), but could happen for any strings under builds with copy-on-write
disabled.
L<[perl #123029]|https://rt.perl.org/Ticket/Display.html?id=123029>
d235 5
a239 1
=item *
d241 1
a241 3
Fixed a bug that could cause perl to execute an infinite loop during
compilation.
L<[perl #122995]|https://rt.perl.org/Ticket/Display.html?id=122995>
d245 1
a245 4
On Win32, restoring in a child pseudo-process a variable that was C<local()>ed
in a parent pseudo-process before the C<fork> happened caused memory corruption
and a crash in the child pseudo-process (and therefore OS process).
L<[perl #40565]|https://rt.perl.org/Ticket/Display.html?id=40565>
d247 1
a247 1
=item *
d249 1
a249 3
Tainted constants evaluated at compile time no longer cause unrelated
statements to become tainted.
L<[perl #122669]|https://rt.perl.org/Ticket/Display.html?id=122669>
d251 1
a251 1
=item *
d253 1
a253 4
Calling C<write> on a format with a C<^**> field could produce a panic in
sv_chop() if there were insufficient arguments or if the variable used to fill
the field was empty.
L<[perl #123245]|https://rt.perl.org/Ticket/Display.html?id=123245>
d257 3
a259 5
In Perl 5.20.0, C<sort CORE::fake> where 'fake' is anything other than a
keyword started chopping of the last 6 characters and treating the result as a
sort sub name.  The previous behaviour of treating "CORE::fake" as a sort sub
name has been restored.
L<[perl #123410]|https://rt.perl.org/Ticket/Display.html?id=123410>
d261 1
a261 1
=item *
d263 1
a263 6
A bug in regular expression patterns that could lead to segfaults and other
crashes has been fixed.  This occurred only in patterns compiled with C<"/i">,
while taking into account the current POSIX locale (this usually means they
have to be compiled within the scope of C<S<"use locale">>), and there must be
a string of at least 128 consecutive bytes to match.
L<[perl #123539]|https://rt.perl.org/Ticket/Display.html?id=123539>
d265 1
a265 1
=item *
d267 1
a267 2
C<qr/@@array(?{block})/> no longer dies with "Bizarre copy of ARRAY".
L<[perl #123344]|https://rt.perl.org/Ticket/Display.html?id=123344>
d269 1
a269 1
=item *
d271 2
a272 2
C<gmtime> no longer crashes with not-a-number values.
L<[perl #123495]|https://rt.perl.org/Ticket/Display.html?id=123495>
d274 1
a274 1
=item *
d276 2
a277 4
Certain syntax errors in substitutions, such as C<< s/${<>{})// >>, would
crash, and had done so since Perl 5.10.  (In some cases the crash did not start
happening until Perl 5.16.)  The crash has, of course, been fixed.
L<[perl #123542]|https://rt.perl.org/Ticket/Display.html?id=123542>
d279 1
a279 1
=item *
d281 2
a282 3
A memory leak in some regular expressions, introduced in Perl 5.20.1, has been
fixed.
L<[perl #123198]|https://rt.perl.org/Ticket/Display.html?id=123198>
d284 1
a284 1
=item *
d286 1
a286 3
C<< formline("@@...", "a"); >> would crash.  The C<FF_CHECKNL> case in
pp_formline() didn't set the pointer used to mark the chop position, which led
to the C<FF_MORE> case crashing with a segmentation fault.  This has been
a287 2
L<[perl #123538]|https://rt.perl.org/Ticket/Display.html?id=123538>
L<[perl #123622]|https://rt.perl.org/Ticket/Display.html?id=123622>
d289 1
a289 1
=item *
d291 1
a291 3
A possible buffer overrun and crash when parsing a literal pattern during
regular expression compilation has been fixed.
L<[perl #123604]|https://rt.perl.org/Ticket/Display.html?id=123604>
d295 1
a295 1
=head1 Known Problems
d301 5
a305 2
It is a known bug that lexical subroutines cannot be used as the C<SUBNAME>
argument to C<sort>.  This will be fixed in a future version of Perl.
d309 1
a309 1
=head1 Errata From Previous Releases
d315 25
a339 5
A regression has been fixed that was introduced in Perl 5.20.0 (fixed in Perl
5.20.1 as well as here) in which a UTF-8 encoded regular expression pattern
that contains a single ASCII lowercase letter does not match its uppercase
counterpart.
L<[perl #122655]|https://rt.perl.org/Ticket/Display.html?id=122655>
d345 2
a346 2
Perl 5.20.2 represents approximately 5 months of development since Perl 5.20.1
and contains approximately 6,300 lines of changes across 170 files from 34
d350 1
a350 1
approximately 1,900 lines of changes to 80 .pm, .t, .c and .h files.
d354 1
a354 1
the improvements that became Perl 5.20.2:
d356 8
a363 8
Aaron Crane, Abigail, Andreas Voegele, Andy Dougherty, Anthony Heading,
Aristotle Pagaltzis, Chris 'BinGOs' Williams, Craig A. Berry, Daniel Dragan,
Doug Bell, Ed J, Father Chrysostomos, Glenn D. Golden, H.Merijn Brand, Hugo van
der Sanden, James E Keenan, Jarkko Hietaniemi, Jim Cromie, Karen Etheridge,
Karl Williamson, kmx, Matthew Horsfall, Max Maischein, Peter Martini, Rafael
Garcia-Suarez, Ricardo Signes, Shlomi Fish, Slaven Rezic, Steffen Müller,
Steve Hay, Tadeusz Sośnierz, Tony Cook, Yves Orton, Ævar Arnfjörð
Bjarmason.
@


1.1.1.10
log
@Import perl-5.24.2
@
text
@d5 1
a5 1
perldelta - what is new for perl v5.24.2
d9 1
a9 1
This document describes differences between the 5.24.1 release and the 5.24.2
d12 2
a13 2
If you are upgrading from an earlier release such as 5.24.0, first read
L<perl5241delta>, which describes differences between 5.24.0 and 5.24.1.
d15 1
a15 1
=head1 Security
d17 3
a19 16
=head2 Improved handling of '.' in @@INC in base.pm

The handling of (the removal of) C<'.'> in C<@@INC> in L<base> has been
improved.  This resolves some problematic behaviour in the approach taken in
Perl 5.24.1, which is probably best described in the following two threads on
the Perl 5 Porters mailing list:
L<http://www.nntp.perl.org/group/perl.perl5.porters/2016/08/msg238991.html>,
L<http://www.nntp.perl.org/group/perl.perl5.porters/2016/10/msg240297.html>.

=head2 "Escaped" colons and relative paths in PATH

On Unix systems, Perl treats any relative paths in the PATH environment
variable as tainted when starting a new process.  Previously, it was allowing a
backslash to escape a colon (unlike the OS), consequently allowing relative
paths to be considered safe if the PATH was set to something like C</\:.>.  The
check has been fixed to treat C<.> as tainted in that example.
d29 11
a39 1
L<base> has been upgraded from version 2.23 to 2.23_01.
d43 63
a105 1
L<Module::CoreList> has been upgraded from version 5.20170114_24 to 5.20170715_24.
d109 86
d201 144
a344 3
Fixed a crash with C<s///l> where it thought it was dealing with UTF-8 when it
wasn't.
L<[perl #129038]|https://rt.perl.org/Ticket/Display.html?id=129038>
d350 2
a351 2
Perl 5.24.2 represents approximately 6 months of development since Perl 5.24.1
and contains approximately 2,500 lines of changes across 53 files from 18
d355 1
a355 1
approximately 960 lines of changes to 17 .pm, .t, .c and .h files.
d359 1
a359 1
the improvements that became Perl 5.24.2:
d361 8
a368 4
Aaron Crane, Abigail, Aristotle Pagaltzis, Chris 'BinGOs' Williams, Dan
Collins, David Mitchell, Eric Herman, Father Chrysostomos, James E Keenan, Karl
Williamson, Lukas Mai, Renee Baecker, Ricardo Signes, Sawyer X, Stevan Little,
Steve Hay, Tony Cook, Yves Orton.
d386 2
a387 2
L<https://rt.perl.org/> .  There may also be information at
L<http://www.perl.org/> , the Perl Home Page.
d394 9
a402 4
If the bug you are reporting has security implications which make it
inappropriate to send to a publicly archived mailing list, then see
L<perlsec/SECURITY VULNERABILITY CONTACT INFORMATION>
for details of how to report the issue.
@


