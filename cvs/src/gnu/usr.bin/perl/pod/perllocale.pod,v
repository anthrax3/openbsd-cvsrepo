head	1.13;
access;
symbols
	OPENBSD_6_2:1.13.0.6
	OPENBSD_6_2_BASE:1.13
	PERL_5_24_2:1.1.1.12
	OPENBSD_6_1:1.13.0.4
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.12.0.8
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.2
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.12.0.4
	OPENBSD_5_8_BASE:1.12
	PERL_5_20_2:1.1.1.11
	OPENBSD_5_7:1.11.0.2
	OPENBSD_5_7_BASE:1.11
	PERL_5_20_1:1.1.1.10
	OPENBSD_5_6:1.10.0.4
	OPENBSD_5_6_BASE:1.10
	PERL_5_18_2:1.1.1.9
	PERL:1.1.1
	OPENBSD_5_5:1.9.0.6
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.2
	OPENBSD_5_4_BASE:1.9
	PERL_5_16_3:1.1.1.8
	OPENBSD_5_3:1.8.0.10
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.8
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.6
	OPENBSD_5_0:1.8.0.4
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.2
	OPENBSD_4_9_BASE:1.8
	PERL_5_12_2:1.1.1.7
	OPENBSD_4_8:1.7.0.8
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.4
	OPENBSD_4_7_BASE:1.7
	PERL_5_10_1:1.1.1.6
	OPENBSD_4_6:1.7.0.6
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.2
	OPENBSD_4_5_BASE:1.7
	PERL_5_10_0:1.1.1.6
	OPENBSD_4_4:1.6.0.10
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.8
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.6
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.4
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.2
	OPENBSD_4_0_BASE:1.6
	PERL_5_8_8:1.1.1.5
	OPENBSD_3_9:1.5.0.14
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.12
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.10
	OPENBSD_3_7_BASE:1.5
	PERL_5_8_6:1.1.1.4
	OPENBSD_3_6:1.5.0.8
	OPENBSD_3_6_BASE:1.5
	PERL_5_8_5:1.1.1.4
	PERL_5_8_3:1.1.1.4
	OPENBSD_3_5:1.5.0.6
	OPENBSD_3_5_BASE:1.5
	PERL_5_8_2:1.1.1.4
	OPENBSD_3_4:1.5.0.4
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.5.0.2
	OPENBSD_3_3_BASE:1.5
	PERL_5_8_0:1.1.1.4
	OPENBSD_3_2:1.4.0.6
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.4
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4
	PERL_5_6_1:1.1.1.3
	OPENBSD_2_9:1.3.0.6
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	PERL_5_6_0:1.1.1.2
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	PERL_500503:1.1.1.1
	CPAN:1.1.1
	OPENBSD_2_5:1.1.0.6
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.4
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.2
	OPENBSD_2_3_BASE:1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.13
date	2017.02.05.00.32.18;	author afresh1;	state Exp;
branches;
next	1.12;
commitid	cxJ08BvJA9Pt2PTM;

1.12
date	2015.04.25.19.14.48;	author afresh1;	state Exp;
branches;
next	1.11;
commitid	XRK22kO4se3v2i2I;

1.11
date	2014.11.17.20.57.07;	author afresh1;	state Exp;
branches;
next	1.10;
commitid	QP75iYx42Uo7mMxO;

1.10
date	2014.03.24.15.05.33;	author afresh1;	state Exp;
branches;
next	1.9;

1.9
date	2013.03.25.20.40.59;	author sthen;	state Exp;
branches;
next	1.8;

1.8
date	2010.09.24.15.07.04;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2008.09.29.17.36.16;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2006.03.28.19.23.10;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2002.10.27.22.25.33;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2001.05.24.18.35.56;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.06.17.07.33;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	99.04.29.22.52.16;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	97.11.30.07.59.18;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.29.22.40.51;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2000.04.06.16.10.27;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2001.05.24.18.24.41;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2002.10.27.22.15.05;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2006.03.28.18.49.21;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2008.09.29.17.18.52;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2010.09.24.14.49.08;	author millert;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2013.03.25.20.09.21;	author sthen;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2014.03.24.14.59.08;	author afresh1;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	2014.11.17.20.53.14;	author afresh1;	state Exp;
branches;
next	1.1.1.11;
commitid	B31cAbBIXiCqnL97;

1.1.1.11
date	2015.04.25.19.10.44;	author afresh1;	state Exp;
branches;
next	1.1.1.12;
commitid	Wpcs5S8qILgEZC7F;

1.1.1.12
date	2017.08.14.13.46.20;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@perl 5.004_04
@


1.13
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@=encoding utf8

=head1 NAME

perllocale - Perl locale handling (internationalization and localization)

=head1 DESCRIPTION

In the beginning there was ASCII, the "American Standard Code for
Information Interchange", which works quite well for Americans with
their English alphabet and dollar-denominated currency.  But it doesn't
work so well even for other English speakers, who may use different
currencies, such as the pound sterling (as the symbol for that currency
is not in ASCII); and it's hopelessly inadequate for many of the
thousands of the world's other languages.

To address these deficiencies, the concept of locales was invented
(formally the ISO C, XPG4, POSIX 1.c "locale system").  And applications
were and are being written that use the locale mechanism.  The process of
making such an application take account of its users' preferences in
these kinds of matters is called B<internationalization> (often
abbreviated as B<i18n>); telling such an application about a particular
set of preferences is known as B<localization> (B<l10n>).

Perl has been extended to support the locale system.  This
is controlled per application by using one pragma, one function call,
and several environment variables.

Unfortunately, there are quite a few deficiencies with the design (and
often, the implementations) of locales.  Unicode was invented (see
L<perlunitut> for an introduction to that) in part to address these
design deficiencies, and nowadays, there is a series of "UTF-8
locales", based on Unicode.  These are locales whose character set is
Unicode, encoded in UTF-8.  Starting in v5.20, Perl fully supports
UTF-8 locales, except for sorting and string comparisons like C<lt> and
C<ge>.  (Use L<Unicode::Collate> for these.)  Perl continues to support
the old non UTF-8 locales as well.  There are currently no UTF-8 locales
for EBCDIC platforms.

(Unicode is also creating C<CLDR>, the "Common Locale Data Repository",
L<http://cldr.unicode.org/> which includes more types of information than
are available in the POSIX locale system.  At the time of this writing,
there was no CPAN module that provides access to this XML-encoded data.
However, it is possible to compute the POSIX locale data from them, and
earlier CLDR versions had these already extracted for you as UTF-8 locales
L<http://unicode.org/Public/cldr/2.0.1/>.)

=head1 WHAT IS A LOCALE

A locale is a set of data that describes various aspects of how various
communities in the world categorize their world.  These categories are
broken down into the following types (some of which include a brief
note here):

=over

=item Category C<LC_NUMERIC>: Numeric formatting

This indicates how numbers should be formatted for human readability,
for example the character used as the decimal point.

=item Category C<LC_MONETARY>: Formatting of monetary amounts

=for comment
The nbsp below makes this look better (though not great)

E<160>

=item Category C<LC_TIME>: Date/Time formatting

=for comment
The nbsp below makes this look better (though not great)

E<160>

=item Category C<LC_MESSAGES>: Error and other messages

This is used by Perl itself only for accessing operating system error
messages via L<$!|perlvar/$ERRNO> and L<$^E|perlvar/$EXTENDED_OS_ERROR>.

=item Category C<LC_COLLATE>: Collation

This indicates the ordering of letters for comparison and sorting.
In Latin alphabets, for example, "b", generally follows "a".

=item Category C<LC_CTYPE>: Character Types

This indicates, for example if a character is an uppercase letter.

=item Other categories

Some platforms have other categories, dealing with such things as
measurement units and paper sizes.  None of these are used directly by
Perl, but outside operations that Perl interacts with may use
these.  See L</Not within the scope of "use locale"> below.

=back

More details on the categories used by Perl are given below in L</LOCALE
CATEGORIES>.

Together, these categories go a long way towards being able to customize
a single program to run in many different locations.  But there are
deficiencies, so keep reading.

=head1 PREPARING TO USE LOCALES

Perl itself (outside the L<POSIX> module) will not use locales unless
specifically requested to (but
again note that Perl may interact with code that does use them).  Even
if there is such a request, B<all> of the following must be true
for it to work properly:

=over 4

=item *

B<Your operating system must support the locale system>.  If it does,
you should find that the C<setlocale()> function is a documented part of
its C library.

=item *

B<Definitions for locales that you use must be installed>.  You, or
your system administrator, must make sure that this is the case. The
available locales, the location in which they are kept, and the manner
in which they are installed all vary from system to system.  Some systems
provide only a few, hard-wired locales and do not allow more to be
added.  Others allow you to add "canned" locales provided by the system
supplier.  Still others allow you or the system administrator to define
and add arbitrary locales.  (You may have to ask your supplier to
provide canned locales that are not delivered with your operating
system.)  Read your system documentation for further illumination.

=item *

B<Perl must believe that the locale system is supported>.  If it does,
C<perl -V:d_setlocale> will say that the value for C<d_setlocale> is
C<define>.

=back

If you want a Perl application to process and present your data
according to a particular locale, the application code should include
the S<C<use locale>> pragma (see L<The "use locale" pragma>) where
appropriate, and B<at least one> of the following must be true:

=over 4

=item 1

B<The locale-determining environment variables (see L</"ENVIRONMENT">)
must be correctly set up> at the time the application is started, either
by yourself or by whomever set up your system account; or

=item 2

B<The application must set its own locale> using the method described in
L<The setlocale function>.

=back

=head1 USING LOCALES

=head2 The C<"use locale"> pragma

WARNING!  Do NOT use this pragma in scripts that have multiple
L<threads|threads> active.  The locale is not local to a single thread.
Another thread may change the locale at any time, which could cause at a
minimum that a given thread is operating in a locale it isn't expecting
to be in.  On some platforms, segfaults can also occur.  The locale
change need not be explicit; some operations cause perl to change the
locale itself.  You are vulnerable simply by having done a C<"use
locale">.

By default, Perl itself (outside the L<POSIX> module)
ignores the current locale.  The S<C<use locale>>
pragma tells Perl to use the current locale for some operations.
Starting in v5.16, there are optional parameters to this pragma,
described below, which restrict which operations are affected by it.

The current locale is set at execution time by
L<setlocale()|/The setlocale function> described below.  If that function
hasn't yet been called in the course of the program's execution, the
current locale is that which was determined by the L</"ENVIRONMENT"> in
effect at the start of the program.
If there is no valid environment, the current locale is whatever the
system default has been set to.   On POSIX systems, it is likely, but
not necessarily, the "C" locale.  On Windows, the default is set via the
computer's S<C<Control Panel-E<gt>Regional and Language Options>> (or its
current equivalent).

The operations that are affected by locale are:

=over 4

=item B<Not within the scope of C<"use locale">>

Only certain operations originating outside Perl should be affected, as
follows:

=over 4

=item *

The current locale is used when going outside of Perl with
operations like L<system()|perlfunc/system LIST> or
L<qxE<sol>E<sol>|perlop/qxE<sol>STRINGE<sol>>, if those operations are
locale-sensitive.

=item *

Also Perl gives access to various C library functions through the
L<POSIX> module.  Some of those functions are always affected by the
current locale.  For example, C<POSIX::strftime()> uses C<LC_TIME>;
C<POSIX::strtod()> uses C<LC_NUMERIC>; C<POSIX::strcoll()> and
C<POSIX::strxfrm()> use C<LC_COLLATE>.  All such functions
will behave according to the current underlying locale, even if that
locale isn't exposed to Perl space.

=item *

XS modules for all categories but C<LC_NUMERIC> get the underlying
locale, and hence any C library functions they call will use that
underlying locale.  For more discussion, see L<perlxs/CAVEATS>.

=back

Note that all C programs (including the perl interpreter, which is
written in C) always have an underlying locale.  That locale is the "C"
locale unless changed by a call to L<setlocale()|/The setlocale
function>.  When Perl starts up, it changes the underlying locale to the
one which is indicated by the L</ENVIRONMENT>.  When using the L<POSIX>
module or writing XS code, it is important to keep in mind that the
underlying locale may be something other than "C", even if the program
hasn't explicitly changed it.

=for comment
The nbsp below makes this look better (though not great)

E<160>

=item B<Lingering effects of C<S<use locale>>>

Certain Perl operations that are set-up within the scope of a
C<use locale> retain that effect even outside the scope.
These include:

=over 4

=item *

The output format of a L<write()|perlfunc/write> is determined by an
earlier format declaration (L<perlfunc/format>), so whether or not the
output is affected by locale is determined by if the C<format()> is
within the scope of a C<use locale>, not whether the C<write()>
is.

=item *

Regular expression patterns can be compiled using
L<qrE<sol>E<sol>|perlop/qrE<sol>STRINGE<sol>msixpodualn> with actual
matching deferred to later.  Again, it is whether or not the compilation
was done within the scope of C<use locale> that determines the match
behavior, not if the matches are done within such a scope or not.

=back

=for comment
The nbsp below makes this look better (though not great)


E<160>

=item B<Under C<"use locale";>>

=over 4

=item *

All the above operations

=item *

B<Format declarations> (L<perlfunc/format>) and hence any subsequent
C<write()>s use C<LC_NUMERIC>.

=item *

B<stringification and output> use C<LC_NUMERIC>.
These include the results of
C<print()>,
C<printf()>,
C<say()>,
and
C<sprintf()>.

=item *

B<The comparison operators> (C<lt>, C<le>, C<cmp>, C<ge>, and C<gt>) use
C<LC_COLLATE>.  C<sort()> is also affected if used without an
explicit comparison function, because it uses C<cmp> by default.

B<Note:> C<eq> and C<ne> are unaffected by locale: they always
perform a char-by-char comparison of their scalar operands.  What's
more, if C<cmp> finds that its operands are equal according to the
collation sequence specified by the current locale, it goes on to
perform a char-by-char comparison, and only returns I<0> (equal) if the
operands are char-for-char identical.  If you really want to know whether
two strings--which C<eq> and C<cmp> may consider different--are equal
as far as collation in the locale is concerned, see the discussion in
L<Category C<LC_COLLATE>: Collation>.

=item *

B<Regular expressions and case-modification functions> (C<uc()>, C<lc()>,
C<ucfirst()>, and C<lcfirst()>) use C<LC_CTYPE>

=item *

B<The variables L<$!|perlvar/$ERRNO>> (and its synonyms C<$ERRNO> and
C<$OS_ERROR>) B<and L<$^E|perlvar/$EXTENDED_OS_ERROR>> (and its synonym
C<$EXTENDED_OS_ERROR>) when used as strings use C<LC_MESSAGES>.

=back

=back

The default behavior is restored with the S<C<no locale>> pragma, or
upon reaching the end of the block enclosing C<use locale>.
Note that C<use locale> calls may be
nested, and that what is in effect within an inner scope will revert to
the outer scope's rules at the end of the inner scope.

The string result of any operation that uses locale
information is tainted, as it is possible for a locale to be
untrustworthy.  See L<"SECURITY">.

Starting in Perl v5.16 in a very limited way, and more generally in
v5.22, you can restrict which category or categories are enabled by this
particular instance of the pragma by adding parameters to it.  For
example,

 use locale qw(:ctype :numeric);

enables locale awareness within its scope of only those operations
(listed above) that are affected by C<LC_CTYPE> and C<LC_NUMERIC>.

The possible categories are: C<:collate>, C<:ctype>, C<:messages>,
C<:monetary>, C<:numeric>, C<:time>, and the pseudo category
C<:characters> (described below).

Thus you can say

 use locale ':messages';

and only L<$!|perlvar/$ERRNO> and L<$^E|perlvar/$EXTENDED_OS_ERROR>
will be locale aware.  Everything else is unaffected.

Since Perl doesn't currently do anything with the C<LC_MONETARY>
category, specifying C<:monetary> does effectively nothing.  Some
systems have other categories, such as C<LC_PAPER_SIZE>, but Perl
also doesn't know anything about them, and there is no way to specify
them in this pragma's arguments.

You can also easily say to use all categories but one, by either, for
example,

 use locale ':!ctype';
 use locale ':not_ctype';

both of which mean to enable locale awarness of all categories but
C<LC_CTYPE>.  Only one category argument may be specified in a
S<C<use locale>> if it is of the negated form.

Prior to v5.22 only one form of the pragma with arguments is available:

 use locale ':not_characters';

(and you have to say C<not_>; you can't use the bang C<!> form).  This
pseudo category is a shorthand for specifying both C<:collate> and
C<:ctype>.  Hence, in the negated form, it is nearly the same thing as
saying

 use locale qw(:messages :monetary :numeric :time);

We use the term "nearly", because C<:not_characters> also turns on
S<C<use feature 'unicode_strings'>> within its scope.  This form is
less useful in v5.20 and later, and is described fully in
L</Unicode and UTF-8>, but briefly, it tells Perl to not use the
character portions of the locale definition, that is the C<LC_CTYPE> and
C<LC_COLLATE> categories.  Instead it will use the native character set
(extended by Unicode).  When using this parameter, you are responsible
for getting the external character set translated into the
native/Unicode one (which it already will be if it is one of the
increasingly popular UTF-8 locales).  There are convenient ways of doing
this, as described in L</Unicode and UTF-8>.

=head2 The setlocale function

WARNING!  Do NOT use this function in a L<thread|threads>.  The locale
will change in all other threads at the same time, and should your
thread get paused by the operating system, and another started, that
thread will not have the locale it is expecting.  On some platforms,
there can be a race leading to segfaults if two threads call this
function nearly simultaneously.

You can switch locales as often as you wish at run time with the
C<POSIX::setlocale()> function:

        # Import locale-handling tool set from POSIX module.
        # This example uses: setlocale -- the function call
        #                    LC_CTYPE -- explained below
        # (Showing the testing for success/failure of operations is
        # omitted in these examples to avoid distracting from the main
        # point)

        use POSIX qw(locale_h);
        use locale;
        my $old_locale;

        # query and save the old locale
        $old_locale = setlocale(LC_CTYPE);

        setlocale(LC_CTYPE, "fr_CA.ISO8859-1");
        # LC_CTYPE now in locale "French, Canada, codeset ISO 8859-1"

        setlocale(LC_CTYPE, "");
        # LC_CTYPE now reset to the default defined by the
        # LC_ALL/LC_CTYPE/LANG environment variables, or to the system
        # default.  See below for documentation.

        # restore the old locale
        setlocale(LC_CTYPE, $old_locale);

The first argument of C<setlocale()> gives the B<category>, the second the
B<locale>.  The category tells in what aspect of data processing you
want to apply locale-specific rules.  Category names are discussed in
L</LOCALE CATEGORIES> and L</"ENVIRONMENT">.  The locale is the name of a
collection of customization information corresponding to a particular
combination of language, country or territory, and codeset.  Read on for
hints on the naming of locales: not all systems name locales as in the
example.

If no second argument is provided and the category is something other
than C<LC_ALL>, the function returns a string naming the current locale
for the category.  You can use this value as the second argument in a
subsequent call to C<setlocale()>, B<but> on some platforms the string
is opaque, not something that most people would be able to decipher as
to what locale it means.

If no second argument is provided and the category is C<LC_ALL>, the
result is implementation-dependent.  It may be a string of
concatenated locale names (separator also implementation-dependent)
or a single locale name.  Please consult your L<setlocale(3)> man page for
details.

If a second argument is given and it corresponds to a valid locale,
the locale for the category is set to that value, and the function
returns the now-current locale value.  You can then use this in yet
another call to C<setlocale()>.  (In some implementations, the return
value may sometimes differ from the value you gave as the second
argument--think of it as an alias for the value you gave.)

As the example shows, if the second argument is an empty string, the
category's locale is returned to the default specified by the
corresponding environment variables.  Generally, this results in a
return to the default that was in force when Perl started up: changes
to the environment made by the application after startup may or may not
be noticed, depending on your system's C library.

Note that when a form of C<use locale> that doesn't include all
categories is specified, Perl ignores the excluded categories.

If C<set_locale()> fails for some reason (for example, an attempt to set
to a locale unknown to the system), the locale for the category is not
changed, and the function returns C<undef>.


For further information about the categories, consult L<setlocale(3)>.

=head2 Finding locales

For locales available in your system, consult also L<setlocale(3)> to
see whether it leads to the list of available locales (search for the
I<SEE ALSO> section).  If that fails, try the following command lines:

        locale -a

        nlsinfo

        ls /usr/lib/nls/loc

        ls /usr/lib/locale

        ls /usr/lib/nls

	ls /usr/share/locale

and see whether they list something resembling these

        en_US.ISO8859-1     de_DE.ISO8859-1     ru_RU.ISO8859-5
        en_US.iso88591      de_DE.iso88591      ru_RU.iso88595
        en_US               de_DE               ru_RU
        en                  de                  ru
        english             german              russian
        english.iso88591    german.iso88591     russian.iso88595
        english.roman8                          russian.koi8r

Sadly, even though the calling interface for C<setlocale()> has been
standardized, names of locales and the directories where the
configuration resides have not been.  The basic form of the name is
I<language_territory>B<.>I<codeset>, but the latter parts after
I<language> are not always present.  The I<language> and I<country>
are usually from the standards B<ISO 3166> and B<ISO 639>, the
two-letter abbreviations for the countries and the languages of the
world, respectively.  The I<codeset> part often mentions some B<ISO
8859> character set, the Latin codesets.  For example, C<ISO 8859-1>
is the so-called "Western European codeset" that can be used to encode
most Western European languages adequately.  Again, there are several
ways to write even the name of that one standard.  Lamentably.

Two special locales are worth particular mention: "C" and "POSIX".
Currently these are effectively the same locale: the difference is
mainly that the first one is defined by the C standard, the second by
the POSIX standard.  They define the B<default locale> in which
every program starts in the absence of locale information in its
environment.  (The I<default> default locale, if you will.)  Its language
is (American) English and its character codeset ASCII or, rarely, a
superset thereof (such as the "DEC Multinational Character Set
(DEC-MCS)").  B<Warning>. The C locale delivered by some vendors
may not actually exactly match what the C standard calls for.  So
beware.

B<NOTE>: Not all systems have the "POSIX" locale (not all systems are
POSIX-conformant), so use "C" when you need explicitly to specify this
default locale.

=head2 LOCALE PROBLEMS

You may encounter the following warning message at Perl startup:

	perl: warning: Setting locale failed.
	perl: warning: Please check that your locale settings:
	        LC_ALL = "En_US",
	        LANG = (unset)
	    are supported and installed on your system.
	perl: warning: Falling back to the standard locale ("C").

This means that your locale settings had C<LC_ALL> set to "En_US" and
LANG exists but has no value.  Perl tried to believe you but could not.
Instead, Perl gave up and fell back to the "C" locale, the default locale
that is supposed to work no matter what.  (On Windows, it first tries
falling back to the system default locale.)  This usually means your
locale settings were wrong, they mention locales your system has never
heard of, or the locale installation in your system has problems (for
example, some system files are broken or missing).  There are quick and
temporary fixes to these problems, as well as more thorough and lasting
fixes.

=head2 Testing for broken locales

If you are building Perl from source, the Perl test suite file
F<lib/locale.t> can be used to test the locales on your system.
Setting the environment variable C<PERL_DEBUG_FULL_TEST> to 1
will cause it to output detailed results.  For example, on Linux, you
could say

 PERL_DEBUG_FULL_TEST=1 ./perl -T -Ilib lib/locale.t > locale.log 2>&1

Besides many other tests, it will test every locale it finds on your
system to see if they conform to the POSIX standard.  If any have
errors, it will include a summary near the end of the output of which
locales passed all its tests, and which failed, and why.

=head2 Temporarily fixing locale problems

The two quickest fixes are either to render Perl silent about any
locale inconsistencies or to run Perl under the default locale "C".

Perl's moaning about locale problems can be silenced by setting the
environment variable C<PERL_BADLANG> to "0" or "".
This method really just sweeps the problem under the carpet: you tell
Perl to shut up even when Perl sees that something is wrong.  Do not
be surprised if later something locale-dependent misbehaves.

Perl can be run under the "C" locale by setting the environment
variable C<LC_ALL> to "C".  This method is perhaps a bit more civilized
than the C<PERL_BADLANG> approach, but setting C<LC_ALL> (or
other locale variables) may affect other programs as well, not just
Perl.  In particular, external programs run from within Perl will see
these changes.  If you make the new settings permanent (read on), all
programs you run see the changes.  See L<"ENVIRONMENT"> for
the full list of relevant environment variables and L<USING LOCALES>
for their effects in Perl.  Effects in other programs are
easily deducible.  For example, the variable C<LC_COLLATE> may well affect
your B<sort> program (or whatever the program that arranges "records"
alphabetically in your system is called).

You can test out changing these variables temporarily, and if the
new settings seem to help, put those settings into your shell startup
files.  Consult your local documentation for the exact details.  For
Bourne-like shells (B<sh>, B<ksh>, B<bash>, B<zsh>):

	LC_ALL=en_US.ISO8859-1
	export LC_ALL

This assumes that we saw the locale "en_US.ISO8859-1" using the commands
discussed above.  We decided to try that instead of the above faulty
locale "En_US"--and in Cshish shells (B<csh>, B<tcsh>)

	setenv LC_ALL en_US.ISO8859-1

or if you have the "env" application you can do (in any shell)

	env LC_ALL=en_US.ISO8859-1 perl ...

If you do not know what shell you have, consult your local
helpdesk or the equivalent.

=head2 Permanently fixing locale problems

The slower but superior fixes are when you may be able to yourself
fix the misconfiguration of your own environment variables.  The
mis(sing)configuration of the whole system's locales usually requires
the help of your friendly system administrator.

First, see earlier in this document about L<Finding locales>.  That tells
how to find which locales are really supported--and more importantly,
installed--on your system.  In our example error message, environment
variables affecting the locale are listed in the order of decreasing
importance (and unset variables do not matter).  Therefore, having
LC_ALL set to "En_US" must have been the bad choice, as shown by the
error message.  First try fixing locale settings listed first.

Second, if using the listed commands you see something B<exactly>
(prefix matches do not count and case usually counts) like "En_US"
without the quotes, then you should be okay because you are using a
locale name that should be installed and available in your system.
In this case, see L<Permanently fixing your system's locale configuration>.

=head2 Permanently fixing your system's locale configuration

This is when you see something like:

	perl: warning: Please check that your locale settings:
	        LC_ALL = "En_US",
	        LANG = (unset)
	    are supported and installed on your system.

but then cannot see that "En_US" listed by the above-mentioned
commands.  You may see things like "en_US.ISO8859-1", but that isn't
the same.  In this case, try running under a locale
that you can list and which somehow matches what you tried.  The
rules for matching locale names are a bit vague because
standardization is weak in this area.  See again the
L<Finding locales> about general rules.

=head2 Fixing system locale configuration

Contact a system administrator (preferably your own) and report the exact
error message you get, and ask them to read this same documentation you
are now reading.  They should be able to check whether there is something
wrong with the locale configuration of the system.  The L<Finding locales>
section is unfortunately a bit vague about the exact commands and places
because these things are not that standardized.

=head2 The localeconv function

The C<POSIX::localeconv()> function allows you to get particulars of the
locale-dependent numeric formatting information specified by the current
underlying C<LC_NUMERIC> and C<LC_MONETARY> locales (regardless of
whether called from within the scope of C<S<use locale>> or not).  (If
you just want the name of
the current locale for a particular category, use C<POSIX::setlocale()>
with a single parameter--see L<The setlocale function>.)

        use POSIX qw(locale_h);

        # Get a reference to a hash of locale-dependent info
        $locale_values = localeconv();

        # Output sorted list of the values
        for (sort keys %$locale_values) {
            printf "%-20s = %s\n", $_, $locale_values->{$_}
        }

C<localeconv()> takes no arguments, and returns B<a reference to> a hash.
The keys of this hash are variable names for formatting, such as
C<decimal_point> and C<thousands_sep>.  The values are the
corresponding, er, values.  See L<POSIX/localeconv> for a longer
example listing the categories an implementation might be expected to
provide; some provide more and others fewer.  You don't need an
explicit C<use locale>, because C<localeconv()> always observes the
current locale.

Here's a simple-minded example program that rewrites its command-line
parameters as integers correctly formatted in the current locale:

    use POSIX qw(locale_h);

    # Get some of locale's numeric formatting parameters
    my ($thousands_sep, $grouping) =
            @@{localeconv()}{'thousands_sep', 'grouping'};

    # Apply defaults if values are missing
    $thousands_sep = ',' unless $thousands_sep;

    # grouping and mon_grouping are packed lists
    # of small integers (characters) telling the
    # grouping (thousand_seps and mon_thousand_seps
    # being the group dividers) of numbers and
    # monetary quantities.  The integers' meanings:
    # 255 means no more grouping, 0 means repeat
    # the previous grouping, 1-254 means use that
    # as the current grouping.  Grouping goes from
    # right to left (low to high digits).  In the
    # below we cheat slightly by never using anything
    # else than the first grouping (whatever that is).
    if ($grouping) {
        @@grouping = unpack("C*", $grouping);
    } else {
        @@grouping = (3);
    }

    # Format command line params for current locale
    for (@@ARGV) {
        $_ = int;    # Chop non-integer part
        1 while
        s/(\d)(\d{$grouping[0]}($|$thousands_sep))/$1$thousands_sep$2/;
        print "$_";
    }
    print "\n";

Note that if the platform doesn't have C<LC_NUMERIC> and/or
C<LC_MONETARY> available or enabled, the corresponding elements of the
hash will be missing.

=head2 I18N::Langinfo

Another interface for querying locale-dependent information is the
C<I18N::Langinfo::langinfo()> function, available at least in Unix-like
systems and VMS.

The following example will import the C<langinfo()> function itself and
three constants to be used as arguments to C<langinfo()>: a constant for
the abbreviated first day of the week (the numbering starts from
Sunday = 1) and two more constants for the affirmative and negative
answers for a yes/no question in the current locale.

    use I18N::Langinfo qw(langinfo ABDAY_1 YESSTR NOSTR);

    my ($abday_1, $yesstr, $nostr)
                = map { langinfo } qw(ABDAY_1 YESSTR NOSTR);

    print "$abday_1? [$yesstr/$nostr] ";

In other words, in the "C" (or English) locale the above will probably
print something like:

    Sun? [yes/no]

See L<I18N::Langinfo> for more information.

=head1 LOCALE CATEGORIES

The following subsections describe basic locale categories.  Beyond these,
some combination categories allow manipulation of more than one
basic category at a time.  See L<"ENVIRONMENT"> for a discussion of these.

=head2 Category C<LC_COLLATE>: Collation

In the scope of a S<C<use locale>> form that includes collation, Perl
looks to the C<LC_COLLATE>
environment variable to determine the application's notions on collation
(ordering) of characters.  For example, "b" follows "a" in Latin
alphabets, but where do "E<aacute>" and "E<aring>" belong?  And while
"color" follows "chocolate" in English, what about in traditional Spanish?

The following collations all make sense and you may meet any of them
if you C<"use locale">.

	A B C D E a b c d e
	A a B b C c D d E e
	a A b B c C d D e E
	a b c d e A B C D E

Here is a code snippet to tell what "word"
characters are in the current locale, in that locale's order:

        use locale;
        print +(sort grep /\w/, map { chr } 0..255), "\n";

Compare this with the characters that you see and their order if you
state explicitly that the locale should be ignored:

        no locale;
        print +(sort grep /\w/, map { chr } 0..255), "\n";

This machine-native collation (which is what you get unless S<C<use
locale>> has appeared earlier in the same block) must be used for
sorting raw binary data, whereas the locale-dependent collation of the
first example is useful for natural text.

As noted in L<USING LOCALES>, C<cmp> compares according to the current
collation locale when C<use locale> is in effect, but falls back to a
char-by-char comparison for strings that the locale says are equal. You
can use C<POSIX::strcoll()> if you don't want this fall-back:

        use POSIX qw(strcoll);
        $equal_in_locale =
            !strcoll("space and case ignored", "SpaceAndCaseIgnored");

C<$equal_in_locale> will be true if the collation locale specifies a
dictionary-like ordering that ignores space characters completely and
which folds case.

Perl currently only supports single-byte locales for C<LC_COLLATE>.  This means
that a UTF-8 locale likely will just give you machine-native ordering.
Use L<Unicode::Collate> for the full implementation of the Unicode
Collation Algorithm.

If you have a single string that you want to check for "equality in
locale" against several others, you might think you could gain a little
efficiency by using C<POSIX::strxfrm()> in conjunction with C<eq>:

        use POSIX qw(strxfrm);
        $xfrm_string = strxfrm("Mixed-case string");
        print "locale collation ignores spaces\n"
            if $xfrm_string eq strxfrm("Mixed-casestring");
        print "locale collation ignores hyphens\n"
            if $xfrm_string eq strxfrm("Mixedcase string");
        print "locale collation ignores case\n"
            if $xfrm_string eq strxfrm("mixed-case string");

C<strxfrm()> takes a string and maps it into a transformed string for use
in char-by-char comparisons against other transformed strings during
collation.  "Under the hood", locale-affected Perl comparison operators
call C<strxfrm()> for both operands, then do a char-by-char
comparison of the transformed strings.  By calling C<strxfrm()> explicitly
and using a non locale-affected comparison, the example attempts to save
a couple of transformations.  But in fact, it doesn't save anything: Perl
magic (see L<perlguts/Magic Variables>) creates the transformed version of a
string the first time it's needed in a comparison, then keeps this version around
in case it's needed again.  An example rewritten the easy way with
C<cmp> runs just about as fast.  It also copes with null characters
embedded in strings; if you call C<strxfrm()> directly, it treats the first
null it finds as a terminator.  don't expect the transformed strings
it produces to be portable across systems--or even from one revision
of your operating system to the next.  In short, don't call C<strxfrm()>
directly: let Perl do it for you.

Note: C<use locale> isn't shown in some of these examples because it isn't
needed: C<strcoll()> and C<strxfrm()> are POSIX functions
which use the standard system-supplied C<libc> functions that
always obey the current C<LC_COLLATE> locale.

=head2 Category C<LC_CTYPE>: Character Types

In the scope of a S<C<use locale>> form that includes C<LC_CTYPE>, Perl
obeys the C<LC_CTYPE> locale
setting.  This controls the application's notion of which characters are
alphabetic, numeric, punctuation, I<etc>.  This affects Perl's C<\w>
regular expression metanotation,
which stands for alphanumeric characters--that is, alphabetic,
numeric, and the platform's native underscore.
(Consult L<perlre> for more information about
regular expressions.)  Thanks to C<LC_CTYPE>, depending on your locale
setting, characters like "E<aelig>", "E<eth>", "E<szlig>", and
"E<oslash>" may be understood as C<\w> characters.
It also affects things like C<\s>, C<\D>, and the POSIX character
classes, like C<[[:graph:]]>.  (See L<perlrecharclass> for more
information on all these.)

The C<LC_CTYPE> locale also provides the map used in transliterating
characters between lower and uppercase.  This affects the case-mapping
functions--C<fc()>, C<lc()>, C<lcfirst()>, C<uc()>, and C<ucfirst()>;
case-mapping
interpolation with C<\F>, C<\l>, C<\L>, C<\u>, or C<\U> in double-quoted
strings and C<s///> substitutions; and case-independent regular expression
pattern matching using the C<i> modifier.

Starting in v5.20, Perl supports UTF-8 locales for C<LC_CTYPE>, but
otherwise Perl only supports single-byte locales, such as the ISO 8859
series.  This means that wide character locales, for example for Asian
languages, are not well-supported.  (If the platform has the capability
for Perl to detect such a locale, starting in Perl v5.22,
L<Perl will warn, default enabled|warnings/Category Hierarchy>,
using the C<locale> warning category, whenever such a locale is switched
into.)  The UTF-8 locale support is actually a
superset of POSIX locales, because it is really full Unicode behavior
as if no C<LC_CTYPE> locale were in effect at all (except for tainting;
see L</SECURITY>).  POSIX locales, even UTF-8 ones,
are lacking certain concepts in Unicode, such as the idea that changing
the case of a character could expand to be more than one character.
Perl in a UTF-8 locale, will give you that expansion.  Prior to v5.20,
Perl treated a UTF-8 locale on some platforms like an ISO 8859-1 one,
with some restrictions, and on other platforms more like the "C" locale.
For releases v5.16 and v5.18, C<S<use locale 'not_characters>> could be
used as a workaround for this (see L</Unicode and UTF-8>).

Note that there are quite a few things that are unaffected by the
current locale.  Any literal character is the native character for the
given platform.  Hence 'A' means the character at code point 65 on ASCII
platforms, and 193 on EBCDIC.  That may or may not be an 'A' in the
current locale, if that locale even has an 'A'.
Similarly, all the escape sequences for particular characters,
C<\n> for example, always mean the platform's native one.  This means,
for example, that C<\N> in regular expressions (every character
but new-line) works on the platform character set.

Starting in v5.22, Perl will by default warn when switching into a
locale that redefines any ASCII printable character (plus C<\t> and
C<\n>) into a different class than expected.  This is likely to
happen on modern locales only on EBCDIC platforms, where, for example,
a CCSID 0037 locale on a CCSID 1047 machine moves C<"[">, but it can
happen on ASCII platforms with the ISO 646 and other
7-bit locales that are essentially obsolete.  Things may still work,
depending on what features of Perl are used by the program.  For
example, in the example from above where C<"|"> becomes a C<\w>, and
there are no regular expressions where this matters, the program may
still work properly.  The warning lists all the characters that
it can determine could be adversely affected.

B<Note:> A broken or malicious C<LC_CTYPE> locale definition may result
in clearly ineligible characters being considered to be alphanumeric by
your application.  For strict matching of (mundane) ASCII letters and
digits--for example, in command strings--locale-aware applications
should use C<\w> with the C</a> regular expression modifier.  See L<"SECURITY">.

=head2 Category C<LC_NUMERIC>: Numeric Formatting

After a proper C<POSIX::setlocale()> call, and within the scope of
of a C<use locale> form that includes numerics, Perl obeys the
C<LC_NUMERIC> locale information, which controls an application's idea
of how numbers should be formatted for human readability.
In most implementations the only effect is to
change the character used for the decimal point--perhaps from "."  to ",".
The functions aren't aware of such niceties as thousands separation and
so on. (See L<The localeconv function> if you care about these things.)

 use POSIX qw(strtod setlocale LC_NUMERIC);
 use locale;

 setlocale LC_NUMERIC, "";

 $n = 5/2;   # Assign numeric 2.5 to $n

 $a = " $n"; # Locale-dependent conversion to string

 print "half five is $n\n";       # Locale-dependent output

 printf "half five is %g\n", $n;  # Locale-dependent output

 print "DECIMAL POINT IS COMMA\n"
          if $n == (strtod("2,5"))[0]; # Locale-dependent conversion

See also L<I18N::Langinfo> and C<RADIXCHAR>.

=head2 Category C<LC_MONETARY>: Formatting of monetary amounts

The C standard defines the C<LC_MONETARY> category, but not a function
that is affected by its contents.  (Those with experience of standards
committees will recognize that the working group decided to punt on the
issue.)  Consequently, Perl essentially takes no notice of it.  If you
really want to use C<LC_MONETARY>, you can query its contents--see
L<The localeconv function>--and use the information that it returns in your
application's own formatting of currency amounts.  However, you may well
find that the information, voluminous and complex though it may be, still
does not quite meet your requirements: currency formatting is a hard nut
to crack.

See also L<I18N::Langinfo> and C<CRNCYSTR>.

=head2 C<LC_TIME>

Output produced by C<POSIX::strftime()>, which builds a formatted
human-readable date/time string, is affected by the current C<LC_TIME>
locale.  Thus, in a French locale, the output produced by the C<%B>
format element (full month name) for the first month of the year would
be "janvier".  Here's how to get a list of long month names in the
current locale:

        use POSIX qw(strftime);
        for (0..11) {
            $long_month_name[$_] =
                strftime("%B", 0, 0, 0, 1, $_, 96);
        }

Note: C<use locale> isn't needed in this example: C<strftime()> is a POSIX
function which uses the standard system-supplied C<libc> function that
always obeys the current C<LC_TIME> locale.

See also L<I18N::Langinfo> and C<ABDAY_1>..C<ABDAY_7>, C<DAY_1>..C<DAY_7>,
C<ABMON_1>..C<ABMON_12>, and C<ABMON_1>..C<ABMON_12>.

=head2 Other categories

The remaining locale categories are not currently used by Perl itself.
But again note that things Perl interacts with may use these, including
extensions outside the standard Perl distribution, and by the
operating system and its utilities.  Note especially that the string
value of C<$!> and the error messages given by external utilities may
be changed by C<LC_MESSAGES>.  If you want to have portable error
codes, use C<%!>.  See L<Errno>.

=head1 SECURITY

Although the main discussion of Perl security issues can be found in
L<perlsec>, a discussion of Perl's locale handling would be incomplete
if it did not draw your attention to locale-dependent security issues.
Locales--particularly on systems that allow unprivileged users to
build their own locales--are untrustworthy.  A malicious (or just plain
broken) locale can make a locale-aware application give unexpected
results.  Here are a few possibilities:

=over 4

=item *

Regular expression checks for safe file names or mail addresses using
C<\w> may be spoofed by an C<LC_CTYPE> locale that claims that
characters such as C<"E<gt>"> and C<"|"> are alphanumeric.

=item *

String interpolation with case-mapping, as in, say, C<$dest =
"C:\U$name.$ext">, may produce dangerous results if a bogus C<LC_CTYPE>
case-mapping table is in effect.

=item *

A sneaky C<LC_COLLATE> locale could result in the names of students with
"D" grades appearing ahead of those with "A"s.

=item *

An application that takes the trouble to use information in
C<LC_MONETARY> may format debits as if they were credits and vice versa
if that locale has been subverted.  Or it might make payments in US
dollars instead of Hong Kong dollars.

=item *

The date and day names in dates formatted by C<strftime()> could be
manipulated to advantage by a malicious user able to subvert the
C<LC_DATE> locale.  ("Look--it says I wasn't in the building on
Sunday.")

=back

Such dangers are not peculiar to the locale system: any aspect of an
application's environment which may be modified maliciously presents
similar challenges.  Similarly, they are not specific to Perl: any
programming language that allows you to write programs that take
account of their environment exposes you to these issues.

Perl cannot protect you from all possibilities shown in the
examples--there is no substitute for your own vigilance--but, when
C<use locale> is in effect, Perl uses the tainting mechanism (see
L<perlsec>) to mark string results that become locale-dependent, and
which may be untrustworthy in consequence.  Here is a summary of the
tainting behavior of operators and functions that may be affected by
the locale:

=over 4

=item  *

B<Comparison operators> (C<lt>, C<le>, C<ge>, C<gt> and C<cmp>):

Scalar true/false (or less/equal/greater) result is never tainted.

=item  *

B<Case-mapping interpolation> (with C<\l>, C<\L>, C<\u>, C<\U>, or C<\F>)

The result string containing interpolated material is tainted if
a C<use locale> form that includes C<LC_CTYPE> is in effect.

=item  *

B<Matching operator> (C<m//>):

Scalar true/false result never tainted.

All subpatterns, either delivered as a list-context result or as C<$1>
I<etc>., are tainted if a C<use locale> form that includes
C<LC_CTYPE> is in effect, and the subpattern
regular expression contains a locale-dependent construct.  These
constructs include C<\w> (to match an alphanumeric character), C<\W>
(non-alphanumeric character), C<\b> and C<\B> (word-boundary and
non-boundardy, which depend on what C<\w> and C<\W> match), C<\s>
(whitespace character), C<\S> (non whitespace character), C<\d> and
C<\D> (digits and non-digits), and the POSIX character classes, such as
C<[:alpha:]> (see L<perlrecharclass/POSIX Character Classes>).

Tainting is also likely if the pattern is to be matched
case-insensitively (via C</i>).  The exception is if all the code points
to be matched this way are above 255 and do not have folds under Unicode
rules to below 256.  Tainting is not done for these because Perl
only uses Unicode rules for such code points, and those rules are the
same no matter what the current locale.

The matched-pattern variables, C<$&>, C<$`> (pre-match), C<$'>
(post-match), and C<$+> (last match) also are tainted.

=item  *

B<Substitution operator> (C<s///>):

Has the same behavior as the match operator.  Also, the left
operand of C<=~> becomes tainted when a C<use locale>
form that includes C<LC_CTYPE> is in effect, if modified as
a result of a substitution based on a regular
expression match involving any of the things mentioned in the previous
item, or of case-mapping, such as C<\l>, C<\L>,C<\u>, C<\U>, or C<\F>.

=item *

B<Output formatting functions> (C<printf()> and C<write()>):

Results are never tainted because otherwise even output from print,
for example C<print(1/7)>, should be tainted if C<use locale> is in
effect.

=item *

B<Case-mapping functions> (C<lc()>, C<lcfirst()>, C<uc()>, C<ucfirst()>):

Results are tainted if a C<use locale> form that includes C<LC_CTYPE> is
in effect.

=item *

B<POSIX locale-dependent functions> (C<localeconv()>, C<strcoll()>,
C<strftime()>, C<strxfrm()>):

Results are never tainted.

=back

Three examples illustrate locale-dependent tainting.
The first program, which ignores its locale, won't run: a value taken
directly from the command line may not be used to name an output file
when taint checks are enabled.

        #/usr/local/bin/perl -T
        # Run with taint checking

        # Command line sanity check omitted...
        $tainted_output_file = shift;

        open(F, ">$tainted_output_file")
            or warn "Open of $tainted_output_file failed: $!\n";

The program can be made to run by "laundering" the tainted value through
a regular expression: the second example--which still ignores locale
information--runs, creating the file named on its command line
if it can.

        #/usr/local/bin/perl -T

        $tainted_output_file = shift;
        $tainted_output_file =~ m%[\w/]+%;
        $untainted_output_file = $&;

        open(F, ">$untainted_output_file")
            or warn "Open of $untainted_output_file failed: $!\n";

Compare this with a similar but locale-aware program:

        #/usr/local/bin/perl -T

        $tainted_output_file = shift;
        use locale;
        $tainted_output_file =~ m%[\w/]+%;
        $localized_output_file = $&;

        open(F, ">$localized_output_file")
            or warn "Open of $localized_output_file failed: $!\n";

This third program fails to run because C<$&> is tainted: it is the result
of a match involving C<\w> while C<use locale> is in effect.

=head1 ENVIRONMENT

=over 12

=item PERL_SKIP_LOCALE_INIT

This environment variable, available starting in Perl v5.20, if set
(to any value), tells Perl to not use the rest of the
environment variables to initialize with.  Instead, Perl uses whatever
the current locale settings are.  This is particularly useful in
embedded environments, see
L<perlembed/Using embedded Perl with POSIX locales>.

=item PERL_BADLANG

A string that can suppress Perl's warning about failed locale settings
at startup.  Failure can occur if the locale support in the operating
system is lacking (broken) in some way--or if you mistyped the name of
a locale when you set up your environment.  If this environment
variable is absent, or has a value other than "0" or "", Perl will
complain about locale setting failures.

B<NOTE>: C<PERL_BADLANG> only gives you a way to hide the warning message.
The message tells about some problem in your system's locale support,
and you should investigate what the problem is.

=back

The following environment variables are not specific to Perl: They are
part of the standardized (ISO C, XPG4, POSIX 1.c) C<setlocale()> method
for controlling an application's opinion on data.  Windows is non-POSIX,
but Perl arranges for the following to work as described anyway.
If the locale given by an environment variable is not valid, Perl tries
the next lower one in priority.  If none are valid, on Windows, the
system default locale is then tried.  If all else fails, the C<"C">
locale is used.  If even that doesn't work, something is badly broken,
but Perl tries to forge ahead with whatever the locale settings might
be.

=over 12

=item C<LC_ALL>

C<LC_ALL> is the "override-all" locale environment variable. If
set, it overrides all the rest of the locale environment variables.

=item C<LANGUAGE>

B<NOTE>: C<LANGUAGE> is a GNU extension, it affects you only if you
are using the GNU libc.  This is the case if you are using e.g. Linux.
If you are using "commercial" Unixes you are most probably I<not>
using GNU libc and you can ignore C<LANGUAGE>.

However, in the case you are using C<LANGUAGE>: it affects the
language of informational, warning, and error messages output by
commands (in other words, it's like C<LC_MESSAGES>) but it has higher
priority than C<LC_ALL>.  Moreover, it's not a single value but
instead a "path" (":"-separated list) of I<languages> (not locales).
See the GNU C<gettext> library documentation for more information.

=item C<LC_CTYPE>

In the absence of C<LC_ALL>, C<LC_CTYPE> chooses the character type
locale.  In the absence of both C<LC_ALL> and C<LC_CTYPE>, C<LANG>
chooses the character type locale.

=item C<LC_COLLATE>

In the absence of C<LC_ALL>, C<LC_COLLATE> chooses the collation
(sorting) locale.  In the absence of both C<LC_ALL> and C<LC_COLLATE>,
C<LANG> chooses the collation locale.

=item C<LC_MONETARY>

In the absence of C<LC_ALL>, C<LC_MONETARY> chooses the monetary
formatting locale.  In the absence of both C<LC_ALL> and C<LC_MONETARY>,
C<LANG> chooses the monetary formatting locale.

=item C<LC_NUMERIC>

In the absence of C<LC_ALL>, C<LC_NUMERIC> chooses the numeric format
locale.  In the absence of both C<LC_ALL> and C<LC_NUMERIC>, C<LANG>
chooses the numeric format.

=item C<LC_TIME>

In the absence of C<LC_ALL>, C<LC_TIME> chooses the date and time
formatting locale.  In the absence of both C<LC_ALL> and C<LC_TIME>,
C<LANG> chooses the date and time formatting locale.

=item C<LANG>

C<LANG> is the "catch-all" locale environment variable. If it is set, it
is used as the last resort after the overall C<LC_ALL> and the
category-specific C<LC_I<foo>>.

=back

=head2 Examples

The C<LC_NUMERIC> controls the numeric output:

   use locale;
   use POSIX qw(locale_h); # Imports setlocale() and the LC_ constants.
   setlocale(LC_NUMERIC, "fr_FR") or die "Pardon";
   printf "%g\n", 1.23; # If the "fr_FR" succeeded, probably shows 1,23.

and also how strings are parsed by C<POSIX::strtod()> as numbers:

   use locale;
   use POSIX qw(locale_h strtod);
   setlocale(LC_NUMERIC, "de_DE") or die "Entschuldigung";
   my $x = strtod("2,34") + 5;
   print $x, "\n"; # Probably shows 7,34.

=head1 NOTES

=head2 String C<eval> and C<LC_NUMERIC>

A string L<eval|perlfunc/eval EXPR> parses its expression as standard
Perl.  It is therefore expecting the decimal point to be a dot.  If
C<LC_NUMERIC> is set to have this be a comma instead, the parsing will
be confused, perhaps silently.

 use locale;
 use POSIX qw(locale_h);
 setlocale(LC_NUMERIC, "fr_FR") or die "Pardon";
 my $a = 1.2;
 print eval "$a + 1.5";
 print "\n";

prints C<13,5>.  This is because in that locale, the comma is the
decimal point character.  The C<eval> thus expands to:

 eval "1,2 + 1.5"

and the result is not what you likely expected.  No warnings are
generated.  If you do string C<eval>'s within the scope of
S<C<use locale>>, you should instead change the C<eval> line to do
something like:

 print eval "no locale; $a + 1.5";

This prints C<2.7>.

You could also exclude C<LC_NUMERIC>, if you don't need it, by

 use locale ':!numeric';

=head2 Backward compatibility

Versions of Perl prior to 5.004 B<mostly> ignored locale information,
generally behaving as if something similar to the C<"C"> locale were
always in force, even if the program environment suggested otherwise
(see L<The setlocale function>).  By default, Perl still behaves this
way for backward compatibility.  If you want a Perl application to pay
attention to locale information, you B<must> use the S<C<use locale>>
pragma (see L<The "use locale" pragma>) or, in the unlikely event
that you want to do so for just pattern matching, the
C</l> regular expression modifier (see L<perlre/Character set
modifiers>) to instruct it to do so.

Versions of Perl from 5.002 to 5.003 did use the C<LC_CTYPE>
information if available; that is, C<\w> did understand what
were the letters according to the locale environment variables.
The problem was that the user had no control over the feature:
if the C library supported locales, Perl used them.

=head2 I18N:Collate obsolete

In versions of Perl prior to 5.004, per-locale collation was possible
using the C<I18N::Collate> library module.  This module is now mildly
obsolete and should be avoided in new applications.  The C<LC_COLLATE>
functionality is now integrated into the Perl core language: One can
use locale-specific scalar data completely normally with C<use locale>,
so there is no longer any need to juggle with the scalar references of
C<I18N::Collate>.

=head2 Sort speed and memory use impacts

Comparing and sorting by locale is usually slower than the default
sorting; slow-downs of two to four times have been observed.  It will
also consume more memory: once a Perl scalar variable has participated
in any string comparison or sorting operation obeying the locale
collation rules, it will take 3-15 times more memory than before.  (The
exact multiplier depends on the string's contents, the operating system
and the locale.) These downsides are dictated more by the operating
system's implementation of the locale system than by Perl.

=head2 Freely available locale definitions

The Unicode CLDR project extracts the POSIX portion of many of its
locales, available at

  http://unicode.org/Public/cldr/2.0.1/

(Newer versions of CLDR require you to compute the POSIX data yourself.
See L<http://unicode.org/Public/cldr/latest/>.)

There is a large collection of locale definitions at:

  http://std.dkuug.dk/i18n/WG15-collection/locales/

You should be aware that it is
unsupported, and is not claimed to be fit for any purpose.  If your
system allows installation of arbitrary locales, you may find the
definitions useful as they are, or as a basis for the development of
your own locales.

=head2 I18n and l10n

"Internationalization" is often abbreviated as B<i18n> because its first
and last letters are separated by eighteen others.  (You may guess why
the internalin ... internaliti ... i18n tends to get abbreviated.)  In
the same way, "localization" is often abbreviated to B<l10n>.

=head2 An imperfect standard

Internationalization, as defined in the C and POSIX standards, can be
criticized as incomplete, ungainly, and having too large a granularity.
(Locales apply to a whole process, when it would arguably be more useful
to have them apply to a single thread, window group, or whatever.)  They
also have a tendency, like standards groups, to divide the world into
nations, when we all know that the world can equally well be divided
into bankers, bikers, gamers, and so on.

=head1 Unicode and UTF-8

The support of Unicode is new starting from Perl version v5.6, and more fully
implemented in versions v5.8 and later.  See L<perluniintro>.

Starting in Perl v5.20, UTF-8 locales are supported in Perl, except for
C<LC_COLLATE> (use L<Unicode::Collate> instead).  If you have Perl v5.16
or v5.18 and can't upgrade, you can use

    use locale ':not_characters';

When this form of the pragma is used, only the non-character portions of
locales are used by Perl, for example C<LC_NUMERIC>.  Perl assumes that
you have translated all the characters it is to operate on into Unicode
(actually the platform's native character set (ASCII or EBCDIC) plus
Unicode).  For data in files, this can conveniently be done by also
specifying

    use open ':locale';

This pragma arranges for all inputs from files to be translated into
Unicode from the current locale as specified in the environment (see
L</ENVIRONMENT>), and all outputs to files to be translated back
into the locale.  (See L<open>).  On a per-filehandle basis, you can
instead use the L<PerlIO::locale> module, or the L<Encode::Locale>
module, both available from CPAN.  The latter module also has methods to
ease the handling of C<ARGV> and environment variables, and can be used
on individual strings.  If you know that all your locales will be
UTF-8, as many are these days, you can use the L<B<-C>|perlrun/-C>
command line switch.

This form of the pragma allows essentially seamless handling of locales
with Unicode.  The collation order will be by Unicode code point order.
It is strongly
recommended that when you need to order and sort strings that you use
the standard module L<Unicode::Collate> which gives much better results
in many instances than you can get with the old-style locale handling.

All the modules and switches just described can be used in v5.20 with
just plain C<use locale>, and, should the input locales not be UTF-8,
you'll get the less than ideal behavior, described below, that you get
with pre-v5.16 Perls, or when you use the locale pragma without the
C<:not_characters> parameter in v5.16 and v5.18.  If you are using
exclusively UTF-8 locales in v5.20 and higher, the rest of this section
does not apply to you.

There are two cases, multi-byte and single-byte locales.  First
multi-byte:

The only multi-byte (or wide character) locale that Perl is ever likely
to support is UTF-8.  This is due to the difficulty of implementation,
the fact that high quality UTF-8 locales are now published for every
area of the world (L<http://unicode.org/Public/cldr/2.0.1/> for
ones that are already set-up, but from an earlier version;
L<http://unicode.org/Public/cldr/latest/> for the most up-to-date, but
you have to extract the POSIX information yourself), and that
failing all that you can use the L<Encode> module to translate to/from
your locale.  So, you'll have to do one of those things if you're using
one of these locales, such as Big5 or Shift JIS.  For UTF-8 locales, in
Perls (pre v5.20) that don't have full UTF-8 locale support, they may
work reasonably well (depending on your C library implementation)
simply because both
they and Perl store characters that take up multiple bytes the same way.
However, some, if not most, C library implementations may not process
the characters in the upper half of the Latin-1 range (128 - 255)
properly under C<LC_CTYPE>.  To see if a character is a particular type
under a locale, Perl uses the functions like C<isalnum()>.  Your C
library may not work for UTF-8 locales with those functions, instead
only working under the newer wide library functions like C<iswalnum()>,
which Perl does not use.
These multi-byte locales are treated like single-byte locales, and will
have the restrictions described below.  Starting in Perl v5.22 a warning
message is raised when Perl detects a multi-byte locale that it doesn't
fully support.

For single-byte locales,
Perl generally takes the tack to use locale rules on code points that can fit
in a single byte, and Unicode rules for those that can't (though this
isn't uniformly applied, see the note at the end of this section).  This
prevents many problems in locales that aren't UTF-8.  Suppose the locale
is ISO8859-7, Greek.  The character at 0xD7 there is a capital Chi. But
in the ISO8859-1 locale, Latin1, it is a multiplication sign.  The POSIX
regular expression character class C<[[:alpha:]]> will magically match
0xD7 in the Greek locale but not in the Latin one.

However, there are places where this breaks down.  Certain Perl constructs are
for Unicode only, such as C<\p{Alpha}>.  They assume that 0xD7 always has its
Unicode meaning (or the equivalent on EBCDIC platforms).  Since Latin1 is a
subset of Unicode and 0xD7 is the multiplication sign in both Latin1 and
Unicode, C<\p{Alpha}> will never match it, regardless of locale.  A similar
issue occurs with C<\N{...}>.  Prior to v5.20, It is therefore a bad
idea to use C<\p{}> or
C<\N{}> under plain C<use locale>--I<unless> you can guarantee that the
locale will be ISO8859-1.  Use POSIX character classes instead.

Another problem with this approach is that operations that cross the
single byte/multiple byte boundary are not well-defined, and so are
disallowed.  (This boundary is between the codepoints at 255/256.)
For example, lower casing LATIN CAPITAL LETTER Y WITH DIAERESIS (U+0178)
should return LATIN SMALL LETTER Y WITH DIAERESIS (U+00FF).  But in the
Greek locale, for example, there is no character at 0xFF, and Perl
has no way of knowing what the character at 0xFF is really supposed to
represent.  Thus it disallows the operation.  In this mode, the
lowercase of U+0178 is itself.

The same problems ensue if you enable automatic UTF-8-ification of your
standard file handles, default C<open()> layer, and C<@@ARGV> on non-ISO8859-1,
non-UTF-8 locales (by using either the B<-C> command line switch or the
C<PERL_UNICODE> environment variable; see L<perlrun>).
Things are read in as UTF-8, which would normally imply a Unicode
interpretation, but the presence of a locale causes them to be interpreted
in that locale instead.  For example, a 0xD7 code point in the Unicode
input, which should mean the multiplication sign, won't be interpreted by
Perl that way under the Greek locale.  This is not a problem
I<provided> you make certain that all locales will always and only be either
an ISO8859-1, or, if you don't have a deficient C library, a UTF-8 locale.

Still another problem is that this approach can lead to two code
points meaning the same character.  Thus in a Greek locale, both U+03A7
and U+00D7 are GREEK CAPITAL LETTER CHI.

Because of all these problems, starting in v5.22, Perl will raise a
warning if a multi-byte (hence Unicode) code point is used when a
single-byte locale is in effect.  (Although it doesn't check for this if
doing so would unreasonably slow execution down.)

Vendor locales are notoriously buggy, and it is difficult for Perl to test
its locale-handling code because this interacts with code that Perl has no
control over; therefore the locale-handling code in Perl may be buggy as
well.  (However, the Unicode-supplied locales should be better, and
there is a feed back mechanism to correct any problems.  See
L</Freely available locale definitions>.)

If you have Perl v5.16, the problems mentioned above go away if you use
the C<:not_characters> parameter to the locale pragma (except for vendor
bugs in the non-character portions).  If you don't have v5.16, and you
I<do> have locales that work, using them may be worthwhile for certain
specific purposes, as long as you keep in mind the gotchas already
mentioned.  For example, if the collation for your locales works, it
runs faster under locales than under L<Unicode::Collate>; and you gain
access to such things as the local currency symbol and the names of the
months and days of the week.  (But to hammer home the point, in v5.16,
you get this access without the downsides of locales by using the
C<:not_characters> form of the pragma.)

Note: The policy of using locale rules for code points that can fit in a
byte, and Unicode rules for those that can't is not uniformly applied.
Pre-v5.12, it was somewhat haphazard; in v5.12 it was applied fairly
consistently to regular expression matching except for bracketed
character classes; in v5.14 it was extended to all regex matches; and in
v5.16 to the casing operations such as C<\L> and C<uc()>.  For
collation, in all releases so far, the system's C<strxfrm()> function is
called, and whatever it does is what you get.

=head1 BUGS

=head2 Broken systems

In certain systems, the operating system's locale support
is broken and cannot be fixed or used by Perl.  Such deficiencies can
and will result in mysterious hangs and/or Perl core dumps when
C<use locale> is in effect.  When confronted with such a system,
please report in excruciating detail to <F<perlbug@@perl.org>>, and
also contact your vendor: bug fixes may exist for these problems
in your operating system.  Sometimes such bug fixes are called an
operating system upgrade.  If you have the source for Perl, include in
the perlbug email the output of the test described above in L</Testing
for broken locales>.

=head1 SEE ALSO

L<I18N::Langinfo>, L<perluniintro>, L<perlunicode>, L<open>,
L<POSIX/isalnum>, L<POSIX/isalpha>,
L<POSIX/isdigit>, L<POSIX/isgraph>, L<POSIX/islower>,
L<POSIX/isprint>, L<POSIX/ispunct>, L<POSIX/isspace>,
L<POSIX/isupper>, L<POSIX/isxdigit>, L<POSIX/localeconv>,
L<POSIX/setlocale>, L<POSIX/strcoll>, L<POSIX/strftime>,
L<POSIX/strtod>, L<POSIX/strxfrm>.

For special considerations when Perl is embedded in a C program,
see L<perlembed/Using embedded Perl with POSIX locales>.

=head1 HISTORY

Jarkko Hietaniemi's original F<perli18n.pod> heavily hacked by Dominic
Dunlop, assisted by the perl5-porters.  Prose worked over a bit by
Tom Christiansen, and updated by Perl 5 porters.
@


1.12
log
@Fix merge issues, remove excess files - match perl-5.20.2 dist
@
text
@d35 4
a38 3
UTF-8 locales, except for sorting and string comparisions.  (Use
L<Unicode::Collate> for these.)  Perl continues to support the old
non UTF-8 locales as well.
d44 3
a46 3
However, many of its locales have the POSIX-only data extracted, and are
available as UTF-8 locales at
L<http://unicode.org/Public/cldr/latest/>.)
d95 1
a95 1
these.  See L</Not within the scope of any "use locale" variant> below.
d108 2
a109 1
Perl itself will not use locales unless specifically requested to (but
d145 1
a145 1
the S<C<use locale>> pragma (see L<The use locale pragma>) where
d165 1
a165 1
=head2 The use locale pragma
d167 11
a177 1
By default, Perl itself ignores the current locale.  The S<C<use locale>>
d179 2
a180 14
Starting in v5.16, there is an optional parameter to this pragma:

    use locale ':not_characters';

This parameter allows better mixing of locales and Unicode (less useful
in v5.20 and later), and is
described fully in L</Unicode and UTF-8>, but briefly, it tells Perl to
not use the character portions of the locale definition, that is
the C<LC_CTYPE> and C<LC_COLLATE> categories.  Instead it will use the
native character set (extended by Unicode).  When using this parameter,
you are responsible for getting the external character set translated
into the native/Unicode one (which it already will be if it is one of
the increasingly popular UTF-8 locales).  There are convenient ways of
doing this, as described in L</Unicode and UTF-8>.
d197 1
a197 1
=item B<Not within the scope of any C<"use locale"> variant>
d199 2
a200 1
Only operations originating outside Perl should be affected, as follows:
d206 1
a206 9
The variables L<$!|perlvar/$ERRNO> (and its synonyms C<$ERRNO> and
C<$OS_ERROR>) and L<$^E|perlvar/$EXTENDED_OS_ERROR> (and its synonym
C<$EXTENDED_OS_ERROR>) when used as strings always are in terms of the
current locale and as if within the scope of L<"use bytes"|bytes>.  This is
likely to change in Perl v5.22.

=item *

The current locale is also used when going outside of Perl with
d217 1
a217 2
C<POSIX::strxfrm()> use C<LC_COLLATE>; and character classification
functions like C<POSIX::isalnum()> use C<LC_CTYPE>.  All such functions
d229 9
d246 1
a246 1
C<use locale> variant retain that effect even outside the scope.
d256 1
a256 1
within the scope of a C<use locale> variant, not whether the C<write()>
d262 1
a262 1
L<qrE<sol>E<sol>|perlop/qrE<sol>STRINGE<sol>msixpodual> with actual
d272 1
d275 1
a275 1
=item B<Under C<"use locale ':not_characters';">>
d281 1
a281 1
All the non-Perl operations.
a297 15
=back

=for comment
The nbsp below makes this look better (though not great)

E<160>

=item B<Under just plain C<"use locale";>>

=over 4

=item *

All the above operations

d319 6
d331 1
a331 1
Note that C<use locale> and C<use locale ':not_characters'> may be
d339 60
d401 7
a435 4
This simultaneously affects all threads of the program, so it may be
problematic to use locales in threaded applications except where there
is a single locale applicable to all threads.

d472 2
a473 2
Note that Perl ignores the current C<LC_CTYPE> and C<LC_COLLATE> locales
within the scope of a C<use locale ':not_characters'>.
d582 1
a582 1
environment variable C<PERL_BADLANG> to a zero value, for example "0".
d672 3
a674 1
C<LC_NUMERIC> and C<LC_MONETARY> locales.  (If you just want the name of
d735 4
d773 2
a774 2
In the scope of S<C<use locale>> (but not a
C<use locale ':not_characters'>), Perl looks to the C<LC_COLLATE>
d860 2
a861 2
In the scope of S<C<use locale>> (but not a
C<use locale ':not_characters'>), Perl obeys the C<LC_CTYPE> locale
a882 8
Finally, C<LC_CTYPE> affects the (deprecated) POSIX character-class test
functions--C<POSIX::isalpha()>, C<POSIX::islower()>, and so on.  For
example, if you move from the "C" locale to a 7-bit ISO 646 one,
you may find--possibly to your surprise--that C<"|"> moves from the
C<POSIX::ispunct()> class to C<POSIX::isalpha()>.
Unfortunately, this creates big problems for regular expressions. "|" still
means alternation even though it matches C<\w>.

d886 5
a890 1
languages, are not well-supported.  The UTF-8 locale support is actually a
d892 2
a893 2
as if no locale were in effect at all (except for tainting; see
L</SECURITY>).  POSIX locales, even UTF-8 ones,
d912 13
d933 4
a936 4
After a proper C<POSIX::setlocale()> call, and within the scope of one
of the C<use locale> variants, Perl obeys the C<LC_NUMERIC>
locale information, which controls an application's idea of how numbers
should be formatted for human readability.
d1078 2
a1079 2
Result string containing interpolated material is tainted if
C<use locale> (but not S<C<use locale ':not_characters'>>) is in effect.
d1088 2
a1089 2
I<etc>., are tainted if C<use locale> (but not
S<C<use locale ':not_characters'>>) is in effect, and the subpattern
d1113 2
a1114 2
operand of C<=~> becomes tainted when C<use locale>
(but not S<C<use locale ':not_characters'>>) is in effect if modified as
d1131 2
a1132 2
Results are tainted if C<use locale> (but not
S<C<use locale ':not_characters'>>) is in effect.
a1140 9
=item *

B<POSIX character class tests> (C<POSIX::isalnum()>,
C<POSIX::isalpha()>, C<POSIX::isdigit()>, C<POSIX::isgraph()>,
C<POSIX::islower()>, C<POSIX::isprint()>, C<POSIX::ispunct()>,
C<POSIX::isspace()>, C<POSIX::isupper()>, C<POSIX::isxdigit()>):

True/false results are never tainted.

d1192 2
a1193 2
This environment variable, available starting in Perl v5.20, and if it
evaluates to a TRUE value, tells Perl to not use the rest of the
d1205 2
a1206 3
variable is absent, or has a value that does not evaluate to integer
zero--that is, "0" or ""-- Perl will complain about locale setting
failures.
d1246 1
a1246 1
=item C<LC_CTYPE>.
d1280 1
a1280 1
category-specific C<LC_I<foo>>
d1331 4
d1343 1
a1343 1
pragma (see L<The use locale pragma>) or, in the unlikely event
d1380 4
a1383 1
  http://unicode.org/Public/cldr/latest/
d1464 4
a1467 1
area of the world (L<http://unicode.org/Public/cldr/latest/>), and that
d1483 3
a1485 1
have the restrictions described below.
d1532 5
@


1.11
log
@Fix merge conflicts, remove extra files, match upstream perl-5.20.1

ok deraadt@@ sthen@@ espie@@ miod@@
@
text
@d376 4
d546 1
a546 1
files.  Consult your local documentation for the exact details.  For in
d558 1
a558 1
or if you have the "env" application you can do in any shell
d719 1
a719 1
if you "use locale".
d756 1
a756 1
Perl only supports single-byte locales for C<LC_COLLATE>.  This means
d815 2
a816 1
functions--C<fc()>, C<lc()>, C<lcfirst()>, C<uc()>, and C<ucfirst()>; case-mapping
d823 2
a824 2
example, if you move from the "C" locale to a 7-bit Scandinavian one,
you may find--possibly to your surprise--that "|" moves from the
d832 1
a832 1
languages, are not supported.  The UTF-8 locale support is actually a
d845 5
a849 1
current locale.  All the escape sequences for particular characters,
d952 1
a952 1
characters such as "E<gt>" and "|" are alphanumeric.
d1409 4
a1412 3
only working under the newer wide library functions like C<iswalnum()>.
However, they are treated like single-byte locales, and will have the
restrictions described below.
d1432 1
a1432 1
locale will be a ISO8859-1.  Use POSIX character classes instead.
d1484 3
a1486 3
v5.16 to the casing operations such as C<"\L"> and C<uc()>.  For
collation, in all releases, the system's C<strxfrm()> function is called,
and whatever it does is what you get.
@


1.10
log
@Merge perl-5.18.2 plus local patches, remove old files

OK espie@@ sthen@@ deraadt@@
@
text
@d25 1
a25 1
Perl was extended to support the locale system.  This
d30 9
a38 8
often, the implementations) of locales, and their use for character sets
has mostly been supplanted by Unicode (see L<perlunitut> for an
introduction to that, and keep on reading here for how Unicode interacts
with locales in Perl).

Perl continues to support the old locale system, and starting in v5.16,
provides a hybrid way to use the Unicode character set, along with the
other portions of locales that may not be so problematic.
d44 2
a45 1
available at L<http://unicode.org/Public/cldr/latest/>.)
d56 1
a56 1
=item Category LC_NUMERIC: Numeric formatting
d61 1
a61 1
=item Category LC_MONETARY: Formatting of monetary amounts
d64 1
a64 1
The nbsp below makes this look better
d68 1
a68 1
=item Category LC_TIME: Date/Time formatting
d71 1
a71 1
The nbsp below makes this look better
d75 1
a75 1
=item Category LC_MESSAGES: Error and other messages
d77 2
a78 1
This for the most part is beyond the scope of Perl
d80 1
a80 1
=item Category LC_COLLATE: Collation
d85 1
a85 1
=item Category LC_CTYPE: Character Types
d89 7
d98 2
a99 1
More details on the categories are given below in L</LOCALE CATEGORIES>.
d107 4
a110 3
Perl will not use locales unless specifically requested to (see L</NOTES> below
for the partial exception of C<write()>).  But even if there is such a
request, B<all> of the following must be true for it to work properly:
d117 1
a117 1
you should find that the setlocale() function is a documented part of
d165 1
a165 1
By default, Perl ignores the current locale.  The S<C<use locale>>
d171 2
a172 1
This parameter allows better mixing of locales and Unicode, and is
d176 1
a176 1
native (extended by Unicode) character set.  When using this parameter,
d186 6
a191 5
effect at the start of the program, except that
C<L<LC_NUMERIC|/Category LC_NUMERIC: Numeric Formatting>> is always
initialized to the C locale (mentioned under L<Finding locales>).
If there is no valid environment, the current locale is undefined.  It
is likely, but not necessarily, the "C" locale.
d197 3
a199 1
=item B<Under C<use locale ':not_characters';>>
d205 23
a227 1
B<Format declarations> (format()) use C<LC_NUMERIC>
d231 3
a233 1
B<The POSIX date formatting function> (strftime()) uses C<LC_TIME>.
d238 1
a238 1
The nbsp below makes this look better
d242 53
a294 1
=item B<Under just plain C<use locale;>>
d296 8
a303 1
The above operations are affected, as well as the following:
d309 6
a314 3
B<The comparison operators> (C<lt>, C<le>, C<cmp>, C<ge>, and C<gt>) and
the POSIX string collation functions strcoll() and strxfrm() use
C<LC_COLLATE>.  sort() is also affected if used without an
d325 1
a325 1
L<Category LC_COLLATE: Collation>.
d329 2
a330 2
B<Regular expressions and case-modification functions> (uc(), lc(),
ucfirst(), and lcfirst()) use C<LC_CTYPE>
d349 1
a349 1
POSIX::setlocale() function:
d354 4
d359 2
d369 3
a371 2
        # LC_CTYPE now reset to default defined by LC_ALL/LC_CTYPE/LANG
        # environment variables.  See below for documentation.
d376 1
a376 1
The first argument of setlocale() gives the B<category>, the second the
d385 2
a386 2
If no second argument is provided and the category is something else
than LC_ALL, the function returns a string naming the current locale
d388 3
a390 1
subsequent call to setlocale().
d392 1
a392 1
If no second argument is provided and the category is LC_ALL, the
d395 1
a395 1
or a single locale name.  Please consult your setlocale(3) man page for
d401 1
a401 1
another call to setlocale().  (In some implementations, the return
a411 3
If the second argument does not correspond to a valid locale, the locale
for the category is not changed, and the function returns I<undef>.

d415 6
a420 1
For further information about the categories, consult setlocale(3).
d424 1
a424 1
For locales available in your system, consult also setlocale(3) to
d450 1
a450 1
Sadly, even though the calling interface for setlocale() has been
d469 5
a473 3
is (American) English and its character codeset ASCII.
B<Warning>. The C locale delivered by some vendors may not
actually exactly match what the C standard calls for.  So beware.
d490 1
a490 1
This means that your locale settings had LC_ALL set to "En_US" and
d493 22
a514 5
that is supposed to work no matter what.  This usually means your locale
settings were wrong, they mention locales your system has never heard
of, or the locale installation in your system has problems (for example,
some system files are broken or missing).  There are quick and temporary
fixes to these problems, as well as more thorough and lasting fixes.
d522 1
a522 1
environment variable PERL_BADLANG to a zero value, for example "0".
d528 2
a529 2
variable LC_ALL to "C".  This method is perhaps a bit more civilized
than the PERL_BADLANG approach, but setting LC_ALL (or
d536 1
a536 1
easily deducible.  For example, the variable LC_COLLATE may well affect
d610 1
a610 1
The POSIX::localeconv() function allows you to get particulars of the
d613 1
a613 1
the current locale for a particular category, use POSIX::setlocale()
d626 1
a626 1
localeconv() takes no arguments, and returns B<a reference to> a hash.
d632 1
a632 1
explicit C<use locale>, because localeconv() always observes the
d676 1
a676 1
I18N::Langinfo::langinfo() function, available at least in Unix-like
d679 2
a680 2
The following example will import the langinfo() function itself and
three constants to be used as arguments to langinfo(): a constant for
d705 1
a705 1
=head2 Category LC_COLLATE: Collation
d742 1
a742 1
can use POSIX::strcoll() if you don't want this fall-back:
d748 1
a748 1
$equal_in_locale will be true if the collation locale specifies a
d752 5
d759 1
a759 1
efficiency by using POSIX::strxfrm() in conjunction with C<eq>:
d770 1
a770 1
strxfrm() takes a string and maps it into a transformed string for use
d773 2
a774 2
call strxfrm() for both operands, then do a char-by-char
comparison of the transformed strings.  By calling strxfrm() explicitly
d781 1
a781 1
embedded in strings; if you call strxfrm() directly, it treats the first
d784 1
a784 1
of your operating system to the next.  In short, don't call strxfrm()
d788 3
a790 2
needed: strcoll() and strxfrm() exist only to generate locale-dependent
results, and so always obey the current C<LC_COLLATE> locale.
d792 1
a792 1
=head2 Category LC_CTYPE: Character Types
d797 2
a798 1
alphabetic.  This affects Perl's C<\w> regular expression metanotation,
d800 2
a801 2
numeric, and including other special characters such as the underscore or
hyphen.  (Consult L<perlre> for more information about
d805 3
d811 3
a813 3
functions--lc(), lcfirst, uc(), and ucfirst(); case-mapping
interpolation with C<\l>, C<\L>, C<\u>, or C<\U> in double-quoted strings
and C<s///> substitutions; and case-independent regular expression
d816 5
a820 4
Finally, C<LC_CTYPE> affects the POSIX character-class test
functions--isalpha(), islower(), and so on.  For example, if you move
from the "C" locale to a 7-bit Scandinavian one, you may find--possibly
to your surprise--that "|" moves from the ispunct() class to isalpha().
d824 15
d843 1
a843 1
but new-line) work on the platform character set.
d851 1
a851 1
=head2 Category LC_NUMERIC: Numeric Formatting
d853 2
a854 1
After a proper POSIX::setlocale() call, Perl obeys the C<LC_NUMERIC>
d856 2
a857 3
should be formatted for human readability by the printf(), sprintf(), and
write() functions. String-to-numeric conversion by the POSIX::strtod()
function is also affected.  In most implementations the only effect is to
d859 1
a859 1
These functions aren't aware of such niceties as thousands separation and
d862 2
a863 4
Output produced by print() is also affected by the current locale: it
corresponds to what you'd get from printf() in the "C" locale.  The
same is true for Perl's internal conversions between numeric and
string formats:
d865 1
a865 1
        use POSIX qw(strtod setlocale LC_NUMERIC);
d867 1
a867 1
	setlocale LC_NUMERIC, "";
d869 1
a869 1
        $n = 5/2;   # Assign numeric 2.5 to $n
d871 1
a871 1
        $a = " $n"; # Locale-dependent conversion to string
d873 1
a873 1
        print "half five is $n\n";       # Locale-dependent output
d875 2
a876 4
        printf "half five is %g\n", $n;  # Locale-dependent output

        print "DECIMAL POINT IS COMMA\n"
            if $n == (strtod("2,5"))[0]; # Locale-dependent conversion
d880 1
a880 1
=head2 Category LC_MONETARY: Formatting of monetary amounts
d885 2
a886 2
issue.)  Consequently, Perl takes no notice of it.  If you really want
to use C<LC_MONETARY>, you can query its contents--see
d895 1
a895 1
=head2 LC_TIME
d897 1
a897 1
Output produced by POSIX::strftime(), which builds a formatted
d910 3
a912 3
Note: C<use locale> isn't needed in this example: as a function that
exists only to generate locale-dependent results, strftime() always
obeys the current C<LC_TIME> locale.
d919 3
a921 4
The remaining locale category, C<LC_MESSAGES> (possibly supplemented
by others in particular implementations) is not currently used by
Perl--except possibly to affect the behavior of library functions
called by extensions outside the standard Perl distribution and by the
d948 1
a948 1
"C:\U$name.$ext">, may produce dangerous results if a bogus LC_CTYPE
d965 1
a965 1
The date and day names in dates formatted by strftime() could be
d996 1
a996 1
B<Case-mapping interpolation> (with C<\l>, C<\L>, C<\u> or C<\U>)
d1007 20
a1026 9
Subpatterns, either delivered as a list-context result or as $1 etc.
are tainted if C<use locale> (but not S<C<use locale ':not_characters'>>)
is in effect, and the subpattern regular
expression contains C<\w> (to match an alphanumeric character), C<\W>
(non-alphanumeric character), C<\s> (whitespace character), or C<\S>
(non whitespace character).  The matched-pattern variable, $&, $`
(pre-match), $' (post-match), and $+ (last match) are also tainted if
C<use locale> is in effect and the regular expression contains C<\w>,
C<\W>, C<\s>, or C<\S>.
d1036 2
a1037 2
expression match involving C<\w>, C<\W>, C<\s>, or C<\S>; or of
case-mapping with C<\l>, C<\L>,C<\u> or C<\U>.
d1041 1
a1041 1
B<Output formatting functions> (printf() and write()):
d1049 1
a1049 1
B<Case-mapping functions> (lc(), lcfirst(), uc(), ucfirst()):
d1056 2
a1057 2
B<POSIX locale-dependent functions> (localeconv(), strcoll(),
strftime(), strxfrm()):
d1063 4
a1066 3
B<POSIX character class tests> (isalnum(), isalpha(), isdigit(),
isgraph(), islower(), isprint(), ispunct(), isspace(), isupper(),
isxdigit()):
d1112 1
a1112 1
This third program fails to run because $& is tainted: it is the result
d1119 9
d1138 1
a1138 1
B<NOTE>: PERL_BADLANG only gives you a way to hide the warning message.
d1145 9
a1153 2
part of the standardized (ISO C, XPG4, POSIX 1.c) setlocale() method
for controlling an application's opinion on data.
d1157 1
a1157 1
=item LC_ALL
d1162 1
a1162 1
=item LANGUAGE
d1176 1
a1176 1
=item LC_CTYPE
d1182 1
a1182 1
=item LC_COLLATE
d1188 1
a1188 1
=item LC_MONETARY
d1194 1
a1194 1
=item LC_NUMERIC
d1200 1
a1200 1
=item LC_TIME
d1206 1
a1206 1
=item LANG
d1210 1
a1210 1
category-specific C<LC_...>.
d1216 1
a1216 1
The LC_NUMERIC controls the numeric output:
d1223 1
a1223 1
and also how strings are parsed by POSIX::strtod() as numbers:
d1233 28
a1300 8
=head2 write() and LC_NUMERIC

If a program's environment specifies an LC_NUMERIC locale and C<use
locale> is in effect when the format is declared, the locale is used
to specify the decimal point character in formatted output.  Formatted
output cannot be controlled by C<use locale> at the time when write()
is called.

d1338 5
a1342 3
implemented in version v5.8 and later.  See L<perluniintro>.  It is
strongly recommended that when combining Unicode and locale (starting in
v5.16), you use
d1362 1
a1362 1
on individual strings.  Also, if you know that all your locales will be
d1367 2
a1368 1
with Unicode.  The collation order will be Unicode's.  It is strongly
d1373 21
a1393 10
For pre-v5.16 Perls, or if you use the locale pragma without the
C<:not_characters> parameter, Perl tries to work with both Unicode and
locales--but there are problems.

Perl does not handle multi-byte locales in this case, such as have been
used for various
Asian languages, such as Big5 or Shift JIS.  However, the increasingly
common multi-byte UTF-8 locales, if properly implemented, may work
reasonably well (depending on your C library implementation) in this
form of the locale pragma, simply because both
d1397 1
a1397 1
properly under LC_CTYPE.  To see if a character is a particular type
d1401 2
d1404 1
d1414 1
a1414 1
However, there are places where this breaks down.  Certain constructs are
d1419 2
a1420 1
issue occurs with C<\N{...}>.  It is therefore a bad idea to use C<\p{}> or
d1426 1
a1426 1
disallowed.  (This boundary is between the codepoints at 255/256.).
d1446 4
d1489 3
a1491 1
operating system upgrade.
d1502 3
@


1.9
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@d25 1
a25 1
Perl was extended, starting in 5.004, to support the locale system.  This
d79 1
a79 1
This indicates the ordering of letters for comparision and sorting.
a248 3
        # This functionality not usable prior to Perl 5.004
        require 5.004;

a505 2
    # See comments in previous example
    require 5.004;
d580 1
a580 1
"color" follows "chocolate" in English, what about in Spanish?
d681 6
d919 1
a919 1
            or warn "Open of $untainted_output_file failed: $!\n";
@


1.8
log
@merge in perl 5.12.2 plus local changes
@
text
@d1 2
d9 84
a92 22
Perl supports language-specific notions of data such as "is this
a letter", "what is the uppercase equivalent of this letter", and
"which of these letters comes first".  These are important issues,
especially for languages other than English--but also for English: it
would be naE<iuml>ve to imagine that C<A-Za-z> defines all the "letters"
needed to write in English. Perl is also aware that some character other
than '.' may be preferred as a decimal point, and that output date
representations may be language-specific.  The process of making an
application take account of its users' preferences in such matters is
called B<internationalization> (often abbreviated as B<i18n>); telling
such an application about a particular set of preferences is known as
B<localization> (B<l10n>).

Perl can understand language-specific data via the standardized (ISO C,
XPG4, POSIX 1.c) method called "the locale system". The locale system is
controlled per application using one pragma, one function call, and
several environment variables.

B<NOTE>: This feature is new in Perl 5.004, and does not apply unless an
application specifically requests it--see L<Backward compatibility>.
The one exception is that write() now B<always> uses the current locale
- see L<"NOTES">.
d96 3
a98 3
If Perl applications are to understand and present your data
correctly according a locale of your choice, B<all> of the following
must be true:
d136 1
a136 1
=item *
d138 1
a138 1
B<The locale-determining environment variables (see L<"ENVIRONMENT">)
d140 1
a140 1
by yourself or by whoever set up your system account.
d142 1
a142 1
=item *
d154 51
a204 1
pragma tells Perl to use the current locale for some operations:
d230 1
a230 8
=item *

B<The formatting functions> (printf(), sprintf() and write()) use
C<LC_NUMERIC>

=item *

B<The POSIX date formatting function> (strftime()) uses C<LC_TIME>.
a233 3
C<LC_COLLATE>, C<LC_CTYPE>, and so on, are discussed further in 
L<LOCALE CATEGORIES>.

d235 4
a238 1
upon reaching the end of block enclosing C<use locale>.
d273 1
a273 1
L<LOCALE CATEGORIES> and L<"ENVIRONMENT">.  The locale is the name of a
d286 1
a286 1
concatenated locales names (separator also implementation-dependent)
d307 3
d360 2
d406 1
a406 1
for their effects in Perl.  Effects in other programs are 
d467 1
a467 1
standardization is weak in this area.  See again the 
d509 36
a544 36
        # See comments in previous example
        require 5.004;
        use POSIX qw(locale_h);

        # Get some of locale's numeric formatting parameters
        my ($thousands_sep, $grouping) =
             @@{localeconv()}{'thousands_sep', 'grouping'};

        # Apply defaults if values are missing
        $thousands_sep = ',' unless $thousands_sep;

	# grouping and mon_grouping are packed lists
	# of small integers (characters) telling the
	# grouping (thousand_seps and mon_thousand_seps
	# being the group dividers) of numbers and
	# monetary quantities.  The integers' meanings:
	# 255 means no more grouping, 0 means repeat
	# the previous grouping, 1-254 means use that
	# as the current grouping.  Grouping goes from
	# right to left (low to high digits).  In the
	# below we cheat slightly by never using anything
	# else than the first grouping (whatever that is).
	if ($grouping) {
	    @@grouping = unpack("C*", $grouping);
	} else {
	    @@grouping = (3);
	}

        # Format command line params for current locale
        for (@@ARGV) {
            $_ = int;    # Chop non-integer part
            1 while
            s/(\d)(\d{$grouping[0]}($|$thousands_sep))/$1$thousands_sep$2/;
            print "$_";
        }
        print "\n";
d560 2
a561 1
    my ($abday_1, $yesstr, $nostr) = map { langinfo } qw(ABDAY_1 YESSTR NOSTR);
d568 1
a568 1
    Sun? [yes/no] 
d580 2
a581 1
In the scope of S<C<use locale>>, Perl looks to the C<LC_COLLATE>
d583 3
a585 3
(ordering) of characters.  For example, 'b' follows 'a' in Latin
alphabets, but where do 'E<aacute>' and 'E<aring>' belong?  And while
'color' follows 'chocolate' in English, what about in Spanish?
d661 2
a662 1
In the scope of S<C<use locale>>, Perl obeys the C<LC_CTYPE> locale
d669 2
a670 2
setting, characters like 'E<aelig>', 'E<eth>', 'E<szlig>', and
'E<oslash>' may be understood as C<\w> characters.
d683 2
d688 1
a688 1
your application.  For strict matching of (mundane) letters and
d690 1
a690 1
should use C<\w> inside a C<no locale> block.  See L<"SECURITY">.
d699 1
a699 1
change the character used for the decimal point--perhaps from '.'  to ','.
d727 1
a727 1
The C standard defines the C<LC_MONETARY> category, but no function
d731 5
a735 5
to use C<LC_MONETARY>, you can query its contents--see 
L<The localeconv function>--and use the information that it returns in your 
application's own formatting of currency amounts.  However, you may well 
find that the information, voluminous and complex though it may be, still 
does not quite meet your requirements: currency formatting is a hard nut 
d845 1
a845 1
C<use locale> is in effect.
d854 2
a855 1
are tainted if C<use locale> is in effect, and the subpattern regular
d868 3
a870 2
operand of C<=~> becomes tainted when C<use locale> in effect
if modified as a result of a substitution based on a regular
d886 2
a887 1
Results are tainted if C<use locale> is in effect.
d990 1
a990 1
priority than L<LC_ALL>.  Moreover, it's not a single value but
d1036 4
a1039 4
        use locale;
        use POSIX qw(locale_h); # Imports setlocale() and the LC_ constants.
        setlocale(LC_NUMERIC, "fr_FR") or die "Pardon";
        printf "%g\n", 1.23; # If the "fr_FR" succeeded, probably shows 1,23.
d1043 5
a1047 5
        use locale;
        use POSIX qw(locale_h strtod);
        setlocale(LC_NUMERIC, "de_DE") or die "Entschuldigung";
        my $x = strtod("2,34") + 5;
        print $x, "\n"; # Probably shows 7,34.
d1059 4
a1062 1
pragma (see L<The use locale pragma>) to instruct it to do so.
d1093 5
a1097 7
Formats are the only part of Perl that unconditionally use information
from a program's locale; if a program's environment specifies an
LC_NUMERIC locale, it is always used to specify the decimal point
character in formatted output.  Formatted output cannot be controlled by
C<use locale> because the pragma is tied to the block structure of the
program, and, for historical reasons, formats exist outside that block
structure.
d1101 5
d1131 1
a1131 2
into bankers, bikers, gamers, and so on.  But, for now, it's the only
standard we've got.  This may be construed as a bug.
d1135 118
a1252 6
The support of Unicode is new starting from Perl version 5.6, and
more fully implemented in the version 5.8.  See L<perluniintro> and
L<perlunicode> for more details.

Usually locale settings and Unicode do not affect each other, but
there are exceptions, see L<perlunicode/Locales> for examples.
d1260 1
a1260 1
and will result in mysterious hangs and/or Perl core dumps when the
d1263 1
a1263 1
complain to your vendor: bug fixes may exist for these problems
d1281 1
a1281 3
Tom Christiansen.

Last update: Thu Jun 11 08:44:13 MDT 1998
@


1.7
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@d437 1
a437 1
I18N::Langinfo::langinfo() function, available at least in UNIX-like
d864 1
a864 1
If you are using "commercial" UNIXes you are most probably I<not>
d980 5
a984 2
There is a large collection of locale definitions at
ftp://dkuug.dk/i18n/WG15-collection .  You should be aware that it is
@


1.6
log
@merge in perl 5.8.8
@
text
@d180 1
a180 1
or a single locale name.  Please consult your L<setlocale(3)> for
d200 1
a200 1
For further information about the categories, consult L<setlocale(3)>.
d204 1
a204 1
For locales available in your system, consult also L<setlocale(3)> to
d292 1
a292 1
programs you run see the changes.  See L<ENVIRONMENT> for
d577 4
a580 4
In the scope of S<C<use locale>>, Perl obeys the C<LC_NUMERIC> locale
information, which controls an application's idea of how numbers should
be formatted for human readability by the printf(), sprintf(), and
write() functions.  String-to-numeric conversion by the POSIX::strtod()
d584 1
a584 1
so on.  (See L<The localeconv function> if you care about these things.)
a586 1
depends on whether C<use locale> or C<no locale> is in effect, and
d591 3
a593 2
        use POSIX qw(strtod);
        use locale;
d911 17
@


1.5
log
@Resolve conflicts, remove old files, merge local changes
@
text
@d296 1
a296 1
your B<sort> program (or whatever the program that arranges `records'
d739 2
a740 2
(non-alphanumeric character), C<\s> (white-space character), or C<\S>
(non white-space character).  The matched-pattern variable, $&, $`
@


1.4
log
@merge in perl 5.6.1 with our local changes
@
text
@d102 1
a102 1
perform a byte-by-byte comparison of their scalar operands.  What's
d105 2
a106 2
perform a byte-by-byte comparison, and only returns I<0> (equal) if the
operands are bit-for-bit identical.  If you really want to know whether
d313 4
d434 25
d500 1
a500 1
byte-by-byte comparison for strings that the locale says are equal. You
d525 1
a525 1
in byte-by-byte comparisons against other transformed strings during
d527 1
a527 1
call strxfrm() for both operands, then do a byte-by-byte
d606 2
d621 2
d642 3
d755 1
a755 1
=item  *
d763 1
a763 1
=item  *
d769 1
a769 1
=item  *
d776 1
a776 1
=item  *
d964 1
a964 1
C<ftp://dkuug.dk/i18n/WG15-collection>.  You should be aware that it is
d988 9
d1012 7
a1018 6
L<POSIX/isalnum>, L<POSIX/isalpha>, L<POSIX/isdigit>, 
L<POSIX/isgraph>, L<POSIX/islower>, L<POSIX/isprint>, 
L<POSIX/ispunct>, L<POSIX/isspace>, L<POSIX/isupper>, 
L<POSIX/isxdigit>, L<POSIX/localeconv>, L<POSIX/setlocale>, 
L<POSIX/strcoll>, L<POSIX/strftime>, L<POSIX/strtod>, 
L<POSIX/strxfrm>.
@


1.3
log
@perl-5.6.0 + local changes
@
text
@d127 2
a128 2
C<LC_COLLATE>, C<LC_CTYPE>, and so on, are discussed further in L<LOCALE
CATEGORIES>.
d292 1
a292 1
programs you run see the changes.  See L<ENVIRONMENT> for for
d351 2
a352 2
standardization is weak in this area.  See again the L<Finding
locales> about general rules.
d384 1
a384 1
corresponding, er, values.  See L<POSIX (3)/localeconv> for a longer
d448 1
a448 1
	A a B b C c D d D e
d452 1
a452 1
Here is a code snippet to tell what alphanumeric
d456 1
a456 1
        print +(sort grep /\w/, map { chr() } 0..255), "\n";
d462 1
a462 1
        print +(sort grep /\w/, map { chr() } 0..255), "\n";
d521 3
a523 2
which stands for alphanumeric characters--that is, alphabetic and
numeric characters.  (Consult L<perlre> for more information about
d557 5
a561 5
Output produced by print() is B<never> affected by the
current locale: it is independent of whether C<use locale> or C<no
locale> is in effect, and corresponds to what you'd get from printf()
in the "C" locale.  The same is true for Perl's internal conversions
between numeric and string formats:
d568 1
a568 1
        $a = " $n"; # Locale-independent conversion to string
d570 1
a570 1
        print "half five is $n\n";       # Locale-independent output
d583 6
a588 5
to use C<LC_MONETARY>, you can query its contents--see L<The localeconv
function>--and use the information that it returns in your application's
own formatting of currency amounts.  However, you may well find that
the information, voluminous and complex though it may be, still does not
quite meet your requirements: currency formatting is a hard nut to crack.
a645 9
Some systems are broken in that they allow the "C" locale to be
overridden by users.  If the decimal point character in the
C<LC_NUMERIC> category of the "C" locale is surreptitiously changed
from a dot to a comma, C<sprintf("%g", 0.123456e3)> produces a
string result of "123,456".  Many people would interpret this as
one hundred and twenty-three thousand, four hundred and fifty-six.

=item *

d681 3
a683 1
=item B<Comparison operators> (C<lt>, C<le>, C<ge>, C<gt> and C<cmp>):
d687 3
a689 1
=item B<Case-mapping interpolation> (with C<\l>, C<\L>, C<\u> or C<\U>)
d694 3
a696 1
=item B<Matching operator> (C<m//>):
d709 3
a711 1
=item B<Substitution operator> (C<s///>):
d719 1
a719 1
=item B<Output formatting functions> (printf() and write()):
d721 1
a721 1
Success/failure result is never tainted.
d723 7
a729 1
=item B<Case-mapping functions> (lc(), lcfirst(), uc(), ucfirst()):
d733 3
a735 1
=item B<POSIX locale-dependent functions> (localeconv(), strcoll(),
d740 3
a742 1
=item B<POSIX character class tests> (isalnum(), isalpha(), isdigit(),
d960 1
a960 1
please report in excruciating detail to <F<perlbug@@perl.com>>, and
d967 6
a972 31
L<POSIX (3)/isalnum>

L<POSIX (3)/isalpha>

L<POSIX (3)/isdigit>

L<POSIX (3)/isgraph>

L<POSIX (3)/islower>

L<POSIX (3)/isprint>,

L<POSIX (3)/ispunct>

L<POSIX (3)/isspace>

L<POSIX (3)/isupper>,

L<POSIX (3)/isxdigit>

L<POSIX (3)/localeconv>

L<POSIX (3)/setlocale>,

L<POSIX (3)/strcoll>

L<POSIX (3)/strftime>

L<POSIX (3)/strtod>,

L<POSIX (3)/strxfrm>
@


1.2
log
@perl5.005_03 (stock)
@
text
@d312 1
a312 1
	
d335 1
a335 1
In this case, see L<Permanently fixing system locale configuration>.
d337 1
a337 1
=head2 Permanently fixing your locale configuration
d611 6
a616 2
Perl--except possibly to affect the behavior of library functions called
by extensions outside the standard Perl distribution.
d644 6
a649 5
If the decimal point character in the C<LC_NUMERIC> locale is
surreptitiously changed from a dot to a comma, C<sprintf("%g",
0.123456e3)> produces a string result of "123,456". Many people would
interpret this as one hundred and twenty-three thousand, four hundred
and fifty-six.
a716 4

=item B<In-memory formatting function> (sprintf()):

Result is tainted if C<use locale> is in effect.
@


1.1
log
@perl 5.004_04
@
text
@d7 12
a18 11
Perl supports language-specific notions of data such as "is this a
letter", "what is the uppercase equivalent of this letter", and "which
of these letters comes first".  These are important issues, especially
for languages other than English - but also for English: it would be
very naE<iuml>ve to think that C<A-Za-z> defines all the "letters". Perl
is also aware that some character other than '.' may be preferred as a
decimal point, and that output date representations may be
language-specific.  The process of making an application take account of
its users' preferences in such matters is called B<internationalization>
(often abbreviated as B<i18n>); telling such an application about a
particular set of preferences is known as B<localization> (B<l10n>).
d26 1
a26 1
application specifically requests it - see L<Backward compatibility>.
d32 1
a32 1
If Perl applications are to be able to understand and present your data
d46 1
a46 1
B<Definitions for the locales which you use must be installed>.  You, or
d49 4
a52 4
in which they are installed, vary from system to system.  Some systems
provide only a few, hard-wired, locales, and do not allow more to be
added; others allow you to add "canned" locales provided by the system
supplier; still others allow you or the system administrator to define
d54 1
a54 1
provide canned locales which are not delivered with your operating
d75 2
a76 2
must be correctly set up>, either by yourself, or by the person who set
up your system account, at the time the application is started.
d98 2
a99 2
C<LC_COLLATE>.  sort() is also affected if it is used without an
explicit comparison function because it uses C<cmp> by default.
d101 1
a101 1
B<Note:> C<eq> and C<ne> are unaffected by the locale: they always
d107 1
a107 1
two strings - which C<eq> and C<cmp> may consider different - are equal
d130 2
a131 2
The default behavior returns with S<C<no locale>> or on reaching the
end of the enclosing block.
d133 1
a133 1
Note that the string result of any operation that uses locale
d172 17
a188 9
If no second argument is provided, the function returns a string naming
the current locale for the category.  You can use this value as the
second argument in a subsequent call to setlocale().  If a second
argument is given and it corresponds to a valid locale, the locale for
the category is set to that value, and the function returns the
now-current locale value.  You can use this in a subsequent call to
setlocale().  (In some implementations, the return value may sometimes
differ from the value you gave as the second argument - think of it as
an alias for the value that you gave.)
d193 1
a193 1
return to the default which was in force when Perl started up: changes
d195 1
a195 1
be noticed, depending on the implementation of your system's C library.
d201 6
a206 4
For the locales available in your system, also consult L<setlocale(3)>
and see whether it leads you to the list of the available locales
(search for the I<SEE ALSO> section).  If that fails, try the following
command lines:
d218 2
d223 1
d228 1
d231 11
a241 4
standardized, the names of the locales and the directories where
the configuration is, have not.  The basic form of the name is
I<language_country/territory>B<.>I<codeset>, but the
latter parts are not always present.
d245 2
a246 2
mainly that the first one is defined by the C standard and the second by
the POSIX standard.  What they define is the B<default locale> in which
d248 1
a248 1
environment.  (The default default locale, if you will.)  Its language
d255 108
d369 1
a369 1
with a single parameter - see L<The setlocale function>.)
d382 7
a388 7
The keys of this hash are formatting variable names such as
C<decimal_point> and C<thousands_sep>; the values are the corresponding
values.  See L<POSIX (3)/localeconv> for a longer example, which lists
all the categories an implementation might be expected to provide; some
provide more and others fewer, however.  Note that you don't need C<use
locale>: as a function with the job of querying the locale, localeconv()
always observes the current locale.
d390 2
a391 2
Here's a simple-minded example program which rewrites its command line
parameters as integers formatted correctly in the current locale:
d403 17
a419 1
        $grouping = 3 unless $grouping;
d425 1
a425 1
            s/(\d)(\d{$grouping}($|$thousands_sep))/$1$thousands_sep$2/;
d432 3
a434 4
The subsections which follow describe basic locale categories.  As well
as these, there are some combination categories which allow the
manipulation of more than one basic category at a time.  See
L<"ENVIRONMENT"> for a discussion of these.
d438 13
a450 4
When in the scope of S<C<use locale>>, Perl looks to the C<LC_COLLATE>
environment variable to determine the application's notions on the
collation (ordering) of characters.  ('b' follows 'a' in Latin
alphabets, but where do 'E<aacute>' and 'E<aring>' belong?)
d452 2
a453 2
Here is a code snippet that will tell you what are the alphanumeric
characters in the current locale, in the locale order:
d471 1
a471 1
byte-by-byte comparison for strings which the locale says are equal. You
d479 1
a479 1
dictionary-like ordering which ignores space characters completely, and
d482 1
a482 1
If you have a single string which you want to check for "equality in
d498 2
a499 2
call strxfrm() for both their operands, then do a byte-by-byte
comparison of the transformed strings.  By calling strxfrm() explicitly,
d501 1
a501 1
a couple of transformations.  In fact, it doesn't save anything: Perl
d503 1
a503 1
string the first time it's needed in a comparison, then keeps it around
d507 2
a508 2
null it finds as a terminator.  And don't expect the transformed strings
it produces to be portable across systems - or even from one revision
d512 1
a512 1
Note: C<use locale> isn't shown in some of these examples, as it isn't
d518 1
a518 1
When in the scope of S<C<use locale>>, Perl obeys the C<LC_CTYPE> locale
d521 1
a521 1
which stands for alphanumeric characters - that is, alphabetic and
d527 1
a527 1
The C<LC_CTYPE> locale also provides the map used in translating
d529 3
a531 3
functions - lc(), lcfirst, uc() and ucfirst(); case-mapping
interpolation with C<\l>, C<\L>, C<\u> or <\U> in double-quoted strings
and in C<s///> substitutions; and case-independent regular expression
d534 4
a537 4
Finally, C<LC_CTYPE> affects the POSIX character-class test functions -
isalpha(), islower() and so on.  For example, if you move from the "C"
locale to a 7-bit Scandinavian one, you may find - possibly to your
surprise - that "|" moves from the ispunct() class to isalpha().
d541 2
a542 2
your application.  For strict matching of (unaccented) letters and
digits - for example, in command strings - locale-aware applications
d547 8
a554 9
When in the scope of S<C<use locale>>, Perl obeys the C<LC_NUMERIC>
locale information, which controls application's idea of how numbers
should be formatted for human readability by the printf(), sprintf(),
and write() functions.  String to numeric conversion by the
POSIX::strtod() function is also affected.  In most implementations the
only effect is to change the character used for the decimal point -
perhaps from '.'  to ',': these functions aren't aware of such niceties
as thousands separation and so on.  (See L<The localeconv function> if
you care about these things.)
d556 1
a556 1
Note that output produced by print() is B<never> affected by the
d578 2
a579 2
The C standard defines the C<LC_MONETARY> category, but no function that
is affected by its contents.  (Those with experience of standards
d582 5
a586 5
to use C<LC_MONETARY>, you can query its contents - see L<The localeconv
function> - and use the information that it returns in your
application's own formatting of currency amounts.  However, you may well
find that the information, though voluminous and complex, does not quite
meet your requirements: currency formatting is a hard nut to crack.
d590 1
a590 1
The output produced by POSIX::strftime(), which builds a formatted
d594 1
a594 1
be "janvier".  Here's how to get a list of the long month names in the
d603 1
a603 1
Note: C<use locale> isn't needed in this example: as a function which
d609 4
a612 4
The remaining locale category, C<LC_MESSAGES> (possibly supplemented by
others in particular implementations) is not currently used by Perl -
except possibly to affect the behavior of library functions called by
extensions which are not part of the standard Perl distribution.
d616 1
a616 1
While the main discussion of Perl security issues can be found in
d619 2
a620 2
Locales - particularly on systems which allow unprivileged users to
build their own locales - are untrustworthy.  A malicious (or just plain
d629 1
a629 1
C<\w> may be spoofed by an C<LC_CTYPE> locale which claims that
d653 1
a653 1
An application which takes the trouble to use the information in
d655 1
a655 1
if that locale has been subverted.  Or it make may make payments in US
d662 1
a662 1
C<LC_DATE> locale.  ("Look - it says I wasn't in the building on
d668 1
a668 1
application's environment which may maliciously be modified presents
d670 1
a670 1
programming language which allows you to write programs which take
d673 2
a674 2
Perl cannot protect you from all of the possibilities shown in the
examples - there is no substitute for your own vigilance - but, when
d676 1
a676 1
L<perlsec>) to mark string results which become locale-dependent, and
d678 1
a678 1
tainting behavior of operators and functions which may be affected by
d687 1
a687 1
=item B<Case-mapping interpolation> (with C<\l>, C<\L>, C<\u> or <\U>)
d696 1
a696 1
Subpatterns, either delivered as an array-context result, or as $1 etc.
d700 1
a700 1
(non white-space character).  The matched pattern variable, $&, $`
d708 2
a709 2
operand of C<=~> becomes tainted when C<use locale> in effect,
if it is modified as a result of a substitution based on a regular
d711 1
a711 1
case-mapping with C<\l>, C<\L>,C<\u> or <\U>.
d715 1
a715 1
Result is tainted if "use locale" is in effect.
d753 2
a754 2
a regular expression: the second example - which still ignores locale
information - runs, creating the file named on its command line
d766 1
a766 1
Compare this with a very similar program which is locale-aware:
d779 1
a779 1
of a match involving C<\w> when C<use locale> is in effect.
d789 5
a793 4
system is lacking (broken) is some way - or if you mistyped the name of
a locale when you set up your environment.  If this environment variable
is absent, or has a value which does not evaluate to integer zero - that
is "0" or "" - Perl will complain about locale setting failures.
d809 1
a809 1
C<LC_ALL> is the "override-all" locale environment variable. If it is
d812 14
d869 6
a874 7
generally behaving as if something similar to the C<"C"> locale (see
L<The setlocale function>) was always in force, even if the program
environment suggested otherwise.  By default, Perl still behaves this
way so as to maintain backward compatibility.  If you want a Perl
application to pay attention to locale information, you B<must> use
the S<C<use locale>> pragma (see L<The use locale Pragma>) to
instruct it to do so.
d877 2
a878 2
information if that was available, that is, C<\w> did understand what
are the letters according to the locale environment variables.
d884 1
a884 1
In versions of Perl prior to 5.004 per-locale collation was possible
d905 1
a905 1
Formats are the only part of Perl which unconditionally use information
d918 1
a918 1
system allows the installation of arbitrary locales, you may find the
d944 1
a944 1
In certain system environments the operating system's locale support
d949 1
a949 1
complain to your vendor: maybe some bug fixes exist for these problems
d955 30
a984 5
L<POSIX (3)/isalnum>, L<POSIX (3)/isalpha>, L<POSIX (3)/isdigit>,
L<POSIX (3)/isgraph>, L<POSIX (3)/islower>, L<POSIX (3)/isprint>,
L<POSIX (3)/ispunct>, L<POSIX (3)/isspace>, L<POSIX (3)/isupper>,
L<POSIX (3)/isxdigit>, L<POSIX (3)/localeconv>, L<POSIX (3)/setlocale>,
L<POSIX (3)/strcoll>, L<POSIX (3)/strftime>, L<POSIX (3)/strtod>,
d990 2
a991 1
Dunlop, assisted by the perl5-porters.
d993 1
a993 1
Last update: Wed Jan 22 11:04:58 EST 1997
@


1.1.1.1
log
@perl5.005_03
@
text
@d7 11
a17 12
Perl supports language-specific notions of data such as "is this
a letter", "what is the uppercase equivalent of this letter", and
"which of these letters comes first".  These are important issues,
especially for languages other than English--but also for English: it
would be naE<iuml>ve to imagine that C<A-Za-z> defines all the "letters"
needed to write in English. Perl is also aware that some character other
than '.' may be preferred as a decimal point, and that output date
representations may be language-specific.  The process of making an
application take account of its users' preferences in such matters is
called B<internationalization> (often abbreviated as B<i18n>); telling
such an application about a particular set of preferences is known as
B<localization> (B<l10n>).
d25 1
a25 1
application specifically requests it--see L<Backward compatibility>.
d31 1
a31 1
If Perl applications are to understand and present your data
d45 1
a45 1
B<Definitions for locales that you use must be installed>.  You, or
d48 4
a51 4
in which they are installed all vary from system to system.  Some systems
provide only a few, hard-wired locales and do not allow more to be
added.  Others allow you to add "canned" locales provided by the system
supplier.  Still others allow you or the system administrator to define
d53 1
a53 1
provide canned locales that are not delivered with your operating
d74 2
a75 2
must be correctly set up> at the time the application is started, either
by yourself or by whoever set up your system account.
d97 2
a98 2
C<LC_COLLATE>.  sort() is also affected if used without an
explicit comparison function, because it uses C<cmp> by default.
d100 1
a100 1
B<Note:> C<eq> and C<ne> are unaffected by locale: they always
d106 1
a106 1
two strings--which C<eq> and C<cmp> may consider different--are equal
d129 2
a130 2
The default behavior is restored with the S<C<no locale>> pragma, or
upon reaching the end of block enclosing C<use locale>.
d132 1
a132 1
The string result of any operation that uses locale
d171 9
a179 17
If no second argument is provided and the category is something else
than LC_ALL, the function returns a string naming the current locale
for the category.  You can use this value as the second argument in a
subsequent call to setlocale().

If no second argument is provided and the category is LC_ALL, the
result is implementation-dependent.  It may be a string of
concatenated locales names (separator also implementation-dependent)
or a single locale name.  Please consult your L<setlocale(3)> for
details.

If a second argument is given and it corresponds to a valid locale,
the locale for the category is set to that value, and the function
returns the now-current locale value.  You can then use this in yet
another call to setlocale().  (In some implementations, the return
value may sometimes differ from the value you gave as the second
argument--think of it as an alias for the value you gave.)
d184 1
a184 1
return to the default that was in force when Perl started up: changes
d186 1
a186 1
be noticed, depending on your system's C library.
d192 4
a195 6

=head2 Finding locales

For locales available in your system, consult also L<setlocale(3)> to
see whether it leads to the list of available locales (search for the
I<SEE ALSO> section).  If that fails, try the following command lines:
a206 2
	ls /usr/share/locale

a209 1
        en_US.iso88591      de_DE.iso88591      ru_RU.iso88595
a213 1
        english.roman8                          russian.koi8r
d216 4
a219 11
standardized, names of locales and the directories where the
configuration resides have not been.  The basic form of the name is
I<language_territory>B<.>I<codeset>, but the latter parts after
I<language> are not always present.  The I<language> and I<country>
are usually from the standards B<ISO 3166> and B<ISO 639>, the
two-letter abbreviations for the countries and the languages of the
world, respectively.  The I<codeset> part often mentions some B<ISO
8859> character set, the Latin codesets.  For example, C<ISO 8859-1>
is the so-called "Western European codeset" that can be used to encode
most Western European languages adequately.  Again, there are several
ways to write even the name of that one standard.  Lamentably.
d223 2
a224 2
mainly that the first one is defined by the C standard, the second by
the POSIX standard.  They define the B<default locale> in which
d226 1
a226 1
environment.  (The I<default> default locale, if you will.)  Its language
a232 108
=head2 LOCALE PROBLEMS

You may encounter the following warning message at Perl startup:

	perl: warning: Setting locale failed.
	perl: warning: Please check that your locale settings:
	        LC_ALL = "En_US",
	        LANG = (unset)
	    are supported and installed on your system.
	perl: warning: Falling back to the standard locale ("C").

This means that your locale settings had LC_ALL set to "En_US" and
LANG exists but has no value.  Perl tried to believe you but could not.
Instead, Perl gave up and fell back to the "C" locale, the default locale
that is supposed to work no matter what.  This usually means your locale
settings were wrong, they mention locales your system has never heard
of, or the locale installation in your system has problems (for example,
some system files are broken or missing).  There are quick and temporary
fixes to these problems, as well as more thorough and lasting fixes.

=head2 Temporarily fixing locale problems

The two quickest fixes are either to render Perl silent about any
locale inconsistencies or to run Perl under the default locale "C".

Perl's moaning about locale problems can be silenced by setting the
environment variable PERL_BADLANG to a zero value, for example "0".
This method really just sweeps the problem under the carpet: you tell
Perl to shut up even when Perl sees that something is wrong.  Do not
be surprised if later something locale-dependent misbehaves.

Perl can be run under the "C" locale by setting the environment
variable LC_ALL to "C".  This method is perhaps a bit more civilized
than the PERL_BADLANG approach, but setting LC_ALL (or
other locale variables) may affect other programs as well, not just
Perl.  In particular, external programs run from within Perl will see
these changes.  If you make the new settings permanent (read on), all
programs you run see the changes.  See L<ENVIRONMENT> for for
the full list of relevant environment variables and L<USING LOCALES>
for their effects in Perl.  Effects in other programs are 
easily deducible.  For example, the variable LC_COLLATE may well affect
your B<sort> program (or whatever the program that arranges `records'
alphabetically in your system is called).

You can test out changing these variables temporarily, and if the
new settings seem to help, put those settings into your shell startup
files.  Consult your local documentation for the exact details.  For in
Bourne-like shells (B<sh>, B<ksh>, B<bash>, B<zsh>):

	LC_ALL=en_US.ISO8859-1
	export LC_ALL

This assumes that we saw the locale "en_US.ISO8859-1" using the commands
discussed above.  We decided to try that instead of the above faulty
locale "En_US"--and in Cshish shells (B<csh>, B<tcsh>)

	setenv LC_ALL en_US.ISO8859-1
	
If you do not know what shell you have, consult your local
helpdesk or the equivalent.

=head2 Permanently fixing locale problems

The slower but superior fixes are when you may be able to yourself
fix the misconfiguration of your own environment variables.  The
mis(sing)configuration of the whole system's locales usually requires
the help of your friendly system administrator.

First, see earlier in this document about L<Finding locales>.  That tells
how to find which locales are really supported--and more importantly,
installed--on your system.  In our example error message, environment
variables affecting the locale are listed in the order of decreasing
importance (and unset variables do not matter).  Therefore, having
LC_ALL set to "En_US" must have been the bad choice, as shown by the
error message.  First try fixing locale settings listed first.

Second, if using the listed commands you see something B<exactly>
(prefix matches do not count and case usually counts) like "En_US"
without the quotes, then you should be okay because you are using a
locale name that should be installed and available in your system.
In this case, see L<Permanently fixing system locale configuration>.

=head2 Permanently fixing your locale configuration

This is when you see something like:

	perl: warning: Please check that your locale settings:
	        LC_ALL = "En_US",
	        LANG = (unset)
	    are supported and installed on your system.

but then cannot see that "En_US" listed by the above-mentioned
commands.  You may see things like "en_US.ISO8859-1", but that isn't
the same.  In this case, try running under a locale
that you can list and which somehow matches what you tried.  The
rules for matching locale names are a bit vague because
standardization is weak in this area.  See again the L<Finding
locales> about general rules.

=head2 Fixing system locale configuration

Contact a system administrator (preferably your own) and report the exact
error message you get, and ask them to read this same documentation you
are now reading.  They should be able to check whether there is something
wrong with the locale configuration of the system.  The L<Finding locales>
section is unfortunately a bit vague about the exact commands and places
because these things are not that standardized.

d239 1
a239 1
with a single parameter--see L<The setlocale function>.)
d252 7
a258 7
The keys of this hash are variable names for formatting, such as
C<decimal_point> and C<thousands_sep>.  The values are the
corresponding, er, values.  See L<POSIX (3)/localeconv> for a longer
example listing the categories an implementation might be expected to
provide; some provide more and others fewer.  You don't need an
explicit C<use locale>, because localeconv() always observes the
current locale.
d260 2
a261 2
Here's a simple-minded example program that rewrites its command-line
parameters as integers correctly formatted in the current locale:
d273 1
a273 17

	# grouping and mon_grouping are packed lists
	# of small integers (characters) telling the
	# grouping (thousand_seps and mon_thousand_seps
	# being the group dividers) of numbers and
	# monetary quantities.  The integers' meanings:
	# 255 means no more grouping, 0 means repeat
	# the previous grouping, 1-254 means use that
	# as the current grouping.  Grouping goes from
	# right to left (low to high digits).  In the
	# below we cheat slightly by never using anything
	# else than the first grouping (whatever that is).
	if ($grouping) {
	    @@grouping = unpack("C*", $grouping);
	} else {
	    @@grouping = (3);
	}
d279 1
a279 1
            s/(\d)(\d{$grouping[0]}($|$thousands_sep))/$1$thousands_sep$2/;
d286 4
a289 3
The following subsections describe basic locale categories.  Beyond these,
some combination categories allow manipulation of more than one
basic category at a time.  See L<"ENVIRONMENT"> for a discussion of these.
d293 4
a296 13
In the scope of S<C<use locale>>, Perl looks to the C<LC_COLLATE>
environment variable to determine the application's notions on collation
(ordering) of characters.  For example, 'b' follows 'a' in Latin
alphabets, but where do 'E<aacute>' and 'E<aring>' belong?  And while
'color' follows 'chocolate' in English, what about in Spanish?

The following collations all make sense and you may meet any of them
if you "use locale".

	A B C D E a b c d e
	A a B b C c D d D e
	a A b B c C d D e E
	a b c d e A B C D E
d298 2
a299 2
Here is a code snippet to tell what alphanumeric
characters are in the current locale, in that locale's order:
d317 1
a317 1
byte-by-byte comparison for strings that the locale says are equal. You
d325 1
a325 1
dictionary-like ordering that ignores space characters completely and
d328 1
a328 1
If you have a single string that you want to check for "equality in
d344 2
a345 2
call strxfrm() for both operands, then do a byte-by-byte
comparison of the transformed strings.  By calling strxfrm() explicitly
d347 1
a347 1
a couple of transformations.  But in fact, it doesn't save anything: Perl
d349 1
a349 1
string the first time it's needed in a comparison, then keeps this version around
d353 2
a354 2
null it finds as a terminator.  don't expect the transformed strings
it produces to be portable across systems--or even from one revision
d358 1
a358 1
Note: C<use locale> isn't shown in some of these examples because it isn't
d364 1
a364 1
In the scope of S<C<use locale>>, Perl obeys the C<LC_CTYPE> locale
d367 1
a367 1
which stands for alphanumeric characters--that is, alphabetic and
d373 1
a373 1
The C<LC_CTYPE> locale also provides the map used in transliterating
d375 3
a377 3
functions--lc(), lcfirst, uc(), and ucfirst(); case-mapping
interpolation with C<\l>, C<\L>, C<\u>, or C<\U> in double-quoted strings
and C<s///> substitutions; and case-independent regular expression
d380 4
a383 4
Finally, C<LC_CTYPE> affects the POSIX character-class test
functions--isalpha(), islower(), and so on.  For example, if you move
from the "C" locale to a 7-bit Scandinavian one, you may find--possibly
to your surprise--that "|" moves from the ispunct() class to isalpha().
d387 2
a388 2
your application.  For strict matching of (mundane) letters and
digits--for example, in command strings--locale-aware applications
d393 9
a401 8
In the scope of S<C<use locale>>, Perl obeys the C<LC_NUMERIC> locale
information, which controls an application's idea of how numbers should
be formatted for human readability by the printf(), sprintf(), and
write() functions.  String-to-numeric conversion by the POSIX::strtod()
function is also affected.  In most implementations the only effect is to
change the character used for the decimal point--perhaps from '.'  to ','.
These functions aren't aware of such niceties as thousands separation and
so on.  (See L<The localeconv function> if you care about these things.)
d403 1
a403 1
Output produced by print() is B<never> affected by the
d425 2
a426 2
The C standard defines the C<LC_MONETARY> category, but no function
that is affected by its contents.  (Those with experience of standards
d429 5
a433 5
to use C<LC_MONETARY>, you can query its contents--see L<The localeconv
function>--and use the information that it returns in your application's
own formatting of currency amounts.  However, you may well find that
the information, voluminous and complex though it may be, still does not
quite meet your requirements: currency formatting is a hard nut to crack.
d437 1
a437 1
Output produced by POSIX::strftime(), which builds a formatted
d441 1
a441 1
be "janvier".  Here's how to get a list of long month names in the
d450 1
a450 1
Note: C<use locale> isn't needed in this example: as a function that
d456 4
a459 4
The remaining locale category, C<LC_MESSAGES> (possibly supplemented
by others in particular implementations) is not currently used by
Perl--except possibly to affect the behavior of library functions called
by extensions outside the standard Perl distribution.
d463 1
a463 1
Although the main discussion of Perl security issues can be found in
d466 2
a467 2
Locales--particularly on systems that allow unprivileged users to
build their own locales--are untrustworthy.  A malicious (or just plain
d476 1
a476 1
C<\w> may be spoofed by an C<LC_CTYPE> locale that claims that
d500 1
a500 1
An application that takes the trouble to use information in
d502 1
a502 1
if that locale has been subverted.  Or it might make payments in US
d509 1
a509 1
C<LC_DATE> locale.  ("Look--it says I wasn't in the building on
d515 1
a515 1
application's environment which may be modified maliciously presents
d517 1
a517 1
programming language that allows you to write programs that take
d520 2
a521 2
Perl cannot protect you from all possibilities shown in the
examples--there is no substitute for your own vigilance--but, when
d523 1
a523 1
L<perlsec>) to mark string results that become locale-dependent, and
d525 1
a525 1
tainting behavior of operators and functions that may be affected by
d534 1
a534 1
=item B<Case-mapping interpolation> (with C<\l>, C<\L>, C<\u> or C<\U>)
d543 1
a543 1
Subpatterns, either delivered as a list-context result or as $1 etc.
d547 1
a547 1
(non white-space character).  The matched-pattern variable, $&, $`
d555 2
a556 2
operand of C<=~> becomes tainted when C<use locale> in effect
if modified as a result of a substitution based on a regular
d558 1
a558 1
case-mapping with C<\l>, C<\L>,C<\u> or C<\U>.
d562 1
a562 1
Result is tainted if C<use locale> is in effect.
d600 2
a601 2
a regular expression: the second example--which still ignores locale
information--runs, creating the file named on its command line
d613 1
a613 1
Compare this with a similar but locale-aware program:
d626 1
a626 1
of a match involving C<\w> while C<use locale> is in effect.
d636 4
a639 5
system is lacking (broken) in some way--or if you mistyped the name of
a locale when you set up your environment.  If this environment
variable is absent, or has a value that does not evaluate to integer
zero--that is, "0" or ""-- Perl will complain about locale setting
failures.
d655 1
a655 1
C<LC_ALL> is the "override-all" locale environment variable. If
a657 14
=item LANGUAGE

B<NOTE>: C<LANGUAGE> is a GNU extension, it affects you only if you
are using the GNU libc.  This is the case if you are using e.g. Linux.
If you are using "commercial" UNIXes you are most probably I<not>
using GNU libc and you can ignore C<LANGUAGE>.

However, in the case you are using C<LANGUAGE>: it affects the
language of informational, warning, and error messages output by
commands (in other words, it's like C<LC_MESSAGES>) but it has higher
priority than L<LC_ALL>.  Moreover, it's not a single value but
instead a "path" (":"-separated list) of I<languages> (not locales).
See the GNU C<gettext> library documentation for more information.

d701 7
a707 6
generally behaving as if something similar to the C<"C"> locale were
always in force, even if the program environment suggested otherwise
(see L<The setlocale function>).  By default, Perl still behaves this
way for backward compatibility.  If you want a Perl application to pay
attention to locale information, you B<must> use the S<C<use locale>>
pragma (see L<The use locale pragma>) to instruct it to do so.
d710 2
a711 2
information if available; that is, C<\w> did understand what
were the letters according to the locale environment variables.
d717 1
a717 1
In versions of Perl prior to 5.004, per-locale collation was possible
d738 1
a738 1
Formats are the only part of Perl that unconditionally use information
d751 1
a751 1
system allows installation of arbitrary locales, you may find the
d777 1
a777 1
In certain systems, the operating system's locale support
d782 1
a782 1
complain to your vendor: bug fixes may exist for these problems
d788 5
a792 30
L<POSIX (3)/isalnum>

L<POSIX (3)/isalpha>

L<POSIX (3)/isdigit>

L<POSIX (3)/isgraph>

L<POSIX (3)/islower>

L<POSIX (3)/isprint>,

L<POSIX (3)/ispunct>

L<POSIX (3)/isspace>

L<POSIX (3)/isupper>,

L<POSIX (3)/isxdigit>

L<POSIX (3)/localeconv>

L<POSIX (3)/setlocale>,

L<POSIX (3)/strcoll>

L<POSIX (3)/strftime>

L<POSIX (3)/strtod>,

d798 1
a798 2
Dunlop, assisted by the perl5-porters.  Prose worked over a bit by
Tom Christiansen.
d800 1
a800 1
Last update: Thu Jun 11 08:44:13 MDT 1998
@


1.1.1.2
log
@virgin perl 5.6.0
@
text
@d312 1
a312 1

d335 1
a335 1
In this case, see L<Permanently fixing your system's locale configuration>.
d337 1
a337 1
=head2 Permanently fixing your system's locale configuration
d611 2
a612 6
Perl--except possibly to affect the behavior of library functions
called by extensions outside the standard Perl distribution and by the
operating system and its utilities.  Note especially that the string
value of C<$!> and the error messages given by external utilities may
be changed by C<LC_MESSAGES>.  If you want to have portable error
codes, use C<%!>.  See L<Errno>.
d640 5
a644 6
Some systems are broken in that they allow the "C" locale to be
overridden by users.  If the decimal point character in the
C<LC_NUMERIC> category of the "C" locale is surreptitiously changed
from a dot to a comma, C<sprintf("%g", 0.123456e3)> produces a
string result of "123,456".  Many people would interpret this as
one hundred and twenty-three thousand, four hundred and fifty-six.
d712 4
@


1.1.1.3
log
@stock perl 5.6.1
@
text
@d127 2
a128 2
C<LC_COLLATE>, C<LC_CTYPE>, and so on, are discussed further in 
L<LOCALE CATEGORIES>.
d292 1
a292 1
programs you run see the changes.  See L<ENVIRONMENT> for
d351 2
a352 2
standardization is weak in this area.  See again the 
L<Finding locales> about general rules.
d384 1
a384 1
corresponding, er, values.  See L<POSIX/localeconv> for a longer
d448 1
a448 1
	A a B b C c D d E e
d452 1
a452 1
Here is a code snippet to tell what "word"
d456 1
a456 1
        print +(sort grep /\w/, map { chr } 0..255), "\n";
d462 1
a462 1
        print +(sort grep /\w/, map { chr } 0..255), "\n";
d521 2
a522 3
which stands for alphanumeric characters--that is, alphabetic,
numeric, and including other special characters such as the underscore or
hyphen.  (Consult L<perlre> for more information about
d556 5
a560 5
Output produced by print() is also affected by the current locale: it
depends on whether C<use locale> or C<no locale> is in effect, and
corresponds to what you'd get from printf() in the "C" locale.  The
same is true for Perl's internal conversions between numeric and
string formats:
d567 1
a567 1
        $a = " $n"; # Locale-dependent conversion to string
d569 1
a569 1
        print "half five is $n\n";       # Locale-dependent output
d582 5
a586 6
to use C<LC_MONETARY>, you can query its contents--see 
L<The localeconv function>--and use the information that it returns in your 
application's own formatting of currency amounts.  However, you may well 
find that the information, voluminous and complex though it may be, still 
does not quite meet your requirements: currency formatting is a hard nut 
to crack.
d644 9
d688 1
a688 3
=item  *

B<Comparison operators> (C<lt>, C<le>, C<ge>, C<gt> and C<cmp>):
d692 1
a692 3
=item  *

B<Case-mapping interpolation> (with C<\l>, C<\L>, C<\u> or C<\U>)
d697 1
a697 3
=item  *

B<Matching operator> (C<m//>):
d710 1
a710 3
=item  *

B<Substitution operator> (C<s///>):
d718 1
a718 1
=item  *
d720 1
a720 1
B<Output formatting functions> (printf() and write()):
d722 1
a722 7
Results are never tainted because otherwise even output from print,
for example C<print(1/7)>, should be tainted if C<use locale> is in
effect.

=item  *

B<Case-mapping functions> (lc(), lcfirst(), uc(), ucfirst()):
d726 1
a726 3
=item  *

B<POSIX locale-dependent functions> (localeconv(), strcoll(),
d731 1
a731 3
=item  *

B<POSIX character class tests> (isalnum(), isalpha(), isdigit(),
d949 1
a949 1
please report in excruciating detail to <F<perlbug@@perl.org>>, and
d956 31
a986 6
L<POSIX/isalnum>, L<POSIX/isalpha>, L<POSIX/isdigit>, 
L<POSIX/isgraph>, L<POSIX/islower>, L<POSIX/isprint>, 
L<POSIX/ispunct>, L<POSIX/isspace>, L<POSIX/isupper>, 
L<POSIX/isxdigit>, L<POSIX/localeconv>, L<POSIX/setlocale>, 
L<POSIX/strcoll>, L<POSIX/strftime>, L<POSIX/strtod>, 
L<POSIX/strxfrm>.
@


1.1.1.4
log
@stock perl 5.8.0 from CPAN
@
text
@d102 1
a102 1
perform a char-by-char comparison of their scalar operands.  What's
d105 2
a106 2
perform a char-by-char comparison, and only returns I<0> (equal) if the
operands are char-for-char identical.  If you really want to know whether
a312 4
or if you have the "env" application you can do in any shell

	env LC_ALL=en_US.ISO8859-1 perl ...

a429 25
=head2 I18N::Langinfo

Another interface for querying locale-dependent information is the
I18N::Langinfo::langinfo() function, available at least in UNIX-like
systems and VMS.

The following example will import the langinfo() function itself and
three constants to be used as arguments to langinfo(): a constant for
the abbreviated first day of the week (the numbering starts from
Sunday = 1) and two more constants for the affirmative and negative
answers for a yes/no question in the current locale.

    use I18N::Langinfo qw(langinfo ABDAY_1 YESSTR NOSTR);

    my ($abday_1, $yesstr, $nostr) = map { langinfo } qw(ABDAY_1 YESSTR NOSTR);

    print "$abday_1? [$yesstr/$nostr] ";

In other words, in the "C" (or English) locale the above will probably
print something like:

    Sun? [yes/no] 

See L<I18N::Langinfo> for more information.

d471 1
a471 1
char-by-char comparison for strings that the locale says are equal. You
d496 1
a496 1
in char-by-char comparisons against other transformed strings during
d498 1
a498 1
call strxfrm() for both operands, then do a char-by-char
a576 2
See also L<I18N::Langinfo> and C<RADIXCHAR>.

a589 2
See also L<I18N::Langinfo> and C<CRNCYSTR>.

a608 3
See also L<I18N::Langinfo> and C<ABDAY_1>..C<ABDAY_7>, C<DAY_1>..C<DAY_7>,
C<ABMON_1>..C<ABMON_12>, and C<ABMON_1>..C<ABMON_12>.

d719 1
a719 1
=item *
d727 1
a727 1
=item *
d733 1
a733 1
=item *
d740 1
a740 1
=item *
d928 1
a928 1
ftp://dkuug.dk/i18n/WG15-collection .  You should be aware that it is
a951 9
=head1 Unicode and UTF-8

The support of Unicode is new starting from Perl version 5.6, and
more fully implemented in the version 5.8.  See L<perluniintro> and
L<perlunicode> for more details.

Usually locale settings and Unicode do not affect each other, but
there are exceptions, see L<perlunicode/Locales> for examples.

d967 6
a972 7
L<I18N::Langinfo>, L<perluniintro>, L<perlunicode>, L<open>,
L<POSIX/isalnum>, L<POSIX/isalpha>,
L<POSIX/isdigit>, L<POSIX/isgraph>, L<POSIX/islower>,
L<POSIX/isprint>, L<POSIX/ispunct>, L<POSIX/isspace>,
L<POSIX/isupper>, L<POSIX/isxdigit>, L<POSIX/localeconv>,
L<POSIX/setlocale>, L<POSIX/strcoll>, L<POSIX/strftime>,
L<POSIX/strtod>, L<POSIX/strxfrm>.
@


1.1.1.5
log
@perl 5.8.8 import
@
text
@d296 1
a296 1
your B<sort> program (or whatever the program that arranges "records"
d739 2
a740 2
(non-alphanumeric character), C<\s> (whitespace character), or C<\S>
(non whitespace character).  The matched-pattern variable, $&, $`
@


1.1.1.6
log
@import perl 5.10.0 from CPAN
@
text
@d180 1
a180 1
or a single locale name.  Please consult your setlocale(3) man page for
d200 1
a200 1
For further information about the categories, consult setlocale(3).
d204 1
a204 1
For locales available in your system, consult also setlocale(3) to
d292 1
a292 1
programs you run see the changes.  See L<"ENVIRONMENT"> for
d577 4
a580 4
After a proper POSIX::setlocale() call, Perl obeys the C<LC_NUMERIC>
locale information, which controls an application's idea of how numbers
should be formatted for human readability by the printf(), sprintf(), and
write() functions. String-to-numeric conversion by the POSIX::strtod()
d584 1
a584 1
so on. (See L<The localeconv function> if you care about these things.)
d587 1
d592 2
a593 3
        use POSIX qw(strtod setlocale LC_NUMERIC);

	setlocale LC_NUMERIC, "";
a910 17

=head2 Examples

The LC_NUMERIC controls the numeric output:

        use locale;
        use POSIX qw(locale_h); # Imports setlocale() and the LC_ constants.
        setlocale(LC_NUMERIC, "fr_FR") or die "Pardon";
        printf "%g\n", 1.23; # If the "fr_FR" succeeded, probably shows 1,23.

and also how strings are parsed by POSIX::strtod() as numbers:

        use locale;
        use POSIX qw(locale_h strtod);
        setlocale(LC_NUMERIC, "de_DE") or die "Entschuldigung";
        my $x = strtod("2,34") + 5;
        print $x, "\n"; # Probably shows 7,34.
@


1.1.1.7
log
@Perl 5.12.2 from CPAN
@
text
@d437 1
a437 1
I18N::Langinfo::langinfo() function, available at least in Unix-like
d864 1
a864 1
If you are using "commercial" Unixes you are most probably I<not>
d980 2
a981 5
There is a large collection of locale definitions at:

  http://std.dkuug.dk/i18n/WG15-collection/locales/

You should be aware that it is
@


1.1.1.8
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@a0 2
=encoding utf8

d7 22
a28 84
In the beginning there was ASCII, the "American Standard Code for
Information Interchange", which works quite well for Americans with
their English alphabet and dollar-denominated currency.  But it doesn't
work so well even for other English speakers, who may use different
currencies, such as the pound sterling (as the symbol for that currency
is not in ASCII); and it's hopelessly inadequate for many of the
thousands of the world's other languages.

To address these deficiencies, the concept of locales was invented
(formally the ISO C, XPG4, POSIX 1.c "locale system").  And applications
were and are being written that use the locale mechanism.  The process of
making such an application take account of its users' preferences in
these kinds of matters is called B<internationalization> (often
abbreviated as B<i18n>); telling such an application about a particular
set of preferences is known as B<localization> (B<l10n>).

Perl was extended, starting in 5.004, to support the locale system.  This
is controlled per application by using one pragma, one function call,
and several environment variables.

Unfortunately, there are quite a few deficiencies with the design (and
often, the implementations) of locales, and their use for character sets
has mostly been supplanted by Unicode (see L<perlunitut> for an
introduction to that, and keep on reading here for how Unicode interacts
with locales in Perl).

Perl continues to support the old locale system, and starting in v5.16,
provides a hybrid way to use the Unicode character set, along with the
other portions of locales that may not be so problematic.
(Unicode is also creating C<CLDR>, the "Common Locale Data Repository",
L<http://cldr.unicode.org/> which includes more types of information than
are available in the POSIX locale system.  At the time of this writing,
there was no CPAN module that provides access to this XML-encoded data.
However, many of its locales have the POSIX-only data extracted, and are
available at L<http://unicode.org/Public/cldr/latest/>.)

=head1 WHAT IS A LOCALE

A locale is a set of data that describes various aspects of how various
communities in the world categorize their world.  These categories are
broken down into the following types (some of which include a brief
note here):

=over

=item Category LC_NUMERIC: Numeric formatting

This indicates how numbers should be formatted for human readability,
for example the character used as the decimal point.

=item Category LC_MONETARY: Formatting of monetary amounts

=for comment
The nbsp below makes this look better

E<160>

=item Category LC_TIME: Date/Time formatting

=for comment
The nbsp below makes this look better

E<160>

=item Category LC_MESSAGES: Error and other messages

This for the most part is beyond the scope of Perl

=item Category LC_COLLATE: Collation

This indicates the ordering of letters for comparision and sorting.
In Latin alphabets, for example, "b", generally follows "a".

=item Category LC_CTYPE: Character Types

This indicates, for example if a character is an uppercase letter.

=back

More details on the categories are given below in L</LOCALE CATEGORIES>.

Together, these categories go a long way towards being able to customize
a single program to run in many different locations.  But there are
deficiencies, so keep reading.
d32 3
a34 3
Perl will not use locales unless specifically requested to (see L</NOTES> below
for the partial exception of C<write()>).  But even if there is such a
request, B<all> of the following must be true for it to work properly:
d72 1
a72 1
=item 1
d74 1
a74 1
B<The locale-determining environment variables (see L</"ENVIRONMENT">)
d76 1
a76 1
by yourself or by whomever set up your system account; or
d78 1
a78 1
=item 2
d90 1
a90 51
pragma tells Perl to use the current locale for some operations.
Starting in v5.16, there is an optional parameter to this pragma:

    use locale ':not_characters';

This parameter allows better mixing of locales and Unicode, and is
described fully in L</Unicode and UTF-8>, but briefly, it tells Perl to
not use the character portions of the locale definition, that is
the C<LC_CTYPE> and C<LC_COLLATE> categories.  Instead it will use the
native (extended by Unicode) character set.  When using this parameter,
you are responsible for getting the external character set translated
into the native/Unicode one (which it already will be if it is one of
the increasingly popular UTF-8 locales).  There are convenient ways of
doing this, as described in L</Unicode and UTF-8>.

The current locale is set at execution time by
L<setlocale()|/The setlocale function> described below.  If that function
hasn't yet been called in the course of the program's execution, the
current locale is that which was determined by the L</"ENVIRONMENT"> in
effect at the start of the program, except that
C<L<LC_NUMERIC|/Category LC_NUMERIC: Numeric Formatting>> is always
initialized to the C locale (mentioned under L<Finding locales>).
If there is no valid environment, the current locale is undefined.  It
is likely, but not necessarily, the "C" locale.

The operations that are affected by locale are:

=over 4

=item B<Under C<use locale ':not_characters';>>

=over 4

=item *

B<Format declarations> (format()) use C<LC_NUMERIC>

=item *

B<The POSIX date formatting function> (strftime()) uses C<LC_TIME>.

=back

=for comment
The nbsp below makes this look better

E<160>

=item B<Under just plain C<use locale;>>

The above operations are affected, as well as the following:
d116 9
d127 2
a128 1
=back
d131 1
a131 4
upon reaching the end of the block enclosing C<use locale>.
Note that C<use locale> and C<use locale ':not_characters'> may be
nested, and that what is in effect within an inner scope will revert to
the outer scope's rules at the end of the inner scope.
d166 1
a166 1
L</LOCALE CATEGORIES> and L</"ENVIRONMENT">.  The locale is the name of a
d179 1
a179 1
concatenated locale names (separator also implementation-dependent)
a199 3
Note that Perl ignores the current C<LC_CTYPE> and C<LC_COLLATE> locales
within the scope of a C<use locale ':not_characters'>.

a249 2
B<Warning>. The C locale delivered by some vendors may not
actually exactly match what the C standard calls for.  So beware.
d294 1
a294 1
for their effects in Perl.  Effects in other programs are
d355 1
a355 1
standardization is weak in this area.  See again the
d397 36
a432 36
    # See comments in previous example
    require 5.004;
    use POSIX qw(locale_h);

    # Get some of locale's numeric formatting parameters
    my ($thousands_sep, $grouping) =
            @@{localeconv()}{'thousands_sep', 'grouping'};

    # Apply defaults if values are missing
    $thousands_sep = ',' unless $thousands_sep;

    # grouping and mon_grouping are packed lists
    # of small integers (characters) telling the
    # grouping (thousand_seps and mon_thousand_seps
    # being the group dividers) of numbers and
    # monetary quantities.  The integers' meanings:
    # 255 means no more grouping, 0 means repeat
    # the previous grouping, 1-254 means use that
    # as the current grouping.  Grouping goes from
    # right to left (low to high digits).  In the
    # below we cheat slightly by never using anything
    # else than the first grouping (whatever that is).
    if ($grouping) {
        @@grouping = unpack("C*", $grouping);
    } else {
        @@grouping = (3);
    }

    # Format command line params for current locale
    for (@@ARGV) {
        $_ = int;    # Chop non-integer part
        1 while
        s/(\d)(\d{$grouping[0]}($|$thousands_sep))/$1$thousands_sep$2/;
        print "$_";
    }
    print "\n";
d448 1
a448 2
    my ($abday_1, $yesstr, $nostr)
                = map { langinfo } qw(ABDAY_1 YESSTR NOSTR);
d455 1
a455 1
    Sun? [yes/no]
d467 1
a467 2
In the scope of S<C<use locale>> (but not a
C<use locale ':not_characters'>), Perl looks to the C<LC_COLLATE>
d469 3
a471 3
(ordering) of characters.  For example, "b" follows "a" in Latin
alphabets, but where do "E<aacute>" and "E<aring>" belong?  And while
"color" follows "chocolate" in English, what about in Spanish?
d547 1
a547 2
In the scope of S<C<use locale>> (but not a
C<use locale ':not_characters'>), Perl obeys the C<LC_CTYPE> locale
d554 2
a555 2
setting, characters like "E<aelig>", "E<eth>", "E<szlig>", and
"E<oslash>" may be understood as C<\w> characters.
a567 2
Unfortunately, this creates big problems for regular expressions. "|" still
means alternation even though it matches C<\w>.
d571 1
a571 1
your application.  For strict matching of (mundane) ASCII letters and
d573 1
a573 1
should use C<\w> with the C</a> regular expression modifier.  See L<"SECURITY">.
d582 1
a582 1
change the character used for the decimal point--perhaps from "."  to ",".
d610 1
a610 1
The C standard defines the C<LC_MONETARY> category, but not a function
d614 5
a618 5
to use C<LC_MONETARY>, you can query its contents--see
L<The localeconv function>--and use the information that it returns in your
application's own formatting of currency amounts.  However, you may well
find that the information, voluminous and complex though it may be, still
does not quite meet your requirements: currency formatting is a hard nut
d728 1
a728 1
C<use locale> (but not S<C<use locale ':not_characters'>>) is in effect.
d737 1
a737 2
are tainted if C<use locale> (but not S<C<use locale ':not_characters'>>)
is in effect, and the subpattern regular
d750 2
a751 3
operand of C<=~> becomes tainted when C<use locale>
(but not S<C<use locale ':not_characters'>>) is in effect if modified as
a result of a substitution based on a regular
d767 1
a767 2
Results are tainted if C<use locale> (but not
S<C<use locale ':not_characters'>>) is in effect.
d870 1
a870 1
priority than C<LC_ALL>.  Moreover, it's not a single value but
d916 4
a919 4
   use locale;
   use POSIX qw(locale_h); # Imports setlocale() and the LC_ constants.
   setlocale(LC_NUMERIC, "fr_FR") or die "Pardon";
   printf "%g\n", 1.23; # If the "fr_FR" succeeded, probably shows 1,23.
d923 5
a927 5
   use locale;
   use POSIX qw(locale_h strtod);
   setlocale(LC_NUMERIC, "de_DE") or die "Entschuldigung";
   my $x = strtod("2,34") + 5;
   print $x, "\n"; # Probably shows 7,34.
d939 1
a939 4
pragma (see L<The use locale pragma>) or, in the unlikely event
that you want to do so for just pattern matching, the
C</l> regular expression modifier (see L<perlre/Character set
modifiers>) to instruct it to do so.
d970 7
a976 5
If a program's environment specifies an LC_NUMERIC locale and C<use
locale> is in effect when the format is declared, the locale is used
to specify the decimal point character in formatted output.  Formatted
output cannot be controlled by C<use locale> at the time when write()
is called.
a979 5
The Unicode CLDR project extracts the POSIX portion of many of its
locales, available at

  http://unicode.org/Public/cldr/latest/

d1005 2
a1006 1
into bankers, bikers, gamers, and so on.
d1010 6
a1015 118
The support of Unicode is new starting from Perl version v5.6, and more fully
implemented in version v5.8 and later.  See L<perluniintro>.  It is
strongly recommended that when combining Unicode and locale (starting in
v5.16), you use

    use locale ':not_characters';

When this form of the pragma is used, only the non-character portions of
locales are used by Perl, for example C<LC_NUMERIC>.  Perl assumes that
you have translated all the characters it is to operate on into Unicode
(actually the platform's native character set (ASCII or EBCDIC) plus
Unicode).  For data in files, this can conveniently be done by also
specifying

    use open ':locale';

This pragma arranges for all inputs from files to be translated into
Unicode from the current locale as specified in the environment (see
L</ENVIRONMENT>), and all outputs to files to be translated back
into the locale.  (See L<open>).  On a per-filehandle basis, you can
instead use the L<PerlIO::locale> module, or the L<Encode::Locale>
module, both available from CPAN.  The latter module also has methods to
ease the handling of C<ARGV> and environment variables, and can be used
on individual strings.  Also, if you know that all your locales will be
UTF-8, as many are these days, you can use the L<B<-C>|perlrun/-C>
command line switch.

This form of the pragma allows essentially seamless handling of locales
with Unicode.  The collation order will be Unicode's.  It is strongly
recommended that when you need to order and sort strings that you use
the standard module L<Unicode::Collate> which gives much better results
in many instances than you can get with the old-style locale handling.

For pre-v5.16 Perls, or if you use the locale pragma without the
C<:not_characters> parameter, Perl tries to work with both Unicode and
locales--but there are problems.

Perl does not handle multi-byte locales in this case, such as have been
used for various
Asian languages, such as Big5 or Shift JIS.  However, the increasingly
common multi-byte UTF-8 locales, if properly implemented, may work
reasonably well (depending on your C library implementation) in this
form of the locale pragma, simply because both
they and Perl store characters that take up multiple bytes the same way.
However, some, if not most, C library implementations may not process
the characters in the upper half of the Latin-1 range (128 - 255)
properly under LC_CTYPE.  To see if a character is a particular type
under a locale, Perl uses the functions like C<isalnum()>.  Your C
library may not work for UTF-8 locales with those functions, instead
only working under the newer wide library functions like C<iswalnum()>.

Perl generally takes the tack to use locale rules on code points that can fit
in a single byte, and Unicode rules for those that can't (though this
isn't uniformly applied, see the note at the end of this section).  This
prevents many problems in locales that aren't UTF-8.  Suppose the locale
is ISO8859-7, Greek.  The character at 0xD7 there is a capital Chi. But
in the ISO8859-1 locale, Latin1, it is a multiplication sign.  The POSIX
regular expression character class C<[[:alpha:]]> will magically match
0xD7 in the Greek locale but not in the Latin one.

However, there are places where this breaks down.  Certain constructs are
for Unicode only, such as C<\p{Alpha}>.  They assume that 0xD7 always has its
Unicode meaning (or the equivalent on EBCDIC platforms).  Since Latin1 is a
subset of Unicode and 0xD7 is the multiplication sign in both Latin1 and
Unicode, C<\p{Alpha}> will never match it, regardless of locale.  A similar
issue occurs with C<\N{...}>.  It is therefore a bad idea to use C<\p{}> or
C<\N{}> under plain C<use locale>--I<unless> you can guarantee that the
locale will be a ISO8859-1.  Use POSIX character classes instead.

Another problem with this approach is that operations that cross the
single byte/multiple byte boundary are not well-defined, and so are
disallowed.  (This boundary is between the codepoints at 255/256.).
For example, lower casing LATIN CAPITAL LETTER Y WITH DIAERESIS (U+0178)
should return LATIN SMALL LETTER Y WITH DIAERESIS (U+00FF).  But in the
Greek locale, for example, there is no character at 0xFF, and Perl
has no way of knowing what the character at 0xFF is really supposed to
represent.  Thus it disallows the operation.  In this mode, the
lowercase of U+0178 is itself.

The same problems ensue if you enable automatic UTF-8-ification of your
standard file handles, default C<open()> layer, and C<@@ARGV> on non-ISO8859-1,
non-UTF-8 locales (by using either the B<-C> command line switch or the
C<PERL_UNICODE> environment variable; see L<perlrun>).
Things are read in as UTF-8, which would normally imply a Unicode
interpretation, but the presence of a locale causes them to be interpreted
in that locale instead.  For example, a 0xD7 code point in the Unicode
input, which should mean the multiplication sign, won't be interpreted by
Perl that way under the Greek locale.  This is not a problem
I<provided> you make certain that all locales will always and only be either
an ISO8859-1, or, if you don't have a deficient C library, a UTF-8 locale.

Vendor locales are notoriously buggy, and it is difficult for Perl to test
its locale-handling code because this interacts with code that Perl has no
control over; therefore the locale-handling code in Perl may be buggy as
well.  (However, the Unicode-supplied locales should be better, and
there is a feed back mechanism to correct any problems.  See
L</Freely available locale definitions>.)

If you have Perl v5.16, the problems mentioned above go away if you use
the C<:not_characters> parameter to the locale pragma (except for vendor
bugs in the non-character portions).  If you don't have v5.16, and you
I<do> have locales that work, using them may be worthwhile for certain
specific purposes, as long as you keep in mind the gotchas already
mentioned.  For example, if the collation for your locales works, it
runs faster under locales than under L<Unicode::Collate>; and you gain
access to such things as the local currency symbol and the names of the
months and days of the week.  (But to hammer home the point, in v5.16,
you get this access without the downsides of locales by using the
C<:not_characters> form of the pragma.)

Note: The policy of using locale rules for code points that can fit in a
byte, and Unicode rules for those that can't is not uniformly applied.
Pre-v5.12, it was somewhat haphazard; in v5.12 it was applied fairly
consistently to regular expression matching except for bracketed
character classes; in v5.14 it was extended to all regex matches; and in
v5.16 to the casing operations such as C<"\L"> and C<uc()>.  For
collation, in all releases, the system's C<strxfrm()> function is called,
and whatever it does is what you get.
d1023 1
a1023 1
and will result in mysterious hangs and/or Perl core dumps when
d1026 1
a1026 1
also contact your vendor: bug fixes may exist for these problems
d1044 3
a1046 1
Tom Christiansen, and updated by Perl 5 porters.
@


1.1.1.9
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d25 1
a25 1
Perl was extended to support the locale system.  This
d79 1
a79 1
This indicates the ordering of letters for comparison and sorting.
d249 3
d509 2
d585 1
a585 1
"color" follows "chocolate" in English, what about in traditional Spanish?
a685 6
Note that there are quite a few things that are unaffected by the
current locale.  All the escape sequences for particular characters,
C<\n> for example, always mean the platform's native one.  This means,
for example, that C<\N> in regular expressions (every character
but new-line) work on the platform character set.

d918 1
a918 1
            or warn "Open of $tainted_output_file failed: $!\n";
@


1.1.1.10
log
@Import perl-5.20.1
@
text
@d25 1
a25 1
Perl has been extended to support the locale system.  This
d30 8
a37 9
often, the implementations) of locales.  Unicode was invented (see
L<perlunitut> for an introduction to that) in part to address these
design deficiencies, and nowadays, there is a series of "UTF-8
locales", based on Unicode.  These are locales whose character set is
Unicode, encoded in UTF-8.  Starting in v5.20, Perl fully supports
UTF-8 locales, except for sorting and string comparisions.  (Use
L<Unicode::Collate> for these.)  Perl continues to support the old
non UTF-8 locales as well.

d43 1
a43 2
available as UTF-8 locales at
L<http://unicode.org/Public/cldr/latest/>.)
d54 1
a54 1
=item Category C<LC_NUMERIC>: Numeric formatting
d59 1
a59 1
=item Category C<LC_MONETARY>: Formatting of monetary amounts
d62 1
a62 1
The nbsp below makes this look better (though not great)
d66 1
a66 1
=item Category C<LC_TIME>: Date/Time formatting
d69 1
a69 1
The nbsp below makes this look better (though not great)
d73 1
a73 1
=item Category C<LC_MESSAGES>: Error and other messages
d75 1
a75 2
This is used by Perl itself only for accessing operating system error
messages via L<$!|perlvar/$ERRNO> and L<$^E|perlvar/$EXTENDED_OS_ERROR>.
d77 1
a77 1
=item Category C<LC_COLLATE>: Collation
d82 1
a82 1
=item Category C<LC_CTYPE>: Character Types
a85 7
=item Other categories

Some platforms have other categories, dealing with such things as
measurement units and paper sizes.  None of these are used directly by
Perl, but outside operations that Perl interacts with may use
these.  See L</Not within the scope of any "use locale" variant> below.

d88 1
a88 2
More details on the categories used by Perl are given below in L</LOCALE
CATEGORIES>.
d96 3
a98 4
Perl itself will not use locales unless specifically requested to (but
again note that Perl may interact with code that does use them).  Even
if there is such a request, B<all> of the following must be true
for it to work properly:
d105 1
a105 1
you should find that the C<setlocale()> function is a documented part of
d153 1
a153 1
By default, Perl itself ignores the current locale.  The S<C<use locale>>
d159 1
a159 2
This parameter allows better mixing of locales and Unicode (less useful
in v5.20 and later), and is
d163 1
a163 1
native character set (extended by Unicode).  When using this parameter,
d173 5
a177 6
effect at the start of the program.
If there is no valid environment, the current locale is whatever the
system default has been set to.   On POSIX systems, it is likely, but
not necessarily, the "C" locale.  On Windows, the default is set via the
computer's S<C<Control Panel-E<gt>Regional and Language Options>> (or its
current equivalent).
d183 1
a183 3
=item B<Not within the scope of any C<"use locale"> variant>

Only operations originating outside Perl should be affected, as follows:
d189 1
a189 23
The variables L<$!|perlvar/$ERRNO> (and its synonyms C<$ERRNO> and
C<$OS_ERROR>) and L<$^E|perlvar/$EXTENDED_OS_ERROR> (and its synonym
C<$EXTENDED_OS_ERROR>) when used as strings always are in terms of the
current locale and as if within the scope of L<"use bytes"|bytes>.  This is
likely to change in Perl v5.22.

=item *

The current locale is also used when going outside of Perl with
operations like L<system()|perlfunc/system LIST> or
L<qxE<sol>E<sol>|perlop/qxE<sol>STRINGE<sol>>, if those operations are
locale-sensitive.

=item *

Also Perl gives access to various C library functions through the
L<POSIX> module.  Some of those functions are always affected by the
current locale.  For example, C<POSIX::strftime()> uses C<LC_TIME>;
C<POSIX::strtod()> uses C<LC_NUMERIC>; C<POSIX::strcoll()> and
C<POSIX::strxfrm()> use C<LC_COLLATE>; and character classification
functions like C<POSIX::isalnum()> use C<LC_CTYPE>.  All such functions
will behave according to the current underlying locale, even if that
locale isn't exposed to Perl space.
d193 1
a193 3
XS modules for all categories but C<LC_NUMERIC> get the underlying
locale, and hence any C library functions they call will use that
underlying locale.  For more discussion, see L<perlxs/CAVEATS>.
d198 1
a198 1
The nbsp below makes this look better (though not great)
d202 1
a202 53
=item B<Lingering effects of C<S<use locale>>>

Certain Perl operations that are set-up within the scope of a
C<use locale> variant retain that effect even outside the scope.
These include:

=over 4

=item *

The output format of a L<write()|perlfunc/write> is determined by an
earlier format declaration (L<perlfunc/format>), so whether or not the
output is affected by locale is determined by if the C<format()> is
within the scope of a C<use locale> variant, not whether the C<write()>
is.

=item *

Regular expression patterns can be compiled using
L<qrE<sol>E<sol>|perlop/qrE<sol>STRINGE<sol>msixpodual> with actual
matching deferred to later.  Again, it is whether or not the compilation
was done within the scope of C<use locale> that determines the match
behavior, not if the matches are done within such a scope or not.

=back

=for comment
The nbsp below makes this look better (though not great)

E<160>

=item B<Under C<"use locale ':not_characters';">>

=over 4

=item *

All the non-Perl operations.

=item *

B<Format declarations> (L<perlfunc/format>) and hence any subsequent
C<write()>s use C<LC_NUMERIC>.

=item *

B<stringification and output> use C<LC_NUMERIC>.
These include the results of
C<print()>,
C<printf()>,
C<say()>,
and
C<sprintf()>.
d204 1
a204 8
=back

=for comment
The nbsp below makes this look better (though not great)

E<160>

=item B<Under just plain C<"use locale";>>
d210 3
a212 6
All the above operations

=item *

B<The comparison operators> (C<lt>, C<le>, C<cmp>, C<ge>, and C<gt>) use
C<LC_COLLATE>.  C<sort()> is also affected if used without an
d223 1
a223 1
L<Category C<LC_COLLATE>: Collation>.
d227 2
a228 2
B<Regular expressions and case-modification functions> (C<uc()>, C<lc()>,
C<ucfirst()>, and C<lcfirst()>) use C<LC_CTYPE>
d247 1
a247 1
C<POSIX::setlocale()> function:
a251 4
        # (Showing the testing for success/failure of operations is
        # omitted in these examples to avoid distracting from the main
        # point)

a252 2
        use locale;
        my $old_locale;
d261 2
a262 3
        # LC_CTYPE now reset to the default defined by the
        # LC_ALL/LC_CTYPE/LANG environment variables, or to the system
        # default.  See below for documentation.
d267 1
a267 1
The first argument of C<setlocale()> gives the B<category>, the second the
d276 2
a277 2
If no second argument is provided and the category is something other
than C<LC_ALL>, the function returns a string naming the current locale
d279 1
a279 3
subsequent call to C<setlocale()>, B<but> on some platforms the string
is opaque, not something that most people would be able to decipher as
to what locale it means.
d281 1
a281 1
If no second argument is provided and the category is C<LC_ALL>, the
d284 1
a284 1
or a single locale name.  Please consult your L<setlocale(3)> man page for
d290 1
a290 1
another call to C<setlocale()>.  (In some implementations, the return
d301 3
d307 1
a307 6
If C<set_locale()> fails for some reason (for example, an attempt to set
to a locale unknown to the system), the locale for the category is not
changed, and the function returns C<undef>.


For further information about the categories, consult L<setlocale(3)>.
d311 1
a311 1
For locales available in your system, consult also L<setlocale(3)> to
d337 1
a337 1
Sadly, even though the calling interface for C<setlocale()> has been
d356 3
a358 5
is (American) English and its character codeset ASCII or, rarely, a
superset thereof (such as the "DEC Multinational Character Set
(DEC-MCS)").  B<Warning>. The C locale delivered by some vendors
may not actually exactly match what the C standard calls for.  So
beware.
d375 1
a375 1
This means that your locale settings had C<LC_ALL> set to "En_US" and
d378 5
a382 22
that is supposed to work no matter what.  (On Windows, it first tries
falling back to the system default locale.)  This usually means your
locale settings were wrong, they mention locales your system has never
heard of, or the locale installation in your system has problems (for
example, some system files are broken or missing).  There are quick and
temporary fixes to these problems, as well as more thorough and lasting
fixes.

=head2 Testing for broken locales

If you are building Perl from source, the Perl test suite file
F<lib/locale.t> can be used to test the locales on your system.
Setting the environment variable C<PERL_DEBUG_FULL_TEST> to 1
will cause it to output detailed results.  For example, on Linux, you
could say

 PERL_DEBUG_FULL_TEST=1 ./perl -T -Ilib lib/locale.t > locale.log 2>&1

Besides many other tests, it will test every locale it finds on your
system to see if they conform to the POSIX standard.  If any have
errors, it will include a summary near the end of the output of which
locales passed all its tests, and which failed, and why.
d390 1
a390 1
environment variable C<PERL_BADLANG> to a zero value, for example "0".
d396 2
a397 2
variable C<LC_ALL> to "C".  This method is perhaps a bit more civilized
than the C<PERL_BADLANG> approach, but setting C<LC_ALL> (or
d404 1
a404 1
easily deducible.  For example, the variable C<LC_COLLATE> may well affect
d478 1
a478 1
The C<POSIX::localeconv()> function allows you to get particulars of the
d481 1
a481 1
the current locale for a particular category, use C<POSIX::setlocale()>
d494 1
a494 1
C<localeconv()> takes no arguments, and returns B<a reference to> a hash.
d500 1
a500 1
explicit C<use locale>, because C<localeconv()> always observes the
d544 1
a544 1
C<I18N::Langinfo::langinfo()> function, available at least in Unix-like
d547 2
a548 2
The following example will import the C<langinfo()> function itself and
three constants to be used as arguments to C<langinfo()>: a constant for
d573 1
a573 1
=head2 Category C<LC_COLLATE>: Collation
d610 1
a610 1
can use C<POSIX::strcoll()> if you don't want this fall-back:
d616 1
a616 1
C<$equal_in_locale> will be true if the collation locale specifies a
a619 5
Perl only supports single-byte locales for C<LC_COLLATE>.  This means
that a UTF-8 locale likely will just give you machine-native ordering.
Use L<Unicode::Collate> for the full implementation of the Unicode
Collation Algorithm.

d622 1
a622 1
efficiency by using C<POSIX::strxfrm()> in conjunction with C<eq>:
d633 1
a633 1
C<strxfrm()> takes a string and maps it into a transformed string for use
d636 2
a637 2
call C<strxfrm()> for both operands, then do a char-by-char
comparison of the transformed strings.  By calling C<strxfrm()> explicitly
d644 1
a644 1
embedded in strings; if you call C<strxfrm()> directly, it treats the first
d647 1
a647 1
of your operating system to the next.  In short, don't call C<strxfrm()>
d651 2
a652 3
needed: C<strcoll()> and C<strxfrm()> are POSIX functions
which use the standard system-supplied C<libc> functions that
always obey the current C<LC_COLLATE> locale.
d654 1
a654 1
=head2 Category C<LC_CTYPE>: Character Types
d659 1
a659 2
alphabetic, numeric, punctuation, I<etc>.  This affects Perl's C<\w>
regular expression metanotation,
d661 2
a662 2
numeric, and the platform's native underscore.
(Consult L<perlre> for more information about
a665 3
It also affects things like C<\s>, C<\D>, and the POSIX character
classes, like C<[[:graph:]]>.  (See L<perlrecharclass> for more
information on all these.)
d669 3
a671 3
functions--C<fc()>, C<lc()>, C<lcfirst()>, C<uc()>, and C<ucfirst()>; case-mapping
interpolation with C<\F>, C<\l>, C<\L>, C<\u>, or C<\U> in double-quoted
strings and C<s///> substitutions; and case-independent regular expression
d674 4
a677 5
Finally, C<LC_CTYPE> affects the (deprecated) POSIX character-class test
functions--C<POSIX::isalpha()>, C<POSIX::islower()>, and so on.  For
example, if you move from the "C" locale to a 7-bit Scandinavian one,
you may find--possibly to your surprise--that "|" moves from the
C<POSIX::ispunct()> class to C<POSIX::isalpha()>.
a680 15
Starting in v5.20, Perl supports UTF-8 locales for C<LC_CTYPE>, but
otherwise Perl only supports single-byte locales, such as the ISO 8859
series.  This means that wide character locales, for example for Asian
languages, are not supported.  The UTF-8 locale support is actually a
superset of POSIX locales, because it is really full Unicode behavior
as if no locale were in effect at all (except for tainting; see
L</SECURITY>).  POSIX locales, even UTF-8 ones,
are lacking certain concepts in Unicode, such as the idea that changing
the case of a character could expand to be more than one character.
Perl in a UTF-8 locale, will give you that expansion.  Prior to v5.20,
Perl treated a UTF-8 locale on some platforms like an ISO 8859-1 one,
with some restrictions, and on other platforms more like the "C" locale.
For releases v5.16 and v5.18, C<S<use locale 'not_characters>> could be
used as a workaround for this (see L</Unicode and UTF-8>).

d685 1
a685 1
but new-line) works on the platform character set.
d693 1
a693 1
=head2 Category C<LC_NUMERIC>: Numeric Formatting
d695 1
a695 2
After a proper C<POSIX::setlocale()> call, and within the scope of one
of the C<use locale> variants, Perl obeys the C<LC_NUMERIC>
d697 3
a699 2
should be formatted for human readability.
In most implementations the only effect is to
d701 1
a701 1
The functions aren't aware of such niceties as thousands separation and
d704 4
a707 2
 use POSIX qw(strtod setlocale LC_NUMERIC);
 use locale;
d709 1
a709 1
 setlocale LC_NUMERIC, "";
d711 1
a711 1
 $n = 5/2;   # Assign numeric 2.5 to $n
d713 1
a713 1
 $a = " $n"; # Locale-dependent conversion to string
d715 1
a715 1
 print "half five is $n\n";       # Locale-dependent output
d717 1
a717 1
 printf "half five is %g\n", $n;  # Locale-dependent output
d719 4
a722 2
 print "DECIMAL POINT IS COMMA\n"
          if $n == (strtod("2,5"))[0]; # Locale-dependent conversion
d726 1
a726 1
=head2 Category C<LC_MONETARY>: Formatting of monetary amounts
d731 2
a732 2
issue.)  Consequently, Perl essentially takes no notice of it.  If you
really want to use C<LC_MONETARY>, you can query its contents--see
d741 1
a741 1
=head2 C<LC_TIME>
d743 1
a743 1
Output produced by C<POSIX::strftime()>, which builds a formatted
d756 3
a758 3
Note: C<use locale> isn't needed in this example: C<strftime()> is a POSIX
function which uses the standard system-supplied C<libc> function that
always obeys the current C<LC_TIME> locale.
d765 4
a768 3
The remaining locale categories are not currently used by Perl itself.
But again note that things Perl interacts with may use these, including
extensions outside the standard Perl distribution, and by the
d795 1
a795 1
"C:\U$name.$ext">, may produce dangerous results if a bogus C<LC_CTYPE>
d812 1
a812 1
The date and day names in dates formatted by C<strftime()> could be
d843 1
a843 1
B<Case-mapping interpolation> (with C<\l>, C<\L>, C<\u>, C<\U>, or C<\F>)
d854 9
a862 20
All subpatterns, either delivered as a list-context result or as C<$1>
I<etc>., are tainted if C<use locale> (but not
S<C<use locale ':not_characters'>>) is in effect, and the subpattern
regular expression contains a locale-dependent construct.  These
constructs include C<\w> (to match an alphanumeric character), C<\W>
(non-alphanumeric character), C<\b> and C<\B> (word-boundary and
non-boundardy, which depend on what C<\w> and C<\W> match), C<\s>
(whitespace character), C<\S> (non whitespace character), C<\d> and
C<\D> (digits and non-digits), and the POSIX character classes, such as
C<[:alpha:]> (see L<perlrecharclass/POSIX Character Classes>).

Tainting is also likely if the pattern is to be matched
case-insensitively (via C</i>).  The exception is if all the code points
to be matched this way are above 255 and do not have folds under Unicode
rules to below 256.  Tainting is not done for these because Perl
only uses Unicode rules for such code points, and those rules are the
same no matter what the current locale.

The matched-pattern variables, C<$&>, C<$`> (pre-match), C<$'>
(post-match), and C<$+> (last match) also are tainted.
d872 2
a873 2
expression match involving any of the things mentioned in the previous
item, or of case-mapping, such as C<\l>, C<\L>,C<\u>, C<\U>, or C<\F>.
d877 1
a877 1
B<Output formatting functions> (C<printf()> and C<write()>):
d885 1
a885 1
B<Case-mapping functions> (C<lc()>, C<lcfirst()>, C<uc()>, C<ucfirst()>):
d892 2
a893 2
B<POSIX locale-dependent functions> (C<localeconv()>, C<strcoll()>,
C<strftime()>, C<strxfrm()>):
d899 3
a901 4
B<POSIX character class tests> (C<POSIX::isalnum()>,
C<POSIX::isalpha()>, C<POSIX::isdigit()>, C<POSIX::isgraph()>,
C<POSIX::islower()>, C<POSIX::isprint()>, C<POSIX::ispunct()>,
C<POSIX::isspace()>, C<POSIX::isupper()>, C<POSIX::isxdigit()>):
d947 1
a947 1
This third program fails to run because C<$&> is tainted: it is the result
a953 9
=item PERL_SKIP_LOCALE_INIT

This environment variable, available starting in Perl v5.20, and if it
evaluates to a TRUE value, tells Perl to not use the rest of the
environment variables to initialize with.  Instead, Perl uses whatever
the current locale settings are.  This is particularly useful in
embedded environments, see
L<perlembed/Using embedded Perl with POSIX locales>.

d964 1
a964 1
B<NOTE>: C<PERL_BADLANG> only gives you a way to hide the warning message.
d971 2
a972 9
part of the standardized (ISO C, XPG4, POSIX 1.c) C<setlocale()> method
for controlling an application's opinion on data.  Windows is non-POSIX,
but Perl arranges for the following to work as described anyway.
If the locale given by an environment variable is not valid, Perl tries
the next lower one in priority.  If none are valid, on Windows, the
system default locale is then tried.  If all else fails, the C<"C">
locale is used.  If even that doesn't work, something is badly broken,
but Perl tries to forge ahead with whatever the locale settings might
be.
d976 1
a976 1
=item C<LC_ALL>
d981 1
a981 1
=item C<LANGUAGE>
d995 1
a995 1
=item C<LC_CTYPE>.
d1001 1
a1001 1
=item C<LC_COLLATE>
d1007 1
a1007 1
=item C<LC_MONETARY>
d1013 1
a1013 1
=item C<LC_NUMERIC>
d1019 1
a1019 1
=item C<LC_TIME>
d1025 1
a1025 1
=item C<LANG>
d1029 1
a1029 1
category-specific C<LC_I<foo>>
d1035 1
a1035 1
The C<LC_NUMERIC> controls the numeric output:
d1042 1
a1042 1
and also how strings are parsed by C<POSIX::strtod()> as numbers:
a1051 28
=head2 String C<eval> and C<LC_NUMERIC>

A string L<eval|perlfunc/eval EXPR> parses its expression as standard
Perl.  It is therefore expecting the decimal point to be a dot.  If
C<LC_NUMERIC> is set to have this be a comma instead, the parsing will
be confused, perhaps silently.

 use locale;
 use POSIX qw(locale_h);
 setlocale(LC_NUMERIC, "fr_FR") or die "Pardon";
 my $a = 1.2;
 print eval "$a + 1.5";
 print "\n";

prints C<13,5>.  This is because in that locale, the comma is the
decimal point character.  The C<eval> thus expands to:

 eval "1,2 + 1.5"

and the result is not what you likely expected.  No warnings are
generated.  If you do string C<eval>'s within the scope of
S<C<use locale>>, you should instead change the C<eval> line to do
something like:

 print eval "no locale; $a + 1.5";

This prints C<2.7>.

d1092 8
d1137 3
a1139 5
implemented in versions v5.8 and later.  See L<perluniintro>.

Starting in Perl v5.20, UTF-8 locales are supported in Perl, except for
C<LC_COLLATE> (use L<Unicode::Collate> instead).  If you have Perl v5.16
or v5.18 and can't upgrade, you can use
d1159 1
a1159 1
on individual strings.  If you know that all your locales will be
d1164 1
a1164 2
with Unicode.  The collation order will be by Unicode code point order.
It is strongly
d1169 10
a1178 21
All the modules and switches just described can be used in v5.20 with
just plain C<use locale>, and, should the input locales not be UTF-8,
you'll get the less than ideal behavior, described below, that you get
with pre-v5.16 Perls, or when you use the locale pragma without the
C<:not_characters> parameter in v5.16 and v5.18.  If you are using
exclusively UTF-8 locales in v5.20 and higher, the rest of this section
does not apply to you.

There are two cases, multi-byte and single-byte locales.  First
multi-byte:

The only multi-byte (or wide character) locale that Perl is ever likely
to support is UTF-8.  This is due to the difficulty of implementation,
the fact that high quality UTF-8 locales are now published for every
area of the world (L<http://unicode.org/Public/cldr/latest/>), and that
failing all that you can use the L<Encode> module to translate to/from
your locale.  So, you'll have to do one of those things if you're using
one of these locales, such as Big5 or Shift JIS.  For UTF-8 locales, in
Perls (pre v5.20) that don't have full UTF-8 locale support, they may
work reasonably well (depending on your C library implementation)
simply because both
d1182 1
a1182 1
properly under C<LC_CTYPE>.  To see if a character is a particular type
a1185 2
However, they are treated like single-byte locales, and will have the
restrictions described below.
a1186 1
For single-byte locales,
d1196 1
a1196 1
However, there are places where this breaks down.  Certain Perl constructs are
d1201 1
a1201 2
issue occurs with C<\N{...}>.  Prior to v5.20, It is therefore a bad
idea to use C<\p{}> or
d1207 1
a1207 1
disallowed.  (This boundary is between the codepoints at 255/256.)
a1226 4
Still another problem is that this approach can lead to two code
points meaning the same character.  Thus in a Greek locale, both U+03A7
and U+00D7 are GREEK CAPITAL LETTER CHI.

d1266 1
a1266 3
operating system upgrade.  If you have the source for Perl, include in
the perlbug email the output of the test described above in L</Testing
for broken locales>.
a1276 3

For special considerations when Perl is embedded in a C program,
see L<perlembed/Using embedded Perl with POSIX locales>.
@


1.1.1.11
log
@Import perl-5.20.2
@
text
@a375 4
This simultaneously affects all threads of the program, so it may be
problematic to use locales in threaded applications except where there
is a single locale applicable to all threads.

d542 1
a542 1
files.  Consult your local documentation for the exact details.  For
d554 1
a554 1
or if you have the "env" application you can do (in any shell)
d715 1
a715 1
if you C<"use locale">.
d752 1
a752 1
Perl currently only supports single-byte locales for C<LC_COLLATE>.  This means
d811 1
a811 2
functions--C<fc()>, C<lc()>, C<lcfirst()>, C<uc()>, and C<ucfirst()>;
case-mapping
d818 2
a819 2
example, if you move from the "C" locale to a 7-bit ISO 646 one,
you may find--possibly to your surprise--that C<"|"> moves from the
d827 1
a827 1
languages, are not well-supported.  The UTF-8 locale support is actually a
d840 1
a840 5
current locale.  Any literal character is the native character for the
given platform.  Hence 'A' means the character at code point 65 on ASCII
platforms, and 193 on EBCDIC.  That may or may not be an 'A' in the
current locale, if that locale even has an 'A'.
Similarly, all the escape sequences for particular characters,
d943 1
a943 1
characters such as C<"E<gt>"> and C<"|"> are alphanumeric.
d1400 3
a1402 4
only working under the newer wide library functions like C<iswalnum()>,
which Perl does not use.
These multi-byte locales are treated like single-byte locales, and will
have the restrictions described below.
d1422 1
a1422 1
locale will be ISO8859-1.  Use POSIX character classes instead.
d1474 3
a1476 3
v5.16 to the casing operations such as C<\L> and C<uc()>.  For
collation, in all releases so far, the system's C<strxfrm()> function is
called, and whatever it does is what you get.
@


1.1.1.12
log
@Import perl-5.24.2
@
text
@d35 3
a37 4
UTF-8 locales, except for sorting and string comparisons like C<lt> and
C<ge>.  (Use L<Unicode::Collate> for these.)  Perl continues to support
the old non UTF-8 locales as well.  There are currently no UTF-8 locales
for EBCDIC platforms.
d43 3
a45 3
However, it is possible to compute the POSIX locale data from them, and
earlier CLDR versions had these already extracted for you as UTF-8 locales
L<http://unicode.org/Public/cldr/2.0.1/>.)
d94 1
a94 1
these.  See L</Not within the scope of "use locale"> below.
d107 1
a107 2
Perl itself (outside the L<POSIX> module) will not use locales unless
specifically requested to (but
d143 1
a143 1
the S<C<use locale>> pragma (see L<The "use locale" pragma>) where
d163 1
a163 1
=head2 The C<"use locale"> pragma
d165 5
a169 8
WARNING!  Do NOT use this pragma in scripts that have multiple
L<threads|threads> active.  The locale is not local to a single thread.
Another thread may change the locale at any time, which could cause at a
minimum that a given thread is operating in a locale it isn't expecting
to be in.  On some platforms, segfaults can also occur.  The locale
change need not be explicit; some operations cause perl to change the
locale itself.  You are vulnerable simply by having done a C<"use
locale">.
d171 10
a180 5
By default, Perl itself (outside the L<POSIX> module)
ignores the current locale.  The S<C<use locale>>
pragma tells Perl to use the current locale for some operations.
Starting in v5.16, there are optional parameters to this pragma,
described below, which restrict which operations are affected by it.
d197 1
a197 1
=item B<Not within the scope of C<"use locale">>
d199 1
a199 2
Only certain operations originating outside Perl should be affected, as
follows:
d205 9
a213 1
The current locale is used when going outside of Perl with
d224 2
a225 1
C<POSIX::strxfrm()> use C<LC_COLLATE>.  All such functions
a236 9
Note that all C programs (including the perl interpreter, which is
written in C) always have an underlying locale.  That locale is the "C"
locale unless changed by a call to L<setlocale()|/The setlocale
function>.  When Perl starts up, it changes the underlying locale to the
one which is indicated by the L</ENVIRONMENT>.  When using the L<POSIX>
module or writing XS code, it is important to keep in mind that the
underlying locale may be something other than "C", even if the program
hasn't explicitly changed it.

d245 1
a245 1
C<use locale> retain that effect even outside the scope.
d255 1
a255 1
within the scope of a C<use locale>, not whether the C<write()>
d261 1
a261 1
L<qrE<sol>E<sol>|perlop/qrE<sol>STRINGE<sol>msixpodualn> with actual
a270 1

d273 1
a273 1
=item B<Under C<"use locale";>>
d279 1
a279 1
All the above operations
d296 15
a331 6
=item *

B<The variables L<$!|perlvar/$ERRNO>> (and its synonyms C<$ERRNO> and
C<$OS_ERROR>) B<and L<$^E|perlvar/$EXTENDED_OS_ERROR>> (and its synonym
C<$EXTENDED_OS_ERROR>) when used as strings use C<LC_MESSAGES>.

d338 1
a338 1
Note that C<use locale> calls may be
a345 60
Starting in Perl v5.16 in a very limited way, and more generally in
v5.22, you can restrict which category or categories are enabled by this
particular instance of the pragma by adding parameters to it.  For
example,

 use locale qw(:ctype :numeric);

enables locale awareness within its scope of only those operations
(listed above) that are affected by C<LC_CTYPE> and C<LC_NUMERIC>.

The possible categories are: C<:collate>, C<:ctype>, C<:messages>,
C<:monetary>, C<:numeric>, C<:time>, and the pseudo category
C<:characters> (described below).

Thus you can say

 use locale ':messages';

and only L<$!|perlvar/$ERRNO> and L<$^E|perlvar/$EXTENDED_OS_ERROR>
will be locale aware.  Everything else is unaffected.

Since Perl doesn't currently do anything with the C<LC_MONETARY>
category, specifying C<:monetary> does effectively nothing.  Some
systems have other categories, such as C<LC_PAPER_SIZE>, but Perl
also doesn't know anything about them, and there is no way to specify
them in this pragma's arguments.

You can also easily say to use all categories but one, by either, for
example,

 use locale ':!ctype';
 use locale ':not_ctype';

both of which mean to enable locale awarness of all categories but
C<LC_CTYPE>.  Only one category argument may be specified in a
S<C<use locale>> if it is of the negated form.

Prior to v5.22 only one form of the pragma with arguments is available:

 use locale ':not_characters';

(and you have to say C<not_>; you can't use the bang C<!> form).  This
pseudo category is a shorthand for specifying both C<:collate> and
C<:ctype>.  Hence, in the negated form, it is nearly the same thing as
saying

 use locale qw(:messages :monetary :numeric :time);

We use the term "nearly", because C<:not_characters> also turns on
S<C<use feature 'unicode_strings'>> within its scope.  This form is
less useful in v5.20 and later, and is described fully in
L</Unicode and UTF-8>, but briefly, it tells Perl to not use the
character portions of the locale definition, that is the C<LC_CTYPE> and
C<LC_COLLATE> categories.  Instead it will use the native character set
(extended by Unicode).  When using this parameter, you are responsible
for getting the external character set translated into the
native/Unicode one (which it already will be if it is one of the
increasingly popular UTF-8 locales).  There are convenient ways of doing
this, as described in L</Unicode and UTF-8>.

a347 7
WARNING!  Do NOT use this function in a L<thread|threads>.  The locale
will change in all other threads at the same time, and should your
thread get paused by the operating system, and another started, that
thread will not have the locale it is expecting.  On some platforms,
there can be a race leading to segfaults if two threads call this
function nearly simultaneously.

d376 4
d416 2
a417 2
Note that when a form of C<use locale> that doesn't include all
categories is specified, Perl ignores the excluded categories.
d526 1
a526 1
environment variable C<PERL_BADLANG> to "0" or "".
d616 1
a616 3
underlying C<LC_NUMERIC> and C<LC_MONETARY> locales (regardless of
whether called from within the scope of C<S<use locale>> or not).  (If
you just want the name of
a676 4
Note that if the platform doesn't have C<LC_NUMERIC> and/or
C<LC_MONETARY> available or enabled, the corresponding elements of the
hash will be missing.

d711 2
a712 2
In the scope of a S<C<use locale>> form that includes collation, Perl
looks to the C<LC_COLLATE>
d798 2
a799 2
In the scope of a S<C<use locale>> form that includes C<LC_CTYPE>, Perl
obeys the C<LC_CTYPE> locale
d821 8
d832 1
a832 5
languages, are not well-supported.  (If the platform has the capability
for Perl to detect such a locale, starting in Perl v5.22,
L<Perl will warn, default enabled|warnings/Category Hierarchy>,
using the C<locale> warning category, whenever such a locale is switched
into.)  The UTF-8 locale support is actually a
d834 2
a835 2
as if no C<LC_CTYPE> locale were in effect at all (except for tainting;
see L</SECURITY>).  POSIX locales, even UTF-8 ones,
a853 13
Starting in v5.22, Perl will by default warn when switching into a
locale that redefines any ASCII printable character (plus C<\t> and
C<\n>) into a different class than expected.  This is likely to
happen on modern locales only on EBCDIC platforms, where, for example,
a CCSID 0037 locale on a CCSID 1047 machine moves C<"[">, but it can
happen on ASCII platforms with the ISO 646 and other
7-bit locales that are essentially obsolete.  Things may still work,
depending on what features of Perl are used by the program.  For
example, in the example from above where C<"|"> becomes a C<\w>, and
there are no regular expressions where this matters, the program may
still work properly.  The warning lists all the characters that
it can determine could be adversely affected.

d862 4
a865 4
After a proper C<POSIX::setlocale()> call, and within the scope of
of a C<use locale> form that includes numerics, Perl obeys the
C<LC_NUMERIC> locale information, which controls an application's idea
of how numbers should be formatted for human readability.
d1007 2
a1008 2
The result string containing interpolated material is tainted if
a C<use locale> form that includes C<LC_CTYPE> is in effect.
d1017 2
a1018 2
I<etc>., are tainted if a C<use locale> form that includes
C<LC_CTYPE> is in effect, and the subpattern
d1042 2
a1043 2
operand of C<=~> becomes tainted when a C<use locale>
form that includes C<LC_CTYPE> is in effect, if modified as
d1060 2
a1061 2
Results are tainted if a C<use locale> form that includes C<LC_CTYPE> is
in effect.
d1070 9
d1130 2
a1131 2
This environment variable, available starting in Perl v5.20, if set
(to any value), tells Perl to not use the rest of the
d1143 3
a1145 2
variable is absent, or has a value other than "0" or "", Perl will
complain about locale setting failures.
d1185 1
a1185 1
=item C<LC_CTYPE>
d1219 1
a1219 1
category-specific C<LC_I<foo>>.
a1269 4
You could also exclude C<LC_NUMERIC>, if you don't need it, by

 use locale ':!numeric';

d1278 1
a1278 1
pragma (see L<The "use locale" pragma>) or, in the unlikely event
d1315 1
a1315 4
  http://unicode.org/Public/cldr/2.0.1/

(Newer versions of CLDR require you to compute the POSIX data yourself.
See L<http://unicode.org/Public/cldr/latest/>.)
d1396 1
a1396 4
area of the world (L<http://unicode.org/Public/cldr/2.0.1/> for
ones that are already set-up, but from an earlier version;
L<http://unicode.org/Public/cldr/latest/> for the most up-to-date, but
you have to extract the POSIX information yourself), and that
d1412 1
a1412 3
have the restrictions described below.  Starting in Perl v5.22 a warning
message is raised when Perl detects a multi-byte locale that it doesn't
fully support.
a1458 5

Because of all these problems, starting in v5.22, Perl will raise a
warning if a multi-byte (hence Unicode) code point is used when a
single-byte locale is in effect.  (Although it doesn't check for this if
doing so would unreasonably slow execution down.)
@


