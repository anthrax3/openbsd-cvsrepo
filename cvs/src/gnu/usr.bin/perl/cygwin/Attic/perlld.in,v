head	1.2;
access;
symbols
	OPENBSD_4_4:1.1.1.5.0.10
	OPENBSD_4_4_BASE:1.1.1.5
	OPENBSD_4_3:1.1.1.5.0.8
	OPENBSD_4_3_BASE:1.1.1.5
	OPENBSD_4_2:1.1.1.5.0.6
	OPENBSD_4_2_BASE:1.1.1.5
	OPENBSD_4_1:1.1.1.5.0.4
	OPENBSD_4_1_BASE:1.1.1.5
	OPENBSD_4_0:1.1.1.5.0.2
	OPENBSD_4_0_BASE:1.1.1.5
	PERL_5_8_8:1.1.1.5
	OPENBSD_3_9:1.1.1.4.0.8
	OPENBSD_3_9_BASE:1.1.1.4
	OPENBSD_3_8:1.1.1.4.0.6
	OPENBSD_3_8_BASE:1.1.1.4
	OPENBSD_3_7:1.1.1.4.0.4
	OPENBSD_3_7_BASE:1.1.1.4
	PERL_5_8_6:1.1.1.4
	OPENBSD_3_6:1.1.1.4.0.2
	OPENBSD_3_6_BASE:1.1.1.4
	PERL_5_8_5:1.1.1.4
	PERL_5_8_3:1.1.1.4
	OPENBSD_3_5:1.1.1.3.0.2
	OPENBSD_3_5_BASE:1.1.1.3
	PERL_5_8_2:1.1.1.3
	OPENBSD_3_4:1.1.1.2.0.4
	OPENBSD_3_4_BASE:1.1.1.2
	OPENBSD_3_3:1.1.1.2.0.2
	OPENBSD_3_3_BASE:1.1.1.2
	PERL_5_8_0:1.1.1.2
	OPENBSD_3_2:1.1.1.1.0.12
	OPENBSD_3_2_BASE:1.1.1.1
	OPENBSD_3_1:1.1.1.1.0.10
	OPENBSD_3_1_BASE:1.1.1.1
	OPENBSD_3_0:1.1.1.1.0.8
	OPENBSD_3_0_BASE:1.1.1.1
	PERL_5_6_1:1.1.1.1
	OPENBSD_2_9:1.1.1.1.0.6
	OPENBSD_2_9_BASE:1.1.1.1
	OPENBSD_2_8:1.1.1.1.0.4
	OPENBSD_2_8_BASE:1.1.1.1
	OPENBSD_2_7:1.1.1.1.0.2
	OPENBSD_2_7_BASE:1.1.1.1
	PERL_5_6_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2008.09.29.17.36.01;	author millert;	state dead;
branches;
next	1.1;

1.1
date	2000.04.06.16.08.58;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.04.06.16.08.58;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.10.27.22.14.52;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.12.03.02.43.40;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.04.07.21.12.58;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2006.03.28.18.47.50;	author millert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@#
# Perl script being a wrapper around the gnu ld. When a dll is specified to
#   to be built, special processing is done, else the standard ld is called.
#

# theese are pretty mandatory
my $CC = '@@CC@@';
my $DLLWRAP = '@@DLLWRAP@@';

# following are optional.
my $WRAPDRIVER = '@@WRAPDRIVER@@';
my $AS = '@@AS@@';
my $DLLTOOL = '@@DLLTOOL@@';
my $EXPORT_ALL = @@EXPORT_ALL@@;
# if some of extensions are undefined,
# no corresponding output will be done.
# most probably, you'd like to have an export library
my $DEF_EXT = '@@DEF_EXT@@';
# my $EXP_EXT = '@@EXP_EXT@@';
my $LIB_EXT = '@@LIB_EXT@@';

#my $DEBUG ="perlld.out";
my $DEBUG =undef;

my $args = join(" ",@@ARGV); # get args
my $verbose =grep(/^\-(v|\-verbose)$/, @@ARGV);

sub shellexec;

if ($DEBUG) {
  open DEBUGFILE, ">>$DEBUG";
  print DEBUGFILE "\n--- " .localtime() ."\nargs:\n$args\n\nenvironment:\n";
  foreach (keys(%ENV)) { print DEBUGFILE $_, "=", $ENV{$_}, "\n"; };
}

if ($args !~ /\-o (\S+)/) {
  print DEBUGFILE "+ no dll output -- passing to gcc\n\n" if $DEBUG;
  shellexec("$CC $args\n");
} else {
  my ($path, $command, $dllname, $libname) ='';

  $dllname =$1;
  print DEBUGFILE "output file: $dllname\n" if $DEBUG;
  # remove -o from args
  $args =~ s/(^| )\-o \S+/$1/;

  # Check for path:
  if( $dllname =~ /.*[\/\\]/){
    $dllname = $';
    $path = $&;
    $path =~ s,[/\\](\.[/\\])*,/,g;
  }
  if ($dllname =~ /\./) { $libname =$`; } else { $libname =$dllname; };
  $dllname ="$libname.dll";
  $libname ="lib$libname" unless ($libname =~ /^lib/);
  print DEBUGFILE "dll name: $dllname\nimport library: $libname\npath: $path\n" if $DEBUG;

  $command ="$DLLWRAP --dllname $dllname";
  $command .=" --driver-name $WRAPDRIVER" if $WRAPDRIVER;
  $command .=" --dlltool $DLLTOOL" if $DLLTOOL;
  $command .=" --export-all-symbols" if $EXPORT_ALL;
  $command .=" --as $AS" if $AS;
  $command .=" --verbose" if $verbose;

  $command .=" --output-def $libname$DEF_EXT" if $DEF_EXT;
  $command .=" --output-exp $libname$EXP_EXT" if $EXP_EXT;
  $command .=" --output-lib $libname$LIB_EXT" if $LIB_EXT;

  # other args are passed through
  shellexec("$command \\\n$args\n");

  if ($path) {
    $command ="mv $dllname";
    $command .=" $libname$LIB_EXT" if $LIB_EXT;
    shellexec("$command $path\n");
  };
};
close DEBUGFILE if $DEBUG;

#---------------------------------------------------------------------------
sub shellexec{
  my $command =shift;
  print $command;
  print DEBUGFILE $command if $DEBUG;
  system($command) == 0
    or die "perlld: *** system() failed to execute\n$command\n";
};

1;
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@virgin perl 5.6.0
@
text
@@


1.1.1.2
log
@stock perl 5.8.0 from CPAN
@
text
@d6 1
a6 1
# these are pretty mandatory
d8 6
a14 1

d18 1
a18 1
# my $DEF_EXT = '@@DEF_EXT@@';
a53 4
  my $v_e_r_s = '5_8_0';
  if ( $dllname =~ /.*perl.*/) { 
    $dllname ="cygperl$v_e_r_s.dll";
  } else {
a54 1
  }
d58 10
a67 8
  $command ="$CC -shared -o  $dllname";
#  $command .=" --verbose" if $verbose;

  $command .=" -Wl,--output-def=$libname$DEF_EXT" if $DEF_EXT;
  $command .=" -Wl,--output-exp=$libname$EXP_EXT" if $EXP_EXT;
  $command .=" -Wl,--out-implib=$libname.dll$LIB_EXT" if $LIB_EXT;
  $command .=" -Wl,--export-all-symbols" if $EXPORT_ALL;
  $command .=" -Wl,--enable-auto-import -Wl,--stack,8388608"; # always
d74 1
a74 1
    $command .=" $libname.dll$LIB_EXT" if $LIB_EXT;
@


1.1.1.3
log
@perl 5.8.2 from CPAN
@
text
@d49 2
a50 2
  my $v_e_r_s = '5_8_2';
  if ( $dllname =~ /libperl.*/) { 
@


1.1.1.4
log
@perl 5.8.3 from CPAN
@
text
@d49 1
a49 2
  my $v_e_r_s = '@@VERSION@@';
  $v_e_r_s =~ tr/./_/;
@


1.1.1.5
log
@perl 5.8.8 import
@
text
@d51 1
a51 1
  if ( $dllname =~ /libperl.*/) {
d54 1
a54 1
    $dllname ="$libname.dll";
d80 3
a82 3
sub shellexec {
  my $command = shift;
  print STDERR $command;
@


