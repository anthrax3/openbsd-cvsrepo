head	1.19;
access;
symbols
	OPENBSD_6_1_BASE:1.19
	OPENBSD_6_0:1.18.0.4
	OPENBSD_6_0_BASE:1.18
	OPENBSD_5_9:1.17.0.2
	OPENBSD_5_9_BASE:1.17
	OPENBSD_5_8:1.17.0.4
	OPENBSD_5_8_BASE:1.17
	PERL_5_20_2:1.1.1.16
	OPENBSD_5_7:1.16.0.2
	OPENBSD_5_7_BASE:1.16
	PERL_5_20_1:1.1.1.15
	OPENBSD_5_6:1.15.0.4
	OPENBSD_5_6_BASE:1.15
	PERL_5_18_2:1.1.1.14
	PERL:1.1.1
	OPENBSD_5_5:1.14.0.6
	OPENBSD_5_5_BASE:1.14
	OPENBSD_5_4:1.14.0.2
	OPENBSD_5_4_BASE:1.14
	PERL_5_16_3:1.1.1.13
	OPENBSD_5_3:1.13.0.10
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.13.0.8
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.6
	OPENBSD_5_0:1.13.0.4
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.13.0.2
	OPENBSD_4_9_BASE:1.13
	PERL_5_12_2:1.1.1.12
	OPENBSD_4_8:1.12.0.4
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.2
	OPENBSD_4_7_BASE:1.12
	PERL_5_10_1:1.1.1.11
	OPENBSD_4_6:1.11.0.6
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.2
	OPENBSD_4_5_BASE:1.11
	PERL_5_10_0:1.1.1.10
	OPENBSD_4_4:1.10.0.10
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.8
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.6
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.4
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.2
	OPENBSD_4_0_BASE:1.10
	PERL_5_8_8:1.1.1.9
	OPENBSD_3_9:1.9.0.6
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.4
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.2
	OPENBSD_3_7_BASE:1.9
	PERL_5_8_6:1.1.1.8
	OPENBSD_3_6:1.8.0.2
	OPENBSD_3_6_BASE:1.8
	PERL_5_8_5:1.1.1.7
	PERL_5_8_3:1.1.1.6
	OPENBSD_3_5:1.7.0.2
	OPENBSD_3_5_BASE:1.7
	PERL_5_8_2:1.1.1.6
	OPENBSD_3_4:1.6.0.4
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.6.0.2
	OPENBSD_3_3_BASE:1.6
	PERL_5_8_0:1.1.1.5
	OPENBSD_3_2:1.5.0.6
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.4
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	PERL_5_6_1:1.1.1.4
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	PERL_5_6_0:1.1.1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	PERL_500503:1.1.1.2
	CPAN:1.1.1
	OPENBSD_2_5:1.2.0.6
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.4
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	perl5003:1.1.1.1
	lwall:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.19
date	2017.02.05.00.31.51;	author afresh1;	state Exp;
branches;
next	1.18;
commitid	cxJ08BvJA9Pt2PTM;

1.18
date	2016.07.03.01.07.47;	author afresh1;	state Exp;
branches;
next	1.17;
commitid	GzHqjSTnBjdF7Wcw;

1.17
date	2015.04.25.19.14.36;	author afresh1;	state Exp;
branches;
next	1.16;
commitid	XRK22kO4se3v2i2I;

1.16
date	2014.11.17.20.56.47;	author afresh1;	state Exp;
branches;
next	1.15;
commitid	QP75iYx42Uo7mMxO;

1.15
date	2014.03.24.15.05.12;	author afresh1;	state Exp;
branches;
next	1.14;

1.14
date	2013.03.25.20.40.43;	author sthen;	state Exp;
branches;
next	1.13;

1.13
date	2010.09.24.15.06.38;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2009.10.12.18.24.20;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2008.09.29.17.35.56;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2006.03.28.19.22.55;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2005.01.15.21.30.17;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2004.08.09.18.08.53;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2003.12.03.03.02.18;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.10.27.22.25.16;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.24.18.34.43;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.06.17.03.34;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	99.04.29.22.50.51;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.11.30.07.47.57;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.08.19.10.11.35;	author downsj;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.08.19.10.11.35;	author downsj;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.04.29.22.36.49;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2000.04.06.16.08.30;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2001.05.24.18.21.49;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2002.10.27.22.14.47;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2003.12.03.02.43.30;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2004.08.09.17.45.29;	author millert;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2005.01.15.21.16.25;	author millert;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2006.03.28.18.47.27;	author millert;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	2008.09.29.17.18.02;	author millert;	state Exp;
branches;
next	1.1.1.11;

1.1.1.11
date	2009.10.12.18.10.34;	author millert;	state Exp;
branches;
next	1.1.1.12;

1.1.1.12
date	2010.09.24.14.48.34;	author millert;	state Exp;
branches;
next	1.1.1.13;

1.1.1.13
date	2013.03.25.20.06.25;	author sthen;	state Exp;
branches;
next	1.1.1.14;

1.1.1.14
date	2014.03.24.14.58.44;	author afresh1;	state Exp;
branches;
next	1.1.1.15;

1.1.1.15
date	2014.11.17.20.52.36;	author afresh1;	state Exp;
branches;
next	1.1.1.16;
commitid	B31cAbBIXiCqnL97;

1.1.1.16
date	2015.04.25.19.10.09;	author afresh1;	state Exp;
branches;
next	;
commitid	Wpcs5S8qILgEZC7F;


desc
@@


1.19
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@If you read this file _as_is_, just ignore the funny characters you see.
It is written in the POD format (see pod/perlpod.pod) which is specially
designed to be readable as is.

=head1 NAME

INSTALL - Build and Installation guide for perl 5.

=head1 SYNOPSIS

First, make sure you have an up-to-date version of Perl.  If you
didn't get your Perl source from CPAN, check the latest version at
http://www.cpan.org/src/.  Perl uses a version scheme where even-numbered
subreleases (like 5.8.x and 5.10.x) are stable maintenance releases and
odd-numbered subreleases (like 5.7.x and 5.9.x) are unstable
development releases.  Development releases should not be used in
production environments.  Fixes and new features are first carefully
tested in development releases and only if they prove themselves to be
worthy will they be migrated to the maintenance releases.

The basic steps to build and install perl 5 on a Unix system with all
the defaults are to run, from a freshly unpacked source tree:

	sh Configure -de
	make
	make test
	make install

Each of these is explained in further detail below.

The above commands will install Perl to /usr/local (or some other
platform-specific directory -- see the appropriate file in hints/.)
If that's not okay with you, you can run Configure interactively, by
just typing "sh Configure" (without the -de args). You can also specify
any prefix location by adding "-Dprefix='/some/dir'" to Configure's args.
To explicitly name the perl binary, use the command
"make install PERLNAME=myperl".

Building perl from source requires an ANSI compliant C compiler.
A minimum of C89 is required. Some features available in C99 will
be probed for and used when found. The perl build process does not
rely on anything more than C89.

These options, and many more, are explained in further detail below.

If you're building perl from a git repository, you should also consult
the documentation in pod/perlgit.pod for information on that special
circumstance.

If you have problems, corrections, or questions, please see
L<"Reporting Problems"> below.

For information on what's new in this release, see the
pod/perldelta.pod file.  For more information about how to find more
specific detail about changes, see the Changes file.

=head1 DESCRIPTION

This document is written in pod format as an easy way to indicate its
structure.  The pod format is described in pod/perlpod.pod, but you can
read it as is with any pager or editor.  Headings and items are marked
by lines beginning with '='.  The other mark-up used is

    B<text>     embolden text, used for switches, programs or commands
    C<code>	literal code
    L<name>     A link (cross reference) to name
    F<file>     A filename

Although most of the defaults are probably fine for most users,
you should probably at least skim through this document before
proceeding.

In addition to this file, check if there is a README file specific to
your operating system, since it may provide additional or different
instructions for building Perl.  If there is a hint file for your
system (in the hints/ directory) you might also want to read it
for even more information.

For additional information about porting Perl, see the section on
L<"Porting information"> below, and look at the files in the Porting/
directory.

=head1 PRELIMINARIES

=head2 Changes and Incompatibilities

Please see pod/perldelta.pod for a description of the changes and
potential incompatibilities introduced with this release.  A few of
the most important issues are listed below, but you should refer
to pod/perldelta.pod for more detailed information.

B<WARNING:> This version is not binary compatible with earlier versions
of Perl.  If you have built extensions (i.e. modules that include C code)
using an earlier version of Perl, you will need to rebuild and reinstall
those extensions.

Pure perl modules without XS or C code should continue to work fine
without reinstallation.  See the discussion below on
L<"Coexistence with earlier versions of perl 5"> for more details.

The standard extensions supplied with Perl will be handled automatically.

On a related issue, old modules may possibly be affected by the changes
in the Perl language in the current release.  Please see
pod/perldelta.pod for a description of what's changed.  See your
installed copy of the perllocal.pod file for a (possibly incomplete)
list of locally installed modules.  Also see the L<CPAN> module's
C<autobundle> function for one way to make a "bundle" of your currently
installed modules.

=head1 Run Configure

Configure will figure out various things about your system.  Some
things Configure will figure out for itself, other things it will ask
you about.  To accept the default, just press RETURN.   The default is
almost always okay.  It is normal for some things to be "NOT found",
since Configure often searches for many different ways of performing
the same function.

At any Configure prompt, you can type  &-d  and Configure will use the
defaults from then on.

After it runs, Configure will perform variable substitution on all the
*.SH files and offer to run make depend.

The results of a Configure run are stored in the config.sh and Policy.sh
files.

=head2 Common Configure options

Configure supports a number of useful options.  Run

	Configure -h

to get a listing.  See the Porting/Glossary file for a complete list of
Configure variables you can set and their definitions.

=over 4

=item C compiler

To compile with gcc, if it's not the default compiler on your
system, you should run

	sh Configure -Dcc=gcc

This is the preferred way to specify gcc (or any another alternative
compiler) so that the hints files can set appropriate defaults.

=item Installation prefix

By default, for most systems, perl will be installed in
/usr/local/{bin, lib, man}.  (See L<"Installation Directories">
and L<"Coexistence with earlier versions of perl 5"> below for
further details.)

You can specify a different 'prefix' for the default installation
directory when Configure prompts you, or by using the Configure command
line option -Dprefix='/some/directory', e.g.

	sh Configure -Dprefix=/opt/perl

If your prefix contains the string "perl", then the suggested
directory structure is simplified.  For example, if you use
prefix=/opt/perl, then Configure will suggest /opt/perl/lib instead of
/opt/perl/lib/perl5/.  Again, see L<"Installation Directories"> below
for more details.  Do not include a trailing slash, (i.e. /opt/perl/)
or you may experience odd test failures.

NOTE:  You must not specify an installation directory that is the same
as or below your perl source directory.  If you do, installperl will
attempt infinite recursion.

=item /usr/bin/perl

It may seem obvious, but Perl is useful only when users can easily
find it.  It's often a good idea to have both /usr/bin/perl and
/usr/local/bin/perl be symlinks to the actual binary.  Be especially
careful, however, not to overwrite a version of perl supplied by your
vendor unless you are sure you know what you are doing.  If you insist
on replacing your vendor's perl, useful information on how it was
configured may be found with

	perl -V:config_args

(Check the output carefully, however, since this doesn't preserve
spaces in arguments to Configure.  For that, you have to look carefully
at config_arg1, config_arg2, etc.)

By default, Configure will not try to link /usr/bin/perl to the current
version of perl.  You can turn on that behavior by running

	Configure -Dinstallusrbinperl

or by answering 'yes' to the appropriate Configure prompt.

In any case, system administrators are strongly encouraged to put
(symlinks to) perl and its accompanying utilities, such as perldoc,
into a directory typically found along a user's PATH, or in another
obvious and convenient place.

=item Building a development release

For development releases (odd subreleases, like 5.9.x) if you want to
use Configure -d, you will also need to supply -Dusedevel to Configure,
because the default answer to the question "do you really want to
Configure a development version?" is "no".  The -Dusedevel skips that
sanity check.

=back

If you are willing to accept all the defaults, and you want terse
output, you can run

	sh Configure -des

=head2 Altering Configure variables for C compiler switches etc.

For most users, most of the Configure defaults are fine, or can easily
be set on the Configure command line.  However, if Configure doesn't
have an option to do what you want, you can change Configure variables
after the platform hints have been run by using Configure's -A switch.
For example, here's how to add a couple of extra flags to C compiler
invocations:

	sh Configure -Accflags="-DPERL_EXTERNAL_GLOB -DNO_HASH_SEED"

To clarify, those ccflags values are not Configure options; if passed to
Configure directly, they won't do anything useful (they will define a
variable in config.sh, but without taking any action based upon it).
But when passed to the compiler, those flags will activate #ifdefd code.

For more help on Configure switches, run

	sh Configure -h

=head2 Major Configure-time Build Options

There are several different ways to Configure and build perl for your
system.  For most users, the defaults are sensible and will work.
Some users, however, may wish to further customize perl.  Here are
some of the main things you can change.

=head3 Threads

On some platforms, perl can be compiled with support for threads.  To
enable this, run

	sh Configure -Dusethreads

The default is to compile without thread support.

Perl used to have two different internal threads implementations.  The
current model (available internally since 5.6, and as a user-level module
since 5.8) is called interpreter-based implementation (ithreads), with
one interpreter per thread, and explicit sharing of data. The (deprecated)
5.005 version (5005threads) was removed for release 5.10.

The 'threads' module is for use with the ithreads implementation.  The
'Thread' module emulates the old 5005threads interface on top of the
current ithreads model.

When using threads, perl uses a dynamically-sized buffer for some of
the thread-safe library calls, such as those in the getpw*() family.
This buffer starts small, but it will keep growing until the result
fits.  To get a fixed upper limit, you should compile Perl with
PERL_REENTRANT_MAXSIZE defined to be the number of bytes you want.  One
way to do this is to run Configure with
C<-Accflags=-DPERL_REENTRANT_MAXSIZE=65536>.

=head3 Large file support

Since Perl 5.6.0, Perl has supported large files (files larger than
2 gigabytes), and in many common platforms like Linux or Solaris this
support is on by default.

This is both good and bad. It is good in that you can use large files,
seek(), stat(), and -s them.  It is bad in that if you are interfacing
Perl using some extension, the components you are connecting to must also
be large file aware: if Perl thinks files can be large but the other
parts of the software puzzle do not understand the concept, bad things
will happen.

There's also one known limitation with the current large files
implementation: unless you also have 64-bit integers (see the next
section), you cannot use the printf/sprintf non-decimal integer formats
like C<%x> to print filesizes.  You can use C<%d>, though.

If you want to compile perl without large file support, use

    sh Configure -Uuselargefiles

=head3 64 bit support

If your platform does not run natively at 64 bits, but can simulate
them with compiler flags and/or C<long long> or C<int64_t>,
you can build a perl that uses 64 bits.

There are actually two modes of 64-bitness: the first one is achieved
using Configure -Duse64bitint and the second one using Configure
-Duse64bitall.  The difference is that the first one is minimal and
the second one maximal.  The first works in more places than the second.

The C<use64bitint> option does only as much as is required to get
64-bit integers into Perl (this may mean, for example, using "long
longs") while your memory may still be limited to 2 gigabytes (because
your pointers could still be 32-bit).  Note that the name C<64bitint>
does not imply that your C compiler will be using 64-bit C<int>s (it
might, but it doesn't have to).  The C<use64bitint> simply means that
you will be able to have 64 bit-wide scalar values.

The C<use64bitall> option goes all the way by attempting to switch
integers (if it can), longs (and pointers) to being 64-bit.  This may
create an even more binary incompatible Perl than -Duse64bitint: the
resulting executable may not run at all in a 32-bit box, or you may
have to reboot/reconfigure/rebuild your operating system to be 64-bit
aware.

Natively 64-bit systems need neither -Duse64bitint nor -Duse64bitall.
On these systems, it might be the default compilation mode, and there
is currently no guarantee that passing no use64bitall option to the
Configure process will build a 32bit perl. Implementing -Duse32bit*
options is planned for a future release of perl.

=head3 Long doubles

In some systems you may be able to use long doubles to enhance the
range and precision of your double precision floating point numbers
(that is, Perl's numbers).  Use Configure -Duselongdouble to enable
this support (if it is available).

Note that the exact format and range of long doubles varies:
the most common is the x86 80-bit (64 bits of mantissa) format,
but there are others, with different mantissa and exponent ranges.

=head3 "more bits"

You can "Configure -Dusemorebits" to turn on both the 64-bit support
and the long double support.

=head3 quadmath

One option for more precision is that gcc 4.6 and later have a library
called quadmath, which implements the IEEE 754 quadruple precision
(128-bit, 113 bits of mantissa) floating point numbers.  The library
works at least on x86 and ia64 platforms.  It may be part of your gcc
installation, or you may need to install it separately.

With "Configure -Dusequadmath" you can try enabling its use, but note
the compiler dependency, you may need to also add "-Dcc=...".
At C level the type is called C<__float128> (note, not "long double"),
but Perl source knows it as NV.  (This is not "long doubles".)

=head3 Algorithmic Complexity Attacks on Hashes

Perl 5.18 reworked the measures used to secure its hash function
from algorithmic complexity attacks.  By default it will build with
all of these measures enabled along with support for controlling and
disabling them via environment variables.

You can override various aspects of this feature by defining various
symbols during configure. An example might be:

    Configure -Accflags=-DPERL_HASH_FUNC_SIPHASH

B<Unless stated otherwise these options are considered experimental or
insecure and are not recommended for production use.>

Perl 5.18 includes support for multiple hash functions, and changed
the default (to ONE_AT_A_TIME_HARD), you can choose a different
algorithm by defining one of the following symbols. Note that as of
Perl 5.18 we can only recommend use of the default or SIPHASH. All
the others are known to have security issues and are for research
purposes only.

    PERL_HASH_FUNC_SIPHASH
    PERL_HASH_FUNC_SDBM
    PERL_HASH_FUNC_DJB2
    PERL_HASH_FUNC_SUPERFAST
    PERL_HASH_FUNC_MURMUR3
    PERL_HASH_FUNC_ONE_AT_A_TIME
    PERL_HASH_FUNC_ONE_AT_A_TIME_HARD
    PERL_HASH_FUNC_ONE_AT_A_TIME_OLD

Perl 5.18 randomizes the order returned by keys(), values(), and each(),
and allows controlling this behavior by using of the PERL_PERTURB_KEYS
option. You can disable this option entirely with the define:

    PERL_PERTURB_KEYS_DISABLED

You can disable the environment variable checks and specify the type of
key traversal randomization to be used by defining one of these:

    PERL_PERTURB_KEYS_RANDOM
    PERL_PERTURB_KEYS_DETERMINISTIC

In Perl 5.18 the seed used for the hash function is randomly selected
at process start which can be overridden by specifying a seed by setting
the PERL_HASH_SEED environment variable.

You can change this behavior by building perl with the

   USE_HASH_SEED_EXPLICIT

define, in which case one has to explicitly set the PERL_HASH_SEED
environment variable to enable the security feature or by adding

    NO_HASH_SEED

to the compilation flags to completely disable the randomisation feature.
Note these modes are poorly tested, insecure and not recommended.

B<Perl has never guaranteed any ordering of the hash keys>, and the
ordering has already changed several times during the lifetime of Perl
5.  Also, the ordering of hash keys has always been, and continues to
be, affected by the insertion order.  Note that because of this
randomisation for example the Data::Dumper results will be different
between different runs of Perl, since Data::Dumper by default dumps
hashes "unordered".  The use of the Data::Dumper C<Sortkeys> option is
recommended.

See L<perlrun/PERL_HASH_SEED> and L<perlrun/PERL_PERTURB_KEYS> for
details on the environment variables, and L<perlsec/Algorithmic
Complexity Attacks> for further security details.

=head3 SOCKS

Perl can be configured to be 'socksified', that is, to use the SOCKS
TCP/IP proxy protocol library.  SOCKS is used to give applications
access to transport layer network proxies.  Perl supports only SOCKS
Version 5.  The corresponding Configure option is -Dusesocks.
You can find more about SOCKS from wikipedia at
L<http://en.wikipedia.org/wiki/SOCKS>.

=head3 Dynamic Loading

By default, Configure will compile perl to use dynamic loading.
If you want to force perl to be compiled completely
statically, you can either choose this when Configure prompts you or
you can use the Configure command line option -Uusedl.
With this option, you won't be able to use any new extension
(XS) module without recompiling perl itself.

=head3 Building a shared Perl library

Currently, for most systems, the main perl executable is built by
linking the "perl library" libperl.a with perlmain.o, your static
extensions, and various extra libraries, such as -lm.

On systems that support dynamic loading, it may be possible to
replace libperl.a with a shared libperl.so.  If you anticipate building
several different perl binaries (e.g. by embedding libperl into
different programs, or by using the optional compiler extension), then
you might wish to build a shared libperl.so so that all your binaries
can share the same library.

The disadvantages are that there may be a significant performance
penalty associated with the shared libperl.so, and that the overall
mechanism is still rather fragile with respect to different versions
and upgrades.

In terms of performance, on my test system (Solaris 2.5_x86) the perl
test suite took roughly 15% longer to run with the shared libperl.so.
Your system and typical applications may well give quite different
results.

The default name for the shared library is typically something like
libperl.so.5.8.8 (for Perl 5.8.8), or libperl.so.588, or simply
libperl.so.  Configure tries to guess a sensible naming convention
based on your C library name.  Since the library gets installed in a
version-specific architecture-dependent directory, the exact name
isn't very important anyway, as long as your linker is happy.

You can elect to build a shared libperl by

	sh Configure -Duseshrplib

To build a shared libperl, the environment variable controlling shared
library search (LD_LIBRARY_PATH in most systems, DYLD_LIBRARY_PATH for
Darwin, LD_LIBRARY_PATH/SHLIB_PATH
for HP-UX, LIBPATH for AIX, PATH for Cygwin) must be set up to include
the Perl build directory because that's where the shared libperl will
be created.  Configure arranges makefile to have the correct shared
library search settings.  You can find the name of the environment
variable Perl thinks works in your your system by

	grep ldlibpthname config.sh

However, there are some special cases where manually setting the
shared library path might be required.  For example, if you want to run
something like the following with the newly-built but not-yet-installed
./perl:

        ./perl -MTestInit t/misc/failing_test.t

or

        ./perl -Ilib ~/my_mission_critical_test

then you need to set up the shared library path explicitly.
You can do this with

   LD_LIBRARY_PATH=`pwd`:$LD_LIBRARY_PATH; export LD_LIBRARY_PATH

for Bourne-style shells, or

   setenv LD_LIBRARY_PATH `pwd`

for Csh-style shells.  (This procedure may also be needed if for some
unexpected reason Configure fails to set up makefile correctly.) (And
again, it may be something other than LD_LIBRARY_PATH for you, see above.)

You can often recognize failures to build/use a shared libperl from error
messages complaining about a missing libperl.so (or libperl.sl in HP-UX),
for example:

    18126:./miniperl: /sbin/loader: Fatal Error: cannot map libperl.so

There is also an potential problem with the shared perl library if you
want to have more than one "flavor" of the same version of perl (e.g.
with and without -DDEBUGGING).  For example, suppose you build and
install a standard Perl 5.10.0 with a shared library.  Then, suppose you
try to build Perl 5.10.0 with -DDEBUGGING enabled, but everything else
the same, including all the installation directories.  How can you
ensure that your newly built perl will link with your newly built
libperl.so.8 rather with the installed libperl.so.8?  The answer is
that you might not be able to.  The installation directory is encoded
in the perl binary with the LD_RUN_PATH environment variable (or
equivalent ld command-line option).  On Solaris, you can override that
with LD_LIBRARY_PATH; on Linux, you can only override at runtime via
LD_PRELOAD, specifying the exact filename you wish to be used; and on
Digital Unix, you can override LD_LIBRARY_PATH by setting the
_RLD_ROOT environment variable to point to the perl build directory.

In other words, it is generally not a good idea to try to build a perl
with a shared library if $archlib/CORE/$libperl already exists from a
previous build.

A good workaround is to specify a different directory for the
architecture-dependent library for your -DDEBUGGING version of perl.
You can do this by changing all the *archlib* variables in config.sh to
point to your new architecture-dependent library.

=head3 Environment access

Perl often needs to write to the program's environment, such as when
C<%ENV> is assigned to. Many implementations of the C library function
C<putenv()> leak memory, so where possible perl will manipulate the
environment directly to avoid these leaks. The default is now to perform
direct manipulation whenever perl is running as a stand alone interpreter,
and to call the safe but potentially leaky C<putenv()> function when the
perl interpreter is embedded in another application. You can force perl
to always use C<putenv()> by compiling with
C<-Accflags="-DPERL_USE_SAFE_PUTENV">, see section L</"Altering Configure
variables for C compiler switches etc.">.  You can force an embedded perl
to use direct manipulation by setting C<PL_use_safe_putenv = 0;> after
the C<perl_construct()> call.

=head2 Installation Directories

The installation directories can all be changed by answering the
appropriate questions in Configure.  For convenience, all the installation
questions are near the beginning of Configure.  Do not include trailing
slashes on directory names.  At any point during the Configure process,
you can answer a question with  &-d  and Configure will use the defaults
from then on.  Alternatively, you can

	grep '^install' config.sh

after Configure has run to verify the installation paths.

The defaults are intended to be reasonable and sensible for most
people building from sources.  Those who build and distribute binary
distributions or who export perl to a range of systems will probably
need to alter them.  If you are content to just accept the defaults,
you can safely skip the next section.

The directories set up by Configure fall into three broad categories.

=over 4

=item Directories for the perl distribution

By default, Configure will use the following directories for 5.24.1.
$version is the full perl version number, including subversion, e.g.
5.12.3, and $archname is a string like sun4-sunos,
determined by Configure.  The full definitions of all Configure
variables are in the file Porting/Glossary.

    Configure variable	Default value
    $prefixexp		/usr/local
    $binexp		$prefixexp/bin
    $scriptdirexp	$prefixexp/bin
    $privlibexp		$prefixexp/lib/perl5/$version
    $archlibexp		$prefixexp/lib/perl5/$version/$archname
    $man1direxp		$prefixexp/man/man1
    $man3direxp		$prefixexp/man/man3
    $html1direxp	(none)
    $html3direxp	(none)

$prefixexp is generated from $prefix, with ~ expansion done to convert
home directories into absolute paths. Similarly for the other variables
listed. As file system calls do not do this, you should always reference
the ...exp variables, to support users who build perl in their home
directory.

Actually, Configure recognizes the SVR3-style
/usr/local/man/l_man/man1 directories, if present, and uses those
instead.  Also, if $prefix contains the string "perl", the library
directories are simplified as described below.  For simplicity, only
the common style is shown here.

=item Directories for site-specific add-on files

After perl is installed, you may later wish to add modules (e.g. from
CPAN) or scripts.  Configure will set up the following directories to
be used for installing those add-on modules and scripts.

   Configure        Default
   variable          value
 $siteprefixexp    $prefixexp
 $sitebinexp       $siteprefixexp/bin
 $sitescriptexp    $siteprefixexp/bin
 $sitelibexp       $siteprefixexp/lib/perl5/site_perl/$version
 $sitearchexp
               $siteprefixexp/lib/perl5/site_perl/$version/$archname
 $siteman1direxp   $siteprefixexp/man/man1
 $siteman3direxp   $siteprefixexp/man/man3
 $sitehtml1direxp  (none)
 $sitehtml3direxp  (none)

By default, ExtUtils::MakeMaker will install architecture-independent
modules into $sitelib and architecture-dependent modules into $sitearch.

=item Directories for vendor-supplied add-on files

Lastly, if you are building a binary distribution of perl for
distribution, Configure can optionally set up the following directories
for you to use to distribute add-on modules.

   Configure          Default
   variable            value
 $vendorprefixexp    (none)

 (The next ones are set only if vendorprefix is set.)

 $vendorbinexp       $vendorprefixexp/bin
 $vendorscriptexp    $vendorprefixexp/bin
 $vendorlibexp       $vendorprefixexp/lib/perl5/vendor_perl/$version
 $vendorarchexp
           $vendorprefixexp/lib/perl5/vendor_perl/$version/$archname
 $vendorman1direxp   $vendorprefixexp/man/man1
 $vendorman3direxp   $vendorprefixexp/man/man3
 $vendorhtml1direxp  (none)
 $vendorhtml3direxp  (none)

These are normally empty, but may be set as needed.  For example,
a vendor might choose the following settings:

 $prefix           /usr
 $siteprefix       /usr/local
 $vendorprefix     /usr

This would have the effect of setting the following:

 $binexp           /usr/bin
 $scriptdirexp     /usr/bin
 $privlibexp       /usr/lib/perl5/$version
 $archlibexp       /usr/lib/perl5/$version/$archname
 $man1direxp       /usr/man/man1
 $man3direxp       /usr/man/man3

 $sitebinexp       /usr/local/bin
 $sitescriptexp    /usr/local/bin
 $sitelibexp       /usr/local/lib/perl5/site_perl/$version
 $sitearchexp      /usr/local/lib/perl5/site_perl/$version/$archname
 $siteman1direxp   /usr/local/man/man1
 $siteman3direxp   /usr/local/man/man3

 $vendorbinexp     /usr/bin
 $vendorscriptexp  /usr/bin
 $vendorlibexp     /usr/lib/perl5/vendor_perl/$version
 $vendorarchexp    /usr/lib/perl5/vendor_perl/$version/$archname
 $vendorman1direxp /usr/man/man1
 $vendorman3direxp /usr/man/man3

Note how in this example, the vendor-supplied directories are in the
/usr hierarchy, while the directories reserved for the end user are in
the /usr/local hierarchy.

The entire installed library hierarchy is installed in locations with
version numbers, keeping the installations of different versions distinct.
However, later installations of Perl can still be configured to search
the installed libraries corresponding to compatible earlier versions.
See L<"Coexistence with earlier versions of perl 5"> below for more
details on how Perl can be made to search older version directories.

Of course you may use these directories however you see fit.  For
example, you may wish to use $siteprefix for site-specific files that
are stored locally on your own disk and use $vendorprefix for
site-specific files that are stored elsewhere on your organization's
network.  One way to do that would be something like

 sh Configure -Dsiteprefix=/usr/local -Dvendorprefix=/usr/share/perl

=item otherlibdirs

As a final catch-all, Configure also offers an $otherlibdirs
variable.  This variable contains a colon-separated list of additional
directories to add to @@INC.  By default, it will be empty.
Perl will search these directories (including architecture and
version-specific subdirectories) for add-on modules and extensions.

For example, if you have a bundle of perl libraries from a previous
installation, perhaps in a strange place:

	Configure -Dotherlibdirs=/usr/lib/perl5/site_perl/5.8.1

=item APPLLIB_EXP

There is one other way of adding paths to @@INC at perl build time, and
that is by setting the APPLLIB_EXP C pre-processor token to a colon-
separated list of directories, like this

       sh Configure -Accflags='-DAPPLLIB_EXP=\"/usr/libperl\"'

The directories defined by APPLLIB_EXP get added to @@INC I<first>,
ahead of any others, and so provide a way to override the standard perl
modules should you, for example, want to distribute fixes without
touching the perl distribution proper.  And, like otherlib dirs,
version and architecture specific subdirectories are also searched, if
present, at run time.  Of course, you can still search other @@INC
directories ahead of those in APPLLIB_EXP by using any of the standard
run-time methods: $PERLLIB, $PERL5LIB, -I, use lib, etc.

=item usesitecustomize

Run-time customization of @@INC can be enabled with:

	sh Configure -Dusesitecustomize

which will define USE_SITECUSTOMIZE and $Config{usesitecustomize}.
When enabled, this makes perl run F<$sitelibexp/sitecustomize.pl> before
anything else.  This script can then be set up to add additional
entries to @@INC.

=item Man Pages

By default, man pages will be installed in $man1dir and $man3dir, which
are normally /usr/local/man/man1 and /usr/local/man/man3.  If you
want to use a .3pm suffix for perl man pages, you can do that with

	sh Configure -Dman3ext=3pm

=item HTML pages

Currently, the standard perl installation does not do anything with
HTML documentation, but that may change in the future.  Further, some
add-on modules may wish to install HTML documents.  The html Configure
variables listed above are provided if you wish to specify where such
documents should be placed.  The default is "none", but will likely
eventually change to something useful based on user feedback.

=back

Some users prefer to append a "/share" to $privlib and $sitelib
to emphasize that those directories can be shared among different
architectures.

Note that these are just the defaults.  You can actually structure the
directories any way you like.  They don't even have to be on the same
filesystem.

Further details about the installation directories, maintenance and
development subversions, and about supporting multiple versions are
discussed in L<"Coexistence with earlier versions of perl 5"> below.

If you specify a prefix that contains the string "perl", then the
library directory structure is slightly simplified.  Instead of
suggesting $prefix/lib/perl5/, Configure will suggest $prefix/lib.

Thus, for example, if you Configure with
-Dprefix=/opt/perl, then the default library directories for 5.9.0 are

    Configure variable	Default value
	$privlib	/opt/perl/lib/5.9.0
	$archlib	/opt/perl/lib/5.9.0/$archname
	$sitelib	/opt/perl/lib/site_perl/5.9.0
	$sitearch	/opt/perl/lib/site_perl/5.9.0/$archname

=head2 Changing the installation directory

Configure distinguishes between the directory in which perl (and its
associated files) should be installed, and the directory in which it
will eventually reside.  For most sites, these two are the same; for
sites that use AFS, this distinction is handled automatically.
However, sites that use package management software such as rpm or
dpkg, or users building binary packages for distribution may also
wish to install perl into a different directory before moving perl
to its final destination.  There are two ways to do that:

=over 4

=item installprefix

To install perl under the /tmp/perl5 directory, use the following
command line:

    sh Configure -Dinstallprefix=/tmp/perl5

(replace /tmp/perl5 by a directory of your choice).

Beware, though, that if you go to try to install new add-on
modules, they too will get installed in under '/tmp/perl5' if you
follow this example.  That's why it's usually better to use DESTDIR,
as shown in the next section.

=item DESTDIR

If you need to install perl on many identical systems, it is convenient
to compile it once and create an archive that can be installed on
multiple systems.  Suppose, for example, that you want to create an
archive that can be installed in /opt/perl.  One way to do that is by
using the DESTDIR variable during C<make install>.  The DESTDIR is
automatically prepended to all the installation paths.  Thus you
simply do:

    sh Configure -Dprefix=/opt/perl -des
    make
    make test
    make install DESTDIR=/tmp/perl5
    cd /tmp/perl5/opt/perl
    tar cvf /tmp/perl5-archive.tar .

=back

=head2 Relocatable @@INC

To create a relocatable perl tree, use the following command line:

    sh Configure -Duserelocatableinc

Then the paths in @@INC (and everything else in %Config) can be
optionally located via the path of the perl executable.

That means that, if the string ".../" is found at the start of any
path, it's substituted with the directory of $^X. So, the relocation
can be configured on a per-directory basis, although the default with
"-Duserelocatableinc" is that everything is relocated. The initial
install is done to the original configured prefix.

This option is not compatible with the building of a shared libperl
("-Duseshrplib"), because in that case perl is linked with an hard-coded
rpath that points at the libperl.so, that cannot be relocated.

=head2 Site-wide Policy settings

After Configure runs, it stores a number of common site-wide "policy"
answers (such as installation directories) in the Policy.sh file.
If you want to build perl on another system using the same policy
defaults, simply copy the Policy.sh file to the new system's perl build
directory, and Configure will use it. This will work even if Policy.sh was
generated for another version of Perl, or on a system with a
different architecture and/or operating system. However, in such cases,
you should review the contents of the file before using it: for
example, your new target may not keep its man pages in the same place
as the system on which the file was generated.

Alternatively, if you wish to change some or all of those policy
answers, you should

	rm -f Policy.sh

to ensure that Configure doesn't re-use them.

Further information is in the Policy_sh.SH file itself.

If the generated Policy.sh file is unsuitable, you may freely edit it
to contain any valid shell commands.  It will be run just after the
platform-specific hints files.

=head2 Disabling older versions of Perl

Configure will search for binary compatible versions of previously
installed perl binaries in the tree that is specified as target tree,
and these will be used as locations to search for modules by the perl
being built. The list of perl versions found will be put in the Configure
variable inc_version_list.

To disable this use of older perl modules, even completely valid pure
perl modules, you can specify to not include the paths found:

       sh Configure -Dinc_version_list=none ...

If you do want to use modules from some previous perl versions, the
variable must contain a space separated list of directories under the
site_perl directory, and has to include architecture-dependent
directories separately, eg.

       sh Configure -Dinc_version_list="5.16.0/x86_64-linux 5.16.0" ...

When using the newer perl, you can add these paths again in the
PERL5LIB environment variable or with perl's -I runtime option.

=head2 Building Perl outside of the source directory

Sometimes it is desirable to build Perl in a directory different from
where the sources are, for example if you want to keep your sources
read-only, or if you want to share the sources between different binary
architectures.  You can do this (if your file system supports symbolic
links) by

	mkdir /tmp/perl/build/directory
	cd /tmp/perl/build/directory
	sh /path/to/perl/source/Configure -Dmksymlinks ...

This will create in /tmp/perl/build/directory a tree of symbolic links
pointing to files in /path/to/perl/source.  The original files are left
unaffected.  After Configure has finished you can just say

	make
	make test
	make install

as usual, and Perl will be built in /tmp/perl/build/directory.

=head2 Building a debugging perl

You can run perl scripts under the perl debugger at any time with
B<perl -d your_script>.  If, however, you want to debug perl itself,
you probably want to have support for perl internal debugging code
(activated by adding -DDEBUGGING to ccflags), and/or support for the
system debugger by adding -g to the optimisation flags. For that,
use the parameter:

	sh Configure -DDEBUGGING

or

	sh Configure -DDEBUGGING=<mode>

For a more eye appealing call, -DEBUGGING is defined to be an alias
for -DDEBUGGING. For both, the -U calls are also supported, in order
to be able to overrule the hints or Policy.sh settings.

Here are the DEBUGGING modes:

=over 4

=item -DDEBUGGING

=item -DEBUGGING

=item -DEBUGGING=both

Sets both -DDEBUGGING in the ccflags, and adds -g to optimize.

You can actually specify -g and -DDEBUGGING independently (see below),
but usually it's convenient to have both.

=item -DEBUGGING=-g

=item -Doptimize=-g

Adds -g to optimize, but does not set -DDEBUGGING.

(Note:  Your system may actually require something like cc -g2.
Check your man pages for cc(1) and also any hint file for your system.)

=item -DEBUGGING=none

=item -UDEBUGGING

Removes -g from optimize, and -DDEBUGGING from ccflags.

=back

If you are using a shared libperl, see the warnings about multiple
versions of perl under L<Building a shared Perl library>.

Note that a perl built with -DDEBUGGING will be much bigger and will run
much, much more slowly than a standard perl.

=head2 DTrace support

On platforms where DTrace is available, it may be enabled by
using the -Dusedtrace option to Configure. DTrace probes are available
for subroutine entry (sub-entry) and subroutine exit (sub-exit). Here's a
simple D script that uses them:

  perl$target:::sub-entry, perl$target:::sub-return {
    printf("%s %s (%s:%d)\n", probename == "sub-entry" ? "->" : "<-",
              copyinstr(arg0), copyinstr(arg1), arg2);
  }


=head2 Extensions

Perl ships with a number of standard extensions.  These are contained
in the ext/ subdirectory.

By default, Configure will offer to build every extension which appears
to be supported.  For example, Configure will offer to build GDBM_File
only if it is able to find the gdbm library.

To disable certain extensions so that they are not built, use the
-Dnoextensions=... and -Donlyextensions=... options.  They both accept
a space-separated list of extensions, such as C<IPC/SysV>. The extensions
listed in
C<noextensions> are removed from the list of extensions to build, while
the C<onlyextensions> is rather more severe and builds only the listed
extensions.  The latter should be used with extreme caution since
certain extensions are used by many other extensions and modules:
examples of such modules include Fcntl and IO.  The order of processing
these options is first C<only> (if present), then C<no> (if present).

Of course, you may always run Configure interactively and select only
the extensions you want.

If you unpack any additional extensions in the ext/ directory before
running Configure, then Configure will offer to build those additional
extensions as well.  Most users probably shouldn't have to do this --
it is usually easier to build additional extensions later after perl
has been installed.  However, if you wish to have those additional
extensions statically linked into the perl binary, then this offers a
convenient way to do that in one step.  (It is not necessary, however;
you can build and install extensions just fine even if you don't have
dynamic loading.  See lib/ExtUtils/MakeMaker.pm for more details.)
Another way of specifying extra modules is described in
L<"Adding extra modules to the build"> below.

If you re-use an old config.sh but change your system (e.g. by
adding libgdbm) Configure will still offer your old choices of extensions
for the default answer, but it will also point out the discrepancy to
you.

=head2 Including locally-installed libraries

Perl comes with interfaces to number of libraries, including threads,
dbm, ndbm, gdbm, and Berkeley db.  For the *db* extension, if
Configure can find the appropriate header files and libraries, it will
automatically include that extension.  The threading extension needs
to be specified explicitly (see L</Threads>).

Those libraries are not distributed with perl. If your header (.h) files
for those libraries are not in a directory normally searched by your C
compiler, then you will need to include the appropriate -I/your/directory
option when prompted by Configure.  If your libraries are not in a
directory normally searched by your C compiler and linker, then you will
need to include the appropriate -L/your/directory option when prompted
by Configure. See the examples below.

=head3 Examples

=over 4

=item gdbm in /usr/local

Suppose you have gdbm and want Configure to find it and build the
GDBM_File extension.  This example assumes you have gdbm.h
installed in /usr/local/include/gdbm.h and libgdbm.a installed in
/usr/local/lib/libgdbm.a.  Configure should figure all the
necessary steps out automatically.

Specifically, when Configure prompts you for flags for
your C compiler, you should include -I/usr/local/include, if it's
not here yet. Similarly, when Configure prompts you for linker flags,
you should include -L/usr/local/lib.

If you are using dynamic loading, then when Configure prompts you for
linker flags for dynamic loading, you should again include
-L/usr/local/lib.

Again, this should all happen automatically.  This should also work if
you have gdbm installed in any of (/usr/local, /opt/local, /usr/gnu,
/opt/gnu, /usr/GNU, or /opt/GNU).

=item BerkeleyDB in /usr/local/BerkeleyDB

The version of BerkeleyDB distributed by Oracle installs in a
version-specific directory by default, typically something like
/usr/local/BerkeleyDB.4.7.  To have Configure find that, you need to add
-I/usr/local/BerkeleyDB.4.7/include to cc flags, as in the previous
example, and you will also have to take extra steps to help Configure
find -ldb.  Specifically, when Configure prompts you for library
directories, add /usr/local/BerkeleyDB.4.7/lib to the list.  Also, you
will need to add appropriate linker flags to tell the runtime linker
where to find the BerkeleyDB shared libraries.

It is possible to specify this from the command line (all on one
line):

 sh Configure -de \
    -Dlocincpth='/usr/local/BerkeleyDB.4.7/include             \
                                           /usr/local/include' \
    -Dloclibpth='/usr/local/BerkeleyDB.4.7/lib /usr/local/lib' \
    -Aldflags='-R/usr/local/BerkeleyDB.4.7/lib'

locincpth is a space-separated list of include directories to search.
Configure will automatically add the appropriate -I directives.

loclibpth is a space-separated list of library directories to search.
Configure will automatically add the appropriate -L directives.

The addition to ldflags is so that the dynamic linker knows where to find
the BerkeleyDB libraries.  For Linux and Solaris, the -R option does that.
Other systems may use different flags.  Use the appropriate flag for your
system.

=back

=head2 Specifying a logical root directory

If you are cross-compiling, or are using a compiler which has it's own
headers and libraries in a nonstandard location, and your compiler
understands the C<--sysroot> option, you can use the C<-Dsysroot> option
to specify the logical root directory under which all libraries and
headers are searched for. This patch adjusts Configure to search under
$sysroot, instead of /.

--sysroot is added to ccflags and friends so that make in
ExtUtils::MakeMaker, and other extensions, will use it.

=head2 Overriding an old config.sh

If you want to use an old config.sh produced by a previous run of
Configure, but override some of the items with command line options, you
need to use B<Configure -O>.

=head2 GNU-style configure

If you prefer the GNU-style configure command line interface, you can
use the supplied configure.gnu command, e.g.

	CC=gcc ./configure.gnu

The configure.gnu script emulates a few of the more common configure
options.  Try

	./configure.gnu --help

for a listing.

(The file is called configure.gnu to avoid problems on systems
that would not distinguish the files "Configure" and "configure".)

=head2 Malloc Issues

Perl relies heavily on malloc(3) to grow data structures as needed,
so perl's performance can be noticeably affected by the performance of
the malloc function on your system.  The perl source is shipped with a
version of malloc that has been optimized for the typical requests from
perl, so there's a chance that it may be both faster and use less memory
than your system malloc.

However, if your system already has an excellent malloc, or if you are
experiencing difficulties with extensions that use third-party libraries
that call malloc, then you should probably use your system's malloc.
(Or, you might wish to explore the malloc flags discussed below.)

=over 4

=item Using the system malloc

To build without perl's malloc, you can use the Configure command

	sh Configure -Uusemymalloc

or you can answer 'n' at the appropriate interactive Configure prompt.

Note that Perl's malloc isn't always used by default; that actually
depends on your system. For example, on Linux and FreeBSD (and many more
systems), Configure chooses to use the system's malloc by default.
See the appropriate file in the F<hints/> directory to see how the
default is set.

=item -DPERL_POLLUTE_MALLOC

NOTE: This flag is enabled automatically on some platforms if you just
run Configure to accept all the defaults.

Perl's malloc family of functions are normally called Perl_malloc(),
Perl_realloc(), Perl_calloc() and Perl_mfree().
These names do not clash with the system versions of these functions.

If this flag is enabled, however, Perl's malloc family of functions
will have the same names as the system versions.  This may be required
sometimes if you have libraries that like to free() data that may have
been allocated by Perl_malloc() and vice versa.

Note that enabling this option may sometimes lead to duplicate symbols
from the linker for malloc et al.  In such cases, the system probably
does not allow its malloc functions to be fully replaced with custom
versions.

=item -DPERL_DEBUGGING_MSTATS

This flag enables debugging mstats, which is required to use the
Devel::Peek::mstat() function. You cannot enable this unless you are
using Perl's malloc, so a typical Configure command would be

       sh Configure -Accflags=-DPERL_DEBUGGING_MSTATS -Dusemymalloc

to enable this option.

=back

=head2 What if it doesn't work?

If you run into problems, try some of the following ideas.
If none of them help, then see L<"Reporting Problems"> below.

=over 4

=item Running Configure Interactively

If Configure runs into trouble, remember that you can always run
Configure interactively so that you can check (and correct) its
guesses.

All the installation questions have been moved to the top, so you don't
have to wait for them.  Once you've handled them (and your C compiler and
flags) you can type  &-d  at the next Configure prompt and Configure
will use the defaults from then on.

If you find yourself trying obscure command line incantations and
config.over tricks, I recommend you run Configure interactively
instead.  You'll probably save yourself time in the long run.

=item Hint files

Hint files tell Configure about a number of things:

=over 4

=item o

The peculiarities or conventions of particular platforms -- non-standard
library locations and names, default installation locations for binaries,
and so on.

=item o

The deficiencies of the platform -- for example, library functions that,
although present, are too badly broken to be usable; or limits on
resources that are generously available on most platforms.

=item o

How best to optimize for the platform, both in terms of binary size
and/or speed, and for Perl feature support. Because of wide variations in
the implementation of shared libraries and of threading, for example,
Configure often needs hints in order to be able to use these features.

=back

The perl distribution includes many system-specific hints files
in the hints/ directory. If one of them matches your system, Configure
will offer to use that hint file. Unless you have a very good reason
not to, you should accept its offer.

Several of the hint files contain additional important information.
If you have any problems, it is a good idea to read the relevant hint
file for further information.  See hints/solaris_2.sh for an extensive
example.  More information about writing good hints is in the
hints/README.hints file, which also explains hint files known as
callback-units.

Note that any hint file is read before any Policy file, meaning that
Policy overrides hints -- see L</Site-wide Policy settings>.

=item WHOA THERE!!!

If you are re-using an old config.sh, it's possible that Configure
detects different values from the ones specified in this file.  You will
almost always want to keep the previous value, unless you have changed
something on your system.

For example, suppose you have added libgdbm.a to your system
and you decide to reconfigure perl to use GDBM_File.  When you run
Configure again, you will need to add -lgdbm to the list of libraries.
Now, Configure will find your gdbm include file and library and will
issue a message:

    *** WHOA THERE!!! ***
	The previous value for $i_gdbm on this machine was "undef"!
	Keep the previous value? [y]

In this case, you do not want to keep the previous value, so you
should answer 'n'.  (You'll also have to manually add GDBM_File to
the list of dynamic extensions to build.)

=item Changing Compilers

If you change compilers or make other significant changes, you should
probably not re-use your old config.sh.  Simply remove it or
rename it, then rerun Configure with the options you want to use.

=item Propagating your changes to config.sh

If you make any changes to config.sh, you should propagate
them to all the .SH files by running

	sh Configure -S

You will then have to rebuild by running

	make depend
	make

=item config.over and config.arch

You can also supply a shell script config.over to override
Configure's guesses.  It will get loaded up at the very end, just
before config.sh is created.  You have to be careful with this,
however, as Configure does no checking that your changes make sense.
This file is usually good for site-specific customizations.

There is also another file that, if it exists, is loaded before the
config.over, called config.arch.  This file is intended to be per
architecture, not per site, and usually it's the architecture-specific
hints file that creates the config.arch.

=item config.h

Many of the system dependencies are contained in config.h.
Configure builds config.h by running the config_h.SH script.
The values for the variables are taken from config.sh.

If there are any problems, you can edit config.h directly.  Beware,
though, that the next time you run Configure, your changes will be
lost.

=item cflags

If you have any additional changes to make to the C compiler command
line, they can be made in cflags.SH.  For instance, to turn off the
optimizer on toke.c, find the switch structure marked 'or customize here',
and add a line for toke.c ahead of the catch-all *) so that it now reads:

    : or customize here

    case "$file" in
    toke) optimize='-g' ;;
    *) ;;

You should not edit the generated file cflags directly, as your changes
will be lost the next time you run Configure, or if you edit config.sh.

To explore various ways of changing ccflags from within a hint file,
see the file hints/README.hints.

To change the C flags for all the files, edit config.sh and change either
$ccflags or $optimize, and then re-run

	sh Configure -S
	make depend

=item No sh

If you don't have sh, you'll have to copy the sample file
Porting/config.sh to config.sh and edit your config.sh to reflect your
system's peculiarities.  See Porting/pumpkin.pod for more information.
You'll probably also have to extensively modify the extension building
mechanism.

=item Porting information

Specific information for the OS/2, Plan 9, VMS and Win32 ports is in the
corresponding README files and subdirectories.  Additional information,
including a glossary of all those config.sh variables, is in the Porting
subdirectory.  Porting/Glossary should especially come in handy.

Ports for other systems may also be available.  You should check out
http://www.cpan.org/ports for current information on ports to
various other operating systems.

If you plan to port Perl to a new architecture, study carefully the
section titled "Philosophical Issues in Patching and Porting Perl"
in the file Porting/pumpkin.pod and the file pod/perlgit.pod.
Study also how other non-UNIX ports have solved problems.

=back

=head2 Adding extra modules to the build

You can specify extra modules or module bundles to be fetched from the
CPAN and installed as part of the Perl build.  Either use the -Dextras=...
command line parameter to Configure, for example like this:

	Configure -Dextras="Bundle::LWP DBI"

or answer first 'y' to the question 'Install any extra modules?' and
then answer "Bundle::LWP DBI" to the 'Extras?' question.
The module or the bundle names are as for the CPAN module 'install'
command.  This will only work if those modules are to be built as dynamic
extensions.  If you wish to include those extra modules as static
extensions, see L<"Extensions"> above.

Notice that because the CPAN module will be used to fetch the extra
modules, you will need access to the CPAN, either via the Internet,
or via a local copy such as a CD-ROM or a local CPAN mirror.  If you
do not, using the extra modules option will die horribly.

Also notice that you yourself are responsible for satisfying any extra
dependencies such as external headers or libraries BEFORE trying the
build.  For example: you will need to have the Foo database specific
headers and libraries installed for the DBD::Foo module.  The Configure
process or the Perl build process will not help you with these.

=head2 suidperl

suidperl was an optional component of earlier releases of perl. It is no
longer available.  Instead, use a tool specifically designed to handle
changes in privileges, such as B<sudo>.

=head1 make depend

This will look for all the includes.  The output is stored in makefile.
The only difference between Makefile and makefile is the dependencies at
the bottom of makefile.  If you have to make any changes, you should edit
makefile, not Makefile, since the Unix make command reads makefile first.
(On non-Unix systems, the output may be stored in a different file.
Check the value of $firstmakefile in your config.sh if in doubt.)

Configure will offer to do this step for you, so it isn't listed
explicitly above.

=head1 make

This will attempt to make perl in the current directory.

=head2 Expected errors

These error reports are normal, and can be ignored:

  ...
  make: [extra.pods] Error 1 (ignored)
  ...
  make: [extras.make] Error 1 (ignored)

=head2 What if it doesn't work?

If you can't compile successfully, try some of the following ideas.
If none of them help, and careful reading of the error message and
the relevant manual pages on your system doesn't help,
then see L<"Reporting Problems"> below.

=over 4

=item hints

If you used a hint file, try reading the comments in the hint file
for further tips and information.

=item extensions

If you can successfully build miniperl, but the process crashes
during the building of extensions, run

	make minitest

to test your version of miniperl.

=item locale

If you have any locale-related environment variables set, try unsetting
them.  I have some reports that some versions of IRIX hang while
running B<./miniperl configpm> with locales other than the C locale.
See the discussion under L<"make test"> below about locales and the
whole L<perllocale/"LOCALE PROBLEMS"> section in the file
pod/perllocale.pod.  The latter is especially useful if you see something
like this

	perl: warning: Setting locale failed.
	perl: warning: Please check that your locale settings:
	        LC_ALL = "En_US",
	        LANG = (unset)
	    are supported and installed on your system.
	perl: warning: Falling back to the standard locale ("C").

at Perl startup.

=item other environment variables

Configure does not check for environment variables that can sometimes
have a major influence on how perl is built or tested. For example,
OBJECT_MODE on AIX determines the way the compiler and linker deal with
their objects, but this is a variable that only influences build-time
behaviour, and should not affect the perl scripts that are eventually
executed by the perl binary. Other variables, like PERL_UNICODE,
PERL5LIB, and PERL5OPT will influence the behaviour of the test suite.
So if you are getting strange test failures, you may want to try
retesting with the various PERL variables unset.

=item varargs

If you get varargs problems with gcc, be sure that gcc is installed
correctly and that you are not passing -I/usr/include to gcc.  When using
gcc, you should probably have i_stdarg='define' and i_varargs='undef'
in config.sh.  The problem is usually solved by installing gcc
correctly.  If you do change config.sh, don't forget to propagate
your changes (see L<"Propagating your changes to config.sh"> below).
See also the L<"vsprintf"> item below.

=item util.c

If you get error messages such as the following (the exact line
numbers and function name may vary in different versions of perl):

    util.c: In function 'Perl_form':
    util.c:1107: number of arguments doesn't match prototype
    proto.h:125: prototype declaration

it might well be a symptom of the gcc "varargs problem".  See the
previous L<"varargs"> item.

=item LD_LIBRARY_PATH

If you run into dynamic loading problems, check your setting of
the LD_LIBRARY_PATH environment variable.  If you're creating a static
Perl library (libperl.a rather than libperl.so) it should build
fine with LD_LIBRARY_PATH unset, though that may depend on details
of your local setup.

=item nm extraction

If Configure seems to be having trouble finding library functions,
try not using nm extraction.  You can do this from the command line
with

	sh Configure -Uusenm

or by answering the nm extraction question interactively.
If you have previously run Configure, you should not reuse your old
config.sh.

=item umask not found

If the build processes encounters errors relating to umask(), the problem
is probably that Configure couldn't find your umask() system call.
Check your config.sh.  You should have d_umask='define'.  If you don't,
this is probably the L<"nm extraction"> problem discussed above.  Also,
try reading the hints file for your system for further information.

=item vsprintf

If you run into problems with vsprintf in compiling util.c, the
problem is probably that Configure failed to detect your system's
version of vsprintf().  Check whether your system has vprintf().
(Virtually all modern Unix systems do.)  Then, check the variable
d_vprintf in config.sh.  If your system has vprintf, it should be:

	d_vprintf='define'

If Configure guessed wrong, it is likely that Configure guessed wrong
on a number of other common functions too.  This is probably
the L<"nm extraction"> problem discussed above.

=item do_aspawn

If you run into problems relating to do_aspawn or do_spawn, the
problem is probably that Configure failed to detect your system's
fork() function.  Follow the procedure in the previous item
on L<"nm extraction">.

=item __inet_* errors

If you receive unresolved symbol errors during Perl build and/or test
referring to __inet_* symbols, check to see whether BIND 8.1 is
installed.  It installs a /usr/local/include/arpa/inet.h that refers to
these symbols.  Versions of BIND later than 8.1 do not install inet.h
in that location and avoid the errors.  You should probably update to a
newer version of BIND (and remove the files the old one left behind).
If you can't, you can either link with the updated resolver library
provided with BIND 8.1 or rename /usr/local/bin/arpa/inet.h during the
Perl build and test process to avoid the problem.

=item .*_r() prototype NOT found

On a related note, if you see a bunch of complaints like the above about
reentrant functions -- specifically networking-related ones -- being
present but without prototypes available, check to see if BIND 8.1 (or
possibly other BIND 8 versions) is (or has been) installed. They install
header files such as netdb.h into places such as /usr/local/include (or
into another directory as specified at build/install time), at least
optionally.  Remove them or put them in someplace that isn't in the C
preprocessor's header file include search path (determined by -I options
plus defaults, normally /usr/include).

=item #error "No DATAMODEL_NATIVE specified"

This is a common error when trying to build perl on Solaris 2.6 with a
gcc installation from Solaris 2.5 or 2.5.1.  The Solaris header files
changed, so you need to update your gcc installation.  You can either
rerun the fixincludes script from gcc or take the opportunity to
update your gcc installation.

=item Optimizer

If you can't compile successfully, try turning off your compiler's
optimizer.  Edit config.sh and change the line

	optimize='-O'

to

	optimize=' '

then propagate your changes with B<sh Configure -S> and rebuild
with B<make depend; make>.

=item Missing functions and Undefined symbols

If the build of miniperl fails with a long list of missing functions or
undefined symbols, check the libs variable in the config.sh file.  It
should look something like

	libs='-lsocket -lnsl -ldl -lm -lc'

The exact libraries will vary from system to system, but you typically
need to include at least the math library -lm.  Normally, Configure
will suggest the correct defaults.  If the libs variable is empty, you
need to start all over again.  Run

	make distclean

and start from the very beginning.  This time, unless you are sure of
what you are doing, accept the default list of libraries suggested by
Configure.

If the libs variable is missing -lm, there is a chance that libm.so.1
is available, but the required (symbolic) link to libm.so is missing.
(same could be the case for other libraries like libcrypt.so).  You
should check your installation for packages that create that link, and
if no package is installed that supplies that link or you cannot install
them, make the symbolic link yourself e.g.:

 $ rpm -qf /usr/lib64/libm.so
 glibc-devel-2.15-22.17.1.x86_64
 $ ls -lgo /usr/lib64/libm.so
 lrwxrwxrwx 1 16 Jan  7  2013 /usr/lib64/libm.so -> /lib64/libm.so.6

 or

 $ sudo ln -s /lib64/libm.so.6 /lib64/libm.so

If the libs variable looks correct, you might have the
L<"nm extraction"> problem discussed above.

If you still have missing routines or undefined symbols, you probably
need to add some library or other, make a symbolic link like described
above, or you need to undefine some feature that Configure thought was
there but is defective or incomplete.  If you used a hint file, see if
it has any relevant advice.  You can also look through through config.h
for likely suspects.

=item toke.c

Some compilers will not compile or optimize the larger files (such as
toke.c) without some extra switches to use larger jump offsets or
allocate larger internal tables.  You can customize the switches for
each file in cflags.SH.  It's okay to insert rules for specific files
into makefile since a default rule only takes effect in the absence of a
specific rule.

=item Missing dbmclose

SCO prior to 3.2.4 may be missing dbmclose().  An upgrade to 3.2.4
that includes libdbm.nfs (which includes dbmclose()) may be available.

=item error: too few arguments to function 'dbmclose'

Building ODBM_File on some (Open)SUSE distributions might run into this
error, as the header file is broken. There are two ways to deal with this

 1. Disable the use of ODBM_FILE

    Configure ... -Dnoextensions=ODBM_File

 2. Fix the header file, somewhat like this:

    --- a/usr/include/dbm.h  2010-03-24 08:54:59.000000000 +0100
    +++ b/usr/include/dbm.h  2010-03-24 08:55:15.000000000 +0100
    @@@@ -59,4 +59,4 @@@@ extern datum  firstkey __P((void));

     extern datum   nextkey __P((datum key));

    -extern int     dbmclose __P((DBM *));
    +extern int     dbmclose __P((void));

=item Warning (mostly harmless): No library found for -lsomething

If you see such a message during the building of an extension, but
the extension passes its tests anyway (see L<"make test"> below),
then don't worry about the warning message.  The extension
Makefile.PL goes looking for various libraries needed on various
systems; few systems will need all the possible libraries listed.
Most users will see warnings for the ones they don't have.  The
phrase 'mostly harmless' is intended to reassure you that nothing
unusual is happening, and the build process is continuing.

On the other hand, if you are building GDBM_File and you get the
message

    Warning (mostly harmless): No library found for -lgdbm

then it's likely you're going to run into trouble somewhere along
the line, since it's hard to see how you can use the GDBM_File
extension without the -lgdbm library.

It is true that, in principle, Configure could have figured all of
this out, but Configure and the extension building process are not
quite that tightly coordinated.

=item sh: ar: not found

This is a message from your shell telling you that the command 'ar'
was not found.  You need to check your PATH environment variable to
make sure that it includes the directory with the 'ar' command.  This
is a common problem on Solaris, where 'ar' is in the /usr/ccs/bin
directory.

=item db-recno failure on tests 51, 53 and 55

Old versions of the DB library (including the DB library which comes
with FreeBSD 2.1) had broken handling of recno databases with modified
bval settings.  Upgrade your DB library or OS.

=item Bad arg length for semctl, is XX, should be ZZZ

If you get this error message from the F<cpan/IPC-SysV/t/sem.t> test, your
System V IPC may be broken.  The XX typically is 20, and that is what ZZZ
also should be.  Consider upgrading your OS, or reconfiguring your OS
to include the System V semaphores.

=item cpan/IPC-SysV/t/sem........semget: No space left on device

Either your account or the whole system has run out of semaphores.  Or
both.  Either list the semaphores with "ipcs" and remove the unneeded
ones (which ones these are depends on your system and applications)
with "ipcrm -s SEMAPHORE_ID_HERE" or configure more semaphores to your
system.

=item GNU binutils

If you mix GNU binutils (nm, ld, ar) with equivalent vendor-supplied
tools you may be in for some trouble.  For example creating archives
with an old GNU 'ar' and then using a new current vendor-supplied 'ld'
may lead into linking problems.  Either recompile your GNU binutils
under your current operating system release, or modify your PATH not
to include the GNU utils before running Configure, or specify the
vendor-supplied utilities explicitly to Configure, for example by
Configure -Dar=/bin/ar.

=item THIS PACKAGE SEEMS TO BE INCOMPLETE

The F<Configure> program has not been able to find all the files which
make up the complete Perl distribution.  You may have a damaged source
archive file (in which case you may also have seen messages such as
C<gzip: stdin: unexpected end of file> and C<tar: Unexpected EOF on
archive file>), or you may have obtained a structurally-sound but
incomplete archive.  In either case, try downloading again from the
official site named at the start of this document.  If you do find
that any site is carrying a corrupted or incomplete source code
archive, please report it to the site's maintainer.

=item invalid token: ##

You are using a non-ANSI-compliant C compiler.  To compile Perl, you
need to use a compiler that supports ANSI C.  If there is a README
file for your system, it may have further details on your compiler
options.

=item Miscellaneous

Some additional things that have been reported:

Genix may need to use libc rather than libc_s, or #undef VARARGS.

NCR Tower 32 (OS 2.01.01) may need -W2,-Sl,2000 and #undef MKDIR.

UTS may need one or more of -K or -g, and #undef LSTAT.

FreeBSD can fail the F<cpan/IPC-SysV/t/sem.t> test if SysV IPC has not been
configured in the kernel.  Perl tries to detect this, though, and
you will get a message telling you what to do.

Building Perl on a system that has also BIND (headers and libraries)
installed may run into troubles because BIND installs its own netdb.h
and socket.h, which may not agree with the operating system's ideas of
the same files.  Similarly, including -lbind may conflict with libc's
view of the world.  You may have to tweak -Dlocincpth and -Dloclibpth
to avoid the BIND.

=back

=head2 Cross-compilation

Perl can be cross-compiled.  It is just not trivial, cross-compilation
rarely is.  Perl is routinely cross-compiled for several platforms: as of
January 2014, these include Android, Blackberry 10, PocketPC aka
WinCE, ARM Linux, and Solaris.  Previous versions of
Perl also provided support for Open Zaurus, Symbian, and
the IBM OS/400, but it's unknown if those ports are still functional.
These platforms are known as the B<target> platforms, while the systems
where the compilation takes place are the B<host> platforms.

What makes the situation difficult is that first of all,
cross-compilation environments vary significantly in how they are set
up and used, and secondly because the primary way of configuring Perl
(using the rather large Unix-tool-dependent Configure script) is not
awfully well suited for cross-compilation.  However, starting from
version 5.18.0, the Configure script also knows two ways of supporting
cross-compilation, so please keep reading.

See the following files for more information about compiling Perl for
the particular platforms:

=over 4

=item WinCE/PocketPC

L<README.ce or perlce|perlce>

=item Android

L<"Cross-compilation" in README.android or
perlandroid|perlandroid/Cross-compilation>

=item Blackberry

L<"Cross-compilation" in README.qnx or perlqnx|perlqnx/Cross-compilation>

=item Solaris

L<"CROSS-COMPILATION" in README.solaris or
perlsolaris|perlsolaris/CROSS-COMPILATION>

=item Linux

This document; See below.

=back

Packaging and transferring either the core Perl modules or CPAN
modules to the target platform is also left up to the each
cross-compilation environment.  Often the cross-compilation target
platforms are somewhat limited in diskspace: see the section
L<Minimizing the Perl installation> to learn more of the minimal set
of files required for a functional Perl installation.

For some cross-compilation environments the Configure option
C<-Dinstallprefix=...> might be handy, see L<Changing the installation
directory>.

About the cross-compilation support of Configure: There's two forms.
The more common one requires some way of transferring and running
executables in the target system, such as an ssh connection; this is the
C<./Configure -Dusecrosscompile -Dtargethost=...> route.  The second
method doesn't need access to the target system, but requires you to
provide a config.sh, and and a canned Makefile; the rest of this section
describes the former.

This cross-compilation setup of Configure has successfully been used in
a wide variety of setups, such as a 64-bit OS X host for an Android ARM
target, or an amd64 Linux host targeting x86 Solaris, or even Windows.

To run Configure in cross-compilation mode the basic switch that
has to be used is C<-Dusecrosscompile>:

   sh ./Configure -des -Dusecrosscompile -D...

This will make the cpp symbol USE_CROSS_COMPILE and the %Config
symbol C<usecrosscompile> available.

During the Configure and build, certain helper scripts will be created
into the Cross/ subdirectory.  The scripts are used to execute a
cross-compiled executable, and to transfer files to and from the
target host.  The execution scripts are named F<run-*> and the
transfer scripts F<to-*> and F<from-*>.  The part after the dash is
the method to use for remote execution and transfer: by default the
methods are B<ssh> and B<scp>, thus making the scripts F<run-ssh>,
F<to-scp>, and F<from-scp>.

To configure the scripts for a target host and a directory (in which
the execution will happen and which is to and from where the transfer
happens), supply Configure with

    -Dtargethost=so.me.ho.st -Dtargetdir=/tar/get/dir

The targethost is what e.g. ssh will use as the hostname, the targetdir
must exist (the scripts won't create it), the targetdir defaults to /tmp.
You can also specify a username to use for ssh/rsh logins

    -Dtargetuser=luser

but in case you don't, "root" will be used.  Similarly, you can specify
a non-standard (i.e. not 22) port for the connection, if applicable,
through

    -Dtargetport=2222

If the name of C<cc> has the usual GNU C semantics for cross
compilers, that is, CPU-OS-gcc, the target architecture (C<targetarch>),
plus names of the C<ar>, C<nm>, and C<ranlib> will also be automatically
chosen to be CPU-OS-ar and so on.
(The C<ld> requires more thought and will be chosen later by Configure
as appropriate).  This will also aid in guessing the proper
operating system name for the target, which has other repercussions, like
better defaults and possibly critical fixes for the platform.  If
Configure isn't guessing the OS name properly, you may need to either add
a hint file redirecting Configure's guess, or modify Configure to make
the correct choice.

If your compiler doesn't follow that convention, you will also need to
specify which target environment to use, as well as C<ar> and friends:

    -Dtargetarch=arm-linux
    -Dcc=mycrossgcc
    -Dar=...

Additionally, a cross-compilation toolchain will usually install it's own
logical system root somewhere -- that is, it'll create a directory
somewhere which includes subdirectories like C<'include'> or C<'lib'>.  For
example, you may end up with F</skiff/local/arm-linux>, where
F</skiff/local/arm-linux/bin> holds the binaries for cross-compilation,
F</skiff/local/arm-linux/include> has the headers, and
F</skiff/local/arm-linux/lib> has the library files.
If this is the case, and you are using a compiler that understands
C<--sysroot>, like gcc or clang, you'll want to specify the
C<-Dsysroot> option for Configure:

    -Dsysroot=/skiff/local/arm-linux

However, if your don't have a suitable directory to pass to C<-Dsysroot>,
you will also need to specify which target environment to use:

    -Dusrinc=/skiff/local/arm-linux/include
    -Dincpth=/skiff/local/arm-linux/include
    -Dlibpth=/skiff/local/arm-linux/lib

In addition to the default execution/transfer methods you can also
choose B<rsh> for execution, and B<rcp> or B<cp> for transfer,
for example:

    -Dtargetrun=rsh -Dtargetto=rcp -Dtargetfrom=cp

Putting it all together:

    sh ./Configure -des -Dusecrosscompile \
        -Dtargethost=so.me.ho.st \
        -Dtargetdir=/tar/get/dir \
        -Dtargetuser=root \
        -Dtargetarch=arm-linux \
        -Dcc=arm-linux-gcc \
        -Dsysroot=/skiff/local/arm-linux \
        -D...

or if you are happy with the defaults:

    sh ./Configure -des -Dusecrosscompile \
        -Dtargethost=so.me.ho.st \
        -Dcc=arm-linux-gcc \
        -D...

Another example where the cross-compiler has been installed under
F</usr/local/arm/2.95.5>:

    sh ./Configure -des -Dusecrosscompile \
        -Dtargethost=so.me.ho.st \
        -Dcc=/usr/local/arm/2.95.5/bin/arm-linux-gcc \
        -Dsysroot=/usr/local/arm/2.95.5

There is also a C<targetenv> option for Configure which can be used
to modify the environment of the target just before testing begins
during 'make test'.  For example, if the target system has a nonstandard
/tmp location, you could do this:

    -Dtargetenv="export TMPDIR=/other/tmp;"

If you are planning on cross-compiling to several platforms, or some
other thing that would involve running Configure several times, there are
two options that can be used to speed things up considerably.
As a bit of background, when you
call Configure with C<-Dusecrosscompile>, it begins by actually partially
building a miniperl on the host machine, as well as the generate_uudmap
binary, and we end up using that during the build.
So instead of building that new perl every single time, you can build it
just once in a separate directory, and then pass the resulting binaries
to Configure like this:

    -Dhostperl=/path/to/second/build/dir/miniperl
    -Dhostgenerate=/path/to/second/build/dir/generate_uudmap

Much less commonly, if you are cross-compiling from an ASCII host to an
EBCDIC target, or vise versa, you'll have to pass C<-Uhostgenerate> to
Configure, to signify that you want to build a generate_uudmap binary
that, during make, will be run on the target system.

=head1 make test

This will run the regression tests on the perl you just made.  If
'make test' doesn't say "All tests successful" then something went
wrong.

Note that you can't run the tests in background if this disables
opening of /dev/tty. You can use 'make test-notty' in that case but
a few tty tests will be skipped.

=head2 What if make test doesn't work?

If make test bombs out, just cd to the t directory and run ./TEST
by hand to see if it makes any difference.

One way to get more detailed information about failed tests and
individual subtests is to run the harness from the t directory:

	cd t ; ./perl harness <list of tests>

(this assumes that most basic tests succeed, since harness uses
complicated constructs). If no list of tests is provided, harness
will run all tests.

If individual tests fail, you can often run them by hand (from the main
perl directory), e.g.,

	./perl -MTestInit t/op/groups.t

You should also read the individual tests to see if there are any helpful
comments that apply to your system.  You may also need to setup your
shared library path if you get errors like:

	/sbin/loader: Fatal Error: cannot map libperl.so

The file t/README in the t subdirectory contains more information about
running and modifying tests.

See L</"Building a shared Perl library"> earlier in this document.

=over 4

=item locale

Note:  One possible reason for errors is that some external programs
may be broken due to the combination of your environment and the way
'make test' exercises them.  For example, this may happen if you have
one or more of these environment variables set:  LC_ALL LC_CTYPE
LC_COLLATE LANG.  In some versions of UNIX, the non-English locales
are known to cause programs to exhibit mysterious errors.

If you have any of the above environment variables set, please try

	setenv LC_ALL C

(for C shell) or

	LC_ALL=C;export LC_ALL

for Bourne or Korn shell) from the command line and then retry
make test.  If the tests then succeed, you may have a broken program that
is confusing the testing.  Please run the troublesome test by hand as
shown above and see whether you can locate the program.  Look for
things like:  exec, `backquoted command`, system, open("|...") or
open("...|").  All these mean that Perl is trying to run some
external program.

=item Timing problems

Several tests in the test suite check timing functions, such as
sleep(), and see if they return in a reasonable amount of time.
If your system is quite busy and doesn't respond quickly enough,
these tests might fail.  If possible, try running the tests again
with the system under a lighter load.  These timing-sensitive
and load-sensitive tests include F<t/op/alarm.t>,
F<dist/Time-HiRes/t/alarm.t>, F<dist/Time-HiRes/t/clock.t>,
F<dist/Time-HiRes/t/itimer.t>, F<dist/Time-HiRes/t/usleep.t>,
F<dist/threads-shared/t/waithires.t>,
F<dist/threads-shared/t/stress.t>, F<lib/Benchmark.t>,
F<lib/Memoize/t/expmod_t.t>, and F<lib/Memoize/t/speed.t>.

You might also experience some failures in F<t/op/stat.t> if you build
perl on an NFS filesystem, if the remote clock and the system clock are
different.

=item Out of memory

On some systems, particularly those with smaller amounts of RAM, some
of the tests in t/op/pat.t may fail with an "Out of memory" message.
For example, on my SparcStation IPC with 12 MB of RAM, in perl5.5.670,
test 85 will fail if run under either t/TEST or t/harness.

Try stopping other jobs on the system and then running the test by itself:

	./perl -MTestInit t/op/pat.t

to see if you have any better luck.  If your perl still fails this
test, it does not necessarily mean you have a broken perl.  This test
tries to exercise the regular expression subsystem quite thoroughly,
and may well be far more demanding than your normal usage.

=item libgcc_s.so.1: cannot open shared object file

This message has been reported on gcc-3.2.3 and earlier installed with
a non-standard prefix.  Setting the LD_LIBRARY_PATH environment variable
(or equivalent) to include gcc's lib/ directory with the libgcc_s.so.1
shared library should fix the problem.

=item Failures from lib/File/Temp/t/security saying "system possibly insecure"

First, such warnings are not necessarily serious or indicative of a
real security threat.  That being said, they bear investigating.

Note that each of the tests is run twice.  The first time is in the
directory returned by File::Spec->tmpdir() (often /tmp on Unix
systems), and the second time in the directory from which the test was
run (usually the 't' directory, if the test was run as part of 'make
test').

The tests may fail for the following reasons:

(1) If the directory the tests are being run in is owned by somebody
other than the user running the tests, or by root (uid 0).

This failure can happen if the Perl source code distribution is
unpacked in such a way that the user IDs in the distribution package
are used as-is.  Some tar programs do this.

(2) If the directory the tests are being run in is writable by group or
by others, and there is no sticky bit set for the directory.  (With
UNIX/POSIX semantics, write access to a directory means the right to
add or remove files in that directory.  The 'sticky bit' is a feature
used in some UNIXes to give extra protection to files: if the bit is
set for a directory, no one but the owner (or root) can remove that
file even if the permissions would otherwise allow file removal by
others.)

This failure may or may not be a real problem: it depends on the
permissions policy used on this particular system.  This failure can
also happen if the system either doesn't support the sticky bit (this
is the case with many non-UNIX platforms: in principle File::Temp
should know about these platforms and skip the tests), or if the system
supports the sticky bit but for some reason or reasons it is not being
used.  This is, for example, the case with HP-UX: as of HP-UX release
11.00, the sticky bit is very much supported, but HP-UX doesn't use it
on its /tmp directory as shipped.  Also, as with the permissions, some
local policy might dictate that the stickiness is not used.

(3) If the system supports the POSIX 'chown giveaway' feature and if
any of the parent directories of the temporary file back to the root
directory are 'unsafe', using the definitions given above in (1) and
(2).  For Unix systems, this is usually not an issue if you are
building on a local disk.  See the documentation for the File::Temp
module for more information about 'chown giveaway'.

See the documentation for the File::Temp module for more information
about the various security aspects of temporary files.

=back

The core distribution can now run its regression tests in parallel on
Unix-like platforms. Instead of running C<make test>, set C<TEST_JOBS>
in your environment to the number of tests to run in parallel, and run
C<make test_harness>. On a Bourne-like shell, this can be done as

    TEST_JOBS=3 make test_harness  # Run 3 tests in parallel

An environment variable is used, rather than parallel make itself,
because L<TAP::Harness> needs to be able to schedule individual
non-conflicting test scripts itself, and there is no standard interface
to C<make> utilities to interact with their job schedulers.

=head1 make install

This will put perl into the public directory you specified to
Configure; by default this is /usr/local/bin.  It will also try to put
the man pages in a reasonable place.  It will not nroff the man pages,
however.  You may need to be root to run B<make install>.  If you are not
root, you must still have permission to install into the directories
in question and you should ignore any messages about chown not working.

If "make install" just says "'install' is up to date" or something
similar, you may be on a case-insensitive filesystems such as Mac's HFS+,
and you should say "make install-all".  (This confusion is brought to you
by the Perl distribution having a file called INSTALL.)

=head2 Installing perl under different names

If you want to install perl under a name other than "perl" (for example,
when installing perl with special features enabled, such as debugging),
indicate the alternate name on the "make install" line, such as:

    make install PERLNAME=myperl

You can separately change the base used for versioned names (like
"perl5.8.9") by setting PERLNAME_VERBASE, like

    make install PERLNAME=perl5 PERLNAME_VERBASE=perl

This can be useful if you have to install perl as "perl5" (e.g. to avoid
conflicts with an ancient version in /usr/bin supplied by your vendor).
Without this the versioned binary would be called "perl55.8.8".

=head2 Installing perl under a different directory

You can install perl under a different destination directory by using
the DESTDIR variable during C<make install>, with a command like

	make install DESTDIR=/tmp/perl5

DESTDIR is automatically prepended to all the installation paths.  See
the example in L<"DESTDIR"> above.

=head2 Installed files

If you want to see exactly what will happen without installing
anything, you can run

	./perl installperl -n
	./perl installman -n

make install will install the following:

    binaries

	perl,
	    perl5.n.n	where 5.n.n is the current release number.  This
			will be a link to perl.

    scripts

	cppstdin	This is used by the deprecated switch perl -P,
			if your cc -E can't read from stdin.
	c2ph, pstruct	Scripts for handling C structures in header
                        files.
	corelist	Shows versions of modules that come with
                        different
			versions of perl.
	cpan		The CPAN shell.
	enc2xs		Encoding module generator.
	h2ph		Extract constants and simple macros from C
                        headers.
	h2xs		Converts C .h header files to Perl extensions.
	instmodsh	A shell to examine installed modules.
	libnetcfg	Configure libnet.
	perlbug		Tool to report bugs in Perl.
	perldoc		Tool to read perl's pod documentation.
	perlivp		Perl Installation Verification Procedure.
	piconv		A Perl implementation of the encoding conversion
			utility iconv.
	pl2pm		Convert Perl 4 .pl files to Perl 5 .pm modules.
	pod2html,	Converters from perl's pod documentation format
	pod2man,
	pod2text,
	pod2usage
	podchecker	POD syntax checker.
	podselect	Prints sections of POD documentation.
	prove		A command-line tool for running tests.
	psed		A Perl implementation of sed.
	ptar		A Perl implementation of tar.
	ptardiff	A diff for tar archives.
	ptargrep	A grep for tar archives.
	shasum		A tool to print or check SHA checksums.
	splain		Describe Perl warnings and errors.
	xsubpp		Compiler to convert Perl XS code into C code.
	zipdetails	display the internal structure of zip files

    library files

			in $privlib and $archlib specified to
			Configure, usually under /usr/local/lib/perl5/.

    documentation

	man pages	in $man1dir, usually /usr/local/man/man1.
	module man
	pages		in $man3dir, usually /usr/local/man/man3.
	pod/*.pod	in $privlib/pod/.

installperl will also create the directories listed above
in L<"Installation Directories">.

Perl's *.h header files and the libperl library are also installed
under $archlib so that any user may later build new modules, run the
optional Perl compiler, or embed the perl interpreter into another
program even if the Perl source is no longer available.

=head2 Installing only version-specific parts

Sometimes you only want to install the version-specific parts of the perl
installation.  For example, you may wish to install a newer version of
perl alongside an already installed production version without
disabling installation of new modules for the production version.
To only install the version-specific parts of the perl installation, run

	Configure -Dversiononly

or answer 'y' to the appropriate Configure prompt.  Alternatively,
you can just manually run

	./perl installperl -v

and skip installman altogether.

See also L<"Maintaining completely separate versions"> for another
approach.

=head1 cd /usr/include; h2ph *.h sys/*.h

Some perl scripts need to be able to obtain information from the
system header files.  This command will convert the most commonly used
header files in /usr/include into files that can be easily interpreted
by perl.  These files will be placed in the architecture-dependent
library ($archlib) directory you specified to Configure.

Note: Due to differences in the C and perl languages, the conversion
of the header files is not perfect.  You will probably have to
hand-edit some of the converted files to get them to parse correctly.
For example, h2ph breaks spectacularly on type casting and certain
structures.

=head1 installhtml --help

Some sites may wish to make perl documentation available in HTML
format.  The installhtml utility can be used to convert pod
documentation into linked HTML files and install them.

Currently, the supplied ./installhtml script does not make use of the
html Configure variables.  This should be fixed in a future release.

The following command-line is an example of one used to convert
perl documentation:

  ./installhtml                   \
      --podroot=.                 \
      --podpath=lib:ext:pod:vms   \
      --recurse                   \
      --htmldir=/perl/nmanual     \
      --htmlroot=/perl/nmanual    \
      --splithead=pod/perlipc     \
      --splititem=pod/perlfunc    \
      --verbose

See the documentation in installhtml for more details.  It can take
many minutes to execute a large installation and you should expect to
see warnings like "no title", "unexpected directive" and "cannot
resolve" as the files are processed. We are aware of these problems
(and would welcome patches for them).

You may find it helpful to run installhtml twice. That should reduce
the number of "cannot resolve" warnings.

=head1 cd pod && make tex && (process the latex files)

Some sites may also wish to make the documentation in the pod/ directory
available in TeX format.  Type

	(cd pod && make tex && <process the latex files>)

=head1 Starting all over again

If you wish to rebuild perl from the same build directory, you should
clean it out with the command

	make distclean

or

	make realclean

The only difference between the two is that make distclean also removes
your old config.sh and Policy.sh files.  (A plain 'make clean' is now
eqivalent to 'make realclean'.)

If you are upgrading from a previous version of perl, or if you
change systems or compilers or make other significant changes, or if
you are experiencing difficulties building perl, you should not reuse
your old config.sh.

If your reason to reuse your old config.sh is to save your particular
installation choices, then you can probably achieve the same effect by
using the Policy.sh file.  See the section on L<"Site-wide Policy
settings"> above.

=head1 Reporting Problems

Wherever possible please use the perlbug tool supplied with this Perl
to report problems, as it automatically includes summary configuration
information about your perl, which may help us track down problems far
more quickly. But first you should read the advice in this file,
carefully re-read the error message and check the relevant manual pages
on your system, as these may help you find an immediate solution.  If
you are not sure whether what you are seeing is a bug, you can send a
message describing the problem to the comp.lang.perl.misc newsgroup to
get advice.

The perlbug tool is installed along with perl, so after you have
completed C<make install> it should be possible to run it with plain
C<perlbug>.  If the install fails, or you want to report problems with
C<make test> without installing perl, then you can use C<make nok> to
run perlbug to report the problem, or run it by hand from this source
directory with C<./perl -Ilib utils/perlbug>

If the build fails too early to run perlbug uninstalled, then please
B<run> the C<./myconfig> shell script, and mail its output along with
an accurate description of your problem to perlbug@@perl.org

If Configure itself fails, and does not generate a config.sh file
(needed to run C<./myconfig>), then please mail perlbug@@perl.org the
description of how Configure fails along with details of your system
-- for example the output from running C<uname -a>

Please try to make your message brief but clear.  Brief, clear bug
reports tend to get answered more quickly.  Please don't worry if your
written English is not great -- what matters is how well you describe
the important technical details of the problem you have encountered,
not whether your grammar and spelling is flawless.

Trim out unnecessary information.  Do not include large files (such as
config.sh or a complete Configure or make log) unless absolutely
necessary.  Do not include a complete transcript of your build
session.  Just include the failing commands, the relevant error
messages, and whatever preceding commands are necessary to give the
appropriate context.  Plain text should usually be sufficient -- fancy
attachments or encodings may actually reduce the number of people who
read your message.  Your message will get relayed to over 400
subscribers around the world so please try to keep it brief but clear.

If the bug you are reporting has security implications which make it
inappropriate to send to a publicly archived mailing list, then see
L<perlsec/SECURITY VULNERABILITY CONTACT INFORMATION>
for details of how to report the issue.

If you are unsure what makes a good bug report please read "How to
report Bugs Effectively" by Simon Tatham:
http://www.chiark.greenend.org.uk/~sgtatham/bugs.html

=head1 Coexistence with earlier versions of perl 5

Perl 5.24.1 is not binary compatible with earlier versions of Perl.
In other words, you will have to recompile your XS modules.

In general, you can usually safely upgrade from one version of Perl
(e.g.  5.X.Y) to another similar minor version (e.g. 5.X.(Y+1))) without
re-compiling all of your extensions.  You can also safely leave the old
version around in case the new version causes you problems for some
reason.

Usually, most extensions will probably not need to be recompiled to be
used with a newer version of Perl.  Here is how it is supposed to work.
(These examples assume you accept all the Configure defaults.)

Suppose you already have version 5.8.7 installed.  The directories
searched by 5.8.7 are typically like:

	/usr/local/lib/perl5/5.8.7/$archname
	/usr/local/lib/perl5/5.8.7
	/usr/local/lib/perl5/site_perl/5.8.7/$archname
	/usr/local/lib/perl5/site_perl/5.8.7

Now, suppose you install version 5.8.8.  The directories
searched by version 5.8.8 will be:

	/usr/local/lib/perl5/5.8.8/$archname
	/usr/local/lib/perl5/5.8.8
	/usr/local/lib/perl5/site_perl/5.8.8/$archname
	/usr/local/lib/perl5/site_perl/5.8.8

	/usr/local/lib/perl5/site_perl/5.8.7/$archname
	/usr/local/lib/perl5/site_perl/5.8.7
	/usr/local/lib/perl5/site_perl/

Notice the last three entries -- Perl understands the default structure
of the $sitelib directories and will look back in older, compatible
directories.  This way, modules installed under 5.8.7 will continue
to be usable by 5.8.7 but will also accessible to 5.8.8.  Further,
suppose that you upgrade a module to one which requires features
present only in 5.8.8.  That new module will get installed into
/usr/local/lib/perl5/site_perl/5.8.8 and will be available to 5.8.8,
but will not interfere with the 5.8.7 version.

The last entry, /usr/local/lib/perl5/site_perl/, is there so that
5.6.0 and above will look for 5.004-era pure perl modules.

Lastly, suppose you now install 5.10.0, which is not binary compatible
with 5.8.x.  The directories searched by 5.10.0 (if you don't change the
Configure defaults) will be:

	/usr/local/lib/perl5/5.10.0/$archname
	/usr/local/lib/perl5/5.10.0
	/usr/local/lib/perl5/site_perl/5.10.0/$archname
	/usr/local/lib/perl5/site_perl/5.10.0

	/usr/local/lib/perl5/site_perl/5.8.8

	/usr/local/lib/perl5/site_perl/5.8.7

	/usr/local/lib/perl5/site_perl/

Note that the earlier $archname entries are now gone, but pure perl
modules from earlier versions will still be found.

This way, you can choose to share compatible extensions, but also upgrade
to a newer version of an extension that may be incompatible with earlier
versions, without breaking the earlier versions' installations.

=head2 Maintaining completely separate versions

Many users prefer to keep all versions of perl in completely
separate directories.  This guarantees that an update to one version
won't interfere with another version.  (The defaults guarantee this for
libraries after 5.6.0, but not for executables. TODO?)  One convenient
way to do this is by using a separate prefix for each version, such as

	sh Configure -Dprefix=/opt/perl5.24.1

and adding /opt/perl5.24.1/bin to the shell PATH variable.  Such users
may also wish to add a symbolic link /usr/local/bin/perl so that
scripts can still start with #!/usr/local/bin/perl.

Others might share a common directory for maintenance sub-versions
(e.g. 5.10 for all 5.10.x versions), but change directory with
each major version.

If you are installing a development subversion, you probably ought to
seriously consider using a separate directory, since development
subversions may not have all the compatibility wrinkles ironed out
yet.

=head2 Upgrading from v5.22 or earlier

B<Perl 5.24.1 may not be binary compatible with Perl v5.22 or
earlier Perl releases.>  Perl modules having binary parts
(meaning that a C compiler is used) will have to be recompiled to be
used with 5.24.1.  If you find you do need to rebuild an extension with
5.24.1, you may safely do so without disturbing the older
installations.  (See L<"Coexistence with earlier versions of perl 5">
above.)

See your installed copy of the perllocal.pod file for a (possibly
incomplete) list of locally installed modules.  Note that you want
perllocal.pod, not perllocale.pod, for installed module information.

=head1 Minimizing the Perl installation

The following section is meant for people worrying about squeezing the
Perl installation into minimal systems (for example when installing
operating systems, or in really small filesystems).

Leaving out as many extensions as possible is an obvious way:
Encode, with its big conversion tables, consumes a lot of
space.  On the other hand, you cannot throw away everything.  The
Fcntl module is pretty essential.  If you need to do network
programming, you'll appreciate the Socket module, and so forth: it all
depends on what do you need to do.

In the following we offer two different slimmed down installation
recipes.  They are informative, not normative: the choice of files
depends on what you need.

Firstly, the bare minimum to run this script

  use strict;
  use warnings;
  foreach my $f (</*>) {
     print("$f\n");
  }

in Linux with perl-5.24.1 is as follows (under $Config{prefix}):

  ./bin/perl
  ./lib/perl5/5.24.1/strict.pm
  ./lib/perl5/5.24.1/warnings.pm
  ./lib/perl5/5.24.1/i686-linux/File/Glob.pm
  ./lib/perl5/5.24.1/feature.pm
  ./lib/perl5/5.24.1/XSLoader.pm
  ./lib/perl5/5.24.1/i686-linux/auto/File/Glob/Glob.so

Secondly, for perl-5.10.1, the Debian perl-base package contains 591
files, (of which 510 are for lib/unicore) totaling about 3.5MB in its
i386 version.  Omitting the lib/unicore/* files for brevity, the
remaining files are:

  /usr/bin/perl
  /usr/bin/perl5.10.1
  /usr/lib/perl/5.10.1/Config.pm
  /usr/lib/perl/5.10.1/Config_git.pl
  /usr/lib/perl/5.10.1/Config_heavy.pl
  /usr/lib/perl/5.10.1/Cwd.pm
  /usr/lib/perl/5.10.1/DynaLoader.pm
  /usr/lib/perl/5.10.1/Errno.pm
  /usr/lib/perl/5.10.1/Fcntl.pm
  /usr/lib/perl/5.10.1/File/Glob.pm
  /usr/lib/perl/5.10.1/Hash/Util.pm
  /usr/lib/perl/5.10.1/IO.pm
  /usr/lib/perl/5.10.1/IO/File.pm
  /usr/lib/perl/5.10.1/IO/Handle.pm
  /usr/lib/perl/5.10.1/IO/Pipe.pm
  /usr/lib/perl/5.10.1/IO/Seekable.pm
  /usr/lib/perl/5.10.1/IO/Select.pm
  /usr/lib/perl/5.10.1/IO/Socket.pm
  /usr/lib/perl/5.10.1/IO/Socket/INET.pm
  /usr/lib/perl/5.10.1/IO/Socket/UNIX.pm
  /usr/lib/perl/5.10.1/List/Util.pm
  /usr/lib/perl/5.10.1/POSIX.pm
  /usr/lib/perl/5.10.1/Scalar/Util.pm
  /usr/lib/perl/5.10.1/Socket.pm
  /usr/lib/perl/5.10.1/XSLoader.pm
  /usr/lib/perl/5.10.1/auto/Cwd/Cwd.so
  /usr/lib/perl/5.10.1/auto/DynaLoader/autosplit.ix
  /usr/lib/perl/5.10.1/auto/DynaLoader/dl_expandspec.al
  /usr/lib/perl/5.10.1/auto/DynaLoader/dl_find_symbol_anywhere.al
  /usr/lib/perl/5.10.1/auto/DynaLoader/dl_findfile.al
  /usr/lib/perl/5.10.1/auto/Fcntl/Fcntl.so
  /usr/lib/perl/5.10.1/auto/File/Glob/Glob.so
  /usr/lib/perl/5.10.1/auto/Hash/Util/Util.so
  /usr/lib/perl/5.10.1/auto/IO/IO.so
  /usr/lib/perl/5.10.1/auto/List/Util/Util.so
  /usr/lib/perl/5.10.1/auto/POSIX/POSIX.so
  /usr/lib/perl/5.10.1/auto/POSIX/autosplit.ix
  /usr/lib/perl/5.10.1/auto/POSIX/load_imports.al
  /usr/lib/perl/5.10.1/auto/Socket/Socket.so
  /usr/lib/perl/5.10.1/lib.pm
  /usr/lib/perl/5.10.1/re.pm
  /usr/share/doc/perl/AUTHORS.gz
  /usr/share/doc/perl/Documentation
  /usr/share/doc/perl/README.Debian
  /usr/share/doc/perl/changelog.Debian.gz
  /usr/share/doc/perl/copyright
  /usr/share/lintian/overrides/perl-base
  /usr/share/man/man1/perl.1.gz
  /usr/share/man/man1/perl5.10.1.1.gz
  /usr/share/perl/5.10.1/AutoLoader.pm
  /usr/share/perl/5.10.1/Carp.pm
  /usr/share/perl/5.10.1/Carp/Heavy.pm
  /usr/share/perl/5.10.1/Exporter.pm
  /usr/share/perl/5.10.1/Exporter/Heavy.pm
  /usr/share/perl/5.10.1/File/Spec.pm
  /usr/share/perl/5.10.1/File/Spec/Unix.pm
  /usr/share/perl/5.10.1/FileHandle.pm
  /usr/share/perl/5.10.1/Getopt/Long.pm
  /usr/share/perl/5.10.1/IPC/Open2.pm
  /usr/share/perl/5.10.1/IPC/Open3.pm
  /usr/share/perl/5.10.1/SelectSaver.pm
  /usr/share/perl/5.10.1/Symbol.pm
  /usr/share/perl/5.10.1/Text/ParseWords.pm
  /usr/share/perl/5.10.1/Text/Tabs.pm
  /usr/share/perl/5.10.1/Text/Wrap.pm
  /usr/share/perl/5.10.1/Tie/Hash.pm
  /usr/share/perl/5.10.1/attributes.pm
  /usr/share/perl/5.10.1/base.pm
  /usr/share/perl/5.10.1/bytes.pm
  /usr/share/perl/5.10.1/bytes_heavy.pl
  /usr/share/perl/5.10.1/constant.pm
  /usr/share/perl/5.10.1/fields.pm
  /usr/share/perl/5.10.1/integer.pm
  /usr/share/perl/5.10.1/locale.pm
  /usr/share/perl/5.10.1/overload.pm
  /usr/share/perl/5.10.1/strict.pm
  /usr/share/perl/5.10.1/unicore/*
  /usr/share/perl/5.10.1/utf8.pm
  /usr/share/perl/5.10.1/utf8_heavy.pl
  /usr/share/perl/5.10.1/vars.pm
  /usr/share/perl/5.10.1/warnings.pm
  /usr/share/perl/5.10.1/warnings/register.pm

A nice trick to find out the minimal set of Perl library files you will
need to run a Perl program is

   perl -e 'do "prog.pl"; END { print "$_\n" for sort keys %INC }'

(this will not find libraries required in runtime, unfortunately, but
it's a minimal set) and if you want to find out all the files you can
use something like the below

 strace perl -le 'do "x.pl"' 2>&1 \
                             | perl -nle '/^open\(\"(.+?)"/ && print $1'

(The 'strace' is Linux-specific, other similar utilities include 'truss'
and 'ktrace'.)

=head2 C<-DNO_MATHOMS>

If you configure perl with C<-Accflags=-DNO_MATHOMS>, the functions from
F<mathoms.c> will not be compiled in. Those functions are no longer used
by perl itself; for source compatibility reasons, though, they weren't
completely removed.

=head1 DOCUMENTATION

Read the manual entries before running perl.  The main documentation
is in the pod/ subdirectory and should have been installed during the
build process.  Type B<man perl> to get started.  Alternatively, you
can type B<perldoc perl> to use the supplied perldoc script.  This is
sometimes useful for finding things in the library modules.

=head1 AUTHOR

Original author:  Andy Dougherty doughera@@lafayette.edu , borrowing very
heavily from the original README by Larry Wall, with lots of helpful
feedback and additions from the perl5-porters@@perl.org folks.

If you have problems, corrections, or questions, please see
L<"Reporting Problems"> above.

=head1 REDISTRIBUTION

This document is part of the Perl package and may be distributed under
the same terms as perl itself, with the following additional request:
If you are distributing a modified version of perl (perhaps as part of
a larger package) please B<do> modify these installation instructions
and the contact information to match your distribution.
@


1.18
log
@Update to perl 5.20.3

OK bluhm@@
@
text
@d92 2
a93 3
B<WARNING:> This version is not binary compatible with versions of Perl
earlier than 5.20.0.
If you have built extensions (i.e. modules that include C code)
d253 5
a257 5
Perl used to have two different internal threads implementations.  The current
model (available internally since 5.6, and as a user-level module since 5.8) is
called interpreter-based implementation (ithreads), with one interpreter per
thread, and explicit sharing of data.  The (deprecated) 5.005 version
(5005threads) was removed for release 5.10.
d260 2
a261 2
'Thread' module emulates the old 5005threads interface on top of the current
ithreads model.
d278 2
a279 2
seek(), stat(), and -s them.  It is bad in that if you are interfacing Perl
using some extension, the components you are connecting to must also
d332 4
d341 13
d422 3
a424 3
See L<perlrun/PERL_HASH_SEED> and L<perlrun/PERL_PERTURB_KEYS> for details on
the environment variables, and L<perlsec/Algorithmic Complexity Attacks> for
further security details.
d480 1
a480 1
NeXTSTEP/OPENSTEP/Darwin, LD_LIBRARY_PATH/SHLIB_PATH
d546 12
a557 11
Perl often needs to write to the program's environment, such as when C<%ENV>
is assigned to. Many implementations of the C library function C<putenv()>
leak memory, so where possible perl will manipulate the environment directly
to avoid these leaks. The default is now to perform direct manipulation
whenever perl is running as a stand alone interpreter, and to call the safe
but potentially leaky C<putenv()> function when the perl interpreter is
embedded in another application. You can force perl to always use C<putenv()>
by compiling with C<-Accflags="-DPERL_USE_SAFE_PUTENV">, see section
L</"Altering Configure variables for C compiler switches etc.">.
You can force an embedded perl to use direct manipulation by setting
C<PL_use_safe_putenv = 0;> after the C<perl_construct()> call.
d584 1
a584 1
By default, Configure will use the following directories for 5.20.3.
d601 5
a605 4
$prefixexp is generated from $prefix, with ~ expansion done to convert home
directories into absolute paths. Similarly for the other variables listed. As
file system calls do not do this, you should always reference the ...exp
variables, to support users who build perl in their home directory.
d693 4
a696 4
However, later installations of Perl can still be configured to search the
installed libraries corresponding to compatible earlier versions.
See L<"Coexistence with earlier versions of perl 5"> below for more details
on how Perl can be made to search older version directories.
d890 2
a891 2
To disable this use of older perl modules, even completely valid pure perl
modules, you can specify to not include the paths found:
d895 4
a898 4
If you do want to use modules from some previous perl versions, the variable
must contain a space separated list of directories under the site_perl
directory, and has to include architecture-dependent directories separately,
eg.
d987 2
a988 2
using the -Dusedtrace option to Configure. DTrace probes are available for
subroutine entry (sub-entry) and subroutine exit (sub-exit). Here's a
d1083 6
a1088 6
-I/usr/local/BerkeleyDB.4.7/include to cc flags, as in the previous example,
and you will also have to take extra steps to help Configure find -ldb.
Specifically, when Configure prompts you for library directories,
add /usr/local/BerkeleyDB.4.7/lib to the list.  Also, you will need to
add appropriate linker flags to tell the runtime linker where to find the
BerkeleyDB shared libraries.
d1116 5
a1120 4
understands the C<--sysroot> option, you can use the C<-Dsysroot> option to
specify the logical root directory under which all libraries and headers
are searched for. This patch adjusts Configure to search under $sysroot, instead of /.
    
d1250 4
a1253 4
How best to optimize for the platform, both in terms of binary size and/or
speed, and for Perl feature support. Because of wide variations in the
implementation of shared libraries and of threading, for example, Configure
often needs hints in order to be able to use these features.
d1263 5
a1267 4
If you have any problems, it is a good idea to read the relevant hint file
for further information.  See hints/solaris_2.sh for an extensive example.
More information about writing good hints is in the hints/README.hints
file, which also explains hint files known as callback-units.
d1274 4
a1277 4
If you are re-using an old config.sh, it's possible that Configure detects
different values from the ones specified in this file.  You will almost
always want to keep the previous value, unless you have changed something
on your system.
d1347 2
a1348 2
You should not edit the generated file cflags directly, as your changes will
be lost the next time you run Configure, or if you edit config.sh.
d1395 2
a1396 2
The module or the bundle names are as for the CPAN module 'install' command.
This will only work if those modules are to be built as dynamic
d1406 2
a1407 2
dependencies such as external headers or libraries BEFORE trying the build.
For example: you will need to have the Foo database specific
d1471 3
a1473 2
whole L<perllocale/"LOCALE PROBLEMS"> section in the file pod/perllocale.pod.
The latter is especially useful if you see something like this
d1575 3
a1577 3
If you can't, you can either link with the updated resolver library provided
with BIND 8.1 or rename /usr/local/bin/arpa/inet.h during the Perl build and
test process to avoid the problem.
d1582 8
a1589 8
reentrant functions -- specifically networking-related ones -- being present
but without prototypes available, check to see if BIND 8.1 (or possibly
other BIND 8 versions) is (or has been) installed. They install
header files such as netdb.h into places such as /usr/local/include (or into
another directory as specified at build/install time), at least optionally.
Remove them or put them in someplace that isn't in the C preprocessor's
header file include search path (determined by -I options plus defaults,
normally /usr/include).
d1663 2
a1664 2
each file in cflags.SH.  It's okay to insert rules for specific files into
makefile since a default rule only takes effect in the absence of a
d1692 1
a1692 1
=item Note (probably harmless): No library found for -lsomething
d1700 1
a1700 1
phrase 'probably harmless' is intended to reassure you that nothing
d1706 1
a1706 1
    Note (probably harmless): No library found for -lgdbm
d1732 2
a1733 2
If you get this error message from the ext/IPC/SysV/t/sem test, your System
V IPC may be broken.  The XX typically is 20, and that is what ZZZ
d1737 1
a1737 1
=item ext/IPC/SysV/t/sem........semget: No space left on device
d1785 1
a1785 1
FreeBSD can fail the ext/IPC/SysV/t/sem.t test if SysV IPC has not been
d1806 2
a1807 1
These platforms are known as the B<target> platforms, while the systems where the compilation takes place are the B<host> platforms.
d1828 2
a1829 1
L<"Cross-compilation" in README.android or perlandroid|perlandroid/Cross-compilation>
d1837 2
a1838 1
L<"CROSS-COMPILATION" in README.solaris or perlsolaris|perlsolaris/CROSS-COMPILATION>
d1858 6
a1863 6
The more common one requires some way of transferring and running executables
in the target system, such as an ssh connection; this is the
C<./Configure -Dusecrosscompile -Dtargethost=...> route.  The second method
doesn't need access to the target system, but requires you to provide 
a config.sh, and and a canned Makefile; the rest of this section describes
the former.
d1866 2
a1867 2
a wide variety of setups, such as a 64-bit OS X host for an Android ARM target, or
an amd64 Linux host targeting x86 Solaris, or even Windows.
d1899 2
a1900 1
a non-standard (i.e. not 22) port for the connection, if applicable, through
d1911 4
a1914 3
better defaults and possibly critical fixes for the platform.  If Configure
isn't guessing the OS name properly, you may need to either add a hint file
redirecting Configure's guess, or modify Configure to make the correct choice.
d1924 6
a1929 6
logical system root somewhere -- that is, it'll create a directory somewhere
which includes subdirectories like 'include' or 'lib'.  For example, you
may end up with C</skiff/local/arm-linux>, where 
C</skiff/local/arm-linux/bin> holds the binaries for cross-compilation,
C</skiff/local/arm-linux/include> has the headers, and 
C</skiff/local/arm-linux/lib> has the library files.
d1982 3
a1984 3
If you are planning on cross-compiling to several platforms, or some other
thing that would involve running Configure several times, there are two
options that can be used to speed things up considerably.
d1989 3
a1991 3
So instead of building that new perl every single time, you can build it just
once in a separate directory, and then pass the resulting binaries to
Configure like this:
d2076 4
a2079 2
F<ext/Time-HiRes/t/HiRes.t>, F<ext/threads-shared/t/waithires.t>,
F<ext/threads-shared/t/stress.t>, F<lib/Benchmark.t>,
d2162 2
a2163 2
Unix-like platforms. Instead of running C<make test>, set C<TEST_JOBS> in
your environment to the number of tests to run in parallel, and run
d2168 4
a2171 4
An environment variable is used, rather than parallel make itself, because
L<TAP::Harness> needs to be able to schedule individual non-conflicting test
scripts itself, and there is no standard interface to C<make> utilities to
interact with their job schedulers.
d2176 4
a2179 4
Configure; by default this is /usr/local/bin.  It will also try
to put the man pages in a reasonable place.  It will not nroff the man
pages, however.  You may need to be root to run B<make install>.  If you
are not root, you must still have permission to install into the directories
d2200 2
a2201 2
This can be useful if you have to install perl as "perl5" (e.g. to
avoid conflicts with an ancient version in /usr/bin supplied by your vendor).
a2228 1
	a2p          	awk-to-perl translator.
a2235 1
	config_data	Manage Module::Build-like module configuration.
a2240 1
	find2perl	find-to-perl translator.
a2262 1
	s2p		sed-to-perl translator.
d2372 2
a2373 3
your old config.sh and Policy.sh files.  (A plain 'make clean' will not
delete the makefiles used for rebuilding perl, and will also not delete
a number of library and utility files extracted during the build process.)
d2429 4
a2432 8
If the bug you are reporting has security implications, which make it
inappropriate to send to a publicly archived mailing list, then please send
it to perl5-security-report@@perl.org. This points to a closed subscription
unarchived mailing list, which includes all the core committers, who be able
to help assess the impact of issues, figure out a resolution, and help
co-ordinate the release of patches to mitigate or fix the problem across all
platforms on which Perl is supported. Please only use this address for security
issues in the Perl core, not for modules independently distributed on CPAN.
d2440 1
a2440 1
Perl 5.20.3 is not binary compatible with versions of Perl earlier than 5.20.0.
d2443 2
a2444 2
In general, you can usually safely upgrade from one version of Perl (e.g.
5.X.Y) to another similar minor version (e.g. 5.X.(Y+1))) without
d2446 2
a2447 1
version around in case the new version causes you problems for some reason.
d2515 1
a2515 1
	sh Configure -Dprefix=/opt/perl5.20.3
d2517 1
a2517 1
and adding /opt/perl5.20.3/bin to the shell PATH variable.  Such users
d2530 1
a2530 1
=head2 Upgrading from 5.19.11 or earlier
d2532 1
a2532 1
B<Perl 5.20.3 may not be binary compatible with Perl 5.19.11 or
d2535 2
a2536 2
used with 5.20.3.  If you find you do need to rebuild an extension with
5.20.3, you may safely do so without disturbing the older
d2569 1
a2569 1
in Linux with perl-5.20.3 is as follows (under $Config{prefix}):
d2572 11
a2582 10
  ./lib/perl5/5.20.3/strict.pm
  ./lib/perl5/5.20.3/warnings.pm
  ./lib/perl5/5.20.3/i686-linux/File/Glob.pm
  ./lib/perl5/5.20.3/feature.pm
  ./lib/perl5/5.20.3/XSLoader.pm
  ./lib/perl5/5.20.3/i686-linux/auto/File/Glob/Glob.so

Secondly, for perl-5.10.1, the Debian perl-base package contains 591 files,
(of which 510 are for lib/unicore) totaling about 3.5MB in its i386 version.
Omitting the lib/unicore/* files for brevity, the remaining files are:
@


1.17
log
@Fix merge issues, remove excess files - match perl-5.20.2 dist
@
text
@d567 1
a567 1
By default, Configure will use the following directories for 5.20.2.
d2421 1
a2421 1
Perl 5.20.2 is not binary compatible with versions of Perl earlier than 5.20.0.
d2495 1
a2495 1
	sh Configure -Dprefix=/opt/perl5.20.2
d2497 1
a2497 1
and adding /opt/perl5.20.2/bin to the shell PATH variable.  Such users
d2512 1
a2512 1
B<Perl 5.20.2 may not be binary compatible with Perl 5.19.11 or
d2515 2
a2516 2
used with 5.20.2.  If you find you do need to rebuild an extension with
5.20.2, you may safely do so without disturbing the older
d2549 1
a2549 1
in Linux with perl-5.20.2 is as follows (under $Config{prefix}):
d2552 6
a2557 6
  ./lib/perl5/5.20.2/strict.pm
  ./lib/perl5/5.20.2/warnings.pm
  ./lib/perl5/5.20.2/i686-linux/File/Glob.pm
  ./lib/perl5/5.20.2/feature.pm
  ./lib/perl5/5.20.2/XSLoader.pm
  ./lib/perl5/5.20.2/i686-linux/auto/File/Glob/Glob.so
@


1.16
log
@Fix merge conflicts, remove extra files, match upstream perl-5.20.1

ok deraadt@@ sthen@@ espie@@ miod@@
@
text
@d92 2
a93 1
B<WARNING:> This version is not binary compatible with prior releases of Perl.
d567 1
a567 1
By default, Configure will use the following directories for 5.20.1.
d2421 1
a2421 1
Perl 5.20.1 is not binary compatible with earlier versions of Perl.
d2495 1
a2495 1
	sh Configure -Dprefix=/opt/perl5.20.1
d2497 1
a2497 1
and adding /opt/perl5.20.1/bin to the shell PATH variable.  Such users
d2510 1
a2510 1
=head2 Upgrading from 5.19.0 or earlier
d2512 1
a2512 1
B<Perl 5.20.1 may not be binary compatible with Perl 5.19.11 or
d2515 2
a2516 2
used with 5.20.1.  If you find you do need to rebuild an extension with
5.20.1, you may safely do so without disturbing the older
d2549 1
a2549 1
in Linux with perl-5.20.1 is as follows (under $Config{prefix}):
d2552 6
a2557 6
  ./lib/perl5/5.20.1/strict.pm
  ./lib/perl5/5.20.1/warnings.pm
  ./lib/perl5/5.20.1/i686-linux/File/Glob.pm
  ./lib/perl5/5.20.1/feature.pm
  ./lib/perl5/5.20.1/XSLoader.pm
  ./lib/perl5/5.20.1/i686-linux/auto/File/Glob/Glob.so
@


1.15
log
@Merge perl-5.18.2 plus local patches, remove old files

OK espie@@ sthen@@ deraadt@@
@
text
@d566 1
a566 1
By default, Configure will use the following directories for 5.18.2.
d1093 11
d1610 16
d1630 5
a1634 4
need to add some library or other, or you need to undefine some feature
that Configure thought was there but is defective or incomplete.  If
you used a hint file, see if it has any relevant advice.  You can also
look through through config.h for likely suspects.
d1779 6
a1784 5
rarely is.  Perl is routinely cross-compiled for many platforms (as of
June 2005 at least PocketPC aka WinCE, Open Zaurus, Symbian, and
the IBM OS/400).  These platforms are known as the B<target> platforms,
while the systems where the compilation takes place are the B<host>
platforms.
d1791 2
a1792 2
version 5.8.0, the Configure script also knows one way of supporting
cross-compilation support, so please keep reading.
d1801 1
a1801 1
README.ce
d1803 1
a1803 1
=item Open Zaurus
d1805 1
a1805 1
Cross/README
d1807 1
a1807 1
=item Symbian
d1809 1
a1809 1
README.symbian
d1811 1
a1811 1
=item OS/400
d1813 5
a1817 1
README.os400
d1832 11
a1842 13
About the cross-compilation support of Configure: what is known to
work is running Configure in a cross-compilation environment and
building the miniperl executable.  What is known not to work is
building the perl executable because that would require building
extensions: Dynaloader statically and File::Glob dynamically, for
extensions one needs MakeMaker and MakeMaker is not yet
cross-compilation aware, and neither is the main Makefile.

The cross-compilation setup of Configure has successfully been used in
at least two Linux cross-compilation environments.  The setups were
both such that the host system was Intel Linux with a gcc built for
cross-compiling into ARM Linux, and there was a SSH connection to the
target system.
d1845 1
a1845 1
has to be used is C<-Dusecrosscompile>.
d1850 1
a1850 2
symbol C<usecrosscompile> available, and C<xconfig.h> will be used
for cross-compilation.
d1873 2
a1874 1
but in case you don't, "root" will be used.
d1876 15
a1890 5
Because this is a cross-compilation effort, you will also need to specify
which target environment and which compilation environment to use.
This includes the compiler, the header files, and the libraries.
In the below we use the usual settings for the iPAQ cross-compilation
environment:
d1893 19
a1911 1
    -Dcc=arm-linux-gcc
a1915 8
If the name of the C<cc> has the usual GNU C semantics for cross
compilers, that is, CPU-OS-gcc, the names of the C<ar>, C<nm>, and
C<ranlib> will also be automatically chosen to be CPU-OS-ar and so on.
(The C<ld> requires more thought and will be chosen later by Configure
as appropriate.)  Also, in this case the incpth, libpth, and usrinc
will be guessed by Configure (unless explicitly set to something else,
in which case Configure's guesses with be appended).

d1926 1
a1926 1
	-Dtargetdir=/tar/get/dir \
d1930 1
a1930 3
        -Dusrinc=/skiff/local/arm-linux/include \
        -Dincpth=/skiff/local/arm-linux/include \
        -Dlibpth=/skiff/local/arm-linux/lib \
d1946 27
a1972 3
        -Dincpth=/usr/local/arm/2.95.5/include \
        -Dusrinc=/usr/local/arm/2.95.5/include \
        -Dlibpth=/usr/local/arm/2.95.5/lib
a2212 3
	cpan2dist	The CPANPLUS distribution creator.
	cpanp		The CPANPLUS shell.
	cpanp-run-perl	A helper for cpanp.
a2226 1
	pod2latex, 	to other useful formats.
d2347 3
a2349 1
your old config.sh and Policy.sh files.
d2420 1
a2420 1
Perl 5.18.2 is not binary compatible with earlier versions of Perl.
d2494 1
a2494 1
	sh Configure -Dprefix=/opt/perl5.18.2
d2496 1
a2496 1
and adding /opt/perl5.18.2/bin to the shell PATH variable.  Such users
d2509 1
a2509 1
=head2 Upgrading from 5.17.11 or earlier
d2511 1
a2511 1
B<Perl 5.18.2 may not be binary compatible with Perl 5.17.11 or
d2514 2
a2515 2
used with 5.18.2.  If you find you do need to rebuild an extension with
5.18.2, you may safely do so without disturbing the older
d2548 1
a2548 1
in Linux with perl-5.18.2 is as follows (under $Config{prefix}):
d2551 6
a2556 6
  ./lib/perl5/5.18.2/strict.pm
  ./lib/perl5/5.18.2/warnings.pm
  ./lib/perl5/5.18.2/i686-linux/File/Glob.pm
  ./lib/perl5/5.18.2/feature.pm
  ./lib/perl5/5.18.2/XSLoader.pm
  ./lib/perl5/5.18.2/i686-linux/auto/File/Glob/Glob.so
@


1.14
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@d107 3
a109 2
list of locally installed modules.  Also see CPAN::autobundle for one
way to make a "bundle" of your currently installed modules.
d339 56
a394 32
In Perls 5.8.0 and earlier it was easy to create degenerate hashes.
Processing such hashes would consume large amounts of CPU time,
enabling a "Denial of Service" attack against Perl.  Such hashes may be
a problem for example for mod_perl sites, sites with Perl CGI scripts
and web services, that process data originating from external sources.

In Perl 5.8.1 a security feature was introduced to make it harder to
create such degenerate hashes. A visible side effect of this was that
the keys(), values(), and each() functions may return the hash elements
in different order between different runs of Perl even with the same
data.  It also had unintended binary incompatibility issues with
certain modules compiled against Perl 5.8.0.

In Perl 5.8.2 an improved scheme was introduced.  Hashes will return
elements in the same order as Perl 5.8.0 by default.  On a hash by hash
basis, if pathological data is detected during a hash key insertion,
then that hash will switch to an alternative random hash seed.  As
adding keys can always dramatically change returned hash element order,
existing programs will not be affected by this, unless they
specifically test for pre-recorded hash return order for contrived
data. (eg the list of keys generated by C<map {"\0"x$_} 0..15> trigger
randomisation) In effect the new implementation means that 5.8.1 scheme
is only being used on hashes which are under attack.

One can still revert to the old guaranteed repeatable order (and be
vulnerable to attack by wily crackers) by setting the environment
variable PERL_HASH_SEED, see L<perlrun/PERL_HASH_SEED>.  Another option
is to add -DUSE_HASH_SEED_EXPLICIT to the compilation flags (for
example by using C<Configure -Accflags=-DUSE_HASH_SEED_EXPLICIT>), in
which case one has to explicitly set the PERL_HASH_SEED environment
variable to enable the security feature, or by adding -DNO_HASH_SEED to
the compilation flags to completely disable the randomisation feature.
d405 4
d463 1
a463 1
NeXTSTEP/OPENSTEP/Darwin, LIBRARY_PATH for BeOS, LD_LIBRARY_PATH/SHLIB_PATH
d566 1
a566 1
By default, Configure will use the following directories for 5.16.3.
d600 12
a611 10
    Configure variable	Default value
    $siteprefixexp	$prefixexp
    $sitebinexp		$siteprefixexp/bin
    $sitescriptexp	$siteprefixexp/bin
    $sitelibexp		$siteprefixexp/lib/perl5/site_perl/$version
    $sitearchexp	$siteprefixexp/lib/perl5/site_perl/$version/$archname
    $siteman1direxp	$siteprefixexp/man/man1
    $siteman3direxp	$siteprefixexp/man/man3
    $sitehtml1direxp	(none)
    $sitehtml3direxp	(none)
d622 15
a636 13
    Configure variable	Default value
    $vendorprefixexp	(none)
    (The next ones are set only if vendorprefix is set.)
    $vendorbinexp	$vendorprefixexp/bin
    $vendorscriptexp	$vendorprefixexp/bin
    $vendorlibexp
	$vendorprefixexp/lib/perl5/vendor_perl/$version
    $vendorarchexp
	$vendorprefixexp/lib/perl5/vendor_perl/$version/$archname
    $vendorman1direxp	$vendorprefixexp/man/man1
    $vendorman3direxp	$vendorprefixexp/man/man3
    $vendorhtml1direxp	(none)
    $vendorhtml3direxp	(none)
d641 3
a643 3
    $prefix		/usr
    $siteprefix		/usr/local
    $vendorprefix	/usr
d647 20
a666 20
    $binexp		/usr/bin
    $scriptdirexp	/usr/bin
    $privlibexp		/usr/lib/perl5/$version
    $archlibexp 	/usr/lib/perl5/$version/$archname
    $man1direxp		/usr/man/man1
    $man3direxp		/usr/man/man3

    $sitebinexp		/usr/local/bin
    $sitescriptexp	/usr/local/bin
    $sitelibexp		/usr/local/lib/perl5/site_perl/$version
    $sitearchexp	/usr/local/lib/perl5/site_perl/$version/$archname
    $siteman1direxp	/usr/local/man/man1
    $siteman3direxp	/usr/local/man/man3

    $vendorbinexp	/usr/bin
    $vendorscriptexp	/usr/bin
    $vendorlibexp	/usr/lib/perl5/vendor_perl/$version
    $vendorarchexp	/usr/lib/perl5/vendor_perl/$version/$archname
    $vendorman1direxp	/usr/man/man1
    $vendorman3direxp	/usr/man/man3
d685 1
a685 1
	sh Configure -Dsiteprefix=/usr/local -Dvendorprefix=/usr/share/perl
d881 1
a881 1
       sh Configure -Dinc_version_list="5.16.3/x86_64-linux 5.14.0" ...
d967 1
a967 1
On platforms where DTrace is available, it may be enabled by 
d1074 5
a1078 4
    sh Configure -de \
        -Dlocincpth='/usr/local/BerkeleyDB.4.7/include /usr/local/include' \
        -Dloclibpth='/usr/local/BerkeleyDB.4.7/lib /usr/local/lib' \
        -Aldflags='-R/usr/local/BerkeleyDB.4.7/lib'
d1306 10
a1315 3
optimizer on toke.c, find the line in the switch structure for
toke.c and put the command optimize='-g' before the ;; .  You
should not edit the generated file cflags directly, as your changes will
d1752 1
a1752 1
June 2005 at least PocketPC aka WinCE, Open Zaurus, EPOC, Symbian, and
a1777 4
=item EPOC

README.epoc

d2131 4
a2134 3
	cppstdin	This is used by the deprecated switch perl -P, if
			your cc -E can't read from stdin.
	c2ph, pstruct	Scripts for handling C structures in header files.
d2136 2
a2137 1
	corelist	Shows versions of modules that come with different
d2145 2
a2146 1
	h2ph		Extract constants and simple macros from C headers.
d2172 1
a2172 1
	zipdetails		display the internal structure of zip files
d2349 1
a2349 1
Perl 5.16 is not binary compatible with earlier versions of Perl.
d2423 1
a2423 1
	sh Configure -Dprefix=/opt/perl5.16.3
d2425 1
a2425 1
and adding /opt/perl5.16.3/bin to the shell PATH variable.  Such users
d2438 1
a2438 1
=head2 Upgrading from 5.15.6 or earlier
d2440 2
a2441 2
B<Perl 5.16.3 is binary incompatible with Perl 5.15.6 and any earlier
Perl release.>  Perl modules having binary parts
d2443 2
a2444 2
used with 5.16.3.  If you find you do need to rebuild an extension with
5.16.3, you may safely do so without disturbing the older
d2477 1
a2477 1
in Linux with perl-5.16.3 is as follows (under $Config{prefix}):
d2480 6
a2485 6
  ./lib/perl5/5.16.3/strict.pm
  ./lib/perl5/5.16.3/warnings.pm
  ./lib/perl5/5.16.3/i686-linux/File/Glob.pm
  ./lib/perl5/5.16.3/feature.pm
  ./lib/perl5/5.16.3/XSLoader.pm
  ./lib/perl5/5.16.3/i686-linux/auto/File/Glob/Glob.so
d2583 2
a2584 1
   strace perl -le 'do "x.pl"' 2>&1 | perl -nle '/^open\(\"(.+?)"/ && print $1'
@


1.13
log
@merge in perl 5.12.2 plus local changes
@
text
@d7 1
a7 1
Install - Build and Installation guide for perl 5.
d39 1
a39 1
Building perl from source requires an ANSI compliant C-Compiler.
d46 4
d54 1
a54 1
pod/perl5122delta.pod file.  For more information about how to find more
d87 1
a87 1
Please see pod/perl5122delta.pod for a description of the changes and
d90 1
a90 1
to pod/perl5122delta.pod for more detailed information.
d105 1
a105 1
pod/perl5122delta.pod for a description of what's changed.  See your
d448 1
a448 1
        cd t; ./perl -MTestInit misc/failing_test.t
d537 1
a537 1
By default, Configure will use the following directories for 5.12.2.
d539 1
a539 1
5.12.2 or 5.9.5, and $archname is a string like sun4-sunos,
d636 1
a636 1
/usr hierarchy, while the directories reserved for the end-user are in
d843 7
d851 1
a851 1
$PERL5LIB environment variable or with perl's -I runtime option.
d929 2
a930 2
Note that a perl built with -DDEBUGGING will be bigger and will run more
slowly than a standard perl.
d991 1
a991 1
to be specified explicitely (see L<Threads>).
d1028 1
a1028 1
The version of BerkeleyDB distributed by sleepycat.com installs in a
d1247 1
a1247 1
You can also supply a shell script config.over to over-ride
d1274 2
a1275 2
can also edit cflags directly, but beware that your changes will be
lost the next time you run Configure.
d1307 1
a1307 1
in the file Porting/pumpkin.pod and the file pod/perlrepository.pod.
d1437 1
a1437 1
    util.c: In function `Perl_form':
d1450 1
a1450 1
of your local set-up.
d1508 1
a1508 1
reentrant functions - specifically networking-related ones - being present
d1561 1
a1561 1
If you stil have missing routines or undefined symbols, you probably
d1572 1
a1572 1
each file in cflags.  It's okay to insert rules for specific files into
d1692 1
a1692 1
UTS may need one or more of -K or -g, and undef LSTAT.
d1722 1
a1722 1
cross-compilation support, please keep reading.
d1868 1
a1868 1
wrong.  See the file t/README in the t subdirectory.
d1877 1
a1877 4
by hand to see if it makes any difference.  If individual tests
bomb, you can run them by hand, e.g.,

	./perl -MTestInit t/op/groups.t
d1879 2
a1880 2
Another way to get more detailed information about failed tests and
individual subtests is to cd to the t directory and run
d1888 5
d1899 3
d1956 1
a1956 1
	cd t; ./perl -MTestInit op/pat.t
d1987 1
a1987 1
unpacked in such a way that the user ids in the distribution package
d2043 1
a2043 1
If "make install" just says "`install' is up to date" or something
d2090 1
a2090 3
	suidperl,
	    sperl5.n.n	If you requested setuid emulation.
	a2p          	awk-to-perl translator
d2097 1
a2097 1
	config_data	Manage Module::Build-like module configuration
d2099 8
a2106 9
			versions of perl
	cpan		The CPAN shell
	cpan2dist	The CPANPLUS distribution creator
	cpanp		The CPANPLUS shell
	cpanp-run-perl	An helper for cpanp
	dprofpp		Perl code profiler post-processor
	enc2xs		Encoding module generator
	find2perl	find-to-perl translator
	h2ph		Extract constants and simple macros from C headers
d2112 1
a2112 1
	perlivp		Perl Installation Verification Procedure
d2114 2
a2115 2
			utility iconv
	pl2pm		Convert Perl 4 .pl files to Perl 5 .pm modules
d2121 12
a2132 10
	podchecker	POD syntax checker
	podselect	Prints sections of POD documentation
	prove		A command-line tool for running tests
	psed		A Perl implementation of sed
	ptar		A Perl implementation of tar
	ptardiff	A diff for tar archives
	s2p		sed-to-perl translator
	shasum		A tool to print or check SHA checksums
	splain		Describe Perl warnings and errors
	xsubpp		Compiler to convert Perl XS code into C code
d2182 1
a2182 1
Note:  Due to differences in the C and perl languages, the conversion
a2207 1
      --libpods=perlfunc:perlguts:perlvar:perlrun:perlop \
d2228 1
a2228 1
If you wish to re-build perl from the same build directory, you should
d2242 1
a2242 1
you are experiencing difficulties building perl, you should not re-use
d2276 1
a2276 1
- for example the output from running C<uname -a>
d2280 1
a2280 1
written English is not great - what matters is how well you describe
d2289 1
a2289 1
appropriate context.  Plain text should usually be sufficient--fancy
d2309 1
a2309 1
Perl 5.12 is not binary compatible with earlier versions of Perl.
d2383 1
a2383 1
	sh Configure -Dprefix=/opt/perl5.12.2
d2385 1
a2385 1
and adding /opt/perl5.12.2/bin to the shell PATH variable.  Such users
d2398 1
a2398 1
=head2 Upgrading from 5.11.0 or earlier
d2400 1
a2400 1
B<Perl 5.12.2 is binary incompatible with Perl 5.11.1 and any earlier
d2403 2
a2404 2
used with 5.12.2.  If you find you do need to rebuild an extension with
5.12.2, you may safely do so without disturbing the older
d2437 1
a2437 1
in Linux is as follows (under $Config{prefix}):
d2440 10
a2449 8
  ./lib/perl5/5.9.3/strict.pm
  ./lib/perl5/5.9.3/warnings.pm
  ./lib/perl5/5.9.3/i686-linux/File/Glob.pm
  ./lib/perl5/5.9.3/i686-linux/XSLoader.pm
  ./lib/perl5/5.9.3/i686-linux/auto/File/Glob/Glob.so

Secondly, Debian perl-base package contains the following files,
size about 1.9MB in its i386 version:
d2452 40
a2491 46
  /usr/bin/perl5.8.4
  /usr/lib/perl/5.8
  /usr/lib/perl/5.8.4/B.pm
  /usr/lib/perl/5.8.4/B/Deparse.pm
  /usr/lib/perl/5.8.4/Config.pm
  /usr/lib/perl/5.8.4/Cwd.pm
  /usr/lib/perl/5.8.4/Data/Dumper.pm
  /usr/lib/perl/5.8.4/DynaLoader.pm
  /usr/lib/perl/5.8.4/Errno.pm
  /usr/lib/perl/5.8.4/Fcntl.pm
  /usr/lib/perl/5.8.4/File/Glob.pm
  /usr/lib/perl/5.8.4/IO.pm
  /usr/lib/perl/5.8.4/IO/File.pm
  /usr/lib/perl/5.8.4/IO/Handle.pm
  /usr/lib/perl/5.8.4/IO/Pipe.pm
  /usr/lib/perl/5.8.4/IO/Seekable.pm
  /usr/lib/perl/5.8.4/IO/Select.pm
  /usr/lib/perl/5.8.4/IO/Socket.pm
  /usr/lib/perl/5.8.4/POSIX.pm
  /usr/lib/perl/5.8.4/Socket.pm
  /usr/lib/perl/5.8.4/XSLoader.pm
  /usr/lib/perl/5.8.4/auto/Cwd/Cwd.bs
  /usr/lib/perl/5.8.4/auto/Cwd/Cwd.so
  /usr/lib/perl/5.8.4/auto/Data/Dumper/Dumper.bs
  /usr/lib/perl/5.8.4/auto/Data/Dumper/Dumper.so
  /usr/lib/perl/5.8.4/auto/DynaLoader/DynaLoader.a
  /usr/lib/perl/5.8.4/auto/DynaLoader/autosplit.ix
  /usr/lib/perl/5.8.4/auto/DynaLoader/dl_expandspec.al
  /usr/lib/perl/5.8.4/auto/DynaLoader/dl_find_symbol_anywhere.al
  /usr/lib/perl/5.8.4/auto/DynaLoader/dl_findfile.al
  /usr/lib/perl/5.8.4/auto/DynaLoader/extralibs.ld
  /usr/lib/perl/5.8.4/auto/Fcntl/Fcntl.bs
  /usr/lib/perl/5.8.4/auto/Fcntl/Fcntl.so
  /usr/lib/perl/5.8.4/auto/File/Glob/Glob.bs
  /usr/lib/perl/5.8.4/auto/File/Glob/Glob.so
  /usr/lib/perl/5.8.4/auto/IO/IO.bs
  /usr/lib/perl/5.8.4/auto/IO/IO.so
  /usr/lib/perl/5.8.4/auto/POSIX/POSIX.bs
  /usr/lib/perl/5.8.4/auto/POSIX/POSIX.so
  /usr/lib/perl/5.8.4/auto/POSIX/autosplit.ix
  /usr/lib/perl/5.8.4/auto/POSIX/load_imports.al
  /usr/lib/perl/5.8.4/auto/Socket/Socket.bs
  /usr/lib/perl/5.8.4/auto/Socket/Socket.so
  /usr/lib/perl/5.8.4/lib.pm
  /usr/lib/perl/5.8.4/re.pm
  /usr/share/doc/perl-base
d2494 1
a2494 1
  /usr/share/doc/perl/README.Debian.gz
d2497 1
d2499 34
a2532 36
  /usr/share/perl/5.8
  /usr/share/perl/5.8.4/AutoLoader.pm
  /usr/share/perl/5.8.4/Carp.pm
  /usr/share/perl/5.8.4/Carp/Heavy.pm
  /usr/share/perl/5.8.4/Exporter.pm
  /usr/share/perl/5.8.4/Exporter/Heavy.pm
  /usr/share/perl/5.8.4/File/Spec.pm
  /usr/share/perl/5.8.4/File/Spec/Unix.pm
  /usr/share/perl/5.8.4/FileHandle.pm
  /usr/share/perl/5.8.4/Getopt/Long.pm
  /usr/share/perl/5.8.4/IO/Socket/INET.pm
  /usr/share/perl/5.8.4/IO/Socket/UNIX.pm
  /usr/share/perl/5.8.4/IPC/Open2.pm
  /usr/share/perl/5.8.4/IPC/Open3.pm
  /usr/share/perl/5.8.4/List/Util.pm
  /usr/share/perl/5.8.4/Scalar/Util.pm
  /usr/share/perl/5.8.4/SelectSaver.pm
  /usr/share/perl/5.8.4/Symbol.pm
  /usr/share/perl/5.8.4/Text/ParseWords.pm
  /usr/share/perl/5.8.4/Text/Tabs.pm
  /usr/share/perl/5.8.4/Text/Wrap.pm
  /usr/share/perl/5.8.4/attributes.pm
  /usr/share/perl/5.8.4/base.pm
  /usr/share/perl/5.8.4/bytes.pm
  /usr/share/perl/5.8.4/bytes_heavy.pl
  /usr/share/perl/5.8.4/constant.pm
  /usr/share/perl/5.8.4/fields.pm
  /usr/share/perl/5.8.4/integer.pm
  /usr/share/perl/5.8.4/locale.pm
  /usr/share/perl/5.8.4/overload.pm
  /usr/share/perl/5.8.4/strict.pm
  /usr/share/perl/5.8.4/utf8.pm
  /usr/share/perl/5.8.4/utf8_heavy.pl
  /usr/share/perl/5.8.4/vars.pm
  /usr/share/perl/5.8.4/warnings.pm
  /usr/share/perl/5.8.4/warnings/register.pm
@


1.12
log
@Merge in perl 5.10.1
@
text
@d39 5
d50 1
a50 1
pod/perl5101delta.pod file.  For more information about how to find more
d83 1
a83 1
Please see pod/perl5101delta.pod for a description of the changes and
d86 1
a86 1
to pod/perl5101delta.pod for more detailed information.
d88 1
a88 2
B<WARNING:> This version is not binary compatible with releases of
Perl prior to 5.10.0.
d101 1
a101 1
pod/perl5101delta.pod for a description of what's changed.  See your
d252 1
a252 1
(5005threads) has been removed for release 5.10.
d318 1
a318 1
options is planned for perl 5.12.
d472 2
a473 2
install a standard Perl 5.10.1 with a shared library.  Then, suppose you
try to build Perl 5.10.1 with -DDEBUGGING enabled, but everything else
d503 4
a506 3
by compiling with -DPERL_USE_SAFE_PUTENV. You can force an embedded perl to
use direct manipulation by setting C<PL_use_safe_putenv = 0;> after the
C<perl_construct()> call.
d533 1
a533 1
By default, Configure will use the following directories for 5.10.1.
d535 1
a535 1
5.10.1 or 5.9.5, and $archname is a string like sun4-sunos,
d796 4
d945 2
a946 1
a space-separated list of extensions.  The extensions listed in
d1296 1
a1296 1
in the file Porting/pumpkin.pod and the file Porting/patching.pod.
d1329 3
a1331 19
suidperl is an optional component, which is normally neither built
nor installed by default.  From perlfaq1:

	On some systems, setuid and setgid scripts (scripts written
        in the C shell, Bourne shell, or Perl, for example, with the
        set user or group ID permissions enabled) are insecure due to
        a race condition in the kernel. For those systems, Perl versions
        5 and 4 attempt to work around this vulnerability with an optional
        component, a special program named suidperl, also known as sperl.
        This program attempts to emulate the set-user-ID and set-group-ID
        features of the kernel.

Because of the buggy history of suidperl, and the difficulty
of properly security auditing as large and complex piece of
software as Perl, we cannot recommend using suidperl and the feature
should be considered deprecated.

Instead, use a tool specifically designed to handle changes in
privileges, such as B<sudo>.
d1570 20
d1869 1
a1869 1
	cd t ; ./perl -MTestInit op/groups.t
d2295 2
a2296 3
This version is not binary compatible with releases of Perl prior
to 5.10.0.  In other words, you will have to recompile any XS modules
installed under version 5.8.9 (or earlier).
d2307 19
a2325 13
Suppose you already have versions 5.8.9 and 5.10.0 installed, and you
are now installing 5.10.1.  The directories searched by version 5.10.1
will be:

    /usr/local/lib/perl5/5.10.1/$archname
    /usr/local/lib/perl5/5.10.1
    /usr/local/lib/perl5/site_perl/5.10.1/$archname
    /usr/local/lib/perl5/site_perl/5.10.1

    /usr/local/lib/perl5/site_perl/5.10.0/$archname
    /usr/local/lib/perl5/site_perl/5.10.0
    /usr/local/lib/perl5/site_perl/5.8.9
    /usr/local/lib/perl5/site_perl
d2327 1
a2327 1
Notice the last four entries -- Perl understands the default structure
d2329 27
a2355 9
directories.  It will load up architecture-dependent modules from your
5.10.0 installation, and pure perl modules from either your 5.10.0 or
5.8.9 installations.  The last entry, /usr/local/lib/perl5/site_perl/,
is there for 5.004-era pure perl modules.

Next, suppose that you now upgrade a module to one which requires
features present only in 5.10.1.  That new module will get installed into
/usr/local/lib/perl5/site_perl/5.10.1 and will be available to 5.10.1,
but will not interfere with the 5.10.0 version.
a2360 2
This search order is scheduled for revision starting in version 5.11.0.

d2369 1
a2369 1
	sh Configure -Dprefix=/opt/perl5.10.1
d2371 1
a2371 1
and adding /opt/perl5.10.1/bin to the shell PATH variable.  Such users
d2384 1
a2384 1
=head2 Upgrading from 5.8.x or earlier
d2386 1
a2386 1
B<Perl 5.10.1 is binary incompatible with Perl 5.8.x and any earlier
d2389 2
a2390 2
used with 5.10.1.  If you find you do need to rebuild an extension with
5.10.1, you may safely do so without disturbing the older
@


1.11
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@d45 2
a46 2
pod/perl5100delta.pod file.  For more detailed information about specific
changes, see the Changes file.
d78 1
a78 1
Please see pod/perl5100delta.pod for a description of the changes and
d81 1
a81 1
to pod/perl5100delta.pod for more detailed information.
d83 2
a84 1
B<WARNING:> This version is not binary compatible with prior releases of Perl.
d97 1
a97 1
pod/perl5100delta.pod for a description of what's changed.  See your
d468 2
a469 2
install a standard Perl 5.10.0 with a shared library.  Then, suppose you
try to build Perl 5.10.0 with -DDEBUGGING enabled, but everything else
d528 1
a528 1
By default, Configure will use the following directories for 5.10.0.
d530 1
a530 1
5.10.0 or 5.9.5, and $archname is a string like sun4-sunos,
d776 15
d909 16
d1005 1
a1005 1
=item gdbm in /usr/you
d1007 9
a1015 7
Suppose you have gdbm installed in some place other than /usr/local,
but you still want Configure to find it.  To be specific, assume you
have /usr/you/include/gdbm.h and /usr/you/lib/libgdbm.a.  You
still have to add -I/usr/you/include to cc flags, but you have to take
an extra step to help Configure find libgdbm.a.  Specifically, when
Configure prompts you for library directories, you have to add
/usr/you/lib to the list.
d1017 1
a1017 1
It is possible to specify this from the command line too (all on one
d1021 3
a1023 2
        -Dlocincpth="/usr/you/include" \
        -Dloclibpth="/usr/you/lib"
d1029 1
a1029 3
Configure will automatically add the appropriate -L directives.  If
you have some libraries under /usr/local/ and others under
/usr/you, then you have to include both, namely
d1031 4
a1034 3
    sh Configure -de \
        -Dlocincpth="/usr/you/include /usr/local/include" \
        -Dloclibpth="/usr/you/lib /usr/local/lib"
d1405 12
d1583 3
a1585 5
For example, a system may have -lcposix or -lposix, but it's
unlikely to have both, so most users will see warnings for the one
they don't have.  The phrase 'probably harmless' is intended to
reassure you that nothing unusual is happening, and the build
process is continuing.
d1909 2
a1910 2
F<ext/Time/HiRes/t/HiRes.t>, F<ext/threads/shared/t/waithires.t>,
F<ext/threads/shared/t/stress.t>, F<lib/Benchmark.t>,
d1933 7
d1992 12
d2266 9
d2281 3
a2283 2
Perl 5.10 is not binary compatible with earlier versions of Perl.
In other words, you will have to recompile your XS modules.
d2294 13
a2306 2
Suppose you already have version 5.8.7 installed.  The directories
searched by 5.8.7 are typically like:
d2308 1
a2308 18
	/usr/local/lib/perl5/5.8.7/$archname
	/usr/local/lib/perl5/5.8.7
	/usr/local/lib/perl5/site_perl/5.8.7/$archname
	/usr/local/lib/perl5/site_perl/5.8.7

Now, suppose you install version 5.8.8.  The directories
searched by version 5.8.8 will be:

	/usr/local/lib/perl5/5.8.8/$archname
	/usr/local/lib/perl5/5.8.8
	/usr/local/lib/perl5/site_perl/5.8.8/$archname
	/usr/local/lib/perl5/site_perl/5.8.8

	/usr/local/lib/perl5/site_perl/5.8.7/$archname
	/usr/local/lib/perl5/site_perl/5.8.7
	/usr/local/lib/perl5/site_perl/

Notice the last three entries -- Perl understands the default structure
d2310 9
a2318 27
directories.  This way, modules installed under 5.8.7 will continue
to be usable by 5.8.7 but will also accessible to 5.8.8.  Further,
suppose that you upgrade a module to one which requires features
present only in 5.8.8.  That new module will get installed into
/usr/local/lib/perl5/site_perl/5.8.8 and will be available to 5.8.8,
but will not interfere with the 5.8.7 version.

The last entry, /usr/local/lib/perl5/site_perl/, is there so that
5.6.0 and above will look for 5.004-era pure perl modules.

Lastly, suppose you now install 5.10.0, which is not binary compatible
with 5.8.x.  The directories searched by 5.10.0 (if you don't change the
Configure defaults) will be:

	/usr/local/lib/perl5/5.10.0/$archname
	/usr/local/lib/perl5/5.10.0
	/usr/local/lib/perl5/site_perl/5.10.0/$archname
	/usr/local/lib/perl5/site_perl/5.10.0

	/usr/local/lib/perl5/site_perl/5.8.8

	/usr/local/lib/perl5/site_perl/5.8.7

	/usr/local/lib/perl5/site_perl/

Note that the earlier $archname entries are now gone, but pure perl
modules from earlier versions will still be found.
d2324 2
d2334 1
a2334 1
	sh Configure -Dprefix=/opt/perl5.10.0
d2336 1
a2336 1
and adding /opt/perl5.10.0/bin to the shell PATH variable.  Such users
d2351 1
a2351 1
B<Perl 5.10.0 is binary incompatible with Perl 5.8.x and any earlier
d2354 2
a2355 2
used with 5.10.0.  If you find you do need to rebuild an extension with
5.10.0, you may safely do so without disturbing the older
@


1.10
log
@merge in perl 5.8.8
@
text
@d7 1
a7 49
Install - Build and Installation guide for perl5.

=head1 Reporting Problems

Wherever possible please use the perlbug tool supplied with this Perl
to report problems, as it automatically includes summary configuration
information about your perl, which may help us track down problems far
more quickly. But first you should read the advice in this file,
carefully re-read the error message and check the relevant manual pages
on your system, as these may help you find an immediate solution.  If
you are not sure whether what you are seeing is a bug, you can send a
message describing the problem to the comp.lang.perl.misc newsgroup to
get advice.

The perlbug tool is installed along with perl, so after you have
completed C<make install> it should be possible to run it with plain
C<perlbug>.  If the install fails, or you want to report problems with
C<make test> without installing perl, then you can use C<make nok> to
run perlbug to report the problem, or run it by hand from this source
directory with C<./perl -Ilib utils/perlbug>

If the build fails too early to run perlbug uninstalled, then please
B<run> the C<./myconfig> shell script, and mail its output along with
an accurate description of your problem to perlbug@@perl.org

If Configure itself fails, and does not generate a config.sh file
(needed to run C<./myconfig>), then please mail perlbug@@perl.org the
description of how Configure fails along with details of your system
- for example the output from running C<uname -a>

Please try to make your message brief but clear.  Brief, clear bug
reports tend to get answered more quickly.  Please don't worry if your
written English is not great - what matters is how well you describe
the important technical details of the problem you have encountered,
not whether your grammar and spelling is flawless.

Trim out unnecessary information.  Do not include large files (such as
config.sh or a complete Configure or make log) unless absolutely
necessary.  Do not include a complete transcript of your build
session.  Just include the failing commands, the relevant error
messages, and whatever preceding commands are necessary to give the
appropriate context.  Plain text should usually be sufficient--fancy
attachments or encodings may actually reduce the number of people who
read your message.  Your message will get relayed to over 400
subscribers around the world so please try to keep it brief but clear.

If you are unsure what makes a good bug report please read "How to
report Bugs Effectively" by Simon Tatham:
http://www.chiark.greenend.org.uk/~sgtatham/bugs.html
d11 1
a11 1
First, make sure you have an up-to-date version of Perl.   If you
d14 1
a14 1
subreleases (like 5.6.x and 5.8.x) are stable maintenance releases and
d21 2
a22 2
The basic steps to build and install perl5 on a Unix system with all
the defaults are:
a23 1
	rm -f config.sh Policy.sh
d33 5
a37 1
If that's not okay with you, can run Configure interactively and use
d39 1
a39 12
	rm -f config.sh Policy.sh
	sh Configure
	make
	make test
	make install

	# You may also wish to add these:
	(cd /usr/include && h2ph *.h sys/*.h)
	(installhtml --help)
	(cd pod && make tex  && <process the latex files>)

or you can use some of the Configure options described below.
d42 1
a42 1
L<"Reporting Problems"> above.
d45 1
a45 1
pod/perldelta.pod file.  For more detailed information about specific
d67 2
a68 3
system (in the hints/ directory) you should also read that hint file
for even more information.  (Unixware users should use the svr4.sh or
the svr5.sh hint file.)
d78 1
a78 1
Please see pod/perldelta.pod for a description of the changes and
d81 1
a81 4
to pod/perldelta.pod for more detailed information.

=head3 WARNING:  This version is not binary compatible with releases of
Perl prior to 5.8.0.
d83 1
d89 2
a90 3
without reinstallation.  See the discussions below on
L<"Coexistence with earlier versions of perl5"> and
L<"Upgrading from 5.005 or 5.6 to 5.8.0"> for more details.
d96 1
a96 1
pod/perldelta.pod for a description of what's changed.  See your
a100 59
=head2 Space Requirements

The complete perl5 source tree takes up about 60 MB of disk space.
After completing make, it takes up roughly 100 MB, though the actual
total is likely to be quite system-dependent.  The installation
directories need something on the order of 45 MB, though again that
value is system-dependent.  A perl build with debug symbols and
-DDEBUGGING will require something on the order of 10 MB extra.

=head1 Start with a Fresh Distribution

If you have built perl before, you should clean out the build directory
with the command

	make distclean

or

	make realclean

The only difference between the two is that make distclean also removes
your old config.sh and Policy.sh files.

The results of a Configure run are stored in the config.sh and Policy.sh
files.  If you are upgrading from a previous version of perl, or if you
change systems or compilers or make other significant changes, or if
you are experiencing difficulties building perl, you should probably
not re-use your old config.sh.  Simply remove it

	rm -f config.sh

If you wish to use your old config.sh, be especially attentive to the
version and architecture-specific questions and answers.  For example,
the default directory for architecture-dependent library modules
includes the version name.  By default, Configure will reuse your old
name (e.g. /opt/perl/lib/i86pc-solaris/5.003) even if you're running
Configure for a different version, e.g. 5.004.  Yes, Configure should
probably check and correct for this, but it doesn't.  Similarly, if you
used a shared libperl.so (see below) with version numbers, you will
probably want to adjust them as well.

Also, be careful to check your architecture name.  For example, some
Linux distributions use i386, while others may use i486.  If you build
it yourself, Configure uses the output of the arch command, which
might be i586 or i686 instead.  If you pick up a precompiled binary, or
compile extensions on different systems, they might not all agree on
the architecture name.

In short, if you wish to use your old config.sh, I recommend running
Configure interactively rather than blindly accepting the defaults.

If your reason to reuse your old config.sh is to save your particular
installation choices, then you can probably achieve the same effect by
using the Policy.sh file.  See the section on L<"Site-wide Policy
settings"> below.  If you wish to start with a fresh distribution, you
also need to remove any old Policy.sh files you may have with

	rm -f Policy.sh

d116 3
d130 1
a130 1
=item gcc
d132 2
a133 1
To compile with gcc you should run
d137 1
a137 1
This is the preferred way to specify gcc (or another alternative
d144 1
a144 1
and L<"Coexistence with earlier versions of perl5"> below for
d192 1
a192 1
=item Building a development release.
d207 1
a207 5
For example for my Solaris/x86 system, I usually use

	sh Configure -Dprefix=/opt/perl -Doptimize='-xpentium -xO4' -des

=head2 Altering config.sh variables for C compiler switches etc.
d216 6
a221 1
	sh Configure -Accflags="-DPERL_Y2KWARN -DPERL_POLLUTE_MALLOC"
a240 3
Currently, you need to specify -Dusethreads on the Configure command
line so that the hint files can make appropriate adjustments.

d243 5
a247 11
Perl has two different internal threads implementations.  The current
model (available internally since 5.6, and as a user-level module since
5.8) is called interpreter-based implementation (ithreads), with one
interpreter per thread, and explicit sharing of data.  The 5.005
version (5005threads) is considered obsolete, buggy, and unmaintained.

By default, Configure selects ithreads if -Dusethreads is specified.

However, if you insist, you can select the unsupported old 5005threads behavior

	sh Configure -Dusethreads -Duse5005threads
d250 2
a251 2
'Thread' module offers an interface to either 5005threads or ithreads
(whichever has been configured).
d259 1
a259 1
C<-Accflags=-DPERL_REENTRANT_MAXSIZE=65536>
d261 1
a261 1
=head3 Large file support.
d272 1
a272 2
will happen.  One popular extension suffering from this ailment is the
Apache extension mod_perl.
d279 5
a283 1
=head3 64 bit support.
d285 2
a286 2
If your platform does not have run natively at 64 bits, but can
simulate them with compiler flags and/or C<long long> or C<int64_t>,
d309 5
a313 7
Natively 64-bit systems like Alpha and Cray need neither -Duse64bitint
nor -Duse64bitall.

    NOTE: 64-bit support is still experimental on most platforms.
    Existing support only covers the LP64 data model.  In particular, the
    LLP64 data model is not yet supported.  64-bit libraries and system
    APIs on many platforms have not stabilized--your mileage may vary.
a326 51
=head3 Selecting File IO mechanisms

Executive summary: as of Perl 5.8, you should use the default "PerlIO"
as the IO mechanism unless you have a good reason not to.

In more detail: previous versions of perl used the standard IO
mechanisms as defined in stdio.h.  Versions 5.003_02 and later of perl
introduced alternate IO mechanisms via a "PerlIO" abstraction, but up
until and including Perl 5.6, the stdio mechanism was still the default
and the only supported mechanism.

Starting from Perl 5.8, the default mechanism is to use the PerlIO
abstraction, because it allows better control of I/O mechanisms,
instead of having to work with (often, work around) vendors' I/O
implementations.

This PerlIO abstraction can be (but again, unless you know what you
are doing, should not be) disabled either on the Configure command
line with

	sh Configure -Uuseperlio

or interactively at the appropriate Configure prompt.

With the PerlIO abstraction layer, there is another possibility for
the underlying IO calls, AT&T's "sfio".  This has superior performance
to stdio.h in many cases, and is extensible by the use of "discipline"
modules ("Native" PerlIO has them too).  Sfio currently only builds on
a subset of the UNIX platforms perl supports.  Because the data
structures are completely different from stdio, perl extension modules
or external libraries may not work.  This configuration exists to
allow these issues to be worked on.

This option requires the 'sfio' package to have been built and installed.
The latest sfio is available from http://www.research.att.com/sw/tools/sfio/

You select this option by

	sh Configure -Duseperlio -Dusesfio

If you have already selected -Duseperlio, and if Configure detects
that you have sfio, then sfio will be the default suggested by
Configure.

Note:  On some systems, sfio's iffe configuration script fails to
detect that you have an atexit function (or equivalent).  Apparently,
this is a problem at least for some versions of Linux and SunOS 4.
Configure should detect this problem and warn you about problems with
_exit vs. exit.  If you have this problem, the fix is to go back to
your sfio sources and correct iffe's guess about atexit.

d365 1
a365 2
be, affected by the insertion order.  It is likely that Perl 5.10 and
Perl 6 will randomise all hashes.  Note that because of this
d367 1
a367 1
between different runs of Perl since Data::Dumper by default dumps
d376 3
a378 1
Version 5.  You can find more about SOCKS from http://www.socks.nec.com/
d382 2
a383 2
By default, Configure will compile perl to use dynamic loading if
your system supports it.  If you want to force perl to be compiled
d386 2
d393 1
a393 2
extensions (usually just DynaLoader.a) and various extra libraries,
such as -lm.
d395 1
a395 1
On some systems that support dynamic loading, it may be possible to
d413 1
a413 1
libperl.so.6.2 (for Perl 5.6.2), or libperl.so.602, or simply
a418 3
For some systems (mostly SVR4), building a shared libperl is required
for dynamic loading to work, and hence is already the default.

d439 2
a440 1
        cd t; ./perl misc/failing_test.t
d442 1
d461 2
a462 1
18126:./miniperl: /sbin/loader: Fatal Error: cannot map libperl.so
d467 2
a468 2
install a standard Perl 5.8.0 with a shared library.  Then, suppose you
try to build Perl 5.8.0 with -DDEBUGGING enabled, but everything else
d505 5
a509 8
appropriate questions in Configure.  For convenience, all the
installation questions are near the beginning of Configure.
Do not include trailing slashes on directory names.

I highly recommend running Configure interactively to be sure it puts
everything where you want it.  At any point during the Configure
process, you can answer a question with  &-d  and Configure will use
the defaults from then on.  Alternatively, you can
d527 1
a527 1
By default, Configure will use the following directories for 5.8.x.
d529 1
a529 1
5.8.3 or 5.8.4, and $archname is a string like sun4-sunos,
d633 1
a633 1
See L<"Coexistence with earlier versions of perl5"> below for more details
d674 1
a674 1
=item USE_SITECUSTOMIZE
d680 2
a681 2
Which will define USE_SITECUSTOMIZE and $Config{usesitecustomize}.
When enabled, make perl run F<$sitelibexp/sitecustomize.pl> before
d687 3
a689 11
In versions 5.005_57 and earlier, the default was to store module man
pages in a version-specific directory, such as
/usr/local/lib/perl5/$version/man/man3.  The default for 5.005_58 and
after is /usr/local/man/man3 so that most users can find the man pages
without resetting MANPATH.

You can continue to use the old default from the command line with

	sh Configure -Dman3dir=/usr/local/lib/perl5/5.8.4/man/man3

Some users also prefer to use a .3pm suffix.  You can do that with
a692 3
Again, these are just the defaults, and can be changed as you run
Configure.

d714 1
a714 1
discussed in L<"Coexistence with earlier versions of perl5"> below.
d721 1
a721 1
-Dprefix=/opt/perl, then the default library directories for 5.8.4 are
d724 4
a727 4
	$privlib	/opt/perl/lib/5.8.4
	$archlib	/opt/perl/lib/5.8.4/$archname
	$sitelib	/opt/perl/lib/site_perl/5.8.4
	$sitearch	/opt/perl/lib/site_perl/5.8.4/$archname
d732 1
a732 1
associated files) should be installed and the directory in which it
d735 6
a740 10
However, sites that use software such as depot to manage software
packages, or users building binary packages for distribution may also
wish to install perl into a different directory and use that
management software to move perl to its final destination.  This
section describes how to do that.

Suppose you want to install perl under the /tmp/perl5 directory.  You
could edit config.sh and change all the install* variables to point to
/tmp/perl5 instead of /usr/local, or you could simply use the
following command line:
d742 6
a747 1
	sh Configure -Dinstallprefix=/tmp/perl5
d753 2
a754 2
follow this example.  The next section shows one way of dealing with
that problem.
d756 1
a756 1
=head2 Creating an installable tar archive
d773 2
d778 9
a786 5
answers (such as installation directories and the local perl contact
person) in the Policy.sh file.  If you want to build perl on another
system using the same policy defaults, simply copy the Policy.sh file
to the new system and Configure will use it along with the appropriate
hint file for your system.
d804 4
a807 3
installed perl binaries in the tree that is specified as target tree
and these will be used by the perl being built.
See L<"Coexistence with earlier versions of perl5"> for more details.
d834 2
d843 20
a862 1
you probably want to do
d864 1
a864 1
	sh Configure -Doptimize='-g'
d866 1
a866 11
This will do two independent things:  First, it will force compilation
to use cc -g so that you can use your system's debugger on the
executable.  (Note:  Your system may actually require something like
cc -g2.  Check your man pages for cc(1) and also any hint file for
your system.)  Second, it will add -DDEBUGGING to your ccflags
variable in config.sh so that you can use B<perl -D> to access perl's
internal state.  (Note: Configure will only add -DDEBUGGING by default
if you are not reusing your old config.sh.  If you want to reuse your
old config.sh, then you can just edit it and change the optimize and
ccflags variables by hand and then propagate your changes as shown in
L<"Propagating your changes to config.sh"> below.)
d868 21
a888 2
You can actually specify -g and -DDEBUGGING independently, but usually
it's convenient to have both.
d900 1
a900 25
only if it is able to find the gdbm library.  (See examples below.)
Configure does not contain code to test for POSIX compliance, so POSIX
is always built by default.  If you wish to skip POSIX, you can
set the Configure variable useposix=false from the Configure command line.

If you unpack any additional extensions in the ext/ directory before
running Configure, then Configure will offer to build those additional
extensions as well.  Most users probably shouldn't have to do this --
it is usually easier to build additional extensions later after perl
has been installed.  However, if you wish to have those additional
extensions statically linked into the perl binary, then this offers a
convenient way to do that in one step.  (It is not necessary, however;
you can build and install extensions just fine even if you don't have
dynamic loading.  See lib/ExtUtils/MakeMaker.pm for more details.)

If you have dynamic loading, another way of specifying extra modules
is described in L<"Adding extra modules to the build"> below.

You can learn more about each of the supplied extensions by consulting the
documentation in the individual .pm modules, located under the
ext/ subdirectory.

Even if you do not have dynamic loading, you must still build the
DynaLoader extension; you should just build the stub dl_none.xs
version.  Configure will suggest this as the default.
d915 11
a925 4
Note:  The DB_File module will only work with version 1.x of Berkeley
DB or newer releases of version 2.  Configure will automatically detect
this for you and refuse to try to build DB_File with earlier
releases of version 2.
d927 1
a927 1
If you re-use your old config.sh but change your system (e.g. by
a931 5
Finally, if you have dynamic loading (most modern systems do)
remember that these extensions do not increase the size of your perl
executable, nor do they impact start-up time, so you probably might as
well build all the ones that will work on your system.

d934 2
a935 2
Perl5 comes with interfaces to number of database extensions, including
dbm, ndbm, gdbm, and Berkeley db.  For each extension, if
d937 10
a946 11
automatically include that extension.  The gdbm and db libraries
are not included with perl.  See the library documentation for
how to obtain the libraries.

If your database header (.h) files are not in a directory normally
searched by your C compiler, then you will need to include the
appropriate -I/your/directory option when prompted by Configure.  If
your database libraries are not in a directory normally
searched by your C compiler and linker, then you will need to include
the appropriate -L/your/directory option when prompted by Configure.
See the examples below.
d961 3
a963 4
your C compiler, you should include  -I/usr/local/include.

When Configure prompts you for linker flags, you should include
-L/usr/local/lib.
d975 1
a975 1
Suppose you have gdbm installed in some place other than /usr/local/,
d986 3
a988 3
	sh Configure -de \
		-Dlocincpth="/usr/you/include" \
		-Dloclibpth="/usr/you/lib"
d998 3
a1000 3
	sh Configure -de \
		-Dlocincpth="/usr/you/include /usr/local/include" \
		-Dloclibpth="/usr/you/lib /usr/local/lib"
a1003 33
=head2 Building DB, NDBM, and ODBM interfaces with Berkeley DB 3

A Perl interface for DB3 is part of Berkeley DB, but if you want to
compile the standard Perl DB/ODBM/NDBM interfaces, you must follow
following instructions.

Berkeley DB3 from Sleepycat Software is by default installed without
DB1 compatibility code (needed for the DB_File interface) and without
links to compatibility files. So if you want to use packages written
for the DB/ODBM/NDBM interfaces, you need to configure DB3 with
--enable-compat185 (and optionally with --enable-dump185) and create
additional references (suppose you are installing DB3 with
--prefix=/usr):

    ln -s libdb-3.so /usr/lib/libdbm.so
    ln -s libdb-3.so /usr/lib/libndbm.so
    echo '#define DB_DBM_HSEARCH 1' >dbm.h
    echo '#include <db.h>' >>dbm.h
    install -m 0644 dbm.h /usr/include/dbm.h
    install -m 0644 dbm.h /usr/include/ndbm.h

Optionally, if you have compiled with --enable-compat185 (not needed
for ODBM/NDBM):

    ln -s libdb-3.so /usr/lib/libdb1.so
    ln -s libdb-3.so /usr/lib/libdb.so

ODBM emulation seems not to be perfect, but is quite usable,
using DB 3.1.17:

    lib/odbm.............FAILED at test 9
        Failed 1/64 tests, 98.44% okay

d1006 3
a1008 2
If you want to use your old config.sh but override some of the items
with command line options, you need to use B<Configure -O>.
a1026 2
See L<Cross-compilation> below for information on cross-compiling.

d1051 6
d1060 1
a1060 1
run Configure to accept all the defaults on those platforms.
d1082 1
a1082 1
       sh Configure -Accflags=-DPERL_DEBUGGING_MSTATS -Dusemymalloc='y'
d1091 1
a1091 1
If none of them help, then see L<"Reporting Problems"> above.
d1112 29
a1140 3
The perl distribution includes a number of system-specific hints files
in the hints/ directory.  If one of them matches your system, Configure
will offer to use that hint file.
d1146 1
a1146 1
file.
d1148 2
a1149 1
=item *** WHOA THERE!!! ***
d1151 1
a1151 4
Occasionally, Configure makes a wrong guess.  For example, on SunOS
4.1.3, Configure incorrectly concludes that tzname[] is in the
standard C library.  The hint file is set up to correct for this.  You
will see a message:
d1153 4
a1156 12
    *** WHOA THERE!!! ***
	The recommended value for $d_tzname on this machine was "undef"!
	Keep the recommended value? [y]

You should always keep the recommended value unless, after reading the
relevant section of the hint file, you are sure you want to try
overriding it.

If you are re-using an old config.sh, the word "previous" will be
used instead of "recommended".  Again, you will almost always want
to keep the previous value, unless you have changed something on your
system.
d1176 1
a1176 5
rename it, e.g. mv config.sh config.sh.old.  Then rerun Configure
with the options you want to use.

This is a common source of problems.  If you change from cc to
gcc, you should almost always remove your old config.sh.
a1238 29
=item Digital UNIX/Tru64 UNIX and BIN_SH

In Digital UNIX/Tru64 UNIX, Configure might abort with

Build a threading Perl? [n]
Configure[2437]: Syntax error at line 1 : `config.sh' is not expected.

This indicates that Configure is being run with a broken Korn shell
(even though you think you are using a Bourne shell by using
"sh Configure" or "./Configure").  The Korn shell bug has been reported
to Compaq as of February 1999 but in the meanwhile, the reason ksh is
being used is that you have the environment variable BIN_SH set to
'xpg4'.  This causes /bin/sh to delegate its duties to /bin/posix/sh
(a ksh).  Unset the environment variable and rerun Configure.

=item HP-UX 11, pthreads, and libgdbm

If you are running Configure with -Dusethreads in HP-UX 11, be warned
that POSIX threads and libgdbm (the GNU dbm library) compiled before
HP-UX 11 do not mix.  This will cause a basic test run by Configure to
fail

Pthread internal error: message: __libc_reinit() failed, file: ../pthreads/pthread.c, line: 1096
Return Pointer is 0xc082bf33
sh: 5345 Quit(coredump)

and Configure will give up.  The cure is to recompile and install
libgdbm under HP-UX 11.

d1263 1
a1263 1
	Configure -Dextras="Compress::Zlib Bundle::LWP DBI"
d1266 1
a1266 1
then answer "Compress::Zlib Bundle::LWP DBI" to the 'Extras?' question.
d1279 1
a1279 2
For example: you will need to have the zlib.h header and the libz
library installed for the Compress::Zlib, or the Foo database specific
d1301 1
d1303 1
a1303 1
privileges, such as B<sudo>, http://www.courtesan.com/sudo/ .
d1323 1
a1323 1
These errors are normal, and can be ignored:
d1335 1
a1335 1
then see L<"Reporting Problems"> above.
d1359 1
a1359 1
whole L<"Locale problems"> section in the file pod/perllocale.pod.
d1454 1
a1454 1
=item *_r() prototype NOT found
d1617 1
a1617 1
Some additional things that have been reported for either perl4 or perl5:
a1628 6
HP-UX 11 Y2K patch "Y2K-1100 B.11.00.B0125 HP-UX Core OS Year 2000
Patch Bundle" has been reported to break the io/fs test #18 which
tests whether utime() can change timestamps.  The Y2K patch seems to
break utime() so that over NFS the timestamps do not get changed
(on local filesystems utime() still works).

d1662 1
a1662 1
README.ce, wince/README.perlce
d1713 2
a1714 1
symbol C<usecrosscompile> available.
d1811 1
a1811 1
	./perl op/groups.t
d1816 1
a1816 1
	./perl harness
d1819 2
a1820 8
complicated constructs).  For extension and library tests you
need a little bit more: you need to setup your environment variable
PERL_CORE to a true value (like "1"), and you need to supply the
right Perl library path:

	setenv PERL_CORE 1
	./perl -I../lib ../ext/Socket/Socket.t
	./perl -I../lib ../lib/less.t
a1821 1
(For csh-like shells on UNIX; adjust appropriately for other platforms.)
d1836 1
a1836 1
B<make test> exercises them.  For example, this may happen if you have
d1865 2
a1866 1
F<ext/Time/HiRes/HiRes.t>, F<lib/Benchmark.t>,
d1869 4
d1882 1
a1882 1
	cd t; ./perl op/pat.t
d1964 1
a1964 1
"perl5.005") by setting PERLNAME_VERBASE, like
d1970 1
a1970 1
Without this the versioned binary would be called "perl55.005".
d1980 1
a1980 2
the example in L<"Creating an installable tar archive"> above.

d1995 1
a1995 1
	    perl5.nnn	where nnn is the current release number.  This
d1998 1
a1998 1
	    sperl5.nnn	If you requested setuid emulation.
d2003 2
a2004 2
	cppstdin	This is used by perl -P, if your cc -E can't
			read from stdin.
d2006 9
a2014 1
	s2p		sed-to-perl translator
d2018 2
d2022 3
a2029 2
	pod2checker,
	pod2select,
d2031 8
d2040 1
a2040 1
	dprofpp		Perl code profile post-processor
d2054 1
a2054 1
Installperl will also create the directories listed above
d2062 2
d2066 1
a2066 1
perl alongside an already installed production version of perl without
d2078 1
d2082 124
a2205 1
=head1 Coexistence with earlier versions of perl5
d2207 3
a2209 1
Perl 5.8 is not binary compatible with earlier versions of Perl.
d2213 3
a2215 7
5.8.0) to another similar version (e.g. 5.8.2) without re-compiling
all of your add-on extensions.  You can also safely leave the old version
around in case the new version causes you problems for some reason.
For example, if you want to be sure that your script continues to run
with 5.8.2, simply replace the '#!/usr/local/bin/perl' line at the
top of the script with the particular version you want to run, e.g.
#!/usr/local/bin/perl5.8.2.
d2217 2
a2218 2
Usually, most extensions will probably not need to be recompiled to use
with a newer version of Perl Here is how it is supposed to work.
d2221 2
a2222 2
Suppose you already have version 5.005_03 installed.  The directories
searched by 5.005_03 are
d2224 12
a2235 13
	/usr/local/lib/perl5/5.00503/$archname
	/usr/local/lib/perl5/5.00503
	/usr/local/lib/perl5/site_perl/5.005/$archname
	/usr/local/lib/perl5/site_perl/5.005

Beginning with 5.6.0 the version number in the site libraries are
fully versioned.  Now, suppose you install version 5.6.0.  The directories
searched by version 5.6.0 will be

	/usr/local/lib/perl5/5.6.0/$archname
	/usr/local/lib/perl5/5.6.0
	/usr/local/lib/perl5/site_perl/5.6.0/$archname
	/usr/local/lib/perl5/site_perl/5.6.0
d2237 2
a2238 2
	/usr/local/lib/perl5/site_perl/5.005/$archname
	/usr/local/lib/perl5/site_perl/5.005
d2243 2
a2244 2
directories.  This way, modules installed under 5.005_03 will continue
to be usable by 5.005_03 but will also accessible to 5.6.0.  Further,
d2246 3
a2248 3
present only in 5.6.0.  That new module will get installed into
/usr/local/lib/perl5/site_perl/5.6.0 and will be available to 5.6.0,
but will not interfere with the 5.005_03 version.
d2253 2
a2254 2
Lastly, suppose you now install 5.8.0, which is not binary compatible
with 5.6.0.  The directories searched by 5.8.0 (if you don't change the
d2257 4
a2260 4
	/usr/local/lib/perl5/5.8.0/$archname
	/usr/local/lib/perl5/5.8.0
	/usr/local/lib/perl5/site_perl/5.8.0/$archname
	/usr/local/lib/perl5/site_perl/5.8.0
d2262 1
a2262 1
	/usr/local/lib/perl5/site_perl/5.6.0
d2264 1
a2264 1
	/usr/local/lib/perl5/site_perl/5.005
a2270 12
Assuming the users in your site are still actively using perl 5.6.0 and
5.005 after you installed 5.8.0, you can continue to install add-on
extensions using any of perl 5.8.0, 5.6.0, or 5.005.  The installations
of these different versions remain distinct, but remember that the
newer versions of perl are automatically set up to search the
compatible site libraries of the older ones.  This means that
installing a new XS extension with 5.005 will make it visible to both
5.005 and 5.6.0, but not to 5.8.0.  Installing a pure perl module with
5.005 will make it visible to all three versions.  Later, if you
install the same extension using, say, perl 5.8.0, it will override the
5.005-installed version, but only for perl 5.8.0.

d2283 1
a2283 1
	sh Configure -Dprefix=/opt/perl5.8.2
d2285 1
a2285 1
and adding /opt/perl5.8.2/bin to the shell PATH variable.  Such users
d2290 1
a2290 1
(e.g. 5.8 for all 5.8.x versions), but change directory with
d2298 1
a2298 1
=head2 Upgrading from 5.005 or 5.6 to 5.8.4
d2300 2
a2301 2
B<Perl 5.8.4 is binary incompatible with Perl 5.6.x, 5.005,
and any earlier Perl release.>  Perl modules having binary parts
d2303 3
a2305 3
used with 5.8.4.  If you find you do need to rebuild an extension with
5.8.4, you may safely do so without disturbing the older
installations.  (See L<"Coexistence with earlier versions of perl5">
a2311 68
=head1 Coexistence with perl4

You can safely install perl5 even if you want to keep perl4 around.

By default, the perl5 libraries go into /usr/local/lib/perl5/, so
they don't override the perl4 libraries in /usr/local/lib/perl/.

In your /usr/local/bin directory, you should have a binary named
perl4.036.  That will not be touched by the perl5 installation
process.  Most perl4 scripts should run just fine under perl5.
However, if you have any scripts that require perl4, you can replace
the #! line at the top of them by #!/usr/local/bin/perl4.036 (or
whatever the appropriate pathname is).  See L<perltrap> for
possible problems running perl4 scripts under perl5.

=head1 cd /usr/include; h2ph *.h sys/*.h

Some perl scripts need to be able to obtain information from the
system header files.  This command will convert the most commonly used
header files in /usr/include into files that can be easily interpreted
by perl.  These files will be placed in the architecture-dependent
library ($archlib) directory you specified to Configure.

Note:  Due to differences in the C and perl languages, the conversion
of the header files is not perfect.  You will probably have to
hand-edit some of the converted files to get them to parse correctly.
For example, h2ph breaks spectacularly on type casting and certain
structures.

=head1 installhtml --help

Some sites may wish to make perl documentation available in HTML
format.  The installhtml utility can be used to convert pod
documentation into linked HTML files and install them.

Currently, the supplied ./installhtml script does not make use of the
html Configure variables.  This should be fixed in a future release.

The following command-line is an example of one used to convert
perl documentation:

  ./installhtml                   \
      --podroot=.                 \
      --podpath=lib:ext:pod:vms   \
      --recurse                   \
      --htmldir=/perl/nmanual     \
      --htmlroot=/perl/nmanual    \
      --splithead=pod/perlipc     \
      --splititem=pod/perlfunc    \
      --libpods=perlfunc:perlguts:perlvar:perlrun:perlop \
      --verbose

See the documentation in installhtml for more details.  It can take
many minutes to execute a large installation and you should expect to
see warnings like "no title", "unexpected directive" and "cannot
resolve" as the files are processed. We are aware of these problems
(and would welcome patches for them).

You may find it helpful to run installhtml twice. That should reduce
the number of "cannot resolve" warnings.

=head1 cd pod && make tex && (process the latex files)

Some sites may also wish to make the documentation in the pod/ directory
available in TeX format.  Type

	(cd pod && make tex && <process the latex files>)

d2442 1
a2442 1
   perl -e 'do "prog.pl"; END { print "$_\n" for sort keys %INC }' 
d2453 7
a2466 15

Under UNIX, you can produce a documentation book in postscript form,
along with its table of contents, by going to the pod/ subdirectory and
running (either):

	./roffitall -groff		# If you have GNU groff installed
	./roffitall -psroff		# If you have psroff

This will leave you with two postscript files ready to be printed.
(You may need to fix the roffitall command to use your local troff
set-up.)

Note that you must have performed the installation already before running
the above, since the script collects the installed files to generate
the documentation.
@


1.9
log
@sync in-tree perl with 5.8.6
@
text
@d530 1
a530 1
example by using C<Configure -Accflags=-DUSE_HAS_SEED_EXPLICIT>), in
d669 1
a669 1
by compiling with -DPERL_USE_SAVE_PUTENV. You can force an embedded perl to
d848 11
d1862 37
a1898 27
Starting from version 5.8, Perl has the beginnings of cross-compilation
support.  What is known to work is running Configure in a
cross-compilation environment and building the miniperl executable.
What is known not to work is building the perl executable because
that would require building extensions: Dynaloader statically and
File::Glob dynamically, for extensions one needs MakeMaker and
MakeMaker is not yet cross-compilation aware, and neither is
the main Makefile.

Since the functionality is so lacking, it must be considered
highly experimental.  It is so experimental that it is not even
mentioned during an interactive Configure session, a direct command
line invocation (detailed shortly) is required to access the
functionality.

    NOTE: Perl is routinely built using cross-compilation
    in the EPOC environment, in the WinCE, and in the OpenZaurus
    project, but all those use something slightly different setup
    than what described here.  For the WinCE setup, read the
    wince/README.compile.  For the OpenZaurus setup, read the
    Cross/README.

The one environment where this cross-compilation setup has
successfully been used as of this writing is the Compaq iPAQ running
ARM Linux.  The build host was Intel Linux, the networking setup was
PPP + SSH.  The exact setup details are beyond the scope of this
document, see http://www.handhelds.org/ for more information.
d1900 31
a1930 2
To run Configure in cross-compilation mode the basic switch is
C<-Dusecrosscompile>.
d1999 1
a1999 1
or if you are happy with the defaults
d2006 10
d2499 1
a2499 1
in Solaris is as follows (under $Config{prefix}):
d2502 5
a2506 20
  ./lib/perl5/5.6.1/sun4-solaris-64int/auto/DynaLoader/autosplit.ix
  ./lib/perl5/5.6.1/sun4-solaris-64int/auto/DynaLoader/dl_expandspec.al
  ./lib/perl5/5.6.1/sun4-solaris-64int/auto/DynaLoader/dl_find_symbol_anywhere.al
  ./lib/perl5/5.6.1/sun4-solaris-64int/auto/DynaLoader/dl_findfile.al
  ./lib/perl5/5.6.1/sun4-solaris-64int/auto/File/Glob/Glob.so
  ./lib/perl5/5.6.1/sun4-solaris-64int/auto/File/Glob/autosplit.ix
  ./lib/perl5/5.6.1/sun4-solaris-64int/Config.pm
  ./lib/perl5/5.6.1/sun4-solaris-64int/XSLoader.pm
  ./lib/perl5/5.6.1/sun4-solaris-64int/DynaLoader.pm
  ./lib/perl5/5.6.1/sun4-solaris-64int/CORE/libperl.so
  ./lib/perl5/5.6.1/strict.pm
  ./lib/perl5/5.6.1/warnings.pm
  ./lib/perl5/5.6.1/Carp.pm
  ./lib/perl5/5.6.1/Exporter.pm
  ./lib/perl5/5.6.1/File/Glob.pm
  ./lib/perl5/5.6.1/AutoLoader.pm
  ./lib/perl5/5.6.1/vars.pm
  ./lib/perl5/5.6.1/warnings/register.pm
  ./lib/perl5/5.6.1/Carp/Heavy.pm
  ./lib/perl5/5.6.1/Exporter/Heavy.pm
d2509 1
a2509 1
size about 1.2MB in its i386 version:
d2511 48
d2560 2
a2561 1
  /usr/share/doc/perl/README.Debian
a2562 2
  /usr/share/doc/perl/AUTHORS.gz
  /usr/share/doc/perl/changelog.Debian.gz
d2564 50
a2613 74
  /usr/share/perl/5.6.1/AutoLoader.pm
  /usr/share/perl/5.6.1/Carp.pm
  /usr/share/perl/5.6.1/Carp/Heavy.pm
  /usr/share/perl/5.6.1/Cwd.pm
  /usr/share/perl/5.6.1/Exporter.pm
  /usr/share/perl/5.6.1/Exporter/Heavy.pm
  /usr/share/perl/5.6.1/File/Spec.pm
  /usr/share/perl/5.6.1/File/Spec/Unix.pm
  /usr/share/perl/5.6.1/FileHandle.pm
  /usr/share/perl/5.6.1/Getopt/Long.pm
  /usr/share/perl/5.6.1/IO/Socket/INET.pm
  /usr/share/perl/5.6.1/IO/Socket/UNIX.pm
  /usr/share/perl/5.6.1/IPC/Open2.pm
  /usr/share/perl/5.6.1/IPC/Open3.pm
  /usr/share/perl/5.6.1/SelectSaver.pm
  /usr/share/perl/5.6.1/Symbol.pm
  /usr/share/perl/5.6.1/Text/Tabs.pm
  /usr/share/perl/5.6.1/Text/Wrap.pm
  /usr/share/perl/5.6.1/attributes.pm
  /usr/share/perl/5.6.1/auto/Getopt/Long/GetOptions.al
  /usr/share/perl/5.6.1/auto/Getopt/Long/FindOption.al
  /usr/share/perl/5.6.1/auto/Getopt/Long/Configure.al
  /usr/share/perl/5.6.1/auto/Getopt/Long/config.al
  /usr/share/perl/5.6.1/auto/Getopt/Long/Croak.al
  /usr/share/perl/5.6.1/auto/Getopt/Long/autosplit.ix
  /usr/share/perl/5.6.1/base.pm
  /usr/share/perl/5.6.1/constant.pm
  /usr/share/perl/5.6.1/fields.pm
  /usr/share/perl/5.6.1/integer.pm
  /usr/share/perl/5.6.1/lib.pm
  /usr/share/perl/5.6.1/locale.pm
  /usr/share/perl/5.6.1/overload.pm
  /usr/share/perl/5.6.1/strict.pm
  /usr/share/perl/5.6.1/vars.pm
  /usr/share/perl/5.6.1/warnings.pm
  /usr/share/perl/5.6.1/warnings/register.pm
  /usr/bin/perl
  /usr/lib/perl/5.6.1/Config.pm
  /usr/lib/perl/5.6.1/Data/Dumper.pm
  /usr/lib/perl/5.6.1/DynaLoader.pm
  /usr/lib/perl/5.6.1/Errno.pm
  /usr/lib/perl/5.6.1/Fcntl.pm
  /usr/lib/perl/5.6.1/File/Glob.pm
  /usr/lib/perl/5.6.1/IO.pm
  /usr/lib/perl/5.6.1/IO/File.pm
  /usr/lib/perl/5.6.1/IO/Handle.pm
  /usr/lib/perl/5.6.1/IO/Pipe.pm
  /usr/lib/perl/5.6.1/IO/Seekable.pm
  /usr/lib/perl/5.6.1/IO/Select.pm
  /usr/lib/perl/5.6.1/IO/Socket.pm
  /usr/lib/perl/5.6.1/POSIX.pm
  /usr/lib/perl/5.6.1/Socket.pm
  /usr/lib/perl/5.6.1/XSLoader.pm
  /usr/lib/perl/5.6.1/auto/Data/Dumper/Dumper.so
  /usr/lib/perl/5.6.1/auto/Data/Dumper/Dumper.bs
  /usr/lib/perl/5.6.1/auto/DynaLoader/dl_findfile.al
  /usr/lib/perl/5.6.1/auto/DynaLoader/dl_expandspec.al
  /usr/lib/perl/5.6.1/auto/DynaLoader/dl_find_symbol_anywhere.al
  /usr/lib/perl/5.6.1/auto/DynaLoader/autosplit.ix
  /usr/lib/perl/5.6.1/auto/DynaLoader/DynaLoader.a
  /usr/lib/perl/5.6.1/auto/DynaLoader/extralibs.ld
  /usr/lib/perl/5.6.1/auto/Fcntl/Fcntl.so
  /usr/lib/perl/5.6.1/auto/Fcntl/Fcntl.bs
  /usr/lib/perl/5.6.1/auto/File/Glob/Glob.bs
  /usr/lib/perl/5.6.1/auto/File/Glob/Glob.so
  /usr/lib/perl/5.6.1/auto/File/Glob/autosplit.ix
  /usr/lib/perl/5.6.1/auto/IO/IO.so
  /usr/lib/perl/5.6.1/auto/IO/IO.bs
  /usr/lib/perl/5.6.1/auto/POSIX/POSIX.bs
  /usr/lib/perl/5.6.1/auto/POSIX/POSIX.so
  /usr/lib/perl/5.6.1/auto/POSIX/autosplit.ix
  /usr/lib/perl/5.6.1/auto/POSIX/load_imports.al
  /usr/lib/perl/5.6.1/auto/Socket/Socket.so
  /usr/lib/perl/5.6.1/auto/Socket/Socket.bs
@


1.8
log
@merge 5.8.5 into HEAD
remove now-unused files
crank libperl shared library major number
update Makefile.bsd-wrapper
tweak openbsd hints file for arm and m68k
@
text
@d660 13
d1693 21
a1713 1
=item Missing functions
d1715 5
a1719 5
If you have missing routines, you probably need to add some library or
other, or you need to undefine some feature that Configure thought was
there but is defective or incomplete.  Look through config.h for
likely suspects.  If Configure guessed wrong on a number of functions,
you might have the L<"nm extraction"> problem discussed above.
@


1.7
log
@Resolve conflicts for perl 5.8.2, remove old files, and add OpenBSD-specific scaffolding
@
text
@d1 4
d9 48
d59 9
a67 3
First, make sure you are installing an up-to-date version of Perl.   If
you didn't get your Perl source from CPAN, check the latest version at
<URL:http://www.cpan.org/src/>.
d69 2
a70 2
The basic steps to build and install perl5 on a Unix system
with all the defaults are:
a77 5
	# You may also wish to add these:
	(cd /usr/include && h2ph *.h sys/*.h)
	(installhtml --help)
	(cd pod && make tex  && <process the latex files>)

a79 9
B<NOTE>: starting from the release 5.6.0, Perl uses a version
scheme where even-numbered subreleases (like 5.6 and 5.8) are stable
maintenance releases and odd-numbered subreleases (like 5.7) are
unstable development releases.  Development releases should not be
used in production environments.  Fixes and new features are first
carefully tested in development releases and only if they prove
themselves to be worthy will they be migrated to the maintenance
releases.

d82 1
a82 1
If that's not okay with you, use
d90 4
a93 2
For information on non-Unix systems, see the section on L<"Porting
information"> below.
d95 1
a95 4
If "make install" just says "`install' is up to date" or something
similar, you may be on a case-insensitive filesystems such as Mac's HFS+,
and you should say "make install-all".  (This confusion is brought to you
by the Perl distribution having a file called INSTALL.)
d98 1
a98 1
L<"Reporting Problems"> below.
d114 1
d117 1
a117 1
you should probably at least skim through this entire document before
d120 6
a125 6
If you're building Perl on a non-Unix system, you should also read
the README file specific to your operating system, since this may
provide additional or different instructions for building Perl. There
are also README files for several flavors of Unix systems, such as
Solaris, HP-UX, and AIX; if you have one of those systems, you should
also read the README file specific to that system.
d127 3
a129 6
If there is a hint file for your system (in the hints/ directory) you
should also read that hint file for specific information for your
system.  (Unixware users should use the svr4.sh or the svr5.sh hint file.)
Additional information is in the Porting/ directory.

=head1 WARNING:  This version requires an extra step to build old extensions.
d131 1
a131 4
5.005_53 and later releases do not export unadorned
global symbols anymore.  This means you may need to build rather old
extensions that have not been updated for the current naming convention
with:
d133 1
a133 1
	perl Makefile.PL POLLUTE=1
d135 4
a138 2
Alternatively, you can enable CPP symbol pollution wholesale by
building perl itself with:
d140 1
a140 5
	sh Configure -Accflags=-DPERL_POLLUTE

pod/perl56delta.pod contains more details about this.

=head1 WARNING:  This version is not binary compatible with releases of
d154 6
a159 48
On a related issue, old modules may possibly be affected by the
changes in the Perl language in the current release.  Please see
pod/perldelta.pod (and the earlier pod/perl5Xdelta.pod) for a description of
what's changed.  See your installed copy of the perllocal.pod
file for a (possibly incomplete) list of locally installed modules.
Also see CPAN::autobundle for one way to make a "bundle" of your
currently installed modules.

=head1 WARNING:  This version requires a compiler that supports ANSI C.

Most C compilers are now ANSI-compliant.  However, a few current
computers are delivered with an older C compiler expressly for
rebuilding the system kernel, or for some other historical reason.
Alternatively, you may have an old machine which was shipped before
ANSI compliance became widespread.  Such compilers are not suitable
for building Perl.

If you find that your default C compiler is not ANSI-capable, but you
know that an ANSI-capable compiler is installed on your system, you
can tell F<Configure> to use the correct compiler by means of the
C<-Dcc=> command-line option -- see L<"gcc">.

If do not have an ANSI-capable compiler there are a couple of avenues
open to you:

=over 4

=item *

You may try obtaining GCC, available from GNU mirrors worldwide,
listed at <URL:http://www.gnu.org/order/ftp.html>.  If, rather than
building gcc from source code, you locate a binary version configured
for your platform, be sure that it is compiled for the version of the
operating system that you are using.

=item *

You may purchase a commercial ANSI C compiler from your system
supplier or elsewhere.  (Or your organization may already have
licensed such software -- ask your colleagues to find out how to
access it.)  If there is a README file for your system in the Perl
distribution (for example, F<README.hpux>), it may contain advice on
suitable compilers.

=back

Although Perl can be compiled using a C++ compiler, the Configure script
does not work with some C++ compilers.
d161 1
a161 1
=head1 Space Requirements
d163 1
a163 1
The complete perl5 source tree takes up about 50 MB of disk space.
d167 2
a168 1
value is system-dependent.
d198 3
a200 3
probably check and correct for this, but it doesn't.
Similarly, if you used a shared libperl.so (see below) with version
numbers, you will probably want to adjust them as well.
d229 1
a229 1
At any Configure prompt, you can type  &-d and Configure will use the
d235 1
a235 1
=head2 Altering config.sh variables for C compiler switches etc.
d237 1
a237 6
For most users, all of the Configure defaults are fine.  Configure
also has several convenient options which are described below.
However, if Configure doesn't have an option to do what you want,
you can change Configure variables after the platform hints have been
run, by using Configure's -A switch.  For example, here's how to add
a couple of extra flags to C compiler invocations:
d239 1
a239 17
	sh Configure -Accflags="-DPERL_Y2KWARN -DPERL_POLLUTE_MALLOC"

For more help on Configure switches, run:

	sh Configure -h

=head2 Building Perl outside of the source directory

Sometimes it is desirable to build Perl in a directory different from
where the sources are, for example if you want to keep your sources
read-only, or if you want to share the sources between different binary
architectures.  You can do this (if your file system supports symbolic
links) by

	mkdir /tmp/perl/build/directory
	cd /tmp/perl/build/directory
	sh /path/to/perl/source/Configure -Dmksymlinks ...
d241 1
a241 12
This will create in /tmp/perl/build/directory a tree of symbolic links
pointing to files in /path/to/perl/source.  The original files are left
unaffected.  After Configure has finished you can just say

	make all test

and Perl will be built and tested, all in /tmp/perl/build/directory.

=head2 Common Configure options

Configure supports a number of useful options.  Run B<Configure -h> to
get a listing.  See the Porting/Glossary file for a complete list of
d263 1
a263 1
directory, when Configure prompts you or by using the Configure command
d292 2
a293 2
spaces in arguments to Configure.  For that, you have to look
carefully at config_arg1, config_arg2, etc.)
d295 2
a296 2
By default, Configure will not try to link /usr/bin/perl to
the current version of perl.  You can turn on that behavior by running
a300 2
(Note that before perl 5.8.1, the default behavior was to create
or overwrite /usr/bin/perl even if it already existed.)
d302 2
a303 2
In any case, system administrators are strongly encouraged to
put (symlinks to) perl and its accompanying utilities, such as perldoc,
d307 1
a307 1
=item Overriding an old config.sh
d309 5
a313 2
If you want to use your old config.sh but override some of the items
with command line options, you need to use B<Configure -O>.
d322 1
a322 6
Note: for development releases (odd subreleases, like 5.9, as opposed
to maintenance releases which have even subreleases, like 5.6 and 5.8)
if you want to use Configure -d, you will also need to supply -Dusedevel
to Configure, because the default answer to the question "do you really
want to Configure a development version?" is "no".  The -Dusedevel
skips that sanity check.
d324 1
a324 1
For example for my Solaris system, I usually use
d326 1
a326 1
	sh Configure -Dprefix=/opt/perl -Doptimize='-xpentium -xO4' -des
d328 6
a333 1
=head2 GNU-style configure
d335 1
a335 2
If you prefer the GNU-style configure command line interface, you can
use the supplied configure.gnu command, e.g.
d337 1
a337 1
	CC=gcc ./configure.gnu
d339 1
a339 2
The configure.gnu script emulates a few of the more common configure
options.  Try
d341 1
a341 1
	./configure.gnu --help
d343 4
a346 1
for a listing.
d348 1
a348 2
(The file is called configure.gnu to avoid problems on systems
that would not distinguish the files "Configure" and "configure".)
d350 2
a351 1
See L<Cross-compilation> below for information on cross-compiling.
d353 1
a353 1
=head2 Installation Directories
d355 2
a356 4
The installation directories can all be changed by answering the
appropriate questions in Configure.  For convenience, all the
installation questions are near the beginning of Configure.
Do not include trailing slashes on directory names.
d358 1
a358 4
I highly recommend running Configure interactively to be sure it puts
everything where you want it.  At any point during the Configure
process, you can answer a question with  &-d  and Configure will use
the defaults from then on.  Alternatively, you can
d360 5
a364 1
	grep '^install' config.sh
d366 1
a366 1
after Configure has run to verify the installation paths.
d368 1
a368 5
The defaults are intended to be reasonable and sensible for most
people building from sources.  Those who build and distribute binary
distributions or who export perl to a range of systems will probably
need to alter them.  If you are content to just accept the defaults,
you can safely skip the next section.
d370 1
a370 1
The directories set up by Configure fall into three broad categories.
d372 11
a382 1
=over 4
d384 1
a384 1
=item Directories for the perl distribution
d386 3
a388 5
By default, Configure will use the following directories for 5.8.0.
$version is the full perl version number, including subversion, e.g.
5.8.0 or 5.8.1, and $archname is a string like sun4-sunos,
determined by Configure.  The full definitions of all Configure
variables are in the file Porting/Glossary.
d390 7
a396 10
    Configure variable	Default value
    $prefix		/usr/local
    $bin		$prefix/bin
    $scriptdir		$prefix/bin
    $privlib		$prefix/lib/perl5/$version
    $archlib 		$prefix/lib/perl5/$version/$archname
    $man1dir		$prefix/man/man1
    $man3dir		$prefix/man/man3
    $html1dir		(none)
    $html3dir		(none)
d398 4
a401 5
Actually, Configure recognizes the SVR3-style
/usr/local/man/l_man/man1 directories, if present, and uses those
instead.  Also, if $prefix contains the string "perl", the library
directories are simplified as described below.  For simplicity, only
the common style is shown here.
d403 1
a403 1
=item Directories for site-specific add-on files
d405 3
a407 3
After perl is installed, you may later wish to add modules (e.g. from
CPAN) or scripts.  Configure will set up the following directories to
be used for installing those add-on modules and scripts.
d409 4
a412 10
    Configure variable	Default value
    $siteprefix		$prefix
    $sitebin		$siteprefix/bin
    $sitescript		$siteprefix/bin
    $sitelib		$siteprefix/lib/perl5/site_perl/$version
    $sitearch		$siteprefix/lib/perl5/site_perl/$version/$archname
    $siteman1dir	$siteprefix/man/man1
    $siteman3dir	$siteprefix/man/man3
    $sitehtml1dir	(none)
    $sitehtml3dir	(none)
d414 7
a420 2
By default, ExtUtils::MakeMaker will install architecture-independent
modules into $sitelib and architecture-dependent modules into $sitearch.
d422 6
a427 1
=item Directories for vendor-supplied add-on files
d429 2
a430 3
Lastly, if you are building a binary distribution of perl for
distribution, Configure can optionally set up the following directories
for you to use to distribute add-on modules.
d432 4
a435 11
    Configure variable	Default value
    $vendorprefix	(none)
    (The next ones are set only if vendorprefix is set.)
    $vendorbin		$vendorprefix/bin
    $vendorscript	$vendorprefix/bin
    $vendorlib		$vendorprefix/lib/perl5/vendor_perl/$version
    $vendorarch		$vendorprefix/lib/perl5/vendor_perl/$version/$archname
    $vendorman1dir	$vendorprefix/man/man1
    $vendorman3dir	$vendorprefix/man/man3
    $vendorhtml1dir	(none)
    $vendorhtml3dir	(none)
d437 1
a437 2
These are normally empty, but may be set as needed.  For example,
a vendor might choose the following settings:
d439 4
a442 3
	$prefix		/usr
	$siteprefix	/usr/local
	$vendorprefix	/usr
d444 1
a444 1
This would have the effect of setting the following:
d446 2
a447 20
	$bin		/usr/bin
	$scriptdir	/usr/bin
	$privlib	/usr/lib/perl5/$version
	$archlib 	/usr/lib/perl5/$version/$archname
	$man1dir	/usr/man/man1
	$man3dir	/usr/man/man3

	$sitebin	/usr/local/bin
	$sitescript	/usr/local/bin
	$sitelib	/usr/local/lib/perl5/site_perl/$version
	$sitearch	/usr/local/lib/perl5/site_perl/$version/$archname
	$siteman1dir	/usr/local/man/man1
	$siteman3dir	/usr/local/man/man3

	$vendorbin	/usr/bin
	$vendorscript	/usr/bin
	$vendorlib	/usr/lib/perl5/vendor_perl/$version
	$vendorarch	/usr/lib/perl5/vendor_perl/$version/$archname
	$vendorman1dir	/usr/man/man1
	$vendorman3dir	/usr/man/man3
d449 1
a449 3
Note how in this example, the vendor-supplied directories are in the
/usr hierarchy, while the directories reserved for the end-user are in
the /usr/local hierarchy.
d451 2
a452 6
The entire installed library hierarchy is installed in locations with
version numbers, keeping the installations of different versions distinct.
However, later installations of Perl can still be configured to search the
installed libraries corresponding to compatible earlier versions.
See L<"Coexistence with earlier versions of perl5"> below for more details
on how Perl can be made to search older version directories.
d454 5
a458 5
Of course you may use these directories however you see fit.  For
example, you may wish to use $siteprefix for site-specific files that
are stored locally on your own disk and use $vendorprefix for
site-specific files that are stored elsewhere on your organization's
network.  One way to do that would be something like
d460 4
a463 1
	sh Configure -Dsiteprefix=/usr/local -Dvendorprefix=/usr/share/perl
d465 3
a467 1
=item otherlibdirs
d469 1
a469 5
As a final catch-all, Configure also offers an $otherlibdirs
variable.  This variable contains a colon-separated list of additional
directories to add to @@INC.  By default, it will be empty.
Perl will search these directories (including architecture and
version-specific subdirectories) for add-on modules and extensions.
d471 1
a471 2
For example, if you have a bundle of perl libraries from a previous 
installation, perhaps in a strange place:
d473 8
a480 1
	Configure -Dotherlibdirs=/usr/lib/perl5/site_perl/5.6.1
d482 2
a483 1
=item APPLLIB_EXP
d485 1
a485 3
There is one other way of adding paths to @@INC at perl build time, and
that is by setting the APPLLIB_EXP C pre-processor token to a colon-
separated list of directories, like this
d487 1
a487 1
       sh Configure -Accflags='-DAPPLLIB_EXP=\"/usr/libperl\"'
d489 3
a491 8
The directories defined by APPLLIB_EXP get added to @@INC I<first>,
ahead of any others, and so provide a way to override the standard perl
modules should you, for example, want to distribute fixes without
touching the perl distribution proper.  And, like otherlib dirs,
version and architecture specific subdirectories are also searched, if
present, at run time.  Of course, you can still search other @@INC
directories ahead of those in APPLLIB_EXP by using any of the standard
run-time methods: $PERLLIB, $PERL5LIB, -I, use lib, etc.
d493 6
a498 1
=item Man Pages
d500 1
a500 5
In versions 5.005_57 and earlier, the default was to store module man
pages in a version-specific directory, such as
/usr/local/lib/perl5/$version/man/man3.  The default for 5.005_58 and
after is /usr/local/man/man3 so that most users can find the man pages
without resetting MANPATH.
d502 5
a506 1
You can continue to use the old default from the command line with
d508 26
a533 1
	sh Configure -Dman3dir=/usr/local/lib/perl5/5.8.0/man/man3
d535 9
a543 1
Some users also prefer to use a .3pm suffix.  You can do that with
d545 1
a545 1
	sh Configure -Dman3ext=3pm
d547 4
a550 2
Again, these are just the defaults, and can be changed as you run
Configure.
d552 1
a552 1
=item HTML pages
d554 4
a557 6
Currently, the standard perl installation does not do anything with
HTML documentation, but that may change in the future.  Further, some
add-on modules may wish to install HTML documents.  The html Configure
variables listed above are provided if you wish to specify where such
documents should be placed.  The default is "none", but will likely
eventually change to something useful based on user feedback.
d559 1
a559 1
=back
d561 4
a564 3
Some users prefer to append a "/share" to $privlib and $sitelib
to emphasize that those directories can be shared among different
architectures.
d566 6
a571 3
Note that these are just the defaults.  You can actually structure the
directories any way you like.  They don't even have to be on the same
filesystem.
d573 4
a576 3
Further details about the installation directories, maintenance and
development subversions, and about supporting multiple versions are
discussed in L<"Coexistence with earlier versions of perl5"> below.
d578 4
a581 3
If you specify a prefix that contains the string "perl", then the
library directory structure is slightly simplified.  Instead of
suggesting $prefix/lib/perl5/, Configure will suggest $prefix/lib.
d583 6
a588 2
Thus, for example, if you Configure with
-Dprefix=/opt/perl, then the default library directories for 5.8.0 are
d590 2
a591 5
    Configure variable	Default value
	$privlib	/opt/perl/lib/5.8.0
	$archlib	/opt/perl/lib/5.8.0/$archname
	$sitelib	/opt/perl/lib/site_perl/5.8.0
	$sitearch	/opt/perl/lib/site_perl/5.8.0/$archname
d593 1
a593 1
=head2 Changing the installation directory
d595 1
a595 9
Configure distinguishes between the directory in which perl (and its
associated files) should be installed and the directory in which it
will eventually reside.  For most sites, these two are the same; for
sites that use AFS, this distinction is handled automatically.
However, sites that use software such as depot to manage software
packages, or users building binary packages for distribution may also
wish to install perl into a different directory and use that
management software to move perl to its final destination.  This
section describes how to do that.
d597 8
a604 4
Suppose you want to install perl under the /tmp/perl5 directory.  You
could edit config.sh and change all the install* variables to point to
/tmp/perl5 instead of /usr/local, or you could simply use the
following command line:
d606 1
a606 1
	sh Configure -Dinstallprefix=/tmp/perl5
d608 4
a611 1
(replace /tmp/perl5 by a directory of your choice).
d613 3
a615 4
Beware, though, that if you go to try to install new add-on
modules, they too will get installed in under '/tmp/perl5' if you
follow this example.  The next section shows one way of dealing with
that problem.
d617 2
a618 1
=head2 Creating an installable tar archive
d620 1
a620 28
If you need to install perl on many identical systems, it is
convenient to compile it once and create an archive that can be
installed on multiple systems.  Suppose, for example, that you want to
create an archive that can be installed in /opt/perl.
Here's one way to do that:

    # Set up to install perl into a different directory,
    # e.g. /tmp/perl5 (see previous part).
    sh Configure -Dinstallprefix=/tmp/perl5 -Dprefix=/opt/perl -des
    make
    make test
    make install   # This will install everything into /tmp/perl5.
    cd /tmp/perl5
    # Edit $archlib/Config.pm and $archlib/.packlist to change all the
    # install* variables back to reflect where everything will
    # really be installed.  (That is, change /tmp/perl5 to /opt/perl
    # everywhere in those files.)
    # Check the scripts in $scriptdir to make sure they have the correct
    # #!/wherever/perl line.
    tar cvf ../perl5-archive.tar .
    # Then, on each machine where you want to install perl,
    cd /opt/perl # Or wherever you specified as $prefix
    tar xvf perl5-archive.tar

Alternatively, the DESTDIR variable is honored during C<make install>.
The DESTDIR is automatically prepended to all the installation paths
(and there is no need to edit anything).  With DESTDIR, the above
example can we written as:
d622 1
a622 6
    sh Configure -Dprefix=/opt/perl -des
    make
    make test
    make install DESTDIR=/tmp/perl5
    cd /tmp/perl5/opt/perl
    tar cvf /tmp/perl5-archive.tar .
d624 1
a624 1
=head2 Site-wide Policy settings
d626 3
a628 6
After Configure runs, it stores a number of common site-wide "policy"
answers (such as installation directories and the local perl contact
person) in the Policy.sh file.  If you want to build perl on another
system using the same policy defaults, simply copy the Policy.sh file
to the new system and Configure will use it along with the appropriate
hint file for your system.
d630 4
a633 2
Alternatively, if you wish to change some or all of those policy
answers, you should
d635 15
a649 1
	rm -f Policy.sh
d651 3
a653 1
to ensure that Configure doesn't re-use them.
d655 4
a658 1
Further information is in the Policy_sh.SH file itself.
d660 1
a660 3
If the generated Policy.sh file is unsuitable, you may freely edit it
to contain any valid shell commands.  It will be run just after the
platform-specific hints files.
d662 4
a665 1
=head2 Configure-time Options
d667 4
a670 4
There are several different ways to Configure and build perl for your
system.  For most users, the defaults are sensible and will work.
Some users, however, may wish to further customize perl.  Here are
some of the main things you can change.
d672 1
a672 1
=head2 Threads
d674 1
a674 2
On some platforms, perl can be compiled with
support for threads.  To enable this, run
d676 5
a680 1
	sh Configure -Dusethreads
d682 1
a682 2
Currently, you need to specify -Dusethreads on the Configure command
line so that the hint files can make appropriate adjustments.
d684 1
a684 1
The default is to compile without thread support.
d686 1
a686 4
Perl has two different internal threads implementations.  The current
model (available internally since 5.6, and as a user-level module
since 5.8) is called interpreter-based implementation (ithreads),
with one interpreter per thread, and explicit sharing of data.
d688 5
a692 2
The 5.005 version (5005threads) is considered obsolete, buggy, and
unmaintained.
d694 15
a708 1
By default, Configure selects ithreads if -Dusethreads is specified.
d710 5
a714 2
(You need to also use the PerlIO layer, explained later, if you decide
to use ithreads, to guarantee the good interworking of threads and I/O.)
d716 1
a716 1
However, if you wish, you can select the unsupported old 5005threads behavior
d718 3
a720 1
	sh Configure -Dusethreads -Duse5005threads
d722 10
a731 11
If you decide to use ithreads, the 'threads' module allows their use,
and the 'Thread' module offers an interface to both 5005threads and
ithreads (whichever has been configured).

When building threaded for certain library calls like the getgr*() and
the getpw*() there is a dynamically sized result buffer: the buffer
starts small but Perl will keep growing the buffer until the result fits.
To get a fixed upper limit you will have to recompile Perl with
PERL_REENTRANT_MAXSIZE defined to be the number of bytes you want.
One way to do this is to run Configure with
C<-Accflags=-DPERL_REENTRANT_MAXSIZE=65536>
d733 2
a734 1
=head2 Large file support.
d736 1
a736 3
Since Perl 5.6.0, Perl has supported large files (files larger than
2 gigabytes), and in many common platforms like Linux or Solaris this
support is on by default.
d738 3
a740 7
This is both good and bad. It is good in that you can use large files,
seek(), stat(), and -s them.  It is bad in that if you are interfacing Perl
using some extension, the components you are connecting to must also
be large file aware: if Perl thinks files can be large but the other
parts of the software puzzle do not understand the concept, bad things
will happen.  One popular extension suffering from this ailment is the
Apache extension mod_perl.
d742 13
a754 4
There's also one known limitation with the current large files
implementation: unless you also have 64-bit integers (see the next
section), you cannot use the printf/sprintf non-decimal integer
formats like C<%x> to print filesizes.  You can use C<%d>, though.
d756 2
a757 1
=head2 64 bit support.
d759 3
a761 3
If your platform does not have 64 bits natively, but can simulate them
with compiler flags and/or C<long long> or C<int64_t>, you can build a
perl that uses 64 bits.
d763 1
a763 4
There are actually two modes of 64-bitness: the first one is achieved
using Configure -Duse64bitint and the second one using Configure
-Duse64bitall.  The difference is that the first one is minimal and
the second one maximal.  The first works in more places than the second.
d765 20
a784 7
The C<use64bitint> does only as much as is required to get 64-bit
integers into Perl (this may mean, for example, using "long longs")
while your memory may still be limited to 2 gigabytes (because your
pointers could still be 32-bit).  Note that the name C<64bitint> does
not imply that your C compiler will be using 64-bit C<int>s (it might,
but it doesn't have to): the C<use64bitint> means that you will be
able to have 64 bits wide scalar values.
d786 3
a788 6
The C<use64bitall> goes all the way by attempting to switch also
integers (if it can), longs (and pointers) to being 64-bit.  This may
create an even more binary incompatible Perl than -Duse64bitint: the
resulting executable may not run at all in a 32-bit box, or you may
have to reboot/reconfigure/rebuild your operating system to be 64-bit
aware.
d790 6
a795 2
Natively 64-bit systems like Alpha and Cray need neither -Duse64bitint
nor -Duse64bitall.
d797 5
a801 4
    NOTE: 64-bit support is still experimental on most platforms.
    Existing support only covers the LP64 data model.  In particular, the
    LLP64 data model is not yet supported.  64-bit libraries and system
    APIs on many platforms have not stabilized--your mileage may vary.
d803 1
a803 1
=head2 Long doubles
d805 1
a805 4
In some systems you may be able to use long doubles to enhance the
range and precision of your double precision floating point numbers
(that is, Perl's numbers).  Use Configure -Duselongdouble to enable
this support (if it is available).
d807 5
a811 1
=head2 "more bits"
d813 2
a814 2
You can "Configure -Dusemorebits" to turn on both the 64-bit support
and the long double support.
d816 1
a816 1
=head2 Selecting File IO mechanisms
d818 1
a818 2
Executive summary: in Perl 5.8, you should use the default "PerlIO"
as the IO mechanism unless you have a good reason not to.
d820 3
a822 5
In more detail: previous versions of perl used the standard IO
mechanisms as defined in stdio.h.  Versions 5.003_02 and later of perl
introduced alternate IO mechanisms via a "PerlIO" abstraction, but up
until and including Perl 5.6, the stdio mechanism was still the default
and the only supported mechanism.
d824 1
a824 4
Starting from Perl 5.8, the default mechanism is to use the PerlIO
abstraction, because it allows better control of I/O mechanisms,
instead of having to work with (often, work around) vendors' I/O
implementations.
d826 8
a833 3
This PerlIO abstraction can be (but again, unless you know what you
are doing, should not be) disabled either on the Configure command
line with
d835 1
a835 1
	sh Configure -Uuseperlio
d837 5
a841 1
or interactively at the appropriate Configure prompt.
d843 1
a843 8
With the PerlIO abstraction layer, there is another possibility for
the underlying IO calls, AT&T's "sfio".  This has superior performance
to stdio.h in many cases, and is extensible by the use of "discipline"
modules ("Native" PerlIO has them too).  Sfio currently only builds on
a subset of the UNIX platforms perl supports.  Because the data
structures are completely different from stdio, perl extension modules
or external libraries may not work.  This configuration exists to
allow these issues to be worked on.
d845 1
a845 2
This option requires the 'sfio' package to have been built and installed.
The latest sfio is available from http://www.research.att.com/sw/tools/sfio/
d847 1
a847 1
You select this option by
d849 1
a849 1
	sh Configure -Duseperlio -Dusesfio
d851 1
a851 2
If you have already selected -Duseperlio, and if Configure detects
that you have sfio, then sfio will be the default suggested by
d854 1
a854 6
Note:  On some systems, sfio's iffe configuration script fails to
detect that you have an atexit function (or equivalent).  Apparently,
this is a problem at least for some versions of Linux and SunOS 4.
Configure should detect this problem and warn you about problems with
_exit vs. exit.  If you have this problem, the fix is to go back to
your sfio sources and correct iffe's guess about atexit.
d856 6
a861 76
=head2 Algorithmic Complexity Attacks on Hashes

In Perls 5.8.0 and earlier it was easy to create degenerate hashes.
Processing such hashes would consume large amounts of CPU time,
enabling a "Denial of Service" attack against Perl.  Such hashes may be
a problem for example for mod_perl sites, sites with Perl CGI scripts
and web services, that process data originating from external sources.

In Perl 5.8.1 a security feature was introduced to make it harder
to create such degenerate hashes.

Because of this feature the keys(), values(), and each() functions may
return the hash elements in different order between different runs of
Perl even with the same data.  One can still revert to the old
repeatable order by setting the environment variable PERL_HASH_SEED,
see L<perlrun/PERL_HASH_SEED>.  Another option is to add
-DUSE_HASH_SEED_EXPLICIT to the compilation flags (for example by
using C<Configure -Accflags=-DUSE_HAS_SEED_EXPLICIT>), in which case
one has to explicitly set the PERL_HASH_SEED environment variable to
enable the security feature, or by adding -DNO_HASH_SEED to the compilation
flags to completely disable the randomisation feature.

B<Perl has never guaranteed any ordering of the hash keys>, and the
ordering has already changed several times during the lifetime of
Perl 5.  Also, the ordering of hash keys has always been, and
continues to be, affected by the insertion order.

Note that because of this randomisation for example the Data::Dumper
results will be different between different runs of Perl since
Data::Dumper by default dumps hashes "unordered".  The use of the
Data::Dumper C<Sortkeys> option is recommended.

=head2 SOCKS

Perl can be configured to be 'socksified', that is, to use the SOCKS
TCP/IP proxy protocol library.  SOCKS is used to give applications
access to transport layer network proxies.  Perl supports only SOCKS
Version 5.  You can find more about SOCKS from http://www.socks.nec.com/

=head2 Dynamic Loading

By default, Configure will compile perl to use dynamic loading if
your system supports it.  If you want to force perl to be compiled
statically, you can either choose this when Configure prompts you or
you can use the Configure command line option -Uusedl.

=head2 Building a shared Perl library

Currently, for most systems, the main perl executable is built by
linking the "perl library" libperl.a with perlmain.o, your static
extensions (usually just DynaLoader.a) and various extra libraries,
such as -lm.

On some systems that support dynamic loading, it may be possible to
replace libperl.a with a shared libperl.so.  If you anticipate building
several different perl binaries (e.g. by embedding libperl into
different programs, or by using the optional compiler extension), then
you might wish to build a shared libperl.so so that all your binaries
can share the same library.

The disadvantages are that there may be a significant performance
penalty associated with the shared libperl.so, and that the overall
mechanism is still rather fragile with respect to different versions
and upgrades.

In terms of performance, on my test system (Solaris 2.5_x86) the perl
test suite took roughly 15% longer to run with the shared libperl.so.
Your system and typical applications may well give quite different
results.

The default name for the shared library is typically something like
libperl.so.3.2 (for Perl 5.003_02) or libperl.so.302 or simply
libperl.so.  Configure tries to guess a sensible naming convention
based on your C library name.  Since the library gets installed in a
version-specific architecture-dependent directory, the exact name
isn't very important anyway, as long as your linker is happy.
d863 1
a863 2
For some systems (mostly SVR4), building a shared libperl is required
for dynamic loading to work, and hence is already the default.
d865 3
a867 1
You can elect to build a shared libperl by
d869 3
a871 1
	sh Configure -Duseshrplib
d873 3
a875 8
To build a shared libperl, the environment variable controlling shared
library search (LD_LIBRARY_PATH in most systems, DYLD_LIBRARY_PATH for
NeXTSTEP/OPENSTEP/Darwin, LIBRARY_PATH for BeOS, LD_LIBRARY_PATH/SHLIB_PATH
for HP-UX, LIBPATH for AIX, PATH for Cygwin) must be set up to include
the Perl build directory because that's where the shared libperl will
be created.  Configure arranges makefile to have the correct shared
library search settings.  You can find the name of the environment
variable Perl thinks works in your your system by
d877 3
a879 1
	grep ldlibpthname config.sh
d881 2
a882 4
However, there are some special cases where manually setting the
shared library path might be required.  For example, if you want to run
something like the following with the newly-built but not-yet-installed
./perl:
d884 5
a888 3
        cd t; ./perl misc/failing_test.t
or
        ./perl -Ilib ~/my_mission_critical_test
d890 1
a890 2
then you need to set up the shared library path explicitly.
You can do this with
d892 9
a900 1
   LD_LIBRARY_PATH=`pwd`:$LD_LIBRARY_PATH; export LD_LIBRARY_PATH
d902 4
a905 1
for Bourne-style shells, or
d907 1
a907 1
   setenv LD_LIBRARY_PATH `pwd`
d909 1
a909 3
for Csh-style shells.  (This procedure may also be needed if for some
unexpected reason Configure fails to set up makefile correctly.) (And
again, it may be something other than LD_LIBRARY_PATH for you, see above.)
d911 4
a914 4
You can often recognize failures to build/use a shared libperl from error
messages complaining about a missing libperl.so (or libperl.sl in HP-UX),
for example:
18126:./miniperl: /sbin/loader: Fatal Error: cannot map libperl.so
d916 1
a916 15
There is also an potential problem with the shared perl library if you
want to have more than one "flavor" of the same version of perl (e.g.
with and without -DDEBUGGING).  For example, suppose you build and
install a standard Perl 5.8.0 with a shared library.  Then, suppose you
try to build Perl 5.8.0 with -DDEBUGGING enabled, but everything else
the same, including all the installation directories.  How can you
ensure that your newly built perl will link with your newly built
libperl.so.8 rather with the installed libperl.so.8?  The answer is
that you might not be able to.  The installation directory is encoded
in the perl binary with the LD_RUN_PATH environment variable (or
equivalent ld command-line option).  On Solaris, you can override that
with LD_LIBRARY_PATH; on Linux, you can only override at runtime via
LD_PRELOAD, specifying the exact filename you wish to be used; and on
Digital Unix, you can override LD_LIBRARY_PATH by setting the
_RLD_ROOT environment variable to point to the perl build directory.
d918 7
a924 3
In other words, it is generally not a good idea to try to build a perl
with a shared library if $archlib/CORE/$libperl already exists from a
previous build.
d926 6
a931 4
A good workaround is to specify a different directory for the
architecture-dependent library for your -DDEBUGGING version of perl.
You can do this by changing all the *archlib* variables in config.sh to
point to your new architecture-dependent library.
d933 1
a933 1
=head2 Malloc Issues
d935 6
a940 6
Perl relies heavily on malloc(3) to grow data structures as needed,
so perl's performance can be noticeably affected by the performance of
the malloc function on your system.  The perl source is shipped with a
version of malloc that has been optimized for the typical requests from
perl, so there's a chance that it may be both faster and use less memory
than your system malloc.
d942 2
a943 4
However, if your system already has an excellent malloc, or if you are
experiencing difficulties with extensions that use third-party libraries
that call malloc, then you should probably use your system's malloc.
(Or, you might wish to explore the malloc flags discussed below.)
d945 1
a945 1
=over 4
d947 1
a947 1
=item Using the system malloc
d949 1
a949 1
To build without perl's malloc, you can use the Configure command
d951 3
a953 1
	sh Configure -Uusemymalloc
d955 1
a955 1
or you can answer 'n' at the appropriate interactive Configure prompt.
d957 4
a960 1
=item -DPERL_POLLUTE_MALLOC
d962 2
a963 2
NOTE: This flag is enabled automatically on some platforms if you just
run Configure to accept all the defaults on those platforms.
d965 1
a965 3
Perl's malloc family of functions are normally called Perl_malloc(),
Perl_realloc(), Perl_calloc() and Perl_mfree().
These names do not clash with the system versions of these functions.
d967 2
a968 4
If this flag is enabled, however, Perl's malloc family of functions
will have the same names as the system versions.  This may be required
sometimes if you have libraries that like to free() data that may have
been allocated by Perl_malloc() and vice versa.
d970 1
a970 4
Note that enabling this option may sometimes lead to duplicate symbols
from the linker for malloc et al.  In such cases, the system probably
does not allow its malloc functions to be fully replaced with custom
versions.
d972 5
a976 1
=item -DPERL_DEBUGGING_MSTATS
d978 3
a980 3
This flag enables debugging mstats, which is required to use the
Devel::Peek::mstat() function. You cannot enable this unless you are
using Perl's malloc, so a typical Configure command would be
d982 3
a984 1
       sh Configure -Accflags=-DPERL_DEBUGGING_MSTATS -Dusemymalloc='y'
d986 1
a986 1
to enable this option.
d988 1
a988 1
=back
d1025 2
a1026 3
is always built by default as well.  If you wish to skip POSIX, you can
set the Configure variable useposix=false either in a hint file or from
the Configure command line.
d1047 1
a1047 28
version.  (Configure will suggest this as the default.)

To disable certain extensions so that they are not built, use
the -Dnoextensions=... and -Donlyextensions=... options.  They both
accept a space-separated list of extensions.  The extensions listed
in C<noextensions> are removed from the list of extensions to build,
while the C<onlyextensions> is rather more severe and builds only
the listed extensions.  The latter should be used with extreme caution
since certain extensions are used by many other extensions and modules:
such modules include Fcntl and IO.  The order of processing these
options is first C<only> (if present), then C<no> (if present).

Another, older way to turn off various extensions (which is still good
to know if you have to work with older Perl) exists.  Here are the
Configure command-line variables you can set to turn off various
extensions.  All others are included by default.

    DB_File		i_db
    DynaLoader		(Must always be included as a static extension)
    GDBM_File		i_gdbm
    NDBM_File		i_ndbm
    ODBM_File		i_dbm
    POSIX		useposix
    Opcode		useopcode
    Socket		d_socket
    Threads		use5005threads

Thus to skip the NDBM_File extension, you can use
d1049 9
a1057 4
	sh Configure -Ui_ndbm

Again, this is taken care of automatically if you don't have the ndbm
library.
d1089 1
a1089 1
your database library (.a) files are not in a directory normally
d1094 1
a1094 1
=head2 Examples
d1153 2
a1154 2
Perl interface for DB3 is part of Berkeley DB, but if you want to
compile standard Perl DB/ODBM/NDBM interfaces, you must follow
d1158 1
a1158 1
DB1 compatibility code (needed for DB_File interface) and without
d1160 1
a1160 1
for DB/ODBM/NDBM interfaces, you need to configure DB3 with
d1167 1
a1167 1
    echo '#define DB_DBM_HSEARCH 1' >dbm.h 
d1169 1
a1169 1
    install -m 0644 dbm.h /usr/include/dbm.h 
d1184 79
d1266 1
a1266 1
If none of them help, then see L<"Reporting Problems"> below.
d1436 1
a1436 1
subdirectory.  Especially Porting/Glossary should come in handy.
d1442 1
a1442 1
If you plan to port Perl to a new architecture study carefully the
d1449 1
a1449 1
=head1 Adding extra modules to the build
d1476 1
a1476 1
=head1 suidperl
d1478 2
a1479 2
suidperl is an optional component, which is built or installed by default.
From perlfaq1:
d1494 2
a1495 1
Instead use for example 'sudo': http://www.courtesan.com/sudo/
d1502 1
a1502 1
makefile, not Makefile since the Unix make command reads makefile first.
d1527 1
a1527 1
then see L<"Reporting Problems"> below.
d1539 1
a1539 1
during the building of extensions, you should run
d1568 1
a1568 1
in config.sh.  The problem is usually solved by running fixincludes
d1654 1
a1654 1
Remove them or put them in someplace that isn't in the C preprocessor's 
d1782 4
a1785 2
You are using a non-ANSI-compliant C compiler.  See L<WARNING:  This
version requires a compiler that supports ANSI C.>
d1799 1
a1799 1
you will get a message telling what to do.
d1818 1
a1818 1
Starting from Perl 5.8 Perl has the beginnings of cross-compilation
d2077 7
a2083 2
are not root, you must own the directories in question and you should
ignore any messages about chown not working.
d2102 11
d2197 1
a2197 1
5.004_04) to another similar version (e.g. 5.004_05) without re-compiling
d2201 1
a2201 1
with 5.004_04, simply replace the '#!/usr/local/bin/perl' line at the
d2203 1
a2203 1
#!/usr/local/bin/perl5.00404.
d2205 3
a2207 4
Usually, most extensions will probably not need to be recompiled to
use with a newer version of Perl (the Perl 5.6 to Perl 5.8 transition
being an exception).  Here is how it is supposed to work.  (These
examples assume you accept all the Configure defaults.)
d2284 1
a2284 1
	sh Configure -Dprefix=/opt/perl5.004
d2286 1
a2286 1
and adding /opt/perl5.004/bin to the shell PATH variable.  Such users
d2299 1
a2299 1
=head2 Upgrading from 5.005 or 5.6 to 5.8.0
d2301 1
a2301 1
B<Perl 5.8.0 is binary incompatible with Perl 5.6.1, 5.6.0, 5.005,
d2304 2
a2305 2
used with 5.8.0.  If you find you do need to rebuild an extension with
5.8.0, you may safely do so without disturbing the 5.005 or 5.6.0
d2325 1
a2325 1
whatever the appropriate pathname is).  See pod/perltrap.pod for
a2512 25

=head1 Reporting Problems

If you have difficulty building perl, and none of the advice in this file
helps, and careful reading of the error message and the relevant manual
pages on your system doesn't help either, then you should send a message
to either the comp.lang.perl.misc newsgroup or to perlbug@@perl.org with
an accurate description of your problem.

Please include the output of the ./myconfig shell script that comes with
the distribution.  Alternatively, you can use the perlbug program that
comes with the perl distribution, but you need to have perl compiled
before you can use it.  (If you have not installed it yet, you need to
run C<./perl -Ilib utils/perlbug> instead of a plain C<perlbug>.)

Please try to make your message brief but clear.  Trim out unnecessary
information.  Do not include large files (such as config.sh or a complete
Configure or make log) unless absolutely necessary.  Do not include a
complete transcript of your build session.  Just include the failing
commands, the relevant error messages, and whatever preceding commands
are necessary to give the appropriate context.  Plain text should
usually be sufficient--fancy attachments or encodings may actually
reduce the number of people who read your message.  Your message
will get relayed to over 400 subscribers around the world so please
try to keep it brief but clear.
@


1.6
log
@Resolve conflicts, remove old files, merge local changes
@
text
@d85 1
a85 1
system.  (Unixware users should use the svr4.sh hint file.)
d322 3
a324 1
vendor unless you are sure you know what you are doing.
d326 1
a326 2
By default, Configure will arrange for /usr/bin/perl to be linked to
the current version of perl.  You can turn off that behavior by running
d328 3
a330 1
	Configure -Uinstallusrbinperl
d332 8
a339 1
or by answering 'no' to the appropriate Configure prompt.
d451 4
a454 4
    $siteman1		$siteprefix/man/man1
    $siteman3		$siteprefix/man/man3
    $sitehtml1		(none)
    $sitehtml3		(none)
d472 4
a475 4
    $vendorman1		$vendorprefix/man/man1
    $vendorman3		$vendorprefix/man/man3
    $vendorhtml1	(none)
    $vendorhtml3	(none)
d497 2
a498 2
	$siteman1	/usr/local/man/man1
	$siteman3	/usr/local/man/man3
d504 2
a505 2
	$vendorman1	/usr/man/man1
	$vendorman3	/usr/man/man3
d663 12
d737 8
d861 32
d994 13
a1006 8
with LD_LIBRARY_PATH; on Linux you can't.  On Digital Unix, you can
override LD_LIBRARY_PATH by setting the _RLD_ROOT environment variable
to point to the perl build directory.

The only reliable answer is that you should specify a different
directory for the architecture-dependent library for your -DDEBUGGING
version of perl.  You can do this by changing all the *archlib*
variables in config.sh to point to your new architecture-dependent library.
d1051 10
d1087 1
a1087 1
versions of perl under L<Building a shared libperl.so Perl library>.
d1112 3
d1123 14
a1136 2
In summary, here are the Configure command-line variables you can set
to turn off various extensions.  All others are included by default.
d1477 3
d1529 9
d1657 16
a1672 4
newer version of BIND.  If you can't, you can either link with the
updated resolver library provided with BIND 8.1 or rename
/usr/local/bin/arpa/inet.h during the Perl build and test process to
avoid the problem.
d1760 1
a1760 1
If you get this error message from the lib/ipc_sysv test, your System
d1765 1
a1765 1
=item lib/ipc_sysv........semget: No space left on device
d1799 1
a1799 1
version requires a compiler that supports ANSI C>.
d1811 1
a1811 1
FreeBSD can fail the lib/ipc_sysv.t test if SysV IPC has not been
d1821 7
d1848 11
a1858 8
    in the EPOC environment but the solutions from there
    can't directly be used elsewhere.

The one environment where cross-compilation has successfully been used
as of this writing is the Compaq iPAQ running ARM Linux.  The build
host was Intel Linux, the networking setup was PPP + SSH.  The exact
setup details are beyond the scope of this document, see
http://www.handhelds.org/ for more information.
d2033 4
a2036 1
=item Test failures from lib/ftmp-security saying "system possibly insecure"
d2038 34
a2071 34
Firstly, test failures from the ftmp-security are not necessarily
serious or indicative of a real security threat.  That being said,
they bear investigating.

The tests may fail for the following reasons.   Note that each of the
tests is run both in the building directory and the temporary
directory, as returned by File::Spec->tmpdir().

(1) If the directory the tests are being run is owned by somebody else
than the user running the tests, or root (uid 0).  This failure can
happen if the Perl source code distribution is unpacked in a way that
the user ids in the distribution package are used as-is.  Some tar
programs do this.

(2) If the directory the tests are being run in is writable by group
or by others (remember: with UNIX/POSIX semantics, write access to
a directory means the right to add/remove files in that directory),
and there is no sticky bit set in the directory.  'Sticky bit' is
a feature used in some UNIXes to give extra protection to files: if
the bit is on a directory, no one but the owner (or the root) can remove
that file even if the permissions of the directory would allow file
removal by others.  This failure can happen if the permissions in the
directory simply are a bit too liberal for the tests' liking.  This
may or may not be a real problem: it depends on the permissions policy
used on this particular directory/project/system/site.  This failure
can also happen if the system either doesn't support the sticky bit
(this is the case with many non-UNIX platforms: in principle
File::Temp should know about these platforms and skip the tests), or
if the system supports the sticky bit but for some reason or reasons
it is not being used.  This is for example the case with HP-UX: as of
HP-UX release 11.00, the sticky bit is very much supported, but HP-UX
doesn't use it on its /tmp directory as shipped.  Also, as with the
permissions, some local policy might dictate that the stickiness is
not used.
d2076 3
a2078 1
(2).
d2081 1
a2081 1
about the various security aspects.
@


1.5
log
@merge in perl 5.6.1 with our local changes
@
text
@d27 2
a28 2
B<NOTE>: starting from the release 5.6.0 Perl will use a version
scheme where even-numbered subreleases (like 5.6) are stable
d36 3
a38 2
The above commands will install Perl to /usr/local or /opt, depending
on the platform.  If that's not okay with you, use
d46 7
a52 2
For information on non-Unix systems, see the section on
L<"Porting information"> below.
d78 4
a81 1
provide additional or different instructions for building Perl.
d85 2
a86 3
system.  (Unixware users should use the svr4.sh hint file.)  If
there is a README file for your platform, then you should read
that too.  Additional information is in the Porting/ directory.
d91 2
a92 2
global symbols anymore.  This means you may need to build older
extensions that have not been updated for the new naming convention
d102 1
a102 3
pod/perldelta.pod contains more details about this.

=head1 WARNING:  This version may not be binary compatible with Perl 5.005.
d104 2
a105 2
Using the default Configure options for building perl should get you
a perl that will be binary compatible with the 5.005 release.
d107 3
a109 6
However, if you run Configure with any custom options, such as
-Dusethreads, -Dusemultiplicity, -Dusemymalloc, -Ubincompat5005 etc.,
the resulting perl will not be binary compatible.  Under these
circumstances, if you have dynamically loaded extensions that were
built under perl 5.005, you will need to rebuild and reinstall all
those extensions to use them with 5.6.
d114 1
a114 1
L<"Upgrading from 5.005 to 5.6"> for more details.
d120 1
a120 1
pod/perldelta.pod (and pod/perl500Xdelta.pod) for a description of
d140 2
a141 2
If do not have an ANSI-capable compiler there are several avenues open
to you:
a161 15
=item *

Another alternative may be to use a tool like ansi2knr to convert the
sources back to K&R style, but there is no guarantee this route will get
you anywhere, since the prototypes are not the only ANSI features used
in the Perl sources.  ansi2knr is usually found as part of the freely
available Ghostscript distribution.  Another similar tool is
unprotoize, distributed with GCC.  Since unprotoize requires GCC to
run, you may have to run it on a platform where GCC is available, and move
the sources back to the platform without GCC.

If you succeed in automatically converting the sources to a K&R compatible
form, be sure to email perlbug@@perl.org to let us know the steps you
followed.  This will enable us to officially support this option.

d169 2
a170 2
The complete perl5 source tree takes up about 20 MB of disk space.
After completing make, it takes up roughly 30 MB, though the actual
d172 1
a172 1
directories need something on the order of 20 MB, though again that
d203 1
a203 1
probably check and correct for this, but it doesn't, presently.
d243 1
a243 1
also has several convenient options which are all described below.
d260 2
a261 1
architectures.
a262 3
Starting from Perl 5.6.1 you can do this (if your file system supports
symbolic links) by
	
d309 2
a310 1
for more details.
d348 2
a349 2
Note: for development releases (odd subreleases, like 5.7, as opposed
to maintenance releases which have even subreleases, like 5.6)
a372 2
Cross compiling and compiling in a different directory are not supported.

d376 2
d383 1
a383 3
Further, there are a number of additions to the installation
directories since 5.005, so reusing your old config.sh may not
be sufficient to put everything where you want it.
d388 5
a392 1
the defaults from then on.
d406 1
a406 1
By default, Configure will use the following directories for 5.6.0.
d408 1
a408 1
5.6.0 or 5.6.1, and $archname is a string like sun4-sunos,
a448 4
NOTE:  As of 5.6.0, ExtUtils::MakeMaker will use $sitelib and $sitearch,
but will not use the other site-specific directories.  Volunteers to
fix this are needed.

d470 3
a472 3
	$prefix		/usr/bin
	$siteprefix	/usr/local/bin
	$vendorprefix	/usr/bin
a500 3
NOTE:  As of 5.6.0, ExtUtils::MakeMaker does not use these directories.
Volunteers to fix this are needed.

d524 5
d556 1
a556 1
	sh Configure -Dman3dir=/usr/local/lib/perl5/5.6.0/man/man3
d567 6
a572 7
As of perl5.005_57, the standard perl installation does not do
anything with HTML documentation, but that may change in the future.
Further, some add-on modules may wish to install HTML documents.  The
html Configure variables listed above are provided if you wish to
specify where such documents should be placed.  The default is "none",
but will likely eventually change to something useful based on user
feedback.
d593 1
a593 1
-Dprefix=/opt/perl, then the default library directories for 5.6.0 are
d596 4
a599 4
	$privlib	/opt/perl/lib/5.6.0
	$archlib	/opt/perl/lib/5.6.0/$archname
	$sitelib	/opt/perl/lib/site_perl/5.6.0
	$sitearch	/opt/perl/lib/site_perl/5.6.0/$archname
a674 5
Note:  Since the directory hierarchy for 5.6.0 contains a number of
new vendor* and site* entries, your Policy.sh file will probably not
set them to your desired values.  I encourage you to run Configure
interactively to be sure it puts things where you want them.

d684 2
a685 3
On some platforms, perl5.005 and later can be compiled with
experimental support for threads.  To enable this, read the file
README.threads, and then try:
d694 14
a707 5
As of v5.5.64, perl has two different internal threads implementations.
The 5.005 version (5005threads) and an interpreter-based implementation
(ithreads) with one interpreter per thread.  By default, Configure selects
ithreads if -Dusethreads is specified.  However, you can select the old
5005threads behavior instead by either
d711 22
a732 5
or by
	sh Configure -Dusethreads -Uuseithreads

Eventually (by perl v5.6.0) this internal confusion ought to disappear,
and these options may disappear as well.
d736 3
a738 3
If your platform does not have 64 bits natively, but can simulate them with
compiler flags and/or C<long long> or C<int64_t>, you can build a perl that
uses 64 bits.
d782 13
a794 4
Previous versions of perl used the standard IO mechanisms as defined in
stdio.h.  Versions 5.003_02 and later of perl allow alternate IO
mechanisms via a "PerlIO" abstraction, but the stdio mechanism is still
the default and is the only supported mechanism.
d796 2
a797 1
This PerlIO abstraction can be enabled either on the Configure command
d800 1
a800 1
	sh Configure -Duseperlio
d804 8
a811 15
If you choose to use the PerlIO abstraction layer, there are two
(experimental) possibilities for the underlying IO calls.  These have been
tested to some extent on some platforms, but are not guaranteed to work
everywhere.

=over 4

=item 1.

AT&T's "sfio".  This has superior performance to stdio.h in many
cases, and is extensible by the use of "discipline" modules.  Sfio
currently only builds on a subset of the UNIX platforms perl supports.
Because the data structures are completely different from stdio, perl
extension modules or external libraries may not work.  This
configuration exists to allow these issues to be worked on.
a830 18
=item 2.

Normal stdio IO, but with all IO going through calls to the PerlIO
abstraction layer.  This configuration can be used to check that perl and
extension modules have been correctly converted to use the PerlIO
abstraction.

This configuration should work on all platforms (but might not).

You select this option via:

	sh Configure -Duseperlio -Uusesfio

If you have already selected -Duseperlio, and if Configure does not
detect sfio, then this will be the default suggested by Configure.

=back

d845 1
a845 1
=head2 Building a shared libperl.so Perl library
d885 2
a886 2
NeXTSTEP/OPENSTEP/Darwin, LIBRARY_PATH for BeOS, SHLIB_PATH for
HP-UX, LIBPATH for AIX, PATH for Cygwin) must be set up to include
d889 4
a892 1
library search settings.
d913 2
a914 1
unexpected reason Configure fails to set up makefile correctly.)
d924 2
a925 2
install a standard Perl 5.004 with a shared library.  Then, suppose you
try to build Perl 5.004 with -DDEBUGGING enabled, but everything else
d928 1
a928 1
libperl.so.4 rather with the installed libperl.so.4?  The answer is
d967 11
a977 19
NOTE: This flag is enabled automatically on some platforms if you
asked for binary compatibility with version 5.005, or if you just
run Configure to accept all the defaults on those platforms.  You
can refuse the automatic binary compatibility flags wholesale by
running:

	sh Configure -Ubincompat5005

or by answering 'n' at the appropriate prompt.

Perl's malloc family of functions are called Perl_malloc(),
Perl_realloc(), Perl_calloc() and Perl_mfree().  When this flag is
not enabled, the names do not clash with the system versions of
these functions.

If enabled, Perl's malloc family of functions will have the same
names as the system versions.  This may be sometimes required when you
have libraries that like to free() data that may have been allocated
by Perl_malloc() and vice versa.
d1014 3
a1019 1
B, DynaLoader, Fcntl, IO, and attrs are always built by default.
d1023 1
a1023 3
the Configure command line.  Similarly, the Opcode extension is always
built by default, but you can skip it by setting the Configure variable
useopcode=false either in a hint file for from the command line.
d1044 1
a1044 1
to turn off each extension:
a1045 1
    B			(Always included by default)
a1047 1
    Fcntl		(Always included by default)
a1048 1
    IO			(Always included by default)
a1051 1
    SDBM_File		(Always included by default)
a1054 1
    attrs		(Always included by default)
d1076 1
a1076 1
Finally, if you have dynamic loading (most modern Unix systems do)
d1278 1
a1278 1
=item config.over
d1280 10
a1289 4
You can also supply a shell script config.over to over-ride Configure's
guesses.  It will get loaded up at the very end, just before config.sh
is created.  You have to be careful with this, however, as Configure
does no checking that your changes make sense.
a1326 7
=item Environment variable clashes

Configure uses a CONFIG variable that is reported to cause trouble on
ReliantUnix 5.44.  If your system sets this variable, you can try
unsetting it before you run Configure.  Configure should eventually
be fixed to avoid polluting the namespace of the environment.

d1358 1
a1358 1
Specific information for the OS/2, Plan9, VMS and Win32 ports is in the
d1364 1
a1364 1
http://www.perl.com/CPAN/ports for current information on ports to
d1374 44
a1579 10
=item CRIPPLED_CC

If you still can't compile successfully, try:

	sh Configure -Accflags=-DCRIPPLED_CC

This flag simplifies some complicated expressions for compilers that get
indigestion easily.  (Just because you get no errors doesn't mean it
compiled right!)

d1693 1
a1693 1
UTS may need one or more of -DCRIPPLED_CC, -K or -g, and undef LSTAT.
d1696 1
a1696 1
configured to the kernel.  Perl tries to detect this, though, and
a1698 4
If you get syntax errors on '(', try -DCRIPPLED_CC.

Machines with half-implemented dbm routines will need to #undef I_ODBM

d1707 104
d1835 8
a1842 1
complicated constructs).
d1844 1
d1846 6
a1851 1
comments that apply to your system.
d1880 11
d1923 2
a1924 2
(2) If the directory the test are being run in is writable by group
or by other (remember: with UNIX/POSIX semantics, write access to
d1935 1
a1935 1
(this is the case with many non-UNIX platforms: in principle the
d1940 1
a1940 1
doesn't use it on its /tmp directory as shipped.  Also as with the
d1976 3
a1978 3
This can be useful if you have to install perl as "perl5" (due to an
ancient version in /usr/bin supplied by your vendor, eg).  Without this
the versioned binary would be called "perl55.005".
d2060 3
d2072 4
a2075 3
Most extensions will probably not need to be recompiled to use
with a newer version of perl.   Here is how it is supposed to work.
(These examples assume you accept all the Configure defaults.)
d2108 1
a2108 1
5.6.0 will look for 5.004-era pure perl modules.
d2110 8
a2117 8
Lastly, suppose you now install version 5.6.1, which we'll assume is
binary compatible with 5.6.0 and 5.005.  The directories searched
by 5.6.1 (if you don't change the Configure defaults) will be:

	/usr/local/lib/perl5/5.6.1/$archname
	/usr/local/lib/perl5/5.6.1
	/usr/local/lib/perl5/site_perl/5.6.1/$archname
	/usr/local/lib/perl5/site_perl/5.6.1
a2118 1
	/usr/local/lib/perl5/site_perl/5.6.0/$archname
a2120 1
	/usr/local/lib/perl5/site_perl/5.005/$archname
d2122 1
d2125 3
d2129 10
a2138 8
5.005 after you installed 5.6.1, you can continue to install add-on
extensions using any of perl 5.6.1, 5.6.0, or 5.005.  The installations
of these different versions remain distinct, but remember that the newer
versions of perl are automatically set up to search the site libraries of
the older ones.  This means that installing a new extension with 5.005
will make it visible to all three versions.  Later, if you install the
same extension using, say, perl 5.6.1, it will override the 5.005-installed
version, but only for perl 5.6.1.
d2159 1
a2159 1
(e.g. 5.004 for all 5.004_0x versions), but change directory with
d2167 1
a2167 1
=head2 Upgrading from 5.005 to 5.6.0
d2169 7
a2175 5
Most extensions built and installed with versions of perl
prior to 5.005_50 will not need to be recompiled to be used with
5.6.0.  If you find you do need to rebuild an extension with 5.6.0,
you may safely do so without disturbing the 5.005 installation.
(See L<"Coexistence with earlier versions of perl5"> above.)
d2179 1
a2179 1
perllocal.pod not perllocale.pod for installed module information.
d2249 133
a2445 4

=head1 LAST MODIFIED

$Id: INSTALL,v 1.58 1999/07/23 14:43:00 doughera Exp $
@


1.4
log
@perl-5.6.0 + local changes
@
text
@d9 1
a9 1
<URL:http://www.perl.com/CPAN/src/>.
d27 9
d88 1
a88 1
	
d125 36
a160 2
If you find that your C compiler is not ANSI-capable, try obtaining
GCC, available from GNU mirrors worldwide (e.g. ftp://ftp.gnu.org/pub/gnu).
d171 1
a171 1
form, be sure to email perlbug@@perl.com to let us know the steps you
d174 2
d267 22
d361 8
a368 1
For my Solaris system, I usually use
d538 20
a557 3
directories to add to @@INC.  By default, it will be set to
$prefix/site_perl if Configure detects that you have 5.004-era modules
installed there.  However, you can set it to anything you like.
d728 46
d805 1
a805 1
A (fairly old) version of sfio is in CPAN.
a821 3
There also might be a more recent release of Sfio that fixes your
problem.

d840 7
d1173 33
a1471 30
=item Solaris and SunOS dynamic loading

If you have problems with dynamic loading using gcc on SunOS or
Solaris, and you are using GNU as and GNU ld, you may need to add
-B/bin/ (for SunOS) or -B/usr/ccs/bin/ (for Solaris) to your
$ccflags, $ldflags, and $lddlflags so that the system's versions of as
and ld are used.  Note that the trailing '/' is required.
Alternatively, you can use the GCC_EXEC_PREFIX
environment variable to ensure that Sun's as and ld are used.  Consult
your gcc documentation for further information on the -B option and
the GCC_EXEC_PREFIX variable.

One convenient way to ensure you are not using GNU as and ld is to
invoke Configure with

    sh Configure -Dcc='gcc -B/usr/ccs/bin/'

for Solaris systems.  For a SunOS system, you must use -B/bin/
instead.

Alternatively, recent versions of GNU ld reportedly work if you
include C<-Wl,-export-dynamic> in the ccdlflags variable in
config.sh.

=item ld.so.1: ./perl: fatal: relocation error:

If you get this message on SunOS or Solaris, and you're using gcc,
it's probably the GNU as or GNU ld problem in the previous item
L<"Solaris and SunOS dynamic loading">.

a1479 12
=item dlopen: stub interception failed

The primary cause of the 'dlopen: stub interception failed' message is
that the LD_LIBRARY_PATH environment variable includes a directory
which is a symlink to /usr/lib (such as /lib).

The reason this causes a problem is quite subtle.  The file libdl.so.1.0
actually *only* contains functions which generate 'stub interception
failed' errors!  The runtime linker intercepts links to
"/usr/lib/libdl.so.1.0" and links in internal implementation of those
functions instead.  [Thanks to Tim Bunce for this explanation.]

d1653 17
d1768 45
d1851 2
d1859 3
d1874 5
a1878 2
	pod2man, and
	pod2text
d1882 3
a1884 1
	library files	in $privlib and $archlib specified to
d1886 3
d1897 1
a1897 1
Perl's *.h header files and the libperl.a library are also installed
d1902 17
d2105 1
a2105 1
to either the comp.lang.perl.misc newsgroup or to perlbug@@perl.com with
@


1.3
log
@perl5.005_03 (stock)
@
text
@d7 6
a12 1
The basic steps to build and install perl5 on a Unix system are:
d15 1
a15 1
	sh Configure
d27 9
d39 3
d57 2
a58 1
You should probably at least skim through this entire document before
d67 5
a71 1
system.  (Unixware users should use the svr4.sh hint file.)
d73 4
a76 1
=head1 WARNING:  This version is not binary compatible with Perl 5.004.
d78 23
a100 5
Starting with Perl 5.004_50 there were many deep and far-reaching changes
to the language internals.  If you have dynamically loaded extensions
that you built under perl 5.003 or 5.004, you can continue to use them
with 5.004, but you will need to rebuild and reinstall those extensions
to use them 5.005.  See the discussions below on
d102 1
a102 1
L<"Upgrading from 5.004 to 5.005"> for more details.
d106 1
a106 1
In a related issue, old extensions may possibly be affected by the
d108 5
a112 1
pod/perldelta.pod for a description of what's changed.
d118 1
a118 1
Another alternative may be to use a tool like C<ansi2knr> to convert the
d121 3
a123 3
in the Perl sources.  C<ansi2knr> is usually found as part of the freely
available C<Ghostscript> distribution.  Another similar tool is
C<unprotoize>, distributed with GCC.  Since C<unprotoize> requires GCC to
d131 3
d136 4
a139 4
The complete perl5 source tree takes up about 10 MB of disk space.  The
complete tree after completing make takes roughly 20 MB, though the
actual total is likely to be quite system-dependent.  The installation
directories need something on the order of 10 MB, though again that
d160 1
a160 1
not re-use your old config.sh.  Simply remove it or rename it, e.g.
d162 1
a162 1
	mv config.sh config.sh.old
d174 6
a179 3
Also, be careful to check your architecture name.  Some Linux systems
(such as Debian) use i386, while others may use i486, i586, or i686.
If you pick up a precompiled binary, it might not use the same name.
d184 7
a190 4
If your reason to reuse your old config.sh is to save your
particular installation choices, then you can probably achieve the
same effect by using the new Policy.sh file.  See the section on
L<"Site-wide Policy settings"> below.
d196 7
a202 3
you about.  To accept the default, just press RETURN.   The default
is almost always okay.  At any Configure prompt, you can type  &-d
and Configure will use the defaults from then on.
d207 17
d228 5
a232 1
To compile with gcc, for example, you should run
d239 1
a239 2
If you want to use your old config.sh but override some of the items
with command line options, you need to use B<Configure -O>.
d242 7
a248 4
/usr/local/{bin, lib, man}.  You can specify a different 'prefix' for
the default installation directory, when Configure prompts you or by
using the Configure command line option -Dprefix='/some/directory',
e.g.
d252 11
a262 8
If your prefix contains the string "perl", then the directories
are simplified.  For example, if you use prefix=/opt/perl,
then Configure will suggest /opt/perl/lib instead of
/opt/perl/lib/perl5/.

NOTE:  You must not specify an installation directory that is below
your perl source directory.  If you do, installperl will attempt
infinite recursion.
d264 2
a265 2
It may seem obvious to say, but Perl is useful only when users can
easily find it.  It's often a good idea to have both /usr/bin/perl and
d267 11
a277 2
careful, however, of overwriting a version of perl supplied by your
vendor.  In any case, system administrators are strongly encouraged to
d282 4
a285 2
You can use "Configure -Uinstallusrbinperl" which causes installperl
to skip installing perl also as /usr/bin/perl.
d287 1
a287 4
By default, Configure will compile perl to use dynamic loading if
your system supports it.  If you want to force perl to be compiled
statically, you can either choose this when Configure prompts you or
you can use the Configure command line option -Uusedl.
d312 1
a312 1
Cross compiling is not supported.
d317 1
a317 1
=head2 Extensions
d319 6
a324 10
By default, Configure will offer to build every extension which appears
to be supported.  For example, Configure will offer to build GDBM_File
only if it is able to find the gdbm library.  (See examples below.)
B, DynaLoader, Fcntl, IO, and attrs are always built by default.
Configure does not contain code to test for POSIX compliance, so POSIX
is always built by default as well.  If you wish to skip POSIX, you can
set the Configure variable useposix=false either in a hint file or from
the Configure command line.  Similarly, the Opcode extension is always
built by default, but you can skip it by setting the Configure variable
useopcode=false either in a hint file for from the command line.
d326 4
a329 7
You can learn more about each of these extensions by consulting the
documentation in the individual .pm modules, located under the
ext/ subdirectory.

Even if you do not have dynamic loading, you must still build the
DynaLoader extension; you should just build the stub dl_none.xs
version.  (Configure will suggest this as the default.)
d331 5
a335 2
In summary, here are the Configure command-line variables you can set
to turn off each extension:
d337 1
a337 57
    B			(Always included by default)
    DB_File		i_db
    DynaLoader		(Must always be included as a static extension)
    Fcntl		(Always included by default)
    GDBM_File		i_gdbm
    IO			(Always included by default)
    NDBM_File		i_ndbm
    ODBM_File		i_dbm
    POSIX		useposix
    SDBM_File		(Always included by default)
    Opcode		useopcode
    Socket		d_socket
    Threads		usethreads
    attrs		(Always included by default)

Thus to skip the NDBM_File extension, you can use

	sh Configure -Ui_ndbm

Again, this is taken care of automatically if you don't have the ndbm
library.

Of course, you may always run Configure interactively and select only
the extensions you want.

Note:  The DB_File module will only work with version 1.x of Berkeley
DB or newer releases of version 2.  Configure will automatically detect
this for you and refuse to try to build DB_File with version 2.

If you re-use your old config.sh but change your system (e.g. by
adding libgdbm) Configure will still offer your old choices of extensions
for the default answer, but it will also point out the discrepancy to
you.

Finally, if you have dynamic loading (most modern Unix systems do)
remember that these extensions do not increase the size of your perl
executable, nor do they impact start-up time, so you probably might as
well build all the ones that will work on your system.

=head2 Including locally-installed libraries

Perl5 comes with interfaces to number of database extensions, including
dbm, ndbm, gdbm, and Berkeley db.  For each extension, if
Configure can find the appropriate header files and libraries, it will
automatically include that extension.  The gdbm and db libraries
are not included with perl.  See the library documentation for
how to obtain the libraries.

Note:  If your database header (.h) files are not in a
directory normally searched by your C compiler, then you will need to
include the appropriate -I/your/directory option when prompted by
Configure.  If your database library (.a) files are not in a directory
normally searched by your C compiler and linker, then you will need to
include the appropriate -L/your/directory option when prompted by
Configure.  See the examples below.

=head2 Examples
d341 1
a341 1
=item gdbm in /usr/local
d343 16
a358 5
Suppose you have gdbm and want Configure to find it and build the
GDBM_File extension.  This examples assumes you have gdbm.h
installed in /usr/local/include/gdbm.h and libgdbm.a installed in
/usr/local/lib/libgdbm.a.  Configure should figure all the
necessary steps out automatically.
d360 115
a474 2
Specifically, when Configure prompts you for flags for
your C compiler, you should include  -I/usr/local/include.
d476 1
a476 2
When Configure prompts you for linker flags, you should include
-L/usr/local/lib.
d478 1
a478 3
If you are using dynamic loading, then when Configure prompts you for
linker flags for dynamic loading, you should again include
-L/usr/local/lib.
d480 1
a480 3
Again, this should all happen automatically.  If you want to accept the
defaults for all the questions and have Configure print out only terse
messages, then you can just run
d482 1
a482 1
	sh Configure -des
d484 2
a485 1
and Configure should include the GDBM_File extension automatically.
d487 1
a487 2
This should actually work if you have gdbm installed in any of
(/usr/local, /opt/local, /usr/gnu, /opt/gnu, /usr/GNU, or /opt/GNU).
d489 7
a495 28
=item gdbm in /usr/you

Suppose you have gdbm installed in some place other than /usr/local/,
but you still want Configure to find it.  To be specific, assume you
have /usr/you/include/gdbm.h and /usr/you/lib/libgdbm.a.  You
still have to add -I/usr/you/include to cc flags, but you have to take
an extra step to help Configure find libgdbm.a.  Specifically, when
Configure prompts you for library directories, you have to add
/usr/you/lib to the list.

It is possible to specify this from the command line too (all on one
line):

	sh Configure -des \
		-Dlocincpth="/usr/you/include" \
		-Dloclibpth="/usr/you/lib"

locincpth is a space-separated list of include directories to search.
Configure will automatically add the appropriate -I directives.

loclibpth is a space-separated list of library directories to search.
Configure will automatically add the appropriate -L directives.  If
you have some libraries under /usr/local/ and others under
/usr/you, then you have to include both, namely

	sh Configure -des \
		-Dlocincpth="/usr/you/include /usr/local/include" \
		-Dloclibpth="/usr/you/lib /usr/local/lib"
a498 20
=head2 Installation Directories

The installation directories can all be changed by answering the
appropriate questions in Configure.  For convenience, all the
installation questions are near the beginning of Configure.

I highly recommend running Configure interactively to be sure it puts
everything where you want it.  At any point during the Configure
process, you can answer a question with  &-d  and Configure
will use the defaults from then on.

By default, Configure will use the following directories for library files
for 5.005 (archname is a string like sun4-sunos, determined by Configure).

    Configure variable		Default value
	$archlib 	/usr/local/lib/perl5/5.005/archname
	$privlib	/usr/local/lib/perl5/5.005
	$sitearch	/usr/local/lib/perl5/site_perl/5.005/archname
	$sitelib	/usr/local/lib/perl5/site_perl/5.005

d503 3
a505 1
By default, Configure will use the following directories for manual pages:
d507 3
a509 23
    Configure variable		Default value
	$man1dir	/usr/local/man/man1
	$man3dir	/usr/local/lib/perl5/man/man3

(Actually, Configure recognizes the SVR3-style
/usr/local/man/l_man/man1 directories, if present, and uses those
instead.)

The module man pages are stuck in that strange spot so that
they don't collide with other man pages stored in /usr/local/man/man3,
and so that Perl's man pages don't hide system man pages.  On some
systems, B<man less> would end up calling up Perl's less.pm module man
page, rather than the less program.  (This default location will likely
change to /usr/local/man/man3 in a future release of perl.)

Note:  Many users prefer to store the module man pages in
/usr/local/man/man3.  You can do this from the command line with

	sh Configure -Dman3dir=/usr/local/man/man3

Some users also prefer to use a .3pm suffix.  You can do that with

	sh Configure -Dman3ext=3pm
d512 2
a513 23
directory structure is simplified.  For example, if you Configure with
-Dprefix=/opt/perl, then the defaults for 5.005 are

    Configure variable		Default value
	$archlib	/opt/perl/lib/5.005/archname
	$privlib	/opt/perl/lib/5.005
	$sitearch	/opt/perl/lib/site_perl/5.005/archname
	$sitelib	/opt/perl/lib/site_perl/5.005

	$man1dir	/opt/perl/man/man1
	$man3dir	/opt/perl/man/man3

The perl executable will search the libraries in the order given
above.

The directories under site_perl are empty, but are intended to be used
for installing local or site-wide extensions.  Perl will automatically
look in these directories.

In order to support using things like #!/usr/local/bin/perl5.005 after
a later version is released, architecture-dependent libraries are
stored in a version-specific directory, such as
/usr/local/lib/perl5/archname/5.005/.
d515 2
a516 3
Further details about the installation directories, maintenance and
development subversions, and about supporting multiple versions are
discussed in L<"Coexistence with earlier versions of perl5"> below.
d518 5
a522 2
Again, these are just the defaults, and can be changed as you run
Configure.
d531 4
a534 4
packages may also wish to install perl into a different directory and
use that management software to move perl to its final destination.
This section describes how to do this.  Someday, Configure may support
an option -Dinstallprefix=/foo to simplify this.
d537 3
a539 16
can edit config.sh and change all the install* variables to point to
/tmp/perl5 instead of /usr/local/wherever.  Or, you can automate this
process by placing the following lines in a file config.over before you
run Configure (replace /tmp/perl5 by a directory of your choice):

    installprefix=/tmp/perl5
    test -d $installprefix || mkdir $installprefix
    test -d $installprefix/bin || mkdir $installprefix/bin
    installarchlib=`echo $installarchlib | sed "s!$prefix!$installprefix!"`
    installbin=`echo $installbin | sed "s!$prefix!$installprefix!"`
    installman1dir=`echo $installman1dir | sed "s!$prefix!$installprefix!"`
    installman3dir=`echo $installman3dir | sed "s!$prefix!$installprefix!"`
    installprivlib=`echo $installprivlib | sed "s!$prefix!$installprefix!"`
    installscript=`echo $installscript | sed "s!$prefix!$installprefix!"`
    installsitelib=`echo $installsitelib | sed "s!$prefix!$installprefix!"`
    installsitearch=`echo $installsitearch | sed "s!$prefix!$installprefix!"`
d541 1
a541 1
Then, you can Configure and install in the usual way:
d543 1
a543 4
    sh Configure -des
    make
    make test
    make install
d546 1
a546 1
extensions, they too will get installed in under '/tmp/perl5' if you
d558 1
a558 1
    # Set up config.over to install perl into a different directory,
d560 1
a560 1
    sh Configure -Dprefix=/opt/perl -des
d594 9
d612 3
a614 3
On some platforms, perl5.005 can be compiled with experimental support
for threads.  To enable this, read the file README.threads, and then
try:
d623 14
d678 6
a683 24
Note:  On some systems, sfio's iffe configuration script fails
to detect that you have an atexit function (or equivalent).
Apparently, this is a problem at least for some versions of Linux
and SunOS 4.

You can test if you have this problem by trying the following shell
script.  (You may have to add some extra cflags and libraries.  A
portable version of this may eventually make its way into Configure.)

    #!/bin/sh
    cat > try.c <<'EOCP'
    #include <stdio.h>
    main() { printf("42\n"); }
    EOCP
    cc -o try try.c -lsfio
    val=`./try`
    if test X$val = X42; then
	echo "Your sfio looks ok"
    else
	echo "Your sfio has the exit problem."
    fi

If you have this problem, the fix is to go back to your sfio sources
and correct iffe's guess about atexit.
d706 7
d753 2
a754 1
NeXTSTEP/OPENSTEP, LIBRARY_PATH for BeOS) must be set up to include
d756 1
a756 1
be created.   Configure arranges Makefile to have the correct shared
d778 1
a778 1
unexpected reason Configure fails to set up Makefile correctly.)
d803 1
a803 2
variables in config.sh, namely archlib, archlib_exp, and
installarchlib, to point to your new architecture-dependent library.
d807 15
a821 19
Perl relies heavily on malloc(3) to grow data structures as needed, so
perl's performance can be noticeably affected by the performance of
the malloc function on your system.

The perl source is shipped with a version of malloc that is very fast but
somewhat wasteful of space.  On the other hand, your system's malloc
function may be a bit slower but also a bit more frugal.  However,
as of 5.004_68, perl's malloc has been optimized for the typical
requests from perl, so there's a chance that it may be both faster and
use less memory.

For many uses, speed is probably the most important consideration, so
the default behavior (for most systems) is to use the malloc supplied
with perl.  However, if you will be running very large applications
(e.g. Tk or PDL) or if your system already has an excellent malloc, or
if you are experiencing difficulties with extensions that use
third-party libraries that call malloc, then you might wish to use
your system's malloc.  (Or, you might wish to explore the malloc flags
discussed below.)
d829 1
a829 14
=head2 Malloc Performance Flags

If you are using Perl's malloc, you may add one or more of the following
items to your ccflags config.sh variable to change its behavior.  You can
find out more about these and other flags by reading the commentary near
the top of the malloc.c source.  The defaults should be fine for
nearly everyone.

=over 4

=item -DNO_FANCY_MALLOC

Undefined by default.  Defining it returns malloc to the version used
in Perl 5.004.
d831 24
a854 4
=item -DPLAIN_MALLOC

Undefined by default.  Defining it in addition to NO_FANCY_MALLOC returns
malloc to the version used in Perl version 5.000.
d869 8
a876 8
cc -g2.  Check your man pages for cc(1) and also any hint file for your
system.)  Second, it will add -DDEBUGGING to your ccflags variable in
config.sh so that you can use B<perl -D> to access perl's internal
state.  (Note: Configure will only add -DDEBUGGING by
default if you are not reusing your old config.sh.  If you want to
reuse your old config.sh, then you can just edit it and change the
optimize and ccflags variables by hand and then propagate your changes
as shown in L<"Propagating your changes to config.sh"> below.)
d884 116
a999 1
=head2 Other Compiler Flags
d1001 28
a1028 4
For most users, all of the Configure defaults are fine.  However,
you can change a number of factors in the way perl is built
by adding appropriate -D directives to your ccflags variable in
config.sh.
d1030 1
a1030 3
You should also run Configure interactively to verify that a hint file
doesn't inadvertently override your ccflags setting.  (Hints files
shouldn't do that, but some might.)
d1034 3
d1127 1
a1127 2
does no checking that your changes make sense.  See the section on
L<"Changing the installation directory"> for an example.
d1159 3
a1161 2
If you don't have sh, you'll have to copy the sample file Porting/config_H
to config.h and edit the config.h to reflect your system's peculiarities.
d1174 1
a1174 1
In Digital UNIX/Tru64 UNIX Configure might abort with
d1206 1
a1206 1
subdirectory.
d1212 5
d1235 2
d1239 2
a1240 4
the relevant manual pages on your system doesn't help, you can
send a message to either the comp.lang.perl.misc newsgroup or to
perlbug@@perl.com with an accurate description of your problem.
See L<"Reporting Problems"> below.
a1275 5
=item malloc duplicates

If you get duplicates upon linking for malloc et al, add -DEMBEDMYMALLOC
to your ccflags variable in config.sh.

d1401 8
d1425 7
a1431 4
If you still can't compile successfully, try adding a -DCRIPPLED_CC
flag.  (Just because you get no errors doesn't mean it compiled right!)
This simplifies some complicated expressions for compilers that get
indigestion easily.
d1544 1
a1544 1
 
d1549 3
a1551 4
This will run the regression tests on the perl you just made (you
should run plain 'make' before 'make test' otherwise you won't have a
complete build).  If 'make test' doesn't say "All tests successful"
then something went wrong.  See the file t/README in the t subdirectory.
d1607 2
a1608 4
Specifically, in perl5.004_64, tests 74 and 78 have been reported to
fail on some systems.  On my SparcStation IPC with 8 MB of RAM, test 78
will fail if the system is running any other significant tasks at the
same time.
d1638 9
d1678 1
d1682 3
a1684 4
	man pages	in the location specified to Configure, usually
			something like /usr/local/man/man1.
	module		in the location specified to Configure, usually
	man pages	under /usr/local/lib/perl5/man/man3.
d1687 2
a1688 8
Installperl will also create the library directories $siteperl and
$sitearch listed in config.sh.  Usually, these are something like

	/usr/local/lib/perl5/site_perl/5.005
	/usr/local/lib/perl5/site_perl/5.005/archname

where archname is something like sun4-sunos.  These directories
will be used for installing extensions.
d1691 1
a1691 1
under $archlib so that any user may later build new extensions, run the
a1696 3
WARNING:  The upgrade from 5.004_0x to 5.005 is going to be a bit
tricky.  See L<"Upgrading from 5.004 to 5.005">  below.

d1710 2
a1711 1
The directories searched by version 5.005 will be
d1713 59
a1771 34
    Configure variable		Default value
	$archlib 	/usr/local/lib/perl5/5.005/archname
	$privlib	/usr/local/lib/perl5/5.005
	$sitearch	/usr/local/lib/perl5/site_perl/5.005/archname
	$sitelib	/usr/local/lib/perl5/site_perl/5.005

while the directories searched by version 5.005_01 will be

	$archlib 	/usr/local/lib/perl5/5.00501/archname
	$privlib	/usr/local/lib/perl5/5.00501
	$sitearch	/usr/local/lib/perl5/site_perl/5.005/archname
	$sitelib	/usr/local/lib/perl5/site_perl/5.005

When you install an add-on extension, it gets installed into $sitelib (or
$sitearch if it is architecture-specific).  This directory deliberately
does NOT include the sub-version number (01) so that both 5.005 and
5.005_01 can use the extension.  Only when a perl version changes to
break backwards compatibility will the default suggestions for the
$sitearch and $sitelib version numbers be increased.

However, if you do run into problems, and you want to continue to use the
old version of perl along with your extension, move those extension files
to the appropriate version directory, such as $privlib (or $archlib).
(The extension's .packlist file lists the files installed with that
extension.  For the Tk extension, for example, the list of files installed
is in $sitearch/auto/Tk/.packlist.)  Then use your newer version of perl
to rebuild and re-install the extension into $sitelib.  This way, Perl
5.005 will find your files in the 5.005 directory, and newer versions
of perl will find your newer extension in the $sitelib directory.
(This is also why perl searches the site-specific libraries last.)

Alternatively, if you are willing to reinstall all your extensions
every time you upgrade perl, then you can include the subversion
number in $sitearch and $sitelib when you run Configure.
d1776 4
a1779 2
separate directories.  One convenient way to do this is by
using a separate prefix for each version, such as
d1796 1
a1796 1
=head2 Upgrading from 5.004 to 5.005
d1798 9
a1806 6
Extensions built and installed with versions of perl prior to 5.004_50
will need to be recompiled to be used with 5.004_50 and later.  You will,
however, be able to continue using 5.004 even after you install 5.005.
The 5.004 binary will still be able to find the extensions built under
5.004; the 5.005 binary will look in the new $sitearch and $sitelib
directories, and will not find them.
d1819 3
a1821 3
the #! line at the top of them by #!/usr/local/bin/perl4.036
(or whatever the appropriate pathname is).  See pod/perltrap.pod
for possible problems running perl4 scripts under perl5.
d1825 2
a1826 2
Some perl scripts need to be able to obtain information from
the system header files.  This command will convert the most commonly used
d1828 2
a1829 2
by perl.  These files will be placed in the architecture-dependent library
($archlib) directory you specified to Configure.
d1831 5
a1835 5
Note:  Due to differences in the C and perl languages, the
conversion of the header files is not perfect.  You will probably have
to hand-edit some of the converted files to get them to parse
correctly.  For example, h2ph breaks spectacularly on type casting and
certain structures.
d1843 3
d1890 10
a1899 2
You might also find helpful information in the Porting directory of the
perl distribution.
d1936 1
a1936 2
the same terms as perl itself.

d1938 2
a1939 2
a larger package) please do modify these installation instructions and
the contact information to match your distribution.
d1943 1
a1943 1
$Id: INSTALL,v 1.42 1998/07/15 18:04:44 doughera Released $
@


1.2
log
@perl 5.004_04
@
text
@d9 1
a9 1
	rm -f config.sh
d51 33
d86 2
a87 2
The complete perl5 source tree takes up about 7 MB of disk space.  The
complete tree after completing make takes roughly 15 MB, though the
d89 1
a89 1
directories need something on the order of 7 MB, though again that
d97 4
d103 8
a110 5
The results of a Configure run are stored in the config.sh file.  If
you are upgrading from a previous version of perl, or if you change
systems or compilers or make other significant changes, or if you are
experiencing difficulties building perl, you should probably not
re-use your old config.sh.  Simply remove it or rename it, e.g.
d125 2
a126 2
(such as Debian) use i386, while others may use i486 or i586.  If you
pick up a precompiled binary, it might not use the same name.
d131 5
d141 1
a141 1
is almost always ok.  At any Configure prompt, you can type  &-d
d178 12
d207 1
a207 1
use the supplied configure command, e.g.
d209 1
a209 1
	CC=gcc ./configure
d211 1
a211 1
The configure script emulates a few of the more common configure
d214 1
a214 1
	./configure --help
d220 2
a221 3
For systems that do not distinguish the files "Configure" and
"configure", Perl includes a copy of configure named
configure.gnu.
d228 6
a233 6
DynaLoader, Fcntl, and IO are always built by default.  Configure does
not contain code to test for POSIX compliance, so POSIX is always built
by default as well.  If you wish to skip POSIX, you can set the
Configure variable useposix=false either in a hint file or from the
Configure command line.  Similarly, the Opcode extension is always built
by default, but you can skip it by setting the Configure variable
d247 1
d259 2
d272 8
a279 4
Note:  The DB_File module will only work with version 1.x of
Berkeley DB.  Once Berkeley DB version 2 is released, DB_File will be
upgraded to work with it.  Configure will automatically detect this
for you and refuse to try to build DB_File with version 2.
d339 1
a339 1
but you still want Configure to find it.  To be specific, assume  you
d378 2
a379 8
By default, Configure uses the following directories for
library files  (archname is a string like sun4-sunos, determined
by Configure)

	/usr/local/lib/perl5/archname/5.004
	/usr/local/lib/perl5/
	/usr/local/lib/perl5/site_perl/archname
	/usr/local/lib/perl5/site_perl
d381 15
a395 4
and the following directories for manual pages:

	/usr/local/man/man1
	/usr/local/lib/perl5/man/man3
d419 1
a419 1
-Dprefix=/opt/perl, then the defaults are
d421 5
a425 4
	/opt/perl/lib/archname/5.004
	/opt/perl/lib
	/opt/perl/lib/site_perl/archname
	/opt/perl/lib/site_perl
d427 2
a428 2
	/opt/perl/man/man1
	/opt/perl/man/man3
d433 3
a435 4
The  directories site_perl and site_perl/archname are empty, but are
intended to be used for installing local or site-wide extensions.  Perl
will automatically look in these directories.  Previously, most sites
just put their local extensions in with the standard distribution.
d437 1
a437 1
In order to support using things like #!/usr/local/bin/perl5.004 after
d440 5
a444 5
/usr/local/lib/perl5/archname/5.004/.  In Perl 5.000 and 5.001, these
files were just stored in /usr/local/lib/perl5/archname/.  If you will
not be using 5.001 binaries, you can delete the standard extensions from
the /usr/local/lib/perl5/archname/ directory.  Locally-added extensions
can be moved to the site_perl and site_perl/archname directories.
d486 5
d495 3
a497 1
installed on multiple systems.  Here's one way to do that:
d501 1
a501 1
    sh Configure -des
d504 1
a504 1
    make install
d506 1
a506 1
    # Edit lib/<archname>/<version>/Config.pm to change all the
d508 4
a511 1
    # really be installed.
d514 1
a514 1
    cd /usr/local  # Or wherever you specified as $prefix
d517 18
d542 1
a542 1
=head2 Binary Compatibility With Earlier Versions of Perl 5
d544 3
a546 24
If you have dynamically loaded extensions that you built under
perl 5.003 and that you wish to continue to use with perl 5.004, then you
need to ensure that 5.004 remains binary compatible with 5.003.

Starting with Perl 5.003, all functions in the Perl C source code have
been protected by default by the prefix Perl_ (or perl_) so that you
may link with third-party libraries without fear of namespace
collisions.  This change broke compatibility with version 5.002, so
installing 5.003 or 5.004 over 5.002 or earlier will force you to
re-build and install all of your dynamically loadable extensions.
(The standard extensions supplied with Perl are handled
automatically).  You can turn off this namespace protection by adding
-DNO_EMBED to your ccflags variable in config.sh.

Perl 5.003's namespace protection was incomplete, but this has
been fixed in 5.004.  However, some sites may need to maintain
complete binary compatibility with Perl 5.003.  If you are building
Perl for such a site, then when Configure asks if you want binary
compatibility, answer "y".

On the other hand, if you are embedding perl into another application
and want the maximum namespace protection, then you probably ought to
answer "n" when Configure asks if you want binary compatibility, or
disable it from the Configure command line with
d548 1
a548 1
	sh Configure -Ud_bincompat3
d550 2
a551 2
The default answer of "y" to maintain binary compatibility is probably
appropriate for almost everyone.
d553 1
a553 3
In a related issue, old extensions may possibly be affected by the
changes in the Perl language in the current release.  Please see
pod/perldelta.pod for a description of what's changed.
d586 1
a586 2
A (fairly old) version of sfio is in CPAN, and work is in progress to make
it more easily buildable by adding Configure support.
d619 1
a619 2
and correct iffe's guess about atexit (or whatever is appropriate for
your platform.)
d680 18
a697 3
To actually build perl, you must add the current working directory to your
LD_LIBRARY_PATH environment variable before running make.  You can do
this with
d705 7
a711 3
for Csh-style shells.  You *MUST* do this before running make.
Folks running NeXT OPENSTEP must substitute DYLD_LIBRARY_PATH for
LD_LIBRARY_PATH above.
d740 6
a745 3
The perl source is shipped with a version of malloc that is very fast
but somewhat wasteful of space.  On the other hand, your system's
malloc() function is probably a bit slower but also a bit more frugal.
d753 2
a754 2
your system's malloc.  (Or, you might wish to explore the experimental
malloc flags discussed below.)
d764 5
a768 5
If you are using Perl's malloc, you may add one or
more of the following items to your cflags config.sh variable
to change its behavior in potentially useful ways.  You can find out
more about these flags by reading the malloc.c source.
In a future version of perl, these might be enabled by default.
d772 6
a777 1
=item -DPERL_EMERGENCY_SBRK
d779 2
a780 27
If PERL_EMERGENCY_SBRK is defined, running out of memory need not be a
fatal error: a memory pool can allocated by assigning to the special
variable $^M.  See perlvar(1) for more details.

=item -DPACK_MALLOC

If PACK_MALLOC is defined, malloc.c uses a slightly different
algorithm for small allocations (up to 64 bytes long).  Such small
allocations are quite common in typical Perl scripts.

The expected memory savings (with 8-byte alignment in $alignbytes) is
about 20% for typical Perl usage.  The expected slowdown due to the
additional malloc overhead is in fractions of a percent.  (It is hard
to measure because of the effect of the saved memory on speed).

=item -DTWO_POT_OPTIMIZE

If TWO_POT_OPTIMIZE is defined, malloc.c uses a slightly different
algorithm for large allocations that are close to a power of two
(starting with 16K).  Such allocations are typical for big hashes and
special-purpose scripts, especially image processing.  If you will be
manipulating very large blocks with sizes close to powers of two, it
might be wise to define this macro.

The expected saving of memory is 0-100% (100% in applications which
require most memory in such 2**n chunks).  The expected slowdown is
negligible.
d795 1
a795 1
cc -g2.  Check you man pages for cc(1) and also any hint file for your
a816 11
For example, you can replace the rand() and srand() functions in the
perl source by any other random number generator by a trick such as the
following:

	sh Configure -Dccflags='-Drand=random -Dsrand=srandom'

or by adding -Drand=random and -Dsrand=srandom to your ccflags
at the appropriate Configure prompt.  (Note:  Although this worked for
me, it might not work for you if your system's header files give
different prototypes for rand() and random() or srand() and srandom().)

d847 4
a850 3
If you have any problems, it is a good idea to read the relevant hint
file for further information.  See hints/solaris_2.sh for an
extensive example.
d875 2
a876 1
Now, Configure will find your gdbm library and will issue a message:
d935 5
a939 3
To change the C flags for all the files, edit config.sh
and change either $ccflags or $optimize,
and then re-run
d946 2
a947 2
If you don't have sh, you'll have to copy the sample file config_H to
config.h and edit the config.h to reflect your system's peculiarities.
d951 36
d1002 6
a1007 8
This will look for all the includes.
The output is stored in makefile.  The only difference between
Makefile and makefile is the dependencies at the bottom of
makefile.  If you have to make any changes, you should edit
makefile, not Makefile since the Unix make command reads
makefile first.  (On non-Unix systems, the output may be stored in
a different file.  Check the value of $firstmakefile in your config.sh
if in doubt.)
d1035 1
a1035 1
    	make minitest
d1041 15
a1055 4
If you have any locale-related environment variables set, try
unsetting them.  I have some reports that some versions of IRIX hang
while running B<./miniperl configpm> with locales other than the C
locale.  See the discussion under L<make test> below about locales.
d1059 2
a1060 2
If you get duplicates upon linking for malloc et al, add -DHIDEMYMALLOC
or -DEMBEDMYMALLOC to your ccflags variable in config.sh.
d1065 5
a1069 5
correctly.  When using gcc, you should probably have i_stdarg='define'
and i_varargs='undef' in config.sh.  The problem is usually solved by
running fixincludes correctly.  If you do change config.sh, don't
forget to propagate your changes (see
L<"Propagating your changes to config.sh"> below).
d1072 1
a1072 1
=item croak
d1075 1
a1075 1
numbers will vary in different versions of perl):
d1077 3
a1079 3
    util.c: In function `Perl_croak':
    util.c:962: number of arguments doesn't match prototype
    proto.h:45: prototype declaration
d1146 8
d1165 2
a1166 2
on a number of other common functions too.  You are probably better off
re-running Configure without using nm extraction (see previous item).
d1172 2
a1173 2
fork() function.  Follow the procedure in the previous items
on L<"vsprintf"> and L<"nm extraction">.
d1194 1
a1194 1
to something like
d1213 2
a1214 1
likely suspects.
d1270 26
d1306 4
d1314 6
d1333 2
d1352 4
d1379 20
d1408 10
d1458 5
a1462 3
	/usr/local/lib/perl5/site_perl/
	/usr/local/lib/perl5/site_perl/$archname
where $archname is something like sun4-sunos.  These directories
d1472 54
a1525 31
You can safely install the current version of perl5 and still run scripts
under the old binaries for versions 5.003 and later ONLY.  Instead of
starting your script with #!/usr/local/bin/perl, just start it with
#!/usr/local/bin/perl5.003 (or whatever version you want to run.)
If you want to retain a version of Perl 5 prior to 5.003, you'll
need to install the current version in a separate directory tree,
since some of the architecture-independent library files have changed
in incompatible ways.

The old architecture-dependent files are stored in a version-specific
directory (such as /usr/local/lib/perl5/sun4-sunos/5.003) so that they
will still be accessible even after a later version is installed.
(Note:  Perl 5.000 and 5.001 did not put their architecture-dependent
libraries in a version-specific directory.  They are simply in
/usr/local/lib/perl5/$archname.  If you will not be using 5.000 or
5.001, you may safely remove those files.)

In general, the standard library files in /usr/local/lib/perl5 should
be usable by all versions of perl5.  However, the diagnostics.pm module
uses the /usr/local/lib/perl5/pod/perldiag.pod documentation file, so
the C<use diagnostics;> pragma and the splain script will only identify
and explain any warnings or errors that the most recently-installed
version of perl can generate.

Most extensions will probably not need to be recompiled to use with a newer
version of perl.  If you do run into problems, and you want to continue
to use the old version of perl along with your extension, simply move
those extension files to the appropriate version directory, such as
/usr/local/lib/perl/archname/5.003.  Then Perl 5.003 will find your
files in the 5.003 directory, and newer versions of perl will find your
newer extension in the site_perl directory.
d1537 4
d1546 9
d1575 2
a1576 5
by perl.  These files will be placed in the architectural library directory
you specified to Configure; by default this is
/usr/local/lib/perl5/ARCH/VERSION, where ARCH is your architecture
(such as sun4-solaris) and VERSION is the version of perl you are
building (for example, 5.004).
d1622 11
a1632 10
If you have difficulty building perl, and none of the advice in this
file helps, and careful reading of the error message and the relevant
manual pages on your system doesn't help either, then you should send a
message to either the comp.lang.perl.misc newsgroup or to
perlbug@@perl.com with an accurate description of your problem.

Please include the output of the ./myconfig shell script
that comes with the distribution.  Alternatively, you can use the
perlbug program that comes with the perl distribution,
but you need to have perl compiled and installed before you can use it.
d1634 2
a1635 2
You might also find helpful information in the Porting
directory of the perl distribution.
d1639 2
a1640 2
Read the manual entries before running perl.  The main documentation is
in the pod/ subdirectory and should have been installed during the
d1642 2
a1643 2
can type B<perldoc perl> to use the supplied perldoc script.  This
is sometimes useful for finding things in the library modules.
d1646 2
a1647 2
along with its table of contents, by going to the pod/ subdirectory
and running (either):
d1656 3
a1658 3
Note that you must have performed the installation already before
running the above, since the script collects the installed files to
generate the documentation.
d1662 8
a1669 4
Original author:  Andy Dougherty doughera@@lafcol.lafayette.edu ,
borrowing very heavily from the original README by Larry Wall,
with lots of helpful feedback and additions from the
perl5-porters@@perl.org folks.
d1671 6
a1676 2
If you have problems or questions, please see L<"Reporting Problems">
above.
d1680 1
a1680 1
$Id: INSTALL,v 1.28 1997/10/10 16:50:59 doughera Released $
@


1.1
log
@Initial revision
@
text
@d7 1
a7 1
The basic steps to build and install perl5 are:
d15 5
d22 18
d41 11
a51 2
proceeding.  Special notes specific to this release are identified
by B<NOTE>.
d53 5
a57 1
=head1 BUILDING PERL5
d59 1
a59 1
=head1 Start with a Fresh Distribution.
d65 1
a65 1
	
d69 1
a69 1
experiencing difficulties building perl, you should probably I<not>
d74 16
a89 1
Then run Configure.
d91 1
a91 1
=head1 Run Configure.
d95 3
a97 2
you about.  To accept the default, just press C<RETURN>.   The default
is almost always ok.
d100 5
a104 1
F<*.SH> files and offer to run B<make depend>.
d106 1
a106 2
Configure supports a number of useful options.  Run B<Configure -h>
to get a listing.  To compile with gcc, for example, you can run
a115 5
If you are willing to accept all the defaults, and you want terse
output, you can run

	sh Configure -des

d127 5
a131 1
/usr/local/lib/perl5/.
d133 1
a133 1
By default, Configure will compile perl to use dynamic loading, if
d135 31
a165 2
statically, you can either choose this when Configure prompts you or by
using the Configure command line option -Uusedl.
d172 15
a186 7
DynaLoader, Fcntl and FileHandle are always built by default.
Configure does not contain code to test for POSIX compliance, so POSIX
is always built by default as well.  If you wish to skip POSIX, you can
set the Configure variable useposix=false either in a hint file or from
the Configure command line.  Similarly, the Safe extension is always
built by default, but you can skip it by setting the Configure variable
usesafe=false either in a hint file for from the command line.
d192 1
a192 1
    DynaLoader		(Must always be included)
a193 1
    FileHandle		(Always included by default)
d195 1
d200 1
a200 1
    Safe		usesafe
d211 6
a216 1
the Extensions you want.
a222 16
=head2 GNU-style configure

If you prefer the GNU-style B<configure> command line interface, you can
use the supplied B<configure> command, e.g.

	CC=gcc ./configure

The B<configure> script emulates several of the more common configure
options.  Try

	./configure --help

for a listing.

Cross compiling is currently not supported.

d229 1
a229 1
are B<not> included with perl.  See the library documentation for
d232 1
a232 1
I<Note:>  If your database header (.h) files are not in a
d234 1
a234 1
include the appropriate B<-I/your/directory> option when prompted by
d237 1
a237 1
include the appropriate B<-L/your/directory> option when prompted by
d244 1
a244 1
=item gdbm in /usr/local.
d247 3
a249 3
GDBM_File extension.  This examples assumes you have F<gdbm.h>
installed in F</usr/local/include/gdbm.h> and F<libgdbm.a> installed in
F</usr/local/lib/libgdbm.a>.  Configure should figure all the
d253 1
a253 1
your C compiler, you should include  C<-I/usr/local/include>.
d256 1
a256 1
C<-L/usr/local/lib>.
d260 1
a260 1
C<-L/usr/local/lib>.
d277 3
a279 3
have F</usr/you/include/gdbm.h> and F</usr/you/lib/libgdbm.a>.  You
still have to add B<-I/usr/you/include> to cc flags, but you have to take
an extra step to help Configure find F<libgdbm.a>.  Specifically, when
d281 1
a281 1
F</usr/you/lib> to the list.
d290 2
a291 2
C<locincpth> is a space-separated list of include directories to search.
Configure will automatically add the appropriate B<-I> directives.
d293 4
a296 4
C<loclibpth> is a space-separated list of library directories to search.
Configure will automatically add the appropriate B<-L> directives.  If
you have some libraries under F</usr/local/> and others under
F</usr/you>, then you have to include both, namely
d304 1
a304 1
=head2 Installation Directories.
d310 5
d319 1
a319 1
	/usr/local/lib/perl5/archname/5.002
d331 3
a333 1
instead.) The module man pages are stuck in that strange spot so that
d337 11
a347 1
page, rather than the B<less> program.
d350 2
a351 2
directory structure is simplified.  For example, if you Configure
with -Dprefix=/opt/perl, then the defaults are
d353 1
a353 1
	/opt/perl/lib/archname/5.002
d369 1
a369 1
In order to support using things like #!/usr/local/bin/perl5.002 after
d372 5
a376 5
/usr/local/lib/perl5/archname/5.002/.  In 5.000 and 5.001, these files
were just stored in /usr/local/lib/perl5/archname/.  If you will not be
using 5.001 binaries, you can delete the standard extensions from the
/usr/local/lib/perl5/archname/ directory.  Locally-added extensions can
be moved to the site_perl and site_perl/archname directories.
d387 1
a387 1
However, sites that use software such as B<depot> to manage software
d391 1
a391 1
an option C<-Dinstallprefix=/foo> to simplify this.
d393 5
a397 7
Suppose you want to install perl under the F</tmp/perl5> directory.
You can edit F<config.sh> and change all the install* variables to
point to F</tmp/perl5> instead of F</usr/local/wherever>.  You could
also set them all from the Configure command line.  Or, you can
automate this process by placing the following lines in a file
F<config.over> B<before> you run Configure (replace /tmp/perl5 by a
directory of your choice):
a409 1
    shrpdir=`echo $shrpdir | sed "s!$prefix!$installprefix!"`
d431 3
d439 320
d770 2
a771 2
have to wait for them.  Once you've handled them (and your C compiler &
flags) you can type   '&-d'  at the next Configure prompt and Configure
d778 1
a778 1
=item Hint files.
d786 1
a786 1
file for further information.  See F<hints/solaris_2.sh> for an
d818 2
a819 2
In this case, you do I<not> want to keep the previous value, so you
should answer 'n'.  (You'll also have to manuually add GDBM_File to
d825 1
a825 1
probably I<not> re-use your old config.sh.  Simply remove it or
d829 4
a832 2
This is a common source of problems.  If you change from B<cc> to
B<gcc>, you should almost always remove your old config.sh.
d834 2
a835 1
=item Propagating your changes
d837 6
a842 2
If you later make any changes to F<config.sh>, you should propagate
them to all the .SH files by running  B<sh Configure -S>.
d850 1
a850 1
changing the installation directory for an example.
d854 3
a856 3
Many of the system dependencies are contained in F<config.h>.
F<Configure> builds F<config.h> by running the F<config_h.SH> script.
The values for the variables are taken from F<config.sh>.
d858 2
a859 2
If there are any problems, you can edit F<config.h> directly.  Beware,
though, that the next time you run B<Configure>, your changes will be
d865 9
a873 9
line, they can be made in F<cflags.SH>.  For instance, to turn off the
optimizer on F<toke.c>, find the line in the switch structure for
F<toke.c> and put the command C<optimize='-g'> before the C<;;>.  You
can also edit F<cflags> directly, but beware that your changes will be
lost the next time you run B<Configure>.

To change the C flags for all the files, edit F<config.sh>
and change either C<$ccflags> or C<$optimize>,
and then re-run  B<sh Configure -S ; make depend>.
d875 4
a878 1
=item No sh.
d885 11
d901 7
a907 5
The output is stored in F<makefile>.  The only difference between
F<Makefile> and F<makefile> is the dependencies at the bottom of
F<makefile>.  If you have to make any changes, you should edit
F<makefile>, not F<Makefile> since the Unix B<make> command reads
F<makefile> first.
d917 5
d925 1
a925 1
=item *
d930 1
a930 1
=item *
d932 1
a932 20
If you can't compile successfully, try adding a C<-DCRIPPLED_CC> flag.
(Just because you get no errors doesn't mean it compiled right!)
This simplifies some complicated expressions for compilers that
get indigestion easily.  If that has no effect, try turning off
optimization.  If you have missing routines, you probably need to
add some library or other, or you need to undefine some feature that
Configure thought was there but is defective or incomplete.

=item *

Some compilers will not compile or optimize the larger files without
some extra switches to use larger jump offsets or allocate larger
internal tables.  You can customize the switches for each file in
F<cflags>.  It's okay to insert rules for specific files into
F<makefile> since a default rule only takes effect in the absence of a
specific rule.

=item *

If you can successfully build F<miniperl>, but the process crashes
d939 1
a939 1
=item *
d941 4
a944 1
Some additional things that have been reported for either perl4 or perl5:
d946 1
a946 1
Genix may need to use libc rather than libc_s, or #undef VARARGS.
d948 2
a949 1
NCR Tower 32 (OS 2.01.01) may need -W2,-Sl,2000 and #undef MKDIR.
d951 1
a951 1
UTS may need one or more of B<-DCRIPPLED_CC>, B<-K> or B<-g>, and undef LSTAT.
d953 7
a959 1
If you get syntax errors on '(', try -DCRIPPLED_CC.
d961 1
a961 1
Machines with half-implemented dbm routines will need to #undef I_ODBM
d963 2
a964 2
SCO prior to 3.2.4 may be missing dbmclose().  An upgrade to 3.2.4
that includes libdbm.nfs (which includes dbmclose()) may be available.
d966 3
a968 1
If you get duplicates upon linking for malloc et al, say -DHIDEMYMALLOC.
d970 2
a971 2
If you get duplicate function definitions (a perl function has the
same name as another function on your system) try -DEMBED.
d973 1
a973 4
If you get varags problems with gcc, be sure that gcc is installed
correctly.  When using gcc, you should probably have i_stdarg='define'
and i_varags='undef' in config.sh.  The problem is usually solved
by running fixincludes correctly.
d977 1
a977 1
B<-B/bin/> (for SunOS) or B<-B/usr/ccs/bin> (for Solaris) to your
d979 25
a1003 1
and ld are used.
d1006 2
a1007 1
the LD_LIBRARY_PATH environment variable.  Perl should build
d1011 14
d1031 133
d1168 12
a1179 7
This will run the regression tests on the perl you just made.  If it
doesn't say "All tests successful" then something went wrong.  See the
file F<t/README> in the F<t> subdirectory.  Note that you can't run it
in background if this disables opening of /dev/tty.  If B<make test>
bombs out, just B<cd> to the F<t> directory and run B<TEST> by hand
to see if it makes any difference.
If individual tests bomb, you can run them by hand, e.g.,
d1183 12
a1194 1
B<Note>: one possible reason for errors is that some external programs
d1196 5
a1200 4
C<make test> exercises them. This may happen for example if you have
one or more of these environment variables set:
C<LC_ALL LC_CTYPE LANG>. In certain UNIXes especially the non-English
locales are known to cause programs to exhibit mysterious errors.
d1202 14
a1215 9
C<setenv LC_ALL C> or <LC_ALL=C;export LC_ALL>, for C<csh>-style and
C<Bourne>-style shells, respectively, from the command line and then
retry C<make test>. If the tests then succeed, you may have a broken
program that is confusing the testing. Please run the troublesome test
by hand as shown above and see whether you can locate the program.
Look for things like:
C<exec, `backquoted command`, system, open("|...")> or C<open("...|")>.
All these mean that Perl is trying to run some external program.
=head1 INSTALLING PERL5
d1220 1
a1220 1
B<Configure>; by default this is F</usr/local/bin>.  It will also try
d1222 1
a1222 1
page, however.  You may need to be root to run B<make install>.  If you
a1225 5
B<NOTE:>  In the 5.002 release, you will see some harmless error
messages and warnings from pod2man.  You may safely ignore them.  (Yes,
they should be fixed, but they didn't seem important enough to warrant
holding up the entire 5.002 release.)

d1232 1
a1232 1
B<make install> will install the following:
d1245 1
d1249 1
d1251 4
a1254 2
	pod2latex, and 	to other useful formats.
	pod2man
d1271 30
a1300 39
Perl's *.h header files and the libperl.a library are also
installed under $archlib so that any user may later build new
extensions even if the Perl source is no longer available.

The libperl.a library is only needed for building new
extensions and linking them statically into a new perl executable.
If you will not be doing that, then you may safely delete
$archlib/libperl.a after perl is installed.

make install may also offer to install perl in a "standard" location.

Most of the documentation in the pod/ directory is also available
in HTML and LaTeX format.  Type

	cd pod; make html; cd ..

to generate the html versions, and

	cd pod; make tex; cd ..

to generate the LaTeX versions.

=head1 Coexistence with earlier versions of perl5.

You can safely install the current version of perl5 and still run
scripts under the old binaries.  Instead of starting your script with
#!/usr/local/bin/perl, just start it with #!/usr/local/bin/perl5.001
(or whatever version you want to run.)

The architecture-dependent files are stored in a version-specific
directory (such as F</usr/local/lib/perl5/sun4-sunos/5.002>) so that
they are still accessible.  I<Note:> perl5.000 and perl5.001 did not
put their architecture-dependent libraries in a version-specific
directory.  They are simply in F</usr/local/lib/perl5/$archname>.  If
you will not be using 5.000 or 5.001, you may safely remove those
files.

The standard library files in F</usr/local/lib/perl5>
should be useable by all versions of perl5.
d1306 2
a1307 2
F</usr/local/lib/perl/archname/5.002>.  Then perl5.002 will find your
files in the 5.002 directory, and newer versions of perl will find your
d1310 1
a1310 1
Some users may prefer to keep all versions of perl in completely
d1314 1
a1314 1
	sh Configure -Dprefix=/opt/perl5.002
d1316 1
a1316 1
and adding /opt/perl5.002/bin to the shell PATH variable.  Such users
d1320 4
a1323 11
B<NOTE>: Starting with 5.002_01, all functions in the perl C source
code are protected by default by the prefix Perl_ (or perl_) so that
you may link with third-party libraries without fear of namespace
collisons.  This breaks compatability with the initially released
version of 5.002, so once you install 5.002_01 (or higher) you will
need to re-build and install all of your dynamically loadable
extensions.  (The standard extensions supplied with Perl are handled
automatically).  You can turn off this namespace protection by adding
-DNO_EMBED to your ccflags variable in config.sh.  This is a one-time
change.  In the future, we certainly hope that most extensions won't
need to be recompiled for use with a newer version of perl.
d1329 2
a1330 2
By default, the perl5 libraries go into F</usr/local/lib/perl5/>, so
they don't override the perl4 libraries in F</usr/local/lib/perl/>.
d1333 1
a1333 1
F<perl4.036>.  That will not be touched by the perl5 installation
d1336 1
a1336 1
the C<#!> line at the top of them by C<#!/usr/local/bin/perl4.036>
d1340 69
d1414 1
a1414 1
can type B<perldoc perl> to use the supplied B<perldoc> script.  This
d1417 15
d1434 7
a1440 2
Andy Dougherty <doughera@@lafcol.lafayette.edu>, borrowing I<very> heavily
from the original README by Larry Wall.
d1444 1
a1444 1
19 March 1996
@


1.1.1.1
log
@Import of Perl 5.003 into the tree.  Makefile.bsd-wrapper and
config.sh.OpenBSD are the only local changes.
@
text
@@


1.1.1.2
log
@perl5.005_03
@
text
@d7 1
a7 1
The basic steps to build and install perl5 on a Unix system are:
d9 1
a9 1
	rm -f config.sh Policy.sh
a14 5
	# You may also wish to add these:
	(cd /usr/include && h2ph *.h sys/*.h)
	(installhtml --help)
	(cd pod && make tex  && <process the latex files>)

a16 18
For information on non-Unix systems, see the section on
L<"Porting information"> below.

For information on what's new in this release, see the
pod/perldelta.pod file.  For more detailed information about specific
changes, see the Changes file.

=head1 DESCRIPTION

This document is written in pod format as an easy way to indicate its
structure.  The pod format is described in pod/perlpod.pod, but you can
read it as is with any pager or editor.  Headings and items are marked
by lines beginning with '='.  The other mark-up used is

    B<text>     embolden text, used for switches, programs or commands
    C<code>	literal code
    L<name>     A link (cross reference) to name

d18 2
a19 1
proceeding.
d21 1
a21 48
If you're building Perl on a non-Unix system, you should also read
the README file specific to your operating system, since this may
provide additional or different instructions for building Perl.

If there is a hint file for your system (in the hints/ directory) you
should also read that hint file for specific information for your
system.  (Unixware users should use the svr4.sh hint file.)

=head1 WARNING:  This version is not binary compatible with Perl 5.004.

Starting with Perl 5.004_50 there were many deep and far-reaching changes
to the language internals.  If you have dynamically loaded extensions
that you built under perl 5.003 or 5.004, you can continue to use them
with 5.004, but you will need to rebuild and reinstall those extensions
to use them 5.005.  See the discussions below on
L<"Coexistence with earlier versions of perl5"> and
L<"Upgrading from 5.004 to 5.005"> for more details.

The standard extensions supplied with Perl will be handled automatically.

In a related issue, old extensions may possibly be affected by the
changes in the Perl language in the current release.  Please see
pod/perldelta.pod for a description of what's changed.

=head1 WARNING:  This version requires a compiler that supports ANSI C.

If you find that your C compiler is not ANSI-capable, try obtaining
GCC, available from GNU mirrors worldwide (e.g. ftp://ftp.gnu.org/pub/gnu).
Another alternative may be to use a tool like C<ansi2knr> to convert the
sources back to K&R style, but there is no guarantee this route will get
you anywhere, since the prototypes are not the only ANSI features used
in the Perl sources.  C<ansi2knr> is usually found as part of the freely
available C<Ghostscript> distribution.  Another similar tool is
C<unprotoize>, distributed with GCC.  Since C<unprotoize> requires GCC to
run, you may have to run it on a platform where GCC is available, and move
the sources back to the platform without GCC.

If you succeed in automatically converting the sources to a K&R compatible
form, be sure to email perlbug@@perl.com to let us know the steps you
followed.  This will enable us to officially support this option.

=head1 Space Requirements

The complete perl5 source tree takes up about 10 MB of disk space.  The
complete tree after completing make takes roughly 20 MB, though the
actual total is likely to be quite system-dependent.  The installation
directories need something on the order of 10 MB, though again that
value is system-dependent.
d23 1
a23 1
=head1 Start with a Fresh Distribution
a27 4
	make distclean

or

d29 6
a34 9

The only difference between the two is that make distclean also removes
your old config.sh and Policy.sh files.

The results of a Configure run are stored in the config.sh and Policy.sh
files.  If you are upgrading from a previous version of perl, or if you
change systems or compilers or make other significant changes, or if
you are experiencing difficulties building perl, you should probably
not re-use your old config.sh.  Simply remove it or rename it, e.g.
d38 1
a38 21
If you wish to use your old config.sh, be especially attentive to the
version and architecture-specific questions and answers.  For example,
the default directory for architecture-dependent library modules
includes the version name.  By default, Configure will reuse your old
name (e.g. /opt/perl/lib/i86pc-solaris/5.003) even if you're running
Configure for a different version, e.g. 5.004.  Yes, Configure should
probably check and correct for this, but it doesn't, presently.
Similarly, if you used a shared libperl.so (see below) with version
numbers, you will probably want to adjust them as well.

Also, be careful to check your architecture name.  Some Linux systems
(such as Debian) use i386, while others may use i486, i586, or i686.
If you pick up a precompiled binary, it might not use the same name.

In short, if you wish to use your old config.sh, I recommend running
Configure interactively rather than blindly accepting the defaults.

If your reason to reuse your old config.sh is to save your
particular installation choices, then you can probably achieve the
same effect by using the new Policy.sh file.  See the section on
L<"Site-wide Policy settings"> below.
d40 1
a40 1
=head1 Run Configure
d44 2
a45 3
you about.  To accept the default, just press RETURN.   The default
is almost always okay.  At any Configure prompt, you can type  &-d
and Configure will use the defaults from then on.
d48 1
a48 5
*.SH files and offer to run make depend.

Configure supports a number of useful options.  Run B<Configure -h> to
get a listing.  See the Porting/Glossary file for a complete list of
Configure variables you can set and their definitions.
d50 2
a51 1
To compile with gcc, for example, you should run
d61 5
d77 1
a77 17
/opt/perl/lib/perl5/.

NOTE:  You must not specify an installation directory that is below
your perl source directory.  If you do, installperl will attempt
infinite recursion.

It may seem obvious to say, but Perl is useful only when users can
easily find it.  It's often a good idea to have both /usr/bin/perl and
/usr/local/bin/perl be symlinks to the actual binary.  Be especially
careful, however, of overwriting a version of perl supplied by your
vendor.  In any case, system administrators are strongly encouraged to
put (symlinks to) perl and its accompanying utilities, such as perldoc,
into a directory typically found along a user's PATH, or in another
obvious and convenient place.

You can use "Configure -Uinstallusrbinperl" which causes installperl
to skip installing perl also as /usr/bin/perl.
d79 1
a79 1
By default, Configure will compile perl to use dynamic loading if
d81 2
a82 30
statically, you can either choose this when Configure prompts you or
you can use the Configure command line option -Uusedl.

If you are willing to accept all the defaults, and you want terse
output, you can run

	sh Configure -des

For my Solaris system, I usually use

	sh Configure -Dprefix=/opt/perl -Doptimize='-xpentium -xO4' -des

=head2 GNU-style configure

If you prefer the GNU-style configure command line interface, you can
use the supplied configure.gnu command, e.g.

	CC=gcc ./configure.gnu

The configure.gnu script emulates a few of the more common configure
options.  Try

	./configure.gnu --help

for a listing.

Cross compiling is not supported.

(The file is called configure.gnu to avoid problems on systems
that would not distinguish the files "Configure" and "configure".)
d89 1
a89 1
B, DynaLoader, Fcntl, IO, and attrs are always built by default.
d93 1
a93 1
the Configure command line.  Similarly, the Opcode extension is always
d95 1
a95 9
useopcode=false either in a hint file for from the command line.

You can learn more about each of these extensions by consulting the
documentation in the individual .pm modules, located under the
ext/ subdirectory.

Even if you do not have dynamic loading, you must still build the
DynaLoader extension; you should just build the stub dl_none.xs
version.  (Configure will suggest this as the default.)
a99 1
    B			(Always included by default)
d101 1
a101 1
    DynaLoader		(Must always be included as a static extension)
d103 1
a104 1
    IO			(Always included by default)
d109 1
a109 1
    Opcode		useopcode
a110 2
    Threads		usethreads
    attrs		(Always included by default)
d120 1
a120 10
the extensions you want.

Note:  The DB_File module will only work with version 1.x of Berkeley
DB or newer releases of version 2.  Configure will automatically detect
this for you and refuse to try to build DB_File with version 2.

If you re-use your old config.sh but change your system (e.g. by
adding libgdbm) Configure will still offer your old choices of extensions
for the default answer, but it will also point out the discrepancy to
you.
d127 16
d149 1
a149 1
are not included with perl.  See the library documentation for
d152 1
a152 1
Note:  If your database header (.h) files are not in a
d154 1
a154 1
include the appropriate -I/your/directory option when prompted by
d157 1
a157 1
include the appropriate -L/your/directory option when prompted by
d164 1
a164 1
=item gdbm in /usr/local
d167 3
a169 3
GDBM_File extension.  This examples assumes you have gdbm.h
installed in /usr/local/include/gdbm.h and libgdbm.a installed in
/usr/local/lib/libgdbm.a.  Configure should figure all the
d173 1
a173 1
your C compiler, you should include  -I/usr/local/include.
d176 1
a176 1
-L/usr/local/lib.
d180 1
a180 1
-L/usr/local/lib.
d196 4
a199 4
but you still want Configure to find it.  To be specific, assume you
have /usr/you/include/gdbm.h and /usr/you/lib/libgdbm.a.  You
still have to add -I/usr/you/include to cc flags, but you have to take
an extra step to help Configure find libgdbm.a.  Specifically, when
d201 1
a201 1
/usr/you/lib to the list.
d210 2
a211 2
locincpth is a space-separated list of include directories to search.
Configure will automatically add the appropriate -I directives.
d213 4
a216 4
loclibpth is a space-separated list of library directories to search.
Configure will automatically add the appropriate -L directives.  If
you have some libraries under /usr/local/ and others under
/usr/you, then you have to include both, namely
d224 1
a224 1
=head2 Installation Directories
d230 8
a237 4
I highly recommend running Configure interactively to be sure it puts
everything where you want it.  At any point during the Configure
process, you can answer a question with  &-d  and Configure
will use the defaults from then on.
d239 1
a239 2
By default, Configure will use the following directories for library files
for 5.005 (archname is a string like sun4-sunos, determined by Configure).
d241 2
a242 15
    Configure variable		Default value
	$archlib 	/usr/local/lib/perl5/5.005/archname
	$privlib	/usr/local/lib/perl5/5.005
	$sitearch	/usr/local/lib/perl5/site_perl/5.005/archname
	$sitelib	/usr/local/lib/perl5/site_perl/5.005

Some users prefer to append a "/share" to $privlib and $sitelib
to emphasize that those directories can be shared among different
architectures.

By default, Configure will use the following directories for manual pages:

    Configure variable		Default value
	$man1dir	/usr/local/man/man1
	$man3dir	/usr/local/lib/perl5/man/man3
d246 1
a246 3
instead.)

The module man pages are stuck in that strange spot so that
d250 1
a250 11
page, rather than the less program.  (This default location will likely
change to /usr/local/man/man3 in a future release of perl.)

Note:  Many users prefer to store the module man pages in
/usr/local/man/man3.  You can do this from the command line with

	sh Configure -Dman3dir=/usr/local/man/man3

Some users also prefer to use a .3pm suffix.  You can do that with

	sh Configure -Dman3ext=3pm
d253 2
a254 2
directory structure is simplified.  For example, if you Configure with
-Dprefix=/opt/perl, then the defaults for 5.005 are
d256 4
a259 5
    Configure variable		Default value
	$archlib	/opt/perl/lib/5.005/archname
	$privlib	/opt/perl/lib/5.005
	$sitearch	/opt/perl/lib/site_perl/5.005/archname
	$sitelib	/opt/perl/lib/site_perl/5.005
d261 2
a262 2
	$man1dir	/opt/perl/man/man1
	$man3dir	/opt/perl/man/man3
d267 4
a270 3
The directories under site_perl are empty, but are intended to be used
for installing local or site-wide extensions.  Perl will automatically
look in these directories.
d272 1
a272 1
In order to support using things like #!/usr/local/bin/perl5.005 after
d275 5
a279 5
/usr/local/lib/perl5/archname/5.005/.

Further details about the installation directories, maintenance and
development subversions, and about supporting multiple versions are
discussed in L<"Coexistence with earlier versions of perl5"> below.
d290 1
a290 1
However, sites that use software such as depot to manage software
d294 1
a294 1
an option -Dinstallprefix=/foo to simplify this.
d296 7
a302 5
Suppose you want to install perl under the /tmp/perl5 directory.  You
can edit config.sh and change all the install* variables to point to
/tmp/perl5 instead of /usr/local/wherever.  Or, you can automate this
process by placing the following lines in a file config.over before you
run Configure (replace /tmp/perl5 by a directory of your choice):
d315 1
a323 5
Beware, though, that if you go to try to install new add-on
extensions, they too will get installed in under '/tmp/perl5' if you
follow this example.  The next section shows one way of dealing with
that problem.

d328 1
a328 3
installed on multiple systems.  Suppose, for example, that you want to
create an archive that can be installed in /opt/perl.
Here's one way to do that:
d332 1
a332 1
    sh Configure -Dprefix=/opt/perl -des
d335 1
a335 1
    make install   # This will install everything into /tmp/perl5.
a336 6
    # Edit $archlib/Config.pm and $archlib/.packlist to change all the
    # install* variables back to reflect where everything will
    # really be installed.  (That is, change /tmp/perl5 to /opt/perl
    # everywhere in those files.)
    # Check the scripts in $scriptdir to make sure they have the correct
    # #!/wherever/perl line.
d339 1
a339 1
    cd /opt/perl # Or wherever you specified as $prefix
a341 304
=head2 Site-wide Policy settings

After Configure runs, it stores a number of common site-wide "policy"
answers (such as installation directories and the local perl contact
person) in the Policy.sh file.  If you want to build perl on another
system using the same policy defaults, simply copy the Policy.sh file
to the new system and Configure will use it along with the appropriate
hint file for your system.

Alternatively, if you wish to change some or all of those policy
answers, you should

	rm -f Policy.sh

to ensure that Configure doesn't re-use them.

Further information is in the Policy_sh.SH file itself.

=head2 Configure-time Options

There are several different ways to Configure and build perl for your
system.  For most users, the defaults are sensible and will work.
Some users, however, may wish to further customize perl.  Here are
some of the main things you can change.

=head2 Threads

On some platforms, perl5.005 can be compiled with experimental support
for threads.  To enable this, read the file README.threads, and then
try:

	sh Configure -Dusethreads

Currently, you need to specify -Dusethreads on the Configure command
line so that the hint files can make appropriate adjustments.

The default is to compile without thread support.

=head2 Selecting File IO mechanisms

Previous versions of perl used the standard IO mechanisms as defined in
stdio.h.  Versions 5.003_02 and later of perl allow alternate IO
mechanisms via a "PerlIO" abstraction, but the stdio mechanism is still
the default and is the only supported mechanism.

This PerlIO abstraction can be enabled either on the Configure command
line with

	sh Configure -Duseperlio

or interactively at the appropriate Configure prompt.

If you choose to use the PerlIO abstraction layer, there are two
(experimental) possibilities for the underlying IO calls.  These have been
tested to some extent on some platforms, but are not guaranteed to work
everywhere.

=over 4

=item 1.

AT&T's "sfio".  This has superior performance to stdio.h in many
cases, and is extensible by the use of "discipline" modules.  Sfio
currently only builds on a subset of the UNIX platforms perl supports.
Because the data structures are completely different from stdio, perl
extension modules or external libraries may not work.  This
configuration exists to allow these issues to be worked on.

This option requires the 'sfio' package to have been built and installed.
A (fairly old) version of sfio is in CPAN.

You select this option by

	sh Configure -Duseperlio -Dusesfio

If you have already selected -Duseperlio, and if Configure detects
that you have sfio, then sfio will be the default suggested by
Configure.

Note:  On some systems, sfio's iffe configuration script fails
to detect that you have an atexit function (or equivalent).
Apparently, this is a problem at least for some versions of Linux
and SunOS 4.

You can test if you have this problem by trying the following shell
script.  (You may have to add some extra cflags and libraries.  A
portable version of this may eventually make its way into Configure.)

    #!/bin/sh
    cat > try.c <<'EOCP'
    #include <stdio.h>
    main() { printf("42\n"); }
    EOCP
    cc -o try try.c -lsfio
    val=`./try`
    if test X$val = X42; then
	echo "Your sfio looks ok"
    else
	echo "Your sfio has the exit problem."
    fi

If you have this problem, the fix is to go back to your sfio sources
and correct iffe's guess about atexit.

There also might be a more recent release of Sfio that fixes your
problem.

=item 2.

Normal stdio IO, but with all IO going through calls to the PerlIO
abstraction layer.  This configuration can be used to check that perl and
extension modules have been correctly converted to use the PerlIO
abstraction.

This configuration should work on all platforms (but might not).

You select this option via:

	sh Configure -Duseperlio -Uusesfio

If you have already selected -Duseperlio, and if Configure does not
detect sfio, then this will be the default suggested by Configure.

=back

=head2 Building a shared libperl.so Perl library

Currently, for most systems, the main perl executable is built by
linking the "perl library" libperl.a with perlmain.o, your static
extensions (usually just DynaLoader.a) and various extra libraries,
such as -lm.

On some systems that support dynamic loading, it may be possible to
replace libperl.a with a shared libperl.so.  If you anticipate building
several different perl binaries (e.g. by embedding libperl into
different programs, or by using the optional compiler extension), then
you might wish to build a shared libperl.so so that all your binaries
can share the same library.

The disadvantages are that there may be a significant performance
penalty associated with the shared libperl.so, and that the overall
mechanism is still rather fragile with respect to different versions
and upgrades.

In terms of performance, on my test system (Solaris 2.5_x86) the perl
test suite took roughly 15% longer to run with the shared libperl.so.
Your system and typical applications may well give quite different
results.

The default name for the shared library is typically something like
libperl.so.3.2 (for Perl 5.003_02) or libperl.so.302 or simply
libperl.so.  Configure tries to guess a sensible naming convention
based on your C library name.  Since the library gets installed in a
version-specific architecture-dependent directory, the exact name
isn't very important anyway, as long as your linker is happy.

For some systems (mostly SVR4), building a shared libperl is required
for dynamic loading to work, and hence is already the default.

You can elect to build a shared libperl by

	sh Configure -Duseshrplib

To build a shared libperl, the environment variable controlling shared
library search (LD_LIBRARY_PATH in most systems, DYLD_LIBRARY_PATH for
NeXTSTEP/OPENSTEP, LIBRARY_PATH for BeOS) must be set up to include
the Perl build directory because that's where the shared libperl will
be created.   Configure arranges Makefile to have the correct shared
library search settings.

However, there are some special cases where manually setting the
shared library path might be required.  For example, if you want to run
something like the following with the newly-built but not-yet-installed
./perl:

        cd t; ./perl misc/failing_test.t
or
        ./perl -Ilib ~/my_mission_critical_test

then you need to set up the shared library path explicitly.
You can do this with

   LD_LIBRARY_PATH=`pwd`:$LD_LIBRARY_PATH; export LD_LIBRARY_PATH

for Bourne-style shells, or

   setenv LD_LIBRARY_PATH `pwd`

for Csh-style shells.  (This procedure may also be needed if for some
unexpected reason Configure fails to set up Makefile correctly.)

You can often recognize failures to build/use a shared libperl from error
messages complaining about a missing libperl.so (or libperl.sl in HP-UX),
for example:
18126:./miniperl: /sbin/loader: Fatal Error: cannot map libperl.so

There is also an potential problem with the shared perl library if you
want to have more than one "flavor" of the same version of perl (e.g.
with and without -DDEBUGGING).  For example, suppose you build and
install a standard Perl 5.004 with a shared library.  Then, suppose you
try to build Perl 5.004 with -DDEBUGGING enabled, but everything else
the same, including all the installation directories.  How can you
ensure that your newly built perl will link with your newly built
libperl.so.4 rather with the installed libperl.so.4?  The answer is
that you might not be able to.  The installation directory is encoded
in the perl binary with the LD_RUN_PATH environment variable (or
equivalent ld command-line option).  On Solaris, you can override that
with LD_LIBRARY_PATH; on Linux you can't.  On Digital Unix, you can
override LD_LIBRARY_PATH by setting the _RLD_ROOT environment variable
to point to the perl build directory.

The only reliable answer is that you should specify a different
directory for the architecture-dependent library for your -DDEBUGGING
version of perl.  You can do this by changing all the *archlib*
variables in config.sh, namely archlib, archlib_exp, and
installarchlib, to point to your new architecture-dependent library.

=head2 Malloc Issues

Perl relies heavily on malloc(3) to grow data structures as needed, so
perl's performance can be noticeably affected by the performance of
the malloc function on your system.

The perl source is shipped with a version of malloc that is very fast but
somewhat wasteful of space.  On the other hand, your system's malloc
function may be a bit slower but also a bit more frugal.  However,
as of 5.004_68, perl's malloc has been optimized for the typical
requests from perl, so there's a chance that it may be both faster and
use less memory.

For many uses, speed is probably the most important consideration, so
the default behavior (for most systems) is to use the malloc supplied
with perl.  However, if you will be running very large applications
(e.g. Tk or PDL) or if your system already has an excellent malloc, or
if you are experiencing difficulties with extensions that use
third-party libraries that call malloc, then you might wish to use
your system's malloc.  (Or, you might wish to explore the malloc flags
discussed below.)

To build without perl's malloc, you can use the Configure command

	sh Configure -Uusemymalloc

or you can answer 'n' at the appropriate interactive Configure prompt.

=head2 Malloc Performance Flags

If you are using Perl's malloc, you may add one or more of the following
items to your ccflags config.sh variable to change its behavior.  You can
find out more about these and other flags by reading the commentary near
the top of the malloc.c source.  The defaults should be fine for
nearly everyone.

=over 4

=item -DNO_FANCY_MALLOC

Undefined by default.  Defining it returns malloc to the version used
in Perl 5.004.

=item -DPLAIN_MALLOC

Undefined by default.  Defining it in addition to NO_FANCY_MALLOC returns
malloc to the version used in Perl version 5.000.

=back

=head2 Building a debugging perl

You can run perl scripts under the perl debugger at any time with
B<perl -d your_script>.  If, however, you want to debug perl itself,
you probably want to do

	sh Configure -Doptimize='-g'

This will do two independent things:  First, it will force compilation
to use cc -g so that you can use your system's debugger on the
executable.  (Note:  Your system may actually require something like
cc -g2.  Check your man pages for cc(1) and also any hint file for your
system.)  Second, it will add -DDEBUGGING to your ccflags variable in
config.sh so that you can use B<perl -D> to access perl's internal
state.  (Note: Configure will only add -DDEBUGGING by
default if you are not reusing your old config.sh.  If you want to
reuse your old config.sh, then you can just edit it and change the
optimize and ccflags variables by hand and then propagate your changes
as shown in L<"Propagating your changes to config.sh"> below.)

You can actually specify -g and -DDEBUGGING independently, but usually
it's convenient to have both.

If you are using a shared libperl, see the warnings about multiple
versions of perl under L<Building a shared libperl.so Perl library>.

=head2 Other Compiler Flags

For most users, all of the Configure defaults are fine.  However,
you can change a number of factors in the way perl is built
by adding appropriate -D directives to your ccflags variable in
config.sh.

You should also run Configure interactively to verify that a hint file
doesn't inadvertently override your ccflags setting.  (Hints files
shouldn't do that, but some might.)

d353 2
a354 2
have to wait for them.  Once you've handled them (and your C compiler and
flags) you can type  &-d  at the next Configure prompt and Configure
d361 1
a361 1
=item Hint files
d368 3
a370 4
If you have any problems, it is a good idea to read the relevant hint file
for further information.  See hints/solaris_2.sh for an extensive example.
More information about writing good hints is in the hints/README.hints
file.
d395 1
a395 2
Now, Configure will find your gdbm include file and library and will
issue a message:
d401 2
a402 2
In this case, you do not want to keep the previous value, so you
should answer 'n'.  (You'll also have to manually add GDBM_File to
d408 1
a408 1
probably not re-use your old config.sh.  Simply remove it or
d412 2
a413 2
This is a common source of problems.  If you change from cc to
gcc, you should almost always remove your old config.sh.
d415 1
a415 1
=item Propagating your changes to config.sh
d417 2
a418 9
If you make any changes to config.sh, you should propagate
them to all the .SH files by running

	sh Configure -S

You will then have to rebuild by running

	make depend
	make
d426 1
a426 1
L<"Changing the installation directory"> for an example.
d430 3
a432 3
Many of the system dependencies are contained in config.h.
Configure builds config.h by running the config_h.SH script.
The values for the variables are taken from config.sh.
d434 2
a435 2
If there are any problems, you can edit config.h directly.  Beware,
though, that the next time you run Configure, your changes will be
d441 9
a449 14
line, they can be made in cflags.SH.  For instance, to turn off the
optimizer on toke.c, find the line in the switch structure for
toke.c and put the command optimize='-g' before the ;; .  You
can also edit cflags directly, but beware that your changes will be
lost the next time you run Configure.

To explore various ways of changing ccflags from within a hint file,
see the file hints/README.hints.

To change the C flags for all the files, edit config.sh and change either
$ccflags or $optimize, and then re-run

	sh Configure -S
	make depend
d451 1
a451 1
=item No sh
d453 2
a454 2
If you don't have sh, you'll have to copy the sample file Porting/config_H
to config.h and edit the config.h to reflect your system's peculiarities.
a457 47
=item Environment variable clashes

Configure uses a CONFIG variable that is reported to cause trouble on
ReliantUnix 5.44.  If your system sets this variable, you can try
unsetting it before you run Configure.  Configure should eventually
be fixed to avoid polluting the namespace of the environment.

=item Digital UNIX/Tru64 UNIX and BIN_SH

In Digital UNIX/Tru64 UNIX Configure might abort with

Build a threading Perl? [n]
Configure[2437]: Syntax error at line 1 : `config.sh' is not expected.

This indicates that Configure is being run with a broken Korn shell
(even though you think you are using a Bourne shell by using
"sh Configure" or "./Configure").  The Korn shell bug has been reported
to Compaq as of February 1999 but in the meanwhile, the reason ksh is
being used is that you have the environment variable BIN_SH set to
'xpg4'.  This causes /bin/sh to delegate its duties to /bin/posix/sh
(a ksh).  Unset the environment variable and rerun Configure.

=item HP-UX 11, pthreads, and libgdbm

If you are running Configure with -Dusethreads in HP-UX 11, be warned
that POSIX threads and libgdbm (the GNU dbm library) compiled before
HP-UX 11 do not mix.  This will cause a basic test run by Configure to
fail

Pthread internal error: message: __libc_reinit() failed, file: ../pthreads/pthread.c, line: 1096
Return Pointer is 0xc082bf33
sh: 5345 Quit(coredump)

and Configure will give up.  The cure is to recompile and install
libgdbm under HP-UX 11.

=item Porting information

Specific information for the OS/2, Plan9, VMS and Win32 ports is in the
corresponding README files and subdirectories.  Additional information,
including a glossary of all those config.sh variables, is in the Porting
subdirectory.

Ports for other systems may also be available.  You should check out
http://www.perl.com/CPAN/ports for current information on ports to
various other operating systems.

d462 6
a467 6
This will look for all the includes.  The output is stored in makefile.
The only difference between Makefile and makefile is the dependencies at
the bottom of makefile.  If you have to make any changes, you should edit
makefile, not Makefile since the Unix make command reads makefile first.
(On non-Unix systems, the output may be stored in a different file.
Check the value of $firstmakefile in your config.sh if in doubt.)
a476 5
If none of them help, and careful reading of the error message and
the relevant manual pages on your system doesn't help, you can
send a message to either the comp.lang.perl.misc newsgroup or to
perlbug@@perl.com with an accurate description of your problem.
See L<"Reporting Problems"> below.
d480 1
a480 1
=item hints
d485 18
a502 1
=item extensions
d504 3
a506 1
If you can successfully build miniperl, but the process crashes
d509 1
a509 1
	make minitest
d513 1
a513 1
=item locale
d515 1
a515 6
If you have any locale-related environment variables set, try unsetting
them.  I have some reports that some versions of IRIX hang while
running B<./miniperl configpm> with locales other than the C locale.
See the discussion under L<"make test"> below about locales and the
whole L<"Locale problems"> section in the file pod/perllocale.pod.
The latter is especially useful if you see something like this
d517 1
a517 6
	perl: warning: Setting locale failed.
	perl: warning: Please check that your locale settings:
	        LC_ALL = "En_US",
	        LANG = (unset)
	    are supported and installed on your system.
	perl: warning: Falling back to the standard locale ("C").
d519 1
a519 1
at Perl startup.
d521 1
a521 1
=item malloc duplicates
d523 1
a523 2
If you get duplicates upon linking for malloc et al, add -DEMBEDMYMALLOC
to your ccflags variable in config.sh.
d525 1
a525 1
=item varargs
d527 2
a528 9
If you get varargs problems with gcc, be sure that gcc is installed
correctly and that you are not passing -I/usr/include to gcc.  When using
gcc, you should probably have i_stdarg='define' and i_varargs='undef'
in config.sh.  The problem is usually solved by running fixincludes
correctly.  If you do change config.sh, don't forget to propagate
your changes (see L<"Propagating your changes to config.sh"> below).
See also the L<"vsprintf"> item below.

=item util.c
d530 1
a530 2
If you get error messages such as the following (the exact line
numbers and function name may vary in different versions of perl):
d532 2
a533 3
    util.c: In function `Perl_form':
    util.c:1107: number of arguments doesn't match prototype
    proto.h:125: prototype declaration
d535 4
a538 4
it might well be a symptom of the gcc "varargs problem".  See the
previous L<"varargs"> item.

=item Solaris and SunOS dynamic loading
d542 1
a542 1
-B/bin/ (for SunOS) or -B/usr/ccs/bin/ (for Solaris) to your
d544 1
a544 25
and ld are used.  Note that the trailing '/' is required.
Alternatively, you can use the GCC_EXEC_PREFIX
environment variable to ensure that Sun's as and ld are used.  Consult
your gcc documentation for further information on the -B option and
the GCC_EXEC_PREFIX variable.

One convenient way to ensure you are not using GNU as and ld is to
invoke Configure with

    sh Configure -Dcc='gcc -B/usr/ccs/bin/'

for Solaris systems.  For a SunOS system, you must use -B/bin/
instead.

Alternatively, recent versions of GNU ld reportedly work if you
include C<-Wl,-export-dynamic> in the ccdlflags variable in
config.sh.

=item ld.so.1: ./perl: fatal: relocation error:

If you get this message on SunOS or Solaris, and you're using gcc,
it's probably the GNU as or GNU ld problem in the previous item
L<"Solaris and SunOS dynamic loading">.

=item LD_LIBRARY_PATH
d547 1
a547 2
the LD_LIBRARY_PATH environment variable.  If you're creating a static
Perl library (libperl.a rather than libperl.so) it should build
a550 14
=item dlopen: stub interception failed

The primary cause of the 'dlopen: stub interception failed' message is
that the LD_LIBRARY_PATH environment variable includes a directory
which is a symlink to /usr/lib (such as /lib).

The reason this causes a problem is quite subtle.  The file libdl.so.1.0
actually *only* contains functions which generate 'stub interception
failed' errors!  The runtime linker intercepts links to
"/usr/lib/libdl.so.1.0" and links in internal implementation of those
functions instead.  [Thanks to Tim Bunce for this explanation.]

=item nm extraction

a556 178
or by answering the nm extraction question interactively.
If you have previously run Configure, you should not reuse your old
config.sh.

=item umask not found

If the build processes encounters errors relating to umask(), the problem
is probably that Configure couldn't find your umask() system call.
Check your config.sh.  You should have d_umask='define'.  If you don't,
this is probably the L<"nm extraction"> problem discussed above.  Also,
try reading the hints file for your system for further information.

=item vsprintf

If you run into problems with vsprintf in compiling util.c, the
problem is probably that Configure failed to detect your system's
version of vsprintf().  Check whether your system has vprintf().
(Virtually all modern Unix systems do.)  Then, check the variable
d_vprintf in config.sh.  If your system has vprintf, it should be:

	d_vprintf='define'

If Configure guessed wrong, it is likely that Configure guessed wrong
on a number of other common functions too.  This is probably
the L<"nm extraction"> problem discussed above.

=item do_aspawn

If you run into problems relating to do_aspawn or do_spawn, the
problem is probably that Configure failed to detect your system's
fork() function.  Follow the procedure in the previous item
on L<"nm extraction">.

=item __inet_* errors

If you receive unresolved symbol errors during Perl build and/or test
referring to __inet_* symbols, check to see whether BIND 8.1 is
installed.  It installs a /usr/local/include/arpa/inet.h that refers to
these symbols.  Versions of BIND later than 8.1 do not install inet.h
in that location and avoid the errors.  You should probably update to a
newer version of BIND.  If you can't, you can either link with the
updated resolver library provided with BIND 8.1 or rename
/usr/local/bin/arpa/inet.h during the Perl build and test process to
avoid the problem.

=item Optimizer

If you can't compile successfully, try turning off your compiler's
optimizer.  Edit config.sh and change the line

	optimize='-O'

to

	optimize=' '

then propagate your changes with B<sh Configure -S> and rebuild
with B<make depend; make>.

=item CRIPPLED_CC

If you still can't compile successfully, try adding a -DCRIPPLED_CC
flag.  (Just because you get no errors doesn't mean it compiled right!)
This simplifies some complicated expressions for compilers that get
indigestion easily.

=item Missing functions

If you have missing routines, you probably need to add some library or
other, or you need to undefine some feature that Configure thought was
there but is defective or incomplete.  Look through config.h for
likely suspects.  If Configure guessed wrong on a number of functions,
you might have the L<"nm extraction"> problem discussed above.

=item toke.c

Some compilers will not compile or optimize the larger files (such as
toke.c) without some extra switches to use larger jump offsets or
allocate larger internal tables.  You can customize the switches for
each file in cflags.  It's okay to insert rules for specific files into
makefile since a default rule only takes effect in the absence of a
specific rule.

=item Missing dbmclose

SCO prior to 3.2.4 may be missing dbmclose().  An upgrade to 3.2.4
that includes libdbm.nfs (which includes dbmclose()) may be available.

=item Note (probably harmless): No library found for -lsomething

If you see such a message during the building of an extension, but
the extension passes its tests anyway (see L<"make test"> below),
then don't worry about the warning message.  The extension
Makefile.PL goes looking for various libraries needed on various
systems; few systems will need all the possible libraries listed.
For example, a system may have -lcposix or -lposix, but it's
unlikely to have both, so most users will see warnings for the one
they don't have.  The phrase 'probably harmless' is intended to
reassure you that nothing unusual is happening, and the build
process is continuing.

On the other hand, if you are building GDBM_File and you get the
message

    Note (probably harmless): No library found for -lgdbm

then it's likely you're going to run into trouble somewhere along
the line, since it's hard to see how you can use the GDBM_File
extension without the -lgdbm library.

It is true that, in principle, Configure could have figured all of
this out, but Configure and the extension building process are not
quite that tightly coordinated.

=item sh: ar: not found

This is a message from your shell telling you that the command 'ar'
was not found.  You need to check your PATH environment variable to
make sure that it includes the directory with the 'ar' command.  This
is a common problem on Solaris, where 'ar' is in the /usr/ccs/bin
directory.

=item db-recno failure on tests 51, 53 and 55

Old versions of the DB library (including the DB library which comes
with FreeBSD 2.1) had broken handling of recno databases with modified
bval settings.  Upgrade your DB library or OS.

=item Bad arg length for semctl, is XX, should be ZZZ

If you get this error message from the lib/ipc_sysv test, your System
V IPC may be broken.  The XX typically is 20, and that is what ZZZ
also should be.  Consider upgrading your OS, or reconfiguring your OS
to include the System V semaphores.

=item lib/ipc_sysv........semget: No space left on device

Either your account or the whole system has run out of semaphores.  Or
both.  Either list the semaphores with "ipcs" and remove the unneeded
ones (which ones these are depends on your system and applications)
with "ipcrm -s SEMAPHORE_ID_HERE" or configure more semaphores to your
system.

=item GNU binutils

If you mix GNU binutils (nm, ld, ar) with equivalent vendor-supplied
tools you may be in for some trouble.  For example creating archives
with an old GNU 'ar' and then using a new current vendor-supplied 'ld'
may lead into linking problems.  Either recompile your GNU binutils
under your current operating system release, or modify your PATH not
to include the GNU utils before running Configure, or specify the
vendor-supplied utilities explicitly to Configure, for example by
Configure -Dar=/bin/ar.

=item Miscellaneous

Some additional things that have been reported for either perl4 or perl5:

Genix may need to use libc rather than libc_s, or #undef VARARGS.

NCR Tower 32 (OS 2.01.01) may need -W2,-Sl,2000 and #undef MKDIR.

UTS may need one or more of -DCRIPPLED_CC, -K or -g, and undef LSTAT.

FreeBSD can fail the lib/ipc_sysv.t test if SysV IPC has not been
configured to the kernel.  Perl tries to detect this, though, and
you will get a message telling what to do.

If you get syntax errors on '(', try -DCRIPPLED_CC.

Machines with half-implemented dbm routines will need to #undef I_ODBM

HP-UX 11 Y2K patch "Y2K-1100 B.11.00.B0125 HP-UX Core OS Year 2000
Patch Bundle" has been reported to break the io/fs test #18 which
tests whether utime() can change timestamps.  The Y2K patch seems to
break utime() so that over NFS the timestamps do not get changed
(on local filesystems utime() still works).
 
d561 7
a567 14
This will run the regression tests on the perl you just made (you
should run plain 'make' before 'make test' otherwise you won't have a
complete build).  If 'make test' doesn't say "All tests successful"
then something went wrong.  See the file t/README in the t subdirectory.

Note that you can't run the tests in background if this disables
opening of /dev/tty. You can use 'make test-notty' in that case but
a few tty tests will be skipped.

=head2 What if make test doesn't work?

If make test bombs out, just cd to the t directory and run ./TEST
by hand to see if it makes any difference.  If individual tests
bomb, you can run them by hand, e.g.,
d571 1
a571 16
Another way to get more detailed information about failed tests and
individual subtests is to cd to the t directory and run

	./perl harness

(this assumes that most basic tests succeed, since harness uses
complicated constructs).

You should also read the individual tests to see if there are any helpful
comments that apply to your system.

=over 4

=item locale

Note:  One possible reason for errors is that some external programs
d573 4
a576 5
B<make test> exercises them.  For example, this may happen if you have
one or more of these environment variables set:  LC_ALL LC_CTYPE
LC_COLLATE LANG.  In some versions of UNIX, the non-English locales
are known to cause programs to exhibit mysterious errors.

d578 9
a586 34

	setenv LC_ALL C

(for C shell) or

	LC_ALL=C;export LC_ALL

for Bourne or Korn shell) from the command line and then retry
make test.  If the tests then succeed, you may have a broken program that
is confusing the testing.  Please run the troublesome test by hand as
shown above and see whether you can locate the program.  Look for
things like:  exec, `backquoted command`, system, open("|...") or
open("...|").  All these mean that Perl is trying to run some
external program.

=item Out of memory

On some systems, particularly those with smaller amounts of RAM, some
of the tests in t/op/pat.t may fail with an "Out of memory" message.
Specifically, in perl5.004_64, tests 74 and 78 have been reported to
fail on some systems.  On my SparcStation IPC with 8 MB of RAM, test 78
will fail if the system is running any other significant tasks at the
same time.

Try stopping other jobs on the system and then running the test by itself:

	cd t; ./perl op/pat.t

to see if you have any better luck.  If your perl still fails this
test, it does not necessarily mean you have a broken perl.  This test
tries to exercise the regular expression subsystem quite thoroughly,
and may well be far more demanding than your normal usage.

=back
d591 1
a591 1
Configure; by default this is /usr/local/bin.  It will also try
d593 1
a593 1
pages, however.  You may need to be root to run B<make install>.  If you
d597 4
a600 9
=head2 Installing perl under different names

If you want to install perl under a name other than "perl" (for example,
when installing perl with special features enabled, such as debugging),
indicate the alternate name on the "make install" line, such as:

    make install PERLNAME=myperl

=head2 Installed files
d608 1
a608 1
make install will install the following:
a620 1
	h2ph		Extract constants and simple macros from C headers
a623 1
	pl2pm		Convert Perl 4 .pl files to Perl 5 .pm modules
d625 2
a626 4
	pod2latex, 	to other useful formats.
	pod2man, and
	pod2text
	splain		Describe Perl warnings and errors
d638 18
d657 1
a657 2
	/usr/local/lib/perl5/site_perl/5.005
	/usr/local/lib/perl5/site_perl/5.005/archname
d659 20
a678 2
where archname is something like sun4-sunos.  These directories
will be used for installing extensions.
d680 2
a681 59
Perl's *.h header files and the libperl.a library are also installed
under $archlib so that any user may later build new extensions, run the
optional Perl compiler, or embed the perl interpreter into another
program even if the Perl source is no longer available.

=head1 Coexistence with earlier versions of perl5

WARNING:  The upgrade from 5.004_0x to 5.005 is going to be a bit
tricky.  See L<"Upgrading from 5.004 to 5.005">  below.

In general, you can usually safely upgrade from one version of Perl (e.g.
5.004_04) to another similar version (e.g. 5.004_05) without re-compiling
all of your add-on extensions.  You can also safely leave the old version
around in case the new version causes you problems for some reason.
For example, if you want to be sure that your script continues to run
with 5.004_04, simply replace the '#!/usr/local/bin/perl' line at the
top of the script with the particular version you want to run, e.g.
#!/usr/local/bin/perl5.00404.

Most extensions will probably not need to be recompiled to use
with a newer version of perl.   Here is how it is supposed to work.
(These examples assume you accept all the Configure defaults.)

The directories searched by version 5.005 will be

    Configure variable		Default value
	$archlib 	/usr/local/lib/perl5/5.005/archname
	$privlib	/usr/local/lib/perl5/5.005
	$sitearch	/usr/local/lib/perl5/site_perl/5.005/archname
	$sitelib	/usr/local/lib/perl5/site_perl/5.005

while the directories searched by version 5.005_01 will be

	$archlib 	/usr/local/lib/perl5/5.00501/archname
	$privlib	/usr/local/lib/perl5/5.00501
	$sitearch	/usr/local/lib/perl5/site_perl/5.005/archname
	$sitelib	/usr/local/lib/perl5/site_perl/5.005

When you install an add-on extension, it gets installed into $sitelib (or
$sitearch if it is architecture-specific).  This directory deliberately
does NOT include the sub-version number (01) so that both 5.005 and
5.005_01 can use the extension.  Only when a perl version changes to
break backwards compatibility will the default suggestions for the
$sitearch and $sitelib version numbers be increased.

However, if you do run into problems, and you want to continue to use the
old version of perl along with your extension, move those extension files
to the appropriate version directory, such as $privlib (or $archlib).
(The extension's .packlist file lists the files installed with that
extension.  For the Tk extension, for example, the list of files installed
is in $sitearch/auto/Tk/.packlist.)  Then use your newer version of perl
to rebuild and re-install the extension into $sitelib.  This way, Perl
5.005 will find your files in the 5.005 directory, and newer versions
of perl will find your newer extension in the $sitelib directory.
(This is also why perl searches the site-specific libraries last.)

Alternatively, if you are willing to reinstall all your extensions
every time you upgrade perl, then you can include the subversion
number in $sitearch and $sitelib when you run Configure.
d683 7
a689 1
=head2 Maintaining completely separate versions
d691 1
a691 1
Many users prefer to keep all versions of perl in completely
d695 1
a695 1
	sh Configure -Dprefix=/opt/perl5.004
d697 1
a697 1
and adding /opt/perl5.004/bin to the shell PATH variable.  Such users
d701 11
a711 17
Others might share a common directory for maintenance sub-versions
(e.g. 5.004 for all 5.004_0x versions), but change directory with
each major version.

If you are installing a development subversion, you probably ought to
seriously consider using a separate directory, since development
subversions may not have all the compatibility wrinkles ironed out
yet.

=head2 Upgrading from 5.004 to 5.005

Extensions built and installed with versions of perl prior to 5.004_50
will need to be recompiled to be used with 5.004_50 and later.  You will,
however, be able to continue using 5.004 even after you install 5.005.
The 5.004 binary will still be able to find the extensions built under
5.004; the 5.005 binary will look in the new $sitearch and $sitelib
directories, and will not find them.
d717 2
a718 2
By default, the perl5 libraries go into /usr/local/lib/perl5/, so
they don't override the perl4 libraries in /usr/local/lib/perl/.
d721 1
a721 1
perl4.036.  That will not be touched by the perl5 installation
d724 1
a724 1
the #! line at the top of them by #!/usr/local/bin/perl4.036
a727 67
=head1 cd /usr/include; h2ph *.h sys/*.h

Some perl scripts need to be able to obtain information from
the system header files.  This command will convert the most commonly used
header files in /usr/include into files that can be easily interpreted
by perl.  These files will be placed in the architecture-dependent library
($archlib) directory you specified to Configure.

Note:  Due to differences in the C and perl languages, the
conversion of the header files is not perfect.  You will probably have
to hand-edit some of the converted files to get them to parse
correctly.  For example, h2ph breaks spectacularly on type casting and
certain structures.

=head1 installhtml --help

Some sites may wish to make perl documentation available in HTML
format.  The installhtml utility can be used to convert pod
documentation into linked HTML files and install them.

The following command-line is an example of one used to convert
perl documentation:

  ./installhtml                   \
      --podroot=.                 \
      --podpath=lib:ext:pod:vms   \
      --recurse                   \
      --htmldir=/perl/nmanual     \
      --htmlroot=/perl/nmanual    \
      --splithead=pod/perlipc     \
      --splititem=pod/perlfunc    \
      --libpods=perlfunc:perlguts:perlvar:perlrun:perlop \
      --verbose

See the documentation in installhtml for more details.  It can take
many minutes to execute a large installation and you should expect to
see warnings like "no title", "unexpected directive" and "cannot
resolve" as the files are processed. We are aware of these problems
(and would welcome patches for them).

You may find it helpful to run installhtml twice. That should reduce
the number of "cannot resolve" warnings.

=head1 cd pod && make tex && (process the latex files)

Some sites may also wish to make the documentation in the pod/ directory
available in TeX format.  Type

	(cd pod && make tex && <process the latex files>)

=head1 Reporting Problems

If you have difficulty building perl, and none of the advice in this file
helps, and careful reading of the error message and the relevant manual
pages on your system doesn't help either, then you should send a message
to either the comp.lang.perl.misc newsgroup or to perlbug@@perl.com with
an accurate description of your problem.

Please include the output of the ./myconfig shell script that comes with
the distribution.  Alternatively, you can use the perlbug program that
comes with the perl distribution, but you need to have perl compiled
before you can use it.  (If you have not installed it yet, you need to
run C<./perl -Ilib utils/perlbug> instead of a plain C<perlbug>.)

You might also find helpful information in the Porting directory of the
perl distribution.

d730 2
a731 2
Read the manual entries before running perl.  The main documentation
is in the pod/ subdirectory and should have been installed during the
d733 2
a734 17
can type B<perldoc perl> to use the supplied perldoc script.  This is
sometimes useful for finding things in the library modules.

Under UNIX, you can produce a documentation book in postscript form,
along with its table of contents, by going to the pod/ subdirectory and
running (either):

	./roffitall -groff		# If you have GNU groff installed
	./roffitall -psroff		# If you have psroff

This will leave you with two postscript files ready to be printed.
(You may need to fix the roffitall command to use your local troff
set-up.)

Note that you must have performed the installation already before running
the above, since the script collects the installed files to generate
the documentation.
d738 2
a739 15
Original author:  Andy Dougherty doughera@@lafayette.edu , borrowing very
heavily from the original README by Larry Wall, with lots of helpful
feedback and additions from the perl5-porters@@perl.org folks.

If you have problems, corrections, or questions, please see
L<"Reporting Problems"> above.

=head1 REDISTRIBUTION

This document is part of the Perl package and may be distributed under
the same terms as perl itself.

If you are distributing a modified version of perl (perhaps as part of
a larger package) please do modify these installation instructions and
the contact information to match your distribution.
d743 1
a743 1
$Id: INSTALL,v 1.42 1998/07/15 18:04:44 doughera Released $
@


1.1.1.3
log
@virgin perl 5.6.0
@
text
@d7 1
a7 6
First, make sure you are installing an up-to-date version of Perl.   If
you didn't get your Perl source from CPAN, check the latest version at
<URL:http://www.perl.com/CPAN/src/>.

The basic steps to build and install perl5 on a Unix system
with all the defaults are:
d10 1
a10 1
	sh Configure -de
a21 9
The above commands will install Perl to /usr/local or /opt, depending
on the platform.  If that's not okay with you, use

	rm -f config.sh Policy.sh
	sh Configure
	make
	make test
	make install

a24 3
If you have problems, corrections, or questions, please see
L<"Reporting Problems"> below.

d40 1
a40 2
Although most of the defaults are probably fine for most users,
you should probably at least skim through this entire document before
d49 1
a49 5
system.  (Unixware users should use the svr4.sh hint file.)  If
there is a README file for your platform, then you should read
that too.  Additional information is in the Porting/ directory.

=head1 WARNING:  This version requires an extra step to build old extensions.
d51 1
a51 4
5.005_53 and later releases do not export unadorned
global symbols anymore.  This means you may need to build older
extensions that have not been updated for the new naming convention
with:
d53 5
a57 23
	perl Makefile.PL POLLUTE=1
	
Alternatively, you can enable CPP symbol pollution wholesale by
building perl itself with:

	sh Configure -Accflags=-DPERL_POLLUTE

pod/perldelta.pod contains more details about this.

=head1 WARNING:  This version may not be binary compatible with Perl 5.005.

Using the default Configure options for building perl should get you
a perl that will be binary compatible with the 5.005 release.

However, if you run Configure with any custom options, such as
-Dusethreads, -Dusemultiplicity, -Dusemymalloc, -Ubincompat5005 etc.,
the resulting perl will not be binary compatible.  Under these
circumstances, if you have dynamically loaded extensions that were
built under perl 5.005, you will need to rebuild and reinstall all
those extensions to use them with 5.6.

Pure perl modules without XS or C code should continue to work fine
without reinstallation.  See the discussions below on
d59 1
a59 1
L<"Upgrading from 5.005 to 5.6"> for more details.
d63 1
a63 1
On a related issue, old modules may possibly be affected by the
d65 1
a65 5
pod/perldelta.pod (and pod/perl500Xdelta.pod) for a description of
what's changed.  See your installed copy of the perllocal.pod
file for a (possibly incomplete) list of locally installed modules.
Also see CPAN::autobundle for one way to make a "bundle" of your
currently installed modules.
d71 1
a71 1
Another alternative may be to use a tool like ansi2knr to convert the
d74 3
a76 3
in the Perl sources.  ansi2knr is usually found as part of the freely
available Ghostscript distribution.  Another similar tool is
unprotoize, distributed with GCC.  Since unprotoize requires GCC to
a83 3
Although Perl can be compiled using a C++ compiler, the Configure script
does not work with some C++ compilers.

d86 4
a89 4
The complete perl5 source tree takes up about 20 MB of disk space.
After completing make, it takes up roughly 30 MB, though the actual
total is likely to be quite system-dependent.  The installation
directories need something on the order of 20 MB, though again that
d110 1
a110 1
not re-use your old config.sh.  Simply remove it
d112 1
a112 1
	rm -f config.sh
d124 3
a126 6
Also, be careful to check your architecture name.  For example, some
Linux distributions use i386, while others may use i486.  If you build
it yourself, Configure uses the output of the arch command, which
might be i586 or i686 instead.  If you pick up a precompiled binary, or
compile extensions on different systems, they might not all agree on
the architecture name.
d131 4
a134 7
If your reason to reuse your old config.sh is to save your particular
installation choices, then you can probably achieve the same effect by
using the Policy.sh file.  See the section on L<"Site-wide Policy
settings"> below.  If you wish to start with a fresh distribution, you
also need to remove any old Policy.sh files you may have with

	rm -f Policy.sh
d140 3
a142 7
you about.  To accept the default, just press RETURN.   The default is
almost always okay.  It is normal for some things to be "NOT found",
since Configure often searches for many different ways of performing
the same function.

At any Configure prompt, you can type  &-d and Configure will use the
defaults from then on.
a146 17
=head2 Altering config.sh variables for C compiler switches etc.

For most users, all of the Configure defaults are fine.  Configure
also has several convenient options which are all described below.
However, if Configure doesn't have an option to do what you want,
you can change Configure variables after the platform hints have been
run, by using Configure's -A switch.  For example, here's how to add
a couple of extra flags to C compiler invocations:

	sh Configure -Accflags="-DPERL_Y2KWARN -DPERL_POLLUTE_MALLOC"

For more help on Configure switches, run:

	sh Configure -h

=head2 Common Configure options

d151 1
a151 5
=over 4

=item gcc

To compile with gcc you should run
d158 2
a159 1
=item Installation prefix
d162 4
a165 7
/usr/local/{bin, lib, man}.  (See L<"Installation Directories">
and L<"Coexistence with earlier versions of perl5"> below for
further details.)

You can specify a different 'prefix' for the default installation
directory, when Configure prompts you or by using the Configure command
line option -Dprefix='/some/directory', e.g.
d169 8
a176 11
If your prefix contains the string "perl", then the suggested
directory structure is simplified.  For example, if you use
prefix=/opt/perl, then Configure will suggest /opt/perl/lib instead of
/opt/perl/lib/perl5/.  Again, see L<"Installation Directories"> below
for more details.

NOTE:  You must not specify an installation directory that is the same
as or below your perl source directory.  If you do, installperl will
attempt infinite recursion.

=item /usr/bin/perl
d178 2
a179 2
It may seem obvious, but Perl is useful only when users can easily
find it.  It's often a good idea to have both /usr/bin/perl and
d181 2
a182 11
careful, however, not to overwrite a version of perl supplied by your
vendor unless you are sure you know what you are doing.

By default, Configure will arrange for /usr/bin/perl to be linked to
the current version of perl.  You can turn off that behavior by running

	Configure -Uinstallusrbinperl

or by answering 'no' to the appropriate Configure prompt.

In any case, system administrators are strongly encouraged to
d187 2
a188 1
=item Overriding an old config.sh
d190 4
a193 4
If you want to use your old config.sh but override some of the items
with command line options, you need to use B<Configure -O>.

=back
d218 1
a218 1
Cross compiling and compiling in a different directory are not supported.
d223 144
a371 3
Further, there are a number of additions to the installation
directories since 5.005, so reusing your old config.sh may not
be sufficient to put everything where you want it.
d375 2
a376 2
process, you can answer a question with  &-d  and Configure will use
the defaults from then on.
d378 2
a379 5
The defaults are intended to be reasonable and sensible for most
people building from sources.  Those who build and distribute binary
distributions or who export perl to a range of systems will probably
need to alter them.  If you are content to just accept the defaults,
you can safely skip the next section.
d381 5
a385 1
The directories set up by Configure fall into three broad categories.
d387 3
a389 1
=over 4
d391 1
a391 1
=item Directories for the perl distribution
d393 3
a395 16
By default, Configure will use the following directories for 5.6.0.
$version is the full perl version number, including subversion, e.g.
5.6.0 or 5.6.1, and $archname is a string like sun4-sunos,
determined by Configure.  The full definitions of all Configure
variables are in the file Porting/Glossary.

    Configure variable	Default value
    $prefix		/usr/local
    $bin		$prefix/bin
    $scriptdir		$prefix/bin
    $privlib		$prefix/lib/perl5/$version
    $archlib 		$prefix/lib/perl5/$version/$archname
    $man1dir		$prefix/man/man1
    $man3dir		$prefix/man/man3
    $html1dir		(none)
    $html3dir		(none)
d397 1
a397 1
Actually, Configure recognizes the SVR3-style
d399 8
a406 113
instead.  Also, if $prefix contains the string "perl", the library
directories are simplified as described below.  For simplicity, only
the common style is shown here.

=item Directories for site-specific add-on files

After perl is installed, you may later wish to add modules (e.g. from
CPAN) or scripts.  Configure will set up the following directories to
be used for installing those add-on modules and scripts.

    Configure variable	Default value
    $siteprefix		$prefix
    $sitebin		$siteprefix/bin
    $sitescript		$siteprefix/bin
    $sitelib		$siteprefix/lib/perl5/site_perl/$version
    $sitearch		$siteprefix/lib/perl5/site_perl/$version/$archname
    $siteman1		$siteprefix/man/man1
    $siteman3		$siteprefix/man/man3
    $sitehtml1		(none)
    $sitehtml3		(none)

By default, ExtUtils::MakeMaker will install architecture-independent
modules into $sitelib and architecture-dependent modules into $sitearch.

NOTE:  As of 5.6.0, ExtUtils::MakeMaker will use $sitelib and $sitearch,
but will not use the other site-specific directories.  Volunteers to
fix this are needed.

=item Directories for vendor-supplied add-on files

Lastly, if you are building a binary distribution of perl for
distribution, Configure can optionally set up the following directories
for you to use to distribute add-on modules.

    Configure variable	Default value
    $vendorprefix	(none)
    (The next ones are set only if vendorprefix is set.)
    $vendorbin		$vendorprefix/bin
    $vendorscript	$vendorprefix/bin
    $vendorlib		$vendorprefix/lib/perl5/vendor_perl/$version
    $vendorarch		$vendorprefix/lib/perl5/vendor_perl/$version/$archname
    $vendorman1		$vendorprefix/man/man1
    $vendorman3		$vendorprefix/man/man3
    $vendorhtml1	(none)
    $vendorhtml3	(none)

These are normally empty, but may be set as needed.  For example,
a vendor might choose the following settings:

	$prefix		/usr/bin
	$siteprefix	/usr/local/bin
	$vendorprefix	/usr/bin

This would have the effect of setting the following:

	$bin		/usr/bin
	$scriptdir	/usr/bin
	$privlib	/usr/lib/perl5/$version
	$archlib 	/usr/lib/perl5/$version/$archname
	$man1dir	/usr/man/man1
	$man3dir	/usr/man/man3

	$sitebin	/usr/local/bin
	$sitescript	/usr/local/bin
	$sitelib	/usr/local/lib/perl5/site_perl/$version
	$sitearch	/usr/local/lib/perl5/site_perl/$version/$archname
	$siteman1	/usr/local/man/man1
	$siteman3	/usr/local/man/man3

	$vendorbin	/usr/bin
	$vendorscript	/usr/bin
	$vendorlib	/usr/lib/perl5/vendor_perl/$version
	$vendorarch	/usr/lib/perl5/vendor_perl/$version/$archname
	$vendorman1	/usr/man/man1
	$vendorman3	/usr/man/man3

Note how in this example, the vendor-supplied directories are in the
/usr hierarchy, while the directories reserved for the end-user are in
the /usr/local hierarchy.

NOTE:  As of 5.6.0, ExtUtils::MakeMaker does not use these directories.
Volunteers to fix this are needed.

The entire installed library hierarchy is installed in locations with
version numbers, keeping the installations of different versions distinct.
However, later installations of Perl can still be configured to search the
installed libraries corresponding to compatible earlier versions.
See L<"Coexistence with earlier versions of perl5"> below for more details
on how Perl can be made to search older version directories.

Of course you may use these directories however you see fit.  For
example, you may wish to use $siteprefix for site-specific files that
are stored locally on your own disk and use $vendorprefix for
site-specific files that are stored elsewhere on your organization's
network.  One way to do that would be something like

	sh Configure -Dsiteprefix=/usr/local -Dvendorprefix=/usr/share/perl

=item otherlibdirs

As a final catch-all, Configure also offers an $otherlibdirs
variable.  This variable contains a colon-separated list of additional
directories to add to @@INC.  By default, it will be set to
$prefix/site_perl if Configure detects that you have 5.004-era modules
installed there.  However, you can set it to anything you like.

=item Man Pages

In versions 5.005_57 and earlier, the default was to store module man
pages in a version-specific directory, such as
/usr/local/lib/perl5/$version/man/man3.  The default for 5.005_58 and
after is /usr/local/man/man3 so that most users can find the man pages
without resetting MANPATH.
d408 2
a409 1
You can continue to use the old default from the command line with
d411 1
a411 1
	sh Configure -Dman3dir=/usr/local/lib/perl5/5.6.0/man/man3
d417 3
a419 4
Again, these are just the defaults, and can be changed as you run
Configure.

=item HTML pages
d421 20
a440 17
As of perl5.005_57, the standard perl installation does not do
anything with HTML documentation, but that may change in the future.
Further, some add-on modules may wish to install HTML documents.  The
html Configure variables listed above are provided if you wish to
specify where such documents should be placed.  The default is "none",
but will likely eventually change to something useful based on user
feedback.

=back

Some users prefer to append a "/share" to $privlib and $sitelib
to emphasize that those directories can be shared among different
architectures.

Note that these are just the defaults.  You can actually structure the
directories any way you like.  They don't even have to be on the same
filesystem.
d446 2
a447 12
If you specify a prefix that contains the string "perl", then the
library directory structure is slightly simplified.  Instead of
suggesting $prefix/lib/perl5/, Configure will suggest $prefix/lib.

Thus, for example, if you Configure with
-Dprefix=/opt/perl, then the default library directories for 5.6.0 are

    Configure variable	Default value
	$privlib	/opt/perl/lib/5.6.0
	$archlib	/opt/perl/lib/5.6.0/$archname
	$sitelib	/opt/perl/lib/site_perl/5.6.0
	$sitearch	/opt/perl/lib/site_perl/5.6.0/$archname
d456 4
a459 4
packages, or users building binary packages for distribution may also
wish to install perl into a different directory and use that
management software to move perl to its final destination.  This
section describes how to do that.
d462 16
a477 3
could edit config.sh and change all the install* variables to point to
/tmp/perl5 instead of /usr/local, or you could simply use the
following command line:
d479 1
a479 1
	sh Configure -Dinstallprefix=/tmp/perl5
d481 4
a484 1
(replace /tmp/perl5 by a directory of your choice).
d487 1
a487 1
modules, they too will get installed in under '/tmp/perl5' if you
d499 1
a499 1
    # Set up to install perl into a different directory,
d501 1
a501 1
    sh Configure -Dinstallprefix=/tmp/perl5 -Dprefix=/opt/perl -des
a534 9
If the generated Policy.sh file is unsuitable, you may freely edit it
to contain any valid shell commands.  It will be run just after the
platform-specific hints files.

Note:  Since the directory hierarchy for 5.6.0 contains a number of
new vendor* and site* entries, your Policy.sh file will probably not
set them to your desired values.  I encourage you to run Configure
interactively to be sure it puts things where you want them.

d544 3
a546 3
On some platforms, perl5.005 and later can be compiled with
experimental support for threads.  To enable this, read the file
README.threads, and then try:
a554 14
As of v5.5.64, perl has two different internal threads implementations.
The 5.005 version (5005threads) and an interpreter-based implementation
(ithreads) with one interpreter per thread.  By default, Configure selects
ithreads if -Dusethreads is specified.  However, you can select the old
5005threads behavior instead by either

	sh Configure -Dusethreads -Duse5005threads

or by
	sh Configure -Dusethreads -Uuseithreads

Eventually (by perl v5.6.0) this internal confusion ought to disappear,
and these options may disappear as well.

d596 24
a619 6
Note:  On some systems, sfio's iffe configuration script fails to
detect that you have an atexit function (or equivalent).  Apparently,
this is a problem at least for some versions of Linux and SunOS 4.
Configure should detect this problem and warn you about problems with
_exit vs. exit.  If you have this problem, the fix is to go back to
your sfio sources and correct iffe's guess about atexit.
a641 7
=head2 Dynamic Loading

By default, Configure will compile perl to use dynamic loading if
your system supports it.  If you want to force perl to be compiled
statically, you can either choose this when Configure prompts you or
you can use the Configure command line option -Uusedl.

d682 1
a682 2
NeXTSTEP/OPENSTEP/Darwin, LIBRARY_PATH for BeOS, SHLIB_PATH for
HP-UX, LIBPATH for AIX, PATH for Cygwin) must be set up to include
d684 1
a684 1
be created.  Configure arranges makefile to have the correct shared
d706 1
a706 1
unexpected reason Configure fails to set up makefile correctly.)
d731 2
a732 1
variables in config.sh to point to your new architecture-dependent library.
d736 19
a754 15
Perl relies heavily on malloc(3) to grow data structures as needed,
so perl's performance can be noticeably affected by the performance of
the malloc function on your system.  The perl source is shipped with a
version of malloc that has been optimized for the typical requests from
perl, so there's a chance that it may be both faster and use less memory
than your system malloc.

However, if your system already has an excellent malloc, or if you are
experiencing difficulties with extensions that use third-party libraries
that call malloc, then you should probably use your system's malloc.
(Or, you might wish to explore the malloc flags discussed below.)

=over 4

=item Using the system malloc
d762 14
a775 1
=item -DPERL_POLLUTE_MALLOC
d777 4
a780 24
NOTE: This flag is enabled automatically on some platforms if you
asked for binary compatibility with version 5.005, or if you just
run Configure to accept all the defaults on those platforms.  You
can refuse the automatic binary compatibility flags wholesale by
running:

	sh Configure -Ubincompat5005

or by answering 'n' at the appropriate prompt.

Perl's malloc family of functions are called Perl_malloc(),
Perl_realloc(), Perl_calloc() and Perl_mfree().  When this flag is
not enabled, the names do not clash with the system versions of
these functions.

If enabled, Perl's malloc family of functions will have the same
names as the system versions.  This may be sometimes required when you
have libraries that like to free() data that may have been allocated
by Perl_malloc() and vice versa.

Note that enabling this option may sometimes lead to duplicate symbols
from the linker for malloc et al.  In such cases, the system probably
does not allow its malloc functions to be fully replaced with custom
versions.
d795 8
a802 8
cc -g2.  Check your man pages for cc(1) and also any hint file for
your system.)  Second, it will add -DDEBUGGING to your ccflags
variable in config.sh so that you can use B<perl -D> to access perl's
internal state.  (Note: Configure will only add -DDEBUGGING by default
if you are not reusing your old config.sh.  If you want to reuse your
old config.sh, then you can just edit it and change the optimize and
ccflags variables by hand and then propagate your changes as shown in
L<"Propagating your changes to config.sh"> below.)
d810 1
a810 1
=head2 Extensions
d812 4
a815 100
By default, Configure will offer to build every extension which appears
to be supported.  For example, Configure will offer to build GDBM_File
only if it is able to find the gdbm library.  (See examples below.)
B, DynaLoader, Fcntl, IO, and attrs are always built by default.
Configure does not contain code to test for POSIX compliance, so POSIX
is always built by default as well.  If you wish to skip POSIX, you can
set the Configure variable useposix=false either in a hint file or from
the Configure command line.  Similarly, the Opcode extension is always
built by default, but you can skip it by setting the Configure variable
useopcode=false either in a hint file for from the command line.

If you unpack any additional extensions in the ext/ directory before
running Configure, then Configure will offer to build those additional
extensions as well.  Most users probably shouldn't have to do this --
it is usually easier to build additional extensions later after perl
has been installed.  However, if you wish to have those additional
extensions statically linked into the perl binary, then this offers a
convenient way to do that in one step.  (It is not necessary, however;
you can build and install extensions just fine even if you don't have
dynamic loading.  See lib/ExtUtils/MakeMaker.pm for more details.)

You can learn more about each of the supplied extensions by consulting the
documentation in the individual .pm modules, located under the
ext/ subdirectory.

Even if you do not have dynamic loading, you must still build the
DynaLoader extension; you should just build the stub dl_none.xs
version.  (Configure will suggest this as the default.)

In summary, here are the Configure command-line variables you can set
to turn off each extension:

    B			(Always included by default)
    DB_File		i_db
    DynaLoader		(Must always be included as a static extension)
    Fcntl		(Always included by default)
    GDBM_File		i_gdbm
    IO			(Always included by default)
    NDBM_File		i_ndbm
    ODBM_File		i_dbm
    POSIX		useposix
    SDBM_File		(Always included by default)
    Opcode		useopcode
    Socket		d_socket
    Threads		use5005threads
    attrs		(Always included by default)

Thus to skip the NDBM_File extension, you can use

	sh Configure -Ui_ndbm

Again, this is taken care of automatically if you don't have the ndbm
library.

Of course, you may always run Configure interactively and select only
the extensions you want.

Note:  The DB_File module will only work with version 1.x of Berkeley
DB or newer releases of version 2.  Configure will automatically detect
this for you and refuse to try to build DB_File with earlier
releases of version 2.

If you re-use your old config.sh but change your system (e.g. by
adding libgdbm) Configure will still offer your old choices of extensions
for the default answer, but it will also point out the discrepancy to
you.

Finally, if you have dynamic loading (most modern Unix systems do)
remember that these extensions do not increase the size of your perl
executable, nor do they impact start-up time, so you probably might as
well build all the ones that will work on your system.

=head2 Including locally-installed libraries

Perl5 comes with interfaces to number of database extensions, including
dbm, ndbm, gdbm, and Berkeley db.  For each extension, if
Configure can find the appropriate header files and libraries, it will
automatically include that extension.  The gdbm and db libraries
are not included with perl.  See the library documentation for
how to obtain the libraries.

If your database header (.h) files are not in a directory normally
searched by your C compiler, then you will need to include the
appropriate -I/your/directory option when prompted by Configure.  If
your database library (.a) files are not in a directory normally
searched by your C compiler and linker, then you will need to include
the appropriate -L/your/directory option when prompted by Configure.
See the examples below.

=head2 Examples

=over 4

=item gdbm in /usr/local

Suppose you have gdbm and want Configure to find it and build the
GDBM_File extension.  This example assumes you have gdbm.h
installed in /usr/local/include/gdbm.h and libgdbm.a installed in
/usr/local/lib/libgdbm.a.  Configure should figure all the
necessary steps out automatically.
d817 3
a819 44
Specifically, when Configure prompts you for flags for
your C compiler, you should include  -I/usr/local/include.

When Configure prompts you for linker flags, you should include
-L/usr/local/lib.

If you are using dynamic loading, then when Configure prompts you for
linker flags for dynamic loading, you should again include
-L/usr/local/lib.

Again, this should all happen automatically.  This should also work if
you have gdbm installed in any of (/usr/local, /opt/local, /usr/gnu,
/opt/gnu, /usr/GNU, or /opt/GNU).

=item gdbm in /usr/you

Suppose you have gdbm installed in some place other than /usr/local/,
but you still want Configure to find it.  To be specific, assume you
have /usr/you/include/gdbm.h and /usr/you/lib/libgdbm.a.  You
still have to add -I/usr/you/include to cc flags, but you have to take
an extra step to help Configure find libgdbm.a.  Specifically, when
Configure prompts you for library directories, you have to add
/usr/you/lib to the list.

It is possible to specify this from the command line too (all on one
line):

	sh Configure -de \
		-Dlocincpth="/usr/you/include" \
		-Dloclibpth="/usr/you/lib"

locincpth is a space-separated list of include directories to search.
Configure will automatically add the appropriate -I directives.

loclibpth is a space-separated list of library directories to search.
Configure will automatically add the appropriate -L directives.  If
you have some libraries under /usr/local/ and others under
/usr/you, then you have to include both, namely

	sh Configure -de \
		-Dlocincpth="/usr/you/include /usr/local/include" \
		-Dloclibpth="/usr/you/lib /usr/local/lib"

=back
a822 3
If you run into problems, try some of the following ideas.
If none of them help, then see L<"Reporting Problems"> below.

d913 2
a914 1
does no checking that your changes make sense.
d946 2
a947 3
If you don't have sh, you'll have to copy the sample file
Porting/config.sh to config.sh and edit your config.sh to reflect your
system's peculiarities.  See Porting/pumpkin.pod for more information.
d960 1
a960 1
In Digital UNIX/Tru64 UNIX, Configure might abort with
d992 1
a992 1
subdirectory.  Especially Porting/Glossary should come in handy.
a997 5
If you plan to port Perl to a new architecture study carefully the
section titled "Philosophical Issues in Patching and Porting Perl"
in the file Porting/pumpkin.pod and the file Porting/patching.pod.
Study also how other non-UNIX ports have solved problems.

a1015 2
=head2 What if it doesn't work?

d1018 4
a1021 2
the relevant manual pages on your system doesn't help,
then see L<"Reporting Problems"> below.
d1057 5
a1186 8
=item #error "No DATAMODEL_NATIVE specified"

This is a common error when trying to build perl on Solaris 2.6 with a
gcc installation from Solaris 2.5 or 2.5.1.  The Solaris header files
changed, so you need to update your gcc installation.  You can either
rerun the fixincludes script from gcc or take the opportunity to
update your gcc installation.

d1203 4
a1206 7
If you still can't compile successfully, try:

	sh Configure -Accflags=-DCRIPPLED_CC

This flag simplifies some complicated expressions for compilers that get
indigestion easily.  (Just because you get no errors doesn't mean it
compiled right!)
d1319 1
a1319 1

d1324 4
a1327 3
This will run the regression tests on the perl you just made.  If
'make test' doesn't say "All tests successful" then something went
wrong.  See the file t/README in the t subdirectory.
d1383 4
a1386 2
For example, on my SparcStation IPC with 12 MB of RAM, in perl5.5.670,
test 85 will fail if run under either t/TEST or t/harness.
a1415 9
You can separately change the base used for versioned names (like
"perl5.005") by setting PERLNAME_VERBASE, like

    make install PERLNAME=perl5 PERLNAME_VERBASE=perl

This can be useful if you have to install perl as "perl5" (due to an
ancient version in /usr/bin supplied by your vendor, eg).  Without this
the versioned binary would be called "perl55.005".

a1446 1
	dprofpp		Perl code profile post-processor
d1450 4
a1453 3
	man pages	in $man1dir, usually /usr/local/man/man1.
	module man
	pages		in $man3dir, usually /usr/local/man/man3.
d1456 8
a1463 2
Installperl will also create the directories listed above
in L<"Installation Directories">.
d1466 1
a1466 1
under $archlib so that any user may later build new modules, run the
d1472 3
d1488 1
a1488 2
Suppose you already have version 5.005_03 installed.  The directories
searched by 5.005_03 are
d1490 34
a1523 59
	/usr/local/lib/perl5/5.00503/$archname
	/usr/local/lib/perl5/5.00503
	/usr/local/lib/perl5/site_perl/5.005/$archname
	/usr/local/lib/perl5/site_perl/5.005

Beginning with 5.6.0 the version number in the site libraries are
fully versioned.  Now, suppose you install version 5.6.0.  The directories
searched by version 5.6.0 will be

	/usr/local/lib/perl5/5.6.0/$archname
	/usr/local/lib/perl5/5.6.0
	/usr/local/lib/perl5/site_perl/5.6.0/$archname
	/usr/local/lib/perl5/site_perl/5.6.0

	/usr/local/lib/perl5/site_perl/5.005/$archname
	/usr/local/lib/perl5/site_perl/5.005
	/usr/local/lib/perl5/site_perl/

Notice the last three entries -- Perl understands the default structure
of the $sitelib directories and will look back in older, compatible
directories.  This way, modules installed under 5.005_03 will continue
to be usable by 5.005_03 but will also accessible to 5.6.0.  Further,
suppose that you upgrade a module to one which requires features
present only in 5.6.0.  That new module will get installed into
/usr/local/lib/perl5/site_perl/5.6.0 and will be available to 5.6.0,
but will not interfere with the 5.005_03 version.

The last entry, /usr/local/lib/perl5/site_perl/, is there so that
5.6.0 will look for 5.004-era pure perl modules.

Lastly, suppose you now install version 5.6.1, which we'll assume is
binary compatible with 5.6.0 and 5.005.  The directories searched
by 5.6.1 (if you don't change the Configure defaults) will be:

	/usr/local/lib/perl5/5.6.1/$archname
	/usr/local/lib/perl5/5.6.1
	/usr/local/lib/perl5/site_perl/5.6.1/$archname
	/usr/local/lib/perl5/site_perl/5.6.1

	/usr/local/lib/perl5/site_perl/5.6.0/$archname
	/usr/local/lib/perl5/site_perl/5.6.0

	/usr/local/lib/perl5/site_perl/5.005/$archname
	/usr/local/lib/perl5/site_perl/5.005
	/usr/local/lib/perl5/site_perl/

Assuming the users in your site are still actively using perl 5.6.0 and
5.005 after you installed 5.6.1, you can continue to install add-on
extensions using any of perl 5.6.1, 5.6.0, or 5.005.  The installations
of these different versions remain distinct, but remember that the newer
versions of perl are automatically set up to search the site libraries of
the older ones.  This means that installing a new extension with 5.005
will make it visible to all three versions.  Later, if you install the
same extension using, say, perl 5.6.1, it will override the 5.005-installed
version, but only for perl 5.6.1.

This way, you can choose to share compatible extensions, but also upgrade
to a newer version of an extension that may be incompatible with earlier
versions, without breaking the earlier versions' installations.
d1528 2
a1529 4
separate directories.  This guarantees that an update to one version
won't interfere with another version.  (The defaults guarantee this for
libraries after 5.6.0, but not for executables. TODO?)  One convenient
way to do this is by using a separate prefix for each version, such as
d1546 1
a1546 1
=head2 Upgrading from 5.005 to 5.6.0
d1548 6
a1553 9
Most extensions built and installed with versions of perl
prior to 5.005_50 will not need to be recompiled to be used with
5.6.0.  If you find you do need to rebuild an extension with 5.6.0,
you may safely do so without disturbing the 5.005 installation.
(See L<"Coexistence with earlier versions of perl5"> above.)

See your installed copy of the perllocal.pod file for a (possibly
incomplete) list of locally installed modules.  Note that you want
perllocal.pod not perllocale.pod for installed module information.
d1566 3
a1568 3
the #! line at the top of them by #!/usr/local/bin/perl4.036 (or
whatever the appropriate pathname is).  See pod/perltrap.pod for
possible problems running perl4 scripts under perl5.
d1572 2
a1573 2
Some perl scripts need to be able to obtain information from the
system header files.  This command will convert the most commonly used
d1575 2
a1576 2
by perl.  These files will be placed in the architecture-dependent
library ($archlib) directory you specified to Configure.
d1578 5
a1582 5
Note:  Due to differences in the C and perl languages, the conversion
of the header files is not perfect.  You will probably have to
hand-edit some of the converted files to get them to parse correctly.
For example, h2ph breaks spectacularly on type casting and certain
structures.
a1589 3
Currently, the supplied ./installhtml script does not make use of the
html Configure variables.  This should be fixed in a future release.

d1634 2
a1635 10
Please try to make your message brief but clear.  Trim out unnecessary
information.  Do not include large files (such as config.sh or a complete
Configure or make log) unless absolutely necessary.  Do not include a
complete transcript of your build session.  Just include the failing
commands, the relevant error messages, and whatever preceding commands
are necessary to give the appropriate context.  Plain text should
usually be sufficient--fancy attachments or encodings may actually
reduce the number of people who read your message.  Your message
will get relayed to over 400 subscribers around the world so please
try to keep it brief but clear.
d1672 2
a1673 1
the same terms as perl itself, with the following additional request:
d1675 2
a1676 2
a larger package) please B<do> modify these installation instructions
and the contact information to match your distribution.
d1680 1
a1680 1
$Id: INSTALL,v 1.58 1999/07/23 14:43:00 doughera Exp $
@


1.1.1.4
log
@stock perl 5.6.1
@
text
@d9 1
a9 1
<URL:http://www.cpan.org/src/>.
a26 9
B<NOTE>: starting from the release 5.6.0 Perl will use a version
scheme where even-numbered subreleases (like 5.6) are stable
maintenance releases and odd-numbered subreleases (like 5.7) are
unstable development releases.  Development releases should not be
used in production environments.  Fixes and new features are first
carefully tested in development releases and only if they prove
themselves to be worthy will they be migrated to the maintenance
releases.

d79 1
a79 1

d116 2
a117 36
Most C compilers are now ANSI-compliant.  However, a few current
computers are delivered with an older C compiler expressly for
rebuilding the system kernel, or for some other historical reason.
Alternatively, you may have an old machine which was shipped before
ANSI compliance became widespread.  Such compilers are not suitable
for building Perl.

If you find that your default C compiler is not ANSI-capable, but you
know that an ANSI-capable compiler is installed on your system, you
can tell F<Configure> to use the correct compiler by means of the
C<-Dcc=> command-line option -- see L<"gcc">.

If do not have an ANSI-capable compiler there are several avenues open
to you:

=over 4

=item *

You may try obtaining GCC, available from GNU mirrors worldwide,
listed at <URL:http://www.gnu.org/order/ftp.html>.  If, rather than
building gcc from source code, you locate a binary version configured
for your platform, be sure that it is compiled for the version of the
operating system that you are using.

=item *

You may purchase a commercial ANSI C compiler from your system
supplier or elsewhere.  (Or your organization may already have
licensed such software -- ask your colleagues to find out how to
access it.)  If there is a README file for your system in the Perl
distribution (for example, F<README.hpux>), it may contain advice on
suitable compilers.

=item *

d128 1
a128 1
form, be sure to email perlbug@@perl.org to let us know the steps you
a130 2
=back

a221 22
=head2 Building Perl outside of the source directory

Sometimes it is desirable to build Perl in a directory different from
where the sources are, for example if you want to keep your sources
read-only, or if you want to share the sources between different binary
architectures.

Starting from Perl 5.6.1 you can do this (if your file system supports
symbolic links) by
	
	mkdir /tmp/perl/build/directory
	cd /tmp/perl/build/directory
	sh /path/to/perl/source/Configure -Dmksymlinks ...

This will create in /tmp/perl/build/directory a tree of symbolic links
pointing to files in /path/to/perl/source.  The original files are left
unaffected.  After Configure has finished you can just say

	make all test

and Perl will be built and tested, all in /tmp/perl/build/directory.

d294 1
a294 8
Note: for development releases (odd subreleases, like 5.7, as opposed
to maintenance releases which have even subreleases, like 5.6)
if you want to use Configure -d, you will also need to supply -Dusedevel
to Configure, because the default answer to the question "do you really
want to Configure a development version?" is "no".  The -Dusedevel
skips that sanity check.

For example for my Solaris system, I usually use
d464 3
a466 20
directories to add to @@INC.  By default, it will be empty.
Perl will search these directories (including architecture and
version-specific subdirectories) for add-on modules and extensions.

=item APPLLIB_EXP

There is one other way of adding paths to @@INC at perl build time, and
that is by setting the APPLLIB_EXP C pre-processor token to a colon-
separated list of directories, like this

       sh Configure -Accflags='-DAPPLLIB_EXP=\"/usr/libperl\"'

The directories defined by APPLLIB_EXP get added to @@INC I<first>,
ahead of any others, and so provide a way to override the standard perl
modules should you, for example, want to distribute fixes without
touching the perl distribution proper.  And, like otherlib dirs,
version and architecture specific subdirectories are also searched, if
present, at run time.  Of course, you can still search other @@INC
directories ahead of those in APPLLIB_EXP by using any of the standard
run-time methods: $PERLLIB, $PERL5LIB, -I, use lib, etc.
a636 46
=head2 64 bit support.

If your platform does not have 64 bits natively, but can simulate them with
compiler flags and/or C<long long> or C<int64_t>, you can build a perl that
uses 64 bits.

There are actually two modes of 64-bitness: the first one is achieved
using Configure -Duse64bitint and the second one using Configure
-Duse64bitall.  The difference is that the first one is minimal and
the second one maximal.  The first works in more places than the second.

The C<use64bitint> does only as much as is required to get 64-bit
integers into Perl (this may mean, for example, using "long longs")
while your memory may still be limited to 2 gigabytes (because your
pointers could still be 32-bit).  Note that the name C<64bitint> does
not imply that your C compiler will be using 64-bit C<int>s (it might,
but it doesn't have to): the C<use64bitint> means that you will be
able to have 64 bits wide scalar values.

The C<use64bitall> goes all the way by attempting to switch also
integers (if it can), longs (and pointers) to being 64-bit.  This may
create an even more binary incompatible Perl than -Duse64bitint: the
resulting executable may not run at all in a 32-bit box, or you may
have to reboot/reconfigure/rebuild your operating system to be 64-bit
aware.

Natively 64-bit systems like Alpha and Cray need neither -Duse64bitint
nor -Duse64bitall.

    NOTE: 64-bit support is still experimental on most platforms.
    Existing support only covers the LP64 data model.  In particular, the
    LLP64 data model is not yet supported.  64-bit libraries and system
    APIs on many platforms have not stabilized--your mileage may vary.

=head2 Long doubles

In some systems you may be able to use long doubles to enhance the
range and precision of your double precision floating point numbers
(that is, Perl's numbers).  Use Configure -Duselongdouble to enable
this support (if it is available).

=head2 "more bits"

You can "Configure -Dusemorebits" to turn on both the 64-bit support
and the long double support.

d668 1
a668 1
The latest sfio is available from http://www.research.att.com/sw/tools/sfio/
d685 3
a705 7
=head2 SOCKS

Perl can be configured to be 'socksified', that is, to use the SOCKS
TCP/IP proxy protocol library.  SOCKS is used to give applications
access to transport layer network proxies.  Perl supports only SOCKS
Version 5.  You can find more about SOCKS from http://www.socks.nec.com/

a1031 33
=head2 Building DB, NDBM, and ODBM interfaces with Berkeley DB 3

Perl interface for DB3 is part of Berkeley DB, but if you want to
compile standard Perl DB/ODBM/NDBM interfaces, you must follow
following instructions.

Berkeley DB3 from Sleepycat Software is by default installed without
DB1 compatibility code (needed for DB_File interface) and without
links to compatibility files. So if you want to use packages written
for DB/ODBM/NDBM interfaces, you need to configure DB3 with
--enable-compat185 (and optionally with --enable-dump185) and create
additional references (suppose you are installing DB3 with
--prefix=/usr):

    ln -s libdb-3.so /usr/lib/libdbm.so
    ln -s libdb-3.so /usr/lib/libndbm.so
    echo '#define DB_DBM_HSEARCH 1' >dbm.h 
    echo '#include <db.h>' >>dbm.h
    install -m 0644 dbm.h /usr/include/dbm.h 
    install -m 0644 dbm.h /usr/include/ndbm.h

Optionally, if you have compiled with --enable-compat185 (not needed
for ODBM/NDBM):

    ln -s libdb-3.so /usr/lib/libdb1.so
    ln -s libdb-3.so /usr/lib/libdb.so

ODBM emulation seems not to be perfect, but is quite usable,
using DB 3.1.17:

    lib/odbm.............FAILED at test 9
        Failed 1/64 tests, 98.44% okay

d1298 30
d1336 12
a1520 17
=item THIS PACKAGE SEEMS TO BE INCOMPLETE

The F<Configure> program has not been able to find all the files which
make up the complete Perl distribution.  You may have a damaged source
archive file (in which case you may also have seen messages such as
C<gzip: stdin: unexpected end of file> and C<tar: Unexpected EOF on
archive file>), or you may have obtained a structurally-sound but
incomplete archive.  In either case, try downloading again from the
official site named at the start of this document.  If you do find
that any site is carrying a corrupted or incomplete source code
archive, please report it to the site's maintainer.

=item invalid token: ##

You are using a non-ANSI-compliant C compiler.  See L<WARNING:  This
version requires a compiler that supports ANSI C>.

a1618 45
=item Test failures from lib/ftmp-security saying "system possibly insecure"

Firstly, test failures from the ftmp-security are not necessarily
serious or indicative of a real security threat.  That being said,
they bear investigating.

The tests may fail for the following reasons.   Note that each of the
tests is run both in the building directory and the temporary
directory, as returned by File::Spec->tmpdir().

(1) If the directory the tests are being run is owned by somebody else
than the user running the tests, or root (uid 0).  This failure can
happen if the Perl source code distribution is unpacked in a way that
the user ids in the distribution package are used as-is.  Some tar
programs do this.

(2) If the directory the test are being run in is writable by group
or by other (remember: with UNIX/POSIX semantics, write access to
a directory means the right to add/remove files in that directory),
and there is no sticky bit set in the directory.  'Sticky bit' is
a feature used in some UNIXes to give extra protection to files: if
the bit is on a directory, no one but the owner (or the root) can remove
that file even if the permissions of the directory would allow file
removal by others.  This failure can happen if the permissions in the
directory simply are a bit too liberal for the tests' liking.  This
may or may not be a real problem: it depends on the permissions policy
used on this particular directory/project/system/site.  This failure
can also happen if the system either doesn't support the sticky bit
(this is the case with many non-UNIX platforms: in principle the
File::Temp should know about these platforms and skip the tests), or
if the system supports the sticky bit but for some reason or reasons
it is not being used.  This is for example the case with HP-UX: as of
HP-UX release 11.00, the sticky bit is very much supported, but HP-UX
doesn't use it on its /tmp directory as shipped.  Also as with the
permissions, some local policy might dictate that the stickiness is
not used.

(3) If the system supports the POSIX 'chown giveaway' feature and if
any of the parent directories of the temporary file back to the root
directory are 'unsafe', using the definitions given above in (1) and
(2).

See the documentation for the File::Temp module for more information
about the various security aspects.

a1656 2
    binaries

a1662 3

    scripts

d1675 2
a1676 5
	pod2man,
	pod2text,
	pod2checker,
	pod2select,
	pod2usage
d1680 1
a1680 3
    library files

			in $privlib and $archlib specified to
a1681 3

    documentation

d1690 1
a1690 1
Perl's *.h header files and the libperl library are also installed
a1694 17
Sometimes you only want to install the version-specific parts of the perl
installation.  For example, you may wish to install a newer version of
perl alongside an already installed production version of perl without
disabling installation of new modules for the production version.
To only install the version-specific parts of the perl installation, run

	Configure -Dversiononly

or answer 'y' to the appropriate Configure prompt.  Alternatively,
you can just manually run

	./perl installperl -v

and skip installman altogether.
See also L<"Maintaining completely separate versions"> for another
approach.

d1881 1
a1881 1
to either the comp.lang.perl.misc newsgroup or to perlbug@@perl.org with
@


1.1.1.5
log
@stock perl 5.8.0 from CPAN
@
text
@d27 2
a28 2
B<NOTE>: starting from the release 5.6.0, Perl uses a version
scheme where even-numbered subreleases (like 5.6 and 5.8) are stable
d36 2
a37 3
The above commands will install Perl to /usr/local (or some other
platform-specific directory -- see the appropriate file in hints/.)
If that's not okay with you, use
d45 2
a46 7
For information on non-Unix systems, see the section on L<"Porting
information"> below.

If "make install" just says "`install' is up to date" or something
similar, you may be on a case-insensitive filesystems such as Mac's HFS+,
and you should say "make install-all".  (This confusion is brought to you
by the Perl distribution having a file called INSTALL.)
d72 1
a72 4
provide additional or different instructions for building Perl. There
are also README files for several flavors of Unix systems, such as
Solaris, HP-UX, and AIX; if you have one of those systems, you should
also read the README file specific to that system.
d76 3
a78 2
system.  (Unixware users should use the svr4.sh hint file.)
Additional information is in the Porting/ directory.
d83 2
a84 2
global symbols anymore.  This means you may need to build rather old
extensions that have not been updated for the current naming convention
d94 3
a96 1
pod/perl56delta.pod contains more details about this.
d98 2
a99 2
=head1 WARNING:  This version is not binary compatible with releases of
Perl prior to 5.8.0.
d101 6
a106 3
If you have built extensions (i.e. modules that include C code)
using an earlier version of Perl, you will need to rebuild and reinstall
those extensions.
d111 1
a111 1
L<"Upgrading from 5.005 or 5.6 to 5.8.0"> for more details.
d117 1
a117 1
pod/perldelta.pod (and the earlier pod/perl5Xdelta.pod) for a description of
d137 2
a138 2
If do not have an ANSI-capable compiler there are a couple of avenues
open to you:
d159 15
d181 2
a182 2
The complete perl5 source tree takes up about 50 MB of disk space.
After completing make, it takes up roughly 100 MB, though the actual
d184 1
a184 1
directories need something on the order of 45 MB, though again that
d215 1
a215 1
probably check and correct for this, but it doesn't.
d255 1
a255 1
also has several convenient options which are described below.
d272 1
a272 2
architectures.  You can do this (if your file system supports symbolic
links) by
d274 3
d323 1
a323 2
for more details.  Do not include a trailing slash, (i.e. /opt/perl/)
or you may experience odd test failures.
d361 2
a362 2
Note: for development releases (odd subreleases, like 5.9, as opposed
to maintenance releases which have even subreleases, like 5.6 and 5.8)
d386 2
a390 2
See L<Cross-compilation> below for information on cross-compiling.

d396 3
a398 1
Do not include trailing slashes on directory names.
d403 1
a403 5
the defaults from then on.  Alternatively, you can

	grep '^install' config.sh

after Configure has run to verify the installation paths.
d417 1
a417 1
By default, Configure will use the following directories for 5.8.0.
d419 1
a419 1
5.8.0 or 5.8.1, and $archname is a string like sun4-sunos,
d460 4
d485 3
a487 3
	$prefix		/usr
	$siteprefix	/usr/local
	$vendorprefix	/usr
d516 3
a541 5
For example, if you have a bundle of perl libraries from a previous 
installation, perhaps in a strange place:

	Configure -Dotherlibdirs=/usr/lib/perl5/site_perl/5.6.1

d569 1
a569 1
	sh Configure -Dman3dir=/usr/local/lib/perl5/5.8.0/man/man3
d580 7
a586 6
Currently, the standard perl installation does not do anything with
HTML documentation, but that may change in the future.  Further, some
add-on modules may wish to install HTML documents.  The html Configure
variables listed above are provided if you wish to specify where such
documents should be placed.  The default is "none", but will likely
eventually change to something useful based on user feedback.
d607 1
a607 1
-Dprefix=/opt/perl, then the default library directories for 5.8.0 are
d610 4
a613 4
	$privlib	/opt/perl/lib/5.8.0
	$archlib	/opt/perl/lib/5.8.0/$archname
	$sitelib	/opt/perl/lib/site_perl/5.8.0
	$sitearch	/opt/perl/lib/site_perl/5.8.0/$archname
d689 5
d703 3
a705 2
On some platforms, perl can be compiled with
support for threads.  To enable this, run
d714 5
a718 4
Perl has two different internal threads implementations.  The current
model (available internally since 5.6, and as a user-level module
since 5.8) is called interpreter-based implementation (ithreads),
with one interpreter per thread, and explicit sharing of data.
d720 1
a720 4
The 5.005 version (5005threads) is considered obsolete, buggy, and
unmaintained.

By default, Configure selects ithreads if -Dusethreads is specified.
d722 2
a723 2
(You need to also use the PerlIO layer, explained later, if you decide
to use ithreads, to guarantee the good interworking of threads and I/O.)
d725 2
a726 26
However, if you wish, you can select the unsupported old 5005threads behavior

	sh Configure -Dusethreads -Duse5005threads

If you decide to use ithreads, the 'threads' module allows their use,
and the 'Thread' module offers an interface to both 5005threads and
ithreads (whichever has been configured).

=head2 Large file support.

Since Perl 5.6.0, Perl has supported large files (files larger than
2 gigabytes), and in many common platforms like Linux or Solaris this
support is on by default.

This is both good and bad. It is good in that you can use large files,
seek(), stat(), and -s them.  It is bad in that if you are interfacing Perl
using some extension, the components you are connecting to must also
be large file aware: if Perl thinks files can be large but the other
parts of the software puzzle do not understand the concept, bad things
will happen.  One popular extension suffering from this ailment is the
Apache extension mod_perl.

There's also one known limitation with the current large files
implementation: unless you also have 64-bit integers (see the next
section), you cannot use the printf/sprintf non-decimal integer
formats like C<%x> to print filesizes.  You can use C<%d>, though.
d730 3
a732 3
If your platform does not have 64 bits natively, but can simulate them
with compiler flags and/or C<long long> or C<int64_t>, you can build a
perl that uses 64 bits.
d776 4
a779 13
Executive summary: in Perl 5.8, you should use the default "PerlIO"
as the IO mechanism unless you have a good reason not to.

In more detail: previous versions of perl used the standard IO
mechanisms as defined in stdio.h.  Versions 5.003_02 and later of perl
introduced alternate IO mechanisms via a "PerlIO" abstraction, but up
until and including Perl 5.6, the stdio mechanism was still the default
and the only supported mechanism.

Starting from Perl 5.8, the default mechanism is to use the PerlIO
abstraction, because it allows better control of I/O mechanisms,
instead of having to work with (often, work around) vendors' I/O
implementations.
d781 1
a781 2
This PerlIO abstraction can be (but again, unless you know what you
are doing, should not be) disabled either on the Configure command
d784 1
a784 1
	sh Configure -Uuseperlio
d788 15
a802 8
With the PerlIO abstraction layer, there is another possibility for
the underlying IO calls, AT&T's "sfio".  This has superior performance
to stdio.h in many cases, and is extensible by the use of "discipline"
modules ("Native" PerlIO has them too).  Sfio currently only builds on
a subset of the UNIX platforms perl supports.  Because the data
structures are completely different from stdio, perl extension modules
or external libraries may not work.  This configuration exists to
allow these issues to be worked on.
d822 18
d854 1
a854 1
=head2 Building a shared Perl library
d894 2
a895 2
NeXTSTEP/OPENSTEP/Darwin, LIBRARY_PATH for BeOS, LD_LIBRARY_PATH/SHLIB_PATH
for HP-UX, LIBPATH for AIX, PATH for Cygwin) must be set up to include
d898 1
a898 4
library search settings.  You can find the name of the environment
variable Perl thinks works in your your system by

	grep ldlibpthname config.sh
d919 1
a919 2
unexpected reason Configure fails to set up makefile correctly.) (And
again, it may be something other than LD_LIBRARY_PATH for you, see above.)
d929 2
a930 2
install a standard Perl 5.8.0 with a shared library.  Then, suppose you
try to build Perl 5.8.0 with -DDEBUGGING enabled, but everything else
d933 1
a933 1
libperl.so.8 rather with the installed libperl.so.8?  The answer is
d972 19
a990 11
NOTE: This flag is enabled automatically on some platforms if you just
run Configure to accept all the defaults on those platforms.

Perl's malloc family of functions are normally called Perl_malloc(),
Perl_realloc(), Perl_calloc() and Perl_mfree().
These names do not clash with the system versions of these functions.

If this flag is enabled, however, Perl's malloc family of functions
will have the same names as the system versions.  This may be required
sometimes if you have libraries that like to free() data that may have
been allocated by Perl_malloc() and vice versa.
a1026 3
Perl ships with a number of standard extensions.  These are contained
in the ext/ subdirectory.

d1030 1
d1034 3
a1036 1
the Configure command line.
d1057 1
a1057 1
to turn off various extensions.  All others are included by default.
d1059 1
d1062 1
d1064 1
d1068 1
d1072 1
d1094 1
a1094 1
Finally, if you have dynamic loading (most modern systems do)
d1296 1
a1296 1
=item config.over and config.arch
d1298 4
a1301 10
You can also supply a shell script config.over to over-ride
Configure's guesses.  It will get loaded up at the very end, just
before config.sh is created.  You have to be careful with this,
however, as Configure does no checking that your changes make sense.
This file is usually good for site-specific customizations.

There is also another file that, if it exists, is loaded before the
config.over, called config.arch.  This file is intended to be per
architecture, not per site, and usually it's the architecture-specific
hints file that creates the config.arch.
d1339 7
d1377 1
a1377 1
Specific information for the OS/2, Plan 9, VMS and Win32 ports is in the
d1383 1
a1383 1
http://www.cpan.org/ports for current information on ports to
a1392 44
=head1 Adding extra modules to the build

You can specify extra modules or module bundles to be fetched from the
CPAN and installed as part of the Perl build.  Either use the -Dextras=...
command line parameter to Configure, for example like this:

	Configure -Dextras="Compress::Zlib Bundle::LWP DBI"

or answer first 'y' to the question 'Install any extra modules?' and
then answer "Compress::Zlib Bundle::LWP DBI" to the 'Extras?' question.
The module or the bundle names are as for the CPAN module 'install' command.

Notice that because the CPAN module will be used to fetch the extra
modules, you will need access to the CPAN, either via the Internet,
or via a local copy such as a CD-ROM or a local CPAN mirror.  If you
do not, using the extra modules option will die horribly.

Also notice that you yourself are responsible for satisfying any extra
dependencies such as external headers or libraries BEFORE trying the build.
For example: you will need to have the zlib.h header and the libz
library installed for the Compress::Zlib, or the Foo database specific
headers and libraries installed for the DBD::Foo module.  The Configure
process or the Perl build process will not help you with these.

=head1 suidperl

suidperl is an optional component, which is built or installed by default.
From perlfaq1:

	On some systems, setuid and setgid scripts (scripts written
        in the C shell, Bourne shell, or Perl, for example, with the
        set user or group ID permissions enabled) are insecure due to
        a race condition in the kernel. For those systems, Perl versions
        5 and 4 attempt to work around this vulnerability with an optional
        component, a special program named suidperl, also known as sperl.
        This program attempts to emulate the set-user-ID and set-group-ID
        features of the kernel.

Because of the buggy history of suidperl, and the difficulty
of properly security auditing as large and complex piece of
software as Perl, we cannot recommend using suidperl and the feature
should be considered deprecated.
Instead use for example 'sudo': http://www.courtesan.com/sudo/

d1555 10
d1678 1
a1678 1
UTS may need one or more of -K or -g, and undef LSTAT.
d1681 1
a1681 1
configured in the kernel.  Perl tries to detect this, though, and
d1684 4
a1695 104
=head2 Cross-compilation

Starting from Perl 5.8 Perl has the beginnings of cross-compilation
support.  What is known to work is running Configure in a
cross-compilation environment and building the miniperl executable.
What is known not to work is building the perl executable because
that would require building extensions: Dynaloader statically and
File::Glob dynamically, for extensions one needs MakeMaker and
MakeMaker is not yet cross-compilation aware, and neither is
the main Makefile.

Since the functionality is so lacking, it must be considered
highly experimental.  It is so experimental that it is not even
mentioned during an interactive Configure session, a direct command
line invocation (detailed shortly) is required to access the
functionality.

    NOTE: Perl is routinely built using cross-compilation
    in the EPOC environment but the solutions from there
    can't directly be used elsewhere.

The one environment where cross-compilation has successfully been used
as of this writing is the Compaq iPAQ running ARM Linux.  The build
host was Intel Linux, the networking setup was PPP + SSH.  The exact
setup details are beyond the scope of this document, see
http://www.handhelds.org/ for more information.

To run Configure in cross-compilation mode the basic switch is
C<-Dusecrosscompile>.

   sh ./Configure -des -Dusecrosscompile -D...

This will make the cpp symbol USE_CROSS_COMPILE and the %Config
symbol C<usecrosscompile> available.

During the Configure and build, certain helper scripts will be created
into the Cross/ subdirectory.  The scripts are used to execute a
cross-compiled executable, and to transfer files to and from the
target host.  The execution scripts are named F<run-*> and the
transfer scripts F<to-*> and F<from-*>.  The part after the dash is
the method to use for remote execution and transfer: by default the
methods are B<ssh> and B<scp>, thus making the scripts F<run-ssh>,
F<to-scp>, and F<from-scp>.

To configure the scripts for a target host and a directory (in which
the execution will happen and which is to and from where the transfer
happens), supply Configure with

    -Dtargethost=so.me.ho.st -Dtargetdir=/tar/get/dir

The targethost is what e.g. ssh will use as the hostname, the targetdir
must exist (the scripts won't create it), the targetdir defaults to /tmp.
You can also specify a username to use for ssh/rsh logins

    -Dtargetuser=luser

but in case you don't, "root" will be used.

Because this is a cross-compilation effort, you will also need to specify
which target environment and which compilation environment to use.
This includes the compiler, the header files, and the libraries.
In the below we use the usual settings for the iPAQ cross-compilation
environment:

    -Dtargetarch=arm-linux
    -Dcc=arm-linux-gcc
    -Dusrinc=/skiff/local/arm-linux/include
    -Dincpth=/skiff/local/arm-linux/include
    -Dlibpth=/skiff/local/arm-linux/lib

If the name of the C<cc> has the usual GNU C semantics for cross
compilers, that is, CPU-OS-gcc, the names of the C<ar>, C<nm>, and
C<ranlib> will also be automatically chosen to be CPU-OS-ar and so on.
(The C<ld> requires more thought and will be chosen later by Configure
as appropriate.)  Also, in this case the incpth, libpth, and usrinc
will be guessed by Configure (unless explicitly set to something else,
in which case Configure's guesses with be appended).

In addition to the default execution/transfer methods you can also
choose B<rsh> for execution, and B<rcp> or B<cp> for transfer,
for example:

    -Dtargetrun=rsh -Dtargetto=rcp -Dtargetfrom=cp

Putting it all together:

    sh ./Configure -des -Dusecrosscompile \
        -Dtargethost=so.me.ho.st \
	-Dtargetdir=/tar/get/dir \
        -Dtargetuser=root \
        -Dtargetarch=arm-linux \
        -Dcc=arm-linux-gcc \
        -Dusrinc=/skiff/local/arm-linux/include \
        -Dincpth=/skiff/local/arm-linux/include \
        -Dlibpth=/skiff/local/arm-linux/lib \
        -D...

or if you are happy with the defaults

    sh ./Configure -des -Dusecrosscompile \
        -Dtargethost=so.me.ho.st \
        -Dcc=arm-linux-gcc \
        -D...

d1720 1
a1720 8
complicated constructs).  For extension and library tests you
need a little bit more: you need to setup your environment variable
PERL_CORE to a true value (like "1"), and you need to supply the
right Perl library path:

	setenv PERL_CORE 1
	./perl -I../lib ../ext/Socket/Socket.t
	./perl -I../lib ../lib/less.t
a1721 1
(For csh-like shells on UNIX; adjust appropriately for other platforms.)
d1723 1
a1723 6
comments that apply to your system.  You may also need to setup your
shared library path if you get errors like:

	/sbin/loader: Fatal Error: cannot map libperl.so

See L</"Building a shared Perl library"> earlier in this document.
a1751 11
=item Timing problems

Several tests in the test suite check timing functions, such as
sleep(), and see if they return in a reasonable amount of time.
If your system is quite busy and doesn't respond quickly enough,
these tests might fail.  If possible, try running the tests again
with the system under a lighter load.  These timing-sensitive
and load-sensitive tests include F<t/op/alarm.t>,
F<ext/Time/HiRes/HiRes.t>, F<lib/Benchmark.t>,
F<lib/Memoize/t/expmod_t.t>, and F<lib/Memoize/t/speed.t>.

d1784 2
a1785 2
(2) If the directory the tests are being run in is writable by group
or by others (remember: with UNIX/POSIX semantics, write access to
d1796 1
a1796 1
(this is the case with many non-UNIX platforms: in principle
d1801 1
a1801 1
doesn't use it on its /tmp directory as shipped.  Also, as with the
d1837 3
a1839 3
This can be useful if you have to install perl as "perl5" (e.g. to
avoid conflicts with an ancient version in /usr/bin supplied by your vendor).
Without this the versioned binary would be called "perl55.005".
a1920 3
Perl 5.8 is not binary compatible with earlier versions of Perl.
In other words, you will have to recompile your XS modules.

d1930 3
a1932 4
Usually, most extensions will probably not need to be recompiled to
use with a newer version of Perl (the Perl 5.6 to Perl 5.8 transition
being an exception).  Here is how it is supposed to work.  (These
examples assume you accept all the Configure defaults.)
d1965 1
a1965 1
5.6.0 and above will look for 5.004-era pure perl modules.
d1967 8
a1974 8
Lastly, suppose you now install 5.8.0, which is not binary compatible
with 5.6.0.  The directories searched by 5.8.0 (if you don't change the
Configure defaults) will be:

	/usr/local/lib/perl5/5.8.0/$archname
	/usr/local/lib/perl5/5.8.0
	/usr/local/lib/perl5/site_perl/5.8.0/$archname
	/usr/local/lib/perl5/site_perl/5.8.0
d1976 1
d1979 1
a1980 1

a1982 3
Note that the earlier $archname entries are now gone, but pure perl
modules from earlier versions will still be found.

d1984 8
a1991 10
5.005 after you installed 5.8.0, you can continue to install add-on
extensions using any of perl 5.8.0, 5.6.0, or 5.005.  The installations
of these different versions remain distinct, but remember that the
newer versions of perl are automatically set up to search the
compatible site libraries of the older ones.  This means that
installing a new XS extension with 5.005 will make it visible to both
5.005 and 5.6.0, but not to 5.8.0.  Installing a pure perl module with
5.005 will make it visible to all three versions.  Later, if you
install the same extension using, say, perl 5.8.0, it will override the
5.005-installed version, but only for perl 5.8.0.
d2012 1
a2012 1
(e.g. 5.8 for all 5.8.x versions), but change directory with
d2020 1
a2020 1
=head2 Upgrading from 5.005 or 5.6 to 5.8.0
d2022 5
a2026 7
B<Perl 5.8.0 is binary incompatible with Perl 5.6.1, 5.6.0, 5.005,
and any earlier Perl release.>  Perl modules having binary parts
(meaning that a C compiler is used) will have to be recompiled to be
used with 5.8.0.  If you find you do need to rebuild an extension with
5.8.0, you may safely do so without disturbing the 5.005 or 5.6.0
installations.  (See L<"Coexistence with earlier versions of perl5">
above.)
d2030 1
a2030 1
perllocal.pod, not perllocale.pod, for installed module information.
a2099 133
=head1 Minimizing the Perl installation

The following section is meant for people worrying about squeezing the
Perl installation into minimal systems (for example when installing
operating systems, or in really small filesystems).

Leaving out as many extensions as possible is an obvious way:
Encode, with its big conversion tables, consumes a lot of
space.  On the other hand, you cannot throw away everything.  The
Fcntl module is pretty essential.  If you need to do network
programming, you'll appreciate the Socket module, and so forth: it all
depends on what do you need to do.

In the following we offer two different slimmed down installation
recipes.  They are informative, not normative: the choice of files
depends on what you need.

Firstly, the bare minimum to run this script

  use strict;
  use warnings;
  foreach my $f (</*>) {
     print("$f\n");
  }

in Solaris is as follows (under $Config{prefix}):

  ./bin/perl
  ./lib/perl5/5.6.1/sun4-solaris-64int/auto/DynaLoader/autosplit.ix
  ./lib/perl5/5.6.1/sun4-solaris-64int/auto/DynaLoader/dl_expandspec.al
  ./lib/perl5/5.6.1/sun4-solaris-64int/auto/DynaLoader/dl_find_symbol_anywhere.al
  ./lib/perl5/5.6.1/sun4-solaris-64int/auto/DynaLoader/dl_findfile.al
  ./lib/perl5/5.6.1/sun4-solaris-64int/auto/File/Glob/Glob.so
  ./lib/perl5/5.6.1/sun4-solaris-64int/auto/File/Glob/autosplit.ix
  ./lib/perl5/5.6.1/sun4-solaris-64int/Config.pm
  ./lib/perl5/5.6.1/sun4-solaris-64int/XSLoader.pm
  ./lib/perl5/5.6.1/sun4-solaris-64int/DynaLoader.pm
  ./lib/perl5/5.6.1/sun4-solaris-64int/CORE/libperl.so
  ./lib/perl5/5.6.1/strict.pm
  ./lib/perl5/5.6.1/warnings.pm
  ./lib/perl5/5.6.1/Carp.pm
  ./lib/perl5/5.6.1/Exporter.pm
  ./lib/perl5/5.6.1/File/Glob.pm
  ./lib/perl5/5.6.1/AutoLoader.pm
  ./lib/perl5/5.6.1/vars.pm
  ./lib/perl5/5.6.1/warnings/register.pm
  ./lib/perl5/5.6.1/Carp/Heavy.pm
  ./lib/perl5/5.6.1/Exporter/Heavy.pm

Secondly, Debian perl-base package contains the following files,
size about 1.2MB in its i386 version:

  /usr/share/doc/perl/Documentation
  /usr/share/doc/perl/README.Debian
  /usr/share/doc/perl/copyright
  /usr/share/doc/perl/AUTHORS.gz
  /usr/share/doc/perl/changelog.Debian.gz
  /usr/share/man/man1/perl.1.gz
  /usr/share/perl/5.6.1/AutoLoader.pm
  /usr/share/perl/5.6.1/Carp.pm
  /usr/share/perl/5.6.1/Carp/Heavy.pm
  /usr/share/perl/5.6.1/Cwd.pm
  /usr/share/perl/5.6.1/Exporter.pm
  /usr/share/perl/5.6.1/Exporter/Heavy.pm
  /usr/share/perl/5.6.1/File/Spec.pm
  /usr/share/perl/5.6.1/File/Spec/Unix.pm
  /usr/share/perl/5.6.1/FileHandle.pm
  /usr/share/perl/5.6.1/Getopt/Long.pm
  /usr/share/perl/5.6.1/IO/Socket/INET.pm
  /usr/share/perl/5.6.1/IO/Socket/UNIX.pm
  /usr/share/perl/5.6.1/IPC/Open2.pm
  /usr/share/perl/5.6.1/IPC/Open3.pm
  /usr/share/perl/5.6.1/SelectSaver.pm
  /usr/share/perl/5.6.1/Symbol.pm
  /usr/share/perl/5.6.1/Text/Tabs.pm
  /usr/share/perl/5.6.1/Text/Wrap.pm
  /usr/share/perl/5.6.1/attributes.pm
  /usr/share/perl/5.6.1/auto/Getopt/Long/GetOptions.al
  /usr/share/perl/5.6.1/auto/Getopt/Long/FindOption.al
  /usr/share/perl/5.6.1/auto/Getopt/Long/Configure.al
  /usr/share/perl/5.6.1/auto/Getopt/Long/config.al
  /usr/share/perl/5.6.1/auto/Getopt/Long/Croak.al
  /usr/share/perl/5.6.1/auto/Getopt/Long/autosplit.ix
  /usr/share/perl/5.6.1/base.pm
  /usr/share/perl/5.6.1/constant.pm
  /usr/share/perl/5.6.1/fields.pm
  /usr/share/perl/5.6.1/integer.pm
  /usr/share/perl/5.6.1/lib.pm
  /usr/share/perl/5.6.1/locale.pm
  /usr/share/perl/5.6.1/overload.pm
  /usr/share/perl/5.6.1/strict.pm
  /usr/share/perl/5.6.1/vars.pm
  /usr/share/perl/5.6.1/warnings.pm
  /usr/share/perl/5.6.1/warnings/register.pm
  /usr/bin/perl
  /usr/lib/perl/5.6.1/Config.pm
  /usr/lib/perl/5.6.1/Data/Dumper.pm
  /usr/lib/perl/5.6.1/DynaLoader.pm
  /usr/lib/perl/5.6.1/Errno.pm
  /usr/lib/perl/5.6.1/Fcntl.pm
  /usr/lib/perl/5.6.1/File/Glob.pm
  /usr/lib/perl/5.6.1/IO.pm
  /usr/lib/perl/5.6.1/IO/File.pm
  /usr/lib/perl/5.6.1/IO/Handle.pm
  /usr/lib/perl/5.6.1/IO/Pipe.pm
  /usr/lib/perl/5.6.1/IO/Seekable.pm
  /usr/lib/perl/5.6.1/IO/Select.pm
  /usr/lib/perl/5.6.1/IO/Socket.pm
  /usr/lib/perl/5.6.1/POSIX.pm
  /usr/lib/perl/5.6.1/Socket.pm
  /usr/lib/perl/5.6.1/XSLoader.pm
  /usr/lib/perl/5.6.1/auto/Data/Dumper/Dumper.so
  /usr/lib/perl/5.6.1/auto/Data/Dumper/Dumper.bs
  /usr/lib/perl/5.6.1/auto/DynaLoader/dl_findfile.al
  /usr/lib/perl/5.6.1/auto/DynaLoader/dl_expandspec.al
  /usr/lib/perl/5.6.1/auto/DynaLoader/dl_find_symbol_anywhere.al
  /usr/lib/perl/5.6.1/auto/DynaLoader/autosplit.ix
  /usr/lib/perl/5.6.1/auto/DynaLoader/DynaLoader.a
  /usr/lib/perl/5.6.1/auto/DynaLoader/extralibs.ld
  /usr/lib/perl/5.6.1/auto/Fcntl/Fcntl.so
  /usr/lib/perl/5.6.1/auto/Fcntl/Fcntl.bs
  /usr/lib/perl/5.6.1/auto/File/Glob/Glob.bs
  /usr/lib/perl/5.6.1/auto/File/Glob/Glob.so
  /usr/lib/perl/5.6.1/auto/File/Glob/autosplit.ix
  /usr/lib/perl/5.6.1/auto/IO/IO.so
  /usr/lib/perl/5.6.1/auto/IO/IO.bs
  /usr/lib/perl/5.6.1/auto/POSIX/POSIX.bs
  /usr/lib/perl/5.6.1/auto/POSIX/POSIX.so
  /usr/lib/perl/5.6.1/auto/POSIX/autosplit.ix
  /usr/lib/perl/5.6.1/auto/POSIX/load_imports.al
  /usr/lib/perl/5.6.1/auto/Socket/Socket.so
  /usr/lib/perl/5.6.1/auto/Socket/Socket.bs

d2164 4
@


1.1.1.6
log
@perl 5.8.2 from CPAN
@
text
@d85 1
a85 1
system.  (Unixware users should use the svr4.sh or the svr5.sh hint file.)
d322 1
a322 3
vendor unless you are sure you know what you are doing.  If you insist
on replacing your vendor's perl, useful information on how it was
configured may be found with
d324 2
a325 1
	perl -V:config_args
d327 1
a327 3
(Check the output carefully, however, since this doesn't preserve
spaces in arguments to Configure.  For that, you have to look
carefully at config_arg1, config_arg2, etc.)
d329 1
a329 8
By default, Configure will not try to link /usr/bin/perl to
the current version of perl.  You can turn on that behavior by running

	Configure -Dinstallusrbinperl

or by answering 'yes' to the appropriate Configure prompt.
(Note that before perl 5.8.1, the default behavior was to create
or overwrite /usr/bin/perl even if it already existed.)
d441 4
a444 4
    $siteman1dir	$siteprefix/man/man1
    $siteman3dir	$siteprefix/man/man3
    $sitehtml1dir	(none)
    $sitehtml3dir	(none)
d462 4
a465 4
    $vendorman1dir	$vendorprefix/man/man1
    $vendorman3dir	$vendorprefix/man/man3
    $vendorhtml1dir	(none)
    $vendorhtml3dir	(none)
d487 2
a488 2
	$siteman1dir	/usr/local/man/man1
	$siteman3dir	/usr/local/man/man3
d494 2
a495 2
	$vendorman1dir	/usr/man/man1
	$vendorman3dir	/usr/man/man3
a652 12
Alternatively, the DESTDIR variable is honored during C<make install>.
The DESTDIR is automatically prepended to all the installation paths
(and there is no need to edit anything).  With DESTDIR, the above
example can we written as:

    sh Configure -Dprefix=/opt/perl -des
    make
    make test
    make install DESTDIR=/tmp/perl5
    cd /tmp/perl5/opt/perl
    tar cvf /tmp/perl5-archive.tar .

a714 8
When building threaded for certain library calls like the getgr*() and
the getpw*() there is a dynamically sized result buffer: the buffer
starts small but Perl will keep growing the buffer until the result fits.
To get a fixed upper limit you will have to recompile Perl with
PERL_REENTRANT_MAXSIZE defined to be the number of bytes you want.
One way to do this is to run Configure with
C<-Accflags=-DPERL_REENTRANT_MAXSIZE=65536>

a830 32
=head2 Algorithmic Complexity Attacks on Hashes

In Perls 5.8.0 and earlier it was easy to create degenerate hashes.
Processing such hashes would consume large amounts of CPU time,
enabling a "Denial of Service" attack against Perl.  Such hashes may be
a problem for example for mod_perl sites, sites with Perl CGI scripts
and web services, that process data originating from external sources.

In Perl 5.8.1 a security feature was introduced to make it harder
to create such degenerate hashes.

Because of this feature the keys(), values(), and each() functions may
return the hash elements in different order between different runs of
Perl even with the same data.  One can still revert to the old
repeatable order by setting the environment variable PERL_HASH_SEED,
see L<perlrun/PERL_HASH_SEED>.  Another option is to add
-DUSE_HASH_SEED_EXPLICIT to the compilation flags (for example by
using C<Configure -Accflags=-DUSE_HAS_SEED_EXPLICIT>), in which case
one has to explicitly set the PERL_HASH_SEED environment variable to
enable the security feature, or by adding -DNO_HASH_SEED to the compilation
flags to completely disable the randomisation feature.

B<Perl has never guaranteed any ordering of the hash keys>, and the
ordering has already changed several times during the lifetime of
Perl 5.  Also, the ordering of hash keys has always been, and
continues to be, affected by the insertion order.

Note that because of this randomisation for example the Data::Dumper
results will be different between different runs of Perl since
Data::Dumper by default dumps hashes "unordered".  The use of the
Data::Dumper C<Sortkeys> option is recommended.

d932 8
a939 13
with LD_LIBRARY_PATH; on Linux, you can only override at runtime via
LD_PRELOAD, specifying the exact filename you wish to be used; and on
Digital Unix, you can override LD_LIBRARY_PATH by setting the
_RLD_ROOT environment variable to point to the perl build directory.

In other words, it is generally not a good idea to try to build a perl
with a shared library if $archlib/CORE/$libperl already exists from a
previous build.

A good workaround is to specify a different directory for the
architecture-dependent library for your -DDEBUGGING version of perl.
You can do this by changing all the *archlib* variables in config.sh to
point to your new architecture-dependent library.
a983 10
=item -DPERL_DEBUGGING_MSTATS

This flag enables debugging mstats, which is required to use the
Devel::Peek::mstat() function. You cannot enable this unless you are
using Perl's malloc, so a typical Configure command would be

       sh Configure -Accflags=-DPERL_DEBUGGING_MSTATS -Dusemymalloc='y'

to enable this option.

d1010 1
a1010 1
versions of perl under L<Building a shared Perl library>.
a1034 3
If you have dynamic loading, another way of specifying extra modules
is described in L<"Adding extra modules to the build"> below.

d1043 2
a1044 14
To disable certain extensions so that they are not built, use
the -Dnoextensions=... and -Donlyextensions=... options.  They both
accept a space-separated list of extensions.  The extensions listed
in C<noextensions> are removed from the list of extensions to build,
while the C<onlyextensions> is rather more severe and builds only
the listed extensions.  The latter should be used with extreme caution
since certain extensions are used by many other extensions and modules:
such modules include Fcntl and IO.  The order of processing these
options is first C<only> (if present), then C<no> (if present).

Another, older way to turn off various extensions (which is still good
to know if you have to work with older Perl) exists.  Here are the
Configure command-line variables you can set to turn off various
extensions.  All others are included by default.
a1384 3
This will only work if those modules are to be built as dynamic
extensions.  If you wish to include those extra modules as static
extensions, see L<"Extensions"> above.
a1433 9
=head2 Expected errors

These errors are normal, and can be ignored:

  ...
  make: [extra.pods] Error 1 (ignored)
  ...
  make: [extras.make] Error 1 (ignored)

d1553 4
a1556 16
newer version of BIND (and remove the files the old one left behind).
If you can't, you can either link with the updated resolver library provided
with BIND 8.1 or rename /usr/local/bin/arpa/inet.h during the Perl build and
test process to avoid the problem.

=item *_r() prototype NOT found

On a related note, if you see a bunch of complaints like the above about
reentrant functions - specifically networking-related ones - being present
but without prototypes available, check to see if BIND 8.1 (or possibly
other BIND 8 versions) is (or has been) installed. They install
header files such as netdb.h into places such as /usr/local/include (or into
another directory as specified at build/install time), at least optionally.
Remove them or put them in someplace that isn't in the C preprocessor's 
header file include search path (determined by -I options plus defaults,
normally /usr/include).
d1644 1
a1644 1
If you get this error message from the ext/IPC/SysV/t/sem test, your System
d1649 1
a1649 1
=item ext/IPC/SysV/t/sem........semget: No space left on device
d1683 1
a1683 1
version requires a compiler that supports ANSI C.>
d1695 1
a1695 1
FreeBSD can fail the ext/IPC/SysV/t/sem.t test if SysV IPC has not been
a1704 7
Building Perl on a system that has also BIND (headers and libraries)
installed may run into troubles because BIND installs its own netdb.h
and socket.h, which may not agree with the operating system's ideas of
the same files.  Similarly, including -lbind may conflict with libc's
view of the world.  You may have to tweak -Dlocincpth and -Dloclibpth
to avoid the BIND.

d1725 8
a1732 11
    in the EPOC environment, in the WinCE, and in the OpenZaurus
    project, but all those use something slightly different setup
    than what described here.  For the WinCE setup, read the
    wince/README.compile.  For the OpenZaurus setup, read the
    Cross/README.

The one environment where this cross-compilation setup has
successfully been used as of this writing is the Compaq iPAQ running
ARM Linux.  The build host was Intel Linux, the networking setup was
PPP + SSH.  The exact setup details are beyond the scope of this
document, see http://www.handhelds.org/ for more information.
d1907 1
a1907 4
=item Failures from lib/File/Temp/t/security saying "system possibly insecure"

First, such warnings are not necessarily serious or indicative of a
real security threat.  That being said, they bear investigating.
d1909 34
a1942 34
Note that each of the tests is run twice.  The first time is in the
directory returned by File::Spec->tmpdir() (often /tmp on Unix
systems), and the second time in the directory from which the test was
run (usually the 't' directory, if the test was run as part of 'make
test').

The tests may fail for the following reasons:

(1) If the directory the tests are being run in is owned by somebody
other than the user running the tests, or by root (uid 0).

This failure can happen if the Perl source code distribution is
unpacked in such a way that the user ids in the distribution package
are used as-is.  Some tar programs do this.

(2) If the directory the tests are being run in is writable by group or
by others, and there is no sticky bit set for the directory.  (With
UNIX/POSIX semantics, write access to a directory means the right to
add or remove files in that directory.  The 'sticky bit' is a feature
used in some UNIXes to give extra protection to files: if the bit is
set for a directory, no one but the owner (or root) can remove that
file even if the permissions would otherwise allow file removal by
others.)

This failure may or may not be a real problem: it depends on the
permissions policy used on this particular system.  This failure can
also happen if the system either doesn't support the sticky bit (this
is the case with many non-UNIX platforms: in principle File::Temp
should know about these platforms and skip the tests), or if the system
supports the sticky bit but for some reason or reasons it is not being
used.  This is, for example, the case with HP-UX: as of HP-UX release
11.00, the sticky bit is very much supported, but HP-UX doesn't use it
on its /tmp directory as shipped.  Also, as with the permissions, some
local policy might dictate that the stickiness is not used.
d1947 1
a1947 3
(2).  For Unix systems, this is usually not an issue if you are
building on a local disk.  See the documentation for the File::Temp
module for more information about 'chown giveaway'.
d1950 1
a1950 1
about the various security aspects of temporary files.
@


1.1.1.7
log
@Import of stock perl 5.8.5
@
text
@a0 4
If you read this file _as_is_, just ignore the funny characters you see.
It is written in the POD format (see pod/perlpod.pod) which is specially
designed to be readable as is.

a4 48
=head1 Reporting Problems

Wherever possible please use the perlbug tool supplied with this Perl
to report problems, as it automatically includes summary configuration
information about your perl, which may help us track down problems far
more quickly. But first you should read the advice in this file,
carefully re-read the error message and check the relevant manual pages
on your system, as these may help you find an immediate solution.  If
you are not sure whether what you are seeing is a bug, you can send a
message describing the problem to the comp.lang.perl.misc newsgroup to
get advice.

The perlbug tool is installed along with perl, so after you have
completed C<make install> it should be possible to run it with plain
C<perlbug>.  If the install fails, or you want to report problems with
C<make test> without installing perl, then you can use C<make nok> to
run perlbug to report the problem, or run it by hand from this source
directory with C<./perl -Ilib utils/perlbug>

If the build fails too early to run perlbug uninstalled, then please
B<run> the C<./myconfig> shell script, and mail its output along with
an accurate description of your problem to perlbug@@perl.org

If Configure itself fails, and does not generate a config.sh file
(needed to run C<./myconfig>), then please mail perlbug@@perl.org the
description of how Configure fails along with details of your system
- for example the output from running C<uname -a>

Please try to make your message brief but clear.  Brief, clear bug
reports tend to get answered more quickly.  Please don't worry if your
written English is not great - what matters is how well you describe
the important technical details of the problem you have encountered,
not whether your grammar and spelling is flawless.

Trim out unnecessary information.  Do not include large files (such as
config.sh or a complete Configure or make log) unless absolutely
necessary.  Do not include a complete transcript of your build
session.  Just include the failing commands, the relevant error
messages, and whatever preceding commands are necessary to give the
appropriate context.  Plain text should usually be sufficient--fancy
attachments or encodings may actually reduce the number of people who
read your message.  Your message will get relayed to over 400
subscribers around the world so please try to keep it brief but clear.

If you are unsure what makes a good bug report please read "How to
report Bugs Effectively" by Simon Tatham:
http://www.chiark.greenend.org.uk/~sgtatham/bugs.html

d7 3
a9 9
First, make sure you have an up-to-date version of Perl.   If you
didn't get your Perl source from CPAN, check the latest version at
http://www.cpan.org/src/.  Perl uses a version scheme where even-numbered
subreleases (like 5.6.x and 5.8.x) are stable maintenance releases and
odd-numbered subreleases (like 5.7.x and 5.9.x) are unstable
development releases.  Development releases should not be used in
production environments.  Fixes and new features are first carefully
tested in development releases and only if they prove themselves to be
worthy will they be migrated to the maintenance releases.
d11 2
a12 2
The basic steps to build and install perl5 on a Unix system with all
the defaults are:
d20 5
d27 9
d38 1
a38 1
If that's not okay with you, can run Configure interactively and use
d46 2
a47 4
	# You may also wish to add these:
	(cd /usr/include && h2ph *.h sys/*.h)
	(installhtml --help)
	(cd pod && make tex  && <process the latex files>)
d49 4
a52 1
or you can use some of the Configure options described below.
d55 1
a55 1
L<"Reporting Problems"> above.
a70 1
    F<file>     A filename
d73 1
a73 1
you should probably at least skim through this document before
d76 13
a88 6
In addition to this file, check if there is a README file specific to
your operating system, since it may provide additional or different
instructions for building Perl.  If there is a hint file for your
system (in the hints/ directory) you should also read that hint file
for even more information.  (Unixware users should use the svr4.sh or
the svr5.sh hint file.)
d90 6
a95 3
For additional information about porting Perl, see the section on
L<"Porting information"> below, and look at the files in the Porting/
directory.
d97 2
a98 1
=head1 PRELIMINARIES
d100 1
a100 1
=head2 Changes and Incompatibilities
d102 1
a102 4
Please see pod/perldelta.pod for a description of the changes and
potential incompatibilities introduced with this release.  A few of
the most important issues are listed below, but you should refer
to pod/perldelta.pod for more detailed information.
d104 1
a104 1
=head3 WARNING:  This version is not binary compatible with releases of
d118 48
a165 6
On a related issue, old modules may possibly be affected by the changes
in the Perl language in the current release.  Please see
pod/perldelta.pod for a description of what's changed.  See your
installed copy of the perllocal.pod file for a (possibly incomplete)
list of locally installed modules.  Also see CPAN::autobundle for one
way to make a "bundle" of your currently installed modules.
d167 1
a167 1
=head2 Space Requirements
d169 1
a169 1
The complete perl5 source tree takes up about 60 MB of disk space.
d173 1
a173 2
value is system-dependent.  A perl build with debug symbols and
-DDEBUGGING will require something on the order of 10 MB extra.
d203 3
a205 3
probably check and correct for this, but it doesn't.  Similarly, if you
used a shared libperl.so (see below) with version numbers, you will
probably want to adjust them as well.
d234 1
a234 1
At any Configure prompt, you can type  &-d  and Configure will use the
d240 32
a271 1
=head2 Common Configure options
d273 1
a273 1
Configure supports a number of useful options.  Run
d275 1
a275 1
	Configure -h
d277 2
a278 1
to get a listing.  See the Porting/Glossary file for a complete list of
d300 1
a300 1
directory when Configure prompts you, or by using the Configure command
d329 2
a330 2
spaces in arguments to Configure.  For that, you have to look carefully
at config_arg1, config_arg2, etc.)
d332 2
a333 2
By default, Configure will not try to link /usr/bin/perl to the current
version of perl.  You can turn on that behavior by running
d338 2
d341 2
a342 2
In any case, system administrators are strongly encouraged to put
(symlinks to) perl and its accompanying utilities, such as perldoc,
d346 1
a346 1
=item Building a development release.
d348 2
a349 5
For development releases (odd subreleases, like 5.9.x) if you want to
use Configure -d, you will also need to supply -Dusedevel to Configure,
because the default answer to the question "do you really want to
Configure a development version?" is "no".  The -Dusedevel skips that
sanity check.
d358 8
a365 1
For example for my Solaris/x86 system, I usually use
d369 317
a685 1
=head2 Altering config.sh variables for C compiler switches etc.
d687 1
a687 6
For most users, most of the Configure defaults are fine, or can easily
be set on the Configure command line.  However, if Configure doesn't
have an option to do what you want, you can change Configure variables
after the platform hints have been run by using Configure's -A switch.
For example, here's how to add a couple of extra flags to C compiler
invocations:
d689 1
a689 1
	sh Configure -Accflags="-DPERL_Y2KWARN -DPERL_POLLUTE_MALLOC"
d691 1
a691 1
For more help on Configure switches, run
d693 3
a695 1
	sh Configure -h
d697 1
a697 1
=head2 Major Configure-time Build Options
d704 1
a704 1
=head3 Threads
d706 2
a707 2
On some platforms, perl can be compiled with support for threads.  To
enable this, run
d717 6
a722 4
model (available internally since 5.6, and as a user-level module since
5.8) is called interpreter-based implementation (ithreads), with one
interpreter per thread, and explicit sharing of data.  The 5.005
version (5005threads) is considered obsolete, buggy, and unmaintained.
d726 4
a729 1
However, if you insist, you can select the unsupported old 5005threads behavior
d733 10
a742 10
The 'threads' module is for use with the ithreads implementation.  The
'Thread' module offers an interface to either 5005threads or ithreads
(whichever has been configured).

When using threads, perl uses a dynamically-sized buffer for some of
the thread-safe library calls, such as those in the getpw*() family.
This buffer starts small, but it will keep growing until the result
fits.  To get a fixed upper limit, you should compile Perl with
PERL_REENTRANT_MAXSIZE defined to be the number of bytes you want.  One
way to do this is to run Configure with
d745 1
a745 1
=head3 Large file support.
d761 2
a762 2
section), you cannot use the printf/sprintf non-decimal integer formats
like C<%x> to print filesizes.  You can use C<%d>, though.
d764 1
a764 1
=head3 64 bit support.
d766 3
a768 3
If your platform does not have run natively at 64 bits, but can
simulate them with compiler flags and/or C<long long> or C<int64_t>,
you can build a perl that uses 64 bits.
d775 7
a781 7
The C<use64bitint> option does only as much as is required to get
64-bit integers into Perl (this may mean, for example, using "long
longs") while your memory may still be limited to 2 gigabytes (because
your pointers could still be 32-bit).  Note that the name C<64bitint>
does not imply that your C compiler will be using 64-bit C<int>s (it
might, but it doesn't have to).  The C<use64bitint> simply means that
you will be able to have 64 bit-wide scalar values.
d783 1
a783 1
The C<use64bitall> option goes all the way by attempting to switch
d798 1
a798 1
=head3 Long doubles
d805 1
a805 1
=head3 "more bits"
d810 1
a810 1
=head3 Selecting File IO mechanisms
d812 1
a812 1
Executive summary: as of Perl 5.8, you should use the default "PerlIO"
d861 1
a861 1
=head3 Algorithmic Complexity Attacks on Hashes
d869 13
a881 26
In Perl 5.8.1 a security feature was introduced to make it harder to
create such degenerate hashes. A visible side effect of this was that
the keys(), values(), and each() functions may return the hash elements
in different order between different runs of Perl even with the same
data.  It also had unintended binary incompatibility issues with
certain modules compiled against Perl 5.8.0.

In Perl 5.8.2 an improved scheme was introduced.  Hashes will return
elements in the same order as Perl 5.8.0 by default.  On a hash by hash
basis, if pathological data is detected during a hash key insertion,
then that hash will switch to an alternative random hash seed.  As
adding keys can always dramatically change returned hash element order,
existing programs will not be affected by this, unless they
specifically test for pre-recorded hash return order for contrived
data. (eg the list of keys generated by C<map {"\0"x$_} 0..15> trigger
randomisation) In effect the new implementation means that 5.8.1 scheme
is only being used on hashes which are under attack.

One can still revert to the old guaranteed repeatable order (and be
vulnerable to attack by wily crackers) by setting the environment
variable PERL_HASH_SEED, see L<perlrun/PERL_HASH_SEED>.  Another option
is to add -DUSE_HASH_SEED_EXPLICIT to the compilation flags (for
example by using C<Configure -Accflags=-DUSE_HAS_SEED_EXPLICIT>), in
which case one has to explicitly set the PERL_HASH_SEED environment
variable to enable the security feature, or by adding -DNO_HASH_SEED to
the compilation flags to completely disable the randomisation feature.
d884 8
a891 8
ordering has already changed several times during the lifetime of Perl
5.  Also, the ordering of hash keys has always been, and continues to
be, affected by the insertion order.  It is likely that Perl 5.10 and
Perl 6 will randomise all hashes.  Note that because of this
randomisation for example the Data::Dumper results will be different
between different runs of Perl since Data::Dumper by default dumps
hashes "unordered".  The use of the Data::Dumper C<Sortkeys> option is
recommended.
d893 1
a893 1
=head3 SOCKS
d900 1
a900 1
=head3 Dynamic Loading
d907 1
a907 1
=head3 Building a shared Perl library
d932 1
a932 1
libperl.so.6.2 (for Perl 5.6.2), or libperl.so.602, or simply
d938 2
a939 274
For some systems (mostly SVR4), building a shared libperl is required
for dynamic loading to work, and hence is already the default.

You can elect to build a shared libperl by

	sh Configure -Duseshrplib

To build a shared libperl, the environment variable controlling shared
library search (LD_LIBRARY_PATH in most systems, DYLD_LIBRARY_PATH for
NeXTSTEP/OPENSTEP/Darwin, LIBRARY_PATH for BeOS, LD_LIBRARY_PATH/SHLIB_PATH
for HP-UX, LIBPATH for AIX, PATH for Cygwin) must be set up to include
the Perl build directory because that's where the shared libperl will
be created.  Configure arranges makefile to have the correct shared
library search settings.  You can find the name of the environment
variable Perl thinks works in your your system by

	grep ldlibpthname config.sh

However, there are some special cases where manually setting the
shared library path might be required.  For example, if you want to run
something like the following with the newly-built but not-yet-installed
./perl:

        cd t; ./perl misc/failing_test.t
or
        ./perl -Ilib ~/my_mission_critical_test

then you need to set up the shared library path explicitly.
You can do this with

   LD_LIBRARY_PATH=`pwd`:$LD_LIBRARY_PATH; export LD_LIBRARY_PATH

for Bourne-style shells, or

   setenv LD_LIBRARY_PATH `pwd`

for Csh-style shells.  (This procedure may also be needed if for some
unexpected reason Configure fails to set up makefile correctly.) (And
again, it may be something other than LD_LIBRARY_PATH for you, see above.)

You can often recognize failures to build/use a shared libperl from error
messages complaining about a missing libperl.so (or libperl.sl in HP-UX),
for example:
18126:./miniperl: /sbin/loader: Fatal Error: cannot map libperl.so

There is also an potential problem with the shared perl library if you
want to have more than one "flavor" of the same version of perl (e.g.
with and without -DDEBUGGING).  For example, suppose you build and
install a standard Perl 5.8.0 with a shared library.  Then, suppose you
try to build Perl 5.8.0 with -DDEBUGGING enabled, but everything else
the same, including all the installation directories.  How can you
ensure that your newly built perl will link with your newly built
libperl.so.8 rather with the installed libperl.so.8?  The answer is
that you might not be able to.  The installation directory is encoded
in the perl binary with the LD_RUN_PATH environment variable (or
equivalent ld command-line option).  On Solaris, you can override that
with LD_LIBRARY_PATH; on Linux, you can only override at runtime via
LD_PRELOAD, specifying the exact filename you wish to be used; and on
Digital Unix, you can override LD_LIBRARY_PATH by setting the
_RLD_ROOT environment variable to point to the perl build directory.

In other words, it is generally not a good idea to try to build a perl
with a shared library if $archlib/CORE/$libperl already exists from a
previous build.

A good workaround is to specify a different directory for the
architecture-dependent library for your -DDEBUGGING version of perl.
You can do this by changing all the *archlib* variables in config.sh to
point to your new architecture-dependent library.

=head2 Installation Directories

The installation directories can all be changed by answering the
appropriate questions in Configure.  For convenience, all the
installation questions are near the beginning of Configure.
Do not include trailing slashes on directory names.

I highly recommend running Configure interactively to be sure it puts
everything where you want it.  At any point during the Configure
process, you can answer a question with  &-d  and Configure will use
the defaults from then on.  Alternatively, you can

	grep '^install' config.sh

after Configure has run to verify the installation paths.

The defaults are intended to be reasonable and sensible for most
people building from sources.  Those who build and distribute binary
distributions or who export perl to a range of systems will probably
need to alter them.  If you are content to just accept the defaults,
you can safely skip the next section.

The directories set up by Configure fall into three broad categories.

=over 4

=item Directories for the perl distribution

By default, Configure will use the following directories for 5.8.x.
$version is the full perl version number, including subversion, e.g.
5.8.3 or 5.8.4, and $archname is a string like sun4-sunos,
determined by Configure.  The full definitions of all Configure
variables are in the file Porting/Glossary.

    Configure variable	Default value
    $prefixexp		/usr/local
    $binexp		$prefixexp/bin
    $scriptdirexp	$prefixexp/bin
    $privlibexp		$prefixexp/lib/perl5/$version
    $archlibexp		$prefixexp/lib/perl5/$version/$archname
    $man1direxp		$prefixexp/man/man1
    $man3direxp		$prefixexp/man/man3
    $html1direxp	(none)
    $html3direxp	(none)

$prefixexp is generated from $prefix, with ~ expansion done to convert home
directories into absolute paths. Similarly for the other variables listed. As
file system calls do not do this, you should always reference the ...exp
variables, to support users who build perl in their home directory.

Actually, Configure recognizes the SVR3-style
/usr/local/man/l_man/man1 directories, if present, and uses those
instead.  Also, if $prefix contains the string "perl", the library
directories are simplified as described below.  For simplicity, only
the common style is shown here.

=item Directories for site-specific add-on files

After perl is installed, you may later wish to add modules (e.g. from
CPAN) or scripts.  Configure will set up the following directories to
be used for installing those add-on modules and scripts.

    Configure variable	Default value
    $siteprefixexp	$prefixexp
    $sitebinexp		$siteprefixexp/bin
    $sitescriptexp	$siteprefixexp/bin
    $sitelibexp		$siteprefixexp/lib/perl5/site_perl/$version
    $sitearchexp	$siteprefixexp/lib/perl5/site_perl/$version/$archname
    $siteman1direxp	$siteprefixexp/man/man1
    $siteman3direxp	$siteprefixexp/man/man3
    $sitehtml1direxp	(none)
    $sitehtml3direxp	(none)

By default, ExtUtils::MakeMaker will install architecture-independent
modules into $sitelib and architecture-dependent modules into $sitearch.

=item Directories for vendor-supplied add-on files

Lastly, if you are building a binary distribution of perl for
distribution, Configure can optionally set up the following directories
for you to use to distribute add-on modules.

    Configure variable	Default value
    $vendorprefixexp	(none)
    (The next ones are set only if vendorprefix is set.)
    $vendorbinexp	$vendorprefixexp/bin
    $vendorscriptexp	$vendorprefixexp/bin
    $vendorlibexp
	$vendorprefixexp/lib/perl5/vendor_perl/$version
    $vendorarchexp
	$vendorprefixexp/lib/perl5/vendor_perl/$version/$archname
    $vendorman1direxp	$vendorprefixexp/man/man1
    $vendorman3direxp	$vendorprefixexp/man/man3
    $vendorhtml1direxp	(none)
    $vendorhtml3direxp	(none)

These are normally empty, but may be set as needed.  For example,
a vendor might choose the following settings:

    $prefix		/usr
    $siteprefix		/usr/local
    $vendorprefix	/usr

This would have the effect of setting the following:

    $binexp		/usr/bin
    $scriptdirexp	/usr/bin
    $privlibexp		/usr/lib/perl5/$version
    $archlibexp 	/usr/lib/perl5/$version/$archname
    $man1direxp		/usr/man/man1
    $man3direxp		/usr/man/man3

    $sitebinexp		/usr/local/bin
    $sitescriptexp	/usr/local/bin
    $sitelibexp		/usr/local/lib/perl5/site_perl/$version
    $sitearchexp	/usr/local/lib/perl5/site_perl/$version/$archname
    $siteman1direxp	/usr/local/man/man1
    $siteman3direxp	/usr/local/man/man3

    $vendorbinexp	/usr/bin
    $vendorscriptexp	/usr/bin
    $vendorlibexp	/usr/lib/perl5/vendor_perl/$version
    $vendorarchexp	/usr/lib/perl5/vendor_perl/$version/$archname
    $vendorman1direxp	/usr/man/man1
    $vendorman3direxp	/usr/man/man3

Note how in this example, the vendor-supplied directories are in the
/usr hierarchy, while the directories reserved for the end-user are in
the /usr/local hierarchy.

The entire installed library hierarchy is installed in locations with
version numbers, keeping the installations of different versions distinct.
However, later installations of Perl can still be configured to search the
installed libraries corresponding to compatible earlier versions.
See L<"Coexistence with earlier versions of perl5"> below for more details
on how Perl can be made to search older version directories.

Of course you may use these directories however you see fit.  For
example, you may wish to use $siteprefix for site-specific files that
are stored locally on your own disk and use $vendorprefix for
site-specific files that are stored elsewhere on your organization's
network.  One way to do that would be something like

	sh Configure -Dsiteprefix=/usr/local -Dvendorprefix=/usr/share/perl

=item otherlibdirs

As a final catch-all, Configure also offers an $otherlibdirs
variable.  This variable contains a colon-separated list of additional
directories to add to @@INC.  By default, it will be empty.
Perl will search these directories (including architecture and
version-specific subdirectories) for add-on modules and extensions.

For example, if you have a bundle of perl libraries from a previous
installation, perhaps in a strange place:

	Configure -Dotherlibdirs=/usr/lib/perl5/site_perl/5.8.1

=item APPLLIB_EXP

There is one other way of adding paths to @@INC at perl build time, and
that is by setting the APPLLIB_EXP C pre-processor token to a colon-
separated list of directories, like this

       sh Configure -Accflags='-DAPPLLIB_EXP=\"/usr/libperl\"'

The directories defined by APPLLIB_EXP get added to @@INC I<first>,
ahead of any others, and so provide a way to override the standard perl
modules should you, for example, want to distribute fixes without
touching the perl distribution proper.  And, like otherlib dirs,
version and architecture specific subdirectories are also searched, if
present, at run time.  Of course, you can still search other @@INC
directories ahead of those in APPLLIB_EXP by using any of the standard
run-time methods: $PERLLIB, $PERL5LIB, -I, use lib, etc.

=item Man Pages

In versions 5.005_57 and earlier, the default was to store module man
pages in a version-specific directory, such as
/usr/local/lib/perl5/$version/man/man3.  The default for 5.005_58 and
after is /usr/local/man/man3 so that most users can find the man pages
without resetting MANPATH.

You can continue to use the old default from the command line with

	sh Configure -Dman3dir=/usr/local/lib/perl5/5.8.4/man/man3

Some users also prefer to use a .3pm suffix.  You can do that with

	sh Configure -Dman3ext=3pm

Again, these are just the defaults, and can be changed as you run
Configure.

=item HTML pages

Currently, the standard perl installation does not do anything with
HTML documentation, but that may change in the future.  Further, some
add-on modules may wish to install HTML documents.  The html Configure
variables listed above are provided if you wish to specify where such
documents should be placed.  The default is "none", but will likely
eventually change to something useful based on user feedback.

=back
d941 1
a941 3
Some users prefer to append a "/share" to $privlib and $sitelib
to emphasize that those directories can be shared among different
architectures.
d943 1
a943 3
Note that these are just the defaults.  You can actually structure the
directories any way you like.  They don't even have to be on the same
filesystem.
d945 8
a952 3
Further details about the installation directories, maintenance and
development subversions, and about supporting multiple versions are
discussed in L<"Coexistence with earlier versions of perl5"> below.
d954 1
a954 3
If you specify a prefix that contains the string "perl", then the
library directory structure is slightly simplified.  Instead of
suggesting $prefix/lib/perl5/, Configure will suggest $prefix/lib.
d956 4
a959 2
Thus, for example, if you Configure with
-Dprefix=/opt/perl, then the default library directories for 5.8.4 are
d961 3
a963 5
    Configure variable	Default value
	$privlib	/opt/perl/lib/5.8.4
	$archlib	/opt/perl/lib/5.8.4/$archname
	$sitelib	/opt/perl/lib/site_perl/5.8.4
	$sitearch	/opt/perl/lib/site_perl/5.8.4/$archname
d965 2
a966 1
=head2 Changing the installation directory
d968 1
a968 9
Configure distinguishes between the directory in which perl (and its
associated files) should be installed and the directory in which it
will eventually reside.  For most sites, these two are the same; for
sites that use AFS, this distinction is handled automatically.
However, sites that use software such as depot to manage software
packages, or users building binary packages for distribution may also
wish to install perl into a different directory and use that
management software to move perl to its final destination.  This
section describes how to do that.
d970 1
a970 4
Suppose you want to install perl under the /tmp/perl5 directory.  You
could edit config.sh and change all the install* variables to point to
/tmp/perl5 instead of /usr/local, or you could simply use the
following command line:
d972 1
a972 1
	sh Configure -Dinstallprefix=/tmp/perl5
d974 3
a976 1
(replace /tmp/perl5 by a directory of your choice).
d978 4
a981 4
Beware, though, that if you go to try to install new add-on
modules, they too will get installed in under '/tmp/perl5' if you
follow this example.  The next section shows one way of dealing with
that problem.
d983 15
a997 1
=head2 Creating an installable tar archive
d999 3
a1001 7
If you need to install perl on many identical systems, it is convenient
to compile it once and create an archive that can be installed on
multiple systems.  Suppose, for example, that you want to create an
archive that can be installed in /opt/perl.  One way to do that is by
using the DESTDIR variable during C<make install>.  The DESTDIR is
automatically prepended to all the installation paths.  Thus you
simply do:
d1003 4
a1006 6
    sh Configure -Dprefix=/opt/perl -des
    make
    make test
    make install DESTDIR=/tmp/perl5
    cd /tmp/perl5/opt/perl
    tar cvf /tmp/perl5-archive.tar .
d1008 1
a1008 1
=head2 Site-wide Policy settings
d1010 6
a1015 6
After Configure runs, it stores a number of common site-wide "policy"
answers (such as installation directories and the local perl contact
person) in the Policy.sh file.  If you want to build perl on another
system using the same policy defaults, simply copy the Policy.sh file
to the new system and Configure will use it along with the appropriate
hint file for your system.
d1017 4
a1020 2
Alternatively, if you wish to change some or all of those policy
answers, you should
d1022 1
a1022 1
	rm -f Policy.sh
d1024 1
a1024 1
to ensure that Configure doesn't re-use them.
d1026 1
a1026 1
Further information is in the Policy_sh.SH file itself.
d1028 1
a1028 3
If the generated Policy.sh file is unsuitable, you may freely edit it
to contain any valid shell commands.  It will be run just after the
platform-specific hints files.
d1030 1
a1030 1
=head2 Disabling older versions of Perl
d1032 1
a1032 4
Configure will search for binary compatible versions of previously
installed perl binaries in the tree that is specified as target tree
and these will be used by the perl being built.
See L<"Coexistence with earlier versions of perl5"> for more details.
d1034 2
a1035 2
To disable this use of older perl modules, even completely valid pure perl
modules, you can specify to not include the paths found:
d1037 3
a1039 1
       sh Configure -Dinc_version_list=none ...
d1041 4
a1044 2
When using the newer perl, you can add these paths again in the
$PERL5LIB environment variable or with perl's -I runtime option.
d1046 4
a1049 1
=head2 Building Perl outside of the source directory
d1051 1
a1051 5
Sometimes it is desirable to build Perl in a directory different from
where the sources are, for example if you want to keep your sources
read-only, or if you want to share the sources between different binary
architectures.  You can do this (if your file system supports symbolic
links) by
d1053 3
a1055 3
	mkdir /tmp/perl/build/directory
	cd /tmp/perl/build/directory
	sh /path/to/perl/source/Configure -Dmksymlinks ...
d1057 1
a1057 3
This will create in /tmp/perl/build/directory a tree of symbolic links
pointing to files in /path/to/perl/source.  The original files are left
unaffected.  After Configure has finished you can just say
d1059 1
a1059 1
	make
d1061 1
a1061 1
as usual, and Perl will be built in /tmp/perl/build/directory.
d1098 3
a1100 2
is always built by default.  If you wish to skip POSIX, you can
set the Configure variable useposix=false from the Configure command line.
d1121 28
a1148 1
version.  Configure will suggest this as the default.
d1150 4
a1153 9
To disable certain extensions so that they are not built, use the
-Dnoextensions=... and -Donlyextensions=... options.  They both accept
a space-separated list of extensions.  The extensions listed in
C<noextensions> are removed from the list of extensions to build, while
the C<onlyextensions> is rather more severe and builds only the listed
extensions.  The latter should be used with extreme caution since
certain extensions are used by many other extensions and modules:
examples of such modules include Fcntl and IO.  The order of processing
these options is first C<only> (if present), then C<no> (if present).
d1185 1
a1185 1
your database libraries are not in a directory normally
d1190 1
a1190 1
=head3 Examples
d1249 2
a1250 2
A Perl interface for DB3 is part of Berkeley DB, but if you want to
compile the standard Perl DB/ODBM/NDBM interfaces, you must follow
d1254 1
a1254 1
DB1 compatibility code (needed for the DB_File interface) and without
d1256 1
a1256 1
for the DB/ODBM/NDBM interfaces, you need to configure DB3 with
d1263 1
a1263 1
    echo '#define DB_DBM_HSEARCH 1' >dbm.h
d1265 1
a1265 1
    install -m 0644 dbm.h /usr/include/dbm.h
a1279 79
=head2 Overriding an old config.sh

If you want to use your old config.sh but override some of the items
with command line options, you need to use B<Configure -O>.

=head2 GNU-style configure

If you prefer the GNU-style configure command line interface, you can
use the supplied configure.gnu command, e.g.

	CC=gcc ./configure.gnu

The configure.gnu script emulates a few of the more common configure
options.  Try

	./configure.gnu --help

for a listing.

(The file is called configure.gnu to avoid problems on systems
that would not distinguish the files "Configure" and "configure".)

See L<Cross-compilation> below for information on cross-compiling.

=head2 Malloc Issues

Perl relies heavily on malloc(3) to grow data structures as needed,
so perl's performance can be noticeably affected by the performance of
the malloc function on your system.  The perl source is shipped with a
version of malloc that has been optimized for the typical requests from
perl, so there's a chance that it may be both faster and use less memory
than your system malloc.

However, if your system already has an excellent malloc, or if you are
experiencing difficulties with extensions that use third-party libraries
that call malloc, then you should probably use your system's malloc.
(Or, you might wish to explore the malloc flags discussed below.)

=over 4

=item Using the system malloc

To build without perl's malloc, you can use the Configure command

	sh Configure -Uusemymalloc

or you can answer 'n' at the appropriate interactive Configure prompt.

=item -DPERL_POLLUTE_MALLOC

NOTE: This flag is enabled automatically on some platforms if you just
run Configure to accept all the defaults on those platforms.

Perl's malloc family of functions are normally called Perl_malloc(),
Perl_realloc(), Perl_calloc() and Perl_mfree().
These names do not clash with the system versions of these functions.

If this flag is enabled, however, Perl's malloc family of functions
will have the same names as the system versions.  This may be required
sometimes if you have libraries that like to free() data that may have
been allocated by Perl_malloc() and vice versa.

Note that enabling this option may sometimes lead to duplicate symbols
from the linker for malloc et al.  In such cases, the system probably
does not allow its malloc functions to be fully replaced with custom
versions.

=item -DPERL_DEBUGGING_MSTATS

This flag enables debugging mstats, which is required to use the
Devel::Peek::mstat() function. You cannot enable this unless you are
using Perl's malloc, so a typical Configure command would be

       sh Configure -Accflags=-DPERL_DEBUGGING_MSTATS -Dusemymalloc='y'

to enable this option.

=back

d1283 1
a1283 1
If none of them help, then see L<"Reporting Problems"> above.
d1453 1
a1453 1
subdirectory.  Porting/Glossary should especially come in handy.
d1459 1
a1459 1
If you plan to port Perl to a new architecture, study carefully the
d1466 1
a1466 1
=head2 Adding extra modules to the build
d1493 1
a1493 1
=head2 suidperl
d1495 2
a1496 2
suidperl is an optional component, which is normally neither built
nor installed by default.  From perlfaq1:
d1511 1
a1511 2
Instead, use a tool specifically designed to handle changes in
privileges, such as B<sudo>, http://www.courtesan.com/sudo/ .
d1518 1
a1518 1
makefile, not Makefile, since the Unix make command reads makefile first.
d1543 1
a1543 1
then see L<"Reporting Problems"> above.
d1555 1
a1555 1
during the building of extensions, run
d1584 1
a1584 1
in config.sh.  The problem is usually solved by installing gcc
d1670 1
a1670 1
Remove them or put them in someplace that isn't in the C preprocessor's
d1798 2
a1799 4
You are using a non-ANSI-compliant C compiler.  To compile Perl, you
need to use a compiler that supports ANSI C.  If there is a README
file for your system, it may have further details on your compiler
options.
d1813 1
a1813 1
you will get a message telling you what to do.
d1832 1
a1832 1
Starting from version 5.8, Perl has the beginnings of cross-compilation
d2091 2
a2092 7
are not root, you must still have permission to install into the directories
in question and you should ignore any messages about chown not working.

If "make install" just says "`install' is up to date" or something
similar, you may be on a case-insensitive filesystems such as Mac's HFS+,
and you should say "make install-all".  (This confusion is brought to you
by the Perl distribution having a file called INSTALL.)
a2110 11
=head2 Installing perl under a different directory

You can install perl under a different destination directory by using
the DESTDIR variable during C<make install>, with a command like

	make install DESTDIR=/tmp/perl5

DESTDIR is automatically prepended to all the installation paths.  See
the example in L<"Creating an installable tar archive"> above.


d2195 1
a2195 1
5.8.0) to another similar version (e.g. 5.8.2) without re-compiling
d2199 1
a2199 1
with 5.8.2, simply replace the '#!/usr/local/bin/perl' line at the
d2201 1
a2201 1
#!/usr/local/bin/perl5.8.2.
d2203 4
a2206 3
Usually, most extensions will probably not need to be recompiled to use
with a newer version of Perl Here is how it is supposed to work.
(These examples assume you accept all the Configure defaults.)
d2283 1
a2283 1
	sh Configure -Dprefix=/opt/perl5.8.2
d2285 1
a2285 1
and adding /opt/perl5.8.2/bin to the shell PATH variable.  Such users
d2298 1
a2298 1
=head2 Upgrading from 5.005 or 5.6 to 5.8.4
d2300 1
a2300 1
B<Perl 5.8.4 is binary incompatible with Perl 5.6.x, 5.005,
d2303 2
a2304 2
used with 5.8.4.  If you find you do need to rebuild an extension with
5.8.4, you may safely do so without disturbing the older
d2324 1
a2324 1
whatever the appropriate pathname is).  See L<perltrap> for
d2512 25
@


1.1.1.8
log
@perl 5.8.6 from CPAN
@
text
@a659 13
=head3 Environment access

Perl often needs to write to the program's environment, such as when C<%ENV>
is assigned to. Many implementations of the C library function C<putenv()>
leak memory, so where possible perl will manipulate the environment directly
to avoid these leaks. The default is now to perform direct manipulation
whenever perl is running as a stand alone interpreter, and to call the safe
but potentially leaky C<putenv()> function when the perl interpreter is
embedded in another application. You can force perl to always use C<putenv()>
by compiling with -DPERL_USE_SAVE_PUTENV. You can force an embedded perl to
use direct manipulation by setting C<PL_use_safe_putenv = 0;> after the
C<perl_construct()> call.

d1680 1
a1680 21
=item Missing functions and Undefined symbols

If the build of miniperl fails with a long list of missing functions or
undefined symbols, check the libs variable in the config.sh file.  It
should look something like

	libs='-lsocket -lnsl -ldl -lm -lc'

The exact libraries will vary from system to system, but you typically
need to include at least the math library -lm.  Normally, Configure
will suggest the correct defaults.  If the libs variable is empty, you
need to start all over again.  Run

	make distclean

and start from the very beginning.  This time, unless you are sure of
what you are doing, accept the default list of libraries suggested by
Configure.

If the libs variable looks correct, you might have the
L<"nm extraction"> problem discussed above.
d1682 5
a1686 5
If you stil have missing routines or undefined symbols, you probably
need to add some library or other, or you need to undefine some feature
that Configure thought was there but is defective or incomplete.  If
you used a hint file, see if it has any relevant advice.  You can also
look through through config.h for likely suspects.
@


1.1.1.9
log
@perl 5.8.8 import
@
text
@d530 1
a530 1
example by using C<Configure -Accflags=-DUSE_HASH_SEED_EXPLICIT>), in
d669 1
a669 1
by compiling with -DPERL_USE_SAFE_PUTENV. You can force an embedded perl to
a847 11
=item USE_SITECUSTOMIZE

Run-time customization of @@INC can be enabled with:

	sh Configure -Dusesitecustomize

Which will define USE_SITECUSTOMIZE and $Config{usesitecustomize}.
When enabled, make perl run F<$sitelibexp/sitecustomize.pl> before
anything else.  This script can then be set up to add additional
entries to @@INC.

d1851 27
a1877 37
Perl can be cross-compiled.  It is just not trivial, cross-compilation
rarely is.  Perl is routinely cross-compiled for many platforms (as of
June 2005 at least PocketPC aka WinCE, Open Zaurus, EPOC, Symbian, and
the IBM OS/400).  These platforms are known as the B<target> platforms,
while the systems where the compilation takes place are the B<host>
platforms.

What makes the situation difficult is that first of all,
cross-compilation environments vary significantly in how they are set
up and used, and secondly because the primary way of configuring Perl
(using the rather large Unix-tool-dependent Configure script) is not
awfully well suited for cross-compilation.  However, starting from
version 5.8.0, the Configure script also knows one way of supporting
cross-compilation support, please keep reading.

See the following files for more information about compiling Perl for
the particular platforms:

=over 4

=item WinCE/PocketPC

README.ce, wince/README.perlce

=item Open Zaurus

Cross/README

=item EPOC

README.epoc

=item Symbian

README.symbian

=item OS/400
d1879 2
a1880 31
README.os400

=back

Packaging and transferring either the core Perl modules or CPAN
modules to the target platform is also left up to the each
cross-compilation environment.  Often the cross-compilation target
platforms are somewhat limited in diskspace: see the section
L<Minimizing the Perl installation> to learn more of the minimal set
of files required for a functional Perl installation.

For some cross-compilation environments the Configure option
C<-Dinstallprefix=...> might be handy, see L<Changing the installation
directory>.

About the cross-compilation support of Configure: what is known to
work is running Configure in a cross-compilation environment and
building the miniperl executable.  What is known not to work is
building the perl executable because that would require building
extensions: Dynaloader statically and File::Glob dynamically, for
extensions one needs MakeMaker and MakeMaker is not yet
cross-compilation aware, and neither is the main Makefile.

The cross-compilation setup of Configure has successfully been used in
at least two Linux cross-compilation environments.  The setups were
both such that the host system was Intel Linux with a gcc built for
cross-compiling into ARM Linux, and there was a SSH connection to the
target system.

To run Configure in cross-compilation mode the basic switch that
has to be used is C<-Dusecrosscompile>.
d1949 1
a1949 1
or if you are happy with the defaults:
a1955 10
Another example where the cross-compiler has been installed under
F</usr/local/arm/2.95.5>:

    sh ./Configure -des -Dusecrosscompile \
        -Dtargethost=so.me.ho.st \
        -Dcc=/usr/local/arm/2.95.5/bin/arm-linux-gcc \
        -Dincpth=/usr/local/arm/2.95.5/include \
        -Dusrinc=/usr/local/arm/2.95.5/include \
        -Dlibpth=/usr/local/arm/2.95.5/lib

d2439 1
a2439 1
in Linux is as follows (under $Config{prefix}):
d2442 20
a2461 5
  ./lib/perl5/5.9.3/strict.pm
  ./lib/perl5/5.9.3/warnings.pm
  ./lib/perl5/5.9.3/i686-linux/File/Glob.pm
  ./lib/perl5/5.9.3/i686-linux/XSLoader.pm
  ./lib/perl5/5.9.3/i686-linux/auto/File/Glob/Glob.so
d2464 1
a2464 1
size about 1.9MB in its i386 version:
d2466 3
a2468 47
  /usr/bin/perl
  /usr/bin/perl5.8.4
  /usr/lib/perl/5.8
  /usr/lib/perl/5.8.4/B.pm
  /usr/lib/perl/5.8.4/B/Deparse.pm
  /usr/lib/perl/5.8.4/Config.pm
  /usr/lib/perl/5.8.4/Cwd.pm
  /usr/lib/perl/5.8.4/Data/Dumper.pm
  /usr/lib/perl/5.8.4/DynaLoader.pm
  /usr/lib/perl/5.8.4/Errno.pm
  /usr/lib/perl/5.8.4/Fcntl.pm
  /usr/lib/perl/5.8.4/File/Glob.pm
  /usr/lib/perl/5.8.4/IO.pm
  /usr/lib/perl/5.8.4/IO/File.pm
  /usr/lib/perl/5.8.4/IO/Handle.pm
  /usr/lib/perl/5.8.4/IO/Pipe.pm
  /usr/lib/perl/5.8.4/IO/Seekable.pm
  /usr/lib/perl/5.8.4/IO/Select.pm
  /usr/lib/perl/5.8.4/IO/Socket.pm
  /usr/lib/perl/5.8.4/POSIX.pm
  /usr/lib/perl/5.8.4/Socket.pm
  /usr/lib/perl/5.8.4/XSLoader.pm
  /usr/lib/perl/5.8.4/auto/Cwd/Cwd.bs
  /usr/lib/perl/5.8.4/auto/Cwd/Cwd.so
  /usr/lib/perl/5.8.4/auto/Data/Dumper/Dumper.bs
  /usr/lib/perl/5.8.4/auto/Data/Dumper/Dumper.so
  /usr/lib/perl/5.8.4/auto/DynaLoader/DynaLoader.a
  /usr/lib/perl/5.8.4/auto/DynaLoader/autosplit.ix
  /usr/lib/perl/5.8.4/auto/DynaLoader/dl_expandspec.al
  /usr/lib/perl/5.8.4/auto/DynaLoader/dl_find_symbol_anywhere.al
  /usr/lib/perl/5.8.4/auto/DynaLoader/dl_findfile.al
  /usr/lib/perl/5.8.4/auto/DynaLoader/extralibs.ld
  /usr/lib/perl/5.8.4/auto/Fcntl/Fcntl.bs
  /usr/lib/perl/5.8.4/auto/Fcntl/Fcntl.so
  /usr/lib/perl/5.8.4/auto/File/Glob/Glob.bs
  /usr/lib/perl/5.8.4/auto/File/Glob/Glob.so
  /usr/lib/perl/5.8.4/auto/IO/IO.bs
  /usr/lib/perl/5.8.4/auto/IO/IO.so
  /usr/lib/perl/5.8.4/auto/POSIX/POSIX.bs
  /usr/lib/perl/5.8.4/auto/POSIX/POSIX.so
  /usr/lib/perl/5.8.4/auto/POSIX/autosplit.ix
  /usr/lib/perl/5.8.4/auto/POSIX/load_imports.al
  /usr/lib/perl/5.8.4/auto/Socket/Socket.bs
  /usr/lib/perl/5.8.4/auto/Socket/Socket.so
  /usr/lib/perl/5.8.4/lib.pm
  /usr/lib/perl/5.8.4/re.pm
  /usr/share/doc/perl-base
a2469 2
  /usr/share/doc/perl/Documentation
  /usr/share/doc/perl/README.Debian.gz
a2470 1
  /usr/share/doc/perl/copyright
d2472 74
a2545 50
  /usr/share/perl/5.8
  /usr/share/perl/5.8.4/AutoLoader.pm
  /usr/share/perl/5.8.4/Carp.pm
  /usr/share/perl/5.8.4/Carp/Heavy.pm
  /usr/share/perl/5.8.4/Exporter.pm
  /usr/share/perl/5.8.4/Exporter/Heavy.pm
  /usr/share/perl/5.8.4/File/Spec.pm
  /usr/share/perl/5.8.4/File/Spec/Unix.pm
  /usr/share/perl/5.8.4/FileHandle.pm
  /usr/share/perl/5.8.4/Getopt/Long.pm
  /usr/share/perl/5.8.4/IO/Socket/INET.pm
  /usr/share/perl/5.8.4/IO/Socket/UNIX.pm
  /usr/share/perl/5.8.4/IPC/Open2.pm
  /usr/share/perl/5.8.4/IPC/Open3.pm
  /usr/share/perl/5.8.4/List/Util.pm
  /usr/share/perl/5.8.4/Scalar/Util.pm
  /usr/share/perl/5.8.4/SelectSaver.pm
  /usr/share/perl/5.8.4/Symbol.pm
  /usr/share/perl/5.8.4/Text/ParseWords.pm
  /usr/share/perl/5.8.4/Text/Tabs.pm
  /usr/share/perl/5.8.4/Text/Wrap.pm
  /usr/share/perl/5.8.4/attributes.pm
  /usr/share/perl/5.8.4/base.pm
  /usr/share/perl/5.8.4/bytes.pm
  /usr/share/perl/5.8.4/bytes_heavy.pl
  /usr/share/perl/5.8.4/constant.pm
  /usr/share/perl/5.8.4/fields.pm
  /usr/share/perl/5.8.4/integer.pm
  /usr/share/perl/5.8.4/locale.pm
  /usr/share/perl/5.8.4/overload.pm
  /usr/share/perl/5.8.4/strict.pm
  /usr/share/perl/5.8.4/utf8.pm
  /usr/share/perl/5.8.4/utf8_heavy.pl
  /usr/share/perl/5.8.4/vars.pm
  /usr/share/perl/5.8.4/warnings.pm
  /usr/share/perl/5.8.4/warnings/register.pm

A nice trick to find out the minimal set of Perl library files you will
need to run a Perl program is

   perl -e 'do "prog.pl"; END { print "$_\n" for sort keys %INC }' 

(this will not find libraries required in runtime, unfortunately, but
it's a minimal set) and if you want to find out all the files you can
use something like the below

   strace perl -le 'do "x.pl"' 2>&1 | perl -nle '/^open\(\"(.+?)"/ && print $1'

(The 'strace' is Linux-specific, other similar utilities include 'truss'
and 'ktrace'.)
@


1.1.1.10
log
@import perl 5.10.0 from CPAN
@
text
@d7 49
a55 1
Install - Build and Installation guide for perl 5.
d59 1
a59 1
First, make sure you have an up-to-date version of Perl.  If you
d62 1
a62 1
subreleases (like 5.8.x and 5.10.x) are stable maintenance releases and
d69 2
a70 2
The basic steps to build and install perl 5 on a Unix system with all
the defaults are to run, from a freshly unpacked source tree:
d72 1
d82 1
a82 5
If that's not okay with you, you can run Configure interactively, by
just typing "sh Configure" (without the -de args). You can also specify
any prefix location by adding "-Dprefix='/some/dir'" to Configure's args.
To explicitly name the perl binary, use the command
"make install PERLNAME=myperl".
d84 12
a95 1
These options, and many more, are explained in further detail below.
d98 1
a98 1
L<"Reporting Problems"> below.
d101 1
a101 1
pod/perl5100delta.pod file.  For more detailed information about specific
d123 3
a125 2
system (in the hints/ directory) you might also want to read it
for even more information.
d135 1
a135 1
Please see pod/perl5100delta.pod for a description of the changes and
d138 4
a141 1
to pod/perl5100delta.pod for more detailed information.
a142 1
B<WARNING:> This version is not binary compatible with prior releases of Perl.
d148 3
a150 2
without reinstallation.  See the discussion below on
L<"Coexistence with earlier versions of perl 5"> for more details.
d156 1
a156 1
pod/perl5100delta.pod for a description of what's changed.  See your
d161 59
a234 3
The results of a Configure run are stored in the config.sh and Policy.sh
files.

d246 1
a246 1
=item C compiler
d248 1
a248 2
To compile with gcc, if it's not the default compiler on your
system, you should run
d252 1
a252 1
This is the preferred way to specify gcc (or any another alternative
d259 1
a259 1
and L<"Coexistence with earlier versions of perl 5"> below for
d307 1
a307 1
=item Building a development release
d322 5
a326 1
=head2 Altering Configure variables for C compiler switches etc.
d335 1
a335 6
	sh Configure -Accflags="-DPERL_EXTERNAL_GLOB -DNO_HASH_SEED"

To clarify, those ccflags values are not Configure options; if passed to
Configure directly, they won't do anything useful (they will define a
variable in config.sh, but without taking any action based upon it).
But when passed to the compiler, those flags will activate #ifdefd code.
d355 3
d360 11
a370 5
Perl used to have two different internal threads implementations.  The current
model (available internally since 5.6, and as a user-level module since 5.8) is
called interpreter-based implementation (ithreads), with one interpreter per
thread, and explicit sharing of data.  The (deprecated) 5.005 version
(5005threads) has been removed for release 5.10.
d373 2
a374 2
'Thread' module emulates the old 5005threads interface on top of the current
ithreads model.
d382 1
a382 1
C<-Accflags=-DPERL_REENTRANT_MAXSIZE=65536>.
d384 1
a384 1
=head3 Large file support
d395 2
a396 1
will happen.
d403 1
a403 5
If you want to compile perl without large file support, use

    sh Configure -Uuselargefiles

=head3 64 bit support
d405 2
a406 2
If your platform does not run natively at 64 bits, but can simulate
them with compiler flags and/or C<long long> or C<int64_t>,
d429 7
a435 5
Natively 64-bit systems need neither -Duse64bitint nor -Duse64bitall.
On these systems, it might be the default compilation mode, and there
is currently no guarantee that passing no use64bitall option to the
Configure process will build a 32bit perl. Implementing -Duse32bit*
options is planned for perl 5.12.
d449 51
d538 2
a539 1
be, affected by the insertion order.  Note that because of this
d541 1
a541 1
between different runs of Perl, since Data::Dumper by default dumps
d550 1
a550 3
Version 5.  The corresponding Configure option is -Dusesocks.
You can find more about SOCKS from wikipedia at
L<http://en.wikipedia.org/wiki/SOCKS>.
d554 2
a555 2
By default, Configure will compile perl to use dynamic loading.
If you want to force perl to be compiled completely
a557 2
With this option, you won't be able to use any new extension
(XS) module without recompiling perl itself.
d563 2
a564 1
extensions, and various extra libraries, such as -lm.
d566 1
a566 1
On systems that support dynamic loading, it may be possible to
d584 1
a584 1
libperl.so.5.8.8 (for Perl 5.8.8), or libperl.so.588, or simply
d590 3
d613 1
a613 2
        cd t; ./perl -MTestInit misc/failing_test.t

a614 1

d633 1
a633 2

    18126:./miniperl: /sbin/loader: Fatal Error: cannot map libperl.so
d638 2
a639 2
install a standard Perl 5.10.0 with a shared library.  Then, suppose you
try to build Perl 5.10.0 with -DDEBUGGING enabled, but everything else
d676 8
a683 5
appropriate questions in Configure.  For convenience, all the installation
questions are near the beginning of Configure.  Do not include trailing
slashes on directory names.  At any point during the Configure process,
you can answer a question with  &-d  and Configure will use the defaults
from then on.  Alternatively, you can
d701 1
a701 1
By default, Configure will use the following directories for 5.10.0.
d703 1
a703 1
5.10.0 or 5.9.5, and $archname is a string like sun4-sunos,
d807 1
a807 1
See L<"Coexistence with earlier versions of perl 5"> below for more details
d848 1
a848 1
=item usesitecustomize
d854 2
a855 2
which will define USE_SITECUSTOMIZE and $Config{usesitecustomize}.
When enabled, this makes perl run F<$sitelibexp/sitecustomize.pl> before
d861 11
a871 3
By default, man pages will be installed in $man1dir and $man3dir, which
are normally /usr/local/man/man1 and /usr/local/man/man3.  If you
want to use a .3pm suffix for perl man pages, you can do that with
d875 3
d899 1
a899 1
discussed in L<"Coexistence with earlier versions of perl 5"> below.
d906 1
a906 1
-Dprefix=/opt/perl, then the default library directories for 5.9.0 are
d909 4
a912 4
	$privlib	/opt/perl/lib/5.9.0
	$archlib	/opt/perl/lib/5.9.0/$archname
	$sitelib	/opt/perl/lib/site_perl/5.9.0
	$sitearch	/opt/perl/lib/site_perl/5.9.0/$archname
d917 1
a917 1
associated files) should be installed, and the directory in which it
d920 10
a929 6
However, sites that use package management software such as rpm or
dpkg, or users building binary packages for distribution may also
wish to install perl into a different directory before moving perl
to its final destination.  There are two ways to do that:

=over 4
d931 1
a931 6
=item installprefix

To install perl under the /tmp/perl5 directory, use the following
command line:

    sh Configure -Dinstallprefix=/tmp/perl5
d937 2
a938 2
follow this example.  That's why it's usually better to use DESTDIR,
as shown in the next section.
d940 1
a940 1
=item DESTDIR
a956 2
=back

d960 5
a964 9
answers (such as installation directories) in the Policy.sh file.
If you want to build perl on another system using the same policy
defaults, simply copy the Policy.sh file to the new system's perl build
directory, and Configure will use it. This will work even if Policy.sh was
generated for another version of Perl, or on a system with a
different architecture and/or operating system. However, in such cases,
you should review the contents of the file before using it: for
example, your new target may not keep its man pages in the same place
as the system on which the file was generated.
d982 3
a984 4
installed perl binaries in the tree that is specified as target tree,
and these will be used as locations to search for modules by the perl
being built. The list of perl versions found will be put in the Configure
variable inc_version_list.
a1010 2
	make test
	make install
d1018 1
a1018 20
you probably want to have support for perl internal debugging code
(activated by adding -DDEBUGGING to ccflags), and/or support for the
system debugger by adding -g to the optimisation flags. For that,
use the parameter:

	sh Configure -DDEBUGGING

or

	sh Configure -DDEBUGGING=<mode>

For a more eye appealing call, -DEBUGGING is defined to be an alias
for -DDEBUGGING. For both, the -U calls are also supported, in order
to be able to overrule the hints or Policy.sh settings.

Here are the DEBUGGING modes:

=over 4

=item -DDEBUGGING
d1020 1
a1020 1
=item -DEBUGGING
d1022 11
a1032 1
=item -DEBUGGING=both
d1034 2
a1035 21
Sets both -DDEBUGGING in the ccflags, and adds -g to optimize.

You can actually specify -g and -DDEBUGGING independently (see below),
but usually it's convenient to have both.

=item -DEBUGGING=-g

=item -Doptimize=-g

Adds -g to optimize, but does not set -DDEBUGGING.

(Note:  Your system may actually require something like cc -g2.
Check your man pages for cc(1) and also any hint file for your system.)

=item -DEBUGGING=none

=item -UDEBUGGING

Removes -g from optimize, and -DDEBUGGING from ccflags.

=back
d1047 25
a1071 1
only if it is able to find the gdbm library.
d1086 4
a1089 11
If you unpack any additional extensions in the ext/ directory before
running Configure, then Configure will offer to build those additional
extensions as well.  Most users probably shouldn't have to do this --
it is usually easier to build additional extensions later after perl
has been installed.  However, if you wish to have those additional
extensions statically linked into the perl binary, then this offers a
convenient way to do that in one step.  (It is not necessary, however;
you can build and install extensions just fine even if you don't have
dynamic loading.  See lib/ExtUtils/MakeMaker.pm for more details.)
Another way of specifying extra modules is described in
L<"Adding extra modules to the build"> below.
d1091 1
a1091 1
If you re-use an old config.sh but change your system (e.g. by
d1096 5
d1103 2
a1104 2
Perl comes with interfaces to number of libraries, including threads,
dbm, ndbm, gdbm, and Berkeley db.  For the *db* extension, if
d1106 11
a1116 10
automatically include that extension.  The threading extension needs
to be specified explicitely (see L<Threads>).

Those libraries are not distributed with perl. If your header (.h) files
for those libraries are not in a directory normally searched by your C
compiler, then you will need to include the appropriate -I/your/directory
option when prompted by Configure.  If your libraries are not in a
directory normally searched by your C compiler and linker, then you will
need to include the appropriate -L/your/directory option when prompted
by Configure. See the examples below.
d1131 4
a1134 3
your C compiler, you should include -I/usr/local/include, if it's
not here yet. Similarly, when Configure prompts you for linker flags,
you should include -L/usr/local/lib.
d1146 1
a1146 1
Suppose you have gdbm installed in some place other than /usr/local,
d1157 3
a1159 3
    sh Configure -de \
        -Dlocincpth="/usr/you/include" \
        -Dloclibpth="/usr/you/lib"
d1169 3
a1171 3
    sh Configure -de \
        -Dlocincpth="/usr/you/include /usr/local/include" \
        -Dloclibpth="/usr/you/lib /usr/local/lib"
d1175 33
d1210 2
a1211 3
If you want to use an old config.sh produced by a previous run of
Configure, but override some of the items with command line options, you
need to use B<Configure -O>.
d1230 2
a1255 6
Note that Perl's malloc isn't always used by default; that actually
depends on your system. For example, on Linux and FreeBSD (and many more
systems), Configure chooses to use the system's malloc by default.
See the appropriate file in the F<hints/> directory to see how the
default is set.

d1259 1
a1259 1
run Configure to accept all the defaults.
d1281 1
a1281 1
       sh Configure -Accflags=-DPERL_DEBUGGING_MSTATS -Dusemymalloc
d1290 1
a1290 1
If none of them help, then see L<"Reporting Problems"> below.
d1311 3
a1313 29
Hint files tell Configure about a number of things:

=over 4

=item o

The peculiarities or conventions of particular platforms -- non-standard
library locations and names, default installation locations for binaries,
and so on.

=item o

The deficiencies of the platform -- for example, library functions that,
although present, are too badly broken to be usable; or limits on
resources that are generously available on most platforms.

=item o

How best to optimize for the platform, both in terms of binary size and/or
speed, and for Perl feature support. Because of wide variations in the
implementation of shared libraries and of threading, for example, Configure
often needs hints in order to be able to use these features.

=back

The perl distribution includes many system-specific hints files
in the hints/ directory. If one of them matches your system, Configure
will offer to use that hint file. Unless you have a very good reason
not to, you should accept its offer.
d1319 1
a1319 1
file, which also explains hint files known as callback-units.
d1321 1
a1321 2
Note that any hint file is read before any Policy file, meaning that
Policy overrides hints -- see L</Site-wide Policy settings>.
d1323 4
a1326 1
=item WHOA THERE!!!
d1328 12
a1339 4
If you are re-using an old config.sh, it's possible that Configure detects
different values from the ones specified in this file.  You will almost
always want to keep the previous value, unless you have changed something
on your system.
d1359 5
a1363 1
rename it, then rerun Configure with the options you want to use.
d1426 29
d1479 1
a1479 1
	Configure -Dextras="Bundle::LWP DBI"
d1482 1
a1482 1
then answer "Bundle::LWP DBI" to the 'Extras?' question.
d1495 2
a1496 1
For example: you will need to have the Foo database specific
a1517 1

d1519 1
a1519 1
privileges, such as B<sudo>.
d1539 1
a1539 1
These error reports are normal, and can be ignored:
d1551 1
a1551 1
then see L<"Reporting Problems"> below.
d1575 1
a1575 1
whole L<perllocale/"LOCALE PROBLEMS"> section in the file pod/perllocale.pod.
d1670 1
a1670 1
=item .*_r() prototype NOT found
d1833 1
a1833 1
Some additional things that have been reported:
d1845 6
d1884 1
a1884 1
README.ce
d1935 1
a1935 2
symbol C<usecrosscompile> available, and C<xconfig.h> will be used
for cross-compilation.
d2032 1
a2032 1
	cd t ; ./perl -MTestInit op/groups.t
d2037 1
a2037 1
	cd t ; ./perl harness <list of tests>
d2040 8
a2047 2
complicated constructs). If no list of tests is provided, harness
will run all tests.
d2049 1
d2064 1
a2064 1
'make test' exercises them.  For example, this may happen if you have
d2093 1
a2093 2
F<ext/Time/HiRes/t/HiRes.t>, F<ext/threads/shared/t/waithires.t>,
F<ext/threads/shared/t/stress.t>, F<lib/Benchmark.t>,
a2095 4
You might also experience some failures in F<t/op/stat.t> if you build
perl on an NFS filesystem, if the remote clock and the system clock are
different.

d2105 1
a2105 1
	cd t; ./perl -MTestInit op/pat.t
d2187 1
a2187 1
"perl5.8.9") by setting PERLNAME_VERBASE, like
d2193 1
a2193 1
Without this the versioned binary would be called "perl55.8.8".
d2203 2
a2204 1
the example in L<"DESTDIR"> above.
d2219 1
a2219 1
	    perl5.n.n	where 5.n.n is the current release number.  This
d2222 1
a2222 1
	    sperl5.n.n	If you requested setuid emulation.
d2227 2
a2228 2
	cppstdin	This is used by the deprecated switch perl -P, if
			your cc -E can't read from stdin.
d2230 1
a2230 9
	config_data	Manage Module::Build-like module configuration
	corelist	Shows versions of modules that come with different
			versions of perl
	cpan		The CPAN shell
	cpan2dist	The CPANPLUS distribution creator
	cpanp		The CPANPLUS shell
	cpanp-run-perl	An helper for cpanp
	dprofpp		Perl code profiler post-processor
	enc2xs		Encoding module generator
a2233 2
	instmodsh	A shell to examine installed modules.
	libnetcfg	Configure libnet.
a2235 3
	perlivp		Perl Installation Verification Procedure
	piconv		A Perl implementation of the encoding conversion
			utility iconv
d2241 2
a2243 8
	podchecker	POD syntax checker
	podselect	Prints sections of POD documentation
	prove		A command-line tool for running tests
	psed		A Perl implementation of sed
	ptar		A Perl implementation of tar
	ptardiff	A diff for tar archives
	s2p		sed-to-perl translator
	shasum		A tool to print or check SHA checksums
d2245 1
a2245 1
	xsubpp		Compiler to convert Perl XS code into C code
d2259 1
a2259 1
installperl will also create the directories listed above
a2266 2
=head2 Installing only version-specific parts

d2269 1
a2269 1
perl alongside an already installed production version without
a2280 1

d2284 1
a2284 124
=head1 cd /usr/include; h2ph *.h sys/*.h

Some perl scripts need to be able to obtain information from the
system header files.  This command will convert the most commonly used
header files in /usr/include into files that can be easily interpreted
by perl.  These files will be placed in the architecture-dependent
library ($archlib) directory you specified to Configure.

Note:  Due to differences in the C and perl languages, the conversion
of the header files is not perfect.  You will probably have to
hand-edit some of the converted files to get them to parse correctly.
For example, h2ph breaks spectacularly on type casting and certain
structures.

=head1 installhtml --help

Some sites may wish to make perl documentation available in HTML
format.  The installhtml utility can be used to convert pod
documentation into linked HTML files and install them.

Currently, the supplied ./installhtml script does not make use of the
html Configure variables.  This should be fixed in a future release.

The following command-line is an example of one used to convert
perl documentation:

  ./installhtml                   \
      --podroot=.                 \
      --podpath=lib:ext:pod:vms   \
      --recurse                   \
      --htmldir=/perl/nmanual     \
      --htmlroot=/perl/nmanual    \
      --splithead=pod/perlipc     \
      --splititem=pod/perlfunc    \
      --libpods=perlfunc:perlguts:perlvar:perlrun:perlop \
      --verbose

See the documentation in installhtml for more details.  It can take
many minutes to execute a large installation and you should expect to
see warnings like "no title", "unexpected directive" and "cannot
resolve" as the files are processed. We are aware of these problems
(and would welcome patches for them).

You may find it helpful to run installhtml twice. That should reduce
the number of "cannot resolve" warnings.

=head1 cd pod && make tex && (process the latex files)

Some sites may also wish to make the documentation in the pod/ directory
available in TeX format.  Type

	(cd pod && make tex && <process the latex files>)

=head1 Starting all over again

If you wish to re-build perl from the same build directory, you should
clean it out with the command

	make distclean

or

	make realclean

The only difference between the two is that make distclean also removes
your old config.sh and Policy.sh files.

If you are upgrading from a previous version of perl, or if you
change systems or compilers or make other significant changes, or if
you are experiencing difficulties building perl, you should not re-use
your old config.sh.

If your reason to reuse your old config.sh is to save your particular
installation choices, then you can probably achieve the same effect by
using the Policy.sh file.  See the section on L<"Site-wide Policy
settings"> above.

=head1 Reporting Problems

Wherever possible please use the perlbug tool supplied with this Perl
to report problems, as it automatically includes summary configuration
information about your perl, which may help us track down problems far
more quickly. But first you should read the advice in this file,
carefully re-read the error message and check the relevant manual pages
on your system, as these may help you find an immediate solution.  If
you are not sure whether what you are seeing is a bug, you can send a
message describing the problem to the comp.lang.perl.misc newsgroup to
get advice.

The perlbug tool is installed along with perl, so after you have
completed C<make install> it should be possible to run it with plain
C<perlbug>.  If the install fails, or you want to report problems with
C<make test> without installing perl, then you can use C<make nok> to
run perlbug to report the problem, or run it by hand from this source
directory with C<./perl -Ilib utils/perlbug>

If the build fails too early to run perlbug uninstalled, then please
B<run> the C<./myconfig> shell script, and mail its output along with
an accurate description of your problem to perlbug@@perl.org

If Configure itself fails, and does not generate a config.sh file
(needed to run C<./myconfig>), then please mail perlbug@@perl.org the
description of how Configure fails along with details of your system
- for example the output from running C<uname -a>

Please try to make your message brief but clear.  Brief, clear bug
reports tend to get answered more quickly.  Please don't worry if your
written English is not great - what matters is how well you describe
the important technical details of the problem you have encountered,
not whether your grammar and spelling is flawless.

Trim out unnecessary information.  Do not include large files (such as
config.sh or a complete Configure or make log) unless absolutely
necessary.  Do not include a complete transcript of your build
session.  Just include the failing commands, the relevant error
messages, and whatever preceding commands are necessary to give the
appropriate context.  Plain text should usually be sufficient--fancy
attachments or encodings may actually reduce the number of people who
read your message.  Your message will get relayed to over 400
subscribers around the world so please try to keep it brief but clear.

If you are unsure what makes a good bug report please read "How to
report Bugs Effectively" by Simon Tatham:
http://www.chiark.greenend.org.uk/~sgtatham/bugs.html
d2286 1
a2286 3
=head1 Coexistence with earlier versions of perl 5

Perl 5.10 is not binary compatible with earlier versions of Perl.
d2290 7
a2296 3
5.X.Y) to another similar minor version (e.g. 5.X.(Y+1))) without
re-compiling all of your extensions.  You can also safely leave the old
version around in case the new version causes you problems for some reason.
d2298 2
a2299 2
Usually, most extensions will probably not need to be recompiled to be
used with a newer version of Perl.  Here is how it is supposed to work.
d2302 2
a2303 2
Suppose you already have version 5.8.7 installed.  The directories
searched by 5.8.7 are typically like:
d2305 13
a2317 12
	/usr/local/lib/perl5/5.8.7/$archname
	/usr/local/lib/perl5/5.8.7
	/usr/local/lib/perl5/site_perl/5.8.7/$archname
	/usr/local/lib/perl5/site_perl/5.8.7

Now, suppose you install version 5.8.8.  The directories
searched by version 5.8.8 will be:

	/usr/local/lib/perl5/5.8.8/$archname
	/usr/local/lib/perl5/5.8.8
	/usr/local/lib/perl5/site_perl/5.8.8/$archname
	/usr/local/lib/perl5/site_perl/5.8.8
d2319 2
a2320 2
	/usr/local/lib/perl5/site_perl/5.8.7/$archname
	/usr/local/lib/perl5/site_perl/5.8.7
d2325 2
a2326 2
directories.  This way, modules installed under 5.8.7 will continue
to be usable by 5.8.7 but will also accessible to 5.8.8.  Further,
d2328 3
a2330 3
present only in 5.8.8.  That new module will get installed into
/usr/local/lib/perl5/site_perl/5.8.8 and will be available to 5.8.8,
but will not interfere with the 5.8.7 version.
d2335 2
a2336 2
Lastly, suppose you now install 5.10.0, which is not binary compatible
with 5.8.x.  The directories searched by 5.10.0 (if you don't change the
d2339 4
a2342 4
	/usr/local/lib/perl5/5.10.0/$archname
	/usr/local/lib/perl5/5.10.0
	/usr/local/lib/perl5/site_perl/5.10.0/$archname
	/usr/local/lib/perl5/site_perl/5.10.0
d2344 1
a2344 1
	/usr/local/lib/perl5/site_perl/5.8.8
d2346 1
a2346 1
	/usr/local/lib/perl5/site_perl/5.8.7
d2353 12
d2377 1
a2377 1
	sh Configure -Dprefix=/opt/perl5.10.0
d2379 1
a2379 1
and adding /opt/perl5.10.0/bin to the shell PATH variable.  Such users
d2384 1
a2384 1
(e.g. 5.10 for all 5.10.x versions), but change directory with
d2392 1
a2392 1
=head2 Upgrading from 5.8.x or earlier
d2394 2
a2395 2
B<Perl 5.10.0 is binary incompatible with Perl 5.8.x and any earlier
Perl release.>  Perl modules having binary parts
d2397 3
a2399 3
used with 5.10.0.  If you find you do need to rebuild an extension with
5.10.0, you may safely do so without disturbing the older
installations.  (See L<"Coexistence with earlier versions of perl 5">
d2406 68
d2604 1
a2604 1
   perl -e 'do "prog.pl"; END { print "$_\n" for sort keys %INC }'
a2614 7
=head2 C<-DNO_MATHOMS>

If you configure perl with C<-Accflags=-DNO_MATHOMS>, the functions from
F<mathoms.c> will not be compiled in. Those functions are no longer used
by perl itself; for source compatibility reasons, though, they weren't
completely removed.

d2622 15
@


1.1.1.11
log
@import perl 5.10.1
@
text
@d45 2
a46 2
pod/perl5101delta.pod file.  For more information about how to find more
specific detail about changes, see the Changes file.
d78 1
a78 1
Please see pod/perl5101delta.pod for a description of the changes and
d81 1
a81 1
to pod/perl5101delta.pod for more detailed information.
d83 1
a83 2
B<WARNING:> This version is not binary compatible with releases of
Perl prior to 5.10.0.
d96 1
a96 1
pod/perl5101delta.pod for a description of what's changed.  See your
d467 2
a468 2
install a standard Perl 5.10.1 with a shared library.  Then, suppose you
try to build Perl 5.10.1 with -DDEBUGGING enabled, but everything else
d527 1
a527 1
By default, Configure will use the following directories for 5.10.1.
d529 1
a529 1
5.10.1 or 5.9.5, and $archname is a string like sun4-sunos,
a774 15
=head2 Relocatable @@INC

To create a relocatable perl tree, use the following command line:

    sh Configure -Duserelocatableinc

Then the paths in @@INC (and everything else in %Config) can be
optionally located via the path of the perl executable.

That means that, if the string ".../" is found at the start of any
path, it's substituted with the directory of $^X. So, the relocation
can be configured on a per-directory basis, although the default with
"-Duserelocatableinc" is that everything is relocated. The initial
install is done to the original configured prefix.

a892 16
Note that a perl built with -DDEBUGGING will be bigger and will run more
slowly than a standard perl.

=head2 DTrace support

On platforms where DTrace is available, it may be enabled by 
using the -Dusedtrace option to Configure. DTrace probes are available for
subroutine entry (sub-entry) and subroutine exit (sub-exit). Here's a
simple D script that uses them:

  perl$target:::sub-entry, perl$target:::sub-return {
    printf("%s %s (%s:%d)\n", probename == "sub-entry" ? "->" : "<-",
              copyinstr(arg0), copyinstr(arg1), arg2);
  }


d973 1
a973 1
=item BerkeleyDB in /usr/local/BerkeleyDB
d975 7
a981 9
The version of BerkeleyDB distributed by sleepycat.com installs in a
version-specific directory by default, typically something like
/usr/local/BerkeleyDB.4.7.  To have Configure find that, you need to add
-I/usr/local/BerkeleyDB.4.7/include to cc flags, as in the previous example,
and you will also have to take extra steps to help Configure find -ldb.
Specifically, when Configure prompts you for library directories,
add /usr/local/BerkeleyDB.4.7/lib to the list.  Also, you will need to
add appropriate linker flags to tell the runtime linker where to find the
BerkeleyDB shared libraries.
d983 1
a983 1
It is possible to specify this from the command line (all on one
d987 2
a988 3
        -Dlocincpth='/usr/local/BerkeleyDB.4.7/include /usr/local/include' \
        -Dloclibpth='/usr/local/BerkeleyDB.4.7/lib /usr/local/lib' \
        -Aldflags='-R/usr/local/BerkeleyDB.4.7/lib'
d994 3
a996 1
Configure will automatically add the appropriate -L directives.
d998 3
a1000 4
The addition to ldflags is so that the dynamic linker knows where to find
the BerkeleyDB libraries.  For Linux and Solaris, the -R option does that.
Other systems may use different flags.  Use the appropriate flag for your
system.
a1370 12
=item other environment variables

Configure does not check for environment variables that can sometimes
have a major influence on how perl is built or tested. For example,
OBJECT_MODE on AIX determines the way the compiler and linker deal with
their objects, but this is a variable that only influences build-time
behaviour, and should not affect the perl scripts that are eventually
executed by the perl binary. Other variables, like PERL_UNICODE,
PERL5LIB, and PERL5OPT will influence the behaviour of the test suite.
So if you are getting strange test failures, you may want to try
retesting with the various PERL variables unset.

d1537 5
a1541 3
Most users will see warnings for the ones they don't have.  The
phrase 'probably harmless' is intended to reassure you that nothing
unusual is happening, and the build process is continuing.
d1865 2
a1866 2
F<ext/Time-HiRes/t/HiRes.t>, F<ext/threads-shared/t/waithires.t>,
F<ext/threads-shared/t/stress.t>, F<lib/Benchmark.t>,
a1888 7
=item libgcc_s.so.1: cannot open shared object file

This message has been reported on gcc-3.2.3 and earlier installed with
a non-standard prefix.  Setting the LD_LIBRARY_PATH environment variable
(or equivalent) to include gcc's lib/ directory with the libgcc_s.so.1
shared library should fix the problem.

a1940 12
The core distribution can now run its regression tests in parallel on
Unix-like platforms. Instead of running C<make test>, set C<TEST_JOBS> in
your environment to the number of tests to run in parallel, and run
C<make test_harness>. On a Bourne-like shell, this can be done as

    TEST_JOBS=3 make test_harness  # Run 3 tests in parallel

An environment variable is used, rather than parallel make itself, because
L<TAP::Harness> needs to be able to schedule individual non-conflicting test
scripts itself, and there is no standard interface to C<make> utilities to
interact with their job schedulers.

a2202 9
If the bug you are reporting has security implications, which make it
inappropriate to send to a publicly archived mailing list, then please send
it to perl5-security-report@@perl.org. This points to a closed subscription
unarchived mailing list, which includes all the core committers, who be able
to help assess the impact of issues, figure out a resolution, and help
co-ordinate the release of patches to mitigate or fix the problem across all
platforms on which Perl is supported. Please only use this address for security
issues in the Perl core, not for modules independently distributed on CPAN.

d2209 2
a2210 3
This version is not binary compatible with releases of Perl prior
to 5.10.0.  In other words, you will have to recompile any XS modules
installed under version 5.8.9 (or earlier).
d2221 2
a2222 13
Suppose you already have versions 5.8.9 and 5.10.0 installed, and you
are now installing 5.10.1.  The directories searched by version 5.10.1
will be:

    /usr/local/lib/perl5/5.10.1/$archname
    /usr/local/lib/perl5/5.10.1
    /usr/local/lib/perl5/site_perl/5.10.1/$archname
    /usr/local/lib/perl5/site_perl/5.10.1

    /usr/local/lib/perl5/site_perl/5.10.0/$archname
    /usr/local/lib/perl5/site_perl/5.10.0
    /usr/local/lib/perl5/site_perl/5.8.9
    /usr/local/lib/perl5/site_perl
d2224 18
a2241 1
Notice the last four entries -- Perl understands the default structure
d2243 27
a2269 9
directories.  It will load up architecture-dependent modules from your
5.10.0 installation, and pure perl modules from either your 5.10.0 or
5.8.9 installations.  The last entry, /usr/local/lib/perl5/site_perl/,
is there for 5.004-era pure perl modules.

Next, suppose that you now upgrade a module to one which requires
features present only in 5.10.1.  That new module will get installed into
/usr/local/lib/perl5/site_perl/5.10.1 and will be available to 5.10.1,
but will not interfere with the 5.10.0 version.
a2274 2
This search order is scheduled for revision starting in version 5.11.0.

d2283 1
a2283 1
	sh Configure -Dprefix=/opt/perl5.10.1
d2285 1
a2285 1
and adding /opt/perl5.10.1/bin to the shell PATH variable.  Such users
d2300 1
a2300 1
B<Perl 5.10.1 is binary incompatible with Perl 5.8.x and any earlier
d2303 2
a2304 2
used with 5.10.1.  If you find you do need to rebuild an extension with
5.10.1, you may safely do so without disturbing the older
@


1.1.1.12
log
@Perl 5.12.2 from CPAN
@
text
@a38 5
Building perl from source requires an ANSI compliant C-Compiler.
A minimum of C89 is required. Some features available in C99 will
be probed for and used when found. The perl build process does not
rely on anything more than C89.

d45 1
a45 1
pod/perl5122delta.pod file.  For more information about how to find more
d78 1
a78 1
Please see pod/perl5122delta.pod for a description of the changes and
d81 1
a81 1
to pod/perl5122delta.pod for more detailed information.
d83 2
a84 1
B<WARNING:> This version is not binary compatible with prior releases of Perl.
d97 1
a97 1
pod/perl5122delta.pod for a description of what's changed.  See your
d248 1
a248 1
(5005threads) was removed for release 5.10.
d314 1
a314 1
options is planned for a future release of perl.
d468 2
a469 2
install a standard Perl 5.10.0 with a shared library.  Then, suppose you
try to build Perl 5.10.0 with -DDEBUGGING enabled, but everything else
d499 3
a501 4
by compiling with C<-Accflags="-DPERL_USE_SAFE_PUTENV">, see section
L</"Altering Configure variables for C compiler switches etc.">.
You can force an embedded perl to use direct manipulation by setting
C<PL_use_safe_putenv = 0;> after the C<perl_construct()> call.
d528 1
a528 1
By default, Configure will use the following directories for 5.12.2.
d530 1
a530 1
5.12.2 or 5.9.5, and $archname is a string like sun4-sunos,
a790 4
This option is not compatible with the building of a shared libperl
("-Duseshrplib"), because in that case perl is linked with an hard-coded
rpath that points at the libperl.so, that cannot be relocated.

d936 1
a936 2
a space-separated list of extensions, such as C<IPC/SysV>. The extensions
listed in
d1286 1
a1286 1
in the file Porting/pumpkin.pod and the file pod/perlrepository.pod.
d1319 19
a1337 3
suidperl was an optional component of earlier releases of perl. It is no
longer available.  Instead, use a tool specifically designed to handle
changes in privileges, such as B<sudo>.
a1575 20
=item error: too few arguments to function 'dbmclose'

Building ODBM_File on some (Open)SUSE distributions might run into this
error, as the header file is broken. There are two ways to deal with this

 1. Disable the use of ODBM_FILE

    Configure ... -Dnoextensions=ODBM_File

 2. Fix the header file, somewhat like this:

    --- a/usr/include/dbm.h  2010-03-24 08:54:59.000000000 +0100
    +++ b/usr/include/dbm.h  2010-03-24 08:55:15.000000000 +0100
    @@@@ -59,4 +59,4 @@@@ extern datum  firstkey __P((void));

     extern datum   nextkey __P((datum key));

    -extern int     dbmclose __P((DBM *));
    +extern int     dbmclose __P((void));

d1855 1
a1855 1
	./perl -MTestInit t/op/groups.t
d2281 3
a2283 2
Perl 5.12 is not binary compatible with earlier versions of Perl.
In other words, you will have to recompile your XS modules.
d2294 13
a2306 19
Suppose you already have version 5.8.7 installed.  The directories
searched by 5.8.7 are typically like:

	/usr/local/lib/perl5/5.8.7/$archname
	/usr/local/lib/perl5/5.8.7
	/usr/local/lib/perl5/site_perl/5.8.7/$archname
	/usr/local/lib/perl5/site_perl/5.8.7

Now, suppose you install version 5.8.8.  The directories
searched by version 5.8.8 will be:

	/usr/local/lib/perl5/5.8.8/$archname
	/usr/local/lib/perl5/5.8.8
	/usr/local/lib/perl5/site_perl/5.8.8/$archname
	/usr/local/lib/perl5/site_perl/5.8.8

	/usr/local/lib/perl5/site_perl/5.8.7/$archname
	/usr/local/lib/perl5/site_perl/5.8.7
	/usr/local/lib/perl5/site_perl/
d2308 1
a2308 1
Notice the last three entries -- Perl understands the default structure
d2310 9
a2318 27
directories.  This way, modules installed under 5.8.7 will continue
to be usable by 5.8.7 but will also accessible to 5.8.8.  Further,
suppose that you upgrade a module to one which requires features
present only in 5.8.8.  That new module will get installed into
/usr/local/lib/perl5/site_perl/5.8.8 and will be available to 5.8.8,
but will not interfere with the 5.8.7 version.

The last entry, /usr/local/lib/perl5/site_perl/, is there so that
5.6.0 and above will look for 5.004-era pure perl modules.

Lastly, suppose you now install 5.10.0, which is not binary compatible
with 5.8.x.  The directories searched by 5.10.0 (if you don't change the
Configure defaults) will be:

	/usr/local/lib/perl5/5.10.0/$archname
	/usr/local/lib/perl5/5.10.0
	/usr/local/lib/perl5/site_perl/5.10.0/$archname
	/usr/local/lib/perl5/site_perl/5.10.0

	/usr/local/lib/perl5/site_perl/5.8.8

	/usr/local/lib/perl5/site_perl/5.8.7

	/usr/local/lib/perl5/site_perl/

Note that the earlier $archname entries are now gone, but pure perl
modules from earlier versions will still be found.
d2324 2
d2334 1
a2334 1
	sh Configure -Dprefix=/opt/perl5.12.2
d2336 1
a2336 1
and adding /opt/perl5.12.2/bin to the shell PATH variable.  Such users
d2349 1
a2349 1
=head2 Upgrading from 5.11.0 or earlier
d2351 1
a2351 1
B<Perl 5.12.2 is binary incompatible with Perl 5.11.1 and any earlier
d2354 2
a2355 2
used with 5.12.2.  If you find you do need to rebuild an extension with
5.12.2, you may safely do so without disturbing the older
@


1.1.1.13
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d7 1
a7 1
INSTALL - Build and Installation guide for perl 5.
d39 1
a39 1
Building perl from source requires an ANSI compliant C compiler.
a45 4
If you're building perl from a git repository, you should also consult
the documentation in pod/perlgit.pod for information on that special
circumstance.

d50 1
a50 1
pod/perldelta.pod file.  For more information about how to find more
d83 1
a83 1
Please see pod/perldelta.pod for a description of the changes and
d86 1
a86 1
to pod/perldelta.pod for more detailed information.
d101 1
a101 1
pod/perldelta.pod for a description of what's changed.  See your
d444 1
a444 1
        ./perl -MTestInit t/misc/failing_test.t
d533 1
a533 1
By default, Configure will use the following directories for 5.16.3.
d535 1
a535 1
5.12.3, and $archname is a string like sun4-sunos,
d632 1
a632 1
/usr hierarchy, while the directories reserved for the end user are in
a838 7
If you do want to use modules from some previous perl versions, the variable
must contain a space separated list of directories under the site_perl
directory, and has to include architecture-dependent directories separately,
eg.

       sh Configure -Dinc_version_list="5.16.3/x86_64-linux 5.14.0" ...

d840 1
a840 1
PERL5LIB environment variable or with perl's -I runtime option.
d918 2
a919 2
Note that a perl built with -DDEBUGGING will be much bigger and will run
much, much more slowly than a standard perl.
d980 1
a980 1
to be specified explicitly (see L</Threads>).
d1017 1
a1017 1
The version of BerkeleyDB distributed by Oracle installs in a
d1236 1
a1236 1
You can also supply a shell script config.over to override
d1263 2
a1264 2
should not edit the generated file cflags directly, as your changes will
be lost the next time you run Configure, or if you edit config.sh.
d1296 1
a1296 1
in the file Porting/pumpkin.pod and the file pod/perlgit.pod.
d1426 1
a1426 1
    util.c: In function 'Perl_form':
d1439 1
a1439 1
of your local setup.
d1497 1
a1497 1
reentrant functions -- specifically networking-related ones -- being present
d1550 1
a1550 1
If you still have missing routines or undefined symbols, you probably
d1561 1
a1561 1
each file in cflags.SH.  It's okay to insert rules for specific files into
d1681 1
a1681 1
UTS may need one or more of -K or -g, and #undef LSTAT.
d1711 1
a1711 1
cross-compilation support, so please keep reading.
d1857 1
a1857 1
wrong.
d1866 4
a1869 1
by hand to see if it makes any difference.
d1871 2
a1872 2
One way to get more detailed information about failed tests and
individual subtests is to run the harness from the t directory:
a1879 5
If individual tests fail, you can often run them by hand (from the main
perl directory), e.g.,

	./perl -MTestInit t/op/groups.t

a1885 3
The file t/README in the t subdirectory contains more information about
running and modifying tests.

d1940 1
a1940 1
	./perl -MTestInit t/op/pat.t
d1971 1
a1971 1
unpacked in such a way that the user IDs in the distribution package
d2027 1
a2027 1
If "make install" just says "'install' is up to date" or something
d2074 3
a2076 1
	a2p          	awk-to-perl translator.
d2083 1
a2083 1
	config_data	Manage Module::Build-like module configuration.
d2085 9
a2093 8
			versions of perl.
	cpan		The CPAN shell.
	cpan2dist	The CPANPLUS distribution creator.
	cpanp		The CPANPLUS shell.
	cpanp-run-perl	A helper for cpanp.
	enc2xs		Encoding module generator.
	find2perl	find-to-perl translator.
	h2ph		Extract constants and simple macros from C headers.
d2099 1
a2099 1
	perlivp		Perl Installation Verification Procedure.
d2101 2
a2102 2
			utility iconv.
	pl2pm		Convert Perl 4 .pl files to Perl 5 .pm modules.
d2108 10
a2117 12
	podchecker	POD syntax checker.
	podselect	Prints sections of POD documentation.
	prove		A command-line tool for running tests.
	psed		A Perl implementation of sed.
	ptar		A Perl implementation of tar.
	ptardiff	A diff for tar archives.
	ptargrep	A grep for tar archives.
	s2p		sed-to-perl translator.
	shasum		A tool to print or check SHA checksums.
	splain		Describe Perl warnings and errors.
	xsubpp		Compiler to convert Perl XS code into C code.
	zipdetails		display the internal structure of zip files
d2167 1
a2167 1
Note: Due to differences in the C and perl languages, the conversion
d2193 1
d2214 1
a2214 1
If you wish to rebuild perl from the same build directory, you should
d2228 1
a2228 1
you are experiencing difficulties building perl, you should not reuse
d2262 1
a2262 1
-- for example the output from running C<uname -a>
d2266 1
a2266 1
written English is not great -- what matters is how well you describe
d2275 1
a2275 1
appropriate context.  Plain text should usually be sufficient -- fancy
d2295 1
a2295 1
Perl 5.16 is not binary compatible with earlier versions of Perl.
d2369 1
a2369 1
	sh Configure -Dprefix=/opt/perl5.16.3
d2371 1
a2371 1
and adding /opt/perl5.16.3/bin to the shell PATH variable.  Such users
d2384 1
a2384 1
=head2 Upgrading from 5.15.6 or earlier
d2386 1
a2386 1
B<Perl 5.16.3 is binary incompatible with Perl 5.15.6 and any earlier
d2389 2
a2390 2
used with 5.16.3.  If you find you do need to rebuild an extension with
5.16.3, you may safely do so without disturbing the older
d2423 1
a2423 1
in Linux with perl-5.16.3 is as follows (under $Config{prefix}):
d2426 8
a2433 10
  ./lib/perl5/5.16.3/strict.pm
  ./lib/perl5/5.16.3/warnings.pm
  ./lib/perl5/5.16.3/i686-linux/File/Glob.pm
  ./lib/perl5/5.16.3/feature.pm
  ./lib/perl5/5.16.3/XSLoader.pm
  ./lib/perl5/5.16.3/i686-linux/auto/File/Glob/Glob.so

Secondly, for perl-5.10.1, the Debian perl-base package contains 591 files,
(of which 510 are for lib/unicore) totaling about 3.5MB in its i386 version.
Omitting the lib/unicore/* files for brevity, the remaining files are:
d2436 46
a2481 40
  /usr/bin/perl5.10.1
  /usr/lib/perl/5.10.1/Config.pm
  /usr/lib/perl/5.10.1/Config_git.pl
  /usr/lib/perl/5.10.1/Config_heavy.pl
  /usr/lib/perl/5.10.1/Cwd.pm
  /usr/lib/perl/5.10.1/DynaLoader.pm
  /usr/lib/perl/5.10.1/Errno.pm
  /usr/lib/perl/5.10.1/Fcntl.pm
  /usr/lib/perl/5.10.1/File/Glob.pm
  /usr/lib/perl/5.10.1/Hash/Util.pm
  /usr/lib/perl/5.10.1/IO.pm
  /usr/lib/perl/5.10.1/IO/File.pm
  /usr/lib/perl/5.10.1/IO/Handle.pm
  /usr/lib/perl/5.10.1/IO/Pipe.pm
  /usr/lib/perl/5.10.1/IO/Seekable.pm
  /usr/lib/perl/5.10.1/IO/Select.pm
  /usr/lib/perl/5.10.1/IO/Socket.pm
  /usr/lib/perl/5.10.1/IO/Socket/INET.pm
  /usr/lib/perl/5.10.1/IO/Socket/UNIX.pm
  /usr/lib/perl/5.10.1/List/Util.pm
  /usr/lib/perl/5.10.1/POSIX.pm
  /usr/lib/perl/5.10.1/Scalar/Util.pm
  /usr/lib/perl/5.10.1/Socket.pm
  /usr/lib/perl/5.10.1/XSLoader.pm
  /usr/lib/perl/5.10.1/auto/Cwd/Cwd.so
  /usr/lib/perl/5.10.1/auto/DynaLoader/autosplit.ix
  /usr/lib/perl/5.10.1/auto/DynaLoader/dl_expandspec.al
  /usr/lib/perl/5.10.1/auto/DynaLoader/dl_find_symbol_anywhere.al
  /usr/lib/perl/5.10.1/auto/DynaLoader/dl_findfile.al
  /usr/lib/perl/5.10.1/auto/Fcntl/Fcntl.so
  /usr/lib/perl/5.10.1/auto/File/Glob/Glob.so
  /usr/lib/perl/5.10.1/auto/Hash/Util/Util.so
  /usr/lib/perl/5.10.1/auto/IO/IO.so
  /usr/lib/perl/5.10.1/auto/List/Util/Util.so
  /usr/lib/perl/5.10.1/auto/POSIX/POSIX.so
  /usr/lib/perl/5.10.1/auto/POSIX/autosplit.ix
  /usr/lib/perl/5.10.1/auto/POSIX/load_imports.al
  /usr/lib/perl/5.10.1/auto/Socket/Socket.so
  /usr/lib/perl/5.10.1/lib.pm
  /usr/lib/perl/5.10.1/re.pm
d2484 1
a2484 1
  /usr/share/doc/perl/README.Debian
a2486 1
  /usr/share/lintian/overrides/perl-base
d2488 36
a2523 34
  /usr/share/man/man1/perl5.10.1.1.gz
  /usr/share/perl/5.10.1/AutoLoader.pm
  /usr/share/perl/5.10.1/Carp.pm
  /usr/share/perl/5.10.1/Carp/Heavy.pm
  /usr/share/perl/5.10.1/Exporter.pm
  /usr/share/perl/5.10.1/Exporter/Heavy.pm
  /usr/share/perl/5.10.1/File/Spec.pm
  /usr/share/perl/5.10.1/File/Spec/Unix.pm
  /usr/share/perl/5.10.1/FileHandle.pm
  /usr/share/perl/5.10.1/Getopt/Long.pm
  /usr/share/perl/5.10.1/IPC/Open2.pm
  /usr/share/perl/5.10.1/IPC/Open3.pm
  /usr/share/perl/5.10.1/SelectSaver.pm
  /usr/share/perl/5.10.1/Symbol.pm
  /usr/share/perl/5.10.1/Text/ParseWords.pm
  /usr/share/perl/5.10.1/Text/Tabs.pm
  /usr/share/perl/5.10.1/Text/Wrap.pm
  /usr/share/perl/5.10.1/Tie/Hash.pm
  /usr/share/perl/5.10.1/attributes.pm
  /usr/share/perl/5.10.1/base.pm
  /usr/share/perl/5.10.1/bytes.pm
  /usr/share/perl/5.10.1/bytes_heavy.pl
  /usr/share/perl/5.10.1/constant.pm
  /usr/share/perl/5.10.1/fields.pm
  /usr/share/perl/5.10.1/integer.pm
  /usr/share/perl/5.10.1/locale.pm
  /usr/share/perl/5.10.1/overload.pm
  /usr/share/perl/5.10.1/strict.pm
  /usr/share/perl/5.10.1/unicore/*
  /usr/share/perl/5.10.1/utf8.pm
  /usr/share/perl/5.10.1/utf8_heavy.pl
  /usr/share/perl/5.10.1/vars.pm
  /usr/share/perl/5.10.1/warnings.pm
  /usr/share/perl/5.10.1/warnings/register.pm
@


1.1.1.14
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d107 2
a108 3
list of locally installed modules.  Also see the L<CPAN> module's
C<autobundle> function for one way to make a "bundle" of your currently
installed modules.
d338 32
a369 56
Perl 5.18 reworked the measures used to secure its hash function
from algorithmic complexity attacks.  By default it will build with
all of these measures enabled along with support for controlling and
disabling them via environment variables.

You can override various aspects of this feature by defining various
symbols during configure. An example might be:

    Configure -Accflags=-DPERL_HASH_FUNC_SIPHASH

B<Unless stated otherwise these options are considered experimental or
insecure and are not recommended for production use.>

Perl 5.18 includes support for multiple hash functions, and changed
the default (to ONE_AT_A_TIME_HARD), you can choose a different
algorithm by defining one of the following symbols. Note that as of
Perl 5.18 we can only recommend use of the default or SIPHASH. All
the others are known to have security issues and are for research
purposes only.

    PERL_HASH_FUNC_SIPHASH
    PERL_HASH_FUNC_SDBM
    PERL_HASH_FUNC_DJB2
    PERL_HASH_FUNC_SUPERFAST
    PERL_HASH_FUNC_MURMUR3
    PERL_HASH_FUNC_ONE_AT_A_TIME
    PERL_HASH_FUNC_ONE_AT_A_TIME_HARD
    PERL_HASH_FUNC_ONE_AT_A_TIME_OLD

Perl 5.18 randomizes the order returned by keys(), values(), and each(),
and allows controlling this behavior by using of the PERL_PERTURB_KEYS
option. You can disable this option entirely with the define:

    PERL_PERTURB_KEYS_DISABLED

You can disable the environment variable checks and specify the type of
key traversal randomization to be used by defining one of these:

    PERL_PERTURB_KEYS_RANDOM
    PERL_PERTURB_KEYS_DETERMINISTIC

In Perl 5.18 the seed used for the hash function is randomly selected
at process start which can be overridden by specifying a seed by setting
the PERL_HASH_SEED environment variable.

You can change this behavior by building perl with the

   USE_HASH_SEED_EXPLICIT

define, in which case one has to explicitly set the PERL_HASH_SEED
environment variable to enable the security feature or by adding

    NO_HASH_SEED

to the compilation flags to completely disable the randomisation feature.
Note these modes are poorly tested, insecure and not recommended.
a379 4
See L<perlrun/PERL_HASH_SEED> and L<perlrun/PERL_PERTURB_KEYS> for details on
the environment variables, and L<perlsec/Algorithmic Complexity Attacks> for
further security details.

d434 1
a434 1
NeXTSTEP/OPENSTEP/Darwin, LD_LIBRARY_PATH/SHLIB_PATH
d537 1
a537 1
By default, Configure will use the following directories for 5.18.2.
d571 10
a580 12
   Configure        Default
   variable          value
 $siteprefixexp    $prefixexp
 $sitebinexp       $siteprefixexp/bin
 $sitescriptexp    $siteprefixexp/bin
 $sitelibexp       $siteprefixexp/lib/perl5/site_perl/$version
 $sitearchexp
               $siteprefixexp/lib/perl5/site_perl/$version/$archname
 $siteman1direxp   $siteprefixexp/man/man1
 $siteman3direxp   $siteprefixexp/man/man3
 $sitehtml1direxp  (none)
 $sitehtml3direxp  (none)
d591 13
a603 15
   Configure          Default
   variable            value
 $vendorprefixexp    (none)

 (The next ones are set only if vendorprefix is set.)

 $vendorbinexp       $vendorprefixexp/bin
 $vendorscriptexp    $vendorprefixexp/bin
 $vendorlibexp       $vendorprefixexp/lib/perl5/vendor_perl/$version
 $vendorarchexp
           $vendorprefixexp/lib/perl5/vendor_perl/$version/$archname
 $vendorman1direxp   $vendorprefixexp/man/man1
 $vendorman3direxp   $vendorprefixexp/man/man3
 $vendorhtml1direxp  (none)
 $vendorhtml3direxp  (none)
d608 3
a610 3
 $prefix           /usr
 $siteprefix       /usr/local
 $vendorprefix     /usr
d614 20
a633 20
 $binexp           /usr/bin
 $scriptdirexp     /usr/bin
 $privlibexp       /usr/lib/perl5/$version
 $archlibexp       /usr/lib/perl5/$version/$archname
 $man1direxp       /usr/man/man1
 $man3direxp       /usr/man/man3

 $sitebinexp       /usr/local/bin
 $sitescriptexp    /usr/local/bin
 $sitelibexp       /usr/local/lib/perl5/site_perl/$version
 $sitearchexp      /usr/local/lib/perl5/site_perl/$version/$archname
 $siteman1direxp   /usr/local/man/man1
 $siteman3direxp   /usr/local/man/man3

 $vendorbinexp     /usr/bin
 $vendorscriptexp  /usr/bin
 $vendorlibexp     /usr/lib/perl5/vendor_perl/$version
 $vendorarchexp    /usr/lib/perl5/vendor_perl/$version/$archname
 $vendorman1direxp /usr/man/man1
 $vendorman3direxp /usr/man/man3
d652 1
a652 1
 sh Configure -Dsiteprefix=/usr/local -Dvendorprefix=/usr/share/perl
d848 1
a848 1
       sh Configure -Dinc_version_list="5.16.0/x86_64-linux 5.16.0" ...
d934 1
a934 1
On platforms where DTrace is available, it may be enabled by
d1041 4
a1044 5
 sh Configure -de \
    -Dlocincpth='/usr/local/BerkeleyDB.4.7/include             \
                                           /usr/local/include' \
    -Dloclibpth='/usr/local/BerkeleyDB.4.7/lib /usr/local/lib' \
    -Aldflags='-R/usr/local/BerkeleyDB.4.7/lib'
d1272 3
a1274 10
optimizer on toke.c, find the switch structure marked 'or customize here',
and add a line for toke.c ahead of the catch-all *) so that it now reads:

    : or customize here

    case "$file" in
    toke) optimize='-g' ;;
    *) ;;

You should not edit the generated file cflags directly, as your changes will
d1711 1
a1711 1
June 2005 at least PocketPC aka WinCE, Open Zaurus, Symbian, and
d1737 4
d2094 3
a2096 4
	cppstdin	This is used by the deprecated switch perl -P,
			if your cc -E can't read from stdin.
	c2ph, pstruct	Scripts for handling C structures in header
                        files.
d2098 1
a2098 2
	corelist	Shows versions of modules that come with
                        different
d2106 1
a2106 2
	h2ph		Extract constants and simple macros from C
                        headers.
d2132 1
a2132 1
	zipdetails	display the internal structure of zip files
d2309 1
a2309 1
Perl 5.18.2 is not binary compatible with earlier versions of Perl.
d2383 1
a2383 1
	sh Configure -Dprefix=/opt/perl5.18.2
d2385 1
a2385 1
and adding /opt/perl5.18.2/bin to the shell PATH variable.  Such users
d2398 1
a2398 1
=head2 Upgrading from 5.17.11 or earlier
d2400 2
a2401 2
B<Perl 5.18.2 may not be binary compatible with Perl 5.17.11 or
earlier Perl releases.>  Perl modules having binary parts
d2403 2
a2404 2
used with 5.18.2.  If you find you do need to rebuild an extension with
5.18.2, you may safely do so without disturbing the older
d2437 1
a2437 1
in Linux with perl-5.18.2 is as follows (under $Config{prefix}):
d2440 6
a2445 6
  ./lib/perl5/5.18.2/strict.pm
  ./lib/perl5/5.18.2/warnings.pm
  ./lib/perl5/5.18.2/i686-linux/File/Glob.pm
  ./lib/perl5/5.18.2/feature.pm
  ./lib/perl5/5.18.2/XSLoader.pm
  ./lib/perl5/5.18.2/i686-linux/auto/File/Glob/Glob.so
d2543 1
a2543 2
 strace perl -le 'do "x.pl"' 2>&1 \
                             | perl -nle '/^open\(\"(.+?)"/ && print $1'
@


1.1.1.15
log
@Import perl-5.20.1
@
text
@d566 1
a566 1
By default, Configure will use the following directories for 5.20.1.
a1092 11
=head2 Specifying a logical root directory

If you are cross-compiling, or are using a compiler which has it's own
headers and libraries in a nonstandard location, and your compiler
understands the C<--sysroot> option, you can use the C<-Dsysroot> option to
specify the logical root directory under which all libraries and headers
are searched for. This patch adjusts Configure to search under $sysroot, instead of /.
    
--sysroot is added to ccflags and friends so that make in
ExtUtils::MakeMaker, and other extensions, will use it.

a1598 16
If the libs variable is missing -lm, there is a chance that libm.so.1
is available, but the required (symbolic) link to libm.so is missing.
(same could be the case for other libraries like libcrypt.so).  You
should check your installation for packages that create that link, and
if no package is installed that supplies that link or you cannot install
them, make the symbolic link yourself e.g.:

 $ rpm -qf /usr/lib64/libm.so
 glibc-devel-2.15-22.17.1.x86_64
 $ ls -lgo /usr/lib64/libm.so
 lrwxrwxrwx 1 16 Jan  7  2013 /usr/lib64/libm.so -> /lib64/libm.so.6

 or

 $ sudo ln -s /lib64/libm.so.6 /lib64/libm.so

d1603 4
a1606 5
need to add some library or other, make a symbolic link like described
above, or you need to undefine some feature that Configure thought was
there but is defective or incomplete.  If you used a hint file, see if
it has any relevant advice.  You can also look through through config.h
for likely suspects.
d1751 5
a1755 6
rarely is.  Perl is routinely cross-compiled for several platforms: as of
January 2014, these include Android, Blackberry 10, PocketPC aka
WinCE, ARM Linux, and Solaris.  Previous versions of
Perl also provided support for Open Zaurus, Symbian, and
the IBM OS/400, but it's unknown if those ports are still functional.
These platforms are known as the B<target> platforms, while the systems where the compilation takes place are the B<host> platforms.
d1762 2
a1763 2
version 5.18.0, the Configure script also knows two ways of supporting
cross-compilation, so please keep reading.
d1772 1
a1772 1
L<README.ce or perlce|perlce>
d1774 1
a1774 1
=item Android
d1776 1
a1776 1
L<"Cross-compilation" in README.android or perlandroid|perlandroid/Cross-compilation>
d1778 1
a1778 1
=item Blackberry
d1780 1
a1780 1
L<"Cross-compilation" in README.qnx or perlqnx|perlqnx/Cross-compilation>
d1782 1
a1782 1
=item Solaris
d1784 1
a1784 5
L<"CROSS-COMPILATION" in README.solaris or perlsolaris|perlsolaris/CROSS-COMPILATION>

=item Linux

This document; See below.
d1799 13
a1811 11
About the cross-compilation support of Configure: There's two forms.
The more common one requires some way of transferring and running executables
in the target system, such as an ssh connection; this is the
C<./Configure -Dusecrosscompile -Dtargethost=...> route.  The second method
doesn't need access to the target system, but requires you to provide 
a config.sh, and and a canned Makefile; the rest of this section describes
the former.

This cross-compilation setup of Configure has successfully been used in
a wide variety of setups, such as a 64-bit OS X host for an Android ARM target, or
an amd64 Linux host targeting x86 Solaris, or even Windows.
d1814 1
a1814 1
has to be used is C<-Dusecrosscompile>:
d1819 2
a1820 1
symbol C<usecrosscompile> available.
d1843 1
a1843 2
but in case you don't, "root" will be used.  Similarly, you can specify
a non-standard (i.e. not 22) port for the connection, if applicable, through
d1845 5
a1849 15
    -Dtargetport=2222

If the name of C<cc> has the usual GNU C semantics for cross
compilers, that is, CPU-OS-gcc, the target architecture (C<targetarch>),
plus names of the C<ar>, C<nm>, and C<ranlib> will also be automatically
chosen to be CPU-OS-ar and so on.
(The C<ld> requires more thought and will be chosen later by Configure
as appropriate).  This will also aid in guessing the proper
operating system name for the target, which has other repercussions, like
better defaults and possibly critical fixes for the platform.  If Configure
isn't guessing the OS name properly, you may need to either add a hint file
redirecting Configure's guess, or modify Configure to make the correct choice.

If your compiler doesn't follow that convention, you will also need to
specify which target environment to use, as well as C<ar> and friends:
d1852 1
a1852 19
    -Dcc=mycrossgcc
    -Dar=...

Additionally, a cross-compilation toolchain will usually install it's own
logical system root somewhere -- that is, it'll create a directory somewhere
which includes subdirectories like 'include' or 'lib'.  For example, you
may end up with C</skiff/local/arm-linux>, where 
C</skiff/local/arm-linux/bin> holds the binaries for cross-compilation,
C</skiff/local/arm-linux/include> has the headers, and 
C</skiff/local/arm-linux/lib> has the library files.
If this is the case, and you are using a compiler that understands
C<--sysroot>, like gcc or clang, you'll want to specify the
C<-Dsysroot> option for Configure:

    -Dsysroot=/skiff/local/arm-linux

However, if your don't have a suitable directory to pass to C<-Dsysroot>,
you will also need to specify which target environment to use:

d1857 8
d1875 1
a1875 1
        -Dtargetdir=/tar/get/dir \
d1879 3
a1881 1
        -Dsysroot=/skiff/local/arm-linux \
d1897 3
a1899 27
        -Dsysroot=/usr/local/arm/2.95.5

There is also a C<targetenv> option for Configure which can be used
to modify the environment of the target just before testing begins
during 'make test'.  For example, if the target system has a nonstandard
/tmp location, you could do this:

    -Dtargetenv="export TMPDIR=/other/tmp;"

If you are planning on cross-compiling to several platforms, or some other
thing that would involve running Configure several times, there are two
options that can be used to speed things up considerably.
As a bit of background, when you
call Configure with C<-Dusecrosscompile>, it begins by actually partially
building a miniperl on the host machine, as well as the generate_uudmap
binary, and we end up using that during the build.
So instead of building that new perl every single time, you can build it just
once in a separate directory, and then pass the resulting binaries to
Configure like this:

    -Dhostperl=/path/to/second/build/dir/miniperl
    -Dhostgenerate=/path/to/second/build/dir/generate_uudmap

Much less commonly, if you are cross-compiling from an ASCII host to an
EBCDIC target, or vise versa, you'll have to pass C<-Uhostgenerate> to
Configure, to signify that you want to build a generate_uudmap binary
that, during make, will be run on the target system.
d2140 3
d2157 1
d2278 1
a2278 3
your old config.sh and Policy.sh files.  (A plain 'make clean' will not
delete the makefiles used for rebuilding perl, and will also not delete
a number of library and utility files extracted during the build process.)
d2349 1
a2349 1
Perl 5.20.1 is not binary compatible with earlier versions of Perl.
d2423 1
a2423 1
	sh Configure -Dprefix=/opt/perl5.20.1
d2425 1
a2425 1
and adding /opt/perl5.20.1/bin to the shell PATH variable.  Such users
d2438 1
a2438 1
=head2 Upgrading from 5.19.0 or earlier
d2440 1
a2440 1
B<Perl 5.20.1 may not be binary compatible with Perl 5.19.11 or
d2443 2
a2444 2
used with 5.20.1.  If you find you do need to rebuild an extension with
5.20.1, you may safely do so without disturbing the older
d2477 1
a2477 1
in Linux with perl-5.20.1 is as follows (under $Config{prefix}):
d2480 6
a2485 6
  ./lib/perl5/5.20.1/strict.pm
  ./lib/perl5/5.20.1/warnings.pm
  ./lib/perl5/5.20.1/i686-linux/File/Glob.pm
  ./lib/perl5/5.20.1/feature.pm
  ./lib/perl5/5.20.1/XSLoader.pm
  ./lib/perl5/5.20.1/i686-linux/auto/File/Glob/Glob.so
@


1.1.1.16
log
@Import perl-5.20.2
@
text
@d92 1
a92 2
B<WARNING:> This version is not binary compatible with versions of Perl
earlier than 5.20.0.
d566 1
a566 1
By default, Configure will use the following directories for 5.20.2.
d2420 1
a2420 1
Perl 5.20.2 is not binary compatible with versions of Perl earlier than 5.20.0.
d2494 1
a2494 1
	sh Configure -Dprefix=/opt/perl5.20.2
d2496 1
a2496 1
and adding /opt/perl5.20.2/bin to the shell PATH variable.  Such users
d2509 1
a2509 1
=head2 Upgrading from 5.19.11 or earlier
d2511 1
a2511 1
B<Perl 5.20.2 may not be binary compatible with Perl 5.19.11 or
d2514 2
a2515 2
used with 5.20.2.  If you find you do need to rebuild an extension with
5.20.2, you may safely do so without disturbing the older
d2548 1
a2548 1
in Linux with perl-5.20.2 is as follows (under $Config{prefix}):
d2551 6
a2556 6
  ./lib/perl5/5.20.2/strict.pm
  ./lib/perl5/5.20.2/warnings.pm
  ./lib/perl5/5.20.2/i686-linux/File/Glob.pm
  ./lib/perl5/5.20.2/feature.pm
  ./lib/perl5/5.20.2/XSLoader.pm
  ./lib/perl5/5.20.2/i686-linux/auto/File/Glob/Glob.so
@


