head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2_BASE:1.1.1.2
	PERL_5_24_2:1.1.1.2
	OPENBSD_6_1:1.1.1.2.0.14
	OPENBSD_6_1_BASE:1.1.1.2
	OPENBSD_6_0:1.1.1.2.0.12
	OPENBSD_6_0_BASE:1.1.1.2
	OPENBSD_5_9:1.1.1.2.0.6
	OPENBSD_5_9_BASE:1.1.1.2
	OPENBSD_5_8:1.1.1.2.0.8
	OPENBSD_5_8_BASE:1.1.1.2
	PERL_5_20_2:1.1.1.2
	OPENBSD_5_7:1.1.1.2.0.2
	OPENBSD_5_7_BASE:1.1.1.2
	PERL_5_20_1:1.1.1.2
	OPENBSD_5_6:1.1.1.2.0.4
	OPENBSD_5_6_BASE:1.1.1.2
	PERL_5_18_2:1.1.1.2
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.20
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.16
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.14
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.12
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.10
	OPENBSD_5_0:1.1.1.1.0.8
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.6
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.4
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.2
	OPENBSD_4_7_BASE:1.1.1.1
	PERL_5_10_1:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2009.10.12.18.10.48;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.10.12.18.10.48;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.03.24.14.59.02;	author afresh1;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#define PERL_NO_GET_CONTEXT
#include "EXTERN.h"
#include "perl.h"
#include "XSUB.h"

#include <stdarg.h>

#include <OS.h>

static void
haiku_do_debugger(const char* format,...)
{
    char buffer[1024];
    va_list args;
    va_start(args, format);
    my_vsnprintf(buffer, sizeof(buffer), format, args);
    va_end(args);

    debugger(buffer);
}

static void
haiku_do_debug_printf(pTHX_ register SV *sv,
    void (*printfFunc)(const char*,...))
{
    dVAR;

    if (!sv)
	return;
    if (SvTYPE(sv) == SVt_IV && SvIOK(sv)) {
	assert(!SvGMAGICAL(sv));
	if (SvIsUV(sv))
	    (*printfFunc)("%"UVuf, (UV)SvUVX(sv));
	else
	    (*printfFunc)("%"IVdf, (IV)SvIVX(sv));
	return;
    }
    else {
	STRLEN len;
	/* Do this first to trigger any overloading.  */
	const char *tmps = SvPV_const(sv, len);
	U8 *tmpbuf = NULL;

	if (!SvUTF8(sv)) {
	    /* We don't modify the original scalar.  */
	    tmpbuf = bytes_to_utf8((const U8*) tmps, &len);
	    tmps = (char *) tmpbuf;
	}

	if (len)
	    (*printfFunc)("%.*s", (int)len, tmps);
	Safefree(tmpbuf);
    }
}

XS(haiku_debug_printf)
{
    dVAR;
    dXSARGS;
    dORIGMARK;
    SV *sv;

    if (items < 1)
	Perl_croak(aTHX_ "usage: Haiku::debug_printf($format,...)");

    sv = newSV(0);

    if (SvTAINTED(MARK[1]))
	TAINT_PROPER("debug_printf");
    do_sprintf(sv, SP - MARK, MARK + 1);

    haiku_do_debug_printf(sv, &debug_printf);

    SvREFCNT_dec(sv);
    SP = ORIGMARK;
    PUSHs(&PL_sv_yes);
}

XS(haiku_ktrace_printf)
{
    dVAR;
    dXSARGS;
    dORIGMARK;
    SV *sv;

    if (items < 1)
	Perl_croak(aTHX_ "usage: Haiku::debug_printf($format,...)");

    sv = newSV(0);

    if (SvTAINTED(MARK[1]))
	TAINT_PROPER("ktrace_printf");
    do_sprintf(sv, SP - MARK, MARK + 1);

    haiku_do_debug_printf(sv, &ktrace_printf);

    SvREFCNT_dec(sv);
    SP = ORIGMARK;
    PUSHs(&PL_sv_yes);
}

XS(haiku_debugger)
{
    dVAR;
    dXSARGS;
    dORIGMARK;
    SV *sv;

    if (items < 1)
	Perl_croak(aTHX_ "usage: Haiku::debugger($format,...)");

    sv = newSV(0);

    if (SvTAINTED(MARK[1]))
	TAINT_PROPER("debugger");
    do_sprintf(sv, SP - MARK, MARK + 1);

    haiku_do_debug_printf(sv, &haiku_do_debugger);

    SvREFCNT_dec(sv);
    SP = ORIGMARK;
    PUSHs(&PL_sv_yes);
}

MODULE = Haiku            PACKAGE = Haiku

PROTOTYPES: DISABLE

BOOT:
{
    char *file = __FILE__;

    newXS("Haiku::debug_printf", haiku_debug_printf, file);
    newXS("Haiku::ktrace_printf", haiku_ktrace_printf, file);
    newXS("Haiku::debugger", haiku_debugger, file);
    XSRETURN_YES;
}
@


1.1.1.1
log
@import perl 5.10.1
@
text
@@


1.1.1.2
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d23 1
a23 1
haiku_do_debug_printf(pTHX_ SV *sv,
@

