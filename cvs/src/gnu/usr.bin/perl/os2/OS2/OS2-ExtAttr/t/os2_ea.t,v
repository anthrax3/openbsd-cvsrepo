head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.26
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.20
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.22
	OPENBSD_5_8_BASE:1.1.1.1
	PERL_5_20_2:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.14
	OPENBSD_5_7_BASE:1.1.1.1
	PERL_5_20_1:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.18
	OPENBSD_5_6_BASE:1.1.1.1
	PERL_5_18_2:1.1.1.1
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.16
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.12
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2010.09.24.14.48.46;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.48.46;	author millert;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@BEGIN {
    chdir 't' if -d 't/lib';
    @@INC = '../lib' if -d 'lib';
    require Config; import Config;
    if (-d 'lib' and $Config{'extensions'} !~ /\bOS2(::|\/)REXX\b/) {
	print "1..0\n";
	exit 0;
    }
}

# Before `make install' is performed this script should be runnable with
# `make test'. After `make install' it should work as `perl test.pl'

######################### We start with some black magic to print on failure.

# Change 1..1 below to 1..last_test_to_print .
# (It may become useful if the test is moved to ./t subdirectory.)

BEGIN { $| = 1; print "1..21\n"; }
END {print "not ok 1\n" unless $loaded;}
use OS2::ExtAttr;
$loaded = 1;
print "ok 1\n";

######################### End of black magic.

# Insert your test code below (better if it prints "ok 13"
# (correspondingly "not ok 13") depending on the success of chunk 13
# of the test code):

unlink 't.out' if -f 't.out';
system 'cmd', '/c', 'echo OK > t.out';

{
  my %a;
  tie %a, 'OS2::ExtAttr', 't.out';
  print "ok 2\n";
  
  keys %a == 0 ? print "ok 3\n" : print "not ok 3\n";
# Standard Extended Attributes (SEAs) have a dot (.) as a prefix.
# This identifies the extended attribute as a SEA. The leading dot is reserved,
# so applications should not define extended attributes that start with a dot.
# Also, extended attributes 
# that start with the characters $, @@, &, or + are reserved for system use.
  $a{'X--Y'} = '---';		# '++', -++', '!++', 'X++Y' fail on JFS
  print "ok 4\n";
  $a{'AAA'} = 'xyz';		# Name is going to be uppercased???
  print "ok 5\n";
}

{
  my %a;
  tie %a, 'OS2::ExtAttr', 't.out';
  print "ok 6\n";
  
  my $c = keys %a;
  $c == 2 ? print "ok 7\n" : print "not ok 7\n# c=$c\n";
  my @@b = sort keys %a;
  "@@b" eq 'AAA X--Y' ? print "ok 8\n" : print "not ok 8\n# keys=`@@b'\n";
  $a{'X--Y'} eq '---' ? print "ok 9\n" : print "not ok 9\n";;
  $a{'AAA'} eq 'xyz' ? print "ok 10\n" : print "not ok 10\n# aaa->`$a{AAA}'\n";
  $c = delete $a{'X--Y'};
  $c eq '---' ? print "ok 11\n" : print "not ok 11\n# deleted->`$c'\n";;
}

print "ok 12\n";

{
  my %a;
  tie %a, 'OS2::ExtAttr', 't.out';
  print "ok 13\n";
  
  keys %a == 1 ? print "ok 14\n" : print "not ok 14\n";
  my @@b = sort keys %a;
  "@@b" eq 'AAA' ? print "ok 15\n" : print "not ok 15\n";
  $a{'AAA'} eq 'xyz' ? print "ok 16\n" : print "not ok 16\n";;
  ! exists $a{'+'} ? print "ok 17\n" : print "not ok 17\n";;
  ! defined $a{'+'} ? print "ok 18\n" : print "not ok 18\n# ->`$a{'X--Y'}'\n";;
  ! exists $a{'X--Y'} ? print "ok 19\n" : print "not ok 19\n";;
  ! defined $a{'X--Y'} ? print "ok 20\n" : print "not ok 20\n# ->`$a{'X--Y'}'\n";;
}

print "ok 21\n";
unlink 't.out';
 
@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@
