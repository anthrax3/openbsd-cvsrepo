head	1.1;
branch	1.1.1;
access;
symbols
	PERL_5_24_2:1.1.1.1
	OPENBSD_6_1:1.1.1.1.0.28
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.26
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.20
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.22
	OPENBSD_5_8_BASE:1.1.1.1
	PERL_5_20_2:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.14
	OPENBSD_5_7_BASE:1.1.1.1
	PERL_5_20_1:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.18
	OPENBSD_5_6_BASE:1.1.1.1
	PERL_5_18_2:1.1.1.1
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.16
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.12
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2010.09.24.14.48.46;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.48.46;	author millert;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#! /usr/bin/perl -w

BEGIN {
  my $inc = $ENV{PERL5LIB};
  $inc = $ENV{PERLLIB} unless defined $inc;
  $inc = '' unless defined $inc;
  $ENV{PERL5LIB} = join ';', @@INC, split /;/, $inc;
}

use strict;
use Test::More tests => 11;
use OS2::Process;

my $cmd = <<'EOA';
use OS2::Process;
$| = 1;
print for $$, ppid, sidOf;
$SIG{TERM} = $SIG{INT} = sub {exit};
sleep 10;
EOA

#my $PID = open my $fh, '-|', $^X, '-wle', $cmd;
$ENV{CMD_RUN} = $cmd;
my $PID = open my $fh, '-|', "$^X -wle 'eval \$ENV{CMD_RUN} or die'";
ok $PID, 'opened a pipe';
my ($kpid, $kppid, $sid);
$kpid = <$fh>;
$kppid = <$fh>;
$sid = <$fh>;
chomp ($kpid, $kppid, $sid);

# This does not work with the intervening shell...
my $extra_fork = $kppid == $PID; # Temporary implementation of multi-arg open()

print "# us=$$, immediate-pid=$PID, parent-of-kid=$kppid, kid=$kpid\n";
if ($ENV{CMD_RUN}) {	# Two copies of the shell intervene...
  is( ppidOf($kppid), $PID, 'correct pid of the kid or its parent');
  is( ppidOf($PID), $$,  'we know our child\'s parent');
} else {
  is( ($extra_fork ? $kppid : $kpid), $PID, 'correct pid of the kid');
  is( $kppid, ($extra_fork ? $PID : $$), 'kid knows its ppid');
}
ok $sid >= 0, 'kid got its sid';
is($sid, sidOf, 'sid of kid same as our');
is(sidOf($kpid), $sid, 'we know sid of kid');
is(sidOf($PID), $sid, 'we know sid of inter-kid');
is(ppidOf($kpid), $kppid, 'we know ppid of kid');
is(ppidOf($PID), $$, 'we know ppid of inter-kid');

ok kill('TERM', $kpid), 'killed the kid';
#ok( ($PID == $kpid or kill('TERM', $PID)), 'killed the inter-kid');
ok close $fh, 'closed the pipe';	# No kid any more
@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@
