head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_0:1.1.1.1.0.26
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.20
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.22
	OPENBSD_5_8_BASE:1.1.1.1
	PERL_5_20_2:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.14
	OPENBSD_5_7_BASE:1.1.1.1
	PERL_5_20_1:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.18
	OPENBSD_5_6_BASE:1.1.1.1
	PERL_5_18_2:1.1.1.1
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.16
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.12
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2010.09.24.14.48.46;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.48.46;	author millert;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#! /usr/bin/perl -w

use strict;
use OS2::Process; 		# qw(P_SESSION P_UNRELATED P_NOWAIT);

my $pl = $0;
$pl =~ s/_kid\.t$/.t/i;
die "Can't find the kid script" unless -r $pl;

my $inc = $ENV{PERL5LIB};
$inc = $ENV{PERLLIB} unless defined $inc;
$inc = '' unless defined $inc;
$ENV{PERL5LIB} = join ';', @@INC, split /;/, $inc;

# The thest in $pl modify the session too bad.  We run the tests
# in a different session to keep the current session cleaner

# Apparently, this affects things at open() time, not at system() time
$^F = 40;

# These do not work...  Apparently, the kid "interprets" file handles
# open to CON as output to *its* CON (shortcut in the kernel via the
# device flags?).

#my @@fh = ('<&STDIN', '>&STDOUT', '>&STDERR');
#my @@nfd;
#open $nfd[$_], $fh[$_] or die "Cannot remap FH" for 0..2;
#my @@fn = map fileno $_, @@nfd;
#$ENV{NEW_FD} = "@@fn";

my ($stdout_r,$stdout_w,$stderr_r,$stderr_w);
pipe $stderr_r, $stderr_w or die;

# Duper for $stderr_r to STDERR
my ($e_r, $e_w) = map fileno $_, $stderr_r,  $stderr_w;
my $k = system P_NOWAIT, $^X, '-we', <<'EOS', $e_r, $e_w or die "Cannot start a STDERR duper";
  my ($e_r, $e_w) = @@ARGV;
  # close the other end by the implicit close:
  { open my $closeit, ">&=$e_w" or die "kid: open >&=$e_w: $!, `$^E'" }
  open IN, "<&=$e_r" or die "kid: open <&=$e_r: $!, `$^E'";
  select STDERR; $| = 1; print while sysread IN, $_, 1<<16;
EOS
close $stderr_r or die;		# Now the kid is the owner

pipe $stdout_r, $stdout_w or die;

my @@fn = (map fileno $_, $stdout_w, $stderr_w);
$ENV{NEW_FD} = "@@fn";
# print "# fns=@@fn\n";

$ENV{OS2_PROCESS_TEST_SEPARATE_SESSION} = 1;
my $pid = system P_SESSION, $^X, $pl, @@ARGV or die;
close $stderr_w or die;		# Leave these two FH to the kid only
close $stdout_w or die;

# Duplicate the STDOUT of the kid:
# These are workarounds for bug in sysread: it is reading in binary...
binmode $stdout_r;
binmode STDOUT;
$| = 1;  print while sysread $stdout_r, $_, 1<<16;

waitpid($pid, 0) >= 0 or die;

# END { print "# parent finished\r\n" }
@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@
