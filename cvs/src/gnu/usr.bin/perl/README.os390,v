head	1.2;
access;
symbols
	OPENBSD_6_1:1.2.0.4
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.1.7.0.12
	OPENBSD_6_0_BASE:1.1.1.7
	OPENBSD_5_9:1.1.1.7.0.6
	OPENBSD_5_9_BASE:1.1.1.7
	OPENBSD_5_8:1.1.1.7.0.8
	OPENBSD_5_8_BASE:1.1.1.7
	PERL_5_20_2:1.1.1.7
	OPENBSD_5_7:1.1.1.7.0.2
	OPENBSD_5_7_BASE:1.1.1.7
	PERL_5_20_1:1.1.1.7
	OPENBSD_5_6:1.1.1.7.0.4
	OPENBSD_5_6_BASE:1.1.1.7
	PERL_5_18_2:1.1.1.7
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.6.0.6
	OPENBSD_5_5_BASE:1.1.1.6
	OPENBSD_5_4:1.1.1.6.0.2
	OPENBSD_5_4_BASE:1.1.1.6
	PERL_5_16_3:1.1.1.6
	OPENBSD_5_3:1.1.1.5.0.10
	OPENBSD_5_3_BASE:1.1.1.5
	OPENBSD_5_2:1.1.1.5.0.8
	OPENBSD_5_2_BASE:1.1.1.5
	OPENBSD_5_1_BASE:1.1.1.5
	OPENBSD_5_1:1.1.1.5.0.6
	OPENBSD_5_0:1.1.1.5.0.4
	OPENBSD_5_0_BASE:1.1.1.5
	OPENBSD_4_9:1.1.1.5.0.2
	OPENBSD_4_9_BASE:1.1.1.5
	PERL_5_12_2:1.1.1.5
	OPENBSD_4_8:1.1.1.4.0.18
	OPENBSD_4_8_BASE:1.1.1.4
	OPENBSD_4_7:1.1.1.4.0.14
	OPENBSD_4_7_BASE:1.1.1.4
	PERL_5_10_1:1.1.1.4
	OPENBSD_4_6:1.1.1.4.0.16
	OPENBSD_4_6_BASE:1.1.1.4
	OPENBSD_4_5:1.1.1.4.0.12
	OPENBSD_4_5_BASE:1.1.1.4
	PERL_5_10_0:1.1.1.4
	OPENBSD_4_4:1.1.1.4.0.10
	OPENBSD_4_4_BASE:1.1.1.4
	OPENBSD_4_3:1.1.1.4.0.8
	OPENBSD_4_3_BASE:1.1.1.4
	OPENBSD_4_2:1.1.1.4.0.6
	OPENBSD_4_2_BASE:1.1.1.4
	OPENBSD_4_1:1.1.1.4.0.4
	OPENBSD_4_1_BASE:1.1.1.4
	OPENBSD_4_0:1.1.1.4.0.2
	OPENBSD_4_0_BASE:1.1.1.4
	PERL_5_8_8:1.1.1.4
	OPENBSD_3_9:1.1.1.3.0.14
	OPENBSD_3_9_BASE:1.1.1.3
	OPENBSD_3_8:1.1.1.3.0.12
	OPENBSD_3_8_BASE:1.1.1.3
	OPENBSD_3_7:1.1.1.3.0.10
	OPENBSD_3_7_BASE:1.1.1.3
	PERL_5_8_6:1.1.1.3
	OPENBSD_3_6:1.1.1.3.0.8
	OPENBSD_3_6_BASE:1.1.1.3
	PERL_5_8_5:1.1.1.3
	PERL_5_8_3:1.1.1.3
	OPENBSD_3_5:1.1.1.3.0.6
	OPENBSD_3_5_BASE:1.1.1.3
	PERL_5_8_2:1.1.1.3
	OPENBSD_3_4:1.1.1.3.0.4
	OPENBSD_3_4_BASE:1.1.1.3
	OPENBSD_3_3:1.1.1.3.0.2
	OPENBSD_3_3_BASE:1.1.1.3
	PERL_5_8_0:1.1.1.3
	OPENBSD_3_2:1.1.1.2.0.6
	OPENBSD_3_2_BASE:1.1.1.2
	OPENBSD_3_1:1.1.1.2.0.4
	OPENBSD_3_1_BASE:1.1.1.2
	OPENBSD_3_0:1.1.1.2.0.2
	OPENBSD_3_0_BASE:1.1.1.2
	PERL_5_6_1:1.1.1.2
	OPENBSD_2_9:1.1.1.1.0.8
	OPENBSD_2_9_BASE:1.1.1.1
	OPENBSD_2_8:1.1.1.1.0.6
	OPENBSD_2_8_BASE:1.1.1.1
	OPENBSD_2_7:1.1.1.1.0.4
	OPENBSD_2_7_BASE:1.1.1.1
	PERL_5_6_0:1.1.1.1
	OPENBSD_2_6:1.1.1.1.0.2
	OPENBSD_2_6_BASE:1.1.1.1
	PERL_500503:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2017.02.05.00.31.52;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	99.04.29.22.36.57;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.29.22.36.57;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.05.24.18.21.53;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.10.27.22.14.50;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2006.03.28.18.47.40;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2010.09.24.14.48.31;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2013.03.25.20.06.37;	author sthen;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2014.03.24.14.58.47;	author afresh1;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@This document is written in pod format hence there are punctuation
characters in odd places.  Do not worry, you've apparently got the
ASCII->EBCDIC translation worked out correctly.  You can read more
about pod in pod/perlpod.pod or the short summary in the INSTALL file.

=head1 NAME

perlos390 - building and installing Perl for OS/390 and z/OS

=head1 SYNOPSIS

This document will help you Configure, build, test and install Perl
on OS/390 (aka z/OS) Unix System Services.

B<This document needs to be updated, but we don't know what it should say.
Please email comments to L<perlbug@@perl.org|mailto:perlbug@@perl.org>.>

=head1 DESCRIPTION

This is a fully ported Perl for OS/390 Version 2 Release 3, 5, 6, 7,
8, and 9.  It may work on other versions or releases, but those are
the ones we've tested it on.

You may need to carry out some system configuration tasks before
running the Configure script for Perl.


=head2 Tools

The z/OS Unix Tools and Toys list may prove helpful and contains links
to ports of much of the software helpful for building Perl.
http://www.ibm.com/servers/eserver/zseries/zos/unix/bpxa1toy.html


=head2 Unpacking Perl distribution on OS/390

If using ftp remember to transfer the distribution in binary format.

Gunzip/gzip for OS/390 is discussed at:

  http://www.ibm.com/servers/eserver/zseries/zos/unix/bpxa1ty1.html

to extract an ASCII tar archive on OS/390, try this:

   pax -o to=IBM-1047,from=ISO8859-1 -r < latest.tar

or

   zcat latest.tar.Z | pax -o to=IBM-1047,from=ISO8859-1 -r

If you get lots of errors of the form

 tar: FSUM7171 ...: cannot set uid/gid: EDC5139I Operation not permitted

you didn't read the above and tried to use tar instead of pax, you'll
first have to remove the (now corrupt) perl directory

   rm -rf perl-...

and then use pax.

=head2 Setup and utilities for Perl on OS/390

Be sure that your yacc installation is in place including any necessary
parser template files. If you have not already done so then be sure to:

  cp /samples/yyparse.c /etc

This may also be a good time to ensure that your /etc/protocol file
and either your /etc/resolv.conf or /etc/hosts files are in place.
The IBM document that described such USS system setup issues was
SC28-1890-07 "OS/390 UNIX System Services Planning", in particular
Chapter 6 on customizing the OE shell.

GNU make for OS/390, which is recommended for the build of perl (as
well as building CPAN modules and extensions), is available from the
L</Tools>.

Some people have reported encountering "Out of memory!" errors while
trying to build Perl using GNU make binaries.  If you encounter such
trouble then try to download the source code kit and build GNU make
from source to eliminate any such trouble.  You might also find GNU make
(as well as Perl and Apache) in the red-piece/book "Open Source Software
for OS/390 UNIX", SG24-5944-00 from IBM.

If instead of the recommended GNU make you would like to use the system
supplied make program then be sure to install the default rules file
properly via the shell command:

    cp /samples/startup.mk /etc

and be sure to also set the environment variable _C89_CCMODE=1 (exporting
_C89_CCMODE=1 is also a good idea for users of GNU make).

You might also want to have GNU groff for OS/390 installed before
running the "make install" step for Perl.

There is a syntax error in the /usr/include/sys/socket.h header file
that IBM supplies with USS V2R7, V2R8, and possibly V2R9.  The problem with
the header file is that near the definition of the SO_REUSEPORT constant
there is a spurious extra '/' character outside of a comment like so:

 #define SO_REUSEPORT    0x0200    /* allow local address & port
                                      reuse */                    /

You could edit that header yourself to remove that last '/', or you might
note that Language Environment (LE) APAR PQ39997 describes the problem
and PTF's UQ46272 and UQ46271 are the (R8 at least) fixes and apply them.
If left unattended that syntax error will turn up as an inability for Perl
to build its "Socket" extension.

For successful testing you may need to turn on the sticky bit for your
world readable /tmp directory if you have not already done so (see man chmod).

=head2 Configure Perl on OS/390

Once you've unpacked the distribution, run "sh Configure" (see INSTALL
for a full discussion of the Configure options).  There is a "hints" file
for os390 that specifies the correct values for most things.  Some things
to watch out for include:

=over 4

=item *

A message of the form:

 (I see you are using the Korn shell.  Some ksh's blow up on
 Configure, mainly on older exotic systems.  If yours does, try the
 Bourne shell instead.)

is nothing to worry about at all.

=item *

Some of the parser default template files in /samples are needed in /etc.
In particular be sure that you at least copy /samples/yyparse.c to /etc
before running Perl's Configure.  This step ensures successful extraction
of EBCDIC versions of parser files such as perly.c and perly.h.
This has to be done before running Configure the first time.  If you failed
to do so then the easiest way to re-Configure Perl is to delete your
misconfigured build root and re-extract the source from the tar ball.
Then you must ensure that /etc/yyparse.c is properly in place before
attempting to re-run Configure.

=item *

This port will support dynamic loading, but it is not selected by
default.  If you would like to experiment with dynamic loading then
be sure to specify -Dusedl in the arguments to the Configure script.
See the comments in hints/os390.sh for more information on dynamic loading.
If you build with dynamic loading then you will need to add the
$archlibexp/CORE directory to your LIBPATH environment variable in order
for perl to work.  See the config.sh file for the value of $archlibexp.
If in trying to use Perl you see an error message similar to:

 CEE3501S The module libperl.dll was not found.
   From entry point __dllstaticinit at compile unit offset +00000194
   at

then your LIBPATH does not have the location of libperl.x and either
libperl.dll or libperl.so in it.  Add that directory to your LIBPATH and
proceed.

=item *

Do not turn on the compiler optimization flag "-O".  There is
a bug in either the optimizer or perl that causes perl to
not work correctly when the optimizer is on.

=item *

Some of the configuration files in /etc used by the
networking APIs are either missing or have the wrong
names.  In particular, make sure that there's either
an /etc/resolv.conf or an /etc/hosts, so that
gethostbyname() works, and make sure that the file
/etc/proto has been renamed to /etc/protocol (NOT
/etc/protocols, as used by other Unix systems).
You may have to look for things like HOSTNAME and DOMAINORIGIN
in the "//'SYS1.TCPPARMS(TCPDATA)'" PDS member in order to
properly set up your /etc networking files.

=back

=head2 Build, Test, Install Perl on OS/390

Simply put:

    sh Configure
    make
    make test

if everything looks ok (see the next section for test/IVP diagnosis) then:

    make install

this last step may or may not require UID=0 privileges depending
on how you answered the questions that Configure asked and whether
or not you have write access to the directories you specified.

=head2 Build Anomalies with Perl on OS/390

"Out of memory!" messages during the build of Perl are most often fixed
by re building the GNU make utility for OS/390 from a source code kit.

Another memory limiting item to check is your MAXASSIZE parameter in your
'SYS1.PARMLIB(BPXPRMxx)' data set (note too that as of V2R8 address space
limits can be set on a per user ID basis in the USS segment of a RACF
profile).  People have reported successful builds of Perl with MAXASSIZE
parameters as small as 503316480 (and it may be possible to build Perl
with a MAXASSIZE smaller than that).

Within USS your /etc/profile or $HOME/.profile may limit your ulimit
settings.  Check that the following command returns reasonable values:

    ulimit -a

To conserve memory you should have your compiler modules loaded into the
Link Pack Area (LPA/ELPA) rather than in a link list or step lib.

If the c89 compiler complains of syntax errors during the build of the
Socket extension then be sure to fix the syntax error in the system
header /usr/include/sys/socket.h.

=head2 Testing Anomalies with Perl on OS/390

The "make test" step runs a Perl Verification Procedure, usually before
installation.  You might encounter STDERR messages even during a successful
run of "make test".  Here is a guide to some of the more commonly seen
anomalies:

=over 4

=item *

A message of the form:

 io/openpid...........CEE5210S The signal SIGHUP was received.
 CEE5210S The signal SIGHUP was received.
 CEE5210S The signal SIGHUP was received.
 ok

indicates that the t/io/openpid.t test of Perl has passed but done so
with extraneous messages on stderr from CEE.

=item *

A message of the form:

 lib/ftmp-security....File::Temp::_gettemp: Parent directory (/tmp/)
 is not safe (sticky bit not set when world writable?) at
 lib/ftmp-security.t line 100
 File::Temp::_gettemp: Parent directory (/tmp/) is not safe (sticky
 bit not set when world writable?) at lib/ftmp-security.t line 100
 ok

indicates a problem with the permissions on your /tmp directory within the HFS.
To correct that problem issue the command:

     chmod a+t /tmp

from an account with write access to the directory entry for /tmp.

=item *

Out of Memory!

Recent perl test suite is quite memory hungry. In addition to the comments
above on memory limitations it is also worth checking for _CEE_RUNOPTS
in your environment. Perl now has (in miniperlmain.c) a C #pragma
to set CEE run options, but the environment variable wins.

The C code asks for:

 #pragma runopts(HEAP(2M,500K,ANYWHERE,KEEP,8K,4K) STACK(,,ANY,) ALL31(ON))

The important parts of that are the second argument (the increment) to HEAP,
and allowing the stack to be "Above the (16M) line". If the heap
increment is too small then when perl (for example loading unicode/Name.pl) tries
to create a "big" (400K+) string it cannot fit in a single segment
and you get "Out of Memory!" - even if there is still plenty of memory
available.

A related issue is use with perl's malloc. Perl's malloc uses C<sbrk()>
to get memory, and C<sbrk()> is limited to the first allocation so in this
case something like:

  HEAP(8M,500K,ANYWHERE,KEEP,8K,4K)

is needed to get through the test suite.


=back

=head2 Installation Anomalies with Perl on OS/390

The installman script will try to run on OS/390.  There will be fewer errors
if you have a roff utility installed.  You can obtain GNU groff from the
Redbook SG24-5944-00 ftp site.

=head2 Usage Hints for Perl on OS/390

When using perl on OS/390 please keep in mind that the EBCDIC and ASCII
character sets are different.  See perlebcdic.pod for more on such character
set issues.  Perl builtin functions that may behave differently under
EBCDIC are also mentioned in the perlport.pod document.

Open Edition (UNIX System Services) from V2R8 onward does support
#!/path/to/perl script invocation.  There is a PTF available from
IBM for V2R7 that will allow shell/kernel support for #!.  USS
releases prior to V2R7 did not support the #! means of script invocation.
If you are running V2R6 or earlier then see:

    head `whence perldoc`

for an example of how to use the "eval exec" trick to ask the shell to
have Perl run your scripts on those older releases of Unix System Services.

If you are having trouble with square brackets then consider switching your
rlogin or telnet client.  Try to avoid older 3270 emulators and ISHELL for
working with Perl on USS.

=head2 Floating Point Anomalies with Perl on OS/390

There appears to be a bug in the floating point implementation on S/390
systems such that calling int() on the product of a number and a small
magnitude number is not the same as calling int() on the quotient of
that number and a large magnitude number.  For example, in the following
Perl code:

    my $x = 100000.0;
    my $y = int($x * 1e-5) * 1e5; # '0'
    my $z = int($x / 1e+5) * 1e5;  # '100000'
    print "\$y is $y and \$z is $z\n"; # $y is 0 and $z is 100000

Although one would expect the quantities $y and $z to be the same and equal
to 100000 they will differ and instead will be 0 and 100000 respectively.

The problem can be further examined in a roughly equivalent C program:

    #include <stdio.h>
    #include <math.h>
    main()
    {
    double r1,r2;
    double x = 100000.0;
    double y = 0.0;
    double z = 0.0;
    x = 100000.0 * 1e-5;
    r1 = modf (x,&y);
    x = 100000.0 / 1e+5;
    r2 = modf (x,&z);
    printf("y is %e and z is %e\n",y*1e5,z*1e5);
    /* y is 0.000000e+00 and z is 1.000000e+05 (with c89) */
    }

=head2 Modules and Extensions for Perl on OS/390

Pure pure (that is non xs) modules may be installed via the usual:

    perl Makefile.PL
    make
    make test
    make install

If you built perl with dynamic loading capability then that would also
be the way to build xs based extensions.  However, if you built perl with
the default static linking you can still build xs based extensions for OS/390
but you will need to follow the instructions in ExtUtils::MakeMaker for
building statically linked perl binaries.  In the simplest configurations
building a static perl + xs extension boils down to:

    perl Makefile.PL
    make
    make perl
    make test
    make install
    make -f Makefile.aperl inst_perl MAP_TARGET=perl

In most cases people have reported better results with GNU make rather
than the system's /bin/make program, whether for plain modules or for
xs based extensions.

If the make process encounters trouble with either compilation or
linking then try setting the _C89_CCMODE to 1.  Assuming sh is your
login shell then run:

    export _C89_CCMODE=1

If tcsh is your login shell then use the setenv command.

=head1 AUTHORS

David Fiander and Peter Prymmer with thanks to Dennis Longnecker
and William Raffloer for valuable reports, LPAR and PTF feedback.
Thanks to Mike MacIsaac and Egon Terwedow for SG24-5944-00.
Thanks to Ignasi Roca for pointing out the floating point problems.
Thanks to John Goodyear for dynamic loading help.

=head1 SEE ALSO

L<INSTALL>, L<perlport>, L<perlebcdic>, L<ExtUtils::MakeMaker>.

 http://www.ibm.com/servers/eserver/zseries/zos/unix/bpxa1toy.html

 http://www.redbooks.ibm.com/redbooks/SG245944.html

 http://www.ibm.com/servers/eserver/zseries/zos/unix/bpxa1ty1.html#opensrc

 http://www.xray.mpe.mpg.de/mailing-lists/perl-mvs/

 http://publibz.boulder.ibm.com:80/cgi-bin/bookmgr_OS390/BOOKS/ceea3030/

 http://publibz.boulder.ibm.com:80/cgi-bin/bookmgr_OS390/BOOKS/CBCUG030/

=head2 Mailing list for Perl on OS/390

If you are interested in the z/OS (formerly known as OS/390)
and POSIX-BC (BS2000) ports of Perl then see the perl-mvs mailing list.
To subscribe, send an empty message to perl-mvs-subscribe@@perl.org.

See also:

    http://lists.perl.org/list/perl-mvs.html

There are web archives of the mailing list at:

    http://www.xray.mpe.mpg.de/mailing-lists/perl-mvs/
    http://archive.develooper.com/perl-mvs@@perl.org/

=head1 HISTORY

This document was originally written by David Fiander for the 5.005
release of Perl.

This document was podified for the 5.005_03 release of Perl 11 March 1999.

Updated 28 November 2001 for broken URLs.

Updated 12 November 2000 for the 5.7.1 release of Perl.

Updated 15 January 2001 for the 5.7.1 release of Perl.

Updated 24 January 2001 to mention dynamic loading.

Updated 12 March 2001 to mention //'SYS1.TCPPARMS(TCPDATA)'.

=cut

@


1.1
log
@Initial revision
@
text
@d1 4
a4 5
This document is written in pod format hence there are punctuation 
characters in in odd places.  Do not worry, you've apparently got 
the ASCII->EBCDIC translation worked out correctly.  You can read 
more about pod in pod/perlpod.pod or the short summary in the 
INSTALL file.
d8 1
a8 1
README.os390 - building and installing Perl for OS/390.
d13 4
a16 1
on OS/390 Unix System Services.
d20 14
a33 3
This is a fully ported perl for OS/390 Release 3, 5 and 6.
It may work on other versions, but those are the ones we've 
tested it on.
d35 1
a35 2
You may need to carry out some system configuration tasks before 
running the Configure script for perl.  
d37 1
a37 1
=head2 Unpacking
d41 1
a41 1
   http://www.s390.ibm.com/products/oe/bpxqp1.html
d47 16
a62 1
=head2 Setup and utilities
d69 1
a69 1
This may also be a good time to ensure that your /etc/protocol file 
d71 40
d112 2
a113 4
GNU make for OS/390, which may be required for the build of perl, 
is available from:

  http://www.mks.com/s390/gnu/index.htm
d115 1
a115 1
=head2 Configure
d117 2
a118 2
Once you've unpacked the distribution, run "sh Configure" (see INSTALL 
for a full discussion of the Configure options).  There is a "hints" file 
d126 7
a132 4
Some of the parser default template files in /samples are needed in /etc.
In particular be sure that you at least copy /samples/yyparse.c to /etc
before running perl's Configure.  This step ensures successful extraction
of EBCDIC versions of parser files such as perly.c.
d136 9
a144 3
This port doesn't support dynamic loading.  Although
OS/390 has support for DLLs, there are some differences
that cause problems for perl.
d148 16
a163 2
You may see a "WHOA THERE!!!" message for $d_shmatprototype
it is OK to keep the recommended "define".
d167 1
a167 1
Don't turn on the compiler optimization flag "-O".  There's
d176 1
a176 1
an /etc/resolv.conf or and /etc/hosts, so that
d180 3
d186 1
a186 1
=head2 Build, test, install
d194 1
a194 1
if everything looks ok then:
d202 101
a302 1
=head2 Usage Hints
d305 9
a313 6
character sets are different.  Perl builtin functions that may behave
differently under EBCDIC are mentioned in the perlport.pod document.

OpenEdition (UNIX System Services) does not (yet) support the #! means 
of script invokation.
See:
d318 39
a356 1
have perl run your scripts for you.
d358 1
a358 1
=head2 Extensions
d360 32
a391 4
You can build xs based extensions to Perl for OS/390 but will need to
follow the instructions in ExtUtils::MakeMaker for building statically
linked perl binaries.  In most cases people have reported better 
results with GNU make rather than the system's /bin/make.
d395 5
a399 1
David Fiander and Peter Prymmer.
d403 9
a411 1
L<INSTALL>, L<perlport>, L<ExtUtils::MakeMaker>.
d413 1
a413 1
=head2 Mailing list
d415 1
a415 3
The Perl Institute (http://www.perl.org/) maintains a perl-mvs 
mailing list of interest to all folks building and/or
using perl on EBCDIC platforms.  To subscibe, send a message of:
d417 1
a417 1
    subscribe perl-mvs
d419 12
a430 1
to majordomo@@perl.org.
d437 11
a447 1
This document was podified for the 5.005_03 release of perl 11 March 1999.
d450 1
@


1.1.1.1
log
@perl5.005_03
@
text
@@


1.1.1.2
log
@stock perl 5.6.1
@
text
@a0 1

d2 1
a2 1
characters in odd places.  Do not worry, you've apparently got 
d18 3
a20 3
This is a fully ported Perl for OS/390 Version 2 Release 3, 5, 6, 7, 
8, and 9.  It may work on other versions or releases, but those are 
the ones we've tested it on.
d23 1
a23 1
running the Configure script for Perl.  
a43 3
The IBM document that described such USS system setup issues was
SC28-1890-07 "OS/390 UNIX System Services Planning", in particular
Chapter 6 on customizing the OE shell.
d45 2
a46 2
GNU make for OS/390, which is recommended for the build of perl (as well as
building CPAN modules and extensions), is available from:
a49 36
Some people have reported encountering "Out of memory!" errors while 
trying to build Perl using GNU make binaries.  If you encounter such 
trouble then try to download the source code kit and build GNU make 
from source to eliminate any such trouble.  You might also find GNU make 
(as well as Perl and Apache) in the red-piece/book "Open Source Software 
for OS/390 UNIX", SG24-5944-00 from IBM.

If instead of the recommended GNU make you would like to use the system 
supplied make program then be sure to install the default rules file 
properly via the shell command:

    cp /samples/startup.mk /etc

and be sure to also set the environment variable _C89_CCMODE=1 (exporting
_C89_CCMODE=1 is also a good idea for users of GNU make).

You might also want to have GNU groff for OS/390 installed before
running the `make install` step for Perl.

There is a syntax error in the /usr/include/sys/socket.h header file
that IBM supplies with USS V2R7, V2R8, and possibly V2R9.  The problem with
the header file is that near the definition of the SO_REUSEPORT constant
there is a spurious extra '/' character outside of a comment like so:

 #define SO_REUSEPORT    0x0200    /* allow local address & port
                                      reuse */                    /

You could edit that header yourself to remove that last '/', or you might 
note that Language Environment (LE) APAR PQ39997 describes the problem 
and PTF's UQ46272 and UQ46271 are the (R8 at least) fixes and apply them.
If left unattended that syntax error will turn up as an inability for Perl 
to build its "Socket" extension.

For successful testing you may need to turn on the sticky bit for your 
world readable /tmp directory if you have not already done so (see man chmod).

d61 4
a64 6
A message of the form:

 (I see you are using the Korn shell.  Some ksh's blow up on Configure,
 mainly on older exotic systems.  If yours does, try the Bourne shell instead.)

is nothing to worry about at all.
d68 3
a70 9
Some of the parser default template files in /samples are needed in /etc.
In particular be sure that you at least copy /samples/yyparse.c to /etc
before running Perl's Configure.  This step ensures successful extraction
of EBCDIC versions of parser files such as perly.c, perly.h, and x2p/a2p.c.  
This has to be done before running Configure the first time.  If you failed 
to do so then the easiest way to re-Configure Perl is to delete your 
misconfigured build root and re-extract the source from the tar ball.  
Then you must ensure that /etc/yyparse.c is properly in place before 
attempting to re-run Configure.
d74 2
a75 15
This port will support dynamic loading, but it is not selected by
default.  If you would like to experiment with dynamic loading then
be sure to specify -Dusedl in the arguments to the Configure script.
See the comments in hints/os390.sh for more information on dynamic loading.
If you build with dynamic loading then you will need to add the
$archlibexp/CORE directory to your LIBPATH environment variable in order
for perl to work.  See the config.sh file for the value of $archlibexp.
If in trying to use Perl you see an error message similar to:

 CEE3501S The module libperl.dll was not found.
         From entry point __dllstaticinit at compile unit offset +00000194 at

then your LIBPATH does not have the location of libperl.x and either 
libperl.dll or libperl.so in it.  Add that directory to your LIBPATH and
proceed.
d79 1
a79 1
Do not turn on the compiler optimization flag "-O".  There is
d88 1
a88 1
an /etc/resolv.conf or an /etc/hosts, so that
a91 3
You may have to look for things like HOSTNAME and DOMAINORIGIN
in the "//'SYS1.TCPPARMS(TCPDATA)'" PDS member in order to 
properly set up your /etc networking files.
d103 1
a103 1
if everything looks ok (see the next section for test/IVP diagnosis) then:
a110 84
=head2 build anomalies

"Out of memory!" messages during the build of Perl are most often fixed
by re building the GNU make utility for OS/390 from a source code kit.

Another memory limiting item to check is your MAXASSIZE parameter in your
'SYS1.PARMLIB(BPXPRMxx)' data set (note too that as of V2R8 address space
limits can be set on a per user ID basis in the USS segment of a RACF 
profile).  People have reported successful builds of Perl with MAXASSIZE
parameters as small as 503316480 (and it may be possible to build Perl
with a MAXASSIZE smaller than that).

Within USS your /etc/profile or $HOME/.profile may limit your ulimit 
settings.  Check that the following command returns reasonable values:

    ulimit -a

To conserve memory you should have your compiler modules loaded into the
Link Pack Area (LPA/ELPA) rather than in a link list or step lib.

If the c89 compiler complains of syntax errors during the build of the
Socket extension then be sure to fix the syntax error in the system
header /usr/include/sys/socket.h.

=head2 testing anomalies

The `make test` step runs a Perl Verification Procedure, usually before
installation.  You might encounter STDERR messages even during a successful
run of `make test`.  Here is a guide to some of the more commonly seen
anomalies:

=over 4

=item *

A message of the form:

 comp/cpp.............ERROR CBC3191 ./.301989890.c:1     The character $ is not a
  valid C source character.
 FSUM3065 The COMPILE step ended with return code 12.
 FSUM3017 Could not compile .301989890.c. Correct the errors and try again.
 ok

indicates that the t/comp/cpp.t test of Perl's -P command line switch has
passed but that the particular invocation of c89 -E in the cpp script does
not suppress the C compiler check of source code validity.

=item *

A message of the form:

 io/openpid...........CEE5210S The signal SIGHUP was received.
 CEE5210S The signal SIGHUP was received.
 CEE5210S The signal SIGHUP was received.
 ok

indicates that the t/io/openpid.t test of Perl has passed but done so
with extraneous messages on stderr from CEE.

=item *

A message of the form:

 lib/ftmp-security....File::Temp::_gettemp: Parent directory (/tmp/) is not safe
 (sticky bit not set when world writable?) at lib/ftmp-security.t line 100
 File::Temp::_gettemp: Parent directory (/tmp/) is not safe (sticky bit not
 set when world writable?) at lib/ftmp-security.t line 100
 ok

indicates a problem with the permissions on your /tmp directory within the HFS.
To correct that problem issue the command:

     chmod a+t /tmp

from an account with write access to the directory entry for /tmp.

=back

=head2 installation anomalies

The installman script will try to run on OS/390.  There will be fewer errors
if you have a roff utility installed.  You can obtain GNU groff from the 
Redbook SG24-5944-00 ftp site.

d114 6
a119 9
character sets are different.  See perlebcdic.pod for more on such character 
set issues.  Perl builtin functions that may behave differently under 
EBCDIC are also mentioned in the perlport.pod document.

Open Edition (UNIX System Services) from V2R8 onward does support 
#!/path/to/perl script invocation.  There is a PTF available from 
IBM for V2R7 that will allow shell/kernel support for #!.  USS
releases prior to V2R7 did not support the #! means of script invocation.  
If you are running V2R6 or earlier then see:
d124 1
a124 66
have Perl run your scripts on those older releases of Unix System Services.

If you are having trouble with square brackets then consider switching your
rlogin or telnet client.  Try to avoid older 3270 emulators and ISHELL for 
working with Perl on USS.

=head2 Floating point anomalies

There appears to be a bug in the floating point implementation on S/390 
systems such that calling int() on the product of a number and a small 
magnitude number is not the same as calling int() on the quotient of 
that number and a large magnitude number.  For example, in the following 
Perl code:

    my $x = 100000.0;
    my $y = int($x * 1e-5) * 1e5; # '0'
    my $z = int($x / 1e+5) * 1e5;  # '100000'
    print "\$y is $y and \$z is $z\n"; # $y is 0 and $z is 100000

Although one would expect the quantities $y and $z to be the same and equal 
to 100000 they will differ and instead will be 0 and 100000 respectively.

The problem can be further examined in a roughly equivalent C program:

    #include <stdio.h>
    #include <math.h>
    main()
    {
    double r1,r2;
    double x = 100000.0;
    double y = 0.0;
    double z = 0.0;
    x = 100000.0 * 1e-5;
    r1 = modf (x,&y);
    x = 100000.0 / 1e+5;
    r2 = modf (x,&z);
    printf("y is %e and z is %e\n",y*1e5,z*1e5);
    /* y is 0.000000e+00 and z is 1.000000e+05 (with c89) */
    }

=head2 Modules and Extensions

Pure pure (that is non xs) modules may be installed via the usual:

    perl Makefile.PL
    make
    make test
    make install

If you built perl with dynamic loading capability then that would also
be the way to build xs based extensions.  However, if you built perl with
the default static linking you can still build xs based extensions for OS/390 
but you will need to follow the instructions in ExtUtils::MakeMaker for 
building statically linked perl binaries.  In the simplest configurations 
building a static perl + xs extension boils down to:

    perl Makefile.PL
    make
    make perl
    make test
    make install
    make -f Makefile.aperl inst_perl MAP_TARGET=perl

In most cases people have reported better results with GNU make rather 
than the system's /bin/make program, whether for plain modules or for
xs based extensions.
d126 1
a126 3
If the make process encounters trouble with either compilation or
linking then try setting the _C89_CCMODE to 1.  Assuming sh is your
login shell then run:
d128 4
a131 3
    export _C89_CCMODE=1

If tcsh is your login shell then use the setenv command.
d135 1
a135 5
David Fiander and Peter Prymmer with thanks to Dennis Longnecker
and William Raffloer for valuable reports, LPAR and PTF feedback.
Thanks to Mike MacIsaac and Egon Terwedow for SG24-5944-00.
Thanks to Ignasi Roca for pointing out the floating point problems.
Thanks to John Goodyear for dynamic loading help.
d139 1
a139 11
L<INSTALL>, L<perlport>, L<perlebcdic>, L<ExtUtils::MakeMaker>.

    http://www.mks.com/s390/gnu/index.htm

    http://www.redbooks.ibm.com/abstracts/sg245944.html

    http://www.s390.ibm.com/products/oe/bpxa1ty1.html#opensrc

    http://www.s390.ibm.com/products/oe/portbk/bpxacenv.html

    http://www.xray.mpe.mpg.de/mailing-lists/perl-mvs/
d145 1
a145 2
using perl on all EBCDIC platforms (not just OS/390).  
To subscribe, send a message of:
d149 1
a149 8
to majordomo@@perl.org.   See also:

    http://lists.perl.org/showlist.cgi?name=perl-mvs

There are web archives of the mailing list at:

    http://www.xray.mpe.mpg.de/mailing-lists/perl-mvs/
    http://archive.develooper.com/perl-mvs@@perl.org/
d156 1
a156 9
This document was podified for the 5.005_03 release of Perl 11 March 1999.

Updated 12 November 2000 for the 5.7.1 release of Perl.

Updated 15 January 2001 for the 5.7.1 release of Perl.

Updated 24 January 2001 to mention dynamic loading.

Updated 12 March 2001 to mention //'SYS1.TCPPARMS(TCPDATA)'.
a158 1

@


1.1.1.3
log
@stock perl 5.8.0 from CPAN
@
text
@d1 6
a6 4
This document is written in pod format hence there are punctuation
characters in odd places.  Do not worry, you've apparently got the
ASCII->EBCDIC translation worked out correctly.  You can read more
about pod in pod/perlpod.pod or the short summary in the INSTALL file.
d10 1
a10 1
README.os390 - building and installing Perl for OS/390 and z/OS
d15 1
a15 1
on OS/390 (aka z/OS) Unix System Services.
d19 2
a20 2
This is a fully ported Perl for OS/390 Version 2 Release 3, 5, 6, 7,
8, and 9.  It may work on other versions or releases, but those are
d23 2
a24 9
You may need to carry out some system configuration tasks before
running the Configure script for Perl.


=head2 Tools

The z/OS Unix Tools and Toys list may prove helpful and contains links
to ports of much of the software helpful for building Perl.
http://www-1.ibm.com/servers/eserver/zseries/zos/unix/bpxa1toy.html
d26 1
a26 4

=head2 Unpacking Perl distribution on OS/390

If using ftp remember to transfer the distribution in binary format.
d30 1
a30 1
  http://www-1.ibm.com/servers/eserver/zseries/zos/unix/faq/bpxqp1.html
d36 1
a36 16
or

   zcat latest.tar.Z | pax -o to=IBM-1047,from=ISO8859-1 -r

If you get lots of errors of the form

  tar: FSUM7171 ...: cannot set uid/gid: EDC5139I Operation not permitted.

you didn't read the above and tried to use tar instead of pax, you'll
first have to remove the (now corrupt) perl directory

   rm -rf perl-...

and then use pax.

=head2 Setup and utilities for Perl on OS/390
d43 1
a43 1
This may also be a good time to ensure that your /etc/protocol file
d49 10
a58 9
GNU make for OS/390, which is recommended for the build of perl (as
well as building CPAN modules and extensions), is available from the
L</Tools>.

Some people have reported encountering "Out of memory!" errors while
trying to build Perl using GNU make binaries.  If you encounter such
trouble then try to download the source code kit and build GNU make
from source to eliminate any such trouble.  You might also find GNU make
(as well as Perl and Apache) in the red-piece/book "Open Source Software
d61 2
a62 2
If instead of the recommended GNU make you would like to use the system
supplied make program then be sure to install the default rules file
d81 2
a82 2
You could edit that header yourself to remove that last '/', or you might
note that Language Environment (LE) APAR PQ39997 describes the problem
d84 1
a84 1
If left unattended that syntax error will turn up as an inability for Perl
d87 1
a87 1
For successful testing you may need to turn on the sticky bit for your
d90 1
a90 1
=head2 Configure Perl on OS/390
d92 2
a93 2
Once you've unpacked the distribution, run "sh Configure" (see INSTALL
for a full discussion of the Configure options).  There is a "hints" file
d113 5
a117 5
of EBCDIC versions of parser files such as perly.c, perly.h, and x2p/a2p.c.
This has to be done before running Configure the first time.  If you failed
to do so then the easiest way to re-Configure Perl is to delete your
misconfigured build root and re-extract the source from the tar ball.
Then you must ensure that /etc/yyparse.c is properly in place before
d134 1
a134 1
then your LIBPATH does not have the location of libperl.x and either
d154 1
a154 1
in the "//'SYS1.TCPPARMS(TCPDATA)'" PDS member in order to
d159 1
a159 1
=head2 Build, Test, Install Perl on OS/390
d175 1
a175 1
=head2 Build Anomalies with Perl on OS/390
d182 1
a182 1
limits can be set on a per user ID basis in the USS segment of a RACF
d187 1
a187 1
Within USS your /etc/profile or $HOME/.profile may limit your ulimit
d199 1
a199 1
=head2 Testing Anomalies with Perl on OS/390
a250 29
=item *

Out of Memory!

Recent perl test suite is quite memory hunrgy. In addition to the comments
above on memory limitations it is also worth checking for _CEE_RUNOPTS
in your environment. Perl now has (in miniperlmain.c) a C #pragma
to set CEE run options, but the environment variable wins.

The C code asks for:

 #pragma runopts(HEAP(2M,500K,ANYWHERE,KEEP,8K,4K) STACK(,,ANY,) ALL31(ON))

The important parts of that are the second argument (the increment) to HEAP,
and allowing the stack to be "Above the (16M) line". If the heap
increment is too small then when perl (for example loading unicode/Name.pl) tries
to create a "big" (400K+) string it cannot fit in a single segment
and you get "Out of Memory!" - even if there is still plenty of memory
available.

A related issue is use with perl's malloc. Perl's malloc uses C<sbrk()>
to get memory, and C<sbrk()> is limited to the first allocation so in this
case something like:

  HEAP(8M,500K,ANYWHERE,KEEP,8K,4K)

is needed to get through the test suite.


d253 1
a253 1
=head2 Installation Anomalies with Perl on OS/390
d256 1
a256 1
if you have a roff utility installed.  You can obtain GNU groff from the
d259 1
a259 1
=head2 Usage Hints for Perl on OS/390
d262 2
a263 2
character sets are different.  See perlebcdic.pod for more on such character
set issues.  Perl builtin functions that may behave differently under
d266 2
a267 2
Open Edition (UNIX System Services) from V2R8 onward does support
#!/path/to/perl script invocation.  There is a PTF available from
d269 1
a269 1
releases prior to V2R7 did not support the #! means of script invocation.
d278 1
a278 1
rlogin or telnet client.  Try to avoid older 3270 emulators and ISHELL for
d281 1
a281 1
=head2 Floating Point Anomalies with Perl on OS/390
d283 4
a286 4
There appears to be a bug in the floating point implementation on S/390
systems such that calling int() on the product of a number and a small
magnitude number is not the same as calling int() on the quotient of
that number and a large magnitude number.  For example, in the following
d294 1
a294 1
Although one would expect the quantities $y and $z to be the same and equal
d315 1
a315 1
=head2 Modules and Extensions for Perl on OS/390
d326 3
a328 3
the default static linking you can still build xs based extensions for OS/390
but you will need to follow the instructions in ExtUtils::MakeMaker for
building statically linked perl binaries.  In the simplest configurations
d338 1
a338 1
In most cases people have reported better results with GNU make rather
d362 1
a362 1
    http://www-1.ibm.com/servers/eserver/zseries/zos/unix/bpxa1toy.html
d366 3
a368 1
    http://www-1.ibm.com/servers/eserver/zseries/zos/unix/bpxa1ty1.html#opensrc
d372 1
a372 3
    http://publibz.boulder.ibm.com:80/cgi-bin/bookmgr_OS390/BOOKS/ceea3030/

    http://publibz.boulder.ibm.com:80/cgi-bin/bookmgr_OS390/BOOKS/CBCUG030/
d374 4
a377 1
=head2 Mailing list for Perl on OS/390
d379 1
a379 3
If you are interested in the VM/ESA, z/OS (formerly known as OS/390)
and POSIX-BC (BS2000) ports of Perl then see the perl-mvs mailing list.
To subscribe, send an empty message to perl-mvs-subscribe@@perl.org.
d381 1
a381 1
See also:
a395 2

Updated 28 November 2001 for broken URLs.
@


1.1.1.4
log
@perl 5.8.8 import
@
text
@d93 1
a93 1
running the "make install" step for Perl.
d223 1
a223 1
The "make test" step runs a Perl Verification Procedure, usually before
d225 1
a225 1
run of "make test".  Here is a guide to some of the more commonly seen
@


1.1.1.5
log
@Perl 5.12.2 from CPAN
@
text
@d29 1
a29 1
http://www.ibm.com/servers/eserver/zseries/zos/unix/bpxa1toy.html
d38 1
a38 1
  http://www.ibm.com/servers/eserver/zseries/zos/unix/bpxa1ty1.html
d234 14
d413 1
a413 1
    http://www.ibm.com/servers/eserver/zseries/zos/unix/bpxa1toy.html
d415 1
a415 1
    http://www.redbooks.ibm.com/redbooks/SG245944.html
d417 1
a417 1
    http://www.ibm.com/servers/eserver/zseries/zos/unix/bpxa1ty1.html#opensrc
@


1.1.1.6
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d8 1
a8 1
perlos390 - building and installing Perl for OS/390 and z/OS
d263 1
a263 1
Recent perl test suite is quite memory hungry. In addition to the comments
d419 1
a419 1
    http://lists.perl.org/list/perl-mvs.html
@


1.1.1.7
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d413 1
a413 1
If you are interested in the z/OS (formerly known as OS/390)
@


