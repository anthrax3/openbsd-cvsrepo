head	1.2;
access;
symbols
	OPENBSD_4_4:1.1.1.3.0.20
	OPENBSD_4_4_BASE:1.1.1.3
	OPENBSD_4_3:1.1.1.3.0.18
	OPENBSD_4_3_BASE:1.1.1.3
	OPENBSD_4_2:1.1.1.3.0.16
	OPENBSD_4_2_BASE:1.1.1.3
	OPENBSD_4_1:1.1.1.3.0.14
	OPENBSD_4_1_BASE:1.1.1.3
	OPENBSD_4_0:1.1.1.3.0.12
	OPENBSD_4_0_BASE:1.1.1.3
	PERL_5_8_8:1.1.1.3
	OPENBSD_3_9:1.1.1.3.0.10
	OPENBSD_3_9_BASE:1.1.1.3
	OPENBSD_3_8:1.1.1.3.0.8
	OPENBSD_3_8_BASE:1.1.1.3
	OPENBSD_3_7:1.1.1.3.0.6
	OPENBSD_3_7_BASE:1.1.1.3
	PERL_5_8_6:1.1.1.3
	OPENBSD_3_6:1.1.1.3.0.4
	OPENBSD_3_6_BASE:1.1.1.3
	PERL_5_8_5:1.1.1.3
	PERL_5_8_3:1.1.1.3
	OPENBSD_3_5:1.1.1.3.0.2
	OPENBSD_3_5_BASE:1.1.1.3
	PERL_5_8_2:1.1.1.3
	OPENBSD_3_4:1.1.1.2.0.10
	OPENBSD_3_4_BASE:1.1.1.2
	OPENBSD_3_3:1.1.1.2.0.8
	OPENBSD_3_3_BASE:1.1.1.2
	PERL_5_8_0:1.1.1.2
	OPENBSD_3_2:1.1.1.2.0.6
	OPENBSD_3_2_BASE:1.1.1.2
	OPENBSD_3_1:1.1.1.2.0.4
	OPENBSD_3_1_BASE:1.1.1.2
	OPENBSD_3_0:1.1.1.2.0.2
	OPENBSD_3_0_BASE:1.1.1.2
	PERL_5_6_1:1.1.1.2
	OPENBSD_2_9:1.1.1.1.0.6
	OPENBSD_2_9_BASE:1.1.1.1
	OPENBSD_2_8:1.1.1.1.0.4
	OPENBSD_2_8_BASE:1.1.1.1
	OPENBSD_2_7:1.1.1.1.0.2
	OPENBSD_2_7_BASE:1.1.1.1
	PERL_5_6_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2008.09.29.17.36.21;	author millert;	state dead;
branches;
next	1.1;

1.1
date	2000.04.06.16.11.04;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.04.06.16.11.04;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.05.24.18.26.14;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.12.03.02.44.36;	author millert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@# This file fills in a config_h.SH template based on the data
# of the file config.def and outputs a config.h.
#
# Written January 24, 2000 by Jarkko Hietaniemi [jhi@@iki.fi]
# Modified February 2, 2000 by Paul Green [Paul_Green@@stratus.com]

#
# Read in the definitions file
#

if (open(CONFIG_DEF, "config.def")) {
    while (<CONFIG_DEF>) {
        if (/^([^=]+)='(.*)'$/) {
            my ($var, $val) = ($1, $2);
            $define{$var} = $val;
        } else {
            warn "config.def: $.: illegal line: $_";
        }
    }
} else {
    die "$0: Cannot open config.def: $!";
}

close (CONFIG_DEF);

#
# Open the template input file.
#

unless (open(CONFIG_SH, "config_h.SH_orig")) {
    die "$0: Cannot open config_h.SH_orig: $!";
}

#
# Open the output file.
#

unless (open(CONFIG_H, ">config.h.new")) {
    die "$0: Cannot open config.h.new for output: $!";
}

#
#   Skip lines before the first !GROK!THIS!
#

while (<CONFIG_SH>) {
    last if /^sed <<!GROK!THIS!/;
}

#
#   Process the rest of the file, a line at a time.
#   Stop when the next !GROK!THIS! is found.
#

while (<CONFIG_SH>) {
    last if /^!GROK!THIS!/;
#
#   The case of #$d_foo at the BOL has to be handled carefully.
#   If $d_foo is "undef", then we must first comment out the entire line.
#
    if (/^#\$\w+/) {
        s@@^#(\$\w+)@@("$define{$1}" eq "undef")?"/*#define":"#$define{$1}"@@e;
    }
#
#   There could be multiple $variables on this line.
#   Find and replace all of them.
#
    if (/(\$\w+)/) {
        s/(\$\w+)/(exists $define{$1}) ? $define{$1} : $1/ge;
        print CONFIG_H;
    }
#
#   There are no variables, just print the line out.
#
    else {
        print CONFIG_H;
    }
}

unless (close (CONFIG_H)) {
    die "$0: Cannot close config.h.new: $!";
    }

close (CONFIG_SH);
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@virgin perl 5.6.0
@
text
@@


1.1.1.2
log
@stock perl 5.6.1
@
text
@a5 1
# Modified October 23, 2000 by Paul Green [Paul_Green@@stratus.com]
a15 1
            $used{$var} = 0;
d30 2
a31 3
$lineno = 0;
unless (open(CONFIG_SH, "../config_h.SH")) {
    die "$0: Cannot open ../config_h.SH: $!";
a46 1
    $lineno = $lineno + 1;
a55 1
    $lineno = $lineno + 1;
a57 7
#   The definition of SITEARCH and SITEARCH_EXP has to be commented-out.
#   The easiest way to do this is to special-case it here.
#
    if (/^#define SITEARCH*/) {
        s@@(^.*$)@@/*$1@@;
    }
#
d61 2
a62 6
    if (/^#(\$\w+)/) {
        if (exists $define{$1}) {
            $used{$1}=1;
            s@@^#(\$\w+)@@("$define{$1}" eq "undef") ?
                "/*#define":"#$define{$1}"@@e;
        }
d69 1
a69 3
        s/(\$\w+)/(exists $define{$1}) ?
            (($used{$1}=1),$define{$1}) :
            ((print "Undefined keyword $1 on line $lineno\n"),$1)/ge;
a84 7

while (($key,$value) = each %used) {
    if ($value == 0) {
        print "Unused keyword definition: $key\n";
    }
}

@


1.1.1.3
log
@perl 5.8.2 from CPAN
@
text
@d105 1
a105 1
    if ($value == 0 && $key ne '$undef') {
@


